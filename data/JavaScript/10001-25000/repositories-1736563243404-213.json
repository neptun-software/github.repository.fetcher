{
  "metadata": {
    "timestamp": 1736563243404,
    "page": 213,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "browserify/browserify",
      "stars": 14636,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0302734375,
          "content": "package-lock.json\nnode_modules\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.63671875,
          "content": "language: node_js\nnode_js:\n  - \"10\"\n  - \"9\"\n  - \"8\"\n  - \"6\"\n  - \"4\"\n  - \"iojs\"\n  - \"0.12\"\n  - \"0.10\"\n  - \"0.8\"\n  - \"0.6\"\nbefore_install:\n  # Old npm certs are untrusted https://github.com/npm/npm/issues/20191\n  - 'if [ \"${TRAVIS_NODE_VERSION}\" = \"0.6\" ] || [ \"${TRAVIS_NODE_VERSION}\" = \"0.8\" ]; then export NPM_CONFIG_STRICT_SSL=false; fi'\n  - 'nvm install-latest-npm'\ninstall:\n  - 'if [ \"${TRAVIS_NODE_VERSION}\" = \"0.6\" ] || [ \"${TRAVIS_NODE_VERSION}\" = \"0.9\" ]; then nvm install --latest-npm 0.8 && npm install && nvm use \"${TRAVIS_NODE_VERSION}\"; else npm install; fi;'\nsudo: false\nmatrix:\n  fast_finish: true\n  allow_failures:\n    - node_js: \"0.6\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2010 James Halliday\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.5732421875,
          "content": "environment:\n  matrix:\n    - nodejs_version: \"10\"\n    - nodejs_version: \"9\"\n    - nodejs_version: \"8\"\n    - nodejs_version: \"6\"\n    - nodejs_version: \"4\"\n    - nodejs_version: \"0.12\"\n    - nodejs_version: \"0.10\"\n\n# Install scripts. (runs after repo cloning)\ninstall:\n  # Get the latest stable version of Node.js or io.js\n  - ps: Install-Product node $env:nodejs_version\n  # install modules\n  - npm install\n\n# Post-install test scripts.\ntest_script:\n  # Output useful info for debugging.\n  - node --version\n  - npm --version\n  # run tests\n  - npm test\n\n# Don't actually build.\nbuild: off\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "changelog.markdown",
          "type": "blob",
          "size": 43.1826171875,
          "content": "# 17.0.1\n* Use `hasown` instead of `has`. ([4b1a5dc](https://github.com/browserify/browserify/commit/4b1a5dc0db56263b38dc98e155fb1908e810c1a9))\n* Use `String.prototype.slice` instead of `String.prototype.substr`. ([#2036](https://github.com/browserify/browserify/pull/2036))\n* Support relative paths in the `noParse` option. ([#2080](https://github.com/browserify/browserify/pull/2080))\n\n# 17.0.0\n* Upgrade events to v3.x. EventEmitter instances now have an `off()` method. `require('events').once` can be used to react to an event being emitted with `async`/`await` syntax. ([#1839](https://github.com/browserify/browserify/pull/1839))\n* Upgrade path-browserify to v1.x. ([#1838](https://github.com/browserify/browserify/pull/1838))\n* Upgrade stream-browserify to v3.x. `require('stream')` now matches the Node.js 10+ API. ([#1970](https://github.com/browserify/browserify/pull/1970))\n* Upgrade util to v0.12. Most notably, `util.promisify` and `util.callbackify` are finally available by default in browserify. ([#1844](https://gihub.com/browserify/browserify/pull/1844))\n* Add JSON syntax checking. Syntax errors in `.json` files will now fail to bundle. ([#1700](https://github.com/browserify/browserify/pull/1700))\n\n# 16.5.2\n\nUpgrade browser-resolve to v2.\n\nhttps://github.com/browserify/browserify/pull/1973\n\n# 16.5.1\n\nRemove deprecated `mkdirp` version in favour of `mkdirp-classic`.\n\nhttps://github.com/browserify/browserify/commit/00c913fa345dbb7f612bdad6b4acc91c706e98b2\n\nPin dependencies for Node.js 0.8 support.\n\nhttps://github.com/browserify/browserify/pull/1939\n\n# 16.5.0\n\nSupport custom name for `\"browser\"` field resolution in `package.json` using the `browserField` option.\n\nhttps://github.com/browserify/browserify/pull/1918\n\n# 16.4.0\n\nUpgrade stream-http to v3. This version drops support for IE10 and below.\n\nhttps://github.com/browserify/browserify/pull/1916\n\n# 16.3.0\n\nadd empty stub for the `http2` builtin module.\n\nhttps://github.com/browserify/browserify/pull/1913\n\nupdate license text to remove references to code that is no longer included.\n\nhttps://github.com/browserify/browserify/pull/1906\n\nadd more tests for folder resolution.\n\nhttps://github.com/browserify/browserify/pull/1139\n\n# 16.2.3\n\nadd empty stub for the `inspector` builtin module.\n\nhttps://github.com/browserify/browserify/pull/1854\n\nchange the \"browser\" field link to the browser-field-spec repo instead of the old gist.\n\nhttps://github.com/browserify/browserify/pull/1845\n\n# 16.2.2\n\nRemove some extraneous files from the published package.\n\n# 16.2.1\n\nFix relative `--external` paths on Windows.\n\nhttps://github.com/browserify/browserify/pull/1704\n\nFix tests to work on Windows, and add Appveyor CI for Windows testing.\n\nhttps://github.com/browserify/browserify/pull/1819\n\n# 16.2.0\n\nupdate the browser versions of `vm-browserify` and `string_decoder`.\n\n`string_decoder` updates to the Node 8+ API.\n`vm-browserify` replaces an unlicensed dependency by an MIT one.\n\nhttps://github.com/browserify/browserify/pull/1829\n\n# 16.1.1\n\nadd empty stub for the `perf_hooks` builtin module.\n\nhttps://github.com/browserify/browserify/pull/1815\n\n# 16.1.0\n\nadd `bare` and `node` options to the API, same as the `--bare` and `--node` CLI arguments.\n\nhttps://github.com/browserify/browserify/pull/1804\n\n# 16.0.0\n\nadd `--preserve-symlinks` option from Node 6.3\n\nhttps://github.com/browserify/browserify/pull/1742\nhttps://github.com/browserify/browserify/pull/1801\n\nupdate the browser version of `events` to 2.0.0â€”this version adds methods like `prependListener` that were introduced in recent node versions, but it is also twice the size of events v1.x (2KB instead of 1KB).\n\nhttps://github.com/browserify/browserify/pull/1803\n\nDynamically calculate `__dirname` and `__filename` when `--node` is passed\n\nhttps://github.com/browserify/browserify/pull/1725\n\nupgrade module-deps, see https://github.com/browserify/module-deps/releases/tag/v6.0.0\n\nhttps://github.com/browserify/browserify/commit/e5e1ec8799f1007a56118ae46646e0048385ed84\n\n# 15.2.0\n\ncreate parent directories if they do not exist when `--outfile /x/y/z/bundle.js` is used\n\nhttps://github.com/browserify/browserify/pull/995\n\nadd regression test for object rest spread syntax\n\nhttps://github.com/browserify/browserify/pull/1798\n\n# 15.1.0\n\nrestore support for node `< 4.0` until we can decide on a support schedule\n\n# 15.0.0\n\nfixed repository url in package.json.\n\nhttps://github.com/browserify/browserify/commit/5ec19eed48a5f46cb48d44be8ffc2f6bfb73fbfb\n\nupdate `module-deps` to 5.0.0, which enables requiring modules in backtick-enclosed strings.\n\nhttps://github.com/browserify/browserify/pull/1785\n\ndropped testing in node 0.10 and 0.12, set supported node versions to `>=4`\n\nhttps://github.com/browserify/browserify/pull/1743\nhttps://github.com/browserify/browserify/pull/1793\n\nadd support for passing arrays to the `exclude` and `ignore` methods.\n\nhttps://github.com/browserify/browserify/pull/1769\n\n# 14.5.0\n\nupdate `os-browserify` to 0.3.0, which adds a shim for node.js's `os.homedir` method.\n\nhttps://github.com/browserify/browserify/pull/1767\n\nupdate `browserify-zlib` to 0.2.0, which adds support for dictionaries.\n\nhttps://github.com/browserify/browserify/pull/1733\n\n# 14.4.0\n\nupdate `string_decoder` to 1.0.0, which matches the latest node.js behavior more closely.\n\nhttps://github.com/substack/node-browserify/pull/1714\n\n# 14.3.0\n\nupdate `https-browserify` to 1.0.0, which matches node.js behavior more closely.\n\n- throw exception if non-https URL is passed to `https.request` or `https.get`\n- support passing string URL as first argument to `https.request` and `https.get`\n\nhttps://github.com/substack/node-browserify/pull/1710\n\n# 14.2.0\n\nadds a --transform-key flag to the command-line tool\n\nhttps://github.com/substack/node-browserify/pull/1709\n\n# 14.1.0\n\nwrites to a temp outfile until success\n\nPreviously, browserify would overwrite output files when an error occurs.\n\nhttps://github.com/substack/node-browserify/pull/1673\nhttps://github.com/substack/node-browserify/issues/899\n\n# 14.0.0\n\nUpdates the version of the buffer package, which drops support for IE8-10.\n\nbuffer v5 removes the `Object` implementation and relies on a single,\nfast Typed Array (`Uint8Array`) implementation, greatly simplifying the\nmaintanence of the buffer package.\n\nIf IE8-10 support is critical to your web app, you can continue to rely on\nbrowserify v13, or see the PR for other workarounds.\n\nhttps://github.com/substack/node-browserify/pull/1678\n\n# 13.3.0\n\nupdates the version for the assert package\n\nhttps://github.com/substack/node-browserify/pull/1611\n\n# 13.2.0\n\nallow configuring transformKey from module-deps\nhttps://github.com/substack/node-browserify/pull/1670\n\n# 13.1.1\n\nboost performance by memoizing calls to path.relative()\n\nhttps://github.com/substack/node-browserify/pull/1544\n\n# 13.1.0\n\nexposes `opts.dedupe` and `--no-deupe` to optionally turn off deduping behavior:\n[#1581](https://github.com/substack/node-browserify/pull/1581)\n\n# 13.0.1\n\n## Internal\n\n[#1552](https://github.com/substack/node-browserify/pull/1552), [#1555](https://github.com/substack/node-browserify/pull/1555): Use native `Array.isArray` and drop `isarray` dep. ([@kt3k](https://github.com/kt3k))\n\n# 13.0.0\n\nThis release bumps the [`buffer`](https://www.npmjs.com/package/buffer) dependency\nto v4, which has one possible breaking change:\n\n- The `buffer.toArrayBuffer()` method on `Buffer` instances has been removed.\n\n(This is probably not a problem for 99.9% of users.)\n\nThis API was added in node v0.11.8 and\n[removed before v0.12 was released](https://github.com/nodejs/node-v0.x-archive/issues/7609#issuecomment-42903457).\nIt was added to browserify's `buffer` implementation but was never removed when v0.12\n was released. `buffer` v4 removes it so we have full parity with node.js.\n\nGoing forward, to get an `ArrayBuffer` from a node.js-style `Buffer`, users should\njust use `buffer.buffer`. This works because `Buffer` is a subclass of `Uint8Array`\nin both the browser and node.js (since v3).\n\nOn the plus side, this release also includes:\n\n- Performance improvements to `buffer` that\n[increase the speed](https://github.com/feross/buffer/pull/92) of some buffer\nmethods by as much as 30%!\n\n# 12.0.2\n\nnormalizes module paths on windows to consistently use `/`\n\nhttps://github.com/substack/node-browserify/pull/1424#issuecomment-170143099\n\n# 12.0.1\n\nadds the previously failing tests and a small change necessary for transforms to\nbe applied properly for symlinked packages\n\nhttps://github.com/substack/node-browserify/pull/1392\n\n# 12.0.0\n\nNode support changes: now testing against the latest node (currently 4.2.1).\nnode 0.8 is no longer supported, and iojs isn't actively tested.\n\nStream3 everywhere! Everything has been updated to use streams3.\n\nSourcemaps charset now uses an `=` instead of a `:`. This fixes certain issues\nwith Chinese characters in sourcemaps. See #753.\n\nmodule-deps has been updated to fix root transforms on symlinked modules. See\nhttps://github.com/substack/module-deps/pull/99.\n\nstream-http, the module that provides `http` support, dropped IE8 support. If\nyou depend on this, see https://github.com/jhiesey/stream-http#ie8-note.\n\nRemoved `builtins` and `commondir` â€“ both unused dependencies.\n\n# 11.2.0\n\nWhen `bundleExternal` is set to `false`, `process` and `buffer` are now correctly excluded. Also, using `--igv` via the CLI now works. That also means that `--bare` and `--node` actually insert `__filename` and `__dirname`.\n\nhttps://github.com/substack/node-browserify/pull/1361\n\n# 11.1.0\n\nadds a `'.'` to extensions if it wasn't added\n\nhttps://github.com/substack/node-browserify/pull/1380\n\n# 11.0.1\n\nThe callback form of bundle() uses the returned output stream instead of the\npipeline so that the `'end'` event will fire on the bundle instance.\n\nhttps://github.com/substack/watchify/pull/249#issuecomment-126061169\n\n# 11.0.0\n\n## streams3\n\nThe [`readable-stream`](https://npmjs.com/package/readable-stream) dependency was updated to `^2.0.0`. This package is inserted into bundles as `require('stream')`. Bundles will now get the latest streams implementation from io.js/node.js core, instead of an old version from node.js 0.11.x. Go forth and stream ALL THE DATA without fear!\n\n## shiny new HTTP package\n\n[John Hiesey](https://github.com/jhiesey) rewrote the [http-browserify](https://npmjs.org/package/http-browserify) package\nto create [stream-http](https://npmjs.org/package/stream-http), an implemention of `http` that supports streaming in modern browsers. Before v11.0.0, in most situations when you used `http.get` or `http.request`, the entire request would buffer in memory until the download was complete, and a single `'data'` event was emitted with the entire response as a string.\n\n`stream-http` uses the [Fetch API](https://fetch.spec.whatwg.org/) and various browser-specific XHR extensions to make binary streaming http requests work in as many browsers as possible.\n\nThe following browsers support true streaming, where only a small amount of the request has to be held in memory at once:\n\n* Chrome >= 43 (using the `fetch` api)\n* Firefox >= 9 (using `moz-chunked-arraybuffer` responseType with XHR)\n\nThe following browsers support pseudo-streaming, where the data is available before the request finishes, but the entire response must be held in memory:\n\n* Safari >= 5\n* IE >= 10\n* Most other Webkit-based browsers, including the default Android browser\n\nOlder browsers will work, without streaming support. There is no support for IE6 or IE7.\n\nCompared to `http-browserify`, it is not necessary to set `options.responseType`. The `responseType` property of the XHR object will be set automatically depending on what features are detected in the browser (although see `options.mode` in the [readme](https://github.com/jhiesey/stream-http) to see how you can optimize this choice manually).\n\nThe `response` is a streams3 stream, so all data is passed as `Buffer`s, unlike the variable types provided by the `'data'` event in `http-browserify`. This behavior tries to mimic the node core `http` module as closely as possible.\n\n* [#1327](https://github.com/substack/node-browserify/pull/1327)\n\nIf you're brave, go ahead and give v11.0.0 a try today!\n\n# 10.2.6\n\nuses the non-sync version of fs.realpath\n\n# 10.2.5\n\nfixes an issue with symlinked files executing multiple times\n\nhttps://github.com/substack/node-browserify/issues/1063\nhttps://github.com/substack/node-browserify/pull/1318\n\n# 10.2.4\n\nfixes requiring an entry from another entry\n\nremove unused dep \"deep-equal\" and unused file \"lib/_exclude.js\"\n\nhttps://github.com/substack/node-browserify/pull/1268\n\n# 10.2.3\n\nfixes an errant space in the `--no-browser-field` flag alias\nthat kept it from working\n\nhttps://github.com/substack/node-browserify/issues/1286\n\n# 10.2.2\n\nfix tests for tap@^1.1.0 (and update tap)\n\nhttps://github.com/substack/node-browserify/pull/1276\n\n# 10.2.1\n\nhousekeeping - removed unused code\n\nhttps://github.com/substack/node-browserify/pull/1273\n\n# 10.2.0\n\nremove unnecessary \"isDedupe\" json check. this was a hack-fix for watchify <=2.4.\n\nhttps://github.com/substack/node-browserify/pull/1244\n\nfixes for the \"noParse\" path matcher.\n\nhttps://github.com/substack/node-browserify/pull/1257\n\nadd syntax check cache. this speeds up rebuilds (like when using watchify).\n\nhttps://github.com/substack/node-browserify/pull/1253\n\nupdate to browser-pack@^5.0.0 - includes several fixes related to source maps.\n\nhttps://github.com/substack/node-browserify/pull/1259\n\n# 10.1.3\n\nReplace jsonstream with JSONStream\n\nhttps://github.com/substack/node-browserify/pull/1252\n\n# 10.1.2\n\nReplace JSONStream with jsonstream\nUpdate deps to avoid jsonstream npm case problems\n\nhttps://github.com/substack/node-browserify/pull/1247\nhttps://github.com/substack/node-browserify/commit/1ca71e23\n\n# 10.1.1\n\nensures that entry paths are always full paths\n\nhttps://github.com/substack/node-browserify/pull/1248\n\n# 10.1.0\n\nadds `--no-browser-field` and `opts.browserField = false` behavior to turn off\nthe package.json browser field. This is useful if you want to make a bundle with\na target of node or some environment with shimmed node primitives.\n\nA new alias `--node` sets `--no-browser-field` and `--bare`.\n\nhttps://github.com/substack/node-browserify/pull/1240\n\n# 10.0.0\n\n## Possibly Breaking Change\nThe â€˜processâ€™ dependency was updated to ~0.11.0, this module is inserted into bundles as the â€˜processâ€™ global/dependency.\nPreviously, an unhandled error thrown in a â€˜process.nextTickâ€™ task would prevent any subsequent tasks from running, forever.\nThe task queue now recovers from this condition, but may do so on a future browser tick.\nAs part of this update, â€˜process.nextTickâ€™ now accepts variadic arguments, passed to the task, added to io.js in 1.8.1.\n\n* [#1231](https://github.com/substack/node-browserify/pull/1231)\n* [defunctzombie/node-process#38](https://github.com/defunctzombie/node-process/pull/38)\n* [iojs/io.js#1077](https://github.com/iojs/io.js/pull/1077)\n\n## Other changes\n\n* Escapes JavaScript-unsafe characters from JSON. [#1211](https://github.com/substack/node-browserify/pull/1211)\n* Removes â€˜-vâ€™ shortcut for â€˜--versionâ€™ (conflicted with watchify) [#1222](https://github.com/substack/node-browserify/pull/1222)\n* Updated â€˜definedâ€™, â€˜punycodeâ€™, â€˜module-depsâ€™, and â€˜xtendâ€™ dependencies to reduce install size [#1230](https://github.com/substack/node-browserify/pull/1230)\n\n# 9.0.8\n\nmakes `.require({ expose: 'name' })` and `require('name')` work at the same time\n\nhttps://github.com/substack/node-browserify/issues/850\nhttps://github.com/substack/node-browserify/pull/1202\n\n# 9.0.7\n\nfixes an issue with catching error events on the b.bundle() stream\n\nhttps://github.com/substack/node-browserify/issues/1194\nhttps://github.com/substack/node-browserify/pull/1195\n\n# 9.0.6\n\nrepublishing 9.0.5 in an attempt to satisfy npm.\n\n# 9.0.5\n\nsets the stream returned by bundle() to be readable-only\n\nhttps://github.com/substack/node-browserify/pull/1187#issuecomment-89044008\n\n# 9.0.4\n\nhandles the colon better for drive paths and improves the test suite for windows\nusers\n\nhttps://github.com/substack/node-browserify/pull/1182\nhttps://github.com/substack/node-browserify/pull/1183\n\n# 9.0.3\n\nfixes a problem with deduping for json files.\n\nThis caused problems for running bundle() multiple times on the same instance\nwith caching turned on, which people reported encountering using watchify.\n\nhttps://github.com/substack/node-browserify/issues/1101\nhttps://github.com/substack/watchify/issues/143\n\n# 9.0.2\n\nfixes a bug where transforms in `opts.transform` were getting run twice\n\nhttps://github.com/substack/node-browserify/issues/1124\nhttps://github.com/substack/node-browserify/pull/1128\n\n# 9.0.1\n\nfixes exposed files persisting across bundles\n\nhttps://github.com/substack/node-browserify/pull/1030\n\n# 9.0.0\n\nupdates browser-pack which uses umd 3.0.0.\nThis sligtly changes how `--standalone $name` works.\n\nhttps://github.com/substack/browser-pack/pull/49\nhttps://github.com/substack/node-browserify/pull/1105\n\nAlso some tidying up around handling expose that module-deps can do now:\n\nhttps://github.com/substack/node-browserify/pull/1077\n\nand some fixes to regressions involving the `'package'` event:\n\nhttps://github.com/substack/node-resolve/issues/69\n\nUpstream changes in resolve/browser-resolve mean that `require('foo/bar')` works\nbetter with the package.json browser field. You can do something like:\n\n``` json\n{\n  \"browser\": { \"./bar\": \"whatever.js\" }\n}\n```\n\n# 8.1.3\n\nuses / instead of \\ for source map url separators on windows\nhttps://github.com/substack/node-browserify/pull/1096\n\n# 8.1.2\n\nresolves mappings from the browser field for externals\n\nhttps://github.com/substack/node-browserify/pull/1100\n\n# 8.1.1\n\nfixes an issue with resolving exposed packages relative to the basedir\n\nhttps://github.com/substack/node-browserify/pull/1059\nhttps://github.com/substack/node-browserify/issues/1039\nhttps://github.com/daiweilu/browserify-broken-require\n\n# 8.1.0\n\nuse assert@1.3, which fixes a bug in assert.deepEqual related to argument ordering,\nand ensures assert.deepEqual continues working in Chrome 40 and Firefox 35.\n\nuse process@0.10, which adds process.umask() and a faster process.nextTick()\nimplementation.\n\nhttps://github.com/substack/node-browserify/pull/1018\nhttps://github.com/substack/node-browserify/pull/1041\n\n# 8.0.3\n\npasses opts.debug through to insert-module-globals so that is can insert inline\nsource maps for its modifications\n\n# 8.0.2\n\nensures that transforms always execute in the order they were added\n\nhttps://github.com/substack/node-browserify/pull/1043\n\n# 8.0.1\n\nfixes some file path leaks in deduped deps\n\nhttps://github.com/substack/node-browserify/pull/994\nhttps://github.com/substack/node-browserify/issues/951\n\n# 8.0.0\n\nIn previous releases, the deduping logic was over-zealous about how it handled\nmodule references for duplicates. The prior behavior would detect when the\ndependency tree of a module matched an existing module in addition to having the\nexact same source code to share an instance. This was originally designed to\nsupport libraries like threejs that internally use `instanceof` checks that\ndon't usually work very well across multiple packages. This feature didn't pan\nout and didn't work very well in practice.\n\nLater, a better way of deduping emerged after some unrelated tweaks to\nbrowser-pack to support source introspection for webworkers. The reflection form\nof deduping using implicit arguments is now the only kind.\n\nThe deduping instance feature resulted in this bug:\nhttps://github.com/substack/node-browserify/issues/1027\nwhich created very surprising results when duplicate files were in use.\n\n# 7.1.0\n\nuses the new buffer@3.0.0, which passes node's own buffer test suite\n\nhttps://github.com/substack/node-browserify/pull/1040\n\n# 7.0.3\n\nallows modules to be bundled with local paths and exposed at the same time\n\nhttps://github.com/substack/node-browserify/pull/1033\n\n# 7.0.2\n\nfixes the global transform getting added each re-bundle\n\nhttps://github.com/substack/node-browserify/issues/1026\n\n# 7.0.1\n\nfixes rebundling (used by watchify) when transforming\n\nhttps://github.com/substack/node-browserify/issues/1012\n\nalso fixes https://github.com/substack/node-browserify/issues/1015\n\n# 7.0.0\n\nGlobal transforms are now resolved to an absolute path before walking files.\nThis fixes some bugs with local module versions taking precedence over global\ntransforms and unresolvable global transforms spanning system directories.\n\nThis is a small breaking change since now transform objects live in the pipeline\nbetween the record and deps phases. This should only affect programs that expect\nrecords in the pipeline to only contain file objects.\n\n# 6.3.4\n\nfixes a bug setting placeholder filenames on stream inputs to be properly unique\n\n# 6.3.3\n\nfixes an issue with the expose property when opts.fullPaths is enabled\n\nThis issue commonly crops up in watchify.\n\nhttps://github.com/substack/node-browserify/pull/991\nhttps://github.com/substack/node-browserify/issues/850\n\n# 6.3.2\n\nupdates regexps that test for absolute and relative paths to work better on\nwindows\n\nhttps://github.com/substack/node-browserify/pull/948\n\n# 6.3.1\n\nfixes ignoreTransform for the case where transforms were given in package.json\nas an array\n\nhttps://github.com/substack/node-browserify/pull/966\n\n# 6.3.0\n\nuses noParse for better parity with module-deps\n\nhttps://github.com/substack/node-browserify/pull/954\n\n# 6.2.0\n\nfixes #!shebang syntax when --bare is in effect by adding an unshebang phase to\nthe pipeline\n\nhttps://github.com/substack/node-browserify/issues/943\n\n# 6.1.2\n\nfixes the behavior for multiple external bundles\n\nhttps://github.com/substack/node-browserify/issues/933\n\n# 6.1.1\n\nfixes a circular dependency issue with readable-stream\n\nhttps://github.com/substack/node-browserify/pull/964\nhttps://github.com/substack/node-browserify/issues/963\n\n# 6.1.0\n\nallows transforms to be ignored throughout the entire bundle\n\nhttps://github.com/substack/node-browserify/pull/945\n\n# 6.0.3\n\nfixes a bug where module insert-module-globals would trigger too soon and\nconflict with other transforms\n\nhttps://github.com/substack/node-browserify/issues/867\nhttps://github.com/substack/node-browserify/issues/895\nhttps://github.com/substack/node-browserify/issues/855\n\n# 6.0.2\n\nupgrades process to 0.8.0\nhttps://github.com/substack/node-browserify/pull/906\n\n# 6.0.1\n\nrespects opts.expose in require()\nhttps://github.com/substack/node-browserify/pull/907\n\n# 6.0.0\n\nresolves source map maths relative to the base url. This should help with more\nreproducible builds.\n\nhttps://github.com/substack/node-browserify/pull/923\n\nVersion 6 is a tiny but breaking change to how source map paths work.\n\nNow all source map paths are relative by default. This makes it easier to have\ndeterministic debug builds across different systems and directories. If\nbrowserify is installed in a project-local directory, all the source map paths\nwill be self-contained and relative against that location in node_modules.\n\n# 5.13.1\n\nbails early if opts.basedir is not the correct type\nhttps://github.com/substack/node-browserify/pull/927\n\n# 5.13.0\n\nexposes global browserify options to transforms under opts._flags\nhttps://github.com/substack/node-browserify/pull/910\n\n# 5.12.2\n\nfixes the array form of b.external()\nhttps://github.com/substack/node-browserify/issues/930\n\n# 5.12.1\n\ndedupe deps when fullPaths is on\nhttps://github.com/substack/node-browserify/pull/917\nand fixes the crypto tests\n\n# 5.12.0\n\nadds back the array form for add() and require(), with extra places to add\noptions\n\n# 5.11.2\n\nfixes ignore for relative paths\nin https://github.com/substack/node-browserify/issues/896\n\n# 5.11.1\n\nfixes exports across resets, which caused issues for watchify with exports\nhttps://github.com/substack/node-browserify/pull/892\n\n# 5.11.0\n\nadds an implicit dependency on the original module during dedupe\nhttps://github.com/substack/node-browserify/pull/880\n\n# 5.10.1\n\nfixes the command-line client to properly ignore paths that don't match a glob\nhttps://github.com/substack/node-browserify/pull/866\n\n# 5.10.0\n\nadds back support for `.external(b)` on a browserify instance `b`\nthat was dropped on the v5 refactor\n\n# 5.9.3\n\nbuffers the record pipeline phase to start outputting after the first tick\nso that user plugins can capture and modify recorder output\n\n# 5.9.2\n\nfixes a bug with using --ignore to exclude node_modules packages on the command-line\n\nhttps://github.com/substack/node-browserify/pull/845\n\n# 5.9.1\n\nimproves the detection for --ignore\n\n# 5.9.0\n\nfixes bug with builtins that load json files (the 'constants' module),\nnew 'json' pipeline label\n\nhttps://github.com/substack/module-deps/issues/46\n\n# 5.8.0\n\nallow optional extensions in bin/args\n\n# 5.7.0\n\nre-instates transforms after a reset and fixes exposing the transform events\nproperly\n\n# 5.6.1\n\nmakes stream entry files deterministic\n\n# 5.6.0\n\nadds 'package' events from module-deps when a package.json file is read\n\n# 5.5.0\n\nadds back the `'bundle'` event and copies over options correctly to reset()\n\n# 5.4.2\n\nadds a note about derequire in standalone mode to the readme\n\n# 5.4.1\n\nfixes an error with basedir resolving plugins from names\n\n# 5.4.0\n\nalso allows opts.plugin from the constructor like transform\n\n# 5.3.0\n\npasses `.file` on stream inputs through to transforms\nhttps://github.com/substack/node-browserify/issues/744\n\n# 5.2.1\n\nsets require() for streams to not just be entry files\n\n# 5.2.0\n\nupgrades crypto-browserify to v3\n\n# 5.1.1\n\nupdates --list to always print file paths\n\n# 5.1.0\n\nadds back `.plugin()` which was mistakenly omitted\n\n# 5.0.8\n\nfixes using debug and standalone at the same time\nhttps://github.com/substack/node-browserify/issues/750\n\n# 5.0.7\n\nfixes command-line versions of -u and -x\nhttps://github.com/substack/node-browserify/issues/821\n\n# 5.0.6\n\ntest for --bare\n\n# 5.0.5\n\nfix for detectGlobals, --bare\nhttps://github.com/substack/node-browserify/issues/803\n\n# 5.0.4\n\nfixes --no-bundle-external with globals\n\nhttps://github.com/substack/node-browserify/issues/828\n\n# 5.0.3\n\nupgrades insert-module-globals to fix\nhttps://github.com/substack/node-browserify/issues/834\n\n# 5.0.2\n\nfixes the changelog link https://github.com/substack/node-browserify/pull/835\n\n# 5.0.1\n\nadds an untracked test\n\n# 5.0.0\n\nAt a glance:\n\n* extensible internal labeled-stream-splicer pipeline\n* bundle() - no longer accepts `opts`, callback gets a buffer\n* b.deps(), b.pack(), opts.pack, opts.deps are gone\n* can call bundle() multiple times on the same instance\n* a better --noparse matcher\n* id labeling integer index based instead of hash based\n* derequire removed for performance reasons\n* .external(bundle) has been removed (for now)\n* semicolon at end of output\n* hashing is gone so `expose: true` or explicit expose id is required for doing\nmulti-export bundles\n\nVersion 5 is a big rearranging of browserify internals with more places for\nexternal code to hook into the build pipeline.\n\nThese changes are mostly aligned around the theme of making it easier for\nexternal code to interface with browserify internals in a less hacky way.\n\n## pipeline\n\nNow the core of browserify is organized into a\n[labeled-stream-splicer](https://npmjs.org/package/labeled-stream-splicer)\npipeline. This means that user code and plugins can hook into browserify by\npushing themselves onto the pipeline at a label:\n\n``` js\nvar browserify = require('browserify');\nvar through = require('through2');\nvar bundle = browserify();\n\nbundle.pipeline.get('deps').push(through.obj(function (row, enc, next) {\n    console.log('DEP:', row.id);\n    this.push(row);\n    next();\n}));\n```\n\nUser code can remove existing transforms or add its own hooks. These are the\nlabeled sections you can get a handle on with `bundle.pipeline.get()`\n\n* `'record'` - save inputs to play back later on subsequent `bundle()` calls\n* `'deps'` - [module-deps](https://npmjs.org/package/module-deps)\n* `'unbom'` - remove byte-order markers\n* `'syntax'` - check for syntax errors\n* `'sort'` - sort the dependencies for deterministic bundles\n* `'dedupe'` - remove duplicate source contents\n* `'label'` - apply integer labels to files\n* `'emit-deps'` - emit `'dep'` event\n* `'debug'` - apply source maps\n* `'pack'` - [browser-pack](https://npmjs.org/package/browser-pack)\n* `'wrap'` - apply final wrapping, `require=` and a newline and semicolon\n\nBecause there is now a proper pipeline, `opts.pack`, `opts.deps`, `b.deps()`,\nand `b.pack()` are removed.\n\n## bundle()\n\nBig changes have been made to the `bundle()` function. All options have been\nmoved out of the `bundle(opts)` form and into the browserify constructor. Before\nthere was an unclear split between which arguments went into which function.\n\nYou can now call `bundle()` multiple times on the same instance, even in\nparallel. This will greatly simplify the caching system under watchify and will\nfix many long-standing bugs.\n\nThe callback to `bundle(cb)` is now called with `cb(err, buf)` instead of\n`cb(err, string)` as before.\n\n## labeling\n\nThe former hashing system is removed, in favor of file paths rooted at the\n`opts.basedir`, or the cwd.\n\nThis removal means that browserify can be much more consistent about applying\ninteger ids, which avoids exposing system paths in bundle output.\n\nHashes are used internally for deduping purposes, but they operate on the\nsource content only.\n\n## others\n\nThe matching logic in the `--noparse` feature is greatly improved.\n\nderequire has been taken out of core, which should speed up `--standalone`.\n\n# 4.2.3\n\nreverts 4.2.2 due to breaking some existing use-cases\n\n# 4.2.2\n\nfixes a bug applying transforms to symlinked files by resolving the realpath\nfirst https://github.com/substack/node-browserify/pull/831\n\n# 4.2.1\n\nSECURITY NOTICE\n\nMake sure your installation of browserify is using syntax-error@1.1.1 or\nlater. there was a security vulnerability where a malicious file could\nexecute code when browserified.\n\nThe vulnerability involves breaking out of `Function()`, which was used to\ncheck syntax for more informative errors. In node 0.10, `Function()` seems\nto be implemented in terms of `eval()`, so malicious code can execute even\nif the function returned by `Function()` was never called. node 0.11 does\nnot appear to be vulnerable.\n\nThanks to Cal Leeming [cal@iops.io]\nfor discovering and disclosing this bug!\n\n# 4.2.0\n\nupgrades http-browserify, crypto-browserify, and sets more versions to float\nwith ^ semvers\n\n# 4.1.11\n\nfixes a bug with transform argument handling https://github.com/substack/node-browserify/pull/795\n\n# 4.1.10\n\nupgrades browser-resolve to get opts.path fixes https://github.com/defunctzombie/node-browser-resolve/pull/43\n\n# 4.1.9\n\nupgrades resolve to fix relative NODE_PATH paths https://github.com/substack/node-resolve/pull/46\n\n# 4.1.8\n\nbumps the module-deps version to get an ordering bugfix https://github.com/substack/module-deps/pull/39 https://github.com/substack/node-browserify/pull/774\n\n# 4.1.7\n\nfixes ignoreMissing when set in the constructor https://github.com/substack/node-browserify/pull/785\n\n# 4.1.6\n\nemits the 'id' event on the correct instance https://github.com/substack/node-browserify/pull/780\n\n# 4.1.5\n\nadded this document\n\n# 4.1.4\n\nfixes a bug in `ie<=8` support for querystring https://github.com/substack/node-browserify/issues/764\n\n# 4.1.2\n\nupgrades umd to fix some issues with --standalone https://github.com/substack/node-browserify/pull/714\n\n# 4.1.1\n\nmakes deps() behave more like bundle() https://github.com/substack/node-browserify/issues/757 and fixes global transform precedence https://github.com/substack/node-browserify/issues/759\n\n# 4.1.0\n\nupgrades the version of buffer to ^2.3.0\n\n# 4.0\n\nHere are the new breaking changes in browserify v4. Most users should be unaffected.\n\n## readable-stream\n\n`require('stream')` is now using [readable-stream](https://npmjs.org/package/readable-stream) (but the classic-mode shim persists in stream-browserify just like in node core). This should result in much smaller files for all modules using a similar-enough version of readable-stream as browserify itself. Other modules should be relatively unaffected.\n\n## removed .expose()\n\nRemoval of the previously-deprecated and obscure `bundle.expose()`.\n\n## took out implicit reading from stdin\n\nPreviously if you invoked the browserify command without any entry files as arguments and stdin was a tty, stdin would be implicitly added as an entry file. This feature was causing problems so it has been removed. https://github.com/substack/node-browserify/issues/724#issuecomment-42731877\n\n## more!\n\nIn the run-up to the 4.0, [module-deps](https://npmjs.org/package/module-deps) got an extensive rewrite with minimal test changes. Mostly it was just getting really messy because it was a giant ball-of-mud closure instead of a more straightforward prototype-based implementation with more clearly-defined methods.\n\nThe module-deps rewrite was triggered by [system paths showing up in build output](https://github.com/substack/node-browserify/issues/675) but was fixed in 3.46.1. The solution actually didn't end up needing changes in module-deps as originally anticipated but module-deps was in dire need of a cleanup.\n\n# 3.46.1\n\nfixes a bug exposing the host path of the process module in the bundle output https://github.com/substack/insert-module-globals/pull/32\n\n# 3.46.0\n\nallows array arguments in b.require(), b.add(), and b.external() https://github.com/substack/node-browserify/pull/742 from @spacepluk\n\n# 3.45.0\n\nrenders complete stack traces where before they were getting truncated https://github.com/substack/node-browserify/pull/741  patch from @secoif\n\n# 3.44.2\n\nslims down the dependency payload by 20M https://github.com/substack/node-browserify/pull/736\n\n# 3.44.1\n\nfixes the recursion error many people were getting https://github.com/substack/node-browserify/pull/713  Thanks to @MattMcKegg  for isolating the bug!\n\n# 3.44.0\n\nupgrades module-deps to 1.10.0 to make all the packageFilter dir argument pathways are consistent\n\n# 3.43.0\n\nlets b.transform(opts, t) args to be swapped around since opts is more common as a last argument\n\n# 3.42.0\n\npasses through the dir parameter in opts.packageFilter from module-deps 1.10.0 https://github.com/substack/node-browserify/pull/731\n\n# 3.41.0\n\nhas an option to disable external files, making it easier to run bundles in node for code coverage https://github.com/substack/node-browserify/pull/672\n\n# 3.40.4\n\nmakes --list work again https://github.com/substack/node-browserify/pull/727\n\n# 3.40.3\n\nmerges a patch for piping via stdin and --require at the same time https://github.com/substack/node-browserify/pull/728\n\n# 3.40.2\n\nupgrades module-deps to fix --list for $NODE_PATH https://github.com/substack/node-browserify/issues/726\n\n# 3.40.1\n\nupgrades module-deps to get this packageTransform bugfix https://github.com/substack/module-deps/pull/32\n\n# 3.40.0\n\nmodifies the behavior of opts.builtins to be more useful and intuitive https://github.com/substack/node-browserify/pull/717\n\n# 3.39.0\n\nadds a zlib that has parity with node https://github.com/substack/node-browserify/pull/721\n\n# 3.38.0\n\nupgrades derequire which uses esprima-fb https://github.com/substack/node-browserify/pull/710\n\n# 3.37.2\n\nadds 'close' events back to the bundle stream. This should fix some issues with watchify.\n\n# 3.37.1\n\nfixes a bug with through being required in the bin/cmd.js instead of through2\n\n# 3.37.0\n\nalso reverts that require('process') thing which was mistakenly briefly put in the builtins list\n\n# 3.37.0\n\ngives streams2 semantics for bundle() https://github.com/substack/node-browserify/pull/646\n\n# 3.36.1\n\nfixes a dumb bug with ^ for versions that don't work in old npm clients\n\n# 3.36.0\n\nadds require('process') and removes the path resolution for process out of insert-module-globals\n\n# 3.35.0\n\nadds an empty tls stub to the builtins list https://github.com/substack/node-browserify/issues/703\n\n# 3.34.0\n\nfixes a bug with transforms not being applied in deps() https://github.com/substack/node-browserify/pull/708\n\n# 3.33.1\n\nfixes a bug with options in --global-transform on the command-line https://github.com/substack/node-browserify/pull/705\n\n# 3.33.0\n\nfixes parsing errors while maintaining es6 support by switching to esprima-fb https://github.com/substack/node-browserify/issues/698\n\n# 3.32.1\n\nshould be easier to shinkwrap and install on windows https://github.com/substack/node-browserify/pull/684\n\n# 3.32.0\n\nadds --full-path and opts.fullPath to always expand ids to full paths https://github.com/substack/node-browserify/pull/668#issuecomment-36586786\n\n# 3.31.2\n\nfixes a bug in the subarg argument parsing for multiple transforms https://github.com/substack/node-browserify/issues/678\n\n# 3.31.1\n\nuses process.cwd() as the default rebase target instead of commondir https://github.com/substack/node-browserify/pull/669#issuecomment-36078282\n\n# 3.31.0\n\nmerges https://github.com/substack/node-browserify/pull/669  which should help with more deterministic builds across systems\n\n# 3.30.4\n\nfixes parsing the --insert-global-vars argument properly https://github.com/substack/node-browserify/pull/674\n\n# 3.30.3\n\nfixes exclude globbing in the arg parser https://github.com/substack/node-browserify/pull/676\n\n# 3.30.2\n\nincluded a fix for --no-builtins for non-wrapped modules https://github.com/substack/node-browserify/pull/666\n\n# 3.30.1\n\nupgrades buffer for a utf8 fix https://github.com/substack/node-browserify/pull/656\n\n# 3.30.0\n\nadds globs for -u, -i, and -x https://github.com/substack/node-browserify/issues/654\n\n# 3.29.1\n\nadds relatively-resolved paths to ignored and excluded files\n\n# 3.29.0\n\nupgrades http-browserify to 1.3.1\n\n# 3.28.2\n\nnow always includes the full package.json content in the 'package' event\n\n# 3.28.1\n\nfixes a bug with stream entry order https://github.com/substack/node-browserify/pull/643\n\n# 3.28.0\n\nadds plugins for doing super fancy things like factored bundle output https://github.com/substack/node-browserify#plugins\n\n# 3.27.1\n\nfixes a bug resolving transform modules when browserify is under a symlink\n\n# 3.27.0\n\nadds transform configuration in the package.json browserify.transform field https://github.com/substack/module-deps#packagejson-transformkey\n\n# 3.26.0\n\nyou can pass arguments to transforms https://github.com/substack/node-browserify/blob/master/bin/advanced.txt#L67-L77\n\n# 3.25.2\n\nfixes a bug where the transform event didn't fire while IO was pending\n\n# 3.25.1\n\nfixes the transform docs\n\n# 3.25.0\n\nadds 'bundle' and 'transform' events https://github.com/substack/node-browserify#bonbundle-function-bundle-\n\n# 3.24.11\n\nupgrades derequire to 0.6.0. That should be the last piece needed for full es6 syntax support.\n\n# 3.24.10\n\nexpands the documentation for the package.json browser and browserify.transform fields https://github.com/substack/node-browserify#packagejson\n\n# 3.24.9\n\nfixes generator syntax and other es6-isms in browserify https://github.com/substack/node-browserify/issues/614\n\n# 3.24.7\n\nfixes noParse, which had accidentally been disabled in the insert-module-global changes and also closes https://github.com/substack/node-browserify/issues/504\n\n# 3.24.6\n\nsimilar to 3.24.5, 3.24.6 fixes some error reporting propagation from the browserify command\n\n# 3.24.3\n\nfixes how require('buffer').Buffer wasn't the same as implicit Buffer https://github.com/substack/node-browserify/issues/612\n\n# 3.24.2\n\nfixes where the output stream didn't emit \"close\" in standalone mode https://github.com/substack/node-browserify/pull/608\n\n# 3.24.1\n\nfixes an issue where --standalone combined with expose caused a syntax error https://github.com/substack/node-browserify/issues/489\n\n# 3.24.0\n\nremoves require() calls from --standalone so you can require() a standalone bundle again\n\n# 3.23.0\n\nmerges this tiny fix returning `this` in noParse() https://github.com/substack/node-browserify/pull/592\n\n# 3.22.0\n\nmerges https://github.com/substack/node-browserify/pull/587  which changes the source map prefix from //@ to //#\n\n# 3.21.0\n\nstandardizes the module missing error formats to have filename, parent, and type === 'not found' fields\n\n# 3.20.1\n\nhas a fix for the case where stdin is implicitly treated as the input stream instead of a file\n\n# 3.20.0\n\n3.20.0 is out: parity with how $NODE_PATH works in node https://github.com/substack/node-browserify/issues/593\n\n# 3.19.1\n\nrestores support for node 0.8 by upgrading concat-stream\n\n# 3.0\n\nA new [browserify](http://browserify.org) version is upon us, just in time for\nthe FESTIVE SEASON during which we in the northern hemisphere at mid to high\nlatitudes huddle for warmth around oxidizing hydrocarbons!\n\nThere are 2 big changes in v3 but most code should be relatively unaffected.\n\n## shiny new Buffer\n\n[feross](https://github.com/feross) forked\nthe [buffer-browserify](https://npmjs.org/package/buffer-browserify) package\nto create\n[native-buffer-browserify](https://npmjs.org/package/native-buffer-browserify),\na `Buffer` implementation that uses `Uint8Array` to get `buf[i]` notation and\nparity with the node core `Buffer` api without the performance hit of the\nprevious implementation and a much smaller file size. The downside is that\n`Buffer` now only works in browsers with `Uint8Array` and `DataView` support.\nAll the other modules should maintain existing browser support.\n\n*Update*: a [shim was added](https://npmjs.org/package/typedarray)\nto in 3.1 for Uint8Array and DataView support. Now you can use `Buffer` in every\nbrowser.\n\n## direct builtin dependencies\n\nIn v3, browserify no longer depends on\n[browser-builtins](https://npmjs.org/package/browser-builtins), in favor of\ndepending on packages directly. Instead of having some separate packages and\nsome files in a `builtin/` directory like browser-builtins, browserify now uses\n*only* external packages for the shims it uses. By only using external packages\nwe can keep browserify core focused purely on the static analysis and bundling\nmachinery while letting the individual packages worry about things like browser\ncompatibility and parity with the node core API as it evolves.\n\nIndividual, tiny packages should also be much easier for newcomers to contribute\npackages toward because they won't need to get up to speed with all the other\npieces going on and the packages can have their own tests and documentation.\nAdditionally, each package may find uses in other projects beside browserify\nmore easily and if people want variations on the versions of shims that ship\nwith browserify core this is easier to do when everything is separate.\n\nBack when we were using browser-builtins there was a large latency between\npushing out fixes to the individual packages and getting them into browserify\ncore because we had to wait on browser-builtins to upgrade the semvers in its\npackage.json. With direct dependencies we get much lower latency for package\nupgrades and much more granular control over upgrading packages.\n\nHere is the list of packages we now directly depend on in v3:\n\n* [assert](https://npmjs.org/package/assert)\n* [buffer](https://npmjs.org/package/native-buffer-browserify)\n* [console](https://npmjs.org/package/console-browserify)\n* [constants](https://npmjs.org/package/constants-browserify)\n* [crypto](https://npmjs.org/package/crypto-browserify)\n* [events](https://npmjs.org/package/events-browserify)\n* [http](https://npmjs.org/package/http-browserify)\n* [https](https://npmjs.org/package/https-browserify)\n* [os](https://npmjs.org/package/os-browserify)\n* [path](https://npmjs.org/package/path-browserify)\n* [punycode](https://npmjs.org/package/punycode)\n* [querystring](https://npmjs.org/package/querystring)\n* [stream](https://npmjs.org/package/stream-browserify)\n* [string_decoder](https://npmjs.org/package/string_decoder)\n* [timers](https://npmjs.org/package/timers-browserify)\n* [tty](https://npmjs.org/package/tty-browserify)\n* [url](https://npmjs.org/package/url)\n* [util](https://npmjs.org/package/util)\n* [vm](https://npmjs.org/package/vm-browserify)\n* [zlib](https://npmjs.org/package/zlib-browserify)\n\nThat's it! If you're bold enough to give v3 a spin, just do:\n\n```\nnpm install -g browserify\n```\n"
        },
        {
          "name": "code-of-conduct.md",
          "type": "blob",
          "size": 3.1796875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at (any one or all of these):\n\n* substack@gmail.com\n\nAll complaints will be reviewed and investigated and will result in a response\nthat is deemed necessary and appropriate to the circumstances. The project team\nis obligated to maintain confidentiality with regard to the reporter of an\nincident. Further details of specific enforcement policies may be posted\nseparately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 26.0498046875,
          "content": "var path = require('path');\nvar mdeps = require('module-deps');\nvar depsSort = require('deps-sort');\nvar bpack = require('browser-pack');\nvar insertGlobals = require('insert-module-globals');\nvar syntaxError = require('syntax-error');\n\nvar builtins = require('./lib/builtins.js');\n\nvar splicer = require('labeled-stream-splicer');\nvar through = require('through2');\nvar concat = require('concat-stream');\n\nvar inherits = require('inherits');\nvar EventEmitter = require('events').EventEmitter;\nvar xtend = require('xtend');\nvar isArray = Array.isArray;\nvar defined = require('defined');\nvar hasOwn = require('hasown');\nvar sanitize = require('htmlescape').sanitize;\nvar shasum = require('shasum-object');\n\nvar bresolve = require('browser-resolve');\nvar resolve = require('resolve');\n\nvar readonly = require('read-only-stream');\n\nmodule.exports = Browserify;\ninherits(Browserify, EventEmitter);\n\nvar fs = require('fs');\nvar path = require('path');\nvar cachedPathRelative = require('cached-path-relative');\n\nvar paths = {\n    empty: path.join(__dirname, 'lib/_empty.js')\n};\n\nfunction Browserify (files, opts) {\n    var self = this;\n    if (!(this instanceof Browserify)) return new Browserify(files, opts);\n    if (!opts) opts = {};\n    \n    if (typeof files === 'string' || isArray(files) || isStream(files)) {\n        opts = xtend(opts, { entries: [].concat(opts.entries || [], files) });\n    }\n    else opts = xtend(files, opts);\n\n    if (opts.node) {\n        opts.bare = true;\n        opts.browserField = false;\n    }\n    if (opts.bare) {\n        opts.builtins = false;\n        opts.commondir = false;\n        if (opts.insertGlobalVars === undefined) {\n            opts.insertGlobalVars = {}\n            Object.keys(insertGlobals.vars).forEach(function (name) {\n                if (name !== '__dirname' && name !== '__filename') {\n                    opts.insertGlobalVars[name] = undefined;\n                }\n            })\n        }\n    }\n    \n    self._options = opts;\n    if (opts.noparse) opts.noParse = opts.noparse;\n    \n    if (opts.basedir !== undefined && typeof opts.basedir !== 'string') {\n        throw new Error('opts.basedir must be either undefined or a string.');\n    }\n\n    opts.dedupe = opts.dedupe === false ? false : true;\n\n    self._external = [];\n    self._exclude = [];\n    self._ignore = [];\n    self._expose = {};\n    self._hashes = {};\n    self._pending = 0;\n    self._transformOrder = 0;\n    self._transformPending = 0;\n    self._transforms = [];\n    self._entryOrder = 0;\n    self._ticked = false;\n\n    var browserField = opts.browserField\n    self._bresolve = browserField === false\n        ? function (id, opts, cb) {\n            if (!opts.basedir) opts.basedir = path.dirname(opts.filename)\n            resolve(id, opts, cb)\n        }\n        : typeof browserField === 'string'\n            ? function (id, opts, cb) {\n                opts.browser = browserField\n                bresolve(id, opts, cb)\n            }\n            : bresolve\n    ;\n    self._syntaxCache = {};\n\n    var ignoreTransform = [].concat(opts.ignoreTransform).filter(Boolean);\n    self._filterTransform = function (tr) {\n        if (isArray(tr)) {\n            return ignoreTransform.indexOf(tr[0]) === -1;\n        }\n        return ignoreTransform.indexOf(tr) === -1;\n    };\n\n    self.pipeline = self._createPipeline(opts);\n    \n    [].concat(opts.transform).filter(Boolean).filter(self._filterTransform)\n    .forEach(function (tr) {\n        self.transform(tr);\n    });\n    \n    [].concat(opts.entries).filter(Boolean).forEach(function (file) {\n        self.add(file, { basedir: opts.basedir });\n    });\n    \n    [].concat(opts.require).filter(Boolean).forEach(function (file) {\n        self.require(file, { basedir: opts.basedir });\n    });\n    \n    [].concat(opts.plugin).filter(Boolean).forEach(function (p) {\n        self.plugin(p, { basedir: opts.basedir });\n    });\n}\n\nBrowserify.prototype.require = function (file, opts) {\n    var self = this;\n    if (isArray(file)) {\n        file.forEach(function (x) {\n            if (typeof x === 'object') {\n                self.require(x.file, xtend(opts, x));\n            }\n            else self.require(x, opts);\n        });\n        return this;\n    }\n    \n    if (!opts) opts = {};\n    var basedir = defined(opts.basedir, self._options.basedir, process.cwd());\n    var expose = opts.expose;\n    if (file === expose && /^[\\.]/.test(expose)) {\n        expose = '/' + relativePath(basedir, expose);\n    }\n    if (expose === undefined && this._options.exposeAll) {\n        expose = true;\n    }\n    if (expose === true) {\n        expose = '/' + relativePath(basedir, file);\n    }\n    \n    if (isStream(file)) {\n        self._pending ++;\n        var order = self._entryOrder ++;\n        file.pipe(concat(function (buf) {\n            var filename = opts.file || file.file || path.join(\n                basedir,\n                '_stream_' + order + '.js'\n            );\n            var id = file.id || expose || filename;\n            if (expose || opts.entry === false) {\n                self._expose[id] = filename;\n            }\n            if (!opts.entry && self._options.exports === undefined) {\n                self._bpack.hasExports = true;\n            }\n            var rec = {\n                source: buf.toString('utf8'),\n                entry: defined(opts.entry, false),\n                file: filename,\n                id: id\n            };\n            if (rec.entry) rec.order = order;\n            if (rec.transform === false) rec.transform = false;\n            self.pipeline.write(rec);\n            \n            if (-- self._pending === 0) self.emit('_ready');\n        }));\n        return this;\n    }\n    \n    var row;\n    if (typeof file === 'object') {\n        row = xtend(file, opts);\n    }\n    else if (!opts.entry && isExternalModule(file)) {\n        // external module or builtin\n        row = xtend(opts, { id: expose || file, file: file });\n    }\n    else {\n        row = xtend(opts, { file: path.resolve(basedir, file) });\n    }\n    \n    if (!row.id) {\n        row.id = expose || row.file;\n    }\n    if (expose || !row.entry) {\n        // Make this available to mdeps so that it can assign the value when it\n        // resolves the pathname.\n        row.expose = row.id;\n    }\n    \n    if (opts.external) return self.external(file, opts);\n    if (row.entry === undefined) row.entry = false;\n    \n    if (!row.entry && self._options.exports === undefined) {\n        self._bpack.hasExports = true;\n    }\n    \n    if (row.entry) row.order = self._entryOrder ++;\n    \n    if (opts.transform === false) row.transform = false;\n    self.pipeline.write(row);\n    return self;\n};\n\nBrowserify.prototype.add = function (file, opts) {\n    var self = this;\n    if (!opts) opts = {};\n    if (isArray(file)) {\n        file.forEach(function (x) { self.add(x, opts) });\n        return this;\n    }\n    return this.require(file, xtend({ entry: true, expose: false }, opts));\n};\n\nBrowserify.prototype.external = function (file, opts) {\n    var self = this;\n    if (isArray(file)) {\n        file.forEach(function (f) {\n            if (typeof f === 'object') {\n                self.external(f, xtend(opts, f));\n            }\n            else self.external(f, opts)\n        });\n        return this;\n    }\n    if (file && typeof file === 'object' && typeof file.bundle === 'function') {\n        var b = file;\n        self._pending ++;\n\n        var bdeps = {};\n        var blabels = {};\n\n        b.on('label', function (prev, id) {\n            self._external.push(id);\n\n            if (prev !== id) {\n                blabels[prev] = id;\n                self._external.push(prev);\n            }\n        });\n\n        b.pipeline.get('deps').push(through.obj(function (row, enc, next) {\n            bdeps = xtend(bdeps, row.deps);\n            this.push(row);\n            next();\n        }));\n\n        self.on('dep', function (row) {\n            Object.keys(row.deps).forEach(function (key) {\n                var prev = bdeps[key];\n                if (prev) {\n                    var id = blabels[prev];\n                    if (id) {\n                        row.indexDeps[key] = id;\n                    }\n                }\n            });\n        });\n\n        b.pipeline.get('label').once('end', function () {\n            if (-- self._pending === 0) self.emit('_ready');\n        });\n        return this;\n    }\n    \n    if (!opts) opts = {};\n    var basedir = defined(opts.basedir, process.cwd());\n    this._external.push(file);\n    this._external.push('/' + relativePath(basedir, file));\n    return this;\n};\n\nBrowserify.prototype.exclude = function (file, opts) {\n    if (!opts) opts = {};\n    if (isArray(file)) {\n        var self = this;\n        file.forEach(function(file) {\n            self.exclude(file, opts);\n        });\n        return this;\n    }\n    var basedir = defined(opts.basedir, process.cwd());\n    this._exclude.push(file);\n    this._exclude.push('/' + relativePath(basedir, file));\n    return this;\n};\n\nBrowserify.prototype.ignore = function (file, opts) {\n    if (!opts) opts = {};\n    if (isArray(file)) {\n        var self = this;\n        file.forEach(function(file) {\n            self.ignore(file, opts);\n        });\n        return this;\n    }\n    var basedir = defined(opts.basedir, process.cwd());\n\n    // Handle relative paths\n    if (file[0] === '.') {\n        this._ignore.push(path.resolve(basedir, file));\n    }\n    else {\n        this._ignore.push(file);\n    }\n    return this;\n};\n\nBrowserify.prototype.transform = function (tr, opts) {\n    var self = this;\n    if (typeof opts === 'function' || typeof opts === 'string') {\n        tr = [ opts, tr ];\n    }\n    if (isArray(tr)) {\n        opts = tr[1];\n        tr = tr[0];\n    }\n    \n    //if the bundler is ignoring this transform\n    if (typeof tr === 'string' && !self._filterTransform(tr)) {\n        return this;\n    }\n\n    function resolved () {\n      self._transforms[order] = rec;\n      -- self._pending;\n      if (-- self._transformPending === 0) {\n          self._transforms.forEach(function (transform) {\n            self.pipeline.write(transform);\n          });\n\n          if (self._pending === 0) {\n            self.emit('_ready');\n          }\n      }\n    }\n    \n    if (!opts) opts = {};\n    opts._flags = '_flags' in opts ? opts._flags : self._options;\n    \n    var basedir = defined(opts.basedir, this._options.basedir, process.cwd());\n    var order = self._transformOrder ++;\n    self._pending ++;\n    self._transformPending ++;\n\n    var rec = {\n        transform: tr,\n        options: opts,\n        global: opts.global\n    };\n\n    if (typeof tr === 'string') {\n        var topts = {\n            basedir: basedir,\n            paths: (self._options.paths || []).map(function (p) {\n                return path.resolve(basedir, p);\n            })\n        };\n        resolve(tr, topts, function (err, res) {\n            if (err) return self.emit('error', err);\n            rec.transform = res;\n            resolved();\n        });\n    }\n    else process.nextTick(resolved);\n    return this;\n};\n\nBrowserify.prototype.plugin = function (p, opts) {\n    if (isArray(p)) {\n        opts = p[1];\n        p = p[0];\n    }\n    if (!opts) opts = {};\n    var basedir = defined(opts.basedir, this._options.basedir, process.cwd());\n    if (typeof p === 'function') {\n        p(this, opts);\n    }\n    else {\n        var pfile = resolve.sync(String(p), { basedir: basedir })\n        var f = require(pfile);\n        if (typeof f !== 'function') {\n            throw new Error('plugin ' + p + ' should export a function');\n        }\n        f(this, opts);\n    }\n    return this;\n};\n\nBrowserify.prototype._createPipeline = function (opts) {\n    var self = this;\n    if (!opts) opts = {};\n    this._mdeps = this._createDeps(opts);\n    this._mdeps.on('file', function (file, id) {\n        pipeline.emit('file', file, id);\n        self.emit('file', file, id);\n    });\n    this._mdeps.on('package', function (pkg) {\n        pipeline.emit('package', pkg);\n        self.emit('package', pkg);\n    });\n    this._mdeps.on('transform', function (tr, file) {\n        pipeline.emit('transform', tr, file);\n        self.emit('transform', tr, file);\n    });\n    \n    var dopts = {\n        index: !opts.fullPaths && !opts.exposeAll,\n        dedupe: opts.dedupe,\n        expose: this._expose\n    };\n    this._bpack = bpack(xtend(opts, { raw: true }));\n    \n    var pipeline = splicer.obj([\n        'record', [ this._recorder() ],\n        'deps', [ this._mdeps ],\n        'json', [ this._json() ],\n        'unbom', [ this._unbom() ],\n        'unshebang', [ this._unshebang() ],\n        'syntax', [ this._syntax() ],\n        'sort', [ depsSort(dopts) ],\n        'dedupe', [ this._dedupe() ],\n        'label', [ this._label(opts) ],\n        'emit-deps', [ this._emitDeps() ],\n        'debug', [ this._debug(opts) ],\n        'pack', [ this._bpack ],\n        'wrap', []\n    ]);\n    if (opts.exposeAll) {\n        var basedir = defined(opts.basedir, process.cwd());\n        pipeline.get('deps').push(through.obj(function (row, enc, next) {\n            if (self._external.indexOf(row.id) >= 0) return next();\n            if (self._external.indexOf(row.file) >= 0) return next();\n            \n            if (isAbsolutePath(row.id)) {\n                row.id = '/' + relativePath(basedir, row.file);\n            }\n            Object.keys(row.deps || {}).forEach(function (key) {\n                row.deps[key] = '/' + relativePath(basedir, row.deps[key]);\n            });\n            this.push(row);\n            next();\n        }));\n    }\n    return pipeline;\n};\n\nBrowserify.prototype._createDeps = function (opts) {\n    var self = this;\n    var mopts = xtend(opts);\n    var basedir = defined(opts.basedir, process.cwd());\n\n    // Let mdeps populate these values since it will be resolving file paths\n    // anyway.\n    mopts.expose = this._expose;\n    mopts.extensions = [ '.js', '.json' ].concat(mopts.extensions || []);\n    self._extensions = mopts.extensions;\n\n    mopts.transform = [];\n    mopts.transformKey = defined(opts.transformKey, [ 'browserify', 'transform' ]);\n    mopts.postFilter = function (id, file, pkg) {\n        if (opts.postFilter && !opts.postFilter(id, file, pkg)) return false;\n        if (self._external.indexOf(file) >= 0) return false;\n        if (self._exclude.indexOf(file) >= 0) return false;\n\n        //filter transforms on module dependencies\n        if (pkg && pkg.browserify && pkg.browserify.transform) {\n            //In edge cases it may be a string\n            pkg.browserify.transform = [].concat(pkg.browserify.transform)\n                    .filter(Boolean)\n                    .filter(self._filterTransform);\n        }\n        return true;\n    };\n    mopts.filter = function (id) {\n        if (opts.filter && !opts.filter(id)) return false;\n        if (self._external.indexOf(id) >= 0) return false;\n        if (self._exclude.indexOf(id) >= 0) return false;\n        if (opts.bundleExternal === false && isExternalModule(id)) {\n            return false;\n        }\n        return true;\n    };\n    mopts.resolve = function (id, parent, cb) {\n        if (self._ignore.indexOf(id) >= 0) return cb(null, paths.empty, {});\n        \n        self._bresolve(id, parent, function (err, file, pkg) {\n            if (file && self._ignore.indexOf(file) >= 0) {\n                return cb(null, paths.empty, {});\n            }\n            if (file && self._ignore.length) {\n                var nm = file.replace(/\\\\/g, '/').split('/node_modules/')[1];\n                if (nm) {\n                    nm = nm.split('/')[0];\n                    if (self._ignore.indexOf(nm) >= 0) {\n                        return cb(null, paths.empty, {});\n                    }\n                }\n            }\n            \n            if (file) {\n                var ex = '/' + relativePath(basedir, file);\n                if (self._external.indexOf(ex) >= 0) {\n                    return cb(null, ex);\n                }\n                if (self._exclude.indexOf(ex) >= 0) {\n                    return cb(null, ex);\n                }\n                if (self._ignore.indexOf(ex) >= 0) {\n                    return cb(null, paths.empty, {});\n                }\n            }\n            if (err) cb(err, file, pkg)\n            else if (file) {\n                if (opts.preserveSymlinks && parent.id !== self._mdeps.top.id) {\n                    return cb(err, path.resolve(file), pkg, file)\n                }\n\n                fs.realpath(file, function (err, res) {\n                    cb(err, res, pkg, file);\n                });\n            } else cb(err, null, pkg)\n        });\n    };\n    \n    if (opts.builtins === false) {\n        mopts.modules = {};\n        self._exclude.push.apply(self._exclude, Object.keys(builtins));\n    }\n    else if (opts.builtins && isArray(opts.builtins)) {\n        mopts.modules = {};\n        opts.builtins.forEach(function (key) {\n            mopts.modules[key] = builtins[key];\n        });\n    }\n    else if (opts.builtins && typeof opts.builtins === 'object') {\n        mopts.modules = opts.builtins;\n    }\n    else mopts.modules = xtend(builtins);\n    \n    Object.keys(builtins).forEach(function (key) {\n        if (!hasOwn(mopts.modules, key)) self._exclude.push(key);\n    });\n    \n    mopts.globalTransform = [];\n    if (!this._bundled) {\n        this.once('bundle', function () {\n            self.pipeline.write({\n                transform: globalTr,\n                global: true,\n                options: {}\n            });\n        });\n    }\n    \n    var no = [].concat(opts.noParse).filter(Boolean);\n    var absno = no.filter(function(x) {\n        return typeof x === 'string';\n    }).map(function (x) {\n        return path.resolve(basedir, x);\n    });\n    mopts.noParse = absno;\n    \n    function globalTr (file) {\n        if (opts.detectGlobals === false) return through();\n        \n        if (opts.noParse === true) return through();\n        if (no.indexOf(file) >= 0) return through();\n        if (absno.indexOf(file) >= 0) return through();\n        \n        var parts = file.replace(/\\\\/g, '/').split('/node_modules/');\n        for (var i = 0; i < no.length; i++) {\n            if (typeof no[i] === 'function' && no[i](file)) {\n                return through();\n            }\n            else if (no[i] === parts[parts.length-1].split('/')[0]) {\n                return through();\n            }\n            else if (no[i] === parts[parts.length-1]) {\n                return through();\n            }\n        }\n\n        if (opts.commondir === false && opts.builtins === false) {\n          opts.insertGlobalVars = xtend({\n            __dirname: function(file, basedir) {\n              var dir = path.dirname(path.relative(basedir, file));\n              return 'require(\"path\").join(__dirname,' + dir.split(path.sep).map(JSON.stringify).join(',') + ')';\n            },\n            __filename: function(file, basedir) {\n              var filename = path.relative(basedir, file);\n              return 'require(\"path\").join(__dirname,' + filename.split(path.sep).map(JSON.stringify).join(',') + ')';\n            }\n          }, opts.insertGlobalVars);\n        }\n        \n        var vars = xtend({\n            process: function () { return \"require('_process')\" },\n        }, opts.insertGlobalVars);\n        \n        if (opts.bundleExternal === false) {\n            vars.process = undefined;\n            vars.buffer = undefined;\n        }\n\n        return insertGlobals(file, xtend(opts, {\n            debug: opts.debug,\n            always: opts.insertGlobals,\n            basedir: opts.commondir === false && isArray(opts.builtins)\n                ? '/'\n                : opts.basedir || process.cwd()\n            ,\n            vars: vars\n        }));\n    }\n    return mdeps(mopts);\n};\n\nBrowserify.prototype._recorder = function (opts) {\n    var self = this;\n    var ended = false;\n    this._recorded = [];\n    \n    if (!this._ticked) {\n        process.nextTick(function () {\n            self._ticked = true;\n            self._recorded.forEach(function (row) {\n                stream.push(row);\n            });\n            if (ended) stream.push(null);\n        });\n    }\n    \n    var stream = through.obj(write, end);\n    return stream;\n    \n    function write (row, enc, next) {\n        self._recorded.push(row);\n        if (self._ticked) this.push(row);\n        next();\n    }\n    function end () {\n        ended = true;\n        if (self._ticked) this.push(null);\n    }\n};\n\nBrowserify.prototype._json = function () {\n    return through.obj(function (row, enc, next) {\n        if (/\\.json$/.test(row.file)) {\n            var sanitizedString = sanitize(row.source);\n            try {\n                // check json validity\n                JSON.parse(sanitizedString);\n                row.source = 'module.exports=' + sanitizedString;\n            } catch (err) {\n                err.message = 'While parsing ' + (row.file || row.id) + ': ' + err.message\n                this.emit('error', err);\n                return;\n            }\n        }\n        this.push(row);\n        next();\n    });\n};\n\nBrowserify.prototype._unbom = function () {\n    return through.obj(function (row, enc, next) {\n        if (/^\\ufeff/.test(row.source)) {\n            row.source = row.source.replace(/^\\ufeff/, '');\n        }\n        this.push(row);\n        next();\n    });\n};\n\nBrowserify.prototype._unshebang = function () {\n    return through.obj(function (row, enc, next) {\n        if (/^#!/.test(row.source)) {\n            row.source = row.source.replace(/^#![^\\n]*\\n/, '');\n        }\n        this.push(row);\n        next();\n    });\n};\n\nBrowserify.prototype._syntax = function () {\n    var self = this;\n    return through.obj(function (row, enc, next) {\n        var h = shasum(row.source);\n        if (typeof self._syntaxCache[h] === 'undefined') {\n            var err = syntaxError(row.source, row.file || row.id);\n            if (err) return this.emit('error', err);\n            self._syntaxCache[h] = true;\n        }\n        this.push(row);\n        next();\n    });\n};\n\nBrowserify.prototype._dedupe = function () {\n    return through.obj(function (row, enc, next) {\n        if (!row.dedupeIndex && row.dedupe) {\n            row.source = 'arguments[4]['\n                + JSON.stringify(row.dedupe)\n                + '][0].apply(exports,arguments)'\n            ;\n            row.nomap = true;\n        }\n        else if (row.dedupeIndex) {\n            row.source = 'arguments[4]['\n                + JSON.stringify(row.dedupeIndex)\n                + '][0].apply(exports,arguments)'\n            ;\n            row.nomap = true;\n        }\n        if (row.dedupeIndex && row.indexDeps) {\n            row.indexDeps.dup = row.dedupeIndex;\n        }\n        this.push(row);\n        next();\n    });\n};\n\nBrowserify.prototype._label = function (opts) {\n    var self = this;\n    var basedir = defined(opts.basedir, process.cwd());\n    \n    return through.obj(function (row, enc, next) {\n        var prev = row.id;\n\n        if (self._external.indexOf(row.id) >= 0) return next();\n        if (self._external.indexOf('/' + relativePath(basedir, row.id)) >= 0) {\n            return next();\n        }\n        if (self._external.indexOf(row.file) >= 0) return next();\n        \n        if (row.index) row.id = row.index;\n        \n        self.emit('label', prev, row.id);\n        if (row.indexDeps) row.deps = row.indexDeps || {};\n        \n        Object.keys(row.deps).forEach(function (key) {\n            if (self._expose[key]) {\n                row.deps[key] = key;\n                return;\n            }\n\n            var afile = path.resolve(path.dirname(row.file), key);\n            var rfile = '/' + relativePath(basedir, afile);\n            if (self._external.indexOf(rfile) >= 0) {\n                row.deps[key] = rfile;\n            }\n            if (self._external.indexOf(afile) >= 0) {\n                row.deps[key] = rfile;\n            }\n            if (self._external.indexOf(key) >= 0) {\n                row.deps[key] = key;\n                return;\n            }\n            \n            for (var i = 0; i < self._extensions.length; i++) {\n                var ex = self._extensions[i];\n                if (self._external.indexOf(rfile + ex) >= 0) {\n                    row.deps[key] = rfile + ex;\n                    break;\n                }\n            }\n        });\n        \n        if (row.entry || row.expose) {\n            self._bpack.standaloneModule = row.id;\n        }\n        this.push(row);\n        next();\n    });\n};\n\nBrowserify.prototype._emitDeps = function () {\n    var self = this;\n    return through.obj(function (row, enc, next) {\n        self.emit('dep', row);\n        this.push(row);\n        next();\n    })\n};\n\nBrowserify.prototype._debug = function (opts) {\n    var basedir = defined(opts.basedir, process.cwd());\n    return through.obj(function (row, enc, next) {\n        if (opts.debug) {\n            row.sourceRoot = 'file://localhost';\n            row.sourceFile = relativePath(basedir, row.file);\n        }\n        this.push(row);\n        next();\n    });\n};\n\nBrowserify.prototype.reset = function (opts) {\n    if (!opts) opts = {};\n    var hadExports = this._bpack.hasExports;\n    this.pipeline = this._createPipeline(xtend(opts, this._options));\n    this._bpack.hasExports = hadExports;\n    this._entryOrder = 0;\n    this._bundled = false;\n    this.emit('reset');\n};\n\nBrowserify.prototype.bundle = function (cb) {\n    var self = this;\n    if (cb && typeof cb === 'object') {\n        throw new Error(\n            'bundle() no longer accepts option arguments.\\n'\n            + 'Move all option arguments to the browserify() constructor.'\n        );\n    }\n    if (this._bundled) {\n        var recorded = this._recorded;\n        this.reset();\n        recorded.forEach(function (x) {\n            self.pipeline.write(x);\n        });\n    }\n    var output = readonly(this.pipeline);\n    if (cb) {\n        output.on('error', cb);\n        output.pipe(concat(function (body) {\n            cb(null, body);\n        }));\n    }\n\n    function ready () {\n        self.emit('bundle', output);\n        self.pipeline.end();\n    }\n\n    if (this._pending === 0) ready();\n    else this.once('_ready', ready);\n\n    this._bundled = true;\n    return output;\n};\n\nfunction isStream (s) { return s && typeof s.pipe === 'function' }\nfunction isAbsolutePath (file) {\n    var regexp = process.platform === 'win32' ?\n        /^\\w:/ :\n        /^\\//;\n    return regexp.test(file);\n}\nfunction isExternalModule (file) {\n    var regexp = process.platform === 'win32' ?\n        /^(\\.|\\w:)/ :\n        /^[\\/.]/;\n    return !regexp.test(file);\n}\nfunction relativePath (from, to) {\n    // Replace \\ with / for OS-independent behavior\n    return cachedPathRelative(from, to).replace(/\\\\/g, '/');\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.4189453125,
          "content": "{\n  \"name\": \"browserify\",\n  \"version\": \"17.0.1\",\n  \"description\": \"browser-side require() the node way\",\n  \"main\": \"index.js\",\n  \"bin\": {\n    \"browserify\": \"bin/cmd.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"http://github.com/browserify/browserify.git\"\n  },\n  \"engines\": {\n    \"node\": \">= 0.8\"\n  },\n  \"keywords\": [\n    \"browser\",\n    \"require\",\n    \"commonjs\",\n    \"commonj-esque\",\n    \"bundle\",\n    \"npm\",\n    \"javascript\"\n  ],\n  \"dependencies\": {\n    \"assert\": \"^1.4.0\",\n    \"browser-pack\": \"^6.0.1\",\n    \"browser-resolve\": \"^2.0.0\",\n    \"browserify-zlib\": \"~0.2.0\",\n    \"buffer\": \"~5.2.1\",\n    \"cached-path-relative\": \"^1.0.0\",\n    \"concat-stream\": \"^1.6.0\",\n    \"console-browserify\": \"^1.1.0\",\n    \"constants-browserify\": \"~1.0.0\",\n    \"crypto-browserify\": \"^3.0.0\",\n    \"defined\": \"^1.0.0\",\n    \"deps-sort\": \"^2.0.1\",\n    \"domain-browser\": \"^1.2.0\",\n    \"duplexer2\": \"~0.1.2\",\n    \"events\": \"^3.0.0\",\n    \"glob\": \"^7.1.0\",\n    \"hasown\": \"^2.0.0\",\n    \"htmlescape\": \"^1.1.0\",\n    \"https-browserify\": \"^1.0.0\",\n    \"inherits\": \"~2.0.1\",\n    \"insert-module-globals\": \"^7.2.1\",\n    \"JSONStream\": \"^1.0.3\",\n    \"labeled-stream-splicer\": \"^2.0.0\",\n    \"mkdirp-classic\": \"^0.5.2\",\n    \"module-deps\": \"^6.2.3\",\n    \"os-browserify\": \"~0.3.0\",\n    \"parents\": \"^1.0.1\",\n    \"path-browserify\": \"^1.0.0\",\n    \"process\": \"~0.11.0\",\n    \"punycode\": \"^1.3.2\",\n    \"querystring-es3\": \"~0.2.0\",\n    \"read-only-stream\": \"^2.0.0\",\n    \"readable-stream\": \"^2.0.2\",\n    \"resolve\": \"^1.1.4\",\n    \"shasum-object\": \"^1.0.0\",\n    \"shell-quote\": \"^1.6.1\",\n    \"stream-browserify\": \"^3.0.0\",\n    \"stream-http\": \"^3.0.0\",\n    \"string_decoder\": \"^1.1.1\",\n    \"subarg\": \"^1.0.0\",\n    \"syntax-error\": \"^1.1.1\",\n    \"through2\": \"^2.0.0\",\n    \"timers-browserify\": \"^1.0.1\",\n    \"tty-browserify\": \"0.0.1\",\n    \"url\": \"~0.11.0\",\n    \"util\": \"~0.12.0\",\n    \"vm-browserify\": \"^1.0.0\",\n    \"xtend\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"backbone\": \"~0.9.2\",\n    \"browser-unpack\": \"^1.1.1\",\n    \"coffee-script\": \"~1.10.0\",\n    \"coffeeify\": \"~1.1.0\",\n    \"has-object-spread\": \"^1.0.0\",\n    \"has-template-literals\": \"^1.0.0\",\n    \"isstream\": \"^0.1.2\",\n    \"make-generator-function\": \"^1.1.0\",\n    \"semver\": \"^5.5.0\",\n    \"seq\": \"0.3.5\",\n    \"tap\": \"^10.7.2\",\n    \"temp\": \"=0.8.3\",\n    \"through\": \"^2.3.4\"\n  },\n  \"author\": {\n    \"name\": \"James Halliday\",\n    \"email\": \"mail@substack.net\",\n    \"url\": \"http://substack.net\"\n  },\n  \"scripts\": {\n    \"test\": \"tap test/*.js\"\n  },\n  \"license\": \"MIT\"\n}\n"
        },
        {
          "name": "readme.markdown",
          "type": "blob",
          "size": 26.3603515625,
          "content": "# browserify\n\n`require('modules')` in the browser\n\nUse a [node](http://nodejs.org)-style `require()` to organize your browser code\nand load modules installed by [npm](https://www.npmjs.com).\n\nbrowserify will recursively analyze all the `require()` calls in your app in\norder to build a bundle you can serve up to the browser in a single `<script>`\ntag.\n\n[![build status](https://img.shields.io/travis/browserify/browserify/master.svg)](https://travis-ci.org/browserify/browserify)\n\n![browserify!](./assets/logo.png)\n\n# getting started\n\nIf you're new to browserify, check out the\n[browserify handbook](https://github.com/browserify/browserify-handbook)\nand the resources on [browserify.org](http://browserify.org/).\n\n# example\n\nWhip up a file, `main.js` with some `require()`s in it. You can use relative\npaths like `'./foo.js'` and `'../lib/bar.js'` or module paths like `'gamma'`\nthat will search `node_modules/` using\n[node's module lookup algorithm](https://github.com/browserify/resolve).\n\n``` js\nvar foo = require('./foo.js');\nvar bar = require('../lib/bar.js');\nvar gamma = require('gamma');\n\nvar elem = document.getElementById('result');\nvar x = foo(100) + bar('baz');\nelem.textContent = gamma(x);\n```\n\nExport functionality by assigning onto `module.exports` or `exports`:\n\n``` js\nmodule.exports = function (n) { return n * 111 }\n```\n\nNow just use the `browserify` command to build a bundle starting at `main.js`:\n\n```\n$ browserify main.js > bundle.js\n```\n\nAll of the modules that `main.js` needs are included in the `bundle.js` from a\nrecursive walk of the `require()` graph using\n[required](https://github.com/defunctzombie/node-required).\n\nTo use this bundle, just toss a `<script src=\"bundle.js\"></script>` into your\nhtml!\n\n# install\n\nWith [npm](https://www.npmjs.com/) do:\n\n```\nnpm install browserify\n```\n\n# usage\n\n```\nUsage: browserify [entry files] {OPTIONS}\n\nStandard Options:\n\n    --outfile, -o  Write the browserify bundle to this file.\n                   If unspecified, browserify prints to stdout.\n\n    --require, -r  A module name or file to bundle.require()\n                   Optionally use a colon separator to set the target.\n\n      --entry, -e  An entry point of your app\n\n     --ignore, -i  Replace a file with an empty stub. Files can be globs.\n\n    --exclude, -u  Omit a file from the output bundle. Files can be globs.\n\n   --external, -x  Reference a file from another bundle. Files can be globs.\n\n  --transform, -t  Use a transform module on top-level files.\n\n    --command, -c  Use a transform command on top-level files.\n\n  --standalone -s  Generate a UMD bundle for the supplied export name.\n                   This bundle works with other module systems and sets the name\n                   given as a window global if no module system is found.\n\n       --debug -d  Enable source maps that allow you to debug your files\n                   separately.\n\n       --help, -h  Show this message\n\nFor advanced options, type `browserify --help advanced`.\n\nSpecify a parameter.\n```\n\n```\nAdvanced Options:\n\n  --insert-globals, --ig, --fast    [default: false]\n\n    Skip detection and always insert definitions for process, global,\n    __filename, and __dirname.\n\n    benefit: faster builds\n    cost: extra bytes\n\n  --insert-global-vars, --igv\n\n    Comma-separated list of global variables to detect and define.\n    Default: __filename,__dirname,process,Buffer,global\n\n  --detect-globals, --dg            [default: true]\n\n    Detect the presence of process, global, __filename, and __dirname and define\n    these values when present.\n\n    benefit: npm modules more likely to work\n    cost: slower builds\n\n  --ignore-missing, --im            [default: false]\n\n    Ignore `require()` statements that don't resolve to anything.\n\n  --noparse=FILE\n\n    Don't parse FILE at all. This will make bundling much, much faster for giant\n    libs like jquery or threejs.\n\n  --no-builtins\n\n    Turn off builtins. This is handy when you want to run a bundle in node which\n    provides the core builtins.\n\n  --no-commondir\n\n    Turn off setting a commondir. This is useful if you want to preserve the\n    original paths that a bundle was generated with.\n\n  --no-bundle-external\n\n    Turn off bundling of all external modules. This is useful if you only want\n    to bundle your local files.\n\n  --bare\n\n    Alias for both --no-builtins, --no-commondir, and sets --insert-global-vars\n    to just \"__filename,__dirname\". This is handy if you want to run bundles in\n    node.\n\n  --no-browser-field, --no-bf\n\n    Turn off package.json browser field resolution. This is also handy if you\n    need to run a bundle in node.\n\n  --transform-key\n\n    Instead of the default package.json#browserify#transform field to list\n    all transforms to apply when running browserify, a custom field, like, e.g.\n    package.json#browserify#production or package.json#browserify#staging\n    can be used, by for example running:\n    * `browserify index.js --transform-key=production > bundle.js`\n    * `browserify index.js --transform-key=staging > bundle.js`\n\n  --node\n\n    Alias for --bare and --no-browser-field.\n\n  --full-paths\n\n    Turn off converting module ids into numerical indexes. This is useful for\n    preserving the original paths that a bundle was generated with.\n\n  --deps\n\n    Instead of standard bundle output, print the dependency array generated by\n    module-deps.\n\n  --no-dedupe\n\n    Turn off deduping.\n\n  --list\n\n    Print each file in the dependency graph. Useful for makefiles.\n\n  --extension=EXTENSION\n\n    Consider files with specified EXTENSION as modules, this option can used\n    multiple times.\n\n  --global-transform=MODULE, -g MODULE\n\n    Use a transform module on all files after any ordinary transforms have run.\n\n  --ignore-transform=MODULE, -it MODULE\n\n    Do not run certain transformations, even if specified elsewhere.\n\n  --plugin=MODULE, -p MODULE\n\n    Register MODULE as a plugin.\n\nPassing arguments to transforms and plugins:\n\n  For -t, -g, and -p, you may use subarg syntax to pass options to the\n  transforms or plugin function as the second parameter. For example:\n\n    -t [ foo -x 3 --beep ]\n\n  will call the `foo` transform for each applicable file by calling:\n\n    foo(file, { x: 3, beep: true })\n\n```\n\n# compatibility\n\nMany [npm](https://www.npmjs.com/) modules that don't do IO will just work after being\nbrowserified. Others take more work.\n\nMany node built-in modules have been wrapped to work in the browser, but only\nwhen you explicitly `require()` or use their functionality.\n\nWhen you `require()` any of these modules, you will get a browser-specific shim:\n\n* [assert](https://www.npmjs.com/package/assert)\n* [buffer](https://www.npmjs.com/package/buffer)\n* [console](https://www.npmjs.com/package/console-browserify)\n* [constants](https://www.npmjs.com/package/constants-browserify)\n* [crypto](https://www.npmjs.com/package/crypto-browserify)\n* [domain](https://www.npmjs.com/package/domain-browser)\n* [events](https://www.npmjs.com/package/events)\n* [http](https://www.npmjs.com/package/stream-http)\n* [https](https://www.npmjs.com/package/https-browserify)\n* [os](https://www.npmjs.com/package/os-browserify)\n* [path](https://www.npmjs.com/package/path-browserify)\n* [punycode](https://www.npmjs.com/package/punycode)\n* [querystring](https://www.npmjs.com/package/querystring-es3)\n* [stream](https://www.npmjs.com/package/stream-browserify)\n* [string_decoder](https://www.npmjs.com/package/string_decoder)\n* [timers](https://www.npmjs.com/package/timers-browserify)\n* [tty](https://www.npmjs.com/package/tty-browserify)\n* [url](https://www.npmjs.com/package/url)\n* [util](https://www.npmjs.com/package/util)\n* [vm](https://www.npmjs.com/package/vm-browserify)\n* [zlib](https://www.npmjs.com/package/browserify-zlib)\n\nAdditionally, if you use any of these variables, they\n[will be defined](https://github.com/browserify/insert-module-globals)\nin the bundled output in a browser-appropriate way:\n\n* [process](https://www.npmjs.com/package/process)\n* [Buffer](https://www.npmjs.com/package/buffer)\n* global - top-level scope object (window)\n* __filename - file path of the currently executing file\n* __dirname - directory path of the currently executing file\n\n# more examples\n\n## external requires\n\nYou can just as easily create a bundle that will export a `require()` function so\nyou can `require()` modules from another script tag. Here we'll create a\n`bundle.js` with the [through](https://www.npmjs.com/package/through)\nand [duplexer](https://www.npmjs.com/package/duplexer) modules.\n\n```\n$ browserify -r through -r duplexer -r ./my-file.js:my-module > bundle.js\n```\n\nThen in your page you can do:\n\n``` html\n<script src=\"bundle.js\"></script>\n<script>\n  var through = require('through');\n  var duplexer = require('duplexer');\n  var myModule = require('my-module');\n  /* ... */\n</script>\n```\n\n## external source maps\n\nIf you prefer the source maps be saved to a separate `.js.map` source map file, you may use\n[exorcist](https://github.com/thlorenz/exorcist) in order to achieve that. It's as simple as:\n\n```\n$ browserify main.js --debug | exorcist bundle.js.map > bundle.js\n```\n\nLearn about additional options [here](https://github.com/thlorenz/exorcist#usage).\n\n## multiple bundles\n\nIf browserify finds a `require`d function already defined in the page scope, it\nwill fall back to that function if it didn't find any matches in its own set of\nbundled modules.\n\nIn this way, you can use browserify to split up bundles among multiple pages to\nget the benefit of caching for shared, infrequently-changing modules, while\nstill being able to use `require()`. Just use a combination of `--external` and\n`--require` to factor out common dependencies.\n\nFor example, if a website with 2 pages, `beep.js`:\n\n``` js\nvar robot = require('./robot.js');\nconsole.log(robot('beep'));\n```\n\nand `boop.js`:\n\n``` js\nvar robot = require('./robot.js');\nconsole.log(robot('boop'));\n```\n\nboth depend on `robot.js`:\n\n``` js\nmodule.exports = function (s) { return s.toUpperCase() + '!' };\n```\n\n```\n$ browserify -r ./robot.js > static/common.js\n$ browserify -x ./robot.js beep.js > static/beep.js\n$ browserify -x ./robot.js boop.js > static/boop.js\n```\n\nThen on the beep page you can have:\n\n``` html\n<script src=\"common.js\"></script>\n<script src=\"beep.js\"></script>\n```\n\nwhile the boop page can have:\n\n``` html\n<script src=\"common.js\"></script>\n<script src=\"boop.js\"></script>\n```\n\nThis approach using `-r` and `-x` works fine for a small number of split assets,\nbut there are plugins for automatically factoring out components which are\ndescribed in the\n[partitioning section of the browserify handbook](https://github.com/browserify/browserify-handbook#partitioning).\n\n## api example\n\nYou can use the API directly too:\n\n``` js\nvar browserify = require('browserify');\nvar b = browserify();\nb.add('./browser/main.js');\nb.bundle().pipe(process.stdout);\n```\n\n# methods\n\n``` js\nvar browserify = require('browserify')\n```\n\n## `browserify([files] [, opts])`\n\nReturns a new browserify instance.\n\n<dl>\n<dt>\nfiles\n</dt>\n\n<dd>\nString, file object, or array of those types (they may be mixed) specifying entry file(s).\n</dd>\n\n<dt>\nopts\n</dt>\n\n<dd>\nObject.\n</dd>\n</dl>\n\n`files` and `opts` are both optional, but must be in the order shown if both are\npassed.\n\nEntry files may be passed in `files` and / or `opts.entries`.\n\nExternal requires may be specified in `opts.require`, accepting the same formats\nthat the `files` argument does.\n\nIf an entry file is a stream, its contents will be used. You should pass\n`opts.basedir` when using streaming files so that relative requires can be\nresolved.\n\n`opts.entries` has the same definition as `files`.\n\n`opts.noParse` is an array which will skip all require() and global parsing for\neach file in the array. Use this for giant libs like jquery or threejs that\ndon't have any requires or node-style globals but take forever to parse.\n\n`opts.transform` is an array of transform functions or modules names which will\ntransform the source code before the parsing.\n\n`opts.ignoreTransform` is an array of transformations that will not be run,\neven if specified elsewhere.\n\n`opts.plugin` is an array of plugin functions or module names to use. See the\nplugins section below for details.\n\n`opts.extensions` is an array of optional extra extensions for the module lookup\nmachinery to use when the extension has not been specified.\nBy default browserify considers only `.js` and `.json` files in such cases.\n\n`opts.basedir` is the directory that browserify starts bundling from for\nfilenames that start with `.`.\n\n`opts.paths` is an array of directories that browserify searches when looking\nfor modules which are not referenced using relative path. Can be absolute or\nrelative to `basedir`. Equivalent of setting `NODE_PATH` environmental variable\nwhen calling `browserify` command.\n\n`opts.commondir` sets the algorithm used to parse out the common paths. Use\n`false` to turn this off, otherwise it uses the\n[commondir](https://www.npmjs.com/package/commondir) module.\n\n`opts.fullPaths` disables converting module ids into numerical indexes. This is\nuseful for preserving the original paths that a bundle was generated with.\n\n`opts.builtins` sets the list of built-ins to use, which by default is set in\n`lib/builtins.js` in this distribution.\n\n`opts.bundleExternal` boolean option to set if external modules should be\nbundled. Defaults to true.\n\nWhen `opts.browserField` is false, the package.json browser field will be\nignored. When `opts.browserField` is set to a `string`, then a custom field name\ncan be used instead of the default `\"browser\"` field.\n\nWhen `opts.insertGlobals` is true, always insert `process`, `global`,\n`__filename`, and `__dirname` without analyzing the AST for faster builds but\nlarger output bundles. Default false.\n\nWhen `opts.detectGlobals` is true, scan all files for `process`, `global`,\n`__filename`, and `__dirname`, defining as necessary. With this option npm\nmodules are more likely to work but bundling takes longer. Default true.\n\nWhen `opts.ignoreMissing` is true, ignore `require()` statements that don't\nresolve to anything.\n\nWhen `opts.debug` is true, add a source map inline to the end of the bundle.\nThis makes debugging easier because you can see all the original files if\nyou are in a modern enough browser.\n\nWhen `opts.standalone` is a non-empty string, a standalone module is created\nwith that name and a [umd](https://github.com/forbeslindesay/umd) wrapper.\nYou can use namespaces in the standalone global export using a `.` in the string\nname as a separator, for example `'A.B.C'`. The global export will be [sanitized\nand camel cased](https://github.com/ForbesLindesay/umd#name-casing-and-characters).\n\nNote that in standalone mode the `require()` calls from the original source will\nstill be around, which may trip up AMD loaders scanning for `require()` calls.\nYou can remove these calls with\n[derequire](https://www.npmjs.com/package/derequire):\n\n```\n$ npm install derequire\n$ browserify main.js --standalone Foo | derequire > bundle.js\n```\n\n```html\n<script src=\"bundle.js\"></script>\n<script type=\"text/javascript\">\n\t// Now you can address `Foo` by name in your HTML document\n\tFoo.bar();\n</script>\n```\n\n`opts.insertGlobalVars` will be passed to\n[insert-module-globals](https://www.npmjs.com/package/insert-module-globals)\nas the `opts.vars` parameter.\n\n`opts.externalRequireName` defaults to `'require'` in `expose` mode but you can\nuse another name.\n\n`opts.bare` creates a bundle that does not include Node builtins, and does not\nreplace global Node variables except for `__dirname` and `__filename`.\n\n`opts.node` creates a bundle that runs in Node and does not use the browser\nversions of dependencies. Same as passing `{ bare: true, browserField: false }`.\n\nNote that if files do not contain javascript source code then you also need to\nspecify a corresponding transform for them.\n\nAll other options are forwarded along to\n[module-deps](https://www.npmjs.com/package/module-deps)\nand [browser-pack](https://www.npmjs.com/package/browser-pack) directly.\n\n## b.add(file, opts)\n\nAdd an entry file from `file` that will be executed when the bundle loads.\n\nIf `file` is an array, each item in `file` will be added as an entry file.\n\n## b.require(file, opts)\n\nMake `file` available from outside the bundle with `require(file)`.\n\nThe `file` param is anything that can be resolved by `require.resolve()`,\nincluding files from `node_modules`. Like with `require.resolve()`, you must\nprefix `file` with `./` to require a local file (not in `node_modules`).\n\n`file` can also be a stream, but you should also use `opts.basedir` so that\nrelative requires will be resolvable.\n\nIf `file` is an array, each item in `file` will be required.\nIn `file` array form, you can use a string or object for each item. Object items\nshould have a `file` property and the rest of the parameters will be used for\nthe `opts`.\n\nUse the `expose` property of opts to specify a custom dependency name.\n`require('./vendor/angular/angular.js', {expose: 'angular'})` enables `require('angular')`\n\n## b.bundle(cb)\n\nBundle the files and their dependencies into a single javascript file.\n\nReturn a readable stream with the javascript file contents or\noptionally specify a `cb(err, buf)` to get the buffered results.\n\n## b.external(file)\n\nPrevent `file` from being loaded into the current bundle, instead referencing\nfrom another bundle.\n\nIf `file` is an array, each item in `file` will be externalized.\n\nIf `file` is another bundle, that bundle's contents will be read and excluded\nfrom the current bundle as the bundle in `file` gets bundled.\n\n## b.ignore(file)\n\nPrevent the module name or file at `file` from showing up in the output bundle.\n\nIf `file` is an array, each item in `file` will be ignored.\n\nInstead you will get a file with `module.exports = {}`.\n\n## b.exclude(file)\n\nPrevent the module name or file at `file` from showing up in the output bundle.\n\nIf `file` is an array, each item in `file` will be excluded.\n\nIf your code tries to `require()` that file it will throw unless you've provided\nanother mechanism for loading it.\n\n## b.transform(tr, opts={})\n\nTransform source code before parsing it for `require()` calls with the transform\nfunction or module name `tr`.\n\nIf `tr` is a function, it will be called with `tr(file)` and it should return a\n[through-stream](https://github.com/substack/stream-handbook#through)\nthat takes the raw file contents and produces the transformed source.\n\nIf `tr` is a string, it should be a module name or file path of a\n[transform module](https://github.com/browserify/module-deps#transforms)\nwith a signature of:\n\n``` js\nvar through = require('through');\nmodule.exports = function (file) { return through() };\n```\n\nYou don't need to necessarily use the\n[through](https://www.npmjs.com/package/through) module.\nBrowserify is compatible with the newer, more verbose\n[Transform streams](http://nodejs.org/api/stream.html#stream_class_stream_transform_1)\nbuilt into Node v0.10.\n\nHere's how you might compile coffee script on the fly using `.transform()`:\n\n``` js\nvar coffee = require('coffee-script');\nvar through = require('through');\n\nb.transform(function (file) {\n    var data = '';\n    return through(write, end);\n\n    function write (buf) { data += buf }\n    function end () {\n        this.queue(coffee.compile(data));\n        this.queue(null);\n    }\n});\n```\n\nNote that on the command-line with the `-c` flag you can just do:\n\n```\n$ browserify -c 'coffee -sc' main.coffee > bundle.js\n```\n\nOr better still, use the [coffeeify](https://github.com/jnordberg/coffeeify)\nmodule:\n\n```\n$ npm install coffeeify\n$ browserify -t coffeeify main.coffee > bundle.js\n```\n\nIf `opts.global` is `true`, the transform will operate on ALL files, despite\nwhether they exist up a level in a `node_modules/` directory. Use global\ntransforms cautiously and sparingly, since most of the time an ordinary\ntransform will suffice. You can also not configure global transforms in a\n`package.json` like you can with ordinary transforms.\n\nGlobal transforms always run after any ordinary transforms have run.\n\nTransforms may obtain options from the command-line with\n[subarg](https://www.npmjs.com/package/subarg) syntax:\n\n```\n$ browserify -t [ foo --bar=555 ] main.js\n```\n\nor from the api:\n\n```\nb.transform('foo', { bar: 555 })\n```\n\nIn both cases, these options are provided as the second argument to the\ntransform function:\n\n```\nmodule.exports = function (file, opts) { /* opts.bar === 555 */ }\n```\n\nOptions sent to the browserify constructor are also provided under\n`opts._flags`. These browserify options are sometimes required if your transform\nneeds to do something different when browserify is run in debug mode, for\nexample.\n\n## b.plugin(plugin, opts)\n\nRegister a `plugin` with `opts`. Plugins can be a string module name or a\nfunction the same as transforms.\n\n`plugin(b, opts)` is called with the browserify instance `b`.\n\nFor more information, consult the plugins section below.\n\n## b.pipeline\n\nThere is an internal\n[labeled-stream-splicer](https://www.npmjs.com/package/labeled-stream-splicer)\npipeline with these labels:\n\n* `'record'` - save inputs to play back later on subsequent `bundle()` calls\n* `'deps'` - [module-deps](https://www.npmjs.com/package/module-deps)\n* `'json'` - adds `module.exports=` to the beginning of json files\n* `'unbom'` - remove byte-order markers\n* `'unshebang'` - remove #! labels on the first line\n* `'syntax'` - check for syntax errors\n* `'sort'` - sort the dependencies for deterministic bundles\n* `'dedupe'` - remove duplicate source contents\n* `'label'` - apply integer labels to files\n* `'emit-deps'` - emit `'dep'` event\n* `'debug'` - apply source maps\n* `'pack'` - [browser-pack](https://www.npmjs.com/package/browser-pack)\n* `'wrap'` - apply final wrapping, `require=` and a newline and semicolon\n\nYou can call `b.pipeline.get()` with a label name to get a handle on a stream pipeline\nthat you can `push()`, `unshift()`, or `splice()` to insert your own transform\nstreams.\n\n## b.reset(opts)\n\nReset the pipeline back to a normal state. This function is called automatically\nwhen `bundle()` is called multiple times.\n\nThis function triggers a 'reset' event.\n\n# package.json\n\nbrowserify uses the `package.json` in its module resolution algorithm, just like\nnode. If there is a `\"main\"` field, browserify will start resolving the package\nat that point. If there is no `\"main\"` field, browserify will look for an\n`\"index.js\"` file in the module root directory. Here are some more\nsophisticated things you can do in the package.json:\n\n## browser field\n\nThere is a special \"[browser](https://github.com/defunctzombie/package-browser-field-spec)\" field you can\nset in your package.json on a per-module basis to override file resolution for\nbrowser-specific versions of files.\n\nFor example, if you want to have a browser-specific module entry point for your\n`\"main\"` field you can just set the `\"browser\"` field to a string:\n\n``` json\n\"browser\": \"./browser.js\"\n```\n\nor you can have overrides on a per-file basis:\n\n``` json\n\"browser\": {\n  \"fs\": \"level-fs\",\n  \"./lib/ops.js\": \"./browser/opts.js\"\n}\n```\n\nNote that the browser field only applies to files in the local module, and like\ntransforms, it doesn't apply into `node_modules` directories.\n\n## browserify.transform\n\nYou can specify source transforms in the package.json in the\n`browserify.transform` field. There is more information about how source\ntransforms work in package.json on the\n[module-deps readme](https://github.com/browserify/module-deps#transforms).\n\nFor example, if your module requires [brfs](https://www.npmjs.com/package/brfs), you\ncan add\n\n``` json\n\"browserify\": { \"transform\": [ \"brfs\" ] }\n```\n\nto your package.json. Now when somebody `require()`s your module, brfs will\nautomatically be applied to the files in your module without explicit\nintervention by the person using your module. Make sure to add transforms to\nyour package.json dependencies field.\n\n# events\n\n## b.on('file', function (file, id, parent) {})\n## b.pipeline.on('file', function (file, id, parent) {})\n\nWhen a file is resolved for the bundle, the bundle emits a `'file'` event with\nthe full `file` path, the `id` string passed to `require()`, and the `parent`\nobject used by\n[browser-resolve](https://github.com/defunctzombie/node-browser-resolve).\n\nYou could use the `file` event to implement a file watcher to regenerate bundles\nwhen files change.\n\n## b.on('package', function (pkg) {})\n## b.pipeline.on('package', function (pkg) {})\n\nWhen a package file is read, this event fires with the contents. The package\ndirectory is available at `pkg.__dirname`.\n\n## b.on('bundle', function (bundle) {})\n\nWhen `.bundle()` is called, this event fires with the `bundle` output stream.\n\n## b.on('reset', function () {})\n\nWhen the `.reset()` method is called or implicitly called by another call to\n`.bundle()`, this event fires.\n\n## b.on('transform', function (tr, file) {})\n## b.pipeline.on('transform', function (tr, file) {})\n\nWhen a transform is applied to a file, the `'transform'` event fires on the\nbundle stream with the transform stream `tr` and the `file` that the transform\nis being applied to.\n\n# plugins\n\nFor some more advanced use-cases, a transform is not sufficiently extensible.\nPlugins are modules that take the bundle instance as their first parameter and\nan option hash as their second.\n\nPlugins can be used to do perform some fancy features that transforms can't do.\nFor example, [factor-bundle](https://www.npmjs.com/package/factor-bundle) is a\nplugin that can factor out common dependencies from multiple entry-points into a\ncommon bundle. Use plugins with `-p` and pass options to plugins with\n[subarg](https://www.npmjs.com/package/subarg) syntax:\n\n```\nbrowserify x.js y.js -p [ factor-bundle -o bundle/x.js -o bundle/y.js ] \\\n  > bundle/common.js\n```\n\nFor a list of plugins, consult the\n[browserify-plugin tag](https://www.npmjs.com/browse/keyword/browserify-plugin)\non npm.\n\n# list of source transforms\n\nThere is a [wiki page that lists the known browserify\ntransforms](https://github.com/browserify/browserify/wiki/list-of-transforms).\n\nIf you write a transform, make sure to add your transform to that wiki page and\nadd a package.json keyword of `browserify-transform` so that\n[people can browse for all the browserify\ntransforms](https://www.npmjs.com/browse/keyword/browserify-transform) on npmjs.org.\n\n# third-party tools\n\nThere is a [wiki page that lists the known browserify\ntools](https://github.com/browserify/browserify/wiki/browserify-tools).\n\nIf you write a tool, make sure to add it to that wiki page and\nadd a package.json keyword of `browserify-tool` so that\n[people can browse for all the browserify\ntools](https://www.npmjs.com/browse/keyword/browserify-tool) on npmjs.org.\n\n# changelog\n\nReleases are documented in\n[changelog.markdown](changelog.markdown) and on the\n[browserify twitter feed](https://twitter.com/browserify).\n\n# license\n\n[MIT](./LICENSE)\n\n![browserify!](./assets/browserify.png)\n"
        },
        {
          "name": "security.md",
          "type": "blob",
          "size": 0.287109375,
          "content": "# Security Policy\n\n## Supported Versions\nOnly the latest major version is supported at any given time.\n\n## Reporting a Vulnerability\n\nTo report a security vulnerability, please use the\n[Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}