{
  "metadata": {
    "timestamp": 1736563174551,
    "page": 111,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mysqljs/mysql",
      "stars": 18331,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.0087890625,
          "content": "coverage\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 1.392578125,
          "content": "{\n  \"env\": {\n    \"node\": true\n  },\n  \"rules\": {\n    \"comma-dangle\": [2, \"never\"],\n    \"comma-spacing\": [\"error\", { \"before\": false, \"after\": true }],\n    \"consistent-return\": 2,\n    \"eqeqeq\": [2, \"allow-null\"],\n    \"indent\": [2, 2, { \"VariableDeclarator\": 2, \"SwitchCase\": 1 }],\n    \"key-spacing\": [2, { \"align\": { \"beforeColon\": true, \"afterColon\": true, \"on\": \"colon\" } }],\n    \"keyword-spacing\": 2,\n    \"new-parens\": 2,\n    \"no-cond-assign\": 2,\n    \"no-constant-condition\": 2,\n    \"no-control-regex\": 2,\n    \"no-debugger\": 2,\n    \"no-dupe-args\": 2,\n    \"no-dupe-keys\": 2,\n    \"no-duplicate-case\": 2,\n    \"no-empty-character-class\": 2,\n    \"no-empty\": 2,\n    \"no-ex-assign\": 2,\n    \"no-extra-boolean-cast\": 2,\n    \"no-extra-semi\": 2,\n    \"no-func-assign\": 2,\n    \"no-inner-declarations\": 2,\n    \"no-invalid-regexp\": 2,\n    \"no-irregular-whitespace\": 2,\n    \"no-multiple-empty-lines\": [2, { \"max\": 1 }],\n    \"no-negated-in-lhs\": 2,\n    \"no-obj-calls\": 2,\n    \"no-regex-spaces\": 2,\n    \"no-sparse-arrays\": 2,\n    \"no-trailing-spaces\": 2,\n    \"no-undef\": 2,\n    \"no-unexpected-multiline\": 2,\n    \"no-unreachable\": 2,\n    \"no-unused-vars\": 2,\n    \"one-var\": [\"error\", { \"initialized\": \"never\" }],\n    \"quotes\": [2, \"single\", { \"avoidEscape\": true, \"allowTemplateLiterals\": true }],\n    \"semi\": [2, \"always\"],\n    \"semi-spacing\": 2,\n    \"space-infix-ops\": 2,\n    \"use-isnan\": 2,\n    \"valid-jsdoc\": 2,\n    \"valid-typeof\": 2\n  }\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.06640625,
          "content": ".nyc_output\ncoverage/\nnode_modules/\nnpm-debug.log\npackage-lock.json\n"
        },
        {
          "name": "Changes.md",
          "type": "blob",
          "size": 20.970703125,
          "content": "# Changes\n\nThis file is a manually maintained list of changes for each release. Feel free\nto add your changes here when sending pull requests. Also send corrections if\nyou spot any mistakes.\n\n## HEAD\n\n* Accept the `maxVersion` and `minVersion` properties in connection `ssl` option #2301 #2304\n* Support Node.js 14.x\n* Support Node.js 15.x\n* Support Node.js 16.x\n* Support Node.js 17.x\n* Update `bignumber.js` to 9.0.2\n* Update `safe-buffer` to 5.2.1\n* Update `sqlstring` to 2.3.3\n  - Fix escaping `Date` objects from foreign isolates\n  - perf: remove outdated array pattern\n\n## v2.18.1 (2020-01-23)\n\n* Fix Amazon RDS profile for yaSSL MySQL servers with 2019 CA #2292\n\n## v2.18.0 (2020-01-21)\n\n* Add `localInfile` option to control `LOAD DATA LOCAL INFILE`\n* Add new Amazon RDS Root 2019 CA to Amazon RDS SSL profile #2280\n* Add new error codes up to MySQL 5.7.29\n* Fix early detection of bad callback to `connection.query`\n* Support Node.js 12.x #2211\n* Support Node.js 13.x\n* Support non-enumerable properties in object argument to `connection.query` #2253\n* Update `bignumber.js` to 9.0.0\n* Update `readable-stream` to 2.3.7\n\n## v2.17.1 (2019-04-18)\n\n* Update `bignumber.js` to 7.2.1 #2206\n  - Fix npm deprecation warning\n\n## v2.17.0 (2019-04-17)\n\n* Add reverse type lookup for small performance gain #2170\n* Fix `connection.threadId` missing on handshake failure\n* Fix duplicate packet name in debug output\n* Fix no password support for old password protocol\n* Remove special case for handshake in determine packet code\n* Small performance improvement starting command sequence\n* Support auth switch in change user flow #1776\n* Support Node.js 11.x\n* Update `bignumber.js` to 6.0.0\n\n## v2.16.0 (2018-07-17)\n\n* Add Amazon RDS GovCloud SSL certificates #1876\n* Add new error codes up to MySQL 5.7.21\n* Include connection ID in debug output\n* Support Node.js 9.x\n* Support Node.js 10.x #2003 #2024 #2026 #2034\n* Update Amazon RDS SSL certificates\n* Update `bignumber.js` to 4.1.0\n* Update `readable-stream` to 2.3.6\n* Update `sqlstring` to 2.3.1\n  - Fix incorrectly replacing non-placeholders in SQL\n\n## v2.15.0 (2017-10-05)\n\n* Add new Amazon RDS ca-central-1 certificate CA to Amazon RDS SSL profile #1809\n* Add new error codes up to MySQL 5.7.19\n* Add `mysql.raw()` to generate pre-escaped values #877 #1821\n* Fix \"changedRows\" to work on non-English servers #1819\n* Fix error when server sends RST on `QUIT` #1811\n* Fix typo in insecure auth error message\n* Support `mysql_native_password` auth switch request for Azure #1396 #1729 #1730\n* Update `sqlstring` to 2.3.0\n  - Add `.toSqlString()` escape overriding\n  - Small performance improvement on `escapeId`\n* Update `bignumber.js` to 4.0.4\n\n## v2.14.1 (2017-08-01)\n\n* Fix holding first closure for lifetime of connection #1785\n\n## v2.14.0 (2017-07-25)\n\n* Add new Amazon RDS ap-south-1 certificate CA to Amazon RDS SSL profile #1780\n* Add new Amazon RDS eu-west-2 certificate CA to Amazon RDS SSL profile #1770\n* Add `sql` property to query `Error` objects #1462 #1628 #1629\n* Add `sqlMessage` property to `Error` objects #1714\n* Fix the MySQL 5.7.17 error codes\n* Support Node.js 8.x\n* Update `bignumber.js` to 4.0.2\n* Update `readable-stream` to 2.3.3\n* Use `safe-buffer` for improved Buffer API\n\n## v2.13.0 (2017-01-24)\n\n* Accept regular expression as pool cluster pattern #1572\n* Accept wildcard anywhere in pool cluster pattern #1570\n* Add `acquire` and `release` events to `Pool` for tracking #1366 #1449 #1528 #1625\n* Add new error codes up to MySQL 5.7.17\n* Fix edge cases when determing Query result packets #1547\n* Fix memory leak when using long-running domains #1619 #1620\n* Remove unnecessary buffer copies when receiving large packets\n* Update `bignumber.js` to 3.1.2\n* Use a simple buffer list to improve performance #566 #1590\n\n## v2.12.0 (2016-11-02)\n\n* Accept array of type names to `dateStrings` option #605 #1481\n* Add `query` method to `PoolNamespace` #1256 #1505 #1506\n  - Used as `cluster.of(...).query(...)`\n* Add new error codes up to MySQL 5.7.16\n* Fix edge cases writing certain length coded values\n* Fix typo in `HANDSHAKE_NO_SSL_SUPPORT` error message #1534\n* Support Node.js 7.x\n* Update `bignumber.js` to 2.4.0\n* Update `sqlstring` to 2.2.0\n  - Accept numbers and other value types in `escapeId`\n  - Escape invalid `Date` objects as `NULL`\n  - Run `buffer.toString()` through escaping\n\n## v2.11.1 (2016-06-07)\n\n* Fix writing truncated packets starting with large string/buffer #1438\n\n## v2.11.0 (2016-06-06)\n\n* Add `POOL_CLOSED` code to \"Pool is closed.\" error\n* Add `POOL_CONNLIMIT` code to \"No connections available.\" error #1332\n* Bind underlying connections in pool to same domain as pool #1242\n* Bind underlying socket to same domain as connection #1243\n* Fix allocation errors receiving many result rows #918 #1265 #1324 #1415\n* Fix edge cases constructing long stack traces #1387\n* Fix handshake inactivity timeout on Node.js v4.2.0 #1223 #1236 #1239 #1240 #1241 #1252\n* Fix Query stream to emit close after ending #1349 #1350\n* Fix type cast for BIGINT columns when number is negative #1376\n* Performance improvements for array/object escaping in SqlString #1331\n* Performance improvements for formatting in SqlString #1431\n* Performance improvements for string escaping in SqlString #1390\n* Performance improvements for writing packets to network\n* Support Node.js 6.x\n* Update `bignumber.js` to 2.3.0\n* Update `readable-stream` to 1.1.14\n* Use the `sqlstring` module for SQL escaping and formatting\n\n## v2.10.2 (2016-01-12)\n\n* Fix exception/hang from certain SSL connection errors #1153\n* Update `bignumber.js` to 2.1.4\n\n## v2.10.1 (2016-01-11)\n\n* Add new Amazon RDS ap-northeast-2 certificate CA to Amazon RDS SSL profile #1329\n\n## v2.10.0 (2015-12-15)\n\n* Add new error codes up to MySQL 5.7.9 #1294\n* Add new JSON type constant #1295\n* Add types for fractional seconds support\n* Fix `connection.destroy()` on pool connection creating sequences #1291\n* Fix error code 139 `HA_ERR_TO_BIG_ROW` to be `HA_ERR_TOO_BIG_ROW`\n* Fix error when call site error is missing stack #1179\n* Fix reading password from MySQL URL that has bare colon #1278\n* Handle MySQL servers not closing TCP connection after QUIT -> OK exchange #1277\n* Minor SqlString Date to string performance improvement #1233\n* Support Node.js 4.x\n* Support Node.js 5.x\n* Update `bignumber.js` to 2.1.2\n\n## v2.9.0 (2015-08-19)\n\n* Accept the `ciphers` property in connection `ssl` option #1185\n* Fix bad timezone conversion from `Date` to string for certain times #1045 #1155\n\n## v2.8.0 (2015-07-13)\n\n* Add `connect` event to `Connection` #1129\n* Default `timeout` for `connection.end` to 30 seconds #1057\n* Fix a sync callback when sequence enqueue fails #1147\n* Provide static require analysis\n* Re-use connection from pool after `conn.changeUser` is used #837 #1088\n\n## v2.7.0 (2015-05-27)\n\n* Destroy/end connections removed from the pool on error\n* Delay implied connect until after `.query` argument validation\n* Do not remove connections with non-fatal errors from the pool\n* Error early if `callback` argument to `.query` is not a function #1060\n* Lazy-load modules from many entry point; reduced memory use\n\n## v2.6.2 (2015-04-14)\n\n* Fix `Connection.createQuery` for no SQL #1058\n* Update `bignumber.js` to 2.0.7\n\n## v2.6.1 (2015-03-26)\n\n* Update `bignumber.js` to 2.0.5 #1037 #1038\n\n## v2.6.0 (2015-03-24)\n\n* Add `poolCluster.remove` to remove pools from the cluster #1006 #1007\n* Add optional callback to `poolCluster.end`\n* Add `restoreNodeTimeout` option to `PoolCluster` #880 #906\n* Fix LOAD DATA INFILE handling in multiple statements #1036\n* Fix `poolCluster.add` to throw if `PoolCluster` has been closed\n* Fix `poolCluster.add` to throw if `id` already defined\n* Fix un-catchable error from `PoolCluster` when MySQL server offline #1033\n* Improve speed formatting SQL #1019\n* Support io.js\n\n## v2.5.5 (2015-02-23)\n\n* Store SSL presets in JS instead of JSON #959\n* Support Node.js 0.12\n* Update Amazon RDS SSL certificates #1001\n\n## v2.5.4 (2014-12-16)\n\n* Fix error if falsy error thrown in callback handler #960\n* Fix various error code strings #954\n\n## v2.5.3 (2014-11-06)\n\n* Fix `pool.query` streaming interface not emitting connection errors #941\n\n## v2.5.2 (2014-10-10)\n\n* Fix receiving large text fields #922\n\n## v2.5.1 (2014-09-22)\n\n* Fix `pool.end` race conditions #915\n* Fix `pool.getConnection` race conditions\n\n## v2.5.0 (2014-09-07)\n\n* Add code `POOL_ENQUEUELIMIT` to error reaching `queueLimit`\n* Add `enqueue` event to pool #716\n* Add `enqueue` event to protocol and connection #381\n* Blacklist unsupported connection flags #881\n* Make only column names enumerable in `RowDataPacket` #549 #895\n* Support Node.js 0.6 #718\n\n## v2.4.3 (2014-08-25)\n\n* Fix `pool.query` to use `typeCast` configuration\n\n## v2.4.2 (2014-08-03)\n\n* Fix incorrect sequence packet errors to be catchable #867\n* Fix stray protocol packet errors to be catchable #867\n* Fix timing of fatal protocol errors bubbling to user #879\n\n## v2.4.1 (2014-07-17)\n\n* Fix `pool.query` not invoking callback on connection error #872\n\n## v2.4.0 (2014-07-13)\n\n* Add code `POOL_NOEXIST` in PoolCluster error #846\n* Add `acquireTimeout` pool option to specify a timeout for acquiring a connection #821 #854\n* Add `connection.escapeId`\n* Add `pool.escapeId`\n* Add `timeout` option to all sequences #855 #863\n* Default `connectTimeout` to 10 seconds\n* Fix domain binding with `conn.connect`\n* Fix `packet.default` to actually be a string\n* Fix `PARSER_*` errors to be catchable\n* Fix `PROTOCOL_PACKETS_OUT_OF_ORDER` error to be catchable #844\n* Include packets that failed parsing under `debug`\n* Return `Query` object from `pool.query` like `conn.query` #830\n* Use `EventEmitter.listenerCount` when possible for faster counting\n\n## v2.3.2 (2014-05-29)\n\n* Fix pool leaking connections after `conn.changeUser` #833\n\n## v2.3.1 (2014-05-26)\n\n* Add database errors to error constants\n* Add global errors to error constants\n* Throw when calling `conn.release` multiple times #824 #827\n* Update known error codes\n\n## v2.3.0 (2014-05-16)\n\n* Accept MySQL charset (like `UTF8` or `UTF8MB4`) in `charset` option #808\n* Accept pool options in connection string to `mysql.createPool` #811\n* Clone connection config for new pool connections\n* Default `connectTimeout` to 2 minutes\n* Reject unauthorized SSL connections (use `ssl.rejectUnauthorized` to override) #816\n* Return last error when PoolCluster exhausts connection retries #818\n* Remove connection from pool after `conn.changeUser` is released #806\n* Throw on unknown SSL profile name #817\n* User newer TLS functions when available #809\n\n## v2.2.0 (2014-04-27)\n\n* Use indexOf instead of for loops removing conn from pool #611\n* Make callback to `pool.query` optional like `conn.query` #585\n* Prevent enqueuing sequences after fatal error #400\n* Fix geometry parser for empty fields #742\n* Accept lower-case charset option\n* Throw on unknown charset option #789\n* Update known charsets\n* Remove console.warn from PoolCluster #744\n* Fix `pool.end` to handle queued connections #797\n* Fix `pool.releaseConnection` to keep connection queue flowing #797\n* Fix SSL handshake error to  be catchable #800\n* Add `connection.threadId` to get MySQL connection ID #602\n* Ensure `pool.getConnection` retrieves good connections #434 #557 #778\n* Fix pool cluster wildcard matching #627\n* Pass query values through to `SqlString.format` #590\n\n## v2.1.1 (2014-03-13)\n\n* fix authentication w/password failure for node.js 0.10.5 #746 #752\n* fix authentication w/password TypeError exception for node.js 0.10.0-0.10.4 #747\n* fix specifying `values` in `conn.query({...}).on(...)` pattern #755\n* fix long stack trace to include the `pool.query(...)` call #715\n\n## v2.1.0 (2014-02-20)\n\n* crypto.createHash fix for node.js < 11 #735\n* Add `connectTimeout` option to specify a timeout for establishing a connection #726\n* SSL support #481\n\n## v2.0.1\n\n* internal parser speed improvement #702\n* domains support\n* 'trace' connection option to control if long stack traces are generated #713 #710 #439\n\n## v2.0.0 (2014-01-09)\n\n* stream improvements:\n  - node 0.8 support #692\n  - Emit 'close' events from query streams #688\n* encoding fix in streaming LOAD DATA LOCAL INFILE #670\n* Doc improvements\n\n## v2.0.0-rc2 (2013-12-07)\n\n* Streaming LOAD DATA LOCAL INFILE #668\n* Doc improvements\n\n## v2.0.0-rc1 (2013-11-30)\n\n* Transaction support\n* Expose SqlString.format as mysql.format()\n* Many bug fixes\n* Better support for dates in local time zone\n* Doc improvements\n\n## v2.0.0-alpha9 (2013-08-27)\n\n* Add query to pool to execute queries directly using the pool\n* Add `sqlState` property to `Error` objects #556\n* Pool option to set queue limit\n* Pool sends 'connection' event when it opens a new connection\n* Added stringifyObjects option to treat input as strings rather than objects (#501)\n* Support for poolClusters\n* Datetime improvements\n* Bug fixes\n\n## v2.0.0-alpha8 (2013-04-30)\n\n* Switch to old mode for Streams 2 (Node.js v 0.10.x)\n* Add stream method to Query Wraps events from the query object into a node v0.10.x Readable stream\n* DECIMAL should also be treated as big number\n* Removed slow unnecessary stack access\n* Added charsets\n* Added bigNumberStrings option for forcing BIGINT columns as strings\n* Changes date parsing to return String if not a valid JS Date\n* Adds support for ?? escape sequence to escape identifiers\n* Changes Auth.token() to force password to be in binary, not utf8 (#378)\n* Restrict debugging by packet types\n* Add 'multipleStatements' option tracking to ConnectionConfig. Fixes GH-408\n* Changes Pool to handle 'error' events and dispose connection\n* Allows db.query({ sql: \"...\" }, [ val1, ... ], cb); (#390)\n* Improved documentation\n* Bug fixes\n\n## v2.0.0-alpha7 (2013-02-03)\n\n* Add connection pooling (#351)\n\n## v2.0.0-alpha6 (2013-01-31)\n\n* Add supportBigNumbers option (#381, #382)\n* Accept prebuilt Query object in connection.query\n* Bug fixes\n\n## v2.0.0-alpha5 (2012-12-03)\n\n* Add mysql.escapeId to escape identifiers (closes #342)\n* Allow custom escaping mode (config.queryFormat)\n* Convert DATE columns to configured timezone instead of UTC (#332)\n* Convert LONGLONG and NEWDECIMAL to numbers (#333)\n* Fix Connection.escape() (fixes #330)\n* Changed Readme ambiguity about custom type cast fallback\n* Change typeCast to receive Connection instead of Connection.config.timezone\n* Fix drain event having useless err parameter\n* Add Connection.statistics() back from v0.9\n* Add Connection.ping() back from v0.9\n\n## v2.0.0-alpha4 (2012-10-03)\n\n* Fix some OOB errors on resume()\n* Fix quick pause() / resume() usage\n* Properly parse host denied / similar errors\n* Add Connection.ChangeUser functionality\n* Make sure changeUser errors are fatal\n* Enable formatting nested arrays for bulk inserts\n* Add Connection.escape functionality\n* Renamed 'close' to 'end' event\n* Return parsed object instead of Buffer for GEOMETRY types\n* Allow nestTables inline (using a string instead of a boolean)\n* Check for ZEROFILL_FLAG and format number accordingly\n* Add timezone support (default: local)\n* Add custom typeCast functionality\n* Export mysql column types\n* Add connection flags functionality (#237)\n* Exports drain event when queue finishes processing (#272, #271, #306)\n\n## v2.0.0-alpha3 (2012-06-12)\n\n* Implement support for `LOAD DATA LOCAL INFILE` queries (#182).\n* Support OLD\\_PASSWORD() accounts like 0.9.x did. You should still upgrade any\n  user accounts in your your MySQL user table that has short (16 byte) Password\n  values. Connecting to those accounts is not secure. (#204)\n* Ignore function values when escaping objects, allows to use RowDataPacket\n  objects as query arguments. (Alex Gorbatchev, #213)\n* Handle initial error packets from server such as `ER_HOST_NOT_PRIVILEGED`.\n* Treat `utf8\\_bin` as a String, not Buffer. (#214)\n* Handle empty strings in first row column value. (#222)\n* Honor Connection#nestTables setting for queries. (#221)\n* Remove `CLIENT_INTERACTIVE` flag from config. Improves #225.\n* Improve docs for connections settings.\n* Implement url string support for Connection configs.\n\n## v2.0.0-alpha2 (2012-05-31)\n\n* Specify escaping before for NaN / Infinity (they are as unquoted constants).\n* Support for unix domain socket connections (use: {socketPath: '...'}).\n* Fix type casting for NULL values for Date/Number fields\n* Add `fields` argument to `query()` as well as `'fields'` event. This is\n  similar to what was available in 0.9.x.\n* Support connecting to the sphinx searchd daemon as well as MariaDB (#199).\n* Implement long stack trace support, will be removed / disabled if the node\n  core ever supports it natively.\n* Implement `nestTables` option for queries, allows fetching JOIN result sets\n  with overlapping column names.\n* Fix ? placeholder mechanism for values containing '?' characters (#205).\n* Detect when `connect()` is called more than once on a connection and provide\n  the user with a good error message for it (#204).\n* Switch to `UTF8_GENERAL_CI` (previously `UTF8_UNICODE_CI`) as the default\n  charset for all connections to avoid strange MySQL performance issues (#200),\n  and also make the charset user configurable.\n* Fix BLOB type casting for `TINY_BLOB`, `MEDIUM_BLOB` and `LONG_BLOB`.\n* Add support for sending and receiving large (> 16 MB) packets.\n\n## v2.0.0-alpha (2012-05-15)\n\nThis release is a rewrite. You should carefully test your application after\nupgrading to avoid problems. This release features many improvements, most\nimportantly:\n\n* ~5x faster than v0.9.x for parsing query results\n* Support for pause() / resume() (for streaming rows)\n* Support for multiple statement queries\n* Support for stored procedures\n* Support for transactions\n* Support for binary columns (as blobs)\n* Consistent & well documented error handling\n* A new Connection class that has well defined semantics (unlike the old Client class).\n* Convenient escaping of objects / arrays that allows for simpler query construction\n* A significantly simpler code base\n* Many bug fixes & other small improvements (Closed 62 out of 66 GitHub issues)\n\nBelow are a few notes on the upgrade process itself:\n\nThe first thing you will run into is that the old `Client` class is gone and\nhas been replaced with a less ambitious `Connection` class. So instead of\n`mysql.createClient()`, you now have to:\n\n```js\nvar mysql      = require('mysql');\nvar connection = mysql.createConnection({\n  host     : 'localhost',\n  user     : 'me',\n  password : 'secret',\n});\n\nconnection.query('SELECT 1', function(err, rows) {\n  if (err) throw err;\n\n  console.log('Query result: ', rows);\n});\n\nconnection.end();\n```\n\nThe new `Connection` class does not try to handle re-connects, please study the\n`Server disconnects` section in the new Readme.\n\nOther than that, the interface has stayed very similar. Here are a few things\nto check out so:\n\n* BIGINT's are now cast into strings\n* Binary data is now cast to buffers\n* The `'row'` event on the `Query` object is now called `'result'` and will\n  also be emitted for queries that produce an OK/Error response.\n* Error handling is consistently defined now, check the Readme\n* Escaping has become more powerful which may break your code if you are\n  currently using objects to fill query placeholders.\n* Connections can now be established explicitly again, so you may wish to do so\n  if you want to handle connection errors specifically.\n\nThat should be most of it, if you run into anything else, please send a patch\nor open an issue to improve this document.\n\n## v0.9.6 (2012-03-12)\n\n* Escape array values so they produce sql arrays (Roger Castells, Colin Smith)\n* docs: mention mysql transaction stop gap solution (Blake Miner)\n* docs: Mention affectedRows in FAQ (Michael Baldwin)\n\n## v0.9.5 (2011-11-26)\n\n* Fix #142 Driver stalls upon reconnect attempt that's immediately closed\n* Add travis build\n* Switch to urun as a test runner\n* Switch to utest for unit tests\n* Remove fast-or-slow dependency for tests\n* Split integration tests into individual files again\n\n## v0.9.4 (2011-08-31)\n\n* Expose package.json as `mysql.PACKAGE` (#104)\n\n## v0.9.3 (2011-08-22)\n\n* Set default `client.user` to root\n* Fix #91: Client#format should not mutate params array\n* Fix #94: TypeError in client.js\n* Parse decimals as string (vadimg)\n\n## v0.9.2 (2011-08-07)\n\n* The underlaying socket connection is now managed implicitly rather than explicitly.\n* Check the [upgrading guide][] for a full list of changes.\n\n## v0.9.1 (2011-02-20)\n\n* Fix issue #49 / `client.escape()` throwing exceptions on objects. (Nick Payne)\n* Drop < v0.4.x compatibility. From now on you need node v0.4.x to use this module.\n\n## Older releases\n\nThese releases were done before maintaining this file:\n\n* [v0.9.0](https://github.com/mysqljs/mysql/compare/v0.8.0...v0.9.0)\n  (2011-01-04)\n* [v0.8.0](https://github.com/mysqljs/mysql/compare/v0.7.0...v0.8.0)\n  (2010-10-30)\n* [v0.7.0](https://github.com/mysqljs/mysql/compare/v0.6.0...v0.7.0)\n  (2010-10-14)\n* [v0.6.0](https://github.com/mysqljs/mysql/compare/v0.5.0...v0.6.0)\n  (2010-09-28)\n* [v0.5.0](https://github.com/mysqljs/mysql/compare/v0.4.0...v0.5.0)\n  (2010-09-17)\n* [v0.4.0](https://github.com/mysqljs/mysql/compare/v0.3.0...v0.4.0)\n  (2010-09-02)\n* [v0.3.0](https://github.com/mysqljs/mysql/compare/v0.2.0...v0.3.0)\n  (2010-08-25)\n* [v0.2.0](https://github.com/mysqljs/mysql/compare/v0.1.0...v0.2.0)\n  (2010-08-22)\n* [v0.1.0](https://github.com/mysqljs/mysql/commits/v0.1.0)\n  (2010-08-22)\n"
        },
        {
          "name": "License",
          "type": "blob",
          "size": 1.091796875,
          "content": "Copyright (c) 2012 Felix Geisendörfer (felix@debuggable.com) and contributors\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 58.705078125,
          "content": "# mysql\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Linux Build][github-actions-ci-image]][github-actions-ci-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\n## Table of Contents\n\n- [Install](#install)\n- [Introduction](#introduction)\n- [Contributors](#contributors)\n- [Sponsors](#sponsors)\n- [Community](#community)\n- [Establishing connections](#establishing-connections)\n- [Connection options](#connection-options)\n  - [SSL options](#ssl-options)\n  - [Connection flags](#connection-flags)\n- [Terminating connections](#terminating-connections)\n- [Pooling connections](#pooling-connections)\n- [Pool options](#pool-options)\n- [Pool events](#pool-events)\n  - [acquire](#acquire)\n  - [connection](#connection)\n  - [enqueue](#enqueue)\n  - [release](#release)\n- [Closing all the connections in a pool](#closing-all-the-connections-in-a-pool)\n- [PoolCluster](#poolcluster)\n  - [PoolCluster options](#poolcluster-options)\n- [Switching users and altering connection state](#switching-users-and-altering-connection-state)\n- [Server disconnects](#server-disconnects)\n- [Performing queries](#performing-queries)\n- [Escaping query values](#escaping-query-values)\n- [Escaping query identifiers](#escaping-query-identifiers)\n  - [Preparing Queries](#preparing-queries)\n  - [Custom format](#custom-format)\n- [Getting the id of an inserted row](#getting-the-id-of-an-inserted-row)\n- [Getting the number of affected rows](#getting-the-number-of-affected-rows)\n- [Getting the number of changed rows](#getting-the-number-of-changed-rows)\n- [Getting the connection ID](#getting-the-connection-id)\n- [Executing queries in parallel](#executing-queries-in-parallel)\n- [Streaming query rows](#streaming-query-rows)\n  - [Piping results with Streams](#piping-results-with-streams)\n- [Multiple statement queries](#multiple-statement-queries)\n- [Stored procedures](#stored-procedures)\n- [Joins with overlapping column names](#joins-with-overlapping-column-names)\n- [Transactions](#transactions)\n- [Ping](#ping)\n- [Timeouts](#timeouts)\n- [Error handling](#error-handling)\n- [Exception Safety](#exception-safety)\n- [Type casting](#type-casting)\n  - [Number](#number)\n  - [Date](#date)\n  - [Buffer](#buffer)\n  - [String](#string)\n  - [Custom type casting](#custom-type-casting)\n- [Debugging and reporting problems](#debugging-and-reporting-problems)\n- [Security issues](#security-issues)\n- [Contributing](#contributing)\n- [Running tests](#running-tests)\n  - [Running unit tests](#running-unit-tests)\n  - [Running integration tests](#running-integration-tests)\n- [Todo](#todo)\n\n## Install\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/).\n\nBefore installing, [download and install Node.js](https://nodejs.org/en/download/).\nNode.js 0.6 or higher is required.\n\nInstallation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```sh\n$ npm install mysql\n```\n\nFor information about the previous 0.9.x releases, visit the [v0.9 branch][].\n\nSometimes I may also ask you to install the latest version from Github to check\nif a bugfix is working. In this case, please do:\n\n```sh\n$ npm install mysqljs/mysql\n```\n\n[v0.9 branch]: https://github.com/mysqljs/mysql/tree/v0.9\n\n## Introduction\n\nThis is a node.js driver for mysql. It is written in JavaScript, does not\nrequire compiling, and is 100% MIT licensed.\n\nHere is an example on how to use it:\n\n```js\nvar mysql      = require('mysql');\nvar connection = mysql.createConnection({\n  host     : 'localhost',\n  user     : 'me',\n  password : 'secret',\n  database : 'my_db'\n});\n\nconnection.connect();\n\nconnection.query('SELECT 1 + 1 AS solution', function (error, results, fields) {\n  if (error) throw error;\n  console.log('The solution is: ', results[0].solution);\n});\n\nconnection.end();\n```\n\nFrom this example, you can learn the following:\n\n* Every method you invoke on a connection is queued and executed in sequence.\n* Closing the connection is done using `end()` which makes sure all remaining\n  queries are executed before sending a quit packet to the mysql server.\n\n## Contributors\n\nThanks goes to the people who have contributed code to this module, see the\n[GitHub Contributors page][].\n\n[GitHub Contributors page]: https://github.com/mysqljs/mysql/graphs/contributors\n\nAdditionally I'd like to thank the following people:\n\n* [Andrey Hristov][] (Oracle) - for helping me with protocol questions.\n* [Ulf Wendel][] (Oracle) - for helping me with protocol questions.\n\n[Ulf Wendel]: http://blog.ulf-wendel.de/\n[Andrey Hristov]: http://andrey.hristov.com/\n\n## Sponsors\n\nThe following companies have supported this project financially, allowing me to\nspend more time on it (ordered by time of contribution):\n\n* [Transloadit](http://transloadit.com) (my startup, we do file uploading &\n  video encoding as a service, check it out)\n* [Joyent](http://www.joyent.com/)\n* [pinkbike.com](http://pinkbike.com/)\n* [Holiday Extras](https://www.holidayextras.com/) (they are [hiring](https://join.holidayextras.co.uk/))\n* [Newscope](http://newscope.com/) (they are [hiring](https://newscope.com/unternehmen/jobs/))\n\n## Community\n\nIf you'd like to discuss this module, or ask questions about it, please use one\nof the following:\n\n* **Mailing list**: https://groups.google.com/forum/#!forum/node-mysql\n* **IRC Channel**: #node.js (on freenode.net, I pay attention to any message\n  including the term `mysql`)\n\n## Establishing connections\n\nThe recommended way to establish a connection is this:\n\n```js\nvar mysql      = require('mysql');\nvar connection = mysql.createConnection({\n  host     : 'example.org',\n  user     : 'bob',\n  password : 'secret'\n});\n\nconnection.connect(function(err) {\n  if (err) {\n    console.error('error connecting: ' + err.stack);\n    return;\n  }\n\n  console.log('connected as id ' + connection.threadId);\n});\n```\n\nHowever, a connection can also be implicitly established by invoking a query:\n\n```js\nvar mysql      = require('mysql');\nvar connection = mysql.createConnection(...);\n\nconnection.query('SELECT 1', function (error, results, fields) {\n  if (error) throw error;\n  // connected!\n});\n```\n\nDepending on how you like to handle your errors, either method may be\nappropriate. Any type of connection error (handshake or network) is considered\na fatal error, see the [Error Handling](#error-handling) section for more\ninformation.\n\n## Connection options\n\nWhen establishing a connection, you can set the following options:\n\n* `host`: The hostname of the database you are connecting to. (Default:\n  `localhost`)\n* `port`: The port number to connect to. (Default: `3306`)\n* `localAddress`: The source IP address to use for TCP connection. (Optional)\n* `socketPath`: The path to a unix domain socket to connect to. When used `host`\n  and `port` are ignored.\n* `user`: The MySQL user to authenticate as.\n* `password`: The password of that MySQL user.\n* `database`: Name of the database to use for this connection (Optional).\n* `charset`: The charset for the connection. This is called \"collation\" in the SQL-level\n  of MySQL (like `utf8_general_ci`). If a SQL-level charset is specified (like `utf8mb4`)\n  then the default collation for that charset is used. (Default: `'UTF8_GENERAL_CI'`)\n* `timezone`: The timezone configured on the MySQL server. This is used to type cast server date/time values to JavaScript `Date` object and vice versa. This can be `'local'`, `'Z'`, or an offset in the form `+HH:MM` or `-HH:MM`. (Default: `'local'`)\n* `connectTimeout`: The milliseconds before a timeout occurs during the initial connection\n  to the MySQL server. (Default: `10000`)\n* `stringifyObjects`: Stringify objects instead of converting to values. (Default: `false`)\n* `insecureAuth`: Allow connecting to MySQL instances that ask for the old\n  (insecure) authentication method. (Default: `false`)\n* `typeCast`: Determines if column values should be converted to native\n   JavaScript types. (Default: `true`)\n* `queryFormat`: A custom query format function. See [Custom format](#custom-format).\n* `supportBigNumbers`: When dealing with big numbers (BIGINT and DECIMAL columns) in the database,\n  you should enable this option (Default: `false`).\n* `bigNumberStrings`: Enabling both `supportBigNumbers` and `bigNumberStrings` forces big numbers\n  (BIGINT and DECIMAL columns) to be always returned as JavaScript String objects (Default: `false`).\n  Enabling `supportBigNumbers` but leaving `bigNumberStrings` disabled will return big numbers as String\n  objects only when they cannot be accurately represented with [JavaScript Number objects] (https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type)\n  (which happens when they exceed the [-2^53, +2^53] range), otherwise they will be returned as\n  Number objects. This option is ignored if `supportBigNumbers` is disabled.\n* `dateStrings`: Force date types (TIMESTAMP, DATETIME, DATE) to be returned as strings rather than\n   inflated into JavaScript Date objects. Can be `true`/`false` or an array of type names to keep as\n   strings. (Default: `false`)\n* `debug`: Prints protocol details to stdout. Can be `true`/`false` or an array of packet type names\n   that should be printed. (Default: `false`)\n* `trace`: Generates stack traces on `Error` to include call site of library\n   entrance (\"long stack traces\"). Slight performance penalty for most calls.\n   (Default: `true`)\n* `localInfile`: Allow `LOAD DATA INFILE` to use the `LOCAL` modifier. (Default: `true`)\n* `multipleStatements`: Allow multiple mysql statements per query. Be careful\n  with this, it could increase the scope of SQL injection attacks. (Default: `false`)\n* `flags`: List of connection flags to use other than the default ones. It is\n  also possible to blacklist default ones. For more information, check\n  [Connection Flags](#connection-flags).\n* `ssl`: object with ssl parameters or a string containing name of ssl profile. See [SSL options](#ssl-options).\n\n\nIn addition to passing these options as an object, you can also use a url\nstring. For example:\n\n```js\nvar connection = mysql.createConnection('mysql://user:pass@host/db?debug=true&charset=BIG5_CHINESE_CI&timezone=-0700');\n```\n\nNote: The query values are first attempted to be parsed as JSON, and if that\nfails assumed to be plaintext strings.\n\n### SSL options\n\nThe `ssl` option in the connection options takes a string or an object. When given a string,\nit uses one of the predefined SSL profiles included. The following profiles are included:\n\n* `\"Amazon RDS\"`: this profile is for connecting to an Amazon RDS server and contains the\n  certificates from https://rds.amazonaws.com/doc/rds-ssl-ca-cert.pem and\n  https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem\n\nWhen connecting to other servers, you will need to provide an object with any of the\nfollowing options:\n\n* `ca`: The certificate(s) to trust instead of the ones Node.js is configured to trust. This refers\n  to the value of the certificate(s) and not a filename of the certificate(s). This is passed as the\n  `ca` option for the underlying [`tls.createSecureContext()`] call (or underlying [`crypto.createCredentials()`]\n  if using Node.js below 0.12).\n* `cert`: The client certificate to use in the SSL handshake. This is passed as the `cert` option for\n  the underlying [`tls.createSecureContext()`] call (or underlying [`crypto.createCredentials()`] if\n  using Node.js below 0.12).\n* `ciphers`: The ciphers to use to use in the SSL handshake instead of the default ones for Node.js. This\n  is passed as the `ciphers` option for [`tls.createSecureContext()`] call (or underlying [`crypto.createCredentials()`]\n  if using Node.js below 0.12).\n* `maxVersion`: This is passed as the `maxVersion` option for the underlying [`tls.createSecureContext()`]\n  call.\n* `minVersion`: This is passed as the `minVersion` option for the underlying [`tls.createSecureContext()`]\n  call.\n* `key`: This is passed as the `key` option for [`tls.createSecureContext()`] call (or underlying\n  [`crypto.createCredentials()`] if using Node.js below 0.12).\n* `passphrase`: This is passed as the `passphrase` option for [`tls.createSecureContext()`] call (or\n  underlying [`crypto.createCredentials()`] if using Node.js below 0.12).\n* `rejectUnauthorized`: The server certificate is verified against the list of supplied CAs and the\n  hostname, and if no match is found, the SSL connection will fail. (Default: `true`)\n\n[`crypto.createCredentials()`]: https://nodejs.org/docs/latest-v0.10.x/api/crypto.html#crypto_crypto_createcredentials_details\n[`tls.createSecureContext()`]: https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options\n\nHere is a simple example:\n\n```js\nvar connection = mysql.createConnection({\n  host : 'localhost',\n  ssl  : {\n    ca : fs.readFileSync(__dirname + '/mysql-ca.crt')\n  }\n});\n```\n\nYou can also connect to a MySQL server without properly providing the appropriate\nCA to trust. _You should not do this_.\n\n```js\nvar connection = mysql.createConnection({\n  host : 'localhost',\n  ssl  : {\n    // DO NOT DO THIS\n    // set up your ca correctly to trust the connection\n    rejectUnauthorized: false\n  }\n});\n```\n\n### Connection flags\n\nIf, for any reason, you would like to change the default connection flags, you\ncan use the connection option `flags`. Pass a string with a comma separated list\nof items to add to the default flags. If you don't want a default flag to be used\nprepend the flag with a minus sign. To add a flag that is not in the default list,\njust write the flag name, or prefix it with a plus (case insensitive).\n\n```js\nvar connection = mysql.createConnection({\n  // disable FOUND_ROWS flag, enable IGNORE_SPACE flag\n  flags: '-FOUND_ROWS,IGNORE_SPACE'\n});\n```\n\nThe following flags are available:\n\n- `COMPRESS` - Enable protocol compression. This feature is not currently supported\n  by the Node.js implementation so cannot be turned on. (Default off)\n- `CONNECT_WITH_DB` - Ability to specify the database on connection. (Default on)\n- `FOUND_ROWS` - Send the found rows instead of the affected rows as `affectedRows`.\n  (Default on)\n- `IGNORE_SIGPIPE` - Don't issue SIGPIPE if network failures. This flag has no effect\n  on this Node.js implementation. (Default on)\n- `IGNORE_SPACE` - Let the parser ignore spaces before the `(` in queries. (Default on)\n- `INTERACTIVE` - Indicates to the MySQL server this is an \"interactive\" client. This\n  will use the interactive timeouts on the MySQL server and report as interactive in\n  the process list. (Default off)\n- `LOCAL_FILES` - Can use `LOAD DATA LOCAL`. This flag is controlled by the connection\n  option `localInfile`. (Default on)\n- `LONG_FLAG` - Longer flags in Protocol::ColumnDefinition320. (Default on)\n- `LONG_PASSWORD` - Use the improved version of Old Password Authentication.\n  (Default on)\n- `MULTI_RESULTS` - Can handle multiple resultsets for queries. (Default on)\n- `MULTI_STATEMENTS` - The client may send multiple statement per query or\n  statement prepare (separated by `;`). This flag is controlled by the connection\n  option `multipleStatements`. (Default off)\n- `NO_SCHEMA`\n- `ODBC` Special handling of ODBC behaviour. This flag has no effect on this Node.js\n  implementation. (Default on)\n- `PLUGIN_AUTH` - Uses the plugin authentication mechanism when connecting to the\n  MySQL server. This feature is not currently supported by the Node.js implementation\n  so cannot be turned on. (Default off)\n- `PROTOCOL_41` - Uses the 4.1 protocol. (Default on)\n- `PS_MULTI_RESULTS` - Can handle multiple resultsets for execute. (Default on)\n- `REMEMBER_OPTIONS` - This is specific to the C client, and has no effect on this\n  Node.js implementation. (Default off)\n- `RESERVED` - Old flag for the 4.1 protocol. (Default on)\n- `SECURE_CONNECTION` - Support native 4.1 authentication. (Default on)\n- `SSL` - Use SSL after handshake to encrypt data in transport. This feature is\n  controlled though the `ssl` connection option, so the flag has no effect.\n  (Default off)\n- `SSL_VERIFY_SERVER_CERT` - Verify the server certificate during SSL set up. This\n  feature is controlled though the `ssl.rejectUnauthorized` connection option, so\n  the flag has no effect. (Default off)\n- `TRANSACTIONS` - Asks for the transaction status flags. (Default on)\n\n## Terminating connections\n\nThere are two ways to end a connection. Terminating a connection gracefully is\ndone by calling the `end()` method:\n\n```js\nconnection.end(function(err) {\n  // The connection is terminated now\n});\n```\n\nThis will make sure all previously enqueued queries are still executed before\nsending a `COM_QUIT` packet to the MySQL server. If a fatal error occurs before\nthe `COM_QUIT` packet can be sent, an `err` argument will be provided to the\ncallback, but the connection will be terminated regardless of that.\n\nAn alternative way to end the connection is to call the `destroy()` method.\nThis will cause an immediate termination of the underlying socket.\nAdditionally `destroy()` guarantees that no more events or callbacks will be\ntriggered for the connection.\n\n```js\nconnection.destroy();\n```\n\nUnlike `end()` the `destroy()` method does not take a callback argument.\n\n## Pooling connections\n\nRather than creating and managing connections one-by-one, this module also\nprovides built-in connection pooling using `mysql.createPool(config)`.\n[Read more about connection pooling](https://en.wikipedia.org/wiki/Connection_pool).\n\nCreate a pool and use it directly:\n\n```js\nvar mysql = require('mysql');\nvar pool  = mysql.createPool({\n  connectionLimit : 10,\n  host            : 'example.org',\n  user            : 'bob',\n  password        : 'secret',\n  database        : 'my_db'\n});\n\npool.query('SELECT 1 + 1 AS solution', function (error, results, fields) {\n  if (error) throw error;\n  console.log('The solution is: ', results[0].solution);\n});\n```\n\nThis is a shortcut for the `pool.getConnection()` -> `connection.query()` ->\n`connection.release()` code flow. Using `pool.getConnection()` is useful to\nshare connection state for subsequent queries. This is because two calls to\n`pool.query()` may use two different connections and run in parallel. This is\nthe basic structure:\n\n```js\nvar mysql = require('mysql');\nvar pool  = mysql.createPool(...);\n\npool.getConnection(function(err, connection) {\n  if (err) throw err; // not connected!\n\n  // Use the connection\n  connection.query('SELECT something FROM sometable', function (error, results, fields) {\n    // When done with the connection, release it.\n    connection.release();\n\n    // Handle error after the release.\n    if (error) throw error;\n\n    // Don't use the connection here, it has been returned to the pool.\n  });\n});\n```\n\nIf you would like to close the connection and remove it from the pool, use\n`connection.destroy()` instead. The pool will create a new connection the next\ntime one is needed.\n\nConnections are lazily created by the pool. If you configure the pool to allow\nup to 100 connections, but only ever use 5 simultaneously, only 5 connections\nwill be made. Connections are also cycled round-robin style, with connections\nbeing taken from the top of the pool and returning to the bottom.\n\nWhen a previous connection is retrieved from the pool, a ping packet is sent\nto the server to check if the connection is still good.\n\n## Pool options\n\nPools accept all the same [options as a connection](#connection-options).\nWhen creating a new connection, the options are simply passed to the connection\nconstructor. In addition to those options pools accept a few extras:\n\n* `acquireTimeout`: The milliseconds before a timeout occurs during the connection\n  acquisition. This is slightly different from `connectTimeout`, because acquiring\n  a pool connection does not always involve making a connection. If a connection\n  request is queued, the time the request spends in the queue does not count\n  towards this timeout. (Default: `10000`)\n* `waitForConnections`: Determines the pool's action when no connections are\n  available and the limit has been reached. If `true`, the pool will queue the\n  connection request and call it when one becomes available. If `false`, the\n  pool will immediately call back with an error. (Default: `true`)\n* `connectionLimit`: The maximum number of connections to create at once.\n  (Default: `10`)\n* `queueLimit`: The maximum number of connection requests the pool will queue\n  before returning an error from `getConnection`. If set to `0`, there is no\n  limit to the number of queued connection requests. (Default: `0`)\n\n## Pool events\n\n### acquire\n\nThe pool will emit an `acquire` event when a connection is acquired from the pool.\nThis is called after all acquiring activity has been performed on the connection,\nright before the connection is handed to the callback of the acquiring code.\n\n```js\npool.on('acquire', function (connection) {\n  console.log('Connection %d acquired', connection.threadId);\n});\n```\n\n### connection\n\nThe pool will emit a `connection` event when a new connection is made within the pool.\nIf you need to set session variables on the connection before it gets used, you can\nlisten to the `connection` event.\n\n```js\npool.on('connection', function (connection) {\n  connection.query('SET SESSION auto_increment_increment=1')\n});\n```\n\n### enqueue\n\nThe pool will emit an `enqueue` event when a callback has been queued to wait for\nan available connection.\n\n```js\npool.on('enqueue', function () {\n  console.log('Waiting for available connection slot');\n});\n```\n\n### release\n\nThe pool will emit a `release` event when a connection is released back to the\npool. This is called after all release activity has been performed on the connection,\nso the connection will be listed as free at the time of the event.\n\n```js\npool.on('release', function (connection) {\n  console.log('Connection %d released', connection.threadId);\n});\n```\n\n## Closing all the connections in a pool\n\nWhen you are done using the pool, you have to end all the connections or the\nNode.js event loop will stay active until the connections are closed by the\nMySQL server. This is typically done if the pool is used in a script or when\ntrying to gracefully shutdown a server. To end all the connections in the\npool, use the `end` method on the pool:\n\n```js\npool.end(function (err) {\n  // all connections in the pool have ended\n});\n```\n\nThe `end` method takes an _optional_ callback that you can use to know when\nall the connections are ended.\n\n**Once `pool.end` is called, `pool.getConnection` and other operations\ncan no longer be performed.** Wait until all connections in the pool are\nreleased before calling `pool.end`. If you use the shortcut method\n`pool.query`, in place of `pool.getConnection` → `connection.query` →\n`connection.release`, wait until it completes.\n\n`pool.end` calls `connection.end` on every active connection in the pool.\nThis queues a `QUIT` packet on the connection and sets a flag to prevent\n`pool.getConnection` from creating new connections. All commands / queries\nalready in progress will complete, but new commands won't execute.\n\n## PoolCluster\n\nPoolCluster provides multiple hosts connection. (group & retry & selector)\n\n```js\n// create\nvar poolCluster = mysql.createPoolCluster();\n\n// add configurations (the config is a pool config object)\npoolCluster.add(config); // add configuration with automatic name\npoolCluster.add('MASTER', masterConfig); // add a named configuration\npoolCluster.add('SLAVE1', slave1Config);\npoolCluster.add('SLAVE2', slave2Config);\n\n// remove configurations\npoolCluster.remove('SLAVE2'); // By nodeId\npoolCluster.remove('SLAVE*'); // By target group : SLAVE1-2\n\n// Target Group : ALL(anonymous, MASTER, SLAVE1-2), Selector : round-robin(default)\npoolCluster.getConnection(function (err, connection) {});\n\n// Target Group : MASTER, Selector : round-robin\npoolCluster.getConnection('MASTER', function (err, connection) {});\n\n// Target Group : SLAVE1-2, Selector : order\n// If can't connect to SLAVE1, return SLAVE2. (remove SLAVE1 in the cluster)\npoolCluster.on('remove', function (nodeId) {\n  console.log('REMOVED NODE : ' + nodeId); // nodeId = SLAVE1\n});\n\n// A pattern can be passed with *  as wildcard\npoolCluster.getConnection('SLAVE*', 'ORDER', function (err, connection) {});\n\n// The pattern can also be a regular expression\npoolCluster.getConnection(/^SLAVE[12]$/, function (err, connection) {});\n\n// of namespace : of(pattern, selector)\npoolCluster.of('*').getConnection(function (err, connection) {});\n\nvar pool = poolCluster.of('SLAVE*', 'RANDOM');\npool.getConnection(function (err, connection) {});\npool.getConnection(function (err, connection) {});\npool.query(function (error, results, fields) {});\n\n// close all connections\npoolCluster.end(function (err) {\n  // all connections in the pool cluster have ended\n});\n```\n\n### PoolCluster options\n\n* `canRetry`: If `true`, `PoolCluster` will attempt to reconnect when connection fails. (Default: `true`)\n* `removeNodeErrorCount`: If connection fails, node's `errorCount` increases.\n  When `errorCount` is greater than `removeNodeErrorCount`, remove a node in the `PoolCluster`. (Default: `5`)\n* `restoreNodeTimeout`: If connection fails, specifies the number of milliseconds\n  before another connection attempt will be made. If set to `0`, then node will be\n  removed instead and never re-used. (Default: `0`)\n* `defaultSelector`: The default selector. (Default: `RR`)\n  * `RR`: Select one alternately. (Round-Robin)\n  * `RANDOM`: Select the node by random function.\n  * `ORDER`: Select the first node available unconditionally.\n\n```js\nvar clusterConfig = {\n  removeNodeErrorCount: 1, // Remove the node immediately when connection fails.\n  defaultSelector: 'ORDER'\n};\n\nvar poolCluster = mysql.createPoolCluster(clusterConfig);\n```\n\n## Switching users and altering connection state\n\nMySQL offers a changeUser command that allows you to alter the current user and\nother aspects of the connection without shutting down the underlying socket:\n\n```js\nconnection.changeUser({user : 'john'}, function(err) {\n  if (err) throw err;\n});\n```\n\nThe available options for this feature are:\n\n* `user`: The name of the new user (defaults to the previous one).\n* `password`: The password of the new user (defaults to the previous one).\n* `charset`: The new charset (defaults to the previous one).\n* `database`: The new database (defaults to the previous one).\n\nA sometimes useful side effect of this functionality is that this function also\nresets any connection state (variables, transactions, etc.).\n\nErrors encountered during this operation are treated as fatal connection errors\nby this module.\n\n## Server disconnects\n\nYou may lose the connection to a MySQL server due to network problems, the\nserver timing you out, the server being restarted, or crashing. All of these\nevents are considered fatal errors, and will have the `err.code =\n'PROTOCOL_CONNECTION_LOST'`.  See the [Error Handling](#error-handling) section\nfor more information.\n\nRe-connecting a connection is done by establishing a new connection. Once\nterminated, an existing connection object cannot be re-connected by design.\n\nWith Pool, disconnected connections will be removed from the pool freeing up\nspace for a new connection to be created on the next getConnection call.\n\nWith PoolCluster, disconnected connections will count as errors against the\nrelated node, incrementing the error code for that node. Once there are more than\n`removeNodeErrorCount` errors on a given node, it is removed from the cluster.\nWhen this occurs, the PoolCluster may emit a `POOL_NONEONLINE` error if there are\nno longer any matching nodes for the pattern. The `restoreNodeTimeout` config can\nbe set to restore offline nodes after a given timeout.\n\n## Performing queries\n\nThe most basic way to perform a query is to call the `.query()` method on an object\n(like a `Connection`, `Pool`, or `PoolNamespace` instance).\n\nThe simplest form of `.query()` is `.query(sqlString, callback)`, where a SQL string\nis the first argument and the second is a callback:\n\n```js\nconnection.query('SELECT * FROM `books` WHERE `author` = \"David\"', function (error, results, fields) {\n  // error will be an Error if one occurred during the query\n  // results will contain the results of the query\n  // fields will contain information about the returned results fields (if any)\n});\n```\n\nThe second form `.query(sqlString, values, callback)` comes when using\nplaceholder values (see [escaping query values](#escaping-query-values)):\n\n```js\nconnection.query('SELECT * FROM `books` WHERE `author` = ?', ['David'], function (error, results, fields) {\n  // error will be an Error if one occurred during the query\n  // results will contain the results of the query\n  // fields will contain information about the returned results fields (if any)\n});\n```\n\nThe third form `.query(options, callback)` comes when using various advanced\noptions on the query, like [escaping query values](#escaping-query-values),\n[joins with overlapping column names](#joins-with-overlapping-column-names),\n[timeouts](#timeouts), and [type casting](#type-casting).\n\n```js\nconnection.query({\n  sql: 'SELECT * FROM `books` WHERE `author` = ?',\n  timeout: 40000, // 40s\n  values: ['David']\n}, function (error, results, fields) {\n  // error will be an Error if one occurred during the query\n  // results will contain the results of the query\n  // fields will contain information about the returned results fields (if any)\n});\n```\n\nNote that a combination of the second and third forms can be used where the\nplaceholder values are passed as an argument and not in the options object.\nThe `values` argument will override the `values` in the option object.\n\n```js\nconnection.query({\n    sql: 'SELECT * FROM `books` WHERE `author` = ?',\n    timeout: 40000, // 40s\n  },\n  ['David'],\n  function (error, results, fields) {\n    // error will be an Error if one occurred during the query\n    // results will contain the results of the query\n    // fields will contain information about the returned results fields (if any)\n  }\n);\n```\n\nIf the query only has a single replacement character (`?`), and the value is\nnot `null`, `undefined`, or an array, it can be passed directly as the second\nargument to `.query`:\n\n```js\nconnection.query(\n  'SELECT * FROM `books` WHERE `author` = ?',\n  'David',\n  function (error, results, fields) {\n    // error will be an Error if one occurred during the query\n    // results will contain the results of the query\n    // fields will contain information about the returned results fields (if any)\n  }\n);\n```\n\n## Escaping query values\n\n**Caution** These methods of escaping values only works when the\n[NO_BACKSLASH_ESCAPES](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_no_backslash_escapes)\nSQL mode is disabled (which is the default state for MySQL servers).\n\n**Caution** This library performs client-side escaping, as this is a library\nto generate SQL strings on the client side. The syntax for functions like\n`mysql.format` may look similar to a prepared statement, but it is not\nand the escaping rules from this module are used to generate a resulting SQL\nstring. The purpose of escaping input is to avoid SQL Injection attacks.\nIn order to support enhanced support like `SET` and `IN` formatting, this\nmodule will escape based on the shape of the passed in JavaScript value,\nand the resulting escaped string may be more than a single value. When\nstructured user input is provided as the value to escape, care should be taken\nto validate the shape of the input to validate the output will be what is\nexpected.\n\nIn order to avoid SQL Injection attacks, you should always escape any user\nprovided data before using it inside a SQL query. You can do so using the\n`mysql.escape()`, `connection.escape()` or `pool.escape()` methods:\n\n```js\nvar userId = 'some user provided value';\nvar sql    = 'SELECT * FROM users WHERE id = ' + connection.escape(userId);\nconnection.query(sql, function (error, results, fields) {\n  if (error) throw error;\n  // ...\n});\n```\n\nAlternatively, you can use `?` characters as placeholders for values you would\nlike to have escaped like this:\n\n```js\nconnection.query('SELECT * FROM users WHERE id = ?', [userId], function (error, results, fields) {\n  if (error) throw error;\n  // ...\n});\n```\n\nMultiple placeholders are mapped to values in the same order as passed. For example,\nin the following query `foo` equals `a`, `bar` equals `b`, `baz` equals `c`, and\n`id` will be `userId`:\n\n```js\nconnection.query('UPDATE users SET foo = ?, bar = ?, baz = ? WHERE id = ?', ['a', 'b', 'c', userId], function (error, results, fields) {\n  if (error) throw error;\n  // ...\n});\n```\n\nThis looks similar to prepared statements in MySQL, however it really just uses\nthe same `connection.escape()` method internally.\n\n**Caution** This also differs from prepared statements in that all `?` are\nreplaced, even those contained in comments and strings.\n\nDifferent value types are escaped differently, here is how:\n\n* Numbers are left untouched\n* Booleans are converted to `true` / `false`\n* Date objects are converted to `'YYYY-mm-dd HH:ii:ss'` strings\n* Buffers are converted to hex strings, e.g. `X'0fa5'`\n* Strings are safely escaped\n* Arrays are turned into list, e.g. `['a', 'b']` turns into `'a', 'b'`\n* Nested arrays are turned into grouped lists (for bulk inserts), e.g. `[['a',\n  'b'], ['c', 'd']]` turns into `('a', 'b'), ('c', 'd')`\n* Objects that have a `toSqlString` method will have `.toSqlString()` called\n  and the returned value is used as the raw SQL.\n* Objects are turned into `key = 'val'` pairs for each enumerable property on\n  the object. If the property's value is a function, it is skipped; if the\n  property's value is an object, toString() is called on it and the returned\n  value is used.\n* `undefined` / `null` are converted to `NULL`\n* `NaN` / `Infinity` are left as-is. MySQL does not support these, and trying\n  to insert them as values will trigger MySQL errors until they implement\n  support.\n\nThis escaping allows you to do neat things like this:\n\n```js\nvar post  = {id: 1, title: 'Hello MySQL'};\nvar query = connection.query('INSERT INTO posts SET ?', post, function (error, results, fields) {\n  if (error) throw error;\n  // Neat!\n});\nconsole.log(query.sql); // INSERT INTO posts SET `id` = 1, `title` = 'Hello MySQL'\n```\n\nAnd the `toSqlString` method allows you to form complex queries with functions:\n\n```js\nvar CURRENT_TIMESTAMP = { toSqlString: function() { return 'CURRENT_TIMESTAMP()'; } };\nvar sql = mysql.format('UPDATE posts SET modified = ? WHERE id = ?', [CURRENT_TIMESTAMP, 42]);\nconsole.log(sql); // UPDATE posts SET modified = CURRENT_TIMESTAMP() WHERE id = 42\n```\n\nTo generate objects with a `toSqlString` method, the `mysql.raw()` method can\nbe used. This creates an object that will be left un-touched when using in a `?`\nplaceholder, useful for using functions as dynamic values:\n\n**Caution** The string provided to `mysql.raw()` will skip all escaping\nfunctions when used, so be careful when passing in unvalidated input.\n\n```js\nvar CURRENT_TIMESTAMP = mysql.raw('CURRENT_TIMESTAMP()');\nvar sql = mysql.format('UPDATE posts SET modified = ? WHERE id = ?', [CURRENT_TIMESTAMP, 42]);\nconsole.log(sql); // UPDATE posts SET modified = CURRENT_TIMESTAMP() WHERE id = 42\n```\n\nIf you feel the need to escape queries by yourself, you can also use the escaping\nfunction directly:\n\n```js\nvar query = \"SELECT * FROM posts WHERE title=\" + mysql.escape(\"Hello MySQL\");\n\nconsole.log(query); // SELECT * FROM posts WHERE title='Hello MySQL'\n```\n\n## Escaping query identifiers\n\nIf you can't trust an SQL identifier (database / table / column name) because it is\nprovided by a user, you should escape it with `mysql.escapeId(identifier)`,\n`connection.escapeId(identifier)` or `pool.escapeId(identifier)` like this:\n\n```js\nvar sorter = 'date';\nvar sql    = 'SELECT * FROM posts ORDER BY ' + connection.escapeId(sorter);\nconnection.query(sql, function (error, results, fields) {\n  if (error) throw error;\n  // ...\n});\n```\n\nIt also supports adding qualified identifiers. It will escape both parts.\n\n```js\nvar sorter = 'date';\nvar sql    = 'SELECT * FROM posts ORDER BY ' + connection.escapeId('posts.' + sorter);\n// -> SELECT * FROM posts ORDER BY `posts`.`date`\n```\n\nIf you do not want to treat `.` as qualified identifiers, you can set the second\nargument to `true` in order to keep the string as a literal identifier:\n\n```js\nvar sorter = 'date.2';\nvar sql    = 'SELECT * FROM posts ORDER BY ' + connection.escapeId(sorter, true);\n// -> SELECT * FROM posts ORDER BY `date.2`\n```\n\nAlternatively, you can use `??` characters as placeholders for identifiers you would\nlike to have escaped like this:\n\n```js\nvar userId = 1;\nvar columns = ['username', 'email'];\nvar query = connection.query('SELECT ?? FROM ?? WHERE id = ?', [columns, 'users', userId], function (error, results, fields) {\n  if (error) throw error;\n  // ...\n});\n\nconsole.log(query.sql); // SELECT `username`, `email` FROM `users` WHERE id = 1\n```\n**Please note that this last character sequence is experimental and syntax might change**\n\nWhen you pass an Object to `.escape()` or `.query()`, `.escapeId()` is used to avoid SQL injection in object keys.\n\n### Preparing Queries\n\nYou can use mysql.format to prepare a query with multiple insertion points, utilizing the proper escaping for ids and values. A simple example of this follows:\n\n```js\nvar sql = \"SELECT * FROM ?? WHERE ?? = ?\";\nvar inserts = ['users', 'id', userId];\nsql = mysql.format(sql, inserts);\n```\n\nFollowing this you then have a valid, escaped query that you can then send to the database safely. This is useful if you are looking to prepare the query before actually sending it to the database. As mysql.format is exposed from SqlString.format you also have the option (but are not required) to pass in stringifyObject and timezone, allowing you provide a custom means of turning objects into strings, as well as a location-specific/timezone-aware Date.\n\n### Custom format\n\nIf you prefer to have another type of query escape format, there's a connection configuration option you can use to define a custom format function. You can access the connection object if you want to use the built-in `.escape()` or any other connection function.\n\nHere's an example of how to implement another format:\n\n```js\nconnection.config.queryFormat = function (query, values) {\n  if (!values) return query;\n  return query.replace(/\\:(\\w+)/g, function (txt, key) {\n    if (values.hasOwnProperty(key)) {\n      return this.escape(values[key]);\n    }\n    return txt;\n  }.bind(this));\n};\n\nconnection.query(\"UPDATE posts SET title = :title\", { title: \"Hello MySQL\" });\n```\n\n## Getting the id of an inserted row\n\nIf you are inserting a row into a table with an auto increment primary key, you\ncan retrieve the insert id like this:\n\n```js\nconnection.query('INSERT INTO posts SET ?', {title: 'test'}, function (error, results, fields) {\n  if (error) throw error;\n  console.log(results.insertId);\n});\n```\n\nWhen dealing with big numbers (above JavaScript Number precision limit), you should\nconsider enabling `supportBigNumbers` option to be able to read the insert id as a\nstring, otherwise it will throw an error.\n\nThis option is also required when fetching big numbers from the database, otherwise\nyou will get values rounded to hundreds or thousands due to the precision limit.\n\n## Getting the number of affected rows\n\nYou can get the number of affected rows from an insert, update or delete statement.\n\n```js\nconnection.query('DELETE FROM posts WHERE title = \"wrong\"', function (error, results, fields) {\n  if (error) throw error;\n  console.log('deleted ' + results.affectedRows + ' rows');\n})\n```\n\n## Getting the number of changed rows\n\nYou can get the number of changed rows from an update statement.\n\n\"changedRows\" differs from \"affectedRows\" in that it does not count updated rows\nwhose values were not changed.\n\n```js\nconnection.query('UPDATE posts SET ...', function (error, results, fields) {\n  if (error) throw error;\n  console.log('changed ' + results.changedRows + ' rows');\n})\n```\n\n## Getting the connection ID\n\nYou can get the MySQL connection ID (\"thread ID\") of a given connection using the `threadId`\nproperty.\n\n```js\nconnection.connect(function(err) {\n  if (err) throw err;\n  console.log('connected as id ' + connection.threadId);\n});\n```\n\n## Executing queries in parallel\n\nThe MySQL protocol is sequential, this means that you need multiple connections\nto execute queries in parallel. You can use a Pool to manage connections, one\nsimple approach is to create one connection per incoming http request.\n\n## Streaming query rows\n\nSometimes you may want to select large quantities of rows and process each of\nthem as they are received. This can be done like this:\n\n```js\nvar query = connection.query('SELECT * FROM posts');\nquery\n  .on('error', function(err) {\n    // Handle error, an 'end' event will be emitted after this as well\n  })\n  .on('fields', function(fields) {\n    // the field packets for the rows to follow\n  })\n  .on('result', function(row) {\n    // Pausing the connnection is useful if your processing involves I/O\n    connection.pause();\n\n    processRow(row, function() {\n      connection.resume();\n    });\n  })\n  .on('end', function() {\n    // all rows have been received\n  });\n```\n\nPlease note a few things about the example above:\n\n* Usually you will want to receive a certain amount of rows before starting to\n  throttle the connection using `pause()`. This number will depend on the\n  amount and size of your rows.\n* `pause()` / `resume()` operate on the underlying socket and parser. You are\n  guaranteed that no more `'result'` events will fire after calling `pause()`.\n* You MUST NOT provide a callback to the `query()` method when streaming rows.\n* The `'result'` event will fire for both rows as well as OK packets\n  confirming the success of a INSERT/UPDATE query.\n* It is very important not to leave the result paused too long, or you may\n  encounter `Error: Connection lost: The server closed the connection.`\n  The time limit for this is determined by the\n  [net_write_timeout setting](https://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html#sysvar_net_write_timeout)\n  on your MySQL server.\n\nAdditionally you may be interested to know that it is currently not possible to\nstream individual row columns, they will always be buffered up entirely. If you\nhave a good use case for streaming large fields to and from MySQL, I'd love to\nget your thoughts and contributions on this.\n\n### Piping results with Streams\n\nThe query object provides a convenience method `.stream([options])` that wraps\nquery events into a [Readable Stream](http://nodejs.org/api/stream.html#stream_class_stream_readable)\nobject. This stream can easily be piped downstream and provides automatic\npause/resume, based on downstream congestion and the optional `highWaterMark`.\nThe `objectMode` parameter of the stream is set to `true` and cannot be changed\n(if you need a byte stream, you will need to use a transform stream, like\n[objstream](https://www.npmjs.com/package/objstream) for example).\n\nFor example, piping query results into another stream (with a max buffer of 5\nobjects) is simply:\n\n```js\nconnection.query('SELECT * FROM posts')\n  .stream({highWaterMark: 5})\n  .pipe(...);\n```\n\n## Multiple statement queries\n\nSupport for multiple statements is disabled for security reasons (it allows for\nSQL injection attacks if values are not properly escaped). To use this feature\nyou have to enable it for your connection:\n\n```js\nvar connection = mysql.createConnection({multipleStatements: true});\n```\n\nOnce enabled, you can execute multiple statement queries like any other query:\n\n```js\nconnection.query('SELECT 1; SELECT 2', function (error, results, fields) {\n  if (error) throw error;\n  // `results` is an array with one element for every statement in the query:\n  console.log(results[0]); // [{1: 1}]\n  console.log(results[1]); // [{2: 2}]\n});\n```\n\nAdditionally you can also stream the results of multiple statement queries:\n\n```js\nvar query = connection.query('SELECT 1; SELECT 2');\n\nquery\n  .on('fields', function(fields, index) {\n    // the fields for the result rows that follow\n  })\n  .on('result', function(row, index) {\n    // index refers to the statement this result belongs to (starts at 0)\n  });\n```\n\nIf one of the statements in your query causes an error, the resulting Error\nobject contains a `err.index` property which tells you which statement caused\nit. MySQL will also stop executing any remaining statements when an error\noccurs.\n\nPlease note that the interface for streaming multiple statement queries is\nexperimental and I am looking forward to feedback on it.\n\n## Stored procedures\n\nYou can call stored procedures from your queries as with any other mysql driver.\nIf the stored procedure produces several result sets, they are exposed to you\nthe same way as the results for multiple statement queries.\n\n## Joins with overlapping column names\n\nWhen executing joins, you are likely to get result sets with overlapping column\nnames.\n\nBy default, node-mysql will overwrite colliding column names in the\norder the columns are received from MySQL, causing some of the received values\nto be unavailable.\n\nHowever, you can also specify that you want your columns to be nested below\nthe table name like this:\n\n```js\nvar options = {sql: '...', nestTables: true};\nconnection.query(options, function (error, results, fields) {\n  if (error) throw error;\n  /* results will be an array like this now:\n  [{\n    table1: {\n      fieldA: '...',\n      fieldB: '...',\n    },\n    table2: {\n      fieldA: '...',\n      fieldB: '...',\n    },\n  }, ...]\n  */\n});\n```\n\nOr use a string separator to have your results merged.\n\n```js\nvar options = {sql: '...', nestTables: '_'};\nconnection.query(options, function (error, results, fields) {\n  if (error) throw error;\n  /* results will be an array like this now:\n  [{\n    table1_fieldA: '...',\n    table1_fieldB: '...',\n    table2_fieldA: '...',\n    table2_fieldB: '...',\n  }, ...]\n  */\n});\n```\n\n## Transactions\n\nSimple transaction support is available at the connection level:\n\n```js\nconnection.beginTransaction(function(err) {\n  if (err) { throw err; }\n  connection.query('INSERT INTO posts SET title=?', title, function (error, results, fields) {\n    if (error) {\n      return connection.rollback(function() {\n        throw error;\n      });\n    }\n\n    var log = 'Post ' + results.insertId + ' added';\n\n    connection.query('INSERT INTO log SET data=?', log, function (error, results, fields) {\n      if (error) {\n        return connection.rollback(function() {\n          throw error;\n        });\n      }\n      connection.commit(function(err) {\n        if (err) {\n          return connection.rollback(function() {\n            throw err;\n          });\n        }\n        console.log('success!');\n      });\n    });\n  });\n});\n```\nPlease note that beginTransaction(), commit() and rollback() are simply convenience\nfunctions that execute the START TRANSACTION, COMMIT, and ROLLBACK commands respectively.\nIt is important to understand that many commands in MySQL can cause an implicit commit,\nas described [in the MySQL documentation](http://dev.mysql.com/doc/refman/5.5/en/implicit-commit.html)\n\n## Ping\n\nA ping packet can be sent over a connection using the `connection.ping` method. This\nmethod will send a ping packet to the server and when the server responds, the callback\nwill fire. If an error occurred, the callback will fire with an error argument.\n\n```js\nconnection.ping(function (err) {\n  if (err) throw err;\n  console.log('Server responded to ping');\n})\n```\n\n## Timeouts\n\nEvery operation takes an optional inactivity timeout option. This allows you to\nspecify appropriate timeouts for operations. It is important to note that these\ntimeouts are not part of the MySQL protocol, and rather timeout operations through\nthe client. This means that when a timeout is reached, the connection it occurred\non will be destroyed and no further operations can be performed.\n\n```js\n// Kill query after 60s\nconnection.query({sql: 'SELECT COUNT(*) AS count FROM big_table', timeout: 60000}, function (error, results, fields) {\n  if (error && error.code === 'PROTOCOL_SEQUENCE_TIMEOUT') {\n    throw new Error('too long to count table rows!');\n  }\n\n  if (error) {\n    throw error;\n  }\n\n  console.log(results[0].count + ' rows');\n});\n```\n\n## Error handling\n\nThis module comes with a consistent approach to error handling that you should\nreview carefully in order to write solid applications.\n\nMost errors created by this module are instances of the JavaScript [Error][]\nobject. Additionally they typically come with two extra properties:\n\n* `err.code`: String, contains the MySQL server error symbol if the error is\n  a [MySQL server error][] (e.g. `'ER_ACCESS_DENIED_ERROR'`), a Node.js error\n  code if it is a Node.js error (e.g. `'ECONNREFUSED'`), or an internal error\n  code (e.g. `'PROTOCOL_CONNECTION_LOST'`).\n* `err.errno`: Number, contains the MySQL server error number. Only populated\n  from [MySQL server error][].\n* `err.fatal`: Boolean, indicating if this error is terminal to the connection\n  object. If the error is not from a MySQL protocol operation, this property\n  will not be defined.\n* `err.sql`: String, contains the full SQL of the failed query. This can be\n  useful when using a higher level interface like an ORM that is generating\n  the queries.\n* `err.sqlState`: String, contains the five-character SQLSTATE value. Only populated from [MySQL server error][].\n* `err.sqlMessage`: String, contains the message string that provides a\n  textual description of the error. Only populated from [MySQL server error][].\n\n[Error]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n[MySQL server error]: https://dev.mysql.com/doc/refman/5.5/en/server-error-reference.html\n\nFatal errors are propagated to *all* pending callbacks. In the example below, a\nfatal error is triggered by trying to connect to a blocked port. Therefore the\nerror object is propagated to both pending callbacks:\n\n```js\nvar connection = require('mysql').createConnection({\n  port: 1 // example blocked port\n});\n\nconnection.connect(function(err) {\n  console.log(err.code); // 'ECONNREFUSED'\n  console.log(err.fatal); // true\n});\n\nconnection.query('SELECT 1', function (error, results, fields) {\n  console.log(error.code); // 'ECONNREFUSED'\n  console.log(error.fatal); // true\n});\n```\n\nNormal errors however are only delegated to the callback they belong to.  So in\nthe example below, only the first callback receives an error, the second query\nworks as expected:\n\n```js\nconnection.query('USE name_of_db_that_does_not_exist', function (error, results, fields) {\n  console.log(error.code); // 'ER_BAD_DB_ERROR'\n});\n\nconnection.query('SELECT 1', function (error, results, fields) {\n  console.log(error); // null\n  console.log(results.length); // 1\n});\n```\n\nLast but not least: If a fatal errors occurs and there are no pending\ncallbacks, or a normal error occurs which has no callback belonging to it, the\nerror is emitted as an `'error'` event on the connection object. This is\ndemonstrated in the example below:\n\n```js\nconnection.on('error', function(err) {\n  console.log(err.code); // 'ER_BAD_DB_ERROR'\n});\n\nconnection.query('USE name_of_db_that_does_not_exist');\n```\n\nNote: `'error'` events are special in node. If they occur without an attached\nlistener, a stack trace is printed and your process is killed.\n\n**tl;dr:** This module does not want you to deal with silent failures. You\nshould always provide callbacks to your method calls. If you want to ignore\nthis advice and suppress unhandled errors, you can do this:\n\n```js\n// I am Chuck Norris:\nconnection.on('error', function() {});\n```\n\n## Exception Safety\n\nThis module is exception safe. That means you can continue to use it, even if\none of your callback functions throws an error which you're catching using\n'uncaughtException' or a domain.\n\n## Type casting\n\nFor your convenience, this driver will cast mysql types into native JavaScript\ntypes by default. The default behavior can be changed through various\n[Connection options](#connection-options). The following mappings exist:\n\n### Number\n\n* TINYINT\n* SMALLINT\n* INT\n* MEDIUMINT\n* YEAR\n* FLOAT\n* DOUBLE\n* BIGINT\n\n### Date\n\n* TIMESTAMP\n* DATE\n* DATETIME\n\n### Buffer\n\n* TINYBLOB\n* MEDIUMBLOB\n* LONGBLOB\n* BLOB\n* BINARY\n* VARBINARY\n* BIT (last byte will be filled with 0 bits as necessary)\n\n### String\n\n**Note** text in the binary character set is returned as `Buffer`, rather\nthan a string.\n\n* CHAR\n* VARCHAR\n* TINYTEXT\n* MEDIUMTEXT\n* LONGTEXT\n* TEXT\n* ENUM\n* SET\n* DECIMAL (may exceed float precision)\n* TIME (could be mapped to Date, but what date would be set?)\n* GEOMETRY (never used those, get in touch if you do)\n\nIt is not recommended (and may go away / change in the future) to disable type\ncasting, but you can currently do so on either the connection:\n\n```js\nvar connection = require('mysql').createConnection({typeCast: false});\n```\n\nOr on the query level:\n\n```js\nvar options = {sql: '...', typeCast: false};\nvar query = connection.query(options, function (error, results, fields) {\n  if (error) throw error;\n  // ...\n});\n```\n\n### Custom type casting\n\nYou can also pass a function and handle type casting yourself. You're given some\ncolumn information like database, table and name and also type and length. If you\njust want to apply a custom type casting to a specific type you can do it and then\nfallback to the default.\n\nThe function is provided two arguments `field` and `next` and is expected to\nreturn the value for the given field by invoking the parser functions through\nthe `field` object.\n\nThe `field` argument is a `Field` object and contains data about the field that\nneed to be parsed. The following are some of the properties on a `Field` object:\n\n  * `db` - a string of the database the field came from.\n  * `table` - a string of the table the field came from.\n  * `name` - a string of the field name.\n  * `type` - a string of the field type in all caps.\n  * `length` - a number of the field length, as given by the database.\n\nThe `next` argument is a `function` that, when called, will return the default\ntype conversion for the given field.\n\nWhen getting the field data, the following helper methods are present on the\n`field` object:\n\n  * `.string()` - parse the field into a string.\n  * `.buffer()` - parse the field into a `Buffer`.\n  * `.geometry()` - parse the field as a geometry value.\n\nThe MySQL protocol is a text-based protocol. This means that over the wire, all\nfield types are represented as a string, which is why only string-like functions\nare available on the `field` object. Based on the type information (like `INT`),\nthe type cast should convert the string field into a different JavaScript type\n(like a `number`).\n\nHere's an example of converting `TINYINT(1)` to boolean:\n\n```js\nconnection = mysql.createConnection({\n  typeCast: function (field, next) {\n    if (field.type === 'TINY' && field.length === 1) {\n      return (field.string() === '1'); // 1 = true, 0 = false\n    } else {\n      return next();\n    }\n  }\n});\n```\n\n__WARNING: YOU MUST INVOKE the parser using one of these three field functions\nin your custom typeCast callback. They can only be called once.__\n\n## Debugging and reporting problems\n\nIf you are running into problems, one thing that may help is enabling the\n`debug` mode for the connection:\n\n```js\nvar connection = mysql.createConnection({debug: true});\n```\n\nThis will print all incoming and outgoing packets on stdout. You can also restrict debugging to\npacket types by passing an array of types to debug:\n\n```js\nvar connection = mysql.createConnection({debug: ['ComQueryPacket', 'RowDataPacket']});\n```\n\nto restrict debugging to the query and data packets.\n\nIf that does not help, feel free to open a GitHub issue. A good GitHub issue\nwill have:\n\n* The minimal amount of code required to reproduce the problem (if possible)\n* As much debugging output and information about your environment (mysql\n  version, node version, os, etc.) as you can gather.\n\n## Security issues\n\nSecurity issues should not be first reported through GitHub or another public\nforum, but kept private in order for the collaborators to assess the report\nand either (a) devise a fix and plan a release date or (b) assert that it is\nnot a security issue (in which case it can be posted in a public forum, like\na GitHub issue).\n\nThe primary private forum is email, either by emailing the module's author or\nopening a GitHub issue simply asking to whom a security issues should be\naddressed to without disclosing the issue or type of issue.\n\nAn ideal report would include a clear indication of what the security issue is\nand how it would be exploited, ideally with an accompanying proof of concept\n(\"PoC\") for collaborators to work against and validate potentional fixes against.\n\n## Contributing\n\nThis project welcomes contributions from the community. Contributions are\naccepted using GitHub pull requests. If you're not familiar with making\nGitHub pull requests, please refer to the\n[GitHub documentation \"Creating a pull request\"](https://help.github.com/articles/creating-a-pull-request/).\n\nFor a good pull request, we ask you provide the following:\n\n1. Try to include a clear description of your pull request in the description.\n   It should include the basic \"what\" and \"why\"s for the request.\n2. The tests should pass as best as you can. See the [Running tests](#running-tests)\n   section on how to run the different tests. GitHub will automatically run\n   the tests as well, to act as a safety net.\n3. The pull request should include tests for the change. A new feature should\n   have tests for the new feature and bug fixes should include a test that fails\n   without the corresponding code change and passes after they are applied.\n   The command `npm run test-cov` will generate a `coverage/` folder that\n   contains HTML pages of the code coverage, to better understand if everything\n   you're adding is being tested.\n4. If the pull request is a new feature, please be sure to include all\n   appropriate documentation additions in the `Readme.md` file as well.\n5. To help ensure that your code is similar in style to the existing code,\n   run the command `npm run lint` and fix any displayed issues.\n\n## Running tests\n\nThe test suite is split into two parts: unit tests and integration tests.\nThe unit tests run on any machine while the integration tests require a\nMySQL server instance to be setup.\n\n### Running unit tests\n\n```sh\n$ FILTER=unit npm test\n```\n\n### Running integration tests\n\nSet the environment variables `MYSQL_DATABASE`, `MYSQL_HOST`, `MYSQL_PORT`,\n`MYSQL_USER` and `MYSQL_PASSWORD`. `MYSQL_SOCKET` can also be used in place\nof `MYSQL_HOST` and `MYSQL_PORT` to connect over a UNIX socket. Then run\n`npm test`.\n\nFor example, if you have an installation of mysql running on localhost:3306\nand no password set for the `root` user, run:\n\n```sh\n$ mysql -u root -e \"CREATE DATABASE IF NOT EXISTS node_mysql_test\"\n$ MYSQL_HOST=localhost MYSQL_PORT=3306 MYSQL_DATABASE=node_mysql_test MYSQL_USER=root MYSQL_PASSWORD= FILTER=integration npm test\n```\n\n## Todo\n\n* Prepared statements\n* Support for encodings other than UTF-8 / ASCII\n\n[appveyor-image]: https://badgen.net/appveyor/ci/dougwilson/node-mysql/master?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/dougwilson/node-mysql\n[coveralls-image]: https://badgen.net/coveralls/c/github/mysqljs/mysql/master\n[coveralls-url]: https://coveralls.io/r/mysqljs/mysql?branch=master\n[github-actions-ci-image]: https://badgen.net/github/checks/mysqljs/mysql/master?label=linux\n[github-actions-ci-url]: https://github.com/mysqljs/mysql/actions/workflows/ci.yml\n[node-image]: https://badgen.net/npm/node/mysql\n[node-url]: https://nodejs.org/en/download\n[npm-downloads-image]: https://badgen.net/npm/dm/mysql\n[npm-url]: https://npmjs.org/package/mysql\n[npm-version-image]: https://badgen.net/npm/v/mysql\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.50390625,
          "content": "environment:\n  MYSQL_DATABASE: node_mysql\n  MYSQL_HOST: localhost\n  MYSQL_USER: root\n  MYSQL_PASSWORD: Password12!\n  MYSQL_PATH: C:\\Program Files\\MySQL\\MySQL Server 5.7\n  MYSQL_PORT: 3306\n\n  matrix:\n    - nodejs_version: \"0.10\"\n    - nodejs_version: \"0.12\"\n    - nodejs_version: \"1.8\"\n    - nodejs_version: \"2.5\"\n    - nodejs_version: \"3.3\"\n    - nodejs_version: \"4.9\"\n    - nodejs_version: \"5.12\"\n    - nodejs_version: \"6.17\"\n    - nodejs_version: \"7.10\"\n    - nodejs_version: \"8.17\"\n    - nodejs_version: \"9.11\"\n    - nodejs_version: \"10.24\"\n    - nodejs_version: \"11.15\"\n    - nodejs_version: \"12.22\"\n    - nodejs_version: \"13.13\"\n    - nodejs_version: \"14.18\"\n    - nodejs_version: \"15.14\"\n    - nodejs_version: \"16.13\"\n    - nodejs_version: \"17.6\"\n\nservices:\n  - mysql\n\ncache:\n  - node_modules\n\ninstall:\n  - ps: >-\n      try { Install-Product node $env:nodejs_version -ErrorAction Stop }\n      catch { Update-NodeJsInstallation (Get-NodeJsLatestBuild $env:nodejs_version) }\n  - npm config set shrinkwrap false\n  - if \"%nodejs_version%\" equ \"0.10\" npm config set strict-ssl false\n  - npm rm --silent --save-dev eslint\n  - if exist node_modules npm prune\n  - if exist node_modules npm rebuild\n  - npm install\n\nbuild: off\n\nbefore_test:\n  - SET PATH=%MYSQL_PATH%\\bin;%PATH%\n  - node tool/wait-mysql.js %MYSQL_PORT% %MYSQL_HOST%\n  - mysqladmin --host=%MYSQL_HOST% --user=%MYSQL_USER% --password=%MYSQL_PASSWORD% create %MYSQL_DATABASE%\n\ntest_script:\n  - mysql --version\n  - node --version\n  - npm --version\n  - npm test\n\nversion: \"{build}\"\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 4.4267578125,
          "content": "var Classes = Object.create(null);\n\n/**\n * Create a new Connection instance.\n * @param {object|string} config Configuration or connection string for new MySQL connection\n * @return {Connection} A new MySQL connection\n * @public\n */\nexports.createConnection = function createConnection(config) {\n  var Connection       = loadClass('Connection');\n  var ConnectionConfig = loadClass('ConnectionConfig');\n\n  return new Connection({config: new ConnectionConfig(config)});\n};\n\n/**\n * Create a new Pool instance.\n * @param {object|string} config Configuration or connection string for new MySQL connections\n * @return {Pool} A new MySQL pool\n * @public\n */\nexports.createPool = function createPool(config) {\n  var Pool       = loadClass('Pool');\n  var PoolConfig = loadClass('PoolConfig');\n\n  return new Pool({config: new PoolConfig(config)});\n};\n\n/**\n * Create a new PoolCluster instance.\n * @param {object} [config] Configuration for pool cluster\n * @return {PoolCluster} New MySQL pool cluster\n * @public\n */\nexports.createPoolCluster = function createPoolCluster(config) {\n  var PoolCluster = loadClass('PoolCluster');\n\n  return new PoolCluster(config);\n};\n\n/**\n * Create a new Query instance.\n * @param {string} sql The SQL for the query\n * @param {array} [values] Any values to insert into placeholders in sql\n * @param {function} [callback] The callback to use when query is complete\n * @return {Query} New query object\n * @public\n */\nexports.createQuery = function createQuery(sql, values, callback) {\n  var Connection = loadClass('Connection');\n\n  return Connection.createQuery(sql, values, callback);\n};\n\n/**\n * Escape a value for SQL.\n * @param {*} value The value to escape\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\n * @return {string} Escaped string value\n * @public\n */\nexports.escape = function escape(value, stringifyObjects, timeZone) {\n  var SqlString = loadClass('SqlString');\n\n  return SqlString.escape(value, stringifyObjects, timeZone);\n};\n\n/**\n * Escape an identifier for SQL.\n * @param {*} value The value to escape\n * @param {boolean} [forbidQualified=false] Setting to treat '.' as part of identifier\n * @return {string} Escaped string value\n * @public\n */\nexports.escapeId = function escapeId(value, forbidQualified) {\n  var SqlString = loadClass('SqlString');\n\n  return SqlString.escapeId(value, forbidQualified);\n};\n\n/**\n * Format SQL and replacement values into a SQL string.\n * @param {string} sql The SQL for the query\n * @param {array} [values] Any values to insert into placeholders in sql\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\n * @return {string} Formatted SQL string\n * @public\n */\nexports.format = function format(sql, values, stringifyObjects, timeZone) {\n  var SqlString = loadClass('SqlString');\n\n  return SqlString.format(sql, values, stringifyObjects, timeZone);\n};\n\n/**\n * Wrap raw SQL strings from escape overriding.\n * @param {string} sql The raw SQL\n * @return {object} Wrapped object\n * @public\n */\nexports.raw = function raw(sql) {\n  var SqlString = loadClass('SqlString');\n\n  return SqlString.raw(sql);\n};\n\n/**\n * The type constants.\n * @public\n */\nObject.defineProperty(exports, 'Types', {\n  get: loadClass.bind(null, 'Types')\n});\n\n/**\n * Load the given class.\n * @param {string} className Name of class to default\n * @return {function|object} Class constructor or exports\n * @private\n */\nfunction loadClass(className) {\n  var Class = Classes[className];\n\n  if (Class !== undefined) {\n    return Class;\n  }\n\n  // This uses a switch for static require analysis\n  switch (className) {\n    case 'Connection':\n      Class = require('./lib/Connection');\n      break;\n    case 'ConnectionConfig':\n      Class = require('./lib/ConnectionConfig');\n      break;\n    case 'Pool':\n      Class = require('./lib/Pool');\n      break;\n    case 'PoolCluster':\n      Class = require('./lib/PoolCluster');\n      break;\n    case 'PoolConfig':\n      Class = require('./lib/PoolConfig');\n      break;\n    case 'SqlString':\n      Class = require('./lib/protocol/SqlString');\n      break;\n    case 'Types':\n      Class = require('./lib/protocol/constants/types');\n      break;\n    default:\n      throw new Error('Cannot find class \\'' + className + '\\'');\n  }\n\n  // Store to prevent invoking require()\n  Classes[className] = Class;\n\n  return Class;\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.330078125,
          "content": "{\n  \"name\": \"mysql\",\n  \"description\": \"A node.js driver for mysql. It is written in JavaScript, does not require compiling, and is 100% MIT licensed.\",\n  \"version\": \"2.18.1\",\n  \"license\": \"MIT\",\n  \"author\": \"Felix Geisendörfer <felix@debuggable.com> (http://debuggable.com/)\",\n  \"contributors\": [\n    \"Andrey Sidorov <sidorares@yandex.ru>\",\n    \"Bradley Grainger <bgrainger@gmail.com>\",\n    \"Douglas Christopher Wilson <doug@somethingdoug.com>\",\n    \"Diogo Resende <dresende@thinkdigital.pt>\",\n    \"Nathan Woltman <nwoltman@outlook.com>\"\n  ],\n  \"repository\": \"mysqljs/mysql\",\n  \"dependencies\": {\n    \"bignumber.js\": \"9.0.2\",\n    \"readable-stream\": \"2.3.7\",\n    \"safe-buffer\": \"5.2.1\",\n    \"sqlstring\": \"2.3.3\"\n  },\n  \"devDependencies\": {\n    \"after\": \"0.8.2\",\n    \"eslint\": \"7.32.0\",\n    \"seedrandom\": \"3.0.5\",\n    \"urun\": \"0.0.8\",\n    \"utest\": \"0.0.8\"\n  },\n  \"files\": [\n    \"lib/\",\n    \"Changes.md\",\n    \"License\",\n    \"Readme.md\",\n    \"index.js\"\n  ],\n  \"engines\": {\n    \"node\": \">= 0.6\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint . && node tool/lint-readme.js\",\n    \"test\": \"node test/run.js\",\n    \"test-ci\": \"node tool/install-nyc.js --nyc-optional --reporter=lcovonly --reporter=text -- npm test\",\n    \"test-cov\": \"node tool/install-nyc.js --reporter=html --reporter=text -- npm test\",\n    \"version\": \"node tool/version-changes.js && git add Changes.md\"\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tool",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}