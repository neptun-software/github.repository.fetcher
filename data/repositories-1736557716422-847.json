{
  "metadata": {
    "timestamp": 1736557716422,
    "page": 847,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers",
      "stars": 27102,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.05,
          "content": ".DS_Store\n*.pyc\n*~\n*.png\n**/.ipynb_checkpoints\n"
        },
        {
          "name": "Chapter1_Introduction",
          "type": "tree",
          "content": null
        },
        {
          "name": "Chapter2_MorePyMC",
          "type": "tree",
          "content": null
        },
        {
          "name": "Chapter3_MCMC",
          "type": "tree",
          "content": null
        },
        {
          "name": "Chapter4_TheGreatestTheoremNeverTold",
          "type": "tree",
          "content": null
        },
        {
          "name": "Chapter5_LossFunctions",
          "type": "tree",
          "content": null
        },
        {
          "name": "Chapter6_Priorities",
          "type": "tree",
          "content": null
        },
        {
          "name": "Chapter7_BayesianMachineLearning",
          "type": "tree",
          "content": null
        },
        {
          "name": "ExamplesFromChapters",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.04,
          "content": "Copyright (c) 2013 Cameron Davidson-Pilon\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Prologue",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.5,
          "content": "# [Bayesian Methods for Hackers](http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/)\n#### *Using Python and PyMC*\n\n\nThe Bayesian method is the natural approach to inference, yet it is hidden from readers behind chapters of slow, mathematical analysis. The typical text on Bayesian inference involves two to three chapters on probability theory, then enters what Bayesian inference is. Unfortunately, due to mathematical intractability of most Bayesian models, the reader is only shown simple, artificial examples. This can leave the user with a *so-what* feeling about Bayesian inference. In fact, this was the author's own prior opinion.\n\nAfter some recent success of Bayesian methods in machine-learning competitions, I decided to investigate the subject again. Even with my mathematical background, it took me three straight-days of reading examples and trying to put the pieces together to understand the methods. There was simply not enough literature bridging theory to practice. The problem with my misunderstanding was the disconnect between Bayesian mathematics and probabilistic programming. That being said, I suffered then so the reader would not have to now. This book attempts to bridge the gap.\n\nIf Bayesian inference is the destination, then mathematical analysis is a particular path towards it. On the other hand, computing power is cheap enough that we can afford to take an alternate route via probabilistic programming. The latter path is much more useful, as it denies the necessity of mathematical intervention at each step, that is, we remove often-intractable mathematical analysis as a prerequisite to Bayesian inference. Simply put, this latter computational path proceeds via small intermediate jumps from beginning to end, where as the first path proceeds by enormous leaps, often landing far away from our target. Furthermore, without a strong mathematical background, the analysis required by the first path cannot even take place.\n\n*Bayesian Methods for Hackers* is designed as an introduction to Bayesian inference from a computational/understanding-first, and mathematics-second, point of view. Of course as an introductory book, we can only leave it at that: an introductory book. For the mathematically trained, they may cure the curiosity this text generates with other texts designed with mathematical analysis in mind. For the enthusiast with less mathematical background, or one who is not interested in the mathematics but simply the practice of Bayesian methods, this text should be sufficient and entertaining.\n\nThe choice of PyMC as the probabilistic programming language is two-fold. As of this writing, there is currently no central resource for examples and explanations in the PyMC universe. The official documentation assumes prior knowledge of Bayesian inference and probabilistic programming. We hope this book encourages users at every level to look at PyMC. Secondly, with recent core developments and popularity of the scientific stack in Python, PyMC is likely to become a core component soon enough.\n\nPyMC does have dependencies to run, namely NumPy and (optionally) SciPy. To not limit the user, the examples in this book will rely only on PyMC, NumPy, SciPy and Matplotlib.\n\n\nPrinted Version by Addison-Wesley\n------\n<div style=\"float: right; margin-left: 30px;\"><img title=\"Bayesian Methods for Hackersg\"style=\"float: right;margin-left: 30px;\" src=\"http://www-fp.pearsonhighered.com/assets/hip/images/bigcovers/0133902838.jpg\" align=right height = 200 /></div>\n\n**Bayesian Methods for Hackers is now available as a printed book!** You can pick up a copy on [Amazon](http://www.amazon.com/Bayesian-Methods-Hackers-Probabilistic-Addison-Wesley/dp/0133902838). What are the differences between the online version and the printed version?\n\n - Additional Chapter on Bayesian A/B testing\n - Updated examples\n - Answers to the end of chapter questions\n - Additional explanation, and rewritten sections to aid the reader. \n\n\nContents\n------\n\nSee the project homepage [here](http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/) for examples, too.\n\n\nThe below chapters are rendered via the *nbviewer* at\n[nbviewer.jupyter.org/](http://nbviewer.jupyter.org/), and is read-only and rendered in real-time.\nInteractive notebooks + examples can be downloaded by cloning! \n\n### PyMC2\n\n* [**Prologue:**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Prologue/Prologue.ipynb) Why we do it.\n\n* [**Chapter 1: Introduction to Bayesian Methods**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter1_Introduction/Ch1_Introduction_PyMC2.ipynb)\n    Introduction to the philosophy and practice of Bayesian methods and answering the question, \"What is probabilistic programming?\" Examples include:\n    - Inferring human behaviour changes from text message rates\n    \n* [**Chapter 2: A little more on PyMC**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter2_MorePyMC/Ch2_MorePyMC_PyMC2.ipynb)\n    We explore modeling Bayesian problems using Python's PyMC library through examples. How do we create Bayesian models? Examples include:\n    - Detecting the frequency of cheating students, while avoiding liars\n    - Calculating probabilities of the Challenger space-shuttle disaster\n    \n* [**Chapter 3: Opening the Black Box of MCMC**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter3_MCMC/Ch3_IntroMCMC_PyMC2.ipynb)\n    We discuss how MCMC operates and diagnostic tools. Examples include:\n    - Bayesian clustering with mixture models\n    \n* [**Chapter 4: The Greatest Theorem Never Told**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter4_TheGreatestTheoremNeverTold/Ch4_LawOfLargeNumbers_PyMC2.ipynb)\n    We explore an incredibly useful, and dangerous, theorem: The Law of Large Numbers. Examples include:\n    - Exploring a Kaggle dataset and the pitfalls of naive analysis\n    - How to sort Reddit comments from best to worst (not as easy as you think)\n    \n* [**Chapter 5: Would you rather lose an arm or a leg?**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter5_LossFunctions/Ch5_LossFunctions_PyMC2.ipynb)\n    The introduction of loss functions and their (awesome) use in Bayesian methods.  Examples include:\n    - Solving the *Price is Right*'s Showdown\n    - Optimizing financial predictions\n    - Winning solution to the Kaggle Dark World's competition\n    \n* [**Chapter 6: Getting our *prior*-ities straight**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter6_Priorities/Ch6_Priors_PyMC2.ipynb)\n    Probably the most important chapter. We draw on expert opinions to answer questions. Examples include:\n    - Multi-Armed Bandits and the Bayesian Bandit solution.\n    - What is the relationship between data sample size and prior?\n    - Estimating financial unknowns using expert priors\n    \n    We explore useful tips to be objective in analysis as well as common pitfalls of priors. \n\n### PyMC3\n\n* [**Prologue:**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Prologue/Prologue.ipynb) Why we do it.\n\n* [**Chapter 1: Introduction to Bayesian Methods**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter1_Introduction/Ch1_Introduction_PyMC3.ipynb)\n    Introduction to the philosophy and practice of Bayesian methods and answering the question, \"What is probabilistic programming?\" Examples include:\n    - Inferring human behaviour changes from text message rates\n    \n* [**Chapter 2: A little more on PyMC**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter2_MorePyMC/Ch2_MorePyMC_PyMC3.ipynb)\n    We explore modeling Bayesian problems using Python's PyMC library through examples. How do we create Bayesian models? Examples include:\n    - Detecting the frequency of cheating students, while avoiding liars\n    - Calculating probabilities of the Challenger space-shuttle disaster\n    \n* [**Chapter 3: Opening the Black Box of MCMC**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter3_MCMC/Ch3_IntroMCMC_PyMC3.ipynb)\n    We discuss how MCMC operates and diagnostic tools. Examples include:\n    - Bayesian clustering with mixture models\n    \n* [**Chapter 4: The Greatest Theorem Never Told**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter4_TheGreatestTheoremNeverTold/Ch4_LawOfLargeNumbers_PyMC3.ipynb)\n    We explore an incredibly useful, and dangerous, theorem: The Law of Large Numbers. Examples include:\n    - Exploring a Kaggle dataset and the pitfalls of naive analysis\n    - How to sort Reddit comments from best to worst (not as easy as you think)\n    \n* [**Chapter 5: Would you rather lose an arm or a leg?**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter5_LossFunctions/Ch5_LossFunctions_PyMC3.ipynb)\n    The introduction of loss functions and their (awesome) use in Bayesian methods.  Examples include:\n    - Solving the *Price is Right*'s Showdown\n    - Optimizing financial predictions\n    - Winning solution to the Kaggle Dark World's competition\n    \n* [**Chapter 6: Getting our *prior*-ities straight**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter6_Priorities/Ch6_Priors_PyMC3.ipynb)\n    Probably the most important chapter. We draw on expert opinions to answer questions. Examples include:\n    - Multi-Armed Bandits and the Bayesian Bandit solution.\n    - What is the relationship between data sample size and prior?\n    - Estimating financial unknowns using expert priors\n    \n    We explore useful tips to be objective in analysis as well as common pitfalls of priors. \n\n\n\n    \n**More questions about PyMC?**\nPlease post your modeling, convergence, or any other PyMC question on [cross-validated](http://stats.stackexchange.com/), the statistics stack-exchange.\n    \n    \nUsing the book\n-------\n\nThe book can be read in three different ways, starting from most recommended to least recommended: \n\n1. The most recommended option is to clone the repository to download the .ipynb files to your local machine. If you have Jupyter installed, you can view the \nchapters in your browser *plus* edit and run the code provided (and try some practice questions). This is the preferred option to read\nthis book, though it comes with some dependencies. \n    -  Jupyter is a requirement to view the ipynb files. It can be downloaded [here](http://jupyter.org/). Jupyter notebooks can be run by `(your-virtualenv) ~/path/to/the/book/Chapter1_Introduction $ jupyter notebook`\n    -  For Linux users, you should not have a problem installing NumPy, SciPy, Matplotlib and PyMC. For Windows users, check out [pre-compiled versions](http://www.lfd.uci.edu/~gohlke/pythonlibs/) if you have difficulty. \n    -  In the styles/ directory are a number of files (.matplotlirc) that used to make things pretty. These are not only designed for the book, but they offer many improvements over the default settings of matplotlib.\n2. The second, preferred, option is to use the nbviewer.jupyter.org site, which display Jupyter notebooks in the browser ([example](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter1_Introduction/Ch1_Introduction_PyMC2.ipynb)).\nThe contents are updated synchronously as commits are made to the book. You can use the Contents section above to link to the chapters.\n \n3. PDFs are the least-preferred method to read the book, as PDFs are static and non-interactive. If PDFs are desired, they can be created dynamically using the [nbconvert](https://github.com/jupyter/nbconvert) utility.\n \n\nInstallation and configuration\n------\n\n\nIf you would like to run the Jupyter notebooks locally, (option 1. above), you'll need to install the following:\n\n-  Jupyter is a requirement to view the ipynb files. It can be downloaded [here](http://jupyter.org/install.html) \n- Necessary packages are PyMC, NumPy, SciPy and Matplotlib.   \n   -  For Linux/OSX users, you should not have a problem installing the above, [*except for Matplotlib on OSX*](http://www.penandpants.com/2012/02/24/install-python/).\n   -  For Windows users, check out [pre-compiled versions](http://www.lfd.uci.edu/~gohlke/pythonlibs/) if you have difficulty. \n   - also recommended, for data-mining exercises, are [PRAW](https://github.com/praw-dev/praw) and [requests](https://github.com/kennethreitz/requests). \n- New to Python or Jupyter, and help with the namespaces? Check out [this answer](http://stackoverflow.com/questions/12987624/confusion-between-numpy-scipy-matplotlib-and-pylab). \n\n-  In the styles/ directory are a number of files that are customized for the notebook. \nThese are not only designed for the book, but they offer many improvements over the \ndefault settings of matplotlib and the Jupyter notebook. The in notebook style has not been finalized yet.\n\n\n\nDevelopment\n------\n\nThis book has an unusual development design. The content is open-sourced, meaning anyone can be an author. \nAuthors submit content or revisions using the GitHub interface. \n\n### How to contribute\n\n#### What to contribute?\n\n-  The current chapter list is not finalized. If you see something that is missing (MCMC, MAP, Bayesian networks, good prior choices, Potential classes etc.),\nfeel free to start there. \n-  Cleaning up Python code and making code more PyMC-esque\n-  Giving better explanations\n-  Spelling/grammar mistakes\n-  Suggestions\n-  Contributing to the Jupyter notebook styles\n\n\n#### Commiting\n\n-  All commits are welcome, even if they are minor ;)\n-  If you are unfamiliar with Github, you can email me contributions to the email below.\n\nReviews\n------\n*these are satirical, but real*\n\n\"No, but it looks good\" - [John D. Cook](https://twitter.com/JohnDCook/status/359672133695184896)\n\n\"I ... read this book ... I like it!\" - [Andrew Gelman](http://www.andrewgelman.com/2013/07/21/bayes-related)\n\n\"This book is a godsend, and a direct refutation to that 'hmph! you don't know maths, piss off!' school of thought...\nThe publishing model is so unusual. Not only is it open source but it relies on pull requests from anyone in order to progress the book. This is ingenious and heartening\" - [excited Reddit user](http://www.reddit.com/r/Python/comments/1alnal/probabilistic_programming_and_bayesian_methods/)\n\n\n\nContributions and Thanks\n-----\n\n\nThanks to all our contributing authors, including (in chronological order):\n\nAuthors | | | |\n--- | --- | --- | ---\n[Cameron Davidson-Pilon](http://www.camdp.com) |  [Stef Gibson](http://stefgibson.com) | [Vincent Ohprecio](http://bigsnarf.wordpress.com/) |[Lars Buitinck](https://github.com/larsman)\n[Paul Magwene](http://github.com/pmagwene) |  [Matthias Bussonnier](https://github.com/Carreau) | [Jens Rantil](https://github.com/JensRantil) |  [y-p](https://github.com/y-p)\n[Ethan Brown](http://www.etano.net/) |  [Jonathan Whitmore](http://jonathanwhitmore.com/) | [Mattia Rigotti](https://github.com/matrig) |  [Colby Lemon](https://github.com/colibius)\n[Gustav W Delius](https://github.com/gustavdelius) |  [Matthew Conlen](http://www.mathisonian.com/)  | [Jim Radford](https://github.com/radford) |  [Vannessa Sabino](http://baniverso.com/)\n[Thomas Bratt](https://github.com/thomasbratt) |  [Nisan Haramati](https://github.com/nisanharamati) |  [Robert Grant](https://github.com/bgrant) | [Matthew Wampler-Doty](https://github.com/xcthulhu)\n[Yaroslav Halchenko](https://github.com/yarikoptic) |  [Alex Garel](https://github.com/alexgarel) | [Oleksandr Lysenko](https://twitter.com/sash_ko) |  [liori](https://github.com/liori)\n[ducky427](https://github.com/ducky427) |  [Pablo de Oliveira Castro](https://github.com/pablooliveira) | [sergeyfogelson](https://github.com/sergeyfogelson) |  [Mattia Rigotti](http://neurotheory.columbia.edu/~mrigotti/)\n[Matt Bauman](https://github.com/mbauman) | [Andrew Duberstein](http://www.andrewduberstein.com/) | [Carsten Brandt](http://cebe.cc/) |  [Bob Jansen](http://web2docx.com)\n [ugurthemaster](https://github.com/ugurthemaster)   | [William Scott](https://github.com/williamscott)   |  [Min RK](http://twitter.com/minrk)  |  [Bulwersator](https://github.com/Bulwersator)\n  [elpres](https://github.com/elpres)  |  [Augusto Hack](https://github.com/hackaugusto)  | [Michael Feldmann](https://github.com/michaf)   | [Youki](https://github.com/Youki)\n   [Jens Rantil](http://jensrantil.github.io) |  [Kyle Meyer](http://kyleam.com)  |  [Eric Martin](http://ericmart.in)  | [Inconditus](https://github.com/Inconditus)\n [Kleptine](https://github.com/Kleptine)   |  [Stuart Layton](https://github.com/slayton)  |  [Antonino Ingargiola](https://github.com/tritemio)  |  [vsl9](https://github.com/vsl9)\n  [Tom Christie](https://github.com/tom-christie)  |  [bclow](https://github.com/bclow)  |  [Simon Potter](http://sjp.co.nz/)  | [Garth Snyder](https://github.com/GarthSnyder)\n [Daniel Beauchamp](http://twitter.com/pushmatrix)  |  [Philipp Singer](http://www.philippsinger.info)  | [gbenmartin](https://github.com/gbenmartin) | [Peadar Coyle](https://twitter.com/Springcoil)\n\nWe would like to thank the Python community for building an amazing architecture. We would like to thank the \nstatistics community for building an amazing architecture. \n\nSimilarly, the book is only possible because of the [PyMC](http://github.com/pymc-devs/pymc) library. A big thanks to the core devs of PyMC: Chris Fonnesbeck, Anand Patil, David Huard and John Salvatier.\n\nOne final thanks. This book was generated by Jupyter Notebook, a wonderful tool for developing in Python. We thank the IPython/Jupyter \ncommunity for developing the Notebook interface. All Jupyter notebook files are available for download on the GitHub repository. \n\n\n\n#### Contact\nContact the main author, Cam Davidson-Pilon at cam.davidson.pilon@gmail.com or [@cmrndp](https://twitter.com/cmrn_dp)\n\n\n![Imgur](http://i.imgur.com/Zb79QZb.png)\n"
        },
        {
          "name": "book_layout.txt",
          "type": "blob",
          "size": 1.25,
          "content": "# Bayesian Methods for Hackers Layout\n\n\\section{ Preamble}\n\n\n\\chapter1{ Introduction }\n\n        \n\\chapter2{More PyMC / Modeling in PyMC}\n    #flexible about what this section is. Basically it's more intro to the \n    syntax of PyMC, with examples + distributions.\n\n\\chapter3{ Intro to MCMC and Diagnogstics }\n    \n    \n\\chapter4{ The greatest theorem never told }\n    #This is about the law of large numbers and how a bayesian uses it for estimates. \n \n    \n    \n\\chapter5{ Would you rather lose an arm or a leg? }\n  #Introduction to loss functions and point estimation.\n\n\n\n>>>>>>>>>\nBelow is subject to change\n  \n\\chapter6{What should my prior look like?}\n    \\subsection{Noninformative priors...}\n    \\subsection{Noninformative priors do not exist}\n    \\subsection{Good choices of priors }\n  \n\\chapter7{ Bayesian Networks }\n    #I do not know too much about this.\n\n    \n\\chapter8{ Gaussian Processes }\n    # pymc.gp\n \n \n\\chapter9{ Large Scale systems }\n    #how can we scale PyMC to larger systems/datasets?\n \n\\chapter10{More hacking with PyMC}\n    #some examples from PyMC.\n    # Potential class?\n\n\n\n\n\\section{Appendix}\n    \\subsection{A}\n        #Chart of distributions and their support\n    \\subsection{B}\n        #Appendix on MCMC\n    \\section{C} \n        #Proofs\n        "
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.15,
          "content": "ipython>=2.0\nmatplotlib>=1.2.1\nnumpy>=1.7.1\npymc>=5.0.1\npyzmq>=13.1.0\nscipy>=0.12.0\ntornado>=3.0.2\nwsgiref>=0.1.2; python_version < '3.0'\npraw>=2.0.0\njinja2\n"
        },
        {
          "name": "sandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": "styles",
          "type": "tree",
          "content": null
        },
        {
          "name": "to_latex_pdf.sh",
          "type": "blob",
          "size": 0.19,
          "content": "find Prologue Chapter* -name \"*.ipynb\" | grep -v \"PyMC2\" | xargs ipython3 nbconvert --to pdf --template article\n\n# merge all files:\npdfjoin Prologue.pdf Ch*.pdf DontOverfit.pdf MachineLearning.pdf\n"
        }
      ]
    }
  ]
}