{
  "metadata": {
    "timestamp": 1736554962913,
    "page": 24,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Significant-Gravitas/AutoGPT",
      "stars": 170335,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 1.62,
          "content": "# Ignore everything by default, selectively add things to context\n*\n\n# Platform - Libs\n!autogpt_platform/autogpt_libs/autogpt_libs/\n!autogpt_platform/autogpt_libs/pyproject.toml\n!autogpt_platform/autogpt_libs/poetry.lock\n!autogpt_platform/autogpt_libs/README.md\n\n# Platform - Backend\n!autogpt_platform/backend/backend/\n!autogpt_platform/backend/migrations/\n!autogpt_platform/backend/schema.prisma\n!autogpt_platform/backend/pyproject.toml\n!autogpt_platform/backend/poetry.lock\n!autogpt_platform/backend/README.md\n\n# Platform - Market\n!autogpt_platform/market/market/\n!autogpt_platform/market/scripts.py\n!autogpt_platform/market/schema.prisma\n!autogpt_platform/market/pyproject.toml\n!autogpt_platform/market/poetry.lock\n!autogpt_platform/market/README.md\n\n# Platform - Frontend\n!autogpt_platform/frontend/src/\n!autogpt_platform/frontend/public/\n!autogpt_platform/frontend/package.json\n!autogpt_platform/frontend/yarn.lock\n!autogpt_platform/frontend/tsconfig.json\n!autogpt_platform/frontend/README.md\n## config\n!autogpt_platform/frontend/*.config.*\n!autogpt_platform/frontend/.env.*\n\n# Classic - AutoGPT\n!classic/original_autogpt/autogpt/\n!classic/original_autogpt/pyproject.toml\n!classic/original_autogpt/poetry.lock\n!classic/original_autogpt/README.md\n!classic/original_autogpt/tests/\n\n# Classic - Benchmark\n!classic/benchmark/agbenchmark/\n!classic/benchmark/pyproject.toml\n!classic/benchmark/poetry.lock\n!classic/benchmark/README.md\n\n# Classic - Forge\n!classic/forge/\n!classic/forge/pyproject.toml\n!classic/forge/poetry.lock\n!classic/forge/README.md\n\n# Classic - Frontend\n!classic/frontend/build/web/\n\n# Explicitly re-ignore some folders\n.*\n**/__pycache__\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.23,
          "content": "classic/frontend/build/** linguist-generated\n\n**/poetry.lock linguist-generated\n\ndocs/_javascript/** linguist-vendored\n\n# Exclude VCR cassettes from stats\nclassic/forge/tests/vcr_cassettes/**/**.y*ml linguist-generated\n\n* text=auto"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.34,
          "content": "## Original ignores\n.github_access_token\nclassic/original_autogpt/keys.py\nclassic/original_autogpt/*.json\nauto_gpt_workspace/*\n*.mpeg\n.env\nazure.yaml\n.vscode\n.idea/*\nauto-gpt.json\nlog.txt\nlog-ingestion.txt\n/logs\n*.log\n*.mp3\nmem.sqlite3\nvenvAutoGPT\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\nsite/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.direnv/\n.env\n.venv\nenv/\nvenv*/\nENV/\nenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\nllama-*\nvicuna-*\n\n# mac\n.DS_Store\n\nopenai/\n\n# news\nCURRENT_BULLETIN.md\n\n# AgBenchmark\nclassic/benchmark/agbenchmark/reports/\n\n# Nodejs\npackage-lock.json\n\n\n# Allow for locally private items\n# private\npri* \n# ignore\nig*\n.github_access_token\nLICENSE.rtf\nautogpt_platform/backend/settings.py\n/.auth\n/autogpt_platform/frontend/.auth\n\n*.ign.*\n.test-contents\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.28,
          "content": "[submodule \"classic/forge/tests/vcr_cassettes\"]\n\tpath = classic/forge/tests/vcr_cassettes\n\turl = https://github.com/Significant-Gravitas/Auto-GPT-test-cassettes\n[submodule \"autogpt_platform/supabase\"]\n\tpath = autogpt_platform/supabase\n\turl = https://github.com/supabase/supabase.git\n"
        },
        {
          "name": ".pr_agent.toml",
          "type": "blob",
          "size": 0.11,
          "content": "[pr_reviewer]\nnum_code_suggestions=0\n\n[pr_code_suggestions]\ncommitable_code_suggestions=false\nnum_code_suggestions=0\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 9.58,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n      - id: check-added-large-files\n        args: [\"--maxkb=500\"]\n      - id: fix-byte-order-marker\n      - id: check-case-conflict\n      - id: check-merge-conflict\n      - id: check-symlinks\n      - id: debug-statements\n\n  - repo: https://github.com/Yelp/detect-secrets\n    rev: v1.5.0\n    hooks:\n      - id: detect-secrets\n        name: Detect secrets\n        description: Detects high entropy strings that are likely to be passwords.\n        files: ^autogpt_platform/\n        stages: [push]\n\n  - repo: local\n    # For proper type checking, all dependencies need to be up-to-date.\n    # It's also a good idea to check that poetry.lock is consistent with pyproject.toml.\n    hooks:\n      - id: poetry-install\n        name: Check & Install dependencies - AutoGPT Platform - Backend\n        alias: poetry-install-platform-backend\n        entry: poetry -C autogpt_platform/backend install\n        # include autogpt_libs source (since it's a path dependency)\n        files: ^autogpt_platform/(backend|autogpt_libs)/poetry\\.lock$\n        types: [file]\n        language: system\n        pass_filenames: false\n\n      - id: poetry-install\n        name: Check & Install dependencies - AutoGPT Platform - Libs\n        alias: poetry-install-platform-libs\n        entry: poetry -C autogpt_platform/autogpt_libs install\n        files: ^autogpt_platform/autogpt_libs/poetry\\.lock$\n        types: [file]\n        language: system\n        pass_filenames: false\n\n      - id: poetry-install\n        name: Check & Install dependencies - Classic - AutoGPT\n        alias: poetry-install-classic-autogpt\n        entry: poetry -C classic/original_autogpt install\n        # include forge source (since it's a path dependency)\n        files: ^classic/(original_autogpt|forge)/poetry\\.lock$\n        types: [file]\n        language: system\n        pass_filenames: false\n\n      - id: poetry-install\n        name: Check & Install dependencies - Classic - Forge\n        alias: poetry-install-classic-forge\n        entry: poetry -C classic/forge install\n        files: ^classic/forge/poetry\\.lock$\n        types: [file]\n        language: system\n        pass_filenames: false\n\n      - id: poetry-install\n        name: Check & Install dependencies - Classic - Benchmark\n        alias: poetry-install-classic-benchmark\n        entry: poetry -C classic/benchmark install\n        files: ^classic/benchmark/poetry\\.lock$\n        types: [file]\n        language: system\n        pass_filenames: false\n\n  - repo: local\n    # For proper type checking, Prisma client must be up-to-date.\n    hooks:\n      - id: prisma-generate\n        name: Prisma Generate - AutoGPT Platform - Backend\n        alias: prisma-generate-platform-backend\n        entry: bash -c 'cd autogpt_platform/backend && poetry run prisma generate'\n        # include everything that triggers poetry install + the prisma schema\n        files: ^autogpt_platform/((backend|autogpt_libs)/poetry\\.lock|backend/schema.prisma)$\n        types: [file]\n        language: system\n        pass_filenames: false\n\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.7.2\n    hooks:\n      - id: ruff\n        name: Lint (Ruff) - AutoGPT Platform - Backend\n        alias: ruff-lint-platform-backend\n        files: ^autogpt_platform/backend/\n        args: [--fix]\n\n      - id: ruff\n        name: Lint (Ruff) - AutoGPT Platform - Libs\n        alias: ruff-lint-platform-libs\n        files: ^autogpt_platform/autogpt_libs/\n        args: [--fix]\n\n      - id: ruff-format\n        name: Format (Ruff) - AutoGPT Platform - Libs\n        alias: ruff-lint-platform-libs\n        files: ^autogpt_platform/autogpt_libs/\n\n  - repo: local\n    # isort needs the context of which packages are installed to function, so we\n    # can't use a vendored isort pre-commit hook (which runs in its own isolated venv).\n    hooks:\n      - id: isort\n        name: Lint (isort) - AutoGPT Platform - Backend\n        alias: isort-platform-backend\n        entry: poetry -P autogpt_platform/backend run isort -p backend\n        files: ^autogpt_platform/backend/\n        types: [file, python]\n        language: system\n\n      - id: isort\n        name: Lint (isort) - Classic - AutoGPT\n        alias: isort-classic-autogpt\n        entry: poetry -P classic/original_autogpt run isort -p autogpt\n        files: ^classic/original_autogpt/\n        types: [file, python]\n        language: system\n\n      - id: isort\n        name: Lint (isort) - Classic - Forge\n        alias: isort-classic-forge\n        entry: poetry -P classic/forge run isort -p forge\n        files: ^classic/forge/\n        types: [file, python]\n        language: system\n\n      - id: isort\n        name: Lint (isort) - Classic - Benchmark\n        alias: isort-classic-benchmark\n        entry: poetry -P classic/benchmark run isort -p agbenchmark\n        files: ^classic/benchmark/\n        types: [file, python]\n        language: system\n\n  - repo: https://github.com/psf/black\n    rev: 23.12.1\n    # Black has sensible defaults, doesn't need package context, and ignores\n    # everything in .gitignore, so it works fine without any config or arguments.\n    hooks:\n      - id: black\n        name: Format (Black)\n\n  - repo: https://github.com/PyCQA/flake8\n    rev: 7.0.0\n    # To have flake8 load the config of the individual subprojects, we have to call\n    # them separately.\n    hooks:\n      - id: flake8\n        name: Lint (Flake8) - Classic - AutoGPT\n        alias: flake8-classic-autogpt\n        files: ^classic/original_autogpt/(autogpt|scripts|tests)/\n        args: [--config=classic/original_autogpt/.flake8]\n\n      - id: flake8\n        name: Lint (Flake8) - Classic - Forge\n        alias: flake8-classic-forge\n        files: ^classic/forge/(forge|tests)/\n        args: [--config=classic/forge/.flake8]\n\n      - id: flake8\n        name: Lint (Flake8) - Classic - Benchmark\n        alias: flake8-classic-benchmark\n        files: ^classic/benchmark/(agbenchmark|tests)/((?!reports).)*[/.]\n        args: [--config=classic/benchmark/.flake8]\n\n  - repo: local\n    # To have watertight type checking, we check *all* the files in an affected\n    # project. To trigger on poetry.lock we also reset the file `types` filter.\n    hooks:\n      - id: pyright\n        name: Typecheck - AutoGPT Platform - Backend\n        alias: pyright-platform-backend\n        entry: poetry -C autogpt_platform/backend run pyright\n        # include forge source (since it's a path dependency) but exclude *_test.py files:\n        files: ^autogpt_platform/(backend/((backend|test)/|(\\w+\\.py|poetry\\.lock)$)|autogpt_libs/(autogpt_libs/.*(?<!_test)\\.py|poetry\\.lock)$)\n        types: [file]\n        language: system\n        pass_filenames: false\n\n      - id: pyright\n        name: Typecheck - AutoGPT Platform - Libs\n        alias: pyright-platform-libs\n        entry: poetry -C autogpt_platform/autogpt_libs run pyright\n        files: ^autogpt_platform/autogpt_libs/(autogpt_libs/|poetry\\.lock$)\n        types: [file]\n        language: system\n        pass_filenames: false\n\n      - id: pyright\n        name: Typecheck - Classic - AutoGPT\n        alias: pyright-classic-autogpt\n        entry: poetry -C classic/original_autogpt run pyright\n        # include forge source (since it's a path dependency) but exclude *_test.py files:\n        files: ^(classic/original_autogpt/((autogpt|scripts|tests)/|poetry\\.lock$)|classic/forge/(forge/.*(?<!_test)\\.py|poetry\\.lock)$)\n        types: [file]\n        language: system\n        pass_filenames: false\n\n      - id: pyright\n        name: Typecheck - Classic - Forge\n        alias: pyright-classic-forge\n        entry: poetry -C classic/forge run pyright\n        files: ^classic/forge/(forge/|poetry\\.lock$)\n        types: [file]\n        language: system\n        pass_filenames: false\n\n      - id: pyright\n        name: Typecheck - Classic - Benchmark\n        alias: pyright-classic-benchmark\n        entry: poetry -C classic/benchmark run pyright\n        files: ^classic/benchmark/(agbenchmark/|tests/|poetry\\.lock$)\n        types: [file]\n        language: system\n        pass_filenames: false\n\n  - repo: local\n    hooks:\n      - id: pytest\n        name: Run tests - AutoGPT Platform - Backend\n        alias: pytest-platform-backend\n        entry: bash -c 'cd autogpt_platform/backend && poetry run pytest'\n        # include autogpt_libs source (since it's a path dependency) but exclude *_test.py files:\n        files: ^autogpt_platform/(backend/((backend|test)/|poetry\\.lock$)|autogpt_libs/(autogpt_libs/.*(?<!_test)\\.py|poetry\\.lock)$)\n        language: system\n        pass_filenames: false\n\n      - id: pytest\n        name: Run tests - Classic - AutoGPT (excl. slow tests)\n        alias: pytest-classic-autogpt\n        entry: bash -c 'cd classic/original_autogpt && poetry run pytest --cov=autogpt -m \"not slow\" tests/unit tests/integration'\n        # include forge source (since it's a path dependency) but exclude *_test.py files:\n        files: ^(classic/original_autogpt/((autogpt|tests)/|poetry\\.lock$)|classic/forge/(forge/.*(?<!_test)\\.py|poetry\\.lock)$)\n        language: system\n        pass_filenames: false\n\n      - id: pytest\n        name: Run tests - Classic - Forge (excl. slow tests)\n        alias: pytest-classic-forge\n        entry: bash -c 'cd classic/forge && poetry run pytest --cov=forge -m \"not slow\"'\n        files: ^classic/forge/(forge/|tests/|poetry\\.lock$)\n        language: system\n        pass_filenames: false\n\n      - id: pytest\n        name: Run tests - Classic - Benchmark\n        alias: pytest-classic-benchmark\n        entry: bash -c 'cd classic/benchmark && poetry run pytest --cov=benchmark'\n        files: ^classic/benchmark/(agbenchmark/|tests/|poetry\\.lock$)\n        language: system\n        pass_filenames: false\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.55,
          "content": "# This CITATION.cff file was generated with cffinit.\n# Visit https://bit.ly/cffinit to generate yours today!\n\ncff-version: 1.2.0\ntitle: AutoGPT\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntype: software\nauthors:\n  - name: Significant Gravitas\n    website: 'https://agpt.co'\nrepository-code: 'https://github.com/Significant-Gravitas/AutoGPT'\nurl: 'https://agpt.co'\nabstract: >-\n  A collection of tools and experimental open-source attempts to make GPT-4 fully\n  autonomous.\nkeywords:\n  - AI\n  - Agent\nlicense: MIT\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.8,
          "content": "# Code of Conduct for AutoGPT\n\n## 1. Purpose\n\nThe purpose of this Code of Conduct is to provide guidelines for contributors to the AutoGPT projects on GitHub. We aim to create a positive and inclusive environment where all participants can contribute and collaborate effectively. By participating in this project, you agree to abide by this Code of Conduct.\n\n## 2. Scope\n\nThis Code of Conduct applies to all contributors, maintainers, and users of the AutoGPT project. It extends to all project spaces, including but not limited to issues, pull requests, code reviews, comments, and other forms of communication within the project.\n\n## 3. Our Standards\n\nWe encourage the following behavior:\n\n* Being respectful and considerate to others\n* Actively seeking diverse perspectives\n* Providing constructive feedback and assistance\n* Demonstrating empathy and understanding\n\nWe discourage the following behavior:\n\n* Harassment or discrimination of any kind\n* Disrespectful, offensive, or inappropriate language or content\n* Personal attacks or insults\n* Unwarranted criticism or negativity\n\n## 4. Reporting and Enforcement\n\nIf you witness or experience any violations of this Code of Conduct, please report them to the project maintainers by email or other appropriate means. The maintainers will investigate and take appropriate action, which may include warnings, temporary or permanent bans, or other measures as necessary.\n\nMaintainers are responsible for ensuring compliance with this Code of Conduct and may take action to address any violations.\n\n## 5. Acknowledgements\n\nThis Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org/version/2/0/code_of_conduct.html).\n\n## 6. Contact\n\nIf you have any questions or concerns, please contact the project maintainers on Discord:\nhttps://discord.gg/autogpt\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.37,
          "content": "# AutoGPT Contribution Guide\nIf you are reading this, you are probably looking for the full **[contribution guide]**,\nwhich is part of our [wiki].\n\nAlso check out our [🚀 Roadmap][roadmap] for information about our priorities and associated tasks.\n<!-- You can find our immediate priorities and their progress on our public [kanban board]. -->\n\n[contribution guide]: https://github.com/Significant-Gravitas/AutoGPT/wiki/Contributing\n[wiki]: https://github.com/Significant-Gravitas/AutoGPT/wiki\n[roadmap]: https://github.com/Significant-Gravitas/AutoGPT/discussions/6971\n[kanban board]: https://github.com/orgs/Significant-Gravitas/projects/1\n\n## Contributing to the AutoGPT Platform Folder\nAll contributions to [the autogpt_platform folder](https://github.com/Significant-Gravitas/AutoGPT/blob/master/autogpt_platform) will be under our [Contribution License Agreement](https://github.com/Significant-Gravitas/AutoGPT/blob/master/autogpt_platform/Contributor%20License%20Agreement%20(CLA).md). By making a pull request contributing to this folder, you agree to the terms of our CLA for your contribution. All contributions to other folders will be under the MIT license.\n\n## In short\n1. Avoid duplicate work, issues, PRs etc.\n2. We encourage you to collaborate with fellow community members on some of our bigger\n   [todo's][roadmap]!\n   * We highly recommend to post your idea and discuss it in the [dev channel].\n3. Create a draft PR when starting work on bigger changes.\n4. Adhere to the [Code Guidelines]\n5. Clearly explain your changes when submitting a PR.\n6. Don't submit broken code: test/validate your changes.\n7. Avoid making unnecessary changes, especially if they're purely based on your personal\n   preferences. Doing so is the maintainers' job. ;-)\n8. Please also consider contributing something other than code; see the\n   [contribution guide] for options.\n\n[dev channel]: https://discord.com/channels/1092243196446249134/1095817829405704305\n[code guidelines]: https://github.com/Significant-Gravitas/AutoGPT/wiki/Contributing#code-guidelines\n\nIf you wish to involve with the project (beyond just contributing PRs), please read the\nwiki page about [Catalyzing](https://github.com/Significant-Gravitas/AutoGPT/wiki/Catalyzing).\n\nIn fact, why not just look through the whole wiki (it's only a few pages) and\nhop on our Discord. See you there! :-)\n\n❤️ & 🔆\nThe team @ AutoGPT\nhttps://discord.gg/autogpt\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.26,
          "content": "﻿All portions of this repository are under one of two licenses. The majority of the AutoGPT repository is under the MIT License below. The autogpt_platform folder is under the\nPolyform Shield License. \n\n\nMIT License\n\n\nCopyright (c) 2023 Toran Bruce Richards\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.56,
          "content": "# AutoGPT: Build, Deploy, and Run AI Agents\n\n[![Discord Follow](https://dcbadge.vercel.app/api/server/autogpt?style=flat)](https://discord.gg/autogpt) &ensp;\n[![Twitter Follow](https://img.shields.io/twitter/follow/Auto_GPT?style=social)](https://twitter.com/Auto_GPT) &ensp;\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n**AutoGPT** is a powerful platform that allows you to create, deploy, and manage continuous AI agents that automate complex workflows. \n\n## Hosting Options \n   - Download to self-host\n   - [Join the Waitlist](https://bit.ly/3ZDijAI) for the cloud-hosted beta  \n\n## How to Setup for Self-Hosting\n> [!NOTE]\n> Setting up and hosting the AutoGPT Platform yourself is a technical process. \n> If you'd rather something that just works, we recommend [joining the waitlist](https://bit.ly/3ZDijAI) for the cloud-hosted beta.\n\nhttps://github.com/user-attachments/assets/d04273a5-b36a-4a37-818e-f631ce72d603\n\nThis tutorial assumes you have Docker, VSCode, git and npm installed.\n\n### 🧱 AutoGPT Frontend\n\nThe AutoGPT frontend is where users interact with our powerful AI automation platform. It offers multiple ways to engage with and leverage our AI agents. This is the interface where you'll bring your AI automation ideas to life:\n\n   **Agent Builder:** For those who want to customize, our intuitive, low-code interface allows you to design and configure your own AI agents. \n   \n   **Workflow Management:** Build, modify, and optimize your automation workflows with ease. You build your agent by connecting blocks, where each block     performs a single action.\n   \n   **Deployment Controls:** Manage the lifecycle of your agents, from testing to production.\n   \n   **Ready-to-Use Agents:** Don't want to build? Simply select from our library of pre-configured agents and put them to work immediately.\n   \n   **Agent Interaction:** Whether you've built your own or are using pre-configured agents, easily run and interact with them through our user-friendly      interface.\n\n   **Monitoring and Analytics:** Keep track of your agents' performance and gain insights to continually improve your automation processes.\n\n[Read this guide](https://docs.agpt.co/platform/new_blocks/) to learn how to build your own custom blocks.\n\n### 💽 AutoGPT Server\n\nThe AutoGPT Server is the powerhouse of our platform This is where your agents run. Once deployed, agents can be triggered by external sources and can operate continuously. It contains all the essential components that make AutoGPT run smoothly.\n\n   **Source Code:** The core logic that drives our agents and automation processes.\n   \n   **Infrastructure:** Robust systems that ensure reliable and scalable performance.\n   \n   **Marketplace:** A comprehensive marketplace where you can find and deploy a wide range of pre-built agents.\n\n### 🐙 Example Agents\n\nHere are two examples of what you can do with AutoGPT:\n\n1. **Generate Viral Videos from Trending Topics**\n   - This agent reads topics on Reddit.\n   - It identifies trending topics.\n   - It then automatically creates a short-form video based on the content. \n\n2. **Identify Top Quotes from Videos for Social Media**\n   - This agent subscribes to your YouTube channel.\n   - When you post a new video, it transcribes it.\n   - It uses AI to identify the most impactful quotes to generate a summary.\n   - Then, it writes a post to automatically publish to your social media. \n\nThese examples show just a glimpse of what you can achieve with AutoGPT! You can create customized workflows to build agents for any use case.\n\n---\n### Mission and Licencing\nOur mission is to provide the tools, so that you can focus on what matters:\n\n- 🏗️ **Building** - Lay the foundation for something amazing.\n- 🧪 **Testing** - Fine-tune your agent to perfection.\n- 🤝 **Delegating** - Let AI work for you, and have your ideas come to life.\n\nBe part of the revolution! **AutoGPT** is here to stay, at the forefront of AI innovation.\n\n**📖 [Documentation](https://docs.agpt.co)**\n&ensp;|&ensp;\n**🚀 [Contributing](CONTRIBUTING.md)**\n\n**Licensing:**\n\nMIT License: The majority of the AutoGPT repository is under the MIT License.\n\nPolyform Shield License: This license applies to the autogpt_platform folder. \n\nFor more information, see https://agpt.co/blog/introducing-the-autogpt-platform\n\n---\n## 🤖 AutoGPT Classic\n> Below is information about the classic version of AutoGPT.\n\n**🛠️ [Build your own Agent - Quickstart](classic/FORGE-QUICKSTART.md)**\n\n### 🏗️ Forge\n\n**Forge your own agent!** &ndash; Forge is a ready-to-go toolkit to build your own agent application. It handles most of the boilerplate code, letting you channel all your creativity into the things that set *your* agent apart. All tutorials are located [here](https://medium.com/@aiedge/autogpt-forge-e3de53cc58ec). Components from [`forge`](/classic/forge/) can also be used individually to speed up development and reduce boilerplate in your agent project.\n\n🚀 [**Getting Started with Forge**](https://github.com/Significant-Gravitas/AutoGPT/blob/master/classic/forge/tutorials/001_getting_started.md) &ndash;\nThis guide will walk you through the process of creating your own agent and using the benchmark and user interface.\n\n📘 [Learn More](https://github.com/Significant-Gravitas/AutoGPT/tree/master/classic/forge) about Forge\n\n### 🎯 Benchmark\n\n**Measure your agent's performance!** The `agbenchmark` can be used with any agent that supports the agent protocol, and the integration with the project's [CLI] makes it even easier to use with AutoGPT and forge-based agents. The benchmark offers a stringent testing environment. Our framework allows for autonomous, objective performance evaluations, ensuring your agents are primed for real-world action.\n\n<!-- TODO: insert visual demonstrating the benchmark -->\n\n📦 [`agbenchmark`](https://pypi.org/project/agbenchmark/) on Pypi\n&ensp;|&ensp;\n📘 [Learn More](https://github.com/Significant-Gravitas/AutoGPT/tree/master/classic/benchmark) about the Benchmark\n\n### 💻 UI\n\n**Makes agents easy to use!** The `frontend` gives you a user-friendly interface to control and monitor your agents. It connects to agents through the [agent protocol](#-agent-protocol), ensuring compatibility with many agents from both inside and outside of our ecosystem.\n\n<!-- TODO: insert screenshot of front end -->\n\nThe frontend works out-of-the-box with all agents in the repo. Just use the [CLI] to run your agent of choice!\n\n📘 [Learn More](https://github.com/Significant-Gravitas/AutoGPT/tree/master/classic/frontend) about the Frontend\n\n### ⌨️ CLI\n\n[CLI]: #-cli\n\nTo make it as easy as possible to use all of the tools offered by the repository, a CLI is included at the root of the repo:\n\n```shell\n$ ./run\nUsage: cli.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  agent      Commands to create, start and stop agents\n  benchmark  Commands to start the benchmark and list tests and categories\n  setup      Installs dependencies needed for your system.\n```\n\nJust clone the repo, install dependencies with `./run setup`, and you should be good to go!\n\n## 🤔 Questions? Problems? Suggestions?\n\n### Get help - [Discord 💬](https://discord.gg/autogpt)\n\n[![Join us on Discord](https://invidget.switchblade.xyz/autogpt)](https://discord.gg/autogpt)\n\nTo report a bug or request a feature, create a [GitHub Issue](https://github.com/Significant-Gravitas/AutoGPT/issues/new/choose). Please ensure someone else hasn’t created an issue for the same topic.\n\n## 🤝 Sister projects\n\n### 🔄 Agent Protocol\n\nTo maintain a uniform standard and ensure seamless compatibility with many current and future applications, AutoGPT employs the [agent protocol](https://agentprotocol.ai/) standard by the AI Engineer Foundation. This standardizes the communication pathways from your agent to the frontend and benchmark.\n\n---\n\n## Stars stats\n\n<p align=\"center\">\n<a href=\"https://star-history.com/#Significant-Gravitas/AutoGPT\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=Significant-Gravitas/AutoGPT&type=Date&theme=dark\" />\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=Significant-Gravitas/AutoGPT&type=Date\" />\n    <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=Significant-Gravitas/AutoGPT&type=Date\" />\n  </picture>\n</a>\n</p>\n\n\n## ⚡ Contributors\n\n<a href=\"https://github.com/Significant-Gravitas/AutoGPT/graphs/contributors\" alt=\"View Contributors\">\n  <img src=\"https://contrib.rocks/image?repo=Significant-Gravitas/AutoGPT&max=1000&columns=10\" alt=\"Contributors\" />\n</a>\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.23,
          "content": "# Security Policy\n\n## Reporting Security Issues\n\nWe take the security of our project seriously. If you believe you have found a security vulnerability, please report it to us privately. **Please do not report security vulnerabilities through public GitHub issues, discussions, or pull requests.**\n\n> **Important Note**: Any code within the `classic/` folder is considered legacy, unsupported, and out of scope for security reports. We will not address security vulnerabilities in this deprecated code.\n\nInstead, please report them via:\n- [GitHub Security Advisory](https://github.com/Significant-Gravitas/AutoGPT/security/advisories/new)\n<!--- [Huntr.dev](https://huntr.com/repos/significant-gravitas/autogpt) - where you may be eligible for a bounty-->\n\n### Reporting Process\n1. **Submit Report**: Use one of the above channels to submit your report\n2. **Response Time**: Our team will acknowledge receipt of your report within 14 business days.\n3. **Collaboration**: We will collaborate with you to understand and validate the issue\n4. **Resolution**: We will work on a fix and coordinate the release process\n\n### Disclosure Policy\n- Please provide detailed reports with reproducible steps\n- Include the version/commit hash where you discovered the vulnerability\n- Allow us a 90-day security fix window before any public disclosure\n- Share any potential mitigations or workarounds if known\n\n## Supported Versions\nOnly the following versions are eligible for security updates:\n\n| Version | Supported |\n|---------|-----------|\n| Latest release on master branch | ✅ |\n| Development commits (pre-master) | ✅ |\n| Classic folder (deprecated) | ❌ |\n| All other versions | ❌ |\n\n## Security Best Practices\nWhen using this project:\n1. Always use the latest stable version\n2. Review security advisories before updating\n3. Follow our security documentation and guidelines\n4. Keep your dependencies up to date\n5. Do not use code from the `classic/` folder as it is deprecated and unsupported\n\n## Past Security Advisories\nFor a list of past security advisories, please visit our [Security Advisory Page](https://github.com/Significant-Gravitas/AutoGPT/security/advisories) and [Huntr Disclosures Page](https://huntr.com/repos/significant-gravitas/autogpt).\n\n---\nLast updated: November 2024\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "autogpt_platform",
          "type": "tree",
          "content": null
        },
        {
          "name": "classic",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}