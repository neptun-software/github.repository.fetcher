{
  "metadata": {
    "timestamp": 1736557461354,
    "page": 485,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vlang/v",
      "stars": 35947,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 1.19,
          "content": "env:\n  LANG: en_US.UTF-8\n\nfreebsd_instance:\n  image_family: freebsd-14-0\n\n## Note: all tasks should end with _script: here, otherwise they will not be picked up!\nfreebsd_task:\n  name: FreeBSD Code CI\n  timeout_in: 31m\n  skip: \"!changesInclude('.cirrus.yml', '**.{v,vsh}', '**.c', '**.h')\"\n  install_script: pkg install -y git\n  diagnose_env_script: |\n    ## env ## CIRRUS_WORKING_DIR is /tmp/cirrus-ci-build\n    pwd\n    ls -la\n    whoami\n    git log -n1\n    echo 'number of detected processors:'\n    getconf _NPROCESSORS_ONLN\n  build_script: |\n    echo 'Building local V'\n    cc --version\n    make CFLAGS=\n  build_fast_script: |\n    ##.github/workflows/freebsd_build_tcc.sh\n    ##tcc -v -v\n    echo 'Build cmd/tools/fast'\n    cd cmd/tools/fast && ../../../v fast.v ## && ./fast -clang\n  test_math_script: |\n    echo 'Test the math module'\n    ./v test vlib/math\n  test_math_pure_v_script: |\n    echo 'Test the math module, using only the pure V versions, without the .c.v overrides'\n    ./v -exclude @vlib/math/*.c.v test vlib/math\n  test_zip_modules_script: |\n    echo 'Test modules using thirdparty/zip'\n    ./v test vlib/compress/\n  test_self_script: |\n    echo 'Run test-self'\n    VTEST_JUST_ESSENTIAL=1 ./v test-self\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.66,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.{v,js,css}]\nindent_style = tab\n\n[*.{bat,cmd}]\n# BAT/CMD ~ DOS/Win requires BAT/CMD files to have CRLF EOLNs\nend_of_line = crlf\n\n[*.{yml,yaml}]\nindent_style = space\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n# lines that are too long will trigger an error in cmd/tools/vcheck-md.v\n# run v check-md [folder/file] to test markdown files\n# the longest normal line is specified with this constant:\n# `too_long_line_length_other     = 100`\nmax_line_length = 100\n\n[*.{txt,out}]\ninsert_final_newline = false\n\n[{Makefile,GNUmakefile}]\nindent_style = tab\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.21,
          "content": "* text=auto eol=lf\n*.bat eol=crlf\n\n*.v linguist-language=V\n*.vv linguist-language=V\n*.vsh linguist-language=V\nv.mod linguist-language=V\n.vdocignore linguist-language=ignore\n\nDockerfile.* linguist-language=Dockerfile\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.85,
          "content": "# ignore sub-level build binaries and v binary\n*/**/*\nv\nv.exe\nv2\nv2.exe\nvdbg\nvdbg.exe\n!*/\n!*.*\n*.exe\n*.o\n*.so\n.*.c\n*.tmp.c\n*.obj\n*.exp\n*.ilk\n*.pdb\n*.dll\n*.lib\n*.bak\n*.dylib\na.out\n.noprefix.vrepl_temp\n\n# ignore v build files\n/vc\n/v.c\n/v.*.c\n/v.c.out\n/v_old\n/v_old.exe\n/vold\n/vold.exe\n/vnew\n/vnew.exe\n/vprod\n/vprod_gcc\n/vprod_clang\n/vprod.exe\n/vprod_gcc.exe\n/vprod_clang.exe\n/vprod_msvc.exe\n.vrepl_temp.v\nfns.txt\n.noprefix.vrepl_temp.v\n\n# ignore temp and cache directories\ntemp/\ntmp/\ncache/\n\n# unignore special files without extension\n!.github/PULL_REQUEST_TEMPLATE\n!.editorconfig\n!.gitattributes\n!.gitignore\n!BSDmakefile\n!Dockerfile\n!Dockerfile.alpine\n!Dockerfile.cross\n!LICENSE\n!Makefile\n!GNUmakefile\n\n# ignore editor files\n.idea\n.project\n.classpath\n.c9\n.vs\n*.launch\n.settings/\n*.sublime-workspace\n.vscode/\n*.code-workspace\n*~\n*.swp\n*.swo\n*.swn\n.env\n\n# ignore debugger files\ncachegrind.out.*\n.gdb_history\n*.dSYM\n*.def\nvgcore.*\n\n# ignore system files\n.DS_Store\n._*\nthumbs.db\n/.symlink\n/.bin\n\n_docs\n\n# ignore vs databases\n*.suo\n*.VC.db\n*.rsp\n\n# ignore cmd/tools/.disable_autorecompilation, which some package managers use.\ncmd/tools/.disable_autorecompilation\n\ntest.bin\n\n# ignore codespace env\n.venv/\n.direnv/\nshell.nix\ndefault.nix\nflake.nix\n.envrc\n\n# generated by thirdparty/stdatomic/nix/cpp/gen.v\nthirdparty/stdatomic/nix/cpp/*.h\n\n# ignore thirdparty libs that are distributed separately\nthirdparty/binaryen*\nthirdparty/wabt*\nthirdparty/tcc/\nthirdparty/sqlite/\n\n# ignore VLS log\nvls.log\n\n# ignore v2go tmperror files\n*.tmperr\n\n*/**/tmp.*\n\n# ignore Intellij files\n.idea/\n/*.iml\nwasm.v\nTAGS\ntags\n\n# ignore large GTK *.gir files\nGtk-4.0.gir\n*.gir\n\nvlib/builtin/js/*.js\nvlib/v/tests/*.js\n\n# ignore the old regexp based v.ctags file (people using universal ctags < 6.1.0, can still benefit from them)\n.ctags.d/v.ctags\n\n# ignore .NET7.0 Assembly Files\nbench/vectors/bin\nbench/vectors/obj\n\nautofuzz.log\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 191.67,
          "content": "## V 0.4.9\n*22 Dec 2024*\n\n#### Improvements in the language\n- `-skip-unused` is now on by default resulting in much smaller cgen and binaries. 70% reduction for hello world.\n- `-parallel-cc` for speeding up `-prod` and `-cc clang/gcc` compilation by up to 14 times!\n- C functions no longer need to be manually defined. An `#include \"foo.c\"` is enough (behind `-experimental` for now).\n- Fixed arrays now have `.index .any .all .map .sort .sorted` methods\n- Remove inline sum types completely\n- Support `in` expr with number ranges: `if var in 1..4 {` (fix #20352) (#22754)\n- Optimize literal string comparison (`match`, `in` and `==`) (#22643)\n- Allow `map[k]()?` and `map[k]()()` (#22740)\n- Add selector option unwrapping inside `if tree.root != none {` (#22895)\n- Add `array.count` as a method that accepts a predicate, similar to filter, but returning just the number of matches (#23054)\n- Allow option array element comparison `==` and `!=` (fix #23108) (#23113)\n\n#### Breaking changes\n- time: rewrite parse_rfc3339/1 to improve performance, reject partial timestamps, that miss date info like `22:47:08Z` (#22585)\n\n#### Checker improvements/fixes\n- Optimize identical type checking (#22596)\n- Fix `T.unaliased_typ` if branch evaluation (fix #22587) (#22598)\n- Fix lambda expr with fntype params and restore fixed_array_any_all_test.v (#22625)\n- Check fixed array builtin method args mismatch (#22626)\n- Fix generic fn call return type resolve on var assignment (fix #22612) (#22627)\n- Improve checking parameter mismatches for fixed array builtin methods (#22630)\n- Add tests for checking the new errors for fixed arrays .sort() calls (#22656)\n- Fix index expr that left is if expr (fix #22654) (#22661)\n- Fix return type checks, when returning struct values, implementing IError in non-result fn (fix #22659) (fix #22658) (#22660)\n- `App.method` field initialisation, for fn fields, initialised with generic methods (#22665)\n- Allow for `f() or { T{} }` in a generic method, for `fn f() ?T {`, being called with `T`, being a container like []int etc, not just a primitive type like int (#22672)\n- Allow for `f() or { T{} }` part 2, see also cc55aa5 (handle the case of an ignored result as well) (#22687)\n- Fix selector with prefixed `&` structinit (#22689)\n- Fix missing check for fn var with generic return inherited to anon fn (fix #19045) (#22683)\n- Check for receiver name clashing with global var (fix #22698) (#22708)\n- Fix none check for match expr with option (fix #22728) (#22732)\n- Fix option map fn type and missing check for result param type (fix #22736) (#22738)\n- Fix missing info about generic fn var usage without concrete types (fix #22733, #22734) (#22743)\n- Fix missing check for stack pointer return (fix #22726) (#22756)\n- Improve static method call resolution (fix #22773) (#22787)\n- Skip redundant message for int overflows, while casting integer literals (fix #22761) (#22788)\n- Fix callexpr after auto C func identification (fix #22800) (#22809)\n- Fix missing auto `from_string` type restriction (related to #22783) (#22803)\n- Fix match expr with empty array init expression (#22832)\n- Disallow `foo[T]` as a value  (#22820)\n- Fix if expr with empty array init expression (related #22832) (#22841)\n- Improve the position underlining, for last statements in branches of `if` expressions  (#22845)\n- Fix generic fn call with empty array argument (fix #22843) (#22846)\n- Fix missing or-block check for callexpr (fix #22835) (#22840)\n- Check array builtin method calls, that do need a mutable receiver, but are called on an immutable one (fix #22850) (#22853)\n- Check alias of array op overloading and fix op overloading (fix #22851) (#22854)\n- Disallow struct init with `mutable_field: const_array` (fix #22862) (#22863)\n- Check struct aliased field unsign type assigning negative value (fix #22868) (#22871)\n- Fix alias to struct generic type (fix #22866) (#22872)\n- Fix `json.encode_pretty` with a struct init expression argument (#22897)\n- Fix codegen for fixed array initialization with a fn call (fix #22887) (#22891)\n- Fix or-expr check on invalid method call (fix #22949) (#22950)\n- Fix mut var option unwrap with `!= none`, support `if mut x != none {` too (fix #22936) (#22943)\n- Prevent a compiler panic, while running `v -check file.v` on files with parser errors (fix #22981) (#22982)\n- Allow array sort with callexpr (#22989)\n- Fix `$res()` used in `defer {}` blocks with more statements, add a test (#22998)\n- Fix generec fn returning generic closure (#23047)\n- Fix generic fn returning generic closure (related #23047) (#23055)\n- Fix missing checker for cast from mut var to non-ptr type (fix #23017) (#23056)\n- Check fn call argument mismatch (fix #23016) (#23061)\n- Fix empty array append multi dims (fix #23092) (#23096)\n- Fix selector generic or block (fix #23088) (#23102)\n- Fix veb route method param with non ctx name (fix #23105) (#23107)\n- Allow fixed array where voidptr is expected (fix #23090) (#23100)\n- Fix immutable to mutable reference (fix #22653) (#22663)\n- Fix missing check on range expr when high var is same iteration value var (#23130)\n- Allow `[]Enum{len: 10, init: .thing}` (fix #23077) (#23165)\n- Fix option unwrapping and call from option struct field (#23182)\n- Add a notice for global variable redeclarations (#23162)\n- Fix assign check, when rechecking for another concrete type (#23212)\n\n#### Parser improvements\n- Fix generic struct init detection `T{}` (#22682)\n- Improve the assert informations (related #22668) (#22679)\n- Make C struct fields public and mutable by default (fix #22695) (#22706)\n- Fix enum redeclaration error (fix #22759) (#22766)\n- Fix struct field name using keyword (fix #22826) (#22829)\n- Optimise mark_var_as_used calls, by moving it to an ast.Scope method (#22842)\n- Optimize method parameter detection in used check (#22915)\n- Fix block position's last line (#22913)\n- Support `@[must_use]` tag for fns/methods, and an experimental `-check-result` option (#22983)\n- Allow `type` as field type on params struct construction (fix #23091) (#23098)\n- Allow `type` and other keywords as plain attr value (fix #23150) (#23154)\n- Support `@[tag]` for hash statements, like `#define` and `#flag` (#23210)\n\n#### Compiler internals\n- Add `:parse_text` to the paths of .v files, printed by `-print-v-files`, for parse time generated snippets\n- v.pref: support a `_wasm32_emscripten.c.v` suffix for platform files too\n- builder: fix msvc build thirdparty obj file from .cpp (fix #22772) (#22789)\n- v.util: use temporary workaround for the vinix build problem (when VFLAGS is set, and `-ldflags ` is passed at the same time)\n- Allow getting notified about unused function params (#22879)\n- v.scanner: remove `Scanner.is_started` field (#22918)\n- v.scanner: fix string interpolation for float e format (fix #22429) (#23147)\n- cbuilder: remove flto with parallel-cc, it slowed down linking 10x\n- cbuilder: store split up C files in vtmp\n- v.builder: integrate more compile/linker options into parallel_cc.v (#23190)\n- v.builder: prevent passing `-x objective-c` with `-parallel-cc` for now\n- v.builder: move filtering logic for `-parallel-cc` to parallel_cc.v\n- v.pref: support `-debug` and `-cdebug`, as more explicit alternative names for `-g` and `-cg` (#23208)\n- v.builder: fail the whole v compilation, if linking or compiling during `-parallel-cc` fails (#23211)\n- v.pref: implement `-no-prod-options` to turn off passing `-O3 -flto`, while still keeping the `$if prod {` branches (passing custom flags with `-cflags -Os` already works)\n- v.builder: support `-no-prod-options` with `-cc msvc` as well\n\n#### Standard library\n- builtin: improve performance of `string.starts_with/1` and `string.ends_with/1`, when compiled with tcc (#22620)\n- builtin: improve `fixed_array_any_all_test.v` (related #22609) (#22621)\n- builtin: temporary fix fixed_array_any_all_test.v (#22624)\n- builtin: support `-d no_gc_threads` for turning off passing `-DGC_THREADS=1` while compiling the GC library\n- encoding.utf8: fix is_punct func (fix #22646) (#22647)\n- log,time: improve performance for writing a line to a log, add Time.format_rfc3339_micro/0 (#22662)\n- flag: add missing short flag match in `flag.to_struct`, add test (#22696)\n- bitfield: add `shift_left/1` and `shift_right/1` methods to `BitField` (#22700)\n- x.json2: pre-arranging the replacement of the decoder, to match https://github.com/enghitalo/v/tree/decoder2_to_json2 (#22729)\n- builtin: improve fixed_array_any_all_test.v (#22746)\n- builtin: add `string.is_pure_ascii()` (#22748)\n- os: document the various enum values in os.Signal (#22770)\n- builtin: fix runes.to_upper() (fix #22742) (#22755)\n- ci: use os.system to redirect output\n- builtin: minor optimization in rune.map_to() (#22810)\n- vlib: initial addition of `x.encoding.asn1` (#22783)\n- os: work towards being able to again use `-autofree` while recompiling the V compiler several times\n- x.encoding.asn1: fix time creation to also accommodate negative timezone offsets (#22861)\n- vlib: remove modules/functions/fields, deprecated in 2023 (#22750)\n- term: improve performance of repeated can_show_color_on_stdout and can_show_color_on_stderr calls, by caching their results (#22893)\n- builtin: make int_min/2 and int_max/2 public\n- json: mark json_print_pretty/1 with `@[markused]` (used by cgen)\n- math.big: use `@[manualfree]` to workaround -autofree compilation issues with gitly, and other projects using `crypto.rand` and `math.big`\n- x.encoding.asn1: improve performance (#22948)\n- gg: use a larger fontstash text atlas by default (2048x2048, and customizable), instead of 512x512 (fix #21610) (#22959)\n- Revert \"os: deprecate `os.getwd` in favor of `os.get_current_dir` (part 1) (#22966)\"\n- log: tag log.fatal with @[noreturn] (#22986)\n- runtime: force runtime.nr_jobs() to return 1, while V is bootstrapping itself, from vc/ source, that was compiled with `-os cross` (fix #22991)\n- json: fix decode codegen for []&type (fix #23007) (#23010)\n- os: add os.get_trimmed_lines() too\n- crypto.sha3: add support for Keccak-256 and Keccak-512 (#23058)\n- rand: add missing i32 APIs, corresponding to the int ones\n- math.big: fix `assert big.integer_from_int(1) == big.integer_from_bytes([u8(0), 0, 0, 0, 1])` (fix #23115) (#23124)\n- math: use libc wrappers for math.log2/1, math.log10/1, math.log1p/1 and math.log_b/1; make `assert math.log10(10) == 1.0` pass in the common case (#23129)\n- gg: add `icon` field to gg.Config, for easier access (fix #23135) (#23138)\n- math: fix math.log10() for `-exclude @vlib/math/*.c.v` (fix #23136) (#23140)\n- json: add primitive type validation (fix #23021) (#23142)\n- json: fix memory leak on result messages (checked with `json_option_raw_test.v`, compiled with `-fsanitize=address,pointer-compare,pointer-subtract`) (#23172)\n- vlib: add new `rand.cuid2` module (#23181)\n- json: fix memleak on sumtype decoding (#23197)\n- vlib: enable more satnitized memleak detection runs without false positives on the CI (#23200)\n- json: fix argument freeing for json.encode and json.encode_pretty calls (#22781)\n\n#### Web\n- veb: translations via %translation_key\n- picoev,net.http: use Time.http_header_string method, to improve performance (#22619)\n- Do `import veb`, only for templates that do use functions defined in `veb`\n- picoev: support `-d picoev_verbose_errors`, do not use any naked `eprintln` by default, since that is a low level module\n- picoev: fix the incompatible pointer type cast error in the C.epoll_wait call (#22785)\n- net.mbedtls: define MBEDTLS_THREADING_PTHREAD, in mbedtls_config.h; call C.mbedtls_ssl_conf_read_timeout explicitly in the wrapper, with a shorter timeout value of 317ms (determined experimentally)\n- veb: fix large file transfer timeout (fix #22489) (#22924)\n- net.http: send Host headers with port (when the port is != 80 or 443) (fix #22941) (#22942)\n- net.mbedtls: support compiling with `-d mbedtls_client_read_timeout_ms=7000`, `-d mbedtls_server_read_timeout_ms=60000`, and `-d trace_mbedtls_timeouts`\n- net.urllib: fix parse of url relative address (fix #21061) (#23180)\n- veb: fix key value and translation file name (#23203)\n\n#### ORM\n- Fix orm.Connection only allowing immutable Connections (#22684)\n- Fix order by with custom column name (#22813)\n- Support plain `@[serial]` attribute for marking struct fields (#22814)\n- Fix crash when working with array field (fix #22822) (#22824)\n- Fix list generation and escape loose backtick (#23039)\n- Fix mark as used var on insert statement (fix #23032) (#23038)\n- Fix update stmt with enum value (fix #23031) (#23037)\n\n#### C backend\n- Fix codegen for fixed array contains - `[1,2]! in a` (fix #22559) (#22579)\n- Improve fixed array literal in operation and index calls (#22590)\n- Add codegen for auto free methods for interface type (#22555)\n- Add test for #22586 (#22600)\n- Parser,ast,cgen: do is_builtin sym marking during parse time just *once*, to save multiple checks later (#22580)\n- Cache the results of g.base_type/1 (#22613)\n- Add caching to contains_ptr return (#22605)\n- Add .write2/2 and .writeln2/2 methods to reduce consecutive write calls (#22610)\n- Optimise the generated code for returning literal values and option/result values (#22622)\n- Optimize literal string comparison (string__eq -> vmemcmp) (#22614)\n- Fix selector indexexpr with fntype on assignment (fix #22635) (#22637)\n- Fix anon fn with `&` prefix (fix #22628) (#22638)\n- Fix struct field init with fixed array using index (fix #22616) (#22641)\n- Fix interface conversion codegen race issue (fix #22640, #17943) (#22655)\n- Fix waiter funcs declarations (fix #22640) (#22649)\n- Improve the assert informations (fix #22666) (#22668)\n- Fix dump of alias to option fn type (fix #22670) (#22676)\n- Fix array append map value with or expr (fix #22674) (#22678)\n- Ensure proper saving/restoring of cgen `map[k] := fn ()` state, when assigning anonymous fns (fix #22705) (#22707)\n- Implement methods sort_with_compare()/sorted_with_compare() for fixed arrays (#22702)\n- Implement methods reverse()/reverse_in_place() for fixed arrays (#22712)\n- Fix ptr field encoding for `json` (fix #22717) (#22720)\n- Fix `[1, 2, 3]!.map(it * 2)` (#22722)\n- Fix `assert [1, 2, 3]!.contains(2)` (#22725)\n- Fix `assert [1, 2, 3]!.index(2) == 1` (#22727)\n- Fix spawn with non-pointer receiver (fix #22718) (#22719)\n- Fix `assert [1, 2, 3]!.reverse() == [3, 2, 1]!` (#22745)\n- Fix codegen for `-no-builtin` flag (when used separately from `-d no_main`) (#22765)\n- Apply the `a in [x,y,z]` optimisation for `ast.IndexExpr` and `ast.SelectorExpr` again (#22767)\n- Fix codegen to emit callexpr one time for `in` expr optimization (#22764)\n- Fix c codegen formatting for return match (#22768)\n- Avoid generation of empty `or` blocks for `f() or {}` (#22775)\n- Fix struct field name using c keyword `typeof` (fix #22779) (#22782)\n- Remove unused code generated for unwrapping temp var from callexpr (detect unused return value from CallExpr), fix parser bugs (#22769)\n- Enable if guard to add `err` var on else branch, after last `else if` (fix #22784) (#22786)\n- Fix option struct default value init with `-cstrict` (spotted in #22783) (#22802)\n- Fix codegen for fn fixed array param w/ size defined by const (fix #22811) (#22812)\n- Fix wrong type resolution on infix (#22804)\n- Fix default `T{}` when `T` is ref type + dereferencing issue when comparing int alias to int (fix #22795) (#22807)\n- Fix generation of a missing return in `return if cond { x } else { return missing }` (fix #22838) (#22839)\n- Fix generic static method call return type resolution (#22865)\n- Fix array fixed code generation for more than 1 dimension (fix #22866) (#22876)\n- Fix codegen for `$if` in an if expression, when compiled with `-g` (fix #22873) (#22888)\n- Make errors more informative (resolve empty panics) (related: #21184) (#22898)\n- Generate json array line on uniform indent lvl (#22899)\n- Fix codegen for returning a fixed array as a result (fix #22894) (#22896)\n- Fix codegen for alias type interface methods (fix #22901) (#22902)\n- Fix codegen for assigning aliased fixed array (fix #22907) (#22909)\n- Fix codegen for returning option aliased fixed array (fix #22910, fix #22911) (#22912)\n- Fix aliases of fixed array infix expression (fix #22925) (#22928)\n- Fix aliases of fixed array append to array (fix #22926) (#22929)\n- Fix option unwrap for fields of interface type (fixes #22930) (#22931)\n- Fix aliased fixed array option fn call (fix #22927) (#22934)\n- Move the `msvc compiler does not support inline assembly` to cgen (so it will only get triggered, when ASM blocks are still present, in what is passed to cgen)\n- Fix dump fixed array on array append (fix #22935) (#22940)\n- Fix enum value string interpolation, like its declared enum underlying type (fix #22938) (#22945)\n- Allow unwrapping of `x as string` expr, when `x` is a `?string` value (#22953)\n- Fix codegen for result/option propagation out of fn context (fix #22961) (#22963)\n- Fix codegen for option on concatexpr (fix #22951) (#22964)\n- Reduce code for returning and extra whitespaces on `return` (#22967)\n- Allow unwrapping of `foo.bar as string`, where `foo.bar` is `?string` (fix #22960) (#22973)\n- Add thread timing stats too, on `-show-timings -stats` (#22990)\n- Patch missing `gettid()` on glibc < 2.30 (#22987)\n- Fix array fixed on update expr and alias type to multi dimension of fixed array (fix #22971) (#22972)\n- Fix sumtype with embedded struct of option field (fix #22984) (#22996)\n- Fix autostr for interface with circular type (fix #23022) (#23026)\n- Fix array.delete_many() codegen (fix #23024) (#23025)\n- Fix callexpr or-expr codegen on const decl (fix #23029) (#23043)\n- Fix struct update embed expr for fixed arrays (fix #22999) (#23040)\n- Fix update expr with embed fixed array with multiple dimensions (fix #23048) (#23049)\n- Fix cast interface value in match expr (#23068)\n- Prevent too long lines in array initialisations (#23074)\n- Fix smartcast codegen for msvc (#23084)\n- Fix option codegen for accept IError value (fix #23076) (#23085)\n- Fixed for in loop with generic fixed array (fix #23075) (#23101)\n- Fix printing fn call of returning c struct value (fix #23104) (#23106)\n- Fix array fixed comparison from fn return (fix #23071) (#23114)\n- Fix array map to fixed array (fix #23116) (#23118)\n- Fix codegen for returning different option alias type (fix #23087) (#23125)\n- Fix for in for interface type (fix #23119) (#23127)\n- Fix codegen for generic selector expr (fix #22974) (#23132)\n- Fix different option alias type as fn arg (fix #23086) (#23131)\n- Fix codegen for returning option reference from indexexpr (fix #23133) (#23139)\n- Fix array fixed auto str on `-cstrict` (#23144)\n- Fix codegen for array append on indexexpr (fix #23156) (#23160)\n- Fix assert for alias to fixed array (fix #23149) (#23161)\"\n- Fix auto eq for fixed array (fix #23149) (#23169)\n- Fix fixed array option cast with `none` (fix #23164) (#23168)\n- Fix selector call with reserved c name (fix #23170) (#23175)\n- Parser,checker,cgen,fmt: fix array fixed option initialization (`none`) (complete #23164) (#23176)\n- Fix option fn with voidptr arg (fix #23170 for !=tcc too) (#23179)\n- Fix missing validation for selector unwrapping + fix default `return none` for unwrapping (#23183)\n- Fix assign optional aliases of fixed array (fix #23185) (#23188)\n- Fix struct field init with optional fixed array (fix #23193, fix #23195) (#23199)\n- Reduce RAM usage, by avoiding a .str() call, for the final string builder, containing the final C program, used to write it to a file (#23226)\n\n#### vfmt\n- Add support for comments inside `sql db { ... }` blocks (fix #22601) (#22602)\n- Fix formatting fixed array size of struct member (#22815)\n- Fix formating non-unsafe blocks with break line (fix #22900) (#22903)\n- Fix shared receiver formatting (fix #23151) (#23153)\n\n#### Tools\n- ci: add benchmark_footprint_json_decode.yml and benchmark_footprint_json_encode.yml (#22592)\n- Use a `~same~` label, when the results in `v repeat` are not different enough\n- Allow for fast exiting in compare_pr_to_master.v through Ctrl-C (or any failed command)\n- ci: fix failing jobs after 4ed9d13 (#22606)\n- Discard the top 7 results for each 10 runs, from `v repeat` runs, done by compare_pr_to_master.v, to reduce σ on machines with more varied load\n- Allow for `v repeat -N ./cmd/tools/vtest_test`, by adding a -N/--no_vexe_reset option to `v repeat`\n- Show more details in compare_pr_to_master.v\n- ci: fix failing musl jobs after 2684ef9 (#22667)\n- ci: run `zizmor .github/workflows/paths_ci.yml` and fix reported issues (#22681)\n- Show the full test output, on known flaky test failure with `v test folder/` (#22716)\n- Change `v test` to allow for `// vtest hide_retries` so that retry_test.v can hide its own (deliberate) retries\n- ci: rename one of the duplicate `main_test.v` files, to reduce false positives (workaround)\n- Fix `v doctor` output for missing `cc`. Add a diagnostic line checking for `emcc --version` too\n- ci: run `v fmt -w vlib/v/pref/should_compile.v`\n- ci: reduce flakyness of cmd/tools/vcover/cover_test.v (workaround for a race condition while updating the OK tasks counter in `v test`)\n- Improve the diagnostic output of compare_pr_to_master.v\n- ci: add a problem matcher support, to get error/warning/notice annotations in V CI jobs (#22790)\n- Bump default `v retry` timeout to 10 minutes, clarify the usage of its `--timeout` option.\n- ci: fix Build V\n- ci: silence compilation warning for bench_string_key_in_map_vs_string_value_in_array.v\n- ci: fix vinix_ci.yml for latest Vinix commits (#22818)\n- Improve output of compare_pr_to_master.v\n- Use `v retry` in more places, that do network operations that can fail temporarily (#22836)\n- Allow for `v download -RD URL/script.vsh`, to download `script.vsh`, then run it locally, then remove it, in a single command\n- v.help: add topic for `v help retry`\n- v.help: add help topic for `v help repeat`\n- ci,v.help: work around -autofree bugs, fix `./v -autofree -o v2 cmd/v`\n- ci: add .yml file for testing compilation of Larpon's Shy library and the Puzzle Vibes game (#22874)\n- ci: check more compile flag combinations in puzzle_vibes_ci.yml\n- Fix compilation of hw with vnew -> vold, in compare_pr_to_master.v\n- ci: fix for `v build-tools`\n- ci: check that more apps/modules do compile with -skip-unused (#22904)\n- vet: make `v vet` produce a nicer note, including the offending files, instead of `file.v` (#22957)\n- ci: extract the VTL&VSL jobs from v_apps_and_modules_compile_ci.yml to vsl_and_vtl_compile_ci.yml\n- Make oldv aware of when to pass -no-parallel when bootstrapping V from v.c (fix #22990, part 2)\n- markused: only add .vtest_ functions, *when* compiling _test.v files (#23003)\n- Improve oldv compatibility for using new stricter C compilers like clang-18, to compile older V versions from 2020 and 2019\n- Use -Wno-error=incompatible-pointer-types in oldv, which is more permissive than just -Wno-error=incompatible-function-pointer-types, and works with gcc too, not just clang\n- Describe more precisely what commands are used by `oldv`, so it can fail early, with a meaningful error message, if they are not present.\n- ci: fix ROADMAP.md checks (#23059)\n- vrepl: shrink .repl inputs, so repl_test.v runs faster\n- ci: update compile_v_with_vtcc.sh, enable its CI task again (#23063)\n- ci: extract .github/workflows/compile_discordv.sh, enable its CI step again\n- json2.decoder2: prepare decoder in json2 to be replaced by json2.decode2 (#23078)\n- Let oldv fail early, when git fails to do network operations or checkouts\n- ci: fix for `-cc tcc -no-retry-compilation`, do not use more complex constants, but functions in vlib/math/vec/vec2_test.v\n- ci: fix option_fn_voidptr_test.v after a200c45\n- ci: make the CI more robust, by retrying commands and `v download` instead of wget (#23196)\n- ci: use `v retry -- v setup-freetype` to make the CI more robust against random network failures\n- ci: change exec name for parallel cc\n- ci: speed up again sanitizer runs (#23222)\n\n#### Operating System support\n- builder: change linuxroot repo URL to https://github.com/vlang/linuxroot\n- ci: test -os linux cross compilation on macOS\n- ci: test the cross compilation from macos to linux sooner, show more information\n- ci: move the macos->linux check even higher, to make easier testing and diagnosing linuxroot update failures\n- orm: cross compile pg to linux; openssl: make cross compile work\n- ci: use `macos-14` instead of `macos-12` because of https://github.com/actions/runner-images/issues/10721\n- ci: macos_ci.vsh\n- ci: fmt macos_ci.vsh\n- ci: use thew new macos_ci.vsh (github)\n- ci: improve output of macos_ci.vsh\n- ci: extract `ci/common/runner.v`, use it to simplify ci/macos_ci.vsh even more\n- ci: fix spurious failures for printing_struct_with_thread_field.vv on windows\n- net.http: ensure that http.download_file_with_progress/3 works (in a degraded mode), on windows, even without passing `-d no_vschannel`\n- builder: fix cross compiling from linux to windows, when passing -g/-cg\n- docs: update the documentation of the @[console] tag, add advice to use `-subsystem windows` instead\n- Make compare_pr_to_master.v use /opt/homebrew/bin/gtime on macos, and a pure V fallback, not just for windows\n- ci,thirdparty: enable MBEDTLS_THREADING_PTHREAD and MBEDTLS_THREADING_C only on Linux for now (fix windows CI)\n- thirdparty: enable MBEDTLS_THREADING_C and MBEDTLS_THREADING_PTHREAD on FreeBSD too\n- os: use _wputenv instead of _putenv to stay in sync with _wgetenv (fix changing env variables with non ASCII content on windows) (#22920)\n- ci: avoid false positives for the existing PRs, by comment out the task `V self compilation with -usecache` on macos for now (#23145)\n- ci: linux_ci.vsh; cgen: parallel-cc fixes\n- ci: remove extra EOL from linux_ci.yml (#23187)\n- Fix profile time on windows  (#23227)\n\n#### Comptime\n- Add `typeof(var).indirections` and `T.indirections` (#22805)\n- Add `typeof(expr).unaliased_typ` (#22806)\n- Allow sumtype init by variant comptime var `T(v)` / `SumType(v)` (#22664)\n- Fix missing bool AttributeKind.kind (#23159)\n- Fix comptime `T.methods`  with generic types and interface checking with `is` operator (fix #22721) (#22724)\n\n#### Examples\n- Fix some of the instructions in `examples/thread_safety/` (#22571)\n- builder,pref: fix `./v -os linux examples/json.v` on macos (#22651)\n- Add examples/assets/v.svg and examples/assets/v_16x16.svg\n- v.comptime: fix compilation of `examples/veb/veb_example.v` with V compiled with tcc on macos\n- ci: ensure that all examples can still be compiled, by `v` compiled with tcc on macos\n- Add poll_coindesk_bitcoin_vs_usd_rate.v\n- Simplify and reorder output of poll_coindesk_bitcoin_vs_usd_rate.v\n- builtin: fix `v -skip-unused -cc tcc examples/hello_world.v` on *BSD\n- net.mbedtls: bump mbedtls_ssl_conf_read_timeout value to 550ms (tested with `v run examples/net_t.v`)\n- Add a cpu_features/ folder, with several examples, using SSE and MMX assembly instructions (#22645)\n- v.builder: fix `./v -check -stats examples/hello_world.v`\n- docs: add a small sumtype match example in the Match section too\n- Add TextScanner .skip_whitespace/0, .peek_u8/0, .peek_n_u8/0, add examples/mini_calculator_recursive_descent.v (#23001)\n- Reduce completion friction, when doing the very common `v run examples/hello_world.v` in a shell\n\n\n## V 0.4.8\n*28 Sep 2024*\n\n#### Improvements in the language\n- A new `implements` keyword for explicit interface implementation\n- Allow multi return as fn argument (#21991)\n- Define a default sumtype value (based on the first variant type) (#22039)\n- Remove the obsolete .code and .msg fields of IError (#22066)\n- Fix generic lambda type binding and resolution (#22083)\n- Comptime support for traversing the method parameters with `$for param in method.params {` (#22229)\n- Show missing variants in the sum type error\n- A much better and detailed unmatched fn arg error\n- Add support for `@BUILD_DATE`, `@BUILD_TIME` and `@BUILD_TIMESTAMP`, all using v.util.get_build_time(), and overridable through SOURCE_DATE_EPOCH (#22213)\n\n#### Breaking changes\n- Deprecate `x.vweb` and `vweb` in favor of `veb`, a faster, easier, and more stable framework.\n\n#### Checker improvements/fixes\n- Disallow static fn call when receiver type is unknown  (#21970)\n- Fix sumtype checking for voidptr variant (#21955)\n- Check comptime veb.html('index.html') (#21961)\n- Check if a parent generic struct has concrete types or not  (#21962)\n- Add support for static methods in `@FN` and `@METHOD`  (#21990)\n- Add a deprecation warning for `const ()` groups (an error after 2025-01-01) (#22019)\n- Improve `-d trace_checker` and error diagnostic information on compiler panics\n- Add error when initializing sumtype with struct as first type (#22067)\n- Add infix checks for nil  (#22045)\n- Fix map generic fn arg passing (#22071)\n- Disallow using a preexisting const name in a for loop, as either a key or value ident (#22108)\n- Fix generic lambda type binding resolution (fix #22109) (#22115)\n- Fix array alias (#22175)\n- Restrict multiple union fields initialised at once with a nicer checker error, instead of producing an enigmatic error at cgen time (#22196)\n- Fix compilation of vlib/v/slow_tests/assembly/asm_test.amd64.v (regression after dfc0c91)\n- Add missing check for ref passing to non-ref (#22194)\n- Check struct implements non interface type (fix #22200) (#22218)\n- Suggest using the `@[_allow_multiple_values]` attribute, when declaring enums that have duplicate values (#22224)\n- Check for duplicate interface names in the `implements` parts of struct declarations (#22230)\n- Fix missing struct field type checking for type mismatch (ref vs non-ref in `mt sync.Mutex = sync.new_mutex()`) (fix #18088) (#21949)\n- Fix fntype var marked as auto heap (#22290)\n- Check array.delete() argument mismatch (#22307)\n- Add missing check for duplicated items on in expr (fix #22305) (#22308)\n- Disallow infix expr on left side of assign  (#22322)\n- Fix array fixed return type for interface methods (#22320)\n- Check arguments mismatch of array.sorted_with_compare() (fix #22327) (#22328)\n- Add an error for returning an `any` value in pure V code (prevents invalid cgen) (fix #12623) (#22334)\n- Cleanup the checking of array method calls (#22338)\n- Fix voidptr type checking  (#21923)\n\n#### Parser improvements\n- Fix lots of parser panics, discovered through fuzzing with radamsa\n- Improve the error for keyword `lock`, used as a variable name (#21937)\n- Improve the error message position for invalid array attr keys (#21944)\n- Fix const field str() (#21998)\n- Update `@include` in templates, to work with relative paths & prevent recursive calls (#21943)\n- Check fn call args without comma between them (related #22021) (#22075)\n- parser,scanner,ast: make the scanner and parser more robust, by implementing more limits (preventing panics, discovered by fuzzing)\n- Protect against too deep recursion in Expr.pos() calls\n- Check too many layers embedded generic type (fix #22089) (#22091)\n- Cache ident lookups for consts in ast Expr str (#22101)\n- Improve Type and TypeFlag related operations (#22107)\n- Fix parsing map value inside or expr (fix #12164) (#22180)\n- Fix const field str() (#22192)\n- Fix `.${var}` used in a template, compiled by `$tmpl()` (fix #22231) (#22270)\n- Check enum method duplicated (fix #20924) (#22294)\n\n#### Compiler internals\n- scanner: guard against scanner panic, discovered by fuzzing in PR#22016\n- v.builder: show the thirdparty object compilation commands too, when using `-showcc` (when the cache is empty)\n- builder: allow for `v -dump-defines - -check cmd/v`, which is faster, because it can skip code generation\n- Reduce allocations for the most common cases (#22142)\n- transformer: add support for instrumenting the V compiler with `-d trace_transformer`\n\n#### Standard library\n- encoding.base58: fix notice for slice creation (#21935)\n- gg: reset ctx.mouse_d? and ctx.scroll_? at the end of each frame (fix #21945) (#21946)\n- builtin: v_segmentation_fault_handler signal_number i32\n- builtin: fix 'aaaa'.split('aa') (fix #21936) (#21951)\n- builtin: panic on trying to grow arrays with capacity bigger than 2^31, instead of overflowing a.cap (partial fix for #21918) (#21947)\n- gg: add a note that Context.new_streaming_image has to be called after Sokol's setup\n- gg: add more documentation comments for gg.Config (the parameters of gg.start and gg.new_context)\n- regex: fix regex.split() (fix #16876) (#21953)\n- json: increase test cases before enabling sumtype decode in all json libraries (#21958)\n- gg: change the type of gg.DrawImageConfig.rotate from `int` to `f32`\n- gg: deprecate gg.DrawImageConfig.rotate, in favor of gg.DrawImageConfig.rotation, improve the documentation comments (#21963)\n- x.crypto.chacha20: make Cipher struct public (fix #21967) (#21968)\n- tmpl: fix an extra newline in @for; builtin: some i64 fixes\n- gg: add an optional size: parameter to the .draw_pixels and .draw_pixel methods (defaults to 1.0)\n- sokol: update to match upstream at c0e0563 (#21971)\n- Add support for `Any` in `decode_struct`, `encode_struct` and `to_any` (#21972)\n- crypto.cipher: make Stream.xor_key_stream implementers require a mutable receiver (#21974)\n- sokol.audio: fix `./v -cc clang-18 -gc none simple_bytebeat.v` (the audio depends on threads)\n- time: `d`,`c`,`dd`,`ddd`,`dddd` pattern support for parse_format() (#22003)\n- flag: add optional value description to string parameters (#22024)\n- flag: add custom value descriptions for bool, int, and float flags too (#22032)\n- flag: fix assigning to `@[tail]` field when no fields has been matched yet in `flag.parse[T]()` (#22043)\n- crypto: add a crypto.pbkdf2 module (#22047)\n- hash: add more methods to the hash.Hash interface, to match the ones in Go (#22001)\n- arrays: simplify arrays.sum and arrays.reduce (#22076)\n- x.json2: support @[skip] as well (#22077)\n- builtin,thirdparty: fix compilation of libgc with `-cc msvc -gc boehm` (thanks to @Ekopalypse)\n- stbi: change Image.data from voidptr to &u8, to reduce casts (#21977)\n- time: update parse_format comment description in parse.c.v (#22104)\n- vlib: add an `arrays.parallel` module, containing `parallel.run/3` and `parallel.amap/3` implementations (#22090)\n- builtin: support `-d builtin_print_use_fprintf`, make the C fn declarations stricter (#22137)\n- builtin: fix map.clear() not resetting map's metas and keys blocks (fix #22139) (#22140)\n- builtin: fix incomplete m.clear(), allowing the map to have a duplicated entry for its first key (fix #22143) (#22144)\n- builtin: fix m.clear() having different observable behavior to `m = {}`, after multiple iterations of setting keys and clearing (fix #22145) (#22146)\n- builtin: fix bug in .clear() caused by sizeof(u32) being 4, not 2 (fix #22148)\n- flag: add support for parsing `flag.FlagParser` style flags in `to_struct[T]` (#22152)\n- flag: fix parse_bool_value() (#22160)\n- flag: correct bool logic, add test (#22162)\n- flag: fix parsing `flag.FlagParser` style short flags in `to_struct[T]` (#22172)\n- gg: change the type of PenConfig.thickness to f32\n- builtin: remove remaining references to v_calloc in function comments (#22179)\n- builtin: remove string interpolation from panic/1, to be able to use tools like cbmc in more cases (#22182)\n- flag: add a relaxed parsing mode, that turn flag match errors into `no_match` entries instead (#22191)\n- encoding.binary: add `u16`/`u32`/`u64` -> `[]u8` conversion functions  (#22193)\n- crypto.sha1, crypto.sha256, crypto.sha3, crypto.sha512: improve performance for non prod builds, by tagging the block_generic functions with `@[direct_array_access]`\n- builtin: fix string.trim() (fix #13021) (#22205)\n- crypto.bcrypt: reduce runtime cost for running bcrypt_test.v, by reducing the iteration count\n- crypto.scrypt: add a new `scrypt` module to vlib/crypto (#22216)\n- sync.stdatomic: add OpenSUSE paths for libatomic\n- crypto.scrypt: add missing comment of source for test vector (#22222)\n- json: allow passing an anon struct as a decode type (#22228)\n- flag: fix parse_bool_value() with different order short args (fix #22176) (#22242)\n- builtin: drop C in int.v (#22245)\n- strconv: fix format_fl()/format_es() (fix #13210) (#22244)\n- json: fix decoding of structs with embeds (#22264)\n- crypto.rand: add support for convenient generation of a random big integer in the interval `[0, n)` (#22266)\n- json: fix json encode/decode with embed support (#22277)\n- io: add a BufferedWriter and supporting methods (#22265)\n- vlib: add a go like `x.benchmark` module, that estimates automatically how many iterations are needed, to get a statistically significant result (#22215)\n- math: document q_rsqrt\n- io: make buffered_writer_test.v more robust\n- builtin: enable GC lib on rv64 build (#22319)\n- json: support null sum types in decode()\n- crypto: ecdsa module (on top of openssl)\n- bench: crypto/ecdsa.v\n- math.big: fix `a + b` and `a - b`, when the signs are different, add more test cases (#22330)\n\n#### Web\n- Check for using comptime $veb.html()/$vweb.html(), without importing veb or vweb (#21957)\n- net: add net.Dialer and net.Connection interfaces, abstracting the different types of connections, already supported by the V network stack (#21657)\n- net.mbedtls: support Server Name Indication (SNI) (#22012)\n- veb: extract constants into consts.v (#22132)\n- vweb: mark vweb as deprecated in its README, recommending using veb instead (#22131)\n- veb: fix `vweb_livereload` reference to `veb_livereload` (#22171)\n- veb: fix a few minor errors in the README.md (#22177)\n- net.mbedtls: store the client ip (for ipv4), shutdown on handshake failure, in .accept() (#22184)\n- veb: implicit context\n- veb: make implicit context work with custom user types\n- net.websocket: use retrying on EINTR in Client.listen() (#22279)\n- net: allow ipv6 address with brackets (fix #22313) (#22316)\n\n#### Database drivers\n- db.sqlite: add instructions for installing SQLite's amalgamation or development package, if it is missing\n\n#### C backend\n- Fix struct ref field with no ref structinit (#21932)\n- Define a flexible vint_t type (32 bit int on 32 bit systems, 64 bit otherwise)\n- Fix generic sumtype with repeated concrete type (#21948)\n- Fix array.map with closure var fn (#22002)\n- Fix generation of closures from methods on aliases (#22004)\n- Reduce indentation level for generated defer statements\n- Fix selector with interface var (#22006)\n- Fix free method generation for option struct (#22060)\n- Fix fixed array with default init (#22059)\n- Fix for loop with array fixed returned from fn (#22069)\n- Fix free method for option fields (#22070)\n- Fix auto free method for option map (fix #22081) (#22094)\n- Return early from autofree related functions, when -autofree is not used\n- Fix shared object method call (fix #22121) (#22125)\n- Fix array fixed initialization from map indexing (fix #22133) (#22149)\n- Fix generic options with reserved ident (#22164)\n- Fix struct field with default optional value (fix #11119) (#22167)\n- Fix array of fns index call with embeded array index (fix #17381) (#22198)\n- Fix match with mut cond variable (#22207)\n- Fix code generated for indexexpr with complex assigning (#22203)\n- Fix interface type generation for generic struct (fix #22186) (#22189)\n- Fix wrong type of vint_t and const riscv64 (#22251)\n- Fix code for C ident when ptr is expected (#22259)\n- Fix C name mangling with inherited closure vars (fix #22262) (#22263)\n- Fix codegen for alias to charptr passed as ptr (fix #9679) (#22271)\n- Fix codegen for option fntype used in a match (fix #22278) (#22280)\n- Fix option cast from fntype (fix #22283, #22284) (#22285)\n- Fix codegen for method call on rangeexpr (fix #12610) (#22291)\n- Fix operation overload for type aliases of fixed arrays (fix #22297) (#22304)\n- Fix codegen for assign from unsafeexpr resulting fixed array (fix #22301) (#22309)\n- Fix variadic arg var passed to another call which expects variadic (fix #22315) (#22317)\n- Fix aliases of array insert(...)/prepend(...) (fix #22323) (#22324)\n- Fix codegen for interface method call which returns a fixed array (fix #22326) (#22331)\n- Add `asm` to c_reserved, fixes compilation of `struct Abc { @asm int }` (#22340)\n- Fix interface method call after smartcast (fix #17056) (#22335)\n- Fix codegen for address of range (fix #18528) (#22336)\n\n#### vfmt\n- Allow align threshold to be parametrized in calls to add_new_info (#21942)\n- Fix and simplify align of struct fields (#21995)\n- Fix alignment of enumeration types (#21999)\n- Fix enum fields with one empty line (#22007)\n- Fix fmt of enum fields with empty line (#22015)\n- Fix alignment of struct init fields (#22025)\n- Keep empty newlines in between interface fields/methods (#22040)\n- Fix interface fields or methods with empty newlines (#22046)\n- Fix enum/struct_decl/struct_init fields with empty newlines (#22051)\n- Fix interface fields/methods alignment (#22055)\n- Remove the prefixed module name of const names, that are in the same module (related #22183) (#22185)\n- Fix import selective with interface implements (fix formatting part of #22200) (#22209)\n- Add a test for fn with c binding type args (#22212)\n- Fix formating a file in an oscillating manner (fix #22223, fix #22026) (#22232)\n\n#### Tools\n- Implement a `-repeats/-R N` option to `v repeat`, to eliminate another need for platform dependent scripting\n- ci: add hub_docker_ci.yml, for building docker images (triggered manually for now) (#22302)\n- ci: use `docker compose` instead of `docker-compose` (see https://github.com/orgs/community/discussions/116610) (#21992)\n- vrepl: suppress the welcome message, if VQUIET is set (#21941)\n- Make `v where` ignore .git/ folders (they contain binary files); let `-dir .` work recursively, so that `-dir vlib` works\n- Sort the match results in the vwhere test, to make it less flaky (#22033)\n- Add an amalgamate tool and description of usage (#22034)\n- Add a few missing v command entries and their flags in `v complete` (#22041)\n- Colorise the output of cmd/tools/show_ancient_deprecations.v, reduce false positives (#22048)\n- docs: clarify the .precision specification section for string interpolation of floats (#22061)\n- docs: add a copy code function (top/right copy icon) on doc examples (#22114)\n- Allow passing parameters to fuzz_v_parser_with_radamsa.sh, so that it could be run in several processes from the same folder\n- Use separate .autofuzz.log files too for the separate invocations of fuzz_v_parser_with_radamsa.sh\n- Extract .github/workflows/run_sanitizers.sh to ease local testing with different options\n- parser,ast: protect against more overflows/panics, by forcing early returns on deeply nested expressions and scopes (#22098)\n- Improve the output of `v repeat command`, by coloring the `faster/slower` label\n- Add diagnostic in `v repeat` for invalid combinations of -r, -i and -a flags\n- Fix `v doc` truncating code blocks, that lack a specific language (fix #22017)\n- v.util: add get_build_time/0, supporting https://reproducible-builds.org/docs/source-date-epoch/\n- Fix `v doc` not converting `<s>` in plain code blocks into encoded html entities in its .html output\n- ci: run `npx prettier --write **.yml`; ensure it is run on all .yml files, not just the ones in the .github/workflows/ folder\n- docs: add implements keyword for explicit interface implementations (#22214)\n- Make fast_job.v more robust (setup a custom PATH) and informative on fast.v failures (compile it with -g)\n- Make fast.v and fast_job.v more self sufficient\n- ci: add cache and trigger for pushes, in the Hub docker action (#22314)\n\n#### Operating System support\n- docs: streamline the installation instructions and notes for Windows and Ubuntu\n- v.builder: fix errors in cstrict mode on OpenBSD with clang (#22154)\n- thirdparty: fix compilation of programs using miniz.h on macos\n- crypto.rand: fix compilation on macos with `-cc tcc -no-retry-compilation -gc none`\n- thirdparty: fix compilation of thirdparty/mbedtls with tcc on macos m1\n- v.pkgconfig: fix parser, when `includedir=` lines, had trailing spaces (fix `-d use_openssl` for openssl 3.3.2 installed through brew on macos)\n- builtin: fix compilation with tcc on OpenBSD using libgc (#22234)\n- docs: add FreeBSD in cross compilation section (#22249)\n- v.builder: enable LTO for clang on OpenBSD (#22247)\n- thirdparty: fix compilation of programs using miniz.h on OpenBSD (#22254)\n- net: fix compilation on windows (use casts to int for net.error_eintr etc)\n- net: use explicit int casts for net.error_eintr etc in the unix implementation too for consistency with the windows one\n\n#### Examples\n- Remove drag_n_drop.v from the list of examples, that are checked for visual differences with vgret, since it now uses the default gg font\n- docs: add more C interop notes and examples (#21965)\n- cleanup obsolete unsafe{} usages in examples/sokol/sounds\n- cleanup & fix the sound produced by melody.v\n- add a simplified bytebeat player to show how to use sokol.audio, and that does not depend on gg\n- make `rotating_textured_quad.v` compile and run on Android (#21987)\n- veb: change example description, to avoid repetitive wording (ease debugging of issue#22017)\n- eval: fix `./v interpret examples/hanoi.v`\n- add examples/ttf_font/draw_static_text.v, to make it easier to test x.ttf with different fonts, and texts\n- make draw_static_text.v show the font name too, for easier comparisons\n- prevent cliping of long font names in draw_static_text.v\n- docs: add an example on how to use Options/Results, when returning multiple values from a function (#22099)\n- add examples/gg/draw_unicode_text_with_gg.v, for easy comparison of how different fonts and unicode texts will look, when rendered by gg\n- add examples/veb/websocket, to show how to use http connection upgrade to a websocket, from a `veb` route (#22128)\n- migrate vweb examples to veb\n- fix type in veb_example.v\n- add `gc_is_enabled()` check to `2048` to prevent crash in Android emulator (#22274)\n- make `gg/rectangles.v` Android friendly (#22275)\n- make `gg/stars.v` run on android (#22276)\n- examples,os: add an os.asset module, use it to simplify code in examples/, by removing `$if android {` checks (#22281)\n- add a consistent background to flappylearning, shown when the height of the view is very high (on Android)\n\n\n## V 0.4.7\n*26 Jul 2024*\n\n#### Improvements in the language\n- Add support for `-d ident=value` and retrieval in code via `$d('ident', <default value>)`\n- `-warn-about-allocs` for debugging allocations when using manual memory management\n- `@[freed]` attribute for assign statements (for the above mode)\n- Implement `&&=` and `||=` operators  (#21678)\n- Improve C var args interop, allow for `fn f(some int, ...) {` (#21812)\n- A new flag `-n` for skipping notes (similar to `-w` for skipping warnings)\n- Cross compilation to FreeBSD\n\n#### Breaking changes\n**none**\n\n#### Checker improvements/fixes\n- Fix unknown fixed array size for `const n = int(sizeof(u64)); _ = [n]int{}` (fix #21544) (#21548)\n- Fix checking of default field initialisations, that are part of unions of structs tagged with `@[noinit]` (#21587)\n- Disallow sum type with `Result` variants (#21620)\n- Add error for `field map` (i.e. a plain untyped map), used inside a struct (#21625)\n- Fix missing concrete type checking on a generic type specifier (#21614)\n- Fix missing option and result wrong type return type definition (#21626)\n- Turn warnings for private fields into errors (#21296)\n- Support nested labeled for statements (#21658)\n- Fix the return type of overloaded operators, defined on aliases of primitive types (fix #21654) (#21663)\n- Fix match expr with auto promote number (#21696)\n- Fix sorting compare fn with mut reference parameter (fix #21662) (#21706)\n- Fix `$if x {` condition, using `const x = $d('ident', false)` (fix #21709) (#21713)\n- Fix generic variable resolution on generic func return assignment (#21712)\n- Fix result call or_block with multi-statements (fix #21504) (#21717)\n- Allow `\\uxxxxx` in raw strings (#21724)\n- Limit recursion in Checker.ensure_type_exists/2 to 40 levels (it is usually 4 or less) (#21734)\n- Add error for `field [$d('x', 2)]int = [1, 2]!` (#21741)\n- Fix nested if expr method call (#21773)\n- Fix generic inference in if expressions used in assignments (#21781)\n- Disallow nil in non-nil arrays and vice versa  (#21786)\n- Check expr evaluated but not used (fix #21436) (#21816)\n- Fix wrong receiver generic resolution with embed types (#21833)\n- Check mismatch of fn call mut argument (fix #21857) (#21873)\n- Fix global fixed array key resolution when it is a constant ident (#21900)\n- Improve checks for embed in anon struct  (#21877)\n- Fix builtin fn var resolving (#21899)\n- Fix spawn when calling undefined function (#21906)\n- Require enum values to be declared, before using them in other enum values (#21913)\n- Check enum field value duplicate (#21920)\n- Allow embed of type alias anon struct  (#21928)\n\n#### Parser improvements\n- Register selective import aliases as used (#21613)\n- Allow multiple flag values in enum.from() for flag enums (fix #21569) (#21615)\n- Disallow duplicate operator overload  (#21675)\n- Support `[$d('s', 4)]int{}`, move resolving to method on `ComptimeCall` (#21701)\n- Support `$d()` in fixed size array `struct` fields (#21731)\n- Suggest using type alias when defining methods on non-local types (#21803)\n- Sugggest map initialization with the correct syntax  (#21817)\n- Fix parameter collision for generated `@[flag]` enum methods, with modules named `flag` (#21844)\n- Fix high order generic fn resolution (#21871)\n- Fix recognition of `mod.Enum.val` inside fn args (#21908)\n\n#### Compiler internals\n- tools,cgen,pref: add `-coverage` support + `vcover`  tool (#21154)\n- v.utils: allow to set the names of the compared items, when diffing strings (#21650)\n- v.pref: fix regression of command flags not working, when there is a subfolder, named after the command, in the current working folder (#21647)\n- transformer: handle `enum_variant = some_const + 10` (fix #21777) (#21779)\n- v.builder: print the suggestion for using `v xyz` instead of `v xyz.v` just once (#21801)\n- v.builder: improve the C compilation output on cgen errors (#21885)\n- v.scanner: use table lookups for very frequently done character checks (#21931)\n- markused: mark explicitly all used array and map methods with `-skip-unused` (fix #21907) (#21914)\n\n#### Standard library\n- builtin,v: reduce overhead and memory usage for very frequently called methods (#21540)\n- builtin: reduce allocations in s.index_kmp/1 and s.replace/2 (#21561)\n- os: remove mut declarions for unchanged vars in `os_nix.c.v` (#21564)\n- os: make minior improvement to C function semantics and related code (#21565)\n- builtin: simplify splint_nth methods (#21563)\n- toml: fix `@[toml: ]`, support `@[skip]` (#21571)\n- builtin:  update `last_index_u8`, deprecate `index_u8_last` string methods, make consistent with `last_index` (#21604)\n- builtin: implement a JS version of `string.split_any` (#21612)\n- crypto: add a `crypto.sha3` hash and extended output functions (#21664)\n- crypto.sha3: remove unnecessary return at the end of the write function (#21669)\n- builtin: fix string.find_between(), when not found end string return '' (#21670)\n- builtin: add string.camel_to_snake/0 and string.snake_to_camel/0 methods (#21679)\n- cgen,x.json2: fix generic map decoding (#21704)\n- encoding.base32: fix warning of implicit clone of array, by using an explicit unsafe block (#21728)\n- vlib: simplify byte character conditions by using methods like is_capital, is_lower, is_letter etc (#21725)\n- gg: add Context.draw_cubic_bezier_recursive/2 and Context.draw_cubic_bezier_recursive_scalar/9 (#21749)\n- ci: fix deprecations_consts.out (the warning for math.max_i8 is now an error; it was deprecated since 2023-12-31)\n- math: add divide_truncated/2, divide_euclid/2, divide_floored/2 and modulo_truncated/2, modulo_euclid/2, modulo_floored/2 (#21759)\n- math: avoid unused calculations for math.modulo_floored/2 and math.modulo_euclid/2\n- crypto.blowfish: apply `@[direct_array_access]` to very commonly used functions (#21771)\n- encoding.binary: little_endian_f32_at\n- arrays: add arrays.chunk_while/2, where `arrays.chunk_while([0,9,2,2,3,2],fn(x int,y int)bool{return x<=y})==[[0,9],[2,2,3],[2]]`\n- sokol: reduce _SGL_DEFAULT_MAX_VERTICES back to 1<<17 (1<<22 in 811ac12, leads to ~140MB of memory usage for gg/minimal.v, instead of just ~38MB)\n- vrepl: fix os.input() (#21811)\n- Improve consistency and behavior regarding explicit mutability (#21566)\n- builtin: add `pub fn arguments() []string {`; make `os.args` use it, remove edge case in cgen (#21852)\n- builtin: support `-d use_bundled_libgc` to make it easier to debug/upgrade reliably libgc cloned from ivmai/bdwgc (#21869)\n- time: increase http_header_string performance (#21894)\n- builtin: add s.trim_space_left/0 and s.trim_space_right/0 methods (#21903)\n- strconv,math.bits: eliminate bounds checking in commonly used routines\n- arrays: fix arrays.fold, when the `init` value in the call, is an array (#21921)\n- string: fix leak in replace_once\n\n#### Web\n- net.http: change default http.Server listening address to :9009, to avoid conflicts with tools, that start their own http servers on 8080 like bytehound (#21570)\n- net.urllib: update parse host to allow for better error handling (#21602)\n- net.html: quick workaround for a cgen problem for `const x = int(0x80000000)`\n- net.http:  implement http.download_file_with_progress/2, saving each chunk, as it is received, without growing the memory usage (#21633)\n- veb: update import name in docs (#21668)\n- Add `m3u8` MIME type `application/vnd.apple.mpegurl` for multimedia playlists (#21688)\n- veb.auth: use constant time comparision in compare_password_with_hash (#21693)\n- net.http: correct `Response.status()` method comment, to indicate returning of a `Status` enum field, instead of struct (#21735)\n- net: fix TcpConn.peer_ip/0 to only return the ip address, without the port number (#21831)\n- Add mime type `text/x-vlang`, for `.v` and `.vsh` file extensions (#21851)\n- net.conv: add conv.reverse_bytes_u64/u32/u16 (#21917)\n\n#### ORM\n- orm: fix subquery without where expr (#21598)\n- orm: ilike for case insensitive text search\n- orm: update readme with more specifics (#21697)\n\n#### Database drivers\n\n#### Native backend\n\n#### C backend\n- Fix printing of floating point values in asserts (#21538)\n- Fix array fixed initialization on struct from call (#21568)\n- Put the `Interface(unsafe{nil})` change for now behind -experimental (#21593)\n- Fix indexexpr with orexpr (fix #21591) (#21592)\n- Fix generic struct init when it is a reference &T (fix #21594) (#21596)\n- Fix generated code for handling fn call with result/option return on match conditional (#21608)\n- Fix missing call to a function returning option, when called inside a print (fix #21616) (#21623)\n- Support a `-d no_bool` option, for cgen compatibility with the C23 language standard (since `bool` is a builtin type and a keyword in it) (#21637)\n- Fix or expr with non option fn call return (fix #21660) (#21661)\n- Generate pragmas for gcc-14, to make it more relaxed by default. Support `-no-relaxed-gcc14` for turning them off. (#21680)\n- Fix spawn code generated when calling conditional function (fix #19352) (#21681)\n- Fix comptime generic arg resolution (allow several different struct fields in generic functions using comptime) (fix #18110) (#21682)\n- Fix dumping array of reference (#21694)\n- Implement g.trace_last_lines/2 to help debugging cgen problems\n- Support inc cond for c style for loop with alias types  (#21708)\n- Fix fn call with mut reference args (fix #21265) (#21719)\n- Fix auto dereference mut variable in if expr (fix #21309) (#21720)\n- Fix smartcasting a reference to a sumtype value (#21730)\n- Fix assert checking fn option ret with `none` (#21726)\n- Fix generics map with the reference argument (#21737)\n- Fix shortcircuiting of infix and/or expressions (#21740)\n- Simplify in infix_expr_and_or_op() (#21745)\n- Fix reference variable str() method call (#21753)\n- Fix scope command when `$dbg` breakpoint is on or-expr (fix #21772) (#21747)\n- Fix array fixed empty struct code generated on clang (fix #21761) (#21764)\n- Allow alias to array fixed to be initialized like `[n]int{}` (#21785)\n- Fix comptime call argument auto conversion for indexexpr (fix #15232) (#21796)\n- Fix const name without main prefix in `-translated` mode (#21789)\n- Fix closure variable with optional reference params (fix #21827) (#21829)\n- Fix auto str for fn struct member (#21825)\n- Fix option string struct member init with autofree (#21859)\n- Fix fn mut argument of sumtype reference (#21874)\n- Fix generic type init syntax for primitive types  (#21872)\n- Fix missing `&` in string representation of `map[X]&Y` (#21890)\n- Fix optional closure direct call (#21892)\n- Fix wrong missing unsafe block checking when calling generic functions with @[unsafe] attr (#21898)\n- Fix typeof(var.typ) with comptime $for variables (#21901)\n- Fix enum with const value (#21919)\n- Fix generic option/result reference return (#21922)\n\n#### vfmt\n- Allow single line `defer {}`, just like `or {}`\n- Don't break `it` variable name in match expression function calls (#21600)\n- Exit with error code if encountering diffs with `-diff` flag (#21603)\n- Add fn_with_mut_ref_params_keep.vv (#21711)\n- Implement wrapping function's super long arguments  (fix #15545, fix #21643) (#21782)\n- Keep manual newlines after fn parameters in fn declarations, do not auto wrap (#21795)\n\n#### Tools\n- Fix spurious ending quote in the output of show_manual_release_cmd.vsh\n- Dockerfile.alpine: update to alpine:3.20, add more tools like gdb, libunwind, gc, to ease producing and debugging static executable in more situations (#21583)\n- Add `v download URL` for downloading single files, to avoid curl/wget etc, which are not available uniformly. (#21597)\n- ci: use shebang with better portability in shell scripts, format shell scripts (#21605)\n- Don't write vpm logfiles in CI runs (#21649)\n- ci: make vmodules_overrides_test.v failures more informative\n- Fix measurements for `./v repeat \"./vold -o x project/\" \"./vnew -o x project/\"`\n- Make the summary output of `v repeat` more informative\n- Disallow self referencing function alias types like `type FnType = fn(string) FnType` and `type FnType = fn (FnType) string` (#21733)\n- vrepl: fix method call (fix #21788) (#21792)\n- ci: restore v_apps_and_modules_compile_ci.yml (#21791)\n- vrepl: fix output of the fn call (related #21792) (#21800)\n- vrepl: fix variable name starts with print (#21806)\n- v.pref: make pref_test.v be less sensitive on the specific C compiler used as a backend (#21813)\n- vrepl: fix arbitrary script execute (#21818)\n- ci: disable c2v_ci.yml temporarily, until it is fixed\n- vrepl: lots of fixes in REPL\n- Add a TOTAL line, to the output of -show-timings, to minimise the need for external tools on windows (#21847)\n\n#### Operating System support\n- veb: support sendfile() syscall on FreeBSD (#21541)\n- os: use 1 instead of C.SW_SHOWNORMAL to workaround a cross compilation issue from linux to windows\n- v.builder: minimise the amount of linked libs for cross compilation to FreeBSD\n- v.builder: support downloading the FreeBSD cross compilation files on first use\n- Add a test for crosscompiling hw, on linux and macos, to FreeBSD (#21553)\n- vlib: make `./v -Wimpure-v -W test vlib/` pass on Linux (#21554)\n- os: fix debugger_present() for non Windows OSes (#21573)\n- ci: extend coverage, move app test from macos_ci to v_apps_and_modules_ci (#21584)\n- gc: fix tcc on macos\n- os.font: return the \"segoeui.ttf\" font, if its file exists on Windows (#21655)\n- readline: fix s := read_line('Message\\nName:') on unix/linux (#21930)\n\n\n\n## V 0.4.6\n*20 May 2024*\n\n#### Improvements in the language\n- Experimental `x.vweb` is now `veb`, the official and recommended way to build web apps in V. Built on top of pico.v.\n- autofree: -print_autofree_vars command line flag for printing variables autofree couldn't free\n- Add `@VMODHASH` comptime variable to store the commit sha of a V module (#21091)\n- Fix sumtype support for option variant types (#21101)\n- Utilize new diff functions in errors (expected/found) (#21431)\n- Add @[_linker_section] for global variables\n\n#### Breaking changes\n- checker: disallow initializing private struct fields outside structs module (#21183)\n\n#### Checker improvements/fixes\n- Ambiguous expression notice for `& << >>`, similar to `&& ||`\n- Disallow using aliases of ?Type as !Type (#21128)\n- Fix option checker arg validation for ptr passing on non expected ptr (#21087)\n- Optimize option and result type check, add more typinfo to error details (#21105)\n- Move error handling for `any` type to the checker to resolve parsing issues (#21146)\n- Move error handling for user defined type duplicates to the checker to resolve parsing issues (#21147)\n- Detect redundant ref when assigning call expr with ref return (#21141)\n- Fix multi return using nil and voidptrfix (fix #17343) (#21144)\n- Fix C struct embedded init fields checking (#21137)\n- Remove resolved vfmt workaround and TODO (#21175)\n- Move more match validation from the parser into the checker, add error for match without branches (#21181)\n- Improve the error message for an unknown type (#21207)\n- Allow passing `none` to `fn f(arg ?&Type) {` (fix #21213) (#21231)\n- Fix -parallel-cc regression (part 1, workaround .filter(fn[c]) used in checker/orm.v) (#21238)\n- Detect and error on unreachable code in loops, after `continue` and `break` statements (#21294)\n- Disallow `Result` callbacks functions like `map/filter/all/any` (#21055)\n- Fix missing check for or expr on string interpolation (#17566)\n- Allow pass array as mut param to spawn fn (#21283)\n- Turn array assign warning into error (#21341)\n- Ignore last semicolon on or-expr (#21361)\n- Disallow structs with `@[params]` attribute as mutable function parameters (#21206)\n- Set auto Return pos correctly; cgen: autofree fix for optional returns\n- Disallow invalid ptr operations  (#21515)\n- Fix wrong checking for heap struct (#21511)\n- Allow alias enum flagged to have bit operations  (#21532)\n- Simplify, utilize pref.vroot (#21096)\n- Fix option interface member checking when `none` is passed (#21509)\n\n#### Parser improvements\n- Fix option as possible match case for sumtype (#21079)\n- orm: disallow invalid infix for where clause in `delete` and `update`  (#21113)\n- Fix case of falsely registering imports as used, remove unused imports (#21156)\n- Remove redundant comments_mode field (#21198)\n- Update file path fields; use more expressive name for file path, remove obsolete `file_name_dir` field (#21202)\n- Add missing docstrings for vlib/v/ast/comptime_const_values.v  functions (#21219)\n- Allow struct init on `for in Iterator{} {` (fix #21179) (#21282)\n- Fix `for x in Iterator{} {`, when there are no field initialisations (#21333)\n- Add check for result type on chan init (#21363)\n- Fix comptime panic for `$tmpl(\"x.html\")`, when the template file contained % at the end (#21402)\n- Parse string and array typ idx of `ScopeVar` and `Ident` (#21523)\n\n#### Compiler internals\n- v.util: use tmp instead of cache dir for temporary diff files (#21075)\n- v.util: fix module lookup if module import parts end with the word `modules` (#21083)\n- v.util: update `githash` to be able to get the githash of every passed project (#21178)\n- v.util: improve detection for opendiff when automatically searching difftools (#21241)\n- v.util: improve color_compare_files (#21247)\n- v.util: improve find_diff_cmd: don't add spaces to result without env opts (#21242)\n- v.util: fix diff coloring, add test (#21260)\n- v.util: polish off diff utils after recent updates and fixes, add doc comments to pub fns (#21275)\n- v.builder: suggest using `v wipe-cache`, when the object files are not recognized\n- pref: be more conservative when generating code using `-cross`, allow for `$if cross ? {`\n- builder: use cc enum in CcompilerOptions, fix cc detection, enable cc guessing without prod flag (#21370)\n- pref: fix version flag handling (#21377)\n- pref: make minor performance related changes / simplify (#21379)\n- builder: simplify generic cc detection (#21380)\n- pref: extract architecture related code into `arch.c.v`; rename `pref.c.v` to `pref.v` (#21387)\n- pref: update `os_from_string`, add missing `qnx`, remove deprecated wasm options that used `-` instead of `_` (#21390)\n- v.util: rewrite diff module, deprecate old functions (#21403)\n- v.util: fix color when auto tool is `diff` (#21435)\n- v.util: make diff_test.v more robust to the color settings for the chosen local diff tool\n- v.util: fix performance with `v test-cleancode`, when a slower diff tool is installed (#21447)\n- v.util: remove fast path in `diff.compare_text` (#21458)\n- v.pref: error for `v file.v --unknown-option` (#21391)\n\n#### Standard library\n- builtin,dlmalloc: fixes for `v vlib/v/gen/c/coutput_test.v` for gcc14.1, which is stricter\n- Min window width and height\n- builtin: str.last_index(); pref: hide-auto-str;\n- toml: update the alexcrichton and BurntSushi repos to their successors toml-rs, and toml-test, record new exceptions (#21152)\n- breaking,vlib: update handling of imports whose symbols are not directly used in imported file, remove `pub const is_used = 1` workarounds (#21160)\n- json: allow `i32` decoding and encoding (#21162)\n- json2: add ability to decode arrays (#21163)\n- json2,checker,toml: allow field.typ compile-time checking with MatchExpr and add array of option checking (#21171)\n- gg: draw_text with custom fonts\n- x.json2: add a way to decode an array (#21186)\n- os: clarify some doc comments (#21209)\n- os: fix double free in os.get_raw_line() (used by os.input), with `-autofree` (#21204)\n- time: extract Duration related code into duration.v (#21229)\n- builtin: implement an `at_exit(cb)` wrapper for C.atexit (part 1) (#21254)\n- os: format readme, fix markdown inside html (#21286)\n- time: update unix time acces, fix issues related to deviating unix times (#21293)\n- vlib: refactor empty string checks to use `s == ''` or `s != ''`, instead of `s.len == 0` (#21300)\n- cli: update `command_test.v` (#21307)\n- cli: extend control over defaults (#21308)\n- thirdparty/sokol: bump _SGL_DEFAULT_MAX_VERTICES and _SGL_DEFAULT_MAX_COMMANDS again; mark them with `__v_ start` and `__v_ end`\n- sync: add Gentoo paths for libatomic\n- sync.stdatomic: add flag lines for gcc 14 too\n- gg: make `PenConfig` fields public (#21353)\n- builtin: fix undefined read s[0], from ''.is_lower() and ''.is_upper() in c7af2c2\n- builtin: fix empty string lower / upper assert (#21358)\n- cli: simplify flag parsing (#21392)\n- os,runtime: workaround for v.c generation instability\n- datatypes: fix for set `-` operator, union and intersection, now they no longer change the receiver (fix #21315) (#21362)\n- sync.stdatomic: add paths for compilation with musl on Gentoo (#21400)\n- os: fix os.execute stderr redirection (fix #20986) (#21404)\n- time: fix the string representation of a negative Duration (#21407)\n- cli: make program outputs using the cli module testable in `cli/testdata` (#21456)\n- math.unsigned: permit _ separators in Uint128 decimal strings passed to uint128_from_dec_str (#21461)\n- cli: fix default flags when their command equivalents are disabled (#21469)\n- toml: simplify `decode_quoted_escapes` (#21472)\n- os: fix join-path (#21425)\n- builtin: simplify MessageError.msg() (#21524)\n- all: replace usages of C.atexit(cb) with `at_exit(cb) or {}` (part 2) (#21263)\n- math.unsigned: fix some Uint256 bugs and add tests (#21528)\n\n\n#### Web\n- Update `mbedtls` to latest compatible version v3.3.0 (#21118)\n- veb.auth: a minor find_token fix\n- Improve descriptions (#21155)\n- ci: change listen ports in vweb_should_listen_on_both_ipv4_and_ipv6_by_default_test.v for both vweb and x.vweb, to reduce probability of network errors\n- ci: mark both vweb and x.vweb versions of vweb_should_listen_on_both_ipv4_and_ipv6_by_default_test.v as flaky\n- breaking,net.ftp: allow to choose a different port than port 21 (change FTP.connect to accept `host:port`, not just a `host` address) (#21185)\n- x.vweb: accept query params as method arguments (#21201)\n- net.http.file: support index_file (`index.html` by default), and auto_index (true by default) parameters to file.serve()\n- veb: copy x.vweb to veb, and make it work with comptime\n- ci: fix the ubuntu-docker-musl job by skipping veb_app_test.v\n- pref: support a shortcut: `v -http` for `v -e \"import net.http.file; file.serve()\"` .\n- net: add a .port()! method for net.Addr (#21412)\n- net: improve error message in .port()\n- picoev: handle `EAGAIN` or `EWOULDBLOCK` quietly (#21480)\n- net.unix: remove debug/trace eprintln (#21517)\n\n#### ORM\n- Add error for unchecked option multi return types, fix undefined behavior (#21106)\n\n#### Database drivers\n- db.mysql: fix invalid memory access in exec_one for returned rows with NULL fields (#21317)\n\n#### C backend\n- Enable autofree for option (#21051)\n- Force C struct types which does not implement str() to be passed as ptr (#21054)\n- Improve diagnostic information for ORM queries with invalid types\n- Allow static call on generic type (#21071)\n- Fix code generation for a struct field, having a type of fixed array of options `field [5]?Type` (#21082)\n- Add the `_M_ARM64` macro to endianness check (#21109)\n- Fix return code when returning interface result type (fix #21115) (#21130)\n- Fix const initialized with array (#21131)\n- Fix infix array heap comparison (#21145)\n- Fix C struct sumtype support (#21129)\n- Add `autofree` comptime check (#21197)\n- Fix comptime `$if !autofree {` (#21218)\n- Allow `for mut v in [12, 13, 14] { v+= 2 }`  (#21237)\n- Allow op overload for type with generic parent  (#21262)\n- Optimize .map(), .any(), .filter() and .all() when using closure (#21256)\n- Fix `none` passed to a generic option cast expression (fix #21215) (#21276)\n- Fix `-fsanitize=undefined` used with `[]int{}.sort()` (#21331)\n- Fix `myarr [1]C.mytype` fixed array fields, for `pub type C.mytype = voidptr` (#21266)\n- Fix comptime ref argument passing (#21335)\n- Use the real C line number instead of `#line 1000000 ...` in the C footer with `-g` (#21388)\n- Fine tune the line count reset for the C footer (fix off by 1 error in 00dd0bf)\n- Fix array.delete_last call generation (#21439)\n- Fix option ptr unwrapping (#21415)\n- Fix C struct option alias printing (#21496)\n- Handle auto deref var for index when the array element is an interface or a sumtype (#21491)\n- Fix C struct init when it has default expr (#21510)\n- Fix sumtype field naming (when they are the same as a C keyword) (#21527)\n\n#### vfmt\n- Update determining of struct field comments (#21066)\n- Inform about invalid interop function bodies instead of removing them (#21070)\n- Parse methods on JS interfaces, write JS method bodies (#21088)\n- Improve module detection when formatting imports (#21134)\n- Don't change paths when formatting imports (#21148)\n- Use fixed size array for max_len const (#21140)\n- Simplify const name formatting (#21143)\n- Improve import processing, add test (#21172)\n- Fix duplicates remove import comments (#21177)\n- Extend import import alias reference map for submodules (#21200)\n\n#### Tools\n- doc: fix vup/vself replacement scripts (#21092)\n- Prevent module updates during `v build-tools`, when VTEST_SANDBOXED_PACKAGING is set (#21094)\n- ci: update the reference to the v-analyzer repo\n- ci: retry all setup commands that need network access, till they succeed (so the CI jobs have less false positives) (#21103)\n- changelog: escape `@NAME` entries, to avoid mentioning unrelated github accounts\n- Add `v retry apt update`, intended to replace the retry.sh script, for more robust CI jobs (#21104)\n- vpm: show the final path where a module is installed, improve color contrast for white on black terminal sessions\n- vet: print help when passing no files or `--help`/`-help` flag after vet command (#21108)\n- Fix `v build-tools` (it skipped all tools in subfolders of cmd/tools/ after 6a4f293) (#21120)\n- .gitignore: ignore generated .NET files in bench/vectors (#21136)\n- vet: optimize performance for path detection, when vetting files (#21139)\n- vet: allow to overwrite excluded dirs (#21142)\n- ci: increase wait time for the xvfb check, to reduce the chance of false positives\n- Fix `v run cmd/tools/measure/parser_speed.v file.v`\n- Add `v run cmd/tools/measure/fmt_speed.v file.v`\n- ci: move build step for VPM site, into apps and modules ci, add concurrency config (#21191)\n- tools.vpm: debug-log to `$VMODULES/cache/vpm.log` if not running in debug mode (#21192)\n- vpm: optimize performance by adding filter when cloning (#21216)\n- vdoc: don't add _docs directory when an out path is specified (#21233)\n- ci: prefer dedicated tiggers for platform workflows, so sporadic fails can be retried quicker (#21251)\n- v.util: improve code related to diff tool specified via environment, add check if the diff tool exists (#21240)\n- vpm: check for git version before adding `--also-filter-submodules` flag (#21259)\n- ci: add logging to .github/workflows/retry.sh\n- Revise `vtest-self.v`: remove dead paths, fix json2 essential test path (#21267)\n- Add check for unavailable files in vtest (#21272)\n- ci: reactive app prod builds (#21295)\n- ci: add a m1 runner for testing the prebuilt zips too\n- ci: add workflow_run: event in prebuilt.yml\n- ci: simplify prebuilt.yml, make it usable for manual runs too\n- vpm: fix regression, so `v install sdl && v run ~/.vmodules/sdl/setup.vsh` works again\n- ci: fix outdated_test.v (--unshallow is not needed now)\n- ci: continue testing independent V apps, even if one fails, to get feedback for breaking changes faster (#21302)\n- ci: optimize apps and modules (#21303)\n- ci: test `v ~/.vmodules/sdl/setup.vsh`, to prevent future vpm regressions (#21306)\n- ci: prevent unintended deployment workflow steps (#21313)\n- Add a 2024.html page to https://fast.vlang.io/\n- vdoc: rewrite and extend vdocignore (#21314)\n- ci: fix the commit labels for the vc repo\n- Support `v run cmd/tools/oldv.v --show_VC_commit weekly.2024.03`\n- ci: use latest upstream `discord.v` in apps and modules test (#21322)\n- vdoc: remove obsolete entries from `.vdocignore` (#21320)\n- v: update linguist languages, add .vdocignore (#21321)\n- ci: update deployment workflow (#21323)\n- Allow for selectively running `v test-self vlib/` and `v test-self cmd/` (#21326)\n- Rewrite test-self arg handling (#21327)\n- ci: restore `v install elliotchance.vsql` in v_apps_and_modules_compile_ci.yml\n- ci: use `v retry -- cmd` to replace `.github/workflows/retry.sh cmd`, where possible in `v_apps_and_modules_compile_ci.yml` (#21336)\n- ci: update workflow conditions (#21338)\n- Improve `v symlink -githubci` diagnostic message, when used outside CIs or with sudo (#21340)\n- ci: update detection of workflow cancellation scenarios (#21342)\n- Fix compiling vwhere with `-cc gcc -cstrict` (#21347)\n- ci: remove the separate `-gc boehm` job (since `-gc boehm` is the default now) (#21352)\n- ci: add a separate cmd/tools testing job (#21344)\n- Update fast.v and fast_job.v to update docs.vlang.io and fast.vlang.io on each commit to master.\n- Make fast.v more robust to independent remote changes in vlang/docs\n- Utilize environment specific files for vsymlink  (#21360)\n- ci: update `binary_artifact.yml` (#21364)\n- ci: add docker to tools workflow, update ignore paths (#21368)\n- ci: split up vsl / vtl run, reducing the tool change CI time from ~19min to ~10min (#21372)\n- ci: fix binary_artifact.yml (#21373)\n- Refine `check_os_api_parity.v` (#21371)\n- ci: update native backend ci matrix (#21375)\n- ci: update symlink ci, add matrix (#21376)\n- ci: workaround defer codegen failing with nested if blocks and -cstrict in vdoc_file_test.v\n- ci: update detection of accidentally added gpl licenses (#21384)\n- ci: set cancel-in-progress to false in bootstrapping_ci.yml to avoid false positives\n- ci: do trigger bootstrapping_ci.yml periodically, but just on changes\n- ci: speed up bootstrapping_ci.yml, by using the default tcc when possible\n- ci: update `bootstrapping_ci.yml` trigger paths (#21394)\n- ci: pass a good commit to oldv.v in `bootstrapping_ci.yml` (#21393)\n- Be more verbose when doing `v up` in V folder produced by extracting a .zip release file\n- Exclude thirdparty/tcc from the git clean operation, that vup does in case of a missing .git folder\n- Protect from cleaning during `v up`, only ./v , not any matching folder\n- Use proper ignore/exclude patterns in the git clean, that `v up` does\n- Use more meaningful names in vup.v\n- Be verbose, when a git commands that `v up` executes fails\n- ci: add a v-up-works-ubuntu job, to ensure more robust `v up` runs (#21401)\n- ci: ensure v master is available when trying to check out its commits to build oldv (#21414)\n- Rewrite vet error handling (improve parser performance extend vvet) p1 (#21417)\n- Move dynamic const array check from parser into vet (#21423)\n- v.help: update help for `fmt` (#21430)\n- Move array_init_one_val checks from parser into vet (#21422)\n- Remove `vet_errors` and `vet_notices` from parser (#21424)\n- ci: temporary fix for gitly compilation\n- Remove vetting for spaces after / before parens (#21437)\n- Add `.github/workflows/show_manual_release_cmd.vsh`, to make cross platform testing of the release process easier\n- ci: merge docker_alpine and docker_ubuntu workflows in `docker_ci.yml` (#21446)\n- Move now obsolete vlib vet module to cmd vet (#21445)\n- Use `parse_file`, remove `parse_vet_file` (#21444)\n- ci: update binary artifact workflow, add matrix (#21378)\n- ci: add workflow_dispatch: to gen_vc_ci.yml\n- ci: fix vinix_ci.yml by using `./v symlink -githubci` in vinix_ci.yml\n- ci: port changes from Vinix's check.yml at 8231e569 to vinix_ci.yml\n- tools.vet: move error methods to `vvet/errors.v` (#21449)\n- ci: reduce false negatives for tcp_test.v, retry it 3 times before failing\n- Improve performance of `v test-cleancode` and `v fmt -inprocess -verify .` (#21450)\n- Make `./v symlink` work platform independent in CI (part 1) (#21453)\n- ci: replace .github/workflows/retry.sh usages in the CI with the shorter `v retry --`, move `v test-cleancode` upwards to save time for unformatted PRs (#21452)\n- Capitalize information output of `v up` (#21464)\n- ci: use `v symlink` without `-githubci` for regular symlinking (#21455)\n- ci: add a linter for the .yml workflow files (#21459)\n- ci: update symlink ci, extend tested cases (#21466)\n- tools.vet: update diff comparison in `vet_test.v` (#21457)\n- Call mkdir_all before set_output_path to avoid a vpm panic when ~/.vmodules/cache does not exist (#21463)\n- ci: make issue template title consistent, fix linter error regarding labels (#21460)\n- tools.vet: reduce nesting in `vet_fn_documentation`, skip vetting empty lines (#21465)\n- Print info to use v symlink instead of `v symlink -githubci` (#21471)\n- Move _test.v files for vdoc at the same level (#21473)\n- ci: update the helper script, for getting the most recent sqlite-amalgamation-3380200.zip (#21474)\n- vdoc: fix handling of .vdocignore files in subdirectories (#21514)\n- ci: run build-module-docs, when changes to the source of the `v doc` tool happen too\n- ci: use g++ not g++-11 in misc-tooling (g++-11 can not be found and installed on the CI runner anymore for some reason)\n- ci: update g++ to g++-10 in other_ci.yml, add workflow_dispatch: trigger for easier local future diagnostic\n- vdoc: improve vdocignore file handling by walking all .vdocignore sub-paths in IgnoreRules.get, add test (#21521)\n- ci: run `v fmt -w cmd/tools/vdoc/vdoc_test.v`\n- ci: make sure that unformatted code in just cmd/ is not allowed\n- ci: mark again tcp_test.v as flaky (it had 3 unrelated failures on the CI over the last week)\n- v: vet for empty string conditions (#21529)\n- tools.vet: add notice for empty strings conditions (#21421)\n\n#### Operating System support\n- ci: improve test robustness on windows (#21116)\n- v.pkgconfig: add pkgconfig path `/usr/libdata/pkgconfig` for FreeBSD base packages (#21151)\n- v.util: add diff tool color support detection (tested on linux and freebsd) (#21244)\n- v.util.diff: return diff options with the diff command for FreeBSD/OpenBSD (#21271)\n- v.pkgconfig: fix load_paths with `;` split char on windows (#21291)\n- Fix vpm on macos, when using the bundled git executable (#21292)\n- ci: fix the bundled tcc for macos arm64 (#21299)\n- ci: update the runner for build-macos-arm64 to `macos-14` too, so it runs on M1\n- Fix hot code reloading on windows (#21351)\n- Fix building vpm on the FreeBSD instance, that runs fast.v\n- Fix `v install` for the FreeBSD instance that updates docs.vlang.io .\n- ci: use macos-13 for cross_ci.yml to force the old non m1 runner\n- v.builder: update macos->linux cross compile message (~22MB -> ~77MB)\n- v.pref: fix new pref test on FreeBSD (#21385)\n- ci: stop earlier on vc/v.c files, that may break on systems != linux (#21397)\n- Fix compilation on macos-arm with `-cstrict`; run macos ci also on the arm runner (#21408)\n- ci: use `v` instead of `./v` in the platform linux/macos/windows/_ci.yml files (#21454)\n- ci: add a retry to vcreate_init_test.v (it is sporadically flaky on macos)\n- sync,os,thirdparty: fix cross compilation from macos to windows (#21484)\n- os: rename os_structs_stat_windows.v to os_structs_stat_windows.c.v to fix `v -Wimpure-v -os windows vlib/os/os_stat_test.v`\n- Default to `-cc clang` on FreeBSD in `cmd/tools/vtest_test.v` (#21534)\n\n\n\n## V 0.4.5\n*20 March 2024*\n\n#### Improvements in the language\n- Add map update-init syntax: `new_map := {...old_map, 'k1': 1, 'k2': 5}` (#20561)\n- Improve coroutines, Photon vcpu creation, coroutines + GC fixes (#20549)\n- Update Boehm GC libs/headers to the latest version 8.3.0 (#20772)\n- $dbg statement - native V debugger REPL (#20533)\n- Implement `@[_linker_section]` attribute (#20629)\n- Enable `@[export]` for global variables too (#20649)\n- Add callstack support on v.debug (#20680)\n\n#### Breaking changes\n- sokol: the sokol wrapper was updated, to match its upstream version at commit 058a4c5, several of its APIs no longer exist\n- templating.dtm: compile_template_file is no longer public\n- v.trace_calls: `pub fn on_c_main() {`, is now `pub fn on_c_main(should_trace_c_main bool) {`\n- v.transformer: Transformer.fn_decl is now Transformer.fn_decl_trace_calls\n- x.vweb: Context.redirect(url string, redirect_type RedirectType) is now Context.redirect(url string, params RedirectParams)\n\n#### Checker improvements/fixes\n- Check invalid lambda expr (#20461)\n- Fix comptime if with comptime smartcast (#20466)\n- Fix anon struct init with const fields (fix #20452) (#20463)\n- Disallow `option` or `result` return type, for infix operator overloading (#20494)\n- Cleanup the const variable evaluate for fixed array fields of structs (#20503)\n- Fix missing check for struct initialization with `@[noinit]` attribute, through using `T{}` (#20516)\n- Fix mark methods into used-list, when generics as receivers (fix #20509) (#20527)\n- Modify comments on generic receiver type storage (#20539)\n- Fix checking give const map as default or init value to struct fields (fix #20512) (#20546)\n- Fix return map index with or_block (#20544)\n- Cleanup the generic tests (#20553)\n- Fix `@[deprecated]` attribute for consts (fix #20523) (#20550)\n- Cleanup in method_call() (#20554)\n- Disallow `non_opt_array << optvalue` (#20573)\n- Fix non dereferenced enum in match statements (fixes #10045) (#20591)\n- Fix .variant smartcast on non-comptime variables (#20575)\n- Disallow static maps: `mut static x := map[string]int{}` (#20596)\n- Allow `#define X` and `asm riscv64 {}` blocks in .v files, with `-freestanding` (make embedded usecases easier)\n- Add cast overflow checks (#20641)\n- Disallow assigning none to _ (#20646)\n- Fix checking for option matching with non-option (#20673)\n- Disallow `(x) := 10` (#20695)\n- Disallow `none` as match cond (#20688)\n- Fix comptime ident checking on defer stmt (fix #20719) (#20723)\n- Add error for `x as Y.field`, suggesting using `(x as Y).field` instead for clarity (#20725)\n- Disallow sum type holding alias ptrs (#20786)\n- Optimise out calls to `arg_typ_sym.embed_name()` when there are no errors (#20820)\n- Fix if branch option type mismatch (fix #20809) (#20830)\n- Fix auto deref arg when fn expects ref (#20846)\n- Fix struct field init with generic fn variable (fix #20847) (#20878)\n- Cleanup in assign_stmt() (#20880)\n- Check assigning immutable reference struct field (fix #20814) (#20883)\n- Fix struct field init with generic anon fn (add the test from #18294) (#20888)\n- Fix checking match branch call expr twice (#20910)\n- Support `Flags.bit ^ Flags.bit1` and `~Flags.bit` (flagged enums) (fix #20925) (#20929)\n- Fix some specific interface generic inference within generics struct and method (#20932)\n- Remove notice when shifting signed int for `@[translated]` (#20935)\n- Silence \"assigning 0 to a reference field\" and \"uninitialized fn struct fields\" notices for `@[translated]\\nmodule ...` files (#20938)\n- Fix missing check for interface cast of option type (#20961)\n- Silence more warnings for `@[translated]` files (#20964)\n- Fix comptimeselector passing to generic argument (#20985)\n- Remove unnecessary string interpolation in deprecation method calls (#21007)\n- Disallow void return value lambdas in array.map method calls (#21011)\n- Cleanup and simplify `check_ref_fields_initialized` methods (#21016)\n- Cleanup and simplify struct processing p1 (#21009)\n- Add support for deprecation messages for structs and struct fields (#21017)\n- Cleanup and simplify struct processing p2, extend test (#21025)\n- Fix undefined reference to interface struct field regression (after #21025) (#21030)\n- Add test for interface embedding and interface with erroneous implementation (test related to #21030) (#21033)\n- Disallow `Optional` and `Result` high val in a `for x in low..high {` loop  (#21043)\n- Fix missing incompatible pushval type for chan <- operator (#21040)\n\n#### Parser improvements\n- Fix close_scope() missing, when field.name is `sort` or `sorted` (fix#20436) (#20485)\n- Check non-generic interface defining generic method (#20545)\n- vast,ast: output map init update expression (#20574)\n- Implement `MyEnum.from(1)!` generic static method (#20411)\n- Fix `MyEnum.from(0)!`, implement `MyFlaggedEnum.zero()` (#20623)\n- vfmt,parser: keep the original import name in ast.Import, and use it without modifications for paths unders ~/.vmodules\n- Allow double quotes in `@include` template directives (#20628)\n- Fn type declaration does not check already registered name (#20732)\n- Fix global const ordering with string inter literal (fix #20760) (#20770)\n- Disallow option alias with option parent type  (#20769)\n- Make Scope.find methods more robust, when called on default initialised `scope &Scope = unsafe { nil }` fields (#20774)\n- Fix parsing of cgen.v, in normal mode, when the table is empty (no files in `builtin` are preparsed) (fix #20606) (#20611)\n- Fix infinite loop in Parser.sql stmt in `-silent -print-watched-files` mode (used by `v watch`) (#20873)\n- Disallow defining map key more than once  (#20905)\n- Fix formatting comptime if expr, after inc expr (fix #20927) (#20931)\n- Fix for comptime with fully type name (fix #20948) (#20988)\n- Allow lock prefix instructions and numbered reg in inline asm blocks (#21022)\n- Add better error for mut variadic fn argument  (#21063)\n\n#### Compiler internals\n- v.util: make launch_tool failures more detailed (for the `Text file busy; code: 26` case), bump tool_recompile_retry_max_count from 3 to 7\n- v.util: make launch_tool more robust, when multiple `v -b js file.v` commands are run at the same time (all trying to recompile the JS backend program) (#20631)\n- builder: allow for `./v -freestanding -cc riscv64-elf-gcc -d no_main -no-builtin -no-preludes -showcc -keepc x.v`\n- pref: support file_notd_freestanding.v + file_d_freestanding.v, remove dependency to `os`, of $embed_file(), when compiling with -freestanding (#20712)\n- v.builder: reduce the default noise from successfully rebuilding cached thirdparty object files\n- pref: allow fetching the photonwrapper .so (for the coroutines) with curl too, or print details for manual download (#20855)\n- scanner: disallow a shebang line, that is not at the top of a file (#21029)\n- strings.textscanner: fix off-by-one error in skip method (#21045)\n\n#### Standard library\n- x.crypto.chacha20: speed up the core functionality of the ChaCha20 stream cipher (#20470)\n- log: enhance log time format setting (#20484)\n- encoding.csv: add a new utility fn `new_reader_from_file/2` (#20530)\n- readline: add completion support (#20559)\n- builtin: add `is_hex()`, `is_int()`, `is_bin()`, and `is_oct()` methods to the string type (#20540)\n- builtin: add empty string verification for the new string .is_oct() etc methods, suggested on PR #20540 (#20564)\n- json: fix struct with option enum field (fix #20597) #20597\n- x.json2: fix panic on calling json2.decode of an optional enum (fix #20593) (#20603)\n- vlib: add a compress.zstd module (#20616)\n- io: ensure BufferedReader.read_line() returns `io.Eof`, instead of `error('none')` (#20619)\n- log: add support for l.set_short_tag/1 (#20652)\n- Update error checking for new error io.Eof (#20656)\n- io: allow BufferedReader.read_line() to accept custom line delimiters (#20655)\n- builtin: implement unbuffer_stdout/0 (#20662)\n- x.crypto: add sm4 module (#20651)\n- crypto.aes: optimise performance (#20674)\n- os: add proper process termination with p.signal_term() (#20671)\n- os: simplify and unify os.join_path and os.join_path_single, and add more tests (#21494)\n- bitfield: enhance operation with multiple flags (#20683)\n- os: fix File.read() in JS backends (fix #20501) (#20633)\n- os: add error_posix() and error_win32() for explicit platform error handling and default behavior (#20694)\n- log: implement set_always_flush/1 for log.Log, log.ThreadSafeLog and log.Logger (#20698)\n- x.vweb: error() and simpler redirect(); comptime: a clearer error\n- builtin: add a string.u8_array() method (#20736)\n- os: add os.stat() and helpers (#20739)\n- os: make os.SystemError struct public so the os.error_* functions can be used by other modules (#20754)\n- os: refactor to use os.stat and os.lstat instead of unsafe C calls (#20759)\n- os: make os_stat_test.v more robust to reporting false positives\n- x.crypto: add poly1305 message authentication code (mac) in pure v (#20752)\n- encoding.binary: add _fixed variants for the conversion fns, that accept fixed arrays (#20766)\n- x.crypto.sm4: make sm4 use the encoding.binary _fixed fns (#20773)\n- builtin: add gc_collect/0, gc_get_warn_proc/0, gc_set_warn_proc/1. Use them to turn off GC warnings by default. (#20788)\n- builtin: support `-d gc_warn_on_stderr`, to show the GC warnings, without installing a custom warn fn callback\n- x.crypto: add AEAD ChaCha20Poly1305 algorithm in pure v (#20817)\n- x.crypto.chacha20: remove deprecated `math.max_u32` in favour of builtin `max_u32`, remove unneceseary bits, reorder (#20838)\n- json: fix decode struct ptr (#20828)\n- time: add a .http_header_string() method on Time (#20861)\n- json2: reorganize encode string (#20862)\n- vlib: add `encoding.txtar` (port of Go's txtar module) (#20874)\n- gg: handle dpi change, when moving window to another monitor (#20886)\n- time: add a tm_gmtoff field to `C.tm` (a BSD and GNU extension) (#20907)\n- x.json2: add skippable field attr `@[json: '-']` (improve backwards compatibility with the `json` module) (#20892)\n- time: rename identifiers and parameter names (#20913)\n- io: add a `string_reader` submodule (#20893)\n- toml: return an error from toml.parse_file(), when the passed file path does not exist (#20912)\n- x.json2: fix encoder commas (#20916)\n- time: microoptimise the Time formatting methods (use custom number->string conversion, instead of string interpolation) (#20917)\n- x.json2: improve performance of string encoding for unicode special characters and emojis (#20867)\n- x.json2: minor performance improvement, update benchmark recommendations (#20954)\n- os: workaround a `-prod -cc gcc` bug, affecting os.open_file (fix #20923) (related to #20872) (#20960)\n- cli: add pluralization to err msg, if required number of args is not met (#20971)\n- os: remove repetitive words in comments (#20981)\n- gg: fix empty circle in native; http: post_form_with_cookies; veb: print veb action in html errors\n- io.reader: make read_all constants public (#20997)\n- builtin: expose gc_disable(), gc_enable(), gc_is_enabled(), in addition to the existing gc_collect() (#21002)\n- x.json2: improve error message upon missing comma (#20602)\n- builtin: fix a few grammar errors in builtin.string comments (#21010)\n- io.string_reader: fix needs_fill_until check (#21005)\n- builtin: add missing return type to fn signature for C.GC_get_stack_base\n- x.json2: predefine buffer capacity for encoding to avoid reallocations (#20920)\n- rand: add PRNG.fill_buffer_from_set/2 (#21037)\n- sokol.gfx: update the PixelFormat V enum, to exactly match the C sg_pixel_format from thirdparty/sokol/sokol_gfx.h\n\n#### Web\n- net: fix vlib/net/tcp_test.v (since .listen_tcp with af .unix, is now expected to return an error) (#20472)\n- net: remove unused import in tcp_test.v\n- x.vweb: add error, when static directory does not exist (#20455)\n- net.urllib: fix parsing url error, when querypath is '//' (fix #20476) (#20504)\n- vweb: unify listen address from tcp and print (#20448)\n- net.unix: make the error messages in unix_test.v more specific (#20537)\n- vweb: add an optional Context.before_accept_loop/0 method, to make testing easier and more robust (#20538)\n- vweb: fix routes without results in vweb_app_test.v (#20548)\n- vweb: make vweb_test.v more robust and faster, by embedding its server as a module\n- Small fixes and backport changes from vweb (#20584)\n- net.smtp: implement mail attachment support (fix #19920) (#20640)\n- vweb: fix quickstart docs in the module's README.md on how to create a new vweb project (#20644)\n- net.http: add a temporary fix for the intermittent segfault with http.get_ text/1 and `-prod -cc gcc` 13.2.0 (fix #20506) (#20660)\n- x.vweb: support HTTP 1.1 persistent connections (#20658)\n- x.vweb: use `$if debug_ev_callback ? {` for the `[vweb] error: write event on connection should be closed` message\n- x.vweb: add cors middleware (#20713)\n- x.vweb: add new sessions module (#20642)\n- net: fix non-blocking read/write (#20438)\n- net: reduce flakiness of tcp test (#20761)\n- picoev: renaming, doc (#20567)\n- x.vweb: add full static host support, for urls ending with /folder/ , where the folder backing it, has `index.html` inside (#20784)\n- x.sessions: change session Store interface to use results instead of options (#20796)\n- net: fix function name in split_address doc comment (#20794)\n- doc: x.vweb static website capabilities (#20808)\n- thirdparty: update picohttpparser (#20843)\n- picohttpparser: restore formatting for g_digits_lut, after f09826e (#20844)\n- x.vweb: fix handling of static URL paths like `/sub.folder/a_folder` (#20863)\n- veb: a new module veb.auth for authentication logic (tokens, hashed passwords)\n- veb.auth: make work with any db\n- net: workaround a `-prod -cc gcc` bug (#20872)\n- picoev: add more logging of errors (#20558)\n- picoev: remove fmt off tags (#20569)\n\n#### ORM\n- orm: fix checking invalid recursive structs (fix #20285) (#20491)\n- orm: fix checking invalid recursive structs in sql stmts (fix #20278) (#20505)\n- orm: fix orm insert issue if table missing [Issue : #20017] (#20580)\n- orm: fix orm_option_time_test.v after 2d0ed2c made insert in parent tables with child ones missing fail\n- orm: insert expressions returning id\n\n#### Database drivers\n- db.sqlite: fix exec_param_many bug (#21008)\n\n#### C backend\n- Fix multidimensional fixed array size expression evaluation (fix #20311) (#20458)\n- Fix fixed array handling with operator overloading call (fix #20467) (#20469)\n- Fix C code, generated for generic option fixed array return type (fix #20465) (#20479)\n- Fix fixed array handling, on generic result return, and on or block (#20492)\n- Fix generated code for fixed array cast (fix #20454) (#20480)\n- Change `x.filter(cond).len > 0` to `x.any(cond)`, and `x.filter(cond) == 0` to `x.all(!cond)` (#20513)\n- Fix code generation wrong, when '?foo.array or {}' as a 'for-in' condition (fix #20528) (#20542)\n- Add a necessary clone, when the closure param is string/array with -autofree (fix #20498) (#20557)\n- Fix wrong cgen, when auto_heap var, is used as a closed over arg in a closure (fix #20208) (#20566)\n- Initialize closures in shared library mode (#20630)\n- Fix interface generic smartcast (#20609)\n- Support inter-dependent function types (#20638)\n- Write the profile file out, even upon CTRL-C or kill (#20677)\n- Fix as cast as selector (fix #20710) (#20718)\n- Fix method call checking against `none` (fix #20711) (#20717)\n- Fix interface on multi return func (fix #20720) (#20721)\n- Fix premature variable release by autofree (#20731)\n- Fix return with option on orexpr (#20728)\n- Fix auto str for map with ptr str (#20741)\n- Remove `ull` suffix, which looks like the cause for the first scanner error in PR#20726 (#20750)\n- Fix comptime smartcast as receiver on method call (#20749)\n- Fix unwrap on or-expr, when calling f() ?Type (fix #20756) (#20758)\n- Builtin,coroutines,cgen: fix using coroutines with boehm GC, by using a stack pointer corrector (#20771)\n- Fix interface casting (#20789)\n- Fix auto_eq for option eq operator overload (#20795)\n- Fix from_string fn generation missing mod name (#20807)\n- Fix const fixed array initialization handling (#20812)\n- Fix unwrapped option selector assigning (#20816)\n- Fix map methods call with generic types (fix #20827) (#20829)\n- Fix codegen for a.index/1, where a is []Fn (#20849)\n- Fix thread return type generation (fix #20836) (#20850)\n- Fix code generated for anon struct default value (fix #20839) (#20851)\n- Fix comptime selector of interface (#20876)\n- Fix multiple fixed array variable init (fix #20895) (#20902)\n- Ast,checker,cgen: fix generics function with embedded structs, ensure correct link generation in cgen (#20900)\n- Fix returning option call in non-option fn (#20943)\n- Fix global initializer of fixed array on gcc (#20934)\n- Fix comptime `is` condition when using interface (#20952)\n- Fix const fixed array init with index (#20950)\n- Fix generic map inferring key and value types (#20959)\n- Fix missing scope enclosing for const init which needs temp variables (#20973)\n- Fix fixed array return on fn with option generic return (#20974)\n- Fix code generated to comptime passed to generic arg (#20994)\n- Fix match for alias  (#21028)\n- Add ability to mark a global as `@[hidden]` (#21035)\n- Fix _str name generated for C struct which define str() method (#21042)\n- Fix for/in codegen when iterating over C structs (#21052)\n\n#### JavaScript backend\n- Fix javascript backend treating u32 as i32 (fix #20499) (#20618)\n- Fix u16 cast handling in the JS backend (#20620)\n- Make program_test.v not flaky anymore, so that it is more sensitive to early errors. Fix compilation error for u16.v . Make u32.out match the current reality (the bug will be filed separately)\n- Fix inconsistent output (u32) in JS backend (#20691)\n\n#### vfmt\n- v.fmt: drop newline in end comments for const (#20672)\n- Fix alias array no cast init (#20898)\n- Fix removal of used selective and alias imports in modules in `$VMODULES` dirs (#20977)\n- Improve submodule type alias lookup; fix formatting of modules in `$VMODULES` (#20989)\n- Fix type names for casts (#21036)\n- Insert auto imports after shebang (#21038)\n- Fix autoimport with shebang and comments above other imports (#21050)\n- Fix formatting for imports of submodule from module `src` dir (#21060)\n- tools.fmt: extend exit codes to allow spotting unformatted files next to internal errors (#21058)\n- Fix parsing of interface with comment above `mut:` keyword (#21062)\n\n#### Tools\n- repl: support executing shell commands on the REPL with `!sh [COMMAND]` (#20496)\n- repl: fix an issue with `print` and println after the execution of `for` or `if` (fix #20524) (#20525)\n- tools: bump too_long_line_length_table to 160, to avoid warnings for just `v check-md doc/docs.md` (most common)\n- tools: bump too_long_line_length_link to 250, to avoid warnings for very common long links\n- ci: simplify time_ci.yml, use more descriptive CI job names, for easier judging of CI failures\n- debug: fix variable dereferencing (#20594)\n- tools: support setting another SCANNER_MODE=parse_comments in parser_speed.v and scanner_speed.v\n- testing: fix warning for compiling `./v cmd/tools/vtest.v`\n- docs: add a section about modules specifics (#20653)\n- github: add dependabot.yml (#20800)\n- vtest,pref: add ability to have platform specific _test.v files (#20810)\n- ci: change spaceface777/cancel-workflow-action to styfle/cancel-workflow-action (#20806)\n- tools: use the same same skipping logic for the platform specific _test.v files in `v test-self` too (#20815)\n- tools: make the output of `v check-md .` more informative (#20819)\n- v.debug: implement tracing hook feature (#20818)\n- ci: mark db_store_test.v as flaky\n- ci: add a vtcc step (check that vtcc, continues to be able to compile with v, and v itself can be compiled with vtcc) (#21000)\n- v.util: simplify vtest (#21013)\n- vtest-self: add sandboxed packaging case (#21059)\n\n#### Operating System support\n- v.builder: allow for `v -shared -os windows file.v` on Linux/macos (fix #20445) (#20453)\n- Add windows dll support, fix (#20447) (#20459)\n- sync: add mutex.try*lock functions for FreeBSD too (#20482)\n- sync: fix FreeBSD implementation of sync functions (#20483)\n- os: make os.cache_dir() and os.vtmp_dir() more robust to parallel test executions on windows (#20495)\n- builder: replace \"-rdynamic\" for clang on macos with \"-Wl,-export_dynamic\" (fix #20510) (#20511)\n- builder: restore ability to use tcc, without fallback to cc on macos\n- v.builder: use a more uniq prefix for the generated temporary file names, to further reduce the chances of collision and sporadic CI failures on windows (#20551)\n- encoding.csv: fix bug in RandomAccessReader, spotted on windows with mingw32 (#20571)\n- builtin: use `#pkgconfig bdw-gc-threaded` where available, instead of `#pkgconfig bdw-gc` (on FreeBSD)\n- db.pg: add include and lib paths for PostgreSQL on FreeBSD (#20582)\n- thirdparty: fix `v cmd/tools/vcompress.v` on FreeBSD\n- os: fix an error in Process.win_spawn_process, not using stdout pipe in a cmd environment on 32bit Windows (#20613)\n- testing: retry 1 additional time sporadic silent test run failures on macos\n- builder: add '-lelf' to linker flags on freebsd (fix #20481) (#20643)\n- GNUmakefile: use standard default RM make variable to fix MSYS2 env on windows (#20701)\n- x.vweb: add the missing include for C.sendfile to sendfile_linux.c.v\n- clipboard: fix notice in clipboard_windows.c.v (#20733)\n- ci: update macos runners to macos-14, to make use of the much faster m1 instances (#20747)\n- builder: support musl-gcc on macos\n- builtin: link to user32 to fix boehm GC compilation on Windows with clang released from the LLVM project (fix #20724) (#20767)\n- pref: download correct photonwrapper.so for linux (#20783)\n- ci: improve repo CI robustness, by marking dynamic_template_manager_cache_system_test.v as flaky, and only failing db_store_test.v on !windows\n- tools.vpm: fix remove command on Windows, add test (#20852)\n- os: don't check rdev equality on FreeBSD, inside vlib/os/os_stat_test.v (#20885)\n- sync: support more gcc version specific search locations on linux with tcc\n\n\n## V 0.4.4\n*9 January 2024*\n\n#### Improvements in the language\n- Implement `@[aligned]` and `@[aligned:8]` attributes for structs and unions (#19915)\n- Update attributes to use new syntax\n- Update remaining deprecated attr syntax (#19908)\n- Support `$if T is $array_dynamic {` and `$if T is $array_fixed {` in addition to `$if T is $array {` (#19882)\n- Prepare for making `-W impure-v` the default (#19940)\n- Assigning `0` to reference fields now requires unsafe blocks (fix #14911) (#19955)\n- Unwrap const() blocks\n- Implement $for comptime T.variants (#20193)\n- Add `r` and `R` switches for repeating in string interpolation, `'${\"abc\":3r}'` == 'abcabcabc' (#20197)\n- Comptime refactor and cleanup (#20196)\n- Allow comptime-for to iterate over comptime variables, add `$string` comptime type, cleanup (#20233)\n- Unwrap an option value automatically, inside `if o != none {` (#20275)\n- Complete support for smartcasting to a comptime variable type (#20270)\n- Improve comptime var checking with `is` operator and smartcasting (#20315)\n\n#### Breaking changes\n*none*\n\n#### Checker improvements/fixes\n- Disallow `$for i in struct.values` and `$for i in enum.fields` (#19845)\n- Parser, checker: fix var scope in lambda(fix #19860) (#19871)\n- Change the warning `more than 1000 possibilities in match range`  to a notice (#19862)\n- Fix inability to use multiple `import some modname as _` in the same .v file (fix #19899) (#19900)\n- Disallow casting strings to pointers outside `unsafe` (#19977)\n- Disallow directly indexing sumtype and interface, when using as parameters(fix #19811) (#19982)\n- Fix loop on aggregates of arrays (in match branches) of sumtypes (fix #18548) (#19988)\n- Disallow indexing mut struct, passed as a fn parameter (#19992)\n- Enhance err msg for unknown types for comptime `$for` (#20057)\n- Fix .clone()/.move() with shared maps (#20083)\n- Fix generics method call with struct short syntax args(fix #20030) (#20100)\n- Fix unwrap, when generic structs are used as arguments, in uncalled methods (fix #20132) (#20135)\n- Fix generic fn with generic fn call returning generic map (fix #20106) (#20150)\n- Cast sumtype to its variant generic type (#20166)\n- Refactor `string` to `enum` error check, handle `EnumName(string_variable)` too (#20210)\n- Fix generic array method call with multi-types (#20237)\n- Remove unnecessary struct ref field initialization checks and notifications at map initializing(fix #20245) (#20251)\n- Add a notice, for accessing by key, map values, that contain pointers (to use unsafe or an `or {}` block) (#20266)\n- Fix mismatch checking when a function returns sumtype as an argument (fix #19325) (#20264)\n- Fix and cleanup uninitialized checks for array initialisers with `len:` (fix #20272) (#20279)\n- Give an error for `.free()` method calls, when used on fixed arrays  (#20320)\n- Fix type mismatch checking for assignments with generics (fix #20298) (#20327)\n- Fix too strict checking with generics in assignment type mismatch (fix #20335) (#20346)\n- Disallow `string` to `voidptr` cast entirely (#20351)\n- Fix generic method calls with multi generic types (fix #20330) (#20360)\n\n#### Parser improvements\n- parser: fix parsing comments after new attribute syntax\n- parser: fix failures found with fuzzing (#19873)\n- parser: deprecate old attribute syntax & update remaining (missed) attributes (#19879)\n- parser: fix infix expr handling with cast on left side of << operator (#19985)\n- ast: fix generic structs with multiple levels of generic embedding (#20042)\n- parser: implement thread returns result and multi_returns (fix #19281) (#20194)\n- parser: fix formatting struct decl with comments (#20207)\n- parser: fix formatting enum and interface decl with comments (#20216)\n- parser: fix fn call with newline opening brace (fix #20258) (#20267)\n- parser: fix parse_vet_file() with vfmt off/on flag (#20273)\n\n#### Compiler internals\n- scanner: implement support for UTF-32 escape codes in string literals (#19911)\n- scanner: add new_silent_scanner/0, Scanner.prepare_for_new_text/1, make .ident_char/0, .ident_string/0 and .text_scan/0 public (#20045)\n- pref: support VNORUN=1, to enable running of tests, vsh files etc (i.e. just compile them, for debugging later)\n- scanner: fix backslashes followed directly by newline in string literals (fix #20291) (#20296)\n- scanner: fix escape character handling in character/rune literals (fix #20301) (#20304)\n- pref: disable the -macosx_version_min clang flag by default (#20297)\n- builder: remove passing `-fno-strict-aliasing`, for `-prod` to gcc/icc (#20368)\n- markused: add `-skip-unused` for programs that `import x.vweb` too (do not skip unused routing methods)\n\n#### Standard library\n- json: fix recursive pointer encoding (#19840)\n- os,picohttpparser,sokol,strconv: prepare for making `-W impure-v` the default (#19846)\n- os: add fast path to mkdir_all, when the given folder already exists (#19869)\n- os: ignore empty path segments in `join_path` (#19877)\n- os: fix bootstrapping for OpenBSD\n- x.json2: replace deprecated type byte with u8 in the tests (#19909)\n- vlib: change byte to u8 (#19930)\n- sync: add a FreeBSD specific version of vlib/sync/sync_default.c.v (#19962)\n- datatypes: add push_many for doubly and singly linked list + add insert_many for heap (#19975)\n- datatypes: make `Direction` pub and fix and add tests for `push_many` (#19983)\n- gg: fn (data voidptr, e &Event) for events, allows methods\n- vlib: add a `compress.szip` module, deprecate the `szip` one after 2023-12-31 (#20003)\n- os: create the folder described by `XDG_CACHE_HOME`, *if it is non empty, and it does not exist yet*, when calling `os.cache_dir()` (#20046)\n- vlib: use the builtin flush functions, instead of the C. ones (#20108)\n- crypto: add blake2s and blake2b hashes (#20149)\n- os: fix `mv_by_cp` for directories (#20154)\n- os: update mv fns, improve performance, add params struct to control overwrite behavior (#20156)\n- gg: fix overlapping slices in `draw_slice_filled()` (#20182)\n- json: fix option sumtype handling (#20186)\n- builtin: add `@[direct_array_access]` to js string trim_right method (#20222)\n- json2: add encoder support for `time.Time`  (#20228)\n- json2: fix encoding of 💀🐈 etc emojis (fix #20243) (#20247)\n- json2: make public the generic function `map_from/1` (#20294)\n- json2: optimise encoding to be faster than cJSON with -prod (#20052)\n- json2: support sumtype encoding in a more robust way (#20093)\n- json2: strict module (#17927)\n- crypto: fix notices/errors for `v -N test vlib/crypto`\n- crypto: add blake3 hash (#20319)\n- sokol: fix compiling gg and other graphical examples on OpenBSD (#20333)\n- csv: Add a sequential reader too (suitable for very large .csv files, it does not read everything at once) (#20140)\n\n#### Web\n- net.mbedtls: use `char` and `usize` types for describing more precisely the C API of mbedtls (#19837)\n- vweb: add the mime type for .toml files (#19875)\n- net.openssl: use actual C values for the SSLError enum (#19945)\n- vweb: .html('custom_template.html')\n- vweb: add an optional parameter to the .redirect/2 method, to be able to set the http code for the redirects (#20082)\n- x.vweb: fix large payload (#20155)\n- x.vweb: reimplement csrf module (#20160)\n- net: make net.fionbio and net.msg_nosignal constants public in net_windows.c.v (#20183)\n- net.http: remove unused `read_set_cookies` function (#20187)\n- os, net.http.file: add a folder listing to the http static file server, started by file.serve/1 (#20192)\n- websocket: enable using an already existing connection (from vweb or another http server) (#20103)\n- x.vweb: fix fsanitize-address test for SSE, improve documentation on the usage of `takeover_conn` (#20249)\n- net.http: support `-d no_vschannel` on windows, to fix long waits, while connecting on some systems (#20265)\n- x.vweb: fix `$vweb.html()` integration in cgen for the newer `x.vweb` module (fix #20204)\n- net: support only ip and ip6 in net.tcp_listener (#20336)\n- x.vweb.assets: reimplement assets module for x.vweb (#20280)\n- x.vweb.sse: reimplement SSE module for x.vweb (#20203)\n- js.dom: add querySelector[All] and NodeList (#20240)\n\n#### ORM\n- orm: fix code generation for an option time.Time field (#20031)\n- orm: fix the generated SQL for the \"not equal\" operator (#20321)\n\n#### Database drivers\n- db.mysql: add support for the FreeBSD name of the mariadb client library (#20039)\n- db.pg: fix using postgresql on windows, improve instructions for installing it (#20053)\n- db.mysql: add ability to prepare and execute statements separately (#20146)\n- db.pg: fix compilation error with the msvc compiler on windows, and add readme (#20326)\n\n#### Native backend\n\n#### C backend\n- Fix generic fn returning fixed array (#19885)\n- Fix arrays alias built-in methods call(fix #19896) (#19910)\n- Fix generic array initialization (fix #19903) (#19916)\n- Fix option sumtype auto deref (#19919)\n- Ast, checker, cgen: fix interface embedded methods call(fix #16496) (#19936)\n- Fix ref and deref when an interface is used as a function parameter (fix #19947) (#19966)\n- Fix auto str for interface struct member which implements str method (#19970)\n- Fix generics call with interface arg (fix #19976) (#20002)\n- Fix lambda initialization on option struct field (fix #19474) (#19995)\n- Fix live mode on windows (#20041)\n- Fix the static from_string method of Enum across mods(fix #20050) (#20068)\n- Fix `@[if xyz?] fn init() {}`, add tests (#20096)\n- Fix assignment to the elements of an array of fixed arrays (#20133)\n- Fix mutable comptimeselector usage (fix #20027) (#20134)\n- Fix generics chans select (#20159)\n- Fix string interp with zero characters (fix #20199) (#20200)\n- Fix interface eq method with option and ref (fix #19441) (#20201)\n- Fix infix expr in method of mut receiver variable (#20225)\n- Fix cgen for thread wrappers, when spawning fns with with anon-fn array args and mut interfaces (fix #19425) (#20241)\n- Fix fixed array return when returning fixed array initialization (#20262)\n- Fix function generated code, when returning from match (#20263)\n- Fix in expression with mut and ref (fix #20268) (#20271)\n- Fix initialization of const string arrays on msvc (fix #20287) (#20289)\n- Fix code generation when 'in array init' is used as an if condition (fix #20300) (#20302)\n- Escape table names (fix #20313) (#20322)\n- Add missing clear method for generic maps (#20340)\n- Fix auto unwrapping option fn type (#20332)\n- Fix option initialization with default struct initialization to not be `none` (#20349)\n- Fix auto str for arr options with possible circular reference (#20354)\n- Fix code generation when the function returns mut fixed array (fix #20366) (#20367)\n\n#### vfmt\n- vfmt: automate transition from the old `[attribute]` to the new `@[attribute]` syntax (#19912)\n- vfmt: remove empty `__global()` (#20004)\n\n#### Tools\n- tools: fix already installed detection when running v install --once without args (#19838)\n- compress.gzip: change the endianness for validation to conform to the gzip file specification (fix #19839) (#19849)\n- tools: support `v doc -run-examples math`, to ensure that all `// Example: code` doc comments are working (#19852)\n- Fix `v help` in the prebuilt v executables from the zips in the releases\n- ci,tools: remove skips for the wasm backend, since binaryen is not required anymore (#19883)\n- tools.vpm: support again `http` installs, when installing from an url (workaround) (#19914)\n- tools.vpm: improve version detection of installed modules (#19933)\n- tools: fix `v up`, by not deleting `./v` when missing a `.git` folder (#19965)\n- tools.vpm: fix installing of modules with conflicting names, extend tests (#19961)\n- tools.vpm: evaluate dependencies earlier to fix potential recursive install loop (#19987)\n- tools.vpm: add support for ssh and hg version installations (#20125)\n- tools: simplify and remove redundancies in vshader.v (#20161)\n- ci: add new workflow, for doing the slower tests in vpm specifically with `-d network` (#20177)\n- tools.vpm: improve detection of already parsed modules (#20223)\n- scanner: change `-d debugscanner` to `-d trace_scanner` for uniformity with the other tracing options, described in CONTRIBUTING.md\n- v.pref: support a `-n` option, silencing only notices (#20331)\n- ci: add vsql to v_apps_and_modules_compile_ci.yml too (#20341)\n- ci: fix the workflow for Vinix, using the rules in its own .yml file (#20371)\n- Support -? as alias to -help (implement #20355) (#20358)\n- vdoc: filter testdata and tests folders by default, reduce filesystem stats calls\n\n#### Operating System support\n- os: small cleanup in the FreeBSD branch of os.executable/0: use fixed array for the sysctl params, instead of allocating a dynamic one (#20353)\n- os: improve os.executable() on OpenBSD (#20356)\n- v.util.diff: support OpenBSD's default `diff` tool (#20369)\n- os: fix os.open_file/3 `wb` mode creation of text files containing crlf on Windows (#20101)\n- os: fix File.tell for files > 2GB on windows, by using C._telli64(f.fd) (#20072)\n\n#### Examples\n- encoding.xml: make functions public, add documentation, tests, fix attribute parsing for self-closing tags  (#19901)\n- examples: show how to turn on CORS in a vweb server app\n- examples: serve the wasm mandelbrot project using a v web server (#19937)\n- examples: increase the resolution of the generated image in examples/wasm/mandelbrot\n- docs: update null convention in ORM example, since `@[nonull]` is no longer needed (#20286)\n- docs: add an example of a nullable ORM field (#20292)\n- example: add a path finding algorithm visualizer using gg (#20060)\n- examples: add an even smaller gg usage example, demonstrating how to always show the builtin fps counter, and how to avoid importing gx\n\n\n\n\n\n## V 0.4.3\n*11 November 2023*\n\n#### Improvements in the language\n- A new `encoding.xml` module with parser, validation, entity encoding, unit tests (#19708)\n- Better couroutines support (IO, networking)\n- Allocations in vweb apps reduced by 80%\n- Implement `@VCURRENTHASH` to replace `C.V_CURRENT_COMMIT_HASH` (#19514)\n- int => i64 on 64 bit, i32 on 32 bit (start of the transition)\n- Fix new int type promotion rules and cleanup native gen() (#19535)\n\n#### Breaking changes\n- `Request.cookies` map has been deprecated. Replaced with `Request.cookie()` and `Request.add_cookie()`.\n- Stricter rules for C types (they always have to be declared now)\n\n#### Checker improvements/fixes\n- Turn the option/result split warning into an error\n- Turn propagation warning into an error (finishes the option/result split)\n- Fix fn call with option call argument in autofree mode (#19515)\n- Bring back pascal case check for aliases\n- C.xx = C.yy aliases\n- Allow casted integral types in match ranges (#19572)\n- Warn about byte deprecation, when used as a fn parameter (#19629)\n- Allow size of fixed array to be integral casts (#19663)\n- Fix generic array append (#19658)\n- Check error of implementing other module private interface (fix #19620) (#19688)\n- Extend byte deprecation warning to array init types (#19671)\n- Extend byte deprecation warnings to return types (#19668)\n- Fix negative cap, len checks in array init (#19694)\n- Turn warning for var and param module name duplicates into error (#19645)\n- Fix closure in if guard, including with multi_return (#19765)\n- Fix comptime enumdata value property access (#19768)\n- Fix `field ?&Type` without default value (#19786)\n- Avoid nil assign to option var (#19746)\n- Allow for a shared variable to be whole reassigned (keeping the same mutex state) (fix #15649) (#19751)\n\n#### Parser improvements\n- Fix assigning static method to anon fn (#19499)\n- ast: fix formatting a struct declaration with a nested struct (#19592)\n- Add `set_all` + `clear_all` methods to `[flag]` enum bitfields (#19717)\n- ast: reduce cost of frequently called functions by using constants (#19733)\n- Warn on unused imports, even when they are declared via `import math { sin, cos }`   (#19738)\n- ast: add missing docstrings for the public fns in vlib/v/ast/types.v (#19752)\n- Give a friendly error when misusing if over $if (#19810)\n- Add multiple struct attributes error for new attribute syntax\n\n#### Compiler internals\n- checker, builder, pref: support `-dump-defines -` to help explore all the available user and system defines for a given program (#19576)\n- pref,builder: add support for `-macosx-version-min 10.2` and `-macosx-version-min 0` (with default of 10.7) (#19626)\n- pref: fix unintended file extensions in default output names, allow for `v run file.c.v` (#19745)\n- transformer: fix using a constant, instead of a fn parameter with the same name (fix #19766) (#19773)\n- maps: add maps.merge() and maps.merge_in_place() generic utility functions (#19776)\n- coroutines: only attempt to add/remove roots when GC is on.\n- markused: cleanup in mark_used(), use robust index names, instead of the much more brittle integer values (#19543)\n\n#### Standard library\n- builtin: add an `unsafe { a.reset() }` method, for quickly setting all bytes in an array to 0\n- math.fractions: use operator overloading and deprecate old functions (#19547)\n- gg: fix the alignment of the bottom border of draw_rounded_rect_empty on macos and linux\n- crypto.bcrypt: fix bcrypt failure for valid pass and hash (fix #19558) (#19569)\n- sokol: update sokol to the latest version\n- builtin: fix sizeof(C.BOOL) (windows specific) (#19589)\n- math.big: fix incorrect division with negative numbers (fix #19585) (#19587)\n- os: add a convenient way to ignore certain system signals (#19632)\n- os: fix os.ls(folder) on windows, when a protected folder can not be opened (#19647)\n- os: add a convenient way to ignore certain system signals (#19639)\n- crypto.sha: fix calculating the same hash values when .sum() is called several times for sha1/256/512 (fix #19696) (#19697)\n- crypto.md5: fix calculating the same hash values, when .sum() is called several times (#19703)\n- os: add a new function `execute_opt` (#19723)\n- os: add os.page_size() (#19770)\n- os: implement os.fd_is_pending/1, os.Process.pipe_read/1, os.Process.is_pending/1 (#19787)\n- builtin: copy min/max integer values consts from `math` to builtin so that the entire math module doesn't have to be imported(#19809)\n- json2: add support for nested structs (#19579)\n\n#### Web\n- vweb: add mime type support for static .md files\n- net.conv: add varinttou64 and u64tovarint functions, for the variable unsigned integer encoding, described in rfc9000 (for QUIC) (#19568)\n- net.http: support passing on_running, on_stopped, on_closed callback functions to http.Server{}, as well as show_startup_message: false. (#19591)\n- net: fix handling of spurious wake-up signals, lost when calling select() in mbedtls and openssl (continue on C.EINTR) (#19600)\n- net: use conv.hton* consistently, instead of `$if tinyc { conv.hton16(port) } $else { u16(C.htons(port)) }`\n- net.http: support passing an HTTP proxy server in http.fetch (#19606)\n- net.http: add a retry mechanism to http.fetch(), when the socket inevitably errors (#19660)\n- wasm: implement inline assembly (#19686)\n- net.http: increase max_redirects to 16 (#19743)\n- picoev: implement raw mode (#19771)\n- flag,json,net: handle C calls in .v files (part of enabling `-W impure-v` as default) (#19779)\n- net.http: add socks5|http(s) proxy support [Linux] (#19676)\n\n#### ORM\n- orm: add null handling and option fields (#19379)\n- orm: make is_null/is_not_null unary ops; don't bind null in where (#19635)\n\n#### Database drivers\n- pg: handle C calls, move to .c.v files (#19739)\n\n#### Native backend\n- native: support `-no-builtin` (generate executables < 1KB Linux with `v -no-builtin -b native examples/hello_world.v`)\n- native: use i32 instead of int\n\n#### C backend\n- Fix printing fixed array of options (#19479)\n- Fix struct field of fixed array init (fix #19483) (#19487)\n- Fix struct init with multi option fn type (#19491)\n- Ast, native, cgen: add support for `$if native {}` (#19500)\n- Fix maps with i32 keys\n- Fix for c stmt with option or result calls (#19641)\n- Fix infix op when handling comptime selector (#19691)\n- Fix array contains method with interface(fix #19670) (#19675)\n- Reduce expense in repetitively called functions by using consts (#19732)\n- Fix closure parameter judgment when var cross assign inside anon fn(fix #19734) (#19736)\n- Only generate free in wrapper for spawn and not go (#19780)\n- Fix g.obf_table data missing(fix #19695) (#19778)\n- Fix closure variable in smartcast (#19796)\n\n#### vfmt\n- Remove additional line breaks after call_expr before params struct args (#19795)\n- Fix map value alignment when using keys with uft8 symbols (#19689)\n- Align ternary expressions in const blocks (#19721)\n- Respect range index expressions in match branches (#19684)\n- Respect raw strings in `$embed_file(r'/some/path')` expressions (#19753)\n- Fix formatting of struct field with default value and new attr syntax (#19683)\n- Recognize or blocks in call args (#19690)\n\n#### Tools\n- all: add support for `@LOCATION`, for more convenient logging/tracing, without needing to combine `@FILE`, `@LINE` at runtime (#19488)\n- benchmark: add new methods b.record_measure/1 and b.all_recorded_measures/0 (#19561)\n- ci: update c2v workflow, translate doom on macOS (#19562)\n- strings: add Bulder.write_decimal/1 method (write a decimal number, without additional allocations) (#19625)\n- testing: add temporary file hash to prevent accidental collisions with test file binaries (#19710)\n- ci: compile VTL and VSL in their own CI job, with `VFLAGS=-no-parallel`\n- tools: fix windows install of an already existing module with vpm (#19761)\n- tools: use `VPM_NO_INCREMENT` env var to skip dl count increment when testing vpm (#19756)\n- tools.vpm: improve handling of urls that end with .git (#19758)\n- tools: fix resolving external dependencies in vpm, add test (#19772)\n- tools: cleanup and simplify vcreate, for upcoming fixes and features (#19794)\n- tools: improve error messages, add color coding and debug logging (#19781)\n- tools: fix `v build-tools`, make `v test` more robust (#19803)\n- tools: add parse_query to vpm (#19814)\n- ci: add macos arm64 binary release (#19823)\n- Require the presence of a `v.mod` file, to install external urls via vpm (#19825)\n- vcreate: fix `v init` with project names containing dashes (#19619)\n\n#### Operating System support\n\n#### Examples\n- tests: workaround name conflict, causing false positives with msvc on windows, when both tests were executed at the same time (locked executable)\n\n\n## V 0.4.2\n*30 September 2023*\n\n#### Improvements in the language\n- Short lambda expressions like `a.sorted(|x,y| x > y)` (#19390)\n- Support `-os plan9`, `$if plan9 {`, and `_plan9.c.v` (stage 1 for plan9) (#19389)\n- fmt: simplify the processing logic for removing inline comments (#19297)\n- Align the custom values of the enum fields (#19331)\n- Do not warn/error for `import flag as _`\n- Keep anon struct decl fields in interfaces (#19461)\n- Support -N, turning all notices into errors, to ease the process of finding places that may need attention/correction\n\n#### Breaking changes\n- Remove inline comments (#19263)\n\n#### Checker improvements/fixes\n- Disallow module name duplicates in local names (#18118)\n- Check enum fields with duplicate value (fix #19309) (#19310)\n- Disallow alias ptr cast of a map value (#19336)\n- Require `else` branch in `[flag]` enum match (#19375)\n- Disallow assigning pointer values to option struct fields (#19380)\n- Fix generic comparison for conditional assignment (#19401)\n- Allow using ! and ~ on aliased bool and integral types (#19403)\n- Warn -> error for uninitialized ref fields\n- Parser, checker: allow lambdas anywhere anonymous functions are expected (#19436)\n- Allow for `each(a, |x| println(x))`, i.e. using lambda expressions, when expecting `fn (x int)`\n- Check fixed array init with default expression (#19472)\n- Allow for `const source = $embed_file(@FILE).to_string()`\n- Fix C.type in imported modules\n\n#### Parser improvements\n- parser: fix fixed array with eval const size (#19269)\n- parser: disallow using `sql` as name (#19298)\n- parser: fix `;` support for `module x;`\n- parser: fix fixed array of option values (`_ := [10]?int{}`) (#19392)\n- parser: fix assigning with in another module sumtypes 2 (#19415)\n- Support `;` statements, allowing for oneliners like `./v -e 'import os; println( os.ls(os.args[1])!.sorted(a > b) )' vlib/math` (#19345)\n- v.ast: improve Stmt.str(), showing more details about ast.Block, ast.DeferStmt, ast.ForInStmt, ast.GlobalDecl\n\n#### Compiler internals\n- pref: support `-fast-math`, passing either -ffast-math or /fp:fast (for msvc) to the C backend, and `$if fast_math {` to detect it at comptime\n- parser, transformer: fix transformer.infix_expr() and cleanup parse_types.v (related #19269) (#19276)\n- pref,builder: support -use-os-system-to-run to workaround segfaults using not fully updated xcode command line tools\n- v.builder: fix compiling code, that imports modules from both `src/modules` and `modules` (#19437)\n- os, v.builder: show more details, when a program ran by `v run file.v`, exits by a signal (fix #19412) (#19471)\n\n#### Standard library\n- math: speedup the pure V math.pow implementation for non-fractional powers (#19270)\n- math: add more C. fn overrides, for the default C backend (speed up examples/path_tracing.v) (#19271)\n- time: add `MMM` support for parse_format() (#19284)\n- os: include sys/sysctl.h on FreeBSD to avoid implicit definition of sysctl function (#19293)\n- crypto.md5: change the Digest.write return type, from `?int` to `!int` (#19311)\n- v.help: use os.executable() instead of `@VEXE` as an anchor, so `v help` will work more robustly.\n- toml: fix custom `to_toml` for complex structs (#19338)\n- vlib: add net.http.file, allowing for `v -e \"import net.http.file; file.serve()\"` (#19348)\n- vlib: remove functions and fields, deprecated before 2023-03-20\n- toml: fix toml encoding of complex types (#19408)\n- arrays: add a partition function, that splits a given array, based on a criteria, passed as a callback fn (#19417)\n- toml: add decoding for struct fields of type map[string]T (#19447)\n- arrays: add arrays.each, arrays.each_indexed, and tests for them\n- encoding.html: implement `unescape()` (#19267)\n\n#### Web\n- net.http: fix http.fetch(), without explicit method (default again to .get, not to .acl)\n- net.http: default explicitly to Method.get for http.Request and http.FetchConfig too\n- examples: add examples/fetch_ip.v, showing how to contact http://ifconfig.co/json and parse the result\n- net.http: fix post error with https on windows (#19334)\n- net.ssl: implement SSLConn.peer_addr() (#19333)\n\n#### ORM\n- orm: add `references` attribute to allow foreign key declarations on fields (#19349)\n- orm: support different foreign key types, not just an integer id (#19337)\n- orm: add support for V enum struct fields (#19374)\n- orm: quote table and field name in `[references]` (#19387)\n\n#### Database drivers\n- db.pg: allow postgres connection using service definitions (#19288)\n\n#### Native backend\n- native: make native tests pass on windows; refactor PE file generation (#19140)\n- native: parse dll files to resolve extern symbols (#19433)\n\n#### C backend\n- Fix printing struct with thread field (#19320)\n- Fix the logic around the definition of VNORETURN and VUNREACHABLE (less warnings on FreeBSD) (#19316)\n- Add support for `-d trace_cgen_stmt`, document it in CONTRIBUTING.md\n- Fix printing smartcast interface variable (fix #18886) (#19372)\n- Fix interface with multiple embedded fields (#19377)\n- Fix channel of interface (fix #19382) (#19383)\n- Fix fixed array of option type default (#19397)\n- Fix interface with option field (#19434)\n- Fix promoting an alias typed value, to a sumtype of the alias's base type (fix #19407) (#19423)\n- Remove the special plan9 support code, treat it instead as a posix system in cheaders.v (#19445)\n- Fix printing slice of fn call string (#19450)\n- Fix `type VType = &C.CType` (#19452)\n- Fix array of fns index call with direct_array_access mode (#19460)\n\n#### Tools\n- bench: a new bench/ directory for language benchmarks\n- ci: test the pure V math versions without .c.v overrides on the CI too (#19292)\n- github: add automatically info about voting to all new issues (#19351)\n- tools: add -E flag to `v test-parser`, that will show the partial source that caused the parser to fail with `-no-builtin -check-syntax file.v`\n- ci: bring back gitly\n- github: improve the voting message for issues (#19448)\n- vcreate: update templates, add `lib` (#19444)\n\n#### Operating System support\n- builtin: use `libgc-threaded` on FreeBSD, to get the threaded version of libgc (#19294)\n\n#### Examples\n- examples: add more .obj files for 06_obj_viewer (#19406)\n\n## V 0.4.1\n*3 September 2023*\n\n#### Improvements in the language\n- Pure `array.sorted()` and `array.sorted_with_compare()` methods, that do not modify their receivers (#19251)\n- UB overflow has been removed\n- Implement `Enum.from_string(name string)` for converting strings to enum values (#19156)\n- Disallow casting string to enum, suggest using Enum.from_string() instead (#19260)\n- Use autocasting in complex conditions (#18839)\n- Allow alias as fixed array on return (#18817)\n- Do not allow uninitialized function pointers\n- Fix compiling V programs with latest clang 16 on windows (clang 16 is stricter than clang 14) (#19095)\n- Fix anonymous struct with default expr (#19257)\n- Allow using consts as enum values (#19193)\n- `@[attr]` syntax to replace `[attr]` (`[]` is used for too many things). Most likely to be replaced with `@attr()` in the future.\n- Allow `none` for not first values on map initialization (#18821)\n- Make all .trace() methods generic on the type of the passed expression\n\n#### Breaking changes\n- `arr[1..4]` now requires `unsafe` if the slice can modify the original immutable array.\n\n#### Checker improvements/fixes\n- Disallow assigning `nil` to struct fields (#18725)\n- Use autocasting in complex if conditions (#18753)\n- Disallow invalid prefix on left side of assign stmt (#18750)\n- Allow no return in compile_error else block (#18758)\n- Fix interface param resolution (#18780)\n- Add an error for `$tmpl` function type mismatches (#18826)\n- Disallow voidptr cast to struct (#18845)\n- Fix type checker on auto deref var (#18842)\n- Check generic sumtype declaration (fix #18741) (#18865)\n- Fix closure with inherited sumtype variable (#18894)\n- \"v -line-info\" for a quick run to fetch info about objects on one line\n- Make sure vweb actions return vweb.Result\n- Do not allow modifying immutable vars via arrays with refs\n- Support `@STRUCT` in static methods\n- Fix generic struct field init recursively (related #19014) (#19025)\n- Fix struct field fntype value call (#19067)\n- Explicitly disallow creating type aliases of `none`, i.e. `type Abc = none` (#19078)\n- Fix assigning an array slice (fix #19120) (#19137)\n- Fix assigning array slice in struct init (#19150)\n- Check enum static from_string arguments errors (#19163)\n- Disallow taking the address of consts with int literal values (#19160)\n- Check struct embed with wrong position (#19245)\n- Optimize out needless string interpolations from the most common case in `Checker.expr_or_block_err`\n- Check error for or_expr inside infix expression (#19213)\n- Disallow `thread` as var name (#19174)\n- Check error for sumtype in array (#19183)\n- Disallow an empty `chan` type (#19167)\n\n#### Parser improvements\n- Change warn to error, for const names with upper letter (fix #18838) (#18840)\n- Disallow declaring static functions as method receivers (#19007)\n- Disallow having builtin type as type names for `enum`, `sum type` and `alias` (#19043)\n- Support `const x := 123`, to make extracting locals as constants less annoying while prototyping\n- Fix struct field fn type with default value (fix #19099) (#19106)\n- Fix `for i++; i<10; i++ {` (fix #18445) (#19035)\n- Fix fn return alias of fixed array (#19116)\n- Fix generic struct init (Stack[&Person]{}) (fix #19119) (#19122)\n\n#### Compiler internals\n- pref: make -autofree work without -gc none\n- builder,pref: allow thirdparty objects compilation with CPP compiler (#19124)\n- scanner: fix string interpolation with nested string interpolation in inner quotes p. 3 (#19121)\n- scanner: error early on an unsupported escape sequence in a string, like `\\_` (fix #19131) (#19134)\n- v.token: add inline next_to() and cleanup related calls (#19226)\n\n#### Standard library\n- eventbus: add generic support for event name (#18805)\n- readline: add support for ctlr+w and ctrl+u shortcuts (#18921)\n- strconv.atoi: fix string.int() returning numbers for non number characters (fix #18875) (#18925)\n- builtin: reduce the number of array allocations for consts in all V programs (#18889)\n- builtin: move array.data to the top of the struct\n- os.notify: implement the kqueue backend for notify.FdNotifier (#19057)\n- vlib: add a new module `builtin.wchar`, to ease dealing with C APIs that accept `wchar_t*` (#18794)\n- arrays: add more util functions and tests for them - find_first, find_last, join_to_string (#18784)\n- vlib: use sync.new_mutex() consistently for initialising all vlib structures containing mutex fields\n- crypto.pem: add a static method `Block.new`, to replace `new` (#18846)\n- crypto.pem: add decode_only and general improvements to decoding (#18908)\n- log: improve the most common use case, it's no longer necessary to create a `Log` instance (#19242)\n- crypto.sha512: make the new384/0, new512_256/0, new512_224/0 functions public\n- json: fix option alias support (#18801)\n- time: fix `parse_format` with `YY` (#18887)\n- math.big: allow bitwise ops on negative signum (#18912)\n- math.big: make is_odd public and add test cases (#18916)\n- math.big: add checked division methods (#18924)\n- math.big: add `isqrt_checked` and standardize error format (#18939)\n- sokol: use GLCORE33 on linux\n- os,term.termios: add termios.set_state/2, state.disable_echo/0, use them in os.input_password, to fix `v -os wasm32_emscripten examples/2048/`\n- gg: implement Android specific APK asset loading for the `create_image` function (#19015)\n- sync: make sync.Direction public (#19047)\n- time: store time with nanosecond resolution in time.Time, deprecate Time.microsecond, add utility methods and tests (#19062)\n- time: add a format_rfc3339_nano() method to time.Time\n- time: add 'i', 'ii' in custom_format() for 12-hours clock(0-12-1-11) (#19083)\n- gg: expand the `-d show_fps` background, so fps>100 will not overflow it\n- Math.big: restore gdc_euclid, use it for smaller numbers, fix bench_euclid.v .\n- Add new generic `arrays.uniq, arrays.uniq_only, arrays.uniq_only_repeated, arrays.uniq_all_repeated, arrays.distinct`\n- builtin: add support for `-d builtin_writeln_should_write_at_once` and `-d builtin_write_buf_to_fd_should_use_c_write` (#19243)\n- builtin: always show the assert message, if it was defined in the source, in non test programs too (fix #19240)\n- time: check if a day is a valid day of its month (#19232)\n- toml: Add generic automatic decoding and encoding of simple structs, when they don't implement custom methods (#17970)\n\n#### Web\n- http: Request.host\n- net.ftp: fix dir() for file names, which contain spaces (fix #18800) (#18804)\n- net.http: make listener public, and add addr in Server struct (#18871)\n- net.http.chunked: return `!string` on decode (#18928)\n- net.conv: rename functions to match other langs, making them easier t… (#18937)\n- wasm: remove dependency on thirdparty/binaryen, webassembly backend rewrite (#18120)\n- wasm: add a -wasm-stack-top flag to compiler (#19157)\n- net.mbedtls: add SSLListener to allow creating SSL servers (#19022)\n- picoev, picohttparser: reimplement in V (#18506)\n- vweb: fix parsing of form fields, send with multipart/form-data (by JS fetch)\n- vweb: make vweb route paths case sensitive (#18973)\n- net.mbedtls: have shutdown close accepted connections too (#19164)\n- http: add support for stream connections, and custom .on_redirect, .on_progress, .on_finish callbacks to http.fetch() (#19184)\n- vweb: add a user_agent utility method to the vweb context (#19204)\n- vweb: avoid the controllers having to be defined in specific order (#19182)\n\n#### ORM\n- orm: fix inserting sequential values (id=0), in tables with an i64 primary field (#18791)\n- Add OR in where on update and delete (#19172)\n\n#### Database drivers\n- vlib: remove deprecated `pg`, `mysql`, `sqlite`, `mssql` modules. Leave only the `db.` prefixed `db.pg`, `db.mysql` etc\n- db.mysql: add the exec family of methods (#19132)\n- db.sqlite: add exec_param_many and exec_param methods (#19071)\n- db.sqlite: make functions return results, breaking change (#19093)\n\n#### Native backend\n- native: move functions out of amd64.v (#18857)\n\n#### C backend\n- Fix selector code to use interface method table on closure when needed (#18736)\n- Fix nested or expr call (fix #18803) (#18807)\n- Ensure that `<<` and `>>` has higher precedence in the generated C code, than arithmetic operations (diff between C and V precedences) (#18814)\n- Fix cross assign with aliased array (#18830)\n- Fix generated code for returning generic result/option to comptime var (#18834)\n- Fix option map with fn type value (#18849)\n- Fix returning an option tuple - `fn f() ?(int,int) { return g() }` (#18851)\n- Fix printing multiple fixed array (fix #18866) (#18879)\n- Fix infix expr with number overflow (fix #18905) (#18936)\n- Remove \\r for consistency (#18962)\n- Allow dump(unsafe{nil}) and dump(voidptr(123)) in the same program\n- Implement fixed array of threads wait() (#19032)\n- Fix an error with ptr interpolation (fix #19048) (#19049)\n- Fix spawn call fn struct field(fix #18862) (#19096)\n- Fix bootstrapping on older macOS Catalina\n- Fix alias of array method call(fix #19125) (#19129)\n- Simplifications and clean up.\n- Fix mixed fixed array and array initializing (#19246)\n- Fix array sort with fn call parameter (fix #19220) (#19221)\n- Fix generic struct with option fn field (#19218)\n- Fix comptime assign with generic result return type (#19192)\n- Fix match with comptime if expr in branch (#19189)\n\n#### Tools\n- ci: add v-analyzer builds (#18835)\n- ci: cleanup more the contents of the generated v_linux.zip, v_macos.zip, and v_windows.zip, use -skip-unused\n- tools: fix vcomplete for zsh (#18950)\n- tools: support a toc for projects, with single exposing module, in `v doc` (#19001)\n- Add support for `v should-compile-all -c examples/`, which will delete all the produced executables at the end\n- vgret: add install commands for ubuntu and arch to doc string (#19247)\n- fast.v: add favicon to the html produced by fast.v\n- vpm: implement multithreading (#19208)\n- Make performance_compare.v more robust and easier to use, by allowing `v run cmd/tools/performance_compare.v` too\n- Improve oldv windows support, make it use -municode for windows builds, make it support cmd.exe\n- Make repeated runs of `oldv SAME_COMMIT -c \"./v file.v\"`, not use the network at all\n- Help: add link to the TESTS.md at the bottom of `v help test`, run CI checks on help markdown files as well\n- v.builder: show the number of files, types, modules, when a program is compiled with -stats\n- Improve the output of parser_speed.v and scanner_speed.v\n\n\n## V 0.4\n*1 July 2023*\n\nThis release has a combined changelog from 0.3.1 to 0.3.5.\n\nYou can read it here:\n\nhttps://github.com/vlang/v/blob/master/changelogs0.x/0.4.md\n\n## V 0.3.5\n*29 June 2023*\n\n#### Improvements in the language\n- **Coroutines with a scheduler**. Only Linux/macOS for now, requires `-use-coroutines` and\n  `coroutines.sleep()` instead of `time.sleep()`. They work with IO and net, but not with GC\n  for now.\n- `spawn` now spawns system threads, `go` spawns coroutines.\n- Static type methods: `Foo.new()` to replace factory functions like `new_foo()`.\n- Smartcasting with complex conditions:`if sum_type is Foo && !sum_type.is_info && get_name(sum_type.info.name) == 'foo' `.\n- Functions can now return fixed size arrays.\n- Enum values now can have attributes.\n- Generic functions as function parameters are now supported: `fn f[T](x T, i int, f_ Fn[T]) T { `.\n- Anonymous structs can no longer have attributes.\n\n#### Breaking changes\n- `byte` deprecated in favor of `u8` (`byte` is automatically converted to `u8` by vfmt).\n\n#### Checker improvements/fixes\n- Disallow `Result` type aliases (`type Foo = !Bar`) and `Result` in maps (`map[key]!Type`).\n- Add a missing check for taking address of literal value member.\n- Fixed map initialization for maps with option values.\n- Allow `a << none`, where `a` is `[]?&int`.\n- Disallow multiple `else` branches in a match.\n- Fix index expression with sumtype of array types.\n- Remove hardcoded check for function calls for `C.stat`, `C.sigaction`, etc.\n- Fix multiple embedded external module interface.\n- Fix missing check for diff type on map value declaration.\n- Simplify error handling in the checker (#18507).\n- Option alias fixes.\n- Fix alias to struct ptr on struct init.\n- Sumtypes can no longer hold references.\n- Fix a bug checking generic closures.\n- A hard to reach limit of 1 million iterations for resolving all generics.\n- Fix missing check for unwrapped shift operation.\n- Fix enum max value validation.\n- Add a missing mutability check for `array.delete` calls.\n- Disallow `_ = <- quit`.\n- Disallow type matching with primitive vars.\n- Warning instead of error for unnecessary brackets in if/match.\n- Include import aliases when checking for import duplicates.\n- Fix inferring generic array type in nested call.\n- Allow casted `enum val` and `const` as fixed array size.\n- Disallow multiple return values in const declarations.\n- Fix contains() with array of interfaces.\n- Disallow mut for blank idents.\n\n#### Standard library\n- json: Enum value string serialization supports `[json:'alias']` to change its string values.\n- Struct fields can now be skipped during JSON/ORM serialization via `[json:'-']` and `[sql:'-']`,\n  in addition to `[skip]`. This allows having custom behavior for different serialization methods.\n- builtin: heap usage API (gc_memory_use() and gc_heap_usage())\n- math.big: refactoring, gcd fixes/improvements, overflow fixes, `mod_inverse`.\n- flag: fix finalize with multiple shortargs.\n- runtime: add new functions total_memory/0 and free_memory/0.\n- time: small cleanup of parse_iso8601 comments, make the C.strftime declaration forwards compatible\n- stbi: allow customization of number of channels in `stbi.load()`.\n- stbi: add a `resize_uint8` function for resizing images in memory.\n- time, x.json2: improve iso8601 time decoding.\n- builtin: zero out internal map/array pointers on m.free(), to reduce the work for the GC\n  mark phase for non escaping maps/arrays, used in hot loops.\n- time: add more detailed error descriptions, add custom format parsing with time.parse_format.\n- sync: add Mutex.destroy and RwMutex.destroy methods.\n- datatypes: add Bloom filter.\n- rand: add missing rand.u16(), update doc comments, add test.\n- builtin: speed up string methods with vmemcpy instead of `for` loop for copying data.\n\n#### Web\n- The builtin websocket library is now thread safe.\n- Enhanced builtin csrf protection in vweb.\n- vweb: ability to set and get values on vweb.Context.\n- vweb: support for host specific static files.\n- vweb: host option added to controller, and a new host attribute.\n- vweb: middleware docs improved; same with docs for `[vweb_global]` and `shared`.\n- vweb: return 404 on file not found.\n- net.http: copy IANA's list of methods to the http.Method enum.\n- net.conv: use a pure V implementation instead of C.hton etc.\n- net.html: `get_tag()` methods to find first tag occurrence.\n- net.html: fixed text parsing for inline tags.\n- net.html: fix parsing of nested quoted strings in code tags.\n- picoev: FreeBSD support.\n\n#### ORM\n- Fixed a foreign key bug that could result in an extra insert.\n- Comptime bug with `[skip]` and `[sql:'-']` fixed.\n- Checker error for unsupported field types.\n- Allow structs without the id field, more flexible primary keys.\n- Improved docs and examples.\n- Uninitialized structs are no longer inserted into related tables.\n\n#### Database drivers\n- mysql: TIMESTAMP support.\n- mysql: allocate memory for each string and blob dynamically depending on its value length.\n- mysql: add the ability to commit transactions.\n\n#### Native backend\n- Refactoring, splitting large files into multiple.\n\n#### C backend\n- Fix code generation for generic unions.\n- Fix `[N]chan` (fixed arrays of channels).\n- Fix nested fixed array instantiation.\n- Fix fixed array of map.\n- Fix stringification of usize struct fields (before, they were treated as 32 bit *signed* numbers).\n\n#### Comptime\n- A new `$res` comptime function to get returned value in defer block (#18382).\n- Fix comptimeselector option propagation.\n- A mutability check for comptime assignments.\n- Fix comptime assigning to sumtype or indexexpr.\n- Make comptime calls work with or-block.\n\n#### Tools\n- A new VPM site: vpm.vlang.io. A better design, discoverability of packages, descriptions, most downloaded packages etc.\n- vpm: installation of mixed modules.\n- `v ls --install -p D:\\path\\vls.exe` to install a local vls executable.\n- vdoc: highlight comments with gray color.\n- vet: allow vetting files with global variables.\n- Make util.launch_tool/3 more robust, by recompiling V tools always in a known current working folder.\n\n\n\n## V 0.3.4\n\n*30 Apr 2023*\n\n#### Breaking Changes\n\nThe following changes may break compilation of existing code or change behavior at runtime:\n\n- `json`: enums are serialized as strings by default, `[json_as_number]` attribute can be used for\n  the old behavior.\n\n  If you are serializing enums to JSON in your application, then you will need to add the\n  `[json_as_number]` attribute to keep the old behavior!\n\n- Variable shadowing has been completely banned (previously variable names could conflict with\n  module names).\n\n#### Web\n\n- vweb now supports live page reloading.\n  The web app is instantly updated in the browser (no need to refresh the page)\n  every time a **.v** or a **.html** file is changed.\n- vweb is now significantly faster and more stable under load, due to a new multithreaded worker\n  pool, which is much more efficient at spreading the workload among all threads equally.\n- vweb now supports middleware.\n- vweb now supports controllers.\n  It's now possible to have multiple app structs to better separate logic.\n- vweb now supports overridable `.not_found()` method for custom 404 pages in vweb.\n- vweb now uses database pool.\n- Fixed multipart form parsing in vweb.\n\n#### Backends\n\n- A new pure WASM backend, based on binaryen, a WASM `builtin` module, and a pure V WASM serialization library.\n- Lots of fixes and new features in the native backend, including making codegen logic platform independent.\n- Now code generated by the С backend, can be compiled by a C++20 compiler.\n- C backend does not generate unused interface functions now.\n\n#### Compiler CLI\n\n- `v share file.v` for sharing code via the playground.\n- `v up` speed up for when it hasn't been run for a long time (**vc/** bootstrapping has been\n  optimized).\n- `v init` no longer overwrites existing `src/main.v`.\n- `v self` now uses a faster TCC backend on macOS (Intel/Apple Silicon), just like on Windows/Linux.\n- A new command line flag `-e` for running short V programs on command line: `v -e \"println(2+5)\"` (\n  works just like in Perl).\n- A new `-ldflags` option, in addition to `-cflags`. Works just like LDFLAGS in C.\n\n#### ORM\n\n- All ORM queries now return `![]` (`Result` of an array).\n  This allows handling/propagating DB errors and simplifies working with ORM (one way).\n- Many ORM improvements: type checks for `limit/offset/order by/where`; support of reference objects\n  in `insert`; struct fields can be used with `limit/offset`; `Connection` interface.\n- ORM now supports the `like` operator:\n  ```v\n  users := sql db {\n      select from User where name like 'Bob%'\n  }\n  ```\n- A new `-d trace_orm` option to see all SQL queries generated and used by V ORM and\n  `-d trace_pg_error` to trace PG errors.\n\n#### Standard Library\n\n- Added new `termios` module.\n- `net.ssl`: types using ssl contexts can now be converted to strings via `.str()`/printed\n  via `println()`.\n- `v.reflection`: added type symbol info metadata.\n- `crypto` and `math` modules have been updated to use `Result` instead of `Option`.\n- `datatypes.LinkedList[map]` now works correctly.\n- `urllib.Values.get()` now returns an Option.\n- `strconv`: `v_printf()` was made private, `v_sprintf()` was deprecated. String interpolation\n  should be used instead.\n- `net.http`: mime types have been updated to include all official types.\n- `gg`: `create_image()` now returns `!Image` instead of `Image`, allowing to handle errors.\n- `sokol`: errors during image creation no longer result in a panic, but can be handled by the\n  programmer.\n- `sokol`: macOS apps can now be quit using **Cmd+Q**.\n- `os.hostname()` and `os.loginname()` now return `Result`.\n- `strconv.atoi` optimizations.\n- `println()` now supports arrays with recursive references.\n- `termux`: support for cross-compilation from termux to other platforms.\n- `readline` module now works much better on macOS: key navigation, history, etc (now on par with\n  Linux).\n- `os`: fixed a memleak in `getline()`.\n- `os.Process` now has a `create_no_window` option (Windows only).\n- `os.Process` now has a `set_work_folder()` method to set the initial working folder of the new\n  child process.\n\n#### Option as a first class type\n\nFinal steps in making the Option type a first class type:\n\n- If guards now work with struct fields which are `Option` functions.\n  Such fields can now also be assigned to other fields/variables.\n- Option receivers can no longer have methods.\n- `none` can now be cast to all `Option` types, including aliases.\n- Option references are now supported: `?&Type`.\n- Arrays of `Option`s are now allowed.\n- Allow `foo := Foo{}`, when `Foo` has an Option field, that is a struct, that has a `[required]`\n  tag on its fields.\n\n#### Compile-time Reflection\n\n- Compile-time interface fields evaluation.\n- Compile-time enum evaluation:\n  ```v\n  $for item in MyEnum.fields {\n      println(item.value)\n      println(item.name)\n  }\n  ```\n- Added `$option` as a compile-time reflection type representing an any Option type.\n- All special compile-time reflection types are now lowercase (`$int`, `$enum`, `$option`, etc).\n\n#### Checker Improvements/Fixes\n\n- Enums can no longer be initialized like structs.\n- Capture variables can no longer shadow anonymous function params.\n- Mixing multi-return results with other types in return statements is no longer allowed.\n- Assigning anonymous structs to named structs is no longer allowed.\n- `[required]` fields are now checked for embedded structs.\n- Fixed a bug with closures with fixed array variables.\n- Builtin methods `first/last/repeat` can now be used in custom user types (previously they only\n  worked in builtin arrays).\n- Generic struct initialization no longer needs explicit types to be provided:\n  ```v\n  struct Foo[T, U] {\n  \ta T\n  \tb U\n  }\n\n  foo := Foo{\n  \ta: 2\n  \tb: 'x'\n  }\n\n  println(foo)\n  ```\n- unsafe: dereferencing nil references is no longer allowed in the following case:\n  ```v\n  a := unsafe { nil }\n  println(*a)\n  ```\n\n#### OSes\n\n- Added basic QNX support.\n\n#### Other changes\n\n- Lots of documentation/readme improvements.\n- Lots of playground improvements: [play.vlang.io](https://play.vlang.io), including a really cool\n  feature: \"Show generated C code\".\n- A new `[spawn_stack: 131072]` function attribute for controlling the max size of the stack of the\n  spawned threads.\n- Channel pop now works with an `or` block: `ch := <-self.item or { return none }`\n- `it` has been renamed to `index` in array inits.\n- \"Is V still fast?\" web-page has been sped up by splitting the result table into multiple years.\n\n#### Development\n\n- GitHub Copilot summaries in PRs.\n\n## V 0.3.3\n*30 Jan 2023*\n#### Improvements in the language\n- String interpolation simplified to just '${name}', enforced by vfmt, and updated in the entire code base.\n- `go foo()` has been replaced with `spawn foo()` (launches an OS thread, `go` will be used for\n  upcoming coroutines instead).\n- vfmt now supports `// vfmt off` and `// vfmt on` for turning off the formatting locally for short snippets of code.\n  Useful for keeping your carefully arranged matrices intact.\n- Match branch range expressions with consts: `match x { const1...const2 {} }`\n- Hot code reloading via `[live]` is now supported in imported modules, not just the main module.\n- Syntax sugar for map inits without needing explicit casts for interfaces: `all.children := { \"abc\": rect, \"def\": ui.rectangle()}`.\n- `$embed_file()` fixes, including variable args support.\n- `none` fixes: no longer allowed to be used as a separate type, `dump()` support, not allowed inside `unsafe`.\n- Const functions: `const y = term.yellow`, then `println(y('abc'))`.\n- Builtin type names can no longer be used as identifiers.\n- Generic `typeof[T]()`, `sizeof[T]()`, `isreftype[T]()` functions.\n- Deprecated `-error-limit` in favour of the documented `-message-limit` option.\n- Maps now support aliased keys.\n- Operator overloading now works with reference types.\n- Generic struct inits with nested generic structs and generic optional types are now allowed.\n- During array creation, `len:` is required when using default values for the array.\n- Optimized one byte `[]u8` arrays creation.\n- Recursive aliasing is no longer allowed (e.g. `type Alias = map[string]Alias`).\n\n#### Breaking changes\n- `[]` is now used for generics instead of `<>`.\n- Accessing a pointer map value requires an `or {}` block outside `unsafe`.\n\n#### Checker improvements/fixes\n- Lots of fixes in the type checker.\n- Int signedness mismatch is now checked: `cannot use literal signed integer as u8`.\n\n#### Standard library\n- `math.vec` module for generic vector math including 2D, 3D, and 4D vector operations.\n- Builtin stb_image.h used by gg has been updated to the latest v2.28.\n- All of vlib has been updated to use separate Option/Result types.\n- To avoid confusion, all references in the code and documentation to `Optional` have been replaced with `Option`.\n- `gg.Context` pipeline has more effects, including the `additive` effect.\n- Much cleaner eof checks in `os`: refactor `err == IError(os.Eof{})` to `err is os.Eof`.\n- Lots of work on `x.json2`, the pure V json encoder, soon to become official.\n- New `v.reflection` module for runtime reflection.\n- Improved `os.mv()`, which now works consistently even across different windows drives/mount points.\n- `string.trim_indent()`, useful with multi line strings, that start/end with new lines and indentation.\n- Reduced memory consumption in the `crypto` modules.\n- Official V UI library is now licensed under MIT.\n- Deprecated `math.util` and `math.mathutil` have been removed.\n- New time format support: `time.format_rfc3339()`.\n- `encoding.html.escape()`.\n- All public functions in the `hash` and `encoding.base32` modules have been documented.\n- New `crypto.pem` module.\n- New `map.reserve()` method.\n\n#### Web\n- Improved vweb stability under load.\n\n#### ORM\n- Various ORM fixes and improvements, including string interpolation support, type checks, fn calls in `where`.\n\n#### Database drivers\n- VFS support in the builtin `sqlite` module; `sqlite.get_affected_rows_count()`.\n- Improved `pg` compatibility with older PostgreSQL versions before 2014.\n- `sqlite`, `pg`, `mysql` have been moved to `db.sqlite`, `db.pg`, `db.mysql`.\n\n#### Native backend\n- Operator support for floats, multi return.\n\n#### Comptime\n- Improved compile time checks, like `$if x is Type {`; `$if T in [$Array, $Struct, $Alias, $Function] {`.\n- `$for in` works with alias types.\n- New comptime features for fields: `field.is_<field>`, `field.is_alias`, `field.is_enum`.\n\n#### OS support\n- Installation instructions for using V on NixOS.\n- Better `make` support for OpenBSD.\n- Much improved experience for `v install pcre` on Windows (it now bundles its own .c files, so it compiles cleanly, even if the platform does not have another pcre package installed).\n- V can now be compiled with tcc on latest macOS and Apple Silicon.\n\n#### Tools\n- fast.vlang.io fixes & improvements, new server.\n- New official IntelliJ plugin: https://intellij-v.github.io.\n- Lots of new language documentation, a nicer table of contents.\n- Improved documentation for most of the vlib modules\n- `make.bat` & `v up` improvements on Windows.\n- TeamCity test runner support via `v -test-runner teamcity foo_test.v`.\n- CI optimizations for faster runs.\n- New official AdventOfCode repo with AOC solutions, also added to CI.\n- More detailed timings in `v -show-timings`.\n- `v new <name> web` for quickly scaffolding new web projects.\n\n\n## V 0.3.2\n*31 Oct 2022*\n\n#### Improvements in the language\n- New simplified string interpolation: `println(\"Hello, {name}!\")`. It will be the only way, old syntax (`${name}` and `$name`)\n  will be deprecated.\n- Easier custom error creation: `return MyCustomErr{}` instead of `return IError(MyCustomErr)`.\n- All floats outputs now have `.0` conditionally appended to them to improve clarity.\n- Custom integer enum types: `enum Xyz as u64 {`.\n- AST transformer fixes and optimizations.\n- Stylistic improvements and bug fixes in vfmt.\n- Casting integers to enums now requires `unsafe{}`.\n- Improved error and warning messages.\n- Parallel compilation now uses `sync.Pool`.\n- `-skip-unused` fixes, soon to be made the default.\n\n#### Breaking changes\n*No breaking changes*\n\n#### Checker improvements/fixes\n- Improved type checker: lots of new type checks and fixed checker bugs.\n- Unused last expression in `if` is now checked.\n- Anonymous structs visibility issues fixed.\n\n#### Standard library\n- `net.ssl` has been migrated from a dynamically linked OpenSSL to a statically linked Mbed TLS. This means that V binaries will no\n  longer have an OpenSSL dependency. OpenSSL can still be enabled via `-d use_openssl`.\n- msgpack module for decoding/encoding msgpack. (`v install msgpack`)\n- Most of vlib has been updated to use the new Option/Result types.\n- net, net.http, vweb bugs and fixes.\n- QuadTree and RingBuffer types in `datatypes`.\n- Forward iterator for `datatypes.LinkedList<T>`, forward and backward iterators for `datatypes.DoublyLinkedList<T>`.\n- A new `maps` module, similar to existing `arrays`. It has generic `filter`, `flatten`, `invert`, `to_map`, `to_array`, `from_array`\n  functions.\n- `utf8.is_number()`, `utf8.is_space()` functions.\n- New `encoding.base32` module.\n- `gg.TouchPoint` to differentiate between different types of touch input.\n- `str.int()` conversion speedup (without -prod).\n\n#### Web\n- `vweb.csrf` module.\n\n#### ORM\n- Support parenthesized expressions like `select from User where (name == 'Sam' && is_customer == true) || id == 1`.\n\n#### Native backend\n- Lots of native backend improvements, including library calls, comptime conditionals, enums, method definitions/calls, structs.\n\n#### V interpreter\n- Some further interpreter work.\n\n#### C backend\n- cgen cleanups.\n\n#### OS support\n- Removed the need for the `[console]` attribute in Windows GUI apps.\n- More precise WINAPI declarations for easier integration on Windows.\n- More CI tests on FreeBSD.\n\n#### Tools\n- New stunning playground with an improved look and feel, a much better and more responsive editor,\n  code sharing by link, more convenient keyboard control, reusability for potential embedding:\n  https://play.vlang.io.\n- Improved call tracing via `-trace-calls`.\n- Lots of documentation improvements, including a better documentation of the recent Option/Result split.\n- V REPL: Home/End keys support. Lots of clean up.\n\n\n\n\n## V 0.3.1\n*31 Aug 2022*\n\n#### Improvements in the language\n- Anonymous structs.\n- Lots of bug fixes: 90% of all bugs ever submitted are closed.\n- New keyword/type: `nil`. Only to be used inside `unsafe`. Replaces `voidptr(0)`.\n- V can now find code in the `src/` directory. This allows making V repos much cleaner.\n- Support `assert condition, extra_message`, where the `extra_message` will be evaluated and shown if the assertion fails.\n- Operator overloading now works with aliases and generics.\n- Scanner optimizations.\n- Using C's #define is no longer allowed in normal V code, only in `.c.v` files.\n\n#### Breaking changes\n- Anonymous sumtypes have been removed (deprecated for now) due to complicating the language and the compiler too much.\n\n#### Checker improvements/fixes\n- More type checks.\n- Lots of fixes in `shared` types.\n\n#### Standard library\n- `os.mkdir()` now has an optional `mode` parameter.\n- `encoding.csv` is now generic, supports bools, accepts a custom delimiter, and is compatible with io.Reader/io.Writer.\n- `datatypes` module now uses operator overloading.\n- All `datatypes` types can be converted to V arrays.\n- `smtp` improvements including multiple recipients and base64/utf8 support.\n- `arrays.carray_to_varray<T>()` for converting C arrays to V arrays.\n- `strconv.v_sprintf()` has been deprecated in favor of string interpolation.\n- TOML module now supports `[toml:...]` attributes, just like the JSON module.\n- `os.walk()` is no longer recursive (still works the same).\n- `io` has been migrated to `Result`.\n- Third party window control in Sokol.\n- `string.replace_char()`, `math.round_sig()`.\n- Improved multiplication performance in `math.big`.\n\n#### Web\n- `net.urllib` ipv6 support.\n- `net.Http.Response.text` renamed to `body`.\n- `net.websocket` timeout is now configurable.\n\n#### ORM\n- ORM functions now return `Result`, so the errors can be handled.\n\n#### Database drivers\n\n#### Native backend\n- Major improvements to the fast native backend including linking support on Linux. The goal is to be able to self host V soon.\n\n#### V interpreter\n- V interpreter improvements.\n\n#### C backend\n- Parallelized cc step. Speeds up -prod and clang/gcc compilation by 300-500% (depending on\n  the number of cores). Experimental and hidden behind a -parallel-cc flag, soon to be the default.\n- Intel C compiler support.\n- Go backend fixes.\n- `#preinclude` for low level C interop.\n\n#### OS support\n- Full termux support via `$if termux {`, more predictable logging on Android.\n- Older macOS support (<10.12).\n- Windows code has been removed from `v.c` distributed on non-Windows systems. (`v_windows.c` is used on Windows.)\n\n#### Tools\n- DOOM is now translated/compiled and launched on CI servers. A screenshot of the running game\n  is made via `vgret` and is compared to the expected result.\n- VLS performance improvements, especially on Windows.\n- `v ls` tool for installing, for updating, and for launching VLS (V Language Server).\n- `v doc` now has syntax highlighting.\n\n\n\n\n## V 0.3\n*30 Jun 2022*\n- C to V translation via C2V: `v translate file.c`. (Demo video: [Translating DOOM from C to V, building it in under a second and running it!](https://www.youtube.com/watch?v=6oXrz3oRoEg))\n- Lots of bug fixes in V, cgen, and C interop to allow running translated DOOM.v.\n- Programs built with the V compiler no longer leak memory by default.\n- Closures. All operating systems are supported. ([Demo](https://x.com/v_language/status/1528710491882852352))\n- `Option` and `Result` are now separate types: `?Foo` and `!Foo` respectively. Old code will continue working for 1 year and will result in a warning/hint.\n- Hundreds of new checks in the type checker.\n- All V's backends have been split up into separate processes.  As the result, building V got 26% faster.\n- Maps and arrays can now return options: `m[bad_key] or { ... }`, `if x := arr[key] { ... }`.\n- `ustring` has been replaced with `[]rune` (works just like in Go).\n- Maps can now have non-string keys.\n- A new compiler pass for transforming the AST (doesn't slow the compiler too much, adds about 25ms to `v self`). It eliminates unreachable branches and performs other simple optimizations and transformations.\n- C backend is now parallel (just the cgen part for now).\n- Lots of compiler source code clean up and minor optimizations. The compiler got ~30% faster according to fast.vlang.io.\n- Better compiler source code organization (absolutely necessary as it's surpassed 100k loc).\n- The naming of V's integer types is now more consistent: `byte` has been renamed to `u8`.  Old code will continue working for 1 year and will result in a warning/hint.\n- The typo detector now highlights the suggested name so that it's more visible.\n- `datatypes` module now has `Heap, Queue, Stack, BSTree, LinkedList`.\n- Interfaces can now be embedded (like structs).\n- vlib now has a TOML parser, fully compatible with TOML 1.0.\n- Lots of work done on the V.js backend, including the graphics library, which has been ported to V.js.\n- JS promises, await (V.js).\n- It's now possible to do more complex array initialization by using each individual element of the array (`[]int{init: it}`).\n- Unsigned right shift operators `>>>` and `>>>=` have been added to V. (They work exactly like in Java.)\n- `-nofloat` option, which is useful for writing kernels and for embedded systems without an FPU (used in Vinix).\n- Generic interfaces.\n- TCC is now bundled with the language, this allows building V programs without an external C compiler dependency.\n- Null can be used in `unsafe` only (for example, for C interop).\n- Pointer arithmetic and comparing pointers to numbers is now also only allowed in `unsafe`.\n- Inline sumtypes.\n- New module `compress.gzip`.\n- Lots of `net`/`net.http`/`vweb` fixes (also used for the upcoming Gitly launch).\n- IPv6 support.\n- `net.http` headers are now enum fields instead of strings. This allows to avoid typos and offers autocomplete.\n- Struct field deprecation.\n- Static GC (no longer a dynamic lib dependency).\n- New various algorithms for random number generation: MT19937RNG, etc  (module `rand`).\n- Fix immutability bugs that allowed to bypass compiler immutability checks and modify const/immutable values.\n- Lots of fixes in the JSON serializer.\n- Heap allocated only structs marked with `[heap]`.\n- Significantly improve lots of error messages, make them more clear, suggest hints.\n- Bug fixes and new features in the pure V `regex` module.\n- Lots of new drawing functions in the graphics module (like `gg.draw_polygon_filled(), gg.draw_arc_empty()` etc)\n- Builtin FPS display in `gg`.\n- Latest Sokol backend in `gg`.\n- Advanced CI tests for the graphics module. Graphical apps are run on GitHub Actions instances, their output is saved to an image, uploaded, and compared to the expected result.\n- More bug fixes in generics.\n- Bug fixes in aliases. They can now fully replace the types they alias.\n- `[minify]` struct attribute for struct minification.\n- `for in` now works with fixed arrays.\n- The parser was made a bit faster by skipping `vfmt` code when not in `vfmt` mode (by using `-d vfmt`).\n- Lots of vfmt improvements, especially with comments.\n- Experimental `#[index]` syntax for negative indexing (like in Python, but needs special syntax instead of being used by default).\n- Visibility bug fixes in modules (`pub`).\n- Error propagation in complex expressions (e.g. `foo(bar()?)`).\n- Optionals can now by used in consts (`const x := opt() or {}`).\n- Lots of new documentation, including vlib modules documentation and the official V Documentation.\n- vpm improvements (including a new vpm mirror).\n- `sync` improvements including `sync.thread_id()`, `sync.Once`..\n- V can now be used to generate object files (`foo.o`) that can be used in existing C projects.\n- `-usecache` and `-skip-unused` fixes, they are close to being on by default.\n- Lots of Windows issues fixed.\n- Amazon Linux support.\n- Fixes in shared maps and arrays.\n- `term.ui` improvements, including multi byte/UTF-8 events.\n- New `crypto` modules, including `crypto.des, crypto.cipher, crypto.blowfish`.\n- Comptime fixes.\n- 4 byte bool option (`-d 4bytebool`) for compatibility with some C software.\n- `strconv` (pure V formatting module used in string interpolation) fixes and performance improvements.\n- ORM fixes (pg, mysql, sqlite). Tables are now created automatically based on the V structs, no more need in sql files to create tables for apps.\n- `volatile` keyword.\n- `\"stringliteral\".len` optimization (replaced by the actual number by the new `transform` pass).\n- Lots of inline assembler improvements (it's used a lot in Vinix).\n- Many new functions in the `math` module.\n- Separators in number literals: `1_000_000`.\n- `strings.Builder` optimizations and new methods.\n- Autofree fixes (still not production ready, hidden behind the `-autofree` flag).\n- Lots of Android fixes in V and in vab.\n- Lots of commits to the native backend (amd64/arm64).\n- V interpreter fixes. (Still at an early stage.)\n- Go2V translator has been started by the community, and can already translate simple programs.\n- An early version of the Go backend (`v -b go -o file.go file.v`).\n\n## V 0.2.4\n*30 Aug 2021*\n- Introduce `isize` and `usize` types, deprecate `size_t` in favor of `usize`.\n- Add `datatypes` and `datatypes.fsm` modules.\n- Add `compile_error` and `compile_warn` comptime functions.\n- Bare metal support. Vinix OS kernel is now being developed in V.\n- Builtin web framework vweb is now multithreaded, all CPU cores are used.\n- String interpolation and struct stringers are now implemented in pure V\nwith a much cleaner and faster implementation. Previously libc's `sprintf`\nwas used.\n- Improved `unused variable` warning. Assigning to a variable no longer marks it as used.\n*... lots of missing changelog for this version, sorry (will update a bit later)*\n\n## V 0.2.2 - 0.2.3\n*22 Jan 2021*\n- Allow interfaces to define fields, not just methods.\n- `vweb` now uses struct embedding: `app.vweb.text('hello') => app.text('hello')`.\n- Consts can now be declared outside of `const()` blocks: `const x = 0`.\n- Overloading of  `>`, `<`, `!=`, `==`, `<=` and `>=` operators.\n- New struct updating syntax: `User{ ...u, name: 'new' }` to replace `{ u | name: 'new' }`.\n- `byte.str()` has been fixed and works like all other numbers. `byte.ascii_str()` has been added.\n- Smart cast in for loops: `for mut x is string {}`.\n- `[noinit]` struct attribute to disallow direct struct initialization with `Foo{}`.\n- Array decompose: `[1, 2, 3]...` is now `...[1, 2, 3]`\n- Treating `enum` as `int` and operations on `enum` except `==` and `!=` are removed for strict type checking.\n- Support `[manualfree] fn f1(){}` and `[manualfree] module m1`, for functions doing their own memory management.\n- Allow usage of `<` and `>` operators for struct in `.sort` method for arrays, i.e. `arr.sort(a < b)`.\n- Auto generate assignment operators like `+=`, `-=`, `*=`, `/=` and `%=` if the operators are defined.\n- Colorize and improve failing tests output.\n- Fix `go` with a generic function: `go test<string>(c, 'abcd')`.\n- Add comptime `x := $embed_file('v.png') println(x.len) println(ptr_str(x.data()))`, for embedding files into binaries.\n- Advanced vdoc search on mobile layout.\n- string's `left()`/`right` were removed in favor of slicing syntax: `str[..pos]`.\n- gg: native graphics mode on macOS/iOS (using Cocoa Drawing API).\n- Full path to consts must be specified everywhere. This makes it easy to distinguish them\nfrom local variables.\n- `__offsetof` for low level needs (works like `offsetof` in C).\n- vfmt now preserves empty lines, like gofmt.\n- Support for compile time environment variables via `$env('ENV_VAR')`.\n- Allow method declaration of `==` and `<` operators and auto generate `!=`, `>`, `<=` and `>=`.\n- support `dump(expr)`, i.e. tracing of both the location, name and value of an expression\n- deprecate os.exec in favour of os.executable() which does *NOT* return an option, when the command was not found\n\n## V 0.2.1\n*30 Dec 2020*\n- Hashmap bootstrapping fixes.\n- Array decomposition to varargs: `fn sum(i ...int) int` => `a := [2,3,4] println(sum(a...))`\n- HTML module docs generated by vdoc now have global search.\n\n## V 0.2\n*22 Dec 2020*\n- Compile-time memory management via `-autofree` (not production ready yet). [Video demonstration](https://www.youtube.com/watch?v=gmB8ea8uLsM).\n- Channels and locks.\n- Thread safe typed arrays via keyword `shared`.\n- Struct embedding.\n- IO streams (`io.Reader`, `io.Writer` etc).\n- A powerful websocket module that conforms to RFC 6455 and passes the Autobahn test suite (498 client tests and 249 server tests).\n- The `net` module is now non blocking and is more feature complete providing similar API to Go.\n- V's graphics module now uses Metal/DirectX/OpenGL instead of just OpenGL.\n- V can now run in the browser via WASM and execute V code by translating it to JavaScript:\nhttps://v-wasm.now.sh\n- V binaries for Linux/Windows/macOS are now built and deployed automatically via GitHub Actions.\n- Smart casting for sumtypes and interfaces, including complex expressions: `if x.expr is int { println(x.expr + 1) }`.\n- Clean and easy way to sort arrays: `users.sort(a.name > b.name)`.\n- A huge amount of `vfmt` fixes and improvements. It has now reached a point where it can be safely used on any V source file.\n- A new CI job that runs `v fmt -verify` on the entire code base, a new command that makes sure the file/directory\nhas been vfmt'ed. This ensures that all code submitted to the V project is formatted.\n- A new tool `v vet` for analyzing the project and finding potential bugs and errors.\n- A new `term.ui` module for building dynamic terminal UIs with an example editor written in it.\n- Early iOS and Android support.\n- All missing ORM features from the old backend were brought back.\n- Magic `it` variable has been replaced with smart casts (the change is completely handled by vfmt).\n- Cross-compiling to Windows and Linux brought back.\n- C2V can now generate wrappers. Example: https://github.com/medvednikov/libsodium. (C2V will be released by 0.3)\n- C++ compiler support: code, generated by the C backend can now by compiled by C++ compilers.\n- Short generics syntax: `foo(5)` instead of `foo<int>(5)`.\n- Cached modules via `-usecache`. Faster compilation due to not needing to rebuild the entire vlib for\neach program. Will be enabled by default in 0.2.1.\n- New improved sum types implementation.\n- Lots of errors that happen often during the development cycle were turned into warnings to increase\n  development speed. They are still errors in production builds.\n- Labeled `break` and `continue`.\n- Lots of documentation. The official language documentation grew 3 times in size.\n- `modules.vlang.io` is now generated automatically on every commit.\n- Builtin compile-time JSON serializer now supports `time.Time`.\n- Fixes in type aliases, to make them behave just like the types they alias.\n- `array.contains(element)` is now generic.\n- Lots of improvements in the JS backend and its type system.\n- Simpler and more constinent function arg syntax: `foo(a int, b int, c string)` instead of `foo(a, b int, c string)`\n- Lots of fixes and optimizations in the hashmap.\n- Lots of missing checks in the type checker were added (for example, checking the correct usage of public struct fields).\n- Mutability bug fixes\n- Taking the address of a map value is no longer allowed, like in Go.\n- Matrix multiplication.\n- A new `#pkgconfig` flag to provide platform independent way to get compilation flags for C libraries/packages.\n- Explicit parentheses requirement in complex boolean expressions.\n- `println` was made even smarter, and can now handle complex types.\n- Precompiled text templates can now be used outside of vweb via `$tmpl()`.\n- Gitly, a big web application written in vweb has been released: https://github.com/vlang/gitly\n- `['/:arg1/:arg2/action']` vweb action attribute for easily getting query parameters assigned to method arguments.\n- Improved performance of text rendering, `gg.text_width()`.\n- Webview module in V UI.\n- Binary enum flags.\n- `[export]` attribute to change exported function name (for example for calling from a C library).\n- `unsafe` fixes and improvements.\n- Improvements to rand: `rand.ulid()`, `rand.uuid()`, a unified customizable PRNG API.\n- Hundreds of other fixes, features, and tests (from now on the changelog will be updated\nright away as the feature/bug fix lands).\n\n\n## V 0.1.27\n*5 May 2020*\n\n- vfmt has been re-written from scratch using the new AST parser.\n    It's much faster, cleaner, and can format\nfiles with compilation errors.\n- `strconv`, `sprintf`, and `printf` in native V, without any libc calls.\n- Interfaces are now a lot more stable and have all expected features.\n- Lots of x64 backend improvements: function calls, if expressions, for loops, local variables.\n- `map()` and `filter()` methods can now be chained.\n- New `[]int{cap:cap, len:len}` syntax for initializing array length and capacity.\n- New `is` keyword for checking the type of sum types and interfaces.\n- `as` can now be used to cast interfaces and sum types.\n- Profiling with `-profile`. Prints a nice table with details about every single function call:\n    number of calls, average time per call, total time per function\n- `import(xxx)` syntax has been removed in favor of `import xxx` for simplicity and greppability.\n- Lots of fixes and improvements in the type checker.\n- `time.StopWatch`\n- `dl` module for dynamic loading.\n- Automatic `str()` method generation for every single type, including all arrays.\n- Short struct initialization syntax for imitating named function args: `foo(bar:0, baz:1)`.\n- New operator `!in`.\n- Performance improvements in critical parts of the builtin data structures (array, map).\n- High order functions improvements (functions can now be returned etc).\n- Anonymous functions that can be defined inside other functions.\n- Built-in JSON module is back.\n- Lots and lots of new tests added, including output tests that test error messages.\n- Multiple errors are now printed, the compiler no longer stops after the first error.\n- The new JS backend using the AST parser (almost complete).\n- Variadic functions.\n- `net.websocket` module (early stage).\n- `vlib` is now memory leak free, lots of `autofree` improvements.\n- Simplified and cleaned up `cmd/v`, `v.builder`.\n- V UI was updated to work with the new backend.\n\n\n## V 0.1.25\n*1 Apr 2020*\n\n- The entire compiler has been re-written with an AST parser.\n    The code is now a lot cleaner and more maintainable.\n    ~15k lines of old compiler code were removed.\n\n## V 0.1.24\n*31 Dec 2019*\n\n- A new parser/generator built on top of an AST that simplifies code greatly\n    and allows to implement new backends much faster.\n- Sum types (`type Expr = IfExpr | MatchExpr | IntegerLiteral`).\n- B-tree map (sped up the V compiler by ~10%).\n- `v fmt -w`.\n- The entire code base has been formatted with vfmt.\n- Generic structs.\n- SDL module.\n- Arrays of pointers.\n- os: `is_link()`, `is_dir()`, `exists()`.\n- Ranging through fixed size arrays.\n- Lots of fixes in ORM and vweb.\n- The first tutorial: [building a simple web application with vweb](https://github.com/vlang/v/blob/master/tutorials/building_a_simple_web_blog_with_vweb/README.md)\n- Match expressions now must be exhaustive.\n- freestanding: `malloc()`/`free()`.\n- `++` is now required instead of `+= 1` for consistency.\n- Interpolated strings now allow function calls: `println('val = $get_val()')`.\n- `string.replace_each([])` for an efficient replacement of multiple values.\n- More utf8 helper functions.\n- `-prealloc` option for block allocations.\n- `type` aliases.\n- Running `v` with an unknown command will result in an error.\n- `atof` implementation in pure V.\n- Enums can now have negative values.\n- New `filepath` module.\n- `math.factorial`.\n- `ftp` module.\n- New syntax for casting: `val as Type`.\n- Fewer libc functions used (soon V will have no dependency on libc).\n\n\n## V 0.1.23\n*30 Nov 2019*\n\n- [Direct x64 machine code generation](https://github.com/vlang/v/issues/2849).\n    Hello world being built in 3 milliseconds.\n- Bare metal support via the `-freestanding` flag, to build programs without linking to libc.\n- Prebuilt V packages for Linux, macOS, and Windows.\n- `string.index()` now returns `?int` instead of `int/-1`.\n- Lots of fixes in Generics.\n- vweb framework for developing web applications is back.\n- Vorum, the forum/blogging software written in vweb, can now be compiled and has been added to CI.\n- REPL, `v up` have been split up into separate applications to keep the core V compiler small.\n- V now enforces short enum syntax (`.green` instead of `Color.green`) when it's enough.\n- V UI for macOS.\n- Interfaces have been rewritten. `[]interface` support.\n- `os.cp()` for copying files and directories.\n- Additional compile-time flags: `$if clang, msvc, mingw, x32, x64, big_endian, little_endian {`.\n- All C functions now have to be declared, all missing C functions have been defined.\n- Global variables (only with the `-enable-globals` flag)\n    for low level applications like kernels and drivers.\n- Nothing can be cast to bool (previously code like `if bool(1) {` worked).\n- `<<` and `>>` now work with all integer types.\n- V detects Cygwin and shows an error (V supports Windows natively).\n- Improved type checking of some operators (`%, |, &` etc).\n- Windows 7 support.\n- `println(true)` now prints `true` instead of `1`.\n- `os.exec()` now uses `CreateProcess` on Windows.\n- fast.vlang.io website for monitoring the performance of V after every commit.\n- On Windows Visual Studio is now used automatically if GCC is not installed.\n- vfmt!\n- Lots of cleaning up in the compiler code.\n- Multi-level pointers in unsafe code (`****int`).\n- MSVC backtrace.\n- `$if os {` blocks are now skipped on a different OS.\n- C string literals (`c'hello'`).\n- AlpineLinux/musl fixes + added to CI.\n- Inline assembly.\n- Clipboard module (Windows, macOS, X).\n- `foo()?` syntax for error propagation.\n- Docs have been migrated from HTML to `doc/docs.md`.\n- `eventbus` module.\n- Haiku OS support.\n- `malloc/free` on bare metal.\n- `utf8` helper functions (`to_lower()`, `to_upper()`, etc).\n- Optimization of `for c in str {`.\n- `string/array.left/right/slice/substr` were removed (use `[a..b]` slicing syntax instead).\n\n\n\n## V 0.1.22\n*28 Oct 2019*\n\n- Generic functions (`fn foo<T>(bar T) T {`) with varargs support.\n- `array[start..end]` and `string[start..end]` slicing syntax.\n- Optimized `array.filter()` and `array.map()`.\n- `sqlite` module.\n- Cached modules for faster compilation.\n- Dramatic compilation optimizations: [V now compiles itself in 0.10 - 0.30 seconds](https://github.com/vlang/v/wiki/The-V-language-now-compiles-itself-in-0.09-seconds)\n- V scripts (simpler and cross-platform alternative to Bash).\n- Infinite multi-dimensional arrays (`[][][]int`).\n- `unsafe`.\n- `[deprecated]` attribute.\n- `[if]` function attributes for compile time function exclusion for performance.\n- `switch` has been completely removed from the language and replaced by\n`match` everywhere.\n- `pub struct` and `pub const`, previously all structs and consts were public\nby default.\n- `musl` support (V can now run on, for example, Alpine Linux).\n- Module header generation. V now supports closed source modules, which are still\nused in some industries.\n- Constants were added to typo suggestions.\n- `color in [.green, .red, .blue]` now works without specifying `Color.green`.\n- V compiler is now a module that can be used by other programs.\n- Backtraces now have source lines on Linux.\n- `runtime.nr_cpus()`.\n- `fn init()` for module initialization.\n- `a in [1, 2, 3]` optimization: no array gets allocated.\n- Raw strings: `s := r'hello\\nworld'`.\n- `if a := func() { }` syntax for handling options.\n- f32/f64 comparison now uses machine epsilon by default.\n\n\n## V 0.1.21\n*30 Sep 2019*\n\n- `none` keyword for options.\n- Solaris support.\n- All table lookup functions now use `none`.\n- varargs: `fn foo(bar int, params ...string) {`.\n- Double quotes (`\"`) can now also be used to denote strings.\n- GitHub Actions CI in addition to Travis.\n- `-compress` option. The V binary built with `-compress` is only ~90 KB!\n- More memory management.\n- Unused modules result in an error.\n- \"Unused variable/module\" errors are now warnings in non-production builds.\n- Duplicate methods with the same name can no longer be defined.\n- Struct names must be capitalized, variable/function names must use snake_case.\n- Error messages are now even nicer!\n- Lots of fixes in automatic `.str()` method generation for structs and arrays.\n- ~30% faster parser (files are no longer parsed separately for each pass).\n- `_` is no longer a variable, but an actual syntax construct to skip unused values, like in Go.\n- Multiple returns (`fn foo() (int, string) {`).\n- `!` can now only be used with booleans.\n\n\n## V 0.1.20\n*17 Sep 2019*\n\n- JavaScript backend!\n- Hundreds of C warnings were fixed. `gcc v.c` now builds without\nany warnings.\n- The mutability check now applies to function args (mutable\nreceivers that are not modified result in a compilation error).\n- V tests now show how long each test took.\n- Official Android support (only console applications via Termux for now).\n- Typo check. If a variable/function/module etc is misspelled,\nV will suggest the correct name.\n- Lots of Microsoft C fixes, and a separate Travis instance for\nthis backend.\n- Bitwise operators `|`, `^`, `&` no longer work with booleans.\n\n\n## V 0.1.19\n*12 Sep 2019*\n\n- Lots of refactoring, simplifications, and optimizations in the compiler.\n- Experimental memory management at compilation (only for the V compiler itself for now).\n- Lots of ORM fixes.\n- Functions can now be inlined via the `[inline]` attribute.\n- New `mysql` module.\n- Better error format that is supported by all major editors (go to error).\n- Error messages now point to the actual place where the error happened.\n- Custom json field names: `struct User { last_name string [json:lastName] }`.\n- Raw json fields via the `[raw]` attribute.\n- All C code was removed from the `freetype` module.\n- `gg` module can now render all Unicode characters.\n- `[typedef]` attribute for imported C struct typedefs.\n- Support of Objective C interfaces (primarily for using Cocoa).\n- REPL: clear command and custom functions.\n- REPL tests (which are also used for testing certain compiler errors).\n- Syntax bug fixed: `foo[0] += 10` is now possible.\n- http: support plain HTTP protocol and follow redirects.\n- http: header data is now processed correctly.\n- net: basic UDP support.\n- `import const` was removed from the language.\n- `array.contains()` was removed from the language (`in` should be used instead).\n- `[0; len]` syntax was removed (replaced with a simpler `[0].repeat(len)`)\n- Primitive aliases were removed to simplify the language.\n- GitHub supports V now!\n- Backtraces are now printed on panics.\n- A new awesome `readline` module.\n- V.c is now regenerated automatically after every commit.\n- A bug with struct ordering was fixed, now structs can be declared in any order.\n- V modules can now be built with `v build module`.\n- `@FILE, @LINE, @FN, @COLUMN` for debugging.\n\n\n## V 0.1.18\n*16 Aug 2019*\n\n- Built-in ORM (`uk_customers = db.select from Customer where country == 'uk' && nr_orders > 0`).\n- Map initialization syntax: `m := { ‘foo’: ‘bar’, ‘baz’: ‘foo’ }`.\n- `map.delete(key)`.\n- `libcurl` dependency was removed from the `http` module.\n- All function arguments are now immutable by default (previously they could be\n  modified inside the function).\n- `http` functions now return options.\n- `sync.WaitGroup`.\n- `vweb` static files serving.\n- `crypto.rand` module.\n- `v up` to update V.\n- SChannel support on Windows.\n- `net.urllib` module.\n- vpm package manager, `v install`.\n- `()` are now required in complex bool expressions: `(a && b) || c` instead of `a && b || c`.\n- All arrays now have a default `.str()` method.\n- Bootstrapping V with MSVC.\n- Experimental `≠` etc support.\n- `encoding.csv` module.\n- `$if debug {` for running code in debug mode only.\n- Map struct fields are now initialized automatically, just like arrays.\n- Maps now support array values.\n- `json` functions can no longer be used if the `json` module is not imported.\n\n\n## V 0.1.17\n*29 Jul 2019*\n- `vweb` module for developing web apps in V.\n- vtalk, open source V forum software.\n- Generics (very limited right now, but they will be gradually improved).\n- Comptime codegen (`foo.$method()` where `method` is a string).\n- `@` for escaping keywords (e.g. `struct Foo { @type string }`).\n- Windows Unicode fixes (V can now work with non-ASCII paths etc on Windows).\n- Fix mutable args bugs + don't allow primitive arguments to be modified.\n- Declaring a mutable variable and never modifying it results in a compilation error.\n- Interactive debugging support.\n- `sync` module for Windows.\n- `#!` support on Unix systems (V scripts).\n- Lots of Visual Studio fixes.\n- `crypto.aes` and `crypto.rc4` modules.\n- Internal modules.\n\n\n## V 0.1.16\n*23 Jul 2019*\n- V can now be used with Visual Studio!\n- Hot code reloading now works with graphical applications (e.g. graph.v, bounce.v).\n- Compile time memory management for arrays.\n- High order functions.\n- `match` expression (replacing `switch`).\n- Import cycle detection.\n- `crypto/md5`, `crypto/sha256`, and `crypro/sha512` modules.\n- `os.executable()` - a cross platform function that returns full path to current executable.\n- `~/.vlang` and `VROOT` were removed entirely. The installation is a lot cleaner now.\n- V can now be packaged for all Linux distros.\n- Arch Linux package.\n- `string(bytes_buffer, len)`, `string(bytes_array)` casts.\n- Multiple `defer`s.\n- `key in map` syntax (replacing `map.exists(key)`).\n\n\n## V 0.1.15\n*15 Jul 2019*\n- FreeBSD, OpenBSD, NetBSD, DragonFly support.\n- Hot reloading now works with graphical applications: [bounce.v](examples/hot_reload/bounce.v)\n- VROOT was removed, the installation process is now much simpler.\n- `defer` statement.\n- map.v was re-written. It's now much faster.\n- `for key, val in map` syntax.\n- `flag` module for parsing command line arguments.\n- `zip` module.\n- `crypto/sha1` module.\n- Submodules and module aliases (`import encoding.base64 as b64`).\n\n\n## V 0.1.14\n*12 Jul 2019*\n- `gg` module Windows support, V Tetris runs on Windows.\n- Compile `glad` and `cJSON` only once. Programs using `gg` or `json` compile a bit faster.\n- `v.c` has been cleaned up and minimized (~16k => ~10k lines of code).\n- `type` aliases can now have methods.\n- Const overflow check during compilation (`byte(1000)` will no longer compile).\n\n\n## V 0.1.13\n*10 Jul 2019*\n- New enum syntax (`token == .name`), enum values are no longer global consts.\n- Submodules (`import encoding.base64`).\n- Hot code reloading.\n- Special `err` variable for getting error values.\n- Complex numbers.\n- `<<` can now append arrays (`numbers << [1, 2, 3]`).\n- Lots of Windows fixes (Windows still needs some work).\n- Lots of REPL improvements (e.g. `>> 2 + 3` works now, no `println` required).\n- The website was made easily translatable, it's now partially available in several languages.\n\n\n## V 0.1.12\n*4 Jul 2019*\n- V can finally compile itself on Windows (https://github.com/vlang/v#mingw-w64).\n- `os` module now uses options in all functions that return `File`.\n- Lots of bugs with options were fixed.\n- `println` was optimized. It no longer results in allocations.\n    Now it also works correctly with all integer types.\n- Lots of `vfmt` fixes, it will be enabled tomorrow.\n- New `strings` module.\n- Lots of other fixes and improvements, thanks to all the contributors.\n\n\n## V 0.1.11\n*1 Jul 2019*\n- Cross compilation for Windows!\n- Lots of Windows fixes.\n- socket.v.\n- maps fixed.\n\n\n## V 0.1.9 - 0.1.10\n*29 Jun 2019*\n- Windows support via MinGW-w64. Pre-built Windows binary.\n- File structure has been simplified: all vlib modules were moved to the vlib/ directory,\n  makefile was moved to the root.\n- One single archive with pre-built binaries for all operating systems.\n- `mut var := val` was fixed (previously `mut var = val` was allowed as well).\n\n\n## V 0.1.8\n*28 Jun 2019*\n- Single file programs without `fn main` now work as expected.\n- REPL has been fixed: it now supports imports, consts, function definitions, etc.\n\n\n## V 0.1.7\n*27 Jun 2019*\n- All C code in the compiler and vlib has been replaced with V.\n- `#` syntax for embedding C code has been removed.\n- Exported functions now need to be marked with `pub`, all public vlib functions have been updated.\n- CI has been set up (Travis + Azure). On every commit and PR it is made sure that V\n  can compile itself, all tests pass, and all examples compile.\n- More tests have been uploaded.\n- Cleaner bytes to string conversion: `tos2(bytes)` => `string(bytes)`.\n- The home page has 3 more examples next to 'hello world' that show the features of the language.\n- Lots of bugs and issues fixed.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.04,
          "content": "# Code of Conduct\n\nBe nice and respectful.\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 16.76,
          "content": "## How to help and contribute to the V project\n\nThe tasks in the lists below are ordered in terms of easiness/time/nerves\ninvestment.\n\n### Starting tasks\n\n1. Read the [language documentation](https://docs.vlang.io/introduction.html) and [standard module documentation](https://modules.vlang.io/).\n\n2. Fix doc errors and places you found unclear, and make [PRs](https://github.com/vlang/v/pulls) about it.\n\n3. Make V programs, in the areas that you are interested in, or help others make\n   V programs. If the programs/libraries are public, post them to the channel\n   `#showcase-discussion` on [Discord](https://discord.gg/vlang) and/or to\n   [awesome-v](https://github.com/vlang/awesome-v). You can also answer other\n   people's questions in Discord channels `#help` or `#v-chat`, or in\n   [github's discussions page](https://github.com/vlang/v/discussions).\n\n4. Read the new issues in the tracker.\n\n5. Try to reproduce them on your system, and comment in the issues, with the\n   results.\n\n6. Read the PRs, try to spot errors in them, and comment about them.\n\n### Medium tasks (after gathering experience with 1..6)\n\n7. Make PRs, with bug fixes to existing issues (found doing 1..6).\n\n8. Suggest new features, tools, or modifications to the existing ones here,\n   based on the experience, that you gathered doing 1..7.\n\n9. Make PRs with implementations of your suggestions, or based on other people's\n   suggestions, based on 1..7 and the feedback from 8.\n\n### Advanced tasks (after doing 1..9 for a while)\n\n10. Work on [V RFCs](https://github.com/vlang/rfcs/) (submitting new ones,\n    providing feedback to existing ones, implementing them).\n\n## Code Structure\n\nI tried to make the code of the compiler and vlib as simple and readable as\npossible. One of V's goals is to be open to developers with different levels\nof experience in compiler development. Compilers don't need to be black boxes\nfull of magic that only few people understand.\n\nThe V compiler is modular, and can be used by other applications. It is located\nin `cmd/v/` and `vlib/v/`.\n\nThe most important and useful command to remember when working on the V compiler\nis `v self`.\nIt rebuilds the V compiler.\n\nBe careful, if you introduce a breaking change and rebuild V, you will no longer\nbe able to use V to build itself. So it's a good idea to make a backup copy of a\nworking compiler executable.\n\nBut don't worry, you can always simply run `make` (or `make.bat`), it will\ndownload the C version of the compiler and rebuild it from scratch.\n\nThe architecture of the compiler is very simple and has three distinct steps:\n\nParse/generate AST (`v.parser`) => Check types (`v.checker`)\n=> Generate C/JavaScript/machine code (`v.gen`)\n\nThe main files are:\n\n1. `cmd/v/v.v` The entry point.\n\n   - V figures out the build mode.\n   - Constructs the compiler object (`struct V`).\n   - Creates a list of .v files that need to be parsed.\n   - Creates a parser object for each file and runs `parse()` on them.\n   - The correct backend is called (C, JS, native), and a binary is compiled.\n\n2. `vlib/v/scanner` The scanner's job is to parse a list of characters and convert\n   them to tokens.\n\n3. `vlib/v/token` This is simply a list of all tokens, their string values, and a\n   couple of helper functions.\n\n4. `vlib/v/parser` The parser. It converts a list of tokens into an AST.\n   In V, objects can be used before declaration, so unknown types are marked as\n   unresolved. They are resolved later in the type checker.\n\n5. `vlib/v/table` V creates one table object that is shared by all parsers. It\n   contains all types, consts, and functions, as well as several helpers to search\n   for objects by name, register new objects, modify types' fields, etc.\n\n6. `vlib/v/checker` Type checker and resolver. It processes the AST and makes sure\n   the types are correct. Unresolved types are resolved, type information is added\n   to the AST.\n\n7. `vlib/v/gen/c` C backend. It simply walks the AST and generates C code that can be\n   compiled with Clang, GCC, Visual Studio, and TCC.\n\n8. `vlib/v/gen/js` JavaScript backend. It simply walks the AST and generates JS code that can be\n   executed on the browser or in NodeJS/Deno.\n\n9. `vlib/v/gen/c/json.v` defines the json code generation. This file will be removed once V\n   supports comptime code generation, and it will be possible to do this using the\n   language's tools.\n\n10. `vlib/v/gen/native` is the directory with all the machine code generation logic. It\n    defines a set of functions that translate assembly instructions to machine code\n    and build the binary from scratch byte by byte. It manually builds all headers,\n    segments, sections, symtable, relocations, etc. Right now it only has basic\n    support of the native platform (ELF, MACHO format).\n\nThe rest of the directories are vlib modules: `builtin/` (strings, arrays,\nmaps), `time/`, `os/`, etc. Their documentation is pretty clear.\n\n## Example Workflow for Contributing\n\n(provided by [@spytheman](https://github.com/spytheman))\n\n(If you don't already have a GitHub account, please create one. Your GitHub\nusername will be referred to later as 'YOUR_GITHUB_USERNAME'. Change it\naccordingly in the steps below.)\n\n1. Fork https://github.com/vlang/v using GitHub's interface to your own account.\n   Let's say that the forked repository is at\n   `https://github.com/YOUR_GITHUB_USERNAME/v` .\n2. Clone the main v repository https://github.com/vlang/v to a local folder on\n   your computer, say named nv/ (`git clone --depth=1 https://github.com/vlang/v nv`)\n3. `cd nv`\n   3.1 (optional) Run these commands, which ensure that all your code will be\n   automatically formatted, before committing:\n   ```\n   cp cmd/tools/git_pre_commit_hook.vsh .git/hooks/pre-commit\n   chmod 755 .git/hooks/pre-commit\n   ```\n4. `git remote add pullrequest https://github.com/YOUR_GITHUB_USERNAME/v`\n\n   Note: The remote named `pullrequest` should point to YOUR own forked repo, not the\n   main v repository! After this, your local cloned repository is prepared for\n   making pull requests, and you can just do normal git operations such as:\n   `git pull` `git status` and so on.\n\n5. When finished with a feature/bugfix/change, you can:\n   `git checkout -b fix_alabala`\n   - Don't forget to keep formatting standards, run `v fmt -w YOUR_MODIFIED_FILES`\n     before committing (if you have not run the commands from 3.1)\n   - If you changed Markdown (`.md`) files, check them `v check-md YOUR_MODIFIED_FILES`\n     before committing.\n6. `git push pullrequest` Note: The `pullrequest` remote was setup on step 4\n\n7. On GitHub's web interface, go to: https://github.com/vlang/v/pulls\n\n   Here the UI shows a dialog with a button to make a new pull request based on\n   the new pushed branch.\n   (Example dialog: https://url4e.com/gyazo/images/364edc04.png)\n\n8. After making your pull request (aka, PR), you can continue to work on the\n   branch `fix_alabala` ... just do again `git push pullrequest` when you have more\n   commits.\n\n9. If there are merge conflicts, or a branch lags too much behind V's master,\n   you can do the following:\n\n   1. `git pull --rebase origin master` # solve conflicts and do\n      `git rebase --continue`\n   2. `git push pullrequest -f` # this will overwrite your current remote branch\n      with the updated version of your changes.\n\nThe point of doing the above steps, is to never directly push to the main V\nrepository, *only to your own fork*. Since your local `master` branch tracks the\nmain V repository's master, then `git checkout master`, as well as\n`git pull --rebase origin master` will continue to work as expected\n(these are actually used by `v up`) and git can always do it cleanly.\n\nGit is very flexible, so there are other ways to accomplish the same thing.\nSee the [GitHub flow](https://guides.github.com/introduction/git-handbook/#github), for more\ninformation.\n\n## Finding issues to contribute to\n\nIf you're willing to contribute to V but don't know which issue to resolve\n\n- you can go to [Issues](https://github.com/vlang/v/issues) tab\n  in this repository. There you can see things logged by both users and developers\n  that need to be discussed and/or resolved.\n\nIt's recommended to filter issues by likes and labels to find an issue\nyou are interested in.\n\n### Filtering by likes (recommended)\n\nFiltering by likes helps you identify high-impact issues.\nMore likes mean more community interest.\n\nTo quickly use this filter, click [there](https://github.com/vlang/v/issues?q=is%3Aopen+is%3Aissue+sort%3Areactions-%2B1-desc).\n\nTo manually apply this filter, navigate to [Issues](https://github.com/vlang/v/issues)\ntab, then paste the following in the \"Filter\" field:\n\n```\nis:open is:issue sort:reactions-+1-desc\n```\n\nThis filter will return all open issues sorted by likes in descending order.\n\n### Filtering by labels\n\nThe V repo has various labels to help navigate the extensive list of issues\nand help you find issues you're both interested in and capable of resolving.\nYou can examine the list of labels [here](https://github.com/vlang/v/labels).\n\nThe most common labels are:\n\nBy issue type:\n\n- `Bug`\n- `Feature Request`\n\nBy OS:\n\n- `OS: Linux`\n- `OS: Windows`\n- `OS: Mac`\n\nBy status:\n\n- `Status: Confirmed`\n\nTo apply this filter, navigate to [Issues](https://github.com/vlang/v/issues)\ntab, then paste the following in the \"Filter\" field:\n\n```\nis:open is:issue label:Bug label:\"OS: Windows\" label:\"Status: Confirmed\"\n```\n\nThis filter will return all open issues with the labels `Bug`, `OS: Windows`,\nand `Status: Confirmed`.\n\n## Using Github's hub CLI tool\n\nYou can download the `hub` tool from https://hub.github.com/ . Using\n`hub`, you will not need to go through the (sometimes) slow website\nto make PRs. Most remote operations can be done through the `hub` CLI\ncommand.\n\n> [!NOTE]\n> You still need to have a GitHub account.\n\n### Preparation:\n\n(steps 1..3 need to be done just *once*):\n\n1. `hub clone vlang/v my_v`\n2. `cd my_v`\n   2.1 (optional) Run these commands, which ensure that all your code will be\n   automatically formatted, before committing:\n   ```\n   cp cmd/tools/git_pre_commit_hook.vsh .git/hooks/pre-commit\n   chmod 755 .git/hooks/pre-commit\n   ```\n3. `hub fork --remote-name pullrequest`\n\n4. `git checkout -b my_cool_feature` # Step 4 is better done *once per each new\n   feature/bugfix* that you make.\n\n### Improve V by making commits:\n\n5. `git commit -am \"math: add a new function copysign\"`\n\n### Testing your commits locally:\n\nYou can test locally whether your changes have not broken something by\nrunning: `v test-all`. See `TESTS.md` for more details.\n\n### Publishing your commits to GitHub:\n\n6. `git push pullrequest`\n\n### Making a PR with `hub`:\n\n(so that your changes can be merged to the main V repository)\n\n7. `hub pull-request`\n\nOptionally, you can track the status of your PR CI tests with:\n\n8. `hub ci-status --verbose`\n\n### Fixing failing tests:\n\nIf everything is OK, after 5-10 minutes, the CI tests should pass for\nall platforms. If not, visit the URLs for the failing CI jobs, see\nwhich tests have failed and then fix them by making more changes. Just use\n`git push pullrequest` to publish your changes. The CI tests will\nrun with your updated code. Use `hub ci-status --verbose` to monitor\ntheir status.\n\n## Compiler flags, useful while debugging the compiler itself:\n\nV allows you to pass custom flags using `-d my_flag` that can then be checked\nat compile time (see the documentation about\n[compile-time if](https://github.com/vlang/v/blob/master/doc/docs.md#compile-time-if)).\n\nSince the compiler is *also* an ordinary V program, there are numerous flags that can be\npassed when building the compiler itself with `v self`, or when creating a copy of the\ncompiler, that will help you when debugging the compiler.\n\nNote: beware that the flags below must be passed, when building the compiler, *not the program*,\nso do for example:\n`./v -o w -d time_parsing cmd/v`\nor\n`./v -o w -d trace_checker self`\n... then use `./w file.v`, instead of `./v file.v`, to compile your program.\n\nNote: some of the flags can make the compiler *very verbose*, so it is recommended to create\na copy of the compiler rather than replacing it with `v self`.\n\n| Flag                              | Usage                                                                                                               |\n|-----------------------------------|---------------------------------------------------------------------------------------------------------------------|\n| `debug_codegen`                   | Prints automatically generated V code during the scanning phase                                                     |\n| `debug_interface_table`           | Prints generated interfaces during C generation                                                                     |\n| `debug_interface_type_implements` | Prints debug information when checking that a type implements in interface                                          |\n| `print_vweb_template_expansions`  | Prints vweb compiled HTML files                                                                                     |\n| `time_checking`                   | Prints the time spent checking files and other related information                                                  |\n| `time_parsing`                    | Prints the time spent parsing files and other related information                                                   |\n|                                   |                                                                                                                     |\n| `trace_scanner`                   | Prints details about the recognized tokens. *Very* verbose. Use `./vnew -no-builtin -check-syntax file.v` later.    |\n| `trace_parser`                    | Prints details about parsed statements and expressions. Very verbose. Use it for panics in the parser.              |\n| `trace_checker`                   | Prints details about the statements being checked. Very verbose. Use it for panics in the checker.                  |\n| `trace_transformer`               | Prints details about the statements being transformed. Very verbose. Use it for panics in the transformer stage.    |\n|                                   |                                                                                                                     |\n| `trace_gen`                       | Prints all the strings written to the generated C file. Very verbose.                                               |\n| `trace_gen_wanted_value`          | Prints a backtrace, when a specific *wanted* value, is part of what is printed in the generated C file.             |\n|                                   |        Use: `v -g -o vgen -d trace_gen_wanted -d trace_gen_wanted_value=\"message = _SLIT0\" cmd/v && ./vgen bug.v`   |\n| `trace_cgen_stmt`                 | Prints details about the statements that are being processed by cgen.                                               |\n|                                   |        Use it for panics in cgen, to see the closest input V source line, that caused the panic.                    |\n|                                   |        Note: you need `v -no-parallel -d trace_cgen_stmt -o w cmd/v` to make sense of the output of that,           |\n|                                   |        otherwise by default cgen uses several threads, and the lines that are printed are out of order.             |\n|                                   |                                                                                                                     |\n| `trace_autofree`                  | Prints details about how/when -autofree puts free() calls                                                           |\n| `trace_autostr`                   | Prints details about `.str()` method auto-generated by the compiler during C generation                             |\n|                                   |                                                                                                                     |\n| `trace_ccoptions`                 | Prints options passed down to the C compiler                                                                        |\n|                                   |                                                                                                                     |\n| `trace_thirdparty_obj_files`      | Prints details about built thirdparty obj files                                                                     |\n| `trace_usecache`                  | Prints details when -usecache is used                                                                               |\n| `trace_embed_file`                | Prints details when $embed_file is used                                                                             |\n| `embed_only_metadata`             | Embed only the metadata for the file(s) with `$embed_file('somefile')`; faster; for development, *not* distribution |\n|-----------------------------------|---------------------------------------------------------------------------------------------------------------------|\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.66,
          "content": "#same container that golang use\nFROM buildpack-deps:buster-curl\n\nLABEL maintainer=\"ANAGO Ronnel <anagoandy@gmail.com>\"\nWORKDIR /opt/vlang\n\nARG USE_LOCAL\n\nRUN apt update && \\\n    DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends gcc clang make git binutils && \\\n    apt clean && rm -rf /var/cache/apt/archives/* && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY . /vlang-local\n\nRUN if [ -z \"${USE_LOCAL}\" ] ; then \\\n      git clone --depth=1 https://github.com/vlang/v /opt/vlang && \\\n      rm -rf /vlang-local ; \\\n    else \\\n      mv /vlang-local/* . && \\\n      rm -rf /vlang-local ; \\\n    fi\n\nRUN make && \\\n    ln -s /opt/vlang/v /usr/local/bin/v\n\nCMD [ \"v\" ]\n"
        },
        {
          "name": "Dockerfile.alpine",
          "type": "blob",
          "size": 1.75,
          "content": "## Usage:\n##   1) docker build -t vlang_alpine - < Dockerfile.alpine\n##   2) alias with_alpine='docker run -u 1000:1000 --rm -it -v .:/src -w /src vlang_alpine:latest'\nFROM alpine:3.20\nLABEL maintainer=\"spytheman <spytheman@bulsynt.org>\"\nWORKDIR /opt/vlang\nENV PATH /opt/vlang:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\n## install development packages\nRUN apk --no-cache add \\\n  musl-dev libc-dev libc6-compat gcompat \\\n  openssl-dev sqlite-dev mbedtls \\\n  libuv-dev libev-dev libevent-dev libmemcached-dev \\\n  binutils diffutils elfutils pcre strace \\\n  libunwind-dev libunwind-static gc gc-dev \\\n  make bash file git upx tmux micro nano nano-syntax \\\n  gcc gdb wasi-sdk \\\n  mesa-dev mesa-gl mesa-gles mesa-glapi \\\n  glfw-dev \\\n  glu-dev \\\n  glew-dev \\\n  freetype-dev \\\n  freeglut-dev \\\n  libxi-dev libxi-static \\\n  libxcursor-dev \\\n  libx11-dev \\\n  icu-data-full \\\n  sdl2_net-dev \\\n  sdl2_gfx-dev \\\n  sdl2_ttf-dev \\\n  sdl2_image-dev \\  \n  sdl2_mixer-dev \\\n  sdl2_pango-dev \\\n  sdl2-dev\n\nRUN ln -s /opt/vlang/v /usr/local/bin/v\nCOPY . /vlang-local\nARG USE_LOCAL\nRUN if [[ -z \"${USE_LOCAL}\" ]] ; then \\\n      git clone --depth=1 --quiet https://github.com/vlang/v/ /opt/vlang && \\\n      rm -rf /vlang-local ; \\\n    else \\\n      mv /vlang-local/* . && \\\n      rm -rf /vlang-local ; \\\n    fi\nRUN mkdir -p /tmp/v /tmp/v /home/ && chown -Rh 1000:1000 /opt/ /tmp/ /home/\n## setup runtime environment for v and bash:\nUSER 1000:1000\nENV HOME     /home\nENV VTMP     /tmp/v\nENV VMODULES /tmp/vmodules\n\nRUN make && v -version && ls -la v && \\\n  du -b -s . && \\\n  time v doctor && \\\n  time v cmd/tools/vfmt.v && \\\n  time v -prod self && \\\n  true\nRUN find . -type f -name *_test.v -or -name *.vv -or -name *.out | xargs rm && \\\n  rm -rf v_old vc/ .git/ && \\\n  du -b -s .\nCMD [\"v\"]\n"
        },
        {
          "name": "Dockerfile.cross",
          "type": "blob",
          "size": 0.23,
          "content": "FROM mstorsjo/llvm-mingw\n\nLABEL maintainer=\"Delyan Angelov <delian66@gmail.com>\"\nCOPY . .\nRUN make\nRUN ./v -os windows -o v.c cmd/v\nRUN x86_64-w64-mingw32-gcc v.c -std=c99 -w -municode -o v.exe -lws2_32\nRUN file v.exe\n\nCMD [ \"bash\" ]\n"
        },
        {
          "name": "GNUmakefile",
          "type": "blob",
          "size": 4.6,
          "content": "CC ?= cc\nCFLAGS ?=\nLDFLAGS ?=\nTMPDIR ?= /tmp\nVROOT  ?= .\nVC     ?= ./vc\nVEXE   ?= ./v\nVCREPO ?= https://github.com/vlang/vc\nTCCREPO ?= https://github.com/vlang/tccbin\nLEGACYREPO ?= https://github.com/macports/macports-legacy-support\n\nVCFILE := v.c\nTMPTCC := $(VROOT)/thirdparty/tcc\nLEGACYLIBS := $(VROOT)/thirdparty/legacy\nTMPLEGACY := $(LEGACYLIBS)/source\nTCCOS := unknown\nTCCARCH := unknown\nGITCLEANPULL := git clean -xf && git pull --quiet\nGITFASTCLONE := git clone --filter=blob:none --quiet\n\n#### Platform detections and overrides:\n_SYS := $(shell uname 2>/dev/null || echo Unknown)\n_SYS := $(patsubst MSYS%,MSYS,$(_SYS))\n_SYS := $(patsubst MINGW%,MinGW,$(_SYS))\n\nifneq ($(filter $(_SYS),MSYS MinGW),)\nWIN32 := 1\nVEXE := ./v.exe\nendif\n\nifeq ($(_SYS),Linux)\nLINUX := 1\nTCCOS := linux\nifneq ($(shell ldd /bin/ls | grep musl),)\nTCCOS := linuxmusl\nendif\nendif\n\nifeq ($(_SYS),Darwin)\nMAC := 1\nTCCOS := macos\nifeq ($(shell expr $(shell uname -r | cut -d. -f1) \\<= 15), 1)\nLEGACY := 1\nendif\nendif\n\nifeq ($(_SYS),FreeBSD)\nTCCOS := freebsd\nLDFLAGS += -lexecinfo\nendif\n\nifeq ($(_SYS),NetBSD)\nTCCOS := netbsd\nLDFLAGS += -lexecinfo\nendif\n\nifeq ($(_SYS),OpenBSD)\nTCCOS := openbsd\nLDFLAGS += -lexecinfo\nendif\n\nifdef ANDROID_ROOT\nANDROID := 1\nundefine LINUX\nTCCOS := android\nendif\n#####\n\nifdef WIN32\nTCCOS := windows\nVCFILE := v_win.c\nendif\n\nTCCARCH := $(shell uname -m 2>/dev/null || echo unknown)\n\nifeq ($(TCCARCH),x86_64)\n\tTCCARCH := amd64\nelse\nifneq ($(filter x86%,$(TCCARCH)),)\n\tTCCARCH := i386\nelse\nifeq ($(TCCARCH),arm64)\n\tTCCARCH := arm64\nelse\nifneq ($(filter arm%,$(TCCARCH)),)\n\tTCCARCH := arm\n# otherwise, just use the arch name\nendif\nendif\nendif\nendif\n\n.PHONY: all clean rebuild check fresh_vc fresh_tcc fresh_legacy check_for_working_tcc\n\nifdef prod\nVFLAGS+=-prod\nendif\n\nall: latest_vc latest_tcc latest_legacy\nifdef WIN32\n\t$(CC) $(CFLAGS) -std=c99 -municode -w -o v1.exe $(VC)/$(VCFILE) $(LDFLAGS) -lws2_32\n\t./v1.exe -no-parallel -o v2.exe $(VFLAGS) cmd/v\n\t./v2.exe -o $(VEXE) $(VFLAGS) cmd/v\n\t$(RM) v1.exe\n\t$(RM) v2.exe\nelse\nifdef LEGACY\n\t$(MAKE) -C $(TMPLEGACY)\n\t$(MAKE) -C $(TMPLEGACY) PREFIX=$(realpath $(LEGACYLIBS)) CFLAGS=$(CFLAGS) LDFLAGS=$(LDFLAGS) install\n\trm -rf $(TMPLEGACY)\n\t$(eval override LDFLAGS+=-L$(realpath $(LEGACYLIBS))/lib -lMacportsLegacySupport)\nendif\n\t$(CC) $(CFLAGS) -std=gnu99 -w -o v1.exe $(VC)/$(VCFILE) -lm -lpthread $(LDFLAGS)\n\t./v1.exe -no-parallel -o v2.exe $(VFLAGS) cmd/v\n\t./v2.exe -nocache -o $(VEXE) $(VFLAGS) cmd/v\n\trm -rf v1.exe v2.exe\nendif\n\t@$(VEXE) run cmd/tools/detect_tcc.v\n\t@echo \"V has been successfully built\"\n\t@$(VEXE) -version\n\t@$(VEXE) run .github/problem-matchers/register_all.vsh\n\nclean:\n\trm -rf $(TMPTCC)\n\trm -rf $(LEGACYLIBS)\n\trm -rf $(VC)\n\nrebuild: clean all\n\nifndef local\nlatest_vc: $(VC)/.git/config\n\tcd $(VC) && $(GITCLEANPULL)\nelse\nlatest_vc:\n\t@echo \"Using local vc\"\nendif\n\ncheck_for_working_tcc:\n\t@$(TMPTCC)/tcc.exe --version > /dev/null 2> /dev/null || echo \"The executable '$(TMPTCC)/tcc.exe' does not work.\"\n\nfresh_vc:\n\trm -rf $(VC)\n\t$(GITFASTCLONE) $(VCREPO) $(VC)\n\nifndef local\nlatest_tcc: $(TMPTCC)/.git/config\n\tcd $(TMPTCC) && $(GITCLEANPULL)\nifneq (,$(wildcard ./tcc.exe))\n\t@$(MAKE) --quiet check_for_working_tcc 2> /dev/null\nendif\n\nelse\nlatest_tcc:\n\t@echo \"Using local tcc\"\n\t@$(MAKE) --quiet check_for_working_tcc 2> /dev/null\nendif\n\nfresh_tcc:\n\trm -rf $(TMPTCC)\nifndef local\n# Check whether a TCC branch exists for the user's system configuration.\nifneq (,$(findstring thirdparty-$(TCCOS)-$(TCCARCH), $(shell git ls-remote --heads $(TCCREPO) | sed 's/^[a-z0-9]*\\trefs.heads.//')))\n\t$(GITFASTCLONE) --branch thirdparty-$(TCCOS)-$(TCCARCH) $(TCCREPO) $(TMPTCC)\n\t@$(MAKE) --quiet check_for_working_tcc 2> /dev/null\nelse\n\t@echo 'Pre-built TCC not available for thirdparty-$(TCCOS)-$(TCCARCH) at $(TCCREPO), will use the system compiler: $(CC)'\n\t$(GITFASTCLONE) --branch thirdparty-unknown-unknown $(TCCREPO) $(TMPTCC)\nendif\nelse\n\t@echo \"Using local tccbin\"\n\t@$(MAKE) --quiet check_for_working_tcc 2> /dev/null\nendif\n\nifndef local\nlatest_legacy: $(TMPLEGACY)/.git/config\nifdef LEGACY\n\tcd $(TMPLEGACY) && $(GITCLEANPULL)\nendif\nelse\nlatest_legacy:\nifdef LEGACY\n\t@echo \"Using local legacysupport\"\nendif\nendif\n\nfresh_legacy:\n\trm -rf $(LEGACYLIBS)\n\t$(GITFASTCLONE) $(LEGACYREPO) $(TMPLEGACY)\n\n$(TMPTCC)/.git/config:\n\t$(MAKE) fresh_tcc\n\n$(VC)/.git/config:\n\t$(MAKE) fresh_vc\n\n$(TMPLEGACY)/.git/config:\nifdef LEGACY\n\t$(MAKE) fresh_legacy\nendif\n\nasan:\n\t$(MAKE) all CFLAGS='-fsanitize=address,undefined'\n\nselfcompile:\n\t$(VEXE) -cg -o v cmd/v\n\nselfcompile-static:\n\t$(VEXE) -cg -cflags '--static' -o v-static cmd/v\n\n### NB: Please keep this Makefile and make.bat simple.\ninstall:\n\t@echo 'Please use `sudo ./v symlink` instead.'\n\ncheck:\n\t$(VEXE) test-all\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.06,
          "content": "MIT License\n\nCopyright (c) 2019-2024 Alexander Medvednikov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.53,
          "content": "CC ?= cc\nVFLAGS ?=\nCFLAGS ?=\nLDFLAGS ?=\n\n.PHONY: all check download_vc v\n\nall: download_vc v\n\ndownload_vc:\n\tif [ -f vc/v.c ] ; then git -C vc/ pull; else git clone --filter=blob:none https://github.com/vlang/vc vc/; fi\n\nv:\n\t$(CC) $(CFLAGS) -std=gnu11 -w -o v1 vc/v.c -lm -lexecinfo -lpthread $(LDFLAGS)\n\t./v1 -no-parallel -o v2 $(VFLAGS) cmd/v\n\t./v2 -o v $(VFLAGS) cmd/v\n\trm -rf v1 v2\n\t./v run ./cmd/tools/detect_tcc.v\n\t@echo \"V has been successfully built\"\n\t./v version\n\t./v run .github/problem-matchers/register_all.vsh\n\ncheck:\n\t./v test-all\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.9,
          "content": "<div align=\"center\" style=\"display:grid;place-items:center;\">\n<p>\n    <a href=\"https://vlang.io/\" target=\"_blank\"><img width=\"80\" src=\"https://raw.githubusercontent.com/vlang/v-logo/master/dist/v-logo.svg?sanitize=true\" alt=\"V logo\"></a>\n</p>\n<h1>The V Programming Language</h1>\n\n[vlang.io](https://vlang.io)\n| [Docs](https://github.com/vlang/v/blob/master/doc/docs.md)\n| [Changelog](https://github.com/vlang/v/blob/master/CHANGELOG.md)\n| [Speed](https://fast.vlang.io/)\n| [Contributing & compiler design](https://github.com/vlang/v/blob/master/CONTRIBUTING.md)\n\n</div>\n<div align=\"center\" style=\"display:grid;place-items:center;\">\n<!--\n[![Build Status][WorkflowBadge]][WorkflowUrl]\n-->\n\n[![Sponsor][SponsorBadge]][SponsorUrl]\n[![Patreon][PatreonBadge]][PatreonUrl]\n[![Discord][DiscordBadge]][DiscordUrl]\n[![X][XBadge]][XUrl]\n[![Modules][ModulesBadge]][ModulesUrl]\n\n</div>\n\n## Key Features of V\n\n- Simplicity: the language can be learned over the course of a weekend\n- Fast compilation: ≈110k loc/s with a Clang backend,\n  ≈500k loc/s with native and tcc backends *(Intel i5-7500, SSD, no\n  optimization)* ([demo video](https://www.youtube.com/watch?v=pvP6wmcl_Sc))\n- Easy to develop: V compiles itself in less than a second\n- Performance: as fast as C (V's main backend compiles to human-readable C)\n- Safety: no null, no globals, no undefined behavior (wip), immutability by default\n- C to V translation ([Translating DOOM demo video](https://www.youtube.com/watch?v=6oXrz3oRoEg))\n- Hot code reloading\n- [Flexible memory management](https://vlang.io/#memory). GC by default, manual via `v -gc none`,\n  arena allocation via `v -prealloc`, autofree via `v -autofree`\n  ([autofree demo video](https://www.youtube.com/watch?v=gmB8ea8uLsM)).\n- [Cross-platform UI library](https://github.com/vlang/ui)\n- Built-in graphics library\n- Easy cross-compilation\n- REPL\n- [Built-in ORM](https://github.com/vlang/v/blob/master/doc/docs.md#orm)\n- [Built-in web framework](https://github.com/vlang/v/blob/master/vlib/veb/README.md)\n- C and JavaScript backends\n- Great for writing low-level software ([Vinix OS](https://github.com/vlang/vinix))\n\n## Stability, future changes, post 1.0 freeze\n\nDespite being at an early development stage, the V language is relatively stable, and doesn't\nchange often. But there will be changes before 1.0.\nMost changes in the syntax are handled via vfmt automatically.\n\nThe V core APIs (primarily the `os` module) will also have minor changes until\nthey are stabilized in V 1.0. Of course, the APIs will grow after that, but without breaking\nexisting code.\n\nAfter the 1.0 release V is going to be in the \"feature freeze\" mode. That means no breaking changes\nin the language, only bug fixes and performance improvements. Similar to Go.\n\nWill there be V 2.0? Not within a decade after 1.0, perhaps not ever.\n\nTo sum it up, unlike many other languages, V is not going to be always changing, with new features\nintroduced and old features modified. It is always going to be a small and simple\nlanguage, very similar to the way it is right now.\n\n## Installing V from source\n\n--> **_(this is the preferred method)_**\n\n### Linux, macOS, Windows, \\*BSD, Solaris, WSL, etc.\n\nUsually, installing V is quite simple if you have an environment that already has a\nfunctional `git` installation.\n\nNote: On Windows, run `make.bat` instead of `make` in CMD, or `./make.bat` in PowerShell.\nNote: On Ubuntu/Debian, you may need to run `sudo apt install git build-essential make` first.\n\nTo get started, execute the following in your terminal/shell:\n```bash\ngit clone --depth=1 https://github.com/vlang/v\ncd v\nmake\n```\n\nThat should be it, and you should find your V executable at `[path to V repo]/v`.\n`[path to V repo]` can be anywhere.\n\n(Like the note above says, on Windows, use `make.bat`, instead of `make`.)\n\nNow try running `./v run examples/hello_world.v` (or `v run examples/hello_world.v` in cmd shell).\n\n- *Trouble? Please see the notes above, and link to\n  [Installation Issues](https://github.com/vlang/v/discussions/categories/installation-issues)\n  for help.*\n\nNote: V is being constantly updated. To update V to its latest version, simply run:\n\n```bash\nv up\n```\n\n> [!NOTE]\n> If you run into any trouble, or you have a different operating\n> system or Linux distribution that doesn't install or work immediately, please see\n> [Installation Issues](https://github.com/vlang/v/discussions/categories/installation-issues)\n> and search for your OS and problem.\n>\n> If you can't find your problem, please add it to an existing discussion if one exists for\n> your OS, or create a new one if a main discussion doesn't yet exist for your OS.\n\n### C compiler\n\nThe [Tiny C Compiler (tcc)](https://repo.or.cz/w/tinycc.git) is downloaded for you by `make` if\nthere is a compatible version for your system, and installed under the V `thirdparty` directory.\n\nThis compiler is very fast, but does almost no optimizations. It is best for development builds.\n\nFor production builds (using the `-prod` option to V), it's recommended to use clang, gcc, or\nMicrosoft Visual C++. If you are doing development, you most likely already have one of those\ninstalled.\n\nOtherwise, follow these instructions:\n\n- [Installing a C compiler on Linux and macOS](https://github.com/vlang/v/wiki/Installing-a-C-compiler-on-Linux-and-macOS)\n\n- [Installing a C compiler on Windows](https://github.com/vlang/v/wiki/Installing-a-C-compiler-on-Windows)\n\n### Symlinking\n\n> [!NOTE]\n> It is *highly recommended*, that you put V on your PATH. That saves\n> you the effort to type in the full path to your v executable every time.\n> V provides a convenience `v symlink` command to do that more easily.\n\nOn Unix systems, it creates a `/usr/local/bin/v` symlink to your\nexecutable. To do that, run:\n\n```bash\nsudo ./v symlink\n```\n\nOn Windows, start a new shell with administrative privileges, for example by pressing the\n<kbd>Windows Key</kbd>, then type `cmd.exe`, right-click on its menu entry, and choose `Run as\nadministrator`. In the new administrative shell, cd to the path where you have compiled V, then\ntype:\n\n```bat\nv symlink\n```\n\n(or `./v symlink` in PowerShell)\n\nThat will make V available everywhere, by adding it to your PATH. Please restart your\nshell/editor after that, so that it can pick up the new PATH variable.\n\n> [!NOTE]\n> There is no need to run `v symlink` more than once - v will still be available, even after\n> `v up`, restarts, and so on. You only need to run it again if you decide to move the V repo\n> folder somewhere else.\n\n### Void Linux\n\n<details><summary>Expand Void Linux instructions</summary>\n\n```bash\n# xbps-install -Su base-devel\n# xbps-install libatomic-devel\n$ git clone --depth=1 https://github.com/vlang/v\n$ cd v\n$ make\n```\n\n</details>\n\n### Docker\n\n\n```bash\ngit clone --depth=1 https://github.com/vlang/v\ncd v\ndocker build -t vlang .\ndocker run --rm -it vlang:latest\n```\n\n### Docker with Alpine/musl\n\n```bash\ngit clone --depth=1 https://github.com/vlang/v\ncd v\ndocker build -t vlang_alpine - < Dockerfile.alpine\nalias with_alpine='docker run -u 1000:1000 --rm -it -v .:/src -w /src vlang_alpine:latest'\n```\n\nCompiling *static* executables, ready to be copied to a server, that is running\nanother linux distro, without dependencies:\n```bash\nwith_alpine v -skip-unused -prod -cc gcc -cflags -static -compress examples/http_server.v\nwith_alpine v -skip-unused -prod -cc gcc -cflags -static -compress -gc none examples/hello_world.v\nls -la examples/http_server examples/hello_world\nfile   examples/http_server examples/hello_world\nexamples/http_server: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, no section header\nexamples/hello_world: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, no section header\n```\n\nYou should see something like this:\n```\n-rwxr-xr-x 1 root root  16612 May 27 17:07 examples/hello_world\n-rwxr-xr-x 1 root root 335308 May 27 17:07 examples/http_server\n```\n\n### Termux/Android\n\nOn Termux, V needs some packages preinstalled - a working C compiler, also `libexecinfo`,\n`libgc` and `libgc-static`. After installing them, you can use the same script, like on\nLinux/macos:\n\n```bash\npkg install clang libexecinfo libgc libgc-static make git\ngit clone --depth=1 https://github.com/vlang/v\ncd v\nmake\n```\n\n## Editor/IDE Plugins\n\nTo bring IDE functions for the V programming languages to your editor, check out\n[v-analyzer](https://github.com/vlang/v-analyzer). It provides a\n[VS Code extension](https://marketplace.visualstudio.com/items?itemName=VOSCA.vscode-v-analyzer)\nand language server capabilities for other editors.\n\nThe plugin for JetBrains IDEs (IntelliJ, CLion, GoLand, etc.) also offers a great development\nexperience with V. You can find all features in [its documentation](https://plugins.jetbrains.com/plugin/20287-vlang/docs/syntax-highlighting.html).\n\nOther Plugins:\n\n- [Vim plugins](https://github.com/vlang/awesome-v#vim)\n- [Emacs plugins](https://github.com/vlang/awesome-v#emacs)\n- [Sublime Text 3 plugins](https://github.com/vlang/awesome-v#sublime-text-3)\n- [Atom plugins](https://github.com/vlang/awesome-v#atom)\n\n## Testing and running the examples\n\nMake sure V can compile itself:\n\n```bash\n$ v self\n$ v\nV 0.3.x\nUse Ctrl-C or `exit` to exit\n\n>>> println('hello world')\nhello world\n>>>\n```\n\n```bash\ncd examples\nv hello_world.v && ./hello_world    # or simply\nv run hello_world.v                 # this builds the program and runs it right away\n\nv run word_counter/word_counter.v word_counter/cinderella.txt\nv run news_fetcher.v\nv run tetris/tetris.v\n```\n\n\n<img src='https://raw.githubusercontent.com/vlang/v/master/examples/tetris/screenshot.png' width=300 alt='tetris screenshot'>\n\n## Sokol and GG GUI apps/games:\n\nIn order to build Tetris or 2048 (or anything else using the `sokol` or `gg` graphics modules),\nyou will need to install additional development libraries for your system.\n\n| System              | Installation method                                                                                |\n|---------------------|----------------------------------------------------------------------------------------------------|\n| Debian/Ubuntu based | Run `sudo apt install libxi-dev libxcursor-dev libgl-dev libxrandr-dev libasound2-dev`             |\n| Fedora/RH/CentOS    | Run `sudo dnf install libXi-devel libXcursor-devel libX11-devel libXrandr-devel libglvnd-devel`    |\n|                     |                                                                                                    |\n| NixOS               | Add `xorg.libX11.dev xorg.libXcursor.dev xorg.libXi.dev xorg.libXrandr.dev libGL.dev` to           |\n|                     | to `environment.systemPackages`                                                                    |\n\n## V net.http, net.websocket, `v install`\n\nThe net.http module, the net.websocket module, and the `v install` command may all use SSL.\nV comes with a version of mbedtls, which should work on all systems. If you find a need to\nuse OpenSSL instead, you will need to make sure that it is installed on your system, then\nuse the `-d use_openssl` switch when you compile.\n\nTo install OpenSSL on non-Windows systems:\n\n| System              | Installation command             |\n|---------------------|----------------------------------|\n| macOS               | `brew install openssl`           |\n| Debian/Ubuntu based | `sudo apt install libssl-dev`    |\n| Arch/Manjaro        | openssl is installed by default  |\n| Fedora/CentOS/RH    | `sudo dnf install openssl-devel` |\n\nOn Windows, OpenSSL is simply hard to get working correctly. The instructions\n[here](https://tecadmin.net/install-openssl-on-windows/) may (or may not) help.\n\n## V sync\n\nV's `sync` module and channel implementation uses libatomic.\nIt is most likely already installed on your system, but if not,\nyou can install it, by doing the following:\n\n| System              | Installation command                |\n|---------------------|-------------------------------------|\n| macOS               | already installed                   |\n| Debian/Ubuntu based | `sudo apt install libatomic1`       |\n| Fedora/CentOS/RH    | `sudo dnf install libatomic-static` |\n\n## V UI\n\n<a href=\"https://github.com/vlang/ui\">\n<img src='https://raw.githubusercontent.com/vlang/ui/master/examples/screenshot.png' width=712 alt='V UI example screenshot'>\n</a>\n\nhttps://github.com/vlang/ui\n\n<!---\n## JavaScript backend\n\n[examples/js_hello_world.v](examples/js_hello_world.v):\n\n```v\nfn main() {\n\tfor i in 0 .. 3 {\n\t\tprintln('Hello from V.js')\n\t}\n}\n```\n\n```bash\nv -o hi.js examples/js_hello_world.v && node hi.js\nHello from V.js\nHello from V.js\nHello from V.js\n```\n-->\n\n## Android graphical apps\n\nWith V's `vab` tool, building V UI and graphical apps for Android can become as easy as:\n\n```\n./vab /path/to/v/examples/2048\n```\n\n[https://github.com/vlang/vab](https://github.com/vlang/vab).\n<img src=\"https://user-images.githubusercontent.com/768942/107622846-c13f3900-6c58-11eb-8a66-55db12979b73.png\" alt=\"vab examples screenshot\">\n\n## Developing web applications\n\nCheck out the\n[Building a simple web blog](https://github.com/vlang/v/blob/master/tutorials/building_a_simple_web_blog_with_vweb/README.md)\ntutorial and Gitly, a light and fast alternative to GitHub/GitLab:\n\nhttps://github.com/vlang/gitly\n\n<img src=\"https://user-images.githubusercontent.com/687996/85933714-b195fe80-b8da-11ea-9ddd-09cadc2103e4.png\" alt=\"gitly screenshot\">\n\n## Vinix, an OS/kernel written in V\n\nV is great for writing low-level software like drivers and kernels.\nVinix is an OS/kernel that already runs bash, GCC, V, and nano.\n\nhttps://github.com/vlang/vinix\n\n<img src=\"https://github.com/vlang/vinix/blob/main/screenshot0.png?raw=true\" alt=\"vinix screenshot 1\">\n<img src=\"https://github.com/vlang/vinix/blob/main/screenshot1.png?raw=true\" alt=\"vinix screenshot 2\">\n\n## Acknowledgement\n\nV thanks Fabrice Bellard for his original work on the\n[TCC - Tiny C Compiler](https://bellard.org/tcc/).\nNote the TCC website is old; the current TCC repository can be found\n[here](https://repo.or.cz/w/tinycc.git).\nV utilizes pre-built TCC binaries located at\n[https://github.com/vlang/tccbin/](https://github.com/vlang/tccbin/).\n\n## Troubleshooting\n\nPlease see the\n[Troubleshooting](https://github.com/vlang/v/wiki/Troubleshooting)\nsection on our\n[wiki page](https://github.com/vlang/v/wiki).\n\n[WorkflowBadge]: https://github.com/vlang/v/workflows/CI/badge.svg\n[DiscordBadge]: https://img.shields.io/discord/592103645835821068?label=Discord&logo=discord&logoColor=white\n[PatreonBadge]: https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.vercel.app%2Fapi%3Fusername%3Dvlang%26type%3Dpatrons&style=flat\n[SponsorBadge]: https://img.shields.io/github/sponsors/medvednikov?style=flat&logo=github&logoColor=white\n[XBadge]: https://img.shields.io/badge/follow-%40v__language-1DA1F2?logo=x&style=flat&logoColor=white\n[ModulesBadge]: https://img.shields.io/badge/modules-reference-027d9c?logo=v&logoColor=white&logoWidth=10\n\n[WorkflowUrl]: https://github.com/vlang/v/commits/master\n[DiscordUrl]: https://discord.gg/vlang\n[PatreonUrl]: https://patreon.com/vlang\n[SponsorUrl]: https://github.com/sponsors/medvednikov\n[XUrl]: https://x.com/v_language\n[ModulesUrl]: https://modules.vlang.io\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 2.92,
          "content": "Roadmap with big features.\nFor a list of all features and fixes, check out the changelog.\n\n## [Version 0.3]\n\n- [x] gc option\n- [x] channels\n- [x] lock{}\n- [x] thread safe arrays\n- [x] rune type\n- [x] replace `ustring` with `[]rune`\n- [x] fix `byte.str()`\n- [x] maps with non-string keys\n- [x] iOS/Android support\n- [x] parallel cgen\n- [x] IO streams\n- [x] struct embedding\n- [x] interface embedding\n- [x] interfaces: allow struct fields (not just methods)\n- [x] short generics syntax (`foo(5)` instead of `foo<int>(5)`)\n- [x] more advanced errors, not just `error('message')`\n\n## [Version 0.4]\n\n- [x] [Coroutines](https://github.com/vlang/v/discussions/11582)\n- [x] vfmt: add missing imports (like goimports)\n- [x] Recursive structs via options: `struct Node { next ?Node }`\n- [x] First class Option type\n- [x] Optional function struct fields\n- [x] Handle function pointers safely, remove `if function == 0 {`\n- [x] Bundle OpenSSL like GC\n- [x] Anonymous structs\n- [x] Improve vweb: allow separation of logic via \"controllers\", lots of other fixes\n- [x] New VPM site\n\n## [Version 0.5]\n\n- [x] Parallel parser (not integrated yet)\n- [x] Parallel checker (not integrated yet)\n- [x] Parallel C compilation (not integrated yet)\n- [x] Improved vweb => veb framework. Separation of global and context (request local) fields.\n      Performance and stability. Based on picoev.\n- [x] -skip-unused on by default\n- [ ] 64/32 bit int depending on arch (will remove array.len limitation on 64 bit systems)\n- [ ] `copy()` builtin function (e.g. for easier conversion from `[]Foo` to `[4]Foo`)\n- [x] Lambdas: `a.sort(|a, b| a > b)`\n- [ ] Custom attributes\n- [ ] Contexts that are passed implicitly (e.g. for custom allocation/memory management)\n- [x] Implicit Veb contexts passed to requests\n- [x] Direct C/C++ interop without generating wrappers (via -experimental for now)\n- [ ] Make ORM work without installing developer libs (libpq-dev etc)\n\n## [Version 0.6]\n\n- [ ] Integrate the new parallel parser/checker/cc\n- [ ] Incremental compilation\n- [ ] Runtime race detector\n- [ ] [Thread safe maps](https://github.com/vlang/v/discussions/11729)\n- [ ] `recover()` from panics\n- [ ] -usecache on by default\n- [ ] ORM migrations\n- [ ] Allow `$if` everywhere: top level, inside struct definitions, etc\n\n## [Version 1.0]\n\n- [ ] Cross compilation of C\n- [ ] Big remaining bugs fixed\n- [ ] More powerful comptime\n- [ ] Constraints for generics\n- [ ] Coroutines on Windows\n- [ ] Autofree memory management option ready for production\n- [ ] C2V supporting entire C99 standard\n- [ ] [Shared compiled libs](https://github.com/vlang/rfcs/issues/27)\n\n### Tooling\n\n- [ ] More stable VLS\n- [ ] Profiler improvements\n  - [ ] Basic interactive shell with search, sort, filter, etc.\n- [ ] VPM\n  - [x] New VPM site\n  - [ ] Package versioning\n- [ ] A better documentation platform\n\n### Web\n\n- [ ] Site that brings everything together in a single style\n- [ ] Interactive educational platform (learning to program for beginners)\n"
        },
        {
          "name": "TESTS.md",
          "type": "blob",
          "size": 6.73,
          "content": "# Automated tests\n\nTLDR: do run `v test-all` locally, after making your changes,\nand before submitting PRs.\n\nTip: use `v -cc tcc` when compiling tests, because TCC is much faster,\ncompared to most other C compilers like clang/gcc/msvc. Most test commands\nwill use the V compiler and the V tools many times, potentially\nhundreds/thousands of times.\n\n## `v test-all`\n\nTest and build *everything*. Useful to verify *locally*, that the CI will\nmost likely pass. Slowest, but most comprehensive.\n\nIt works, by running these in succession:\n\n* `v test-cleancode`\n* `v test-self`\n* `v test-fmt`\n* `v build-tools`\n* `v build-examples`\n* `v check-md -hide-warnings .`\n* `v install nedpals.args`\n\n# Details:\n\nIn the `v` repo there are many tests. The main types are:\n\n## `_test.v` tests - these are the normal V test files.\n\nAll `test_` functions in these files, will be ran automatically by\nV's test framework.\n\nNB 1: You can run test files one by one, with:\n`v file_test.v` - this will run the test_ functions in file_test.v,\nand will exit with a 0 exit code, if they all had 0 failing assertions.\n\n`v -stats file_test.v` - this will run the test_ functions, and show a\nreport about how much time it took to run each of them too.\n\nNB 2: You can also run many test files at once (in parallel, depending on\nhow many cores you have), with:\n`v test folder` - this will run *all* `_test.v` files in `folder`,\nrecursively.\n\n`v -stats test folder` - same, but will also produce timing reports\nabout how fast each test_ function in each _test.v file ran.\n\n## `v test vlib/v/tests`:\n\nThis folder contains _test.v files, testing the different features of the V\ncompiler. Each of them will be compiled, and all the features in them have\nto work (verified by assertions).\n\n## `v vlib/v/slow_tests/inout/compiler_test.v`\n\nThis is a *test runner*, that checks whether the output of running a V program,\nmatches an expected .out file. You can also check for code that does panic\nusing this test runner - just paste the start of the `panic()` output in the\ncorresponding .out file.\n\n> [!NOTE]\n> These tests, expect to find a pair of `.vv` and `.out` files, in the folder:\n> vlib/v/slow_tests/inout\n\nThe test runner will run each `.vv` file, and will check that its output, matches\nthe contents of the `.out` file with the same base name. This is particularly useful\nfor checking that errors and panics are printed.\n\n## `v vlib/v/gen/c/coutput_test.v`\n\ncoutput_test.v is a *test runner*, that checks whether the generated C source\ncode matches *all* expectations, specified in *.c.must_have files, in the\nfolder vlib/v/gen/c/testdata/ .\n\nEach `.c.must_have` file, *has* to have a corresponding `.vv` file.\n\nEach `.c.must_have` file, consists of multiple lines. Each of these\nlines, *should* be present *at least once* in the output, when the .vv\nfile is compiled with `-o -` .\n\n## `v vlib/v/slow_tests/run_project_folders_test.v`\n\nThis *test runner*, checks whether whole project folders, can be compiled, and run.\n\n> [!NOTE]\n> Each project in these folders, should finish with an exit code of 0,\n> and it should output `OK` as its last stdout line.\n\n## `v vlib/v/tests/known_errors/known_errors_test.v`\n\nThis *test runner*, checks whether a known program, that was expected to compile,\nbut did NOT, due to a buggy checker, parser or cgen, continues to fail.\nThe negative programs are collected in the `vlib/v/tests/known_errors/testdata/` folder.\nEach of them should FAIL to compile, due to a known/confirmed compiler bug/limitation.\n\nThe intended use of this, is for providing samples, that currently do NOT compile,\nbut that a future compiler improvement WILL be able to compile, and to\ntrack, whether they were not fixed incidentally, due to an unrelated\nchange/improvement. For example, code that triggers generating invalid C code can go here,\nand later when a bug is fixed, can be moved to a proper _test.v or .vv/.out pair, outside of\nthe `vlib/v/tests/known_errors/testdata/` folder.\n\n## Test building of actual V programs (examples, tools, V itself)\n\n* `v build-tools`\n* `v build-examples`\n* `v build-vbinaries`\n\n## Formatting tests\n\nIn `vlib/v/fmt/` there are:\n\n* `v vlib/v/fmt/fmt_test.v`\n\nThis checks `.out` tests.\n\n* `v vlib/v/fmt/fmt_keep_test.v`\n\nThis verifies that all `_keep.vv` files in the `vlib/v/fmt/tests/` folder,\nwould be unchanged by `v fmt -w`, i.e. that the v source code formatter,\ngenerates a stable source output, that does not change, once it is already\nformatted once.\n\n* `v vlib/v/fmt/fmt_vlib_test.v`\n\nThis checks that all V source files are formatted, and prints a summary.\nThis is not required.\n\n* `v test-cleancode`\n\nCheck that most .v files, are invariant of `v fmt` runs.\n\n* `v test-fmt`\n\nThis tests that all .v files in the current folder are already formatted.\nIt is useful for adding to CI jobs, to guarantee, that future contributions\nwill keep the existing source nice and clean.\n\n## Markdown/documentation checks:\n\n* `v check-md -hide-warnings .`\n\nEnsure that all .md files in the project are formatted properly,\nand that the V code block examples in them can be compiled/formatted too.\n\nNote: if that command finds formatting errors, they can be fixed with:\n`VAUTOFIX=1 ./v check-md file.md` or with `v check-md -fix file.md`.\n\n## `v test-self`\n\nRun `vlib` module tests, *including* the compiler tests.\n\n## `v vlib/v/compiler_errors_test.v`\n\nThis runs tests for:\n\n* `vlib/v/scanner/tests/*.vv`\n* `vlib/v/checker/tests/*.vv`\n* `vlib/v/parser/tests/*.vv`\n\n> [!NOTE]\n> There are special folders, that compiler_errors_test.v will try to\n> run/compile with specific options:\n\nvlib/v/checker/tests/globals_run/ - `-enable-globals run`;\nresults stored in `.run.out` files, matching the .vv ones.\n\nNB 2: in case you need to modify many .out files, run *twice* in a row:\n`VAUTOFIX=1 ./v vlib/v/compiler_errors_test.v`\nThis will fail the first time, but it will record the new output for each\n.vv file, and store it into the corresponding .out file. The second run\nshould be now successful, and so you can inspect the difference, and\ncommit the new .out files with minimum manual effort.\n\nNB 3: To run only some of the tests, use:\n`VTEST_ONLY=mismatch ./v vlib/v/compiler_errors_test.v`\nThis will check only the .vv files, whose paths match the given filter.\n\n## `.github/workflows/ci.yml`\n\nThis is a Github Actions configuration file, that runs various CI\ntests in the main V repository, for example:\n\n* `v vet vlib/v` - run a style checker.\n* `v test-self` (run self tests) in various compilation modes.\n\n> [!NOTE]\nThe VDOC test vdoc_file_test.v now also supports VAUTOFIX, which is\nuseful, if you change anything inside cmd/tools/vdoc or vlib/v/doc/,\nor inside the modules that it depends on (like markdown).\nAfter such changes, just run this command *2 times*, and commit the\nresulting changes in `cmd/tools/vdoc/testdata` as well:\n`VAUTOFIX=1 ./v cmd/tools/vdoc/vdoc_file_test.v`\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "changelogs0.x",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "make.bat",
          "type": "blob",
          "size": 9.27,
          "content": "@setlocal EnableDelayedExpansion EnableExtensions\n\n@IF NOT DEFINED VERBOSE_MAKE @echo off\n\nREM Option flags\nset /a shift_counter=0\nset /a flag_local=0\n\nREM Option variables\nset compiler=\nset subcmd=\nset target=build\n\nset V_EXE=./v.exe\nset V_BOOTSTRAP=./v_win_bootstrap.exe\nset V_OLD=./v_old.exe\nset V_UPDATED=./v_up.exe\n\nREM TCC variables\nset tcc_url=https://github.com/vlang/tccbin\nset tcc_dir=thirdparty/tcc\nset tcc_exe=thirdparty/tcc/tcc.exe\nif \"%PROCESSOR_ARCHITECTURE%\" == \"x86\" ( set tcc_branch=\"thirdparty-windows-i386\" ) else ( set tcc_branch=\"thirdparty-windows-amd64\" )\nif \"%~1\" == \"-tcc32\" set tcc_branch=\"thirdparty-windows-i386\"\n\nREM VC settings\nset vc_url=https://github.com/vlang/vc\nset vc_dir=%~dp0vc\n\nREM Let a particular environment specify their own TCC and VC repos (to help mirrors)\nif /I not [\"%TCC_GIT%\"] == [\"\"] set tcc_url=%TCC_GIT%\nif /I not [\"%TCC_BRANCH%\"] == [\"\"] set tcc_branch=%TCC_BRANCH%\n\nif /I not [\"%VC_GIT%\"] == [\"\"] set vc_url=%VC_GIT%\n\npushd \"%~dp0\"\n\n:verifyopt\nREM Read stdin EOF\nif [\"%~1\"] == [\"\"] goto :init\n\nREM Target options\nif !shift_counter! LSS 1 (\n\tif \"%~1\" == \"help\" (\n\t\tif not [\"%~2\"] == [\"\"] set subcmd=%~2& shift& set /a shift_counter+=1\n\t)\n\tfor %%z in (build clean cleanall check help rebuild) do (\n\t\tif \"%~1\" == \"%%z\" set target=%1& shift& set /a shift_counter+=1& goto :verifyopt\n\t)\n)\n\nREM Compiler option\nfor %%g in (-gcc -msvc -tcc -tcc32 -clang) do (\n\tif \"%~1\" == \"%%g\" set compiler=%~1& set compiler=!compiler:~1!& shift& set /a shift_counter+=1& goto :verifyopt\n)\n\nREM Standard options\nif \"%~1\" == \"--local\" (\n\tif !flag_local! NEQ 0 (\n\t\techo The flag %~1 has already been specified. 1>&2\n\t\texit /b 2\n\t)\n\tset /a flag_local=1\n\tset /a shift_counter+=1\n\tshift\n\tgoto :verifyopt\n)\n\necho Undefined option: %~1\nexit /b 2\n\n:init\ngoto :!target!\n\n:check\necho.\necho Check everything\n\"%V_EXE%\" test-all\nexit /b 0\n\n:cleanall\ncall :clean\nif %ERRORLEVEL% NEQ 0 exit /b %ERRORLEVEL%\necho.\necho Cleanup vc\necho  ^> Purge TCC binaries\nrmdir /s /q \"%tcc_dir%\"\necho  ^> Purge vc repository\nrmdir /s /q \"%vc_dir%\"\nexit /b 0\n\n:clean\necho Cleanup build artifacts\necho  ^> Purge debug symbols\ndel *.pdb *.lib *.bak *.out *.ilk *.exp *.obj *.o *.a *.so\n\necho  ^> Delete old V executable(s)\ndel v*.exe\nexit /b 0\n\n:rebuild\ncall :cleanall\ngoto :build\n\n:help\nif [!subcmd!] == [] (\n\tcall :usage\n) else (\n\tcall :help_!subcmd!\n)\nif %ERRORLEVEL% NEQ 0 echo Invalid subcommand: !subcmd!\nexit /b %ERRORLEVEL%\n\n:build\nif !flag_local! NEQ 1 (\n\tcall :download_tcc\n\tif %ERRORLEVEL% NEQ 0 goto :error\n\tpushd \"%vc_dir%\" && (\n\t\techo Updating vc...\n\t\techo  ^> Sync with remote !vc_url!\n\t\tcd %vc_dir%\n\t\tgit pull --quiet\n\t\tcd ..\n\t\tpopd\n\t) || call :cloning_vc\n\techo.\n)\n\necho Building V...\nif not [!compiler!] == [] goto :!compiler!_strap\n\n\nREM By default, use tcc, since we have it prebuilt:\n:tcc_strap\n:tcc32_strap\necho  ^> Attempting to build \"%V_BOOTSTRAP%\" (from v_win.c) with \"!tcc_exe!\"\n\"!tcc_exe!\" -Bthirdparty/tcc -bt10 -g -w -o \"%V_BOOTSTRAP%\" ./vc/v_win.c -ladvapi32 -lws2_32\nif %ERRORLEVEL% NEQ 0 goto :compile_error\necho  ^> Compiling \"%V_EXE%\" with \"%V_BOOTSTRAP%\"\n\"%V_BOOTSTRAP%\" -keepc -g -showcc -cc \"!tcc_exe!\" -cflags -Bthirdparty/tcc -o \"%V_UPDATED%\" cmd/v\nif %ERRORLEVEL% NEQ 0 goto :clang_strap\ncall :move_updated_to_v\ngoto :success\n\n:clang_strap\nwhere /q clang\nif %ERRORLEVEL% NEQ 0 (\n\techo  ^> Clang not found\n\tif not [!compiler!] == [] goto :error\n\tgoto :gcc_strap\n)\n\necho  ^> Attempting to build \"%V_BOOTSTRAP%\" (from v_win.c) with Clang\nclang -std=c99 -municode -g -w -o \"%V_BOOTSTRAP%\" ./vc/v_win.c -ladvapi32 -lws2_32\nif %ERRORLEVEL% NEQ 0 (\n\techo In most cases, compile errors happen because the version of Clang installed is too old\n\tclang --version\n\tgoto :compile_error\n)\n\necho  ^> Compiling \"%V_EXE%\" with \"%V_BOOTSTRAP%\"\n\"%V_BOOTSTRAP%\" -keepc -g -showcc -cc clang -o \"%V_UPDATED%\" cmd/v\nif %ERRORLEVEL% NEQ 0 goto :compile_error\ncall :move_updated_to_v\ngoto :success\n\n:gcc_strap\nwhere /q gcc\nif %ERRORLEVEL% NEQ 0 (\n\techo  ^> GCC not found\n\tif not [!compiler!] == [] goto :error\n\tgoto :msvc_strap\n)\n\necho  ^> Attempting to build \"%V_BOOTSTRAP%\" (from v_win.c) with GCC\ngcc -std=c99 -municode -g -w -o \"%V_BOOTSTRAP%\" ./vc/v_win.c -ladvapi32 -lws2_32\nif %ERRORLEVEL% NEQ 0 (\n\techo In most cases, compile errors happen because the version of GCC installed is too old\n\tgcc --version\n\tgoto :compile_error\n)\n\necho  ^> Compiling \"%V_EXE%\" with \"%V_BOOTSTRAP%\"\n\"%V_BOOTSTRAP%\" -keepc -g -showcc -cc gcc -o \"%V_UPDATED%\" cmd/v\nif %ERRORLEVEL% NEQ 0 goto :compile_error\ncall :move_updated_to_v\ngoto :success\n\n:msvc_strap\nset VsWhereDir=%ProgramFiles(x86)%\nset HostArch=x64\nif \"%PROCESSOR_ARCHITECTURE%\" == \"x86\" (\n\techo Using x86 Build Tools...\n\tset VsWhereDir=%ProgramFiles%\n\tset HostArch=x86\n)\n\nif not exist \"%VsWhereDir%/Microsoft Visual Studio/Installer/vswhere.exe\" (\n\techo  ^> MSVC not found\n\tif not [!compiler!] == [] goto :error\n\tgoto :compile_error\n)\n\nfor /f \"usebackq tokens=*\" %%i in (`\"%VsWhereDir%/Microsoft Visual Studio/Installer/vswhere.exe\" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do (\n\tset InstallDir=%%i\n)\n\nif exist \"%InstallDir%/Common7/Tools/vsdevcmd.bat\" (\n\tcall \"%InstallDir%/Common7/Tools/vsdevcmd.bat\" -arch=%HostArch% -host_arch=%HostArch% -no_logo\n) else if exist \"%VsWhereDir%/Microsoft Visual Studio 14.0/Common7/Tools/vsdevcmd.bat\" (\n\tcall \"%VsWhereDir%/Microsoft Visual Studio 14.0/Common7/Tools/vsdevcmd.bat\" -arch=%HostArch% -host_arch=%HostArch% -no_logo\n)\n\nset ObjFile=.v.c.obj\n\necho  ^> Attempting to build \"%V_BOOTSTRAP%\" (from v_win.c) with MSVC\ncl.exe /volatile:ms /Fo%ObjFile% /W0 /MD /D_VBOOTSTRAP \"vc/v_win.c\" user32.lib kernel32.lib advapi32.lib shell32.lib ws2_32.lib /link /nologo /out:\"%V_BOOTSTRAP%\" /incremental:no\nif %ERRORLEVEL% NEQ 0 (\n\techo In some cases, compile errors happen because of the MSVC compiler version\n\tcl.exe\n\tgoto :compile_error\n)\n\necho  ^> Compiling \"%V_EXE%\" with \"%V_BOOTSTRAP%\"\n\"%V_BOOTSTRAP%\" -keepc -g -showcc -cc msvc -o \"%V_UPDATED%\" cmd/v\ndel %ObjFile%\nif %ERRORLEVEL% NEQ 0 goto :compile_error\ncall :move_updated_to_v\ngoto :success\n\n:download_tcc\npushd \"%tcc_dir%\" && (\n\techo Updating TCC\n\techo  ^> Syncing TCC from !tcc_url!\n\tgit pull --quiet\n\tpopd\n) || call :bootstrap_tcc\n\nif [!tcc_exe!] == [] echo  ^> TCC not found, even after cloning& goto :error\necho.\nexit /b 0\n\n:compile_error\necho.\necho Backend compiler error\ngoto :error\n\n:error\necho.\necho Exiting from error\necho ERROR: please follow the instructions in https://github.com/vlang/v/wiki/Installing-a-C-compiler-on-Windows\nexit /b 1\n\n:success\n\"%V_EXE%\" run cmd/tools/detect_tcc.v\necho  ^> V built successfully!\necho  ^> To add V to your PATH, run `%V_EXE% symlink`.\n\n:version\necho.\necho | set /p=\"V version: \"\n\"%V_EXE%\" version\n\"%V_EXE%\" run .github/problem-matchers/register_all.vsh\ngoto :eof\n\n:usage\necho Usage:\necho     make.bat [target] [compiler] [options]\necho.\necho Compiler:\necho     -msvc ^| -gcc ^| -tcc ^| -tcc32 ^| -clang    Set C compiler\necho.\necho Target:\necho     build[default]    Compiles V using the given C compiler\necho     clean             Clean build artifacts and debugging symbols\necho     cleanall          Cleanup entire ALL build artifacts and vc repository\necho     check             Check that tests pass, and the repository is in a good shape for Pull Requests\necho     help              Display help for the given target\necho     rebuild           Fully clean/reset repository and rebuild V\necho.\necho Examples:\necho     make.bat -msvc\necho     make.bat -gcc --local\necho     make.bat build -tcc --local\necho     make.bat -tcc32\necho     make.bat help clean\necho.\necho Use \"make help <target>\" for more information about a target, for instance: \"make help clean\"\necho.\necho Note: Any undefined/unsupported options will be ignored\nexit /b 0\n\n:help_help\necho Usage:\necho     make.bat help [target]\necho.\necho Target:\necho     build ^| clean ^| cleanall ^| help    Query given target\nexit /b 0\n\n:help_clean\necho Usage:\necho     make.bat clean\necho.\nexit /b 0\n\n:help_cleanall\necho Usage:\necho     make.bat cleanall\necho.\nexit /b 0\n\n:help_build\necho Usage:\necho     make.bat build [compiler] [options]\necho.\necho Compiler:\necho     -msvc ^| -gcc ^| -tcc ^| -tcc32 ^| -clang    Set C compiler\necho.\necho Options:\necho    --local     Use the local vc repository without\necho                syncing with remote\nexit /b 0\n\n:help_rebuild\necho Usage:\necho     make.bat rebuild [compiler] [options]\necho.\necho Compiler:\necho     -msvc ^| -gcc ^| -tcc ^| -tcc32 ^| -clang    Set C compiler\necho.\necho Options:\necho    --local     Use the local vc repository without\necho                syncing with remote\nexit /b 0\n\n:bootstrap_tcc\necho Bootstrapping TCC...\necho  ^> TCC not found\nif \"!tcc_branch!\" == \"thirdparty-windows-i386\" ( echo  ^> Downloading TCC32 from !tcc_url! , branch !tcc_branch! ) else ( echo  ^> Downloading TCC64 from !tcc_url! , branch !tcc_branch! )\ngit clone --filter=blob:none --quiet --branch !tcc_branch! !tcc_url! \"%tcc_dir%\"\ngit --no-pager -C \"%tcc_dir%\" log -n3\nexit /b 0\n\n:cloning_vc\necho Cloning vc...\necho  ^> Cloning from remote !vc_url!\ngit clone --filter=blob:none --quiet \"%vc_url%\"\nexit /b 0\n\n:eof\npopd\nendlocal\nexit /b 0\n\n:move_updated_to_v\n@REM del \"%V_EXE%\" &:: breaks if `make.bat` is run from `v up` b/c of held file handle on `%V_EXE%`\nif exist \"%V_EXE%\" move \"%V_EXE%\" \"%V_OLD%\" >nul\nREM sleep for at most 100ms\nping 192.0.2.1 -n 1 -w 100 >nul\nmove \"%V_UPDATED%\" \"%V_EXE%\" >nul\nexit /b 0\n"
        },
        {
          "name": "thirdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorials",
          "type": "tree",
          "content": null
        },
        {
          "name": "v.mod",
          "type": "blob",
          "size": 0.15,
          "content": "Module {\n\tname: 'V'\n\tdescription: 'The V programming language.'\n\tversion: '0.4.9'\n\tlicense: 'MIT'\n\trepo_url: 'https://github.com/vlang/v'\n\tdependencies: []\n}\n"
        },
        {
          "name": "vlib",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}