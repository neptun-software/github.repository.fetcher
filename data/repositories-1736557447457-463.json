{
  "metadata": {
    "timestamp": 1736557447457,
    "page": 463,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "streamlit/streamlit",
      "stars": 36620,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.48,
          "content": "# https://editorconfig.org/\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nend_of_line = lf\ncharset = utf-8\nmax_line_length = 79\n\n[*.py]\nindent_size = 4\nmax_line_length = 88\n\n# The JSON files contain newlines inconsistently\n[*.json]\ninsert_final_newline = ignore\n\n[**/node_modules/**]\nindent_style = ignore\nindent_size = ignore\n\n[**.min.js]\nindent_style = ignore\ninsert_final_newline = ignore\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.86,
          "content": "########################################################################\n# Python - https://github.com/github/gitignore/blob/master/Python.gitignore\n########################################################################\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# Distribution / packaging\nbuild/\ndist/\neggs/\n.eggs/\n*.egg-info/\n*.egg\n.prerelease-version\n\n# Unit test / coverage reports\n.coverage\n.coverage\\.*\n.pytest_cache/\n.mypy_cache/\ntest-reports\nhtmlcov\n.hypothesis\n.ruff_cache\n\n# Test fixtures\ncffi_bin\n\n# Pyenv / uv Stuff\n.python-version\nvenv\n.venv\n\n# Autogenerated Protobufs\nlib/streamlit/proto/*_pb2.py\nlib/streamlit/proto/*_pb2.pyi\nfrontend/lib/src/proto.js\nfrontend/lib/src/proto.d.ts\n\n########################################################################\n# OSX - https://github.com/github/gitignore/blob/master/Global/macOS.gitignore\n########################################################################\n.DS_Store\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n########################################################################\n# node - https://github.com/github/gitignore/blob/master/Node.gitignore\n########################################################################\n# Logs\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Dependency directories\nnode_modules/\n\n# ESLint\n.eslintcache\n\n# Coverage directory used by tools like istanbul\ncoverage/\n\n########################################################################\n# Streamlit\n########################################################################\n.streamlit/\n!e2e_playwright/.streamlit/\nlib/streamlit/static\nstreamlit-storage\n\n# Data Files\n**/uber-raw-data-sep14.csv\n\nlib/Pipfile.lock\n\n########################################################################\n# JetBrains\n########################################################################\n.idea\n\n########################################################################\n# Playwright\n########################################################################\n# Playwright test\nplaywright-report\ne2e_playwright/test-results\n# Only keep the snapshots in the linux folder\ne2e_playwright/__snapshots__/*\n!e2e_playwright/__snapshots__/linux\n\n########################################################################\n# Cypress\n########################################################################\nfrontend/cypress/downloads\nfrontend/cypress/videos\nfrontend/cypress/screenshots\n__diff_output__\ncypress.env.json\nfrontend/test_results\n\n# Ignore screenshots that don't get used in CircleCI\nfrontend/cypress/snapshots/darwin\nfrontend/cypress/snapshots/linux/1x\n\n\n########################################################################\n# VSCode\n########################################################################\n.vscode/*\n!.vscode/extensions.json\n!.vscode/launch.json\n\n.swc/\n"
        },
        {
          "name": ".nvmrc",
          "type": "blob",
          "size": 0.01,
          "content": "lts/*\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 5.41,
          "content": "# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Pre-commit configuration file,\n# when Streamlit's pre-commit detects that one of the linters has failed,\n# it automatically lints the files and does not allow the commit to pass.\n# Please review the changes after lint has failed and commit them again,\n# the second commit should pass,\n# because the files were linted after trying to do the first commit.\nrepos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    # Ruff version.\n    rev: v0.8.0\n    hooks:\n      # Run the linter.\n      - id: ruff\n        args: [--fix]\n        files: \\.py$|\\.pyi$\n      # Run the formatter.\n      - id: ruff-format\n        files: \\.py$|\\.pyi$\n  - repo: local\n    hooks:\n      # Script ./scripts/run_in_subdirectory.py was used to work around a\n      # known problem with hooks in subdirectories when pass_filenames option\n      # is set to true\n      # See: https://github.com/pre-commit/pre-commit/issues/1417\n      - id: prettier\n        name: Prettier\n        # NOTE: This hook currently does not work on Windows due to \"yarn\" not being an executable and win32api.CreateProcess\n        # turning `subprocess.run([\"yarn\", \"prettier\", \"--write\"])` into a call to `yarn.exe prettier --write` which does not exist\n        entry: ./scripts/run_in_subdirectory.py frontend/ yarn prettier --write\n        files: ^frontend/.*\\.(js|jsx|ts|tsx)$\n        exclude: /vendor/\n        language: node\n        pass_filenames: true\n      - id: prettier-yaml\n        name: Prettier-yaml\n        # NOTE: This hook currently does not work on Windows due to \"yarn\" not being an executable and win32api.CreateProcess\n        # turning `subprocess.run([\"yarn\", \"prettier\", \"--write\"])` into a call to `yarn.exe prettier --write` which does not exist\n        entry: ./scripts/run_in_subdirectory.py frontend yarn prettier ../.github --write\n        files: ^.github/.*\\.(yml|yaml)$\n        language: node\n        pass_filenames: false\n      - id: license-headers\n        name: Checks that all files have the required license headers\n        entry: ./scripts/check_license_headers.py\n        language: system\n        always_run: true\n        pass_filenames: false\n  - repo: https://github.com/Lucas-C/pre-commit-hooks\n    rev: v1.5.5\n    hooks:\n      - id: insert-license\n        name: Add license for all (S)CSS/JS(X)/TS(X) files\n        files: \\.(s?css|jsx?|tsx?)$\n        args:\n          - --comment-style\n          - \"/**| *| */\"\n          - --license-filepath\n          - scripts/license-template.txt\n          - --fuzzy-match-generates-todo\n        exclude: |\n          (?x)\n          /vendor/\n          |^vendor/\n          |^component-lib/declarations/apache-arrow\n          |^frontend/app/src/assets/css/variables\\.scss\n          |^lib/tests/streamlit/elements/test_html\\.js\n          |^e2e_playwright/test_assets/\n      - id: insert-license\n        name: Add license for all Proto files\n        files: \\.proto$\n        args:\n          - --comment-style\n          - \"/**!| *| */\"\n          - --license-filepath\n          - scripts/license-template.txt\n          - --fuzzy-match-generates-todo\n        exclude: |\n          (?x)\n          /vendor/\n          |^vendor/\n          |^component-lib/declarations/apache-arrow\n          |^proto/streamlit/proto/openmetrics_data_model\\.proto\n      - id: insert-license\n        name: Add license for all shell files\n        files: \\.sh$\n        args:\n          - --comment-style\n          - \"|#|\"\n          - --license-filepath\n          - scripts/license-template.txt\n          - --fuzzy-match-generates-todo\n        exclude: |\n          (?x)\n          /vendor/\n          |^vendor/\n          |^component-lib/declarations/apache-arrow\n      - id: insert-license\n        name: Add license for all Python files\n        files: \\.py$|\\.pyi$\n        args:\n          - --comment-style\n          - \"|#|\"\n          - --license-filepath\n          - scripts/license-template.txt\n          - --fuzzy-match-generates-todo\n        exclude: |\n          (?x)\n          /vendor/\n          |^vendor/\n          |^component-lib/declarations/apache-arrow\n      - id: insert-license\n        name: Add license for all HTML files\n        files: \\.html$\n        args:\n          - --comment-style\n          - \"<!--||-->\"\n          - --license-filepath\n          - scripts/license-template.txt\n          - --fuzzy-match-generates-todo\n        exclude: |\n          (?x)\n          /vendor/\n          |^vendor/\n          |^component-lib/declarations/apache-arrow\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: trailing-whitespace\n        exclude: |\n          (?x)\n          ^frontend/app/src/assets/\n          |^NOTICES$\n          |^proto/streamlit/proto/openmetrics_data_model.proto$\n          |\\.snap$\n      - id: check-added-large-files\n      - id: check-json\n        exclude: .vscode/launch.json\n      - id: check-toml\n      - id: check-yaml\n        exclude: lib/conda-recipe/meta.yaml\n"
        },
        {
          "name": ".ruff.toml",
          "type": "blob",
          "size": 3.42,
          "content": "# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# In addition to the standard set of exclusions, omit all tests:\nextend-exclude = [\"lib/streamlit/proto\", \"lib/streamlit/emojis.py\", \"e2e_playwright/compilation_error_dialog.py\"]\ninclude = [\n  \"lib/**/*.py\",\n  \"lib/**/*.pyi\",\n  \"e2e_playwright/**/*.py\",\n  \"scripts/**/*.py\",\n]\ntarget-version = 'py38'\nline-length = 88\n\n[format]\ndocstring-code-format = true\ndocstring-code-line-length = \"dynamic\"\n\n[lint]\nselect = [\n  \"B\",      # flake8-bugbear\n  \"C4\",     # Helps you write better list/set/dict comprehensions.\n  \"E\",      # pycodestyle errors\n  \"FA\",     # Verifies files use from __future__ import annotations if a type is used in the module that can be rewritten using PEP 563.\n  \"F\",      # pyflakes\n  \"G\",      # Better usage of built-in logging\n  \"I\",      # isort - Import sorting\n  \"ISC\",    # Encourage correct string literal concatenation.\n  \"LOG\",    # Checks for issues using the standard library logging module.\n  \"NPY\",    # Linting rules for numpy\n  \"PLC\",    # pycodestyle conventions\n  \"PYI\",    # Linting rules for type annotations.\n  \"Q\",      # Linting rules for quites\n  \"RUF100\", # Unused noqa directive\n  \"T20\",    # Check for Print statements in python files.\n  \"TCH\",    # Move type only imports to type-checking condition.\n  \"TID\",    # Helps you write tidier imports.\n  \"UP\",     # pyupgrade\n  \"W\",      # pycodestyle warnings\n]\nignore = [\n  \"B008\",    # Checks for function calls in default function arguments.\n  \"B904\",    # Checks for raise statements in exception handlers that lack a from clause.\n  \"E501\",    # Checks for lines that exceed the specified maximum character length.\n  \"ISC001\",  # Checks for implicitly concatenated strings on a single line.\n  \"NPY002\",  # Checks for the use of legacy np.random function calls.\n  \"PYI036\",  # Checks for incorrect function signatures on __exit__ and __aexit__ methods.\n  \"PYI041\",  # Checks for parameter annotations that contain redundant unions between builtin numeric types (e.g., int | float).\n  \"PYI051\",  # Checks for redundant unions between a Literal and a builtin supertype of that Literal.\n  \"UP031\",   # Checks for printf-style string formatting, and offers to replace it with str.format calls.\n  \"PLC0208\", # Checks for iterations over set literals.\n  \"G004\",    # Checks for usage of f-strings in logging messages\n]\n# Do not lint files in tests, scripts, and vendor directory:\nexclude = [\n  \"lib/streamlit/vendor/**\",\n  \"scripts/**\",\n  \".github/**\"\n]\n\n[lint.per-file-ignores]\n\"e2e_playwright/**\" = [\"T20\", \"B018\"]\n\"lib/streamlit/__init__.py\" = [\"E402\", \"PLC0414\"]\n\n[lint.flake8-tidy-imports]\n# Disallow all relative imports.\nban-relative-imports = \"all\"\n\n[lint.isort]\nknown-first-party = [\"streamlit\", \"shared\", \"tests\", \"e2e_playwright\"]\n\n[lint.flake8-comprehensions]\n# Allow dict calls that make use of keyword arguments (e.g., dict(a=1, b=2)).\nallow-dict-calls-with-keyword-arguments = true\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.27,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n- Using welcoming and inclusive language\n- Being respectful of differing viewpoints and experiences\n- Gracefully accepting constructive criticism\n- Focusing on what is best for the community\n- Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n- The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n- Trolling, insulting/derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n- Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at hello@streamlit.io. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.17,
          "content": "🎉 Thanks for your interest in helping improve Streamlit! 🎉\n\nBefore contributing, please read our guidelines here: https://github.com/streamlit/streamlit/wiki/Contributing\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.09,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 15.78,
          "content": "# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2025)\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Make uses /bin/sh by default, but we are using some bash features.  On Ubuntu\n# /bin/sh is POSIX compliant, ie it's not bash.  So let's be explicit:\nSHELL=/bin/bash\n\nINSTALL_DEV_REQS ?= true\nINSTALL_TEST_REQS ?= true\nUSE_CONSTRAINTS_FILE ?= true\nPYTHON_VERSION := $(shell python --version | cut -d \" \" -f 2 | cut -d \".\" -f 1-2)\nGITHUB_REPOSITORY ?= streamlit/streamlit\nCONSTRAINTS_BRANCH ?= constraints-develop\nCONSTRAINTS_URL ?= https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/${CONSTRAINTS_BRANCH}/constraints-${PYTHON_VERSION}.txt\n\n# Black magic to get module directories\nPYTHON_MODULES := $(foreach initpy, $(foreach dir, $(wildcard lib/*), $(wildcard $(dir)/__init__.py)), $(realpath $(dir $(initpy))))\n\n# Check if Python is installed and can be executed, otherwise show an error message in red (but continue)\nifeq ($(PYTHON_VERSION),)\nerror_message=\"Error: Python version is not detected. Please ensure Python is installed and accessible in your PATH.\"\nerror_message_red_colored=$(shell echo -e \"\\033[0;31m ${error_message} \\033[0m\")\n$(warning ${error_message_red_colored})\nendif\n\n.PHONY: help\nhelp:\n\t@# Magic line used to create self-documenting makefiles.\n\t@# Note that this means the documenting comment just before the command (but after the .PHONY) must be all one line, and should begin with a capital letter and end with a period.\n\t@# See https://stackoverflow.com/a/35730928\n\t@awk '/^#/{c=substr($$0,3);next}c&&/^[[:alpha:]][[:alnum:]_-]+:/{print substr($$1,1,index($$1,\":\")),c}1{c=0}' Makefile | column -s: -t\n\n.PHONY: all\n# Get dependencies, build frontend, install Streamlit into Python environment.\nall: init frontend install\n\n.PHONY: all-devel\n# Get dependencies and install Streamlit into Python environment -- but do not build the frontend.\nall-devel: init develop pre-commit-install\n\t@echo \"\"\n\t@echo \"    The frontend has *not* been rebuilt.\"\n\t@echo \"    If you need to make a wheel file or test S3 sharing, run:\"\n\t@echo \"\"\n\t@echo \"    make frontend\"\n\t@echo \"\"\n\n.PHONY: mini-devel\n# Get minimal dependencies for development and install Streamlit into Python environment -- but do not build the frontend.\nmini-devel: mini-init develop pre-commit-install\n\n.PHONY: build-deps\n# An even smaller installation than mini-devel. Installs the bare minimum necessary to build Streamlit (by leaving out some dependencies necessary for the development process). Does not build the frontend.\nbuild-deps: mini-init develop\n\n.PHONY: init\n# Install all Python and JS dependencies.\ninit: python-init-all react-init protobuf\n\n.PHONY: mini-init\n# Install minimal Python and JS dependencies for development.\nmini-init: python-init-dev-only react-init protobuf\n\n.PHONY: frontend\n# Build frontend into static files.\nfrontend: react-build\n\n.PHONY: install\n# Install Streamlit into your Python environment.\ninstall:\n\tcd lib ; python setup.py install\n\n.PHONY: develop\n# Install Streamlit as links in your Python environment, pointing to local workspace.\ndevelop:\n\tINSTALL_DEV_REQS=false INSTALL_TEST_REQS=false make python-init\n\n.PHONY: python-init-all\n# Install Streamlit and all (test and dev) requirements.\npython-init-all:\n\tINSTALL_DEV_REQS=true INSTALL_TEST_REQS=true make python-init\n\n.PHONY: python-init-dev-only\n# Install Streamlit and dev requirements.\npython-init-dev-only:\n\tINSTALL_DEV_REQS=true INSTALL_TEST_REQS=false make python-init\n\n.PHONY: python-init-test-only\n# Install Streamlit and test requirements.\npython-init-test-only: lib/test-requirements.txt\n\tINSTALL_DEV_REQS=false INSTALL_TEST_REQS=true make python-init\n\n.PHONY: python-init\npython-init:\n\tpip_args=(\"--editable\" \"./lib\");\\\n\tif [ \"${USE_CONSTRAINTS_FILE}\" = \"true\" ] ; then\\\n\t\tpip_args+=(--constraint \"${CONSTRAINTS_URL}\"); \\\n\tfi;\\\n\tif [ \"${INSTALL_DEV_REQS}\" = \"true\" ] ; then\\\n\t\tpip_args+=(\"--requirement\" \"lib/dev-requirements.txt\"); \\\n\tfi;\\\n\tif [ \"${INSTALL_TEST_REQS}\" = \"true\" ] ; then\\\n\t\tpip_args+=(\"--requirement\" \"lib/test-requirements.txt\"); \\\n\tfi;\\\n\tif command -v \"uv\" > /dev/null; then \\\n\t\techo \"Running command: uv pip install $${pip_args[@]}\"; \\\n\t\tuv pip install $${pip_args[@]}; \\\n\telse \\\n\t\techo \"Running command: pip install $${pip_args[@]}\"; \\\n\t\tpip install $${pip_args[@]}; \\\n\tfi;\\\n\tif [ \"${INSTALL_TEST_REQS}\" = \"true\" ] ; then\\\n\t\tpython -m playwright install --with-deps; \\\n\tfi;\\\n\n.PHONY: pylint\n# Verify that our Python files are properly formatted and that there are no lint errors.\npylint:\n\t# Checks if the formatting is correct:\n\truff format --check\n\t# Run linter:\n\truff check\n\n.PHONY: pyformat\n# Fix Python files that are not properly formatted.\npyformat:\n\t# Sort imports ( see https://docs.astral.sh/ruff/formatter/#sorting-imports )\n\truff check --select I --fix\n\t# Run code formatter\n\truff format\n\n.PHONY: pytest\n# Run Python unit tests.\npytest:\n\tcd lib; \\\n\t\tPYTHONPATH=. \\\n\t\tpytest -v \\\n\t\t\t-l tests/ \\\n\t\t\t$(PYTHON_MODULES)\n\n# Run Python integration tests.\n# This requires the integration-requirements to be installed.\npytest-integration:\n\tcd lib; \\\n\t\tPYTHONPATH=. \\\n\t\tpytest -v \\\n\t\t\t--require-integration \\\n\t\t\t-l tests/ \\\n\t\t\t$(PYTHON_MODULES)\n\n.PHONY: mypy\n# Run Mypy static type checker.\nmypy:\n\tmypy --config-file=lib/mypy.ini --namespace-packages lib/streamlit/ lib/tests/streamlit/typing/ scripts/\n\n.PHONY: bare-execution-tests\n# Run all our e2e tests in \"bare\" mode and check for non-zero exit codes.\nbare-execution-tests:\n\tPYTHONPATH=. \\\n\tpython3 scripts/run_bare_execution_tests.py\n\n.PHONY: cli-smoke-tests\n# Verify that CLI boots as expected when called with `python -m streamlit`.\ncli-smoke-tests:\n\tpython3 scripts/cli_smoke_tests.py\n\n.PHONY: cli-regression-tests\n# Verify that CLI boots as expected when called with `python -m streamlit`.\ncli-regression-tests: install\n\tpytest scripts/cli_regression_tests.py\n\n.PHONY: distribution\n# Create Python distribution files in dist/.\ndistribution:\n\t# Get rid of the old build and dist folders to make sure that we clean old js and css.\n\trm -rfv lib/build lib/dist\n\tcd lib ; python3 setup.py bdist_wheel --universal sdist\n\n.PHONY: package\n# Build lib and frontend, and then run 'distribution'.\npackage: build-deps frontend distribution\n\n.PHONY: conda-distribution\n# Create conda distribution files in lib/conda-recipe/dist.\nconda-distribution:\n\trm -rf lib/conda-recipe/dist\n\tmkdir lib/conda-recipe/dist\n\t# This can take upwards of 20 minutes to complete in a fresh conda installation! (Dependency solving is slow.)\n\t# NOTE: Running the following command requires both conda and conda-build to\n\t# be installed.\n\tGIT_HASH=$$(git rev-parse --short HEAD) conda build lib/conda-recipe --output-folder lib/conda-recipe/dist\n\n.PHONY: conda-package\n# Build lib and (maybe) frontend assets, and then run 'conda-distribution'.\nconda-package: build-deps\n\tif [ \"${SNOWPARK_CONDA_BUILD}\" = \"1\" ] ; then\\\n\t\techo \"Creating Snowpark conda build, so skipping building frontend assets.\"; \\\n\telse \\\n\t\tmake frontend; \\\n\tfi\n\tmake conda-distribution;\n\n.PHONY: clean\n# Remove all generated files.\nclean:\n\tcd lib; rm -rf build dist  .eggs *.egg-info\n\trm -rf lib/conda-recipe/dist\n\tfind . -name '*.pyc' -type f -delete || true\n\tfind . -name __pycache__ -type d -delete || true\n\tfind . -name .pytest_cache -exec rm -rfv {} \\; || true\n\trm -rf .mypy_cache\n\trm -rf .ruff_cache\n\trm -f lib/streamlit/proto/*_pb2.py*\n\trm -rf lib/streamlit/static\n\trm -f lib/Pipfile.lock\n\trm -rf frontend/app/build\n\trm -rf frontend/node_modules\n\trm -rf frontend/app/performance/lighthouse/reports\n\trm -rf frontend/app/node_modules\n\trm -rf frontend/lib/node_modules\n\trm -rf frontend/test_results\n\trm -f frontend/lib/src/proto.js\n\trm -f frontend/lib/src/proto.d.ts\n\trm -rf frontend/public/reports\n\trm -rf frontend/lib/dist\n\trm -rf ~/.cache/pre-commit\n\trm -rf e2e_playwright/test-results\n\trm -rf e2e_playwright/performance-results\n\tfind . -name .streamlit -not -path './e2e_playwright/.streamlit' -type d -exec rm -rfv {} \\; || true\n\tcd lib; rm -rf .coverage .coverage\\.*\n\nMIN_PROTOC_VERSION = 3.20\n.PHONY: check-protoc\n# Ensure protoc is installed and is >= MIN_PROTOC_VERSION.\ncheck-protoc:\n\t@if ! command -v protoc &> /dev/null ; then \\\n\t\techo \"protoc not installed.\"; \\\n\t\texit 1; \\\n\tfi; \\\n\t\\\n\tPROTOC_VERSION=$$(protoc --version | cut -d ' ' -f 2); \\\n\t\\\n\tif [[ $$(echo -e \"$$PROTOC_VERSION\\n$(MIN_PROTOC_VERSION)\" | sort -V | head -n1) != $(MIN_PROTOC_VERSION) ]]; then \\\n\t\techo \"Error: protoc version $${PROTOC_VERSION} is < $(MIN_PROTOC_VERSION)\"; \\\n\t\texit 1; \\\n\telse \\\n\t\techo \"protoc version $${PROTOC_VERSION} is >= than $(MIN_PROTOC_VERSION)\"; \\\n\tfi\n\n.PHONY: protobuf\n# Recompile Protobufs for Python and the frontend.\nprotobuf: check-protoc\n\tprotoc \\\n\t\t--proto_path=proto \\\n\t\t--python_out=lib \\\n\t\t--mypy_out=lib \\\n\t\tproto/streamlit/proto/*.proto\n\n\t@# JS protobuf generation. The --es6 flag generates a proper es6 module.\n\tcd frontend/ ; ( \\\n\t\techo \"/* eslint-disable */\" ; \\\n\t\techo ; \\\n\t\tyarn --silent pbjs \\\n\t\t\t../proto/streamlit/proto/*.proto \\\n\t\t\t--path ../proto -t static-module --wrap es6 \\\n\t) > ./lib/src/proto.js\n\n\t@# Typescript type declarations for our generated protobufs\n\tcd frontend/ ; ( \\\n\t\techo \"/* eslint-disable */\" ; \\\n\t\techo ; \\\n\t\tyarn --silent pbts ./lib/src/proto.js \\\n\t) > ./lib/src/proto.d.ts\n\n.PHONY: react-init\n# React init.\nreact-init:\n\tcd frontend/ ; yarn install --frozen-lockfile\n\n.PHONY: react-build\n# React build.\nreact-build:\n\tcd frontend/ ; yarn run build\n\trsync -av --delete --delete-excluded --exclude=reports \\\n\t\tfrontend/app/build/ lib/streamlit/static/\n\n.PHONY: frontend-build-with-profiler\nfrontend-build-with-profiler:\n\tcd frontend/ ; yarn run buildWithProfiler\n\trsync -av --delete --delete-excluded --exclude=reports \\\n\t\tfrontend/app/build/ lib/streamlit/static/\n\n.PHONY: frontend-lib\n# Build the frontend library.\nfrontend-lib:\n\tcd frontend/ ; yarn run buildLib;\n\n.PHONY: frontend-app\n# Build the frontend app. One must build the frontend lib first before building the app.\nfrontend-app:\n\tcd frontend/ ; yarn run buildApp\n\n.PHONY: jslint\n# Verify that our JS/TS code is formatted and that there are no lint errors.\njslint:\n\tcd frontend/ ; yarn run formatCheck\n\tcd frontend/ ; yarn run lint\n\n.PHONY: tstypecheck\n# Typecheck the JS/TS code.\ntstypecheck:\n\tcd frontend/ ; yarn run typecheck\n\n.PHONY: jsformat\n# Fix formatting issues in our JavaScript & TypeScript files.\njsformat:\n\tcd frontend/ ; yarn run format\n\n.PHONY: jstest\n# Run JS unit tests.\njstest:\n\tcd frontend; TESTPATH=$(TESTPATH) yarn run test\n\n.PHONY: jstestcoverage\n# Run JS unit tests and generate a coverage report.\njstestcoverage:\n\tcd frontend; TESTPATH=$(TESTPATH) yarn run testcoverage\n\n.PHONY: playwright\n# Run playwright E2E tests (without custom component tests).\ncustom_components_test_folder = ./custom_components\nplaywright:\n\tcd e2e_playwright; \\\n\trm -rf ./test-results; \\\n\tpytest --ignore ${custom_components_test_folder} --browser webkit --browser chromium --browser firefox --video retain-on-failure --screenshot only-on-failure --output ./test-results/ -n auto --reruns 1 --reruns-delay 1 --rerun-except \"Missing snapshot\" --durations=5 -r aR -v -m \"not performance\"\n\n.PHONY: playwright-performance\nplaywright-performance:\n\tcd e2e_playwright; \\\n\trm -rf ./test-results; \\\n\tpytest --browser chromium --output ./test-results/ -n 1 --reruns 1 --reruns-delay 1 --rerun-except \"Missing snapshot\" --durations=5 -r aR -v -m \"performance\" --count=10\n\n.PHONY: playwright-custom-components\n# Run playwright custom component E2E tests.\nplaywright-custom-components:\n\tcd e2e_playwright; \\\n\trm -rf ./test-results; \\\n\tpip_args=\"extra-streamlit-components streamlit-ace streamlit-antd-components streamlit-aggrid streamlit-autorefresh streamlit-chat streamlit-echarts streamlit-folium streamlit-option-menu streamlit-url-fragment\"; \\\n\tif command -v \"uv\" > /dev/null; then \\\n\t\techo \"Running command: uv pip install $${pip_args}\"; \\\n\t\tuv pip install $${pip_args}; \\\n\telse \\\n\t\techo \"Running command: pip install $${pip_args}\"; \\\n\t\tpip install $${pip_args}; \\\n\tfi; \\\n\tpytest ${custom_components_test_folder} --browser webkit --browser chromium --browser firefox --video retain-on-failure --screenshot only-on-failure --output ./test-results/ -n auto --reruns 1 --reruns-delay 1 --rerun-except \"Missing snapshot\" --durations=5 -r aR -v\n\n.PHONY: update-snapshots\n# Update e2e playwright snapshots based on the latest completed CI run.\nupdate-snapshots:\n\tpython ./scripts/update_e2e_snapshots.py\n\n.PHONY: update-snapshots-changed\n# Update e2e playwright snapshots of changed files based on the latest completed CI run.\nupdate-snapshots-changed:\n\tpython ./scripts/update_e2e_snapshots.py --changed\n\n.PHONY: update-material-icons\n# Update material icon names and font file based on latest google material symbol rounded font version.\nupdate-material-icons:\n\tpython ./scripts/update_material_icon_font_and_names.py\n\n\n.PHONY: loc\n# Count the number of lines of code in the project.\nloc:\n\tfind . -iname '*.py' -or -iname '*.js'  | \\\n\t\tegrep -v \"(node_modules)|(_pb2)|(lib\\/streamlit\\/proto)|(dist\\/)\" | \\\n\t\txargs wc\n\n.PHONY: distribute\n# Upload the package to PyPI.\ndistribute:\n\tcd lib/dist; \\\n\t\ttwine upload $$(ls -t *.whl | head -n 1); \\\n\t\ttwine upload $$(ls -t *.tar.gz | head -n 1)\n\n.PHONY: notices\n# Rebuild the NOTICES file.\nnotices:\n\tcd frontend; \\\n\t\tyarn licenses generate-disclaimer --silent --production --ignore-platform > ../NOTICES\n\n\t@# When `yarn licenses` is run in a yarn workspace, it misnames the project as\n\t@# \"WORKSPACE AGGREGATOR 2B7C80A7 6734 4A68 BB93 8CC72B9A5DEA\". We fix that here.\n\t@# There also isn't a portable way to invoke `sed` to edit files in-place, so we have\n\t@# sed create a NOTICES.bak backup file that we immediately delete afterwards.\n\tsed -i'.bak' 's/PORTIONS OF THE .*PRODUCT/PORTIONS OF THE STREAMLIT PRODUCT/' NOTICES\n\trm -f NOTICES.bak\n\n\t./scripts/append_license.sh frontend/app/src/assets/fonts/Source_Code_Pro/Source-Code-Pro.LICENSE\n\t./scripts/append_license.sh frontend/app/src/assets/fonts/Source_Sans_Pro/Source-Sans-Pro.LICENSE\n\t./scripts/append_license.sh frontend/app/src/assets/fonts/Source_Serif_Pro/Source-Serif-Pro.LICENSE\n\t./scripts/append_license.sh frontend/app/src/assets/img/Material-Icons.LICENSE\n\t./scripts/append_license.sh frontend/app/src/assets/img/Open-Iconic.LICENSE\n\t./scripts/append_license.sh frontend/lib/src/vendor/bokeh/bokeh-LICENSE.txt\n\t./scripts/append_license.sh frontend/lib/src/vendor/twemoji-LICENSE.txt\n\t./scripts/append_license.sh frontend/lib/src/vendor/react-bootstrap-LICENSE.txt\n\n.PHONY: headers\n# Update the license header on all source files.\nheaders:\n\tpre-commit run insert-license --all-files --hook-stage manual\n\tpre-commit run license-headers --all-files --hook-stage manual\n\n.PHONY: gen-min-dep-constraints\n# Write the minimum versions of our dependencies to a constraints file.\ngen-min-dep-constraints:\n\tmake develop >/dev/null\n\tpython scripts/get_min_versions.py >lib/min-constraints-gen.txt\n\n.PHONY: pre-commit-install\n# Pre-commit install.\npre-commit-install:\n\tpre-commit install\n\n.PHONY: ensure-relative-imports\n# Ensure relative imports exist within the lib/dist folder when doing yarn buildLibProd.\nensure-relative-imports:\n\t./scripts/ensure_relative_imports.sh\n\n.PHONY: performance-lighthouse\n# Run Lighthouse performance tests\nperformance-lighthouse:\n\tcd frontend/app; \\\n\tyarn run lighthouse:run\n\n.PHONY frontend-lib-prod:\n# Build the production version for @streamlit/lib.\nfrontend-lib-prod:\n\tcd frontend/ ; yarn run buildLibProd;\n\n.PHONY streamlit-lib-prod:\n# Build the production version for @streamlit/lib while also doing a make init so it's a single command.\nstreamlit-lib-prod:\n\tmake mini-init;\n\tmake frontend-lib-prod;\n\n"
        },
        {
          "name": "NOTICES",
          "type": "blob",
          "size": 1265.04,
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.05,
          "content": "<br>\n\n<img src=\"https://user-images.githubusercontent.com/7164864/217935870-c0bc60a3-6fc0-4047-b011-7b4c59488c91.png\" alt=\"Streamlit logo\" style=\"margin-top:50px\"></img>\n\n# Welcome to Streamlit 👋\n\n**A faster way to build and share data apps.**\n\n## What is Streamlit?\n\nStreamlit lets you transform Python scripts into interactive web apps in minutes, instead of weeks. Build dashboards, generate reports, or create chat apps. Once you’ve created an app, you can use our [Community Cloud platform](https://streamlit.io/cloud) to deploy, manage, and share your app.\n\n### Why choose Streamlit?\n\n- **Simple and Pythonic:** Write beautiful, easy-to-read code.\n- **Fast, interactive prototyping:** Let others interact with your data and provide feedback quickly.\n- **Live editing:** See your app update instantly as you edit your script.\n- **Open-source and free:** Join a vibrant community and contribute to Streamlit's future.\n\n## Installation\n\nOpen a terminal and run:\n\n```bash\n$ pip install streamlit\n$ streamlit hello\n```\n\nIf this opens our sweet _Streamlit Hello_ app in your browser, you're all set! If not, head over to [our docs](https://docs.streamlit.io/get-started) for specific installs.\n\nThe app features a bunch of examples of what you can do with Streamlit. Jump to the [quickstart](#quickstart) section to understand how that all works.\n\n<img src=\"https://user-images.githubusercontent.com/7164864/217936487-1017784e-68ec-4e0d-a7f6-6b97525ddf88.gif\" alt=\"Streamlit Hello\" width=500 href=\"none\"></img>\n\n## Quickstart\n\n### A little example\n\nCreate a new file `streamlit_app.py` with the following code:\n```python\nimport streamlit as st\nx = st.slider(\"Select a value\")\nst.write(x, \"squared is\", x * x)\n```\n\nNow run it to open the app!\n```\n$ streamlit run streamlit_app.py\n```\n\n<img src=\"https://user-images.githubusercontent.com/7164864/215172915-cf087c56-e7ae-449a-83a4-b5fa0328d954.gif\" width=300 alt=\"Little example\"></img>\n\n### Give me more!\n\nStreamlit comes in with [a ton of additional powerful elements](https://docs.streamlit.io/develop/api-reference) to spice up your data apps and delight your viewers. Some examples:\n\n<table border=\"0\">\n  <tr>\n    <td>\n      <a target=\"_blank\" href=\"https://docs.streamlit.io/develop/api-reference/widgets\">\n        <img src=\"https://user-images.githubusercontent.com/7164864/217936099-12c16f8c-7fe4-44b1-889a-1ac9ee6a1b44.png\" style=\"max-height:150px; width:auto; display:block;\">\n      </a>\n    </td>\n    <td>\n      <a target=\"_blank\" href=\"https://docs.streamlit.io/develop/api-reference/data/st.dataframe\">\n        <img src=\"https://user-images.githubusercontent.com/7164864/215110064-5eb4e294-8f30-4933-9563-0275230e52b5.gif\" style=\"max-height:150px; width:auto; display:block;\">\n      </a>\n    </td>\n    <td>\n      <a target=\"_blank\" href=\"https://docs.streamlit.io/develop/api-reference/charts\">\n        <img src=\"https://user-images.githubusercontent.com/7164864/215174472-bca8a0d7-cf4b-4268-9c3b-8c03dad50bcd.gif\" style=\"max-height:150px; width:auto; display:block;\">\n      </a>\n    </td>\n    <td>\n      <a target=\"_blank\" href=\"https://docs.streamlit.io/develop/api-reference/layout\">\n        <img src=\"https://user-images.githubusercontent.com/7164864/217936149-a35c35be-0d96-4c63-8c6a-1c4b52aa8f60.png\" style=\"max-height:150px; width:auto; display:block;\">\n      </a>\n    </td>\n    <td>\n      <a target=\"_blank\" href=\"https://docs.streamlit.io/develop/concepts/multipage-apps\">\n        <img src=\"https://user-images.githubusercontent.com/7164864/215173883-eae0de69-7c1d-4d78-97d0-3bc1ab865e5b.gif\" style=\"max-height:150px; width:auto; display:block;\">\n      </a>\n    </td>\n    <td>\n      <a target=\"_blank\" href=\"https://streamlit.io/gallery\">\n        <img src=\"https://user-images.githubusercontent.com/7164864/215109229-6ae9111f-e5c1-4f0b-b3a2-87a79268ccc9.gif\" style=\"max-height:150px; width:auto; display:block;\">\n      </a>\n    </td>\n  </tr>\n  <tr>\n    <td>Input widgets</td>\n    <td>Dataframes</td>\n    <td>Charts</td>\n    <td>Layout</td>\n    <td>Multi-page apps</td>\n    <td>Fun</td>\n  </tr>\n</table>\n\n\nOur vibrant creators community also extends Streamlit capabilities using  🧩 [Streamlit Components](https://streamlit.io/components).\n\n## Get inspired\n\nThere's so much you can build with Streamlit:\n- 🤖  [LLMs & chatbot apps](https://streamlit.io/gallery?category=llms)\n- 🧬  [Science & technology apps](https://streamlit.io/gallery?category=science-technology)\n- 💬  [NLP & language apps](https://streamlit.io/gallery?category=nlp-language)\n- 🏦  [Finance & business apps](https://streamlit.io/gallery?category=finance-business)\n- 🗺  [Geography & society apps](https://streamlit.io/gallery?category=geography-society)\n- and more!\n\n**Check out [our gallery!](https://streamlit.io/gallery)** 🎈\n\n## Community Cloud\n\nDeploy, manage and share your apps for free using our [Community Cloud](https://streamlit.io/cloud)! Sign-up [here](https://share.streamlit.io/signup). <br><br>\n<img src=\"https://user-images.githubusercontent.com/7164864/214965336-64500db3-0d79-4a20-8052-2dda883902d2.gif\" width=\"400\"></img>\n\n## Resources\n\n- Explore our [docs](https://docs.streamlit.io) to learn how Streamlit works.\n- Ask questions and get help in our [community forum](https://discuss.streamlit.io).\n- Read our [blog](https://blog.streamlit.io) for tips from developers and creators.\n- Extend Streamlit's capabilities by installing or creating your own [Streamlit Components](https://streamlit.io/components).\n- Help others find and play with your app by using the Streamlit GitHub badge in your repository:\n```markdown\n[![Streamlit App](https://static.streamlit.io/badges/streamlit_badge_black_white.svg)](URL_TO_YOUR_APP)\n```\n[![Streamlit App](https://static.streamlit.io/badges/streamlit_badge_black_white.svg)](https://share.streamlit.io/streamlit/roadmap)\n\n## Contribute\n\n🎉 Thanks for your interest in helping improve Streamlit! 🎉\n\nBefore contributing, please read our guidelines here: https://github.com/streamlit/streamlit/wiki/Contributing\n\n## License\n\nStreamlit is completely free and open-source and licensed under the [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0) license.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.29,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version   | Supported |\n| --------- | --------- |\n| >= 1.11.1 | ✅        |\n\n</br>\n\nPlease refer to the Snowflake [HackerOne program](https://hackerone.com/snowflake?type=team) for our security policies and for reporting any security vulnerabilities.\n"
        },
        {
          "name": "component-lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "e2e_playwright",
          "type": "tree",
          "content": null
        },
        {
          "name": "frontend",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "proto",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}