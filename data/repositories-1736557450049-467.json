{
  "metadata": {
    "timestamp": 1736557450049,
    "page": 467,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "curl/curl",
      "stars": 36488,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 1.32,
          "content": ";;;***************************************************************************\n;;;                                  _   _ ____  _\n;;;  Project                     ___| | | |  _ \\| |\n;;;                             / __| | | | |_) | |\n;;;                            | (__| |_| |  _ <| |___\n;;;                             \\___|\\___/|_| \\_\\_____|\n;;;\n;;; Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n;;;\n;;; This software is licensed as described in the file COPYING, which\n;;; you should have received as part of this distribution. The terms\n;;; are also available at https://curl.se/docs/copyright.html.\n;;;\n;;; You may opt to use, copy, modify, merge, publish, distribute and/or sell\n;;; copies of the Software, and permit persons to whom the Software is\n;;; furnished to do so, under the terms of the COPYING file.\n;;;\n;;; This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\n;;; KIND, either express or implied.\n;;;\n;;; SPDX-License-Identifier: curl\n;;;\n;;;***************************************************************************\n;;; Directory Local Variables\n;;; See Info node `(emacs) Directory Variables' for more information.\n\n((nil . ((indent-tabs-mode . nil)\n         (show-trailing-whitespace . t)))\n (c-mode . ((c-basic-offset . 2)\n            ))\n (c++-mode . ((c-basic-offset . 2)\n              ))\n )\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.16,
          "content": "# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n#\n# SPDX-License-Identifier: curl\n\n# Make repository REUSE compliant\nad9bc5976d6661cd5b03ebc379313bf657701c14\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.32,
          "content": "# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n#\n# SPDX-License-Identifier: curl\n\nbuildconf eol=lf\nconfigure.ac eol=lf\n*.m4 eol=lf\n*.in eol=lf\n*.am eol=lf\n*.sh eol=lf\n*.[ch] whitespace=tab-in-indent\n\n# Batch files must be run with CRLF line endings.\n# Refer to https://github.com/curl/curl/pull/6442\n*.bat text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.74,
          "content": "# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n#\n# SPDX-License-Identifier: curl\n\n*.asc\n*.dll\n*.exe\n*.exp\n*.la\n*.lib\n*.lo\n*.o\n*.obj\n*.pdb\n*.pyc\n*~\n.*.sw?\n.cproject\n.deps\n.dirstamp\n.libs\n.project\n.settings\n/.vs\n/bld/\n/build/\n/builds/\n/stats/\n__pycache__\nDebug\nINSTALL\nMakefile\nMakefile.in\nRelease\nTAGS\naclocal.m4\naclocal.m4.bak\nautom4te.cache\nbuildinfo.txt\nca-bundle.crt\ncertdata.txt\ncompile\nconfig.cache\nconfig.guess\nconfig.log\nconfig.status\nconfig.sub\nconfigure\ncurl-*.tar.bz2\ncurl-*.tar.gz\ncurl-*.tar.xz\ncurl-*.zip\ncurl-config\ndepcomp\ninstall-sh\nlibcurl.pc\nlibtool\nltmain.sh\nmissing\nmkinstalldirs\ntags\ntest-driver\nscripts/_curl\nscripts/curl.fish\ncurl_fuzzer\ncurl_fuzzer_seed_corpus.zip\nlibstandaloneengine.a\ntests/string\ntests/config\ntests/ech-log/\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 5.63,
          "content": "Guenter Knauf <lists@gknw.net> <gk@gknw.de>\nGisle Vanem <gvanem@yahoo.no> <gisle.vanem@gmail.com>\nGisle Vanem <gvanem@yahoo.no> <gvanem@broadpark.no>\nAlessandro Ghedini <alessandro@ghedini.me> <alessandro@cloudflare.com>\nAlessandro Ghedini <alessandro@ghedini.me> <al3xbio@gmail.com>\nBjörn Stenberg <bjorn@haxx.se>\nBjörn Stenberg <bjorn@haxx.se> <bjst@bjorn>\nViktor Szakats <commit@vsz.me> <commit@vszakats.net>\nViktor Szakats <commit@vsz.me> <vszakats@users.noreply.github.com>\nDaniel Gustafsson <daniel@yesql.se> <dgustafsson@pivotal.io>\nDaniel Gustafsson <daniel@yesql.se> <daniel@hobbit.se>\nLinus Nielsen <linus@haxx.se>\nYamada Yasuharu <yasuharu.yamada@access-company.com>\nUlion <ulion2002@gmail.com>\nTim Rühsen <tim.ruehsen@gmx.de>\nSteve Holme <steve_holme@hotmail.com> <steven.holme@cubic.com>\nClaes Jakobsson <claes@surfar.nu> <claes@versed.se>\nSergei Nikulov <sergey.nikulov@gmail.com> <snikulov@users.noreply.github.com>\nPatrick Monnerat <patrick@monnerat.net> <Patrick.Monnerat@datasphere.ch>\nPatrick Monnerat <patrick@monnerat.net> <patrick.monnerat@dh.com>\nPatrick Monnerat <patrick@monnerat.net> <pm@datasphere.ch>\nPatrick Monnerat <patrick@monnerat.net> <monnerat@users.noreply.github.com>\nNick Zitzmann <nickzman@gmail.com> <nick@chronosnet.com>\nPeter Wu <peter@lekensteyn.nl> <peter_at_lekensteyn.nl>\nDavid Woodhouse <David.Woodhouse@intel.com> <dwmw2@infradead.org>\nMarcel Raad <Marcel.Raad@teamviewer.com> <raad@teamviewer.com>\nMarcel Raad <Marcel.Raad@teamviewer.com> <MarcelRaad@users.noreply.github.com>\nMarcel Raad <Marcel.Raad@teamviewer.com> <marcelraad@users.sf.net>\nAnthony Bryan <anthonybryan@gmail.com> <ant@localhost.localdomain>\nTravis Burtrum <admin@moparisthebest.com>\nDmitry Kostjuchenko <dmitrykos@neutroncode.com>\nRichard Alcock <richard.alcock@gmail.com>\nRichard Alcock <richard.alcock@gmail.com> <richard.alcock@mathworks.co.uk>\nJan Ehrhardt <github@ehrhardt.nl>\nFlorin Petriuc <petriuc.florin@gmail.com> <pfl@northq.com>\nPavel Pavlov <pavlov.pavel@gmail.com>\nJason Juang <jasjuang@gmail.com>\nCarlo Teubner <carlo.teubner@gmail.com>\nJoel Depooter <joel.depooter@safe.com>\nSebastian Mundry <mundry@outlook.com>\nRainer Canavan <rainer.canavan@sevenval.com> <canavan@users.noreply.github.com>\nDan Fandrich <dan@coneharvesters.com>\nHenrik S. Gaßmann <henrik@gassmann.onl>\nJiří Malák <malak.jiri@gmail.com>\nNick Zitzmann <nickzman@gmail.com>\nKees Dekker <kees.dekker@infor.com>\nMax Savenkov <max.savenkov@gmail.com>\nDaniel Jelinski <daniel.jelinski@thomsonreuters.com> <30433125+djelinski@users.noreply.github.com>\nAmit Katyal <amkatyal@cisco.com>\nGiorgos Oikonomou <giorgos.n.oikonomou@gmail.com>\nEvgeny Grin (Karlson2k) <k2k@narod.ru> <k2k@yandex.ru>\nEvgeny Grin (Karlson2k) <k2k@narod.ru>\nPeter Pih <railsnewbie257@gmail.com>\nAnton Malov <malov.anton@gmail.com>\nMarquis de Muesli <marquis.de.muesli@gmail.com>\nKyohei Kadota <lufia@lufia.org>\nLucas Pardue <lucaspardue.24.7@gmail.com> <lucas@cloudflare.com>\nMassimiliano Fantuzzi <superfantuz@gmail.com>\nNiall O'Reilly <Niall.oReilly@ucd.ie>\nMohammad Hasbini <mohammad.hasbini@gmail.com>\nAndrew Ishchuk <andrew_ishchuk@office.targem.ru>\nNicolas Guillier <59726521+nicoguillier@users.noreply.github.com>\nJulian Z <julianz@example.com> <jzinn@users.noreply.github.com>\nJessa Chandler <jessachandler@gmail.com>\nGökhan Şengün <gsengun@linux-5d7d.site> <gokhansengun@gmai.com>\nSvyatoslav Mishyn <juef@openmailbox.org>\nDouglas Steinwand <dzs-curl@dzs.fx.org>\nJames Fuller <jim@webcomposite.com>\nDon J Olmstead <don.j.olmstead@gmail.com>\nNicolas Sterchele <sterchelen@gmail.com>\nSergey Raevskiy <ccik@inbox.ru>\nSecuritySense on github <si@securitysense.co.uk>\nMipsters on github <tomaviv57@gmail.com>\nPavel Novikov <paul.skeptic@yandex.ru>\napique13 on github <apique@PC42.isdom.isoft.fr>\nDaniel Hwang <danielleehwang@gmail.com>\nJon Rumsey <jrumsey@uk.ibm.com>\nTobias Nyholm <tobias.nyholm@gmail.com>\nTimur Artikov <t.artikov@2gis.ru>\nMichał Antoniak <47522782+MAntoniak@users.noreply.github.com>\nGleb Ivanovsky <gl.ivanovsky@gmail.com>\nMax Dymond <max.dymond@microsoft.com> <max.dymond@metaswitch.com>\nMax Dymond <max.dymond@microsoft.com> <cmeister2@gmail.com>\nAbhinav Singh <theawless@gmail.com>\nMalik Idrees Hasan Khan <77000356+MalikIdreesHasanKhan@users.noreply.github.com>\nYongkang Huang <hyk68691@hotmail.com>\nXiaoke Wang <xkernel.wang@foxmail.com>\nPhilip H <47042125+pheiduck@users.noreply.github.com>\nneutric on github <5984479+neutric@users.noreply.github.com>\nJan-Piet Mens <jp@mens.de>\nHenrik Holst <henrik.holst@millistream.com>\nChristian Schmitz <support@monkeybreadsoftware.de>\nMax Mehl <max.mehl@fsfe.org>\nrzrymiak on github <106121613+rzrymiak@users.noreply.github.com>\nOliver Roberts <oliver@futaura.co.uk>\nopensignature on github <antonio@piumarossa.it>\nCering on github <gfypm@qq.com>\na1346054 on github <36859588+a1346054@users.noreply.github.com>\nzhanghu on xiaomi <zhanghu6@xiaomi.com>\nPhilip Heiduck <pheiduck@Philips-MBP.lan> <47042125+pheiduck@users.noreply.github.com>\nbsergean on github <bsergean@gmail.com>\nStefan Eissing <stefan@eissing.org> <stefan.eissing@greenbytes.de>\nMichael Musset <mickamusset@gmail.com>\nAndy Alt <arch_stanton5995@protonmail.com>\nThomas1664 on github <46387399+Thomas1664@users.noreply.github.com>\ndengjfzh on github <dengjfzh@gmail.com>\nBrad Harder <brad.harder@gmail.com>\nDerzsi Dániel <daniel@tohka.us>\nMichael Osipov <michael.osipov@siemens.com> <1983-01-06@gmx.net>\nMichael Osipov <michael.osipov@siemens.com> <michael-o@users.sf.net>\nChristian Weisgerber <naddy@mips.inka.de> <curl-library@lists.haxx.se>\nMoritz Buhl <git@moritzbuhl.de>\nAki Sakurai <75532970+AkiSakurai@users.noreply.github.com>\nSinkevich Artem <artsin666@gmail.com>\nAndrew Kirillov <akirillo@uk.ibm.com>\nStephen Farrell <stephen.farrell@cs.tcd.ie>\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 0.43,
          "content": "<!--\nCopyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n\nSPDX-License-Identifier: curl\n-->\n\nIn a release tarball, check the RELEASES-NOTES file for what was done in the\nmost recent release. In a git check-out, that file mentions changes that have\nbeen done since the previous release.\n\nSee the online [changelog](https://curl.se/changes.html) for the edited and\nhuman readable version of what has changed in different curl releases.\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 86.08,
          "content": "#***************************************************************************\n#                                  _   _ ____  _\n#  Project                     ___| | | |  _ \\| |\n#                             / __| | | | |_) | |\n#                            | (__| |_| |  _ <| |___\n#                             \\___|\\___/|_| \\_\\_____|\n#\n# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n#\n# This software is licensed as described in the file COPYING, which\n# you should have received as part of this distribution. The terms\n# are also available at https://curl.se/docs/copyright.html.\n#\n# You may opt to use, copy, modify, merge, publish, distribute and/or sell\n# copies of the Software, and permit persons to whom the Software is\n# furnished to do so, under the terms of the COPYING file.\n#\n# This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\n# KIND, either express or implied.\n#\n# SPDX-License-Identifier: curl\n#\n###########################################################################\n# by Tetetest and Sukender (Benoit Neil)\n\n# Note: By default this CMake build script detects the version of some\n# dependencies using `check_symbol_exists`. Those checks do not work in\n# the case that both CURL and its dependency are included as sub-projects\n# in a larger build using `FetchContent`. To support that case, additional\n# variables may be defined by the parent project, ideally in the \"extra\"\n# find package redirect file:\n# https://cmake.org/cmake/help/latest/module/FetchContent.html#integrating-with-find-package\n#\n# The following variables are available:\n#   HAVE_SSL_SET0_WBIO: `SSL_set0_wbio` present in OpenSSL/wolfSSL\n#   HAVE_OPENSSL_SRP: `SSL_CTX_set_srp_username` present in OpenSSL/wolfSSL\n#   HAVE_GNUTLS_SRP: `gnutls_srp_verifier` present in GnuTLS\n#   HAVE_SSL_SET_QUIC_USE_LEGACY_CODEPOINT: `SSL_set_quic_use_legacy_codepoint` present in OpenSSL/wolfSSL\n#   HAVE_QUICHE_CONN_SET_QLOG_FD: `quiche_conn_set_qlog_fd` present in quiche\n#   HAVE_ECH: ECH API checks for OpenSSL, BoringSSL or wolfSSL\n#\n# For each of the above variables, if the variable is DEFINED (either\n# to ON or OFF), the symbol detection is skipped.  If the variable is\n# NOT DEFINED, the symbol detection is performed.\n\ncmake_minimum_required(VERSION 3.7...3.16 FATAL_ERROR)\nmessage(STATUS \"Using CMake version ${CMAKE_VERSION}\")\n\n# Collect command-line arguments for buildinfo.txt.\n# Must reside at the top of the script to work as expected.\nset(_cmake_args \"\")\nif(NOT \"$ENV{CURL_BUILDINFO}$ENV{CURL_CI}$ENV{CI}\" STREQUAL \"\")\n  get_cmake_property(_cache_vars CACHE_VARIABLES)\n  foreach(_cache_var IN ITEMS ${_cache_vars})\n    get_property(_cache_var_helpstring CACHE ${_cache_var} PROPERTY HELPSTRING)\n    if(_cache_var_helpstring STREQUAL \"No help, variable specified on the command line.\")\n      get_property(_cache_var_type CACHE ${_cache_var} PROPERTY TYPE)\n      get_property(_cache_var_value CACHE ${_cache_var} PROPERTY VALUE)\n      if(_cache_var_type STREQUAL \"UNINITIALIZED\")\n        set(_cache_var_type)\n      else()\n        set(_cache_var_type \":${_cache_var_type}\")\n      endif()\n      set(_cmake_args \"${_cmake_args} -D${_cache_var}${_cache_var_type}=\\\"${_cache_var_value}\\\"\")\n    endif()\n  endforeach()\nendif()\n\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/CMake;${CMAKE_MODULE_PATH}\")\ninclude(Utilities)\ninclude(Macros)\ninclude(CMakeDependentOption)\ninclude(CheckCCompilerFlag)\n\nfile(STRINGS \"${CMAKE_CURRENT_SOURCE_DIR}/include/curl/curlver.h\" _curl_version_h_contents REGEX \"#define LIBCURL_VERSION( |_NUM )\")\nstring(REGEX MATCH \"#define LIBCURL_VERSION \\\"[^\\\"]*\" _curl_version ${_curl_version_h_contents})\nstring(REGEX REPLACE \"[^\\\"]+\\\"\" \"\" _curl_version ${_curl_version})\nstring(REGEX MATCH \"#define LIBCURL_VERSION_NUM 0x[0-9a-fA-F]+\" _curl_version_num ${_curl_version_h_contents})\nstring(REGEX REPLACE \"[^0]+0x\" \"\" _curl_version_num ${_curl_version_num})\nunset(_curl_version_h_contents)\n\nmessage(STATUS \"curl version=[${_curl_version}]\")\n\nstring(REGEX REPLACE \"([0-9]+\\.[0-9]+\\.[0-9]+).+\" \"\\\\1\" _curl_version_sem \"${_curl_version}\")\nproject(CURL\n  VERSION \"${_curl_version_sem}\"\n  LANGUAGES C)\n\nset(_target_flags \"\")\nif(APPLE)\n  set(_target_flags \"${_target_flags} APPLE\")\nendif()\nif(UNIX)\n  set(_target_flags \"${_target_flags} UNIX\")\nendif()\nif(BSD)\n  set(_target_flags \"${_target_flags} BSD\")\nendif()\nif(WIN32)\n  set(_target_flags \"${_target_flags} WIN32\")\nendif()\nif(WINDOWS_STORE)\n  set(_target_flags \"${_target_flags} UWP\")\nendif()\nif(CYGWIN)\n  set(_target_flags \"${_target_flags} CYGWIN\")\nendif()\nif(MSYS)\n  set(_target_flags \"${_target_flags} MSYS\")\nendif()\nif(DOS)\n  set(_target_flags \"${_target_flags} DOS\")\nendif()\nif(AMIGA)\n  set(_target_flags \"${_target_flags} AMIGA\")\nendif()\nif(CMAKE_COMPILER_IS_GNUCC)\n  set(_target_flags \"${_target_flags} GCC\")\nendif()\nif(MINGW)\n  set(_target_flags \"${_target_flags} MINGW\")\nendif()\nif(MSVC)\n  set(_target_flags \"${_target_flags} MSVC-${MSVC_VERSION}\")\nendif()\nif(VCPKG_TOOLCHAIN)\n  set(_target_flags \"${_target_flags} VCPKG\")\nendif()\nif(CMAKE_CROSSCOMPILING)\n  set(_target_flags \"${_target_flags} CROSS\")\nendif()\nmessage(STATUS \"CMake platform flags:${_target_flags}\")\n\nif(CMAKE_CROSSCOMPILING)\n  message(STATUS \"Cross-compiling: \"\n    \"${CMAKE_HOST_SYSTEM_NAME}/${CMAKE_HOST_SYSTEM_PROCESSOR} -> \"\n    \"${CMAKE_SYSTEM_NAME}/${CMAKE_SYSTEM_PROCESSOR}\")\nendif()\n\nif(CMAKE_C_COMPILER_TARGET)\n  set(CURL_OS \"\\\"${CMAKE_C_COMPILER_TARGET}\\\"\")\nelse()\n  set(CURL_OS \"\\\"${CMAKE_SYSTEM_NAME}\\\"\")\nendif()\n\ninclude_directories(\"${PROJECT_SOURCE_DIR}/include\")\n\nif(NOT DEFINED CMAKE_UNITY_BUILD_BATCH_SIZE)\n  set(CMAKE_UNITY_BUILD_BATCH_SIZE 0)\nendif()\n\n# Having CMAKE_TRY_COMPILE_TARGET_TYPE set to STATIC_LIBRARY breaks certain\n# 'check_function_exists()' detections (possibly more), by detecting\n# non-existing features. This happens by default when using 'ios.toolchain.cmake'.\n# Work it around by setting this value to `EXECUTABLE`.\nif(CMAKE_TRY_COMPILE_TARGET_TYPE STREQUAL \"STATIC_LIBRARY\")\n  message(STATUS \"CMAKE_TRY_COMPILE_TARGET_TYPE was found set to STATIC_LIBRARY. \"\n    \"Overriding with EXECUTABLE for feature detections to work.\")\n  set(_cmake_try_compile_target_type_save ${CMAKE_TRY_COMPILE_TARGET_TYPE})\n  set(CMAKE_TRY_COMPILE_TARGET_TYPE \"EXECUTABLE\")\nendif()\n\noption(CURL_WERROR \"Turn compiler warnings into errors\" OFF)\noption(PICKY_COMPILER \"Enable picky compiler options\" ON)\noption(BUILD_CURL_EXE \"Build curl executable\" ON)\noption(BUILD_SHARED_LIBS \"Build shared libraries\" ON)\noption(BUILD_STATIC_LIBS \"Build static libraries\" OFF)\noption(BUILD_STATIC_CURL \"Build curl executable with static libcurl\" OFF)\noption(ENABLE_ARES \"Enable c-ares support\" OFF)\noption(CURL_DISABLE_INSTALL \"Disable installation targets\" OFF)\n\nif(WIN32)\n  option(CURL_STATIC_CRT \"Build libcurl with static CRT with MSVC (/MT)\" OFF)\n  if(CURL_STATIC_CRT AND MSVC)\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n    set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /MT\")\n    set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /MTd\")\n  endif()\n\n  option(ENABLE_UNICODE \"Use the Unicode version of the Windows API functions\" OFF)\n  if(WINDOWS_STORE)\n    set(ENABLE_UNICODE ON)\n  endif()\n  if(ENABLE_UNICODE)\n    add_definitions(\"-DUNICODE\" \"-D_UNICODE\")\n    if(MINGW)\n      add_compile_options(\"-municode\")\n    endif()\n  endif()\n\n  list(APPEND CMAKE_REQUIRED_DEFINITIONS \"-DWIN32_LEAN_AND_MEAN\")  # Apply to all feature checks\n\n  set(CURL_TARGET_WINDOWS_VERSION \"\" CACHE STRING \"Minimum target Windows version as hex string\")\n  if(CURL_TARGET_WINDOWS_VERSION)\n    add_definitions(\"-D_WIN32_WINNT=${CURL_TARGET_WINDOWS_VERSION}\")\n    list(APPEND CMAKE_REQUIRED_DEFINITIONS \"-D_WIN32_WINNT=${CURL_TARGET_WINDOWS_VERSION}\")  # Apply to all feature checks\n  endif()\n\n  # Detect actual value of _WIN32_WINNT and store as HAVE_WIN32_WINNT\n  curl_internal_test(HAVE_WIN32_WINNT)\n  if(HAVE_WIN32_WINNT)\n    string(REGEX MATCH \"_WIN32_WINNT=0x[0-9a-fA-F]+\" CURL_TEST_OUTPUT \"${CURL_TEST_OUTPUT}\")\n    string(REGEX REPLACE \"_WIN32_WINNT=\" \"\" CURL_TEST_OUTPUT \"${CURL_TEST_OUTPUT}\")\n    string(REGEX REPLACE \"0x([0-9a-f][0-9a-f][0-9a-f])$\" \"0x0\\\\1\" CURL_TEST_OUTPUT \"${CURL_TEST_OUTPUT}\")  # pad to 4 digits\n    string(TOLOWER \"${CURL_TEST_OUTPUT}\" HAVE_WIN32_WINNT)\n    message(STATUS \"Found _WIN32_WINNT=${HAVE_WIN32_WINNT}\")\n  endif()\n  # Avoid storing HAVE_WIN32_WINNT in CMake cache\n  unset(HAVE_WIN32_WINNT CACHE)\nelseif(DOS OR AMIGA)\n  set(BUILD_SHARED_LIBS OFF)\n  set(BUILD_STATIC_LIBS ON)\n  if(DOS AND CMAKE_COMPILER_IS_GNUCC)\n    set(CMAKE_STATIC_LIBRARY_PREFIX \"lib\")\n    set(CMAKE_STATIC_LIBRARY_SUFFIX \".a\")\n    set(CMAKE_FIND_LIBRARY_PREFIXES \"lib\")\n    set(CMAKE_FIND_LIBRARY_SUFFIXES \".a\")\n  endif()\nendif()\noption(CURL_LTO \"Enable compiler Link Time Optimizations\" OFF)\n\ncmake_dependent_option(ENABLE_THREADED_RESOLVER \"Enable threaded DNS lookup\"\n  ON \"NOT ENABLE_ARES;NOT DOS;NOT AMIGA\"\n  OFF)\n\ninclude(PickyWarnings)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -D_GNU_SOURCE\")  # Required for sendmmsg()\nendif()\n\noption(ENABLE_DEBUG \"Enable curl debug features (for developing curl itself)\" OFF)\nif(ENABLE_DEBUG)\n  message(WARNING \"This curl build is Debug-enabled, do not use in production.\")\nendif()\noption(ENABLE_CURLDEBUG \"Enable TrackMemory debug feature\" ${ENABLE_DEBUG})\n\nif(MSVC)\n  set(ENABLE_CURLDEBUG OFF)  # FIXME: TrackMemory + MSVC fails test 558 and 1330. Tested with static build, Debug mode.\nendif()\n\nif(ENABLE_DEBUG)\n  set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS \"DEBUGBUILD\")\nendif()\n\nif(ENABLE_CURLDEBUG)\n  set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS \"CURLDEBUG\")\nendif()\n\noption(CURL_CLANG_TIDY \"Run the build through clang-tidy\" OFF)\nif(CURL_CLANG_TIDY)\n  set(CMAKE_UNITY_BUILD OFF)\n  set(_tidy_checks \"\")\n  list(APPEND _tidy_checks \"-clang-analyzer-security.insecureAPI.strcpy\")\n  list(APPEND _tidy_checks \"-clang-analyzer-optin.performance.Padding\")\n  list(APPEND _tidy_checks \"-clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling\")\n  string(REPLACE \";\" \",\" _tidy_checks \"${_tidy_checks}\")\n  find_program(CLANG_TIDY NAMES \"clang-tidy\" REQUIRED)\n  set(CMAKE_C_CLANG_TIDY \"${CLANG_TIDY}\" \"-checks=${_tidy_checks}\" \"-quiet\")\n  unset(_tidy_checks)\n  if(CURL_WERROR)\n    list(APPEND CMAKE_C_CLANG_TIDY \"--warnings-as-errors=*\")\n  endif()\n  if(CURL_CLANG_TIDYFLAGS)\n    list(APPEND CMAKE_C_CLANG_TIDY ${CURL_CLANG_TIDYFLAGS})\n  endif()\nendif()\n\n# For debug libs and exes, add \"-d\" postfix\nif(NOT DEFINED CMAKE_DEBUG_POSTFIX)\n  set(CMAKE_DEBUG_POSTFIX \"-d\")\nendif()\n\nset(LIB_STATIC \"libcurl_static\")\nset(LIB_SHARED \"libcurl_shared\")\n\nif(NOT BUILD_SHARED_LIBS AND NOT BUILD_STATIC_LIBS)\n  set(BUILD_STATIC_LIBS ON)\nendif()\nif(NOT BUILD_STATIC_CURL AND NOT BUILD_SHARED_LIBS)\n  set(BUILD_STATIC_CURL ON)\nelseif(BUILD_STATIC_CURL AND NOT BUILD_STATIC_LIBS)\n  set(BUILD_STATIC_CURL OFF)\nendif()\n\n# Lib flavour selected for curl tool\nif(BUILD_STATIC_CURL)\n  set(LIB_SELECTED_FOR_EXE ${LIB_STATIC})\nelse()\n  set(LIB_SELECTED_FOR_EXE ${LIB_SHARED})\nendif()\n\n# Lib flavour selected for example and test programs.\nif(BUILD_SHARED_LIBS)\n  set(LIB_SELECTED ${LIB_SHARED})\nelse()\n  set(LIB_SELECTED ${LIB_STATIC})\nendif()\n\n# Override to force-disable or force-enable the use of pkg-config.\nif(UNIX OR VCPKG_TOOLCHAIN OR (MINGW AND NOT CMAKE_CROSSCOMPILING))  # Keep in sync with CMake/curl-config.cmake.in\n  set(_curl_use_pkgconfig_default ON)\nelse()\n  set(_curl_use_pkgconfig_default OFF)\nendif()\noption(CURL_USE_PKGCONFIG \"Enable pkg-config to detect dependencies\" ${_curl_use_pkgconfig_default})\n\n# Initialize variables collecting dependency libs, paths, pkg-config names.\nset(CURL_LIBS \"\")\nset(CURL_LIBDIRS \"\")\nset(LIBCURL_PC_REQUIRES_PRIVATE \"\")\n\nif(ENABLE_ARES)\n  set(USE_ARES 1)\n  find_package(Cares REQUIRED)\n  list(APPEND CURL_LIBS ${CARES_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${CARES_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${CARES_PC_REQUIRES})\n  link_directories(${CARES_LIBRARY_DIRS})\n  if(CARES_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${CARES_CFLAGS}\")\n  endif()\n  add_definitions(\"-DCARES_NO_DEPRECATED\")  # Ignore c-ares deprecation warnings\nendif()\n\ninclude(CurlSymbolHiding)\n\noption(CURL_ENABLE_EXPORT_TARGET \"Enable CMake export target\" ON)\nmark_as_advanced(CURL_ENABLE_EXPORT_TARGET)\n\noption(CURL_DISABLE_ALTSVC \"Disable alt-svc support\" OFF)\nmark_as_advanced(CURL_DISABLE_ALTSVC)\noption(CURL_DISABLE_SRP \"Disable TLS-SRP support\" OFF)\nmark_as_advanced(CURL_DISABLE_SRP)\noption(CURL_DISABLE_COOKIES \"Disable cookies support\" OFF)\nmark_as_advanced(CURL_DISABLE_COOKIES)\noption(CURL_DISABLE_BASIC_AUTH \"Disable Basic authentication\" OFF)\nmark_as_advanced(CURL_DISABLE_BASIC_AUTH)\noption(CURL_DISABLE_BEARER_AUTH \"Disable Bearer authentication\" OFF)\nmark_as_advanced(CURL_DISABLE_BEARER_AUTH)\noption(CURL_DISABLE_DIGEST_AUTH \"Disable Digest authentication\" OFF)\nmark_as_advanced(CURL_DISABLE_DIGEST_AUTH)\noption(CURL_DISABLE_KERBEROS_AUTH \"Disable Kerberos authentication\" OFF)\nmark_as_advanced(CURL_DISABLE_KERBEROS_AUTH)\noption(CURL_DISABLE_NEGOTIATE_AUTH \"Disable negotiate authentication\" OFF)\nmark_as_advanced(CURL_DISABLE_NEGOTIATE_AUTH)\noption(CURL_DISABLE_AWS \"Disable aws-sigv4\" OFF)\nmark_as_advanced(CURL_DISABLE_AWS)\noption(CURL_DISABLE_DICT \"Disable DICT\" OFF)\nmark_as_advanced(CURL_DISABLE_DICT)\noption(CURL_DISABLE_DOH \"Disable DNS-over-HTTPS\" OFF)\nmark_as_advanced(CURL_DISABLE_DOH)\noption(CURL_DISABLE_FILE \"Disable FILE\" OFF)\nmark_as_advanced(CURL_DISABLE_FILE)\noption(CURL_DISABLE_FTP \"Disable FTP\" OFF)\nmark_as_advanced(CURL_DISABLE_FTP)\noption(CURL_DISABLE_GETOPTIONS \"Disable curl_easy_options API for existing options to curl_easy_setopt\" OFF)\nmark_as_advanced(CURL_DISABLE_GETOPTIONS)\noption(CURL_DISABLE_GOPHER \"Disable Gopher\" OFF)\nmark_as_advanced(CURL_DISABLE_GOPHER)\noption(CURL_DISABLE_HEADERS_API \"Disable headers-api support\" OFF)\nmark_as_advanced(CURL_DISABLE_HEADERS_API)\noption(CURL_DISABLE_HSTS \"Disable HSTS support\" OFF)\nmark_as_advanced(CURL_DISABLE_HSTS)\noption(CURL_DISABLE_HTTP \"Disable HTTP\" OFF)\nmark_as_advanced(CURL_DISABLE_HTTP)\noption(CURL_DISABLE_HTTP_AUTH \"Disable all HTTP authentication methods\" OFF)\nmark_as_advanced(CURL_DISABLE_HTTP_AUTH)\noption(CURL_DISABLE_IMAP \"Disable IMAP\" OFF)\nmark_as_advanced(CURL_DISABLE_IMAP)\noption(CURL_DISABLE_LDAP \"Disable LDAP\" OFF)\nmark_as_advanced(CURL_DISABLE_LDAP)\noption(CURL_DISABLE_LDAPS \"Disable LDAPS\" ${CURL_DISABLE_LDAP})\nmark_as_advanced(CURL_DISABLE_LDAPS)\noption(CURL_DISABLE_LIBCURL_OPTION \"Disable --libcurl option from the curl tool\" OFF)\nmark_as_advanced(CURL_DISABLE_LIBCURL_OPTION)\noption(CURL_DISABLE_MIME \"Disable MIME support\" OFF)\nmark_as_advanced(CURL_DISABLE_MIME)\ncmake_dependent_option(CURL_DISABLE_FORM_API \"Disable form-api\"\n  OFF \"NOT CURL_DISABLE_MIME\"\n  ON)\nmark_as_advanced(CURL_DISABLE_FORM_API)\noption(CURL_DISABLE_MQTT \"Disable MQTT\" OFF)\nmark_as_advanced(CURL_DISABLE_MQTT)\noption(CURL_DISABLE_BINDLOCAL \"Disable local binding support\" OFF)\nmark_as_advanced(CURL_DISABLE_BINDLOCAL)\noption(CURL_DISABLE_NETRC \"Disable netrc parser\" OFF)\nmark_as_advanced(CURL_DISABLE_NETRC)\noption(CURL_DISABLE_NTLM \"Disable NTLM support\" OFF)\nmark_as_advanced(CURL_DISABLE_NTLM)\noption(CURL_DISABLE_PARSEDATE \"Disable date parsing\" OFF)\nmark_as_advanced(CURL_DISABLE_PARSEDATE)\noption(CURL_DISABLE_POP3 \"Disable POP3\" OFF)\nmark_as_advanced(CURL_DISABLE_POP3)\noption(CURL_DISABLE_PROGRESS_METER \"Disable built-in progress meter\" OFF)\nmark_as_advanced(CURL_DISABLE_PROGRESS_METER)\noption(CURL_DISABLE_PROXY \"Disable proxy support\" OFF)\nmark_as_advanced(CURL_DISABLE_PROXY)\noption(CURL_DISABLE_IPFS \"Disable IPFS\" OFF)\nmark_as_advanced(CURL_DISABLE_IPFS)\noption(CURL_DISABLE_RTSP \"Disable RTSP\" OFF)\nmark_as_advanced(CURL_DISABLE_SHA512_256)\noption(CURL_DISABLE_SHA512_256 \"Disable SHA-512/256 hash algorithm\" OFF)\nmark_as_advanced(CURL_DISABLE_RTSP)\noption(CURL_DISABLE_SHUFFLE_DNS \"Disable shuffle DNS feature\" OFF)\nmark_as_advanced(CURL_DISABLE_SHUFFLE_DNS)\noption(CURL_DISABLE_SMB \"Disable SMB\" OFF)\nmark_as_advanced(CURL_DISABLE_SMB)\noption(CURL_DISABLE_SMTP \"Disable SMTP\" OFF)\nmark_as_advanced(CURL_DISABLE_SMTP)\noption(CURL_DISABLE_SOCKETPAIR \"Disable use of socketpair for curl_multi_poll\" OFF)\nmark_as_advanced(CURL_DISABLE_SOCKETPAIR)\noption(CURL_DISABLE_WEBSOCKETS \"Disable WebSocket\" OFF)\nmark_as_advanced(CURL_DISABLE_WEBSOCKETS)\noption(CURL_DISABLE_TELNET \"Disable Telnet\" OFF)\nmark_as_advanced(CURL_DISABLE_TELNET)\noption(CURL_DISABLE_TFTP \"Disable TFTP\" OFF)\nmark_as_advanced(CURL_DISABLE_TFTP)\noption(CURL_DISABLE_VERBOSE_STRINGS \"Disable verbose strings\" OFF)\nmark_as_advanced(CURL_DISABLE_VERBOSE_STRINGS)\n\nif(CURL_DISABLE_HTTP)\n  set(CURL_DISABLE_IPFS ON)\n  set(CURL_DISABLE_RTSP ON)\n  set(CURL_DISABLE_ALTSVC ON)\n  set(CURL_DISABLE_HSTS ON)\nendif()\n\n# Corresponds to HTTP_ONLY in lib/curl_setup.h\noption(HTTP_ONLY \"Disable all protocols except HTTP (This overrides all CURL_DISABLE_* options)\" OFF)\nmark_as_advanced(HTTP_ONLY)\n\nif(HTTP_ONLY)\n  set(CURL_DISABLE_DICT ON)\n  set(CURL_DISABLE_FILE ON)\n  set(CURL_DISABLE_FTP ON)\n  set(CURL_DISABLE_GOPHER ON)\n  set(CURL_DISABLE_IMAP ON)\n  set(CURL_DISABLE_LDAP ON)\n  set(CURL_DISABLE_LDAPS ON)\n  set(CURL_DISABLE_MQTT ON)\n  set(CURL_DISABLE_POP3 ON)\n  set(CURL_DISABLE_IPFS ON)\n  set(CURL_DISABLE_RTSP ON)\n  set(CURL_DISABLE_SMB ON)\n  set(CURL_DISABLE_SMTP ON)\n  set(CURL_DISABLE_TELNET ON)\n  set(CURL_DISABLE_TFTP ON)\nendif()\n\nif(WINDOWS_STORE)\n  set(CURL_DISABLE_TELNET ON)  # telnet code needs fixing to compile for UWP.\nendif()\n\noption(ENABLE_IPV6 \"Enable IPv6 support\" ON)\nmark_as_advanced(ENABLE_IPV6)\nif(ENABLE_IPV6 AND NOT WIN32)\n  include(CheckStructHasMember)\n  check_struct_has_member(\"struct sockaddr_in6\" \"sin6_addr\" \"netinet/in.h\" HAVE_SOCKADDR_IN6_SIN6_ADDR)\n  check_struct_has_member(\"struct sockaddr_in6\" \"sin6_scope_id\" \"netinet/in.h\" HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID)\n  if(NOT HAVE_SOCKADDR_IN6_SIN6_ADDR)\n    if(NOT DOS AND NOT AMIGA)\n      message(WARNING \"struct sockaddr_in6 not available, disabling IPv6 support\")\n    endif()\n    # Force the feature off as this name is used as guard macro...\n    set(ENABLE_IPV6 OFF CACHE BOOL \"Enable IPv6 support\" FORCE)\n  endif()\n\n  if(APPLE AND NOT ENABLE_ARES)\n    set(_use_core_foundation_and_core_services ON)\n\n    find_library(SYSTEMCONFIGURATION_FRAMEWORK NAMES \"SystemConfiguration\")\n    mark_as_advanced(SYSTEMCONFIGURATION_FRAMEWORK)\n    if(NOT SYSTEMCONFIGURATION_FRAMEWORK)\n      message(FATAL_ERROR \"SystemConfiguration framework not found\")\n    endif()\n    list(APPEND CURL_LIBS \"-framework SystemConfiguration\")\n  endif()\nendif()\nif(ENABLE_IPV6)\n  set(USE_IPV6 ON)\nendif()\n\nfind_package(Perl)\n\noption(BUILD_LIBCURL_DOCS \"Build libcurl man pages\" ON)\noption(BUILD_MISC_DOCS \"Build misc man pages (e.g. curl-config and mk-ca-bundle)\" ON)\noption(ENABLE_CURL_MANUAL \"Build the man page for curl and enable its -M/--manual option\" ON)\n\nif(ENABLE_CURL_MANUAL OR BUILD_LIBCURL_DOCS)\n  if(PERL_FOUND)\n    set(HAVE_MANUAL_TOOLS ON)\n  endif()\n  if(NOT HAVE_MANUAL_TOOLS)\n    message(WARNING \"Perl not found. Will not build manuals.\")\n  endif()\nendif()\n\n# Disable warnings on Borland to avoid changing 3rd party code.\nif(BORLAND)\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -w-\")\nendif()\n\n# If we are on AIX, do the _ALL_SOURCE magic\nif(CMAKE_SYSTEM_NAME STREQUAL \"AIX\")\n  add_definitions(\"-D_ALL_SOURCE\")\nendif()\n\n# If we are on Haiku, make sure that the network library is brought in.\nif(CMAKE_SYSTEM_NAME STREQUAL \"Haiku\")\n  list(APPEND CURL_LIBS \"network\")\nelseif(AMIGA)\n  list(APPEND CURL_LIBS \"net\" \"m\" \"atomic\")\n  list(APPEND CMAKE_REQUIRED_LIBRARIES \"net\" \"m\" \"atomic\")\nendif()\n\n# Include all the necessary files for macros\ninclude(CMakePushCheckState)\ninclude(CheckFunctionExists)\ninclude(CheckIncludeFile)\ninclude(CheckIncludeFiles)\ninclude(CheckLibraryExists)\ninclude(CheckSymbolExists)\ninclude(CheckTypeSize)\ninclude(CheckCSourceCompiles)\n\nif(WIN32)\n  # Preload settings on Windows\n  include(\"${CMAKE_CURRENT_SOURCE_DIR}/CMake/win32-cache.cmake\")\nelseif(APPLE)\n  # Fast-track predictable feature detections\n  set(HAVE_EVENTFD 0)\n  set(HAVE_GETPASS_R 0)\n  set(HAVE_SENDMMSG 0)\nelseif(AMIGA)\n  set(HAVE_GETADDRINFO 0)  # Breaks the build when detected and used.\nendif()\nif(DOS OR AMIGA)\n  set(HAVE_TIME_T_UNSIGNED 1)\nendif()\n\nif(ENABLE_THREADED_RESOLVER)\n  if(WIN32)\n    set(USE_THREADS_WIN32 ON)\n  else()\n    find_package(Threads REQUIRED)\n    set(USE_THREADS_POSIX ${CMAKE_USE_PTHREADS_INIT})\n    set(HAVE_PTHREAD_H ${CMAKE_USE_PTHREADS_INIT})\n    list(APPEND CURL_LIBS ${CMAKE_THREAD_LIBS_INIT})\n  endif()\nendif()\n\n# Check for all needed libraries\nif(DOS)\n  if(WATT_ROOT)\n    set(USE_WATT32 ON)\n    # FIXME upstream: must specify the full path to avoid CMake converting \"watt\" to \"watt.lib\"\n    list(APPEND CURL_LIBS \"${WATT_ROOT}/lib/libwatt.a\")\n    include_directories(SYSTEM \"${WATT_ROOT}/inc\")\n    list(APPEND CMAKE_REQUIRED_INCLUDES \"${WATT_ROOT}/inc\")\n  else()\n    message(FATAL_ERROR \"Set WATT_ROOT variable to the root installation of Watt-32.\")\n  endif()\nelseif(AMIGA)\n  if(AMISSL_INCLUDE_DIR AND AMISSL_STUBS_LIBRARY AND AMISSL_AUTO_LIBRARY)\n    set(USE_AMISSL ON)\n    list(APPEND CMAKE_REQUIRED_INCLUDES \"${AMISSL_INCLUDE_DIR}\")\n    list(APPEND CMAKE_REQUIRED_LIBRARIES \"${AMISSL_STUBS_LIBRARY}\" \"${AMISSL_AUTO_LIBRARY}\")\n    set(OPENSSL_INCLUDE_DIR \"${AMISSL_INCLUDE_DIR}\")\n    set(OPENSSL_SSL_LIBRARY \"${AMISSL_STUBS_LIBRARY}\")\n    set(OPENSSL_CRYPTO_LIBRARY \"${AMISSL_AUTO_LIBRARY}\")\n    set(CURL_USE_OPENSSL ON)\n    set(CURL_CA_FALLBACK ON CACHE BOOL \"\")\n  endif()\nelseif(NOT WIN32 AND NOT APPLE)\n  check_library_exists(\"socket\" \"connect\" \"\" HAVE_LIBSOCKET)\n  if(HAVE_LIBSOCKET)\n    set(CURL_LIBS \"socket;${CURL_LIBS}\")\n  endif()\nendif()\n\nif(WIN32)\n  list(APPEND CURL_LIBS \"ws2_32\" \"bcrypt\")\nendif()\n\n# Check SSL libraries\noption(CURL_ENABLE_SSL \"Enable SSL support\" ON)\n\nif(CURL_DEFAULT_SSL_BACKEND)\n  set(_valid_default_ssl_backend FALSE)\nendif()\n\nif(APPLE)\n  cmake_dependent_option(CURL_USE_SECTRANSP \"Enable Apple OS native SSL/TLS (Secure Transport)\" OFF CURL_ENABLE_SSL OFF)\nendif()\nif(WIN32)\n  cmake_dependent_option(CURL_USE_SCHANNEL \"Enable Windows native SSL/TLS (Schannel)\" OFF CURL_ENABLE_SSL OFF)\n  option(CURL_WINDOWS_SSPI \"Enable SSPI on Windows\" ${CURL_USE_SCHANNEL})\nendif()\ncmake_dependent_option(CURL_USE_MBEDTLS \"Enable mbedTLS for SSL/TLS\" OFF CURL_ENABLE_SSL OFF)\ncmake_dependent_option(CURL_USE_BEARSSL \"Enable BearSSL for SSL/TLS\" OFF CURL_ENABLE_SSL OFF)\ncmake_dependent_option(CURL_USE_WOLFSSL \"Enable wolfSSL for SSL/TLS\" OFF CURL_ENABLE_SSL OFF)\ncmake_dependent_option(CURL_USE_GNUTLS \"Enable GnuTLS for SSL/TLS\" OFF CURL_ENABLE_SSL OFF)\ncmake_dependent_option(CURL_USE_RUSTLS \"Enable Rustls for SSL/TLS\" OFF CURL_ENABLE_SSL OFF)\n\nif(WIN32 OR\n   CURL_USE_SECTRANSP OR\n   CURL_USE_SCHANNEL OR\n   CURL_USE_MBEDTLS OR\n   CURL_USE_BEARSSL OR\n   CURL_USE_WOLFSSL OR\n   CURL_USE_GNUTLS OR\n   CURL_USE_RUSTLS)\n  set(_openssl_default OFF)\nelse()\n  set(_openssl_default ON)\nendif()\ncmake_dependent_option(CURL_USE_OPENSSL \"Enable OpenSSL for SSL/TLS\" ${_openssl_default} CURL_ENABLE_SSL OFF)\noption(USE_OPENSSL_QUIC \"Use OpenSSL and nghttp3 libraries for HTTP/3 support\" OFF)\nif(USE_OPENSSL_QUIC AND NOT CURL_USE_OPENSSL)\n  message(WARNING \"OpenSSL QUIC has been requested, but without enabling OpenSSL. Will not enable QUIC.\")\n  set(USE_OPENSSL_QUIC OFF)\nendif()\noption(CURL_DISABLE_OPENSSL_AUTO_LOAD_CONFIG \"Disable automatic loading of OpenSSL configuration\" OFF)\n\ncurl_count_true(_enabled_ssl_options_count\n  CURL_USE_SCHANNEL\n  CURL_USE_SECTRANSP\n  CURL_USE_OPENSSL\n  CURL_USE_MBEDTLS\n  CURL_USE_BEARSSL\n  CURL_USE_WOLFSSL\n  CURL_USE_GNUTLS\n  CURL_USE_RUSTLS\n)\nif(_enabled_ssl_options_count GREATER 1)\n  set(CURL_WITH_MULTI_SSL ON)\nelseif(_enabled_ssl_options_count EQUAL 0)\n  set(CURL_DISABLE_HSTS ON)\nendif()\n\nif(CURL_USE_SCHANNEL)\n  set(_ssl_enabled ON)\n  set(USE_SCHANNEL ON)  # Windows native SSL/TLS support\n  set(USE_WINDOWS_SSPI ON)  # CURL_USE_SCHANNEL implies CURL_WINDOWS_SSPI\n\n  if(CURL_DEFAULT_SSL_BACKEND AND CURL_DEFAULT_SSL_BACKEND STREQUAL \"schannel\")\n    set(_valid_default_ssl_backend TRUE)\n  endif()\nendif()\nif(CURL_WINDOWS_SSPI)\n  set(USE_WINDOWS_SSPI ON)\nendif()\n\nif(CURL_USE_SECTRANSP)\n  set(_use_core_foundation_and_core_services ON)\n\n  find_library(SECURITY_FRAMEWORK NAMES \"Security\")\n  mark_as_advanced(SECURITY_FRAMEWORK)\n  if(NOT SECURITY_FRAMEWORK)\n    message(FATAL_ERROR \"Security framework not found\")\n  endif()\n  list(APPEND CURL_LIBS \"-framework Security\")\n\n  set(_ssl_enabled ON)\n  set(USE_SECTRANSP ON)\n\n  if(CURL_DEFAULT_SSL_BACKEND AND CURL_DEFAULT_SSL_BACKEND STREQUAL \"secure-transport\")\n    set(_valid_default_ssl_backend TRUE)\n  endif()\n\n  message(WARNING \"Secure Transport does not support TLS 1.3.\")\nendif()\n\nif(_use_core_foundation_and_core_services)\n  find_library(COREFOUNDATION_FRAMEWORK NAMES \"CoreFoundation\")\n  mark_as_advanced(COREFOUNDATION_FRAMEWORK)\n  if(NOT COREFOUNDATION_FRAMEWORK)\n    message(FATAL_ERROR \"CoreFoundation framework not found\")\n  endif()\n  list(APPEND CURL_LIBS \"-framework CoreFoundation\")\n\n  find_library(CORESERVICES_FRAMEWORK NAMES \"CoreServices\")\n  mark_as_advanced(CORESERVICES_FRAMEWORK)\n  if(NOT CORESERVICES_FRAMEWORK)\n    message(FATAL_ERROR \"CoreServices framework not found\")\n  endif()\n  list(APPEND CURL_LIBS \"-framework CoreServices\")\nendif()\n\nif(CURL_USE_OPENSSL)\n  find_package(OpenSSL REQUIRED)\n  set(_ssl_enabled ON)\n  set(USE_OPENSSL ON)\n\n  # Depend on OpenSSL via imported targets. This allows our dependents to\n  # get our dependencies transitively.\n  list(APPEND CURL_LIBS OpenSSL::SSL OpenSSL::Crypto)\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE \"openssl\")\n\n  if(CURL_DEFAULT_SSL_BACKEND AND CURL_DEFAULT_SSL_BACKEND STREQUAL \"openssl\")\n    set(_valid_default_ssl_backend TRUE)\n  endif()\n  set(_curl_ca_bundle_supported TRUE)\n\n  cmake_push_check_state()\n  list(APPEND CMAKE_REQUIRED_INCLUDES ${OPENSSL_INCLUDE_DIR})\n  if(NOT DEFINED HAVE_BORINGSSL)\n    check_symbol_exists(\"OPENSSL_IS_BORINGSSL\" \"openssl/base.h\" HAVE_BORINGSSL)\n  endif()\n  if(NOT DEFINED HAVE_AWSLC)\n    check_symbol_exists(\"OPENSSL_IS_AWSLC\" \"openssl/base.h\" HAVE_AWSLC)\n  endif()\n  if(NOT DEFINED HAVE_LIBRESSL)\n    check_symbol_exists(\"LIBRESSL_VERSION_NUMBER\" \"openssl/opensslv.h\" HAVE_LIBRESSL)\n  endif()\n  cmake_pop_check_state()\n\n  if(HAVE_BORINGSSL)\n    set(_openssl \"BoringSSL\")\n  elseif(HAVE_AWSLC)\n    set(_openssl \"AWS-LC\")\n  elseif(HAVE_LIBRESSL)\n    set(_openssl \"LibreSSL\")\n  elseif(USE_AMISSL)\n    set(_openssl \"AmiSSL\")\n  else()\n    set(_openssl \"OpenSSL\")\n  endif()\nendif()\n\nif(CURL_USE_MBEDTLS)\n  find_package(MbedTLS REQUIRED)\n  set(_ssl_enabled ON)\n  set(USE_MBEDTLS ON)\n  list(APPEND CURL_LIBS ${MBEDTLS_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${MBEDTLS_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${MBEDTLS_PC_REQUIRES})\n  include_directories(SYSTEM ${MBEDTLS_INCLUDE_DIRS})\n  link_directories(${MBEDTLS_LIBRARY_DIRS})\n  if(MBEDTLS_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${MBEDTLS_CFLAGS}\")\n  endif()\n\n  if(CURL_DEFAULT_SSL_BACKEND AND CURL_DEFAULT_SSL_BACKEND STREQUAL \"mbedtls\")\n    set(_valid_default_ssl_backend TRUE)\n  endif()\n  set(_curl_ca_bundle_supported TRUE)\nendif()\n\nif(CURL_USE_BEARSSL)\n  find_package(BearSSL REQUIRED)\n  set(_ssl_enabled ON)\n  set(USE_BEARSSL ON)\n  list(APPEND CURL_LIBS ${BEARSSL_LIBRARIES})\n  include_directories(SYSTEM ${BEARSSL_INCLUDE_DIRS})\n\n  if(CURL_DEFAULT_SSL_BACKEND AND CURL_DEFAULT_SSL_BACKEND STREQUAL \"bearssl\")\n    set(_valid_default_ssl_backend TRUE)\n  endif()\n  set(_curl_ca_bundle_supported TRUE)\n\n  message(WARNING \"BearSSL does not support TLS 1.3.\")\nendif()\n\nif(CURL_USE_WOLFSSL)\n  find_package(WolfSSL REQUIRED)\n  set(_ssl_enabled ON)\n  set(USE_WOLFSSL ON)\n  list(APPEND CURL_LIBS ${WOLFSSL_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${WOLFSSL_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${WOLFSSL_PC_REQUIRES})\n  include_directories(SYSTEM ${WOLFSSL_INCLUDE_DIRS})\n  link_directories(${WOLFSSL_LIBRARY_DIRS})\n  if(WOLFSSL_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${WOLFSSL_CFLAGS}\")\n  endif()\n\n  if(CURL_DEFAULT_SSL_BACKEND AND CURL_DEFAULT_SSL_BACKEND STREQUAL \"wolfssl\")\n    set(_valid_default_ssl_backend TRUE)\n  endif()\n  set(_curl_ca_bundle_supported TRUE)\nendif()\n\nif(CURL_USE_GNUTLS)\n  if(CURL_USE_PKGCONFIG)\n    find_package(PkgConfig QUIET)\n    pkg_check_modules(GNUTLS \"gnutls\")\n    if(GNUTLS_FOUND)\n      set(GNUTLS_LIBRARIES ${GNUTLS_LINK_LIBRARIES})\n    endif()\n  endif()\n  if(NOT GNUTLS_FOUND)\n    find_package(GnuTLS REQUIRED)\n  endif()\n  find_package(Nettle REQUIRED)\n  set(_ssl_enabled ON)\n  set(USE_GNUTLS ON)\n  list(APPEND CURL_LIBS ${GNUTLS_LIBRARIES} ${NETTLE_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${NETTLE_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE \"gnutls\" ${NETTLE_PC_REQUIRES})\n  include_directories(SYSTEM ${GNUTLS_INCLUDE_DIRS} ${NETTLE_INCLUDE_DIRS})\n  link_directories(${NETTLE_LIBRARY_DIRS})\n  if(NETTLE_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${NETTLE_CFLAGS}\")\n  endif()\n\n  if(CURL_DEFAULT_SSL_BACKEND AND CURL_DEFAULT_SSL_BACKEND STREQUAL \"gnutls\")\n    set(_valid_default_ssl_backend TRUE)\n  endif()\n  set(_curl_ca_bundle_supported TRUE)\n\n  if(NOT DEFINED HAVE_GNUTLS_SRP AND NOT CURL_DISABLE_SRP)\n    cmake_push_check_state()\n    list(APPEND CMAKE_REQUIRED_INCLUDES ${GNUTLS_INCLUDE_DIRS})\n    list(APPEND CMAKE_REQUIRED_LIBRARIES ${GNUTLS_LIBRARIES})\n    check_symbol_exists(\"gnutls_srp_verifier\" \"gnutls/gnutls.h\" HAVE_GNUTLS_SRP)\n    cmake_pop_check_state()\n  endif()\nendif()\n\nif(CURL_USE_RUSTLS)\n  find_package(Rustls REQUIRED)\n  set(_ssl_enabled ON)\n  set(USE_RUSTLS ON)\n  list(APPEND CURL_LIBS ${RUSTLS_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${RUSTLS_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${RUSTLS_PC_REQUIRES})\n  include_directories(SYSTEM ${RUSTLS_INCLUDE_DIRS})\n  link_directories(${RUSTLS_LIBRARY_DIRS})\n  if(RUSTLS_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${RUSTLS_CFLAGS}\")\n  endif()\n\n  if(CURL_DEFAULT_SSL_BACKEND AND CURL_DEFAULT_SSL_BACKEND STREQUAL \"rustls\")\n    set(_valid_default_ssl_backend TRUE)\n  endif()\n  set(_curl_ca_bundle_supported TRUE)\nendif()\n\nif(CURL_DEFAULT_SSL_BACKEND AND NOT _valid_default_ssl_backend)\n  message(FATAL_ERROR \"CURL_DEFAULT_SSL_BACKEND '${CURL_DEFAULT_SSL_BACKEND}' not enabled.\")\nendif()\n\n# Keep ZLIB detection after TLS detection,\n# and before calling curl_openssl_check_symbol_exists().\n\nset(HAVE_LIBZ OFF)\ncurl_dependency_option(CURL_ZLIB ZLIB \"ZLIB\")\nif(ZLIB_FOUND)\n  set(HAVE_LIBZ ON)\n  # Depend on ZLIB via imported targets. This allows our dependents to\n  # get our dependencies transitively.\n  list(APPEND CURL_LIBS ZLIB::ZLIB)\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE \"zlib\")\nendif()\n\nset(HAVE_BROTLI OFF)\ncurl_dependency_option(CURL_BROTLI Brotli \"brotli\")\nif(BROTLI_FOUND)\n  set(HAVE_BROTLI ON)\n  list(APPEND CURL_LIBS ${BROTLI_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${BROTLI_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${BROTLI_PC_REQUIRES})\n  include_directories(SYSTEM ${BROTLI_INCLUDE_DIRS})\n  link_directories(${BROTLI_LIBRARY_DIRS})\n  if(BROTLI_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${BROTLI_CFLAGS}\")\n  endif()\nendif()\n\nset(HAVE_ZSTD OFF)\ncurl_dependency_option(CURL_ZSTD Zstd \"zstd\")\nif(ZSTD_FOUND)\n  if(NOT ZSTD_VERSION VERSION_LESS 1.0.0)\n    set(HAVE_ZSTD ON)\n    list(APPEND CURL_LIBS ${ZSTD_LIBRARIES})\n    list(APPEND CURL_LIBDIRS ${ZSTD_LIBRARY_DIRS})\n    list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${ZSTD_PC_REQUIRES})\n    include_directories(SYSTEM ${ZSTD_INCLUDE_DIRS})\n    link_directories(${ZSTD_LIBRARY_DIRS})\n    if(ZSTD_CFLAGS)\n      set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${ZSTD_CFLAGS}\")\n    endif()\n  else()\n    message(WARNING \"zstd v1.0.0 or newer is required, disabling zstd support.\")\n  endif()\nendif()\n\n# Check symbol in an OpenSSL-like TLS backend.\nmacro(curl_openssl_check_symbol_exists _symbol _files _variable)\n  cmake_push_check_state()\n  if(USE_OPENSSL)\n    list(APPEND CMAKE_REQUIRED_INCLUDES   \"${OPENSSL_INCLUDE_DIR}\")\n    list(APPEND CMAKE_REQUIRED_LIBRARIES  \"${OPENSSL_LIBRARIES}\")\n    if(HAVE_LIBZ)\n      list(APPEND CMAKE_REQUIRED_LIBRARIES \"${ZLIB_LIBRARIES}\")\n    endif()\n    if(WIN32)\n      list(APPEND CMAKE_REQUIRED_LIBRARIES \"ws2_32\")\n      list(APPEND CMAKE_REQUIRED_LIBRARIES \"bcrypt\")  # for OpenSSL/LibreSSL\n    endif()\n  endif()\n  if(USE_WOLFSSL)\n    list(APPEND CMAKE_REQUIRED_INCLUDES   \"${WOLFSSL_INCLUDE_DIRS}\")\n    list(APPEND CMAKE_REQUIRED_LIBRARIES  \"${WOLFSSL_LIBRARIES}\")\n    curl_required_libpaths(\"${WOLFSSL_LIBRARY_DIRS}\")\n    if(HAVE_LIBZ)\n      list(APPEND CMAKE_REQUIRED_INCLUDES  \"${ZLIB_INCLUDE_DIRS}\")  # Public wolfSSL headers require zlib headers\n      list(APPEND CMAKE_REQUIRED_LIBRARIES \"${ZLIB_LIBRARIES}\")\n    endif()\n    if(WIN32)\n      list(APPEND CMAKE_REQUIRED_LIBRARIES \"ws2_32\" \"crypt32\")\n    endif()\n    list(APPEND CMAKE_REQUIRED_DEFINITIONS \"-DHAVE_UINTPTR_T\")  # to pull in stdint.h (as of wolfSSL v5.5.4)\n  endif()\n  check_symbol_exists(\"${_symbol}\" \"${_files}\" \"${_variable}\")\n  cmake_pop_check_state()\nendmacro()\n\n# Ensure that the OpenSSL fork actually supports QUIC.\nmacro(curl_openssl_check_quic)\n  if(NOT DEFINED HAVE_SSL_SET_QUIC_USE_LEGACY_CODEPOINT)\n    if(USE_OPENSSL)\n      curl_openssl_check_symbol_exists(\"SSL_set_quic_use_legacy_codepoint\" \"openssl/ssl.h\" HAVE_SSL_SET_QUIC_USE_LEGACY_CODEPOINT)\n    endif()\n    if(USE_WOLFSSL)\n      curl_openssl_check_symbol_exists(\"wolfSSL_set_quic_use_legacy_codepoint\" \"wolfssl/options.h;wolfssl/openssl/ssl.h\"\n        HAVE_SSL_SET_QUIC_USE_LEGACY_CODEPOINT)\n    endif()\n  endif()\n  if(NOT HAVE_SSL_SET_QUIC_USE_LEGACY_CODEPOINT)\n    message(FATAL_ERROR \"QUIC support is missing in OpenSSL fork. Try setting -DOPENSSL_ROOT_DIR\")\n  endif()\nendmacro()\n\nif(USE_WOLFSSL)\n  curl_openssl_check_symbol_exists(\"wolfSSL_DES_ecb_encrypt\" \"wolfssl/options.h;wolfssl/openssl/des.h\" HAVE_WOLFSSL_DES_ECB_ENCRYPT)\n  curl_openssl_check_symbol_exists(\"wolfSSL_BIO_new\" \"wolfssl/options.h;wolfssl/ssl.h\" HAVE_WOLFSSL_BIO)\n  curl_openssl_check_symbol_exists(\"wolfSSL_BIO_set_shutdown\" \"wolfssl/options.h;wolfssl/ssl.h\" HAVE_WOLFSSL_FULL_BIO)\nendif()\n\nif(USE_OPENSSL OR USE_WOLFSSL)\n  if(NOT DEFINED HAVE_SSL_SET0_WBIO)\n    curl_openssl_check_symbol_exists(\"SSL_set0_wbio\" \"openssl/ssl.h\" HAVE_SSL_SET0_WBIO)\n  endif()\n  if(NOT DEFINED HAVE_OPENSSL_SRP AND NOT CURL_DISABLE_SRP)\n    curl_openssl_check_symbol_exists(\"SSL_CTX_set_srp_username\" \"openssl/ssl.h\" HAVE_OPENSSL_SRP)\n  endif()\nendif()\n\noption(USE_HTTPSRR \"Enable HTTPS RR support\" OFF)\noption(USE_ECH \"Enable ECH support\" OFF)\nif(USE_ECH)\n  if(USE_OPENSSL OR USE_WOLFSSL)\n    # Be sure that the TLS library actually supports ECH.\n    if(USE_WOLFSSL)\n      curl_openssl_check_symbol_exists(\"wolfSSL_CTX_GenerateEchConfig\" \"wolfssl/options.h;wolfssl/ssl.h\"\n        HAVE_WOLFSSL_CTX_GENERATEECHCONFIG)\n    endif()\n    if(HAVE_BORINGSSL OR HAVE_AWSLC)\n      curl_openssl_check_symbol_exists(\"SSL_set1_ech_config_list\" \"openssl/ssl.h\" HAVE_SSL_SET1_ECH_CONFIG_LIST)\n    elseif(HAVE_OPENSSL)\n      curl_openssl_check_symbol_exists(\"SSL_set1_ech_config_list\" \"openssl/ech.h\" HAVE_SSL_SET1_ECH_CONFIG_LIST)\n    endif()\n    if(HAVE_WOLFSSL_CTX_GENERATEECHCONFIG OR\n       HAVE_SSL_SET1_ECH_CONFIG_LIST)\n      set(HAVE_ECH 1)\n    endif()\n    if(NOT HAVE_ECH)\n      message(FATAL_ERROR \"ECH support missing in OpenSSL/BoringSSL/AWS-LC/wolfSSL\")\n    else()\n      message(STATUS \"ECH enabled.\")\n    endif()\n  else()\n    message(FATAL_ERROR \"ECH requires ECH-enablded OpenSSL, BoringSSL, AWS-LC or wolfSSL\")\n  endif()\nendif()\n\noption(USE_SSLS_EXPORT \"Enable SSL session export support\" OFF)\nif(USE_SSLS_EXPORT)\n  if(_ssl_enabled)\n    message(STATUS \"SSL export enabled.\")\n  else()\n    message(FATAL_ERROR \"SSL session export requires SSL enabled\")\n  endif()\nendif()\n\noption(USE_NGHTTP2 \"Use nghttp2 library\" ON)\nif(USE_NGHTTP2)\n  find_package(NGHTTP2)\n  if(NGHTTP2_FOUND)\n    list(APPEND CURL_LIBS ${NGHTTP2_LIBRARIES})\n    list(APPEND CURL_LIBDIRS ${NGHTTP2_LIBRARY_DIRS})\n    list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${NGHTTP2_PC_REQUIRES})\n    include_directories(SYSTEM ${NGHTTP2_INCLUDE_DIRS})\n    link_directories(${NGHTTP2_LIBRARY_DIRS})\n    if(NGHTTP2_CFLAGS)\n      set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${NGHTTP2_CFLAGS}\")\n    endif()\n  else()\n    set(USE_NGHTTP2 OFF)\n  endif()\nendif()\n\noption(USE_NGTCP2 \"Use ngtcp2 and nghttp3 libraries for HTTP/3 support\" OFF)\nif(USE_NGTCP2)\n  if(USE_OPENSSL OR USE_WOLFSSL)\n    if(USE_WOLFSSL)\n      find_package(NGTCP2 REQUIRED \"wolfSSL\")\n    elseif(HAVE_BORINGSSL OR HAVE_AWSLC)\n      find_package(NGTCP2 REQUIRED \"BoringSSL\")\n    else()\n      find_package(NGTCP2 REQUIRED \"quictls\")\n      if(NOT HAVE_LIBRESSL)\n        set(_openssl \"quictls\")\n      endif()\n    endif()\n    curl_openssl_check_quic()\n  elseif(USE_GNUTLS)\n    find_package(NGTCP2 REQUIRED \"GnuTLS\")\n  else()\n    message(FATAL_ERROR \"ngtcp2 requires OpenSSL, wolfSSL or GnuTLS\")\n  endif()\n  list(APPEND CURL_LIBS ${NGTCP2_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${NGTCP2_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${NGTCP2_PC_REQUIRES})\n  include_directories(SYSTEM ${NGTCP2_INCLUDE_DIRS})\n  link_directories(${NGTCP2_LIBRARY_DIRS})\n  if(NGTCP2_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${NGTCP2_CFLAGS}\")\n  endif()\n\n  find_package(NGHTTP3 REQUIRED)\n  set(USE_NGHTTP3 ON)\n  list(APPEND CURL_LIBS ${NGHTTP3_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${NGHTTP3_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${NGHTTP3_PC_REQUIRES})\n  include_directories(SYSTEM ${NGHTTP3_INCLUDE_DIRS})\n  link_directories(${NGHTTP3_LIBRARY_DIRS})\n  if(NGHTTP3_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${NGHTTP3_CFLAGS}\")\n  endif()\nendif()\n\noption(USE_QUICHE \"Use quiche library for HTTP/3 support\" OFF)\nif(USE_QUICHE)\n  if(USE_NGTCP2)\n    message(FATAL_ERROR \"Only one HTTP/3 backend can be selected\")\n  endif()\n  find_package(Quiche REQUIRED)\n  if(NOT HAVE_BORINGSSL)\n    message(FATAL_ERROR \"quiche requires BoringSSL\")\n  endif()\n  curl_openssl_check_quic()\n  list(APPEND CURL_LIBS ${QUICHE_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${QUICHE_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${QUICHE_PC_REQUIRES})\n  include_directories(SYSTEM ${QUICHE_INCLUDE_DIRS})\n  link_directories(${QUICHE_LIBRARY_DIRS})\n  if(QUICHE_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${QUICHE_CFLAGS}\")\n  endif()\n  if(NOT DEFINED HAVE_QUICHE_CONN_SET_QLOG_FD)\n    cmake_push_check_state()\n    list(APPEND CMAKE_REQUIRED_INCLUDES   \"${QUICHE_INCLUDE_DIRS}\")\n    list(APPEND CMAKE_REQUIRED_LIBRARIES  \"${QUICHE_LIBRARIES}\")\n    check_symbol_exists(\"quiche_conn_set_qlog_fd\" \"quiche.h\" HAVE_QUICHE_CONN_SET_QLOG_FD)\n    cmake_pop_check_state()\n  endif()\nendif()\n\noption(USE_MSH3 \"Use msh3/msquic library for HTTP/3 support\" OFF)\nif(USE_MSH3)\n  if(USE_NGTCP2 OR USE_QUICHE)\n    message(FATAL_ERROR \"Only one HTTP/3 backend can be selected\")\n  endif()\n  if(NOT WIN32)\n    if(NOT USE_OPENSSL)\n      message(FATAL_ERROR \"msh3/msquic requires OpenSSL fork with QUIC API\")\n    endif()\n    curl_openssl_check_quic()\n  endif()\n  find_package(MSH3 REQUIRED)\n  list(APPEND CURL_LIBS ${MSH3_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${MSH3_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${MSH3_PC_REQUIRES})\n  include_directories(SYSTEM ${MSH3_INCLUDE_DIRS})\n  link_directories(${MSH3_LIBRARY_DIRS})\n  if(MSH3_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${MSH3_CFLAGS}\")\n  endif()\nendif()\n\nif(USE_OPENSSL_QUIC)\n  if(USE_NGTCP2 OR USE_QUICHE OR USE_MSH3)\n    message(FATAL_ERROR \"Only one HTTP/3 backend can be selected\")\n  endif()\n  find_package(OpenSSL 3.3.0 REQUIRED)\n\n  find_package(NGHTTP3 REQUIRED)\n  set(USE_NGHTTP3 ON)\n  include_directories(SYSTEM ${NGHTTP3_INCLUDE_DIRS})\n  list(APPEND CURL_LIBS ${NGHTTP3_LIBRARIES})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${NGHTTP3_PC_REQUIRES})\nendif()\n\nif(CURL_WITH_MULTI_SSL AND (USE_NGTCP2 OR USE_QUICHE OR USE_MSH3 OR USE_OPENSSL_QUIC))\n  message(FATAL_ERROR \"MultiSSL cannot be enabled with HTTP/3 and vice versa.\")\nendif()\n\nif(NOT CURL_DISABLE_SRP AND (HAVE_GNUTLS_SRP OR HAVE_OPENSSL_SRP))\n  set(USE_TLS_SRP 1)\nendif()\n\nif(NOT CURL_DISABLE_LDAP)\n  if(WIN32 AND NOT WINDOWS_STORE)\n    option(USE_WIN32_LDAP \"Use Windows LDAP implementation\" ON)\n    if(USE_WIN32_LDAP)\n      list(APPEND CURL_LIBS \"wldap32\")\n      if(NOT CURL_DISABLE_LDAPS)\n        set(HAVE_LDAP_SSL ON)\n      endif()\n    endif()\n  endif()\n\n  # Now that we know, we are not using Windows LDAP...\n  if(NOT USE_WIN32_LDAP)\n    # Check for LDAP\n    cmake_push_check_state()\n    if(USE_OPENSSL)\n      list(APPEND CMAKE_REQUIRED_LIBRARIES ${OPENSSL_LIBRARIES})\n    endif()\n    find_package(LDAP)\n    if(LDAP_FOUND)\n      set(HAVE_LBER_H 1)\n      set(CURL_LIBS \"${LDAP_LIBRARIES};${CURL_LIBS}\")\n      list(APPEND CURL_LIBDIRS ${LDAP_LIBRARY_DIRS})\n      if(LDAP_PC_REQUIRES)\n        set(LIBCURL_PC_REQUIRES_PRIVATE \"${LDAP_PC_REQUIRES};${LIBCURL_PC_REQUIRES_PRIVATE}\")\n      endif()\n      include_directories(SYSTEM ${LDAP_INCLUDE_DIRS})\n      link_directories(${LDAP_LIBRARY_DIRS})\n      if(LDAP_CFLAGS)\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${LDAP_CFLAGS}\")\n      endif()\n\n      # LDAP feature checks\n\n      list(APPEND CMAKE_REQUIRED_DEFINITIONS \"-DLDAP_DEPRECATED=1\")\n      list(APPEND CMAKE_REQUIRED_LIBRARIES ${LDAP_LIBRARIES})\n      curl_required_libpaths(\"${LDAP_LIBRARY_DIRS}\")\n\n      check_function_exists(\"ldap_url_parse\" HAVE_LDAP_URL_PARSE)\n      check_function_exists(\"ldap_init_fd\" HAVE_LDAP_INIT_FD)\n\n      check_include_file(\"ldap_ssl.h\" HAVE_LDAP_SSL_H)\n\n      if(HAVE_LDAP_INIT_FD)\n        set(USE_OPENLDAP ON)\n        add_definitions(\"-DLDAP_DEPRECATED=1\")\n      endif()\n      if(NOT CURL_DISABLE_LDAPS)\n        set(HAVE_LDAP_SSL ON)\n      endif()\n    else()\n      message(STATUS \"LDAP not found. CURL_DISABLE_LDAP set ON\")\n      set(CURL_DISABLE_LDAP ON CACHE BOOL \"\" FORCE)\n    endif()\n    cmake_pop_check_state()\n  endif()\nendif()\n\n# No ldap, no ldaps.\nif(CURL_DISABLE_LDAP)\n  if(NOT CURL_DISABLE_LDAPS)\n    message(STATUS \"LDAP needs to be enabled to support LDAPS\")\n    set(CURL_DISABLE_LDAPS ON CACHE BOOL \"\" FORCE)\n  endif()\nendif()\n\nif(WIN32)\n  option(USE_WIN32_IDN \"Use WinIDN for IDN support\" OFF)\n  if(USE_WIN32_IDN)\n    list(APPEND CURL_LIBS \"normaliz\")\n  endif()\nelse()\n  set(USE_WIN32_IDN OFF)\nendif()\n\nif(APPLE)\n  option(USE_APPLE_IDN \"Use Apple built-in IDN support\" OFF)\n  if(USE_APPLE_IDN)\n    cmake_push_check_state()\n    list(APPEND CMAKE_REQUIRED_LIBRARIES \"icucore\")\n    check_symbol_exists(\"uidna_openUTS46\" \"unicode/uidna.h\" HAVE_APPLE_IDN)\n    cmake_pop_check_state()\n    if(HAVE_APPLE_IDN)\n      list(APPEND CURL_LIBS \"icucore\" \"iconv\")\n    else()\n      set(USE_APPLE_IDN OFF)\n    endif()\n  endif()\nelse()\n  set(USE_APPLE_IDN OFF)\nendif()\n\n# Check for libidn2\noption(USE_LIBIDN2 \"Use libidn2 for IDN support\" ON)\nset(HAVE_IDN2_H OFF)\nset(HAVE_LIBIDN2 OFF)\nif(USE_LIBIDN2 AND NOT USE_APPLE_IDN AND NOT USE_WIN32_IDN)\n  find_package(Libidn2)\n  if(LIBIDN2_FOUND)\n    set(CURL_LIBS \"${LIBIDN2_LIBRARIES};${CURL_LIBS}\")\n    list(APPEND CURL_LIBDIRS ${LIBIDN2_LIBRARY_DIRS})\n    set(LIBCURL_PC_REQUIRES_PRIVATE \"${LIBIDN2_PC_REQUIRES};${LIBCURL_PC_REQUIRES_PRIVATE}\")\n    include_directories(SYSTEM ${LIBIDN2_INCLUDE_DIRS})\n    link_directories(${LIBIDN2_LIBRARY_DIRS})\n    if(LIBIDN2_CFLAGS)\n      set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${LIBIDN2_CFLAGS}\")\n    endif()\n    set(HAVE_IDN2_H 1)\n    set(HAVE_LIBIDN2 1)\n  endif()\nendif()\n\n# libpsl\noption(CURL_USE_LIBPSL \"Use libpsl\" ON)\nmark_as_advanced(CURL_USE_LIBPSL)\nset(USE_LIBPSL OFF)\n\nif(CURL_USE_LIBPSL)\n  find_package(Libpsl REQUIRED)\n  list(APPEND CURL_LIBS ${LIBPSL_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${LIBPSL_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${LIBPSL_PC_REQUIRES})\n  include_directories(SYSTEM ${LIBPSL_INCLUDE_DIRS})\n  link_directories(${LIBPSL_LIBRARY_DIRS})\n  if(LIBPSL_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${LIBPSL_CFLAGS}\")\n  endif()\n  set(USE_LIBPSL ON)\nendif()\n\n# libssh2\noption(CURL_USE_LIBSSH2 \"Use libssh2\" ON)\nmark_as_advanced(CURL_USE_LIBSSH2)\nset(USE_LIBSSH2 OFF)\n\nif(CURL_USE_LIBSSH2)\n  find_package(Libssh2)\n  if(LIBSSH2_FOUND)\n    list(APPEND CURL_LIBS ${LIBSSH2_LIBRARIES})\n    list(APPEND CURL_LIBDIRS ${LIBSSH2_LIBRARY_DIRS})\n    list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${LIBSSH2_PC_REQUIRES})\n    include_directories(SYSTEM ${LIBSSH2_INCLUDE_DIRS})\n    link_directories(${LIBSSH2_LIBRARY_DIRS})\n    if(LIBSSH2_CFLAGS)\n      set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${LIBSSH2_CFLAGS}\")\n    endif()\n    set(USE_LIBSSH2 ON)\n  endif()\nendif()\n\n# libssh\noption(CURL_USE_LIBSSH \"Use libssh\" OFF)\nmark_as_advanced(CURL_USE_LIBSSH)\nif(NOT USE_LIBSSH2 AND CURL_USE_LIBSSH)\n  find_package(Libssh REQUIRED)\n  list(APPEND CURL_LIBS ${LIBSSH_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${LIBSSH_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${LIBSSH_PC_REQUIRES})\n  include_directories(SYSTEM ${LIBSSH_INCLUDE_DIRS})\n  link_directories(${LIBSSH_LIBRARY_DIRS})\n  if(LIBSSH_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${LIBSSH_CFLAGS}\")\n  endif()\n  set(USE_LIBSSH ON)\nendif()\n\n# wolfSSH\noption(CURL_USE_WOLFSSH \"Use wolfSSH\" OFF)\nmark_as_advanced(CURL_USE_WOLFSSH)\nset(USE_WOLFSSH OFF)\nif(NOT USE_LIBSSH2 AND NOT USE_LIBSSH AND CURL_USE_WOLFSSH)\n  if(USE_WOLFSSL)\n    find_package(WolfSSH)\n    if(WOLFSSH_FOUND)\n      list(APPEND CURL_LIBS ${WOLFSSH_LIBRARIES})\n      include_directories(SYSTEM ${WOLFSSH_INCLUDE_DIRS})\n      set(USE_WOLFSSH ON)\n    endif()\n  else()\n    message(WARNING \"wolfSSH requires wolfSSL. Skipping.\")\n  endif()\nendif()\n\noption(CURL_USE_GSASL \"Use libgsasl\" OFF)\nmark_as_advanced(CURL_USE_GSASL)\nif(CURL_USE_GSASL)\n  find_package(Libgsasl REQUIRED)\n  list(APPEND CURL_LIBS ${LIBGSASL_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${LIBGSASL_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${LIBGSASL_PC_REQUIRES})\n  include_directories(SYSTEM ${LIBGSASL_INCLUDE_DIRS})\n  link_directories(${LIBGSASL_LIBRARY_DIRS})\n  if(LIBGSASL_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${LIBGSASL_CFLAGS}\")\n  endif()\n  set(USE_GSASL ON)\nendif()\n\noption(CURL_USE_GSSAPI \"Use GSSAPI implementation\" OFF)\nmark_as_advanced(CURL_USE_GSSAPI)\n\nif(CURL_USE_GSSAPI)\n  find_package(GSS)\n\n  set(HAVE_GSSAPI ${GSS_FOUND})\n  if(GSS_FOUND)\n    list(APPEND CURL_LIBS ${GSS_LIBRARIES})\n    list(APPEND CURL_LIBDIRS ${GSS_LIBRARY_DIRS})\n    list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${GSS_PC_REQUIRES})\n    include_directories(SYSTEM ${GSS_INCLUDE_DIRS})\n    link_directories(${GSS_LIBRARY_DIRS})\n    if(GSS_CFLAGS)\n      set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${GSS_CFLAGS}\")\n    endif()\n\n    if(GSS_FLAVOUR STREQUAL \"GNU\")\n      set(HAVE_GSSGNU 1)\n    else()\n      cmake_push_check_state()\n      list(APPEND CMAKE_REQUIRED_INCLUDES ${GSS_INCLUDE_DIRS})\n\n      set(_include_list \"\")\n      check_include_file(\"gssapi/gssapi.h\" HAVE_GSSAPI_GSSAPI_H)\n      if(HAVE_GSSAPI_GSSAPI_H)\n        list(APPEND _include_list \"gssapi/gssapi.h\")\n      endif()\n      check_include_files(\"${_include_list};gssapi/gssapi_generic.h\" HAVE_GSSAPI_GSSAPI_GENERIC_H)\n\n      if(GSS_FLAVOUR STREQUAL \"MIT\")\n        check_include_files(\"${_include_list};gssapi/gssapi_krb5.h\" _have_gssapi_gssapi_krb5_h)\n        if(HAVE_GSSAPI_GSSAPI_GENERIC_H)\n          list(APPEND _include_list \"gssapi/gssapi_generic.h\")\n        endif()\n        if(_have_gssapi_gssapi_krb5_h)\n          list(APPEND _include_list \"gssapi/gssapi_krb5.h\")\n        endif()\n\n        if(NOT DEFINED HAVE_GSS_C_NT_HOSTBASED_SERVICE)\n          set(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} ${GSS_CFLAGS}\")\n          list(APPEND CMAKE_REQUIRED_LIBRARIES ${GSS_LIBRARIES})\n          curl_required_libpaths(\"${GSS_LIBRARY_DIRS}\")\n          check_symbol_exists(\"GSS_C_NT_HOSTBASED_SERVICE\" \"${_include_list}\" HAVE_GSS_C_NT_HOSTBASED_SERVICE)\n        endif()\n        if(NOT HAVE_GSS_C_NT_HOSTBASED_SERVICE)\n          set(HAVE_OLD_GSSMIT ON)\n        endif()\n      endif()\n      unset(_include_list)\n      cmake_pop_check_state()\n    endif()\n  else()\n    message(WARNING \"GSSAPI has been requested, but no supporting libraries found. Skipping.\")\n  endif()\nendif()\n\n# libuv\noption(CURL_USE_LIBUV \"Use libuv for event-based tests\" OFF)\nif(CURL_USE_LIBUV)\n  if(NOT ENABLE_DEBUG)\n    message(FATAL_ERROR \"Using libuv without debug support enabled is useless\")\n  endif()\n  find_package(Libuv REQUIRED)\n  list(APPEND CURL_LIBS ${LIBUV_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${LIBUV_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${LIBUV_PC_REQUIRES})\n  include_directories(SYSTEM ${LIBUV_INCLUDE_DIRS})\n  link_directories(${LIBUV_LIBRARY_DIRS})\n  if(LIBUV_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${LIBUV_CFLAGS}\")\n  endif()\n  set(USE_LIBUV ON)\n  set(HAVE_UV_H ON)\nendif()\n\noption(USE_LIBRTMP \"Enable librtmp from rtmpdump\" OFF)\nif(USE_LIBRTMP)\n  find_package(Librtmp REQUIRED)\n  list(APPEND CURL_LIBS ${LIBRTMP_LIBRARIES})\n  list(APPEND CURL_LIBDIRS ${LIBRTMP_LIBRARY_DIRS})\n  list(APPEND LIBCURL_PC_REQUIRES_PRIVATE ${LIBRTMP_PC_REQUIRES})\n  include_directories(SYSTEM ${LIBRTMP_INCLUDE_DIRS})\n  link_directories(${LIBRTMP_LIBRARY_DIRS})\n  if(LIBRTMP_CFLAGS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${LIBRTMP_CFLAGS}\")\n  endif()\nendif()\n\noption(ENABLE_UNIX_SOCKETS \"Enable Unix domain sockets support\" ON)\nif(ENABLE_UNIX_SOCKETS)\n  if(WIN32 OR DOS)\n    set(USE_UNIX_SOCKETS ON)\n  else()\n    include(CheckStructHasMember)\n    check_struct_has_member(\"struct sockaddr_un\" \"sun_path\" \"sys/un.h\" USE_UNIX_SOCKETS)\n  endif()\nelse()\n  unset(USE_UNIX_SOCKETS CACHE)\nendif()\n\n#\n# CA handling\n#\nif(_curl_ca_bundle_supported)\n  set(CURL_CA_BUNDLE \"auto\" CACHE\n    STRING \"Path to the CA bundle. Set 'none' to disable or 'auto' for auto-detection. Defaults to 'auto'.\")\n  set(CURL_CA_FALLBACK OFF CACHE BOOL\n    \"Use built-in CA store of TLS backend. Defaults to OFF\")\n  set(CURL_CA_PATH \"auto\" CACHE\n    STRING \"Location of default CA path. Set 'none' to disable or 'auto' for auto-detection. Defaults to 'auto'.\")\n  set(CURL_CA_EMBED \"\" CACHE\n    STRING \"Path to the CA bundle to embed in the curl tool.\")\n\n  if(CURL_CA_BUNDLE STREQUAL \"\")\n    message(FATAL_ERROR \"Invalid value of CURL_CA_BUNDLE. Use 'none', 'auto' or file path.\")\n  elseif(CURL_CA_BUNDLE STREQUAL \"none\")\n    unset(CURL_CA_BUNDLE CACHE)\n  elseif(CURL_CA_BUNDLE STREQUAL \"auto\")\n    unset(CURL_CA_BUNDLE CACHE)\n    if(NOT CMAKE_CROSSCOMPILING AND NOT WIN32)\n      set(_curl_ca_bundle_autodetect TRUE)\n    endif()\n  else()\n    set(CURL_CA_BUNDLE_SET TRUE)\n  endif()\n  mark_as_advanced(CURL_CA_BUNDLE_SET)\n\n  if(CURL_CA_PATH STREQUAL \"\")\n    message(FATAL_ERROR \"Invalid value of CURL_CA_PATH. Use 'none', 'auto' or directory path.\")\n  elseif(CURL_CA_PATH STREQUAL \"none\")\n    unset(CURL_CA_PATH CACHE)\n  elseif(CURL_CA_PATH STREQUAL \"auto\")\n    unset(CURL_CA_PATH CACHE)\n    if(NOT CMAKE_CROSSCOMPILING AND NOT WIN32)\n      set(_curl_ca_path_autodetect TRUE)\n    endif()\n  else()\n    set(CURL_CA_PATH_SET TRUE)\n  endif()\n  mark_as_advanced(CURL_CA_PATH_SET)\n\n  if(CURL_CA_BUNDLE_SET AND _curl_ca_path_autodetect)\n    # Skip auto-detection of unset CA path because CA bundle is set explicitly\n  elseif(CURL_CA_PATH_SET AND _curl_ca_bundle_autodetect)\n    # Skip auto-detection of unset CA bundle because CA path is set explicitly\n  elseif(_curl_ca_bundle_autodetect OR _curl_ca_path_autodetect)\n    # First try auto-detecting a CA bundle, then a CA path\n\n    if(_curl_ca_bundle_autodetect)\n      foreach(_search_ca_bundle_path IN ITEMS\n          \"/etc/ssl/certs/ca-certificates.crt\"\n          \"/etc/pki/tls/certs/ca-bundle.crt\"\n          \"/usr/share/ssl/certs/ca-bundle.crt\"\n          \"/usr/local/share/certs/ca-root-nss.crt\"\n          \"/etc/ssl/cert.pem\")\n        if(EXISTS \"${_search_ca_bundle_path}\")\n          message(STATUS \"Found CA bundle: ${_search_ca_bundle_path}\")\n          set(CURL_CA_BUNDLE \"${_search_ca_bundle_path}\" CACHE\n            STRING \"Path to the CA bundle. Set 'none' to disable or 'auto' for auto-detection. Defaults to 'auto'.\")\n          set(CURL_CA_BUNDLE_SET TRUE CACHE BOOL \"Path to the CA bundle has been set\")\n          break()\n        endif()\n      endforeach()\n    endif()\n\n    if(_curl_ca_path_autodetect AND NOT CURL_CA_PATH_SET)\n      set(_search_ca_path \"/etc/ssl/certs\")\n      file(GLOB _curl_ca_files_found \"${_search_ca_path}/[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f].0\")\n      if(_curl_ca_files_found)\n        unset(_curl_ca_files_found)\n        message(STATUS \"Found CA path: ${_search_ca_path}\")\n        set(CURL_CA_PATH \"${_search_ca_path}\" CACHE\n          STRING \"Location of default CA path. Set 'none' to disable or 'auto' for auto-detection. Defaults to 'auto'.\")\n        set(CURL_CA_PATH_SET TRUE CACHE BOOL \"Path to the CA bundle has been set\")\n      endif()\n    endif()\n  endif()\n\n  set(CURL_CA_EMBED_SET FALSE)\n  if(BUILD_CURL_EXE AND NOT CURL_CA_EMBED STREQUAL \"\")\n    if(EXISTS \"${CURL_CA_EMBED}\")\n      set(CURL_CA_EMBED_SET TRUE)\n      message(STATUS \"Found CA bundle to embed: ${CURL_CA_EMBED}\")\n    else()\n      message(FATAL_ERROR \"CA bundle to embed is missing: '${CURL_CA_EMBED}'\")\n    endif()\n  endif()\nendif()\n\nif(WIN32)\n  option(CURL_DISABLE_CA_SEARCH \"Disable unsafe CA bundle search in PATH on Windows\" OFF)\n  option(CURL_CA_SEARCH_SAFE \"Enable safe CA bundle search (within the curl tool directory) on Windows\" OFF)\nendif()\n\n# Check for header files\nif(WIN32)\n  list(APPEND CURL_INCLUDES \"winsock2.h\")\n  list(APPEND CURL_INCLUDES \"ws2tcpip.h\")\n\n  if(HAVE_WIN32_WINNT)\n    if(HAVE_WIN32_WINNT LESS 0x0501)\n      # Windows XP is required for freeaddrinfo, getaddrinfo\n      message(FATAL_ERROR \"Building for Windows XP or newer is required.\")\n    endif()\n\n    # Pre-fill detection results based on target OS version\n    if(MINGW OR MSVC)\n      if(HAVE_WIN32_WINNT LESS 0x0600)\n        set(HAVE_INET_NTOP 0)\n        set(HAVE_INET_PTON 0)\n      else()  # Windows Vista or newer\n        set(HAVE_INET_NTOP 1)\n        set(HAVE_INET_PTON 1)\n      endif()\n      unset(HAVE_INET_NTOP CACHE)\n      unset(HAVE_INET_PTON CACHE)\n    endif()\n  endif()\nendif()\n\n# Detect headers\n\n# Use check_include_file_concat_curl() for headers required by subsequent\n# check_include_file_concat_curl() or check_symbol_exists() detections.\n# Order for these is significant.\ncheck_include_file(\"sys/eventfd.h\"    HAVE_SYS_EVENTFD_H)\ncheck_include_file(\"sys/filio.h\"      HAVE_SYS_FILIO_H)\ncheck_include_file(\"sys/ioctl.h\"      HAVE_SYS_IOCTL_H)\ncheck_include_file(\"sys/param.h\"      HAVE_SYS_PARAM_H)\ncheck_include_file(\"sys/poll.h\"       HAVE_SYS_POLL_H)\ncheck_include_file(\"sys/resource.h\"   HAVE_SYS_RESOURCE_H)\ncheck_include_file_concat_curl(\"sys/select.h\"     HAVE_SYS_SELECT_H)\ncheck_include_file_concat_curl(\"sys/socket.h\"     HAVE_SYS_SOCKET_H)\ncheck_include_file(\"sys/sockio.h\"     HAVE_SYS_SOCKIO_H)\ncheck_include_file(\"sys/stat.h\"       HAVE_SYS_STAT_H)\ncheck_include_file_concat_curl(\"sys/time.h\"       HAVE_SYS_TIME_H)\ncheck_include_file_concat_curl(\"sys/types.h\"      HAVE_SYS_TYPES_H)\ncheck_include_file(\"sys/un.h\"         HAVE_SYS_UN_H)\ncheck_include_file_concat_curl(\"sys/utime.h\"      HAVE_SYS_UTIME_H)  # sys/types.h (AmigaOS)\n\ncheck_include_file_concat_curl(\"arpa/inet.h\"      HAVE_ARPA_INET_H)\ncheck_include_file(\"dirent.h\"         HAVE_DIRENT_H)\ncheck_include_file(\"fcntl.h\"          HAVE_FCNTL_H)\ncheck_include_file_concat_curl(\"ifaddrs.h\"        HAVE_IFADDRS_H)\ncheck_include_file(\"io.h\"             HAVE_IO_H)\ncheck_include_file_concat_curl(\"libgen.h\"         HAVE_LIBGEN_H)\ncheck_include_file(\"linux/tcp.h\"      HAVE_LINUX_TCP_H)\ncheck_include_file(\"locale.h\"         HAVE_LOCALE_H)\ncheck_include_file_concat_curl(\"net/if.h\"         HAVE_NET_IF_H)  # sys/select.h (e.g. MS-DOS/Watt-32)\ncheck_include_file_concat_curl(\"netdb.h\"          HAVE_NETDB_H)\ncheck_include_file_concat_curl(\"netinet/in.h\"     HAVE_NETINET_IN_H)\ncheck_include_file(\"netinet/in6.h\"    HAVE_NETINET_IN6_H)\ncheck_include_file_concat_curl(\"netinet/tcp.h\"    HAVE_NETINET_TCP_H)  # sys/types.h (e.g. Cygwin) netinet/in.h\ncheck_include_file_concat_curl(\"netinet/udp.h\"    HAVE_NETINET_UDP_H)  # sys/types.h (e.g. Cygwin)\ncheck_include_file(\"poll.h\"           HAVE_POLL_H)\ncheck_include_file(\"pwd.h\"            HAVE_PWD_H)\ncheck_include_file(\"stdatomic.h\"      HAVE_STDATOMIC_H)\ncheck_include_file(\"stdbool.h\"        HAVE_STDBOOL_H)\ncheck_include_file(\"strings.h\"        HAVE_STRINGS_H)\ncheck_include_file(\"stropts.h\"        HAVE_STROPTS_H)\ncheck_include_file(\"termio.h\"         HAVE_TERMIO_H)\ncheck_include_file(\"termios.h\"        HAVE_TERMIOS_H)\ncheck_include_file_concat_curl(\"unistd.h\"         HAVE_UNISTD_H)\ncheck_include_file(\"utime.h\"          HAVE_UTIME_H)\n\nif(AMIGA)\n  check_include_file_concat_curl(\"proto/bsdsocket.h\" HAVE_PROTO_BSDSOCKET_H)\nendif()\n\n# Pass these detection results to curl_internal_test() for use in CurlTests.c\n# Add here all feature flags referenced from CurlTests.c\nforeach(_variable IN ITEMS\n    HAVE_STDATOMIC_H\n    HAVE_STDBOOL_H\n    HAVE_STROPTS_H\n    HAVE_SYS_IOCTL_H\n    HAVE_SYS_SOCKET_H\n    HAVE_SYS_TYPES_H\n    HAVE_UNISTD_H\n    )\n  if(${_variable})\n    set(CURL_TEST_DEFINES \"${CURL_TEST_DEFINES} -D${_variable}\")\n  endif()\nendforeach()\n\ncheck_type_size(\"size_t\"      SIZEOF_SIZE_T)\ncheck_type_size(\"ssize_t\"     SIZEOF_SSIZE_T)\ncheck_type_size(\"long long\"   SIZEOF_LONG_LONG)\ncheck_type_size(\"long\"        SIZEOF_LONG)\ncheck_type_size(\"int\"         SIZEOF_INT)\ncheck_type_size(\"__int64\"     SIZEOF___INT64)\ncheck_type_size(\"time_t\"      SIZEOF_TIME_T)\ncheck_type_size(\"suseconds_t\" SIZEOF_SUSECONDS_T)\nif(NOT HAVE_SIZEOF_SSIZE_T)\n  if(SIZEOF_LONG EQUAL SIZEOF_SIZE_T)\n    set(ssize_t \"long\")\n  endif()\n  if(NOT ssize_t AND SIZEOF___INT64 EQUAL SIZEOF_SIZE_T)\n    set(ssize_t \"__int64\")\n  endif()\nendif()\n# off_t is sized later, after the HAVE_FILE_OFFSET_BITS test\n\nif(SIZEOF_LONG_LONG)\n  set(HAVE_LONGLONG 1)\nendif()\nif(SIZEOF_SUSECONDS_T)\n  set(HAVE_SUSECONDS_T 1)\nendif()\n\n# Check for some functions that are used\n\n# Apply to all feature checks\nif(WIN32)\n  list(APPEND CMAKE_REQUIRED_LIBRARIES \"ws2_32\")\nelseif(HAVE_LIBSOCKET)\n  list(APPEND CMAKE_REQUIRED_LIBRARIES \"socket\")\nelseif(DOS)\n  list(APPEND CMAKE_REQUIRED_LIBRARIES \"${WATT_ROOT}/lib/libwatt.a\")\nendif()\n\ncheck_function_exists(\"fnmatch\"       HAVE_FNMATCH)\ncheck_symbol_exists(\"basename\"        \"${CURL_INCLUDES};string.h\" HAVE_BASENAME)  # libgen.h unistd.h\ncheck_symbol_exists(\"opendir\"         \"dirent.h\" HAVE_OPENDIR)\ncheck_function_exists(\"poll\"          HAVE_POLL)  # poll.h\ncheck_symbol_exists(\"socket\"          \"${CURL_INCLUDES}\" HAVE_SOCKET)  # winsock2.h sys/socket.h\ncheck_function_exists(\"sched_yield\"   HAVE_SCHED_YIELD)\ncheck_symbol_exists(\"socketpair\"      \"${CURL_INCLUDES}\" HAVE_SOCKETPAIR)  # sys/socket.h\ncheck_symbol_exists(\"recv\"            \"${CURL_INCLUDES}\" HAVE_RECV)  # proto/bsdsocket.h sys/types.h sys/socket.h\ncheck_symbol_exists(\"send\"            \"${CURL_INCLUDES}\" HAVE_SEND)  # proto/bsdsocket.h sys/types.h sys/socket.h\ncheck_function_exists(\"sendmsg\"       HAVE_SENDMSG)\ncheck_function_exists(\"sendmmsg\"      HAVE_SENDMMSG)\ncheck_symbol_exists(\"select\"          \"${CURL_INCLUDES}\" HAVE_SELECT)  # proto/bsdsocket.h sys/select.h sys/socket.h\ncheck_symbol_exists(\"strdup\"          \"string.h\" HAVE_STRDUP)\ncheck_symbol_exists(\"strtok_r\"        \"string.h\" HAVE_STRTOK_R)\ncheck_symbol_exists(\"memrchr\"         \"string.h\" HAVE_MEMRCHR)\ncheck_symbol_exists(\"alarm\"           \"unistd.h\" HAVE_ALARM)\ncheck_symbol_exists(\"fcntl\"           \"fcntl.h\" HAVE_FCNTL)\ncheck_function_exists(\"getppid\"       HAVE_GETPPID)\ncheck_function_exists(\"utimes\"        HAVE_UTIMES)\n\ncheck_function_exists(\"gettimeofday\"  HAVE_GETTIMEOFDAY)  # sys/time.h\ncheck_symbol_exists(\"closesocket\"     \"${CURL_INCLUDES}\" HAVE_CLOSESOCKET)  # winsock2.h\ncheck_symbol_exists(\"sigsetjmp\"       \"setjmp.h\" HAVE_SIGSETJMP)\ncheck_function_exists(\"getpass_r\"     HAVE_GETPASS_R)\ncheck_function_exists(\"getpwuid\"      HAVE_GETPWUID)\ncheck_function_exists(\"getpwuid_r\"    HAVE_GETPWUID_R)\ncheck_function_exists(\"geteuid\"       HAVE_GETEUID)\ncheck_function_exists(\"utime\"         HAVE_UTIME)\ncheck_symbol_exists(\"gmtime_r\"        \"stdlib.h;time.h\" HAVE_GMTIME_R)\n\ncheck_symbol_exists(\"gethostbyname_r\" \"netdb.h\" HAVE_GETHOSTBYNAME_R)\ncheck_symbol_exists(\"gethostname\"     \"${CURL_INCLUDES}\" HAVE_GETHOSTNAME)  # winsock2.h unistd.h proto/bsdsocket.h\n\ncheck_symbol_exists(\"signal\"          \"signal.h\" HAVE_SIGNAL)\ncheck_symbol_exists(\"strtoll\"         \"stdlib.h\" HAVE_STRTOLL)\ncheck_symbol_exists(\"strerror_r\"      \"stdlib.h;string.h\" HAVE_STRERROR_R)\ncheck_symbol_exists(\"sigaction\"       \"signal.h\" HAVE_SIGACTION)\ncheck_symbol_exists(\"siginterrupt\"    \"signal.h\" HAVE_SIGINTERRUPT)\ncheck_symbol_exists(\"getaddrinfo\"     \"${CURL_INCLUDES};stdlib.h;string.h\" HAVE_GETADDRINFO)  # ws2tcpip.h sys/socket.h netdb.h\ncheck_symbol_exists(\"getifaddrs\"      \"${CURL_INCLUDES};stdlib.h\" HAVE_GETIFADDRS)  # ifaddrs.h\ncheck_symbol_exists(\"freeaddrinfo\"    \"${CURL_INCLUDES}\" HAVE_FREEADDRINFO)  # ws2tcpip.h sys/socket.h netdb.h\ncheck_function_exists(\"pipe\"          HAVE_PIPE)\ncheck_function_exists(\"eventfd\"       HAVE_EVENTFD)\ncheck_symbol_exists(\"ftruncate\"       \"unistd.h\" HAVE_FTRUNCATE)\ncheck_symbol_exists(\"getpeername\"     \"${CURL_INCLUDES}\" HAVE_GETPEERNAME)  # winsock2.h unistd.h proto/bsdsocket.h\ncheck_symbol_exists(\"getsockname\"     \"${CURL_INCLUDES}\" HAVE_GETSOCKNAME)  # winsock2.h unistd.h proto/bsdsocket.h\ncheck_function_exists(\"if_nametoindex\"  HAVE_IF_NAMETOINDEX)  # winsock2.h net/if.h\ncheck_function_exists(\"getrlimit\"       HAVE_GETRLIMIT)\ncheck_function_exists(\"setlocale\"       HAVE_SETLOCALE)\ncheck_function_exists(\"setmode\"         HAVE_SETMODE)\ncheck_function_exists(\"setrlimit\"       HAVE_SETRLIMIT)\n\nif(NOT WIN32)\n  check_symbol_exists(\"strcasecmp\"      \"string.h\" HAVE_STRCASECMP)\n  check_symbol_exists(\"stricmp\"         \"string.h\" HAVE_STRICMP)\n  check_symbol_exists(\"strcmpi\"         \"string.h\" HAVE_STRCMPI)\nendif()\n\nif(WIN32 OR CYGWIN)\n  check_function_exists(\"_setmode\" HAVE__SETMODE)\nendif()\n\nif(AMIGA)\n  check_symbol_exists(\"CloseSocket\" \"${CURL_INCLUDES}\" HAVE_CLOSESOCKET_CAMEL)  # sys/socket.h proto/bsdsocket.h\nendif()\n\nif(NOT _ssl_enabled)\n  check_symbol_exists(\"arc4random\" \"${CURL_INCLUDES};stdlib.h\" HAVE_ARC4RANDOM)\nendif()\n\nif(NOT MSVC OR (MSVC_VERSION GREATER_EQUAL 1900))\n  # Earlier MSVC compilers had faulty snprintf implementations\n  check_function_exists(\"snprintf\" HAVE_SNPRINTF)\nendif()\nif(APPLE)\n  check_function_exists(\"mach_absolute_time\" HAVE_MACH_ABSOLUTE_TIME)\nendif()\ncheck_symbol_exists(\"inet_ntop\" \"${CURL_INCLUDES};stdlib.h;string.h\" HAVE_INET_NTOP)  # arpa/inet.h\ncheck_symbol_exists(\"inet_pton\" \"${CURL_INCLUDES};stdlib.h;string.h\" HAVE_INET_PTON)  # arpa/inet.h\n\ncheck_symbol_exists(\"fsetxattr\" \"sys/xattr.h\" HAVE_FSETXATTR)\nif(HAVE_FSETXATTR)\n  curl_internal_test(HAVE_FSETXATTR_5)\n  curl_internal_test(HAVE_FSETXATTR_6)\nendif()\n\ncmake_push_check_state()\nif(WIN32)\n  list(APPEND CMAKE_EXTRA_INCLUDE_FILES \"winsock2.h\")\n  check_type_size(\"ADDRESS_FAMILY\" SIZEOF_ADDRESS_FAMILY)\n  set(HAVE_ADDRESS_FAMILY ${HAVE_SIZEOF_ADDRESS_FAMILY})\nelseif(HAVE_SYS_SOCKET_H)\n  list(APPEND CMAKE_EXTRA_INCLUDE_FILES \"sys/socket.h\")\n  check_type_size(\"sa_family_t\" SIZEOF_SA_FAMILY_T)\n  set(HAVE_SA_FAMILY_T ${HAVE_SIZEOF_SA_FAMILY_T})\nendif()\ncmake_pop_check_state()\n\n# Do curl specific tests\nforeach(_curl_test IN ITEMS\n    HAVE_FCNTL_O_NONBLOCK\n    HAVE_IOCTLSOCKET\n    HAVE_IOCTLSOCKET_CAMEL\n    HAVE_IOCTLSOCKET_CAMEL_FIONBIO\n    HAVE_IOCTLSOCKET_FIONBIO\n    HAVE_IOCTL_FIONBIO\n    HAVE_IOCTL_SIOCGIFADDR\n    HAVE_SETSOCKOPT_SO_NONBLOCK\n    HAVE_GETHOSTBYNAME_R_3\n    HAVE_GETHOSTBYNAME_R_5\n    HAVE_GETHOSTBYNAME_R_6\n    HAVE_GETHOSTBYNAME_R_3_REENTRANT\n    HAVE_GETHOSTBYNAME_R_5_REENTRANT\n    HAVE_GETHOSTBYNAME_R_6_REENTRANT\n    HAVE_IN_ADDR_T\n    HAVE_BOOL_T\n    STDC_HEADERS\n    HAVE_FILE_OFFSET_BITS\n    HAVE_ATOMIC\n    )\n  curl_internal_test(${_curl_test})\nendforeach()\n\ncmake_push_check_state()\nif(HAVE_FILE_OFFSET_BITS)\n  set(_FILE_OFFSET_BITS 64)\n  list(APPEND CMAKE_REQUIRED_DEFINITIONS \"-D_FILE_OFFSET_BITS=64\")\nendif()\ncheck_type_size(\"off_t\" SIZEOF_OFF_T)\n\n# fseeko may not exist with _FILE_OFFSET_BITS=64 but can exist with\n# _FILE_OFFSET_BITS unset or 32 (e.g. Android ARMv7 with NDK 26b and API level < 24)\n# so we need to test fseeko after testing for _FILE_OFFSET_BITS\ncheck_symbol_exists(\"fseeko\" \"${CURL_INCLUDES};stdio.h\" HAVE_FSEEKO)\n\nif(HAVE_FSEEKO)\n  set(HAVE_DECL_FSEEKO 1)\nendif()\n\n# Include this header to get the type\ncmake_push_check_state()\nlist(APPEND CMAKE_REQUIRED_INCLUDES \"${PROJECT_SOURCE_DIR}/include\")\nlist(APPEND CMAKE_EXTRA_INCLUDE_FILES \"curl/system.h\")\ncheck_type_size(\"curl_off_t\" SIZEOF_CURL_OFF_T)\nlist(APPEND CMAKE_EXTRA_INCLUDE_FILES \"curl/curl.h\")\ncheck_type_size(\"curl_socket_t\" SIZEOF_CURL_SOCKET_T)\ncmake_pop_check_state()  # pop curl system headers\ncmake_pop_check_state()  # pop -D_FILE_OFFSET_BITS=64\n\nif(NOT WIN32 AND NOT CMAKE_CROSSCOMPILING)\n  # On non-Windows and not cross-compiling, check for writable argv[]\n  include(CheckCSourceRuns)\n  check_c_source_runs(\"\n    int main(int argc, char **argv)\n    {\n      (void)argc;\n      argv[0][0] = ' ';\n      return (argv[0][0] == ' ')?0:1;\n    }\" HAVE_WRITABLE_ARGV)\nendif()\n\nif(NOT CMAKE_CROSSCOMPILING)\n  include(CheckCSourceRuns)\n  check_c_source_runs(\"\n    #include <time.h>\n    int main(void) {\n      time_t t = -1;\n      return t < 0;\n    }\" HAVE_TIME_T_UNSIGNED)\nendif()\n\ncurl_internal_test(HAVE_GLIBC_STRERROR_R)\ncurl_internal_test(HAVE_POSIX_STRERROR_R)\n\n# Check for reentrant\nforeach(_curl_test IN ITEMS\n    HAVE_GETHOSTBYNAME_R_3\n    HAVE_GETHOSTBYNAME_R_5\n    HAVE_GETHOSTBYNAME_R_6)\n  if(NOT ${_curl_test})\n    if(${_curl_test}_REENTRANT)\n      set(NEED_REENTRANT 1)\n    endif()\n  endif()\nendforeach()\n\nif(NEED_REENTRANT)\n  foreach(_curl_test IN ITEMS\n      HAVE_GETHOSTBYNAME_R_3\n      HAVE_GETHOSTBYNAME_R_5\n      HAVE_GETHOSTBYNAME_R_6)\n    set(${_curl_test} 0)\n    if(${_curl_test}_REENTRANT)\n      set(${_curl_test} 1)\n    endif()\n  endforeach()\nendif()\n\nif(NOT WIN32)\n  curl_internal_test(HAVE_CLOCK_GETTIME_MONOTONIC)  # Check clock_gettime(CLOCK_MONOTONIC, x) support\nendif()\n\nif(APPLE)\n  curl_internal_test(HAVE_BUILTIN_AVAILABLE)  # Check compiler support of __builtin_available()\nendif()\n\n# Some other minor tests\n\nif(NOT HAVE_IN_ADDR_T)\n  set(in_addr_t \"unsigned long\")\nendif()\n\nif(CMAKE_COMPILER_IS_GNUCC AND APPLE)\n  include(CheckCCompilerFlag)\n  check_c_compiler_flag(\"-Wno-long-double\" HAVE_C_FLAG_Wno_long_double)\n  if(HAVE_C_FLAG_Wno_long_double)\n    # The Mac version of GCC warns about use of long double. Disable it.\n    get_source_file_property(_mprintf_compile_flags \"mprintf.c\" COMPILE_FLAGS)\n    if(_mprintf_compile_flags)\n      set(_mprintf_compile_flags \"${_mprintf_compile_flags} -Wno-long-double\")\n    else()\n      set(_mprintf_compile_flags \"-Wno-long-double\")\n    endif()\n    set_source_files_properties(\"mprintf.c\" PROPERTIES\n      COMPILE_FLAGS ${_mprintf_compile_flags})\n  endif()\nendif()\n\nif(_cmake_try_compile_target_type_save)\n  set(CMAKE_TRY_COMPILE_TARGET_TYPE ${_cmake_try_compile_target_type_save})\n  unset(_cmake_try_compile_target_type_save)\nendif()\n\ninclude(CMake/OtherTests.cmake)\n\nadd_definitions(\"-DHAVE_CONFIG_H\")\n\n# For Windows, all compilers used by CMake should support large files\nif(WIN32)\n  set(USE_WIN32_LARGE_FILES ON)\n\n  # Use the manifest embedded in the Windows Resource\n  set(CMAKE_RC_FLAGS \"${CMAKE_RC_FLAGS} -DCURL_EMBED_MANIFEST\")\n\n  # We use crypto functions that are not available for UWP apps\n  if(NOT WINDOWS_STORE)\n    set(USE_WIN32_CRYPTO ON)\n  endif()\n\n  # Link required libraries for USE_WIN32_CRYPTO or USE_SCHANNEL\n  if(USE_WIN32_CRYPTO OR USE_SCHANNEL)\n    list(APPEND CURL_LIBS \"advapi32\" \"crypt32\")\n  endif()\nendif()\n\nif(MSVC)\n  # Disable default manifest added by CMake\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /MANIFEST:NO\")\n\n  add_definitions(\"-D_CRT_SECURE_NO_DEPRECATE\" \"-D_CRT_NONSTDC_NO_DEPRECATE\")\n  if(CMAKE_C_FLAGS MATCHES \"/W[0-4]\")\n    string(REGEX REPLACE \"/W[0-4]\" \"/W4\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n  else()\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /W4\")\n  endif()\n\n  # Use multithreaded compilation on VS 2008+\n  if(CMAKE_C_COMPILER_ID STREQUAL \"MSVC\" AND MSVC_VERSION GREATER_EQUAL 1500)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /MP\")\n  endif()\nendif()\n\nif(CURL_WERROR)\n  if(MSVC)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /WX\")\n  else()\n    # This assumes clang or gcc style options\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Werror\")\n  endif()\nendif()\n\nif(CURL_LTO)\n  if(CMAKE_VERSION VERSION_LESS 3.9)\n    message(FATAL_ERROR \"LTO has been requested, but your cmake version ${CMAKE_VERSION} is to old. You need at least 3.9\")\n  endif()\n\n  cmake_policy(SET CMP0069 NEW)\n\n  include(CheckIPOSupported)\n  check_ipo_supported(RESULT CURL_HAS_LTO OUTPUT _lto_error LANGUAGES C)\n  if(CURL_HAS_LTO)\n    message(STATUS \"LTO supported and enabled\")\n  else()\n    message(FATAL_ERROR \"LTO has been requested, but the compiler does not support it\\n${_lto_error}\")\n  endif()\nendif()\n\n\n# Ugly (but functional) way to include \"Makefile.inc\" by transforming it\n# (= regenerate it).\nfunction(curl_transform_makefile_inc _input_file _output_file)\n  file(READ ${_input_file} _makefile_inc_text)\n  string(REPLACE \"$(top_srcdir)\"   \"\\${PROJECT_SOURCE_DIR}\" _makefile_inc_text ${_makefile_inc_text})\n  string(REPLACE \"$(top_builddir)\" \"\\${PROJECT_BINARY_DIR}\" _makefile_inc_text ${_makefile_inc_text})\n\n  string(REGEX REPLACE \"\\\\\\\\\\n\" \"!π!α!\" _makefile_inc_text ${_makefile_inc_text})\n  string(REGEX REPLACE \"([a-zA-Z_][a-zA-Z0-9_]*)[\\t ]*=[\\t ]*([^\\n]*)\" \"set(\\\\1 \\\\2)\" _makefile_inc_text ${_makefile_inc_text})\n  string(REPLACE \"!π!α!\" \"\\n\" _makefile_inc_text ${_makefile_inc_text})\n\n  # Replace $() with ${}\n  string(REGEX REPLACE \"\\\\$\\\\(([a-zA-Z_][a-zA-Z0-9_]*)\\\\)\" \"\\${\\\\1}\" _makefile_inc_text ${_makefile_inc_text})\n  # Replace @@ with ${}, even if that may not be read by CMake scripts.\n  string(REGEX REPLACE \"@([a-zA-Z_][a-zA-Z0-9_]*)@\" \"\\${\\\\1}\" _makefile_inc_text ${_makefile_inc_text})\n\n  file(WRITE ${_output_file} ${_makefile_inc_text})\n  set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS \"${_input_file}\")\nendfunction()\n\ninclude(GNUInstallDirs)\n\nset(_install_cmake_dir \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\nset(TARGETS_EXPORT_NAME \"${PROJECT_NAME}Targets\")\nset(_generated_dir \"${CMAKE_CURRENT_BINARY_DIR}/generated\")\nset(_project_config \"${_generated_dir}/${PROJECT_NAME}Config.cmake\")\nset(_version_config \"${_generated_dir}/${PROJECT_NAME}ConfigVersion.cmake\")\n\noption(BUILD_TESTING \"Build tests\" ON)\nif(BUILD_TESTING AND PERL_FOUND AND NOT CURL_DISABLE_TESTS)\n  set(CURL_BUILD_TESTING ON)\nelse()\n  set(CURL_BUILD_TESTING OFF)\nendif()\n\nif(HAVE_MANUAL_TOOLS)\n  set(CURL_MANPAGE \"${PROJECT_BINARY_DIR}/docs/cmdline-opts/curl.1\")\n  set(CURL_ASCIIPAGE \"${PROJECT_BINARY_DIR}/docs/cmdline-opts/curl.txt\")\n  add_subdirectory(docs)\nendif()\n\nadd_subdirectory(lib)\n\nif(BUILD_CURL_EXE)\n  add_subdirectory(src)\nendif()\n\noption(BUILD_EXAMPLES \"Build libcurl examples\" ON)\nif(BUILD_EXAMPLES)\n  add_subdirectory(docs/examples)\nendif()\n\nif(CURL_BUILD_TESTING)\n  add_subdirectory(tests)\nendif()\n\n# Helper to populate a list (_items) with a label when conditions\n# (the remaining args) are satisfied\nmacro(curl_add_if _label)\n  # Needs to be a macro to allow this indirection\n  if(${ARGN})\n    set(_items ${_items} \"${_label}\")\n  endif()\nendmacro()\n\n# NTLM support requires crypto functions from various SSL libs.\n# These conditions must match those in lib/curl_setup.h.\nif(NOT CURL_DISABLE_NTLM AND\n   (USE_OPENSSL OR\n    USE_MBEDTLS OR\n    USE_GNUTLS OR\n    USE_SECTRANSP OR\n    USE_WIN32_CRYPTO OR\n    (USE_WOLFSSL AND HAVE_WOLFSSL_DES_ECB_ENCRYPT)))\n  set(_use_curl_ntlm_core ON)\nendif()\n\n# Clear list and try to detect available protocols\nset(_items \"\")\ncurl_add_if(\"HTTP\"          NOT CURL_DISABLE_HTTP)\ncurl_add_if(\"HTTPS\"         NOT CURL_DISABLE_HTTP AND _ssl_enabled)\ncurl_add_if(\"FTP\"           NOT CURL_DISABLE_FTP)\ncurl_add_if(\"FTPS\"          NOT CURL_DISABLE_FTP AND _ssl_enabled)\ncurl_add_if(\"FILE\"          NOT CURL_DISABLE_FILE)\ncurl_add_if(\"TELNET\"        NOT CURL_DISABLE_TELNET)\ncurl_add_if(\"LDAP\"          NOT CURL_DISABLE_LDAP)\n# CURL_DISABLE_LDAP implies CURL_DISABLE_LDAPS\ncurl_add_if(\"LDAPS\"         NOT CURL_DISABLE_LDAPS AND\n                            ((USE_OPENLDAP AND _ssl_enabled) OR\n                            (NOT USE_OPENLDAP AND HAVE_LDAP_SSL)))\ncurl_add_if(\"DICT\"          NOT CURL_DISABLE_DICT)\ncurl_add_if(\"TFTP\"          NOT CURL_DISABLE_TFTP)\ncurl_add_if(\"GOPHER\"        NOT CURL_DISABLE_GOPHER)\ncurl_add_if(\"GOPHERS\"       NOT CURL_DISABLE_GOPHER AND _ssl_enabled)\ncurl_add_if(\"POP3\"          NOT CURL_DISABLE_POP3)\ncurl_add_if(\"POP3S\"         NOT CURL_DISABLE_POP3 AND _ssl_enabled)\ncurl_add_if(\"IMAP\"          NOT CURL_DISABLE_IMAP)\ncurl_add_if(\"IMAPS\"         NOT CURL_DISABLE_IMAP AND _ssl_enabled)\ncurl_add_if(\"SMB\"           NOT CURL_DISABLE_SMB AND\n                            _use_curl_ntlm_core AND (SIZEOF_CURL_OFF_T GREATER 4))\ncurl_add_if(\"SMBS\"          NOT CURL_DISABLE_SMB AND _ssl_enabled AND\n                            _use_curl_ntlm_core AND (SIZEOF_CURL_OFF_T GREATER 4))\ncurl_add_if(\"SMTP\"          NOT CURL_DISABLE_SMTP)\ncurl_add_if(\"SMTPS\"         NOT CURL_DISABLE_SMTP AND _ssl_enabled)\ncurl_add_if(\"SCP\"           USE_LIBSSH2 OR USE_LIBSSH OR USE_WOLFSSH)\ncurl_add_if(\"SFTP\"          USE_LIBSSH2 OR USE_LIBSSH OR USE_WOLFSSH)\ncurl_add_if(\"IPFS\"          NOT CURL_DISABLE_IPFS)\ncurl_add_if(\"IPNS\"          NOT CURL_DISABLE_IPFS)\ncurl_add_if(\"RTSP\"          NOT CURL_DISABLE_RTSP)\ncurl_add_if(\"RTMP\"          USE_LIBRTMP)\ncurl_add_if(\"MQTT\"          NOT CURL_DISABLE_MQTT)\ncurl_add_if(\"WS\"            NOT CURL_DISABLE_WEBSOCKETS)\ncurl_add_if(\"WSS\"           NOT CURL_DISABLE_WEBSOCKETS AND _ssl_enabled)\nif(_items)\n  list(SORT _items)\nendif()\nset(CURL_SUPPORTED_PROTOCOLS_LIST \"${_items}\")\nstring(REPLACE \";\" \" \" SUPPORT_PROTOCOLS \"${_items}\")\nstring(TOLOWER \"${SUPPORT_PROTOCOLS}\" _support_protocols_lower)\nmessage(STATUS \"Protocols: ${_support_protocols_lower}\")\n\n# Clear list and try to detect available features\nset(_items \"\")\ncurl_add_if(\"SSL\"           _ssl_enabled)\ncurl_add_if(\"IPv6\"          ENABLE_IPV6)\ncurl_add_if(\"UnixSockets\"   USE_UNIX_SOCKETS)\ncurl_add_if(\"libz\"          HAVE_LIBZ)\ncurl_add_if(\"brotli\"        HAVE_BROTLI)\ncurl_add_if(\"gsasl\"         USE_GSASL)\ncurl_add_if(\"zstd\"          HAVE_ZSTD)\ncurl_add_if(\"AsynchDNS\"     USE_ARES OR USE_THREADS_POSIX OR USE_THREADS_WIN32)\ncurl_add_if(\"IDN\"           (HAVE_LIBIDN2 AND HAVE_IDN2_H) OR\n                            USE_WIN32_IDN OR\n                            USE_APPLE_IDN)\ncurl_add_if(\"Largefile\"     (SIZEOF_CURL_OFF_T GREATER 4) AND\n                            ((SIZEOF_OFF_T GREATER 4) OR USE_WIN32_LARGE_FILES))\ncurl_add_if(\"SSPI\"          USE_WINDOWS_SSPI)\ncurl_add_if(\"GSS-API\"       HAVE_GSSAPI)\ncurl_add_if(\"alt-svc\"       NOT CURL_DISABLE_ALTSVC)\ncurl_add_if(\"HSTS\"          NOT CURL_DISABLE_HSTS)\ncurl_add_if(\"SPNEGO\"        NOT CURL_DISABLE_NEGOTIATE_AUTH AND\n                            (HAVE_GSSAPI OR USE_WINDOWS_SSPI))\ncurl_add_if(\"Kerberos\"      NOT CURL_DISABLE_KERBEROS_AUTH AND\n                            (HAVE_GSSAPI OR USE_WINDOWS_SSPI))\ncurl_add_if(\"NTLM\"          NOT (CURL_DISABLE_NTLM) AND\n                            (_use_curl_ntlm_core OR USE_WINDOWS_SSPI))\ncurl_add_if(\"TLS-SRP\"       USE_TLS_SRP)\ncurl_add_if(\"HTTP2\"         USE_NGHTTP2)\ncurl_add_if(\"HTTP3\"         USE_NGTCP2 OR USE_QUICHE OR USE_MSH3 OR USE_OPENSSL_QUIC)\ncurl_add_if(\"MultiSSL\"      CURL_WITH_MULTI_SSL)\ncurl_add_if(\"HTTPS-proxy\"   _ssl_enabled AND (USE_OPENSSL OR USE_GNUTLS\n                            OR USE_SCHANNEL OR USE_RUSTLS OR USE_BEARSSL OR\n                            USE_MBEDTLS OR USE_SECTRANSP OR\n                            (USE_WOLFSSL AND HAVE_WOLFSSL_BIO)))\ncurl_add_if(\"Unicode\"       ENABLE_UNICODE)\ncurl_add_if(\"threadsafe\"    HAVE_ATOMIC OR\n                            (USE_THREADS_POSIX AND HAVE_PTHREAD_H) OR\n                            (WIN32 AND HAVE_WIN32_WINNT GREATER_EQUAL 0x0600))\ncurl_add_if(\"Debug\"         ENABLE_DEBUG)\ncurl_add_if(\"TrackMemory\"   ENABLE_CURLDEBUG)\ncurl_add_if(\"ECH\"           _ssl_enabled AND HAVE_ECH)\ncurl_add_if(\"PSL\"           USE_LIBPSL)\ncurl_add_if(\"CAcert\"        CURL_CA_EMBED_SET)\ncurl_add_if(\"SSLS-EXPORT\"   _ssl_enabled AND USE_SSLS_EXPORT)\nif(_items)\n  if(NOT CMAKE_VERSION VERSION_LESS 3.13)\n    list(SORT _items CASE INSENSITIVE)\n  else()\n    list(SORT _items)\n  endif()\nendif()\nset(CURL_SUPPORTED_FEATURES_LIST \"${_items}\")\nstring(REPLACE \";\" \" \" SUPPORT_FEATURES \"${_items}\")\nmessage(STATUS \"Features: ${SUPPORT_FEATURES}\")\n\n# Clear list and collect SSL backends\nset(_items \"\")\ncurl_add_if(\"Schannel\"         _ssl_enabled AND USE_SCHANNEL)\ncurl_add_if(\"${_openssl}\"      _ssl_enabled AND USE_OPENSSL AND OPENSSL_VERSION VERSION_LESS 3.0.0)\ncurl_add_if(\"${_openssl} v3+\"  _ssl_enabled AND USE_OPENSSL AND NOT OPENSSL_VERSION VERSION_LESS 3.0.0)\ncurl_add_if(\"Secure Transport\" _ssl_enabled AND USE_SECTRANSP)\ncurl_add_if(\"mbedTLS\"          _ssl_enabled AND USE_MBEDTLS)\ncurl_add_if(\"BearSSL\"          _ssl_enabled AND USE_BEARSSL)\ncurl_add_if(\"wolfSSL\"          _ssl_enabled AND USE_WOLFSSL)\ncurl_add_if(\"GnuTLS\"           _ssl_enabled AND USE_GNUTLS)\ncurl_add_if(\"rustls\"           _ssl_enabled AND USE_RUSTLS)\n\nif(_items)\n  if(NOT CMAKE_VERSION VERSION_LESS 3.13)\n    list(SORT _items CASE INSENSITIVE)\n  else()\n    list(SORT _items)\n  endif()\nendif()\nstring(REPLACE \";\" \" \" SSL_BACKENDS \"${_items}\")\nmessage(STATUS \"Enabled SSL backends: ${SSL_BACKENDS}\")\nif(CURL_DEFAULT_SSL_BACKEND)\n  message(STATUS \"Default SSL backend: ${CURL_DEFAULT_SSL_BACKEND}\")\nendif()\n\nif(NOT CURL_DISABLE_INSTALL)\n\n  # curl-config needs the following options to be set.\n  set(CC                      \"${CMAKE_C_COMPILER}\")\n  # TODO: probably put a -D... options here?\n  set(CONFIGURE_OPTIONS       \"\")\n  set(CURLVERSION             \"${_curl_version}\")\n  set(VERSIONNUM              \"${_curl_version_num}\")\n  set(prefix                  \"${CMAKE_INSTALL_PREFIX}\")\n  set(exec_prefix             \"\\${prefix}\")\n  if(IS_ABSOLUTE ${CMAKE_INSTALL_INCLUDEDIR})\n    set(includedir            \"${CMAKE_INSTALL_INCLUDEDIR}\")\n  else()\n    set(includedir            \"\\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}\")\n  endif()\n  if(IS_ABSOLUTE ${CMAKE_INSTALL_LIBDIR})\n    set(libdir                \"${CMAKE_INSTALL_LIBDIR}\")\n  else()\n    set(libdir                \"\\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}\")\n  endif()\n  # \"a\" (Linux) or \"lib\" (Windows)\n  string(REPLACE \".\" \"\" libext \"${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n\n  set(_ldflags \"\")\n  set(LIBCURL_PC_LIBS_PRIVATE \"\")\n\n  # Filter CMAKE_SHARED_LINKER_FLAGS for libs and libpaths\n  string(STRIP \"${CMAKE_SHARED_LINKER_FLAGS}\" _custom_ldflags)\n  string(REGEX REPLACE \" +-([^ \\\\t;]*)\" \";-\\\\1\" _custom_ldflags \"${_custom_ldflags}\")\n\n  set(_custom_libs \"\")\n  set(_custom_libdirs \"\")\n  foreach(_flag IN LISTS _custom_ldflags)\n    if(_flag MATCHES \"^-l\")\n      string(REGEX REPLACE \"^-l\" \"\" _flag \"${_flag}\")\n      list(APPEND _custom_libs \"${_flag}\")\n    elseif(_flag MATCHES \"^-framework|^-F\")\n      list(APPEND _custom_libs \"${_flag}\")\n    elseif(_flag MATCHES \"^-L\")\n      string(REGEX REPLACE \"^-L\" \"\" _flag \"${_flag}\")\n      list(APPEND _custom_libdirs \"${_flag}\")\n    elseif(_flag MATCHES \"^--library-path=\")\n      string(REGEX REPLACE \"^--library-path=\" \"\" _flag \"${_flag}\")\n      list(APPEND _custom_libdirs \"${_flag}\")\n    endif()\n  endforeach()\n\n  # Avoid getting unnecessary -L options for known system directories.\n  set(_sys_libdirs \"\")\n  foreach(_libdir IN LISTS CMAKE_SYSTEM_PREFIX_PATH)\n    if(_libdir MATCHES \"/$\")\n      set(_libdir \"${_libdir}lib\")\n    else()\n      set(_libdir \"${_libdir}/lib\")\n    endif()\n    if(IS_DIRECTORY \"${_libdir}\")\n      list(APPEND _sys_libdirs \"${_libdir}\")\n    endif()\n    if(DEFINED CMAKE_LIBRARY_ARCHITECTURE)\n      set(_libdir \"${_libdir}/${CMAKE_LIBRARY_ARCHITECTURE}\")\n      if(IS_DIRECTORY \"${_libdir}\")\n        list(APPEND _sys_libdirs \"${_libdir}\")\n      endif()\n    endif()\n  endforeach()\n\n  foreach(_libdir IN LISTS _custom_libdirs CURL_LIBDIRS)\n    list(FIND _sys_libdirs \"${_libdir}\" _libdir_index)\n    if(_libdir_index LESS 0)\n      list(APPEND _ldflags \"-L${_libdir}\")\n    endif()\n  endforeach()\n\n  set(_implicit_libs \"\")\n  if(NOT MINGW AND NOT UNIX)\n    set(_implicit_libs ${CMAKE_C_IMPLICIT_LINK_LIBRARIES})\n  endif()\n\n  foreach(_lib IN LISTS _implicit_libs _custom_libs CURL_LIBS)\n    if(TARGET \"${_lib}\")\n      set(_libname \"${_lib}\")\n      get_target_property(_imported \"${_libname}\" IMPORTED)\n      if(NOT _imported)\n        # Reading the LOCATION property on non-imported target will error out.\n        # Assume the user will not need this information in the .pc file.\n        continue()\n      endif()\n      get_target_property(_lib \"${_libname}\" LOCATION)\n      if(NOT _lib)\n        message(WARNING \"Bad lib in library list: ${_libname}\")\n        continue()\n      endif()\n    endif()\n    if(_lib MATCHES \"^-\")  # '-framework <name>'\n      list(APPEND _ldflags \"${_lib}\")\n    elseif(_lib MATCHES \"/\")\n      # This gets a bit more complex, because we want to specify the\n      # directory separately, and only once per directory\n      get_filename_component(_libdir ${_lib} DIRECTORY)\n      get_filename_component(_libname ${_lib} NAME_WE)\n      if(_libname MATCHES \"^lib\")\n        list(FIND _sys_libdirs \"${_libdir}\" _libdir_index)\n        if(_libdir_index LESS 0)\n          list(APPEND _ldflags \"-L${_libdir}\")\n        endif()\n        string(REGEX REPLACE \"^lib\" \"\" _libname \"${_libname}\")\n        list(APPEND LIBCURL_PC_LIBS_PRIVATE \"-l${_libname}\")\n      else()\n        list(APPEND LIBCURL_PC_LIBS_PRIVATE \"${_lib}\")\n      endif()\n    else()\n      list(APPEND LIBCURL_PC_LIBS_PRIVATE \"-l${_lib}\")\n    endif()\n  endforeach()\n\n  if(LIBCURL_PC_REQUIRES_PRIVATE)\n    string(REPLACE \";\" \",\" LIBCURL_PC_REQUIRES_PRIVATE \"${LIBCURL_PC_REQUIRES_PRIVATE}\")\n  endif()\n  if(LIBCURL_PC_LIBS_PRIVATE)\n    string(REPLACE \";\" \" \" LIBCURL_PC_LIBS_PRIVATE \"${LIBCURL_PC_LIBS_PRIVATE}\")\n  endif()\n  if(_ldflags)\n    list(REMOVE_DUPLICATES _ldflags)\n    string(REPLACE \";\" \" \" _ldflags \"${_ldflags}\")\n    set(LIBCURL_PC_LDFLAGS_PRIVATE \"${_ldflags}\")\n    string(STRIP \"${LIBCURL_PC_LDFLAGS_PRIVATE}\" LIBCURL_PC_LDFLAGS_PRIVATE)\n  else()\n    set(LIBCURL_PC_LDFLAGS_PRIVATE \"\")\n  endif()\n  set(LIBCURL_PC_CFLAGS_PRIVATE \"-DCURL_STATICLIB\")\n\n  # Merge pkg-config private fields into public ones when static-only\n  if(BUILD_SHARED_LIBS)\n    set(ENABLE_SHARED       \"yes\")\n    set(LIBCURL_PC_REQUIRES \"\")\n    set(LIBCURL_PC_LIBS     \"\")\n    set(LIBCURL_PC_CFLAGS   \"\")\n  else()\n    set(ENABLE_SHARED       \"no\")\n    set(LIBCURL_PC_REQUIRES \"${LIBCURL_PC_REQUIRES_PRIVATE}\")\n    set(LIBCURL_PC_LIBS     \"${LIBCURL_PC_LIBS_PRIVATE}\")\n    set(LIBCURL_PC_CFLAGS   \"${LIBCURL_PC_CFLAGS_PRIVATE}\")\n  endif()\n  if(BUILD_STATIC_LIBS)\n    set(ENABLE_STATIC       \"yes\")\n  else()\n    set(ENABLE_STATIC       \"no\")\n  endif()\n\n  # Generate a \"curl-config\" matching this config.\n  # Consumed variables:\n  #   CC\n  #   CONFIGURE_OPTIONS\n  #   CURLVERSION\n  #   CURL_CA_BUNDLE\n  #   ENABLE_SHARED\n  #   ENABLE_STATIC\n  #   exec_prefix\n  #   includedir\n  #   LIBCURL_PC_CFLAGS\n  #   LIBCURL_PC_LDFLAGS_PRIVATE\n  #   LIBCURL_PC_LIBS_PRIVATE\n  #   libdir\n  #   libext\n  #   prefix\n  #   SSL_BACKENDS\n  #   SUPPORT_FEATURES\n  #   SUPPORT_PROTOCOLS\n  #   VERSIONNUM\n  configure_file(\n    \"${PROJECT_SOURCE_DIR}/curl-config.in\"\n    \"${PROJECT_BINARY_DIR}/curl-config\" @ONLY)\n  install(FILES \"${PROJECT_BINARY_DIR}/curl-config\"\n    DESTINATION ${CMAKE_INSTALL_BINDIR}\n    PERMISSIONS\n      OWNER_READ OWNER_WRITE OWNER_EXECUTE\n      GROUP_READ GROUP_EXECUTE\n      WORLD_READ WORLD_EXECUTE)\n\n  # Generate a pkg-config file matching this config.\n  # Consumed variables:\n  #   CURLVERSION\n  #   exec_prefix\n  #   includedir\n  #   LIBCURL_PC_CFLAGS\n  #   LIBCURL_PC_CFLAGS_PRIVATE\n  #   LIBCURL_PC_LDFLAGS_PRIVATE\n  #   LIBCURL_PC_LIBS\n  #   LIBCURL_PC_LIBS_PRIVATE\n  #   LIBCURL_PC_REQUIRES\n  #   LIBCURL_PC_REQUIRES_PRIVATE\n  #   libdir\n  #   prefix\n  #   SUPPORT_FEATURES\n  #   SUPPORT_PROTOCOLS\n  # Documentation:\n  #   https://people.freedesktop.org/~dbn/pkg-config-guide.html\n  #   https://manpages.debian.org/unstable/pkgconf/pkg-config.1.en.html\n  #   https://manpages.debian.org/unstable/pkg-config/pkg-config.1.en.html\n  #   https://www.msys2.org/docs/pkgconfig/\n  configure_file(\n    \"${PROJECT_SOURCE_DIR}/libcurl.pc.in\"\n    \"${PROJECT_BINARY_DIR}/libcurl.pc\" @ONLY)\n  install(FILES \"${PROJECT_BINARY_DIR}/libcurl.pc\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n\n  # Install headers\n  install(DIRECTORY \"${PROJECT_SOURCE_DIR}/include/curl\"\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n    FILES_MATCHING PATTERN \"*.h\")\n\n  include(CMakePackageConfigHelpers)\n  write_basic_package_version_file(\n    \"${_version_config}\"\n    VERSION ${_curl_version}\n    COMPATIBILITY SameMajorVersion)\n  file(READ \"${_version_config}\" _generated_version_config)\n  file(WRITE \"${_version_config}\" \"\n    if(NOT PACKAGE_FIND_VERSION_RANGE AND PACKAGE_FIND_VERSION_MAJOR STREQUAL \\\"7\\\")\n      # Version 8 satisfies version 7... requirements\n      set(PACKAGE_FIND_VERSION_MAJOR 8)\n      set(PACKAGE_FIND_VERSION_COUNT 1)\n    endif()\n    ${_generated_version_config}\")\n\n  # Consumed custom variables:\n  #   CURLVERSION\n  #   LIB_SELECTED\n  #   TARGETS_EXPORT_NAME\n  #   USE_OPENSSL\n  #   HAVE_LIBZ\n  #   CURL_SUPPORTED_FEATURES_LIST\n  #   CURL_SUPPORTED_PROTOCOLS_LIST\n  configure_package_config_file(\"CMake/curl-config.cmake.in\"\n    \"${_project_config}\"\n    INSTALL_DESTINATION ${_install_cmake_dir}\n    PATH_VARS CMAKE_INSTALL_INCLUDEDIR)\n\n  if(CURL_ENABLE_EXPORT_TARGET)\n    install(EXPORT \"${TARGETS_EXPORT_NAME}\"\n      NAMESPACE \"${PROJECT_NAME}::\"\n      DESTINATION ${_install_cmake_dir})\n  endif()\n\n  install(FILES ${_version_config} ${_project_config}\n    DESTINATION ${_install_cmake_dir})\n\n  # Workaround for MSVS10 to avoid the Dialog Hell\n  # FIXME: This could be removed with future version of CMake.\n  if(MSVC_VERSION EQUAL 1600)\n    set(_curl_sln_filename \"${CMAKE_CURRENT_BINARY_DIR}/CURL.sln\")\n    if(EXISTS \"${_curl_sln_filename}\")\n      file(APPEND \"${_curl_sln_filename}\" \"\\n# This should be regenerated!\\n\")\n    endif()\n  endif()\n\n  if(NOT TARGET curl_uninstall)\n    configure_file(\n      \"${CMAKE_CURRENT_SOURCE_DIR}/CMake/cmake_uninstall.cmake.in\"\n      \"${CMAKE_CURRENT_BINARY_DIR}/CMake/cmake_uninstall.cmake\"\n      @ONLY)\n\n    add_custom_target(curl_uninstall\n      COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_CURRENT_BINARY_DIR}/CMake/cmake_uninstall.cmake\")\n  endif()\n\n  install(FILES \"${PROJECT_SOURCE_DIR}/scripts/mk-ca-bundle.pl\"\n    DESTINATION ${CMAKE_INSTALL_BINDIR}\n    PERMISSIONS\n      OWNER_READ OWNER_WRITE OWNER_EXECUTE\n      GROUP_READ GROUP_EXECUTE\n      WORLD_READ WORLD_EXECUTE)\n\n  # The `-DEV` part is important\n  string(REGEX REPLACE \"([0-9]+\\.[0-9]+)\\.([0-9]+.*)\" \"\\\\2\" CPACK_PACKAGE_VERSION_PATCH \"${_curl_version}\")\n  set(CPACK_GENERATOR \"TGZ\")\n  include(CPack)\nendif()\n\n# Save build info for test runner to pick up and log\nif(CMAKE_OSX_SYSROOT)\n  set(_cmake_sysroot ${CMAKE_OSX_SYSROOT})\nelseif(CMAKE_SYSROOT)\n  set(_cmake_sysroot ${CMAKE_SYSROOT})\nendif()\nset(_buildinfo \"\\\nbuildinfo.configure.tool: cmake\nbuildinfo.configure.command: ${CMAKE_COMMAND}\nbuildinfo.configure.version: ${CMAKE_VERSION}\nbuildinfo.configure.args:${_cmake_args}\nbuildinfo.configure.generator: ${CMAKE_GENERATOR}\nbuildinfo.configure.make: ${CMAKE_MAKE_PROGRAM}\nbuildinfo.host.cpu: ${CMAKE_HOST_SYSTEM_PROCESSOR}\nbuildinfo.host.os: ${CMAKE_HOST_SYSTEM_NAME}\nbuildinfo.target.cpu: ${CMAKE_SYSTEM_PROCESSOR}\nbuildinfo.target.os: ${CMAKE_SYSTEM_NAME}\nbuildinfo.target.flags:${_target_flags}\nbuildinfo.compiler: ${CMAKE_C_COMPILER_ID}\nbuildinfo.compiler.version: ${CMAKE_C_COMPILER_VERSION}\nbuildinfo.sysroot: ${_cmake_sysroot}\n\")\nfile(WRITE \"${PROJECT_BINARY_DIR}/buildinfo.txt\" \"# This is a generated file.  Do not edit.\\n${_buildinfo}\")\nif(NOT \"$ENV{CURL_BUILDINFO}$ENV{CURL_CI}$ENV{CI}\" STREQUAL \"\")\n  message(STATUS \"\\n${_buildinfo}\")\nendif()\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.06,
          "content": "COPYRIGHT AND PERMISSION NOTICE\n\nCopyright (c) 1996 - 2025, Daniel Stenberg, <daniel@haxx.se>, and many\ncontributors, see the THANKS file.\n\nAll rights reserved.\n\nPermission to use, copy, modify, and distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright\nnotice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\nOR OTHER DEALINGS IN THE SOFTWARE.\n\nExcept as contained in this notice, the name of a copyright holder shall not\nbe used in advertising or otherwise to promote the sale, use or other dealings\nin this Software without prior written authorization of the copyright holder.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.67,
          "content": "# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n#\n# SPDX-License-Identifier: curl\n\n# Self-contained build environment to match the release environment.\n#\n# Build and set the timestamp for the date corresponding to the release\n#\n#   docker build --build-arg SOURCE_DATE_EPOCH=1711526400 --build-arg UID=$(id -u) --build-arg GID=$(id -g) -t curl/curl .\n#\n# Then run commands from within the build environment, for example\n#\n#   docker run --rm -it -u $(id -u):$(id -g) -v $(pwd):/usr/src -w /usr/src curl/curl autoreconf -fi\n#   docker run --rm -it -u $(id -u):$(id -g) -v $(pwd):/usr/src -w /usr/src curl/curl ./configure --without-ssl --without-libpsl\n#   docker run --rm -it -u $(id -u):$(id -g) -v $(pwd):/usr/src -w /usr/src curl/curl make\n#   docker run --rm -it -u $(id -u):$(id -g) -v $(pwd):/usr/src -w /usr/src curl/curl ./scripts/maketgz 8.7.1\n#\n# or get into a shell in the build environment, for example\n#\n#   docker run --rm -it -u $(id -u):$(id -g) -v (pwd):/usr/src -w /usr/src curl/curl bash\n#   $ autoreconf -fi\n#   $ ./configure --without-ssl --without-libpsl\n#   $ make\n#   $ ./scripts/maketgz 8.7.1\n\n# To update, get the latest digest e.g. from https://hub.docker.com/_/debian/tags\nFROM debian:bookworm-slim@sha256:b73bf02f32434c9be21adf83b9aedf33e731784d8d2dacbbd3ce5f4993f2a2de\n\nRUN apt-get update -qq && apt-get install -qq -y --no-install-recommends \\\n    build-essential make autoconf automake libtool git perl zip zlib1g-dev gawk && \\\n    rm -rf /var/lib/apt/lists/*\n\nARG UID=1000 GID=1000\n\nRUN groupadd --gid $UID dev && \\\n    useradd --uid $UID --gid dev --shell /bin/bash --create-home dev\n\nUSER dev:dev\n\nARG SOURCE_DATE_EPOCH\nENV SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH:-1}\n"
        },
        {
          "name": "GIT-INFO.md",
          "type": "blob",
          "size": 0.9,
          "content": "                                  _   _ ____  _\n                              ___| | | |  _ \\| |\n                             / __| | | | |_) | |\n                            | (__| |_| |  _ <| |___\n                             \\___|\\___/|_| \\_\\_____|\n\n# GIT-INFO\n\nThis file is only present in git - never in release archives. It contains\ninformation about other files and things that the git repository keeps in its\ninner sanctum.\n\nTo build in environments that support configure, after having extracted\neverything from git, do this:\n\n    autoreconf -fi\n    ./configure --with-openssl\n    make\n\nDaniel uses a configure line similar to this for easier development:\n\n    ./configure --disable-shared --enable-debug --enable-maintainer-mode\n\nIn environments that do not support configure (i.e. Windows), do this:\n\n    buildconf.bat\n\n## REQUIREMENTS\n\nSee [docs/INTERNALS.md][0] for requirement details.\n\n[0]: docs/INTERNALS.md\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 6.87,
          "content": "#***************************************************************************\n#                                  _   _ ____  _\n#  Project                     ___| | | |  _ \\| |\n#                             / __| | | | |_) | |\n#                            | (__| |_| |  _ <| |___\n#                             \\___|\\___/|_| \\_\\_____|\n#\n# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n#\n# This software is licensed as described in the file COPYING, which\n# you should have received as part of this distribution. The terms\n# are also available at https://curl.se/docs/copyright.html.\n#\n# You may opt to use, copy, modify, merge, publish, distribute and/or sell\n# copies of the Software, and permit persons to whom the Software is\n# furnished to do so, under the terms of the COPYING file.\n#\n# This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\n# KIND, either express or implied.\n#\n# SPDX-License-Identifier: curl\n#\n###########################################################################\n\nAUTOMAKE_OPTIONS = foreign\n\nACLOCAL_AMFLAGS = -I m4\n\nCMAKE_DIST =                                    \\\n CMake/cmake_uninstall.cmake.in                 \\\n CMake/CMakeConfigurableFile.in                 \\\n CMake/curl-config.cmake.in                     \\\n CMake/CurlSymbolHiding.cmake                   \\\n CMake/CurlTests.c                              \\\n CMake/FindBearSSL.cmake                        \\\n CMake/FindBrotli.cmake                         \\\n CMake/FindCares.cmake                          \\\n CMake/FindGSS.cmake                            \\\n CMake/FindLDAP.cmake                           \\\n CMake/FindLibgsasl.cmake                       \\\n CMake/FindLibidn2.cmake                        \\\n CMake/FindLibpsl.cmake                         \\\n CMake/FindLibrtmp.cmake                        \\\n CMake/FindLibssh.cmake                         \\\n CMake/FindLibssh2.cmake                        \\\n CMake/FindLibuv.cmake                          \\\n CMake/FindMbedTLS.cmake                        \\\n CMake/FindMSH3.cmake                           \\\n CMake/FindMbedTLS.cmake                        \\\n CMake/FindNGHTTP2.cmake                        \\\n CMake/FindNGHTTP3.cmake                        \\\n CMake/FindNGTCP2.cmake                         \\\n CMake/FindNettle.cmake                         \\\n CMake/FindQuiche.cmake                         \\\n CMake/FindRustls.cmake                         \\\n CMake/FindWolfSSH.cmake                        \\\n CMake/FindWolfSSL.cmake                        \\\n CMake/FindZstd.cmake                           \\\n CMake/Macros.cmake                             \\\n CMake/OtherTests.cmake                         \\\n CMake/PickyWarnings.cmake                      \\\n CMake/Utilities.cmake                          \\\n CMake/win32-cache.cmake                        \\\n CMakeLists.txt\n\nVC_DIST = projects/README.md                           \\\n projects/build-openssl.bat                            \\\n projects/checksrc.bat                                 \\\n projects/generate.bat\n\nWINBUILD_DIST = winbuild/README.md \\\n winbuild/MakefileBuild.vc winbuild/Makefile.vc winbuild/makedebug.bat\n\nPLAN9_DIST = plan9/include/mkfile \\\n plan9/include/mkfile             \\\n plan9/mkfile.proto               \\\n plan9/mkfile                     \\\n plan9/README                     \\\n plan9/lib/mkfile.inc             \\\n plan9/lib/mkfile                 \\\n plan9/src/mkfile.inc             \\\n plan9/src/mkfile\n\nEXTRA_DIST = CHANGES.md COPYING Makefile.dist             \\\n RELEASE-NOTES $(CMAKE_DIST) $(VC_DIST) $(WINBUILD_DIST)  \\\n $(PLAN9_DIST) buildconf.bat Dockerfile\n\nDISTCLEANFILES = buildinfo.txt\n\nbin_SCRIPTS = curl-config\n\nSUBDIRS = lib docs src scripts\nDIST_SUBDIRS = $(SUBDIRS) tests packages include docs\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = libcurl.pc\n\ndist-hook:\n\trm -rf $(top_builddir)/tests/log\n\tfind $(distdir) -name \"*.dist\" -a \\! -name Makefile.dist -exec rm {} \\;\n\t(distit=`find $(srcdir) -name \"*.dist\" | grep -v Makefile`; \\\n\tfor file in $$distit; do \\\n\t  strip=`echo $$file | sed -e s/^$(srcdir)// -e s/\\.dist//`; \\\n\t  cp -p $$file $(distdir)$$strip; \\\n\tdone)\n\ncheck: test examples check-docs\n\nif CROSSCOMPILING\ntest-full: test\ntest-nonflaky: test\ntest-torture: test\ntest-event: test\ntest-am: test\ntest-ci: test\npytest: test\npytest-ci: test\n\ntest:\n\t@echo \"NOTICE: we can't run the tests when cross-compiling!\"\n\nelse\n\ntest:\n\t@(cd tests; $(MAKE) all quiet-test)\n\ntest-full:\n\t@(cd tests; $(MAKE) all full-test)\n\ntest-nonflaky:\n\t@(cd tests; $(MAKE) all nonflaky-test)\n\ntest-torture:\n\t@(cd tests; $(MAKE) all torture-test)\n\ntest-event:\n\t@(cd tests; $(MAKE) all event-test)\n\ntest-am:\n\t@(cd tests; $(MAKE) all am-test)\n\ntest-ci:\n\t@(cd tests; $(MAKE) all ci-test)\n\npytest:\n\t@(cd tests; $(MAKE) all default-pytest)\n\npytest-ci:\n\t@(cd tests; $(MAKE) all ci-pytest)\n\nendif\n\nexamples:\n\t@(cd docs/examples; $(MAKE) check)\n\ncheck-docs:\n\t@(cd docs/libcurl; $(MAKE) check)\n\n# Build source and binary rpms. For rpm-3.0 and above, the ~/.rpmmacros\n# must contain the following line:\n# %_topdir /home/loic/local/rpm\n# and that /home/loic/local/rpm contains the directory SOURCES, BUILD etc.\n#\n# cd /home/loic/local/rpm ; mkdir -p SOURCES BUILD RPMS/i386 SPECS SRPMS\n#\n# If additional configure flags are needed to build the package, add the\n# following in ~/.rpmmacros\n# %configure CFLAGS=\"%{optflags}\" ./configure %{_target_platform} --prefix=%{_prefix} ${AM_CONFIGFLAGS}\n# and run make rpm in the following way:\n# AM_CONFIGFLAGS='--with-uri=/home/users/loic/local/RedHat-6.2' make rpm\n#\n\nrpms:\n\t$(MAKE) RPMDIST=curl rpm\n\t$(MAKE) RPMDIST=curl-ssl rpm\n\nrpm:\n\tRPM_TOPDIR=`rpm --showrc | $(PERL) -n -e 'print if(s/.*_topdir\\s+(.*)/$$1/)'` ; \\\n\tcp $(srcdir)/packages/Linux/RPM/$(RPMDIST).spec $$RPM_TOPDIR/SPECS ; \\\n\tcp $(PACKAGE)-$(VERSION).tar.gz $$RPM_TOPDIR/SOURCES ; \\\n\trpm -ba --clean --rmsource $$RPM_TOPDIR/SPECS/$(RPMDIST).spec ; \\\n\tmv $$RPM_TOPDIR/RPMS/i386/$(RPMDIST)-*.rpm . ; \\\n\tmv $$RPM_TOPDIR/SRPMS/$(RPMDIST)-*.src.rpm .\n\n# We extend the standard install with a custom hook:\nif BUILD_DOCS\ninstall-data-hook:\n\t(cd include && $(MAKE) install)\n\t(cd docs && $(MAKE) install)\n\t(cd docs/libcurl && $(MAKE) install)\nelse\ninstall-data-hook:\n\t(cd include && $(MAKE) install)\n\t(cd docs && $(MAKE) install)\nendif\n\n# We extend the standard uninstall with a custom hook:\nuninstall-hook:\n\t(cd include && $(MAKE) uninstall)\n\t(cd docs && $(MAKE) uninstall)\n\t(cd docs/libcurl && $(MAKE) uninstall)\n\nca-bundle: $(srcdir)/scripts/mk-ca-bundle.pl\n\t@echo \"generating a fresh ca-bundle.crt\"\n\t@perl $(srcdir)/scripts/mk-ca-bundle.pl -b -l -u lib/ca-bundle.crt\n\nca-firefox: $(srcdir)/scripts/firefox-db2pem.sh\n\t@echo \"generating a fresh ca-bundle.crt\"\n\t$(srcdir)/scripts/firefox-db2pem.sh lib/ca-bundle.crt\n\nchecksrc:\n\t(cd lib && $(MAKE) checksrc)\n\t(cd src && $(MAKE) checksrc)\n\t(cd tests && $(MAKE) checksrc)\n\t(cd include/curl && $(MAKE) checksrc)\n\t(cd docs/examples && $(MAKE) checksrc)\n\t(cd packages && $(MAKE) checksrc)\n\ntidy:\n\t(cd src && $(MAKE) tidy)\n\t(cd lib && $(MAKE) tidy)\n"
        },
        {
          "name": "Makefile.dist",
          "type": "blob",
          "size": 1.53,
          "content": "#***************************************************************************\n#                                  _   _ ____  _\n#  Project                     ___| | | |  _ \\| |\n#                             / __| | | | |_) | |\n#                            | (__| |_| |  _ <| |___\n#                             \\___|\\___/|_| \\_\\_____|\n#\n# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n#\n# This software is licensed as described in the file COPYING, which\n# you should have received as part of this distribution. The terms\n# are also available at https://curl.se/docs/copyright.html.\n#\n# You may opt to use, copy, modify, merge, publish, distribute and/or sell\n# copies of the Software, and permit persons to whom the Software is\n# furnished to do so, under the terms of the COPYING file.\n#\n# This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\n# KIND, either express or implied.\n#\n# SPDX-License-Identifier: curl\n#\n###########################################################################\n\nall:\n\t./configure\n\tmake\n\nssl:\n\t./configure --with-openssl\n\tmake\n\nvc:\n\tcd winbuild\n\tnmake /f Makefile.vc MACHINE=x86\n\nvc-x64:\n\tcd winbuild\n\tnmake /f Makefile.vc MACHINE=x64\n\ncygwin:\n\t./configure\n\tmake\n\ncygwin-ssl:\n\t./configure --with-openssl\n\tmake\n\nunix: all\n\nunix-ssl: ssl\n\nlinux: all\n\nlinux-ssl: ssl\n\nca-bundle: scripts/mk-ca-bundle.pl\n\t@echo \"generate a fresh ca-bundle.crt\"\n\t@perl $< -b -l -u lib/ca-bundle.crt\n\nca-firefox: scripts/firefox-db2pem.sh\n\t@echo \"generate a fresh ca-bundle.crt\"\n\t./scripts/firefox-db2pem.sh lib/ca-bundle.crt\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 1.63,
          "content": "                                  _   _ ____  _\n                              ___| | | |  _ \\| |\n                             / __| | | | |_) | |\n                            | (__| |_| |  _ <| |___\n                             \\___|\\___/|_| \\_\\_____|\n\nREADME\n\n  Curl is a command line tool for transferring data specified with URL\n  syntax. Find out how to use curl by reading the curl.1 man page or the\n  MANUAL document. Find out how to install Curl by reading the INSTALL\n  document.\n\n  libcurl is the library curl is using to do its job. It is readily\n  available to be used by your software. Read the libcurl.3 man page to\n  learn how.\n\n  You find answers to the most frequent questions we get in the FAQ document.\n\n  Study the COPYING file for distribution terms.\n\n  Those documents and more can be found in the docs/ directory.\n\nCONTACT\n\n  If you have problems, questions, ideas or suggestions, please contact us\n  by posting to a suitable mailing list. See https://curl.se/mail/\n\n  All contributors to the project are listed in the THANKS document.\n\nWEBSITE\n\n  Visit the curl website for the latest news and downloads:\n\n        https://curl.se/\n\nGIT\n\n  To download the latest source code off the GIT server, do this:\n\n    git clone https://github.com/curl/curl.git\n\n  (you will get a directory named curl created, filled with the source code)\n\nSECURITY PROBLEMS\n\n  Report suspected security problems via our HackerOne page and not in public.\n\n    https://hackerone.com/curl\n\nNOTICE\n\n  Curl contains pieces of source code that is Copyright (c) 1998, 1999\n  Kungliga Tekniska Högskolan. This notice is included here to comply with the\n  distribution terms.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2,
          "content": "<!--\nCopyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n\nSPDX-License-Identifier: curl\n-->\n\n# [![curl logo](https://curl.se/logo/curl-logo.svg)](https://curl.se/)\n\ncurl is a command-line tool for transferring data specified with URL syntax.\nLearn how to use curl by reading [the\nmanpage](https://curl.se/docs/manpage.html) or [everything\ncurl](https://everything.curl.dev/).\n\nFind out how to install curl by reading [the INSTALL\ndocument](https://curl.se/docs/install.html).\n\nlibcurl is the library curl is using to do its job. It is readily available to\nbe used by your software. Read [the libcurl\nmanpage](https://curl.se/libcurl/c/libcurl.html) to learn how.\n\n## Open Source\n\ncurl is Open Source and is distributed under an MIT-like\n[license](https://curl.se/docs/copyright.html).\n\n## Contact\n\nContact us on a suitable [mailing list](https://curl.se/mail/) or\nuse GitHub [issues](https://github.com/curl/curl/issues)/\n[pull requests](https://github.com/curl/curl/pulls)/\n[discussions](https://github.com/curl/curl/discussions).\n\nAll contributors to the project are listed in [the THANKS\ndocument](https://curl.se/docs/thanks.html).\n\n## Commercial support\n\nFor commercial support, maybe private and dedicated help with your problems or\napplications using (lib)curl visit [the support page](https://curl.se/support.html).\n\n## Website\n\nVisit the [curl website](https://curl.se/) for the latest news and downloads.\n\n## Source code\n\nDownload the latest source from the Git server:\n\n    git clone https://github.com/curl/curl.git\n\n## Security problems\n\nReport suspected security problems via [our HackerOne\npage](https://hackerone.com/curl) and not in public.\n\n## Notice\n\ncurl contains pieces of source code that is Copyright (c) 1998, 1999 Kungliga\nTekniska Högskolan. This notice is included here to comply with the\ndistribution terms.\n\n## Backers\n\nThank you to all our backers 🙏 [Become a backer](https://opencollective.com/curl#section-contribute).\n\n## Sponsors\n\nSupport this project by becoming a [sponsor](https://curl.se/sponsors.html).\n"
        },
        {
          "name": "RELEASE-NOTES",
          "type": "blob",
          "size": 14.57,
          "content": "curl and libcurl 8.12.0\n\n Public curl releases:         264\n Command line options:         267\n curl_easy_setopt() options:   306\n Public functions in libcurl:  96\n Contributors:                 3320\n\nThis release includes the following changes:\n\n o curl: add byte range support to --variable reading from file [56]\n o curl: make --etag-save acknowledge --create-dirs [31]\n o getinfo: fix CURLINFO_QUEUE_TIME_T and add 'time_queue' var [55]\n o getinfo: provide info which auth was used for HTTP and proxy [40]\n o hyper: drop support [57]\n o openssl: add support to use keys and certificates from PKCS#11 provider [77]\n o QUIC: 0RTT for gnutls via CURLSSLOPT_EARLYDATA [61]\n o vtls: feature ssls-export for SSL session im-/export [141]\n\nThis release includes the following bugfixes:\n\n o altsvc: avoid integer overflow in expire calculation [16]\n o async-thread: avoid closing eventfd twice [9]\n o autotools: silence gcc warnings in libtool code [96]\n o binmode: convert to macro and use it from tests [44]\n o build: delete `-Wsign-conversion` related FIXMEs [137]\n o build: drop `-Winline` picky warning [53]\n o build: drop unused feature macros, update exception list [51]\n o build: fix the tidy targets for autotools [52]\n o build: fix unsigned `time_t` detection for cmake, MS-DOS, AmigaOS [104]\n o build: replace configure check with PP condition (Android <21) [97]\n o cd2nroff: support \"none\" as a TLS backend [29]\n o cf-socket: error if address can't be copied [72]\n o checksrc: ban use of sscanf() [7]\n o checksrc: fix the return() checker [35]\n o checksrc: introduce 'banfunc' to ban specific functions [117]\n o cmake/FindLDAP: avoid empty 'Requires' item when omitting `pkg-config` module [90]\n o cmake/FindLDAP: avoid framework locations for libs too (Apple) [122]\n o cmake/FindLibpsl: protect against `pkg-config` \"half-detection\" [89]\n o cmake/FindLibssh: sync header comment with other modules\n o cmake/FindMbedTLS: drop lib duplicates early [17]\n o cmake: add `librtmp` Find module [86]\n o cmake: add LDAP Find module [46]\n o cmake: add native `pkg-config` detection for remaining Find modules [37]\n o cmake: allow `CURL_LTO` regardless of `CURL_BUILD_TYPE`, enable in CI [88]\n o cmake: clang-cl improvements [42]\n o cmake: delete accidental debug message\n o cmake: drop duplicate Windows cache value [81]\n o cmake: drop redundant FOUND checks (libgsasl, libssh, libuv) [49]\n o cmake: drop redundant opening/closing `.*` from `MATCH` expressions [64]\n o cmake: drop unused `HAVE_SYS_XATTR_H` detection [79]\n o cmake: extend zlib's `AUTO` option to brotli, zstd and enable if found [36]\n o cmake: fix `net/in.h` detection for MS-DOS [103]\n o cmake: improve `curl_dumpvars()` and move to `Utilities.cmake` [50]\n o cmake: make libpsl required by default [45]\n o cmake: make system libraries `dl`, `m`, `pthread` customizable [123]\n o cmake: move `pkg-config` names to Find modules [87]\n o cmake: move GSS init before feature detections [93]\n o cmake: namespace functions and macros [41]\n o cmake: optimize out 4 picky warning option detections with gcc [78]\n o cmake: pre-fill `HAVE_STDINT_H` on Windows [149]\n o cmake: publish/check supported protocols/features via `CURLConfig.cmake` [100]\n o cmake: replace `unset(VAR)` with `set(VAR \"\")` for init [43]\n o cmake: sync OpenSSL QUIC fork detection with autotools [102]\n o cmake: use `CMAKE_REQUIRED_LINK_DIRECTORIES` [48]\n o cmake: use `STREQUAL` to detect Linux [68]\n o completion.pl: add completion for paths after @ for fish [82]\n o config-mac: drop `MACOS_SSL_SUPPORT` macro [63]\n o configure: drop unused detections and macros [105]\n o conncache: count shutdowns against host and max limits [154]\n o conncache: result_cb comment removed from function docs [1]\n o content_encoding: namespace GZIP flag constants [147]\n o cookie: cap expire times to 400 days [111]\n o cookie: fix crash in netscape cookie parsing [84]\n o cookie: parse only the exact expire date [3]\n o curl: return error if etag options are used with multiple URLs [5]\n o curl_multibyte: support Windows paths longer than MAX_PATH [76]\n o curl_sha512_256: rename symbols to the curl namespace [124]\n o curl_url_set.md: adjust the added-in to 7.62.0 [94]\n o curl_ws_recv.md: fix typo\n o CURLOPT_PROXY.md: clarify the crendential support in proxy URLs [66]\n o CURLOPT_RESOLVE.md: fix wording [30]\n o CURLOPT_SEEKFUNCTION.md: used for FTP, HTTP and SFTP (only) [109]\n o docs/BUGS.md: remove leading space from a link\n o docs/cmdline-opts/_ENVIRONMENT.md: minor language fix [119]\n o docs/HTTP-COOKIES.md: link to more information [125]\n o docs/libcurl/opts: clarify the return values [114]\n o docs/libcurl: return value overhall [120]\n o docs: use lowercase curl and libcurl [113]\n o ECH: update APIs to those agreed with OpenSSL maintainers [101]\n o examples/block-ip: drop redundant `memory.h` include\n o examples/block-ip: show how to block IP addresses [74]\n o examples/complicated: fix warnings, bump deprecated callback, tidy up [59]\n o examples/synctime.c: remove references to dead URLs and functionality [62]\n o examples: make them compile with compatibility functions disabled (Windows) [58]\n o file: drop `OPEN_NEEDS_ARG3` option [91]\n o file: fix Android compiler warning [85]\n o GnuTLS: fix 'time_appconnect' for early data [127]\n o hash: add asserts in hash_element_dtor() [126]\n o HTTP/2: strip TE request header [140]\n o http2: fix value stored to 'result' is never read [71]\n o http: fix build with `CURL_DISABLE_COOKIES` [95]\n o http: ignore invalid Retry-After times [107]\n o http_aws_sigv4: Fix invalid compare function handling zero-length pairs [24]\n o INFRASTRUCTURE.md: project infra [99]\n o lib517: extend the getdate test with quotes and leading \"junk\" [4]\n o lib: remove `__EMX__` guards [83]\n o lib: replace `inline` redefine with `CURL_INLINE` macro [47]\n o lib: supress deprecation warnings in apple builds [32]\n o lib: TLS session ticket caching reworked [60]\n o Makefile.mk: drop in favour of autotools and cmake (MS-DOS, AmigaOS3) [38]\n o mbedtls: fix handling of blocked sends [116]\n o mime: explicitly rewind subparts at attachment time. [80]\n o msvc: drop checks for ancient versions [133]\n o msvc: fix building with `HAVE_INET_NTOP` and MSVC <=1900 [151]\n o multi: fix curl_multi_waitfds reporting of fd_count [73]\n o multi: fix return code for an already-removed easy handle [106]\n o multissl: auto-enable `OPENSSL_COEXIST` for wolfSSL + OpenSSL [92]\n o multissl: make openssl + wolfssl builds work [34]\n o netrc: 'default' with no credentials is not a match [108]\n o netrc: fix password-only entries [28]\n o netrc: restore _netrc fallback logic [6]\n o ngtcp2: fix two cases of value stored never read [65]\n o openssl: fix ECH logic [67]\n o osslq: use SSL_poll to determine writeability of QUIC streams [139]\n o projects/Windows: remove wolfSSL from legacy projects [75]\n o RELEASE-PROCEDURE.md: mention how to publish security advisories [2]\n o scripts/mdlinkcheck: markdown link checker [19]\n o sectransp: free certificate on error [12]\n o select: avoid a NULL deref in cwfds_add_sock [128]\n o smb: fix compiler warning [112]\n o src: add `CURL_STRICMP()` macro, use `_stricmp()` on Windows [54]\n o src: drop support for `CURL_TESTDIR` debug env [121]\n o strparse: string parsing helper functions [8]\n o system.h: add 64-bit curl_off_t definitions for NonStop [11]\n o test483: require cookie support [98]\n o tests/http/clients: use proper sleep() call on NonStop [10]\n o TheArtOfHttpScripting.md: rewrite double 'that' [115]\n o tool_formparse.c: make curlx_uztoso a static in here [39]\n o tool_formparse: accept digits in --form type= strings [33]\n o tool_getparam: fix \"Ignored Return Value\" [21]\n o tool_getparam: fix memory leak on error in parse_ech [14]\n o tool_getparam: fix the ECH parser [20]\n o tool_operate: make --etag-compare always accept a non-existing file [22]\n o urlapi: fix redirect to a new fragment or query (only) [118]\n o variable.md: mention --expand-variable for variables to variables [13]\n o variable.md: show function use with examples [18]\n o vquic: fix 4th function call argument is an uninitialized value [70]\n o vquic: make vquic_send_packets not return without setting psent [69]\n o vtls: only remember the expiry timestamp in session cache [110]\n o vtls: remove 'detach/attach' functions from TLS handler struct [25]\n o vtls: remove unusued 'check_cxn' from TLS handler struct [26]\n o vtls: replace \"none\"-functions with NULL pointers [27]\n o VULN-DISCLOSURE-POLICY.md: mention the not setting CVSS [23]\n o ws-docs: remove the outdated texts saying ws support is experimental [15]\n\nThis release includes the following known bugs:\n\n See docs/KNOWN_BUGS (https://curl.se/docs/knownbugs.html)\n\nFor all changes ever done in curl:\n\n See https://curl.se/changes.html\n\nPlanned upcoming removals include:\n\n o Support for the msh3 HTTP/3 backend\n o TLS libraries not supporting TLS 1.3\n\n See https://curl.se/dev/deprecate.html for details\n\nThis release would not have looked like this without help, code, reports and\nadvice from friends like these:\n\n  Andy Pan, Asger Hautop Drewsen, baranyaib90 on github, Ben Zanin,\n  Christian Heusel, Christian Schmitz, Christopher Dannemiller,\n  Daniel Stenberg, Darren Banfi, dependabot[bot], Derek Huang, dwickr,\n  Ganesh Viswanathan, Hermes Zhang, IcedCoffeee on github, Jakub Jelen,\n  Jeroen Ooms, Jiri Stary, Kai Pastor, Kevin Sun, Kuan-Wei Chiu,\n  Manuel Einfalt, Marcel Raad, Mohammed Sadiq, Neil Horman, Patrick Monnerat,\n  prpr19xx on github, Qriist on github, Ralph Sennhauser, Randall S. Becker,\n  Ray Satiro, renovate[bot], Rudi Heitbaum, Samuel Henrique, Stefan Eissing,\n  Stephen Farrell, Tal Regev, Tamás Bálint Misius, Tamir Duberstein,\n  Viktor Szakats, Yedaya Katsman, Yihang Zhou\n  (42 contributors)\n\nReferences to bug reports and discussions on issues:\n\n [1] = https://curl.se/bug/?i=15720\n [2] = https://curl.se/bug/?i=15714\n [3] = https://curl.se/bug/?i=15709\n [4] = https://curl.se/bug/?i=15708\n [5] = https://curl.se/bug/?i=15729\n [6] = https://curl.se/bug/?i=15734\n [7] = https://curl.se/bug/?i=15687\n [8] = https://curl.se/bug/?i=15692\n [9] = https://curl.se/bug/?i=15725\n [10] = https://curl.se/bug/?i=15711\n [11] = https://curl.se/bug/?i=15723\n [12] = https://curl.se/bug/?i=15721\n [13] = https://curl.se/bug/?i=15752\n [14] = https://curl.se/bug/?i=15753\n [15] = https://curl.se/bug/?i=15749\n [16] = https://issues.oss-fuzz.com/issues/383911309\n [17] = https://curl.se/bug/?i=15495\n [18] = https://curl.se/bug/?i=15743\n [19] = https://curl.se/bug/?i=15742\n [20] = https://curl.se/bug/?i=15741\n [21] = https://curl.se/bug/?i=15740\n [22] = https://curl.se/bug/?i=15737\n [23] = https://curl.se/bug/?i=15779\n [24] = https://curl.se/bug/?i=15778\n [25] = https://curl.se/bug/?i=15776\n [26] = https://curl.se/bug/?i=15775\n [27] = https://curl.se/bug/?i=15772\n [28] = https://curl.se/bug/?i=15767\n [29] = https://curl.se/bug/?i=15769\n [30] = https://curl.se/bug/?i=15770\n [31] = https://curl.se/bug/?i=15730\n [32] = https://curl.se/bug/?i=15763\n [33] = https://curl.se/bug/?i=15761\n [34] = https://curl.se/bug/?i=15596\n [35] = https://curl.se/bug/?i=15764\n [36] = https://curl.se/bug/?i=15431\n [37] = https://curl.se/bug/?i=15408\n [38] = https://curl.se/bug/?i=15543\n [39] = https://curl.se/bug/?i=15796\n [40] = https://curl.se/bug/?i=15450\n [41] = https://curl.se/bug/?i=15498\n [42] = https://curl.se/bug/?i=15478\n [43] = https://curl.se/bug/?i=15255\n [44] = https://curl.se/bug/?i=15787\n [45] = https://curl.se/bug/?i=15464\n [46] = https://curl.se/bug/?i=15273\n [47] = https://curl.se/bug/?i=15523\n [48] = https://curl.se/bug/?i=15280\n [49] = https://curl.se/bug/?i=15465\n [50] = https://curl.se/bug/?i=15562\n [51] = https://curl.se/bug/?i=15577\n [52] = https://curl.se/bug/?i=15813\n [53] = https://curl.se/bug/?i=15815\n [54] = https://curl.se/bug/?i=15788\n [55] = https://curl.se/bug/?i=15512\n [56] = https://curl.se/bug/?i=15739\n [57] = https://curl.se/bug/?i=15120\n [58] = https://curl.se/bug/?i=15789\n [59] = https://curl.se/bug/?i=15785\n [60] = https://curl.se/bug/?i=15774\n [61] = https://curl.se/bug/?i=15667\n [62] = https://curl.se/bug/?i=15786\n [63] = https://curl.se/bug/?i=15777\n [64] = https://curl.se/bug/?i=15773\n [65] = https://curl.se/bug/?i=15812\n [66] = https://curl.se/bug/?i=15805\n [67] = https://curl.se/bug/?i=15814\n [68] = https://curl.se/bug/?i=15855\n [69] = https://curl.se/bug/?i=15807\n [70] = https://curl.se/bug/?i=15808\n [71] = https://curl.se/bug/?i=15806\n [72] = https://curl.se/bug/?i=15784\n [73] = https://curl.se/bug/?i=15146\n [74] = https://curl.se/bug/?i=15748\n [75] = https://curl.se/bug/?i=15468\n [76] = https://curl.se/bug/?i=13522\n [77] = https://curl.se/bug/?i=15587\n [78] = https://curl.se/bug/?i=15850\n [79] = https://curl.se/bug/?i=15845\n [80] = https://curl.se/bug/?i=15842\n [81] = https://curl.se/bug/?i=15840\n [82] = https://curl.se/bug/?i=15928\n [83] = https://curl.se/bug/?i=15884\n [84] = https://curl.se/bug/?i=15826\n [85] = https://curl.se/bug/?i=15883\n [86] = https://curl.se/bug/?i=15832\n [87] = https://curl.se/bug/?i=15800\n [88] = https://curl.se/bug/?i=15829\n [89] = https://curl.se/bug/?i=15827\n [90] = https://curl.se/bug/?i=15828\n [91] = https://curl.se/bug/?i=15882\n [92] = https://curl.se/bug/?i=15765\n [93] = https://curl.se/bug/?i=15809\n [94] = https://curl.se/bug/?i=15822\n [95] = https://curl.se/bug/?i=15820\n [96] = https://curl.se/bug/?i=15915\n [97] = https://curl.se/bug/?i=15871\n [98] = https://curl.se/bug/?i=15876\n [99] = https://curl.se/bug/?i=15906\n [100] = https://curl.se/bug/?i=15854\n [101] = https://curl.se/bug/?i=15945\n [102] = https://curl.se/bug/?i=15873\n [103] = https://curl.se/bug/?i=15869\n [104] = https://curl.se/bug/?i=15868\n [105] = https://curl.se/bug/?i=15867\n [106] = https://curl.se/bug/?i=15844\n [107] = https://curl.se/bug/?i=15833\n [108] = https://curl.se/bug/?i=15908\n [109] = https://curl.se/bug/?i=15903\n [110] = https://curl.se/bug/?i=15861\n [111] = https://curl.se/bug/?i=15937\n [112] = https://curl.se/bug/?i=15902\n [113] = https://curl.se/bug/?i=15898\n [114] = https://curl.se/bug/?i=15900\n [115] = https://curl.se/bug/?i=15863\n [116] = https://curl.se/bug/?i=15801\n [117] = https://curl.se/bug/?i=15835\n [118] = https://curl.se/bug/?i=15836\n [119] = https://curl.se/bug/?i=15897\n [120] = https://curl.se/bug/?i=15899\n [121] = https://curl.se/bug/?i=15893\n [122] = https://curl.se/bug/?i=15895\n [123] = https://curl.se/bug/?i=15892\n [124] = https://curl.se/bug/?i=15894\n [125] = https://curl.se/bug/?i=15891\n [126] = https://curl.se/bug/?i=15889\n [127] = https://curl.se/bug/?i=15954\n [128] = https://curl.se/bug/?i=15881\n [133] = https://curl.se/bug/?i=15946\n [137] = https://curl.se/bug/?i=15939\n [139] = https://curl.se/bug/?i=15909\n [140] = https://curl.se/bug/?i=15941\n [141] = https://curl.se/bug/?i=15924\n [147] = https://curl.se/bug/?i=15929\n [149] = https://curl.se/bug/?i=15925\n [151] = https://curl.se/bug/?i=15923\n [154] = https://curl.se/bug/?i=15857\n"
        },
        {
          "name": "REUSE.toml",
          "type": "blob",
          "size": 1.59,
          "content": "# SPDX-License-Identifier: curl\n# SPDX-FileCopyrightText: Daniel Stenberg, <daniel@haxx.se>, et al.\n\n# This file describes the licensing and copyright situation for files that\n# cannot be annotated directly, for example because of being simply\n# uncommentable. Unless this is the case, a file should be annotated directly.\n#\n# This follows the REUSE specification: https://reuse.software/spec-3.2/#reusetoml\n\nversion = 1\nSPDX-PackageName = \"curl\"\nSPDX-PackageDownloadLocation = \"https://curl.se/\"\n\n[[annotations]]\npath = [\n  \".mailmap\",\n  \"docs/FAQ\",\n  \"docs/INSTALL\",\n  \"docs/KNOWN_BUGS\",\n  \"docs/libcurl/symbols-in-versions\",\n  \"docs/MAIL-ETIQUETTE\",\n  \"docs/options-in-versions\",\n  \"docs/THANKS\",\n  \"docs/TODO\",\n  \"GIT-INFO.md\",\n  \"lib/libcurl.vers.in\",\n  \"lib/libcurl.def\",\n  \"packages/OS400/README.OS400\",\n  \"packages/vms/build_vms.com\",\n  \"packages/vms/curl_release_note_start.txt\",\n  \"packages/vms/curlmsg.sdl\",\n  \"packages/vms/macro32_exactcase.patch\",\n  \"packages/vms/readme\",\n  \"plan9/README\",\n  \"projects/Windows/**\",\n  \"README\",\n  \"RELEASE-NOTES\",\n  \"renovate.json\",\n  \"tests/certs/**\",\n  \"tests/data/test**\",\n  \"tests/stunnel.pem\",\n  \"tests/valgrind.supp\",\n  # checksrc control files\n  \"docs/examples/.checksrc\",\n  \"lib/.checksrc\",\n  \"lib/vauth/.checksrc\",\n  \"lib/vquic/.checksrc\",\n  \"lib/vssh/.checksrc\",\n  \"lib/vtls/.checksrc\",\n  \"src/.checksrc\",\n  \"tests/libtest/.checksrc\",\n  \"tests/server/.checksrc\",\n]\nSPDX-FileCopyrightText = \"Daniel Stenberg, <daniel@haxx.se>, et al.\"\nSPDX-License-Identifier = \"curl\"\n# If there is licensing/copyright information in or next to these files, prefer that\nprecedence = \"closest\"\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.21,
          "content": "<!--\nCopyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n\nSPDX-License-Identifier: curl\n-->\n\n# Security Policy\n\nRead our [Vulnerability Disclosure Policy](docs/VULN-DISCLOSURE-POLICY.md).\n\n## Reporting a Vulnerability\n\nIf you have found or just suspect a security problem somewhere in curl or\nlibcurl, report it on [HackerOne](https://hackerone.com/curl).\n\nWe treat security issues with confidentiality until controlled and disclosed responsibly.\n\n## OpenSSF Best Practices\n\ncurl has achieved Gold status on the Open Source Security Foundation (OpenSSF)\n[Best Practices](https://bestpractices.dev/) (formerly Core Infrastructure\nInitiative Best Practices), reflecting its adherence to rigorous\nsecurity and best practice standards. This achievement highlights curl's\ncomprehensive documentation, secure development processes, effective change\ncontrol mechanisms, and strong maintenance routines. Meeting these criteria\ndemonstrates curl's commitment to security and reliability, ensuring the\nproject's sustainability and trustworthiness. This underscores curl's role as\na leader in open-source software practices. More information can be found on\n[curl's OpenSSF Best Practices project page](https://www.bestpractices.dev/projects/63).\n"
        },
        {
          "name": "acinclude.m4",
          "type": "blob",
          "size": 45.52,
          "content": "#***************************************************************************\n#                                  _   _ ____  _\n#  Project                     ___| | | |  _ \\| |\n#                             / __| | | | |_) | |\n#                            | (__| |_| |  _ <| |___\n#                             \\___|\\___/|_| \\_\\_____|\n#\n# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n#\n# This software is licensed as described in the file COPYING, which\n# you should have received as part of this distribution. The terms\n# are also available at https://curl.se/docs/copyright.html.\n#\n# You may opt to use, copy, modify, merge, publish, distribute and/or sell\n# copies of the Software, and permit persons to whom the Software is\n# furnished to do so, under the terms of the COPYING file.\n#\n# This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\n# KIND, either express or implied.\n#\n# SPDX-License-Identifier: curl\n#\n#***************************************************************************\n\ndnl CURL_CHECK_DEF (SYMBOL, [INCLUDES], [SILENT])\ndnl -------------------------------------------------\ndnl Use the C preprocessor to find out if the given object-style symbol\ndnl is defined and get its expansion. This macro will not use default\ndnl includes even if no INCLUDES argument is given. This macro will run\ndnl silently when invoked with three arguments. If the expansion would\ndnl result in a set of double-quoted strings the returned expansion will\ndnl actually be a single double-quoted string concatenating all them.\n\nAC_DEFUN([CURL_CHECK_DEF], [\n  AC_REQUIRE([CURL_CPP_P])dnl\n  OLDCPPFLAGS=$CPPFLAGS\n  # CPPPFLAG comes from CURL_CPP_P\n  CPPFLAGS=\"$CPPFLAGS $CPPPFLAG\"\n  AS_VAR_PUSHDEF([ac_HaveDef], [curl_cv_have_def_$1])dnl\n  AS_VAR_PUSHDEF([ac_Def], [curl_cv_def_$1])dnl\n  if test -z \"$SED\"; then\n    AC_MSG_ERROR([SED not set. Cannot continue without SED being set.])\n  fi\n  if test -z \"$GREP\"; then\n    AC_MSG_ERROR([GREP not set. Cannot continue without GREP being set.])\n  fi\n  ifelse($3,,[AC_MSG_CHECKING([for preprocessor definition of $1])])\n  tmp_exp=\"\"\n  AC_PREPROC_IFELSE([\n    AC_LANG_SOURCE(\nifelse($2,,,[$2])[[\n      #ifdef $1\n      CURL_DEF_TOKEN $1\n      #endif\n    ]])\n  ],[\n    tmp_exp=`eval \"$ac_cpp conftest.$ac_ext\" 2>/dev/null | \\\n      \"$GREP\" CURL_DEF_TOKEN 2>/dev/null | \\\n      \"$SED\" 's/.*CURL_DEF_TOKEN[[ ]][[ ]]*//' 2>/dev/null | \\\n      \"$SED\" 's/[[\"]][[ ]]*[[\"]]//g' 2>/dev/null`\n    if test -z \"$tmp_exp\" || test \"$tmp_exp\" = \"$1\"; then\n      tmp_exp=\"\"\n    fi\n  ])\n  if test -z \"$tmp_exp\"; then\n    AS_VAR_SET(ac_HaveDef, no)\n    ifelse($3,,[AC_MSG_RESULT([no])])\n  else\n    AS_VAR_SET(ac_HaveDef, yes)\n    AS_VAR_SET(ac_Def, $tmp_exp)\n    ifelse($3,,[AC_MSG_RESULT([$tmp_exp])])\n  fi\n  AS_VAR_POPDEF([ac_Def])dnl\n  AS_VAR_POPDEF([ac_HaveDef])dnl\n  CPPFLAGS=$OLDCPPFLAGS\n])\n\n\ndnl CURL_CHECK_DEF_CC (SYMBOL, [INCLUDES], [SILENT])\ndnl -------------------------------------------------\ndnl Use the C compiler to find out only if the given symbol is defined\ndnl or not, this can not find out its expansion. This macro will not use\ndnl default includes even if no INCLUDES argument is given. This macro\ndnl will run silently when invoked with three arguments.\n\nAC_DEFUN([CURL_CHECK_DEF_CC], [\n  AS_VAR_PUSHDEF([ac_HaveDef], [curl_cv_have_def_$1])dnl\n  ifelse($3,,[AC_MSG_CHECKING([for compiler definition of $1])])\n  AC_COMPILE_IFELSE([\n    AC_LANG_SOURCE(\nifelse($2,,,[$2])[[\n      int main(void)\n      {\n      #ifdef $1\n        return 0;\n      #else\n        #error force compilation error\n      #endif\n      }\n    ]])\n  ],[\n    tst_symbol_defined=\"yes\"\n  ],[\n    tst_symbol_defined=\"no\"\n  ])\n  if test \"$tst_symbol_defined\" = \"yes\"; then\n    AS_VAR_SET(ac_HaveDef, yes)\n    ifelse($3,,[AC_MSG_RESULT([yes])])\n  else\n    AS_VAR_SET(ac_HaveDef, no)\n    ifelse($3,,[AC_MSG_RESULT([no])])\n  fi\n  AS_VAR_POPDEF([ac_HaveDef])dnl\n])\n\n\ndnl CURL_CHECK_LIB_XNET\ndnl -------------------------------------------------\ndnl Verify if X/Open network library is required.\n\nAC_DEFUN([CURL_CHECK_LIB_XNET], [\n  AC_MSG_CHECKING([if X/Open network library is required])\n  tst_lib_xnet_required=\"no\"\n  AC_COMPILE_IFELSE([\n    AC_LANG_SOURCE([[\n      int main(void)\n      {\n      #if defined(__hpux) && defined(_XOPEN_SOURCE) && (_XOPEN_SOURCE >= 600)\n        return 0;\n      #elif defined(__hpux) && defined(_XOPEN_SOURCE_EXTENDED)\n        return 0;\n      #else\n        #error force compilation error\n      #endif\n      }\n    ]])\n  ],[\n    tst_lib_xnet_required=\"yes\"\n    LIBS=\"-lxnet $LIBS\"\n  ])\n  AC_MSG_RESULT([$tst_lib_xnet_required])\n])\n\n\ndnl CURL_CHECK_AIX_ALL_SOURCE\ndnl -------------------------------------------------\ndnl Provides a replacement of traditional AC_AIX with\ndnl an uniform behavior across all autoconf versions,\ndnl and with our own placement rules.\n\nAC_DEFUN([CURL_CHECK_AIX_ALL_SOURCE], [\n  AH_VERBATIM([_ALL_SOURCE],\n    [/* Define to 1 if OS is AIX. */\n#ifndef _ALL_SOURCE\n#  undef _ALL_SOURCE\n#endif])\n  AC_BEFORE([$0], [AC_SYS_LARGEFILE])dnl\n  AC_BEFORE([$0], [CURL_CONFIGURE_REENTRANT])dnl\n  AC_MSG_CHECKING([if OS is AIX (to define _ALL_SOURCE)])\n  AC_EGREP_CPP([yes_this_is_aix],[\n#ifdef _AIX\n   yes_this_is_aix\n#endif\n  ],[\n    AC_MSG_RESULT([yes])\n    AC_DEFINE(_ALL_SOURCE)\n  ],[\n    AC_MSG_RESULT([no])\n  ])\n])\n\n\ndnl CURL_CHECK_NATIVE_WINDOWS\ndnl -------------------------------------------------\ndnl Check if building a native Windows target\n\nAC_DEFUN([CURL_CHECK_NATIVE_WINDOWS], [\n  AC_CACHE_CHECK([whether build target is a native Windows one], [curl_cv_native_windows], [\n    AC_COMPILE_IFELSE([\n      AC_LANG_PROGRAM([[\n      ]],[[\n        #ifdef _WIN32\n          int dummy=1;\n        #else\n          #error Not a native Windows build target.\n        #endif\n      ]])\n    ],[\n      curl_cv_native_windows=\"yes\"\n    ],[\n      curl_cv_native_windows=\"no\"\n    ])\n  ])\n  AM_CONDITIONAL(DOING_NATIVE_WINDOWS, test \"x$curl_cv_native_windows\" = xyes)\n])\n\n\ndnl CURL_CHECK_HEADER_LBER\ndnl -------------------------------------------------\ndnl Check for compilable and valid lber.h header,\ndnl and check if it is needed even with ldap.h\n\nAC_DEFUN([CURL_CHECK_HEADER_LBER], [\n  AC_REQUIRE([CURL_CHECK_NATIVE_WINDOWS])dnl\n  AC_CACHE_CHECK([for lber.h], [curl_cv_header_lber_h], [\n    AC_COMPILE_IFELSE([\n      AC_LANG_PROGRAM([[\n        #undef inline\n        #ifdef _WIN32\n        #ifndef WIN32_LEAN_AND_MEAN\n        #define WIN32_LEAN_AND_MEAN\n        #endif\n        #include <windows.h>\n        #else\n        #ifdef HAVE_SYS_TYPES_H\n        #include <sys/types.h>\n        #endif\n        #endif\n        #ifndef NULL\n        #define NULL (void *)0\n        #endif\n        #include <lber.h>\n      ]],[[\n        BerValue *bvp = NULL;\n        BerElement *bep = ber_init(bvp);\n        ber_free(bep, 1);\n      ]])\n    ],[\n      curl_cv_header_lber_h=\"yes\"\n    ],[\n      curl_cv_header_lber_h=\"no\"\n    ])\n  ])\n  if test \"$curl_cv_header_lber_h\" = \"yes\"; then\n    AC_DEFINE_UNQUOTED(HAVE_LBER_H, 1,\n      [Define to 1 if you have the lber.h header file.])\n    #\n    AC_COMPILE_IFELSE([\n      AC_LANG_PROGRAM([[\n        #undef inline\n        #ifdef _WIN32\n        #ifndef WIN32_LEAN_AND_MEAN\n        #define WIN32_LEAN_AND_MEAN\n        #endif\n        #include <windows.h>\n        #else\n        #ifdef HAVE_SYS_TYPES_H\n        #include <sys/types.h>\n        #endif\n        #endif\n        #ifndef NULL\n        #define NULL (void *)0\n        #endif\n        #ifndef LDAP_DEPRECATED\n        #define LDAP_DEPRECATED 1\n        #endif\n        #include <ldap.h>\n      ]],[[\n        BerValue *bvp = NULL;\n        BerElement *bep = ber_init(bvp);\n        ber_free(bep, 1);\n      ]])\n    ],[\n      curl_cv_need_header_lber_h=\"no\"\n    ],[\n      curl_cv_need_header_lber_h=\"yes\"\n    ])\n    #\n    case \"$curl_cv_need_header_lber_h\" in\n      yes)\n        AC_DEFINE_UNQUOTED(NEED_LBER_H, 1,\n          [Define to 1 if you need the lber.h header file even with ldap.h])\n        ;;\n    esac\n  fi\n])\n\n\ndnl CURL_CHECK_HEADER_LDAP\ndnl -------------------------------------------------\ndnl Check for compilable and valid ldap.h header\n\nAC_DEFUN([CURL_CHECK_HEADER_LDAP], [\n  AC_REQUIRE([CURL_CHECK_HEADER_LBER])dnl\n  AC_CACHE_CHECK([for ldap.h], [curl_cv_header_ldap_h], [\n    AC_COMPILE_IFELSE([\n      AC_LANG_PROGRAM([[\n        #undef inline\n        #ifdef _WIN32\n        #ifndef WIN32_LEAN_AND_MEAN\n        #define WIN32_LEAN_AND_MEAN\n        #endif\n        #include <windows.h>\n        #else\n        #ifdef HAVE_SYS_TYPES_H\n        #include <sys/types.h>\n        #endif\n        #endif\n        #ifndef LDAP_DEPRECATED\n        #define LDAP_DEPRECATED 1\n        #endif\n        #ifdef NEED_LBER_H\n        #include <lber.h>\n        #endif\n        #include <ldap.h>\n      ]],[[\n        LDAP *ldp = ldap_init(\"0.0.0.0\", LDAP_PORT);\n        int res = ldap_unbind(ldp);\n      ]])\n    ],[\n      curl_cv_header_ldap_h=\"yes\"\n    ],[\n      curl_cv_header_ldap_h=\"no\"\n    ])\n  ])\n  case \"$curl_cv_header_ldap_h\" in\n    yes)\n      AC_DEFINE_UNQUOTED(HAVE_LDAP_H, 1,\n        [Define to 1 if you have the ldap.h header file.])\n      ;;\n  esac\n])\n\n\ndnl CURL_CHECK_HEADER_LDAP_SSL\ndnl -------------------------------------------------\ndnl Check for compilable and valid ldap_ssl.h header\n\nAC_DEFUN([CURL_CHECK_HEADER_LDAP_SSL], [\n  AC_REQUIRE([CURL_CHECK_HEADER_LDAP])dnl\n  AC_CACHE_CHECK([for ldap_ssl.h], [curl_cv_header_ldap_ssl_h], [\n    AC_COMPILE_IFELSE([\n      AC_LANG_PROGRAM([[\n        #undef inline\n        #ifdef _WIN32\n        #ifndef WIN32_LEAN_AND_MEAN\n        #define WIN32_LEAN_AND_MEAN\n        #endif\n        #include <windows.h>\n        #else\n        #ifdef HAVE_SYS_TYPES_H\n        #include <sys/types.h>\n        #endif\n        #endif\n        #ifndef LDAP_DEPRECATED\n        #define LDAP_DEPRECATED 1\n        #endif\n        #ifdef NEED_LBER_H\n        #include <lber.h>\n        #endif\n        #ifdef HAVE_LDAP_H\n        #include <ldap.h>\n        #endif\n        #include <ldap_ssl.h>\n      ]],[[\n        LDAP *ldp = ldapssl_init(\"0.0.0.0\", LDAPS_PORT, 1);\n      ]])\n    ],[\n      curl_cv_header_ldap_ssl_h=\"yes\"\n    ],[\n      curl_cv_header_ldap_ssl_h=\"no\"\n    ])\n  ])\n  case \"$curl_cv_header_ldap_ssl_h\" in\n    yes)\n      AC_DEFINE_UNQUOTED(HAVE_LDAP_SSL_H, 1,\n        [Define to 1 if you have the ldap_ssl.h header file.])\n      ;;\n  esac\n])\n\n\ndnl CURL_CHECK_LIBS_WINLDAP\ndnl -------------------------------------------------\ndnl Check for libraries needed for WINLDAP support,\ndnl and prepended to LIBS any needed libraries.\ndnl This macro can take an optional parameter with a\ndnl whitespace separated list of libraries to check\ndnl before the WINLDAP default ones.\n\nAC_DEFUN([CURL_CHECK_LIBS_WINLDAP], [\n  AC_REQUIRE([CURL_CHECK_HEADER_WINBER])dnl\n  #\n  AC_MSG_CHECKING([for WINLDAP libraries])\n  #\n  u_libs=\"\"\n  #\n  ifelse($1,,,[\n    for x_lib in $1; do\n      case \"$x_lib\" in\n        -l*)\n          l_lib=\"$x_lib\"\n          ;;\n        *)\n          l_lib=\"-l$x_lib\"\n          ;;\n      esac\n      if test -z \"$u_libs\"; then\n        u_libs=\"$l_lib\"\n      else\n        u_libs=\"$u_libs $l_lib\"\n      fi\n    done\n  ])\n  #\n  curl_cv_save_LIBS=\"$LIBS\"\n  curl_cv_ldap_LIBS=\"unknown\"\n  #\n  for x_nlibs in '' \"$u_libs\" \\\n    '-lwldap32' ; do\n    if test \"$curl_cv_ldap_LIBS\" = \"unknown\"; then\n      if test -z \"$x_nlibs\"; then\n        LIBS=\"$curl_cv_save_LIBS\"\n      else\n        LIBS=\"$x_nlibs $curl_cv_save_LIBS\"\n      fi\n      AC_LINK_IFELSE([\n        AC_LANG_PROGRAM([[\n          #undef inline\n          #ifdef _WIN32\n          #ifndef WIN32_LEAN_AND_MEAN\n          #define WIN32_LEAN_AND_MEAN\n          #endif\n          #include <windows.h>\n          #include <winldap.h>\n          #ifdef HAVE_WINBER_H\n          #include <winber.h>\n          #endif\n          #endif\n        ]],[[\n          BERVAL *bvp = NULL;\n          BerElement *bep = ber_init(bvp);\n          LDAP *ldp = ldap_init(\"0.0.0.0\", LDAP_PORT);\n          ULONG res = ldap_unbind(ldp);\n          ber_free(bep, 1);\n        ]])\n      ],[\n        curl_cv_ldap_LIBS=\"$x_nlibs\"\n      ])\n    fi\n  done\n  #\n  LIBS=\"$curl_cv_save_LIBS\"\n  #\n  case X-\"$curl_cv_ldap_LIBS\" in\n    X-unknown)\n      AC_MSG_RESULT([cannot find WINLDAP libraries])\n      ;;\n    X-)\n      AC_MSG_RESULT([no additional lib required])\n      ;;\n    *)\n      if test -z \"$curl_cv_save_LIBS\"; then\n        LIBS=\"$curl_cv_ldap_LIBS\"\n      else\n        LIBS=\"$curl_cv_ldap_LIBS $curl_cv_save_LIBS\"\n      fi\n      AC_MSG_RESULT([$curl_cv_ldap_LIBS])\n      ;;\n  esac\n  #\n])\n\n\ndnl CURL_CHECK_LIBS_LDAP\ndnl -------------------------------------------------\ndnl Check for libraries needed for LDAP support,\ndnl and prepended to LIBS any needed libraries.\ndnl This macro can take an optional parameter with a\ndnl whitespace separated list of libraries to check\ndnl before the default ones.\n\nAC_DEFUN([CURL_CHECK_LIBS_LDAP], [\n  AC_REQUIRE([CURL_CHECK_HEADER_LDAP])dnl\n  #\n  AC_MSG_CHECKING([for LDAP libraries])\n  #\n  u_libs=\"\"\n  #\n  ifelse($1,,,[\n    for x_lib in $1; do\n      case \"$x_lib\" in\n        -l*)\n          l_lib=\"$x_lib\"\n          ;;\n        *)\n          l_lib=\"-l$x_lib\"\n          ;;\n      esac\n      if test -z \"$u_libs\"; then\n        u_libs=\"$l_lib\"\n      else\n        u_libs=\"$u_libs $l_lib\"\n      fi\n    done\n  ])\n  #\n  curl_cv_save_LIBS=\"$LIBS\"\n  curl_cv_ldap_LIBS=\"unknown\"\n  #\n  for x_nlibs in '' \"$u_libs\" \\\n    '-lldap' \\\n    '-lldap -llber' \\\n    '-llber -lldap' \\\n    '-lldapssl -lldapx -lldapsdk' \\\n    '-lldapsdk -lldapx -lldapssl' \\\n    '-lldap -llber -lssl -lcrypto'; do\n\n    if test \"$curl_cv_ldap_LIBS\" = \"unknown\"; then\n      if test -z \"$x_nlibs\"; then\n        LIBS=\"$curl_cv_save_LIBS\"\n      else\n        LIBS=\"$x_nlibs $curl_cv_save_LIBS\"\n      fi\n      AC_LINK_IFELSE([\n        AC_LANG_PROGRAM([[\n          #undef inline\n          #ifdef _WIN32\n          #ifndef WIN32_LEAN_AND_MEAN\n          #define WIN32_LEAN_AND_MEAN\n          #endif\n          #include <windows.h>\n          #else\n          #ifdef HAVE_SYS_TYPES_H\n          #include <sys/types.h>\n          #endif\n          #endif\n          #ifndef NULL\n          #define NULL (void *)0\n          #endif\n          #ifndef LDAP_DEPRECATED\n          #define LDAP_DEPRECATED 1\n          #endif\n          #ifdef NEED_LBER_H\n          #include <lber.h>\n          #endif\n          #ifdef HAVE_LDAP_H\n          #include <ldap.h>\n          #endif\n        ]],[[\n          BerValue *bvp = NULL;\n          BerElement *bep = ber_init(bvp);\n          LDAP *ldp = ldap_init(\"0.0.0.0\", LDAP_PORT);\n          int res = ldap_unbind(ldp);\n          ber_free(bep, 1);\n        ]])\n      ],[\n        curl_cv_ldap_LIBS=\"$x_nlibs\"\n      ])\n    fi\n  done\n  #\n  LIBS=\"$curl_cv_save_LIBS\"\n  #\n  case X-\"$curl_cv_ldap_LIBS\" in\n    X-unknown)\n      AC_MSG_RESULT([cannot find LDAP libraries])\n      ;;\n    X-)\n      AC_MSG_RESULT([no additional lib required])\n      ;;\n    *)\n      if test -z \"$curl_cv_save_LIBS\"; then\n        LIBS=\"$curl_cv_ldap_LIBS\"\n      else\n        LIBS=\"$curl_cv_ldap_LIBS $curl_cv_save_LIBS\"\n      fi\n      # FIXME: Enable when ldap was detected via pkg-config\n      if false; then\n        LIBCURL_PC_REQUIRES_PRIVATE=\"ldap $LIBCURL_PC_REQUIRES_PRIVATE\"\n      fi\n      AC_MSG_RESULT([$curl_cv_ldap_LIBS])\n      ;;\n  esac\n  #\n])\n\n\ndnl TYPE_SOCKADDR_STORAGE\ndnl -------------------------------------------------\ndnl Check for struct sockaddr_storage. Most IPv6-enabled\ndnl hosts have it, but AIX 4.3 is one known exception.\n\nAC_DEFUN([TYPE_SOCKADDR_STORAGE],\n[\n   AC_CHECK_TYPE([struct sockaddr_storage],\n     AC_DEFINE(HAVE_STRUCT_SOCKADDR_STORAGE, 1,\n       [if struct sockaddr_storage is defined]), ,\n   [\n     #undef inline\n     #ifdef _WIN32\n     #ifndef WIN32_LEAN_AND_MEAN\n     #define WIN32_LEAN_AND_MEAN\n     #endif\n     #include <winsock2.h>\n     #else\n     #ifdef HAVE_SYS_TYPES_H\n     #include <sys/types.h>\n     #endif\n     #ifdef HAVE_SYS_SOCKET_H\n     #include <sys/socket.h>\n     #endif\n     #ifdef HAVE_NETINET_IN_H\n     #include <netinet/in.h>\n     #endif\n     #ifdef HAVE_ARPA_INET_H\n     #include <arpa/inet.h>\n     #endif\n     #endif\n   ])\n])\n\ndnl CURL_CHECK_FUNC_RECV\ndnl -------------------------------------------------\ndnl Test if the socket recv() function is available,\n\nAC_DEFUN([CURL_CHECK_FUNC_RECV], [\n  AC_REQUIRE([CURL_CHECK_NATIVE_WINDOWS])dnl\n  AC_REQUIRE([CURL_INCLUDES_BSDSOCKET])dnl\n  AC_CHECK_HEADERS(sys/types.h sys/socket.h)\n  #\n  AC_MSG_CHECKING([for recv])\n  AC_LINK_IFELSE([\n    AC_LANG_PROGRAM([[\n      #undef inline\n      #ifdef _WIN32\n      #ifndef WIN32_LEAN_AND_MEAN\n      #define WIN32_LEAN_AND_MEAN\n      #endif\n      #include <winsock2.h>\n      #else\n      $curl_includes_bsdsocket\n      #ifdef HAVE_SYS_TYPES_H\n      #include <sys/types.h>\n      #endif\n      #ifdef HAVE_SYS_SOCKET_H\n      #include <sys/socket.h>\n      #endif\n      #endif\n    ]],[[\n      recv(0, 0, 0, 0);\n    ]])\n  ],[\n    AC_MSG_RESULT([yes])\n    curl_cv_recv=\"yes\"\n  ],[\n    AC_MSG_RESULT([no])\n    curl_cv_recv=\"no\"\n  ])\n  #\n  if test \"$curl_cv_recv\" = \"yes\"; then\n    AC_DEFINE_UNQUOTED(HAVE_RECV, 1,\n      [Define to 1 if you have the recv function.])\n    curl_cv_func_recv=\"yes\"\n  else\n    AC_MSG_ERROR([Unable to link function recv])\n  fi\n])\n\n\ndnl CURL_CHECK_FUNC_SEND\ndnl -------------------------------------------------\ndnl Test if the socket send() function is available,\n\nAC_DEFUN([CURL_CHECK_FUNC_SEND], [\n  AC_REQUIRE([CURL_CHECK_NATIVE_WINDOWS])dnl\n  AC_REQUIRE([CURL_INCLUDES_BSDSOCKET])dnl\n  AC_CHECK_HEADERS(sys/types.h sys/socket.h)\n  #\n  AC_MSG_CHECKING([for send])\n  AC_LINK_IFELSE([\n    AC_LANG_PROGRAM([[\n      #undef inline\n      #ifdef _WIN32\n      #ifndef WIN32_LEAN_AND_MEAN\n      #define WIN32_LEAN_AND_MEAN\n      #endif\n      #include <winsock2.h>\n      #else\n      $curl_includes_bsdsocket\n      #ifdef HAVE_SYS_TYPES_H\n      #include <sys/types.h>\n      #endif\n      #ifdef HAVE_SYS_SOCKET_H\n      #include <sys/socket.h>\n      #endif\n      #endif\n    ]],[[\n      send(0, 0, 0, 0);\n    ]])\n  ],[\n    AC_MSG_RESULT([yes])\n    curl_cv_send=\"yes\"\n  ],[\n    AC_MSG_RESULT([no])\n    curl_cv_send=\"no\"\n  ])\n  #\n  if test \"$curl_cv_send\" = \"yes\"; then\n    AC_DEFINE_UNQUOTED(HAVE_SEND, 1,\n      [Define to 1 if you have the send function.])\n    curl_cv_func_send=\"yes\"\n  else\n    AC_MSG_ERROR([Unable to link function send])\n  fi\n])\n\ndnl CURL_CHECK_MSG_NOSIGNAL\ndnl -------------------------------------------------\ndnl Check for MSG_NOSIGNAL\n\nAC_DEFUN([CURL_CHECK_MSG_NOSIGNAL], [\n  AC_CHECK_HEADERS(sys/types.h sys/socket.h)\n  AC_CACHE_CHECK([for MSG_NOSIGNAL], [curl_cv_msg_nosignal], [\n    AC_COMPILE_IFELSE([\n      AC_LANG_PROGRAM([[\n        #undef inline\n        #ifdef _WIN32\n        #ifndef WIN32_LEAN_AND_MEAN\n        #define WIN32_LEAN_AND_MEAN\n        #endif\n        #include <winsock2.h>\n        #else\n        #ifdef HAVE_SYS_TYPES_H\n        #include <sys/types.h>\n        #endif\n        #ifdef HAVE_SYS_SOCKET_H\n        #include <sys/socket.h>\n        #endif\n        #endif\n      ]],[[\n        int flag=MSG_NOSIGNAL;\n      ]])\n    ],[\n      curl_cv_msg_nosignal=\"yes\"\n    ],[\n      curl_cv_msg_nosignal=\"no\"\n    ])\n  ])\n  case \"$curl_cv_msg_nosignal\" in\n    yes)\n      AC_DEFINE_UNQUOTED(HAVE_MSG_NOSIGNAL, 1,\n        [Define to 1 if you have the MSG_NOSIGNAL flag.])\n      ;;\n  esac\n])\n\n\ndnl CURL_CHECK_STRUCT_TIMEVAL\ndnl -------------------------------------------------\ndnl Check for timeval struct\n\nAC_DEFUN([CURL_CHECK_STRUCT_TIMEVAL], [\n  AC_REQUIRE([CURL_CHECK_NATIVE_WINDOWS])dnl\n  AC_CHECK_HEADERS(sys/types.h sys/time.h sys/socket.h)\n  AC_CACHE_CHECK([for struct timeval], [curl_cv_struct_timeval], [\n    AC_COMPILE_IFELSE([\n      AC_LANG_PROGRAM([[\n        #undef inline\n        #ifdef _WIN32\n        #ifndef WIN32_LEAN_AND_MEAN\n        #define WIN32_LEAN_AND_MEAN\n        #endif\n        #include <winsock2.h>\n        #endif\n        #ifdef HAVE_SYS_TYPES_H\n        #include <sys/types.h>\n        #endif\n        #ifdef HAVE_SYS_TIME_H\n        #include <sys/time.h>\n        #endif\n        #include <time.h>\n        #ifdef HAVE_SYS_SOCKET_H\n        #include <sys/socket.h>\n        #endif\n      ]],[[\n        struct timeval ts;\n        ts.tv_sec  = 0;\n        ts.tv_usec = 0;\n      ]])\n    ],[\n      curl_cv_struct_timeval=\"yes\"\n    ],[\n      curl_cv_struct_timeval=\"no\"\n    ])\n  ])\n  case \"$curl_cv_struct_timeval\" in\n    yes)\n      AC_DEFINE_UNQUOTED(HAVE_STRUCT_TIMEVAL, 1,\n        [Define to 1 if you have the timeval struct.])\n      ;;\n  esac\n])\n\n\ndnl TYPE_IN_ADDR_T\ndnl -------------------------------------------------\ndnl Check for in_addr_t: it is used to receive the return code of inet_addr()\ndnl and a few other things.\n\nAC_DEFUN([TYPE_IN_ADDR_T], [\n  AC_CHECK_TYPE([in_addr_t], ,[\n    dnl in_addr_t not available\n    AC_CACHE_CHECK([for in_addr_t equivalent],\n      [curl_cv_in_addr_t_equiv], [\n      curl_cv_in_addr_t_equiv=\"unknown\"\n      for t in \"unsigned long\" int size_t unsigned long; do\n        if test \"$curl_cv_in_addr_t_equiv\" = \"unknown\"; then\n          AC_LINK_IFELSE([\n            AC_LANG_PROGRAM([[\n              #undef inline\n              #ifdef _WIN32\n              #ifndef WIN32_LEAN_AND_MEAN\n              #define WIN32_LEAN_AND_MEAN\n              #endif\n              #include <winsock2.h>\n              #else\n              #ifdef HAVE_SYS_TYPES_H\n              #include <sys/types.h>\n              #endif\n              #ifdef HAVE_SYS_SOCKET_H\n              #include <sys/socket.h>\n              #endif\n              #ifdef HAVE_NETINET_IN_H\n              #include <netinet/in.h>\n              #endif\n              #ifdef HAVE_ARPA_INET_H\n              #include <arpa/inet.h>\n              #endif\n              #endif\n            ]],[[\n              $t data = inet_addr (\"1.2.3.4\");\n            ]])\n          ],[\n            curl_cv_in_addr_t_equiv=\"$t\"\n          ])\n        fi\n      done\n    ])\n    case \"$curl_cv_in_addr_t_equiv\" in\n      unknown)\n        AC_MSG_ERROR([Cannot find a type to use in place of in_addr_t])\n        ;;\n      *)\n        AC_DEFINE_UNQUOTED(in_addr_t, $curl_cv_in_addr_t_equiv,\n          [Type to use in place of in_addr_t when system does not provide it.])\n        ;;\n    esac\n  ],[\n    #undef inline\n    #ifdef _WIN32\n    #ifndef WIN32_LEAN_AND_MEAN\n    #define WIN32_LEAN_AND_MEAN\n    #endif\n    #include <winsock2.h>\n    #else\n    #ifdef HAVE_SYS_TYPES_H\n    #include <sys/types.h>\n    #endif\n    #ifdef HAVE_SYS_SOCKET_H\n    #include <sys/socket.h>\n    #endif\n    #ifdef HAVE_NETINET_IN_H\n    #include <netinet/in.h>\n    #endif\n    #ifdef HAVE_ARPA_INET_H\n    #include <arpa/inet.h>\n    #endif\n    #endif\n  ])\n])\n\n\ndnl CURL_CHECK_FUNC_CLOCK_GETTIME_MONOTONIC\ndnl -------------------------------------------------\ndnl Check if monotonic clock_gettime is available.\n\nAC_DEFUN([CURL_CHECK_FUNC_CLOCK_GETTIME_MONOTONIC], [\n  AC_CHECK_HEADERS(sys/types.h sys/time.h)\n  AC_MSG_CHECKING([for monotonic clock_gettime])\n  #\n  if test \"x$dontwant_rt\" = \"xno\" ; then\n    AC_COMPILE_IFELSE([\n      AC_LANG_PROGRAM([[\n        #ifdef HAVE_SYS_TYPES_H\n        #include <sys/types.h>\n        #endif\n        #ifdef HAVE_SYS_TIME_H\n        #include <sys/time.h>\n        #endif\n        #include <time.h>\n      ]],[[\n        struct timespec ts;\n        (void)clock_gettime(CLOCK_MONOTONIC, &ts);\n      ]])\n    ],[\n      AC_MSG_RESULT([yes])\n      curl_func_clock_gettime=\"yes\"\n    ],[\n      AC_MSG_RESULT([no])\n      curl_func_clock_gettime=\"no\"\n    ])\n  fi\n  dnl Definition of HAVE_CLOCK_GETTIME_MONOTONIC is intentionally postponed\n  dnl until library linking and run-time checks for clock_gettime succeed.\n])\n\ndnl CURL_CHECK_FUNC_CLOCK_GETTIME_MONOTONIC_RAW\ndnl -------------------------------------------------\ndnl Check if monotonic clock_gettime is available.\n\nAC_DEFUN([CURL_CHECK_FUNC_CLOCK_GETTIME_MONOTONIC_RAW], [\n  AC_CHECK_HEADERS(sys/types.h sys/time.h)\n  AC_MSG_CHECKING([for raw monotonic clock_gettime])\n  #\n  if test \"x$dontwant_rt\" = \"xno\" ; then\n    AC_COMPILE_IFELSE([\n      AC_LANG_PROGRAM([[\n        #ifdef HAVE_SYS_TYPES_H\n        #include <sys/types.h>\n        #endif\n        #ifdef HAVE_SYS_TIME_H\n        #include <sys/time.h>\n        #endif\n        #include <time.h>\n      ]],[[\n        struct timespec ts;\n        (void)clock_gettime(CLOCK_MONOTONIC_RAW, &ts);\n      ]])\n    ],[\n      AC_MSG_RESULT([yes])\n      AC_DEFINE_UNQUOTED(HAVE_CLOCK_GETTIME_MONOTONIC_RAW, 1,\n        [Define to 1 if you have the clock_gettime function and raw monotonic timer.])\n    ],[\n      AC_MSG_RESULT([no])\n    ])\n  fi\n])\n\n\ndnl CURL_CHECK_LIBS_CLOCK_GETTIME_MONOTONIC\ndnl -------------------------------------------------\ndnl If monotonic clock_gettime is available then,\ndnl check and prepended to LIBS any needed libraries.\n\nAC_DEFUN([CURL_CHECK_LIBS_CLOCK_GETTIME_MONOTONIC], [\n  AC_REQUIRE([CURL_CHECK_FUNC_CLOCK_GETTIME_MONOTONIC])dnl\n  #\n  if test \"$curl_func_clock_gettime\" = \"yes\"; then\n    #\n    AC_MSG_CHECKING([for clock_gettime in libraries])\n    #\n    curl_cv_save_LIBS=\"$LIBS\"\n    curl_cv_gclk_LIBS=\"unknown\"\n    #\n    for x_xlibs in '' '-lrt' '-lposix4' ; do\n      if test \"$curl_cv_gclk_LIBS\" = \"unknown\"; then\n        if test -z \"$x_xlibs\"; then\n          LIBS=\"$curl_cv_save_LIBS\"\n        else\n          LIBS=\"$x_xlibs $curl_cv_save_LIBS\"\n        fi\n        AC_LINK_IFELSE([\n          AC_LANG_PROGRAM([[\n            #ifdef HAVE_SYS_TYPES_H\n            #include <sys/types.h>\n            #endif\n            #ifdef HAVE_SYS_TIME_H\n            #include <sys/time.h>\n            #endif\n            #include <time.h>\n          ]],[[\n            struct timespec ts;\n            (void)clock_gettime(CLOCK_MONOTONIC, &ts);\n          ]])\n        ],[\n          curl_cv_gclk_LIBS=\"$x_xlibs\"\n        ])\n      fi\n    done\n    #\n    LIBS=\"$curl_cv_save_LIBS\"\n    #\n    case X-\"$curl_cv_gclk_LIBS\" in\n      X-unknown)\n        AC_MSG_RESULT([cannot find clock_gettime])\n        AC_MSG_WARN([HAVE_CLOCK_GETTIME_MONOTONIC will not be defined])\n        curl_func_clock_gettime=\"no\"\n        ;;\n      X-)\n        AC_MSG_RESULT([no additional lib required])\n        curl_func_clock_gettime=\"yes\"\n        ;;\n      *)\n        if test -z \"$curl_cv_save_LIBS\"; then\n          LIBS=\"$curl_cv_gclk_LIBS\"\n        else\n          LIBS=\"$curl_cv_gclk_LIBS $curl_cv_save_LIBS\"\n        fi\n        AC_MSG_RESULT([$curl_cv_gclk_LIBS])\n        curl_func_clock_gettime=\"yes\"\n        ;;\n    esac\n    #\n    dnl only do runtime verification when not cross-compiling\n    if test \"x$cross_compiling\" != \"xyes\" &&\n      test \"$curl_func_clock_gettime\" = \"yes\"; then\n      AC_MSG_CHECKING([if monotonic clock_gettime works])\n      CURL_RUN_IFELSE([\n        AC_LANG_PROGRAM([[\n          #include <stdlib.h>\n          #ifdef HAVE_SYS_TYPES_H\n          #include <sys/types.h>\n          #endif\n          #ifdef HAVE_SYS_TIME_H\n          #include <sys/time.h>\n          #endif\n          #include <time.h>\n        ]],[[\n          struct timespec ts;\n          if (0 == clock_gettime(CLOCK_MONOTONIC, &ts))\n            exit(0);\n          else\n            exit(1);\n        ]])\n      ],[\n        AC_MSG_RESULT([yes])\n      ],[\n        AC_MSG_RESULT([no])\n        AC_MSG_WARN([HAVE_CLOCK_GETTIME_MONOTONIC will not be defined])\n        curl_func_clock_gettime=\"no\"\n        LIBS=\"$curl_cv_save_LIBS\"\n      ])\n    fi\n    #\n    case \"$curl_func_clock_gettime\" in\n      yes)\n        AC_DEFINE_UNQUOTED(HAVE_CLOCK_GETTIME_MONOTONIC, 1,\n          [Define to 1 if you have the clock_gettime function and monotonic timer.])\n        ;;\n    esac\n    #\n  fi\n  #\n])\n\n\ndnl CURL_CHECK_LIBS_CONNECT\ndnl -------------------------------------------------\ndnl Verify if network connect function is already available\ndnl using current libraries or if another one is required.\n\nAC_DEFUN([CURL_CHECK_LIBS_CONNECT], [\n  AC_REQUIRE([CURL_INCLUDES_WINSOCK2])dnl\n  AC_REQUIRE([CURL_INCLUDES_BSDSOCKET])dnl\n  AC_MSG_CHECKING([for connect in libraries])\n  tst_connect_save_LIBS=\"$LIBS\"\n  tst_connect_need_LIBS=\"unknown\"\n  for tst_lib in '' '-lsocket' ; do\n    if test \"$tst_connect_need_LIBS\" = \"unknown\"; then\n      LIBS=\"$tst_lib $tst_connect_save_LIBS\"\n      AC_LINK_IFELSE([\n        AC_LANG_PROGRAM([[\n          $curl_includes_winsock2\n          $curl_includes_bsdsocket\n          #if !defined(_WIN32) && !defined(HAVE_PROTO_BSDSOCKET_H)\n            int connect(int, void*, int);\n          #endif\n        ]],[[\n          if(0 != connect(0, 0, 0))\n            return 1;\n        ]])\n      ],[\n        tst_connect_need_LIBS=\"$tst_lib\"\n      ])\n    fi\n  done\n  LIBS=\"$tst_connect_save_LIBS\"\n  #\n  case X-\"$tst_connect_need_LIBS\" in\n    X-unknown)\n      AC_MSG_RESULT([cannot find connect])\n      AC_MSG_ERROR([cannot find connect function in libraries.])\n      ;;\n    X-)\n      AC_MSG_RESULT([yes])\n      ;;\n    *)\n      AC_MSG_RESULT([$tst_connect_need_LIBS])\n      LIBS=\"$tst_connect_need_LIBS $tst_connect_save_LIBS\"\n      ;;\n  esac\n])\n\n\ndnl CURL_CHECK_FUNC_SELECT\ndnl -------------------------------------------------\ndnl Test if the socket select() function is available.\n\nAC_DEFUN([CURL_CHECK_FUNC_SELECT], [\n  AC_REQUIRE([CURL_CHECK_STRUCT_TIMEVAL])dnl\n  AC_REQUIRE([CURL_INCLUDES_BSDSOCKET])dnl\n  AC_CHECK_HEADERS(sys/select.h sys/socket.h)\n  #\n  AC_MSG_CHECKING([for select])\n  AC_LINK_IFELSE([\n    AC_LANG_PROGRAM([[\n      #undef inline\n      #ifdef _WIN32\n      #ifndef WIN32_LEAN_AND_MEAN\n      #define WIN32_LEAN_AND_MEAN\n      #endif\n      #include <winsock2.h>\n      #endif\n      #ifdef HAVE_SYS_TYPES_H\n      #include <sys/types.h>\n      #endif\n      #ifdef HAVE_SYS_TIME_H\n      #include <sys/time.h>\n      #endif\n      #include <time.h>\n      #ifndef _WIN32\n      #ifdef HAVE_SYS_SELECT_H\n      #include <sys/select.h>\n      #elif defined(HAVE_UNISTD_H)\n      #include <unistd.h>\n      #endif\n      #ifdef HAVE_SYS_SOCKET_H\n      #include <sys/socket.h>\n      #endif\n      $curl_includes_bsdsocket\n      #endif\n    ]],[[\n      select(0, 0, 0, 0, 0);\n    ]])\n  ],[\n    AC_MSG_RESULT([yes])\n    curl_cv_select=\"yes\"\n  ],[\n    AC_MSG_RESULT([no])\n    curl_cv_select=\"no\"\n  ])\n  #\n  if test \"$curl_cv_select\" = \"yes\"; then\n    AC_DEFINE_UNQUOTED(HAVE_SELECT, 1,\n      [Define to 1 if you have the select function.])\n    curl_cv_func_select=\"yes\"\n  fi\n])\n\n\ndnl CURL_VERIFY_RUNTIMELIBS\ndnl -------------------------------------------------\ndnl Verify that the shared libs found so far can be used when running\ndnl programs, since otherwise the situation will create odd configure errors\ndnl that are misleading people.\ndnl\ndnl Make sure this test is run BEFORE the first test in the script that\ndnl runs anything, which at the time of this writing is the AC_CHECK_SIZEOF\ndnl macro. It must also run AFTER all lib-checking macros are complete.\n\nAC_DEFUN([CURL_VERIFY_RUNTIMELIBS], [\n\n  dnl this test is of course not sensible if we are cross-compiling!\n  if test \"x$cross_compiling\" != xyes; then\n\n    dnl just run a program to verify that the libs checked for previous to this\n    dnl point also is available run-time!\n    AC_MSG_CHECKING([run-time libs availability])\n    CURL_RUN_IFELSE([\n      int main()\n      {\n        return 0;\n      }\n    ],\n    AC_MSG_RESULT([fine]),\n    AC_MSG_RESULT([failed])\n    AC_MSG_ERROR([one or more libs available at link-time are not available run-time. Libs used at link-time: $LIBS])\n    )\n\n    dnl if this test fails, configure has already stopped\n  fi\n])\n\n\ndnl CURL_CHECK_CA_BUNDLE\ndnl -------------------------------------------------\ndnl Check if a default ca-bundle should be used\ndnl\ndnl regarding the paths this will scan:\ndnl /etc/ssl/certs/ca-certificates.crt Debian systems\ndnl /etc/pki/tls/certs/ca-bundle.crt Redhat and Mandriva\ndnl /usr/share/ssl/certs/ca-bundle.crt old(er) Redhat\ndnl /usr/local/share/certs/ca-root-nss.crt MidnightBSD\ndnl /etc/ssl/cert.pem OpenBSD, MidnightBSD (symlink)\ndnl /etc/ssl/certs (CA path) SUSE, FreeBSD\n\nAC_DEFUN([CURL_CHECK_CA_BUNDLE], [\n\n  AC_MSG_CHECKING([default CA cert bundle/path])\n\n  AC_ARG_WITH(ca-bundle,\nAS_HELP_STRING([--with-ca-bundle=FILE],\n  [Absolute path to a file containing CA certificates (example: /etc/ca-bundle.crt)])\nAS_HELP_STRING([--without-ca-bundle], [Don't use a default CA bundle]),\n  [\n    want_ca=\"$withval\"\n    if test \"x$want_ca\" = \"xyes\"; then\n      AC_MSG_ERROR([--with-ca-bundle=FILE requires a path to the CA bundle])\n    fi\n  ],\n  [ want_ca=\"unset\" ])\n  AC_ARG_WITH(ca-path,\nAS_HELP_STRING([--with-ca-path=DIRECTORY],\n  [Absolute path to a directory containing CA certificates stored individually, with \\\ntheir filenames in a hash format. This option can be used with the OpenSSL, \\\nGnuTLS, mbedTLS and wolfSSL backends. Refer to OpenSSL c_rehash for details. \\\n(example: /etc/certificates)])\nAS_HELP_STRING([--without-ca-path], [Don't use a default CA path]),\n  [\n    want_capath=\"$withval\"\n    if test \"x$want_capath\" = \"xyes\"; then\n      AC_MSG_ERROR([--with-ca-path=DIRECTORY requires a path to the CA path directory])\n    fi\n  ],\n  [ want_capath=\"unset\"])\n\n  ca_warning=\"   (warning: certs not found)\"\n  capath_warning=\"   (warning: certs not found)\"\n  check_capath=\"\"\n\n  if test \"x$want_ca\" != \"xno\" -a \"x$want_ca\" != \"xunset\" -a \\\n          \"x$want_capath\" != \"xno\" -a \"x$want_capath\" != \"xunset\"; then\n    dnl both given\n    ca=\"$want_ca\"\n    capath=\"$want_capath\"\n  elif test \"x$want_ca\" != \"xno\" -a \"x$want_ca\" != \"xunset\"; then\n    dnl --with-ca-bundle given\n    ca=\"$want_ca\"\n    capath=\"no\"\n  elif test \"x$want_capath\" != \"xno\" -a \"x$want_capath\" != \"xunset\"; then\n    dnl --with-ca-path given\n    capath=\"$want_capath\"\n    ca=\"no\"\n  else\n    dnl First try auto-detecting a CA bundle, then a CA path.\n    dnl Both auto-detections can be skipped by --without-ca-*\n    ca=\"no\"\n    capath=\"no\"\n    if test \"x$cross_compiling\" != \"xyes\" -a \\\n            \"x$curl_cv_native_windows\" != \"xyes\"; then\n      dnl NOT cross-compiling and...\n      dnl neither of the --with-ca-* options are provided\n      if test \"x$want_ca\" = \"xunset\"; then\n        dnl the path we previously would have installed the curl CA bundle\n        dnl to, and thus we now check for an already existing cert in that\n        dnl place in case we find no other\n        if test \"x$prefix\" != xNONE; then\n          cac=\"${prefix}/share/curl/curl-ca-bundle.crt\"\n        else\n          cac=\"$ac_default_prefix/share/curl/curl-ca-bundle.crt\"\n        fi\n\n        for a in /etc/ssl/certs/ca-certificates.crt \\\n                 /etc/pki/tls/certs/ca-bundle.crt \\\n                 /usr/share/ssl/certs/ca-bundle.crt \\\n                 /usr/local/share/certs/ca-root-nss.crt \\\n                 /etc/ssl/cert.pem \\\n                 \"$cac\"; do\n          if test -f \"$a\"; then\n            ca=\"$a\"\n            break\n          fi\n        done\n      fi\n      AC_MSG_NOTICE([want $want_capath ca $ca])\n      if test \"x$want_capath\" = \"xunset\"; then\n        check_capath=\"/etc/ssl/certs\"\n      fi\n    else\n      dnl no option given and cross-compiling\n      AC_MSG_WARN([skipped the ca-cert path detection when cross-compiling])\n    fi\n  fi\n\n  if test \"x$ca\" = \"xno\" || test -f \"$ca\"; then\n    ca_warning=\"\"\n  fi\n\n  if test \"x$capath\" != \"xno\"; then\n    check_capath=\"$capath\"\n  fi\n\n  if test ! -z \"$check_capath\"; then\n    for a in \"$check_capath\"; do\n      if test -d \"$a\" && ls \"$a\"/[[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]].0 >/dev/null 2>/dev/null; then\n        if test \"x$capath\" = \"xno\"; then\n          capath=\"$a\"\n        fi\n        capath_warning=\"\"\n        break\n      fi\n    done\n  fi\n\n  if test \"x$capath\" = \"xno\"; then\n    capath_warning=\"\"\n  fi\n\n  if test \"x$ca\" != \"xno\"; then\n    CURL_CA_BUNDLE=\"$ca\"\n    AC_DEFINE_UNQUOTED(CURL_CA_BUNDLE, \"$ca\", [Location of default ca bundle])\n    AC_SUBST(CURL_CA_BUNDLE)\n    AC_MSG_RESULT([$ca])\n  fi\n  if test \"x$capath\" != \"xno\"; then\n    CURL_CA_PATH=\"\\\"$capath\\\"\"\n    AC_DEFINE_UNQUOTED(CURL_CA_PATH, \"$capath\", [Location of default ca path])\n    AC_MSG_RESULT([$capath (capath)])\n  fi\n  if test \"x$ca\" = \"xno\" && test \"x$capath\" = \"xno\"; then\n    AC_MSG_RESULT([no])\n  fi\n\n  AC_MSG_CHECKING([whether to use built-in CA store of SSL library])\n  AC_ARG_WITH(ca-fallback,\nAS_HELP_STRING([--with-ca-fallback], [Use the built-in CA store of the SSL library])\nAS_HELP_STRING([--without-ca-fallback], [Don't use the built-in CA store of the SSL library]),\n  [\n    if test \"x$with_ca_fallback\" != \"xyes\" -a \"x$with_ca_fallback\" != \"xno\"; then\n      AC_MSG_ERROR([--with-ca-fallback only allows yes or no as parameter])\n    fi\n  ],\n  [ with_ca_fallback=\"no\"])\n  AC_MSG_RESULT([$with_ca_fallback])\n  if test \"x$with_ca_fallback\" = \"xyes\"; then\n    if test \"x$OPENSSL_ENABLED\" != \"x1\" -a \"x$GNUTLS_ENABLED\" != \"x1\"; then\n      AC_MSG_ERROR([--with-ca-fallback only works with OpenSSL or GnuTLS])\n    fi\n    AC_DEFINE_UNQUOTED(CURL_CA_FALLBACK, 1, [define \"1\" to use built-in CA store of SSL library])\n  fi\n])\n\n\ndnl CURL_CHECK_CA_EMBED\ndnl -------------------------------------------------\ndnl Check if a ca-bundle should be embedded\n\nAC_DEFUN([CURL_CHECK_CA_EMBED], [\n\n  AC_MSG_CHECKING([CA cert bundle path to embed in the curl tool])\n\n  AC_ARG_WITH(ca-embed,\nAS_HELP_STRING([--with-ca-embed=FILE],\n  [Absolute path to a file containing CA certificates to embed in the curl tool (example: /etc/ca-bundle.crt)])\nAS_HELP_STRING([--without-ca-embed], [Don't embed a default CA bundle in the curl tool]),\n  [\n    want_ca_embed=\"$withval\"\n    if test \"x$want_ca_embed\" = \"xyes\"; then\n      AC_MSG_ERROR([--with-ca-embed=FILE requires a path to the CA bundle])\n    fi\n  ],\n  [ want_ca_embed=\"unset\" ])\n\n  CURL_CA_EMBED=''\n  if test \"x$want_ca_embed\" != \"xno\" -a \"x$want_ca_embed\" != \"xunset\" -a -f \"$want_ca_embed\"; then\n    CURL_CA_EMBED=\"$want_ca_embed\"\n    AC_SUBST(CURL_CA_EMBED)\n    AC_MSG_RESULT([$want_ca_embed])\n  else\n    AC_MSG_RESULT([no])\n  fi\n])\n\ndnl CURL_CHECK_WIN32_LARGEFILE\ndnl -------------------------------------------------\ndnl Check if curl's Win32 large file will be used\n\nAC_DEFUN([CURL_CHECK_WIN32_LARGEFILE], [\n  AC_REQUIRE([CURL_CHECK_NATIVE_WINDOWS])dnl\n  AC_MSG_CHECKING([whether build target supports Win32 file API])\n  curl_win32_file_api=\"no\"\n  if test \"$curl_cv_native_windows\" = \"yes\"; then\n    if test x\"$enable_largefile\" != \"xno\"; then\n      AC_COMPILE_IFELSE([\n        AC_LANG_PROGRAM([[\n        ]],[[\n          #if !defined(_WIN32_WCE) && (defined(__MINGW32__) || defined(_MSC_VER))\n            int dummy=1;\n          #else\n            #error Win32 large file API not supported.\n          #endif\n        ]])\n      ],[\n        curl_win32_file_api=\"win32_large_files\"\n      ])\n    fi\n    if test \"$curl_win32_file_api\" = \"no\"; then\n      AC_COMPILE_IFELSE([\n        AC_LANG_PROGRAM([[\n        ]],[[\n          #if defined(_WIN32_WCE) || defined(__MINGW32__) || defined(_MSC_VER)\n            int dummy=1;\n          #else\n            #error Win32 small file API not supported.\n          #endif\n        ]])\n      ],[\n        curl_win32_file_api=\"win32_small_files\"\n      ])\n    fi\n  fi\n  case \"$curl_win32_file_api\" in\n    win32_large_files)\n      AC_MSG_RESULT([yes (large file enabled)])\n      AC_DEFINE_UNQUOTED(USE_WIN32_LARGE_FILES, 1,\n        [Define to 1 if you are building a Windows target with large file support.])\n      ;;\n    win32_small_files)\n      AC_MSG_RESULT([yes (large file disabled)])\n      AC_DEFINE_UNQUOTED(USE_WIN32_SMALL_FILES, 1,\n        [Define to 1 if you are building a Windows target without large file support.])\n      ;;\n    *)\n      AC_MSG_RESULT([no])\n      ;;\n  esac\n])\n\ndnl CURL_CHECK_WIN32_CRYPTO\ndnl -------------------------------------------------\ndnl Check if curl's Win32 crypto lib can be used\n\nAC_DEFUN([CURL_CHECK_WIN32_CRYPTO], [\n  AC_REQUIRE([CURL_CHECK_NATIVE_WINDOWS])dnl\n  AC_MSG_CHECKING([whether build target supports Win32 crypto API])\n  curl_win32_crypto_api=\"no\"\n  if test \"$curl_cv_native_windows\" = \"yes\"; then\n    AC_COMPILE_IFELSE([\n      AC_LANG_PROGRAM([[\n        #undef inline\n        #ifndef WIN32_LEAN_AND_MEAN\n        #define WIN32_LEAN_AND_MEAN\n        #endif\n        #include <windows.h>\n        #include <wincrypt.h>\n      ]],[[\n        HCRYPTPROV hCryptProv;\n        if(CryptAcquireContext(&hCryptProv, NULL, NULL, PROV_RSA_FULL,\n                               CRYPT_VERIFYCONTEXT | CRYPT_SILENT)) {\n          CryptReleaseContext(hCryptProv, 0);\n        }\n      ]])\n    ],[\n      curl_win32_crypto_api=\"yes\"\n    ])\n  fi\n  case \"$curl_win32_crypto_api\" in\n    yes)\n      AC_MSG_RESULT([yes])\n      AC_DEFINE_UNQUOTED(USE_WIN32_CRYPTO, 1,\n        [Define to 1 if you are building a Windows target with crypto API support.])\n      USE_WIN32_CRYPTO=1\n      ;;\n    *)\n      AC_MSG_RESULT([no])\n      ;;\n  esac\n])\n\ndnl CURL_EXPORT_PCDIR ($pcdir)\ndnl ------------------------\ndnl if $pcdir is not empty, set PKG_CONFIG_LIBDIR to $pcdir and export\ndnl\ndnl we need this macro since pkg-config distinguishes among empty and unset\ndnl variable while checking PKG_CONFIG_LIBDIR\ndnl\n\nAC_DEFUN([CURL_EXPORT_PCDIR], [\n  if test -n \"$1\"; then\n    PKG_CONFIG_LIBDIR=\"$1\"\n    export PKG_CONFIG_LIBDIR\n  fi\n])\n\ndnl CURL_CHECK_PKGCONFIG ($module, [$pcdir])\ndnl ------------------------\ndnl search for the pkg-config tool. Set the PKGCONFIG variable to hold the\ndnl path to it, or 'no' if not found/present.\ndnl\ndnl If pkg-config is present, check that it has info about the $module or\ndnl return \"no\" anyway!\ndnl\ndnl Optionally PKG_CONFIG_LIBDIR may be given as $pcdir.\ndnl\n\nAC_DEFUN([CURL_CHECK_PKGCONFIG], [\n  if test -n \"$PKG_CONFIG\"; then\n    PKGCONFIG=\"$PKG_CONFIG\"\n  else\n    AC_PATH_TOOL([PKGCONFIG], [pkg-config], [no],\n      [$PATH:/usr/bin:/usr/local/bin])\n  fi\n\n  if test \"x$PKGCONFIG\" != \"xno\"; then\n    AC_MSG_CHECKING([for $1 options with pkg-config])\n    dnl ask pkg-config about $1\n    itexists=`CURL_EXPORT_PCDIR([$2]) dnl\n      $PKGCONFIG --exists $1 >/dev/null 2>&1 && echo 1`\n\n    if test -z \"$itexists\"; then\n      dnl pkg-config does not have info about the given module! set the\n      dnl variable to 'no'\n      PKGCONFIG=\"no\"\n      AC_MSG_RESULT([no])\n    else\n      AC_MSG_RESULT([found])\n    fi\n  fi\n])\n\n\ndnl CURL_PREPARE_CONFIGUREHELP_PM\ndnl -------------------------------------------------\ndnl Prepare test harness configurehelp.pm module, defining and\ndnl initializing some perl variables with values which are known\ndnl when the configure script runs. For portability reasons, test\ndnl harness needs information on how to run the C preprocessor.\n\nAC_DEFUN([CURL_PREPARE_CONFIGUREHELP_PM], [\n  AC_REQUIRE([AC_PROG_CPP])dnl\n  tmp_cpp=`eval echo \"$ac_cpp\" 2>/dev/null`\n  if test -z \"$tmp_cpp\"; then\n    tmp_cpp='cpp'\n  fi\n  AC_SUBST(CURL_CPP, $tmp_cpp)\n])\n\n\ndnl CURL_PREPARE_BUILDINFO\ndnl -------------------------------------------------\ndnl Save build info for test runner to pick up and log\n\nAC_DEFUN([CURL_PREPARE_BUILDINFO], [\n  curl_pflags=\"\"\n  case $host in\n    *-apple-*) curl_pflags=\"${curl_pflags} APPLE\";;\n  esac\n  if test \"$curl_cv_native_windows\" = 'yes'; then\n    curl_pflags=\"${curl_pflags} WIN32\"\n  else\n    case $host in\n      *-*-*bsd*|*-*-aix*|*-*-hpux*|*-*-interix*|*-*-irix*|*-*-linux*|*-*-solaris*|*-*-sunos*|*-apple-*|*-*-cygwin*|*-*-msys*)\n        curl_pflags=\"${curl_pflags} UNIX\";;\n    esac\n    case $host in\n      *-*-*bsd*)\n        curl_pflags=\"${curl_pflags} BSD\";;\n    esac\n  fi\n  if test \"$curl_cv_cygwin\" = 'yes'; then\n    curl_pflags=\"${curl_pflags} CYGWIN\"\n  fi\n  case $host_os in\n    msys*) curl_pflags=\"${curl_pflags} MSYS\";;\n    msdos*) curl_pflags=\"${curl_pflags} DOS\";;\n    amiga*) curl_pflags=\"${curl_pflags} AMIGA\";;\n  esac\n  if test \"x$compiler_id\" = 'xGNU_C'; then\n    curl_pflags=\"${curl_pflags} GCC\"\n  fi\n  case $host_os in\n    mingw*) curl_pflags=\"${curl_pflags} MINGW\";;\n  esac\n  if test \"x$cross_compiling\" = 'xyes'; then\n    curl_pflags=\"${curl_pflags} CROSS\"\n  fi\n  squeeze curl_pflags\n  curl_buildinfo=\"\nbuildinfo.configure.tool: configure\nbuildinfo.configure.args: $ac_configure_args\nbuildinfo.host: $build\nbuildinfo.host.cpu: $build_cpu\nbuildinfo.host.os: $build_os\nbuildinfo.target: $host\nbuildinfo.target.cpu: $host_cpu\nbuildinfo.target.os: $host_os\nbuildinfo.target.flags: $curl_pflags\nbuildinfo.compiler: $compiler_id\nbuildinfo.compiler.version: $compiler_ver\nbuildinfo.sysroot: $lt_sysroot\"\n])\n\n\ndnl CURL_CPP_P\ndnl\ndnl Check if $cpp -P should be used for extract define values due to gcc 5\ndnl splitting up strings and defines between line outputs. gcc by default\ndnl (without -P) will show TEST EINVAL TEST as\ndnl\ndnl # 13 \"conftest.c\"\ndnl TEST\ndnl # 13 \"conftest.c\" 3 4\ndnl     22\ndnl # 13 \"conftest.c\"\ndnl            TEST\n\nAC_DEFUN([CURL_CPP_P], [\n  AC_MSG_CHECKING([if cpp -P is needed])\n  AC_EGREP_CPP([TEST.*TEST], [\n #include <errno.h>\nTEST EINVAL TEST\n  ], [cpp=no], [cpp=yes])\n  AC_MSG_RESULT([$cpp])\n\n  dnl we need cpp -P so check if it works then\n  if test \"x$cpp\" = \"xyes\"; then\n    AC_MSG_CHECKING([if cpp -P works])\n    OLDCPPFLAGS=$CPPFLAGS\n    CPPFLAGS=\"$CPPFLAGS -P\"\n    AC_EGREP_CPP([TEST.*TEST], [\n #include <errno.h>\nTEST EINVAL TEST\n    ], [cpp_p=yes], [cpp_p=no])\n    AC_MSG_RESULT([$cpp_p])\n\n    if test \"x$cpp_p\" = \"xno\"; then\n      AC_MSG_WARN([failed to figure out cpp -P alternative])\n      # without -P\n      CPPPFLAG=\"\"\n    else\n      # with -P\n      CPPPFLAG=\"-P\"\n    fi\n    dnl restore CPPFLAGS\n    CPPFLAGS=$OLDCPPFLAGS\n  else\n    # without -P\n    CPPPFLAG=\"\"\n  fi\n])\n\n\ndnl CURL_DARWIN_CFLAGS\ndnl\ndnl Set -Werror=partial-availability to detect possible breaking code\ndnl with very low deployment targets.\ndnl\n\nAC_DEFUN([CURL_DARWIN_CFLAGS], [\n\n  tst_cflags=\"no\"\n  case $host in\n    *-apple-*)\n      tst_cflags=\"yes\"\n      ;;\n  esac\n\n  AC_MSG_CHECKING([for good-to-use Darwin CFLAGS])\n  AC_MSG_RESULT([$tst_cflags]);\n\n  if test \"$tst_cflags\" = \"yes\"; then\n    old_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -Werror=partial-availability\"\n    AC_MSG_CHECKING([whether $CC accepts -Werror=partial-availability])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM()],\n      [AC_MSG_RESULT([yes])],\n      [AC_MSG_RESULT([no])\n      CFLAGS=$old_CFLAGS])\n  fi\n\n])\n\n\ndnl CURL_SUPPORTS_BUILTIN_AVAILABLE\ndnl\ndnl Check to see if the compiler supports __builtin_available. This built-in\ndnl compiler function first appeared in Apple LLVM 9.0.0. It's so new that, at\ndnl the time this macro was written, the function was not yet documented. Its\ndnl purpose is to return true if the code is running under a certain OS version\ndnl or later.\n\nAC_DEFUN([CURL_SUPPORTS_BUILTIN_AVAILABLE], [\n  AC_MSG_CHECKING([to see if the compiler supports __builtin_available()])\n  AC_COMPILE_IFELSE([\n    AC_LANG_PROGRAM([[\n    ]],[[\n      if(__builtin_available(macOS 10.12, iOS 5.0, *)) {}\n    ]])\n  ],[\n    AC_MSG_RESULT([yes])\n    AC_DEFINE_UNQUOTED(HAVE_BUILTIN_AVAILABLE, 1,\n      [Define to 1 if you have the __builtin_available function.])\n  ],[\n    AC_MSG_RESULT([no])\n  ])\n])\n"
        },
        {
          "name": "appveyor.sh",
          "type": "blob",
          "size": 5.24,
          "content": "#!/usr/bin/env bash\n#***************************************************************************\n#                                  _   _ ____  _\n#  Project                     ___| | | |  _ \\| |\n#                             / __| | | | |_) | |\n#                            | (__| |_| |  _ <| |___\n#                             \\___|\\___/|_| \\_\\_____|\n#\n# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n#\n# This software is licensed as described in the file COPYING, which\n# you should have received as part of this distribution. The terms\n# are also available at https://curl.se/docs/copyright.html.\n#\n# You may opt to use, copy, modify, merge, publish, distribute and/or sell\n# copies of the Software, and permit persons to whom the Software is\n# furnished to do so, under the terms of the COPYING file.\n#\n# This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\n# KIND, either express or implied.\n#\n# SPDX-License-Identifier: curl\n#\n###########################################################################\n\n# shellcheck disable=SC3040,SC2039\nset -eux; [ -n \"${BASH:-}${ZSH_NAME:-}\" ] && set -o pipefail\n\n# build\n\nif [ \"${APPVEYOR_BUILD_WORKER_IMAGE}\" = 'Visual Studio 2022' ]; then\n  openssl_root_win='C:/OpenSSL-v33-Win64'\nelse\n  openssl_root_win='C:/OpenSSL-v111-Win64'\nfi\nopenssl_root=\"$(cygpath \"${openssl_root_win}\")\"\n\nif [ \"${BUILD_SYSTEM}\" = 'CMake' ]; then\n  options=''\n  [[ \"${TARGET:-}\" = *'ARM64'* ]] && SKIP_RUN='ARM64 architecture'\n  [ -n \"${TOOLSET:-}\" ] && options+=\" -T ${TOOLSET}\"\n  [ \"${OPENSSL}\" = 'ON' ] && options+=\" -DOPENSSL_ROOT_DIR=${openssl_root_win}\"\n  [ -n \"${CURLDEBUG:-}\" ] && options+=\" -DENABLE_CURLDEBUG=${CURLDEBUG}\"\n  [ \"${PRJ_CFG}\" = 'Debug' ] && options+=' -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG='\n  [ \"${PRJ_CFG}\" = 'Release' ] && options+=' -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE='\n  [[ \"${PRJ_GEN}\" = *'Visual Studio'* ]] && options+=' -DCMAKE_VS_GLOBALS=TrackFileAccess=false'\n  # shellcheck disable=SC2086\n  cmake -B _bld \"-G${PRJ_GEN}\" ${TARGET:-} ${options} \\\n    \"-DCURL_USE_OPENSSL=${OPENSSL}\" \\\n    \"-DCURL_USE_SCHANNEL=${SCHANNEL}\" \\\n    \"-DHTTP_ONLY=${HTTP_ONLY}\" \\\n    \"-DBUILD_SHARED_LIBS=${SHARED}\" \\\n    \"-DCMAKE_UNITY_BUILD=${UNITY}\" \\\n    '-DCURL_TEST_BUNDLES=ON' \\\n    '-DCURL_WERROR=ON' \\\n    \"-DENABLE_DEBUG=${DEBUG}\" \\\n    \"-DENABLE_UNICODE=${ENABLE_UNICODE}\" \\\n    '-DCMAKE_INSTALL_PREFIX=C:/curl' \\\n    \"-DCMAKE_BUILD_TYPE=${PRJ_CFG}\" \\\n    '-DCURL_USE_LIBPSL=OFF'\n  if false; then\n    cat _bld/CMakeFiles/CMakeConfigureLog.yaml 2>/dev/null || true\n  fi\n  echo 'curl_config.h'; grep -F '#define' _bld/lib/curl_config.h | sort || true\n  # shellcheck disable=SC2086\n  cmake --build _bld --config \"${PRJ_CFG}\" --parallel 2 -- ${BUILD_OPT:-}\n  [ \"${SHARED}\" = 'ON' ] && PATH=\"$PWD/_bld/lib:$PATH\"\n  [ \"${OPENSSL}\" = 'ON' ] && PATH=\"${openssl_root}:$PATH\"\n  curl='_bld/src/curl.exe'\nelif [ \"${BUILD_SYSTEM}\" = 'VisualStudioSolution' ]; then\n  (\n    cd projects\n    ./generate.bat \"${VC_VERSION}\"\n    msbuild.exe -maxcpucount \"-property:Configuration=${PRJ_CFG}\" \"Windows/${VC_VERSION}/curl-all.sln\"\n  )\n  curl=\"build/Win32/${VC_VERSION}/${PRJ_CFG}/curld.exe\"\nelif [ \"${BUILD_SYSTEM}\" = 'winbuild_vs2015' ]; then\n  ./buildconf.bat\n  (\n    cd winbuild\n    cat << EOF > _make.bat\n      call \"C:/Program Files/Microsoft SDKs/Windows/v7.1/Bin/SetEnv.cmd\" /x64\n      call \"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/vcvarsall.bat\" x86_amd64\n      nmake -f Makefile.vc mode=dll VC=14 \"SSL_PATH=${openssl_root_win}\" WITH_SSL=dll MACHINE=x64 DEBUG=${DEBUG} ENABLE_UNICODE=${ENABLE_UNICODE} WINBUILD_ACKNOWLEDGE_DEPRECATED=yes\nEOF\n    ./_make.bat\n    rm _make.bat\n  )\n  curl=\"builds/libcurl-vc14-x64-${PATHPART}-dll-ssl-dll-ipv6-sspi/bin/curl.exe\"\nelif [ \"${BUILD_SYSTEM}\" = 'winbuild_vs2017' ]; then\n  ./buildconf.bat\n  (\n    cd winbuild\n    cat << EOF > _make.bat\n      call \"C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Auxiliary/Build/vcvars64.bat\"\n      nmake -f Makefile.vc mode=dll VC=14.10 \"SSL_PATH=${openssl_root_win}\" WITH_SSL=dll MACHINE=x64 DEBUG=${DEBUG} ENABLE_UNICODE=${ENABLE_UNICODE} WINBUILD_ACKNOWLEDGE_DEPRECATED=yes\nEOF\n    ./_make.bat\n    rm _make.bat\n  )\n  curl=\"builds/libcurl-vc14.10-x64-${PATHPART}-dll-ssl-dll-ipv6-sspi/bin/curl.exe\"\nfi\n\nfind . -name '*.exe' -o -name '*.dll'\nif [ -z \"${SKIP_RUN:-}\" ]; then\n  \"${curl}\" --disable --version\nelse\n  echo \"Skip running curl.exe. Reason: ${SKIP_RUN}\"\nfi\n\n# build tests\n\nif [ \"${TFLAGS}\" != 'skipall' ] && \\\n   [ \"${BUILD_SYSTEM}\" = 'CMake' ]; then\n  cmake --build _bld --config \"${PRJ_CFG}\" --parallel 2 --target testdeps\nfi\n\n# run tests\n\nif [ \"${TFLAGS}\" != 'skipall' ] && \\\n   [ \"${TFLAGS}\" != 'skiprun' ]; then\n  if [ -x \"$(cygpath \"${SYSTEMROOT}/System32/curl.exe\")\" ]; then\n    TFLAGS+=\" -ac $(cygpath \"${SYSTEMROOT}/System32/curl.exe\")\"\n  elif [ -x \"$(cygpath 'C:/msys64/usr/bin/curl.exe')\" ]; then\n    TFLAGS+=\" -ac $(cygpath 'C:/msys64/usr/bin/curl.exe')\"\n  fi\n  TFLAGS+=' -j0'\n  if [ \"${BUILD_SYSTEM}\" = 'CMake' ]; then\n    cmake --build _bld --config \"${PRJ_CFG}\" --target test-ci\n  else\n    (\n      TFLAGS=\"-a -p !flaky -r -rm ${TFLAGS}\"\n      cd _bld/tests\n      ./runtests.pl\n    )\n  fi\nfi\n\n# build examples\n\nif [ \"${EXAMPLES}\" = 'ON' ] && \\\n   [ \"${BUILD_SYSTEM}\" = 'CMake' ]; then\n  cmake --build _bld --config \"${PRJ_CFG}\" --parallel 2 --target curl-examples\nfi\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 8.33,
          "content": "#***************************************************************************\n#                                  _   _ ____  _\n#  Project                     ___| | | |  _ \\| |\n#                             / __| | | | |_) | |\n#                            | (__| |_| |  _ <| |___\n#                             \\___|\\___/|_| \\_\\_____|\n#\n# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n#\n# This software is licensed as described in the file COPYING, which\n# you should have received as part of this distribution. The terms\n# are also available at https://curl.se/docs/copyright.html.\n#\n# You may opt to use, copy, modify, merge, publish, distribute and/or sell\n# copies of the Software, and permit persons to whom the Software is\n# furnished to do so, under the terms of the COPYING file.\n#\n# This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\n# KIND, either express or implied.\n#\n# SPDX-License-Identifier: curl\n#\n###########################################################################\n\n# https://ci.appveyor.com/project/curlorg/curl/history\n# AppVeyor configuration:\n#   https://www.appveyor.com/docs/appveyor-yml/\n# AppVeyor worker images:\n#   https://www.appveyor.com/docs/windows-images-software/\n\nversion: 7.50.0.{build}\n\nenvironment:\n  UNITY: 'ON'\n  OPENSSL: 'OFF'\n  DEBUG: 'ON'\n  SHARED: 'OFF'\n  HTTP_ONLY: 'OFF'\n  TFLAGS: 'skiprun'\n  EXAMPLES: 'OFF'\n\n  matrix:\n\n    # generated CMake-based Visual Studio builds\n\n    - job_name: 'CMake, VS2022, Release, x64, OpenSSL 3.3, Shared, Build-tests'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2022'\n      BUILD_SYSTEM: CMake\n      PRJ_GEN: 'Visual Studio 17 2022'\n      TARGET: '-A x64'\n      PRJ_CFG: Release\n      OPENSSL: 'ON'\n      SCHANNEL: 'OFF'\n      ENABLE_UNICODE: 'OFF'\n      SHARED: 'ON'\n    - job_name: 'CMake, VS2022, Release, arm64, Schannel, Static, Build-tests'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2022'\n      BUILD_SYSTEM: CMake\n      PRJ_GEN: 'Visual Studio 17 2022'\n      TARGET: '-A ARM64'\n      PRJ_CFG: Release\n      SCHANNEL: 'ON'\n      ENABLE_UNICODE: 'OFF'\n      DEBUG: 'OFF'\n      CURLDEBUG: 'ON'\n    - job_name: 'CMake, VS2010, Release, x64, Schannel, Static, Build-tests'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015'\n      BUILD_SYSTEM: CMake\n      PRJ_GEN: 'Visual Studio 10 2010'\n      TARGET: '-A x64'\n      PRJ_CFG: Release\n      SCHANNEL: 'ON'\n      ENABLE_UNICODE: 'OFF'\n      SHARED: 'ON'\n    - job_name: 'CMake, VS2010, Debug, x64, Schannel, Static, Build-tests & examples'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015'\n      BUILD_SYSTEM: CMake\n      PRJ_GEN: 'Visual Studio 10 2010'\n      TARGET: '-A x64'\n      PRJ_CFG: Debug\n      SCHANNEL: 'ON'\n      ENABLE_UNICODE: 'OFF'\n      SHARED: 'ON'\n      EXAMPLES: 'ON'\n    - job_name: 'CMake, VS2012, Debug, x64, OpenSSL 1.1.1, Build-tests'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015'\n      BUILD_SYSTEM: CMake\n      PRJ_GEN: 'Visual Studio 11 2012'\n      TARGET: '-A x64'\n      PRJ_CFG: Debug\n      OPENSSL: 'ON'\n      SCHANNEL: 'OFF'\n      ENABLE_UNICODE: 'OFF'\n      SHARED: 'ON'\n    - job_name: 'CMake, VS2013, Debug, x64, OpenSSL 1.1.1, Build-only'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015'\n      BUILD_SYSTEM: CMake\n      PRJ_GEN: 'Visual Studio 12 2013'\n      TARGET: '-A x64'\n      PRJ_CFG: Debug\n      OPENSSL: 'ON'\n      SCHANNEL: 'OFF'\n      ENABLE_UNICODE: 'OFF'\n      SHARED: 'ON'\n      TFLAGS: 'skipall'\n    - job_name: 'CMake, VS2015, Debug, x64, OpenSSL 1.1.1, Build-only'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015'\n      BUILD_SYSTEM: CMake\n      PRJ_GEN: 'Visual Studio 14 2015'\n      TARGET: '-A x64'\n      PRJ_CFG: Debug\n      OPENSSL: 'ON'\n      SCHANNEL: 'OFF'\n      ENABLE_UNICODE: 'OFF'\n      SHARED: 'ON'\n      TFLAGS: 'skipall'\n    - job_name: 'CMake, VS2017, Debug, x64, OpenSSL 1.1.1, Build-only'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2017'\n      BUILD_SYSTEM: CMake\n      PRJ_GEN: 'Visual Studio 15 2017'\n      TARGET: '-A x64'\n      PRJ_CFG: Debug\n      OPENSSL: 'ON'\n      SCHANNEL: 'OFF'\n      ENABLE_UNICODE: 'OFF'\n      SHARED: 'ON'\n      TFLAGS: 'skipall'\n    - job_name: 'CMake, VS2022, Debug, x64, Schannel, Static, Unicode, Build-tests & examples, clang-cl'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2022'\n      BUILD_SYSTEM: CMake\n      PRJ_GEN: 'Visual Studio 17 2022'\n      TARGET: '-A x64'\n      PRJ_CFG: Debug\n      SCHANNEL: 'ON'\n      ENABLE_UNICODE: 'ON'\n      EXAMPLES: 'ON'\n      TOOLSET: 'ClangCl'\n    - job_name: 'CMake, VS2022, Debug, x64, Schannel, Static, Unicode, Build-tests'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2022'\n      BUILD_SYSTEM: CMake\n      PRJ_GEN: 'Visual Studio 17 2022'\n      TARGET: '-A x64'\n      PRJ_CFG: Debug\n      SCHANNEL: 'ON'\n      ENABLE_UNICODE: 'ON'\n    - job_name: 'CMake, VS2022, Release, x64, Schannel, Shared, Unicode, DEBUGBUILD, no-CURLDEBUG, Build-tests'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2022'\n      BUILD_SYSTEM: CMake\n      PRJ_GEN: 'Visual Studio 17 2022'\n      TARGET: '-A x64'\n      PRJ_CFG: Release\n      SCHANNEL: 'ON'\n      ENABLE_UNICODE: 'ON'\n      SHARED: 'ON'\n      CURLDEBUG: 'OFF'\n    - job_name: 'CMake, VS2022, Debug, x64, no SSL, Static, Build-tests'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2022'\n      BUILD_SYSTEM: CMake\n      PRJ_GEN: 'Visual Studio 17 2022'\n      TARGET: '-A x64'\n      PRJ_CFG: Debug\n      SCHANNEL: 'OFF'\n      ENABLE_UNICODE: 'OFF'\n    - job_name: 'CMake, VS2022, Debug, x64, no SSL, Static, HTTP only, Build-tests'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2022'\n      BUILD_SYSTEM: CMake\n      PRJ_GEN: 'Visual Studio 17 2022'\n      TARGET: '-A x64'\n      PRJ_CFG: Debug\n      SCHANNEL: 'OFF'\n      ENABLE_UNICODE: 'OFF'\n      HTTP_ONLY: 'ON'\n\n    # winbuild-based builds\n\n    - job_name: 'winbuild, VS2015, Debug, x64, OpenSSL 1.1.1, Build-only'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015'\n      BUILD_SYSTEM: winbuild_vs2015\n      DEBUG: 'yes'\n      PATHPART: debug\n      ENABLE_UNICODE: 'no'\n    - job_name: 'winbuild, VS2015, Release, x64, OpenSSL 1.1.1, Build-only'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015'\n      BUILD_SYSTEM: winbuild_vs2015\n      DEBUG: 'no'\n      PATHPART: release\n      ENABLE_UNICODE: 'no'\n    - job_name: 'winbuild, VS2017, Debug, x64, OpenSSL 1.1.1, Build-only'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2017'\n      BUILD_SYSTEM: winbuild_vs2017\n      DEBUG: 'yes'\n      PATHPART: debug\n      ENABLE_UNICODE: 'no'\n    - job_name: 'winbuild, VS2017, Release, x64, OpenSSL 1.1.1, Build-only'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2017'\n      BUILD_SYSTEM: winbuild_vs2017\n      DEBUG: 'no'\n      PATHPART: release\n      ENABLE_UNICODE: 'no'\n    - job_name: 'winbuild, VS2015, Debug, x64, OpenSSL 1.1.1, Unicode, Build-only'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015'\n      BUILD_SYSTEM: winbuild_vs2015\n      DEBUG: 'yes'\n      PATHPART: debug\n      ENABLE_UNICODE: 'yes'\n    - job_name: 'winbuild, VS2015, Release, x64, OpenSSL 1.1.1, Unicode, Build-only'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015'\n      BUILD_SYSTEM: winbuild_vs2015\n      DEBUG: 'no'\n      PATHPART: release\n      ENABLE_UNICODE: 'yes'\n    - job_name: 'winbuild, VS2017, Debug, x64, OpenSSL 1.1.1, Unicode, Build-only'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2017'\n      BUILD_SYSTEM: winbuild_vs2017\n      DEBUG: 'yes'\n      PATHPART: debug\n      ENABLE_UNICODE: 'yes'\n    - job_name: 'winbuild, VS2017, Release, x64, OpenSSL 1.1.1, Unicode, Build-only'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2017'\n      BUILD_SYSTEM: winbuild_vs2017\n      DEBUG: 'no'\n      PATHPART: release\n      ENABLE_UNICODE: 'yes'\n\n    # generated VisualStudioSolution-based builds\n\n    - job_name: 'VisualStudioSolution, VS2013, Debug, x86, Schannel, Build-only'\n      APPVEYOR_BUILD_WORKER_IMAGE: 'Visual Studio 2015'\n      BUILD_SYSTEM: VisualStudioSolution\n      PRJ_CFG: 'DLL Debug - DLL Windows SSPI - DLL WinIDN'\n      VC_VERSION: VC12\n\ninstall:\n  - ps: $env:PATH = \"C:/msys64/usr/bin;$env:PATH\"\n\nbuild_script:\n  - cmd: sh -c ./appveyor.sh\n\nclone_depth: 10\n\n# select branches to avoid testing feature branches twice (as branch and as pull request)\nbranches:\n  only:\n    - master\n    - /\\/ci$/\n\nskip_commits:\n  files:\n    - '.circleci/*'\n    - '.github/**/*'\n    - 'packages/**/*'\n    - 'plan9/**/*'\n\n#artifacts:\n#  - path: '**/curl.exe'\n#    name: curl\n#  - path: '**/*curl*.dll'\n#    name: libcurl dll\n"
        },
        {
          "name": "buildconf",
          "type": "blob",
          "size": 0.21,
          "content": "#!/bin/sh\n#\n# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n#\n# SPDX-License-Identifier: curl\n\necho \"*** Do not use buildconf. Instead, just use: autoreconf -fi\" >&2\nexec ${AUTORECONF:-autoreconf} -fi \"${@}\"\n"
        },
        {
          "name": "buildconf.bat",
          "type": "blob",
          "size": 5.91,
          "content": "@echo off\nrem ***************************************************************************\nrem *                                  _   _ ____  _\nrem *  Project                     ___| | | |  _ \\| |\nrem *                             / __| | | | |_) | |\nrem *                            | (__| |_| |  _ <| |___\nrem *                             \\___|\\___/|_| \\_\\_____|\nrem *\nrem * Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\nrem *\nrem * This software is licensed as described in the file COPYING, which\nrem * you should have received as part of this distribution. The terms\nrem * are also available at https://curl.se/docs/copyright.html.\nrem *\nrem * You may opt to use, copy, modify, merge, publish, distribute and/or sell\nrem * copies of the Software, and permit persons to whom the Software is\nrem * furnished to do so, under the terms of the COPYING file.\nrem *\nrem * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\nrem * KIND, either express or implied.\nrem *\nrem * SPDX-License-Identifier: curl\nrem *\nrem ***************************************************************************\n\nrem NOTES\nrem\nrem This batch file must be used to set up a git tree to build on systems where\nrem there is no autotools support (i.e. DOS and Windows).\nrem\n\n:begin\n  rem Set our variables\n  if \"%OS%\" == \"Windows_NT\" setlocal\n  set MODE=GENERATE\n\n  rem Switch to this batch file's directory\n  cd /d \"%~0\\..\" 1>NUL 2>&1\n\n  rem Check we are running from a curl git repository\n  if not exist GIT-INFO.md goto norepo\n\n:parseArgs\n  if \"%~1\" == \"\" goto start\n\n  if /i \"%~1\" == \"-clean\" (\n    set MODE=CLEAN\n  ) else if /i \"%~1\" == \"-?\" (\n    goto syntax\n  ) else if /i \"%~1\" == \"-h\" (\n    goto syntax\n  ) else if /i \"%~1\" == \"-help\" (\n    goto syntax\n  ) else (\n    goto unknown\n  )\n\n  shift & goto parseArgs\n\n:start\n  if \"%MODE%\" == \"GENERATE\" (\n    echo.\n    echo Generating prerequisite files\n\n    call :generate\n    if errorlevel 3 goto nogenhugehelp\n    if errorlevel 2 goto nogenmakefile\n    if errorlevel 1 goto warning\n\n  ) else (\n    echo.\n    echo Removing prerequisite files\n\n    call :clean\n    if errorlevel 2 goto nocleanhugehelp\n    if errorlevel 1 goto nocleanmakefile\n  )\n\n  goto success\n\nrem Main generate function.\nrem\nrem Returns:\nrem\nrem 0 - success\nrem 1 - success with simplified tool_hugehelp.c\nrem 2 - failed to generate Makefile\nrem 3 - failed to generate tool_hugehelp.c\nrem\n:generate\n  if \"%OS%\" == \"Windows_NT\" setlocal\n  set BASIC_HUGEHELP=0\n\n  rem Create Makefile\n  echo * %CD%\\Makefile\n  if exist Makefile.dist (\n    copy /Y Makefile.dist Makefile 1>NUL 2>&1\n    if errorlevel 1 (\n      if \"%OS%\" == \"Windows_NT\" endlocal\n      exit /B 2\n    )\n  )\n\n  rem Create tool_hugehelp.c\n  echo * %CD%\\src\\tool_hugehelp.c\n  call :genHugeHelp\n  if errorlevel 2 (\n    if \"%OS%\" == \"Windows_NT\" endlocal\n    exit /B 3\n  )\n  if errorlevel 1 (\n    set BASIC_HUGEHELP=1\n  )\n  cmd /c exit 0\n\n  if \"%BASIC_HUGEHELP%\" == \"1\" (\n    if \"%OS%\" == \"Windows_NT\" endlocal\n    exit /B 1\n  )\n\n  if \"%OS%\" == \"Windows_NT\" endlocal\n  exit /B 0\n\nrem Main clean function.\nrem\nrem Returns:\nrem\nrem 0 - success\nrem 1 - failed to clean Makefile\nrem 2 - failed to clean tool_hugehelp.c\nrem\n:clean\n  rem Remove Makefile\n  echo * %CD%\\Makefile\n  if exist Makefile (\n    del Makefile 2>NUL\n    if exist Makefile (\n      exit /B 1\n    )\n  )\n\n  rem Remove tool_hugehelp.c\n  echo * %CD%\\src\\tool_hugehelp.c\n  if exist src\\tool_hugehelp.c (\n    del src\\tool_hugehelp.c 2>NUL\n    if exist src\\tool_hugehelp.c (\n      exit /B 2\n    )\n  )\n\n  exit /B\n\nrem Function to generate src\\tool_hugehelp.c\nrem\nrem Returns:\nrem\nrem 0 - full tool_hugehelp.c generated\nrem 1 - simplified tool_hugehelp.c\nrem 2 - failure\nrem\n:genHugeHelp\n  if \"%OS%\" == \"Windows_NT\" setlocal\n  set LC_ALL=C\n  set BASIC=1\n\n  if exist src\\tool_hugehelp.c.cvs (\n    copy /Y src\\tool_hugehelp.c.cvs src\\tool_hugehelp.c 1>NUL 2>&1\n  ) else (\n    echo #include \"tool_setup.h\"> src\\tool_hugehelp.c\n    echo #include \"tool_hugehelp.h\">> src\\tool_hugehelp.c\n    echo.>> src\\tool_hugehelp.c\n    echo void hugehelp(void^)>> src\\tool_hugehelp.c\n    echo {>> src\\tool_hugehelp.c\n    echo #ifdef USE_MANUAL>> src\\tool_hugehelp.c\n    echo   fputs(\"Built-in manual not included\\n\", stdout^);>> src\\tool_hugehelp.c\n    echo #endif>> src\\tool_hugehelp.c\n    echo }>> src\\tool_hugehelp.c\n  )\n\n  findstr \"/C:void hugehelp(void)\" src\\tool_hugehelp.c 1>NUL 2>&1\n  if errorlevel 1 (\n    if \"%OS%\" == \"Windows_NT\" endlocal\n    exit /B 2\n  )\n\n  if \"%BASIC%\" == \"1\" (\n    if \"%OS%\" == \"Windows_NT\" endlocal\n    exit /B 1\n  )\n\n  if \"%OS%\" == \"Windows_NT\" endlocal\n  exit /B 0\n\nrem Function to clean-up local variables under DOS, Windows 3.x and\nrem Windows 9x as setlocal isn't available until Windows NT\nrem\n:dosCleanup\n  set MODE=\n  set BASIC_HUGEHELP=\n  set LC_ALL\n  set BASIC=\n\n  exit /B\n\n:syntax\n  rem Display the help\n  echo.\n  echo Usage: buildconf [-clean]\n  echo.\n  echo -clean    - Removes the files\n  goto error\n\n:unknown\n  echo.\n  echo Error: Unknown argument '%1'\n  goto error\n\n:norepo\n  echo.\n  echo Error: This batch file should only be used with a curl git repository\n  goto error\n\n:nogenmakefile\n  echo.\n  echo Error: Unable to generate Makefile\n  goto error\n\n:nogenhugehelp\n  echo.\n  echo Error: Unable to generate src\\tool_hugehelp.c\n  goto error\n\n:nocleanmakefile\n  echo.\n  echo Error: Unable to clean Makefile\n  goto error\n\n:nocleanhugehelp\n  echo.\n  echo Error: Unable to clean src\\tool_hugehelp.c\n  goto error\n\n:warning\n  echo.\n  echo Warning: The curl manual could not be integrated in the source. This means when\n  echo you build curl the manual will not be available (curl --manual^). Integration of\n  echo the manual is not required and a summary of the options will still be available\n  echo (curl --help^). To integrate the manual build with configure or cmake.\n  goto success\n\n:error\n  if \"%OS%\" == \"Windows_NT\" (\n    endlocal\n  ) else (\n    call :dosCleanup\n  )\n  exit /B 1\n\n:success\n  if \"%OS%\" == \"Windows_NT\" (\n    endlocal\n  ) else (\n    call :dosCleanup\n  )\n  exit /B 0\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 156.15,
          "content": "#***************************************************************************\n#                                  _   _ ____  _\n#  Project                     ___| | | |  _ \\| |\n#                             / __| | | | |_) | |\n#                            | (__| |_| |  _ <| |___\n#                             \\___|\\___/|_| \\_\\_____|\n#\n# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n#\n# This software is licensed as described in the file COPYING, which\n# you should have received as part of this distribution. The terms\n# are also available at https://curl.se/docs/copyright.html.\n#\n# You may opt to use, copy, modify, merge, publish, distribute and/or sell\n# copies of the Software, and permit persons to whom the Software is\n# furnished to do so, under the terms of the COPYING file.\n#\n# This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\n# KIND, either express or implied.\n#\n# SPDX-License-Identifier: curl\n#\n#***************************************************************************\ndnl Process this file with autoconf to produce a configure script.\n\nAC_PREREQ(2.59)\n\ndnl We don't know the version number \"statically\" so we use a dash here\nAC_INIT([curl], [-], [a suitable curl mailing list: https://curl.se/mail/])\n\nXC_OVR_ZZ50\nXC_OVR_ZZ60\nCURL_OVERRIDE_AUTOCONF\n\ndnl configure script copyright\nAC_COPYRIGHT([Copyright (C) Daniel Stenberg, <daniel@haxx.se>\nThis configure script may be copied, distributed and modified under the\nterms of the curl license; see COPYING for more details])\n\nAC_CONFIG_SRCDIR([lib/urldata.h])\nAC_CONFIG_HEADERS(lib/curl_config.h)\nAC_CONFIG_MACRO_DIR([m4])\nAM_MAINTAINER_MODE\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\nCURL_CHECK_OPTION_DEBUG\nAM_CONDITIONAL(DEBUGBUILD, test x$want_debug = xyes)\nCURL_CHECK_OPTION_OPTIMIZE\nCURL_CHECK_OPTION_WARNINGS\nCURL_CHECK_OPTION_WERROR\nCURL_CHECK_OPTION_CURLDEBUG\nCURL_CHECK_OPTION_SYMBOL_HIDING\nCURL_CHECK_OPTION_ARES\nCURL_CHECK_OPTION_RT\nCURL_CHECK_OPTION_HTTPSRR\nCURL_CHECK_OPTION_ECH\nCURL_CHECK_OPTION_SSLS_EXPORT\n\nXC_CHECK_PATH_SEPARATOR\n\n#\n# save the configure arguments\n#\nCONFIGURE_OPTIONS=\"\\\"$ac_configure_args\\\"\"\nAC_SUBST(CONFIGURE_OPTIONS)\n\ndnl SED is mandatory for configure process and libtool.\ndnl Set it now, allowing it to be changed later.\nif test -z \"$SED\"; then\n  dnl allow it to be overridden\n  AC_PATH_PROG([SED], [sed], [not_found],\n    [$PATH:/usr/bin:/usr/local/bin])\n  if test -z \"$SED\" || test \"$SED\" = \"not_found\"; then\n    AC_MSG_ERROR([sed not found in PATH. Cannot continue without sed.])\n  fi\nfi\nAC_SUBST([SED])\n\ndnl GREP is mandatory for configure process and libtool.\ndnl Set it now, allowing it to be changed later.\nif test -z \"$GREP\"; then\n  dnl allow it to be overridden\n  AC_PATH_PROG([GREP], [grep], [not_found],\n    [$PATH:/usr/bin:/usr/local/bin])\n  if test -z \"$GREP\" || test \"$GREP\" = \"not_found\"; then\n    AC_MSG_ERROR([grep not found in PATH. Cannot continue without grep.])\n  fi\nfi\nAC_SUBST([GREP])\n\ndnl 'grep -E' is mandatory for configure process and libtool.\ndnl Set it now, allowing it to be changed later.\nif test -z \"$EGREP\"; then\n  dnl allow it to be overridden\n  AC_MSG_CHECKING([that grep -E works])\n  if echo a | ($GREP -E '(a|b)') >/dev/null 2>&1; then\n    EGREP=\"$GREP -E\"\n    AC_MSG_RESULT([yes])\n  else\n    AC_MSG_RESULT([no])\n    AC_PATH_PROG([EGREP], [egrep], [not_found],\n      [$PATH:/usr/bin:/usr/local/bin])\n  fi\nfi\nif test -z \"$EGREP\" || test \"$EGREP\" = \"not_found\"; then\n  AC_MSG_ERROR([grep -E is not working and egrep is not found in PATH. Cannot continue.])\nfi\nAC_SUBST([EGREP])\n\ndnl AR is mandatory for configure process and libtool.\ndnl This is target dependent, so check it as a tool.\nif test -z \"$AR\"; then\n  dnl allow it to be overridden\n  AC_PATH_TOOL([AR], [ar], [not_found],\n    [$PATH:/usr/bin:/usr/local/bin])\n  if test -z \"$AR\" || test \"$AR\" = \"not_found\"; then\n    AC_MSG_ERROR([ar not found in PATH. Cannot continue without ar.])\n  fi\nfi\nAC_SUBST([AR])\n\nAC_SUBST(libext)\n\ndnl figure out the libcurl version\nCURLVERSION=`$SED -ne 's/^#define LIBCURL_VERSION \"\\(.*\\)\".*/\\1/p' ${srcdir}/include/curl/curlver.h`\nXC_CHECK_PROG_CC\nCURL_ATOMIC\n\ndnl for --enable-code-coverage\nCURL_COVERAGE\n\nXC_AUTOMAKE\nAC_MSG_CHECKING([curl version])\nAC_MSG_RESULT($CURLVERSION)\n\nAC_SUBST(CURLVERSION)\n\ndnl\ndnl we extract the numerical version for curl-config only\nVERSIONNUM=`$SED -ne 's/^#define LIBCURL_VERSION_NUM 0x\\([0-9A-Fa-f]*\\).*/\\1/p' ${srcdir}/include/curl/curlver.h`\nAC_SUBST(VERSIONNUM)\n\ndnl\ndnl initialize all the info variables\n    curl_ssl_msg=\"no      (--with-{openssl,gnutls,mbedtls,wolfssl,schannel,secure-transport,amissl,bearssl,rustls} )\"\n    curl_ssh_msg=\"no      (--with-{libssh,libssh2})\"\n   curl_zlib_msg=\"no      (--with-zlib)\"\n curl_brotli_msg=\"no      (--with-brotli)\"\n   curl_zstd_msg=\"no      (--with-zstd)\"\n    curl_gss_msg=\"no      (--with-gssapi)\"\n  curl_gsasl_msg=\"no      (--with-gsasl)\"\ncurl_tls_srp_msg=\"no      (--enable-tls-srp)\"\n    curl_res_msg=\"default (--enable-ares / --enable-threaded-resolver)\"\n   curl_ipv6_msg=\"no      (--enable-ipv6)\"\ncurl_unix_sockets_msg=\"no      (--enable-unix-sockets)\"\n    curl_idn_msg=\"no      (--with-{libidn2,winidn})\"\n   curl_docs_msg=\"enabled (--disable-docs)\"\n curl_manual_msg=\"no      (--enable-manual)\"\ncurl_libcurl_msg=\"enabled (--disable-libcurl-option)\"\ncurl_verbose_msg=\"enabled (--disable-verbose)\"\n   curl_sspi_msg=\"no      (--enable-sspi)\"\n   curl_ldap_msg=\"no      (--enable-ldap / --with-ldap-lib / --with-lber-lib)\"\n  curl_ldaps_msg=\"no      (--enable-ldaps)\"\n   curl_ipfs_msg=\"no      (--enable-ipfs)\"\n   curl_rtsp_msg=\"no      (--enable-rtsp)\"\n   curl_rtmp_msg=\"no      (--with-librtmp)\"\n    curl_psl_msg=\"no      (--with-libpsl)\"\n curl_altsvc_msg=\"enabled (--disable-alt-svc)\"\ncurl_headers_msg=\"enabled (--disable-headers-api)\"\n   curl_hsts_msg=\"enabled (--disable-hsts)\"\n    ssl_backends=\n     curl_h1_msg=\"enabled (internal)\"\n     curl_h2_msg=\"no      (--with-nghttp2)\"\n     curl_h3_msg=\"no      (--with-ngtcp2 --with-nghttp3, --with-quiche, --with-openssl-quic, --with-msh3)\"\n\nenable_altsvc=\"yes\"\nhsts=\"yes\"\n\ndnl\ndnl Save some initial values the user might have provided\ndnl\nINITIAL_LDFLAGS=$LDFLAGS\nINITIAL_LIBS=$LIBS\n\ndnl\ndnl Generates a shell script to run the compiler with LD_LIBRARY_PATH set to\ndnl the value used right now. This lets CURL_RUN_IFELSE set LD_LIBRARY_PATH to\ndnl something different but only have that affect the execution of the results\ndnl of the compile, not change the libraries for the compiler itself.\ndnl\ncompilersh=\"run-compiler\"\nCURL_SAVED_CC=\"$CC\"\nexport CURL_SAVED_CC\nCURL_SAVED_LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\"\nexport CURL_SAVED_LD_LIBRARY_PATH\ncat <<\\EOF > \"$compilersh\"\nCC=\"$CURL_SAVED_CC\"\nexport CC\nLD_LIBRARY_PATH=\"$CURL_SAVED_LD_LIBRARY_PATH\"\nexport LD_LIBRARY_PATH\nexec $CC \"$@\"\nEOF\n\ndnl **********************************************************************\ndnl See which TLS backend(s) that are requested. Just do all the\ndnl TLS AC_ARG_WITH() invokes here and do the checks later\ndnl **********************************************************************\nOPT_SCHANNEL=no\nAC_ARG_WITH(schannel,dnl\nAS_HELP_STRING([--with-schannel],[enable Windows native SSL/TLS]),\n  OPT_SCHANNEL=$withval\n  TLSCHOICE=\"schannel\")\n\nOPT_SECURETRANSPORT=no\nAC_ARG_WITH(secure-transport,dnl\nAS_HELP_STRING([--with-secure-transport],[enable Apple OS native SSL/TLS]),[\n  OPT_SECURETRANSPORT=$withval\n  TLSCHOICE=\"${TLSCHOICE:+$TLSCHOICE, }Secure-Transport\"\n])\n\nOPT_AMISSL=no\nAC_ARG_WITH(amissl,dnl\nAS_HELP_STRING([--with-amissl],[enable Amiga native SSL/TLS (AmiSSL)]),[\n  OPT_AMISSL=$withval\n  TLSCHOICE=\"${TLSCHOICE:+$TLSCHOICE, }AmiSSL\"\n])\n\nOPT_OPENSSL=no\ndnl Default to no CA bundle\nca=\"no\"\nAC_ARG_WITH(ssl,dnl\nAS_HELP_STRING([--with-ssl=PATH],[old version of --with-openssl])\nAS_HELP_STRING([--without-ssl], [build without any TLS library]),[\n  OPT_SSL=$withval\n  OPT_OPENSSL=$withval\n  if test X\"$withval\" != Xno; then\n    TLSCHOICE=\"${TLSCHOICE:+$TLSCHOICE, }OpenSSL\"\n  else\n    SSL_DISABLED=\"D\"\n  fi\n])\n\nAC_ARG_WITH(openssl,dnl\nAS_HELP_STRING([--with-openssl=PATH],[Where to look for OpenSSL, PATH points to the SSL installation (default: /usr/local/ssl); when possible, set the PKG_CONFIG_PATH environment variable instead of using this option]),[\n  OPT_OPENSSL=$withval\n  if test X\"$withval\" != Xno; then\n    TLSCHOICE=\"${TLSCHOICE:+$TLSCHOICE, }OpenSSL\"\n  fi\n])\n\nOPT_GNUTLS=no\nAC_ARG_WITH(gnutls,dnl\nAS_HELP_STRING([--with-gnutls=PATH],[where to look for GnuTLS, PATH points to the installation root]),[\n  OPT_GNUTLS=$withval\n  if test X\"$withval\" != Xno; then\n    TLSCHOICE=\"${TLSCHOICE:+$TLSCHOICE, }GnuTLS\"\n  fi\n])\n\nOPT_MBEDTLS=no\nAC_ARG_WITH(mbedtls,dnl\nAS_HELP_STRING([--with-mbedtls=PATH],[where to look for mbedTLS, PATH points to the installation root]),[\n  OPT_MBEDTLS=$withval\n  if test X\"$withval\" != Xno; then\n    TLSCHOICE=\"${TLSCHOICE:+$TLSCHOICE, }mbedTLS\"\n  fi\n])\n\nOPT_WOLFSSL=no\nAC_ARG_WITH(wolfssl,dnl\nAS_HELP_STRING([--with-wolfssl=PATH],[where to look for wolfSSL, PATH points to the installation root (default: system lib default)]),[\n  OPT_WOLFSSL=$withval\n  if test X\"$withval\" != Xno; then\n    TLSCHOICE=\"${TLSCHOICE:+$TLSCHOICE, }wolfSSL\"\n  fi\n])\n\nOPT_BEARSSL=no\nAC_ARG_WITH(bearssl,dnl\nAS_HELP_STRING([--with-bearssl=PATH],[where to look for BearSSL, PATH points to the installation root]),[\n  OPT_BEARSSL=$withval\n  if test X\"$withval\" != Xno; then\n    TLSCHOICE=\"${TLSCHOICE:+$TLSCHOICE, }BearSSL\"\n  fi\n])\n\nOPT_RUSTLS=no\nAC_ARG_WITH(rustls,dnl\nAS_HELP_STRING([--with-rustls=PATH],[where to look for Rustls, PATH points to the installation root]),[\n  OPT_RUSTLS=$withval\n  if test X\"$withval\" != Xno; then\n    TLSCHOICE=\"${TLSCHOICE:+$TLSCHOICE, }rustls\"\n    experimental=\"$experimental rustls\"\n  fi\n])\n\nTEST_NGHTTPX=nghttpx\nAC_ARG_WITH(test-nghttpx,dnl\nAS_HELP_STRING([--with-test-nghttpx=PATH],[where to find nghttpx for testing]),\n  TEST_NGHTTPX=$withval\n  if test X\"$OPT_TEST_NGHTTPX\" = \"Xno\"; then\n    TEST_NGHTTPX=\"\"\n  fi\n)\nAC_SUBST(TEST_NGHTTPX)\n\nCADDY=/usr/bin/caddy\nAC_ARG_WITH(test-caddy,dnl\nAS_HELP_STRING([--with-test-caddy=PATH],[where to find caddy for testing]),\n  CADDY=$withval\n  if test X\"$OPT_CADDY\" = \"Xno\"; then\n    CADDY=\"\"\n  fi\n)\nAC_SUBST(CADDY)\n\nVSFTPD=/usr/sbin/vsftpd\nAC_ARG_WITH(test-vsftpd,dnl\nAS_HELP_STRING([--with-test-vsftpd=PATH],[where to find vsftpd for testing]),\n  VSFTPD=$withval\n  if test X\"$OPT_VSFTPD\" = \"Xno\"; then\n    VSFTPD=\"\"\n  fi\n)\nAC_SUBST(VSFTPD)\n\ndnl we'd like a httpd+apachectl as test server\ndnl\nHTTPD_ENABLED=\"maybe\"\nAC_ARG_WITH(test-httpd, [AS_HELP_STRING([--with-test-httpd=PATH],\n                         [where to find httpd/apache2 for testing])],\n  [request_httpd=$withval], [request_httpd=check])\nif test x\"$request_httpd\" = \"xcheck\" -o x\"$request_httpd\" = \"xyes\"; then\n  if test -x \"/usr/sbin/apache2\" -a -x \"/usr/sbin/apache2ctl\"; then\n    # common location on distros (debian/ubuntu)\n    HTTPD=\"/usr/sbin/apache2\"\n    APACHECTL=\"/usr/sbin/apache2ctl\"\n    AC_PATH_PROG([APXS], [apxs])\n    if test \"x$APXS\" = \"x\"; then\n      AC_MSG_NOTICE([apache2-dev not installed, httpd tests disabled])\n      HTTPD_ENABLED=\"no\"\n    fi\n  else\n    AC_PATH_PROG([HTTPD], [httpd])\n    if test \"x$HTTPD\" = \"x\"; then\n      AC_PATH_PROG([HTTPD], [apache2])\n    fi\n    AC_PATH_PROG([APACHECTL], [apachectl])\n    AC_PATH_PROG([APXS], [apxs])\n    if test \"x$HTTPD\" = \"x\" -o \"x$APACHECTL\" = \"x\"; then\n      AC_MSG_NOTICE([httpd/apache2 not in PATH, http tests disabled])\n      HTTPD_ENABLED=\"no\"\n    fi\n    if test \"x$APXS\" = \"x\"; then\n      AC_MSG_NOTICE([apxs not in PATH, http tests disabled])\n      HTTPD_ENABLED=\"no\"\n    fi\n  fi\nelif test x\"$request_httpd\" != \"xno\"; then\n  HTTPD=\"${request_httpd}/bin/httpd\"\n  APACHECTL=\"${request_httpd}/bin/apachectl\"\n  APXS=\"${request_httpd}/bin/apxs\"\n  if test ! -x \"${HTTPD}\"; then\n    AC_MSG_NOTICE([httpd not found as ${HTTPD}, http tests disabled])\n    HTTPD_ENABLED=\"no\"\n  elif test ! -x \"${APACHECTL}\"; then\n    AC_MSG_NOTICE([apachectl not found as ${APACHECTL}, http tests disabled])\n    HTTPD_ENABLED=\"no\"\n  elif test ! -x \"${APXS}\"; then\n    AC_MSG_NOTICE([apxs not found as ${APXS}, http tests disabled])\n    HTTPD_ENABLED=\"no\"\n  else\n    AC_MSG_NOTICE([using HTTPD=$HTTPD for tests])\n  fi\nfi\nif test x\"$HTTPD_ENABLED\" = \"xno\"; then\n  HTTPD=\"\"\n  APACHECTL=\"\"\n  APXS=\"\"\nfi\nAC_SUBST(HTTPD)\nAC_SUBST(APACHECTL)\nAC_SUBST(APXS)\n\ndnl the nghttpx we might use in httpd testing\nif test \"x$TEST_NGHTTPX\" != \"x\" -a \"x$TEST_NGHTTPX\" != \"xnghttpx\"; then\n  HTTPD_NGHTTPX=\"$TEST_NGHTTPX\"\nelse\n  AC_PATH_PROG([HTTPD_NGHTTPX], [nghttpx], [],\n    [$PATH:/usr/bin:/usr/local/bin])\nfi\nAC_SUBST(HTTPD_NGHTTPX)\n\ndnl the Caddy server we might use in testing\nif test \"x$TEST_CADDY\" != \"x\"; then\n  CADDY=\"$TEST_CADDY\"\nelse\n  AC_PATH_PROG([CADDY], [caddy])\nfi\nAC_SUBST(CADDY)\n\ndnl If no TLS choice has been made, check if it was explicitly disabled or\ndnl error out to force the user to decide.\nif test -z \"$TLSCHOICE\"; then\n  if test \"x$OPT_SSL\" != \"xno\"; then\n    AC_MSG_ERROR([select TLS backend(s) or disable TLS with --without-ssl.\n\nSelect from these:\n\n  --with-amissl\n  --with-bearssl\n  --with-gnutls\n  --with-mbedtls\n  --with-openssl (also works for BoringSSL and LibreSSL)\n  --with-rustls\n  --with-schannel\n  --with-secure-transport\n  --with-wolfssl\n])\n  fi\nfi\n\nAC_ARG_WITH(darwinssl,,\n  AC_MSG_ERROR([--with-darwin-ssl and --without-darwin-ssl no longer work!]))\n\ndnl\ndnl Detect the canonical host and target build environment\ndnl\n\nAC_CANONICAL_HOST\ndnl Get system canonical name\nAC_DEFINE_UNQUOTED(CURL_OS, \"${host}\", [cpu-machine-OS])\n\n# Silence warning: ar: 'u' modifier ignored since 'D' is the default\nAC_SUBST(AR_FLAGS, [cr])\n\ndnl This defines _ALL_SOURCE for AIX\nCURL_CHECK_AIX_ALL_SOURCE\n\ndnl Our configure and build reentrant settings\nCURL_CONFIGURE_THREAD_SAFE\nCURL_CONFIGURE_REENTRANT\n\ndnl check for how to do large files\nAC_SYS_LARGEFILE\n\nXC_LIBTOOL\n\nLT_LANG([Windows Resource])\n\n#\n# Automake conditionals based on libtool related checks\n#\n\nAM_CONDITIONAL([CURL_LT_SHLIB_USE_VERSION_INFO],\n  [test \"x$xc_lt_shlib_use_version_info\" = 'xyes'])\nAM_CONDITIONAL([CURL_LT_SHLIB_USE_NO_UNDEFINED],\n  [test \"x$xc_lt_shlib_use_no_undefined\" = 'xyes'])\nAM_CONDITIONAL([CURL_LT_SHLIB_USE_MIMPURE_TEXT],\n  [test \"x$xc_lt_shlib_use_mimpure_text\" = 'xyes'])\n\n#\n# Due to libtool and automake machinery limitations of not allowing\n# specifying separate CPPFLAGS or CFLAGS when compiling objects for\n# inclusion of these in shared or static libraries, we are forced to\n# build using separate configure runs for shared and static libraries\n# on systems where different CPPFLAGS or CFLAGS are mandatory in order\n# to compile objects for each kind of library. Notice that relying on\n# the '-DPIC' CFLAG that libtool provides is not valid given that the\n# user might for example choose to build static libraries with PIC.\n#\n\n#\n# Make our Makefile.am files use the staticlib CPPFLAG only when strictly\n# targeting a static library and not building its shared counterpart.\n#\n\nAM_CONDITIONAL([USE_CPPFLAG_CURL_STATICLIB],\n  [test \"x$xc_lt_build_static_only\" = 'xyes'])\n\n#\n# Make staticlib CPPFLAG variable and its definition visible in output\n# files unconditionally, providing an empty definition unless strictly\n# targeting a static library and not building its shared counterpart.\n#\n\nLIBCURL_PC_CFLAGS_PRIVATE='-DCURL_STATICLIB'\nAC_SUBST(LIBCURL_PC_CFLAGS_PRIVATE)\n\nLIBCURL_PC_CFLAGS=\nif test \"x$xc_lt_build_static_only\" = 'xyes'; then\n  LIBCURL_PC_CFLAGS=\"${LIBCURL_PC_CFLAGS_PRIVATE}\"\nfi\nAC_SUBST([LIBCURL_PC_CFLAGS])\n\n\ndnl **********************************************************************\ndnl platform/compiler/architecture specific checks/flags\ndnl **********************************************************************\n\nCURL_CHECK_COMPILER\nCURL_CHECK_NATIVE_WINDOWS\nCURL_SET_COMPILER_BASIC_OPTS\nCURL_SET_COMPILER_DEBUG_OPTS\nCURL_SET_COMPILER_OPTIMIZE_OPTS\nCURL_SET_COMPILER_WARNING_OPTS\n\nif test \"$compiler_id\" = \"INTEL_UNIX_C\"; then\n  #\n  if test \"$compiler_num\" -ge \"1000\"; then\n    dnl icc 10.X or later\n    CFLAGS=\"$CFLAGS -shared-intel\"\n  elif test \"$compiler_num\" -ge \"900\"; then\n    dnl icc 9.X specific\n    CFLAGS=\"$CFLAGS -i-dynamic\"\n  fi\n  #\nfi\n\nCURL_CFLAG_EXTRAS=\"\"\nif test X\"$want_werror\" = Xyes; then\n  CURL_CFLAG_EXTRAS=\"-Werror\"\n  if test \"$compiler_id\" = \"GNU_C\"; then\n    dnl enable -pedantic-errors for GCC 5 and later,\n    dnl as before that it was the same as -Werror=pedantic\n    if test \"$compiler_num\" -ge \"500\"; then\n      CURL_CFLAG_EXTRAS=\"$CURL_CFLAG_EXTRAS -pedantic-errors\"\n    fi\n  elif test \"$compiler_id\" = \"CLANG\" -o \"$compiler_id\" = \"APPLECLANG\"; then\n    CURL_CFLAG_EXTRAS=\"$CURL_CFLAG_EXTRAS -pedantic-errors\"\n  fi\nfi\nAC_SUBST(CURL_CFLAG_EXTRAS)\nAM_CONDITIONAL(CURL_WERROR, test X\"$want_werror\" = Xyes)\n\nCURL_CHECK_COMPILER_HALT_ON_ERROR\nCURL_CHECK_COMPILER_ARRAY_SIZE_NEGATIVE\nCURL_CHECK_COMPILER_PROTOTYPE_MISMATCH\nCURL_CHECK_COMPILER_SYMBOL_HIDING\n\nsupports_unittests=yes\n# cross-compilation of unit tests static library/programs fails when\n# libcurl shared library is built. This might be due to a libtool or\n# automake issue. In this case we disable unit tests.\nif test \"x$cross_compiling\" != \"xno\" &&\n   test \"x$enable_shared\" != \"xno\"; then\n  supports_unittests=no\nfi\n\n# IRIX 6.5.24 gcc 3.3 autobuilds fail unittests library compilation due to\n# a problem related with OpenSSL headers and library versions not matching.\n# Disable unit tests while time to further investigate this is found.\ncase $host in\n  mips-sgi-irix6.5)\n    if test \"$compiler_id\" = \"GNU_C\"; then\n      supports_unittests=no\n    fi\n    ;;\nesac\n\n# All AIX autobuilds fails unit tests linking against unittests library\n# due to unittests library being built with no symbols or members. Libtool ?\n# Disable unit tests while time to further investigate this is found.\ncase $host_os in\n  aix*)\n    supports_unittests=no\n    ;;\nesac\n\n# In order to detect support of sendmmsg(), we need to escape the POSIX\n# jail by defining _GNU_SOURCE or <sys/socket.h> will not expose it.\ncase $host_os in\n  linux*)\n    CPPFLAGS=\"$CPPFLAGS -D_GNU_SOURCE\"\n    ;;\nesac\n\ndnl Build unit tests when option --enable-debug is given.\nif test \"x$want_debug\" = \"xyes\" &&\n   test \"x$supports_unittests\" = \"xyes\"; then\n  want_unittests=yes\nelse\n  want_unittests=no\nfi\nAM_CONDITIONAL(BUILD_UNITTESTS, test x$want_unittests = xyes)\n\ndnl **********************************************************************\ndnl Compilation based checks should not be done before this point.\ndnl **********************************************************************\n\nCURL_CHECK_WIN32_LARGEFILE\nCURL_CHECK_WIN32_CRYPTO\n\nCURL_DARWIN_CFLAGS\n\ncase $host in\n  *-apple-*)\n    CURL_SUPPORTS_BUILTIN_AVAILABLE\n    ;;\nesac\n\ncurl_cv_cygwin='no'\ncase $host_os in\n  cygwin*|msys*) curl_cv_cygwin='yes';;\nesac\n\nAM_CONDITIONAL([HAVE_WINDRES],\n  [test \"$curl_cv_native_windows\" = \"yes\" && test -n \"${RC}\"])\n\nif test \"$curl_cv_native_windows\" = \"yes\"; then\n  AM_COND_IF([HAVE_WINDRES],,\n    [AC_MSG_ERROR([windres not found in PATH. Windows builds require windres. Cannot continue.])])\nfi\n\ndnl ----------------------------------------\ndnl whether use \"unity\" mode for lib and src\ndnl ----------------------------------------\n\nwant_unity='no'\nAC_MSG_CHECKING([whether to build libcurl and curl in \"unity\" mode])\nAC_ARG_ENABLE(unity,\nAS_HELP_STRING([--enable-unity],[Enable unity mode])\nAS_HELP_STRING([--disable-unity],[Disable unity (default)]),\n[ case \"$enableval\" in\n  yes)\n    want_unity='yes'\n    AC_MSG_RESULT([yes])\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac ],\n    AC_MSG_RESULT([no])\n)\n\nAM_CONDITIONAL([USE_UNITY], [test \"$want_unity\" = 'yes'])\n\ndnl -----------------------\ndnl whether to bundle tests\ndnl -----------------------\n\nwant_test_bundles='no'\nAC_MSG_CHECKING([whether to build tests into single-binary bundles])\nAC_ARG_ENABLE(test-bundles,\nAS_HELP_STRING([--enable-test-bundles],[Enable test bundles])\nAS_HELP_STRING([--disable-test-bundles],[Disable test bundles (default)]),\n[ case \"$enableval\" in\n  yes)\n    want_test_bundles='yes'\n    AC_MSG_RESULT([yes])\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac ],\n    AC_MSG_RESULT([no])\n)\n\nAM_CONDITIONAL([USE_TEST_BUNDLES], [test \"$want_test_bundles\" = 'yes'])\n\ndnl ************************************************************\ndnl switch off particular protocols\ndnl\nAC_MSG_CHECKING([whether to support http])\nAC_ARG_ENABLE(http,\nAS_HELP_STRING([--enable-http],[Enable HTTP support])\nAS_HELP_STRING([--disable-http],[Disable HTTP support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_HTTP, 1, [to disable HTTP])\n    disable_http=\"yes\"\n    AC_MSG_WARN([disable HTTP disables FTP over proxy, IPFS and RTSP])\n    CURL_DISABLE_HTTP=1\n    AC_DEFINE(CURL_DISABLE_IPFS, 1, [to disable IPFS])\n    CURL_DISABLE_IPFS=1\n    AC_DEFINE(CURL_DISABLE_RTSP, 1, [to disable RTSP])\n    CURL_DISABLE_RTSP=1\n    dnl toggle off alt-svc too when HTTP is disabled\n    AC_DEFINE(CURL_DISABLE_ALTSVC, 1, [disable alt-svc])\n    AC_DEFINE(CURL_DISABLE_HSTS, 1, [disable HSTS])\n    curl_h1_msg=\"no      (--enable-http)\"\n    curl_altsvc_msg=\"no\";\n    curl_hsts_msg=\"no      (--enable-hsts)\";\n    enable_altsvc=\"no\"\n    hsts=\"no\"\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\nAC_MSG_CHECKING([whether to support ftp])\nAC_ARG_ENABLE(ftp,\nAS_HELP_STRING([--enable-ftp],[Enable FTP support])\nAS_HELP_STRING([--disable-ftp],[Disable FTP support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_FTP, 1, [to disable FTP])\n    CURL_DISABLE_FTP=1\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\nAC_MSG_CHECKING([whether to support file])\nAC_ARG_ENABLE(file,\nAS_HELP_STRING([--enable-file],[Enable FILE support])\nAS_HELP_STRING([--disable-file],[Disable FILE support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_FILE, 1, [to disable FILE])\n    CURL_DISABLE_FILE=1\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\nAC_MSG_CHECKING([whether to support IPFS])\nAC_ARG_ENABLE(ipfs,\nAS_HELP_STRING([--enable-ipfs],[Enable IPFS support])\nAS_HELP_STRING([--disable-ipfs],[Disable IPFS support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_IPFS, 1, [to disable IPFS])\n    CURL_DISABLE_IPFS=1\n    ;;\n  *)\n    if test x$CURL_DISABLE_HTTP = x1; then\n      AC_MSG_ERROR(HTTP support needs to be enabled in order to enable IPFS support!)\n    else\n      AC_MSG_RESULT(yes)\n      curl_ipfs_msg=\"enabled\"\n    fi\n    ;;\n  esac ],\n    if test \"x$CURL_DISABLE_HTTP\" != \"x1\"; then\n      AC_MSG_RESULT(yes)\n      curl_ipfs_msg=\"enabled\"\n    else\n      AC_MSG_RESULT(no)\n    fi\n)\nAC_MSG_CHECKING([whether to support ldap])\nAC_ARG_ENABLE(ldap,\nAS_HELP_STRING([--enable-ldap],[Enable LDAP support])\nAS_HELP_STRING([--disable-ldap],[Disable LDAP support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_LDAP, 1, [to disable LDAP])\n    CURL_DISABLE_LDAP=1\n    ;;\n  yes)\n    ldap_askedfor=\"yes\"\n    AC_MSG_RESULT(yes)\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],[\n    AC_MSG_RESULT(yes) ]\n)\nAC_MSG_CHECKING([whether to support ldaps])\nAC_ARG_ENABLE(ldaps,\nAS_HELP_STRING([--enable-ldaps],[Enable LDAPS support])\nAS_HELP_STRING([--disable-ldaps],[Disable LDAPS support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_LDAPS, 1, [to disable LDAPS])\n    CURL_DISABLE_LDAPS=1\n    ;;\n  *)\n    if test \"x$CURL_DISABLE_LDAP\" = \"x1\"; then\n      AC_MSG_RESULT(LDAP needs to be enabled to support LDAPS)\n      AC_DEFINE(CURL_DISABLE_LDAPS, 1, [to disable LDAPS])\n      CURL_DISABLE_LDAPS=1\n    else\n      AC_MSG_RESULT(yes)\n      AC_DEFINE(HAVE_LDAP_SSL, 1, [Use LDAPS implementation])\n      HAVE_LDAP_SSL=1\n    fi\n    ;;\n  esac ],[\n    if test \"x$CURL_DISABLE_LDAP\" = \"x1\"; then\n      AC_MSG_RESULT(no)\n      AC_DEFINE(CURL_DISABLE_LDAPS, 1, [to disable LDAPS])\n      CURL_DISABLE_LDAPS=1\n    else\n      AC_MSG_RESULT(yes)\n      AC_DEFINE(HAVE_LDAP_SSL, 1, [Use LDAPS implementation])\n      HAVE_LDAP_SSL=1\n    fi ]\n)\n\nAC_MSG_CHECKING([whether to support rtsp])\nAC_ARG_ENABLE(rtsp,\nAS_HELP_STRING([--enable-rtsp],[Enable RTSP support])\nAS_HELP_STRING([--disable-rtsp],[Disable RTSP support]),\n  [ case \"$enableval\" in\n      no)\n      AC_MSG_RESULT(no)\n      AC_DEFINE(CURL_DISABLE_RTSP, 1, [to disable RTSP])\n      CURL_DISABLE_RTSP=1\n      ;;\n    *)\n      if test x$CURL_DISABLE_HTTP = x1; then\n        AC_MSG_ERROR(HTTP support needs to be enabled in order to enable RTSP support!)\n      else\n        AC_MSG_RESULT(yes)\n        curl_rtsp_msg=\"enabled\"\n      fi\n      ;;\n    esac ],\n      if test \"x$CURL_DISABLE_HTTP\" != \"x1\"; then\n        AC_MSG_RESULT(yes)\n        curl_rtsp_msg=\"enabled\"\n      else\n        AC_MSG_RESULT(no)\n      fi\n)\n\nAC_MSG_CHECKING([whether to support proxies])\nAC_ARG_ENABLE(proxy,\nAS_HELP_STRING([--enable-proxy],[Enable proxy support])\nAS_HELP_STRING([--disable-proxy],[Disable proxy support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_PROXY, 1, [to disable proxies])\n    CURL_DISABLE_PROXY=1\n    https_proxy=\"no\"\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\nAC_MSG_CHECKING([whether to support dict])\nAC_ARG_ENABLE(dict,\nAS_HELP_STRING([--enable-dict],[Enable DICT support])\nAS_HELP_STRING([--disable-dict],[Disable DICT support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_DICT, 1, [to disable DICT])\n    CURL_DISABLE_DICT=1\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\nAC_MSG_CHECKING([whether to support telnet])\nAC_ARG_ENABLE(telnet,\nAS_HELP_STRING([--enable-telnet],[Enable TELNET support])\nAS_HELP_STRING([--disable-telnet],[Disable TELNET support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_TELNET, 1, [to disable TELNET])\n    CURL_DISABLE_TELNET=1\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\nAC_MSG_CHECKING([whether to support tftp])\nAC_ARG_ENABLE(tftp,\nAS_HELP_STRING([--enable-tftp],[Enable TFTP support])\nAS_HELP_STRING([--disable-tftp],[Disable TFTP support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_TFTP, 1, [to disable TFTP])\n    CURL_DISABLE_TFTP=1\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\nAC_MSG_CHECKING([whether to support pop3])\nAC_ARG_ENABLE(pop3,\nAS_HELP_STRING([--enable-pop3],[Enable POP3 support])\nAS_HELP_STRING([--disable-pop3],[Disable POP3 support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_POP3, 1, [to disable POP3])\n    CURL_DISABLE_POP3=1\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\nAC_MSG_CHECKING([whether to support imap])\nAC_ARG_ENABLE(imap,\nAS_HELP_STRING([--enable-imap],[Enable IMAP support])\nAS_HELP_STRING([--disable-imap],[Disable IMAP support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_IMAP, 1, [to disable IMAP])\n    CURL_DISABLE_IMAP=1\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\nAC_MSG_CHECKING([whether to support smb])\nAC_ARG_ENABLE(smb,\nAS_HELP_STRING([--enable-smb],[Enable SMB/CIFS support])\nAS_HELP_STRING([--disable-smb],[Disable SMB/CIFS support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_SMB, 1, [to disable SMB/CIFS])\n    CURL_DISABLE_SMB=1\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\nAC_MSG_CHECKING([whether to support smtp])\nAC_ARG_ENABLE(smtp,\nAS_HELP_STRING([--enable-smtp],[Enable SMTP support])\nAS_HELP_STRING([--disable-smtp],[Disable SMTP support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_SMTP, 1, [to disable SMTP])\n    CURL_DISABLE_SMTP=1\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\nAC_MSG_CHECKING([whether to support gopher])\nAC_ARG_ENABLE(gopher,\nAS_HELP_STRING([--enable-gopher],[Enable Gopher support])\nAS_HELP_STRING([--disable-gopher],[Disable Gopher support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_GOPHER, 1, [to disable Gopher])\n    CURL_DISABLE_GOPHER=1\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\nAC_MSG_CHECKING([whether to support mqtt])\nAC_ARG_ENABLE(mqtt,\nAS_HELP_STRING([--enable-mqtt],[Enable MQTT support])\nAS_HELP_STRING([--disable-mqtt],[Disable MQTT support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_MQTT, 1, [to disable MQTT])\n    CURL_DISABLE_MQTT=1\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(no)\n)\n\ndnl **********************************************************************\ndnl Check for built-in manual\ndnl **********************************************************************\n\nAC_MSG_CHECKING([whether to provide built-in manual])\nAC_ARG_ENABLE(manual,\nAS_HELP_STRING([--enable-manual],[Enable built-in manual])\nAS_HELP_STRING([--disable-manual],[Disable built-in manual]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    USE_MANUAL=\"1\"\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n    USE_MANUAL=\"1\"\n)\ndnl The actual use of the USE_MANUAL variable is done much later in this\ndnl script to allow other actions to disable it as well.\n\ndnl **********************************************************************\ndnl Check whether to build documentation\ndnl **********************************************************************\n\nAC_MSG_CHECKING([whether to build documentation])\nAC_ARG_ENABLE(docs,\nAS_HELP_STRING([--enable-docs],[Enable documentation])\nAS_HELP_STRING([--disable-docs],[Disable documentation]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    BUILD_DOCS=0\n    dnl disable manual too because it needs built documentation\n    USE_MANUAL=0\n    curl_docs_msg=\"no\"\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    BUILD_DOCS=1\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n    BUILD_DOCS=1\n)\n\n\ndnl ************************************************************\ndnl disable C code generation support\ndnl\nAC_MSG_CHECKING([whether to enable generation of C code])\nAC_ARG_ENABLE(libcurl_option,\nAS_HELP_STRING([--enable-libcurl-option],[Enable --libcurl C code generation support])\nAS_HELP_STRING([--disable-libcurl-option],[Disable --libcurl C code generation support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_LIBCURL_OPTION, 1, [to disable --libcurl C code generation option])\n    curl_libcurl_msg=\"no\"\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl **********************************************************************\ndnl Checks for libraries.\ndnl **********************************************************************\n\nAC_MSG_CHECKING([whether to use libgcc])\nAC_ARG_ENABLE(libgcc,\nAS_HELP_STRING([--enable-libgcc],[use libgcc when linking]),\n[ case \"$enableval\" in\n  yes)\n    LIBS=\"-lgcc $LIBS\"\n    AC_MSG_RESULT(yes)\n    ;;\n  *)\n    AC_MSG_RESULT(no)\n    ;;\n  esac ],\n    AC_MSG_RESULT(no)\n)\n\nCURL_CHECK_LIB_XNET\n\ndnl gethostbyname without lib or in the nsl lib?\nAC_CHECK_FUNC(gethostbyname,\n  [\n    HAVE_GETHOSTBYNAME=\"1\"\n  ],\n  [\n    AC_CHECK_LIB(nsl, gethostbyname,\n      [\n        HAVE_GETHOSTBYNAME=\"1\"\n        LIBS=\"-lnsl $LIBS\"\n      ]\n    )\n  ]\n)\n\nif test \"$HAVE_GETHOSTBYNAME\" != \"1\"; then\n  dnl gethostbyname in the socket lib?\n  AC_CHECK_LIB(socket, gethostbyname,\n    [\n      HAVE_GETHOSTBYNAME=\"1\"\n      LIBS=\"-lsocket $LIBS\"\n    ]\n  )\nfi\n\nif test \"$HAVE_GETHOSTBYNAME\" != \"1\"; then\n  dnl gethostbyname in the watt lib?\n  clean_CPPFLAGS=$CPPFLAGS\n  clean_LDFLAGS=$LDFLAGS\n  CPPFLAGS=\"-I${WATT_ROOT}/inc\"\n  LDFLAGS=\"-L${WATT_ROOT}/lib\"\n  AC_CHECK_LIB(watt, gethostbyname,\n    [\n      HAVE_GETHOSTBYNAME=\"1\"\n      LIBS=\"-lwatt $LIBS\"\n      AC_DEFINE(USE_WATT32, 1, [if Watt-32 is in use])\n    ],\n    [\n      CPPFLAGS=$clean_CPPFLAGS\n      LDFLAGS=$clean_LDFLAGS\n    ]\n  )\nfi\n\ndnl At least one system has been identified to require BOTH nsl and socket\ndnl libs at the same time to link properly.\nif test \"$HAVE_GETHOSTBYNAME\" != \"1\"; then\n  AC_MSG_CHECKING([for gethostbyname with both nsl and socket libs])\n  my_ac_save_LIBS=$LIBS\n  LIBS=\"-lnsl -lsocket $LIBS\"\n  AC_LINK_IFELSE([\n    AC_LANG_PROGRAM([[\n    ]],[[\n      gethostbyname();\n    ]])\n  ],[\n    AC_MSG_RESULT([yes])\n    HAVE_GETHOSTBYNAME=\"1\"\n  ],[\n    AC_MSG_RESULT([no])\n    LIBS=$my_ac_save_LIBS\n  ])\nfi\n\nif test \"$HAVE_GETHOSTBYNAME\" != \"1\"; then\n  dnl This is for Winsock systems\n  if test \"$curl_cv_native_windows\" = \"yes\"; then\n    winsock_LIB=\"-lws2_32\"\n    if test ! -z \"$winsock_LIB\"; then\n      my_ac_save_LIBS=$LIBS\n      LIBS=\"$winsock_LIB $LIBS\"\n      AC_MSG_CHECKING([for gethostbyname in $winsock_LIB])\n      AC_LINK_IFELSE([\n        AC_LANG_PROGRAM([[\n          #ifdef _WIN32\n          #ifndef WIN32_LEAN_AND_MEAN\n          #define WIN32_LEAN_AND_MEAN\n          #endif\n          #include <winsock2.h>\n          #endif\n        ]],[[\n          gethostbyname(\"localhost\");\n        ]])\n      ],[\n        AC_MSG_RESULT([yes])\n        HAVE_GETHOSTBYNAME=\"1\"\n      ],[\n        AC_MSG_RESULT([no])\n        winsock_LIB=\"\"\n        LIBS=$my_ac_save_LIBS\n      ])\n    fi\n  fi\nfi\n\nif test \"$HAVE_GETHOSTBYNAME\" != \"1\"; then\n  dnl This is for Minix 3.1\n  AC_MSG_CHECKING([for gethostbyname for Minix 3])\n  AC_LINK_IFELSE([\n    AC_LANG_PROGRAM([[\n      /* Older Minix versions may need <net/gen/netdb.h> here instead */\n      #include <netdb.h>\n    ]],[[\n      gethostbyname(\"localhost\");\n    ]])\n  ],[\n    AC_MSG_RESULT([yes])\n    HAVE_GETHOSTBYNAME=\"1\"\n  ],[\n    AC_MSG_RESULT([no])\n  ])\nfi\n\nif test \"$HAVE_GETHOSTBYNAME\" != \"1\"; then\n  dnl This is for eCos with a stubbed DNS implementation\n  AC_MSG_CHECKING([for gethostbyname for eCos])\n  AC_LINK_IFELSE([\n    AC_LANG_PROGRAM([[\n      #include <stdio.h>\n      #include <netdb.h>\n    ]],[[\n      gethostbyname(\"localhost\");\n    ]])\n  ],[\n    AC_MSG_RESULT([yes])\n    HAVE_GETHOSTBYNAME=\"1\"\n  ],[\n    AC_MSG_RESULT([no])\n  ])\nfi\n\nif test \"$HAVE_GETHOSTBYNAME\" != \"1\" -o \"${with_amissl+set}\" = set; then\n  dnl This is for AmigaOS with bsdsocket.library - needs testing before -lnet\n  AC_MSG_CHECKING([for gethostbyname for AmigaOS bsdsocket.library])\n  AC_LINK_IFELSE([\n    AC_LANG_PROGRAM([[\n  #define __USE_INLINE__\n  #include <proto/bsdsocket.h>\n  #ifdef __amigaos4__\n  struct SocketIFace *ISocket = NULL;\n  #else\n  struct Library *SocketBase = NULL;\n  #endif\n    ]],[[\n      gethostbyname(\"localhost\");\n    ]])\n  ],[\n    AC_MSG_RESULT([yes])\n    HAVE_GETHOSTBYNAME=\"1\"\n    HAVE_PROTO_BSDSOCKET_H=\"1\"\n    AC_DEFINE(HAVE_PROTO_BSDSOCKET_H, 1, [if Amiga bsdsocket.library is in use])\n  ],[\n    AC_MSG_RESULT([no])\n  ])\nfi\n\nif test \"$HAVE_GETHOSTBYNAME\" != \"1\"; then\n  dnl gethostbyname in the network lib - for Haiku OS\n  AC_CHECK_LIB(network, gethostbyname,\n    [\n      HAVE_GETHOSTBYNAME=\"1\"\n      LIBS=\"-lnetwork $LIBS\"\n    ]\n  )\nfi\n\nCURL_CHECK_LIBS_CONNECT\n\ndnl **********************************************************************\ndnl In case that function clock_gettime with monotonic timer is available,\ndnl check for additional required libraries.\ndnl **********************************************************************\nCURL_CHECK_LIBS_CLOCK_GETTIME_MONOTONIC\n\ndnl Check for even better option\nCURL_CHECK_FUNC_CLOCK_GETTIME_MONOTONIC_RAW\n\ndnl **********************************************************************\ndnl The preceding library checks are all potentially useful for test\ndnl servers and libtest cases which require networking and clock_gettime\ndnl support.  Save the list of required libraries at this point for use\ndnl while linking those test servers and programs.\ndnl **********************************************************************\nCURL_NETWORK_AND_TIME_LIBS=$LIBS\n\ndnl **********************************************************************\ndnl Check for the presence of ZLIB libraries and headers\ndnl **********************************************************************\n\ndnl Check for & handle argument to --with-zlib.\n\nclean_CPPFLAGS=$CPPFLAGS\nclean_LDFLAGS=$LDFLAGS\nclean_LIBS=$LIBS\nZLIB_LIBS=\"\"\nAC_ARG_WITH(zlib,\nAS_HELP_STRING([--with-zlib=PATH],[search for zlib in PATH])\nAS_HELP_STRING([--without-zlib],[disable use of zlib]),\n  [OPT_ZLIB=\"$withval\"])\n\nif test \"$OPT_ZLIB\" = \"no\"; then\n  AC_MSG_WARN([zlib disabled])\nelse\n  if test \"$OPT_ZLIB\" = \"yes\"; then\n    OPT_ZLIB=\"\"\n  fi\n\n  if test -z \"$OPT_ZLIB\"; then\n    CURL_CHECK_PKGCONFIG(zlib)\n\n    if test \"$PKGCONFIG\" != \"no\"; then\n      ZLIB_LIBS=\"`$PKGCONFIG --libs-only-l zlib`\"\n      if test -n \"$ZLIB_LIBS\"; then\n        LDFLAGS=\"$LDFLAGS `$PKGCONFIG --libs-only-L zlib`\"\n      else\n        ZLIB_LIBS=\"`$PKGCONFIG --libs zlib`\"\n      fi\n      LIBS=\"$ZLIB_LIBS $LIBS\"\n      CPPFLAGS=\"$CPPFLAGS `$PKGCONFIG --cflags zlib`\"\n      OPT_ZLIB=\"\"\n      HAVE_LIBZ=\"1\"\n    fi\n\n    if test -z \"$HAVE_LIBZ\"; then\n\n      dnl Check for the lib without setting any new path, since many\n      dnl people have it in the default path\n\n      AC_CHECK_LIB(z, inflateEnd,\n        dnl libz found, set the variable\n        [\n          HAVE_LIBZ=\"1\"\n          ZLIB_LIBS=\"-lz\"\n          LIBS=\"$ZLIB_LIBS $LIBS\"\n        ],\n        dnl if no lib found, try /usr/local\n        [\n          OPT_ZLIB=\"/usr/local\"\n        ]\n      )\n    fi\n  fi\n\n  dnl Add a nonempty path to the compiler flags\n  if test -n \"$OPT_ZLIB\"; then\n    CPPFLAGS=\"$CPPFLAGS -I$OPT_ZLIB/include\"\n    LDFLAGS=\"$LDFLAGS -L$OPT_ZLIB/lib$libsuff\"\n  fi\n\n  AC_CHECK_HEADER(zlib.h,\n    [\n      dnl zlib.h was found\n      HAVE_ZLIB_H=\"1\"\n      dnl if the lib wasn't found already, try again with the new paths\n      if test \"$HAVE_LIBZ\" != \"1\"; then\n        AC_CHECK_LIB(z, gzread,\n          [\n            dnl the lib was found!\n            HAVE_LIBZ=\"1\"\n            ZLIB_LIBS=\"-lz\"\n            LIBS=\"$ZLIB_LIBS $LIBS\"\n          ],\n          [\n            CPPFLAGS=$clean_CPPFLAGS\n            LDFLAGS=$clean_LDFLAGS\n          ]\n        )\n      fi\n    ],\n    [\n      dnl zlib.h was not found, restore the flags\n      CPPFLAGS=$clean_CPPFLAGS\n      LDFLAGS=$clean_LDFLAGS]\n    )\n\n  if test \"$HAVE_LIBZ\" = \"1\" && test \"$HAVE_ZLIB_H\" != \"1\"; then\n    AC_MSG_WARN([configure found only the libz lib, not the header file!])\n    HAVE_LIBZ=\"\"\n    CPPFLAGS=$clean_CPPFLAGS\n    LDFLAGS=$clean_LDFLAGS\n    LIBS=$clean_LIBS\n    ZLIB_LIBS=\"\"\n  elif test \"$HAVE_LIBZ\" != \"1\" && test \"$HAVE_ZLIB_H\" = \"1\"; then\n    AC_MSG_WARN([configure found only the libz header file, not the lib!])\n    CPPFLAGS=$clean_CPPFLAGS\n    LDFLAGS=$clean_LDFLAGS\n    LIBS=$clean_LIBS\n    ZLIB_LIBS=\"\"\n  elif test \"$HAVE_LIBZ\" = \"1\" && test \"$HAVE_ZLIB_H\" = \"1\"; then\n    dnl both header and lib were found!\n    AC_SUBST(HAVE_LIBZ)\n    AC_DEFINE(HAVE_LIBZ, 1, [if zlib is available])\n    LIBS=\"$ZLIB_LIBS $clean_LIBS\"\n\n    dnl replace 'HAVE_LIBZ' in the automake makefile.ams\n    AMFIXLIB=\"1\"\n    AC_MSG_NOTICE([found both libz and libz.h header])\n    LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE zlib\"\n    curl_zlib_msg=\"enabled\"\n  fi\nfi\n\ndnl set variable for use in automakefile(s)\nAM_CONDITIONAL(HAVE_LIBZ, test x\"$AMFIXLIB\" = x1)\nAC_SUBST(ZLIB_LIBS)\n\ndnl **********************************************************************\ndnl Check for the presence of BROTLI decoder libraries and headers\ndnl **********************************************************************\n\ndnl Brotli project home page: https://github.com/google/brotli\n\ndnl Default to compiler & linker defaults for BROTLI files & libraries.\nOPT_BROTLI=off\nAC_ARG_WITH(brotli,dnl\nAS_HELP_STRING([--with-brotli=PATH],[Where to look for brotli, PATH points to the BROTLI installation; when possible, set the PKG_CONFIG_PATH environment variable instead of using this option])\nAS_HELP_STRING([--without-brotli], [disable BROTLI]),\n  OPT_BROTLI=$withval)\n\nif test X\"$OPT_BROTLI\" != Xno; then\n  dnl backup the pre-brotli variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  case \"$OPT_BROTLI\" in\n    yes)\n      dnl --with-brotli (without path) used\n      CURL_CHECK_PKGCONFIG(libbrotlidec)\n\n      if test \"$PKGCONFIG\" != \"no\"; then\n        LIB_BROTLI=`$PKGCONFIG --libs-only-l libbrotlidec`\n        LD_BROTLI=`$PKGCONFIG --libs-only-L libbrotlidec`\n        CPP_BROTLI=`$PKGCONFIG --cflags-only-I libbrotlidec`\n        version=`$PKGCONFIG --modversion libbrotlidec`\n        DIR_BROTLI=`echo $LD_BROTLI | $SED -e 's/^-L//'`\n      fi\n\n      ;;\n    off)\n      dnl no --with-brotli option given, just check default places\n      ;;\n    *)\n      dnl use the given --with-brotli spot\n      PREFIX_BROTLI=$OPT_BROTLI\n      ;;\n  esac\n\n  dnl if given with a prefix, we set -L and -I based on that\n  if test -n \"$PREFIX_BROTLI\"; then\n    LIB_BROTLI=\"-lbrotlidec\"\n    LD_BROTLI=-L${PREFIX_BROTLI}/lib$libsuff\n    CPP_BROTLI=-I${PREFIX_BROTLI}/include\n    DIR_BROTLI=${PREFIX_BROTLI}/lib$libsuff\n  fi\n\n  LDFLAGS=\"$LDFLAGS $LD_BROTLI\"\n  LDFLAGSPC=\"$LDFLAGSPC $LD_BROTLI\"\n  CPPFLAGS=\"$CPPFLAGS $CPP_BROTLI\"\n  LIBS=\"$LIB_BROTLI $LIBS\"\n\n  AC_CHECK_LIB(brotlidec, BrotliDecoderDecompress)\n\n  AC_CHECK_HEADERS(brotli/decode.h,\n    curl_brotli_msg=\"enabled (libbrotlidec)\"\n    HAVE_BROTLI=1\n    AC_DEFINE(HAVE_BROTLI, 1, [if BROTLI is in use])\n  )\n\n  if test X\"$OPT_BROTLI\" != Xoff &&\n     test \"$HAVE_BROTLI\" != \"1\"; then\n    AC_MSG_ERROR([BROTLI libs and/or directories were not found where specified!])\n  fi\n\n  if test \"$HAVE_BROTLI\" = \"1\"; then\n    if test -n \"$DIR_BROTLI\"; then\n      dnl when the brotli shared libs were found in a path that the run-time\n      dnl linker doesn't search through, we need to add it to CURL_LIBRARY_PATH\n      dnl to prevent further configure tests to fail due to this\n\n      if test \"x$cross_compiling\" != \"xyes\"; then\n        CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$DIR_BROTLI\"\n        export CURL_LIBRARY_PATH\n        AC_MSG_NOTICE([Added $DIR_BROTLI to CURL_LIBRARY_PATH])\n      fi\n    fi\n    LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libbrotlidec\"\n  else\n    dnl no brotli, revert back to clean variables\n    LDFLAGS=$CLEANLDFLAGS\n    LDFLAGSPC=$CLEANLDFLAGSPC\n    CPPFLAGS=$CLEANCPPFLAGS\n    LIBS=$CLEANLIBS\n  fi\nfi\n\ndnl **********************************************************************\ndnl Check for libzstd\ndnl **********************************************************************\n\ndnl Default to compiler & linker defaults for libzstd\nOPT_ZSTD=off\nAC_ARG_WITH(zstd,dnl\nAS_HELP_STRING([--with-zstd=PATH],[Where to look for libzstd, PATH points to the libzstd installation; when possible, set the PKG_CONFIG_PATH environment variable instead of using this option])\nAS_HELP_STRING([--without-zstd], [disable libzstd]),\n  OPT_ZSTD=$withval)\n\nif test X\"$OPT_ZSTD\" != Xno; then\n  dnl backup the pre-zstd variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  case \"$OPT_ZSTD\" in\n    yes)\n      dnl --with-zstd (without path) used\n      CURL_CHECK_PKGCONFIG(libzstd)\n\n      if test \"$PKGCONFIG\" != \"no\"; then\n        LIB_ZSTD=`$PKGCONFIG --libs-only-l libzstd`\n        LD_ZSTD=`$PKGCONFIG --libs-only-L libzstd`\n        CPP_ZSTD=`$PKGCONFIG --cflags-only-I libzstd`\n        version=`$PKGCONFIG --modversion libzstd`\n        DIR_ZSTD=`echo $LD_ZSTD | $SED -e 's/-L//'`\n      fi\n\n      ;;\n    off)\n      dnl no --with-zstd option given, just check default places\n      ;;\n    *)\n      dnl use the given --with-zstd spot\n      PREFIX_ZSTD=$OPT_ZSTD\n      ;;\n  esac\n\n  dnl if given with a prefix, we set -L and -I based on that\n  if test -n \"$PREFIX_ZSTD\"; then\n    LIB_ZSTD=\"-lzstd\"\n    LD_ZSTD=-L${PREFIX_ZSTD}/lib$libsuff\n    CPP_ZSTD=-I${PREFIX_ZSTD}/include\n    DIR_ZSTD=${PREFIX_ZSTD}/lib$libsuff\n  fi\n\n  LDFLAGS=\"$LDFLAGS $LD_ZSTD\"\n  LDFLAGSPC=\"$LDFLAGSPC $LD_ZSTD\"\n  CPPFLAGS=\"$CPPFLAGS $CPP_ZSTD\"\n  LIBS=\"$LIB_ZSTD $LIBS\"\n\n  AC_CHECK_LIB(zstd, ZSTD_createDStream)\n\n  AC_CHECK_HEADERS(zstd.h,\n    curl_zstd_msg=\"enabled (libzstd)\"\n    HAVE_ZSTD=1\n    AC_DEFINE(HAVE_ZSTD, 1, [if libzstd is in use])\n  )\n\n  if test X\"$OPT_ZSTD\" != Xoff &&\n     test \"$HAVE_ZSTD\" != \"1\"; then\n    AC_MSG_ERROR([libzstd was not found where specified!])\n  fi\n\n  if test \"$HAVE_ZSTD\" = \"1\"; then\n    if test -n \"$DIR_ZSTD\"; then\n      dnl when the zstd shared lib were found in a path that the run-time\n      dnl linker doesn't search through, we need to add it to\n      dnl CURL_LIBRARY_PATH to prevent further configure tests to fail due to\n      dnl this\n\n      if test \"x$cross_compiling\" != \"xyes\"; then\n        CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$DIR_ZSTD\"\n        export CURL_LIBRARY_PATH\n        AC_MSG_NOTICE([Added $DIR_ZSTD to CURL_LIBRARY_PATH])\n      fi\n    fi\n    LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libzstd\"\n  else\n    dnl no zstd, revert back to clean variables\n    LDFLAGS=$CLEANLDFLAGS\n    LDFLAGSPC=$CLEANLDFLAGSPC\n    CPPFLAGS=$CLEANCPPFLAGS\n    LIBS=$CLEANLIBS\n  fi\nfi\n\ndnl **********************************************************************\ndnl Check for LDAP\ndnl **********************************************************************\n\nLDAPLIBNAME=\"\"\nAC_ARG_WITH(ldap-lib,\nAS_HELP_STRING([--with-ldap-lib=libname],[Specify name of ldap lib file]),\n  [LDAPLIBNAME=\"$withval\"])\n\nLBERLIBNAME=\"\"\nAC_ARG_WITH(lber-lib,\nAS_HELP_STRING([--with-lber-lib=libname],[Specify name of lber lib file]),\n  [LBERLIBNAME=\"$withval\"])\n\nif test x$CURL_DISABLE_LDAP != x1; then\n\n  CURL_CHECK_HEADER_LBER\n  CURL_CHECK_HEADER_LDAP\n  CURL_CHECK_HEADER_LDAP_SSL\n\n  if test -z \"$LDAPLIBNAME\"; then\n    if test \"$curl_cv_native_windows\" = \"yes\"; then\n      dnl Windows uses a single and unique LDAP library name\n      LDAPLIBNAME=\"wldap32\"\n      LBERLIBNAME=\"no\"\n    fi\n  fi\n\n  if test \"$LDAPLIBNAME\"; then\n    AC_CHECK_LIB(\"$LDAPLIBNAME\", ldap_init,, [\n      if test -n \"$ldap_askedfor\"; then\n        AC_MSG_ERROR([couldn't detect the LDAP libraries])\n      fi\n      AC_MSG_WARN([\"$LDAPLIBNAME\" is not an LDAP library: LDAP disabled])\n      AC_DEFINE(CURL_DISABLE_LDAP, 1, [to disable LDAP])\n      CURL_DISABLE_LDAP=1\n      AC_DEFINE(CURL_DISABLE_LDAPS, 1, [to disable LDAPS])\n      CURL_DISABLE_LDAPS=1\n      ]\n    )\n  else\n    dnl Try to find the right ldap libraries for this system\n    CURL_CHECK_LIBS_LDAP\n    case X-\"$curl_cv_ldap_LIBS\" in\n      X-unknown)\n        if test -n \"$ldap_askedfor\"; then\n          AC_MSG_ERROR([couldn't detect the LDAP libraries])\n        fi\n        AC_MSG_WARN([Cannot find libraries for LDAP support: LDAP disabled])\n        AC_DEFINE(CURL_DISABLE_LDAP, 1, [to disable LDAP])\n        CURL_DISABLE_LDAP=1\n        AC_DEFINE(CURL_DISABLE_LDAPS, 1, [to disable LDAPS])\n        CURL_DISABLE_LDAPS=1\n        ;;\n    esac\n  fi\nfi\n\nif test x$CURL_DISABLE_LDAP != x1; then\n\n  if test \"$LBERLIBNAME\"; then\n    dnl If name is \"no\" then don't define this library at all\n    dnl (it's only needed if libldap.so's dependencies are broken).\n    if test \"$LBERLIBNAME\" != \"no\"; then\n      AC_CHECK_LIB(\"$LBERLIBNAME\", ber_free,, [\n        AC_MSG_WARN([\"$LBERLIBNAME\" is not an LBER library: LDAP disabled])\n        AC_DEFINE(CURL_DISABLE_LDAP, 1, [to disable LDAP])\n        CURL_DISABLE_LDAP=1\n        AC_DEFINE(CURL_DISABLE_LDAPS, 1, [to disable LDAPS])\n        CURL_DISABLE_LDAPS=1\n        ]\n      )\n    fi\n  fi\nfi\n\nif test x$CURL_DISABLE_LDAP != x1; then\n  AC_CHECK_FUNCS([ldap_url_parse \\\n                  ldap_init_fd])\n\n  if test \"$LDAPLIBNAME\" = \"wldap32\"; then\n    curl_ldap_msg=\"enabled (winldap)\"\n    AC_DEFINE(USE_WIN32_LDAP, 1, [Use Windows LDAP implementation])\n  else\n    if test \"x$ac_cv_func_ldap_init_fd\" = \"xyes\"; then\n      curl_ldap_msg=\"enabled (OpenLDAP)\"\n      AC_DEFINE(USE_OPENLDAP, 1, [Use OpenLDAP-specific code])\n      USE_OPENLDAP=1\n    else\n      curl_ldap_msg=\"enabled (ancient OpenLDAP)\"\n    fi\n  fi\nfi\n\nif test x$CURL_DISABLE_LDAPS != x1; then\n  curl_ldaps_msg=\"enabled\"\nfi\n\ndnl **********************************************************************\ndnl Checks for IPv6\ndnl **********************************************************************\n\nAC_MSG_CHECKING([whether to enable IPv6])\nAC_ARG_ENABLE(ipv6,\nAS_HELP_STRING([--enable-ipv6],[Enable IPv6 (with IPv4) support])\nAS_HELP_STRING([--disable-ipv6],[Disable IPv6 support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    ipv6=no\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ipv6=yes\n    ;;\n  esac ],\n\n  AC_COMPILE_IFELSE([\n    AC_LANG_SOURCE([[\n      /* are AF_INET6 and sockaddr_in6 available? */\n      #include <sys/types.h>\n      #ifdef _WIN32\n      #include <winsock2.h>\n      #include <ws2tcpip.h>\n      #else\n      #include <sys/socket.h>\n      #include <netinet/in.h>\n      #ifdef __TANDEM\n      #include <netinet/in6.h>\n      #endif\n      #endif\n\n      int main(void)\n      {\n        struct sockaddr_in6 s;\n        (void)s;\n        return socket(AF_INET6, SOCK_STREAM, 0) < 0;\n      }\n    ]])\n  ],\n    AC_MSG_RESULT(yes)\n    ipv6=yes,\n    AC_MSG_RESULT(no)\n    ipv6=no\n  )\n)\n\nif test \"$ipv6\" = yes; then\n  curl_ipv6_msg=\"enabled\"\n  AC_DEFINE(USE_IPV6, 1, [Define if you want to enable IPv6 support])\n  IPV6_ENABLED=1\n\n  AC_MSG_CHECKING([if struct sockaddr_in6 has sin6_scope_id member])\n  AC_COMPILE_IFELSE([\n    AC_LANG_PROGRAM([[\n      #include <sys/types.h>\n      #ifdef _WIN32\n      #include <winsock2.h>\n      #include <ws2tcpip.h>\n      #else\n      #include <netinet/in.h>\n      #ifdef __TANDEM\n      #include <netinet/in6.h>\n      #endif\n      #endif\n    ]], [[\n      struct sockaddr_in6 s;\n      s.sin6_scope_id = 0;\n    ]])\n  ],[\n    AC_MSG_RESULT([yes])\n    AC_DEFINE(HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID, 1, [Define to 1 if struct sockaddr_in6 has the sin6_scope_id member])\n  ],[\n    AC_MSG_RESULT([no])\n  ])\nfi\n\ndnl **********************************************************************\ndnl Check if the operating system allows programs to write to their own argv[]\ndnl **********************************************************************\n\nAC_MSG_CHECKING([if argv can be written to])\nCURL_RUN_IFELSE([[\nint main(int argc, char **argv)\n{\n#ifdef _WIN32\n  /* on Windows, writing to the argv does not hide the argument in\n     process lists so it can just be skipped */\n  (void)argc;\n  (void)argv;\n  return 1;\n#else\n  (void)argc;\n  argv[0][0] = ' ';\n  return (argv[0][0] == ' ')?0:1;\n#endif\n}\n]],[\n  curl_cv_writable_argv=yes\n],[\n  curl_cv_writable_argv=no\n],[\n  curl_cv_writable_argv=cross\n])\ncase $curl_cv_writable_argv in\n  yes)\n    AC_DEFINE(HAVE_WRITABLE_ARGV, 1, [Define this symbol if your OS supports changing the contents of argv])\n    AC_MSG_RESULT(yes)\n    ;;\n  no)\n    AC_MSG_RESULT(no)\n    ;;\n  *)\n    AC_MSG_RESULT(no)\n    AC_MSG_WARN([the previous check could not be made default was used])\n    ;;\nesac\n\ndnl **********************************************************************\ndnl Check for GSS-API libraries\ndnl **********************************************************************\n\ndnl check for GSS-API stuff in the /usr as default\n\nGSSAPI_ROOT=\"/usr\"\nAC_ARG_WITH(gssapi-includes,\n  AS_HELP_STRING([--with-gssapi-includes=DIR], [Specify location of GSS-API headers]), [\n    GSSAPI_INCS=\"-I$withval\"\n    want_gss=\"yes\"\n  ]\n)\n\nAC_ARG_WITH(gssapi-libs,\n  AS_HELP_STRING([--with-gssapi-libs=DIR], [Specify location of GSS-API libs]), [\n    GSSAPI_LIB_DIR=\"-L$withval\"\n    want_gss=\"yes\"\n  ]\n)\n\nAC_ARG_WITH(gssapi,\n  AS_HELP_STRING([--with-gssapi=DIR], [Where to look for GSS-API]), [\n    GSSAPI_ROOT=\"$withval\"\n    if test x\"$GSSAPI_ROOT\" != xno; then\n      want_gss=\"yes\"\n      if test x\"$GSSAPI_ROOT\" = xyes; then\n        dnl if yes, then use default root\n        GSSAPI_ROOT=\"/usr\"\n      fi\n    fi\n  ]\n)\n\n: ${KRB5CONFIG:=\"$GSSAPI_ROOT/bin/krb5-config\"}\n\nsave_CPPFLAGS=\"$CPPFLAGS\"\nAC_MSG_CHECKING([if GSS-API support is requested])\nif test x\"$want_gss\" = xyes; then\n  AC_MSG_RESULT(yes)\n\n  if test $GSSAPI_ROOT != \"/usr\"; then\n    CURL_CHECK_PKGCONFIG(mit-krb5-gssapi, $GSSAPI_ROOT/lib/pkgconfig)\n  else\n    CURL_CHECK_PKGCONFIG(mit-krb5-gssapi)\n  fi\n  if test -z \"$GSSAPI_INCS\"; then\n    if test -n \"$host_alias\" -a -f \"$GSSAPI_ROOT/bin/$host_alias-krb5-config\"; then\n      GSSAPI_INCS=`$GSSAPI_ROOT/bin/$host_alias-krb5-config --cflags gssapi`\n    elif test \"$PKGCONFIG\" != \"no\"; then\n      GSSAPI_INCS=`$PKGCONFIG --cflags mit-krb5-gssapi`\n    elif test -f \"$KRB5CONFIG\"; then\n      GSSAPI_INCS=`$KRB5CONFIG --cflags gssapi`\n    elif test \"$GSSAPI_ROOT\" != \"yes\"; then\n      GSSAPI_INCS=\"-I$GSSAPI_ROOT/include\"\n    fi\n  fi\n\n  CPPFLAGS=\"$CPPFLAGS $GSSAPI_INCS\"\n\n  AC_CHECK_HEADER(gss.h,\n    [\n      dnl found in the given dirs\n      AC_DEFINE(HAVE_GSSGNU, 1, [if you have GNU GSS])\n      gnu_gss=yes\n    ],\n    [\n      dnl not found, check Heimdal or MIT\n      AC_CHECK_HEADERS([gssapi/gssapi.h], [], [not_mit=1])\n      AC_CHECK_HEADERS(\n        [gssapi/gssapi_generic.h gssapi/gssapi_krb5.h],\n        [],\n        [not_mit=1],\n        [\n          AC_INCLUDES_DEFAULT\n          #ifdef HAVE_GSSAPI_GSSAPI_H\n          #include <gssapi/gssapi.h>\n          #endif\n        ])\n      if test \"x$not_mit\" = \"x1\"; then\n        dnl MIT not found, check for Heimdal\n        AC_CHECK_HEADER(gssapi.h,\n          [],\n          [\n            dnl no header found, disabling GSS\n            want_gss=no\n            AC_MSG_WARN(disabling GSS-API support since no header files were found)\n          ]\n        )\n      else\n        dnl MIT found\n        dnl check if we have a really old MIT Kerberos version (<= 1.2)\n        AC_MSG_CHECKING([if GSS-API headers declare GSS_C_NT_HOSTBASED_SERVICE])\n        AC_COMPILE_IFELSE([\n          AC_LANG_PROGRAM([[\n            #include <gssapi/gssapi.h>\n            #include <gssapi/gssapi_generic.h>\n            #include <gssapi/gssapi_krb5.h>\n          ]],[[\n            gss_import_name(\n                            (OM_uint32 *)0,\n                            (gss_buffer_t)0,\n                            GSS_C_NT_HOSTBASED_SERVICE,\n                            (gss_name_t *)0);\n          ]])\n        ],[\n          AC_MSG_RESULT([yes])\n        ],[\n          AC_MSG_RESULT([no])\n          AC_DEFINE(HAVE_OLD_GSSMIT, 1,\n            [if you have an old MIT Kerberos version, lacking GSS_C_NT_HOSTBASED_SERVICE])\n        ])\n      fi\n    ]\n  )\nelse\n  AC_MSG_RESULT(no)\nfi\nif test x\"$want_gss\" = xyes; then\n  AC_DEFINE(HAVE_GSSAPI, 1, [if you have GSS-API libraries])\n  HAVE_GSSAPI=1\n  curl_gss_msg=\"enabled (MIT Kerberos/Heimdal)\"\n  link_pkgconfig=''\n\n  if test -n \"$gnu_gss\"; then\n    curl_gss_msg=\"enabled (GNU GSS)\"\n    LDFLAGS=\"$LDFLAGS $GSSAPI_LIB_DIR\"\n    LDFLAGSPC=\"$LDFLAGSPC $GSSAPI_LIB_DIR\"\n    LIBS=\"-lgss $LIBS\"\n    link_pkgconfig=1\n  elif test -z \"$GSSAPI_LIB_DIR\"; then\n    case $host in\n      *-apple-*)\n        LIBS=\"-lgssapi_krb5 -lresolv $LIBS\"\n        ;;\n      *)\n        if test $GSSAPI_ROOT != \"/usr\"; then\n          CURL_CHECK_PKGCONFIG(mit-krb5-gssapi, $GSSAPI_ROOT/lib/pkgconfig)\n        else\n          CURL_CHECK_PKGCONFIG(mit-krb5-gssapi)\n        fi\n        if test -n \"$host_alias\" -a -f \"$GSSAPI_ROOT/bin/$host_alias-krb5-config\"; then\n          dnl krb5-config doesn't have --libs-only-L or similar, put everything\n          dnl into LIBS\n          gss_libs=`$GSSAPI_ROOT/bin/$host_alias-krb5-config --libs gssapi`\n          LIBS=\"$gss_libs $LIBS\"\n        elif test \"$PKGCONFIG\" != \"no\"; then\n          gss_libs=`$PKGCONFIG --libs mit-krb5-gssapi`\n          LIBS=\"$gss_libs $LIBS\"\n          link_pkgconfig=1\n        elif test -f \"$KRB5CONFIG\"; then\n          dnl krb5-config doesn't have --libs-only-L or similar, put everything\n          dnl into LIBS\n          gss_libs=`$KRB5CONFIG --libs gssapi`\n          LIBS=\"$gss_libs $LIBS\"\n          link_pkgconfig=1\n        else\n          case $host in\n            *-hp-hpux*)\n              gss_libname=\"gss\"\n              ;;\n            *)\n              gss_libname=\"gssapi\"\n              ;;\n          esac\n\n          if test \"$GSSAPI_ROOT\" != \"yes\"; then\n            LDFLAGS=\"$LDFLAGS -L$GSSAPI_ROOT/lib$libsuff\"\n            LDFLAGSPC=\"$LDFLAGSPC -L$GSSAPI_ROOT/lib$libsuff\"\n            LIBS=\"-l$gss_libname $LIBS\"\n          else\n            LIBS=\"-l$gss_libname $LIBS\"\n          fi\n        fi\n        ;;\n    esac\n  else\n    LDFLAGS=\"$LDFLAGS $GSSAPI_LIB_DIR\"\n    LDFLAGSPC=\"$LDFLAGSPC $GSSAPI_LIB_DIR\"\n    case $host in\n      *-hp-hpux*)\n        LIBS=\"-lgss $LIBS\"\n        ;;\n      *)\n        LIBS=\"-lgssapi $LIBS\"\n        ;;\n    esac\n  fi\n  if test -n \"$link_pkgconfig\"; then\n    if test -n \"$gnu_gss\"; then\n      LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE gss\"\n    elif test \"x$not_mit\" = \"x1\"; then\n      LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE heimdal-gssapi\"\n    else\n      LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE mit-krb5-gssapi\"\n    fi\n  fi\nelse\n  CPPFLAGS=\"$save_CPPFLAGS\"\nfi\n\nif test x\"$want_gss\" = xyes; then\n  AC_MSG_CHECKING([if we can link against GSS-API library])\n  AC_LINK_IFELSE([\n    AC_LANG_FUNC_LINK_TRY([gss_init_sec_context])\n  ],[\n    AC_MSG_RESULT([yes])\n  ],[\n    AC_MSG_RESULT([no])\n    AC_MSG_ERROR([--with-gssapi was specified, but a GSS-API library was not found.])\n  ])\nfi\n\nbuild_libstubgss=no\nif test x\"$want_gss\" = \"xyes\"; then\n  build_libstubgss=yes\nfi\n\nAM_CONDITIONAL(BUILD_STUB_GSS, test \"x$build_libstubgss\" = \"xyes\")\n\ndnl -------------------------------------------------------------\ndnl parse --with-default-ssl-backend so it can be validated below\ndnl -------------------------------------------------------------\n\nDEFAULT_SSL_BACKEND=no\nVALID_DEFAULT_SSL_BACKEND=\nAC_ARG_WITH(default-ssl-backend,\nAS_HELP_STRING([--with-default-ssl-backend=NAME],[Use NAME as default SSL backend])\nAS_HELP_STRING([--without-default-ssl-backend],[Use implicit default SSL backend]),\n  [DEFAULT_SSL_BACKEND=$withval])\ncase \"$DEFAULT_SSL_BACKEND\" in\n  no)\n    dnl --without-default-ssl-backend option used\n    ;;\n  default|yes)\n    dnl --with-default-ssl-backend option used without name\n    AC_MSG_ERROR([The name of the default SSL backend is required.])\n    ;;\n  *)\n    dnl --with-default-ssl-backend option used with name\n    dnl needs to be validated below\n    VALID_DEFAULT_SSL_BACKEND=no\n    ;;\nesac\n\nCURL_WITH_SCHANNEL\nCURL_WITH_SECURETRANSPORT\nCURL_WITH_AMISSL\nCURL_WITH_OPENSSL\nCURL_WITH_GNUTLS\nCURL_WITH_MBEDTLS\nCURL_WITH_WOLFSSL\nCURL_WITH_BEARSSL\nCURL_WITH_RUSTLS\n\ndnl link required libraries for USE_WIN32_CRYPTO or SCHANNEL_ENABLED\nif test \"x$USE_WIN32_CRYPTO\" = \"x1\" -o \"x$SCHANNEL_ENABLED\" = \"x1\"; then\n  LIBS=\"-ladvapi32 -lcrypt32 $LIBS\"\nfi\n\ndnl link bcrypt for BCryptGenRandom() (used when building for Vista or newer)\nif test \"x$curl_cv_native_windows\" = \"xyes\"; then\n  LIBS=\"-lbcrypt $LIBS\"\nfi\n\ncase \"x$SSL_DISABLED$OPENSSL_ENABLED$GNUTLS_ENABLED$MBEDTLS_ENABLED$WOLFSSL_ENABLED$SCHANNEL_ENABLED$SECURETRANSPORT_ENABLED$BEARSSL_ENABLED$RUSTLS_ENABLED\" in\n  x)\n    AC_MSG_ERROR([TLS not detected, you will not be able to use HTTPS, FTPS, NTLM and more.\nUse --with-openssl, --with-gnutls, --with-wolfssl, --with-mbedtls, --with-schannel, --with-secure-transport, --with-amissl, --with-bearssl or --with-rustls to address this.])\n    ;;\n  x1)\n    # one SSL backend is enabled\n    SSL_ENABLED=\"1\"\n    AC_MSG_NOTICE([built with one SSL backend])\n    ;;\n  xD)\n    # explicitly built without TLS\n    ;;\n  xD*)\n    AC_MSG_ERROR([--without-ssl has been set together with an explicit option to use an ssl library\n(e.g. --with-openssl, --with-gnutls, --with-wolfssl, --with-mbedtls, --with-schannel, --with-secure-transport, --with-amissl, --with-bearssl, --with-rustls).\nSince these are conflicting parameters, verify which is the desired one and drop the other.])\n    ;;\n  *)\n    # more than one SSL backend is enabled\n    SSL_ENABLED=\"1\"\n    CURL_WITH_MULTI_SSL=\"1\"\n    AC_DEFINE(CURL_WITH_MULTI_SSL, 1, [built with multiple SSL backends])\n    AC_MSG_NOTICE([built with multiple SSL backends])\n    ;;\nesac\n\nif test -n \"$ssl_backends\"; then\n  curl_ssl_msg=\"enabled ($ssl_backends)\"\nfi\n\nif test no = \"$VALID_DEFAULT_SSL_BACKEND\"; then\n  if test -n \"$SSL_ENABLED\"; then\n    AC_MSG_ERROR([Default SSL backend $DEFAULT_SSL_BACKEND not enabled!])\n  else\n    AC_MSG_ERROR([Default SSL backend requires SSL!])\n  fi\nelif test yes = \"$VALID_DEFAULT_SSL_BACKEND\"; then\n  AC_DEFINE_UNQUOTED([CURL_DEFAULT_SSL_BACKEND], [\"$DEFAULT_SSL_BACKEND\"], [Default SSL backend])\nfi\n\ndnl **********************************************************************\ndnl Check for the CA bundle\ndnl **********************************************************************\n\nif test -n \"$check_for_ca_bundle\"; then\n  CURL_CHECK_CA_BUNDLE\n  CURL_CHECK_CA_EMBED\nfi\n\nAM_CONDITIONAL(CURL_CA_EMBED_SET, test \"x$CURL_CA_EMBED\" != \"x\")\n\ndnl ----------------------\ndnl check unsafe CA search\ndnl ----------------------\n\nif test \"$curl_cv_native_windows\" = \"yes\"; then\n  AC_MSG_CHECKING([whether to enable unsafe CA bundle search in PATH on Windows])\n  AC_ARG_ENABLE(ca-search,\nAS_HELP_STRING([--enable-ca-search],[Enable unsafe CA bundle search in PATH on Windows (default)])\nAS_HELP_STRING([--disable-ca-search],[Disable unsafe CA bundle search in PATH on Windows]),\n  [ case \"$enableval\" in\n    no)\n      AC_MSG_RESULT([no])\n      AC_DEFINE(CURL_DISABLE_CA_SEARCH, 1, [If unsafe CA bundle search in PATH on Windows is disabled])\n      ;;\n    *)\n      AC_MSG_RESULT([yes])\n      ;;\n    esac ],\n      AC_MSG_RESULT([yes])\n  )\nfi\n\ndnl --------------------\ndnl check safe CA search\ndnl --------------------\n\nif test \"$curl_cv_native_windows\" = \"yes\"; then\n  AC_MSG_CHECKING([whether to enable safe CA bundle search (within the curl tool directory) on Windows])\n  AC_ARG_ENABLE(ca-search-safe,\nAS_HELP_STRING([--enable-ca-search-safe],[Enable safe CA bundle search])\nAS_HELP_STRING([--disable-ca-search-safe],[Disable safe CA bundle search (default)]),\n  [ case \"$enableval\" in\n    yes)\n      AC_MSG_RESULT([yes])\n      AC_DEFINE(CURL_CA_SEARCH_SAFE, 1, [If safe CA bundle search is enabled])\n      ;;\n    *)\n      AC_MSG_RESULT([no])\n      ;;\n    esac ],\n      AC_MSG_RESULT([no])\n  )\nfi\n\ndnl **********************************************************************\ndnl Check for libpsl\ndnl **********************************************************************\n\ndnl Default to compiler & linker defaults for LIBPSL files & libraries.\nOPT_LIBPSL=off\nAC_ARG_WITH(libpsl,dnl\nAS_HELP_STRING([--with-libpsl=PATH],[Where to look for libpsl, PATH points to the LIBPSL installation; when possible, set the PKG_CONFIG_PATH environment variable instead of using this option])\nAS_HELP_STRING([--without-libpsl], [disable LIBPSL]),\n  OPT_LIBPSL=$withval)\n\nif test X\"$OPT_LIBPSL\" != Xno; then\n  dnl backup the pre-libpsl variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  case \"$OPT_LIBPSL\" in\n    yes|off)\n      dnl --with-libpsl (without path) used\n      CURL_CHECK_PKGCONFIG(libpsl)\n\n      if test \"$PKGCONFIG\" != \"no\"; then\n        LIB_PSL=`$PKGCONFIG --libs-only-l libpsl`\n        LD_PSL=`$PKGCONFIG --libs-only-L libpsl`\n        CPP_PSL=`$PKGCONFIG --cflags-only-I libpsl`\n      else\n        dnl no libpsl pkg-config found\n        LIB_PSL=\"-lpsl\"\n      fi\n\n      ;;\n    *)\n      dnl use the given --with-libpsl spot\n      LIB_PSL=\"-lpsl\"\n      PREFIX_PSL=$OPT_LIBPSL\n      ;;\n  esac\n\n  dnl if given with a prefix, we set -L and -I based on that\n  if test -n \"$PREFIX_PSL\"; then\n    LD_PSL=-L${PREFIX_PSL}/lib$libsuff\n    CPP_PSL=-I${PREFIX_PSL}/include\n  fi\n\n  LDFLAGS=\"$LDFLAGS $LD_PSL\"\n  LDFLAGSPC=\"$LDFLAGSPC $LD_PSL\"\n  CPPFLAGS=\"$CPPFLAGS $CPP_PSL\"\n  LIBS=\"$LIB_PSL $LIBS\"\n\n  AC_CHECK_LIB(psl, psl_builtin,\n    [\n      AC_CHECK_HEADERS(libpsl.h,\n        curl_psl_msg=\"enabled\"\n        AC_DEFINE(USE_LIBPSL, 1, [if libpsl is in use])\n        USE_LIBPSL=1\n        LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libpsl\"\n      )\n    ],\n      dnl not found, revert back to clean variables\n      LDFLAGS=$CLEANLDFLAGS\n      LDFLAGSPC=$CLEANLDFLAGSPC\n      CPPFLAGS=$CLEANCPPFLAGS\n      LIBS=$CLEANLIBS\n  )\n\n  if test \"$USE_LIBPSL\" != \"1\"; then\n    AC_MSG_ERROR([libpsl libs and/or directories were not found where specified!])\n  fi\nfi\nAM_CONDITIONAL([USE_LIBPSL], [test \"$curl_psl_msg\" = \"enabled\"])\n\n\ndnl **********************************************************************\ndnl Check for libgsasl\ndnl **********************************************************************\n\nAC_ARG_WITH(libgsasl,\n  AS_HELP_STRING([--without-libgsasl],\n  [disable libgsasl support for SCRAM]),\n  with_libgsasl=$withval,\n  with_libgsasl=yes)\nif test $with_libgsasl != \"no\"; then\n  AC_SEARCH_LIBS(gsasl_init, gsasl,\n    [curl_gsasl_msg=\"enabled\";\n      AC_DEFINE([USE_GSASL], [1], [GSASL support enabled])\n      LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libgsasl\"\n    ],\n    [curl_gsasl_msg=\"no      (libgsasl not found)\";\n      AC_MSG_WARN([libgsasl was not found])\n    ]\n  )\nfi\nAM_CONDITIONAL([USE_GSASL], [test \"$curl_gsasl_msg\" = \"enabled\"])\n\nAC_ARG_WITH(libmetalink,,\n  AC_MSG_ERROR([--with-libmetalink and --without-libmetalink no longer work!]))\n\ndnl **********************************************************************\ndnl Check for the presence of libssh2 libraries and headers\ndnl **********************************************************************\n\ndnl Default to compiler & linker defaults for libssh2 files & libraries.\nOPT_LIBSSH2=off\nAC_ARG_WITH(libssh2,dnl\nAS_HELP_STRING([--with-libssh2=PATH],[Where to look for libssh2, PATH points to the libssh2 installation; when possible, set the PKG_CONFIG_PATH environment variable instead of using this option])\nAS_HELP_STRING([--with-libssh2], [enable libssh2]),\n  OPT_LIBSSH2=$withval, OPT_LIBSSH2=no)\n\n\nOPT_LIBSSH=off\nAC_ARG_WITH(libssh,dnl\nAS_HELP_STRING([--with-libssh=PATH],[Where to look for libssh, PATH points to the libssh installation; when possible, set the PKG_CONFIG_PATH environment variable instead of using this option])\nAS_HELP_STRING([--with-libssh], [enable libssh]),\n  OPT_LIBSSH=$withval, OPT_LIBSSH=no)\n\nOPT_WOLFSSH=off\nAC_ARG_WITH(wolfssh,dnl\nAS_HELP_STRING([--with-wolfssh=PATH],[Where to look for wolfssh, PATH points to the wolfSSH installation; when possible, set the PKG_CONFIG_PATH environment variable instead of using this option])\nAS_HELP_STRING([--with-wolfssh], [enable wolfssh]),\n  OPT_WOLFSSH=$withval, OPT_WOLFSSH=no)\n\nif test X\"$OPT_LIBSSH2\" != Xno; then\n  dnl backup the pre-libssh2 variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  case \"$OPT_LIBSSH2\" in\n    yes)\n      dnl --with-libssh2 (without path) used\n      CURL_CHECK_PKGCONFIG(libssh2)\n\n      if test \"$PKGCONFIG\" != \"no\"; then\n        LIB_SSH2=`$PKGCONFIG --libs-only-l libssh2`\n        LD_SSH2=`$PKGCONFIG --libs-only-L libssh2`\n        CPP_SSH2=`$PKGCONFIG --cflags-only-I libssh2`\n        version=`$PKGCONFIG --modversion libssh2`\n        DIR_SSH2=`echo $LD_SSH2 | $SED -e 's/^-L//'`\n      fi\n\n      ;;\n    off)\n      dnl no --with-libssh2 option given, just check default places\n      ;;\n    *)\n      dnl use the given --with-libssh2 spot\n      PREFIX_SSH2=$OPT_LIBSSH2\n      ;;\n  esac\n\n  dnl if given with a prefix, we set -L and -I based on that\n  if test -n \"$PREFIX_SSH2\"; then\n    LIB_SSH2=\"-lssh2\"\n    LD_SSH2=-L${PREFIX_SSH2}/lib$libsuff\n    CPP_SSH2=-I${PREFIX_SSH2}/include\n    DIR_SSH2=${PREFIX_SSH2}/lib$libsuff\n  fi\n\n  LDFLAGS=\"$LDFLAGS $LD_SSH2\"\n  LDFLAGSPC=\"$LDFLAGSPC $LD_SSH2\"\n  CPPFLAGS=\"$CPPFLAGS $CPP_SSH2\"\n  LIBS=\"$LIB_SSH2 $LIBS\"\n\n  dnl check for function added in libssh2 version 1.0\n  AC_CHECK_LIB(ssh2, libssh2_session_block_directions)\n\n  AC_CHECK_HEADER(libssh2.h,\n    curl_ssh_msg=\"enabled (libssh2)\"\n    AC_DEFINE(USE_LIBSSH2, 1, [if libssh2 is in use])\n    USE_LIBSSH2=1\n  )\n\n  if test X\"$OPT_LIBSSH2\" != Xoff &&\n     test \"$USE_LIBSSH2\" != \"1\"; then\n    AC_MSG_ERROR([libssh2 libs and/or directories were not found where specified!])\n  fi\n\n  if test \"$USE_LIBSSH2\" = \"1\"; then\n    if test -n \"$DIR_SSH2\"; then\n      dnl when the libssh2 shared libs were found in a path that the run-time\n      dnl linker doesn't search through, we need to add it to CURL_LIBRARY_PATH\n      dnl to prevent further configure tests to fail due to this\n\n      if test \"x$cross_compiling\" != \"xyes\"; then\n        CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$DIR_SSH2\"\n        export CURL_LIBRARY_PATH\n        AC_MSG_NOTICE([Added $DIR_SSH2 to CURL_LIBRARY_PATH])\n      fi\n    fi\n    LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libssh2\"\n  else\n    dnl no libssh2, revert back to clean variables\n    LDFLAGS=$CLEANLDFLAGS\n    LDFLAGSPC=$CLEANLDFLAGSPC\n    CPPFLAGS=$CLEANCPPFLAGS\n    LIBS=$CLEANLIBS\n  fi\nelif test X\"$OPT_LIBSSH\" != Xno; then\n  dnl backup the pre-libssh variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  case \"$OPT_LIBSSH\" in\n    yes)\n      dnl --with-libssh (without path) used\n      CURL_CHECK_PKGCONFIG(libssh)\n\n      if test \"$PKGCONFIG\" != \"no\"; then\n        LIB_SSH=`$PKGCONFIG --libs-only-l libssh`\n        LD_SSH=`$PKGCONFIG --libs-only-L libssh`\n        CPP_SSH=`$PKGCONFIG --cflags-only-I libssh`\n        version=`$PKGCONFIG --modversion libssh`\n        DIR_SSH=`echo $LD_SSH | $SED -e 's/^-L//'`\n      fi\n\n      ;;\n    off)\n      dnl no --with-libssh option given, just check default places\n      ;;\n    *)\n      dnl use the given --with-libssh spot\n      PREFIX_SSH=$OPT_LIBSSH\n      ;;\n  esac\n\n  dnl if given with a prefix, we set -L and -I based on that\n  if test -n \"$PREFIX_SSH\"; then\n    LIB_SSH=\"-lssh\"\n    LD_SSH=-L${PREFIX_SSH}/lib$libsuff\n    CPP_SSH=-I${PREFIX_SSH}/include\n    DIR_SSH=${PREFIX_SSH}/lib$libsuff\n  fi\n\n  LDFLAGS=\"$LDFLAGS $LD_SSH\"\n  LDFLAGSPC=\"$LDFLAGSPC $LD_SSH\"\n  CPPFLAGS=\"$CPPFLAGS $CPP_SSH\"\n  LIBS=\"$LIB_SSH $LIBS\"\n\n  AC_CHECK_LIB(ssh, ssh_new)\n\n  AC_CHECK_HEADER(libssh/libssh.h,\n    curl_ssh_msg=\"enabled (libssh)\"\n    AC_DEFINE(USE_LIBSSH, 1, [if libssh is in use])\n    USE_LIBSSH=1\n  )\n\n  if test X\"$OPT_LIBSSH\" != Xoff &&\n     test \"$USE_LIBSSH\" != \"1\"; then\n    AC_MSG_ERROR([libssh libs and/or directories were not found where specified!])\n  fi\n\n  if test \"$USE_LIBSSH\" = \"1\"; then\n    if test \"$curl_cv_native_windows\" = \"yes\"; then\n      dnl for if_nametoindex\n      LIBS=\"-liphlpapi $LIBS\"\n    fi\n    if test -n \"$DIR_SSH\"; then\n      dnl when the libssh shared libs were found in a path that the run-time\n      dnl linker doesn't search through, we need to add it to CURL_LIBRARY_PATH\n      dnl to prevent further configure tests to fail due to this\n\n      if test \"x$cross_compiling\" != \"xyes\"; then\n        CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$DIR_SSH\"\n        export CURL_LIBRARY_PATH\n        AC_MSG_NOTICE([Added $DIR_SSH to CURL_LIBRARY_PATH])\n      fi\n    fi\n    LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libssh\"\n  else\n    dnl no libssh, revert back to clean variables\n    LDFLAGS=$CLEANLDFLAGS\n    LDFLAGSPC=$CLEANLDFLAGSPC\n    CPPFLAGS=$CLEANCPPFLAGS\n    LIBS=$CLEANLIBS\n  fi\nelif test X\"$OPT_WOLFSSH\" != Xno; then\n  dnl backup the pre-wolfssh variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  if test \"$OPT_WOLFSSH\" != yes; then\n    WOLFCONFIG=\"$OPT_WOLFSSH/bin/wolfssh-config\"\n    WOLFSSH_LIBS=`$WOLFCONFIG --libs`\n    LDFLAGS=\"$LDFLAGS $WOLFSSH_LIBS\"\n    LDFLAGSPC=\"$LDFLAGSPC $WOLFSSH_LIBS\"\n    CPPFLAGS=\"$CPPFLAGS `$WOLFCONFIG --cflags`\"\n  fi\n\n  AC_CHECK_LIB(wolfssh, wolfSSH_Init)\n\n  AC_CHECK_HEADERS(wolfssh/ssh.h,\n    curl_ssh_msg=\"enabled (wolfSSH)\"\n    AC_DEFINE(USE_WOLFSSH, 1, [if wolfSSH is in use])\n    USE_WOLFSSH=1\n  )\nfi\n\ndnl **********************************************************************\ndnl Check for the presence of LIBRTMP libraries and headers\ndnl **********************************************************************\n\ndnl Default to compiler & linker defaults for LIBRTMP files & libraries.\nOPT_LIBRTMP=off\nAC_ARG_WITH(librtmp,dnl\nAS_HELP_STRING([--with-librtmp=PATH],[Where to look for librtmp, PATH points to the LIBRTMP installation; when possible, set the PKG_CONFIG_PATH environment variable instead of using this option])\nAS_HELP_STRING([--without-librtmp], [disable LIBRTMP]),\n  OPT_LIBRTMP=$withval)\n\nif test X\"$OPT_LIBRTMP\" != Xno; then\n  dnl backup the pre-librtmp variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  case \"$OPT_LIBRTMP\" in\n    yes)\n      dnl --with-librtmp (without path) used\n      CURL_CHECK_PKGCONFIG(librtmp)\n\n      if test \"$PKGCONFIG\" != \"no\"; then\n        LIB_RTMP=`$PKGCONFIG --libs-only-l librtmp`\n        LD_RTMP=`$PKGCONFIG --libs-only-L librtmp`\n        CPP_RTMP=`$PKGCONFIG --cflags-only-I librtmp`\n        version=`$PKGCONFIG --modversion librtmp`\n        DIR_RTMP=`echo $LD_RTMP | $SED -e 's/^-L//'`\n      else\n        dnl To avoid link errors, we do not allow --librtmp without\n        dnl a pkgconfig file\n        AC_MSG_ERROR([--librtmp was specified but could not find librtmp pkgconfig file.])\n      fi\n\n      ;;\n    off)\n      dnl no --with-librtmp option given, just check default places\n      LIB_RTMP=\"-lrtmp\"\n      ;;\n    *)\n      dnl use the given --with-librtmp spot\n      LIB_RTMP=\"-lrtmp\"\n      PREFIX_RTMP=$OPT_LIBRTMP\n      ;;\n  esac\n\n  dnl if given with a prefix, we set -L and -I based on that\n  if test -n \"$PREFIX_RTMP\"; then\n    LD_RTMP=-L${PREFIX_RTMP}/lib$libsuff\n    CPP_RTMP=-I${PREFIX_RTMP}/include\n    DIR_RTMP=${PREFIX_RTMP}/lib$libsuff\n  fi\n\n  LDFLAGS=\"$LDFLAGS $LD_RTMP\"\n  LDFLAGSPC=\"$LDFLAGSPC $LD_RTMP\"\n  CPPFLAGS=\"$CPPFLAGS $CPP_RTMP\"\n  LIBS=\"$LIB_RTMP $LIBS\"\n\n  AC_CHECK_LIB(rtmp, RTMP_Init,\n    [\n      AC_CHECK_HEADERS(librtmp/rtmp.h,\n        curl_rtmp_msg=\"enabled (librtmp)\"\n        AC_DEFINE(USE_LIBRTMP, 1, [if librtmp is in use])\n        USE_LIBRTMP=1\n        LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE librtmp\"\n      )\n    ],\n      dnl not found, revert back to clean variables\n      LDFLAGS=$CLEANLDFLAGS\n      LDFLAGSPC=$CLEANLDFLAGSPC\n      CPPFLAGS=$CLEANCPPFLAGS\n      LIBS=$CLEANLIBS\n  )\n\n  if test X\"$OPT_LIBRTMP\" != Xoff &&\n     test \"$USE_LIBRTMP\" != \"1\"; then\n    AC_MSG_ERROR([librtmp libs and/or directories were not found where specified!])\n  fi\nfi\n\ndnl **********************************************************************\ndnl Check for linker switch for versioned symbols\ndnl **********************************************************************\n\nversioned_symbols_flavour=\nAC_MSG_CHECKING([whether versioned symbols are wanted])\nAC_ARG_ENABLE(versioned-symbols,\nAS_HELP_STRING([--enable-versioned-symbols], [Enable versioned symbols in shared library])\nAS_HELP_STRING([--disable-versioned-symbols], [Disable versioned symbols in shared library]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    AC_MSG_CHECKING([if libraries can be versioned])\n    GLD=`$LD --help < /dev/null 2>/dev/null | grep version-script`\n    if test -z \"$GLD\"; then\n      AC_MSG_RESULT(no)\n      AC_MSG_WARN([You need an ld version supporting the --version-script option])\n    else\n      AC_MSG_RESULT(yes)\n      if test \"x$enableval\" != \"xyes\"; then\n        versioned_symbols_flavour=\"$enableval\"\n      elif test \"x$CURL_WITH_MULTI_SSL\" = \"x1\"; then\n        versioned_symbols_flavour=\"MULTISSL_\"\n      elif test \"x$OPENSSL_ENABLED\" = \"x1\"; then\n        versioned_symbols_flavour=\"OPENSSL_\"\n      elif test \"x$MBEDTLS_ENABLED\" = \"x1\"; then\n        versioned_symbols_flavour=\"MBEDTLS_\"\n      elif test \"x$BEARSSL_ENABLED\" = \"x1\"; then\n        versioned_symbols_flavour=\"BEARSSL_\"\n      elif test \"x$WOLFSSL_ENABLED\" = \"x1\"; then\n        versioned_symbols_flavour=\"WOLFSSL_\"\n      elif test \"x$GNUTLS_ENABLED\" = \"x1\"; then\n        versioned_symbols_flavour=\"GNUTLS_\"\n      elif test \"x$RUSTLS_ENABLED\" = \"x1\"; then\n        versioned_symbols_flavour=\"RUSTLS_\"\n      else\n        versioned_symbols_flavour=\"\"\n      fi\n      versioned_symbols=\"yes\"\n    fi\n    ;;\n\n  esac\n], [\n  AC_MSG_RESULT(no)\n]\n)\n\nAC_SUBST([CURL_LIBCURL_VERSIONED_SYMBOLS_PREFIX], [\"$versioned_symbols_flavour\"])\nAC_SUBST([CURL_LIBCURL_VERSIONED_SYMBOLS_SONAME], [\"4\"])  dnl Keep in sync with VERSIONCHANGE - VERSIONDEL in lib/Makefile.soname\nAM_CONDITIONAL([CURL_LT_SHLIB_USE_VERSIONED_SYMBOLS],\n  [test \"x$versioned_symbols\" = 'xyes'])\n\ndnl ----------------------------\ndnl check Windows Unicode option\ndnl ----------------------------\n\nwant_winuni=\"no\"\nif test \"$curl_cv_native_windows\" = \"yes\"; then\n  AC_MSG_CHECKING([whether to enable Windows Unicode (Windows native builds only)])\n  AC_ARG_ENABLE(windows-unicode,\nAS_HELP_STRING([--enable-windows-unicode],[Enable Windows Unicode])\nAS_HELP_STRING([--disable-windows-unicode],[Disable Windows Unicode (default)]),\n  [ case \"$enableval\" in\n    yes)\n      CPPFLAGS=\"${CPPFLAGS} -DUNICODE -D_UNICODE\"\n      want_winuni=\"yes\"\n      AC_MSG_RESULT([yes])\n      ;;\n    *)\n      AC_MSG_RESULT([no])\n      ;;\n    esac ],\n      AC_MSG_RESULT([no])\n  )\nfi\n\nAM_CONDITIONAL([USE_UNICODE], [test \"$want_winuni\" = \"yes\"])\n\ndnl -------------------------------------------------\ndnl check WinIDN option before other IDN libraries\ndnl -------------------------------------------------\n\ntst_links_winidn='no'\nif test \"$curl_cv_native_windows\" = 'yes'; then\n  AC_MSG_CHECKING([whether to enable Windows native IDN (Windows native builds only)])\n  OPT_WINIDN=\"default\"\n  AC_ARG_WITH(winidn,\nAS_HELP_STRING([--with-winidn=PATH],[enable Windows native IDN])\nAS_HELP_STRING([--without-winidn], [disable Windows native IDN]),\n    OPT_WINIDN=$withval)\n  case \"$OPT_WINIDN\" in\n    no|default)\n      dnl --without-winidn option used or configure option not specified\n      want_winidn=\"no\"\n      AC_MSG_RESULT([no])\n      ;;\n    yes)\n      dnl --with-winidn option used without path\n      want_winidn=\"yes\"\n      want_winidn_path=\"default\"\n      AC_MSG_RESULT([yes])\n      ;;\n    *)\n      dnl --with-winidn option used with path\n      want_winidn=\"yes\"\n      want_winidn_path=\"$withval\"\n      AC_MSG_RESULT([yes ($withval)])\n      ;;\n  esac\n\n  if test \"$want_winidn\" = \"yes\"; then\n    dnl WinIDN library support has been requested\n    clean_CPPFLAGS=\"$CPPFLAGS\"\n    clean_LDFLAGS=\"$LDFLAGS\"\n    clean_LDFLAGSPC=\"$LDFLAGSPC\"\n    clean_LIBS=\"$LIBS\"\n    WINIDN_LIBS=\"-lnormaliz\"\n    WINIDN_CPPFLAGS=\"\"\n    #\n    if test \"$want_winidn_path\" != \"default\"; then\n      dnl path has been specified\n      dnl pkg-config not available or provides no info\n      WINIDN_LDFLAGS=\"-L$want_winidn_path/lib$libsuff\"\n      WINIDN_CPPFLAGS=\"-I$want_winidn_path/include\"\n    fi\n    #\n    CPPFLAGS=\"$CPPFLAGS $WINIDN_CPPFLAGS\"\n    LDFLAGS=\"$LDFLAGS $WINIDN_LDFLAGS\"\n    LDFLAGSPC=\"$LDFLAGSPC $WINIDN_LDFLAGS\"\n    LIBS=\"$WINIDN_LIBS $LIBS\"\n    #\n    AC_MSG_CHECKING([if IdnToUnicode can be linked])\n    AC_LINK_IFELSE([\n      AC_LANG_PROGRAM([[\n        #include <windows.h>\n      ]],[[\n        #if (!defined(_WIN32_WINNT) || _WIN32_WINNT < 0x600) && \\\n          (!defined(WINVER) || WINVER < 0x600)\n        WINBASEAPI int WINAPI IdnToUnicode(DWORD dwFlags,\n                                           const WCHAR *lpASCIICharStr,\n                                           int cchASCIIChar,\n                                           WCHAR *lpUnicodeCharStr,\n                                           int cchUnicodeChar);\n        #endif\n        IdnToUnicode(0, NULL, 0, NULL, 0);\n      ]])\n    ],[\n      AC_MSG_RESULT([yes])\n      tst_links_winidn=\"yes\"\n    ],[\n      AC_MSG_RESULT([no])\n      tst_links_winidn=\"no\"\n    ])\n    #\n    if test \"$tst_links_winidn\" = \"yes\"; then\n      AC_DEFINE(USE_WIN32_IDN, 1, [Define to 1 if you have the `normaliz' (WinIDN) library (-lnormaliz).])\n      IDN_ENABLED=1\n      curl_idn_msg=\"enabled (Windows-native)\"\n    else\n      AC_MSG_WARN([Cannot find libraries for IDN support: IDN disabled])\n      CPPFLAGS=\"$clean_CPPFLAGS\"\n      LDFLAGS=\"$clean_LDFLAGS\"\n      LDFLAGSPC=\"$clean_LDFLAGSPC\"\n      LIBS=\"$clean_LIBS\"\n    fi\n  fi\nfi\n\ndnl **********************************************************************\ndnl Check for the presence of AppleIDN\ndnl **********************************************************************\n\ntst_links_appleidn='no'\ncase $host in\n  *-apple-*)\n    AC_MSG_CHECKING([whether to build with Apple IDN])\n    OPT_IDN=\"default\"\n    AC_ARG_WITH(apple-idn,\nAS_HELP_STRING([--with-apple-idn],[Enable AppleIDN])\nAS_HELP_STRING([--without-apple-idn],[Disable AppleIDN]),\n      [OPT_IDN=$withval])\n    case \"$OPT_IDN\" in\n      yes)\n        dnl --with-apple-idn option used\n        AC_MSG_RESULT([yes, check])\n        AC_CHECK_LIB(icucore, uidna_openUTS46,\n        [\n          AC_CHECK_HEADERS(unicode/uidna.h,\n            curl_idn_msg=\"enabled (AppleIDN)\"\n            AC_DEFINE(USE_APPLE_IDN, 1, [if AppleIDN])\n            USE_APPLE_IDN=1\n            IDN_ENABLED=1\n            LIBS=\"-licucore -liconv $LIBS\"\n            tst_links_appleidn='yes'\n          )\n        ])\n        ;;\n      *)\n        AC_MSG_RESULT([no])\n        ;;\n    esac\n    ;;\nesac\n\ndnl **********************************************************************\ndnl Check for the presence of libidn2\ndnl **********************************************************************\n\nAC_MSG_CHECKING([whether to build with libidn2])\nOPT_IDN=\"default\"\nAC_ARG_WITH(libidn2,\nAS_HELP_STRING([--with-libidn2=PATH],[Enable libidn2 usage])\nAS_HELP_STRING([--without-libidn2],[Disable libidn2 usage]),\n  [OPT_IDN=$withval])\nif test \"x$tst_links_winidn\" = \"xyes\"; then\n  want_idn=\"no\"\n  AC_MSG_RESULT([no (using WinIDN instead)])\nelif test \"x$tst_links_appleidn\" = \"xyes\"; then\n  want_idn=\"no\"\n  AC_MSG_RESULT([no (using AppleIDN instead)])\nelse\n  case \"$OPT_IDN\" in\n    no)\n      dnl --without-libidn2 option used\n      want_idn=\"no\"\n      AC_MSG_RESULT([no])\n      ;;\n    default)\n      dnl configure option not specified\n      want_idn=\"yes\"\n      want_idn_path=\"default\"\n      AC_MSG_RESULT([(assumed) yes])\n      ;;\n    yes)\n      dnl --with-libidn2 option used without path\n      want_idn=\"yes\"\n      want_idn_path=\"default\"\n      AC_MSG_RESULT([yes])\n      ;;\n    *)\n      dnl --with-libidn2 option used with path\n      want_idn=\"yes\"\n      want_idn_path=\"$withval\"\n      AC_MSG_RESULT([yes ($withval)])\n      ;;\n  esac\nfi\n\nif test \"$want_idn\" = \"yes\"; then\n  dnl idn library support has been requested\n  clean_CPPFLAGS=\"$CPPFLAGS\"\n  clean_LDFLAGS=\"$LDFLAGS\"\n  clean_LDFLAGSPC=\"$LDFLAGSPC\"\n  clean_LIBS=\"$LIBS\"\n  PKGCONFIG=\"no\"\n  #\n  if test \"$want_idn_path\" != \"default\"; then\n    dnl path has been specified\n    IDN_PCDIR=\"$want_idn_path/lib$libsuff/pkgconfig\"\n    CURL_CHECK_PKGCONFIG(libidn2, [$IDN_PCDIR])\n    if test \"$PKGCONFIG\" != \"no\"; then\n      IDN_LIBS=`CURL_EXPORT_PCDIR([$IDN_PCDIR]) dnl\n        $PKGCONFIG --libs-only-l libidn2 2>/dev/null`\n      IDN_LDFLAGS=`CURL_EXPORT_PCDIR([$IDN_PCDIR]) dnl\n        $PKGCONFIG --libs-only-L libidn2 2>/dev/null`\n      IDN_CPPFLAGS=`CURL_EXPORT_PCDIR([$IDN_PCDIR]) dnl\n        $PKGCONFIG --cflags-only-I libidn2 2>/dev/null`\n      IDN_DIR=`echo $IDN_LDFLAGS | $SED -e 's/^-L//'`\n    else\n      dnl pkg-config not available or provides no info\n      IDN_LIBS=\"-lidn2\"\n      IDN_LDFLAGS=\"-L$want_idn_path/lib$libsuff\"\n      IDN_CPPFLAGS=\"-I$want_idn_path/include\"\n      IDN_DIR=\"$want_idn_path/lib$libsuff\"\n    fi\n  else\n    dnl path not specified\n    CURL_CHECK_PKGCONFIG(libidn2)\n    if test \"$PKGCONFIG\" != \"no\"; then\n      IDN_LIBS=`$PKGCONFIG --libs-only-l libidn2 2>/dev/null`\n      IDN_LDFLAGS=`$PKGCONFIG --libs-only-L libidn2 2>/dev/null`\n      IDN_CPPFLAGS=`$PKGCONFIG --cflags-only-I libidn2 2>/dev/null`\n      IDN_DIR=`echo $IDN_LDFLAGS | $SED -e 's/^-L//'`\n    else\n      dnl pkg-config not available or provides no info\n      IDN_LIBS=\"-lidn2\"\n    fi\n  fi\n  #\n  if test \"$PKGCONFIG\" != \"no\"; then\n    AC_MSG_NOTICE([pkg-config: IDN_LIBS: \"$IDN_LIBS\"])\n    AC_MSG_NOTICE([pkg-config: IDN_LDFLAGS: \"$IDN_LDFLAGS\"])\n    AC_MSG_NOTICE([pkg-config: IDN_CPPFLAGS: \"$IDN_CPPFLAGS\"])\n    AC_MSG_NOTICE([pkg-config: IDN_DIR: \"$IDN_DIR\"])\n  else\n    AC_MSG_NOTICE([IDN_LIBS: \"$IDN_LIBS\"])\n    AC_MSG_NOTICE([IDN_LDFLAGS: \"$IDN_LDFLAGS\"])\n    AC_MSG_NOTICE([IDN_CPPFLAGS: \"$IDN_CPPFLAGS\"])\n    AC_MSG_NOTICE([IDN_DIR: \"$IDN_DIR\"])\n  fi\n  #\n  CPPFLAGS=\"$CPPFLAGS $IDN_CPPFLAGS\"\n  LDFLAGS=\"$LDFLAGS $IDN_LDFLAGS\"\n  LDFLAGSPC=\"$LDFLAGSPC $IDN_LDFLAGS\"\n  LIBS=\"$IDN_LIBS $LIBS\"\n  #\n  AC_MSG_CHECKING([if idn2_lookup_ul can be linked])\n  AC_LINK_IFELSE([\n    AC_LANG_FUNC_LINK_TRY([idn2_lookup_ul])\n  ],[\n    AC_MSG_RESULT([yes])\n    tst_links_libidn=\"yes\"\n  ],[\n    AC_MSG_RESULT([no])\n    tst_links_libidn=\"no\"\n  ])\n  #\n  AC_CHECK_HEADERS( idn2.h )\n\n  if test \"$tst_links_libidn\" = \"yes\"; then\n    AC_DEFINE(HAVE_LIBIDN2, 1, [Define to 1 if you have the `idn2' library (-lidn2).])\n    dnl different versions of libidn have different setups of these:\n\n    IDN_ENABLED=1\n    curl_idn_msg=\"enabled (libidn2)\"\n    if test -n \"$IDN_DIR\" -a \"x$cross_compiling\" != \"xyes\"; then\n      CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$IDN_DIR\"\n      export CURL_LIBRARY_PATH\n      AC_MSG_NOTICE([Added $IDN_DIR to CURL_LIBRARY_PATH])\n    fi\n    LIBCURL_PC_REQUIRES_PRIVATE=\"libidn2 $LIBCURL_PC_REQUIRES_PRIVATE\"\n  else\n    AC_MSG_WARN([Cannot find libidn2])\n    CPPFLAGS=\"$clean_CPPFLAGS\"\n    LDFLAGS=\"$clean_LDFLAGS\"\n    LDFLAGSPC=\"$clean_LDFLAGSPC\"\n    LIBS=\"$clean_LIBS\"\n    want_idn=\"no\"\n  fi\nfi\n\ndnl **********************************************************************\ndnl Check for nghttp2\ndnl **********************************************************************\n\nOPT_H2=\"yes\"\n\nif test \"x$disable_http\" = \"xyes\"; then\n  # without HTTP nghttp2 is no use\n  OPT_H2=\"no\"\nfi\n\nAC_ARG_WITH(nghttp2,\nAS_HELP_STRING([--with-nghttp2=PATH],[Enable nghttp2 usage])\nAS_HELP_STRING([--without-nghttp2],[Disable nghttp2 usage]),\n  [OPT_H2=$withval])\ncase \"$OPT_H2\" in\n  no)\n    dnl --without-nghttp2 option used\n    want_nghttp2=\"no\"\n    ;;\n  yes)\n    dnl --with-nghttp2 option used without path\n    want_nghttp2=\"default\"\n    want_nghttp2_path=\"\"\n    want_nghttp2_pkg_config_path=\"\"\n    ;;\n  *)\n    dnl --with-nghttp2 option used with path\n    want_nghttp2=\"yes\"\n    want_nghttp2_path=\"$withval\"\n    want_nghttp2_pkg_config_path=\"$withval/lib/pkgconfig\"\n    ;;\nesac\n\nif test X\"$want_nghttp2\" != Xno; then\n  dnl backup the pre-nghttp2 variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  CURL_CHECK_PKGCONFIG(libnghttp2, $want_nghttp2_pkg_config_path)\n\n  if test \"$PKGCONFIG\" != \"no\"; then\n    LIB_H2=`CURL_EXPORT_PCDIR([$want_nghttp2_pkg_config_path])\n      $PKGCONFIG --libs-only-l libnghttp2`\n    AC_MSG_NOTICE([-l is $LIB_H2])\n\n    CPP_H2=`CURL_EXPORT_PCDIR([$want_nghttp2_pkg_config_path]) dnl\n      $PKGCONFIG --cflags-only-I libnghttp2`\n    AC_MSG_NOTICE([-I is $CPP_H2])\n\n    LD_H2=`CURL_EXPORT_PCDIR([$want_nghttp2_pkg_config_path])\n      $PKGCONFIG --libs-only-L libnghttp2`\n    AC_MSG_NOTICE([-L is $LD_H2])\n\n    DIR_H2=`echo $LD_H2 | $SED -e 's/^-L//'`\n  elif test x\"$want_nghttp2_path\" != x; then\n    LIB_H2=\"-lnghttp2\"\n    LD_H2=-L${want_nghttp2_path}/lib$libsuff\n    CPP_H2=-I${want_nghttp2_path}/include\n    DIR_H2=${want_nghttp2_path}/lib$libsuff\n  elif test X\"$want_nghttp2\" != Xdefault; then\n    dnl no nghttp2 pkg-config found and no custom directory specified,\n    dnl deal with it\n    AC_MSG_ERROR([--with-nghttp2 was specified but could not find libnghttp2 pkg-config file.])\n  else\n    LIB_H2=\"-lnghttp2\"\n  fi\n\n  LDFLAGS=\"$LDFLAGS $LD_H2\"\n  LDFLAGSPC=\"$LDFLAGSPC $LD_H2\"\n  CPPFLAGS=\"$CPPFLAGS $CPP_H2\"\n  LIBS=\"$LIB_H2 $LIBS\"\n\n  # use nghttp2_session_get_stream_local_window_size to require nghttp2\n  # >= 1.15.0\n  AC_CHECK_LIB(nghttp2, nghttp2_session_get_stream_local_window_size,\n    [\n      AC_CHECK_HEADERS(nghttp2/nghttp2.h,\n        curl_h2_msg=\"enabled (nghttp2)\"\n        AC_DEFINE(USE_NGHTTP2, 1, [if nghttp2 is in use])\n        USE_NGHTTP2=1\n        LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libnghttp2\"\n      )\n\n      CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$DIR_H2\"\n      export CURL_LIBRARY_PATH\n      AC_MSG_NOTICE([Added $DIR_H2 to CURL_LIBRARY_PATH])\n    ],\n      dnl not found, revert back to clean variables\n      LDFLAGS=$CLEANLDFLAGS\n      LDFLAGSPC=$CLEANLDFLAGSPC\n      CPPFLAGS=$CLEANCPPFLAGS\n      LIBS=$CLEANLIBS\n  )\nfi\n\ndnl **********************************************************************\ndnl Check for ngtcp2 (QUIC)\ndnl **********************************************************************\n\nOPT_TCP2=\"no\"\n\nif test \"x$disable_http\" = \"xyes\"; then\n  # without HTTP, ngtcp2 is no use\n  OPT_TCP2=\"no\"\nfi\n\nAC_ARG_WITH(ngtcp2,\nAS_HELP_STRING([--with-ngtcp2=PATH],[Enable ngtcp2 usage])\nAS_HELP_STRING([--without-ngtcp2],[Disable ngtcp2 usage]),\n  [OPT_TCP2=$withval])\ncase \"$OPT_TCP2\" in\n  no)\n    dnl --without-ngtcp2 option used\n    want_tcp2=\"no\"\n    ;;\n  yes)\n    dnl --with-ngtcp2 option used without path\n    want_tcp2=\"default\"\n    want_tcp2_path=\"\"\n    ;;\n  *)\n    dnl --with-ngtcp2 option used with path\n    want_tcp2=\"yes\"\n    want_tcp2_path=\"$withval/lib/pkgconfig\"\n    ;;\nesac\n\ncurl_tcp2_msg=\"no      (--with-ngtcp2)\"\nif test X\"$want_tcp2\" != Xno; then\n\n  if test \"$QUIC_ENABLED\" != \"yes\"; then\n    AC_MSG_ERROR([the detected TLS library does not support QUIC, making --with-ngtcp2 a no-no])\n  fi\n\n  dnl backup the pre-ngtcp2 variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  CURL_CHECK_PKGCONFIG(libngtcp2, $want_tcp2_path)\n\n  if test \"$PKGCONFIG\" != \"no\"; then\n    LIB_TCP2=`CURL_EXPORT_PCDIR([$want_tcp2_path])\n      $PKGCONFIG --libs-only-l libngtcp2`\n    AC_MSG_NOTICE([-l is $LIB_TCP2])\n\n    CPP_TCP2=`CURL_EXPORT_PCDIR([$want_tcp2_path]) dnl\n      $PKGCONFIG --cflags-only-I libngtcp2`\n    AC_MSG_NOTICE([-I is $CPP_TCP2])\n\n    LD_TCP2=`CURL_EXPORT_PCDIR([$want_tcp2_path])\n      $PKGCONFIG --libs-only-L libngtcp2`\n    AC_MSG_NOTICE([-L is $LD_TCP2])\n\n    LDFLAGS=\"$LDFLAGS $LD_TCP2\"\n    LDFLAGSPC=\"$LDFLAGSPC $LD_TCP2\"\n    CPPFLAGS=\"$CPPFLAGS $CPP_TCP2\"\n    LIBS=\"$LIB_TCP2 $LIBS\"\n\n    if test \"x$cross_compiling\" != \"xyes\"; then\n      DIR_TCP2=`echo $LD_TCP2 | $SED -e 's/^-L//'`\n    fi\n    AC_CHECK_LIB(ngtcp2, ngtcp2_conn_client_new_versioned,\n      [\n        AC_CHECK_HEADERS(ngtcp2/ngtcp2.h,\n          AC_DEFINE(USE_NGTCP2, 1, [if ngtcp2 is in use])\n          USE_NGTCP2=1\n          CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$DIR_TCP2\"\n          export CURL_LIBRARY_PATH\n          AC_MSG_NOTICE([Added $DIR_TCP2 to CURL_LIBRARY_PATH])\n          LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libngtcp2\"\n        )\n      ],\n        dnl not found, revert back to clean variables\n        LDFLAGS=$CLEANLDFLAGS\n        LDFLAGSPC=$CLEANLDFLAGSPC\n        CPPFLAGS=$CLEANCPPFLAGS\n        LIBS=$CLEANLIBS\n    )\n\n  else\n    dnl no ngtcp2 pkg-config found, deal with it\n    if test X\"$want_tcp2\" != Xdefault; then\n      dnl To avoid link errors, we do not allow --with-ngtcp2 without\n      dnl a pkgconfig file\n      AC_MSG_ERROR([--with-ngtcp2 was specified but could not find ngtcp2 pkg-config file.])\n    fi\n  fi\nfi\n\nif test \"x$USE_NGTCP2\" = \"x1\" -a \"x$OPENSSL_ENABLED\" = \"x1\" -a \"x$OPENSSL_IS_BORINGSSL\" != \"x1\"; then\n  dnl backup the pre-ngtcp2_crypto_quictls variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  CURL_CHECK_PKGCONFIG(libngtcp2_crypto_quictls, $want_tcp2_path)\n\n  if test \"$PKGCONFIG\" != \"no\"; then\n    LIB_NGTCP2_CRYPTO_QUICTLS=`CURL_EXPORT_PCDIR([$want_tcp2_path])\n      $PKGCONFIG --libs-only-l libngtcp2_crypto_quictls`\n    AC_MSG_NOTICE([-l is $LIB_NGTCP2_CRYPTO_QUICTLS])\n\n    CPP_NGTCP2_CRYPTO_QUICTLS=`CURL_EXPORT_PCDIR([$want_tcp2_path]) dnl\n      $PKGCONFIG --cflags-only-I libngtcp2_crypto_quictls`\n    AC_MSG_NOTICE([-I is $CPP_NGTCP2_CRYPTO_QUICTLS])\n\n    LD_NGTCP2_CRYPTO_QUICTLS=`CURL_EXPORT_PCDIR([$want_tcp2_path])\n      $PKGCONFIG --libs-only-L libngtcp2_crypto_quictls`\n    AC_MSG_NOTICE([-L is $LD_NGTCP2_CRYPTO_QUICTLS])\n\n    LDFLAGS=\"$LDFLAGS $LD_NGTCP2_CRYPTO_QUICTLS\"\n    LDFLAGSPC=\"$LDFLAGSPC $LD_NGTCP2_CRYPTO_QUICTLS\"\n    CPPFLAGS=\"$CPPFLAGS $CPP_NGTCP2_CRYPTO_QUICTLS\"\n    LIBS=\"$LIB_NGTCP2_CRYPTO_QUICTLS $LIBS\"\n\n    if test \"x$cross_compiling\" != \"xyes\"; then\n      DIR_NGTCP2_CRYPTO_QUICTLS=`echo $LD_NGTCP2_CRYPTO_QUICTLS | $SED -e 's/^-L//'`\n    fi\n    AC_CHECK_LIB(ngtcp2_crypto_quictls, ngtcp2_crypto_recv_client_initial_cb,\n      [\n        AC_CHECK_HEADERS(ngtcp2/ngtcp2_crypto.h,\n          USE_NGTCP2=1\n          CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$DIR_NGTCP2_CRYPTO_QUICTLS\"\n          export CURL_LIBRARY_PATH\n          AC_MSG_NOTICE([Added $DIR_NGTCP2_CRYPTO_QUICTLS to CURL_LIBRARY_PATH])\n          LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libngtcp2_crypto_quictls\"\n        )\n      ],\n        dnl not found, revert back to clean variables\n        LDFLAGS=$CLEANLDFLAGS\n        LDFLAGSPC=$CLEANLDFLAGSPC\n        CPPFLAGS=$CLEANCPPFLAGS\n        LIBS=$CLEANLIBS\n    )\n\n  else\n    dnl no ngtcp2_crypto_quictls pkg-config found, deal with it\n    if test X\"$want_tcp2\" != Xdefault; then\n      dnl To avoid link errors, we do not allow --with-ngtcp2 without\n      dnl a pkgconfig file\n      AC_MSG_ERROR([--with-ngtcp2 was specified but could not find ngtcp2_crypto_quictls pkg-config file.])\n    fi\n  fi\nfi\n\nif test \"x$USE_NGTCP2\" = \"x1\" -a \"x$OPENSSL_ENABLED\" = \"x1\" -a \"x$OPENSSL_IS_BORINGSSL\" = \"x1\"; then\n  dnl backup the pre-ngtcp2_crypto_boringssl variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  CURL_CHECK_PKGCONFIG(libngtcp2_crypto_boringssl, $want_tcp2_path)\n\n  if test \"$PKGCONFIG\" != \"no\"; then\n    LIB_NGTCP2_CRYPTO_BORINGSSL=`CURL_EXPORT_PCDIR([$want_tcp2_path])\n      $PKGCONFIG --libs-only-l libngtcp2_crypto_boringssl`\n    AC_MSG_NOTICE([-l is $LIB_NGTCP2_CRYPTO_BORINGSSL])\n\n    CPP_NGTCP2_CRYPTO_BORINGSSL=`CURL_EXPORT_PCDIR([$want_tcp2_path]) dnl\n      $PKGCONFIG --cflags-only-I libngtcp2_crypto_boringssl`\n    AC_MSG_NOTICE([-I is $CPP_NGTCP2_CRYPTO_BORINGSSL])\n\n    LD_NGTCP2_CRYPTO_BORINGSSL=`CURL_EXPORT_PCDIR([$want_tcp2_path])\n      $PKGCONFIG --libs-only-L libngtcp2_crypto_boringssl`\n    AC_MSG_NOTICE([-L is $LD_NGTCP2_CRYPTO_BORINGSSL])\n\n    LDFLAGS=\"$LDFLAGS $LD_NGTCP2_CRYPTO_BORINGSSL\"\n    LDFLAGSPC=\"$LDFLAGSPC $LD_NGTCP2_CRYPTO_BORINGSSL\"\n    CPPFLAGS=\"$CPPFLAGS $CPP_NGTCP2_CRYPTO_BORINGSSL\"\n    LIBS=\"$LIB_NGTCP2_CRYPTO_BORINGSSL $LIBS\"\n\n    if test \"x$cross_compiling\" != \"xyes\"; then\n      DIR_NGTCP2_CRYPTO_BORINGSSL=`echo $LD_NGTCP2_CRYPTO_BORINGSSL | $SED -e 's/^-L//'`\n    fi\n    AC_CHECK_LIB(ngtcp2_crypto_boringssl, ngtcp2_crypto_recv_client_initial_cb,\n      [\n        AC_CHECK_HEADERS(ngtcp2/ngtcp2_crypto.h,\n          USE_NGTCP2=1\n          CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$DIR_NGTCP2_CRYPTO_BORINGSSL\"\n          export CURL_LIBRARY_PATH\n          AC_MSG_NOTICE([Added $DIR_NGTCP2_CRYPTO_BORINGSSL to CURL_LIBRARY_PATH])\n          LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libngtcp2_crypto_boringssl\"\n        )\n      ],\n        dnl not found, revert back to clean variables\n        LDFLAGS=$CLEANLDFLAGS\n        LDFLAGSPC=$CLEANLDFLAGSPC\n        CPPFLAGS=$CLEANCPPFLAGS\n        LIBS=$CLEANLIBS\n    )\n\n  else\n    dnl no ngtcp2_crypto_boringssl pkg-config found, deal with it\n    if test X\"$want_tcp2\" != Xdefault; then\n      dnl To avoid link errors, we do not allow --with-ngtcp2 without\n      dnl a pkgconfig file\n      AC_MSG_ERROR([--with-ngtcp2 was specified but could not find ngtcp2_crypto_boringssl pkg-config file.])\n    fi\n  fi\nfi\n\nif test \"x$USE_NGTCP2\" = \"x1\" -a \"x$GNUTLS_ENABLED\" = \"x1\"; then\n  dnl backup the pre-ngtcp2_crypto_gnutls variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  CURL_CHECK_PKGCONFIG(libngtcp2_crypto_gnutls, $want_tcp2_path)\n\n  if test \"$PKGCONFIG\" != \"no\"; then\n    LIB_NGTCP2_CRYPTO_GNUTLS=`CURL_EXPORT_PCDIR([$want_tcp2_path])\n      $PKGCONFIG --libs-only-l libngtcp2_crypto_gnutls`\n    AC_MSG_NOTICE([-l is $LIB_NGTCP2_CRYPTO_GNUTLS])\n\n    CPP_NGTCP2_CRYPTO_GNUTLS=`CURL_EXPORT_PCDIR([$want_tcp2_path]) dnl\n      $PKGCONFIG --cflags-only-I libngtcp2_crypto_gnutls`\n    AC_MSG_NOTICE([-I is $CPP_NGTCP2_CRYPTO_GNUTLS])\n\n    LD_NGTCP2_CRYPTO_GNUTLS=`CURL_EXPORT_PCDIR([$want_tcp2_path])\n      $PKGCONFIG --libs-only-L libngtcp2_crypto_gnutls`\n    AC_MSG_NOTICE([-L is $LD_NGTCP2_CRYPTO_GNUTLS])\n\n    LDFLAGS=\"$LDFLAGS $LD_NGTCP2_CRYPTO_GNUTLS\"\n    LDFLAGSPC=\"$LDFLAGSPC $LD_NGTCP2_CRYPTO_GNUTLS\"\n    CPPFLAGS=\"$CPPFLAGS $CPP_NGTCP2_CRYPTO_GNUTLS\"\n    LIBS=\"$LIB_NGTCP2_CRYPTO_GNUTLS $LIBS\"\n\n    if test \"x$cross_compiling\" != \"xyes\"; then\n      DIR_NGTCP2_CRYPTO_GNUTLS=`echo $LD_NGTCP2_CRYPTO_GNUTLS | $SED -e 's/^-L//'`\n    fi\n    AC_CHECK_LIB(ngtcp2_crypto_gnutls, ngtcp2_crypto_recv_client_initial_cb,\n      [\n        AC_CHECK_HEADERS(ngtcp2/ngtcp2_crypto.h,\n          USE_NGTCP2=1\n          CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$DIR_NGTCP2_CRYPTO_GNUTLS\"\n          export CURL_LIBRARY_PATH\n          AC_MSG_NOTICE([Added $DIR_NGTCP2_CRYPTO_GNUTLS to CURL_LIBRARY_PATH])\n          LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libngtcp2_crypto_gnutls\"\n        )\n      ],\n        dnl not found, revert back to clean variables\n        LDFLAGS=$CLEANLDFLAGS\n        LDFLAGSPC=$CLEANLDFLAGSPC\n        CPPFLAGS=$CLEANCPPFLAGS\n        LIBS=$CLEANLIBS\n    )\n\n  else\n    dnl no ngtcp2_crypto_gnutls pkg-config found, deal with it\n    if test X\"$want_tcp2\" != Xdefault; then\n      dnl To avoid link errors, we do not allow --with-ngtcp2 without\n      dnl a pkgconfig file\n      AC_MSG_ERROR([--with-ngtcp2 was specified but could not find ngtcp2_crypto_gnutls pkg-config file.])\n    fi\n  fi\nfi\n\nif test \"x$USE_NGTCP2\" = \"x1\" -a \"x$WOLFSSL_ENABLED\" = \"x1\"; then\n  dnl backup the pre-ngtcp2_crypto_wolfssl variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  CURL_CHECK_PKGCONFIG(libngtcp2_crypto_wolfssl, $want_tcp2_path)\n\n  if test \"$PKGCONFIG\" != \"no\"; then\n    LIB_NGTCP2_CRYPTO_WOLFSSL=`CURL_EXPORT_PCDIR([$want_tcp2_path])\n      $PKGCONFIG --libs-only-l libngtcp2_crypto_wolfssl`\n    AC_MSG_NOTICE([-l is $LIB_NGTCP2_CRYPTO_WOLFSSL])\n\n    CPP_NGTCP2_CRYPTO_WOLFSSL=`CURL_EXPORT_PCDIR([$want_tcp2_path]) dnl\n      $PKGCONFIG --cflags-only-I libngtcp2_crypto_wolfssl`\n    AC_MSG_NOTICE([-I is $CPP_NGTCP2_CRYPTO_WOLFSSL])\n\n    LD_NGTCP2_CRYPTO_WOLFSSL=`CURL_EXPORT_PCDIR([$want_tcp2_path])\n      $PKGCONFIG --libs-only-L libngtcp2_crypto_wolfssl`\n    AC_MSG_NOTICE([-L is $LD_NGTCP2_CRYPTO_WOLFSSL])\n\n    LDFLAGS=\"$LDFLAGS $LD_NGTCP2_CRYPTO_WOLFSSL\"\n    LDFLAGSPC=\"$LDFLAGSPC $LD_NGTCP2_CRYPTO_WOLFSSL\"\n    CPPFLAGS=\"$CPPFLAGS $CPP_NGTCP2_CRYPTO_WOLFSSL\"\n    LIBS=\"$LIB_NGTCP2_CRYPTO_WOLFSSL $LIBS\"\n\n    if test \"x$cross_compiling\" != \"xyes\"; then\n      DIR_NGTCP2_CRYPTO_WOLFSSL=`echo $LD_NGTCP2_CRYPTO_WOLFSSL | $SED -e 's/^-L//'`\n    fi\n    AC_CHECK_LIB(ngtcp2_crypto_wolfssl, ngtcp2_crypto_recv_client_initial_cb,\n      [\n        AC_CHECK_HEADERS(ngtcp2/ngtcp2_crypto.h,\n          USE_NGTCP2=1\n          CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$DIR_NGTCP2_CRYPTO_WOLFSSL\"\n          export CURL_LIBRARY_PATH\n          AC_MSG_NOTICE([Added $DIR_NGTCP2_CRYPTO_WOLFSSL to CURL_LIBRARY_PATH])\n          LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libngtcp2_crypto_wolfssl\"\n        )\n      ],\n        dnl not found, revert back to clean variables\n        LDFLAGS=$CLEANLDFLAGS\n        LDFLAGSPC=$CLEANLDFLAGSPC\n        CPPFLAGS=$CLEANCPPFLAGS\n        LIBS=$CLEANLIBS\n    )\n\n  else\n    dnl no ngtcp2_crypto_wolfssl pkg-config found, deal with it\n    if test X\"$want_tcp2\" != Xdefault; then\n      dnl To avoid link errors, we do not allow --with-ngtcp2 without\n      dnl a pkgconfig file\n      AC_MSG_ERROR([--with-ngtcp2 was specified but could not find ngtcp2_crypto_wolfssl pkg-config file.])\n    fi\n  fi\nfi\n\ndnl **********************************************************************\ndnl Check for OpenSSL QUIC\ndnl **********************************************************************\n\nOPT_OPENSSL_QUIC=\"no\"\n\nif test \"x$disable_http\" = \"xyes\" -o \"x$OPENSSL_ENABLED\" != \"x1\"; then\n  # without HTTP or without openssl, no use\n  OPT_OPENSSL_QUIC=\"no\"\nfi\n\nAC_ARG_WITH(openssl-quic,\nAS_HELP_STRING([--with-openssl-quic],[Enable OpenSSL QUIC usage])\nAS_HELP_STRING([--without-openssl-quic],[Disable OpenSSL QUIC usage]),\n  [OPT_OPENSSL_QUIC=$withval])\ncase \"$OPT_OPENSSL_QUIC\" in\n  no)\n    dnl --without-openssl-quic option used\n    want_openssl_quic=\"no\"\n    ;;\n  yes)\n    dnl --with-openssl-quic option used\n    want_openssl_quic=\"yes\"\n    ;;\nesac\n\ncurl_openssl_quic_msg=\"no      (--with-openssl-quic)\"\nif test \"x$want_openssl_quic\" = \"xyes\"; then\n\n  if test \"$USE_NGTCP2\" = 1; then\n    AC_MSG_ERROR([--with-openssl-quic and --with-ngtcp2 are mutually exclusive])\n  fi\n  if test \"$have_openssl_quic\" != 1; then\n    AC_MSG_ERROR([--with-openssl-quic requires quic support and OpenSSL >= 3.3.0])\n  fi\n  AC_DEFINE(USE_OPENSSL_QUIC, 1, [if openssl QUIC is in use])\n  USE_OPENSSL_QUIC=1\nfi\n\ndnl **********************************************************************\ndnl Check for nghttp3 (HTTP/3 with ngtcp2)\ndnl **********************************************************************\n\nOPT_NGHTTP3=\"yes\"\n\nif test \"x$USE_NGTCP2\" != \"x1\" -a \"x$USE_OPENSSL_QUIC\" != \"x1\"; then\n  # without ngtcp2 or openssl quic, nghttp3 is of no use for us\n  OPT_NGHTTP3=\"no\"\n  want_nghttp3=\"no\"\nfi\n\nAC_ARG_WITH(nghttp3,\nAS_HELP_STRING([--with-nghttp3=PATH],[Enable nghttp3 usage])\nAS_HELP_STRING([--without-nghttp3],[Disable nghttp3 usage]),\n  [OPT_NGHTTP3=$withval])\ncase \"$OPT_NGHTTP3\" in\n  no)\n    dnl --without-nghttp3 option used\n    want_nghttp3=\"no\"\n    ;;\n  yes)\n    dnl --with-nghttp3 option used without path\n    want_nghttp3=\"default\"\n    want_nghttp3_path=\"\"\n    ;;\n  *)\n    dnl --with-nghttp3 option used with path\n    want_nghttp3=\"yes\"\n    want_nghttp3_path=\"$withval/lib/pkgconfig\"\n    ;;\nesac\n\ncurl_http3_msg=\"no      (--with-nghttp3)\"\nif test X\"$want_nghttp3\" != Xno; then\n\n  if test \"x$USE_NGTCP2\" != \"x1\" -a \"x$USE_OPENSSL_QUIC\" != \"x1\"; then\n    # without ngtcp2 or openssl quic, nghttp3 is of no use for us\n    AC_MSG_ERROR([nghttp3 enabled without a QUIC library; enable ngtcp2 or OpenSSL-QUIC])\n  fi\n\n  dnl backup the pre-nghttp3 variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  CURL_CHECK_PKGCONFIG(libnghttp3, $want_nghttp3_path)\n\n  if test \"$PKGCONFIG\" != \"no\"; then\n    LIB_NGHTTP3=`CURL_EXPORT_PCDIR([$want_nghttp3_path])\n      $PKGCONFIG --libs-only-l libnghttp3`\n    AC_MSG_NOTICE([-l is $LIB_NGHTTP3])\n\n    CPP_NGHTTP3=`CURL_EXPORT_PCDIR([$want_nghttp3_path]) dnl\n      $PKGCONFIG --cflags-only-I libnghttp3`\n    AC_MSG_NOTICE([-I is $CPP_NGHTTP3])\n\n    LD_NGHTTP3=`CURL_EXPORT_PCDIR([$want_nghttp3_path])\n      $PKGCONFIG --libs-only-L libnghttp3`\n    AC_MSG_NOTICE([-L is $LD_NGHTTP3])\n\n    LDFLAGS=\"$LDFLAGS $LD_NGHTTP3\"\n    LDFLAGSPC=\"$LDFLAGSPC $LD_NGHTTP3\"\n    CPPFLAGS=\"$CPPFLAGS $CPP_NGHTTP3\"\n    LIBS=\"$LIB_NGHTTP3 $LIBS\"\n\n    if test \"x$cross_compiling\" != \"xyes\"; then\n      DIR_NGHTTP3=`echo $LD_NGHTTP3 | $SED -e 's/^-L//'`\n    fi\n    AC_CHECK_LIB(nghttp3, nghttp3_conn_client_new_versioned,\n      [\n        AC_CHECK_HEADERS(nghttp3/nghttp3.h,\n          AC_DEFINE(USE_NGHTTP3, 1, [if nghttp3 is in use])\n          USE_NGHTTP3=1\n          CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$DIR_NGHTTP3\"\n          export CURL_LIBRARY_PATH\n          AC_MSG_NOTICE([Added $DIR_NGHTTP3 to CURL_LIBRARY_PATH])\n          LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libnghttp3\"\n        )\n      ],\n        dnl not found, revert back to clean variables\n        LDFLAGS=$CLEANLDFLAGS\n        LDFLAGSPC=$CLEANLDFLAGSPC\n        CPPFLAGS=$CLEANCPPFLAGS\n        LIBS=$CLEANLIBS\n    )\n\n  else\n    dnl no nghttp3 pkg-config found, deal with it\n    if test X\"$want_nghttp3\" != Xdefault; then\n      dnl To avoid link errors, we do not allow --with-nghttp3 without\n      dnl a pkgconfig file\n      AC_MSG_ERROR([--with-nghttp3 was specified but could not find nghttp3 pkg-config file.])\n    fi\n  fi\nfi\n\ndnl **********************************************************************\ndnl Check for ngtcp2 and nghttp3 (HTTP/3 with ngtcp2 + nghttp3)\ndnl **********************************************************************\n\nif test \"x$USE_NGTCP2\" = \"x1\" -a \"x$USE_NGHTTP3\" = \"x1\"; then\n  USE_NGTCP2_H3=1\n  AC_MSG_NOTICE([HTTP3 support is experimental])\n  curl_h3_msg=\"enabled (ngtcp2 + nghttp3)\"\nfi\n\ndnl **********************************************************************\ndnl Check for OpenSSL and nghttp3 (HTTP/3 with nghttp3 using OpenSSL QUIC)\ndnl **********************************************************************\n\nif test \"x$USE_OPENSSL_QUIC\" = \"x1\" -a \"x$USE_NGHTTP3\" = \"x1\"; then\n  experimental=\"$experimental HTTP3\"\n  USE_OPENSSL_H3=1\n  AC_MSG_NOTICE([HTTP3 support is experimental])\n  curl_h3_msg=\"enabled (openssl + nghttp3)\"\nfi\n\ndnl **********************************************************************\ndnl Check for quiche (QUIC)\ndnl **********************************************************************\n\nOPT_QUICHE=\"no\"\n\nif test \"x$disable_http\" = \"xyes\" -o \"x$USE_NGTCP\" = \"x1\"; then\n  # without HTTP or with ngtcp2, quiche is no use\n  OPT_QUICHE=\"no\"\nfi\n\nAC_ARG_WITH(quiche,\nAS_HELP_STRING([--with-quiche=PATH],[Enable quiche usage])\nAS_HELP_STRING([--without-quiche],[Disable quiche usage]),\n  [OPT_QUICHE=$withval])\ncase \"$OPT_QUICHE\" in\n  no)\n    dnl --without-quiche option used\n    want_quiche=\"no\"\n    ;;\n  yes)\n    dnl --with-quiche option used without path\n    want_quiche=\"default\"\n    want_quiche_path=\"\"\n    ;;\n  *)\n    dnl --with-quiche option used with path\n    want_quiche=\"yes\"\n    want_quiche_path=\"$withval\"\n    ;;\nesac\n\nif test X\"$want_quiche\" != Xno; then\n\n  if test \"$QUIC_ENABLED\" != \"yes\"; then\n    AC_MSG_ERROR([the detected TLS library does not support QUIC, making --with-quiche a no-no])\n  fi\n\n  if test \"$NGHTTP3_ENABLED\" = 1; then\n    AC_MSG_ERROR([--with-quiche and --with-ngtcp2 are mutually exclusive])\n  fi\n\n  dnl backup the pre-quiche variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  CURL_CHECK_PKGCONFIG(quiche, $want_quiche_path)\n\n  if test \"$PKGCONFIG\" != \"no\"; then\n    LIB_QUICHE=`CURL_EXPORT_PCDIR([$want_quiche_path])\n      $PKGCONFIG --libs-only-l quiche`\n    AC_MSG_NOTICE([-l is $LIB_QUICHE])\n\n    CPP_QUICHE=`CURL_EXPORT_PCDIR([$want_quiche_path]) dnl\n      $PKGCONFIG --cflags-only-I quiche`\n    AC_MSG_NOTICE([-I is $CPP_QUICHE])\n\n    LD_QUICHE=`CURL_EXPORT_PCDIR([$want_quiche_path])\n      $PKGCONFIG --libs-only-L quiche`\n    AC_MSG_NOTICE([-L is $LD_QUICHE])\n\n    LDFLAGS=\"$LDFLAGS $LD_QUICHE\"\n    LDFLAGSPC=\"$LDFLAGSPC $LD_QUICHE\"\n    CPPFLAGS=\"$CPPFLAGS $CPP_QUICHE\"\n    LIBS=\"$LIB_QUICHE $LIBS\"\n\n    if test \"x$cross_compiling\" != \"xyes\"; then\n      DIR_QUICHE=`echo $LD_QUICHE | $SED -e 's/^-L//'`\n    fi\n    AC_CHECK_LIB(quiche, quiche_conn_send_ack_eliciting,\n      [\n        AC_CHECK_HEADERS(quiche.h,\n          experimental=\"$experimental HTTP3\"\n          AC_MSG_NOTICE([HTTP3 support is experimental])\n          curl_h3_msg=\"enabled (quiche)\"\n          AC_DEFINE(USE_QUICHE, 1, [if quiche is in use])\n          USE_QUICHE=1\n          AC_CHECK_FUNCS([quiche_conn_set_qlog_fd])\n          CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$DIR_QUICHE\"\n          export CURL_LIBRARY_PATH\n          AC_MSG_NOTICE([Added $DIR_QUICHE to CURL_LIBRARY_PATH])\n          LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE quiche\",\n          [],\n          [\n            AC_INCLUDES_DEFAULT\n            #include <sys/socket.h>\n          ]\n        )\n      ],\n        dnl not found, revert back to clean variables\n        AC_MSG_ERROR([couldn't use quiche])\n    )\n  else\n    dnl no quiche pkg-config found, deal with it\n    if test X\"$want_quiche\" != Xdefault; then\n      dnl To avoid link errors, we do not allow --with-quiche without\n      dnl a pkgconfig file\n      AC_MSG_ERROR([--with-quiche was specified but could not find quiche pkg-config file.])\n    fi\n  fi\nfi\n\ndnl **********************************************************************\ndnl Check for msh3/msquic (QUIC)\ndnl **********************************************************************\n\nOPT_MSH3=\"no\"\n\nif test \"x$disable_http\" = \"xyes\" -o \"x$USE_NGTCP\" = \"x1\"; then\n  # without HTTP or with ngtcp2, msh3 is no use\n  OPT_MSH3=\"no\"\nfi\n\nAC_ARG_WITH(msh3,\nAS_HELP_STRING([--with-msh3=PATH],[Enable msh3 usage])\nAS_HELP_STRING([--without-msh3],[Disable msh3 usage]),\n  [OPT_MSH3=$withval])\ncase \"$OPT_MSH3\" in\n  no)\n    dnl --without-msh3 option used\n    want_msh3=\"no\"\n    ;;\n  yes)\n    dnl --with-msh3 option used without path\n    want_msh3=\"default\"\n    want_msh3_path=\"\"\n    ;;\n  *)\n    dnl --with-msh3 option used with path\n    want_msh3=\"yes\"\n    want_msh3_path=\"$withval\"\n    ;;\nesac\n\nif test X\"$want_msh3\" != Xno; then\n\n  dnl msh3 on non-Windows needs an OpenSSL with the QUIC API\n  if test \"$curl_cv_native_windows\" != \"yes\"; then\n    if test \"$QUIC_ENABLED\" != \"yes\"; then\n      AC_MSG_ERROR([the detected TLS library does not support QUIC, making --with-msh3 a no-no])\n    fi\n    if test \"$OPENSSL_ENABLED\" != \"1\"; then\n      AC_MSG_ERROR([msh3/msquic requires OpenSSL])\n    fi\n  fi\n\n  if test \"$NGHTTP3_ENABLED\" = 1; then\n    AC_MSG_ERROR([--with-msh3 and --with-ngtcp2 are mutually exclusive])\n  fi\n  if test \"$USE_QUICHE\" = 1; then\n    AC_MSG_ERROR([--with-msh3 and --with-quiche are mutually exclusive])\n  fi\n\n  dnl backup the pre-msh3 variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  if test -n \"$want_msh3_path\"; then\n    LD_MSH3=\"-L$want_msh3_path/lib\"\n    CPP_MSH3=\"-I$want_msh3_path/include\"\n    DIR_MSH3=\"$want_msh3_path/lib\"\n    LDFLAGS=\"$LDFLAGS $LD_MSH3\"\n    LDFLAGSPC=\"$LDFLAGSPC $LD_MSH3\"\n    CPPFLAGS=\"$CPPFLAGS $CPP_MSH3\"\n  fi\n  LIBS=\"-lmsh3 $LIBS\"\n\n  AC_CHECK_LIB(msh3, MsH3ApiOpen,\n    [\n      AC_CHECK_HEADERS(msh3.h,\n        curl_h3_msg=\"enabled (msh3)\"\n        AC_DEFINE(USE_MSH3, 1, [if msh3 is in use])\n        USE_MSH3=1\n        CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$DIR_MSH3\"\n        export CURL_LIBRARY_PATH\n        AC_MSG_NOTICE([Added $DIR_MSH3 to CURL_LIBRARY_PATH])\n        dnl FIXME: Enable when msh3 was detected via pkg-config\n        if false; then\n          LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libmsh3\"\n        fi\n        experimental=\"$experimental HTTP3\"\n      )\n    ],\n      dnl not found, revert back to clean variables\n      LDFLAGS=$CLEANLDFLAGS\n      LDFLAGSPC=$CLEANLDFLAGSPC\n      CPPFLAGS=$CLEANCPPFLAGS\n      LIBS=$CLEANLIBS\n  )\nfi\n\ndnl **********************************************************************\ndnl libuv is only ever used for debug purposes\ndnl **********************************************************************\n\nOPT_LIBUV=no\nAC_ARG_WITH(libuv,\nAS_HELP_STRING([--with-libuv=PATH],[Enable libuv])\nAS_HELP_STRING([--without-libuv],[Disable libuv]),\n  [OPT_LIBUV=$withval])\ncase \"$OPT_LIBUV\" in\n  no)\n    dnl --without-libuv option used\n    want_libuv=\"no\"\n    ;;\n  yes)\n    dnl --with-libuv option used without path\n    want_libuv=\"default\"\n    want_libuv_path=\"\"\n    ;;\n  *)\n    dnl --with-libuv option used with path\n    want_libuv=\"yes\"\n    want_libuv_path=\"$withval\"\n    ;;\nesac\n\nif test X\"$want_libuv\" != Xno; then\n  if test x$want_debug != xyes; then\n    AC_MSG_ERROR([Using libuv without debug support enabled is useless])\n  fi\n\n  dnl backup the pre-libuv variables\n  CLEANLDFLAGS=\"$LDFLAGS\"\n  CLEANLDFLAGSPC=\"$LDFLAGSPC\"\n  CLEANCPPFLAGS=\"$CPPFLAGS\"\n  CLEANLIBS=\"$LIBS\"\n\n  CURL_CHECK_PKGCONFIG(libuv, $want_libuv_path)\n\n  if test \"$PKGCONFIG\" != \"no\"; then\n    LIB_LIBUV=`CURL_EXPORT_PCDIR([$want_libuv_path])\n      $PKGCONFIG --libs-only-l libuv`\n    AC_MSG_NOTICE([-l is $LIB_LIBUV])\n\n    CPP_LIBUV=`CURL_EXPORT_PCDIR([$want_libuv_path]) dnl\n      $PKGCONFIG --cflags-only-I libuv`\n    AC_MSG_NOTICE([-I is $CPP_LIBUV])\n\n    LD_LIBUV=`CURL_EXPORT_PCDIR([$want_libuv_path])\n      $PKGCONFIG --libs-only-L libuv`\n    AC_MSG_NOTICE([-L is $LD_LIBUV])\n\n    LDFLAGS=\"$LDFLAGS $LD_LIBUV\"\n    LDFLAGSPC=\"$LDFLAGSPC $LD_LIBUV\"\n    CPPFLAGS=\"$CPPFLAGS $CPP_LIBUV\"\n    LIBS=\"$LIB_LIBUV $LIBS\"\n\n    if test \"x$cross_compiling\" != \"xyes\"; then\n      DIR_LIBUV=`echo $LD_LIBUV | $SED -e 's/^-L//'`\n    fi\n    AC_CHECK_LIB(uv, uv_default_loop,\n      [\n        AC_CHECK_HEADERS(uv.h,\n          AC_DEFINE(USE_LIBUV, 1, [if libuv is in use])\n          USE_LIBUV=1\n          CURL_LIBRARY_PATH=\"$CURL_LIBRARY_PATH:$DIR_LIBUV\"\n          export CURL_LIBRARY_PATH\n          AC_MSG_NOTICE([Added $DIR_LIBUV to CURL_LIBRARY_PATH])\n          LIBCURL_PC_REQUIRES_PRIVATE=\"$LIBCURL_PC_REQUIRES_PRIVATE libuv\"\n        )\n      ],\n        dnl not found, revert back to clean variables\n        LDFLAGS=$CLEANLDFLAGS\n        LDFLAGSPC=$CLEANLDFLAGSPC\n        CPPFLAGS=$CLEANCPPFLAGS\n        LIBS=$CLEANLIBS\n    )\n\n  else\n    dnl no libuv pkg-config found, deal with it\n    if test X\"$want_libuv\" != Xdefault; then\n      dnl To avoid link errors, we do not allow --with-libuv without\n      dnl a pkgconfig file\n      AC_MSG_ERROR([--with-libuv was specified but could not find libuv pkg-config file.])\n    fi\n  fi\n\nfi\n\ndnl **********************************************************************\ndnl Check for zsh completion path\ndnl **********************************************************************\n\nOPT_ZSH_FPATH=default\nAC_ARG_WITH(zsh-functions-dir,\nAS_HELP_STRING([--with-zsh-functions-dir=PATH],[Install zsh completions to PATH])\nAS_HELP_STRING([--without-zsh-functions-dir],[Do not install zsh completions]),\n  [OPT_ZSH_FPATH=$withval])\ncase \"$OPT_ZSH_FPATH\" in\n  default|no)\n    dnl --without-zsh-functions-dir option used\n    ;;\n  yes)\n    dnl --with-zsh-functions-dir option used without path\n    ZSH_FUNCTIONS_DIR=\"$datarootdir/zsh/site-functions\"\n    AC_SUBST(ZSH_FUNCTIONS_DIR)\n    ;;\n  *)\n    dnl --with-zsh-functions-dir option used with path\n    ZSH_FUNCTIONS_DIR=\"$withval\"\n    AC_SUBST(ZSH_FUNCTIONS_DIR)\n    ;;\nesac\nAM_CONDITIONAL(USE_ZSH_COMPLETION, test x\"$ZSH_FUNCTIONS_DIR\" != x)\n\ndnl **********************************************************************\ndnl Check for fish completion path\ndnl **********************************************************************\n\nOPT_FISH_FPATH=default\nAC_ARG_WITH(fish-functions-dir,\nAS_HELP_STRING([--with-fish-functions-dir=PATH],[Install fish completions to PATH])\nAS_HELP_STRING([--without-fish-functions-dir],[Do not install fish completions]),\n  [OPT_FISH_FPATH=$withval])\ncase \"$OPT_FISH_FPATH\" in\n  default|no)\n    dnl --without-fish-functions-dir option used\n    ;;\n  yes)\n    dnl --with-fish-functions-dir option used without path\n    CURL_CHECK_PKGCONFIG(fish)\n    if test \"$PKGCONFIG\" != \"no\"; then\n      FISH_FUNCTIONS_DIR=`$PKGCONFIG --variable completionsdir fish`\n    else\n      FISH_FUNCTIONS_DIR=\"$datarootdir/fish/vendor_completions.d\"\n    fi\n    AC_SUBST(FISH_FUNCTIONS_DIR)\n    ;;\n  *)\n    dnl --with-fish-functions-dir option used with path\n    FISH_FUNCTIONS_DIR=\"$withval\"\n    AC_SUBST(FISH_FUNCTIONS_DIR)\n    ;;\nesac\nAM_CONDITIONAL(USE_FISH_COMPLETION, test x\"$FISH_FUNCTIONS_DIR\" != x)\n\ndnl Now check for the very most basic headers. Then we can use these\ndnl ones as default-headers when checking for the rest!\nAC_CHECK_HEADERS(\n  sys/types.h \\\n  sys/time.h \\\n  sys/select.h \\\n  sys/socket.h \\\n  sys/ioctl.h \\\n  unistd.h \\\n  arpa/inet.h \\\n  net/if.h \\\n  netinet/in.h \\\n  netinet/in6.h \\\n  sys/un.h \\\n  linux/tcp.h \\\n  netinet/tcp.h \\\n  netinet/udp.h \\\n  netdb.h \\\n  sys/sockio.h \\\n  sys/stat.h \\\n  sys/param.h \\\n  termios.h \\\n  termio.h \\\n  fcntl.h \\\n  io.h \\\n  pwd.h \\\n  utime.h \\\n  sys/utime.h \\\n  sys/poll.h \\\n  poll.h \\\n  sys/resource.h \\\n  libgen.h \\\n  locale.h \\\n  stdbool.h \\\n  sys/filio.h \\\n  sys/eventfd.h,\ndnl to do if not found\n[],\ndnl to do if found\n[],\ndnl default includes\n[\n#include <stdlib.h>\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_TIME_H\n#include <sys/time.h>\n#endif\n#ifdef HAVE_SYS_SELECT_H\n#include <sys/select.h>\n#elif defined(HAVE_UNISTD_H)\n#include <unistd.h>\n#endif\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\n#ifdef HAVE_NETINET_IN_H\n#include <netinet/in.h>\n#endif\n#ifdef HAVE_NETINET_IN6_H\n#include <netinet/in6.h>  /* is this really required to detect other headers? */\n#endif\n#ifdef HAVE_SYS_UN_H\n#include <sys/un.h>  /* is this really required to detect other headers? */\n#endif\n]\n)\n\n\ndnl Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_TYPE_SIZE_T\n\nCURL_CHECK_STRUCT_TIMEVAL\nCURL_VERIFY_RUNTIMELIBS\n\nCURL_SIZEOF(size_t)\nCURL_SIZEOF(long)\nCURL_SIZEOF(int)\nCURL_SIZEOF(time_t)\nCURL_SIZEOF(off_t)\n\no=$CPPFLAGS\nCPPFLAGS=\"-I$srcdir/include $CPPFLAGS\"\nCURL_SIZEOF(curl_off_t, [\n#include <curl/system.h>\n])\nCURL_SIZEOF(curl_socket_t, [\n#include <curl/curl.h>\n])\nCPPFLAGS=$o\n\nAC_CHECK_TYPE(long long,\n  [AC_DEFINE(HAVE_LONGLONG, 1,\n    [Define to 1 if the compiler supports the 'long long' data type.])]\n  longlong=\"yes\"\n)\n\nif test ${ac_cv_sizeof_curl_off_t} -lt 8; then\n  AC_MSG_ERROR([64 bit curl_off_t is required])\nfi\n\n# check for ssize_t\nAC_CHECK_TYPE(ssize_t, ,\n  AC_DEFINE(ssize_t, int, [the signed version of size_t]))\n\n# check for bool type\nAC_CHECK_TYPE([bool],[\n  AC_DEFINE(HAVE_BOOL_T, 1,\n    [Define to 1 if bool is an available type.])\n], ,[\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_STDBOOL_H\n#include <stdbool.h>\n#endif\n])\n\n# check for sa_family_t\nAC_CHECK_TYPE(sa_family_t,\n  AC_DEFINE(HAVE_SA_FAMILY_T, 1, [Define to 1 if symbol `sa_family_t' exists]),\n  [\n  # The Windows name?\n  AC_CHECK_TYPE(ADDRESS_FAMILY,\n    AC_DEFINE(HAVE_ADDRESS_FAMILY, 1, [Define to 1 if symbol `ADDRESS_FAMILY' exists]),\n    [],\n    [\n#ifdef _WIN32\n#ifndef WIN32_LEAN_AND_MEAN\n#define WIN32_LEAN_AND_MEAN\n#endif\n#include <winsock2.h>\n#endif\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\n    ])\n  ],\n[\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\n])\n\n# check for suseconds_t\nAC_CHECK_TYPE([suseconds_t],[\n  AC_DEFINE(HAVE_SUSECONDS_T, 1,\n    [Define to 1 if suseconds_t is an available type.])\n], ,[\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_TIME_H\n#include <sys/time.h>\n#endif\n])\n\ncase $host_os in\n  amigaos*|msdos*)\n    AC_DEFINE(HAVE_TIME_T_UNSIGNED, 1, [Define this if time_t is unsigned])\n    ;;\n  *)\n    AC_MSG_CHECKING([if time_t is unsigned])\n    CURL_RUN_IFELSE(\n      [\n      #include <time.h>\n      int main(void) {\n        time_t t = -1;\n        return t < 0;\n      }\n      ],[\n      AC_MSG_RESULT([yes])\n      AC_DEFINE(HAVE_TIME_T_UNSIGNED, 1, [Define this if time_t is unsigned])\n    ],[\n      AC_MSG_RESULT([no])\n    ],[\n      dnl cross-compiling, most systems are signed\n      AC_MSG_RESULT([no])\n    ])\n    ;;\nesac\n\nTYPE_IN_ADDR_T\n\nTYPE_SOCKADDR_STORAGE\n\nCURL_CHECK_FUNC_SELECT\n\nCURL_CHECK_FUNC_RECV\nCURL_CHECK_FUNC_SEND\nCURL_CHECK_MSG_NOSIGNAL\n\nCURL_CHECK_FUNC_ALARM\nCURL_CHECK_FUNC_BASENAME\nCURL_CHECK_FUNC_CLOSESOCKET\nCURL_CHECK_FUNC_CLOSESOCKET_CAMEL\nCURL_CHECK_FUNC_FCNTL\nCURL_CHECK_FUNC_FREEADDRINFO\nCURL_CHECK_FUNC_FSETXATTR\nCURL_CHECK_FUNC_FTRUNCATE\nCURL_CHECK_FUNC_GETADDRINFO\nCURL_CHECK_FUNC_GETHOSTBYNAME_R\nCURL_CHECK_FUNC_GETHOSTNAME\nCURL_CHECK_FUNC_GETPEERNAME\nCURL_CHECK_FUNC_GETSOCKNAME\nCURL_CHECK_FUNC_GETIFADDRS\nCURL_CHECK_FUNC_GMTIME_R\nCURL_CHECK_FUNC_INET_NTOP\nCURL_CHECK_FUNC_INET_PTON\nCURL_CHECK_FUNC_IOCTL\nCURL_CHECK_FUNC_IOCTLSOCKET\nCURL_CHECK_FUNC_IOCTLSOCKET_CAMEL\nCURL_CHECK_FUNC_MEMRCHR\nCURL_CHECK_FUNC_SIGACTION\nCURL_CHECK_FUNC_SIGINTERRUPT\nCURL_CHECK_FUNC_SIGNAL\nCURL_CHECK_FUNC_SIGSETJMP\nCURL_CHECK_FUNC_SOCKET\nCURL_CHECK_FUNC_SOCKETPAIR\nCURL_CHECK_FUNC_STRDUP\nCURL_CHECK_FUNC_STRERROR_R\nCURL_CHECK_FUNC_STRTOK_R\nCURL_CHECK_FUNC_STRTOLL\n\ncase $host in\n  *msdosdjgpp)\n    ac_cv_func_pipe=no\n    skipcheck_pipe=yes\n    AC_MSG_NOTICE([skip check for pipe on msdosdjgpp])\n    ;;\nesac\n\nAC_CHECK_FUNCS([\\\n  eventfd \\\n  fnmatch \\\n  geteuid \\\n  getpass_r \\\n  getppid \\\n  getpwuid \\\n  getpwuid_r \\\n  getrlimit \\\n  gettimeofday \\\n  if_nametoindex \\\n  mach_absolute_time \\\n  pipe \\\n  poll \\\n  sched_yield \\\n  sendmsg \\\n  sendmmsg \\\n  setlocale \\\n  setmode \\\n  setrlimit \\\n  snprintf \\\n  utime \\\n  utimes \\\n])\n\nif test \"$curl_cv_native_windows\" != 'yes'; then\n  CURL_CHECK_FUNC_STRCASECMP\n  CURL_CHECK_FUNC_STRCMPI\n  CURL_CHECK_FUNC_STRICMP\nfi\n\nif test \"$curl_cv_native_windows\" = 'yes' -o \"$curl_cv_cygwin\" = 'yes'; then\n  AC_CHECK_FUNCS([_setmode])\nfi\n\nif test -z \"$ssl_backends\"; then\n  AC_CHECK_FUNCS([arc4random])\nfi\n\nif test \"$curl_cv_native_windows\" != 'yes'; then\n  AC_CHECK_FUNCS([fseeko])\n\n  dnl On Android, the only way to know if fseeko can be used is to see if it is\n  dnl declared or not (for this API level), as the symbol always exists in the\n  dnl lib.\n  AC_CHECK_DECL([fseeko],\n    [AC_DEFINE([HAVE_DECL_FSEEKO], [1],\n     [Define to 1 if you have the fseeko declaration])],\n    [],\n    [[#include <stdio.h>]])\nfi\n\nCURL_CHECK_NONBLOCKING_SOCKET\n\nAC_PATH_PROG(PERL, perl,,\n  $PATH:/usr/local/bin/perl:/usr/bin/:/usr/local/bin)\nAC_SUBST(PERL)\n\nif test \"x$BUILD_DOCS\" != \"x0\" -o \"x$USE_MANUAL\" != \"x0\" -o \"x$CURL_CA_EMBED\" != \"x\"; then\n  if test -z \"$PERL\"; then\n    AC_MSG_ERROR([perl was not found, needed for docs, manual and CA embed])\n  fi\nfi\n\ndnl set variable for use in automakefile(s)\nAM_CONDITIONAL(BUILD_DOCS, test x\"$BUILD_DOCS\" = x1)\n\ndnl *************************************************************************\ndnl If the manual variable still is set, then we go with providing a built-in\ndnl manual\n\nif test \"$USE_MANUAL\" = \"1\"; then\n  curl_manual_msg=\"enabled\"\nfi\n\ndnl set variable for use in automakefile(s)\nAM_CONDITIONAL(USE_MANUAL, test x\"$USE_MANUAL\" = x1)\n\nCURL_CHECK_LIB_ARES\n\nif test \"x$want_ares\" != xyes; then\n  CURL_CHECK_OPTION_THREADED_RESOLVER\n\n  if test \"$ipv6\" = yes; then\n    CURL_DARWIN_SYSTEMCONFIGURATION\n  fi\nfi\n\ndnl ************************************************************\ndnl disable POSIX threads\ndnl\nAC_MSG_CHECKING([whether to use POSIX threads for threaded resolver])\nAC_ARG_ENABLE(pthreads,\nAS_HELP_STRING([--enable-pthreads],\n  [Enable POSIX threads (default for threaded resolver)])\nAS_HELP_STRING([--disable-pthreads],[Disable POSIX threads]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    want_pthreads=no\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    want_pthreads=yes\n    ;;\n  esac ], [\n    default_pthreads=1\n    if test \"$curl_cv_native_windows\" = \"yes\"; then\n      default_pthreads=0\n    else\n      case $host_os in\n        msdos*)\n          default_pthreads=0\n          ;;\n      esac\n    fi\n    if test \"$default_pthreads\" = '0'; then\n      AC_MSG_RESULT(no)\n      want_pthreads=no\n    else\n      AC_MSG_RESULT(auto)\n      want_pthreads=auto\n    fi\n  ]\n)\n\ndnl turn off pthreads if rt is disabled\nif test \"$want_pthreads\" != \"no\"; then\n  if test \"$want_pthreads\" = \"yes\" && test \"$dontwant_rt\" = \"yes\"; then\n    AC_MSG_ERROR([options --enable-pthreads and --disable-rt are mutually exclusive])\n  fi\n  if test \"$dontwant_rt\" != \"no\"; then\n    dnl if --enable-pthreads was explicit then warn it's being ignored\n    if test \"$want_pthreads\" = \"yes\"; then\n      AC_MSG_WARN([--enable-pthreads Ignored since librt is disabled.])\n    fi\n    want_pthreads=no\n  fi\nfi\n\ndnl turn off pthreads if no threaded resolver\nif test \"$want_pthreads\" != \"no\" && test \"$want_thres\" != \"yes\"; then\n  want_pthreads=no\nfi\n\ndnl detect pthreads\nif test \"$want_pthreads\" != \"no\"; then\n  AC_CHECK_HEADER(pthread.h,\n    [ AC_DEFINE(HAVE_PTHREAD_H, 1, [if you have <pthread.h>])\n      save_CFLAGS=\"$CFLAGS\"\n      dnl When statically linking against BoringSSL, -lpthread is added to LIBS.\n      dnl Make sure to that this does not pass the check below, we really want\n      dnl -pthread in CFLAGS as recommended for GCC. This also ensures that\n      dnl lib1541 and lib1565 tests are built with these options. Otherwise\n      dnl they fail the build since tests/libtest/Makefile.am clears LIBS.\n      save_LIBS=\"$LIBS\"\n\n      LIBS=\n      dnl Check for libc variants without a separate pthread lib like bionic\n      AC_CHECK_FUNC(pthread_create, [USE_THREADS_POSIX=1] )\n      LIBS=\"$save_LIBS\"\n\n      dnl on HP-UX, life is more complicated...\n      case $host in\n        *-hp-hpux*)\n          dnl it doesn't actually work without -lpthread\n          USE_THREADS_POSIX=\"\"\n          ;;\n        *)\n          ;;\n      esac\n\n      dnl if it wasn't found without lib, search for it in pthread lib\n      if test \"$USE_THREADS_POSIX\" != \"1\"; then\n        # assign PTHREAD for pkg-config use\n        PTHREAD=\" -pthread\"\n\n        case $host in\n          *-ibm-aix*)\n            dnl Check if compiler is xlC\n            COMPILER_VERSION=`\"$CC\" -qversion 2>/dev/null`\n            if test x\"$COMPILER_VERSION\" = \"x\"; then\n              CFLAGS=\"$CFLAGS -pthread\"\n            else\n              CFLAGS=\"$CFLAGS -qthreaded\"\n            fi\n            ;;\n          powerpc-*amigaos*)\n            dnl No -pthread option, but link with -lpthread\n            PTHREAD=\" -lpthread\"\n            ;;\n          *)\n            CFLAGS=\"$CFLAGS -pthread\"\n            ;;\n        esac\n        AC_CHECK_LIB(pthread, pthread_create,\n                     [USE_THREADS_POSIX=1],\n                     [ CFLAGS=\"$save_CFLAGS\"])\n      fi\n\n      if test \"x$USE_THREADS_POSIX\" = \"x1\"; then\n        AC_DEFINE(USE_THREADS_POSIX, 1, [if you want POSIX threaded DNS lookup])\n        curl_res_msg=\"POSIX threaded\"\n      fi\n  ])\nfi\n\ndnl threaded resolver check\nif test \"$want_thres\" = \"yes\" && test \"x$USE_THREADS_POSIX\" != \"x1\"; then\n  if test \"$want_pthreads\" = \"yes\"; then\n    AC_MSG_ERROR([--enable-pthreads but pthreads was not found])\n  fi\n  dnl If native Windows fallback on Win32 threads since no POSIX threads\n  if test \"$curl_cv_native_windows\" = \"yes\"; then\n    USE_THREADS_WIN32=1\n    AC_DEFINE(USE_THREADS_WIN32, 1, [if you want Win32 threaded DNS lookup])\n    curl_res_msg=\"Win32 threaded\"\n  else\n    AC_MSG_ERROR([Threaded resolver enabled but no thread library found])\n  fi\nfi\n\nAC_CHECK_HEADER(dirent.h,\n  [ AC_DEFINE(HAVE_DIRENT_H, 1, [if you have <dirent.h>])\n    AC_CHECK_FUNC(opendir, AC_DEFINE(HAVE_OPENDIR, 1, [if you have opendir]) )\n  ]\n)\n\nCURL_CONVERT_INCLUDE_TO_ISYSTEM\n\ndnl ************************************************************\ndnl disable verbose text strings\ndnl\nAC_MSG_CHECKING([whether to enable verbose strings])\nAC_ARG_ENABLE(verbose,\nAS_HELP_STRING([--enable-verbose],[Enable verbose strings])\nAS_HELP_STRING([--disable-verbose],[Disable verbose strings]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_VERBOSE_STRINGS, 1, [to disable verbose strings])\n    curl_verbose_msg=\"no\"\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl enable SSPI support\ndnl\nAC_MSG_CHECKING([whether to enable SSPI support (Windows native builds only)])\nAC_ARG_ENABLE(sspi,\nAS_HELP_STRING([--enable-sspi],[Enable SSPI])\nAS_HELP_STRING([--disable-sspi],[Disable SSPI]),\n[ case \"$enableval\" in\n  yes)\n    if test \"$curl_cv_native_windows\" = \"yes\"; then\n      AC_MSG_RESULT(yes)\n      AC_DEFINE(USE_WINDOWS_SSPI, 1, [to enable SSPI support])\n      USE_WINDOWS_SSPI=1\n      curl_sspi_msg=\"enabled\"\n    else\n      AC_MSG_RESULT(no)\n      AC_MSG_WARN([--enable-sspi Ignored. Only supported on native Windows builds.])\n    fi\n    ;;\n  *)\n    if test \"x$SCHANNEL_ENABLED\" = \"x1\"; then\n      # --with-schannel implies --enable-sspi\n      AC_MSG_RESULT(yes)\n    else\n      AC_MSG_RESULT(no)\n    fi\n    ;;\n  esac ],\n    if test \"x$SCHANNEL_ENABLED\" = \"x1\"; then\n      # --with-schannel implies --enable-sspi\n      AC_MSG_RESULT(yes)\n    else\n      AC_MSG_RESULT(no)\n    fi\n)\n\ndnl ************************************************************\ndnl disable basic authentication\ndnl\nAC_MSG_CHECKING([whether to enable basic authentication method])\nAC_ARG_ENABLE(basic-auth,\nAS_HELP_STRING([--enable-basic-auth],[Enable basic authentication (default)])\nAS_HELP_STRING([--disable-basic-auth],[Disable basic authentication]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_BASIC_AUTH, 1, [to disable basic authentication])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable bearer authentication\ndnl\nAC_MSG_CHECKING([whether to enable bearer authentication method])\nAC_ARG_ENABLE(bearer-auth,\nAS_HELP_STRING([--enable-bearer-auth],[Enable bearer authentication (default)])\nAS_HELP_STRING([--disable-bearer-auth],[Disable bearer authentication]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_BEARER_AUTH, 1, [to disable bearer authentication])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable digest authentication\ndnl\nAC_MSG_CHECKING([whether to enable digest authentication method])\nAC_ARG_ENABLE(digest-auth,\nAS_HELP_STRING([--enable-digest-auth],[Enable digest authentication (default)])\nAS_HELP_STRING([--disable-digest-auth],[Disable digest authentication]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_DIGEST_AUTH, 1, [to disable digest authentication])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable kerberos authentication\ndnl\nAC_MSG_CHECKING([whether to enable kerberos authentication method])\nAC_ARG_ENABLE(kerberos-auth,\nAS_HELP_STRING([--enable-kerberos-auth],[Enable kerberos authentication (default)])\nAS_HELP_STRING([--disable-kerberos-auth],[Disable kerberos authentication]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_KERBEROS_AUTH, 1, [to disable kerberos authentication])\n    CURL_DISABLE_KERBEROS_AUTH=1\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable negotiate authentication\ndnl\nAC_MSG_CHECKING([whether to enable negotiate authentication method])\nAC_ARG_ENABLE(negotiate-auth,\nAS_HELP_STRING([--enable-negotiate-auth],[Enable negotiate authentication (default)])\nAS_HELP_STRING([--disable-negotiate-auth],[Disable negotiate authentication]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_NEGOTIATE_AUTH, 1, [to disable negotiate authentication])\n    CURL_DISABLE_NEGOTIATE_AUTH=1\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable aws\ndnl\nAC_MSG_CHECKING([whether to enable aws sig methods])\nAC_ARG_ENABLE(aws,\nAS_HELP_STRING([--enable-aws],[Enable AWS sig support (default)])\nAS_HELP_STRING([--disable-aws],[Disable AWS sig support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_AWS, 1, [to disable AWS sig support])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable NTLM support\ndnl\nAC_MSG_CHECKING([whether to support NTLM])\nAC_ARG_ENABLE(ntlm,\nAS_HELP_STRING([--enable-ntlm],[Enable NTLM support])\nAS_HELP_STRING([--disable-ntlm],[Disable NTLM support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_NTLM, 1, [to disable NTLM support])\n    CURL_DISABLE_NTLM=1\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable TLS-SRP authentication\ndnl\nAC_MSG_CHECKING([whether to enable TLS-SRP authentication])\nAC_ARG_ENABLE(tls-srp,\nAS_HELP_STRING([--enable-tls-srp],[Enable TLS-SRP authentication])\nAS_HELP_STRING([--disable-tls-srp],[Disable TLS-SRP authentication]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    want_tls_srp=no\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    want_tls_srp=yes\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n    want_tls_srp=yes\n)\n\nif test \"$want_tls_srp\" = \"yes\" && ( test \"x$HAVE_GNUTLS_SRP\" = \"x1\" || test \"x$HAVE_OPENSSL_SRP\" = \"x1\"); then\n  AC_DEFINE(USE_TLS_SRP, 1, [Use TLS-SRP authentication])\n  USE_TLS_SRP=1\n  curl_tls_srp_msg=\"enabled\"\nfi\n\ndnl ************************************************************\ndnl disable Unix domain sockets support\ndnl\nAC_MSG_CHECKING([whether to enable Unix domain sockets])\nAC_ARG_ENABLE(unix-sockets,\nAS_HELP_STRING([--enable-unix-sockets],[Enable Unix domain sockets])\nAS_HELP_STRING([--disable-unix-sockets],[Disable Unix domain sockets]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    want_unix_sockets=no\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    want_unix_sockets=yes\n    ;;\n  esac ], [\n    AC_MSG_RESULT(auto)\n    want_unix_sockets=auto\n    ]\n)\nif test \"x$want_unix_sockets\" != \"xno\"; then\n  if test \"x$curl_cv_native_windows\" = \"xyes\"; then\n    USE_UNIX_SOCKETS=1\n    AC_DEFINE(USE_UNIX_SOCKETS, 1, [Use Unix domain sockets])\n    curl_unix_sockets_msg=\"enabled\"\n  else\n    AC_CHECK_MEMBER([struct sockaddr_un.sun_path], [\n      AC_DEFINE(USE_UNIX_SOCKETS, 1, [Use Unix domain sockets])\n      USE_UNIX_SOCKETS=1\n      curl_unix_sockets_msg=\"enabled\"\n    ], [\n      if test \"x$want_unix_sockets\" = \"xyes\"; then\n        AC_MSG_ERROR([--enable-unix-sockets is not available on this platform!])\n      fi\n    ], [\n      #include <sys/un.h>\n    ])\n  fi\nfi\n\ndnl ************************************************************\ndnl disable cookies support\ndnl\nAC_MSG_CHECKING([whether to support cookies])\nAC_ARG_ENABLE(cookies,\nAS_HELP_STRING([--enable-cookies],[Enable cookies support])\nAS_HELP_STRING([--disable-cookies],[Disable cookies support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_COOKIES, 1, [to disable cookies support])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable socketpair\ndnl\nAC_MSG_CHECKING([whether to support socketpair])\nAC_ARG_ENABLE(socketpair,\nAS_HELP_STRING([--enable-socketpair],[Enable socketpair support])\nAS_HELP_STRING([--disable-socketpair],[Disable socketpair support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_SOCKETPAIR, 1, [to disable socketpair support])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable HTTP authentication support\ndnl\nAC_MSG_CHECKING([whether to support HTTP authentication])\nAC_ARG_ENABLE(http-auth,\nAS_HELP_STRING([--enable-http-auth],[Enable HTTP authentication support])\nAS_HELP_STRING([--disable-http-auth],[Disable HTTP authentication support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_HTTP_AUTH, 1, [disable HTTP authentication])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable DoH support\ndnl\nAC_MSG_CHECKING([whether to support DoH])\nAC_ARG_ENABLE(doh,\nAS_HELP_STRING([--enable-doh],[Enable DoH support])\nAS_HELP_STRING([--disable-doh],[Disable DoH support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_DOH, 1, [disable DoH])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable mime API support\ndnl\nAC_MSG_CHECKING([whether to support the MIME API])\nAC_ARG_ENABLE(mime,\nAS_HELP_STRING([--enable-mime],[Enable mime API support])\nAS_HELP_STRING([--disable-mime],[Disable mime API support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_MIME, 1, [disable mime API])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable bindlocal\ndnl\nAC_MSG_CHECKING([whether to support binding connections locally])\nAC_ARG_ENABLE(bindlocal,\nAS_HELP_STRING([--enable-bindlocal],[Enable local binding support])\nAS_HELP_STRING([--disable-bindlocal],[Disable local binding support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_BINDLOCAL, 1, [disable local binding support])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable form API support\ndnl\nAC_MSG_CHECKING([whether to support the form API])\nAC_ARG_ENABLE(form-api,\nAS_HELP_STRING([--enable-form-api],[Enable form API support])\nAS_HELP_STRING([--disable-form-api],[Disable form API support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_FORM_API, 1, [disable form API])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    test \"$enable_mime\" = no &&\n      AC_MSG_ERROR(MIME support needs to be enabled in order to enable form API support)\n    ;;\n  esac ],\n[\n  if test \"$enable_mime\" = no; then\n    enable_form_api=no\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_FORM_API, 1, [disable form API])\n  else\n    AC_MSG_RESULT(yes)\n  fi ]\n)\n\ndnl ************************************************************\ndnl disable date parsing\ndnl\nAC_MSG_CHECKING([whether to support date parsing])\nAC_ARG_ENABLE(dateparse,\nAS_HELP_STRING([--enable-dateparse],[Enable date parsing])\nAS_HELP_STRING([--disable-dateparse],[Disable date parsing]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_PARSEDATE, 1, [disable date parsing])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable netrc\ndnl\nAC_MSG_CHECKING([whether to support netrc parsing])\nAC_ARG_ENABLE(netrc,\nAS_HELP_STRING([--enable-netrc],[Enable netrc parsing])\nAS_HELP_STRING([--disable-netrc],[Disable netrc parsing]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_NETRC, 1, [disable netrc parsing])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable progress-meter\ndnl\nAC_MSG_CHECKING([whether to support progress-meter])\nAC_ARG_ENABLE(progress-meter,\nAS_HELP_STRING([--enable-progress-meter],[Enable progress-meter])\nAS_HELP_STRING([--disable-progress-meter],[Disable progress-meter]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_PROGRESS_METER, 1, [disable progress-meter])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable SHA-512/256 hash algorithm\ndnl\nAC_MSG_CHECKING([whether to support the SHA-512/256 hash algorithm])\nAC_ARG_ENABLE(sha512-256,\nAS_HELP_STRING([--enable-sha512-256],[Enable SHA-512/256 hash algorithm (default)])\nAS_HELP_STRING([--disable-sha512-256],[Disable SHA-512/256 hash algorithm]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_SHA512_256, 1, [disable SHA-512/256 hash algorithm])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable shuffle DNS support\ndnl\nAC_MSG_CHECKING([whether to support DNS shuffling])\nAC_ARG_ENABLE(dnsshuffle,\nAS_HELP_STRING([--enable-dnsshuffle],[Enable DNS shuffling])\nAS_HELP_STRING([--disable-dnsshuffle],[Disable DNS shuffling]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_SHUFFLE_DNS, 1, [disable DNS shuffling])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl disable the curl_easy_options API\ndnl\nAC_MSG_CHECKING([whether to support curl_easy_option*])\nAC_ARG_ENABLE(get-easy-options,\nAS_HELP_STRING([--enable-get-easy-options],[Enable curl_easy_options])\nAS_HELP_STRING([--disable-get-easy-options],[Disable curl_easy_options]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_GETOPTIONS, 1, [to disable curl_easy_options])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl switch on/off alt-svc\ndnl\nAC_MSG_CHECKING([whether to support alt-svc])\nAC_ARG_ENABLE(alt-svc,\nAS_HELP_STRING([--enable-alt-svc],[Enable alt-svc support])\nAS_HELP_STRING([--disable-alt-svc],[Disable alt-svc support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    AC_DEFINE(CURL_DISABLE_ALTSVC, 1, [disable alt-svc])\n    curl_altsvc_msg=\"no\";\n    enable_altsvc=\"no\"\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl ************************************************************\ndnl switch on/off headers-api\ndnl\nAC_MSG_CHECKING([whether to support headers-api])\nAC_ARG_ENABLE(headers-api,\nAS_HELP_STRING([--enable-headers-api],[Enable headers-api support])\nAS_HELP_STRING([--disable-headers-api],[Disable headers-api support]),\n[ case \"$enableval\" in\n  no)\n    AC_MSG_RESULT(no)\n    curl_headers_msg=\"no      (--enable-headers-api)\"\n    AC_DEFINE(CURL_DISABLE_HEADERS_API, 1, [disable headers-api])\n    ;;\n  *)\n    AC_MSG_RESULT(yes)\n    ;;\n  esac ],\n    AC_MSG_RESULT(yes)\n)\n\ndnl only check for HSTS if there's SSL present\nif test -n \"$SSL_ENABLED\"; then\n  dnl ************************************************************\n  dnl switch on/off hsts\n  dnl\n  AC_MSG_CHECKING([whether to support HSTS])\n  AC_ARG_ENABLE(hsts,\nAS_HELP_STRING([--enable-hsts],[Enable HSTS support])\nAS_HELP_STRING([--disable-hsts],[Disable HSTS support]),\n  [ case \"$enableval\" in\n    no)\n      AC_MSG_RESULT(no)\n      hsts=\"no\"\n      ;;\n    *)\n      AC_MSG_RESULT(yes)\n      ;;\n    esac ],\n      AC_MSG_RESULT($hsts)\n  )\nelse\n  AC_MSG_NOTICE([disables HSTS due to lack of SSL])\n  hsts=\"no\"\nfi\n\nif test \"x$hsts\" != \"xyes\"; then\n  curl_hsts_msg=\"no      (--enable-hsts)\";\n  AC_DEFINE(CURL_DISABLE_HSTS, 1, [disable alt-svc])\nfi\n\n\ndnl *************************************************************\ndnl check whether HTTPSRR support if desired\ndnl\nif test \"x$want_httpsrr\" != \"xno\"; then\n  AC_MSG_RESULT([HTTPSRR support is available])\n  AC_DEFINE(USE_HTTPSRR, 1, [enable HTTPS RR support])\n  experimental=\"$experimental HTTPSRR\"\nfi\n\ndnl *************************************************************\ndnl check whether ECH support, if desired, is actually available\ndnl\nif test \"x$want_ech\" != \"xno\"; then\n  AC_MSG_CHECKING([whether ECH support is available])\n\n  dnl assume NOT and look for sufficient condition\n  ECH_ENABLED=0\n  ECH_SUPPORT=''\n\n  dnl check for OpenSSL equivalent\n  if test \"x$OPENSSL_ENABLED\" = \"x1\"; then\n    AC_CHECK_FUNCS(SSL_set1_ech_config_list,\n      ECH_SUPPORT=\"ECH support available via BoringSSL with SSL_set1_ech_config_list\"\n      ECH_ENABLED=1)\n  fi\n  if test \"x$WOLFSSL_ENABLED\" = \"x1\"; then\n    AC_CHECK_FUNCS(wolfSSL_CTX_GenerateEchConfig,\n      ECH_SUPPORT=\"ECH support available via wolfSSL with wolfSSL_CTX_GenerateEchConfig\"\n      ECH_ENABLED=1)\n  fi\n\n  dnl now deal with whatever we found\n  if test \"x$ECH_ENABLED\" = \"x1\"; then\n    AC_DEFINE(USE_ECH, 1, [if ECH support is available])\n    AC_MSG_RESULT($ECH_SUPPORT)\n    experimental=\"$experimental ECH\"\n  else\n    AC_MSG_ERROR([--enable-ech ignored: No ECH support found])\n  fi\nfi\n\ndnl *************************************************************\ndnl check whether OpenSSL (lookalikes) have SSL_set0_wbio\ndnl\nif test \"x$OPENSSL_ENABLED\" = \"x1\"; then\n  AC_CHECK_FUNCS([SSL_set0_wbio])\nfi\n\nif test \"x$CURL_DISABLE_HTTP\" != \"x1\"; then\n  dnl *************************************************************\n  dnl WebSockets\n  dnl\n  AC_MSG_CHECKING([whether to support WebSockets])\n  AC_ARG_ENABLE(websockets,\n  AS_HELP_STRING([--enable-websockets],[Enable WebSockets support])\n  AS_HELP_STRING([--disable-websockets],[Disable WebSockets support]),\n  [ case \"$enableval\" in\n    no)\n      AC_MSG_RESULT(no)\n      AC_DEFINE(CURL_DISABLE_WEBSOCKETS, [1], [disable WebSockets])\n      CURL_DISABLE_WEBSOCKETS=1\n      ;;\n    *)\n      if test ${ac_cv_sizeof_curl_off_t} -gt 4; then\n        AC_MSG_RESULT(yes)\n      else\n        dnl WebSockets requires >32 bit curl_off_t\n        AC_MSG_RESULT(no)\n        AC_MSG_WARN([WebSockets disabled due to lack of >32 bit curl_off_t])\n        AC_DEFINE(CURL_DISABLE_WEBSOCKETS, [1], [disable WebSockets])\n        CURL_DISABLE_WEBSOCKETS=1\n      fi\n      ;;\n    esac ],\n      AC_MSG_RESULT(yes)\n  )\nelse\n  AC_MSG_WARN([WebSockets disabled because HTTP is disabled])\n  AC_DEFINE(CURL_DISABLE_WEBSOCKETS, [1], [disable WebSockets])\n  CURL_DISABLE_WEBSOCKETS=1\nfi\n\ndnl *************************************************************\ndnl check whether experimental SSL Session Im-/Export is enabled\ndnl\nif test \"x$want_ssls_export\" != \"xno\"; then\n  AC_MSG_CHECKING([whether SSL session export support is available])\n\n  dnl assume NOT and look for sufficient condition\n  SSLS_EXPORT_ENABLED=0\n  SSLS_EXPORT_SUPPORT=''\n\n  if test \"x$SSL_ENABLED\" != \"x1\"; then\n    AC_MSG_ERROR([--enable-ssls-export ignored: No SSL support])\n  else\n    SSLS_EXPORT_ENABLED=1\n    AC_DEFINE(USE_SSLS_EXPORT, 1, [if SSL session export support is available])\n    AC_MSG_RESULT(\"SSL session im-/export enabled\")\n    experimental=\"$experimental SSLS-EXPORT\"\n  fi\nfi\n\ndnl ************************************************************\ndnl hiding of library internal symbols\ndnl\nCURL_CONFIGURE_SYMBOL_HIDING\n\ndnl\ndnl All the library dependencies put into $LIB apply to libcurl only.\ndnl\nLIBCURL_PC_LDFLAGS_PRIVATE=''\ndnl Do not quote $INITIAL_LDFLAGS\nset -- $INITIAL_LDFLAGS\nwhile test -n \"$1\"; do\n  case \"$1\" in\n    -L* | --library-path=* | -F*)\n      LIBCURL_PC_LDFLAGS_PRIVATE=\"$LIBCURL_PC_LDFLAGS_PRIVATE $1\"\n      ;;\n    -framework)\n      if test -n \"$2\"; then\n        LIBCURL_PC_LDFLAGS_PRIVATE=\"$LIBCURL_PC_LDFLAGS_PRIVATE $1 $2\"\n        shift\n      fi\n      ;;\n  esac\n  shift\ndone\nLIBCURL_PC_LDFLAGS_PRIVATE=\"$LIBCURL_PC_LDFLAGS_PRIVATE $LDFLAGSPC\"\nLIBCURL_PC_LIBS_PRIVATE=\"$LIBS$PTHREAD\"\n\nAC_SUBST(LIBCURL_PC_LDFLAGS_PRIVATE)\nAC_SUBST(LIBCURL_PC_LIBS_PRIVATE)\nAC_SUBST(CURL_NETWORK_AND_TIME_LIBS)\n\ndnl BLANK_AT_MAKETIME may be used in our Makefile.am files to blank\ndnl LIBS variable used in generated makefile at makefile processing\ndnl time. Doing this functionally prevents LIBS from being used for\ndnl all link targets in given makefile.\nBLANK_AT_MAKETIME=\nAC_SUBST(BLANK_AT_MAKETIME)\n\nAM_CONDITIONAL(CROSSCOMPILING, test x$cross_compiling = xyes)\n\ndnl yes or no\nENABLE_SHARED=\"$enable_shared\"\nAC_SUBST(ENABLE_SHARED)\n\ndnl to let curl-config output the static libraries correctly\nENABLE_STATIC=\"$enable_static\"\nAC_SUBST(ENABLE_STATIC)\n\nsqueeze LIBCURL_PC_REQUIRES_PRIVATE\nLIBCURL_PC_REQUIRES_PRIVATE=`echo $LIBCURL_PC_REQUIRES_PRIVATE | tr ' ' ','`\n\nAC_SUBST(LIBCURL_PC_REQUIRES_PRIVATE)\n\ndnl Merge pkg-config private fields into public ones when static-only\nif test \"x$enable_shared\" = \"xno\"; then\n  LIBCURL_PC_REQUIRES=$LIBCURL_PC_REQUIRES_PRIVATE\n  LIBCURL_PC_LIBS=$LIBCURL_PC_LIBS_PRIVATE\nelse\n  LIBCURL_PC_REQUIRES=\n  LIBCURL_PC_LIBS=\nfi\nAC_SUBST(LIBCURL_PC_REQUIRES)\nAC_SUBST(LIBCURL_PC_LIBS)\n\nrm $compilersh\n\ndnl\ndnl For keeping supported features and protocols also in pkg-config file\ndnl since it is more cross-compile friendly than curl-config\ndnl\n\nif test \"x$OPENSSL_ENABLED\" = \"x1\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES SSL\"\nelif test -n \"$SSL_ENABLED\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES SSL\"\nfi\nif test \"x$IPV6_ENABLED\" = \"x1\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES IPv6\"\nfi\nif test \"x$USE_UNIX_SOCKETS\" = \"x1\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES UnixSockets\"\nfi\nif test \"x$HAVE_LIBZ\" = \"x1\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES libz\"\nfi\nif test \"x$HAVE_BROTLI\" = \"x1\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES brotli\"\nfi\nif test \"x$HAVE_ZSTD\" = \"x1\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES zstd\"\nfi\nif test \"x$USE_ARES\" = \"x1\" -o \"x$USE_THREADS_POSIX\" = \"x1\" \\\n                            -o \"x$USE_THREADS_WIN32\" = \"x1\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES AsynchDNS\"\nfi\nif test \"x$IDN_ENABLED\" = \"x1\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES IDN\"\nfi\nif test \"x$USE_WINDOWS_SSPI\" = \"x1\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES SSPI\"\nfi\n\nif test \"x$HAVE_GSSAPI\" = \"x1\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES GSS-API\"\nfi\n\nif test \"x$curl_psl_msg\" = \"xenabled\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES PSL\"\nfi\n\nif test \"x$curl_gsasl_msg\" = \"xenabled\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES gsasl\"\nfi\n\nif test \"x$enable_altsvc\" = \"xyes\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES alt-svc\"\nfi\nif test \"x$hsts\" = \"xyes\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES HSTS\"\nfi\n\nif test \"x$CURL_DISABLE_NEGOTIATE_AUTH\" != \"x1\" -a \\\n    \\( \"x$HAVE_GSSAPI\" = \"x1\" -o \"x$USE_WINDOWS_SSPI\" = \"x1\" \\); then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES SPNEGO\"\nfi\n\nif test \"x$CURL_DISABLE_KERBEROS_AUTH\" != \"x1\" -a \\\n    \\( \"x$HAVE_GSSAPI\" = \"x1\" -o \"x$USE_WINDOWS_SSPI\" = \"x1\" \\); then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES Kerberos\"\nfi\n\nuse_curl_ntlm_core=no\n\nif test \"x$CURL_DISABLE_NTLM\" != \"x1\"; then\n  if test \"x$OPENSSL_ENABLED\" = \"x1\" -o \"x$MBEDTLS_ENABLED\" = \"x1\" \\\n      -o \"x$GNUTLS_ENABLED\" = \"x1\" \\\n      -o \"x$SECURETRANSPORT_ENABLED\" = \"x1\" \\\n      -o \"x$USE_WIN32_CRYPTO\" = \"x1\" \\\n      -o \"x$WOLFSSL_NTLM\" = \"x1\"; then\n    use_curl_ntlm_core=yes\n  fi\n\n  if test \"x$use_curl_ntlm_core\" = \"xyes\" \\\n      -o \"x$USE_WINDOWS_SSPI\" = \"x1\"; then\n    SUPPORT_FEATURES=\"$SUPPORT_FEATURES NTLM\"\n  fi\nfi\n\nif test \"x$USE_TLS_SRP\" = \"x1\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES TLS-SRP\"\nfi\n\nif test \"x$USE_NGHTTP2\" = \"x1\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES HTTP2\"\nfi\n\nif test \"x$USE_NGTCP2_H3\" = \"x1\" -o \"x$USE_QUICHE\" = \"x1\" \\\n    -o \"x$USE_OPENSSL_H3\" = \"x1\" -o \"x$USE_MSH3\" = \"x1\"; then\n  if test \"x$CURL_WITH_MULTI_SSL\" = \"x1\"; then\n    AC_MSG_ERROR([MultiSSL cannot be enabled with HTTP/3 and vice versa])\n  fi\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES HTTP3\"\nfi\n\nif test \"x$CURL_WITH_MULTI_SSL\" = \"x1\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES MultiSSL\"\nfi\n\nAC_MSG_CHECKING([if this build supports HTTPS-proxy])\ndnl if not explicitly turned off, HTTPS-proxy comes with some TLS backends\nif test \"x$CURL_DISABLE_HTTP\" != \"x1\"; then\n  if test \"x$https_proxy\" != \"xno\"; then\n    if test \"x$OPENSSL_ENABLED\" = \"x1\" \\\n        -o \"x$GNUTLS_ENABLED\" = \"x1\" \\\n        -o \"x$SECURETRANSPORT_ENABLED\" = \"x1\" \\\n        -o \"x$RUSTLS_ENABLED\" = \"x1\" \\\n        -o \"x$BEARSSL_ENABLED\" = \"x1\" \\\n        -o \"x$SCHANNEL_ENABLED\" = \"x1\" \\\n        -o \"x$GNUTLS_ENABLED\" = \"x1\" \\\n        -o \"x$MBEDTLS_ENABLED\" = \"x1\"; then\n      SUPPORT_FEATURES=\"$SUPPORT_FEATURES HTTPS-proxy\"\n      AC_MSG_RESULT([yes])\n    elif test \"x$WOLFSSL_ENABLED\" = \"x1\" -a \"x$WOLFSSL_BIO\" = \"x1\"; then\n      SUPPORT_FEATURES=\"$SUPPORT_FEATURES HTTPS-proxy\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n  else\n    AC_MSG_RESULT([no])\n  fi\nelse\n  AC_MSG_RESULT([no])\nfi\n\nif test \"x$OPENSSL_ENABLED\" = \"x1\" -o -n \"$SSL_ENABLED\"; then\n  if test \"x$ECH_ENABLED\" = \"x1\"; then\n    SUPPORT_FEATURES=\"$SUPPORT_FEATURES ECH\"\n  fi\nfi\n\nif test \"x$SSLS_EXPORT_ENABLED\" = \"x1\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES SSLS-EXPORT\"\nfi\n\nif test ${ac_cv_sizeof_curl_off_t} -gt 4; then\n  if test ${ac_cv_sizeof_off_t} -gt 4 -o \\\n     \"$curl_win32_file_api\" = \"win32_large_files\"; then\n    SUPPORT_FEATURES=\"$SUPPORT_FEATURES Largefile\"\n  fi\nfi\n\nif test \"$tst_atomic\" = \"yes\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES threadsafe\"\nelif test \"x$USE_THREADS_POSIX\" = \"x1\" -a \\\n     \"x$ac_cv_header_pthread_h\" = \"xyes\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES threadsafe\"\nelse\n  AC_COMPILE_IFELSE([\n    AC_LANG_PROGRAM([[\n      #include <windows.h>\n    ]],[[\n      #if (WINVER < 0x600) && (_WIN32_WINNT < 0x600)\n      #error\n      #endif\n    ]])\n  ],[\n    SUPPORT_FEATURES=\"$SUPPORT_FEATURES threadsafe\"\n  ],[\n  ])\nfi\n\nif test \"x$want_winuni\" = \"xyes\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES Unicode\"\nfi\nif test \"x$want_debug\" = \"xyes\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES Debug\"\nfi\nif test \"x$want_curldebug\" = \"xyes\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES TrackMemory\"\nfi\nif test \"x$CURL_CA_EMBED\" != \"x\"; then\n  SUPPORT_FEATURES=\"$SUPPORT_FEATURES CAcert\"\n  CURL_CA_EMBED_msg=\"$CURL_CA_EMBED\"\nelse\n  CURL_CA_EMBED_msg='no'\nfi\n\ndnl replace spaces with newlines\ndnl sort the lines\ndnl replace the newlines back to spaces\nif sort -f </dev/null >/dev/null 2>&1; then\n  SUPPORT_FEATURES=`echo $SUPPORT_FEATURES | tr ' ' '\\012' | sort -f | tr '\\012' ' '`\nelse\n  SUPPORT_FEATURES=`echo $SUPPORT_FEATURES | tr ' ' '\\012' | sort | tr '\\012' ' '`\nfi\nAC_SUBST(SUPPORT_FEATURES)\n\ndnl For supported protocols in pkg-config file\nif test \"x$CURL_DISABLE_HTTP\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS HTTP\"\n  if test \"x$SSL_ENABLED\" = \"x1\"; then\n    SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS HTTPS\"\n  fi\nfi\nif test \"x$CURL_DISABLE_FTP\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS FTP\"\n  if test \"x$SSL_ENABLED\" = \"x1\"; then\n    SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS FTPS\"\n  fi\nfi\nif test \"x$CURL_DISABLE_FILE\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS FILE\"\nfi\nif test \"x$CURL_DISABLE_TELNET\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS TELNET\"\nfi\nif test \"x$CURL_DISABLE_LDAP\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS LDAP\"\n  if test \"x$CURL_DISABLE_LDAPS\" != \"x1\"; then\n    if (test \"x$USE_OPENLDAP\" = \"x1\" && test \"x$SSL_ENABLED\" = \"x1\") ||\n      (test \"x$USE_OPENLDAP\" != \"x1\"  && test \"x$HAVE_LDAP_SSL\" = \"x1\"); then\n      SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS LDAPS\"\n    fi\n  fi\nfi\nif test \"x$CURL_DISABLE_DICT\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS DICT\"\nfi\nif test \"x$CURL_DISABLE_TFTP\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS TFTP\"\nfi\nif test \"x$CURL_DISABLE_GOPHER\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS GOPHER\"\n  if test \"x$SSL_ENABLED\" = \"x1\"; then\n    SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS GOPHERS\"\n  fi\nfi\nif test \"x$CURL_DISABLE_MQTT\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS MQTT\"\nfi\nif test \"x$CURL_DISABLE_POP3\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS POP3\"\n  if test \"x$SSL_ENABLED\" = \"x1\"; then\n    SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS POP3S\"\n  fi\nfi\nif test \"x$CURL_DISABLE_IMAP\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS IMAP\"\n  if test \"x$SSL_ENABLED\" = \"x1\"; then\n    SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS IMAPS\"\n  fi\nfi\nif test \"x$CURL_DISABLE_SMB\" != \"x1\" \\\n    -a \"x$use_curl_ntlm_core\" = \"xyes\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS SMB\"\n  if test \"x$SSL_ENABLED\" = \"x1\"; then\n    SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS SMBS\"\n  fi\nfi\nif test \"x$CURL_DISABLE_SMTP\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS SMTP\"\n  if test \"x$SSL_ENABLED\" = \"x1\"; then\n    SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS SMTPS\"\n  fi\nfi\nif test \"x$USE_LIBSSH2\" = \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS SCP\"\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS SFTP\"\nfi\nif test \"x$USE_LIBSSH\" = \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS SCP\"\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS SFTP\"\nfi\nif test \"x$USE_WOLFSSH\" = \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS SFTP\"\nfi\nif test \"x$CURL_DISABLE_IPFS\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS IPFS IPNS\"\nfi\nif test \"x$CURL_DISABLE_RTSP\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS RTSP\"\nfi\nif test \"x$USE_LIBRTMP\" = \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS RTMP\"\nfi\nif test \"x$CURL_DISABLE_WEBSOCKETS\" != \"x1\"; then\n  SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS WS\"\n  if test \"x$SSL_ENABLED\" = \"x1\"; then\n    SUPPORT_PROTOCOLS=\"$SUPPORT_PROTOCOLS WSS\"\n  fi\nfi\n\ndnl replace spaces with newlines\ndnl sort the lines\ndnl replace the newlines back to spaces\nSUPPORT_PROTOCOLS=`echo $SUPPORT_PROTOCOLS | tr ' ' '\\012' | sort | tr '\\012' ' '`\n\nAC_SUBST(SUPPORT_PROTOCOLS)\n\ndnl squeeze whitespace out of some variables\n\nsqueeze CFLAGS\nsqueeze CPPFLAGS\nsqueeze DEFS\nsqueeze LDFLAGS\nsqueeze LIBS\n\nsqueeze LIBCURL_PC_LDFLAGS_PRIVATE\nsqueeze LIBCURL_PC_LIBS_PRIVATE\nsqueeze CURL_NETWORK_AND_TIME_LIBS\n\nsqueeze SUPPORT_FEATURES\nsqueeze SUPPORT_PROTOCOLS\n\nXC_CHECK_BUILD_FLAGS\n\nSSL_BACKENDS=${ssl_backends}\nAC_SUBST(SSL_BACKENDS)\n\nif test \"x$want_curldebug_assumed\" = \"xyes\" &&\n  test \"x$want_curldebug\" = \"xyes\" && test \"x$USE_ARES\" = \"x1\"; then\n  ac_configure_args=\"$ac_configure_args --enable-curldebug\"\nfi\n\nCURL_PREPARE_CONFIGUREHELP_PM\n\nAC_CONFIG_FILES([\\\n  Makefile \\\n  docs/Makefile \\\n  docs/examples/Makefile \\\n  docs/libcurl/Makefile \\\n  docs/libcurl/opts/Makefile \\\n  docs/cmdline-opts/Makefile \\\n  include/Makefile \\\n  include/curl/Makefile \\\n  src/Makefile \\\n  lib/Makefile \\\n  scripts/Makefile \\\n  lib/libcurl.vers \\\n  tests/Makefile \\\n  tests/config \\\n  tests/configurehelp.pm \\\n  tests/certs/Makefile \\\n  tests/certs/scripts/Makefile \\\n  tests/data/Makefile \\\n  tests/server/Makefile \\\n  tests/libtest/Makefile \\\n  tests/unit/Makefile \\\n  tests/http/config.ini \\\n  tests/http/Makefile \\\n  tests/http/clients/Makefile \\\n  packages/Makefile \\\n  packages/vms/Makefile \\\n  curl-config \\\n  libcurl.pc\n])\nAC_OUTPUT\n\nSUPPORT_PROTOCOLS_LOWER=`echo \"$SUPPORT_PROTOCOLS\" | tr A-Z a-z`\n\nAC_MSG_NOTICE([Configured to build curl/libcurl:\n\n  Host setup:       ${host}\n  Install prefix:   ${prefix}\n  Compiler:         ${CC}\n   CFLAGS:          ${CFLAGS}\n   CFLAGS extras:   ${CURL_CFLAG_EXTRAS}\n   CPPFLAGS:        ${CPPFLAGS}\n   LDFLAGS:         ${LDFLAGS}\n     curl-config:   ${LIBCURL_PC_LDFLAGS_PRIVATE}\n   LIBS:            ${LIBS}\n\n  curl version:     ${CURLVERSION}\n  SSL:              ${curl_ssl_msg}\n  SSH:              ${curl_ssh_msg}\n  zlib:             ${curl_zlib_msg}\n  brotli:           ${curl_brotli_msg}\n  zstd:             ${curl_zstd_msg}\n  GSS-API:          ${curl_gss_msg}\n  GSASL:            ${curl_gsasl_msg}\n  TLS-SRP:          ${curl_tls_srp_msg}\n  resolver:         ${curl_res_msg}\n  IPv6:             ${curl_ipv6_msg}\n  Unix sockets:     ${curl_unix_sockets_msg}\n  IDN:              ${curl_idn_msg}\n  Build docs:       ${curl_docs_msg}\n  Build libcurl:    Shared=${enable_shared}, Static=${enable_static}\n  Built-in manual:  ${curl_manual_msg}\n  --libcurl option: ${curl_libcurl_msg}\n  Verbose errors:   ${curl_verbose_msg}\n  Code coverage:    ${curl_coverage_msg}\n  SSPI:             ${curl_sspi_msg}\n  ca cert bundle:   ${ca}${ca_warning}\n  ca cert path:     ${capath}${capath_warning}\n  ca cert embed:    ${CURL_CA_EMBED_msg}\n  ca fallback:      ${with_ca_fallback}\n  LDAP:             ${curl_ldap_msg}\n  LDAPS:            ${curl_ldaps_msg}\n  IPFS/IPNS:        ${curl_ipfs_msg}\n  RTSP:             ${curl_rtsp_msg}\n  RTMP:             ${curl_rtmp_msg}\n  PSL:              ${curl_psl_msg}\n  Alt-svc:          ${curl_altsvc_msg}\n  Headers API:      ${curl_headers_msg}\n  HSTS:             ${curl_hsts_msg}\n  HTTP1:            ${curl_h1_msg}\n  HTTP2:            ${curl_h2_msg}\n  HTTP3:            ${curl_h3_msg}\n  ECH:              ${curl_ech_msg}\n  SSLS-EXPORT:      ${curl_ssls_export_msg}\n  Protocols:        ${SUPPORT_PROTOCOLS_LOWER}\n  Features:         ${SUPPORT_FEATURES}\n])\n\n# grep -o would simplify this, but is nonportable\n[non13=`echo \"$TLSCHOICE\" | $AWK '{split(\"bearssl secure-transport\", a); for (i in a) if(match(tolower($0), a[i])) print a[i];}'`]\nif test -n \"$non13\"; then\n  for a in $non13; do\n    AC_MSG_WARN([$a is enabled for TLS but it does not support TLS 1.3])\n  done\nfi\n\nif test -n \"$experimental\"; then\n  for a in $experimental; do\n    AC_MSG_WARN([$a is enabled but marked EXPERIMENTAL. Use with caution!])\n  done\nfi\n\nCURL_PREPARE_BUILDINFO\necho \"[@%:@] This is a generated file.  Do not edit.${curl_buildinfo}\" > ./buildinfo.txt\nif test -n \"$CURL_BUILDINFO$CURL_CI$CI\"; then\n  AC_MSG_NOTICE([${curl_buildinfo}])\nfi\n"
        },
        {
          "name": "curl-config.in",
          "type": "blob",
          "size": 4.67,
          "content": "#!/bin/sh\n#***************************************************************************\n#                                  _   _ ____  _\n#  Project                     ___| | | |  _ \\| |\n#                             / __| | | | |_) | |\n#                            | (__| |_| |  _ <| |___\n#                             \\___|\\___/|_| \\_\\_____|\n#\n# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n#\n# This software is licensed as described in the file COPYING, which\n# you should have received as part of this distribution. The terms\n# are also available at https://curl.se/docs/copyright.html.\n#\n# You may opt to use, copy, modify, merge, publish, distribute and/or sell\n# copies of the Software, and permit persons to whom the Software is\n# furnished to do so, under the terms of the COPYING file.\n#\n# This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\n# KIND, either express or implied.\n#\n# SPDX-License-Identifier: curl\n#\n###########################################################################\n\n# shellcheck disable=SC2006\n\nprefix='@prefix@'\n# Used in 'libdir'\n# shellcheck disable=SC2034\nexec_prefix=\"@exec_prefix@\"\n# shellcheck disable=SC2034\nincludedir=\"@includedir@\"\n\nusage()\n{\n  cat <<EOF\nUsage: curl-config [OPTION]\n\nAvailable values for OPTION include:\n\n  --built-shared says 'yes' if libcurl was built shared\n  --ca                  CA bundle install path\n  --cc                  compiler\n  --cflags              preprocessor and compiler flags\n  --checkfor [version]  check for (lib)curl of the specified version\n  --configure           the arguments given to configure when building curl\n  --features            newline separated list of enabled features\n  --help                display this help and exit\n  --libs                library linking information\n  --prefix              curl install prefix\n  --protocols           newline separated list of enabled protocols\n  --ssl-backends        output the SSL backends libcurl was built to support\n  --static-libs         static libcurl library linking information\n  --version             output version information\n  --vernum              output version as a hexadecimal number\nEOF\n\n  exit \"$1\"\n}\n\nif test \"$#\" -eq 0; then\n  usage 1\nfi\n\nwhile test \"$#\" -gt 0; do\n  case \"$1\" in\n  --built-shared)\n    echo '@ENABLE_SHARED@'\n    ;;\n\n  --ca)\n    echo '@CURL_CA_BUNDLE@'\n    ;;\n\n  --cc)\n    echo '@CC@'\n    ;;\n\n  --prefix)\n    echo \"$prefix\"\n    ;;\n\n  --feature|--features)\n    for feature in @SUPPORT_FEATURES@ ''; do\n      test -n \"$feature\" && echo \"$feature\"\n    done\n    ;;\n\n  --protocols)\n    # shellcheck disable=SC2043\n    for protocol in @SUPPORT_PROTOCOLS@; do\n      echo \"$protocol\"\n    done\n    ;;\n\n  --version)\n    echo 'libcurl @CURLVERSION@'\n    exit 0\n    ;;\n\n  --checkfor)\n    checkfor=\"$2\"\n    cmajor=`echo \"$checkfor\" | cut -d. -f1`\n    cminor=`echo \"$checkfor\" | cut -d. -f2`\n    # when extracting the patch part we strip off everything after a\n    # dash as that's used for things like version 1.2.3-pre1\n    cpatch=`echo \"$checkfor\" | cut -d. -f3 | cut -d- -f1`\n\n    vmajor=`echo '@CURLVERSION@' | cut -d. -f1`\n    vminor=`echo '@CURLVERSION@' | cut -d. -f2`\n    # when extracting the patch part we strip off everything after a\n    # dash as that's used for things like version 1.2.3-pre1\n    vpatch=`echo '@CURLVERSION@' | cut -d. -f3 | cut -d- -f1`\n\n    if test \"$vmajor\" -gt \"$cmajor\"; then\n      exit 0\n    fi\n    if test \"$vmajor\" -eq \"$cmajor\"; then\n      if test \"$vminor\" -gt \"$cminor\"; then\n        exit 0\n      fi\n      if test \"$vminor\" -eq \"$cminor\"; then\n        if test \"$cpatch\" -le \"$vpatch\"; then\n          exit 0\n        fi\n      fi\n    fi\n\n    echo \"requested version $checkfor is newer than existing @CURLVERSION@\"\n    exit 1\n    ;;\n\n  --vernum)\n    echo '@VERSIONNUM@'\n    exit 0\n    ;;\n\n  --help)\n    usage 0\n    ;;\n\n  --cflags)\n    if test \"X@includedir@\" = 'X/usr/include'; then\n      echo '@LIBCURL_PC_CFLAGS@'\n    else\n      echo \"@LIBCURL_PC_CFLAGS@ -I@includedir@\"\n    fi\n    ;;\n\n  --libs)\n    if test \"X@libdir@\" != 'X/usr/lib' -a \"X@libdir@\" != 'X/usr/lib64'; then\n      curllibdir=\"-L@libdir@ \"\n    else\n      curllibdir=''\n    fi\n    if test 'X@ENABLE_SHARED@' = 'Xno'; then\n      echo \"${curllibdir}-lcurl @LIBCURL_PC_LIBS_PRIVATE@\"\n    else\n      echo \"${curllibdir}-lcurl\"\n    fi\n    ;;\n\n  --ssl-backends)\n    echo '@SSL_BACKENDS@'\n    ;;\n\n  --static-libs)\n    if test 'X@ENABLE_STATIC@' != 'Xno'; then\n      echo \"@libdir@/libcurl.@libext@ @LIBCURL_PC_LDFLAGS_PRIVATE@ @LIBCURL_PC_LIBS_PRIVATE@\"\n    else\n      echo 'curl was built with static libraries disabled' >&2\n      exit 1\n    fi\n    ;;\n\n  --configure)\n    echo @CONFIGURE_OPTIONS@\n    ;;\n\n  *)\n    echo \"unknown option: $1\"\n    usage 1\n    ;;\n  esac\n  shift\ndone\n\nexit 0\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libcurl.pc.in",
          "type": "blob",
          "size": 1.55,
          "content": "#***************************************************************************\n#                                  _   _ ____  _\n#  Project                     ___| | | |  _ \\| |\n#                             / __| | | | |_) | |\n#                            | (__| |_| |  _ <| |___\n#                             \\___|\\___/|_| \\_\\_____|\n#\n# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.\n#\n# This software is licensed as described in the file COPYING, which\n# you should have received as part of this distribution. The terms\n# are also available at https://curl.se/docs/copyright.html.\n#\n# You may opt to use, copy, modify, merge, publish, distribute and/or sell\n# copies of the Software, and permit persons to whom the Software is\n# furnished to do so, under the terms of the COPYING file.\n#\n# This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\n# KIND, either express or implied.\n#\n# SPDX-License-Identifier: curl\n#\n###########################################################################\n\nprefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\nsupported_protocols=\"@SUPPORT_PROTOCOLS@\"\nsupported_features=\"@SUPPORT_FEATURES@\"\n\nName: libcurl\nURL: https://curl.se/\nDescription: Library to transfer files with HTTP, FTP, etc.\nVersion: @CURLVERSION@\nRequires: @LIBCURL_PC_REQUIRES@\nRequires.private: @LIBCURL_PC_REQUIRES_PRIVATE@\nLibs: -L${libdir} -lcurl @LIBCURL_PC_LIBS@\nLibs.private: @LIBCURL_PC_LDFLAGS_PRIVATE@ @LIBCURL_PC_LIBS_PRIVATE@\nCflags: -I${includedir} @LIBCURL_PC_CFLAGS@\nCflags.private: @LIBCURL_PC_CFLAGS_PRIVATE@\n"
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "plan9",
          "type": "tree",
          "content": null
        },
        {
          "name": "projects",
          "type": "tree",
          "content": null
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 2.78,
          "content": "{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"config:best-practices\",\n    \":disableDependencyDashboard\"\n  ],\n  \"semanticCommitType\": \"ci\",\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\n        \"github-actions\"\n      ],\n      \"commitMessagePrefix\": \"gha: \",\n      \"labels\": [\n        \"CI\"\n      ]\n    },\n    {\n      \"matchUpdateTypes\": [\n        \"pin\",\n        \"pinDigest\",\n        \"digest\"\n      ],\n      \"commitMessagePrefix\": \"ci: \",\n      \"labels\": [\n        \"CI\"\n      ]\n    },\n    {\n      \"matchManagers\": [\n        \"custom.regex\"\n      ],\n      \"commitMessagePrefix\": \"ci: \",\n      \"labels\": [\n        \"CI\"\n      ]\n    },\n    {\n      \"matchDepNames\": [\n        \"debian\"\n      ],\n      \"matchFileNames\": [\n        \".github/workflows/linux-old.yml\"\n      ],\n      \"enabled\": false\n    }\n  ],\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\n        \".circleci/config.yml\"\n      ],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( extractVersion=(?<extractVersion>.+?))?( registryUrl=(?<registryUrl>.*?))?\\\\s.*?_VER=(?<currentValue>.*)\\\\s\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\",\n      \"extractVersionTemplate\": \"{{#if extractVersion}}{{{extractVersion}}}{{else}}^v?(?<version>.+)${{/if}}\"\n    },\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\n        \"^.github/workflows/.*\\\\.yml$\"\n      ],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( extractVersion=(?<extractVersion>.+?))?( registryUrl=(?<registryUrl>.*?))?\\\\s.*?-version:\\\\s*(?<currentValue>.*)\\\\s\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\",\n      \"extractVersionTemplate\": \"{{#if extractVersion}}{{{extractVersion}}}{{else}}^v?(?<version>.+)${{/if}}\"\n    },\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\n        \"^.github/workflows/linux.yml$\",\n        \"^.github/workflows/http3-linux.yml$\"\n      ],\n      \"matchStrings\": [\n        \"openssl-version: (?<currentValue>.*)\\\\s\"\n      ],\n      \"datasourceTemplate\": \"github-tags\",\n      \"depNameTemplate\": \"openssl/openssl\",\n      \"versioningTemplate\": \"semver\",\n      \"extractVersionTemplate\": \"^openssl-(?<version>.*)$\"\n    },\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\n        \"^.github/workflows/linux.yml$\",\n        \"^.github/workflows/http3-linux.yml$\"\n      ],\n      \"matchStrings\": [\n        \"quictls-version: (?<currentValue>.*)\\\\s\"\n      ],\n      \"datasourceTemplate\": \"github-tags\",\n      \"depNameTemplate\": \"quictls/openssl\",\n      \"versioningTemplate\": \"semver\",\n      \"extractVersionTemplate\": \"^openssl-(?<version>.*)-quic1$\"\n    }\n  ]\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "winbuild",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}