{
  "metadata": {
    "timestamp": 1736557248669,
    "page": 104,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "oven-sh/bun",
      "stars": 75229,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".buildkite",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.27,
          "content": "WarningsAsErrors: \"*\"\nFormatStyle: webkit\nChecks: >\n  -*,\n  clang-analyzer-*,\n  -clang-analyzer-optin.core.EnumCastOutOfRange\n  -clang-analyzer-webkit.UncountedLambdaCapturesChecker\n  -clang-analyzer-optin.core.EnumCastOutOfRange\n  -clang-analyzer-webkit.RefCntblBaseVirtualDtor\n"
        },
        {
          "name": ".clangd",
          "type": "blob",
          "size": 0.16,
          "content": "Index:\n  Background: Skip # Disable slow background indexing of these files.\n\nCompileFlags:\n  CompilationDatabase: build/debug\n\nDiagnostics:\n  UnusedIncludes: None\n"
        },
        {
          "name": ".cursorignore",
          "type": "blob",
          "size": 0.15,
          "content": "# Add directories or file patterns to ignore during indexing (e.g. foo/ or *.csv)\nbench\nvendor\n*-fixture.{js,ts}\nzig-cache\npackages/bun-uws/fuzzing\nbuild"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.25,
          "content": "**/*.a\n**/*.o\n**/.next\n**/CMakeCache.txt\n**/node_modules\n.git\nexamples\nnode_modules\npackages/**/bun\npackages/**/bun-profile\nsrc/bun.js/WebKit\nsrc/bun.js/WebKit/LayoutTests\nzig-build\n.zig-cache\nzig-out\nbuild\nvendor\nnode_modules\n*.trace\n\npackages/bun-uws/fuzzing"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.13,
          "content": "# https://EditorConfig.org\nroot = true\n\n[*]\ncharset = utf-8\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nend_of_line = lf\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.96,
          "content": "*.css text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.js text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.jsx text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.tsx text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.ts text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.c text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.cpp text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.cc text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.yml text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.toml text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.zig text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.rs text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.h text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.json text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.lock text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.map text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.md text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.mjs text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n*.mts text eol=lf whitespace=blank-at-eol,-blank-at-eof,-space-before-tab,tab-in-indent,tabwidth=2\n\n*.lockb binary diff=lockb\n\n.vscode/launch.json linguist-generated\nsrc/api/schema.d.ts linguist-generated\nfixture.*.c linguist-generated\nsrc/api/schema.js linguist-generated\n*-fixture* linguist-generated\nsrc/bun.js/bindings/ZigGeneratedCode.h linguist-generated\nsrc/bun.js/bindings/ZigGeneratedCode.cpp linguist-generated\nsrc/bun.js/bindings/headers.h linguist-generated\nsrc/bun.js/bindings/headers.zig linguist-generated\n\npackages/bun-uws/fuzzing/seed-corpus/**/* linguist-generated\n\nsrc/bun.js/bindings/sqlite/sqlite3.c linguist-vendored\nsrc/bun.js/bindings/sqlite/sqlite3_local.h linguist-vendored\nsrc/bun.js/bindings/simdutf.cpp linguist-vendored\nsrc/bun.js/bindings/simdutf.h linguist-vendored\n\ndocs/**/* linguist-documentation\n\n# Don't count tests in the language stats - https://github.com/github-linguist/linguist/blob/master/docs/overrides.md\ntest/**/* linguist-documentation\nbench/**/* linguist-documentation\nexamples/**/* linguist-documentation\n\nvendor/*.c linguist-vendored\nvendor/brotli/** linguist-vendored\n\ntest/js/node/test/fixtures linguist-vendored\ntest/js/node/test/common linguist-vendored\n\ntest/js/bun/css/files linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.77,
          "content": ".DS_Store\n.env\n.envrc\n.eslintcache\n.idea\n.next\n.ninja_deps\n.ninja_log\n.npm\n.npm.gz\n.parcel-cache\n.swcrc\n.trace\n.uuid\n.vs\n.vscode/clang*\n.vscode/cpp*\n.zig-cache\n*.a\n*.bc\n*.big\n*.blob\n*.bun\n*.crash\n*.database\n*.db\n*.dmg\n*.dSYM\n*.generated.ts\n*.jsb\n*.lib\n*.log\n*.o\n*.out.js\n*.out.refresh.js\n*.pdb\n*.sqlite\n*.tmp\n*.trace\n*.wat\n*.zip\n**/.verdaccio-db.json\n**/*.dir\n**/*.pdb\n**/*.sln*\n**/*.vcxproj*\n**/package-lock.json\n/.cache\n/.webkit-cache\n/build-*/\n/bun-webkit\n/kcov-out\n/test-report.json\n/test-report.md\n/test.js\n/test.ts\n/test.zig\n/testdir\nbuild\nbuild.ninja\nbun-binary\nbun-mimalloc\nbun-nomimalloc\nbun-singlehtreaded\nbun-test-scratch\nbun-zigld\ncmake_install.cmake\nCMakeCache.txt\nCMakeFiles\ncold-jsc-start\ncold-jsc-start.d\ncompile_commands.json\ncover\ncoverage\ncoverv\ndist\nesbuilddir\nexamples/lotta-modules/bun-nofscache\nexamples/lotta-modules/bun-old\nexamples/lotta-modules/bun-yday\nfailing-tests.txt\ngithub\nmake-dev-stats.csv\nmisctools/fetch\nmisctools/machbench\nmisctools/sha\nmyscript.sh\nnode_modules\nnode_modules_*\nout\nout.*\noutcss\noutdir\noutdir/\npackages/*/*.wasm\npackages/bun-*/*.o\npackages/bun-*/bun\npackages/bun-*/bun-profile\npackages/bun-*/debug-bun\npackages/bun-cli/bin/*\npackages/bun-cli/postinstall.js\npackages/bun-wasm/*.cjs\npackages/bun-wasm/*.d.cts\npackages/bun-wasm/*.d.mts\npackages/bun-wasm/*.d.ts\npackages/bun-wasm/*.js\npackages/bun-wasm/*.map\npackages/bun-wasm/*.mjs\npackages/debug-*\nparceldist\npnpm-lock.yaml\nprofile.json\nREADME.md.template\nrelease/\nscripts/env.local\nsign.*.json\nsign.json\nsrc/bake/generated.ts\nsrc/generated_enum_extractor.zig\nsrc/bun.js/bindings-obj\nsrc/bun.js/bindings/GeneratedJS2Native.zig\nsrc/bun.js/bindings/GeneratedBindings.zig\nsrc/bun.js/debug-bindings-obj\nsrc/deps/zig-clap/.gitattributes\nsrc/deps/zig-clap/.github\nsrc/deps/zig-clap/example\nsrc/deps/zig-clap/README.md\nsrc/fallback.version\nsrc/js/out/DebugPath.h\nsrc/js/out/functions*\nsrc/js/out/modules*\nsrc/js/out/tmp\nsrc/node-fallbacks/node_modules\nsrc/node-fallbacks/out/*\nsrc/runtime.version\nsrc/tests.zig\ntest.txt\ntest/js/bun/glob/fixtures\ntest/node.js/upstream\ntsconfig.tsbuildinfo\ntxt.js\nx64\nyarn.lock\nzig-cache\nzig-out\ntest/node.js/upstream\n.zig-cache\nscripts/env.local\n*.generated.ts\nsrc/bake/generated.ts\ntest/cli/install/registry/packages/publish-pkg-*\ntest/cli/install/registry/packages/@secret/publish-pkg-8\ntest/js/third_party/prisma/prisma/sqlite/dev.db-journal\n\n# Dependencies\n/vendor\n\n# Dependencies (before CMake)\n# These can be removed in the far future\n/src/bun.js/WebKit\n/src/deps/boringssl\n/src/deps/brotli\n/src/deps/c*ares\n/src/deps/libarchive\n/src/deps/libdeflate\n/src/deps/libuv\n/src/deps/lol*html\n/src/deps/ls*hpack\n/src/deps/mimalloc\n/src/deps/picohttpparser\n/src/deps/tinycc\n/src/deps/WebKit\n/src/deps/zig\n/src/deps/zlib\n/src/deps/zstd\n\n# Generated files\n\n.buildkite/ci.yml\n*.sock\nscratch*.{js,ts,tsx,cjs,mjs}"
        },
        {
          "name": ".lldbinit",
          "type": "blob",
          "size": 0.25,
          "content": "# command script import vendor/zig/tools/lldb_pretty_printers.py\ncommand script import vendor/WebKit/Tools/lldb/lldb_webkit.py\n\n# type summary add --summary-string \"${var} | inner=${var[0-30]}, source=${var[33-64]}, tag=${var[31-32]}\" \"unsigned long\"\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.14,
          "content": "# To learn more about git's mailmap: https://ntietz.com/blog/git-mailmap-for-name-changes\nchloe caruso <git@paperclover.net> <me@paperdave.net>\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.13,
          "content": "src/bun.js/WebKit\nvendor\ntest/snapshots\ntest/js/deno\ntest/node.js\nsrc/react-refresh.js\n*.min.js\ntest/snippets\ntest/js/node/test\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.42,
          "content": "{\n  \"arrowParens\": \"avoid\",\n  \"printWidth\": 120,\n  \"trailingComma\": \"all\",\n  \"useTabs\": false,\n  \"quoteProps\": \"preserve\",\n  \"overrides\": [\n    {\n      \"files\": [\".vscode/*.json\"],\n      \"options\": {\n        \"parser\": \"jsonc\",\n        \"quoteProps\": \"preserve\",\n        \"singleQuote\": false,\n        \"trailingComma\": \"all\"\n      }\n    },\n    {\n      \"files\": [\"*.md\"],\n      \"options\": {\n        \"printWidth\": 80\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": ".typos.toml",
          "type": "blob",
          "size": 0.04,
          "content": "[type.md]\nextend-ignore-words-re = [\"^ba\"]\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.94,
          "content": "cmake_minimum_required(VERSION 3.24)\nmessage(STATUS \"Configuring Bun\")\n\nlist(APPEND CMAKE_MODULE_PATH\n  ${CMAKE_SOURCE_DIR}/cmake\n  ${CMAKE_SOURCE_DIR}/cmake/targets\n  ${CMAKE_SOURCE_DIR}/cmake/tools\n  ${CMAKE_SOURCE_DIR}/cmake/analysis\n  ${CMAKE_SOURCE_DIR}/cmake/scripts\n)\n\ninclude(Policies)\ninclude(Globals)\n\n# --- Compilers ---\n\nif(CMAKE_HOST_APPLE)\n  include(SetupMacSDK)\nendif()\ninclude(SetupLLVM)\ninclude(SetupCcache)\n\n# --- Project ---\n\nparse_package_json(VERSION_VARIABLE DEFAULT_VERSION)\noptionx(VERSION STRING \"The version of Bun\" DEFAULT ${DEFAULT_VERSION})\nproject(Bun VERSION ${VERSION})\ninclude(Options)\ninclude(CompilerFlags)\n\n# --- Tools ---\n\ninclude(SetupGit)\ninclude(SetupBuildkite)\ninclude(SetupBun)\ninclude(SetupEsbuild)\ninclude(SetupZig)\ninclude(SetupRust)\n\n# --- Targets ---\n\ninclude(BuildBun)\n\n# --- Analysis ---\n\nif(ENABLE_ANALYSIS)\n  include(RunClangFormat)\n  include(RunClangTidy)\n  include(RunZigFormat)\n  include(RunPrettier)\nendif()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.87,
          "content": "## Code of conduct\n\n- We are committed to providing a friendly, safe and welcoming environment for all, regardless of level of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other similar characteristic.\n- Please avoid using overtly sexual aliases or other nicknames that might detract from a friendly, safe and welcoming environment for all.\n- Please be kind and courteous. There’s no need to be mean or rude.\n- Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n- Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n- We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior. We interpret the term “harassment” as including the definition in the [Citizen Code of Conduct](https://github.com/stumpsyn/policies/blob/master/citizen_code_of_conduct.md); if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don’t tolerate behavior that excludes people in socially marginalized groups.\n- Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact one of the channel ops or an employee of Oven immediately. Whether you’re a regular contributor or a newcomer, we care about making this community a safe place for you and we’ve got your back.\n- Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.\n\nThis code of conduct is adapted from the [Rust Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 11.55,
          "content": "Configuring a development environment for Bun can take 10-30 minutes depending on your internet connection and computer speed. You will need ~10GB of free disk space for the repository and build artifacts.\n\nIf you are using Windows, please refer to [this guide](https://bun.sh/docs/project/building-windows)\n\n## Install Dependencies\n\nUsing your system's package manager, install Bun's dependencies:\n\n{% codetabs group=\"os\" %}\n\n```bash#macOS (Homebrew)\n$ brew install automake ccache cmake coreutils gnu-sed go icu4c libiconv libtool ninja pkg-config rust ruby\n```\n\n```bash#Ubuntu/Debian\n$ sudo apt install curl wget lsb-release software-properties-common cargo ccache cmake git golang libtool ninja-build pkg-config rustc ruby-full xz-utils\n```\n\n```bash#Arch\n$ sudo pacman -S base-devel ccache cmake git go libiconv libtool make ninja pkg-config python rust sed unzip ruby\n```\n\n```bash#Fedora\n$ sudo dnf install cargo ccache cmake git golang libtool ninja-build pkg-config rustc ruby libatomic-static libstdc++-static sed unzip which libicu-devel 'perl(Math::BigInt)'\n```\n\n```bash#openSUSE Tumbleweed\n$ sudo zypper install go cmake ninja automake git icu rustup && rustup toolchain install stable\n```\n\n{% /codetabs %}\n\n> **Note**: The Zig compiler is automatically installed and updated by the build scripts. Manual installation is not required.\n\nBefore starting, you will need to already have a release build of Bun installed, as we use our bundler to transpile and minify our code, as well as for code generation scripts.\n\n{% codetabs %}\n\n```bash#Native\n$ curl -fsSL https://bun.sh/install | bash\n```\n\n```bash#npm\n$ npm install -g bun\n```\n\n```bash#Homebrew\n$ brew tap oven-sh/bun\n$ brew install bun\n```\n\n{% /codetabs %}\n\n## Install LLVM\n\nBun requires LLVM 18 (`clang` is part of LLVM). This version requirement is to match WebKit (precompiled), as mismatching versions will cause memory allocation failures at runtime. In most cases, you can install LLVM through your system package manager:\n\n{% codetabs group=\"os\" %}\n\n```bash#macOS (Homebrew)\n$ brew install llvm@18\n```\n\n```bash#Ubuntu/Debian\n$ # LLVM has an automatic installation script that is compatible with all versions of Ubuntu\n$ wget https://apt.llvm.org/llvm.sh -O - | sudo bash -s -- 18 all\n```\n\n```bash#Arch\n$ sudo pacman -S llvm clang lld\n```\n\n```bash#Fedora\n$ sudo dnf install llvm18 clang18 lld18-devel\n```\n\n```bash#openSUSE Tumbleweed\n$ sudo zypper install clang18 lld18 llvm18\n```\n\n{% /codetabs %}\n\nIf none of the above solutions apply, you will have to install it [manually](https://github.com/llvm/llvm-project/releases/tag/llvmorg-18.1.8).\n\nMake sure Clang/LLVM 18 is in your path:\n\n```bash\n$ which clang-18\n```\n\nIf not, run this to manually add it:\n\n{% codetabs group=\"os\" %}\n\n```bash#macOS (Homebrew)\n# use fish_add_path if you're using fish\n# use path+=\"$(brew --prefix llvm@18)/bin\" if you are using zsh\n$ export PATH=\"$(brew --prefix llvm@18)/bin:$PATH\"\n```\n\n```bash#Arch\n# use fish_add_path if you're using fish\n$ export PATH=\"$PATH:/usr/lib/llvm18/bin\"\n```\n\n{% /codetabs %}\n\n> ⚠️ Ubuntu distributions (<= 20.04) may require installation of the C++ standard library independently. See the [troubleshooting section](#span-file-not-found-on-ubuntu) for more information.\n\n## Building Bun\n\nAfter cloning the repository, run the following command to build. This may take a while as it will clone submodules and build dependencies.\n\n```bash\n$ bun run build\n```\n\nThe binary will be located at `./build/debug/bun-debug`. It is recommended to add this to your `$PATH`. To verify the build worked, let's print the version number on the development build of Bun.\n\n```bash\n$ build/debug/bun-debug --version\nx.y.z_debug\n```\n\n## VSCode\n\nVSCode is the recommended IDE for working on Bun, as it has been configured. Once opening, you can run `Extensions: Show Recommended Extensions` to install the recommended extensions for Zig and C++. ZLS is automatically configured.\n\nIf you use a different editor, make sure that you tell ZLS to use the automatically installed Zig compiler, which is located at `./vendor/zig/zig.exe`. The filename is `zig.exe` so that it works as expected on Windows, but it still works on macOS/Linux (it just has a surprising file extension).\n\nWe recommend adding `./build/debug` to your `$PATH` so that you can run `bun-debug` in your terminal:\n\n```sh\n$ bun-debug\n```\n\n## Code generation scripts\n\nSeveral code generation scripts are used during Bun's build process. These are run automatically when changes are made to certain files.\n\nIn particular, these are:\n\n- `./src/codegen/generate-jssink.ts` -- Generates `build/debug/codegen/JSSink.cpp`, `build/debug/codegen/JSSink.h` which implement various classes for interfacing with `ReadableStream`. This is internally how `FileSink`, `ArrayBufferSink`, `\"type\": \"direct\"` streams and other code related to streams works.\n- `./src/codegen/generate-classes.ts` -- Generates `build/debug/codegen/ZigGeneratedClasses*`, which generates Zig & C++ bindings for JavaScriptCore classes implemented in Zig. In `**/*.classes.ts` files, we define the interfaces for various classes, methods, prototypes, getters/setters etc which the code generator reads to generate boilerplate code implementing the JavaScript objects in C++ and wiring them up to Zig\n- `./src/codegen/bundle-modules.ts` -- Bundles built-in modules like `node:fs`, `bun:ffi` into files we can include in the final binary. In development, these can be reloaded without rebuilding Zig (you still need to run `bun run build`, but it re-reads the transpiled files from disk afterwards). In release builds, these are embedded into the binary.\n- `./src/codegen/bundle-functions.ts` -- Bundles globally-accessible functions implemented in JavaScript/TypeScript like `ReadableStream`, `WritableStream`, and a handful more. These are used similarly to the builtin modules, but the output more closely aligns with what WebKit/Safari does for Safari's built-in functions so that we can copy-paste the implementations from WebKit as a starting point.\n\n## Modifying ESM modules\n\nCertain modules like `node:fs`, `node:stream`, `bun:sqlite`, and `ws` are implemented in JavaScript. These live in `src/js/{node,bun,thirdparty}` files and are pre-bundled using Bun.\n\n## Release build\n\nTo compile a release build of Bun, run:\n\n```bash\n$ bun run build:release\n```\n\nThe binary will be located at `./build/release/bun` and `./build/release/bun-profile`.\n\n### Download release build from pull requests\n\nTo save you time spent building a release build locally, we provide a way to run release builds from pull requests. This is useful for manually testing changes in a release build before they are merged.\n\nTo run a release build from a pull request, you can use the `bun-pr` npm package:\n\n```sh\nbunx bun-pr <pr-number>\nbunx bun-pr <branch-name>\nbunx bun-pr \"https://github.com/oven-sh/bun/pull/1234566\"\n```\n\nThis will download the release build from the pull request and add it to `$PATH` as `bun-${pr-number}`. You can then run the build with `bun-${pr-number}`.\n\n```sh\nbun-1234566 --version\n```\n\nThis works by downloading the release build from the GitHub Actions artifacts on the linked pull request. You may need the `gh` CLI installed to authenticate with GitHub.\n\n## Valgrind\n\nOn Linux, valgrind can help find memory issues.\n\nKeep in mind:\n\n- JavaScriptCore doesn't support valgrind. It will report spurious errors.\n- Valgrind is slow\n- Mimalloc will sometimes cause spurious errors when debug build is enabled\n\nYou'll need a very recent version of Valgrind due to DWARF 5 debug symbols. You may need to manually compile Valgrind instead of using it from your Linux package manager.\n\n`--fair-sched=try` is necessary if running multithreaded code in Bun (such as the bundler). Otherwise it will hang.\n\n```bash\n$ valgrind --fair-sched=try --track-origins=yes bun-debug <args>\n```\n\n## Building WebKit locally + Debug mode of JSC\n\nWebKit is not cloned by default (to save time and disk space). To clone and build WebKit locally, run:\n\n```bash\n# Clone WebKit into ./vendor/WebKit\n$ git clone https://github.com/oven-sh/WebKit vendor/WebKit\n\n# Make a debug build of JSC. This will output build artifacts in ./vendor/WebKit/WebKitBuild/Debug\n# Optionally, you can use `make jsc` for a release build\n$ make jsc-debug && rm vendor/WebKit/WebKitBuild/Debug/JavaScriptCore/DerivedSources/inspector/InspectorProtocolObjects.h\n\n# Build bun with the local JSC build\n$ bun run build:local\n```\n\nNote that the WebKit folder, including build artifacts, is 8GB+ in size.\n\nIf you are using a JSC debug build and using VScode, make sure to run the `C/C++: Select a Configuration` command to configure intellisense to find the debug headers.\n\n## Troubleshooting\n\n### 'span' file not found on Ubuntu\n\n> ⚠️ Please note that the instructions below are specific to issues occurring on Ubuntu. It is unlikely that the same issues will occur on other Linux distributions.\n\nThe Clang compiler typically uses the `libstdc++` C++ standard library by default. `libstdc++` is the default C++ Standard Library implementation provided by the GNU Compiler Collection (GCC). While Clang may link against the `libc++` library, this requires explicitly providing the `-stdlib` flag when running Clang.\n\nBun relies on C++20 features like `std::span`, which are not available in GCC versions lower than 11. GCC 10 doesn't have all of the C++20 features implemented. As a result, running `make setup` may fail with the following error:\n\n```\nfatal error: 'span' file not found\n#include <span>\n         ^~~~~~\n```\n\nThe issue may manifest when initially running `bun setup` as Clang being unable to compile a simple program:\n\n```\nThe C++ compiler\n\n  \"/usr/bin/clang++-18\"\n\nis not able to compile a simple test program.\n```\n\nTo fix the error, we need to update the GCC version to 11. To do this, we'll need to check if the latest version is available in the distribution's official repositories or use a third-party repository that provides GCC 11 packages. Here are general steps:\n\n```bash\n$ sudo apt update\n$ sudo apt install gcc-11 g++-11\n# If the above command fails with `Unable to locate package gcc-11` we need\n# to add the APT repository\n$ sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test\n# Now run `apt install` again\n$ sudo apt install gcc-11 g++-11\n```\n\nNow, we need to set GCC 11 as the default compiler:\n\n```bash\n$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100\n$ sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100\n```\n\n### libarchive\n\nIf you see an error on macOS when compiling `libarchive`, run:\n\n```bash\n$ brew install pkg-config\n```\n\n### macOS `library not found for -lSystem`\n\nIf you see this error when compiling, run:\n\n```bash\n$ xcode-select --install\n```\n\n### Cannot find `libatomic.a`\n\nBun defaults to linking `libatomic` statically, as not all systems have it. If you are building on a distro that does not have a static libatomic available, you can run the following command to enable dynamic linking:\n\n```bash\n$ bun run build -DUSE_STATIC_LIBATOMIC=OFF\n```\n\nThe built version of Bun may not work on other systems if compiled this way.\n\n### ccache conflicts with building TinyCC on macOS\n\nIf you run into issues with `ccache` when building TinyCC, try reinstalling ccache\n\n```bash\nbrew uninstall ccache\nbrew install ccache\n```\n\n## Using bun-debug\n\n- Disable logging: `BUN_DEBUG_QUIET_LOGS=1 bun-debug ...` (to disable all debug logging)\n- Enable logging for a specific zig scope: `BUN_DEBUG_EventLoop=1 bun-debug ...` (to allow `std.log.scoped(.EventLoop)`)\n- Bun transpiles every file it runs, to see the actual executed source in a debug build find it in `/tmp/bun-debug-src/...path/to/file`, for example the transpiled version of `/home/bun/index.ts` would be in `/tmp/bun-debug-src/home/bun/index.ts`\n"
        },
        {
          "name": "LATEST",
          "type": "blob",
          "size": 0.01,
          "content": "1.1.43"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 4.34,
          "content": "Bun itself is MIT-licensed.\n\n## JavaScriptCore\n\nBun statically links JavaScriptCore (and WebKit) which is LGPL-2 licensed. WebCore files from WebKit are also licensed under LGPL2. Per LGPL2:\n\n> (1) If you statically link against an LGPL’d library, you must also provide your application in an object (not necessarily source) format, so that a user has the opportunity to modify the library and relink the application.\n\nYou can find the patched version of WebKit used by Bun here: <https://github.com/oven-sh/webkit>. If you would like to relink Bun with changes:\n\n- `git submodule update --init --recursive`\n- `make jsc`\n- `zig build`\n\nThis compiles JavaScriptCore, compiles Bun’s `.cpp` bindings for JavaScriptCore (which are the object files using JavaScriptCore) and outputs a new `bun` binary with your changes.\n\n## Linked libraries\n\nBun statically links these libraries:\n\n| Library | License |\n|---------|---------|\n| [`boringssl`](https://boringssl.googlesource.com/boringssl/) | [several licenses](https://boringssl.googlesource.com/boringssl/+/refs/heads/master/LICENSE) |\n| [`brotli`](https://github.com/google/brotli) | MIT |\n| [`libarchive`](https://github.com/libarchive/libarchive) | [several licenses](https://github.com/libarchive/libarchive/blob/master/COPYING) |\n| [`lol-html`](https://github.com/cloudflare/lol-html/tree/master/c-api) | BSD 3-Clause |\n| [`mimalloc`](https://github.com/microsoft/mimalloc) | MIT |\n| [`picohttp`](https://github.com/h2o/picohttpparser) | dual-licensed under the Perl License or the MIT License |\n| [`zstd`](https://github.com/facebook/zstd) | dual-licensed under the BSD License or GPLv2 license |\n| [`simdutf`](https://github.com/simdutf/simdutf) | Apache 2.0 |\n| [`tinycc`](https://github.com/tinycc/tinycc) | LGPL v2.1 |\n| [`uSockets`](https://github.com/uNetworking/uSockets) | Apache 2.0 |\n| [`zlib-cloudflare`](https://github.com/cloudflare/zlib) | zlib |\n| [`c-ares`](https://github.com/c-ares/c-ares) | MIT licensed |\n| [`libicu`](https://github.com/unicode-org/icu) 72 | [license here](https://github.com/unicode-org/icu/blob/main/icu4c/LICENSE) |\n| [`libbase64`](https://github.com/aklomp/base64/blob/master/LICENSE) | BSD 2-Clause |\n| [`libuv`](https://github.com/libuv/libuv) (on Windows) | MIT |\n| [`libdeflate`](https://github.com/ebiggers/libdeflate) | MIT |\n| A fork of [`uWebsockets`](https://github.com/jarred-sumner/uwebsockets) | Apache 2.0 licensed |\n| Parts of [Tigerbeetle's IO code](https://github.com/tigerbeetle/tigerbeetle/blob/532c8b70b9142c17e07737ab6d3da68d7500cbca/src/io/windows.zig#L1) | Apache 2.0 licensed |\n\n## Polyfills\n\nFor compatibility reasons, the following packages are embedded into Bun's binary and injected if imported.\n\n| Package | License |\n|---------|---------|\n| [`assert`](https://npmjs.com/package/assert) | MIT |\n| [`browserify-zlib`](https://npmjs.com/package/browserify-zlib) | MIT |\n| [`buffer`](https://npmjs.com/package/buffer) | MIT |\n| [`constants-browserify`](https://npmjs.com/package/constants-browserify) | MIT |\n| [`crypto-browserify`](https://npmjs.com/package/crypto-browserify) | MIT |\n| [`domain-browser`](https://npmjs.com/package/domain-browser) | MIT |\n| [`events`](https://npmjs.com/package/events) | MIT |\n| [`https-browserify`](https://npmjs.com/package/https-browserify) | MIT |\n| [`os-browserify`](https://npmjs.com/package/os-browserify) | MIT |\n| [`path-browserify`](https://npmjs.com/package/path-browserify) | MIT |\n| [`process`](https://npmjs.com/package/process) | MIT |\n| [`punycode`](https://npmjs.com/package/punycode) | MIT |\n| [`querystring-es3`](https://npmjs.com/package/querystring-es3) | MIT |\n| [`stream-browserify`](https://npmjs.com/package/stream-browserify) | MIT |\n| [`stream-http`](https://npmjs.com/package/stream-http) | MIT |\n| [`string_decoder`](https://npmjs.com/package/string_decoder) | MIT |\n| [`timers-browserify`](https://npmjs.com/package/timers-browserify) | MIT |\n| [`tty-browserify`](https://npmjs.com/package/tty-browserify) | MIT |\n| [`url`](https://npmjs.com/package/url) | MIT |\n| [`util`](https://npmjs.com/package/util) | MIT |\n| [`vm-browserify`](https://npmjs.com/package/vm-browserify) | MIT |\n\n## Additional credits\n\n- Bun's JS transpiler, CSS lexer, and Node.js module resolver source code is a Zig port of [@evanw](https://github.com/evanw)’s [esbuild](https://github.com/evanw/esbuild) project.\n- Credit to [@kipply](https://github.com/kipply) for the name \"Bun\"!"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 81.81,
          "content": "# ------------------------------------------------------------\n#                         WARNING\n# ------------------------------------------------------------\n# This file is very old and will be removed soon!\n# You can build Bun using `cmake` or `bun run build`\n# ------------------------------------------------------------\n\nSHELL := $(shell which bash) # Use bash syntax to be consistent\n\nOS_NAME := $(shell uname -s | tr '[:upper:]' '[:lower:]')\nARCH_NAME_RAW := $(shell uname -m)\nBUN_AUTO_UPDATER_REPO = Jarred-Sumner/bun-releases-for-updater\n\nCMAKE_CXX_COMPILER_LAUNCHER_FLAG :=\n\n# 'make' command will trigger the help target\n.DEFAULT_GOAL := help\n\n# On Linux ARM64, uname -m reports aarch64\nifeq ($(ARCH_NAME_RAW),aarch64)\nARCH_NAME_RAW = arm64\nendif\n\nCPU_TARGET ?= native\nMARCH_NATIVE = -mtune=$(CPU_TARGET)\nNATIVE_OR_OLD_MARCH =\n\nMMD_IF_LOCAL =\nDEFAULT_MIN_MACOS_VERSION=\nARCH_NAME :=\nDOCKER_BUILDARCH =\nifeq ($(ARCH_NAME_RAW),arm64)\nARCH_NAME = aarch64\nDOCKER_BUILDARCH = arm64\nBREW_PREFIX_PATH = /opt/homebrew\nDEFAULT_MIN_MACOS_VERSION = 13.0\nMARCH_NATIVE = -mtune=$(CPU_TARGET)\nifeq ($(OS_NAME),linux)\nMARCH_NATIVE = -march=armv8-a+crc -mtune=ampere1\nendif\nelse\nARCH_NAME = x64\nDOCKER_BUILDARCH = amd64\nBREW_PREFIX_PATH = /usr/local\nDEFAULT_MIN_MACOS_VERSION = 10.14\nMARCH_NATIVE = -march=$(CPU_TARGET) -mtune=$(CPU_TARGET)\nNATIVE_OR_OLD_MARCH = -march=nehalem\nendif\n\nMIN_MACOS_VERSION ?= $(DEFAULT_MIN_MACOS_VERSION)\nBUN_BASE_VERSION = 1.0\nCI ?= false\n\nAR=\n\nifeq ($(CI), false)\n\tMMD_IF_LOCAL = -MMD\nendif\n\nBUN_OR_NODE = $(shell which bun 2>/dev/null || which node 2>/dev/null)\n\n\n\nCXX_VERSION=c++2a\nTRIPLET = $(OS_NAME)-$(ARCH_NAME)\nPACKAGE_NAME = bun-$(TRIPLET)\nPACKAGES_REALPATH = $(realpath packages)\nPACKAGE_DIR = $(PACKAGES_REALPATH)/$(PACKAGE_NAME)\nDEBUG_PACKAGE_DIR = $(PACKAGES_REALPATH)/debug-$(PACKAGE_NAME)\nRELEASE_BUN = $(PACKAGE_DIR)/bun\nDEBUG_BIN = $(DEBUG_PACKAGE_DIR)\nDEBUG_BUN = $(DEBUG_BIN)/bun-debug\nBUILD_ID = $(shell cat ./src/build-id)\nPACKAGE_JSON_VERSION = $(BUN_BASE_VERSION).$(BUILD_ID)\nBUN_BUILD_TAG = bun-v$(PACKAGE_JSON_VERSION)\nBUN_RELEASE_BIN = $(PACKAGE_DIR)/bun\nPRETTIER ?= $(shell which prettier 2>/dev/null || echo \"./node_modules/.bin/prettier\")\nESBUILD = \"$(shell which esbuild 2>/dev/null || echo \"./node_modules/.bin/esbuild\")\"\nDSYMUTIL ?= $(shell which dsymutil 2>/dev/null || which dsymutil-15 2>/dev/null)\nWEBKIT_DIR ?= $(realpath vendor/WebKit)\nWEBKIT_RELEASE_DIR ?= $(WEBKIT_DIR)/WebKitBuild/Release\nWEBKIT_DEBUG_DIR ?= $(WEBKIT_DIR)/WebKitBuild/Debug\nWEBKIT_RELEASE_DIR_LTO ?= $(WEBKIT_DIR)/WebKitBuild/ReleaseLTO\n\n\nNPM_CLIENT = \"$(shell which bun 2>/dev/null || which npm 2>/dev/null)\"\nZIG ?= $(shell which zig 2>/dev/null || echo -e \"error: Missing zig. Please make sure zig is in PATH. Or set ZIG=/path/to-zig-executable\")\n\n# We must use the same compiler version for the JavaScriptCore bindings and JavaScriptCore\n# If we don't do this, strange memory allocation failures occur.\n# This is easier to happen than you'd expect.\n# Using realpath here causes issues because clang uses clang++ as a symlink\n# so if that's resolved, it won't build for C++\nREAL_CC = $(shell which clang-16 2>/dev/null || which clang 2>/dev/null)\nREAL_CXX = $(shell which clang++-16 2>/dev/null || which clang++ 2>/dev/null)\nCLANG_FORMAT = $(shell which clang-format-16 2>/dev/null || which clang-format 2>/dev/null)\n\nCC = $(REAL_CC)\nCXX = $(REAL_CXX)\nCCACHE_CC_OR_CC := $(REAL_CC)\n\nCCACHE_PATH := $(shell which ccache 2>/dev/null)\n\nCCACHE_CC_FLAG = CC=$(CCACHE_CC_OR_CC)\n\nifeq (,$(findstring,$(shell which ccache 2>/dev/null),ccache))\n\tCMAKE_CXX_COMPILER_LAUNCHER_FLAG := -DCMAKE_CXX_COMPILER_LAUNCHER=$(CCACHE_PATH) -DCMAKE_C_COMPILER_LAUNCHER=$(CCACHE_PATH)\n\tCCACHE_CC_OR_CC := \"$(CCACHE_PATH) $(REAL_CC)\"\n\texport CCACHE_COMPILERTYPE = clang\n\tCCACHE_CC_FLAG = CC=$(CCACHE_CC_OR_CC) CCACHE_COMPILER=$(REAL_CC)\n\tCCACHE_CXX_FLAG = CXX=$(CCACHE_PATH) CCACHE_COMPILER=$(REAL_CXX)\nendif\n\nCXX_WITH_CCACHE = $(CCACHE_PATH) $(CXX)\nCC_WITH_CCACHE = $(CCACHE_PATH) $(CC)\n\nifeq ($(OS_NAME),darwin)\n# Find LLVM\n\tifeq ($(wildcard $(LLVM_PREFIX)),)\n\t\tLLVM_PREFIX = $(shell brew --prefix llvm@16)\n\tendif\n\tifeq ($(wildcard $(LLVM_PREFIX)),)\n\t\tLLVM_PREFIX = $(shell brew --prefix llvm)\n\tendif\n\tifeq ($(wildcard $(LLVM_PREFIX)),)\n#   This is kinda ugly, but I can't find a better way to error :(\n\t\tLLVM_PREFIX = $(shell echo -e \"error: Unable to find llvm. Please run 'brew install llvm@16' or set LLVM_PREFIX=/path/to/llvm\")\n\tendif\n\n\tLDFLAGS += -L$(LLVM_PREFIX)/lib\n\tCPPFLAGS += -I$(LLVM_PREFIX)/include\n\tCC = $(LLVM_PREFIX)/bin/clang\n\tCXX = $(LLVM_PREFIX)/bin/clang++\n\tCODESIGN_IDENTITY ?= $(shell security find-identity -v -p codesigning | awk '/Apple Development/ { print $$2 }')\nendif\n\n# macOS sed is different\nSED = $(shell which gsed 2>/dev/null || which sed 2>/dev/null)\n\nBUN_DIR ?= $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))\nBUN_DEPS_DIR ?= $(shell pwd)/vendor\nBUN_DEPS_OUT_DIR ?= $(shell pwd)/build/release\nCPU_COUNT = 2\nifeq ($(OS_NAME),darwin)\nCPU_COUNT = $(shell sysctl -n hw.logicalcpu)\nendif\n\nifeq ($(OS_NAME),linux)\nCPU_COUNT = $(shell nproc)\nendif\n\nCPUS ?= $(CPU_COUNT)\nUSER ?= $(echo $USER)\n\nBUN_RELEASE_DIR ?= $(shell pwd)/../bun-release\n\nOPENSSL_VERSION = OpenSSL_1_1_1l\nLIBICONV_PATH ?= $(BREW_PREFIX_PATH)/opt/libiconv/lib/libiconv.a\n\nOPENSSL_LINUX_DIR = $(BUN_DEPS_DIR)/openssl/openssl-OpenSSL_1_1_1l\n\nCMAKE_FLAGS_WITHOUT_RELEASE = -DCMAKE_C_COMPILER=$(CC) \\\n\t-DCMAKE_CXX_COMPILER=$(CXX) \\\n\t-DCMAKE_OSX_DEPLOYMENT_TARGET=$(MIN_MACOS_VERSION) \\\n\t$(CMAKE_CXX_COMPILER_LAUNCHER_FLAG) \\\n\t-DCMAKE_AR=$(AR) \\\n\t-DCMAKE_RANLIB=$(which llvm-16-ranlib 2>/dev/null || which llvm-ranlib 2>/dev/null) \\\n\t-DCMAKE_CXX_STANDARD=20 \\\n\t-DCMAKE_C_STANDARD=17 \\\n\t-DCMAKE_CXX_STANDARD_REQUIRED=ON \\\n\t-DCMAKE_C_STANDARD_REQUIRED=ON \\\n\t-DCMAKE_CXX_EXTENSIONS=ON \n\n\n\nCMAKE_FLAGS = $(CMAKE_FLAGS_WITHOUT_RELEASE) -DCMAKE_BUILD_TYPE=Release\n\n# SQLite3 is dynamically linked on macOS\n# it is about 30% faster to use system SQLite3 on macOS (something something kernel page cache)\n# on Linux, it is statically linked\nSQLITE_OBJECT =\n\n\n\nLIBTOOL=libtoolize\nifeq ($(OS_NAME),darwin)\nLIBTOOL=glibtoolize\nAR=$(LLVM_PREFIX)/bin/llvm-ar\nBITCODE_OR_SECTIONS=\nendif\n\nifeq ($(OS_NAME),linux)\nLIBICONV_PATH =\nAR = $(shell which llvm-ar-16 2>/dev/null || which llvm-ar 2>/dev/null || which ar 2>/dev/null)\nendif\n\nOPTIMIZATION_LEVEL=-O3 $(MARCH_NATIVE)\nDEBUG_OPTIMIZATION_LEVEL= -O1 $(MARCH_NATIVE) -gdwarf-4\nCFLAGS_WITHOUT_MARCH = $(MACOS_MIN_FLAG) $(OPTIMIZATION_LEVEL) -fno-exceptions -fvisibility=hidden -fvisibility-inlines-hidden -mno-omit-leaf-frame-pointer -fno-omit-frame-pointer -fno-asynchronous-unwind-tables -fno-unwind-tables -fno-pie -fno-pic\nBUN_CFLAGS = $(MACOS_MIN_FLAG) $(MARCH_NATIVE)  $(OPTIMIZATION_LEVEL) -fno-exceptions -fvisibility=hidden -fvisibility-inlines-hidden  -mno-omit-leaf-frame-pointer -fno-omit-frame-pointer -fno-asynchronous-unwind-tables -fno-unwind-tables -fno-pie -fno-pic\nBUN_TMP_DIR := /tmp/make-bun\nCFLAGS=$(CFLAGS_WITHOUT_MARCH) $(MARCH_NATIVE)\n\n# Set via postinstall\nifeq (,$(realpath $(JSC_BASE_DIR)))\n\tJSC_BASE_DIR = $(realpath $(firstword $(wildcard bun-webkit)))\n\tifeq (,$(JSC_BASE_DIR))\n\t\tJSC_BASE_DIR = $(HOME)/webkit-build\n\tendif\nendif\n\nDEFAULT_JSC_LIB :=\nDEFAULT_JSC_LIB_DEBUG :=\n\nDEFAULT_JSC_LIB = $(JSC_BASE_DIR)/lib\nDEFAULT_JSC_LIB_DEBUG = $(DEFAULT_JSC_LIB)\n\nifneq (,$(realpath $(WEBKIT_RELEASE_DIR_LTO)/lib))\nDEFAULT_JSC_LIB = $(WEBKIT_RELEASE_DIR_LTO)/lib\nendif\n\nifneq (,$(realpath $(WEBKIT_RELEASE_DIR)/lib))\nDEFAULT_JSC_LIB_DEBUG = $(WEBKIT_RELEASE_DIR)/lib\nendif\n\nJSC_LIB ?= $(DEFAULT_JSC_LIB)\nJSC_LIB_DEBUG ?= $(DEFAULT_JSC_LIB_DEBUG)\n\nJSC_INCLUDE_DIR ?= $(JSC_BASE_DIR)/include\nZLIB_INCLUDE_DIR ?= $(BUN_DEPS_DIR)/zlib\nZLIB_LIB_DIR ?= $(BUN_DEPS_DIR)/zlib\n\nJSC_FILES := $(JSC_LIB)/libJavaScriptCore.a $(JSC_LIB)/libWTF.a  $(JSC_LIB)/libbmalloc.a\nJSC_FILES_DEBUG := $(JSC_LIB_DEBUG)/libJavaScriptCore.a $(JSC_LIB_DEBUG)/libWTF.a  $(JSC_LIB_DEBUG)/libbmalloc.a\n\n\nENABLE_MIMALLOC ?= 1\n\n# https://github.com/microsoft/mimalloc/issues/512\n# Linking mimalloc via object file on macOS x64 can cause heap corruption\n_MIMALLOC_FILE = libmimalloc.o\n_MIMALLOC_INPUT_PATH = CMakeFiles/mimalloc-obj.dir/src/static.c.o\n_MIMALLOC_DEBUG_FILE = libmimalloc-debug.a\n_MIMALLOC_OBJECT_FILE = 1\n_MIMALLOC_LINK = $(BUN_DEPS_OUT_DIR)/$(MIMALLOC_FILE)\nDEFAULT_LINKER_FLAGS =\n\nJSC_BUILD_STEPS :=\nJSC_BUILD_STEPS_DEBUG :=\nifeq ($(OS_NAME),linux)\n\tJSC_BUILD_STEPS += jsc-build-linux\n\tJSC_BUILD_STEPS_DEBUG += jsc-build-linux-debug\n\t_MIMALLOC_LINK = $(BUN_DEPS_OUT_DIR)/$(MIMALLOC_FILE)\nDEFAULT_LINKER_FLAGS= -pthread -ldl\nendif\nifeq ($(OS_NAME),darwin)\n    _MIMALLOC_OBJECT_FILE = 0\n\tJSC_BUILD_STEPS += jsc-build-mac jsc-copy-headers\n\tJSC_BUILD_STEPS_DEBUG += jsc-build-mac-debug\n\t_MIMALLOC_FILE = libmimalloc.a\n\t_MIMALLOC_INPUT_PATH = libmimalloc.a\n\t_MIMALLOC_LINK = -lmimalloc\nendif\n\nMIMALLOC_FILE=\nMIMALLOC_INPUT_PATH=\nifeq ($(ENABLE_MIMALLOC), 1)\nMIMALLOC_FILE=$(_MIMALLOC_FILE)\nMIMALLOC_INPUT_PATH=$(_MIMALLOC_INPUT_PATH)\nendif\n\n\n\n\nBUN_DEPLOY_DIR ?= /tmp/bun-$(PACKAGE_JSON_VERSION)\n\nMACOSX_DEPLOYMENT_TARGET=$(MIN_MACOS_VERSION)\nMACOS_MIN_FLAG=\n\nPOSIX_PKG_MANAGER=sudo apt\n\nSTRIP=\n\nifeq ($(OS_NAME),darwin)\nSTRIP=/usr/bin/strip\nendif\n\nifeq ($(OS_NAME),linux)\nSTRIP=$(shell which llvm-strip 2>/dev/null || which llvm-strip-16 2>/dev/null || which strip 2>/dev/null || echo \"Missing strip\")\nendif\n\n\nHOMEBREW_PREFIX ?= $(BREW_PREFIX_PATH)\n\n\nSRC_DIR := src/bun.js/bindings\nMODULES_DIR := src/bun.js/modules\nOBJ_DIR ?= src/bun.js/bindings-obj\nDEBUG_OBJ_DIR := src/bun.js/debug-bindings-obj\n\nSRC_PATH := $(realpath $(SRC_DIR))\nSRC_FILES := $(wildcard $(SRC_DIR)/*.cpp)\nMODULES_FILES := $(wildcard $(MODULES_DIR)/*.cpp)\nSRC_WEBCORE_FILES := $(wildcard $(SRC_DIR)/webcore/*.cpp)\nSRC_SQLITE_FILES := $(wildcard $(SRC_DIR)/sqlite/*.cpp)\nSRC_NODE_OS_FILES := $(wildcard $(SRC_DIR)/node_os/*.cpp)\nSRC_IO_FILES := $(wildcard src/io/*.cpp)\nSRC_BUILTINS_FILES := $(wildcard  src/js/out/*.cpp)\nSRC_WEBCRYPTO_FILES := $(wildcard $(SRC_DIR)/webcrypto/*.cpp)\n\nOBJ_FILES := $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(SRC_FILES))\nWEBCORE_OBJ_FILES := $(patsubst $(SRC_DIR)/webcore/%.cpp,$(OBJ_DIR)/%.o,$(SRC_WEBCORE_FILES))\nSQLITE_OBJ_FILES := $(patsubst $(SRC_DIR)/sqlite/%.cpp,$(OBJ_DIR)/%.o,$(SRC_SQLITE_FILES))\nNODE_OS_OBJ_FILES := $(patsubst $(SRC_DIR)/node_os/%.cpp,$(OBJ_DIR)/%.o,$(SRC_NODE_OS_FILES))\nBUILTINS_OBJ_FILES := $(patsubst src/js/out/%.cpp,$(OBJ_DIR)/%.o,$(SRC_BUILTINS_FILES))\nIO_FILES := $(patsubst src/io/%.cpp,$(OBJ_DIR)/%.o,$(SRC_IO_FILES))\nMODULES_OBJ_FILES := $(patsubst $(MODULES_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(MODULES_FILES))\nWEBCRYPTO_OBJ_FILES := $(patsubst $(SRC_DIR)/webcrypto/%.cpp,$(OBJ_DIR)/%.o,$(SRC_WEBCRYPTO_FILES))\n\nDEBUG_OBJ_FILES := $(patsubst $(SRC_DIR)/%.cpp,$(DEBUG_OBJ_DIR)/%.o,$(SRC_FILES))\nDEBUG_WEBCORE_OBJ_FILES := $(patsubst $(SRC_DIR)/webcore/%.cpp,$(DEBUG_OBJ_DIR)/%.o,$(SRC_WEBCORE_FILES))\nDEBUG_SQLITE_OBJ_FILES := $(patsubst $(SRC_DIR)/sqlite/%.cpp,$(DEBUG_OBJ_DIR)/%.o,$(SRC_SQLITE_FILES))\nDEBUG_NODE_OS_OBJ_FILES := $(patsubst $(SRC_DIR)/node_os/%.cpp,$(DEBUG_OBJ_DIR)/%.o,$(SRC_NODE_OS_FILES))\nDEBUG_BUILTINS_OBJ_FILES := $(patsubst src/js/out/%.cpp,$(DEBUG_OBJ_DIR)/%.o,$(SRC_BUILTINS_FILES))\nDEBUG_IO_FILES := $(patsubst src/io/%.cpp,$(DEBUG_OBJ_DIR)/%.o,$(SRC_IO_FILES))\nDEBUG_MODULES_OBJ_FILES := $(patsubst $(MODULES_DIR)/%.cpp,$(DEBUG_OBJ_DIR)/%.o,$(MODULES_FILES))\nDEBUG_WEBCRYPTO_OBJ_FILES := $(patsubst $(SRC_DIR)/webcrypto/%.cpp, $(DEBUG_OBJ_DIR)/%.o, $(SRC_WEBCRYPTO_FILES))\n\nBINDINGS_OBJ := $(OBJ_FILES) $(WEBCORE_OBJ_FILES) $(SQLITE_OBJ_FILES) $(NODE_OS_OBJ_FILES) $(BUILTINS_OBJ_FILES) $(IO_FILES) $(MODULES_OBJ_FILES) $(WEBCRYPTO_OBJ_FILES)\nDEBUG_BINDINGS_OBJ := $(DEBUG_OBJ_FILES) $(DEBUG_WEBCORE_OBJ_FILES) $(DEBUG_SQLITE_OBJ_FILES) $(DEBUG_NODE_OS_OBJ_FILES) $(DEBUG_BUILTINS_OBJ_FILES) $(DEBUG_IO_FILES) $(DEBUG_MODULES_OBJ_FILES) $(DEBUG_WEBCRYPTO_OBJ_FILES)\n\n-include $(BINDINGS_OBJ:.o=.d)\n-include $(DEBUG_BINDINGS_OBJ:.o=.d)\n\nALL_JSC_INCLUDE_DIRS := -I$(WEBKIT_RELEASE_DIR)/WTF/Headers \\\n\t\t-I$(WEBKIT_RELEASE_DIR)/ICU/Headers \\\n\t\t-I$(WEBKIT_RELEASE_DIR)/bmalloc/Headers \\\n\t\t-I$(WEBKIT_RELEASE_DIR)/ \\\n\t\t-I$(WEBKIT_RELEASE_DIR)/include \\\n\t\t-I$(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders \\\n\t\t-I$(WEBKIT_RELEASE_DIR)/bmalloc/PrivateHeaders \\\n\t\t-I$(WEBKIT_RELEASE_DIR)/WTF/PrivateHeaders\n\nSHARED_INCLUDE_DIR = -I$(realpath src/bun.js/bindings)/ \\\n\t\t-I$(realpath src/js/builtins/) \\\n\t\t-I$(realpath src/js/out/) \\\n\t\t-I$(realpath src/bun.js/bindings) \\\n\t\t-I$(realpath src/bun.js/bindings/webcore) \\\n\t\t-I$(realpath src/bun.js/bindings/webcrypto) \\\n\t\t-I$(realpath src/bun.js/bindings/sqlite) \\\n\t\t-I$(realpath src/bun.js/bindings/node_os) \\\n\t\t-I$(realpath src/bun.js/modules) \\\n\t\t-I$(JSC_INCLUDE_DIR)\n\nMAC_INCLUDE_DIRS :=  $(ALL_JSC_INCLUDE_DIRS) \\\n\t\t$(SHARED_INCLUDE_DIR) \\\n\t\t-I$(WEBKIT_DIR)/Source \\\n\nLINUX_INCLUDE_DIRS := $(ALL_JSC_INCLUDE_DIRS) \\\n\t\t\t\t\t   $(SHARED_INCLUDE_DIR) \\\n\t\t\t\t\t  -I$(ZLIB_INCLUDE_DIR)\n\n\nUWS_INCLUDE_DIR := -I$(BUN_DIR)/packages/bun-usockets/src -I$(BUN_DIR)/packages -I$(BUN_DEPS_DIR)\n\n\nINCLUDE_DIRS := $(UWS_INCLUDE_DIR) -I$(BUN_DEPS_DIR)/mimalloc/include -I$(BUN_DEPS_DIR)/zstd/include -Isrc/napi -I$(BUN_DEPS_DIR)/boringssl/include -I$(BUN_DEPS_DIR)/c-ares/include -Isrc/bun.js/modules\n\n\nifeq ($(OS_NAME),linux)\n\tINCLUDE_DIRS += $(LINUX_INCLUDE_DIRS)\n\tSQLITE_OBJECT = $(realpath $(BUN_DEPS_OUT_DIR))/sqlite3.o\nendif\n\nifeq ($(OS_NAME),darwin)\nMACOS_MIN_FLAG=-mmacos-version-min=$(MIN_MACOS_VERSION)\nPOSIX_PKG_MANAGER=brew\nINCLUDE_DIRS += $(MAC_INCLUDE_DIRS)\nendif\n\n\n\nMACOS_ICU_FILES = $(HOMEBREW_PREFIX)/opt/icu4c/lib/libicudata.a \\\n\t$(HOMEBREW_PREFIX)/opt/icu4c/lib/libicui18n.a \\\n\t$(HOMEBREW_PREFIX)/opt/icu4c/lib/libicuuc.a\n\nMACOS_ICU_INCLUDE = $(HOMEBREW_PREFIX)/opt/icu4c/include\n\nICU_FLAGS ?=\n\n# TODO: find a way to make this more resilient\n# Ideally, we could just look up the linker search paths\nifeq ($(OS_NAME),linux)\nLIB_ICU_PATH ?= $(JSC_LIB)\nICU_FLAGS += $(LIB_ICU_PATH)/libicuuc.a $(LIB_ICU_PATH)/libicudata.a $(LIB_ICU_PATH)/libicui18n.a\nendif\n\nifeq ($(OS_NAME),darwin)\nICU_FLAGS += -l icucore \\\n\t$(MACOS_ICU_FILES) \\\n\t-I$(MACOS_ICU_INCLUDE)\nendif\n\n\nBORINGSSL_PACKAGE = --pkg-begin boringssl $(BUN_DEPS_DIR)/boringssl.zig --pkg-end\n\nCLANG_FLAGS = $(INCLUDE_DIRS) \\\n\t\t-std=$(CXX_VERSION) \\\n\t\t-DSTATICALLY_LINKED_WITH_JavaScriptCore=1 \\\n\t\t-DSTATICALLY_LINKED_WITH_WTF=1 \\\n\t\t-DSTATICALLY_LINKED_WITH_BMALLOC=1 \\\n\t\t-DBUILDING_WITH_CMAKE=1 \\\n\t\t-DBUN_SINGLE_THREADED_PER_VM_ENTRY_SCOPE=1 \\\n\t\t-DNAPI_EXPERIMENTAL=ON \\\n\t\t-DNDEBUG=1 \\\n\t\t-DNOMINMAX \\\n\t\t-DIS_BUILD \\\n\t\t-DBUILDING_JSCONLY__ \\\n\t\t-DASSERT_ENABLED=0 \\\n\t\t-fvisibility=hidden \\\n\t\t-fvisibility-inlines-hidden\n\nifeq ($(OS_NAME),darwin)\nCLANG_FLAGS += -DBUN_FAST_TLS=1 -DUSE_BUN_FAST_TLS=1 -DHAVE_BUN_FAST_TLS=1\nendif\n\nPLATFORM_LINKER_FLAGS =\n\nSYMBOLS=\n\n# This flag is only added to webkit builds on Apple platforms\n# It has something to do with ICU\nifeq ($(OS_NAME), darwin)\nSYMBOLS=-exported_symbols_list $(realpath src/symbols.txt)\nPLATFORM_LINKER_FLAGS += -DDU_DISABLE_RENAMING=1 \\\n\t\t-lstdc++ \\\n\t\t-fno-keep-static-consts -lresolv\nendif\n\nifeq ($(OS_NAME),linux)\nSYMBOLS=-Wl,--dynamic-list $(realpath src/symbols.dyn) -Wl,--version-script=$(realpath src/linker.lds)\nendif\n\nSHARED_LIB_EXTENSION = .so\n\nJSC_BINDINGS = $(BINDINGS_OBJ) $(JSC_FILES)\nJSC_BINDINGS_DEBUG = $(DEBUG_BINDINGS_OBJ) $(JSC_FILES_DEBUG)\n\nRELEASE_FLAGS=\nDEBUG_FLAGS=\n\n\nifeq ($(OS_NAME), darwin)\n\tRELEASE_FLAGS += -Wl,-dead_strip -Wl,-dead_strip_dylibs\n\tDEBUG_FLAGS += -Wl,-dead_strip -Wl,-dead_strip_dylibs\n\tSHARED_LIB_EXTENSION = .dylib\nendif\n\nMINIMUM_ARCHIVE_FILES = -L$(BUN_DEPS_OUT_DIR) \\\n\t-larchive \\\n\t-lz \\\n\t$(BUN_DEPS_OUT_DIR)/picohttpparser.o \\\n\t$(_MIMALLOC_LINK) \\\n\t-ldecrepit \\\n\t-lssl \\\n\t-lcrypto \\\n\t-llolhtml\n\nARCHIVE_FILES_WITHOUT_LIBCRYPTO = $(MINIMUM_ARCHIVE_FILES) \\\n\t\t-larchive \\\n\t\t-ltcc \\\n\t\t-lusockets \\\n\t\t-lcares \\\n\t\t-lzstd \\\n\t\t$(BUN_DEPS_OUT_DIR)/libuwsockets.o \\\n\t\t$(BUN_DEPS_OUT_DIR)/liblshpack.a\n\nARCHIVE_FILES = $(ARCHIVE_FILES_WITHOUT_LIBCRYPTO)\n\nSTATIC_MUSL_FLAG ?=\n\nWRAP_SYMBOLS_ON_LINUX =\n\nifeq ($(OS_NAME), linux)\nWRAP_SYMBOLS_ON_LINUX = -Wl,--wrap=fcntl -Wl,--wrap=fcntl64 -Wl,--wrap=stat64 -Wl,--wrap=pow -Wl,--wrap=exp -Wl,--wrap=log -Wl,--wrap=log2 \\\n\t-Wl,--wrap=lstat \\\n\t-Wl,--wrap=stat \\\n\t-Wl,--wrap=fstat \\\n\t-Wl,--wrap=fstatat \\\n\t-Wl,--wrap=lstat64 \\\n\t-Wl,--wrap=stat64 \\\n\t-Wl,--wrap=fstat64 \\\n\t-Wl,--wrap=fstatat64 \\\n\t-Wl,--wrap=mknod \\\n\t-Wl,--wrap=mknodat \\\n\t-Wl,--wrap=statx\n\nPLATFORM_LINKER_FLAGS = $(BUN_CFLAGS) \\\n\t\t-fuse-ld=lld \\\n\t\t-Wl,-z,now \\\n\t\t-Wl,--as-needed \\\n\t\t-Wl,--gc-sections \\\n\t\t-Wl,-z,stack-size=12800000 \\\n\t\t-static-libstdc++ \\\n\t\t-static-libgcc \\\n\t\t-fno-omit-frame-pointer \\\n\t\t-Wl,--compress-debug-sections,zlib \\\n\t\t-l:libatomic.a \\\n\t\t${STATIC_MUSL_FLAG}  \\\n\t\t-Wl,-Bsymbolic-functions \\\n\t\t-fno-semantic-interposition \\\n\t\t-flto \\\n\t\t-Wl,--allow-multiple-definition \\\n\t\t-rdynamic\n\n\nendif\n\n\nBUN_LLD_FLAGS_WITHOUT_JSC = $(ARCHIVE_FILES) \\\n\t\t$(LIBICONV_PATH) \\\n\t\t$(CLANG_FLAGS) \\\n\t\t$(DEFAULT_LINKER_FLAGS) \\\n\t\t$(PLATFORM_LINKER_FLAGS) \\\n\t\t$(SQLITE_OBJECT) ${ICU_FLAGS}\n\n\n\nBUN_LLD_FLAGS = $(BUN_LLD_FLAGS_WITHOUT_JSC) $(WRAP_SYMBOLS_ON_LINUX) $(JSC_FILES) $(BINDINGS_OBJ)\nBUN_LLD_FLAGS_DEBUG = $(BUN_LLD_FLAGS_WITHOUT_JSC) $(WRAP_SYMBOLS_ON_LINUX) $(JSC_FILES_DEBUG) $(DEBUG_BINDINGS_OBJ)\nBUN_LLD_FLAGS_FAST = $(BUN_LLD_FLAGS_WITHOUT_JSC) $(WRAP_SYMBOLS_ON_LINUX)  $(JSC_FILES_DEBUG) $(BINDINGS_OBJ)\n\nCLANG_VERSION = $(shell $(CC) --version | awk '/version/ {for(i=1; i<=NF; i++){if($$i==\"version\"){split($$(i+1),v,\".\");print v[1]}}}')\n\n\n\nbun:\n\nnpm-install:\n\t$(NPM_CLIENT) install --ignore-scripts --production\n\nnpm-install-dev:\n\t$(NPM_CLIENT) install\n\tcd test && $(NPM_CLIENT) install\n\tcd packages/bun-types && $(NPM_CLIENT) install --production\n\nprint-%  : ; @echo $* = $($*)\nget-%  : ; @echo $($*)\nprint-version:\n\t@echo $(PACKAGE_JSON_VERSION)\n\n# Prevent dependency on libtcc1 so it doesn't do filesystem lookups\nTINYCC_CFLAGS= -DTCC_LIBTCC1=\\\"\\0\\\"\n\n# TinyCC needs to run some compiled code after it's been compiled.\n# That means we can't compile for a newer microarchitecture than native\n# We compile for an older microarchitecture on x64 to ensure compatibility\n.PHONY: tinycc\ntinycc:\n\tcd $(TINYCC_DIR) && \\\n\t\tmake clean && \\\n\t\tAR=$(AR) $(CCACHE_CC_FLAG) CFLAGS='$(CFLAGS_WITHOUT_MARCH) $(NATIVE_OR_OLD_MARCH) -mtune=native $(TINYCC_CFLAGS)' ./configure --enable-static --cc=$(CCACHE_CC_OR_CC) --ar=$(AR) --config-predefs=yes  && \\\n\t\tmake libtcc.a -j10 && \\\n\t\tcp $(TINYCC_DIR)/*.a $(BUN_DEPS_OUT_DIR)\n\nPYTHON=$(shell which python 2>/dev/null || which python3 2>/dev/null || which python2 2>/dev/null)\n\n.PHONY: esm\njs: # to rebundle js (rebuilding binary not needed to reload js code)\n\tNODE_ENV=production bun src/js/_codegen/index.ts\n\nesm-debug:\n\tBUN_DEBUG_QUIET_LOGS=1 NODE_ENV=production bun-debug src/js/build-esm.ts\n\nBUN_TYPES_REPO_PATH ?= $(realpath packages/bun-types)\n\nifeq ($(DEBUG),true)\nBUN_RELEASE_BIN = bun\nendif\n\n.PHONY: c-ares\nc-ares:\n\trm -rf $(BUN_DEPS_DIR)/c-ares/build && \\\n\tmkdir $(BUN_DEPS_DIR)/c-ares/build && \\\n\tcd $(BUN_DEPS_DIR)/c-ares/build && \\\n    cmake $(CMAKE_FLAGS) -DCMAKE_C_FLAGS=\"$(CFLAGS) -flto=full\" \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_LIBDIR=lib \\\n        -DCARES_STATIC=ON -DCARES_STATIC_PIC=ON -DCARES_SHARED=OFF \\\n        -G \"Ninja\" .. && \\\n\tninja && cp lib/libcares.a $(BUN_DEPS_OUT_DIR)/libcares.a\n\n.PHONY: prepare-types\nprepare-types:\n\tBUN_VERSION=$(PACKAGE_JSON_VERSION) $(BUN_RELEASE_BIN) $(BUN_TYPES_REPO_PATH)/scripts/bundle.ts $(BUN_TYPES_REPO_PATH)/dist\n\techo \"Generated types for $(PACKAGE_JSON_VERSION) in $(BUN_TYPES_REPO_PATH)/dist\"\n\tcp $(BUN_TYPES_REPO_PATH)/dist/types.d.ts /tmp/bun-types.d.ts\n\tcd /tmp && $(PACKAGE_DIR)/../../node_modules/.bin/tsc /tmp/bun-types.d.ts\n\nrelease-types:\n\t# can be removed when/if \"bun publish\" is implemented\n\t@npm --version >/dev/null 2>&1 || (echo -e \"ERROR: npm is required.\"; exit 1)\n\tcd $(BUN_TYPES_REPO_PATH)/dist && npm publish --dry-run\n\n.PHONY: format\nformat: ## to format the code\n\t-$(PRETTIER) --write 'test/**/*.{js,jsx,ts,tsx}'\n\n\n.PHONY: lolhtml\nlolhtml:\n\tcd $(BUN_DEPS_DIR)/lol-html/ && cd $(BUN_DEPS_DIR)/lol-html/c-api && cargo build --release && cp target/release/liblolhtml.a $(BUN_DEPS_OUT_DIR)\n\n# no asm is not worth it!!\n.PHONY: boringssl-build\nboringssl-build:\n\tcd $(BUN_DEPS_DIR)/boringssl && mkdir -p build && cd build && CFLAGS=\"$(CFLAGS)\" cmake $(CMAKE_FLAGS) -DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=lld\" -GNinja .. && ninja libcrypto.a libssl.a libdecrepit.a\n\n.PHONY: boringssl-build-debug\nboringssl-build-debug:\n\tcd $(BUN_DEPS_DIR)/boringssl && mkdir -p build && cd build && CFLAGS=\"$(CFLAGS)\" cmake $(CMAKE_FLAGS_WITHOUT_RELEASE) -DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=lld\" -GNinja .. && ninja\n\nboringssl-copy:\n\tcp $(BUN_DEPS_DIR)/boringssl/build/ssl/libssl.a $(BUN_DEPS_OUT_DIR)/libssl.a\n\tcp $(BUN_DEPS_DIR)/boringssl/build/crypto/libcrypto.a $(BUN_DEPS_OUT_DIR)/libcrypto.a\n\tcp $(BUN_DEPS_DIR)/boringssl/build/decrepit/libdecrepit.a $(BUN_DEPS_OUT_DIR)/libdecrepit.a\n\n.PHONY: boringssl\nboringssl: boringssl-build boringssl-copy\n.PHONY: boringssl-debug\nboringssl-debug: boringssl-build-debug boringssl-copy\n\n.PHONY: compile-ffi-test\ncompile-ffi-test:\n\tclang $(OPTIMIZATION_LEVEL) -shared -undefined dynamic_lookup -o /tmp/bun-ffi-test.dylib -fPIC ./test/js/bun/ffi/ffi-test.c\n\nsqlite:\n\n.PHONY: zstd\nzstd:\n\tcd $(BUN_DEPS_DIR)/zstd && rm -rf build-cmake-debug && cmake $(CMAKE_FLAGS) -DZSTD_BUILD_STATIC=ON -B build-cmake-debug -S build/cmake -G Ninja && ninja -C build-cmake-debug && cp build-cmake-debug/lib/libzstd.a $(BUN_DEPS_OUT_DIR)/libzstd.a\n\n.PHONY: libarchive\nlibarchive:\n\tcd $(BUN_DEPS_DIR)/libarchive; \\\n\t(make clean || echo \"\"); \\\n\t(./build/clean.sh || echo \"\"); \\\n\t./build/autogen.sh; \\\n\tCFLAGS=\"$(CFLAGS)\" $(CCACHE_CC_FLAG) ./configure --disable-shared --enable-static  --with-pic  --disable-bsdtar   --disable-bsdcat --disable-rpath --enable-posix-regex-lib  --without-xml2  --without-expat --without-openssl  --without-iconv --without-zlib; \\\n\tmake -j${CPUS}; \\\n\tcp ./.libs/libarchive.a $(BUN_DEPS_OUT_DIR)/libarchive.a;\n\n.PHONY: tgz\ntgz:\n\t$(ZIG) build tgz-obj -Doptimize=ReleaseFast\n\t$(CXX) $(PACKAGE_DIR)/tgz.o -g -o ./misctools/tgz $(DEFAULT_LINKER_FLAGS) -lc  $(ARCHIVE_FILES)\n\trm -rf $(PACKAGE_DIR)/tgz.o\n\n.PHONY: tgz-debug\ntgz-debug:\n\t$(ZIG) build tgz-obj\n\t$(CXX) $(DEBUG_PACKAGE_DIR)/tgz.o -g -o ./misctools/tgz $(DEFAULT_LINKER_FLAGS) -lc $(ARCHIVE_FILES)\n\trm -rf $(DEBUG_PACKAGE_DIR)/tgz.o\n\nzlib:\n\tcd $(BUN_DEPS_DIR)/zlib; make clean; $(CCACHE_CC_FLAG) CFLAGS=\"$(CFLAGS)\" ./configure --static && make -j${CPUS} && cp ./libz.a $(BUN_DEPS_OUT_DIR)/libz.a\n\nifeq ($(POSIX_PKG_MANAGER), brew)\nPKGNAME_NINJA := ninja\nelse\nPKGNAME_NINJA := ninja-build\nendif\n\n.PHONY: assert-deps\nassert-deps:\n\t@echo \"Checking if the required utilities are available...\"\n\t@if [ $(CLANG_VERSION) -lt \"15\" ]; then echo -e \"ERROR: clang version >=15 required, found: $(CLANG_VERSION). Install with:\\n\\n    $(POSIX_PKG_MANAGER) install llvm@16\"; exit 1; fi\n\t@cmake --version >/dev/null 2>&1 || (echo -e \"ERROR: cmake is required.\"; exit 1)\n\t@$(PYTHON) --version >/dev/null 2>&1 || (echo -e \"ERROR: python is required.\"; exit 1)\n\t@$(ESBUILD) --version >/dev/null 2>&1 || (echo -e \"ERROR: esbuild is required.\"; exit 1)\n\t@$(NPM_CLIENT) --version >/dev/null 2>&1 || (echo -e \"ERROR: NPM client (bun or npm) is required.\"; exit 1)\n\t@go version >/dev/null 2>&1 || (echo -e \"ERROR: go is required.\"; exit 1)\n\t@which aclocal > /dev/null || (echo -e  \"ERROR: automake is required. Install with:\\n\\n    $(POSIX_PKG_MANAGER) install automake\"; exit 1)\n\t@which $(LIBTOOL) > /dev/null || (echo -e \"ERROR: libtool is required. Install with:\\n\\n    $(POSIX_PKG_MANAGER) install libtool\"; exit 1)\n\t@which ninja > /dev/null || (echo -e \"ERROR: Ninja is required. Install with:\\n\\n    $(POSIX_PKG_MANAGER) install $(PKGNAME_NINJA)\"; exit 1)\n\t@which pkg-config > /dev/null || (echo -e \"ERROR: pkg-config is required. Install with:\\n\\n    $(POSIX_PKG_MANAGER) install pkg-config\"; exit 1)\n\t@which rustc > /dev/null || (echo -e \"ERROR: rustc is required.\" exit 1)\n\t@which cargo > /dev/null || (echo -e \"ERROR: cargo is required.\" exit 1)\n\t@test $(shell cargo --version | awk '{print $$2}' | cut -d. -f2) -gt 57 || (echo -e \"ERROR: cargo version must be at least 1.57.\"; exit 1)\n\t@echo \"You have the dependencies installed! Woo\"\n\n\n.PHONY: init-submodules\ninit-submodules: submodule # (backwards-compatibility alias)\n\n\n.PHONY: build-obj\nbuild-obj:\n\t$(ZIG) build obj -Doptimize=ReleaseFast -Dcpu=\"$(CPU_TARGET)\"\n\n.PHONY: build-obj-small\nbuild-obj-small:\n\t$(ZIG) build obj -Doptimize=ReleaseSmall -Dcpu=\"$(CPU_TARGET)\"\n\n.PHONY: dev-build-obj-wasm\ndev-build-obj-wasm:\n\t$(ZIG) build bun-wasm -Dtarget=wasm32-freestanding\n\n.PHONY: dev-wasm\ndev-wasm: dev-build-obj-wasm\n\temcc -sEXPORTED_FUNCTIONS=\"['_bun_free', '_cycleStart', '_cycleEnd', '_bun_malloc', '_scan', '_transform', '_init', '_getTests']\" \\\n\t\t-g2 -s ERROR_ON_UNDEFINED_SYMBOLS=0  -DNDEBUG  \\\n\t\t$(BUN_DEPS_DIR)/$(MIMALLOC_FILE).wasm  \\\n\t\tpackages/debug-bun-freestanding-wasm32/bun-wasm.o --no-entry --allow-undefined  -s ASSERTIONS=0  -s ALLOW_MEMORY_GROWTH=1 -s WASM_BIGINT=1  \\\n\t\t-o packages/debug-bun-freestanding-wasm32/bun-wasm.wasm\n\tcp packages/debug-bun-freestanding-wasm32/bun-wasm.wasm packages/bun-wasm/bun.wasm\n\n.PHONY: build-obj-wasm\nbuild-obj-wasm:\n\t$(ZIG) build bun-wasm -Doptimize=ReleaseFast -Dtarget=wasm32-freestanding\n\temcc -sEXPORTED_FUNCTIONS=\"['_bun_free', '_cycleStart', '_cycleEnd', '_bun_malloc', '_scan', '_transform', '_init', '_getTests']\" \\\n\t\t-s ERROR_ON_UNDEFINED_SYMBOLS=0  -DNDEBUG  \\\n\t\t$(BUN_DEPS_DIR)/$(MIMALLOC_FILE).wasm  \\\n\t\tpackages/bun-freestanding-wasm32/bun-wasm.o $(OPTIMIZATION_LEVEL) --no-entry --allow-undefined  -s ASSERTIONS=0  -s ALLOW_MEMORY_GROWTH=1 -s WASM_BIGINT=1  \\\n\t\t-o packages/bun-freestanding-wasm32/bun-wasm.wasm\n\tcp packages/bun-freestanding-wasm32/bun-wasm.wasm packages/bun-wasm/bun.wasm\n\n.PHONY: build-obj-wasm-small\nbuild-obj-wasm-small:\n\t$(ZIG) build bun-wasm -Doptimize=ReleaseFast -Dtarget=wasm32-freestanding\n\temcc -sEXPORTED_FUNCTIONS=\"['_bun_free', '_cycleStart', '_cycleEnd', '_bun_malloc', '_scan', '_transform', '_init', '_getTests']\" \\\n\t\t-Oz -s ERROR_ON_UNDEFINED_SYMBOLS=0  -DNDEBUG  \\\n\t\t$(BUN_DEPS_DIR)/$(MIMALLOC_FILE).wasm  \\\n\t\tpackages/bun-freestanding-wasm32/bun-wasm.o -Oz --no-entry --allow-undefined  -s ASSERTIONS=0  -s ALLOW_MEMORY_GROWTH=1 -s WASM_BIGINT=1  \\\n\t\t-o packages/bun-freestanding-wasm32/bun-wasm.wasm\n\tcp packages/bun-freestanding-wasm32/bun-wasm.wasm packages/bun-wasm/bun.wasm\n\n.PHONY: wasm\nwasm: api mimalloc-wasm build-obj-wasm-small\n\t@rm -rf packages/bun-wasm/*.{d.ts,d.cts,d.mts,js,wasm,cjs,mjs,tsbuildinfo}\n\t@cp packages/bun-freestanding-wasm32/bun-wasm.wasm packages/bun-wasm/bun.wasm\n\t@cp src/api/schema.d.ts packages/bun-wasm/schema.d.ts\n\t@cp src/api/schema.js packages/bun-wasm/schema.js\n\t@cd packages/bun-wasm && $(NPM_CLIENT) run tsc -- -p .\n\t@cp packages/bun-wasm/index.d.ts packages/bun-wasm/index.d.cts\n\t@mv packages/bun-wasm/index.d.ts packages/bun-wasm/index.d.mts\n\t@bun build --sourcemap=external --external=fs --outdir=packages/bun-wasm --target=browser --minify ./packages/bun-wasm/index.ts\n\t@mv packages/bun-wasm/index.js packages/bun-wasm/index.mjs\n\t@mv packages/bun-wasm/index.js.map packages/bun-wasm/index.mjs.map\n\t@$(ESBUILD) --sourcemap=external --external:fs --outdir=packages/bun-wasm --target=esnext --bundle packages/bun-wasm/index.ts --format=cjs --minify --platform=node 2> /dev/null\n\t@mv packages/bun-wasm/index.js packages/bun-wasm/index.cjs\n\t@mv packages/bun-wasm/index.js.map packages/bun-wasm/index.cjs.map\n\t@rm -rf packages/bun-wasm/*.tsbuildinfo\n\t@wasm-opt -O4 --enable-mutable-globals  packages/bun-wasm/bun.wasm -o /tmp/bun.wasm\n\t@mv /tmp/bun.wasm packages/bun-wasm/bun.wasm\n\n.PHONY: build-obj-safe\nbuild-obj-safe:\n\t$(ZIG) build obj -Doptimize=ReleaseSafe -Dcpu=\"$(CPU_TARGET)\"\n\nUWS_CC_FLAGS = -pthread  -DLIBUS_USE_OPENSSL=1 -DUWS_HTTPRESPONSE_NO_WRITEMARK=1 -DLIBUS_USE_BORINGSSL=1 -DWITH_BORINGSSL=1 -Wpedantic -Wall -Wextra -Wsign-conversion -Wconversion $(UWS_INCLUDE) -DUWS_WITH_PROXY\nUWS_CXX_FLAGS = $(UWS_CC_FLAGS) -std=$(CXX_VERSION) -fno-exceptions -fno-rtti\nUWS_LDFLAGS = -I$(BUN_DEPS_DIR)/boringssl/include -I$(ZLIB_INCLUDE_DIR)\nUSOCKETS_DIR = $(BUN_DIR)/packages/bun-usockets\nUSOCKETS_SRC_DIR = $(USOCKETS_DIR)/src\n\n\nLSHPACK_SRC_DIR = $(BUN_DEPS_DIR)/ls-hpack\nLSHPACK_CC_FLAGS = -DXXH_HEADER_NAME=\"<xxhash.h>\"\nLSHPACK_LDFLAGS = -I$(LSHPACK_SRC_DIR) -I$(LSHPACK_SRC_DIR)/deps/xxhash\n\nlshpack:\n\trm -rf $(LSHPACK_SRC_DIR)/*.i $(LSHPACK_SRC_DIR)/*.bc $(LSHPACK_SRC_DIR)/*.o $(LSHPACK_SRC_DIR)/*.s $(LSHPACK_SRC_DIR)/*.ii $(LSHPACK_SRC_DIR)/*.s\n\tcd $(LSHPACK_SRC_DIR) && $(CC_WITH_CCACHE) -I$(LSHPACK_SRC_DIR)  -fno-builtin-malloc -fno-builtin-free -fno-builtin-realloc $(EMIT_LLVM_FOR_RELEASE)  $(MACOS_MIN_FLAG) -fPIC $(CFLAGS) $(LSHPACK_CC_FLAGS) -save-temps -I$(BUN_DEPS_DIR)/uws/lshpack/src $(LSHPACK_LDFLAGS) -g $(DEFAULT_LINKER_FLAGS) $(PLATFORM_LINKER_FLAGS) $(OPTIMIZATION_LEVEL) -c $(wildcard $(LSHPACK_SRC_DIR)/lshpack.c) $(wildcard $(LSHPACK_SRC_DIR)/deps/**/*.c)\n\tcd $(LSHPACK_SRC_DIR) && $(AR) rcvs $(BUN_DEPS_OUT_DIR)/liblshpack.a $(LSHPACK_SRC_DIR)/*.{o,bc}\n\nusockets:\n\trm -rf $(USOCKETS_DIR)/*.i $(USOCKETS_DIR)/*.bc $(USOCKETS_DIR)/*.o $(USOCKETS_DIR)/*.s $(USOCKETS_DIR)/*.ii $(USOCKETS_DIR)/*.s  $(BUN_DEPS_OUT_DIR)/libusockets.a\n\tcd $(USOCKETS_DIR) && $(CC_WITH_CCACHE) -I$(USOCKETS_SRC_DIR)  -fno-builtin-malloc -fno-builtin-free -fno-builtin-realloc $(EMIT_LLVM_FOR_RELEASE)  $(MACOS_MIN_FLAG) -fPIC $(CFLAGS) $(UWS_CC_FLAGS) -save-temps -I$(BUN_DEPS_DIR)/uws/uSockets/src $(UWS_LDFLAGS) -g $(DEFAULT_LINKER_FLAGS) $(PLATFORM_LINKER_FLAGS) $(OPTIMIZATION_LEVEL) -c $(wildcard $(USOCKETS_SRC_DIR)/*.c) $(wildcard $(USOCKETS_SRC_DIR)/**/*.c)\n\tcd $(USOCKETS_DIR) && $(CXX_WITH_CCACHE)  -I$(USOCKETS_SRC_DIR) -fno-builtin-malloc -fno-builtin-free -fno-builtin-realloc $(EMIT_LLVM_FOR_RELEASE) $(MACOS_MIN_FLAG)  -fPIC $(CXXFLAGS) $(UWS_CXX_FLAGS) -save-temps -I$(BUN_DEPS_DIR)/uws/uSockets/src $(UWS_LDFLAGS) -g $(DEFAULT_LINKER_FLAGS) $(PLATFORM_LINKER_FLAGS) $(OPTIMIZATION_LEVEL)  -c $(wildcard $(USOCKETS_SRC_DIR)/*.cpp) $(wildcard $(USOCKETS_SRC_DIR)/**/*.cpp)\n\tcd $(USOCKETS_DIR) && $(AR) rcvs $(BUN_DEPS_OUT_DIR)/libusockets.a $(USOCKETS_DIR)/*.{o,bc}\n\nuws: usockets\n\t$(CXX_WITH_CCACHE) -O2 $(EMIT_LLVM_FOR_RELEASE) -fPIC -I$(USOCKETS_SRC_DIR) $(CLANG_FLAGS) $(CFLAGS) $(UWS_CXX_FLAGS) $(UWS_LDFLAGS) $(PLATFORM_LINKER_FLAGS) -c -I$(BUN_DEPS_DIR) $(BUN_DEPS_OUT_DIR)/libusockets.a $(BUN_DEPS_DIR)/libuwsockets.cpp -o $(BUN_DEPS_OUT_DIR)/libuwsockets.o\n\n.PHONY: sign-macos-x64\nsign-macos-x64:\n\tgon sign.macos-x64.json\n\n.PHONY: sign-macos-aarch64\nsign-macos-aarch64:\n\tgon sign.macos-aarch64.json\n\ncls:\n\t@echo -e \"\\n\\n---\\n\\n\"\n\njsc-check:\n\t@ls $(JSC_BASE_DIR)  >/dev/null 2>&1 || (echo -e \"Failed to access WebKit build. Please compile the WebKit submodule using the Dockerfile at $(shell pwd)/src/javascript/WebKit/Dockerfile and then copy from /output in the Docker container to $(JSC_BASE_DIR). You can override the directory via JSC_BASE_DIR. \\n\\n \tDOCKER_BUILDKIT=1 docker build -t bun-webkit $(shell pwd)/vendor/WebKit -f $(shell pwd)/vendor/WebKit/Dockerfile --progress=plain\\n\\n \tdocker container create bun-webkit\\n\\n \t# Get the container ID\\n\tdocker container ls\\n\\n \tdocker cp DOCKER_CONTAINER_ID_YOU_JUST_FOUND:/output $(JSC_BASE_DIR)\" && exit 1)\n\t@ls $(JSC_INCLUDE_DIR)  >/dev/null 2>&1 || (echo \"Failed to access WebKit include directory at $(JSC_INCLUDE_DIR).\" && exit 1)\n\t@ls $(JSC_LIB)  >/dev/null 2>&1 || (echo \"Failed to access WebKit lib directory at $(JSC_LIB).\" && exit 1)\n\n.PHONY: all-js\nall-js: runtime_js fallback_decoder bun_error node-fallbacks\n\nensure-package-dir:\n\tmkdir -p $(PACKAGE_DIR)\n\n.PHONY: prerelease\nprerelease: npm-install api analytics all-js ensure-package-dir\n.PHONY: release-only\nrelease-only: release-bindings build-obj cls bun-link-lld-release bun-link-lld-release-dsym release-bin-entitlements\n.PHONY: release-safe-only\nrelease-safe-only: all-js bindings build-obj-safe cls bun-link-lld-release bun-link-lld-release-dsym release-bin-entitlements\n.PHONY: release\nrelease: prerelease release-only\n.PHONY: release-safe\nrelease-safe: prerelease release-safe-only\n\n.PHONY: fmt-cpp\nfmt-cpp:\n\tcd src/bun.js/bindings && $(CLANG_FORMAT) *.cpp *.h -i\n\n.PHONY: fmt-zig\nfmt-zig:\n\tcd src && $(ZIG) fmt **/*.zig\n\n.PHONY: fmt\nfmt: fmt-cpp fmt-zig\n\n.PHONY: api\napi:\n\t./node_modules/.bin/peechy --schema src/api/schema.peechy --esm src/api/schema.js --ts src/api/schema.d.ts --zig src/api/schema.zig\n\t$(ZIG) fmt src/api/schema.zig\n\n.PHONY: node-fallbacks\nnode-fallbacks:\n\t@cd src/node-fallbacks; $(NPM_CLIENT) install; $(NPM_CLIENT) run --silent build\n\n\n.PHONY: fallback_decoder\nfallback_decoder:\n\t@$(ESBUILD) --target=esnext  --bundle src/fallback.ts --format=iife --platform=browser --minify > src/fallback.out.js\n\n.PHONY: runtime_js\nruntime_js:\n\t@NODE_ENV=production $(ESBUILD) --define:process.env.NODE_ENV=\\\"production\\\" --target=esnext --bundle src/runtime.bun.js --format=esm --platform=node --minify --external:/bun:* > src/runtime.out.js\n\n.PHONY: bun_error\nbun_error:\n\t@cd packages/bun-error; $(NPM_CLIENT) install; $(NPM_CLIENT) run --silent build\n\n.PHONY: generate-install-script\ngenerate-install-script:\n\t@rm -f $(PACKAGES_REALPATH)/bun/install.js\n\t@$(ESBUILD) --log-level=error --define:BUN_VERSION=\"\\\"$(PACKAGE_JSON_VERSION)\\\"\" --define:process.env.NODE_ENV=\"\\\"production\\\"\" --platform=node  --format=cjs $(PACKAGES_REALPATH)/bun/install.ts > $(PACKAGES_REALPATH)/bun/install.js\n\n.PHONY: fetch\nfetch: $(IO_FILES)\n\t$(ZIG) build -Doptimize=ReleaseFast fetch-obj\n\t$(CXX) $(PACKAGE_DIR)/fetch.o -g $(OPTIMIZATION_LEVEL) -o ./misctools/fetch $(IO_FILES)  $(DEFAULT_LINKER_FLAGS) -lc $(MINIMUM_ARCHIVE_FILES)\n\trm -rf $(PACKAGE_DIR)/fetch.o\n\n.PHONY: sha\nsha:\n\t$(ZIG) build -Doptimize=ReleaseFast sha-bench-obj\n\t$(CXX) $(PACKAGE_DIR)/sha.o -I$(BUN_DEPS_DIR) -g $(OPTIMIZATION_LEVEL) -o ./misctools/sha $(DEFAULT_LINKER_FLAGS) -lc $(MINIMUM_ARCHIVE_FILES)\n\trm -rf $(PACKAGE_DIR)/sha.o\n\n.PHONY: fetch-debug\nfetch-debug: $(IO_FILES)\n\t$(ZIG) build fetch-obj\n\t$(CXX) $(DEBUG_PACKAGE_DIR)/fetch.o -g $(OPTIMIZATION_LEVEL) -o ./misctools/fetch $(DEBUG_IO_FILES) $(DEFAULT_LINKER_FLAGS) -lc $(MINIMUM_ARCHIVE_FILES)\n\n.PHONY: machbench-debug\nmachbench-debug: $(IO_FILES)\n\t$(ZIG) build machbench-obj\n\t$(CXX) $(DEBUG_PACKAGE_DIR)/machbench.o -g $(OPTIMIZATION_LEVEL) -o ./misctools/machbench $(DEBUG_IO_FILES) $(DEFAULT_LINKER_FLAGS) -lc $(MINIMUM_ARCHIVE_FILES)\n\n.PHONY: machbench\nmachbench: $(IO_FILES)\n\t$(ZIG) build -Doptimize=ReleaseFast machbench-obj\n\t$(CXX) $(PACKAGE_DIR)/machbench.o -g $(OPTIMIZATION_LEVEL) -o ./misctools/machbench $(IO_FILES)  $(DEFAULT_LINKER_FLAGS) -lc $(MINIMUM_ARCHIVE_FILES)\n\trm -rf $(PACKAGE_DIR)/machbench.o\n\n\n.PHONY: httpbench-debug\nhttpbench-debug: $(IO_FILES)\n\t$(ZIG) build httpbench-obj\n\t$(CXX) $(IO_FILES) $(DEBUG_PACKAGE_DIR)/httpbench.o -g -o ./misctools/http_bench  $(DEFAULT_LINKER_FLAGS) -lc $(MINIMUM_ARCHIVE_FILES)\n\n.PHONY: httpbench-release\nhttpbench-release: $(IO_FILES)\n\t$(ZIG) build -Doptimize=ReleaseFast httpbench-obj\n\t$(CXX) $(PACKAGE_DIR)/httpbench.o -g $(OPTIMIZATION_LEVEL) -o ./misctools/httpbench $(IO_FILES)  $(DEFAULT_LINKER_FLAGS) -lc $(MINIMUM_ARCHIVE_FILES)\n\trm -rf $(PACKAGE_DIR)/httpbench.o\n\n.PHONY: check-glibc-version-dependency\ncheck-glibc-version-dependency:\n\t@objdump -T $(RELEASE_BUN) | ((grep -qe \"GLIBC_2.3[0-9]\") && { echo \"Glibc 2.3X detected, this will break the binary\"; exit 1; }) || true\n\nifeq ($(OS_NAME),darwin)\n\nzig-win32:\n\t$(ZIG) build -Dtarget=x86_64-windows\n\n# Hardened runtime will not work with debugging\nbun-codesign-debug:\n\tcodesign --entitlements $(realpath entitlements.debug.plist) --force --timestamp --sign \"$(CODESIGN_IDENTITY)\" -vvvv --deep --strict $(DEBUG_BUN)\n\nbun-codesign-release-local:\n\tcodesign --entitlements $(realpath entitlements.plist) --options runtime --force --timestamp --sign \"$(CODESIGN_IDENTITY)\" -vvvv --deep --strict $(RELEASE_BUN)\n\tcodesign --entitlements $(realpath entitlements.plist) --options runtime --force --timestamp --sign \"$(CODESIGN_IDENTITY)\" -vvvv --deep --strict $(PACKAGE_DIR)/bun-profile\n\nbun-codesign-release-local-debug:\n\tcodesign --entitlements $(realpath entitlements.debug.plist) --options runtime --force --timestamp --sign \"$(CODESIGN_IDENTITY)\" -vvvv --deep --strict $(RELEASE_BUN)\n\tcodesign --entitlements $(realpath entitlements.debug.plist) --options runtime --force --timestamp --sign \"$(CODESIGN_IDENTITY)\" -vvvv --deep --strict $(PACKAGE_DIR)/bun-profile\n\n\nendif\n\nbun-codesign-debug:\nbun-codesign-release-local:\nbun-codesign-release-local-debug:\n\n\n.PHONY: jsc\njsc: jsc-build jsc-copy-headers jsc-bindings\n.PHONY: jsc-debug\njsc-debug: jsc-build-debug\n.PHONY: jsc-build\njsc-build: $(JSC_BUILD_STEPS)\n.PHONY: jsc-build-debug\njsc-build-debug: $(JSC_BUILD_STEPS_DEBUG)\n.PHONY: jsc-bindings\njsc-bindings: headers bindings\n\n.PHONY: clone-submodules\nclone-submodules:\n\tgit -c submodule.\"vendor/WebKit\".update=none submodule update --init --recursive --depth=1 --progress\n\n\n.PHONY: headers\nheaders:\n\techo please don't run the headers generator anymore. i don't think it works. \n\techo if you really need it, run make headers2\nheaders2: \n\trm -f /tmp/build-jsc-headers src/bun.js/bindings/headers.zig\n\ttouch src/bun.js/bindings/headers.zig\n\t$(ZIG) build headers-obj\n\t$(CXX) $(PLATFORM_LINKER_FLAGS) $(JSC_FILES_DEBUG) ${ICU_FLAGS} $(BUN_LLD_FLAGS_WITHOUT_JSC)  -g $(DEBUG_BIN)/headers.o -W -o /tmp/build-jsc-headers -lc;\n\t/tmp/build-jsc-headers\n\t$(ZIG) translate-c src/bun.js/bindings/headers.h > src/bun.js/bindings/headers.zig\n\t$(BUN_OR_NODE) misctools/headers-cleaner.js\n\t$(ZIG) fmt src/bun.js/bindings/headers.zig\n\t$(CLANG_FORMAT) -i src/bun.js/bindings/ZigGeneratedCode.cpp\n\n.PHONY: jsc-bindings-headers\njsc-bindings-headers: headers\n\nMIMALLOC_OVERRIDE_FLAG ?=\n\n\nbump:\n\texpr 0.4.0 + 1 > build-id\n\n.PHONY: identifier-cache\nidentifier-cache:\n\t$(ZIG) run src/js_lexer/identifier_data.zig\n\ntag:\n\tgit tag $(BUN_BUILD_TAG)\n\tgit push --tags\n\tcd ../bun-releases-for-updater && echo $(BUN_BUILD_TAG) > bumper && git add bumper && git commit -m \"Update latest release\" && git tag $(BUN_BUILD_TAG) && git push\n\n.PHONY: prepare-release\nprepare-release: tag release-create\n\nrelease-create-auto-updater:\n\n.PHONY: release-create\nrelease-create:\n\tgh release create --title \"bun v$(PACKAGE_JSON_VERSION)\" \"$(BUN_BUILD_TAG)\"\n\tgh release create --repo=$(BUN_AUTO_UPDATER_REPO) --title \"bun v$(PACKAGE_JSON_VERSION)\" \"$(BUN_BUILD_TAG)\" -n \"See https://github.com/oven-sh/bun/releases/tag/$(BUN_BUILD_TAG) for release notes. Using the install script or bun upgrade is the recommended way to install bun. Join bun's Discord to get access https://bun.sh/discord\"\n\nrelease-bin-entitlements:\n\nrelease-bin-generate-zip:\nrelease-bin-codesign:\n\nifeq ($(OS_NAME),darwin)\n# Without this, JIT will fail on aarch64\n# strip will remove the entitlements.plist\n# which, in turn, will break JIT\nrelease-bin-entitlements:\n\tcodesign --entitlements $(realpath entitlements.plist) --options runtime --force --timestamp --sign \"$(CODESIGN_IDENTITY)\" -vvvv --deep --strict $(PACKAGE_DIR)/bun\n\tcodesign --entitlements $(realpath entitlements.plist) --options runtime --force --timestamp --sign \"$(CODESIGN_IDENTITY)\" -vvvv --deep --strict $(PACKAGE_DIR)/bun-profile\n\n\n# macOS expects a specific directory structure for the zip file\n# ditto lets us generate it similarly to right clicking \"Compress\" in Finder\n.PHONY: release-bin-generate-zip\nrelease-bin-generate-zip:\n\tdot_clean -vnm  $(BUN_DEPLOY_DIR)/bun-$(TRIPLET)\n\tcd $(BUN_DEPLOY_DIR)/bun-$(TRIPLET) && \\\n\t\tcodesign --entitlements $(realpath entitlements.plist) --options runtime --force --timestamp --sign \"$(CODESIGN_IDENTITY)\" -vvvv --deep --strict bun\n\tditto -ck --rsrc --sequesterRsrc --keepParent $(BUN_DEPLOY_DIR)/bun-$(TRIPLET) $(BUN_DEPLOY_ZIP)\n\n.PHONY: release-bin-codesign\nrelease-bin-codesign:\n\txcrun notarytool submit --wait $(BUN_DEPLOY_ZIP) --keychain-profile \"bun\"\n\nelse\n\n.PHONY: release-bin-generate-zip\nrelease-bin-generate-zip:\n\tcd $(BUN_DEPLOY_DIR)/ && zip -r bun-$(TRIPLET).zip bun-$(TRIPLET)\n\nendif\n\n\nBUN_DEPLOY_ZIP = $(BUN_DEPLOY_DIR)/bun-$(TRIPLET).zip\nBUN_DEPLOY_DSYM = $(BUN_DEPLOY_DIR)/bun-$(TRIPLET).dSYM.tar.gz\n\n\nifeq ($(OS_NAME),darwin)\n\n.PHONY: release-bin-generate-copy-dsym\nrelease-bin-generate-copy-dsym:\n\tcd $(shell dirname $(BUN_RELEASE_BIN)) && tar -czvf $(shell basename $(BUN_DEPLOY_DSYM)) $(shell basename $(BUN_RELEASE_BIN)).dSYM && \\\n\tmv $(shell basename $(BUN_DEPLOY_DSYM)) $(BUN_DEPLOY_DSYM)\n\nendif\n\nifeq ($(OS_NAME),linux)\nrelease-bin-generate-copy-dsym:\nendif\n\n.PHONY: release-bin-generate-copy\nrelease-bin-generate-copy:\n\trm -rf $(BUN_DEPLOY_DIR)/bun-$(TRIPLET) $(BUN_DEPLOY_ZIP)\n\tmkdir -p $(BUN_DEPLOY_DIR)/bun-$(TRIPLET)\n\tcp $(BUN_RELEASE_BIN) $(BUN_DEPLOY_DIR)/bun-$(TRIPLET)/bun\n\n.PHONY: release-bin-generate\nrelease-bin-generate: release-bin-generate-copy release-bin-generate-zip release-bin-generate-copy-dsym\n\n.PHONY: release-bin-check-version\nrelease-bin-check-version:\n\ttest $(shell eval $(BUN_RELEASE_BIN) --version) = $(PACKAGE_JSON_VERSION)\n\n.PHONY: release-bin-check\nrelease-bin-check: release-bin-check-version\n\nifeq ($(OS_NAME),linux)\n\n.PHONY: release-bin-check\nrelease-bin-check: release-bin-check-version\n# force it to run\n\t@make -B check-glibc-version-dependency\nendif\n\n.PHONY: release-bin-push-bin\nrelease-bin-push-bin:\n\tgh release upload $(BUN_BUILD_TAG) --clobber $(BUN_DEPLOY_ZIP)\n\tgh release upload $(BUN_BUILD_TAG) --clobber $(BUN_DEPLOY_ZIP) --repo $(BUN_AUTO_UPDATER_REPO)\n\n\nifeq ($(OS_NAME),darwin)\n.PHONY: release-bin-push-dsym\nrelease-bin-push-dsym:\n\tgh release upload $(BUN_BUILD_TAG) --clobber $(BUN_DEPLOY_DSYM)\n\tgh release upload $(BUN_BUILD_TAG) --clobber $(BUN_DEPLOY_DSYM) --repo $(BUN_AUTO_UPDATER_REPO)\nendif\n\nifeq ($(OS_NAME),linux)\nrelease-bin-push-dsym:\nendif\n\nTINYCC_DIR ?= $(realpath $(BUN_DEPS_DIR)/tinycc)\n\n.PHONY: release-bin-push\nrelease-bin-push: release-bin-push-bin release-bin-push-dsym\n.PHONY: generate-release-bin-as-zip\ngenerate-release-bin-as-zip: release-bin-generate release-bin-codesign\n.PHONY: release-bin-without-push\nrelease-bin-without-push: test-all release-bin-check generate-release-bin-as-zip\n\n.PHONY: release-bin\nrelease-bin: release-bin-without-push release-bin-push\n\ntest/wiptest/run.o: test/wiptest/run.cpp\n\t$(CXX) -Wall -g -c -std=c++2a -lc -o test/wiptest/run.o test/wiptest/run.cpp\n\ntest/wiptest/run: test/wiptest/run.o\n\t$(CXX) -Wall -g -o test/wiptest/run test/wiptest/run.o\n\nrelease-bin-dir:\n\techo $(PACKAGE_DIR)\n\n\n.PHONY: dev-obj-track\ndev-obj-track:\n\tbun .scripts/make-dev-timer.ts $(ZIG) build obj -freference-trace -Dcpu=\"$(CPU_TARGET)\"\n\n.PHONY: dev-obj-notrack\ndev-obj-notrack:\n\t$(ZIG) build obj -freference-trace -Dcpu=\"$(CPU_TARGET)\"\n\n\n.PHONY: dev-obj\ndev-obj:\n\nifeq ($(shell which bun),)\ndev-obj : dev-obj-notrack\nelse\ndev-obj : dev-obj-track\nendif\n\n\n.PHONY: dev-obj-linux\ndev-obj-linux:\n\t$(ZIG) build obj -Dtarget=x86_64-linux-gnu -Dcpu=\"$(CPU_TARGET)\"\n\nmkdir-dev:\n\tmkdir -p $(DEBUG_PACKAGE_DIR)\n\ntest-all:\n\t$(RELEASE_BUN) test\n\n.PHONY: copy-test-node-modules\ncopy-test-node-modules:\n\trm -rf test/snippets/package-json-exports/node_modules || echo \"\";\n\tcp -r test/snippets/package-json-exports/_node_modules_copy test/snippets/package-json-exports/node_modules || echo \"\";\n\n.PHONY: kill-bun\nkill-bun:\n\t-killall -9 bun bun-debug\n\njsc-copy-headers:\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/heap/WeakHandleOwner.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/WeakHandleOwner.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/LazyClassStructureInlines.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/LazyClassStructureInlines.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/LazyPropertyInlines.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/LazyPropertyInlines.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/JSTypedArrayViewPrototype.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSTypedArrayViewPrototype.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/JSTypedArrayPrototypes.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSTypedArrayPrototypes.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/JSModuleNamespaceObject.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSModuleNamespaceObject.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JIT.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JIT.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/StructureStubInfo.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/StructureStubInfo.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/AccessCase.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/AccessCase.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/ObjectPropertyConditionSet.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/ObjectPropertyConditionSet.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/PolyProtoAccessChain.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/PolyProtoAccessChain.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/InlineCacheCompiler.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/InlineCacheCompiler.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/StructureStubClearingWatchpoint.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/StructureStubClearingWatchpoint.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/AdaptiveInferredPropertyValueWatchpointBase.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/AdaptiveInferredPropertyValueWatchpointBase.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/StubInfoSummary.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/StubInfoSummary.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/CommonSlowPaths.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/CommonSlowPaths.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/DirectArguments.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/DirectArguments.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/GenericArguments.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/GenericArguments.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/SamplingProfiler.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/SamplingProfiler.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/ScopedArguments.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/ScopedArguments.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/JSLexicalEnvironment.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSLexicalEnvironment.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITDisassembler.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITDisassembler.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITInlineCacheGenerator.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITInlineCacheGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITMathIC.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITMathIC.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITAddGenerator.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITAddGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITMathICInlineResult.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITMathICInlineResult.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/SnippetOperand.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/SnippetOperand.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITMulGenerator.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITMulGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITNegGenerator.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITNegGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITSubGenerator.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITSubGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/Repatch.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/Repatch.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITRightShiftGenerator.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITRightShiftGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITBitBinaryOpGenerator.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITBitBinaryOpGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JSInterfaceJIT.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSInterfaceJIT.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/llint/LLIntData.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/LLIntData.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/FunctionCodeBlock.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/FunctionCodeBlock.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/dfg/DFGAbstractHeap.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/DFGAbstractHeap.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/OperandsInlines.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/OperandsInlines.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/Operands.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/Operands.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/domjit/DOMJITHeapRange.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/DOMJITHeapRange.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/GeneratorPrototype.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/GeneratorPrototype.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/GeneratorFunctionPrototype.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/GeneratorFunctionPrototype.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/AsyncFunctionPrototype.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/AsyncFunctionPrototype.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/SymbolObject.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/SymbolObject.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/JSGenerator.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/UnlinkedFunctionCodeBlock.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/UnlinkedFunctionCodeBlock.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/AggregateError.h $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/AggregateError.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/API/JSWeakValue.h  $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSWeakValue.h\n\tfind $(WEBKIT_RELEASE_DIR)/JavaScriptCore/Headers/JavaScriptCore/ -name \"*.h\" -exec cp {} $(WEBKIT_RELEASE_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/ \\;\n\njsc-copy-headers-debug:\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/heap/WeakHandleOwner.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/WeakHandleOwner.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/LazyClassStructureInlines.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/LazyClassStructureInlines.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/LazyPropertyInlines.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/LazyPropertyInlines.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/JSTypedArrayViewPrototype.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSTypedArrayViewPrototype.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/JSTypedArrayPrototypes.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSTypedArrayPrototypes.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/JSModuleNamespaceObject.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSModuleNamespaceObject.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JIT.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JIT.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/StructureStubInfo.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/StructureStubInfo.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/AccessCase.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/AccessCase.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/ObjectPropertyConditionSet.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/ObjectPropertyConditionSet.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/PolyProtoAccessChain.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/PolyProtoAccessChain.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/InlineCacheCompiler.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/InlineCacheCompiler.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/StructureStubClearingWatchpoint.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/StructureStubClearingWatchpoint.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/AdaptiveInferredPropertyValueWatchpointBase.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/AdaptiveInferredPropertyValueWatchpointBase.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/StubInfoSummary.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/StubInfoSummary.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/CommonSlowPaths.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/CommonSlowPaths.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/DirectArguments.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/DirectArguments.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/GenericArguments.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/GenericArguments.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/SamplingProfiler.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/SamplingProfiler.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/ScopedArguments.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/ScopedArguments.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/JSLexicalEnvironment.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSLexicalEnvironment.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITDisassembler.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITDisassembler.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITInlineCacheGenerator.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITInlineCacheGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITMathIC.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITMathIC.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITAddGenerator.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITAddGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITMathICInlineResult.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITMathICInlineResult.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/SnippetOperand.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/SnippetOperand.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITMulGenerator.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITMulGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITNegGenerator.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITNegGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITSubGenerator.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITSubGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/Repatch.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/Repatch.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITRightShiftGenerator.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITRightShiftGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JITBitBinaryOpGenerator.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JITBitBinaryOpGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/jit/JSInterfaceJIT.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSInterfaceJIT.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/llint/LLIntData.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/LLIntData.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/FunctionCodeBlock.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/FunctionCodeBlock.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/dfg/DFGAbstractHeap.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/DFGAbstractHeap.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/OperandsInlines.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/OperandsInlines.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/Operands.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/Operands.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/domjit/DOMJITHeapRange.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/DOMJITHeapRange.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/GeneratorPrototype.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/GeneratorPrototype.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/GeneratorFunctionPrototype.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/GeneratorFunctionPrototype.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/AsyncFunctionPrototype.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/AsyncFunctionPrototype.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/SymbolObject.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/SymbolObject.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/JSGenerator.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSGenerator.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/bytecode/UnlinkedFunctionCodeBlock.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/UnlinkedFunctionCodeBlock.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/runtime/AggregateError.h $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/AggregateError.h\n\tcp $(WEBKIT_DIR)/Source/JavaScriptCore/API/JSWeakValue.h  $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/JSWeakValue.h\n\tfind $(WEBKIT_DEBUG_DIR)/JavaScriptCore/Headers/JavaScriptCore/ -name \"*.h\" -exec cp {} $(WEBKIT_DEBUG_DIR)/JavaScriptCore/PrivateHeaders/JavaScriptCore/ \\;\n\n# This is a workaround for a JSC bug that impacts aarch64\n# on macOS, it never requests JIT permissions\n.PHONY: jsc-force-fastjit\njsc-force-fastjit:\n\t$(SED) -i \"s/USE(PTHREAD_JIT_PERMISSIONS_API)/CPU(ARM64)/g\" $(WEBKIT_DIR)/Source/JavaScriptCore/jit/ExecutableAllocator.h\n\t$(SED) -i \"s/USE(PTHREAD_JIT_PERMISSIONS_API)/CPU(ARM64)/g\" $(WEBKIT_DIR)/Source/JavaScriptCore/assembler/FastJITPermissions.h\n\t$(SED) -i \"s/USE(PTHREAD_JIT_PERMISSIONS_API)/CPU(ARM64)/g\" $(WEBKIT_DIR)/Source/JavaScriptCore/jit/ExecutableAllocator.cpp\n\n.PHONY: jsc-build-mac-compile\njsc-build-mac-compile:\n\tmkdir -p $(WEBKIT_RELEASE_DIR) $(WEBKIT_DIR);\n\tcd $(WEBKIT_RELEASE_DIR) && \\\n\t\tICU_INCLUDE_DIRS=\"$(HOMEBREW_PREFIX)opt/icu4c/include\" \\\n\t\tcmake \\\n\t\t\t-DPORT=\"JSCOnly\" \\\n\t\t\t-DENABLE_STATIC_JSC=ON \\\n\t\t\t-DENABLE_SINGLE_THREADED_VM_ENTRY_SCOPE=ON \\\n\t\t\t-DALLOW_LINE_AND_COLUMN_NUMBER_IN_BUILTINS=ON \\\n\t\t\t-DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n\t\t\t-DUSE_THIN_ARCHIVES=OFF \\\n\t\t\t-DBUN_FAST_TLS=ON \\\n\t\t\t-DENABLE_FTL_JIT=ON \\\n\t\t\t-DUSE_BUN_JSC_ADDITIONS=ON \\\n\t\t\t-G Ninja \\\n\t\t\t$(CMAKE_FLAGS_WITHOUT_RELEASE) \\\n\t\t\t-DPTHREAD_JIT_PERMISSIONS_API=1 \\\n\t\t\t-DUSE_PTHREAD_JIT_PERMISSIONS_API=ON \\\n\t\t\t$(WEBKIT_DIR) \\\n\t\t\t$(WEBKIT_RELEASE_DIR) && \\\n\tCFLAGS=\"$(CFLAGS) -ffat-lto-objects\" CXXFLAGS=\"$(CXXFLAGS)  -ffat-lto-objects\" \\\n\t\tcmake --build $(WEBKIT_RELEASE_DIR) --config RelWithDebInfo --target jsc\n\n.PHONY: jsc-build-mac-compile-lto\njsc-build-mac-compile-lto:\n\tmkdir -p $(WEBKIT_RELEASE_DIR_LTO) $(WEBKIT_DIR);\n\tcd $(WEBKIT_RELEASE_DIR_LTO) && \\\n\t\tICU_INCLUDE_DIRS=\"$(HOMEBREW_PREFIX)opt/icu4c/include\" \\\n\t\tcmake \\\n\t\t\t-DPORT=\"JSCOnly\" \\\n\t\t\t-DENABLE_STATIC_JSC=ON \\\n\t\t\t-DENABLE_SINGLE_THREADED_VM_ENTRY_SCOPE=ON \\\n\t\t\t-DALLOW_LINE_AND_COLUMN_NUMBER_IN_BUILTINS=ON \\\n\t\t\t-DCMAKE_BUILD_TYPE=Release \\\n\t\t\t-DUSE_THIN_ARCHIVES=OFF \\\n\t\t\t-DBUN_FAST_TLS=ON \\\n\t\t\t-DUSE_BUN_JSC_ADDITIONS=ON \\\n\t\t\t-DCMAKE_C_FLAGS=\"-flto=full\" \\\n\t\t\t-DCMAKE_CXX_FLAGS=\"-flto=full\" \\\n\t\t\t-DENABLE_FTL_JIT=ON \\\n\t\t\t-G Ninja \\\n\t\t\t$(CMAKE_FLAGS_WITHOUT_RELEASE) \\\n\t\t\t-DPTHREAD_JIT_PERMISSIONS_API=1 \\\n\t\t\t-DUSE_PTHREAD_JIT_PERMISSIONS_API=ON \\\n\t\t\t$(WEBKIT_DIR) \\\n\t\t\t$(WEBKIT_RELEASE_DIR_LTO) && \\\n\tCFLAGS=\"$(CFLAGS) -ffat-lto-objects\" CXXFLAGS=\"$(CXXFLAGS) -ffat-lto-objects\" \\\n\t\tcmake --build $(WEBKIT_RELEASE_DIR_LTO) --config Release --target jsc\n\n.PHONY: jsc-build-mac-compile-debug\njsc-build-mac-compile-debug:\n\tmkdir -p $(WEBKIT_DEBUG_DIR) $(WEBKIT_DIR);\n\tcd $(WEBKIT_DEBUG_DIR) && \\\n\t\tICU_INCLUDE_DIRS=\"$(HOMEBREW_PREFIX)opt/icu4c/include\" \\\n\t\tcmake \\\n\t\t\t-DPORT=\"JSCOnly\" \\\n\t\t\t-DENABLE_STATIC_JSC=ON \\\n\t\t\t-DCMAKE_BUILD_TYPE=Debug \\\n\t\t\t-DUSE_THIN_ARCHIVES=OFF \\\n\t\t\t-DENABLE_FTL_JIT=ON \\\n\t\t\t-DENABLE_MALLOC_HEAP_BREAKDOWN=ON \\\n\t\t\t-DCMAKE_EXPORT_COMPILE_COMMANDS=ON \\\n\t\t\t-DUSE_BUN_JSC_ADDITIONS=ON \\\n\t\t\t-DENABLE_BUN_SKIP_FAILING_ASSERTIONS=ON \\\n\t\t\t-DALLOW_LINE_AND_COLUMN_NUMBER_IN_BUILTINS=ON \\\n\t\t\t-G Ninja \\\n\t\t\t$(CMAKE_FLAGS_WITHOUT_RELEASE) \\\n\t\t\t-DPTHREAD_JIT_PERMISSIONS_API=1 \\\n\t\t\t-DUSE_PTHREAD_JIT_PERMISSIONS_API=ON \\\n\t\t\t-DENABLE_REMOTE_INSPECTOR=ON \\\n\t\t\t-DUSE_VISIBILITY_ATTRIBUTE=1 \\\n\t\t\t$(WEBKIT_DIR) \\\n\t\t\t$(WEBKIT_DEBUG_DIR) && \\\n\tCFLAGS=\"$(CFLAGS) -ffat-lto-objects\" CXXFLAGS=\"$(CXXFLAGS) -ffat-lto-objects\" \\\n\t\tcmake --build $(WEBKIT_DEBUG_DIR) --config Debug --target jsc\n\n.PHONY: jsc-build-linux-compile-config\njsc-build-linux-compile-config:\n\tmkdir -p $(WEBKIT_RELEASE_DIR)\n\tcd $(WEBKIT_RELEASE_DIR) && \\\n\t\tcmake \\\n\t\t\t-DPORT=\"JSCOnly\" \\\n\t\t\t-DENABLE_STATIC_JSC=ON \\\n\t\t\t-DCMAKE_BUILD_TYPE=Debug \\\n\t\t\t-DENABLE_BUN_SKIP_FAILING_ASSERTIONS=ON \\\n\t\t\t-DUSE_THIN_ARCHIVES=OFF \\\n\t\t\t-DUSE_BUN_JSC_ADDITIONS=ON \\\n\t\t\t-DENABLE_FTL_JIT=ON \\\n\t\t\t-DENABLE_REMOTE_INSPECTOR=ON \\\n\t\t\t-DJSEXPORT_PRIVATE=WTF_EXPORT_DECLARATION \\\n\t\t\t-DALLOW_LINE_AND_COLUMN_NUMBER_IN_BUILTINS=ON \\\n\t\t\t-USE_VISIBILITY_ATTRIBUTE=1 \\\n\t\t\t-DCMAKE_EXPORT_COMPILE_COMMANDS=ON \\\n\t\t\t-G Ninja \\\n\t\t\t-DCMAKE_CXX_COMPILER=$(CXX) \\\n\t\t\t-DCMAKE_C_COMPILER=$(CC) \\\n\t\t\t$(WEBKIT_DIR) \\\n\t\t\t$(WEBKIT_RELEASE_DIR)\n\n.PHONY: jsc-build-linux-compile-config-debug\njsc-build-linux-compile-config-debug:\n\tmkdir -p $(WEBKIT_DEBUG_DIR)\n\tcd $(WEBKIT_DEBUG_DIR) && \\\n\t\tcmake \\\n\t\t\t-DPORT=\"JSCOnly\" \\\n\t\t\t-DENABLE_STATIC_JSC=ON \\\n\t\t\t-DCMAKE_BUILD_TYPE=Debug \\\n\t\t\t-DENABLE_BUN_SKIP_FAILING_ASSERTIONS=ON \\\n\t\t\t-DUSE_THIN_ARCHIVES=OFF \\\n\t\t\t-DUSE_BUN_JSC_ADDITIONS=ON \\\n\t\t\t-DENABLE_FTL_JIT=ON \\\n\t\t\t-DENABLE_REMOTE_INSPECTOR=ON \\\n\t\t\t-DJSEXPORT_PRIVATE=WTF_EXPORT_DECLARATION \\\n\t\t\t-DALLOW_LINE_AND_COLUMN_NUMBER_IN_BUILTINS=ON \\\n\t\t\t-USE_VISIBILITY_ATTRIBUTE=1 \\\n\t\t\t-DCMAKE_EXPORT_COMPILE_COMMANDS=ON \\\n\t\t\t-G Ninja \\\n\t\t\t-DCMAKE_CXX_COMPILER=$(CXX) \\\n\t\t\t-DCMAKE_C_COMPILER=$(CC) \\\n\t\t\t$(WEBKIT_DIR) \\\n\t\t\t$(WEBKIT_DEBUG_DIR)\n\n# If you get \"Error: could not load cache\"\n# run  rm -rf vendor/WebKit/CMakeCache.txt\n.PHONY: jsc-build-linux-compile-build\njsc-build-linux-compile-build:\n\t\tmkdir -p $(WEBKIT_RELEASE_DIR)  && \\\n\t\tcd $(WEBKIT_RELEASE_DIR)  && \\\n\tCFLAGS=\"$(CFLAGS) -Wl,--whole-archive -ffat-lto-objects\" CXXFLAGS=\"$(CXXFLAGS) -Wl,--whole-archive -ffat-lto-objects -DUSE_BUN_JSC_ADDITIONS=ON\" \\\n\t\tcmake --build $(WEBKIT_RELEASE_DIR) --config relwithdebuginfo --target jsc\n\n.PHONY: jsc-build-linux-compile-build-debug\njsc-build-linux-compile-build-debug:\n\t\tmkdir -p $(WEBKIT_DEBUG_DIR)  && \\\n\t\tcd $(WEBKIT_DEBUG_DIR)  && \\\n\tCFLAGS=\"$(CFLAGS) -Wl,--whole-archive -ffat-lto-objects\" CXXFLAGS=\"$(CXXFLAGS) -Wl,--whole-archive -ffat-lto-objects -DUSE_BUN_JSC_ADDITIONS=ON\" \\\n\t\tcmake --build $(WEBKIT_DEBUG_DIR) --config Debug --target jsc\n\n\njsc-build-mac: jsc-force-fastjit jsc-build-mac-compile jsc-build-copy\njsc-build-mac-debug: jsc-force-fastjit jsc-build-mac-compile-debug\n\njsc-build-linux: jsc-build-linux-compile-config jsc-build-linux-compile-build jsc-build-copy\njsc-build-linux-debug: jsc-build-linux-compile-config-debug jsc-build-linux-compile-build-debug\n\njsc-build-copy:\n\tcp $(WEBKIT_RELEASE_DIR)/lib/libJavaScriptCore.a $(BUN_DEPS_OUT_DIR)/libJavaScriptCore.a\n\t#cp $(WEBKIT_RELEASE_DIR)/lib/libLowLevelInterpreterLib.a $(BUN_DEPS_OUT_DIR)/libLowLevelInterpreterLib.a\n\tcp $(WEBKIT_RELEASE_DIR)/lib/libWTF.a $(BUN_DEPS_OUT_DIR)/libWTF.a\n\tcp $(WEBKIT_RELEASE_DIR)/lib/libbmalloc.a $(BUN_DEPS_OUT_DIR)/libbmalloc.a\n\njsc-build-copy-debug:\n\tcp $(WEBKIT_DEBUG_DIR)/lib/libJavaScriptCore.a $(BUN_DEPS_OUT_DIR)/libJavaScriptCore.a\n\t#cp $(WEBKIT_DEBUG_DIR)/lib/libLowLevelInterpreterLib.a $(BUN_DEPS_OUT_DIR)/libLowLevelInterpreterLib.a\n\tcp $(WEBKIT_DEBUG_DIR)/lib/libWTF.a $(BUN_DEPS_OUT_DIR)/libWTF.a\n\tcp $(WEBKIT_DEBUG_DIR)/lib/libbmalloc.a $(BUN_DEPS_OUT_DIR)/libbmalloc.a\n\nclean-jsc:\n\tcd vendor/WebKit && rm -rf **/CMakeCache.txt **/CMakeFiles && rm -rf vendor/WebKit/WebKitBuild\nclean-bindings:\n\trm -rf $(OBJ_DIR)/*.o $(DEBUG_OBJ_DIR)/*.o $(DEBUG_OBJ_DIR)/webcore/*.o $(DEBUG_BINDINGS_OBJ) $(OBJ_DIR)/webcore/*.o $(BINDINGS_OBJ) $(OBJ_DIR)/*.d $(DEBUG_OBJ_DIR)/*.d\n\n.PHONY: clean\nclean: clean-bindings\n\trm $(BUN_DEPS_DIR)/*.a $(BUN_DEPS_DIR)/*.o\n\t(cd $(BUN_DEPS_DIR)/mimalloc && make clean) || echo \"\";\n\t(cd $(BUN_DEPS_DIR)/libarchive && make clean) || echo \"\";\n\t(cd $(BUN_DEPS_DIR)/boringssl && make clean) || echo \"\";\n\t(cd $(BUN_DEPS_DIR)/picohttp && make clean) || echo \"\";\n\t(cd $(BUN_DEPS_DIR)/zlib && make clean) || echo \"\";\n\t(cd $(BUN_DEPS_DIR)/c-ares && rm -rf build && make clean) || echo \"\";\n\n.PHONY: release-bindings\nrelease-bindings: $(OBJ_DIR) $(OBJ_FILES) $(WEBCORE_OBJ_FILES) $(SQLITE_OBJ_FILES) $(NODE_OS_OBJ_FILES) $(BUILTINS_OBJ_FILES) $(IO_FILES) $(MODULES_OBJ_FILES) $(WEBCRYPTO_OBJ_FILES)\n\n# Do not add $(DEBUG_DIR) to this list\n# It will break caching, causing you to have to wait for every .cpp file to rebuild.\n.PHONY: bindings\nbindings-real: $(DEBUG_OBJ_DIR) $(DEBUG_OBJ_FILES) $(DEBUG_WEBCORE_OBJ_FILES) $(DEBUG_SQLITE_OBJ_FILES) $(DEBUG_NODE_OS_OBJ_FILES) $(DEBUG_BUILTINS_OBJ_FILES) $(DEBUG_IO_FILES) $(DEBUG_MODULES_OBJ_FILES) $(DEBUG_WEBCRYPTO_OBJ_FILES)\n\n.PHONY: jsc-bindings-mac\njsc-bindings-mac: bindings\n\n# lInux only\nMIMALLOC_VALGRIND_ENABLED_FLAG =\n\nifeq ($(OS_NAME),linux)\n\tMIMALLOC_VALGRIND_ENABLED_FLAG = -DMI_TRACK_VALGRIND=ON\nendif\n\n\n.PHONY: mimalloc-debug\nmimalloc-debug:\n\trm -rf $(BUN_DEPS_DIR)/mimalloc/CMakeCache* $(BUN_DEPS_DIR)/mimalloc/CMakeFiles\n\tcd $(BUN_DEPS_DIR)/mimalloc; make clean || echo \"\"; \\\n\t\tCFLAGS=\"$(CFLAGS)\" cmake $(CMAKE_FLAGS_WITHOUT_RELEASE) ${MIMALLOC_OVERRIDE_FLAG} ${MIMALLOC_VALGRIND_ENABLED_FLAG} \\\n\t\t\t-DCMAKE_BUILD_TYPE=Debug \\\n\t\t\t-DMI_DEBUG_FULL=1 \\\n\t\t\t-DMI_SKIP_COLLECT_ON_EXIT=1 \\\n\t\t\t-DMI_BUILD_SHARED=OFF \\\n\t\t\t-DMI_BUILD_STATIC=ON \\\n\t\t\t-DMI_BUILD_TESTS=OFF \\\n\t\t\t-DMI_OSX_ZONE=OFF \\\n\t\t\t-DMI_OSX_INTERPOSE=OFF \\\n\t\t\t-DMI_BUILD_OBJECT=ON \\\n\t\t\t-DMI_USE_CXX=ON \\\n\t\t\t-DMI_OVERRIDE=OFF \\\n\t\t\t-DCMAKE_C_FLAGS=\"$(CFLAGS)\" \\\n\t\t\t-DCMAKE_CXX_FLAGS=\"$(CFLAGS)\" \\\n\t\t\t-GNinja \\\n\t\t\t. \\\n\t\t\t&& ninja\n\tcp $(BUN_DEPS_DIR)/mimalloc/$(_MIMALLOC_DEBUG_FILE) $(BUN_DEPS_OUT_DIR)/$(_MIMALLOC_DEBUG_FILE)\n\n\n# mimalloc is built as object files so that it can overload the system malloc on linux\n# on macOS, OSX_INTERPOSE and OSX_ZONE do not work correctly.\n# More precisely, they cause assertion failures and occasional segfaults\nmimalloc:\n\trm -rf $(BUN_DEPS_DIR)/mimalloc/CMakeCache* $(BUN_DEPS_DIR)/mimalloc/CMakeFiles\n\tcd $(BUN_DEPS_DIR)/mimalloc; \\\n\t\tCFLAGS=\"$(CFLAGS)\" cmake $(CMAKE_FLAGS) \\\n\t\t\t-DMI_SKIP_COLLECT_ON_EXIT=1 \\\n\t\t\t-DMI_BUILD_SHARED=OFF \\\n\t\t\t-DMI_BUILD_STATIC=ON \\\n\t\t\t-DMI_BUILD_TESTS=OFF \\\n\t\t\t-DMI_OSX_ZONE=OFF \\\n\t\t\t-DMI_OSX_INTERPOSE=OFF \\\n\t\t\t-DMI_BUILD_OBJECT=ON \\\n\t\t\t-DMI_USE_CXX=ON \\\n\t\t\t-DMI_OVERRIDE=OFF \\\n\t\t\t-DMI_OSX_ZONE=OFF \\\n\t\t\t-DCMAKE_C_FLAGS=\"$(CFLAGS)\" \\\n\t\t\t-GNinja \\\n\t\t\t . \\\n\t\t\t&& ninja;\n\tcp $(BUN_DEPS_DIR)/mimalloc/$(MIMALLOC_INPUT_PATH) $(BUN_DEPS_OUT_DIR)/$(MIMALLOC_FILE)\n\n\nmimalloc-wasm:\n\trm -rf $(BUN_DEPS_DIR)/mimalloc/CMakeCache* $(BUN_DEPS_DIR)/mimalloc/CMakeFiles\n\tcd $(BUN_DEPS_DIR)/mimalloc; emcmake cmake -DMI_BUILD_SHARED=OFF -DMI_BUILD_STATIC=ON -DMI_BUILD_TESTS=OFF -GNinja -DMI_BUILD_OBJECT=ON ${MIMALLOC_OVERRIDE_FLAG} -DMI_USE_CXX=OFF .; emmake cmake --build .;\n\tcp $(BUN_DEPS_DIR)/mimalloc/$(MIMALLOC_INPUT_PATH) $(BUN_DEPS_OUT_DIR)/$(MIMALLOC_FILE).wasm\n\n# alias for link, incase anyone still types that\n.PHONY: bun-link-lld-debug\nbun-link-lld-debug: link\n\n.PHONY: link\nlink: ## link a debug build of bun\n\t$(CXX) $(BUN_LLD_FLAGS_DEBUG) $(DEBUG_FLAGS) $(SYMBOLS) \\\n\t\t-g \\\n\t\t$(DEBUG_BIN)/bun-debug.o \\\n\t\t-W \\\n\t\t-o $(DEBUG_BIN)/bun-debug\n\t\t@rm -f $(DEBUG_BIN)/bun-debug.o.o 2> /dev/null # workaround for https://github.com/ziglang/zig/issues/14080\n\nlink-no-jsc:\n\t$(CXX) $(BUN_LLD_FLAGS_WITHOUT_JSC) $(SYMBOLS) \\\n\t\t-g \\\n\t\t$(DEBUG_BIN)/bun-debug.o \\\n\t\t-W \\\n\t\t-o $(DEBUG_BIN)/bun-debug\n\n\nbun-link-lld-release-no-jsc:\n\t$(CXX) $(BUN_LLD_FLAGS_WITHOUT_JSC) $(SYMBOLS) \\\n\t\t-g \\\n\t\t$(BUN_RELEASE_BIN).o \\\n\t\t-W \\\n\t\t-o $(BUN_RELEASE_BIN) -Wl,-undefined,dynamic_lookup -Wl,-why_load\n\nbun-relink-copy:\n\tmkdir -p $(PACKAGE_DIR)\n\tcp $(BUN_DEPLOY_DIR).o $(BUN_RELEASE_BIN).o\n\n.PHONY: bun-link-lld-profile profile\nbun-link-lld-profile:\n\t$(CXX) $(BUN_LLD_FLAGS) $(SYMBOLS) -g -gdwarf-4 -fno-omit-frame-pointer \\\n\t\t$(BUN_RELEASE_BIN).o \\\n\t\t-o $(BUN_RELEASE_BIN) \\\n\t\t-W \\\n\t\t$(OPTIMIZATION_LEVEL) $(RELEASE_FLAGS)\n\trm -rf $(BUN_RELEASE_BIN).dSYM\n\tcp $(BUN_RELEASE_BIN) $(BUN_RELEASE_BIN)-profile\n\t@rm -f $(BUN_RELEASE_BIN).o.o # workaround for https://github.com/ziglang/zig/issues/14080\n\nbuild-profile: build-obj bun-link-lld-profile bun-codesign-release-local\n\nbun-link-lld-release:\n\t$(CXX) $(BUN_LLD_FLAGS) $(SYMBOLS) \\\n\t\t$(BUN_RELEASE_BIN).o \\\n\t\t-o $(BUN_RELEASE_BIN) \\\n\t\t-W \\\n\t\t$(OPTIMIZATION_LEVEL) $(RELEASE_FLAGS)\n\trm -rf $(BUN_RELEASE_BIN).dSYM\n\tcp $(BUN_RELEASE_BIN) $(BUN_RELEASE_BIN)-profile\n\t@rm -f $(BUN_RELEASE_BIN).o.o # workaround for https://github.com/ziglang/zig/issues/14080\n\nbun-release-copy-obj:\n\tcp $(BUN_RELEASE_BIN).o $(BUN_DEPLOY_DIR).o\n\tcp $(BUN_RELEASE_BIN).o /tmp/bun-current.o\n\nbun-link-lld-release-no-lto:\n\t$(CXX) $(BUN_LLD_FLAGS_FAST) $(SYMBOLS) \\\n\t\t$(BUN_RELEASE_BIN).o \\\n\t\t-o $(BUN_RELEASE_BIN) \\\n\t\t-W \\\n\t\t$(OPTIMIZATION_LEVEL) $(RELEASE_FLAGS)\n\trm -rf $(BUN_RELEASE_BIN).dSYM\n\tcp $(BUN_RELEASE_BIN) $(BUN_RELEASE_BIN)-profile\n\n\nifeq ($(OS_NAME),darwin)\nbun-link-lld-release-dsym: bun-release-copy-obj\n\t$(DSYMUTIL) -o $(BUN_RELEASE_BIN).dSYM $(BUN_RELEASE_BIN)\n\t-$(STRIP) $(BUN_RELEASE_BIN)\n\ncopy-to-bun-release-dir-dsym:\n\tgzip --keep -c $(PACKAGE_DIR)/bun.dSYM > $(BUN_RELEASE_DIR)/bun.dSYM.gz\nendif\n\nifeq ($(OS_NAME),linux)\nbun-link-lld-release-dsym: bun-release-copy-obj\n\tmv $(BUN_RELEASE_BIN).o $(BUN_DEPLOY_DIR).o\n\t-$(STRIP) -s $(BUN_RELEASE_BIN) --wildcard -K _napi\\*\ncopy-to-bun-release-dir-dsym:\n\nendif\n\nbun-relink: bun-relink-copy bun-link-lld-release bun-link-lld-release-dsym\nbun-relink-fast: bun-relink-copy bun-link-lld-release-no-lto\n\nwasm-return1:\n\t$(ZIG) build-lib -OReleaseSmall test/bun.js/wasm-return-1-test.zig -femit-bin=test/bun.js/wasm-return-1-test.wasm -target wasm32-freestanding\n\ngenerate-classes:\n\tbun src/codegen/generate-classes.ts\n\t$(ZIG) fmt src/bun.js/bindings/generated_classes.zig\n\t$(CLANG_FORMAT) -i src/bun.js/bindings/ZigGeneratedClasses.h src/bun.js/bindings/ZigGeneratedClasses.cpp\n\ngenerate-sink:\n\tbun src/codegen/generate-jssink.js\n\t$(CLANG_FORMAT) -i  src/bun.js/bindings/JSSink.cpp  src/bun.js/bindings/JSSink.h\n\t./src/bun.js/scripts/create_hash_table src/bun.js/bindings/JSSink.cpp > src/bun.js/bindings/JSSinkLookupTable.h\n\t$(SED) -i -e 's/#include \"Lookup.h\"//' src/bun.js/bindings/JSSinkLookupTable.h\n\t$(SED) -i -e 's/namespace JSC {//' src/bun.js/bindings/JSSinkLookupTable.h\n\t$(SED) -i -e 's/} \\/\\/ namespace JSC//' src/bun.js/bindings/JSSinkLookupTable.h\n\ncodegen: generate-sink generate-classes\n\nEMIT_LLVM_FOR_RELEASE=-emit-llvm -flto=\"full\"\nEMIT_LLVM_FOR_DEBUG=\nEMIT_LLVM=$(EMIT_LLVM_FOR_RELEASE)\n\n# We do this outside of build.zig for performance reasons\n# The C compilation stuff with build.zig is really slow and we don't need to run this as often as the rest\n$(OBJ_DIR):\n\tmkdir -p $(OBJ_DIR)\n\n$(DEBUG_OBJ_DIR):\n\tmkdir -p $(DEBUG_OBJ_DIR)\n\n$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) $(UWS_INCLUDE) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(EMIT_LLVM) \\\n\t\t-c -o $@ $<\n\n$(OBJ_DIR)/%.o: src/bun.js/modules/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) $(UWS_INCLUDE) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(EMIT_LLVM) \\\n\t\t-c -o $@ $<\n\n$(OBJ_DIR)/%.o: $(SRC_DIR)/webcore/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(EMIT_LLVM) \\\n\t\t-c -o $@ $<\n\n$(OBJ_DIR)/%.o: $(SRC_DIR)/sqlite/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(EMIT_LLVM) \\\n\t\t-c -o $@ $<\n\n$(OBJ_DIR)/%.o: src/io/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(EMIT_LLVM) \\\n\t\t-c -o $@ $<\n\n$(OBJ_DIR)/%.o: $(SRC_DIR)/node_os/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(EMIT_LLVM) \\\n\t\t-c -o $@ $<\n\n$(OBJ_DIR)/%.o: src/js/out/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(EMIT_LLVM) \\\n\t\t-c -o $@ $<\n\n\n$(OBJ_DIR)/%.o: src/bun.js/bindings/webcrypto/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(EMIT_LLVM) \\\n\t\t-c -o $@ $<\n\n# $(DEBUG_OBJ_DIR) is not included here because it breaks\n# detecting if a file needs to be rebuilt\n.PHONY: $(SRC_DIR)/%.cpp\n$(DEBUG_OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) $(UWS_INCLUDE) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(DEBUG_OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t-DBUN_DEBUG \\\n\t\t$(EMIT_LLVM_FOR_DEBUG) \\\n\t\t-g3 -c -o $@ $<\n\n# $(DEBUG_OBJ_DIR) is not included here because it breaks\n# detecting if a file needs to be rebuilt\n.PHONY: $(SRC_DIR)/webcore/%.cpp\n$(DEBUG_OBJ_DIR)/%.o: $(SRC_DIR)/webcore/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(DEBUG_OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(EMIT_LLVM_FOR_DEBUG) \\\n\t\t-DBUN_DEBUG \\\n\t\t-g3 -c -o $@ $<\n\n.PHONY: src/io/%.cpp\n$(DEBUG_OBJ_DIR)/%.o: src/io/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(DEBUG_OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t-DBUN_DEBUG \\\n\t\t$(EMIT_LLVM_FOR_DEBUG) \\\n\t\t-g3 -c -o $@ $<\n\n\n# $(DEBUG_OBJ_DIR) is not included here because it breaks\n# detecting if a file needs to be rebuilt\n.PHONY: $(SRC_DIR)/sqlite/%.cpp\n$(DEBUG_OBJ_DIR)/%.o: $(SRC_DIR)/sqlite/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(DEBUG_OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(EMIT_LLVM_FOR_DEBUG) \\\n\t\t-DBUN_DEBUG \\\n\t\t-g3 -c -o $@ $<\n\n# $(DEBUG_OBJ_DIR) is not included here because it breaks\n# detecting if a file needs to be rebuilt\n.PHONY: $(SRC_DIR)/node_os/%.cpp\n$(DEBUG_OBJ_DIR)/%.o: $(SRC_DIR)/node_os/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(DEBUG_OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(EMIT_LLVM_FOR_DEBUG) \\\n\t\t-DBUN_DEBUG \\\n\t\t-g3 -c -o $@ $<\n\n# $(DEBUG_OBJ_DIR) is not included here because it breaks\n# detecting if a file needs to be rebuilt\n.PHONY: src/js/out/builtins/%.cpp\n$(DEBUG_OBJ_DIR)/%.o: src/js/out/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(DEBUG_OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(EMIT_LLVM_FOR_DEBUG) \\\n\t\t-DBUN_DEBUG \\\n\t\t-g3 -c -o $@ $<\n\n.PHONY: src/bun.js/modules/%.cpp\n$(DEBUG_OBJ_DIR)/%.o: src/bun.js/modules/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(DEBUG_OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(EMIT_LLVM_FOR_DEBUG) \\\n\t\t-DBUN_DEBUG \\\n\t\t-g3 -c -o $@ $<\n\n\n.PHONY: src/bun.js/bindings/webcrypto/%.cpp\n$(DEBUG_OBJ_DIR)/%.o: src/bun.js/bindings/webcrypto/%.cpp\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(DEBUG_OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-I$(SRC_DIR) \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(EMIT_LLVM_FOR_DEBUG) \\\n\t\t-DBUN_DEBUG \\\n\t\t-g3 -c -o $@ $<\n\nsizegen:\n\tmkdir -p $(BUN_TMP_DIR)\n\t$(CXX) src/bun.js/headergen/sizegen.cpp -Wl,-dead_strip -Wl,-dead_strip_dylibs -fuse-ld=lld -o $(BUN_TMP_DIR)/sizegen $(CLANG_FLAGS) -O1\n\t$(BUN_TMP_DIR)/sizegen > src/bun.js/bindings/sizes.zig\n\n\n# Linux uses bundled SQLite3\nifeq ($(OS_NAME),linux)\nsqlite:\n\t$(CC) $(EMIT_LLVM_FOR_RELEASE) $(CFLAGS) $(INCLUDE_DIRS) -DSQLITE_ENABLE_COLUMN_METADATA= -DSQLITE_MAX_VARIABLE_NUMBER=250000 -DSQLITE_ENABLE_RTREE=1 -DSQLITE_ENABLE_FTS3=1 -DSQLITE_ENABLE_FTS3_PARENTHESIS=1 -DSQLITE_ENABLE_FTS5=1 -DSQLITE_ENABLE_JSON1=1 -DSQLITE_ENABLE_MATH_FUNCTIONS=1 $(SRC_DIR)/sqlite/sqlite3.c -c -o $(SQLITE_OBJECT)\nendif\n\npicohttp:\n\t $(CC) $(CFLAGS) $(OPTIMIZATION_LEVEL) -g -fPIC -c $(BUN_DEPS_DIR)/picohttpparser/picohttpparser.c -I$(BUN_DEPS_DIR) -o $(BUN_DEPS_OUT_DIR)/picohttpparser.o; cd ../../\n\nanalytics:\n\t./node_modules/.bin/peechy --schema src/analytics/schema.peechy --zig src/analytics/analytics_schema.zig\n\t$(ZIG) fmt src/analytics/analytics_schema.zig\n\nanalytics-features:\n\t@cd misctools; $(ZIG) run --main-pkg-path ../ ./features.zig\n\nfind-unused-zig-files:\n\t@bash ./misctools/find-unused-zig.sh\n\ngenerate-unit-tests:\n\t@bash ./misctools/generate-test-file.sh\n\nfmt-all:\n\tfind src -name \"*.zig\" -exec $(ZIG) fmt {} \\;\n\nunit-tests: generate-unit-tests run-unit-tests\n\nifeq (test, $(firstword $(MAKECMDGOALS)))\ntestpath := $(firstword $(wordlist 2, $(words $(MAKECMDGOALS)), $(MAKECMDGOALS)))\ntestfilter := $(wordlist 3, $(words $(MAKECMDGOALS)), $(MAKECMDGOALS))\ntestbinpath := zig-out/bin/test\ntestbinpath := $(lastword $(testfilter))\n\nifeq ($(if $(patsubst /%,,$(testbinpath)),,yes),yes)\ntestfilterflag := --test-filter \"$(filter-out $(testbinpath), $(testfilter))\"\n\nendif\n\nifneq ($(if $(patsubst /%,,$(testbinpath)),,yes),yes)\ntestbinpath := zig-out/bin/test\nifneq ($(strip $(testfilter)),)\ntestfilterflag := --test-filter \"$(testfilter)\"\nendif\nendif\n\n  testname := $(shell basename $(testpath))\n\n\n  $(eval $(testname):;@true)\n\n  ifeq ($(words $(testfilter)), 0)\ntestfilterflag :=  --test-name-prefix \"$(testname): \"\nendif\n\nifeq ($(testfilterflag), undefined)\ntestfilterflag :=  --test-name-prefix \"$(testname): \"\nendif\n\n\nendif\n\nifeq (build-unit, $(firstword $(MAKECMDGOALS)))\ntestpath := $(firstword $(wordlist 2, $(words $(MAKECMDGOALS)), $(MAKECMDGOALS)))\ntestfilter := $(wordlist 3, $(words $(MAKECMDGOALS)), $(MAKECMDGOALS))\ntestbinpath := zig-out/bin/test\ntestbinpath := $(lastword $(testfilter))\n\nifeq ($(if $(patsubst /%,,$(testbinpath)),,yes),yes)\ntestfilterflag := --test-filter \"$(filter-out $(testbinpath), $(testfilter))\"\n\nendif\n\nifneq ($(if $(patsubst /%,,$(testbinpath)),,yes),yes)\ntestbinpath := zig-out/bin/test\nifneq ($(strip $(testfilter)),)\ntestfilterflag := --test-filter \"$(testfilter)\"\nendif\nendif\n\n  testname := $(shell basename $(testpath))\n\n\n$(eval $(testname):;@true)\n$(eval $(testfilter):;@true)\n$(eval $(testpath):;@true)\n\n  ifeq ($(words $(testfilter)), 0)\ntestfilterflag :=  --test-name-prefix \"$(testname): \"\nendif\n\nifeq ($(testfilterflag), undefined)\ntestfilterflag :=  --test-name-prefix \"$(testname): \"\nendif\n\n\n\nendif\n\n.PHONY: build-unit\nbuild-unit: # to build your unit tests\n\t@rm -rf zig-out/bin/$(testname)\n\t@mkdir -p zig-out/bin\n\t$(ZIG) test  $(realpath $(testpath)) \\\n\t$(testfilterflag) \\\n\t$(PACKAGE_MAP) \\\n\t--main-pkg-path $(BUN_DIR) \\\n\t--test-no-exec \\\n\t-fPIC \\\n\t-femit-bin=zig-out/bin/$(testname) \\\n\t-fcompiler-rt \\\n\t-lc -lc++ \\\n\t--cache-dir /tmp/zig-cache-bun-$(testname)-$(basename $(lastword $(testfilter))) \\\n\t-fallow-shlib-undefined \\\n\t && \\\n\tcp zig-out/bin/$(testname) $(testbinpath)\n\n.PHONY: run-all-unit-tests\nrun-all-unit-tests: # to run your unit tests\n\t@rm -rf zig-out/bin/__main_test\n\t@mkdir -p zig-out/bin\n\t$(ZIG) test src/main.zig \\\n\t$(PACKAGE_MAP) \\\n\t--main-pkg-path $(BUN_DIR) \\\n\t--test-no-exec \\\n\t-fPIC \\\n\t-femit-bin=zig-out/bin/__main_test \\\n\t-fcompiler-rt \\\n\t-lc -lc++ \\\n\t--cache-dir /tmp/zig-cache-bun-__main_test \\\n\t-fallow-shlib-undefined \\\n\t$(ARCHIVE_FILES) $(ICU_FLAGS) $(JSC_FILES) $(JSC_BINDINGS) && \\\n\tzig-out/bin/__main_test $(ZIG)\n\n.PHONY: run-unit\nrun-unit:\n\t@zig-out/bin/$(testname) $(ZIG)\n\n.PHONY: test\ntest: build-unit run-unit\n\n.PHONY: integration-test-dev\nintegration-test-dev: # to run integration tests\n\tUSE_EXISTING_PROCESS=true TEST_SERVER_URL=http://localhost:3000 node test/scripts/browser.js\n\ncopy-install:\n\tcp src/cli/install.sh ../bun.sh/docs/install.html\n\ncopy-to-bun-release-dir: copy-to-bun-release-dir-bin copy-to-bun-release-dir-dsym\n\ncopy-to-bun-release-dir-bin:\n\tcp -r $(PACKAGE_DIR)/bun $(BUN_RELEASE_DIR)/bun\n\tcp -r $(PACKAGE_DIR)/bun-profile $(BUN_RELEASE_DIR)/bun-profile\n\nPACKAGE_MAP = --pkg-begin async_io $(BUN_DIR)/src/io/io_darwin.zig --pkg-begin bun $(BUN_DIR)/src/bun_redirect.zig --pkg-end --pkg-end --pkg-begin javascript_core $(BUN_DIR)/src/jsc.zig --pkg-begin bun $(BUN_DIR)/src/bun_redirect.zig --pkg-end --pkg-end --pkg-begin bun $(BUN_DIR)/src/bun_redirect.zig --pkg-end\n\n.PHONY: cold-jsc-start\ncold-jsc-start:\n\t$(CXX_WITH_CCACHE) $(CLANG_FLAGS) \\\n\t\t$(MACOS_MIN_FLAG) \\\n\t\t$(OPTIMIZATION_LEVEL) \\\n\t\t${MMD_IF_LOCAL} \\\n\t\t-fno-exceptions \\\n\t\t-fno-rtti \\\n\t\t-ferror-limit=10 \\\n\t\t$(LIBICONV_PATH) \\\n\t\t$(DEFAULT_LINKER_FLAGS) \\\n\t\t$(PLATFORM_LINKER_FLAGS) \\\n\t\t$(ICU_FLAGS) \\\n\t\t$(JSC_FILES) \\\n\t\tmisctools/cold-jsc-start.cpp -o cold-jsc-start\n\n.PHONY: vendor-without-npm\nvendor-without-npm: node-fallbacks runtime_js fallback_decoder bun_error mimalloc picohttp zlib boringssl libarchive lolhtml sqlite usockets uws lshpack tinycc c-ares zstd\n\n\n.PHONY: vendor-without-check\nvendor-without-check: npm-install vendor-without-npm\n\n.PHONY: vendor\nvendor: assert-deps submodule vendor-without-check\n\n.PHONY: vendor-dev\nvendor-dev: assert-deps submodule npm-install-dev vendor-without-npm\n\n.PHONY: bun\nbun: \n\t@echo 'makefile is deprecated - use `cmake` / `bun run build`'\n\t@echo 'See https://bun.sh/docs/project/contributing for more details'\n\ncpp:\n\t@echo 'makefile is deprecated - use `cmake` / `bun run build`'\n\t@echo 'See https://bun.sh/docs/project/contributing for more details'\n\nzig:\n\t@echo 'makefile is deprecated - use `cmake` / `bun run build`'\n\t@echo 'See https://bun.sh/docs/project/contributing for more details'\n\ndev:\n\t@echo 'makefile is deprecated - use `cmake` / `bun run build`'\n\t@echo 'See https://bun.sh/docs/project/contributing for more details'\n\nsetup:\n\t@echo 'makefile is deprecated - use `cmake` / `bun run build`'\n\t@echo 'See https://bun.sh/docs/project/contributing for more details'\n\nbindings:\n\t@echo 'makefile is deprecated - use `cmake` / `bun run build`'\n\t@echo 'See https://bun.sh/docs/project/contributing for more details'\n\nhelp:\n\t@echo 'makefile is deprecated - use `cmake` / `bun run build`'\n\t@echo 'See https://bun.sh/docs/project/contributing for more details'\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.54,
          "content": "<p align=\"center\">\n  <a href=\"https://bun.sh\"><img src=\"https://github.com/user-attachments/assets/50282090-adfd-4ddb-9e27-c30753c6b161\" alt=\"Logo\" height=170></a>\n</p>\n<h1 align=\"center\">Bun</h1>\n\n<p align=\"center\">\n<a href=\"https://bun.sh/discord\" target=\"_blank\"><img height=20 src=\"https://img.shields.io/discord/876711213126520882\" /></a>\n<img src=\"https://img.shields.io/github/stars/oven-sh/bun\" alt=\"stars\">\n<a href=\"https://twitter.com/jarredsumner/status/1542824445810642946\"><img src=\"https://img.shields.io/static/v1?label=speed&message=fast&color=success\" alt=\"Bun speed\" /></a>\n</p>\n\n<div align=\"center\">\n  <a href=\"https://bun.sh/docs\">Documentation</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://discord.com/invite/CXdq2DP29u\">Discord</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://github.com/oven-sh/bun/issues/new\">Issues</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://github.com/oven-sh/bun/issues/159\">Roadmap</a>\n  <br />\n</div>\n\n### [Read the docs →](https://bun.sh/docs)\n\n## What is Bun?\n\nBun is an all-in-one toolkit for JavaScript and TypeScript apps. It ships as a single executable called `bun`.\n\nAt its core is the _Bun runtime_, a fast JavaScript runtime designed as a drop-in replacement for Node.js. It's written in Zig and powered by JavaScriptCore under the hood, dramatically reducing startup times and memory usage.\n\n```bash\nbun run index.tsx             # TS and JSX supported out-of-the-box\n```\n\nThe `bun` command-line tool also implements a test runner, script runner, and Node.js-compatible package manager. Instead of 1,000 node_modules for development, you only need `bun`. Bun's built-in tools are significantly faster than existing options and usable in existing Node.js projects with little to no changes.\n\n```bash\nbun test                      # run tests\nbun run start                 # run the `start` script in `package.json`\nbun install <pkg>             # install a package\nbunx cowsay 'Hello, world!'   # execute a package\n```\n\n## Install\n\nBun supports Linux (x64 & arm64), macOS (x64 & Apple Silicon) and Windows (x64).\n\n> **Linux users** — Kernel version 5.6 or higher is strongly recommended, but the minimum is 5.1.\n\n```sh\n# with install script (recommended)\ncurl -fsSL https://bun.sh/install | bash\n\n# on windows\npowershell -c \"irm bun.sh/install.ps1 | iex\"\n\n# with npm\nnpm install -g bun\n\n# with Homebrew\nbrew tap oven-sh/bun\nbrew install bun\n\n# with Docker\ndocker pull oven/bun\ndocker run --rm --init --ulimit memlock=-1:-1 oven/bun\n```\n\n### Upgrade\n\nTo upgrade to the latest version of Bun, run:\n\n```sh\nbun upgrade\n```\n\nBun automatically releases a canary build on every commit to `main`. To upgrade to the latest canary build, run:\n\n```sh\nbun upgrade --canary\n```\n\n[View canary build](https://github.com/oven-sh/bun/releases/tag/canary)\n\n## Quick links\n\n- Intro\n\n  - [What is Bun?](https://bun.sh/docs/index)\n  - [Installation](https://bun.sh/docs/installation)\n  - [Quickstart](https://bun.sh/docs/quickstart)\n  - [TypeScript](https://bun.sh/docs/typescript)\n\n- Templating\n\n  - [`bun init`](https://bun.sh/docs/cli/init)\n  - [`bun create`](https://bun.sh/docs/cli/bun-create)\n\n- Runtime\n\n  - [`bun run`](https://bun.sh/docs/cli/run)\n  - [File types](https://bun.sh/docs/runtime/loaders)\n  - [TypeScript](https://bun.sh/docs/runtime/typescript)\n  - [JSX](https://bun.sh/docs/runtime/jsx)\n  - [Environment variables](https://bun.sh/docs/runtime/env)\n  - [Bun APIs](https://bun.sh/docs/runtime/bun-apis)\n  - [Web APIs](https://bun.sh/docs/runtime/web-apis)\n  - [Node.js compatibility](https://bun.sh/docs/runtime/nodejs-apis)\n  - [Single-file executable](https://bun.sh/docs/bundler/executables)\n  - [Plugins](https://bun.sh/docs/runtime/plugins)\n  - [Watch mode](https://bun.sh/docs/runtime/hot)\n  - [Module resolution](https://bun.sh/docs/runtime/modules)\n  - [Auto-install](https://bun.sh/docs/runtime/autoimport)\n  - [bunfig.toml](https://bun.sh/docs/runtime/bunfig)\n  - [Debugger](https://bun.sh/docs/runtime/debugger)\n  - [Framework API](https://bun.sh/docs/runtime/framework)\n\n- Package manager\n\n  - [`bun install`](https://bun.sh/docs/cli/install)\n  - [`bun add`](https://bun.sh/docs/cli/add)\n  - [`bun remove`](https://bun.sh/docs/cli/remove)\n  - [`bun update`](https://bun.sh/docs/cli/update)\n  - [`bun link`](https://bun.sh/docs/cli/link)\n  - [`bun pm`](https://bun.sh/docs/cli/pm)\n  - [Global cache](https://bun.sh/docs/install/cache)\n  - [Workspaces](https://bun.sh/docs/install/workspaces)\n  - [Lifecycle scripts](https://bun.sh/docs/install/lifecycle)\n  - [Filter](https://bun.sh/docs/cli/filter)\n  - [Lockfile](https://bun.sh/docs/install/lockfile)\n  - [Scopes and registries](https://bun.sh/docs/install/registries)\n  - [Overrides and resolutions](https://bun.sh/docs/install/overrides)\n\n- Bundler\n\n  - [`Bun.build`](https://bun.sh/docs/bundler)\n  - [Loaders](https://bun.sh/docs/bundler/loaders)\n  - [Plugins](https://bun.sh/docs/bundler/plugins)\n  - [Macros](https://bun.sh/docs/bundler/macros)\n  - [vs esbuild](https://bun.sh/docs/bundler/vs-esbuild)\n\n- Test runner\n\n  - [`bun test`](https://bun.sh/docs/cli/test)\n  - [Writing tests](https://bun.sh/docs/test/writing)\n  - [Watch mode](https://bun.sh/docs/test/hot)\n  - [Lifecycle hooks](https://bun.sh/docs/test/lifecycle)\n  - [Mocks](https://bun.sh/docs/test/mocks)\n  - [Snapshots](https://bun.sh/docs/test/snapshots)\n  - [Dates and times](https://bun.sh/docs/test/time)\n  - [DOM testing](https://bun.sh/docs/test/dom)\n  - [Code coverage](https://bun.sh/docs/test/coverage)\n\n- Package runner\n\n  - [`bunx`](https://bun.sh/docs/cli/bunx)\n\n- API\n\n  - [HTTP server](https://bun.sh/docs/api/http)\n  - [WebSockets](https://bun.sh/docs/api/websockets)\n  - [Workers](https://bun.sh/docs/api/workers)\n  - [Binary data](https://bun.sh/docs/api/binary-data)\n  - [Streams](https://bun.sh/docs/api/streams)\n  - [File I/O](https://bun.sh/docs/api/file-io)\n  - [import.meta](https://bun.sh/docs/api/import-meta)\n  - [SQLite](https://bun.sh/docs/api/sqlite)\n  - [FileSystemRouter](https://bun.sh/docs/api/file-system-router)\n  - [TCP sockets](https://bun.sh/docs/api/tcp)\n  - [UDP sockets](https://bun.sh/docs/api/udp)\n  - [Globals](https://bun.sh/docs/api/globals)\n  - [$ Shell](https://bun.sh/docs/runtime/shell)\n  - [Child processes](https://bun.sh/docs/api/spawn)\n  - [Transpiler](https://bun.sh/docs/api/transpiler)\n  - [Hashing](https://bun.sh/docs/api/hashing)\n  - [Console](https://bun.sh/docs/api/console)\n  - [FFI](https://bun.sh/docs/api/ffi)\n  - [HTMLRewriter](https://bun.sh/docs/api/html-rewriter)\n  - [Testing](https://bun.sh/docs/api/test)\n  - [Utils](https://bun.sh/docs/api/utils)\n  - [Node-API](https://bun.sh/docs/api/node-api)\n  - [Glob](https://bun.sh/docs/api/glob)\n  - [Semver](https://bun.sh/docs/api/semver)\n\n- Project\n  - [Roadmap](https://bun.sh/docs/project/roadmap)\n  - [Benchmarking](https://bun.sh/docs/project/benchmarking)\n  - [Contributing](https://bun.sh/docs/project/contributing)\n  - [Building Windows](https://bun.sh/docs/project/building-windows)\n  - [License](https://bun.sh/docs/project/licensing)\n\n## Guides\n\n- Binary\n\n  - [Convert a Blob to a DataView](https://bun.sh/guides/binary/blob-to-dataview)\n  - [Convert a Blob to a ReadableStream](https://bun.sh/guides/binary/blob-to-stream)\n  - [Convert a Blob to a string](https://bun.sh/guides/binary/blob-to-string)\n  - [Convert a Blob to a Uint8Array](https://bun.sh/guides/binary/blob-to-typedarray)\n  - [Convert a Blob to an ArrayBuffer](https://bun.sh/guides/binary/blob-to-arraybuffer)\n  - [Convert a Buffer to a blob](https://bun.sh/guides/binary/buffer-to-blob)\n  - [Convert a Buffer to a ReadableStream](https://bun.sh/guides/binary/buffer-to-readablestream)\n  - [Convert a Buffer to a string](https://bun.sh/guides/binary/buffer-to-string)\n  - [Convert a Buffer to a Uint8Array](https://bun.sh/guides/binary/buffer-to-typedarray)\n  - [Convert a Buffer to an ArrayBuffer](https://bun.sh/guides/binary/buffer-to-arraybuffer)\n  - [Convert a DataView to a string](https://bun.sh/guides/binary/dataview-to-string)\n  - [Convert a Uint8Array to a Blob](https://bun.sh/guides/binary/typedarray-to-blob)\n  - [Convert a Uint8Array to a Buffer](https://bun.sh/guides/binary/typedarray-to-buffer)\n  - [Convert a Uint8Array to a DataView](https://bun.sh/guides/binary/typedarray-to-dataview)\n  - [Convert a Uint8Array to a ReadableStream](https://bun.sh/guides/binary/typedarray-to-readablestream)\n  - [Convert a Uint8Array to a string](https://bun.sh/guides/binary/typedarray-to-string)\n  - [Convert a Uint8Array to an ArrayBuffer](https://bun.sh/guides/binary/typedarray-to-arraybuffer)\n  - [Convert an ArrayBuffer to a Blob](https://bun.sh/guides/binary/arraybuffer-to-blob)\n  - [Convert an ArrayBuffer to a Buffer](https://bun.sh/guides/binary/arraybuffer-to-buffer)\n  - [Convert an ArrayBuffer to a string](https://bun.sh/guides/binary/arraybuffer-to-string)\n  - [Convert an ArrayBuffer to a Uint8Array](https://bun.sh/guides/binary/arraybuffer-to-typedarray)\n  - [Convert an ArrayBuffer to an array of numbers](https://bun.sh/guides/binary/arraybuffer-to-array)\n\n- Ecosystem\n\n  - [Build a frontend using Vite and Bun](https://bun.sh/guides/ecosystem/vite)\n  - [Build an app with Astro and Bun](https://bun.sh/guides/ecosystem/astro)\n  - [Build an app with Next.js and Bun](https://bun.sh/guides/ecosystem/nextjs)\n  - [Build an app with Nuxt and Bun](https://bun.sh/guides/ecosystem/nuxt)\n  - [Build an app with Qwik and Bun](https://bun.sh/guides/ecosystem/qwik)\n  - [Build an app with Remix and Bun](https://bun.sh/guides/ecosystem/remix)\n  - [Build an app with SolidStart and Bun](https://bun.sh/guides/ecosystem/solidstart)\n  - [Build an app with SvelteKit and Bun](https://bun.sh/guides/ecosystem/sveltekit)\n  - [Build an HTTP server using Elysia and Bun](https://bun.sh/guides/ecosystem/elysia)\n  - [Build an HTTP server using Express and Bun](https://bun.sh/guides/ecosystem/express)\n  - [Build an HTTP server using Hono and Bun](https://bun.sh/guides/ecosystem/hono)\n  - [Build an HTTP server using StricJS and Bun](https://bun.sh/guides/ecosystem/stric)\n  - [Containerize a Bun application with Docker](https://bun.sh/guides/ecosystem/docker)\n  - [Create a Discord bot](https://bun.sh/guides/ecosystem/discordjs)\n  - [Deploy a Bun application on Render](https://bun.sh/guides/ecosystem/render)\n  - [Read and write data to MongoDB using Mongoose and Bun](https://bun.sh/guides/ecosystem/mongoose)\n  - [Run Bun as a daemon with PM2](https://bun.sh/guides/ecosystem/pm2)\n  - [Run Bun as a daemon with systemd](https://bun.sh/guides/ecosystem/systemd)\n  - [Server-side render (SSR) a React component](https://bun.sh/guides/ecosystem/ssr-react)\n  - [Use Drizzle ORM with Bun](https://bun.sh/guides/ecosystem/drizzle)\n  - [Use EdgeDB with Bun](https://bun.sh/guides/ecosystem/edgedb)\n  - [Use Neon's Serverless Postgres with Bun](https://bun.sh/guides/ecosystem/neon-serverless-postgres)\n  - [Use Prisma with Bun](https://bun.sh/guides/ecosystem/prisma)\n  - [Use React and JSX](https://bun.sh/guides/ecosystem/react)\n  - [Add Sentry to a Bun app](https://bun.sh/guides/ecosystem/sentry)\n\n- HTTP\n\n  - [Common HTTP server usage](https://bun.sh/guides/http/server)\n  - [Configure TLS on an HTTP server](https://bun.sh/guides/http/tls)\n  - [fetch with unix domain sockets in Bun](https://bun.sh/guides/http/fetch-unix)\n  - [Hot reload an HTTP server](https://bun.sh/guides/http/hot)\n  - [Proxy HTTP requests using fetch()](https://bun.sh/guides/http/proxy)\n  - [Send an HTTP request using fetch](https://bun.sh/guides/http/fetch)\n  - [Start a cluster of HTTP servers](https://bun.sh/guides/http/cluster)\n  - [Stream a file as an HTTP Response](https://bun.sh/guides/http/stream-file)\n  - [Streaming HTTP Server with Async Iterators](https://bun.sh/guides/http/stream-iterator)\n  - [Streaming HTTP Server with Node.js Streams](https://bun.sh/guides/http/stream-node-streams-in-bun)\n  - [Upload files via HTTP using FormData](https://bun.sh/guides/http/file-uploads)\n  - [Write a simple HTTP server](https://bun.sh/guides/http/simple)\n\n- Install\n\n  - [Add a dependency](https://bun.sh/guides/install/add)\n  - [Add a development dependency](https://bun.sh/guides/install/add-dev)\n  - [Add a Git dependency](https://bun.sh/guides/install/add-git)\n  - [Add a peer dependency](https://bun.sh/guides/install/add-peer)\n  - [Add a tarball dependency](https://bun.sh/guides/install/add-tarball)\n  - [Add a trusted dependency](https://bun.sh/guides/install/trusted)\n  - [Add an optional dependency](https://bun.sh/guides/install/add-optional)\n  - [Configure a private registry for an organization scope with bun install](https://bun.sh/guides/install/registry-scope)\n  - [Configure git to diff Bun's lockb lockfile](https://bun.sh/guides/install/git-diff-bun-lockfile)\n  - [Configuring a monorepo using workspaces](https://bun.sh/guides/install/workspaces)\n  - [Generate a human-readable lockfile](https://bun.sh/guides/install/yarnlock)\n  - [Install a package under a different name](https://bun.sh/guides/install/npm-alias)\n  - [Install dependencies with Bun in GitHub Actions](https://bun.sh/guides/install/cicd)\n  - [Override the default npm registry for bun install](https://bun.sh/guides/install/custom-registry)\n  - [Using bun install with an Azure Artifacts npm registry](https://bun.sh/guides/install/azure-artifacts)\n  - [Using bun install with Artifactory](https://bun.sh/guides/install/jfrog-artifactory)\n\n- Process\n\n  - [Get the process uptime in nanoseconds](https://bun.sh/guides/process/nanoseconds)\n  - [Listen for CTRL+C](https://bun.sh/guides/process/ctrl-c)\n  - [Listen to OS signals](https://bun.sh/guides/process/os-signals)\n  - [Parse command-line arguments](https://bun.sh/guides/process/argv)\n  - [Read from stdin](https://bun.sh/guides/process/stdin)\n  - [Read stderr from a child process](https://bun.sh/guides/process/spawn-stderr)\n  - [Read stdout from a child process](https://bun.sh/guides/process/spawn-stdout)\n  - [Spawn a child process](https://bun.sh/guides/process/spawn)\n  - [Spawn a child process and communicate using IPC](https://bun.sh/guides/process/ipc)\n\n- Read file\n\n  - [Check if a file exists](https://bun.sh/guides/read-file/exists)\n  - [Get the MIME type of a file](https://bun.sh/guides/read-file/mime)\n  - [Read a file as a ReadableStream](https://bun.sh/guides/read-file/stream)\n  - [Read a file as a string](https://bun.sh/guides/read-file/string)\n  - [Read a file to a Buffer](https://bun.sh/guides/read-file/buffer)\n  - [Read a file to a Uint8Array](https://bun.sh/guides/read-file/uint8array)\n  - [Read a file to an ArrayBuffer](https://bun.sh/guides/read-file/arraybuffer)\n  - [Read a JSON file](https://bun.sh/guides/read-file/json)\n  - [Watch a directory for changes](https://bun.sh/guides/read-file/watch)\n\n- Runtime\n\n  - [Debugging Bun with the VS Code extension](https://bun.sh/guides/runtime/vscode-debugger)\n  - [Debugging Bun with the web debugger](https://bun.sh/guides/runtime/web-debugger)\n  - [Define and replace static globals & constants](https://bun.sh/guides/runtime/define-constant)\n  - [Import a JSON file](https://bun.sh/guides/runtime/import-json)\n  - [Import a TOML file](https://bun.sh/guides/runtime/import-toml)\n  - [Import HTML file as text](https://bun.sh/guides/runtime/import-html)\n  - [Install and run Bun in GitHub Actions](https://bun.sh/guides/runtime/cicd)\n  - [Install TypeScript declarations for Bun](https://bun.sh/guides/runtime/typescript)\n  - [Re-map import paths](https://bun.sh/guides/runtime/tsconfig-paths)\n  - [Read environment variables](https://bun.sh/guides/runtime/read-env)\n  - [Run a Shell Command](https://bun.sh/guides/runtime/shell)\n  - [Set a time zone in Bun](https://bun.sh/guides/runtime/timezone)\n  - [Set environment variables](https://bun.sh/guides/runtime/set-env)\n\n- Streams\n\n  - [Convert a Node.js Readable to a Blob](https://bun.sh/guides/streams/node-readable-to-blob)\n  - [Convert a Node.js Readable to a string](https://bun.sh/guides/streams/node-readable-to-string)\n  - [Convert a Node.js Readable to an ArrayBuffer](https://bun.sh/guides/streams/node-readable-to-arraybuffer)\n  - [Convert a Node.js Readable to JSON](https://bun.sh/guides/streams/node-readable-to-json)\n  - [Convert a ReadableStream to a Blob](https://bun.sh/guides/streams/to-blob)\n  - [Convert a ReadableStream to a Buffer](https://bun.sh/guides/streams/to-buffer)\n  - [Convert a ReadableStream to a string](https://bun.sh/guides/streams/to-string)\n  - [Convert a ReadableStream to a Uint8Array](https://bun.sh/guides/streams/to-typedarray)\n  - [Convert a ReadableStream to an array of chunks](https://bun.sh/guides/streams/to-array)\n  - [Convert a ReadableStream to an ArrayBuffer](https://bun.sh/guides/streams/to-arraybuffer)\n  - [Convert a ReadableStream to JSON](https://bun.sh/guides/streams/to-json)\n\n- Test\n\n  - [Bail early with the Bun test runner](https://bun.sh/guides/test/bail)\n  - [Generate code coverage reports with the Bun test runner](https://bun.sh/guides/test/coverage)\n  - [Mark a test as a \"todo\" with the Bun test runner](https://bun.sh/guides/test/todo-tests)\n  - [Migrate from Jest to Bun's test runner](https://bun.sh/guides/test/migrate-from-jest)\n  - [Mock functions in `bun test`](https://bun.sh/guides/test/mock-functions)\n  - [Re-run tests multiple times with the Bun test runner](https://bun.sh/guides/test/rerun-each)\n  - [Run tests in watch mode with Bun](https://bun.sh/guides/test/watch-mode)\n  - [Run your tests with the Bun test runner](https://bun.sh/guides/test/run-tests)\n  - [Set a code coverage threshold with the Bun test runner](https://bun.sh/guides/test/coverage-threshold)\n  - [Set a per-test timeout with the Bun test runner](https://bun.sh/guides/test/timeout)\n  - [Set the system time in Bun's test runner](https://bun.sh/guides/test/mock-clock)\n  - [Skip tests with the Bun test runner](https://bun.sh/guides/test/skip-tests)\n  - [Spy on methods in `bun test`](https://bun.sh/guides/test/spy-on)\n  - [Update snapshots in `bun test`](https://bun.sh/guides/test/update-snapshots)\n  - [Use snapshot testing in `bun test`](https://bun.sh/guides/test/snapshot)\n  - [Write browser DOM tests with Bun and happy-dom](https://bun.sh/guides/test/happy-dom)\n\n- Util\n\n  - [Check if the current file is the entrypoint](https://bun.sh/guides/util/entrypoint)\n  - [Check if two objects are deeply equal](https://bun.sh/guides/util/deep-equals)\n  - [Compress and decompress data with DEFLATE](https://bun.sh/guides/util/deflate)\n  - [Compress and decompress data with gzip](https://bun.sh/guides/util/gzip)\n  - [Convert a file URL to an absolute path](https://bun.sh/guides/util/file-url-to-path)\n  - [Convert an absolute path to a file URL](https://bun.sh/guides/util/path-to-file-url)\n  - [Detect when code is executed with Bun](https://bun.sh/guides/util/detect-bun)\n  - [Encode and decode base64 strings](https://bun.sh/guides/util/base64)\n  - [Escape an HTML string](https://bun.sh/guides/util/escape-html)\n  - [Get the absolute path of the current file](https://bun.sh/guides/util/import-meta-path)\n  - [Get the absolute path to the current entrypoint](https://bun.sh/guides/util/main)\n  - [Get the current Bun version](https://bun.sh/guides/util/version)\n  - [Get the directory of the current file](https://bun.sh/guides/util/import-meta-dir)\n  - [Get the file name of the current file](https://bun.sh/guides/util/import-meta-file)\n  - [Get the path to an executable bin file](https://bun.sh/guides/util/which-path-to-executable-bin)\n  - [Hash a password](https://bun.sh/guides/util/hash-a-password)\n  - [Sleep for a fixed number of milliseconds](https://bun.sh/guides/util/sleep)\n\n- WebSocket\n\n  - [Build a publish-subscribe WebSocket server](https://bun.sh/guides/websocket/pubsub)\n  - [Build a simple WebSocket server](https://bun.sh/guides/websocket/simple)\n  - [Enable compression for WebSocket messages](https://bun.sh/guides/websocket/compression)\n  - [Set per-socket contextual data on a WebSocket](https://bun.sh/guides/websocket/context)\n\n- Write file\n  - [Append content to a file](https://bun.sh/guides/write-file/append)\n  - [Copy a file to another location](https://bun.sh/guides/write-file/file-cp)\n  - [Delete a file](https://bun.sh/guides/write-file/unlink)\n  - [Write a Blob to a file](https://bun.sh/guides/write-file/blob)\n  - [Write a file incrementally](https://bun.sh/guides/write-file/filesink)\n  - [Write a file to stdout](https://bun.sh/guides/write-file/cat)\n  - [Write a ReadableStream to a file](https://bun.sh/guides/write-file/stream)\n  - [Write a Response to a file](https://bun.sh/guides/write-file/response)\n  - [Write a string to a file](https://bun.sh/guides/write-file/basic)\n  - [Write to stdout](https://bun.sh/guides/write-file/stdout)\n\n## Contributing\n\nRefer to the [Project > Contributing](https://bun.sh/docs/project/contributing) guide to start contributing to Bun.\n\n## License\n\nRefer to the [Project > License](https://bun.sh/docs/project/licensing) page for information about Bun's licensing.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.58,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 1.x.x   | :white_check_mark: |\n\n## Reporting a Vulnerability\n\nReport any discovered vulnerabilities to the Bun team by emailing `security@bun.sh`. Your report will acknowledged within 5 days, and a team member will be assigned as the primary handler. To the greatest extent possible, the security team will endeavor to keep you informed of the progress being made towards a fix and full announcement, and may ask for additional information or guidance surrounding the reported issue.\n\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.zig",
          "type": "blob",
          "size": 23.05,
          "content": "const std = @import(\"std\");\nconst builtin = @import(\"builtin\");\n\nconst Build = std.Build;\nconst Step = Build.Step;\nconst Compile = Step.Compile;\nconst LazyPath = Step.LazyPath;\nconst Target = std.Target;\nconst ResolvedTarget = std.Build.ResolvedTarget;\nconst CrossTarget = std.zig.CrossTarget;\nconst OptimizeMode = std.builtin.OptimizeMode;\nconst Module = Build.Module;\nconst fs = std.fs;\nconst Version = std.SemanticVersion;\nconst Arch = std.Target.Cpu.Arch;\n\nconst OperatingSystem = @import(\"src/env.zig\").OperatingSystem;\n\nconst pathRel = fs.path.relative;\n\n/// Do not rename this constant. It is scanned by some scripts to determine which zig version to install.\nconst recommended_zig_version = \"0.13.0\";\n\ncomptime {\n    if (!std.mem.eql(u8, builtin.zig_version_string, recommended_zig_version)) {\n        @compileError(\n            \"\" ++\n                \"Bun requires Zig version \" ++ recommended_zig_version ++ \". This is\" ++\n                \"automatically configured via Bun's CMake setup. You likely meant to run\" ++\n                \"`bun setup`. If you are trying to upgrade the Zig compiler,\" ++\n                \"run `./scripts/download-zig.sh master` or comment this message out.\",\n        );\n    }\n}\n\nconst zero_sha = \"0000000000000000000000000000000000000000\";\n\nconst BunBuildOptions = struct {\n    target: ResolvedTarget,\n    optimize: OptimizeMode,\n    os: OperatingSystem,\n    arch: Arch,\n\n    version: Version,\n    canary_revision: ?u32,\n    sha: []const u8,\n    /// enable debug logs in release builds\n    enable_logs: bool = false,\n    tracy_callstack_depth: u16,\n    reported_nodejs_version: Version,\n    /// To make iterating on some '@embedFile's faster, we load them at runtime\n    /// instead of at compile time. This is disabled in release or if this flag\n    /// is set (to allow CI to build a portable executable). Affected files:\n    ///\n    /// - src/bake/runtime.ts (bundled)\n    /// - src/bun.js/api/FFI.h\n    ///\n    /// A similar technique is used in C++ code for JavaScript builtins\n    codegen_embed: bool = false,\n\n    /// `./build/codegen` or equivalent\n    codegen_path: []const u8,\n    no_llvm: bool,\n\n    cached_options_module: ?*Module = null,\n    windows_shim: ?WindowsShim = null,\n\n    pub fn isBaseline(this: *const BunBuildOptions) bool {\n        return this.arch.isX86() and\n            !Target.x86.featureSetHas(this.target.result.cpu.features, .avx2);\n    }\n\n    pub fn shouldEmbedCode(opts: *const BunBuildOptions) bool {\n        return opts.optimize != .Debug or opts.codegen_embed;\n    }\n\n    pub fn buildOptionsModule(this: *BunBuildOptions, b: *Build) *Module {\n        if (this.cached_options_module) |mod| {\n            return mod;\n        }\n\n        var opts = b.addOptions();\n        opts.addOption([]const u8, \"base_path\", b.pathFromRoot(\".\"));\n        opts.addOption([]const u8, \"codegen_path\", std.fs.path.resolve(b.graph.arena, &.{\n            b.build_root.path.?,\n            this.codegen_path,\n        }) catch @panic(\"OOM\"));\n\n        opts.addOption(bool, \"codegen_embed\", this.shouldEmbedCode());\n        opts.addOption(u32, \"canary_revision\", this.canary_revision orelse 0);\n        opts.addOption(bool, \"is_canary\", this.canary_revision != null);\n        opts.addOption(Version, \"version\", this.version);\n        opts.addOption([:0]const u8, \"sha\", b.allocator.dupeZ(u8, this.sha) catch @panic(\"OOM\"));\n        opts.addOption(bool, \"baseline\", this.isBaseline());\n        opts.addOption(bool, \"enable_logs\", this.enable_logs);\n        opts.addOption([]const u8, \"reported_nodejs_version\", b.fmt(\"{}\", .{this.reported_nodejs_version}));\n\n        const mod = opts.createModule();\n        this.cached_options_module = mod;\n        return mod;\n    }\n\n    pub fn windowsShim(this: *BunBuildOptions, b: *Build) WindowsShim {\n        return this.windows_shim orelse {\n            this.windows_shim = WindowsShim.create(b);\n            return this.windows_shim.?;\n        };\n    }\n};\n\npub fn getOSVersionMin(os: OperatingSystem) ?Target.Query.OsVersion {\n    return switch (os) {\n        .mac => .{\n            .semver = .{ .major = 13, .minor = 0, .patch = 0 },\n        },\n\n        // Windows 10 1809 is the minimum supported version\n        // One case where this is specifically required is in `deleteOpenedFile`\n        .windows => .{\n            .windows = .win10_rs5,\n        },\n\n        else => null,\n    };\n}\n\npub fn getOSGlibCVersion(os: OperatingSystem) ?Version {\n    return switch (os) {\n        // Compiling with a newer glibc than this will break certain cloud environments.\n        .linux => .{ .major = 2, .minor = 27, .patch = 0 },\n\n        else => null,\n    };\n}\n\npub fn getCpuModel(os: OperatingSystem, arch: Arch) ?Target.Query.CpuModel {\n    // https://github.com/oven-sh/bun/issues/12076\n    if (os == .linux and arch == .aarch64) {\n        return .{ .explicit = &Target.aarch64.cpu.cortex_a35 };\n    }\n\n    // Be explicit and ensure we do not accidentally target a newer M-series chip\n    if (os == .mac and arch == .aarch64) {\n        return .{ .explicit = &Target.aarch64.cpu.apple_m1 };\n    }\n\n    // note: x86_64 is dealt with in the CMake config and passed in.\n    // the reason for the explicit handling on aarch64 is due to troubles\n    // passing the exact target in via flags.\n    return null;\n}\n\npub fn build(b: *Build) !void {\n    std.log.info(\"zig compiler v{s}\", .{builtin.zig_version_string});\n\n    b.zig_lib_dir = b.zig_lib_dir orelse b.path(\"vendor/zig/lib\");\n\n    // TODO: Upgrade path for 0.14.0\n    // b.graph.zig_lib_directory = brk: {\n    //     const sub_path = \"vendor/zig/lib\";\n    //     const dir = try b.build_root.handle.openDir(sub_path, .{});\n    //     break :brk .{ .handle = dir, .path = try b.build_root.join(b.graph.arena, &.{sub_path}) };\n    // };\n\n    var target_query = b.standardTargetOptionsQueryOnly(.{});\n    const optimize = b.standardOptimizeOption(.{});\n\n    const os, const arch, const abi = brk: {\n        // resolve the target query to pick up what operating system and cpu\n        // architecture that is desired. this information is used to slightly\n        // refine the query.\n        const temp_resolved = b.resolveTargetQuery(target_query);\n        const arch = temp_resolved.result.cpu.arch;\n        const os: OperatingSystem = if (arch.isWasm())\n            .wasm\n        else switch (temp_resolved.result.os.tag) {\n            .macos => .mac,\n            .linux => .linux,\n            .windows => .windows,\n            else => |t| std.debug.panic(\"Unsupported OS tag {}\", .{t}),\n        };\n        const abi = temp_resolved.result.abi;\n        break :brk .{ os, arch, abi };\n    };\n\n    // target must be refined to support older but very popular devices on\n    // aarch64, this means moving the minimum supported CPU to support certain\n    // raspberry PIs. there are also a number of cloud hosts that use virtual\n    // machines with surprisingly out of date versions of glibc.\n    if (getCpuModel(os, arch)) |cpu_model| {\n        target_query.cpu_model = cpu_model;\n    }\n\n    target_query.os_version_min = getOSVersionMin(os);\n    target_query.glibc_version = if (abi.isGnu()) getOSGlibCVersion(os) else null;\n\n    const target = b.resolveTargetQuery(target_query);\n\n    const codegen_path = b.pathFromRoot(\n        b.option([]const u8, \"codegen_path\", \"Set the generated code directory\") orelse\n            \"build/debug/codegen\",\n    );\n    const codegen_embed = b.option(bool, \"codegen_embed\", \"If codegen files should be embedded in the binary\") orelse false;\n\n    const bun_version = b.option([]const u8, \"version\", \"Value of `Bun.version`\") orelse \"0.0.0\";\n\n    b.reference_trace = ref_trace: {\n        const trace = b.option(u32, \"reference-trace\", \"Set the reference trace\") orelse 16;\n        break :ref_trace if (trace == 0) null else trace;\n    };\n\n    const obj_format = b.option(ObjectFormat, \"obj_format\", \"Output file for object files\") orelse .obj;\n\n    const no_llvm = b.option(bool, \"no_llvm\", \"Experiment with Zig self hosted backends. No stability guaranteed\") orelse false;\n\n    var build_options = BunBuildOptions{\n        .target = target,\n        .optimize = optimize,\n\n        .os = os,\n        .arch = arch,\n\n        .codegen_path = codegen_path,\n        .codegen_embed = codegen_embed,\n        .no_llvm = no_llvm,\n\n        .version = try Version.parse(bun_version),\n        .canary_revision = canary: {\n            const rev = b.option(u32, \"canary\", \"Treat this as a canary build\") orelse 0;\n            break :canary if (rev == 0) null else rev;\n        },\n\n        .reported_nodejs_version = try Version.parse(\n            b.option([]const u8, \"reported_nodejs_version\", \"Reported Node.js version\") orelse\n                \"0.0.0-unset\",\n        ),\n\n        .sha = sha: {\n            const sha_buildoption = b.option([]const u8, \"sha\", \"Force the git sha\");\n            const sha_github = b.graph.env_map.get(\"GITHUB_SHA\");\n            const sha_env = b.graph.env_map.get(\"GIT_SHA\");\n            const sha = sha_buildoption orelse sha_github orelse sha_env orelse fetch_sha: {\n                const result = std.process.Child.run(.{\n                    .allocator = b.allocator,\n                    .argv = &.{\n                        \"git\",\n                        \"rev-parse\",\n                        \"HEAD\",\n                    },\n                    .cwd = b.pathFromRoot(\".\"),\n                    .expand_arg0 = .expand,\n                }) catch |err| {\n                    std.log.warn(\"Failed to execute 'git rev-parse HEAD': {s}\", .{@errorName(err)});\n                    std.log.warn(\"Falling back to zero sha\", .{});\n                    break :sha zero_sha;\n                };\n\n                break :fetch_sha b.dupe(std.mem.trim(u8, result.stdout, \"\\n \\t\"));\n            };\n\n            if (sha.len == 0) {\n                std.log.warn(\"No git sha found, falling back to zero sha\", .{});\n                break :sha zero_sha;\n            }\n            if (sha.len != 40) {\n                std.log.warn(\"Invalid git sha: {s}\", .{sha});\n                std.log.warn(\"Falling back to zero sha\", .{});\n                break :sha zero_sha;\n            }\n\n            break :sha sha;\n        },\n\n        .tracy_callstack_depth = b.option(u16, \"tracy_callstack_depth\", \"\") orelse 10,\n        .enable_logs = b.option(bool, \"enable_logs\", \"Enable logs in release\") orelse false,\n    };\n\n    // zig build obj\n    {\n        var step = b.step(\"obj\", \"Build Bun's Zig code as a .o file\");\n        var bun_obj = addBunObject(b, &build_options);\n        step.dependOn(&bun_obj.step);\n        step.dependOn(addInstallObjectFile(b, bun_obj, \"bun-zig\", obj_format));\n    }\n\n    // zig build windows-shim\n    {\n        var step = b.step(\"windows-shim\", \"Build the Windows shim (bun_shim_impl.exe + bun_shim_debug.exe)\");\n        var windows_shim = build_options.windowsShim(b);\n        step.dependOn(&b.addInstallFile(windows_shim.exe.getEmittedBin(), \"bun_shim_impl.exe\").step);\n        step.dependOn(&b.addInstallFile(windows_shim.dbg.getEmittedBin(), \"bun_shim_debug.exe\").step);\n    }\n\n    // zig build check\n    {\n        var step = b.step(\"check\", \"Check for semantic analysis errors\");\n        var bun_check_obj = addBunObject(b, &build_options);\n        bun_check_obj.generated_bin = null;\n        step.dependOn(&bun_check_obj.step);\n\n        // The default install step will run zig build check. This is so ZLS\n        // identifies the codebase, as well as performs checking if build on\n        // save is enabled.\n\n        // For building Bun itself, one should run `bun setup`\n        b.default_step.dependOn(step);\n    }\n\n    // zig build check-all\n    {\n        const step = b.step(\"check-all\", \"Check for semantic analysis errors on all supported platforms\");\n        addMultiCheck(b, step, build_options, &.{\n            .{ .os = .windows, .arch = .x86_64 },\n            .{ .os = .mac, .arch = .x86_64 },\n            .{ .os = .mac, .arch = .aarch64 },\n            .{ .os = .linux, .arch = .x86_64 },\n            .{ .os = .linux, .arch = .aarch64 },\n            .{ .os = .linux, .arch = .x86_64, .musl = true },\n            .{ .os = .linux, .arch = .aarch64, .musl = true },\n        });\n    }\n\n    // zig build check-windows\n    {\n        const step = b.step(\"check-windows\", \"Check for semantic analysis errors on Windows\");\n        addMultiCheck(b, step, build_options, &.{\n            .{ .os = .windows, .arch = .x86_64 },\n        });\n    }\n\n    // zig build translate-c-headers\n    {\n        const step = b.step(\"translate-c\", \"Copy generated translated-c-headers.zig to zig-out\");\n        step.dependOn(&b.addInstallFile(getTranslateC(b, b.host, .Debug).getOutput(), \"translated-c-headers.zig\").step);\n    }\n\n    // zig build enum-extractor\n    {\n        // const step = b.step(\"enum-extractor\", \"Extract enum definitions (invoked by a code generator)\");\n        // const exe = b.addExecutable(.{\n        //     .name = \"enum_extractor\",\n        //     .root_source_file = b.path(\"./src/generated_enum_extractor.zig\"),\n        //     .target = b.graph.host,\n        //     .optimize = .Debug,\n        // });\n        // const run = b.addRunArtifact(exe);\n        // step.dependOn(&run.step);\n    }\n}\n\npub fn addMultiCheck(\n    b: *Build,\n    parent_step: *Step,\n    root_build_options: BunBuildOptions,\n    to_check: []const struct { os: OperatingSystem, arch: Arch, musl: bool = false },\n) void {\n    for (to_check) |check| {\n        for ([_]std.builtin.Mode{ .Debug, .ReleaseFast }) |mode| {\n            const check_target = b.resolveTargetQuery(.{\n                .os_tag = OperatingSystem.stdOSTag(check.os),\n                .cpu_arch = check.arch,\n                .cpu_model = getCpuModel(check.os, check.arch) orelse .determined_by_cpu_arch,\n                .os_version_min = getOSVersionMin(check.os),\n                .glibc_version = if (check.musl) null else getOSGlibCVersion(check.os),\n            });\n\n            var options: BunBuildOptions = .{\n                .target = check_target,\n                .os = check.os,\n                .arch = check_target.result.cpu.arch,\n                .optimize = mode,\n\n                .canary_revision = root_build_options.canary_revision,\n                .sha = root_build_options.sha,\n                .tracy_callstack_depth = root_build_options.tracy_callstack_depth,\n                .version = root_build_options.version,\n                .reported_nodejs_version = root_build_options.reported_nodejs_version,\n                .codegen_path = root_build_options.codegen_path,\n                .no_llvm = root_build_options.no_llvm,\n            };\n\n            var obj = addBunObject(b, &options);\n            obj.generated_bin = null;\n            parent_step.dependOn(&obj.step);\n        }\n    }\n}\n\nfn getTranslateC(b: *Build, target: std.Build.ResolvedTarget, optimize: std.builtin.OptimizeMode) *Step.TranslateC {\n    const translate_c = b.addTranslateC(.{\n        .root_source_file = b.path(\"src/c-headers-for-zig.h\"),\n        .target = target,\n        .optimize = optimize,\n        .link_libc = true,\n    });\n    inline for ([_](struct { []const u8, bool }){\n        .{ \"WINDOWS\", translate_c.target.result.os.tag == .windows },\n        .{ \"POSIX\", translate_c.target.result.os.tag != .windows },\n        .{ \"LINUX\", translate_c.target.result.os.tag == .linux },\n        .{ \"DARWIN\", translate_c.target.result.os.tag.isDarwin() },\n    }) |entry| {\n        const str, const value = entry;\n        translate_c.defineCMacroRaw(b.fmt(\"{s}={d}\", .{ str, @intFromBool(value) }));\n    }\n    return translate_c;\n}\n\npub fn addBunObject(b: *Build, opts: *BunBuildOptions) *Compile {\n    const obj = b.addObject(.{\n        .name = if (opts.optimize == .Debug) \"bun-debug\" else \"bun\",\n        .root_source_file = switch (opts.os) {\n            .wasm => b.path(\"root_wasm.zig\"),\n            else => b.path(\"root.zig\"),\n            // else => b.path(\"root_css.zig\"),\n        },\n        .target = opts.target,\n        .optimize = opts.optimize,\n        .use_llvm = !opts.no_llvm,\n        .use_lld = if (opts.os == .mac) false else !opts.no_llvm,\n\n        // https://github.com/ziglang/zig/issues/17430\n        .pic = true,\n\n        .omit_frame_pointer = false,\n        .strip = false, // stripped at the end\n    });\n    obj.bundle_compiler_rt = false;\n    obj.formatted_panics = true;\n    obj.root_module.omit_frame_pointer = false;\n\n    // Link libc\n    if (opts.os != .wasm) {\n        obj.linkLibC();\n        obj.linkLibCpp();\n    }\n\n    // Disable stack probing on x86 so we don't need to include compiler_rt\n    if (opts.arch.isX86()) {\n        obj.root_module.stack_check = false;\n        obj.root_module.stack_protector = false;\n    }\n\n    if (opts.os == .linux) {\n        obj.link_emit_relocs = false;\n        obj.link_eh_frame_hdr = false;\n        obj.link_function_sections = true;\n        obj.link_data_sections = true;\n\n        if (opts.optimize == .Debug) {\n            obj.root_module.valgrind = true;\n        }\n    }\n    addInternalPackages(b, obj, opts);\n    obj.root_module.addImport(\"build_options\", opts.buildOptionsModule(b));\n\n    const translate_c = getTranslateC(b, opts.target, opts.optimize);\n    obj.root_module.addImport(\"translated-c-headers\", translate_c.createModule());\n\n    return obj;\n}\n\nconst ObjectFormat = enum {\n    bc,\n    obj,\n};\n\npub fn addInstallObjectFile(\n    b: *Build,\n    compile: *Compile,\n    name: []const u8,\n    out_mode: ObjectFormat,\n) *Step {\n    if (@import(\"builtin\").os.tag != .windows and std.posix.getenvZ(\"COMPILE_ERRORS_ONLY\") != null) {\n        const failstep = b.addSystemCommand(&.{\"COMPILE_ERRORS_ONLY set but there were no compile errors\"});\n        failstep.step.dependOn(&compile.step);\n        return &failstep.step;\n    }\n    // bin always needed to be computed or else the compilation will do nothing. zig build system bug?\n    const bin = compile.getEmittedBin();\n    return &b.addInstallFile(switch (out_mode) {\n        .obj => bin,\n        .bc => compile.getEmittedLlvmBc(),\n    }, b.fmt(\"{s}.o\", .{name})).step;\n}\n\nfn exists(path: []const u8) bool {\n    const file = std.fs.openFileAbsolute(path, .{ .mode = .read_only }) catch return false;\n    file.close();\n    return true;\n}\n\nfn addInternalPackages(b: *Build, obj: *Compile, opts: *BunBuildOptions) void {\n    const os = opts.os;\n\n    const io_path = switch (os) {\n        .mac => \"src/io/io_darwin.zig\",\n        .linux => \"src/io/io_linux.zig\",\n        .windows => \"src/io/io_windows.zig\",\n        else => \"src/io/io_stub.zig\",\n    };\n    obj.root_module.addAnonymousImport(\"async_io\", .{\n        .root_source_file = b.path(io_path),\n    });\n\n    const zlib_internal_path = switch (os) {\n        .windows => \"src/deps/zlib.win32.zig\",\n        .linux, .mac => \"src/deps/zlib.posix.zig\",\n        else => null,\n    };\n    if (zlib_internal_path) |path| {\n        obj.root_module.addAnonymousImport(\"zlib-internal\", .{\n            .root_source_file = b.path(path),\n        });\n    }\n\n    const async_path = switch (os) {\n        .linux, .mac => \"src/async/posix_event_loop.zig\",\n        .windows => \"src/async/windows_event_loop.zig\",\n        else => \"src/async/stub_event_loop.zig\",\n    };\n    obj.root_module.addAnonymousImport(\"async\", .{\n        .root_source_file = b.path(async_path),\n    });\n\n    // Generated code exposed as individual modules.\n    inline for (.{\n        .{ .file = \"ZigGeneratedClasses.zig\", .import = \"ZigGeneratedClasses\" },\n        .{ .file = \"ResolvedSourceTag.zig\", .import = \"ResolvedSourceTag\" },\n        .{ .file = \"ErrorCode.zig\", .import = \"ErrorCode\" },\n        .{ .file = \"runtime.out.js\" },\n        .{ .file = \"bake.client.js\", .import = \"bake-codegen/bake.client.js\", .enable = opts.shouldEmbedCode() },\n        .{ .file = \"bake.error.js\", .import = \"bake-codegen/bake.error.js\", .enable = opts.shouldEmbedCode() },\n        .{ .file = \"bake.server.js\", .import = \"bake-codegen/bake.server.js\", .enable = opts.shouldEmbedCode() },\n        .{ .file = \"bun-error/index.js\", .enable = opts.shouldEmbedCode() },\n        .{ .file = \"bun-error/bun-error.css\", .enable = opts.shouldEmbedCode() },\n        .{ .file = \"fallback-decoder.js\", .enable = opts.shouldEmbedCode() },\n        .{ .file = \"node-fallbacks/assert.js\" },\n        .{ .file = \"node-fallbacks/buffer.js\" },\n        .{ .file = \"node-fallbacks/console.js\" },\n        .{ .file = \"node-fallbacks/constants.js\" },\n        .{ .file = \"node-fallbacks/crypto.js\" },\n        .{ .file = \"node-fallbacks/domain.js\" },\n        .{ .file = \"node-fallbacks/events.js\" },\n        .{ .file = \"node-fallbacks/http.js\" },\n        .{ .file = \"node-fallbacks/https.js\" },\n        .{ .file = \"node-fallbacks/net.js\" },\n        .{ .file = \"node-fallbacks/os.js\" },\n        .{ .file = \"node-fallbacks/path.js\" },\n        .{ .file = \"node-fallbacks/process.js\" },\n        .{ .file = \"node-fallbacks/punycode.js\" },\n        .{ .file = \"node-fallbacks/querystring.js\" },\n        .{ .file = \"node-fallbacks/stream.js\" },\n        .{ .file = \"node-fallbacks/string_decoder.js\" },\n        .{ .file = \"node-fallbacks/sys.js\" },\n        .{ .file = \"node-fallbacks/timers.js\" },\n        .{ .file = \"node-fallbacks/tty.js\" },\n        .{ .file = \"node-fallbacks/url.js\" },\n        .{ .file = \"node-fallbacks/util.js\" },\n        .{ .file = \"node-fallbacks/zlib.js\" },\n    }) |entry| {\n        if (!@hasField(@TypeOf(entry), \"enable\") or entry.enable) {\n            const path = b.pathJoin(&.{ opts.codegen_path, entry.file });\n            validateGeneratedPath(path);\n            const import_path = if (@hasField(@TypeOf(entry), \"import\"))\n                entry.import\n            else\n                entry.file;\n            obj.root_module.addAnonymousImport(import_path, .{\n                .root_source_file = .{ .cwd_relative = path },\n            });\n        }\n    }\n\n    if (os == .windows) {\n        obj.root_module.addAnonymousImport(\"bun_shim_impl.exe\", .{\n            .root_source_file = opts.windowsShim(b).exe.getEmittedBin(),\n        });\n    }\n}\n\nfn validateGeneratedPath(path: []const u8) void {\n    if (!exists(path)) {\n        std.debug.panic(\n            \\\\Generated file '{s}' is missing!\n            \\\\\n            \\\\Make sure to use CMake and Ninja, or pass a manual codegen folder with '-Dgenerated-code=...'\n        , .{path});\n    }\n}\n\nconst WindowsShim = struct {\n    exe: *Compile,\n    dbg: *Compile,\n\n    fn create(b: *Build) WindowsShim {\n        const target = b.resolveTargetQuery(.{\n            .cpu_model = .{ .explicit = &std.Target.x86.cpu.nehalem },\n            .cpu_arch = .x86_64,\n            .os_tag = .windows,\n            .os_version_min = getOSVersionMin(.windows),\n        });\n\n        const path = b.path(\"src/install/windows-shim/bun_shim_impl.zig\");\n\n        const exe = b.addExecutable(.{\n            .name = \"bun_shim_impl\",\n            .root_source_file = path,\n            .target = target,\n            .optimize = .ReleaseFast,\n            .use_llvm = true,\n            .use_lld = true,\n            .unwind_tables = false,\n            .omit_frame_pointer = true,\n            .strip = true,\n            .linkage = .static,\n            .sanitize_thread = false,\n            .single_threaded = true,\n            .link_libc = false,\n        });\n\n        const dbg = b.addExecutable(.{\n            .name = \"bun_shim_debug\",\n            .root_source_file = path,\n            .target = target,\n            .optimize = .Debug,\n            .use_llvm = true,\n            .use_lld = true,\n            .linkage = .static,\n            .single_threaded = true,\n            .link_libc = false,\n        });\n\n        return .{ .exe = exe, .dbg = dbg };\n    }\n};\n"
        },
        {
          "name": "bun.lockb",
          "type": "blob",
          "size": 185.7,
          "content": null
        },
        {
          "name": "bunfig.node-test.toml",
          "type": "blob",
          "size": 0.15,
          "content": "# FIXME: move this back to test/js/node\n# https://github.com/oven-sh/bun/issues/16289\n[test]\npreload = [\"./test/js/node/harness.ts\", \"./test/preload.ts\"]\n"
        },
        {
          "name": "bunfig.toml",
          "type": "blob",
          "size": 0.36,
          "content": "[test]\n# Large monorepos (like Bun) may want to specify the test directory more specifically \n# By default, `bun test` scans every single folder recursively which, if you\n# have a gigantic submodule (like WebKit), requires lots of directory\n# traversals\n#\n# Instead, we can only scan the test directory for Bun's runtime tests\nroot = \"test\"\npreload = \"./test/preload.ts\"\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "dockerhub",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "entitlements.debug.plist",
          "type": "blob",
          "size": 0.67,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>com.apple.security.cs.allow-jit</key>\n    <true/>\n    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>\n    <true/>\n    <key>com.apple.security.cs.disable-executable-page-protection</key>\n    <true/>\n    <key>com.apple.security.cs.allow-dyld-environment-variables</key>\n    <true/>\n    <key>com.apple.security.cs.disable-library-validation</key>\n    <true/>\n    <key>com.apple.security.get-task-allow</key>\n    <true/>\n    <key>com.apple.security.cs.debugger</key>\n    <true/>\n</dict>\n</plist>\n"
        },
        {
          "name": "entitlements.plist",
          "type": "blob",
          "size": 0.56,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>com.apple.security.cs.allow-jit</key>\n    <true/>\n    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>\n    <true/>\n    <key>com.apple.security.cs.disable-executable-page-protection</key>\n    <true/>\n    <key>com.apple.security.cs.allow-dyld-environment-variables</key>\n    <true/>\n    <key>com.apple.security.cs.disable-library-validation</key>\n    <true/>\n</dict>\n</plist>"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "jsconfig.json",
          "type": "blob",
          "size": 0.42,
          "content": "{\n  \"extends\": \"./tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"importsNotUsedAsValues\": \"preserve\"\n  },\n  \"include\": [\".\", \"packages/bun-types/index.d.ts\"],\n  \"exclude\": [\n    \"src/test\",\n    \"src/js/out\",\n    // \"src/js/builtins\",\n    \"packages\",\n    \"bench\",\n    \"examples/*/*\",\n    \"test\",\n    \"vendor\",\n    \"bun-webkit\",\n    \"vendor/WebKit\",\n    \"src/api/demo\",\n    \"node_modules\"\n  ],\n  \"files\": [\"src/js/builtins.d.ts\"]\n}\n"
        },
        {
          "name": "misctools",
          "type": "tree",
          "content": null
        },
        {
          "name": "oxlint.json",
          "type": "blob",
          "size": 1.67,
          "content": "{\n  \"$schema\": \"https://raw.githubusercontent.com/oxc-project/oxc/refs/heads/main/npm/oxlint/configuration_schema.json\",\n  \"categories\": {\n    \"correctness\": \"warn\" // TODO: gradually fix bugs and turn this to error\n  },\n  \"rules\": {\n    \"const-comparisons\": \"off\", // TODO: there's a bug when comparing private identifiers. Re-enable once it's fixed.\n    \"no-cond-assign\": \"error\",\n    \"no-const-assign\": \"error\",\n    \"no-debugger\": \"error\",\n    \"no-dupe-class-members\": \"error\",\n    \"no-dupe-keys\": \"error\",\n    \"no-empty-pattern\": \"error\",\n    \"import/no-duplicates\": \"error\",\n\n    \"no-useless-escape\": \"off\" // there's a lot of these. Should be fixed eventually.\n  },\n  \"ignorePatterns\": [\n    \"vendor\",\n    \"build\",\n    \"test/snapshots/**\",\n    \"bench/react-hello-world/*.js\",\n\n    \"test/js/node/**/parallel/**\",\n    \"test/js/node/test/fixtures\", // full of JS with intentional syntax errors\n    \"test/snippets/**\",\n    \"test/regression/issue/14477/*.tsx\",\n    \"test/js/**/*bad.js\",\n    \"test/bundler/transpiler/decorators.test.ts\", // uses `arguments` as decorator\n    \"test/bundler/native-plugin.test.ts\", // parser doesn't handle import metadata\n    \"test/bundler/transpiler/with-statement-works.js\" // parser doesn't allow `with` statement\n  ],\n  \"overrides\": [\n    {\n      \"files\": [\"test/**\", \"examples/**\", \"packages/bun-internal/test/runners/**\"],\n      \"rules\": {\n        \"no-unused-vars\": \"off\",\n        \"no-unused-private-class-members\": \"off\",\n        \"no-unnecessary-await\": \"off\"\n      }\n    },\n    {\n      \"files\": [\"test/**\", \"bench/**\"],\n      \"rules\": {\n        \"no-shadow-restricted-names\": \"off\",\n        \"no-empty-file\": \"off\",\n        \"no-unnecessary-await\": \"off\"\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 4.4,
          "content": "{\n  \"private\": true,\n  \"name\": \"bun\",\n  \"version\": \"1.1.44\",\n  \"workspaces\": [\n    \"./packages/bun-types\"\n  ],\n  \"devDependencies\": {\n    \"@types/bun\": \"^1.1.3\",\n    \"@types/react\": \"^18.3.3\",\n    \"@typescript-eslint/eslint-plugin\": \"^7.11.0\",\n    \"@typescript-eslint/parser\": \"^7.11.0\",\n    \"@vscode/debugadapter\": \"^1.65.0\",\n    \"esbuild\": \"^0.21.4\",\n    \"eslint\": \"^9.4.0\",\n    \"eslint-config-prettier\": \"^9.1.0\",\n    \"mitata\": \"^0.1.11\",\n    \"peechy\": \"0.4.34\",\n    \"prettier\": \"^3.2.5\",\n    \"prettier-plugin-organize-imports\": \"^4.0.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"source-map-js\": \"^1.2.0\",\n    \"typescript\": \"^5.7.2\",\n    \"caniuse-lite\": \"^1.0.30001620\",\n    \"autoprefixer\": \"^10.4.19\",\n    \"@mdn/browser-compat-data\": \"~5.5.28\"\n  },\n  \"resolutions\": {\n    \"bun-types\": \"workspace:packages/bun-types\"\n  },\n  \"scripts\": {\n    \"build\": \"bun run build:debug\",\n    \"build:debug\": \"bun ./scripts/build.mjs -GNinja -DCMAKE_BUILD_TYPE=Debug -B build/debug\",\n    \"build:valgrind\": \"bun ./scripts/build.mjs -GNinja -DCMAKE_BUILD_TYPE=Debug -DENABLE_BASELINE=ON -ENABLE_VALGRIND=ON -B build/debug-valgrind\",\n    \"build:release\": \"bun ./scripts/build.mjs -GNinja -DCMAKE_BUILD_TYPE=Release -B build/release\",\n    \"build:ci\": \"bun ./scripts/build.mjs -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=ON -DCI=true -B build/release-ci --verbose --fresh\",\n    \"build:assert\": \"bun ./scripts/build.mjs -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_ASSERTIONS=ON -DENABLE_LOGS=ON -B build/release-assert\",\n    \"build:logs\": \"bun ./scripts/build.mjs -GNinja -DCMAKE_BUILD_TYPE=Release -DENABLE_LOGS=ON -B build/release-logs\",\n    \"build:safe\": \"bun ./scripts/build.mjs -GNinja -DCMAKE_BUILD_TYPE=Release -DZIG_OPTIMIZE=ReleaseSafe -B build/release-safe\",\n    \"build:smol\": \"bun ./scripts/build.mjs -GNinja -DCMAKE_BUILD_TYPE=MinSizeRel -B build/release-smol\",\n    \"build:local\": \"bun ./scripts/build.mjs -GNinja -DCMAKE_BUILD_TYPE=Debug -DWEBKIT_LOCAL=ON -B build/debug-local\",\n    \"build:release:local\": \"bun ./scripts/build.mjs -GNinja -DCMAKE_BUILD_TYPE=Release -DWEBKIT_LOCAL=ON -B build/release-local\",\n    \"build:release:with_logs\": \"cmake . -DCMAKE_BUILD_TYPE=Release -DENABLE_LOGS=true -GNinja -Bbuild-release && ninja -Cbuild-release\",\n    \"build:debug-zig-release\": \"cmake . -DCMAKE_BUILD_TYPE=Release -DZIG_OPTIMIZE=Debug -GNinja -Bbuild-debug-zig-release && ninja -Cbuild-debug-zig-release\",\n    \"css-properties\": \"bun run src/css/properties/generate_properties.ts\",\n    \"bump\": \"bun ./scripts/bump.ts\",\n    \"typecheck\": \"tsc --noEmit && cd test && bun run typecheck\",\n    \"fmt\": \"bun run prettier\",\n    \"fmt:cpp\": \"bun run clang-format\",\n    \"fmt:zig\": \"bun run zig-format\",\n    \"lint\": \"oxlint --config oxlint.json\",\n    \"lint:fix\": \"oxlint --config oxlint.json --fix\",\n    \"test\": \"node scripts/runner.node.mjs --exec-path ./build/debug/bun-debug\",\n    \"test:release\": \"node scripts/runner.node.mjs --exec-path ./build/release/bun\",\n    \"banned\": \"bun packages/bun-internal-test/src/linter.ts\",\n    \"zig\": \"vendor/zig/zig.exe\",\n    \"zig:fmt\": \"bun run zig-format\",\n    \"zig:check\": \"bun run zig build check --summary new\",\n    \"zig:check-all\": \"bun run zig build check-all --summary new\",\n    \"zig:check-windows\": \"bun run zig build check-windows --summary new\",\n    \"analysis\": \"bun ./scripts/build.mjs -DCMAKE_BUILD_TYPE=Debug -DENABLE_ANALYSIS=ON -DENABLE_CCACHE=OFF -B build/analysis\",\n    \"analysis:no-llvm\": \"bun run analysis -DENABLE_LLVM=OFF\",\n    \"clang-format\": \"bun run analysis --target clang-format\",\n    \"clang-format:check\": \"bun run analysis --target clang-format-check\",\n    \"clang-format:diff\": \"bun run analysis --target clang-format-diff\",\n    \"clang-tidy\": \"bun run analysis --target clang-tidy\",\n    \"clang-tidy:check\": \"bun run analysis --target clang-tidy-check\",\n    \"clang-tidy:diff\": \"bun run analysis --target clang-tidy-diff\",\n    \"zig-format\": \"bun run analysis:no-llvm --target zig-format\",\n    \"zig-format:check\": \"bun run analysis:no-llvm --target zig-format-check\",\n    \"zig-format:diff\": \"bun run analysis:no-llvm --target zig-format-diff\",\n    \"prettier\": \"bun run analysis:no-llvm --target prettier\",\n    \"prettier:check\": \"bun run analysis:no-llvm --target prettier-check\",\n    \"prettier:extra\": \"bun run analysis:no-llvm --target prettier-extra\",\n    \"prettier:diff\": \"bun run analysis:no-llvm --target prettier-diff\",\n    \"node:test\": \"node ./scripts/runner.node.mjs --quiet --exec-path=$npm_execpath --node-tests \"\n  }\n}\n"
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "patches",
          "type": "tree",
          "content": null
        },
        {
          "name": "root.zig",
          "type": "blob",
          "size": 0.44,
          "content": "pub usingnamespace @import(\"./src/main.zig\");\n\n/// These functions are used throughout Bun's codebase.\npub const bun = @import(\"./src/bun.zig\");\n\npub const completions = struct {\n    pub const bash = @embedFile(\"./completions/bun.bash\");\n    pub const zsh = @embedFile(\"./completions/bun.zsh\");\n    pub const fish = @embedFile(\"./completions/bun.fish\");\n};\n\npub const JavaScriptCore = @import(\"./src/jsc.zig\");\npub const C = @import(\"./src/c.zig\");\n"
        },
        {
          "name": "root_wasm.zig",
          "type": "blob",
          "size": 0.4,
          "content": "pub usingnamespace @import(\"src/main_wasm.zig\");\n\npub const bun = @import(\"src/bun.zig\");\n\npub const completions = struct {};\npub const is_bindgen = true;\npub const JavaScriptCore = struct {\n    pub fn markBinding(_: @import(\"std\").builtin.SourceLocation) void {\n        unreachable;\n    }\n\n    pub const ZigString = struct {};\n};\n\npub const C = struct {};\npub const build_options = @import(\"build_options\");\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.base.json",
          "type": "blob",
          "size": 0.85,
          "content": "{\n  \"compilerOptions\": {\n    \"composite\": true,\n\n    // Enable latest features\n    \"lib\": [\"ESNext\"],\n    \"target\": \"ESNext\",\n    \"module\": \"ESNext\",\n    \"moduleDetection\": \"force\",\n    \"jsx\": \"react-jsx\",\n    \"allowJs\": true,\n    \"resolveJsonModule\": true,\n\n    // Bundler mode\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    // TODO: enable this\n    // \"verbatimModuleSyntax\": true,\n    \"noEmit\": true,\n\n    // Best practices\n    \"strict\": true,\n    \"skipLibCheck\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"isolatedModules\": true,\n\n    // Stricter type-checking\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false,\n    \"noPropertyAccessFromIndexSignature\": false,\n    \"noImplicitAny\": false,\n    \"noImplicitThis\": false,\n\n    // Enable decorators\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true\n  }\n}\n"
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.35,
          "content": "{\n  \"files\": [],\n  \"include\": [],\n  \"compilerOptions\": {\n    \"noEmit\": true,\n    \"skipLibCheck\": true,\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true\n  },\n  \"references\": [\n    //\n    { \"path\": \"./src\" },\n    { \"path\": \"./src/bake\" },\n    { \"path\": \"./src/js\" },\n    { \"path\": \"./test\" },\n    { \"path\": \"./packages/bun-types\" }\n  ]\n}\n"
        },
        {
          "name": "workspace.code-workspace",
          "type": "blob",
          "size": 2.26,
          "content": "{\n  \"folders\": [\n\t{\n\t\t\"path\": \".\"\n\t}\n],\n  \"settings\": {\n    \"git.autoRepositoryDetection\": \"openEditors\",\n    \"search.quickOpen.includeSymbols\": false,\n    \"search.seedWithNearestWord\": true,\n    \"search.smartCase\": true,\n    \"search.followSymlinks\": false,\n    \"zig.buildOnSave\": false,\n    \"files.associations\": {\n      \"*.idl\": \"cpp\",\n      \"memory\": \"cpp\",\n      \"iostream\": \"cpp\",\n      \"algorithm\": \"cpp\",\n      \"random\": \"cpp\",\n      \"ios\": \"cpp\",\n      \"filesystem\": \"cpp\",\n      \"__locale\": \"cpp\",\n      \"type_traits\": \"cpp\",\n      \"__mutex_base\": \"cpp\",\n      \"__string\": \"cpp\",\n      \"string\": \"cpp\",\n      \"string_view\": \"cpp\",\n      \"typeinfo\": \"cpp\",\n      \"__config\": \"cpp\",\n      \"__nullptr\": \"cpp\",\n      \"exception\": \"cpp\",\n      \"__bit_reference\": \"cpp\",\n      \"atomic\": \"cpp\",\n      \"utility\": \"cpp\",\n      \"sstream\": \"cpp\",\n      \"__functional_base\": \"cpp\",\n      \"new\": \"cpp\",\n      \"__debug\": \"cpp\",\n      \"__errc\": \"cpp\",\n      \"__hash_table\": \"cpp\",\n      \"__node_handle\": \"cpp\",\n      \"__split_buffer\": \"cpp\",\n      \"__threading_support\": \"cpp\",\n      \"__tuple\": \"cpp\",\n      \"array\": \"cpp\",\n      \"bit\": \"cpp\",\n      \"bitset\": \"cpp\",\n      \"cctype\": \"cpp\",\n      \"chrono\": \"cpp\",\n      \"clocale\": \"cpp\",\n      \"cmath\": \"cpp\",\n      \"complex\": \"cpp\",\n      \"condition_variable\": \"cpp\",\n      \"cstdarg\": \"cpp\",\n      \"cstddef\": \"cpp\",\n      \"cstdint\": \"cpp\",\n      \"cstdio\": \"cpp\",\n      \"cstdlib\": \"cpp\",\n      \"cstring\": \"cpp\",\n      \"ctime\": \"cpp\",\n      \"cwchar\": \"cpp\",\n      \"cwctype\": \"cpp\",\n      \"deque\": \"cpp\",\n      \"fstream\": \"cpp\",\n      \"functional\": \"cpp\",\n      \"initializer_list\": \"cpp\",\n      \"iomanip\": \"cpp\",\n      \"iosfwd\": \"cpp\",\n      \"istream\": \"cpp\",\n      \"iterator\": \"cpp\",\n      \"limits\": \"cpp\",\n      \"locale\": \"cpp\",\n      \"mutex\": \"cpp\",\n      \"optional\": \"cpp\",\n      \"ostream\": \"cpp\",\n      \"ratio\": \"cpp\",\n      \"stack\": \"cpp\",\n      \"stdexcept\": \"cpp\",\n      \"streambuf\": \"cpp\",\n      \"system_error\": \"cpp\",\n      \"thread\": \"cpp\",\n      \"tuple\": \"cpp\",\n      \"unordered_map\": \"cpp\",\n      \"unordered_set\": \"cpp\",\n      \"vector\": \"cpp\",\n      \"__bits\": \"cpp\",\n      \"__tree\": \"cpp\",\n      \"map\": \"cpp\",\n      \"numeric\": \"cpp\",\n      \"set\": \"cpp\",\n      \"__memory\": \"cpp\",\n      \"memory_resource\": \"cpp\"\n    },\n    \"git.ignoreLimitWarning\": true\n  }\n}\n"
        }
      ]
    }
  ]
}