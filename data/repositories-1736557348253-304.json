{
  "metadata": {
    "timestamp": 1736557348253,
    "page": 304,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "JuliaLang/julia",
      "stars": 46124,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".buildkite-external-version",
          "type": "blob",
          "size": 0,
          "content": "main\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.28,
          "content": "Language: Cpp\nStandard: Cpp11\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignConsecutiveMacros: false\nAlignEscapedNewlines: Left\nAlignOperands: true\nAlignTrailingComments: false\nAllowAllArgumentsOnNextLine: true\nAllowAllConstructorInitializersOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLambdasOnASingleLine: All\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: true\nBinPackParameters: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Stroustrup\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializers: BeforeColon\nBreakConstructorInitializersBeforeComma: false\nBreakInheritanceList: BeforeColon\nBreakStringLiterals: false\nColumnLimit: 92\nCommentPragmas: '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 2\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDeriveLineEnding: true\nDerivePointerAlignment: false\nDisableFormat: false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: false\nIncludeBlocks: Preserve\nIncludeCategories:\n  - Regex:           '^(<|\"(llvm|llvm-c|clang|clang-c)/)'\n    Priority:        2\n  - Regex:           '^<.*'\n    Priority:        3\n  - Regex:           '.*'\n    Priority:        1\nIncludeIsMainSourceRegex: ''\nIndentCaseLabels: false\nIndentGotoLabels: false\nIndentPPDirectives: None\nIndentWidth: 4\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd: ''\nMaxEmptyLinesToKeep: 2\nNamespaceIndentation: None\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 30\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Right\nReflowComments: true\nSortIncludes: true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInCStyleCastParentheses: false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nTabWidth: 8\nUseCRLF: true\nUseTab: Never\nForEachMacros:\n  - JL_TRY\n  - JL_CATCH\nStatementMacros:\n  - bi_fintrinsic\n  - bi_iintrinsic_fast\n  - bi_intrinsic_ctype\n  - bool_fintrinsic\n  - bool_iintrinsic_fast\n  - bool_intrinsic_ctype\n  - checked_intrinsic_ctype\n  - cvt_iintrinsic\n  - fpiseq_n\n  - ter_fintrinsic\n  - ter_intrinsic_ctype\n  - un_fintrinsic\n  - un_fintrinsic_withtype\n  - un_iintrinsic_ctype\n  - uu_iintrinsic_ctype\n"
        },
        {
          "name": ".clangd",
          "type": "blob",
          "size": 0.11,
          "content": "CompileFlags:\n  Add: [-I., -I.., -Iflisp, -Isupport, -I../support, -I../usr/include, -I../../usr/include, -Wall,]\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.05,
          "content": "coverage:\n  status:\n    project: off\n    patch: off\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.57,
          "content": "# .git-blame-ignore-revs\n# whitespace: end text files with single newlines\n3903fa54a638d4546ef50e56f91f0705a8ab11ef\n# whitespace: use only UNIX line endings (\\n)\ne66bfa5dd32f93e76068c00ad882c1fc839c5af8\n# whitespace: replace non-breaking space => space\n100a741e7ab38c91d48cc929bb001afc8e09261f\n# whitespace: replace tabs => space\nb03e8ab9c7bd3e001add519571858fa04d6a249b\n# whitespace: replace 2-space => 4-space for indentation\nf1b567507731129f90ca0dffc8fbc0ed98b6a15d\n# whitespace: replace multiple spaces after period with a single space\nf942c29bb0d02cc24f19712c642ac72ffc85a26b\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.06,
          "content": "# treat all files as files that should not be modified\r\n* -text\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.56,
          "content": "/*.tar.gz\n/tmp\n/dist\n/dist-extras\n/julia\n/julia.bat\n/usr\n/oprofile_data\n/usr-staging\n/Make.user\n/julia-*\n/source-dist.tmp\n/source-dist.tmp1\n\n*.expmap\n*.exe\n*.dll\n*.dwo\n*.do\n*.o\n*.o.tmp\n*.obj\n*.so\n*.dylib\n*.dSYM\n*.h.gen\n*.jl.cov\n*.jl.*.cov\n*.jl.mem\n*.jl.*.mem\n*.ji\n\n/perf*\n.DS_Store\n.idea/*\n.vscode/*\n.zed/*\n*.heapsnapshot\n.cache\n# Buildkite: Ignore the entire .buildkite directory\n/.buildkite\n\n# Builtkite: json test data\n/test/results.json\n\n# Buildkite: Ignore the unencrypted repo_key\nrepo_key\n\n# Buildkite: Ignore any agent keys (public or private) we have stored\nagent_key*\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 13.1,
          "content": "JuliaLang <julia-dev@googlegroups.com> <julia-dev@googlegroups.com>\nJuliaLang <julia-dev@googlegroups.com> <julia-math@googlegroups.com>\n\nJeff Bezanson <jeff.bezanson@gmail.com> <jeff.bezanson@gmail.com>\nJeff Bezanson <jeff.bezanson@gmail.com> <bezanson@beagle.darwinproject.mit.edu>\nJeff Bezanson <jeff.bezanson@gmail.com> <bezanson@caspian.caspian.mit.edu>\nJeff Bezanson <jeff.bezanson@gmail.com> <bezanson@evolution.local>\nJeff Bezanson <jeff.bezanson@gmail.com> <bezanson@mathstation045.mit.edu>\nJeff Bezanson <jeff.bezanson@gmail.com> <bezanson@mathstation049.mit.edu>\nJeff Bezanson <jeff.bezanson@gmail.com> <bezanson@mathstation186.mit.edu>\nJeff Bezanson <jeff.bezanson@gmail.com> <bezanson@post.harvard.edu>\nJeff Bezanson <jeff.bezanson@gmail.com> <bezanson@scooby-doo.csail.mit.edu>\nJeff Bezanson <jeff.bezanson@gmail.com> <bezanson@shaggy.csail.mit.edu>\nJeff Bezanson <jeff.bezanson@gmail.com> <jeff@lagann.(none)>\nJeff Bezanson <jeff.bezanson@gmail.com> <julia@beowulf1.csail.mit.edu>\nJeff Bezanson <jeff.bezanson@gmail.com> <vcloud@julia02.domain.local>\nJeff Bezanson <jeff.bezanson@gmail.com> <je24857@gp42-bezanson.llan.ll.mit.edu>\n\nStefan Karpinski <stefan@karpinski.org> <stefan@karpinski.org>\nStefan Karpinski <stefan@karpinski.org> <stefan.karpinski@gmail.com>\nStefan Karpinski <stefan@karpinski.org> <stefan.karpinski@post.harvard.edu>\n\nViral B. Shah <viral@mayin.org> <viral@mayin.org>\nViral B. Shah <viral@mayin.org> <viral@beowulf1.csail.mit.edu>\nViral B. Shah <viral@mayin.org> <viral@neumann.cs.ucsb.edu>\nViral B. Shah <viral@mayin.org> <viral@ubuntu-VirtualBox.(none)>\nViral B. Shah <viral@mayin.org> <viral@juliacomputing.com>\nViral B. Shah <viral@mayin.org> <ViralBShah@users.noreply.github.com>\n\nGeorge Xing <gxing@mit.edu> <gxing@mit.edu>\nGeorge Xing <gxing@mit.edu> <noobiecubie@gmail.com>\n\nStephan Boyer <boyers@mit.edu> <boyers@mit.edu>\nStephan Boyer <boyers@mit.edu> <stephan@julialang.xvm.mit.edu>\nStephan Boyer <boyers@mit.edu> <stephan@ubuntu.(none)>\nStephan Boyer <boyers@mit.edu> <stephan@ubuntu.ubuntu-domain>\n\nJiahao Chen <jiahao@mit.edu> Jiahao Chen (陈家豪) <jiahao@mit.edu>\n\nGiuseppe Zingales <giuseppe.pet.zingales@gmail.com> <giuseppe.pet.zingales@gmail.com>\nGiuseppe Zingales <giuseppe.pet.zingales@gmail.com> <g3@ubuntu.ubuntu-domain>\n\nJameson Nash <jameson@juliacomputing.com> <jameson@juliacomputing.com>\nJameson Nash <jameson@juliacomputing.com> <vtjnash@comcast.net>\nJameson Nash <jameson@juliacomputing.com> <vtjnash@gmail.com>\nJameson Nash <jameson@juliacomputing.com> <vtjnash@users.noreply.github.com>\nJameson Nash <jameson@juliacomputing.com> <jameson@mit.edu>\n\nAlan Edelman <mit.edelman@gmail.com> <mit.edelman@gmail.com>\n\nPlayMyCode <joe@playmycode.com> <joe@playmycode.com>\nPlayMyCode <joe@playmycode.com> <hello@playmycode.com>\n\nCorey M. Hoffstein <corey@hoffstein.com> <corey@hoffstein.com>\nCorey M. Hoffstein <corey@hoffstein.com> <corey@newfoundresearch.com>\n\nStefan Kroboth <stefan.kroboth@gmail.com> <stefan.kroboth@gmail.com>\n\nTim Holy <tim.holy@gmail.com> <tim.holy@gmail.com>\nTim Holy <tim.holy@gmail.com> <holy@wustl.edu>\n\nPatrick O'Leary <patrick.oleary@gmail.com> <patrick.oleary@gmail.com>\n\nIvan Mantova <horphus@gmail.com> <horphus@gmail.com>\n\nKeno Fischer <keno@juliacomputing.com> <keno@juliacomputing.com>\nKeno Fischer <keno@juliacomputing.com> <kfischer@college.harvard.edu>\nKeno Fischer <keno@juliacomputing.com> <keno@alumni.harvard.edu>\nKeno Fischer <keno@juliacomputing.com> <kfischer+github@college.harvard.edu>\nKeno Fischer <keno@juliacomputing.com> <kenof@stanford.edu>\nKeno Fischer <keno@juliacomputing.com> <keno@30-9-48.wireless.csail.mit.edu>\n\nHarlan Harris <harlan@harris.name> <harlan@harris.name>\nHarlan Harris <harlan@harris.name> <harlan.harris@kaplan.com>\n\nDouglas Bates <dmbates@gmail.com> <dmbates@gmail.com>\n\nAndreas Noack Jensen <andreasnoackjensen@gmail.com> <andreasnoackjensen@gmail.com>\nAndreas Noack Jensen <andreasnoackjensen@gmail.com> <andreas@Andreass-MacBook-Pro.local>\nAndreas Noack Jensen <andreasnoackjensen@gmail.com> <andreasnoack@Andreass-MacBook-Pro-2.local>\nAndreas Noack Jensen <andreasnoackjensen@gmail.com> <andreas@noack.dk>\n\nWestley Argentum Hennigh <WestleyArgentum@gmail.com> <WestleyArgentum@gmail.com>\nWestley Argentum Hennigh <WestleyArgentum@gmail.com> <whennigh@forio.com>\n\nGeorge V. Neville-Neil <gnn@freebsd.org> <gnn@freebsd.org>\nGeorge V. Neville-Neil <gnn@freebsd.org> <gvnn3>\n\nAlessandro Andrioni Silva <alessandroandrioni@gmail.com> <alessandroandrioni@gmail.com>\nAlessandro Andrioni Silva <alessandroandrioni@gmail.com> <jakedust@gmail.com>\n\nToivo Henningsson <toivo.h.h@gmail.com> <toivo.h.h@gmail.com>\nToivo Henningsson <toivo.h.h@gmail.com> <toivo@control.lth.se>\n\nAdam Savitzky <adam.savitzky@gmail.com> <adam.savitzky@gmail.com>\nAdam Savitzky <adam.savitzky@gmail.com> <asavitzky@forio.com>\n\nDavid Slate <dslate@speakeasy.net> <dslate@speakeasy.net>\n\nFrancois Pepin <fpepin@gmail.com> <fpepin@gmail.com>\n\nWaldir Pimenta <waldir@email.com> <waldir@email.com>\n\nSteven G. Johnson <stevenj@alum.mit.edu> <stevenj@mit.edu>\nSteven G. Johnson <stevenj@alum.mit.edu> <stevenj@math.mit.edu>\nSteven G. Johnson <stevenj@alum.mit.edu> <stevenj@fftw.org>\nSteven G. Johnson <stevenj@alum.mit.edu> <stevenj.mit@gmail.com>\nSteven G. Johnson <stevenj@alum.mit.edu> <stevenj@ab-initio.mit.edu>\n\nIsaiah Norton <isaiah.norton@gmail.com> <isaiah.norton@gmail.com>\nIsaiah Norton <isaiah.norton@gmail.com> <inorton@bwh.harvard.edu>\nIsaiah Norton <isaiah.norton@gmail.com> <ihnorton@users.noreply.github.com>\nBlake Johnson <blakejohnson04@gmail.com> <blakejohnson04@gmail.com>\nBlake Johnson <blakejohnson04@gmail.com> <bjohnson@bbn.com>\n\nMarcus Silva <msilva@bbn.com> <msilva@bbn.com>\nMarcus Silva <msilva@bbn.com> <marcus.ps+github@gmail.com>\n\nAmit Murthy <amit.murthy@gmail.com> <amit.murthy@gmail.com>\n\nTanmay Mohapatra <tanmaykm@gmail.com> <tanmaykm@gmail.com>\nTanmay Mohapatra <tanmaykm@gmail.com> <tanmaykm@julia.mit.edu>\n\nDan Luu <danluu@gmail.com> <danluu@gmail.com>\nDan Luu <danluu@gmail.com> <Dan>\n\nKevin Bache <kevin.bache@gmail.com> <kevin.bache@gmail.com>\nKevin Bache <kevin.bache@gmail.com> <trendymoniker@gmail.com>\n\nRick <rickhg12hs@gmail.com> <rickhg12hs@gmail.com>\nRick <rickhg12hs@gmail.com> <rickhg12hs@users.noreply.github.com>\n\nDavid Smith <david.smith@gmail.com> <david.smith@gmail.com>\nDavid Smith <david.smith@gmail.com> <david.smith@vanderbilt.edu>\n\nCarlos Becker  <carlosbecker@gmail.com> <cjbecker@iccvlabsrv22.epfl.ch>\n\nFabian R Lischka <github@fabian-lischka.de> <hackerschool@fabian-lischka.de>\n\nJames J Porter <porterjamesj@gmail.com>\n\nJay Weisskopf <jay@jayschwa.net> <jweisskopf@ebay.com>\n\nJoseph Perla <joseph@notanemail.com> <joseph@ not an email.com>\n\nJutho <jutho.haegeman@ugent.be> <jutho.haegeman@ugent.be>\nJutho <jutho.haegeman@ugent.be> <Jutho@users.noreply.github.com>\n\nTomas Lycken <tomas.lycken@gmail.com> <tomas.lycken@gmail.com>\nTomas Lycken <tomas.lycken@gmail.com> <tlycken@kth.se>\n\nSimon Byrne <simon.byrne@gmail.com> <byrne@stats.ucl.ac.uk>\nSimon Byrne <simon.byrne@gmail.com> <simonbyrne@gmail.com>\n\nJake Bolewski <jakebolewski@gmail.com>\n\nLeah Hanson <astrieanna@gmail.com> <leah.a.hanson@gmail.com>\n\nLei Wang <kookbond@gmail.com> <kookbond@gmail.com>\nLei Wang <kookbond@gmail.com> <wlbksy@users.noreply.github.com>\n\nKevin Squire <kevin.squire@gmail.com> <kevin@secondspectrum.com>\n\nMichael Fox <415fox@gmail.com> <m@antikc.com>\n\nMiles Gould <mgould1@inf.ed.ac.uk> <miles@assyrian.org.uk>\n\nPierre-Yves Gerardy <py@py.gy> <pygy79@gmail.com>\n\nRon Rock <rrock@uchicago.edu> <rsrock@users.noreply.github.com>\n\nTony Kelman <tony@kelman.net>\n\nTobias Knopp <tobias@knoppweb.de>\n\nBen Arthur <bjarthur70@gmail.com> <bjarthur70@gmail.com>\nBen Arthur <bjarthur70@gmail.com> <arthurb@hhmi.org>\n\nOdd Andersen <odd.andersen@gmail.com> <odd.andersen@gmail.com>\nOdd Andersen <odd.andersen@gmail.com> <odd.andersen@sintef.no>\n\nRonan Arraes Jardim Chagas <ronisbr@gmail.com> <ronisbr@gmail.com>\nRonan Arraes Jardim Chagas <ronisbr@gmail.com> <ronan.chagas@ronanchagas-ops.ete.inpe.br>\n\nTim Besard <tim.besard@gmail.com> <tim.besard@gmail.com>\nTim Besard <tim.besard@gmail.com> <tim.besard@elis.ugent.be>\n\nTracy Wadleigh <twadleigh@arete.com> <twadleigh@arete.com>\nTracy Wadleigh <twadleigh@arete.com> <twadleigh@.corp.arete.com>\n\nMike Innes <mike.j.innes@gmail.com>\n\nSean Garborg <sean.garborg@gmail.com>\n\nScott P. Jones <scottjones@alum.mit.edu> <scottjones@alum.mit.edu>\nScott P. Jones <scottjones@alum.mit.edu> <ScottPJones@users.noreply.github.com>\n\nM. Prentis <mcprentiss@gmail.com> <mcprentiss@gmail.com>\nM. Prentis <mcprentiss@gmail.com> <mprentis@yahoo.com>\n\nPeter <peter.margo@gmx.de> <peter.margo@gmx.de>\nPeter <peter.margo@gmx.de> <https://github.com/peter1000>\n\nRafael Fourquet <fourquet.rafael@gmail.com> <fourquet.rafael@gmail.com>\nRafael Fourquet <fourquet.rafael@gmail.com> <fourquet.rafael+github@gmail.com> <fourquet.rafael+github@gmail.com>\nRafael Fourquet <fourquet.rafael@gmail.com> <rfourquet@users.noreply.github.com>\n\nDan Wlasiuk <milktrader@gmail.com> <milktrader@gmail.com>\nDan Wlasiuk <milktrader@gmail.com> <milktrader@hushmail.com>\n\nRene Donner <rene@donner.at> <rene@donner.at>\nRene Donner <rene@donner.at> <github@donner.at>\n\nWaldir Pimenta <waldyrious@gmail.com> <waldyrious@gmail.com>\nWaldir Pimenta <waldyrious@gmail.com> <waldir@email.com>\n\nYoung Wu <doomsplayer@gmail.com> <doomsplayer@gmail.com>\n\nDaan Huybrechs <daan.huybrechs@cs.kuleuven.be> <daan.huybrechs@cs.kuleuven.be>\n\nJey Kottalam <jey@kottalam.net> <jey@kottalam.net>\nJey Kottalam <jey@kottalam.net> <jey@cs.berkeley.edu>\n\nJohn Myles White <jmw@johnmyleswhite.com> <jmw@johnmyleswhite.com>\nJohn Myles White <jmw@johnmyleswhite.com> <johnmyleswhite@gmail.com>\n\nKatharine Hyatt <kslimes@gmail.com> <kslimes@gmail.com>\nKatharine Hyatt <kslimes@gmail.com> <kshyatt@users.noreply.github.com>\nKatharine Hyatt <kslimes@gmail.com> <kshyatt@users.noreply.github.com>\nKatharine Hyatt <kslimes@gmail.com> <kshyatt@physics.ucsb.edu>\nKatharine Hyatt <kslimes@gmail.com> <khyatt@flatironinstitute.org>\n\nOscar Blumberg <naellyn@gmail.com> <naellyn@gmail.com>\nOscar Blumberg <naellyn@gmail.com> <oscar.blumberg@ens.fr>\n\nSeth Bromberger <seth@ncisecurity.com> <seth@ncisecurity.com>\nSeth Bromberger <seth@ncisecurity.com> <sbromberger@users.noreply.github.com>\n\nTomas Lycken <tomas.lycken@gmail.com> <tomas.lycken@gmail.com>\nTomas Lycken <tomas.lycken@gmail.com> <tlycken@users.noreply.github.com>\n\nTracy Wadleigh <tracy.wadleigh@gmail.com> <tracy.wadleigh@gmail.com>\nTracy Wadleigh <tracy.wadleigh@gmail.com> <twadleigh@arete.com>\n\nSacha Verweij <sacha.vers@gmail.com> <sacha.vers@gmail.com>\nSacha Verweij <sacha@stanford.edu> <sacha.vers@gmail.com>\nSacha Verweij <sacha@stanford.edu> <Sacha0@users.noreply.github.com>\nSacha Verweij <sacha@stanford.edu> <5799177+Sacha0@users.noreply.github.com>\n\nKristoffer Carlsson <kcarlsson89@gmail.com> <kcarlsson89@gmail.com>\nKristoffer Carlsson <kristoffer.carlsson@chalmers.se> <kcarlsson89@gmail.com>\n\nValentin Churavy <vchuravy@mit.edu> <vchuravy@mit.edu>\nValentin Churavy <vchuravy@mit.edu> <v.churavy@gmail.com>\nValentin Churavy <vchuravy@mit.edu> <vchuravy@users.noreply.github.com>\n\nCurtis Vogt <curtis.vogt@gmail.com> <curtis.vogt@gmail.com>\nCurtis Vogt <curtis.vogt@gmail.com> <curtis.vogt@invenia.ca>\n\nRafael Fourquet <fourquet.rafael@gmail.com> <fourquet.rafael@gmail.com>\nRafael Fourquet <fourquet.rafael@gmail.com> <fourquet.rafael+github@gmail.com>\n\nNathan Daly <NHDaly@gmail.com> <NHDaly@gmail.com>\nNathan Daly <NHDaly@gmail.com> <nhDaly@gmail.com>\n\nMosè Giordano <mose@gnu.org> <mose@gnu.org>\nMosè Giordano <mose@gnu.org> <giordano@users.noreply.github.com>\n\nAndy Ferris <ferris.andy@gmail.com> <ferris.andy@gmail.com>\nAndy Ferris <ferris.andy@gmail.com> <andy.ferris@roames.com.au>\n\nDavid Varela <varela.david.dv@gmail.com> <00.varela.david@gmail.com>\nDavid Varela <varela.david.dv@gmail.com> <varela.david.dv@gmail.com>\n\nArch D. Robison <arch.robison@intel.com> <arch.robison@intel.com>\nArch D. Robison <arch.robison@intel.com> <ArchRobison@users.noreply.github.com>\n\nMatt Bauman <mbauman@gmail.com> <mbauman@gmail.com>\nMatt Bauman <mbauman@gmail.com> <mbauman@juliacomputing.com>\n\nDaniel Karrasch <Daniel.Karrasch@gmx.de> <Daniel.Karrasch@gmx.de>\nDaniel Karrasch <Daniel.Karrasch@gmx.de> <daniel.karrasch@posteo.de>\n\nRoger Luo <rogerluo.rl18@gmail.com> <rogerluo.rl18@gmail.com>\nRoger Luo <rogerluo.rl18@gmail.com> <hiroger@qq.com>\n\nFrames White <me@oxinabox.net> <oxinabox@ucc.asn.au>\nFrames White <me@oxinabox.net> <lyndon.white@invenialabs.co.uk>\nFrames White <me@oxinabox.net> <lyndon.white@research.uwa.edu.au>\n\nClaire Foster <aka.c42f@gmail.com> <chris42f@gmail.com>\n\nJishnu Bhattacharya <jishnub.github@gmail.com> <jishnub.github@gmail.com>\nJishnu Bhattacharya <jishnub.github@gmail.com> <jishnub@users.noreply.github.com>\n\nShuhei Kadowaki <aviatesk@gmail.com> <aviatesk@gmail.com>\nShuhei Kadowaki <aviatesk@gmail.com> <40514306+aviatesk@users.noreply.github.com>\n\ninky <git@wo-class.cn>\ninky <git@wo-class.cn> <inkydragon@users.noreply.github.com>\n\nLilith Orion Hafner <lilithhafner@gmail.com> <Lilith.Hafner@gmail.com>\nLilith Orion Hafner <lilithhafner@gmail.com> <60898866+LilithHafner@users.noreply.github.com>\n\nTimothy <git@tecosaur.net>\n\nBhuminjay Soni <soni5happy@gmail.com>\nBhuminjay Soni <soni5happy@gmail.com> <76656712+11happy@users.noreply.github.com>\n\nFlorian Atteneder <florian.atteneder@gmail.com>\n"
        },
        {
          "name": "CITATION.bib",
          "type": "blob",
          "size": 0.5,
          "content": "% This article is the definitive citation for Julia.\n@article{Julia-2017,\n    title={Julia: A fresh approach to numerical computing},\n    author={Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B},\n    journal={SIAM {R}eview},\n    volume={59},\n    number={1},\n    pages={65--98},\n    year={2017},\n    publisher={SIAM},\n    doi={10.1137/141000671},\n    url={https://epubs.siam.org/doi/10.1137/141000671}\n}\n\n% For more details on research related to Julia, see https://julialang.org/research\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.99,
          "content": "# Official format description at https://citation-file-format.github.io\ncff-version: 1.2.0\nmessage: \"Cite this paper whenever you use Julia\"\nauthors:\n- family-names: \"Bezanson\"\n  given-names: \"Jeff\"\n- family-names: \"Edelman\"\n  given-names: \"Alan\"\n- family-names: \"Karpinski\"\n  given-names: \"Stefan\"\n- family-names: \"Shah\"\n  given-names: \"Viral B.\"\ntitle: \"Julia: A fresh approach to numerical computing\"\nversion: \"v1\"\nlicense: \"MIT\"\ndoi: \"10.1137/141000671\"\ndate-released: 2017-02-07\nurl: \"https://julialang.org\"\npreferred-citation:\n  authors:\n    - family-names: \"Bezanson\"\n      given-names: \"Jeff\"\n    - family-names: \"Edelman\"\n      given-names: \"Alan\"\n    - family-names: \"Karpinski\"\n      given-names: \"Stefan\"\n    - family-names: \"Shah\"\n      given-names: \"Viral B.\"\n  doi: \"10.1137/141000671\"\n  journal: \"SIAM Review\"\n  month: 9\n  start: 65\n  end: 98\n  pages: 33\n  title: \"Julia: A fresh approach to numerical computing\"\n  type: article\n  volume: 59\n  issue: 1\n  year: 2017\n  publisher:\n    name: \"SIAM\"\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 23.38,
          "content": "# Notes for Julia Contributors\n\nHi! If you are new to the Julia community: welcome, and thanks for trying Julia. Please be sure to respect our [community standards](https://julialang.org/community/standards) in all interactions.\n\nIf you are already familiar with Julia itself, this blog post by Katharine Hyatt on [Making your first Julia pull request](https://kshyatt.github.io/post/firstjuliapr/) is a great way to get started.\n\n## Learning Julia\n\n[The learning page](https://julialang.org/learning) has a great list of resources for new and experienced users alike.\n\n## Before filing an issue\n\n- Reporting a potential bug? Please read the \"[How to file a bug report](https://github.com/JuliaLang/julia/blob/master/CONTRIBUTING.md#how-to-file-a-bug-report)\" section to make sure that all necessary information is included.\n\n- Contributing code? Be sure to review the [contributor checklist](https://github.com/JuliaLang/julia/blob/master/CONTRIBUTING.md#contributor-checklist) for helpful tips on the tools we use to build Julia.\n\n- Library feature requests are generally not accepted on this issue tracker. New libraries should be developed as [packages](https://julialang.github.io/Pkg.jl/v1/creating-packages/). Discuss ideas for libraries at the [Julia Discourse forum](https://discourse.julialang.org). Doing so will often lead to pointers to existing projects and bring together collaborators with common interests.\n\n## Contributor Checklist\n\n* Create a [GitHub account](https://github.com/signup/free).\n\n* [Fork Julia](https://github.com/JuliaLang/julia/fork).\n\n* Build the software and libraries (the first time takes a while, but it's fast after that). Detailed build instructions are in the [README](https://github.com/JuliaLang/julia/tree/master/README.md). Julia depends on several external packages; most are automatically downloaded and installed, but are less frequently updated than Julia itself.\n\n* Keep Julia current. Julia is a fast-moving target, and many details of the language are still settling out. Keep the repository up-to-date and rebase work-in-progress frequently to make merges simpler.\n\n* Learn to use [git](https://git-scm.com), the version control system used by GitHub and the Julia project. Try a tutorial such as the one [provided by GitHub](https://try.GitHub.io/levels/1/challenges/1).\n\n* Review discussions on the [Julia Discourse forum](https://discourse.julialang.org).\n\n* For more detailed tips, read the [submission guide](https://github.com/JuliaLang/julia/blob/master/CONTRIBUTING.md#submitting-contributions) below.\n\n* Relax and have fun!\n\n## How to file a bug report\n\nA useful bug report filed as a GitHub issue provides information about how to reproduce the error.\n\n1. Before opening a new [GitHub issue](https://github.com/JuliaLang/julia/issues):\n  - Try searching the existing issues or the [Julia Discourse forum](https://discourse.julialang.org) to see if someone else has already noticed the same problem.\n  - Try some simple debugging techniques to help isolate the problem.\n    - Try running the code with the debug build of Julia with `make debug`, which produces the `usr/bin/julia-debug`.\n    - Consider running `julia-debug` with a debugger such as `gdb` or `lldb`. Obtaining even a simple [backtrace](http://www.unknownroad.com/rtfm/gdbtut/gdbsegfault.html) is very useful.\n    - If Julia segfaults, try following [these debugging tips](https://docs.julialang.org/en/v1/devdocs/backtraces/) to help track down the specific origin of the bug.\n\n2. If the problem is caused by a Julia package rather than core Julia, file a bug report with the relevant package author rather than here.\n\n3. When filing a bug report, provide where possible:\n  - The full error message, including the backtrace.\n  - A minimal working example, i.e. the smallest chunk of code that triggers the error. Ideally, this should be code that can be pasted into a REPL or run from a source file. If the code is larger than (say) 50 lines, consider putting it in a [gist](https://gist.github.com).\n  - The version of Julia as provided by the `versioninfo()` command. Occasionally, the longer output produced by `versioninfo(verbose = true)` may be useful also, especially if the issue is related to a specific package.\n\n4. When pasting code blocks or output, put triple backquotes (\\`\\`\\`) around the text so GitHub will format it nicely. Code statements should be surrounded by single backquotes (\\`). Be aware that the `@` sign tags users on GitHub, so references to macros should always be in single backquotes. See [GitHub's guide on Markdown](https://guides.github.com/features/mastering-markdown) for more formatting tricks.\n\n## Submitting contributions\n\n### Writing tests\n\nThere are never enough tests. Track [code coverage at Codecov](https://codecov.io/github/JuliaLang/julia), and help improve it.\n\n1. Go visit https://codecov.io/github/JuliaLang/julia.\n\n2. Browse through the source files and find some untested functionality (highlighted in red) that you think you might be able to write a test for.\n\n3. Write a test that exercises this functionality---you can add your test to one of the existing files, or start a new one, whichever seems most appropriate to you. If you're adding a new test file, make sure you include it in the list of tests in `test/choosetests.jl`. https://docs.julialang.org/en/v1/stdlib/Test/ may be helpful in explaining how the testing infrastructure works.\n\n4. Run `make test-all` to rebuild Julia and run your new test(s). If you had to fix a bug or add functionality in `base`, this will ensure that your test passes and that you have not introduced extraneous whitespace.\n\n5. Submit the test as a pull request (PR).\n\n* Code for the buildbot configuration is maintained at: https://github.com/staticfloat/julia-buildbot\n* You can see the current buildbot setup at: https://build.julialang.org/builders\n* [Issue 9493](https://github.com/JuliaLang/julia/issues/9493) and [issue 11885](https://github.com/JuliaLang/julia/issues/11885) have more detailed discussion on code coverage.\n\nCode coverage shows functionality that still needs \"proof of concept\" tests. These are important, as are tests for tricky edge cases, such as converting between integer types when the number to convert is near the maximum of the range of one of the integer types. Even if a function already has some coverage on Codecov, it may still benefit from tests for edge cases.\n\n### Improving documentation\n\n*By contributing documentation to Julia, you are agreeing to release it under the [MIT License](https://github.com/JuliaLang/julia/tree/master/LICENSE.md).*\n\nJulia's documentation source files are stored in the `doc/` directory and all docstrings are found in `base/`. Like everything else these can be modified using `git`. Documentation is built with [Documenter.jl](https://github.com/JuliaDocs/Documenter.jl), which uses Markdown syntax. The HTML documentation can be built locally by running\n\n```\nmake docs\n```\n\nfrom Julia's root directory. This will rebuild the Julia system image, then install or update the package dependencies required to build the documentation, and finally build the HTML documentation and place the resulting files in `doc/_build/html/`.\n\n> **Note**\n>\n> When making changes to any of Julia's documentation it is recommended that you run `make docs` to check that your changes are valid and do not produce any errors before opening a pull request.\n\nBelow are outlined the three most common types of documentation changes and the steps required to perform them. Please note that the following instructions do not cover the full range of features provided by Documenter.jl. Refer to [Documenter's documentation](https://juliadocs.github.io/Documenter.jl/stable) if you encounter anything that is not covered by the sections below.\n\n#### Modifying files in `doc/src/`\n\nMost of the source text for the Julia Manual is located in `doc/src/`. To update or add new text to any one of the existing files the following steps should be followed:\n\n1. update the text in whichever `.md` files are applicable;\n2. run `make docs` from the root directory;\n3. check the output in `doc/_build/html/` to make sure the changes are correct;\n4. commit your changes and open a pull request.\n\n> **Note**\n>\n> The contents of `doc/_build/` does **not** need to be committed when you make changes.\n\nTo add a **new file** to `doc/src/` rather than updating a file replace step `1` above with\n\n1. add the file to the appropriate subdirectory in `doc/src/` and also add the file path to the `PAGES` vector in `doc/make.jl`.\n\n#### Modifying an existing docstring in `base/`\n\nAll docstrings are written inline above the methods or types they are associated with and can be found by clicking on the `source` link that appears below each docstring in the HTML file. The steps needed to make a change to an existing docstring are listed below:\n\n1. find the docstring in `base/`;\n2. update the text in the docstring;\n3. run `make docs` from the root directory;\n4. check the output in `doc/_build/html/` to make sure the changes are correct;\n5. commit your changes and open a pull request.\n\n#### Adding a new docstring to `base/`\n\nThe steps required to add a new docstring are listed below:\n\n1. find a suitable definition in `base/` that the docstring will be most applicable to;\n2. add a docstring above the definition;\n3. find a suitable `@docs` code block in one of the `doc/src/stdlib/` files where you would like the docstring to appear;\n4. add the name of the definition to the `@docs` code block. For example, with a docstring added to a function `bar`\n\n    ```julia\n    \"...\"\n    function bar(args...)\n        # ...\n    end\n    ```\n\n   you would add the name `bar` to a `@docs` block in `doc/src/stdlib/`\n\n        ```@docs\n        foo\n        bar # <-- Added this one.\n        baz\n        ```\n\n5. run `make docs` from the root directory;\n6. check the output in `doc/_build/html` to make sure the changes are correct;\n7. commit your changes and open a pull request.\n\n#### Doctests\n\nExamples written within docstrings can be used as testcases known as \"doctests\" by annotating code blocks with `jldoctest`.\n\n    ```jldoctest\n    julia> uppercase(\"Docstring test\")\n    \"DOCSTRING TEST\"\n    ```\n\nA doctest needs to match an interactive REPL including the `julia>` prompt. It is recommended to add the header `# Examples` above the doctests.\n\nTo run doctests you need to run `make -C doc doctest=true` from the root directory. You can use `make -C doc doctest=true revise=true` if you are modifying the doctests and don't want to rebuild Julia after each change (see details below about the Revise.jl workflow).\n\n#### News-worthy changes\n\nFor new functionality and other substantial changes, add a brief summary to `NEWS.md`. The news item should cross reference the pull request (PR) parenthetically, in the form `([#pr])`. To add the PR reference number, first create the PR, then push an additional commit updating `NEWS.md` with the PR reference number. We periodically run `./julia doc/NEWS-update.jl` from the julia directory to update the cross-reference links, but this should not be done in a typical PR in order to avoid conflicting commits.\n\n#### Annotations for new features, deprecations and behavior changes\n\nAPI additions and deprecations, and minor behavior changes are allowed in minor version releases.\nFor documented features that are part of the public API, a compatibility note should be added into\nthe manual or the docstring. It should state the Julia minor version that changed the behavior\nand have a brief message describing the change.\n\nAt the moment, this should always be done with the following `compat` admonition\n(so that it would be possible to programmatically find the annotations in the future):\n\n  ```\n  !!! compat \"Julia 1.X\"\n      This method was added in Julia 1.X.\n  ```\n\n### Contributing to core functionality or base libraries\n\n*By contributing code to Julia, you are agreeing to release it under the [MIT License](https://github.com/JuliaLang/julia/tree/master/LICENSE.md).*\n\nThe Julia community uses [GitHub issues](https://github.com/JuliaLang/julia/issues) to track and discuss problems, feature requests, and pull requests (PR).\n\nIssues and pull requests should have self explanatory titles such that they can be understood from the list of PRs and Issues.\ni.e. `Add {feature}` and `Fix {bug}` are good, `Fix #12345. Corrects the bug.` is bad.\n\nYou can make pull requests for incomplete features to get code review. The convention is to open these a draft PRs and prefix\nthe pull request title with \"WIP:\" for Work In Progress, or \"RFC:\" for Request for Comments when work is completed and ready\nfor merging. This will prevent accidental merging of work that is in progress.\n\nNote: These instructions are for adding to or improving functionality in the base library. Before getting started, it can be helpful to discuss the proposed changes or additions on the [Julia Discourse forum](https://discourse.julialang.org) or in a GitHub issue---it's possible your proposed change belongs in a package rather than the core language. Also, keep in mind that changing stuff in the base can potentially break a lot of things. Finally, because of the time required to build Julia, note that it's usually faster to develop your code in stand-alone files, get it working, and then migrate it into the base libraries.\n\nAdd new code to Julia's base libraries as follows (this is the \"basic\" approach; see a more efficient approach in the next section):\n\n 1. Edit the appropriate file in the `base/` directory, or add new files if necessary. Create tests for your functionality and add them to files in the `test/` directory. If you're editing C or Scheme code, most likely it lives in `src/` or one of its subdirectories, although some aspects of Julia's REPL initialization live in `cli/`.\n\n 2. Add any new files to `sysimg.jl` in order to build them into the Julia system image.\n\n 3. Add any necessary export symbols in `exports.jl`.\n\n 4. Include your tests in `test/Makefile` and `test/choosetests.jl`.\n\nBuild as usual, and do `make clean testall` to test your contribution. If your contribution includes changes to Makefiles or external dependencies, make sure you can build Julia from a clean tree using `git clean -fdx` or equivalent (be careful – this command will delete any files lying around that aren't checked into git).\n\n#### Running specific tests\nThere are `make` targets for running specific tests:\n\n    make test-bitarray\n\nYou can also use the `runtests.jl` script, e.g. to run `test/bitarray.jl` and `test/math.jl`:\n\n    ./usr/bin/julia test/runtests.jl bitarray math\n\n#### Modifying base more efficiently with Revise.jl\n\n[Revise](https://github.com/timholy/Revise.jl) is a package that\ntracks changes in source files and automatically updates function\ndefinitions in your running Julia session. Using it, you can make\nextensive changes to Base without needing to rebuild in order to test\nyour changes.\n\nHere is the standard procedure:\n\n1. If you are planning changes to any types or macros, make those\n   changes and build julia using `make`. (This is\n   necessary because `Revise` cannot handle changes to type\n   definitions or macros.) Unless it's\n   required to get Julia to build, you do not have to add any\n   functionality based on the new types, just the type definitions\n   themselves.\n\n2. Start a Julia REPL session. Then issue the following commands:\n\n```julia\nusing Revise    # if you aren't launching it in your `.julia/config/startup.jl`\nRevise.track(Base)\n```\n\n3. Edit files in `base/`, save your edits, and test the\n   functionality.\n\nIf you need to restart your Julia session, just start at step 2 above.\n`Revise.track(Base)` will note any changes from when Julia was last\nbuilt and incorporate them automatically. You only need to rebuild\nJulia if you made code-changes that Revise cannot handle.\n\nFor convenience, there are also `test-revise-*` targets for every [`test-*`\ntarget](https://github.com/JuliaLang/julia/blob/master/CONTRIBUTING.md#running-specific-tests) that use Revise to load any modifications to Base into the current\nsystem image before running the corresponding test. This can be useful as a shortcut\non the command line (since tests aren't always designed to be run outside the\nruntest harness).\n\n### Contributing to the standard library\n\nThe standard library (stdlib) packages are baked into the Julia system image.\nWhen running the ordinary test workflow on the stdlib packages, the system image\nversion overrides the version you are developing.\nTo test stdlib packages, you can do the following steps:\n\n1. Edit the UUID field of the `Project.toml` in the stdlib package\n2. Change the current directory to the directory of the stdlib you are developing\n3. Start julia with `julia --project=.`\n4. You can now test the package by running `pkg> test` in Pkg mode.\n\nBecause you changed the UUID, the package manager treats the stdlib package as\ndifferent from the one in the system image, and the system image version will\nnot override the package.\n\nBe sure to change the UUID value back before making the pull request.\n\n### Contributing to patch releases\n\nThe process of [creating a patch release](https://docs.julialang.org/en/v1/devdocs/build/distributing/#Point-releasing-101) is roughly as follows:\n\n1. Create a new branch (e.g. `backports-release-1.10`) against the relevant minor release\n   branch (e.g. `release-1.10`). Usually a corresponding pull request is created as well.\n\n2. Add commits, nominally from `master` (hence \"backports\"), to that branch.\n   See below for more information on this process.\n\n3. Run the [BaseBenchmarks.jl](https://github.com/JuliaCI/BaseBenchmarks.jl) benchmark\n   suite and [PkgEval.jl](https://github.com/JuliaCI/PkgEval.jl) package ecosystem\n   exerciser against that branch. Nominally BaseBenchmarks.jl and PkgEval.jl are\n   invoked via [Nanosoldier.jl](https://github.com/JuliaCI/Nanosoldier.jl) from\n   the pull request associated with the backports branch. Fix any issues.\n\n4. Once all test and benchmark reports look good, merge the backports branch into\n   the corresponding release branch (e.g. merge `backports-release-1.10` into\n   `release-1.10`).\n\n5. Open a pull request that bumps the version of the relevant minor release to the\n   next patch version, e.g. as in [this pull request](https://github.com/JuliaLang/julia/pull/37718).\n\n6. Ping `@JuliaLang/releases` to tag the patch release and update the website.\n\n7. Open a pull request that bumps the version of the relevant minor release to the\n   next prerelease patch version, e.g. as in [this pull request](https://github.com/JuliaLang/julia/pull/37724).\n\nStep 2 above, i.e. backporting commits to the `backports-release-X.Y` branch, has largely\nbeen automated via [`Backporter`](https://github.com/KristofferC/Backporter): Backporter\nsearches for merged pull requests with the relevant `backport-X.Y` tag, and attempts to\ncherry-pick the commits from those pull requests onto the `backports-release-X.Y` branch.\nSome commits apply successfully without intervention, others not so much. The latter\ncommits require \"manual\" backporting, with which help is generally much appreciated.\nBackporter generates a report identifying those commits it managed to backport automatically\nand those that require manual backporting; this report is usually copied into the first\npost of the pull request associated with `backports-release-X.Y` and maintained as\nadditional commits are automatically and/or manually backported.\n\nWhen contributing a manual backport, if you have the necessary permissions, please push the\nbackport directly to the `backports-release-X.Y` branch. If you lack the relevant\npermissions, please open a pull request against the `backports-release-X.Y` branch with the\nmanual backport. Once the manual backport is live on the `backports-release-X.Y` branch,\nplease remove the `backport-X.Y` tag from the originating pull request for the commits.\n\n### Code Formatting Guidelines\n\n#### General Formatting Guidelines for Julia code contributions\n\n - 4 spaces per indentation level, no tabs\n - use whitespace to make the code more readable\n - no whitespace at the end of a line (trailing whitespace)\n - comments are good, especially when they explain the algorithm\n - try to adhere to a 92 character line length limit\n - use upper camel case convention for modules, type names\n - use lower case with underscores for method names\n - it is generally preferred to use ASCII operators and identifiers over\n   Unicode equivalents whenever possible\n - in docstrings refer to the language as \"Julia\" and the executable as \"`julia`\"\n\n#### General Formatting Guidelines For C code contributions\n\n - 4 spaces per indentation level, no tabs\n - space between `if` and `(` (`if (x) ...`)\n - newline before opening `{` in function definitions\n - `f(void)` for 0-argument function declarations\n - newline between `}` and `else` instead of `} else {`\n - if one part of an `if..else` chain uses `{ }` then all should\n - no whitespace at the end of a line\n\n### Git Recommendations For Pull Requests\n\n - Avoid working from the `master` branch of your fork, creating a new branch will make it easier if Julia's `master` changes and you need to update your pull request.\n - Try to [squash](https://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html) together small commits that make repeated changes to the same section of code so your pull request is easier to review. A reasonable number of separate well-factored commits is fine, especially for larger changes.\n - If any conflicts arise due to changes in Julia's `master`, prefer updating your pull request branch with `git rebase` versus `git merge` or `git pull`, since the latter will introduce merge commits that clutter the git history with noise that makes your changes more difficult to review.\n - Descriptive commit messages are good.\n - Using `git add -p` or `git add -i` can be useful to avoid accidentally committing unrelated changes.\n - When linking to specific lines of code in discussion of an issue or pull request, hit the `y` key while viewing code on GitHub to reload the page with a URL that includes the specific version that you're viewing. That way any lines of code that you refer to will still make sense in the future, even if the content of the file changes.\n - Whitespace can be automatically removed from existing commits with `git rebase`.\n   - To remove whitespace for the previous commit, run\n     `git rebase --whitespace=fix HEAD~1`.\n   - To remove whitespace relative to the `master` branch, run\n     `git rebase --whitespace=fix master`.\n\n#### Git Recommendations For Pull Request Reviewers\n\n- When merging, we generally like `squash+merge`. Unless it is the rare case of a PR with carefully staged individual commits that you want in the history separately, in which case `merge` is acceptable, but usually prefer `squash+merge`.\n\n\n## Resources\n\n* Julia\n  - **Homepage:** <https://julialang.org>\n  - **Community:** <https://julialang.org/community/>\n  - **Source code:** <https://github.com/JuliaLang/julia>\n  - **Documentation:** <https://docs.julialang.org>\n  - **Code coverage:** <https://codecov.io/github/JuliaLang/julia>\n\n* Design of Julia\n  - [Julia: A Fresh Approach to Numerical Computing](https://julialang.org/assets/research/julia-fresh-approach-BEKS.pdf)\n  - [Julia: Dynamism and Performance Reconciled by Design](http://janvitek.org/pubs/oopsla18b.pdf)\n  - [All Julia Publications](https://julialang.org/research)\n\n* Using GitHub\n  - [Using Julia with GitHub (video)](https://www.youtube.com/watch?v=wnFYV3ZKtOg)\n  - [Using Julia on GitHub (notes for video)](https://gist.github.com/2712118#file_Julia_git_pull_request.md)\n  - [General GitHub documentation](https://help.github.com)\n  - [GitHub pull request documentation](https://help.github.com/articles/creating-a-pull-request/)\n"
        },
        {
          "name": "Compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 390.35,
          "content": "Julia v1.11 Release Notes\n========================\n\nNew language features\n---------------------\n* `public` is a new keyword. Symbols marked with `public` are considered public\n  API. Symbols marked with `export` are now also treated as public API. The\n  difference between `public` and `export` is that `public` names do not become\n  available when `using` a package/module ([#50105]).\n* `ScopedValue` implements dynamic scope with inheritance across tasks ([#50958]).\n* The new macro `Base.Cartesian.@ncallkw` is analogous to `Base.Cartesian.@ncall`,\n  but allows to add keyword arguments to the function call ([#51501]).\n* Support for Unicode 15.1 ([#51799]).\n* Three new types around the idea of text with \"annotations\" (`Pair{Symbol, Any}`\n  entries, e.g. `:lang => \"en\"` or `:face => :magenta`). These annotations\n  are preserved across operations (e.g. string concatenation with `*`) when\n  possible.\n  * `AnnotatedString` is a new `AbstractString` type. It wraps an underlying\n    string and allows for annotations to be attached to regions of the string.\n    This type is used extensively in the new `StyledStrings` standard library to\n    hold styling information.\n  * `AnnotatedChar` is a new `AbstractChar` type. It wraps another char and\n    holds a list of annotations that apply to it.\n  * `AnnotatedIOBuffer` is a new `IO` type that mimics an `IOBuffer`, but has\n    specialised `read`/`write` methods for annotated content. This can be\n    thought of both as a \"string builder\" of sorts and also as glue between\n    annotated and unannotated content.\n* `Manifest.toml` files can now be renamed in the format `Manifest-v{major}.{minor}.toml`\n  to be preferentially picked up by the given julia version. i.e. in the same folder,\n  a `Manifest-v1.11.toml` would be used by v1.11 and `Manifest.toml` by every other julia\n  version. This makes managing environments for multiple julia versions at the same time\n  easier ([#43845]).\n* `@time` now reports a count of any lock conflicts where a `ReentrantLock` had to wait, plus a new macro\n  `@lock_conflicts` which returns that count ([#52883]).\n\nLanguage changes\n----------------\n* During precompilation, the `atexit` hooks now run before saving the output file. This\n  allows users to safely tear down background state (such as closing Timers and sending\n  disconnect notifications to heartbeat tasks) and cleanup other resources when the program\n  wants to begin exiting.\n* Code coverage and malloc tracking is no longer generated during the package precompilation stage.\n  Further, during these modes pkgimage caches are now used for packages that are not being tracked.\n  This means that coverage testing (the default for `julia-actions/julia-runtest`) will by default use\n  pkgimage caches for all other packages than the package being tested, likely meaning faster test\n  execution. ([#52123])\n\n* Specifying a path in `JULIA_DEPOT_PATH` now results in the expansion of empty strings to\n  omit the default user depot ([#51448]).\n\nCompiler/Runtime improvements\n-----------------------------\n* Updated GC heuristics to count allocated pages instead of individual objects ([#50144]).\n* A new `LazyLibrary` type is exported from `Libdl` for use in building chained lazy library\n  loads, primarily to be used within JLLs ([#50074]).\n* Added support for annotating `Base.@assume_effects` on code blocks ([#52400]).\n* The libuv library has been updated from a base of v1.44.2 to v1.48.0 ([#49937]).\n\nCommand-line option changes\n---------------------------\n\n* The entry point for Julia has been standardized to `Main.main(Base.ARGS)`. This must be explicitly opted into using the `@main` macro\n(see the docstring for further details). When opted-in, and julia is invoked to run a script or expression\n(i.e. using `julia script.jl` or `julia -e expr`), julia will subsequently run the `Main.main` function automatically.\nThis is intended to unify script and compilation workflows, where code loading may happen\nin the compiler and execution of `Main.main` may happen in the resulting executable. For interactive use, there is no semantic\ndifference between defining a `main` function and executing the code directly at the end of the script ([50974]).\n* The `--compiled-modules` and `--pkgimages` flags can now be set to `existing`, which will\n  cause Julia to consider loading existing cache files, but not to create new ones ([#50586]\n  and [#52573]).\n* The `--project` argument now accepts `@script` to give a path to a directory with a Project.toml relative to the passed script file. `--project=@script/foo` for the `foo` subdirectory. If no path is given after (i.e. `--project=@script`) then (like `--project=@.`) the directory and its parents are searched for a Project.toml ([#50864] and [#53352])\n\nMulti-threading changes\n-----------------------\n\n* `Threads.@threads` now supports the `:greedy` scheduler, intended for non-uniform workloads ([#52096]).\n* A new public (but unexported) struct `Base.Lockable{T, L<:AbstractLock}` makes it easy to bundle a resource and its lock together ([#52898]).\n\nBuild system changes\n--------------------\n\n* There is a new `Makefile` to build Julia and LLVM using the profile-guided and link-time optimizations (PGO and LTO) strategies, see `contrib/pgo-lto/Makefile` ([#45641]).\n\nNew library functions\n---------------------\n\n* `in!(x, s::AbstractSet)` will return whether `x` is in `s`, and insert `x` in `s` if not.\n* The new `Libc.mkfifo` function wraps the `mkfifo` C function on Unix platforms ([#34587]).\n* `copyuntil(out, io, delim)` and `copyline(out, io)` copy data into an `out::IO` stream ([#48273]).\n* `eachrsplit(string, pattern)` iterates split substrings right to left.\n* `Sys.username()` can be used to return the current user's username ([#51897]).\n* `GC.logging_enabled()` can be used to test whether GC logging has been enabled via `GC.enable_logging` ([#51647]).\n* `IdSet` is now exported from Base and considered public ([#53262]).\n\nNew library features\n--------------------\n\n* `invmod(n, T)` where `T` is a native integer type now computes the modular inverse of `n` in the modular integer ring that `T` defines ([#52180]).\n* `invmod(n)` is an abbreviation for `invmod(n, typeof(n))` for native integer types ([#52180]).\n* `replace(string, pattern...)` now supports an optional `IO` argument to\n  write the output to a stream rather than returning a string ([#48625]).\n* New methods `allequal(f, itr)` and `allunique(f, itr)` taking a predicate function ([#47679]).\n* `sizehint!(s, n)` now supports an optional `shrink` argument to disable shrinking ([#51929]).\n* New function `Docs.hasdoc(module, symbol)` tells whether a name has a docstring ([#52139]).\n* New function `Docs.undocumented_names(module)` returns a module's undocumented public names ([#52413]).\n* Passing an `IOBuffer` as a stdout argument for `Process` spawn now works as\n  expected, synchronized with `wait` or `success`, so a `Base.BufferStream` is\n  no longer required there for correctness to avoid data races ([#52461]).\n* After a process exits, `closewrite` will no longer be automatically called on\n  the stream passed to it. Call `wait` on the process instead to ensure the\n  content is fully written, then call `closewrite` manually to avoid\n  data-races. Or use the callback form of `open` to have all that handled\n  automatically.\n* `@timed` now additionally returns the elapsed compilation and recompilation time ([#52889])\n* `filter` can now act on a `NamedTuple` ([#50795]).\n* `Iterators.cycle(iter, n)` runs over `iter` a fixed number of times, instead of forever ([#47354])\n* `zero(::AbstractArray)` now applies recursively, so `zero([[1,2],[3,4,5]])` now produces the additive identity `[[0,0],[0,0,0]]` rather than erroring ([#38064]).\n\nStandard library changes\n------------------------\n\n* It's not possible to define `length` for stateful iterators in a generally consistent manner. The\n  potential for silently incorrect results for `Stateful` iterators is addressed by deleting the\n  `length(::Stateful)` method. The last type parameter of `Stateful` is gone, too. Issue: ([#47790]),\n  PR: ([#51747]).\n\n#### StyledStrings\n\n* A new standard library for handling styling in a more comprehensive and structured way ([#49586]).\n* The new `Faces` struct serves as a container for text styling information\n  (think typeface, as well as color and decoration), and comes with a framework\n  to provide a convenient, extensible (via `addface!`), and customisable (with a\n  user's `Faces.toml` and `loadfaces!`) approach to\n  styled content ([#49586]).\n* The new `@styled_str` string macro provides a convenient way of creating a\n  `AnnotatedString` with various faces or other attributes applied ([#49586]).\n\n#### Package Manager\n* It is now possible to specify \"sources\" for packages in a `[sources]` section in Project.toml.\n  This can be used to add non-registered normal or test dependencies.\n* Pkg now obeys `[compat]` bounds for `julia` and raises an error if the version of the running Julia binary is incompatible with the bounds in `Project.toml`.\n  Pkg has always obeyed this compat when working with Registry packages. This change affects mostly local packages\n* `pkg> add` and `Pkg.add` will now add compat entries for new direct dependencies if the active environment is a\n  package (has a `name` and `uuid` entry).\n* Dependencies can now be directly added as weak deps or extras via the `pkg> add --weak/extra Foo` or\n  `Pkg.add(\"Foo\", target=:weakdeps/:extras)` forms.\n\n#### LinearAlgebra\n* `cbrt(::AbstractMatrix{<:Real})` is now defined and returns real-valued matrix cube roots of real-valued matrices ([#50661]).\n* `eigvals/eigen(A, bunchkaufman(B))` and `eigvals/eigen(A, lu(B))`, which utilize the Bunchkaufman (LDL) and LU decomposition of `B`,\n   respectively, now efficiently compute the generalized eigenvalues (`eigen`: and eigenvectors) of `A` and `B`. Note: The second\n   argument is the output of `bunchkaufman` or `lu` ([#50471]).\n* There is now a specialized dispatch for `eigvals/eigen(::Hermitian{<:Tridiagonal})` which performs a similarity transformation to create a real symmetrix triagonal matrix, and solve that using the LAPACK routines ([#49546]).\n* Structured matrices now retain either the axes of the parent (for `Symmetric`/`Hermitian`/`AbstractTriangular`/`UpperHessenberg`), or that of the principal diagonal (for banded matrices) ([#52480]).\n* `bunchkaufman` and `bunchkaufman!` now work for any `AbstractFloat`, `Rational` and their complex variants. `bunchkaufman` now supports `Integer` types, by making an internal conversion to `Rational{BigInt}`. Added new function `inertia` that computes the inertia of the diagonal factor given by the `BunchKaufman` factorization object of a real symmetric or Hermitian matrix. For complex symmetric matrices, `inertia` only computes the number of zero eigenvalues of the diagonal factor ([#51487]).\n* Packages that specialize matrix-matrix `mul!` with a method signature of the form `mul!(::AbstractMatrix, ::MyMatrix, ::AbstractMatrix, ::Number, ::Number)` no longer encounter method ambiguities when interacting with `LinearAlgebra`. Previously, ambiguities used to arise when multiplying a `MyMatrix` with a structured matrix type provided by LinearAlgebra, such as `AbstractTriangular`, which used to necessitate additional methods to resolve such ambiguities. Similar sources of ambiguities have also been removed for matrix-vector `mul!` operations ([#52837]).\n* `lu` and `issuccess(::LU)` now accept an `allowsingular` keyword argument. When set to `true`, a valid factorization with rank-deficient U factor will be treated as success instead of throwing an error. Such factorizations are now shown by printing the factors together with a \"rank-deficient\" note rather than printing a \"Failed Factorization\" message ([#52957]).\n\n#### Logging\n\n#### Printf\n\n#### Profile\n\n#### Random\n* `rand` now supports sampling over `Tuple` types ([#35856], [#50251]).\n* `rand` now supports sampling over `Pair` types ([#28705]).\n* When seeding RNGs provided by `Random`, negative integer seeds can now be used ([#51416]).\n* Seedable random number generators from `Random` can now be seeded by a string, e.g.\n  `seed!(rng, \"a random seed\")` ([#51527]).\n\n#### REPL\n\n* Tab complete hints now show in lighter text while typing in the repl. To disable\n  set `Base.active_repl.options.hint_tab_completes = false` interactively, or in startup.jl:\n  ```\n  if VERSION >= v\"1.11.0-0\"\n    atreplinit() do repl\n        repl.options.hint_tab_completes = false\n    end\n  end\n  ``` ([#51229]).\n* Meta-M with an empty prompt now toggles the contextual module between the previous non-Main\n  contextual module and Main so that switching back and forth is simple. ([#51616], [#52670])\n\n#### SuiteSparse\n\n\n#### SparseArrays\n\n#### Test\n\n#### Dates\n\nThe undocumented function `adjust` is no longer exported but is now documented\n\n#### Statistics\n\n* Statistics is now an upgradeable standard library ([#46501]).\n\n#### Distributed\n\n* `pmap` now defaults to using a `CachingPool` ([#33892]).\n\n#### Unicode\n\n\n#### DelimitedFiles\n\n\n#### InteractiveUtils\n\nDeprecated or removed\n---------------------\n\n* `Base.map`, `Iterators.map`, and `foreach` lost their single-argument methods ([#52631]).\n\n\nExternal dependencies\n---------------------\n* `tput` is no longer called to check terminal capabilities, it has been replaced with a pure-Julia terminfo parser ([#50797]).\n\nTooling Improvements\n--------------------\n\n* CI now performs limited automatic typo detection on all PRs. If you merge a PR with a\n  failing typo CI check, then the reported typos will be automatically ignored in future CI\n  runs on PRs that edit those same files ([#51704]).\n\n<!--- generated by NEWS-update.jl: -->\n[#28705]: https://github.com/JuliaLang/julia/issues/28705\n[#33892]: https://github.com/JuliaLang/julia/issues/33892\n[#34587]: https://github.com/JuliaLang/julia/issues/34587\n[#35856]: https://github.com/JuliaLang/julia/issues/35856\n[#38064]: https://github.com/JuliaLang/julia/issues/38064\n[#43845]: https://github.com/JuliaLang/julia/issues/43845\n[#45641]: https://github.com/JuliaLang/julia/issues/45641\n[#46501]: https://github.com/JuliaLang/julia/issues/46501\n[#47354]: https://github.com/JuliaLang/julia/issues/47354\n[#47679]: https://github.com/JuliaLang/julia/issues/47679\n[#47790]: https://github.com/JuliaLang/julia/issues/47790\n[#48273]: https://github.com/JuliaLang/julia/issues/48273\n[#48625]: https://github.com/JuliaLang/julia/issues/48625\n[#49546]: https://github.com/JuliaLang/julia/issues/49546\n[#49586]: https://github.com/JuliaLang/julia/issues/49586\n[#49937]: https://github.com/JuliaLang/julia/issues/49937\n[#50074]: https://github.com/JuliaLang/julia/issues/50074\n[#50105]: https://github.com/JuliaLang/julia/issues/50105\n[#50144]: https://github.com/JuliaLang/julia/issues/50144\n[#50251]: https://github.com/JuliaLang/julia/issues/50251\n[#50471]: https://github.com/JuliaLang/julia/issues/50471\n[#50586]: https://github.com/JuliaLang/julia/issues/50586\n[#50661]: https://github.com/JuliaLang/julia/issues/50661\n[#50795]: https://github.com/JuliaLang/julia/issues/50795\n[#50797]: https://github.com/JuliaLang/julia/issues/50797\n[#50864]: https://github.com/JuliaLang/julia/issues/50864\n[#50958]: https://github.com/JuliaLang/julia/issues/50958\n[#51229]: https://github.com/JuliaLang/julia/issues/51229\n[#51416]: https://github.com/JuliaLang/julia/issues/51416\n[#51448]: https://github.com/JuliaLang/julia/issues/51448\n[#51487]: https://github.com/JuliaLang/julia/issues/51487\n[#51501]: https://github.com/JuliaLang/julia/issues/51501\n[#51527]: https://github.com/JuliaLang/julia/issues/51527\n[#51616]: https://github.com/JuliaLang/julia/issues/51616\n[#51647]: https://github.com/JuliaLang/julia/issues/51647\n[#51704]: https://github.com/JuliaLang/julia/issues/51704\n[#51747]: https://github.com/JuliaLang/julia/issues/51747\n[#51799]: https://github.com/JuliaLang/julia/issues/51799\n[#51897]: https://github.com/JuliaLang/julia/issues/51897\n[#51929]: https://github.com/JuliaLang/julia/issues/51929\n[#52096]: https://github.com/JuliaLang/julia/issues/52096\n[#52123]: https://github.com/JuliaLang/julia/issues/52123\n[#52139]: https://github.com/JuliaLang/julia/issues/52139\n[#52180]: https://github.com/JuliaLang/julia/issues/52180\n[#52400]: https://github.com/JuliaLang/julia/issues/52400\n[#52413]: https://github.com/JuliaLang/julia/issues/52413\n[#52461]: https://github.com/JuliaLang/julia/issues/52461\n[#52480]: https://github.com/JuliaLang/julia/issues/52480\n[#52573]: https://github.com/JuliaLang/julia/issues/52573\n[#52631]: https://github.com/JuliaLang/julia/issues/52631\n[#52670]: https://github.com/JuliaLang/julia/issues/52670\n[#52837]: https://github.com/JuliaLang/julia/issues/52837\n[#52883]: https://github.com/JuliaLang/julia/issues/52883\n[#52889]: https://github.com/JuliaLang/julia/issues/52889\n[#52898]: https://github.com/JuliaLang/julia/issues/52898\n[#52957]: https://github.com/JuliaLang/julia/issues/52957\n[#53262]: https://github.com/JuliaLang/julia/issues/53262\n[#53352]: https://github.com/JuliaLang/julia/issues/53352\n\n\nJulia v1.10 Release Notes\n=========================\n\nNew language features\n---------------------\n\n* JuliaSyntax.jl is now used as the default parser, providing better diagnostics and faster\n  parsing. Set environment variable `JULIA_USE_FLISP_PARSER` to `1` to switch back to the old\n  parser if necessary (and if you find this necessary, please file an issue) ([#46372]).\n* `⥺` (U+297A, `\\leftarrowsubset`) and `⥷` (U+2977, `\\leftarrowless`) may now be used as\n  binary operators with arrow precedence ([#45962]).\n\nLanguage changes\n----------------\n\n* When a task forks a child, the parent task's task-local RNG (random number generator) is no longer affected. The seeding of child based on the parent task also takes a more disciplined approach to collision resistance, using a design based on the SplitMix and DotMix splittable RNG schemes ([#49110]).\n* A new more-specific rule for methods resolves ambiguities containing Union{} in favor of\n  the method defined explicitly to handle the Union{} argument. This makes it possible to\n  define methods to explicitly handle Union{} without the ambiguities that commonly would\n  result previously. This also lets the runtime optimize certain method lookups in a way\n  that significantly improves load and inference times for heavily overloaded methods that\n  dispatch on Types (such as traits and constructors).\n* The \"h bar\" `ℏ` (`\\hslash` U+210F) character is now treated as equivalent to `ħ` (`\\hbar` U+0127).\n* The `@simd` macro now has more limited and clearer semantics: it only enables reordering and contraction\n  of floating-point operations, instead of turning on all \"fastmath\" optimizations.\n  If you observe performance regressions due to this change, you can recover previous behavior with `@fastmath @simd`,\n  if you are OK with all the optimizations enabled by the `@fastmath` macro ([#49405]).\n* When a method with keyword arguments is displayed in the stack trace view, the textual\n  representation of the keyword arguments' type is simplified using the new\n  `@Kwargs{key1::Type1, ...}` macro syntax ([#49959]).\n\nCompiler/Runtime improvements\n-----------------------------\n\n* Updated GC heuristics to count allocated pages instead of object sizes ([#50144]). This should help\n  some programs that consumed excessive memory before.\n* The mark phase of the garbage collector is now multi-threaded ([#48600]).\n* [JITLink](https://llvm.org/docs/JITLink.html) is enabled by default on Linux aarch64 when Julia is linked to LLVM 15 or later versions ([#49745]).\n  This should resolve many segmentation faults previously observed on this platform.\n* The precompilation process now uses pidfile locks and orchestrates multiple julia processes to only have one process\n  spend effort precompiling while the others wait. Previously all would do the work and race to overwrite the cache files.\n  ([#49052])\n\nCommand-line option changes\n---------------------------\n\n* New option `--gcthreads` to set how many threads will be used by the garbage collector ([#48600]).\n  The default is `N/2` where `N` is the number of worker threads (`--threads`) used by Julia.\n\nBuild system changes\n--------------------\n\n* SparseArrays and SuiteSparse are no longer included in the default system image, so the core\n  language no longer contains GPL libraries. However, these libraries are still included\n  alongside the language in the standard binary distribution ([#44247], [#48979], [#49266]).\n\nNew library functions\n---------------------\n\n* `tanpi` is now defined. It computes tan(π*x) more accurately than `tan(pi*x)` ([#48575]).\n* `fourthroot(x)` is now defined in `Base.Math` and can be used to compute the fourth root of `x`.\n   It can also be accessed using the unicode character `∜`, which can be typed by `\\fourthroot<tab>` ([#48899]).\n* `Libc.memmove`, `Libc.memset`, and `Libc.memcpy` are now defined, whose functionality matches that of their respective C calls.\n* `Base.isprecompiled(pkg::PkgId)` has been added, to identify whether a package has already been precompiled ([#50218]).\n\nNew library features\n--------------------\n\n* `binomial(x, k)` now supports non-integer `x` ([#48124]).\n* A `CartesianIndex` is now treated as a \"scalar\" for broadcasting ([#47044]).\n* `printstyled` now supports italic output ([#45164]).\n* `parent` and `parentindices` support `SubString`s.\n* `replace(string, pattern...)` now supports an optional `IO` argument to\n  write the output to a stream rather than returning a string ([#48625]).\n* `startswith` now supports seekable `IO` streams ([#43055]).\n\nStandard library changes\n------------------------\n\n* The `initialized=true` keyword assignment for `sortperm!` and `partialsortperm!`\n  is now a no-op ([#47979]). It previously exposed unsafe behavior ([#47977]).\n* Printing integral `Rational`s will skip the denominator in `Rational`-typed IO context (e.g. in arrays) ([#45396]).\n\n#### Package Manager\n\n* `Pkg.precompile` now accepts `timing` as a keyword argument which displays per package timing information for precompilation (e.g. `Pkg.precompile(timing=true)`).\n\n#### LinearAlgebra\n\n* `AbstractQ` no longer subtypes `AbstractMatrix`. Moreover, `adjoint(Q::AbstractQ)`\n  no longer wraps `Q` in an `Adjoint` type, but instead in an `AdjointQ`, that itself\n  subtypes `AbstractQ`. This change accounts for the fact that typically `AbstractQ`\n  instances behave like function-based, matrix-backed linear operators, and hence don't\n  allow for efficient indexing. Also, many `AbstractQ` types can act on vectors/matrices\n  of different size, acting like a matrix with context-dependent size. With this change,\n  `AbstractQ` has a well-defined API that is described in detail in the\n  [Julia documentation](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/#man-linalg-abstractq)\n  ([#46196]).\n* Adjoints and transposes of `Factorization` objects are no longer wrapped in `Adjoint`\n  and `Transpose` wrappers, respectively. Instead, they are wrapped in\n  `AdjointFactorization` and `TransposeFactorization` types, which themselves subtype\n  `Factorization` ([#46874]).\n* New functions `hermitianpart` and `hermitianpart!` for extracting the Hermitian\n  (real symmetric) part of a matrix ([#31836]).\n* The `norm` of the adjoint or transpose of an `AbstractMatrix` now returns the norm of the\n  parent matrix by default, matching the current behaviour for `AbstractVector`s ([#49020]).\n* `eigen(A, B)` and `eigvals(A, B)`, where one of `A` or `B` is symmetric or Hermitian,\n  are now fully supported ([#49533]).\n* `eigvals/eigen(A, cholesky(B))` now computes the generalized eigenvalues (`eigen`: and eigenvectors)\n  of `A` and `B` via Cholesky decomposition for positive definite `B`. Note: The second argument is\n  the output of `cholesky`.\n\n#### Printf\n\n* Format specifiers now support dynamic width and precision, e.g. `%*s` and `%*.*g` ([#40105]).\n\n#### REPL\n\n* When stack traces are printed, the printed depth of types in function signatures will be limited\n  to avoid overly verbose output ([#49795]).\n\n#### Test\n\n* The `@test_broken` macro (or `@test` with `broken=true`) now complains if the test expression returns a\n  non-boolean value in the same way as a non-broken test ([#47804]).\n* When a call to `@test` fails or errors inside a function, a larger stacktrace is now printed such that the location of the  test within a `@testset` can be retrieved ([#49451]).\n\n#### InteractiveUtils\n\n* `code_native` and `@code_native` now default to intel syntax instead of AT&T.\n* `@time_imports` now shows the timing of any module `__init__()`s that are run ([#49529]).\n\nDeprecated or removed\n---------------------\n\n* The `@pure` macro is now deprecated. Use `Base.@assume_effects :foldable` instead ([#48682]).\n\n<!--- generated by NEWS-update.jl: -->\n[#31836]: https://github.com/JuliaLang/julia/issues/31836\n[#40105]: https://github.com/JuliaLang/julia/issues/40105\n[#43055]: https://github.com/JuliaLang/julia/issues/43055\n[#44247]: https://github.com/JuliaLang/julia/issues/44247\n[#45164]: https://github.com/JuliaLang/julia/issues/45164\n[#45396]: https://github.com/JuliaLang/julia/issues/45396\n[#45962]: https://github.com/JuliaLang/julia/issues/45962\n[#46196]: https://github.com/JuliaLang/julia/issues/46196\n[#46372]: https://github.com/JuliaLang/julia/issues/46372\n[#46874]: https://github.com/JuliaLang/julia/issues/46874\n[#47044]: https://github.com/JuliaLang/julia/issues/47044\n[#47804]: https://github.com/JuliaLang/julia/issues/47804\n[#47977]: https://github.com/JuliaLang/julia/issues/47977\n[#47979]: https://github.com/JuliaLang/julia/issues/47979\n[#48124]: https://github.com/JuliaLang/julia/issues/48124\n[#48575]: https://github.com/JuliaLang/julia/issues/48575\n[#48600]: https://github.com/JuliaLang/julia/issues/48600\n[#48625]: https://github.com/JuliaLang/julia/issues/48625\n[#48682]: https://github.com/JuliaLang/julia/issues/48682\n[#48899]: https://github.com/JuliaLang/julia/issues/48899\n[#48979]: https://github.com/JuliaLang/julia/issues/48979\n[#49020]: https://github.com/JuliaLang/julia/issues/49020\n[#49052]: https://github.com/JuliaLang/julia/issues/49052\n[#49110]: https://github.com/JuliaLang/julia/issues/49110\n[#49266]: https://github.com/JuliaLang/julia/issues/49266\n[#49405]: https://github.com/JuliaLang/julia/issues/49405\n[#49451]: https://github.com/JuliaLang/julia/issues/49451\n[#49529]: https://github.com/JuliaLang/julia/issues/49529\n[#49533]: https://github.com/JuliaLang/julia/issues/49533\n[#49745]: https://github.com/JuliaLang/julia/issues/49745\n[#49795]: https://github.com/JuliaLang/julia/issues/49795\n[#49959]: https://github.com/JuliaLang/julia/issues/49959\n[#50144]: https://github.com/JuliaLang/julia/issues/50144\n[#50218]: https://github.com/JuliaLang/julia/issues/50218\n\nJulia v1.9 Release Notes\n========================\n\nNew language features\n---------------------\n\n* It is now possible to assign to bindings in another module using `setproperty!(::Module, ::Symbol, x)` ([#44137]).\n* Slurping in assignments is now also allowed in non-final position. This is handled via `Base.split_rest` ([#42902]).\n* Character literals now support the same syntax allowed in string literals; i.e. the syntax can\n  represent invalid UTF-8 sequences as allowed by the `Char` type ([#44989]).\n* Support for Unicode 15 ([#47392]).\n* Nested combinations of tuples and named tuples of symbols are now allowed as type parameters ([#46300]).\n* New builtins `getglobal(::Module, ::Symbol[, order])` and `setglobal!(::Module, ::Symbol, x[, order])`\n  for reading from and writing to globals. `getglobal` should now be preferred for accessing globals over\n  `getfield` ([#44137]).\n\nLanguage changes\n----------------\n\n* The `@invoke` macro introduced in 1.7 is now exported. Additionally, it now uses `Core.Typeof(x)`\n  rather than `Any` when a type annotation is omitted for an argument `x` so that types passed\n  as arguments are handled correctly ([#45807]).\n* The `invokelatest` function and `@invokelatest` macro introduced in 1.7 are now exported ([#45831]).\n\nCompiler/Runtime improvements\n-----------------------------\n\n* Time to first execution (TTFX, sometimes called time to first plot) is greatly reduced. Package precompilation now\n  saves native code into a \"pkgimage\", meaning that code generated during the precompilation process will not\n  require compilation after package load. Use of pkgimages can be disabled via `--pkgimages=no` ([#44527]) ([#47184]).\n* The known quadratic behavior of type inference is now fixed and inference uses less memory in general.\n  Certain edge cases with auto-generated long functions (e.g. ModelingToolkit.jl with partial\n  differential equations and large causal models) should see significant compile-time improvements ([#45276], [#45404]).\n* Non-concrete call sites can now be union-split to be inlined or statically resolved even\n  if there are multiple dispatch candidates. This may improve runtime performance in certain\n  situations where object types are not fully known statically, by statically resolving\n  `@nospecialize`-d call sites and avoiding excessive compilation ([#44512]).\n* All uses of the `@pure` macro in `Base` have been replaced with the now-preferred `Base.@assume_effects` ([#44776]).\n* `invoke(f, invokesig, args...)` calls to a less-specific method than would normally be chosen\n  for `f(args...)` are no longer spuriously invalidated when loading package precompile files ([#46010]).\n\nCommand-line option changes\n---------------------------\n\n* In Linux and Windows, `--threads=auto` now tries to infer the usable number of CPUs from the\n  process affinity which is set typically in HPC and cloud environments ([#42340]).\n* `--math-mode=fast` is now a no-op ([#41638]). Users are encouraged to use the @fastmath macro instead, which has more well-defined semantics.\n* The `--threads` command-line option now accepts `auto|N[,auto|M]` where `M` specifies the\n  number of interactive threads to create (`auto` currently means 1) ([#42302]).\n* New option `--heap-size-hint=<size>` suggests a size limit to invoke garbage collection more eagerly.\n  The size may be specified in bytes, kilobytes (1000k), megabytes (300M), or gigabytes (1.5G) ([#45369]).\n\nMulti-threading changes\n-----------------------\n\n* `Threads.@spawn` now accepts an optional first argument: `:default` or `:interactive`.\n  An interactive task desires low latency and implicitly agrees to be short duration or to yield frequently.\n  Interactive tasks will run on interactive threads, if any are specified when Julia is started ([#42302]).\n* Threads started outside the Julia runtime (e.g. from C or Java) can now become able to call into Julia code\n  by calling `jl_adopt_thread`. This is done automatically when entering Julia code via `cfunction` or a\n  `@ccallable` entry point. As a consequence, the number of threads can now change during execution ([#46609]).\n\nBuild system changes\n--------------------\n\n\nNew library functions\n---------------------\n\n* New function `Iterators.flatmap` ([#44792]).\n* New `pkgversion(m::Module)` function to get the version of the package that loaded\n  a given module, similar to `pkgdir(m::Module)` ([#45607]).\n* New function `stack(x)` which generalises `reduce(hcat, x::Vector{<:Vector})` to any dimensionality,\n  and allows any iterator of iterators. Method `stack(f, x)` generalises `mapreduce(f, hcat, x)` and\n  is more efficient ([#43334]).\n* New macro `@allocations` which is similar to `@allocated` except reporting the total number of allocations\n  rather than the total size of memory allocated ([#47367]).\n\nNew library features\n--------------------\n\n* `RoundFromZero` now works for non-`BigFloat` types ([#41246]).\n* `Dict` can be now shrunk manually by `sizehint!` ([#45004]).\n* `@time` now separates out % time spent recompiling invalidated methods ([#45015]).\n\nStandard library changes\n------------------------\n\n* A known concurrency issue in `iterate` methods on `Dict` and other derived objects such\n  as `keys(::Dict)`, `values(::Dict)`, and `Set` is fixed. These methods of `iterate` can\n  now be called on a dictionary or set shared by arbitrary tasks provided that there are no\n  tasks mutating the dictionary or set ([#44534]).\n* Predicate function negation `!f` now returns a composed function `(!) ∘ f` instead of an anonymous function ([#44752]).\n* `eachslice` now works over multiple dimensions; `eachslice`, `eachrow` and `eachcol` return\n  a `Slices` object, which allows dispatching to provide more efficient methods ([#32310]).\n* `@kwdef` is now exported and added to the public API ([#46273]).\n* An issue with order of operations in `fld1` is now fixed ([#28973]).\n* Sorting is now always stable by default, as `QuickSort` was stabilized ([#45222]).\n* `Base.splat` is now exported. The return value is now a `Base.Splat` instead\n  of an anonymous function, which allows for pretty printing ([#42717]).\n\n#### Package Manager\n\n#### LinearAlgebra\n\n* The methods `a / b` and `b \\ a` with `a` a scalar and `b` a vector, which were equivalent to `a * pinv(b)`,\n  have been removed due to the risk of confusion with elementwise division ([#44358]).\n* We are now wholly reliant on libblastrampoline (LBT) for calling BLAS and LAPACK. OpenBLAS is shipped by default,\n  but building the system image with other BLAS/LAPACK libraries is not supported. Instead, it is recommended that\n  the LBT mechanism be used for swapping BLAS/LAPACK with vendor provided ones ([#44360]).\n* `lu` supports a new pivoting strategy `RowNonZero()` that chooses the first non-zero pivot element, for use with\n  new arithmetic types and for pedagogy ([#44571]).\n* `normalize(x, p=2)` now supports any normed vector space `x`, including scalars ([#44925]).\n* The default number of BLAS threads is now set to the number of CPU threads on ARM CPUs, and half the number\n  of CPU threads on other architectures ([#45412], [#46085]).\n\n#### Printf\n\n* Error messages for bad format strings have been improved, to make it clearer what and where in the\n  format string is wrong ([#45366]).\n\n#### Profile\n\n* New function `Profile.take_heap_snapshot(file)` that writes a file in Chrome's JSON-based `.heapsnapshot`\n  format ([#46862]).\n\n#### Random\n\n* `randn` and `randexp` now work for any `AbstractFloat` type defining `rand` ([#44714]).\n\n#### REPL\n\n* `Alt-e` now opens the current input in an editor ([#33759]).\n* The contextual module which is active in the REPL can be changed (it is `Main` by default),\n  via the `REPL.activate(::Module)` function or via typing the module in the REPL and pressing\n  the keybinding Alt-m ([#33872]).\n* A \"numbered prompt\" mode which prints numbers for each input and output and stores evaluated results in `Out` can be\n  activated with `REPL.numbered_prompt!()`. See the manual for how to enable this at startup ([#46474]).\n* Tab completion displays available keyword arguments ([#43536])\n\n#### SuiteSparse\n\n* Code for the SuiteSparse solver wrappers has been moved to SparseArrays.jl. Solvers are now re-exported by\n  SuiteSparse.jl.\n\n#### SparseArrays\n\n* SuiteSparse solvers are now available as submodules of SparseArrays (<https://github.com/JuliaSparse/SparseArrays.jl/pull/95>).\n* UMFPACK (<https://github.com/JuliaSparse/SparseArrays.jl/pull/179>) and CHOLMOD (<https://github.com/JuliaSparse/SparseArrays.jl/pull/206>) thread safety are improved by\n  avoiding globals and using locks. Multithreaded `ldiv!` of UMFPACK objects may now be performed safely.\n* An experimental function `SparseArrays.allowscalar(::Bool)` allows scalar indexing of sparse arrays to be\n  disabled or enabled. This function is intended to help find accidental scalar indexing of `SparseMatrixCSC`\n  objects, which is a common source of performance issues (<https://github.com/JuliaSparse/SparseArrays.jl/pull/200>).\n\n#### Test\n\n* New fail-fast mode for testsets that will terminate the test run early if a failure or error occurs.\n  Set either via the `@testset` kwarg `failfast=true` or by setting env var `JULIA_TEST_FAILFAST`\n  to `\"true\"` i.e. in CI runs to request the job failure be posted eagerly when issues occur ([#45317])\n\n#### Dates\n\n* Empty strings are no longer incorrectly parsed as valid `DateTime`s, `Date`s or `Time`s and instead throw an\n  `ArgumentError` in constructors and `parse`, while `nothing` is returned by `tryparse` ([#47117]).\n\n#### Distributed\n\n* The package environment (active project, `LOAD_PATH`, `DEPOT_PATH`) is now propagated when adding *local* workers\n  (e.g. with `addprocs(N::Int)` or through the `--procs=N` command line flag) ([#43270]).\n* `addprocs` for local workers now accepts the `env` keyword argument for passing environment variables to worker\n  processes. This was already supported for remote workers ([#43270]).\n\n#### Unicode\n\n* `graphemes(s, m:n)` returns a substring of the `m`-th to `n`-th graphemes in `s` ([#44266]).\n\n#### DelimitedFiles\n\n* DelimitedFiles has been moved out as a separate package.\n\nDeprecated or removed\n---------------------\n\n\nExternal dependencies\n---------------------\n\n* On Linux, now autodetects the system libstdc++ version, and automatically loads the system library if it is newer.\n  The old behavior of loading the bundled libstdc++ regardless of the system version can be restored by setting the\n  environment variable `JULIA_PROBE_LIBSTDCXX=0` ([#46976]).\n* Removed `RPATH` from the julia binary. On Linux this may break libraries that have failed to set `RUNPATH`.\n\nTooling Improvements\n--------------------\n\n* Printing of `MethodError` and methods (such as from `methods(my_func)`) is now prettified and colored consistently\n  with printing of methods in stacktraces ([#45069]).\n\n<!--- generated by NEWS-update.jl: -->\n[#28973]: https://github.com/JuliaLang/julia/issues/28973\n[#32310]: https://github.com/JuliaLang/julia/issues/32310\n[#33759]: https://github.com/JuliaLang/julia/issues/33759\n[#33872]: https://github.com/JuliaLang/julia/issues/33872\n[#41246]: https://github.com/JuliaLang/julia/issues/41246\n[#41638]: https://github.com/JuliaLang/julia/issues/41638\n[#42302]: https://github.com/JuliaLang/julia/issues/42302\n[#42340]: https://github.com/JuliaLang/julia/issues/42340\n[#42717]: https://github.com/JuliaLang/julia/issues/42717\n[#42902]: https://github.com/JuliaLang/julia/issues/42902\n[#43270]: https://github.com/JuliaLang/julia/issues/43270\n[#43334]: https://github.com/JuliaLang/julia/issues/43334\n[#43536]: https://github.com/JuliaLang/julia/issues/43536\n[#44137]: https://github.com/JuliaLang/julia/issues/44137\n[#44266]: https://github.com/JuliaLang/julia/issues/44266\n[#44358]: https://github.com/JuliaLang/julia/issues/44358\n[#44360]: https://github.com/JuliaLang/julia/issues/44360\n[#44512]: https://github.com/JuliaLang/julia/issues/44512\n[#44527]: https://github.com/JuliaLang/julia/issues/44527\n[#44534]: https://github.com/JuliaLang/julia/issues/44534\n[#44571]: https://github.com/JuliaLang/julia/issues/44571\n[#44714]: https://github.com/JuliaLang/julia/issues/44714\n[#44752]: https://github.com/JuliaLang/julia/issues/44752\n[#44776]: https://github.com/JuliaLang/julia/issues/44776\n[#44792]: https://github.com/JuliaLang/julia/issues/44792\n[#44925]: https://github.com/JuliaLang/julia/issues/44925\n[#44989]: https://github.com/JuliaLang/julia/issues/44989\n[#45004]: https://github.com/JuliaLang/julia/issues/45004\n[#45015]: https://github.com/JuliaLang/julia/issues/45015\n[#45069]: https://github.com/JuliaLang/julia/issues/45069\n[#45222]: https://github.com/JuliaLang/julia/issues/45222\n[#45276]: https://github.com/JuliaLang/julia/issues/45276\n[#45317]: https://github.com/JuliaLang/julia/issues/45317\n[#45366]: https://github.com/JuliaLang/julia/issues/45366\n[#45369]: https://github.com/JuliaLang/julia/issues/45369\n[#45404]: https://github.com/JuliaLang/julia/issues/45404\n[#45412]: https://github.com/JuliaLang/julia/issues/45412\n[#45607]: https://github.com/JuliaLang/julia/issues/45607\n[#45807]: https://github.com/JuliaLang/julia/issues/45807\n[#45831]: https://github.com/JuliaLang/julia/issues/45831\n[#46010]: https://github.com/JuliaLang/julia/issues/46010\n[#46085]: https://github.com/JuliaLang/julia/issues/46085\n[#46273]: https://github.com/JuliaLang/julia/issues/46273\n[#46300]: https://github.com/JuliaLang/julia/issues/46300\n[#46474]: https://github.com/JuliaLang/julia/issues/46474\n[#46609]: https://github.com/JuliaLang/julia/issues/46609\n[#46862]: https://github.com/JuliaLang/julia/issues/46862\n[#46976]: https://github.com/JuliaLang/julia/issues/46976\n[#47117]: https://github.com/JuliaLang/julia/issues/47117\n[#47184]: https://github.com/JuliaLang/julia/issues/47184\n[#47367]: https://github.com/JuliaLang/julia/issues/47367\n[#47392]: https://github.com/JuliaLang/julia/issues/47392\n\n\nJulia v1.8 Release Notes\n========================\n\nNew language features\n---------------------\n\n* Mutable struct fields may now be annotated as `const` to prevent changing them after construction,\n  providing for greater clarity and optimization ability of these objects ([#43305]).\n* Type annotations can now be added to global variables to make accessing them type stable ([#43671]).\n* Empty n-dimensional arrays can now be created using multiple semicolons inside square brackets,\n  e.g. `[;;;]` creates a 0×0×0 `Array` ([#41618]).\n* `try`-blocks can now optionally have an `else`-block which is executed right after the main body only if\n  no errors were thrown ([#42211]).\n* `@inline` and `@noinline` can now be placed within a function body, allowing one to annotate anonymous function ([#41312]).\n* `@inline` and `@noinline` can now be applied to a function at callsite or block\n  to enforce the involved function calls to be (or not to be) inlined ([#41328]).\n* `∀`, `∃`, and `∄` are now allowed as identifier characters ([#42314]).\n* Support for Unicode 14.0.0 ([#43443]).\n* `Module(:name, false, false)` can be used to create a `module` that contains no names\n  (it does not import `Base` or `Core` and does not contain a reference to itself) ([#40110], [#42154]).\n\nLanguage changes\n----------------\n\n* Newly-created Task objects (`@spawn`, `@async`, etc.) now adopt the world age for methods from their parent\n  Task upon creation, instead of using the global latest world at start. This is done to enable inference to\n  eventually optimize these calls. Places that wish for the old behavior may use `Base.invokelatest` ([#41449]).\n* Unbalanced Unicode bidirectional formatting directives are now disallowed within strings and comments,\n  to mitigate the [\"trojan source\"](https://www.trojansource.codes) vulnerability ([#42918]).\n* `Base.ifelse` is now defined as a generic function rather than a builtin one, allowing packages to\n  extend its definition ([#37343]).\n* Every assignment to a global variable now first goes through a call to `convert(Any, x)` (or `convert(T, x)`\n  respectively if a type `T` has been declared for the global). This means great care should be taken\n  to ensure the invariant `convert(Any, x) === x` always holds, as this change could otherwise lead to\n  unexpected behavior ([#43671]).\n* Builtin functions are now a bit more like generic functions, and can be enumerated with `methods` ([#43865]).\n\nCompiler/Runtime improvements\n-----------------------------\n\n* Bootstrapping time has been improved by about 25% ([#41794]).\n* The LLVM-based compiler has been separated from the run-time library into a new library,\n  `libjulia-codegen`. It is loaded by default, so normal usage should see no changes.\n  In deployments that do not need the compiler (e.g. system images where all needed code\n  is precompiled), this library (and its LLVM dependency) can simply be excluded ([#41936]).\n* Conditional type constraints are now be forwarded interprocedurally (i.e. propagated from caller to callee).\n  This allows inference to understand e.g. `Base.ifelse(isa(x, Int), x, 0)` returns `::Int`-value\n  even if the type of `x` is not known ([#42529]).\n* Julia-level SROA (Scalar Replacement of Aggregates) has been improved: allowing elimination of\n  `getfield` calls with constant global fields ([#42355]), enabling elimination of mutable structs with\n  uninitialized fields ([#43208]), improving performance ([#43232]), and handling more nested `getfield`\n  calls ([#43239]).\n* Abstract call sites can now be inlined or statically resolved as long as the call site has a single\n  matching method ([#43113]).\n* Inference now tracks various effects such as side-effectful-ness and nothrow-ness on a per-specialization basis.\n  Code heavily dependent on constant propagation should see significant compile-time performance improvements and\n  certain cases (e.g. calls to uninlinable functions that are nevertheless effect free) should see runtime performance\n  improvements. Effects may be overwritten manually with the `Base.@assume_effects` macro ([#43852]).\n\nCommand-line option changes\n---------------------------\n\n* The default behavior of observing `@inbounds` declarations is now an option via `auto` in `--check-bounds=yes|no|auto` ([#41551]).\n* New option `--strip-metadata` to remove docstrings, source location information, and local\n  variable names when building a system image ([#42513]).\n* New option `--strip-ir` to remove the compiler's IR (intermediate representation) of source\n  code when building a system image. The resulting image will only work if `--compile=all` is\n  used, or if all needed code is precompiled ([#42925]).\n* When the program file is `-` the code to be executed is read from standard in ([#43191]).\n\nMulti-threading changes\n-----------------------\n\n* `Threads.@threads` now defaults to a new `:dynamic` schedule option which is similar to the previous behavior except\n  that iterations will be scheduled dynamically to available worker threads rather than pinned to each thread. This\n  behavior is more composable with (possibly nested) `@spawn` and `@threads` loops ([#43919], [#44136]).\n\nBuild system changes\n--------------------\n\n\nNew library functions\n---------------------\n\n* New function `eachsplit(str)` for iteratively performing `split(str)` ([#39245]).\n* New function `allequal(itr)` for testing if all elements in an iterator are equal ([#43354]).\n* `hardlink(src, dst)` can be used to create hard links ([#41639]).\n* `setcpuaffinity(cmd, cpus)` can be used to set CPU affinity of sub-processes ([#42469]).\n* `diskstat(path=pwd())` can be used to return statistics about the disk ([#42248]).\n* New `@showtime` macro to show both the line being evaluated and the `@time` report ([#42431]).\n* The `LazyString` and the `lazy\"str\"` macro were added to support delayed construction of error messages in error paths ([#33711]).\n\nNew library features\n--------------------\n\n* `@time` and `@timev` now take an optional description to allow annotating the source of time reports,\n  e.g. `@time \"Evaluating foo\" foo()` ([#42431]).\n* `range` accepts either `stop` or `length` as a sole keyword argument ([#39241]).\n* `precision` and `setprecision` now accept a `base` keyword argument ([#42428]).\n* TCP socket objects now expose `closewrite` functionality and support half-open mode usage ([#40783]).\n* `extrema` now accepts an `init` keyword argument ([#36265], [#43604]).\n* `Iterators.countfrom` now accepts any type that defines `+` ([#37747]).\n\nStandard library changes\n------------------------\n\n* Keys with value `nothing` are now removed from the environment in `addenv` ([#43271]).\n* `Iterators.reverse` (and hence `last`) now supports `eachline` iterators ([#42225]).\n* The `length` function on certain ranges of certain element types no longer checks for integer\n  overflow in most cases. The new function `checked_length` is now available, which will try to use checked\n  arithmetic to error if the result may be wrapping. Or use a package such as SaferIntegers.jl when\n  constructing the range ([#40382]).\n* Intersect returns a result with the eltype of the type-promoted eltypes of the two inputs ([#41769]).\n* Iterating an `Iterators.Reverse` now falls back on reversing the eachindex iterator, if possible ([#43110]).\n\n#### InteractiveUtils\n\n* New macro `@time_imports` for reporting any time spent importing packages and their dependencies, highlighting\n  compilation and recompilation time as percentages per import ([#41612],[#45064]).\n\n#### LinearAlgebra\n\n* The BLAS submodule now supports the level-2 BLAS subroutine `spr!` ([#42830]).\n* `cholesky[!]` now supports `LinearAlgebra.PivotingStrategy` (singleton type) values\n  as its optional `pivot` argument: the default is `cholesky(A, NoPivot())` (vs.\n  `cholesky(A, RowMaximum())`); the former `Val{true/false}`-based calls are deprecated ([#41640]).\n* The standard library `LinearAlgebra.jl` is now completely independent of `SparseArrays.jl`,\n  both in terms of the source code as well as unit testing ([#43127]). As a consequence,\n  sparse arrays are no longer (silently) returned by methods from `LinearAlgebra` applied\n  to `Base` or `LinearAlgebra` objects. Specifically, this results in the following breaking\n  changes:\n  * Concatenations involving special \"sparse\" matrices (`*diagonal`) now return dense matrices;\n    As a consequence, the `D1` and `D2` fields of `SVD` objects, constructed upon `getproperty`\n    calls are now dense matrices.\n  * 3-arg `similar(::SpecialSparseMatrix, ::Type, ::Dims)` returns a dense zero matrix.\n    As a consequence, products of bi-, tri- and symmetric tridiagonal matrices with each\n    other result in dense output. Moreover, constructing 3-arg similar matrices of special\n    \"sparse\" matrices of (nonstatic) matrices now fails for the lack of `zero(::Type{Matrix{T}})`.\n\n#### Printf\n\n* Now uses `textwidth` for formatting `%s` and `%c` widths ([#41085]).\n\n#### Profile\n\n* CPU profiling now records sample metadata including thread and task. `Profile.print()` has a new `groupby` kwarg that allows\n  grouping by thread, task, or nested thread/task, task/thread, and `threads` and `tasks` kwargs to allow filtering.\n  Further, percent utilization is now reported as a total or per-thread, based on whether the thread is idle or not at\n  each sample. `Profile.fetch()` includes the new metadata by default. For backwards compatibility with external\n  profiling data consumers, it can be excluded by passing `include_meta=false` ([#41742]).\n* The new `Profile.Allocs` module allows memory allocations to be profiled. The stack trace, type, and size of each\n  allocation is recorded, and a `sample_rate` argument allows a tunable amount of allocations to be skipped,\n  reducing performance overhead ([#42768]).\n* A fixed duration cpu profile can now be triggered by the user during running tasks without `Profile` being loaded\n  first and the report will show during execution. On MacOS & FreeBSD press `ctrl-t` or raise a `SIGINFO`.\n  For other platforms raise a `SIGUSR1` i.e. `% kill -USR1 $julia_pid`. Not currently available on windows ([#43179]).\n\n#### REPL\n\n* `RadioMenu` now supports optional `keybindings` to directly select options ([#41576]).\n* ` ?(x, y` followed by TAB displays all methods that can be called\n  with arguments `x, y, ...`. (The space at the beginning prevents entering help-mode.)\n  `MyModule.?(x, y` limits the search to `MyModule`. TAB requires that at least one\n  argument have a type more specific than `Any`; use SHIFT-TAB instead of TAB\n  to allow any compatible methods ([#38791]).\n* New `err` global variable in `Main` set when an expression throws an exception, akin to `ans`. Typing `err` reprints\n  the exception information ([#40642]).\n\n#### SparseArrays\n\n* The code for SparseArrays has been moved from the Julia repo to the external\n  repo at https://github.com/JuliaSparse/SparseArrays.jl. This is only a code\n  movement and does not impact any usage ([#43813]).\n* New sparse concatenation functions `sparse_hcat`, `sparse_vcat`, and `sparse_hvcat` return\n  `SparseMatrixCSC` output independent from the types of the input arguments. They make\n  concatenation behavior available, in which the presence of some special \"sparse\" matrix\n  argument resulted in sparse output by multiple dispatch. This is no longer possible after\n  making `LinearAlgebra.jl` independent from `SparseArrays.jl` ([#43127]).\n\n#### Logging\n\n* The standard log levels `BelowMinLevel`, `Debug`, `Info`, `Warn`, `Error`,\n  and `AboveMaxLevel` are now exported from the Logging stdlib ([#40980]).\n\n#### Unicode\n\n* Added function `isequal_normalized` to check for Unicode equivalence without\n  explicitly constructing normalized strings ([#42493]).\n* The `Unicode.normalize` function now accepts a `chartransform` keyword that can\n  be used to supply custom character mappings, and a `Unicode.julia_chartransform`\n  function is provided to reproduce the mapping used in identifier normalization\n  by the Julia parser ([#42561]).\n\n#### Test\n\n* `@test_throws \"some message\" triggers_error()` can now be used to check whether the displayed error text\n  contains \"some message\" regardless of the specific exception type.\n  Regular expressions, lists of strings, and matching functions are also supported ([#41888]).\n* `@testset foo()` can now be used to create a test set from a given function. The name of the test set\n  is the name of the called function. The called function can contain `@test` and other `@testset`\n  definitions, including to other function calls, while recording all intermediate test results ([#42518]).\n* `TestLogger` and `LogRecord` are now exported from the Test stdlib ([#44080]).\n\n#### Distributed\n\n* SSHManager now supports workers with csh/tcsh login shell, via `addprocs()` option `shell=:csh` ([#41485]).\n\n\nDeprecated or removed\n---------------------\n\n\nExternal dependencies\n---------------------\n\n\nTooling Improvements\n---------------------\n\n* `GC.enable_logging(true)` can be used to log each garbage collection, with the\n  time it took and the amount of memory that was collected ([#43511]).\n\n<!--- generated by NEWS-update.jl: -->\n[#33711]: https://github.com/JuliaLang/julia/issues/33711\n[#36265]: https://github.com/JuliaLang/julia/issues/36265\n[#37343]: https://github.com/JuliaLang/julia/issues/37343\n[#37747]: https://github.com/JuliaLang/julia/issues/37747\n[#38791]: https://github.com/JuliaLang/julia/issues/38791\n[#39241]: https://github.com/JuliaLang/julia/issues/39241\n[#39245]: https://github.com/JuliaLang/julia/issues/39245\n[#40110]: https://github.com/JuliaLang/julia/issues/40110\n[#40382]: https://github.com/JuliaLang/julia/issues/40382\n[#40642]: https://github.com/JuliaLang/julia/issues/40642\n[#40783]: https://github.com/JuliaLang/julia/issues/40783\n[#40980]: https://github.com/JuliaLang/julia/issues/40980\n[#41085]: https://github.com/JuliaLang/julia/issues/41085\n[#41312]: https://github.com/JuliaLang/julia/issues/41312\n[#41328]: https://github.com/JuliaLang/julia/issues/41328\n[#41449]: https://github.com/JuliaLang/julia/issues/41449\n[#41485]: https://github.com/JuliaLang/julia/issues/41485\n[#41551]: https://github.com/JuliaLang/julia/issues/41551\n[#41576]: https://github.com/JuliaLang/julia/issues/41576\n[#41612]: https://github.com/JuliaLang/julia/issues/41612\n[#41618]: https://github.com/JuliaLang/julia/issues/41618\n[#41639]: https://github.com/JuliaLang/julia/issues/41639\n[#41640]: https://github.com/JuliaLang/julia/issues/41640\n[#41742]: https://github.com/JuliaLang/julia/issues/41742\n[#41769]: https://github.com/JuliaLang/julia/issues/41769\n[#41794]: https://github.com/JuliaLang/julia/issues/41794\n[#41888]: https://github.com/JuliaLang/julia/issues/41888\n[#41936]: https://github.com/JuliaLang/julia/issues/41936\n[#42154]: https://github.com/JuliaLang/julia/issues/42154\n[#42211]: https://github.com/JuliaLang/julia/issues/42211\n[#42225]: https://github.com/JuliaLang/julia/issues/42225\n[#42248]: https://github.com/JuliaLang/julia/issues/42248\n[#42314]: https://github.com/JuliaLang/julia/issues/42314\n[#42355]: https://github.com/JuliaLang/julia/issues/42355\n[#42428]: https://github.com/JuliaLang/julia/issues/42428\n[#42431]: https://github.com/JuliaLang/julia/issues/42431\n[#42469]: https://github.com/JuliaLang/julia/issues/42469\n[#42493]: https://github.com/JuliaLang/julia/issues/42493\n[#42513]: https://github.com/JuliaLang/julia/issues/42513\n[#42518]: https://github.com/JuliaLang/julia/issues/42518\n[#42529]: https://github.com/JuliaLang/julia/issues/42529\n[#42561]: https://github.com/JuliaLang/julia/issues/42561\n[#42768]: https://github.com/JuliaLang/julia/issues/42768\n[#42830]: https://github.com/JuliaLang/julia/issues/42830\n[#42918]: https://github.com/JuliaLang/julia/issues/42918\n[#42925]: https://github.com/JuliaLang/julia/issues/42925\n[#43110]: https://github.com/JuliaLang/julia/issues/43110\n[#43113]: https://github.com/JuliaLang/julia/issues/43113\n[#43127]: https://github.com/JuliaLang/julia/issues/43127\n[#43179]: https://github.com/JuliaLang/julia/issues/43179\n[#43191]: https://github.com/JuliaLang/julia/issues/43191\n[#43208]: https://github.com/JuliaLang/julia/issues/43208\n[#43232]: https://github.com/JuliaLang/julia/issues/43232\n[#43239]: https://github.com/JuliaLang/julia/issues/43239\n[#43271]: https://github.com/JuliaLang/julia/issues/43271\n[#43305]: https://github.com/JuliaLang/julia/issues/43305\n[#43354]: https://github.com/JuliaLang/julia/issues/43354\n[#43443]: https://github.com/JuliaLang/julia/issues/43443\n[#43511]: https://github.com/JuliaLang/julia/issues/43511\n[#43604]: https://github.com/JuliaLang/julia/issues/43604\n[#43671]: https://github.com/JuliaLang/julia/issues/43671\n[#43813]: https://github.com/JuliaLang/julia/issues/43813\n[#43852]: https://github.com/JuliaLang/julia/issues/43852\n[#43865]: https://github.com/JuliaLang/julia/issues/43865\n[#43919]: https://github.com/JuliaLang/julia/issues/43919\n[#44080]: https://github.com/JuliaLang/julia/issues/44080\n[#44136]: https://github.com/JuliaLang/julia/issues/44136\n[#45064]: https://github.com/JuliaLang/julia/issues/45064\n\nJulia v1.7 Release Notes\n========================\n\nNew language features\n---------------------\n\n* `(; a, b) = x` can now be used to destructure properties `a` and `b` of `x`.\n  This syntax is equivalent to `a = getproperty(x, :a); b = getproperty(x, :b)` ([#39285]).\n* Implicit multiplication by juxtaposition is now allowed for radical symbols (e.g. `x√y` and `x∛y`) ([#40173]).\n* The short-circuiting operators `&&` and `||` can now be dotted to participate in broadcast fusion\n  as `.&&` and `.||` ([#39594]).\n* `⫪` (U+2AEA, `\\Top`, `\\downvDash`) and `⫫` (U+2AEB, `\\Bot`, `\\upvDash`, `\\indep`)\n  may now be used as binary operators with comparison precedence ([#39403]).\n* Repeated semicolons can now be used inside array concatenation expressions to separate dimensions\n  of an array, with the number of semicolons specifying the dimension. Just as a single semicolon\n  in `[A; B]` has always described concatenating in the first dimension (vertically), now two\n  semicolons `[A;; B]` do so in the second dimension (horizontally), three semicolons `;;;` in the\n  third, and so on ([#33697]).\n* A backslash (`\\`) before a newline inside a string literal now removes the newline while also\n  respecting indentation. This can be used to split up long strings without newlines into multiple\n  lines of code ([#40753]).\n* A backslash before a newline in command literals now always removes the newline, similar to standard string\n  literals, whereas the result was not well-defined before ([#40753]).\n\nLanguage changes\n----------------\n\n* `macroexpand`, `@macroexpand`, and `@macroexpand1` no longer wrap errors in a `LoadError`.\n  To reduce breakage, `@test_throws` has been modified so that many affected tests will still pass ([#38379]).\n* The middle dot `·` (`\\cdotp` U+00b7) and the Greek interpunct `·` (U+0387) are now treated as equivalent to\n  the dot operator `⋅` (`\\cdot` U+22c5) (#25157).\n* The minus sign `−` (`\\minus` U+2212) is now treated as equivalent to the hyphen-minus sign `-` (U+002d) ([#40948]).\n* Destructuring will no longer mutate values on the left-hand side while iterating through values on\n  the right-hand side. In the example of an array `x`, `x[2], x[1] = x` will now swap the first and\n  second elements of `x`, whereas it used to fill both entries with `x[1]` because `x[2]` was mutated during\n  the iteration of `x` ([#40737]).\n* The default random number generator has changed, so all random numbers will be different (even with the\n  same seed) unless an explicit RNG object is used.\n  See the section on the `Random` standard library below ([#40546]).\n* `Iterators.peel(itr)` now returns `nothing` when `itr` is empty instead of throwing a `BoundsError` ([#39607]).\n* Multiple successive semicolons in an array expression were previously ignored (e.g., `[1 ;; 2] == [1 ; 2]`).\n  This syntax is now used to separate dimensions (see **New language features**).\n\nCompiler/Runtime improvements\n-----------------------------\n\n\nCommand-line option changes\n---------------------------\n\n* The Julia `--project` option and the `JULIA_PROJECT` environment variable now support selecting shared\n  environments like `.julia/environments/myenv` the same way the package management console does:\n  use `julia --project=@myenv` resp. `export JULIA_PROJECT=\"@myenv\"` ([#40025]).\n\nMulti-threading changes\n-----------------------\n\n* Intrinsics for atomic pointer operations are now defined for certain byte sizes ([#37847]).\n* Support for declaring and using individual fields of a mutable struct as atomic has been\n  added; see the new `@atomic` macro ([#37847]).\n* If the `JULIA_NUM_THREADS` environment variable is set to `auto`, then the\n  number of threads will be set to the number of CPU threads ([#38952]).\n* Every `Task` object has a local random number generator state, providing\n  reproducible (schedule-independent) execution of parallel simulation code by\n  default. The default generator is also significantly faster in parallel than\n  in previous versions ([#40546]).\n* Tasks can now migrate among threads when they are re-scheduled. Previously, a Task\n  would always run on whichever thread executed it first ([#40715]).\n\nBuild system changes\n--------------------\n\n\nNew library functions\n---------------------\n\n* Two argument methods `findmax(f, domain)`, `argmax(f, domain)` and the corresponding\n  `min` versions ([#35316]).\n* `isunordered(x)` returns true if `x` is a value that is normally unordered, such as\n  `NaN` or `missing` ([#35316]).\n* New `keepat!(vector, inds)` function which is the inplace equivalent of `vector[inds]`\n  for a list `inds` of integers ([#36229]).\n* Two arguments method `lock(f, lck)` now accepts a `Channel` as the second argument ([#39312]).\n* New functor `Returns(value)`, which returns `value` for any arguments ([#39794]).\n* New macros `@something` and `@coalesce` which are short-circuiting versions of `something` and\n  `coalesce`, respectively ([#40729]).\n* New function `redirect_stdio` for redirecting `stdin`, `stdout` and `stderr` ([#37978]).\n* New macro `Base.@invoke f(arg1::T1, arg2::T2; kwargs...)` provides an easier syntax to call\n  `invoke(f, Tuple{T1,T2}, arg1, arg2; kwargs...)` ([#38438]).\n* New macro `Base.@invokelatest f(args...; kwargs...)` providing a convenient way to call\n  `Base.invokelatest(f, args...; kwargs...)` ([#37971]).\n\nNew library features\n--------------------\n\n* The optional keyword argument `context` of `sprint` can now be set to a tuple of `:key => value`\n  pairs to specify multiple attributes ([#39381]).\n* `bytes2hex` and `hex2bytes` are no longer limited to arguments of type `Union{String,AbstractVector{UInt8}}`\n  and now only require that they're iterable and have a length ([#39710]).\n* `stat(file)` now has a more detailed and user-friendly `show` method ([#39463]).\n\nStandard library changes\n------------------------\n\n* `count` and `findall` now accept an `AbstractChar` argument to search for a character in\n  a string ([#38675]).\n* New methods `range(start, stop)` and `range(start, stop, length)` ([#39228]).\n* `range` now supports `start` as an optional keyword argument ([#38041]).\n* Some operations on ranges will return a `StepRangeLen` instead of a `StepRange`, to allow\n  the resulting step to be zero. Previously, `λ .* (1:9)` gave an error when `λ = 0` ([#40320]).\n* `islowercase` and `isuppercase` are now compliant with the Unicode lower/uppercase categories ([#38574]).\n* `iseven` and `isodd` functions now support non-`Integer` numeric types ([#38976]).\n* `escape_string` now accepts a collection of characters via the keyword\n  `keep` that are to be kept as they are ([#38597]).\n* `getindex` for `NamedTuple`s now accepts a tuple of symbols in order to index multiple values ([#38878]).\n* Subtypes of `AbstractRange` now correctly follow the general array indexing behavior when indexed by\n  `Bool`s, erroring for scalar `Bool`s and treating arrays (including ranges) of `Bool` as\n  logical indices ([#31829]).\n* `keys(::RegexMatch)` is now defined to return the capture's keys, by name if named, or by index if not ([#37299]).\n* `keys(::Generator)` is now defined to return the iterator's keys ([#34678]).\n* `RegexMatch` is now iterable, giving the captured substrings ([#34355]).\n* `lpad/rpad` are now defined in terms of `textwidth` ([#39044]).\n* `Test.@test` now accepts `broken` and `skip` boolean keyword arguments, which\n  mimic `Test.@test_broken` and `Test.@test_skip` behavior, but allows skipping\n  tests failing only under certain conditions. For example\n  ```julia\n  if T == Float64\n      @test_broken isequal(complex(one(T)) / complex(T(Inf), T(-Inf)), complex(zero(T), zero(T)))\n  else\n      @test isequal(complex(one(T)) / complex(T(Inf), T(-Inf)), complex(zero(T), zero(T)))\n  end\n  ```\n  can be replaced by\n  ```julia\n  @test isequal(complex(one(T)) / complex(T(Inf), T(-Inf)), complex(zero(T), zero(T))) broken=(T == Float64)\n  ```\n  ([#39322]).\n* `@lock` is now exported from Base ([#39588]).\n* The experimental function `Base.catch_stack()` has been renamed to `current_exceptions()`, exported\n  from Base and given a more specific return type ([#29901]).\n* Some degree trigonometric functions, `sind`, `cosd`, `tand`, `asind`, `acosd`, `asecd`, `acscd`,\n  `acotd`, `atand` now accept a square matrix ([#39758]).\n* `replace(::String)` now accepts multiple patterns, which will be applied left-to-right simultaneously,\n  so only one pattern will be applied to any character, and the patterns will only be applied to the input\n  text, not the replacements ([#40484]).\n* New `replace` methods to replace elements of a `Tuple` ([#38216]).\n\n\n#### Package Manager\n\n* If a package is `using` or `import`ed from the `julia>` prompt that isn't found but is available\n  from a registry, a `pkg> add` prompt now offers to install the package into the current environment,\n  precompile it, and continue to load it ([#39026]).\n* A new `Manifest.toml` format is now used that captures extensible metadata fields, including the\n  julia version that generated the manifest. Old format manifests are still supported and will be\n  maintained in their original format, unless the user runs `Pkg.upgrade_manifest()` to upgrade the\n  format of the current environment's manifest without re-resolving ([#40765]).\n* `pkg> precompile` will now precompile new versions of packages that are already loaded, rather than\n  postponing to the next session (the `?`-marked dependencies) ([#40345]).\n* `pkg> rm`, `pin`, and `free` now accept the `--all` argument to call the action on all packages.\n* Registries downloaded from the Pkg Server (not git) are no longer uncompressed into files but instead\n  read directly from the compressed tarball into memory. This improves performance on\n  filesystems which do not handle a large number of files well. To turn this feature off, set the\n  environment variable `JULIA_PKG_UNPACK_REGISTRY=true`.\n* It is now possible to use an external `git` executable instead of the default libgit2 library\n  for the downloads that happen via the Git protocol by setting the environment variable\n  `JULIA_PKG_USE_CLI_GIT=true`.\n* Registries downloaded from the Pkg Server (not git) is now assumed to be immutable. Manual changes\n  to their files might not be picked up by a running Pkg session.\n* Adding packages by directory name in the REPL mode now requires prepending `./` to the name if the\n  package is in the current directory; e.g. `add ./Package` is required instead of `add Package`.\n  This is to avoid confusion between the package name `Package` and the local directory `Package`.\n* The `mode` keyword for `PackageSpec` has been removed.\n\n#### LinearAlgebra\n\n* Use [Libblastrampoline](https://github.com/staticfloat/libblastrampoline/) to pick a BLAS\n  and LAPACK at runtime. By default it forwards to OpenBLAS in the Julia distribution.\n  The forwarding mechanism can be used by packages to replace the BLAS and LAPACK with\n  user preferences ([#39455]).\n* On aarch64, OpenBLAS now uses an ILP64 BLAS like all other 64-bit platforms ([#39436]).\n* OpenBLAS is updated to 0.3.13 ([#39216]).\n* SuiteSparse is updated to 5.8.1 ([#39455]).\n* The shape of an `UpperHessenberg` matrix is preserved under certain arithmetic operations,\n  e.g. when multiplying or dividing by an `UpperTriangular` matrix ([#40039]).\n* Real quasitriangular Schur factorizations `S` can now be efficiently converted to complex\n  upper-triangular form with `Schur{Complex}(S)` ([#40573]).\n* `cis(A)` now supports matrix arguments ([#40194]).\n* `dot` now supports `UniformScaling` with `AbstractMatrix` ([#40250]).\n* `qr[!]` and `lu[!]` now support `LinearAlgebra.PivotingStrategy` (singleton type) values\n  as their optional `pivot` argument: defaults are `qr(A, NoPivot())` (vs. `qr(A, ColumnNorm())`\n  for pivoting) and `lu(A, RowMaximum())` (vs. `lu(A, NoPivot())` without pivoting); the former\n  `Val{true/false}`-based calls are deprecated ([#40623]).\n* `det(M::AbstractMatrix{BigInt})` now calls `det_bareiss(M)`, which uses the\n  [Bareiss](https://en.wikipedia.org/wiki/Bareiss_algorithm) algorithm to calculate precise\n  values ([#40868]).\n\n#### Markdown\n\n\n#### Printf\n\n\n#### Random\n\n* The default random number generator has been changed from Mersenne Twister to\n  [Xoshiro256++](https://prng.di.unimi.it/).\n  The new generator has smaller state, better performance, and superior statistical properties.\n  This generator is the one used for reproducible Task-local randomness ([#40546]).\n\n#### REPL\n\n* Long strings are now elided using the syntax `\"head\" ⋯ 12345 bytes ⋯ \"tail\"` when displayed\n  in the REPL ([#40736]).\n* Pasting repl examples into the repl (prompt pasting) now supports all repl modes (`julia`, `pkg`,\n  `shell`, `help?`) and switches mode automatically ([#40604]).\n* `help?>` for modules without docstrings now returns a list of exported names and prints\n  the contents of an associated `README.md` if found ([#39093]).\n\n#### SparseArrays\n\n* new `sizehint!(::SparseMatrixCSC, ::Integer)` method ([#30676]).\n* `cholesky()` now fully preserves the user-specified permutation ([#40560]).\n* `issparse` now applies consistently to all wrapper arrays, including nested, by checking\n  `issparse` on the wrapped parent array ([#37644]).\n\n#### Dates\n\n* The `Dates.periods` function can be used to get the `Vector` of `Period`s that comprise a\n  `CompoundPeriod` ([#39169]).\n\n#### Downloads\n\n* If a cookie header is set in a redirected request, the cookie will now be sent in following\n  requests (<https://github.com/JuliaLang/Downloads.jl/pull/98>).\n* If a `~/.netrc` file exists, it is used to get passwords for authenticated websites\n  (<https://github.com/JuliaLang/Downloads.jl/pull/98>).\n* [Server Name Indication](https://en.wikipedia.org/wiki/Server_Name_Indication) is now sent with\n  all TLS connections, even when the server's identity is not verified (see [NetworkOptions](https://github.com/JuliaLang/NetworkOptions.jl); <https://github.com/JuliaLang/Downloads.jl/pull/114>).\n* When verifying TLS connections on Windows, if the certificate revocation server cannot be\n  reached, the connection is allowed; this matches what other applications do and how revocation\n  is performed on macOS (<https://github.com/JuliaLang/Downloads.jl/pull/115>).\n* There is now a 30-second connection timeout and a 20-second timeout if no data is sent; in\n  combination, this guarantees that connections must make some progress or they will timeout in\n  under a minute (<https://github.com/JuliaLang/Downloads.jl/pull/126>).\n\n#### Statistics\n\n\n#### Sockets\n\n\n#### Tar\n\n* `Tar.extract` now ignores the exact permission mode in a tarball and normalizes modes in the\n  same way that `Tar.create` does, which is, in turn the same way that `git` normalizes them\n  (<https://github.com/JuliaIO/Tar.jl/pull/99>).\n* Functions that consume tarballs now handle hard links: the link target must be a previously seen\n  file; `Tar.list` lists the entry with `:hardlink` type and `.link` field giving the path to the\n  target; other functions — `Tar.extract`, `Tar.rewrite`, `Tar.tree_hash` — treat a hard link as a\n  copy of the target file (<https://github.com/JuliaIO/Tar.jl/pull/102>).\n* The standard format generated by `Tar.create` and `Tar.rewrite` now includes entries for non-empty\n  directories; this shouldn't be necessary, but some tools that consume tarballs (including docker)\n  are confused by the absence of these directory entries (<https://github.com/JuliaIO/Tar.jl/pull/106>).\n* `Tar` now accepts tarballs with leading spaces in octal integer header fields: this is technically\n  not a valid format according to the POSIX spec, but old Solaris `tar` commands produced tarballs like\n  this so this format does occur in the wild, and it seems harmless to accept it\n  (<https://github.com/JuliaIO/Tar.jl/pull/116>).\n* `Tar.extract` now takes a `set_permissions` keyword argument, which defaults to `true`; if `false` is\n  passed instead, the permissions of extracted files are not modified on extraction\n  (<https://github.com/JuliaIO/Tar.jl/pull/113>).\n\n#### Distributed\n\n\n#### UUIDs\n\n\n#### Mmap\n\n* `mmap` is now exported ([#39816]).\n\n#### DelimitedFiles\n\n* `readdlm` now defaults to `use_mmap=false` on all OSes for consistent reliability in abnormal\n  filesystem situations ([#40415]).\n\nDeprecated or removed\n---------------------\n\n\nExternal dependencies\n---------------------\n\n\nTooling Improvements\n---------------------\n\n\n<!--- generated by NEWS-update.jl: -->\n[#29901]: https://github.com/JuliaLang/julia/issues/29901\n[#30676]: https://github.com/JuliaLang/julia/issues/30676\n[#31829]: https://github.com/JuliaLang/julia/issues/31829\n[#33697]: https://github.com/JuliaLang/julia/issues/33697\n[#34355]: https://github.com/JuliaLang/julia/issues/34355\n[#34678]: https://github.com/JuliaLang/julia/issues/34678\n[#35316]: https://github.com/JuliaLang/julia/issues/35316\n[#36229]: https://github.com/JuliaLang/julia/issues/36229\n[#37299]: https://github.com/JuliaLang/julia/issues/37299\n[#37644]: https://github.com/JuliaLang/julia/issues/37644\n[#37847]: https://github.com/JuliaLang/julia/issues/37847\n[#37971]: https://github.com/JuliaLang/julia/issues/37971\n[#37978]: https://github.com/JuliaLang/julia/issues/37978\n[#38041]: https://github.com/JuliaLang/julia/issues/38041\n[#38216]: https://github.com/JuliaLang/julia/issues/38216\n[#38379]: https://github.com/JuliaLang/julia/issues/38379\n[#38438]: https://github.com/JuliaLang/julia/issues/38438\n[#38574]: https://github.com/JuliaLang/julia/issues/38574\n[#38597]: https://github.com/JuliaLang/julia/issues/38597\n[#38675]: https://github.com/JuliaLang/julia/issues/38675\n[#38878]: https://github.com/JuliaLang/julia/issues/38878\n[#38952]: https://github.com/JuliaLang/julia/issues/38952\n[#38976]: https://github.com/JuliaLang/julia/issues/38976\n[#39026]: https://github.com/JuliaLang/julia/issues/39026\n[#39044]: https://github.com/JuliaLang/julia/issues/39044\n[#39093]: https://github.com/JuliaLang/julia/issues/39093\n[#39169]: https://github.com/JuliaLang/julia/issues/39169\n[#39216]: https://github.com/JuliaLang/julia/issues/39216\n[#39228]: https://github.com/JuliaLang/julia/issues/39228\n[#39285]: https://github.com/JuliaLang/julia/issues/39285\n[#39312]: https://github.com/JuliaLang/julia/issues/39312\n[#39322]: https://github.com/JuliaLang/julia/issues/39322\n[#39381]: https://github.com/JuliaLang/julia/issues/39381\n[#39403]: https://github.com/JuliaLang/julia/issues/39403\n[#39436]: https://github.com/JuliaLang/julia/issues/39436\n[#39455]: https://github.com/JuliaLang/julia/issues/39455\n[#39463]: https://github.com/JuliaLang/julia/issues/39463\n[#39588]: https://github.com/JuliaLang/julia/issues/39588\n[#39594]: https://github.com/JuliaLang/julia/issues/39594\n[#39607]: https://github.com/JuliaLang/julia/issues/39607\n[#39710]: https://github.com/JuliaLang/julia/issues/39710\n[#39758]: https://github.com/JuliaLang/julia/issues/39758\n[#39794]: https://github.com/JuliaLang/julia/issues/39794\n[#39816]: https://github.com/JuliaLang/julia/issues/39816\n[#40025]: https://github.com/JuliaLang/julia/issues/40025\n[#40039]: https://github.com/JuliaLang/julia/issues/40039\n[#40173]: https://github.com/JuliaLang/julia/issues/40173\n[#40194]: https://github.com/JuliaLang/julia/issues/40194\n[#40250]: https://github.com/JuliaLang/julia/issues/40250\n[#40320]: https://github.com/JuliaLang/julia/issues/40320\n[#40345]: https://github.com/JuliaLang/julia/issues/40345\n[#40415]: https://github.com/JuliaLang/julia/issues/40415\n[#40484]: https://github.com/JuliaLang/julia/issues/40484\n[#40546]: https://github.com/JuliaLang/julia/issues/40546\n[#40560]: https://github.com/JuliaLang/julia/issues/40560\n[#40573]: https://github.com/JuliaLang/julia/issues/40573\n[#40604]: https://github.com/JuliaLang/julia/issues/40604\n[#40623]: https://github.com/JuliaLang/julia/issues/40623\n[#40715]: https://github.com/JuliaLang/julia/issues/40715\n[#40729]: https://github.com/JuliaLang/julia/issues/40729\n[#40736]: https://github.com/JuliaLang/julia/issues/40736\n[#40737]: https://github.com/JuliaLang/julia/issues/40737\n[#40753]: https://github.com/JuliaLang/julia/issues/40753\n[#40765]: https://github.com/JuliaLang/julia/issues/40765\n[#40868]: https://github.com/JuliaLang/julia/issues/40868\n[#40948]: https://github.com/JuliaLang/julia/issues/40948\n\n\nJulia v1.6 Release Notes\n========================\n\nNew language features\n---------------------\n\n* Types written with `where` syntax can now be used to define constructors, e.g.\n  `(Foo{T} where T)(x) = ...`.\n* `<--` and `<-->` are now available as infix operators, with the same precedence\n  and associativity as other arrow-like operators ([#36666]).\n* Compilation and type inference can now be enabled or disabled at the module level\n  using the experimental macro `Base.Experimental.@compiler_options` ([#37041]).\n* The library name passed to `ccall` or `@ccall` can now be an expression involving\n  global variables and function calls. The expression will be evaluated the first\n  time the `ccall` executes ([#36458]).\n* `ꜛ` (U+A71B), `ꜜ` (U+A71C) and `ꜝ` (U+A71D) can now also be used as operator\n  suffixes. They can be tab-completed from `\\^uparrow`, `\\^downarrow` and `\\^!` in the REPL\n  ([#37542]).\n* Standalone \"dotted\" operators now get parsed as `Expr(:., :op)`, which gets lowered to\n  `Base.BroadcastFunction(op)`. This means `.op` is functionally equivalent to\n  `(x...) -> (op).(x...)`, which can be useful for passing the broadcasted version of an\n  operator to higher-order functions, for example `map(.*, A, B)` for an elementwise\n  product of two arrays of arrays ([#37583]).\n* The syntax `import A as B` (plus `import A: x as y`, `import A.x as y`, and `using A: x as y`)\n  can now be used to rename imported modules and identifiers ([#1255]).\n* Unsigned literals (starting with `0x`) which are too big to fit in a `UInt128` object\n  are now interpreted as `BigInt` ([#23546]).\n* It is now possible to use `...` on the left-hand side of assignments for taking any\n  number of items from the front of an iterable collection, while also collecting the rest,\n  for example `a, b... = [1, 2, 3]`. This syntax is implemented using `Base.rest`,\n  which can be overloaded to customize its behavior for different collection types\n  ([#37410]).\n\nLanguage changes\n----------------\n\n* The postfix conjugate transpose operator `'` now accepts Unicode modifiers as\n  suffixes, so e.g. `a'ᵀ` is parsed as `var\"'ᵀ\"(a)`, which can be defined by the\n  user. `a'ᵀ` parsed as `a' * ᵀ` before, so this is a minor breaking change ([#37247]).\n* Macros that return `:quote` expressions (e.g. via `Expr(:quote, ...)`) were previously\n  able to work without escaping (`esc(...)`) their output when needed. This has been\n  corrected, and now `esc` must be used in these macros as it is in other macros ([#37540]).\n* The `-->` operator now lowers to a `:call` expression, so it can be defined as\n  a function like other operators. The dotted version `.-->` is now parsed as well.\n  For backwards compatibility, `-->` still parses using its own expression head\n  instead of `:call`.\n* The `a[begin, k]` syntax now calls `firstindex(a, 1)` rather than `first(axes(a, 1))` ([#35779]),\n  but the former now defaults to the latter for any `a` ([#38742]).\n* `⌿` (U+233F) and `¦` (U+00A6) are now infix operators with times-like and plus-like precedence,\n  respectively. Previously they were parsed as identifier characters ([#37973]).\n\nCompiler/Runtime improvements\n-----------------------------\n\n* All platforms can now use `@executable_path` within `jl_load_dynamic_library()`.\n  This allows executable-relative paths to be embedded within executables on all\n  platforms, not just MacOS, which the syntax is borrowed from ([#35627]).\n* Constant propagation now occurs through keyword arguments ([#35976]).\n* The precompilation cache is now created atomically ([#36416]). Invoking _n_\n  Julia processes simultaneously may create _n_ temporary caches.\n\nCommand-line option changes\n---------------------------\n\n* There is no longer a concept of \"home project\": starting `julia --project=dir`\n  is now exactly equivalent to starting `julia` and then doing `pkg> activate\n  $dir` and `julia --project` is exactly equivalent to doing that where\n  `dir = Base.current_project()`. In particular, this means that if you do\n  `pkg> activate` after starting `julia` with the `--project` option (or with\n  `JULIA_PROJECT` set) it will take you to the default active project, which is\n  `@v1.6` unless you have modified `LOAD_PATH` ([#36434]).\n\nMulti-threading changes\n-----------------------\n\n* Locks now automatically inhibit finalizers from running, to avoid deadlock ([#38487]).\n* New function `Base.Threads.foreach(f, channel::Channel)` for multithreaded `Channel` consumption ([#34543]).\n\nBuild system changes\n--------------------\n\n* Windows Installer now has the option to 'Add Julia to Path'. To unselect this option\n  from the commandline simply remove the tasks you do not want to be installed: e.g.\n  `./julia-installer.exe /TASKS=\"desktopicon,startmenu,addtopath\"`, adds a desktop\n  icon, a startmenu group icon, and adds Julia to system PATH.\n\nNew library functions\n---------------------\n\n* New function `Base.kron!` and corresponding overloads for various matrix types for performing Kronecker\n  product in-place ([#31069]).\n* New function `Base.readeach(io, T)` for iteratively performing `read(io, T)` ([#36150]).\n* `Iterators.map` is added. It provides another syntax `Iterators.map(f, iterators...)`\n  for writing `(f(args...) for args in zip(iterators...))`, i.e. a lazy `map` ([#34352]).\n* New function `sincospi` for simultaneously computing `sinpi(x)` and `cospi(x)` more\n  efficiently ([#35816]).\n* New function `cispi(x)` for more accurately computing `cis(pi * x)` ([#38449]).\n* New function `addenv` for adding environment mappings into a `Cmd` object, returning the new `Cmd` object.\n* New function `insorted` for determining whether an element is in a sorted collection or not ([#37490]).\n* New function `Base.rest` for taking the rest of a collection, starting from a specific\n  iteration state, in a generic way ([#37410]).\n\nNew library features\n--------------------\n\n* The `redirect_*` functions now accept `devnull` to discard all output redirected to it, and as an empty\n  input ([#36146]).\n* The `redirect_*` functions can now be called on `IOContext` objects ([#36688]).\n* `findfirst`, `findnext`, `findlast`, and `findall` now support `AbstractVector{<:Union{Int8,UInt8}}`\n  (pattern, array) arguments ([#37283]).\n* New constructor `NamedTuple(iterator)` that constructs a named tuple from a key-value pair iterator.\n* A new `reinterpret(reshape, T, a::AbstractArray{S})` reinterprets `a` to have eltype `T` while potentially\n  inserting or consuming the first dimension depending on the ratio of `sizeof(T)` and `sizeof(S)`.\n* New `append!(vector, collections...)` and `prepend!(vector, collections...)` methods accept multiple\n  collections to be appended or prepended ([#36227]).\n* `keys(io::IO)` has been added, which returns all keys of `io` if `io` is an `IOContext` and an empty\n  `Base.KeySet` otherwise ([#37753]).\n* `count` now accepts an optional `init` argument to control the accumulation type ([#37461]).\n* New method `occursin(haystack)` that returns a function that checks whether its argument occurs in\n  `haystack` ([#38475]).\n* New methods `∉(collection)`, `∋(item)`, and `∌(item)` returning corresponding containment-testing\n  functions ([#38475]).\n* The `nextprod` function now accepts tuples and other array types for its first argument ([#35791]).\n* The `reverse(A; dims)` function for multidimensional `A` can now reverse multiple dimensions at once\n  by passing a tuple for `dims`, and defaults to reversing all dimensions; there is also a multidimensional\n  in-place `reverse!(A; dims)` ([#37367]).\n* The function `isapprox(x,y)` now accepts the `norm` keyword argument also for numeric (i.e., non-array)\n  arguments `x` and `y` ([#35883]).\n* `ispow2(x)` now supports non-`Integer` arguments `x` ([#37635]).\n* `view`, `@view`, and `@views` now work on `AbstractString`s, returning a `SubString` when appropriate ([#35879]).\n* All `AbstractUnitRange{<:Integer}`s now work with `SubString`, `view`, `@view` and `@views` on strings ([#35879]).\n* `sum`, `prod`, `maximum`, and `minimum` now support `init` keyword argument ([#36188], [#35839]).\n* `unique(f, itr; seen=Set{T}())` now allows you to declare the container type used for\n  keeping track of values returned by `f` on elements of `itr` ([#36280]).\n* `first` and `last` functions now accept an integer as second argument to get that many\n  leading or trailing elements of any iterable ([#34868]).\n* `CartesianIndices` now supports step different from `1`. It can also be constructed from three\n  `CartesianIndex`es `I`, `S`, `J` using `I:S:J`. `step` for `CartesianIndices` now returns a\n  `CartesianIndex` ([#37829]).\n* `RegexMatch` objects can now be probed for whether a named capture group exists within it through `haskey()` ([#36717]).\n* For consistency `haskey(r::RegexMatch, i::Integer)` has also been added and returns if the capture group\n  for `i` exists ([#37300]).\n\nStandard library changes\n------------------------\n\n* A new standard library `TOML` has been added for parsing and printing [TOML files](https://toml.io) ([#37034]).\n* A new standard library `Downloads` has been added, which replaces the old `Base.download` function with\n  `Downloads.download`, providing cross-platform, multi-protocol, in-process download functionality implemented\n  with [libcurl](https://curl.haxx.se/libcurl/) ([#37340]).\n* `Libdl` has been moved to `Base.Libc.Libdl`, however it is still accessible as an stdlib ([#35628]).\n* To download artifacts lazily, `LazyArtifacts` now must be explicitly listed as a dependency, to avoid needing the\n  support machinery to be available when it is not commonly needed ([#37844]).\n* It is no longer possible to create a `LinRange`, `StepRange`, or `StepRangeLen` with a `<: Integer` eltype but\n  non-integer step ([#32439]).\n* `intersect` on `CartesianIndices` now returns `CartesianIndices` instead of `Vector{<:CartesianIndex}` ([#36643]).\n* `push!(c::Channel, v)` now returns channel `c`. Previously, it returned the pushed value `v` ([#34202]).\n* The composition operator `∘` now returns a `Base.ComposedFunction` instead of an anonymous function ([#37517]).\n* Logging (such as `@warn`) no longer catches exceptions in the logger itself ([#36600]).\n* `@time` now reports if the time presented included any compilation time, which is shown as a percentage ([#37678]).\n* `@varinfo` can now report non-exported objects within modules, look recursively into submodules, and return a sorted\n  results table ([#38042]).\n* `@testset` now supports the option `verbose` to show the test result summary\n  of the children even if they all pass ([#33755]).\n* In `LinearIndices(::Tuple)` and `CartesianIndices(::Tuple)`, integers (as opposed to ranges of integers) in the\n  argument tuple now consistently describe 1-based ranges, e.g, `CartesianIndices((3, 1:3))` is equivalent to\n  `CartesianIndices((1:3, 1:3))`. This is how tuples of integers have always been documented to work, but a\n  bug had caused erroneous behaviors with heterogeneous tuples containing both integers and ranges ([#37829], [#37928]).\n\n#### Package Manager\n\n* `pkg> precompile` is now parallelized through depth-first precompilation of dependencies. Errors will only throw for\n  direct dependencies listed in the `Project.toml`.\n* `pkg> precompile` is now automatically triggered whenever Pkg changes the active manifest. Auto-precompilation will\n  remember if a package has errored within the given environment and will not retry until it changes.\n  Auto-precompilation can be gracefully interrupted with a `ctrl-c` and disabled by setting the environment variable\n  `JULIA_PKG_PRECOMPILE_AUTO=0`.\n* The `Pkg.BinaryPlatforms` module has been moved into `Base` as `Base.BinaryPlatforms` and heavily reworked.\n  Applications that want to be compatible with the old API should continue to import `Pkg.BinaryPlatforms`,\n  however new users should use `Base.BinaryPlatforms` directly ([#37320]).\n* The `Pkg.Artifacts` module has been imported as a separate standard library. It is still available as\n  `Pkg.Artifacts`, however starting from Julia v1.6+, packages may import simply `Artifacts` without importing\n  all of `Pkg` alongside ([#37320]).\n\n#### LinearAlgebra\n\n* New method `LinearAlgebra.issuccess(::CholeskyPivoted)` for checking whether pivoted Cholesky factorization was\n  successful ([#36002]).\n* `UniformScaling` can now be indexed into using ranges to return dense matrices and vectors ([#24359]).\n* New function `LinearAlgebra.BLAS.get_num_threads()` for getting the number of BLAS threads ([#36360]).\n* `(+)(::UniformScaling)` is now defined, making `+I` a valid unary operation ([#36784]).\n* Instances of `UniformScaling` are no longer `isequal` to matrices. Previous\n  behaviour violated the rule that `isequal(x, y)` implies `hash(x) == hash(y)`.\n* Transposing `*Triangular` matrices now returns matrices of the opposite triangular type, consistently\n  with `adjoint!(::*Triangular)` and `transpose!(::*Triangular)`. Packages containing methods with, e.g.,\n  `Adjoint{<:Any,<:LowerTriangular{<:Any,<:OwnMatrixType}}` should replace that by\n  `UpperTriangular{<:Any,<:Adjoint{<:Any,<:OwnMatrixType}}` in the method signature ([#38168]).\n\n#### Markdown\n\n\n#### Printf\n\n* Complete overhaul of internal code to use the ryu float printing algorithms (from Julia 1.4); leads to\n  consistent 2-5x performance improvements.\n* New `Printf.tofloat` function allowing custom float types to more easily integrate with Printf formatting\n  by converting their type to `Float16`, `Float32`, `Float64`, or `BigFloat`.\n* New `Printf.format\"...\"` and `Printf.Format(...)` functions that allow creating `Printf.Format` objects\n  that can be passed to `Printf.format` for easier dynamic printf formatting.\n* `Printf.format(f::Printf.Format, args...)` as a non-macro function that applies a printf format `f` to\n  provided `args`.\n\n#### Random\n\n\n#### REPL\n\n* The `AbstractMenu` extension interface of `REPL.TerminalMenus` has been extensively\n  overhauled. The new interface does not rely on global configuration variables, is more\n  consistent in delegating printing of the navigation/selection markers, and provides\n  improved support for dynamic menus. These changes are compatible with the previous\n  (deprecated) interface, so are non-breaking.\n\n  The new API offers several enhancements:\n\n  + Menus are configured in their constructors via keyword arguments.\n  + For custom menu types, the new `Config` and `MultiSelectConfig` replace the global `CONFIG` `Dict`.\n  + `request(menu; cursor=1)` allows you to control the initial cursor position in the menu (defaults to first item).\n  + `MultiSelectMenu` allows you to pass a list of initially-selected items with the `selected` keyword argument.\n  + `writeLine` was deprecated to `writeline`, and `writeline` methods are not expected to print the cursor indicator.\n    The old `writeLine` continues to work, and any of its method extensions should print the cursor indicator as before.\n  + `printMenu` has been deprecated to `printmenu`, and it both accepts a state input and returns a state output\n    that controls the number of terminal lines erased when the menu is next refreshed. This plus related changes\n    makes `printmenu` work properly when the number of menu items might change depending on user choices.\n  + `numoptions`, returning the number of items in the menu, has been added as an alternative to implementing `options`.\n  + `suppress_output` (primarily a testing option) has been added as a keyword argument to `request`,\n    rather than a configuration option.\n* Tab completion now supports runs of consecutive sub/superscript characters,\n  e.g. `\\^(3)` tab-completes to `⁽³⁾` ([#38649]).\n* Windows REPL now supports 24-bit colors, by correctly interpreting virtual terminal escapes.\n\n#### SparseArrays\n\n* Display large sparse matrices with a Unicode \"spy\" plot of their nonzero patterns,\n  and display small sparse matrices by an `Matrix`-like 2d layout of their contents ([#33821]).\n* New convenient `spdiagm([m, n,] v::AbstractVector)` methods which call\n  `spdiagm([m, n,] 0 => v)`, consistently with their dense `diagm` counterparts ([#37684]).\n\n#### Dates\n\n* `Quarter` period is defined ([#35519]).\n* `canonicalize` can now take `Period` as an input ([#37391]).\n* Zero-valued `FixedPeriod`s and `OtherPeriod`s now compare equal, e.g.,\n  `Year(0) == Day(0)`. The behavior of non-zero `Period`s is not changed ([#37486]).\n\n#### Statistics\n\n\n#### Sockets\n\n\n#### Distributed\n\n* Now supports invoking Windows workers via ssh (via new keyword argument `shell=:wincmd` in `addprocs`) ([#30614]).\n* Other new keyword arguments in `addprocs`: `ssh` to specify the ssh client path, `env` to pass environment\n  variables to workers, and `cmdline_cookie` to work around an ssh problem with Windows workers that run older\n  (pre-ConPTY) versions of Windows, Julia or OpenSSH ([#30614]).\n\n#### UUIDs\n\n* Change `uuid1` and `uuid4` to use `Random.RandomDevice()` as default random number generator ([#35872]).\n* Added `parse(::Type{UUID}, ::AbstractString)` method.\n\n#### Mmap\n\n* On Unix systems, the `Mmap.madvise!` function (along with OS-specific `Mmap.MADV_*`\n  constants) has been added to give advice on handling of memory-mapped arrays ([#37369]).\n\nDeprecated or removed\n---------------------\n\n* The `Base.download` function has been deprecated (silently, by default) in favor of the new `Downloads.download`\n  standard library function ([#37340]).\n* The `Base.Grisu` code has been officially removed (float printing was switched to the ryu algorithm code in 1.4).\n  The code is available from [JuliaAttic](https://github.com/JuliaAttic/Grisu.jl) if needed.\n\nExternal dependencies\n---------------------\n\n\nTooling Improvements\n---------------------\n\n\n<!--- generated by NEWS-update.jl: -->\n[#1255]: https://github.com/JuliaLang/julia/issues/1255\n[#23546]: https://github.com/JuliaLang/julia/issues/23546\n[#24359]: https://github.com/JuliaLang/julia/issues/24359\n[#30614]: https://github.com/JuliaLang/julia/issues/30614\n[#31069]: https://github.com/JuliaLang/julia/issues/31069\n[#32439]: https://github.com/JuliaLang/julia/issues/32439\n[#33755]: https://github.com/JuliaLang/julia/issues/33755\n[#33821]: https://github.com/JuliaLang/julia/issues/33821\n[#34202]: https://github.com/JuliaLang/julia/issues/34202\n[#34352]: https://github.com/JuliaLang/julia/issues/34352\n[#34543]: https://github.com/JuliaLang/julia/issues/34543\n[#34868]: https://github.com/JuliaLang/julia/issues/34868\n[#35519]: https://github.com/JuliaLang/julia/issues/35519\n[#35627]: https://github.com/JuliaLang/julia/issues/35627\n[#35628]: https://github.com/JuliaLang/julia/issues/35628\n[#35779]: https://github.com/JuliaLang/julia/issues/35779\n[#35791]: https://github.com/JuliaLang/julia/issues/35791\n[#35816]: https://github.com/JuliaLang/julia/issues/35816\n[#35839]: https://github.com/JuliaLang/julia/issues/35839\n[#35872]: https://github.com/JuliaLang/julia/issues/35872\n[#35879]: https://github.com/JuliaLang/julia/issues/35879\n[#35883]: https://github.com/JuliaLang/julia/issues/35883\n[#35976]: https://github.com/JuliaLang/julia/issues/35976\n[#36002]: https://github.com/JuliaLang/julia/issues/36002\n[#36146]: https://github.com/JuliaLang/julia/issues/36146\n[#36150]: https://github.com/JuliaLang/julia/issues/36150\n[#36188]: https://github.com/JuliaLang/julia/issues/36188\n[#36227]: https://github.com/JuliaLang/julia/issues/36227\n[#36280]: https://github.com/JuliaLang/julia/issues/36280\n[#36360]: https://github.com/JuliaLang/julia/issues/36360\n[#36416]: https://github.com/JuliaLang/julia/issues/36416\n[#36434]: https://github.com/JuliaLang/julia/issues/36434\n[#36458]: https://github.com/JuliaLang/julia/issues/36458\n[#36600]: https://github.com/JuliaLang/julia/issues/36600\n[#36643]: https://github.com/JuliaLang/julia/issues/36643\n[#36666]: https://github.com/JuliaLang/julia/issues/36666\n[#36688]: https://github.com/JuliaLang/julia/issues/36688\n[#36717]: https://github.com/JuliaLang/julia/issues/36717\n[#36784]: https://github.com/JuliaLang/julia/issues/36784\n[#37034]: https://github.com/JuliaLang/julia/issues/37034\n[#37041]: https://github.com/JuliaLang/julia/issues/37041\n[#37247]: https://github.com/JuliaLang/julia/issues/37247\n[#37283]: https://github.com/JuliaLang/julia/issues/37283\n[#37300]: https://github.com/JuliaLang/julia/issues/37300\n[#37320]: https://github.com/JuliaLang/julia/issues/37320\n[#37340]: https://github.com/JuliaLang/julia/issues/37340\n[#37367]: https://github.com/JuliaLang/julia/issues/37367\n[#37369]: https://github.com/JuliaLang/julia/issues/37369\n[#37391]: https://github.com/JuliaLang/julia/issues/37391\n[#37410]: https://github.com/JuliaLang/julia/issues/37410\n[#37461]: https://github.com/JuliaLang/julia/issues/37461\n[#37486]: https://github.com/JuliaLang/julia/issues/37486\n[#37490]: https://github.com/JuliaLang/julia/issues/37490\n[#37517]: https://github.com/JuliaLang/julia/issues/37517\n[#37540]: https://github.com/JuliaLang/julia/issues/37540\n[#37542]: https://github.com/JuliaLang/julia/issues/37542\n[#37583]: https://github.com/JuliaLang/julia/issues/37583\n[#37635]: https://github.com/JuliaLang/julia/issues/37635\n[#37678]: https://github.com/JuliaLang/julia/issues/37678\n[#37684]: https://github.com/JuliaLang/julia/issues/37684\n[#37753]: https://github.com/JuliaLang/julia/issues/37753\n[#37829]: https://github.com/JuliaLang/julia/issues/37829\n[#37844]: https://github.com/JuliaLang/julia/issues/37844\n[#37928]: https://github.com/JuliaLang/julia/issues/37928\n[#37973]: https://github.com/JuliaLang/julia/issues/37973\n[#38042]: https://github.com/JuliaLang/julia/issues/38042\n[#38168]: https://github.com/JuliaLang/julia/issues/38168\n[#38449]: https://github.com/JuliaLang/julia/issues/38449\n[#38475]: https://github.com/JuliaLang/julia/issues/38475\n[#38487]: https://github.com/JuliaLang/julia/issues/38487\n[#38649]: https://github.com/JuliaLang/julia/issues/38649\n[#38742]: https://github.com/JuliaLang/julia/issues/38742\n\n\nJulia v1.5 Release Notes\n========================\n\nNew language features\n---------------------\n\n* Macro calls `@foo {...}` can now also be written `@foo{...}` (without the space) ([#34498]).\n* `⨟` is now parsed as a binary operator with times precedence. It can be entered in the REPL\n  with `\\bbsemi` followed by <kbd>TAB</kbd> ([#34722]).\n* `±` and `∓` are now unary operators as well, like `+` or `-`. Attention has to be paid in\n  macros and matrix constructors, which are whitespace sensitive, because expressions like\n  `[a ±b]` now get parsed as `[a ±(b)]` instead of `[±(a, b)]` ([#34200]).\n* Passing an identifier `x` by itself as a keyword argument or named tuple element\n  is equivalent to `x=x`, implicitly using the name of the variable as the keyword\n  or named tuple field name.\n  Similarly, passing an `a.b` expression uses `b` as the keyword or field name ([#29333]).\n* Support for Unicode 13.0.0 (via utf8proc 2.5) ([#35282]).\n* The compiler optimization level can now be set per-module using the experimental macro\n  `Base.Experimental.@optlevel n`. For code that is not performance-critical, setting\n  this to 0 or 1 can provide significant latency improvements ([#34896]).\n\nLanguage changes\n----------------\n\n* The interactive REPL now uses \"soft scope\" for top-level expressions: an assignment inside a\n  scope block such as a `for` loop automatically assigns to a global variable if one has been\n  defined already. This matches the behavior of Julia versions 0.6 and prior, as well as\n  [IJulia](https://github.com/JuliaLang/IJulia.jl).\n  Note that this only affects expressions interactively typed or pasted directly into the\n  default REPL ([#28789], [#33864]).\n* Outside of the REPL (e.g. in a file), assigning to a variable within a top-level scope\n  block is considered ambiguous if a global variable with the same name exists.\n  A warning is given if that happens, to alert you that the code will work differently\n  than in the REPL.\n  A new command line option `--warn-scope` controls this warning ([#33864]).\n* Converting arbitrary tuples to `NTuple`, e.g. `convert(NTuple, (1, \"\"))` now gives an error,\n  where it used to be incorrectly allowed. This is because `NTuple` refers only to homogeneous\n  tuples (this meaning has not changed) ([#34272]).\n* The syntax `(;)` (which was deprecated in v1.4) now creates an empty named tuple ([#30115]).\n* `@inline` macro can now be applied to short-form anonymous functions ([#34953]).\n* In triple-quoted string literals, whitespace stripping is now done before processing\n  escape sequences instead of after. For example, the syntax\n  ```\n  \"\"\"\n    a\\n b\"\"\"\n  ```\n  used to yield the string \" a\\nb\", since the single space before `b` set the indent level.\n  Now the result is \"a\\n b\", since the space before `b` is no longer considered to occur\n  at the start of a line. The old behavior is considered a bug ([#35001]).\n* `<:` and `>:` can now be broadcasted over arrays with `.<:` and `.>:`  ([#35085])\n* The line number of function definitions is now added by the parser as an\n  additional `LineNumberNode` at the start of each function body ([#35138]).\n* Statements of the form `a'` now get lowered to `var\"'\"(a)` instead of `Base.adjoint(a)`. This\n  allows for shadowing this function in local scopes, although this is generally discouraged.\n  By default, Base exports `var\"'\"` as an alias of `Base.adjoint`, so custom types should still\n  extend `Base.adjoint` ([#34634]).\n\nCompiler/Runtime improvements\n-----------------------------\n\n* Immutable structs (including tuples) that contain references can now be allocated\n  on the stack, and allocated inline within arrays and other structs ([#33886]).\n  This significantly reduces the number of heap allocations in some workloads.\n  Code that requires assumptions about object layout and addresses (usually for\n  interoperability with C or other languages) might need to be updated; for\n  example any object that needs a stable address should be a `mutable struct`.\n  As a result, Array `view`s no longer allocate ([#34126]).\n\nCommand-line option changes\n---------------------------\n\n* Deprecation warnings are no longer shown by default. i.e. if the `--depwarn=...` flag is\n  not passed it defaults to `--depwarn=no`. The warnings are printed from tests run by\n  `Pkg.test()` ([#35362]).\n* Color now defaults to on when stdout and stderr are TTYs ([#34347]).\n* `-t N`, `--threads N` starts Julia with `N` threads. This option takes precedence over\n  `JULIA_NUM_THREADS`. The specified number of threads also propagates to worker\n  processes spawned using the `-p`/`--procs` or `--machine-file` command line arguments.\n  In order to set number of threads for worker processes spawned with `addprocs` use the\n  `exeflags` keyword argument, e.g. ```addprocs(...; exeflags=`--threads 4`)``` ([#35108]).\n\nMulti-threading changes\n-----------------------\n\n* Parts of the multi-threading API are now considered stable, with caveats.\n  This includes all documented identifiers from `Base.Threads` except the\n  `atomic_` operations.\n* `@threads` now allows an optional schedule argument. Use `@threads :static ...` to\n  ensure that the same schedule will be used as in past versions; the default schedule\n  is likely to change in the future.\n\nBuild system changes\n--------------------\n\n* The build system now contains a pure-make caching system for expanding expensive operations at the latest\n  possible moment, while still expanding it only once ([#35626]).\n\nNew library functions\n---------------------\n\n* Packages can now provide custom hints to help users resolve errors by using the\n  experimental `Base.Experimental.register_error_hint` function.\n  Packages that define custom exception types can support hints by calling the\n  `Base.Experimental.show_error_hints` from their `showerror` method ([#35094]).\n* The `@ccall` macro has been added to Base. It is a near drop-in replacement for `ccall` with more Julia-like syntax. It also wraps the new `foreigncall` API for varargs of different types, though it lacks the capability to specify an LLVM calling convention ([#32748]).\n* New functions `mergewith` and `mergewith!` supersede `merge` and `merge!` with `combine`\n  argument. They don't have the restriction for `combine` to be a `Function` and also\n  provide one-argument method that returns a closure. The old methods of `merge` and\n  `merge!` are still available for backward compatibility ([#34296]).\n* The new `isdisjoint` function indicates whether two collections are disjoint ([#34427]).\n* Add function `ismutable` and deprecate `isimmutable` to check whether something is mutable ([#34652]).\n* `include` now accepts an optional `mapexpr` first argument to transform the parsed\n  expressions before they are evaluated ([#34595]).\n* New function `bitreverse` for reversing the order of bits in a fixed-width integer ([#34791]).\n* New function `bitrotate(x, k)` for rotating the bits in a fixed-width integer ([#33937]).\n* New function `contains(haystack, needle)` and its one argument partially applied form have been added, it acts like `occursin(needle, haystack)` ([#35132]).\n* New function `Base.exit_on_sigint` is added to control if `InterruptException` is\n  thrown by Ctrl-C ([#29411]).\n\nNew library features\n--------------------\n\n* Function composition now works also on one argument `∘(f) = f` (#34251).\n* One argument methods `startswith(x)` and `endswith(x)` have been added, returning partially-applied versions of the functions, similar to existing methods like `isequal(x)` ([#33193]).\n* `isapprox` (or `≈`) now has a one-argument \"curried\" method `isapprox(x)` which returns a function, like `isequal` (or `==`) ([#32305]).\n* `@NamedTuple{key1::Type1, ...}` macro for convenient `NamedTuple` declarations ([#34548]).\n* `Ref{NTuple{N,T}}` can be passed to `Ptr{T}`/`Ref{T}` `ccall` signatures ([#34199]).\n* `x::Signed % Unsigned` and `x::Unsigned % Signed` are supported for integer bitstypes.\n* `signed(unsigned_type)` is supported for integer bitstypes, `unsigned(signed_type)` has been supported.\n* `accumulate`, `cumsum`, and `cumprod` now support `Tuple` ([#34654]) and arbitrary iterators ([#34656]).\n* `pop!(collection, key, [default])` now has a method for `Vector` to remove an element at an arbitrary index ([#35513]).\n* In `splice!` with no replacement, values to be removed can now be specified with an\n  arbitrary iterable (instead of a `UnitRange`) ([#34524]).\n* The `@view` and `@views` macros now support the `a[begin]` syntax that was introduced in Julia 1.4 ([#35289]).\n* `open` for files now accepts a keyword argument `lock` controlling whether file operations\n  will acquire locks for safe multi-threaded access. Setting it to `false` provides better\n  performance when only one thread will access the file ([#35426]).\n* The introspection macros (`@which`, `@code_typed`, etc.) now work with `do`-block syntax ([#35283]) and with dot syntax ([#35522]).\n* `count` now accepts the `dims` keyword.\n* new in-place `count!` function similar to `sum!`.\n* `peek` is now exported and accepts a type to peek from a stream ([#28811]).\n\nStandard library changes\n------------------------\n\n* Empty ranges now compare equal, regardless of their startpoint and step ([#32348]).\n* A 1-d `Zip` iterator (where `Base.IteratorSize` is `Base.HasShape{1}()`) with defined length of `n` has now also size of `(n,)` (instead of throwing an error with truncated iterators) ([#29927]).\n* The `@timed` macro now returns a `NamedTuple` ([#34149]).\n* New `supertypes(T)` function returns a tuple of all supertypes of `T` ([#34419]).\n* Views of builtin ranges are now recomputed ranges (like indexing returns) instead of\n  `SubArray`s ([#26872]).\n* Sorting-related functions such as `sort` that take the keyword arguments `lt`, `rev`, `order`\n  and `by` now do not discard `order` if `by` or `lt` are passed. In the former case, the\n  order from `order` is used to compare the values of `by(element)`. In the latter case,\n  any order different from `Forward` or `Reverse` will raise an error about the\n  ambiguity.\n* `close` on a file (`IOStream`) can now throw an exception if an error occurs when trying\n  to flush buffered data to disk ([#35303]).\n* The large `StridedArray` `Union` now has special printing to avoid printing out its entire\n  contents ([#31149]).\n\n#### LinearAlgebra\n\n* The BLAS submodule now supports the level-2 BLAS subroutine `hpmv!` ([#34211]).\n* `normalize` now supports multidimensional arrays ([#34239]).\n* `lq` factorizations can now be used to compute the minimum-norm solution to under-determined systems ([#34350]).\n* `sqrt(::Hermitian)` now treats slightly negative eigenvalues as zero for nearly semidefinite matrices, and accepts a new `rtol` keyword argument for this tolerance ([#35057]).\n* The BLAS submodule now supports the level-2 BLAS subroutine `spmv!` ([#34320]).\n* The BLAS submodule now supports the level-1 BLAS subroutine `rot!` ([#35124]).\n* New generic `rotate!(x, y, c, s)` and `reflect!(x, y, c, s)` functions ([#35124]).\n\n#### Markdown\n\n* In docstrings, a level-1 markdown header \"Extended help\" is now interpreted as a marker\n  dividing \"brief help\" from \"extended help\". The REPL help mode only shows the brief help\n  (the content before the \"Extended help\" header) by default; prepend the expression with '?'\n  (in addition to the one that enters the help mode) to see the full docstring ([#25930]).\n\n#### Random\n\n* `randn!(::MersenneTwister, ::Array{Float64})` is faster, and as a result, for a given state of the RNG,\n  the corresponding generated numbers have changed ([#35078]).\n* `rand!(::MersenneTwister, ::Array{Bool})` is faster, and as a result, for a given state of the RNG,\n  the corresponding generated numbers have changed ([#33721]).\n* A new faster algorithm (\"nearly division less\") is used for generating random numbers\n  within a range ([#29240]). As a result, the streams of generated numbers are changed\n  (for ranges, like in `rand(1:9)`, and for collections in general, like in `rand([1, 2, 3])`).\n  Also, for performance, the undocumented property that, given a seed and `a, b` of type `Int`,\n  `rand(a:b)` produces the same stream on 32 and 64 bits architectures, is dropped.\n\n#### REPL\n\n\n#### SparseArrays\n\n* `lu!` accepts `UmfpackLU` as an argument to make use of its symbolic factorization.\n* The `trim` keyword argument for the functions `fkeep!`, `tril!`, `triu!`,\n  `droptol!`,`dropzeros!` and `dropzeros` has been removed in favour of always\n  trimming. Calling these with `trim=false` could result in invalid sparse\n  arrays.\n\n#### Dates\n\n* The `eps` function now accepts `TimeType` types ([#31487]).\n* The `zero` function now accepts `TimeType` types ([#35554]).\n\n#### Statistics\n\n\n#### Sockets\n\n* Joining and leaving UDP multicast groups on a `UDPSocket` is now supported\n  through `join_multicast_group()` and `leave_multicast_group()` ([#35521]).\n\n#### Distributed\n\n* `launch_on_machine` now supports and parses ipv6 square-bracket notation ([#34430]).\n\nDeprecated or removed\n---------------------\n\nExternal dependencies\n---------------------\n\n* OpenBLAS has been updated to v0.3.9 ([#35113]).\n\nTooling Improvements\n---------------------\n\n\n<!--- generated by NEWS-update.jl: -->\n[#25930]: https://github.com/JuliaLang/julia/issues/25930\n[#26872]: https://github.com/JuliaLang/julia/issues/26872\n[#28789]: https://github.com/JuliaLang/julia/issues/28789\n[#28811]: https://github.com/JuliaLang/julia/issues/28811\n[#29240]: https://github.com/JuliaLang/julia/issues/29240\n[#29333]: https://github.com/JuliaLang/julia/issues/29333\n[#29411]: https://github.com/JuliaLang/julia/issues/29411\n[#29927]: https://github.com/JuliaLang/julia/issues/29927\n[#30115]: https://github.com/JuliaLang/julia/issues/30115\n[#31149]: https://github.com/JuliaLang/julia/issues/31149\n[#31487]: https://github.com/JuliaLang/julia/issues/31487\n[#32305]: https://github.com/JuliaLang/julia/issues/32305\n[#32348]: https://github.com/JuliaLang/julia/issues/32348\n[#32748]: https://github.com/JuliaLang/julia/issues/32748\n[#33193]: https://github.com/JuliaLang/julia/issues/33193\n[#33721]: https://github.com/JuliaLang/julia/issues/33721\n[#33864]: https://github.com/JuliaLang/julia/issues/33864\n[#33886]: https://github.com/JuliaLang/julia/issues/33886\n[#33937]: https://github.com/JuliaLang/julia/issues/33937\n[#34126]: https://github.com/JuliaLang/julia/issues/34126\n[#34149]: https://github.com/JuliaLang/julia/issues/34149\n[#34199]: https://github.com/JuliaLang/julia/issues/34199\n[#34200]: https://github.com/JuliaLang/julia/issues/34200\n[#34211]: https://github.com/JuliaLang/julia/issues/34211\n[#34239]: https://github.com/JuliaLang/julia/issues/34239\n[#34272]: https://github.com/JuliaLang/julia/issues/34272\n[#34296]: https://github.com/JuliaLang/julia/issues/34296\n[#34320]: https://github.com/JuliaLang/julia/issues/34320\n[#34347]: https://github.com/JuliaLang/julia/issues/34347\n[#34350]: https://github.com/JuliaLang/julia/issues/34350\n[#34419]: https://github.com/JuliaLang/julia/issues/34419\n[#34427]: https://github.com/JuliaLang/julia/issues/34427\n[#34430]: https://github.com/JuliaLang/julia/issues/34430\n[#34498]: https://github.com/JuliaLang/julia/issues/34498\n[#34524]: https://github.com/JuliaLang/julia/issues/34524\n[#34548]: https://github.com/JuliaLang/julia/issues/34548\n[#34595]: https://github.com/JuliaLang/julia/issues/34595\n[#34634]: https://github.com/JuliaLang/julia/issues/34634\n[#34652]: https://github.com/JuliaLang/julia/issues/34652\n[#34654]: https://github.com/JuliaLang/julia/issues/34654\n[#34656]: https://github.com/JuliaLang/julia/issues/34656\n[#34722]: https://github.com/JuliaLang/julia/issues/34722\n[#34791]: https://github.com/JuliaLang/julia/issues/34791\n[#34896]: https://github.com/JuliaLang/julia/issues/34896\n[#34953]: https://github.com/JuliaLang/julia/issues/34953\n[#35001]: https://github.com/JuliaLang/julia/issues/35001\n[#35057]: https://github.com/JuliaLang/julia/issues/35057\n[#35078]: https://github.com/JuliaLang/julia/issues/35078\n[#35085]: https://github.com/JuliaLang/julia/issues/35085\n[#35094]: https://github.com/JuliaLang/julia/issues/35094\n[#35108]: https://github.com/JuliaLang/julia/issues/35108\n[#35113]: https://github.com/JuliaLang/julia/issues/35113\n[#35124]: https://github.com/JuliaLang/julia/issues/35124\n[#35132]: https://github.com/JuliaLang/julia/issues/35132\n[#35138]: https://github.com/JuliaLang/julia/issues/35138\n[#35282]: https://github.com/JuliaLang/julia/issues/35282\n[#35283]: https://github.com/JuliaLang/julia/issues/35283\n[#35289]: https://github.com/JuliaLang/julia/issues/35289\n[#35303]: https://github.com/JuliaLang/julia/issues/35303\n[#35362]: https://github.com/JuliaLang/julia/issues/35362\n[#35426]: https://github.com/JuliaLang/julia/issues/35426\n[#35513]: https://github.com/JuliaLang/julia/issues/35513\n[#35521]: https://github.com/JuliaLang/julia/issues/35521\n[#35522]: https://github.com/JuliaLang/julia/issues/35522\n[#35554]: https://github.com/JuliaLang/julia/issues/35554\n[#35626]: https://github.com/JuliaLang/julia/issues/35626\n\nJulia v1.4 Release Notes\n========================\n\nNew language features\n---------------------\n\n* Structs with all isbits and isbitsunion fields are now stored inline in arrays ([#32448]).\n* `import` now allows quoted symbols, e.g. `import Base.:+` ([#33158]).\n* `a[begin]` can now be used to address the first element of an integer-indexed collection `a`.\n  The index is computed by `firstindex(a)` ([#33946]).\n\nLanguage changes\n----------------\n\n* The syntax `(;)`, which used to parse as an empty block expression, is deprecated.\n  In the future it will indicate an empty named tuple ([#30115]).\n\nMulti-threading changes\n-----------------------\n\n* Values can now be interpolated into `@async` and `@spawn` via `$`, which copies the value directly into the constructed\n  underlying closure ([#33119]).\n\nBuild system changes\n--------------------\n\n* Windows build installer has switched to Inno Setup. Installer command line parameters have thus changed. For example, to extract the installer to a specific directory, the command line parameter is now `/DIR=x:\\dirname`. Use `julia-installer.exe /?` to list all new command line parameters.\n\nNew library functions\n---------------------\n\n* The new `only(x)` function returns the one-and-only element of a collection `x`, and throws an `ArgumentError` if `x` contains zero or multiple elements ([#33129]).\n* `takewhile` and `dropwhile` have been added to the Iterators submodule ([#33437]).\n* `accumulate` has been added to the Iterators submodule ([#34033]).\n* There is a now an `evalpoly` function meant to take the role of the `@evalpoly` macro. The function is just as efficient as the macro while giving added flexibility, so it should be preferred over `@evalpoly`. `evalpoly` takes a list of coefficients as a tuple, so where one might write `@evalpoly(x, p1, p2, p3)` one would instead write `evalpoly(x, (p1, p2, p3))`.\n\nNew library features\n--------------------\n\n* Function composition now supports multiple functions: `∘(f, g, h) = f ∘ g ∘ h`\n  and splatting `∘(fs...)` for composing an iterable collection of functions ([#33568]).\n* Functions `gcd`, `lcm`, and `gcdx` now support `Rational` arguments ([#33910]).\n* The `splitpath` function now accepts any `AbstractString` whereas previously it only accepted paths of type `String` ([#33012]).\n* `filter` can now act on a `Tuple` ([#32968]).\n* The `tempname` function now takes an optional `parent::AbstractString` argument to give it a directory in which to attempt to produce a temporary path name ([#33090]).\n* The `tempname` function now takes a `cleanup::Bool` keyword argument defaulting to `true`, which causes the process to try to ensure that any file or directory at the path returned by `tempname` is deleted upon process exit ([#33090]).\n* The `readdir` function now takes a `join::Bool` keyword argument defaulting to `false`, which when set causes `readdir` to join its directory argument with each listed name ([#33113]).\n* `div` now accepts a rounding mode as the third argument, consistent with the corresponding argument to `rem`. Support for rounding division, by passing one of the RoundNearest modes to this function, was added. For future compatibility, library authors should now extend this function, rather than extending the two-argument `fld`/`cld`/`div` directly ([#33040]).\n* `methods` now accepts a module (or a list thereof) to filter methods defined in it ([#33403]).\n\nStandard library changes\n------------------------\n\n* Calling `show` or `repr` on an `undef`/`UndefInitializer()` array initializer now shows valid Julia code ([#33211]).\n* Calling `show` or `repr` on a 0-dimensional `AbstractArray` now shows valid code for creating an equivalent 0-dimensional array, instead of only showing the contained value ([#33206]).\n* `readdir` output is now guaranteed to be sorted. The `sort` keyword allows opting out of sorting to get names in OS-native order ([#33542]).\n* The methods of `mktemp` and `mktempdir` that take a function to pass temporary paths to no longer throw errors if the path is already deleted when the function returns ([#33091]).\n* Verbose `display` of `Char` (`text/plain` output) now shows the codepoint value in standard-conforming `\"U+XXXX\"` format ([#33291]).\n* `Iterators.partition` now uses views (or smartly re-computed ranges) for partitions of all `AbstractArray`s ([#33533]).\n* Sets are now displayed less compactly in the REPL, as a column of elements, like vectors\n  and dictionaries ([#33300]).\n* `delete!` on `WeakKeyDict`s now returns the `WeakKeyDict` itself instead of the underlying `Dict` used for implementation\n\n#### LinearAlgebra\n\n* `qr` and `qr!` functions support `blocksize` keyword argument ([#33053]).\n* `dot` now admits a 3-argument method `dot(x, A, y)` to compute generalized dot products `dot(x, A*y)`, but without computing and storing the intermediate result `A*y` ([#32739]).\n* `ldlt` and non-pivoted `lu` now throw a new `ZeroPivotException` type ([#33372]).\n* `cond(A, p)` with `p=1` or `p=Inf` now computes the exact condition number instead of an estimate ([#33547]).\n* `UniformScaling` objects may now be exponentiated such that `(a*I)^x = a^x * I`.\n\n#### Markdown\n\n* Tables now have the `align` attribute set when `show`n as HTML ([#33849]).\n\n#### Random\n\n* `AbstractRNG`s now behave like scalars when used in broadcasting ([#33213]).\n* The performance of `rand(::Tuple)` is improved in some cases ([#32208]). As a consequence, the\n  stream of generated values produced for a given seed has changed.\n\n#### REPL\n\n* The attributes of the implicit `IOContext` used by the REPL to display objects can be\n  modified by the user (experimental feature) ([#29249]).\n\n#### SparseArrays\n\n* The return value of `zero(x::AbstractSparseArray)` has no stored zeros anymore ([#31835]).\n  Previously, it would have stored zeros wherever `x` had them. This makes the operation\n  constant time instead of `O(<number of stored values>)`.\n* Products involving sparse arrays now allow more general sparse `eltype`s, such as `StaticArrays` ([#33205])\n\n<!--- generated by NEWS-update.jl: -->\n[#29249]: https://github.com/JuliaLang/julia/issues/29249\n[#30115]: https://github.com/JuliaLang/julia/issues/30115\n[#31835]: https://github.com/JuliaLang/julia/issues/31835\n[#32208]: https://github.com/JuliaLang/julia/issues/32208\n[#32448]: https://github.com/JuliaLang/julia/issues/32448\n[#32739]: https://github.com/JuliaLang/julia/issues/32739\n[#32968]: https://github.com/JuliaLang/julia/issues/32968\n[#33012]: https://github.com/JuliaLang/julia/issues/33012\n[#33040]: https://github.com/JuliaLang/julia/issues/33040\n[#33053]: https://github.com/JuliaLang/julia/issues/33053\n[#33090]: https://github.com/JuliaLang/julia/issues/33090\n[#33091]: https://github.com/JuliaLang/julia/issues/33091\n[#33113]: https://github.com/JuliaLang/julia/issues/33113\n[#33119]: https://github.com/JuliaLang/julia/issues/33119\n[#33129]: https://github.com/JuliaLang/julia/issues/33129\n[#33158]: https://github.com/JuliaLang/julia/issues/33158\n[#33205]: https://github.com/JuliaLang/julia/issues/33205\n[#33206]: https://github.com/JuliaLang/julia/issues/33206\n[#33211]: https://github.com/JuliaLang/julia/issues/33211\n[#33213]: https://github.com/JuliaLang/julia/issues/33213\n[#33291]: https://github.com/JuliaLang/julia/issues/33291\n[#33300]: https://github.com/JuliaLang/julia/issues/33300\n[#33372]: https://github.com/JuliaLang/julia/issues/33372\n[#33403]: https://github.com/JuliaLang/julia/issues/33403\n[#33437]: https://github.com/JuliaLang/julia/issues/33437\n[#33533]: https://github.com/JuliaLang/julia/issues/33533\n[#33542]: https://github.com/JuliaLang/julia/issues/33542\n[#33547]: https://github.com/JuliaLang/julia/issues/33547\n[#33568]: https://github.com/JuliaLang/julia/issues/33568\n[#33849]: https://github.com/JuliaLang/julia/issues/33849\n[#33910]: https://github.com/JuliaLang/julia/issues/33910\n[#33946]: https://github.com/JuliaLang/julia/issues/33946\n[#34033]: https://github.com/JuliaLang/julia/issues/34033\n\nJulia v1.3 Release Notes\n========================\n\nNew language features\n---------------------\n\n* Support for Unicode 12.1.0 ([#32002]).\n* Methods can now be added to an abstract type ([#31916]).\n* Support for unicode bold digits and double-struck digits 0 through 9 as valid identifiers ([#32838]).\n* Added the syntax `var\"#str#\"` for printing and parsing non-standard variable names ([#32408]).\n\nLanguage changes\n----------------\n\n\nMulti-threading changes\n-----------------------\n\n* New experimental `Threads.@spawn` macro that runs a task on any available thread ([#32600]).\n* All system-level I/O operations (e.g. files and sockets) are now thread-safe.\n  This does not include subtypes of `IO` that are entirely in-memory, such as `IOBuffer`,\n  although it specifically does include `BufferStream`.\n  ([#32309], [#32174], [#31981], [#32421]).\n* The global random number generator (`GLOBAL_RNG`) is now thread-safe (and thread-local) ([#32407]).\n* New `Channel(f::Function, spawn=true)` keyword argument to schedule the created Task on\n  any available thread, matching the behavior of `Threads.@spawn` ([#32872]).\n* Simplified the `Channel` constructor, which is now easier to read and more idiomatic julia.\n  Use of the keyword arguments `csize` and `ctype` is now discouraged ([#30855], [#32818]).\n\nBuild system changes\n--------------------\n\n\nNew library functions\n---------------------\n\n* `findfirst`, `findlast`, `findnext` and `findprev` now accept a character as first argument\n  to search for that character in a string passed as the second argument ([#31664]).\n* New `findall(pattern, string)` method where `pattern` is a string or regex ([#31834]).\n* `count(pattern, string)` gives the number of things `findall` would match ([#32849]).\n* `istaskfailed` is now documented and exported, like its siblings `istaskdone` and `istaskstarted` ([#32300]).\n* `RefArray` and `RefValue` objects now accept index `CartesianIndex()` in  `getindex` and `setindex!` ([#32653])\n* Added `sincosd(x)` to simultaneously compute the sine and cosine of `x`, where `x` is in degrees ([#30134]).\n* The function `nonmissingtype`, which removes `Missing` from type unions, is now exported ([#31562]).\n\nStandard library changes\n------------------------\n\n* `Pkg` won't clobber pre-compilation files as often when switching environments ([#32651])\n* `Pkg` can now download and install binary artifacts through the `Pkg.Artifacts`\n   submodule and supporting functions. ([#32918])\n* When `wait` (or `@sync`, or `fetch`) is called on a failing `Task`, the exception is propagated as a\n  `TaskFailedException` wrapping the task.\n  This makes it possible to see the location of the original failure inside the task (as well as the\n  location of the `wait` call, as before) ([#32814]).\n* `Regex` can now be multiplied (`*`) and exponentiated (`^`), like strings ([#23422]).\n* `Cmd` interpolation (``` `$(x::Cmd) a b c` ``` where) now propagates `x`'s process flags\n  (environment, flags, working directory, etc) if `x` is the first interpolant and errors\n  otherwise ([#24353]).\n* Zero-dimensional arrays are now consistently preserved in the return values of mathematical\n  functions that operate on the array(s) as a whole (and are not explicitly broadcasted across their elements).\n  Previously, the functions  `+`, `-`, `*`, `/`, `conj`, `real` and `imag` returned the unwrapped element\n  when operating over zero-dimensional arrays ([#32122]).\n* `IPAddr` subtypes now behave like scalars when used in broadcasting ([#32133]).\n* `Pair` is now treated as a scalar for broadcasting ([#32209]).\n* `clamp` can now handle missing values ([#31066]).\n* `empty` now accepts a `NamedTuple` ([#32534]).\n* `mod` now accepts a unit range as the second argument to easily perform offset modular arithmetic to ensure the result is inside the range ([#32628]).\n* `nothing` can now be `print`ed, and interpolated into strings etc. as the string `\"nothing\"`. It is still not permitted to be interpolated into Cmds (i.e. ``echo `$(nothing)` `` will still error without running anything.) ([#32148])\n* When `open` is called with a function, command, and keyword argument (e.g. ```open(`ls`, read=true) do f ...```)\n  it now correctly throws a `ProcessFailedException` like other similar calls ([#32193]).\n* `mktemp` and `mktempdir` now try, by default, to remove temporary paths they create before the process exits ([#32851]).\n* Added argument `keep` to `unescape_string` ([#27125]).\n\n#### Libdl\n\n* `dlopen()` can now be invoked in `do`-block syntax, similar to `open()`.\n\n#### LinearAlgebra\n\n* The BLAS submodule no longer exports `dot`, which conflicts with that in LinearAlgebra ([#31838]).\n* `diagm` and `spdiagm` now accept optional `m,n` initial arguments to specify a size ([#31654]).\n* `Hessenberg` factorizations `H` now support efficient shifted solves `(H+µI) \\ b` and determinants, and use a specialized tridiagonal factorization for Hermitian matrices. There is also a new `UpperHessenberg` matrix type ([#31853]).\n* Added keyword argument `alg` to `svd` and `svd!` that allows one to switch between different SVD algorithms ([#31057]).\n* Five-argument `mul!(C, A, B, α, β)` now implements inplace multiplication fused with addition _C = A B α + C β_ ([#23919]).\n\n#### SparseArrays\n\n* `SparseMatrixCSC(m,n,colptr,rowval,nzval)` perform consistency checks for arguments:\n  `colptr` must be properly populated and lengths of `colptr`, `rowval`, and `nzval`\n  must be compatible with `m`, `n`, and `eltype(colptr)`.\n* `sparse(I, J, V, m, n)` verifies lengths of `I`, `J`, `V` are equal and compatible with\n  `eltype(I)` and `m`, `n`.\n\n#### Dates\n\n* `DateTime` and `Time` formatting/parsing now supports 12-hour clocks with AM/PM via `I` and `p` codes, similar to `strftime` ([#32308]).\n* Fixed `repr` such that it displays `Time` as it would be entered in Julia ([#32103]).\n\n#### Statistics\n\n* `mean` now accepts both a function argument and a `dims` keyword ([#31576]).\n\n#### Sockets\n\n* `Sockets.recvfrom` now returns both host and port as an InetAddr ([#32729]).\n* Added `InetAddr` constructor from `AbstractString`, representing IP address, and `Integer`,\n  representing port number ([#31459]).\n\n#### Miscellaneous\n\n* `foldr` and `mapfoldr` now work on any iterator that supports `Iterators.reverse`, not just arrays ([#31781]).\n\nDeprecated or removed\n---------------------\n\n* `@spawn expr` from the `Distributed` standard library should be replaced with `@spawnat :any expr` ([#32600]).\n* `Threads.Mutex` and `Threads.RecursiveSpinLock` have been removed; use `ReentrantLock` (preferred) or\n  `Threads.SpinLock` instead ([#32875]).\n\nExternal dependencies\n---------------------\n\nTooling Improvements\n---------------------\n\n* The `ClangSA.jl` static analysis package has been imported, which makes use of\n  the clang static analyzer to validate GC invariants in Julia's C code. The analysis\n  may be run using `make -C src analyzegc`.\n\n<!--- generated by NEWS-update.jl: -->\n[#23422]: https://github.com/JuliaLang/julia/issues/23422\n[#23919]: https://github.com/JuliaLang/julia/issues/23919\n[#24353]: https://github.com/JuliaLang/julia/issues/24353\n[#27125]: https://github.com/JuliaLang/julia/issues/27125\n[#30134]: https://github.com/JuliaLang/julia/issues/30134\n[#30855]: https://github.com/JuliaLang/julia/issues/30855\n[#31057]: https://github.com/JuliaLang/julia/issues/31057\n[#31066]: https://github.com/JuliaLang/julia/issues/31066\n[#31459]: https://github.com/JuliaLang/julia/issues/31459\n[#31562]: https://github.com/JuliaLang/julia/issues/31562\n[#31576]: https://github.com/JuliaLang/julia/issues/31576\n[#31654]: https://github.com/JuliaLang/julia/issues/31654\n[#31664]: https://github.com/JuliaLang/julia/issues/31664\n[#31781]: https://github.com/JuliaLang/julia/issues/31781\n[#31834]: https://github.com/JuliaLang/julia/issues/31834\n[#31838]: https://github.com/JuliaLang/julia/issues/31838\n[#31853]: https://github.com/JuliaLang/julia/issues/31853\n[#31916]: https://github.com/JuliaLang/julia/issues/31916\n[#31981]: https://github.com/JuliaLang/julia/issues/31981\n[#32002]: https://github.com/JuliaLang/julia/issues/32002\n[#32103]: https://github.com/JuliaLang/julia/issues/32103\n[#32122]: https://github.com/JuliaLang/julia/issues/32122\n[#32133]: https://github.com/JuliaLang/julia/issues/32133\n[#32148]: https://github.com/JuliaLang/julia/issues/32148\n[#32174]: https://github.com/JuliaLang/julia/issues/32174\n[#32193]: https://github.com/JuliaLang/julia/issues/32193\n[#32209]: https://github.com/JuliaLang/julia/issues/32209\n[#32300]: https://github.com/JuliaLang/julia/issues/32300\n[#32308]: https://github.com/JuliaLang/julia/issues/32308\n[#32309]: https://github.com/JuliaLang/julia/issues/32309\n[#32407]: https://github.com/JuliaLang/julia/issues/32407\n[#32408]: https://github.com/JuliaLang/julia/issues/32408\n[#32421]: https://github.com/JuliaLang/julia/issues/32421\n[#32534]: https://github.com/JuliaLang/julia/issues/32534\n[#32600]: https://github.com/JuliaLang/julia/issues/32600\n[#32628]: https://github.com/JuliaLang/julia/issues/32628\n[#32651]: https://github.com/JuliaLang/julia/issues/32651\n[#32653]: https://github.com/JuliaLang/julia/issues/32653\n[#32729]: https://github.com/JuliaLang/julia/issues/32729\n[#32814]: https://github.com/JuliaLang/julia/issues/32814\n[#32818]: https://github.com/JuliaLang/julia/issues/32818\n[#32838]: https://github.com/JuliaLang/julia/issues/32838\n[#32849]: https://github.com/JuliaLang/julia/issues/32849\n[#32851]: https://github.com/JuliaLang/julia/issues/32851\n[#32872]: https://github.com/JuliaLang/julia/issues/32872\n[#32875]: https://github.com/JuliaLang/julia/issues/32875\n[#32918]: https://github.com/JuliaLang/julia/issues/32918\n\nJulia v1.2 Release Notes\n========================\n\nNew language features\n---------------------\n\n* Argument splatting (`x...`) can now be used in calls to the `new` pseudo-function in\n  constructors ([#30577]).\n* Support for Unicode 12.0.0 ([#31561]).\n* Added `⋆` (`\\star`) as unary operator ([#31604]).\n\nLanguage changes\n----------------\n\n* Empty entries in `JULIA_DEPOT_PATH` are now expanded to default depot entries ([#31009]).\n\nMulti-threading changes\n-----------------------\n\n* The `Condition` type now has a thread-safe replacement, accessed as `Threads.Condition`.\n  With that addition, task scheduling primitives such as `ReentrantLock` are now thread-safe ([#30061]).\n* It is possible to schedule and switch Tasks during `@threads` loops, and perform limited I/O ([#31438]).\n\nBuild system changes\n--------------------\n\n* The build system now prefers downloading prebuilt binary tarballs for most dependencies on\n  supported systems, disable by setting `USE_BINARYBUILDER=0` at `make` time ([#31441]).\n\nNew library functions\n---------------------\n\n* `getipaddrs()` function returns all the IP addresses of the local machine, with IPv4 addresses sorting before IPv6 addresses ([#30349, #30604]).\n* `getipaddr(addr_type)` and `getipaddrs(addr_type)` functions returns an IP address(es) of the desired type of the local machine ([#30604]).\n* Added `Base.hasproperty` and `Base.hasfield` ([#28850]).\n* One argument `!=(x)`, `>(x)`, `>=(x)`, `<(x)`, `<=(x)` have been added, returning partially-applied\n  versions of the functions, similar to the existing `==(x)` and `isequal(x)` methods ([#30915]).\n* The new `map!(f, values(::AbstractDict))` method allows to modify in-place values of a dictionary ([#31223]).\n\nStandard library changes\n------------------------\n\n* `Enum` now behaves like a scalar when used in broadcasting ([#30670]).\n* If a `pipeline` is specified with `append=true` set, but no redirection, an `ArgumentError`\n  is thrown, rather than a `ErrorException` ([#27900]).\n* Functions that invoke commands (e.g. `run(::Cmd)`) now throw a `ProcessFailedException`\n  rather than an `ErrorException`, if those commands exit with non-zero exit code ([#27900]).\n* The `extrema` function now accepts a function argument in the same manner as `minimum` and\n  `maximum` ([#30323]).\n* `hasmethod` can now check for matching keyword argument names ([#30712]).\n* `startswith` and `endswith` now accept a `Regex` for the second argument ([#29790]).\n* `retry` supports arbitrary callable objects ([#30382]).\n* A no-argument constructor for `Ptr{T}` has been added which constructs a null pointer ([#30919]).\n* `strip` now accepts a function argument in the same manner as `lstrip` and `rstrip` ([#31211]).\n* `mktempdir` now accepts a `prefix` keyword argument to customize the file name ([#31230], [#22922]).\n* `keytype` and `valtype` now work on `AbstractArray`, and return the `eltype` of `keys(...)` and\n  `values(...)` respectively ([#27749]).\n* `nextfloat(::BigFloat)` and `prevfloat(::BigFloat)` now returns a value with the same precision\n  as their argument, which means that (in particular) `nextfloat(prevfloat(x)) == x` whereas\n  previously this could result in a completely different value with a different precision ([#31310]).\n* `mapreduce` now accepts multiple iterators, similar to `map` ([#31532]).\n* `filter` now supports `SkipMissing`-wrapped arrays ([#31235]).\n* Objects created by calling `skipmissing` on an array can now be indexed using indices\n  from the parent at non-missing positions. This allows functions such as\n  `findall`, `findfirst`, `argmin`/`argmax` and `findmin`/`findmax` to work with these\n  objects, returning the index of matching non-missing elements in the parent ([#31008]).\n* `inv(::Missing)` has now been added and returns `missing` ([#31451]).\n* `nextfloat(::BigFloat, n::Integer)` and `prevfloat(::BigFloat, n::Integer)` methods\n  have been added ([#31310]).\n\n#### LinearAlgebra\n* Added keyword arguments `rtol`, `atol` to `pinv` and `nullspace` ([#29998]).\n* `UniformScaling` instances are now callable such that e.g. `I(3)` will produce a `Diagonal` matrix ([#30298]).\n* Eigenvalues λ of general matrices are now sorted lexicographically by (Re λ, Im λ) ([#21598]).\n* `one` for structured matrices (`Diagonal`, `Bidiagonal`, `Tridiagonal`, `Symtridiagonal`) now preserves\n  structure and type ([#29777]).\n* `diagm(v)` is now a shorthand for `diagm(0 => v)` ([#31125]).\n\n#### SparseArrays\n* Performance improvements for sparse matrix-matrix multiplication ([#30372]).\n* Sparse vector outer products are more performant and maintain sparsity in products of the\n  form `kron(u, v')`, `u * v'`, and `u .* v'` where `u` and `v` are sparse vectors or column\n  views ([#24980]).\n* The `sprand` function is now 2 to 5 times faster ([#30494]). As a consequence of this change, the random stream of matrices produced with `sprand` and `sprandn` has changed.\n\n#### Sockets\n\n* `getipaddrs` returns IP addresses in the order provided by libuv ([#32260]).\n* `getipaddr` prefers to return the first `IPv4` interface address provided by libuv ([#32260]).\n\n#### Dates\n* Fixed `repr` such that it displays `DateTime` as it would be entered in Julia ([#30200]).\n\n#### Statistics\n* `quantile` now accepts in all cases collections whose `eltype` is not a subtype of `Number` ([#30938]).\n\n#### Miscellaneous\n* Since environment variables on Windows are case-insensitive, `ENV` now converts its keys\n  to uppercase for display, iteration, and copying ([#30593]).\n\nExternal dependencies\n---------------------\n\n* libgit2 has been updated to v0.27.7 ([#30584]).\n* OpenBLAS has been updated to v0.3.5 ([#30583]).\n* MbedTLS has been updated to v2.16.0 ([#30618]).\n* libunwind has been updated to v1.3.1 ([#30724]).\n\n<!--- generated by NEWS-update.jl: -->\n[#21598]: https://github.com/JuliaLang/julia/issues/21598\n[#22922]: https://github.com/JuliaLang/julia/issues/22922\n[#24980]: https://github.com/JuliaLang/julia/issues/24980\n[#27749]: https://github.com/JuliaLang/julia/issues/27749\n[#27900]: https://github.com/JuliaLang/julia/issues/27900\n[#28850]: https://github.com/JuliaLang/julia/issues/28850\n[#29777]: https://github.com/JuliaLang/julia/issues/29777\n[#29790]: https://github.com/JuliaLang/julia/issues/29790\n[#29998]: https://github.com/JuliaLang/julia/issues/29998\n[#30061]: https://github.com/JuliaLang/julia/issues/30061\n[#30200]: https://github.com/JuliaLang/julia/issues/30200\n[#30298]: https://github.com/JuliaLang/julia/issues/30298\n[#30323]: https://github.com/JuliaLang/julia/issues/30323\n[#30372]: https://github.com/JuliaLang/julia/issues/30372\n[#30382]: https://github.com/JuliaLang/julia/issues/30382\n[#30494]: https://github.com/JuliaLang/julia/issues/30494\n[#30577]: https://github.com/JuliaLang/julia/issues/30577\n[#30583]: https://github.com/JuliaLang/julia/issues/30583\n[#30584]: https://github.com/JuliaLang/julia/issues/30584\n[#30593]: https://github.com/JuliaLang/julia/issues/30593\n[#30604]: https://github.com/JuliaLang/julia/issues/30604\n[#30618]: https://github.com/JuliaLang/julia/issues/30618\n[#30670]: https://github.com/JuliaLang/julia/issues/30670\n[#30712]: https://github.com/JuliaLang/julia/issues/30712\n[#30724]: https://github.com/JuliaLang/julia/issues/30724\n[#30915]: https://github.com/JuliaLang/julia/issues/30915\n[#30919]: https://github.com/JuliaLang/julia/issues/30919\n[#30938]: https://github.com/JuliaLang/julia/issues/30938\n[#31008]: https://github.com/JuliaLang/julia/issues/31008\n[#31009]: https://github.com/JuliaLang/julia/issues/31009\n[#31125]: https://github.com/JuliaLang/julia/issues/31125\n[#31211]: https://github.com/JuliaLang/julia/issues/31211\n[#31223]: https://github.com/JuliaLang/julia/issues/31223\n[#31230]: https://github.com/JuliaLang/julia/issues/31230\n[#31235]: https://github.com/JuliaLang/julia/issues/31235\n[#31310]: https://github.com/JuliaLang/julia/issues/31310\n[#31438]: https://github.com/JuliaLang/julia/issues/31438\n[#31441]: https://github.com/JuliaLang/julia/issues/31441\n[#31451]: https://github.com/JuliaLang/julia/issues/31451\n[#31532]: https://github.com/JuliaLang/julia/issues/31532\n[#31561]: https://github.com/JuliaLang/julia/issues/31561\n[#31604]: https://github.com/JuliaLang/julia/issues/31604\n[#32260]: https://github.com/JuliaLang/julia/issues/32260\n\nJulia v1.1 Release Notes\n========================\n\nNew language features\n---------------------\n\n  * An *exception stack* is maintained on each task to make exception handling\n    more robust and enable root cause analysis. The stack may be accessed using\n    the experimental function `Base.catch_stack` ([#28878]).\n  * The experimental macro `Base.@locals` returns a dictionary of current local variable names\n    and values ([#29733]).\n  * Binary `~` can now be dotted, as in `x .~ y` ([#30341]).\n\nLanguage changes\n----------------\n\n  * Parser inputs ending with a comma are now consistently treated as incomplete.\n    Previously they were sometimes parsed as tuples, depending on whitespace ([#28506]).\n  * Spaces were accidentally allowed in broadcast call syntax, e.g. `f. (x)`. They are now\n    disallowed, consistent with normal function call syntax ([#29781]).\n  * Big integer literals and command syntax (backticks) are now parsed with the name of\n    the macro (`@int128_str`, `@uint128_str`, `@big_str`, `@cmd`) qualified to refer\n    to the `Core` module ([#29968]).\n  * Using the same name for both a local variable and a static parameter is now an error instead\n    of a warning ([#29429]).\n  * `findall(in(b), a)` now returns a `CartesianIndex` when `a` is a matrix or a higher-dimensional array,\n    for consistency with other `findall` methods. Use `LinearIndices(a)[findall(in(b), a)]` to get\n    the old behavior, or `CartesianIndices(a)[findall(in(b), a)]` to get the new behavior\n    on previous Julia versions ([#30226]).\n  * `findmin(::BitArray)` and `findmax(::BitArray)` now return a `CartesianIndex` when `a` is a matrix\n    or a higher-dimensional array, for consistency with other array types.\n    Use `LinearIndices(a)[findmin(a)[2]]` to get the old behavior, or `CartesianIndices(a)[findmin(a)[2]]`\n    to get the new behavior on previous Julia versions ([#30102]).\n  * Method signatures such as\n    `f(::Type{T}, ::T) where {T <: X}` and\n    `f(::Type{X}, ::Any)`\n    are now considered ambiguous. Previously a bug caused the first one to be considered more specific in\n    some cases ([#30160]).\n\nCommand-line option changes\n---------------------------\n\n  * When a script run in interactive mode (`-i`) throws an error, the REPL now starts after\n    the error is displayed. Previously the REPL only started if the script completed without\n    error ([#21233]).\n\nNew library functions\n---------------------\n\n  * `splitpath(p::String)` function, which is the opposite of `joinpath(parts...)`: it splits a filepath\n    into its components ([#28156]).\n  * `isnothing(::Any)` predicate, to check whether the argument is `nothing`. ([#29679]).\n  * `getpid(::Process)` method ([#24064]).\n  * `eachrow`, `eachcol` and `eachslice` functions provide efficient iterators over slices of arrays ([#29749]).\n  * `fieldtypes(T::Type)` which returns the declared types of the field in type T ([#29600]).\n  * `uuid5` has been added to the `UUIDs` standard library ([#28761]).\n  * Predicates `Sys.isfreebsd`, `Sys.isopenbsd`, `Sys.isnetbsd`, and `Sys.isdragonfly` for\n    detecting BSD systems have been added ([#30249]).\n  * Internal `Base.disable_library_threading` that sets libraries to use one thread.\n    It executes function hooks that have been registered with\n    `Base.at_disable_library_threading` ([#30004]).\n\nStandard library changes\n------------------------\n\n  * `CartesianIndices` can now be constructed from two `CartesianIndex`es `I` and `J` with `I:J` ([#29440]).\n  * `CartesianIndices` support broadcasting arithmetic (+ and -) with a `CartesianIndex` ([#29890]).\n  * `copy!` support for arrays, dicts, and sets has been moved to Base from the Future package ([#29173]).\n  * Channels now convert inserted values (like containers) instead of requiring types to match ([#29092]).\n  * `range` can accept the stop value as a positional argument, e.g. `range(1,10,step=2)` ([#28708]).\n  * `diff` now supports arrays of arbitrary dimensionality and can operate over any dimension ([#29827]).\n  * The constructor `BigFloat(::BigFloat)` now respects the global precision setting and always\n    returns a `BigFloat` with precision equal to `precision(BigFloat)` ([#29127]). The optional\n    `precision` argument to override the global setting is now a keyword instead of positional\n    argument ([#29157]).\n  * The use of scientific notation when printing `BigFloat` values is now consistent with other floating point\n    types ([#29211]).\n  * `Regex` now behaves like a scalar when used in broadcasting ([#29913]).\n  * `Char` now behaves like a read-only 0-dimensional array ([#29819]).\n  * `parse` now allows strings representing integer 0 and 1 for type `Bool` ([#29980]).\n  * `Base.tail` now works on named tuples ([#29595]).\n  * The process id is appended to malloc log files in order to track memory allocations of\n    multiple processes ([#29969]).\n  * `Base.julia_cmd` now propagates the `--inline=(yes|no)` flag ([#29858]).\n  * `Base.@kwdef` can now be used for parametric structs, and for structs with supertypes ([#29316]).\n  * `merge(::NamedTuple, ::NamedTuple...)` can now be used with more than 2 `NamedTuple`s ([#29259]).\n  * New `ncodeunits(c::Char)` method as a fast equivalent to `ncodeunits(string(c))` ([#29153]).\n  * New `sort!(::AbstractArray; dims)` method that can sort the array along the `dims` dimension ([#28902]).\n  * `range` now accepts `stop` as a positional argument ([#28708]).\n  * `get(A::AbstractArray, (), default)` now returns `A[]` instead of an empty array ([#30270]).\n  * `parse(Bool, str)` is now supported ([#29997]).\n  * `copyto!(::AbstractMatrix, ::UniformScaling)` now supports rectangular matrices ([#28790]).\n  * `current_project()` now searches the parent directories of a Git repository for a `Project.toml` file.\n    This also affects the behavior of the `--project` command line option when using the default\n    `--project=@.` ([#29108]).\n  * The `spawn` API is now more flexible and supports taking IOBuffer directly as an I/O stream,\n    converting to a system pipe as needed ([#30278]).\n\n#### Dates\n  * New `DateTime(::Date, ::Time)` constructor ([#29754]).\n  * `TimeZone` now behaves like a scalar when used in broadcasting ([#30159]).\n\n#### InteractiveUtils\n  * `edit` can now be called on a module to edit the file that defines it ([#29636]).\n  * All compiler-reflection tools (i.e. the `code_` class of functions and macros) now print accurate\n    line number and inlining information in a common style, and take an optional parameter (debuginfo=:default)\n    to control the verbosity of the metadata shown ([#29893]).\n\n#### LinearAlgebra\n  * `isdiag` and `isposdef` for `Diagonal` and `UniformScaling` ([#29638]).\n  * `mul!`, `rmul!` and `lmul!` methods for `UniformScaling` ([#29506]).\n  * `Symmetric` and `Hermitian` matrices now preserve the wrapper when scaled with a number ([#29469]).\n  * Exponentiation operator `^` now supports raising an `Irrational` to an `AbstractMatrix` power ([#29782]).\n  * Added keyword arguments `rtol`, `atol` to `rank` ([#29926]).\n\n#### Random\n  * `randperm` and `randcycle` now use the type of their argument to determine the element type of\n    the returned array ([#29670]).\n  * A new method `rand(::Tuple)` implements sampling from the values of a tuple ([#25278]).\n  * `serialize` and `deserialize` now accept a filename argument, like `write` and `read` ([#30151]).\n\n#### SparseArrays\n  * `sprandn` now supports specifying the output element type ([#30083]).\n\n#### Statistics\n  * `mean` and `var` now handle more kinds of empty inputs ([#29033]).\n\nExternal dependencies\n---------------------\n\n  * 7zip (bundled with Julia on Windows) has been upgraded from version 16.04 to 18.05 ([#30035]).\n  * Busybox is no longer bundled with Julia on Windows ([#30022]).\n  * OpenBLAS has been upgraded from 0.3.2 to 0.3.3 ([#29845]).\n  * The source code for Pkg is no longer included in JuliaLang/julia. Pkg is instead\n    downloaded during the build process ([#29615]).\n  * LLVM has been upgraded to 6.0.1 and support for LLVM < 6.0 has been dropped ([#28745], [#28696]).\n  * Pkg has been upgraded to version 1.1 ([#30342]).\n\nDeprecated or removed\n---------------------\n\n  * `one(i::CartesianIndex)` should be replaced with `oneunit(i::CartesianIndex)` ([#29442]).\n  * The internal array `Base.Grisu.DIGITS` is deprecated; new code should use `Base.Grisu.getbuf()`\n    to get an appropriate task-local buffer and pass it to `grisu()` instead ([#29907]).\n  * The internal function `Base._default_type(T)` has been removed. Calls to it should be\n    replaced with just the argument `T` ([#29739]).\n  * `peakflops` has been scheduled to move from `InteractiveUtils` to `LinearAlgebra`\n    but is already now available as `LinearAlgebra.peakflops` ([#29978]).\n\n<!--- generated by NEWS-update.jl: -->\n[#21233]: https://github.com/JuliaLang/julia/issues/21233\n[#24064]: https://github.com/JuliaLang/julia/issues/24064\n[#25278]: https://github.com/JuliaLang/julia/issues/25278\n[#28156]: https://github.com/JuliaLang/julia/issues/28156\n[#28506]: https://github.com/JuliaLang/julia/issues/28506\n[#28696]: https://github.com/JuliaLang/julia/issues/28696\n[#28708]: https://github.com/JuliaLang/julia/issues/28708\n[#28745]: https://github.com/JuliaLang/julia/issues/28745\n[#28761]: https://github.com/JuliaLang/julia/issues/28761\n[#28790]: https://github.com/JuliaLang/julia/issues/28790\n[#28878]: https://github.com/JuliaLang/julia/issues/28878\n[#28902]: https://github.com/JuliaLang/julia/issues/28902\n[#29033]: https://github.com/JuliaLang/julia/issues/29033\n[#29092]: https://github.com/JuliaLang/julia/issues/29092\n[#29108]: https://github.com/JuliaLang/julia/issues/29108\n[#29127]: https://github.com/JuliaLang/julia/issues/29127\n[#29153]: https://github.com/JuliaLang/julia/issues/29153\n[#29157]: https://github.com/JuliaLang/julia/issues/29157\n[#29173]: https://github.com/JuliaLang/julia/issues/29173\n[#29211]: https://github.com/JuliaLang/julia/issues/29211\n[#29259]: https://github.com/JuliaLang/julia/issues/29259\n[#29316]: https://github.com/JuliaLang/julia/issues/29316\n[#29429]: https://github.com/JuliaLang/julia/issues/29429\n[#29440]: https://github.com/JuliaLang/julia/issues/29440\n[#29442]: https://github.com/JuliaLang/julia/issues/29442\n[#29469]: https://github.com/JuliaLang/julia/issues/29469\n[#29506]: https://github.com/JuliaLang/julia/issues/29506\n[#29595]: https://github.com/JuliaLang/julia/issues/29595\n[#29600]: https://github.com/JuliaLang/julia/issues/29600\n[#29615]: https://github.com/JuliaLang/julia/issues/29615\n[#29636]: https://github.com/JuliaLang/julia/issues/29636\n[#29638]: https://github.com/JuliaLang/julia/issues/29638\n[#29670]: https://github.com/JuliaLang/julia/issues/29670\n[#29679]: https://github.com/JuliaLang/julia/issues/29679\n[#29733]: https://github.com/JuliaLang/julia/issues/29733\n[#29739]: https://github.com/JuliaLang/julia/issues/29739\n[#29749]: https://github.com/JuliaLang/julia/issues/29749\n[#29754]: https://github.com/JuliaLang/julia/issues/29754\n[#29781]: https://github.com/JuliaLang/julia/issues/29781\n[#29782]: https://github.com/JuliaLang/julia/issues/29782\n[#29819]: https://github.com/JuliaLang/julia/issues/29819\n[#29827]: https://github.com/JuliaLang/julia/issues/29827\n[#29845]: https://github.com/JuliaLang/julia/issues/29845\n[#29858]: https://github.com/JuliaLang/julia/issues/29858\n[#29890]: https://github.com/JuliaLang/julia/issues/29890\n[#29893]: https://github.com/JuliaLang/julia/issues/29893\n[#29907]: https://github.com/JuliaLang/julia/issues/29907\n[#29913]: https://github.com/JuliaLang/julia/issues/29913\n[#29926]: https://github.com/JuliaLang/julia/issues/29926\n[#29968]: https://github.com/JuliaLang/julia/issues/29968\n[#29969]: https://github.com/JuliaLang/julia/issues/29969\n[#29978]: https://github.com/JuliaLang/julia/issues/29978\n[#29980]: https://github.com/JuliaLang/julia/issues/29980\n[#29997]: https://github.com/JuliaLang/julia/issues/29997\n[#30004]: https://github.com/JuliaLang/julia/issues/30004\n[#30022]: https://github.com/JuliaLang/julia/issues/30022\n[#30035]: https://github.com/JuliaLang/julia/issues/30035\n[#30083]: https://github.com/JuliaLang/julia/issues/30083\n[#30102]: https://github.com/JuliaLang/julia/issues/30102\n[#30151]: https://github.com/JuliaLang/julia/issues/30151\n[#30159]: https://github.com/JuliaLang/julia/issues/30159\n[#30160]: https://github.com/JuliaLang/julia/issues/30160\n[#30226]: https://github.com/JuliaLang/julia/issues/30226\n[#30249]: https://github.com/JuliaLang/julia/issues/30249\n[#30270]: https://github.com/JuliaLang/julia/issues/30270\n[#30278]: https://github.com/JuliaLang/julia/issues/30278\n[#30341]: https://github.com/JuliaLang/julia/issues/30341\n[#30342]: https://github.com/JuliaLang/julia/issues/30342\n\nJulia v1.0.0 Release Notes\n==========================\n\nJulia v1.0 is identical to the v0.7 release, with the exception that\nit removes all deprecations and deprecation related warnings. When\nupgrading a codebase from v0.6, the process is to first get the code\nto work on v0.7, and fix all the deprecation warnings. Once the code\nruns on v0.7 without warnings, it should be good to run on v1.0.\n\nRefer to the [Release Notes for\nv0.7](https://github.com/JuliaLang/julia/blob/master/HISTORY.md) for a\ndetailed list of changes from Julia v0.6.\n\nStandard Library Changes\n------------------------\n\n* The `Libdl` module's methods `dlopen()` and `dlsym()` have gained a\n  `throw_error` keyword argument, replacing the now-deprecated `dlopen_e()`\n  and `dlsym_e()` methods. When `throw_error` is `false`, failure to locate\n  a shared library or symbol will return `nothing` rather than `C_NULL`.\n  ([#28888])\n\nDeprecated or removed\n---------------------\n\n* The old package manager (now called `OldPkg`) has been moved to a\n  separate repository at https://github.com/JuliaArchive/OldPkg.jl ([#27930])\n\n<!--- generated by NEWS-update.jl: -->\n[#27930]: https://github.com/JuliaLang/julia/issues/27930\n[#28888]: https://github.com/JuliaLang/julia/issues/28888\n\nJulia v0.7.0 Release Notes\n==========================\n\nNew language features\n---------------------\n\n  * Local variables can be tested for being defined\n    using the new `@isdefined variable` macro ([#22281]).\n\n  * Destructuring in function arguments: when an expression such as `(x, y)` is used as\n    a function argument name, the argument is unpacked into local variables `x` and `y`\n    as in the assignment `(x, y) = arg` ([#6614]).\n\n  * Named tuples, with the syntax `(a=1, b=2)`. These behave very similarly to tuples,\n    except components can also be accessed by name using dot syntax `t.a` ([#22194]).\n\n  * Keyword argument containers (`kw` in `f(; kw...)`) are now based on named tuples. Dictionary\n    functions like `haskey` and indexing can be used on them, and name-value pairs can be\n    iterated using `pairs(kw)`. `kw` can no longer contain multiple entries for the same\n    argument name ([#4916]).\n\n  * Custom infix operators can now be defined by appending Unicode\n    combining marks, primes, and sub/superscripts to other operators.\n    For example, `+̂ₐ″` is parsed as an infix operator with the same\n    precedence as `+` ([#22089]).\n\n  * The macro call syntax `@macroname[args]` is now available and is parsed\n    as `@macroname([args])` ([#23519]).\n\n  * The construct `if @generated ...; else ...; end` can be used to provide both\n    `@generated` and normal implementations of part of a function. Surrounding code\n    will be common to both versions ([#23168]).\n\n  * Added `⟂` (`\\perp`) operator with comparison precedence ([#24404]).\n\n  * The `missing` singleton object (of type `Missing`) has been added to represent\n    missing values ([#24653]). It propagates through standard operators and mathematical functions,\n    and implements three-valued logic, similar to SQLs `NULL` and R's `NA`.\n\n  * Field access via dot-syntax can now be overloaded by adding methods to\n    `Base.getproperty` and `Base.setproperty!` ([#1974]), optionally along with\n    a corresponding `Base.propertynames` method for reflection ([#25311]).\n\n  * Values for `Enum`s can now be specified inside of a `begin` block when using the\n    `@enum` macro ([#25424]).\n\n  * Keyword arguments can be required: if a default value is omitted, then an\n    exception is thrown if the caller does not assign the keyword a value ([#25830]).\n\n  * The pair operator `=>` is now broadcastable as `.=>` which was previously a parsing error ([#27447])\n\nLanguage changes\n----------------\n\n  * The syntax for parametric methods, `function f{T}(x::T)`, has been\n    changed to `function f(x::T) where {T}` ([#11310]).\n\n  * The fallback constructor that calls `convert` is deprecated. Instead, new types should\n    prefer to define constructors, and add `convert` methods that call those constructors\n    only as necessary ([#15120]).\n\n  * The syntax `1.+2` is deprecated, since it is ambiguous: it could mean either\n    `1 .+ 2` (the current meaning) or `1. + 2` ([#19089]).\n\n  * Mutable structs with no fields are no longer singletons; it is now possible to make\n    multiple instances of them that can be distinguished by `===` ([#25854]).\n    Zero-size immutable structs are still singletons.\n\n  * In string and character literals, backslash `\\` may no longer\n    precede unrecognized escape characters ([#22800]).\n\n  * Juxtaposing binary, octal, and hexadecimal literals is deprecated, since it can lead to\n    confusing code such as `0xapi == 0xa * pi` ([#16356]).\n\n  * Numeric literal juxtaposition now has slightly lower precedence than unary operators,\n    so for example `√2x` parses as `(√2) * x` ([#27641]).\n\n  * Declaring arguments as `x::ANY` to avoid specialization has been replaced\n    by `@nospecialize x`. ([#22666]).\n\n    This can also be used in global scope, to apply to all subsequent method definitions\n    in the module (until `@specialize`). ([#28065])\n\n  * Keyword argument default values are now evaluated in successive scopes ---\n    the scope for each expression includes only previous keyword arguments, in\n    left-to-right order ([#17240]).\n\n  * The parsing of `1<<2*3` as `1<<(2*3)` is deprecated, and will change to\n    `(1<<2)*3` in a future version ([#13079]).\n\n  * The parsing of `<|` is now right associative. `|>` remains left associative ([#24153]).\n\n  * `:` now parses like other operators, as a call to a function named `:`, instead of\n    calling `colon` ([#25947]).\n\n  * `{ }` expressions now use `braces` and `bracescat` as expression heads instead\n    of `cell1d` and `cell2d`, and parse similarly to `vect` and `vcat` ([#8470]).\n\n  * Nested `if` expressions that arise from the keyword `elseif` now use `elseif`\n    as their expression head instead of `if` ([#21774]).\n\n  * `let` blocks now parse the same as `for` loops; the first argument is either an\n    assignment or `block` of assignments, and the second argument is a block of\n    statements ([#21774]).\n\n  * `do` syntax now parses to an expression with head `:do`, instead of as a function\n    call ([#21774]).\n\n  * Parsed and lowered forms of type definitions have been synchronized with their\n    new keywords ([#23157]). Expression heads are renamed as follows:\n\n    + `type`           => `struct`\n\n    + `bitstype`       => `primitive` (order of arguments is also reversed, to match syntax)\n\n    + `composite_type` => `struct_type`\n\n    + `bits_type`      => `primitive_type`\n\n  * The `global` keyword now only introduces a new binding if one doesn't already exist\n    in the module.\n    This means that assignment to a global (`global sin = 3`) may now throw the error:\n    \"cannot assign variable Base.sin from module Main\", rather than emitting a warning.\n    Additionally, the new bindings are now created before the statement is executed.\n    For example, `f() = (global sin = \"gluttony\"; nothing)` will now resolve which module\n    contains `sin` eagerly, rather than delaying that decision until `f` is run. ([#22984]).\n\n  * `global const` declarations may no longer appear inside functions ([#12010]).\n\n  * Uninitialized `BitArray` constructors of the form `BitArray[{N}](shape...)` have been\n    deprecated in favor of equivalents accepting `undef` (an alias for\n    `UndefInitializer()`) as their first argument, as in\n    `BitArray[{N}](undef, shape...)`. For example, `BitVector(3)` is now\n    `BitVector(undef, 3)`, `BitMatrix((2, 4))` is now\n    `BitMatrix(undef, (2, 4))`, and `BitArray{3}(11, 13, 17)` is now\n    `BitArray{3}(undef, 11, 14, 17)` ([#24785]).\n\n  * Dispatch rules have been simplified:\n    method matching is now determined exclusively by subtyping;\n    the rule that method type parameters must also be captured has been removed.\n    Instead, attempting to access the unconstrained parameters will throw an `UndefVarError`.\n    Linting in package tests is recommended to confirm that the set of methods\n    which might throw `UndefVarError` when accessing the static parameters\n    (`need_to_handle_undef_sparam = Set{Any}(m.sig for m in Test.detect_unbound_args(Base, recursive=true))`)\n    is equal (`==`) to some known set (`expected = Set()`). ([#23117])\n\n  * `const` declarations on local variables were previously ignored. They now give a\n    warning, so that this syntax can be disallowed or given a new meaning in a\n    future version ([#5148]).\n\n  * Placing an expression after `catch`, as in `catch f(x)`, is deprecated.\n    Use `catch; f(x)` instead ([#19987]).\n\n  * In `for i = ...`, if a local variable `i` already existed it would be overwritten\n    during the loop. This behavior is deprecated, and in the future `for` loop variables\n    will always be new variables local to the loop ([#22314]).\n    The old behavior of overwriting an existing variable is available via `for outer i = ...`.\n\n  * In `for i in x`, `x` used to be evaluated in a new scope enclosing the `for` loop.\n    Now it is evaluated in the scope outside the `for` loop.\n\n  * In `for i in x, j in y`, all variables now have fresh bindings on each iteration of the\n    innermost loop. For example, an assignment to `i` will not be visible on the next `j`\n    loop iteration ([#330]).\n\n  * Variable bindings local to `while` loop bodies are now freshly allocated on each loop iteration,\n    matching the behavior of `for` loops.\n\n  * Prefix `&` for by-reference arguments to `ccall` has been deprecated in favor of\n    `Ref` argument types ([#6080]).\n\n  * The constructor `Ref(x::T)` now always returns a `Ref{T}` ([#21527]).\n\n  * All line numbers in ASTs are represented by `LineNumberNode`s; the `:line` expression\n    head is no longer used. `QuoteNode`s are also consistently used for quoted symbols instead\n    of the `:quote` expression head (though `:quote` `Expr`s are still used for quoted\n    expressions) ([#23885]).\n\n  * The `+` and `-` methods for `Number` and `UniformScaling` are not ambiguous anymore since `+`\n    and `-` no longer do automatic broadcasting. Hence, the methods for `UniformScaling` and `Number` are\n    no longer deprecated ([#23923]).\n\n  * The keyword `importall` is deprecated. Use `using` and/or individual `import` statements\n    instead ([#22789]).\n\n  * `reduce(+, [...])` and `reduce(*, [...])` no longer widen the iterated over arguments to\n    system word size. `sum` and `prod` still preserve this behavior. ([#22825])\n\n  * Like `_`, variable names consisting only of underscores can be assigned,\n    but accessing their values is deprecated ([#24221]).\n\n  * Raw string literal escaping rules have been changed to make it possible to write all strings.\n    The rule is that backslashes escape both quotes and other backslashes, but only when a sequence\n    of backslashes precedes a quote character. Thus, 2n backslashes followed by a quote encodes n\n    backslashes and the end of the literal while 2n+1 backslashes followed by a quote encodes n\n    backslashes followed by a quote character ([#22926]).\n\n  * `reprmime(mime, x)` has been renamed to `repr(mime, x)`, and along with `repr(x)`\n    and `sprint` it now accepts an optional `context` keyword for `IOContext` attributes.\n    `stringmime` has been moved to the Base64 stdlib package ([#25990]).\n\n  * The syntax `(x...)` for constructing a tuple is deprecated; use `(x...,)` instead ([#24452]).\n\n  * Non-parenthesized interpolated variables in strings, e.g. `\"$x\"`, must be followed\n    by a character that will never be an allowed identifier character (currently\n    operators, space/control characters, or common punctuation characters) ([#25231]).\n\n  * The syntax `using A.B` can now only be used when `A.B` is a module, and the syntax\n    `using A: B` can only be used for adding single bindings ([#8000]).\n\n  * `=>` now has its own precedence level, giving it strictly higher precedence than\n    `=` and `,` ([#25391]).\n\n  * The conditions under which unary operators followed by `(` are parsed as prefix function\n    calls have changed ([#26154]).\n\n  * `begin` is disallowed inside indexing expressions, in order to enable the syntax\n    `a[begin]` (for selecting the first element) in the future ([#23354]).\n\n  * Underscores for `_italics_` and `__bold__` are now supported by the Base Markdown\n    parser. ([#25564])\n\n  * `…` (`\\dots`) and `⁝` (`\\tricolon`) are now parsed as binary operators ([#26262]).\n\n  * Assignment syntax (`a=b`) inside square bracket expressions (e.g. `A[...]`, `[x, y]`)\n    is deprecated. It will likely be reclaimed in a later version for passing keyword\n    arguments. Note this does not affect updating operators like `+=` ([#25631]).\n\n  * `try` blocks without `catch` or `finally` are no longer allowed. An explicit empty\n    `catch` block should be written instead ([#27554]).\n\n  * `AbstractArray` types that use unconventional (not 1-based) indexing can now support\n    `size`, `length`, and `@inbounds`. To optionally enforce conventional indices,\n    you can `@assert !has_offset_axes(A)`.\n\n  * Module pre-compilation is now the default for code loading. Adding a\n    `__precompile__()` declaration is no longer necessary, although\n    `__precompile__(false)` can still be used to opt-out ([#26991]).\n\nBreaking changes\n----------------\n\nThis section lists changes that do not have deprecation warnings.\n\n  * The package manager `Pkg` has been replaced with a new one. See the manual entries on\n    \"Code Loading\" and \"Pkg\" for documentation.\n\n  * `replace(s::AbstractString, pat=>repl)` for function `repl` arguments formerly\n    passed a substring to `repl` in all cases. It now passes substrings for\n    string patterns `pat`, but a `Char` for character patterns (when `pat` is a\n    `Char`, collection of `Char`, or a character predicate) ([#25815]).\n\n  * `readuntil` now does *not* include the delimiter in its result, matching the\n    behavior of `readline`. Pass `keep=true` to get the old behavior ([#25633]).\n\n  * `lu` methods now return decomposition objects such as `LU` rather than\n    tuples of arrays or tuples of numbers ([#26997], [#27159], [#27212]).\n\n  * `schur` methods now return decomposition objects such as `Schur` and\n    `GeneralizedSchur` rather than tuples of arrays ([#26997], [#27159], [#27212]).\n\n  * `lq` methods now return decomposition objects such as `LQ`\n    rather than tuples of arrays ([#26997], [#27159], [#27212]).\n\n  * `qr` methods now return decomposition objects such as `QR`, `QRPivoted`,\n    and `QRCompactWY` rather than tuples of arrays ([#26997], [#27159], [#27212]).\n\n  * `svd` methods now return decomposition objects such as `SVD` and\n    `GeneralizedSVD` rather than tuples of arrays or tuples of numbers ([#26997], [#27159], [#27212]).\n\n  * `countlines` now always counts the last non-empty line even if it does not\n    end with EOL, matching the behavior of `eachline` and `readlines` ([#25845]).\n\n  * `getindex(s::String, r::UnitRange{Int})` now throws `StringIndexError` if `last(r)`\n    is not a valid index into `s` ([#22572]).\n\n  * `ntuple(f, n::Integer)` throws `ArgumentError` if `n` is negative.\n    Previously an empty tuple was returned ([#21697]).\n\n  * `⋮`, `⋱`, `⋰`, and `⋯` are now parsed as binary operators, not ordinary\n    identifiers.  `≔`, `≕`, and `⩴` now parse with assignment rather than comparison\n    precedence ([#26262]).\n\n  * Juxtaposing string literals (e.g. `\"x\"y`) is now a syntax error ([#20575]).\n\n  * `finalizer(function, object)` now returns `object` rather than `nothing` ([#24679]).\n\n  * The constructor of `SubString` now checks if the requested view range\n    is defined by valid indices in the parent `AbstractString` ([#22511]).\n\n  * Macro calls with `for` expressions are now parsed as generators inside\n    function argument lists ([#18650]). Examples:\n\n    + `sum(@inbounds a[i] for i = 1:n)` used to give a syntax error, but is now\n      parsed as `sum(@inbounds(a[i]) for i = 1:n)`.\n\n    + `sum(@m x for i = 1:n end)` used to parse the argument to `sum` as a 2-argument\n      call to macro `@m`, but now parses it as a generator plus a syntax error\n      for the dangling `end`.\n\n  * `@__DIR__` returns the current working directory rather than `nothing` when not run\n    from a file ([#21759]).\n\n  * `@__FILE__` and `@__DIR__` return information relative to the file that it was parsed from,\n    rather than from the task-local `SOURCE_PATH` global when it was expanded.\n\n  * All macros receive an extra argument `__source__::LineNumberNode` which describes the\n    parser location in the source file for the `@` of the macro call.\n    It can be accessed as a normal argument variable in the body of the macro.\n    This is implemented by inserting an extra leading argument into the\n    `Expr(:macrocall, :@name, LineNumberNode(...), args...)`\n    surface syntax. ([#21746])\n\n  * Passing the same keyword argument multiple times is now a syntax error ([#16937]).\n\n  * `getsockname` on a `TCPSocket` now returns the locally bound address and port\n    of the socket. Previously the address of the remote endpoint was being\n    returned ([#21825]).\n\n  * The `~/.juliarc.jl` file has been moved to `~/.julia/config/startup.jl` and\n    `/etc/julia/juliarc.jl` file has been renamed to `/etc/julia/startup.jl` ([#26161]).\n\n  * Using `ARGS` within `startup.jl` files or within a .jl file loaded with `--load` will no\n    longer contain the script name as the first argument. Instead, the script name will be\n    assigned to `PROGRAM_FILE`. ([#22092])\n\n  * The format for a `ClusterManager` specifying the cookie on the command line is now\n    `--worker=<cookie>`. `--worker <cookie>` will not work as it is now an optional argument.\n\n  * The representation of `CartesianRange` has changed to a\n    tuple-of-AbstractUnitRanges; the `start` and `stop` fields are no\n    longer present. Use `first(R)` and `last(R)` to obtain\n    start/stop. ([#20974])\n\n  * The `Diagonal`, `Bidiagonal`, `Tridiagonal` and `SymTridiagonal` type definitions have\n    changed from `Diagonal{T}`, `Bidiagonal{T}`, `Tridiagonal{T}` and `SymTridiagonal{T}`\n    to `Diagonal{T,V<:AbstractVector{T}}`, `Bidiagonal{T,V<:AbstractVector{T}}`,\n    `Tridiagonal{T,V<:AbstractVector{T}}` and `SymTridiagonal{T,V<:AbstractVector{T}}`\n    respectively ([#22718], [#22925], [#23035], [#23154]).\n\n  * The immediate supertype of `BitArray` is now simply `AbstractArray`. `BitArray` is no longer\n    considered a subtype of `DenseArray` and `StridedArray` ([#25858]).\n\n  * When called with an argument that contains `NaN` elements, `findmin` and `findmax` now return the\n    first `NaN` found and its corresponding index. Previously, `NaN` elements were ignored.\n    The new behavior matches that of `min`, `max`, `minimum`, and `maximum`.\n\n  * `isapprox(x,y)` now tests `norm(x-y) <= max(atol, rtol*max(norm(x), norm(y)))`\n    rather than `norm(x-y) <= atol + ...`, and `rtol` defaults to zero\n    if an `atol > 0` is specified ([#22742]).\n\n  * Spaces are no longer allowed between `@` and the name of a macro in a macro call ([#22868]).\n\n  * Juxtaposition of a non-literal with a macro call (`x@macro`) is no longer valid syntax ([#22868]).\n\n  * On a cluster, all files are now loaded from the local file system rather than node 1 ([#22588]).\n    To load the same file everywhere from node 1, one possible alternative is to broadcast a call to `include_string`:\n    `@everywhere include_string(Main, $(read(\"filename\", String)), \"filename\")`.\n    Improving upon this API is left as an opportunity for packages.\n\n  * `randperm(n)` and `randcycle(n)` now always return a `Vector{Int}` (independent of\n    the type of `n`). Use the corresponding mutating functions `randperm!` and `randcycle!`\n    to control the array type ([#22723]).\n\n  * Hermitian now ignores any imaginary components in the diagonal instead of checking\n    the diagonal. ([#17367])\n\n  * Worker-worker connections are setup lazily for an `:all_to_all` topology. Use keyword\n    arg `lazy=false` to force all connections to be setup during a `addprocs` call. ([#22814])\n\n  * In `joinpath(a, b)` on Windows, if the drive specifications of `a` and `b` do not match,\n    `joinpath` now returns `b` instead of throwing an `ArgumentError`. `joinpath(path...)` is\n    defined to be left associative, so if any argument has a drive path which does not match\n    the drive of the join of the preceding paths, the prior ones are dropped. ([#20912])\n\n  * `^(A::AbstractMatrix{<:Integer}, p::Integer)` now throws a `DomainError`\n    if `p < 0`, unless `A == one(A)` or `A == -one(A)` (same as for\n    `^(A::Integer, p::Integer)`) ([#23366]).\n\n  * `^(A::AbstractMatrix{<:Integer}, p::Integer)` now promotes the element type in the same\n    way as `^(A::Integer, p::Integer)`. This means, for instance, that `[1 1; 0 1]^big(1)`\n    will return a `Matrix{BigInt}` instead of a `Matrix{Int}` ([#23366]).\n\n  * The element type of the input is now preserved in `unique`. Previously the element type\n    of the output was shrunk to fit the union of the type of each element in the input.\n    ([#22696])\n\n  * The `promote` function now raises an error if its arguments are of different types\n    and if attempting to convert them to a common type fails to change any of their types.\n    This avoids stack overflows in the common case of definitions like\n    `f(x, y) = f(promote(x, y)...)` ([#22801]).\n\n  * `indmin` and `indmax` have been renamed to `argmin` and `argmax`, respectively ([#25654]).\n\n  * `findmin`, `findmax`, `argmin`, and `argmax` used to always return linear indices.\n    They now return `CartesianIndex`es for all but 1-d arrays, and in general return\n    the `keys` of indexed collections (e.g. dictionaries) ([#22907]).\n\n  * The `openspecfun` library is no longer built and shipped with Julia, as it is no longer\n    used internally ([#22390]).\n\n  * All loaded packages used to have bindings in `Main` (e.g. `Main.Package`). This is no\n    longer the case; now bindings will only exist for packages brought into scope by\n    typing `using Package` or `import Package` ([#17997]).\n\n  * The rules for mixed-signedness integer arithmetic (e.g. `Int32(1) + UInt64(1)`) have been\n    simplified: if the arguments have different sizes (in bits), then the type of the larger\n    argument is used. If the arguments have the same size, the unsigned type is used ([#9292]).\n\n  * All command line arguments passed via `-e`, `-E`, and `-L` will be executed in the order\n    given on the command line ([#23665]).\n\n  * `I` now yields `UniformScaling{Bool}(true)` rather than `UniformScaling{Int64}(1)`\n    to better preserve types in operations involving `I` ([#24396]).\n\n  * The return type of `reinterpret` has changed to `ReinterpretArray`. `reinterpret` on sparse\n    arrays has been discontinued.\n\n  * `Base.find_in_path` is now `Base.find_package` or `Base.find_source_file` ([#24320]).\n\n  * `finalizer` now takes functions or pointers as its first argument, and the object being\n    finalized as its second (rather than the reverse). For the majority of use cases\n    deprecation warnings will be triggered. However, deprecation warnings will not trigger where\n    (1) the callable argument is not a subtype of `Function`; or (2) both arguments are\n    `Function`s or `Ptr{Cvoid}`s ([#24605]).\n\n  * The `kill` function now throws errors on user error (e.g. on permission\n    errors), but returns successfully if the process had previously exited.\n    Its return value has been removed. Use the `process_running` function\n    to determine if a process has already exited.\n\n  * The logging system has been redesigned - `info` and `warn` are deprecated\n    and replaced with the logging macros `@info`, `@warn`, `@debug` and\n    `@error`. The `logging` function is also deprecated and replaced with\n    `AbstractLogger` and the functions from the new standard `Logging` library.\n    ([#24490])\n\n  * The `RevString` type has been removed from the language; `reverse(::String)` returns\n    a `String` with code points (or fragments thereof) in reverse order. In general,\n    `reverse(s)` should return a string of the same type and encoding as `s` with code\n    points in reverse order; any string type overrides `reverse` to return a different\n    type of string must also override `reverseind` to compute reversed indices correctly.\n\n  * `eachindex(A, B...)` now requires that all inputs have the same number of elements.\n    When the chosen indexing is Cartesian, they must have the same axes.\n\n  * `AbstractRange` objects are now considered as equal to other `AbstractArray` objects\n    by `==` and `isequal` if all of their elements are equal ([#16401]).\n    This has required changing the hashing algorithm: ranges now use an O(N) fallback\n    instead of a O(1) specialized method unless they define the `Base.RangeStepStyle`\n    trait; see its documentation for details. Types which support subtraction (operator\n    `-`) must now implement `widen` for hashing to work inside heterogeneous arrays.\n\n  * `findn(x::AbstractArray)` has been deprecated in favor of `findall(!iszero, x)`, which\n    now returns cartesian indices for multidimensional arrays (see below, [#25532]).\n\n  * Broadcasting operations are no longer fused into a single operation by Julia's parser.\n    Instead, a lazy `Broadcasted` object is created to represent the fused expression and\n    then realized with `copy(bc::Broadcasted)` or `copyto!(dest, bc::Broadcasted)`\n    to evaluate the wrapper. Consequently, package authors generally need to specialize\n    `copy` and `copyto!` methods rather than `broadcast` and `broadcast!`. This also allows\n    for more customization and control of fused broadcasts. See the\n    [Interfaces chapter](https://docs.julialang.org/en/v1/manual/interfaces/#man-interfaces-broadcasting-1)\n    for more information.\n\n  * `find` has been renamed to `findall`. `findall`, `findfirst`, `findlast`, `findnext`\n    now take and/or return the same type of indices as `keys`/`pairs` for `AbstractArray`,\n    `AbstractDict`, `AbstractString`, `Tuple` and `NamedTuple` objects ([#24774], [#25545]).\n    In particular, this means that they use `CartesianIndex` objects for matrices\n    and higher-dimensional arrays instead of linear indices as was previously the case.\n    Use `LinearIndices(a)[findall(f, a)]` and similar constructs to compute linear indices.\n\n  * The `find*` functions, i.e. `findnext`, `findprev`, `findfirst`,\n    and `findlast`, as well as `indexin`, now return `nothing` when no match is found rather\n    than `0` or `0:-1` ([#25472], [#25662], [#26149])\n\n  * The `Base.HasShape` iterator trait has gained a type parameter `N` indicating the\n    number of dimensions, which must correspond to the length of the tuple returned by\n    `size` ([#25655]).\n\n * `AbstractSet` objects are now considered equal by `==` and `isequal` if all of their\n    elements are equal ([#25368]). This has required changing the hashing algorithm\n    for `BitSet`.\n\n  * the default behavior of `titlecase` is changed in two ways ([#23393]):\n    + characters not starting a word are converted to lowercase;\n      a new keyword argument `strict` is added which\n      allows to get the old behavior when it's `false`.\n    + any non-letter character is considered as a word separator;\n      to get the old behavior (only \"space\" characters are considered as\n      word separators), use the keyword `wordsep=isspace`.\n\n  * `writedlm` in the standard library module DelimitedFiles now writes numeric values\n    using `print` rather than `print_shortest` ([#25745]).\n\n  * The `tempname` function used to create a file on Windows but not on other\n    platforms. It now never creates a file ([#9053]).\n\n  * The `fieldnames` and `propertynames` functions now return a tuple rather than\n    an array ([#25725]).\n\n  * `indexin` now returns the first rather than the last matching index ([#25998]).\n\n  * `parse(::Type, ::Char)` now uses a default base of 10, like other number parsing\n    methods, instead of 36 ([#26576]).\n\n  * `isequal` for `Ptr`s now compares element types; `==` still compares only addresses\n    ([#26858]).\n\n  * `widen` on 8- and 16-bit integer types now widens to 16- and 32-bit types, respectively. ([#28045]).\n\n  * `mv`,`cp`, `touch`, `mkdir`, `mkpath`, `chmod` and `chown` now return the path that was created/modified\n    rather than `nothing` ([#27071]).\n\n  * Regular expressions now default to UCP mode. Escape sequences such as `\\w`\n    will now match based on unicode character properties, e.g. `r\"\\w+\"` will\n    match `café` (not just `caf`). Add the `a` modifier (e.g. `r\"\\w+\"a`) to\n    restore the previous behavior ([#27189]).\n\n  * `@sync` now waits only for *lexically* enclosed (i.e. visible directly in the source\n    text of its argument) `@async` expressions. If you need to wait for a task created by\n    a called function `f`, have `f` return the task and put `@async wait(f(...))` within\n    the `@sync` block.\n    This change makes `@schedule` redundant with `@async`, so `@schedule` has been\n    deprecated ([#27164]).\n\n  * `norm(A::AbstractMatrix, p=2)` computes no longer the operator/matrix norm but the `norm` of `A`\n    as for other iterables, i.e. as if it were a vector. Especially, `norm(A::AbstractMatrix)` is the\n    Frobenius norm. To compute the operator/matrix norm, use the new function `opnorm` ([#27401]).\n\n  * `dot(u, v)` now acts recursively. Instead of `sum(u[i]' * v[i] for i in ...)`, it computes\n    `sum(dot(u[i], v[i]) for i in ...)`, similarly to `vecdot` before ([#27401]).\n\n  * `Sys.CPU_CORES` has been renamed to `Sys.CPU_THREADS`; it still gives the number\n    of \"logical cores\" (including hyperthreading) rather than the number of physical\n    cores present on the CPU. Similarly, the environment variable `JULIA_CPU_CORES` is\n    deprecated in favor of `JULIA_CPU_THREADS` ([#27856]).\n\n  * `WeakKeyDict` does not convert keys on insertion anymore (#24941).\n\nLibrary improvements\n--------------------\n\n  * The function `thisind(s::AbstractString, i::Integer)` returns the largest valid index\n    less or equal than `i` in the string `s` or `0` if no such index exists ([#24414]).\n\n  * Support for Unicode 11 ([#28266]).\n\n  * `Char` is now a subtype of `AbstractChar`, and most of the functions that\n    take character arguments now accept any `AbstractChar` ([#26286]).\n\n  * `pathof(module)` returns the path a module was imported from ([#28310]).\n\n  * `bytes2hex` now accepts an optional `io` argument to output to a hexadecimal stream\n    without allocating a `String` first ([#27121]).\n\n  * `String(array)` now accepts an arbitrary `AbstractVector{UInt8}`. For `Vector`\n    inputs, it \"steals\" the memory buffer, leaving them with an empty buffer which\n    is guaranteed not to be shared with the `String` object. For other types of vectors\n    (in particular immutable vectors), a copy is made and the input is not truncated ([#26093]).\n\n  * `Irrational` is now a subtype of `AbstractIrrational` ([#24245]).\n\n  * Introduced the `empty` function, the functional pair to `empty!` which returns a new,\n    empty container ([#24390]).\n\n  * Jump to first/last history entries in the REPL via \"Alt-<\" and \"Alt->\" ([#22829]).\n\n  * REPL LaTeX-like tab completions have been simplified for several Unicode characters,\n    e.g. `𝔸` is now `\\bbA` rather than `\\BbbA` ([#25980]).\n\n  * The function `chop` now accepts two arguments `head` and `tail` allowing to specify\n    number of characters to remove from the head and tail of the string ([#24126]).\n\n  * `get(io, :color, false)` can now be used to query whether a stream `io` supports\n    [ANSI color codes](https://en.wikipedia.org/wiki/ANSI_escape_code) ([#25067]),\n    rather than using the undocumented `Base.have_color` global flag.\n\n  * `print_with_color` has been deprecated in favor of\n    `printstyled([io], xs...; bold=false, color=:normal)` for printing styled text ([#25522]).\n\n  * Functions `first` and `last` now accept `nchar` argument for `AbstractString`.\n    If this argument is used they return a string consisting of first/last `nchar`\n    characters from the original string ([#23960]).\n\n  * Expressions `x^-n` where `n` is an *integer literal* now correspond to `inv(x)^n`.\n    For example, `x^-1` is now essentially a synonym for `inv(x)`, and works\n    in a type-stable way even if `typeof(x) != typeof(inv(x))` ([#24240]).\n\n  * New `Iterators.reverse(itr)` for reverse-order iteration ([#24187]). Iterator\n    types `T` can implement `start` etc. for `Iterators.Reverse{T}` to support this.\n\n  * The functions `nextind` and `prevind` now accept `nchar` argument that indicates\n    the number of characters to move ([#23805]).\n\n  * The functions `strip`, `lstrip` and `rstrip` now return `SubString` ([#22496]).\n\n  * The functions `strwidth` and `charwidth` have been merged into `textwidth`([#20816]).\n\n  * The functions `base` and `digits` digits now accept a negative\n    base (like `ndigits` did) ([#21692]).\n\n  * The function `randn` now accepts complex arguments (`Complex{T <: AbstractFloat}`)\n    ([#21973]).\n\n  * `parse(Complex{T}, string)` can parse complex numbers in some common formats ([#24713]).\n\n  * The function `rand` can now pick up random elements from strings, associatives\n    and sets ([#22228], [#21960], [#18155], [#22224]).\n\n  * It's now possible to specify the characters to pick from in the `randstring` function ([#22222]).\n\n  * Allow multidimensional arrays in `shuffle` and `shuffle!` functions ([#22226]).\n\n  * Method lists are now printed as a numbered list. In addition, the source code of a\n    method can be opened in an editor by entering the corresponding number in the REPL\n    and pressing `^Q` ([#22007]).\n\n  * `getpeername` on a `TCPSocket` returns the address and port of the remote\n    endpoint of the TCP connection ([#21825]).\n\n  * `resize!` and `sizehint!` methods no longer over-reserve memory when the\n    requested array size is more than double of its current size ([#22038]).\n\n  * The `crc32c` function for CRC-32c checksums is now exported ([#22274]).\n\n  * `eye(::Type{Diagonal{T}}, m::Integer)` has been deprecated in favor of\n    `Diagonal{T}(I, m)` ([#24415]).\n\n  * The output of `versioninfo` is now controlled with keyword arguments ([#21974]).\n\n  * The function `LibGit2.set_remote_url` now always sets both the fetch and push URLs for a\n    git repo. Additionally, the argument order was changed to be consistent with the git\n    command line tool ([#22062]).\n\n  * Added `unique!` which is an inplace version of `unique` ([#20549]).\n\n  * `@test isequal(x, y)` and `@test isapprox(x, y)` now prints an evaluated expression when\n    the test fails ([#22296]).\n\n  * Uses of `Val{c}` in `Base` has been replaced with `Val{c}()`, which is now easily\n    accessible via the efficient constructor `Val(c)`. Functions are defined as\n    `f(::Val{c}) = ...` and called by `f(Val(c))`. Notable affected functions include:\n    `ntuple`, `Base.literal_pow`, `sqrtm`, `lufact`, `lufact!`, `qrfact`, `qrfact!`,\n    `cholfact`, `cholfact!`, `_broadcast!`, `reshape`, `cat` and `cat_t`.\n\n  * A new `@macroexpand1` macro for non recursive macro expansion ([#21662]).\n\n  * `Char`s can now be concatenated with `String`s and/or other `Char`s using `*` ([#22532]).\n\n  * `Diagonal`, `Bidiagonal`, `Tridiagonal` and `SymTridiagonal` are now parameterized on\n    the type of the wrapped vectors, allowing `Diagonal`, `Bidiagonal`, `Tridiagonal` and\n    `SymTridiagonal` matrices with arbitrary `AbstractVector`s\n    ([#22718], [#22925], [#23035], [#23154]).\n\n  * Mutating versions of `randperm` and `randcycle` have been added:\n    `randperm!` and `randcycle!` ([#22723]).\n\n  * `BigFloat` random numbers can now be generated ([#22720]).\n\n  * The efficiency of random generation for MersenneTwister RNGs has been improved for\n    integers, `Float64` and ranges; as a result, given a seed, the produced stream of numbers\n    has changed ([#27560], [#25277], [#25197], [#25058], [#25047]).\n\n  * REPL Undo via Ctrl-/ and Ctrl-_\n\n  * `diagm` now accepts several diagonal index/vector `Pair`s ([#24047]).\n\n  * `isequal`, `==`, and `in` have one argument \"curried\" forms. For example `isequal(x)`\n    returns a function that compares its argument to `x` using `isequal` ([#26436]).\n\n  * `reinterpret` now works on any AbstractArray using the new `ReinterpretArray` type.\n    This supersedes the old behavior of reinterpret on Arrays. As a result, reinterpreting\n    arrays with different alignment requirements (removed in 0.6) is once again allowed ([#23750]).\n\n  * The `keys` of an `Associative` are now an `AbstractSet`. `Base.KeyIterator{<:Associative}`\n    has been changed to `KeySet{K, <:Associative{K}} <: AbstractSet{K}` ([#24580]).\n\n  * New function `ncodeunits(s::AbstractString)` gives the number of code units in a string.\n    The generic definition is constant time but calls `lastindex(s)` which may be inefficient.\n    Therefore custom string types may want to define direct `ncodeunits` methods.\n\n  * `reverseind(s::AbstractString, i::Integer)` now has an efficient generic fallback, so\n    custom string types do not need to provide their own efficient definitions. The generic\n    definition relies on `ncodeunits` however, so for optimal performance you may need to\n    define a custom method for that function.\n\n  * The global RNG is being re-seeded with its own seed at the beginning of each `@testset`,\n    and have its original state restored at the end ([#24445]). This is breaking for testsets\n    relying implicitly on the global RNG being in a specific state.\n\n  * `permutedims(m::AbstractMatrix)` is now short for `permutedims(m, (2,1))`, and is now a\n    more convenient way of making a \"shallow transpose\" of a 2D array. This is the\n    recommended approach for manipulating arrays of data, rather than the recursively\n    defined, linear-algebra function `transpose`. Similarly,\n    `permutedims(v::AbstractVector)` will create a row matrix ([#24839]).\n\n  * A new `replace(A, old=>new)` function is introduced to replace `old` by `new` in\n    collection `A`. There is also another method with a different API, and\n    a mutating variant, `replace!` ([#22324], [#25697], [#26206], [#27944]).\n\n  * Adding integers to `CartesianIndex` objects is now deprecated. Instead of\n    `i::Int + x::CartesianIndex`, use `i*one(x) + x` ([#26284]).\n\n  * `CartesianRange` changes ([#24715]):\n    - Inherits from `AbstractArray`, and linear indexing can be used to provide\n      linear-to-cartesian conversion ([#24715])\n    - It has a new constructor taking an array\n\n  * several missing set-like operations have been added ([#23528]):\n    `union`, `intersect`, `symdiff`, `setdiff` are now implemented for\n    all collections with arbitrary many arguments, as well as the\n    mutating counterparts (`union!` etc.). The performance is also\n    much better in many cases. Note that this change is slightly\n    breaking: all the non-mutating functions always return a new\n    object even if only one argument is passed. Moreover the semantics\n    of `intersect` and `symdiff` is changed for vectors:\n    + `intersect` doesn't preserve the multiplicity anymore (use `filter` for\n      the old behavior)\n    + `symdiff` has been made consistent with the corresponding methods for\n      other containers, by taking the multiplicity of the arguments into account.\n      Use `unique` to get the old behavior.\n\n  * The `linearindices` function has been deprecated in favor of the new\n    `LinearIndices` type, which additionally provides conversion from\n    cartesian indices to linear indices using the normal indexing operation.\n    ([#24715], [#26775]).\n\n  * `IdDict{K,V}` replaces `ObjectIdDict`. It has type parameters\n    like other `AbstractDict` subtypes and its constructors mirror the\n    ones of `Dict`. ([#25210])\n\n  * `IOBuffer` can take the `sizehint` keyword argument to suggest a capacity of\n    the buffer ([#25944]).\n\n  * `lstrip` and `rstrip` now accept a predicate function that defaults to `isspace`\n    ([#27309]).\n\n  * `trunc`, `floor`, `ceil`, and `round` specify `digits`, `sigdigits` and `base` using\n    keyword arguments. ([#26156], [#26670])\n\n  * `Sys.which()` provides a cross-platform method to find executable files, similar to\n    the Unix `which` command. ([#26559])\n\n  * Added an optimized method of `vecdot` for taking the Frobenius inner product\n    of sparse matrices. ([#27470])\n\n  * Added an optimized method of `kron` for taking the tensor product of two\n    `Diagonal` matrices. ([27581])\n\n  * An official API for extending `rand` is now defined ([#23964], [#25002]).\n\n  * The constructor `MersenneTwister()` is re-enabled, producing a randomly initialized RNG\n    (similar to `Random.seed!(MersenneTwister(0))`) ([#21909]).\n\n  * `BitSet` can now store any `Int` (instead of only positive ones) ([#25029]).\n\n  * The initial element `v0` in `reduce(op, v0, itr)` has been replaced with an `init`\n    optional keyword argument, as in `reduce(op, itr; init=v0)`. Similarly for `foldl`,\n    `foldr`, `mapreduce`, `mapfoldl`, `mapfoldr`, `accumulate` and `accumulate!`.\n    ([#27711], [#27859])\n\nCompiler/Runtime improvements\n-----------------------------\n\n  * The inlining heuristic now models the approximate runtime cost of\n    a method (using some strongly-simplifying assumptions). Functions\n    are inlined unless their estimated runtime cost substantially\n    exceeds the cost of setting up and issuing a subroutine\n    call. ([#22210], [#22732])\n\n  * Inference recursion-detection heuristics are now more precise,\n    allowing them to be triggered less often, but being more aggressive when they\n    are triggered to drive the inference computation to a solution ([#23912]).\n\n  * Inference now propagates constants inter-procedurally, and can compute\n    various constants expressions at compile-time ([#24362]).\n\n  * The LLVM SLP Vectorizer optimization pass is now enabled at the default\n    optimization level.\n\nDeprecated or removed\n---------------------\n\n  * The `JULIA_HOME` environment variable has been renamed to `JULIA_BINDIR` and\n    `Base.JULIA_HOME` has been moved to `Sys.BINDIR` ([#20899]).\n\n  * The keyword `immutable` is fully deprecated to `struct`, and\n    `type` is fully deprecated to `mutable struct` ([#19157], [#20418]).\n\n  * `lufact`, `schurfact`, `lqfact`, `qrfact`, `ldltfact`, `svdfact`,\n    `bkfact`, `hessfact`, `eigfact`, and `cholfact` have respectively been\n    deprecated to `lu`, `schur`, `lq`, `qr`, `ldlt`, `svd`, `bunchkaufman`,\n    `hessenberg`, `eigen`, and `cholesky` ([#26997], [#27159], [#27212]).\n\n  * `lufact!`, `schurfact!`, `lqfact!`, `qrfact!`, `ldltfact!`, `svdfact!`,\n    `bkfact!`, `hessfact!`, and `eigfact!` have respectively been deprecated to\n    `lu!`, `schur!`, `lq!`, `qr!`, `ldlt!`, `svd!`, `bunchkaufman!`,\n    `hessenberg!`, and `eigen!` ([#26997], [#27159], [#27212]).\n\n  * `eig(A[, args...])` has been deprecated in favor of `eigen(A[, args...])`.\n    Whereas the former returns a tuple of arrays, the latter returns an `Eigen` object.\n    So for a direct replacement, use `(eigen(A[, args...])...,)`. But going forward,\n    consider using the direct result of `eigen(A[, args...])` instead, either\n    destructured into its components (`vals, vecs = eigen(A[, args...])`) or\n    as an `Eigen` object (`X = eigen(A[, args...])`) ([#26997], [#27159], [#27212]).\n\n  * `eig(A::AbstractMatrix, B::AbstractMatrix)` and `eig(A::Number, B::Number)`\n    have been deprecated in favor of `eigen(A, B)`. Whereas the former each return\n    a tuple of arrays, the latter returns a `GeneralizedEigen` object. So for a direct\n    replacement, use `(eigen(A, B)...,)`. But going forward, consider using the\n    direct result of `eigen(A, B)` instead, either destructured into its components\n    (`vals, vecs = eigen(A, B)`), or as a `GeneralizedEigen` object\n    (`X = eigen(A, B)`) ([#26997], [#27159], [#27212]).\n\n  * `ordschur(T::StridedMatrix{Ty}, Z::StridedMatrix{Ty}, select::Union{Vector{Bool},BitVector})`\n    and `ordschur(S::StridedMatrix{Ty}, T::StridedMatrix{Ty}, Q::StridedMatrix{Ty},\n    Z::StridedMatrix{Ty}, select::Union{Vector{Bool},BitVector})` and their respective\n    inplace versions have been deprecated.\n    Use `ordschur(schur::Schur, select::Union{Vector{Bool},BitVector})` and\n    `ordschur(gschur::GeneralizedSchur, select::Union{Vector{Bool},BitVector})` instead\n    ([#28155]).\n\n  * Indexing into multidimensional arrays with more than one index but fewer indices than there are\n    dimensions is no longer permitted when those trailing dimensions have lengths greater than 1.\n    Instead, reshape the array or add trailing indices so the dimensionality and number of indices\n    match ([#14770], [#23628]).\n\n  * The use of a positional dimension argument has largely been deprecated in favor of a\n    `dims` keyword argument. This includes the functions `sum`, `prod`, `maximum`,\n    `minimum`, `all`, `any`, `findmax`, `findmin`, `mean`, `varm`, `std`, `var`, `cov`,\n    `cor`, `median`, `mapreducedim`, `reducedim`, `sort`, `accumulate`, `accumulate!`,\n    `cumsum`, `cumsum!`, `cumprod`, `cumprod!`, `flipdim`, `dropdims`, and `cat` ([#25501], [#26660], [#27100]).\n\n  * `indices(a)` and `indices(a,d)` have been deprecated in favor of `axes(a)` and\n    `axes(a, d)` ([#25057]).\n\n  * `EnvHash` has been renamed to `EnvDict` ([#24167]).\n\n  * Uninitialized `Array` constructors of the form\n    `Array[{T,N}](shape...)` have been deprecated in favor of equivalents\n    accepting `undef` (an alias for `UndefInitializer()`) as their first argument,\n    as in `Array[{T,N}](undef, shape...)`. For example,\n    `Vector(3)` is now `Vector(undef, 3)`, `Matrix{Int}((2, 4))` is now,\n    `Matrix{Int}(undef, (2, 4))`, and `Array{Float32,3}(11, 13, 17)` is now\n    `Array{Float32,3}(undef, 11, 13, 17)` ([#24781]).\n\n  * Previously `setindex!(A, x, I...)` (and the syntax `A[I...] = x`) supported two\n    different modes of operation when supplied with a set of non-scalar indices `I`\n    (e.g., at least one index is an `AbstractArray`) depending upon the value of `x`\n    on the right hand side. If `x` is an `AbstractArray`, its _contents_ are copied\n    elementwise into the locations in `A` selected by `I` and it must have the same\n    number of elements as `I` selects locations. Otherwise, if `x` is not an\n    `AbstractArray`, then its _value_ is implicitly broadcast to all locations to\n    all locations in `A` selected by `I`. This latter behavior—implicitly broadcasting\n    \"scalar\"-like values across many locations—is now deprecated in favor of explicitly\n    using the broadcasted assignment syntax `A[I...] .= x` or `fill!(view(A, I...), x)`\n    ([#26347]).\n\n  * `broadcast_getindex(A, I...)` and `broadcast_setindex!(A, v, I...)` are deprecated in\n    favor of `getindex.((A,), I...)` and `setindex!.((A,), v, I...)`, respectively ([#27075]).\n\n  * `LinAlg.fillslots!` has been renamed `LinAlg.fillstored!` ([#25030]).\n\n  * `fill!(A::Diagonal, x)` and `fill!(A::AbstractTriangular, x)` have been deprecated\n    in favor of `Base.LinAlg.fillstored!(A, x)` ([#24413]).\n\n  * `eye` has been deprecated in favor of `I` and `Matrix` constructors. Please see the\n    deprecation warnings for replacement details ([#24438]).\n\n  * `zeros(D::Diagonal[, opts...])` has been deprecated ([#24654]).\n\n  * Using Bool values directly as indices is now deprecated and will be an error in the future. Convert\n    them to `Int` before indexing if you intend to access index `1` for `true` and `0` for `false`.\n\n  * `slicedim(A, d, i)` has been deprecated in favor of `copy(selectdim(A, d, i))`. The new\n    `selectdim` function now always returns a view into `A`; in many cases the `copy` is\n    not necessary. Previously, `slicedim` on a vector `V` over dimension `d=1` and scalar\n    index `i` would return the just selected element (unless `V` was a `BitVector`). This\n    has now been made consistent: `selectdim` now always returns a view into the original\n    array, with a zero-dimensional view in this specific case ([#26009]).\n\n  * `whos` has been renamed `varinfo`, and now returns a markdown table instead of printing\n    output ([#12131]).\n\n  * Uninitialized `RowVector` constructors of the form `RowVector{T}(shape...)` have been\n    deprecated in favor of equivalents accepting `undef` (an alias for\n    `UndefInitializer()`) as their first argument, as in\n    `RowVector{T}(undef, shape...)`. For example, `RowVector{Int}(3)` is now\n    `RowVector{Int}(undef, 3)`, and `RowVector{Float32}((1, 4))` is now\n    `RowVector{Float32}(undef, (1, 4))` ([#24786]).\n\n  * `writecsv(io, a; opts...)` has been deprecated in favor of\n    `writedlm(io, a, ','; opts...)` ([#23529]).\n\n  * The method `srand(rng, filename, n=4)` has been deprecated ([#21359]).\n\n  * `readcsv(io[, T::Type]; opts...)` has been deprecated in favor of\n    `readdlm(io, ','[, T]; opts...)` ([#23530]).\n\n  * `sparse(s::UniformScaling, m::Integer)` has been deprecated in favor of the\n    three-argument equivalent `sparse(s::UniformScaling, m, n)` ([#24472]).\n\n  * The `cholfact`/`cholfact!` methods that accepted an `uplo` symbol have been deprecated\n    in favor of using `Hermitian` (or `Symmetric`) views ([#22187], [#22188]).\n\n  * The `thin` keyword argument for orthogonal decomposition methods has\n    been deprecated in favor of `full`, which has the opposite meaning:\n    `thin == true` if and only if `full == false` ([#24279]).\n\n  * `isposdef(A::AbstractMatrix, UL::Symbol)` and `isposdef!(A::AbstractMatrix, UL::Symbol)`\n    have been deprecated in favor of `isposdef(Hermitian(A, UL))` and `isposdef!(Hermitian(A, UL))`\n    respectively ([#22245]).\n\n  * The `bkfact`/`bkfact!` methods that accepted `uplo` and `issymmetric` symbols have been deprecated\n    in favor of using `Hermitian` (or `Symmetric`) views ([#22605]).\n\n  * The function `current_module` is deprecated and replaced with `@__MODULE__`.\n    This caused the deprecation of some reflection methods (such as `macroexpand` and\n    `isconst`), which now require a module argument. And it caused the bugfix of other\n    default arguments to use the Main module (including `whos`, `which`)  ([#22064]).\n\n  * `expand(ex)` and `expand(module, ex)` have been deprecated in favor of\n    `Meta.lower(module, ex)` ([#22064], [#24278]).\n\n  * `ones(A::AbstractArray[, opts...])` and `zeros(A::AbstractArray[, opts...])` methods\n    have been deprecated. For `zeros(A)`, consider `zero(A)`. For `ones(A)` or `zeros(A)`,\n    consider `ones(size(A))`, `zeros(size(A))`, `fill(v, size(A))` for `v` an appropriate\n    one or zero, `fill!(copy(A), {1|0})`, `fill!(similar(A), {1|0})`, or any of the preceding\n    with different element type and/or shape depending on `opts...`. Where strictly\n    necessary, consider `fill!(similar(A[, opts...]), {one(eltype(A)) | zero(eltype(A))})`.\n    For an algebraic multiplicative identity, consider `one(A)` ([#24656]).\n\n  * The `similar(dims->f(..., dims...), [T], axes...)` method to add offset array support\n    to a function `f` that would otherwise create a non-offset array has been deprecated.\n    Instead, call `f(..., axes...)` directly and, if needed, the offset array implementation\n    should add offset axis support to the function `f` directly ([#26733]).\n\n  * The functions `ones` and `zeros` used to accept any objects as dimensional arguments,\n    implicitly converting them to `Int`s. This is now deprecated; only `Integer`s or\n    `AbstractUnitRange`s are accepted as arguments. Instead, convert the arguments before\n    calling `ones` or `zeros` ([#26733]).\n\n  * The variadic `size(A, dim1, dim2, dims...)` method to return a tuple of multiple\n    dimension lengths of `A` has been deprecated ([#26862]).\n\n  * The `Operators` module is deprecated. Instead, import required operators explicitly\n    from `Base`, e.g. `import Base: +, -, *, /` ([#22251]).\n\n  * Bindings to the FFTW library have been removed from Base. The DFT framework for building FFT\n    implementations is now in AbstractFFTs.jl, the bindings to the FFTW library are in FFTW.jl,\n    and the Base signal processing functions which used FFTs are now in DSP.jl ([#21956]).\n\n  * The `corrected` positional argument to `cov` has been deprecated in favor of\n    a keyword argument with the same name ([#21709]).\n\n  * Omitting spaces around the `?` and the `:` tokens in a ternary expression has been deprecated.\n    Ternaries must now include some amount of whitespace, e.g. `x ? a : b` rather than\n    `x?a:b` ([#22523] and [#22712]).\n\n  * `?` can no longer be used as an identifier name ([#22712])\n\n  * The method `replace(s::AbstractString, pat, r, [count])` is deprecated\n    in favor of `replace(s::AbstractString, pat => r; [count])` ([#25165]).\n    Moreover, `count` cannot be negative anymore (use `typemax(Int)` instead ([#22325]).\n\n  * `read(io, type, dims)` is deprecated to `read!(io, Array{type}(undef, dims))` ([#21450]).\n\n  * `read(::IO, ::Ref)` is now a method of `read!`, since it mutates its `Ref` argument ([#21592]).\n\n  * `nb_available` is now `bytesavailable` ([#25634]).\n\n  * `skipchars(io::IO, predicate; linecomment=nothing)` is deprecated in favor of\n    `skipchars(predicate, io::IO; linecomment=nothing)` ([#25667]).\n\n  * `Bidiagonal` constructors now use a `Symbol` (`:U` or `:L`) for the upper/lower\n    argument, instead of a `Bool` or a `Char` ([#22703]).\n\n  * `Bidiagonal`, `Tridiagonal` and `SymTridiagonal` constructors that automatically\n    converted the input vectors to the same type are deprecated in favor of explicit\n    conversion ([#22925], [#23035], [#23154].\n\n  * Calling `nfields` on a type to find out how many fields its instances have is deprecated.\n    Use `fieldcount` instead. Use `nfields` only to get the number of fields in a specific object ([#22350]).\n\n  * `fieldnames` now operates only on types. To get the names of fields in an object, use\n    `fieldnames(typeof(x))` ([#22350]).\n\n  * `InexactError`, `DomainError`, and `OverflowError` now take\n    arguments. `InexactError(func::Symbol, type, -3)` now prints as\n    \"ERROR: InexactError: func(type, -3)\", `DomainError(val,\n    [msg])` prints as \"ERROR: DomainError with val:\\nmsg\",\n    and `OverflowError(msg)` prints as \"ERROR: OverflowError: msg\".\n    ([#20005], [#22751], [#22761])\n\n  * The operating system identification functions: `is_linux`, `is_bsd`, `is_apple`, `is_unix`,\n    and `is_windows`, have been deprecated in favor of `Sys.islinux`, `Sys.isbsd`, `Sys.isapple`,\n    `Sys.isunix`, and `Sys.iswindows`, respectively ([#22182]).\n\n  * The forms of `read`, `readstring`, and `eachline` that accepted both a `Cmd` object and an\n    input stream are deprecated. Use e.g. `read(pipeline(stdin, cmd))` instead ([#22762]).\n\n  * The unexported type `AbstractIOBuffer` has been renamed to `GenericIOBuffer` ([#17360] [#22796]).\n\n  * `IOBuffer(data::AbstractVector{UInt8}, read::Bool, write::Bool, maxsize::Integer)`,\n    `IOBuffer(read::Bool, write::Bool)`, and `IOBuffer(maxsize::Integer)` are\n    deprecated in favor of constructors taking keyword arguments ([#25872]).\n\n  * `Display` has been renamed to `AbstractDisplay` ([#24831]).\n\n  * Remaining vectorized methods over `SparseVector`s, particularly `floor`, `ceil`,\n    `trunc`, `round`, and most common transcendental functions such as `exp`, `log`, and\n    `sin` variants, have been deprecated in favor of dot-syntax ([#22961]).\n\n  * The method `String(io::IOBuffer)` is deprecated to `String(take!(copy(io)))` ([#21438]).\n\n  * The function `readstring` is deprecated in favor of `read(io, String)` ([#22793])\n\n  * The function `showall` is deprecated. Showing entire values is the default, unless an\n    `IOContext` specifying `:limit=>true` is in use ([#22847]).\n\n  * `issubtype` has been deprecated in favor of `<:` (which used to be an alias for `issubtype`).\n\n  * Calling `write` on non-isbits arrays is deprecated in favor of explicit loops or\n    `serialize` ([#6466]).\n\n  * The default `startup.jl` file on Windows has been removed. Now must explicitly include the\n    full path if you need access to executables or libraries in the `Sys.BINDIR` directory, e.g.\n    `joinpath(Sys.BINDIR, \"7z.exe\")` for `7z.exe` ([#21540]).\n\n  * `sqrtm` has been deprecated in favor of `sqrt` ([#23504]).\n\n  * `expm` has been deprecated in favor of `exp` ([#23233]).\n\n  * `logm` has been deprecated in favor of `log` ([#23505]).\n\n  * `full` has been deprecated in favor of more specific, better defined alternatives.\n    On structured matrices `A`, consider instead `Matrix(A)`, `Array(A)`,\n    `SparseMatrixCSC(A)`, or `sparse(A)`. On sparse arrays `S`, consider instead\n    `Vector(S)`, `Matrix(S)`, or `Array(S)` as appropriate. On factorizations `F`,\n    consider instead `Matrix(F)`, `Array(F)`, `AbstractMatrix(F)`, or `AbstractArray(F)`.\n    On implicit orthogonal factors `Q`, consider instead `Matrix(Q)` or `Array(Q)`; for\n    implicit orthogonal factors that can be recovered in square or truncated form,\n    see the deprecation message for square recovery instructions. On `Symmetric`,\n    `Hermitian`, or `AbstractTriangular` matrices `A`, consider instead `Matrix(S)`,\n    `Array(S)`, `SparseMatrixCSC(S)`, or `sparse(S)`. On `Symmetric` matrices `A`\n    particularly, consider instead `LinAlg.copytri!(copy(parent(A)), A.uplo)`. On\n    `Hermitian` matrices `A` particularly, consider instead\n    `LinAlg.copytri!(copy(parent(A)), A.uplo, true)`. On `UpperTriangular` matrices `A`\n    particularly, consider instead `triu!(copy(parent(A)))`. On `LowerTriangular` matrices\n    `A` particularly, consider instead `tril!(copy(parent(A)))` ([#24250]).\n\n  * `speye` has been deprecated in favor of `I`, `sparse`, and `SparseMatrixCSC`\n    constructor methods ([#24356]).\n\n  * Calling `union` with no arguments is deprecated; construct an empty set with an appropriate\n    element type using `Set{T}()` instead ([#23144]).\n\n  * Vectorized `DateTime`, `Date`, and `format` methods have been deprecated in favor of\n    dot-syntax ([#23207]).\n\n  * `Base.cpad` has been removed; use an appropriate combination of `rpad` and `lpad`\n    instead ([#23187]).\n\n  * `ctranspose` and `ctranspose!` have been deprecated in favor of `adjoint` and `adjoint!`,\n    respectively ([#23235]).\n\n  * `filter` and `filter!` on dictionaries now pass a single `key=>value` pair to the\n    argument function, instead of two arguments ([#17886]).\n\n  * `rol`, `rol!`, `ror`, and `ror!` have been deprecated in favor of specialized methods for\n    `circshift`/`circshift!` ([#23404]).\n\n  * `Base.SparseArrays.SpDiagIterator` has been removed ([#23261]).\n\n  * The function `cfunction`, has been deprecated in favor of a macro form `@cfunction`.\n    Most existing uses can be upgraded simply by adding a `@`.\n    The new syntax now additionally supports allocating closures at runtime,\n    for dealing with C APIs that don't provide a separate `void* env`-type callback\n    argument. ([#26486])\n\n  * `diagm(v::AbstractVector, k::Integer=0)` has been deprecated in favor of\n    `diagm(k => v)` ([#24047]).\n\n  * `diagm(x::Number)` has been deprecated in favor of `fill(x, 1, 1)` ([#24047]).\n\n  * `diagm(A::SparseMatrixCSC)` has been deprecated in favor of\n    `spdiagm(sparsevec(A))` ([#23341]).\n\n  * `diagm(A::BitMatrix)` has been deprecated, use `diagm(0 => vec(A))` or\n    `BitMatrix(Diagonal(vec(A)))` instead ([#23373], [#24047]).\n\n  * `ℯ` (written as `\\mscre<TAB>` or `\\euler<TAB>`) is now the only (by default) exported\n    name for Euler's number, and the type has changed from `Irrational{:e}` to\n    `Irrational{:ℯ}` ([#23427]).\n\n  * The mathematical constants `π`, `pi`, `ℯ`, `e`, `γ`, `eulergamma`, `catalan`, `φ` and\n    `golden` have been moved from `Base` to a new module; `Base.MathConstants`.\n    Only `π`, `pi` and `ℯ` are now exported by default from `Base` ([#23427]).\n\n  * `eu` (previously an alias for `ℯ`) has been deprecated in favor of `ℯ` (or `MathConstants.e`) ([#23427]).\n\n  * `GMP.gmp_version()`, `GMP.GMP_VERSION`, `GMP.gmp_bits_per_limb()`, and `GMP.GMP_BITS_PER_LIMB`\n    have been renamed to `GMP.version()`, `GMP.VERSION`, `GMP.bits_per_limb()`, and `GMP.BITS_PER_LIMB`,\n    respectively. Similarly, `MPFR.get_version()`, has been renamed to `MPFR.version()` ([#23323]). Also,\n    `LinAlg.LAPACK.laver()` has been renamed to `LinAlg.LAPACK.version()` and now returns a `VersionNumber`.\n\n  * `select`, `select!`, `selectperm` and `selectperm!` have been renamed respectively to\n    `partialsort`, `partialsort!`, `partialsortperm` and `partialsortperm!` ([#23051]).\n\n  * The `Range` abstract type has been renamed to `AbstractRange` ([#23570]).\n\n  * `map` on dictionaries previously operated on `key=>value` pairs. This behavior is deprecated,\n    and in the future `map` will operate only on values ([#5794]).\n\n  * `map` on sets previously returned a `Set`, possibly changing the order or number of elements. This\n    behavior is deprecated and in the future `map` will preserve order and number of elements ([#26980]).\n\n  * Previously, broadcast defaulted to treating its arguments as scalars if they were not\n    arrays. This behavior is deprecated, and in the future `broadcast` will default to\n    iterating over all its arguments. Wrap arguments you wish to be treated as scalars with\n    `Ref()` or a 1-tuple. Package developers can choose to allow a non-iterable type `T` to\n    always behave as a scalar by implementing `broadcastable(x::T) = Ref(x)` ([#26212]).\n\n  * Automatically broadcasted `+` and `-` for `array + scalar`, `scalar - array`, and so-on have\n    been deprecated due to inconsistency with linear algebra. Use `.+` and `.-` for these operations\n    instead ([#22880], [#22932]).\n\n  * `flipbits!(B)` is deprecated in favor of using in-place broadcast to negate each element:\n    `B .= .!B` ([#27067]).\n\n  * `isleaftype` is deprecated in favor of the simpler predicates `isconcretetype` and `isdispatchtuple`.\n    Concrete types are those that might equal `typeof(x)` for some `x`;\n    `isleaftype` included some types for which this is not true. Those are now categorized more precisely\n    as \"dispatch tuple types\" and \"!has_free_typevars\" (not exported). ([#17086], [#25496])\n\n  * `contains(eq, itr, item)` is deprecated in favor of `any` with a predicate ([#23716]).\n\n  * `spdiagm(x::AbstractVector)` has been deprecated in favor of `sparse(Diagonal(x))`\n    alternatively `spdiagm(0 => x)` ([#23757]).\n\n  * `spdiagm(x::AbstractVector, d::Integer)` and `spdiagm(x::Tuple{<:AbstractVector}, d::Tuple{<:Integer})`\n    have been deprecated in favor of `spdiagm(d => x)` and `spdiagm(d[1] => x[1], d[2] => x[2], ...)`\n    respectively. The new `spdiagm` implementation now always returns a square matrix ([#23757]).\n\n  * `spones(A::AbstractSparseArray)` has been deprecated in favor of\n    `LinAlg.fillstored!(copy(A), 1)` ([#25037]).\n\n  * Constructors for `LibGit2.UserPasswordCredentials` and `LibGit2.SSHCredentials` which take a\n    `prompt_if_incorrect` argument are deprecated. Instead, prompting behavior is controlled using\n    the `allow_prompt` keyword in the `LibGit2.CredentialPayload` constructor ([#23690]).\n\n  * `gradient` is deprecated and will be removed in the next release ([#23816]).\n\n  * The timing functions `tic`, `toc`, and `toq` are deprecated in favor of `@time` and `@elapsed`\n    ([#17046]).\n\n  * Methods of `findfirst`, `findnext`, `findlast`, and `findprev` that accept a value to\n    search for are deprecated in favor of passing a predicate ([#19186], [#10593]).\n\n  * `find` functions now operate only on booleans by default. To look for non-zeros, use\n    `x->x!=0` or `!iszero` ([#23120]).\n\n  * The ability of `reinterpret` to yield `Array`s of different type than the underlying storage\n    has been removed. The `reinterpret` function is still available, but now returns a\n    `ReinterpretArray`. The three argument form of `reinterpret` that implicitly reshapes\n    has been deprecated ([#23750]).\n\n  * `bits` has been deprecated in favor of `bitstring` ([#24281], [#24263]).\n\n  * `num2hex` and `hex2num` have been deprecated in favor of `reinterpret` combined with `parse`/`hex` ([#22088]).\n\n  * `copy!` is deprecated for `AbstractSet` and `AbstractDict`, with the intention to re-enable\n    it with a cleaner meaning in a future version ([#24844]).\n\n  * `copy!` (resp. `unsafe_copy!`) is deprecated for `AbstractArray` and is renamed `copyto!`\n    (resp. `unsafe_copyto!`); it will be re-introduced with a different meaning in a future\n    version ([#24808]).\n\n  * `a:b` is deprecated for constructing a `StepRange` when `a` and `b` have physical units\n    (Dates and Times). Use `a:s:b`, where `s = Dates.Day(1)` or `s = Dates.Second(1)`.\n\n  * `trues(A::AbstractArray)` and `falses(A::AbstractArray)` are deprecated in favor of\n    `trues(size(A))` and `falses(size(A))` respectively ([#24595]).\n\n  * `workspace` is discontinued, check out [Revise.jl](https://github.com/timholy/Revise.jl)\n    for an alternative workflow ([#25046]).\n\n  * `cumsum`, `cumprod`, `accumulate`, their mutating versions, and `diff` all now require a `dim`\n    argument instead of defaulting to using the first dimension unless there is only\n    one dimension ([#24684], [#25457]).\n\n  * The `sum_kbn` and `cumsum_kbn` functions have been moved to the\n    [KahanSummation](https://github.com/JuliaMath/KahanSummation.jl) package ([#24869]).\n\n  * `isnumber` has been renamed to `isnumeric` ([#25021]).\n\n  * `isalpha` has been renamed to `isletter` ([#26932]).\n\n  * `is_assigned_char` and `normalize_string` have been renamed to `isassigned` and\n    `normalize`, and moved to the new `Unicode` standard library module.\n    `graphemes` has also been moved to that module ([#25021]).\n\n  * Sparse array functionality has moved to the `SparseArrays` standard library module ([#25249]).\n\n  * Linear algebra functionality, and specifically the `LinAlg` module has moved to the\n    `LinearAlgebra` standard library module ([#25571]).\n\n  * `@printf` and `@sprintf` have been moved to the `Printf` standard library ([#23929],[#25056]).\n\n  * The `Libdl` module has moved to the `Libdl` standard library module ([#25459]).\n\n  * The aliases `Complex32`, `Complex64` and `Complex128` have been deprecated in favor of `ComplexF16`,\n    `ComplexF32` and `ComplexF64` respectively ([#24647]).\n\n  * `Base.parentindexes` and `SharedArrays.localindexes` have been renamed to `parentindices`\n    and `localindices`, respectively. Similarly, the `indexes` field in the `SubArray` type\n    has been renamed to `indices` without deprecation ([#25088]).\n\n  * `Associative` has been deprecated in favor of `AbstractDict` ([#25012]).\n\n  * `Void` has been renamed back to `Nothing` with an alias `Cvoid` for use when calling C\n    with a return type of `Cvoid` or a return or argument type of `Ptr{Cvoid}` ([#25162]).\n\n  * `Nullable{T}` has been deprecated and moved to the Nullables package ([#23642]). Use\n    `Union{T, Nothing}` instead, or `Union{Some{T}, Nothing}` if `nothing` is a possible\n    value (i.e. `Nothing <: T`). `isnull(x)` can be replaced with `x === nothing` and\n    `unsafe_get`/`get` can be dropped or replaced with `coalesce`.\n    `NullException` has been removed.\n\n  * `unshift!` and `shift!` have been renamed to `pushfirst!` and `popfirst!` ([#23902])\n\n  * `ipermute!` has been deprecated in favor of `invpermute!` ([#25168]).\n\n  * `CartesianRange` has been renamed `CartesianIndices` ([#24715]).\n\n  * `sub2ind` and `ind2sub` are deprecated in favor of using `CartesianIndices` and `LinearIndices` ([#24715]).\n\n  * `getindex(F::Factorization, s::Symbol)` (usually seen as e.g. `F[:Q]`) is deprecated\n    in favor of dot overloading (`getproperty`) so factors should now be accessed as e.g.\n    `F.Q` instead of `F[:Q]` ([#25184]).\n\n  * `search` and `rsearch` have been deprecated in favor of `findfirst`/`findnext` and\n    `findlast`/`findprev` respectively, in combination with curried `isequal` and `in`\n    predicates for some methods ([#24673]).\n\n  * `search(buf::IOBuffer, delim::UInt8)` has been deprecated in favor of either `occursin(delim, buf)`\n    (to test containment) or `readuntil(buf, delim)` (to read data up to `delim`) ([#26600]).\n\n  * `ismatch(regex, str)` has been deprecated in favor of `occursin(regex, str)` ([#26283]).\n\n  * `matchall` has been deprecated in favor of `collect(m.match for m in eachmatch(r, s))` ([#26071]).\n\n  * `similar(::Associative)` has been deprecated in favor of `empty(::Associative)`, and\n    `similar(::Associative, ::Pair{K, V})` has been deprecated in favour of\n    `empty(::Associative, K, V)` ([#24390]).\n\n  * `findin(a, b)` has been deprecated in favor of `findall(in(b), a)` ([#24673]).\n\n  * `module_name` has been deprecated in favor of a new, general `nameof` function. Similarly,\n    the unexported `Base.function_name` and `Base.datatype_name` have been deprecated in favor\n    of `nameof` methods ([#25622]).\n\n  * The module `Random.dSFMT` is renamed `Random.DSFMT` ([#25567]).\n\n  * `Random.RandomDevice(unlimited::Bool)` (on non-Windows systems) is deprecated in favor of\n    `Random.RandomDevice(; unlimited=unlimited)` ([#25668]).\n\n  * The generic implementations of `strides(::AbstractArray)` and `stride(::AbstractArray, ::Int)`\n     have been deprecated. Subtypes of `AbstractArray` that implement the newly introduced strided\n     array interface should define their own `strides` method ([#25321]).\n\n  * `module_parent`, `Base.datatype_module`, and `Base.function_module` have been deprecated\n    in favor of `parentmodule` ([#25629]).\n\n  * `rand(t::Tuple{Vararg{Int}})` is deprecated in favor of `rand(Float64, t)` or `rand(t...)`;\n    `rand(::Tuple)` will have another meaning in the future ([#25429], [#25278]).\n\n  * `randjump`, which produced an array, is deprecated in favor of the\n    scalar version `Future.randjump` used with `accumulate` ([#27746]).\n\n  * The `assert` function (and `@assert` macro) have been documented that they are not guaranteed to run under various optimization levels and should therefore not be used to e.g. verify passwords.\n\n  * `ObjectIdDict` has been deprecated in favor of `IdDict{Any,Any}` ([#25210]).\n\n  * `gc` and `gc_enable` have been deprecated in favor of `GC.gc` and `GC.enable` ([#25616]).\n\n  * `Base.@gc_preserve` has been deprecated in favor of `GC.@preserve` ([#25616]).\n\n  * `print_shortest` has been discontinued, but is still available in the `Base.Grisu`\n    submodule ([#25745]).\n\n  * `scale!` has been deprecated in favor of `mul!`, `lmul!`, and `rmul!` ([#25701], [#25812]).\n\n  * The `remove_destination` keyword argument to `cp`, `mv`, and the unexported `cptree`\n    has been renamed to `force` ([#25979]).\n\n  * `contains` has been deprecated in favor of a more general `occursin` function, which\n    takes its arguments in reverse order from `contains` ([#26283]).\n\n  * `Regex` objects are no longer callable. Use `occursin` instead ([#26283]).\n\n  * The methods of `range` based on positional arguments have been deprecated in favor of\n    keyword arguments ([#25896]).\n\n  * `linspace` has been deprecated in favor of `range` with `stop` and `length` keyword\n    arguments ([#25896]).\n\n  * `LinSpace` has been renamed to `LinRange` ([#25896]).\n\n  * `logspace` has been deprecated to its definition ([#25896]).\n\n  * `endof(a)` has been renamed to `lastindex(a)`, and the `end` keyword in indexing expressions now\n    lowers to either `lastindex(a)` (in the case with only one index) or `lastindex(a, d)` (in cases\n    where there is more than one index and `end` appears at dimension `d`) ([#23554], [#25763]).\n\n  * `DateTime()`, `Date()`, and `Time()` have been deprecated, instead use `DateTime(1)`, `Date(1)`\n    and `Time(0)` respectively ([#23724]).\n\n  * The fallback method `^(x, p::Integer)` is deprecated. If your type relied on this definition,\n    add a method such as `^(x::MyType, p::Integer) = Base.power_by_squaring(x, p)` ([#23332]).\n\n  * `DevNull`, `STDIN`, `STDOUT`, and `STDERR` have been renamed to `devnull`, `stdin`, `stdout`,\n    and `stderr`, respectively ([#25786]).\n\n  * `wait` and `fetch` on `Task` now resemble the interface of `Future`.\n\n  * `showcompact(io, x...)` has been deprecated in favor of\n    `show(IOContext(io, :compact => true), x...)` ([#26080]).\n    Use `sprint(show, x..., context=:compact => true)` instead of `sprint(showcompact, x...)`.\n\n  * `isupper`, `islower`, `ucfirst` and `lcfirst` have been deprecated in favor of `isuppercase`,\n    `islowercase`, `uppercasefirst` and `lowercasefirst`, respectively ([#26442]).\n\n  * `signif` has been deprecated in favor of the `sigdigits` keyword argument to `round`.\n\n  * `Base.IntSet` has been deprecated in favor of `Base.BitSet` ([#24282]).\n\n  * `setrounding` has been deprecated for `Float32` and `Float64`, as the behaviour was too unreliable ([#26935]).\n\n  * `gamma`, `lgamma`, `beta`, `lbeta` and `lfact` have been moved to\n    [SpecialFunctions.jl](https://github.com/JuliaMath/SpecialFunctions.jl) ([#27459], [#27473]).\n\n  * `atan2` is now a 2-argument method of `atan` ([#27248]).\n\n  * The functions `eigs` and `svds` have been moved to the `Arpack.jl` package ([#27616]).\n\n  * `vecdot` and `vecnorm` are deprecated in favor of `dot` and `norm`, respectively ([#27401]).\n\n  * `clipboard` has been moved to the `InteractiveUtils` standard library package\n    (along with other utilities mostly used at the interactive prompt, such as `edit`\n    and `less`) ([#27635]).\n\n  * `ndigits(n, b, [pad])` is deprecated in favor of `ndigits(n, base=b, pad=pad)` ([#27908]).\n\n  * `squeeze` is deprecated in favor of `dropdims`.\n\n  * `srand` is deprecated in favor of the unexported `Random.seed!` ([#27726]).\n\n  * `realmin`/`realmax` are deprecated in favor of `floatmin`/`floatmax` ([#28302]).\n\n  * `sortrows`/`sortcols` have been deprecated in favor of the more general `sortslices`.\n\n  * `nextpow2`/`prevpow2` have been deprecated in favor of the more general `nextpow`/`prevpow` functions.\n\nCommand-line option changes\n---------------------------\n\n  * New option `--warn-overwrite={yes|no}` to control the warning for overwriting method\n    definitions. The default is `no` ([#23002]).\n\n  * New option `--banner={yes,no}` allows suppressing or forcing the printing of the\n    startup banner, overriding the default behavior (banner in REPL, no banner otherwise).\n    The `--quiet` option implies `--banner=no` even in REPL mode but can be overridden by\n    passing `--quiet` together with `--banner=yes` ([#23342]).\n\n  * The option `--precompiled` has been renamed to `--sysimage-native-code` ([#23054]).\n\n  * The option `--compilecache` has been renamed to `--compiled-modules` ([#23054]).\n\n<!--- generated by NEWS-update.jl: -->\n[#330]: https://github.com/JuliaLang/julia/issues/330\n[#1974]: https://github.com/JuliaLang/julia/issues/1974\n[#4916]: https://github.com/JuliaLang/julia/issues/4916\n[#5148]: https://github.com/JuliaLang/julia/issues/5148\n[#5794]: https://github.com/JuliaLang/julia/issues/5794\n[#6080]: https://github.com/JuliaLang/julia/issues/6080\n[#6466]: https://github.com/JuliaLang/julia/issues/6466\n[#6614]: https://github.com/JuliaLang/julia/issues/6614\n[#8000]: https://github.com/JuliaLang/julia/issues/8000\n[#8470]: https://github.com/JuliaLang/julia/issues/8470\n[#9053]: https://github.com/JuliaLang/julia/issues/9053\n[#9292]: https://github.com/JuliaLang/julia/issues/9292\n[#10593]: https://github.com/JuliaLang/julia/issues/10593\n[#11310]: https://github.com/JuliaLang/julia/issues/11310\n[#12010]: https://github.com/JuliaLang/julia/issues/12010\n[#12131]: https://github.com/JuliaLang/julia/issues/12131\n[#13079]: https://github.com/JuliaLang/julia/issues/13079\n[#14770]: https://github.com/JuliaLang/julia/issues/14770\n[#15120]: https://github.com/JuliaLang/julia/issues/15120\n[#16356]: https://github.com/JuliaLang/julia/issues/16356\n[#16401]: https://github.com/JuliaLang/julia/issues/16401\n[#16937]: https://github.com/JuliaLang/julia/issues/16937\n[#17046]: https://github.com/JuliaLang/julia/issues/17046\n[#17086]: https://github.com/JuliaLang/julia/issues/17086\n[#17240]: https://github.com/JuliaLang/julia/issues/17240\n[#17360]: https://github.com/JuliaLang/julia/issues/17360\n[#17367]: https://github.com/JuliaLang/julia/issues/17367\n[#17886]: https://github.com/JuliaLang/julia/issues/17886\n[#17997]: https://github.com/JuliaLang/julia/issues/17997\n[#18155]: https://github.com/JuliaLang/julia/issues/18155\n[#18650]: https://github.com/JuliaLang/julia/issues/18650\n[#19089]: https://github.com/JuliaLang/julia/issues/19089\n[#19157]: https://github.com/JuliaLang/julia/issues/19157\n[#19186]: https://github.com/JuliaLang/julia/issues/19186\n[#19987]: https://github.com/JuliaLang/julia/issues/19987\n[#20005]: https://github.com/JuliaLang/julia/issues/20005\n[#20418]: https://github.com/JuliaLang/julia/issues/20418\n[#20549]: https://github.com/JuliaLang/julia/issues/20549\n[#20575]: https://github.com/JuliaLang/julia/issues/20575\n[#20816]: https://github.com/JuliaLang/julia/issues/20816\n[#20899]: https://github.com/JuliaLang/julia/issues/20899\n[#20912]: https://github.com/JuliaLang/julia/issues/20912\n[#20974]: https://github.com/JuliaLang/julia/issues/20974\n[#21359]: https://github.com/JuliaLang/julia/issues/21359\n[#21438]: https://github.com/JuliaLang/julia/issues/21438\n[#21450]: https://github.com/JuliaLang/julia/issues/21450\n[#21527]: https://github.com/JuliaLang/julia/issues/21527\n[#21540]: https://github.com/JuliaLang/julia/issues/21540\n[#21592]: https://github.com/JuliaLang/julia/issues/21592\n[#21662]: https://github.com/JuliaLang/julia/issues/21662\n[#21692]: https://github.com/JuliaLang/julia/issues/21692\n[#21697]: https://github.com/JuliaLang/julia/issues/21697\n[#21709]: https://github.com/JuliaLang/julia/issues/21709\n[#21746]: https://github.com/JuliaLang/julia/issues/21746\n[#21759]: https://github.com/JuliaLang/julia/issues/21759\n[#21774]: https://github.com/JuliaLang/julia/issues/21774\n[#21825]: https://github.com/JuliaLang/julia/issues/21825\n[#21909]: https://github.com/JuliaLang/julia/issues/21909\n[#21956]: https://github.com/JuliaLang/julia/issues/21956\n[#21960]: https://github.com/JuliaLang/julia/issues/21960\n[#21973]: https://github.com/JuliaLang/julia/issues/21973\n[#21974]: https://github.com/JuliaLang/julia/issues/21974\n[#22007]: https://github.com/JuliaLang/julia/issues/22007\n[#22038]: https://github.com/JuliaLang/julia/issues/22038\n[#22062]: https://github.com/JuliaLang/julia/issues/22062\n[#22064]: https://github.com/JuliaLang/julia/issues/22064\n[#22088]: https://github.com/JuliaLang/julia/issues/22088\n[#22089]: https://github.com/JuliaLang/julia/issues/22089\n[#22092]: https://github.com/JuliaLang/julia/issues/22092\n[#22182]: https://github.com/JuliaLang/julia/issues/22182\n[#22187]: https://github.com/JuliaLang/julia/issues/22187\n[#22188]: https://github.com/JuliaLang/julia/issues/22188\n[#22194]: https://github.com/JuliaLang/julia/issues/22194\n[#22210]: https://github.com/JuliaLang/julia/issues/22210\n[#22222]: https://github.com/JuliaLang/julia/issues/22222\n[#22224]: https://github.com/JuliaLang/julia/issues/22224\n[#22226]: https://github.com/JuliaLang/julia/issues/22226\n[#22228]: https://github.com/JuliaLang/julia/issues/22228\n[#22245]: https://github.com/JuliaLang/julia/issues/22245\n[#22251]: https://github.com/JuliaLang/julia/issues/22251\n[#22274]: https://github.com/JuliaLang/julia/issues/22274\n[#22281]: https://github.com/JuliaLang/julia/issues/22281\n[#22296]: https://github.com/JuliaLang/julia/issues/22296\n[#22314]: https://github.com/JuliaLang/julia/issues/22314\n[#22324]: https://github.com/JuliaLang/julia/issues/22324\n[#22325]: https://github.com/JuliaLang/julia/issues/22325\n[#22350]: https://github.com/JuliaLang/julia/issues/22350\n[#22390]: https://github.com/JuliaLang/julia/issues/22390\n[#22496]: https://github.com/JuliaLang/julia/issues/22496\n[#22511]: https://github.com/JuliaLang/julia/issues/22511\n[#22523]: https://github.com/JuliaLang/julia/issues/22523\n[#22532]: https://github.com/JuliaLang/julia/issues/22532\n[#22572]: https://github.com/JuliaLang/julia/issues/22572\n[#22588]: https://github.com/JuliaLang/julia/issues/22588\n[#22605]: https://github.com/JuliaLang/julia/issues/22605\n[#22666]: https://github.com/JuliaLang/julia/issues/22666\n[#22696]: https://github.com/JuliaLang/julia/issues/22696\n[#22703]: https://github.com/JuliaLang/julia/issues/22703\n[#22712]: https://github.com/JuliaLang/julia/issues/22712\n[#22718]: https://github.com/JuliaLang/julia/issues/22718\n[#22720]: https://github.com/JuliaLang/julia/issues/22720\n[#22723]: https://github.com/JuliaLang/julia/issues/22723\n[#22732]: https://github.com/JuliaLang/julia/issues/22732\n[#22742]: https://github.com/JuliaLang/julia/issues/22742\n[#22751]: https://github.com/JuliaLang/julia/issues/22751\n[#22761]: https://github.com/JuliaLang/julia/issues/22761\n[#22762]: https://github.com/JuliaLang/julia/issues/22762\n[#22789]: https://github.com/JuliaLang/julia/issues/22789\n[#22793]: https://github.com/JuliaLang/julia/issues/22793\n[#22796]: https://github.com/JuliaLang/julia/issues/22796\n[#22800]: https://github.com/JuliaLang/julia/issues/22800\n[#22801]: https://github.com/JuliaLang/julia/issues/22801\n[#22814]: https://github.com/JuliaLang/julia/issues/22814\n[#22825]: https://github.com/JuliaLang/julia/issues/22825\n[#22829]: https://github.com/JuliaLang/julia/issues/22829\n[#22847]: https://github.com/JuliaLang/julia/issues/22847\n[#22868]: https://github.com/JuliaLang/julia/issues/22868\n[#22880]: https://github.com/JuliaLang/julia/issues/22880\n[#22907]: https://github.com/JuliaLang/julia/issues/22907\n[#22925]: https://github.com/JuliaLang/julia/issues/22925\n[#22926]: https://github.com/JuliaLang/julia/issues/22926\n[#22932]: https://github.com/JuliaLang/julia/issues/22932\n[#22961]: https://github.com/JuliaLang/julia/issues/22961\n[#22984]: https://github.com/JuliaLang/julia/issues/22984\n[#23002]: https://github.com/JuliaLang/julia/issues/23002\n[#23035]: https://github.com/JuliaLang/julia/issues/23035\n[#23051]: https://github.com/JuliaLang/julia/issues/23051\n[#23054]: https://github.com/JuliaLang/julia/issues/23054\n[#23117]: https://github.com/JuliaLang/julia/issues/23117\n[#23120]: https://github.com/JuliaLang/julia/issues/23120\n[#23144]: https://github.com/JuliaLang/julia/issues/23144\n[#23154]: https://github.com/JuliaLang/julia/issues/23154\n[#23157]: https://github.com/JuliaLang/julia/issues/23157\n[#23168]: https://github.com/JuliaLang/julia/issues/23168\n[#23187]: https://github.com/JuliaLang/julia/issues/23187\n[#23207]: https://github.com/JuliaLang/julia/issues/23207\n[#23233]: https://github.com/JuliaLang/julia/issues/23233\n[#23235]: https://github.com/JuliaLang/julia/issues/23235\n[#23261]: https://github.com/JuliaLang/julia/issues/23261\n[#23323]: https://github.com/JuliaLang/julia/issues/23323\n[#23332]: https://github.com/JuliaLang/julia/issues/23332\n[#23341]: https://github.com/JuliaLang/julia/issues/23341\n[#23342]: https://github.com/JuliaLang/julia/issues/23342\n[#23354]: https://github.com/JuliaLang/julia/issues/23354\n[#23366]: https://github.com/JuliaLang/julia/issues/23366\n[#23373]: https://github.com/JuliaLang/julia/issues/23373\n[#23393]: https://github.com/JuliaLang/julia/issues/23393\n[#23404]: https://github.com/JuliaLang/julia/issues/23404\n[#23427]: https://github.com/JuliaLang/julia/issues/23427\n[#23504]: https://github.com/JuliaLang/julia/issues/23504\n[#23505]: https://github.com/JuliaLang/julia/issues/23505\n[#23519]: https://github.com/JuliaLang/julia/issues/23519\n[#23528]: https://github.com/JuliaLang/julia/issues/23528\n[#23529]: https://github.com/JuliaLang/julia/issues/23529\n[#23530]: https://github.com/JuliaLang/julia/issues/23530\n[#23554]: https://github.com/JuliaLang/julia/issues/23554\n[#23570]: https://github.com/JuliaLang/julia/issues/23570\n[#23628]: https://github.com/JuliaLang/julia/issues/23628\n[#23642]: https://github.com/JuliaLang/julia/issues/23642\n[#23665]: https://github.com/JuliaLang/julia/issues/23665\n[#23690]: https://github.com/JuliaLang/julia/issues/23690\n[#23716]: https://github.com/JuliaLang/julia/issues/23716\n[#23724]: https://github.com/JuliaLang/julia/issues/23724\n[#23750]: https://github.com/JuliaLang/julia/issues/23750\n[#23757]: https://github.com/JuliaLang/julia/issues/23757\n[#23805]: https://github.com/JuliaLang/julia/issues/23805\n[#23816]: https://github.com/JuliaLang/julia/issues/23816\n[#23885]: https://github.com/JuliaLang/julia/issues/23885\n[#23902]: https://github.com/JuliaLang/julia/issues/23902\n[#23912]: https://github.com/JuliaLang/julia/issues/23912\n[#23923]: https://github.com/JuliaLang/julia/issues/23923\n[#23929]: https://github.com/JuliaLang/julia/issues/23929\n[#23960]: https://github.com/JuliaLang/julia/issues/23960\n[#23964]: https://github.com/JuliaLang/julia/issues/23964\n[#24047]: https://github.com/JuliaLang/julia/issues/24047\n[#24126]: https://github.com/JuliaLang/julia/issues/24126\n[#24153]: https://github.com/JuliaLang/julia/issues/24153\n[#24167]: https://github.com/JuliaLang/julia/issues/24167\n[#24187]: https://github.com/JuliaLang/julia/issues/24187\n[#24221]: https://github.com/JuliaLang/julia/issues/24221\n[#24240]: https://github.com/JuliaLang/julia/issues/24240\n[#24245]: https://github.com/JuliaLang/julia/issues/24245\n[#24250]: https://github.com/JuliaLang/julia/issues/24250\n[#24263]: https://github.com/JuliaLang/julia/issues/24263\n[#24278]: https://github.com/JuliaLang/julia/issues/24278\n[#24279]: https://github.com/JuliaLang/julia/issues/24279\n[#24281]: https://github.com/JuliaLang/julia/issues/24281\n[#24282]: https://github.com/JuliaLang/julia/issues/24282\n[#24320]: https://github.com/JuliaLang/julia/issues/24320\n[#24356]: https://github.com/JuliaLang/julia/issues/24356\n[#24362]: https://github.com/JuliaLang/julia/issues/24362\n[#24390]: https://github.com/JuliaLang/julia/issues/24390\n[#24396]: https://github.com/JuliaLang/julia/issues/24396\n[#24404]: https://github.com/JuliaLang/julia/issues/24404\n[#24413]: https://github.com/JuliaLang/julia/issues/24413\n[#24414]: https://github.com/JuliaLang/julia/issues/24414\n[#24415]: https://github.com/JuliaLang/julia/issues/24415\n[#24438]: https://github.com/JuliaLang/julia/issues/24438\n[#24445]: https://github.com/JuliaLang/julia/issues/24445\n[#24452]: https://github.com/JuliaLang/julia/issues/24452\n[#24472]: https://github.com/JuliaLang/julia/issues/24472\n[#24490]: https://github.com/JuliaLang/julia/issues/24490\n[#24580]: https://github.com/JuliaLang/julia/issues/24580\n[#24595]: https://github.com/JuliaLang/julia/issues/24595\n[#24605]: https://github.com/JuliaLang/julia/issues/24605\n[#24647]: https://github.com/JuliaLang/julia/issues/24647\n[#24653]: https://github.com/JuliaLang/julia/issues/24653\n[#24654]: https://github.com/JuliaLang/julia/issues/24654\n[#24656]: https://github.com/JuliaLang/julia/issues/24656\n[#24673]: https://github.com/JuliaLang/julia/issues/24673\n[#24679]: https://github.com/JuliaLang/julia/issues/24679\n[#24684]: https://github.com/JuliaLang/julia/issues/24684\n[#24713]: https://github.com/JuliaLang/julia/issues/24713\n[#24715]: https://github.com/JuliaLang/julia/issues/24715\n[#24774]: https://github.com/JuliaLang/julia/issues/24774\n[#24781]: https://github.com/JuliaLang/julia/issues/24781\n[#24785]: https://github.com/JuliaLang/julia/issues/24785\n[#24786]: https://github.com/JuliaLang/julia/issues/24786\n[#24808]: https://github.com/JuliaLang/julia/issues/24808\n[#24831]: https://github.com/JuliaLang/julia/issues/24831\n[#24839]: https://github.com/JuliaLang/julia/issues/24839\n[#24844]: https://github.com/JuliaLang/julia/issues/24844\n[#24869]: https://github.com/JuliaLang/julia/issues/24869\n[#25002]: https://github.com/JuliaLang/julia/issues/25002\n[#25012]: https://github.com/JuliaLang/julia/issues/25012\n[#25021]: https://github.com/JuliaLang/julia/issues/25021\n[#25029]: https://github.com/JuliaLang/julia/issues/25029\n[#25030]: https://github.com/JuliaLang/julia/issues/25030\n[#25037]: https://github.com/JuliaLang/julia/issues/25037\n[#25046]: https://github.com/JuliaLang/julia/issues/25046\n[#25047]: https://github.com/JuliaLang/julia/issues/25047\n[#25056]: https://github.com/JuliaLang/julia/issues/25056\n[#25057]: https://github.com/JuliaLang/julia/issues/25057\n[#25058]: https://github.com/JuliaLang/julia/issues/25058\n[#25067]: https://github.com/JuliaLang/julia/issues/25067\n[#25088]: https://github.com/JuliaLang/julia/issues/25088\n[#25162]: https://github.com/JuliaLang/julia/issues/25162\n[#25165]: https://github.com/JuliaLang/julia/issues/25165\n[#25168]: https://github.com/JuliaLang/julia/issues/25168\n[#25184]: https://github.com/JuliaLang/julia/issues/25184\n[#25197]: https://github.com/JuliaLang/julia/issues/25197\n[#25210]: https://github.com/JuliaLang/julia/issues/25210\n[#25231]: https://github.com/JuliaLang/julia/issues/25231\n[#25249]: https://github.com/JuliaLang/julia/issues/25249\n[#25277]: https://github.com/JuliaLang/julia/issues/25277\n[#25278]: https://github.com/JuliaLang/julia/issues/25278\n[#25311]: https://github.com/JuliaLang/julia/issues/25311\n[#25321]: https://github.com/JuliaLang/julia/issues/25321\n[#25368]: https://github.com/JuliaLang/julia/issues/25368\n[#25391]: https://github.com/JuliaLang/julia/issues/25391\n[#25424]: https://github.com/JuliaLang/julia/issues/25424\n[#25429]: https://github.com/JuliaLang/julia/issues/25429\n[#25457]: https://github.com/JuliaLang/julia/issues/25457\n[#25459]: https://github.com/JuliaLang/julia/issues/25459\n[#25472]: https://github.com/JuliaLang/julia/issues/25472\n[#25496]: https://github.com/JuliaLang/julia/issues/25496\n[#25501]: https://github.com/JuliaLang/julia/issues/25501\n[#25522]: https://github.com/JuliaLang/julia/issues/25522\n[#25532]: https://github.com/JuliaLang/julia/issues/25532\n[#25545]: https://github.com/JuliaLang/julia/issues/25545\n[#25564]: https://github.com/JuliaLang/julia/issues/25564\n[#25567]: https://github.com/JuliaLang/julia/issues/25567\n[#25571]: https://github.com/JuliaLang/julia/issues/25571\n[#25616]: https://github.com/JuliaLang/julia/issues/25616\n[#25622]: https://github.com/JuliaLang/julia/issues/25622\n[#25629]: https://github.com/JuliaLang/julia/issues/25629\n[#25631]: https://github.com/JuliaLang/julia/issues/25631\n[#25633]: https://github.com/JuliaLang/julia/issues/25633\n[#25634]: https://github.com/JuliaLang/julia/issues/25634\n[#25654]: https://github.com/JuliaLang/julia/issues/25654\n[#25655]: https://github.com/JuliaLang/julia/issues/25655\n[#25662]: https://github.com/JuliaLang/julia/issues/25662\n[#25667]: https://github.com/JuliaLang/julia/issues/25667\n[#25668]: https://github.com/JuliaLang/julia/issues/25668\n[#25697]: https://github.com/JuliaLang/julia/issues/25697\n[#25701]: https://github.com/JuliaLang/julia/issues/25701\n[#25725]: https://github.com/JuliaLang/julia/issues/25725\n[#25745]: https://github.com/JuliaLang/julia/issues/25745\n[#25763]: https://github.com/JuliaLang/julia/issues/25763\n[#25786]: https://github.com/JuliaLang/julia/issues/25786\n[#25812]: https://github.com/JuliaLang/julia/issues/25812\n[#25815]: https://github.com/JuliaLang/julia/issues/25815\n[#25830]: https://github.com/JuliaLang/julia/issues/25830\n[#25845]: https://github.com/JuliaLang/julia/issues/25845\n[#25854]: https://github.com/JuliaLang/julia/issues/25854\n[#25858]: https://github.com/JuliaLang/julia/issues/25858\n[#25872]: https://github.com/JuliaLang/julia/issues/25872\n[#25896]: https://github.com/JuliaLang/julia/issues/25896\n[#25944]: https://github.com/JuliaLang/julia/issues/25944\n[#25947]: https://github.com/JuliaLang/julia/issues/25947\n[#25979]: https://github.com/JuliaLang/julia/issues/25979\n[#25980]: https://github.com/JuliaLang/julia/issues/25980\n[#25990]: https://github.com/JuliaLang/julia/issues/25990\n[#25998]: https://github.com/JuliaLang/julia/issues/25998\n[#26009]: https://github.com/JuliaLang/julia/issues/26009\n[#26071]: https://github.com/JuliaLang/julia/issues/26071\n[#26080]: https://github.com/JuliaLang/julia/issues/26080\n[#26093]: https://github.com/JuliaLang/julia/issues/26093\n[#26149]: https://github.com/JuliaLang/julia/issues/26149\n[#26154]: https://github.com/JuliaLang/julia/issues/26154\n[#26156]: https://github.com/JuliaLang/julia/issues/26156\n[#26161]: https://github.com/JuliaLang/julia/issues/26161\n[#26206]: https://github.com/JuliaLang/julia/issues/26206\n[#26212]: https://github.com/JuliaLang/julia/issues/26212\n[#26262]: https://github.com/JuliaLang/julia/issues/26262\n[#26283]: https://github.com/JuliaLang/julia/issues/26283\n[#26284]: https://github.com/JuliaLang/julia/issues/26284\n[#26286]: https://github.com/JuliaLang/julia/issues/26286\n[#26347]: https://github.com/JuliaLang/julia/issues/26347\n[#26436]: https://github.com/JuliaLang/julia/issues/26436\n[#26442]: https://github.com/JuliaLang/julia/issues/26442\n[#26486]: https://github.com/JuliaLang/julia/issues/26486\n[#26559]: https://github.com/JuliaLang/julia/issues/26559\n[#26576]: https://github.com/JuliaLang/julia/issues/26576\n[#26600]: https://github.com/JuliaLang/julia/issues/26600\n[#26660]: https://github.com/JuliaLang/julia/issues/26660\n[#26670]: https://github.com/JuliaLang/julia/issues/26670\n[#26733]: https://github.com/JuliaLang/julia/issues/26733\n[#26775]: https://github.com/JuliaLang/julia/issues/26775\n[#26858]: https://github.com/JuliaLang/julia/issues/26858\n[#26862]: https://github.com/JuliaLang/julia/issues/26862\n[#26932]: https://github.com/JuliaLang/julia/issues/26932\n[#26935]: https://github.com/JuliaLang/julia/issues/26935\n[#26980]: https://github.com/JuliaLang/julia/issues/26980\n[#26991]: https://github.com/JuliaLang/julia/issues/26991\n[#26997]: https://github.com/JuliaLang/julia/issues/26997\n[#27067]: https://github.com/JuliaLang/julia/issues/27067\n[#27071]: https://github.com/JuliaLang/julia/issues/27071\n[#27075]: https://github.com/JuliaLang/julia/issues/27075\n[#27100]: https://github.com/JuliaLang/julia/issues/27100\n[#27121]: https://github.com/JuliaLang/julia/issues/27121\n[#27159]: https://github.com/JuliaLang/julia/issues/27159\n[#27164]: https://github.com/JuliaLang/julia/issues/27164\n[#27189]: https://github.com/JuliaLang/julia/issues/27189\n[#27212]: https://github.com/JuliaLang/julia/issues/27212\n[#27248]: https://github.com/JuliaLang/julia/issues/27248\n[#27309]: https://github.com/JuliaLang/julia/issues/27309\n[#27401]: https://github.com/JuliaLang/julia/issues/27401\n[#27447]: https://github.com/JuliaLang/julia/issues/27447\n[#27459]: https://github.com/JuliaLang/julia/issues/27459\n[#27470]: https://github.com/JuliaLang/julia/issues/27470\n[#27473]: https://github.com/JuliaLang/julia/issues/27473\n[#27554]: https://github.com/JuliaLang/julia/issues/27554\n[#27560]: https://github.com/JuliaLang/julia/issues/27560\n[#27616]: https://github.com/JuliaLang/julia/issues/27616\n[#27635]: https://github.com/JuliaLang/julia/issues/27635\n[#27641]: https://github.com/JuliaLang/julia/issues/27641\n[#27711]: https://github.com/JuliaLang/julia/issues/27711\n[#27726]: https://github.com/JuliaLang/julia/issues/27726\n[#27746]: https://github.com/JuliaLang/julia/issues/27746\n[#27856]: https://github.com/JuliaLang/julia/issues/27856\n[#27859]: https://github.com/JuliaLang/julia/issues/27859\n[#27908]: https://github.com/JuliaLang/julia/issues/27908\n[#27944]: https://github.com/JuliaLang/julia/issues/27944\n[#28045]: https://github.com/JuliaLang/julia/issues/28045\n[#28065]: https://github.com/JuliaLang/julia/issues/28065\n[#28155]: https://github.com/JuliaLang/julia/issues/28155\n[#28266]: https://github.com/JuliaLang/julia/issues/28266\n[#28302]: https://github.com/JuliaLang/julia/issues/28302\n[#28310]: https://github.com/JuliaLang/julia/issues/28310\n\nJulia v0.6.0 Release Notes\n==========================\n\nNew language features\n---------------------\n\n  * New type system capabilities ([#8974], [#18457])\n\n    + Type parameter constraints can refer to previous parameters, e.g.\n      `type Foo{R<:Real, A<:AbstractArray{R}}`. Can also be used in method definitions.\n\n    + New syntax `Array{T} where T<:Integer`, indicating a union of types over all\n      specified values of `T` (represented by a `UnionAll` type). This provides behavior\n      similar to parametric methods or `typealias`, but can be used anywhere a type is\n      accepted. This syntax can also be used in method definitions, e.g.\n      `function inv(M::Matrix{T}) where T<:AbstractFloat`.\n      Anonymous functions can have type parameters via the syntax\n      `((x::Array{T}) where T<:Real) -> 2x`.\n\n    + Implicit type parameters, e.g. `Vector{<:Real}` is equivalent to\n      `Vector{T} where T<:Real`, and similarly for `Vector{>:Int}` ([#20414]).\n\n    + Much more accurate subtype and type intersection algorithms. Method sorting and\n      identification of equivalent and ambiguous methods are improved as a result.\n\nLanguage changes\n----------------\n\n  * \"Inner constructor\" syntax for parametric types is deprecated. For example,\n    in this definition:\n    ```\n    type Foo{T,S<:Real}\n        x\n        Foo(x) = new(x)\n    end\n    ```\n    the syntax `Foo(x) = new(x)` actually defined a constructor for `Foo{T,S}`,\n    i.e. the case where the type parameters are specified. For clarity, this\n    definition now must be written as `Foo{T,S}(x) where {T,S<:Real} = new(x)`\n    ([#11310], [#20308]).\n\n  * The keywords used to define types have changed ([#19157], [#20418]).\n\n    + `immutable` changes to `struct`\n\n    + `type` changes to `mutable struct`\n\n    + `abstract` changes to `abstract type ... end`\n\n    + `bitstype 32 Char` changes to `primitive type Char 32 end`\n\n    In 0.6, `immutable` and `type` are still allowed as synonyms without a deprecation\n    warning.\n\n  * Multi-line and single-line nonstandard command literals have been added. A\n    nonstandard command literal is like a nonstandard string literal, but the\n    syntax uses backquotes (``` ` ```) instead of double quotes, and the\n    resulting macro called is suffixed with `_cmd`. For instance, the syntax\n    ``` q`xyz` ``` is equivalent to `@q_cmd \"xyz\"` ([#18644]).\n\n  * Nonstandard string and command literals can now be qualified with their\n    module. For instance, `Base.r\"x\"` is now parsed as `Base.@r_str \"x\"`.\n    Previously, this syntax parsed as an implicit multiplication ([#18690]).\n\n  * For every binary operator `⨳`, `a .⨳ b` is now automatically equivalent to\n    the `broadcast` call `(⨳).(a, b)`. Hence, one no longer defines methods\n    for `.*` etcetera. This also means that \"dot operations\" automatically\n    fuse into a single loop, along with other dot calls `f.(x)` ([#17623]).\n    Similarly for unary operators ([#20249]).\n\n  * Newly defined methods are no longer callable from the same dynamic runtime\n    scope they were defined in ([#17057]).\n\n  * `isa` is now parsed as an infix operator with the same precedence as `in`\n    ([#19677]).\n\n  * `@.` is now parsed as `@__dot__`, and can be used to add dots to\n    every function call, operator, and assignment in an expression ([#20321]).\n\n  * The identifier `_` can be assigned, but accessing its value is deprecated,\n    allowing this syntax to be used in the future for discarding values ([#9343],\n    [#18251], [#20328]).\n\n  * The `typealias` keyword is deprecated, and should be replaced with\n    `Vector{T} = Array{T,1}` or a `const` assignment ([#20500]).\n\n  * Experimental feature: `x^n` for integer literals `n` (e.g. `x^3`\n    or `x^-3`) is now lowered to `Base.literal_pow(^, x, Val{n})`, to enable\n    compile-time specialization for literal integer exponents ([#20530], [#20889]).\n\nBreaking changes\n----------------\n\nThis section lists changes that do not have deprecation warnings.\n\n  * `readline`, `readlines` and `eachline` return lines without line endings by default.\n    You *must* use `readline(s, chomp=false)`, etc. to get the old behavior where\n    returned lines include trailing end-of-line character(s) ([#19944]).\n\n  * `String`s no longer have a `.data` field (as part of a significant performance\n    improvement). Use `Vector{UInt8}(str)` to access a string as a byte array.\n    However, allocating the `Vector` object has overhead. You can also use\n    `codeunit(str, i)` to access the `i`th byte of a `String`.\n    Use `sizeof(str)` instead of `length(str.data)`, and `pointer(str)` instead of\n    `pointer(str.data)` ([#19449]).\n\n  * Operations between `Float16` and `Integers` now return `Float16` instead of `Float32` ([#17261]).\n\n  * Keyword arguments are processed left-to-right: if the same keyword is specified more than\n    once, the rightmost occurrence takes precedence ([#17785]).\n\n  * The `lgamma(z)` function now uses a different (more standard) branch cut\n    for `real(z) < 0`, which differs from `log(gamma(z))` by multiples of 2π\n    in the imaginary part ([#18330]).\n\n  * `broadcast` now handles tuples, and treats any argument that is not a tuple\n    or an array as a \"scalar\" ([#16986]).\n\n  * `broadcast` now produces a `BitArray` instead of `Array{Bool}` for\n    functions yielding a boolean result. If you want `Array{Bool}`, use\n    `broadcast!` or `.=` ([#17623]).\n\n  * Broadcast `A[I...] .= X` with entirely scalar indices `I` is deprecated as\n    its behavior will change in the future. Use `A[I...] = X` instead.\n\n  * Operations like `.+` and `.*` on `Range` objects are now generic\n    `broadcast` calls (see [above](#language-changes)) and produce an `Array`.\n    If you want a `Range` result, use `+` and `*`, etcetera ([#17623]).\n\n  * `broadcast` now treats `Ref` (except for `Ptr`) arguments as 0-dimensional\n    arrays ([#18965]).\n\n  * `broadcast` now handles missing data (`Nullable`s) allowing operations to\n    be lifted over mixtures of `Nullable`s and scalars, as if the `Nullable`\n    were like an array with zero or one element ([#16961], [#19787]).\n\n  * The runtime now enforces when new method definitions can take effect ([#17057]).\n    The flip-side of this is that new method definitions should now reliably actually\n    take effect, and be called when evaluating new code ([#265]).\n\n  * The array-scalar methods of `/`, `\\`, `*`, `+`, and `-` now follow broadcast promotion\n    rules. (Likewise for the now-deprecated array-scalar methods of `div`, `mod`, `rem`,\n    `&`, `|`, and `xor`; see \"Deprecated or removed\" below.) ([#19692]).\n\n  * `broadcast!(f, A)` now calls `f()` for each element of `A`, rather than doing `fill!(A, f())` ([#19722]).\n\n  * `rmprocs` now throws an exception if requested workers have not been completely\n    removed before `waitfor` seconds. With a `waitfor=0`, `rmprocs` returns immediately\n    without waiting for worker exits.\n\n  * `quadgk` has been moved from Base into a separate package ([#19741]).\n\n  * The `Collections` module has been removed, and all functions defined therein have been\n    moved to the `DataStructures` package ([#19800]).\n\n  * The `RepString` type has been moved to the\n    [LegacyStrings.jl package](https://github.com/JuliaArchive/LegacyStrings.jl).\n\n  * In macro calls with parentheses, e.g. `@m(a=1)`, assignments are now parsed as\n    `=` expressions, instead of as `kw` expressions ([#7669]).\n\n  * When used as an infix operator, `~` is now parsed as a call to an ordinary operator\n    with assignment precedence, instead of as a macro call ([#20406]).\n\n  * (µ \"micro\" and ɛ \"latin epsilon\") are considered equivalent to\n    the corresponding Greek characters in identifiers.  `\\varepsilon`\n    now tab-completes to U+03B5 (greek small letter epsilon) ([#19464]).\n\n  * `retry` now inputs the keyword arguments `delays` and `check` instead of\n    `n` and `max_delay`. The previous functionality can be achieved setting\n    `delays` to `ExponentialBackOff` ([#19331]).\n\n  * `transpose(::AbstractVector)` now always returns a `RowVector` view of the input (which is a\n     special 1×n-sized `AbstractMatrix`), not a `Matrix`, etc. In particular, for\n     `v::AbstractVector` we now have `(v.').' === v` and `v.' * v` is a scalar ([#19670]).\n\n  * Parametric types with \"unspecified\" parameters, such as `Array`, are now represented\n    as `UnionAll` types instead of `DataType`s ([#18457]).\n\n  * `Union` types have two fields, `a` and `b`, instead of a single `types` field.\n    The empty type `Union{}` is represented by a singleton of type `TypeofBottom` ([#18457]).\n\n  * The type `NTuple{N}` now refers to tuples where every element has the same type\n    (since it is shorthand for `NTuple{N,T} where T`). To get the old behavior of matching\n    any tuple, use `NTuple{N,Any}` ([#18457]).\n\n  * `FloatRange` has been replaced by `StepRangeLen`, and the internal\n    representation of `LinSpace` has changed. Aside from changes in\n    the internal field names, this leads to several differences in\n    behavior ([#18777]):\n\n    + Both `StepRangeLen` and `LinSpace` can represent ranges of\n      arbitrary object types---they are no longer limited to\n      floating-point numbers.\n\n    + For ranges that produce `Float64`, `Float32`, or `Float16`\n      numbers, `StepRangeLen` can be used to produce values with\n      little or no roundoff error due to internal arithmetic that is\n      typically twice the precision of the output result.\n\n    + To take advantage of this precision, `linspace(start, stop,\n      len)` now returns a range of type `StepRangeLen` rather than\n      `LinSpace` when `start` and `stop` are\n      `FloatNN`. `LinSpace(start, stop, len)` always returns a\n      `LinSpace`.\n\n    + `StepRangeLen(a, step, len)` constructs an ordinary-precision range\n      using the values and types of `a` and `step` as given, whereas\n      `range(a, step, len)` will attempt to match inputs `a::FloatNN`\n      and `step::FloatNN` to rationals and construct a `StepRangeLen`\n      that internally uses twice-precision arithmetic. These two\n      outcomes exhibit differences in both precision and speed.\n\n  * `A=>B` expressions are now parsed as calls instead of using `=>` as the\n    expression head ([#20327]).\n\n  * The `count` function no longer sums non-boolean values ([#20404])\n\n  * The generic `getindex(::AbstractString, ::AbstractVector)` method's signature has been\n    tightened to `getindex(::AbstractString, ::AbstractVector{<:Integer})`. Consequently,\n    indexing into `AbstractString`s with non-`AbstractVector{<:Integer}` `AbstractVector`s\n    now throws a `MethodError` in the absence of an appropriate specialization.\n    (Previously such cases failed less explicitly with the exception of\n    `AbstractVector{Bool}`, which now throws an `ArgumentError` noting that\n    logical indexing into strings is not supported.)  ([#20248])\n\n  * Bessel, Hankel, Airy, error, Dawson, eta, zeta, digamma, inverse digamma,\n    trigamma, and polygamma special functions have been moved from Base to\n    the\n    [SpecialFunctions.jl package](https://github.com/JuliaMath/SpecialFunctions.jl)\n    ([#20427]). Note that `airy`, `airyx` and `airyprime` have been deprecated\n    in favor of more specific functions (`airyai`, `airybi`, `airyaiprime`,\n    `airybiprimex`, `airyaix`, `airybix`, `airyaiprimex`, `airybiprimex`)\n    ([#18050]).\n\n  * When a macro is called in the module in which that macro is defined, global variables\n    in the macro are now correctly resolved in the macro definition environment. Breakage\n    from this change commonly manifests as undefined variable errors that do not occur\n    under 0.5. Fixing such breakage typically requires sprinkling additional `esc`s in\n    the offending macro ([#15850]).\n\n  * `write` on an `IOBuffer` now returns a signed integer in order to be\n    consistent with other buffers ([#20609]).\n\n  * The `<:Integer` division fallback `/(::Integer, ::Integer)`, which formerly\n    inappropriately took precedence over other division methods for some\n    mixed-integer-type division calls, has been removed ([#19779]).\n\n  * `@async`, `@spawn`, `@spawnat`, `@fetch` and `@fetchfrom` no longer implicitly\n    localize variables. Previously, the expression would be wrapped in an implicit\n    `let` block  ([#19594]).\n\n  * `parse` no longer accepts IPv4 addresses including leading zeros, octal, or hexadecimal.\n    Convert IPv4 addresses including octal or hexadecimal to decimal, and remove leading\n    zeros in decimal addresses ([#19811]).\n\n  * Closures shipped for remote execution via `@spawn` or `remotecall` now automatically\n    serialize globals defined under Main. For details, please refer to the paragraph\n    on \"Global variables\" under the \"Parallel computing\" chapter in the manual ([#19594]).\n\n  * `homedir` now determines the user's home directory via `libuv`'s `uv_os_homedir`,\n    rather than from environment variables ([#19636]).\n\n  * Workers now listen on an ephemeral port assigned by the OS. Previously workers would\n    listen on the first free port available from 9009 ([#21818]).\n\n\nLibrary improvements\n--------------------\n\n  * A new `@views` macro was added to convert a whole expression or block of code to\n    use views for all slices ([#20164]).\n\n  * `max`, `min`, and related functions (`minmax`, `maximum`, `minimum`, `extrema`)\n     now return `NaN` for `NaN` arguments ([#12563]).\n\n  * `oneunit(x)` function to return a dimensionful version of `one(x)`\n    (which is clarified to mean a dimensionless quantity if `x` is dimensionful) ([#20268]).\n\n  * The `chop` and `chomp` functions now return a `SubString` ([#18339]).\n\n  * Numbered stackframes printed in stacktraces can now be opened in an editor by\n    entering the corresponding number in the REPL and pressing `^Q` ([#19680]).\n\n  * The REPL now supports something called *prompt pasting* ([#17599]).\n    This activates when pasting text that starts with `julia> ` into the REPL.\n    In that case, only expressions starting with `julia> ` are parsed, the rest are removed.\n    This makes it possible to paste a chunk of code that has been copied from a REPL session\n    without having to scrub away prompts and outputs.\n    This can be disabled or enabled at will with `Base.REPL.enable_promptpaste(::Bool)`.\n\n  * The function `print_with_color` can now take a color\n    represented by an integer between 0 and 255 inclusive\n    as its first argument ([#18473]). For a number-to-color mapping, please refer to\n    [this chart](https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg).\n    It is also possible to use numbers as colors in environment variables that customizes colors in the REPL.\n    For example, to get orange warning messages, simply set `ENV[\"JULIA_WARN_COLOR\"] = 208`.\n    Please note that not all terminals support 256 colors.\n\n  * The function `print_with_color` no longer prints text in bold by default ([#18628]).\n    Instead, the function now take a keyword argument `bold::Bool`\n    which determines whether to print in bold or not. On some terminals, printing a color in non bold\n    results in slightly darker colors being printed than when printing in bold.\n    Therefore, light versions of the colors are now supported.\n    For the available colors see the help entry on `print_with_color`.\n\n  * The default text style for REPL input and answers has been changed from bold to normal ([#11250]).\n    They can be changed back to bold by setting the environment variables\n    `JULIA_INPUT_COLOR` and `JULIA_ANSWER_COLOR` to `\"bold\"`.\n    For example, one way of doing this is adding `ENV[\"JULIA_INPUT_COLOR\"] = :bold`\n    and `ENV[\"JULIA_ANSWER_COLOR\"] = :bold` to the `.juliarc.jl` file. See the\n    [manual section on customizing colors](https://docs.julialang.org/en/v1/stdlib/REPL/#Customizing-Colors-1)\n    for more information.\n\n  * The default color for info messages has been changed from blue to cyan\n    ([#18442]), and for warning messages from red to yellow ([#18453]). This\n    can be changed back to the original colors by setting the environment\n    variables `JULIA_INFO_COLOR` to `\"blue\"` and `JULIA_WARN_COLOR` to `\"red\"`.\n\n  * Iteration utilities that wrap iterators and return other iterators (`enumerate`, `zip`, `rest`,\n    `countfrom`, `take`, `drop`, `cycle`, `repeated`, `product`, `flatten`, `partition`) have been\n    moved to the module `Base.Iterators` ([#18839]).\n\n  * BitArrays can now be constructed from arbitrary iterables, in particular from generator expressions,\n    e.g. `BitArray(isodd(x) for x = 1:100)` ([#19018]).\n\n  * `hcat`, `vcat`, and `hvcat` now work with `UniformScaling` objects, so\n    you can now do e.g. `[A I]` and it will concatenate an appropriately sized\n    identity matrix ([#19305]).\n\n  * New `accumulate` and `accumulate!` functions were added, which generalize `cumsum` and `cumprod`.\n    Also known as a [scan](https://en.wikipedia.org/wiki/Prefix_sum) operation ([#18931]).\n\n  * `reshape` now allows specifying one dimension with a `Colon()` (`:`) for the new shape, in which case\n    that dimension's length will be computed such that its product with all the other dimensions is equal\n    to the length of the original array ([#19919]).\n\n  * The new `to_indices` function provides a uniform interface for index conversions,\n    taking an array and a tuple of indices as arguments and returning a tuple of\n    integers and/or arrays of supported scalar indices. It will throw an `ArgumentError`\n    for any unsupported indices, and the returned arrays should be iterated over (and\n    not indexed into) to support more efficient logical indexing ([#19730]).\n\n    + Using colons (`:`) to represent a collection of indices is deprecated. They now must be\n      explicitly converted to a specialized array of integers with the `to_indices` function.\n      As a result, the type of `SubArray`s that represent views over colon indices has changed.\n\n    + Logical indexing is now more efficient. Logical arrays are converted by `to_indices` to\n      a lazy, iterable collection of indices that doesn't support indexing. A deprecation\n      provides indexing support with O(n) lookup.\n\n    + The performance of indexing with `CartesianIndex`es is also improved in many situations.\n\n  * A new `titlecase` function was added, to capitalize the first character of each word within a string ([#19469]).\n\n  * `any` and `all` now always short-circuit, and `mapreduce` never short-circuits ([#19543]).\n    That is, not every member of the input iterable will be visited if a `true` (in the case of `any`) or\n    `false` (in the case of `all`) value is found, and `mapreduce` will visit all members of the iterable.\n\n  * Additional methods for `ones` and `zeros` functions were added\n    to support the same signature as the `similar` function ([#19635]).\n\n  * `count` now has a `count(itr)` method equivalent to `count(identity, itr)` ([#20403]).\n\n  * Methods for `map` and `filter` with `Nullable` arguments have been implemented;\n    the semantics are as if the `Nullable` were a container with zero or one elements ([#16961]).\n\n  * New `@test_warn` and `@test_nowarn` macros were added in the `Base.Test` module to\n    test for the presence or absence of warning messages ([#19903]).\n\n  * `logging` can now be used to redirect `info`, `warn`, and `error` messages\n    either universally or on a per-module/function basis ([#16213]).\n\n  * New function `Base.invokelatest(f, args...)` to call the latest version\n    of a function in circumstances where an older version may be called\n    instead (e.g. in a function calling `eval`) ([#19784]).\n\n  * A new `iszero(x)` function was added, to quickly check whether `x` is zero\n    (or is all zeros, for an array) ([#19950]).\n\n  * `notify` now returns a count of tasks woken up ([#19841]).\n\n  * A new nonstandard string literal `raw\"...\"` was added,\n    for creating strings with no interpolation or unescaping ([#19900]).\n\n  * A new `Dates.Time` type was added that supports representing the time of day\n    with up to nanosecond resolution ([#12274]).\n\n  * Raising one or negative one to a negative integer power formerly threw a `DomainError`.\n    One raised to any negative integer power now yields one, negative one raised to any\n    negative even integer power now yields one, and negative one raised to any negative\n    odd integer power now yields negative one. Similarly, raising `true` to any negative\n    integer power now yields `true` rather than throwing a `DomainError` ([#18342]).\n\n  * A new `@macroexpand` macro was added as a convenient alternative to the `macroexpand` function ([#18660]).\n\n  * `invoke` now supports keyword arguments ([#20345]).\n\n  * A new `ConjArray` type was added, as a wrapper type for lazy complex conjugation of arrays.\n    Currently, it is used by default for the new `RowVector` type only, and\n    enforces that both `transpose(vec)` and `ctranspose(vec)` are views not copies ([#20047]).\n\n  * `rem` now accepts a `RoundingMode` argument via `rem(x, y, r::RoundingMode)`, yielding\n    `x - y*round(x/y, r)` without intermediate rounding. In particular, `rem(x, y, RoundNearest)`\n    yields a value in the interval `[-abs(y)/2, abs(y)/2]`), which corresponds to the IEE754\n    `remainder` function. Similarly, `rem2pi(x, r::RoundingMode)` now exists as well, yielding\n    `rem(x, 2pi, r::RoundingMode)` but with greater accuracy ([#10946]).\n\n  * `map[!]` and `broadcast[!]` now have dedicated methods for sparse/structured\n    vectors/matrices. Specifically, `map[!]` and `broadcast[!]` over combinations including\n    one or more `SparseVector`, `SparseMatrixCSC`, `Diagonal`, `Bidiagonal`, `Tridiagonal`,\n    or `SymTridiagonal`, and any number of `broadcast` scalars, `Vector`s, or `Matrix`s,\n    now efficiently yield `SparseVector`s or `SparseMatrix`s as appropriate ([#19239],\n    [#19371], [#19518], [#19438], [#19690], [#19724], [#19926], [#19934], [#20009]).\n\n  * The operators `!` and `∘` (`\\circ<tab>` at the REPL and in most code editors) now\n    respectively perform predicate function negation and function composition. For example,\n    `map(!iszero, (0, 1))` is now equivalent to `map(x -> !iszero(x), (0, 1))` and\n    `map(uppercase ∘ hex, 250:255)` is now equivalent to\n    `map(x -> uppercase(hex(x)), 250:255)` ([#17155]).\n\n  * `enumerate` now supports the two-argument form `enumerate(::IndexStyle, iterable)`.\n    This form allows specification of the returned indices' style. For example,\n    `enumerate(IndexLinear, iterable)` yields linear indices and\n    `enumerate(IndexCartesian, iterable)` yields cartesian indices ([#16378]).\n\nCompiler/Runtime improvements\n-----------------------------\n\n  * `ccall` is now implemented as a macro,\n    removing the need for special code-generator support for `Intrinsics` ([#18754]).\n\n  * `ccall` gained limited support for a `llvmcall` calling-convention.\n    This can replace many uses of `llvmcall` with a simpler, shorter declaration ([#18754]).\n\n  * All `Intrinsics` are now `Builtin` functions instead and have proper error checking\n    and fall-back static compilation support ([#18754]).\n\nDeprecated or removed\n---------------------\n\n  * `ipermutedims(A::AbstractArray, p)` has been deprecated in favor of\n    `permutedims(A, invperm(p))` ([#18891]).\n\n  * Linear indexing is now only supported when there is exactly one\n    non-cartesian index provided. Allowing a trailing index at dimension `d` to\n    linearly access the higher dimensions from array `A` (beyond `size(A, d)`)\n    has been deprecated as a stricter constraint during bounds checking.\n    Instead, `reshape` the array such that its dimensionality matches the\n    number of indices ([#20079]).\n\n  * `Multimedia.@textmime \"mime\"` has been deprecated. Instead define\n    `Multimedia.istextmime(::MIME\"mime\") = true` ([#18441]).\n\n  * `isdefined(a::Array, i::Int)` has been deprecated in favor of `isassigned` ([#18346]).\n\n  * The three-argument `SubArray` constructor (which accepts `dims::Tuple` as its third\n    argument) has been deprecated in favor of the two-argument equivalent (the\n    `dims::Tuple` argument being superfluous) ([#19259]).\n\n  * `is` has been deprecated in favor of `===` (which used to be an alias for `is`) ([#17758]).\n\n  * Ambiguous methods for addition and subtraction between `UniformScaling`s and `Number`s,\n    for example `(+)(J::UniformScaling, x::Number)`, have been deprecated in favor of\n    unambiguous, explicit equivalents, for example `J.λ + x` ([#17607]).\n\n  * `num` and `den` have been deprecated in favor of `numerator` and `denominator` respectively ([#19233],[#19246]).\n\n  * `delete!(ENV::EnvDict, k::AbstractString, def)` has been deprecated in favor of\n    `pop!(ENV, k, def)`. Be aware that `pop!` returns `k` or `def`, whereas `delete!`\n    returns `ENV` or `def` ([#18012]).\n\n  * infix operator `$` has been deprecated in favor of infix `⊻` or function `xor` ([#18977]).\n\n  * The single-argument form of `write` (`write(x)`, with implicit `STDOUT` output stream),\n    has been deprecated in favor of the explicit equivalent `write(STDOUT, x)` ([#17654]).\n\n  * `Dates.recur` has been deprecated in favor of `filter` ([#19288])\n\n  * A number of ambiguous `convert` operations between `Number`s (especially `Real`s)\n    and `Date`, `DateTime`, and `Period` types have been deprecated in favor of\n    unambiguous `convert` and explicit constructor calls. Additionally, ambiguous colon\n    construction of `<:Period` ranges without step specification, for example\n    `Dates.Hour(1):Dates.Hour(2)`, has been deprecated in favor of such construction\n    including step specification, for example `Dates.Hour(1):Dates.Hour(1):Dates.Hour(2)`\n    ([#19920]).\n\n  * `cummin` and `cummax` have been deprecated in favor of `accumulate` ([#18931]).\n\n  * The `Array` constructor syntax `Array(T, dims...)` has been deprecated\n    in favor of the forms `Array{T,N}(dims...)` (where `N` is known, or\n    particularly `Vector{T}(dims...)` for `N = 1` and `Matrix{T}(dims...)` for `N = 2`),\n    and `Array{T}(dims...)` (where `N` is not known). Likewise for `SharedArray`s ([#19989]).\n\n  * `sumabs` and `sumabs2` have been deprecated in favor of `sum(abs, x)` and `sum(abs2, x)`, respectively.\n    `maxabs` and `minabs` have similarly been deprecated in favor of `maximum(abs, x)` and `minimum(abs, x)`.\n    Likewise for the in-place counterparts of these functions ([#19598]).\n\n  * The array-reducing form of `isinteger` (`isinteger(x::AbstractArray)`) has been\n    deprecated in favor of `all(isinteger, x)` ([#19925]).\n\n  * `produce`, `consume` and iteration over a Task object have been deprecated in favor of\n    using Channels for inter-task communication  ([#19841]).\n\n  * The `negate` keyword has been deprecated from all functions in the `Dates` adjuster\n    API (`adjust`, `tonext`, `toprev`, `Date`, `Time`, and `DateTime`). Instead use\n    predicate function negation via the `!` operator\n    (see [Library Improvements](#library-improvements)) ([#20213]).\n\n  * `@test_approx_eq x y` has been deprecated in favor of `@test isapprox(x,y)` or `@test x ≈ y` ([#4615]).\n\n  * `Matrix()` and `Matrix{T}()` have been deprecated in favor of the explicit forms\n    `Matrix(0, 0)` and `Matrix{T}(0, 0)` ([#20330]).\n\n  * Vectorized functions have been deprecated in favor of dot syntax ([#17302], [#17265],\n    [#18558], [#19711], [#19712], [#19791], [#19802], [#19931], [#20543], [#20228]).\n\n  *  All methods of character predicates (`isalnum`, `isalpha`, `iscntrl`, `isdigit`,\n     `isnumber`, `isgraph`, `islower`, `isprint`, `ispunct`, `isspace`, `isupper`,\n     `isxdigit`) that accept `AbstractStrings` have been deprecated in favor of `all`.\n     For example, `isnumber(\"123\")` should now be expressed `all(isnumber, \"123\")`\n     ([#20342]).\n\n  * A few names related to indexing traits have been changed: `LinearIndexing` and\n    `linearindexing` have been deprecated in favor of `IndexStyle`. `LinearFast` has\n    been deprecated in favor of `IndexLinear`, and `LinearSlow` has been deprecated in\n    favor of `IndexCartesian` ([#16378]).\n\n  * The two-argument forms of `map` (`map!(f, A)`) and `asyncmap!` (`asyncmap!(f, A)`)\n    have been deprecated in anticipation of future semantic changes ([#19721]).\n\n  * `unsafe_wrap(String, ...)` has been deprecated in favor of `unsafe_string` ([#19449]).\n\n  * `zeros` and `ones` methods accepting an element type as the first argument and an\n    array as the second argument, for example `zeros(Float64, [1, 2, 3])`, have been\n    deprecated in favor of equivalent methods with the second argument instead the\n    size of the array, for example `zeros(Float64, size([1, 2, 3]))` ([#21183]).\n\n  * `Base.promote_eltype_op` has been deprecated ([#19669], [#19814], [#19937]).\n\n  * `isimag` has been deprecated ([#19949]).\n\n  * The tuple-of-types form of `invoke`, `invoke(f, (types...), ...)`, has been deprecated\n    in favor of the tuple-type form `invoke(f, Tuple{types...}, ...)` ([#18444]).\n\n  * `Base._promote_array_type` has been deprecated ([#19766]).\n\n  * `broadcast_zpreserving` has been deprecated ([#19533], [#19720]).\n\n  * Methods allowing indexing of tuples by `AbstractArray`s with more than one dimension\n    have been deprecated. (Indexing a tuple by such a higher-dimensional `AbstractArray`\n    should yield a tuple with more than one dimension, but tuples are one-dimensional.)\n    ([#19737]).\n\n  * `@test_approx_eq a b` has been deprecated in favor of `@test a ≈ b` (or,\n    equivalently, `@test ≈(a, b)` or `@test isapprox(a, b)`).\n    `@test_approx_eq_eps` has been deprecated in favor of new `@test` syntax:\n    `@test` now supports the syntax `@test f(args...) key=val ...` for\n    `@test f(args..., key=val...)`. This syntax allows, for example, writing\n    `@test a ≈ b atol=c` in place of `@test ≈(a, b, atol=c)` (and hence\n    `@test_approx_eq_eps a b c`) ([#19901]).\n\n  * `takebuf_array` has been deprecated in favor of `take!`, and `takebuf_string(x)`\n    has been deprecated in favor of `String(take!(x))` ([#19088]).\n\n  * `convert` methods from `Diagonal` and `Bidiagonal` to subtypes of\n    `AbstractTriangular` have been deprecated ([#17723]).\n\n  * `Base.LinAlg.arithtype` has been deprecated. If you were using `arithtype` within a\n    `promote_op` call, instead use `promote_op(Base.LinAlg.matprod, Ts...)`. Otherwise,\n    consider defining equivalent functionality locally ([#18218]).\n\n  * Special characters (`#{}()[]<>|&*?~;`) should now be quoted in commands. For example,\n    ``` `export FOO=1\\;` ``` should replace ``` `export FOO=1;` ``` and\n    ``` `cd $dir '&&' $thingie` ``` should replace ``` `cd $dir && $thingie` ``` ([#19786]).\n\n  * Zero-argument `Channel` constructors (`Channel()`, `Channel{T}()`) have been deprecated\n    in favor of equivalents accepting an explicit `Channel` size\n    (`Channel(2)`, `Channel{T}(2)`) ([#18832]).\n\n  * The zero-argument constructor `MersenneTwister()` has been\n    deprecated in favor of the explicit `MersenneTwister(0)` ([#16984]).\n\n  * `Base.promote_type(op::Type, Ts::Type...)` has been removed as part of an overhaul\n    of `broadcast`'s promotion mechanism. If you need the functionality of that\n    `Base.promote_type` method, consider defining it locally via\n    `Core.Compiler.return_type(op, Tuple{Ts...})` ([#18642]).\n\n  * `bitbroadcast` has been deprecated in favor of `broadcast`, which now produces a\n    `BitArray` instead of `Array{Bool}` for functions yielding a boolean result ([#19771]).\n\n  * To complete the deprecation of histogram-related functions, `midpoints` has been\n    deprecated. Instead use the\n    [StatsBase.jl package](https://github.com/JuliaStats/StatsBase.jl)'s\n    `midpoints` function ([#20058]).\n\n  * Passing a type argument to `LibGit2.cat` has been deprecated in favor of a simpler,\n    two-argument method for `LibGit2.cat` ([#20435]).\n\n  * The `LibGit2.owner` function for finding the repository which owns a given Git object\n    has been deprecated in favor of `LibGit2.repository` ([#20135]).\n\n  * The `LibGit2.GitAnyObject` type has been renamed to `LibGit2.GitUnknownObject` to\n    clarify its intent ([#19935]).\n\n  * The `LibGit2.GitOid` type has been renamed to `LibGit2.GitHash` for clarity ([#19878]).\n\n  * Finalizing `LibGit2` objects with `finalize` has been deprecated in favor of using `close`\n    ([#19660]).\n\n  * Parsing string dates from a `Dates.DateFormat` object has been deprecated as part of a\n    larger effort toward faster, more extensible date parsing ([#20952]).\n\nCommand-line option changes\n---------------------------\n\n  * In `polly` builds (`USE_POLLY := 1`), the new flag `--polly={yes|no}` controls whether\n    `@polly` declarations are respected. (With `--polly=no`, `@polly` declarations are\n    ignored.) This flag is also available in non-`polly` builds (`USE_POLLY := 0`),\n    but has no effect ([#18159]).\n\nJulia v0.5.0 Release Notes\n==========================\n\nNew language features\n---------------------\n\n  * Generator expressions: `f(i) for i in 1:n` ([#4470]). This returns an iterator\n    that computes the specified values on demand. This is useful for computing, e.g.\n    `sum(f(i) for i in 1:n)` without creating an intermediate array of values.\n\n  * Generators and comprehensions support filtering using `if` ([#550]) and nested\n    iteration using multiple `for` keywords ([#4867]).\n\n  * Fused broadcasting syntax: ``f.(args...)`` is equivalent to ``broadcast(f, args...)`` ([#15032]),\n    and nested `f.(g.(args...))` calls are fused into a single `broadcast` loop ([#17300]).\n    Similarly, the syntax `x .= ...` is equivalent to a `broadcast!(identity, x, ...)`\n    call and fuses with nested \"dot\" calls; also, `x .+= y` and similar is now\n    equivalent to `x .= x .+ y`, rather than `x = x .+ y` ([#17510]).\n\n  * Macro expander functions are now generic, so macros can have multiple definitions\n    (e.g. for different numbers of arguments, or optional arguments) ([#8846], [#9627]).\n    However note that the argument types refer to the syntax tree representation, and not\n    to the types of run time values.\n\n  * Varargs functions like `foo{T}(x::T...)` may now restrict the number\n    of such arguments using `foo{T,N}(x::Vararg{T,N})` ([#11242]).\n\n  * `x ∈ X` is now a synonym for `x in X` in `for` loops and comprehensions,\n    as it already was in comparisons ([#13824]).\n\n  * The `PROGRAM_FILE` global is now available for determining the name of the running script ([#14114]).\n\n  * The syntax `x.:sym` (e.g. `Base.:+`) is now supported, while using `x.(:sym)`\n    or `x.(i)` for field access are deprecated in favor of `getfield` ([#15032]).\n\n  * Function return type syntax `function f()::T` has been added ([#1090]). Values returned\n    from a function with such a declaration will be converted to the specified type `T`.\n\n  * Many more operators now support `.` prefixes (e.g. `.≤`) ([#17393]). However,\n    users are discouraged from overloading these, since they are mainly parsed\n    in order to implement backwards compatibility with planned automatic\n    broadcasting of dot operators in Julia 0.6 ([#16285]). Explicitly qualified\n    operator names like `Base.≤` should now use `Base.:≤` (prefixed by `@compat`\n    if you need 0.4 compatibility via the `Compat` package).\n\n  * User-extensible bounds check elimination is now possible with the new\n    `@boundscheck` macro ([#14474]). This macro marks bounds checking code blocks,\n    which the compiler may remove when encountered inside an `@inbounds` call.\n\nExperimental language features\n------------------------------\n\n  * Support for\n    [multi-threading](https://docs.julialang.org/en/v1/manual/parallel-computing/#man-multithreading-1).\n    Loops with independent iterations can be easily parallelized with the\n    `Threads.@threads` macro.\n\n  * Support for arrays with indexing starting at values different from 1.\n    The array types are expected to be defined in packages, but now\n    Julia provides an API for writing generic algorithms for arbitrary\n    indexing schemes ([#16260]).\n\nLanguage changes\n----------------\n\n  * Each function and closure now has its own type. The captured variables of a closure\n    are fields of its type. `Function` is now an abstract type, and is the default\n    supertype of functions and closures. All functions, including anonymous functions,\n    are generic and support all features (e.g. keyword arguments). Instead of adding\n    methods to `call`, methods are added by type using the syntax\n    `(::ftype)(...) = ...`. `call` is deprecated ([#13412]). A significant result of\n    this language change is that higher order functions can be specialized on their\n    function arguments, leading to much faster functional programming, typically as\n    fast as if function arguments were manually inlined. See below for details.\n\n  * Square brackets and commas (e.g. `[x, y]`) no longer concatenate arrays, and always\n    simply construct a vector of the provided values. If `x` and `y` are arrays,\n    `[x, y]` will be an array of arrays ([#3737], [#2488], [#8599]).\n\n  * `using` and `import` are now case-sensitive even on case-insensitive filesystems\n    (common on Mac and Windows) ([#13542]).\n\n  * Relational algebra symbols are now allowed as infix operators ([#8036]):\n    `⨝`, `⟕`, `⟖`, `⟗` for joins and `▷` for anti-join.\n\n  * A warning is always given when a method is overwritten; previously, this was done\n    only when the new and old definitions were in separate modules ([#14759]).\n\n  * The `if` keyword cannot be followed immediately by a line break ([#15763]).\n\n  * Juxtaposition of numeric literals ending in `.` (e.g. `1.x`) is no longer\n    allowed ([#15731]).\n\n  * The built-in `NTuple` type has been removed; `NTuple{N,T}` is now\n    implemented internally as `Tuple{Vararg{T,N}}` ([#11242]).\n\n  * Use of the syntax `x::T` to declare the type of a local variable is deprecated.\n    In the future this will always mean type assertion, and declarations should use\n    `local x::T` instead ([#16071]).\n    When `x` is global, `x::T = ...` and `global x::T` used to mean type assertion,\n    but this syntax is now reserved for type declaration ([#964]).\n\n  * Dictionary comprehension syntax `[ a=>b for x in y ]` is deprecated.\n    Use `Dict(a=>b for x in y)` instead ([#16510]).\n\n  * Parentheses are no longer allowed around iteration specifications, e.g.\n    `for (i = 1:n)` ([#17668]).\n\nBreaking changes\n----------------\n\nThis section lists changes that do not have deprecation warnings.\n\n  * All dimensions indexed by scalars are now dropped, whereas previously only\n    trailing scalar dimensions would be omitted from the result ([#13612]). This\n    is a very major behavioral change, but should cause obvious failures. To retain\n    a dimension sliced with a scalar `i` slice with `i:i` instead.\n\n  * The assignment operations `.+=`, `.*=` and so on now generate calls\n    to `broadcast!` on the left-hand side (or call to `view(a, ...)` on the left-hand side\n    if the latter is an indexing expression, e.g. `a[...]`). This means that they will fail\n    if the left-hand side is immutable (or does not support `view`), and will otherwise\n    change the left-hand side in-place ([#17510], [#17546]).\n\n  * Method ambiguities no longer generate warnings when files are loaded,\n    nor do they dispatch to an arbitrarily-chosen method; instead, a call that\n    cannot be resolved to a single method results in a `MethodError` at run time,\n    rather than the previous definition-time warning ([#6190]).\n\n  * Array comprehensions preserve the dimensions of the input ranges. For example,\n    `[2x for x in A]` will have the same dimensions as `A` ([#16622]).\n\n  * The result type of an array comprehension depends only on the types of elements\n    computed, instead of using type inference ([#7258]). If the result is empty, then\n    type inference is still used to determine the element type.\n\n  * `reshape` is now defined to always share data with the original array.\n    If a reshaped copy is needed, use `copy(reshape(a))` or `copy!` to a new array of\n    the desired shape ([#4211]).\n\n  * `mapslices` now re-uses temporary storage. Recipient functions that expect\n    input slices to be persistent should copy data to other storage ([#17266]).\n    All usages of `mapslices` should be carefully audited since this change can cause\n    silent, incorrect behavior, rather than failing noisily.\n\n  * Local variables and arguments are represented in lowered code as numbered `Slot`\n    objects instead of as symbols ([#15609]).\n\n  * The information that used to be in the `ast` field of the `LambdaStaticData` type\n    is now divided among the fields `code`, `slotnames`, `slottypes`, `slotflags`,\n    `gensymtypes`, `rettype`, `nargs`, and `isva` in the `LambdaInfo` type ([#15609]).\n\n  * `A <: B` is parsed as `Expr(:(<:), :A, :B)` in all cases ([#9503]).\n    This also applies to the `>:` operator.\n\n  * Simple 2-argument comparisons like `A < B` are parsed as calls instead of using the\n    `:comparison` expression type ([#15524]). The `:comparison` expression type is still\n    produced in ASTs when comparisons are chained (e.g. `A < B ≤ C`).\n\n  * `map` on a dictionary now expects a function that expects and returns a `Pair`.\n    The result is now another dictionary instead of an array ([#16622]).\n\n  * Bit shift operations (i.e. `<<`, `>>`, and `>>>`) now handle\n    negative shift counts differently: Negative counts are interpreted\n    as shifts in the opposite direction. For example, `4 >> -1 == 4 <<\n    +1 == 8`. Previously, negative counts would implicitly overflow to\n    large positive counts, always yielding either `0` or `-1`.\n\nLibrary improvements\n--------------------\n\n  * Strings ([#16107]):\n\n    * The `UTF8String` and `ASCIIString` types have been merged into a single\n      `String` type ([#16058]). Use `isascii(s)` to check whether\n      a string contains only ASCII characters. The `ascii(s)` function now\n      converts `s` to `String`, raising an `ArgumentError` exception if `s` is\n      not pure ASCII.\n\n    * The `UTF16String` and `UTF32String` types and corresponding `utf16` and\n      `utf32` converter functions have been removed from the standard library.\n      If you need these types, they have been moved to the\n      [LegacyStrings.jl package](https://github.com/JuliaArchive/LegacyStrings.jl).\n      In the future, more robust Unicode string support will be provided by the\n      [StringEncodings.jl package](https://github.com/nalimilan/StringEncodings.jl).\n      If you only need these types to call wide string APIs (UTF-16 on Windows,\n      UTF-32 on UNIX), consider using the new `transcode` function (see below)\n      or the `Cwstring` type as a `ccall` argument type, which also ensures\n      correct NUL termination of string data.\n\n    * A `transcode(T, src)` function is now exported for converting data\n      between UTF-xx Unicode encodings ([#17323]).\n\n    * The basic string construction routines are now `string(args...)`,\n      `String(s)`, `unsafe_string(ptr)` (formerly `bytestring(ptr)`), and\n      `unsafe_wrap(String, ptr)` (formerly `pointer_to_string`) ([#16731]).\n\n    * Comparisons between `Char`s and `Integer`s are now deprecated ([#16024]):\n      `'x' == 120` now produces a warning but still evaluates to `true`. In the\n      future it may evaluate to `false` or the comparison may be an error. To\n      compare characters with integers you should either convert the integer to\n      a character value or convert the character to the corresponding code point\n      first: e.g. `'x' == Char(120)` or `Int('x') == 120`. The former is usually\n      preferable.\n\n    * Support for Unicode 9 ([#17402]).\n\n  * Arrays and linear algebra:\n\n    * Dimensions indexed by multidimensional arrays add dimensions. More generally, the\n      dimensionality of the result is the sum of the dimensionalities of the indices ([#15431]).\n\n    * New `normalize` and `normalize!` convenience functions for normalizing\n      vectors ([#13681]).\n\n    * QR matrix factorization:\n\n      * New method for generic QR with column pivoting ([#13480]).\n\n      * New method for polar decompositions of `AbstractVector`s ([#13681]).\n\n    * A new `SparseVector` type allows for one-dimensional sparse arrays.\n      Slicing and reshaping sparse matrices now return vectors when\n      appropriate. The `sparsevec` function returns a one-dimensional sparse\n      vector instead of a one-column sparse matrix. The `SparseMatrix` module\n      has been renamed to `SparseArrays` ([#13440]).\n\n    * Rank one update and downdate functions, `lowrankupdate`, `lowrankupdate!`, `lowrankdowndate`,\n      and `lowrankdowndate!`, have been introduced for dense Cholesky factorizations ([#14243], [#14424]).\n\n    * All `sparse` methods now retain provided numerical zeros as structural nonzeros; to\n      drop numerical zeros, use `dropzeros!` ([#14798], [#15242]).\n\n    * `setindex!` methods for sparse matrices and vectors no longer purge allocated entries\n      on zero assignment. To drop stored entries from sparse matrices and vectors, use\n      `Base.SparseArrays.dropstored!` ([#17404]).\n\n    * Concatenating dense and sparse matrices now returns a sparse matrix ([#15172]).\n\n  * Files and I/O:\n\n    * The `open` function now respects `umask` on UNIX when creating files ([#16466], [#16502]).\n\n    * A new function `walkdir()` returns an iterator that walks the tree of a directory ([#8814], [#13707]).\n\n       ```\n       for (root, dirs, files) in walkdir(expanduser(\"~/.julia/v0.5/Plots/src\"))\n           println(\"$(length(files)) \\t files in $root\")\n       end\n       19    files in /Users/me/.julia/v0.5/Plots/src\n       15    files in /Users/me/.julia/v0.5/Plots/src/backends\n       4     files in /Users/me/.julia/v0.5/Plots/src/deprecated\n      ```\n\n    * A new function `chown()` changes the ownership of files ([#15007]).\n\n    * Display properties can now be passed among output functions (e.g. `show`)\n      using an `IOContext` object ([#13825]).\n\n    * `Cmd(cmd; ...)` now accepts new Windows-specific options `windows_verbatim`\n      (to alter Windows command-line generation) and `windows_hide` (to\n      suppress creation of new console windows) ([#13780]).\n\n    * There is now a default no-op `flush(io)` function for all `IO` types ([#16403]).\n\n  * Parallel computing:\n\n    * `pmap` keyword arguments `err_retry=true` and `err_stop=false` are deprecated.\n      Action to be taken on errors can be specified via the `on_error` keyword argument.\n      Retry is specified via `retry_n`, `retry_on` and `retry_max_delay` ([#15409], [#15975], [#16663]).\n\n    * The functions `remotecall`, `remotecall_fetch`, and `remotecall_wait` now have the\n      function argument as the first argument to allow for do-block syntax ([#13338]).\n\n  * Statistics:\n\n    * Improve performance of `quantile` ([#14413]).\n\n    * `extrema` can now operate over a region ([#15550]).\n\n    * `cov` and `cor` don't use keyword arguments anymore and are therefore now type stable ([#13465]).\n\n    * Histogram functionality has been deprecated in `Base`. Use the\n      [StatsBase.jl package](https://github.com/JuliaStats/StatsBase.jl)\n      instead ([#6842], [#16450]).\n\n  * Testing:\n\n    * The `Base.Test` module now has a `@testset` feature to bundle\n      tests together and delay throwing an error until the end ([#13062]).\n\n    * The new features are mirrored in the\n      [BaseTestNext.jl package](https://github.com/IainNZ/BaseTestNext.jl)\n      for users who would like to use the new functionality on Julia v0.4.\n\n    * The [BaseTestDeprecated.jl package](https://github.com/IainNZ/BaseTestDeprecated.jl)\n      provides the old-style `handler` functionality, for compatibility\n      with code that needs to support both Julia v0.4 and v0.5.\n\n  * Package management:\n\n    * The package system (`Pkg`) is now based on the `libgit2` library, rather\n      than running the `git` program, increasing performance (especially on\n      Windows) ([#11196]).\n\n    * Package-development functions like `Pkg.tag` and `Pkg.publish`\n      have been moved to an external [PkgDev] package ([#13387]).\n\n    * Updating only a subset of the packages is now supported,\n      e.g. `Pkg.update(\"Example\")` ([#17132]).\n\n  * Miscellaneous:\n\n    * Prime number related functions have been moved from `Base` to the\n      [Primes.jl package](https://github.com/JuliaMath/Primes.jl) ([#16481]).\n\n    * Most of the combinatorics functions have been moved from `Base`\n      to the [Combinatorics.jl package](https://github.com/JuliaLang/Combinatorics.jl) ([#13897]).\n\n    * New `foreach` function for calling a function on every element of a collection when\n      the results are not needed ([#13774]). Compared to `map(f, v)`, which allocates and\n      returns a result array, `foreach(f, v)` calls `f` on each element of `v`, returning\n      nothing.\n\n    * The new `Base.StackTraces` module makes stack traces easier to use programmatically ([#14469]).\n\n    * The `libjulia` library is now properly versioned and installed to the public `<prefix>/lib`\n      directory, instead of the private `<prefix>/lib/julia` directory ([#16362]).\n\n    * System reflection is now more consistently exposed from `Sys` and not `Base`\n      (e.g. constants such as `WORD_SIZE` and `CPU_CORES`). `OS_NAME` has been\n      replaced by `Sys.KERNEL` and always reports the name of the kernel (as\n      reported by `uname`). The `@windows_only` and `@osx` family of macros\n      have been replaced with functions such as `is_windows()` and `is_apple()`.\n      There is now also a `@static` macro that will evaluate the condition of an\n      if-statement at compile time, for when a static branch is required ([#16219]).\n\n    * `Date` and `DateTime` values can now be rounded to a specified resolution (e.g., 1 month or\n      15 minutes) with `floor`, `ceil`, and `round` ([#17037]).\n\n[PkgDev]: https://github.com/JuliaLang/PkgDev.jl\n\nCompiler/Runtime improvements\n-----------------------------\n\n  * Machine SIMD types can be represented in Julia as a homogeneous tuple of `VecElement` ([#15244]).\n\n  * The performance of higher-order and anonymous functions has been greatly improved.\n    For example, `map(x->2x, A)` performs as well as `2.*A`([#13412]).\n\n  * On windows, a DLL of standard library code is now precompiled and used by default,\n    improving startup time ([#16953]).\n\n  * LLVM has been upgraded to version 3.7.1, improving the quality of generated\n    code and debug info. However compile times may be slightly longer ([#14623]).\n\nNew architectures\n-----------------\n\n  This release greatly improves support for ARM, and introduces support for Power.\n\n  * [ARM](https://github.com/JuliaLang/julia/issues?utf8=%E2%9C%93&q=label%3Aarm):\n    [#14194], [#14519], [#16645], [#16621]\n\n  * [Power](https://github.com/JuliaLang/julia/issues?utf8=%E2%9C%93&q=label%3Apower):\n    [#16455], [#16404]\n\nDeprecated or removed\n---------------------\n\n  * The following function names have been simplified and unified ([#13232]):\n\n    * `get_bigfloat_precision`  -> `precision(BigFloat)`\n    * `set_bigfloat_precision`  -> `setprecision`\n    * `with_bigfloat_precision` -> `setprecision`\n\n    * `get_rounding`            -> `rounding`\n    * `set_rounding`            -> `setrounding`\n    * `with_rounding`           -> `setrounding`\n\n  * The method `A_ldiv_B!(SparseMatrixCSC, StridedVecOrMat)` has been deprecated\n    in favor of versions that require the matrix to be in factored form\n    ([#13496]).\n\n  * `chol(A,Val{:U/:L})` has been deprecated in favor of `chol(A)` ([#13680]).\n\n  * `rem1(x,y)` is discontinued due to inconsistency for `x==0`. Use `mod1` instead ([#14140]).\n\n  * The `FS` module has been renamed to `Filesystem`. Calling the functions `isreadable`,\n   `iswritable`, and `isexecutable` on filesystem paths has been deprecated ([#12819]).\n\n  * `RemoteRef` has been deprecated in favor of `RemoteChannel` ([#14458]).\n\n  * `super` has been renamed to `supertype` ([#14335]).\n\n  * `parseip(str)` has been deprecated in favor of `parse(IPAddr, str)` ([#14676]).\n\n  * `readall` has been renamed to `readstring`, and `readbytes` has been renamed to `read` ([#14608], [#14660]).\n\n  * `fieldoffsets(x)` has been deprecated in favor of calling `fieldoffset(x, i)` on each field ([#14777]).\n\n  * `issym` is deprecated in favor of `issymmetric` to match similar functions\n    (`ishermitian`, ...) ([#15192]).\n\n  * `scale` is deprecated in favor of either `α*A`, `Diagonal(x)*A`, or `A*Diagonal(x)` ([#15258]).\n\n  * `istext` has been renamed to `istextmime` ([#12872], [#15708]).\n\n  * \"Functor\" types are no longer necessary and have been deprecated ([#15804]). To maintain\n    performance on older versions of Julia the [Compat.jl package](https://github.com/JuliaLang/Compat.jl/pull/184)\n    provides a `@functorize` macro.\n\n  * `bitunpack(B)` and `bitpack(A)` have been deprecated in favor of\n    `Array(B)` and `BitArray(A)`, respectively ([#16010]).\n\n  * `xdump` is removed, and `dump` now simply shows the full representation of a value.\n    `dump` should not be overloaded, since it is for examining concrete structure ([#4163]).\n\n  * `sprandbool` has been deprecated in favor of `sprand(Bool, ...)` or\n    `sprand(rng, Bool, ...)` ([#11688], [#16098]).\n\n  * The lowercase `symbol` function has been deprecated in favor of the `Symbol`\n    constructor ([#16154]).\n\n  * `writemime` is deprecated, and output methods specifying a MIME type are now\n    methods of `show` ([#14052]).\n\n  * BLAS utility functions `blas_set_num_threads`, `blas_vendor`, and `check_blas`\n    have been moved to the BLAS module as `BLAS.set_num_threads`, `BLAS.vendor`,\n    and `BLAS.check` ([#10548], [#16600]).\n\n  * `print_escaped` has been renamed to `escape_string`, `print_unescaped` has been\n    renamed to `unescape_string`, and `print_joined` has been renamed to `join` ([#16603]).\n\n  * `pointer_to_string` has been renamed to `unsafe_wrap(String, ...)`, and\n    `pointer_to_array` has been renamed to `unsafe_wrap(Array, ...)` ([#16731]).\n\n  * `sub` and `slice` have been deprecated in favor of `view` ([#16972]).\n\n  * Sparse matrix functions `etree`, `ereach`, `csc_permute`, and `symperm` have been moved\n    to the [SuiteSparse.jl package](https://github.com/JuliaSparse/SuiteSparse.jl) ([#12231], [#17033]).\n\n  * The no-op `transpose` fallback for non-numeric arrays has been deprecated. Consider introducing suitable\n    `transpose` methods or calling `permutedims(x, (2, 1))` for matrices and `reshape(x, 1, length(x))` for\n    vectors.  ([#13171], [#17075], [#17374]).\n\n  * The following macros have been deprecated ([#16219]):\n    * `@windows` is deprecated in favor of `is_windows()`\n    * `@unix` is deprecated in favor of `is_unix()`\n    * `@osx` is deprecated in favor of `is_apple()`\n    * `@linux` is deprecated in favor of `is_linux()`\n    * `@windows_only` is deprecated in favor of `if is_windows()`\n    * `@unix_only` is deprecated in favor of `if is_unix()`\n    * `@osx_only` is deprecated in favor of `if is_apple()`\n    * `@linux_only` is deprecated in favor of `if is_linux()`\n    * NOTE: Using `@static` could be useful/necessary when used in a function's local scope. See details at the section entitled [Handling Operating System Variation](https://docs.julialang.org/en/v1/manual/handling-operating-system-variation/) in the manual.\n\nCommand-line option changes\n---------------------------\n\n  * The `-F` flag to load `~/.juliarc` has been deprecated in favor of\n    `--startup-file=yes` ([#9482]).\n\n  * The `-f` and `--no-startup` flags to disable loading of `~/.juliarc` have\n    been deprecated in favor of `--startup-file=no` ([#9482]).\n\n  * The `-P` and `--post-boot` flags for evaluating an expression in \"interactive mode\"\n    have been deprecated in favor of `-i -e` ([#16854]).\n\n  * The `--no-history-file` flag to disable loading of `~/.julia_history` has been\n    deprecated in favor of `--history-file=no` ([#9482]).\n\nLanguage tooling improvements\n-----------------------------\n\n   * The [Julia debugger](https://github.com/Keno/Gallium.jl) makes its debut\n     with this release. Install it with `Pkg.add(\"Gallium\")`, and the\n     [documentation](https://github.com/Keno/Gallium.jl#gallium) should\n     get you going. The [JuliaCon\n     talk](https://www.youtube.com/watch?v=e6-hcOHO0tc&list=PLP8iPy9hna6SQPwZUDtAM59-wPzCPyD_S&index=5)\n     on Gallium shows off various features of the debugger.\n\n   * The [Juno IDE](https://junolab.org) has matured significantly, and now\n     also includes support for plotting and debugging.\n\n   * [Cxx.jl](https://github.com/Keno/Cxx.jl) provides a convenient FFI for\n     calling C++ code from Julia.\n\nJulia v0.4.0 Release Notes\n==========================\n\nNew language features\n---------------------\n\n  * Function call overloading: for arbitrary objects `x` (not of type\n    `Function`), `x(...)` is transformed into `call(x, ...)`, and `call`\n    can be overloaded as desired. Constructors are now a special case of\n    this mechanism, which allows e.g. constructors for abstract types.\n    `T(...)` falls back to `convert(T, x)`, so all `convert` methods implicitly\n    define a constructor ([#8712], [#2403]).\n\n  * Unicode version 8 is now supported for identifiers etcetera ([#7917], [#12031]).\n\n  * Type parameters now permit any `isbits` type, not just `Int` and `Bool` ([#6081]).\n\n  * Keyword argument names can be computed, using syntax such as `f(; symbol => val)` ([#7704]).\n\n  * The syntax `@generated function` enables generation of specialized methods based on\n    argument types. At compile time, the function is called with its arguments bound to their\n    types instead of to their values. The function then returns an expression forming the\n    body of the function to be called at run time ([#7311]).\n\n  * [Documentation system](https://docs.julialang.org/en/v1/manual/documentation/)\n    for functions, methods, types and macros in packages and user code ([#8791]).\n\n  * The syntax `function foo end` can be used to introduce a generic function without\n    yet adding any methods ([#8283]).\n\n  * Incremental precompilation of modules: call `VERSION >= v\"0.4.0-dev+6521\" && __precompile__()` at the top of a\n    module file to automatically precompile it when it is imported ([#12491]), or manually\n    run `Base.compilecache(modulename)`. The resulting precompiled `.ji` file is saved in\n    `~/.julia/lib/v0.4` ([#8745]).\n\n      * See manual section on `Module initialization and precompilation` (under `Modules`) for\n        details and errata. In particular, to be safely precompilable a module may need an\n        `__init__` function to separate code that must be executed at runtime rather than precompile\n        time. Modules that are *not* precompilable should call `__precompile__(false)`.\n\n      * The precompiled `.ji` file includes a list of dependencies (modules and files that\n        were imported/included at precompile-time), and the module is automatically recompiled\n        upon `import` when any of its dependencies have changed. Explicit dependencies\n        on other files can be declared with `include_dependency(path)` ([#12458]).\n\n      * New option `--output-incremental={yes|no}` added to invoke the equivalent of `Base.compilecache`\n        from the command line.\n\n  * The syntax `new{parameters...}(...)` can be used in constructors to specify parameters for\n    the type to be constructed ([#8135]).\n\n  * `++` is now parsed as an infix operator, but does not yet have a default definition ([#11030], [#11686]).\n\n  * Support for inter-task communication using `Channels` ([#12264]).\n    See https://docs.julialang.org/en/v1/manual/parallel-computing/#Channels-1 for details.\n\n  * `RemoteRef`s now point to remote channels. The remote channels can be of length greater than 1.\n    Default continues to be of length 1 ([#12385]).\n    See https://docs.julialang.org/en/v1/manual/parallel-computing/#Remote-References-and-AbstractChannels-1 for details.\n\n  * `@__LINE__` special macro now available to reflect invocation source line number ([#12727]).\n\nLanguage changes\n----------------\n\n  * Tuple types are now written as `Tuple{A, B}` instead of as `(A, B)`.\n    Tuples of bits types are inlined into structs and arrays, like other\n    immutable types.\n    `...` now does splatting inside parentheses, instead of constructing a\n    variadic tuple type ([#10380]).\n    Variadic tuple types are written as `Tuple{Vararg{T}}`.\n\n  * Using `[x,y]` to concatenate arrays is deprecated, and in the future will\n    construct a vector of `x` and `y` instead ([#3737], [#2488], [#8599]).\n\n  * Significant improvements to `ccall` and `cfunction`\n\n    * As a safer alternative to creating pointers (`Ptr`), the managed reference type\n      `Ref` has been added. A `Ref` points to the data contained by a value in an\n      abstract sense, and in a way that is GC-safe. For example, `Ref(2)` points to\n      a storage location that contains the integer `2`, and `Ref(array,3)` points\n      to the third element of an array. A `Ref` can be automatically converted to a\n      native pointer when passed to a `ccall`.\n\n    * When passing a by-reference argument to `ccall`, you can declare\n      the argument type to be `Ref{T}` instead of `Ptr{T}`, and just\n      pass `x` instead of `&x`.\n\n    * `ccall` is now lowered to call `unsafe_convert(T, cconvert(T, x))` on each\n      argument. `cconvert` falls back to `convert`, but can be used to convert an\n      argument to an arbitrarily-different representation more suitable for passing\n      to C. `unsafe_convert` then handles conversions to `Ptr`.\n\n    * `ccall` and `cfunction` now support correctly passing and returning structs,\n      following the platform ABI (assuming the C types are mirrored accurately in Julia).\n\n    * `cfunction` arguments of struct-like Julia types are now passed by value.\n      If `Ref{T}` is used as a `cfunction` argument type, it will look up the\n      method applicable to `T`, but pass the argument by reference (as Julia functions\n      usually do). However, this should only be used for objects allocated by Julia\n      and for `isbits` types.\n\n  * `convert(Ptr,x)` is deprecated for most types, replaced by\n    `unsafe_convert`. You can still `convert` between pointer types,\n    and between pointers and `Int` or `UInt`.\n\n  * Module `__init__` methods no longer swallow thrown exceptions; they now\n    throw an `InitError` wrapping the thrown exception ([#12576]).\n\n  * Unsigned `BigInt` literal syntax has been removed ([#11105]).\n    Unsigned literals larger than `UInt128` now throw a syntax error.\n\n  * `error(::Exception)` and `error(::Type{Exception})` have been deprecated\n     in favor of using an explicit `throw` ([#9690]).\n\n  * `Uint` etcetera are renamed to `UInt` ([#8905]).\n\n  * `String` is renamed to `AbstractString` ([#8872]).\n\n  * `FloatingPoint` is renamed to `AbstractFloat` ([#12162]).\n\n  * `None` is deprecated; use `Union{}` instead ([#8423]).\n\n  * `Nothing` (the type of `nothing`) is renamed to `Void` ([#8423]).\n\n  * Arrays can be constructed with the syntax `Array{T}(m,n)` ([#3214], [#10075]).\n\n  * `Dict` literal syntax `[a=>b,c=>d]` is replaced by `Dict(a=>b,c=>d)`,\n    `{a=>b}` is replaced by `Dict{Any,Any}(a=>b)`, and\n    `(K=>V)[...]` is replaced by `Dict{K,V}(...)`.\n    The new syntax has many advantages: all of its components are first-class,\n    it generalizes to other types of containers, it is easier to guess how to\n    specify key and value types, and the syntaxes for empty and pre-populated\n    dicts are synchronized. As part of this change, `=>` is parsed as a normal\n    operator, and `Base` defines it to construct `Pair` objects ([#6739]).\n\n  * `Char` is no longer a subtype of `Integer` ([#8816]).\n    Char now supports a more limited set of operations with `Integer` types:\n\n      * comparison / equality\n      * `Char` + `Int` = `Char`\n      * `Char` - `Char` = `Int`\n\n  * `round` rounds to the nearest integer using the default rounding mode,\n    which is ties-to-even by default ([#8750]).\n\n  * A custom triple-quoted string like `x\"\"\"...\"\"\"` no longer invokes an `x_mstr`\n    macro. Instead, the string is first unindented and then `x_str` is invoked,\n    as if the string had been single-quoted ([#10228]).\n\n  * Colons (`:`) within indexing expressions are no longer lowered to the range\n    `1:end`. Instead, the `:` identifier is passed directly. Custom array types\n    that implement `getindex` or `setindex!` methods must also extend those\n    methods to support arguments of type `Colon` ([#10331]).\n\n  * Unions of types should now be written with curly braces instead of parentheses, i.e.\n    `Union{Type1, Type2}` instead of `Union(Type1, Type2)` ([#11432]).\n\n  * The keyword `local` is no longer allowed in global scope. Use `let` instead of\n    `begin` to create a new scope from the top level ([#7234], [#10472]).\n\n  * Triple-quoted strings no longer treat tabs as 8 spaces. Instead, the\n    longest common prefix of spaces and tabs is removed.\n\n  * `global x` in a nested scope is now a syntax error if `x` is local\n    to the enclosing scope ([#7264]/[#11985]).\n\n  * The default `importall Base.Operators` is deprecated, and relying on it\n    will give a warning ([#8113]).\n\n  * `remotecall_fetch` and `fetch` now rethrow any uncaught remote exception locally as a\n    `RemoteException`. Previously they would return the remote exception object.\n    The worker pid, remote exception and remote backtrace are available in the\n    thrown `RemoteException`.\n\n  * If any of the enclosed async operations in a `@sync` block throw exceptions, they\n    are now collected in a `CompositeException` and the `CompositeException` thrown.\n\n\nCommand line option changes\n---------------------------\n\n  * The `-i` option now forces the REPL to run after loading the specified script (if any) ([#11347]).\n\n  * New option `--handle-signals={yes|no}` to disable Julia's signal handlers.\n\n  * The `--depwarn={yes|no|error}` option enables/disables syntax and method deprecation warnings,\n    or turns them into errors ([#9294]).\n\n  * Some command line options are slated for deprecation / removal\n    - `-f, --no-startup` Don't load ~/.juliarc (deprecated, use --startup-file=no)\n    - `-F` Load ~/.juliarc (deprecated, use --startup-file=yes)`\n    - `-P, --post-boot <expr>`  Evaluate <expr>, but don't disable interactive mode (deprecated, use -i -e instead)\n    - `--no-history-file`  Don't load history file (deprecated, use --history-file=no)\n\nCompiler/Runtime improvements\n-----------------------------\n\n  * Functions may be annotated with metadata (`:meta` expressions) to be used by the compiler ([#8297]).\n\n  * `@inline` before a function definition forces the compiler to inline the function ([#8297]).\n\n  * Loads from heap-allocated immutables are hoisted out of loops in more cases ([#8867]).\n\n  * Accessing fields that are always initialized no longer produces undefined checks ([#8827]).\n\n  * New generational garbage collector which greatly reduces GC overhead for many common workloads ([#5227]).\n\nLibrary improvements\n--------------------\n\n  * Build with USE_GPL_LIBS=0 to exclude all GPL libraries and code ([#10870]).\n\n  * Linear algebra\n\n    * The `LinAlg` module is now exported.\n\n    * `sparse(A)` now takes any `AbstractMatrix` A as an argument ([#10031]).\n\n    * Factorization API is now type-stable; functions dispatch on `Val{false}` or `Val{true}` instead of a boolean value ([#9575]).\n\n    * Added generic Cholesky factorization, and the Cholesky factorization is now parametrized by the matrix type ([#7236]).\n\n    * Sparse `cholfact` and `ldltfact` functions now accept a `perm` keyword\n      for user-provided permutations and a `shift` keyword to factorize\n      a shifted matrix ([#10844]).\n\n    * New `svds` function for the sparse truncated SVD ([#9425]).\n\n    * `Symmetric` and `Hermitian` immutables are now parametrized by the matrix type ([#7992]).\n\n    * New `ordschur` and `ordschur!` functions for sorting a Schur factorization by the eigenvalues ([#8467],[#9701]).\n\n    * `Givens` type doesn't have a size anymore and is no longer a subtype of `AbstractMatrix` ([#8660]).\n\n    * Large speedup in sparse `\\` and splitting of Cholesky and LDLᵀ factorizations into `cholfact` and `ldltfact` ([#10117]).\n\n    * Add sparse least squares to `\\` by adding `qrfact` for sparse matrices based on the SPQR library ([#10180]).\n\n    * Split `Triangular` type into `UpperTriangular`, `LowerTriangular`, `UnitUpperTriagular` and `UnitLowerTriangular` ([#9779])\n\n    * OpenBLAS 64-bit (ILP64) interface is now compiled with a `64_` suffix ([#8734]) to avoid conflicts with external libraries using a 32-bit BLAS ([#4923]).\n\n    * New `vecdot` function, analogous to `vecnorm`, for Euclidean inner products over any iterable container ([#11067]).\n\n    * `p = plan_fft(x)` and similar functions now return a `Base.DFT.Plan` object, rather\n    than an anonymous function. Calling it via `p(x)` is deprecated in favor of\n    `p * x` or `p \\ x` (for the inverse), and it can also be used with `A_mul_B!`\n    to employ pre-allocated output arrays ([#12087]).\n\n    * `LU{T,Tridiagonal{T}}` now supports extraction of `L`, `U`, `p`, and `P` factors ([#12137]).\n\n    * Allocations in sparse matrix factorizations are now tracked by Julia's garbage collector ([#12034]).\n\n  * Strings\n\n    * NUL-terminated strings should now be passed to C via the new `Cstring` type, not `Ptr{UInt8}` or `Ptr{Cchar}`,\n      in order to check whether the string is free of NUL characters (which would cause silent truncation in C).\n      The analogous type `Cwstring` should be used for NUL-terminated `wchar_t*` strings ([#10994]).\n\n    * `graphemes(s)` returns an iterator over grapheme substrings of `s` ([#9261]).\n\n    * Character predicates such as `islower()`, `isspace()`, etc. use\n      utf8proc to provide uniform cross-platform behavior and\n      up-to-date, locale-independent support for Unicode standards\n      ([#5939]).\n\n    * `reverseind` function to convert indices in reversed strings (e.g. from\n      reversed regex searches) to indices in the original string ([#9249]).\n\n    * `charwidth(c)` and `strwidth(s)` now return up-to-date cross-platform\n      results (via utf8proc) ([#10659]): Julia now likes pizza ([#3721]), but some terminals still don't.\n\n    * `is_valid_char(c)`, (now `isvalid(Char,c)` ([#11241])), now correctly handles Unicode \"non-characters\", which are valid Unicode codepoints ([#11171]).\n\n    * Backreferences in replacement strings in calls to `replace` with a `Regex` pattern are now supported ([#11849]).\n      Use the `s` string prefix to indicate a replacement string contains a backreference. For example, `replace(\"ab\", r\"(.)(.)\", s\"\\2\\1\")` yields \"ba\".\n\n    * Capture groups in regular expressions can now be named using PCRE syntax, `(?P<group_name>...)`. Capture group matches can be accessed by name by indexing a `Match` object with the name of the group ([#11566]).\n\n    * `countlines()` now counts all lines, not just non-empty ([#11947]).\n\n  * Array and AbstractArray improvements\n\n    * New multidimensional iterators and index types for efficient iteration over `AbstractArray`s. Array iteration should generally be written as `for i in eachindex(A) ... end` rather than `for i = 1:length(A) ... end` ([#8432]).\n\n    * New implementation of SubArrays with substantial performance and functionality improvements ([#8501]).\n\n    * AbstractArray subtypes only need to implement `size` and `getindex`\n      for scalar indices to support indexing; all other indexing behaviors\n      (including logical indexing, ranges of indices, vectors, colons, etc.) are\n      implemented in default fallbacks. Similarly, they only need to implement\n      scalar `setindex!` to support all forms of indexed assignment ([#10525]).\n\n    * AbstractArrays that do not extend `similar` now return an `Array` by\n      default ([#10525]).\n\n  * Data structures\n\n    * New `sortperm!` function for pre-allocated index arrays ([#8792]).\n\n    * Switch from `O(N)` to `O(log N)` algorithm for `dequeue!(pq, key)`\n    with `PriorityQueue`. This provides major speedups for large\n    queues ([#8011]).\n\n    * `PriorityQueue` now includes the order type among its\n      parameters, `PriorityQueue{KeyType,ValueType,OrderType}`. An\n      empty queue can be constructed as `pq =\n      PriorityQueue(KeyType,ValueType)`, if you intend to use the\n      default `Forward` order, or `pq = PriorityQueue(KeyType,\n      ValueType, OrderType)` otherwise ([#8011]).\n\n    * Efficient `mean` and `median` for ranges ([#8089]).\n\n    * `deepcopy` recurses through immutable types and makes copies of their mutable fields ([#8560]).\n\n    * `copy(a::DArray)` will now make a copy of a `DArray` ([#9745]).\n\n  * New types\n\n    * Enums are now supported through the `@enum EnumName EnumValue1\n      EnumValue2` syntax. Enum member values also support arbitrary\n      value assignment by the `@enum EnumName EnumValue1=1\n      EnumValue2=10 EnumValue3=20` syntax ([#10168]).\n\n    * New `Dates` module for calendar dates and other time-interval calculations ([#7654]).\n\n    * New `Nullable` type for missing data ([#8152]).\n\n    * A new `Val{T}` type allows one to dispatch on bits-type values ([#9452]).\n\n    * `linspace` now returns a `LinSpace` object which lazily computes linear interpolation of values between the start and stop values. It \"lifts\" endpoints which are approximately rational in the same manner as the `colon` operator.\n\n  * Arithmetic\n\n    * `convert` now checks for overflow when truncating integers or converting between\n    signed and unsigned ([#5413]).\n\n    * Arithmetic is type-preserving for more types; e.g. `(x::Int8) + (y::Int8)` now\n    yields an `Int8` ([#3759]).\n\n    * Reductions (e.g. `reduce`, `sum`) widen small types (integers smaller than `Int`, and `Float16`).\n\n    * Added optional rounding argument to floating-point constructors ([#8845]).\n\n    * Equality (`==`) and inequality (`<`/`<=`) comparisons are now correct\n      across all numeric types ([#9133], [#9198]).\n\n    * Rational arithmetic throws errors on overflow ([#8672]).\n\n    * Optional `log` and `log1p` functions implemented in pure Julia (experimental) ([#10008]).\n\n    * The `MathConst` type has been renamed `Irrational` ([#11922]).\n\n    * `isapprox` now has simpler and more sensible default tolerances ([#12393]), supports arrays, and has synonyms `≈` ([U+2248](https://www.fileformat.info/info/unicode/char/2248/index.htm), LaTeX `\\approx`) and `≉` ([U+2249](https://www.fileformat.info/info/unicode/char/2249/index.htm), LaTeX `\\napprox`) for `isapprox` and `!isapprox`, respectively ([#12472]).\n\n  * Numbers\n\n    * `primes` is now faster and has been extended to generate the primes in a user defined closed interval ([#12025]).\n\n    * The function `primesmask` which generates a prime sieve for a user defined closed interval is now exported ([#12025]).\n\n  * Random numbers\n\n    * Streamlined random number generation APIs [#8246].\n    The default `rand` no longer uses global state in the underlying C library,\n    dSFMT, making it closer to being thread-safe ([#8399], [#8832]).\n    All APIs can now take an `AbstractRNG` argument ([#8854], [#9065]). The seed argument to `srand` is now optional ([#8320], [#8854]).\n    The APIs accepting a range argument are extended to accept an arbitrary\n    `AbstractArray` ([#9049]).\n    Passing a range of `BigInt` to `rand` or `rand!` is now supported ([#9122]).\n    There are speed improvements across the board ([#8808], [#8941], [#8958], [#9083]).\n\n    * Significantly faster `randn` ([#9126], [#9132]).\n\n    * The `randexp` and `randexp!` functions are exported ([#9144]).\n\n  * File\n\n    * Added function `readlink` which returns the value of a symbolic link \"path\" ([#10714]).\n\n    * Added function `ismount` which checks if a directory is a mount point ([#11279]).\n\n    * The `cp` function now accepts keyword arguments `remove_destination` and `follow_symlinks` ([#10888]).\n\n    * The `mv` function now accepts keyword argument `remove_destination` ([#11145]).\n\n  * `Pipe()` creates a bidirectional I/O object that can be passed to `spawn` or `pipeline`\n    for redirecting process streams ([#12739]).\n\n  * Other improvements\n\n    * You can now tab-complete emoji via their [short names](https://www.emoji-cheat-sheet.com/), using `\\:name:<tab>` ([#10709]).\n\n    * `gc_enable` subsumes `gc_disable`, and also returns the previous GC state.\n\n    * `assert`, `@assert` now throws an `AssertionError` exception type ([#9734]).\n\n    * `@simd` now rejects invalid control flow (`@goto` / break / continue) in the inner loop body at compile time ([#8624]).\n\n    * The `machinefile` now supports a host count ([#7616]).\n\n    * `code_native` now outputs branch labels ([#8897]).\n\n    * Added `recvfrom` to get source address of UDP packets ([#9418]).\n\n    * `ClusterManager` performance improvements ([#9309]) and support for changing transports([#9434]).\n\n    * Added `Base.get_process_title` / `Base.set_process_title` ([#9957]).\n\n    * `readavailable` now returns a byte vector instead of a string.\n\n    * New `lock` and `unlock` functions, operating on `ReentrantLock`, to lock a stream during\n      concurrent writes from multiple tasks ([#10679]).\n\n    * `code_llvm` now outputs stripped IR without debug info or other attached metadata.\n      Use `code_llvm_raw` for the unstripped output ([#10747]).\n\n    * New `withenv(var=>val, ...) do ... end` function to temporarily\n      modify environment variables ([#10914]).\n\n    * New function `relpath` returns a relative filepath to path either from the current\n      directory or from an optional start directory ([#10893]).\n\n    * `mktemp` and `mktempdir` now take an optional argument to set which\n      directory the temporary file or directory is created in.\n\n    * New garbage collector tracked memory allocator functions: `jl_malloc`, `jl_calloc`,\n    `jl_realloc`, and `jl_free` with libc API ([[#12034]]).\n\n    * `mktempdir` and `mktemp` now have variants that take a function as its\n      first argument for automated clean-up ([[#9017]]).\n\nDeprecated or removed\n---------------------\n\n  * several syntax whitespace insensitivities have been deprecated ([#11891]).\n    ```julia\n    # function call\n    f (x)\n\n    # getindex\n    x [17]\n    rand(2) [1]\n\n    # function definition\n    f (x) = x^2\n    function foo (x)\n        x^2\n    end\n    ```\n\n  * indexing with `Real`s that are not subtypes of `Integer` (`Rational`, `AbstractFloat`, etc.) has been deprecated ([#10458]).\n\n  * `push!(A)` has been deprecated, use `append!` instead of splatting arguments to `push!` ([#10400]).\n\n  * `names` for composite datatypes has been deprecated and\n    renamed to `fieldnames` ([#10332]).\n\n  * `DArray` functionality has been removed from `Base` and is now a\n    standalone package under the JuliaParallel umbrella organization ([#10333]).\n\n  * The `Graphics` module has been removed from `Base` and is now a\n    standalone package ([#10150], [#9862]).\n\n  * The `Woodbury` special matrix type has been removed from `LinAlg` ([#10024]).\n\n  * `median` and `median!` no longer accept a `checknan` keyword argument ([#8605]).\n\n  * `inf` and `nan` are now deprecated in favor of `T(Inf)` and `T(NaN)`, respectively ([#8776]).\n\n  * `oftype(T::Type, x)` is deprecated in favor of `convert(T,x)` (or `T(x)`).\n\n  * `{...}` syntax is deprecated in favor of `Any[...]` ([#8578]).\n\n  * `itrunc`, `ifloor`, `iceil` and `iround` are deprecated in favour of\n    `trunc{T<:Integer}(T,x)`, `floor{T<:Integer}(T,x)`, etc.. `trunc` is now\n    always bound-checked;`Base.unsafe_trunc` provides the old unchecked `itrunc`\n    behaviour ([#9133]).\n\n  * `squeeze` now requires that passed dimension(s) are an `Int` or tuple of `Int`s;\n    calling `squeeze` with an arbitrary iterator is deprecated ([#9271]).\n    Additionally, passed dimensions must be unique and correspond to extant\n    dimensions of the input array.\n\n  * `randbool` is deprecated. Use `rand(Bool)` to produce a random boolean value, and\n    `bitrand` to produce a random BitArray ([#9105], [#9569]).\n\n  * `beginswith` is renamed to `startswith` ([#9578]).\n\n  * `null` is renamed to `nullspace` ([#9714]).\n\n  * The operators `|>`, `.>`, `>>`, and `.>>` as used for process I/O redirection\n    are replaced with the `pipeline` function ([#5349], [#12739]).\n\n  * `flipud(A)` and `fliplr(A)` have been deprecated in favor of `flipdim(A, 1)` and\n    `flipdim(A, 2)`, respectively ([#10446]).\n\n  * Numeric conversion functions whose names are lower-case versions of type\n    names have been removed. To convert a scalar, use the type name, e.g.\n    `Int32(x)`. To convert an array to a different element type, use\n    `Array{T}(x)`, `map(T,x)`, or `round(T,x)`. To parse a string as an integer\n    or floating-point number, use `parse` ([#1470], [#6211]).\n\n  * Low-level functions from the C library and dynamic linker have been moved to\n    modules `Libc` and `Libdl`, respectively ([#10328]).\n\n  * The functions `parseint`, `parsefloat`, `float32_isvalid`,\n  `float64_isvalid`, and the string-argument `BigInt` and `BigFloat` have\n  been replaced by `parse` and `tryparse` with a type argument. The string\n  macro `big\"xx\"` can be used to construct `BigInt` and `BigFloat` literals\n  ([#3631], [#5704], [#9487], [#10543], [#10955]).\n\n  * the `--int-literals` compiler option is no longer accepted ([#9597]).\n\n  * Instead of `linrange`, use `linspace` ([#9666]).\n\n  * The functions `is_valid_char`, `is_valid_ascii`, `is_valid_utf8`, `is_valid_utf16`, and\n    `is_valid_utf32` have been replaced by generic `isvalid` methods.\n    The single argument form `isvalid(value)` can now be used for values of type `Char`, `ASCIIString`,\n    `UTF8String`, `UTF16String` and `UTF32String`.\n    The two argument form `isvalid(type, value)` can be used with the above types, with values\n    of type `Vector{UInt8}`, `Vector{UInt16}`, `Vector{UInt32}`, and `Vector{Char}` ([#11241]).\n\n  * Instead of `utf32(64,123,...)` use `utf32(UInt32[64,123,...])` ([#11379]).\n\n  * `start_timer` and `stop_timer` are replaced by `Timer` and `close`.\n\n  * The following internal julia C functions have been renamed, in order to prevent\n    potential naming conflicts with C libraries: ([#11741])\n\n    * `gc_wb*` -> `jl_gc_wb*`\n\n    * `gc_queue_root` -> `jl_gc_queue_root`\n\n    * `allocobj` -> `jl_gc_allocobj`\n\n    * `alloc_[0-3]w` -> `jl_gc_alloc_*w`\n\n    * `diff_gc_total_bytes` -> `jl_gc_diff_total_bytes`\n\n    * `sync_gc_total_bytes` -> `jl_gc_sync_total_bytes`\n\n  * `require(::AbstractString)` and `reload` (see news about addition of `compile`).\n\n  * `cartesianmap` is deprecated in favor of iterating over a `CartesianRange`\n\nJulia v0.3.0 Release Notes\n==========================\n\nNew language features\n---------------------\n\n  * Greatly enhanced performance for passing and returning `Tuple`s ([#4042]).\n\n  * `Tuple`s (of `Integer`s, `Symbol`s, or `Bool`s) can now be used as type\n    parameters ([#5164]).\n\n  * An additional default \"inner\" constructor accepting any arguments is now\n    generated. Constructors that look like `MyType(a, b) = new(a, b)` do not\n    need to be added manually ([#4026], [#7071]).\n\n  * Expanded array type hierarchy to include an abstract `DenseArray` for\n    in-memory arrays with standard strided storage ([#987], [#2345],\n    [#6212]).\n\n  * When reloading code, types whose definitions have not changed can be\n    ignored in some cases.\n\n  * Binary `~` now parses as a vararg macro call to `@~`.\n    For example `x~y~z` => `@~ x y z` ([#4882]).\n\n  * Structure fields can now be accessed by index ([#4806]).\n\n  * If a module contains a function `__init__()`, it will be called when\n    the module is first loaded, and on process startup if a pre-compiled\n    version of the module is present ([#1268]).\n\n  * Multi-line comments ([#69], [#6128]): `#= .... =#`\n\n  * `--check-bounds=yes|no` compiler option\n\n  * Unicode identifiers are normalized (NFC) so that different encodings\n    of equivalent strings are treated as the same identifier ([#5462]).\n\n  * The set of characters permitted in identifiers has been restricted based\n    on Unicode categories. Generally, punctuation, formatting and control\n    characters, and operator symbols are not allowed in identifiers.\n    Number-like characters cannot begin identifiers ([#5936]).\n\n  * Define a limited number of infix Unicode operators ([#552], [#6582]):\n\n    | Precedence class | Operators (with synonyms, if any)\n    | ---------------- | ---------------------------------\n    |   ==             |  ≥ (>=) ≤ (<=) ≡ (===) ≠ (!=) ≢ (!==) .≥ (.>=) .≤ (.<=) .!= (.≠) ∈ (`in`) ∉ (`(x,y)->!in(x, y)`) ∋ (`(x,y)->in(y, x)`) ∌ (`(x,y)->!in(y, x)`) ⊆ (`issubset`) ⊈ (`(x,y)->!issubset(x, y)`) ⊊ (`(x,y)->x⊆y && x!=y`) |\n    |   +              | ∪ (`union`) |\n    |   *              | ÷ (`div`) ⋅ (`dot`) × (`cross`) ∩ (`intersect`) |\n    |   unary          | √ ∛ |\n\n    In addition to these, many of the Unicode operator symbols are parsed\n    as infix operators and are available for user-defined methods ([#6929]).\n\n  * Improved reporting of syntax errors ([#6179])\n\n  * `break` inside a `for` loop with multiple ranges now exits the entire loop nest ([#5154])\n\n  * Local goto statements using the `@goto` and `@label` macros ([#101]).\n\nREPL improvements\n-----------------\n\n  * New native-Julia REPL implementation, eliminating many problems\n    stemming from the old GNU Readline-based REPL ([#6270]).\n\n  * Tab-substitution of LaTeX math symbols (e.g. `\\alpha` by `α`) ([#6911]).\n    This also works in IJulia and in Emacs ([#6920]).\n\n  * `workspace()` function for obtaining a fresh workspace ([#1195]).\n\nLibrary improvements\n--------------------\n\n  * `isequal` now compares all numbers by value, ignoring type ([#6624]).\n\n  * Implement limited shared-memory parallelism with `SharedArray`s ([#5380]).\n\n  * Well-behaved floating-point ranges ([#2333], [#5636]).\n    Introduced the `FloatRange` type for floating-point ranges with a step,\n    which will give intuitive/correct results for classically problematic\n    ranges like `0.1:0.1:0.3`, `0.0:0.7:2.1` or `1.0:1/49:27.0`.\n\n  * `mod2pi` function ([#4799], [#4862]).\n\n  * New functions `minmax` and `extrema` ([#5275]).\n\n  * New macros `@edit`, `@less`, `@code_typed`, `@code_lowered`, `@code_llvm` and `@code_native` that all function like `@which` ([#5832]).\n\n  * `consume(p)` extended to `consume(p, args...)`, allowing it\n    to optionally pass `args...` back to the producer ([#4775]).\n\n  * `.juliarc.jl` is now loaded for both script and REPL execution ([#5076]).\n\n  * The `Sys` module now includes convenient functions for working with\n    dynamic library handles; `Sys.dllist` will list out all paths currently\n    loaded via `dlopen`, and `Sys.dlpath` will lookup a path from a handle\n\n  * `readdlm` treats multiple whitespace characters as a single delimiter\n    by default (when no delimiter is specified). This is useful for reading\n    fixed-width or messy whitespace-delimited data ([#5403]).\n\n  * The Airy, Bessel, Hankel, and related functions (`airy*`,\n    `bessel*`, `hankel*`) now detect errors returned by the underlying\n    AMOS library, throwing an `AmosException` in that case ([#4967]).\n\n  * `methodswith` now returns an array of `Method`s ([#5464]) rather\n    than just printing its results.\n\n  * `errno([code])` function to get or set the C library's `errno`.\n\n  * `GitHub` module for interacting with the GitHub API.\n\n  * Package improvements\n\n    * Packages are now installed into `.julia/v0.3` by default (or\n      whatever the current Julia version is), so that different\n      versions of Julia can co-exist with incompatible packages.\n      Existing `.julia` installations are unaffected unless `Pkg.init()`\n      is run to re-create the package directories ([#3344], [#5737]).\n\n    * `Pkg.submit(pkg[,commit])` function to automatically submit\n      a GitHub pull request to the package author.\n\n  * Collections improvements\n\n    * `Array` assignment (e.g. `x[:] = y`) ignores singleton dimensions\n      and allows the last dimension of one side to match all trailing dimensions\n      of the other ([#4048], [#4383]).\n\n    * `Dict(kv)` constructor for any iterator on `(key,value)` pairs.\n\n    * Multi-key `Dict`s: `D[x,y...]` is now a synonym for `D[(x,y...)]`\n      for associations `D` ([#4870]).\n\n    * `push!` and `unshift!` can push multiple arguments ([#4782]).\n\n    * `writedlm` and `writecsv` now accept any iterable collection of\n      iterable rows, in addition to `AbstractArray` arguments, and the\n      `writedlm` delimiter can be any printable object (e.g. a\n      `String`) instead of just a `Char`.\n\n    * `isempty` now works for any iterable collection ([#5827]).\n\n    * `unique` now accepts an optional `dim` argument for finding\n      unique rows or columns of a matrix or regions of a\n      multidimensional array ([#5811]).\n\n  * `Number` improvements\n\n    * The `ImaginaryUnit` type no longer exists. Instead, `im` is of type\n      `Complex{Bool}`. Making this work required changing the semantics of\n      boolean multiplication to approximately, `true * x = x` and\n      `false * x = zero(x)`, which can itself be considered useful ([#5468]).\n\n    * `big` is now vectorized ([#4766])\n\n    * `nextpow` and `prevpow` now return the `a^n` values instead of the\n      exponent `n` ([#4819])\n\n    * Overflow detection in `parseint` ([#4874]).\n\n    * `rand` now supports arbitrary `Ranges` arguments ([#5059]).\n\n    * `expm1` and `log1p` now support complex arguments ([#3141]).\n\n    * Broadcasting `.//` is now included ([#7094]).\n\n    * `prevfloat` and `nextfloat` now saturate at -Inf and Inf,\n      respectively, and have otherwise been fixed to follow the IEEE-754\n      standard functions `nextDown` and `nextUp` ([#5025]).\n\n    * New function `widen` for widening numeric types and values, and `widemul`\n      for multiplying to a larger type ([#6169]).\n\n    * `polygamma`, `digamma`, and `trigamma` now accept complex\n      arguments, and `zeta(s, z)` now provides the Hurwitz zeta ([#7125]).\n\n    * Narrow integer types (< 32 bits) are promoted to `Float64` rather\n      than to `Float32` by `float(x)` ([#7390]).\n\n  * `String` improvements\n\n    * Triple-quoted regex strings, `r\"\"\"...\"\"\"` ([#4934]).\n\n    * New string type, `UTF16String` ([#4930]), constructed by\n      `utf16(s)` from another string, a `Uint16` array or pointer, or\n      a byte array (possibly prefixed by a byte-order marker to\n      indicate endian-ness). Its data is internally `NULL`-terminated\n      for passing to C ([#7016]).\n\n    * `CharString` is renamed to `UTF32String` ([#4943]), and its data\n      is now internally `NULL`-terminated for passing to C ([#7016]).\n      `CharString(c::Char...)` is deprecated in favor of `utf32(c...)`,\n      and `utf32(s)` otherwise has functionality similar to `utf16(s)`.\n\n    * New `WString` and `wstring` synonyms for either `UTF16String`\n      and `utf16` or `UTF32String` and `utf32`, respectively, depending\n      on the width of `Cwchar_t` ([#7016]).\n\n    * `normalize_string` function to perform Unicode normalization,\n      case-folding, and other transformations ([#5576]).\n\n    * `pointer(s, i=1)` for `ByteString`, `UTF16String`, `UTF32String`,\n      and `SubString`s thereof ([#5703]).\n\n    * `bytestring` is automatically called on `String` arguments for\n      conversion to `Ptr{Uint8}` in `ccall` ([#5677]).\n\n  * Linear algebra improvements\n\n      * Balancing options for eigenvector calculations for general matrices ([#5428]).\n\n      * Mutating linear algebra functions no longer promote ([#5526]).\n\n      * `condskeel` for Skeel condition numbers ([#5726]).\n\n      * `norm(::Matrix)` no longer calculates a vector norm when the first\n        dimension is one ([#5545]); it always uses the operator (induced)\n        matrix norm.\n\n      * New `vecnorm(itr, p=2)` function that computes the norm of\n        any iterable collection of numbers as if it were a vector of\n        the same length. This generalizes and replaces `normfro` ([#6057]),\n        and `norm` is now type-stable ([#6056]).\n\n      * New `UniformScaling` matrix type and identity `I` constant ([#5810]).\n\n      * None of the concrete matrix factorization types are exported from `Base`\n        by default anymore.\n\n    * Sparse linear algebra\n\n      * 1-d sparse `getindex` has been implemented ([#7047])\n\n      * Faster sparse `getindex` ([#7131]).\n\n      * Faster sparse `kron` ([#4958]).\n\n      * `sparse(A) \\ B` now supports a matrix `B` of right-hand sides ([#5196]).\n\n      * `eigs(A, sigma)` now uses shift-and-invert for nonzero shifts `sigma` and inverse iteration for `which=\"SM\"`. If `sigma==nothing` (the new default), computes ordinary (forward) iterations ([#5776]).\n\n      * `sprand` is faster, and whether any entry is nonzero is now determined independently with the specified probability ([#6726]).\n\n    * Dense linear algebra for special matrix types\n\n      * Interconversions between the special matrix types `Diagonal`, `Bidiagonal`,\n        `SymTridiagonal`, `Triangular`, and `Triangular`, and `Matrix` are now allowed\n        for matrices which are representable in both source and destination types ([5e3f074b]).\n\n      * Allow for addition and subtraction over mixed matrix types, automatically promoting\n        the result to the denser matrix type ([a448e080], [#5927])\n\n      * new algorithms for linear solvers and eigensystems of `Bidiagonal`\n        matrices of generic element types ([#5277])\n\n      * new algorithms for linear solvers, eigensystems and singular systems of `Diagonal`\n        matrices of generic element types ([#5263])\n\n      * new algorithms for linear solvers and eigensystems of `Triangular`\n        matrices of generic element types ([#5255])\n\n      * specialized `inv` and `det` methods for `Tridiagonal` and `SymTridiagonal`\n        based on recurrence relations between principal minors ([#5358])\n\n      * specialized `transpose`, `ctranspose`, `istril`, `istriu` methods for\n        `Triangular` ([#5255]) and `Bidiagonal` ([#5277])\n\n      * new LAPACK wrappers\n        - condition number estimate `cond(A::Triangular)` ([#5255])\n\n      * parametrize `Triangular` on matrix type ([#7064])\n\n      * Lyapunov / Sylvester solver ([#7435])\n\n      * `eigvals` for `Symmetric`, `Tridiagonal` and `Hermitian` matrices now\n        support additional method signatures: ([#3688], [#6652], [#6678], [#7647])\n        - `eigvals(M, el, eu)` finds all eigenvalues in the interval `(el, eu]`\n        - `eigvals(M, il:iu)` finds the `il`th through the `iu`th eigenvalues (in ascending order)\n\n    * Dense linear algebra for generic matrix element types\n\n      * LU factorization ([#5381] and [#5430])\n\n      * QR factorization ([#5526])\n\n  * New function `deleteat!` deletes a specified index or indices and\n    returns the updated collection\n\n  * The `setenv` function for external processes now accepts a `dir` keyword\n    argument for specifying the directory to start the child process in ([#4888]).\n\n  * Constructors for collections (`Set`, `Dict`, etc.) now generally accept a\n    single iterable argument giving the elements of the collection ([#4996], [#4871])\n\n  * Ranges and arrays with the same elements are now unequal. This allows hashing\n    and comparing ranges to be faster ([#5778]).\n\n  * Broadcasting now works on arbitrary `AbstractArrays` ([#5387])\n\n  * Reduction functions that accept a pre-allocated output array, including\n    `sum!`, `prod!`, `maximum!`, `minimum!`, `all!`, `any!` ([#6197], [#5387])\n\n  * Faster performance on `fill!` and `copy!` for array types not supporting\n    efficient linear indexing ([#5671], [#5387])\n\n  * Changes to range types ([#5585])\n\n    * `Range` is now the abstract range type, instead of `Ranges`\n\n    * New function `range` for constructing ranges by length\n\n    * `Range` is now `StepRange`, and `Range1` is now `UnitRange`. Their\n      constructors accept end points instead of lengths. Both are subtypes of a\n      new abstract type `OrdinalRange`.\n\n    * Ranges now support `BigInt` and general ordinal types.\n\n    * Very large ranges (e.g. `0:typemax(Int)`) can now be constructed, but some\n      operations (e.g. `length`) will raise an `OverflowError`.\n\n  * Extended API for `cov` and `cor`, which accept keyword arguments `vardim`,\n    `corrected`, and `mean` ([#6273])\n\n  * New functions `randsubseq` and `randsubseq!` to create a random subsequence of an array ([#6726])\n\n  * New macro `@evalpoly` for efficient inline evaluation of polynomials ([#7146]).\n\n  * The signal filtering function `filt` now accepts an optional initial filter state vector. A new in-place function `filt!` is also exported ([#7513]).\n\n  * Significantly faster `cumsum` and `cumprod` ([#7359]).\n\n  * Implement `findmin` and `findmax` over specified array dimensions ([#6716]).\n\n  * Support memory-mapping of files with offsets on Windows ([#7242]).\n\n  * Catch writes to protect memory, such as when trying to modify a mmapped file opened in read-only mode ([#3434]).\n\nEnvironment improvements\n------------------------\n\n  * New `--code-coverage` and `--track-allocation` startup features allow one to measure the number of executions or the amount of memory allocated, respectively, at each line of code ([#5423],[#7464]).\n\n  * `Profile.init` now accepts keyword arguments, and returns the current settings when no arguments are supplied ([#7365]).\n\nBuild improvements\n------------------\n\n  * Dependencies are now verified against stored MD5/SHA512 hashes, to ensure\n    that the correct file has been downloaded and was not modified ([#6773]).\n\n\nDeprecated or removed\n---------------------\n\n  * `convert(Ptr{T1}, x::Array{T2})` is now deprecated unless `T1 == T2`\n    or `T1 == Void` ([#6073]).  (You can still explicitly `convert`\n    one pointer type into another if needed.)\n\n  * `Sys.shlib_ext` has been renamed to `Sys.dlext`\n\n  * `dense` is deprecated in favor of `full` ([#4759]).\n\n  * The `Stat` type is renamed `StatStruct` ([#4670]).\n\n  * `setrounding`, `rounding` and `setrounding` now take an additional\n    argument specifying the floating point type to which they apply. The old\n    behaviour and `[get/set/with]_bigfloat_rounding` functions are deprecated ([#5007]).\n\n  * `cholpfact` and `qrpfact` are deprecated in favor of keyword arguments in\n    `cholfact(..., pivot=true)` and `qrfact(..., pivot=true)` ([#5330]).\n\n  * `symmetrize!` is deprecated in favor of `Base.LinAlg.copytri!` ([#5427]).\n\n  * `myindexes` has been renamed to `localindexes` ([#5475]).\n\n  * `factorize!` is deprecated in favor of `factorize` ([#5526]).\n\n  * `nnz` counts the number of structural nonzeros in a sparse\n    matrix. Use `countnz` for the actual number of nonzeros ([#6769]).\n\n  * `setfield` is renamed `setfield!` ([#5748]).\n\n  * `put` and `take` are renamed `put!` and `take!` ([#5511]).\n\n  * `put!` now returns its first argument, the remote reference ([#5819]).\n\n  * `read` methods that modify a passed array are now called `read!` ([#5970])\n\n  * `infs` and `nans` are deprecated in favor of the more general `fill`.\n\n  * `*` and `div` are no longer supported for `Char`.\n\n  * `Range` is renamed `StepRange` and `Range1` is renamed `UnitRange`.\n    `Ranges` is renamed `Range`.\n\n  * `bitmix` is replaced by a 2-argument form of `hash`.\n\n  * `readsfrom` and `writesto` are replaced by `open` ([#6948]).\n\n  * `insert!` now throws a `BoundsError` if\n    `index > length(collection)+1` ([#7373]).\n\n  * No longer exported from `Base`:\n    * `start_reading`, `stop_reading`, `start_watching` ([#10885]).\n\nJulia v0.2.0 Release Notes\n==========================\n\nThe 0.2 release brings improvements to many areas of Julia. Among the\nmost visible changes are support for 64-bit Windows, keyword arguments\nto functions, immutable types, a redesigned and polished package\nmanager, a multimedia interface supporting usage of Julia in IPython,\na built-in profiler, and major improvements to Julia's linear algebra,\nI/O, and parallel capabilities. These are accompanied by many other\nchanges adding new features, enhancing the library's consistency,\nimproving performance, increasing test coverage, easing installation,\nand expanding the documentation. While not part of Julia proper, the\npackage ecosystem has also grown and matured considerably since the\n0.1 release. See below for more information about the long list of\nchanges that improve Julia's usability and performance.\n\nNew language features\n---------------------\n\n  * Keyword & optional function arguments ([#485], [#1817]).\n\n  * Immutable types ([#13]).\n\n  * Triple-quoted string literals ([#70]).\n\n  * New infix operator `in` (e.g. `x in S`), and corresponding function\n    `in(x,S)`, replacing `contains(S,x)` function ([#2703]).\n\n  * New variable bindings on each for loop and comprehension iteration ([#1571]).\n    For example, before this change:\n\n        julia> map(f->f(), { ()->i for i=1:3 })\n        3-element Any Array:\n         3\n         3\n         3\n\n    and after:\n\n        julia> map(f->f(), { ()->i for i=1:3 })\n        3-element Any Array:\n         1\n         2\n         3\n\n  * Explicit relative importing ([#2375]).\n\n  * Methods can be added to functions in other modules using dot syntax,\n    as in `Foo.bar(x) = 0`.\n\n  * `import module: name1, name2, ...` ([#5214]).\n\n  * A semicolon is now allowed after an `import` or `using` statement ([#4130]).\n\n  * In an interactive session (REPL), you can use `;cmd` to run `cmd` via an interactive\n    shell. For example:\n\n        julia> ;ls\n        CONTRIBUTING.md  Makefile           VERSION      cli/       deps/   julia@\n        DISTRIBUTING.md  NEWS.md            Windows.inc  doc/       src/    usr/\n        LICENSE.md       README.md          base/        etc/       test/\n        Make.inc         README.windows.md  contrib/     examples/  tmp/\n\nNew library functions\n---------------------\n\n  * Sampling profiler ([#2597]).\n\n  * Functions for examining stages of the compiler's output:\n    `code_lowered`, `code_typed`, `code_llvm`, and `code_native`.\n\n  * Multimedia I/O API (display, writemime, etcetera) ([#3932]).\n\n  * MPFR-based `BigFloat` ([#2814]), and many new `BigFloat` operations.\n\n  * New half-precision IEEE floating-point type, `Float16` ([#3467]).\n\n  * Support for setting floating-point rounding modes ([#3149]).\n\n  * `methodswith` shows all methods with an argument of specific type.\n\n  * `mapslices` provides a general way to perform operations on slices of arrays ([#2204]).\n\n  * `repeat` function for constructing Arrays with repeated elements ([#3605]).\n\n  * `Collections.PriorityQueue` type and `Collections.heap` functions ([#2920]).\n\n  * `quadgk` 1d-integration routine ([#3140]).\n\n  * `erfinv` and `erfcinv` functions ([#2987]).\n\n  * `varm`, `stdm` ([#2265]).\n\n  * `digamma`, `invdigamma`, `trigamma` and `polygamma` for calculating derivatives of `gamma` function ([#3233]).\n\n  * `logdet` ([#3070]).\n\n  * Names for C-compatible types: `Cchar`, `Clong`, etc. ([#2370]).\n\n  * `cglobal` to access global variables ([#1815]).\n\n  * `unsafe_pointer_to_objref` ([#2468]) and `pointer_from_objref` ([#2515]).\n\n  * `readandwrite` for external processes.\n\n  * I/O functions `readbytes` and `readbytes!` ([#3878]).\n\n  * `flush_cstdio` function ([#3949]).\n\n  * ClusterManager makes it possible to support different types of compute clusters\n    ([#3649], [#4014]).\n\n  * `rmprocs` for removing processors from a parallel computing session.\n    The system can also tolerate to some extent processors that die unexpectedly\n    ([#3050]).\n\n  * `interrupt` for interrupting worker processes ([#3819]).\n\n  * `timedwait` does a polled wait for an event till a specified timeout.\n\n  * `Condition` type with `wait` and `notify` functions for `Task` synchronization.\n\n  * `versioninfo` provides detailed version information, especially useful when\n    reporting and diagnosing bugs.\n\n  * `detach` for running child processes in a separate process group.\n\n  * `setenv` for passing environment variables to child processes.\n\n  * `ifelse` eagerly-evaluated conditional function, especially useful for\n    vectorized conditionals.\n\nLibrary improvements\n--------------------\n\n  * `isequal` now returns `false` for numbers of different types.\n    This makes it much easier to define hashing for new numeric types.\n    Uses of `Dict` with numeric keys might need to change\n    to account for this increased strictness.\n\n  * A redesigned and rewritten `Pkg` system is much more robust in case of problems.\n    The basic interface to adding and removing package requirements remains the\n    same, but great deal of additional functionality for developing packages in-place\n    was added. See the new [packages chapter] in the manual for further details.\n\n  * Sorting API updates ([#3665]) – see [sorting functions].\n\n  * The `delete!(d::Dict, key)` function has been split into separate `pop!`\n    and `delete!` functions ([#3439]).\n    `pop!(d,key)` removes `key` from `d` and returns the value that was associated with it;\n    it throws an exception if `d` does not contain `key`.\n    `delete!(d,key)` removes `key` from `d` and succeeds regardless of whether `d`\n    contained `key` or not, returning `d` itself in either case.\n\n  * Linear-algebra factorization routines (`lu`, `chol`, etc.) now return\n    `Factorization` objects (and `lud`, `chold`, etc. are deprecated; [#2212]).\n\n  * A number of improvements to sparse matrix capabilities and sparse linear algebra.\n\n  * More linear algebra fixes and eigensolver hooks\n    for `SymTridiagonal`, `Tridiagonal` and `Bidiagonal` matrix types\n    ([#2606], [#2608], [#2609], [#2611], [#2678], [#2713], [#2720], [#2725]).\n\n  * Change `integer_valued`, `real_valued`, and so on to `isinteger`, `isreal`,\n    and so on, and semantics of the later are now value-based rather than type-based,\n    unlike MATLAB/Octave ([#3071]). `isbool` and `iscomplex` are eliminated in favor\n    of a general `iseltype` function.\n\n  * Transitive comparison of floats with rationals ([#3102]).\n\n  * Fast prime generation with `primes` and fast primality testing with `isprime`.\n\n  * `sum` and `cumsum` now use [pairwise summation] for better accuracy ([#4039]).\n\n  * Dot operators (`.+`, `.*` etc.) now broadcast singleton dimensions of array arguments.\n    This behavior can be applied to any function using `broadcast(f, ...)`.\n\n  * `combinations`, `permutations`, and `partitions` now return iterators instead of a task,\n    and `integer_partitions` has been renamed to `partitions` ([#3989], [#4055]).\n\n  * `isreadable`/`iswritable` methods added for more IO types ([#3872]).\n\n  * Much faster and improved `readdlm` and `writedlm` ([#3350], [#3468], [#3483]).\n\n  * Faster `matchall` ([#3719]), and various string and regex improvements.\n\n  * Documentation of advanced linear algebra features ([#2807]).\n\n  * Support optional RTLD flags in `dlopen` ([#2380]).\n\n  * `pmap` now works with any iterable collection.\n\n  * Options in `pmap` for retrying or ignoring failed tasks.\n\n  * New `sinpi(x)` and `cospi(x)` functions to compute sine and cosine of `pi*x`\n    more accurately ([#4112]).\n\n  * New implementations of elementary complex functions\n    `sqrt`, `log`, `asin`, `acos`, `atan`, `tanh`, `asinh`, `acosh`, `atanh`\n    with correct branch cuts ([#2891]).\n\n  * Improved behavior of `SubArray` ([#4412], [#4284], [#4044], [#3697], [#3790],\n    [#3148], [#2844], [#2644] and various other fixes).\n\n  * New convenience functions in graphics API.\n\n  * Improved backtraces on Windows and OS X.\n\n  * Implementation of reduction functions (including `reduce`, `mapreduce`, `sum`, `prod`,\n    `maximum`, `minimum`, `all`, and `any`) are refactored, with improved type stability,\n    efficiency, and consistency ([#6116], [#7035], [#7061], [#7106]).\n\nDeprecated or removed\n---------------------\n\n  * Methods of `min` and `max` that do reductions were renamed to\n    `minimum` and `maximum`. `min(x)` is now `minimum(x)`, and\n    `min(x,(),dim)` is now `minimum(x,dim)` ([#4235]).\n\n  * `ComplexPair` was renamed to `Complex` and made `immutable`,\n    and `Complex128` and so on are now aliases to the new `Complex` type.\n\n  * `!` was added to the name of many mutating functions,\n    e.g., `push` was renamed `push!` ([#907]).\n\n  * `ref` renamed to `getindex`, and `assign` to `setindex!` ([#1484]).\n\n  * `writeable` renamed to `writable` ([#3874]).\n\n  * `logb` and `ilogb` renamed to `exponent` ([#2516]).\n\n  * `quote_string` became a method of `repr`.\n\n  * `safe_char`, `check_ascii`, and `check_utf8` replaced by\n    `is_valid_char`, `is_valid_ascii`, and `is_valid_utf8`, respectively.\n\n  * `each_line`, `each_match`, `begins_with`, `ends_with`, `parse_float`,\n    `parse_int`, and `seek_end` replaced by: `eachline`, `eachmatch`, and so on\n    (`_` was removed) ([#1539]).\n\n  * `parse_bin(s)` replaced by `parseint(s,2)`;\n    `parse_oct(s)` replaced by `parseint(s,8)`;\n    `parse_hex(s)` replaced by `parseint(s,16)`.\n\n  * `findn_nzs` replaced by `findnz` ([#1539]).\n\n  * `DivideByZeroError` replaced by `DivideError`.\n\n  * `addprocs_ssh`, `addprocs_ssh_tunnel`, and `addprocs_local`\n    replaced by `addprocs` (with keyword options).\n\n  * `remote_call`, `remote_call_fetch`, and `remote_call_wait`\n    replaced by `remotecall`, `remotecall_fetch`, and `remotecall_wait`.\n\n  * `has` replaced by `in` for sets and by `haskey` for dictionaries.\n\n  * `diagmm` and `diagmm!` replaced by `scale` and `scale!` ([#2916]).\n\n  * `unsafe_ref` and `unsafe_assign` replaced by `unsafe_load` and `unsafe_store!`.\n\n  * `add_each!` and `del_each!` replaced by `union!` and `setdiff!`.\n\n  * `isdenormal` renamed to `issubnormal` ([#3105]).\n\n  * `expr` replaced by direct call to `Expr` constructor.\n\n  * `|`, `&`, `$`, `-`, and `~` for sets replaced by\n    `union`, `intersect`, `symdiff`, `setdiff`, and `complement` ([#3272]).\n\n  * `square` function removed.\n\n  * `pascal` function removed.\n\n  * `add` and `add!` for `Set` replaced by `push!`.\n\n  * `ls` function deprecated in favor of `readdir` or `;ls` in the REPL.\n\n  * `start_timer` now expects arguments in units of seconds, not milliseconds.\n\n  * Shell redirection operators `|`, `>`, and `<` eliminated in favor of a new\n    operator `|>` ([#3523]).\n\n  * `amap` is deprecated in favor of new `mapslices` functionality.\n\n  * The `Reverse` iterator was removed since it did not work in many cases.\n\n  * The `gcd` function now returns a non-negative value regardless of\n    the argument signs, and various other sign problems with `invmod`,\n    `lcm`, `gcdx`, and `powermod` were fixed ([#4811]).\n\nMiscellaneous changes\n---------------------\n\n  * `julia-release-*` executables renamed to `julia-*`,\n    and `libjulia-release` renamed to `libjulia` ([#4177]).\n\n  * Packages will now be installed in `.julia/vX.Y`, where\n    X.Y is the current Julia version.\n\nBugfixes and performance updates\n--------------------------------\n\nToo numerous to mention.\n\n[packages chapter]: https://docs.julialang.org/en/v1/stdlib/Pkg/\n[sorting functions]: https://docs.julialang.org/en/v1/base/sort/\n[pairwise summation]: https://en.wikipedia.org/wiki/Pairwise_summation\n[a448e080]: https://github.com/JuliaLang/julia/commit/a448e080dc736c7fb326426dfcb2528be36973d3\n[5e3f074b]: https://github.com/JuliaLang/julia/commit/5e3f074b9173044a0a4219f9b285879ff7cec041\n<!--- generated by NEWS-update.jl: -->\n[#13]: https://github.com/JuliaLang/julia/issues/13\n[#69]: https://github.com/JuliaLang/julia/issues/69\n[#70]: https://github.com/JuliaLang/julia/issues/70\n[#101]: https://github.com/JuliaLang/julia/issues/101\n[#265]: https://github.com/JuliaLang/julia/issues/265\n[#485]: https://github.com/JuliaLang/julia/issues/485\n[#550]: https://github.com/JuliaLang/julia/issues/550\n[#552]: https://github.com/JuliaLang/julia/issues/552\n[#907]: https://github.com/JuliaLang/julia/issues/907\n[#964]: https://github.com/JuliaLang/julia/issues/964\n[#987]: https://github.com/JuliaLang/julia/issues/987\n[#1090]: https://github.com/JuliaLang/julia/issues/1090\n[#1195]: https://github.com/JuliaLang/julia/issues/1195\n[#1268]: https://github.com/JuliaLang/julia/issues/1268\n[#1470]: https://github.com/JuliaLang/julia/issues/1470\n[#1484]: https://github.com/JuliaLang/julia/issues/1484\n[#1539]: https://github.com/JuliaLang/julia/issues/1539\n[#1571]: https://github.com/JuliaLang/julia/issues/1571\n[#1815]: https://github.com/JuliaLang/julia/issues/1815\n[#1817]: https://github.com/JuliaLang/julia/issues/1817\n[#2204]: https://github.com/JuliaLang/julia/issues/2204\n[#2212]: https://github.com/JuliaLang/julia/issues/2212\n[#2265]: https://github.com/JuliaLang/julia/issues/2265\n[#2333]: https://github.com/JuliaLang/julia/issues/2333\n[#2345]: https://github.com/JuliaLang/julia/issues/2345\n[#2370]: https://github.com/JuliaLang/julia/issues/2370\n[#2375]: https://github.com/JuliaLang/julia/issues/2375\n[#2380]: https://github.com/JuliaLang/julia/issues/2380\n[#2403]: https://github.com/JuliaLang/julia/issues/2403\n[#2468]: https://github.com/JuliaLang/julia/issues/2468\n[#2488]: https://github.com/JuliaLang/julia/issues/2488\n[#2515]: https://github.com/JuliaLang/julia/issues/2515\n[#2516]: https://github.com/JuliaLang/julia/issues/2516\n[#2597]: https://github.com/JuliaLang/julia/issues/2597\n[#2606]: https://github.com/JuliaLang/julia/issues/2606\n[#2608]: https://github.com/JuliaLang/julia/issues/2608\n[#2609]: https://github.com/JuliaLang/julia/issues/2609\n[#2611]: https://github.com/JuliaLang/julia/issues/2611\n[#2644]: https://github.com/JuliaLang/julia/issues/2644\n[#2678]: https://github.com/JuliaLang/julia/issues/2678\n[#2703]: https://github.com/JuliaLang/julia/issues/2703\n[#2713]: https://github.com/JuliaLang/julia/issues/2713\n[#2720]: https://github.com/JuliaLang/julia/issues/2720\n[#2725]: https://github.com/JuliaLang/julia/issues/2725\n[#2807]: https://github.com/JuliaLang/julia/issues/2807\n[#2814]: https://github.com/JuliaLang/julia/issues/2814\n[#2844]: https://github.com/JuliaLang/julia/issues/2844\n[#2891]: https://github.com/JuliaLang/julia/issues/2891\n[#2916]: https://github.com/JuliaLang/julia/issues/2916\n[#2920]: https://github.com/JuliaLang/julia/issues/2920\n[#2987]: https://github.com/JuliaLang/julia/issues/2987\n[#3050]: https://github.com/JuliaLang/julia/issues/3050\n[#3070]: https://github.com/JuliaLang/julia/issues/3070\n[#3071]: https://github.com/JuliaLang/julia/issues/3071\n[#3102]: https://github.com/JuliaLang/julia/issues/3102\n[#3105]: https://github.com/JuliaLang/julia/issues/3105\n[#3140]: https://github.com/JuliaLang/julia/issues/3140\n[#3141]: https://github.com/JuliaLang/julia/issues/3141\n[#3148]: https://github.com/JuliaLang/julia/issues/3148\n[#3149]: https://github.com/JuliaLang/julia/issues/3149\n[#3214]: https://github.com/JuliaLang/julia/issues/3214\n[#3233]: https://github.com/JuliaLang/julia/issues/3233\n[#3272]: https://github.com/JuliaLang/julia/issues/3272\n[#3344]: https://github.com/JuliaLang/julia/issues/3344\n[#3350]: https://github.com/JuliaLang/julia/issues/3350\n[#3434]: https://github.com/JuliaLang/julia/issues/3434\n[#3439]: https://github.com/JuliaLang/julia/issues/3439\n[#3467]: https://github.com/JuliaLang/julia/issues/3467\n[#3468]: https://github.com/JuliaLang/julia/issues/3468\n[#3483]: https://github.com/JuliaLang/julia/issues/3483\n[#3523]: https://github.com/JuliaLang/julia/issues/3523\n[#3605]: https://github.com/JuliaLang/julia/issues/3605\n[#3631]: https://github.com/JuliaLang/julia/issues/3631\n[#3649]: https://github.com/JuliaLang/julia/issues/3649\n[#3665]: https://github.com/JuliaLang/julia/issues/3665\n[#3688]: https://github.com/JuliaLang/julia/issues/3688\n[#3697]: https://github.com/JuliaLang/julia/issues/3697\n[#3719]: https://github.com/JuliaLang/julia/issues/3719\n[#3721]: https://github.com/JuliaLang/julia/issues/3721\n[#3737]: https://github.com/JuliaLang/julia/issues/3737\n[#3759]: https://github.com/JuliaLang/julia/issues/3759\n[#3790]: https://github.com/JuliaLang/julia/issues/3790\n[#3819]: https://github.com/JuliaLang/julia/issues/3819\n[#3872]: https://github.com/JuliaLang/julia/issues/3872\n[#3874]: https://github.com/JuliaLang/julia/issues/3874\n[#3878]: https://github.com/JuliaLang/julia/issues/3878\n[#3932]: https://github.com/JuliaLang/julia/issues/3932\n[#3949]: https://github.com/JuliaLang/julia/issues/3949\n[#3989]: https://github.com/JuliaLang/julia/issues/3989\n[#4014]: https://github.com/JuliaLang/julia/issues/4014\n[#4026]: https://github.com/JuliaLang/julia/issues/4026\n[#4039]: https://github.com/JuliaLang/julia/issues/4039\n[#4042]: https://github.com/JuliaLang/julia/issues/4042\n[#4044]: https://github.com/JuliaLang/julia/issues/4044\n[#4048]: https://github.com/JuliaLang/julia/issues/4048\n[#4055]: https://github.com/JuliaLang/julia/issues/4055\n[#4112]: https://github.com/JuliaLang/julia/issues/4112\n[#4130]: https://github.com/JuliaLang/julia/issues/4130\n[#4163]: https://github.com/JuliaLang/julia/issues/4163\n[#4177]: https://github.com/JuliaLang/julia/issues/4177\n[#4211]: https://github.com/JuliaLang/julia/issues/4211\n[#4235]: https://github.com/JuliaLang/julia/issues/4235\n[#4284]: https://github.com/JuliaLang/julia/issues/4284\n[#4383]: https://github.com/JuliaLang/julia/issues/4383\n[#4412]: https://github.com/JuliaLang/julia/issues/4412\n[#4470]: https://github.com/JuliaLang/julia/issues/4470\n[#4615]: https://github.com/JuliaLang/julia/issues/4615\n[#4670]: https://github.com/JuliaLang/julia/issues/4670\n[#4759]: https://github.com/JuliaLang/julia/issues/4759\n[#4766]: https://github.com/JuliaLang/julia/issues/4766\n[#4775]: https://github.com/JuliaLang/julia/issues/4775\n[#4782]: https://github.com/JuliaLang/julia/issues/4782\n[#4799]: https://github.com/JuliaLang/julia/issues/4799\n[#4806]: https://github.com/JuliaLang/julia/issues/4806\n[#4811]: https://github.com/JuliaLang/julia/issues/4811\n[#4819]: https://github.com/JuliaLang/julia/issues/4819\n[#4862]: https://github.com/JuliaLang/julia/issues/4862\n[#4867]: https://github.com/JuliaLang/julia/issues/4867\n[#4870]: https://github.com/JuliaLang/julia/issues/4870\n[#4871]: https://github.com/JuliaLang/julia/issues/4871\n[#4874]: https://github.com/JuliaLang/julia/issues/4874\n[#4882]: https://github.com/JuliaLang/julia/issues/4882\n[#4888]: https://github.com/JuliaLang/julia/issues/4888\n[#4923]: https://github.com/JuliaLang/julia/issues/4923\n[#4930]: https://github.com/JuliaLang/julia/issues/4930\n[#4934]: https://github.com/JuliaLang/julia/issues/4934\n[#4943]: https://github.com/JuliaLang/julia/issues/4943\n[#4958]: https://github.com/JuliaLang/julia/issues/4958\n[#4967]: https://github.com/JuliaLang/julia/issues/4967\n[#4996]: https://github.com/JuliaLang/julia/issues/4996\n[#5007]: https://github.com/JuliaLang/julia/issues/5007\n[#5025]: https://github.com/JuliaLang/julia/issues/5025\n[#5059]: https://github.com/JuliaLang/julia/issues/5059\n[#5076]: https://github.com/JuliaLang/julia/issues/5076\n[#5154]: https://github.com/JuliaLang/julia/issues/5154\n[#5164]: https://github.com/JuliaLang/julia/issues/5164\n[#5196]: https://github.com/JuliaLang/julia/issues/5196\n[#5214]: https://github.com/JuliaLang/julia/issues/5214\n[#5227]: https://github.com/JuliaLang/julia/issues/5227\n[#5255]: https://github.com/JuliaLang/julia/issues/5255\n[#5263]: https://github.com/JuliaLang/julia/issues/5263\n[#5275]: https://github.com/JuliaLang/julia/issues/5275\n[#5277]: https://github.com/JuliaLang/julia/issues/5277\n[#5330]: https://github.com/JuliaLang/julia/issues/5330\n[#5349]: https://github.com/JuliaLang/julia/issues/5349\n[#5358]: https://github.com/JuliaLang/julia/issues/5358\n[#5380]: https://github.com/JuliaLang/julia/issues/5380\n[#5381]: https://github.com/JuliaLang/julia/issues/5381\n[#5387]: https://github.com/JuliaLang/julia/issues/5387\n[#5403]: https://github.com/JuliaLang/julia/issues/5403\n[#5413]: https://github.com/JuliaLang/julia/issues/5413\n[#5423]: https://github.com/JuliaLang/julia/issues/5423\n[#5427]: https://github.com/JuliaLang/julia/issues/5427\n[#5428]: https://github.com/JuliaLang/julia/issues/5428\n[#5430]: https://github.com/JuliaLang/julia/issues/5430\n[#5462]: https://github.com/JuliaLang/julia/issues/5462\n[#5464]: https://github.com/JuliaLang/julia/issues/5464\n[#5468]: https://github.com/JuliaLang/julia/issues/5468\n[#5475]: https://github.com/JuliaLang/julia/issues/5475\n[#5511]: https://github.com/JuliaLang/julia/issues/5511\n[#5526]: https://github.com/JuliaLang/julia/issues/5526\n[#5545]: https://github.com/JuliaLang/julia/issues/5545\n[#5576]: https://github.com/JuliaLang/julia/issues/5576\n[#5585]: https://github.com/JuliaLang/julia/issues/5585\n[#5636]: https://github.com/JuliaLang/julia/issues/5636\n[#5671]: https://github.com/JuliaLang/julia/issues/5671\n[#5677]: https://github.com/JuliaLang/julia/issues/5677\n[#5703]: https://github.com/JuliaLang/julia/issues/5703\n[#5704]: https://github.com/JuliaLang/julia/issues/5704\n[#5726]: https://github.com/JuliaLang/julia/issues/5726\n[#5737]: https://github.com/JuliaLang/julia/issues/5737\n[#5748]: https://github.com/JuliaLang/julia/issues/5748\n[#5776]: https://github.com/JuliaLang/julia/issues/5776\n[#5778]: https://github.com/JuliaLang/julia/issues/5778\n[#5810]: https://github.com/JuliaLang/julia/issues/5810\n[#5811]: https://github.com/JuliaLang/julia/issues/5811\n[#5819]: https://github.com/JuliaLang/julia/issues/5819\n[#5827]: https://github.com/JuliaLang/julia/issues/5827\n[#5832]: https://github.com/JuliaLang/julia/issues/5832\n[#5927]: https://github.com/JuliaLang/julia/issues/5927\n[#5936]: https://github.com/JuliaLang/julia/issues/5936\n[#5939]: https://github.com/JuliaLang/julia/issues/5939\n[#5970]: https://github.com/JuliaLang/julia/issues/5970\n[#6056]: https://github.com/JuliaLang/julia/issues/6056\n[#6057]: https://github.com/JuliaLang/julia/issues/6057\n[#6073]: https://github.com/JuliaLang/julia/issues/6073\n[#6081]: https://github.com/JuliaLang/julia/issues/6081\n[#6116]: https://github.com/JuliaLang/julia/issues/6116\n[#6128]: https://github.com/JuliaLang/julia/issues/6128\n[#6169]: https://github.com/JuliaLang/julia/issues/6169\n[#6179]: https://github.com/JuliaLang/julia/issues/6179\n[#6190]: https://github.com/JuliaLang/julia/issues/6190\n[#6197]: https://github.com/JuliaLang/julia/issues/6197\n[#6211]: https://github.com/JuliaLang/julia/issues/6211\n[#6212]: https://github.com/JuliaLang/julia/issues/6212\n[#6270]: https://github.com/JuliaLang/julia/issues/6270\n[#6273]: https://github.com/JuliaLang/julia/issues/6273\n[#6582]: https://github.com/JuliaLang/julia/issues/6582\n[#6624]: https://github.com/JuliaLang/julia/issues/6624\n[#6652]: https://github.com/JuliaLang/julia/issues/6652\n[#6678]: https://github.com/JuliaLang/julia/issues/6678\n[#6716]: https://github.com/JuliaLang/julia/issues/6716\n[#6726]: https://github.com/JuliaLang/julia/issues/6726\n[#6739]: https://github.com/JuliaLang/julia/issues/6739\n[#6769]: https://github.com/JuliaLang/julia/issues/6769\n[#6773]: https://github.com/JuliaLang/julia/issues/6773\n[#6842]: https://github.com/JuliaLang/julia/issues/6842\n[#6911]: https://github.com/JuliaLang/julia/issues/6911\n[#6920]: https://github.com/JuliaLang/julia/issues/6920\n[#6929]: https://github.com/JuliaLang/julia/issues/6929\n[#6948]: https://github.com/JuliaLang/julia/issues/6948\n[#7016]: https://github.com/JuliaLang/julia/issues/7016\n[#7035]: https://github.com/JuliaLang/julia/issues/7035\n[#7047]: https://github.com/JuliaLang/julia/issues/7047\n[#7061]: https://github.com/JuliaLang/julia/issues/7061\n[#7064]: https://github.com/JuliaLang/julia/issues/7064\n[#7071]: https://github.com/JuliaLang/julia/issues/7071\n[#7094]: https://github.com/JuliaLang/julia/issues/7094\n[#7106]: https://github.com/JuliaLang/julia/issues/7106\n[#7125]: https://github.com/JuliaLang/julia/issues/7125\n[#7131]: https://github.com/JuliaLang/julia/issues/7131\n[#7146]: https://github.com/JuliaLang/julia/issues/7146\n[#7234]: https://github.com/JuliaLang/julia/issues/7234\n[#7236]: https://github.com/JuliaLang/julia/issues/7236\n[#7242]: https://github.com/JuliaLang/julia/issues/7242\n[#7258]: https://github.com/JuliaLang/julia/issues/7258\n[#7264]: https://github.com/JuliaLang/julia/issues/7264\n[#7311]: https://github.com/JuliaLang/julia/issues/7311\n[#7359]: https://github.com/JuliaLang/julia/issues/7359\n[#7365]: https://github.com/JuliaLang/julia/issues/7365\n[#7373]: https://github.com/JuliaLang/julia/issues/7373\n[#7390]: https://github.com/JuliaLang/julia/issues/7390\n[#7435]: https://github.com/JuliaLang/julia/issues/7435\n[#7464]: https://github.com/JuliaLang/julia/issues/7464\n[#7513]: https://github.com/JuliaLang/julia/issues/7513\n[#7616]: https://github.com/JuliaLang/julia/issues/7616\n[#7647]: https://github.com/JuliaLang/julia/issues/7647\n[#7654]: https://github.com/JuliaLang/julia/issues/7654\n[#7669]: https://github.com/JuliaLang/julia/issues/7669\n[#7704]: https://github.com/JuliaLang/julia/issues/7704\n[#7917]: https://github.com/JuliaLang/julia/issues/7917\n[#7992]: https://github.com/JuliaLang/julia/issues/7992\n[#8011]: https://github.com/JuliaLang/julia/issues/8011\n[#8036]: https://github.com/JuliaLang/julia/issues/8036\n[#8089]: https://github.com/JuliaLang/julia/issues/8089\n[#8113]: https://github.com/JuliaLang/julia/issues/8113\n[#8135]: https://github.com/JuliaLang/julia/issues/8135\n[#8152]: https://github.com/JuliaLang/julia/issues/8152\n[#8246]: https://github.com/JuliaLang/julia/issues/8246\n[#8283]: https://github.com/JuliaLang/julia/issues/8283\n[#8297]: https://github.com/JuliaLang/julia/issues/8297\n[#8320]: https://github.com/JuliaLang/julia/issues/8320\n[#8399]: https://github.com/JuliaLang/julia/issues/8399\n[#8423]: https://github.com/JuliaLang/julia/issues/8423\n[#8432]: https://github.com/JuliaLang/julia/issues/8432\n[#8467]: https://github.com/JuliaLang/julia/issues/8467\n[#8501]: https://github.com/JuliaLang/julia/issues/8501\n[#8560]: https://github.com/JuliaLang/julia/issues/8560\n[#8578]: https://github.com/JuliaLang/julia/issues/8578\n[#8599]: https://github.com/JuliaLang/julia/issues/8599\n[#8605]: https://github.com/JuliaLang/julia/issues/8605\n[#8624]: https://github.com/JuliaLang/julia/issues/8624\n[#8660]: https://github.com/JuliaLang/julia/issues/8660\n[#8672]: https://github.com/JuliaLang/julia/issues/8672\n[#8712]: https://github.com/JuliaLang/julia/issues/8712\n[#8734]: https://github.com/JuliaLang/julia/issues/8734\n[#8745]: https://github.com/JuliaLang/julia/issues/8745\n[#8750]: https://github.com/JuliaLang/julia/issues/8750\n[#8776]: https://github.com/JuliaLang/julia/issues/8776\n[#8791]: https://github.com/JuliaLang/julia/issues/8791\n[#8792]: https://github.com/JuliaLang/julia/issues/8792\n[#8808]: https://github.com/JuliaLang/julia/issues/8808\n[#8814]: https://github.com/JuliaLang/julia/issues/8814\n[#8816]: https://github.com/JuliaLang/julia/issues/8816\n[#8827]: https://github.com/JuliaLang/julia/issues/8827\n[#8832]: https://github.com/JuliaLang/julia/issues/8832\n[#8845]: https://github.com/JuliaLang/julia/issues/8845\n[#8846]: https://github.com/JuliaLang/julia/issues/8846\n[#8854]: https://github.com/JuliaLang/julia/issues/8854\n[#8867]: https://github.com/JuliaLang/julia/issues/8867\n[#8872]: https://github.com/JuliaLang/julia/issues/8872\n[#8897]: https://github.com/JuliaLang/julia/issues/8897\n[#8905]: https://github.com/JuliaLang/julia/issues/8905\n[#8941]: https://github.com/JuliaLang/julia/issues/8941\n[#8958]: https://github.com/JuliaLang/julia/issues/8958\n[#8974]: https://github.com/JuliaLang/julia/issues/8974\n[#9017]: https://github.com/JuliaLang/julia/issues/9017\n[#9049]: https://github.com/JuliaLang/julia/issues/9049\n[#9065]: https://github.com/JuliaLang/julia/issues/9065\n[#9083]: https://github.com/JuliaLang/julia/issues/9083\n[#9105]: https://github.com/JuliaLang/julia/issues/9105\n[#9122]: https://github.com/JuliaLang/julia/issues/9122\n[#9126]: https://github.com/JuliaLang/julia/issues/9126\n[#9132]: https://github.com/JuliaLang/julia/issues/9132\n[#9133]: https://github.com/JuliaLang/julia/issues/9133\n[#9144]: https://github.com/JuliaLang/julia/issues/9144\n[#9198]: https://github.com/JuliaLang/julia/issues/9198\n[#9249]: https://github.com/JuliaLang/julia/issues/9249\n[#9261]: https://github.com/JuliaLang/julia/issues/9261\n[#9271]: https://github.com/JuliaLang/julia/issues/9271\n[#9294]: https://github.com/JuliaLang/julia/issues/9294\n[#9309]: https://github.com/JuliaLang/julia/issues/9309\n[#9343]: https://github.com/JuliaLang/julia/issues/9343\n[#9418]: https://github.com/JuliaLang/julia/issues/9418\n[#9425]: https://github.com/JuliaLang/julia/issues/9425\n[#9434]: https://github.com/JuliaLang/julia/issues/9434\n[#9452]: https://github.com/JuliaLang/julia/issues/9452\n[#9482]: https://github.com/JuliaLang/julia/issues/9482\n[#9487]: https://github.com/JuliaLang/julia/issues/9487\n[#9503]: https://github.com/JuliaLang/julia/issues/9503\n[#9569]: https://github.com/JuliaLang/julia/issues/9569\n[#9575]: https://github.com/JuliaLang/julia/issues/9575\n[#9578]: https://github.com/JuliaLang/julia/issues/9578\n[#9597]: https://github.com/JuliaLang/julia/issues/9597\n[#9627]: https://github.com/JuliaLang/julia/issues/9627\n[#9666]: https://github.com/JuliaLang/julia/issues/9666\n[#9690]: https://github.com/JuliaLang/julia/issues/9690\n[#9701]: https://github.com/JuliaLang/julia/issues/9701\n[#9714]: https://github.com/JuliaLang/julia/issues/9714\n[#9734]: https://github.com/JuliaLang/julia/issues/9734\n[#9745]: https://github.com/JuliaLang/julia/issues/9745\n[#9779]: https://github.com/JuliaLang/julia/issues/9779\n[#9862]: https://github.com/JuliaLang/julia/issues/9862\n[#9957]: https://github.com/JuliaLang/julia/issues/9957\n[#10008]: https://github.com/JuliaLang/julia/issues/10008\n[#10024]: https://github.com/JuliaLang/julia/issues/10024\n[#10031]: https://github.com/JuliaLang/julia/issues/10031\n[#10075]: https://github.com/JuliaLang/julia/issues/10075\n[#10117]: https://github.com/JuliaLang/julia/issues/10117\n[#10150]: https://github.com/JuliaLang/julia/issues/10150\n[#10168]: https://github.com/JuliaLang/julia/issues/10168\n[#10180]: https://github.com/JuliaLang/julia/issues/10180\n[#10228]: https://github.com/JuliaLang/julia/issues/10228\n[#10328]: https://github.com/JuliaLang/julia/issues/10328\n[#10331]: https://github.com/JuliaLang/julia/issues/10331\n[#10332]: https://github.com/JuliaLang/julia/issues/10332\n[#10333]: https://github.com/JuliaLang/julia/issues/10333\n[#10380]: https://github.com/JuliaLang/julia/issues/10380\n[#10400]: https://github.com/JuliaLang/julia/issues/10400\n[#10446]: https://github.com/JuliaLang/julia/issues/10446\n[#10458]: https://github.com/JuliaLang/julia/issues/10458\n[#10472]: https://github.com/JuliaLang/julia/issues/10472\n[#10525]: https://github.com/JuliaLang/julia/issues/10525\n[#10543]: https://github.com/JuliaLang/julia/issues/10543\n[#10548]: https://github.com/JuliaLang/julia/issues/10548\n[#10659]: https://github.com/JuliaLang/julia/issues/10659\n[#10679]: https://github.com/JuliaLang/julia/issues/10679\n[#10709]: https://github.com/JuliaLang/julia/issues/10709\n[#10714]: https://github.com/JuliaLang/julia/issues/10714\n[#10747]: https://github.com/JuliaLang/julia/issues/10747\n[#10844]: https://github.com/JuliaLang/julia/issues/10844\n[#10870]: https://github.com/JuliaLang/julia/issues/10870\n[#10885]: https://github.com/JuliaLang/julia/issues/10885\n[#10888]: https://github.com/JuliaLang/julia/issues/10888\n[#10893]: https://github.com/JuliaLang/julia/issues/10893\n[#10914]: https://github.com/JuliaLang/julia/issues/10914\n[#10946]: https://github.com/JuliaLang/julia/issues/10946\n[#10955]: https://github.com/JuliaLang/julia/issues/10955\n[#10994]: https://github.com/JuliaLang/julia/issues/10994\n[#11030]: https://github.com/JuliaLang/julia/issues/11030\n[#11067]: https://github.com/JuliaLang/julia/issues/11067\n[#11105]: https://github.com/JuliaLang/julia/issues/11105\n[#11145]: https://github.com/JuliaLang/julia/issues/11145\n[#11171]: https://github.com/JuliaLang/julia/issues/11171\n[#11196]: https://github.com/JuliaLang/julia/issues/11196\n[#11241]: https://github.com/JuliaLang/julia/issues/11241\n[#11242]: https://github.com/JuliaLang/julia/issues/11242\n[#11250]: https://github.com/JuliaLang/julia/issues/11250\n[#11279]: https://github.com/JuliaLang/julia/issues/11279\n[#11310]: https://github.com/JuliaLang/julia/issues/11310\n[#11347]: https://github.com/JuliaLang/julia/issues/11347\n[#11379]: https://github.com/JuliaLang/julia/issues/11379\n[#11432]: https://github.com/JuliaLang/julia/issues/11432\n[#11566]: https://github.com/JuliaLang/julia/issues/11566\n[#11686]: https://github.com/JuliaLang/julia/issues/11686\n[#11688]: https://github.com/JuliaLang/julia/issues/11688\n[#11741]: https://github.com/JuliaLang/julia/issues/11741\n[#11849]: https://github.com/JuliaLang/julia/issues/11849\n[#11891]: https://github.com/JuliaLang/julia/issues/11891\n[#11922]: https://github.com/JuliaLang/julia/issues/11922\n[#11947]: https://github.com/JuliaLang/julia/issues/11947\n[#11985]: https://github.com/JuliaLang/julia/issues/11985\n[#12025]: https://github.com/JuliaLang/julia/issues/12025\n[#12031]: https://github.com/JuliaLang/julia/issues/12031\n[#12034]: https://github.com/JuliaLang/julia/issues/12034\n[#12087]: https://github.com/JuliaLang/julia/issues/12087\n[#12137]: https://github.com/JuliaLang/julia/issues/12137\n[#12162]: https://github.com/JuliaLang/julia/issues/12162\n[#12231]: https://github.com/JuliaLang/julia/issues/12231\n[#12264]: https://github.com/JuliaLang/julia/issues/12264\n[#12274]: https://github.com/JuliaLang/julia/issues/12274\n[#12385]: https://github.com/JuliaLang/julia/issues/12385\n[#12393]: https://github.com/JuliaLang/julia/issues/12393\n[#12458]: https://github.com/JuliaLang/julia/issues/12458\n[#12472]: https://github.com/JuliaLang/julia/issues/12472\n[#12491]: https://github.com/JuliaLang/julia/issues/12491\n[#12563]: https://github.com/JuliaLang/julia/issues/12563\n[#12576]: https://github.com/JuliaLang/julia/issues/12576\n[#12727]: https://github.com/JuliaLang/julia/issues/12727\n[#12739]: https://github.com/JuliaLang/julia/issues/12739\n[#12819]: https://github.com/JuliaLang/julia/issues/12819\n[#12872]: https://github.com/JuliaLang/julia/issues/12872\n[#13062]: https://github.com/JuliaLang/julia/issues/13062\n[#13171]: https://github.com/JuliaLang/julia/issues/13171\n[#13232]: https://github.com/JuliaLang/julia/issues/13232\n[#13338]: https://github.com/JuliaLang/julia/issues/13338\n[#13387]: https://github.com/JuliaLang/julia/issues/13387\n[#13412]: https://github.com/JuliaLang/julia/issues/13412\n[#13440]: https://github.com/JuliaLang/julia/issues/13440\n[#13465]: https://github.com/JuliaLang/julia/issues/13465\n[#13480]: https://github.com/JuliaLang/julia/issues/13480\n[#13496]: https://github.com/JuliaLang/julia/issues/13496\n[#13542]: https://github.com/JuliaLang/julia/issues/13542\n[#13612]: https://github.com/JuliaLang/julia/issues/13612\n[#13680]: https://github.com/JuliaLang/julia/issues/13680\n[#13681]: https://github.com/JuliaLang/julia/issues/13681\n[#13707]: https://github.com/JuliaLang/julia/issues/13707\n[#13774]: https://github.com/JuliaLang/julia/issues/13774\n[#13780]: https://github.com/JuliaLang/julia/issues/13780\n[#13824]: https://github.com/JuliaLang/julia/issues/13824\n[#13825]: https://github.com/JuliaLang/julia/issues/13825\n[#13897]: https://github.com/JuliaLang/julia/issues/13897\n[#14052]: https://github.com/JuliaLang/julia/issues/14052\n[#14114]: https://github.com/JuliaLang/julia/issues/14114\n[#14140]: https://github.com/JuliaLang/julia/issues/14140\n[#14194]: https://github.com/JuliaLang/julia/issues/14194\n[#14243]: https://github.com/JuliaLang/julia/issues/14243\n[#14335]: https://github.com/JuliaLang/julia/issues/14335\n[#14413]: https://github.com/JuliaLang/julia/issues/14413\n[#14424]: https://github.com/JuliaLang/julia/issues/14424\n[#14458]: https://github.com/JuliaLang/julia/issues/14458\n[#14469]: https://github.com/JuliaLang/julia/issues/14469\n[#14474]: https://github.com/JuliaLang/julia/issues/14474\n[#14519]: https://github.com/JuliaLang/julia/issues/14519\n[#14608]: https://github.com/JuliaLang/julia/issues/14608\n[#14623]: https://github.com/JuliaLang/julia/issues/14623\n[#14660]: https://github.com/JuliaLang/julia/issues/14660\n[#14676]: https://github.com/JuliaLang/julia/issues/14676\n[#14759]: https://github.com/JuliaLang/julia/issues/14759\n[#14777]: https://github.com/JuliaLang/julia/issues/14777\n[#14798]: https://github.com/JuliaLang/julia/issues/14798\n[#15007]: https://github.com/JuliaLang/julia/issues/15007\n[#15032]: https://github.com/JuliaLang/julia/issues/15032\n[#15172]: https://github.com/JuliaLang/julia/issues/15172\n[#15192]: https://github.com/JuliaLang/julia/issues/15192\n[#15242]: https://github.com/JuliaLang/julia/issues/15242\n[#15244]: https://github.com/JuliaLang/julia/issues/15244\n[#15258]: https://github.com/JuliaLang/julia/issues/15258\n[#15409]: https://github.com/JuliaLang/julia/issues/15409\n[#15431]: https://github.com/JuliaLang/julia/issues/15431\n[#15524]: https://github.com/JuliaLang/julia/issues/15524\n[#15550]: https://github.com/JuliaLang/julia/issues/15550\n[#15609]: https://github.com/JuliaLang/julia/issues/15609\n[#15708]: https://github.com/JuliaLang/julia/issues/15708\n[#15731]: https://github.com/JuliaLang/julia/issues/15731\n[#15763]: https://github.com/JuliaLang/julia/issues/15763\n[#15804]: https://github.com/JuliaLang/julia/issues/15804\n[#15850]: https://github.com/JuliaLang/julia/issues/15850\n[#15975]: https://github.com/JuliaLang/julia/issues/15975\n[#16010]: https://github.com/JuliaLang/julia/issues/16010\n[#16024]: https://github.com/JuliaLang/julia/issues/16024\n[#16058]: https://github.com/JuliaLang/julia/issues/16058\n[#16071]: https://github.com/JuliaLang/julia/issues/16071\n[#16098]: https://github.com/JuliaLang/julia/issues/16098\n[#16107]: https://github.com/JuliaLang/julia/issues/16107\n[#16154]: https://github.com/JuliaLang/julia/issues/16154\n[#16213]: https://github.com/JuliaLang/julia/issues/16213\n[#16219]: https://github.com/JuliaLang/julia/issues/16219\n[#16260]: https://github.com/JuliaLang/julia/issues/16260\n[#16285]: https://github.com/JuliaLang/julia/issues/16285\n[#16362]: https://github.com/JuliaLang/julia/issues/16362\n[#16378]: https://github.com/JuliaLang/julia/issues/16378\n[#16403]: https://github.com/JuliaLang/julia/issues/16403\n[#16404]: https://github.com/JuliaLang/julia/issues/16404\n[#16450]: https://github.com/JuliaLang/julia/issues/16450\n[#16455]: https://github.com/JuliaLang/julia/issues/16455\n[#16466]: https://github.com/JuliaLang/julia/issues/16466\n[#16481]: https://github.com/JuliaLang/julia/issues/16481\n[#16502]: https://github.com/JuliaLang/julia/issues/16502\n[#16510]: https://github.com/JuliaLang/julia/issues/16510\n[#16600]: https://github.com/JuliaLang/julia/issues/16600\n[#16603]: https://github.com/JuliaLang/julia/issues/16603\n[#16621]: https://github.com/JuliaLang/julia/issues/16621\n[#16622]: https://github.com/JuliaLang/julia/issues/16622\n[#16645]: https://github.com/JuliaLang/julia/issues/16645\n[#16663]: https://github.com/JuliaLang/julia/issues/16663\n[#16731]: https://github.com/JuliaLang/julia/issues/16731\n[#16854]: https://github.com/JuliaLang/julia/issues/16854\n[#16953]: https://github.com/JuliaLang/julia/issues/16953\n[#16961]: https://github.com/JuliaLang/julia/issues/16961\n[#16972]: https://github.com/JuliaLang/julia/issues/16972\n[#16984]: https://github.com/JuliaLang/julia/issues/16984\n[#16986]: https://github.com/JuliaLang/julia/issues/16986\n[#17033]: https://github.com/JuliaLang/julia/issues/17033\n[#17037]: https://github.com/JuliaLang/julia/issues/17037\n[#17057]: https://github.com/JuliaLang/julia/issues/17057\n[#17075]: https://github.com/JuliaLang/julia/issues/17075\n[#17132]: https://github.com/JuliaLang/julia/issues/17132\n[#17155]: https://github.com/JuliaLang/julia/issues/17155\n[#17261]: https://github.com/JuliaLang/julia/issues/17261\n[#17265]: https://github.com/JuliaLang/julia/issues/17265\n[#17266]: https://github.com/JuliaLang/julia/issues/17266\n[#17300]: https://github.com/JuliaLang/julia/issues/17300\n[#17302]: https://github.com/JuliaLang/julia/issues/17302\n[#17323]: https://github.com/JuliaLang/julia/issues/17323\n[#17374]: https://github.com/JuliaLang/julia/issues/17374\n[#17393]: https://github.com/JuliaLang/julia/issues/17393\n[#17402]: https://github.com/JuliaLang/julia/issues/17402\n[#17404]: https://github.com/JuliaLang/julia/issues/17404\n[#17510]: https://github.com/JuliaLang/julia/issues/17510\n[#17546]: https://github.com/JuliaLang/julia/issues/17546\n[#17599]: https://github.com/JuliaLang/julia/issues/17599\n[#17607]: https://github.com/JuliaLang/julia/issues/17607\n[#17623]: https://github.com/JuliaLang/julia/issues/17623\n[#17654]: https://github.com/JuliaLang/julia/issues/17654\n[#17668]: https://github.com/JuliaLang/julia/issues/17668\n[#17723]: https://github.com/JuliaLang/julia/issues/17723\n[#17758]: https://github.com/JuliaLang/julia/issues/17758\n[#17785]: https://github.com/JuliaLang/julia/issues/17785\n[#18012]: https://github.com/JuliaLang/julia/issues/18012\n[#18050]: https://github.com/JuliaLang/julia/issues/18050\n[#18159]: https://github.com/JuliaLang/julia/issues/18159\n[#18218]: https://github.com/JuliaLang/julia/issues/18218\n[#18251]: https://github.com/JuliaLang/julia/issues/18251\n[#18330]: https://github.com/JuliaLang/julia/issues/18330\n[#18339]: https://github.com/JuliaLang/julia/issues/18339\n[#18342]: https://github.com/JuliaLang/julia/issues/18342\n[#18346]: https://github.com/JuliaLang/julia/issues/18346\n[#18441]: https://github.com/JuliaLang/julia/issues/18441\n[#18442]: https://github.com/JuliaLang/julia/issues/18442\n[#18444]: https://github.com/JuliaLang/julia/issues/18444\n[#18453]: https://github.com/JuliaLang/julia/issues/18453\n[#18457]: https://github.com/JuliaLang/julia/issues/18457\n[#18473]: https://github.com/JuliaLang/julia/issues/18473\n[#18558]: https://github.com/JuliaLang/julia/issues/18558\n[#18628]: https://github.com/JuliaLang/julia/issues/18628\n[#18642]: https://github.com/JuliaLang/julia/issues/18642\n[#18644]: https://github.com/JuliaLang/julia/issues/18644\n[#18660]: https://github.com/JuliaLang/julia/issues/18660\n[#18690]: https://github.com/JuliaLang/julia/issues/18690\n[#18754]: https://github.com/JuliaLang/julia/issues/18754\n[#18777]: https://github.com/JuliaLang/julia/issues/18777\n[#18832]: https://github.com/JuliaLang/julia/issues/18832\n[#18839]: https://github.com/JuliaLang/julia/issues/18839\n[#18891]: https://github.com/JuliaLang/julia/issues/18891\n[#18931]: https://github.com/JuliaLang/julia/issues/18931\n[#18965]: https://github.com/JuliaLang/julia/issues/18965\n[#18977]: https://github.com/JuliaLang/julia/issues/18977\n[#19018]: https://github.com/JuliaLang/julia/issues/19018\n[#19088]: https://github.com/JuliaLang/julia/issues/19088\n[#19157]: https://github.com/JuliaLang/julia/issues/19157\n[#19233]: https://github.com/JuliaLang/julia/issues/19233\n[#19239]: https://github.com/JuliaLang/julia/issues/19239\n[#19246]: https://github.com/JuliaLang/julia/issues/19246\n[#19259]: https://github.com/JuliaLang/julia/issues/19259\n[#19288]: https://github.com/JuliaLang/julia/issues/19288\n[#19305]: https://github.com/JuliaLang/julia/issues/19305\n[#19331]: https://github.com/JuliaLang/julia/issues/19331\n[#19371]: https://github.com/JuliaLang/julia/issues/19371\n[#19438]: https://github.com/JuliaLang/julia/issues/19438\n[#19449]: https://github.com/JuliaLang/julia/issues/19449\n[#19464]: https://github.com/JuliaLang/julia/issues/19464\n[#19469]: https://github.com/JuliaLang/julia/issues/19469\n[#19518]: https://github.com/JuliaLang/julia/issues/19518\n[#19533]: https://github.com/JuliaLang/julia/issues/19533\n[#19543]: https://github.com/JuliaLang/julia/issues/19543\n[#19594]: https://github.com/JuliaLang/julia/issues/19594\n[#19598]: https://github.com/JuliaLang/julia/issues/19598\n[#19635]: https://github.com/JuliaLang/julia/issues/19635\n[#19636]: https://github.com/JuliaLang/julia/issues/19636\n[#19660]: https://github.com/JuliaLang/julia/issues/19660\n[#19669]: https://github.com/JuliaLang/julia/issues/19669\n[#19670]: https://github.com/JuliaLang/julia/issues/19670\n[#19677]: https://github.com/JuliaLang/julia/issues/19677\n[#19680]: https://github.com/JuliaLang/julia/issues/19680\n[#19690]: https://github.com/JuliaLang/julia/issues/19690\n[#19692]: https://github.com/JuliaLang/julia/issues/19692\n[#19711]: https://github.com/JuliaLang/julia/issues/19711\n[#19712]: https://github.com/JuliaLang/julia/issues/19712\n[#19720]: https://github.com/JuliaLang/julia/issues/19720\n[#19721]: https://github.com/JuliaLang/julia/issues/19721\n[#19722]: https://github.com/JuliaLang/julia/issues/19722\n[#19724]: https://github.com/JuliaLang/julia/issues/19724\n[#19730]: https://github.com/JuliaLang/julia/issues/19730\n[#19737]: https://github.com/JuliaLang/julia/issues/19737\n[#19741]: https://github.com/JuliaLang/julia/issues/19741\n[#19766]: https://github.com/JuliaLang/julia/issues/19766\n[#19771]: https://github.com/JuliaLang/julia/issues/19771\n[#19779]: https://github.com/JuliaLang/julia/issues/19779\n[#19784]: https://github.com/JuliaLang/julia/issues/19784\n[#19786]: https://github.com/JuliaLang/julia/issues/19786\n[#19787]: https://github.com/JuliaLang/julia/issues/19787\n[#19791]: https://github.com/JuliaLang/julia/issues/19791\n[#19800]: https://github.com/JuliaLang/julia/issues/19800\n[#19802]: https://github.com/JuliaLang/julia/issues/19802\n[#19811]: https://github.com/JuliaLang/julia/issues/19811\n[#19814]: https://github.com/JuliaLang/julia/issues/19814\n[#19841]: https://github.com/JuliaLang/julia/issues/19841\n[#19878]: https://github.com/JuliaLang/julia/issues/19878\n[#19900]: https://github.com/JuliaLang/julia/issues/19900\n[#19901]: https://github.com/JuliaLang/julia/issues/19901\n[#19903]: https://github.com/JuliaLang/julia/issues/19903\n[#19919]: https://github.com/JuliaLang/julia/issues/19919\n[#19920]: https://github.com/JuliaLang/julia/issues/19920\n[#19925]: https://github.com/JuliaLang/julia/issues/19925\n[#19926]: https://github.com/JuliaLang/julia/issues/19926\n[#19931]: https://github.com/JuliaLang/julia/issues/19931\n[#19934]: https://github.com/JuliaLang/julia/issues/19934\n[#19935]: https://github.com/JuliaLang/julia/issues/19935\n[#19937]: https://github.com/JuliaLang/julia/issues/19937\n[#19944]: https://github.com/JuliaLang/julia/issues/19944\n[#19949]: https://github.com/JuliaLang/julia/issues/19949\n[#19950]: https://github.com/JuliaLang/julia/issues/19950\n[#19989]: https://github.com/JuliaLang/julia/issues/19989\n[#20009]: https://github.com/JuliaLang/julia/issues/20009\n[#20047]: https://github.com/JuliaLang/julia/issues/20047\n[#20058]: https://github.com/JuliaLang/julia/issues/20058\n[#20079]: https://github.com/JuliaLang/julia/issues/20079\n[#20135]: https://github.com/JuliaLang/julia/issues/20135\n[#20164]: https://github.com/JuliaLang/julia/issues/20164\n[#20213]: https://github.com/JuliaLang/julia/issues/20213\n[#20228]: https://github.com/JuliaLang/julia/issues/20228\n[#20248]: https://github.com/JuliaLang/julia/issues/20248\n[#20249]: https://github.com/JuliaLang/julia/issues/20249\n[#20268]: https://github.com/JuliaLang/julia/issues/20268\n[#20308]: https://github.com/JuliaLang/julia/issues/20308\n[#20321]: https://github.com/JuliaLang/julia/issues/20321\n[#20327]: https://github.com/JuliaLang/julia/issues/20327\n[#20328]: https://github.com/JuliaLang/julia/issues/20328\n[#20330]: https://github.com/JuliaLang/julia/issues/20330\n[#20342]: https://github.com/JuliaLang/julia/issues/20342\n[#20345]: https://github.com/JuliaLang/julia/issues/20345\n[#20403]: https://github.com/JuliaLang/julia/issues/20403\n[#20404]: https://github.com/JuliaLang/julia/issues/20404\n[#20406]: https://github.com/JuliaLang/julia/issues/20406\n[#20414]: https://github.com/JuliaLang/julia/issues/20414\n[#20418]: https://github.com/JuliaLang/julia/issues/20418\n[#20427]: https://github.com/JuliaLang/julia/issues/20427\n[#20435]: https://github.com/JuliaLang/julia/issues/20435\n[#20500]: https://github.com/JuliaLang/julia/issues/20500\n[#20530]: https://github.com/JuliaLang/julia/issues/20530\n[#20543]: https://github.com/JuliaLang/julia/issues/20543\n[#20609]: https://github.com/JuliaLang/julia/issues/20609\n[#20889]: https://github.com/JuliaLang/julia/issues/20889\n[#20952]: https://github.com/JuliaLang/julia/issues/20952\n[#21183]: https://github.com/JuliaLang/julia/issues/21183\n[#21818]: https://github.com/JuliaLang/julia/issues/21818\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.29,
          "content": "MIT License\n\nCopyright (c) 2009-2024: Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors: https://github.com/JuliaLang/julia/contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nend of terms and conditions\n\nPlease see [THIRDPARTY.md](./THIRDPARTY.md) for license information for other software used in this project.\n"
        },
        {
          "name": "Make.inc",
          "type": "blob",
          "size": 59.72,
          "content": "# -*- mode: makefile -*-\n# vi:syntax=make\n\n## Note:\n##   It is generally preferable to change these options, for\n##   your local machine, in a file named `Make.user` in the toplevel\n##   and build directories\n##\n## For developers, take care to not insert comments on the same line as\n## variable declarations. The spaces between the variable value and the\n## comment will be included in the value.\n\n# Julia precompilation options\n# Set to zero to turn off extra precompile (e.g. for the REPL)\nJULIA_PRECOMPILE ?= 1\n\n# Set FORCE_ASSERTIONS to 1 to enable assertions in the C and C++ portions\n# of the Julia code base. You may also want to set LLVM_ASSERTIONS to 1,\n# which will enable assertions in LLVM.\n# An \"assert build\" of Julia is a build that has both FORCE_ASSERTIONS=1\n# and LLVM_ASSERTIONS=1.\nFORCE_ASSERTIONS ?= 0\n\n# Set BOOTSTRAP_DEBUG_LEVEL to 1 to enable Julia-level stacktrace during bootstrapping.\nBOOTSTRAP_DEBUG_LEVEL ?= 0\n\n# OPENBLAS build options\nOPENBLAS_TARGET_ARCH:=\nOPENBLAS_SYMBOLSUFFIX:=\nOPENBLAS_LIBNAMESUFFIX:=\nOPENBLAS_DYNAMIC_ARCH:=0\nOPENBLAS_USE_THREAD:=1\n\n# Flags for using libraries available on the system instead of building them.\n# Please read the notes around usage of SYSTEM flags in README.md\n# Issues resulting from use of SYSTEM versions will generally not be accepted.\nUSE_SYSTEM_CSL:=0\nUSE_SYSTEM_LLVM:=0\nUSE_SYSTEM_LIBUNWIND:=0\nDISABLE_LIBUNWIND:=0\nUSE_SYSTEM_PCRE:=0\nUSE_SYSTEM_LIBM:=0\nUSE_SYSTEM_OPENLIBM:=0\nUNTRUSTED_SYSTEM_LIBM:=0\nUSE_SYSTEM_DSFMT:=0\nUSE_SYSTEM_LIBBLASTRAMPOLINE:=0\nUSE_SYSTEM_BLAS:=0\nUSE_SYSTEM_LAPACK:=0\nUSE_SYSTEM_GMP:=0\nUSE_SYSTEM_MPFR:=0\nUSE_SYSTEM_LIBSUITESPARSE:=0\nUSE_SYSTEM_LIBUV:=0\nUSE_SYSTEM_UTF8PROC:=0\nUSE_SYSTEM_OPENSSL:=0\nUSE_SYSTEM_LIBSSH2:=0\nUSE_SYSTEM_NGHTTP2:=0\nUSE_SYSTEM_CURL:=0\nUSE_SYSTEM_LIBGIT2:=0\nUSE_SYSTEM_PATCHELF:=0\nUSE_SYSTEM_LIBWHICH:=0\nUSE_SYSTEM_ZLIB:=0\nUSE_SYSTEM_P7ZIP:=0\nUSE_SYSTEM_LLD:=0\n\n# Link to the LLVM shared library\nUSE_LLVM_SHLIB := 1\n\n# Enable threading with one thread\nJULIA_THREADS := 1\n\n# Set to 1 to enable profiling with OProfile\nUSE_OPROFILE_JITEVENTS ?= 0\n\n# USE_PERF_JITEVENTS, and USE_INTEL_JITEVENTS defined below since default is OS specific\n\n# assume we don't have LIBSSP support in our compiler, will enable later if likely true\nHAVE_SSP := 0\n\n# GC debugging options\nWITH_GC_VERIFY := 0\nWITH_GC_DEBUG_ENV := 0\n\n# Use stock if MMTK_PLAN hasn't been defined\nMMTK_PLAN ?= None\n\n# Enable DTrace support\nWITH_DTRACE := 0\n\n# Enable ITTAPI integration\nWITH_ITTAPI := 0\n\n# Enable NVTX integration\nWITH_NVTX := 0\n\n# Enable Tracy support\nWITH_TRACY := 0\nWITH_TRACY_CALLSTACKS := 0\n\n# Enable Timing Counts support\nWITH_TIMING_COUNTS := 0\n\n# Prevent picking up $ARCH from the environment variables\nARCH:=\n\n\n# Literal values that are hard to use in Makefiles otherwise:\ndefine newline # a literal \\n\n\n\nendef\nCOMMA:=,\nSPACE:=$(eval) $(eval)\n\n# force a sane / stable configuration\nexport LC_ALL=C\nexport LANG=C\n\n# Respect `FORCE_COLOR` environment variable: <https://force-color.org/>.\nifndef FORCE_COLOR\nFORCE_COLOR := \"\"\nendif\n\n# Respect `NO_COLOR` environment variable: <https://no-color.org/>.\nifndef NO_COLOR\nNO_COLOR := \"\"\nendif\n\n# When both `FORCE_COLOR` and `NO_COLOR` are defined, the former has precedence.\nifneq ($(FORCE_COLOR), \"\")\nNO_COLOR = \"\"\nendif\n\nWARNCOLOR:=\"\\033[33;1m\"\nENDCOLOR:=\"\\033[0m\"\n\nCCCOLOR:=\"\\033[34m\"\nLINKCOLOR:=\"\\033[34;1m\"\nPERLCOLOR:=\"\\033[35m\"\nFLISPCOLOR:=\"\\033[32m\"\nJULIACOLOR:=\"\\033[32;1m\"\nDTRACECOLOR:=\"\\033[32;1m\"\n\nSRCCOLOR:=\"\\033[33m\"\nBINCOLOR:=\"\\033[37;1m\"\nJULCOLOR:=\"\\033[34;1m\"\n\nifneq ($(NO_COLOR), \"\")\nWARNCOLOR:=\"\"\nENDCOLOR:=\"\"\n\nCCCOLOR:=\"\"\nLINKCOLOR:=\"\"\nPERLCOLOR:=\"\"\nFLISPCOLOR:=\"\"\nJULIACOLOR:=\"\"\nDTRACECOLOR:=\"\"\n\nSRCCOLOR:=\"\"\nBINCOLOR:=\"\"\nJULCOLOR:=\"\"\nendif\n\n# We need python for things like BB triplet recognition and relative path computation.\n# We don't really care about version, generally, so just find something that works:\nPYTHON := \"$(shell which python 2>/dev/null || which python3 2>/dev/null || which python2 2>/dev/null || echo \"{python|python3|python2} not found\")\"\nPYTHON_SYSTEM := $(shell $(PYTHON) -c 'from __future__ import print_function; import platform; print(platform.system())')\n\n# If we're running on Cygwin, but using a native-windows Python, we need to use cygpath -w\nifneq ($(and $(filter $(PYTHON_SYSTEM),Windows),$(findstring CYGWIN,$(shell uname))),)\npython_cygpath = `cygpath -w $(1)`\nelse\npython_cygpath = $(1)\nendif\n\n# Get a relative path easily\ndefine rel_path\n$(shell $(PYTHON) $(call python_cygpath,$(JULIAHOME)/contrib/relative_path.py) $(call python_cygpath,$(1)) $(call python_cygpath,$(2)))\nendef\n\n# pick up BUILDROOT from O= if it isn't already set (from recursive make)\nifeq ($(BUILDROOT),)\nifeq (\"$(origin O)\", \"command line\")\n  BUILDROOT := $(abspath $O)\n  BUILDDIR := $(abspath $(BUILDROOT)/$(call rel_path,$(JULIAHOME),$(SRCDIR)))\n  $(info $(shell printf '$(JULIACOLOR)Building into $(BUILDROOT)$(ENDCOLOR)')) # use printf to expand the escape sequences\nelse\n  BUILDROOT:=$(JULIAHOME)\nendif\nendif\nexport BUILDROOT\nunexport O\n\n# we include twice to pickup user definitions better\n# include from JULIAHOME first so that BUILDROOT can override\nMAYBE_HOST :=\nifneq ($(BUILDING_HOST_TOOLS),1)\nMAKE_USER_FNAME = Make.user\nelse\nMAYBE_HOST := /host\nMAKE_USER_FNAME = Make.host.user\nendif\n\nifeq (exists, $(shell [ -e $(JULIAHOME)/$(MAKE_USER_FNAME) ] && echo exists ))\ninclude $(JULIAHOME)/$(MAKE_USER_FNAME)\nendif\nifeq (exists, $(shell [ -e $(BUILDROOT)/$(MAKE_USER_FNAME) ] && echo exists ))\ninclude $(BUILDROOT)/$(MAKE_USER_FNAME)\nendif\n\n# disable automatic Makefile rules\n.SUFFIXES:\n\n# find out if git repository is available\nifeq ($(shell [ -e $(JULIAHOME)/.git ] && echo true || echo \"Warning: git information unavailable; versioning information limited\" >&2), true)\nNO_GIT := 0\nelse\nNO_GIT := 1\nendif\n\n# Julia's Semantic Versioning system labels the three decimal places in a version number as\n# the major, minor and patch versions.  Typically the major version would be incremented\n# whenever a backwards-incompatible change is made, the minor version would be incremented\n# whenever major backwards-compatible changes are made, and the patch version would be\n# incremented whenever smaller changes are made.  However, before v1.0.0, the major\n# version number is always zero and the meanings shift down a place; the minor version\n# number becomes the major version number, the patch version number becomes the minor\n# version number, and there is no patch version number to speak of.  In this case, the\n# version v0.4.1 has backwards-compatible changes as compared to v0.4.0, and the\n# version v0.5.0 has major backwards-incompatible changes as compared to v0.4.X.\nJULIA_VERSION := $(shell cat $(JULIAHOME)/VERSION)\nJULIA_MAJOR_VERSION := $(shell echo $(JULIA_VERSION) | cut -d'-' -f 1 | cut -d'.' -f 1)\nJULIA_MINOR_VERSION := $(shell echo $(JULIA_VERSION) | cut -d'-' -f 1 | cut -d'.' -f 2)\nJULIA_PATCH_VERSION := $(shell echo $(JULIA_VERSION) | cut -d'-' -f 1 | cut -d'+' -f 1 | cut -d'.' -f 3)\n\n# libjulia's SONAME will follow the format libjulia.so.$(SOMAJOR). Before v1.0.0,\n# somajor was a two-decimal value (e.g. libjulia.so.0.5). During v1.0.x - v1.9.x,\n# somajor was simply the major version number (e.g. libjulia.so.1). Starting in\n# v1.10.0, somajor is major.minor again (e.g. libjulia.so.1.10)\n# The file itself will ultimately symlink to libjulia.so.$(SOMAJOR).$(SOMINOR)\nSOMAJOR := $(JULIA_MAJOR_VERSION).$(JULIA_MINOR_VERSION)\nSOMINOR := $(JULIA_PATCH_VERSION)\n\n# This suffix affects libjulia's SONAME and the symbol version associated with\n# all of its exported symbols.\nifdef SYMBOL_VERSION_SUFFIX\nSOMAJOR := $(SOMAJOR)_$(SYMBOL_VERSION_SUFFIX)\nendif\n\nifneq ($(NO_GIT), 1)\nJULIA_COMMIT := $(shell git -C $(JULIAHOME) rev-parse --short=10 HEAD)\nelse\nJULIA_COMMIT := $(JULIA_VERSION)\nendif\n\n# Override `JULIA_COMMIT` to `JULIA_VERSION` if we're on a tagged commit\nifeq ($(shell git -C $(JULIAHOME) describe --tags --exact-match > /dev/null 2>&1 && echo true),true)\nJULIA_COMMIT := $(JULIA_VERSION)\nendif\n\n# Whether to use GPL libraries or not.\nUSE_GPL_LIBS ?= 1\n\n# Whether to install Julia as a framework on Darwin (Apple) platforms.\nDARWIN_FRAMEWORK ?= 0\n\n# Override in Make.user to customize the framework:\nFRAMEWORK_NAME ?= Julia\nFRAMEWORK_VERSION ?= $(JULIA_MAJOR_VERSION).$(JULIA_MINOR_VERSION)\n\n# The prefix for all code sign identifiers.\nDARWIN_CODESIGN_ID_BASE ?= org.julialang.julia\n# The codesign id for the ui/repl (also embedded in Info.plist).\ndarwin_codesign_id_julia_ui := $(DARWIN_CODESIGN_ID_BASE).ui\n# The prefix for all deps.\ndarwin_codesign_id_julia_deps := $(DARWIN_CODESIGN_ID_BASE).deps\n\n# Directories and file structure of a Darwin framework:\nframework_directory:=$(FRAMEWORK_NAME).framework\nframework_versions:=$(framework_directory)/Versions\nframework_currver:=$(framework_versions)/$(FRAMEWORK_VERSION)\nframework_dylib:=$(framework_currver)/$(FRAMEWORK_NAME)\nframework_headers:=$(framework_currver)/Headers\nframework_documentation:=$(framework_currver)/Documentation\nframework_resources:=$(framework_currver)/Resources\nframework_frameworks:=$(framework_currver)/Frameworks\nframework_modules:=$(framework_currver)/Modules\nframework_helpers:=$(framework_currver)/Helpers\nframework_infoplist:=$(framework_resources)/Info.plist\n\n# Directories where said libraries get installed to\nprefix ?= $(BUILDROOT)/julia-$(JULIA_COMMIT)\nifeq ($(DARWIN_FRAMEWORK), 1)\nbindir := $(prefix)/$(framework_helpers)\nlibdir := $(prefix)/$(framework_currver)\nlibexecdir := $(prefix)/$(framework_helpers)\ndatarootdir := $(prefix)/$(framework_resources)\ndocdir := $(prefix)/$(framework_documentation)\nmandir := $(datarootdir)/man\nman1dir := $(mandir)/man1\nincludedir := $(prefix)/$(framework_headers)\nsysconfdir := $(prefix)/$(framework_resources)\nelse\nbindir := $(prefix)/bin\nlibdir := $(prefix)/lib\nlibexecdir := $(prefix)/libexec\ndatarootdir := $(prefix)/share\ndocdir := $(datarootdir)/doc/julia\nmandir := $(datarootdir)/man\nman1dir := $(mandir)/man1\nincludedir := $(prefix)/include\nsysconfdir := $(prefix)/etc\nendif\n\n# Directories where things get built into\nbuild_prefix := $(BUILDROOT)/usr$(MAYBE_HOST)\nifeq ($(BUILDING_HOST_TOOLS), 1)\nbuild_staging := $(BUILDROOT)/usr-host-staging\nelse\nbuild_staging := $(build_prefix)-staging\nendif\nbuild_bindir := $(build_prefix)/bin\nbuild_depsbindir := $(build_prefix)/tools\nbuild_libdir := $(build_prefix)/lib\nbuild_libexecdir := $(build_prefix)/libexec\nbuild_datarootdir := $(build_prefix)/share\nbuild_mandir := $(build_datarootdir)/man\nbuild_man1dir := $(build_mandir)/man1\nbuild_includedir := $(build_prefix)/include\nbuild_sysconfdir := $(build_prefix)/etc\n\n# This used for debian packaging, to conform to library layout guidelines\nifeq ($(MULTIARCH_INSTALL), 1)\nMULTIARCH := $(shell gcc -print-multiarch)\nlibdir := $(prefix)/lib/$(MULTIARCH)\nbuild_libdir := $(build_prefix)/lib/$(MULTIARCH)\nendif\n\n# Private library directories\nifeq ($(DARWIN_FRAMEWORK), 1)\nprivate_libdir := $(prefix)/$(framework_frameworks)\nelse\nprivate_libdir := $(libdir)/julia\nendif\nbuild_private_libdir := $(build_libdir)/julia\n\nprivate_libexecdir := $(libexecdir)/julia\nbuild_private_libexecdir := $(build_libexecdir)/julia\n\n# A helper functions for dealing with lazily-evaluated, expensive operations..  Spinning\n# up a python process to, for exaxmple, parse a TOML file is expensive, and we must wait\n# until the TOML files are on-disk before we can parse them.  This means that we cannot\n# use `:=` (since we do not want to evaluate these rules now, we want to evaluate them\n# when we use them, so we use `=`) however we also do not want to re-evaluate them\n# multiple times.  So we define a caching mechanism where the rules are still lazily\n# evaluated, but we cache the value such that the second time around we don't have to\n# re-evaluate them.  Usage example:\n#\n# EXPENSIVE_OPERATION = $(shell prog args...)\n# CACHED_RESULT = $(call hit_cache,EXPENSIVE_OPERATION)\n#\n# The first time you use `$(CACHED_RESULT)`, it will invoke `$(EXPENSIVE_OPERATION)`,\n# but after that point, it will not, unless `$(EXPENSIVE_OPERATION)` evaluated to the\n# empty string, in which case it will be re-evaluated.\ndefine hit_cache\n$(if $(_CACHE-$(1)),,$(eval _CACHE-$(1) := $($(1))))$(_CACHE-$(1))\nendef\n\n# Calculate relative paths to libdir, private_libdir, datarootdir, and sysconfdir\ndefine cache_rel_path\n$(1)_rel_eval = $(call rel_path,$(2),$($(1)))\n$(1)_rel = $$(call hit_cache,$(1)_rel_eval)\nendef\n$(foreach D,libdir private_libdir datarootdir libexecdir private_libexecdir docdir sysconfdir includedir,$(eval $(call cache_rel_path,$(D),$(bindir))))\n$(foreach D,build_libdir build_private_libdir,$(eval $(call cache_rel_path,$(D),$(build_bindir))))\n\n# Save a special one: reverse_private_libdir_rel: usually just `../`, but good to be general:\nreverse_private_libdir_rel_eval = $(call rel_path,$(private_libdir),$(libdir))\nreverse_private_libdir_rel = $(call hit_cache,reverse_private_libdir_rel_eval)\n\nINSTALL_F := $(JULIAHOME)/contrib/install.sh 644\nINSTALL_M := $(JULIAHOME)/contrib/install.sh 755\n\n# LLVM Options\nLLVMROOT := $(build_prefix)\n# Set LLVM_ASSERTIONS to 1 to enable assertions in LLVM.\nLLVM_ASSERTIONS := 0\nLLVM_DEBUG := 0\n# set to 1 to get clang and compiler-rt\nBUILD_LLVM_CLANG := 0\n# set to 1 to get lldb (often does not work, no chance with llvm3.2 and earlier)\n# see http://lldb.llvm.org/build.html for dependencies\nBUILD_LLDB := 0\nBUILD_LIBCXX := 0\nBUILD_LLD := 1\n\n# Options to enable Polly and its code-generation options\nUSE_POLLY := 0\nUSE_POLLY_OPENMP := 0  # Enable OpenMP code-generation\nUSE_POLLY_ACC := 0     # Enable GPU code-generation\n\n# Options to use MLIR\nUSE_MLIR := 0\n\n# Options to use RegionVectorizer\nUSE_RV := 0\n\n# Use `ccache` for speeding up recompilation of the C/C++ part of Julia.\n# Requires the `ccache` executable to be in the `PATH` environment variable.\nUSECCACHE := 0\n\n# Cross-compile\n#XC_HOST := i686-w64-mingw32\n#XC_HOST := x86_64-w64-mingw32\n\n# Path to cmake (override in Make.user if needed)\nCMAKE ?= cmake\nCMAKE_GENERATOR ?= make\n\n# Point pkg-config to only look at our libraries, overriding whatever\n# the user may have unwittingly set.  To pass PKG_CONFIG_* variables\n# through to the buildsystem, these must be set either on the command\n# line, or through `override` directives within Make.user\nexport PKG_CONFIG_PATH = $(JULIAHOME)/usr/lib/pkgconfig\nexport PKG_CONFIG_LIBDIR = $(JULIAHOME)/usr/lib/pkgconfig\n\n# Figure out OS and architecture\nBUILD_OS := $(shell uname)\n\nifneq (,$(findstring CYGWIN,$(BUILD_OS)))\nXC_HOST ?= $(shell uname -m)-w64-mingw32\nendif\n\nifeq ($(XC_HOST),)\nCROSS_COMPILE:=\n# delayed expansion of $(CC), since it won't be computed until later\nHOSTCC = $(CC)\nHOSTCXX = $(CXX)\nelse\nHOSTCC ?= gcc\nHOSTCXX ?= g++\nOPENBLAS_DYNAMIC_ARCH := 1\noverride CROSS_COMPILE:=$(XC_HOST)-\nifneq (,$(findstring mingw,$(XC_HOST)))\noverride OS := WINNT\nelse ifneq (,$(findstring emscripten,$(XC_HOST)))\noverride OS := emscripten\noverride CROSS_COMPILE:=\nelse\nifeq (,$(OS))\n$(error \"unknown XC_HOST variable set, please set OS\")\nendif\nendif\nendif\n\nJLDOWNLOAD := $(JULIAHOME)/deps/tools/jldownload\nJLCHECKSUM := $(JULIAHOME)/deps/tools/jlchecksum\n\n# Figure out OS and architecture\nOS := $(BUILD_OS)\n\nifneq (,$(findstring MINGW,$(OS)))\noverride OS := WINNT\nendif\nifneq (,$(findstring MINGW,$(BUILD_OS)))\noverride BUILD_OS := WINNT\nendif\nifneq (,$(findstring MSYS,$(OS)))\noverride OS := WINNT\nendif\nifneq (,$(findstring MSYS,$(BUILD_OS)))\noverride BUILD_OS := WINNT\nendif\n\nifeq ($(BUILD_OS), WINNT)\nBUILD_EXE := .exe\nelse ifneq (,$(findstring CYGWIN,$(BUILD_OS)))\nBUILD_EXE := .exe\nelse\nBUILD_EXE :=\nendif\nifeq ($(OS), WINNT)\nfPIC :=\nEXE := .exe\nelse\nfPIC := -fPIC\nEXE :=\nendif\n\n# Set to 1 to enable profiling with perf\nifeq (\"$(OS)\", \"Linux\")\nUSE_PERF_JITEVENTS ?= 1\nifeq ($(ARCH),x86_64)\nUSE_INTEL_JITEVENTS ?= 1\nelse # ARCH x86_64\nUSE_INTEL_JITEVENTS ?= 0\nendif # ARCH x86_64\nelse # OS Linux\nUSE_PERF_JITEVENTS ?= 0\nUSE_INTEL_JITEVENTS ?= 0\nendif # OS Linux\n\nJULIACODEGEN := LLVM\n\n# flag for disabling assertions\nifeq ($(FORCE_ASSERTIONS), 1)\n# C++ code needs to include LLVM header with the same assertion flag as LLVM\n# Use this flag to re-enable assertion in our code after all the LLVM headers are included\nCXX_DISABLE_ASSERTION := -DJL_VERIFY_PASSES\nDISABLE_ASSERTIONS := -DJL_VERIFY_PASSES\nelse\nCXX_DISABLE_ASSERTION := -DJL_NDEBUG\nDISABLE_ASSERTIONS := -DNDEBUG -DJL_NDEBUG\nendif\n\n# Compiler specific stuff\n\nifeq (default,$(origin CC))\nCC := $(CROSS_COMPILE)$(CC) # attempt to add cross-compiler prefix, if the user\n                            # is not overriding the default, to form target-triple-cc (which\n                            # may not exist), and use that to decide what compiler the user\n                            # is using for the target build (or default to gcc)\nendif\nCC_VERSION_STRING = $(shell $(CC) --version 2>/dev/null)\nifneq (,$(findstring clang,$(CC_VERSION_STRING)))\nUSECLANG := 1\nUSEGCC := 0\nelse\nUSECLANG := 0\nUSEGCC := 1\nendif\n\nFC := $(CROSS_COMPILE)gfortran\n\n# Note: Supporting only macOS Mojave and above\nifeq ($(OS), Darwin)\nAPPLE_ARCH := $(shell uname -m)\nifneq ($(APPLE_ARCH),arm64)\nMACOSX_VERSION_MIN := 10.14\nelse\nMACOSX_VERSION_MIN := 11.0\nendif\nendif\n\nJCFLAGS_COMMON    := -std=gnu11 -pipe $(fPIC) -fno-strict-aliasing -D_FILE_OFFSET_BITS=64 -Wformat -Wformat-security\nJCFLAGS_CLANG     := $(JCFLAGS_COMMON)\nJCFLAGS_GCC       := $(JCFLAGS_COMMON) -fno-gnu-unique\n\n# These flags are needed to generate decent debug info\nJCPPFLAGS_COMMON  := -fasynchronous-unwind-tables\nJCPPFLAGS_CLANG   := $(JCPPFLAGS_COMMON) -mllvm -enable-tail-merge=0\nJCPPFLAGS_GCC     := $(JCPPFLAGS_COMMON) -fno-tree-tail-merge\n\nJCXXFLAGS_COMMON  := -pipe $(fPIC) -fno-rtti -std=c++17 -Wformat -Wformat-security\nJCXXFLAGS_CLANG   := $(JCXXFLAGS_COMMON) -pedantic\nJCXXFLAGS_GCC     := $(JCXXFLAGS_COMMON) -fno-gnu-unique\n\nDEBUGFLAGS_COMMON := -O0 -DJL_DEBUG_BUILD -fstack-protector\nDEBUGFLAGS_CLANG  := $(DEBUGFLAGS_COMMON) -g\nDEBUGFLAGS_GCC    := $(DEBUGFLAGS_COMMON) -ggdb2\n\nSHIPFLAGS_COMMON  := -O3\nSHIPFLAGS_CLANG   := $(SHIPFLAGS_COMMON) -g\nSHIPFLAGS_GCC     := $(SHIPFLAGS_COMMON) -ggdb2 -falign-functions\n\nBOLT_LDFLAGS :=\n\nBOLT_CFLAGS_GCC    :=\nBOLT_CFLAGS_CLANG  :=\n\nifeq ($(OS), Darwin)\nJCPPFLAGS_CLANG   += -D_LARGEFILE_SOURCE -D_DARWIN_USE_64_BIT_INODE=1\nendif\n\nifneq ($(OS), WINNT)\n# Do not enable on windows to avoid warnings from libuv.\nJCXXFLAGS_GCC     += -pedantic\nendif\n\nifeq ($(USEGCC),1)\nCC         := $(CROSS_COMPILE)gcc\nCXX        := $(CROSS_COMPILE)g++\nJCFLAGS    := $(JCFLAGS_GCC)\nJCPPFLAGS  := $(JCPPFLAGS_GCC)\nJCXXFLAGS  := $(JCXXFLAGS_GCC)\nDEBUGFLAGS := $(DEBUGFLAGS_GCC)\nSHIPFLAGS  := $(SHIPFLAGS_GCC) $(BOLT_CFLAGS_GCC)\nBOLT_CFLAGS  := $(BOLT_CFLAGS_GCC)\nendif\n\nifeq ($(USECLANG),1)\nCC         := $(CROSS_COMPILE)clang\nCXX        := $(CROSS_COMPILE)clang++\nJCFLAGS    := $(JCFLAGS_CLANG)\nJCPPFLAGS  := $(JCPPFLAGS_CLANG)\nJCXXFLAGS  := $(JCXXFLAGS_CLANG)\nDEBUGFLAGS := $(DEBUGFLAGS_CLANG)\nSHIPFLAGS  := $(SHIPFLAGS_CLANG) $(BOLT_CFLAGS_CLANG)\nBOLT_CFLAGS  := $(BOLT_CFLAGS_CLANG)\n\nifeq ($(OS), Darwin)\nCC += -mmacosx-version-min=$(MACOSX_VERSION_MIN)\nCXX += -mmacosx-version-min=$(MACOSX_VERSION_MIN)\nFC += -mmacosx-version-min=$(MACOSX_VERSION_MIN)\n# export MACOSX_DEPLOYMENT_TARGET so that ld picks it up, especially for deps\nexport MACOSX_DEPLOYMENT_TARGET=$(MACOSX_VERSION_MIN)\nendif\nendif\n\n# Conditional setting of RELRO flag for enhanced security on Linux builds.\n# RELRO (Read-Only Relocations) is a security feature that marks certain sections\n# of the binary as read-only to prevent exploitation techniques like\n# GOT (Global Offset Table) overwriting attacks.\nifeq ($(OS),Linux)\n    RELRO_FLAG := -Wl,-z,relro\nelse\n    RELRO_FLAG :=\nendif\n\nJLDFLAGS := $(RELRO_FLAG)\n\nifeq ($(USECCACHE), 1)\n# Expand CC, CXX and FC here already because we want the original definition and not the ccache version.\nCC_ARG   := $(CC)\nCXX_ARG  := $(CXX)\nFC_ARG   := $(FC)\n# Expand CC, CXX and FC here already to avoid recursive referencing.\nCC_FULL  := ccache $(CC)\nCXX_FULL := ccache $(CXX)\nFC_FULL  := ccache $(FC)\n# Add an extra indirection to make CC/CXX/FC non-simple vars\n# (because of how -m$(BINARY) is added later on).\nCC       := $(CC_FULL)\nCXX      := $(CXX_FULL)\nFC       := $(FC_FULL)\nCC_BASE  := ccache\nCXX_BASE := ccache\nFC_BASE  := ccache\nifeq ($(USECLANG),1)\n# ccache and Clang don't do well together\n# https://petereisentraut.blogspot.be/2011/05/ccache-and-clang.html\nCC += -Qunused-arguments\nCXX += -Qunused-arguments\n# https://petereisentraut.blogspot.be/2011/09/ccache-and-clang-part-2.html\nexport CCACHE_CPP2 := yes\nendif\nelse #USECCACHE\nCC_BASE := $(shell echo $(CC) | cut -d' ' -f1)\nCC_ARG := $(shell echo $(CC) | cut -s -d' ' -f2-)\nCXX_BASE := $(shell echo $(CXX) | cut -d' ' -f1)\nCXX_ARG := $(shell echo $(CXX) | cut -s -d' ' -f2-)\nFC_BASE := $(shell echo $(FC) 2>/dev/null | cut -d' ' -f1)\nFC_ARG := $(shell echo $(FC) 2>/dev/null | cut -s -d' ' -f2-)\nendif\n\nJFFLAGS := -O2 $(fPIC)\nCPP := $(CC) -E\nAR := $(CROSS_COMPILE)ar\nAS := $(CROSS_COMPILE)as\nLD := $(CROSS_COMPILE)ld\nRANLIB := $(CROSS_COMPILE)ranlib\nOBJCOPY := $(CROSS_COMPILE)objcopy\n\nCPP_STDOUT := $(CPP) -P\n\n# file extensions\nifeq ($(OS), WINNT)\n  SHLIB_EXT := dll\n  PATHSEP := ;\nelse ifeq ($(OS), Darwin)\n  SHLIB_EXT := dylib\n  PATHSEP := :\nelse\n  SHLIB_EXT := so\n  PATHSEP := :\nendif\n\nifeq ($(OS),WINNT)\ndefine versioned_libname\n$(if $(2),$(1)-$(2).$(SHLIB_EXT),$(1).$(SHLIB_EXT))\nendef\nelse ifeq ($(OS),Darwin)\ndefine versioned_libname\n$(if $(2),$(1).$(2).$(SHLIB_EXT),$(1).$(SHLIB_EXT))\nendef\nelse\ndefine versioned_libname\n$(if $(2),$(1).$(SHLIB_EXT).$(2),$(1).$(SHLIB_EXT))\nendef\nendif\n\n\nifeq ($(SHLIB_EXT), so)\ndefine SONAME_FLAGS\n  -Wl,-soname=$1\nendef\nelse\ndefine SONAME_FLAGS\nendef\nendif\n\nifeq ($(OS),WINNT)\ndefine IMPLIB_FLAGS\n  -Wl,--out-implib,$(build_libdir)/$(notdir $1).a\nendef\nelse\ndefine IMPLIB_FLAGS\nendef\nendif\n\n# On Windows, we want shared library files to end up in $(build_bindir), instead of $(build_libdir)\n# We also don't really have a private bindir on windows right now, due to lack of RPATH.\nifeq ($(OS),WINNT)\nshlibdir := $(bindir)\nprivate_shlibdir := $(bindir)\nbuild_shlibdir := $(build_bindir)\nbuild_private_shlibdir := $(build_bindir)\nelse\nshlibdir := $(libdir)\nprivate_shlibdir := $(private_libdir)\nbuild_shlibdir := $(build_libdir)\nbuild_private_shlibdir := $(build_private_libdir)\nendif\n\n# If we're on windows, don't do versioned shared libraries.  If we're on OSX,\n# put the version number before the .dylib.  Otherwise, put it after.\nifeq ($(OS), WINNT)\nJL_MAJOR_MINOR_SHLIB_EXT := $(SHLIB_EXT)\nJL_MAJOR_SHLIB_EXT := $(SHLIB_EXT)\nelse\nifeq ($(OS), Darwin)\nJL_MAJOR_MINOR_SHLIB_EXT := $(SOMAJOR).$(SOMINOR).$(SHLIB_EXT)\nJL_MAJOR_SHLIB_EXT := $(SOMAJOR).$(SHLIB_EXT)\nelse\nJL_MAJOR_MINOR_SHLIB_EXT := $(SHLIB_EXT).$(SOMAJOR).$(SOMINOR)\nJL_MAJOR_SHLIB_EXT := $(SHLIB_EXT).$(SOMAJOR)\nendif\nendif\n\nifneq ($(findstring $(OS),FreeBSD OpenBSD),)\nLOCALBASE ?= /usr/local\nelse\nLOCALBASE ?= /usr\nendif\n\nifeq (exists, $(shell [ -e $(JULIAHOME)/$(MAKE_USER_FNAME) ] && echo exists ))\ninclude $(JULIAHOME)/$(MAKE_USER_FNAME)\nendif\nifeq (exists, $(shell [ -e $(BUILDROOT)/$(MAKE_USER_FNAME) ] && echo exists ))\ninclude $(BUILDROOT)/$(MAKE_USER_FNAME)\nendif\n\n# A bit of a kludge to work around libraries linking to FreeBSD's outdated system libgcc_s\n# Instead, let's link to the libgcc_s corresponding to the installation of gfortran\nifeq ($(OS),FreeBSD)\nifneq (,$(findstring gfortran,$(FC)))\n\n# First let's figure out what version of GCC we're dealing with\n_GCCMAJOR := $(shell $(FC) -dumpversion 2>/dev/null | cut -d'.' -f1)\n_GCCMINOR := $(shell $(FC) -dumpversion 2>/dev/null | cut -d'.' -f2)\n\n# The ports system uses major and minor for GCC < 5 (e.g. gcc49 for GCC 4.9), otherwise major only\nifeq ($(_GCCMAJOR),4)\n  _GCCVER := $(_GCCMAJOR)$(_GCCMINOR)\nelse\n  _GCCVER := $(_GCCMAJOR)\nendif\n\n# Allow the user to specify this in Make.user\nGCCPATH ?= $(LOCALBASE)/lib/gcc$(_GCCVER)\n\n# We're going to copy over the libraries we need from GCCPATH into build_libdir, then\n# tell everyone to look for them there. At install time, the build_libdir added into\n# the RPATH here is removed by patchelf.\nLDFLAGS += -L$(build_libdir) -Wl,-rpath,$(build_libdir)\n\nendif # gfortran\nendif # FreeBSD\n\nifneq ($(CC_BASE)$(CXX_BASE),$(shell echo $(CC) | cut -d' ' -f1)$(shell echo $(CXX) | cut -d' ' -f1))\n    $(error Forgot override directive on CC or CXX in Make.user? Cowardly refusing to build)\nendif\n\nifeq ($(DARWIN_FRAMEWORK),1)\nifneq ($(OS), Darwin)\n\t$(error Darwin framework cannot be enabled for non-Darwin OS)\nendif\nendif\n\nifeq ($(SANITIZE),1)\nSANITIZE_OPTS :=\nSANITIZE_LDFLAGS :=\nifeq ($(SANITIZE_MEMORY),1)\nSANITIZE_OPTS += -fsanitize=memory -fsanitize-memory-track-origins -fno-omit-frame-pointer\nSANITIZE_LDFLAGS += $(SANITIZE_OPTS)\nifneq ($(findstring $(OS),Linux FreeBSD OpenBSD),)\nSANITIZE_LDFLAGS += -Wl,--warn-unresolved-symbols\nendif # OS Linux or FreeBSD\nendif # SANITIZE_MEMORY=1\nifeq ($(SANITIZE_ADDRESS),1)\nSANITIZE_OPTS += -fsanitize=address\nSANITIZE_LDFLAGS += -fsanitize=address -shared-libasan\nendif\nifeq ($(SANITIZE_THREAD),1)\nSANITIZE_OPTS += -fsanitize=thread\nSANITIZE_LDFLAGS += -fsanitize=thread\nendif\nifeq ($(SANITIZE_OPTS),)\n$(error SANITIZE=1, but no sanitizer selected, set either SANITIZE_MEMORY, SANITIZE_THREAD, or SANITIZE_ADDRESS)\nendif\nJCXXFLAGS += $(SANITIZE_OPTS)\nJCFLAGS += $(SANITIZE_OPTS)\nJLDFLAGS += $(SANITIZE_LDFLAGS)\nendif # SANITIZE\n\nTAR := $(shell which gtar 2>/dev/null || which tar 2>/dev/null)\nTAR_TEST := $(shell $(TAR) --help 2>&1  | grep -E 'bsdtar|strip-components')\nifeq (,$(findstring components,$(TAR_TEST)))\nifneq (bsdtar,$(findstring bsdtar,$(TAR_TEST)))\n$(error \"please install either GNU tar or bsdtar\")\nendif\nendif\n\nifeq ($(WITH_GC_VERIFY), 1)\nJCXXFLAGS += -DGC_VERIFY\nJCFLAGS += -DGC_VERIFY\nendif\n\nifneq ($(JL_STACK_SIZE),)\nJCXXFLAGS += -DJL_STACK_SIZE=$(JL_STACK_SIZE)\nJCFLAGS += -DJL_STACK_SIZE=$(JL_STACK_SIZE)\nendif\n\n\nifeq ($(WITH_GC_DEBUG_ENV), 1)\nJCXXFLAGS += -DGC_DEBUG_ENV\nJCFLAGS += -DGC_DEBUG_ENV\nendif\n\nifneq (${MMTK_PLAN},None)\nJCXXFLAGS += -DMMTK_GC\nJCFLAGS += -DMMTK_GC\n# Do a release build on the binding by default\nMMTK_BUILD ?= release\nifeq (${MMTK_PLAN},Immix)\nJCXXFLAGS += -DMMTK_PLAN_IMMIX\nJCFLAGS += -DMMTK_PLAN_IMMIX\nelse\n$(error \"Unsupported MMTk plan: $(MMTK_PLAN)\")\nendif\n\n# Location of mmtk-julia binding\n# (needed for api/*.h and .so file)\nMMTK_JULIA_DIR ?= $(BUILDROOT)/usr/lib/mmtk_julia\n\nMMTK_DIR = ${MMTK_JULIA_DIR}/mmtk\nMMTK_API_INC = ${MMTK_DIR}/api\n\nMMTK_LIB := -lmmtk_julia\nelse\nMMTK_JULIA_INC :=\nMMTK_LIB :=\nendif\n\nifeq ($(WITH_DTRACE), 1)\nJCXXFLAGS += -DUSE_DTRACE\nJCFLAGS += -DUSE_DTRACE\nDTRACE := dtrace\nendif\n\nifeq ($(WITH_ITTAPI), 1)\nJCXXFLAGS += -DUSE_ITTAPI\nJCFLAGS += -DUSE_ITTAPI\nLIBITTAPI:=-littnotify\nendif\n\nifeq ($(WITH_TRACY), 1)\nJCXXFLAGS += -DUSE_TRACY -DTRACY_ENABLE -DTRACY_FIBERS\nJCFLAGS += -DUSE_TRACY -DTRACY_ENABLE -DTRACY_FIBERS\nLIBTRACYCLIENT:=-lTracyClient\nendif\nifeq ($(WITH_TRACY_CALLSTACKS), 1)\nJCXXFLAGS += -DTRACY_CALLSTACK=32\nJCFLAGS += -DTRACY_CALLSTACK=32\nLIBTRACYCLIENT:=-lTracyClient\nendif\n\nifeq ($(WITH_TIMING_COUNTS), 1)\nJCXXFLAGS += -DUSE_TIMING_COUNTS\nJCFLAGS += -DUSE_TIMING_COUNTS\nendif\n\nifeq ($(WITH_NVTX), 1)\nJCXXFLAGS += -DUSE_NVTX\nJCFLAGS += -DUSE_NVTX\nendif\n\n# ===========================================================================\n\n# Select the cpu architecture to target, or automatically detects the user's compiler\n# ARCH is the first element of the triple, and gives the CPU class (e.g. x86_64)\n# MARCH is the CPU type, and accepts anything that can be passed to the gcc -march flag\n#    it is set equal to ARCH (for cases where the two are the same, such as i686)\n#    it can be set to native to optimize all code for the user's machine (not just the JIT code)\n#    if MARCH is set newer than the native processor, be forewarned that the compile might fail\n# JULIA_CPU_TARGET is the JIT-only complement to MARCH. Setting it explicitly is not generally necessary,\n#    since it is set equal to MARCH by default\n\nBUILD_MACHINE := $(shell $(HOSTCC) -dumpmachine)\n\n# Clang spells mingw `-windows-gnu`, but autotools, etc\n# don't recognize that, so canonicalize to mingw32\nBUILD_MACHINE := $(subst windows-gnu,mingw32,$(BUILD_MACHINE))\n\nifeq ($(ARCH),)\noverride ARCH := $(shell $(CC) -dumpmachine | sed \"s/\\([^-]*\\).*$$/\\1/\")\nelse\nifneq ($(XC_HOST),)\nXC_HOST := $(ARCH)$(shell echo $(XC_HOST) | sed \"s/[^-]*\\(.*\\)$$/\\1/\")\nifneq ($(findstring arm, $(ARCH))$(findstring aarch64, $(ARCH)),)\nMCPU := $(subst _,-,$(ARCH)) # Arm prefers MCPU over MARCH\nelse\nMARCH := $(subst _,-,$(ARCH))\nendif\nelse # insert ARCH into HOST\nXC_HOST := $(ARCH)$(shell echo $(BUILD_MACHINE) | sed \"s/[^-]*\\(.*\\)$$/\\1/\")\nendif\nendif\n\n# Normalize ppc64le to powerpc64le\nifeq ($(ARCH), ppc64le)\noverride ARCH := powerpc64le\nendif\n\nifeq ($(ARCH),mingw32)\n$(error \"the mingw32 compiler you are using fails the openblas testsuite. please see the README.windows document for a replacement\")\nelse ifeq (cygwin, $(shell $(CC) -dumpmachine | cut -d\\- -f3))\n$(error \"cannot build julia with cygwin-target compilers. set XC_HOST to i686-w64-mingw32 or x86_64-w64-mingw32 for mingw cross-compile\")\nelse ifeq (msys, $(shell $(CC) -dumpmachine | cut -d\\- -f3))\n$(error \"cannot build julia with msys-target compilers. please see the README.windows document for instructions on setting up mingw-w64 compilers\")\nelse ifneq (,$(findstring MSYS,$(shell uname)))\n$(error \"cannot build julia from a msys shell. please launch a mingw shell instead by setting MSYSTEM=MINGW64\")\nendif\n\nifeq ($(BUILD_OS),Darwin)\n## Mac is a rather cool 64-bit user-space on 32-bit kernel architecture, so to determine arch we detect\n## the capabilities of the hardware, rather than the compiler or kernel, and make a substitution\nBUILD_ARCH := $(shell echo $(BUILD_MACHINE) | sed \"s/\\([^-]*\\).*$$/\\1/\")\nifeq ($(BUILD_ARCH),x86_64)\nBUILD_ARCH := i686\nelse ifeq ($(BUILD_ARCH),i386)\nBUILD_ARCH := i686\nendif\nifeq ($(BUILD_ARCH),i686)\nifeq ($(shell sysctl -n hw.cpu64bit_capable),1)\nBUILD_ARCH := x86_64\nendif\nBUILD_MACHINE := $(BUILD_ARCH)$(shell echo $(BUILD_MACHINE) | sed \"s/[^-]*\\(.*\\)$$/\\1/\")\nendif\nifeq ($(BUILD_OS),$(OS))\nARCH := $(BUILD_OS)\nendif\nendif\n\n# MMTk is only available on x86_64 Linux for now\nifneq (${MMTK_PLAN},None)\n\nifeq ($(OS),Linux)\nMMTK_LIB_NAME := libmmtk_julia.so\nelse\n$(error \"Unsupported OS for MMTk\")\nendif\n\nifneq ($(ARCH),x86_64)\n$(error \"Unsupported build architecture for MMTk\")\nendif\n\nendif\n\n# Detect common pre-SSE2 JULIA_CPU_TARGET values known not to work (#7185)\nifeq ($(MARCH),)\nifneq ($(findstring $(ARCH),i386 i486 i586 i686),)\nMARCH := pentium4\nendif\nendif\n\nifneq ($(findstring $(MARCH),i386 i486 i586 i686 pentium pentium2 pentium3),)\n$(error Pre-SSE2 CPU targets not supported. To create a generic 32-bit x86 binary, \\\npass 'MARCH=pentium4'.)\nendif\n\n# We map amd64 to x86_64 for compatibility with systems that identify 64-bit systems as such\nifeq ($(ARCH),amd64)\noverride ARCH := x86_64\nendif\n\n# We map arm64 (Apple spelling) to aarch64 to avoid having to deal with both spellings everywhere\nifeq ($(ARCH),arm64)\noverride ARCH := aarch64\nendif\n\nifeq ($(ARCH),i386)\nBINARY:=32\nISX86:=1\nelse ifeq ($(ARCH),i387)\nBINARY:=32\nISX86:=1\nelse ifeq ($(ARCH),i486)\nBINARY:=32\nISX86:=1\nelse ifeq ($(ARCH),i586)\nBINARY:=32\nISX86:=1\nelse ifeq ($(ARCH),i686)\nBINARY:=32\nISX86:=1\nelse ifeq ($(ARCH),x86_64)\nBINARY:=64\nISX86:=1\nelse\n# For all other architectures (ARM, PPC, AArch64, etc.)\nISX86:=0\nendif\n\n\n#If nothing is set default to native unless we are cross-compiling\nifeq ($(MARCH)$(MCPU)$(MTUNE)$(JULIA_CPU_TARGET)$(XC_HOST),)\nifeq ($(ARCH),aarch64)\n# ARM recommends only setting MCPU for AArch64\nMCPU=native\nelse ifneq (,$(findstring riscv64,$(ARCH)))\n# RISC-V doesn't have a native option\n$(error Building for RISC-V requires a specific MARCH to be set))\nelse\nMARCH=native\nMTUNE=native\nendif\nendif\n\n# If we are running on x86 or x86_64, set certain options automatically\nifeq (1,$(ISX86))\nOPENBLAS_DYNAMIC_ARCH:=1\nendif\n\n# If we are running on powerpc64le or ppc64le, set certain options automatically\nifneq (,$(filter $(ARCH), powerpc64le ppc64le))\nJCFLAGS += -fsigned-char\nOPENBLAS_DYNAMIC_ARCH:=1\nOPENBLAS_TARGET_ARCH:=POWER8\nBINARY:=64\n# GCC doesn't do -march= on ppc64le\nMARCH=\nendif\n\n# Allow Clang to use CRC instructions (only applicable on AArch64)\nifneq (,$(findstring aarch64,$(ARCH)))\nifeq ($(USECLANG),1)\nifeq (,$(MARCH))\nJCFLAGS += -mcrc\nendif\nendif\nendif\n\n# If we are running on powerpc64 or ppc64, fail out dramatically\nifneq (,$(filter $(ARCH), powerpc64 ppc64))\n$(error Big-endian PPC64 is not supported, to ignore this error, set ARCH=ppc64le)\nendif\n\n# File name of make binary-dist result\nifeq ($(JULIA_BINARYDIST_FILENAME),)\nDIST_OS:=$(shell echo $(OS) | tr '[:upper:]' '[:lower:]')\nifeq (WINNT,$(OS))\nDIST_OS:=win\nendif\nifeq (Linux,$(OS))\nDIST_OS:=linux\nendif\nifeq (Darwin,$(OS))\nDIST_OS:=mac\nendif\nDIST_ARCH:=$(ARCH)\nifneq (,$(filter $(ARCH), powerpc64le ppc64le))\nDIST_ARCH:=ppc64le\nendif\nifeq (1,$(ISX86))\n# on x86 make sure not to use 80 bit math when we want 64 bit math.\nifeq (32,$(BINARY))\nJCFLAGS += -mfpmath=sse\nendif\nDIST_ARCH:=$(BINARY)\nendif\nifneq (,$(findstring arm,$(ARCH)))\nDIST_ARCH:=arm\nendif\nifneq (,$(findstring riscv64,$(ARCH)))\nDIST_ARCH:=riscv64\nendif\n\nJULIA_BINARYDIST_FILENAME := julia-$(JULIA_COMMIT)-$(DIST_OS)$(DIST_ARCH)\nendif\n\n# If we are running on ARM, set certain options automatically\nifneq (,$(findstring arm,$(ARCH)))\nJCFLAGS += -fsigned-char\nOPENBLAS_TARGET_ARCH:=ARMV7\nBINARY:=32\nendif\n\n# If we are running on aarch64 (e.g. ARMv8 or ARM64), set certain options automatically\nifneq (,$(findstring aarch64,$(ARCH)))\nOPENBLAS_DYNAMIC_ARCH:=1\nOPENBLAS_TARGET_ARCH:=ARMV8\nBINARY:=64\nendif\n\n# If we are running on riscv64, set certain options automatically\nifneq (,$(findstring riscv64,$(ARCH)))\nOPENBLAS_DYNAMIC_ARCH:=1\nBINARY:=64\nendif\n\n# Set MARCH-specific flags\nifneq ($(MARCH),)\nCC += -march=$(MARCH)\nCXX += -march=$(MARCH)\nFC += -march=$(MARCH)\n# On RISC-V, don't forward the MARCH ISA string to JULIA_CPU_TARGET,\n# as it's always incompatible with LLVM's CPU target name parser.\nifeq (,$(findstring riscv64,$(ARCH)))\nJULIA_CPU_TARGET ?= $(MARCH)\nendif\nendif\n\n# Set MCPU-specific flags\nifneq ($(MCPU),)\nCC += -mcpu=$(MCPU)\nCXX += -mcpu=$(MCPU)\nFC += -mcpu=$(MCPU)\nJULIA_CPU_TARGET ?= $(MCPU)\nendif\n\n# Set MTUNE-specific flags\nifneq ($(MTUNE),)\nCC += -mtune=$(MTUNE)\nCXX += -mtune=$(MTUNE)\nFC += -mtune=$(MTUNE)\nJULIA_CPU_TARGET ?= $(MTUNE)\nendif\n\nifneq ($(MARCH)$(MCPU),)\nifeq ($(OS),Darwin)\n# on Darwin, the standalone `as` program doesn't know\n# how to handle AVX instructions, but it does know how\n# to dispatch to the clang assembler (if we ask it to)\nifeq ($(USECLANG),1)\nCC += -integrated-as\nCXX += -integrated-as\nelse\nCC += -Wa,-q\nCXX += -Wa,-q\nendif\nFC += -Wa,-q\nAS += -q\nendif\nendif\n\nJULIA_CPU_TARGET ?= native\n\nifneq ($(OS),WINNT)\n# Windows headers with this configuration conflicts with LLVM\n# (Symbol renames are done with macros)\n# We mainly need this on linux for cgmemmgr so don't worry about windows for now...\nJCXXFLAGS += -D_FILE_OFFSET_BITS=64\nendif\n\n# Set some ARCH-specific flags\nifeq ($(ISX86),1)\nCC += -m$(BINARY)\nCXX += -m$(BINARY)\nFC += -m$(BINARY)\nCC_ARG += -m$(BINARY)\nCXX_ARG += -m$(BINARY)\nFC_ARG += -m$(BINARY)\nendif\n\nifeq ($(OS),WINNT)\nifneq ($(ARCH),x86_64)\nifneq ($(USECLANG),1)\nJCFLAGS += -mincoming-stack-boundary=2\nJCXXFLAGS += -mincoming-stack-boundary=2\nendif\nendif\nendif\n\nifeq ($(USEGCC),1)\nifeq ($(ISX86),1)\n  SHIPFLAGS += -momit-leaf-frame-pointer\nendif\nendif\n\nifeq ($(OS),WINNT)\nLIBUNWIND:=\nelse ifneq ($(DISABLE_LIBUNWIND), 0)\nLIBUNWIND:=\nelse\nLIBUNWIND:=-lunwind\nifneq ($(findstring $(OS),Darwin OpenBSD),)\nJCPPFLAGS+=-DLLVMLIBUNWIND\nelse ifeq ($(USE_SYSTEM_LIBUNWIND), 1)\n# Only for linux and freebsd since we want to use not yet released gnu libunwind features\nJCFLAGS+=-DSYSTEM_LIBUNWIND\nJCPPFLAGS+=-DSYSTEM_LIBUNWIND\nendif\nendif\n\nifeq ($(origin LLVM_CONFIG), undefined)\nifeq ($(USE_SYSTEM_LLVM), 1)\nLLVM_CONFIG := llvm-config$(EXE)\nelse\nLLVM_CONFIG := $(build_depsbindir)/llvm-config$(EXE)\nendif\nendif # LLVM_CONFIG undefined\n\nifeq ($(USE_SYSTEM_LLVM), 1)\nJCPPFLAGS+=-DSYSTEM_LLVM\nendif # SYSTEM_LLVM\n\n# Windows builds need a little help finding the LLVM libraries for llvm-config\n# use delayed expansion (= not :=) because spawn isn't defined until later\n# WINEPATH is only needed for a wine-based cross compile\nLLVM_CONFIG_PATH_FIX =\nifeq ($(OS),WINNT)\nLLVM_CONFIG_PATH_FIX = PATH=\"$(build_bindir):$(PATH)\" WINEPATH=\"$(call cygpath_w,$(build_bindir));$(WINEPATH)\"\nendif\n\nifeq ($(BUILD_OS),$(OS))\nLLVM_CONFIG_HOST = $(LLVM_CONFIG_PATH_FIX) $(LLVM_CONFIG)\nelse\nLLVM_CONFIG_HOST := $(basename $(LLVM_CONFIG))-host$(BUILD_EXE)\nifneq (exists, $(shell [ -f '$(LLVM_CONFIG_HOST)' ] && echo exists ))\n# llvm-config-host does not exist (cmake build)\nLLVM_CONFIG_HOST = $(LLVM_CONFIG_PATH_FIX) $(call spawn,$(LLVM_CONFIG))\nendif\nendif\n\nifeq ($(USE_SYSTEM_PCRE), 1)\nPCRE_CONFIG := pcre2-config\nelse\nPCRE_CONFIG := $(build_depsbindir)/pcre2-config\nendif\n\nifeq ($(USE_SYSTEM_PATCHELF), 1)\nPATCHELF := patchelf\nelse\nPATCHELF := $(build_depsbindir)/patchelf\nendif\n# In the standard build system we want to patch files with `--set-rpath`, but downstream\n# packagers like Spack may want to use `--add-rpath` instead, leave them the possibility to\n# choose the command.\nPATCHELF_SET_RPATH_ARG := --set-rpath\n\nifeq ($(USE_SYSTEM_LIBWHICH), 1)\nLIBWHICH := libwhich\nelse\nLIBWHICH := $(build_depsbindir)/libwhich\nendif\n\n# On aarch64 and powerpc64le, we assume the page size is 64K.  Our binutils linkers\n# and such already assume this, but `patchelf` seems to be behind the times.  We\n# explicitly tell it to use this large page size so that when we rewrite rpaths and\n# such, we don't accidentally create incorrectly-aligned sections in our ELF files.\nifneq (,$(filter $(ARCH),aarch64 powerpc64le))\nPATCHELF += --page-size 65536\nendif\n\n# Use ILP64 BLAS interface when building openblas from source on 64-bit architectures\nifeq ($(BINARY), 64)\nifeq ($(USE_SYSTEM_BLAS), 1)\nUSE_BLAS64 ?= 0\nelse\nUSE_BLAS64 ?= 1\nendif\nendif\n\nifeq ($(USE_SYSTEM_BLAS), 1)\nifeq ($(OS), Darwin)\nUSE_BLAS64 := 0\nUSE_SYSTEM_LAPACK := 0\nLIBBLAS := -L$(build_libdir) -lgfortblas\nLIBBLASNAME := libgfortblas\nelse\nLIBBLAS ?= -lblas\nLIBBLASNAME ?= libblas\nendif\nelse\nLIBBLAS := -L$(build_shlibdir) -lopenblas\nLIBBLASNAME := libopenblas\nendif\n\n# OpenBLAS builds LAPACK as part of its build.\n# We only need to build LAPACK if we are not using OpenBLAS.\nifeq ($(USE_SYSTEM_BLAS), 0)\nLIBLAPACK := $(LIBBLAS)\nLIBLAPACKNAME := $(LIBBLASNAME)\nelse\nifeq ($(USE_SYSTEM_LAPACK), 1)\nLIBLAPACK ?= -llapack\nLIBLAPACKNAME ?= liblapack\nelse\nLIBLAPACK := -L$(build_shlibdir) -llapack $(LIBBLAS)\nLIBLAPACKNAME := liblapack\nendif\nendif\n\nifeq ($(USE_SYSTEM_LIBM), 1)\nLIBM := -lm\nLIBMNAME := libm\nelse\nLIBM := -lopenlibm\nLIBMNAME := libopenlibm\nendif\n\nifeq ($(USE_SYSTEM_LIBUV), 1)\n  LIBUV := $(LOCALBASE)/lib/libuv-julia.a\n  LIBUV_INC := $(LOCALBASE)/include\nelse\n  LIBUV := $(build_libdir)/libuv.a\n  LIBUV_INC := $(build_includedir)\nendif\n\nifeq ($(USE_SYSTEM_UTF8PROC), 1)\n  LIBUTF8PROC := -lutf8proc\n  UTF8PROC_INC := $(LOCALBASE)/include\nelse\n  LIBUTF8PROC := $(build_libdir)/libutf8proc.a\n  UTF8PROC_INC := $(build_includedir)\nendif\n\n# We need python for things like BB triplet recognition.  We don't really care\n# about version, generally, so just find something that works:\nPYTHON := $(shell which python 2>/dev/null || which python3 2>/dev/null || which python2 2>/dev/null || echo not found)\nPYTHON_SYSTEM := $(shell $(PYTHON) -c 'from __future__ import print_function; import platform; print(platform.system())')\n\n# If we're running on Cygwin, but using a native-windows Python, we need to use cygpath -w\nifneq ($(and $(filter $(PYTHON_SYSTEM),Windows),$(findstring CYGWIN,$(BUILD_OS))),)\ndefine invoke_python\n$(PYTHON) \"$$(cygpath -w \"$(1)\")\"\nendef\nelse\ndefine invoke_python\n$(PYTHON) \"$(1)\"\nendef\nendif\n\n# BinaryBuilder options.  We default to \"on\" for all the projects listed in BB_PROJECTS,\n# but only if contrib/normalize_triplet.py works for our requested triplet.\nifeq ($(shell $(call invoke_python,$(JULIAHOME)/contrib/normalize_triplet.py) $(or $(XC_HOST),$(XC_HOST),$(BUILD_MACHINE)) >/dev/null 2>/dev/null; echo $$?),0)\nUSE_BINARYBUILDER ?= 1\nelse\nifneq ($(shell $(call invoke_python,$(JULIAHOME)/contrib/normalize_triplet.py) x86_64-linux-gnu),x86_64-linux-gnu)\n$(warning normalize_triplet.py appears to be non-functional (used python interpreter \"$(PYTHON)\"), so BinaryBuilder disabled)\nendif\nUSE_BINARYBUILDER ?= 0\nendif\n\n# Auto-detect triplet once, create different versions that we use as defaults below for each BB install target\nFC_VERSION := $(shell $(FC) -dM -E - < /dev/null 2>/dev/null | grep __GNUC__ | cut -d' ' -f3)\nifeq ($(USEGCC)$(FC_VERSION),1)\nFC_OR_CC_VERSION := $(shell $(CC) -dumpfullversion -dumpversion 2>/dev/null | cut -d'.' -f1)\n# n.b. clang's __GNUC__ macro pretends to be gcc 4.2.1, so leave it as the empty string here if the compiler is not certain to be GCC\nendif\nBB_TRIPLET_LIBGFORTRAN_CXXABI := $(shell $(call invoke_python,$(JULIAHOME)/contrib/normalize_triplet.py) $(or $(XC_HOST),$(XC_HOST),$(BUILD_MACHINE)) \"$(FC_OR_CC_VERSION)\" \"$(or $(shell echo '\\#include <string>' | $(CXX) $(CXXFLAGS) -x c++ -dM -E - | grep _GLIBCXX_USE_CXX11_ABI | awk '{ print $$3 }' ),1)\")\nBB_TRIPLET_LIBGFORTRAN := $(subst $(SPACE),-,$(filter-out cxx%,$(subst -,$(SPACE),$(BB_TRIPLET_LIBGFORTRAN_CXXABI))))\nBB_TRIPLET_CXXABI := $(subst $(SPACE),-,$(filter-out libgfortran%,$(subst -,$(SPACE),$(BB_TRIPLET_LIBGFORTRAN_CXXABI))))\nBB_TRIPLET := $(subst $(SPACE),-,$(filter-out cxx%,$(filter-out libgfortran%,$(subst -,$(SPACE),$(BB_TRIPLET_LIBGFORTRAN_CXXABI)))))\n\nLIBGFORTRAN_VERSION := $(subst libgfortran,,$(filter libgfortran%,$(subst -,$(SPACE),$(BB_TRIPLET_LIBGFORTRAN))))\n\n# CSL_NEXT_GLIBCXX_VERSION is a triple of the symbols representing support for whatever\n# the next libstdc++ version would be. This is used for two things.\n# 1. Whether the system libraries are new enough, if we need to use the libs bundled with CSL\n# 2. To know which libstdc++ to load at runtime\n# We want whichever libstdc++ library is newer, because if we don't it can cause problems.\n# While what CSL bundles is quite bleeding-edge compared to what most distros ship, if someone\n# tries to build an older branch of Julia, the version of CSL that ships with it may be\n# relatively old. This is not a problem for code that is built in BB, but when we build Julia\n# with the system compiler, that compiler uses the version of `libstdc++` that it is bundled\n# with, and we can get linker errors when trying to run that `julia` executable with the\n# `libstdc++` that comes from the (now old) BB-built CSL.\n# To fix this, we take note when the system `libstdc++.so` is newer than whatever we\n# would get from CSL (by searching for a `GLIBCXX_X.Y.Z` symbol that does not exist\n# in our CSL, but would in a newer one), and default to `USE_BINARYBUILDER_CSL=0` in\n# this case. This ensures that we link against a version with the symbols required.\n# We also check the system libstdc++ at runtime in the cli loader library, and\n# load it if it contains the version symbol that indicates that it is newer than the one\n# shipped with CSL. Although we do not depend on any of the symbols, it is entirely\n# possible that a user might choose to install a library which depends on symbols provided\n# by a newer libstdc++. Without runtime detection, those libraries would break.\nCSL_NEXT_GLIBCXX_VERSION=GLIBCXX_3\\.4\\.33|GLIBCXX_3\\.5\\.|GLIBCXX_4\\.\n\n\n# This is the set of projects that BinaryBuilder dependencies are hooked up for.\n# Note: we explicitly _do not_ define `CSL` here, since it requires some more\n# advanced techniques to decide whether it should be installed from a BB source\n# or not.  See `deps/csl.mk` for more detail.\nBB_PROJECTS := BLASTRAMPOLINE OPENBLAS LLVM LIBSUITESPARSE OPENLIBM GMP OPENSSL LIBSSH2 NGHTTP2 MPFR CURL LIBGIT2 PCRE LIBUV LIBUNWIND DSFMT OBJCONV ZLIB P7ZIP LLD LIBTRACYCLIENT BOLT\ndefine SET_BB_DEFAULT\n# First, check to see if BB is disabled on a global setting\nifeq ($$(USE_BINARYBUILDER),0)\nUSE_BINARYBUILDER_$(1) ?= 0\nelse\n# If it's not, check to see if it's disabled by a USE_SYSTEM_xxx flag\nifeq ($$(USE_SYSTEM_$(1)),1)\nUSE_BINARYBUILDER_$(1) ?= 0\nelse\nUSE_BINARYBUILDER_$(1) ?= 1\nendif\nendif\nendef\n$(foreach proj,$(BB_PROJECTS),$(eval $(call SET_BB_DEFAULT,$(proj))))\n\n\n# Warn if the user tries to build something that requires `gfortran` but they don't have it installed.\nifeq ($(FC_VERSION),)\nifneq ($(USE_BINARYBUILDER_OPENBLAS)$(USE_BINARYBUILDER_LIBSUITESPARSE),11)\n$(error \"Attempting to build OpenBLAS or SuiteSparse without a functioning fortran compiler!\")\nendif\nendif\n\n\n# OS specific stuff\n\n# install_name_tool\nifeq ($(OS), Darwin)\n  # must end with a / and have no trailing spaces\n  INSTALL_NAME_ID_DIR := @rpath/\n  INSTALL_NAME_CMD := install_name_tool -id $(INSTALL_NAME_ID_DIR)\n  INSTALL_NAME_CHANGE_CMD := install_name_tool -change\nifneq (,$(findstring LLVM,$(shell dsymutil --version)))\n  DSYMUTIL := dsymutil\nelse ifeq ($(shell test `dsymutil -v | cut -d\\- -f2 | cut -d. -f1` -gt 102 && echo yes), yes)\n  DSYMUTIL := dsymutil\nelse\n  DSYMUTIL := true -ignore\nendif\nelse\n  INSTALL_NAME_ID_DIR :=\n  INSTALL_NAME_CMD := true -ignore\n  INSTALL_NAME_CHANGE_CMD := true -ignore\n  DSYMUTIL := true -ignore\nendif\n\n# shared library runtime paths\nifneq (,$(filter $(OS),WINNT emscripten))\n  RPATH :=\n  RPATH_ORIGIN :=\n  RPATH_ESCAPED_ORIGIN :=\nelse ifeq ($(OS), Darwin)\n  RPATH := -Wl,-rpath,'@executable_path/$(build_libdir_rel)'\n  RPATH_ORIGIN := -Wl,-rpath,'@loader_path/'\n  RPATH_ESCAPED_ORIGIN := $(RPATH_ORIGIN)\nelse\n  RPATH := -Wl,-rpath,'$$ORIGIN/$(build_libdir_rel)' -Wl,-rpath,'$$ORIGIN/$(build_private_libdir_rel)' -Wl,-rpath-link,$(build_shlibdir) -Wl,-z,origin -Wl,--enable-new-dtags\n  RPATH_ORIGIN := -Wl,-rpath,'$$ORIGIN' -Wl,-z,origin -Wl,--enable-new-dtags\n  RPATH_ESCAPED_ORIGIN := -Wl,-rpath,'\\$$\\$$ORIGIN' -Wl,-z,origin -Wl,-rpath-link,$(build_shlibdir) -Wl,--enable-new-dtags\nendif\nRPATH_LIB := $(RPATH_ORIGIN)\n\n# --whole-archive\nifeq ($(OS), Darwin)\n  WHOLE_ARCHIVE := -Xlinker -all_load\n  NO_WHOLE_ARCHIVE :=\nelse\n  WHOLE_ARCHIVE := -Wl,--whole-archive\n  NO_WHOLE_ARCHIVE := -Wl,--no-whole-archive\nendif\n\n# Initialize these once, then add to them in OS-specific blocks\nJLIBLDFLAGS :=\n\nifeq ($(OS), Linux)\nOSLIBS += -Wl,--no-as-needed -ldl -lrt -lpthread -latomic -Wl,--export-dynamic,--as-needed,--no-whole-archive\n# Detect if ifunc is supported\nIFUNC_DETECT_SRC := 'void (*f0(void))(void) { return (void(*)(void))0L; }; void f(void) __attribute__((ifunc(\"f0\")));'\nifeq (supported, $(shell echo $(IFUNC_DETECT_SRC) | $(CC) -Werror -x c - -S -o /dev/null > /dev/null 2>&1 && echo supported))\nJCPPFLAGS += -DJULIA_HAS_IFUNC_SUPPORT=1\nendif\nJLDFLAGS += -Wl,-Bdynamic\nOSLIBS += -Wl,--version-script=$(BUILDROOT)/src/julia.expmap\nifneq ($(SANITIZE),1)\nJLDFLAGS += -Wl,-no-undefined\nendif\nifeq (-Bsymbolic-functions, $(shell $(LD) --help | grep -o -e \"-Bsymbolic-functions\"))\nJLIBLDFLAGS += -Wl,-Bsymbolic-functions\nendif\nifeq (--enable-new-dtags, $(shell $(LD) --help | grep -o -e \"--enable-new-dtags\"))\nJLIBLDFLAGS += -Wl,--enable-new-dtags\nendif\n\n# Linker doesn't detect automatically that Julia doesn't need executable stack\nJLIBLDFLAGS += -Wl,-z,noexecstack\nendif\n\nifeq ($(OS), FreeBSD)\nJLDFLAGS += -Wl,-Bdynamic\nOSLIBS += -lelf -lkvm -lrt -lpthread -latomic\n\n# Tweak order of libgcc_s in DT_NEEDED,\n# make it loaded first to\n# prevent from linking to outdated system libs.\n# See #21788\n# TODO: Determine whether the condition here on AArch64 (added in #55089) should actually\n# be `ifneq ($(USE_BINARYBUILDER),0)`. We vendor a correctly versioned libgcc_s when using\n# BinaryBuilder which we want to link in early as noted above, but it could be the case\n# that without BinaryBuilder, regardless of architecture, we need to delay linking libgcc_s\n# to avoid getting the system one.\nifeq (,$(findstring aarch64,$(ARCH)))\nOSLIBS += -lgcc_s\nendif\n\nOSLIBS += -Wl,--export-dynamic -Wl,--version-script=$(BUILDROOT)/src/julia.expmap \\\n\t$(NO_WHOLE_ARCHIVE)\nendif\n\nifeq ($(OS), OpenBSD)\nJLDFLAGS += -Wl,--Bdynamic\nifneq ($(SANITIZE),1)\nJLDFLAGS += -Wl,-no-undefined\nendif\n\nJLIBLDFLAGS += -Wl,-Bsymbolic-functions\n\nOSLIBS += -Wl,--no-as-needed -lpthread -lm -lc++abi -lc\nOSLIBS += -Wl,--whole-archive -lcompiler_rt -Wl,--no-whole-archive\nOSLIBS += -Wl,--export-dynamic,--as-needed,--version-script=$(BUILDROOT)/src/julia.expmap\nendif\n\nifeq ($(OS), Darwin)\nSHLIB_EXT := dylib\nOSLIBS += -framework CoreFoundation\nWHOLE_ARCHIVE := -Xlinker -all_load\nNO_WHOLE_ARCHIVE :=\nHAVE_SSP := 1\nJLIBLDFLAGS += -Wl,-compatibility_version,$(SOMAJOR) -Wl,-current_version,$(JULIA_MAJOR_VERSION).$(JULIA_MINOR_VERSION).$(JULIA_PATCH_VERSION)\nendif\n\nifeq ($(OS), WINNT)\nHAVE_SSP := 1\nOSLIBS += -Wl,--export-all-symbols -Wl,--version-script=$(BUILDROOT)/src/julia.expmap \\\n\t$(NO_WHOLE_ARCHIVE) -lpsapi -lkernel32 -lws2_32 -liphlpapi -lwinmm -ldbghelp -luserenv -lsecur32 -latomic -lole32\nJLDFLAGS += -Wl,--stack,8388608 --disable-auto-import --disable-runtime-pseudo-reloc\nifeq ($(ARCH),i686)\nJLDFLAGS += -Wl,--large-address-aware\nendif\nJCPPFLAGS += -D_WIN32_WINNT=0x0502\nUNTRUSTED_SYSTEM_LIBM := 1\n# Use hard links for files on windows, rather than soft links\n#   https://stackoverflow.com/questions/3648819/how-to-make-a-symbolic-link-with-cygwin-in-windows-7\n# Usage: $(WIN_MAKE_HARD_LINK) <source> <target>\nWIN_MAKE_HARD_LINK := cp --dereference --link --force\nelse\nWIN_MAKE_HARD_LINK := true -ignore\nendif # $(OS) == WINNT\n\n# Threads\nifneq ($(JULIA_THREADS), 0)\nJCPPFLAGS += -DJULIA_NUM_THREADS=$(JULIA_THREADS)\nendif\n\n# Intel VTune Amplifier\nifeq ($(USE_INTEL_JITEVENTS), 1)\nJCPPFLAGS += -DJL_USE_INTEL_JITEVENTS\nendif\n\n# OProfile\nifeq ($(USE_OPROFILE_JITEVENTS), 1)\nJCPPFLAGS += -DJL_USE_OPROFILE_JITEVENTS\nendif\n\nifeq ($(DISABLE_LIBUNWIND), 1)\nJCPPFLAGS += -DJL_DISABLE_LIBUNWIND\nendif\n\n# perf\nifeq ($(USE_PERF_JITEVENTS), 1)\nJCPPFLAGS += -DJL_USE_PERF_JITEVENTS\nendif\n\nifeq ($(HAVE_SSP),1)\nJCPPFLAGS += -DHAVE_SSP=1\nifeq ($(USEGCC),1)\nOSLIBS += -lssp\nendif\nendif\n\n# Renaming OpenBLAS symbols, see #4923 and #8734\nifeq ($(USE_SYSTEM_BLAS), 0)\nifeq ($(USE_BLAS64), 1)\nOPENBLAS_SYMBOLSUFFIX := 64_\nOPENBLAS_LIBNAMESUFFIX := 64_\nLIBBLAS := -L$(build_shlibdir) -lopenblas$(OPENBLAS_LIBNAMESUFFIX)\nLIBLAPACK := $(LIBBLAS)\nLIBBLASNAME := $(LIBBLASNAME)$(OPENBLAS_LIBNAMESUFFIX)\nLIBLAPACKNAME := $(LIBBLASNAME)\nendif\nendif\n\n# Custom libcxx\nifeq ($(BUILD_CUSTOM_LIBCXX),1)\n$(error BUILD_CUSTOM_LIBCXX is currently not supported, BUILD_LIBCXX will provide LIBCXX but not link it)\nLDFLAGS += -L$(build_libdir)\nCXXLDFLAGS += -L$(build_libdir) -lc++abi -lc++\nifeq ($(USECLANG),1)\nCXXLDFLAGS += -stdlib=libc++\nelse\nifeq ($(USEGCC),1)\n$(error BUILD_CUSTOM_LIBCXX is currently only supported with Clang. Try setting BUILD_CUSTOM_LIBCXX=0 or USECLANG=1)\nendif\nendif # Clang\nCUSTOM_LD_LIBRARY_PATH := LD_LIBRARY_PATH=\"$(build_libdir)\"\nendif\n\n# Some special restrictions on BB usage:\nifeq ($(USE_SYSTEM_BLAS),1)\n# Since the names don't line up (`BLAS` vs. `OPENBLAS`), manually gate:\nUSE_BINARYBUILDER_OPENBLAS := 0\n# Disable BB LIBSUITESPARSE if we're using system BLAS\nUSE_BINARYBUILDER_LIBSUITESPARSE := 0\nendif\n\nifeq ($(USE_SYSTEM_LIBM),1)\n# If we're using system libm, disable BB OpenLibm\nUSE_BINARYBUILDER_OPENLIBM := 0\nendif\n\n\n# Note: we're passing *FLAGS here computed based on your system compiler to\n# clang. If that causes you problems, you might want to build and/or run\n# specific clang-sa-* files with clang explicitly selected:\n#   make CC=~+/../usr/tools/clang CXX=~+/../usr/tools/clang USECLANG=1 analyzegc\n#   make USECLANG=1 clang-sa-*\nCLANGSA_FLAGS :=\nCLANGSA_CXXFLAGS :=\nifeq ($(OS), Darwin) # on new XCode, the files are hidden\n CLANGSA_FLAGS += -isysroot $(shell xcrun --show-sdk-path -sdk macosx)\nendif\nifeq ($(USEGCC),1)\n# try to help clang find the c++ files for CC by guessing the value for --prefix\n# by dropping lib/gcc/<platform>/<version> from the install directory it reports\nCLANGSA_CXXFLAGS += --gcc-toolchain=\"$(abspath $(shell LANG=C $(CC) -print-search-dirs | grep '^install: ' | sed -e \"s/^install: //\")/../../../..)\"\nendif\n\n\n# Make tricks\n\ndefine dir_target\n$$(abspath $(1)):\n\t@mkdir -p $$@\nendef\n\nifeq ($(BUILD_OS), WINNT)\ndefine mingw_to_dos\n$(subst /,\\\\,$(subst $(shell $(2) pwd),$(shell $(2) cmd //C cd),$(abspath $(1))))\nendef\nendif\n\ndefine symlink_target # (from, to-dir, to-name)\nCLEAN_TARGETS += clean-$$(abspath $(2)/$(3))\nclean-$$(abspath $(2)/$(3)):\nifeq ($(BUILD_OS), WINNT)\n\t-cmd //C rmdir $$(call cygpath_w,$(2)/$(3))\nelse\n\trm -rf $$(abspath $(2)/$(3))\nendif\n$$(abspath $(2)/$(3)): | $$(abspath $(2))\nifeq ($$(BUILD_OS), WINNT)\n\t@cmd //C mklink //J $$(call cygpath_w,$(2)/$(3)) $$(call cygpath_w,$(1))\nelse ifneq (,$$(findstring CYGWIN,$$(BUILD_OS)))\n\t@cmd /C mklink /J $$(call cygpath_w,$(2)/$(3)) $$(call cygpath_w,$(1))\nelse ifdef JULIA_VAGRANT_BUILD\n\t@rm -rf $$@\n\t@cp -R $$(abspath $(1)) $$@.tmp\n\t@mv $$@.tmp $$@\nelse\n\t@ln -sf $$(abspath $(1)) $$@\nendif\nendef\n\n# Overridable in Make.user\nWINE ?= wine\n\nifeq ($(BINARY),32)\nHEAPLIM := --heap-size-hint=1000M\nelse\nHEAPLIM :=\nendif\n\n# many of the following targets must be = not := because the expansion of the makefile functions (and $1) shouldn't happen until later\nifeq ($(BUILD_OS), WINNT) # MSYS\nspawn = $(1)\ncygpath_w = `cygpath -w $(1)`\nelse ifneq (,$(findstring CYGWIN,$(BUILD_OS))) # Cygwin\nspawn = $(1)\ncygpath_w = `cygpath -w $(1)`\nelse\nifeq ($(OS), WINNT) # unix-to-Windows cross-compile\nspawn = $(WINE) $(1)\ncygpath_w = `$(WINE) winepath.exe -w $(1)`\nelse # not Windows\nspawn = $(1)\ncygpath_w = $(1)\nendif\nendif\n\nexec = $(shell $(call spawn,$(1)))\n\nJULIA_BUILD_MODE := release\nifeq (,$(findstring release,$(MAKECMDGOALS)))\nifneq (,$(findstring debug,$(MAKECMDGOALS)))\nJULIA_BUILD_MODE := debug\nendif\nendif\n\nJULIA_EXECUTABLE_debug := $(build_bindir)/julia-debug$(EXE)\nJULIA_EXECUTABLE_release := $(build_bindir)/julia$(EXE)\nJULIA_EXECUTABLE := $(JULIA_EXECUTABLE_$(JULIA_BUILD_MODE))\n\nJULIA_SYSIMG_debug := $(build_private_libdir)/sys-debug.$(SHLIB_EXT)\nJULIA_SYSIMG_release := $(build_private_libdir)/sys.$(SHLIB_EXT)\nJULIA_SYSIMG := $(JULIA_SYSIMG_$(JULIA_BUILD_MODE))\n\ndefine dep_lib_path\n$(shell $(PYTHON) $(call python_cygpath,$(JULIAHOME)/contrib/relative_path.py) $(1) $(2))\nendef\n\nLIBJULIAINTERNAL_BUILD_DEPLIB := $(call dep_lib_path,$(build_libdir),$(build_shlibdir)/libjulia-internal.$(JL_MAJOR_SHLIB_EXT))\nLIBJULIAINTERNAL_INSTALL_DEPLIB := $(call dep_lib_path,$(libdir),$(private_shlibdir)/libjulia-internal.$(JL_MAJOR_SHLIB_EXT))\n\nLIBJULIAINTERNAL_DEBUG_BUILD_DEPLIB := $(call dep_lib_path,$(build_libdir),$(build_shlibdir)/libjulia-internal-debug.$(JL_MAJOR_SHLIB_EXT))\nLIBJULIAINTERNAL_DEBUG_INSTALL_DEPLIB := $(call dep_lib_path,$(libdir),$(private_shlibdir)/libjulia-internal-debug.$(JL_MAJOR_SHLIB_EXT))\n\nLIBJULIACODEGEN_BUILD_DEPLIB := $(call dep_lib_path,$(build_libdir),$(build_shlibdir)/libjulia-codegen.$(JL_MAJOR_SHLIB_EXT))\nLIBJULIACODEGEN_INSTALL_DEPLIB := $(call dep_lib_path,$(libdir),$(private_shlibdir)/libjulia-codegen.$(JL_MAJOR_SHLIB_EXT))\n\nLIBJULIACODEGEN_DEBUG_BUILD_DEPLIB := $(call dep_lib_path,$(build_libdir),$(build_shlibdir)/libjulia-codegen-debug.$(JL_MAJOR_SHLIB_EXT))\nLIBJULIACODEGEN_DEBUG_INSTALL_DEPLIB := $(call dep_lib_path,$(libdir),$(private_shlibdir)/libjulia-codegen-debug.$(JL_MAJOR_SHLIB_EXT))\n\nifeq ($(OS),WINNT)\nifeq ($(BINARY),32)\nLIBGCC_NAME := libgcc_s_sjlj-1.$(SHLIB_EXT)\nelse\nLIBGCC_NAME := libgcc_s_seh-1.$(SHLIB_EXT)\nendif\nendif\n# On macOS, libgcc_s has soversion 1.1 always on aarch64 and only for GCC 12+\n# (-> libgfortran 5) on x86_64\nifeq ($(OS),Darwin)\nifeq ($(ARCH),aarch64)\nLIBGCC_NAME := libgcc_s.1.1.$(SHLIB_EXT)\nelse\nifeq ($(LIBGFORTRAN_VERSION),5)\nLIBGCC_NAME := libgcc_s.1.1.$(SHLIB_EXT)\nelse\nLIBGCC_NAME := libgcc_s.1.$(SHLIB_EXT)\nendif\nendif\nendif\nifneq ($(findstring $(OS),Linux FreeBSD),)\nLIBGCC_NAME := libgcc_s.$(SHLIB_EXT).1\nendif\n\n# USE_SYSTEM_CSL causes it to get symlinked into build_private_shlibdir\nifeq ($(USE_SYSTEM_CSL),1)\nLIBGCC_BUILD_DEPLIB := $(call dep_lib_path,$(build_libdir),$(build_private_shlibdir)/$(LIBGCC_NAME))\nelse\nLIBGCC_BUILD_DEPLIB := $(call dep_lib_path,$(build_libdir),$(build_shlibdir)/$(LIBGCC_NAME))\nendif\nLIBGCC_INSTALL_DEPLIB := $(call dep_lib_path,$(libdir),$(private_shlibdir)/$(LIBGCC_NAME))\n\n# We only bother to define this on Linux, as that's the only platform that does libstdc++ probing\n# On all other platforms, the LIBSTDCXX_*_DEPLIB variables will be empty.\nifeq ($(OS),Linux)\nLIBSTDCXX_NAME := libstdc++.so.6\nifeq ($(USE_SYSTEM_CSL),1)\nLIBSTDCXX_BUILD_DEPLIB := $(call dep_lib_path,$(build_libdir),$(build_private_shlibdir)/$(LIBSTDCXX_NAME))\nelse\nLIBSTDCXX_BUILD_DEPLIB := $(call dep_lib_path,$(build_libdir),$(build_shlibdir)/$(LIBSTDCXX_NAME))\nendif\nLIBSTDCXX_INSTALL_DEPLIB := $(call dep_lib_path,$(libdir),$(private_shlibdir)/$(LIBSTDCXX_NAME))\nendif\n\n\n# USE_SYSTEM_LIBM and USE_SYSTEM_OPENLIBM causes it to get symlinked into build_private_shlibdir\nifeq ($(USE_SYSTEM_LIBM),1)\nLIBM_BUILD_DEPLIB := $(call dep_lib_path,$(build_libdir),$(build_private_shlibdir)/$(LIBMNAME).$(SHLIB_EXT))\nelse ifeq ($(USE_SYSTEM_OPENLIBM),1)\nLIBM_BUILD_DEPLIB := $(call dep_lib_path,$(build_libdir),$(build_private_shlibdir)/$(LIBMNAME).$(SHLIB_EXT))\nelse\nLIBM_BUILD_DEPLIB := $(call dep_lib_path,$(build_libdir),$(build_shlibdir)/$(LIBMNAME).$(SHLIB_EXT))\nendif\nLIBM_INSTALL_DEPLIB := $(call dep_lib_path,$(libdir),$(private_shlibdir)/$(LIBMNAME).$(SHLIB_EXT))\n\n# We list:\n#  * libgcc_s, because FreeBSD needs to load ours, not the system one.\n#  * libopenlibm, because Windows has an untrustworthy libm, and we want to use ours more than theirs\n#  * libstdc++, because while performing `libstdc++` probing we need to\n#    know the path to the bundled `libstdc++` library.\n#  * libjulia-internal, which must always come second-to-last.\n#  * libjulia-codegen, which must always come last\n#\n# We need these four separate variables because:\n#  * debug builds must link against libjuliadebug, not libjulia\n#  * install time relative paths are not equal to build time relative paths (../lib vs. ../lib/julia)\n# That second point will no longer be true for most deps once they are placed within Artifacts directories.\n# Note that we prefix `libjulia-codegen` and `libjulia-internal` with `@` to signify to the loader that it\n# should not automatically dlopen() it in its loading loop, it is \"special\" and should happen later.\n# We do the same for `libstdc++`, and explicitly place it _after_ `libgcc_s`, and `libm` since `libstdc++`\n# may depend on those libraries (e.g. when USE_SYSTEM_LIBM=1)\n\n# Helper function to join a list with colons, then place an extra at the end.\ndefine build_deplibs\n$(subst $(SPACE),:,$(strip $(1))):\nendef\n\nLOADER_BUILD_DEP_LIBS = $(call build_deplibs, \\\n    $(LIBGCC_BUILD_DEPLIB) \\\n    $(LIBM_BUILD_DEPLIB) \\\n    @$(LIBSTDCXX_BUILD_DEPLIB) \\\n    @$(LIBJULIAINTERNAL_BUILD_DEPLIB) \\\n    @$(LIBJULIACODEGEN_BUILD_DEPLIB) \\\n)\n\nLOADER_DEBUG_BUILD_DEP_LIBS = $(call build_deplibs, \\\n   $(LIBGCC_BUILD_DEPLIB) \\\n   $(LIBM_BUILD_DEPLIB) \\\n   @$(LIBSTDCXX_BUILD_DEPLIB) \\\n   @$(LIBJULIAINTERNAL_DEBUG_BUILD_DEPLIB) \\\n   @$(LIBJULIACODEGEN_DEBUG_BUILD_DEPLIB) \\\n)\n\nLOADER_INSTALL_DEP_LIBS = $(call build_deplibs, \\\n    $(LIBGCC_INSTALL_DEPLIB) \\\n    $(LIBM_INSTALL_DEPLIB) \\\n    @$(LIBSTDCXX_INSTALL_DEPLIB) \\\n    @$(LIBJULIAINTERNAL_INSTALL_DEPLIB) \\\n    @$(LIBJULIACODEGEN_INSTALL_DEPLIB) \\\n)\nLOADER_DEBUG_INSTALL_DEP_LIBS = $(call build_deplibs, \\\n    $(LIBGCC_INSTALL_DEPLIB) \\\n    $(LIBM_INSTALL_DEPLIB) \\\n    @$(LIBSTDCXX_INSTALL_DEPLIB) \\\n    @$(LIBJULIAINTERNAL_DEBUG_INSTALL_DEPLIB) \\\n    @$(LIBJULIACODEGEN_DEBUG_INSTALL_DEPLIB) \\\n)\n\n# Colors for make\nifndef VERBOSE\nVERBOSE := 0\nendif\n\nifeq ($(VERBOSE), 0)\n\nQUIET_MAKE = -s\n\nGOAL=$(subst ','\\'',$(subst $(abspath $(JULIAHOME))/,,$(abspath $@)))\n\nPRINT_CC = printf '    %b %b\\n' $(CCCOLOR)CC$(ENDCOLOR) $(SRCCOLOR)$(GOAL)$(ENDCOLOR); $(1)\nPRINT_ANALYZE = printf '    %b %b\\n' $(CCCOLOR)ANALYZE$(ENDCOLOR) $(SRCCOLOR)$(GOAL)$(ENDCOLOR); $(1)\nPRINT_LINK = printf '    %b %b\\n' $(LINKCOLOR)LINK$(ENDCOLOR) $(BINCOLOR)$(GOAL)$(ENDCOLOR); $(1)\nPRINT_PERL = printf '    %b %b\\n' $(PERLCOLOR)PERL$(ENDCOLOR) $(BINCOLOR)$(GOAL)$(ENDCOLOR); $(1)\nPRINT_FLISP = printf '    %b %b\\n' $(FLISPCOLOR)FLISP$(ENDCOLOR) $(BINCOLOR)$(GOAL)$(ENDCOLOR); $(1)\nPRINT_JULIA = printf '    %b %b\\n' $(JULIACOLOR)JULIA$(ENDCOLOR) $(BINCOLOR)$(GOAL)$(ENDCOLOR); $(1)\nPRINT_DTRACE = printf '    %b %b\\n' $(DTRACECOLOR)DTRACE$(ENDCOLOR) $(BINCOLOR)$(GOAL)$(ENDCOLOR); $(1)\n\nelse\nQUIET_MAKE =\nPRINT_CC = echo '$(subst ','\\'',$(1))'; $(1)\nPRINT_ANALYZE = echo '$(subst ','\\'',$(1))'; $(1)\nPRINT_LINK = echo '$(subst ','\\'',$(1))'; $(1)\nPRINT_PERL = echo '$(subst ','\\'',$(1))'; $(1)\nPRINT_FLISP = echo '$(subst ','\\'',$(1))'; $(1)\nPRINT_JULIA = echo '$(subst ','\\'',$(1))'; $(1)\nPRINT_DTRACE = echo '$(subst ','\\'',$(1))'; $(1)\n\nendif # VERBOSE\n\n# Makefile debugging trick:\n# call print-VARIABLE to see the runtime value of any variable\n# (hardened against any special characters appearing in the output)\nprint-%:\n\t@echo '$*=$(subst ','\\'',$(subst $(newline),\\n,$($*)))'\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 32.03,
          "content": "JULIAHOME := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))\ninclude $(JULIAHOME)/Make.inc\n# import LLVM_SHARED_LIB_NAME\ninclude $(JULIAHOME)/deps/llvm-ver.make\n\n# Make sure the user didn't try to build in a path that will confuse the shell or make\nMETACHARACTERS := [][?*{}() $$%:;&|!\\#,\\\\`\\\":]\\|/\\./\\|/\\.\\./\nifneq (,$(findstring ',$(value BUILDROOT)))\n$(error cowardly refusing to build into directory with a single-quote in the path)\nendif\nifneq (,$(findstring ',$(value JULIAHOME)))\n$(error cowardly refusing to build from source directory with a single-quote in the path)\nendif\nifneq (,$(shell echo '$(value BUILDROOT)/' | grep '$(METACHARACTERS)'))\n$(error cowardly refusing to build into directory with a shell-metacharacter in the path\\\n    (got: $(value BUILDROOT)))\nendif\nifneq (,$(shell echo '$(value JULIAHOME)/' | grep '$(METACHARACTERS)'))\n$(error cowardly refusing to build from source directory with a shell-metacharacter in the path\\\n    (got: $(value JULIAHOME)))\nendif\n\nVERSDIR := v`cut -d. -f1-2 < $(JULIAHOME)/VERSION`\n\ndefault: $(JULIA_BUILD_MODE) # contains either \"debug\" or \"release\"\nall: debug release\n\n# sort is used to remove potential duplicates\nDIRS := $(sort $(build_bindir) $(build_depsbindir) $(build_libdir) $(build_private_libdir) $(build_libexecdir) $(build_includedir) $(build_includedir)/julia $(build_sysconfdir)/julia $(build_datarootdir)/julia $(build_datarootdir)/julia/stdlib $(build_man1dir))\nifneq ($(BUILDROOT),$(JULIAHOME))\nBUILDDIRS := $(BUILDROOT) $(addprefix $(BUILDROOT)/,base src src/flisp src/support src/clangsa cli doc deps stdlib test test/clangsa test/embedding test/gcext test/llvmpasses)\nBUILDDIRMAKE := $(addsuffix /Makefile,$(BUILDDIRS)) $(BUILDROOT)/sysimage.mk $(BUILDROOT)/pkgimage.mk\nDIRS += $(BUILDDIRS)\n$(BUILDDIRMAKE): | $(BUILDDIRS)\n\t@# add Makefiles to the build directories for convenience (pointing back to the source location of each)\n\t@echo '# -- This file is automatically generated in julia/Makefile -- #' > $@\n\t@echo 'BUILDROOT=$(BUILDROOT)' >> $@\n\t@echo 'include $(JULIAHOME)$(patsubst $(BUILDROOT)%,%,$@)' >> $@\njulia-deps: | $(BUILDDIRMAKE)\nconfigure-y: | $(BUILDDIRMAKE)\nconfigure:\nifeq (\"$(origin O)\", \"command line\")\n\t@if [ \"$$(ls '$(BUILDROOT)' 2> /dev/null)\" ]; then \\\n\t\tprintf $(WARNCOLOR)'WARNING: configure called on non-empty directory'$(ENDCOLOR)' %s\\n' '$(BUILDROOT)'; \\\n\t\tread -p \"Proceed [y/n]? \" answer; \\\n\telse \\\n\t\tanswer=y;\\\n\tfi; \\\n\t[ \"y$$answer\" = yy ] && $(MAKE) configure-$$answer\nelse\n\t$(error \"cannot rerun configure from within a build directory\")\nendif\nelse\nconfigure:\n\t$(error \"must specify O=builddir to run the Julia `make configure` target\")\nendif\n\n$(foreach dir,$(DIRS),$(eval $(call dir_target,$(dir))))\n$(foreach link,base $(JULIAHOME)/test,$(eval $(call symlink_target,$(link),$$(build_datarootdir)/julia,$(notdir $(link)))))\n\njulia_flisp.boot.inc.phony: julia-deps\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/src julia_flisp.boot.inc.phony\n\n# Build the HTML docs (skipped if already exists, notably in tarballs)\n$(BUILDROOT)/doc/_build/html/en/index.html: $(shell find $(BUILDROOT)/base $(BUILDROOT)/doc \\( -path $(BUILDROOT)/doc/_build -o -path $(BUILDROOT)/doc/deps -o -name *_constants.jl -o -name *_h.jl -o -name version_git.jl \\) -prune -o -type f -print)\n\t@$(MAKE) docs\n\njulia-symlink: julia-cli-$(JULIA_BUILD_MODE)\nifeq ($(OS),WINNT)\n\techo '@\"%~dp0/'\"$$(echo '$(call rel_path,$(BUILDROOT),$(JULIA_EXECUTABLE))')\"'\" %*' | tr / '\\\\' > $(BUILDROOT)/julia.bat\n\tchmod a+x $(BUILDROOT)/julia.bat\nelse\nifndef JULIA_VAGRANT_BUILD\n\t@ln -sf $(call rel_path,$(BUILDROOT),$(JULIA_EXECUTABLE)) $(BUILDROOT)/julia\nendif\nendif\n\nTOP_LEVEL_PKGS := Compiler\n\nTOP_LEVEL_PKG_LINK_TARGETS := $(addprefix $(build_datarootdir)/julia/,$(TOP_LEVEL_PKGS))\n\n# Generate symlinks for top level pkgs in usr/share/julia/\n$(foreach module, $(TOP_LEVEL_PKGS), $(eval $(call symlink_target,$$(JULIAHOME)/$(module),$$(build_datarootdir)/julia,$(module))))\n\njulia-deps: | $(DIRS) $(build_datarootdir)/julia/base $(build_datarootdir)/julia/test\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/deps\n\n# `julia-stdlib` depends on `julia-deps` so that the fake JLL stdlibs can copy in their Artifacts.toml files.\njulia-stdlib: | $(DIRS) julia-deps\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/stdlib\n\njulia-base: julia-deps $(build_sysconfdir)/julia/startup.jl $(build_man1dir)/julia.1 $(build_datarootdir)/julia/julia-config.jl $(build_datarootdir)/julia/juliac.jl $(build_datarootdir)/julia/juliac-buildscript.jl\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/base\n\njulia-libccalltest: julia-deps\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/src libccalltest\n\njulia-libccalllazyfoo: julia-deps\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/src libccalllazyfoo\n\njulia-libccalllazybar: julia-deps julia-libccalllazyfoo\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/src libccalllazybar\n\njulia-libllvmcalltest: julia-deps\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/src libllvmcalltest\n\njulia-src-release julia-src-debug : julia-src-% : julia-deps julia_flisp.boot.inc.phony julia-cli-%\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/src $*\n\njulia-cli-release julia-cli-debug: julia-cli-% : julia-deps\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/cli $*\n\njulia-sysimg-ji : $(TOP_LEVEL_PKG_LINK_TARGETS) julia-stdlib julia-base julia-cli-$(JULIA_BUILD_MODE) julia-src-$(JULIA_BUILD_MODE) | $(build_private_libdir)\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT) -f sysimage.mk sysimg-ji JULIA_EXECUTABLE='$(JULIA_EXECUTABLE)'\n\njulia-sysimg-bc : $(TOP_LEVEL_PKG_LINK_TARGETS) julia-stdlib julia-base julia-cli-$(JULIA_BUILD_MODE) julia-src-$(JULIA_BUILD_MODE) | $(build_private_libdir)\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT) -f sysimage.mk sysimg-bc JULIA_EXECUTABLE='$(JULIA_EXECUTABLE)'\n\njulia-sysimg-release julia-sysimg-debug : julia-sysimg-% : julia-sysimg-ji julia-src-%\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT) -f sysimage.mk sysimg-$*\n\njulia-debug julia-release : julia-% : julia-sysimg-% julia-src-% julia-symlink julia-libccalltest \\\n                                      julia-libccalllazyfoo julia-libccalllazybar julia-libllvmcalltest julia-base-cache\n\nstdlibs-cache-release stdlibs-cache-debug : stdlibs-cache-% : julia-%\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT) -f pkgimage.mk $*\n\ndebug release : % : julia-% stdlibs-cache-%\n\ndocs: julia-sysimg-$(JULIA_BUILD_MODE) stdlibs-cache-$(JULIA_BUILD_MODE)\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/doc JULIA_EXECUTABLE='$(call spawn,$(JULIA_EXECUTABLE_$(JULIA_BUILD_MODE))) --startup-file=no'\n\ndocs-revise:\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/doc JULIA_EXECUTABLE='$(call spawn,$(JULIA_EXECUTABLE_$(JULIA_BUILD_MODE))) --startup-file=no' revise=true\n\ncheck-whitespace:\nifneq ($(NO_GIT), 1)\n\t@# Append the directory containing the julia we just built to the end of `PATH`,\n\t@# to give us the best chance of being able to run this check.\n\t@PATH=\"$(PATH):$(dir $(JULIA_EXECUTABLE))\" julia $(call cygpath_w,$(JULIAHOME)/contrib/check-whitespace.jl)\nelse\n\t$(warn \"Skipping whitespace check because git is unavailable\")\nendif\n\nrelease-candidate: release testall\n\t@$(JULIA_EXECUTABLE) $(JULIAHOME)/contrib/add_license_to_files.jl #add license headers\n\t@#Check documentation\n\t@$(JULIA_EXECUTABLE) $(JULIAHOME)/doc/NEWS-update.jl #Add missing cross-references to NEWS.md\n\t@$(MAKE) -C $(BUILDROOT)/doc html doctest=true linkcheck=true\n\t@$(MAKE) -C $(BUILDROOT)/doc pdf\n\n\t@# Check to see if the above make invocations changed anything important\n\t@if [ -n \"$$(git status --porcelain)\" ]; then \\\n\t\techo \"Git repository dirty; Verify and commit changes to the repository, then retry\"; \\\n\t\texit 1; \\\n\tfi\n\n\t@#Check that netload tests work\n\t@#for test in test/netload/*.jl; do julia $$test; if [ $$? -ne 0 ]; then exit 1; fi; done\n\t@echo\n\t@echo To complete the release candidate checklist:\n\t@echo\n\n\t@echo 1. Remove deprecations in base/deprecated.jl\n\t@echo 2. Update references to the julia version in the source directories, such as in README.md\n\t@echo 3. Bump VERSION\n\t@echo 4. Increase SOMAJOR and SOMINOR if needed.\n\t@echo 5. Update SPDX document by running the script contrib/updateSPDX.jl\n\t@echo 6. Create tag, push to github \"\\(git tag v\\`cat VERSION\\` && git push --tags\\)\"\t\t#\"` # These comments deal with incompetent syntax highlighting rules\n\t@echo 7. Clean out old .tar.gz files living in deps/, \"\\`git clean -fdx\\`\" seems to work\t#\"`\n\t@echo 8. Replace github release tarball with tarballs created from make light-source-dist and make full-source-dist with USE_BINARYBUILDER=0\n\t@echo 9. Check that 'make && make install && make test' succeed with unpacked tarballs even without Internet access.\n\t@echo 10. Follow packaging instructions in doc/src/devdocs/build/distributing.md to create binary packages for all platforms\n\t@echo 11. Upload to AWS, update https://julialang.org/downloads and https://status.julialang.org/stable links\n\t@echo 12. Update checksums on AWS for tarball and packaged binaries\n\t@echo 13. Update versions.json. Wait at least 60 minutes before proceeding to step 14.\n\t@echo 14. Push to Juliaup (https://github.com/JuliaLang/juliaup/wiki/Adding-a-Julia-version)\n\t@echo 15. Announce on mailing lists\n\t@echo 16. Change master to release-0.X in base/version.jl and base/version_git.sh as in 4cb1e20\n\t@echo\n\n$(build_man1dir)/julia.1: $(JULIAHOME)/doc/man/julia.1 | $(build_man1dir)\n\t@echo Copying in usr/share/man/man1/julia.1\n\t@mkdir -p $(build_man1dir)\n\t@cp $< $@\n\n$(build_sysconfdir)/julia/startup.jl: $(JULIAHOME)/etc/startup.jl | $(build_sysconfdir)/julia\n\t@echo Creating usr/etc/julia/startup.jl\n\t@cp $< $@\n\n$(build_datarootdir)/julia/%: $(JULIAHOME)/contrib/% | $(build_datarootdir)/julia\n\t$(INSTALL_M) $< $(dir $@)\n\n$(build_depsbindir)/stringreplace: $(JULIAHOME)/contrib/stringreplace.c | $(build_depsbindir)\n\t@$(call PRINT_CC, $(HOSTCC) -o $(build_depsbindir)/stringreplace $(JULIAHOME)/contrib/stringreplace.c)\n\njulia-base-cache: julia-sysimg-$(JULIA_BUILD_MODE) | $(DIRS) $(build_datarootdir)/julia\n\t@JULIA_BINDIR=$(call cygpath_w,$(build_bindir)) JULIA_FALLBACK_REPL=1 WINEPATH=\"$(call cygpath_w,$(build_bindir));$$WINEPATH\" \\\n\t\t$(call spawn, $(JULIA_EXECUTABLE) --startup-file=no $(call cygpath_w,$(JULIAHOME)/contrib/write_base_cache.jl) \\\n\t\t$(call cygpath_w,$(build_datarootdir)/julia/base.cache))\n\n# public libraries, that are installed in $(prefix)/lib\nifeq ($(JULIA_BUILD_MODE),release)\nJL_TARGETS := julia\nelse ifeq ($(JULIA_BUILD_MODE),debug)\nJL_TARGETS := julia-debug\nendif\n\n# private libraries, that are installed in $(prefix)/lib/julia\nJL_PRIVATE_LIBS-0 := libccalltest libccalllazyfoo libccalllazybar libllvmcalltest\nifeq ($(JULIA_BUILD_MODE),release)\nJL_PRIVATE_LIBS-0 += libjulia-internal libjulia-codegen\nelse ifeq ($(JULIA_BUILD_MODE),debug)\nJL_PRIVATE_LIBS-0 += libjulia-internal-debug libjulia-codegen-debug\nendif\n# BSD-3-Clause\nJL_PRIVATE_LIBS-$(USE_SYSTEM_LIBSUITESPARSE) += libamd libcamd libccolamd libcolamd libsuitesparseconfig\n# LGPL-2.1+\nJL_PRIVATE_LIBS-$(USE_SYSTEM_LIBSUITESPARSE) += libbtf libklu libldl\nifeq ($(USE_GPL_LIBS), 1)\n# GPL-2.0+\nJL_PRIVATE_LIBS-$(USE_SYSTEM_LIBSUITESPARSE) += libcholmod librbio libspqr libumfpack\nendif\nJL_PRIVATE_LIBS-$(USE_SYSTEM_LIBBLASTRAMPOLINE) += libblastrampoline\nJL_PRIVATE_LIBS-$(USE_SYSTEM_PCRE) += libpcre2-8\nJL_PRIVATE_LIBS-$(USE_SYSTEM_DSFMT) += libdSFMT\nJL_PRIVATE_LIBS-$(USE_SYSTEM_GMP) += libgmp libgmpxx\nJL_PRIVATE_LIBS-$(USE_SYSTEM_MPFR) += libmpfr\nJL_PRIVATE_LIBS-$(USE_SYSTEM_LIBSSH2) += libssh2\nJL_PRIVATE_LIBS-$(USE_SYSTEM_NGHTTP2) += libnghttp2\nJL_PRIVATE_LIBS-$(USE_SYSTEM_OPENSSL) += libcrypto libssl\nJL_PRIVATE_LIBS-$(USE_SYSTEM_CURL) += libcurl\nJL_PRIVATE_LIBS-$(USE_SYSTEM_LIBGIT2) += libgit2\nJL_PRIVATE_LIBS-$(USE_SYSTEM_LIBUV) += libuv\nifeq ($(OS),WINNT)\nJL_PRIVATE_LIBS-$(USE_SYSTEM_ZLIB) += zlib\nelse\nJL_PRIVATE_LIBS-$(USE_SYSTEM_ZLIB) += libz\nendif\nifeq ($(USE_LLVM_SHLIB),1)\nJL_PRIVATE_LIBS-$(USE_SYSTEM_LLVM) += libLLVM $(LLVM_SHARED_LIB_NAME)\nendif\nJL_PRIVATE_LIBS-$(USE_SYSTEM_LIBUNWIND) += libunwind\n\nifeq ($(USE_SYSTEM_LIBM),0)\nJL_PRIVATE_LIBS-$(USE_SYSTEM_OPENLIBM) += libopenlibm\nendif\n\nJL_PRIVATE_LIBS-$(USE_SYSTEM_BLAS) += $(LIBBLASNAME)\nifneq ($(LIBLAPACKNAME),$(LIBBLASNAME))\nJL_PRIVATE_LIBS-$(USE_SYSTEM_LAPACK) += $(LIBLAPACKNAME)\nendif\n\nJL_PRIVATE_LIBS-$(USE_SYSTEM_CSL) += libgfortran libquadmath libstdc++ libgcc_s libgomp libssp libatomic\nifeq ($(OS),Darwin)\nJL_PRIVATE_LIBS-$(USE_SYSTEM_CSL) += libc++\nendif\nifeq ($(OS),WINNT)\nJL_PRIVATE_LIBS-$(USE_SYSTEM_CSL) += libwinpthread\nelse\nJL_PRIVATE_LIBS-$(USE_SYSTEM_CSL) += libpthread\nendif\nifeq ($(SANITIZE),1)\nifeq ($(USECLANG),1)\nJL_PRIVATE_LIBS-0 += libclang_rt.asan-*\nelse\nJL_PRIVATE_LIBS-0 += libasan\nendif\nendif\n\nifeq ($(WITH_TRACY),1)\nJL_PRIVATE_LIBS-0 += libTracyClient\nendif\n\n\nifeq ($(OS),Darwin)\nifeq ($(USE_SYSTEM_BLAS),1)\nifeq ($(USE_SYSTEM_LAPACK),0)\nJL_PRIVATE_LIBS-0 += libgfortblas\nendif\nendif\nendif\n\n# Note that we disable MSYS2's path munging here, as otherwise\n# it replaces our `:`-separated list as a `;`-separated one.\ndefine stringreplace\n\tMSYS2_ARG_CONV_EXCL='*' $(build_depsbindir)/stringreplace $$(strings -t x - '$1' | grep \"$2\" | awk '{print $$1;}') \"$3\" 255 \"$(call cygpath_w,$1)\"\nendef\n\n\ninstall: $(build_depsbindir)/stringreplace $(BUILDROOT)/doc/_build/html/en/index.html\n\t@$(MAKE) $(QUIET_MAKE) $(JULIA_BUILD_MODE)\n\t@for subdir in $(bindir) $(datarootdir)/julia/stdlib/$(VERSDIR) $(docdir) $(man1dir) $(includedir)/julia $(libdir) $(private_libdir) $(sysconfdir) $(private_libexecdir); do \\\n\t\tmkdir -p $(DESTDIR)$$subdir; \\\n\tdone\n\n\t$(INSTALL_M) $(JULIA_EXECUTABLE_$(JULIA_BUILD_MODE)) $(DESTDIR)$(bindir)/\nifeq ($(OS),WINNT)\n\t-$(INSTALL_M) $(wildcard $(build_bindir)/*.dll) $(DESTDIR)$(bindir)/\nifeq ($(JULIA_BUILD_MODE),release)\n\t-$(INSTALL_M) $(build_libdir)/libjulia.dll.a $(DESTDIR)$(libdir)/\n\t-$(INSTALL_M) $(build_libdir)/libjulia-internal.dll.a $(DESTDIR)$(libdir)/\nelse ifeq ($(JULIA_BUILD_MODE),debug)\n\t-$(INSTALL_M) $(build_libdir)/libjulia-debug.dll.a $(DESTDIR)$(libdir)/\n\t-$(INSTALL_M) $(build_libdir)/libjulia-internal-debug.dll.a $(DESTDIR)$(libdir)/\nendif\n\t-$(INSTALL_M) $(wildcard $(build_private_libdir)/*.a) $(DESTDIR)$(private_libdir)/\n\t-rm -f $(DESTDIR)$(private_libdir)/sys-o.a\n\n\t# We have a single exception; we want 7z.dll to live in private_libexecdir,\n\t# not bindir, so that 7z.exe can find it.\n\t-mv $(DESTDIR)$(bindir)/7z.dll $(DESTDIR)$(private_libexecdir)/\n\t-$(INSTALL_M) $(build_bindir)/libopenlibm.dll.a $(DESTDIR)$(libdir)/\n\t-$(INSTALL_M) $(build_libdir)/libssp.dll.a $(DESTDIR)$(libdir)/\nelse\n\n# Copy over .dSYM directories directly for Darwin\nifneq ($(DARWIN_FRAMEWORK),1)\nifeq ($(OS),Darwin)\nifeq ($(JULIA_BUILD_MODE),release)\n\t-cp -a $(build_libdir)/libjulia.*.dSYM $(DESTDIR)$(libdir)\n\t-cp -a $(build_libdir)/libjulia-internal.*.dSYM $(DESTDIR)$(private_libdir)\n\t-cp -a $(build_libdir)/libjulia-codegen.*.dSYM $(DESTDIR)$(private_libdir)\n\t-cp -a $(build_private_libdir)/sys.dylib.dSYM $(DESTDIR)$(private_libdir)\nelse ifeq ($(JULIA_BUILD_MODE),debug)\n\t-cp -a $(build_libdir)/libjulia-debug.*.dSYM $(DESTDIR)$(libdir)\n\t-cp -a $(build_libdir)/libjulia-internal-debug.*.dSYM $(DESTDIR)$(private_libdir)\n\t-cp -a $(build_libdir)/libjulia-codegen-debug.*.dSYM $(DESTDIR)$(private_libdir)\n\t-cp -a $(build_private_libdir)/sys-debug.dylib.dSYM $(DESTDIR)$(private_libdir)\nendif\nendif\n\n# Copy over shared library file for libjulia.*\n\tfor suffix in $(JL_TARGETS) ; do \\\n\t\tfor lib in $(build_libdir)/lib$${suffix}.*$(SHLIB_EXT)*; do \\\n\t\t\tif [ \"$${lib##*.}\" != \"dSYM\" ]; then \\\n\t\t\t\t$(INSTALL_M) $$lib $(DESTDIR)$(libdir) ; \\\n\t\t\tfi \\\n\t\tdone \\\n\tdone\nelse\n# libjulia in Darwin framework has special location and name\nifeq ($(JULIA_BUILD_MODE),release)\n\t$(INSTALL_M) $(build_libdir)/libjulia.$(SOMAJOR).$(SOMINOR).dylib $(DESTDIR)$(prefix)/$(framework_dylib)\n\t@$(DSYMUTIL) -o $(DESTDIR)$(prefix)/$(framework_resources)/$(FRAMEWORK_NAME).dSYM $(DESTDIR)$(prefix)/$(framework_dylib)\n\t@$(DSYMUTIL) -o $(DESTDIR)$(prefix)/$(framework_resources)/sys.dylib.dSYM $(build_private_libdir)/sys.dylib\nelse ifeq ($(JULIA_BUILD_MODE),debug)\n\t$(INSTALL_M) $(build_libdir)/libjulia-debug.$(SOMAJOR).$(SOMINOR).dylib $(DESTDIR)$(prefix)/$(framework_dylib)_debug\n\t@$(DSYMUTIL) -o $(DESTDIR)$(prefix)/$(framework_resources)/$(FRAMEWORK_NAME)_debug.dSYM $(DESTDIR)$(prefix)/$(framework_dylib)_debug\n\t@$(DSYMUTIL) -o $(DESTDIR)$(prefix)/$(framework_resources)/sys-debug.dylib.dSYM $(build_private_libdir)/sys-debug.dylib\nendif\nendif\n\n\tfor suffix in $(JL_PRIVATE_LIBS-0) ; do \\\n\t\tfor lib in $(build_libdir)/$${suffix}.*$(SHLIB_EXT)*; do \\\n\t\t\tif [ \"$${lib##*.}\" != \"dSYM\" ]; then \\\n\t\t\t\t$(INSTALL_M) $$lib $(DESTDIR)$(private_libdir) ; \\\n\t\t\tfi \\\n\t\tdone \\\n\tdone\n\tfor suffix in $(JL_PRIVATE_LIBS-1) ; do \\\n\t\tfor lib in $(build_private_libdir)/$${suffix}.$(SHLIB_EXT)*; do \\\n\t\t\tif [ \"$${lib##*.}\" != \"dSYM\" ]; then \\\n\t\t\t\t$(INSTALL_M) $$lib $(DESTDIR)$(private_libdir) ; \\\n\t\t\tfi \\\n\t\tdone \\\n\tdone\nendif\n\t# Install `7z` into private_libexecdir\n\t$(INSTALL_M) $(build_bindir)/7z$(EXE) $(DESTDIR)$(private_libexecdir)/\n\n\t# Install `lld` into private_libexecdir\n\t$(INSTALL_M) $(build_depsbindir)/lld$(EXE) $(DESTDIR)$(private_libexecdir)/\n\n\t# Install `dsymutil` into private_libexecdir/\n\t$(INSTALL_M) $(build_depsbindir)/dsymutil$(EXE) $(DESTDIR)$(private_libexecdir)/\n\n\t# Copy public headers\n\tcp -R -L $(build_includedir)/julia/* $(DESTDIR)$(includedir)/julia\n\t# Copy system image\nifeq ($(JULIA_BUILD_MODE),release)\n\t$(INSTALL_M) $(build_private_libdir)/sys.$(SHLIB_EXT) $(DESTDIR)$(private_libdir)\nelse ifeq ($(JULIA_BUILD_MODE),debug)\n\t$(INSTALL_M) $(build_private_libdir)/sys-debug.$(SHLIB_EXT) $(DESTDIR)$(private_libdir)\nendif\n\n\t# Copy in all .jl sources as well\n\tmkdir -p $(DESTDIR)$(datarootdir)/julia/base $(DESTDIR)$(datarootdir)/julia/test\n\tcp -R -L $(JULIAHOME)/base/* $(DESTDIR)$(datarootdir)/julia/base\n\tcp -R -L $(JULIAHOME)/test/* $(DESTDIR)$(datarootdir)/julia/test\n\tcp -R -L $(build_datarootdir)/julia/* $(DESTDIR)$(datarootdir)/julia\n\n\t# Set .jl sources as read-only to match package directories\n\tfind $(DESTDIR)$(datarootdir)/julia/base -type f -name \\*.jl -exec chmod 0444 '{}' \\;\n\tfind $(DESTDIR)$(datarootdir)/julia/test -type f -name \\*.jl -exec chmod 0444 '{}' \\;\n\n\t# Copy documentation\n\tcp -R -L $(BUILDROOT)/doc/_build/html $(DESTDIR)$(docdir)/\n\t# Remove various files which should not be installed\n\t-rm -f $(DESTDIR)$(datarootdir)/julia/base/version_git.sh\n\t-rm -f $(DESTDIR)$(datarootdir)/julia/test/Makefile\n\t-rm -f $(DESTDIR)$(datarootdir)/julia/base/*/source-extracted\n\t-rm -f $(DESTDIR)$(datarootdir)/julia/base/*/build-configured\n\t-rm -f $(DESTDIR)$(datarootdir)/julia/base/*/build-compiled\n\t-rm -f $(DESTDIR)$(datarootdir)/julia/base/*/build-checked\n\t-rm -f $(DESTDIR)$(datarootdir)/julia/stdlib/$(VERSDIR)/*/source-extracted\n\t-rm -f $(DESTDIR)$(datarootdir)/julia/stdlib/$(VERSDIR)/*/build-configured\n\t-rm -f $(DESTDIR)$(datarootdir)/julia/stdlib/$(VERSDIR)/*/build-compiled\n\t-rm -f $(DESTDIR)$(datarootdir)/julia/stdlib/$(VERSDIR)/*/build-checked\n\t# Copy in beautiful new man page\n\t$(INSTALL_F) $(build_man1dir)/julia.1 $(DESTDIR)$(man1dir)/\n\t# Copy .desktop file\n\tmkdir -p $(DESTDIR)$(datarootdir)/applications/\n\t$(INSTALL_F) $(JULIAHOME)/contrib/julia.desktop $(DESTDIR)$(datarootdir)/applications/\n\t# Install appdata file\n\tmkdir -p $(DESTDIR)$(datarootdir)/metainfo/\n\t$(INSTALL_F) $(JULIAHOME)/contrib/julia.appdata.xml $(DESTDIR)$(datarootdir)/metainfo/\n\t# Install terminal info database\nifneq ($(WITH_TERMINFO),0)\n\tcp -R -L $(build_datarootdir)/julia/terminfo $(DESTDIR)$(datarootdir)/julia/\nendif\n\n\t# Update RPATH entries and JL_SYSTEM_IMAGE_PATH if $(private_libdir_rel) != $(build_private_libdir_rel)\nifneq ($(private_libdir_rel),$(build_private_libdir_rel))\nifeq ($(OS), Darwin)\nifneq ($(DARWIN_FRAMEWORK),1)\n\tfor j in $(JL_TARGETS) ; do \\\n\t\tinstall_name_tool -rpath @executable_path/$(build_private_libdir_rel) @executable_path/$(private_libdir_rel) $(DESTDIR)$(bindir)/$$j; \\\n\t\tinstall_name_tool -add_rpath @executable_path/$(build_libdir_rel) @executable_path/$(libdir_rel) $(DESTDIR)$(bindir)/$$j; \\\n\tdone\nendif\nelse ifneq (,$(findstring $(OS),Linux FreeBSD))\n\tfor j in $(JL_TARGETS) ; do \\\n\t\t$(PATCHELF) $(PATCHELF_SET_RPATH_ARG) '$$ORIGIN/$(private_libdir_rel):$$ORIGIN/$(libdir_rel)' $(DESTDIR)$(bindir)/$$j; \\\n\tdone\nendif\n\n\t# Overwrite JL_SYSTEM_IMAGE_PATH in libjulia-internal\n\tif [ \"$(DARWIN_FRAMEWORK)\" = \"0\" ]; then \\\n\t\tRELEASE_TARGET=$(DESTDIR)$(private_libdir)/libjulia-internal.$(SHLIB_EXT); \\\n\t\tDEBUG_TARGET=$(DESTDIR)$(private_libdir)/libjulia-internal-debug.$(SHLIB_EXT); \\\n\telse \\\n\t\tRELEASE_TARGET=$(DESTDIR)$(prefix)/$(framework_dylib); \\\n\t\tDEBUG_TARGET=$(DESTDIR)$(prefix)/$(framework_dylib)_debug; \\\n\tfi; \\\n\tif [ \"$(JULIA_BUILD_MODE)\" = \"release\" ]; then \\\n\t\t$(call stringreplace,$${RELEASE_TARGET},sys.$(SHLIB_EXT)$$,$(private_libdir_rel)/sys.$(SHLIB_EXT)); \\\n\telif [ \"$(JULIA_BUILD_MODE)\" = \"debug\" ]; then \\\n\t\t$(call stringreplace,$${DEBUG_TARGET},sys-debug.$(SHLIB_EXT)$$,$(private_libdir_rel)/sys-debug.$(SHLIB_EXT)); \\\n\tfi;\nendif\n\n\t# Set rpath for libjulia-internal, which is moving from `../lib` to `../lib/julia`.\nifeq ($(OS), Darwin)\nifneq ($(DARWIN_FRAMEWORK),1)\nifeq ($(JULIA_BUILD_MODE),release)\n\tinstall_name_tool -add_rpath @loader_path/$(reverse_private_libdir_rel)/ $(DESTDIR)$(private_libdir)/libjulia-internal.$(SHLIB_EXT)\n\tinstall_name_tool -add_rpath @loader_path/$(reverse_private_libdir_rel)/ $(DESTDIR)$(private_libdir)/libjulia-codegen.$(SHLIB_EXT)\nelse ifeq ($(JULIA_BUILD_MODE),debug)\n\tinstall_name_tool -add_rpath @loader_path/$(reverse_private_libdir_rel)/ $(DESTDIR)$(private_libdir)/libjulia-internal-debug.$(SHLIB_EXT)\n\tinstall_name_tool -add_rpath @loader_path/$(reverse_private_libdir_rel)/ $(DESTDIR)$(private_libdir)/libjulia-codegen-debug.$(SHLIB_EXT)\nendif\nendif\nelse ifneq (,$(findstring $(OS),Linux FreeBSD))\nifeq ($(JULIA_BUILD_MODE),release)\n\t$(PATCHELF) $(PATCHELF_SET_RPATH_ARG) '$$ORIGIN:$$ORIGIN/$(reverse_private_libdir_rel)' $(DESTDIR)$(private_libdir)/libjulia-internal.$(SHLIB_EXT)\n\t$(PATCHELF) $(PATCHELF_SET_RPATH_ARG) '$$ORIGIN:$$ORIGIN/$(reverse_private_libdir_rel)' $(DESTDIR)$(private_libdir)/libjulia-codegen.$(SHLIB_EXT)\nelse ifeq ($(JULIA_BUILD_MODE),debug)\n\t$(PATCHELF) $(PATCHELF_SET_RPATH_ARG) '$$ORIGIN:$$ORIGIN/$(reverse_private_libdir_rel)' $(DESTDIR)$(private_libdir)/libjulia-internal-debug.$(SHLIB_EXT)\n\t$(PATCHELF) $(PATCHELF_SET_RPATH_ARG) '$$ORIGIN:$$ORIGIN/$(reverse_private_libdir_rel)' $(DESTDIR)$(private_libdir)/libjulia-codegen-debug.$(SHLIB_EXT)\nendif\nendif\n\n\t# Fix rpaths for dependencies. This should be fixed in BinaryBuilder later.\nifeq ($(OS), Linux)\n\t-$(PATCHELF) $(PATCHELF_SET_RPATH_ARG) '$$ORIGIN' $(DESTDIR)$(private_shlibdir)/libLLVM.$(SHLIB_EXT)\nendif\nifneq ($(LOADER_BUILD_DEP_LIBS),$(LOADER_INSTALL_DEP_LIBS))\n\t# Next, overwrite relative path to libjulia-internal in our loader if $$(LOADER_BUILD_DEP_LIBS) != $$(LOADER_INSTALL_DEP_LIBS)\nifeq ($(JULIA_BUILD_MODE),release)\n\t$(call stringreplace,$(DESTDIR)$(shlibdir)/libjulia.$(JL_MAJOR_MINOR_SHLIB_EXT),$(LOADER_BUILD_DEP_LIBS)$$,$(LOADER_INSTALL_DEP_LIBS))\nelse ifeq ($(JULIA_BUILD_MODE),debug)\n\t$(call stringreplace,$(DESTDIR)$(shlibdir)/libjulia-debug.$(JL_MAJOR_MINOR_SHLIB_EXT),$(LOADER_DEBUG_BUILD_DEP_LIBS)$$,$(LOADER_DEBUG_INSTALL_DEP_LIBS))\nendif\nendif\n\nifeq ($(OS),FreeBSD)\n\t# On FreeBSD, remove the build's libdir from each library's RPATH\n\t$(JULIAHOME)/contrib/fixup-rpath.sh \"$(PATCHELF)\" $(DESTDIR)$(libdir) $(build_libdir)\n\t$(JULIAHOME)/contrib/fixup-rpath.sh \"$(PATCHELF)\" $(DESTDIR)$(private_libdir) $(build_libdir)\n\t$(JULIAHOME)/contrib/fixup-rpath.sh \"$(PATCHELF)\" $(DESTDIR)$(bindir) $(build_libdir)\n\t# Set libgfortran's RPATH to ORIGIN instead of GCCPATH. It's only libgfortran that\n\t# needs to be fixed here, as libgcc_s and libquadmath don't have RPATHs set. If we\n\t# don't set libgfortran's RPATH, it won't be able to find its friends on systems\n\t# that don't have the exact GCC port installed used for the build.\n\tfor lib in $(DESTDIR)$(private_libdir)/libgfortran*$(SHLIB_EXT)*; do \\\n\t\t$(PATCHELF) $(PATCHELF_SET_RPATH_ARG) '$$ORIGIN' $$lib; \\\n\tdone\nendif\n\n\tmkdir -p $(DESTDIR)$(sysconfdir)\n\tcp -R $(build_sysconfdir)/julia $(DESTDIR)$(sysconfdir)/\n\nifeq ($(DARWIN_FRAMEWORK),1)\n\t$(MAKE) -C $(JULIAHOME)/contrib/mac/framework frameworknoinstall\nendif\n\ndistclean:\n\t-rm -fr $(BUILDROOT)/julia-*.tar.gz $(BUILDROOT)/julia*.exe $(BUILDROOT)/julia-$(JULIA_COMMIT)\n\nbinary-dist: distclean\nifeq ($(USE_SYSTEM_BLAS),0)\nifeq ($(ISX86),1)\nifneq ($(OPENBLAS_DYNAMIC_ARCH),1)\n\t@echo OpenBLAS must be rebuilt with OPENBLAS_DYNAMIC_ARCH=1 to use binary-dist target\n\t@false\nendif\nendif\nendif\n\nifeq ($(USE_BINARYBUILDER_OPENBLAS),0)\n\t# https://github.com/JuliaLang/julia/issues/46579\n\tUSE_BINARYBUILDER_OBJCONV=0\nendif\n\nifneq ($(prefix),$(abspath julia-$(JULIA_COMMIT)))\n\t$(error prefix must not be set for make binary-dist)\nendif\nifneq ($(DESTDIR),)\n\t$(error DESTDIR must not be set for make binary-dist)\nendif\n\t@$(MAKE) -C $(BUILDROOT) -f $(JULIAHOME)/Makefile install\n\tcp $(JULIAHOME)/LICENSE.md $(BUILDROOT)/julia-$(JULIA_COMMIT)\nifeq ($(OS), Linux)\n\t# Copy over any bundled ca certs we picked up from the system during build\n\t-cp $(build_datarootdir)/julia/cert.pem $(DESTDIR)$(datarootdir)/julia/\nendif\nifeq ($(OS), WINNT)\n\tcd $(BUILDROOT)/julia-$(JULIA_COMMIT)/bin && rm -f llvm* llc.exe lli.exe opt.exe LTO.dll bugpoint.exe macho-dump.exe\nendif\n\tcd $(BUILDROOT) && $(TAR) zcvf $(JULIA_BINARYDIST_FILENAME).tar.gz julia-$(JULIA_COMMIT)\n\n\nexe:\n\t# run Inno Setup to compile installer.\n\t# Note that we disable MSYS2 path munging, as it interferes with the `/` options:\n\tMSYS2_ARG_CONV_EXCL='*' $(call spawn,$(JULIAHOME)/dist-extras/inno/iscc.exe /DAppVersion=$(JULIA_VERSION) /DSourceDir=\"$(call cygpath_w,$(BUILDROOT)/julia-$(JULIA_COMMIT))\" /DRepoDir=\"$(call cygpath_w,$(JULIAHOME))\" /F\"$(JULIA_BINARYDIST_FILENAME)\" /O\"$(call cygpath_w,$(BUILDROOT))\" $(INNO_ARGS) $(call cygpath_w,$(JULIAHOME)/contrib/windows/build-installer.iss))\n\tchmod a+x \"$(BUILDROOT)/$(JULIA_BINARYDIST_FILENAME).exe\"\n\napp:\n\t$(MAKE) -C contrib/mac/app\n\t@mv contrib/mac/app/$(JULIA_BINARYDIST_FILENAME).dmg $(BUILDROOT)\n\ndarwinframework:\n\t$(MAKE) -C $(JULIAHOME)/contrib/mac/framework\n\nlight-source-dist.tmp: $(BUILDROOT)/doc/_build/html/en/index.html\nifneq ($(BUILDROOT),$(JULIAHOME))\n\t$(error make light-source-dist does not work in out-of-tree builds)\nendif\n\t# Save git information\n\t-@$(MAKE) -C $(JULIAHOME)/base version_git.jl.phony\n\n\t# Create file light-source-dist.tmp to hold all the filenames that go into the tarball\n\techo \"base/version_git.jl\" > light-source-dist.tmp\n\n\t# Download all stdlibs and include the tarball filenames in light-source-dist.tmp\n\t@$(MAKE) -C stdlib getall DEPS_GIT=0 USE_BINARYBUILDER=0\n\t-ls stdlib/srccache/*.tar.gz >> light-source-dist.tmp\n\t-ls stdlib/*/StdlibArtifacts.toml >> light-source-dist.tmp\n\n\t# Include all git-tracked filenames\n\tgit ls-files >> light-source-dist.tmp\n\n\t# Include documentation filenames\n\tfind doc/_build/html >> light-source-dist.tmp\n\n# Make tarball with only Julia code + stdlib tarballs\nlight-source-dist: light-source-dist.tmp\n\t# Prefix everything with \"julia-$(commit-sha)/\" or \"julia-$(version)/\" and then create tarball\n\t# To achieve prefixing, we temporarily create a symlink in the source directory that points back\n\t# to the source directory.\n\tsed -e \"s_.*_julia-${JULIA_COMMIT}/&_\" light-source-dist.tmp > light-source-dist.tmp1\n\tln -s . julia-${JULIA_COMMIT}\n\ttar -cz --no-recursion -T light-source-dist.tmp1 -f julia-$(JULIA_VERSION)_$(JULIA_COMMIT).tar.gz\n\trm julia-${JULIA_COMMIT}\n\nsource-dist:\n\t@echo \\'source-dist\\' target is deprecated: use \\'full-source-dist\\' instead.\n\n# Make tarball with Julia code plus all dependencies\nfull-source-dist: light-source-dist.tmp\n\t# Get all the dependencies downloaded\n\t@$(MAKE) -C deps getall DEPS_GIT=0 USE_BINARYBUILDER=0\n\n\t# Create file full-source-dist.tmp to hold all the filenames that go into the tarball\n\tcp light-source-dist.tmp full-source-dist.tmp\n\t-ls deps/srccache/*.tar.gz deps/srccache/*.tar.bz2 deps/srccache/*.tar.xz deps/srccache/*.tgz deps/srccache/*.zip deps/srccache/*.pem >> full-source-dist.tmp\n\n\t# Prefix everything with \"julia-$(commit-sha)/\" or \"julia-$(version)/\" and then create tarball\n\t# To achieve prefixing, we temporarily create a symlink in the source directory that points back\n\t# to the source directory.\n\tsed -e \"s_.*_julia-${JULIA_COMMIT}/&_\" full-source-dist.tmp > full-source-dist.tmp1\n\tln -s . julia-${JULIA_COMMIT}\n\ttar -cz --no-recursion -T full-source-dist.tmp1 -f julia-$(JULIA_VERSION)_$(JULIA_COMMIT)-full.tar.gz\n\trm julia-${JULIA_COMMIT}\n\nclean: | $(CLEAN_TARGETS)\n\t@-$(MAKE) -C $(BUILDROOT)/base clean\n\t@-$(MAKE) -C $(BUILDROOT)/doc clean\n\t@-$(MAKE) -C $(BUILDROOT)/src clean\n\t@-$(MAKE) -C $(BUILDROOT)/cli clean\n\t@-$(MAKE) -C $(BUILDROOT)/test clean\n\t@-$(MAKE) -C $(BUILDROOT)/stdlib clean\n\t@-$(MAKE) -C $(BUILDROOT) -f pkgimage.mk clean\n\t-rm -f $(BUILDROOT)/julia\n\t-rm -f $(BUILDROOT)/*.tar.gz\n\t-rm -f $(build_depsbindir)/stringreplace \\\n\t   $(BUILDROOT)/light-source-dist.tmp $(BUILDROOT)/light-source-dist.tmp1 \\\n\t   $(BUILDROOT)/full-source-dist.tmp $(BUILDROOT)/full-source-dist.tmp1\n\t-rm -fr $(build_private_libdir)\n# Teporarily add this line to the Makefile to remove extras\n\t-rm -fr $(build_datarootdir)/julia/extras\n\ncleanall: clean\n\t@-$(MAKE) -C $(BUILDROOT)/src clean-flisp clean-support\n\t@-$(MAKE) -C $(BUILDROOT)/deps clean-libuv\n\t-rm -fr $(build_prefix) $(build_staging)\n\ndistcleanall: cleanall\n\t@-$(MAKE) -C $(BUILDROOT)/stdlib distclean\n\t@-$(MAKE) -C $(BUILDROOT)/deps distcleanall\n\t@-$(MAKE) -C $(BUILDROOT)/doc cleanall\n\n.FORCE:\n.PHONY: .FORCE default debug release check-whitespace release-candidate \\\n\tjulia-debug julia-release julia-stdlib julia-deps julia-deps-libs \\\n\tjulia-cli-release julia-cli-debug julia-src-release julia-src-debug \\\n\tjulia-symlink julia-base julia-sysimg julia-sysimg-ji julia-sysimg-release julia-sysimg-debug \\\n\ttest testall testall1 test \\\n\tclean distcleanall cleanall $(CLEAN_TARGETS) \\\n\trun-julia run-julia-debug run-julia-release run \\\n\tinstall binary-dist light-source-dist.tmp light-source-dist \\\n\tdist full-source-dist source-dist\n\ntest: check-whitespace $(JULIA_BUILD_MODE)\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/test default JULIA_BUILD_MODE=$(JULIA_BUILD_MODE)\n\ntestall: check-whitespace $(JULIA_BUILD_MODE)\n\tcp $(JULIA_SYSIMG) $(BUILDROOT)/local.$(SHLIB_EXT)\n\t$(call spawn,$(JULIA_EXECUTABLE) -J $(call cygpath_w,$(BUILDROOT)/local.$(SHLIB_EXT)) -e 'true')\n\trm $(BUILDROOT)/local.$(SHLIB_EXT)\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/test all JULIA_BUILD_MODE=$(JULIA_BUILD_MODE)\n\ntestall1: check-whitespace $(JULIA_BUILD_MODE)\n\t@env JULIA_CPU_THREADS=1 $(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/test all JULIA_BUILD_MODE=$(JULIA_BUILD_MODE)\n\ntest-%: check-whitespace $(JULIA_BUILD_MODE) .FORCE\n\t@([ $$(( $$(date +%s) - $$(date -r $(build_private_libdir)/sys.$(SHLIB_EXT) +%s) )) -le 100 ] && \\\n\t\tprintf '$(WARNCOLOR)    HINT The system image was recently rebuilt. Are you aware of the test-revise-* targets? See CONTRIBUTING.md. $(ENDCOLOR)\\n') || true\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/test $* JULIA_BUILD_MODE=$(JULIA_BUILD_MODE)\n\ntest-revise-%: .FORCE\n\t@$(MAKE) $(QUIET_MAKE) -C $(BUILDROOT)/test revise-$* JULIA_BUILD_MODE=$(JULIA_BUILD_MODE)\n\n# download target for some hardcoded windows dependencies\n.PHONY: win-extras wine_path\nwin-extras:\n\t@$(MAKE) -C $(BUILDROOT)/deps install-p7zip\n\tmkdir -p $(JULIAHOME)/dist-extras\n\tcd $(JULIAHOME)/dist-extras && \\\n\t$(JLDOWNLOAD) https://www.jrsoftware.org/download.php/is.exe && \\\n\tchmod a+x is.exe && \\\n\tMSYS2_ARG_CONV_EXCL='*' $(call spawn, $(JULIAHOME)/dist-extras/is.exe /DIR=\"$(call cygpath_w,$(JULIAHOME)/dist-extras/inno)\" /PORTABLE=1 /CURRENTUSER /VERYSILENT)\n\n# various statistics about the build that may interest the user\nifeq ($(USE_SYSTEM_LLVM), 1)\nLLVM_SIZE := llvm-size$(EXE)\nelse\nLLVM_SIZE := PATH=$(build_bindir):$$PATH; $(build_depsbindir)/llvm-size$(EXE)\nendif\nbuild-stats:\nifeq ($(USE_BINARYBUILDER_LLVM),1)\n\t@$(MAKE) -C deps install-llvm-tools\nendif\n\t@printf $(JULCOLOR)' ==> ./julia binary sizes\\n'$(ENDCOLOR)\n\t$(call spawn,$(LLVM_SIZE) -A $(call cygpath_w,$(build_private_libdir)/sys.$(SHLIB_EXT)) \\\n\t\t$(call cygpath_w,$(build_shlibdir)/libjulia.$(SHLIB_EXT)) \\\n\t\t$(call cygpath_w,$(build_shlibdir)/libjulia-internal.$(SHLIB_EXT)) \\\n\t\t$(call cygpath_w,$(build_shlibdir)/libjulia-codegen.$(SHLIB_EXT)) \\\n\t\t$(call cygpath_w,$(build_bindir)/julia$(EXE)))\nifeq ($(OS),Darwin)\n\t$(call spawn,$(LLVM_SIZE) -A $(call cygpath_w,$(build_shlibdir)/libLLVM.$(SHLIB_EXT)))\nelse\n\t$(call spawn,$(LLVM_SIZE) -A $(call cygpath_w,$(build_shlibdir)/$(LLVM_SHARED_LIB_NAME).$(SHLIB_EXT)))\nendif\n\t@printf $(JULCOLOR)' ==> ./julia launch speedtest\\n'$(ENDCOLOR)\n\t@time $(call spawn,$(build_bindir)/julia$(EXE) -e '')\n\t@time $(call spawn,$(build_bindir)/julia$(EXE) -e '')\n\t@time $(call spawn,$(build_bindir)/julia$(EXE) -e '')\n\nprint-locale:\n\t@locale\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 12.05,
          "content": "Julia v1.12 Release Notes\n========================\n\nNew language features\n---------------------\n\n- New option `--trim` creates smaller binaries by removing code that was not proven to be reachable from\n  the entry points. Entry points can be marked using `Base.Experimental.entrypoint` ([#55047]).\n- A new keyword argument `usings::Bool` has been added to `names`. By using this, we can now\n  find all the names available in module `A` by `names(A; all=true, imported=true, usings=true)`. ([#54609])\n- the `@atomic(...)` macro family supports now the reference assignment syntax, e.g.\n  `@atomic :monotonic v[3] += 4` modifies `v[3]` atomically with monotonic ordering semantics. ([#54707])\n  The supported syntax allows\n  - atomic fetch (`x = @atomic v[3]`),\n  - atomic set (`@atomic v[3] = 4`),\n  - atomic modify (`@atomic v[3] += 2`),\n  - atomic set once (`@atomiconce v[3] = 2`),\n  - atomic swap (`x = @atomicswap v[3] = 2`), and\n  - atomic replace (`x = @atomicreplace v[3] 2=>5`).\n- New option `--task-metrics=yes` to enable the collection of per-task timing information,\n  which can also be enabled/disabled at runtime with `Base.Experimental.task_metrics(::Bool)`. ([#56320])\n  The available metrics are:\n  - actual running time for the task (`Base.Experimental.task_running_time_ns`), and\n  - wall-time for the task (`Base.Experimental.task_wall_time_ns`).\n- Support for Unicode 16 ([#56925]).\n\nLanguage changes\n----------------\n\n - When methods are replaced with exactly equivalent ones, the old method is no\n   longer deleted implicitly simultaneously, although the new method does take\n   priority and become more specific than the old method. Thus if the new\n   method is deleted later, the old method will resume operating. This can be\n   useful to mocking frameworks (such as in SparseArrays, Pluto, and Mocking,\n   among others), as they do not need to explicitly restore the old method.\n   While inference and compilation still must be repeated with this, it also\n   may pave the way for inference to be able to intelligently re-use the old\n   results, once the new method is deleted. ([#53415])\n\n - Macro expansion will no longer eagerly recurse into `Expr(:toplevel)`\n   expressions returned from macros. Instead, macro expansion of `:toplevel`\n   expressions will be delayed until evaluation time. This allows a later\n   expression within a given `:toplevel` expression to make use of macros\n   defined earlier in the same `:toplevel` expression. ([#53515])\n\n - Trivial infinite loops (like `while true; end`) are no longer undefined\n   behavior. Infinite loops that actually do things (e.g. have side effects\n   or sleep) were never and are still not undefined behavior. ([#52999])\n\n - It is now an error to mark a symbol as both `public` and `export`ed.\n   ([#53664])\n\nCompiler/Runtime improvements\n-----------------------------\n\n- Generated LLVM IR now uses actual pointer types instead of passing pointers as integers.\n  This affects `llvmcall`: Inline LLVM IR should be updated to use `i8*` or `ptr` instead of\n  `i32` or `i64`, and remove unneeded `ptrtoint`/`inttoptr` conversions. For compatibility,\n  IR with integer pointers is still supported, but generates a deprecation warning. ([#53687])\n\n- A new exception `FieldError` is now introduced to raise/handle `getfield` exceptions. Previously `getfield` exception was captured by fallback generic exception `ErrorException`. Now that `FieldError` is more specific `getfield` related exceptions that can occur should use `FieldError` exception instead. ([#54504])\n\nCommand-line option changes\n---------------------------\n\n* The `-m/--module` flag can be passed to run the `main` function inside a package with a set of arguments.\n  This `main` function should be declared using `@main` to indicate that it is an entry point. ([#52103])\n* Enabling or disabling color text in Julia can now be controlled with the\n  [`NO_COLOR`](https://no-color.org/) or [`FORCE_COLOR`](https://force-color.org/) environment\n  variables. These variables are also honored by Julia's build system ([#53742], [#56346]).\n* `--project=@temp` starts Julia with a temporary environment. ([#51149])\n* New `--trace-compile-timing` option to report how long each method reported by `--trace-compile` took\n  to compile, in ms. ([#54662])\n* `--trace-compile` now prints recompiled methods in yellow or with a trailing comment if color is not supported ([#55763])\n* New `--trace-dispatch` option to report methods that are dynamically dispatched ([#55848]).\n\nMulti-threading changes\n-----------------------\n\n* New types are defined to handle the pattern of code that must run once per process, called\n  a `OncePerProcess{T}` type, which allows defining a function that should be run exactly once\n  the first time it is called, and then always return the same result value of type `T`\n  every subsequent time afterwards. There are also `OncePerThread{T}` and `OncePerTask{T}` types for\n  similar usage with threads or tasks. ([#55793])\n\nBuild system changes\n--------------------\n\n* There are new `Makefile`s to build Julia and LLVM using the Binary Optimization and Layout Tool (BOLT), see  `contrib/bolt` and `contrib/pgo-lto-bolt` ([#54107]).\n\nNew library functions\n---------------------\n\n* `logrange(start, stop; length)` makes a range of constant ratio, instead of constant step ([#39071])\n* The new `isfull(c::Channel)` function can be used to check if `put!(c, some_value)` will block. ([#53159])\n* `waitany(tasks; throw=false)` and `waitall(tasks; failfast=false, throw=false)` which wait multiple tasks at once ([#53341]).\n* `uuid7()` creates an RFC 9652 compliant UUID with version 7 ([#54834]).\n* `insertdims(array; dims)` allows to insert singleton dimensions into an array which is the inverse operation to `dropdims`. ([#45793])\n* The new `Fix` type is a generalization of `Fix1/Fix2` for fixing a single argument ([#54653]).\n\nNew library features\n--------------------\n\n* `escape_string` takes additional keyword arguments `ascii=true` (to escape all\n  non-ASCII characters) and `fullhex=true` (to require full 4/8-digit hex numbers\n  for u/U escapes, e.g. for C compatibility) ([#55099]).\n* `tempname` can now take a suffix string to allow the file name to include a suffix and include that suffix in\n  the uniquing checking ([#53474])\n* `RegexMatch` objects can now be used to construct `NamedTuple`s and `Dict`s ([#50988])\n* `Lockable` is now exported ([#54595])\n* `Base.require_one_based_indexing` and `Base.has_offset_axes` are now public ([#56196])\n* New `ltruncate`, `rtruncate` and `ctruncate` functions for truncating strings to text width, accounting for char widths ([#55351])\n* `isless` (and thus `cmp`, sorting, etc.) is now supported for zero-dimensional `AbstractArray`s ([#55772])\n* `invoke` now supports passing a Method instead of a type signature making this interface somewhat more flexible for certain uncommon use cases ([#56692]).\n* `Timer(f, ...)` will now match the stickiness of the parent task when creating timer tasks, which can be overridden\n  by the new `spawn` kwarg. This avoids the issue where sticky tasks i.e. `@async` make their parent sticky ([#56745])\n* `invoke` now supports passing a CodeInstance instead of a type, which can enable\ncertain compiler plugin workflows ([#56660]).\n* `sort` now supports `NTuple`s ([#54494])\n* `map!(f, A)` now stores the results in `A`, like `map!(f, A, A)`. or `A .= f.(A)` ([#40632]).\n\nStandard library changes\n------------------------\n\n* `gcdx(0, 0)` now returns `(0, 0, 0)` instead of `(0, 1, 0)` ([#40989]).\n* `fd` returns a `RawFD` instead of an `Int` ([#55080]).\n\n#### StyledStrings\n\n#### JuliaSyntaxHighlighting\n\n* A new standard library for applying syntax highlighting to Julia code, this\n  uses `JuliaSyntax` and `StyledStrings` to implement a `highlight` function\n  that creates an `AnnotatedString` with syntax highlighting applied. ([#51810])\n\n#### Package Manager\n\n#### LinearAlgebra\n\n* `rank` can now take a `QRPivoted` matrix to allow rank estimation via QR factorization ([#54283]).\n* Added keyword argument `alg` to `eigen`, `eigen!`, `eigvals` and `eigvals!` for self-adjoint\n  matrix types (i.e., the type union `RealHermSymComplexHerm`) that allows one to switch\n  between different eigendecomposition algorithms ([#49355]).\n* Added a generic version of the (unblocked) pivoted Cholesky decomposition\n  (callable via `cholesky[!](A, RowMaximum())`) ([#54619]).\n* The number of default BLAS threads now respects process affinity, instead of\n  using total number of logical threads available on the system ([#55574]).\n* A new function `zeroslike` is added that is used to generate the zero elements for matrix-valued banded matrices.\n  Custom array types may specialize this function to return an appropriate result ([#55252]).\n* The matrix multiplication `A * B` calls `matprod_dest(A, B, T::Type)` to generate the destination.\n  This function is now public ([#55537]).\n* The function `haszero(T::Type)` is used to check if a type `T` has a unique zero element defined as `zero(T)`.\n  This is now public ([#56223]).\n* A new function `diagview` is added that returns a view into a specific band of an `AbstractMatrix` ([#56175]).\n\n#### Logging\n\n#### Printf\n\n#### Profile\n\n* `Profile.take_heap_snapshot` takes a new keyword argument, `redact_data::Bool`,\n  that is `true` by default. When set, the contents of Julia objects are not emitted\n  in the heap snapshot. This currently only applies to strings. ([#55326])\n* `Profile.print()` now colors Base/Core/Package modules similarly to how they are in stacktraces.\n  Also paths, even if truncated, are now clickable in terminals that support URI links\n  to take you to the specified `JULIA_EDITOR` for the given file & line number. ([#55335])\n\n#### Random\n\n#### REPL\n\n- Using the new `usings=true` feature of the `names()` function, REPL completions can now\n  complete names that have been explicitly `using`-ed. ([#54610])\n- REPL completions can now complete input lines like `[import|using] Mod: xxx|` e.g.\n  complete `using Base.Experimental: @op` to `using Base.Experimental: @opaque`. ([#54719])\n- the REPL will now warn if it detects a name is being accessed from a module which does not define it (nor has a submodule which defines it),\n  and for which the name is not public in that module. For example, `map` is defined in Base, and executing `LinearAlgebra.map`\n  in the REPL will now issue a warning the first time occurs. ([#54872])\n- When an object is printed automatically (by being returned in the REPL), its display is now truncated after printing 20 KiB.\n  This does not affect manual calls to `show`, `print`, and so forth. ([#53959])\n- Backslash completions now print the respective glyph or emoji next to each matching backslash shortcode. ([#54800])\n\n#### SuiteSparse\n\n#### SparseArrays\n\n#### Test\n\n* A failing `DefaultTestSet` now prints to screen the random number generator (RNG) of the failed test, to help reproducing a stochastic failure which only depends on the state of the RNG.\n  It is also possible seed a test set by passing the `rng` keyword argument to `@testset`:\n  ```julia\n  using Test, Random\n  @testset rng=Xoshiro(0x2e026445595ed28e, 0x07bb81ac4c54926d, 0x83d7d70843e8bad6, 0xdbef927d150af80b, 0xdbf91ddf2534f850) begin\n      @test rand() == 0.559472630416976\n  end\n  ```\n\n#### Dates\n\n#### Statistics\n\n#### Distributed\n\n#### Unicode\n\n#### DelimitedFiles\n\n#### InteractiveUtils\n\n* New macros `@trace_compile` and `@trace_dispatch` for running an expression with\n  `--trace-compile=stderr --trace-compile-timing` and `--trace-dispatch=stderr` respectively enabled.\n  ([#55915])\n\nDeprecated or removed\n---------------------\n\nExternal dependencies\n---------------------\n\n- The terminal info database, `terminfo`, is now vendored by default, providing a better\n  REPL user experience when `terminfo` is not available on the system. Julia can be built\n  without vendoring the database using the Makefile option `WITH_TERMINFO=0`. ([#55411])\n\nTooling Improvements\n--------------------\n\n- A wall-time profiler is now available for users who need a sampling profiler that captures tasks regardless of their scheduling or running state. This type of profiler enables profiling of I/O-heavy tasks and helps detect areas of heavy contention in the system ([#55889]).\n\n<!--- generated by NEWS-update.jl: -->\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.23,
          "content": "<a name=\"logo\"/>\n<div align=\"center\">\n<a href=\"https://julialang.org/\" target=\"_blank\">\n<img src=\"doc/src/assets/logo.svg\" alt=\"Julia Logo\" width=\"210\" height=\"142\"></img>\n</a>\n</div>\n\n<table>\n    <!-- Docs -->\n    <tr>\n        <td>Documentation</td>\n        <td>\n            <a href=\"https://docs.julialang.org\"><img src='https://img.shields.io/badge/docs-v1-blue.svg'/></a>\n        </td>\n    </tr>\n    <!-- Continuous integration\n    To change the badge to point to a different pipeline, it is not sufficient to simply change the `?branch=` part.\n    You need to go to the Buildkite website and get the SVG URL for the correct pipeline. -->\n    <tr>\n        <td>Continuous integration</td>\n        <td>\n            <a href=\"https://buildkite.com/julialang/julia-master\"><img src='https://badge.buildkite.com/f28e0d28b345f9fad5856ce6a8d64fffc7c70df8f4f2685cd8.svg?branch=master'/></a>\n        </td>\n    </tr>\n    <!-- Coverage -->\n    <tr>\n        <td>Code coverage</td>\n        <td>\n            <a href='https://coveralls.io/github/JuliaLang/julia?branch=master'><img src='https://coveralls.io/repos/github/JuliaLang/julia/badge.svg?branch=master' alt='Coverage Status'/></a>\n            <a href=\"https://codecov.io/gh/JuliaLang/julia\"><img src=\"https://codecov.io/gh/JuliaLang/julia/branch/master/graph/badge.svg?token=TckCRxc7HS\"/></a>\n        </td>\n    </tr>\n</table>\n\n## The Julia Language\n\nJulia is a high-level, high-performance dynamic language for technical\ncomputing. The main homepage for Julia can be found at\n[julialang.org](https://julialang.org/). This is the GitHub\nrepository of Julia source code, including instructions for compiling\nand installing Julia, below.\n\n## Resources\n\n- **Homepage:** <https://julialang.org>\n- **Binaries:** <https://julialang.org/downloads/>\n- **Source code:** <https://github.com/JuliaLang/julia>\n- **Documentation:** <https://docs.julialang.org>\n- **Packages:** <https://julialang.org/packages/>\n- **Discussion forum:** <https://discourse.julialang.org>\n- **Zulip:** <https://julialang.zulipchat.com/>\n- **Slack:** <https://julialang.slack.com> (get an invite from <https://julialang.org/slack/>)\n- **YouTube:** <https://www.youtube.com/user/JuliaLanguage>\n- **Code coverage:** <https://coveralls.io/r/JuliaLang/julia>\n\nNew developers may find the notes in\n[CONTRIBUTING](https://github.com/JuliaLang/julia/blob/master/CONTRIBUTING.md)\nhelpful to start contributing to the Julia codebase.\n\n### Learning Julia\n\n- [**Learning resources**](https://julialang.org/learning/)\n\n## Binary Installation\n\nIf you would rather not compile the latest Julia from source,\nplatform-specific tarballs with pre-compiled binaries are also\n[available for download](https://julialang.org/downloads/). The\ndownloads page also provides details on the\n[different tiers of support](https://julialang.org/downloads/#supported_platforms)\nfor OS and platform combinations.\n\nIf everything works correctly, you will see a Julia banner and an\ninteractive prompt into which you can enter expressions for\nevaluation. You can read about [getting\nstarted](https://docs.julialang.org/en/v1/manual/getting-started/) in the manual.\n\n**Note**: Although some OS package managers provide Julia, such\ninstallations are neither maintained nor endorsed by the Julia\nproject. They may be outdated, broken and/or unmaintained. We\nrecommend you use the official Julia binaries instead.\n\n## Building Julia\n\nFirst, make sure you have all the [required\ndependencies](https://github.com/JuliaLang/julia/blob/master/doc/src/devdocs/build/build.md#required-build-tools-and-external-libraries) installed.\nThen, acquire the source code by cloning the git repository:\n\n    git clone https://github.com/JuliaLang/julia.git\n\nand then use the command prompt to change into the resulting julia directory. By default, you will be building the latest unstable version of\nJulia. However, most users should use the [most recent stable version](https://github.com/JuliaLang/julia/releases)\nof Julia. You can get this version by running:\n\n    git checkout v1.11.2\n\nTo build the `julia` executable, run `make` from within the julia directory.\n\nBuilding Julia requires 2GiB of disk space and approximately 4GiB of virtual memory.\n\n**Note:** The build process will fail badly if any of the build directory's parent directories have spaces or other shell meta-characters such as `$` or `:` in their names (this is due to a limitation in GNU make).\n\nOnce it is built, you can run the `julia` executable. From within the julia directory, run\n\n    ./julia\n\nYour first test of Julia determines whether your build is working\nproperly. From the julia\ndirectory, type `make testall`. You should see output that\nlists a series of running tests; if they complete without error, you\nshould be in good shape to start using Julia.\n\nYou can read about [getting\nstarted](https://docs.julialang.org/en/v1/manual/getting-started/)\nin the manual.\n\nDetailed build instructions, should they be necessary,\nare included in the [build documentation](https://github.com/JuliaLang/julia/blob/master/doc/src/devdocs/build/build.md).\n\n### Uninstalling Julia\n\nBy default, Julia does not install anything outside the directory it was cloned\ninto and `~/.julia`. Julia and the vast majority of Julia packages can be\ncompletely uninstalled by deleting these two directories.\n\n## Source Code Organization\n\nThe Julia source code is organized as follows:\n\n| Directory         | Contents                                                           |\n| -                 | -                                                                  |\n| `base/`           | source code for the Base module (part of Julia's standard library) |\n| `cli/`            | source for the command line interface/REPL                         |\n| `contrib/`        | miscellaneous scripts                                              |\n| `deps/`           | external dependencies                                              |\n| `doc/src/`        | source for the user manual                                         |\n| `etc/`            | contains `startup.jl`                                              |\n| `src/`            | source for Julia language core                                     |\n| `stdlib/`         | source code for other standard library packages                    |\n| `test/`           | test suites                                                        |\n\n## Terminal, Editors and IDEs\n\nThe Julia REPL is quite powerful. See the section in the manual on\n[the Julia REPL](https://docs.julialang.org/en/v1/stdlib/REPL/)\nfor more details.\n\nOn Windows, we highly recommend running Julia in a modern terminal,\nsuch as [Windows Terminal from the Microsoft Store](https://aka.ms/terminal).\n\nSupport for editing Julia is available for many\n[widely used editors](https://github.com/JuliaEditorSupport):\n[Emacs](https://github.com/JuliaEditorSupport/julia-emacs),\n[Vim](https://github.com/JuliaEditorSupport/julia-vim),\n[Sublime Text](https://github.com/JuliaEditorSupport/Julia-sublime), and many\nothers.\n\nFor users who prefer IDEs, we recommend using VS Code with the\n[julia-vscode](https://www.julia-vscode.org/) plugin.\\\nFor notebook users, [Jupyter](https://jupyter.org/) notebook support is available through the\n[IJulia](https://github.com/JuliaLang/IJulia.jl) package, and\nthe [Pluto.jl](https://github.com/fonsp/Pluto.jl) package provides Pluto notebooks.\n"
        },
        {
          "name": "THIRDPARTY.md",
          "type": "blob",
          "size": 5.1,
          "content": "The Julia language is licensed under the MIT License (see [LICENSE.md](./LICENSE.md) ). The \"language\" consists\nof the compiler (the contents of `src/`), most of the standard library (`base/` and `stdlib/`),\nand some utilities (most of the rest of the files in this repository). See below\nfor exceptions.\n\n- [crc32c.c](https://stackoverflow.com/questions/17645167/implementing-sse-4-2s-crc32c-in-software) (CRC-32c checksum code by Mark Adler) [[ZLib](https://opensource.org/licenses/Zlib)].\n- [LDC](https://github.com/ldc-developers/ldc/blob/master/LICENSE) (for ccall/cfunction ABI definitions) [BSD-3]. The portion of code that Julia uses from LDC is [BSD-3] licensed.\n- [LLVM](https://releases.llvm.org/3.9.0/LICENSE.TXT) (for parts of src/disasm.cpp) [UIUC]\n- [NetBSD](https://www.netbsd.org/about/redistribution.html) (for setjmp, longjmp, and strptime implementations on Windows) [BSD-3]\n- [Python](https://docs.python.org/3/license.html) (for strtod implementation on Windows) [PSF]\n- [FEMTOLISP](https://github.com/JeffBezanson/femtolisp) [BSD-3]\n\nThe following components included in Julia `Base` have their own separate licenses:\n\n- base/ryu/* [Boost] (see [ryu](https://github.com/ulfjack/ryu/blob/master/LICENSE-Boost))\n- base/special/{rem_pio2,hyperbolic}.jl [Freely distributable with preserved copyright notice] (see [FDLIBM](https://www.netlib.org/fdlibm))\n\nThe Julia language links to the following external libraries, which have their\nown licenses:\n\n- [LIBUNWIND](https://github.com/libunwind/libunwind/blob/master/LICENSE) [MIT]\n- [LIBUV](https://github.com/JuliaLang/libuv/blob/julia-uv2-1.39.0/LICENSE) [MIT]\n- [LLVM](https://releases.llvm.org/12.0.1/LICENSE.TXT) [APACHE 2.0 with LLVM Exception]\n- [UTF8PROC](https://github.com/JuliaStrings/utf8proc) [MIT]\n\nand optionally:\n\n- [LibTracyClient](https://github.com/wolfpld/tracy/blob/master/LICENSE) [BSD-3]\n- [ITTAPI](https://github.com/intel/ittapi/tree/master/LICENSES) [BSD-3 AND GPL2]\n\nJulia's `stdlib` uses the following external libraries, which have their own licenses:\n\n- [DSFMT](https://github.com/MersenneTwister-Lab/dSFMT/blob/master/LICENSE.txt) [BSD-3]\n- [OPENLIBM](https://github.com/JuliaMath/openlibm/blob/master/LICENSE.md) [MIT, BSD-2, ISC]\n- [GMP](https://gmplib.org/manual/Copying.html#Copying) [LGPL3+ or GPL2+]\n- [LIBGIT2](https://github.com/libgit2/libgit2/blob/development/COPYING) [GPL2+ with unlimited linking exception]\n- [CURL](https://curl.haxx.se/docs/copyright.html) [MIT/X derivative]\n- [LIBSSH2](https://github.com/libssh2/libssh2/blob/master/COPYING) [BSD-3]\n- [OPENSSL](https://www.openssl.org/source/license.html) [Apache 2.0]\n- [MPFR](https://www.mpfr.org/mpfr-current/mpfr.html#Copying) [LGPL3+]\n- [OPENBLAS](https://raw.github.com/xianyi/OpenBLAS/master/LICENSE) [BSD-3]\n- [LAPACK](https://netlib.org/lapack/LICENSE.txt) [BSD-3]\n- [PCRE](https://www.pcre.org/licence.txt) [BSD-3]\n- [SUITESPARSE](https://github.com/DrTimothyAldenDavis/SuiteSparse/blob/master/LICENSE.txt) [mix of BSD-3-Clause, LGPL2.1+ and GPL2+; see individual module licenses]\n  - [`libamd`](https://github.com/DrTimothyAldenDavis/SuiteSparse/blob/dev/AMD/Doc/License.txt) [BSD-3-Clause]\n  - [`libcamd`](https://github.com/DrTimothyAldenDavis/SuiteSparse/blob/dev/CAMD/Doc/License.txt) [BSD-3-Clause]\n  - [`libccolamd`](https://github.com/DrTimothyAldenDavis/SuiteSparse/blob/dev/CCOLAMD/Doc/License.txt) [BSD-3-Clause]\n  - [`libcolamd`](https://github.com/DrTimothyAldenDavis/SuiteSparse/blob/dev/COLAMD/Doc/License.txt) [BSD-3-Clause]\n  - [`libsuitesparseconfig`](https://github.com/DrTimothyAldenDavis/SuiteSparse/blob/dev/SuiteSparse_config/README.txt) [BSD-3-Clause]\n  - [`libbtf`](https://github.com/DrTimothyAldenDavis/SuiteSparse/blob/dev/BTF/Doc/License.txt) [LGPL-2.1+]\n  - [`libklu`](https://github.com/DrTimothyAldenDavis/SuiteSparse/blob/dev/KLU/Doc/License.txt) [LGPL-2.1+]\n  - [`libldl`](https://github.com/DrTimothyAldenDavis/SuiteSparse/blob/dev/LDL/Doc/License.txt) [LGPL-2.1+]\n  - [`libcholmod`](https://github.com/DrTimothyAldenDavis/SuiteSparse/blob/dev/CHOLMOD/Doc/License.txt) [LGPL-2.1+ and GPL-2.0+]\n  - [`librbio`](https://github.com/DrTimothyAldenDavis/SuiteSparse/blob/dev/RBio/Doc/License.txt) [GPL-2.0+]\n  - [`libspqr`](https://github.com/DrTimothyAldenDavis/SuiteSparse/blob/dev/SPQR/Doc/License.txt) [GPL-2.0+]\n  - [`libumfpack`](https://github.com/DrTimothyAldenDavis/SuiteSparse/blob/dev/UMFPACK/Doc/License.txt) [GPL-2.0+]\n- [LIBBLASTRAMPOLINE](https://github.com/staticfloat/libblastrampoline/blob/main/LICENSE) [MIT]\n- [NGHTTP2](https://github.com/nghttp2/nghttp2/blob/master/COPYING) [MIT]\n\nJulia's build process uses the following external tools:\n\n- [PATCHELF](https://github.com/NixOS/patchelf/blob/master/COPYING) [GPL3]\n- [OBJCONV](https://www.agner.org/optimize/#objconv) [GPL3]\n- [LIBWHICH](https://github.com/vtjnash/libwhich/blob/master/LICENSE) [MIT]\n\nJulia bundles the following external programs and libraries:\n\n- [7-Zip](https://www.7-zip.org/license.txt)\n- [ZLIB](https://zlib.net/zlib_license.html)\n\nOn some platforms, distributions of Julia contain SSL certificate authority certificates,\nreleased under the [Mozilla Public License](https://en.wikipedia.org/wiki/Mozilla_Public_License).\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.01,
          "content": "1.12.0-DEV\n"
        },
        {
          "name": "base",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "julia.spdx.json",
          "type": "blob",
          "size": 38.76,
          "content": "{\n    \"spdxVersion\": \"SPDX-2.2\",\n    \"dataLicense\": \"CC0-1.0\",\n    \"SPDXID\": \"SPDXRef-DOCUMENT\",\n    \"name\": \"julia-spdx\",\n    \"documentNamespace\": \"https://julialang.org/spdxdocs/julia-spdx-156599cd-b5aa-442c-a0d4-72ed73a46d16\",\n    \"creationInfo\": {\n        \"creators\": [\n            \"Organization:  julialang.org  ()\",\n            \"Person:  Simon Avery  ()\"\n        ],\n        \"created\": \"2022-05-19T06:17:33Z\"\n    },\n    \"packages\": [\n        {\n            \"name\": \"Julia\",\n            \"SPDXID\": \"SPDXRef-JuliaMain\",\n            \"versionInfo\": \"1.9.0-DEV\",\n            \"packageFileName\": \"./\",\n            \"downloadLocation\": \"git+https://github.com/JuliaLang/julia.git@v1.9.0-DEV\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://julialang.org\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2009-2022: Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors: https://github.com/JuliaLang/julia/contributors\",\n            \"summary\": \"Julia is a high-level, high-performance dynamic language for technical computing.\",\n            \"comment\": \"In addition to the source code described by this package, Julia pulls in code from many other repositories, which are also described in this document. See relationships for details.\"\n        },\n        {\n            \"name\": \"Pkg.jl\",\n            \"SPDXID\": \"SPDXRef-JuliaPkg\",\n            \"downloadLocation\": \"git+https://github.com/JuliaLang/Pkg.jl.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://julialang.org\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file stdlib/Pkg.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2017-2021: Stefan Karpinski, Kristoffer Carlsson, Fredrik Ekre, David Varela, Ian Butterworth, and contributors: https://github.com/JuliaLang/Pkg.jl/graphs/contributors\",\n            \"summary\": \"Julia's package manager, shipped with Julia v1.0 and above\"\n        },\n        {\n            \"name\": \"Statistics.jl\",\n            \"SPDXID\": \"SPDXRef-JuliaStatistics\",\n            \"downloadLocation\": \"git+https://github.com/JuliaStats/Statistics.jl.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://juliastats.org\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file stdlib/Statistics.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2012-2016: Jeff Bezanson, Stefan Karpinski, Viral B. Shah, Dahua Lin, Simon Byrne, Andreas Noack, Douglas Bates, John Myles White, Simon Kornblith, and other contributors.\",\n            \"summary\": \"Development repository for the Statistics standard library (stdlib) that ships with Julia.\"\n        },\n        {\n            \"name\": \"libCURL.jl\",\n            \"SPDXID\": \"SPDXRef-JuliaCurl\",\n            \"downloadLocation\": \"git+https://github.com/JuliaWeb/LibCURL.jl.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://julialang.org\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file stdlib/libCURL.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2013: JuliaWeb contributors\",\n            \"summary\": \"Julia wrapper for libCURL\"\n        },\n        {\n            \"name\": \"Downloads.jl\",\n            \"SPDXID\": \"SPDXRef-JuliaDownloads\",\n            \"downloadLocation\": \"git+https://github.com/JuliaLang/Downloads.jl.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://julialang.org\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file stdlib/Downloads.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2020 Stefan Karpinski <stefan@karpinski.org> and contributors\",\n            \"summary\": \"The Downloads package provides a single function, download, which provides cross-platform, multi-protocol, in-process download functionality implemented with libcurl.\"\n        },\n        {\n            \"name\": \"ArgTools.jl\",\n            \"SPDXID\": \"SPDXRef-JuliaArgTools\",\n            \"downloadLocation\": \"git+https://github.com/JuliaIO/ArgTools.jl.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://julialang.org\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file stdlib/ArgTools.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2020 Stefan Karpinski <stefan@karpinski.org> and contributors\",\n            \"summary\": \"ArgTools provides tools for creating consistent, flexible APIs that work with various kinds of function arguments.\"\n        },\n        {\n            \"name\": \"LinearAlgebra.jl\",\n            \"SPDXID\": \"SPDXRef-JuliaLinearAlgebra\",\n            \"downloadLocation\": \"git+https://github.com/JuliaLang/LinearAlgebra.jl.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://juliastats.org\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file stdlib/LinearAlgebra.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2009-2024: Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors: https://github.com/JuliaLang/julia/contributors\",\n            \"summary\": \"Development repository for the LinearAlgebra standard library (stdlib) that ships with Julia.\"\n        },\n        {\n            \"name\": \"Tar.jl\",\n            \"SPDXID\": \"SPDXRef-JuliaTar\",\n            \"downloadLocation\": \"git+https://github.com/JuliaIO/Tar.jl.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://julialang.org\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file stdlib/Tar.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2019 Stefan Karpinski <stefan@karpinski.org> and contributors\",\n            \"summary\": \"The Tar package can list, extract and create POSIX TAR archives (tarballs) as specified in POSIX 1003.1-2001.\"\n        },\n        {\n            \"name\": \"NetworkOptions.jl\",\n            \"SPDXID\": \"SPDXRef-JuliaNetworkOptions\",\n            \"downloadLocation\": \"git+https://github.com/JuliaLang/NetworkOptions.jl.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://julialang.org\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file stdlib/NetworkOptions.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2020 Stefan Karpinski <stefan@karpinski.org> and contributors\",\n            \"summary\": \"The NetworkOptions package acts as a mediator between ways of configuring network transport mechanisms (SSL/TLS, SSH, proxies, etc.) and Julia packages that provide access to transport mechanisms.\"\n        },\n        {\n            \"name\": \"SuiteSparse.jl\",\n            \"SPDXID\": \"SPDXRef-JuliaSuiteSparse\",\n            \"downloadLocation\": \"git+https://github.com/JuliaSparse/SuiteSparse.jl.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://julialang.org\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file stdlib/SuiteSparse.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2009-2021: Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors: https://github.com/JuliaLang/julia/contributors\",\n            \"summary\": \"SuiteSparse.jl provides Julia wrappers for the SuiteSparse library, and provides Julia's sparse linear algebra capabilities - specifically the solvers.\"\n        },\n        {\n            \"name\": \"SparseArrays.jl\",\n            \"SPDXID\": \"SPDXRef-JuliaSparseArrays\",\n            \"downloadLocation\": \"git+https://github.com/JuliaSparse/SparseArrays.jl.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://julialang.org\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file stdlib/SparseArrays.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2009-2021: Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors: https://github.com/JuliaLang/julia/contributors\",\n            \"summary\": \"SparseArrays.jl provides Julia's sparse linear algebra capabilities.\"\n        },\n        {\n            \"name\": \"SHA.jl\",\n            \"SPDXID\": \"SPDXRef-JuliaSHA\",\n            \"downloadLocation\": \"git+https://github.com/JuliaCrypto/SHA.jl.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://julialang.org\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file stdlib/SHA.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2014: Elliot Saba\",\n            \"summary\": \"A performant, 100% native-julia SHA1, SHA2, and SHA3 implementation\"\n        },\n        {\n            \"name\": \"dSFMT\",\n            \"SPDXID\": \"SPDXRef-dSFMT\",\n            \"downloadLocation\": \"git+https://github.com/MersenneTwister-Lab/dSFMT.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://github.com/MersenneTwister-Lab/dSFMT\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file deps/dsfmt.version\",\n            \"licenseConcluded\": \"BSD-3-Clause\",\n            \"licenseDeclared\": \"BSD-3-Clause\",\n            \"copyrightText\": \"Copyright (c) 2007, 2008, 2009 Mutsuo Saito, Makoto Matsumoto and Hiroshima University. Copyright (c) 2011, 2002 Mutsuo Saito, Makoto Matsumoto, Hiroshima University and The University of Tokyo.\",\n            \"summary\": \"Double precision SIMD-oriented Fast Mersenne Twister\"\n        },\n        {\n            \"name\": \"OpenLibm\",\n            \"SPDXID\": \"SPDXRef-OpenLibm\",\n            \"downloadLocation\": \"git+https://github.com/JuliaMath/openlibm.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://julialang.org\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file deps/openlibm.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT AND BSD-2-Clause-FreeBSD AND ISC\",\n            \"copyrightText\": \"Copyright (c) 2011-14 The Julia Project.  Copyright (c) 2008 Stephen L. Moshier steve@moshier.net  Copyright 1992-2011 The FreeBSD Project. All rights reserved.  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\",\n            \"summary\": \"High quality system independent, portable, open source libm implementation\"\n        },\n        {\n            \"name\": \"GMP\",\n            \"SPDXID\": \"SPDXRef-GMP\",\n            \"downloadLocation\": \"https://gmplib.org/download/gmp/\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://gmplib.org/\",\n            \"sourceInfo\": \"The version in use can be found in the file deps/gmp.version\",\n            \"licenseConcluded\": \"LGPL-3.0-or-later\",\n            \"licenseDeclared\": \"LGPL-3.0-or-later OR GPL-2.0-or-later\",\n            \"copyrightText\": \"Copyright 1991, 1996, 1999, 2000, 2007 Free Software Foundation, Inc.\",\n            \"summary\": \"GNU MP is a portable library written in C for arbitrary precision arithmetic on integers, rational numbers, and floating-point numbers.\"\n        },\n        {\n            \"name\": \"libgit2\",\n            \"SPDXID\": \"SPDXRef-libgit2\",\n            \"downloadLocation\": \"git+https://github.com/libgit2/libgit2.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://libgit2.org\",\n            \"sourceInfo\": \"The version in use can be found in the file deps/libgit2.version\",\n            \"licenseConcluded\": \"LicenseRef-GPL-2.0-only-with-libgit2-exception\",\n            \"licenseDeclared\": \"LicenseRef-GPL-2.0-only-with-libgit2-exception\",\n            \"copyrightText\": \"libgit2 is Copyright (C) the libgit2 contributors, unless otherwise stated. See the AUTHORS file for details.\",\n            \"summary\": \"A cross-platform, linkable library implementation of Git that you can use in your application.\"\n        },\n        {\n            \"name\": \"curl\",\n            \"SPDXID\": \"SPDXRef-curl\",\n            \"downloadLocation\": \"git+https://github.com/curl/curl.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://curl.se\",\n            \"sourceInfo\": \"The version in use can be found in the file deps/curl.version\",\n            \"licenseConcluded\": \"curl\",\n            \"licenseDeclared\": \"curl\",\n            \"copyrightText\": \"Copyright (c) 1996 - 2021, Daniel Stenberg, daniel@haxx.se, and many contributors, see the THANKS file.\",\n            \"summary\": \"A command line tool and library for transferring data with URL syntax, supporting DICT, FILE, FTP, FTPS, GOPHER, GOPHERS, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP. libcurl offers a myriad of powerful features\"\n        },\n        {\n            \"name\": \"libssh2\",\n            \"SPDXID\": \"SPDXRef-libssh2\",\n            \"downloadLocation\": \"git+https://github.com/libssh2/libssh2.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://www.libssh2.org\",\n            \"sourceInfo\": \"The version in use can be found in the file deps/libssh2.version\",\n            \"licenseConcluded\": \"BSD-3-Clause\",\n            \"licenseDeclared\": \"BSD-3-Clause\",\n            \"copyrightText\": \"Copyright (c) 2004-2007 Sara Golemon <sarag@libssh2.org>\\nCopyright (c) 2005,2006 Mikhail Gusarov <dottedmag@dottedmag.net>\\nCopyright (c) 2006-2007 The Written Word, Inc.\\nCopyright (c) 2007 Eli Fant <elifantu@mail.ru>\\nCopyright (c) 2009-2021 Daniel Stenberg\\nCopyright (C) 2008, 2009 Simon Josefsson\\nCopyright (c) 2000 Markus Friedl\\nCopyright (c) 2015 Microsoft Corp.\\nAll rights reserved.\",\n            \"summary\": \"libssh2 is a library implementing the SSH2 protocol, available under the revised BSD license.\"\n        },\n        {\n            \"name\": \"OpenSSL\",\n            \"SPDXID\": \"SPDXRef-OpenSSL\",\n            \"downloadLocation\": \"git+https://github.com/openssl/openssl.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://www.openssl.org\",\n            \"sourceInfo\": \"The version in use can be found in the file deps/openssl.version\",\n            \"licenseConcluded\": \"Apache-2.0\",\n            \"licenseDeclared\": \"Apache-2.0\",\n            \"copyrightText\": \"Copyright (c) 1998-2024 The OpenSSL Project Authors. Copyright (c) 1995-1998 Eric A. Young, Tim J. Hudson.\",\n            \"summary\": \"OpenSSL is a robust, commercial-grade, full-featured Open Source Toolkit for the TLS (formerly SSL), DTLS and QUIC (currently client side only) protocols.\",\n        },\n        {\n            \"name\": \"mpfr\",\n            \"SPDXID\": \"SPDXRef-mpfr\",\n            \"downloadLocation\": \"https://www.mpfr.org/\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://www.mpfr.org/\",\n            \"sourceInfo\": \"The version in use can be found in the file deps/mpfr.version\",\n            \"licenseConcluded\": \"LGPL-3.0-or-later\",\n            \"licenseDeclared\": \"LGPL-3.0-or-later\",\n            \"copyrightText\": \"Copyright 2000-2020 Free Software Foundation, Inc.\",\n            \"summary\": \"The MPFR library is a C library for multiple-precision floating-point computations with correct rounding.\"\n        },\n        {\n            \"name\": \"OpenBLAS\",\n            \"SPDXID\": \"SPDXRef-OpenBLAS\",\n            \"downloadLocation\": \"git+https://github.com/xianyi/OpenBLAS.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://www.openblas.net\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file deps/openblas.version\",\n            \"licenseConcluded\": \"BSD-3-Clause\",\n            \"licenseDeclared\": \"BSD-3-Clause\",\n            \"copyrightText\": \"Copyright (c) 2011-2014, The OpenBLAS Project\",\n            \"summary\": \"OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version.\"\n        },\n        {\n            \"name\": \"LAPACK\",\n            \"SPDXID\": \"SPDXRef-LAPACK\",\n            \"downloadLocation\": \"https://www.netlib.org/lapack/\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://netlib.org/\",\n            \"sourceInfo\": \"The version in use can be found in the file deps/openblas.version\",\n            \"licenseConcluded\": \"BSD-3-Clause\",\n            \"licenseDeclared\": \"BSD-3-Clause\",\n            \"copyrightText\": \"Copyright (c) 1992-2013 The University of Tennessee and The University of Tennessee Research Foundation.  All rights reserved.\\nCopyright (c) 2000-2013 The University of California Berkeley. All rights reserved.\\nCopyright (c) 2006-2013 The University of Colorado Denver.  All rights reserved.\",\n            \"summary\": \"LAPACK is written in Fortran 90 and provides routines for solving systems of simultaneous linear equations, least-squares solutions of linear systems of equations, eigenvalue problems, and singular value problems.\"\n        },\n        {\n            \"name\": \"PCRE\",\n            \"SPDXID\": \"SPDXRef-PCRE\",\n            \"downloadLocation\": \"git+https://github.com/PhilipHazel/pcre2.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://www.pcre.org\",\n            \"sourceInfo\": \"The version in use can be found in the file deps/pcre.version\",\n            \"licenseConcluded\": \"BSD-3-Clause\",\n            \"licenseDeclared\": \"BSD-3-Clause\",\n            \"copyrightText\": \"Copyright (c) 1997-2021 University of Cambridge All rights reserved.\\nCopyright(c) 2009-2021 Zoltan Herczeg\\n\",\n            \"summary\": \"PCRE2 is a library of functions to support regular expressions whose syntax and semantics are as close as possible to those of the Perl 5 language.\"\n        },\n        {\n            \"name\": \"LibSuiteSparse\",\n            \"SPDXID\": \"SPDXRef-LibSuiteSparse\",\n            \"packageFileName\": \"./\",\n            \"downloadLocation\": \"git+https://github.com/DrTimothyAldenDavis/SuiteSparse.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://people.engr.tamu.edu/davis/suitesparse.html\",\n            \"sourceInfo\": \"The version in use can be found in the file deps/libsuitesparse.version\",\n            \"licenseConcluded\": \"GPL-2.0-or-later\",\n            \"licenseDeclared\": \"LGPL-2.0-or-later AND GPL-2.0-or-later AND BSD-3 AND Apache-2.0 \",\n            \"licenseComments\": \"SuiteSparse consists of many modules, each of which is licensed separately.\",\n            \"copyrightText\": \"AMD, Copyright (c), 1996-2015, Timothy A. Davis,\\nBTF, Copyright (C) 2004-2013, University of Florida\\nCAMD, Copyright (c) by Timothy A. Davis, Yanqing Chen, Patrick R. Amestoy, and Iain S. Duff.  All Rights Reserved.\\nCCOLAMD: Copyright (C) 2005-2016, Univ. of Florida.  Authors: Timothy A. Davis, Sivasankaran Rajamanickam, and Stefan Larimore.  Closely based on COLAMD by Davis, Stefan Larimore, in collaboration with Esmond Ng, and John Gilbert.\\nCHOLMOD/Check Module.  Copyright (C) 2005-2006, Timothy A. Davis\\nCHOLMOD/Cholesky module, Copyright (C) 2005-2006, Timothy A. Davis.\\nCHOLMOD/Core Module.  Copyright (C) 2005-2006, Univ. of Florida.  Author: Timothy A. Davis.\\nCHOLMOD/Demo Module.  Copyright (C) 2005-2006, Timothy A. Davis.\\nCHOLMOD/Include/* files.  Copyright (C) 2005-2006, either Univ. of Florida or T. Davis, depending on the file\\nCHOLMOD/MATLAB Module.  Copyright (C) 2005-2006, Timothy A. Davis.\\nCHOLMOD/MatrixOps Module.  Copyright (C) 2005-2006, Timothy A. Davis.\\nCHOLMOD/Modify Module.  Copyright (C) 2005-2006, Timothy A. Davis and William W. Hager.\\nCHOLMOD/Partition Module.  Copyright (C) 2005-2006, Univ. of Florida.  Author: Timothy A. Davis\\nCHOLMOD/Supernodal Module.  Copyright (C) 2005-2006, Timothy A. Davis\\nCHOLMOD/Tcov Module.  Copyright (C) 2005-2006, Timothy A. Davis\\nCHOLMOD/Valgrind Module.  Copyright (C) 2005-2006, Timothy A. Davis.\\nCOLAMD, Copyright 1998-2016, Timothy A. Davis.\\nCSparse, Copyright (c) 2006, Timothy A. Davis.\\nCXSparse: Copyright (c) 2006, Timothy A. Davis.\\nGPUQREngine, Copyright (c) 2013, Timothy A. Davis, Sencer Nuri Yeralan, and Sanjay Ranka.\\nKLU, Copyright (C) 2004-2013, University of Florida by Timothy A. Davis and Ekanathan Palamadai.\\nLDL, Copyright (c) 2005-2013 by Timothy A. Davis.\\nThe MATLAB_Tools collection of packages is Copyright (c), Timothy A. Davis, All Rights Reserved, with the exception of the spqr_rank package, which is Copyright (c), Timothy A. Davis and Les Foster, All Rights Reserved\\nMATLAB_Tools, SSMULT, Copyright (c) 2007-2011, Timothy A. Davis,\\nMongoose Graph Partitioning Library  Copyright (C) 2017-2018, Scott P. Kolodziej, Nuri S. Yeralan, Timothy A. Davis, William W. Hager\\nRBio toolbox.  Copyright (C) 2006-2009, Timothy A. Davis\\nSLIP_LU: (c) 2019-2020, Chris Lourenco, Jinhao Chen, Erick Moreno-Centeno, Timothy A. Davis, Texas A&M University. \\nSPQR, Copyright 2008-2016 by Timothy A. Davis.\\nSuiteSparse_GPURuntime Copyright (c) 2013-2016, Timothy A. Davis, Sencer Nuri Yeralan, and Sanjay Ranka.\\nUMFPACK, Copyright 1995-2009 by Timothy A. Davis.\",\n            \"summary\": \"The official SuiteSparse library: a suite of sparse matrix algorithms authored or co-authored by Tim Davis, Texas A&M University\"\n        },\n        {\n            \"name\": \"LibBlasTrampoline\",\n            \"SPDXID\": \"SPDXRef-LibBlasTrampoline\",\n            \"downloadLocation\": \"git+https://github.com/JuliaLinearAlgebra/libblastrampoline.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://github.com/JuliaLinearAlgebra\",\n            \"sourceInfo\": \"The version in use can be found in the file deps/blastrampoline.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2021: Elliot Saba, Viral B. Shah, Julia Computing.\",\n            \"summary\": \"Using PLT trampolines to provide a BLAS and LAPACK demuxing library.\"\n        },\n        {\n            \"name\": \"NGHTTP2\",\n            \"SPDXID\": \"SPDXRef-NGHTTP2\",\n            \"downloadLocation\": \"git+https://github.com/nghttp2/nghttp2.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://nghttp2.org\",\n            \"sourceInfo\": \"The version in use can be found in the file deps/Version.make\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2012, 2014, 2015, 2016 Tatsuhiro Tsujikawa\\nCopyright (c) 2012, 2014, 2015, 2016 nghttp2 contributors\",\n            \"summary\": \"nghttp2 is an implementation of HTTP/2 and its header compression algorithm HPACK in C.\"\n        },\n        {\n            \"name\": \"libunwind\",\n            \"SPDXID\": \"SPDXRef-libunwind\",\n            \"downloadLocation\": \"git+https://github.com/libunwind/libunwind.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"http://www.nongnu.org/libunwind/\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file deps/unwind.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2002 Hewlett-Packard Co.\",\n            \"summary\": \"The primary goal of this project is to define a portable and efficient C programming interface (API) to determine the call-chain of a program.\"\n        },\n        {\n            \"name\": \"libuv\",\n            \"SPDXID\": \"SPDXRef-libuv\",\n            \"supplier\": \"Organization: julialang.org ()\",\n            \"originator\": \"Organization: libuv.org ()\",\n            \"downloadLocation\": \"git+https://github.com/JuliaLang/libuv.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://libuv.org\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file deps/libuv.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2015-present libuv project contributors\",\n            \"summary\": \"libuv is a multi-platform support library with a focus on asynchronous I/O. It was primarily developed for use by Node.js, but it's also used by Luvit, Julia, pyuv, and others.\",\n            \"comment\": \"The Julia project has forked libuv and maintains their own repository of the code\"\n        },\n        {\n            \"name\": \"llvm\",\n            \"SPDXID\": \"SPDXRef-llvm\",\n            \"supplier\": \"Organization: julialang.org ()\",\n            \"originator\": \"Organization: llvm.org ()\",\n            \"downloadLocation\": \"git+https://github.com/JuliaLang/llvm-project.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://llvm.org\",\n            \"sourceInfo\": \"The version in use can be found in the file deps/llvm.version\",\n            \"licenseConcluded\": \"Apache-2.0 WITH LLVM-exception\",\n            \"licenseDeclared\": \"Apache-2.0 WITH LLVM-exception\",\n            \"copyrightText\": \"The LLVM project does not collect copyright assignments, which means that the copyright for the code in the project is held by the respective contributors\",\n            \"summary\": \"The LLVM Project is a collection of modular and reusable compiler and toolchain technologies.\",\n            \"comment\": \"The Julia project has forked llvm and maintains their own repository of the code\"\n        },\n        {\n            \"name\": \"utf8proc\",\n            \"SPDXID\": \"SPDXRef-utf8proc\",\n            \"downloadLocation\": \"git+https://github.com/JuliaLang/utf8proc.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://github.com/JuliaStrings/utf8proc\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file deps/utf8proc.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright © 2014-2019 by Steven G. Johnson, Jiahao Chen, Tony Kelman, Jonas Fonseca, and other contributors listed in the git history.\",\n            \"summary\": \"utf8proc is a small, clean C library that provides Unicode normalization, case-folding, and other operations for data in the UTF-8 encoding.\"\n        },\n        {\n            \"name\": \"LibTracyClient\",\n            \"SPDXID\": \"SPDXRef-LibTracyClient\",\n            \"downloadLocation\": \"git+https://github.com/wolfpld/tracy.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://github.com/wolfpld/tracy\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file deps/libtracyclient.version\",\n            \"licenseConcluded\": \"BSD-3-Clause\",\n            \"licenseDeclared\": \"BSD-3-Clause\",\n            \"copyrightText\": \"Copyright (c) 2017-2024, Bartosz Taudul <wolf@nereid.pl>\",\n            \"summary\": \"A real time, nanosecond resolution, remote telemetry, hybrid frame and sampling profiler for games and other applications.\",\n            \"comment\": \"LibTracyClient is an optional dependency that is not built by default\"\n        },\n        {\n            \"name\": \"ittapi\",\n            \"SPDXID\": \"SPDXRef-ittapi\",\n            \"downloadLocation\": \"git+https://github.com/intel/ittapi.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://github.com/intel/ittapi\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file deps/ittapi.version\",\n            \"licenseConcluded\": \"BSD-3-Clause AND GPL-2.0-only\",\n            \"licenseDeclared\": \"BSD-3-Clause AND GPL-2.0-only\",\n            \"copyrightText\": \"Copyright (c) 2019 Intel Corporation\",\n            \"summary\": \"The Instrumentation and Tracing Technology (ITT) API enables your application to generate and control the collection of trace data during its execution across different Intel tools.\",\n            \"comment\": \"ITTAPI is an optional dependency that is not built by default\"\n        },\n        {\n            \"name\": \"7-Zip\",\n            \"SPDXID\": \"SPDXRef-7zip\",\n            \"downloadLocation\": \"https://sourceforge.net/projects/p7zip/files/p7zip\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://www.7-zip.org\",\n            \"sourceInfo\": \"The version in use can be found in the file deps/p7zip.version\",\n            \"licenseConcluded\": \"LGPL-3.0-or-later\",\n            \"licenseDeclared\": \"LGPL-3.0-or-later AND BSD-3\",\n            \"copyrightText\": \"Copyright (C) 1999-2021 Igor Pavlov\",\n            \"summary\": \"7-Zip is a file archiver with a high compression ratio.\"\n        },\n        {\n            \"name\": \"zlib\",\n            \"SPDXID\": \"SPDXRef-zlib\",\n            \"downloadLocation\": \"git+https://github.com/madler/zlib.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://zlib.net\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file deps/zlib.version\",\n            \"licenseConcluded\": \"Zlib\",\n            \"licenseDeclared\": \"Zlib\",\n            \"copyrightText\": \"Copyright (C) 1995-2017 Jean-loup Gailly and Mark Adler\",\n            \"summary\": \"A massively spiffy yet delicately unobtrusive compression library.\"\n        },\n        {\n            \"name\": \"patchelf\",\n            \"SPDXID\": \"SPDXRef-patchelf\",\n            \"downloadLocation\": \"git+https://github.com/NixOS/patchelf.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://nixos.org/patchelf.html\",\n            \"sourceInfo\": \"The version in use can be found in the file deps/patchelf.version\",\n            \"licenseConcluded\": \"GPL-3.0-or-later\",\n            \"licenseDeclared\": \"GPL-3.0-or-later\",\n            \"copyrightText\": \"Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\",\n            \"summary\": \"A small utility to modify the dynamic linker and RPATH of ELF executables.\",\n            \"comment\": \"PATCHELF is not part of the Julia binary. It is a tool used as part of building the binary, a bit like a compiler. Julia chooses to build the tool from source during the build process as a convenience.\"\n        },\n        {\n            \"name\": \"objconv\",\n            \"SPDXID\": \"SPDXRef-objconv\",\n            \"downloadLocation\": \"https://www.agner.org/optimize/objconv.zip\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://www.agner.org/optimize/#objconv\",\n            \"licenseConcluded\": \"GPL-3.0-or-later\",\n            \"licenseDeclared\": \"GPL-3.0-or-later\",\n            \"copyrightText\": \"By Agner Fog © 2018\",\n            \"summary\": \"A utility for cross-platform development of function libraries, for converting and modifying object files and for dumping and disassembling object and executable files for all x86 and x86-64 platforms.\",\n            \"comment\": \"OBJCONV is not part of the Julia binary. It is a tool used as part of building the binary, a bit like a compiler. Julia chooses to build the tool from source during the build process as a convenience.\"\n        },\n        {\n            \"name\": \"libwhich\",\n            \"SPDXID\": \"SPDXRef-libwhich\",\n            \"downloadLocation\": \"git+https://github.com/vtjnash/libwhich.git\",\n            \"filesAnalyzed\": false,\n            \"homepage\": \"https://github.com/vtjnash/libwhich\",\n            \"sourceInfo\": \"The git hash of the version in use can be found in the file stdlib/libwhich.version\",\n            \"licenseConcluded\": \"MIT\",\n            \"licenseDeclared\": \"MIT\",\n            \"copyrightText\": \"Copyright (c) 2017 Jameson Nash\",\n            \"summary\": \"Like `which`, for dynamic libraries\",\n            \"comment\": \"LIBWHICH is not part of the Julia binary. It is a tool used as part of building the binary, a bit like a compiler. Julia chooses to build the tool from source during the build process as a convenience.\"\n        }\n    ],\n    \"hasExtractedLicensingInfos\": [\n        {\n            \"licenseId\": \"LicenseRef-GPL-2.0-only-with-libgit2-exception\",\n            \"extractedText\": \"Note that the only valid version of the GPL as far as this project is concerned is _this_ particular version of the license (ie v2, not v2.2 or v3.x or whatever), unless explicitly otherwise stated.\\n----------------------------------------------------------------------\\nIn addition to the permissions in the GNU General Public License, the authors give you unlimited permission to link the compiled version of this library into combinations with other programs, and to distribute those combinations without any restriction coming from the use of this file.  (The General Public License restrictions do apply in other respects; for example, they cover modification of the file, and distribution when not linked into a combined executable.)\\n----------------------------------------------------------------------\\nGNU GENERAL PUBLIC LICENSE\\nVersion 2, June 1991\\n\\nCopyright (C) 1989, 1991 Free Software Foundation, Inc.\\n59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\\nEveryone is permitted to copy and distribute verbatim copies\\nof this license document, but changing it is not allowed.\\n... [more text]\",\n            \"name\": \"GPL-2.0-only-with-libgit2-exception\"\n        }\n    ],\n    \"relationships\": [\n        {\n            \"spdxElementId\": \"SPDXRef-JuliaPkg\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-JuliaStatistics\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-JuliaCurl\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-JuliaDownloads\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-JuliaArgTools\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-JuliaTar\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-JuliaNetworkOptions\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-JuliaSuiteSparse\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-JuliaSparseArrays\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-JuliaSHA\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-dSFMT\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-OpenLibm\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-GMP\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-libgit2\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-curl\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-libssh2\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-OpenSSL\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-mpfr\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-OpenBLAS\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-LAPACK\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-PCRE\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-LibSuiteSparse\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-LibBlasTrampoline\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-NGHTTP2\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-libunwind\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-libuv\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-llvm\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-utf8proc\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-LibTracyClient\",\n            \"relationshipType\": \"OPTIONAL_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-ittapi\",\n            \"relationshipType\": \"OPTIONAL_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-7zip\",\n            \"relationshipType\": \"RUNTIME_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-zlib\",\n            \"relationshipType\": \"BUILD_DEPENDENCY_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-patchelf\",\n            \"relationshipType\": \"BUILD_TOOL_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-objconv\",\n            \"relationshipType\": \"BUILD_TOOL_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        },\n        {\n            \"spdxElementId\": \"SPDXRef-libwhich\",\n            \"relationshipType\": \"BUILD_TOOL_OF\",\n            \"relatedSpdxElement\": \"SPDXRef-JuliaMain\"\n        }\n    ],\n    \"documentDescribes\": [\n        \"SPDXRef-JuliaMain\"\n    ]\n}\n"
        },
        {
          "name": "pkgimage.mk",
          "type": "blob",
          "size": 1.41,
          "content": "SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))\nBUILDDIR := .\nJULIAHOME := $(SRCDIR)\ninclude $(JULIAHOME)/Make.inc\ninclude $(JULIAHOME)/stdlib/stdlib.mk\n\n\n# set some influential environment variables\nexport JULIA_DEPOT_PATH := $(shell echo $(call cygpath_w,$(build_prefix)/share/julia))\nexport JULIA_LOAD_PATH := @stdlib$(PATHSEP)$(shell echo $(call cygpath_w,$(JULIAHOME)/stdlib))\nunexport JULIA_PROJECT :=\nunexport JULIA_BINDIR :=\n\nexport JULIA_FALLBACK_REPL := true\n\ndefault: release\nrelease: $(BUILDDIR)/stdlib/release.image\ndebug: $(BUILDDIR)/stdlib/debug.image\nall: release debug\n\n$(JULIA_DEPOT_PATH)/compiled:\n\tmkdir -p $@\n\nprint-depot-path:\n\t@$(call PRINT_JULIA, $(call spawn,$(JULIA_EXECUTABLE)) --startup-file=no -e '@show Base.DEPOT_PATH')\n\n$(BUILDDIR)/stdlib/%.image: $(JULIAHOME)/stdlib/Project.toml $(JULIAHOME)/stdlib/Manifest.toml $(INDEPENDENT_STDLIBS_SRCS) $(JULIA_DEPOT_PATH)/compiled\n\t@$(call PRINT_JULIA, JULIA_CPU_TARGET=\"$(JULIA_CPU_TARGET)\" $(call spawn,$(JULIA_EXECUTABLE)) --startup-file=no -e \\\n\t\t'Base.Precompilation.precompilepkgs(configs=[``=>Base.CacheFlags(debug_level=2, opt_level=3), ``=>Base.CacheFlags(check_bounds=1, debug_level=2, opt_level=3)])')\n\ttouch $@\n\n$(BUILDDIR)/stdlib/release.image: $(build_private_libdir)/sys.$(SHLIB_EXT)\n$(BUILDDIR)/stdlib/debug.image: $(build_private_libdir)/sys-debug.$(SHLIB_EXT)\n\nclean:\n\trm -rf $(JULIA_DEPOT_PATH)/compiled\n\trm -f $(BUILDDIR)/stdlib/*.image\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "stdlib",
          "type": "tree",
          "content": null
        },
        {
          "name": "sysimage.mk",
          "type": "blob",
          "size": 4.66,
          "content": "SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))\nBUILDDIR := .\nJULIAHOME := $(SRCDIR)\ninclude $(JULIAHOME)/Make.inc\ninclude $(JULIAHOME)/stdlib/stdlib.mk\n\ndefault: sysimg-$(JULIA_BUILD_MODE) # contains either \"debug\" or \"release\"\nall: sysimg-release sysimg-debug\nbasecompiler-ji: $(build_private_libdir)/basecompiler.ji\nsysimg-ji: $(build_private_libdir)/sys.ji\nsysimg-bc: $(build_private_libdir)/sys-bc.a\nsysimg-release: $(build_private_libdir)/sys.$(SHLIB_EXT)\nsysimg-debug: $(build_private_libdir)/sys-debug.$(SHLIB_EXT)\n\nVERSDIR := v$(shell cut -d. -f1-2 < $(JULIAHOME)/VERSION)\n\n$(build_private_libdir)/%.$(SHLIB_EXT): $(build_private_libdir)/%-o.a\n\t@$(call PRINT_LINK, $(CXX) $(LDFLAGS) -shared $(fPIC) -L$(build_private_libdir) -L$(build_libdir) -L$(build_shlibdir) -o $@ \\\n\t\t$(WHOLE_ARCHIVE) $< $(NO_WHOLE_ARCHIVE) \\\n\t\t$(if $(findstring -debug,$(notdir $@)),-ljulia-internal-debug -ljulia-debug,-ljulia-internal -ljulia) \\\n\t\t$$([ $(OS) = WINNT ] && echo '' $(LIBM) -lssp --disable-auto-import --disable-runtime-pseudo-reloc))\n\t@$(INSTALL_NAME_CMD)$(notdir $@) $@\n\t@$(DSYMUTIL) $@\n\nCOMPILER_SRCS := $(addprefix $(JULIAHOME)/, \\\n\t\tbase/Base_compiler.jl \\\n\t\tbase/boot.jl \\\n\t\tbase/docs/core.jl \\\n\t\tbase/abstractarray.jl \\\n\t\tbase/abstractdict.jl \\\n\t\tbase/abstractset.jl \\\n\t\tbase/iddict.jl \\\n\t\tbase/idset.jl \\\n\t\tbase/array.jl \\\n\t\tbase/bitarray.jl \\\n\t\tbase/bitset.jl \\\n\t\tbase/bool.jl \\\n\t\tbase/ctypes.jl \\\n\t\tbase/error.jl \\\n\t\tbase/essentials.jl \\\n\t\tbase/expr.jl \\\n\t\tbase/generator.jl \\\n\t\tbase/int.jl \\\n\t\tbase/indices.jl \\\n\t\tbase/iterators.jl \\\n\t\tbase/invalidation.jl \\\n\t\tbase/namedtuple.jl \\\n\t\tbase/number.jl \\\n\t\tbase/operators.jl \\\n\t\tbase/options.jl \\\n\t\tbase/pair.jl \\\n\t\tbase/pointer.jl \\\n\t\tbase/promotion.jl \\\n\t\tbase/range.jl \\\n\t\tbase/runtime_internals.jl \\\n\t\tbase/traits.jl \\\n\t\tbase/refvalue.jl \\\n\t\tbase/tuple.jl)\nCOMPILER_SRCS += $(shell find $(JULIAHOME)/Compiler/src -name \\*.jl)\n# sort these to remove duplicates\nBASE_SRCS := $(sort $(shell find $(JULIAHOME)/base -name \\*.jl -and -not -name sysimg.jl) \\\n                    $(shell find $(BUILDROOT)/base -name \\*.jl  -and -not -name sysimg.jl))\nSTDLIB_SRCS := $(JULIAHOME)/base/sysimg.jl $(SYSIMG_STDLIBS_SRCS)\nRELBUILDROOT := $(call rel_path,$(JULIAHOME)/base,$(BUILDROOT)/base)/ # <-- make sure this always has a trailing slash\nRELDATADIR := $(call rel_path,$(JULIAHOME)/base,$(build_datarootdir))/ # <-- make sure this always has a trailing slash\n\n$(build_private_libdir)/basecompiler.ji: $(COMPILER_SRCS)\n\t@$(call PRINT_JULIA, cd $(JULIAHOME)/base && \\\n\tJULIA_NUM_THREADS=1 $(call spawn,$(JULIA_EXECUTABLE)) -C \"$(JULIA_CPU_TARGET)\" $(HEAPLIM) --output-ji $(call cygpath_w,$@).tmp \\\n\t\t--startup-file=no --warn-overwrite=yes -g$(BOOTSTRAP_DEBUG_LEVEL) -O1 Base_compiler.jl --buildroot $(RELBUILDROOT) --dataroot $(RELDATADIR))\n\t@mv $@.tmp $@\n\n$(build_private_libdir)/sys.ji: $(build_private_libdir)/basecompiler.ji $(JULIAHOME)/VERSION $(BASE_SRCS) $(STDLIB_SRCS)\n\t@$(call PRINT_JULIA, cd $(JULIAHOME)/base && \\\n\tif ! JULIA_BINDIR=$(call cygpath_w,$(build_bindir)) WINEPATH=\"$(call cygpath_w,$(build_bindir));$$WINEPATH\" \\\n\t\t\tJULIA_NUM_THREADS=1 $(call spawn, $(JULIA_EXECUTABLE)) -g1 -O1 -C \"$(JULIA_CPU_TARGET)\" $(HEAPLIM) --output-ji $(call cygpath_w,$@).tmp $(JULIA_SYSIMG_BUILD_FLAGS) \\\n\t\t\t--startup-file=no --warn-overwrite=yes --sysimage $(call cygpath_w,$<) sysimg.jl --buildroot $(RELBUILDROOT) --dataroot $(RELDATADIR); then \\\n\t\techo '*** This error might be fixed by running `make clean`. If the error persists$(COMMA) try `make cleanall`. ***'; \\\n\t\tfalse; \\\n\tfi )\n\t@mv $@.tmp $@\n\ndefine sysimg_builder\n$$(build_private_libdir)/sys$1-o.a $$(build_private_libdir)/sys$1-bc.a : $$(build_private_libdir)/sys$1-%.a : $$(build_private_libdir)/sys.ji $$(JULIAHOME)/contrib/generate_precompile.jl\n\t@$$(call PRINT_JULIA, cd $$(JULIAHOME)/base && \\\n\tif ! JULIA_BINDIR=$$(call cygpath_w,$(build_bindir)) \\\n\t\t WINEPATH=\"$$(call cygpath_w,$$(build_bindir));$$$$WINEPATH\" \\\n\t\t JULIA_LOAD_PATH='@stdlib' \\\n\t\t JULIA_PROJECT= \\\n\t\t JULIA_DEPOT_PATH=':' \\\n\t\t JULIA_NUM_THREADS=1 \\\n\t\t\t$$(call spawn, $3) $2 -C \"$$(JULIA_CPU_TARGET)\" $$(HEAPLIM) --output-$$* $$(call cygpath_w,$$@).tmp $$(JULIA_SYSIMG_BUILD_FLAGS) \\\n\t\t\t--startup-file=no --warn-overwrite=yes --sysimage $$(call cygpath_w,$$<) $$(call cygpath_w,$$(JULIAHOME)/contrib/generate_precompile.jl) $(JULIA_PRECOMPILE); then \\\n\t\techo '*** This error is usually fixed by running `make clean`. If the error persists$$(COMMA) try `make cleanall`. ***'; \\\n\t\tfalse; \\\n\tfi )\n\t@mv $$@.tmp $$@\n.SECONDARY: $$(build_private_libdir)/sys$1-o.a $(build_private_libdir)/sys$1-bc.a # request Make to keep these files around\nendef\n$(eval $(call sysimg_builder,,-O3,$(JULIA_EXECUTABLE_release)))\n$(eval $(call sysimg_builder,-debug,-O0,$(JULIA_EXECUTABLE_debug)))\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "typos.toml",
          "type": "blob",
          "size": 0.08,
          "content": "[default]\nextend-ignore-words-re = [\"^[a-zA-Z]?[a-zA-Z]?[a-zA-Z]?[a-zA-Z]?$\"]\n"
        }
      ]
    }
  ]
}