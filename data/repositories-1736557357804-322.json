{
  "metadata": {
    "timestamp": 1736557357804,
    "page": 322,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pixijs/pixijs",
      "stars": 44292,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".codesandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.31,
          "content": "# This file is for unifying the coding style for different editors and IDEs.\n# More information at http://EditorConfig.org\nroot = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nindent_style = space\nindent_size = 4\n\n[{package.json,bower.json,.github/**/*.yml}]\n\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.12,
          "content": "*.js    text eol=lf\n*.ts    text eol=lf\n*.json  text eol=lf\n*.yml   text eol=lf\n*.md    text eol=lf\n*.txt   text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.76,
          "content": "# package.lock\npackages/**/package-lock.json\n\n# sublime text files\n*.sublime*\n*.*~*.TMP\n\n# temp files\n.DS_Store\nThumbs.db\nDesktop.ini\nnpm-debug.log\nlerna-debug.log\n.eslintcache\n\n# project files\n.project\n\n# vim swap files\n*.sw*\n\n# emacs temp files\n*~\n\\#*#\n\n# project ignores\n!.gitkeep\n*__temp\nnode_modules\ndocs\ncoverage\ncoverage.lcov\n.nyc_output\ndist\nlib\nout\n\n# jetBrains IDE ignores\n.idea\n\n# VSCode ignores\npixi.code-workspace\n\n# IntelliJ\n*.iml\n\n# webdoc api\ndist/docs/pixi.api.json\n\n# A folder that will be uploaded with every PR\n# This is useful for things like visual testing artifacts that can be used to debug a PR if it fails\n.pr_uploads\n\n# A folder that will be uploaded with every release\n# This is useful for things like docs and bundled versions of the library\n.s3_uploads\n"
        },
        {
          "name": ".husky",
          "type": "tree",
          "content": null
        },
        {
          "name": ".knip.jsonc",
          "type": "blob",
          "size": 0.99,
          "content": "{\n    \"entry\": [\n        // Bundle entry points\n        \"src/index.ts\",\n        \"src/bundle.*.ts\",\n        \"src/*/index.ts\",\n        // Sub-module exports\n        \"src/**/init.ts\",\n        // Convention for worker files\n        \"src/**/*.worker.ts\",\n        // Convention for test files\n        \"tests/visual/**/*.scene.ts\",\n        // Scripts called from package.json using ts-node\n        \"scripts/index/index.ts\",\n        \"scripts/types/fixTypes.ts\",\n        \"scripts/utils/autoGenerateUnsafeEvalFunctions.ts\",\n        // 3rd party configurations,\n        \"dts.config.js\"\n    ],\n    \"project\": [\n        \"src/**/*.ts\",\n        \"scripts/**/*.{ts,js}\",\n        \"tests/**/*.ts\",\n        \"*.{mjs,js,json}\",\n        \"types/**/*.d.ts\"\n    ],\n    \"ignoreDependencies\": [\n        // Not detected in webdoc.config.js\n        \"@pixi/webdoc-template\",\n        // Not detected in jest setup\n        \"http-server\",\n        // Used internaly as dependences like \"node:*\" or \"worker:*\"\n        \"node\",\n        \"worker\"\n    ]\n}\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.04,
          "content": "engine-strict = true\nlegacy-peer-deps\n"
        },
        {
          "name": ".nvmrc",
          "type": "blob",
          "size": 0,
          "content": "v20\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.07,
          "content": "The MIT License\n\nCopyright (c) 2013-2023 Mathew Groves, Chad Engler\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.22,
          "content": "<p align=\"center\">\n  <a href=\"https://pixijs.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n    <img height=\"150\" src=\"https://files.pixijs.download/branding/pixijs-logo-transparent-dark.svg?v=1\" alt=\"PixiJS logo\">\n  </a>\n</p>\n<br/>\n<p align=\"center\">\n  <a href=\"https://npmjs.com/package/pixi.js\"><img src=\"https://img.shields.io/npm/v/pixi.js.svg\" alt=\"npm package\"></a>\n  <a href=\"https://github.com/pixijs/pixijs/actions/workflows/release.yml\"><img src=\"https://github.com/pixijs/pixijs/actions/workflows/release.yml/badge.svg\" alt=\"build status\"></a>\n  <a href=\"https://opencollective.com/pixijs/tiers/badge.svg\"><img src=\"https://opencollective.com/pixijs/tiers/badge.svg\" alt=\"Start new PR in StackBlitz Codeflow\"></a>\n  <a href=\"https://discord.gg/QrnxmQUPGV\"><img src=\"https://img.shields.io/badge/chat-discord-blue?style=flat&logo=discord\" alt=\"discord chat\"></a>\n</p>\n<p align=\"center\">\n <a href=\"https://pixijs.com/8.x/examples\">Examples</a> | <a href=\"https://pixijs.com/8.x/guides\">Getting Started</a> | <a href=\"https://pixijs.download/release/docs/index.html\">Documentation</a>  | <a href=\"https://discord.gg/QrnxmQUPGV\">Discord</a>\n</p>\n\n# PixiJS ‚ö°Ô∏è\n> Next-Generation, Fastest HTML5 Creation Engine for the Web\n\n- üöÄ [WebGL](https://en.wikipedia.org/wiki/WebGL) & [WebGPU](https://en.wikipedia.org/wiki/WebGPU) Renderers\n- ‚ö°Ô∏è Unmatched Performance & Speed\n- üé® Easy to use, yet powerful API\n- üì¶ Asset Loader\n- ‚úã Full Mouse & Multi-touch Support\n- ‚úçÔ∏è Flexible Text Rendering\n- üìê Versatile Primitive and SVG Drawing\n- üñºÔ∏è Dynamic Textures\n- üé≠ Masking\n- ü™Ñ Powerful Filters\n- üåà Advanced Blend Modes\n\nPixiJS is the fastest, most lightweight 2D library available for the web, working\nacross all devices and allowing you to create rich, interactive graphics and cross-platform applications using WebGL and WebGPU.\n\n### Setup\n\nIt's easy to get started with PixiJS! Just use our [PixiJS Create](https://pixijs.io/create-pixi/) CLI and get set up in just one command:\n\n<p align=\"center\">\n  <img width=\"500\" style=\"border-radius: 10px; filter: drop-shadow(0px 2px 5px #000);;\" alt=\"Screenshot from terminal\" src=\"https://pixijs.io/create-pixi/img/demo.gif\">\n</p>\n\n```\nnpm create pixi.js@latest\n```\nor to add it to an existing project:\n\n```\nnpm install pixi.js\n```\n\n### Usage\n```typescript\nimport { Application, Assets, Sprite } from 'pixi.js';\n\n(async () =>\n{\n    // Create a new application\n    const app = new Application();\n\n    // Initialize the application\n    await app.init({ background: '#1099bb', resizeTo: window });\n\n    // Append the application canvas to the document body\n    document.body.appendChild(app.canvas);\n\n    // Load the bunny texture\n    const texture = await Assets.load('https://pixijs.com/assets/bunny.png');\n\n    // Create a bunny Sprite\n    const bunny = new Sprite(texture);\n\n    // Center the sprite's anchor point\n    bunny.anchor.set(0.5);\n\n    // Move the sprite to the center of the screen\n    bunny.x = app.screen.width / 2;\n    bunny.y = app.screen.height / 2;\n\n    app.stage.addChild(bunny);\n\n    // Listen for animate update\n    app.ticker.add((time) =>\n    {\n        // Just for fun, let's rotate mr rabbit a little.\n        // * Delta is 1 if running at 100% performance *\n        // * Creates frame-independent transformation *\n        bunny.rotation += 0.1 * time.deltaTime;\n    });\n})();\n```\n### Contribute\n\nWant to be part of the PixiJS project? Great! All are welcome! We will get there quicker\ntogether :) Whether you find a bug, have a great feature request, or you fancy owning a task\nfrom the road map above, feel free to get in touch.\n\nMake sure to read the [Contributing Guide](.github/CONTRIBUTING.md)\nbefore submitting changes.\n\n### License\n\nThis content is released under the [MIT License](http://opensource.org/licenses/MIT).\n\n### Change Log\n[Releases](https://github.com/pixijs/pixijs/releases)\n\n### Support\nWe're passionate about making PixiJS the best graphics library possible. Our dedication comes from our love for the project and community. If you'd like to support our efforts, please consider contributing to our open collective.\n<div>\n  <a href=\"https://opencollective.com/pixijs\" target=\"_blank\">\n    <img src=\"https://opencollective.com/pixijs/donate/button@2x.png?color=blue\" width=200 />\n  </a>\n</div>\n"
        },
        {
          "name": "dts.config.js",
          "type": "blob",
          "size": 0.52,
          "content": "const libraries = {\n    inlinedLibraries: [\n        '@pixi/colord',\n        'earcut',\n        'eventemitter3',\n    ],\n};\n\nconst output = {\n    inlineDeclareGlobals: true,\n    exportReferencedTypes: false,\n    umdModuleName: 'PIXI',\n};\n\nconst config = {\n    compilationOptions: {\n        preferredConfigPath: './tsconfig.json',\n    },\n    entries: [\n        {\n            filePath: './lib/index.d.ts',\n            outFile: './dist/pixi.js.d.ts',\n            libraries,\n            output,\n        },\n    ],\n\n};\n\nmodule.exports = config;\n"
        },
        {
          "name": "eslint.config.mjs",
          "type": "blob",
          "size": 4.31,
          "content": "import pluginJest from 'eslint-plugin-jest';\nimport jsdoc from 'eslint-plugin-jsdoc';\nimport noMixed from 'eslint-plugin-no-mixed-operators';\nimport tseslint from 'typescript-eslint';\nimport config from '@pixi/eslint-config';\n\nexport default tseslint.config(\n    ...config,\n    {\n        ignores: ['.s3_uploads', 'out', 'docs', 'dist', 'lib', 'transcoders', 'node_modules', 'src/*/**/index.ts'],\n    },\n    {\n        files: ['**/*'],\n        plugins: {\n            jsdoc,\n            'no-mixed-operators': noMixed,\n        },\n        settings: {\n            jsdoc: {\n                tagNamePreference: {\n                    method: 'method',\n                    function: 'function',\n                    extends: 'extends',\n                    typeParam: 'typeParam',\n                    api: 'api',\n                },\n            },\n        },\n        rules: {\n            'no-mixed-operators': 'off',\n            'no-mixed-operators/no-mixed-operators': 1,\n\n            'jsdoc/multiline-blocks': [1, { noMultilineBlocks: true, minimumLengthForMultiline: 115 }],\n            'jsdoc/check-access': 1,\n            'jsdoc/check-alignment': 1,\n            'jsdoc/check-param-names': 1,\n            'jsdoc/check-property-names': 1,\n            'jsdoc/check-tag-names': 1,\n            'jsdoc/check-types': 1,\n            'jsdoc/check-values': 1,\n            'jsdoc/empty-tags': 1,\n            'jsdoc/implements-on-classes': 1,\n            'jsdoc/tag-lines': 1,\n            'jsdoc/no-multi-asterisks': [1, { allowWhitespace: true }],\n            'jsdoc/require-param': 1,\n            'jsdoc/require-param-description': 0,\n            'jsdoc/require-param-name': 1,\n            'jsdoc/require-param-type': ['warn', { contexts: ['TSMethodSignature'] }],\n            'jsdoc/require-property': 1,\n            'jsdoc/require-property-description': 1,\n            'jsdoc/require-property-name': 1,\n            'jsdoc/require-property-type': 1,\n            'jsdoc/require-returns-description': 1,\n            'jsdoc/require-hyphen-before-param-description': 1,\n            'jsdoc/valid-types': 1,\n        },\n    },\n    {\n        files: ['**/*.{ts,tsx,mts,cts}'],\n        rules: {\n            '@typescript-eslint/triple-slash-reference': [1, { path: 'always' }],\n            '@typescript-eslint/prefer-readonly': 'error',\n            '@typescript-eslint/explicit-member-accessibility': [\n                'error',\n                {\n                    accessibility: 'explicit',\n                    overrides: {\n                        accessors: 'off',\n                        constructors: 'no-public',\n                        methods: 'explicit',\n                        properties: 'explicit',\n                        parameterProperties: 'explicit',\n                    },\n                },\n            ],\n            '@typescript-eslint/naming-convention': [\n                'error',\n                {\n                    selector: 'memberLike',\n                    modifiers: ['private'],\n                    format: ['camelCase'],\n                    leadingUnderscore: 'require',\n                },\n            ],\n            '@typescript-eslint/no-unsafe-declaration-merging': 0,\n            '@typescript-eslint/no-duplicate-enum-values': 0,\n        },\n    },\n    {\n        // update this to match your test files\n        files: ['**/*.test.ts'],\n        plugins: { jest: pluginJest },\n        languageOptions: {\n            globals: pluginJest.environments.globals.globals,\n        },\n        rules: {\n            ...pluginJest.configs['flat/recommended'].rules,\n            '@typescript-eslint/explicit-member-accessibility': 0,\n            '@typescript-eslint/no-unused-expressions': 0,\n            '@typescript-eslint/dot-notation': [\n                0,\n                {\n                    allowPrivateClassPropertyAccess: true,\n                    allowProtectedClassPropertyAccess: true,\n                    allowIndexSignaturePropertyAccess: true,\n                },\n            ],\n            'dot-notation': 0,\n            'jest/no-conditional-expect': 'off',\n            'jest/no-standalone-expect': 'off',\n            'jest/expect-expect': [\n                'error',\n                {\n                    assertFunctionNames: ['expect', 'check32BitColorMatches', 'assertRemovedFromParent'],\n                    additionalTestBlockFunctions: [''],\n                },\n            ],\n        },\n    },\n);\n"
        },
        {
          "name": "jest.config.js",
          "type": "blob",
          "size": 1.22,
          "content": "module.exports = {\n    testPathIgnorePatterns: ['/node_modules/', '/dist/', '/lib/'],\n    preset: 'ts-jest/presets/js-with-ts',\n    runner: '@pixi/jest-electron/runner',\n    testEnvironment: '@pixi/jest-electron/environment',\n    setupFilesAfterEnv: [\n        'jest-extended/all',\n    ],\n    globalSetup: '<rootDir>/scripts/jest/jest-global-setup.ts',\n    globalTeardown: '<rootDir>/scripts/jest/jest-global-teardown.ts',\n    transform: {\n        '\\\\.worker.ts$': '@pixi/webworker-plugins/lib/jest-transform',\n        '\\\\.vert$': 'jest-raw-loader',\n        '\\\\.frag$': 'jest-raw-loader',\n        '\\\\.wgsl$': 'jest-raw-loader',\n    },\n    moduleNameMapper: {\n        '^worker:(.*)$': '$1',\n        '^~/(.*)$': '<rootDir>/src/$1',\n        '^@test-utils$': '<rootDir>/tests/utils/index.ts'\n    },\n    testMatch: ['**/?(*.)+(test)\\\\.ts'],\n    snapshotResolver: '<rootDir>/scripts/jest/jest-snapshot-resolver.js',\n    globals: {\n        'ts-jest': {\n            tsconfig: {\n                module: 'ESNext',\n                esModuleInterop: true,\n            },\n            diagnostics: false,\n        },\n    },\n    collectCoverageFrom: [\n        '<rootDir>/src/**/*.ts',\n    ],\n    coverageDirectory: '<rootDir>/dist/coverage',\n    testTimeout: 10000\n};\n"
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 1164.81,
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 11.46,
          "content": "{\n  \"name\": \"pixi.js\",\n  \"version\": \"8.6.6\",\n  \"author\": \"PixiJS Team\",\n  \"homepage\": \"http://pixijs.com/\",\n  \"bugs\": \"https://github.com/pixijs/pixijs/issues\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/pixijs/pixijs.git\"\n  },\n  \"main\": \"lib/index.js\",\n  \"module\": \"lib/index.mjs\",\n  \"types\": \"lib/index.d.ts\",\n  \"files\": [\n    \"lib\",\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"prepare\": \"husky install\",\n    \"start\": \"run-s watch\",\n    \"clean\": \"run-s clean:*\",\n    \"clean:build\": \"rimraf \\\"{lib,dist,out}\\\" --glob\",\n    \"clean:uploads\": \"rimraf .pr_uploads .s3_uploads --glob\",\n    \"prebuild\": \"npm run clean\",\n    \"build\": \"run-s build:pkg build:rollup build:tsc build:dts build:dts-bundle\",\n    \"build:rollup\": \"npx rollup -c --failAfterWarnings\",\n    \"build:dts-bundle\": \"dts-bundle-generator --config dts.config.js\",\n    \"build:tsc\": \"tsc -p tsconfig.types.json\",\n    \"build:tsc:silent\": \"tsc-silent -p tsconfig.types.json --suppress @\",\n    \"build:index\": \"ts-node --transpile-only ./scripts/index/index.ts --write\",\n    \"build:dts\": \"ts-node --transpile-only ./scripts/types/fixTypes.ts && copyfiles -u 1 \\\"src/**/*.d.ts\\\" lib/\",\n    \"build:pkg\": \"ts-node ./scripts/utils/exports.ts\",\n    \"dist\": \"run-s build docs && copyfiles -u 1 \\\"dist/**/*\\\" .s3_uploads/\",\n    \"watch\": \"nodemon --watch \\\"./src/*\\\" --exec \\\"npm run watch:build\\\" -e ts,js,vert,frag,wgsl,d.ts --ignore \\\"index.ts\\\"\",\n    \"watch:lib\": \"cross-env LIB_ONLY=1 nodemon --watch \\\"./src/*\\\" --exec \\\"npm run watch:build\\\" -e ts,js,vert,frag,wgsl,d.ts --ignore \\\"index.ts\\\"\",\n    \"watch:build\": \"run-s build:tsc:silent build:index build:pkg build:pkg build:rollup build:dts\",\n    \"test\": \"run-s test:unit test:scene\",\n    \"test:unit\": \"npx jest --silent --testPathIgnorePatterns=tests/visual\",\n    \"test:debug\": \"cross-env DEBUG_MODE=1 npx jest --testPathIgnorePatterns=tests/visual\",\n    \"test:server\": \"npx http-server -p 8080 -c-1\",\n    \"test:scene\": \"npx jest --silent --testPathPattern=tests/visual\",\n    \"test:scene:debug\": \"cross-env DEBUG_MODE=1 npx jest --testPathPattern=tests/visual\",\n    \"test:types\": \"tsc --noEmit\",\n    \"test:index\": \"ts-node --transpile-only ./scripts/index/index.ts --check\",\n    \"docs\": \"mkdirp out && npm run docs:webdoc\",\n    \"docs:webdoc\": \"webdoc -R README.md\",\n    \"docs:watch\": \"nodemon --watch \\\"./src/*\\\" --exec \\\"npm run docs\\\" -e ts\",\n    \"lint\": \"eslint ./ --cache --max-warnings 0\",\n    \"lint:fix\": \"npm run lint -- --fix\",\n    \"codesandbox-ci\": \"run-s build\",\n    \"prerelease\": \"run-s clean:build test dist\",\n    \"release\": \"ts-node ./scripts/release.ts\",\n    \"publish-ci\": \"npm publish\",\n    \"prune\": \"knip --exclude enumMembers --no-gitignore\",\n    \"ci:lint\": \"run-s lint test:types test:index prune\"\n  },\n  \"lint-staged\": {\n    \"!(src/**/index).{ts,js,mjs}\": \"npm run lint:fix --\"\n  },\n  \"dependencies\": {\n    \"@pixi/colord\": \"^2.9.6\",\n    \"@types/css-font-loading-module\": \"^0.0.12\",\n    \"@types/earcut\": \"^2.1.4\",\n    \"@webgpu/types\": \"^0.1.40\",\n    \"@xmldom/xmldom\": \"^0.8.10\",\n    \"earcut\": \"^2.2.4\",\n    \"eventemitter3\": \"^5.0.1\",\n    \"ismobilejs\": \"^1.1.1\",\n    \"parse-svg-path\": \"^0.1.2\"\n  },\n  \"devDependencies\": {\n    \"@pixi/eslint-config\": \"^6.0.0\",\n    \"@pixi/jest-electron\": \"^26.1.0\",\n    \"@pixi/webdoc-template\": \"^2.2.3\",\n    \"@pixi/webworker-plugins\": \"^0.3.0\",\n    \"@rollup/plugin-alias\": \"^5.1.1\",\n    \"@rollup/plugin-commonjs\": \"^25.0.0\",\n    \"@rollup/plugin-json\": \"^6.0.0\",\n    \"@rollup/plugin-node-resolve\": \"^15.0.0\",\n    \"@types/fs-extra\": \"^11.0.1\",\n    \"@types/glob\": \"^8.1.0\",\n    \"@types/inquirer\": \"^8.0.0\",\n    \"@types/jest\": \"^26.0.0\",\n    \"@types/pixelmatch\": \"^5.2.4\",\n    \"@types/pngjs\": \"^6.0.2\",\n    \"@types/semver\": \"^7.5.8\",\n    \"@webdoc/cli\": \"^2.2.0\",\n    \"@xmldom/xmldom\": \"^0.8.10\",\n    \"copyfiles\": \"^2.4.1\",\n    \"cross-env\": \"^7.0.3\",\n    \"dts-bundle-generator\": \"^9.5.1\",\n    \"esbuild\": \"^0.19.0\",\n    \"eslint\": \"^9.16.0\",\n    \"eslint-plugin-jest\": \"^28.9.0\",\n    \"eslint-plugin-jsdoc\": \"^50.6.0\",\n    \"eslint-plugin-no-mixed-operators\": \"^1.1.1\",\n    \"fs-extra\": \"^11.2.0\",\n    \"gifuct-js\": \"^2.1.2\",\n    \"glob\": \"^8.1.0\",\n    \"http-server\": \"^14.1.1\",\n    \"husky\": \"^8.0.3\",\n    \"inquirer\": \"^8.2.6\",\n    \"jest\": \"^26.0.0\",\n    \"jest-extended\": \"^1.2.1\",\n    \"jest-raw-loader\": \"^1.0.1\",\n    \"knip\": \"^5.25.2\",\n    \"lint-staged\": \"^15.2.7\",\n    \"mkdirp\": \"^3.0.1\",\n    \"nodemon\": \"^3.0.2\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"pixelmatch\": \"^5.3.0\",\n    \"pngjs\": \"^7.0.0\",\n    \"rimraf\": \"^5.0.0\",\n    \"rollup\": \"^3.0.0\",\n    \"rollup-plugin-esbuild\": \"^6.0.0\",\n    \"rollup-plugin-external-globals\": \"^0.9.1\",\n    \"rollup-plugin-jscc\": \"^2.0.0\",\n    \"rollup-plugin-sourcemaps\": \"^0.4.2\",\n    \"rollup-plugin-string\": \"^3.0.0\",\n    \"semver\": \"^7.6.3\",\n    \"tree-kill\": \"^1.2.2\",\n    \"ts-jest\": \"^26.0.0\",\n    \"ts-node\": \"^9.0.0\",\n    \"tsc-silent\": \"^1.2.2\",\n    \"typescript\": \"^5.0.4\",\n    \"typescript-eslint\": \"^8.17.0\"\n  },\n  \"bundles\": [\n    {\n      \"src\": \"src/bundle.browser.ts\",\n      \"target\": \"dist/pixi.js\",\n      \"module\": \"dist/pixi.mjs\",\n      \"plugin\": false\n    },\n    {\n      \"src\": \"src/bundle.math-extras.ts\",\n      \"target\": \"dist/packages/math-extras.js\",\n      \"module\": \"dist/packages/math-extras.mjs\",\n      \"plugin\": [\n        \"/maths/\"\n      ]\n    },\n    {\n      \"src\": \"src/bundle.unsafe-eval.ts\",\n      \"target\": \"dist/packages/unsafe-eval.js\",\n      \"module\": \"dist/packages/unsafe-eval.mjs\",\n      \"plugin\": [\n        \"/rendering/\"\n      ]\n    },\n    {\n      \"src\": \"src/bundle.advanced-blend-modes.ts\",\n      \"target\": \"dist/packages/advanced-blend-modes.js\",\n      \"module\": \"dist/packages/advanced-blend-modes.mjs\",\n      \"plugin\": [\n        \"/rendering/\",\n        \"/extensions/\",\n        \"/filters/\"\n      ]\n    },\n    {\n      \"src\": \"src/bundle.gif.ts\",\n      \"target\": \"dist/packages/gif.js\",\n      \"module\": \"dist/packages/gif.mjs\",\n      \"plugin\": [\n        \"/utils/\",\n        \"/assets/\",\n        \"/ticker/\",\n        \"/environment/\",\n        \"/scene/\",\n        \"/rendering/\",\n        \"/extensions/\"\n      ]\n    },\n    {\n      \"src\": \"src/bundle.webworker.ts\",\n      \"target\": \"dist/webworker.js\",\n      \"module\": \"dist/webworker.mjs\",\n      \"plugin\": false\n    }\n  ],\n  \"sideEffects\": [\n    \"./lib/environment-browser/browserAll.*\",\n    \"./lib/environment-webworker/webworkerAll.*\",\n    \"./lib/index.*\",\n    \"./lib/rendering/init.*\",\n    \"./lib/spritesheet/init.*\",\n    \"./lib/rendering/renderers/shared/texture/utils/textureFrom.*\",\n    \"./lib/accessibility/init.*\",\n    \"./lib/advanced-blend-modes/init.*\",\n    \"./lib/gif/init.*\",\n    \"./lib/app/init.*\",\n    \"./lib/compressed-textures/dds/init.*\",\n    \"./lib/compressed-textures/ktx/init.*\",\n    \"./lib/compressed-textures/ktx2/init.*\",\n    \"./lib/compressed-textures/basis/init.*\",\n    \"./lib/events/init.*\",\n    \"./lib/filters/init.*\",\n    \"./lib/math-extras/init.*\",\n    \"./lib/scene/sprite-tiling/init.*\",\n    \"./lib/scene/text/init.*\",\n    \"./lib/scene/text-bitmap/init.*\",\n    \"./lib/scene/text-html/init.*\",\n    \"./lib/scene/graphics/init.*\",\n    \"./lib/scene/mesh/init.*\",\n    \"./lib/prepare/init.*\",\n    \"./lib/unsafe-eval/init.*\",\n    \"./lib/scene/sprite-nine-slice/init.*\",\n    \"./lib/scene/particle-container/init.*\"\n  ],\n  \"exports\": {\n    \".\": {\n      \"import\": {\n        \"types\": \"./lib/index.d.ts\",\n        \"default\": \"./lib/index.mjs\"\n      },\n      \"require\": {\n        \"types\": \"./lib/index.d.ts\",\n        \"default\": \"./lib/index.js\"\n      }\n    },\n    \"./browser\": {\n      \"import\": {\n        \"default\": \"./lib/environment-browser/browserAll.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/environment-browser/browserAll.js\"\n      }\n    },\n    \"./webworker\": {\n      \"import\": {\n        \"default\": \"./lib/environment-webworker/webworkerAll.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/environment-webworker/webworkerAll.js\"\n      }\n    },\n    \"./accessibility\": {\n      \"import\": {\n        \"default\": \"./lib/accessibility/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/accessibility/init.js\"\n      }\n    },\n    \"./advanced-blend-modes\": {\n      \"import\": {\n        \"default\": \"./lib/advanced-blend-modes/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/advanced-blend-modes/init.js\"\n      }\n    },\n    \"./gif\": {\n      \"import\": {\n        \"default\": \"./lib/gif/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/gif/init.js\"\n      }\n    },\n    \"./app\": {\n      \"import\": {\n        \"default\": \"./lib/app/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/app/init.js\"\n      }\n    },\n    \"./dds\": {\n      \"import\": {\n        \"default\": \"./lib/compressed-textures/dds/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/compressed-textures/dds/init.js\"\n      }\n    },\n    \"./ktx\": {\n      \"import\": {\n        \"default\": \"./lib/compressed-textures/ktx/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/compressed-textures/ktx/init.js\"\n      }\n    },\n    \"./ktx2\": {\n      \"import\": {\n        \"default\": \"./lib/compressed-textures/ktx2/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/compressed-textures/ktx2/init.js\"\n      }\n    },\n    \"./basis\": {\n      \"import\": {\n        \"default\": \"./lib/compressed-textures/basis/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/compressed-textures/basis/init.js\"\n      }\n    },\n    \"./events\": {\n      \"import\": {\n        \"default\": \"./lib/events/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/events/init.js\"\n      }\n    },\n    \"./filters\": {\n      \"import\": {\n        \"default\": \"./lib/filters/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/filters/init.js\"\n      }\n    },\n    \"./math-extras\": {\n      \"import\": {\n        \"default\": \"./lib/math-extras/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/math-extras/init.js\"\n      }\n    },\n    \"./sprite-tiling\": {\n      \"import\": {\n        \"default\": \"./lib/scene/sprite-tiling/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/scene/sprite-tiling/init.js\"\n      }\n    },\n    \"./text\": {\n      \"import\": {\n        \"default\": \"./lib/scene/text/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/scene/text/init.js\"\n      }\n    },\n    \"./text-bitmap\": {\n      \"import\": {\n        \"default\": \"./lib/scene/text-bitmap/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/scene/text-bitmap/init.js\"\n      }\n    },\n    \"./text-html\": {\n      \"import\": {\n        \"default\": \"./lib/scene/text-html/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/scene/text-html/init.js\"\n      }\n    },\n    \"./graphics\": {\n      \"import\": {\n        \"default\": \"./lib/scene/graphics/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/scene/graphics/init.js\"\n      }\n    },\n    \"./mesh\": {\n      \"import\": {\n        \"default\": \"./lib/scene/mesh/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/scene/mesh/init.js\"\n      }\n    },\n    \"./prepare\": {\n      \"import\": {\n        \"default\": \"./lib/prepare/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/prepare/init.js\"\n      }\n    },\n    \"./unsafe-eval\": {\n      \"import\": {\n        \"default\": \"./lib/unsafe-eval/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/unsafe-eval/init.js\"\n      }\n    },\n    \"./sprite-nine-slice\": {\n      \"import\": {\n        \"default\": \"./lib/scene/sprite-nine-slice/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/scene/sprite-nine-slice/init.js\"\n      }\n    },\n    \"./particle-container\": {\n      \"import\": {\n        \"default\": \"./lib/scene/particle-container/init.mjs\"\n      },\n      \"require\": {\n        \"default\": \"./lib/scene/particle-container/init.js\"\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "rollup.config.mjs",
          "type": "blob",
          "size": 7.1,
          "content": "import path from 'path';\nimport esbuild from 'rollup-plugin-esbuild';\nimport externalGlobals from 'rollup-plugin-external-globals';\nimport jscc from 'rollup-plugin-jscc';\nimport sourcemaps from 'rollup-plugin-sourcemaps';\nimport { string } from 'rollup-plugin-string';\nimport { fileURLToPath } from 'url';\nimport webworker from '@pixi/webworker-plugins/rollup-plugin';\nimport repo from './package.json' assert { type: 'json' };\nimport alias from '@rollup/plugin-alias';\nimport commonjs from '@rollup/plugin-commonjs';\nimport json from '@rollup/plugin-json';\nimport resolve from '@rollup/plugin-node-resolve';\n\nconst bundleTarget = 'es2017';\nconst moduleTarget = 'es2020';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n/**\n * Convert a development file name to minified.\n * @param {string} name\n */\nfunction prodName(name)\n{\n    return name.replace(/\\.(m)?js$/, '.min.$1js');\n}\n\n/**\n * Escapes the `RegExp` special characters.\n * @param {string} str\n */\nfunction escapeRegExp(str)\n{\n    return str.replace(/[$()*+.?[\\\\\\]^{|}]/g, '\\\\$&');\n}\n\n/**\n * Convert the name of a package to a `RegExp` that matches the package's export names.\n * @param {string} packageName\n */\nfunction convertPackageNameToRegExp(packageName)\n{\n    return new RegExp(`^${escapeRegExp(packageName)}(/.+)?$`);\n}\n\nasync function main()\n{\n    const commonPlugins = [\n        sourcemaps(),\n        resolve({\n            browser: true,\n            preferBuiltins: false,\n        }),\n        commonjs(),\n        json(),\n        string({\n            include: [\n                '**/*.frag',\n                '**/*.vert',\n                '**/*.glsl',\n                '**/*.wgsl',\n            ],\n        }),\n        // We need to satisfy our tsconfig alias with rollup\n        // even though we'll be excluding __tests___\n        alias({\n            entries: [\n                { find: /^~\\/(.*)$/, replacement: path.join(__dirname, 'src/$1.ts') },\n                { find: '@test-utils', replacement: path.join(__dirname, 'tests/utils/index.ts') }\n            ]\n        })\n    ];\n\n    const plugins = [\n        webworker(),\n        jscc({ values: { _VERSION: repo.version, _DEBUG: true } }),\n        esbuild({ target: moduleTarget, exclude: ['**/__tests__/**'] }),\n        ...commonPlugins\n    ];\n\n    const bundlePlugins = [\n        webworker(),\n        jscc({ values: { _VERSION: repo.version, _DEBUG: true } }),\n        esbuild({ target: bundleTarget }),\n        ...commonPlugins\n    ];\n\n    const bundlePluginsProd = [\n        webworker(),\n        jscc({ values: { _VERSION: repo.version, _DEBUG: false } }),\n        esbuild({ target: bundleTarget, minify: true }),\n        ...commonPlugins,\n    ];\n\n    const results = [];\n\n    const {\n        bundles,\n        dependencies = {},\n        peerDependencies = {},\n        sideEffects\n    } = repo;\n\n    // Check for bundle folder\n    const external = Object.keys(dependencies)\n        .concat(Object.keys(peerDependencies))\n        .map(convertPackageNameToRegExp);\n    const input = [\n        ...sideEffects.map((name) => path.join(process.cwd(), name.replace('/lib/', '/src/').replace('.*', '.ts'))),\n    ];\n\n    results.push({\n        input,\n        output: [\n            {\n                dir: path.join(process.cwd(), 'lib'),\n                entryFileNames: '[name].js',\n                format: 'cjs',\n                freeze: false,\n                sourcemap: true,\n                preserveModules: true,\n                preserveModulesRoot: path.join(process.cwd(), 'src'),\n                exports: 'named',\n            },\n            {\n                dir: path.join(process.cwd(), 'lib'),\n                entryFileNames: '[name].mjs',\n                format: 'esm',\n                freeze: false,\n                sourcemap: true,\n                preserveModules: true,\n                preserveModulesRoot: path.join(process.cwd(), 'src'),\n                exports: 'named',\n            },\n        ],\n        treeshake: false,\n        external,\n        plugins,\n    });\n\n    const banner = [\n        `/*!`,\n        ` * PixiJS - v${repo.version}`,\n        ` * Compiled ${(new Date()).toUTCString().replace(/GMT/g, 'UTC')}`,\n        ` *`,\n        ` * PixiJS is licensed under the MIT License.`,\n        ` * http://www.opensource.org/licenses/mit-license`,\n        ` */`,\n    ].join('\\n');\n\n    // The package.json file has a bundle field\n    // we'll use this to generate the bundle file\n    // this will package all dependencies\n    if (bundles && !process.env.LIB_ONLY)\n    {\n        bundles.forEach((bundle) =>\n        {\n            const file = path.join(process.cwd(), bundle.target);\n            const moduleFile = bundle.module ? path.join(process.cwd(), bundle.module) : '';\n            const nsBanner = bundle.plugin ? `${banner}\\nthis.PIXI = this.PIXI || {};` : banner;\n            const name = bundle.plugin ? bundle.target.split('/').at(-1).replace(/[^a-z]+/g, '_') : 'PIXI';\n            const footer = bundle.plugin ? `Object.assign(this.PIXI, ${name});` : '';\n\n            // if a bundle is a plugin then we need to exclude its imports from the bundle\n            // so they ca nbe added to the global scope\n            const external = bundle.plugin ? (id) => bundle.plugin.some((plugin) => id.includes(plugin)) : undefined;\n            // eslint-disable-next-line consistent-return\n            const externalPlugin = bundle.plugin ? externalGlobals((id) => { if (external(id)) return 'PIXI'; }) : undefined;\n\n            results.push({\n                input: path.join(process.cwd(), bundle.src),\n                external,\n                output: [\n                    {\n                        name,\n                        banner: nsBanner,\n                        footer,\n                        file,\n                        format: 'iife',\n                        freeze: false,\n                        sourcemap: true,\n                    },\n                    !bundle.plugin\n                    && {\n                        banner: nsBanner,\n                        file: moduleFile,\n                        format: 'esm',\n                        freeze: false,\n                        sourcemap: true,\n                    }\n                ],\n                treeshake: false,\n                plugins: [...bundlePlugins, externalPlugin],\n            }, {\n                input: path.join(process.cwd(), bundle.src),\n                external,\n                output: [\n                    {\n                        name,\n                        banner: nsBanner,\n                        footer,\n                        file: prodName(file),\n                        format: 'iife',\n                        freeze: false,\n                        sourcemap: true,\n                    },\n                    !bundle.plugin\n                    && {\n                        banner: nsBanner,\n                        file: prodName(moduleFile),\n                        format: 'esm',\n                        freeze: false,\n                        sourcemap: true,\n                    }\n                ],\n                treeshake: false,\n                plugins: [...bundlePluginsProd, externalPlugin]\n            });\n        });\n    }\n\n    return results;\n}\n\nexport default main();\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "transcoders",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 1.04,
          "content": "{\n    \"compilerOptions\": {\n        \"target\": \"es2020\",\n        \"lib\": [\"ESNext\", \"DOM\", \"WebWorker\"],\n        \"module\": \"ESNext\",\n        \"allowJs\": false,\n        \"removeComments\": false,\n        \"strict\": true,\n        \"noImplicitAny\": true,\n        \"noUnusedLocals\": true,\n        \"noUnusedParameters\": true,\n        \"noImplicitReturns\": true,\n        \"strictNullChecks\": false,\n        \"allowSyntheticDefaultImports\": true,\n        \"moduleResolution\": \"node\",\n        \"resolveJsonModule\": true,\n        \"downlevelIteration\": true,\n        \"skipDefaultLibCheck\": true,\n        \"types\": [\"node\", \"css-font-loading-module\", \"earcut\", \"@webgpu/types\"],\n        \"baseUrl\": \".\",\n        \"paths\": {\n            \"~/*\": [\"./src/*\"],\n            \"@test-utils\": [\"./tests/utils/index.ts\"]\n        }\n    },\n    \"exclude\": [\n        \"node_modules\",\n        \"**/dist/**\",\n        \"**/lib/**\",\n        \"**/out/**\"\n    ],\n    \"ts-node\": {\n        \"files\": true,\n        \"compilerOptions\": {\n            \"esModuleInterop\": true,\n            \"module\": \"commonjs\"\n        }\n    }\n}\n"
        },
        {
          "name": "tsconfig.types.json",
          "type": "blob",
          "size": 0.3,
          "content": "{\n    \"extends\": \"./tsconfig.json\",\n    \"compilerOptions\": {\n        \"declaration\": true,\n        \"emitDeclarationOnly\": true,\n        \"outDir\": \"lib\"\n    },\n    \"include\": [\n        \"./src\",\n        \"./types\"\n    ],\n    \"exclude\": [\n        \"./src/bundle.*\",\n        \"**/__tests__\",\n        \"./tests\"\n    ]\n}\n"
        },
        {
          "name": "types",
          "type": "tree",
          "content": null
        },
        {
          "name": "webdoc.conf.json",
          "type": "blob",
          "size": 1.33,
          "content": "{\n    \"$schema\": \"https://webdoc.nyc3.digitaloceanspaces.com/schemas/v1/webdoc.conf.schema.json\",\n    \"source\": {\n        \"include\": \"./src/**/*.ts\",\n        \"excludePattern\": [\"(node_modules|lib|tests|__tests__)\"]\n    },\n    \"plugins\": [\"@webdoc/plugin-markdown\", \"@webdoc/plugin-format\"],\n    \"templates\": {\n        \"applicationName\": \"PixiJS\",\n        \"footer\": \"Made with ‚ô• by Goodboy Digital (goodboydigital.com)\",\n        \"copyright\": \"PixiJS Copyright ¬© 2013-2023 Mat Groves.\",\n        \"readme\": \"./README.md\",\n        \"outputSourceFiles\": true,\n        \"meta\": {\n            \"title\": \"PixiJS API Documentation\",\n            \"description\": \"Documentation for PixiJS library\",\n            \"keyword\": \"docs, documentation, pixi, pixijs, renderer, html5, javascript, jsdoc\"\n        }\n    },\n    \"plugin/markdown\"  : {\n        \"parser\"        : \"gfm\",\n        \"hardwrap\"      : false\n    },\n    \"integrations\": {\n        \"analytics\": {\n            \"provider\": \"google-analytics\",\n            \"trackingID\": \"UA-103772589-5\"\n        }\n    },\n    \"opts\": {\n        \"destination\": \".s3_uploads/docs\",\n        \"export\": \".s3_uploads/docs/webdoc.api.json\",\n        \"template\"      : \"@pixi/webdoc-template\"\n    },\n    \"template\": {\n        \"outputSourceFiles\": true,\n        \"readme\": \"./README.md\",\n        \"repository\": \"https://github.com/pixijs/pixijs/\"\n    }\n}\n"
        }
      ]
    }
  ]
}