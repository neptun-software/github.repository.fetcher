{
  "metadata": {
    "timestamp": 1736711302776,
    "page": 57,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "paunin/PostDock",
      "stars": 1115,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0029296875,
          "content": "tmp"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 8.265625,
          "content": "##########################################################################\n##                         AUTO-GENERATED FILE                          ##\n##########################################################################\n\nsudo: required\nservices:\n  - docker\njobs:\n  include:\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.6_repmgr-4.0_pgpool-3.7_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.6_repmgr-4.0_pgpool-3.7_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.6_repmgr-4.0_pgpool-3.7_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.6_repmgr-4.0_pgpool-3.7_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.6_repmgr-4.0_pgpool-3.6_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.6_repmgr-4.0_pgpool-3.6_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.6_repmgr-4.0_pgpool-3.6_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.6_repmgr-4.0_pgpool-3.6_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.6_repmgr-4.0_pgpool-3.3_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.6_repmgr-4.0_pgpool-3.3_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.6_repmgr-4.0_pgpool-3.3_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.6_repmgr-4.0_pgpool-3.3_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.6_repmgr-3.2_pgpool-3.7_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.6_repmgr-3.2_pgpool-3.7_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.6_repmgr-3.2_pgpool-3.7_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.6_repmgr-3.2_pgpool-3.7_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.6_repmgr-3.2_pgpool-3.6_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.6_repmgr-3.2_pgpool-3.6_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.6_repmgr-3.2_pgpool-3.6_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.6_repmgr-3.2_pgpool-3.6_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.6_repmgr-3.2_pgpool-3.3_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.6_repmgr-3.2_pgpool-3.3_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.6_repmgr-3.2_pgpool-3.3_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.6_repmgr-3.2_pgpool-3.3_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.5_repmgr-4.0_pgpool-3.7_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.5_repmgr-4.0_pgpool-3.7_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.5_repmgr-4.0_pgpool-3.7_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.5_repmgr-4.0_pgpool-3.7_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.5_repmgr-4.0_pgpool-3.6_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.5_repmgr-4.0_pgpool-3.6_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.5_repmgr-4.0_pgpool-3.6_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.5_repmgr-4.0_pgpool-3.6_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.5_repmgr-4.0_pgpool-3.3_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.5_repmgr-4.0_pgpool-3.3_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.5_repmgr-4.0_pgpool-3.3_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.5_repmgr-4.0_pgpool-3.3_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.5_repmgr-3.2_pgpool-3.7_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.5_repmgr-3.2_pgpool-3.7_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.5_repmgr-3.2_pgpool-3.7_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.5_repmgr-3.2_pgpool-3.7_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.5_repmgr-3.2_pgpool-3.6_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.5_repmgr-3.2_pgpool-3.6_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.5_repmgr-3.2_pgpool-3.6_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.5_repmgr-3.2_pgpool-3.6_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.5_repmgr-3.2_pgpool-3.3_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.5_repmgr-3.2_pgpool-3.3_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-9.5_repmgr-3.2_pgpool-3.3_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-9.5_repmgr-3.2_pgpool-3.3_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-11_repmgr-4.0_pgpool-3.7_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-11_repmgr-4.0_pgpool-3.7_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-11_repmgr-4.0_pgpool-3.7_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-11_repmgr-4.0_pgpool-3.7_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-11_repmgr-4.0_pgpool-3.6_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-11_repmgr-4.0_pgpool-3.6_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-11_repmgr-4.0_pgpool-3.6_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-11_repmgr-4.0_pgpool-3.6_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-11_repmgr-4.0_pgpool-3.3_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-11_repmgr-4.0_pgpool-3.3_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-11_repmgr-4.0_pgpool-3.3_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-11_repmgr-4.0_pgpool-3.3_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-10_repmgr-4.0_pgpool-3.7_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-10_repmgr-4.0_pgpool-3.7_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-10_repmgr-4.0_pgpool-3.7_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-10_repmgr-4.0_pgpool-3.7_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-10_repmgr-4.0_pgpool-3.6_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-10_repmgr-4.0_pgpool-3.6_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-10_repmgr-4.0_pgpool-3.6_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-10_repmgr-4.0_pgpool-3.6_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-10_repmgr-4.0_pgpool-3.3_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-10_repmgr-4.0_pgpool-3.3_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-10_repmgr-4.0_pgpool-3.3_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-10_repmgr-4.0_pgpool-3.3_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-10_repmgr-3.2_pgpool-3.7_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-10_repmgr-3.2_pgpool-3.7_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-10_repmgr-3.2_pgpool-3.7_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-10_repmgr-3.2_pgpool-3.7_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-10_repmgr-3.2_pgpool-3.6_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-10_repmgr-3.2_pgpool-3.6_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-10_repmgr-3.2_pgpool-3.6_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-10_repmgr-3.2_pgpool-3.6_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-10_repmgr-3.2_pgpool-3.3_barman-2.4 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-10_repmgr-3.2_pgpool-3.3_barman-2.4\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=postgres-10_repmgr-3.2_pgpool-3.3_barman-2.3 ./tests/run.sh\n      env:\n        - COMBINATION=postgres-10_repmgr-3.2_pgpool-3.3_barman-2.3\n    - script: NO_COLOURS=1 DEBUG=1 TEST_COMBINATIONS=latest ./tests/run.sh\n      env:\n        - COMBINATION=latest\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2018 Dmitriy Paunin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.4716796875,
          "content": "# PostDock - Postgres + Docker\n\nPostgreSQL cluster with **High Availability** and **Self Healing** features for any cloud and docker environment (Amazon, Google Cloud, Kubernetes, Docker Compose, Docker Swarm, Apache Mesos)\n\n![Formula](https://raw.githubusercontent.com/paunin/PostDock/master/artwork/formula2.png)\n\n[![Build Status](https://travis-ci.org/paunin/PostDock.svg?branch=master)](https://travis-ci.org/paunin/PostDock)\n\n- [Info](#info)\n  * [Features](#features)\n  * [What's in the box](#whats-in-the-box)\n  * [Docker images tags convention](#docker-images-tags-convention)\n    * [Repositories](#repositories)\n- [Start cluster with docker-compose](#start-cluster-with-docker-compose)\n- [Start cluster in Kubernetes](#start-cluster-in-kubernetes)\n- [Adaptive mode](#adaptive-mode)\n- [SSH access](#ssh-access)\n- [Replication slots](#replication-slots)\n- [Configuring the cluster](#configuring-the-cluster)\n  * [Postgres](#postgres)\n  * [Pgpool](#pgpool)\n  * [Barman](#barman)\n  * [Other configurations](#other-configurations)\n- [Extended version of postgres](#extended-version-of-postgres)\n- [Backups and recovery](#backups-and-recovery)\n- [Health-checks](#health-checks)\n- [Useful commands](#useful-commands)\n- [Publications](#publications)\n- [Scenarios](#scenarios)\n- [How to contribute](#how-to-contribute)\n- [FAQ](#faq)\n- [Documentation and manuals](#documentation-and-manuals)\n\n-------\n\n## Info\n### Features\n* High Availability\n* Self Healing and Automated Reconstruction\n* [Split Brain](https://en.wikipedia.org/wiki/Split-brain_(computing)) Tolerance\n* Eventually/Partially Strict/Strict Consistency modes\n* Reads Load Balancing and Connection Pool\n* Incremental backup (with optional zero data loss, [RPO=0](https://en.wikipedia.org/wiki/Recovery_point_objective))\n* Semi-automated Point In Time Recovery Procedure\n* Monitoring exporters for all the components(nodes, balancers, backup)\n\n### What's in the box\n[This project](https://github.com/paunin/postgres-docker-cluster) includes:\n* Dockerfiles for `postgresql` cluster and backup system\n    * [postgresql](./src/Postgres-latest.Dockerfile)\n    * [pgpool](./src/Pgpool-latest.Dockerfile)\n    * [barman](./src/Barman-latest.Dockerfile)\n* Examples of usage(suitable for production environment as architecture has fault protection with auto failover)\n    * example of [docker-compose](./docker-compose/latest.yml) file to start this cluster.\n    * directory [k8s](./k8s) contains information for building this cluster in Kubernetes\n\n### Docker images tags convention\n\nTaking into account that PostDock project itself has versioning schema, all docker images produced by the repository have schema - `postdock/<component>:<postdock_version>-<component><component_version>-<sub_component><sub_component_version>[...]`, where:\n\n* `<postdock_version>` - semantic version without `bug-fix` component (can be `1.1`, `1.2`, ...)\n* `<component>`, `<component_version>` - depends on component:\n    * `postgres`,`postgres-extended` - major and minor version without dot in between(can be `95`, `96`, `10`, `11`, ...)\n    * `pgpool` - major and minor version of component without dot in between(can be `33`, `36`, `37`, ...)\n    * `barman` - major version only (can be `23`, `24`, ...)\n* `<sub_component>`, `<sub_component_version>` - depends on component:\n    * for `postgres` - `repmgr` can be `32`, `40`, ...\n    * for `barman` - `postgres` can be `96`, `10`, `11`, ...\n    * for `pgpool` - `postgres` can be `96`, `10`, `11`, ...\n\nAliases are available **(not recommended to use for production)**:\n\n* `postdock/<component>:latest-<component><component_version>[-<sub_component><sub_component_version>[...]]` - refers to the latest release of the postdock, certain version of the component, certain version of the sub-components(e.g. `postdock/postgres:latest-postgres101-repmgr32`,`postdock/postgres:latest-barman23-postgres101`)\n* `postdock/<component>:latest` - refers to the latest release of the postdock and the latest versions of all the components and sub-components (e.g. `postdock/postgres:latest`)\n* `postdock/<component>:edge` - refers to build of postdock from master with the latest version the component, and all sub-components (e.g. `postdock/postgres:edge`)\n\n#### Repositories\n\nAll available tags (versions and combinations of it) are listed in respective docker-hub repositories:\n\n* [Postgres](https://hub.docker.com/r/postdock/postgres)\n* [Pgpool](https://hub.docker.com/r/postdock/pgpool)\n* [Barman](https://hub.docker.com/r/postdock/barman)\n\n## Start cluster with docker-compose\n\nTo start cluster run it as normal `docker-compose` application `docker-compose -f ./docker-compose/latest.yml up -d pgmaster pgslave1 pgslave2 pgslave3 pgslave4 pgpool backup`\n\nSchema of the example cluster:\n\n```\npgmaster (primary node1)  --|\n|- pgslave1 (node2)       --|\n|  |- pgslave2 (node3)    --|----pgpool (master_slave_mode stream)\n|- pgslave3 (node4)       --|\n   |- pgslave4 (node5)    --|\n```\n\nEach `postgres` node (`pgmaster`, `pgslaveX`) is managed by `repmgr/repmgrd`. It allows to use automatic `failover` and check cluster status.\n\nPlease check comments for each `ENV` variable in [./docker-compose/latest.yml](./docker-compose/latest.yml) file to understand parameter for each cluster node\n\n\n## Start cluster in Kubernetes\n\n### Using Helm (recomended for production)\nYou can install PostDock with [Helm](https://helm.sh/) package manager check the [README.md of the package](./k8s/helm/PostDock/README.md) for more information\n\n### Simple (NOT recomended for production)\nTo make it easier repository contains services' objects under `k8s` dir. Setup `PostgreSQL` cluster following the steps in [the example](./k8s/README.md). It also has information how to check cluster state\n\n## Configuring the cluster\n\nYou can configure any node of the cluster(`postgres.conf`) or pgpool(`pgpool.conf`) with ENV variable `CONFIGS` (format: `variable1:value1[,variable2:value2[,...]]`, you can redefine delimiter and assignment symbols by using variables `CONFIGS_DELIMITER_SYMBOL`, `CONFIGS_ASSIGNMENT_SYMBOL`). Also see the Dockerfiles and [docker-compose/latest.yml](./docker-compose/latest.yml) files in the root of the repository to understand all available and used configurations!\n\n### Postgres\n\nFor the rest - you better **follow** the advise and look into the [src/Postgres-latest.Dockerfile](./src/Postgres-latest.Dockerfile) file - it full of comments :)\n\n### Pgpool\n\nThe most important part to configure in Pgpool (apart of general `CONFIGS`) is backends and users which could access these backends. You can configure backends with ENV variable. You can find good example of setting up pgpool in [docker-compose/latest.yml](./docker-compose/latest.yml) file:\n\n```\nDB_USERS: monkey_user:monkey_pass # in format user:password[,user:password[...]]\nBACKENDS: \"0:pgmaster:5432:1:/var/lib/postgresql/data:ALLOW_TO_FAILOVER,1:pgslave1::::,3:pgslave3::::,2:pgslave2::::\" #,4:pgslaveDOES_NOT_EXIST::::\n            # in format num:host:port:weight:data_directory:flag[,...]\n            # defaults:\n            #   port: 5432\n            #   weight: 1\n            #   data_directory: /var/lib/postgresql/data\n            #   flag: ALLOW_TO_FAILOVER\nREQUIRE_MIN_BACKENDS: 3 # minimal number of backends to start pgpool (some might be unreachable)\n```\n\n### Barman\n\nThe most important part for barman is to setup access variables. Example can be found in [docker-compose/latest.yml](./docker-compose/latest.yml) file:\n\n```\nREPLICATION_USER: replication_user # default is replication_user\nREPLICATION_PASSWORD: replication_pass # default is replication_pass\nREPLICATION_HOST: pgmaster\nPOSTGRES_PASSWORD: monkey_pass\nPOSTGRES_USER: monkey_user\nPOSTGRES_DB: monkey_db\n```\n\n### Other configurations\n\n**See the Dockerfiles and [docker-compose/latest.yml](./docker-compose/latest.yml) files in the root of the repository to understand all available and used configurations!**\n\n\n## Adaptive mode\n\n'Adaptive mode' means that node will be able to decide if instead of acting as a master on it's start or switch to standby role.\nThat possible if you pass `PARTNER_NODES` (comma separated list of nodes in the cluster on the same level).\nSo every time container starts it will check if it was master before and if there is no new master around (from the list `PARTNER_NODES`),\notherwise it will start as a new standby node with `upstream = new master` in the cluster.\n\nKeep in mind: this feature does not work for cascade replication and you should not pass `PARTNER_NODES` to nodes on second level of the cluster.\nInstead of it just make sure that all nodes on the first level are running, so after restart any node from second level will be able to follow initial upstream from the first level.\nThat also can mean - replication from second level potentially can connect to root master... Well not a big deal if you've decided to go with adaptive mode.\nBut nevertheless you are able to play with `NODE_PRIORITY` environment variable and make sure entry point for second level of replication will never be elected as a new root master \n\n\n## SSH access\n\nIf you have need to organize your cluster with some tricky logic or less problematic cross checks. You can enable SSH server on each node. Just set ENV variable `SSH_ENABLE=1` (disabled by default) in all containers (including pgpool and barman). That will allow you to connect from any to any node by simple command under `postgres` user: `gosu postgres ssh {NODE NETWORK NAME}`\n\nYou also will have to set identical ssh keys to all containers. For that you need to mount files with your keys in paths `/tmp/.ssh/keys/id_rsa`, `/tmp/.ssh/keys/id_rsa.pub`.\n\n\n## Replication slots\n\nIf you want to disable the feature of Postgres>=9.4 - [replication slots](https://www.postgresql.org/docs/9.4/static/catalog-pg-replication-slots.html) simply set ENV variable `USE_REPLICATION_SLOTS=0` (enabled by default). So cluster will rely only on Postgres configuration `wal_keep_segments` (`500` by default). You also should remember that default number for configuration `max_replication_slots` is `5`. You can change it (as any other configuration) with ENV variable `CONFIGS`.\n\n\n## Extended version of postgres\n\nComponent `postgres-extended` from the section [Docker images tags convention](#docker-images-tags-convention) should be used if you want to have postgres with extensions and libraries. Each directory [here](./src/pgsql/extensions/bin/extensions) represents extension included in the image.\n\n## Backups and recovery\n\n[Barman](http://docs.pgbarman.org/) is used to provide real-time backups and Point In Time Recovery (PITR)..\nThis image requires connection information(host, port) and 2 sets of credentials, as you can see from [the Dockerfile](./src/Barman-latest.Dockerfile):\n\n* Replication credentials\n* Postgres admin credentials\n\nBarman acts as warm standby and stream WAL from source. Additionaly it periodicaly takes remote physical backups using `pg_basebackup`.\nThis allows to make PITR in reasonable time within window of specified size, because you only have to replay WAL from lastest base backup.\nBarman automatically deletes old backups and WAL according to retetion policy.\nBackup source is static — pgmaster node.\nIn case of master failover, backuping will continue from standby server\nWhole backup procedure is performed remotely, but for recovery SSH access is required.\n\n*Before using in production read following documentation:*\n * http://docs.pgbarman.org/release/2.2/index.html\n * https://www.postgresql.org/docs/current/static/continuous-archiving.html\n\n*For Disaster Recovery process see [RECOVERY.md](./doc/RECOVERY.md)*\n\nBarman exposes several metrics on `:8080/metrics` for more information see [Barman docs](./barman/README.md)\n\n## Health-checks\n\nTo make sure you cluster works as expected without 'split-brain' or other issues, you have to setup health-checks and stop container if any health-check returns non-zero result. That is really useful when you use Kubernetes which has livenessProbe (check how to use it in [the example](./k8s/example2-single-statefulset/nodes/node.yml)) \n\n* Postgres containers:\n    * `/usr/local/bin/cluster/healthcheck/is_major_master.sh` - detect if node acts as a 'false'-master and there is another master - with more standbys\n* Pgpool\n    * `/usr/local/bin/pgpool/has_enough_backends.sh [REQUIRED_NUM_OF_BACKENDS, default=$REQUIRE_MIN_BACKENDS]` - check if there are enough backend behind `pgpool`\n    * `/usr/local/bin/pgpool/has_write_node.sh` - check if one of the backend can be used as a master with write access\n\n\n\n## Useful commands\n\n* Get map of current cluster(on any `postgres` node): \n    * `gosu postgres repmgr cluster show` - tries to connect to all nodes on request ignore status of node in `$(get_repmgr_schema).$REPMGR_NODES_TABLE`\n    * `gosu postgres psql $REPLICATION_DB -c \"SELECT * FROM $(get_repmgr_schema).$REPMGR_NODES_TABLE\"` - just select data from tables\n* Get `pgpool` status (on any `pgpool` node): `PGPASSWORD=$CHECK_PASSWORD psql -U $CHECK_USER -h localhost template1 -c \"show pool_nodes\"`\n* In `pgpool` container check if primary node exists: `/usr/local/bin/pgpool/has_write_node.sh` \n\nAny command might be wrapped with `docker-compose` or `kubectl` - `docker-compose exec {NODE} bash -c '{COMMAND}'` or `kubectl exec {POD_NAME} -- bash -c '{COMMAND}'`\n\n\n## Scenarios\n\nCheck [the document](./doc/FLOWS.md) to understand different cases of failover, split-brain resistance and recovery\n\n## Publications\n* [Article on Medium.com](https://medium.com/@dpaunin/postgresql-cluster-into-kubernetes-cluster-f353cde212de)\n* [Статья на habr-e](https://habrahabr.ru/post/301370/)\n\n## How to contribute\n\nCheck [the doc](./doc/CONTRIBUTE.md) to understand how to contribute\n\n## FAQ\n\n* Example of real/live usage: \n    * [Lazada/Alibaba Group](http://lazada.com/)\n* Why not [sorintlab/stolon](https://github.com/sorintlab/stolon):\n    * Complex logic with a lot of go-code\n    * Non-standard tools for Postgres ecosystem\n* [How to promote master, after failover on postgresql with docker](http://stackoverflow.com/questions/37710868/how-to-promote-master-after-failover-on-postgresql-with-docker)\n* Killing of node in the middle (e.g. `pgslave1`) will cause [dieing of whole branch](https://groups.google.com/forum/?hl=fil#!topic/repmgr/lPAYlawhL0o)\n   * That make seance as second or deeper level of replication should not be able to connect to root master (it makes extra load on server) or change upstream at all\n\n\n## Documentation and manuals\n\n* Streaming replication in postgres: https://wiki.postgresql.org/wiki/Streaming_Replication\n* Repmgr: https://github.com/2ndQuadrant/repmgr\n* Pgpool2: http://www.pgpool.net/docs/latest/pgpool-en.html\n* Barman: http://www.pgbarman.org/\n* Kubernetes: http://kubernetes.io/\n"
        },
        {
          "name": "artwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose",
          "type": "tree",
          "content": null
        },
        {
          "name": "k8s",
          "type": "tree",
          "content": null
        },
        {
          "name": "make",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}