{
  "metadata": {
    "timestamp": 1736711296247,
    "page": 39,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SonarSource/docker-sonarqube",
      "stars": 1401,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.star",
          "type": "blob",
          "size": 0.1865234375,
          "content": "load(\"github.com/SonarSource/cirrus-modules@v3\", \"load_features\")\nload(\"cirrus\", \"env\", \"fs\", \"yaml\")\n\ndef main(ctx):\n    return yaml.dumps(load_features(ctx)) + fs.read(\".cirrus/tasks.yml\")\n"
        },
        {
          "name": ".cirrus",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3828125,
          "content": "# ---- IntelliJ IDEA\n*.iws\n*.iml\n*.ipr\n.idea/\nout/\n\n# ---- VS Code\n.vscode/\n*.code-workspace\n\n# ---- Eclipse\n.classpath\n.project\n.settings\n.externalToolBuilders\n\n# ---- Mac OS X\n.DS_Store\n# Thumbnails\n._*\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n# ---- Windows\n# Windows image file caches\nThumbs.db\n# Folder config file\nDesktop.ini\n\n# ---- Linux\n.directory\n\n*.zip\n"
        },
        {
          "name": "10",
          "type": "tree",
          "content": null
        },
        {
          "name": "9",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.1630859375,
          "content": "Issues / Questions\n------------------\n\nIf you want to raise an issue or ask a question (\"How do I?\", \"I got this error, why?\", ...), please first read the [documentation](https://docs.sonarqube.org) and then head to the [SonarSource forum](https://community.sonarsource.com/). There are chances that a question similar to yours has already been answered. \n\nBe aware that this forum is a community, so the standard pleasantries (\"Hi\", \"Thanks\", ...) are expected. And if you don't get an answer to your thread, you should sit on your hands for at least three days before bumping it. Operators are not standing by. :-)\n\nContributing\n------------\n\nIf you would like to see a new feature, please create a new thread in the forum [\"Suggest new features\"](https://community.sonarsource.com/c/suggestions/features).\n\nPlease be aware that we are not actively looking for feature contributions. We typically accept minor improvements and bug-fixes.\n\nWith that in mind, if you would like to submit a code contribution, please create a pull request for this repository. Please explain your motives to contribute this change: what problem you are trying to fix, what improvement you are trying to make.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 7.47265625,
          "content": "                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions. \n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version. \n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 0.1748046875,
          "content": "docker-sonarqube\nCopyright (C) 2015-2025 SonarSource SA\nmailto:info AT sonarsource DOT com\n\nThis product includes software developed at\nSonarSource (http://www.sonarsource.com/).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.38671875,
          "content": "# About this Repo [![Build Status](https://api.cirrus-ci.com/github/SonarSource/docker-sonarqube.svg)](https://cirrus-ci.com/github/SonarSource/docker-sonarqube)\n\nThis is the Git repo of the official Docker image for [SonarQube](https://registry.hub.docker.com/_/sonarqube/). See the Hub page for the full readme on how to use the Docker image and for information regarding contributing and issues.\n\nThe full readme is generated over in [docker-library/docs](https://github.com/docker-library/docs), specifically in [docker-library/docs/sonarqube](https://github.com/docker-library/docs/tree/master/sonarqube).\n\nSonar's [Clean Code solution](https://www.sonarsource.com/solutions/clean-code/) helps developers deliver high-quality, efficient code standards that benefit the entire team or organization.\n\n\nHave Questions or Feedback?\n---------------------------\n\nFor support questions (\"How do I?\", \"I got this error, why?\", ...), please first read the [documentation](https://docs.sonarqube.org) and then head to the [SonarSource forum](https://community.sonarsource.com/). There are chances that a question similar to yours has already been answered. \n\nBe aware that this forum is a community, so the standard pleasantries (\"Hi\", \"Thanks\", ...) are expected. And if you don't get an answer to your thread, you should sit on your hands for at least three days before bumping it. Operators are not standing by. :-)\n\n\nContributing\n------------\n\nIf you would like to see a new feature or report a bug, please create a new thread in our [forum](https://community.sonarsource.com/tags/c/sq/10/none/docker).\n\nPlease be aware that we are not actively looking for feature contributions. We typically accept minor improvements and bug fixes.\n\nWith that in mind, if you would like to submit a code contribution, please create a pull request for this repository. Please explain your motives to contribute this change: what problem you are trying to fix, what improvement you are trying to make.\n\n### License\n\nCopyright 2015-2025 SonarSource.\n\nSonarQube Community Build is released under the [GNU Lesser General Public License, Version 3.0⁠,](http://www.gnu.org/licenses/lgpl.txt) and packaged with [SSALv1](https://www.sonarsource.com/license/ssal/) analyzers. SonarQube Server Developer, Enterprise, and Data Center Editions are licensed under [SonarQube Server Terms and Conditions](https://www.sonarsource.com/legal/sonarqube/terms-and-conditions/).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.158203125,
          "content": "# Reporting Security Issues\n\nA mature software vulnerability treatment process is a cornerstone of a robust information security management system. Contributions from the community play an important role in the evolution and security of our products, and in safeguarding the security and privacy of our users.\n\nIf you believe you have discovered a security vulnerability in Sonar's products, we encourage you to report it immediately.\n\nTo responsibly report a security issue, please email us at [security@sonarsource.com](mailto:security@sonarsource.com). Sonar’s security team will acknowledge your report, guide you through the next steps, or request additional information if necessary. Customers with a support contract can also report the vulnerability directly through the support channel.\n\nFor security vulnerabilities found in third-party libraries, please also contact the library's owner or maintainer directly.\n\n## Responsible Disclosure Policy\n\nFor more information about disclosing a security vulnerability to Sonar, please refer to our community post: [Responsible Vulnerability Disclosure](https://community.sonarsource.com/t/responsible-vulnerability-disclosure/9317)."
        },
        {
          "name": "build-and-run.sh",
          "type": "blob",
          "size": 0.9560546875,
          "content": "#!/usr/bin/env bash\n\nset -euo pipefail\n\ncd \"$(dirname \"$0\")\"\n\nport=9000\n\nprint_usage() {\n    cat << EOF\nusage: $0 [IMAGE...]\n\nexamples:\n       $0\n       $0 7.4-community\n       $0 7.4-community-alpine\nEOF\n}\n\nwarn() {\n    echo \"[warn] $@\" >&2\n}\n\nfatal() {\n    echo \"[error] $@\" >&2\n    exit 1\n}\n\nrequire() {\n    local prog missing=()\n    for prog; do\n        if ! type \"$prog\" &>/dev/null; then\n            missing+=(\"$prog\")\n        fi\n    done\n\n    [[ ${#missing[@]} = 0 ]] || fatal \"could not find required programs on the path: ${missing[@]}\"\n}\n\nrequire docker\n\nfor arg; do\n    if [[ $arg == \"-h\" ]] || [[ $arg == \"--help\" ]]; then\n        print_usage\n        exit\n    fi\ndone\n\nif [[ $# = 0 ]]; then\n    print_usage\n    exit 1\nfi\n\nimage=$1\nimage=${image%/}\nif ! [[ -d \"$image\" ]]; then\n    warn \"not a valid image, directory does not exist: $image\"\n    exit 1\nfi\nname=sqtest:$image\ndocker build -t \"$name\" -f \"$image/Dockerfile\" \"$PWD/$image\"\ndocker run -p $port:9000 \"$name\"\n"
        },
        {
          "name": "community-build",
          "type": "tree",
          "content": null
        },
        {
          "name": "deprecated.md",
          "type": "blob",
          "size": 4.0263671875,
          "content": "# _DEPRECATED_\n\nDogfooding and images for local artifacts\n=========================================\n\nDogfooding\n----------\n\nSonarQube Docker images are dogfooded.\n\nThis implies that Docker images are produced for every artifact produced from the dogfood branch of SonarQube (see the [dogfood_docker_build_task](https://github.com/SonarSource/sonar-enterprise/blob/master/.cirrus.yml#L263)).\n\nDocker images of SonarQube are built from publicly available artifacts, which means the Dockerfile can simply download them from the public place they are hosted (`binaries.sonarsource.com`).\n\nHowever, this is not the case for artifacts built from the dogfood branch, which are private.\n\nAt some point of time, Dockerfile add the ability to download from the private hosting. Credentials where provided as `docker build` arguments. This option was **dropped because it was leaking credentials into the Docker image layers**.\n\nInstead, the download is now performed by the [`build-docker-from-private-repo.sh`](8/build-docker-from-private-repo.sh) script which then relies on the Dockerfile ability to bundle any locally provided SQ artifact (see below).\n\nLocal artifacts\n---------------\n\nDockerfile supports creating image from any locally provided SQ artifact.\n\nThis artifact should be named `sonarqube-${SONARQUBE_VERSION}.zip` and located in the `zip` directory of the `docker build` context. If such file exists, this artifact will be used to build the image instead of downloading it from `binaries.sonarsource.com`.\n\nNote that:\n\n1. there is no check to enforce version of SQ in the zip file matches the `docker build` argument\n\t* this is, by the way, used and exploited in dogfooding where Docker images for 8.0 are used to build images of 8.1 currently under development\n2. this feature must be removed from the official Dockerfile published to Docker Hub (see \"Release process\" below).\n\n\nITs\n===\n\nITs run on Travis, see [.travis.yml](.travis.yml).\n\nCurrently, ITs are \"simply\" building a given image of SonarQube and make sure they can run it and have SonarQube responding on HTTP calls in a reasonable time.\n\nSince 8.0, images offer more features which are unfortunately not tested automatically (eg. `--init` parameter and automatice initialization of mounted directories).\n\n\nDiscussion around the \"version branch\"\n======================================\n\nThe \"version branch\" has been introduced as a mean to comply with two opposing constraints:\n\n1. to not have code in Dockerfile which is useless and only developement/dogfood specific\n2. use the real images for dogfooding\n\nThis solution is not great:\n\n* it implies multiple manual operations for each release with a high risk of mistake\n* we are not sure how convenient it will be for next releases\n\nHowever, given the time constraints at the time, it was a good choice: it worked and was very quick and quite low risk to implement.\n\nAlternative\n-----------\n\nOne promising alternative has been discussed.\n\nBased on the observation that:\n\n1. edition Dockerfiles vary by hardly more than a URL from each other\n2. the official image is basically the dev image stripped from some identifed code\n\nThe idea would be to have:\n\n1. 6 Dockerfiles commit into the repository: two per editions, one for official image (no dev-specific code) and one for dev/dogfooding\n2. a Dockerfile \"template\"\n3. a script responsible for generating the 6 Dockerfiles from the \"template\"\n4. an IT ensuring that the 6 Dockerfiles are up to date with the \"template\" and the script (to prevent dev from forgetting to commit up-to-date Dockerfiles)\n\nWith this idea:\n\n1. trust in dogfooding Docker images representatives of the one which will end up as the official images moves from the developer doing the right changes when cleaning the \"version\" branch to the script and the template\n  * no more human based last minute changes is an obvious improvement\n  * it's all commited so an error is easy to track\n2. there is no longer a need for a \"version\" branch\n\nHowever, it requires some time to develop and even confirm it's just feasible. For these reasons, this option wasn't retained at the time."
        },
        {
          "name": "develop.md",
          "type": "blob",
          "size": 1.322265625,
          "content": "Guidelines and documentation for developers of the SonarQube Docker images.\n\ncould not find java in ES_JAVA_HOME\n===================================\n\n`could not find java in ES_JAVA_HOME at /usr/lib/jvm/java-11-openjdk/bin/java` is a known error message when the container runtime is too old to be aware of the `faccessat2` syscall.\nThis issue is tracked with [SONAR-15167](https://jira.sonarsource.com/browse/SONAR-15167) including some worarounds if a update of the container runtime is not possible. \n\nAdding images for a new version of SQ\n=====================================\n\nNew major version\n-----------------\n\nCreate a new subdirectory with the major version number in the root directory of the repository with a sub directory for each supported edition, eg.: \n\n```\nmkdir -p 9/community 9/developer 9/enterprise\n```\n\nEach edition directory will contain a single Dockerfile.\n\nNew non-major version\n---------------------\n\nAs of today, we publish only a single version of SQ for a given major version in the \"master\" branch.\n\nNo new image is therefor created for non-major versions of SQ. Instead, existing images are updated.\n\nDocker images of older intermediate versions are accessible via tags.\n\n\nRelease process\n===============\n\nGo [here](release.md)\n\nDeprecated\n==========\n\nMore information in [deprecated](deprecated.md) processes/pipelines.\n"
        },
        {
          "name": "example-compose-files",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples.md",
          "type": "blob",
          "size": 2.21484375,
          "content": "# Examples\n\nThis section provides examples on how to run SonarQube server in a container:\n- using [docker commands](#run-sonarqube-using-docker-commands)\n- using [docker-compose](#run-sonarqube-using-docker-compose)\n\nTo analyze a project check our [scanner docs](https://docs.sonarqube.org/latest/analysis/overview/).\n\n## Run SonarQube using docker commands\nBefore you start SonarQube, we recommend creating volumes to store SonarQube data, logs, temporary data and extensions. If you don't do that, you can loose them when you decide to update to newer version of SonarQube or upgrade to a higher SonarQube edition. Commands to create the volumes: \n```bash\n$> docker volume create --name sonarqube_data\n$> docker volume create --name sonarqube_extensions\n$> docker volume create --name sonarqube_logs\n$> docker volume create --name sonarqube_temp\n``` \n\nAfter that you can start the SonarQube server (this example uses the Community Edition):\n```bash\n$> docker run \\\n    -v sonarqube_data:/opt/sonarqube/data \\\n    -v sonarqube_extensions:/opt/sonarqube/extensions \\\n    -v sonarqube_logs:/opt/sonarqube/logs \\\n    --name=\"sonarqube\" -p 9000:9000 sonarqube:community\n```\nThe above command starts SonarQube with an embedded database. We recommend starting the instance with a separate database\nby providing `SONAR_JDBC_URL`, `SONAR_JDBC_USERNAME` and `SONAR_JDBC_PASSWORD` like this:\n```bash\n$> docker run \\\n    -v sonarqube_data:/opt/sonarqube/data \\\n    -v sonarqube_extensions:/opt/sonarqube/extensions \\\n    -v sonarqube_logs:/opt/sonarqube/logs \\\n    -e SONAR_JDBC_URL=\"...\" \\\n    -e SONAR_JDBC_USERNAME=\"...\" \\\n    -e SONAR_JDBC_PASSWORD=\"...\" \\\n    --name=\"sonarqube\" -p 9000:9000 sonarqube:community\n```\n\n## Run SonarQube using Docker Compose\n### Requirements\n\n * Docker Engine 20.10+\n * Docker Compose 2.0.0+\n\n### SonarQube with Postgres:\n\nGo to [this directory](example-compose-files/sq-with-h2) to run SonarQube in development mode or [this directory](example-compose-files/sq-with-postgres) to run both SonarQube and PostgreSQL. Then run [docker-compose](https://github.com/docker/compose):\n\n```bash\n$ docker-compose up\n```\n\nTo restart SonarQube container (for example after upgrading or installing a plugin):\n\n```bash\n$ docker-compose restart sonarqube\n```"
        },
        {
          "name": "release.md",
          "type": "blob",
          "size": 4.509765625,
          "content": "# Releasing\n\nDocker image release cycle and SonarQube Server product\n---\nWe consider the **docker image** as part of the SonarQube Server **product**. Therefore, it follows the same release process.\n\nOverview\n--------\n\nRelease of a new version of the official SonarQube Server Docker images is made of several operations. (Please note that in case of a patch release that should not include the latest changes on master, you need to release from a new branch - e.g., `release/10.8.1` - and propagate the changes to master afterwards).\n\n1. Set the new version of SonarQube Server (`SONARQUBE_VERSION`) to be released in the Dockerfiles. In case of community build, please remember to update `community-build/Dockerfile` only.\n2. If you are releasing a new LTA, set `CURRENT_LTA_VERSION` in `.cirrus/tasks.yml`. Otherwise, if you are releasing a Community build, set `COMMUNITY_BUILD_VERSION` only. In all the other cases where a paid edition is about to be releases, set `CURRENT_VERSION` (please note that the nightly build will fail before the public image becomes available).\n3. Update the docker hub SonarQube Server's documentation (if applicable)\n4. Add a GIT tag for the new version\n   1. If you are releasing a SonarQube Server version, you need to [Draft a New Release](https://github.com/SonarSource/docker-sonarqube/releases/new), where the name matches \"SonarQube Server 2025.\"\n   2. Likewise, if you are releasing a Community Build, the release name should match \"Community Build\", followed by the month version, i.e., \"Community Build 25.1\".\n5. Update Docker Hub's SonarQube Server images\n\n\nBump the version of SonarQube Server in Dockerfiles\n-----------------------------\n\nThe version of SonarQube Server is hardcoded in each Dockerfile of this repository and must be updated in master branch.\n\nUpdate the docker hub SonarQube Server's documentation (if applicable)\n-------------------------------\n\nIf needed, prepare PR of Docker Hub documentation [https://github.com/docker-library/docs](https://github.com/docker-library/docs)\n\n> Note: Please use your own fork like seen in [this closed PR](https://github.com/docker-library/docs/pull/1660)\n\nTo create a good PR:\n\n1. The markdown format must follow a certain standard, otherwise automated tests will fail. You can test with the `markdownfmt.sh` tool included in the repository, for example `./markdownfmt.sh -d sonarqube/content.md` will output the diff that would have to be done to make the tests pass. You can use the `patch` command to apply the changes, for example: `./markdownfmt.sh -d sonarqube/content.md | patch sonarqube/content.md`\n2. Verify the Pull Request passes the automated tests (visible in the status of the PR)\n\nTo control the generated content of the Docker Hub page, look around in the files in `.template-helpers` of the [`docs` repository][docs]. For example, the \"Where to get help\" section is customized by a copy of `.template-helpers/get-help.md` in `sonarqube/get-help.md`.\n\nUntil SonarQube Server is released and the public artifacts are available, keep your PR a draft PR to make it clear it is not ready to be merged yet.\n\nFor more and up to date documentation, see https://github.com/docker-library/docs.\n\n\nUpdate Docker Hub's SonarQube Server images\n-----------------------\n\nIn order to update the Docker Hub images, a Pull Request must be created on the [official-images](https://github.com/docker-library/official-images) repository.\n\nTo do so you can use your own personal fork.\n\nCreate a feature branch on the fork:\n* `GitCommit` must be updated to this repository master branch's HEAD.\n* `GitFetch` is the branch/tag (e.g., refs/tags/10.8.1) where the commit can be found. Setting this value is only needed if you are releasing from a branch different from master.\n* `Tags` and `Directory` must be added/updated appropriatly for each edition\n* see https://github.com/docker-library/official-images/pull/8837/files as an example\n\nUntil SonarQube Server is released and the public artifacts are available, keep your PR a draft PR to make it clear it is not ready to be merged yet.\n* Create the PR [here](https://github.com/docker-library/official-images/compare)\n    * If the documentation was updated in the step before, reference that PR in this PR.\n* Click on *compare across fork* to be able to use the fork as head repository.\n\n\nFor more and up to date documentation, see https://github.com/docker-library/official-images.\n\n\nAdd a GIT tag for the new version \n----------------\n\nThe commit referenced in the DockerHub Pull Request must be tagged with the (marketing) version of SQ: eg. `8.0`, `8.0.1`, `8.1`.\n"
        },
        {
          "name": "run-public-image-tests.sh",
          "type": "blob",
          "size": 1.806640625,
          "content": "#!/usr/bin/env bash\n\nset -euo pipefail\n\ncd \"$(dirname \"$0\")\"\n\nport=9000\n\ninfo() {\n    echo \"[info] $@\"\n}\n\nwarn() {\n    echo \"[warn] $@\" >&2\n}\n\nfatal() {\n    echo \"[error] $@\" >&2\n    exit 1\n}\n\nrequire() {\n    local prog missing=()\n    for prog; do\n        if ! type \"$prog\" &>/dev/null; then\n            missing+=(\"$prog\")\n        fi\n    done\n\n    [[ ${#missing[@]} = 0 ]] || fatal \"could not find reqired programs on the path: ${missing[@]}\"\n}\n\nwait_for_sonarqube() {\n    local image=$1 i web_up=no sonarqube_up=no\n\n    for ((i = 0; i < 10; i++)); do\n        info \"$image: waiting for web server to start ...\"\n        if curl -sI localhost:$port | grep '^HTTP/.* 200'; then\n            web_up=yes\n            break\n        fi\n        sleep 5\n    done\n\n    [[ $web_up = yes ]] || return 1\n\n    for ((i = 0; i < 10; i++)); do\n        info \"$image: waiting for sonarqube to be ready ...\"\n        if curl -s localhost:$port/api/system/status | grep '\"status\":\"UP\"'; then\n            sonarqube_up=yes\n            break\n        fi\n        sleep 10\n    done\n\n    [[ \"$sonarqube_up\" = yes ]]\n}\n\nsanity_check_image() {\n    local image=$1 id result\n\n    docker system prune -fa\n    docker pull ${image}\n    id=$(docker run -d -p ${port}:9000 \"$image\")\n    info \"$image: container started: $id\"\n\n    if wait_for_sonarqube \"$image\"; then\n        info \"$image: OK !\"\n        result=ok\n    else\n        warn \"$image: could not confirm service started\"\n        result=failure\n    fi\n\n    info \"$image: stopping container: $id\"\n    docker container stop \"$id\"\n\n    [[ $result == ok ]]\n}\n\nrequire curl docker\n\n\nresults=()\n\nif sanity_check_image \"sonarqube\"; then\n    results+=(\"success\")\nelse\n    results+=(\"failure\")\nfi\n\n\necho\n\nfailures=0\n\necho \"sonarqube => ${results[0]}\"\nif [[ ${results[0]} != success ]]; then\n    ((failures++)) || :\nfi\n\n\n[[ ${failures} = 0 ]]\n"
        },
        {
          "name": "run-tests.sh",
          "type": "blob",
          "size": 3.3408203125,
          "content": "#!/usr/bin/env bash\n\nset -euo pipefail\n\ncd \"$(dirname \"$0\")\"\n\nport=9000\n\nprint_usage() {\n    cat << EOF\nusage: $0 [IMAGE...]\n\nexamples:\n       $0 7.6-community\nEOF\n}\n\ninfo() {\n    echo \"[info] $@\"\n}\n\nwarn() {\n    echo \"[warn] $@\" >&2\n}\n\nfatal() {\n    echo \"[error] $@\" >&2\n    exit 1\n}\n\nrequire() {\n    local prog missing=()\n    for prog; do\n        if ! type \"$prog\" &>/dev/null; then\n            missing+=(\"$prog\")\n        fi\n    done\n\n    [[ ${#missing[@]} = 0 ]] || fatal \"could not find reqired programs on the path: ${missing[@]}\"\n}\n\nwait_for_sonarqube() {\n    local image=$1 i web_up=no sonarqube_up=no\n\n    for ((i = 0; i < 15; i++)); do\n        info \"$image: waiting for web server to start ...\"\n        if curl -sI localhost:$port | grep '^HTTP/.* 200'; then\n            web_up=yes\n            break\n        fi\n        sleep 5\n    done\n\n    [[ $web_up = yes ]] || return 1\n\n    for ((i = 0; i < 30; i++)); do\n        info \"$image: waiting for sonarqube to be ready ...\"\n        if curl -s localhost:$port/api/system/status | grep '\"status\":\"UP\"'; then\n            sonarqube_up=yes\n            break\n        fi\n        sleep 10\n    done\n\n    [[ \"$sonarqube_up\" = yes ]]\n}\n\nwait_for_sonarqube_dce() {\n    local image=$1-app i web_up=no sonarqube_up=no\n\n    for ((i = 0; i < 80; i++)); do\n        info \"$image: waiting for web server to start ...\"\n        if curl -sI localhost:$port | grep '^HTTP/.* 200'; then\n            web_up=yes\n            break\n        fi\n        sleep 5\n    done\n\n    [[ $web_up = yes ]] || return 1\n\n    for ((i = 0; i < 80; i++)); do\n        info \"$image: waiting for sonarqube to be ready ...\"\n        if curl -s localhost:$port/api/system/status | grep '\"status\":\"UP\"'; then\n            sonarqube_up=yes\n            break\n        fi\n        sleep 10\n    done\n\n    [[ \"$sonarqube_up\" = yes ]]\n}\n\nsanity_check_image() {\n    local image=$1 id result\n    local test_case=$2\n\n    if [[ $2 == docker ]]; then\n        id=$(docker run -d -p $port:9000 \"$image\")\n        info \"$image: container started: $id\"\n\n        if wait_for_sonarqube \"$image\"; then\n            info \"$image: OK !\"\n            result=ok\n        else\n            warn \"$image: could not confirm service started\"\n            result=failure\n        fi\n\n        info \"$image: stopping container: $id\"\n        docker container stop \"$id\"\n\n        [[ $result == ok ]]\n    elif [ $2 == docker-compose ]; then\n        local test_compose_path=\"tests/dce-compose-test\"\n        cd $test_compose_path\n        export PORT=$port\n        export IMAGE=$1\n        docker compose up -d sonarqube\n        if wait_for_sonarqube_dce \"$image\"; then\n            info \"$image-app: OK !\"\n            result=ok\n        else\n            warn \"$image-app: could not confirm service started\"\n            result=failure\n        fi\n\n        info \"$image-app: stopping container stack\"\n        docker compose stop\n\n        [[ $result == ok ]]\n    fi\n    \n}\n\nrequire curl docker\n\nfor arg; do\n    if [[ $arg == \"-h\" ]] || [[ $arg == \"--help\" ]]; then\n        print_usage\n        exit\n    fi\ndone\n\nif [[ $# = 0 ]]; then\n    warn \"at least one image as parameter is required\"\n    exit\nfi\n\nimage=($1)\ntest_case=($2)\nresults=()\n\nif sanity_check_image \"$image\" \"$test_case\"; then\n    results+=(\"success\")\nelse\n    results+=(\"failure\")\nfi\n\nfailures=0\necho \"${image} => ${results}\"\nif [[ ${results} != success ]]; then\n    ((failures++))\nfi\n\n[[ $failures = 0 ]]\n"
        },
        {
          "name": "sonar-project.properties",
          "type": "blob",
          "size": 0.1162109375,
          "content": "sonar.projectKey=SonarSource_docker-sonarqube_AYcnOvlJTpBOcQuGEdI5\nsonar.sources=9/,10/\nsonar.organization=sonarsource\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 1.0048828125,
          "content": "#!/bin/bash\n\n# Enable globstar for Searching recursively \nshopt -s globstar\n# Reset the Option Index in case getopts has been used previously in the same shell.\nOPTIND=1 \n\nfunction show_help() {\n    echo \"update.sh help\"\n    echo \"\"\n    echo \"This Script will update a given Version in all Dockerfiles present under the current directory\"\n    echo \"If the old version can not be found, it does nothing\"\n    echo \"\"\n    echo \"usage:\"\n    echo \"update.sh <old version> <new version>\"\n    echo \"\"\n    echo \"example:\"\n    echo \"update.sh -o 8.9.1.44547 -n 9.0.0.12345\"\n    exit 0\n}\n\n##########\n## Main ##\n##########\n\nOLD_VERSION=\"\"\nNEW_VERSION=\"\"\n\nwhile getopts \":h:o:n:\" o; do\n    case \"${o}\" in\n        o)\n            OLD_VERSION=${OPTARG}\n            ;;\n        n)\n            NEW_VERSION=${OPTARG}\n            ;;\n        h)\n            show_help\n            ;;\n        *)\n            show_help\n            ;;\n    esac\ndone\nshift $((OPTIND-1))\n\nfor i in ./**/Dockerfile; do \n    sed -i \"s/${OLD_VERSION}/${NEW_VERSION}/g\" $i\ndone\n"
        }
      ]
    }
  ]
}