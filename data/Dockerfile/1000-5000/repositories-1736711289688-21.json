{
  "metadata": {
    "timestamp": 1736711289688,
    "page": 21,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lukechilds/dockerpi",
      "stars": 1882,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.005859375,
          "content": "*.swp\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 3.5810546875,
          "content": "# Build stage for qemu-system-arm\nFROM debian:stable-slim AS qemu-builder\nARG QEMU_VERSION=6.0.0\nENV QEMU_TARBALL=\"qemu-${QEMU_VERSION}.tar.xz\"\nWORKDIR /qemu\n\nRUN # Update package lists\nRUN apt-get update\n\nRUN # Pull source\nRUN apt-get -y install wget\nRUN wget \"https://download.qemu.org/${QEMU_TARBALL}\"\n\nRUN # Verify signatures\nRUN apt-get -y install gpg\nRUN wget \"https://download.qemu.org/${QEMU_TARBALL}.sig\"\nRUN gpg --keyserver keyserver.ubuntu.com --recv-keys CEACC9E15534EBABB82D3FA03353C9CEF108B584\nRUN gpg --verify \"${QEMU_TARBALL}.sig\" \"${QEMU_TARBALL}\"\n\nRUN # Extract source tarball\nRUN apt-get -y install pkg-config\nRUN tar xvf \"${QEMU_TARBALL}\"\n\nRUN # Build source\n# These seem to be the only deps actually required for a successful  build\nRUN apt-get -y install python build-essential libglib2.0-dev libpixman-1-dev ninja-build\n# These don't seem to be required but are specified here: https://wiki.qemu.org/Hosts/Linux\nRUN apt-get -y install libfdt-dev zlib1g-dev\n# Not required or specified anywhere but supress build warnings\nRUN apt-get -y install flex bison\nRUN \"qemu-${QEMU_VERSION}/configure\" --static --target-list=arm-softmmu,aarch64-softmmu\nRUN make -j$(nproc)\n\nRUN # Strip the binary, this gives a substantial size reduction!\nRUN strip \"arm-softmmu/qemu-system-arm\" \"aarch64-softmmu/qemu-system-aarch64\" \"qemu-img\"\n\n\n# Build stage for fatcat\nFROM debian:stable-slim AS fatcat-builder\nARG FATCAT_VERSION=v1.1.0\nARG FATCAT_CHECKSUM=\"303efe2aa73cbfe6fbc5d8af346d0f2c70b3f996fc891e8859213a58b95ad88c\"\nENV FATCAT_TARBALL=\"${FATCAT_VERSION}.tar.gz\"\nWORKDIR /fatcat\n\nRUN # Update package lists\nRUN apt-get update\n\nRUN # Pull source\nRUN apt-get -y install wget\nRUN wget \"https://github.com/Gregwar/fatcat/archive/${FATCAT_TARBALL}\"\nRUN echo \"${FATCAT_CHECKSUM} ${FATCAT_TARBALL}\" | sha256sum --check\n\nRUN # Extract source tarball\nRUN tar xvf \"${FATCAT_TARBALL}\"\n\nRUN # Build source\nRUN apt-get -y install build-essential cmake\nRUN cmake fatcat-* -DCMAKE_CXX_FLAGS='-static'\nRUN make -j$(nproc)\n\n\n# Build the dockerpi VM image\nFROM busybox:1.31 AS dockerpi-vm\nLABEL maintainer=\"Luke Childs <lukechilds123@gmail.com>\"\nARG RPI_KERNEL_URL=\"https://github.com/dhruvvyas90/qemu-rpi-kernel/archive/afe411f2c9b04730bcc6b2168cdc9adca224227c.zip\"\nARG RPI_KERNEL_CHECKSUM=\"295a22f1cd49ab51b9e7192103ee7c917624b063cc5ca2e11434164638aad5f4\"\n\nCOPY --from=qemu-builder /qemu/arm-softmmu/qemu-system-arm /usr/local/bin/qemu-system-arm\nCOPY --from=qemu-builder /qemu/aarch64-softmmu/qemu-system-aarch64 /usr/local/bin/qemu-system-aarch64\nCOPY --from=qemu-builder /qemu/qemu-img /usr/local/bin/qemu-img\nCOPY --from=fatcat-builder /fatcat/fatcat /usr/local/bin/fatcat\n\nADD $RPI_KERNEL_URL /tmp/qemu-rpi-kernel.zip\n\nRUN cd /tmp && \\\n    echo \"$RPI_KERNEL_CHECKSUM  qemu-rpi-kernel.zip\" | sha256sum -c && \\\n    unzip qemu-rpi-kernel.zip && \\\n    mkdir -p /root/qemu-rpi-kernel && \\\n    cp qemu-rpi-kernel-*/kernel-qemu-4.19.50-buster /root/qemu-rpi-kernel/ && \\\n    cp qemu-rpi-kernel-*/versatile-pb.dtb /root/qemu-rpi-kernel/ && \\\n    rm -rf /tmp/*\n\nVOLUME /sdcard\n\nADD ./entrypoint.sh /entrypoint.sh\nENTRYPOINT [\"./entrypoint.sh\"]\n\n\n# Build the dockerpi image\n# It's just the VM image with a compressed Raspbian filesystem added\nFROM dockerpi-vm as dockerpi\nLABEL maintainer=\"Luke Childs <lukechilds123@gmail.com>\"\nARG FILESYSTEM_IMAGE_URL=\"http://downloads.raspberrypi.org/raspbian_lite/images/raspbian_lite-2019-09-30/2019-09-26-raspbian-buster-lite.zip\"\nARG FILESYSTEM_IMAGE_CHECKSUM=\"a50237c2f718bd8d806b96df5b9d2174ce8b789eda1f03434ed2213bbca6c6ff\"\n\nADD $FILESYSTEM_IMAGE_URL /filesystem.zip\n\nRUN echo \"$FILESYSTEM_IMAGE_CHECKSUM  /filesystem.zip\" | sha256sum -c\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2017 Luke Childs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.3974609375,
          "content": "<div align=\"center\">\n\t<img width=\"256\" src=\"media/logo.svg\">\n</div>\n\n# dockerpi\n\n[![Docker Pulls](https://badgen.net/docker/pulls/lukechilds/dockerpi?icon=docker&label=Docker%20pulls)](https://hub.docker.com/r/lukechilds/dockerpi/)\n[![Docker Image Size](https://badgen.net/docker/size/lukechilds/dockerpi/latest/amd64?icon=docker&label=lukechilds/dockerpi)](https://hub.docker.com/r/lukechilds/dockerpi/tags)\n[![GitHub Donate](https://badgen.net/badge/GitHub/Sponsor/D959A7?icon=github)](https://github.com/sponsors/lukechilds)\n[![Bitcoin Donate](https://badgen.net/badge/Bitcoin/Donate/F19537?icon=bitcoin)](https://lu.ke/tip/bitcoin)\n[![Lightning Donate](https://badgen.net/badge/Lightning/Donate/F6BC41?icon=bitcoin-lightning)](https://lu.ke/tip/lightning)\n\n> A Virtualised Raspberry Pi inside a Docker image\n\nGives you access to a virtualised ARM based Raspberry Pi machine running the Raspian operating system.\n\nThis is not just a Raspian Docker image, it's a full ARM based Raspberry Pi virtual machine environment.\n\n<div align=\"center\">\n\t<img src=\"media/demo.svg\" width=\"720\">\n</div>\n\n## Usage\n\n```\ndocker run -it lukechilds/dockerpi\n```\n\nBy default all filesystem changes will be lost on shutdown. You can persist filesystem changes between reboots by mounting the `/sdcard` volume on your host:\n\n```\ndocker run -it -v $HOME/.dockerpi:/sdcard lukechilds/dockerpi\n```\n\nIf you have a specific image you want to mount you can mount it at `/sdcard/filesystem.img`:\n\n```\ndocker run -it -v /2019-09-26-raspbian-buster-lite.img:/sdcard/filesystem.img lukechilds/dockerpi\n```\n\nIf you only want to mount your own image, you can download a much slimmer VM only Docker container that doesn't contain the Raspbian filesystem image:\n\n[![Docker Image Size](https://badgen.net/docker/size/lukechilds/dockerpi/latest/amd64?icon=docker&label=lukechilds/dockerpi:latest)](https://hub.docker.com/r/lukechilds/dockerpi/tags?name=latest)\n[![Docker Image Size](https://badgen.net/docker/size/lukechilds/dockerpi/vm/amd64?icon=docker&label=lukechilds/dockerpi:vm)](https://hub.docker.com/r/lukechilds/dockerpi/tags?name=vm)\n\n```\ndocker run -it -v /2019-09-26-raspbian-buster-lite.img:/sdcard/filesystem.img lukechilds/dockerpi:vm\n```\n\n## Which machines are supported?\n\nBy default a Raspberry Pi 1 is virtualised, however experimental support has been added for Pi 2 and Pi 3 machines.\n\nYou can specify a machine by passing the name as a CLI argument:\n\n```\ndocker run -it lukechilds/dockerpi pi1\ndocker run -it lukechilds/dockerpi pi2\ndocker run -it lukechilds/dockerpi pi3\n```\n\n> **Note:** In the Pi 2 and Pi 3 machines, QEMU hangs once the machines are powered down requiring you to `docker kill` the container. See [#4](https://github.com/lukechilds/dockerpi/pull/4) for details.\n\n\n## Wait, what?\n\nA full ARM environment is created by using Docker to bootstrap a QEMU virtual machine. The Docker QEMU process virtualises a machine with a single core ARM11 CPU and 256MB RAM, just like the Raspberry Pi. The official Raspbian image is mounted and booted along with a modified QEMU compatible kernel.\n\nYou'll see the entire boot process logged to your TTY until you're prompted to log in with the username/password pi/raspberry.\n\n```\npi@raspberrypi:~$ uname -a\nLinux raspberrypi 4.19.50+ #1 Tue Nov 26 01:49:16 CET 2019 armv6l GNU/Linux\npi@raspberrypi:~$ cat /etc/os-release | head -n 1\nPRETTY_NAME=\"Raspbian GNU/Linux 10 (buster)\"\npi@raspberrypi:~$ cat /proc/cpuinfo\nprocessor       : 0\nmodel name      : ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS        : 798.31\nFeatures        : half thumb fastmult vfp edsp java tls\nCPU implementer : 0x41\nCPU architecture: 7\nCPU variant     : 0x0\nCPU part        : 0xb76\nCPU revision    : 7\n\nHardware        : ARM-Versatile (Device Tree Support)\nRevision        : 0000\nSerial          : 0000000000000000\npi@raspberrypi:~$ free -h\n              total        used        free      shared  buff/cache   available\nMem:          246Mi        20Mi       181Mi       1.0Mi        44Mi       179Mi\nSwap:          99Mi          0B        99Mi\n```\n\n## Build\n\nBuild this image yourself by checking out this repo, `cd` ing into it and running:\n\n```\ndocker build -t lukechilds/dockerpi .\n```\n\nBuild the VM only image with:\n\n```\ndocker build -t lukechilds/dockerpi:vm --target dockerpi-vm .\n```\n\n## Credit\n\nThanks to [@dhruvvyas90](https://github.com/dhruvvyas90) for his [dhruvvyas90/qemu-rpi-kernel](https://github.com/dhruvvyas90/qemu-rpi-kernel) repo.\n\n## License\n\nMIT © Luke Childs\n"
        },
        {
          "name": "entrypoint.sh",
          "type": "blob",
          "size": 2.806640625,
          "content": "#!/bin/sh\n\nGIB_IN_BYTES=\"1073741824\"\n\ntarget=\"${1:-pi1}\"\nimage_path=\"/sdcard/filesystem.img\"\nzip_path=\"/filesystem.zip\"\n\nif [ ! -e $image_path ]; then\n  echo \"No filesystem detected at ${image_path}!\"\n  if [ -e $zip_path ]; then\n      echo \"Extracting fresh filesystem...\"\n      unzip $zip_path\n      mv -- *.img $image_path\n  else\n    exit 1\n  fi\nfi\n\nqemu-img info $image_path\nimage_size_in_bytes=$(qemu-img info --output json $image_path | grep \"virtual-size\" | awk '{print $2}' | sed 's/,//')\nif [[ \"$(($image_size_in_bytes % ($GIB_IN_BYTES * 2)))\" != \"0\" ]]; then\n  new_size_in_gib=$((($image_size_in_bytes / ($GIB_IN_BYTES * 2) + 1) * 2))\n  echo \"Rounding image size up to ${new_size_in_gib}GiB so it's a multiple of 2GiB...\"\n  qemu-img resize $image_path \"${new_size_in_gib}G\"\nfi\n\nif [ \"${target}\" = \"pi1\" ]; then\n  emulator=qemu-system-arm\n  kernel=\"/root/qemu-rpi-kernel/kernel-qemu-4.19.50-buster\"\n  dtb=\"/root/qemu-rpi-kernel/versatile-pb.dtb\"\n  machine=versatilepb\n  memory=256m\n  root=/dev/sda2\n  nic=\"--net nic --net user,hostfwd=tcp::5022-:22\"\nelif [ \"${target}\" = \"pi2\" ]; then\n  emulator=qemu-system-arm\n  machine=raspi2b\n  memory=1024m\n  kernel_pattern=kernel7.img\n  dtb_pattern=bcm2709-rpi-2-b.dtb\n  append=\"dwc_otg.fiq_fsm_enable=0\"\n  nic=\"-netdev user,id=net0,hostfwd=tcp::5022-:22 -device usb-net,netdev=net0\"\nelif [ \"${target}\" = \"pi3\" ]; then\n  emulator=qemu-system-aarch64\n  machine=raspi3b\n  memory=1024m\n  kernel_pattern=kernel8.img\n  dtb_pattern=bcm2710-rpi-3-b-plus.dtb\n  append=\"dwc_otg.fiq_fsm_enable=0\"\n  nic=\"-netdev user,id=net0,hostfwd=tcp::5022-:22 -device usb-net,netdev=net0\"\nelse\n  echo \"Target ${target} not supported\"\n  echo \"Supported targets: pi1 pi2 pi3\"\n  exit 2\nfi\n\nif [ \"${kernel_pattern}\" ] && [ \"${dtb_pattern}\" ]; then\n  fat_path=\"/fat.img\"\n  echo \"Extracting partitions\"\n  fdisk -l ${image_path} \\\n    | awk \"/^[^ ]*1/{print \\\"dd if=${image_path} of=${fat_path} bs=512 skip=\\\"\\$4\\\" count=\\\"\\$6}\" \\\n    | sh\n\n  echo \"Extracting boot filesystem\"\n  fat_folder=\"/fat\"\n  mkdir -p \"${fat_folder}\"\n  fatcat -x \"${fat_folder}\" \"${fat_path}\"\n\n  root=/dev/mmcblk0p2\n\n  echo \"Searching for kernel='${kernel_pattern}'\"\n  kernel=$(find \"${fat_folder}\" -name \"${kernel_pattern}\")\n\n  echo \"Searching for dtb='${dtb_pattern}'\"\n  dtb=$(find \"${fat_folder}\" -name \"${dtb_pattern}\")\nfi\n\nif [ \"${kernel}\" = \"\" ] || [ \"${dtb}\" = \"\" ]; then\n  echo \"Missing kernel='${kernel}' or dtb='${dtb}'\"\n  exit 2\nfi\n\necho \"Booting QEMU machine \\\"${machine}\\\" with kernel=${kernel} dtb=${dtb}\"\nexec ${emulator} \\\n  --machine \"${machine}\" \\\n  --cpu arm1176 \\\n  --m \"${memory}\" \\\n  --drive \"format=raw,file=${image_path}\" \\\n  ${nic} \\\n  --dtb \"${dtb}\" \\\n  --kernel \"${kernel}\" \\\n  --append \"rw earlyprintk loglevel=8 console=ttyAMA0,115200 dwc_otg.lpm_enable=0 root=${root} rootwait panic=1 ${append}\" \\\n  --no-reboot \\\n  --display none \\\n  --serial mon:stdio\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}