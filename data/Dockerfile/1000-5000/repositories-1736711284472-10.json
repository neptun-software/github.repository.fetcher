{
  "metadata": {
    "timestamp": 1736711284472,
    "page": 10,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sprintcube/docker-compose-lamp",
      "stars": 2704,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.068359375,
          "content": "/.env\n/.vscode\n/config/*\n/data/*\n/logs/*\n/www/**\n.DS_Store\n/buildtest\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0986328125,
          "content": "MIT License\n\nCopyright (c) 2017 Narendra Vaghela\nCopyright (c) 2019 Malte Graebner aka (MrOffline77)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.3330078125,
          "content": "# LAMP stack built with Docker Compose\n\n![Landing Page](https://user-images.githubusercontent.com/43859895/141092846-905eae39-0169-4fd7-911f-9ff32c48b7e8.png)\n\nA basic LAMP stack environment built using Docker Compose. It consists of the following:\n\n- PHP\n- Apache\n- MySQL\n- phpMyAdmin\n- Redis\n\nAs of now, we have several different PHP versions. Use appropriate php version as needed:\n\n- 5.4.x\n- 5.6.x\n- 7.1.x\n- 7.2.x\n- 7.3.x\n- 7.4.x\n- 8.0.x\n- 8.1.x\n- 8.2.x\n- 8.3.x\n\n## Installation\n\n- Clone this repository on your local computer\n- configure .env as needed\n- Run the `docker compose up -d`.\n\n```shell\ngit clone https://github.com/sprintcube/docker-compose-lamp.git\ncd docker-compose-lamp/\ncp sample.env .env\n// modify sample.env as needed\ndocker compose up -d\n// visit localhost\n```\n\nYour LAMP stack is now ready!! You can access it via `http://localhost`.\n\n## Configuration and Usage\n\n### General Information\n\nThis Docker Stack is build for local development and not for production usage.\n\n### Configuration\n\nThis package comes with default configuration options. You can modify them by creating `.env` file in your root directory.\nTo make it easy, just copy the content from `sample.env` file and update the environment variable values as per your need.\n\n### Configuration Variables\n\nThere are following configuration variables available and you can customize them by overwritting in your own `.env` file.\n\n---\n\n#### PHP\n\n---\n\n_**PHPVERSION**_\nIs used to specify which PHP Version you want to use. Defaults always to latest PHP Version.\n\n_**PHP_INI**_\nDefine your custom `php.ini` modification to meet your requirments.\n\n---\n\n#### Apache\n\n---\n\n_**DOCUMENT_ROOT**_\n\nIt is a document root for Apache server. The default value for this is `./www`. All your sites will go here and will be synced automatically.\n\n_**APACHE_DOCUMENT_ROOT**_\n\nApache config file value. The default value for this is /var/www/html.\n\n_**VHOSTS_DIR**_\n\nThis is for virtual hosts. The default value for this is `./config/vhosts`. You can place your virtual hosts conf files here.\n\n> Make sure you add an entry to your system's `hosts` file for each virtual host.\n\n_**APACHE_LOG_DIR**_\n\nThis will be used to store Apache logs. The default value for this is `./logs/apache2`.\n\n---\n\n#### Database\n\n---\n\n> For Apple Silicon Users:\n> Please select Mariadb as Database. Oracle doesn't build their SQL Containers for the arm Architecture\n\n_**DATABASE**_\n\nDefine which MySQL or MariaDB Version you would like to use.\n\n_**MYSQL_INITDB_DIR**_\n\nWhen a container is started for the first time files in this directory with the extensions `.sh`, `.sql`, `.sql.gz` and\n`.sql.xz` will be executed in alphabetical order. `.sh` files without file execute permission are sourced rather than executed.\nThe default value for this is `./config/initdb`.\n\n_**MYSQL_DATA_DIR**_\n\nThis is MySQL data directory. The default value for this is `./data/mysql`. All your MySQL data files will be stored here.\n\n_**MYSQL_LOG_DIR**_\n\nThis will be used to store Apache logs. The default value for this is `./logs/mysql`.\n\n## Web Server\n\nApache is configured to run on port 80. So, you can access it via `http://localhost`.\n\n#### Apache Modules\n\nBy default following modules are enabled.\n\n- rewrite\n- headers\n\n> If you want to enable more modules, just update `./bin/phpX/Dockerfile`. You can also generate a PR and we will merge if seems good for general purpose.\n> You have to rebuild the docker image by running `docker compose build` and restart the docker containers.\n\n#### Connect via SSH\n\nYou can connect to web server using `docker compose exec` command to perform various operation on it. Use below command to login to container via ssh.\n\n```shell\ndocker compose exec webserver bash\n```\n\n## PHP\n\nThe installed version of php depends on your `.env`file.\n\n#### Extensions\n\nBy default following extensions are installed.\nMay differ for PHP Versions <7.x.x\n\n- mysqli\n- pdo_sqlite\n- pdo_mysql\n- mbstring\n- zip\n- intl\n- mcrypt\n- curl\n- json\n- iconv\n- xml\n- xmlrpc\n- gd\n\n> If you want to install more extension, just update `./bin/webserver/Dockerfile`. You can also generate a PR and we will merge if it seems good for general purpose.\n> You have to rebuild the docker image by running `docker compose build` and restart the docker containers.\n\n## phpMyAdmin\n\nphpMyAdmin is configured to run on port 8080. Use following default credentials.\n\nhttp://localhost:8080/  \nusername: root  \npassword: tiger\n\n## Xdebug\n\nXdebug comes installed by default and it's version depends on the PHP version chosen in the `\".env\"` file.\n\n**Xdebug versions:**\n\nPHP <= 7.3: Xdebug 2.X.X\n\nPHP >= 7.4: Xdebug 3.X.X\n\nTo use Xdebug you need to enable the settings in the `./config/php/php.ini` file according to the chosen version PHP.\n\nExample:\n\n```\n# Xdebug 2\n#xdebug.remote_enable=1\n#xdebug.remote_autostart=1\n#xdebug.remote_connect_back=1\n#xdebug.remote_host = host.docker.internal\n#xdebug.remote_port=9000\n\n# Xdebug 3\n#xdebug.mode=debug\n#xdebug.start_with_request=yes\n#xdebug.client_host=host.docker.internal\n#xdebug.client_port=9003\n#xdebug.idekey=VSCODE\n```\n\nXdebug VS Code: you have to install the Xdebug extension \"PHP Debug\". After installed, go to Debug and create the launch file so that your IDE can listen and work properly.\n\nExample:\n\n**VERY IMPORTANT:** the `pathMappings` depends on how you have opened the folder in VS Code. Each folder has your own configurations launch, that you can view in `.vscode/launch.json`\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Listen for Xdebug\",\n      \"type\": \"php\",\n      \"request\": \"launch\",\n      // \"port\": 9000, // Xdebug 2\n      \"port\": 9003, // Xdebug 3\n      \"pathMappings\": {\n        // \"/var/www/html\": \"${workspaceFolder}/www\" // if you have opened VSCODE in root folder\n        \"/var/www/html\": \"${workspaceFolder}\" // if you have opened VSCODE in ./www folder\n      }\n    }\n  ]\n}\n```\n\nNow, make a breakpoint and run debug.\n\n**Tip!** After theses configurations, you may need to restart container.\n\n## Redis\n\nIt comes with Redis. It runs on default port `6379`.\n\n## SSL (HTTPS)\n\nSupport for `https` domains is built-in but disabled by default. There are 3 ways you can enable and configure SSL; `https` on `localhost` being the easiest. If you are trying to recreating a testing environment as close as possible to a production environment, any domain name can be supported with more configuration.\n\n**Notice:** For every non-localhost domain name you wish to use `https` on, you will need to modify your computers [hosts file](https://en.wikipedia.org/wiki/Hosts_%28file%29) and point the domain name to `127.0.0.1`. If you fail to do this SSL will not work and you will be routed to the internet every time you try to visit that domain name locally.\n\n### 1) HTTPS on Localhost\n\nTo enable `https` on `localhost` (https://localhost) you will need to:\n\n1. Use a tool like [mkcert](https://github.com/FiloSottile/mkcert#installation) to create an SSL certificate for `localhost`:\n   - With `mkcert`, in the terminal run `mkcert localhost 127.0.0.1 ::1`.\n   - Rename the files that were generated `cert.pem` and `cert-key.pem` respectively.\n   - Move these files into your docker setup by placing them in `config/ssl` directory.\n2. Uncomment the `443` vhost in `config/vhosts/default.conf`.\n\nDone. Now any time you turn on your LAMP container `https` will work on `localhost`.\n\n### 2) HTTPS on many Domains with a Single Certificate\n\nIf you would like to use normal domain names for local testing, and need `https` support, the simplest solution is an SSL certificate that covers all the domain names:\n\n1. Use a tool like [mkcert](https://github.com/FiloSottile/mkcert#installation) to create an SSL certificate that covers all the domain names you want:\n   - With `mkcert`, in the terminal run `mkcert example.com \"*.example.org\" myapp.dev localhost 127.0.0.1 ::1` where you replace all the domain names and IP addresses to the ones you wish to support.\n   - Rename the files that were generated `cert.pem` and `cert-key.pem` respectively.\n   - Move these files into your docker setup by placing them in `config/ssl` directory.\n2. Uncomment the `443` vhost in `config/vhosts/default.conf`.\n\nDone. Since you combined all the domain names into a single certificate, the vhost file will support your setup without needing to modify it further. You could add domain specific rules if you wish however. Now any time you turn on your LAMP container `https` will work on all the domains you specified.\n\n### 3) HTTPS on many Domain with Multiple Certificates\n\nIf you would like your local testing environment to exactly match your production, and need `https` support, you could create an SSL certificate for every domain you wish to support:\n\n1. Use a tool like [mkcert](https://github.com/FiloSottile/mkcert#installation) to create an SSL certificate that covers the domain name you want:\n   - With `mkcert`, in the terminal run `mkcert [your-domain-name(s)-here]` replacing the bracket part with your domain name.\n   - Rename the files that were generated to something unique like `[name]-cert.pem` and `[name]-cert-key.pem` replacing the bracket part with a unique name.\n   - Move these files into your docker setup by placing them in `config/ssl` directory.\n2. Using the `443` example from the vhost file (`config/vhosts/default.conf`), make new rules that match your domain name and certificate file names.\n\nDone. The LAMP container will auto pull in any SSL certificates in `config/ssl` when it starts. As long as you configure the vhosts file correctly and place the SSL certificates in `config/ssl`, any time you turn on your LAMP container `https` will work on your specified domains.\n\n## Contributing\n\nWe are happy if you want to create a pull request or help people with their issues. If you want to create a PR, please remember that this stack is not built for production usage, and changes should be good for general purpose and not overspecialized.\n\n> Please note that we simplified the project structure from several branches for each php version, to one centralized master branch. Please create your PR against master branch.\n>\n> Thank you!\n\n## Why you shouldn't use this stack unmodified in production\n\nWe want to empower developers to quickly create creative Applications. Therefore we are providing an easy to set up a local development environment for several different Frameworks and PHP Versions.\nIn Production you should modify at a minimum the following subjects:\n\n- php handler: mod_php=> php-fpm\n- secure mysql users with proper source IP limitations\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev_build_container.sh",
          "type": "blob",
          "size": 5.060546875,
          "content": "#!/bin/bash\n\n# This script is for building\n# all stack variations and check for errors\n# during the mysqli and pdo connect.\n# This Script is build for Linux\n# Info:\n# This Script works on WSL2 _but_ you cant use\n# WSL2 Windows Host mounted paths for the data.\n\ndc=$(which docker-compose)\nosversion=$(uname)\ndbarr=(mariadb103 mariadb104 mariadb105 mariadb106 mysql57 mysql8)\n\ncheckdep() {\n\necho \"### checking dependencies\"\nwhich docker || { echo 'Executable not found: docker' ; exit 1; }\nwhich docker-compose || { echo 'Executable not found: docker-compose' ; exit 1; }\nwhich curl || { echo 'Executable not found: curl' ; exit 1; }\nwhich sed || { echo 'Executable not found: sed' ; exit 1; }\n}\n\nusage() {\n\necho \"Usage:\"\necho \"       -b = build all container variations of specified version\"\necho \"            valid values are: php54, php56, php71, php72, php73, php74, php8, php81, php82\"\necho -e \" \\nAttention: !!! SCRIPT REMOVES ALL DATA IN 'data/mysql/*' !!!\"\n}\n\n# build stack variations\nbuild () {\n\n        echo \"### building $buildtarget-$version\"\n\n                # removing old mysql data, old data prevents mysql\n                # from starting correct\n                echo -e \"### cleaning old mysql data\"\n                rm -rf ./data/mysql/*\n                echo -e \"### building ./buildtarget/$buildtarget-$version.env \\n\"\n                $dc --env-file ./buildtest/$buildtarget-$version.env up -d --build\n                # wait for mysql to initialize\n                sleep 30\n                # check definitions\n                curlmysqli=$(curl -s --max-time 15 --connect-timeout 15 http://localhost/test_db.php |grep proper |wc -l |tr -d '[:space:]')\n                curlpdo=$(curl -s --max-time 15 --connect-timeout 15 http://localhost/test_db_pdo.php |grep proper |wc -l |tr -d '[:space:]')\n\n                        # check if we can create a successfull connection to the database\n                        # 1=OK  everything else is not ok\n                        if [ \"$curlmysqli\" -ne \"1\" ]; then\n                                echo -e \"### ERROR: myqli database check failed expected string 'proper' not found \\n\"\n                                echo \"### ...stopping container\"\n                                $dc --env-file ./buildtest/$buildtarget-$version.env down\n                                exit\n                        else\n                                echo -e \"\\n OK - mysqli database check successfull \\n\"\n                                sleep 3\n                        fi\n\n                        if [ \"$curlpdo\" -ne \"1\" ]; then\n                                echo -e \"### ERROR: pdo database check failed expected string 'proper' not found \\n\"\n                                echo \"### ...stopping container\"\n                                $dc --env-file ./buildtest/$buildtarget-$version.env down\n                                exit\n                        else\n                                echo -e \"\\n OK - pdo database check successfull \\n\"\n                                sleep 3\n                        fi\n\n                echo \"### ... stopping container\"\n                $dc --env-file ./buildtest/$buildtarget-$version.env down\n}\n\nbuildenvfile () {\n\ncat sample.env > ./buildtest/\"$buildtarget\"-\"$version\".env\nsed -i \"s/COMPOSE_PROJECT_NAME=lamp/COMPOSE_PROJECT_NAME=$buildtarget-buildtest/\" ./buildtest/\"$buildtarget\"-\"$version\".env\nsed -i \"s/PHPVERSION=php8/PHPVERSION=$buildtarget/\" ./buildtest/\"$buildtarget\"-\"$version\".env\nsed -i \"s/DATABASE=mysql8/DATABASE=$version/\" ./buildtest/\"$buildtarget\"-\"$version\".env\n}\n\nprepare () {\n\n# generate all .env files for building\necho \"### building env file\"\nmkdir -p ./buildtest\nrm -rf ./buildtest/\"$buildtarget\"*\n}\n\ncleanup () {\n\necho \"### cleaning old env file\"\nrm -rf ./buildtest/\"$buildtarget\"*\n}\n\nwhile getopts \":b:\" opt;\ndo\n        case \"${opt}\" in\n                b) buildtarget=${OPTARG};;\n        esac\n        no_args=\"false\"\ndone\n\n# check user input\n[[ \"$no_args\" == \"true\" ]] && { usage; exit 1; }\n\n# check if we are running on Linux\nif [[ $osversion != 'Linux' ]]; then\n        echo \"This Script only supports Linux sorry :(\"\n        exit\nfi\n\n# we don't want to test against mysql8 for the old\n# php versions due to pdo, therefore we only\n# take the first 5 elements of the database versions arrays\n\nif [ \"$buildtarget\" == 'php54' ]||[ \"$buildtarget\" == 'php56' ]||[ \"$buildtarget\" == 'php71' ]||\\\n   [ \"$buildtarget\" == 'php72' ]||[ \"$buildtarget\" == 'php73' ] ; then\n        for version in \"${dbarr[@]:0:5}\"\n        do\n                checkdep\n                prepare\n                buildenvfile \"$buildtarget\" \"$version\"\n                build \"$buildtarget\" \"$version\"\n                cleanup\n        done\nelif [ \"$buildtarget\" == 'php74' ]||[ \"$buildtarget\" == 'php8' ]||[ \"$buildtarget\" == 'php81' ] || [ \"$buildtarget\" == 'php82' ] || [ \"$buildtarget\" == 'php83' ] ; then\n        for version in \"${dbarr[@]}\"\n        do\n                checkdep\n                prepare\n                buildenvfile \"$buildtarget\" \"$version\"\n                build \"$buildtarget\" \"$version\"\n                cleanup\n        done\nelse\n        echo \"Input not valid\"\n        usage\nfi\n\nexit"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 2.451171875,
          "content": "version: \"3\"\n\nservices:\n  webserver:\n    build:\n      context: ./bin/${PHPVERSION}\n    container_name: \"${COMPOSE_PROJECT_NAME}-${PHPVERSION}\"\n    restart: \"always\"\n    ports:\n      - \"${HOST_MACHINE_UNSECURE_HOST_PORT}:80\"\n      - \"${HOST_MACHINE_SECURE_HOST_PORT}:443\"\n    links:\n      - database\n    volumes:\n      - ${DOCUMENT_ROOT-./www}:/var/www/html:rw\n      - ${PHP_INI-./config/php/php.ini}:/usr/local/etc/php/php.ini\n      - ${SSL_DIR-./config/ssl}:/etc/apache2/ssl/\n      - ${VHOSTS_DIR-./config/vhosts}:/etc/apache2/sites-enabled\n      - ${LOG_DIR-./logs/apache2}:/var/log/apache2\n      - ${XDEBUG_LOG_DIR-./logs/xdebug}:/var/log/xdebug\n    environment:\n      APACHE_DOCUMENT_ROOT: ${APACHE_DOCUMENT_ROOT-/var/www/html}\n      PMA_PORT: ${HOST_MACHINE_PMA_PORT}\n      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}\n      MYSQL_USER: ${MYSQL_USER}\n      MYSQL_PASSWORD: ${MYSQL_PASSWORD}\n      MYSQL_DATABASE: ${MYSQL_DATABASE}\n      HOST_MACHINE_MYSQL_PORT: ${HOST_MACHINE_MYSQL_PORT}\n      XDEBUG_CONFIG: \"client_host=host.docker.internal remote_port=${XDEBUG_PORT}\"\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n  database:\n    build:\n      context: \"./bin/${DATABASE}\"\n    container_name: \"${COMPOSE_PROJECT_NAME}-${DATABASE}\"\n    restart: \"always\"\n    ports:\n      - \"127.0.0.1:${HOST_MACHINE_MYSQL_PORT}:3306\"\n    volumes:\n      - ${MYSQL_INITDB_DIR-./config/initdb}:/docker-entrypoint-initdb.d\n      - ${MYSQL_DATA_DIR-./data/mysql}:/var/lib/mysql\n      - ${MYSQL_LOG_DIR-./logs/mysql}:/var/log/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}\n      MYSQL_DATABASE: ${MYSQL_DATABASE}\n      MYSQL_USER: ${MYSQL_USER}\n      MYSQL_PASSWORD: ${MYSQL_PASSWORD}\n  phpmyadmin:\n    image: phpmyadmin\n    container_name: \"${COMPOSE_PROJECT_NAME}-phpmyadmin\"\n    links:\n      - database\n    environment:\n      PMA_HOST: database\n      PMA_PORT: 3306\n      PMA_USER: root\n      PMA_PASSWORD: ${MYSQL_ROOT_PASSWORD}\n      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}\n      MYSQL_USER: ${MYSQL_USER}\n      MYSQL_PASSWORD: ${MYSQL_PASSWORD}\n      UPLOAD_LIMIT: ${UPLOAD_LIMIT}\n      MEMORY_LIMIT: ${MEMORY_LIMIT}\n    ports:\n      - \"${HOST_MACHINE_PMA_PORT}:80\"\n      - \"${HOST_MACHINE_PMA_SECURE_PORT}:443\"\n    volumes:\n      - /sessions\n      - ${PHP_INI-./config/php/php.ini}:/usr/local/etc/php/conf.d/php-phpmyadmin.ini\n  redis:\n    container_name: \"${COMPOSE_PROJECT_NAME}-redis\"\n    image: redis:latest\n    ports:\n      - \"127.0.0.1:${HOST_MACHINE_REDIS_PORT}:6379\"\n"
        },
        {
          "name": "logs",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample.env",
          "type": "blob",
          "size": 1.810546875,
          "content": "# Please Note:\n# In PHP Versions <= 7.4 MySQL8 is not supported due to lacking pdo support\n\n# To determine the name of your containers\nCOMPOSE_PROJECT_NAME=lamp\n\n# Possible values: php54, php56, php71, php72, php73, php74, php8, php81, php82, php83\nPHPVERSION=php83\nDOCUMENT_ROOT=./www\nAPACHE_DOCUMENT_ROOT=/var/www/html\nVHOSTS_DIR=./config/vhosts\nAPACHE_LOG_DIR=./logs/apache2\nPHP_INI=./config/php/php.ini\nSSL_DIR=./config/ssl\n\n# PHPMyAdmin\nUPLOAD_LIMIT=512M\nMEMORY_LIMIT=512M\n\n# Xdebug\nXDEBUG_LOG_DIR=./logs/xdebug\nXDEBUG_PORT=9003\n#XDEBUG_PORT=9000\n\n# Possible values: mysql57, mysql8, mariadb103, mariadb104, mariadb105, mariadb106\n#\n# For Apple Silicon User: \n# Please select Mariadb as Database. Oracle doesn't build their SQL Containers for the arm Architecure\n\nDATABASE=mysql8\nMYSQL_INITDB_DIR=./config/initdb\nMYSQL_DATA_DIR=./data/mysql\nMYSQL_LOG_DIR=./logs/mysql\n\n# If you already have the port 80 in use, you can change it (for example if you have Apache)\nHOST_MACHINE_UNSECURE_HOST_PORT=80\n\n# If you already have the port 443 in use, you can change it (for example if you have Apache)\nHOST_MACHINE_SECURE_HOST_PORT=443\n\n# If you already have the port 3306 in use, you can change it (for example if you have MySQL)\nHOST_MACHINE_MYSQL_PORT=3306\n\n# If you already have the port 8080 in use, you can change it (for example if you have PMA)\nHOST_MACHINE_PMA_PORT=8080\nHOST_MACHINE_PMA_SECURE_PORT=8443\n\n# If you already has the port 6379 in use, you can change it (for example if you have Redis)\nHOST_MACHINE_REDIS_PORT=6379\n\n# MySQL root user password\nMYSQL_ROOT_PASSWORD=tiger\n\n# Database settings: Username, password and database name\n#\n# If you need to give the docker user access to more databases than the \"docker\" db \n# you can grant the privileges with phpmyadmin to the user.\nMYSQL_USER=docker\nMYSQL_PASSWORD=docker\nMYSQL_DATABASE=docker\n"
        },
        {
          "name": "todo.md",
          "type": "blob",
          "size": 0.0810546875,
          "content": "# ToDo List \n\n* Redesign readme.md for better readability\n* Update issue templates\n"
        },
        {
          "name": "www",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}