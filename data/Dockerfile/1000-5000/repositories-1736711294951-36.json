{
  "metadata": {
    "timestamp": 1736711294951,
    "page": 36,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jrottenberg/ffmpeg",
      "stars": 1463,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.1865234375,
          "content": "list_of_recent_images.txt\ngenerated_build_manifest.json\ngenerated_build_versions_manifest.json\ngenerated_versions_table.md\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control\n.pdm.toml\n.pdm-python\n.pdm-build/\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 0.6318359375,
          "content": "pre-commit:\n  image: python:3\n  stage: lint\n  script:\n    - pip install pre-commit packaging\n    - pre-commit run --all-files --show-diff-on-failure\n  artifacts:\n    expire_in: 1 days\n    paths:\n      - docker-images/\n\n.docker:\n  image: docker:latest\n  variables:\n    GIT_STRATEGY: none\n  services:\n    - docker:19-dind\n  before_script:\n    - export IMAGE=\"ffmpeg:${VERSION}-${VARIANT:-ubuntu}\"\n  script:\n    - docker build -t \"${IMAGE}\" --build-arg MAKEFLAGS=\"-j$(($(nproc) + 1))\" docker-images/${VERSION}/${VARIANT}\n    - docker images\n  after_script:\n    - docker run --rm ${IMAGE} -buildconf\n\ninclude:\n  - local: \"docker-images/gitlab-ci.yml\"\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.234375,
          "content": "repos: # pre-commit autoupdate\n  - repo: https://github.com/pycqa/flake8\n    rev: \"7.1.1\"\n    hooks:\n      - id: flake8\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.6.0\n    hooks:\n      - id: trailing-whitespace\n      - id: check-added-large-files\n      - id: check-ast\n      - id: check-json\n      - id: check-merge-conflict\n      - id: check-xml\n      - id: check-yaml\n      - id: debug-statements\n      - id: end-of-file-fixer\n      - id: requirements-txt-fixer\n      - id: mixed-line-ending\n        args: [\"--fix=auto\"] # replace 'auto' with 'lf' to enforce Linux/Mac line endings or 'crlf' for Windows\n\n  # If you want to avoid flake8 errors due to unused vars or imports:\n  - repo: https://github.com/myint/autoflake.git\n    rev: v2.3.1\n    hooks:\n      - id: autoflake\n        args:\n          [--in-place, --remove-all-unused-imports, --remove-unused-variables]\n\n  - repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n\n  - repo: https://github.com/psf/black\n    rev: 24.8.0\n    hooks:\n      - id: black\n        language_version: python3\n\n  - repo: local\n    hooks:\n      - id: update\n        name: Generate Dockerfiles\n        entry: ./update.py\n        language: python\n        pass_filenames: false\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.3603515625,
          "content": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n[INSERT CONTACT METHOD].\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.2568359375,
          "content": "# Welcome to ffmpeg docker image contributing guide <!-- omit in toc -->\n\nThank you for investing your time in contributing to our project! Any contribution you make will be reflected on [jrottenberg/ffmpeg](https://github.com/jrottenberg/ffmpeg) :tada:.\n\nRead our [Code of Conduct](./CODE_OF_CONDUCT.md) to keep our community approachable and respectable.\n\nIn this guide you will get an overview of the contribution workflow from opening an issue, creating a PR, reviewing, and merging the PR.\n\n\n## Opening an issue\n\nMake sure you search exisiting issues, that there is no duplicate, before opening a new one. If you are raising a bug, give enough information so we can reproduce it locally:\n\n- Command you ran\n- Observed output\n- Expected output\n\n\n## Creating a PR\n\n### Local change\n\nBefore you open a PR make the change locally and verify it passes pre-commit :\n\n\n```sh\npip install pre-commit\npre-commit install # inside the local checkout\npre-commit run -a # to force a run, but it will execute on commits\n```\n\nManual changes are expected in the `templates/` folder or `./update.py`\n\n__Don't__ make changes directly into the _generated_ `docker-images/` folder. Updates are variant specific (`templates/Dockerfile-template.*`) or ffmpeg specific (`templates/Dockerfile-env` and `templates/Dockerfile-run`). Either way after a change, run `./update.py` to regenerate all the Dockerfile files.\n\nIf you forget and don't have pre-commit configured, the pre-commit step will fail anyway.\n\n\n```sh\n# Generates the Dockerfile for all variants\n./update.py\n\npre-commit run -a # recommended\n\n# Test a specific variant\ndocker build -t my-build docker-images/VERSION/\n\n# Make sure all variants pass before CI\nfind ffmpeg/ -name Dockerfile | xargs dirname | parallel --no-notice -j 4 --results logs docker build -t {} {}\n```\n\n<details><summary>Some detailed examples, of building and running</summary>\n\nIf you are not running the amd64 platform, you may need to pass in the --platform flag to build with docker desktop\n- 7.1-ubuntu2404\n\n```sh\n$ ./update.py; docker build --platform linux/amd64 -t ffmpeg-7.1-ubuntu2404-desktop-build docker-images/7.1/ubuntu2404\n$ docker run -it --rm --entrypoint='bash' --platform=\"linux/amd64\" ffmpeg-7.1-ubuntu2404-desktop-build:latest\n```\n\n- 7.1-ubuntu2404-edge\n\n```sh\n$ ./update.py; docker build --platform linux/amd64 -t ffmpeg-7.1-ubuntu2404-edge-desktop-build docker-images/7.1/ubuntu2404-edge\n$ docker run -it --rm --entrypoint='bash' --platform=\"linux/amd64\" ffmpeg-7.1-ubuntu2404-edge-desktop-build:latest\n```\n\n- 7.1-nvidia2404\n\n```sh\n$ ./update.py; docker build --platform linux/amd64 -t ffmpeg-7.1-nvidia2404-desktop-build docker-images/7.1/nvidia2404\n$ docker run -it --rm --entrypoint='bash' --platform=\"linux/amd64\" ffmpeg-7.1-nvidia2404-desktop-build:latest\n```\n\n- vaapi2404\n```sh\n$ ./update.py; docker build --platform linux/amd64 -t ffmpeg-7.1-vaapi2404-desktop-build docker-images/7.1/vaapi2404\n$ docker run -it --rm --entrypoint='bash' --platform=\"linux/amd64\" ffmpeg-7.1-vaapi2404-desktop-build:latest\n```\n\n- alpine320\n```sh\n$ ./update.py; docker build --platform linux/amd64 -t ffmpeg-7.1-alpine320-desktop-build docker-images/7.1/alpine320\n$ docker run -it --rm --entrypoint='sh' --platform=\"linux/amd64\" ffmpeg-7.1-alpine320-desktop-build:latest\n```\n\n```sh\n$ ./update.py; docker build --platform linux/amd64 -t ffmpeg-7.1-scratch320-desktop-build docker-images/7.1/scratch320\n$ docker run -it --rm --entrypoint='sh' --platform=\"linux/amd64\" ffmpeg-7.1-scratch320-desktop-build:latest\n```\n\n</details>\n\n<details><summary>More testing notes</summary>\n\n\n```\n1: simply run the image: which should output the ffmpeg help\n`docker run -it --rm --platform=\"linux/amd64\" ffmpeg-7.1-ubuntu2404-desktop-build:latest`\n\n2: now run the image in bash\n`docker run -it --rm --entrypoint=bash --platform=\"linux/amd64\" ffmpeg-7.1-ubuntu2404-desktop-build:latest`\n\nIn the bash shell, run the following commands\n   $ ffmpeg\n   $ ffmpeg -h\n   $ ldd `which ffmpeg`\n   Note: this next command on alipne will need to be modified to look in '/lib/' instead of '/usr/local/'\n         but they are all there\n   $ for i in ogg amr vorbis theora mp3lame opus vpx xvid fdk x264 x265;do echo $i; find /usr/local/ -name *$i*;done\n   $ ffmpeg -buildconf\n   $ ffmpeg -filters\n\n3: Convert an avi file to an mp4 file.\n   `docker run --rm -v $(pwd):$(pwd) -w $(pwd) --platform=\"linux/amd64\" ffmpeg-7.1-ubuntu2404-desktop-build:latest -i drop_video_1.avi outfile/dv_converted.mp4`\n\n4: Convert a asf file to an mp4\n   `docker run --rm -v $(pwd):$(pwd) -w $(pwd) --platform=\"linux/amd64\" ffmpeg-7.1-ubuntu2404-desktop-build:latest -i MU_2_Discharge_Bottle___Inlet_to_Discharge.asf outfile/mpu2_discharge_bottle_converted.mp4`\n\n5: using a drawtext filter\n   `docker run --rm -v $(pwd):$(pwd) -w $(pwd) --platform=\"linux/amd64\" jrottenberg/ffmpeg:7.1-ubuntu2404 -i sample-5s_1.mp4 -vf \"drawtext=text='Stack Overflow':fontcolor=white:fontsize=24:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w)/2:y=(h-text_h)/2\" outfile/sample-5s_1_with_text.mp4`\n```\n</details>\n\n# Reviewing\n\n\nTo make reviews simpler, try to limit changes to one functionnality or bug fix (no `and`)\n\n\n# Merging the PR\n\n\nWorking on that project is not my day job, although I do enjoy maintaining it, I can't guarantee a review the same day.\n\nDon't hesitate to ping me if an issue has been opened for too long.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.0322265625,
          "content": "Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright\nowner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities\nthat control, are controlled by, or are under common control with that entity.\nFor the purposes of this definition, \"control\" means (i) the power, direct or\nindirect, to cause the direction or management of such entity, whether by\ncontract or otherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including\nbut not limited to software source code, documentation source, and configuration\nfiles.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object code,\ngenerated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made\navailable under the License, as indicated by a copyright notice that is included\nin or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative Works\nshall not include works that remain separable from, or merely link (or bind by\nname) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version\nof the Work and any modifications or additions to that Work or Derivative Works\nthereof, that is intentionally submitted to Licensor for inclusion in the Work\nby the copyright owner or by an individual or Legal Entity authorized to submit\non behalf of the copyright owner. For the purposes of this definition,\n\"submitted\" means any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems, and\nissue tracking systems that are managed by, or on behalf of, the Licensor for\nthe purpose of discussing and improving the Work, but excluding communication\nthat is conspicuously marked or otherwise designated in writing by the copyright\nowner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.\n\n2. Grant of Copyright License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable copyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the Work and such\nDerivative Works in Source or Object form.\n\n3. Grant of Patent License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable (except as stated in this section) patent license to make, have\nmade, use, offer to sell, sell, import, and otherwise transfer the Work, where\nsuch license applies only to those patent claims licensable by such Contributor\nthat are necessarily infringed by their Contribution(s) alone or by combination\nof their Contribution(s) with the Work to which such Contribution(s) was\nsubmitted. If You institute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work or a\nContribution incorporated within the Work constitutes direct or contributory\npatent infringement, then any patent licenses granted to You under this License\nfor that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution.\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof\nin any medium, with or without modifications, and in Source or Object form,\nprovided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of\nthis License; and\nYou must cause any modified files to carry prominent notices stating that You\nchanged the files; and\nYou must retain, in the Source form of any Derivative Works that You distribute,\nall copyright, patent, trademark, and attribution notices from the Source form\nof the Work, excluding those notices that do not pertain to any part of the\nDerivative Works; and\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any\nDerivative Works that You distribute must include a readable copy of the\nattribution notices contained within such NOTICE file, excluding those notices\nthat do not pertain to any part of the Derivative Works, in at least one of the\nfollowing places: within a NOTICE text file distributed as part of the\nDerivative Works; within the Source form or documentation, if provided along\nwith the Derivative Works; or, within a display generated by the Derivative\nWorks, if and wherever such third-party notices normally appear. The contents of\nthe NOTICE file are for informational purposes only and do not modify the\nLicense. You may add Your own attribution notices within Derivative Works that\nYou distribute, alongside or as an addendum to the NOTICE text from the Work,\nprovided that such additional attribution notices cannot be construed as\nmodifying the License.\nYou may add Your own copyright statement to Your modifications and may provide\nadditional or different license terms and conditions for use, reproduction, or\ndistribution of Your modifications, or for any such Derivative Works as a whole,\nprovided Your use, reproduction, and distribution of the Work otherwise complies\nwith the conditions stated in this License.\n\n5. Submission of Contributions.\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted\nfor inclusion in the Work by You to the Licensor shall be under the terms and\nconditions of this License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify the terms of\nany separate license agreement you may have executed with Licensor regarding\nsuch Contributions.\n\n6. Trademarks.\n\nThis License does not grant permission to use the trade names, trademarks,\nservice marks, or product names of the Licensor, except as required for\nreasonable and customary use in describing the origin of the Work and\nreproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty.\n\nUnless required by applicable law or agreed to in writing, Licensor provides the\nWork (and each Contributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,\nincluding, without limitation, any warranties or conditions of TITLE,\nNON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are\nsolely responsible for determining the appropriateness of using or\nredistributing the Work and assume any risks associated with Your exercise of\npermissions under this License.\n\n8. Limitation of Liability.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special, incidental,\nor consequential damages of any character arising as a result of this License or\nout of the use or inability to use the Work (including but not limited to\ndamages for loss of goodwill, work stoppage, computer failure or malfunction, or\nany and all other commercial damages or losses), even if such Contributor has\nbeen advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability.\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to\noffer, and charge a fee for, acceptance of support, warranty, indemnity, or\nother liability obligations and/or rights consistent with this License. However,\nin accepting such obligations, You may act only on Your own behalf and on Your\nsole responsibility, not on behalf of any other Contributor, and only if You\nagree to indemnify, defend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason of your\naccepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work\n\nTo apply the Apache License to your work, attach the following boilerplate\nnotice, with the fields enclosed by brackets \"[]\" replaced with your own\nidentifying information. (Don't include the brackets!) The text should be\nenclosed in the appropriate comment syntax for the file format. We also\nrecommend that a file or class name and description of purpose be included on\nthe same \"printed page\" as the copyright notice for easier identification within\nthird-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 24.1669921875,
          "content": "# FFmpeg Docker image\n\n[![Docker Stars](https://img.shields.io/docker/stars/jrottenberg/ffmpeg.svg?logo=docker&style=plastic)](https://registry.hub.docker.com/v2/repositories/jrottenberg/ffmpeg/stars/count/)\n[![Docker pulls](https://img.shields.io/docker/pulls/jrottenberg/ffmpeg.svg?logo=docker&style=plastic)](https://registry.hub.docker.com/v2/repositories/jrottenberg/ffmpeg/)\n[![Docker Automated build](https://img.shields.io/docker/automated/jrottenberg/ffmpeg.svg?logo=docker)](https://hub.docker.com/r/jrottenberg/ffmpeg/tags)\n[![Github Container Registry Images](https://img.shields.io/badge/images-automated-blue?logo=github&style=plastic)](https://github.com/jrottenberg/ffmpeg/pkgs/container/ffmpeg)\n[![gitlab pipeline status](https://gitlab.com/jrottenberg/ffmpeg/badges/main/pipeline.svg)](https://gitlab.com/jrottenberg/ffmpeg/commits/main)\n[![Azure Build Status](https://dev.azure.com/video-tools/ffmpeg/_apis/build/status/jrottenberg.ffmpeg)](https://dev.azure.com/video-tools/ffmpeg/_build/latest?definitionId=1)\n\n\nThis project prepares a minimalist Docker image with FFmpeg. It compiles FFmpeg from sources following instructions from the [Compilation Guide](https://trac.ffmpeg.org/wiki/CompilationGuide).\n\nYou can install the latest build of this image by running `docker pull jrottenberg/ffmpeg:${VERSION}-${VARIANT}` or `docker pull ghcr.io/jrottenberg/ffmpeg:${VERSION}-${VARIANT}`.\n\nThis image can be used as a base for an encoding farm.\n\n## Builds / Avaliabvle Docker Containers\n\nThere are different builds available:\nBelow is a table that provides examples for the nomenclature:\n\n`ffmpeg-<version>-<os variant and version>`\n\n| image name | OS ver | ffmpeg ver | variant | description\n| --- | --- | --- | --- | --- |\n| ffmpeg-7.1-ubuntu2404 | 24.04 | 6.x - 7.x | [ubuntu](https://releases.ubuntu.com/) | external libraries are installed from os packages, and ffmpeg is built from source. See [Ubuntu Compilation Guide](https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu) for details on this. |\n| ffmpeg-7.1-ubuntu2404-edge | 24.04 | 6.x - 7.x | [ubuntu](https://releases.ubuntu.com/) | libs and ffmpeg are built from source. See [Ubuntu Compilation Guide](https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu) for details on this. |\n| ffmpeg-7.1-vaapi2404 | 24.04 | 6.x - 7.x | [ubuntu](https://releases.ubuntu.com/) | like: `ubuntu2404` but enables: [Video Acceleration API (VAAPI)](https://trac.ffmpeg.org/wiki/HWAccelIntro#VAAPI) in ffmpeg |\n| ffmpeg-7.1-nvidia2204-edge | 22.04 | 6.x - 7.x | [ubuntu](https://releases.ubuntu.com/) | Built w/ [NVIDIA's hardware-accelerated encoding and decoding APIs](https://trac.ffmpeg.org/wiki/HWAccelIntro#CUDANVENCNVDEC) enabled |\n| ffmpeg-7.1-alpine320 | 3.20 | 6.x - 7.x | [alpine](https://alpinelinux.org/releases/) | vendor libs, but ffmpeg is built from source |\n| ffmpeg-7.1-scratch | 3.20 | 6.x - 7.x | [alpine](https://alpinelinux.org/releases/) | vendor libs, and ffmpeg are built from source. Also we make the distro as small as possible by not installing any packages in base and striping symbols of installed libs |\n\nffmpeg `<version>` can be one of the following: `6.1`, `7.0`, `7.1` with the above table.\n\nNote: The current versions of ffmpeg supported are  anything newer than 3 years old and not exceeded the end-of-life\n\n\n<details><summary>Here are some additional older builds</summary>\n\n- alpine based images `ffmpeg:<version>-alpine` or `ffmpeg:<version>-alpine313`  (old versions with `ffmpeg:<version>-alpine312` , `ffmpeg:<version>-alpine311`)\n  - alpine based scratch images `ffmpeg:<version>-scratch` or `ffmpeg:<version>-scratch313`   (old versions with `ffmpeg:<version>-scratch312` , `ffmpeg:<version>-scratch311`)\n- ubuntu based images `ffmpeg:<version>-ubuntu` or `ffmpeg:<version>-ubuntu2004` (old versions with `ffmpeg:<version>-ubuntu1804` , `ffmpeg:<version>-ubuntu1604`)\n  - ubuntu based nvidia images `ffmpeg:<version>-nvidia` or `ffmpeg:<version>-nvidia2004` (old versions with `ffmpeg:<version>-nvidia1804`, `ffmpeg:<version>-nvidia1604`)\n  - ubuntu based vaapi images `ffmpeg:<version>-vaapi1804` or `ffmpeg:<version>-vaapi2004` (old versions with `ffmpeg:<version>-vaapi1804`, `ffmpeg:<version>-nvidia1604`)\n\n</details>\n\n### Philosophy behind the different builds\n\n**ubuntu2404**\nWe chose Ubuntu 24.04 because it is the LTS ( Long Term Support ) build of Ubuntu.\nWe used the ffmpeg support libraries from the Ubuntu distrobution where possible. Example: we use 'libx264-dev' as the package to install. We do not tie it to a version. This way when its time to update from 24.04 to 26.04 we can simply update the base Docker template for ubuntu. This will make updating the OS easier as time goes on.\n\n**ubuntu2404-edge**\nThis image is just like the above `ubuntu2404` container image, except we build all of the ffmpeg support libraries. This is in the spirit of the original intent of this project `jrottenberg/ffmpeg` alltogether. Building everything that ffmpeg needs, and ffmpeg itself from source. This gives us the most control over all of the details of release. The drawback of this is that its much harder to keep updated. The thought process of having both 'Ubuntu-2404' and 'Ubuntu-2404-edge' is that it makes updating the OS easier over time.\n\n**vaapi2404**\n This release is like also `ubuntu2404` but enables: [Video Acceleration API (VAAPI)](https://trac.ffmpeg.org/wiki/HWAccelIntro#VAAPI) when building ffmpeg\n\n**nvidia2204-edge**\n This release is like also `ubuntu2404` but enables: [NVIDIA's hardware-accelerated encoding and decoding APIs](https://trac.ffmpeg.org/wiki/HWAccelIntro#CUDANVENCNVDEC) enabled\n\n**alpine320**\n[alpine](https://alpinelinux.org/releases/) uses the os vendor libs, but ffmpeg is built from source.\n\n**scratch**\nScratch is also an [alpine](https://alpinelinux.org/releases/) image. We build the vendor libs, and ffmpeg from source. Also we make the distro as small as possible by not installing any packages in base and striping symbols of installed libs.\n\n### Generate list of recent Docker Container Images\n\nYou can use the following command to generate a list of current images:\n```bash\n$ python3 -mvenv .venv\n$ source .venv/bin/activate\n$ pip install requests\n$ python3 ./generate-list-of-recent-images.py > list_of_recent_images.txt\n$ deactivate\n$ rm -rf .venv\n$ less list_of_recent_images.txt\n```\n\nIf you want to compare the one you have locally, use the following command:\n```bash\n$ docker images | grep ffmpeg | sort | awk '{print $1 \":\" $2 \"\\t\" $7 $8}'\n```\n\nPlease use [Github issues](https://github.com/jrottenberg/ffmpeg/issues/new) to report any bug or missing feature.\n\n## Test\n\n```bash\nffmpeg version N-98740-ga72d529 Copyright (c) 2000-2020 the FFmpeg developers\n  built with gcc 7 (Ubuntu 7.5.0-3ubuntu1~18.04)\n  configuration: --disable-debug --disable-doc --disable-ffplay --enable-shared --enable-avresample --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-gpl --enable-libass --enable-fontconfig --enable-libfreetype --enable-libvidstab --enable-libmp3lame --enable-libopus --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libxcb --enable-libx265 --enable-libxvid --enable-libx264 --enable-nonfree --enable-openssl --enable-libfdk_aac --enable-postproc --enable-small --enable-version3 --enable-libbluray --enable-libzmq --extra-libs=-ldl --prefix=/opt/ffmpeg --enable-libopenjpeg --enable-libkvazaar --enable-libaom --extra-libs=-lpthread --enable-libsrt --enable-libaribb24 --enable-vaapi --extra-cflags=-I/opt/ffmpeg/include --extra-ldflags=-L/opt/ffmpeg/lib\n  libavutil      56. 58.100 / 56. 58.100\n  libavcodec     58.100.100 / 58.100.100\n  libavformat    58. 51.100 / 58. 51.100\n  libavdevice    58. 11.101 / 58. 11.101\n  libavfilter     7. 87.100 /  7. 87.100\n  libavresample   4.  0.  0 /  4.  0.  0\n  libswscale      5.  8.100 /  5.  8.100\n  libswresample   3.  8.100 /  3.  8.100\n  libpostproc    55.  8.100 / 55.  8.100\n\n  configuration:\n    --disable-debug\n    --disable-doc\n    --disable-ffplay\n    --enable-shared\n    --enable-avresample\n    --enable-libopencore-amrnb\n    --enable-libopencore-amrwb\n    --enable-gpl\n    --enable-libass\n    --enable-fontconfig\n    --enable-libfreetype\n    --enable-libvidstab\n    --enable-libmp3lame\n    --enable-libopus\n    --enable-libtheora\n    --enable-libvorbis\n    --enable-libvpx\n    --enable-libwebp\n    --enable-libxcb\n    --enable-libx265\n    --enable-libxvid\n    --enable-libx264\n    --enable-nonfree\n    --enable-openssl\n    --enable-libfdk_aac\n    --enable-postproc\n    --enable-small\n    --enable-version3\n    --enable-libbluray\n    --enable-libzmq\n    --extra-libs=-ldl\n    --prefix=/opt/ffmpeg\n    --enable-libopenjpeg\n    --enable-libkvazaar\n    --enable-libaom\n    --extra-libs=-lpthread\n    --enable-libsrt\n    --enable-libaribb24\n    --enable-vaapi\n    --extra-cflags=-I/opt/ffmpeg/include\n    --extra-ldflags=-L/opt/ffmpeg/lib\n```\n\nCapture output from the container to the host running the command\n\n```bash\n docker run jrottenberg/ffmpeg:4.4-alpine \\\n            -i http://url/to/media.mp4 \\\n            -stats \\\n            $ffmpeg_options  - > out.mp4\n```\n\n### Examples\n\n#### Extract 5s @00:49:42 into a GIF\n\n```bash\n docker run jrottenberg/ffmpeg:4.4-alpine -stats  \\\n        -i http://archive.org/download/thethreeagesbusterkeaton/Buster.Keaton.The.Three.Ages.ogv \\\n        -loop 0  \\\n        -final_delay 500 -c:v gif -f gif -ss 00:49:42 -t 5 - > trow_ball.gif\n```\n\n#### Convert 10bits MKV into a 10Bits MP4\n\n```bash\n docker run -v $(pwd):$(pwd) -w $(pwd) jrottenberg/ffmpeg:4.4-scratch \\\n        -stats \\\n        -i http://www.jell.yfish.us/media/jellyfish-20-mbps-hd-hevc-10bit.mkv \\\n        -c:v libx265 -pix_fmt yuv420p10 \\\n        -t 5 -f mp4 test.mp4\n```\n\nThe image has been compiled with [X265 Multilib](https://x265.readthedocs.io/en/default/api.html#multi-library-interface).\nUse the pixel format switch to change the number of bits per pixel by suffixing it with 10 for 10bits or 12 for 12bits.\n\n#### Convert a local GIF into a mp4\n\nLet's assume ```original.gif``` is located in the current directory :\n\n```bash\n docker run -v $(pwd):$(pwd) -w $(pwd)\\\n        jrottenberg/ffmpeg:4.4-scratch -stats \\\n        -i original.gif \\\n        original-converted.mp4\n```\n\n#### Use ZeroMQ to toggle filter value on-fly\n\nLet's start some process continuously writing some radio music, and listen it:\n\n```bash\ndocker run --rm -d -v $(pwd):$(pwd) -w $(pwd) -p 11235:11235 \\\n        --name radio-writer jrottenberg/ffmpeg:4.4-alpine \\\n        -i http://radio.casse-tete.solutions/salut-radio-64.mp3 \\\n        -filter_complex '[0:a]volume@vol=1,azmq=bind_address=tcp\\\\\\://0.0.0.0\\\\\\:11235[out]' \\\n        -map '[out]' ./salut-radio.mp3\n\ndocker run -it -v $(pwd):$(pwd) -w $(pwd) --entrypoint=ffprobe jrottenberg/ffmpeg:4.4-alpine -v quiet  -show_streams salut-radio.mp3\n```\n\nNow, just toggle its volume on-fly, and hear how it changes:\n\n```bash\ndocker run --rm --network=host --entrypoint sh jrottenberg/ffmpeg:4.4-ubuntu -c \\\n        'echo \"volume@vol volume 2\" | zmqsend -b tcp://127.0.0.1:11235'\n```\n\n#### Send a stream over SRT\n\nLet's send `video.mp4` to srt-listener on port 9000 over SRT protocol.\n\n```bash\ndocker run -v $(pwd):$(pwd) jrottenberg/ffmpeg:4.4-centos \\\n       -re -i $(pwd)/video.mp4 -acodec copy -vcodec copy -f mpegts srt://srt-listener:9000?pkt_size=1316\n```\n\n#### Use hardware acceleration enabled build\n\nThanks to [qmfrederik](https://github.com/qmfrederik) for the [vaapi ubuntu based variant](https://github.com/jrottenberg/ffmpeg/pull/106)\n\n jrottenberg/ffmpeg:vaapi or jrottenberg/ffmpeg:${VERSION}-vaapi\n\n- Run the container with the device attached /dev/dri from your host into the container :\n\n`docker run --device /dev/dri:/dev/dri -v $(pwd):$(pwd) -w $(pwd) jrottenberg/ffmpeg:4.4-vaapi [...]`\n\n- Have the Intel drivers up and running on your host. You can run `vainfo` (part of vainfo package on Ubuntu) to determine whether your graphics card has been recognized correctly.\n- Run ffmpeg with the correct parameters, this is the same as when running [ffmpeg natively](https://trac.ffmpeg.org/wiki/Hardware/VAAPI).\n\n#### Use nvidia hardware acceleration enabled build\n\nThanks to [ShaulMyplay](https://github.com/ShaulMyplay) for the [nvidia based variant](https://github.com/jrottenberg/ffmpeg/pull/168)\n\nSupports nvenc only on all ffmpeg versions, and hardware decoding and scaling on ffmpeg >= 4.0\n\n- Install nvidia latest drivers on host machine.\n- Install [nvidia-docker](https://github.com/NVIDIA/nvidia-docker) on host machine.\n- Run container using \"--runtime=nvidia\" flag and use supported [ffmpeg hwaccel options](https://trac.ffmpeg.org/wiki/HWAccelIntro)\n\nHardware encoding only example:\n\n`docker run --runtime=nvidia jrottenberg/ffmpeg:4.4-nvidia -i INPUT -c:v nvenc_h264 -preset hq OUTPUT`\nFull hardware acceleration example:\n`docker run --runtime=nvidia jrottenberg/ffmpeg:4.4-nvidia -hwaccel cuvid -c:v h264_cuvid -i INPUT -vf scale_npp=-1:720 -c:v h264_nvenc -preset slow OUTPUT`\n\n##### See what's inside the beast\n\n```bash\ndocker run -it --entrypoint='bash' jrottenberg/ffmpeg:7.1-ubuntu2404\nfor i in ogg amr vorbis theora mp3lame opus vpx xvid fdk x264 x265;do echo $i; find /usr/local/ -name *$i*;done\n```\nLibs are in `/lib` in alpine.\n```bash\ndocker run -it --entrypoint='sh' jrottenberg/ffmpeg:7.1-alpine320\nfor i in ogg amr vorbis theora mp3lame opus vpx xvid fdk x264 x265;do echo $i; find /lib/ -name *$i*;done\n```\n\n\n## FFMPEG Supported Libraries\nThe following libraries are used by FFMPEG. The version number and release date are provided along with the license information.\nThese version numbers are for the lib source builds, which are 'ubuntu2404-edge' and 'foo'.\nThese libs are included in the package images as well, but the version numbers might vary slightly.\n| Libraries | Version | Release Date | License |\n|-----------|---------|--------------|---------|\n| [ffmpeg](http://ffmpeg.org/) | [7.1](http://ffmpeg.org/releases/) |  | [GNU Lesser General Public License (LGPL) version 2.1](https://ffmpeg.org/legal.html)|\n| [libogg](https://www.xiph.org/ogg/) | [1.3.4](https://xiph.org/downloads/) | 08-2019 | [BSD-style license](https://git.xiph.org/?p=mirrors/ogg.git;a=blob_plain;f=COPYING;hb=HEAD)|\n| [libopencore-amr](https://sourceforge.net/projects/opencore-amr/) | [0.1.6](https://sourceforge.net/projects/opencore-amr/files/opencore-amr/) | 08-2022 | [Apache License](https://sourceforge.net/p/opencore-amr/code/ci/master/tree/LICENSE)|\n\n\nSee `generate-source-of-truth-ffmpeg-versions.py` to update a version\n\n## FFMPEG Supported Libraries\nThe following libraries are used by FFMPEG. The version number and release date are provided along with the license information.\nThese version numbers are for the lib source builds, which are 'ubuntu2404-edge' and 'foo'.\nThese libs are included in the package images as well, but the version numbers might vary slightly.\n\n| Libraries | Version | Release Date | Download Source | Checksum | License |\n|-----------|---------|--------------|------------ | --- | ---------|\n| [libopencore-amr](https://sourceforge.net/projects/opencore-amr/) | [0.1.6](https://sourceforge.net/projects/opencore-amr/files/opencore-amr/) | 2022-08-01 | [opencore-amr-0.1.6.tar.gz](https://sourceforge.net/projects/opencore-amr/files/opencore-amr/opencore-amr-0.1.6.tar.gz) | No | [Apache License](https://sourceforge.net/p/opencore-amr/code/ci/master/tree/LICENSE) |\n| [libx264](https://www.videolan.org/developers/x264.html) | [20191217-2245-stable](https://download.videolan.org/pub/videolan/x264/snapshots/) | 2019-12-17 | [x264-snapshot-20191217-2245-stable.tar.bz2](https://download.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-20191217-2245-stable.tar.bz2) | No | [GNU General Public License (GPL) version 2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html) |\n| [libx265](http://x265.org/) | [4.0](http://ftp.videolan.org/pub/videolan/x265/) | 2024-09-13 | [x265_4.0.tar.gz](http://ftp.videolan.org/pub/videolan/x265/x265_4.0.tar.gz) | No | [GNU General Public License (GPL) version 2](https://bitbucket.org/multicoreware/x265/raw/f8ae7afc1f61ed0db3b2f23f5d581706fe6ed677/COPYING) |\n| [libogg](https://www.xiph.org/ogg/) | [1.3.5](https://xiph.org/downloads/) | 2021-06-04 | [libogg-1.3.5.tar.gz](https://downloads.xiph.org/releases/ogg/libogg-1.3.5.tar.gz) | No | [BSD-style license](https://git.xiph.org/?p=mirrors/ogg.git;a=blob_plain;f=COPYING;hb=HEAD) |\n| [libopus](https://www.opus-codec.org/) | [1.5.2](https://www.opus-codec.org/downloads/) | 2024-04-12 | [opus-1.5.2.tar.gz](https://github.com/xiph/opus/releases/download/v1.5.2/opus-1.5.2.tar.gz) | Yes | [BSD-style license](https://www.xiph.org/licenses/bsd/) |\n| [libvorbis](https://xiph.org/vorbis/) | [1.3.7](https://xiph.org/downloads/) | 2020-07-04 | [libvorbis-1.3.7.tar.gz](http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.7.tar.gz) | Yes | [BSD-style license](https://www.xiph.org/licenses/bsd/) |\n| [libvpx](https://www.webmproject.org/code/) | [1.14.1](https://chromium.googlesource.com/webm/libvpx.git/) | 2024-05-30 |  | No | [BSD-style license](https://github.com/webmproject/libvpx/blob/master/LICENSE) |\n| [libwebp](https://developers.google.com/speed/webp/) | [1.4.0](https://storage.googleapis.com/downloads.webmproject.org/releases/webp/index.html) | 2024-04-13 | [libwebp-1.4.0.tar.gz](https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.4.0.tar.gz) | No | [BSD-style license](https://github.com/webmproject/libvpx/blob/master/LICENSE) |\n| [libmp3lame](http://lame.sourceforge.net/) | [3.100](http://lame.sourceforge.net/download.php) | 2017-10-13 | [lame-3.100.tar.gz](https://sourceforge.net/projects/lame/files/lame/3.100/lame-3.100.tar.gz) | No | [GNU Lesser General Public License (LGPL) version 2.1](http://lame.cvs.sourceforge.net/viewvc/lame/lame/LICENSE?revision=1.9) |\n| [libxvid](https://www.xvid.com/) | [1.3.7](https://labs.xvid.com/source/) | 2019 | [xvidcore-1.3.7.tar.gz](https://downloads.xvid.com/downloads/xvidcore-1.3.7.tar.gz) | No | [GNU General Public Licence (GPL) version 2](http://websvn.xvid.org/cvs/viewvc.cgi/trunk/xvidcore/LICENSE?revision=851) |\n| [libfdk-aac](https://github.com/mstorsjo/fdk-aac) | [2.0.3](https://github.com/mstorsjo/fdk-aac/tags) | 2023-12-21 | [fdk-aac-2.0.3.tar.gz](https://github.com/mstorsjo/fdk-aac/archive/refs/tags/v2.0.3.tar.gz) | No | [Liberal but not a license of patented technologies](https://github.com/mstorsjo/fdk-aac/blob/master/NOTICE) |\n| [openjpeg](https://github.com/uclouvain/openjpeg) | [2.5.2](https://github.com/uclouvain/openjpeg/releases) | 2024-02-28 | [openjpeg-2.5.2.tar.gz](https://github.com/uclouvain/openjpeg/archive/refs/tags/v2.5.2.tar.gz) | No | [BSD-style license](https://github.com/uclouvain/openjpeg/blob/master/LICENSE) |\n| [freetype](https://www.freetype.org/) | [2.13.3](http://download.savannah.gnu.org/releases/freetype/) | 2024-08-12 | [freetype-2.13.3.tar.gz](http://download.savannah.gnu.org/releases/freetype/freetype-2.13.3.tar.gz) | No | [GNU General Public License (GPL) version 2](https://www.freetype.org/license.html) |\n| [libvidstab](https://github.com/georgmartius/vid.stab) | [1.1.1](https://github.com/georgmartius/vid.stab/tags) | 2022-05-30 | [vid.stab-1.1.1.tar.gz](https://github.com/georgmartius/vid.stab/archive/v1.1.1.tar.gz) | No | [GNU General Public License (GPL) version 2](https://github.com/georgmartius/vid.stab/blob/master/LICENSE) |\n| [fontconfig](https://www.freedesktop.org/wiki/Software/fontconfig/) | [2.15.0](https://www.freedesktop.org/software/fontconfig/release/) | 2023-12-22 | [fontconfig-2.15.0.tar.gz](https://www.freedesktop.org/software/fontconfig/release/fontconfig-2.15.0.tar.gz) | No | []() |\n| [kvazaar](https://github.com/ultravideo/kvazaar) | [2.3.1](https://github.com/ultravideo/kvazaar/releases) | 2024-04-10 | [kvazaar-2.3.1.tar.gz](https://github.com/ultravideo/kvazaar/releases/download/v2.3.1/kvazaar-2.3.1.tar.gz) | No | [BSD 3-Clause](https://github.com/ultravideo/kvazaar/blob/master/LICENSE`) |\n| [aom](https://aomedia.googlesource.com/aom) | [3.10.0](https://aomedia.googlesource.com/aom/+refs) | 2024-08-01 |  | No | [Alliance for Open Media](https://aomedia.org/license/software-license/) |\n| [nvidia-codec-headers](https://github.com/FFmpeg/nv-codec-headers) | [12.2.72.0]() | 2024-03-31 | [nv-codec-headers-12.2.72.0.tar.gz](https://github.com/FFmpeg/nv-codec-headers/releases/download/n12.2.72.0/nv-codec-headers-12.2.72.0.tar.gz) | No | []() |\n| [libsvtav1](https://gitlab.com/AOMediaCodec/SVT-AV1) | [2.2.1](https://gitlab.com/AOMediaCodec/SVT-AV1/-/tags) | 2024-08-01 | [SVT-AV1-v2.2.1.tar.gz](https://gitlab.com/AOMediaCodec/SVT-AV1/-/archive/v2.2.1/SVT-AV1-v2.2.1.tar.gz) | No | [BSD 3-Clause Clear License](https://gitlab.com/AOMediaCodec/SVT-AV1/-/blob/master/LICENSE.md?ref_type=heads) |\n| [xproto](https://www.x.org/releases/individual/proto/) | [7.0.31](https://www.x.org/releases/individual/proto/) | 2016-09-23 | [xproto-7.0.31.tar.gz](https://www.x.org/releases/individual/proto/xproto-7.0.31.tar.gz) | No | [The MIT License](https://opensource.org/licenses/MIT) |\n| [libpthread-stubs](https://www.x.org/releases/individual/lib/) | [0.5](https://www.x.org/releases/individual/lib/) | 2023-07-18 | [libpthread-stubs-0.5.tar.xz](https://www.x.org/releases/individual/lib/libpthread-stubs-0.5.tar.xz) | No | [The MIT License](https://opensource.org/licenses/MIT) |\n| [libbluray](https://www.videolan.org/developers/libbluray.html) | [1.3.4](https://download.videolan.org/pub/videolan/libbluray/) | 2022-11-26 | [libbluray-1.3.4.tar.bz2](https://download.videolan.org/pub/videolan/libbluray/1.3.4/libbluray-1.3.4.tar.bz2) | No | [GNU General Public License (GPL) version 2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html) |\n| [libzmq](https://github.com/zeromq/libzmq/) | [4.3.5](https://github.com/zeromq/libzmq/releases/) | 2023-10-9 | [zeromq-4.3.5.tar.gz](https://github.com/zeromq/libzmq/releases/download/v4.3.5/zeromq-4.3.5.tar.gz) | No | [Mozilla Public License (MPL) version 2.0](https://github.com/zeromq/libzmq/blob/v4.3.5/LICENSE) |\n| [libaribb24](https://github.com/nkoriyama/aribb24/) | [1.0.3](https://github.com/nkoriyama/aribb24/releases) | 2014-08-18 | [aribb24-v1.0.3.tar.gz](https://github.com/nkoriyama/aribb24/archive/refs/tags/v1.0.3.tar.gz) | No | [GNU Lesser General Public License (LGPL) version 2.1 or newer](https://github.com/nkoriyama/aribb24/issues/9) |\n| [zimg](https://github.com/sekrit-twc/zimg) | [3.0.5](https://github.com/sekrit-twc/zimg/releases) | 2023-6-30 | [zimg-3.0.5.tar.gz](https://github.com/sekrit-twc/zimg/archive/refs/tags/release-3.0.5.tar.gz) | No | [WTFPL](https://github.com/sekrit-twc/zimg?tab=WTFPL-1-ov-file) |\n| [libtheora](https://xiph.org/downloads/) | [1.1.1](https://xiph.org/downloads/) | 2010-01-25 | [libtheora-1.1.1.tar.gz](https://downloads.xiph.org/releases/theora/libtheora-1.1.1.tar.gz) | No | [BSD-style license](https://git.xiph.org/?p=mirrors/theora.git;a=blob_plain;f=COPYING;hb=HEAD) |\n| [libsrt](https://github.com/Haivision/srt) | [1.5.3](https://github.com/Haivision/srt/releases/) | 2023-09-07 | [srt-v1.5.3.tar.gz](https://github.com/Haivision/srt/archive/refs/tags/v1.5.3.tar.gz) | No | [Mozilla Public License (MPL) version 2.0](https://github.com/Haivision/srt/blob/master/LICENSE) |\n| [libvmaf](https://github.com/Netflix/vmaf) | [3.0.0](https://github.com/Netflix/vmaf/releases) | 2023-12-07 | [vmaf-v3.0.0.tar.gz](https://github.com/Netflix/vmaf/archive/refs/tags/v3.0.0.tar.gz) | No | [BSD-2-Clause](https://github.com/Netflix/vmaf/blob/master/LICENSE) |\n| [ffmpeg-7.1](http://ffmpeg.org/) | [7.1](http://ffmpeg.org/releases/) | 2024-09-30 | [ffmpeg-7.1.tar.bz2](https://ffmpeg.org/releases/ffmpeg-7.1.tar.bz2) | No | [GNU Lesser General Public License (LGPL) version 2.1](https://ffmpeg.org/legal.html) |\n| [ffmpeg-7.0](http://ffmpeg.org/) | [7.0](http://ffmpeg.org/releases/) | 2024-04-05 | [ffmpeg-7.0.tar.bz2](https://ffmpeg.org/releases/ffmpeg-7.0.tar.bz2) | No | [GNU Lesser General Public License (LGPL) version 2.1](https://ffmpeg.org/legal.html) |\n| [ffmpeg-6.1](http://ffmpeg.org/) | [6.1](http://ffmpeg.org/releases/) | 2023-11-11 | [ffmpeg-6.1.tar.bz2](https://ffmpeg.org/releases/ffmpeg-6.1.tar.bz2) | No | [GNU Lesser General Public License (LGPL) version 2.1](https://ffmpeg.org/legal.html) |\n\n\n\n## Contribute\n\nSee [the contributing guide](CONTRIBUTING.md)\n\n\n\n## Legal\n\nThose docker images use code of <a href=http://ffmpeg.org>FFmpeg</a> licensed under the <a href=http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html>LGPLv2.1</a> and their source can be downloaded on <a href=https://github.com/jrottenberg/ffmpeg>github.com/jrottenberg/ffmpeg</a>.\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 1.0380859375,
          "content": "variables:\n  - group: videotoolsbuild-dockerhub\n  - name: DOCKER\n    value: jrottenberg/ffmpeg\n  - name: GHCR\n    value: ghcr.io/jrottenberg/ffmpeg\n\nstages:\n  - stage: lint\n    jobs:\n      - job: precommit\n        pool:\n          vmImage: ubuntu-latest\n        variables:\n          PRE_COMMIT_HOME: $(Pipeline.Workspace)/pre-commit-cache\n\n        steps:\n          - task: UsePythonVersion@0\n            inputs:\n              versionSpec: \"3.9\"\n\n          - script: |\n              echo \"##vso[task.setvariable variable=PY]$(python -VV)\"\n            displayName: set version variables\n          - task: CacheBeta@0\n            inputs:\n              key: pre-commit | \"4\" | .pre-commit-config.yaml | \"$(PY)\"\n              path: $(PRE_COMMIT_HOME)\n\n          - script: python -m pip install --upgrade pre-commit packaging\n            displayName: install python deps\n          - script: pre-commit run --all-files --show-diff-on-failure\n            displayName: run pre-commit\n\n  - stage: Build_Docker_Images\n    jobs:\n      - template: docker-images/azure-jobs.yml\n"
        },
        {
          "name": "azure-steps.yml",
          "type": "blob",
          "size": 1.6767578125,
          "content": "steps:\n  - bash: |\n      set -eu\n      docker build -t ${DOCKER}:${VERSION}-${VARIANT} -t ${DOCKER}:${LONG_VERSION}-${VARIANT} -t ${GHCR}/${VERSION}-${VARIANT} -t ${GHCR}/${LONG_VERSION}-${VARIANT} --build-arg MAKEFLAGS=\"-j$(($(grep -c ^processor /proc/cpuinfo) + 1))\" docker-images/${VERSION}/${VARIANT}\n      docker run --rm ${DOCKER}:${LONG_VERSION}-${VARIANT} -buildconf\n      docker images\n    displayName: Build docker image\n\n  - bash: |\n      set -eu\n      echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_LOGIN} --password-stdin\n      docker push ${DOCKER}:${VERSION}-${VARIANT}\n      docker push ${DOCKER}:${LONG_VERSION}-${VARIANT}\n\n      echo ${GHCR_PAT} | docker login ghcr.io --username USERNAME --password-stdin\n      docker push ${GHCR}/${VERSION}-${VARIANT}\n      docker push ${GHCR}/${LONG_VERSION}-${VARIANT}\n\n      if [ \"${ISPARENT}\" == \"True\" ] && [ \"${VARIANT}\" != \"${PARENT}\" ]\n        then\n        docker tag \"${DOCKER}:${LONG_VERSION}-${VARIANT}\" \"${DOCKER}:${VERSION}-${PARENT}\"\n        docker tag \"${DOCKER}:${LONG_VERSION}-${VARIANT}\" \"${DOCKER}:${MAJOR_VERSION}-${PARENT}\"\n        docker push \"${DOCKER}:${VERSION}-${PARENT}\"\n        docker push \"${DOCKER}:${MAJOR_VERSION}-${PARENT}\"\n\n        docker tag \"${DOCKER}:${LONG_VERSION}-${VARIANT}\" \"${GHCR}:${VERSION}-${PARENT}\"\n        docker tag \"${DOCKER}:${LONG_VERSION}-${VARIANT}\" \"${GHCR}:${MAJOR_VERSION}-${PARENT}\"\n        docker push \"${GHCR}:${VERSION}-${PARENT}\"\n        docker push \"${GHCR}:${MAJOR_VERSION}-${PARENT}\"\n      fi\n    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))\n    displayName: Push docker image\n    env:\n      DOCKER_PASSWORD: $(docker.password)\n      GHCR_PAT: $(ghcr.pat)\n"
        },
        {
          "name": "build_source.sh",
          "type": "blob",
          "size": 11.0322265625,
          "content": "#!/usr/bin/env bash\n\n# Stop execution on any error\n# Note: we can override this in the Dockerfile RUN command with an || true.\n#       which is useful for debugging\nset -e\n\nmanifestJsonFile=\"/tmp/workdir/generated_build_manifest.json\"\nmanifestJsonVersionsFile=\"/tmp/workdir/generated_build_versions_manifest.json\"\n\nOS_NAME=$(uname -s)\nis_ubuntu=false\nis_alpine=false\nif [[ \"$OS_NAME\" == \"Linux\" ]]; then\n    if grep -q \"Ubuntu\" /etc/os-release; then\n        is_ubuntu=true\n    elif grep -q \"Alpine Linux\" /etc/alpine-release; then\n        is_alpine=true\n    fi\nfi\n######################### Callback build functions #########################\nbuild_libopencore-amr() {\n    ./configure --prefix=\"${PREFIX}\" --enable-shared\n    make\n    make install\n}\n\nbuild_libx264() {\n    ./configure --prefix=\"${PREFIX}\" --enable-shared --enable-pic --disable-cli\n    make\n    make install\n}\n\nbuild_libx265() {\n    cd build/linux\n    sed -i \"/-DEXTRA_LIB/ s/$/ -DCMAKE_INSTALL_PREFIX=\\${PREFIX}/\" multilib.sh\n    sed -i \"/^cmake/ s/$/ -DENABLE_CLI=OFF/\" multilib.sh\n    ./multilib.sh\n    make -C 8bit install\n}\n\nbuild_libogg() {\n    ./configure --prefix=\"${PREFIX}\" --enable-shared\n    make\n    make install\n}\n\nbuild_libopus() {\n    ./configure --prefix=\"${PREFIX}\" --enable-shared\n    make\n    make install\n}\n\nbuild_libvorbis() {\n    ./configure --prefix=\"${PREFIX}\" --with-ogg=\"${PREFIX}\" --enable-shared\n    make\n    make install\n    # https://gitlab.xiph.org/xiph/vorbis\n    # cmake -G YOUR-PROJECT-GENERATOR -DBUILD_SHARED_LIBS=1 -DCMAKE_INSTALL_PREFIX=\"${PREFIX}\" .\n    # make\n    # make install\n}\n\nbuild_libvpx() {\n    local data=$(jq -r '.[] | select(.library_name == \"libvpx\")' $manifestJsonFile)\n    local dir=$(echo \"$data\" | jq -r '.build_dir')\n    local vpx_version=$(jq -r '.[\"libvpx\"]' $manifestJsonVersionsFile)\n    if [ -n \"$vpx_version\" ] && [[ \"$vpx_version\" != \"null\" ]]; then\n        echo \"Building [libvpx-${vpx_version}] in [${dir}]\"\n    else\n        echo \"Error: libvpx version is empty or unset\"\n    fi\n    version=\"v${vpx_version}\"\n    git -C libvpx pull 2> /dev/null || git clone --branch ${version} --depth 1 https://chromium.googlesource.com/webm/libvpx.git\n    cd libvpx\n    pwd\n    ./configure  --prefix=\"${PREFIX}\" --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --enable-pic --enable-shared --as=yasm\n    make\n    make install\n}\n\nbuild_libwebp() {\n    ./configure --prefix=\"${PREFIX}\" --enable-shared && \\\n    make && \\\n    make install\n}\n\nbuild_libmp3lame() {\n    ./configure --prefix=\"${PREFIX}\" --bindir=\"${PREFIX}/bin\" --enable-shared --enable-nasm --disable-frontend && \\\n    make && \\\n    make install\n}\n\n\nbuild_libxvid() {\n    # read doc/INSTALL\n    cd build/generic\n    ./configure --help\n    echo \"Now guess\"\n    ./configure --prefix=\"${PREFIX}\" --bindir=\"${PREFIX}/bin --enable-shared\"\n    make\n    make install\n}\n\nbuild_libfdk-aac() {\n    autoreconf -fiv && \\\n    ./configure --prefix=\"${PREFIX}\" --enable-shared\n    make\n    make install\n}\n\nbuild_openjpeg() {\n    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\"${PREFIX}\" . && \\\n    make && \\\n    make install\n}\n\nbuild_freetype() {\n    ./configure --prefix=\"${PREFIX}\" --disable-static --enable-shared && \\\n    make && \\\n    make install\n}\n\nbuild_libvidstab() {\n    cmake -DCMAKE_INSTALL_PREFIX=\"${PREFIX}\" . && \\\n    make && \\\n    make install\n}\n\nbuild_fribidi() {\n    # Currently broken, need to fix\n    # sed -i 's/^SUBDIRS =.*/SUBDIRS=gen.tab charset lib bin/' Makefile.am\n    # ./bootstrap --no-config --auto\n    ./configure --prefix=\"${PREFIX}\" --disable-static --enable-shared\n    make -j1\n    make install\n}\n\nbuild_fontconfig() {\n    ./configure --prefix=\"${PREFIX}\" --disable-static --enable-shared && \\\n    make && \\\n    make install\n}\n\nbuild_libass() {\n    ./autogen.sh && \\\n    ./configure --prefix=\"${PREFIX}\" --disable-static --enable-shared && \\\n    make && \\\n    make install\n}\n\nbuild_kvazaar() {\n    # ./autogen.sh && \\\n    ./configure --prefix=\"${PREFIX}\" --disable-static --enable-shared && \\\n    make && \\\n    make install\n}\n\n# aom is a git clone ( to get source, so not in the loop using the callback function)\nbuild_aom() {\n    local data=$(jq -r '.[] | select(.library_name == \"aom\")' $manifestJsonFile)\n    local dir=$(echo \"$data\" | jq -r '.build_dir')\n    local aom_version=$(jq -r '.[\"aom\"]' $manifestJsonVersionsFile)  # Access value with key \"aom\"\n    if [ -n \"$aom_version\" ] && [[ \"$aom_version\" != \"null\" ]]; then\n        echo \"Building [aom-${aom_version}] in [${dir}]\"\n    else\n        echo \"Error: aom version is empty or unset\"\n    fi\n    version=\"v${aom_version}\"\n    git clone --branch ${version} --depth 1 https://aomedia.googlesource.com/aom ${dir} && \\\n    cd ${dir} && \\\n    mkdir -p ./aom_build && \\\n    cd ./aom_build && \\\n    cmake -G \"Unix Makefiles\" -DCMAKE_INSTALL_PREFIX=\"${PREFIX}\" -DBUILD_SHARED_LIBS=1 -DENABLE_NASM=on .. && \\\n    make && \\\n    make install\n}\n\nbuild_nvidia-codec-headers() {\n    local dir=${1}\n\t# git clone https://github.com/FFmpeg/nv-codec-headers ${dir}\n\t# git checkout n${NVIDIA_HEADERS_VERSION}\n\tmake PREFIX=\"${PREFIX}\"\n\tmake install PREFIX=\"${PREFIX}\"\n}\n\nbuild_libsvtav1() {\n    cd Build && \\\n    cmake -G \"Unix Makefiles\" -DCMAKE_INSTALL_PREFIX=\"${PREFIX}\" -DCMAKE_BUILD_TYPE=Release -DBUILD_DEC=OFF -DBUILD_SHARED_LIBS=OFF .. \\\n    make && \\\n    make install\n}\n\nbuild_xorg-macros() {\n    dir=${1}\n    ./configure --srcdir=${dir} --prefix=\"${PREFIX}\" && \\\n    make && \\\n    make install\n}\n\nbuild_xproto() {\n    dir=${1}\n    cp /usr/share/misc/config.guess . && \\\n    ./configure --srcdir=${dir} --prefix=\"${PREFIX}\" && \\\n    make && \\\n    make install\n}\n\nbuild_libxau() {\n    dir=${1}\n    ./configure --srcdir=${dir} --prefix=\"${PREFIX}\" && \\\n    make && \\\n    make install\n}\n\nbuild_libpthread-stubs() {\n    ./configure --prefix=\"${PREFIX}\" && \\\n    make && \\\n    make install\n}\n\nbuild_libxml2() {\n    ./autogen.sh --prefix=\"${PREFIX}\" --with-ftp=no --with-http=no --with-python=no && \\\n    make && \\\n    make install\n}\n\nbuild_libbluray() {\n    ## libbluray - Requires libxml, freetype, and fontconfig\n    ./configure --prefix=\"${PREFIX}\" --disable-examples --disable-bdjava-jar --disable-static --enable-shared && \\\n    make && \\\n    make install\n}\n\nbuild_libzmq() {\n    ./autogen.sh && \\\n    ./configure --prefix=\"${PREFIX}\" && \\\n    make && \\\n    make install\n}\n\n# another special, code clone situation ( actually currently using the tarball build approach )\nbuild_libpng() {\n    local dir = \"/tmp/png\"\n    # local libpng_version=$(jq -r '.[\"libpng\"]' $manifestJsonVersionsFile)  # Access value with key \"libpng\"\n    # git clone https://git.code.sf.net/p/libpng/code ${dir} -b v${libpng_version} --depth 1 && \\\n    ./autogen.sh && \\\n    ./configure --prefix=\"${PREFIX}\" && \\\n    make check && \\\n    make install\n}\n\nbuild_libaribb24() {\n    autoreconf -fiv && \\\n    ./configure CFLAGS=\"-I${PREFIX}/include -fPIC\" --prefix=\"${PREFIX}\" && \\\n    make && \\\n    make install\n}\n\nbuild_zimg() {\n    ./autogen.sh && \\\n    ./configure --prefix=\"${PREFIX}\" --enable-shared  && \\\n    make && \\\n    make install\n}\n\n# Dependancy on libogg\nbuild_libtheora() {\n    if [ \"$is_ubuntu\" = true ]; then\n        cp /usr/share/misc/config.guess .\n    fi\n    ./configure --prefix=\"${PREFIX}\" --with-ogg=\"${PREFIX}\" --enable-shared --disable-examples\n    make\n    make install\n}\n\nbuild_libsrt() {\n    # requires libssl-dev\n    cmake -DCMAKE_INSTALL_PREFIX=\"${PREFIX}\" . && \\\n    make && \\\n    make install\n}\n\nbuild_libvmaf() {\n    # https://github.com/Netflix/vmaf/issues/788#issuecomment-756098059\n    mkdir ./libvmaf/build\n    cd ./libvmaf/build\n    meson setup -Denable_tests=false -Denable_docs=false --buildtype=release --default-library=static --prefix \"${PREFIX}\" .. && \\\n    # meson setup -Denable_tests=false -Denable_docs=false --buildtype=release --default-library=shared --prefix \"${PREFIX}\" ..\n    ninja\n    ninja install\n}\n\nbuild_ffmpeg() {\n    # Here is a list of things that we enable in the ffmpeg build: that are not in the\n    # track configuration guide: https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu#FFmpeg\n    # --enable-fontconfig\n    # --enable-libaribb24\n    # --enable-libbluray\n    # --enable-libkvazaar\n    # --enable-libopencore-amrnb\n    # --enable-libopencore-amrwb\n    # --enable-libopenjpeg\n    # --enable-libsrt\n    # --enable-libtheora\n    # --enable-libvmaf\n    # --enable-libwebp\n    # --enable-libxvid\n    # --enable-libzimg\n    # --enable-libzmq\n    # --enable-openssl\n    # --enable-postproc\n    # --enable-small\n    # --enable-version3\n\n    # export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}\n    ./configure %%FFMPEG_CONFIG_FLAGS%% && \\\n    make && \\\n    make install && \\\n    make tools/zmqsend && cp tools/zmqsend ${PREFIX}/bin/ && \\\n    make distclean && \\\n    hash -r && \\\n    cd tools && \\\n    make qt-faststart && cp qt-faststart ${PREFIX}/bin/\n}\n######################### Helper functions #########################\nextract_tarball() {\n    local tarball_name=$1\n    # grab the extension of the tarball\n    local extension=\"${tarball_name##*.}\"\n    # tar extraction args: -z, -j, -J, --lzma  Compress archive with gzip/bzip2/xz/lzma\n    if [ \"$extension\" == \"gz\" ]; then\n        tar -zx --strip-components=1 -f ${tarball_name}\n    elif [ \"$extension\" == \"bz2\" ]; then\n        tar -jx --strip-components=1 -f ${tarball_name}\n    elif [ \"$extension\" == \"xz\" ]; then\n        tar -Jx --strip-components=1 -f ${tarball_name}\n    else\n        echo \"Error while extract_tarball, got an unknown extension: $extension\"\n    fi\n}\n\nbuild_support_libraries() {\n    local librariesRaw=\"$(jq -r '.[] | .library_name' $manifestJsonFile)\"\n    local libs=( $librariesRaw )\n    for i in \"${!libs[@]}\"; do\n        lib_name=${libs[$i]}\n        # handle the clone source case's ( there are only two )\n        # if [ \"$lib_name\" == \"libsvtav1\" ]; then\n        #     echo \"-------------------- Running callback: build_aom --------------------\"\n        #     echo \"Building 'aom' before we build $lib_name\"\n        #     build_aom\n        # fi\n        # ffmpeg is in the lib_name string then the callback name is build_ffmpeg\n        callback_lib_name=${lib_name}\n        if [[ \"$lib_name\" == *\"ffmpeg\"* ]]; then\n            # take out the version numbers\n            callback_lib_name=\"ffmpeg\"\n        fi\n\n        local data=$(jq -r '.[] | select(.library_name == \"'${lib_name}'\")' $manifestJsonFile)\n        build_dir=$(echo \"$data\" | jq -r '.build_dir')\n        tarball_name=$(echo \"$data\" | jq -r '.tarball_name')\n        sha256sum=$(echo \"$data\" | jq -r '.sha256sum')\n\n        echo \"Building $lib_name: from ${build_dir}/$tarball_name\"\n        cd $build_dir\n        extract_tarball $tarball_name\n        if [ -n \"$sha256sum\" ] && [[ \"$sha256sum\" != \"null\" ]]; then\n            echo \"Checking sha256sum for $tarball_name\"\n            echo $sha256sum | sha256sum --check\n        fi\n        # make a callback function to build the library\n        # if anything fails, we will exit with a non-zero status\n        echo \"-------------------- Running callback: build_${lib_name} --------------------\"\n        build_${callback_lib_name} ${build_dir}\n        echo \"Finished building $lib_name removing build directory [${build_dir}]\"\n        cd /tmp/workdir\n        rm -rf $build_dir\n    done\n}\n\nbuild_support_libraries\n"
        },
        {
          "name": "docker-images",
          "type": "tree",
          "content": null
        },
        {
          "name": "download_tarballs.sh",
          "type": "blob",
          "size": 5.8330078125,
          "content": "#!/usr/bin/env bash\n\n# The point of this script is to read in the list of tarballs to download from generated_build_manifest.json\n# using jq and then download them into their build directories.\n#\n# The point, we need robust re-tries, as sometimes the download fails, and we need to be able to re-try.\n# and verify that the download was successful.\n\nmanifestJsonFile=\"/tmp/workdir/generated_build_manifest.json\"\n\nreport_on_failed_downloads() {\n    local librariesRaw=\"$(jq -r '.[] | .library_name' $manifestJsonFile)\"\n    local libs=( $librariesRaw )\n    local count=0\n\n    for i in \"${!libs[@]}\"; do\n        lib_name=${libs[$i]}\n        local data=$(jq -r '.[] | select(.library_name == \"'${lib_name}'\")' $manifestJsonFile)\n        build_dir=$(echo \"$data\" | jq -r '.build_dir')\n        tarball_name=$(echo \"$data\" | jq -r '.tarball_name')\n        # if tarball_name does not exist, then it could be a source repo build\n        # just check the directory\n        if [ -z \"$tarball_name\" ]; then\n            if [ ! -d \"$build_dir\" ]; then\n                echo \"Error: $build_dir does not exist\"\n                ((count++))\n            fi\n        fi\n        if [ ! -f \"$build_dir/$tarball_name\" ]; then\n            echo \"Error: $build_dir/$tarball_name does not exist\"\n            ((count++))\n        fi\n    done\n    echo \"Failed to download $count tarballs\"\n}\n\nactual_number_of_downloads_completed() {\n    local librariesRaw=\"$(jq -r '.[] | .library_name' $manifestJsonFile)\"\n    local libs=( $librariesRaw )\n    local count=0\n\n    for i in \"${!libs[@]}\"; do\n        lib_name=${libs[$i]}\n        local data=$(jq -r '.[] | select(.library_name == \"'${lib_name}'\")' $manifestJsonFile)\n        build_dir=$(echo \"$data\" | jq -r '.build_dir')\n        tarball_name=$(echo \"$data\" | jq -r '.tarball_name')\n        # if tarball_name does not exist, then it could be a source repo build\n        # just check the directory\n        if [[ -z \"$tarball_name\" || \"$tarball_name\" == \"null\" ]]; then\n            if [ -d \"$build_dir\" ]; then\n                ((count++))\n            fi\n        fi\n        if [ -f \"$build_dir/$tarball_name\" ]; then\n            ((count++))\n        fi\n    done\n    echo $count  # Return the count as output\n}\nnumber_of_tarballs_to_download() {\n    local librariesRaw=\"$(jq -r '.[] | .library_name' $manifestJsonFile)\"\n    local libs=( $librariesRaw )\n    echo \"${#libs[@]}\" # return count as output\n}\n\ndownload_tarballs() {\n    # the default argument of quiet is false\n    quiet=${1:-false}\n\tlocal librariesRaw=\"$(jq -r '.[] | .library_name' $manifestJsonFile)\"\n\tlocal libs=( $librariesRaw )\n    echo \"Downloading (${#libs[@]} libraries)...\"\n    for i in \"${!libs[@]}\"; do\n        # echo \"Downloading ${libs[$i]}...\"\n        lib_name=${libs[$i]}\n        # use double quotes around '${lib_name}', so Bash will expand the value.\n        build_dir=$(jq -r '.[] | select(.library_name == \"'${lib_name}'\") | .build_dir' $manifestJsonFile)\n        download_url=$(jq -r '.[] | select(.library_name == \"'${lib_name}'\") | .download_url' $manifestJsonFile)\n        tarball_name=$(jq -r '.[] | select(.library_name == \"'${lib_name}'\") | .tarball_name' $manifestJsonFile)\n        if [ -z \"$build_dir\" ]; then\n            echo \"Error: build_dir, is empty\"\n            exit 1\n        fi\n\n        # does the directory exist? if not make it\n        if [ ! -d \"$build_dir\" ]; then\n            mkdir -p \"$build_dir\"\n        fi\n        # handle edge case for source repo builds (git clone )\n        if [[ -z \"$tarball_name\" || -z \"$download_url\" || \"$tarball_name\" == \"null\" || \"$download_url\" == \"null\" ]]; then\n            echo \"Warning: tarball_name, or download_url is empty or unset (ok in a source repo build)\"\n            continue\n        fi\n        echo \"Downloading: ${download_url} to: ${build_dir} ${tarball_name}\"\n        if [ -z \"$build_dir\" ] || [ -z \"$download_url\" ] || [ -z \"$tarball_name\" ]; then\n            echo \"Error: build_dir, download_url, or tarball_name is empty\"\n            exit 1\n        fi\n        # if the tarball_file does not exhist then download it\n        if [ ! -f \"$build_dir/$tarball_name\" ]; then\n            echo \"$build_dir/$tarball_name does not exist, downloading now...\"\n            cd \"$build_dir\"\n            # curl -fsSL -o \"$library.tar.gz\" \"\n            # curl command line reference\n            #      -o write output to file\n            #      -f Fail fast with no output on HTTP errors\n            #      -s Silent mode\n            #      -S, --show-error  Show error even when -s is used\n            #      -L, --location    Follow redirects\n            #      --retry <num>     Retry request if transient problems occur\n            curl -fsSL --retry 2 -o \"$tarball_name\" \"$download_url\"\n        else\n            # if not quietly, then echo that we are skipping the download\n            [ \"$quiet\" = false ] &&\n            echo \"$build_dir/$tarball_name already exists, skipping download\"\n        fi\n    done\n}\n\nnum_to_download=1 # at least 1\nnum_completed=0\nnumber_of_times_to_retry=6\ndownload_tarballs_called_number=0\nnum_completed=$(actual_number_of_downloads_completed)\nnum_to_download=$(number_of_tarballs_to_download)\necho \"Starting to download ${num_to_download} tarball images\"\nwhile [ $num_completed -lt $num_to_download ] && [ $number_of_times_to_retry -gt $download_tarballs_called_number ]; do\n    ((download_tarballs_called_number++))\n    download_tarballs\n    sleep 5\n    num_completed=$(actual_number_of_downloads_completed)\n    num_to_download=$(number_of_tarballs_to_download)\n    echo \"Downloaded ${num_completed} of ${num_to_download} tarball images on pass ${download_tarballs_called_number}\"\ndone\n\nif [ $num_completed -lt $num_to_download ]; then\n    echo \"Failed to download all tarballs after $download_tarballs_called_number attempts\"\n    report_on_failed_downloads\n    exit 1\nfi\necho \"Successfully Downloaded the ${num_completed} tarball images after $download_tarballs_called_number attempts\"\nexit 0\n"
        },
        {
          "name": "generate-list-of-recent-images.py",
          "type": "blob",
          "size": 1.6298828125,
          "content": "import json\n\nimport requests\n\n\"\"\"\nTo run this script you need the requests library. You can install it with pip:\nin a venv as follows:\n\n$ python3 -mvenv .venv\n$ source .venv/bin/activate\n$ pip install requests\n$ python3 ./generate-list-of-recent-images.py > list_of_recent_images.txt\n$ deactivate\n$ rm -rf .venv\n\nyou will now have a file called list_of_recent_images.txt with the list of images\n\"\"\"\n\n\ndef make_api_request(page, page_size):\n    url = \"https://registry.hub.docker.com/v2/repositories/jrottenberg/ffmpeg/tags\"\n    params = {\"page\": page, \"page_size\": page_size}\n    response = requests.get(url, params=params)\n    return response.json()\n\n\ndef process_data(data):\n    data = json.loads(data)\n    sorted_data = sorted(data, key=lambda x: x[\"name\"], reverse=True)\n    for item in sorted_data:\n        if item[\"tag_status\"].lower() == \"active\":\n            size_mb = round(item[\"full_size\"] / 1048576)\n            name_padding = \" \" * (20 - len(item[\"name\"]))\n            size_padding = \" \" * (8 - len(str(size_mb)))\n            last_updated = item[\"last_updated\"][:10]\n            # print(\"-\" * 50)\n            # print(json.dumps(item, indent=4))\n            print(\n                f\"{item['name']}{name_padding}{size_mb}mb{size_padding}{last_updated}\"\n            )\n            # print(f'{item[\"last_updater_username\"]}')\n\n\ndef main():\n    page = 1\n    page_size = 100\n    data = []\n\n    while True:\n        response = make_api_request(page, page_size)\n        data.extend(response[\"results\"])\n\n        if len(response[\"results\"]) < page_size:\n            break\n\n        page += 1\n\n    process_data(json.dumps(data))\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "generate-source-of-truth-ffmpeg-versions.py",
          "type": "blob",
          "size": 39.62109375,
          "content": "#!/usr/bin/env python3\n\nimport argparse\nimport json\nimport sys\nfrom collections import OrderedDict\n\n\"\"\"\n------- Purpose -------\n...This is the source of truth...\n1. This script generates a table of the libraries used by FFMPEG that\n   will be included in the main README.md file of the repository.\n2. This script generates a 'build_manifest.json' file that contains the\n   the download links, build directories, and build tarball names for\n    each library. ( Required to generate a robust re-try download of the package tarballs)\n\n------- Setup -------\nThis script is run in the container to generate 'build_manifest.json'\nHowever, it is also used to generate a generated_versions_table.md file.\nThe steps for doing that are below.\nTo run this script you need the ?? library. You can install it with pip:\nin a venv as follows:\n\n$ python3 -mvenv .venv\n$ source .venv/bin/activate\n$ pip install ??\n$ python3 ./generate-source-of-truth-ffmpeg-versions.py\n$ deactivate\n$ rm -rf .venv\n\nThe output of this script will be a table in markdown format, which you can\npaste into the README.md file of the repository.\n\"\"\"\n\n# Library versions Source of truth\nFFMPEG_71 = {\"version\": \"7.1\", \"release_date\": \"2024-09-30\"}\nFFMPEG_70 = {\"version\": \"7.0\", \"release_date\": \"2024-04-05\"}\nFFMPEG_61 = {\"version\": \"6.1\", \"release_date\": \"2023-11-11\"}\n# FFMPEG_51 = {\"version\": \"5.1\", \"release_date\": \"2022-06-22\"}\nOGG = {\"version\": \"1.3.5\", \"release_date\": \"2021-06-04\"}\nOPENCOREAMR = {\"version\": \"0.1.6\", \"release_date\": \"2022-08-01\"}\nVORBIS = {\"version\": \"1.3.7\", \"release_date\": \"2020-07-04\"}\nTHEORA = {\"version\": \"1.1.1\", \"release_date\": \"2010\"}\nLAME = {\"version\": \"3.100\", \"release_date\": \"2017-10-13\"}\nOPUS = {\"version\": \"1.5.2\", \"release_date\": \"2024-04-12\"}\nVPX = {\"version\": \"1.14.1\", \"release_date\": \"2024-05-30\"}\nWEBP = {\"version\": \"1.4.0\", \"release_date\": \"2024-04-13\"}\nXVID = {\"version\": \"1.3.7\", \"release_date\": \"2019\"}\nFDKAAC = {\"version\": \"2.0.3\", \"release_date\": \"2023-12-21\"}\nFREETYPE = {\"version\": \"2.13.3\", \"release_date\": \"2024-08-12\"}\nLIBVIDSTAB = {\"version\": \"1.1.1\", \"release_date\": \"2022-05-30\"}\nLIBFRIDIBI = {\"version\": \"1.0.16\", \"release_date\": \"2024-10-1\"}\nFONTCONFIG = {\"version\": \"2.15.0\", \"release_date\": \"2023-12-22\"}\nLIBASS = {\"version\": \"0.17.3\", \"release_date\": \"2024-07-02\"}\nKVAAZAAR = {\"version\": \"2.3.1\", \"release_date\": \"2024-04-10\"}\nAOM = {\"version\": \"3.10.0\", \"release_date\": \"2024-08-01\"}\nNV_CODEC = {\"version\": \"12.2.72.0\", \"release_date\": \"2024-03-31\"}\nSVTAV1 = {\"version\": \"2.2.1\", \"release_date\": \"2024-08-01\"}\nXORG_MACROS = {\"version\": \"1.20.1\", \"release_date\": \"2024-04-16\"}\nXPROTO = {\"version\": \"7.0.31\", \"release_date\": \"2016-09-23\"}\nXAU = {\"version\": \"1.0.11\", \"release_date\": \"2022-12-08\"}\nPTHREAD_STUBS = {\"version\": \"0.5\", \"release_date\": \"2023-07-18\"}\nLIBXML2 = {\"version\": \"2.13.4\", \"release_date\": \"2024-09-01\"}\nLIBBLURAY = {\"version\": \"1.3.4\", \"release_date\": \"2022-11-26\"}\nX264 = {\"version\": \"20191217-2245-stable\", \"release_date\": \"2019-12-17\"}\nX265 = {\"version\": \"4.0\", \"release_date\": \"2024-09-13\"}\nLIBZMQ = {\"version\": \"4.3.5\", \"release_date\": \"2023-10-9\"}\nLIBSRT = {\"version\": \"1.5.3\", \"release_date\": \"2023-09-07\"}\nLIBPNG = {\"version\": \"1.6.44\", \"release_date\": \"2024-09-12\"}\nZIMG = {\"version\": \"3.0.5\", \"release_date\": \"2023-6-30\"}\nLIBARIBB24 = {\"version\": \"1.0.3\", \"release_date\": \"2014-08-18\"}\nOPENJPEG = {\"version\": \"2.5.2\", \"release_date\": \"2024-02-28\"}\nTHEORA = {\"version\": \"1.1.1\", \"release_date\": \"2010-01-25\"}\nLIBVMAF = {\"version\": \"3.0.0\", \"release_date\": \"2023-12-07\"}\n\n# Library details, Source of truth\n# TODO: store this in a yaml confiuration file ( would probably be better )\n# flake8: noqa E501\nLIBRARIES = OrderedDict(\n    [\n        (\n            \"libopencore-amr\",\n            {\n                \"link\": \"https://sourceforge.net/projects/opencore-amr/\",\n                \"version\": OPENCOREAMR[\"version\"],\n                \"version_link\": \"https://sourceforge.net/projects/opencore-amr/files/opencore-amr/\",\n                \"release_date\": OPENCOREAMR[\"release_date\"],\n                \"license_name\": \"Apache License\",\n                \"license_link\": \"https://sourceforge.net/p/opencore-amr/code/ci/master/tree/LICENSE\",\n                \"build_info\": {\n                    # this one of the finikie download link's ( and the reason we wrote the download_tarball.sh script)\n                    \"download_link\": f\"https://sourceforge.net/projects/opencore-amr/files/opencore-amr/opencore-amr-{OPENCOREAMR['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/libopencore-amr\",\n                    \"tarball_name\": f\"opencore-amr-{OPENCOREAMR['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libx264\",\n            {\n                \"link\": \"https://www.videolan.org/developers/x264.html\",\n                \"version\": X264[\"version\"],\n                \"version_link\": \"https://download.videolan.org/pub/videolan/x264/snapshots/\",\n                \"release_date\": X264[\"release_date\"],\n                \"license_name\": \"GNU General Public License (GPL) version 2\",\n                \"license_link\": \"https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\",\n                \"build_info\": {\n                    \"download_link\": f\"https://download.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-{X264['version']}.tar.bz2\",\n                    \"build_dir\": \"/tmp/x264\",\n                    \"tarball_name\": f\"x264-snapshot-{X264['version']}.tar.bz2\",\n                },\n            },\n        ),\n        (\n            \"libx265\",\n            {\n                \"link\": \"http://x265.org/\",\n                \"version\": X265[\"version\"],\n                \"version_link\": \"http://ftp.videolan.org/pub/videolan/x265/\",  # \"https://www.x265.org/downloads/\",\n                \"release_date\": X265[\"release_date\"],\n                \"license_name\": \"GNU General Public License (GPL) version 2\",\n                \"license_link\": \"https://bitbucket.org/multicoreware/x265/raw/f8ae7afc1f61ed0db3b2f23f5d581706fe6ed677/COPYING\",\n                \"build_info\": {\n                    \"download_link\": f\"http://ftp.videolan.org/pub/videolan/x265/x265_{X265['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/x265\",\n                    \"tarball_name\": f\"x265_{X265['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libogg\",\n            {\n                \"link\": \"https://www.xiph.org/ogg/\",\n                \"version\": OGG[\"version\"],\n                \"version_link\": \"https://xiph.org/downloads/\",\n                \"release_date\": OGG[\"release_date\"],\n                \"license_name\": \"BSD-style license\",\n                \"license_link\": \"https://git.xiph.org/?p=mirrors/ogg.git;a=blob_plain;f=COPYING;hb=HEAD\",  # TODO: check this link\n                \"build_info\": {\n                    \"download_link\": f\"https://downloads.xiph.org/releases/ogg/libogg-{OGG['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/libogg\",\n                    \"tarball_name\": f\"libogg-{OGG['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libopus\",\n            {\n                \"link\": \"https://www.opus-codec.org/\",\n                # https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu#libopus\n                \"version\": OPUS[\"version\"],\n                \"version_link\": \"https://www.opus-codec.org/downloads/\",\n                # https://ftp.osuosl.org/pub/xiph/releases/opus/\n                \"release_date\": OPUS[\"release_date\"],\n                \"license_name\": \"BSD-style license\",\n                \"license_link\": \"https://www.xiph.org/licenses/bsd/\",  # https://opus-codec.org/license/\n                \"build_info\": {\n                    \"download_link\": f\"https://github.com/xiph/opus/releases/download/v{OPUS['version']}/opus-{OPUS['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/opus\",\n                    \"tarball_name\": f\"opus-{OPUS['version']}.tar.gz\",\n                    \"sha256sum\": \"65c1d2f78b9f2fb20082c38cbe47c951ad5839345876e46941612ee87f9a7ce1 opus-1.5.2.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libvorbis\",\n            {\n                \"link\": \"https://xiph.org/vorbis/\",\n                \"version\": VORBIS[\"version\"],\n                \"version_link\": \"https://xiph.org/downloads/\",\n                \"release_date\": VORBIS[\"release_date\"],\n                \"license_name\": \"BSD-style license\",\n                \"license_link\": \"https://www.xiph.org/licenses/bsd/\",\n                \"build_info\": {\n                    \"download_link\": f\"http://downloads.xiph.org/releases/vorbis/libvorbis-{VORBIS['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/vorbis\",\n                    \"tarball_name\": f\"libvorbis-{VORBIS['version']}.tar.gz\",\n                    \"sha256sum\": \"0e982409a9c3fc82ee06e08205b1355e5c6aa4c36bca58146ef399621b0ce5ab libvorbis-1.3.7.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libvpx\",\n            {\n                \"link\": \"https://www.webmproject.org/code/\",\n                # https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu#libvpx\n                \"version\": VPX[\"version\"],\n                \"version_link\": \"https://chromium.googlesource.com/webm/libvpx.git/\",\n                \"release_date\": VPX[\"release_date\"],\n                \"license_name\": \"BSD-style license\",\n                \"license_link\": \"https://github.com/webmproject/libvpx/blob/master/LICENSE\",\n                \"build_info\": {\n                    # \"download_link\": f\"https://chromium.googlesource.com/webm/libvpx/+archive/v{VPX['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/libvpx\",\n                    # \"tarball_name\": f\"libvpx-v{VPX['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libwebp\",\n            {\n                \"link\": \"https://developers.google.com/speed/webp/\",\n                # https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu#libwebp\n                \"version\": WEBP[\"version\"],\n                \"version_link\": \"https://storage.googleapis.com/downloads.webmproject.org/releases/webp/index.html\",\n                \"release_date\": WEBP[\"release_date\"],\n                \"license_name\": \"BSD-style license\",\n                \"license_link\": \"https://github.com/webmproject/libvpx/blob/master/LICENSE\",\n                \"build_info\": {\n                    \"download_link\": f\"https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-{WEBP['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/webp\",\n                    \"tarball_name\": f\"libwebp-{WEBP['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libmp3lame\",\n            {\n                \"link\": \"http://lame.sourceforge.net/\",\n                \"version\": LAME[\"version\"],\n                \"version_link\": \"http://lame.sourceforge.net/download.php\",\n                \"release_date\": LAME[\"release_date\"],\n                \"license_name\": \"GNU Lesser General Public License (LGPL) version 2.1\",\n                \"license_link\": \"http://lame.cvs.sourceforge.net/viewvc/lame/lame/LICENSE?revision=1.9\",\n                \"build_info\": {\n                    # this one is also testie\n                    \"download_link\": f\"https://sourceforge.net/projects/lame/files/lame/{LAME['version']}/lame-{LAME['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/lame\",\n                    \"tarball_name\": f\"lame-{LAME['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libxvid\",\n            {\n                \"link\": \"https://www.xvid.com/\",\n                \"version\": XVID[\"version\"],\n                \"version_link\": \"https://labs.xvid.com/source/\",\n                \"release_date\": XVID[\"release_date\"],\n                \"license_name\": \"GNU General Public Licence (GPL) version 2\",\n                \"license_link\": \"http://websvn.xvid.org/cvs/viewvc.cgi/trunk/xvidcore/LICENSE?revision=851\",\n                \"build_info\": {\n                    \"download_link\": f\"https://downloads.xvid.com/downloads/xvidcore-{XVID['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/xvid\",\n                    \"tarball_name\": f\"xvidcore-{XVID['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libfdk-aac\",\n            {\n                \"link\": \"https://github.com/mstorsjo/fdk-aac\",\n                # https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu#libfdk-aac\n                \"version\": FDKAAC[\"version\"],\n                \"version_link\": \"https://github.com/mstorsjo/fdk-aac/tags\",\n                \"release_date\": FDKAAC[\"release_date\"],\n                \"license_name\": \"Liberal but not a license of patented technologies\",\n                \"license_link\": \"https://github.com/mstorsjo/fdk-aac/blob/master/NOTICE\",\n                \"build_info\": {\n                    \"download_link\": f\"https://github.com/mstorsjo/fdk-aac/archive/refs/tags/v{FDKAAC['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/fdk-aac\",\n                    \"tarball_name\": f\"fdk-aac-{FDKAAC['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"openjpeg\",\n            {\n                \"link\": \"https://github.com/uclouvain/openjpeg\",\n                \"version\": OPENJPEG[\"version\"],\n                \"version_link\": \"https://github.com/uclouvain/openjpeg/releases\",\n                \"release_date\": OPENJPEG[\"release_date\"],\n                \"license_name\": \"BSD-style license\",\n                \"license_link\": \"https://github.com/uclouvain/openjpeg/blob/master/LICENSE\",\n                \"build_info\": {\n                    \"download_link\": f\"https://github.com/uclouvain/openjpeg/archive/refs/tags/v{OPENJPEG['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/openjpeg\",\n                    \"tarball_name\": f\"openjpeg-{OPENJPEG['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"freetype\",\n            {\n                \"link\": \"https://www.freetype.org/\",\n                \"version\": FREETYPE[\"version\"],\n                \"version_link\": \"http://download.savannah.gnu.org/releases/freetype/\",\n                \"release_date\": FREETYPE[\"release_date\"],\n                \"license_name\": \"GNU General Public License (GPL) version 2\",\n                \"license_link\": \"https://www.freetype.org/license.html\",\n                \"build_info\": {\n                    \"download_link\": f\"http://download.savannah.gnu.org/releases/freetype/freetype-{FREETYPE['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/freetype\",\n                    \"tarball_name\": f\"freetype-{FREETYPE['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libvidstab\",\n            {\n                \"link\": \"https://github.com/georgmartius/vid.stab\",\n                \"version\": LIBVIDSTAB[\"version\"],\n                \"version_link\": \"https://github.com/georgmartius/vid.stab/tags\",\n                \"release_date\": LIBVIDSTAB[\"release_date\"],\n                \"license_name\": \"GNU General Public License (GPL) version 2\",\n                \"license_link\": \"https://github.com/georgmartius/vid.stab/blob/master/LICENSE\",\n                \"build_info\": {\n                    \"download_link\": f\"https://github.com/georgmartius/vid.stab/archive/v{LIBVIDSTAB['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/vid.stab\",\n                    \"tarball_name\": f\"vid.stab-{LIBVIDSTAB['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"fribidi\",\n            {\n                \"link\": \"https://www.fribidi.org/\",\n                \"version\": LIBFRIDIBI[\"version\"],\n                \"version_link\": \"https://github.com/fribidi/fribidi/releases\",\n                \"release_date\": LIBFRIDIBI[\"release_date\"],\n                \"license_name\": \"GNU General Public License (GPL) version 2\",\n                \"license_link\": \"https://cgit.freedesktop.org/fribidi/fribidi/plain/COPYING\",\n                \"build_info\": {\n                    \"download_link\": f\"https://github.com/fribidi/fribidi/archive/refs/tags/v{LIBFRIDIBI['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/fribidi\",\n                    \"tarball_name\": f\"fribidi-{LIBFRIDIBI['version']}.tar.gz\",\n                    \"using_source_build\": False,\n                    # \"sha256sum\": \"3fc96fa9473bd31dcb5500bdf1aa78b337ba13eb8c301e7c28923fea982453a8 fribidi-{LIBFRIDIBI['version']}.tar.gz\"\n                },\n            },\n        ),\n        (\n            \"fontconfig\",\n            {\n                \"link\": \"https://www.freedesktop.org/wiki/Software/fontconfig/\",\n                \"version\": FONTCONFIG[\"version\"],\n                \"version_link\": \"https://www.freedesktop.org/software/fontconfig/release/\",\n                \"release_date\": FONTCONFIG[\"release_date\"],\n                \"license_name\": \"\",\n                \"license_link\": \"\",\n                \"build_info\": {\n                    \"download_link\": f\"https://www.freedesktop.org/software/fontconfig/release/fontconfig-{FONTCONFIG['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/fontconfig\",\n                    \"tarball_name\": f\"fontconfig-{FONTCONFIG['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libass\",\n            {\n                \"link\": \"https://github.com/libass/libass\",\n                \"version\": LIBASS[\"version\"],\n                \"version_link\": \"https://github.com/libass/libass/releases\",\n                \"release_date\": LIBASS[\"release_date\"],\n                \"license_name\": \"ISC License\",\n                \"license_link\": \"https://github.com/libass/libass/blob/master/COPYING\",\n                \"build_info\": {\n                    \"download_link\": f\"https://github.com/libass/libass/releases/download/{LIBASS['version']}/libass-{LIBASS['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/libass\",\n                    \"tarball_name\": f\"libass-{LIBASS['version']}.tar.gz\",\n                    \"using_source_build\": False,\n                },\n            },\n        ),\n        (\n            \"kvazaar\",\n            {\n                \"link\": \"https://github.com/ultravideo/kvazaar\",\n                \"version\": KVAAZAAR[\"version\"],\n                \"version_link\": \"https://github.com/ultravideo/kvazaar/releases\",\n                \"release_date\": KVAAZAAR[\"release_date\"],\n                \"license_name\": \"BSD 3-Clause\",\n                \"license_link\": \"https://github.com/ultravideo/kvazaar/blob/master/LICENSE`\",\n                \"build_info\": {\n                    \"download_link\": f\"https://github.com/ultravideo/kvazaar/releases/download/v{KVAAZAAR['version']}/kvazaar-{KVAAZAAR['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/kvazaar\",\n                    \"tarball_name\": f\"kvazaar-{KVAAZAAR['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"aom\",\n            {\n                \"link\": \"https://aomedia.googlesource.com/aom\",\n                \"version\": AOM[\"version\"],\n                \"version_link\": \"https://aomedia.googlesource.com/aom/+refs\",\n                \"release_date\": AOM[\"release_date\"],\n                \"license_name\": \"Alliance for Open Media\",\n                \"license_link\": \"https://aomedia.org/license/software-license/\",\n                \"build_info\": {\n                    \"build_dir\": \"/tmp/aom\",\n                },\n            },\n        ),\n        (\n            \"nvidia-codec-headers\",\n            {\n                \"link\": \"https://github.com/FFmpeg/nv-codec-headers\",\n                \"version\": NV_CODEC[\"version\"],\n                \"version_link\": \"\",\n                \"release_date\": NV_CODEC[\"release_date\"],\n                \"license_name\": \"\",\n                \"license_link\": \"\",\n                \"build_info\": {\n                    \"download_link\": f\"https://github.com/FFmpeg/nv-codec-headers/releases/download/n{NV_CODEC['version']}/nv-codec-headers-{NV_CODEC['version']}.tar.gz\",\n                    # \"download_link\": f\"https://github.com/FFmpeg/nv-codec-headers/archive/refs/tags/n{NV_CODEC['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/nv-codec-headers\",\n                    \"tarball_name\": f\"nv-codec-headers-{NV_CODEC['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libsvtav1\",\n            {\n                \"link\": \"https://gitlab.com/AOMediaCodec/SVT-AV1\",\n                \"version\": SVTAV1[\"version\"],\n                \"version_link\": \"https://gitlab.com/AOMediaCodec/SVT-AV1/-/tags\",\n                \"release_date\": SVTAV1[\"release_date\"],\n                \"license_name\": \"BSD 3-Clause Clear License\",\n                \"license_link\": \"https://gitlab.com/AOMediaCodec/SVT-AV1/-/blob/master/LICENSE.md?ref_type=heads\",\n                \"build_info\": {\n                    \"download_link\": f\"https://gitlab.com/AOMediaCodec/SVT-AV1/-/archive/v{SVTAV1['version']}/SVT-AV1-v{SVTAV1['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/libsvtav1\",\n                    \"tarball_name\": f\"SVT-AV1-v{SVTAV1['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"xorg-macros\",\n            {\n                \"link\": \"https://xcb.freedesktop.org/\",\n                \"version\": XORG_MACROS[\"version\"],\n                \"version_link\": \"https://www.x.org/releases/individual/util/\",\n                \"release_date\": XORG_MACROS[\"release_date\"],\n                \"license_name\": \"The MIT License\",\n                \"license_link\": \"https://opensource.org/licenses/MIT\",\n                \"build_info\": {\n                    \"download_link\": f\"https://www.x.org/releases/individual/util/util-macros-{XORG_MACROS['version']}.tar.xz\",\n                    \"build_dir\": \"/tmp/xorg-macros\",\n                    \"tarball_name\": f\"util-macros-{XORG_MACROS['version']}.tar.xz\",\n                    \"using_source_build\": False,\n                },\n            },\n        ),\n        (\n            \"xproto\",\n            {\n                \"link\": \"https://www.x.org/releases/individual/proto/\",\n                \"version\": XPROTO[\"version\"],\n                \"version_link\": \"https://www.x.org/releases/individual/proto/\",\n                \"release_date\": XPROTO[\"release_date\"],\n                \"license_name\": \"The MIT License\",\n                \"license_link\": \"https://opensource.org/licenses/MIT\",\n                \"build_info\": {\n                    \"download_link\": f\"https://www.x.org/releases/individual/proto/xproto-{XPROTO['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/xproto\",\n                    \"tarball_name\": f\"xproto-{XPROTO['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libxau\",\n            {\n                \"link\": \"https://www.x.org/releases/individual/lib/\",\n                \"version\": XAU[\"version\"],\n                \"version_link\": \"https://www.x.org/releases/individual/lib/\",\n                \"release_date\": XAU[\"release_date\"],\n                \"license_name\": \"The MIT License\",\n                \"license_link\": \"https://opensource.org/licenses/MIT\",\n                \"build_info\": {\n                    \"download_link\": f\"https://www.x.org/releases/individual/lib/libXau-{XAU['version']}.tar.xz\",\n                    \"build_dir\": \"/tmp/libXau\",\n                    \"tarball_name\": f\"libXau-{XAU['version']}.tar.xz\",\n                    \"using_source_build\": False,\n                },\n            },\n        ),\n        (\n            \"libpthread-stubs\",\n            {\n                \"link\": \"https://www.x.org/releases/individual/lib/\",\n                \"version\": PTHREAD_STUBS[\"version\"],\n                \"version_link\": \"https://www.x.org/releases/individual/lib/\",\n                \"release_date\": PTHREAD_STUBS[\"release_date\"],\n                \"license_name\": \"The MIT License\",\n                \"license_link\": \"https://opensource.org/licenses/MIT\",\n                \"build_info\": {\n                    \"download_link\": f\"https://www.x.org/releases/individual/lib/libpthread-stubs-{PTHREAD_STUBS['version']}.tar.xz\",\n                    \"build_dir\": \"/tmp/libpthread-stubs\",\n                    \"tarball_name\": f\"libpthread-stubs-{PTHREAD_STUBS['version']}.tar.xz\",\n                    # \"using_source_build\": False,\n                },\n            },\n        ),\n        (\n            \"libxml2\",\n            {\n                \"link\": \"http://www.xmlsoft.org/\",\n                \"version\": LIBXML2[\"version\"],\n                \"version_link\": \"http://www.xmlsoft.org/downloads.html\",\n                \"release_date\": LIBXML2[\"release_date\"],\n                \"license_name\": \"MIT License\",\n                \"license_link\": \"http://www.xmlsoft.org/license.html\",\n                \"build_info\": {\n                    \"download_link\": f\"https://gitlab.gnome.org/GNOME/libxml2/-/archive/v{LIBXML2['version']}/libxml2-v{LIBXML2['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/libxml2\",\n                    \"tarball_name\": f\"libxml2-{LIBXML2['version']}.tar.gz\",\n                    \"using_source_build\": False,\n                },\n            },\n        ),\n        (\n            \"libbluray\",\n            {\n                \"link\": \"https://www.videolan.org/developers/libbluray.html\",\n                \"version\": LIBBLURAY[\"version\"],\n                \"version_link\": \"https://download.videolan.org/pub/videolan/libbluray/\",\n                \"release_date\": LIBBLURAY[\"release_date\"],\n                \"license_name\": \"GNU General Public License (GPL) version 2\",\n                \"license_link\": \"https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\",\n                \"build_info\": {\n                    \"download_link\": f\"https://download.videolan.org/pub/videolan/libbluray/{LIBBLURAY['version']}/libbluray-{LIBBLURAY['version']}.tar.bz2\",\n                    \"build_dir\": \"/tmp/libbluray\",\n                    \"tarball_name\": f\"libbluray-{LIBBLURAY['version']}.tar.bz2\",\n                },\n            },\n        ),\n        (\n            \"libzmq\",\n            {\n                \"link\": \"https://github.com/zeromq/libzmq/\",\n                \"version\": LIBZMQ[\"version\"],\n                \"version_link\": \"https://github.com/zeromq/libzmq/releases/\",\n                \"release_date\": LIBZMQ[\"release_date\"],\n                \"license_name\": \"Mozilla Public License (MPL) version 2.0\",\n                \"license_link\": f\"https://github.com/zeromq/libzmq/blob/v{LIBZMQ['version']}/LICENSE\",\n                \"build_info\": {\n                    \"download_link\": f\"https://github.com/zeromq/libzmq/releases/download/v{LIBZMQ['version']}/zeromq-{LIBZMQ['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/libzmq\",\n                    \"tarball_name\": f\"zeromq-{LIBZMQ['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libpng\",\n            {\n                \"link\": \"http://www.libpng.org/pub/png/libpng.html\",\n                \"version\": LIBPNG[\"version\"],\n                \"version_link\": \"https://sourceforge.net/projects/libpng/files/libpng16/\",\n                \"release_date\": LIBPNG[\"release_date\"],\n                \"license_name\": \"PNG Reference Library License version 2\",\n                \"license_link\": \"http://www.libpng.org/pub/png/src/libpng-LICENSE.txt\",\n                \"build_info\": {\n                    # sourceforge is a bit finikie\n                    # https://sourceforge.net/projects/libpng/files/libpng16/1.6.44/libpng-1.6.44.tar.gz/download\n                    # https://download.sourceforge.net/libpng/libpng-1.6.44.tar.xz\n                    \"download_link\": f\"https://download.sourceforge.net/libpng/libpng-{LIBPNG['version']}.tar.xz\",\n                    \"build_dir\": \"/tmp/libpng\",\n                    \"tarball_name\": f\"libpng-{LIBPNG['version']}.tar.xz\",\n                    \"using_source_build\": False,\n                },\n            },\n        ),\n        (\n            \"libaribb24\",\n            {\n                \"link\": \"https://github.com/nkoriyama/aribb24/\",\n                \"version\": LIBARIBB24[\"version\"],\n                \"version_link\": \"https://github.com/nkoriyama/aribb24/releases\",\n                \"release_date\": LIBARIBB24[\"release_date\"],\n                \"license_name\": \"GNU Lesser General Public License (LGPL) version 2.1 or newer\",\n                \"license_link\": \"https://github.com/nkoriyama/aribb24/issues/9\",\n                \"build_info\": {\n                    \"download_link\": f\"https://github.com/nkoriyama/aribb24/archive/refs/tags/v{LIBARIBB24['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/b24\",\n                    \"tarball_name\": f\"aribb24-v{LIBARIBB24['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"zimg\",\n            {\n                \"link\": \"https://github.com/sekrit-twc/zimg\",\n                \"version\": ZIMG[\"version\"],\n                \"version_link\": \"https://github.com/sekrit-twc/zimg/releases\",\n                \"release_date\": ZIMG[\"release_date\"],\n                \"license_name\": \"WTFPL\",\n                \"license_link\": \"https://github.com/sekrit-twc/zimg?tab=WTFPL-1-ov-file\",\n                \"build_info\": {\n                    \"download_link\": f\"https://github.com/sekrit-twc/zimg/archive/refs/tags/release-{ZIMG['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/zimg\",\n                    \"tarball_name\": f\"zimg-{ZIMG['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libtheora\",\n            {\n                \"link\": \"https://xiph.org/downloads/\",\n                \"version\": THEORA[\"version\"],\n                \"version_link\": \"https://xiph.org/downloads/\",\n                \"release_date\": THEORA[\"release_date\"],\n                \"license_name\": \"BSD-style license\",\n                \"license_link\": \"https://git.xiph.org/?p=mirrors/theora.git;a=blob_plain;f=COPYING;hb=HEAD\",\n                \"build_info\": {\n                    \"download_link\": f\"https://downloads.xiph.org/releases/theora/libtheora-{THEORA['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/theora\",\n                    \"tarball_name\": f\"libtheora-{THEORA['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libsrt\",\n            {\n                \"link\": \"https://github.com/Haivision/srt\",\n                \"version\": LIBSRT[\"version\"],\n                \"version_link\": \"https://github.com/Haivision/srt/releases/\",\n                \"release_date\": LIBSRT[\"release_date\"],\n                \"license_name\": \"Mozilla Public License (MPL) version 2.0\",\n                \"license_link\": \"https://github.com/Haivision/srt/blob/master/LICENSE\",\n                \"build_info\": {\n                    \"download_link\": f\"https://github.com/Haivision/srt/archive/refs/tags/v{LIBSRT['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/srt\",\n                    \"tarball_name\": f\"srt-v{LIBSRT['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"libvmaf\",\n            {\n                \"link\": \"https://github.com/Netflix/vmaf\",\n                # https://github.com/Netflix/vmaf/issues/788\n                \"version\": LIBVMAF[\"version\"],\n                \"version_link\": \"https://github.com/Netflix/vmaf/releases\",\n                \"release_date\": LIBVMAF[\"release_date\"],\n                \"license_name\": \"BSD-2-Clause\",\n                \"license_link\": \"https://github.com/Netflix/vmaf/blob/master/LICENSE\",\n                \"build_info\": {\n                    \"download_link\": f\"https://github.com/Netflix/vmaf/archive/refs/tags/v{LIBVMAF['version']}.tar.gz\",\n                    \"build_dir\": \"/tmp/vmaf\",\n                    \"tarball_name\": f\"vmaf-v{LIBVMAF['version']}.tar.gz\",\n                },\n            },\n        ),\n        (\n            \"ffmpeg-7.1\",\n            {\n                \"link\": \"http://ffmpeg.org/\",\n                \"version\": FFMPEG_71[\"version\"],\n                \"version_link\": \"http://ffmpeg.org/releases/\",\n                \"release_date\": FFMPEG_71[\"release_date\"],\n                \"license_name\": \"GNU Lesser General Public License (LGPL) version 2.1\",\n                \"license_link\": \"https://ffmpeg.org/legal.html\",\n                \"build_info\": {\n                    \"download_link\": f\"https://ffmpeg.org/releases/ffmpeg-{FFMPEG_71['version']}.tar.bz2\",\n                    \"build_dir\": \"/tmp/ffmpeg\",\n                    \"tarball_name\": f\"ffmpeg-{FFMPEG_71['version']}.tar.bz2\",\n                },\n            },\n        ),\n        (\n            \"ffmpeg-7.0\",\n            {\n                \"link\": \"http://ffmpeg.org/\",\n                \"version\": FFMPEG_70[\"version\"],\n                \"version_link\": \"http://ffmpeg.org/releases/\",\n                \"release_date\": FFMPEG_70[\"release_date\"],\n                \"license_name\": \"GNU Lesser General Public License (LGPL) version 2.1\",\n                \"license_link\": \"https://ffmpeg.org/legal.html\",\n                \"build_info\": {\n                    \"download_link\": f\"https://ffmpeg.org/releases/ffmpeg-{FFMPEG_70['version']}.tar.bz2\",\n                    \"build_dir\": \"/tmp/ffmpeg\",\n                    \"tarball_name\": f\"ffmpeg-{FFMPEG_70['version']}.tar.bz2\",\n                },\n            },\n        ),\n        (\n            \"ffmpeg-6.1\",\n            {\n                \"link\": \"http://ffmpeg.org/\",\n                \"version\": FFMPEG_61[\"version\"],\n                \"version_link\": \"http://ffmpeg.org/releases/\",\n                \"release_date\": FFMPEG_61[\"release_date\"],\n                \"license_name\": \"GNU Lesser General Public License (LGPL) version 2.1\",\n                \"license_link\": \"https://ffmpeg.org/legal.html\",\n                \"build_info\": {\n                    \"download_link\": f\"https://ffmpeg.org/releases/ffmpeg-{FFMPEG_61['version']}.tar.bz2\",\n                    \"build_dir\": \"/tmp/ffmpeg\",\n                    \"tarball_name\": f\"ffmpeg-{FFMPEG_61['version']}.tar.bz2\",\n                },\n            },\n        ),\n        # (\n        #     \"ffmpeg-5.1\",\n        #     {\n        #         \"link\": \"http://ffmpeg.org/\",\n        #         \"version\": FFMPEG_51[\"version\"],\n        #         \"version_link\": \"http://ffmpeg.org/releases/\",\n        #         \"release_date\": FFMPEG_51[\"release_date\"],\n        #         \"license_name\": \"GNU Lesser General Public License (LGPL) version 2.1\",\n        #         \"license_link\": \"https://ffmpeg.org/legal.html\",\n        #         \"build_info\": {\n        #             \"download_link\": f\"https://ffmpeg.org/releases/ffmpeg-{FFMPEG_51['version']}.tar.bz2\",\n        #             \"build_dir\": \"/tmp/ffmpeg\",\n        #             \"tarball_name\": f\"ffmpeg-{FFMPEG_51['version']}.tar.bz2\",\n        #         },\n        #     },\n        # ),\n    ]\n)\n# come back to this problem, I think yaml configuration might be better.\n# with open('libraries.json', 'r') as f:\n#     data = json.load(f) # todo this should be yaml config\n#     order_list = data['build_order']\n#     LIBRARIES = OrderedDict((key, data['libraries'][key]) for key in order_list)\n\n\ndef generate_library_table(filename):\n    \"\"\"\n    Generates a formatted table of FFmpeg libraries.\n    cut-n-paste this into the main projects README.md file.\n    \"\"\"\n    # open the filename for writing, overwrite if it exists\n    with open(filename, \"w\") as f:\n        f.write(\"## FFMPEG Supported Libraries\\n\")\n        f.write(\n            \"The following libraries are used by FFMPEG. The version number and release date are provided along with the license information.\\n\"\n        )\n        f.write(\n            \"These version numbers are for the lib source builds, which are 'ubuntu2404-edge' and 'foo'.\\n\"\n        )\n        f.write(\n            \"These libs are included in the package images as well, but the version numbers might vary slightly.\\n\\n\"\n        )\n\n        f.write(\n            \"| Libraries | Version | Release Date | Download Source | Checksum | License |\\n\"\n        )\n        f.write(\n            \"|-----------|---------|--------------|------------ | --- | ---------|\\n\"\n        )\n        for k, v in LIBRARIES.items():\n            libname = f\"[{k}]({v['link']})\"  # link to the library\n            libversion = f\"[{v['version']}]({v['version_link']})\"  # link to the version\n            license = (\n                f\"[{v['license_name']}]({v['license_link']})\"  # link to the license\n            )\n            # if build_info and build_info.tarball_name and build_info.download_link is avaliabl then set the download_source\n            download_source = \"\"\n            if (\n                v.get(\"build_info\")\n                and v[\"build_info\"].get(\"tarball_name\")\n                and v[\"build_info\"].get(\"download_link\")\n            ):\n                download_source = f\"[{v['build_info']['tarball_name']}]({v['build_info']['download_link']})\"\n            checksum = v[\"build_info\"].get(\"sha256sum\", \"\")\n            has_checksum = \"Yes\" if checksum else \"No\"\n\n            using_source_build = v[\"build_info\"].get(\"using_source_build\", True)\n            # if we are not using the source build then do not display it in the table.\n            if using_source_build:\n                f.write(\n                    f\"| {libname} | {libversion} | {v.get('release_date', '')} | {download_source} | {has_checksum} | {license} |\\n\"\n                )\n        print(f\"Library table generated: {filename}\")\n        sys.stdout.flush()\n\n\ndef generate_versions_manifest(output_file, ffmpeg_libraries=[]):\n    \"\"\"\n    Generates a 'generated_build_versions_manifest.json' file containing library version information.\n\n    Args:\n        ffmpeg_libraries (dict): A dictionary containing FFmpeg library information.\n        output_file (str, optional): The filename for the build manifest. Defaults to \"generated_build_versions_manifest.json\".\n    \"\"\"\n\n    manifest_data = {}\n    if not ffmpeg_libraries:\n        ffmpeg_libraries = LIBRARIES.keys()\n    for library_name in ffmpeg_libraries:\n        library_info = LIBRARIES.get(library_name, {})\n        manifest_data[library_name] = library_info.get(\"version\", \"\")\n\n    with open(output_file, \"w\") as f:\n        json.dump(manifest_data, f, indent=4)\n        print(f\"Versions manifest generated: {output_file}\")\n        sys.stdout.flush()\n\n\ndef generate_build_manifest(output_file, ffmpeg_libraries=[]):\n    \"\"\"\n    Generates a 'generated_build_manifest.json' file containing library download information.\n\n    Args:\n        ffmpeg_libraries (dict): A dictionary containing FFmpeg library information.\n        output_file (str, optional): The filename for the build manifest. Defaults to \"generated_build_manifest.json\".\n    \"\"\"\n\n    manifest_data = []\n    if not ffmpeg_libraries:\n        ffmpeg_libraries = LIBRARIES.keys()\n    for library_name in ffmpeg_libraries:\n        library_info = LIBRARIES.get(library_name, {})\n        build_info = library_info.get(\"build_info\", {})\n        download_url = build_info.get(\"download_link\", \"\")\n        build_dir = build_info.get(\"build_dir\", \"\")\n        tarball_name = build_info.get(\"tarball_name\", \"\")\n        sha256sum = build_info.get(\"sha256sum\", \"\")\n\n        if not all([build_dir]):\n            print(\n                f\"Warning: Missing 'build_dir' information for {library_name} in build manifest generation.\"\n            )\n            continue\n\n        data = {\n            \"library_name\": library_name,\n            \"build_dir\": build_dir,\n        }\n        if download_url and tarball_name:\n            data[\"download_url\"] = download_url\n            data[\"tarball_name\"] = tarball_name\n\n        if sha256sum:\n            data[\"sha256sum\"] = sha256sum\n        manifest_data.append(data)\n\n    with open(output_file, \"w\") as f:\n        json.dump(manifest_data, f, indent=4)\n        print(f\"Build manifest generated: {output_file}\")\n        sys.stdout.flush()\n\n\ndef list_of_strings(arg):\n    return arg.split(\",\")\n\n\ndef main():\n    \"\"\"\n    Handles three modes:\n     1. Generate both generated files (default)\n     2. Generate library table\n     3. Generate build manifest\n    \"\"\"\n\n    parser = argparse.ArgumentParser(description=\"FFmpeg Library Information Script\")\n    parser.add_argument(\"--library-list\", type=list_of_strings, default=[])\n    args = parser.parse_args()\n\n    default_versions_table = \"generated_versions_table.md\"\n    default_generated_json_file = \"generated_build_manifest.json\"\n    default_generated_versions_json = \"generated_build_versions_manifest.json\"\n\n    generate_library_table(default_versions_table)\n    generate_build_manifest(default_generated_json_file, args.library_list)\n    generate_versions_manifest(default_generated_versions_json, args.library_list)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "generate-stackbrew-library.sh",
          "type": "blob",
          "size": 1.0830078125,
          "content": "#!/bin/bash\nset -eu\n\narray_2_8='2';\narray_3_0='';\narray_3_1='3 latest';\n\ncd $(cd ${0%/*} && pwd -P);\n\ndeclare -A variants='centos'\n\nhash git 2>/dev/null || { echo >&2 \"git not found, exiting.\"; }\n\nversions=( */ )\nversions=( \"${versions[@]%/}\" )\nurl='git://github.com/jrottenberg/ffmpeg'\n\necho '# maintainer: Julien Rottenberg <julien@rottenberg.info>'\n\nfor version in \"${versions[@]}\"; do\n\tif [[ \"$version\" == \"docs\" ]]; then\n\t\tcontinue\n\tfi\n\teval stub=$(echo \"$version\" | awk -F. '{ print \"$array_\" $1 \"_\" $2 }');\n\tcommit=\"$(git log -1 --format='format:%H' -- \"$version\")\"\n\tfullVersion=\"$(grep -m1 'FFMPEG_VERSION=' \"$version/Dockerfile\"  | cut -d'=' -f2 | cut -d ' ' -f1)\"\n\n\tversionAliases=( $fullVersion $version ${stub} )\n\techo\n\tfor va in \"${versionAliases[@]}\"; do\n\t\techo \"$va: ${url}@${commit} $version\"\n\tdone\n\n\tfor variant in $variants; do\n\t\tcommit=\"$(git log -1 --format='format:%H' -- \"$version/$variant\")\"\n\t\tfor va in \"${versionAliases[@]}\"; do\n\t\t\tif [ \"$va\" = 'latest' ]; then\n\t\t\t\tva=\"$variant\"\n\t\t\telse\n\t\t\t\tva=\"$va-$variant\"\n\t\t\tfi\n\t\t\techo \"$va: ${url}@${commit} $version/$variant\"\n\t\tdone\n\tdone\ndone\n"
        },
        {
          "name": "install_ffmpeg.sh",
          "type": "blob",
          "size": 3.9697265625,
          "content": "#!/bin/bash\n\n# Stop execution on any error\n# Note: we can override this in the Dockerfile RUN command with an || true.\n#       which is useful for debugging\nset -e\nstrip_libs=false\n\n# Parse command-line arguments\nwhile [[ $# -gt 0 ]]; do\n  case \"$1\" in\n    --strip)\n      strip_libs=true\n      shift 1\n      ;;\n    *)\n      echo \"Unknown option: $1\"\n      exit 1\n      ;;\n  esac\ndone\n\nOS_NAME=$(uname -s)\nis_ubuntu=false\nis_alpine=false\nif [[ \"$OS_NAME\" == \"Linux\" ]]; then\n    if grep -q \"Ubuntu\" /etc/os-release; then\n        is_ubuntu=true\n    elif [[ -f /etc/alpine-release ]]; then\n        is_alpine=true\n    fi\nfi\n\ninstall_ffmpeg() {\n    echo \"Installing ffmpeg\"\n    ## cleanup\n    # This is used for both the source and packages version ( be robust about looking for libs to copy )\n    if [ ! -f ${PREFIX}/bin/ffmpeg ]; then\n        echo \"ERROR: ffmpeg not found in ${PREFIX}/bin\"\n        exit 1\n    fi\n    # Check if ffmpeg library is linked to x86_64-linux-gnu and copy it to /usr/local/lib\n    if ldd ${PREFIX}/bin/ffmpeg | grep x86_64-linux-gnu | cut -d ' ' -f 3 | grep -q . ; then\n        ldd ${PREFIX}/bin/ffmpeg | grep x86_64-linux-gnu | cut -d ' ' -f 3 | xargs -i cp -p {} /usr/local/lib/\n    fi\n    # some nvidia libs are in the cuda targets directory\n    if [[ -d /usr/local/cuda/targets/x86_64-linux/lib/ ]]; then\n        cp -p /usr/local/cuda/targets/x86_64-linux/lib/libnpp* /usr/local/lib\n    fi\n\n    # Check if ffmpeg library is linked to opt/ffmpeg and copy it to /usr/local/lib\n    if ldd ${PREFIX}/bin/ffmpeg | grep opt/ffmpeg | cut -d ' ' -f 3 | grep -q . ; then\n        ldd ${PREFIX}/bin/ffmpeg | grep opt/ffmpeg | cut -d ' ' -f 3 | xargs -i cp -p {} /usr/local/lib/\n    fi\n\n    # Create symbolic links for shared libraries in /usr/local/lib\n    for lib in /usr/local/lib/*.so.*; do\n        ln -sf \"${lib##*/}\" \"${lib%%.so.*}\".so\n    done\n\n    # Copy ffmpeg binaries and share directory to /usr/local\n    cp -r ${PREFIX}/bin/* /usr/local/bin/\n    cp -r ${PREFIX}/share/ffmpeg /usr/local/share/\n\n    if [ ! -d /usr/local/include ]; then\n        mkdir -p /usr/local/include\n    fi\n\n    # Build configuration and copy include directories\n    LD_LIBRARY_PATH=/usr/local/lib ffmpeg -buildconf && \\\n    cp -rp ${PREFIX}/include/libav* ${PREFIX}/include/libpostproc ${PREFIX}/include/libsw* /usr/local/include\n\n    # Create pkgconfig directory and copy and modify pkgconfig files\n    mkdir -p /usr/local/lib/pkgconfig\n    for pc in ${PREFIX}/lib/pkgconfig/libav*.pc ${PREFIX}/lib/pkgconfig/libpostproc.pc ${PREFIX}/lib/pkgconfig/kvazaar.pc ${PREFIX}/lib/pkgconfig/libsw*.pc ${PREFIX}/lib/x86_64-linux-gnu/pkgconfig/libvmaf*; do\n        if [[ -f \"$pc\" ]]; then\n            # sed \"s:${PREFIX}:/usr/local:g\" <\"$pc\" >/usr/local/lib/pkgconfig/\"${pc##*/}\"\n            sed \"s:${PREFIX}:/usr/local:g; s:/lib64:/lib:g\" <\"$pc\" >/usr/local/lib/pkgconfig/\"${pc##*/}\"; \\\n        else\n            echo \"Warning: File '$pc' not found.\"\n        fi\n    done\n}\n\nfakeroot_install_with_striped_libs() {\n    echo \"Installing ffmpeg with fakeroot and striped libs\"\n    mkdir -p /tmp/fakeroot/lib\n    ldd ${PREFIX}/bin/ffmpeg | cut -d ' ' -f 3 | strings | xargs -I R cp R /tmp/fakeroot/lib/\n    for lib in /tmp/fakeroot/lib/*; do strip --strip-all $lib; done\n    cp -r ${PREFIX}/bin /tmp/fakeroot/bin/\n    cp -r ${PREFIX}/share/ffmpeg /tmp/fakeroot/share/\n    LD_LIBRARY_PATH=/tmp/fakeroot/lib /tmp/fakeroot/bin/ffmpeg -buildconf\n}\n\nfakeroot_install() {\n    echo \"Using fakeroot to install ffmpeg\"\n    mkdir -p /tmp/fakeroot/lib\n    ldd ${PREFIX}/bin/ffmpeg | cut -d ' ' -f 3 | strings | xargs -I R cp R /tmp/fakeroot/lib/\n    cp -r ${PREFIX}/bin /tmp/fakeroot/bin/\n    cp -r ${PREFIX}/share/ffmpeg /tmp/fakeroot/share/\n    LD_LIBRARY_PATH=/tmp/fakeroot/lib /tmp/fakeroot/bin/ffmpeg -buildconf\n}\n\n# if strip_libs is true then call the install_with_striped_libs function\n# else if is_alpine is true then call the fakeroot_install function\nif $strip_libs; then\n    fakeroot_install_with_striped_libs\nelif $is_alpine; then\n    fakeroot_install\nelse\n    install_ffmpeg\nfi\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.0126953125,
          "content": "black\nflake8\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.029296875,
          "content": "[flake8]\nmax-line-length = 90\n"
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "update.py",
          "type": "blob",
          "size": 13.2958984375,
          "content": "#!/usr/bin/env python3\n\nimport datetime\nimport json\nimport os\nimport shutil\nfrom urllib import request\n\nFFMPEG_RELEASES = \"https://endoflife.date/api/ffmpeg.json\"\n\nDIR_FORMAT_STR = \"docker-images/{0}/{1}\"\nIMAGE_FORMAT_STR = \"{0}/Dockerfile\".format(DIR_FORMAT_STR)\nTEMPLATE_STR = \"templates/Dockerfile-template.{0}\"\n\n# https://ffmpeg.org/olddownload.html\n# https://endoflife.date/ffmpeg\n# We use the endoflife.date API to find the most recent ffmpeg versions. However,\n# to simplify image maintenance, we only consider versions released within the\n# last YEARS years (currently set to 3). Including very older versions compatibility\n# issues with different libraries and operating system versions. By focusing on\n# recent versions, we keep things manageable.\n# Note: the older builds will be preserved in the the docker hub registry.\nRELEASED_YEARS_AGO = 3\n\n\ndef is_too_old(date_str, years):\n    date_obj = datetime.datetime.strptime(date_str, \"%Y-%m-%d\")\n    diff = datetime.datetime.now() - date_obj\n    # Check if the difference is more than x years\n    return diff.days > (years * 365)\n\n\ndef get_eol_versions():\n    keep_version = []\n    with request.urlopen(FFMPEG_RELEASES) as conn:\n        ffmpeg_releases = conn.read().decode(\"utf-8\")\n\n    for v in json.loads(ffmpeg_releases):\n        if not v[\"eol\"]:\n            if \"0.0\" in v[\"latest\"]:\n                v[\"latest\"] = v[\"latest\"].replace(\"0.0\", \"0\")\n            release_date = v[\"releaseDate\"]\n            if not is_too_old(release_date, years=RELEASED_YEARS_AGO):\n                keep_version.append(v[\"latest\"])\n    return keep_version\n\n\nkeep_version = get_eol_versions()\nprint(\"The following versions of ffmpeg is still supported:\")\nfor version in keep_version:\n    print(version)\nVARIANTS = [\n    {\"name\": \"ubuntu2404\", \"parent\": \"ubuntu\"},\n    {\"name\": \"ubuntu2404-edge\", \"parent\": \"ubuntu-edge\"},\n    {\"name\": \"alpine320\", \"parent\": \"alpine\"},\n    {\"name\": \"scratch320\", \"parent\": \"scratch\"},\n    # Video Acceleration API (VAAPI) https://trac.ffmpeg.org/wiki/HWAccelIntro#VAAPI\n    {\"name\": \"vaapi2404\", \"parent\": \"vaapi\"},\n    {\"name\": \"nvidia2404\", \"parent\": \"nvidia\"},\n]\ncurrent_variant_names = [v[\"name\"] for v in VARIANTS]\n\n\nall_parents = sorted(set([sub[\"parent\"] for sub in VARIANTS]))\ngitlabci = [\"stages:\\n  - lint\\n\"]\nazure = []\n\nfor parent in all_parents:\n    gitlabci.append(f\"  - {parent}\\n\")\n\n# Note: Skip variants and the is_too_old(), work together to allow us to skip things\n#       Skip variants allow us to skip some variants for specific versions\n#       is_too_old() check allow us to skip versions that are too old\nSKIP_VARIANTS = {\n    \"2.8\": [\"nvidia2204\", \"vaapi2204\"] + [v[\"name\"] for v in VARIANTS],\n    \"3.4\": [\"alpine313\", \"nvidia2204\", \"scratch313\", \"vaapi2204\"]\n    + [v[\"name\"] for v in VARIANTS],\n    \"4.2\": [\"alpine313\", \"ubuntu2404\"] + [v[\"name\"] for v in VARIANTS],\n    \"4.3\": [\"nvidia2204\", \"vaapi2204\"] + [v[\"name\"] for v in VARIANTS],\n    \"4.4\": [\"alpine313\", \"nvidia2204\", \"scratch313\"] + [v[\"name\"] for v in VARIANTS],\n    \"5.1\": [v[\"name\"] for v in VARIANTS],\n    \"6.1\": [\n        \"nvidia2404\",\n        \"scratch320\",\n    ],  # failing from long build times ( over an hour )\n    \"7.0\": [],\n    \"7.1\": [],\n}\n\n\ndef get_shorten_version(version):\n    if version == \"snapshot\":\n        return version\n    else:\n        major, minor, *patch = version.split(\".\")\n        return f\"{major}.{minor}\"\n\n\ndef get_major_version(version):\n    if version == \"snapshot\":\n        return version\n    else:\n        major, minor, *patch = version.split(\".\")\n        return f\"{major}\"\n\n\ndef read_ffmpeg_template(variant_name, env_or_run=\"env\"):\n    \"\"\"Read the ffmpeg template file and return the content\"\"\"\n    if variant_name == \"scratch\":\n        distro_name = \"alpine-scratch\"\n    elif variant_name == \"alpine\":\n        distro_name = \"alpine\"\n    elif variant_name == \"ubuntu-edge\":\n        distro_name = \"ubuntu-edge\"\n    elif variant_name == \"nvidia\":\n        distro_name = \"nvidia\"\n    elif variant_name == \"vaapi\":\n        distro_name = \"vaapi\"\n    else:\n        distro_name = \"ubuntu\"\n\n    with open(f\"templates/Dockerfile-{env_or_run}-{distro_name}\", \"r\") as tmpfile:\n        return tmpfile.read()\n\n\nprint(\"Preparing docker images for ffmpeg versions: \")\n\n\nfor version in keep_version:\n    skip_variants = None\n    for k, v in SKIP_VARIANTS.items():\n        if version.startswith(k):\n            skip_variants = v\n    compatible_variants = [\n        v for v in VARIANTS if skip_variants is None or v[\"name\"] not in skip_variants\n    ]\n\n    short_version = get_shorten_version(version)\n    major_version = get_major_version(version)\n    ver_path = os.path.join(\"docker-images\", short_version)\n    os.makedirs(ver_path, exist_ok=True)\n    for existing_variant in os.listdir(ver_path):\n        if existing_variant not in compatible_variants:\n            shutil.rmtree(\n                DIR_FORMAT_STR.format(short_version, existing_variant),\n                ignore_errors=True,\n            )\n\n    print(f\"Preparing Dockerfile for ffmpeg-{version}\")\n    for variant in compatible_variants:\n        print(f\"{' '*25}{version}-{variant['name']}\")\n\n        ENV_CONTENT = read_ffmpeg_template(variant[\"parent\"], \"env\")\n        RUN_CONTENT = read_ffmpeg_template(variant[\"parent\"], \"run\")\n\n        siblings = [\n            v[\"name\"] for v in compatible_variants if v[\"parent\"] == variant[\"parent\"]\n        ]\n        is_parent = sorted(siblings, reverse=True)[0] == variant[\"name\"]\n        dockerfile = IMAGE_FORMAT_STR.format(short_version, variant[\"name\"])\n        gitlabci.append(\n            f\"\"\"\n{version}-{variant['name']}:\n  extends: .docker\n  stage: {variant['parent']}\n  variables:\n    MAJOR_VERSION: {major_version}\n    VERSION: \"{short_version}\"\n    LONG_VERSION: \"{version}\"\n    VARIANT: {variant['name']}\n    PARENT: \"{variant['parent']}\"\n    ISPARENT: \"{is_parent}\"\n\"\"\"\n        )\n\n        azure.append(\n            f\"\"\"\n      {variant[\"name\"]}_{version}:\n        MAJOR_VERSION: {major_version}\n        VERSION:  {short_version}\n        LONG_VERSION: {version}\n        VARIANT:  {variant[\"name\"]}\n        PARENT: {variant[\"parent\"]}\n        ISPARENT:  {is_parent}\n\"\"\"\n        )\n        # with open(\n        #     TEMPLATE_STR.format(variant[\"name\"].replace(\"-edge\", \"\")), \"r\"\n        # ) as tmpfile:\n        #     template = tmpfile.read()\n        with open(TEMPLATE_STR.format(variant[\"name\"]), \"r\") as tmpfile:\n            template = tmpfile.read()\n\n        FFMPEG_CONFIG_FLAGS = [\n            \"--disable-debug\",\n            \"--disable-doc\",\n            \"--disable-ffplay\",\n            \"--enable-shared\",\n            \"--extra-libs=-ldl\",\n            \"--enable-gpl\",\n            \"--enable-fontconfig\",\n            \"--enable-libass\",\n            \"--enable-libbluray\",\n            # https://ffmpeg.org/ffmpeg-filters.html#drawtext-1\n            \"--enable-libfreetype\",\n            \"--enable-libharfbuzz\",\n            \"--enable-libfontconfig\",\n            \"--enable-libfribidi\",\n            \"--enable-libmp3lame\",\n            \"--enable-libopencore-amrnb\",\n            \"--enable-libopencore-amrwb\",\n            \"--enable-libopus\",\n            \"--enable-libtheora\",\n            \"--enable-libvidstab\",\n            \"--enable-libvorbis\",\n            \"--enable-libvpx\",\n            \"--enable-libwebp\",\n            \"--enable-libx264\",\n            \"--enable-libx265\",\n            \"--enable-libxvid\",\n            \"--enable-libzimg\",\n            \"--enable-libzmq\",\n            \"--enable-nonfree\",\n            \"--enable-openssl\",\n            \"--enable-postproc\",\n            \"--enable-small\",\n            \"--enable-version3\",\n            '--prefix=\"${PREFIX}\"',\n        ]\n        CFLAGS = [\n            \"-I${PREFIX}/include\",\n        ]\n        LDFLAGS = [\n            \"-L${PREFIX}/lib\",\n        ]\n\n        # OpenJpeg 2.1 is not supported in 2.8\n        if version[0:3] != \"2.8\":\n            FFMPEG_CONFIG_FLAGS.append(\"--enable-libopenjpeg\")\n            FFMPEG_CONFIG_FLAGS.append(\"--enable-libkvazaar\")\n        if version == \"snapshot\" or int(version[0]) > 3:\n            FFMPEG_CONFIG_FLAGS.append(\"--enable-libaom\")\n            FFMPEG_CONFIG_FLAGS.append(\"--extra-libs=-lpthread\")\n\n        # LibSRT is supported from 4.0\n        if version == \"snapshot\" or int(version[0]) >= 4:\n            FFMPEG_CONFIG_FLAGS.append(\"--enable-libsrt\")\n\n        # LibARIBB24 is supported from 4.2\n        if version == \"snapshot\" or float(version[0:3]) >= 4.2:\n            FFMPEG_CONFIG_FLAGS.append(\"--enable-libaribb24\")\n\n        if (template.find(\"meson\") > 0) and (\n            version == \"snapshot\" or float(version[0:3]) >= 4.3\n        ):\n            FFMPEG_CONFIG_FLAGS.append(\"--enable-libvmaf\")\n\n        if (version == \"snapshot\" or int(version[0]) >= 3) and variant[\n            \"parent\"\n        ] == \"vaapi\":\n            FFMPEG_CONFIG_FLAGS.append(\"--enable-vaapi\")\n\n        # libavresample removed on v5, deprecated since v4.0\n        # https://github.com/FFmpeg/FFmpeg/commit/c29038f3041a4080342b2e333c1967d136749c0f\n        if float(version[0]) < 5:\n            FFMPEG_CONFIG_FLAGS.append(\"--enable-avresample\")\n\n        if variant[\"parent\"] == \"nvidia\":\n            CFLAGS.append(\"-I${PREFIX}/include/ffnvcodec\")\n            CFLAGS.append(\"-I/usr/local/cuda/include/\")\n            LDFLAGS.append(\"-L/usr/local/cuda/lib64\")\n            LDFLAGS.append(\"-L/usr/local/cuda/lib32/\")\n            FFMPEG_CONFIG_FLAGS.append(\"--enable-nvenc\")\n            if version == \"snapshot\" or int(version[0]) >= 4:\n                FFMPEG_CONFIG_FLAGS.append(\"--enable-cuda\")\n                FFMPEG_CONFIG_FLAGS.append(\"--enable-cuvid\")\n                FFMPEG_CONFIG_FLAGS.append(\"--enable-libnpp\")\n\n        if float(version[0:3]) >= 5.1:\n            # from https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu#FFmpeg\n            FFMPEG_CONFIG_FLAGS.append(\"--extra-libs=-lm\")  # add math library\n            FFMPEG_CONFIG_FLAGS.append(\"--ld=g++\")  # use g++ as linker\n\n            # DELETE NEXT 5 LINES when everything works\n            # --extra-cflags=\"-I/usr/local/include -I/usr/lib/include\" \\\n            # --extra-cxxflags=\"-I/usr/local/include -I/usr/lib/include\" \\\n            # --extra-ldflags=\"-L/usr/local/lib\" \\\n            # --extra-ldflags=\"-L/usr/local/lib64 -L/usr/lib -L/usr/lib64\" \\\n            # FFMPEG_CONFIG_FLAGS.append(\"--extra-ldflags=-L/usr/local/lib \\\n            # -L/usr/local/lib64 -L/usr/lib -L/usr/lib64\")\n\n            # Some shenagians to get libvmaf to build with static linking\n            FFMPEG_CONFIG_FLAGS.append(\n                \"--extra-ldflags=-L/opt/ffmpeg/lib/x86_64-linux-gnu\"\n            )\n\n            # --ld=g++ or --ld=clang++ when configuring ffmpeg\n            # FFMPEG_CONFIG_FLAGS.append(\"--pkg-config-flags='--static'\")\n            # FFMPEG_CONFIG_FLAGS.append(\"--enable-static\")\n            # FFMPEG_CONFIG_FLAGS.append(\"--enable-gnutls\")\n            FFMPEG_CONFIG_FLAGS.append(\"--enable-libfdk-aac\")\n            FFMPEG_CONFIG_FLAGS.append(\"--enable-libsvtav1\")\n            FFMPEG_CONFIG_FLAGS.append(\"--enable-libdav1d\")\n        else:  # for older versions\n            FFMPEG_CONFIG_FLAGS.append(\n                \"--enable-libfdk_aac\"\n            )  # this was likely misstyped before\n\n        # if \"ubuntu\" in variant[\"parent\"] and float(version[0:3]) >= 5.1:\n        if float(version[0:3]) >= 5.1:\n            CFLAGS.append(\"-I/usr/include/x86_64-linux-gnu\")\n            LDFLAGS.append(\"-L/usr/lib/x86_64-linux-gnu\")\n            LDFLAGS.append(\"-L/usr/lib\")  # for alpine ( but probably fine for all)\n\n        cflags = '--extra-cflags=\"{0}\"'.format(\" \".join(CFLAGS))\n        ldflags = '--extra-ldflags=\"{0}\"'.format(\" \".join(LDFLAGS))\n        FFMPEG_CONFIG_FLAGS.append(cflags)\n        FFMPEG_CONFIG_FLAGS.append(ldflags)\n        FFMPEG_CONFIG_FLAGS.sort()\n\n        COMBINED_CONFIG_FLAGS = \" \\\\\\n        \".join(FFMPEG_CONFIG_FLAGS)\n        # run content needs two replace statements\n        run_content_flags = RUN_CONTENT.replace(\n            \"%%FFMPEG_CONFIG_FLAGS%%\", COMBINED_CONFIG_FLAGS\n        )\n        run_content = run_content_flags.replace(\"%%FFMPEG_VERSION%%\", version[0:3])\n\n        env_content = ENV_CONTENT.replace(\"%%FFMPEG_VERSION%%\", version)\n        docker_content = template.replace(\"%%ENV%%\", env_content)\n        docker_content = docker_content.replace(\"%%RUN%%\", run_content)\n\n        ddir = os.path.dirname(dockerfile)\n        if not os.path.exists(ddir):\n            os.makedirs(ddir)\n\n        with open(dockerfile, \"w\") as dfile:\n            dfile.write(docker_content)\n\n        # These 4 files are used this for everything as even the packaged\n        # builds require building ffmpeg.\n        shutil.copy(\"generate-source-of-truth-ffmpeg-versions.py\", ddir)\n        shutil.copy(\"download_tarballs.sh\", ddir)\n        shutil.copy(\"install_ffmpeg.sh\", ddir)\n        # for build_source.sh, we are not going to just copy the file, we are going\n        # to replace the FFMPEG_CONFIG_FLAGS\n        with open(\"build_source.sh\", \"r\") as tmpfile:\n            template = tmpfile.read()\n            build_source_content = template.replace(\n                \"%%FFMPEG_CONFIG_FLAGS%%\", COMBINED_CONFIG_FLAGS\n            )\n        with open(f\"{ddir}/build_source.sh\", \"w\") as buildfile:\n            buildfile.write(build_source_content)\n\n\nwith open(\"docker-images/gitlab-ci.yml\", \"w\") as gitlabcifile:\n    gitlabcifile.write(\"\".join(gitlabci))\n\nwith open(\"templates/azure.template\", \"r\") as tmpfile:\n    template = tmpfile.read()\nazure = template.replace(\"%%VERSIONS%%\", \"\\n\".join(azure))\n\n\nwith open(\"docker-images/azure-jobs.yml\", \"w\") as azurefile:\n    azurefile.write(azure)\n"
        }
      ]
    }
  ]
}