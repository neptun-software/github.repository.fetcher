{
  "metadata": {
    "timestamp": 1736711306603,
    "page": 64,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjY4",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cypress-io/cypress-docker-images",
      "stars": 1031,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.10546875,
          "content": ".DS_Store\n.vscode\ntest/src/.Trash-0/\n**/cypress/videos\n**/cypress/screenshots\n**/cypress/logs\nnode_modules/\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.103515625,
          "content": "# Add files here to ignore them from prettier formatting\n\n/base\n/browsers\n/included\n/factory/test-project\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.1142578125,
          "content": "{\n  \"printWidth\": 120,\n  \"semi\": false,\n  \"trailingComma\": \"all\",\n  \"arrowParens\": \"always\",\n  \"singleQuote\": true\n}\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 15.634765625,
          "content": "# Contributing to Cypress\n\nThanks for taking the time to contribute! :smile:\n\n## Code of Conduct\n\nAll contributors are expected to abide by our [Code of Conduct](https://github.com/cypress-io/cypress/blob/develop/CODE_OF_CONDUCT.md).\n\n## Development\n\nThis document describes the process to contribute Cypress Docker images for release to the public Cypress repositories on\n\n- [Docker Hub](https://hub.docker.com/u/cypress)\n- [Amazon ECR (Elastic Container Registry) Public Gallery](https://gallery.ecr.aws/cypress-io)\n\nReleases to these public repositories are reserved for configurations that cover general needs, not special configurations.\n\n> [!TIP]\n> To generate customized Cypress Docker images for private organizational use please refer to the [cypress/factory](./factory/README.md) document.\n\n### Replacing existing images\n\n⚠️ As a rule, unless there are extraordinary circumstances, we do NOT replace the existing Docker images. Replacing the images already used by people is dangerous, since it replaces the versions of tools without warning. We have such failed experience once, and do not want to repeat this mistake. Thus instead of replacing an existing image, in 99% of the cases we publish a new Docker image.\n\n### Building locally\n\nWe use `docker compose` to build the `factory` image locally.\n\n```bash\ncd factory\ndocker compose build factory\n```\n\nWith the `factory` image built, you can now build other images\n\n```bash\n# This builds the 'included' image specified in the docker-compose file.\ndocker compose build included\n\n# This builds all images specified in the docker-compose file.\ndocker compose build\n```\n\nOr you can then run tests in the `test-project`\n\n```bash\ncd test-project\n\n# set the environment variables from factory/.env in your terminal.\nset -a && . ../.env && set +a\n\n# run the test in an image built on top of the factory.\ndocker compose run --build --rm test-factory-all-included\n```\n\n### Publishing images\n\n#### Automatic\n\n##### Primary versions\n\nThe [factory/.env](./factory/.env) in the `master` branch should be maintained with the latest stable and supported versions. An exception is the `FACTORY_DEFAULT_NODE_VERSION` which should be set to the [Node.js Active LTS](https://nodejs.org/en/about/previous-releases) version, not the \"Current\" version.\n\nTo publish a new image for `factory`, `base`, `browsers`, or `included`, open a PR with the desired version(s) updated in the [factory/.env](./factory/.env) file. If you change any of the following environment variables in [factory/.env](./factory/.env), then you should also bump the `FACTORY_VERSION` in the same file and make a note of the change in the factory [CHANGELOG](./factory/CHANGELOG.md):\n\n- `BASE_IMAGE`\n- `FACTORY_DEFAULT_NODE_VERSION`\n- `YARN_VERSION`\n\nYou should not change the `FACTORY_VERSION` or make an entry into the factory [CHANGELOG](./factory/CHANGELOG.md) if you are only changing browser versions or the Cypress version.\n\nOnce the PR is merged into the `master` branch, the corresponding images will be pushed to [Docker Hub](https://hub.docker.com/u/cypress) and to the [Amazon ECR (Elastic Container Registry) Public Gallery](https://gallery.ecr.aws/cypress-io) via an automated script run through [CircleCI](circle.yml). Please check that the CI jobs pass after merge. Any CI failure can cause the release process to be interrupted.\n\n##### Alternate versions\n\n> Note: Assistance from a member of the Cypress org is required for this process\n\nIf you need to release alternate versions that do not qualify to be primary versions, do not modify the contents of the [factory/.env](./factory/.env) file in the `master` branch. An example would be to publish images including updated [Node.js releases](https://nodejs.org/en/about/previous-releases) in the category \"Maintenance LTS\" or \"Current\". Instead, carry out the following steps:\n\n1. Create a feature branch in the form `<cypress-version>-node-<node.js version>-publish`, for example `13.11.0-node-18.20.3-publish`, branched from the `master` branch. If you are not a member of the Cypress org, make a request via a new issue to create a feature branch.\n2. Modify [factory/.env](./factory/.env) with the desired versions. Do not modify the `FACTORY_VERSION`. No new `cypress/factory` image should be published with this process.\n3. Modify [factory/docker-compose.yml](./factory/docker-compose.yml) to comment out the creation of `latest` tags. Comment out the `cypress/included` `INCLUDED_IMAGE_SHORT_TAG` to also prevent this tag from being created. This step is essential to avoid the related tags of any existing released images being moved to point to non-primary images.\n4. Modify [circle.yml](circle.yml) to push releases from the feature branch.\n5. Open a PR which targets the feature branch.\n6. After PR merge, check Docker Hub and the associated new image(s).\n\n#### Manual\n\n> Note: This requires being a member of the Cypress org\n\n`base-internal` and `browsers-internal` images are not automatically published after changes are merged. They require manual publishing to Docker Hub. To manual publish:\n\n1. Generate the corresponding files within the `base-internal` and/or `browsers-internal` directories that you want to generate the image from.\n2. Log into Docker Desktop using `cypressdockerpublisher` credentials.\n3. Follow the instructions to build the image from within the generated `Dockerfile` within the appropriate directory in order to build the image locally.\n4. Select 'Push to Hub' on the generate image within Docker Desktop.\n  * If pushing the image fails with `(HTTP code 400) unexpected - invalid tag format`, you can try pushing the image through the CLI, `docker push <NAME:TAG>`\n5. Check Docker Hub to ensure the new image is published and test that it works.\n\n![](https://github.com/cypress-io/cypress/assets/1271364/85507060-acc3-48b5-bc16-4160c4620e1e)\n\n#### To forward X11 from inside a Docker container to a host running macOS\n\nIf you need to test that the image works with Cypress, you can follow these instructions if on a macOS machine, which might prove helpful when debugging image dependencies:\n\n1. Install XQuartz: https://www.xquartz.org/\n2. Launch XQuartz. Under the XQuartz menu, select Settings\n3. Go to the security tab and ensure \"Allow connections from network clients\" is checked.\n4. From the XQuarts terminal, run `xhost + ${hostname}` to allow connections to the macOS host\n5. From the XQuarts terminal, set up a `HOSTNAME` env var `export HOSTNAME=\"host.docker.internal:0\"`\n6. From the XQuarts terminal, run your Docker image like such:\n\n```bash\ndocker run --rm -it -e DISPLAY=\"host.docker.internal:0\" -v /tmp/.X11-unix:/tmp/.X11-unix --entrypoint bash <YOUR_IMAGE_TAG>\n```\n\nWhen executing `npx cypress open` from the Docker container, the display should now be visible!\n\n## Releasing a new factory version\n\nTo release a new [factory](./factory/README.md), open a PR with the desired changes to the [factory.Dockerfile](./factory/factory.Dockerfile) or [installScripts](./factory/installScripts/). After making changes, note the changes in the factory [CHANGELOG](./factory/CHANGELOG.md) and bump the `FACTORY_VERSION` in the [.env](./factory/.env) file to trigger a new release.\n\n## Minimize image sizes\n\nThe `BASE_IMAGE` defined in [factory/.env](./factory/.env) uses a [Debian Docker image](https://hub.docker.com/_/debian) and the current `BASE_IMAGE` is `debian:12-slim` (codename `bookworm`). To keep the image size of the generated Cypress Docker images to a minimum, choose the `slim` variant when other versions of Debian are used, for instance when [Debian releases](https://www.debian.org/releases/) a new major version.\n\nTo see the size of an image, you can use the command [`docker images`](https://docs.docker.com/engine/reference/commandline/images/), for instance with:\n\n```shell\ndocker images --format \"table {{.Repository}} {{.Tag}} {{.Size}}\"\n```\n\nA snapshot of current sizes shows:\n\n| REPOSITORY       | TAG                                                               | SIZE   |\n| ---------------- | ----------------------------------------------------------------- | ------ |\n| cypress/factory  | 4.0.0                                                             | 506MB  |\n| cypress/base     | 20.13.1                                                           | 640MB  |\n| cypress/browsers | node-20.13.1-chrome-125.0.6422.60-1-ff-126.0-edge-125.0.2535.51-1 | 2.14GB |\n| cypress/included | 13.10.0                                                           | 2.86GB |\n\n### Clean up `apt-get` artifacts\n\nCalling `apt-get` creates artifacts that are not necessary to the image, and these artifacts bloat the image size and all images that inherit from it.\n\nTo avoid bloating the Docker layers with extraneous files, after every `RUN` call with `apt-get`, add these cleanup commands within the same `RUN`:\n\n```bash\nrm -rf /usr/share/doc && \\\nrm -rf /usr/share/man && \\\nrm -rf /var/lib/apt/lists/*\n```\n\nNote that due to the use of `debian:<suite>-slim` the directories `/usr/share/doc` and `/usr/share/man` already have minimal content.\n\nDeleting `/usr/share/man` has been removed as a default cleanup command due to side effects of preventing installation of some other Debian packages.\n\n### Use the `--no-install-recommends` with `apt-get`\n\nWhenever upgrading or installing packages with `apt-get`, use the `--no-install-recommends` flag to ensure that `apt-get` installs only the minimum packages required.\n\n### Omit `apt-get clean`\n\nPer the Docker documentation [Building best practices](https://docs.docker.com/build/building/best-practices/#apt-get), you don't need to add `apt-get clean`, since the Docker images implicitly run that command after every `apt-get` execution.\n\n> Official Debian and Ubuntu images automatically run `apt-get clean`, so explicit invocation is not required.\n\n## Tool versions\n\nIt is a good idea to print versions of the installed tools and username at the end of the build, like\n\n```\n# versions of local tools\nRUN echo  \" node version:    $(node -v) \\n\" \\\n  \"npm version:     $(npm -v) \\n\" \\\n  \"yarn version:    $(yarn -v) \\n\" \\\n  \"typescript version:  $(tsc -v) \\n\" \\\n  \"debian version:  $(cat /etc/debian_version) \\n\" \\\n  \"user:            $(whoami) \\n\"\n```\n\n## Multi-Architecture Support\n\nAs of Cypress 10.2.0, `arm64` and `x64` are both supported.\n\nIn CI, the images are built and tested in real `arm64` and `x64` architectures. Then, via `binfmt` and `docker buildx`, we build `x64` and cross-build `arm64` from the same machine, and then publish that image to Docker Hub. The `docker buildx` step runs a second time to push to Amazon ECR:\n\n<!-- diagram generated w/ https://asciiflow.com/ -->\n\n```text\n┌────────────────────┐     ┌──────────────────┐\n│arm64 build+test job│     │x64 build+test job│\n└──────────┬─────────┘     └────────┬─────────┘\n           │                        │\n┌──────────▼────────────────────────▼─────────┐\n│x64 build+push job                           │\n│  ┌──────────────────────────────────────┐   │\n│  │       build+push to Docker Hub       │   │\n│  └──────────────────┬───────────────────┘   │\n│                     │                       │\n│  ┌──────────────────▼───────────────────┐   │\n│  │         build+push to AWS ECR        │   │\n│  └──────────────────────────────────────┘   │\n└─────────────────────────────────────────────┘\n```\n\nA current limitation is that no `arm64` images have browser binaries - see https://github.com/cypress-io/cypress-docker-images/issues/695 for details.\n\n### Updating images to add `linux/arm64`\n\nUsing the `docker` CLI, you can build the `linux/arm64` image of an image, glue the existing `linux/amd64` image to it to create a \"manifest list\", and then push that to update the current tag on the registry. The end result is that `amd64` users will see no change at all, while `arm64` users will now get the correct `arm64` image.\n\n<details>\n<summary>Step-by-step instructions:</summary>\n\nThese steps assume you have Docker Hub and ECR credentials.\n\nWhen following these steps, you may get into a state where you have cached copies of images causing wrong behavior. If this happens, delete the offending images, or `docker system prune --all` to be safe.\n\n1. Ensure that the entire `FROM` chain of this image has a `linux/arm64` version, and follow this guide for those `FROM` images if necessary. For example, generating an `arm64` `cypress/browsers:node1.2.3-chrome100` would require an `arm64` `cypress/base:1.2.3` image.\n2. Re-run the `yarn add:<type>:image` command to update the `Dockerfile` folder with any changes in the build scripts. The correct command is at the top of every `build.sh` file in a comment. Verify that this has replaced the existing image and not caused any unexpected changes, like generating in the wrong directory.\n3. `cd` into the `Dockerfile` folder.\n4. Build the image and tag it with `tmp`:\n   ```shell\n   docker build -t cypress/<image>:tmp --platform linux/arm64 .\n   ```\n5. Manually validate that the image works as expected and is really in `arm64`:\n   ```shell\n   docker run -it cypress/<image>:tmp node -p \"process.arch\" # expect arm64\n   ```\n6. Push the `tmp` tag, and record the digest string (`sha256:hexadecimal...`). This is your `arm64` digest string.\n   ```shell\n   docker push cypress/<image>:tmp\n   # example output:\n   # [...]\n   # tmp: digest: sha256:6c38510771b756153b6f4d54c3ef9185006c1659f725e79d4999cd6304720353 size: 3659\n   ```\n7. Find the current `amd64` digest string, either by using Docker Hub to browse tags, or `docker image inspect cypress/...`\n8. Create a combined manifest using the existing name:\n\n   ```shell\n   docker manifest create cypress/<image>:<tag> \\\n     cypress/<image>:tmp@sha256:rest-of-arm64-digest \\\n     cypress/<image>:<tag>@sha256:rest-of-amd64-digest\n\n   # example:\n   # docker manifest create cypress/included:10.3.0 \\\n   #  cypress/included:tmp@sha256:6c38510771b756153b6f4d54c3ef9185006c1659f725e79d4999cd6304720353 \\\n   #  cypress/included:10.3.0@sha256:942468cdb722c408607093f60eeb1b4ff098a384f9123bf2ded36f55d4c96352\n   ```\n\n9. Run `docker manifest push cypress/<image>:<tag>` to push the completed manifest to Docker Hub.\n10. Validate that the pushed image is correct.\n11. To publish to ECR, use `docker login` to switch accounts and follow the below, slightly modified, steps - you don't need to rebuild the `linux/arm64` version. ECR Digest strings may differ from the Hub Digest strings since they are built separately.\n    ```shell\n    docker login --username AWS --password $(aws ecr-public get-login-password --region us-east-1) public.ecr.aws/cypress-io\n    # tag+push the arm64 build to public.ecr.aws\n    docker tag cypress/$IMAGE_NAME:$TAG@sha256:$ARM64_DIGEST public.ecr.aws/cypress-io/cypress/$IMAGE_NAME:tmp\n    # create a local tag for the public.ecr.aws amd64 build\n    docker pull public.ecr.aws/cypress-io/cypress/$IMAGE_NAME:$TAG\n    # create an arm64+amd64 manifest + replace the old image with the manifest\n    docker manifest create public.ecr.aws/cypress-io/cypress/$IMAGE_NAME:$TAG public.ecr.aws/cypress-io/cypress/$IMAGE_NAME:$TAG public.ecr.aws/cypress-io/cypress/$IMAGE_NAME:tmp\n    docker manifest push public.ecr.aws/cypress-io/cypress/$IMAGE_NAME:$TAG\n    ```\n12. Delete the `tmp` tag.\n</details>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2019 Cypress.io, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.130859375,
          "content": "# Cypress Docker Images [![CircleCI](https://circleci.com/gh/cypress-io/cypress-docker-images/tree/master.svg?style=svg)](https://circleci.com/gh/cypress-io/cypress-docker-images/tree/master)\n\nCypress Docker images are published to [Cypress on Docker Hub](https://hub.docker.com/u/cypress).\n\nThese images provide all of the required dependencies for running Cypress in [Docker](https://docs.docker.com/guides/docker-overview/).\n\nWe build four images: click on the image name to see the available tags with versions, and refer to the [Tags](#tags) section below. These allow you to target specific combinations you need.\n\n| Image Name                                                     | Description                                                                        | Monthly pulls                                                                                                                         |\n| -------------------------------------------------------------- | ---------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n| [cypress/factory](https://hub.docker.com/r/cypress/factory/)   | A base image template which can be used with ARGs to create a custom docker image. | [![Docker Pulls](https://img.shields.io/docker/pulls/cypress/factory.svg?maxAge=604800)](https://hub.docker.com/r/cypress/factory/)   |\n| [cypress/base](https://hub.docker.com/r/cypress/base/)         | All operating system dependencies, no Cypress, and no browsers.                    | [![Docker Pulls](https://img.shields.io/docker/pulls/cypress/base.svg?maxAge=604800)](https://hub.docker.com/r/cypress/base/)         |\n| [cypress/browsers](https://hub.docker.com/r/cypress/browsers/) | All operating system dependencies, no Cypress, and some browsers.                  | [![Docker Pulls](https://img.shields.io/docker/pulls/cypress/browsers.svg?maxAge=604800)](https://hub.docker.com/r/cypress/browsers/) |\n| [cypress/included](https://hub.docker.com/r/cypress/included/) | All operating system dependencies, Cypress, and some browsers installed globally.  | [![Docker Pulls](https://img.shields.io/docker/pulls/cypress/included.svg?maxAge=604800)](https://hub.docker.com/r/cypress/included/) |\n\n## Platforms\n\nCypress Docker images are Linux based, using the Docker image [debian:12-slim](https://hub.docker.com/_/debian) as the default base image. Each of the above listed Cypress Docker images is published with [multi-architecture](https://docs.docker.com/contribute/style/terminology/#multi-architecture--multi-arch) support for `Linux/amd64` and `Linux/arm64` platforms.\n\nCypress Docker images can be run as containers on Continuous Integration (CI) systems which support Docker. Cypress Docker images can also be run locally under [Docker Desktop](https://docs.docker.com/desktop/) for Mac, Linux or Windows environments.\n\nIn the case of Windows environments, see [Docker Desktop for Windows](https://docs.docker.com/desktop/install/windows-install/) and Cypress documentation [Windows Subsystem for Linux](https://on.cypress.io/guides/references/advanced-installation#Windows-Subsystem-for-Linux) for additional information regarding Microsoft's `WSL2` and `WSLg` subsystems. The documentation and scripts in this repository assume that Docker Desktop for Windows runs in a virtual Linux environment.\n\n## Browsers\n\nCypress Docker images [cypress/browsers](./browsers/) include browsers for the `Linux/amd64` platform. Availability is pending for the `Linux/arm64` platform.\n\n| Browser                    |   `Linux/amd64`    | `Linux/arm64`                                                                                                                    |\n| -------------------------- | :----------------: | :------------------------------------------------------------------------------------------------------------------------------- |\n| [Google Chrome][Chrome]    | :white_check_mark: | see [#1188](https://github.com/cypress-io/cypress-docker-images/issues/1188)                                                     |\n| [Mozilla Firefox][Firefox] | :white_check_mark: | see [#1190](https://github.com/cypress-io/cypress-docker-images/issues/1190) and [examples/firefox-esr](./examples/firefox-esr/) |\n| [Microsoft Edge][Edge]     | :white_check_mark: | see [#1189](https://github.com/cypress-io/cypress-docker-images/issues/1189)                                                     |\n\nOn POSIX-based systems, or with [Git for Windows](https://gitforwindows.org/) at a Git Bash prompt, execute `uname -m` to display your system's architecture. ([x86_64](https://en.wikipedia.org/wiki/X86-64) is equivalent to `amd64`.)\n\n[cypress/included](./included/) images, which are built on top of [cypress/browsers](./browsers/), contain the same set of browsers.\n\n[Tags](#tags) for [cypress/browsers](./browsers/) and [cypress/included](./included/) images show which versions of the browsers are loaded into the respective image. (Disregard the browser version tags for current `Linux/arm64` images however.)\n\nBuilding a custom image with [cypress/factory](./factory/) allows selection of individual browsers from the above list.\n\n<!-- browser links -->\n[Chrome]: https://developer.chrome.com/\n[Firefox]: https://www.mozilla.org/firefox\n[Edge]: https://developer.microsoft.com/microsoft-edge/\n[Chromium]: https://www.chromium.org/Home/\n[Firefox Channel Choice]: https://support.mozilla.org/en-US/kb/choosing-firefox-update-channel\n\n### Debian packages\n\n[Debian][Debian packages] provides two Cypress-compatible browsers as packages covering both `amd64` and `arm64` architectures.\nThese can be used to complement the browsers that are configurable through the `cypress/factory` build process:\n\n- See the directory [examples/chromium](./examples/chromium/) to add the current version of Chromium for Debian to Cypress Docker images.\n  The [Debian Chromium Wiki][Debian-Chromium-Wiki] describes the [Chromium][Chromium] browser distribution details.\n  Chromium is not currently included in the `cypress/factory` build process.\n  See [#1191](https://github.com/cypress-io/cypress-docker-images/issues/1191) for progress of this integration.\n\n- See the directory [examples/firefox-esr](./examples/firefox-esr/) to add Firefox ESR for Debian to Cypress Docker images.\n  The [Debian Firefox Wiki][Debian-Firefox-Wiki] describes the [Firefox][Firefox] browser distribution details from the [Extended Support Release][Firefox Channel Choice] channel.\n  This differs from the `cypress/factory` build process which uses Firefox `amd64` versions from the [Rapid Release][Firefox Channel Choice] channel.\n  See [#1190](https://github.com/cypress-io/cypress-docker-images/issues/1190) for availability of Firefox `arm64` [Rapid Release][Firefox Channel Choice] versions.\n\n<!-- Debian links -->\n[Debian packages]: https://www.debian.org/distrib/packages\n[Debian-Chromium-Wiki]: https://wiki.debian.org/Chromium\n[Debian-Firefox-Wiki]: https://wiki.debian.org/Firefox\n\n## Tags\n\nTo select an image, use the `[REPOSITORY[:TAG]]` format.  `REPOSITORY` is one of `cypress/factory`, `cypress/base`, `cypress/browsers` or `cypress/included`. If `TAG` is omitted, it defaults to `latest`.\n\nFor each of the `REPOSITORY` image types, see the `Tags` section of each `README` document for more detail.\n\n| Image Type README                                    | Example Tag |\n| ---------------------------------------------------- | ----------- |\n| [cypress/factory README](./factory/README.md#tags)   | `5.1.0`     |\n| [cypress/base README](./base/README.md#tags)         | `22.11.0`   |\n| [cypress/browsers README](./browsers/README.md#tags) | `22.11.0`   |\n| [cypress/included README](./included/README.md#tags) | `13.16.0`   |\n\nImages with a specific version tag for `cypress/factory` and `cypress/base` (for example: `cypress/factory:5.1.0` and `cypress/base:22.11.0`) are frozen once they have been published. The same is true for images linked to full browser version tags for `cypress/browsers` and `cypress/included` (for example: `cypress/browsers:node-22.11.0-chrome-131.0.6778.69-1-ff-132.0.2-edge-131.0.2903.51-1` and `cypress/included:cypress-13.16.0-node-22.11.0-chrome-131.0.6778.69-1-ff-132.0.2-edge-131.0.2903.51-1`).\n\n`cypress/browsers` and `cypress/included` images are also offered with short-form convenience tags that do not include browser version details (example: `cypress/browsers:22.11.0` and `cypress/included:13.16.0`). The tags that these images refer to can change without notice if browser updates are made.\n\nSimilarly, the convenience tag `latest`, for each of the image types, changes without notice.\n\nTo avoid breaking changes when new images are released, use a corresponding frozen image tag rather than a convenience tag.\n\n## Usage\n\n📍Cypress Docker images are offered as a convenience measure. The goal is to offer Node.js, Browser and Cypress versions to streamline running tests in CI or other non-public, sandboxed environments.\n\nSome preparations and optimizations are not included. For example, given the near infinite permutations, images are not monitored for security vulnerabilities. Additionally, once images are published they are considered immutable and cannot be patched. That means (hypothetically) older images could become more vulnerable over time.\n\nThis means they should **not** be used for production deployment and security scans should be performed as-needed by users of these images.\n\n## Docker Hub\n\nAll of the images and tags are published to [Cypress on Docker Hub](https://hub.docker.com/u/cypress) under:\n\n- [https://hub.docker.com/r/cypress/factory](https://hub.docker.com/r/cypress/factory)\n- [https://hub.docker.com/r/cypress/base](https://hub.docker.com/r/cypress/base)\n- [https://hub.docker.com/r/cypress/browsers](https://hub.docker.com/r/cypress/browsers)\n- [https://hub.docker.com/r/cypress/included](https://hub.docker.com/r/cypress/included)\n\n## Cypress/Factory\n\nDon't see the exact combination of Cypress, Node.js and browser versions you need for your test environment? Checkout our [cypress/factory](factory). You can use it to generate a custom image to fit your needs.\n\n## Examples\n\n- Check out the documentation for each type of Cypress Docker image to read about example usage: [cypress/base](./base/README.md), [cypress/browsers](./browsers/README.md) and [cypress/included](./included/README.md) can all be used directly without change. Each of the Docker images can be used to build other images. [cypress/factory](./factory/README.md) is the preferred image to generate custom images.\n\n- Refer to [CI Docker examples](https://on.cypress.io/guides/continuous-integration/introduction#CI-Docker-examples) for links to examples of using Cypress Docker images with different Continuous Integration (CI) providers. See also the example workflow [.github/workflows/example-cypress-github-action.yml](./.github/workflows/example-cypress-github-action.yml) in this repository for CI usage with [cypress&#8209;io/github&#8209;action](https://github.com/cypress-io/github-action) running under the CI provider [GitHub Actions](https://docs.github.com/en/actions).\n\n## User\n\nBy default, Docker containers run as `root` user. [cypress/base](./base/README.md), [cypress/browsers](./browsers/README.md) and [cypress/included](./included/README.md) images provide the additional non-root user `node`.\n\nIf you run a Cypress Docker image locally as container with a non-root user, refer to the [Docker documentation](https://docs.docker.com/), such as [Docker Desktop FAQs](https://docs.docker.com/desktop/), for information on file-sharing between your host system and Docker. File-sharing details differ depending on the host operating system running Docker.\n\nIf you specify a Cypress Docker image in a [GitHub Actions job](https://docs.github.com/en/actions/using-jobs/running-jobs-in-a-container) `container` workflow section, add `options: --user 1001` to the workflow to avoid permissions issues.\n\n## Debug logs\n\nTo enable all Cypress debug logs when running Cypress in a Docker container, set the environment variable `DEBUG` to the value `cypress:*`. To filter the debug logs read [Log sources](https://on.cypress.io/troubleshooting#Log-sources) for alternate values of `DEBUG`.\n- For `docker run` in a command line, refer to [docker run: set environment variables](https://docs.docker.com/reference/cli/docker/container/run/#env) for options to pass environment variables to a Docker container.\n- In a Continuous Integration (CI) workflow using a Cypress Docker image, refer to your CI documentation for information on setting environment variables.\n\n## Known problems\n\n## Firefox not found\n\n### Problem\n\nWhen running in [GitHub Actions](https://docs.github.com/en/actions) using a `cypress/browsers` or `cypress/included` image and testing against the Mozilla Firefox browser with the default `root` user, Cypress may fail to detect an installed Firefox browser. Instead Cypress shows the following error message:\n\n> Browser: firefox was not found on your system or is not supported by Cypress.\n> Can't run because you've entered an invalid browser name.\n\nThe [GitHub Actions Runner](https://github.com/actions/runner) creates the `/github/home` directory with non-root ownership `1001` (`runner`) and sets the environment variable `HOME` to point to this directory. Firefox will not run with these settings. If the command `firefox --version` is executed, Firefox explains the restriction:\n\n> Running Firefox as root in a regular user's session is not supported. ($HOME is /github/home which is owned by uid 1001.)\n\nSee [Cypress issue #27121](https://github.com/cypress-io/cypress/issues/27121).\n\n### Resolution\n\nTo allow Firefox to run in GitHub Actions in a Docker container, add `options: --user 1001` to the workflow to match GitHub Actions' `runner` user.\n\n```yml\ncontainer:\n  image: cypress/browsers\n  options: --user 1001\n```\n\nSee [Tag Selection](#tag-selection) above for advice on selecting a non-default image tag.\n\n## EACCES permission denied binary_state.json\n\n### Problem\n\nIf a custom Docker image is built from a `cypress/base` or `cypress/browsers` Cypress Docker image, using a `Dockerfile` to install the Cypress binary (for instance with `npx cypress install`), and the custom image is then run as a container with a non-root user, Cypress will fail to run with an error message:\n\n> Error: EACCES: permission denied, open '/root/.cache/Cypress/`<Cypress version>`/binary_state.json'\n\nThis is due to an open Cypress issue [#30684](https://github.com/cypress-io/cypress/issues/30684) where Cypress fails to verify the installed Cypress binary if it does not have write access to the Cypress binary directory.\n\n### Workaround\n\nTo workaround this issue, either make the Cypress binary directory writable, or skip the Cypress binary verification.\n\nTo make the complete Cypress binary directory writable, add the following to the `Dockerfile` after the step to install the Cypress binary:\n\n```Dockerfile\nRUN chmod -R 777 /root/.cache/Cypress\n```\n\nTo skip Cypress binary verification using the environment variable `CYPRESS_SKIP_VERIFY`, described in the Cypress documentation [Advanced Installation](https://docs.cypress.io/app/references/advanced-installation#Environment-variables), either add the following to the `Dockerfile`:\n\n```Dockerfile\nENV CYPRESS_SKIP_VERIFY=true\n```\n\nor pass the environment variable as an additional CLI option `--env CYPRESS_SKIP_VERIFY=true` to the [docker run](https://docs.docker.com/reference/cli/docker/container/run/) command.\n\n## Fontconfig error: No writable cache directories\n\n### Problem\n\nIf a Cypress Docker image is run with a non-root user other than `node` (`1000`) then Cypress may be unable to write into the Linux `$HOME` directory and may fail. The error message contains the text:\n\n```text\nFontconfig error: No writable cache directories\nThe Test Runner unexpectedly exited via a exit event with signal SIGTRAP\n```\n\n### Workaround\n\nBuild a custom Docker image and add the following instructions to the end of the `Dockerfile` to allow the `$HOME` directory for the non-root user `node` to be used and to allow Cypress write access to the necessary cache directories:\n\n```Dockerfile\nENV HOME=/home/node\nRUN chmod -R 777 $HOME /root/.cache/Cypress\n```\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\nSee [LICENSE](LICENSE)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.255859375,
          "content": "# Reporting Security Issues\n\nIf you believe you've found a potential security issue in any Cypress Docker image please consider the following:\n\n- Cypress Docker images released through this repo are convenience images with selected bundled and versioned components.\n- They are intended for use in Continuous Integration (CI) or other non-public, isolated, sandboxed environments.\n- Any security issue must be addressed by the component owner before any related fix can flow into a new Cypress Docker image.\n- Released images are considered frozen and remain released. Newest packages have the tag `latest` applied.\n\n## Debian\n\nEach time a new [cypress/factory][factory] image is built, it uses the base Docker image defined as `BASE_IMAGE` in the [factory/.env](./factory/.env) file and installs any additional Debian packages from the stable distribution. This means any security issues which have been resolved by Debian are resolved in a new [cypress/factory][factory] build. Other Cypress Docker images are built on top of [cypress/factory][factory] and include any Debian security fixes as well.\n\nRefer to [Debian security](https://www.debian.org/security/) for further information.\n\nDebian is used in [cypress/factory][factory], [cypress/base][base], [cypress/browsers][browsers] and [cypress/included][included] Cypress Docker images.\n\n## Browsers\n\nPlease refer to the associated browser owner's documentation regarding browser security vulnerabilities.\n\nBrowsers are included in [cypress/browsers][browsers] and [cypress/included][included] Cypress Docker images.\n\n## Cypress\n\nFor issues with Cypress, we recommend checking the [Cypress issue list](https://github.com/cypress-io/cypress/issues) to see if a vulnerability has already been reported there. Otherwise Cypress [Security and Compliance](https://cypress.io/security/) provides more information on reporting a security issue.\n\nCypress is included only in [cypress/included][included] Cypress Docker images.\n\n[factory]:  https://github.com/cypress-io/cypress-docker-images/tree/master/factory\n[base]:     https://github.com/cypress-io/cypress-docker-images/tree/master/base\n[browsers]: https://github.com/cypress-io/cypress-docker-images/tree/master/browsers\n[included]: https://github.com/cypress-io/cypress-docker-images/tree/master/included\n"
        },
        {
          "name": "base-internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "base",
          "type": "tree",
          "content": null
        },
        {
          "name": "browsers-internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "browsers",
          "type": "tree",
          "content": null
        },
        {
          "name": "circle.yml",
          "type": "blob",
          "size": 19.134765625,
          "content": "# info on building Docker images on Circle\n# https://circleci.com/docs/2.0/building-docker-images/\n\n## If you wish to release Docker image(s) with alternate (i.e. non-primary) versions, do not modify this file in the master branch.\n## Follow the instructions in the CONTRIBUTING document for alternate versions and work instead in a feature branch.\n## Modify the push jobs below to be triggered on the feature branch, not the master branch.\n\nversion: 2.1\n\ncommands:\n    expand-env-file:\n        description: Sets up bash env to load envs from the env file\n        steps:\n            - run:\n                   name: Sets up bash env to load envs from the env file\n                   command: |\n                        touch $BASH_ENV\n                        echo 'set -a && . ~/project/factory/.env && set +a' >> $BASH_ENV\n    halt-if-docker-image-exists:\n        description: Halt current CircleCI job if Docker image exists already\n        parameters:\n            target:\n                type: string\n                description: cypress/* repo name (factory, base, browser or included)\n        steps:\n            - run:\n                  name: Check if image for << parameters.target >> exists on Docker Hub\n                  # using Docker HUB API https://docs.docker.com/docker-hub/api/latest/\n                  # to check if Docker Hub definitely does not have this image\n                  command: |\n                      DOCKER_NAMESPACE='cypress'\n                      DOCKER_REPO=<< parameters.target >>\n\n                      DOCKER_TAG=''\n                      if [ ${DOCKER_REPO} == factory ]; then DOCKER_TAG=${FACTORY_VERSION}; fi\n                      if [ ${DOCKER_REPO} == base ]; then DOCKER_TAG=${BASE_IMAGE_TAG}; fi\n                      if [ ${DOCKER_REPO} == browsers ]; then DOCKER_TAG=${BROWSERS_IMAGE_TAG}; fi\n                      if [ ${DOCKER_REPO} == included ]; then DOCKER_TAG=${INCLUDED_IMAGE_TAG}; fi\n\n                      DOCKER_NAME=${DOCKER_NAMESPACE}/${DOCKER_REPO}:${DOCKER_TAG}\n\n                      if curl -s https://hub.docker.com/v2/namespaces/${DOCKER_NAMESPACE}/repositories/${DOCKER_REPO}/tags/${DOCKER_TAG} \\\n                        | grep -iq 'httperror 404'; then\n                        echo Docker Hub says image $DOCKER_NAME does not exist - HTTP status 404 returned\n                        echo $DOCKER_NAME available for publishing\n                      else\n                        echo Docker Hub found image $DOCKER_NAME - or error occurred\n                        echo Stopping to avoid republishing\n                        circleci-agent step halt\n                      fi\n\njobs:\n    check-factory-versions:\n        machine:\n            image: ubuntu-2204:2024.11.1\n        steps:\n            - checkout\n            - expand-env-file\n            - run:\n                  name: building docker image\n                  command: |\n                      docker compose --progress plain build factory\n                  working_directory: factory\n            - run:\n                  name: build test image\n                  command: |\n                    docker compose --progress plain build test-factory-all-included\n                  working_directory: factory/test-project\n            - run:\n                  name: check node version\n                  command: |\n                    ACTUAL_VERSION=$(docker compose run --rm test-factory-all-included node -v)\n                    if [ v${NODE_VERSION} != \"${ACTUAL_VERSION}\" ]; then\n                      echo \"Version mismatch, v${NODE_VERSION} != ${ACTUAL_VERSION}\"\n                      exit 1;\n                    fi\n                    echo \"Version ${ACTUAL_VERSION} confirmed\"\n                  working_directory: factory/test-project\n            - run:\n                  name: check yarn version\n                  command: |\n                    ACTUAL_VERSION=$(docker compose run --rm test-factory-all-included yarn -v)\n                    if [ ${YARN_VERSION} != \"${ACTUAL_VERSION}\" ]; then\n                      echo \"Version mismatch, ${YARN_VERSION} != ${ACTUAL_VERSION}\"\n                      exit 1;\n                    fi\n                    echo \"Version ${ACTUAL_VERSION} confirmed\"\n                  working_directory: factory/test-project\n            - run:\n                  name: check chrome version\n                  command: |\n                    ACTUAL_VERSION=$(docker compose run --rm test-factory-all-included google-chrome --version | xargs)\n                    TRIMMED_CHROME_VERSION=$(echo ${CHROME_VERSION} | sed -e 's/-.*$//g')\n                    if [ \"Google Chrome ${TRIMMED_CHROME_VERSION}\" != \"${ACTUAL_VERSION}\" ]; then\n                      echo \"Version mismatch, Google Chrome ${TRIMMED_CHROME_VERSION} != ${ACTUAL_VERSION}\"\n                      exit 1;\n                    fi\n                    echo \"Version ${ACTUAL_VERSION} confirmed\"\n                  working_directory: factory/test-project\n            - run:\n                  name: check firefox version\n                  command: |\n                    ACTUAL_VERSION=$(docker compose run --rm test-factory-all-included firefox --version)\n                    if [ \"Mozilla Firefox ${FIREFOX_VERSION}\" != \"${ACTUAL_VERSION}\" ]; then\n                      echo \"Version mismatch, Mozilla Firefox ${FIREFOX_VERSION} != ${ACTUAL_VERSION}\"\n                      exit 1;\n                    fi\n                    echo \"Version ${ACTUAL_VERSION} confirmed\"\n                  working_directory: factory/test-project\n            - run:\n                  name: check edge version\n                  command: |\n                    ACTUAL_VERSION=$(docker compose run --rm test-factory-all-included edge --version | xargs)\n                    TRIMMED_EDGE_VERSION=$(echo ${EDGE_VERSION} | sed -e 's/-.*$//g')\n                    if [ \"Microsoft Edge ${TRIMMED_EDGE_VERSION}\" != \"${ACTUAL_VERSION}\" ]; then\n                      echo \"Version mismatch, Microsoft Edge ${TRIMMED_EDGE_VERSION} != ${ACTUAL_VERSION}\"\n                      exit 1;\n                    fi\n                    echo \"Version ${ACTUAL_VERSION} confirmed\"\n                  working_directory: factory/test-project\n            - run:\n                  name: check cypress version\n                  command: |\n                    ACTUAL_VERSION=$(docker compose run --rm test-factory-all-included cypress -v)\n                    TRIMMED_ACTUAL_VERSION=$(echo ${ACTUAL_VERSION} | sed -e 's/ Cypress binary version:.*$//g')\n                    if [  \"Cypress package version: ${CYPRESS_VERSION}\" != \"${TRIMMED_ACTUAL_VERSION}\" ]; then\n                      echo \"Version mismatch, Cypress package version: ${CYPRESS_VERSION} != ${TRIMMED_ACTUAL_VERSION}\"\n                      exit 1;\n                    fi\n                    echo \"Version ${ACTUAL_VERSION} confirmed\"\n                  working_directory: factory/test-project\n            - run:\n                  # The git version is determined by BASE_IMAGE and its online package sources\n                  # We check that git is installed and report its version\n                  # There is no check for a certain version of git\n                  name: check git version\n                  command: |\n                    ACTUAL_VERSION=$(docker compose run --rm test-factory-all-included git --version)\n                    echo \"Version ${ACTUAL_VERSION} confirmed\"\n                  working_directory: factory/test-project\n            - run:\n                  name: check ssh version # We don't really care what version ssh has as long as the command doesn't error\n                  command: |\n                    ACTUAL_VERSION=$(docker compose run --rm test-factory-all-included ssh -V 2>&1)\n                    echo \"Version ${ACTUAL_VERSION} confirmed\"\n                  working_directory: factory/test-project\n    check-node-override-version:\n        machine:\n            image: ubuntu-2204:2024.11.1\n        steps:\n            - checkout\n            - expand-env-file\n            - run:\n                  name: building docker image\n                  command: |\n                      docker compose --progress plain build factory\n                  working_directory: factory\n            - run:\n                  name: build test image\n                  command: |\n                    docker compose --progress plain build test-factory-node-override\n                  working_directory: factory/test-project\n            - run:\n                  name: check node version\n                  command: |\n                    ACTUAL_VERSION=$(docker compose run --rm test-factory-node-override node -v)\n                    if [ v18.17.1 != \"${ACTUAL_VERSION}\" ]; then\n                      echo \"Version mismatch, v18.17.1 != ${ACTUAL_VERSION}\"\n                      exit 1;\n                    fi\n                    echo \"Version ${ACTUAL_VERSION} confirmed\"\n                  working_directory: factory/test-project\n    test-image:\n        machine:\n            image: ubuntu-2204:2024.11.1\n        parameters:\n            target:\n                type: string\n                description: The docker compose target to build\n            resourceClass:\n                type: string\n                description: Resource class to use for this job\n            test-target:\n                type: string\n                description: The docker compose target to run the test\n        resource_class: << parameters.resourceClass >>\n        steps:\n            - checkout\n            - expand-env-file\n            - run:\n                  name: building docker image\n                  command: |\n                      if [ << parameters.target >> != factory ]; then docker compose --progress plain build factory; fi\n                      docker compose --progress plain build << parameters.target >>\n                  working_directory: factory\n            - run:\n                  name: test\n                  command: |\n                    docker compose --progress plain build << parameters.test-target >>\n                    docker compose run --rm << parameters.test-target >>\n                  working_directory: factory/test-project\n\n    push:\n        machine:\n            image: ubuntu-2204:2024.11.1\n        parameters:\n            target:\n                type: string\n                description: Name of the docker compose target to build and push.\n        steps:\n            - checkout\n            - expand-env-file\n            - halt-if-docker-image-exists:\n                 target: << parameters.target >>\n            - run:\n                name: Building Docker image for target << parameters.target >>\n                no_output_timeout: 20m # installing cypress on arm can take some time.\n                command: |\n                    echo Build environment is ...\n                    echo Node.js $(node --version)\n                    echo $(docker --version)\n                    echo $(docker buildx version)\n\n                    ## see https://docs.docker.com/desktop/multi-arch/\n                    docker run --privileged --rm tonistiigi/binfmt --install linux/amd64,linux/arm64\n                    docker buildx create --name builder --use\n\n                    # Disable default provenance attestation for Buildx\n                    # https://docs.docker.com/build/building/variables/#buildx_no_default_attestations\n                    # https://docs.docker.com/build/release-notes/#0100\n                    # Keeps using docker\n                    # \"mediaType\": \"application/vnd.docker.distribution.manifest.list.v2+json\"\n                    # instead of moving to oci, which may cause compatibility issues, for example\n                    # \"mediaType\": \"application/vnd.oci.image.index.v1+json\"\n                    export BUILDX_NO_DEFAULT_ATTESTATIONS=1\n\n                    docker login -u \"$DOCKERHUB_USERNAME\" --password \"$DOCKERHUB_PASS\"\n                    docker buildx bake -f ./docker-compose.yml --progress plain --set *.platform=linux/arm64,linux/amd64 --push << parameters.target >>\n\n                    ## now, let's re-build those same images for Amazon ECR this is basically a re-tag and push because of the cache from the previous build.\n                    ## see https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-push-ecr-image.html\n                    docker login --username AWS --password \"$(aws ecr-public get-login-password --region $AWS_ECR_REGION)\" $AWS_ECR_PREFIX\n                    REPO_PREFIX=$AWS_ECR_PREFIX/ docker buildx bake -f ./docker-compose.yml --progress plain --set *.platform=linux/arm64,linux/amd64 --push << parameters.target >>\n\n                working_directory: factory\n\nworkflows:\n    test:\n        jobs:\n            - check-factory-versions\n            - check-node-override-version\n            - test-image:\n                matrix:\n                    alias: factory-arm\n                    parameters:\n                        test-target: [\n                            test-factory-electron,\n                            test-factory-cypress-included-electron,\n                            test-factory-cypress-included-electron-non-root-user,\n                            test-factory-all-included-electron-only\n                            ]\n                        resourceClass: [arm.medium]\n                        target: [factory]\n            - test-image:\n                matrix:\n                    alias: factory\n                    parameters:\n                        test-target: [\n                            test-factory-electron,\n                            test-factory-chrome,\n                            test-factory-chrome-non-root-user,\n                            test-factory-firefox,\n                            test-factory-edge,\n                            test-factory-cypress-included-electron,\n                            test-factory-cypress-included-electron-non-root-user,\n                            test-factory-cypress-included-chrome,\n                            test-factory-cypress-included-firefox,\n                            test-factory-cypress-included-firefox-non-root-user,\n                            test-factory-cypress-included-edge,\n                            test-factory-all-included\n                            ]\n                        resourceClass: [medium]\n                        target: [factory]\n            - test-image:\n                matrix:\n                    alias: base\n                    parameters:\n                        test-target: [\n                            test-base\n                            ]\n                        resourceClass: [medium]\n                        target: [base]\n            - test-image:\n                matrix:\n                    alias: base-arm\n                    parameters:\n                        test-target: [\n                            test-base\n                            ]\n                        resourceClass: [arm.medium]\n                        target: [base]\n            - test-image:\n                matrix:\n                    alias: browsers\n                    parameters:\n                        test-target: [\n                            test-browsers-electron,\n                            test-browsers-chrome,\n                            test-browsers-firefox,\n                            test-browsers-edge\n                            ]\n                        resourceClass: [medium]\n                        target: [browsers]\n\n            - test-image:\n                matrix:\n                    alias: browsers-arm\n                    parameters:\n                        test-target: [\n                            test-browsers-electron\n                            ]\n                        resourceClass: [arm.medium]\n                        target: [browsers]\n            - test-image:\n                matrix:\n                    alias: included\n                    parameters:\n                        test-target: [\n                            test-included-electron,\n                            test-included-chrome,\n                            test-included-firefox,\n                            test-included-edge\n                            ]\n                        resourceClass: [medium]\n                        target: [included]\n            - test-image:\n                matrix:\n                    alias: included-arm\n                    parameters:\n                        test-target: [\n                            test-included-electron\n                            ]\n                        resourceClass: [arm.medium]\n                        target: [included]\n            # pushing the factory image must come first because the other images may pull it down to build\n            - push:\n                name: \"Push Factory Image\"\n                target: factory\n                context: test-runner:docker-push\n                filters:\n                    branches:\n                        only:\n                        # Only branches matching the below regex filters will run\n                        # Follow the instructions in the CONTRIBUTING document for alternate versions and\n                        # change to a feature branch such as <cypress-version>-node-<node.js version>-publish\n                        # if publishing an alternate (non-primary) version\n                        # This job must run because the base, browsers and included jobs depend on it\n                            - master\n                requires:\n                    - factory\n                    - factory-arm\n                    - check-node-override-version\n                    - check-factory-versions\n            - push:\n                name: \"Push Base Image\"\n                target: base\n                context: test-runner:docker-push\n                filters:\n                    branches:\n                        only:\n                        # Only branches matching the below regex filters will run\n                        # Change to a feature branch such as <cypress-version>-node-<node.js version>-publish\n                        # if publishing an alternate version\n                            - master\n                requires:\n                    - \"Push Factory Image\"\n                    - base\n                    - base-arm\n            - push:\n                name: \"Push Browser Image\"\n                target: browsers\n                context: test-runner:docker-push\n                filters:\n                    branches:\n                        only:\n                        # Only branches matching the below regex filters will run\n                        # Change to a feature branch such as <cypress-version>-node-<node.js version>-publish\n                        # if publishing an alternate version\n                            - master\n                requires:\n                    - \"Push Factory Image\"\n                    - browsers\n                    - browsers-arm\n            - push:\n                target: included\n                name: \"Push Included Image\"\n                context: test-runner:docker-push\n                filters:\n                    branches:\n                        only:\n                        # Only branches matching the below regex filters will run\n                        # Change to a feature branch such as <cypress-version>-node-<node.js version>-publish\n                        # if publishing an alternate version\n                            - master\n                requires:\n                    - \"Push Factory Image\"\n                    - included\n                    - included-arm\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "factory",
          "type": "tree",
          "content": null
        },
        {
          "name": "included",
          "type": "tree",
          "content": null
        },
        {
          "name": "markdownLinkConfig.json",
          "type": "blob",
          "size": 0.064453125,
          "content": "{\n  \"ignorePatterns\": [\n    {\n      \"pattern\": \"^#S*\"\n    }\n  ]\n}\n"
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 27.8232421875,
          "content": "{\n  \"name\": \"cypress-docker-images\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"cypress-docker-images\",\n      \"version\": \"1.0.0\",\n      \"license\": \"MIT\",\n      \"devDependencies\": {\n        \"markdown-link-check\": \"3.12.2\",\n        \"prettier\": \"3.3.3\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@tootallnate/quickjs-emscripten\": {\n      \"version\": \"0.23.0\",\n      \"resolved\": \"https://registry.npmjs.org/@tootallnate/quickjs-emscripten/-/quickjs-emscripten-0.23.0.tgz\",\n      \"integrity\": \"sha512-C5Mc6rdnsaJDjO3UpGW/CQTHtCKaYlScZTly4JIu97Jxo/odCiH0ITnDXSJPTOrEKk/ycSZ0AOgTmkDtkOsvIA==\",\n      \"dev\": true\n    },\n    \"node_modules/agent-base\": {\n      \"version\": \"7.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/agent-base/-/agent-base-7.1.1.tgz\",\n      \"integrity\": \"sha512-H0TSyFNDMomMNJQBn8wFV5YC/2eJ+VXECwOadZJT554xP6cODZHPX3H9QMQECxvrgiSOP1pHjy1sMWQVYJOUOA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"debug\": \"^4.3.4\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/ast-types\": {\n      \"version\": \"0.13.4\",\n      \"resolved\": \"https://registry.npmjs.org/ast-types/-/ast-types-0.13.4.tgz\",\n      \"integrity\": \"sha512-x1FCFnFifvYDDzTaLII71vG5uvDwgtmDTEVWAxrgeiR8VjMONcCXJx7E+USjDtHlwFmt9MysbqgF9b9Vjr6w+w==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"tslib\": \"^2.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/async\": {\n      \"version\": \"3.2.5\",\n      \"resolved\": \"https://registry.npmjs.org/async/-/async-3.2.5.tgz\",\n      \"integrity\": \"sha512-baNZyqaaLhyLVKm/DlvdW051MSgO6b8eVfIezl9E5PqWxFgzLm/wQntEW4zOytVburDEr0JlALEpdOFwvErLsg==\",\n      \"dev\": true\n    },\n    \"node_modules/basic-ftp\": {\n      \"version\": \"5.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/basic-ftp/-/basic-ftp-5.0.5.tgz\",\n      \"integrity\": \"sha512-4Bcg1P8xhUuqcii/S0Z9wiHIrQVPMermM1any+MX5GeGD7faD3/msQUDGLol9wOcz4/jbg/WJnGqoJF6LiBdtg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=10.0.0\"\n      }\n    },\n    \"node_modules/boolbase\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz\",\n      \"integrity\": \"sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==\",\n      \"dev\": true\n    },\n    \"node_modules/chalk\": {\n      \"version\": \"5.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-5.3.0.tgz\",\n      \"integrity\": \"sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \"^12.17.0 || ^14.13 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\n      }\n    },\n    \"node_modules/cheerio\": {\n      \"version\": \"1.0.0-rc.12\",\n      \"resolved\": \"https://registry.npmjs.org/cheerio/-/cheerio-1.0.0-rc.12.tgz\",\n      \"integrity\": \"sha512-VqR8m68vM46BNnuZ5NtnGBKIE/DfN0cRIzg9n40EIq9NOv90ayxLBXA8fXC5gquFRGJSTRqBq25Jt2ECLR431Q==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"cheerio-select\": \"^2.1.0\",\n        \"dom-serializer\": \"^2.0.0\",\n        \"domhandler\": \"^5.0.3\",\n        \"domutils\": \"^3.0.1\",\n        \"htmlparser2\": \"^8.0.1\",\n        \"parse5\": \"^7.0.0\",\n        \"parse5-htmlparser2-tree-adapter\": \"^7.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/cheeriojs/cheerio?sponsor=1\"\n      }\n    },\n    \"node_modules/cheerio-select\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/cheerio-select/-/cheerio-select-2.1.0.tgz\",\n      \"integrity\": \"sha512-9v9kG0LvzrlcungtnJtpGNxY+fzECQKhK4EGJX2vByejiMX84MFNQw4UxPJl3bFbTMw+Dfs37XaIkCwTZfLh4g==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"boolbase\": \"^1.0.0\",\n        \"css-select\": \"^5.1.0\",\n        \"css-what\": \"^6.1.0\",\n        \"domelementtype\": \"^2.3.0\",\n        \"domhandler\": \"^5.0.3\",\n        \"domutils\": \"^3.0.1\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/fb55\"\n      }\n    },\n    \"node_modules/commander\": {\n      \"version\": \"12.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-12.1.0.tgz\",\n      \"integrity\": \"sha512-Vw8qHK3bZM9y/P10u3Vib8o/DdkvA2OtPtZvD871QKjy74Wj1WSKFILMPRPSdUSx5RFK1arlJzEtA4PkFgnbuA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=18\"\n      }\n    },\n    \"node_modules/css-select\": {\n      \"version\": \"5.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/css-select/-/css-select-5.1.0.tgz\",\n      \"integrity\": \"sha512-nwoRF1rvRRnnCqqY7updORDsuqKzqYJ28+oSMaJMMgOauh3fvwHqMS7EZpIPqK8GL+g9mKxF1vP/ZjSeNjEVHg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"boolbase\": \"^1.0.0\",\n        \"css-what\": \"^6.1.0\",\n        \"domhandler\": \"^5.0.2\",\n        \"domutils\": \"^3.0.1\",\n        \"nth-check\": \"^2.0.1\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/fb55\"\n      }\n    },\n    \"node_modules/css-what\": {\n      \"version\": \"6.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/css-what/-/css-what-6.1.0.tgz\",\n      \"integrity\": \"sha512-HTUrgRJ7r4dsZKU6GjmpfRK1O76h97Z8MfS1G0FozR+oF2kG6Vfe8JE6zwrkbxigziPHinCJ+gCPjA9EaBDtRw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 6\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/fb55\"\n      }\n    },\n    \"node_modules/data-uri-to-buffer\": {\n      \"version\": \"6.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-6.0.2.tgz\",\n      \"integrity\": \"sha512-7hvf7/GW8e86rW0ptuwS3OcBGDjIi6SZva7hCyWC0yYry2cOPmLIjXAUHI6DK2HsnwJd9ifmt57i8eV2n4YNpw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/debug\": {\n      \"version\": \"4.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.3.4.tgz\",\n      \"integrity\": \"sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"ms\": \"2.1.2\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"peerDependenciesMeta\": {\n        \"supports-color\": {\n          \"optional\": true\n        }\n      }\n    },\n    \"node_modules/debug/node_modules/ms\": {\n      \"version\": \"2.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.2.tgz\",\n      \"integrity\": \"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\",\n      \"dev\": true\n    },\n    \"node_modules/degenerator\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/degenerator/-/degenerator-5.0.1.tgz\",\n      \"integrity\": \"sha512-TllpMR/t0M5sqCXfj85i4XaAzxmS5tVA16dqvdkMwGmzI+dXLXnw3J+3Vdv7VKw+ThlTMboK6i9rnZ6Nntj5CQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"ast-types\": \"^0.13.4\",\n        \"escodegen\": \"^2.1.0\",\n        \"esprima\": \"^4.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/dom-serializer\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/dom-serializer/-/dom-serializer-2.0.0.tgz\",\n      \"integrity\": \"sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"domelementtype\": \"^2.3.0\",\n        \"domhandler\": \"^5.0.2\",\n        \"entities\": \"^4.2.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/cheeriojs/dom-serializer?sponsor=1\"\n      }\n    },\n    \"node_modules/domelementtype\": {\n      \"version\": \"2.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/domelementtype/-/domelementtype-2.3.0.tgz\",\n      \"integrity\": \"sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==\",\n      \"dev\": true,\n      \"funding\": [\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/fb55\"\n        }\n      ]\n    },\n    \"node_modules/domhandler\": {\n      \"version\": \"5.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/domhandler/-/domhandler-5.0.3.tgz\",\n      \"integrity\": \"sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"domelementtype\": \"^2.3.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 4\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/fb55/domhandler?sponsor=1\"\n      }\n    },\n    \"node_modules/domutils\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/domutils/-/domutils-3.1.0.tgz\",\n      \"integrity\": \"sha512-H78uMmQtI2AhgDJjWeQmHwJJ2bLPD3GMmO7Zja/ZZh84wkm+4ut+IUnUdRa8uCGX88DiVx1j6FRe1XfxEgjEZA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"dom-serializer\": \"^2.0.0\",\n        \"domelementtype\": \"^2.3.0\",\n        \"domhandler\": \"^5.0.3\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/fb55/domutils?sponsor=1\"\n      }\n    },\n    \"node_modules/entities\": {\n      \"version\": \"4.5.0\",\n      \"resolved\": \"https://registry.npmjs.org/entities/-/entities-4.5.0.tgz\",\n      \"integrity\": \"sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.12\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/fb55/entities?sponsor=1\"\n      }\n    },\n    \"node_modules/escodegen\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/escodegen/-/escodegen-2.1.0.tgz\",\n      \"integrity\": \"sha512-2NlIDTwUWJN0mRPQOdtQBzbUHvdGY2P1VXSyU83Q3xKxM7WHX2Ql8dKq782Q9TgQUNOLEzEYu9bzLNj1q88I5w==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"esprima\": \"^4.0.1\",\n        \"estraverse\": \"^5.2.0\",\n        \"esutils\": \"^2.0.2\"\n      },\n      \"bin\": {\n        \"escodegen\": \"bin/escodegen.js\",\n        \"esgenerate\": \"bin/esgenerate.js\"\n      },\n      \"engines\": {\n        \"node\": \">=6.0\"\n      },\n      \"optionalDependencies\": {\n        \"source-map\": \"~0.6.1\"\n      }\n    },\n    \"node_modules/esprima\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz\",\n      \"integrity\": \"sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==\",\n      \"dev\": true,\n      \"bin\": {\n        \"esparse\": \"bin/esparse.js\",\n        \"esvalidate\": \"bin/esvalidate.js\"\n      },\n      \"engines\": {\n        \"node\": \">=4\"\n      }\n    },\n    \"node_modules/estraverse\": {\n      \"version\": \"5.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz\",\n      \"integrity\": \"sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=4.0\"\n      }\n    },\n    \"node_modules/esutils\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz\",\n      \"integrity\": \"sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/fs-extra\": {\n      \"version\": \"11.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/fs-extra/-/fs-extra-11.2.0.tgz\",\n      \"integrity\": \"sha512-PmDi3uwK5nFuXh7XDTlVnS17xJS7vW36is2+w3xcv8SVxiB4NyATf4ctkVY5bkSjX0Y4nbvZCq1/EjtEyr9ktw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"graceful-fs\": \"^4.2.0\",\n        \"jsonfile\": \"^6.0.1\",\n        \"universalify\": \"^2.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=14.14\"\n      }\n    },\n    \"node_modules/get-uri\": {\n      \"version\": \"6.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/get-uri/-/get-uri-6.0.3.tgz\",\n      \"integrity\": \"sha512-BzUrJBS9EcUb4cFol8r4W3v1cPsSyajLSthNkz5BxbpDcHN5tIrM10E2eNvfnvBn3DaT3DUgx0OpsBKkaOpanw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"basic-ftp\": \"^5.0.2\",\n        \"data-uri-to-buffer\": \"^6.0.2\",\n        \"debug\": \"^4.3.4\",\n        \"fs-extra\": \"^11.2.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/graceful-fs\": {\n      \"version\": \"4.2.11\",\n      \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz\",\n      \"integrity\": \"sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==\",\n      \"dev\": true\n    },\n    \"node_modules/html-link-extractor\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/html-link-extractor/-/html-link-extractor-1.0.5.tgz\",\n      \"integrity\": \"sha512-ADd49pudM157uWHwHQPUSX4ssMsvR/yHIswOR5CUfBdK9g9ZYGMhVSE6KZVHJ6kCkR0gH4htsfzU6zECDNVwyw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"cheerio\": \"^1.0.0-rc.10\"\n      }\n    },\n    \"node_modules/htmlparser2\": {\n      \"version\": \"8.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/htmlparser2/-/htmlparser2-8.0.2.tgz\",\n      \"integrity\": \"sha512-GYdjWKDkbRLkZ5geuHs5NY1puJ+PXwP7+fHPRz06Eirsb9ugf6d8kkXav6ADhcODhFFPMIXyxkxSuMf3D6NCFA==\",\n      \"dev\": true,\n      \"funding\": [\n        \"https://github.com/fb55/htmlparser2?sponsor=1\",\n        {\n          \"type\": \"github\",\n          \"url\": \"https://github.com/sponsors/fb55\"\n        }\n      ],\n      \"dependencies\": {\n        \"domelementtype\": \"^2.3.0\",\n        \"domhandler\": \"^5.0.3\",\n        \"domutils\": \"^3.0.1\",\n        \"entities\": \"^4.4.0\"\n      }\n    },\n    \"node_modules/http-proxy-agent\": {\n      \"version\": \"7.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz\",\n      \"integrity\": \"sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"agent-base\": \"^7.1.0\",\n        \"debug\": \"^4.3.4\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/https-proxy-agent\": {\n      \"version\": \"7.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.4.tgz\",\n      \"integrity\": \"sha512-wlwpilI7YdjSkWaQ/7omYBMTliDcmCN8OLihO6I9B86g06lMyAoqgoDpV0XqoaPOKj+0DIdAvnsWfyAAhmimcg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"agent-base\": \"^7.0.2\",\n        \"debug\": \"4\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/iconv-lite\": {\n      \"version\": \"0.6.3\",\n      \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz\",\n      \"integrity\": \"sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"safer-buffer\": \">= 2.1.2 < 3.0.0\"\n      },\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/ip-address\": {\n      \"version\": \"9.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/ip-address/-/ip-address-9.0.5.tgz\",\n      \"integrity\": \"sha512-zHtQzGojZXTwZTHQqra+ETKd4Sn3vgi7uBmlPoXVWZqYvuKmtI0l/VZTjqGmJY9x88GGOaZ9+G9ES8hC4T4X8g==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"jsbn\": \"1.1.0\",\n        \"sprintf-js\": \"^1.1.3\"\n      },\n      \"engines\": {\n        \"node\": \">= 12\"\n      }\n    },\n    \"node_modules/is-absolute-url\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-absolute-url/-/is-absolute-url-4.0.1.tgz\",\n      \"integrity\": \"sha512-/51/TKE88Lmm7Gc4/8btclNXWS+g50wXhYJq8HWIBAGUBnoAdRu1aXeh364t/O7wXDAcTJDP8PNuNKWUDWie+A==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/is-relative-url\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-relative-url/-/is-relative-url-4.0.0.tgz\",\n      \"integrity\": \"sha512-PkzoL1qKAYXNFct5IKdKRH/iBQou/oCC85QhXj6WKtUQBliZ4Yfd3Zk27RHu9KQG8r6zgvAA2AQKC9p+rqTszg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"is-absolute-url\": \"^4.0.1\"\n      },\n      \"engines\": {\n        \"node\": \">=14.16\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\n      }\n    },\n    \"node_modules/isemail\": {\n      \"version\": \"3.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/isemail/-/isemail-3.2.0.tgz\",\n      \"integrity\": \"sha512-zKqkK+O+dGqevc93KNsbZ/TqTUFd46MwWjYOoMrjIMZ51eU7DtQG3Wmd9SQQT7i7RVnuTPEiYEWHU3MSbxC1Tg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"punycode\": \"2.x.x\"\n      },\n      \"engines\": {\n        \"node\": \">=4.0.0\"\n      }\n    },\n    \"node_modules/jsbn\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/jsbn/-/jsbn-1.1.0.tgz\",\n      \"integrity\": \"sha512-4bYVV3aAMtDTTu4+xsDYa6sy9GyJ69/amsu9sYF2zqjiEoZA5xJi3BrfX3uY+/IekIu7MwdObdbDWpoZdBv3/A==\",\n      \"dev\": true\n    },\n    \"node_modules/jsonfile\": {\n      \"version\": \"6.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz\",\n      \"integrity\": \"sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"universalify\": \"^2.0.0\"\n      },\n      \"optionalDependencies\": {\n        \"graceful-fs\": \"^4.1.6\"\n      }\n    },\n    \"node_modules/link-check\": {\n      \"version\": \"5.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/link-check/-/link-check-5.3.0.tgz\",\n      \"integrity\": \"sha512-Jhb7xueDgQgBaZzkfOtAyOZEZAIMJQIjUpYD2QY/zEB+LKTY1tWiBwZg8QIDbzQdPBOcqzg7oLQDNcES/tQmXg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"is-relative-url\": \"^4.0.0\",\n        \"isemail\": \"^3.2.0\",\n        \"ms\": \"^2.1.3\",\n        \"needle\": \"^3.3.1\",\n        \"proxy-agent\": \"^6.4.0\"\n      }\n    },\n    \"node_modules/lodash\": {\n      \"version\": \"4.17.21\",\n      \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz\",\n      \"integrity\": \"sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==\",\n      \"dev\": true\n    },\n    \"node_modules/lru-cache\": {\n      \"version\": \"7.18.3\",\n      \"resolved\": \"https://registry.npmjs.org/lru-cache/-/lru-cache-7.18.3.tgz\",\n      \"integrity\": \"sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/markdown-link-check\": {\n      \"version\": \"3.12.2\",\n      \"resolved\": \"https://registry.npmjs.org/markdown-link-check/-/markdown-link-check-3.12.2.tgz\",\n      \"integrity\": \"sha512-GWMwSvxuZn+uGGydi5yywnnDZy08SGps4I/63xqvWT7lxtH4cVLnhgZZYtEcPz/QvgPg9vbH2rvWpa29owMtHA==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"async\": \"^3.2.5\",\n        \"chalk\": \"^5.3.0\",\n        \"commander\": \"^12.1.0\",\n        \"link-check\": \"^5.3.0\",\n        \"lodash\": \"^4.17.21\",\n        \"markdown-link-extractor\": \"^4.0.2\",\n        \"needle\": \"^3.3.1\",\n        \"progress\": \"^2.0.3\",\n        \"proxy-agent\": \"^6.4.0\"\n      },\n      \"bin\": {\n        \"markdown-link-check\": \"markdown-link-check\"\n      }\n    },\n    \"node_modules/markdown-link-extractor\": {\n      \"version\": \"4.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/markdown-link-extractor/-/markdown-link-extractor-4.0.2.tgz\",\n      \"integrity\": \"sha512-5cUOu4Vwx1wenJgxaudsJ8xwLUMN7747yDJX3V/L7+gi3e4MsCm7w5nbrDQQy8nEfnl4r5NV3pDXMAjhGXYXAw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"html-link-extractor\": \"^1.0.5\",\n        \"marked\": \"^12.0.1\"\n      }\n    },\n    \"node_modules/marked\": {\n      \"version\": \"12.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/marked/-/marked-12.0.2.tgz\",\n      \"integrity\": \"sha512-qXUm7e/YKFoqFPYPa3Ukg9xlI5cyAtGmyEIzMfW//m6kXwCy2Ps9DYf5ioijFKQ8qyuscrHoY04iJGctu2Kg0Q==\",\n      \"dev\": true,\n      \"bin\": {\n        \"marked\": \"bin/marked.js\"\n      },\n      \"engines\": {\n        \"node\": \">= 18\"\n      }\n    },\n    \"node_modules/ms\": {\n      \"version\": \"2.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\n      \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\n      \"dev\": true\n    },\n    \"node_modules/needle\": {\n      \"version\": \"3.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/needle/-/needle-3.3.1.tgz\",\n      \"integrity\": \"sha512-6k0YULvhpw+RoLNiQCRKOl09Rv1dPLr8hHnVjHqdolKwDrdNyk+Hmrthi4lIGPPz3r39dLx0hsF5s40sZ3Us4Q==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"iconv-lite\": \"^0.6.3\",\n        \"sax\": \"^1.2.4\"\n      },\n      \"bin\": {\n        \"needle\": \"bin/needle\"\n      },\n      \"engines\": {\n        \"node\": \">= 4.4.x\"\n      }\n    },\n    \"node_modules/netmask\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/netmask/-/netmask-2.0.2.tgz\",\n      \"integrity\": \"sha512-dBpDMdxv9Irdq66304OLfEmQ9tbNRFnFTuZiLo+bD+r332bBmMJ8GBLXklIXXgxd3+v9+KUnZaUR5PJMa75Gsg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 0.4.0\"\n      }\n    },\n    \"node_modules/nth-check\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/nth-check/-/nth-check-2.1.1.tgz\",\n      \"integrity\": \"sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"boolbase\": \"^1.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/fb55/nth-check?sponsor=1\"\n      }\n    },\n    \"node_modules/pac-proxy-agent\": {\n      \"version\": \"7.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/pac-proxy-agent/-/pac-proxy-agent-7.0.1.tgz\",\n      \"integrity\": \"sha512-ASV8yU4LLKBAjqIPMbrgtaKIvxQri/yh2OpI+S6hVa9JRkUI3Y3NPFbfngDtY7oFtSMD3w31Xns89mDa3Feo5A==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"@tootallnate/quickjs-emscripten\": \"^0.23.0\",\n        \"agent-base\": \"^7.0.2\",\n        \"debug\": \"^4.3.4\",\n        \"get-uri\": \"^6.0.1\",\n        \"http-proxy-agent\": \"^7.0.0\",\n        \"https-proxy-agent\": \"^7.0.2\",\n        \"pac-resolver\": \"^7.0.0\",\n        \"socks-proxy-agent\": \"^8.0.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/pac-resolver\": {\n      \"version\": \"7.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/pac-resolver/-/pac-resolver-7.0.1.tgz\",\n      \"integrity\": \"sha512-5NPgf87AT2STgwa2ntRMr45jTKrYBGkVU36yT0ig/n/GMAa3oPqhZfIQ2kMEimReg0+t9kZViDVZ83qfVUlckg==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"degenerator\": \"^5.0.0\",\n        \"netmask\": \"^2.0.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/parse5\": {\n      \"version\": \"7.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/parse5/-/parse5-7.1.2.tgz\",\n      \"integrity\": \"sha512-Czj1WaSVpaoj0wbhMzLmWD69anp2WH7FXMB9n1Sy8/ZFF9jolSQVMu1Ij5WIyGmcBmhk7EOndpO4mIpihVqAXw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"entities\": \"^4.4.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/inikulin/parse5?sponsor=1\"\n      }\n    },\n    \"node_modules/parse5-htmlparser2-tree-adapter\": {\n      \"version\": \"7.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/parse5-htmlparser2-tree-adapter/-/parse5-htmlparser2-tree-adapter-7.0.0.tgz\",\n      \"integrity\": \"sha512-B77tOZrqqfUfnVcOrUvfdLbz4pu4RopLD/4vmu3HUPswwTA8OH0EMW9BlWR2B0RCoiZRAHEUu7IxeP1Pd1UU+g==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"domhandler\": \"^5.0.2\",\n        \"parse5\": \"^7.0.0\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/inikulin/parse5?sponsor=1\"\n      }\n    },\n    \"node_modules/prettier\": {\n      \"version\": \"3.3.3\",\n      \"resolved\": \"https://registry.npmjs.org/prettier/-/prettier-3.3.3.tgz\",\n      \"integrity\": \"sha512-i2tDNA0O5IrMO757lfrdQZCc2jPNDVntV0m/+4whiDfWaTKfMNgR7Qz0NAeGz/nRqF4m5/6CLzbP4/liHt12Ew==\",\n      \"dev\": true,\n      \"license\": \"MIT\",\n      \"bin\": {\n        \"prettier\": \"bin/prettier.cjs\"\n      },\n      \"engines\": {\n        \"node\": \">=14\"\n      },\n      \"funding\": {\n        \"url\": \"https://github.com/prettier/prettier?sponsor=1\"\n      }\n    },\n    \"node_modules/progress\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/progress/-/progress-2.0.3.tgz\",\n      \"integrity\": \"sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=0.4.0\"\n      }\n    },\n    \"node_modules/proxy-agent\": {\n      \"version\": \"6.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/proxy-agent/-/proxy-agent-6.4.0.tgz\",\n      \"integrity\": \"sha512-u0piLU+nCOHMgGjRbimiXmA9kM/L9EHh3zL81xCdp7m+Y2pHIsnmbdDoEDoAz5geaonNR6q6+yOPQs6n4T6sBQ==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"agent-base\": \"^7.0.2\",\n        \"debug\": \"^4.3.4\",\n        \"http-proxy-agent\": \"^7.0.1\",\n        \"https-proxy-agent\": \"^7.0.3\",\n        \"lru-cache\": \"^7.14.1\",\n        \"pac-proxy-agent\": \"^7.0.1\",\n        \"proxy-from-env\": \"^1.1.0\",\n        \"socks-proxy-agent\": \"^8.0.2\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/proxy-from-env\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz\",\n      \"integrity\": \"sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==\",\n      \"dev\": true\n    },\n    \"node_modules/punycode\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz\",\n      \"integrity\": \"sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">=6\"\n      }\n    },\n    \"node_modules/safer-buffer\": {\n      \"version\": \"2.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz\",\n      \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\",\n      \"dev\": true\n    },\n    \"node_modules/sax\": {\n      \"version\": \"1.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/sax/-/sax-1.3.0.tgz\",\n      \"integrity\": \"sha512-0s+oAmw9zLl1V1cS9BtZN7JAd0cW5e0QH4W3LWEK6a4LaLEA2OTpGYWDY+6XasBLtz6wkm3u1xRw95mRuJ59WA==\",\n      \"dev\": true\n    },\n    \"node_modules/smart-buffer\": {\n      \"version\": \"4.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz\",\n      \"integrity\": \"sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 6.0.0\",\n        \"npm\": \">= 3.0.0\"\n      }\n    },\n    \"node_modules/socks\": {\n      \"version\": \"2.8.3\",\n      \"resolved\": \"https://registry.npmjs.org/socks/-/socks-2.8.3.tgz\",\n      \"integrity\": \"sha512-l5x7VUUWbjVFbafGLxPWkYsHIhEvmF85tbIeFZWc8ZPtoMyybuEhL7Jye/ooC4/d48FgOjSJXgsF/AJPYCW8Zw==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"ip-address\": \"^9.0.5\",\n        \"smart-buffer\": \"^4.2.0\"\n      },\n      \"engines\": {\n        \"node\": \">= 10.0.0\",\n        \"npm\": \">= 3.0.0\"\n      }\n    },\n    \"node_modules/socks-proxy-agent\": {\n      \"version\": \"8.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/socks-proxy-agent/-/socks-proxy-agent-8.0.3.tgz\",\n      \"integrity\": \"sha512-VNegTZKhuGq5vSD6XNKlbqWhyt/40CgoEw8XxD6dhnm8Jq9IEa3nIa4HwnM8XOqU0CdB0BwWVXusqiFXfHB3+A==\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"agent-base\": \"^7.1.1\",\n        \"debug\": \"^4.3.4\",\n        \"socks\": \"^2.7.1\"\n      },\n      \"engines\": {\n        \"node\": \">= 14\"\n      }\n    },\n    \"node_modules/source-map\": {\n      \"version\": \"0.6.1\",\n      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",\n      \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",\n      \"dev\": true,\n      \"optional\": true,\n      \"engines\": {\n        \"node\": \">=0.10.0\"\n      }\n    },\n    \"node_modules/sprintf-js\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.3.tgz\",\n      \"integrity\": \"sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA==\",\n      \"dev\": true\n    },\n    \"node_modules/tslib\": {\n      \"version\": \"2.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz\",\n      \"integrity\": \"sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==\",\n      \"dev\": true\n    },\n    \"node_modules/universalify\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz\",\n      \"integrity\": \"sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==\",\n      \"dev\": true,\n      \"engines\": {\n        \"node\": \">= 10.0.0\"\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.8857421875,
          "content": "{\n  \"name\": \"cypress-docker-images\",\n  \"version\": \"1.0.0\",\n  \"description\": \"These images provide all of the required dependencies for running Cypress in Docker.\",\n  \"main\": \"index.js\",\n  \"directories\": {\n    \"example\": \"examples\"\n  },\n  \"scripts\": {\n    \"check:markdown\": \"find . -type f -name '*.md' ! -path '*/node_modules/*' | xargs -L1 npx markdown-link-check -c markdownLinkConfig.json\",\n    \"format\": \"prettier --write .\"\n  },\n  \"engines\": {\n    \"node\": \">=12\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/cypress-io/cypress-docker-images.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"Cypress-io\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/cypress-io/cypress-docker-images/issues\"\n  },\n  \"homepage\": \"https://github.com/cypress-io/cypress-docker-images#readme\",\n  \"devDependencies\": {\n    \"markdown-link-check\": \"3.12.2\",\n    \"prettier\": \"3.3.3\"\n  }\n}\n"
        }
      ]
    }
  ]
}