{
  "metadata": {
    "timestamp": 1736711293560,
    "page": 31,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "emk/rust-musl-builder",
      "stars": 1547,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1201171875,
          "content": "examples/adding-a-library/target\nexamples/linking-with-git2/target\nexamples/using-diesel/target\nexamples/using-sqlx/target\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": "target\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.765625,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/). We do not use Semantic Versioning, because our images are tagged based on Rust releases. However, we try to maintain as much backwards compatibility as possible.\n\nFor maximum stablity, use images with tags like `ekidd/rust-musl-builder:1.46.0` or `ekidd/rust-musl-builder:nightly-2020-08-26`. These may occasionally be rebuilt, but only while they're \"current\", or possibly if they're recent and serious security issues are discovered in a library.\n\n## 2021-12-23\n\n### Added\n\n- Set up weekly cron builds every Thursday, a few hours after Rust releases often happen. This should keep `stable` and `beta` more-or-less up-to-date. (Tagged releases like `1.57.0` will still need to be made manually.)\n- Retroactively built missing stable releases. We have these going way back, so we might as well add the rest.\n- Added a note explaining who can switch to `cross` and how to do it.\n\n### Changed\n\n- **Moved release builds from Docker Hub to GitHub!** This allows us to once again start building images without paying Docker Hub for slow, frustrating builders.\n- Moved PR tests from Travis CI to GitHub.\n- Updated `examples/` to use newer dependencies.\n- Updated to OpenSSL 1.1.1m.\n- Updated to mdbook 0.4.14.\n- Updated to mbbook-graphviz 0.1.3 (now using upstream binaries).\n- Updated to cargo-about 0.4.4.\n- Updated to cargo-audit 0.16.0 (now using upstream binaries).\n- Updated to PostgreSQL 11.14. Still no PostgreSQL 12 unless someone wants to look into diesel and static linking.\n\n## 2021-02-13\n\n### Changed\n\n- mdbook: Updated to 0.4.6.\n- Postgres: Updated to 11.11.\n\n## 2021-01-07\n\n### Fixed\n\n- SECURITY: Update `mdbook` to 0.4.5 to fix [CVE-2020-26297](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26297), as [described on the Rust blog](https://blog.rust-lang.org/2021/01/04/mdbook-security-advisory.html). Thank you to Kyle McCarthy. This potentially affects people who use the bundled `mdbook` to build and publish their documentation.\n\n## 2021-01-04\n\nThis release contains a number of major changes, including dropping our ancient and incomplete ARM support and supporting building as `root` as a first step towards better supporting GitHub Actions.\n\n### Changed\n\n- You'll need to use `USER root` and `env RUSTUP_HOME=/opt/rust/rustup CARGO_HOME=/opt/rust/cargo rustup $ARGS` to install any new Rust components using `rustup`.\n- `rustup`, `cargo`, and associated tools are all installed in `/opt/rust`, so that they should be available to the users `rust`, `root`, and any other users that get added.\n- Some other minor supporting tools like `git-credential-ghtoken` should now be available as `root`, as well.\n- We have updated our dependencies to the newest versions:\n  - OpenSSL 1.1.1i (contains security fixes)\n  - `mdbook` 0.4.4\n  - `cargo about` 0.2.3\n  - `cargo deny` 0.8.5 (may have breaking changes)\n- Our example programs now use newer versions of their Rust dependencies.\n\n### Removed\n\n- ARM support has been removed, because it needs to be split into a separate base image. This would also allow us to build OpenSSL, etc., for ARM targets.\n- The `rust-docs` component is no longer installed by default.\n\n## 2020-09-04\n\n### Added\n\n- Added `examples/using-sqlx`.\n\n### Changed\n\n- Our OpenSSL configuration now uses environment variables prefixed with `X86_64_UNKNOWN_LINUX_MUSL_`. See [sfackler/rust-openssl#1337](https://github.com/sfackler/rust-openssl/issues/1337) and [launchbadge/sqlx#670](https://github.com/launchbadge/sqlx/issues/670) for background. This allows us to support static builds of `sqlx`, but it may break very old versions of `openssl-sys` (which were probably already broken when OpenSSL 1.0 reached its end-of-life).\n\n## 2020-08-27\n\n### Updated\n\n- Update to `cargo deny` 0.7.3.\n- Update to PostgreSQL 11.9.\n\n## 2020-07-16\n\n### Updated\n\n- Update to `mdbook` version 0.4.1.\n- Update to `cargo deny` 0.7.0.\n\n## 2020-06-05\n\n### Changed\n\n- Previously, `stable` included OpenSSL 1.0.2, and `stable-openssl11` included OpenSSL 1.1.1. However, OpenSSL 1.0.2 is **no longer receiving security fixes,** so the new tagging system will be:\n  - `stable`: OpenSSL 1.1.1 and the latest stable Rust.\n  - **DEPRECATED** `stable-openssl11`: OpenSSL 1.1 and Rust 1.42.0. This will no longer be updated. Use `stable` instead.\n  - **DEPRECATED** `1.42.0-openssl10` and `nightly-2020-03-12-openssl10`: OpenSSL 1.0.2. These will not be updated to newer Rust. You will still be able to build newer OpenSSL 1.0.2 images manually.\n\n  I hate to break compatibility with projects that require OpenSSL 1.0.2, but since it will receive no future security updates, I no longer feel comfortable supplying pre-built images.\n\n### Updated\n\n- Update to `cargo deny` 0.6.7.\n- Update to PostgreSQL 11.8.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 9.8330078125,
          "content": "# Use Ubuntu 18.04 LTS as our base image.\nFROM ubuntu:18.04\n\n# The Rust toolchain to use when building our image.  Set by `hooks/build`.\nARG TOOLCHAIN=stable\n\n# The OpenSSL version to use. Here is the place to check for new releases:\n#\n# - https://www.openssl.org/source/\n#\n# ALSO UPDATE hooks/build!\nARG OPENSSL_VERSION=1.1.1m\n\n# Versions for other dependencies. Here are the places to check for new\n# releases:\n#\n# - https://github.com/rust-lang/mdBook/releases\n# - https://github.com/dylanowen/mdbook-graphviz/releases\n# - https://github.com/EmbarkStudios/cargo-about/releases\n# - https://github.com/rustsec/rustsec/releases\n# - https://github.com/EmbarkStudios/cargo-deny/releases\n# - http://zlib.net/\n# - https://ftp.postgresql.org/pub/source/\n#\n# We're stuck on PostgreSQL 11 until we figure out\n# https://github.com/emk/rust-musl-builder/issues.\nARG MDBOOK_VERSION=0.4.14\nARG MDBOOK_GRAPHVIZ_VERSION=0.1.3\nARG CARGO_ABOUT_VERSION=0.4.4\nARG CARGO_AUDIT_VERSION=0.16.0\nARG CARGO_DENY_VERSION=0.11.0\nARG ZLIB_VERSION=1.2.11\nARG POSTGRESQL_VERSION=11.14\n\n# Make sure we have basic dev tools for building C libraries.  Our goal here is\n# to support the musl-libc builds and Cargo builds needed for a large selection\n# of the most popular crates.\n#\n# We also set up a `rust` user by default. This user has sudo privileges if you\n# need to install any more software.\nRUN apt-get update && \\\n    export DEBIAN_FRONTEND=noninteractive && \\\n    apt-get install -yq \\\n        build-essential \\\n        cmake \\\n        curl \\\n        file \\\n        git \\\n        graphviz \\\n        musl-dev \\\n        musl-tools \\\n        libpq-dev \\\n        libsqlite-dev \\\n        libssl-dev \\\n        linux-libc-dev \\\n        pkgconf \\\n        sudo \\\n        unzip \\\n        xutils-dev \\\n        && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/* && \\\n    useradd rust --user-group --create-home --shell /bin/bash --groups sudo\n\n# - `mdbook` is the standard Rust tool for making searchable HTML manuals.\n# - `mdbook-graphviz` allows using inline GraphViz drawing commands to add illustrations.\n# - `cargo-about` generates a giant license file for all dependencies.\n# - `cargo-audit` checks for security vulnerabilities. We include it for backwards compat.\n# - `cargo-deny` does everything `cargo-audit` does, plus check licenses & many other things.\nRUN curl -fLO https://github.com/rust-lang-nursery/mdBook/releases/download/v$MDBOOK_VERSION/mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-gnu.tar.gz && \\\n    tar xf mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-gnu.tar.gz && \\\n    mv mdbook /usr/local/bin/ && \\\n    rm -f mdbook-v$MDBOOK_VERSION-x86_64-unknown-linux-gnu.tar.gz && \\\n    curl -fLO https://github.com/dylanowen/mdbook-graphviz/releases/download/v$MDBOOK_GRAPHVIZ_VERSION/mdbook-graphviz_v${MDBOOK_GRAPHVIZ_VERSION}_x86_64-unknown-linux-musl.zip && \\\n    unzip mdbook-graphviz_v${MDBOOK_GRAPHVIZ_VERSION}_x86_64-unknown-linux-musl.zip && \\\n    mv mdbook-graphviz /usr/local/bin/ && \\\n    rm -f mdbook-graphviz_v${MDBOOK_GRAPHVIZ_VERSION}_x86_64-unknown-linux-musl.zip && \\\n    curl -fLO https://github.com/EmbarkStudios/cargo-about/releases/download/$CARGO_ABOUT_VERSION/cargo-about-$CARGO_ABOUT_VERSION-x86_64-unknown-linux-musl.tar.gz && \\\n    tar xf cargo-about-$CARGO_ABOUT_VERSION-x86_64-unknown-linux-musl.tar.gz && \\\n    mv cargo-about-$CARGO_ABOUT_VERSION-x86_64-unknown-linux-musl/cargo-about /usr/local/bin/ && \\\n    rm -rf cargo-about-$CARGO_ABOUT_VERSION-x86_64-unknown-linux-musl.tar.gz cargo-about-$CARGO_ABOUT_VERSION-x86_64-unknown-linux-musl && \\\n    curl -fLO https://github.com/rustsec/rustsec/releases/download/cargo-audit%2Fv${CARGO_AUDIT_VERSION}/cargo-audit-x86_64-unknown-linux-gnu-v${CARGO_AUDIT_VERSION}.tgz && \\\n    tar xf cargo-audit-x86_64-unknown-linux-gnu-v${CARGO_AUDIT_VERSION}.tgz && \\\n    cp cargo-audit-x86_64-unknown-linux-gnu-v${CARGO_AUDIT_VERSION}/cargo-audit /usr/local/bin/ && \\\n    rm -rf cargo-audit-x86_64-unknown-linux-gnu-v${CARGO_AUDIT_VERSION}.tgz cargo-audit-x86_64-unknown-linux-gnu-v${CARGO_AUDIT_VERSION} && \\\n    curl -fLO https://github.com/EmbarkStudios/cargo-deny/releases/download/$CARGO_DENY_VERSION/cargo-deny-$CARGO_DENY_VERSION-x86_64-unknown-linux-musl.tar.gz && \\\n    tar xf cargo-deny-$CARGO_DENY_VERSION-x86_64-unknown-linux-musl.tar.gz && \\\n    mv cargo-deny-$CARGO_DENY_VERSION-x86_64-unknown-linux-musl/cargo-deny /usr/local/bin/ && \\\n    rm -rf cargo-deny-$CARGO_DENY_VERSION-x86_64-unknown-linux-musl cargo-deny-$CARGO_DENY_VERSION-x86_64-unknown-linux-musl.tar.gz\n\n# Static linking for C++ code\nRUN ln -s \"/usr/bin/g++\" \"/usr/bin/musl-g++\"\n\n# Build a static library version of OpenSSL using musl-libc.  This is needed by\n# the popular Rust `hyper` crate.\n#\n# We point /usr/local/musl/include/linux at some Linux kernel headers (not\n# necessarily the right ones) in an effort to compile OpenSSL 1.1's \"engine\"\n# component. It's possible that this will cause bizarre and terrible things to\n# happen. There may be \"sanitized\" header\nRUN echo \"Building OpenSSL\" && \\\n    ls /usr/include/linux && \\\n    mkdir -p /usr/local/musl/include && \\\n    ln -s /usr/include/linux /usr/local/musl/include/linux && \\\n    ln -s /usr/include/x86_64-linux-gnu/asm /usr/local/musl/include/asm && \\\n    ln -s /usr/include/asm-generic /usr/local/musl/include/asm-generic && \\\n    cd /tmp && \\\n    short_version=\"$(echo \"$OPENSSL_VERSION\" | sed s'/[a-z]$//' )\" && \\\n    curl -fLO \"https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz\" || \\\n        curl -fLO \"https://www.openssl.org/source/old/$short_version/openssl-$OPENSSL_VERSION.tar.gz\" && \\\n    tar xvzf \"openssl-$OPENSSL_VERSION.tar.gz\" && cd \"openssl-$OPENSSL_VERSION\" && \\\n    env CC=musl-gcc ./Configure no-shared no-zlib -fPIC --prefix=/usr/local/musl -DOPENSSL_NO_SECURE_MEMORY linux-x86_64 && \\\n    env C_INCLUDE_PATH=/usr/local/musl/include/ make depend && \\\n    env C_INCLUDE_PATH=/usr/local/musl/include/ make && \\\n    make install && \\\n    rm /usr/local/musl/include/linux /usr/local/musl/include/asm /usr/local/musl/include/asm-generic && \\\n    rm -r /tmp/*\n\nRUN echo \"Building zlib\" && \\\n    cd /tmp && \\\n    curl -fLO \"http://zlib.net/zlib-$ZLIB_VERSION.tar.gz\" && \\\n    tar xzf \"zlib-$ZLIB_VERSION.tar.gz\" && cd \"zlib-$ZLIB_VERSION\" && \\\n    CC=musl-gcc ./configure --static --prefix=/usr/local/musl && \\\n    make && make install && \\\n    rm -r /tmp/*\n\nRUN echo \"Building libpq\" && \\\n    cd /tmp && \\\n    curl -fLO \"https://ftp.postgresql.org/pub/source/v$POSTGRESQL_VERSION/postgresql-$POSTGRESQL_VERSION.tar.gz\" && \\\n    tar xzf \"postgresql-$POSTGRESQL_VERSION.tar.gz\" && cd \"postgresql-$POSTGRESQL_VERSION\" && \\\n    CC=musl-gcc CPPFLAGS=-I/usr/local/musl/include LDFLAGS=-L/usr/local/musl/lib ./configure --with-openssl --without-readline --prefix=/usr/local/musl && \\\n    cd src/interfaces/libpq && make all-static-lib && make install-lib-static && \\\n    cd ../../bin/pg_config && make && make install && \\\n    rm -r /tmp/*\n\n# (Please feel free to submit pull requests for musl-libc builds of other C\n# libraries needed by the most popular and common Rust crates, to avoid\n# everybody needing to build them manually.)\n\n# Install a `git credentials` helper for using GH_USER and GH_TOKEN to access\n# private repositories if desired. We make sure this is configured for root,\n# here, and for the `rust` user below.\nADD git-credential-ghtoken /usr/local/bin/ghtoken\nRUN git config --global credential.https://github.com.helper ghtoken\n\n# Set up our path with all our binary directories, including those for the\n# musl-gcc toolchain and for our Rust toolchain.\n#\n# We use the instructions at https://github.com/rust-lang/rustup/issues/2383\n# to install the rustup toolchain as root.\nENV RUSTUP_HOME=/opt/rust/rustup \\\n    PATH=/home/rust/.cargo/bin:/opt/rust/cargo/bin:/usr/local/musl/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\n# Install our Rust toolchain and the `musl` target.  We patch the\n# command-line we pass to the installer so that it won't attempt to\n# interact with the user or fool around with TTYs.  We also set the default\n# `--target` to musl so that our users don't need to keep overriding it\n# manually.\nRUN curl https://sh.rustup.rs -sSf | \\\n    env CARGO_HOME=/opt/rust/cargo \\\n        sh -s -- -y --default-toolchain $TOOLCHAIN --profile minimal --no-modify-path && \\\n    env CARGO_HOME=/opt/rust/cargo \\\n        rustup component add rustfmt && \\\n    env CARGO_HOME=/opt/rust/cargo \\\n        rustup component add clippy && \\\n    env CARGO_HOME=/opt/rust/cargo \\\n        rustup target add x86_64-unknown-linux-musl\nADD cargo-config.toml /opt/rust/cargo/config\n\n# Set up our environment variables so that we cross-compile using musl-libc by\n# default.\nENV X86_64_UNKNOWN_LINUX_MUSL_OPENSSL_DIR=/usr/local/musl/ \\\n    X86_64_UNKNOWN_LINUX_MUSL_OPENSSL_STATIC=1 \\\n    PQ_LIB_STATIC_X86_64_UNKNOWN_LINUX_MUSL=1 \\\n    PG_CONFIG_X86_64_UNKNOWN_LINUX_GNU=/usr/bin/pg_config \\\n    PKG_CONFIG_ALLOW_CROSS=true \\\n    PKG_CONFIG_ALL_STATIC=true \\\n    LIBZ_SYS_STATIC=1 \\\n    TARGET=musl\n\n# Install some useful Rust tools from source (as few as we can, because these\n# slow down image builds). This will use the static linking toolchain, but that\n# should be OK.\n#\n# - `cargo-deb` builds Debian packages.\nRUN env CARGO_HOME=/opt/rust/cargo cargo install -f cargo-deb && \\\n    rm -rf /opt/rust/cargo/registry/\n\n# Allow sudo without a password.\nADD sudoers /etc/sudoers.d/nopasswd\n\n# Run all further code as user `rust`, create our working directories, install\n# our config file, and set up our credential helper.\n#\n# You should be able to switch back to `USER root` from another `Dockerfile`\n# using this image if you need to do so.\nUSER rust\nRUN mkdir -p /home/rust/libs /home/rust/src /home/rust/.cargo && \\\n    ln -s /opt/rust/cargo/config /home/rust/.cargo/config && \\\n    git config --global credential.https://github.com.helper ghtoken\n\n# Expect our source code to live in /home/rust/src.  We'll run the build as\n# user `rust`, which will be uid 1000, gid 1000 outside the container.\nWORKDIR /home/rust/src\n"
        },
        {
          "name": "LICENSE-APACHE.txt",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT.txt",
          "type": "blob",
          "size": 1.060546875,
          "content": "Copyright (c) 2016 Eric Kidd\nCopyright (c) 2016 Faraday, Inc.\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.73828125,
          "content": "# `rust-musl-builder`: Docker container for easily building static Rust binaries\n\n[![Docker Image](https://img.shields.io/docker/pulls/ekidd/rust-musl-builder.svg?maxAge=2592000)](https://hub.docker.com/r/ekidd/rust-musl-builder/)\n\n- [Source on GitHub](https://github.com/emk/rust-musl-builder)\n- [Changelog](https://github.com/emk/rust-musl-builder/blob/master/CHANGELOG.md)\n\n**UPDATED:** This repository is effectively dead at this point, given the increasing rarity of crates which require OpenSSL.\n\nHowever, **[`rustls`](rustls) now works well** with most of the Rust ecosystem, including `reqwest`, `tokio`, `tokio-postgres`, `sqlx` and many others. The only major project which still requires `libpq` and OpenSSL is [Diesel](https://diesel.rs/). If you don't need `diesel` or `libpq`:\n\n- See if you can switch away from OpenSSL, typically by using `features` in `Cargo.toml` to ask your dependencies to use [`rustls`](rustls) instead.\n- If you don't need OpenSSL, try [`cross build --target=x86_64-unknown-linux-musl --release`](https://github.com/rust-embedded/cross) to cross-compile your binaries for `libmusl`. This supports many more platforms, with less hassle!\n\n[rustls]: https://github.com/rustls\n\n## What is this?\n\nThis image allows you to build static Rust binaries using `diesel`, `sqlx` or `openssl`. These images can be distributed as single executable files with no dependencies, and they should work on any modern Linux system.\n\nTo try it, run:\n\n```sh\nalias rust-musl-builder='docker run --rm -it -v \"$(pwd)\":/home/rust/src ekidd/rust-musl-builder'\nrust-musl-builder cargo build --release\n```\n\nThis command assumes that `$(pwd)` is readable and writable by uid 1000, gid 1000. At the moment, it doesn't attempt to cache libraries between builds, so this is best reserved for making final release builds.\n\nFor a more realistic example, see the `Dockerfile`s for [examples/using-diesel](./examples/using-diesel) and [examples/using-sqlx](./examples/using-sqlx).\n\n## Deploying your Rust application\n\nWith a bit of luck, you should be able to just copy your application binary from `target/x86_64-unknown-linux-musl/release`, and install it directly on any reasonably modern x86_64 Linux machine.  In particular, you should be able make static release binaries using TravisCI and GitHub, or you can copy your Rust application into an [Alpine Linux container][]. See below for details!\n\n## Available tags\n\nIn general, we provide the following tagged Docker images:\n\n- `latest`, `stable`: Current stable Rust, now with OpenSSL 1.1. We\n  try to update this fairly rapidly after every new stable release, and\n  after most point releases.\n- `X.Y.Z`: Specific versions of stable Rust.\n- `beta`: This usually gets updated every six weeks alongside the stable\n  release. It will usually not be updated for beta bugfix releases.\n- `nightly-YYYY-MM-DD`: Specific nightly releases. These should almost\n  always support `clippy`, `rls` and `rustfmt`, as verified using\n  [rustup components history][comp]. If you need a specific date for\n  compatibility with `tokio` or another popular library using unstable\n  Rust, please file an issue.\n\nAt a minimum, each of these images should be able to\ncompile [examples/using-diesel](./examples/using-diesel) and [examples/using-sqlx](./examples/using-sqlx).\n\n[comp]: https://rust-lang.github.io/rustup-components-history/index.html\n\n## Caching builds\n\nYou may be able to speed up build performance by adding the following `-v` commands to the `rust-musl-builder` alias:\n\n```sh\n-v cargo-git:/home/rust/.cargo/git\n-v cargo-registry:/home/rust/.cargo/registry\n-v target:/home/rust/src/target\n```\n\nYou will also need to fix the permissions on the mounted volumes:\n\n```sh\nrust-musl-builder sudo chown -R rust:rust \\\n  /home/rust/.cargo/git /home/rust/.cargo/registry /home/rust/src/target\n```\n\n## How it works\n\n`rust-musl-builder` uses [musl-libc][], [musl-gcc][], and the new [rustup][] `target` support.  It includes static versions of several libraries:\n\n- The standard `musl-libc` libraries.\n- OpenSSL, which is needed by many Rust applications.\n- `libpq`, which is needed for applications that use `diesel` with PostgreSQL.\n- `libz`, which is needed by `libpq`.\n- SQLite3. See [examples/using-diesel](./examples/using-diesel/).\n\nThis library also sets up the environment variables needed to compile popular Rust crates using these libraries.\n\n## Extras\n\nThis image also supports the following extra goodies:\n\n- Basic compilation for `armv7` using `musl-libc`. Not all libraries are supported at the moment, however.\n- [`mdbook`][mdbook] and `mdbook-graphviz` for building searchable HTML documentation from Markdown files. Build manuals to use alongside your `cargo doc` output!\n- [`cargo about`][about] to collect licenses for your dependencies.\n- [`cargo deb`][deb] to build Debian packages\n- [`cargo deny`][deny] to check your Rust project for known security issues.\n\n## Making OpenSSL work\n\nIf your application uses OpenSSL, you will also need to take a few extra steps to make sure that it can find OpenSSL's list of trusted certificates, which is stored in different locations on different Linux distributions. You can do this using [`openssl-probe`](https://crates.io/crates/openssl-probe) as follows:\n\n```rust\nfn main() {\n    openssl_probe::init_ssl_cert_env_vars();\n    //... your code\n}\n```\n\n## Making Diesel work\n\nIn addition to setting up OpenSSL, you'll need to add the following lines to your `Cargo.toml`:\n\n```toml\n[dependencies]\ndiesel = { version = \"1\", features = [\"postgres\", \"sqlite\"] }\n\n# Needed for sqlite.\nlibsqlite3-sys = { version = \"*\", features = [\"bundled\"] }\n\n# Needed for Postgres.\nopenssl = \"*\"\n```\n\nFor PostgreSQL, you'll also need to include `diesel` and `openssl` in your `main.rs` in the following order (in order to avoid linker errors):\n\n```rust\nextern crate openssl;\n#[macro_use]\nextern crate diesel;\n```\n\nIf this doesn't work, you _might_ be able to fix it by reversing the order. See [this PR](https://github.com/emk/rust-musl-builder/issues/69) for a discussion of the latest issues involved in linking to `diesel`, `pq-sys` and `openssl-sys`.\n\n## Making static releases with Travis CI and GitHub\n\nThese instructions are inspired by [rust-cross][].\n\nFirst, read the [Travis CI: GitHub Releases Uploading][uploading] page, and run `travis setup releases` as instructed.  Then add the following lines to your existing `.travis.yml` file, replacing `myapp` with the name of your package:\n\n```yaml\nlanguage: rust\nsudo: required\nos:\n- linux\n- osx\nrust:\n- stable\nservices:\n- docker\nbefore_deploy: \"./build-release myapp ${TRAVIS_TAG}-${TRAVIS_OS_NAME}\"\ndeploy:\n  provider: releases\n  api_key:\n    secure: \"...\"\n  file_glob: true\n  file: \"myapp-${TRAVIS_TAG}-${TRAVIS_OS_NAME}.*\"\n  skip_cleanup: true\n  on:\n    rust: stable\n    tags: true\n```\n\nNext, copy [`build-release`](./examples/build-release) into your project and run `chmod +x build-release`.\n\nFinally, add a `Dockerfile` to perform the actual build:\n\n```Dockerfile\nFROM ekidd/rust-musl-builder\n\n# We need to add the source code to the image because `rust-musl-builder`\n# assumes a UID of 1000, but TravisCI has switched to 2000.\nADD --chown=rust:rust . ./\n\nCMD cargo build --release\n```\n\nWhen you push a new tag to your project, `build-release` will automatically build new Linux binaries using `rust-musl-builder`, and new Mac binaries with Cargo, and it will upload both to the GitHub releases page for your repository.\n\nFor a working example, see [faradayio/cage][cage].\n\n[rust-cross]: https://github.com/japaric/rust-cross\n[uploading]: https://docs.travis-ci.com/user/deployment/releases\n[cage]: https://github.com/faradayio/cage\n\n## Making tiny Docker images with Alpine Linux and Rust binaries\n\nDocker now supports [multistage builds][multistage], which make it easy to build your Rust application with `rust-musl-builder` and deploy it using [Alpine Linux][]. For a working example, see [`examples/using-diesel/Dockerfile`](./examples/using-diesel/Dockerfile).\n\n[multistage]: https://docs.docker.com/engine/userguide/eng-image/multistage-build/\n[Alpine Linux]: https://alpinelinux.org/\n\n## Adding more C libraries\n\nIf you're using Docker crates which require specific C libraries to be installed, you can create a `Dockerfile` based on this one, and use `musl-gcc` to compile the libraries you need.  For an example, see [`examples/adding-a-library/Dockerfile`](./examples/adding-a-library/Dockerfile). This usually involves a bit of experimentation for each new library, but it seems to work well for most simple, standalone libraries.\n\nIf you need an especially common library, please feel free to submit a pull request adding it to the main `Dockerfile`!  We'd like to support popular Rust crates out of the box.\n\n## Development notes\n\nAfter modifying the image, run `./test-image` to make sure that everything works.\n\n## Other ways to build portable Rust binaries\n\nIf for some reason this image doesn't meet your needs, there's a variety of other people working on similar projects:\n\n- [messense/rust-musl-cross](https://github.com/messense/rust-musl-cross) shows how to build binaries for many different architectures.\n- [japaric/rust-cross](https://github.com/japaric/rust-cross) has extensive instructions on how to cross-compile Rust applications.\n- [clux/muslrust](https://github.com/clux/muslrust) also supports libcurl.\n- [golddranks/rust_musl_docker](https://github.com/golddranks/rust_musl_docker). Another Docker image.\n\n## License\n\nEither the [Apache 2.0 license](./LICENSE-APACHE.txt), or the\n[MIT license](./LICENSE-MIT.txt).\n\n[Alpine Linux container]: https://hub.docker.com/_/alpine/\n[about]: https://github.com/EmbarkStudios/cargo-about\n[deb]: https://github.com/mmstick/cargo-deb\n[deny]: https://github.com/EmbarkStudios/cargo-deny\n[mdbook]: https://github.com/rust-lang-nursery/mdBook\n[musl-libc]: http://www.musl-libc.org/\n[musl-gcc]: http://www.musl-libc.org/how.html\n[rustup]: https://www.rustup.rs/\n"
        },
        {
          "name": "cargo-config.toml",
          "type": "blob",
          "size": 0.1669921875,
          "content": "[build]\n# Target musl-libc by default when running Cargo.\ntarget = \"x86_64-unknown-linux-musl\"\n\n[target.armv7-unknown-linux-musleabihf]\nlinker = \"arm-linux-gnueabihf-gcc\"\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "git-credential-ghtoken",
          "type": "blob",
          "size": 2.375,
          "content": "#!/bin/bash\n#\n# Usage: git-credential-ghtoken <operation>\n#\n# Allows `git` to authenticate with GitHub using `GH_USER` and `GH_TOKEN`\n# environment variables.\n#\n# To install this:\n#\n#     git config --global credential.https://github.com.helper \\\n#         \"$(pwd)/scripts/git-credential-ghtoken\"\n#\n# Or copy it into your path and run:\n#\n#     git config --global credential.https://github.com.helper ghtoken\n#\n#\n# Copyright (c) 2018 Faraday, Inc.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\n# Standard paranoia.\nset -euo pipefail\n\n# Parse our command-line arguments.\noperation=\"$1\"\n\n# Ignore all operations besides `get`.\nif [ \"$operation\" != get ]; then\n    exit 0\nfi\n\n# Quit now if we don't have the necessary environment variables.\nif [ ! -v GH_USER ] || [ ! -v GH_TOKEN ]; then\n    exit 0\nfi\n\n# Parse the input we receive from `git`.\nwhile read line; do\n    var=\"$(echo \"$line\" | sed 's/=.*$//')\"\n    val=\"$(echo \"$line\" | sed 's/^.*=//')\"\n    case \"$var\" in\n        # Only send credentials over HTTPS.\n        protocol)\n            if [ \"$val\" != https ]; then\n                exit 0\n            fi\n            ;;\n        # Only send credentials to GitHub (just extra paranoia; change as\n        # needed).\n        host)\n            if [ \"$val\" != github.com ]; then\n                exit 0\n            fi\n            ;;\n    esac\ndone\n\n# Output our credentials.\ncat <<EOD\nusername=$GH_USER\npassword=$GH_TOKEN\nEOD\n"
        },
        {
          "name": "sudoers",
          "type": "blob",
          "size": 0.0859375,
          "content": "# Allow group sudo to use `sudo` without a password.\n%sudo   ALL=(ALL:ALL) NOPASSWD:ALL\n"
        },
        {
          "name": "test-image",
          "type": "blob",
          "size": 1.390625,
          "content": "#!/bin/bash\n\n# Make bash fail much more aggressively on errors.\nset -euo pipefail\n\n# Make sure we can build our main container.\ndocker build -t ekidd/rust-musl-builder .\n\n# Make sure we can build our example derived container.\ndocker build -t rust-musl-zlib examples/adding-a-library\n\n# Make sure we can build a multi-stage container.\ndocker build -t rust-musl-builder-using-diesel examples/using-diesel\ndocker run --rm rust-musl-builder-using-diesel\n\necho \"==== Verifying static linking\"\n\n# Make sure we can build a static executable using `sqlx`.\ndocker build -t rust-musl-builder-using-sqlx examples/using-sqlx\ndocker run --rm rust-musl-builder-using-sqlx sh -c \"\nset -euo pipefail\n\necho -e '--- Test case for sqlx:'\necho 'ldd says:'\nif ldd /usr/local/bin/using-sqlx; then\n  echo '[FAIL] Executable is not static!' 1>&2\n  exit 1\nfi\necho -e '[PASS] using-sqlx binary is statically linked.\\n'\n\"\n\n# Make sure we can build a static executable using `git2`.\ndocker build -t rust-musl-builder-linking-with-git2 examples/linking-with-git2\ndocker run --rm rust-musl-builder-linking-with-git2 bash -c \"\nset -euo pipefail\ncd /home/rust/src\n\necho -e '--- Test case for libgit2:'\necho 'ldd says:'\nif ldd target/x86_64-unknown-linux-musl/debug/linking-with-git2; then\n  echo '[FAIL] Executable is not static!' 1>&2\n  exit 1\nfi\necho -e '[PASS] libgit2 binary is statically linked.\\n'\n\"\n\n# We're good.\necho 'OK. ALL TESTS PASSED.' 1>&2\n"
        }
      ]
    }
  ]
}