{
  "metadata": {
    "timestamp": 1736711287182,
    "page": 16,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "compose-spec/compose-spec",
      "stars": 2325,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.0234375,
          "content": "[*.json]\nindent_size = 2"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0234375,
          "content": "docs/*.json\n_site/\nout/\n"
        },
        {
          "name": "00-overview.md",
          "type": "blob",
          "size": 0.7080078125,
          "content": "# Compose file specification\n\nThe Compose file specification has been broken up into the following easy-to-navigate pages:\n\n- [Status of the specification](01-status.md)\n- [The Compose application model](02-model.md)\n- [The Compose file](03-compose-file.md)\n- [Version and name top-level elements](04-version-and-name.md)\n- [Services top-level element](05-services.md)\n- [Networks top-level element](06-networks.md)\n- [Volumes top-level element](07-volumes.md)\n- [Configs top-level element](08-configs.md)\n- [Secrets top-level element](09-secrets.md)\n- [Fragments](10-fragments.md)\n- [Extension](11-extension.md)\n- [Interpolation](12-interpolation.md)\n\nYou can check the one file version of the specification [here](spec.md)\n"
        },
        {
          "name": "01-status.md",
          "type": "blob",
          "size": 1.72265625,
          "content": "# Status of this document\n\nThis document specifies the Compose file format used to define multi-containers applications. Distribution of this document is unlimited.\n\n## Requirements and optional attributes\n\nThe Compose specification includes properties designed to target a local [OCI](https://opencontainers.org/) container runtime,\nexposing Linux kernel specific configuration options, but also some Windows container specific properties. It is also designed for cloud platform features related to resource placement on a cluster, replicated application distribution, and scalability.\n\nWe acknowledge that no Compose implementation is expected to support all attributes, and that support for some properties\nis platform dependent and can only be confirmed at runtime. The definition of a versioned schema to control the supported\nproperties in a Compose file, established by the [docker-compose](https://github.com/docker/compose) tool where the Compose\nfile format was designed, doesn't offer any guarantee to the end-user that attributes will be actually implemented.\n\nThe specification defines the expected configuration syntax and behavior. Unless noted, supporting any of these is optional.\n\nA Compose implementation to parse a Compose file using unsupported attributes should warn users. We recommend the following implementors\nto support those running modes:\n\n* Default: warn the user about unsupported attributes, but ignore them\n* Strict: warn the user about unsupported attributes and reject the Compose file\n* Loose: ignore unsupported attributes AND unknown attributes (that were not defined by the spec by the time implementation was created)\n\nFrom this point onwards, references made to 'Compose' can be interpreted as 'a Compose implementation'. \n"
        },
        {
          "name": "02-model.md",
          "type": "blob",
          "size": 6.205078125,
          "content": "# The Compose application model\n\nThe Compose Specification lets you define a platform-agnostic container based application. Such an application is designed as a set of containers which have to both run together with adequate shared resources and communication channels.\n\nComputing components of an application are defined as [services](05-services.md). A service is an abstract concept implemented on platforms by running the same container image, and configuration, one or more times.\n\nServices communicate with each other through [networks](06-networks.md). In the Compose Specification, a network is a platform capability abstraction to establish an IP route between containers within services connected together. Low-level, platform-specific networking options are grouped into the Network definition and may be partially implemented on some platforms.\n\nServices store and share persistent data into [volumes](07-volumes.md). The Specification describes such a persistent data as a high-level filesystem mount with global options. Actual platform-specific implementation details are grouped into the volumes definition and may be partially implemented on some platforms.\n\nSome services require configuration data that is dependent on the runtime or platform. For this, the Specification defines a dedicated [configs](08-configs.md) concept. From a service container point of view, configs are comparable to volumes, in that they are files mounted into the container. But the actual definition involves distinct platform resources and services, which are abstracted by this type.\n\nA [secret](09-secrets.md) is a specific flavor of configuration data for sensitive data that should not be exposed without security considerations. Secrets are made available to services as files mounted into their containers, but the platform-specific resources to provide sensitive data are specific enough to deserve a distinct concept and definition within the Compose specification.\n\n>**Note**\n>\n> With volumes, configs and secrets you can have a simple declaration at the top-level and then add more platform-specific information at the service level.\n\nA project is an individual deployment of an application specification on a platform. A project's name, set with the top-level [`name`](04-version-and-name.md) attribute, is used to group\nresources together and isolate them from other applications or other installation of the same Compose specified application with distinct parameters. If you are creating resources on a platform, you must prefix resource names by project and\nset the label `com.docker.compose.project`.\n\nCompose offers a way for users to set a custom project name and override this name, so that the same `compose.yaml` file can be deployed twice on the same infrastructure, without changes, by just passing a distinct name.\n\nProject names must contain only lowercase letters, decimal digits, dashes, and underscores, and must begin with a lowercase letter or decimal digit.\n\n## Illustrative example\n\nThe following example illustrates the Compose Specification concepts outlined above. The example is non-normative.\n\nConsider an application split into a frontend web application and a backend service.\n\nThe frontend is configured at runtime with an HTTP configuration file managed by infrastructure, providing an external domain name, and an HTTPS server certificate injected by the platform's secured secret store.\n\nThe backend stores data in a persistent volume.\n\nBoth services communicate with each other on an isolated back-tier network, while the frontend is also connected to a front-tier network and exposes port 443 for external usage.\n\n```mermaid\n    %%{ init: { 'flowchart': { 'curve': 'linear' } } }%%\n    flowchart LR\n    subgraph A[INFRASTRUCTURE]\n    direction TB\n    subgraph TOP[\" \"]\n        subgraph B1[Frontend Service]\n            fs[\"`**webapp**`\"]\n        end\n        style B1 fill:#ccd6e8, stroke-width:0px\n        subgraph B2[Backend Service]\n            bs[\"`**database**`\"]\n        end\n        style B2 fill:#ccd6e8, stroke-width:0px\n        \n    end\n    style TOP fill:transparent, stroke-width:2px, stroke:#62affb, stroke-dasharray: 5 5\n        key[ro= read only\\nr+w = read write]\n        style key fill:transparent, stroke-width:0px,text-align: left, size: 94px\n        \n        direction TB\n        id2(Server\\nCertificate)\n        id1(HTTP\\nConfiguration)\n        id1 & id2 -.-|ro| B1\n        style id1 stroke:#000,stroke-width:1px,stroke-dasharray: 10\n        style id2 stroke:#000,stroke-width:1px,stroke-dasharray: 10\n        B2 ==r+w==> id3[(Persistent\\nVolume)]\n    end\n    style A fill:#eeeeee, stroke-width:0px\n    direction LR\n    id4[External\\nUser] ---id5(((443)))--->|Frontend\\nNetwork| B1\n    style id4 stroke:#000,stroke-width:2px\n    B1 --Backend\\nNetwork--> B2\n```\n\nThe example application is composed of the following parts:\n\n- 2 services, backed by Docker images: `webapp` and `database`\n- 1 secret (HTTPS certificate), injected into the frontend\n- 1 configuration (HTTP), injected into the frontend\n- 1 persistent volume, attached to the backend\n- 2 networks\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    ports:\n      - \"443:8043\"\n    networks:\n      - front-tier\n      - back-tier\n    configs:\n      - httpd-config\n    secrets:\n      - server-certificate\n\n  backend:\n    image: example/database\n    volumes:\n      - db-data:/etc/data\n    networks:\n      - back-tier\n\nvolumes:\n  db-data:\n    driver: flocker\n    driver_opts:\n      size: \"10GiB\"\n\nconfigs:\n  httpd-config:\n    external: true\n\nsecrets:\n  server-certificate:\n    external: true\n\nnetworks:\n  # The presence of these objects is sufficient to define them\n  front-tier: {}\n  back-tier: {}\n```\n\nThis example illustrates the distinction between volumes, configs and secrets. While all of them are all exposed\nto service containers as mounted files or directories, only a volume can be configured for read+write access.\nSecrets and configs are read-only. The volume configuration allows you to select a volume driver and pass driver options\nto tweak volume management according to the actual infrastructure. Configs and secrets rely on platform services,\nand are declared `external` as they are not managed as part of the application lifecycle. Compose uses a platform-specific lookup mechanism to retrieve runtime values.\n"
        },
        {
          "name": "03-compose-file.md",
          "type": "blob",
          "size": 1.6005859375,
          "content": "# Compose file\n\nThe Compose file is a [YAML](http://yaml.org/) file defining:\n- [Version](04-version-and-name.md) (Optional)\n- [Services](05-services.md) (Required)\n- [Networks](06-networks.md)\n- [Volumes](07-volumes.md)\n- [Configs](08-configs.md) \n- [Secrets](09-secrets.md)\n\nThe default path for a Compose file is `compose.yaml` (preferred) or `compose.yml` that is placed in the working directory.\nCompose also supports `docker-compose.yaml` and `docker-compose.yml` for backwards compatibility of earlier versions.\nIf both files exist, Compose prefers the canonical `compose.yaml`.\n\nYou can use [fragments](10-fragments.md) and [extensions](11-extension.md) to keep your Compose file efficient and easy to maintain.\n\nMultiple Compose files can be [merged](13-merge.md) together to define the application model. The combination of YAML files are implemented by appending or overriding YAML elements based on the Compose file order you set. \nSimple attributes and maps get overridden by the highest order Compose file, lists get merged by appending. Relative\npaths are resolved based on the first Compose file's parent folder, whenever complimentary files being\nmerged are hosted in other folders. As some Compose file elements can both be expressed as single strings or complex objects, merges apply to\nthe expanded form.\n\nIf you want to reuse other Compose files, or factor out parts of you application model into separate Compose files, you can also use [`include`](14-include.md). This is useful if your Compose application is dependent on another application which is managed by a different team, or needs to be shared with others.\n"
        },
        {
          "name": "04-version-and-name.md",
          "type": "blob",
          "size": 1.388671875,
          "content": "# Version and name top-level elements\n\n## Version top-level element (obsolete)\n\nThe top-level `version` property is defined by the Compose Specification for backward compatibility. It is only informative you'll receive a warning message that it is obsolete if used. \n\nCompose doesn't use `version` to select an exact schema to validate the Compose file, but\nprefers the most recent schema when it's implemented.\n\nCompose validates whether it can fully parse the Compose file. If some fields are unknown, typically\nbecause the Compose file was written with fields defined by a newer version of the Specification, you'll receive a warning message. Compose offers options to ignore unknown fields (as defined by [\"loose\"](01-status.md#requirements-and-optional-attributes) mode).\n\n## Name top-level element\n\nThe top-level `name` property is defined by the Specification as the project name to be used if you don't set one explicitly.\nCompose offers a way for you to override this name, and sets a\ndefault project name to be used if the top-level `name` element is not set.\n\nWhenever a project name is defined by top-level `name` or by some custom mechanism, it is exposed for\n[interpolation](12-interpolation.md) and environment variable resolution as `COMPOSE_PROJECT_NAME`\n\n```yml\nservices:\n  foo:\n    image: busybox\n    environment:\n      - COMPOSE_PROJECT_NAME\n    command: echo \"I'm running ${COMPOSE_PROJECT_NAME}\"\n```\n"
        },
        {
          "name": "05-services.md",
          "type": "blob",
          "size": 61.701171875,
          "content": "# Services top-level element\n\nA service is an abstract definition of a computing resource within an application which can be scaled or replaced\nindependently from other components. Services are backed by a set of containers, run by the platform\naccording to replication requirements and placement constraints. As services are backed by containers, they are defined\nby a Docker image and set of runtime arguments. All containers within a service are identically created with these\narguments.\n\nA Compose file must declare a `services` top-level element as a map whose keys are string representations of service names,\nand whose values are service definitions. A service  definition contains the configuration that is applied to each\nservice container.\n\nEach service may also include a `build` section, which defines how to create the Docker image for the service.\nCompose supports building docker images using this service definition. If not used, the `build` section is ignored and the Compose file is still considered valid. Build support is an optional aspect of the Compose Specification, and is\ndescribed in detail in the [Compose Build Specification](build.md) documentation.\n\nEach service defines runtime constraints and requirements to run its containers. The `deploy` section groups\nthese constraints and allows the platform to adjust the deployment strategy to best match containers' needs with\navailable resources. Deploy support is an optional aspect of the Compose Specification, and is\ndescribed in detail in the [Compose Deploy Specification](deploy.md) documentation.\nIf not implemented the `deploy` section is ignored and the Compose file is still considered valid.\n\n## attach\n\n[![Compose v2.20.0](https://img.shields.io/badge/compose-v2.20.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.20.0)\n\nWhen `attach` is defined and set to `false` Compose does not collect service logs,\nuntil you explicitly request it to.\n\nThe default service configuration is `attach: true`.\n\n## build\n\n`build` specifies the build configuration for creating a container image from source, as defined in the [Compose Build Specification](build.md).\n\n## blkio_config\n\n`blkio_config` defines a set of configuration options to set block IO limits for a service.\n\n```yml\nservices:\n  foo:\n    image: busybox\n    blkio_config:\n       weight: 300\n       weight_device:\n         - path: /dev/sda\n           weight: 400\n       device_read_bps:\n         - path: /dev/sdb\n           rate: '12mb'\n       device_read_iops:\n         - path: /dev/sdb\n           rate: 120\n       device_write_bps:\n         - path: /dev/sdb\n           rate: '1024k'\n       device_write_iops:\n         - path: /dev/sdb\n           rate: 30\n```\n\n### device_read_bps, device_write_bps\n\nSet a limit in bytes per second for read / write operations on a given device.\nEach item in the list must have two keys:\n\n- `path`: Defines the symbolic path to the affected device.\n- `rate`: Either as an integer value representing the number of bytes or as a string expressing a byte value.\n\n### device_read_iops, device_write_iops\n\nSet a limit in operations per second for read / write operations on a given device.\nEach item in the list must have two keys:\n\n- `path`: Defines the symbolic path to the affected device.\n- `rate`: As an integer value representing the permitted number of operations per second.\n\n### weight\n\nModify the proportion of bandwidth allocated to a service relative to other services.\nTakes an integer value between 10 and 1000, with 500 being the default.\n\n### weight_device\n\nFine-tune bandwidth allocation by device. Each item in the list must have two keys:\n\n- `path`: Defines the symbolic path to the affected device.\n- `weight`: An integer value between 10 and 1000.\n\n## cpu_count\n\n`cpu_count` defines the number of usable CPUs for service container.\n\n## cpu_percent\n\n`cpu_percent` defines the usable percentage of the available CPUs.\n\n## cpu_shares\n\n`cpu_shares` defines, as integer value, a service container's relative CPU weight versus other containers.\n\n## cpu_period\n\n`cpu_period` configures CPU CFS (Completely Fair Scheduler) period when a platform is based\non Linux kernel.\n\n## cpu_quota\n\n`cpu_quota` configures CPU CFS (Completely Fair Scheduler) quota when a platform is based\non Linux kernel.\n\n## cpu_rt_runtime\n\n`cpu_rt_runtime` configures CPU allocation parameters for platforms with support for realtime scheduler. It can be either\nan integer value using microseconds as unit or a [duration](11-extension.md#specifying-durations).\n\n```yml\n cpu_rt_runtime: '400ms'\n cpu_rt_runtime: 95000`\n```\n\n## cpu_rt_period\n\n`cpu_rt_period` configures CPU allocation parameters for platforms with support for realtime scheduler. It can be either\nan integer value using microseconds as unit or a [duration](11-extension.md#specifying-durations).\n\n```yml\n cpu_rt_period: '1400us'\n cpu_rt_period: 11000`\n```\n\n## cpus\n\n`cpus` define the number of (potentially virtual) CPUs to allocate to service containers. This is a fractional number.\n`0.000` means no limit.\n\nWhen both are set, `cpus` must be consistent with the `cpus` attribute in the\n[Deploy Specification](deploy.md#cpus)\n\n## cpuset\n\n`cpuset` defines the explicit CPUs in which to allow execution. Can be a range `0-3` or a list `0,1`\n\n## cap_add\n\n`cap_add` specifies additional container [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html)\nas strings.\n\n```yaml\ncap_add:\n  - ALL\n```\n\n## cap_drop\n\n`cap_drop` specifies container [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html) to drop\nas strings.\n\n```yaml\ncap_drop:\n  - NET_ADMIN\n  - SYS_ADMIN\n```\n\n## cgroup\n\n[![Compose v2.15.0](https://img.shields.io/badge/compose-v2.15.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.15.0)\n\n\n`cgroup` specifies the cgroup namespace to join. When unset, it is the container runtime's decision to\nselect which cgroup namespace to use, if supported.\n\n- `host`: Runs the container in the Container runtime cgroup namespace.\n- `private`: Runs the container in its own private cgroup namespace.\n\n## cgroup_parent\n\n`cgroup_parent` specifies an optional parent [cgroup](https://man7.org/linux/man-pages/man7/cgroups.7.html) for the container.\n\n```yaml\ncgroup_parent: m-executor-abcd\n```\n\n## command\n\n`command` overrides the default command declared by the container image, for example by Dockerfile's `CMD`.\n\n```yaml\ncommand: bundle exec thin -p 3000\n```\n\nThe value can also be a list, in a manner similar to [Dockerfile](https://docs.docker.com/engine/reference/builder/#cmd):\n\n```yaml\ncommand: [ \"bundle\", \"exec\", \"thin\", \"-p\", \"3000\" ]\n```\n\nIf the value is `null`, the default command from the image is used.\n\nIf the value is `[]` (empty list) or `''` (empty string), the default command declared by the image is ignored,\ni.e. overridden to be empty.\n\n## configs\n\nConfigs allow services to adapt their behaviour without the need to rebuild a Docker image. \nServices can only access configs when explicitly granted by the `configs` attribute. Two different syntax variants are supported.\n\nCompose reports an error if `config` doesn't exist on the platform or isn't defined in the\n[`configs` top-level element](08-configs.md) in the Compose file.\n\nThere are two syntaxes defined for configs. To remain compliant to this specification, an implementation\nmust support both syntaxes. Implementations must allow use of both short and long syntaxes within the same document.\n\nYou can grant a service access to multiple configs, and you can mix long and short syntax.\n\n### Short syntax\n\nThe short syntax variant only specifies the config name. This grants the\ncontainer access to the config and mounts it as files into a service’s container’s filesystem. The location of the mount point within the container defaults to `/<config_name>` in Linux containers, and `C:\\<config-name>` in Windows containers. \n\nThe following example uses the short syntax to grant the `redis` service\naccess to the `my_config` and `my_other_config` configs. The value of\n`my_config` is set to the contents of the file `./my_config.txt`, and\n`my_other_config` is defined as an external resource, which means that it has\nalready been defined in the platform. If the external config does not exist,\nthe deployment fails.\n\n```yml\nservices:\n  redis:\n    image: redis:latest\n    configs:\n      - my_config\n      - my_other_config\nconfigs:\n  my_config:\n    file: ./my_config.txt\n  my_other_config:\n    external: true\n```\n\n### Long syntax\n\nThe long syntax provides more granularity in how the config is created within the service's task containers.\n\n- `source`: The name of the config as it exists in the platform.\n- `target`: The path and name of the file to be mounted in the service's\n  task containers. Defaults to `/<source>` if not specified.\n- `uid` and `gid`: The numeric UID or GID that owns the mounted config file\n  within the service's task containers. Default value when not specified is USER running container.\n- `mode`: The [permissions](https://wintelguy.com/permissions-calc.pl) for the file that is mounted within the service's\n  task containers, in octal notation. Default value is world-readable (`0444`).\n  Writable bit must be ignored. The executable bit can be set.\n\nThe following example sets the name of `my_config` to `redis_config` within the\ncontainer, sets the mode to `0440` (group-readable) and sets the user and group\nto `103`. The `redis` service does not have access to the `my_other_config`\nconfig.\n\n```yml\nservices:\n  redis:\n    image: redis:latest\n    configs:\n      - source: my_config\n        target: /redis_config\n        uid: \"103\"\n        gid: \"103\"\n        mode: 0440\nconfigs:\n  my_config:\n    external: true\n  my_other_config:\n    external: true\n```\n\n## container_name\n\n`container_name` is a string that specifies a custom container name, rather than a name generated by default.\n\n```yml\ncontainer_name: my-web-container\n```\n\nCompose does not scale a service beyond one container if the Compose file specifies a\n`container_name`. Attempting to do so results in an error.\n\n`container_name` follows the regex format of `[a-zA-Z0-9][a-zA-Z0-9_.-]+`\n\n## credential_spec\n\n`credential_spec` configures the credential spec for a managed service account.\n\nIf you have services that use Windows containers, you can use `file:` and\n`registry:` protocols for `credential_spec`. Compose also supports additional\nprotocols for custom use-cases.\n\nThe `credential_spec` must be in the format `file://<filename>` or `registry://<value-name>`.\n\n```yml\ncredential_spec:\n  file: my-credential-spec.json\n```\n\nWhen using `registry:`, the credential spec is read from the Windows registry on\nthe daemon's host. A registry value with the given name must be located in:\n\n    HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Virtualization\\Containers\\CredentialSpecs\n\nThe following example loads the credential spec from a value named `my-credential-spec`\nin the registry:\n\n```yml\ncredential_spec:\n  registry: my-credential-spec\n```\n\n### Example gMSA configuration\n\nWhen configuring a gMSA credential spec for a service, you only need\nto specify a credential spec with `config`, as shown in the following example:\n\n```yml\nservices:\n  myservice:\n    image: myimage:latest\n    credential_spec:\n      config: my_credential_spec\n\nconfigs:\n  my_credentials_spec:\n    file: ./my-credential-spec.json|\n```\n\n## depends_on\n\n`depends_on` expresses startup and shutdown dependencies between services.\n\n### Short syntax\n\nThe short syntax variant only specifies service names of the dependencies.\nService dependencies cause the following behaviors:\n\n- Compose creates services in dependency order. In the following\n  example, `db` and `redis` are created before `web`.\n\n- Compose removes services in dependency order. In the following\n  example, `web` is removed before `db` and `redis`.\n\nSimple example:\n\n```yml\nservices:\n  web:\n    build: .\n    depends_on:\n      - db\n      - redis\n  redis:\n    image: redis\n  db:\n    image: postgres\n```\n\nCompose guarantees dependency services have been started before\nstarting a dependent service.\nCompose waits for dependency services to be \"ready\" before\nstarting a dependent service.\n\n### Long syntax\n\nThe long form syntax enables the configuration of additional fields that can't be\nexpressed in the short form.\n\n- `restart`: When set to `true` Compose restarts this service after it updates the dependency service.\n  This applies to an explicit restart controlled by a Compose operation, and excludes automated restart by the container runtime\n  after the container dies. [![Compose v2.17.0](https://img.shields.io/badge/compose-v2.17.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.17.0)\n\n\n\n- `condition`: Sets the condition under which dependency is considered satisfied\n  - `service_started`: An equivalent of the short syntax described above\n  - `service_healthy`: Specifies that a dependency is expected to be \"healthy\"\n    (as indicated by [healthcheck](#healthcheck)) before starting a dependent\n    service.\n  - `service_completed_successfully`: Specifies that a dependency is expected to run\n    to successful completion before starting a dependent service.\n- `required`: When set to `false` Compose only warns you when the dependency service isn't started or available. If it's not defined\n    the default value of `required` is `true`. [![Compose v2.20.0](https://img.shields.io/badge/compose-v2.20.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.20.0)\n\n\nService dependencies cause the following behaviors:\n\n- Compose creates services in dependency order. In the following\n  example, `db` and `redis` are created before `web`.\n\n- Compose waits for healthchecks to pass on dependencies\n  marked with `service_healthy`. In the following example, `db` is expected to\n  be \"healthy\" before `web` is created.\n\n- Compose removes services in dependency order. In the following\n  example, `web` is removed before `db` and `redis`.\n\n```yml\nservices:\n  web:\n    build: .\n    depends_on:\n      db:\n        condition: service_healthy\n        restart: true\n      redis:\n        condition: service_started\n  redis:\n    image: redis\n  db:\n    image: postgres\n```\n\nCompose guarantees dependency services are started before\nstarting a dependent service.\nCompose guarantees dependency services marked with\n`service_healthy` are \"healthy\" before starting a dependent service.\n\n## deploy\n\n`deploy` specifies the configuration for the deployment and lifecycle of services, as defined [in the Compose Deploy Specification](deploy.md).\n\n## develop\n\n[![Compose v2.22.0](https://img.shields.io/badge/compose-v2.22.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.22.0)\n\n\n`develop` specifies the development configuration for maintaining a container in sync with source, as defined in the [Development Section](develop.md).\n\n## device_cgroup_rules\n\n`device_cgroup_rules` defines a list of device cgroup rules for this container.\nThe format is the same format the Linux kernel specifies in the [Control Groups\nDevice Whitelist Controller](https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v1/devices.html).\n\n```yml\ndevice_cgroup_rules:\n  - 'c 1:3 mr'\n  - 'a 7:* rmw'\n```\n\n## devices\n\n`devices` defines a list of device mappings for created containers in the form of\n`HOST_PATH:CONTAINER_PATH[:CGROUP_PERMISSIONS]`.\n\n```yml\ndevices:\n  - \"/dev/ttyUSB0:/dev/ttyUSB0\"\n  - \"/dev/sda:/dev/xvda:rwm\"\n```\n\n## dns\n\n`dns` defines custom DNS servers to set on the container network interface configuration. It can be a single value or a list.\n\n```yml\ndns: 8.8.8.8\n```\n\n```yml\ndns:\n  - 8.8.8.8\n  - 9.9.9.9\n```\n\n## dns_opt\n\n`dns_opt` list custom DNS options to be passed to the container’s DNS resolver (`/etc/resolv.conf` file on Linux).\n\n```yml\ndns_opt:\n  - use-vc\n  - no-tld-query\n```\n\n## dns_search\n\n`dns_search` defines custom DNS search domains to set on container network interface configuration. It can be a single value or a list.\n\n```yml\ndns_search: example.com\n```\n\n```yml\ndns_search:\n  - dc1.example.com\n  - dc2.example.com\n```\n\n## domainname\n\n`domainname` declares a custom domain name to use for the service container. It must be a valid RFC 1123 hostname.\n\n## entrypoint\n\n`entrypoint` declares the default entrypoint for the service container.\nThis overrides the `ENTRYPOINT` instruction from the service's Dockerfile.\n\nIf `entrypoint` is non-null, Compose ignores any default command from the image, for example the `CMD`\ninstruction in the Dockerfile.\n\nSee also [`command`](#command) to set or override the default command to be executed by the entrypoint process.\n\nIn its short form, the value can be defined as a string:\n```yml\nentrypoint: /code/entrypoint.sh\n```\n\nAlternatively, the value can also be a list, in a manner similar to the\n[Dockerfile](https://docs.docker.com/engine/reference/builder/#cmd):\n\n```yml\nentrypoint:\n  - php\n  - -d\n  - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so\n  - -d\n  - memory_limit=-1\n  - vendor/bin/phpunit\n```\n\nIf the value is `null`, the default entrypoint from the image is used.\n\nIf the value is `[]` (empty list) or `''` (empty string), the default entrypoint declared by the image is ignored,\ni.e. overridden to be empty.\n\n## env_file\n\n`env_file` adds environment variables to the container based on the file content.\n\n```yml\nenv_file: .env\n```\n\n`env_file` can also be a list. The files in the list are processed from the top down. For the same variable\nspecified in two env files, the value from the last file in the list stands.\n\n```yml\nenv_file:\n  - ./a.env\n  - ./b.env\n```\n\nRelative path are resolved from the Compose file's parent folder. As absolute paths prevent the Compose\nfile from being portable, Compose warns you when such a path is used to set `env_file`.\n\nEnvironment variables declared in the [environment](#environment) section override these values. This holds true even if those values are\nempty or undefined.\n\nList elements can also be declared as a mapping, which then lets you set an additional\nattributes\n\n### required\n\n`required` attribute defaults to `true`. When `required` is set to `false` and the `.env` file is missing,\nCompose silently ignores the entry.\n\n```yml\nenv_file:\n  - path: ./default.env\n    required: true # default\n  - path: ./override.env\n    required: false\n```\n\n### format\n\n`format` attribute lets you to use an alternative file formats for `env_file`. When not set, `env_file` is parsed according to \nCompose rules as described in next section.\n\n`raw` format lets you use an `env_file` with key=value items, but without any attempt from Compose to parse the value for interpolation. \nThis let you pass values as-is including quotes and `$` signs.\n\n```yml\nenv_file:\n  - path: ./default.env\n    format: raw\n```\n\n\n### Env_file format\n\nEach line in an `.env` file must be in `VAR[=[VAL]]` format. The following syntax rules apply:\n\n- Lines beginning with `#` are processed as comments and ignored.\n- Blank lines are ignored.\n- Unquoted and double-quoted (`\"`) values have [Interpolation](12-interpolation.md) applied.\n- Each line represents a key-value pair. Values can optionally be quoted.\n  - `VAR=VAL` -> `VAL`\n  - `VAR=\"VAL\"` -> `VAL`\n  - `VAR='VAL'` -> `VAL`\n- Inline comments for unquoted values must be preceded with a space.\n  - `VAR=VAL # comment` -> `VAL`\n  - `VAR=VAL# not a comment` -> `VAL# not a comment`\n- Inline comments for quoted values must follow the closing quote.\n  - `VAR=\"VAL # not a comment\"` -> `VAL # not a comment`\n  - `VAR=\"VAL\" # comment` -> `VAL`\n- Single-quoted (`'`) values are used literally.\n  - `VAR='$OTHER'` -> `$OTHER`\n  - `VAR='${OTHER}'` -> `${OTHER}`\n- Quotes can be escaped with `\\`.\n  - `VAR='Let\\'s go!'` -> `Let's go!`\n  - `VAR=\"{\\\"hello\\\": \\\"json\\\"}\"` -> `{\"hello\": \"json\"}`\n- Common shell escape sequences including `\\n`, `\\r`, `\\t`, and `\\\\` are supported in double-quoted values.\n  - `VAR=\"some\\tvalue\"` -> `some  value`\n  - `VAR='some\\tvalue'` -> `some\\tvalue`\n  - `VAR=some\\tvalue` -> `some\\tvalue`\n\n`VAL` may be omitted, in such cases the variable value is an empty string.\n`=VAL` may be omitted, in such cases the variable is unset.\n\n```bash\n# Set Rails/Rack environment\nRACK_ENV=development\nVAR=\"quoted\"\n```\n\n## environment\n\n`environment` defines environment variables set in the container. `environment` can use either an array or a\nmap. Any boolean values; true, false, yes, no, should be enclosed in quotes to ensure\nthey are not converted to True or False by the YAML parser.\n\nEnvironment variables can be declared by a single key (no value to equals sign). In this case Compose\nrelies on you to resolve the value. If the value is not resolved, the variable\nis unset and is removed from the service container environment.\n\nMap syntax:\n\n```yml\nenvironment:\n  RACK_ENV: development\n  SHOW: \"true\"\n  USER_INPUT:\n```\n\nArray syntax:\n\n```yml\nenvironment:\n  - RACK_ENV=development\n  - SHOW=true\n  - USER_INPUT\n```\n\nWhen both `env_file` and `environment` are set for a service, values set by `environment` have precedence.\n\n## expose\n\n`expose` defines the (incoming) port or a range of ports that Compose exposes from the container. These ports must be\naccessible to linked services and should not be published to the host machine. Only the internal container\nports can be specified.\n\nSyntax is `<portnum>/[<proto>]` or `<startport-endport>/[<proto>]` for a port range.\nWhen not explicitly set, `tcp` protocol is used.\n\n```yml\nexpose:\n  - \"3000\"\n  - \"8000\"\n  - \"8080-8085/tcp\"\n```\n\n> **Note**\n>\n> If the Dockerfile for the image already exposes ports, it is visible to other containers on the network even if `expose` is not set in your Compose file. \n\n## extends\n\n`extends` lets you share common configurations among different files, or even different projects entirely. With `extends` you can define a common set of service options in one place and refer to it from anywhere. You can refer to another Compose file and select a service you want to also use in your own application, with the ability to override some attributes for your own needs.\n\nYou can use `extends` on any service together with other configuration keys. The `extends` value must be a mapping\ndefined with a required `service` and an optional `file` key.\n\n```yaml\nextends:\n  file: common.yml\n  service: webapp\n```\n\n- `service`: Defines the name of the service being referenced as a base, for example `web` or `database`.\n- `file`: The location of a Compose configuration file defining that service.\n\n### Restrictions\n\nService being referenced by `extends` can have dependency declared on other resources. Typically it can have an explicit `volumes` declaration.\n`extends` then will not import the target volume definition in the extending compose model, it is Compose file author responsibility to define\nan equivalent resource for the extended service to be consistent. Compose will check a resource with referenced ID exists in the Compose model\n\nDependencies on other resources in an `extends` target can be:\n- An explicit references by `volumes`, `networks`, `configs`, `secrets`, `links`, `volumes_from` or `depends_on`\n- A reference to another service using the `service:{name}` syntax in namespace declaration (`ipc`, `pid`, `network_mode`)\n\nCircular references with `extends` are not supported, Compose returns an error when one is detected.\n\n### Finding referenced service\n\n`file` value can be:\n\n- Not present.\n  This indicates that another service within the same Compose file is being referenced.\n- File path, which can be either:\n  - Relative path. This path is considered as relative to the location of the main Compose\n    file.\n  - Absolute path.\n\nA service denoted by `service` must be present in the identified referenced Compose file.\nCompose returns an error if:\n\n- The service denoted by `service` is not found.\n- The Compose file denoted by `file` is not found.\n\n### Merging service definitions\n\nTwo service definitions, the main one in the current Compose file and the referenced one\nspecified by `extends`, are merged in the following way:\n\n- Mappings: Keys in mappings of the main service definition override keys in mappings\n  of the referenced service definition. Keys that aren't overridden are included as is.\n- Sequences: Items are combined together into a new sequence. The order of elements is\n  preserved with the referenced items coming first and main items after.\n- Scalars: Keys in the main service definition take precedence over keys in the\n  referenced one.\n\n#### Mappings\n\nThe following keys should be treated as mappings: `annotations`, `build.args`, `build.labels`,\n`build.extra_hosts`, `deploy.labels`, `deploy.update_config`, `deploy.rollback_config`,\n`deploy.restart_policy`, `deploy.resources.limits`, `environment`, `healthcheck`,\n`labels`, `logging.options`, `sysctls`, `storage_opt`, `extra_hosts`, `ulimits`.\n\nOne exception that applies to `healthcheck` is that the main mapping cannot specify\n`disable: true` unless the  referenced mapping also specifies `disable: true`. Compose returns an error in this case.\n\nFor example, the input below:\n\n```yaml\nservices:\n  common:\n    image: busybox\n    environment:\n      TZ: utc\n      PORT: 80\n  cli:\n    extends:\n      service: common\n    environment:\n      PORT: 8080\n```\n\nProduces the following configuration for the `cli` service. The same output is\nproduced if array syntax is used.\n\n```yaml\nenvironment:\n  PORT: 8080\n  TZ: utc\nimage: busybox\n```\n\nItems under `blkio_config.device_read_bps`, `blkio_config.device_read_iops`,\n`blkio_config.device_write_bps`, `blkio_config.device_write_iops`, `devices` and\n`volumes` are also treated as mappings where key is the target path inside the\ncontainer.\n\nFor example, the input below:\n\n```yaml\nservices:\n  common:\n    image: busybox\n    volumes:\n      - common-volume:/var/lib/backup/data:rw\n  cli:\n    extends:\n      service: common\n    volumes:\n      - cli-volume:/var/lib/backup/data:ro\n```\n\nProduces the following configuration for the `cli` service. Note that the mounted path\nnow points to the new volume name and `ro` flag was applied.\n\n```yaml\nimage: busybox\nvolumes:\n- cli-volume:/var/lib/backup/data:ro\n```\n\nIf the referenced service definition contains `extends` mapping, the items under it\nare simply copied into the new merged definition. The merging process is then kicked\noff again until no `extends` keys are remaining.\n\nFor example, the input below:\n\n```yaml\nservices:\n  base:\n    image: busybox\n    user: root\n  common:\n    image: busybox\n    extends:\n      service: base\n  cli:\n    extends:\n      service: common\n```\n\nProduces the following configuration for the `cli` service. Here, `cli` services\ngets `user` key from `common` service, which in turn gets this key from `base`\nservice.\n\n```yaml\nimage: busybox\nuser: root\n```\n\n#### Sequences\n\nThe following keys should be treated as sequences: `cap_add`, `cap_drop`, `configs`,\n`deploy.placement.constraints`, `deploy.placement.preferences`,\n`deploy.reservations.generic_resources`, `device_cgroup_rules`, `expose`,\n`external_links`, `ports`, `secrets`, `security_opt`.\nAny duplicates resulting from the merge are removed so that the sequence only\ncontains unique elements.\n\nFor example, the input below:\n\n```yaml\nservices:\n  common:\n    image: busybox\n    security_opt:\n      - label:role:ROLE\n  cli:\n    extends:\n      service: common\n    security_opt:\n      - label:user:USER\n```\n\nProduces the following configuration for the `cli` service.\n\n```yaml\nimage: busybox\nsecurity_opt:\n- label:role:ROLE\n- label:user:USER\n```\n\nIn case list syntax is used, the following keys should also be treated as sequences:\n`dns`, `dns_search`, `env_file`, `tmpfs`. Unlike sequence fields mentioned above,\nduplicates resulting from the merge are not removed.\n\n#### Scalars\n\nAny other allowed keys in the service definition should be treated as scalars.\n\n## annotations\n\n`annotations` defines annotations for the container. `annotations` can use either an array or a map.\n\n```yml\nannotations:\n  com.example.foo: bar\n```\n\n```yml\nannotations:\n  - com.example.foo=bar\n```\n\n## external_links\n\n`external_links` link service containers to services managed outside of your Compose application.\n`external_links` define the name of an existing service to retrieve using the platform lookup mechanism.\nAn alias of the form `SERVICE:ALIAS` can be specified.\n\n```yml\nexternal_links:\n  - redis\n  - database:mysql\n  - database:postgresql\n```\n\n## extra_hosts\n\n`extra_hosts` adds hostname mappings to the container network interface configuration (`/etc/hosts` for Linux).\n\n### Short syntax\nShort syntax uses plain strings in a list. Values must set hostname and IP address for additional hosts in the form of `HOSTNAME=IP`.\n\n```yml\nextra_hosts:\n  - \"somehost=162.242.195.82\"\n  - \"otherhost=50.31.209.229\"\n  - \"myhostv6=::1\"\n```\n\nIPv6 addresses can be enclosed in square brackets, for example:\n\n```yml\nextra_hosts:\n  - \"myhostv6=[::1]\"\n```\n\nThe separator `=` is preferred [![Compose v2.24.1](https://img.shields.io/badge/compose-v2.24.1-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.24.1)\n but `:` can also be used. For example:\n\n```yml\nextra_hosts:\n  - \"somehost:162.242.195.82\"\n  - \"myhostv6:::1\"\n```\n\n### Long syntax\nAlternatively, `extra_hosts` can be set as a mapping between hostname(s) and IP(s)\n\n```yml\nextra_hosts:\n  somehost: \"162.242.195.82\"\n  otherhost: \"50.31.209.229\"\n  myhostv6: \"::1\"\n```\n\nCompose creates a matching entry with the IP address and hostname in the container's network\nconfiguration, which means for Linux `/etc/hosts` get extra lines:\n\n```\n162.242.195.82  somehost\n50.31.209.229   otherhost\n::1             myhostv6\n```\n\n## group_add\n\n`group_add` specifies additional groups, by name or number, which the user inside the container must be a member of.\n\nAn example of where this is useful is when multiple containers (running as different users) need to all read or write\nthe same file on a shared volume. That file can be owned by a group shared by all the containers, and specified in\n`group_add`.\n\n```yml\nservices:\n  myservice:\n    image: alpine\n    group_add:\n      - mail\n```\n\nRunning `id` inside the created container must show that the user belongs to the `mail` group, which would not have\nbeen the case if `group_add` were not declared.\n\n## healthcheck\n\n`healthcheck` declares a check that's run to determine whether or not the service containers are \"healthy\". It works in the same way, and has the same default values, as the\n[HEALTHCHECK Dockerfile instruction](https://docs.docker.com/engine/reference/builder/#healthcheck)\nset by the service's Docker image. Your Compose file can override the values set in the Dockerfile. \n\n```yml\nhealthcheck:\n  test: [\"CMD\", \"curl\", \"-f\", \"http://localhost\"]\n  interval: 1m30s\n  timeout: 10s\n  retries: 3\n  start_period: 40s\n  start_interval: 5s\n```\n\n`interval`, `timeout`, `start_period`, and `start_interval` [![Compose v2.20.2](https://img.shields.io/badge/compose-v2.20.2-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.20.2) are [specified as durations](11-extension.md#specifying-durations).\n\n`test` defines the command Compose runs to check container health. It can be\neither a string or a list. If it's a list, the first item must be either `NONE`, `CMD` or `CMD-SHELL`.\nIf it's a string, it's equivalent to specifying `CMD-SHELL` followed by that string.\n\n```yml\n# Hit the local web app\ntest: [\"CMD\", \"curl\", \"-f\", \"http://localhost\"]\n```\n\nUsing `CMD-SHELL` runs the command configured as a string using the container's default shell\n(`/bin/sh` for Linux). Both forms below are equivalent:\n\n```yml\ntest: [\"CMD-SHELL\", \"curl -f http://localhost || exit 1\"]\n```\n\n```yml\ntest: curl -f https://localhost || exit 1\n```\n\n`NONE` disables the healthcheck, and is mostly useful to disable the Healthcheck Dockerfile instruction set by the service's Docker image. Alternatively,\nthe healthcheck set by the image can be disabled by setting `disable: true`:\n\n```yml\nhealthcheck:\n  disable: true\n```\n\n## hostname\n\n`hostname` declares a custom host name to use for the service container. It must be a valid RFC 1123 hostname.\n\n## image\n\n`image` specifies the image to start the container from. `image` must follow the Open Container Specification\n[addressable image format](https://github.com/opencontainers/org/blob/master/docs/docs/introduction/digests.md),\nas `[<registry>/][<project>/]<image>[:<tag>|@<digest>]`.\n\n```yml\n    image: redis\n    image: redis:5\n    image: redis@sha256:0ed5d5928d4737458944eb604cc8509e245c3e19d02ad83935398bc4b991aac7\n    image: library/redis\n    image: docker.io/library/redis\n    image: my_private.registry:5000/redis\n```\n\nIf the image does not exist on the platform, Compose attempts to pull it based on the `pull_policy`.\nIf you are also using the [Compose Build Specification](build.md), there are alternative options for controlling the precedence of\npull over building the image from source, however pulling the image is the default behavior.\n\n`image` may be omitted from a Compose file as long as a `build` section is declared. If you are not using the Compose Build Specification, Compose won't work if `image` is missing from the Compose file.\n\n## init\n\n`init` runs an init process (PID 1) inside the container that forwards signals and reaps processes.\nSet this option to `true` to enable this feature for the service.\n\n```yml\nservices:\n  web:\n    image: alpine:latest\n    init: true\n```\n\nThe init binary that is used is platform specific.\n\n## ipc\n\n`ipc` configures the IPC isolation mode set by the service container. Available\nvalues are platform specific, but Compose defines specific values\nwhich must be implemented as described if supported:\n\n- `shareable`: Gives the container its own private IPC namespace, with a\n  possibility to share it with other containers.\n- `service:{name}`: Makes the container join another container's\n  (`shareable`) IPC namespace.\n\n```yml\n    ipc: \"shareable\"\n    ipc: \"service:[service name]\"\n```\n\n## uts\n\n[![Compose v2.15.1](https://img.shields.io/badge/compose-v2.15.1-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.15.1)\n\n\n`uts` configures the UTS namespace mode set for the service container. When unspecified\nit is the runtime's decision to assign a UTS namespace, if supported. Available values are:\n\n- `'host'`: Results in the container using the same UTS namespace as the host.\n\n```yml\n    uts: \"host\"\n```\n\n## isolation\n\n`isolation` specifies a container’s isolation technology. Supported values are platform specific.\n\n## labels\n\n`labels` add metadata to containers. You can use either an array or a map.\n\nIt's recommended that you use reverse-DNS notation to prevent your labels from conflicting with\nthose used by other software.\n\n```yml\nlabels:\n  com.example.description: \"Accounting webapp\"\n  com.example.department: \"Finance\"\n  com.example.label-with-empty-value: \"\"\n```\n\n```yml\nlabels:\n  - \"com.example.description=Accounting webapp\"\n  - \"com.example.department=Finance\"\n  - \"com.example.label-with-empty-value\"\n```\n\nCompose creates containers with canonical labels:\n\n- `com.docker.compose.project` set on all resources created by Compose to the user project name\n- `com.docker.compose.service` set on service containers with service name as defined in the Compose file\n\nThe `com.docker.compose` label prefix is reserved. Specifying labels with this prefix in the Compose file\nresults in a runtime error.\n\n## label_file\n\n[![Compose NEXT RELEASE](https://img.shields.io/badge/compose-NEXT-blue?style=flat-square)](https://github.com/docker/compose/releases/NEXT)\n\n`label_file` can be used to load multiple labels from a file. The file uses a key-value frmat, comparable\nto `env_file`. \n\nYou can specify multiple files as a List. The files in the list are processed in top-down order. If the same \nlabel is defined in multiple files, the value from the last file in the list overrides earlier ones.\n\n```yaml\nservices:\n  one:\n    label_file: ./app.labels\n\n  two:\n    label_file: \n      - ./app.labels\n      - ./additional.labels\n```\n\n## links\n\n> **Note**\n>\n> Availability of the `links` attribute is implementation specific.\n\n`links` defines a network link to containers in another service. Either specify both the service name and\na link alias (`SERVICE:ALIAS`), or just the service name.\n\n```yml\nweb:\n  links:\n    - db\n    - db:database\n    - redis\n```\n\nContainers for the linked service are reachable at a hostname identical to the alias, or the service name\nif no alias is specified.\n\nLinks are not required to enable services to communicate. When no specific network configuration is set,\nany service is able to reach any other service at that service’s name on the `default` network. If services\ndo declare networks they are attached to, `links` does not override the network configuration and services not\nattached to a shared network are not be able to communicate. Compose doesn't warn you about a configuration mismatch.\n\nLinks also express implicit dependency between services in the same way as\n[depends_on](#depends_on), so they determine the order of service startup.\n\n## logging\n\n`logging` defines the logging configuration for the service.\n\n```yml\nlogging:\n  driver: syslog\n  options:\n    syslog-address: \"tcp://192.168.0.42:123\"\n```\n\nThe `driver` name specifies a logging driver for the service's containers. The default and available values\nare platform specific. Driver specific options can be set with `options` as key-value pairs.\n\n## network_mode\n\n`network_mode` sets a service container's network mode. Available values are platform specific, but Compose defines specific values which must be implemented as described if supported:\n\n- `none`: Turns off all container networking.\n- `host`: Gives the container raw access to the host's network interface.\n- `service:{name}`: Gives the service container access to the specified service only.\n- `container:{name}`: Gives the service container access to the specified container ().\n\n```yml\n    network_mode: \"host\"\n    network_mode: \"none\"\n    network_mode: \"service:[service name]\"\n```\n\nWhen set, the [`networks`](#networks) attribute is not allowed and Compose rejects any\nCompose file containing both attributes.\n\n## networks\n\n`networks` defines the networks that service containers are attached to, referencing entries under the\n[top-level `networks` key](06-networks.md).\n\n```yml\nservices:\n  some-service:\n    networks:\n      - some-network\n      - other-network\n```\n\n### aliases\n\n`aliases` declares alternative hostnames for the service on the network. Other containers on the same\nnetwork can use either the service name or an alias to connect to one of the service's containers.\n\nSince `aliases` are network-scoped, the same service can have different aliases on different networks.\n\n> **Note**\n> A network-wide alias can be shared by multiple containers, and even by multiple services.\n> If it is, then exactly which container the name resolves to is not guaranteed.\n\n```yml\nservices:\n  some-service:\n    networks:\n      some-network:\n        aliases:\n          - alias1\n          - alias3\n      other-network:\n        aliases:\n          - alias2\n```\n\nIn the following example, service `frontend` is able to reach the `backend` service at\nthe hostname `backend` or `database` on the `back-tier` network. The service `monitoring`\nis able to reach same `backend` service at `backend` or `mysql` on the `admin` network.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    networks:\n      - front-tier\n      - back-tier\n\n  monitoring:\n    image: example/monitoring\n    networks:\n      - admin\n\n  backend:\n    image: example/backend\n    networks:\n      back-tier:\n        aliases:\n          - database\n      admin:\n        aliases:\n          - mysql\n\nnetworks:\n  front-tier:\n  back-tier:\n  admin:\n```\n\n### ipv4_address, ipv6_address\n\nSpecify a static IP address for a service container when joining the network.\n\nThe corresponding network configuration in the [top-level networks section](06-networks.md) must have an\n`ipam` attribute with subnet configurations covering each static address.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    networks:\n      front-tier:\n        ipv4_address: 172.16.238.10\n        ipv6_address: 2001:3984:3989::10\n\nnetworks:\n  front-tier:\n    ipam:\n      driver: default\n      config:\n        - subnet: \"172.16.238.0/24\"\n        - subnet: \"2001:3984:3989::/64\"\n```\n\n### link_local_ips\n\n`link_local_ips` specifies a list of link-local IPs. Link-local IPs are special IPs which belong to a well\nknown subnet and are purely managed by the operator, usually dependent on the architecture where they are\ndeployed. Implementation is platform specific.\n\nExample:\n\n```yaml\nservices:\n  app:\n    image: busybox\n    command: top\n    networks:\n      app_net:\n        link_local_ips:\n          - 57.123.22.11\n          - 57.123.22.13\nnetworks:\n  app_net:\n    driver: bridge\n```\n\n### mac_address\n\n`mac_address` sets the MAC address used by the service container when connecting to this particular network.\n\n### driver_opts\n\n[![Compose v2.27.1](https://img.shields.io/badge/compose-v2.27.1-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.27.1)\n\n`driver_opts` specifies a list of options as key-value pairs to pass to the driver. These options are\ndriver-dependent. Consult the driver's documentation for more information.\n\n```yml\nservices:\n  app:\n    networks:\n      app_net:\n        driver_opts:\n          foo: \"bar\"\n          baz: 1\n```\n\n### priority\n\n`priority` indicates in which order Compose connects the service’s containers to its\nnetworks. If unspecified, the default value is 0.\n\nIn the following example, the app service connects to `app_net_1` first as it has the highest priority. It then connects to `app_net_3`, then `app_net_2`, which uses the default priority value of 0.\n\n```yaml\nservices:\n  app:\n    image: busybox\n    command: top\n    networks:\n      app_net_1:\n        priority: 1000\n      app_net_2:\n\n      app_net_3:\n        priority: 100\nnetworks:\n  app_net_1:\n  app_net_2:\n  app_net_3:\n```\n\n## mac_address\n\n[![Compose v2.23.2](https://img.shields.io/badge/compose-v2.23.2-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.23.2)\n\n`mac_address` sets a MAC address for the service container.\n\n> **Note**\n> Container runtimes might reject this value (ie. Docker Engine >= v25.0). In that case, you should use [networks.mac_address](#mac_address) instead.\n\n## mem_limit\n\n`mem_limit` configures a limit on the amount of memory a container can allocate, set as a string expressing a [byte value](11-extension.md#specifying-byte-values).\n\n\nWhen both are set, `mem_limit` must be consistent with the `limits.memory` attribute in the [Deploy Specification](deploy.md#memory)\n\n\n## mem_reservation\n\n`mem_reservation` configures a reservation on the amount of memory a container can allocate, set as a string expressing a [byte value](11-extension.md#specifying-byte-values).\n\nWhen both are set, `mem_reservation` must be consistent with the `reservations.memory` attribute in the [Deploy Specification](deploy.md#memory)\n\n## mem_swappiness\n\n`mem_swappiness` defines as a percentage, a value between 0 and 100, for the host kernel to swap out\nanonymous memory pages used by a container.\n\n- `0`: Turns off anonymous page swapping.\n- `100`: Sets all anonymous pages as swappable.\n\nThe default value is platform specific.\n\n## memswap_limit\n\n`memswap_limit` defines the amount of memory the container is allowed to swap to disk. This is a modifier\nattribute that only has meaning if [`memory`](deploy.md#memory) is also set. Using swap lets the container write excess\nmemory requirements to disk when the container has exhausted all the memory that is available to it.\nThere is a performance penalty for applications that swap memory to disk often.\n\n- If `memswap_limit` is set to a positive integer, then both `memory` and `memswap_limit` must be set. `memswap_limit` represents the total amount of memory and swap that can be used, and `memory` controls the amount used by non-swap memory. So if `memory`=\"300m\" and `memswap_limit`=\"1g\", the container can use 300m of memory and 700m (1g - 300m) swap.\n- If `memswap_limit` is set to 0, the setting is ignored, and the value is treated as unset.\n- If `memswap_limit` is set to the same value as `memory`, and `memory` is set to a positive integer, the container does not have access to swap.\n- If `memswap_limit` is unset, and `memory` is set, the container can use as much swap as the `memory` setting, if the host container has swap memory configured. For instance, if `memory`=\"300m\" and `memswap_limit` is not set, the container can use 600m in total of memory and swap.\n- If `memswap_limit` is explicitly set to -1, the container is allowed to use unlimited swap, up to the amount available on the host system.\n\n## oom_kill_disable\n\nIf `oom_kill_disable` is set, Compose configures the platform so it won't kill the container in case\nof memory starvation.\n\n## oom_score_adj\n\n`oom_score_adj` tunes the preference for containers to be killed by platform in case of memory starvation. Value must\nbe within [-1000,1000] range.\n\n## pid\n\n`pid` sets the PID mode for container created by Compose.\nSupported values are platform specific.\n\n## pids_limit\n\n`pids_limit` tunes a container’s PIDs limit. Set to -1 for unlimited PIDs.\n\n```yml\npids_limit: 10\n```\n\nWhen both are set, `pids_limit` must be consistent with the `pids` attribute in the [Deploy Specification](deploy.md#pids)\n\n## platform\n\n`platform` defines the target platform the containers for the service run on. It uses the `os[/arch[/variant]]` syntax.\n\nThe values of `os`, `arch`, and `variant` must conform to the convention used by the [OCI Image Spec](https://github.com/opencontainers/image-spec/blob/v1.0.2/image-index.md).\n\nCompose uses this attribute to determine which version of the image is pulled\nand/or on which platform the service’s build is performed.\n\n```yml\nplatform: darwin\nplatform: windows/amd64\nplatform: linux/arm64/v8\n```\n\n## ports\n\nExposes container ports.\n\n> **Note**\n>\n> Port mapping must not be used with `network_mode: host` otherwise a runtime error occurs.\n\n### Short syntax\n\nThe short syntax is a colon-separated string to set the host IP, host port, and container port\nin the form:\n\n`[HOST:]CONTAINER[/PROTOCOL]` where:\n\n- `HOST` is `[IP:](port | range)`\n- `CONTAINER` is `port | range`\n- `PROTOCOL` to restrict port to specified protocol. `tcp` and `udp` values are defined by the Specification,\n  Compose offers support for platform-specific protocol names.\n\nIf host IP is not set, it binds to all network interfaces. Ports can be either a single\nvalue or a range. Host and container must use equivalent ranges.\n\nEither specify both ports (`HOST:CONTAINER`), or just the container port. In the latter case,\nthe container runtime automatically allocates any unassigned port of the host.\n\n`HOST:CONTAINER` should always be specified as a (quoted) string, to avoid conflicts\nwith [yaml base-60 float](https://yaml.org/type/float.html).\n\nExamples:\n\n```yml\nports:\n  - \"3000\"\n  - \"3000-3005\"\n  - \"8000:8000\"\n  - \"9090-9091:8080-8081\"\n  - \"49100:22\"\n  - \"8000-9000:80\"\n  - \"127.0.0.1:8001:8001\"\n  - \"127.0.0.1:5000-5010:5000-5010\"\n  - \"6060:6060/udp\"\n```\n\n> **Note**\n>\n> If Host IP mapping is not supported by a container engine, Compose rejects\n> the Compose file and ignores the specified host IP.\n\n### Long syntax\n\nThe long form syntax allows the configuration of additional fields that can't be\nexpressed in the short form.\n\n- `target`: The container port\n- `published`: The publicly exposed port. It is defined as a string and can be set as a range using syntax `start-end`. It means the actual port is assigned a remaining available port, within the set range.\n- `host_ip`: The Host IP mapping, unspecified means all network interfaces (`0.0.0.0`).\n- `protocol`: The port protocol (`tcp` or `udp`). Defaults to `tcp`.\n- `app_protocol`: The application procotol (TCP/IP level 4 / OSI level 7) this port is used for. This is optional and can be used as a hint for Compose to offer richer behavior for protocols that it understands.\n[![Compose v2.26.0](https://img.shields.io/badge/compose-v2.26.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.26.0)\n- `mode`: `host`: For publishing a host port on each node, or `ingress` for a port to be load balanced. Defaults to `ingress`.\n- `name`: A human-readable name for the port, used to document its usage within the service\n\n```yml\nports:\n  - name: web\n    target: 80\n    host_ip: 127.0.0.1\n    published: \"8080\"\n    protocol: tcp\n    app_protocol: http\n    mode: host    \n\n  - name: web-secured\n    target: 443\n    host_ip: 127.0.0.1\n    published: \"8083-9000\"\n    protocol: tcp\n    app_protocol: https\n    mode: host\n```\n\n## post_start\n\n`post_start` defines a sequence of lifecycle hooks to run after a container has started. The exact timing of when the command is run is not guaranteed.\n\n- `command`: The command to run after the container has started. This attribute is required.\n- `user`: The user to run the command. If not set, the command is run with the same user as the main service command.\n- `privileged`: Lets the post_start command run with privileged access.\n- `working_dir`: The working directory in which to run the command. If not set, it is run in the same working directory as the main service command.\n- `environment`: Sets the environment variables to run the post_start command. The command inherits the `environment` set for the service's main command, \n  and this section lets you to append or override values.\n\n```yaml\nservices:\n  test:\n    post_start:\n      - command: ./do_something_on_startup.sh\n        user: root\n        privileged: true\n        environment:\n          - FOO=BAR\n```\n\n## pre_stop\n\n`pre_stop` defines a sequence of lifecycle hooks to run before service termination.\n\nConfiguration is equivalent to [`post_start](#post_start).\n\n## privileged\n\n`privileged` configures the service container to run with elevated privileges. Support and actual impacts are platform specific.\n\n## profiles\n\n`profiles` defines a list of named profiles for the service to be enabled under. If unassigned, the service is always started but if assigned, it is only started if the profile is activated.\n\nIf present, `profiles` follow the regex format of `[a-zA-Z0-9][a-zA-Z0-9_.-]+`.\n\n```yaml\nservices:\n  frontend:\n    image: frontend\n    profiles: [\"frontend\"]\n\n  phpmyadmin:\n    image: phpmyadmin\n    depends_on:\n      - db\n    profiles:\n      - debug\n```\n\n## pull_policy\n\n`pull_policy` defines the decisions Compose makes when it starts to pull images. Possible values are:\n\n* `always`: Compose always pulls the image from the registry.\n* `never`: Compose doesn't pull the image from a registry and relies on the platform cached image.\n   If there is no cached image, a failure is reported.\n* `missing`: Compose pulls the image only if it's not available in the platform cache.\n   This is the default option if you are not also using the [Compose Build Specification](build.md).\n  `if_not_present` is considered an alias for this value for backward compatibility.\n* `build`: Compose builds the image. Compose rebuilds the image if it's already present.\n\n## read_only\n\n`read_only` configures the service container to be created with a read-only filesystem.\n\n## restart\n\n`restart` defines the policy that the platform applies on container termination.\n\n- `no`: The default restart policy. It does not restart the container under any circumstances.\n- `always`: The policy always restarts the container until its removal.\n- `on-failure`: The policy restarts the container if the exit code indicates an error.\n- `unless-stopped`: The policy restarts the container irrespective of the exit code but stops\n  restarting when the service is stopped or removed.\n\n```yml\n    restart: \"no\"\n    restart: always\n    restart: on-failure\n    restart: unless-stopped\n```\n\n## runtime\n\n`runtime` specifies which runtime to use for the service’s containers.\n\nThe value of `runtime` is specific to the implementation.\nFor example, `runtime` can be the name of [an implementation of OCI Runtime Spec](https://github.com/opencontainers/runtime-spec/blob/master/implementations.md), such as \"runc\".\n\n```yml\nweb:\n  image: busybox:latest\n  command: true\n  runtime: runc\n```\n\n## scale\n\n`scale` specifies the default number of containers to deploy for this service.\nWhen both are set, `scale` must be consistent with the `replicas` attribute in the [Deploy Specification](deploy.md#replicas).\n\n## secrets\n\n`secrets` grants access to sensitive data defined by [secrets](09-secrets.md) on a per-service basis. Two\ndifferent syntax variants are supported; the short syntax and the long syntax.\n\nCompose reports an error if the secret doesn't exist on the platform or isn't defined in the\n[`secrets`](09-secrets.md) section of the Compose file.\n\nServices can be granted access to multiple secrets. Long and short syntax for secrets may be used in the\nsame Compose file. Defining a secret in the top-level `secrets` must not imply granting any service access to it.\nSuch grant must be explicit within service specification as [secrets](09-secrets.md) service element.\n\n### Short syntax\n\nThe short syntax variant only specifies the secret name. This grants the\ncontainer access to the secret and mounts it as read-only to `/run/secrets/<secret_name>`\nwithin the container. The source name and destination mountpoint are both set\nto the secret name.\n\nThe following example uses the short syntax to grant the `frontend` service\naccess to the `server-certificate` secret. The value of `server-certificate` is set\nto the contents of the file `./server.cert`.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    secrets:\n      - server-certificate\nsecrets:\n  server-certificate:\n    file: ./server.cert\n```\n\n### Long syntax\n\nThe long syntax provides more granularity in how the secret is created within\nthe service's containers.\n\n- `source`: The name of the secret as it exists on the platform.\n- `target`: The name of the file to be mounted in `/run/secrets/` in the\n  service's task container, or absolute path of the file if an alternate location is required. Defaults to `source` if not specified.\n- `uid` and `gid`: The numeric UID or GID that owns the file within\n  `/run/secrets/` in the service's task containers. Default value is USER running container.\n- `mode`: The [permissions](https://wintelguy.com/permissions-calc.pl) for the file to be mounted in `/run/secrets/`\n  in the service's task containers, in octal notation.\n  The default value is world-readable permissions (mode `0444`).\n  The writable bit must be ignored if set. The executable bit may be set.\n\nNote that the `uid`, `gid`, and `mode` attributes are implementation specific. \n\nThe following example sets the name of the `server-certificate` secret file to `server.crt`\nwithin the container, sets the mode to `0440` (group-readable), and sets the user and group\nto `103`. The value of `server-certificate` secret is provided by the platform through a lookup and\nthe secret's lifecycle is not directly managed by Compose.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    secrets:\n      - source: server-certificate\n        target: server.cert\n        uid: \"103\"\n        gid: \"103\"\n        mode: 0440\nsecrets:\n  server-certificate:\n    external: true\n```\n\n## security_opt\n\n`security_opt` overrides the default labeling scheme for each container.\n\n```yml\nsecurity_opt:\n  - label:user:USER\n  - label:role:ROLE\n```\n\nFor further default labeling schemes you can override, see [Security configuration](https://docs.docker.com/engine/reference/run/#security-configuration).\n\n## shm_size\n\n`shm_size` configures the size of the shared memory (`/dev/shm` partition on Linux) allowed by the service container.\nIt's specified as a [byte value](11-extension.md#specifying-byte-values).\n\n## stdin_open\n\n`stdin_open` configures a service containers to run with an allocated stdin.\n\n## stop_grace_period\n\n`stop_grace_period` specifies how long Compose must wait when attempting to stop a container if it doesn't\nhandle SIGTERM (or whichever stop signal has been specified with\n[`stop_signal`](#stop_signal)), before sending SIGKILL. It's specified\nas a [duration](11-extension.md#specifying-durations).\n\n```yml\n    stop_grace_period: 1s\n    stop_grace_period: 1m30s\n```\n\nDefault value is 10 seconds for the container to exit before sending SIGKILL.\n\n## stop_signal\n\n`stop_signal` defines the signal that Compose uses to stop the service containers.\nIf unset containers are stopped by Compose by sending `SIGTERM`.\n\n```yml\nstop_signal: SIGUSR1\n```\n\n## storage_opt\n\n`storage_opt` defines storage driver options for a service.\n\n```yml\nstorage_opt:\n  size: '1G'\n```\n\n## sysctls\n\n`sysctls` defines kernel parameters to set in the container. `sysctls` can use either an array or a map.\n\n```yml\nsysctls:\n  net.core.somaxconn: 1024\n  net.ipv4.tcp_syncookies: 0\n```\n\n```yml\nsysctls:\n  - net.core.somaxconn=1024\n  - net.ipv4.tcp_syncookies=0\n```\n\nYou can only use sysctls that are namespaced in the kernel. Docker does not\nsupport changing sysctls inside a container that also modify the host system.\nFor an overview of supported sysctls, refer to [configure namespaced kernel\nparameters (sysctls) at runtime](https://docs.docker.com/engine/reference/commandline/run/#sysctl).\n\n## tmpfs\n\n`tmpfs` mounts a temporary file system inside the container. It can be a single value or a list.\n\n```yml\ntmpfs: \n - <path>\n - <path>:<options>\n```\n\n- <path>: The path inside the container where the tmpfs will be mounted.\n- <options>: Comma-separated list of options for the tmpfs mount.\n\nAvailable options:\n - `mode`: Sets the file system permissions.\n - `uid`: Sets the user ID that owns the mounted tmpfs.\n - `gid`: Sets the group ID that owns the mounted tmpfs.\n\n```yml\nservices:\n  app:\n    tmpfs:\n      - /data:mode=755,uid=1009,gid=1009\n      - /run\n```\n\n## tty\n\n`tty` configures service container to run with a TTY.\n\n## ulimits\n\n`ulimits` overrides the default ulimits for a container. It's specified either as an integer for a single limit\nor as mapping for soft/hard limits.\n\n```yml\nulimits:\n  nproc: 65535\n  nofile:\n    soft: 20000\n    hard: 40000\n```\n\n## user\n\n`user` overrides the user used to run the container process. The default is set by the image (i.e. Dockerfile `USER`). If it's not set, then `root`.\n\n## userns_mode\n\n`userns_mode` sets the user namespace for the service. Supported values are platform specific and may depend\non platform configuration.\n\n```yml\nuserns_mode: \"host\"\n```\n\n## volumes\n\n`volumes` define mount host paths or named volumes that are accessible by service containers. You can use `volumes` to define multiple types of mounts; `volume`, `bind`, `tmpfs`, or `npipe`. \n\nIf the mount is a host path and is only used by a single service, it can be declared as part of the service\ndefinition. To reuse a volume across multiple services, a named\nvolume must be declared in the [top-level `volumes` key](07-volumes.md).\n\nThe following example shows a named volume (`db-data`) being used by the `backend` service,\nand a bind mount defined for a single service.\n\n```yml\nservices:\n  backend:\n    image: example/backend\n    volumes:\n      - type: volume\n        source: db-data\n        target: /data\n        volume:\n          nocopy: true\n          subpath: sub\n      - type: bind\n        source: /var/run/postgres/postgres.sock\n        target: /var/run/postgres/postgres.sock\n\nvolumes:\n  db-data:\n```\n\n### Short syntax\n\nThe short syntax uses a single string with colon-separated values to specify a volume mount\n(`VOLUME:CONTAINER_PATH`), or an access mode (`VOLUME:CONTAINER_PATH:ACCESS_MODE`).\n\n- `VOLUME`: Can be either a host path on the platform hosting containers (bind mount) or a volume name.\n- `CONTAINER_PATH`: The path in the container where the volume is mounted.\n- `ACCESS_MODE`: A comma-separated `,` list of options:\n  - `rw`: Read and write access. This is the default if none is specified.\n  - `ro`: Read-only access.\n  - `z`: SELinux option indicating that the bind mount host content is shared among multiple containers.\n  - `Z`: SELinux option indicating that the bind mount host content is private and unshared for other containers.\n\n> **Note**\n>\n> The SELinux re-labeling bind mount option is ignored on platforms without SELinux.\n\n> **Note**\n> Relative host paths are only supported by Compose that deploy to a\n> local container runtime. This is because the relative path is resolved from the Compose file’s parent\n> directory which is only applicable in the local case. When Compose deploys to a non-local\n> platform it rejects Compose files which use relative host paths with an error. To avoid ambiguities\n> with named volumes, relative paths should always begin with `.` or `..`.\n\n### Long syntax\n\nThe long form syntax allows the configuration of additional fields that can't be\nexpressed in the short form.\n\n- `type`: The mount type. Either `volume`, `bind`, `tmpfs`, `npipe`, or `cluster`\n- `source`: The source of the mount, a path on the host for a bind mount, or the\n  name of a volume defined in the\n  [top-level `volumes` key](07-volumes.md). Not applicable for a tmpfs mount.\n- `target`: The path in the container where the volume is mounted.\n- `read_only`: Flag to set the volume as read-only.\n- `bind`: Used to configure additional bind options:\n  - `propagation`: The propagation mode used for the bind.\n  - `create_host_path`: Creates a directory at the source path on host if there is nothing present.\n    Compose does nothing if there is something present at the path. This is automatically implied by short syntax\n    for backward compatibility with `docker-compose` legacy.\n  - `selinux`: The SELinux re-labeling option `z` (shared) or `Z` (private)\n- `volume`: Configures additional volume options:\n  - `nocopy`: Flag to disable copying of data from a container when a volume is created.\n  - `subpath`: Path inside a volume to mount instead of the volume root.\n- `tmpfs`: Configures additional tmpfs options:\n  - `size`: The size for the tmpfs mount in bytes (either numeric or as bytes unit).\n  - `mode`: The file mode for the tmpfs mount as Unix permission bits as an octal number. [![Compose v2.14.0](https://img.shields.io/badge/compose-v2.14.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.14.0)\n- `consistency`: The consistency requirements of the mount. Available values are platform specific.\n\n## volumes_from\n\n`volumes_from` mounts all of the volumes from another service or container. You can optionally specify\nread-only access `ro` or read-write `rw`. If no access level is specified, then read-write access is used.\n\nYou can also mount volumes from a container that is not managed by Compose by using the `container:` prefix.\n\n```yaml\nvolumes_from:\n  - service_name\n  - service_name:ro\n  - container:container_name\n  - container:container_name:rw\n```\n\n## working_dir\n\n`working_dir` overrides the container's working directory which is specified by the image, for example Dockerfile's `WORKDIR`.\n"
        },
        {
          "name": "06-networks.md",
          "type": "blob",
          "size": 5.5927734375,
          "content": "# Networks top-level element\n\nNetworks are the layer that allow services to communicate with each other.\n\nThe top-level `networks` element lets you configure named networks that can be reused across multiple services. To use a network across multiple services, you must explicitly grant each service access by using the [networks](05-services.md) attribute within the `services` top-level element. The `networks` top-level element has additional syntax that provides more granular control.\n\n## Examples\n\n### Basic example\n\nIn the following example, at runtime, networks `front-tier` and `back-tier` are created and the `frontend` service\nis connected to `front-tier` and `back-tier` networks.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    networks:\n      - front-tier\n      - back-tier\n\nnetworks:\n  front-tier:\n  back-tier:\n```\n\n### Advanced example\n\n```yml\nservices:\n  proxy:\n    build: ./proxy\n    networks:\n      - frontend\n  app:\n    build: ./app\n    networks:\n      - frontend\n      - backend\n  db:\n    image: postgres\n    networks:\n      - backend\n\nnetworks:\n  frontend:\n    # Use a custom driver\n    driver: custom-driver-1\n  backend:\n    # Use a custom driver which takes special options\n    driver: custom-driver-2\n    driver_opts:\n      foo: \"1\"\n      bar: \"2\"\n```\n\nThe advanced example shows a Compose file which defines two custom networks. The `proxy` service is isolated from the `db` service, because they do not share a network in common. Only `app` can talk to both.\n\n## Attributes\n\n### driver\n\n`driver` specifies which driver should be used for this network. Compose returns an error if the\ndriver is not available on the platform.\n\n```yml\nnetworks:\n  db-data:\n    driver: overlay\n```\n\n### driver_opts\n\n`driver_opts` specifies a list of options as key-value pairs to pass to the driver. These options are\ndriver-dependent. Consult the driver's documentation for more information. \n\n```yml\nnetworks:\n  db-data:\n    driver_opts:\n      foo: \"bar\"\n      baz: 1\n```\n\n### attachable\n\nIf `attachable` is set to `true`, then standalone containers should be able to attach to this network, in addition to services.\nIf a standalone container attaches to the network, it can communicate with services and other standalone containers\nthat are also attached to the network.\n\n```yml\nnetworks:\n  mynet1:\n    driver: overlay\n    attachable: true\n```\n\n### enable_ipv6\n\n`enable_ipv6` enables IPv6 networking. For an example, see step four of [Create an IPv6 network](https://docs.docker.com/config/daemon/ipv6/).\n\n## external\n\nIf set to `true`:\n - `external` specifies that this network’s lifecycle is maintained outside of that of the application.\nCompose doesn't attempt to create these networks, and returns an error if one doesn't exist.\n - All other attributes apart from name are irrelevant. If Compose detects any other attribute, it rejects the Compose file as invalid.\n\nIn the example below, `proxy` is the gateway to the outside world. Instead of attempting to create a network, Compose\nqueries the platform for an existing network simply called `outside` and connects the\n`proxy` service's containers to it.\n\n```yml\n\nservices:\n  proxy:\n    image: example/proxy\n    networks:\n      - outside\n      - default\n  app:\n    image: example/app\n    networks:\n      - default\n\nnetworks:\n  outside:\n    external: true\n```\n\n### ipam\n\n`ipam` specifies a custom IPAM configuration. This is an object with several properties, each of which is optional:\n\n- `driver`: Custom IPAM driver, instead of the default.\n- `config`: A list with zero or more configuration elements, each containing a:\n  - `subnet`: Subnet in CIDR format that represents a network segment\n  - `ip_range`: Range of IPs from which to allocate container IPs\n  - `gateway`: IPv4 or IPv6 gateway for the master subnet\n  - `aux_addresses`: Auxiliary IPv4 or IPv6 addresses used by Network driver, as a mapping from hostname to IP\n- `options`: Driver-specific options as a key-value mapping.\n\n```yml\nnetworks:\n  mynet1:\n    ipam:\n      driver: default\n      config:\n        - subnet: 172.28.0.0/16\n          ip_range: 172.28.5.0/24\n          gateway: 172.28.5.254\n          aux_addresses:\n            host1: 172.28.1.5\n            host2: 172.28.1.6\n            host3: 172.28.1.7\n      options:\n        foo: bar\n        baz: \"0\"\n```\n\n## internal\n\nBy default, Compose provides external connectivity to networks. `internal`, when set to `true`, allows you to\ncreate an externally isolated network.\n\n## labels\n\nAdd metadata to containers using `labels`. You can use either an array or a dictionary.\n\nIt is recommended that you use reverse-DNS notation to prevent labels from conflicting with those used by other software.\n\n```yml\nnetworks:\n  mynet1:\n    labels:\n      com.example.description: \"Financial transaction network\"\n      com.example.department: \"Finance\"\n      com.example.label-with-empty-value: \"\"\n```\n\n```yml\nnetworks:\n  mynet1:\n    labels:\n      - \"com.example.description=Financial transaction network\"\n      - \"com.example.department=Finance\"\n      - \"com.example.label-with-empty-value\"\n```\n\nCompose sets `com.docker.compose.project` and `com.docker.compose.network` labels.\n\n## name\n\n`name` sets a custom name for the network. The name field can be used to reference networks which contain special characters.\nThe name is used as is and is not scoped with the project name.\n\n```yml\nnetworks:\n  network1:\n    name: my-app-net\n```\n\nIt can also be used in conjunction with the `external` property to define the platform network that Compose\nshould retrieve, typically by using a parameter so the Compose file doesn't need to hard-code runtime specific values:\n\n```yml\nnetworks:\n  network1:\n    external: true\n    name: \"${NETWORK_ID}\"\n```\n"
        },
        {
          "name": "07-volumes.md",
          "type": "blob",
          "size": 4.388671875,
          "content": "# Volumes top-level element\n\nVolumes are persistent data stores implemented by the container engine. Compose offers a neutral way for services to mount volumes, and configuration parameters to allocate them to infrastructure.\n\nThe top-level `volumes` declaration lets you configure named volumes that can be reused across multiple services. To use a volume across multiple services, you must explicitly grant each service access by using the [volumes](05-services.md#volumes) attribute within the `services` top-level element. The `volumes` attribute has additional syntax that provides more granular control.\n\n## Example\n\nThe following example shows a two-service setup where a database's data directory is shared with another service as a volume, named\n`db-data`, so that it can be periodically backed up.\n\n```yml\nservices:\n  backend:\n    image: example/database\n    volumes:\n      - db-data:/etc/data\n\n  backup:\n    image: backup-service\n    volumes:\n      - db-data:/var/lib/backup/data\n\nvolumes:\n  db-data:\n```\n\nThe `db-data` volume is mounted at the `/var/lib/backup/data` and `/etc/data` container paths for backup and backend respectively.\n\nRunning `docker compose up` creates the volume if it doesn't already exist. Otherwise, the existing volume is used and is recreated if it's manually deleted outside of Compose.\n\n## Attributes\n\nAn entry under the top-level `volumes` section can be empty, in which case it uses the container engine's default configuration for\ncreating a volume. Optionally, you can configure it with the following keys:\n\n### driver\n\nSpecifies which volume driver should be used. Default and available values are platform specific. If the driver is not available, Compose returns an error and doesn't deploy the application.\n\n```yml\nvolumes:\n  db-data:\n    driver: foobar\n```\n\n### driver_opts\n\n`driver_opts` specifies a list of options as key-value pairs to pass to the driver for this volume. The options are driver-dependent.\n\n```yml\nvolumes:\n  example:\n    driver_opts:\n      type: \"nfs\"\n      o: \"addr=10.40.0.199,nolock,soft,rw\"\n      device: \":/docker/example\"\n```\n\n### external\n\nIf set to `true`:\n - `external` specifies that this volume already exists on the platform and its lifecycle is managed outside\nof that of the application. Compose doesn't then create the volume, and returns an error if the volume doesn't  exist.\n - All other attributes apart from `name` are irrelevant. If Compose detects any other attribute, it rejects the Compose file as invalid.\n\nIn the example below, instead of attempting to create a volume called\n`{project_name}_db-data`, Compose looks for an existing volume simply\ncalled `db-data` and mounts it into the `backend` service's containers.\n\n```yml\nservices:\n  backend:\n    image: example/database\n    volumes:\n      - db-data:/etc/data\n\nvolumes:\n  db-data:\n    external: true\n```\n\n### labels\n\n`labels` are used to add metadata to volumes. You can use either an array or a dictionary.\n\nIt's recommended that you use reverse-DNS notation to prevent your labels from conflicting with those used by other software.\n\n```yml\nvolumes:\n  db-data:\n    labels:\n      com.example.description: \"Database volume\"\n      com.example.department: \"IT/Ops\"\n      com.example.label-with-empty-value: \"\"\n```\n\n```yml\nvolumes:\n  db-data:\n    labels:\n      - \"com.example.description=Database volume\"\n      - \"com.example.department=IT/Ops\"\n      - \"com.example.label-with-empty-value\"\n```\n\nCompose sets `com.docker.compose.project` and `com.docker.compose.volume` labels.\n\n### name\n\n`name` sets a custom name for a volume. The name field can be used to reference volumes that contain special\ncharacters. The name is used as is and is not scoped with the stack name.\n\n```yml\nvolumes:\n  db-data:\n    name: \"my-app-data\"\n```\n\nThis makes it possible to make this lookup name a parameter of the Compose file, so that the model ID for the volume is hard-coded but the actual volume ID on the platform is set at runtime during deployment. \n\nFor example, if `DATABASE_VOLUME=my_volume_001` in your `.env` file:\n\n```yml\nvolumes:\n  db-data:\n      name: ${DATABASE_VOLUME}\n```\n\nRunning `docker compose up` uses the volume called `my_volume_001`. \n\nIt can also be used in conjunction with the `external` property. This means the name of the volume used to lookup the actual volume on the platform is set separately from the name used to refer to it within the Compose file:\n\n```yml\nvolumes:\n  db-data:\n    external:\n      name: actual-name-of-volume\n```\n\n"
        },
        {
          "name": "08-configs.md",
          "type": "blob",
          "size": 3.1552734375,
          "content": "# Configs top-level element\n\nConfigs allow services to adapt their behaviour without the need to rebuild a Docker image.\n\nServices can only access configs when explicitly granted by a [`configs`](05-services.md#configs) attribute within the `services` top-level element.\n\nAs with volumes, configs are mounted as files into a service's container's filesystem. The location of the mount point within the container defaults to `/<config-name>` in Linux containers and `C:\\<config-name>` in Windows containers. \n\nBy default, the config:\n- Is owned by the user running the container command but can be overridden by service configuration.\n- Has world-readable permissions (mode 0444), unless the service is configured to override this.\n\nThe top-level `configs` declaration defines or references configuration data that is granted to services in your Compose application. The source of the config is either `file` or `external`.\n\n- `file`: The config is created with the contents of the file at the specified path.\n- `environment`: The config content is created with the value of an environment variable.\n- `content`: The content is created with the inlined value.\n[![Compose v2.23.1](https://img.shields.io/badge/compose-v2.23.1-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.23.1)\n- `external`: If set to true, `external` specifies that this config has already been created. Compose does not\n  attempt to create it, and if it does not exist, an error occurs.\n- `name`: The name of the config object in the container engine to look up. This field can be used to\n  reference configs that contain special characters. The name is used as is\n  and will **not** be scoped with the project name.\n\n## Example 1\n\n`<project_name>_http_config` is created when the application is deployed,\nby registering the content of the `httpd.conf` as the configuration data.\n\n```yml\nconfigs:\n  http_config:\n    file: ./httpd.conf\n```\n\nAlternatively, `http_config` can be declared as external. Compose looks up `http_config` to expose the configuration data to relevant services.\n\n```yml\nconfigs:\n  http_config:\n    external: true\n```\n\n## Example 2\n\n`<project_name>_app_config` is created when the application is deployed,\nby registering the inlined content as the configuration data. This comes with the\nbenefits Compose will infer variables when creating the config, which allows to\nadjust content according to service configuration:\n\n```yml\nconfigs:\n  app_config:\n    content: |\n      debug=${DEBUG}\n      spring.application.admin.enabled=${DEBUG}\n      spring.application.name=${COMPOSE_PROJECT_NAME}\n```\n\n## Example 3\n\nExternal configs lookup can also use a distinct key by specifying a `name`. \n\nThe following\nexample modifies the previous one to look up a config using the parameter `HTTP_CONFIG_KEY`. The\nthe actual lookup key will is set at deployment time by the [interpolation](12-interpolation.md) of\nvariables, but exposed to containers as hard-coded ID `http_config`.\n\n```yml\nconfigs:\n  http_config:\n    external: true\n    name: \"${HTTP_CONFIG_KEY}\"\n```\n\nIf `external` is set to `true`, all other attributes apart from `name` are irrelevant. If Compose detecs any other attribute, it rejects the Compose file as invalid.\n"
        },
        {
          "name": "09-secrets.md",
          "type": "blob",
          "size": 2.5751953125,
          "content": "# Secrets top-level element\n\nSecrets are a flavor of [Configs](08-configs.md) focusing on sensitive data, with specific constraint for this usage. \n\nServices can only access secrets when explicitly granted by a [`secrets`](05-services.md#secrets) attribute within the `services` top-level element.\n\nThe top-level `secrets` declaration defines or references sensitive data that is granted to the services in your Compose\napplication. The source of the secret is either `file` or `environment`.\n\n- `file`: The secret is created with the contents of the file at the specified path.\n- `environment`: The secret is created with the value of an environment variable. [![Compose v2.6.0](https://img.shields.io/badge/compose-v2.6.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.6.0)\n- `external`: If set to true, `external` specifies that this secret has already been created. Compose does\n  not attempt to create it, and if it does not exist, an error occurs.\n- `name`: The name of the secret object in Docker. This field can be used to\n  reference secrets that contain special characters. The name is used as is\n  and isn't scoped with the project name.\n\n## Example 1\n\n`server-certificate` secret is created as `<project_name>_server-certificate` when the application is deployed,\nby registering content of the `server.cert` as a platform secret.\n\n```yml\nsecrets:\n  server-certificate:\n    file: ./server.cert\n```\n\n## Example 2 \n\n`token` secret  is created as `<project_name>_token` when the application is deployed,\nby registering the content of the `OAUTH_TOKEN` environment variable as a platform secret.\n\n```yml\nsecrets:\n  token:\n    environment: \"OAUTH_TOKEN\"\n```\n\nAlternatively, `server-certificate` can be declared as external. Compose looks up the `server-certificate` secret to expose to relevant services.\n\n```yml\nsecrets:\n  server-certificate:\n    external: true\n```\n\n## Example 3\n\nExternal secrets lookup can also use a distinct key by specifying a `name`. \n\nThe following example modifies the previous example to look up a secret using the name `CERTIFICATE_KEY`. The actual lookup key is set at deployment time by the [interpolation](12-interpolation.md) of\nvariables, but exposed to containers as hard-coded ID `server-certificate`.\n\n```yml\nsecrets:\n  server-certificate:\n    external: true\n    name: \"${CERTIFICATE_KEY}\"\n```\n\nIf `external` is set to `true`, all other attributes apart from `name` are irrelevant. If Compose detects any other attribute, it rejects the Compose file as invalid.\n\nYour Compose file needs to explicitly grant access to the secrets to relevant services in your application.\n"
        },
        {
          "name": "10-fragments.md",
          "type": "blob",
          "size": 2.55078125,
          "content": "# Fragments\n\nWith Compose, you can use built-in [YAML](https://www.yaml.org/spec/1.2/spec.html#id2765878) features to make your Compose file neater and more efficient. Anchors and aliases let you create re-usable blocks. This is useful if you start to find common configurations that span multiple services. Having re-usable blocks minimizes potential mistakes.\n\nAnchors are created using the `&` sign. The sign is followed by an alias name. You can use this alias with the `*` sign later to reference the value following the anchor. Make sure there is no space between the `&` and the `*` characters and the following alias name. \n\nYou can use more than one anchor and alias in a single Compose file.\n\n## Example 1\n\n```yml\nvolumes:\n  db-data: &default-volume\n    driver: default\n  metrics: *default-volume\n```\n\nIn the example above, a `default-volume` anchor is created based on the `db-data` volume. It is later reused by the alias `*default-volume` to define the `metrics` volume. \n\nAnchor resolution takes place before [variables interpolation](12-interpolation.md), so variables can't be used to set anchors or aliases.\n\n## Example 2\n\n```yml\nservices:\n  first:\n    image: my-image:latest\n    environment: &env\n      - CONFIG_KEY\n      - EXAMPLE_KEY\n      - DEMO_VAR\n  second:\n    image: another-image:latest\n    environment: *env\n```\n\nIf you have an anchor that you want to use in more than one service, use it in conjunction with an [extension](11-extension.md) to make your Compose file easier to maintain.\n\n## Example 3\n\nYou may want to partially override values. Compose follows the rule outlined by [YAML merge type](https://yaml.org/type/merge.html). \n\nIn the following example, `metrics` volume specification uses alias\nto avoid repetition but overrides `name` attribute:\n\n```yml\n\nservices:\n  backend:\n    image: example/database\n    volumes:\n      - db-data\n      - metrics\nvolumes:\n  db-data: &default-volume\n    driver: default\n    name: \"data\"\n  metrics:\n    <<: *default-volume\n    name: \"metrics\"\n```\n\n## Example 4\n\nYou can also extend the anchor to add additional values.\n\n```yml\nservices:\n  first:\n    image: my-image:latest\n    environment: &env\n      FOO: BAR\n      ZOT: QUIX\n  second:\n    image: another-image:latest\n    environment:\n      <<: *env\n      YET_ANOTHER: VARIABLE\n```\n\n> **Note**\n>\n> [YAML merge](https://yaml.org/type/merge.html) only applies to mappings, and can't be used with sequences. \n\nIn example above, the environment variables must be declared using the `FOO: BAR` mapping syntax, while the sequence syntax `- FOO=BAR` is only valid when no fragments are involved. \n"
        },
        {
          "name": "11-extension.md",
          "type": "blob",
          "size": 3.8349609375,
          "content": "# Extension\n\nAs with [Fragments](10-fragments.md), Extensions can be used to make your Compose file more efficient and easier to maintain. Extensions can also be used with [anchors and aliases](10-fragments.md).\n\nUse the prefix `x-` as a top-level element to modularize configurations that you want to reuse. \nCompose ignores any fields that start with `x-`, this is the sole exception where Compose silently ignores unrecognized fields.\n\nThey also can be used within any structure in a Compose file where user-defined keys are not expected. \nCompose use those to enable experimental features, the same way browsers add support for [custom CSS features](https://www.w3.org/TR/2011/REC-CSS2-20110607/syndata.html#vendor-keywords)\n\n## Example 1\n\n```yml\nx-custom:\n  foo:\n    - bar\n    - zot\n\nservices:\n  webapp:\n    image: example/webapp\n    x-foo: bar\n```\n\n```yml\nservice:\n  backend:\n    deploy:\n      placement:\n        x-aws-role: \"arn:aws:iam::XXXXXXXXXXXX:role/foo\"\n        x-aws-region: \"eu-west-3\"\n        x-azure-region: \"france-central\"\n```\n\n## Example 2\n\n```yml\nx-env: &env\n  environment:\n    - CONFIG_KEY\n    - EXAMPLE_KEY\n \nservices:\n  first:\n    <<: *env\n    image: my-image:latest\n  second:\n    <<: *env\n    image: another-image:latest\n```\n\nIn this example, the environment variables do not belong to either of the services. They’ve been lifted out completely into the `x-env` extension field.\nThis defines a new node which contains the environment field. The `&env` YAML anchor is used so both services can reference the extension field’s value as `*env`.\n\n## Example 3\n\n```yml\nx-function: &function\n labels:\n   function: \"true\"\n depends_on:\n   - gateway\n networks:\n   - functions\n deploy:\n   placement:\n     constraints:\n       - 'node.platform.os == linux'\nservices:\n # Node.js gives OS info about the node (Host)\n nodeinfo:\n   <<: *function\n   image: functions/nodeinfo:latest\n   environment:\n     no_proxy: \"gateway\"\n     https_proxy: $https_proxy\n # Uses `cat` to echo back response, fastest function to execute.\n echoit:\n   <<: *function\n   image: functions/alpine:health\n   environment:\n     fprocess: \"cat\"\n     no_proxy: \"gateway\"\n     https_proxy: $https_proxy\n```\n\nThe `nodeinfo` and `echoit` services both include the `x-function` extension via the `&function` anchor, then set their specific image and environment. \n\n## Example 4 \n\nUsing [YAML merge](https://yaml.org/type/merge.html) it is also possible to use multiple extensions and share\nand override additional attributes for specific needs:\n\n```yml\nx-environment: &default-environment\n  FOO: BAR\n  ZOT: QUIX\nx-keys: &keys\n  KEY: VALUE\nservices:\n  frontend:\n    image: example/webapp\n    environment: \n      << : [*default-environment, *keys]\n      YET_ANOTHER: VARIABLE\n```\n\n> **Note**\n>\n> [YAML merge](https://yaml.org/type/merge.html) only applies to mappings, and can't be used with sequences. \n>\n> In the example above, the environment variables are declared using the `FOO: BAR` mapping syntax, while the sequence syntax `- FOO=BAR` is only valid when no fragments are involved.\n\n## Informative Historical Notes\n\nThis section is informative. At the time of writing, the following prefixes are known to exist:\n\n| Prefix     | Vendor/Organization |\n| ---------- | ------------------- |\n| docker     | Docker              |\n| kubernetes | Kubernetes          |\n\n## Specifying byte values\n\nValues express a byte value as a string in `{amount}{byte unit}` format:\nThe supported units are `b` (bytes), `k` or `kb` (kilo bytes), `m` or `mb` (mega bytes) and `g` or `gb` (giga bytes).\n\n```\n    2b\n    1024kb\n    2048k\n    300m\n    1gb\n```\n\n## Specifying durations\n\nValues express a duration as a string in the form of `{value}{unit}`.\nThe supported units are `us` (microseconds), `ms` (milliseconds), `s` (seconds), `m` (minutes) and `h` (hours).\nValues can combine multiple values without separator.\n\n```\n  10ms\n  40s\n  1m30s\n  1h5m30s20ms\n```\n"
        },
        {
          "name": "12-interpolation.md",
          "type": "blob",
          "size": 2.3662109375,
          "content": "# Interpolation\n\nValues in a Compose file can be set by variables and interpolated at runtime. Compose files use a Bash-like\nsyntax `${VARIABLE}`.\n\nBoth `$VARIABLE` and `${VARIABLE}` syntax is supported. Default values can be defined inline using typical shell syntax:\n\n- `${VARIABLE:-default}` evaluates to `default` if `VARIABLE` is unset or\n  empty in the environment.\n- `${VARIABLE-default}` evaluates to `default` only if `VARIABLE` is unset\n  in the environment.\n\nSimilarly, the following syntax allows you to specify mandatory variables:\n\n- `${VARIABLE:?err}` exits with an error message containing `err` if\n  `VARIABLE` is unset or empty in the environment.\n- `${VARIABLE?err}` exits with an error message containing `err` only if\n  `VARIABLE` is unset in the environment.\n\nInterpolation can also be nested:\n\n- `${VARIABLE:-${FOO}}`\n- `${VARIABLE?$FOO}`\n- `${VARIABLE:-${FOO:-default}}`\n\nOther extended shell-style features, such as `${VARIABLE/foo/bar}`, are not\nsupported by Compose.\n\nCompose will process any string following a `$` sign as long as it makes it\na valid variable definition: either an alphanumeric name (`[_a-z][_a-z0-9]*`)\nor a braced string starting with `${`. In other circumstances, it will be preserved without attempt to interpolate a value.\n\nYou can use a `$$` (double-dollar sign) when your configuration needs a literal\ndollar sign. This also prevents Compose from interpolating a value, so a `$$`\nallows you to refer to environment variables that you don't want processed by\nCompose.\n\n```yml\nweb:\n  build: .\n  command: \"$$VAR_NOT_INTERPOLATED_BY_COMPOSE\"\n```\n\nIf Compose can't resolve a substituted variable and no default value is defined, it displays a warning and substitutes the variable with an empty string.\n\nAs any values in a Compose file can be interpolated with variable substitution, including compact string notation\nfor complex elements, interpolation is applied before a merge on a per-file basis.\n\nInterpolation applies only to YAML values, not to keys. For the few places where keys are actually arbitrary\nuser-defined strings, such as [labels](05-services.md#labels) or [environment](05-services.md#environment), an alternate equal sign syntax\nmust be used for interpolation to apply. For example:\n\n```yml\nservices:\n  foo:\n    labels:\n      \"$VAR_NOT_INTERPOLATED_BY_COMPOSE\": \"BAR\"\n```\n\n```yml\nservices:\n  foo:\n    labels:\n      - \"$VAR_INTERPOLATED_BY_COMPOSE=BAR\"\n```\n"
        },
        {
          "name": "13-merge.md",
          "type": "blob",
          "size": 4.5517578125,
          "content": "# Merge and override\n\nCompose lets you define a Compose application model through [multiple Compose files](https://docs.docker.com/compose/multiple-compose-files/). \nWhen doing so, Compose follows the rules declared in this section to merge Compose files.\n\n## Mapping\n\nA YAML `mapping` gets merged by adding missing entries and merging the conflicting ones.\n\nMerging the following example YAML trees:\n\n```yaml\nservices:\n  foo:\n    key1: value1\n    key2: value2\n```\n\n```yaml\nservices:\n  foo:\n    key2: VALUE\n    key3: value3\n```\n\nResults in a Compose application model equivalent to the YAML tree:\n\n```yaml\nservices:\n  foo:\n    key1: value1\n    key2: VALUE\n    key3: value3\n```\n\n## Sequence\n\nA YAML `sequence` is merged by appending values from the overriding Compose file to the previous one.\n\nMerging the following example YAML trees:\n\n```yaml\nservices:\n  foo:\n    DNS:\n      - 1.1.1.1\n```\n\n```yaml\nservices:\n  foo:\n    DNS: \n      - 8.8.8.8\n```\n\nResults in a Compose application model equivalent to the YAML tree:\n\n```yaml\nservices:\n  foo:\n    DNS:\n      - 1.1.1.1\n      - 8.8.8.8\n```\n\n## Exceptions\n\n### Shell commands\n\nWhen merging Compose files that use the services attributes [command](05-services.md#command), [entrypoint](05-services.md#entrypoint) and [healthcheck: `test`](05-services.md#healthcheck), the value is overridden by the latest Compose file, and not appended.\n\nMerging the following example YAML trees:\n\n```yaml\nservices:\n  foo:\n    command: [\"echo\", \"foo\"]\n```\n\n```yaml\nservices:\n  foo:\n    command: [\"echo\", \"bar\"]\n```\n\nResults in a Compose application model equivalent to the YAML tree:\n\n```yaml\nservices:\n  foo:\n    command: [\"echo\", \"bar\"]\n```\n\n### Unique resources\n\nApplies to the [ports](05-services.md#ports), [volumes](05-services.md#volumes), [secrets](05-services.md#secrets) and [configs](05-services.md#configs) services attributes.\nWhile these types are modeled in a Compose file as a sequence, they have special uniqueness requirements:\n\n| Attribute   | Unique key               |\n|-------------|--------------------------|\n| volumes     |  target                  |\n| secrets     |  source                  |\n| configs     |  source                  |\n| ports       |  {ip, target, published, protocol}   |\n\nWhen merging Compose files, Compose appends new entries that do not violate a uniqueness constraint and merge entries that share a unique key.\n\nMerging the following example YAML trees:\n\n```yaml\nservices:\n  foo:\n    volumes:\n      - foo:/work\n```\n\n```yaml\nservices:\n  foo:\n    volumes:\n      - bar:/work\n```\n\nResults in a Compose application model equivalent to the YAML tree:\n\n```yaml\nservices:\n  foo:\n    volumes:\n      - bar:/work\n```\n\n### Reset value\n\nIn addition to the previously described mechanism, an override Compose file can also be used to remove elements from your application model.\nFor this purpose, the custom [YAML tag](https://yaml.org/spec/1.2.2/#24-tags) `!reset` can be set to\noverride a value set by the overriden Compose file. A valid value for attribute must be provided,\nbut will be ignored and target attribute will be set with type's default value or `null`. \n\nFor readability, it is recommended to explicitly set the attribute value to the null (`null`) or empty\narray `[]` (with `!reset null` or `!reset []`) so that it is clear that resulting attribute will be\ncleared.\n\nA base `compose.yaml` file:\n\n```yaml\nservices:\napp:\n    image: myapp\n    ports:\n      - \"8080:80\"\n    environment:\n      FOO: BAR             \n```\n\nAnd an `compose.override.yaml` file:\n\n```yaml\nservices:\n  app:\n    image: myapp\n    ports: !reset []\n    environment:\n      FOO: !reset null\n```\n\nResults in:\n\n```yaml\nservices:\n  app:\n    image: myapp\n```\n\n### Replace value\n\n[![Compose v2.24.4](https://img.shields.io/badge/compose-v2.24.4-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.24.4)\n\nWhile `!reset` can be used to remove a declaration from a Compose file using an override file, `!override` allows\nyou to fully replace an attribute, bypassing the standard merge rules. A typical example is to fully replace a \nresource definition, to rely on a distinct model but using the same name.\n\nA base `compose.yaml` file:\n\n```yaml\nservices:\napp:\n    image: myapp\n    ports:\n      - \"8080:80\"\n```\n\nTo remove the original port, but expose a new one, the following override file is used:\n\n```yaml\nservices:\n  app:\n    ports: !override\n      - \"8443:443\" \n```\n\nThis results in: \n\n```yaml\nservices:\n  app:\n    image: myapp\n    ports:\n      - \"8443:443\" \n```\n\nIf `!override` had not been used, both `8080:80` and `8443:443` would be exposed as per the [merging rules outlined above](#sequence). \n"
        },
        {
          "name": "14-include.md",
          "type": "blob",
          "size": 4.3837890625,
          "content": "# Include\n\n[![Compose v2.20.0](https://img.shields.io/badge/compose-v2.20.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.20.0)\n\nA Compose application can declare dependency on another Compose application. This is useful if:\n- You want to reuse other Compose files.\n- You need to factor out parts of your application model into separate Compose files so they can be managed separately or shared with others.\n- Teams need to keep a Compose file reasonably complicated for the limited amount of resources it has to declare for it's own sub-domain, within a larger deployment.\n\nThe `include` top-level section is used to define the dependency on another Compose application, or sub-domain.\nEach path listed in the `include` section is loaded as an individual Compose application model, with it's own project directory, in order to resolve relative paths. \n\nOnce the included Compose application is loaded, all resources definitions are copied into the \ncurrent Compose application model. Compose displays a warning if resource names conflict and doesn't \ntry to merge them. To enforce this, `include` is evaluated after the Compose file(s) selected \nto define the Compose application model have been parsed and merged, so that conflicts \nbetween Compose files are detected.\n\n`include` applies recursively so an included Compose file which declares its own `include` section, triggers those other files to be included as well. \n\nAny volumes, networks, or other resources pulled in from the included Compose file can be used by the current Compose application for cross-service references. For example:\n\n```yaml\ninclude:\n  - my-compose-include.yaml  #with serviceB declared\nservices:\n  serviceA:\n    build: .\n    depends_on:\n      - serviceB #use serviceB directly as if it was declared in this Compose file\n```\n\nCompose also supports the use of interpolated variables with `include`. It's recommended that you [specify mandatory variables](12-interpolation.md). For example:\n\n```text\ninclude:\n  -${INCLUDE_PATH:?FOO}/compose.yaml\n```\n\n## Short syntax\n\nThe short syntax only defines paths to other Compose files. The file is loaded with the parent\nfolder as the project directory, and an optional `.env` file that is loaded to define any variables' default values\nby interpolation. The local project's environment can override those values. \n\n```yaml\ninclude:\n  - ../commons/compose.yaml\n  - ../another_domain/compose.yaml\n\nservices:\n  webapp:\n    depends_on:\n      - included-service # defined by another_domain\n```\n\nIn the above example, both `../commons/compose.yaml` and \n`../another_domain/compose.yaml` are loaded as individual Compose projects. Relative paths \nin Compose files being referred by `include` are resolved relative to their own Compose \nfile path, not based on the local project's directory. Variables are interpolated using values set in the optional\n`.env` file in same folder, and is overridden by the local project's environment.\n\n## Long syntax\n\nThe long syntax offers more control over the sub-project parsing:\n\n```yaml\ninclude:\n   - path: ../commons/compose.yaml\n     project_directory: ..\n     env_file: ../another/.env\n```\n\n### path\n\n`path` is required and defines the location of the Compose file(s) to be parsed and included into the\nlocal Compose model. `path` can be set either to a string when a single Compose file is involved,\nor to a list of strings when multiple Compose files need to be [merged together](13-merge.md) to\ndefine the Compose model to be included in the local application.\n\n```yaml\ninclude:\n   - path: \n       - ../commons/compose.yaml\n       - ./commons-override.yaml\n```\n\n### project_directory\n\n`project_directory` defines a base path to resolve relative paths set in the Compose file. It defaults to \nthe directory of the included Compose file.\n\n### env_file\n\n`env_file` defines an environment file(s) to use to define default values when interpolating variables\nin the Compose file being parsed. It defaults to `.env` file in the `project_directory` for the Compose \nfile being parsed. \n\n`env_file` can be set either to a string or a list of strings when multiple environment files need to be merged\nto define a project environment.\n\n```yaml\ninclude:\n   - path: ../another/compose.yaml\n     env_file:\n       - ../another/.env\n       - ../another/dev.env\n```\n\nThe local project's environment has precedence over the values set by the Compose file, so that the local project can\noverride values for customization.\n"
        },
        {
          "name": "15-profiles.md",
          "type": "blob",
          "size": 2.6123046875,
          "content": "# Profiles\n\nWith profiles you can define a set of active profiles so your Compose application model is adjusted for various usages and environments.\nThe exact mechanism is implementation specific and may include command line flags, environment variables, etc.\n\nThe [services](05-services.md) top-level element supports a `profiles` attribute to define a list of named profiles. \nServices without a `profiles` attribute are always enabled. \n\nA service is ignored by Compose when none of the listed `profiles` match the active ones, unless the service is\nexplicitly targeted by a command. In that case its profile is added to the set of active profiles.\n\n> **Note**\n>\n> All other top-level elements are not affected by `profiles` and are always active.\n\nReferences to other services (by `links`, `extends` or shared resource syntax `service:xxx`) do not\nautomatically enable a component that would otherwise have been ignored by active profiles. Instead\nCompose returns an error.\n\n## Illustrative example\n\n```yaml\nservices:\n  foo:\n    image: foo\n  bar:\n    image: bar\n    profiles:\n      - test\n  baz:\n    image: baz\n    depends_on:\n      - bar\n    profiles:\n      - test\n  zot:\n    image: zot\n    depends_on:\n      - bar\n    profiles:\n      - debug\n```\n\nIn the above example:\n\n- If the Compose application model is parsed with no profile enabled, it only contains the `foo` service.\n- If the profile `test` is enabled, the model contains the services `bar` and `baz`, and service `foo`, which is always enabled.\n- If the profile `debug` is enabled, the model contains both `foo` and `zot` services, but not `bar` and `baz`,\n  and as such the model is invalid regarding the `depends_on` constraint of `zot`.\n- If the profiles `debug` and `test` are enabled, the model contains all services; `foo`, `bar`, `baz` and `zot`.\n- If Compose is executed with `bar` as the explicit service to run, `bar` and the `test` profile\n  are active even if `test` profile is not enabled.\n- If Compose is executed with `baz` as the explicit service to run, the service `baz` and the\n  profile `test` are active and `bar` is pulled in by the `depends_on` constraint.\n- If Compose is executed with `zot` as the explicit service to run, again the model is\n  invalid regarding the `depends_on` constraint of `zot`, since `zot` and `bar` have no common `profiles`\n  listed.\n- If Compose is executed with `zot` as the explicit service to run and profile `test` is enabled,\n  profile `debug` is automatically enabled and service `bar` is pulled in as a dependency starting both\n  services `zot` and `bar`.\n\nSee how you can use `profiles` in [Docker Compose](https://docs.docker.com/compose/profiles/).\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.228515625,
          "content": "# Changelog\n\n- Allow use of `x-` extension fields everywhere [#18](https://github.com/compose-spec/compose-spec/pull/18)\n- (re)introduce `depends_on.condition` from v2 format [#72](https://github.com/compose-spec/compose-spec/pull/72)"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.048828125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.1875,
          "content": "# Contributing\n\nContributions should be made via pull requests. Pull requests will be reviewed\nby two or more maintainers and merged when acceptable.\n\nThe goal of the Compose Specification is to be the simplest cloud and platform\nagnostic way of defining container based applications. A developer should be\nable to develop and debug an application on their local system before\nconfidently deploying it to a production platform– cloud or otherwise. The\nformat will be portable across container platforms by providing a high level\nabstraction for how the containers are built, deployed, networked, and\nconfigured.\n\nWhen proposing features as part of the Compose Specification, changes should be\nfocused towards features which enable developers as part of their\n[inner loop](https://docs.microsoft.com/en-us/dotnet/architecture/containerized-lifecycle/design-develop-containerized-apps/docker-apps-inner-loop-workflow)\nand not focused on operator controls.\nSome features may benefit the container ecosystem, however, they may not be\nappropriate for a first class feature in Compose.\n\n## Successful Changes\n\nWe ask that contributors read the [Compose Vision](VISION.md) to ensure that\nproposed changes are aligned with the objectives of the Compose project.\n\nTo help maintainers understand what user or developer problem needs to be\nsolved, the first step to a contribution is usually submitting an issue. A well\nwritten issue is one that clearly outlines the developer or user problem that\nneeds to be solved along with a list of requirements for resolution of the\nproblem. If there are multiple possible solutions to the problem, these can be\noutlined in the issue. Once consensus is reached on how to resolve the issue, a\npull request can be created.\n\nPull requests that propose minor changes or improvements may be submitted\nwithout an associated issue or discussion.\n\nFor large or high impact changes, contributors can reach out to maintainers\nbefore starting work. This will ensure that contributors and maintainers are\naligned and increase the chance that the change is accepted.\n\n## Commit Messages\n\nCommit messages should follow best practices and explain the context of the\nproblem and how it was solved-- including any caveats or follow up changes\nrequired. They should tell the story of the change and provide readers an\nunderstanding of what led to it.\n\n[How to Write a Git Commit Message](https://cbea.ms/git-commit/)\nprovides a good guide for how to do so.\n\nIn practice, the best approach to maintaining a nice commit message is to\nleverage a `git add -p` and `git commit --amend` to formulate a solid\nchange set. This allows one to piece together a change, as information becomes\navailable.\n\nIf you squash a series of commits, don't just submit that. Re-write the commit\nmessage, as if the series of commits was a single stroke of brilliance.\n\nThat said, there is no requirement to have a single commit for a pull request,\nas long as each commit tells the story. For example, if there is a feature that\nrequires a package, it might make sense to have the package in a separate commit\nthen have a subsequent commit that uses it.\n\nRemember, you're telling part of the story with the commit message. Don't make\nyour chapter weird.\n\n## Sign your work\n\nThe sign-off is a simple line at the end of the explanation for the patch. Your\nsignature certifies that you wrote the patch or otherwise have the right to pass\nit on as an open-source patch. The rules are pretty simple: if you can certify\nthe below (from [developercertificate.org](https://developercertificate.org/)):\n\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\nThen you just add a line to every git commit message:\n\n    Signed-off-by: Joe Smith <joe.smith@email.com>\n\nUse your real name (sorry, no pseudonyms or anonymous contributions.)\n\nIf you set your `user.name` and `user.email` git configs, you can sign your\ncommit automatically with `git commit -s`.\n\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.390625,
          "content": "# syntax=docker/dockerfile:1\n\nFROM node:16.1 as generator\nRUN npm install -g @adobe/jsonschema2md\nCOPY schema /schema\nRUN jsonschema2md -d /schema/ -e json\n\nFROM scratch as docs\nCOPY --from=generator /out /\n\nFROM --platform=${BUILDPLATFORM} alpine as spec-build\nWORKDIR /src\nCOPY *.md /src\nRUN <<EOT\n  set -e\n  cat head.md > spec.md\n  cat 01-status.md >> spec.md\n  cat 02-model.md >> spec.m >> spec.md\n  cat 03-compose-file.md >> spec.md\n  cat 04-version-and-name.md >> spec.md\n  cat 05-services.md >> spec.md\n  cat 06-networks.md >> spec.md\n  cat 07-volumes.md >> spec.md\n  cat 08-configs.md >> spec.md\n  cat 09-secrets.md >> spec.md\n  cat 10-fragments.md >> spec.md\n  cat 11-extension.md >> spec.md\n  cat 12-interpolation.md >> spec.md\n  cat 13-merge.md >> spec.md\n  cat 14-include.md >> spec.md\n  cat 15-profiles.md >> spec.md\n\n  mkdir /out\n  cp spec.md /out\nEOT\n\nFROM scratch AS spec-update\nCOPY --from=spec-build /out /out\n\nFROM --platform=${BUILDPLATFORM} alpine as spec-validate\nRUN apk add --no-cache rsync git\nWORKDIR /src\nCOPY --from=spec-build /out /out\nRUN --mount=target=/context \\\n    --mount=target=.,type=tmpfs <<EOT\n   set -e\n   rsync -a /context/. .\n   git add -A\n   rm spec.md\n   cp  /out/spec.md ./spec.md\n   if [ -n \"$(git status --porcelain -- ./spec.md)\" ]; then\n     echo >&2 'ERROR: Spec result differs. Please update with \"make spec\"'\n     git status --porcelain -- ./spec.md\n     exit 1\n   fi\nEOT\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 6.658203125,
          "content": "# Compose Specification Project Governance\n\nFor specific guidance on practical contribution steps for the Compose Spec\nplease see our [CONTRIBUTING.md](./CONTRIBUTING.md) guide.\n\n## Maintainership\n\nThere are different types of maintainers, with different responsibilities, but\nall maintainers have 3 things in common:\n\n1) They share responsibility in the project's success.\n2) They have made a long-term, recurring time investment to improve the project.\n3) They spend that time doing whatever needs to be done, not necessarily what\nis the most interesting or fun.\n\nMaintainers are often under-appreciated, because their work is harder to\nappreciate.\nIt's easy to appreciate a really cool and technically advanced feature.\nIt's harder\nto appreciate the absence of bugs, the slow but steady improvement in stability,\nor the reliability of a release process. But those things distinguish a good\nproject from a great one.\n\n## Reviewers\n\nA reviewer is a core role within the project.\nThey share in reviewing issues and pull requests and their LGTM counts towards\nthe required LGTM count to merge a code change into the project.\n\nReviewers are part of the organization but do not have write access.\nBecoming a reviewer is a core aspect in the journey to becoming a maintainer.\n\n## Adding maintainers\n\nMaintainers are first and foremost contributors that have shown they are\ncommitted to the long term success of a project. Contributors wanting to become\nmaintainers are expected to be deeply involved in contributing code, pull\nrequest review, and triage of issues in the project for more than three months.\n\nJust contributing does not make you a maintainer, it is about building trust\nwith the current maintainers of the project and being a person that they can\ndepend on and trust to make decisions in the best interest of the project.\n\nPeriodically, the existing maintainers curate a list of contributors that have\nshown regular activity on the project over the prior months. From this list,\nmaintainer candidates are selected and proposed on the maintainers mailing list.\n\nAfter a candidate has been announced on the maintainers mailing list, the\nexisting maintainers are given five business days to discuss the candidate,\nraise objections and cast their vote. Votes may take place on the mailing list\nor via pull request comment. Candidates must be approved by at least 66% of the\ncurrent maintainers by adding their vote on the mailing list. The reviewer role\nhas the same process but only requires 33% of current maintainers. Only\nmaintainers of the repository that the candidate is proposed for are allowed to\nvote.\n\nIf a candidate is approved, a maintainer will contact the candidate to invite\nthe candidate to open a pull request that adds the contributor to the\nMAINTAINERS file. The voting process may take place inside a pull request if a\nmaintainer has already discussed the candidacy with the candidate and a\nmaintainer is willing to be a sponsor by opening the pull request. The candidate\nbecomes a maintainer once the pull request is merged.\n\n## Stepping down policy\n\nLife priorities, interests, and passions can change. If you're a maintainer but\nfeel you must remove yourself from the list, inform other maintainers that you\nintend to step down, and if possible, help find someone to pick up your work.\nAt the very least, ensure your work can be continued where you left off.\n\nAfter you've informed other maintainers, create a pull request to remove\nyourself from the MAINTAINERS file.\n\n## Removal of inactive maintainers\n\nSimilar to the procedure for adding new maintainers, existing maintainers can\nbe removed from the list if they do not show significant activity on the\nproject. Periodically, the maintainers review the list of maintainers and their\nactivity over the last three months.\n\nIf a maintainer has shown insufficient activity over this period, a neutral\nperson will contact the maintainer to ask if they want to continue being\na maintainer. If the maintainer decides to step down as a maintainer, they\nopen a pull request to be removed from the MAINTAINERS file.\n\nIf the maintainer wants to remain a maintainer, but is unable to perform the\nrequired duties they can be removed with a vote of at least 66% of\nthe current maintainers. An e-mail is sent to the\nmailing list, inviting maintainers of the project to vote. The voting period is\nfive business days. Issues related to a maintainer's performance should be\ndiscussed with them among the other maintainers so that they are not surprised\nby a pull request removing them.\n\n## How are decisions made?\n\nThe Compose Specification is an open-source project with an open design\nphilosophy.\nThis means that the repository is the source of truth for EVERY aspect of the\nproject, including its philosophy, design, road map, and APIs. *If it's part of\nthe project, it's in the repo. If it's in the repo, it's part of the project.*\n\nAs a result, all decisions can be expressed as changes to the repository. An\nimplementation change is a change to the source code. An API change is a change\nto the API specification. A philosophy change is a change to the philosophy\nmanifesto, and so on.\n\nAll decisions affecting The Compose Specificiation, big and small, follow the\nsame 3 steps:\n\n* Step 1: Open a pull request. Anyone can do this.\n* Step 2: Discuss the pull request. Anyone can do this.\n* Step 3: Merge or refuse the pull request. Who does this depends on the nature\nof the pull request and which areas of the project it affects.\n\n## Helping contributors with the DCO\n\nThe [DCO or `Sign your work`](./CONTRIBUTING.md#sign-your-work) requirement is\nnot intended as a roadblock or speed bump.\n\nSome Compose Specificaiton contributors are not as familiar with `git`, or have\nused a web based editor, and thus asking them to `git commit --amend -s` is not\nthe best way forward.\n\nIn this case, maintainers can update the commits based on clause (c) of the DCO.\nThe most trivial way for a contributor to allow the maintainer to do this, is to\nadd a DCO signature in a pull requests's comment, or a maintainer can simply\nnote that the change is sufficiently trivial that it does not substantially\nchange the existing contribution - i.e., a spelling change.\n\nWhen you add someone's DCO, please also add your own to keep a log.\n\n## I'm a maintainer. Should I make pull requests too?\n\nYes. Nobody should ever push to master directly. All changes should be\nmade through a pull request.\n\n## Conflict Resolution\n\nIf you have a technical dispute that you feel has reached an impasse with a\nsubset of the community, any contributor may open an issue, specifically\ncalling for a resolution vote of the current core maintainers to resolve the\ndispute.\nThe same voting quorums required (2/3) for adding and removing maintainers\nwill apply to conflict resolution.\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.0810546875,
          "content": "source \"https://rubygems.org\"\ngem \"github-pages\", \"~> 212\", group: :jekyll_plugins\n"
        },
        {
          "name": "Gemfile.lock",
          "type": "blob",
          "size": 7.0966796875,
          "content": "GEM\n  remote: https://rubygems.org/\n  specs:\n    activesupport (6.0.6.1)\n      concurrent-ruby (~> 1.0, >= 1.0.2)\n      i18n (>= 0.7, < 2)\n      minitest (~> 5.1)\n      tzinfo (~> 1.1)\n      zeitwerk (~> 2.2, >= 2.2.2)\n    addressable (2.8.0)\n      public_suffix (>= 2.0.2, < 5.0)\n    coffee-script (2.4.1)\n      coffee-script-source\n      execjs\n    coffee-script-source (1.11.1)\n    colorator (1.1.0)\n    commonmarker (0.17.13)\n      ruby-enum (~> 0.5)\n    concurrent-ruby (1.2.0)\n    dnsruby (1.61.5)\n      simpleidn (~> 0.1)\n    em-websocket (0.5.2)\n      eventmachine (>= 0.12.9)\n      http_parser.rb (~> 0.6.0)\n    ethon (0.12.0)\n      ffi (>= 1.3.0)\n    eventmachine (1.2.7)\n    execjs (2.7.0)\n    faraday (1.3.0)\n      faraday-net_http (~> 1.0)\n      multipart-post (>= 1.2, < 3)\n      ruby2_keywords\n    faraday-net_http (1.0.1)\n    ffi (1.14.2)\n    forwardable-extended (2.6.0)\n    gemoji (3.0.1)\n    github-pages (212)\n      github-pages-health-check (= 1.17.0)\n      jekyll (= 3.9.0)\n      jekyll-avatar (= 0.7.0)\n      jekyll-coffeescript (= 1.1.1)\n      jekyll-commonmark-ghpages (= 0.1.6)\n      jekyll-default-layout (= 0.1.4)\n      jekyll-feed (= 0.15.1)\n      jekyll-gist (= 1.5.0)\n      jekyll-github-metadata (= 2.13.0)\n      jekyll-mentions (= 1.6.0)\n      jekyll-optional-front-matter (= 0.3.2)\n      jekyll-paginate (= 1.1.0)\n      jekyll-readme-index (= 0.3.0)\n      jekyll-redirect-from (= 0.16.0)\n      jekyll-relative-links (= 0.6.1)\n      jekyll-remote-theme (= 0.4.2)\n      jekyll-sass-converter (= 1.5.2)\n      jekyll-seo-tag (= 2.7.1)\n      jekyll-sitemap (= 1.4.0)\n      jekyll-swiss (= 1.0.0)\n      jekyll-theme-architect (= 0.1.1)\n      jekyll-theme-cayman (= 0.1.1)\n      jekyll-theme-dinky (= 0.1.1)\n      jekyll-theme-hacker (= 0.1.2)\n      jekyll-theme-leap-day (= 0.1.1)\n      jekyll-theme-merlot (= 0.1.1)\n      jekyll-theme-midnight (= 0.1.1)\n      jekyll-theme-minimal (= 0.1.1)\n      jekyll-theme-modernist (= 0.1.1)\n      jekyll-theme-primer (= 0.5.4)\n      jekyll-theme-slate (= 0.1.1)\n      jekyll-theme-tactile (= 0.1.1)\n      jekyll-theme-time-machine (= 0.1.1)\n      jekyll-titles-from-headings (= 0.5.3)\n      jemoji (= 0.12.0)\n      kramdown (= 2.3.0)\n      kramdown-parser-gfm (= 1.1.0)\n      liquid (= 4.0.3)\n      mercenary (~> 0.3)\n      minima (= 2.5.1)\n      nokogiri (>= 1.10.4, < 2.0)\n      rouge (= 3.26.0)\n      terminal-table (~> 1.4)\n    github-pages-health-check (1.17.0)\n      addressable (~> 2.3)\n      dnsruby (~> 1.60)\n      octokit (~> 4.0)\n      public_suffix (>= 2.0.2, < 5.0)\n      typhoeus (~> 1.3)\n    html-pipeline (2.14.0)\n      activesupport (>= 2)\n      nokogiri (>= 1.4)\n    http_parser.rb (0.6.0)\n    i18n (0.9.5)\n      concurrent-ruby (~> 1.0)\n    jekyll (3.9.0)\n      addressable (~> 2.4)\n      colorator (~> 1.0)\n      em-websocket (~> 0.5)\n      i18n (~> 0.7)\n      jekyll-sass-converter (~> 1.0)\n      jekyll-watch (~> 2.0)\n      kramdown (>= 1.17, < 3)\n      liquid (~> 4.0)\n      mercenary (~> 0.3.3)\n      pathutil (~> 0.9)\n      rouge (>= 1.7, < 4)\n      safe_yaml (~> 1.0)\n    jekyll-avatar (0.7.0)\n      jekyll (>= 3.0, < 5.0)\n    jekyll-coffeescript (1.1.1)\n      coffee-script (~> 2.2)\n      coffee-script-source (~> 1.11.1)\n    jekyll-commonmark (1.3.1)\n      commonmarker (~> 0.14)\n      jekyll (>= 3.7, < 5.0)\n    jekyll-commonmark-ghpages (0.1.6)\n      commonmarker (~> 0.17.6)\n      jekyll-commonmark (~> 1.2)\n      rouge (>= 2.0, < 4.0)\n    jekyll-default-layout (0.1.4)\n      jekyll (~> 3.0)\n    jekyll-feed (0.15.1)\n      jekyll (>= 3.7, < 5.0)\n    jekyll-gist (1.5.0)\n      octokit (~> 4.2)\n    jekyll-github-metadata (2.13.0)\n      jekyll (>= 3.4, < 5.0)\n      octokit (~> 4.0, != 4.4.0)\n    jekyll-mentions (1.6.0)\n      html-pipeline (~> 2.3)\n      jekyll (>= 3.7, < 5.0)\n    jekyll-optional-front-matter (0.3.2)\n      jekyll (>= 3.0, < 5.0)\n    jekyll-paginate (1.1.0)\n    jekyll-readme-index (0.3.0)\n      jekyll (>= 3.0, < 5.0)\n    jekyll-redirect-from (0.16.0)\n      jekyll (>= 3.3, < 5.0)\n    jekyll-relative-links (0.6.1)\n      jekyll (>= 3.3, < 5.0)\n    jekyll-remote-theme (0.4.2)\n      addressable (~> 2.0)\n      jekyll (>= 3.5, < 5.0)\n      jekyll-sass-converter (>= 1.0, <= 3.0.0, != 2.0.0)\n      rubyzip (>= 1.3.0, < 3.0)\n    jekyll-sass-converter (1.5.2)\n      sass (~> 3.4)\n    jekyll-seo-tag (2.7.1)\n      jekyll (>= 3.8, < 5.0)\n    jekyll-sitemap (1.4.0)\n      jekyll (>= 3.7, < 5.0)\n    jekyll-swiss (1.0.0)\n    jekyll-theme-architect (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-cayman (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-dinky (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-hacker (0.1.2)\n      jekyll (> 3.5, < 5.0)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-leap-day (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-merlot (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-midnight (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-minimal (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-modernist (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-primer (0.5.4)\n      jekyll (> 3.5, < 5.0)\n      jekyll-github-metadata (~> 2.9)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-slate (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-tactile (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-theme-time-machine (0.1.1)\n      jekyll (~> 3.5)\n      jekyll-seo-tag (~> 2.0)\n    jekyll-titles-from-headings (0.5.3)\n      jekyll (>= 3.3, < 5.0)\n    jekyll-watch (2.2.1)\n      listen (~> 3.0)\n    jemoji (0.12.0)\n      gemoji (~> 3.0)\n      html-pipeline (~> 2.2)\n      jekyll (>= 3.0, < 5.0)\n    kramdown (2.3.0)\n      rexml\n    kramdown-parser-gfm (1.1.0)\n      kramdown (~> 2.0)\n    liquid (4.0.3)\n    listen (3.4.1)\n      rb-fsevent (~> 0.10, >= 0.10.3)\n      rb-inotify (~> 0.9, >= 0.9.10)\n    mercenary (0.3.6)\n    minima (2.5.1)\n      jekyll (>= 3.5, < 5.0)\n      jekyll-feed (~> 0.9)\n      jekyll-seo-tag (~> 2.1)\n    minitest (5.17.0)\n    multipart-post (2.1.1)\n    nokogiri (1.16.5-x86_64-linux)\n      racc (~> 1.4)\n    octokit (4.20.0)\n      faraday (>= 0.9)\n      sawyer (~> 0.8.0, >= 0.5.3)\n    pathutil (0.16.2)\n      forwardable-extended (~> 2.6)\n    public_suffix (4.0.6)\n    racc (1.7.3)\n    rb-fsevent (0.10.4)\n    rb-inotify (0.10.1)\n      ffi (~> 1.0)\n    rexml (3.3.9)\n    rouge (3.26.0)\n    ruby-enum (0.9.0)\n      i18n\n    ruby2_keywords (0.0.4)\n    rubyzip (2.3.0)\n    safe_yaml (1.0.5)\n    sass (3.7.4)\n      sass-listen (~> 4.0.0)\n    sass-listen (4.0.0)\n      rb-fsevent (~> 0.9, >= 0.9.4)\n      rb-inotify (~> 0.9, >= 0.9.7)\n    sawyer (0.8.2)\n      addressable (>= 2.3.5)\n      faraday (> 0.8, < 2.0)\n    simpleidn (0.2.1)\n      unf (~> 0.1.4)\n    terminal-table (1.8.0)\n      unicode-display_width (~> 1.1, >= 1.1.1)\n    thread_safe (0.3.6)\n    typhoeus (1.4.0)\n      ethon (>= 0.9.0)\n    tzinfo (1.2.11)\n      thread_safe (~> 0.1)\n    unf (0.1.4)\n      unf_ext\n    unf_ext (0.0.7.7)\n    unicode-display_width (1.7.0)\n    zeitwerk (2.6.6)\n\nPLATFORMS\n  x86_64-linux\n\nDEPENDENCIES\n  github-pages (~> 212)\n\nBUNDLED WITH\n   2.2.11\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.51171875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2013-2018 Docker, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.7021484375,
          "content": "DRIVE_PREFIX?=\nifeq ($(OS), Windows_NT)\n\tDRIVE_PREFIX=C:\nendif\n.PHONY: spec\nspec: ## generate spec.md file\n\t$(eval $@_TMP_OUT := $(shell mktemp -d -t composespec-output.XXXXXXXXXX))\n\tdocker buildx build . \\\n\t--output type=local,dest=$($@_TMP_OUT) \\\n\t-f ./Dockerfile \\\n\t--target spec-update\n\trm -f spec.md\n\tcp -R \"$(DRIVE_PREFIX)$($@_TMP_OUT)\"/out/spec.md ./spec.md\n\trm -rf \"$(DRIVE_PREFIX)$($@_TMP_OUT)\"/*\n\n.PHONY: validate-spec\nvalidate-spec: ## validate the spec.md does not change\n\t@docker buildx build . \\\n\t-f ./Dockerfile \\\n\t--target spec-validate\n\n.PHONY: sync-spec\nsync-spec:\n\tcurl -L https://raw.githubusercontent.com/compose-spec/compose-go/refs/heads/main/schema/compose-spec.json -o schema/compose-spec.json\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.0732421875,
          "content": "The Compose Specification\nCopyright 2020 The Compose Specification Authors\n"
        },
        {
          "name": "OWNERS.md",
          "type": "blob",
          "size": 0.1181640625,
          "content": "maintainers:\n- ndeloof\n- hangyan\n- justincormack \n- EricHripko\n- ulyssessouza\n- glours\n- milas\n- laurazard\n- aevesdocker\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.9140625,
          "content": "# Compose Specification\n{:.no_toc}\n\nThe Compose specification establishes a standard for the definition of\nmulti-container platform-agnostic applications. The specification can be found\n[here](00-overview.md).\n\n* ToC\n{:toc}\n\n## Use cases\n\nTo provide more context on the Compose specification the following section gives\nexample use cases for each part of the specification.\n\n### Development tools\n\nDevelopers can use a Compose file to specify a container-based application\nthat will run as a set of containers on a local container engine. The Compose\nimplementation in this scenario could offer some specific features (local\nvolume binding, live-reload) to better address development needs. The\napplication definition and Compose model is the same used as that used for other\nuse cases. Platform features expected by the specification (like configs and\nsecrets) can be mocked with local resources.\n\n### Kubernetes deployment\n\nKubernetes container orchestration relies on a set of abstract concepts and\nAPIs to manage networking services, container deployments and their lifecycles.\nWhile this offers flexibility to address many operator use cases, it makes\nsimple use cases, like the developer use case, more complicated to express than\nthey need to be. Projects like [Kompose](https://github.com/kubernetes/kompose)\nor [Okteto Stacks](https://okteto.com/docs/reference/stacks) show how the\nsimpler Compose model can be translated into Kubernetes API payloads and make\nthe Compose file the source of truth for development and deployment.\n\n### Cloud providers\n\nSome cloud providers offer proprietary container hosting solutions based on\nin-house orchestrators and custom APIs. The Compose specification offers a\nsimple model that can be mapped to these hosting solutions so that users can\nreuse Compose files that they already have and so that they do not need to learn\ncustom configuration file formats. Platform specific features can be added\neither using Compose extensions or a dedicated configuration file along side the\nCompose file.\n\n## Contributing\n\nDevelopment happens on GitHub for the specification. Issues are used to track\nbugs and actionable items. Longer discussions can happen on the\n[mailing list](https://groups.google.com/forum/#!forum/compose-spec).\n\nThe specification and code is licensed under the Apache 2.0 license found in the\n[LICENSE](LICENSE) file.\n\n## Implementations\n\n[Docker Compose](https://github.com/docker/compose) is the Reference Implementation of the Compose Specification.\n\nCompose Specification is also implemented by:\n\n* [Kompose](https://github.com/kubernetes/kompose)\n* [Nerdctl](https://github.com/containerd/nerdctl)\n* [Okteto Stacks](https://okteto.com/docs/reference/stacks)\n* [Docker Cloud Integrations](https://github.com/docker/compose-cli)\n* [Podman Compose](https://github.com/containers/podman-compose)\n\n| Metadata |                  |\n| -------- | ---------------: |\n| Status   | Work in progress |\n| Created  | 2020-01-02       |\n"
        },
        {
          "name": "VISION.md",
          "type": "blob",
          "size": 5.6572265625,
          "content": "## Vision\n\n# Purpose of the Vision\n\nThe purpose of this document is to set out the highest level of guidance for\nCompose as an open source specification.\nThe objective is to inform contributor partners about the highest level goals\nof Compose and what sorts of feature areas we believe would fit with the future\nof Compose.\n\nGuard rails and guidance need to be in place for three types of changes:\nvision, scope and spec.\nWe expect frequent changes to the spec as users contribute, infrequent changes\nto scope as we assess new features and very rare changes to the overall vision.\n\n<img src=\"images/vision_pyramid.png\" width=\"256\">\n\nFor contributors adding features or making more fundamental changes, this\ndocument should act as guidance as to whether the Compose specification is the\nright place for these.\nIt can also act as a guide to allow people to assess if this project is\nsomething they wish to contribute towards and help maintainers with. The\ndocument should also be seen as a high level source of the truth to reference\nwhen something is out of scope.\n\n# Background\n\nToday among developers, Compose is a widely adopted format with over 650k\nCompose files on Github (as of January 2020) and beloved by its users as a way\nto define multi-container applications.\nFinding a way to further enable the use of Compose with multiple vendors, such\nas cloud providers, and giving interested vendors and our users a way to input\ninto the future of Compose would benefit the wider community of new and\nexisting users.\nTo achieve this, Docker separated the Compose format specification out of the\nDocker code base as a standalone specification.\n\nCompose is already adopted in the broader community as a good format for\ndeclaring container applications. Notably AWS have adopted v2 of the format as\na way to define applications for their ECS platform and the Kompose project\nconverts Compose files to Kubernetes YAML.\nAllowing them and others to contribute to the specification, thus giving them\nownership of it, will ensure more platforms support the Compose format and it\nwill mitigate platform provider risk for adopting the format.\n\n# The Compose Vision\n\nIn a world of format sprawl, the Compose format will be the simplest cloud and\nplatform agnostic way of defining container based applications.\nA developer should be able to develop and debug an application on their local\nsystem before confidently deploying it to a production platform– cloud or\notherwise.\nThe format will be portable across container platforms by providing a high\nlevel abstraction for how the containers are built, deployed, connected, and\nconfigured.\n\nAll developer tools should reduce the number of boring, mundane and repetitive\ntasks that developers have to do so they have more time to create.\nDevelopers love Compose as it is the simplest way to ‘string containers\ntogether’ to test a set of components together as an application and to see how\nthey function.\nOur goal is for Compose to continue to provide the best controls for developer\ncontainer scripting and creation of logical applications.\n\nWe are not building a tool to compete with Helm Charts or Kube YAML, but a\nspecification format to embrace common patterns and a high level definition for\ncontainer-based applications.\nHelm or other tools could then rely on this format to make their user\nexperiences simpler and portable, while still providing more advanced\ncapabilities for specific scenarios.\nA set of libraries and a reference implementation will be provided in order to\nenable tools to more easily be built on top of the specification, facilitate\neasy experimentation, and provide of validation of implementations.\n\nThe format wants to be a living specification that evolves over time and\nprovides a way for tool builders to experiment with new ideas.\n\n## In Scope\n\nThe purpose of this section is to set out the areas of functionality that\nCompose is set to target.\nThe scope should be seen as a whitelist. It can be changed if all maintainers\nof the project agree on the change.\n\nThere are four areas of the specification:\n* Core: Concerned with the structure of the application\n* Build: Concerned with how the application containers images are built\n* Deploy: Concerned with the environment where the application is deployed\n* Extension: Platform specific components and testing area\n* Out: Scope areas Compose will specifically avoid or not look to address\n\n**Name**|**Description**|**Area**|**Reason**\n:-----|:-----|:-----|:-----\nService list|List of services that the developer wishes to deploy or work with|Core|Logical structure of the application\nInternal connectivity |Which services can communicate with each other|Core|Logical structure of the application\nExternal connectivity |Which application services are exposed and how|Core|Logical structure of the application\nVolumes|How and where data is stored|Core|Logical structure of the application\nLabelling|Make parts of application identifiable|Core|Ease of user/structure of application \nContainer image build|Allow scripting of container image build|Build|Part of developer inner loop\nContainer runtime configuration|\"Entrypoint, environment, healthchecks, etc.\"|Deploy|\nService configuration|Infrastructure specific configuration stored in the orchestrator|Deploy|\nService secrets|Infrastructure specific secrets stored in the orchestrator|Deploy|\nDeployment strategy|How services are deployed (e.g.: placement, affinity, etc.)|Deploy|\nProduction runtime service parameters|Replicas, CPU/memory limits, etc.|Deploy|\nNon-container workloads|Other Cloud native components |Extension|Not containers but stateless cloud native component\nLogging|Where logs are kept|Out|Production Ops concern\nPlatform infrastructure|\"Cluster setup, DBaaS, etc.\"|Out|Production Ops concern\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.4228515625,
          "content": "theme: jekyll-theme-cayman\ntitle: Compose Specification\ndescription: >\n  A specification for developer-centric application definition used in Cloud\n  Native Applications.\nmarkdown: kramdown\ndefaults:\n  - scope:\n      path: \"\"\n    values:\n      layout: \"page\"\ngithub:\n  repository_name: Compose Specification\n  owner_url: https://github.com/compose-spec/compose-spec/blob/master/OWNERS.md\n  owner_name: these members of the community\n"
        },
        {
          "name": "_layouts",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.md",
          "type": "blob",
          "size": 18.927734375,
          "content": "# Compose Build Specification\n\n> **Note:** \n>\n> Build is an optional part of the Compose Specification\n\nA Compose implementation which focuses on running an application on a local machine needs to also support (re)building the application from source. The Compose Build Specification lets you define the build process within a Compose file\nin a portable way.\n\n`build` can be either specified as a single string defining a context path, or as a detailed build definition.\n\nIn the former case, the whole path is used as a Docker context to execute a Docker build, looking for a canonical\n`Dockerfile` at the root of the directory. The path can be absolute or relative. If it is relative, it is resolved\nfrom the Compose file's parent folder. If it is absolute, the path prevents the Compose file from being portable so Compose displays a warning. \n\nIn the later case, build arguments can be specified, including an alternate `Dockerfile` location. The path can be absolute or relative. If it is relative, it is resolved\nfrom the Compose file's parent folder. If it is absolute, the path prevents the Compose file from being portable so Compose displays a warning..\n\n## `build` vs `image`\n\nWhen Compose is confronted with both a `build` subsection for a service and an `image` attribute. It follows the rules defined by the [`pull_policy`](05-services.md#pull_policy) attribute. \n\nIf `pull_policy` is missing in the service definition, Compose attempts to pull the image first and then builds from source if the image isn't found in the registry or platform cache. \n\nCompose may offer options to customize this behaviour by user\nrequest.\n\n## Publishing built images\n\nCompose with `build` support offers an option to push built images to a registry. When doing so, it doesn't try to push service images without an `image` attribute. Compose warns you about the missing `image` attribute which prevents images being pushed.\n\nA Compose implementation may offer a mechanism to compute an `image` attribute for services when not explicitly\ndeclared in a yaml file. In such cases, the resulting Compose configuration is considered to have a valid `image`\nattribute, whenever the actual raw yaml file doesn't explicitly declare one.\n\n## Illustrative example\n\nThe following example illustrates Compose Build Specification concepts with a concrete sample application. The sample is non-normative.\n\n```yaml\nservices:\n  frontend:\n    image: example/webapp\n    build: ./webapp\n\n  backend:\n    image: example/database\n    build:\n      context: backend\n      dockerfile: ../backend.Dockerfile\n\n  custom:\n    build: ~/custom\n```\n\nWhen used to build service images from source, the Compose file creates three Docker images:\n\n* `example/webapp`: A Docker image is built using `webapp` sub-directory, within the Compose file's parent folder, as the Docker build context. Lack of a `Dockerfile` within this folder throws an error.\n* `example/database`: A Docker image is built using `backend` sub-directory within the Compose file parent folder. `backend.Dockerfile` file is used to define build steps, this file is searched relative to the context path, which means `..` resolves to the Compose file parent folder, so `backend.Dockerfile` is a sibling file.\n* A Docker image is built using the `custom` directory with the user's HOME as the Docker context. Compose displays a warning about the non-portable path used to build image.\n\nOn push, both `example/webapp` and `example/database` Docker images are pushed to the default registry. The `custom` service image is skipped as no `image` attribute is set and Compose displays a warning about this missing attribute.\n\n## Attributes\n\nThe `build` subsection defines configuration options that are applied by Compose to build Docker images from source.\n`build` can be specified either as a string containing a path to the build context or as a detailed structure:\n\nUsing the string syntax, only the build context can be configured as either:\n- A relative path to the Compose file's parent folder. This path must be a directory and must contain a `Dockerfile`\n\n  ```yml\n  services:\n    webapp:\n      build: ./dir\n  ```\n\n- A git repository URL. Git URLs accept context configuration in their fragment section, separated by a colon (`:`).\nThe first part represents the reference that Git checks out, and can be either a branch, a tag, or a remote reference.\nThe second part represents a subdirectory inside the repository that is used as a build context.\n\n  ```yml\n  services:\n    webapp:\n      build: https://github.com/mycompany/example.git#branch_or_tag:subdirectory\n  ```\n\nAlternatively `build` can be an object with fields defined as follows:\n\n### context\n\n`context` defines either a path to a directory containing a Dockerfile, or a URL to a git repository.\n\nWhen the value supplied is a relative path, it is interpreted as relative to the project directory.\nCompose warns you about the absolute path used to define the build context as those prevent the Compose file\nfrom being portable.\n\n```yml\nbuild:\n  context: ./dir\n```\n\n```yml\nservices:\n  webapp:\n    build: https://github.com/mycompany/webapp.git\n```\n\nIf not set explicitly, `context` defaults to project directory (`.`). \n\n### dockerfile\n\n`dockerfile` sets an alternate Dockerfile. A relative path is resolved from the build context.\nCompose warns you about the absolute path used to define the Dockerfile as it prevents Compose files\nfrom being portable.\n\nWhen set, `dockerfile_inline` attribute is not allowed and Compose\nrejects any Compose file having both set.\n\n```yml\nbuild:\n  context: .\n  dockerfile: webapp.Dockerfile\n```\n\n### dockerfile_inline\n\n[![Compose v2.17.0](https://img.shields.io/badge/compose-v2.17.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.17.0)\n\n`dockerfile_inline` defines the Dockerfile content as an inlined string in a Compose file. When set, the `dockerfile`\nattribute is not allowed and Compose rejects any Compose file having both set.\n\nUse of YAML multi-line string syntax is recommended to define the Dockerfile content:\n\n```yml\nbuild:\n  context: .\n  dockerfile_inline: |\n    FROM baseimage\n    RUN some command\n```\n\n\n### args\n\n`args` define build arguments, i.e. Dockerfile `ARG` values.\n\nUsing the following Dockerfile as an example:\n\n```Dockerfile\nARG GIT_COMMIT\nRUN echo \"Based on commit: $GIT_COMMIT\"\n```\n\n`args` can be set in the Compose file under the `build` key to define `GIT_COMMIT`. `args` can be set as a mapping or a list:\n\n```yml\nbuild:\n  context: .\n  args:\n    GIT_COMMIT: cdc3b19\n```\n\n```yml\nbuild:\n  context: .\n  args:\n    - GIT_COMMIT=cdc3b19\n```\n\nValues can be omitted when specifying a build argument, in which case its value at build time must be obtained by user interaction,\notherwise the build arg won't be set when building the Docker image.\n\n```yml\nargs:\n  - GIT_COMMIT\n```\n\n### ssh\n\n[![Compose v2.4.0](https://img.shields.io/badge/compose-v2.4.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.4.0)\n\n`ssh` defines SSH authentications that the image builder should use during image build (e.g., cloning private repository).\n\n`ssh` property syntax can be either:\n* `default`: Let the builder connect to the ssh-agent.\n* `ID=path`: A key/value definition of an ID and the associated path. It can be either a [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) file, or path to ssh-agent socket.\n\n```yaml\nbuild:\n  context: .\n  ssh:\n    - default   # mount the default ssh agent\n```\nor\n```yaml\nbuild:\n  context: .\n  ssh: [\"default\"]   # mount the default ssh agent\n```\n\nUsing a custom id `myproject` with path to a local SSH key:\n```yaml\nbuild:\n  context: .\n  ssh:\n    - myproject=~/.ssh/myproject.pem\n```\nThe image builder can then rely on this to mount the SSH key during build.\nFor illustration, [BuildKit extended syntax](https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/reference.md#run---mounttypessh) can be used to mount the SSH key set by ID and access a secured resource:\n\n`RUN --mount=type=ssh,id=myproject git clone ...`\n\n### cache_from\n\n`cache_from` defines a list of sources the image builder should use for cache resolution.\n\nCache location syntax follows the global format `[NAME|type=TYPE[,KEY=VALUE]]`. Simple `NAME` is actually a shortcut notation for `type=registry,ref=NAME`.\n\nCompose Build implementations may support custom types, the Compose Specification defines canonical types which must be supported:\n\n- `registry` to retrieve build cache from an OCI image set by key `ref`\n\n\n```yml\nbuild:\n  context: .\n  cache_from:\n    - alpine:latest\n    - type=local,src=path/to/cache\n    - type=gha\n```\n\nUnsupported caches are ignored and don't prevent you from building images.\n\n### cache_to\n\n[![Compose v2.4.0](https://img.shields.io/badge/compose-v2.4.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.4.0)\n\n\n`cache_to` defines a list of export locations to be used to share build cache with future builds.\n\n```yml\nbuild:\n  context: .\n  cache_to:\n   - user/app:cache\n   - type=local,dest=path/to/cache\n```\n\nCache target is defined using the same `type=TYPE[,KEY=VALUE]` syntax defined by [`cache_from`](#cache_from).\n\nUnsupported caches are ignored and don't prevent you from building images.\n\n### additional_contexts\n\n[![Compose v2.17.0](https://img.shields.io/badge/compose-v2.17.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.17.0)\n\n`additional_contexts` defines a list of named contexts the image builder should use during image build.\n\n`additional_contexts` can be a mapping or a list:\n\n```yml\nbuild:\n  context: .\n  additional_contexts:\n    - resources=/path/to/resources\n    - app=docker-image://my-app:latest\n    - source=https://github.com/myuser/project.git\n```\n\n```yml\nbuild:\n  context: .\n  additional_contexts:\n    resources: /path/to/resources\n    app: docker-image://my-app:latest\n    source: https://github.com/myuser/project.git\n```\n\nWhen used as a list, the syntax follows the `NAME=VALUE` format, where `VALUE` is a string. Validation beyond that\nis the responsibility of the image builder (and is builder specific). Compose supports at least\nabsolute and relative paths to a directory AND Git repository URLs, like [context](#context) does. Other context flavours\nmust be prefixed to avoid ambiguity with a `type://` prefix.\n\nCompose warns you if the image builder does not support additional contexts and may list\nthe unused contexts.\n\nIllustrative examples of how this is used in Buildx can be found\n[here](https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md#-additional-build-contexts---build-context).\n\n## entitlements\n\n[![Compose v2.27.0](https://img.shields.io/badge/compose-v2.27.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.27.0)\n\n `entitlements` defines extra privileged entitlements to be allowed during the build\n \n ```yaml\n entitlements:\n   - network.host\n   - security.insecure\n ```\n\n### extra_hosts\n\n`extra_hosts` adds hostname mappings at build-time. Use the same syntax as [extra_hosts](05-services.md#extra_hosts).\n\n```yml\nextra_hosts:\n  - \"somehost=162.242.195.82\"\n  - \"otherhost=50.31.209.229\"\n  - \"myhostv6=::1\"\n```\nIPv6 addresses can be enclosed in square brackets, for example:\n\n```yml\nextra_hosts:\n  - \"myhostv6=[::1]\"\n```\n\nThe separator `=` is preferred, but `:` can also be used. For example:\n[![Compose v2.24.1](https://img.shields.io/badge/compose-v2.24.1-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.24.1)\n\n```yml\nextra_hosts:\n  - \"somehost:162.242.195.82\"\n  - \"myhostv6:::1\"\n```\n\nCompose creates matching entry with the IP address and hostname in the container's network\nconfiguration, which means for Linux `/etc/hosts` will get extra lines:\n\n```\n162.242.195.82  somehost\n50.31.209.229   otherhost\n::1             myhostv6\n```\n\n### isolation\n\n`isolation` specifies a build’s container isolation technology. Like [isolation](05-services.md#isolation), supported values\nare platform specific.\n\n### privileged\n\n[![Compose v2.15.0](https://img.shields.io/badge/compose-v2.15.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.15.0)\n\n`privileged` configures the service image to build with elevated privileges. Support and actual impacts are platform specific.\n\n```yml\nbuild:\n  context: .\n  privileged: true\n```\n\n### labels\n\n`labels` add metadata to the resulting image. `labels` can be set either as an array or a map.\n\nIt's recommended that you use reverse-DNS notation to prevent your labels from conflicting with other software.\n\n```yml\nbuild:\n  context: .\n  labels:\n    com.example.description: \"Accounting webapp\"\n    com.example.department: \"Finance\"\n    com.example.label-with-empty-value: \"\"\n```\n\n```yml\nbuild:\n  context: .\n  labels:\n    - \"com.example.description=Accounting webapp\"\n    - \"com.example.department=Finance\"\n    - \"com.example.label-with-empty-value\"\n```\n\n### no_cache\n\n[![Compose v2.4.0](https://img.shields.io/badge/compose-v2.4.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.4.0)\n\n`no_cache` disables image builder cache and enforces a full rebuild from source for all image layers. This only\napplies to layers declared in the Dockerfile, referenced images COULD be retrieved from local image store whenever tag\nhas been updated on registry (see [pull](#pull)).\n\n### pull\n\n[![Compose v2.4.0](https://img.shields.io/badge/compose-v2.4.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.4.0)\n\n`pull` requires the image builder to pull referenced images (`FROM` Dockerfile directive), even if those are already\navailable in the local image store.\n\n### network\n\nSet the network containers connect to for the `RUN` instructions during build.\n\n```yaml\nbuild:\n  context: .\n  network: host\n```  \n\n```yaml\nbuild:\n  context: .\n  network: custom_network_1\n```\n\nUse `none` to disable networking during build:\n\n```yaml\nbuild:\n  context: .\n  network: none\n```\n\n### shm_size\n\n`shm_size` sets the size of the shared memory (`/dev/shm` partition on Linux) allocated for building Docker images. Specify\nas an integer value representing the number of bytes or as a string expressing a [byte value](11-extension.md#specifying-byte-values).\n\n```yml\nbuild:\n  context: .\n  shm_size: '2gb'\n```\n\n```yaml\nbuild:\n  context: .\n  shm_size: 10000000\n```\n\n### target\n\n`target` defines the stage to build as defined inside a multi-stage `Dockerfile`.\n\n```yml\nbuild:\n  context: .\n  target: prod\n```\n\n### secrets\n\n[![Compose v2.5.0](https://img.shields.io/badge/compose-v2.5.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.5.0)\n\n\n`secrets` grants access to sensitive data defined by [secrets](05-services.md#secrets) on a per-service build basis. Two\ndifferent syntax variants are supported: the short syntax and the long syntax.\n\nCompose reports an error if the secret isn't defined in the\n[`secrets`](09-secrets.md) section of this Compose file.\n\n#### Short syntax\n\nThe short syntax variant only specifies the secret name. This grants the\ncontainer access to the secret and mounts it as read-only to `/run/secrets/<secret_name>`\nwithin the container. The source name and destination mountpoint are both set\nto the secret name.\n\nThe following example uses the short syntax to grant the build of the `frontend` service\naccess to the `server-certificate` secret. The value of `server-certificate` is set\nto the contents of the file `./server.cert`.\n\n```yml\nservices:\n  frontend:\n    build:\n      context: .\n      secrets:\n        - server-certificate\nsecrets:\n  server-certificate:\n    file: ./server.cert\n```\n\n#### Long syntax\n\nThe long syntax provides more granularity in how the secret is created within\nthe service's containers.\n\n- `source`: The name of the secret as it exists on the platform.\n- `target`: The name of the file to be mounted in `/run/secrets/` in the\n  service's task containers. Defaults to `source` if not specified.\n- `uid` and `gid`: The numeric UID or GID that owns the file within\n  `/run/secrets/` in the service's task containers. Default value is USER running container.\n- `mode`: The [permissions](https://wintelguy.com/permissions-calc.pl) for the file to be mounted in `/run/secrets/`\n  in the service's task containers, in octal notation.\n  Default value is world-readable permissions (mode `0444`).\n  The writable bit must be ignored if set. The executable bit may be set.\n\nThe following example sets the name of the `server-certificate` secret file to `server.crt`\nwithin the container, sets the mode to `0440` (group-readable) and sets the user and group\nto `103`. The value of `server-certificate` secret is provided by the platform through a lookup and\nthe secret lifecycle not directly managed by Compose.\n\n```yml\nservices:\n  frontend:\n    build:\n      context: .\n      secrets:\n        - source: server-certificate\n          target: server.cert\n          uid: \"103\"\n          gid: \"103\"\n          mode: 0440\nsecrets:\n  server-certificate:\n    external: true\n```\n\nService builds may be granted access to multiple secrets. Long and short syntax for secrets may be used in the\nsame Compose file. Defining a secret in the top-level `secrets` must not imply granting any service build access to it.\nSuch grant must be explicit within service specification as [secrets](05-services.md#secrets) service element.\n\n### tags\n\n[![Compose v2.5.1](https://img.shields.io/badge/compose-v2.5.1-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.5.1)\n\n`tags` defines a list of tag mappings that must be associated to the build image. This list comes in addition to\nthe `image` [property defined in the service section](05-services.md#image)\n\n```yml\ntags:\n  - \"myimage:mytag\"\n  - \"registry/username/myrepos:my-other-tag\"\n```\n\n### ulimits\n\n[![Compose v2.23.1](https://img.shields.io/badge/compose-v2.23.1-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.23.1)\n\n`ulimits` overrides the default ulimits for a container. It's specified either as an integer for a single limit\nor as mapping for soft/hard limits.\n\n```yml\nservices:\n  frontend:\n    build:\n      context: .\n      ulimits:\n        nproc: 65535\n        nofile:\n          soft: 20000\n          hard: 40000 \n```\n\n### platforms\n\n[![Compose v2.10.0](https://img.shields.io/badge/compose-v2.10.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.10.0)\n\n`platforms` defines a list of target [platforms](05-services.md#platform).\n\n```yml\nbuild:\n  context: \".\"\n  platforms:\n    - \"linux/amd64\"\n    - \"linux/arm64\"\n```\n\nWhen the `platforms` attribute is omitted, Compose includes the service's platform\nin the list of the default build target platforms.\n\nWhen the `platforms` attribute is defined, Compose includes the service's\nplatform, otherwise users won't be able to run images they built.\n\nComposes reports an error in the following cases:\n* When the list contains multiple platforms but the implementation is incapable of storing multi-platform images.\n* When the list contains an unsupported platform.\n\n  ```yml\n  build:\n    context: \".\"\n    platforms:\n      - \"linux/amd64\"\n      - \"unsupported/unsupported\"\n  ```\n* When the list is non-empty and does not contain the service's platform\n\n  ```yml\n  services:\n    frontend:\n      platform: \"linux/amd64\"\n      build:\n        context: \".\"\n        platforms:\n          - \"linux/arm64\"\n  ```\n"
        },
        {
          "name": "deploy.md",
          "type": "blob",
          "size": 9.181640625,
          "content": "# Compose Deploy Specification\n\n> **Note:** \n>\n> Deploy is an optional part of the Compose Specification\n\nThe Compose Deploy Specification lets you declare additional metadata on services so Compose gets\nrelevant data to allocate adequate resources on the platform and configure them to match your needs.\n\n## Attributes\n\n### endpoint_mode\n\n`endpoint_mode` specifies a service discovery method for external clients connecting to a service. Default and available values\nare platform specific but the Compose Deploy Specification defines two canonical values:\n\n* `endpoint_mode: vip`: Assigns the service a virtual IP (VIP) that acts as the front end for clients to reach the service\n  on a network. Platform routes requests between the client and nodes running the service, without client knowledge of how\n  many nodes are participating in the service or their IP addresses or ports.\n\n* `endpoint_mode: dnsrr`: Platform sets up DNS entries for the service such that a DNS query for the service name returns a\n  list of IP addresses (DNS round-robin), and the client connects directly to one of these.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    ports:\n      - \"8080:80\"\n    deploy:\n      mode: replicated\n      replicas: 2\n      endpoint_mode: vip\n```\n\n### labels\n\n`labels` specifies metadata for the service. These labels are only set on the service and not on any containers for the service.\nThis assumes the platform has some native concept of \"service\" that can match the Compose application model.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    deploy:\n      labels:\n        com.example.description: \"This label will appear on the web service\"\n```\n\n### mode\n\n`mode` defines the replication model used to run the service on the  platform. Either `global`, exactly one container per physical node, or `replicated`, a specified number of containers. The default is `replicated`.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    deploy:\n      mode: global\n```\n\n### placement\n\n`placement` specifies constraints and preferences for the platform to select a physical node to run service containers.\n\n#### constraints\n\n`constraints` defines a required property the platform's node must fulfill to run the service container.\nSee example usage [here](https://docs.docker.com/reference/cli/docker/service/create/#constraint)\n\n```yml\ndeploy:\n  placement:\n    constraints:\n      - disktype=ssd\n```\n\n#### preferences\n\n`preferences` defines a strategy (currently `spread` is the only supported strategy) to spread tasks evenly \nover the values of the datacenter node label. See example usage [here]https://docs.docker.com/reference/cli/docker/service/create/#placement-pref)\n\n```yml\ndeploy:\n  placement:\n    preferences:\n      - spread: node.labels.zone\n```\n\n### replicas\n\nIf the service is `replicated` (which is the default), `replicas` specifies the number of containers that should be\nrunning at any given time.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    deploy:\n      mode: replicated\n      replicas: 6\n```\n\n### resources\n\n`resources` configures physical resource constraints for container to run on platform. Those constraints can be configured\nas:\n\n- `limits`: The platform must prevent the container to allocate more.\n- `reservations`: The platform must guarantee the container can allocate at least the configured amount.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    deploy:\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 50M\n          pids: 1\n        reservations:\n          cpus: '0.25'\n          memory: 20M\n```\n\n#### cpus\n\n`cpus` configures a limit or reservation for how much of the available CPU resources, as number of cores, a container can use.\n\n#### memory\n\n`memory` configures a limit or reservation on the amount of memory a container can allocate, set as a string expressing a [byte value](11-extension.md#specifying-byte-values).\n\n#### pids\n\n`pids` tunes a container’s PIDs limit, set as an integer.\n\n#### devices\n\n`devices` configures reservations of the devices a container can use. It contains a list of reservations, each set as an object with the following parameters: `capabilities`, `driver`, `count`, `device_ids` and `options`.\n\nDevices are reserved using a list of capabilities, making `capabilities` the only required field. A device must satisfy all the requested capabilities for a successful reservation.\n\n##### capabilities\n\n`capabilities` are set as a list of strings, expressing both generic and driver specific capabilities.\nThe following generic capabilities are recognized today:\n\n- `gpu`: Graphics accelerator\n- `tpu`: AI accelerator\n\nTo avoid name clashes, driver specific capabilities must be prefixed with the driver name.\nFor example, reserving an nVidia CUDA-enabled accelerator might look like this:\n\n```yml\ndeploy:\n  resources:\n    reservations:\n      devices:\n        - capabilities: [\"nvidia-compute\"]\n```\n\n##### driver\n\nA different driver for the reserved device(s) can be requested using `driver` field. The value is specified as a string.\n\n```yml\ndeploy:\n  resources:\n    reservations:\n      devices:\n        - capabilities: [\"nvidia-compute\"]\n          driver: nvidia\n```\n\n##### count\n\nIf `count` is set to `all` or not specified, Compose reserves all devices that satisfy the requested capabilities. Otherwise, Compose reserves at least the number of devices specified. The value is specified as an integer.\n\n```yml\ndeploy:\n  resources:\n    reservations:\n      devices:\n        - capabilities: [\"tpu\"]\n          count: 2\n```\n\n`count` and `device_ids` fields are exclusive. Compose returns an error if both are specified.\n\n##### device_ids\n\nIf `device_ids` is set, Compose reserves devices with the specified IDs provided they satisfy the requested capabilities. The value is specified as a list of strings.\n\n```yml\ndeploy:\n  resources:\n    reservations:\n      devices:\n        - capabilities: [\"gpu\"]\n          device_ids: [\"GPU-f123d1c9-26bb-df9b-1c23-4a731f61d8c7\"]\n```\n\n`count` and `device_ids` fields are exclusive. Compose returns an error if both are specified.\n\n##### options\n\nDriver specific options can be set with `options` as key-value pairs.\n\n```yml\ndeploy:\n  resources:\n    reservations:\n      devices:\n        - capabilities: [\"gpu\"]\n          driver: gpuvendor\n          options:\n            virtualization: false\n```\n\n### restart_policy\n\n`restart_policy` configures if and how to restart containers when they exit. If `restart_policy` is not set, Compose considers the `restart` field set by the service configuration.\n\n- `condition`. When set to:\n  - `none`, containers are not automatically restarted regardless of the exit status.\n  - `on-failure`, the container is restarted if it exits due to an error, which manifests as a non-zero exit code.\n  - `any` (default), containers are restarted regardless of the exit status. \n- `delay`: How long to wait between restart attempts, specified as a [duration](11-extension.md#specifying-durations). The default is 0, meaning restart attempts can occur immediately.\n- `max_attempts`: How many times to attempt to restart a container before giving up (default: never give up). If the restart does not\n  succeed within the configured `window`, this attempt doesn't count toward the configured `max_attempts` value.\n  For example, if `max_attempts` is set to '2', and the restart fails on the first attempt, more than two restarts must be attempted.\n- `window`: How long to wait before deciding if a restart has succeeded, specified as a [duration](#specifying-durations) (default:\n  decide immediately).\n\n```yml\ndeploy:\n  restart_policy:\n    condition: on-failure\n    delay: 5s\n    max_attempts: 3\n    window: 120s\n```\n\n### rollback_config\n\n`rollback_config` configures how the service should be rollbacked in case of a failing update.\n\n- `parallelism`: The number of containers to rollback at a time. If set to 0, all containers rollback simultaneously.\n- `delay`: The time to wait between each container group's rollback (default 0s).\n- `failure_action`: What to do if a rollback fails. One of `continue` or `pause` (default `pause`)\n- `monitor`: Duration after each task update to monitor for failure `(ns|us|ms|s|m|h)` (default 0s).\n- `max_failure_ratio`: Failure rate to tolerate during a rollback (default 0).\n- `order`: Order of operations during rollbacks. One of `stop-first` (old task is stopped before starting new one),\n   or `start-first` (new task is started first, and the running tasks briefly overlap) (default `stop-first`).\n\n### update_config\n\n`update_config` configures how the service should be updated. Useful for configuring rolling updates.\n\n- `parallelism`: The number of containers to update at a time.\n- `delay`: The time to wait between updating a group of containers.\n- `failure_action`: What to do if an update fails. One of `continue`, `rollback`, or `pause` (default: `pause`).\n- `monitor`: Duration after each task update to monitor for failure `(ns|us|ms|s|m|h)` (default 0s).\n- `max_failure_ratio`: Failure rate to tolerate during an update.\n- `order`: Order of operations during updates. One of `stop-first` (old task is stopped before starting new one),\n   or `start-first` (new task is started first, and the running tasks briefly overlap) (default `stop-first`).\n\n```yml\ndeploy:\n  update_config:\n    parallelism: 2\n    delay: 10s\n    order: stop-first\n```\n"
        },
        {
          "name": "develop.md",
          "type": "blob",
          "size": 4.705078125,
          "content": "# Compose Develop Specification \n\n> **Note:** \n>\n> Develop is an optional part of the Compose Specification\n\n## Introduction\n\nCompose focuses on the development use-case of running applications on a local machine. It also supports some development hooks to improve the velocity of your local workflow, also known as your \"inner loop\". This document defines how Compose behaves to efficiently assist the developer.\n\nThis section defines the development constraints and workflows set by Compose. Only a subset of\nCompose file services may require a `develop` subsection.\n\n## Illustrative example\n\n```yaml\nservices:\n  frontend:\n    image: example/webapp\n    build: ./webapp\n    develop:\n      watch: \n        # sync static content\n        - path: ./webapp/html\n          action: sync\n          target: /var/www\n          ignore:\n            - node_modules/\n\n  backend:\n    image: example/backend\n    build: ./backend\n    develop:\n      watch: \n        # rebuild image and recreate service\n        - path: ./backend/src\n          action: rebuild\n```\n\n## Attributes\n\nThe `develop` subsection defines configuration options that are applied by Compose to assist you during development of a service with optimized workflows.\n\n### watch\n\nThe `watch` attribute defines a list of rules that control automatic service updates based on local file changes. `watch` is a sequence, each individual item in the sequence defines a rule to be applied by \nCompose to monitor source code for changes. For more information, see [Use Compose Watch](https://docs.docker.com/compose/file-watch/).\n\n#### action\n\n`action` defines the action to take when changes are detected. If `action` is set to:\n\n- `rebuild`, Compose rebuilds the service image based on the `build` section and recreates the service with the updated image.\n- `restart`, Compose restarts the service container. [![Compose v2.32.0](https://img.shields.io/badge/compose-v2.32.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.32.0)\n- `sync`, Compose keeps the existing service container(s) running, but synchronizes source files with container content according to the `target` attribute.\n- `sync+restart`, Compose synchronizes source files with container content according to the `target` attribute, and then restarts the container.\n- `sync+exec`, Compose synchronizes source files with container content according to the `target` attribute, and then executes a command inside the container. [![Compose v2.32.0](https://img.shields.io/badge/compose-v2.32.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.32.0)\n\n\n#### exec\n\n`exec` is only relevant when `action` is set to `sync+exec`. Comparable to [service hooks](05-services.md#post_start), `exec` is used to defined command to be ran inside container:\n\n- `command`: The command to run after the container has started. This attribute is required.\n- `user`: The user to run the command. If not set, the command is run with the same user as the main service command.\n- `privileged`: Lets the command run with privileged access.\n- `working_dir`: The working directory in which to run the command. If not set, it is run in the same working directory as the main service command.\n- `environment`: Sets the environment variables to run the command. The command inherits the `environment` set for the service, this section lets you to append or override values.\n\n```yaml\nservices:\n  frontend:\n    image: ...\n    develop:\n      watch: \n        # sync content then run command to reload service without interruption\n        - path: ./etc/config\n          action: sync+exec\n          target: /etc/config/\n          exec:\n            command: app reload\n```\n\n#### ignore\n\nThe `ignore` attribute can be used to define a list of patterns for paths to be ignored. Any updated file\nthat matches a pattern, or belongs to a folder that matches a pattern, won't trigger services to be re-created. \nThe syntax is the same as `.dockerignore` file: \n\n- `*` matches 0 or more characters in a file name. \n- `?` matches a single character in file name. \n- `*/*` matches two nested folders with arbitrary names\n- `**` matches an arbitrary number of nested folders\n\nIf the build context includes a `.dockerignore` file, the patterns in this file is loaded as implicit content\nfor the `ignores` file, and values set in the Compose model are appended.\n\n#### path\n\n`path` attribute defines the path to source code (relative to the project directory) to monitor for changes. Updates to any file\ninside the path, which doesn't match any `ignore` rule, triggers the configured action.\n\n#### target\n\n`target` attribute only applies when `action` is configured for `sync`. Files within `path` with changes are synchronized\nwith container filesystem, so that the latter is always running with up-to-date content.\n\n"
        },
        {
          "name": "head.md",
          "type": "blob",
          "size": 0.2275390625,
          "content": "<!---\nThis file is generated, changes will be overwritten or CI specification check will fail\nAll changes should be done in the markdown files located in the spec directory\n-->\n# The Compose Specification\n{:.no_toc}\n\n* ToC\n  {:toc}\n\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "markdown-include.json",
          "type": "blob",
          "size": 0.056640625,
          "content": "{\n  \"build\": \"spec.md\",\n  \"files\": [\"spec.template.md\"]\n}\n"
        },
        {
          "name": "schema",
          "type": "tree",
          "content": null
        },
        {
          "name": "spec.md",
          "type": "blob",
          "size": 108.857421875,
          "content": "<!---\nThis file is generated, changes will be overwritten or CI specification check will fail\nAll changes should be done in the markdown files located in the spec directory\n-->\n# The Compose Specification\n{:.no_toc}\n\n* ToC\n  {:toc}\n\n# Status of this document\n\nThis document specifies the Compose file format used to define multi-containers applications. Distribution of this document is unlimited.\n\n## Requirements and optional attributes\n\nThe Compose specification includes properties designed to target a local [OCI](https://opencontainers.org/) container runtime,\nexposing Linux kernel specific configuration options, but also some Windows container specific properties. It is also designed for cloud platform features related to resource placement on a cluster, replicated application distribution, and scalability.\n\nWe acknowledge that no Compose implementation is expected to support all attributes, and that support for some properties\nis platform dependent and can only be confirmed at runtime. The definition of a versioned schema to control the supported\nproperties in a Compose file, established by the [docker-compose](https://github.com/docker/compose) tool where the Compose\nfile format was designed, doesn't offer any guarantee to the end-user that attributes will be actually implemented.\n\nThe specification defines the expected configuration syntax and behavior. Unless noted, supporting any of these is optional.\n\nA Compose implementation to parse a Compose file using unsupported attributes should warn users. We recommend the following implementors\nto support those running modes:\n\n* Default: warn the user about unsupported attributes, but ignore them\n* Strict: warn the user about unsupported attributes and reject the Compose file\n* Loose: ignore unsupported attributes AND unknown attributes (that were not defined by the spec by the time implementation was created)\n\nFrom this point onwards, references made to 'Compose' can be interpreted as 'a Compose implementation'. \n# The Compose application model\n\nThe Compose Specification lets you define a platform-agnostic container based application. Such an application is designed as a set of containers which have to both run together with adequate shared resources and communication channels.\n\nComputing components of an application are defined as [services](05-services.md). A service is an abstract concept implemented on platforms by running the same container image, and configuration, one or more times.\n\nServices communicate with each other through [networks](06-networks.md). In the Compose Specification, a network is a platform capability abstraction to establish an IP route between containers within services connected together. Low-level, platform-specific networking options are grouped into the Network definition and may be partially implemented on some platforms.\n\nServices store and share persistent data into [volumes](07-volumes.md). The Specification describes such a persistent data as a high-level filesystem mount with global options. Actual platform-specific implementation details are grouped into the volumes definition and may be partially implemented on some platforms.\n\nSome services require configuration data that is dependent on the runtime or platform. For this, the Specification defines a dedicated [configs](08-configs.md) concept. From a service container point of view, configs are comparable to volumes, in that they are files mounted into the container. But the actual definition involves distinct platform resources and services, which are abstracted by this type.\n\nA [secret](09-secrets.md) is a specific flavor of configuration data for sensitive data that should not be exposed without security considerations. Secrets are made available to services as files mounted into their containers, but the platform-specific resources to provide sensitive data are specific enough to deserve a distinct concept and definition within the Compose specification.\n\n>**Note**\n>\n> With volumes, configs and secrets you can have a simple declaration at the top-level and then add more platform-specific information at the service level.\n\nA project is an individual deployment of an application specification on a platform. A project's name, set with the top-level [`name`](04-version-and-name.md) attribute, is used to group\nresources together and isolate them from other applications or other installation of the same Compose specified application with distinct parameters. If you are creating resources on a platform, you must prefix resource names by project and\nset the label `com.docker.compose.project`.\n\nCompose offers a way for users to set a custom project name and override this name, so that the same `compose.yaml` file can be deployed twice on the same infrastructure, without changes, by just passing a distinct name.\n\nProject names must contain only lowercase letters, decimal digits, dashes, and underscores, and must begin with a lowercase letter or decimal digit.\n\n## Illustrative example\n\nThe following example illustrates the Compose Specification concepts outlined above. The example is non-normative.\n\nConsider an application split into a frontend web application and a backend service.\n\nThe frontend is configured at runtime with an HTTP configuration file managed by infrastructure, providing an external domain name, and an HTTPS server certificate injected by the platform's secured secret store.\n\nThe backend stores data in a persistent volume.\n\nBoth services communicate with each other on an isolated back-tier network, while the frontend is also connected to a front-tier network and exposes port 443 for external usage.\n\n```mermaid\n    %%{ init: { 'flowchart': { 'curve': 'linear' } } }%%\n    flowchart LR\n    subgraph A[INFRASTRUCTURE]\n    direction TB\n    subgraph TOP[\" \"]\n        subgraph B1[Frontend Service]\n            fs[\"`**webapp**`\"]\n        end\n        style B1 fill:#ccd6e8, stroke-width:0px\n        subgraph B2[Backend Service]\n            bs[\"`**database**`\"]\n        end\n        style B2 fill:#ccd6e8, stroke-width:0px\n        \n    end\n    style TOP fill:transparent, stroke-width:2px, stroke:#62affb, stroke-dasharray: 5 5\n        key[ro= read only\\nr+w = read write]\n        style key fill:transparent, stroke-width:0px,text-align: left, size: 94px\n        \n        direction TB\n        id2(Server\\nCertificate)\n        id1(HTTP\\nConfiguration)\n        id1 & id2 -.-|ro| B1\n        style id1 stroke:#000,stroke-width:1px,stroke-dasharray: 10\n        style id2 stroke:#000,stroke-width:1px,stroke-dasharray: 10\n        B2 ==r+w==> id3[(Persistent\\nVolume)]\n    end\n    style A fill:#eeeeee, stroke-width:0px\n    direction LR\n    id4[External\\nUser] ---id5(((443)))--->|Frontend\\nNetwork| B1\n    style id4 stroke:#000,stroke-width:2px\n    B1 --Backend\\nNetwork--> B2\n```\n\nThe example application is composed of the following parts:\n\n- 2 services, backed by Docker images: `webapp` and `database`\n- 1 secret (HTTPS certificate), injected into the frontend\n- 1 configuration (HTTP), injected into the frontend\n- 1 persistent volume, attached to the backend\n- 2 networks\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    ports:\n      - \"443:8043\"\n    networks:\n      - front-tier\n      - back-tier\n    configs:\n      - httpd-config\n    secrets:\n      - server-certificate\n\n  backend:\n    image: example/database\n    volumes:\n      - db-data:/etc/data\n    networks:\n      - back-tier\n\nvolumes:\n  db-data:\n    driver: flocker\n    driver_opts:\n      size: \"10GiB\"\n\nconfigs:\n  httpd-config:\n    external: true\n\nsecrets:\n  server-certificate:\n    external: true\n\nnetworks:\n  # The presence of these objects is sufficient to define them\n  front-tier: {}\n  back-tier: {}\n```\n\nThis example illustrates the distinction between volumes, configs and secrets. While all of them are all exposed\nto service containers as mounted files or directories, only a volume can be configured for read+write access.\nSecrets and configs are read-only. The volume configuration allows you to select a volume driver and pass driver options\nto tweak volume management according to the actual infrastructure. Configs and secrets rely on platform services,\nand are declared `external` as they are not managed as part of the application lifecycle. Compose uses a platform-specific lookup mechanism to retrieve runtime values.\n# Compose file\n\nThe Compose file is a [YAML](http://yaml.org/) file defining:\n- [Version](04-version-and-name.md) (Optional)\n- [Services](05-services.md) (Required)\n- [Networks](06-networks.md)\n- [Volumes](07-volumes.md)\n- [Configs](08-configs.md) \n- [Secrets](09-secrets.md)\n\nThe default path for a Compose file is `compose.yaml` (preferred) or `compose.yml` that is placed in the working directory.\nCompose also supports `docker-compose.yaml` and `docker-compose.yml` for backwards compatibility of earlier versions.\nIf both files exist, Compose prefers the canonical `compose.yaml`.\n\nYou can use [fragments](10-fragments.md) and [extensions](11-extension.md) to keep your Compose file efficient and easy to maintain.\n\nMultiple Compose files can be [merged](13-merge.md) together to define the application model. The combination of YAML files are implemented by appending or overriding YAML elements based on the Compose file order you set. \nSimple attributes and maps get overridden by the highest order Compose file, lists get merged by appending. Relative\npaths are resolved based on the first Compose file's parent folder, whenever complimentary files being\nmerged are hosted in other folders. As some Compose file elements can both be expressed as single strings or complex objects, merges apply to\nthe expanded form.\n\nIf you want to reuse other Compose files, or factor out parts of you application model into separate Compose files, you can also use [`include`](14-include.md). This is useful if your Compose application is dependent on another application which is managed by a different team, or needs to be shared with others.\n# Version and name top-level elements\n\n## Version top-level element (obsolete)\n\nThe top-level `version` property is defined by the Compose Specification for backward compatibility. It is only informative you'll receive a warning message that it is obsolete if used. \n\nCompose doesn't use `version` to select an exact schema to validate the Compose file, but\nprefers the most recent schema when it's implemented.\n\nCompose validates whether it can fully parse the Compose file. If some fields are unknown, typically\nbecause the Compose file was written with fields defined by a newer version of the Specification, you'll receive a warning message. Compose offers options to ignore unknown fields (as defined by [\"loose\"](01-status.md#requirements-and-optional-attributes) mode).\n\n## Name top-level element\n\nThe top-level `name` property is defined by the Specification as the project name to be used if you don't set one explicitly.\nCompose offers a way for you to override this name, and sets a\ndefault project name to be used if the top-level `name` element is not set.\n\nWhenever a project name is defined by top-level `name` or by some custom mechanism, it is exposed for\n[interpolation](12-interpolation.md) and environment variable resolution as `COMPOSE_PROJECT_NAME`\n\n```yml\nservices:\n  foo:\n    image: busybox\n    environment:\n      - COMPOSE_PROJECT_NAME\n    command: echo \"I'm running ${COMPOSE_PROJECT_NAME}\"\n```\n# Services top-level element\n\nA service is an abstract definition of a computing resource within an application which can be scaled or replaced\nindependently from other components. Services are backed by a set of containers, run by the platform\naccording to replication requirements and placement constraints. As services are backed by containers, they are defined\nby a Docker image and set of runtime arguments. All containers within a service are identically created with these\narguments.\n\nA Compose file must declare a `services` top-level element as a map whose keys are string representations of service names,\nand whose values are service definitions. A service  definition contains the configuration that is applied to each\nservice container.\n\nEach service may also include a `build` section, which defines how to create the Docker image for the service.\nCompose supports building docker images using this service definition. If not used, the `build` section is ignored and the Compose file is still considered valid. Build support is an optional aspect of the Compose Specification, and is\ndescribed in detail in the [Compose Build Specification](build.md) documentation.\n\nEach service defines runtime constraints and requirements to run its containers. The `deploy` section groups\nthese constraints and allows the platform to adjust the deployment strategy to best match containers' needs with\navailable resources. Deploy support is an optional aspect of the Compose Specification, and is\ndescribed in detail in the [Compose Deploy Specification](deploy.md) documentation.\nIf not implemented the `deploy` section is ignored and the Compose file is still considered valid.\n\n## attach\n\n[![Compose v2.20.0](https://img.shields.io/badge/compose-v2.20.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.20.0)\n\nWhen `attach` is defined and set to `false` Compose does not collect service logs,\nuntil you explicitly request it to.\n\nThe default service configuration is `attach: true`.\n\n## build\n\n`build` specifies the build configuration for creating a container image from source, as defined in the [Compose Build Specification](build.md).\n\n## blkio_config\n\n`blkio_config` defines a set of configuration options to set block IO limits for a service.\n\n```yml\nservices:\n  foo:\n    image: busybox\n    blkio_config:\n       weight: 300\n       weight_device:\n         - path: /dev/sda\n           weight: 400\n       device_read_bps:\n         - path: /dev/sdb\n           rate: '12mb'\n       device_read_iops:\n         - path: /dev/sdb\n           rate: 120\n       device_write_bps:\n         - path: /dev/sdb\n           rate: '1024k'\n       device_write_iops:\n         - path: /dev/sdb\n           rate: 30\n```\n\n### device_read_bps, device_write_bps\n\nSet a limit in bytes per second for read / write operations on a given device.\nEach item in the list must have two keys:\n\n- `path`: Defines the symbolic path to the affected device.\n- `rate`: Either as an integer value representing the number of bytes or as a string expressing a byte value.\n\n### device_read_iops, device_write_iops\n\nSet a limit in operations per second for read / write operations on a given device.\nEach item in the list must have two keys:\n\n- `path`: Defines the symbolic path to the affected device.\n- `rate`: As an integer value representing the permitted number of operations per second.\n\n### weight\n\nModify the proportion of bandwidth allocated to a service relative to other services.\nTakes an integer value between 10 and 1000, with 500 being the default.\n\n### weight_device\n\nFine-tune bandwidth allocation by device. Each item in the list must have two keys:\n\n- `path`: Defines the symbolic path to the affected device.\n- `weight`: An integer value between 10 and 1000.\n\n## cpu_count\n\n`cpu_count` defines the number of usable CPUs for service container.\n\n## cpu_percent\n\n`cpu_percent` defines the usable percentage of the available CPUs.\n\n## cpu_shares\n\n`cpu_shares` defines, as integer value, a service container's relative CPU weight versus other containers.\n\n## cpu_period\n\n`cpu_period` configures CPU CFS (Completely Fair Scheduler) period when a platform is based\non Linux kernel.\n\n## cpu_quota\n\n`cpu_quota` configures CPU CFS (Completely Fair Scheduler) quota when a platform is based\non Linux kernel.\n\n## cpu_rt_runtime\n\n`cpu_rt_runtime` configures CPU allocation parameters for platforms with support for realtime scheduler. It can be either\nan integer value using microseconds as unit or a [duration](11-extension.md#specifying-durations).\n\n```yml\n cpu_rt_runtime: '400ms'\n cpu_rt_runtime: 95000`\n```\n\n## cpu_rt_period\n\n`cpu_rt_period` configures CPU allocation parameters for platforms with support for realtime scheduler. It can be either\nan integer value using microseconds as unit or a [duration](11-extension.md#specifying-durations).\n\n```yml\n cpu_rt_period: '1400us'\n cpu_rt_period: 11000`\n```\n\n## cpus\n\n`cpus` define the number of (potentially virtual) CPUs to allocate to service containers. This is a fractional number.\n`0.000` means no limit.\n\nWhen both are set, `cpus` must be consistent with the `cpus` attribute in the\n[Deploy Specification](deploy.md#cpus)\n\n## cpuset\n\n`cpuset` defines the explicit CPUs in which to allow execution. Can be a range `0-3` or a list `0,1`\n\n## cap_add\n\n`cap_add` specifies additional container [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html)\nas strings.\n\n```yaml\ncap_add:\n  - ALL\n```\n\n## cap_drop\n\n`cap_drop` specifies container [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html) to drop\nas strings.\n\n```yaml\ncap_drop:\n  - NET_ADMIN\n  - SYS_ADMIN\n```\n\n## cgroup\n\n[![Compose v2.15.0](https://img.shields.io/badge/compose-v2.15.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.15.0)\n\n\n`cgroup` specifies the cgroup namespace to join. When unset, it is the container runtime's decision to\nselect which cgroup namespace to use, if supported.\n\n- `host`: Runs the container in the Container runtime cgroup namespace.\n- `private`: Runs the container in its own private cgroup namespace.\n\n## cgroup_parent\n\n`cgroup_parent` specifies an optional parent [cgroup](https://man7.org/linux/man-pages/man7/cgroups.7.html) for the container.\n\n```yaml\ncgroup_parent: m-executor-abcd\n```\n\n## command\n\n`command` overrides the default command declared by the container image, for example by Dockerfile's `CMD`.\n\n```yaml\ncommand: bundle exec thin -p 3000\n```\n\nThe value can also be a list, in a manner similar to [Dockerfile](https://docs.docker.com/engine/reference/builder/#cmd):\n\n```yaml\ncommand: [ \"bundle\", \"exec\", \"thin\", \"-p\", \"3000\" ]\n```\n\nIf the value is `null`, the default command from the image is used.\n\nIf the value is `[]` (empty list) or `''` (empty string), the default command declared by the image is ignored,\ni.e. overridden to be empty.\n\n## configs\n\nConfigs allow services to adapt their behaviour without the need to rebuild a Docker image. \nServices can only access configs when explicitly granted by the `configs` attribute. Two different syntax variants are supported.\n\nCompose reports an error if `config` doesn't exist on the platform or isn't defined in the\n[`configs` top-level element](08-configs.md) in the Compose file.\n\nThere are two syntaxes defined for configs. To remain compliant to this specification, an implementation\nmust support both syntaxes. Implementations must allow use of both short and long syntaxes within the same document.\n\nYou can grant a service access to multiple configs, and you can mix long and short syntax.\n\n### Short syntax\n\nThe short syntax variant only specifies the config name. This grants the\ncontainer access to the config and mounts it as files into a service’s container’s filesystem. The location of the mount point within the container defaults to `/<config_name>` in Linux containers, and `C:\\<config-name>` in Windows containers. \n\nThe following example uses the short syntax to grant the `redis` service\naccess to the `my_config` and `my_other_config` configs. The value of\n`my_config` is set to the contents of the file `./my_config.txt`, and\n`my_other_config` is defined as an external resource, which means that it has\nalready been defined in the platform. If the external config does not exist,\nthe deployment fails.\n\n```yml\nservices:\n  redis:\n    image: redis:latest\n    configs:\n      - my_config\n      - my_other_config\nconfigs:\n  my_config:\n    file: ./my_config.txt\n  my_other_config:\n    external: true\n```\n\n### Long syntax\n\nThe long syntax provides more granularity in how the config is created within the service's task containers.\n\n- `source`: The name of the config as it exists in the platform.\n- `target`: The path and name of the file to be mounted in the service's\n  task containers. Defaults to `/<source>` if not specified.\n- `uid` and `gid`: The numeric UID or GID that owns the mounted config file\n  within the service's task containers. Default value when not specified is USER running container.\n- `mode`: The [permissions](https://wintelguy.com/permissions-calc.pl) for the file that is mounted within the service's\n  task containers, in octal notation. Default value is world-readable (`0444`).\n  Writable bit must be ignored. The executable bit can be set.\n\nThe following example sets the name of `my_config` to `redis_config` within the\ncontainer, sets the mode to `0440` (group-readable) and sets the user and group\nto `103`. The `redis` service does not have access to the `my_other_config`\nconfig.\n\n```yml\nservices:\n  redis:\n    image: redis:latest\n    configs:\n      - source: my_config\n        target: /redis_config\n        uid: \"103\"\n        gid: \"103\"\n        mode: 0440\nconfigs:\n  my_config:\n    external: true\n  my_other_config:\n    external: true\n```\n\n## container_name\n\n`container_name` is a string that specifies a custom container name, rather than a name generated by default.\n\n```yml\ncontainer_name: my-web-container\n```\n\nCompose does not scale a service beyond one container if the Compose file specifies a\n`container_name`. Attempting to do so results in an error.\n\n`container_name` follows the regex format of `[a-zA-Z0-9][a-zA-Z0-9_.-]+`\n\n## credential_spec\n\n`credential_spec` configures the credential spec for a managed service account.\n\nIf you have services that use Windows containers, you can use `file:` and\n`registry:` protocols for `credential_spec`. Compose also supports additional\nprotocols for custom use-cases.\n\nThe `credential_spec` must be in the format `file://<filename>` or `registry://<value-name>`.\n\n```yml\ncredential_spec:\n  file: my-credential-spec.json\n```\n\nWhen using `registry:`, the credential spec is read from the Windows registry on\nthe daemon's host. A registry value with the given name must be located in:\n\n    HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Virtualization\\Containers\\CredentialSpecs\n\nThe following example loads the credential spec from a value named `my-credential-spec`\nin the registry:\n\n```yml\ncredential_spec:\n  registry: my-credential-spec\n```\n\n### Example gMSA configuration\n\nWhen configuring a gMSA credential spec for a service, you only need\nto specify a credential spec with `config`, as shown in the following example:\n\n```yml\nservices:\n  myservice:\n    image: myimage:latest\n    credential_spec:\n      config: my_credential_spec\n\nconfigs:\n  my_credentials_spec:\n    file: ./my-credential-spec.json|\n```\n\n## depends_on\n\n`depends_on` expresses startup and shutdown dependencies between services.\n\n### Short syntax\n\nThe short syntax variant only specifies service names of the dependencies.\nService dependencies cause the following behaviors:\n\n- Compose creates services in dependency order. In the following\n  example, `db` and `redis` are created before `web`.\n\n- Compose removes services in dependency order. In the following\n  example, `web` is removed before `db` and `redis`.\n\nSimple example:\n\n```yml\nservices:\n  web:\n    build: .\n    depends_on:\n      - db\n      - redis\n  redis:\n    image: redis\n  db:\n    image: postgres\n```\n\nCompose guarantees dependency services have been started before\nstarting a dependent service.\nCompose waits for dependency services to be \"ready\" before\nstarting a dependent service.\n\n### Long syntax\n\nThe long form syntax enables the configuration of additional fields that can't be\nexpressed in the short form.\n\n- `restart`: When set to `true` Compose restarts this service after it updates the dependency service.\n  This applies to an explicit restart controlled by a Compose operation, and excludes automated restart by the container runtime\n  after the container dies. [![Compose v2.17.0](https://img.shields.io/badge/compose-v2.17.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.17.0)\n\n\n\n- `condition`: Sets the condition under which dependency is considered satisfied\n  - `service_started`: An equivalent of the short syntax described above\n  - `service_healthy`: Specifies that a dependency is expected to be \"healthy\"\n    (as indicated by [healthcheck](#healthcheck)) before starting a dependent\n    service.\n  - `service_completed_successfully`: Specifies that a dependency is expected to run\n    to successful completion before starting a dependent service.\n- `required`: When set to `false` Compose only warns you when the dependency service isn't started or available. If it's not defined\n    the default value of `required` is `true`. [![Compose v2.20.0](https://img.shields.io/badge/compose-v2.20.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.20.0)\n\n\nService dependencies cause the following behaviors:\n\n- Compose creates services in dependency order. In the following\n  example, `db` and `redis` are created before `web`.\n\n- Compose waits for healthchecks to pass on dependencies\n  marked with `service_healthy`. In the following example, `db` is expected to\n  be \"healthy\" before `web` is created.\n\n- Compose removes services in dependency order. In the following\n  example, `web` is removed before `db` and `redis`.\n\n```yml\nservices:\n  web:\n    build: .\n    depends_on:\n      db:\n        condition: service_healthy\n        restart: true\n      redis:\n        condition: service_started\n  redis:\n    image: redis\n  db:\n    image: postgres\n```\n\nCompose guarantees dependency services are started before\nstarting a dependent service.\nCompose guarantees dependency services marked with\n`service_healthy` are \"healthy\" before starting a dependent service.\n\n## deploy\n\n`deploy` specifies the configuration for the deployment and lifecycle of services, as defined [in the Compose Deploy Specification](deploy.md).\n\n## develop\n\n[![Compose v2.22.0](https://img.shields.io/badge/compose-v2.22.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.22.0)\n\n\n`develop` specifies the development configuration for maintaining a container in sync with source, as defined in the [Development Section](develop.md).\n\n## device_cgroup_rules\n\n`device_cgroup_rules` defines a list of device cgroup rules for this container.\nThe format is the same format the Linux kernel specifies in the [Control Groups\nDevice Whitelist Controller](https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v1/devices.html).\n\n```yml\ndevice_cgroup_rules:\n  - 'c 1:3 mr'\n  - 'a 7:* rmw'\n```\n\n## devices\n\n`devices` defines a list of device mappings for created containers in the form of\n`HOST_PATH:CONTAINER_PATH[:CGROUP_PERMISSIONS]`.\n\n```yml\ndevices:\n  - \"/dev/ttyUSB0:/dev/ttyUSB0\"\n  - \"/dev/sda:/dev/xvda:rwm\"\n```\n\n## dns\n\n`dns` defines custom DNS servers to set on the container network interface configuration. It can be a single value or a list.\n\n```yml\ndns: 8.8.8.8\n```\n\n```yml\ndns:\n  - 8.8.8.8\n  - 9.9.9.9\n```\n\n## dns_opt\n\n`dns_opt` list custom DNS options to be passed to the container’s DNS resolver (`/etc/resolv.conf` file on Linux).\n\n```yml\ndns_opt:\n  - use-vc\n  - no-tld-query\n```\n\n## dns_search\n\n`dns_search` defines custom DNS search domains to set on container network interface configuration. It can be a single value or a list.\n\n```yml\ndns_search: example.com\n```\n\n```yml\ndns_search:\n  - dc1.example.com\n  - dc2.example.com\n```\n\n## domainname\n\n`domainname` declares a custom domain name to use for the service container. It must be a valid RFC 1123 hostname.\n\n## entrypoint\n\n`entrypoint` declares the default entrypoint for the service container.\nThis overrides the `ENTRYPOINT` instruction from the service's Dockerfile.\n\nIf `entrypoint` is non-null, Compose ignores any default command from the image, for example the `CMD`\ninstruction in the Dockerfile.\n\nSee also [`command`](#command) to set or override the default command to be executed by the entrypoint process.\n\nIn its short form, the value can be defined as a string:\n```yml\nentrypoint: /code/entrypoint.sh\n```\n\nAlternatively, the value can also be a list, in a manner similar to the\n[Dockerfile](https://docs.docker.com/engine/reference/builder/#cmd):\n\n```yml\nentrypoint:\n  - php\n  - -d\n  - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so\n  - -d\n  - memory_limit=-1\n  - vendor/bin/phpunit\n```\n\nIf the value is `null`, the default entrypoint from the image is used.\n\nIf the value is `[]` (empty list) or `''` (empty string), the default entrypoint declared by the image is ignored,\ni.e. overridden to be empty.\n\n## env_file\n\n`env_file` adds environment variables to the container based on the file content.\n\n```yml\nenv_file: .env\n```\n\n`env_file` can also be a list. The files in the list are processed from the top down. For the same variable\nspecified in two env files, the value from the last file in the list stands.\n\n```yml\nenv_file:\n  - ./a.env\n  - ./b.env\n```\n\nRelative path are resolved from the Compose file's parent folder. As absolute paths prevent the Compose\nfile from being portable, Compose warns you when such a path is used to set `env_file`.\n\nEnvironment variables declared in the [environment](#environment) section override these values. This holds true even if those values are\nempty or undefined.\n\nList elements can also be declared as a mapping, which then lets you set an additional\nattributes\n\n### required\n\n`required` attribute defaults to `true`. When `required` is set to `false` and the `.env` file is missing,\nCompose silently ignores the entry.\n\n```yml\nenv_file:\n  - path: ./default.env\n    required: true # default\n  - path: ./override.env\n    required: false\n```\n\n### format\n\n`format` attribute lets you to use an alternative file formats for `env_file`. When not set, `env_file` is parsed according to \nCompose rules as described in next section.\n\n`raw` format lets you use an `env_file` with key=value items, but without any attempt from Compose to parse the value for interpolation. \nThis let you pass values as-is including quotes and `$` signs.\n\n```yml\nenv_file:\n  - path: ./default.env\n    format: raw\n```\n\n\n### Env_file format\n\nEach line in an `.env` file must be in `VAR[=[VAL]]` format. The following syntax rules apply:\n\n- Lines beginning with `#` are processed as comments and ignored.\n- Blank lines are ignored.\n- Unquoted and double-quoted (`\"`) values have [Interpolation](12-interpolation.md) applied.\n- Each line represents a key-value pair. Values can optionally be quoted.\n  - `VAR=VAL` -> `VAL`\n  - `VAR=\"VAL\"` -> `VAL`\n  - `VAR='VAL'` -> `VAL`\n- Inline comments for unquoted values must be preceded with a space.\n  - `VAR=VAL # comment` -> `VAL`\n  - `VAR=VAL# not a comment` -> `VAL# not a comment`\n- Inline comments for quoted values must follow the closing quote.\n  - `VAR=\"VAL # not a comment\"` -> `VAL # not a comment`\n  - `VAR=\"VAL\" # comment` -> `VAL`\n- Single-quoted (`'`) values are used literally.\n  - `VAR='$OTHER'` -> `$OTHER`\n  - `VAR='${OTHER}'` -> `${OTHER}`\n- Quotes can be escaped with `\\`.\n  - `VAR='Let\\'s go!'` -> `Let's go!`\n  - `VAR=\"{\\\"hello\\\": \\\"json\\\"}\"` -> `{\"hello\": \"json\"}`\n- Common shell escape sequences including `\\n`, `\\r`, `\\t`, and `\\\\` are supported in double-quoted values.\n  - `VAR=\"some\\tvalue\"` -> `some  value`\n  - `VAR='some\\tvalue'` -> `some\\tvalue`\n  - `VAR=some\\tvalue` -> `some\\tvalue`\n\n`VAL` may be omitted, in such cases the variable value is an empty string.\n`=VAL` may be omitted, in such cases the variable is unset.\n\n```bash\n# Set Rails/Rack environment\nRACK_ENV=development\nVAR=\"quoted\"\n```\n\n## environment\n\n`environment` defines environment variables set in the container. `environment` can use either an array or a\nmap. Any boolean values; true, false, yes, no, should be enclosed in quotes to ensure\nthey are not converted to True or False by the YAML parser.\n\nEnvironment variables can be declared by a single key (no value to equals sign). In this case Compose\nrelies on you to resolve the value. If the value is not resolved, the variable\nis unset and is removed from the service container environment.\n\nMap syntax:\n\n```yml\nenvironment:\n  RACK_ENV: development\n  SHOW: \"true\"\n  USER_INPUT:\n```\n\nArray syntax:\n\n```yml\nenvironment:\n  - RACK_ENV=development\n  - SHOW=true\n  - USER_INPUT\n```\n\nWhen both `env_file` and `environment` are set for a service, values set by `environment` have precedence.\n\n## expose\n\n`expose` defines the (incoming) port or a range of ports that Compose exposes from the container. These ports must be\naccessible to linked services and should not be published to the host machine. Only the internal container\nports can be specified.\n\nSyntax is `<portnum>/[<proto>]` or `<startport-endport>/[<proto>]` for a port range.\nWhen not explicitly set, `tcp` protocol is used.\n\n```yml\nexpose:\n  - \"3000\"\n  - \"8000\"\n  - \"8080-8085/tcp\"\n```\n\n> **Note**\n>\n> If the Dockerfile for the image already exposes ports, it is visible to other containers on the network even if `expose` is not set in your Compose file. \n\n## extends\n\n`extends` lets you share common configurations among different files, or even different projects entirely. With `extends` you can define a common set of service options in one place and refer to it from anywhere. You can refer to another Compose file and select a service you want to also use in your own application, with the ability to override some attributes for your own needs.\n\nYou can use `extends` on any service together with other configuration keys. The `extends` value must be a mapping\ndefined with a required `service` and an optional `file` key.\n\n```yaml\nextends:\n  file: common.yml\n  service: webapp\n```\n\n- `service`: Defines the name of the service being referenced as a base, for example `web` or `database`.\n- `file`: The location of a Compose configuration file defining that service.\n\n### Restrictions\n\nService being referenced by `extends` can have dependency declared on other resources. Typically it can have an explicit `volumes` declaration.\n`extends` then will not import the target volume definition in the extending compose model, it is Compose file author responsibility to define\nan equivalent resource for the extended service to be consistent. Compose will check a resource with referenced ID exists in the Compose model\n\nDependencies on other resources in an `extends` target can be:\n- An explicit references by `volumes`, `networks`, `configs`, `secrets`, `links`, `volumes_from` or `depends_on`\n- A reference to another service using the `service:{name}` syntax in namespace declaration (`ipc`, `pid`, `network_mode`)\n\nCircular references with `extends` are not supported, Compose returns an error when one is detected.\n\n### Finding referenced service\n\n`file` value can be:\n\n- Not present.\n  This indicates that another service within the same Compose file is being referenced.\n- File path, which can be either:\n  - Relative path. This path is considered as relative to the location of the main Compose\n    file.\n  - Absolute path.\n\nA service denoted by `service` must be present in the identified referenced Compose file.\nCompose returns an error if:\n\n- The service denoted by `service` is not found.\n- The Compose file denoted by `file` is not found.\n\n### Merging service definitions\n\nTwo service definitions, the main one in the current Compose file and the referenced one\nspecified by `extends`, are merged in the following way:\n\n- Mappings: Keys in mappings of the main service definition override keys in mappings\n  of the referenced service definition. Keys that aren't overridden are included as is.\n- Sequences: Items are combined together into a new sequence. The order of elements is\n  preserved with the referenced items coming first and main items after.\n- Scalars: Keys in the main service definition take precedence over keys in the\n  referenced one.\n\n#### Mappings\n\nThe following keys should be treated as mappings: `annotations`, `build.args`, `build.labels`,\n`build.extra_hosts`, `deploy.labels`, `deploy.update_config`, `deploy.rollback_config`,\n`deploy.restart_policy`, `deploy.resources.limits`, `environment`, `healthcheck`,\n`labels`, `logging.options`, `sysctls`, `storage_opt`, `extra_hosts`, `ulimits`.\n\nOne exception that applies to `healthcheck` is that the main mapping cannot specify\n`disable: true` unless the  referenced mapping also specifies `disable: true`. Compose returns an error in this case.\n\nFor example, the input below:\n\n```yaml\nservices:\n  common:\n    image: busybox\n    environment:\n      TZ: utc\n      PORT: 80\n  cli:\n    extends:\n      service: common\n    environment:\n      PORT: 8080\n```\n\nProduces the following configuration for the `cli` service. The same output is\nproduced if array syntax is used.\n\n```yaml\nenvironment:\n  PORT: 8080\n  TZ: utc\nimage: busybox\n```\n\nItems under `blkio_config.device_read_bps`, `blkio_config.device_read_iops`,\n`blkio_config.device_write_bps`, `blkio_config.device_write_iops`, `devices` and\n`volumes` are also treated as mappings where key is the target path inside the\ncontainer.\n\nFor example, the input below:\n\n```yaml\nservices:\n  common:\n    image: busybox\n    volumes:\n      - common-volume:/var/lib/backup/data:rw\n  cli:\n    extends:\n      service: common\n    volumes:\n      - cli-volume:/var/lib/backup/data:ro\n```\n\nProduces the following configuration for the `cli` service. Note that the mounted path\nnow points to the new volume name and `ro` flag was applied.\n\n```yaml\nimage: busybox\nvolumes:\n- cli-volume:/var/lib/backup/data:ro\n```\n\nIf the referenced service definition contains `extends` mapping, the items under it\nare simply copied into the new merged definition. The merging process is then kicked\noff again until no `extends` keys are remaining.\n\nFor example, the input below:\n\n```yaml\nservices:\n  base:\n    image: busybox\n    user: root\n  common:\n    image: busybox\n    extends:\n      service: base\n  cli:\n    extends:\n      service: common\n```\n\nProduces the following configuration for the `cli` service. Here, `cli` services\ngets `user` key from `common` service, which in turn gets this key from `base`\nservice.\n\n```yaml\nimage: busybox\nuser: root\n```\n\n#### Sequences\n\nThe following keys should be treated as sequences: `cap_add`, `cap_drop`, `configs`,\n`deploy.placement.constraints`, `deploy.placement.preferences`,\n`deploy.reservations.generic_resources`, `device_cgroup_rules`, `expose`,\n`external_links`, `ports`, `secrets`, `security_opt`.\nAny duplicates resulting from the merge are removed so that the sequence only\ncontains unique elements.\n\nFor example, the input below:\n\n```yaml\nservices:\n  common:\n    image: busybox\n    security_opt:\n      - label:role:ROLE\n  cli:\n    extends:\n      service: common\n    security_opt:\n      - label:user:USER\n```\n\nProduces the following configuration for the `cli` service.\n\n```yaml\nimage: busybox\nsecurity_opt:\n- label:role:ROLE\n- label:user:USER\n```\n\nIn case list syntax is used, the following keys should also be treated as sequences:\n`dns`, `dns_search`, `env_file`, `tmpfs`. Unlike sequence fields mentioned above,\nduplicates resulting from the merge are not removed.\n\n#### Scalars\n\nAny other allowed keys in the service definition should be treated as scalars.\n\n## annotations\n\n`annotations` defines annotations for the container. `annotations` can use either an array or a map.\n\n```yml\nannotations:\n  com.example.foo: bar\n```\n\n```yml\nannotations:\n  - com.example.foo=bar\n```\n\n## external_links\n\n`external_links` link service containers to services managed outside of your Compose application.\n`external_links` define the name of an existing service to retrieve using the platform lookup mechanism.\nAn alias of the form `SERVICE:ALIAS` can be specified.\n\n```yml\nexternal_links:\n  - redis\n  - database:mysql\n  - database:postgresql\n```\n\n## extra_hosts\n\n`extra_hosts` adds hostname mappings to the container network interface configuration (`/etc/hosts` for Linux).\n\n### Short syntax\nShort syntax uses plain strings in a list. Values must set hostname and IP address for additional hosts in the form of `HOSTNAME=IP`.\n\n```yml\nextra_hosts:\n  - \"somehost=162.242.195.82\"\n  - \"otherhost=50.31.209.229\"\n  - \"myhostv6=::1\"\n```\n\nIPv6 addresses can be enclosed in square brackets, for example:\n\n```yml\nextra_hosts:\n  - \"myhostv6=[::1]\"\n```\n\nThe separator `=` is preferred [![Compose v2.24.1](https://img.shields.io/badge/compose-v2.24.1-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.24.1)\n but `:` can also be used. For example:\n\n```yml\nextra_hosts:\n  - \"somehost:162.242.195.82\"\n  - \"myhostv6:::1\"\n```\n\n### Long syntax\nAlternatively, `extra_hosts` can be set as a mapping between hostname(s) and IP(s)\n\n```yml\nextra_hosts:\n  somehost: \"162.242.195.82\"\n  otherhost: \"50.31.209.229\"\n  myhostv6: \"::1\"\n```\n\nCompose creates a matching entry with the IP address and hostname in the container's network\nconfiguration, which means for Linux `/etc/hosts` get extra lines:\n\n```\n162.242.195.82  somehost\n50.31.209.229   otherhost\n::1             myhostv6\n```\n\n## group_add\n\n`group_add` specifies additional groups, by name or number, which the user inside the container must be a member of.\n\nAn example of where this is useful is when multiple containers (running as different users) need to all read or write\nthe same file on a shared volume. That file can be owned by a group shared by all the containers, and specified in\n`group_add`.\n\n```yml\nservices:\n  myservice:\n    image: alpine\n    group_add:\n      - mail\n```\n\nRunning `id` inside the created container must show that the user belongs to the `mail` group, which would not have\nbeen the case if `group_add` were not declared.\n\n## healthcheck\n\n`healthcheck` declares a check that's run to determine whether or not the service containers are \"healthy\". It works in the same way, and has the same default values, as the\n[HEALTHCHECK Dockerfile instruction](https://docs.docker.com/engine/reference/builder/#healthcheck)\nset by the service's Docker image. Your Compose file can override the values set in the Dockerfile. \n\n```yml\nhealthcheck:\n  test: [\"CMD\", \"curl\", \"-f\", \"http://localhost\"]\n  interval: 1m30s\n  timeout: 10s\n  retries: 3\n  start_period: 40s\n  start_interval: 5s\n```\n\n`interval`, `timeout`, `start_period`, and `start_interval` [![Compose v2.20.2](https://img.shields.io/badge/compose-v2.20.2-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.20.2) are [specified as durations](11-extension.md#specifying-durations).\n\n`test` defines the command Compose runs to check container health. It can be\neither a string or a list. If it's a list, the first item must be either `NONE`, `CMD` or `CMD-SHELL`.\nIf it's a string, it's equivalent to specifying `CMD-SHELL` followed by that string.\n\n```yml\n# Hit the local web app\ntest: [\"CMD\", \"curl\", \"-f\", \"http://localhost\"]\n```\n\nUsing `CMD-SHELL` runs the command configured as a string using the container's default shell\n(`/bin/sh` for Linux). Both forms below are equivalent:\n\n```yml\ntest: [\"CMD-SHELL\", \"curl -f http://localhost || exit 1\"]\n```\n\n```yml\ntest: curl -f https://localhost || exit 1\n```\n\n`NONE` disables the healthcheck, and is mostly useful to disable the Healthcheck Dockerfile instruction set by the service's Docker image. Alternatively,\nthe healthcheck set by the image can be disabled by setting `disable: true`:\n\n```yml\nhealthcheck:\n  disable: true\n```\n\n## hostname\n\n`hostname` declares a custom host name to use for the service container. It must be a valid RFC 1123 hostname.\n\n## image\n\n`image` specifies the image to start the container from. `image` must follow the Open Container Specification\n[addressable image format](https://github.com/opencontainers/org/blob/master/docs/docs/introduction/digests.md),\nas `[<registry>/][<project>/]<image>[:<tag>|@<digest>]`.\n\n```yml\n    image: redis\n    image: redis:5\n    image: redis@sha256:0ed5d5928d4737458944eb604cc8509e245c3e19d02ad83935398bc4b991aac7\n    image: library/redis\n    image: docker.io/library/redis\n    image: my_private.registry:5000/redis\n```\n\nIf the image does not exist on the platform, Compose attempts to pull it based on the `pull_policy`.\nIf you are also using the [Compose Build Specification](build.md), there are alternative options for controlling the precedence of\npull over building the image from source, however pulling the image is the default behavior.\n\n`image` may be omitted from a Compose file as long as a `build` section is declared. If you are not using the Compose Build Specification, Compose won't work if `image` is missing from the Compose file.\n\n## init\n\n`init` runs an init process (PID 1) inside the container that forwards signals and reaps processes.\nSet this option to `true` to enable this feature for the service.\n\n```yml\nservices:\n  web:\n    image: alpine:latest\n    init: true\n```\n\nThe init binary that is used is platform specific.\n\n## ipc\n\n`ipc` configures the IPC isolation mode set by the service container. Available\nvalues are platform specific, but Compose defines specific values\nwhich must be implemented as described if supported:\n\n- `shareable`: Gives the container its own private IPC namespace, with a\n  possibility to share it with other containers.\n- `service:{name}`: Makes the container join another container's\n  (`shareable`) IPC namespace.\n\n```yml\n    ipc: \"shareable\"\n    ipc: \"service:[service name]\"\n```\n\n## uts\n\n[![Compose v2.15.1](https://img.shields.io/badge/compose-v2.15.1-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.15.1)\n\n\n`uts` configures the UTS namespace mode set for the service container. When unspecified\nit is the runtime's decision to assign a UTS namespace, if supported. Available values are:\n\n- `'host'`: Results in the container using the same UTS namespace as the host.\n\n```yml\n    uts: \"host\"\n```\n\n## isolation\n\n`isolation` specifies a container’s isolation technology. Supported values are platform specific.\n\n## labels\n\n`labels` add metadata to containers. You can use either an array or a map.\n\nIt's recommended that you use reverse-DNS notation to prevent your labels from conflicting with\nthose used by other software.\n\n```yml\nlabels:\n  com.example.description: \"Accounting webapp\"\n  com.example.department: \"Finance\"\n  com.example.label-with-empty-value: \"\"\n```\n\n```yml\nlabels:\n  - \"com.example.description=Accounting webapp\"\n  - \"com.example.department=Finance\"\n  - \"com.example.label-with-empty-value\"\n```\n\nCompose creates containers with canonical labels:\n\n- `com.docker.compose.project` set on all resources created by Compose to the user project name\n- `com.docker.compose.service` set on service containers with service name as defined in the Compose file\n\nThe `com.docker.compose` label prefix is reserved. Specifying labels with this prefix in the Compose file\nresults in a runtime error.\n\n## label_file\n\n[![Compose NEXT RELEASE](https://img.shields.io/badge/compose-NEXT-blue?style=flat-square)](https://github.com/docker/compose/releases/NEXT)\n\n`label_file` can be used to load multiple labels from a file. The file uses a key-value frmat, comparable\nto `env_file`. \n\nYou can specify multiple files as a List. The files in the list are processed in top-down order. If the same \nlabel is defined in multiple files, the value from the last file in the list overrides earlier ones.\n\n```yaml\nservices:\n  one:\n    label_file: ./app.labels\n\n  two:\n    label_file: \n      - ./app.labels\n      - ./additional.labels\n```\n\n## links\n\n> **Note**\n>\n> Availability of the `links` attribute is implementation specific.\n\n`links` defines a network link to containers in another service. Either specify both the service name and\na link alias (`SERVICE:ALIAS`), or just the service name.\n\n```yml\nweb:\n  links:\n    - db\n    - db:database\n    - redis\n```\n\nContainers for the linked service are reachable at a hostname identical to the alias, or the service name\nif no alias is specified.\n\nLinks are not required to enable services to communicate. When no specific network configuration is set,\nany service is able to reach any other service at that service’s name on the `default` network. If services\ndo declare networks they are attached to, `links` does not override the network configuration and services not\nattached to a shared network are not be able to communicate. Compose doesn't warn you about a configuration mismatch.\n\nLinks also express implicit dependency between services in the same way as\n[depends_on](#depends_on), so they determine the order of service startup.\n\n## logging\n\n`logging` defines the logging configuration for the service.\n\n```yml\nlogging:\n  driver: syslog\n  options:\n    syslog-address: \"tcp://192.168.0.42:123\"\n```\n\nThe `driver` name specifies a logging driver for the service's containers. The default and available values\nare platform specific. Driver specific options can be set with `options` as key-value pairs.\n\n## network_mode\n\n`network_mode` sets a service container's network mode. Available values are platform specific, but Compose defines specific values which must be implemented as described if supported:\n\n- `none`: Turns off all container networking.\n- `host`: Gives the container raw access to the host's network interface.\n- `service:{name}`: Gives the service container access to the specified service only.\n- `container:{name}`: Gives the service container access to the specified container ().\n\n```yml\n    network_mode: \"host\"\n    network_mode: \"none\"\n    network_mode: \"service:[service name]\"\n```\n\nWhen set, the [`networks`](#networks) attribute is not allowed and Compose rejects any\nCompose file containing both attributes.\n\n## networks\n\n`networks` defines the networks that service containers are attached to, referencing entries under the\n[top-level `networks` key](06-networks.md).\n\n```yml\nservices:\n  some-service:\n    networks:\n      - some-network\n      - other-network\n```\n\n### aliases\n\n`aliases` declares alternative hostnames for the service on the network. Other containers on the same\nnetwork can use either the service name or an alias to connect to one of the service's containers.\n\nSince `aliases` are network-scoped, the same service can have different aliases on different networks.\n\n> **Note**\n> A network-wide alias can be shared by multiple containers, and even by multiple services.\n> If it is, then exactly which container the name resolves to is not guaranteed.\n\n```yml\nservices:\n  some-service:\n    networks:\n      some-network:\n        aliases:\n          - alias1\n          - alias3\n      other-network:\n        aliases:\n          - alias2\n```\n\nIn the following example, service `frontend` is able to reach the `backend` service at\nthe hostname `backend` or `database` on the `back-tier` network. The service `monitoring`\nis able to reach same `backend` service at `backend` or `mysql` on the `admin` network.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    networks:\n      - front-tier\n      - back-tier\n\n  monitoring:\n    image: example/monitoring\n    networks:\n      - admin\n\n  backend:\n    image: example/backend\n    networks:\n      back-tier:\n        aliases:\n          - database\n      admin:\n        aliases:\n          - mysql\n\nnetworks:\n  front-tier:\n  back-tier:\n  admin:\n```\n\n### ipv4_address, ipv6_address\n\nSpecify a static IP address for a service container when joining the network.\n\nThe corresponding network configuration in the [top-level networks section](06-networks.md) must have an\n`ipam` attribute with subnet configurations covering each static address.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    networks:\n      front-tier:\n        ipv4_address: 172.16.238.10\n        ipv6_address: 2001:3984:3989::10\n\nnetworks:\n  front-tier:\n    ipam:\n      driver: default\n      config:\n        - subnet: \"172.16.238.0/24\"\n        - subnet: \"2001:3984:3989::/64\"\n```\n\n### link_local_ips\n\n`link_local_ips` specifies a list of link-local IPs. Link-local IPs are special IPs which belong to a well\nknown subnet and are purely managed by the operator, usually dependent on the architecture where they are\ndeployed. Implementation is platform specific.\n\nExample:\n\n```yaml\nservices:\n  app:\n    image: busybox\n    command: top\n    networks:\n      app_net:\n        link_local_ips:\n          - 57.123.22.11\n          - 57.123.22.13\nnetworks:\n  app_net:\n    driver: bridge\n```\n\n### mac_address\n\n`mac_address` sets the MAC address used by the service container when connecting to this particular network.\n\n### driver_opts\n\n[![Compose v2.27.1](https://img.shields.io/badge/compose-v2.27.1-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.27.1)\n\n`driver_opts` specifies a list of options as key-value pairs to pass to the driver. These options are\ndriver-dependent. Consult the driver's documentation for more information.\n\n```yml\nservices:\n  app:\n    networks:\n      app_net:\n        driver_opts:\n          foo: \"bar\"\n          baz: 1\n```\n\n### priority\n\n`priority` indicates in which order Compose connects the service’s containers to its\nnetworks. If unspecified, the default value is 0.\n\nIn the following example, the app service connects to `app_net_1` first as it has the highest priority. It then connects to `app_net_3`, then `app_net_2`, which uses the default priority value of 0.\n\n```yaml\nservices:\n  app:\n    image: busybox\n    command: top\n    networks:\n      app_net_1:\n        priority: 1000\n      app_net_2:\n\n      app_net_3:\n        priority: 100\nnetworks:\n  app_net_1:\n  app_net_2:\n  app_net_3:\n```\n\n## mac_address\n\n[![Compose v2.23.2](https://img.shields.io/badge/compose-v2.23.2-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.23.2)\n\n`mac_address` sets a MAC address for the service container.\n\n> **Note**\n> Container runtimes might reject this value (ie. Docker Engine >= v25.0). In that case, you should use [networks.mac_address](#mac_address) instead.\n\n## mem_limit\n\n`mem_limit` configures a limit on the amount of memory a container can allocate, set as a string expressing a [byte value](11-extension.md#specifying-byte-values).\n\n\nWhen both are set, `mem_limit` must be consistent with the `limits.memory` attribute in the [Deploy Specification](deploy.md#memory)\n\n\n## mem_reservation\n\n`mem_reservation` configures a reservation on the amount of memory a container can allocate, set as a string expressing a [byte value](11-extension.md#specifying-byte-values).\n\nWhen both are set, `mem_reservation` must be consistent with the `reservations.memory` attribute in the [Deploy Specification](deploy.md#memory)\n\n## mem_swappiness\n\n`mem_swappiness` defines as a percentage, a value between 0 and 100, for the host kernel to swap out\nanonymous memory pages used by a container.\n\n- `0`: Turns off anonymous page swapping.\n- `100`: Sets all anonymous pages as swappable.\n\nThe default value is platform specific.\n\n## memswap_limit\n\n`memswap_limit` defines the amount of memory the container is allowed to swap to disk. This is a modifier\nattribute that only has meaning if [`memory`](deploy.md#memory) is also set. Using swap lets the container write excess\nmemory requirements to disk when the container has exhausted all the memory that is available to it.\nThere is a performance penalty for applications that swap memory to disk often.\n\n- If `memswap_limit` is set to a positive integer, then both `memory` and `memswap_limit` must be set. `memswap_limit` represents the total amount of memory and swap that can be used, and `memory` controls the amount used by non-swap memory. So if `memory`=\"300m\" and `memswap_limit`=\"1g\", the container can use 300m of memory and 700m (1g - 300m) swap.\n- If `memswap_limit` is set to 0, the setting is ignored, and the value is treated as unset.\n- If `memswap_limit` is set to the same value as `memory`, and `memory` is set to a positive integer, the container does not have access to swap.\n- If `memswap_limit` is unset, and `memory` is set, the container can use as much swap as the `memory` setting, if the host container has swap memory configured. For instance, if `memory`=\"300m\" and `memswap_limit` is not set, the container can use 600m in total of memory and swap.\n- If `memswap_limit` is explicitly set to -1, the container is allowed to use unlimited swap, up to the amount available on the host system.\n\n## oom_kill_disable\n\nIf `oom_kill_disable` is set, Compose configures the platform so it won't kill the container in case\nof memory starvation.\n\n## oom_score_adj\n\n`oom_score_adj` tunes the preference for containers to be killed by platform in case of memory starvation. Value must\nbe within [-1000,1000] range.\n\n## pid\n\n`pid` sets the PID mode for container created by Compose.\nSupported values are platform specific.\n\n## pids_limit\n\n`pids_limit` tunes a container’s PIDs limit. Set to -1 for unlimited PIDs.\n\n```yml\npids_limit: 10\n```\n\nWhen both are set, `pids_limit` must be consistent with the `pids` attribute in the [Deploy Specification](deploy.md#pids)\n\n## platform\n\n`platform` defines the target platform the containers for the service run on. It uses the `os[/arch[/variant]]` syntax.\n\nThe values of `os`, `arch`, and `variant` must conform to the convention used by the [OCI Image Spec](https://github.com/opencontainers/image-spec/blob/v1.0.2/image-index.md).\n\nCompose uses this attribute to determine which version of the image is pulled\nand/or on which platform the service’s build is performed.\n\n```yml\nplatform: darwin\nplatform: windows/amd64\nplatform: linux/arm64/v8\n```\n\n## ports\n\nExposes container ports.\n\n> **Note**\n>\n> Port mapping must not be used with `network_mode: host` otherwise a runtime error occurs.\n\n### Short syntax\n\nThe short syntax is a colon-separated string to set the host IP, host port, and container port\nin the form:\n\n`[HOST:]CONTAINER[/PROTOCOL]` where:\n\n- `HOST` is `[IP:](port | range)`\n- `CONTAINER` is `port | range`\n- `PROTOCOL` to restrict port to specified protocol. `tcp` and `udp` values are defined by the Specification,\n  Compose offers support for platform-specific protocol names.\n\nIf host IP is not set, it binds to all network interfaces. Ports can be either a single\nvalue or a range. Host and container must use equivalent ranges.\n\nEither specify both ports (`HOST:CONTAINER`), or just the container port. In the latter case,\nthe container runtime automatically allocates any unassigned port of the host.\n\n`HOST:CONTAINER` should always be specified as a (quoted) string, to avoid conflicts\nwith [yaml base-60 float](https://yaml.org/type/float.html).\n\nExamples:\n\n```yml\nports:\n  - \"3000\"\n  - \"3000-3005\"\n  - \"8000:8000\"\n  - \"9090-9091:8080-8081\"\n  - \"49100:22\"\n  - \"8000-9000:80\"\n  - \"127.0.0.1:8001:8001\"\n  - \"127.0.0.1:5000-5010:5000-5010\"\n  - \"6060:6060/udp\"\n```\n\n> **Note**\n>\n> If Host IP mapping is not supported by a container engine, Compose rejects\n> the Compose file and ignores the specified host IP.\n\n### Long syntax\n\nThe long form syntax allows the configuration of additional fields that can't be\nexpressed in the short form.\n\n- `target`: The container port\n- `published`: The publicly exposed port. It is defined as a string and can be set as a range using syntax `start-end`. It means the actual port is assigned a remaining available port, within the set range.\n- `host_ip`: The Host IP mapping, unspecified means all network interfaces (`0.0.0.0`).\n- `protocol`: The port protocol (`tcp` or `udp`). Defaults to `tcp`.\n- `app_protocol`: The application procotol (TCP/IP level 4 / OSI level 7) this port is used for. This is optional and can be used as a hint for Compose to offer richer behavior for protocols that it understands.\n[![Compose v2.26.0](https://img.shields.io/badge/compose-v2.26.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.26.0)\n- `mode`: `host`: For publishing a host port on each node, or `ingress` for a port to be load balanced. Defaults to `ingress`.\n- `name`: A human-readable name for the port, used to document its usage within the service\n\n```yml\nports:\n  - name: web\n    target: 80\n    host_ip: 127.0.0.1\n    published: \"8080\"\n    protocol: tcp\n    app_protocol: http\n    mode: host    \n\n  - name: web-secured\n    target: 443\n    host_ip: 127.0.0.1\n    published: \"8083-9000\"\n    protocol: tcp\n    app_protocol: https\n    mode: host\n```\n\n## post_start\n\n`post_start` defines a sequence of lifecycle hooks to run after a container has started. The exact timing of when the command is run is not guaranteed.\n\n- `command`: The command to run after the container has started. This attribute is required.\n- `user`: The user to run the command. If not set, the command is run with the same user as the main service command.\n- `privileged`: Lets the post_start command run with privileged access.\n- `working_dir`: The working directory in which to run the command. If not set, it is run in the same working directory as the main service command.\n- `environment`: Sets the environment variables to run the post_start command. The command inherits the `environment` set for the service's main command, \n  and this section lets you to append or override values.\n\n```yaml\nservices:\n  test:\n    post_start:\n      - command: ./do_something_on_startup.sh\n        user: root\n        privileged: true\n        environment:\n          - FOO=BAR\n```\n\n## pre_stop\n\n`pre_stop` defines a sequence of lifecycle hooks to run before service termination.\n\nConfiguration is equivalent to [`post_start](#post_start).\n\n## privileged\n\n`privileged` configures the service container to run with elevated privileges. Support and actual impacts are platform specific.\n\n## profiles\n\n`profiles` defines a list of named profiles for the service to be enabled under. If unassigned, the service is always started but if assigned, it is only started if the profile is activated.\n\nIf present, `profiles` follow the regex format of `[a-zA-Z0-9][a-zA-Z0-9_.-]+`.\n\n```yaml\nservices:\n  frontend:\n    image: frontend\n    profiles: [\"frontend\"]\n\n  phpmyadmin:\n    image: phpmyadmin\n    depends_on:\n      - db\n    profiles:\n      - debug\n```\n\n## pull_policy\n\n`pull_policy` defines the decisions Compose makes when it starts to pull images. Possible values are:\n\n* `always`: Compose always pulls the image from the registry.\n* `never`: Compose doesn't pull the image from a registry and relies on the platform cached image.\n   If there is no cached image, a failure is reported.\n* `missing`: Compose pulls the image only if it's not available in the platform cache.\n   This is the default option if you are not also using the [Compose Build Specification](build.md).\n  `if_not_present` is considered an alias for this value for backward compatibility.\n* `build`: Compose builds the image. Compose rebuilds the image if it's already present.\n\n## read_only\n\n`read_only` configures the service container to be created with a read-only filesystem.\n\n## restart\n\n`restart` defines the policy that the platform applies on container termination.\n\n- `no`: The default restart policy. It does not restart the container under any circumstances.\n- `always`: The policy always restarts the container until its removal.\n- `on-failure`: The policy restarts the container if the exit code indicates an error.\n- `unless-stopped`: The policy restarts the container irrespective of the exit code but stops\n  restarting when the service is stopped or removed.\n\n```yml\n    restart: \"no\"\n    restart: always\n    restart: on-failure\n    restart: unless-stopped\n```\n\n## runtime\n\n`runtime` specifies which runtime to use for the service’s containers.\n\nThe value of `runtime` is specific to the implementation.\nFor example, `runtime` can be the name of [an implementation of OCI Runtime Spec](https://github.com/opencontainers/runtime-spec/blob/master/implementations.md), such as \"runc\".\n\n```yml\nweb:\n  image: busybox:latest\n  command: true\n  runtime: runc\n```\n\n## scale\n\n`scale` specifies the default number of containers to deploy for this service.\nWhen both are set, `scale` must be consistent with the `replicas` attribute in the [Deploy Specification](deploy.md#replicas).\n\n## secrets\n\n`secrets` grants access to sensitive data defined by [secrets](09-secrets.md) on a per-service basis. Two\ndifferent syntax variants are supported; the short syntax and the long syntax.\n\nCompose reports an error if the secret doesn't exist on the platform or isn't defined in the\n[`secrets`](09-secrets.md) section of the Compose file.\n\nServices can be granted access to multiple secrets. Long and short syntax for secrets may be used in the\nsame Compose file. Defining a secret in the top-level `secrets` must not imply granting any service access to it.\nSuch grant must be explicit within service specification as [secrets](09-secrets.md) service element.\n\n### Short syntax\n\nThe short syntax variant only specifies the secret name. This grants the\ncontainer access to the secret and mounts it as read-only to `/run/secrets/<secret_name>`\nwithin the container. The source name and destination mountpoint are both set\nto the secret name.\n\nThe following example uses the short syntax to grant the `frontend` service\naccess to the `server-certificate` secret. The value of `server-certificate` is set\nto the contents of the file `./server.cert`.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    secrets:\n      - server-certificate\nsecrets:\n  server-certificate:\n    file: ./server.cert\n```\n\n### Long syntax\n\nThe long syntax provides more granularity in how the secret is created within\nthe service's containers.\n\n- `source`: The name of the secret as it exists on the platform.\n- `target`: The name of the file to be mounted in `/run/secrets/` in the\n  service's task container, or absolute path of the file if an alternate location is required. Defaults to `source` if not specified.\n- `uid` and `gid`: The numeric UID or GID that owns the file within\n  `/run/secrets/` in the service's task containers. Default value is USER running container.\n- `mode`: The [permissions](https://wintelguy.com/permissions-calc.pl) for the file to be mounted in `/run/secrets/`\n  in the service's task containers, in octal notation.\n  The default value is world-readable permissions (mode `0444`).\n  The writable bit must be ignored if set. The executable bit may be set.\n\nNote that the `uid`, `gid`, and `mode` attributes are implementation specific. \n\nThe following example sets the name of the `server-certificate` secret file to `server.crt`\nwithin the container, sets the mode to `0440` (group-readable), and sets the user and group\nto `103`. The value of `server-certificate` secret is provided by the platform through a lookup and\nthe secret's lifecycle is not directly managed by Compose.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    secrets:\n      - source: server-certificate\n        target: server.cert\n        uid: \"103\"\n        gid: \"103\"\n        mode: 0440\nsecrets:\n  server-certificate:\n    external: true\n```\n\n## security_opt\n\n`security_opt` overrides the default labeling scheme for each container.\n\n```yml\nsecurity_opt:\n  - label:user:USER\n  - label:role:ROLE\n```\n\nFor further default labeling schemes you can override, see [Security configuration](https://docs.docker.com/engine/reference/run/#security-configuration).\n\n## shm_size\n\n`shm_size` configures the size of the shared memory (`/dev/shm` partition on Linux) allowed by the service container.\nIt's specified as a [byte value](11-extension.md#specifying-byte-values).\n\n## stdin_open\n\n`stdin_open` configures a service containers to run with an allocated stdin.\n\n## stop_grace_period\n\n`stop_grace_period` specifies how long Compose must wait when attempting to stop a container if it doesn't\nhandle SIGTERM (or whichever stop signal has been specified with\n[`stop_signal`](#stop_signal)), before sending SIGKILL. It's specified\nas a [duration](11-extension.md#specifying-durations).\n\n```yml\n    stop_grace_period: 1s\n    stop_grace_period: 1m30s\n```\n\nDefault value is 10 seconds for the container to exit before sending SIGKILL.\n\n## stop_signal\n\n`stop_signal` defines the signal that Compose uses to stop the service containers.\nIf unset containers are stopped by Compose by sending `SIGTERM`.\n\n```yml\nstop_signal: SIGUSR1\n```\n\n## storage_opt\n\n`storage_opt` defines storage driver options for a service.\n\n```yml\nstorage_opt:\n  size: '1G'\n```\n\n## sysctls\n\n`sysctls` defines kernel parameters to set in the container. `sysctls` can use either an array or a map.\n\n```yml\nsysctls:\n  net.core.somaxconn: 1024\n  net.ipv4.tcp_syncookies: 0\n```\n\n```yml\nsysctls:\n  - net.core.somaxconn=1024\n  - net.ipv4.tcp_syncookies=0\n```\n\nYou can only use sysctls that are namespaced in the kernel. Docker does not\nsupport changing sysctls inside a container that also modify the host system.\nFor an overview of supported sysctls, refer to [configure namespaced kernel\nparameters (sysctls) at runtime](https://docs.docker.com/engine/reference/commandline/run/#sysctl).\n\n## tmpfs\n\n`tmpfs` mounts a temporary file system inside the container. It can be a single value or a list.\n\n```yml\ntmpfs: \n - <path>\n - <path>:<options>\n```\n\n- <path>: The path inside the container where the tmpfs will be mounted.\n- <options>: Comma-separated list of options for the tmpfs mount.\n\nAvailable options:\n - `mode`: Sets the file system permissions.\n - `uid`: Sets the user ID that owns the mounted tmpfs.\n - `gid`: Sets the group ID that owns the mounted tmpfs.\n\n```yml\nservices:\n  app:\n    tmpfs:\n      - /data:mode=755,uid=1009,gid=1009\n      - /run\n```\n\n## tty\n\n`tty` configures service container to run with a TTY.\n\n## ulimits\n\n`ulimits` overrides the default ulimits for a container. It's specified either as an integer for a single limit\nor as mapping for soft/hard limits.\n\n```yml\nulimits:\n  nproc: 65535\n  nofile:\n    soft: 20000\n    hard: 40000\n```\n\n## user\n\n`user` overrides the user used to run the container process. The default is set by the image (i.e. Dockerfile `USER`). If it's not set, then `root`.\n\n## userns_mode\n\n`userns_mode` sets the user namespace for the service. Supported values are platform specific and may depend\non platform configuration.\n\n```yml\nuserns_mode: \"host\"\n```\n\n## volumes\n\n`volumes` define mount host paths or named volumes that are accessible by service containers. You can use `volumes` to define multiple types of mounts; `volume`, `bind`, `tmpfs`, or `npipe`. \n\nIf the mount is a host path and is only used by a single service, it can be declared as part of the service\ndefinition. To reuse a volume across multiple services, a named\nvolume must be declared in the [top-level `volumes` key](07-volumes.md).\n\nThe following example shows a named volume (`db-data`) being used by the `backend` service,\nand a bind mount defined for a single service.\n\n```yml\nservices:\n  backend:\n    image: example/backend\n    volumes:\n      - type: volume\n        source: db-data\n        target: /data\n        volume:\n          nocopy: true\n          subpath: sub\n      - type: bind\n        source: /var/run/postgres/postgres.sock\n        target: /var/run/postgres/postgres.sock\n\nvolumes:\n  db-data:\n```\n\n### Short syntax\n\nThe short syntax uses a single string with colon-separated values to specify a volume mount\n(`VOLUME:CONTAINER_PATH`), or an access mode (`VOLUME:CONTAINER_PATH:ACCESS_MODE`).\n\n- `VOLUME`: Can be either a host path on the platform hosting containers (bind mount) or a volume name.\n- `CONTAINER_PATH`: The path in the container where the volume is mounted.\n- `ACCESS_MODE`: A comma-separated `,` list of options:\n  - `rw`: Read and write access. This is the default if none is specified.\n  - `ro`: Read-only access.\n  - `z`: SELinux option indicating that the bind mount host content is shared among multiple containers.\n  - `Z`: SELinux option indicating that the bind mount host content is private and unshared for other containers.\n\n> **Note**\n>\n> The SELinux re-labeling bind mount option is ignored on platforms without SELinux.\n\n> **Note**\n> Relative host paths are only supported by Compose that deploy to a\n> local container runtime. This is because the relative path is resolved from the Compose file’s parent\n> directory which is only applicable in the local case. When Compose deploys to a non-local\n> platform it rejects Compose files which use relative host paths with an error. To avoid ambiguities\n> with named volumes, relative paths should always begin with `.` or `..`.\n\n### Long syntax\n\nThe long form syntax allows the configuration of additional fields that can't be\nexpressed in the short form.\n\n- `type`: The mount type. Either `volume`, `bind`, `tmpfs`, `npipe`, or `cluster`\n- `source`: The source of the mount, a path on the host for a bind mount, or the\n  name of a volume defined in the\n  [top-level `volumes` key](07-volumes.md). Not applicable for a tmpfs mount.\n- `target`: The path in the container where the volume is mounted.\n- `read_only`: Flag to set the volume as read-only.\n- `bind`: Used to configure additional bind options:\n  - `propagation`: The propagation mode used for the bind.\n  - `create_host_path`: Creates a directory at the source path on host if there is nothing present.\n    Compose does nothing if there is something present at the path. This is automatically implied by short syntax\n    for backward compatibility with `docker-compose` legacy.\n  - `selinux`: The SELinux re-labeling option `z` (shared) or `Z` (private)\n- `volume`: Configures additional volume options:\n  - `nocopy`: Flag to disable copying of data from a container when a volume is created.\n  - `subpath`: Path inside a volume to mount instead of the volume root.\n- `tmpfs`: Configures additional tmpfs options:\n  - `size`: The size for the tmpfs mount in bytes (either numeric or as bytes unit).\n  - `mode`: The file mode for the tmpfs mount as Unix permission bits as an octal number. [![Compose v2.14.0](https://img.shields.io/badge/compose-v2.14.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.14.0)\n- `consistency`: The consistency requirements of the mount. Available values are platform specific.\n\n## volumes_from\n\n`volumes_from` mounts all of the volumes from another service or container. You can optionally specify\nread-only access `ro` or read-write `rw`. If no access level is specified, then read-write access is used.\n\nYou can also mount volumes from a container that is not managed by Compose by using the `container:` prefix.\n\n```yaml\nvolumes_from:\n  - service_name\n  - service_name:ro\n  - container:container_name\n  - container:container_name:rw\n```\n\n## working_dir\n\n`working_dir` overrides the container's working directory which is specified by the image, for example Dockerfile's `WORKDIR`.\n# Networks top-level element\n\nNetworks are the layer that allow services to communicate with each other.\n\nThe top-level `networks` element lets you configure named networks that can be reused across multiple services. To use a network across multiple services, you must explicitly grant each service access by using the [networks](05-services.md) attribute within the `services` top-level element. The `networks` top-level element has additional syntax that provides more granular control.\n\n## Examples\n\n### Basic example\n\nIn the following example, at runtime, networks `front-tier` and `back-tier` are created and the `frontend` service\nis connected to `front-tier` and `back-tier` networks.\n\n```yml\nservices:\n  frontend:\n    image: example/webapp\n    networks:\n      - front-tier\n      - back-tier\n\nnetworks:\n  front-tier:\n  back-tier:\n```\n\n### Advanced example\n\n```yml\nservices:\n  proxy:\n    build: ./proxy\n    networks:\n      - frontend\n  app:\n    build: ./app\n    networks:\n      - frontend\n      - backend\n  db:\n    image: postgres\n    networks:\n      - backend\n\nnetworks:\n  frontend:\n    # Use a custom driver\n    driver: custom-driver-1\n  backend:\n    # Use a custom driver which takes special options\n    driver: custom-driver-2\n    driver_opts:\n      foo: \"1\"\n      bar: \"2\"\n```\n\nThe advanced example shows a Compose file which defines two custom networks. The `proxy` service is isolated from the `db` service, because they do not share a network in common. Only `app` can talk to both.\n\n## Attributes\n\n### driver\n\n`driver` specifies which driver should be used for this network. Compose returns an error if the\ndriver is not available on the platform.\n\n```yml\nnetworks:\n  db-data:\n    driver: overlay\n```\n\n### driver_opts\n\n`driver_opts` specifies a list of options as key-value pairs to pass to the driver. These options are\ndriver-dependent. Consult the driver's documentation for more information. \n\n```yml\nnetworks:\n  db-data:\n    driver_opts:\n      foo: \"bar\"\n      baz: 1\n```\n\n### attachable\n\nIf `attachable` is set to `true`, then standalone containers should be able to attach to this network, in addition to services.\nIf a standalone container attaches to the network, it can communicate with services and other standalone containers\nthat are also attached to the network.\n\n```yml\nnetworks:\n  mynet1:\n    driver: overlay\n    attachable: true\n```\n\n### enable_ipv6\n\n`enable_ipv6` enables IPv6 networking. For an example, see step four of [Create an IPv6 network](https://docs.docker.com/config/daemon/ipv6/).\n\n## external\n\nIf set to `true`:\n - `external` specifies that this network’s lifecycle is maintained outside of that of the application.\nCompose doesn't attempt to create these networks, and returns an error if one doesn't exist.\n - All other attributes apart from name are irrelevant. If Compose detects any other attribute, it rejects the Compose file as invalid.\n\nIn the example below, `proxy` is the gateway to the outside world. Instead of attempting to create a network, Compose\nqueries the platform for an existing network simply called `outside` and connects the\n`proxy` service's containers to it.\n\n```yml\n\nservices:\n  proxy:\n    image: example/proxy\n    networks:\n      - outside\n      - default\n  app:\n    image: example/app\n    networks:\n      - default\n\nnetworks:\n  outside:\n    external: true\n```\n\n### ipam\n\n`ipam` specifies a custom IPAM configuration. This is an object with several properties, each of which is optional:\n\n- `driver`: Custom IPAM driver, instead of the default.\n- `config`: A list with zero or more configuration elements, each containing a:\n  - `subnet`: Subnet in CIDR format that represents a network segment\n  - `ip_range`: Range of IPs from which to allocate container IPs\n  - `gateway`: IPv4 or IPv6 gateway for the master subnet\n  - `aux_addresses`: Auxiliary IPv4 or IPv6 addresses used by Network driver, as a mapping from hostname to IP\n- `options`: Driver-specific options as a key-value mapping.\n\n```yml\nnetworks:\n  mynet1:\n    ipam:\n      driver: default\n      config:\n        - subnet: 172.28.0.0/16\n          ip_range: 172.28.5.0/24\n          gateway: 172.28.5.254\n          aux_addresses:\n            host1: 172.28.1.5\n            host2: 172.28.1.6\n            host3: 172.28.1.7\n      options:\n        foo: bar\n        baz: \"0\"\n```\n\n## internal\n\nBy default, Compose provides external connectivity to networks. `internal`, when set to `true`, allows you to\ncreate an externally isolated network.\n\n## labels\n\nAdd metadata to containers using `labels`. You can use either an array or a dictionary.\n\nIt is recommended that you use reverse-DNS notation to prevent labels from conflicting with those used by other software.\n\n```yml\nnetworks:\n  mynet1:\n    labels:\n      com.example.description: \"Financial transaction network\"\n      com.example.department: \"Finance\"\n      com.example.label-with-empty-value: \"\"\n```\n\n```yml\nnetworks:\n  mynet1:\n    labels:\n      - \"com.example.description=Financial transaction network\"\n      - \"com.example.department=Finance\"\n      - \"com.example.label-with-empty-value\"\n```\n\nCompose sets `com.docker.compose.project` and `com.docker.compose.network` labels.\n\n## name\n\n`name` sets a custom name for the network. The name field can be used to reference networks which contain special characters.\nThe name is used as is and is not scoped with the project name.\n\n```yml\nnetworks:\n  network1:\n    name: my-app-net\n```\n\nIt can also be used in conjunction with the `external` property to define the platform network that Compose\nshould retrieve, typically by using a parameter so the Compose file doesn't need to hard-code runtime specific values:\n\n```yml\nnetworks:\n  network1:\n    external: true\n    name: \"${NETWORK_ID}\"\n```\n# Volumes top-level element\n\nVolumes are persistent data stores implemented by the container engine. Compose offers a neutral way for services to mount volumes, and configuration parameters to allocate them to infrastructure.\n\nThe top-level `volumes` declaration lets you configure named volumes that can be reused across multiple services. To use a volume across multiple services, you must explicitly grant each service access by using the [volumes](05-services.md#volumes) attribute within the `services` top-level element. The `volumes` attribute has additional syntax that provides more granular control.\n\n## Example\n\nThe following example shows a two-service setup where a database's data directory is shared with another service as a volume, named\n`db-data`, so that it can be periodically backed up.\n\n```yml\nservices:\n  backend:\n    image: example/database\n    volumes:\n      - db-data:/etc/data\n\n  backup:\n    image: backup-service\n    volumes:\n      - db-data:/var/lib/backup/data\n\nvolumes:\n  db-data:\n```\n\nThe `db-data` volume is mounted at the `/var/lib/backup/data` and `/etc/data` container paths for backup and backend respectively.\n\nRunning `docker compose up` creates the volume if it doesn't already exist. Otherwise, the existing volume is used and is recreated if it's manually deleted outside of Compose.\n\n## Attributes\n\nAn entry under the top-level `volumes` section can be empty, in which case it uses the container engine's default configuration for\ncreating a volume. Optionally, you can configure it with the following keys:\n\n### driver\n\nSpecifies which volume driver should be used. Default and available values are platform specific. If the driver is not available, Compose returns an error and doesn't deploy the application.\n\n```yml\nvolumes:\n  db-data:\n    driver: foobar\n```\n\n### driver_opts\n\n`driver_opts` specifies a list of options as key-value pairs to pass to the driver for this volume. The options are driver-dependent.\n\n```yml\nvolumes:\n  example:\n    driver_opts:\n      type: \"nfs\"\n      o: \"addr=10.40.0.199,nolock,soft,rw\"\n      device: \":/docker/example\"\n```\n\n### external\n\nIf set to `true`:\n - `external` specifies that this volume already exists on the platform and its lifecycle is managed outside\nof that of the application. Compose doesn't then create the volume, and returns an error if the volume doesn't  exist.\n - All other attributes apart from `name` are irrelevant. If Compose detects any other attribute, it rejects the Compose file as invalid.\n\nIn the example below, instead of attempting to create a volume called\n`{project_name}_db-data`, Compose looks for an existing volume simply\ncalled `db-data` and mounts it into the `backend` service's containers.\n\n```yml\nservices:\n  backend:\n    image: example/database\n    volumes:\n      - db-data:/etc/data\n\nvolumes:\n  db-data:\n    external: true\n```\n\n### labels\n\n`labels` are used to add metadata to volumes. You can use either an array or a dictionary.\n\nIt's recommended that you use reverse-DNS notation to prevent your labels from conflicting with those used by other software.\n\n```yml\nvolumes:\n  db-data:\n    labels:\n      com.example.description: \"Database volume\"\n      com.example.department: \"IT/Ops\"\n      com.example.label-with-empty-value: \"\"\n```\n\n```yml\nvolumes:\n  db-data:\n    labels:\n      - \"com.example.description=Database volume\"\n      - \"com.example.department=IT/Ops\"\n      - \"com.example.label-with-empty-value\"\n```\n\nCompose sets `com.docker.compose.project` and `com.docker.compose.volume` labels.\n\n### name\n\n`name` sets a custom name for a volume. The name field can be used to reference volumes that contain special\ncharacters. The name is used as is and is not scoped with the stack name.\n\n```yml\nvolumes:\n  db-data:\n    name: \"my-app-data\"\n```\n\nThis makes it possible to make this lookup name a parameter of the Compose file, so that the model ID for the volume is hard-coded but the actual volume ID on the platform is set at runtime during deployment. \n\nFor example, if `DATABASE_VOLUME=my_volume_001` in your `.env` file:\n\n```yml\nvolumes:\n  db-data:\n      name: ${DATABASE_VOLUME}\n```\n\nRunning `docker compose up` uses the volume called `my_volume_001`. \n\nIt can also be used in conjunction with the `external` property. This means the name of the volume used to lookup the actual volume on the platform is set separately from the name used to refer to it within the Compose file:\n\n```yml\nvolumes:\n  db-data:\n    external:\n      name: actual-name-of-volume\n```\n\n# Configs top-level element\n\nConfigs allow services to adapt their behaviour without the need to rebuild a Docker image.\n\nServices can only access configs when explicitly granted by a [`configs`](05-services.md#configs) attribute within the `services` top-level element.\n\nAs with volumes, configs are mounted as files into a service's container's filesystem. The location of the mount point within the container defaults to `/<config-name>` in Linux containers and `C:\\<config-name>` in Windows containers. \n\nBy default, the config:\n- Is owned by the user running the container command but can be overridden by service configuration.\n- Has world-readable permissions (mode 0444), unless the service is configured to override this.\n\nThe top-level `configs` declaration defines or references configuration data that is granted to services in your Compose application. The source of the config is either `file` or `external`.\n\n- `file`: The config is created with the contents of the file at the specified path.\n- `environment`: The config content is created with the value of an environment variable.\n- `content`: The content is created with the inlined value.\n[![Compose v2.23.1](https://img.shields.io/badge/compose-v2.23.1-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.23.1)\n- `external`: If set to true, `external` specifies that this config has already been created. Compose does not\n  attempt to create it, and if it does not exist, an error occurs.\n- `name`: The name of the config object in the container engine to look up. This field can be used to\n  reference configs that contain special characters. The name is used as is\n  and will **not** be scoped with the project name.\n\n## Example 1\n\n`<project_name>_http_config` is created when the application is deployed,\nby registering the content of the `httpd.conf` as the configuration data.\n\n```yml\nconfigs:\n  http_config:\n    file: ./httpd.conf\n```\n\nAlternatively, `http_config` can be declared as external. Compose looks up `http_config` to expose the configuration data to relevant services.\n\n```yml\nconfigs:\n  http_config:\n    external: true\n```\n\n## Example 2\n\n`<project_name>_app_config` is created when the application is deployed,\nby registering the inlined content as the configuration data. This comes with the\nbenefits Compose will infer variables when creating the config, which allows to\nadjust content according to service configuration:\n\n```yml\nconfigs:\n  app_config:\n    content: |\n      debug=${DEBUG}\n      spring.application.admin.enabled=${DEBUG}\n      spring.application.name=${COMPOSE_PROJECT_NAME}\n```\n\n## Example 3\n\nExternal configs lookup can also use a distinct key by specifying a `name`. \n\nThe following\nexample modifies the previous one to look up a config using the parameter `HTTP_CONFIG_KEY`. The\nthe actual lookup key will is set at deployment time by the [interpolation](12-interpolation.md) of\nvariables, but exposed to containers as hard-coded ID `http_config`.\n\n```yml\nconfigs:\n  http_config:\n    external: true\n    name: \"${HTTP_CONFIG_KEY}\"\n```\n\nIf `external` is set to `true`, all other attributes apart from `name` are irrelevant. If Compose detecs any other attribute, it rejects the Compose file as invalid.\n# Secrets top-level element\n\nSecrets are a flavor of [Configs](08-configs.md) focusing on sensitive data, with specific constraint for this usage. \n\nServices can only access secrets when explicitly granted by a [`secrets`](05-services.md#secrets) attribute within the `services` top-level element.\n\nThe top-level `secrets` declaration defines or references sensitive data that is granted to the services in your Compose\napplication. The source of the secret is either `file` or `environment`.\n\n- `file`: The secret is created with the contents of the file at the specified path.\n- `environment`: The secret is created with the value of an environment variable. [![Compose v2.6.0](https://img.shields.io/badge/compose-v2.6.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.6.0)\n- `external`: If set to true, `external` specifies that this secret has already been created. Compose does\n  not attempt to create it, and if it does not exist, an error occurs.\n- `name`: The name of the secret object in Docker. This field can be used to\n  reference secrets that contain special characters. The name is used as is\n  and isn't scoped with the project name.\n\n## Example 1\n\n`server-certificate` secret is created as `<project_name>_server-certificate` when the application is deployed,\nby registering content of the `server.cert` as a platform secret.\n\n```yml\nsecrets:\n  server-certificate:\n    file: ./server.cert\n```\n\n## Example 2 \n\n`token` secret  is created as `<project_name>_token` when the application is deployed,\nby registering the content of the `OAUTH_TOKEN` environment variable as a platform secret.\n\n```yml\nsecrets:\n  token:\n    environment: \"OAUTH_TOKEN\"\n```\n\nAlternatively, `server-certificate` can be declared as external. Compose looks up the `server-certificate` secret to expose to relevant services.\n\n```yml\nsecrets:\n  server-certificate:\n    external: true\n```\n\n## Example 3\n\nExternal secrets lookup can also use a distinct key by specifying a `name`. \n\nThe following example modifies the previous example to look up a secret using the name `CERTIFICATE_KEY`. The actual lookup key is set at deployment time by the [interpolation](12-interpolation.md) of\nvariables, but exposed to containers as hard-coded ID `server-certificate`.\n\n```yml\nsecrets:\n  server-certificate:\n    external: true\n    name: \"${CERTIFICATE_KEY}\"\n```\n\nIf `external` is set to `true`, all other attributes apart from `name` are irrelevant. If Compose detects any other attribute, it rejects the Compose file as invalid.\n\nYour Compose file needs to explicitly grant access to the secrets to relevant services in your application.\n# Fragments\n\nWith Compose, you can use built-in [YAML](https://www.yaml.org/spec/1.2/spec.html#id2765878) features to make your Compose file neater and more efficient. Anchors and aliases let you create re-usable blocks. This is useful if you start to find common configurations that span multiple services. Having re-usable blocks minimizes potential mistakes.\n\nAnchors are created using the `&` sign. The sign is followed by an alias name. You can use this alias with the `*` sign later to reference the value following the anchor. Make sure there is no space between the `&` and the `*` characters and the following alias name. \n\nYou can use more than one anchor and alias in a single Compose file.\n\n## Example 1\n\n```yml\nvolumes:\n  db-data: &default-volume\n    driver: default\n  metrics: *default-volume\n```\n\nIn the example above, a `default-volume` anchor is created based on the `db-data` volume. It is later reused by the alias `*default-volume` to define the `metrics` volume. \n\nAnchor resolution takes place before [variables interpolation](12-interpolation.md), so variables can't be used to set anchors or aliases.\n\n## Example 2\n\n```yml\nservices:\n  first:\n    image: my-image:latest\n    environment: &env\n      - CONFIG_KEY\n      - EXAMPLE_KEY\n      - DEMO_VAR\n  second:\n    image: another-image:latest\n    environment: *env\n```\n\nIf you have an anchor that you want to use in more than one service, use it in conjunction with an [extension](11-extension.md) to make your Compose file easier to maintain.\n\n## Example 3\n\nYou may want to partially override values. Compose follows the rule outlined by [YAML merge type](https://yaml.org/type/merge.html). \n\nIn the following example, `metrics` volume specification uses alias\nto avoid repetition but overrides `name` attribute:\n\n```yml\n\nservices:\n  backend:\n    image: example/database\n    volumes:\n      - db-data\n      - metrics\nvolumes:\n  db-data: &default-volume\n    driver: default\n    name: \"data\"\n  metrics:\n    <<: *default-volume\n    name: \"metrics\"\n```\n\n## Example 4\n\nYou can also extend the anchor to add additional values.\n\n```yml\nservices:\n  first:\n    image: my-image:latest\n    environment: &env\n      FOO: BAR\n      ZOT: QUIX\n  second:\n    image: another-image:latest\n    environment:\n      <<: *env\n      YET_ANOTHER: VARIABLE\n```\n\n> **Note**\n>\n> [YAML merge](https://yaml.org/type/merge.html) only applies to mappings, and can't be used with sequences. \n\nIn example above, the environment variables must be declared using the `FOO: BAR` mapping syntax, while the sequence syntax `- FOO=BAR` is only valid when no fragments are involved. \n# Extension\n\nAs with [Fragments](10-fragments.md), Extensions can be used to make your Compose file more efficient and easier to maintain. Extensions can also be used with [anchors and aliases](10-fragments.md).\n\nUse the prefix `x-` as a top-level element to modularize configurations that you want to reuse. \nCompose ignores any fields that start with `x-`, this is the sole exception where Compose silently ignores unrecognized fields.\n\nThey also can be used within any structure in a Compose file where user-defined keys are not expected. \nCompose use those to enable experimental features, the same way browsers add support for [custom CSS features](https://www.w3.org/TR/2011/REC-CSS2-20110607/syndata.html#vendor-keywords)\n\n## Example 1\n\n```yml\nx-custom:\n  foo:\n    - bar\n    - zot\n\nservices:\n  webapp:\n    image: example/webapp\n    x-foo: bar\n```\n\n```yml\nservice:\n  backend:\n    deploy:\n      placement:\n        x-aws-role: \"arn:aws:iam::XXXXXXXXXXXX:role/foo\"\n        x-aws-region: \"eu-west-3\"\n        x-azure-region: \"france-central\"\n```\n\n## Example 2\n\n```yml\nx-env: &env\n  environment:\n    - CONFIG_KEY\n    - EXAMPLE_KEY\n \nservices:\n  first:\n    <<: *env\n    image: my-image:latest\n  second:\n    <<: *env\n    image: another-image:latest\n```\n\nIn this example, the environment variables do not belong to either of the services. They’ve been lifted out completely into the `x-env` extension field.\nThis defines a new node which contains the environment field. The `&env` YAML anchor is used so both services can reference the extension field’s value as `*env`.\n\n## Example 3\n\n```yml\nx-function: &function\n labels:\n   function: \"true\"\n depends_on:\n   - gateway\n networks:\n   - functions\n deploy:\n   placement:\n     constraints:\n       - 'node.platform.os == linux'\nservices:\n # Node.js gives OS info about the node (Host)\n nodeinfo:\n   <<: *function\n   image: functions/nodeinfo:latest\n   environment:\n     no_proxy: \"gateway\"\n     https_proxy: $https_proxy\n # Uses `cat` to echo back response, fastest function to execute.\n echoit:\n   <<: *function\n   image: functions/alpine:health\n   environment:\n     fprocess: \"cat\"\n     no_proxy: \"gateway\"\n     https_proxy: $https_proxy\n```\n\nThe `nodeinfo` and `echoit` services both include the `x-function` extension via the `&function` anchor, then set their specific image and environment. \n\n## Example 4 \n\nUsing [YAML merge](https://yaml.org/type/merge.html) it is also possible to use multiple extensions and share\nand override additional attributes for specific needs:\n\n```yml\nx-environment: &default-environment\n  FOO: BAR\n  ZOT: QUIX\nx-keys: &keys\n  KEY: VALUE\nservices:\n  frontend:\n    image: example/webapp\n    environment: \n      << : [*default-environment, *keys]\n      YET_ANOTHER: VARIABLE\n```\n\n> **Note**\n>\n> [YAML merge](https://yaml.org/type/merge.html) only applies to mappings, and can't be used with sequences. \n>\n> In the example above, the environment variables are declared using the `FOO: BAR` mapping syntax, while the sequence syntax `- FOO=BAR` is only valid when no fragments are involved.\n\n## Informative Historical Notes\n\nThis section is informative. At the time of writing, the following prefixes are known to exist:\n\n| Prefix     | Vendor/Organization |\n| ---------- | ------------------- |\n| docker     | Docker              |\n| kubernetes | Kubernetes          |\n\n## Specifying byte values\n\nValues express a byte value as a string in `{amount}{byte unit}` format:\nThe supported units are `b` (bytes), `k` or `kb` (kilo bytes), `m` or `mb` (mega bytes) and `g` or `gb` (giga bytes).\n\n```\n    2b\n    1024kb\n    2048k\n    300m\n    1gb\n```\n\n## Specifying durations\n\nValues express a duration as a string in the form of `{value}{unit}`.\nThe supported units are `us` (microseconds), `ms` (milliseconds), `s` (seconds), `m` (minutes) and `h` (hours).\nValues can combine multiple values without separator.\n\n```\n  10ms\n  40s\n  1m30s\n  1h5m30s20ms\n```\n# Interpolation\n\nValues in a Compose file can be set by variables and interpolated at runtime. Compose files use a Bash-like\nsyntax `${VARIABLE}`.\n\nBoth `$VARIABLE` and `${VARIABLE}` syntax is supported. Default values can be defined inline using typical shell syntax:\n\n- `${VARIABLE:-default}` evaluates to `default` if `VARIABLE` is unset or\n  empty in the environment.\n- `${VARIABLE-default}` evaluates to `default` only if `VARIABLE` is unset\n  in the environment.\n\nSimilarly, the following syntax allows you to specify mandatory variables:\n\n- `${VARIABLE:?err}` exits with an error message containing `err` if\n  `VARIABLE` is unset or empty in the environment.\n- `${VARIABLE?err}` exits with an error message containing `err` only if\n  `VARIABLE` is unset in the environment.\n\nInterpolation can also be nested:\n\n- `${VARIABLE:-${FOO}}`\n- `${VARIABLE?$FOO}`\n- `${VARIABLE:-${FOO:-default}}`\n\nOther extended shell-style features, such as `${VARIABLE/foo/bar}`, are not\nsupported by Compose.\n\nCompose will process any string following a `$` sign as long as it makes it\na valid variable definition: either an alphanumeric name (`[_a-z][_a-z0-9]*`)\nor a braced string starting with `${`. In other circumstances, it will be preserved without attempt to interpolate a value.\n\nYou can use a `$$` (double-dollar sign) when your configuration needs a literal\ndollar sign. This also prevents Compose from interpolating a value, so a `$$`\nallows you to refer to environment variables that you don't want processed by\nCompose.\n\n```yml\nweb:\n  build: .\n  command: \"$$VAR_NOT_INTERPOLATED_BY_COMPOSE\"\n```\n\nIf Compose can't resolve a substituted variable and no default value is defined, it displays a warning and substitutes the variable with an empty string.\n\nAs any values in a Compose file can be interpolated with variable substitution, including compact string notation\nfor complex elements, interpolation is applied before a merge on a per-file basis.\n\nInterpolation applies only to YAML values, not to keys. For the few places where keys are actually arbitrary\nuser-defined strings, such as [labels](05-services.md#labels) or [environment](05-services.md#environment), an alternate equal sign syntax\nmust be used for interpolation to apply. For example:\n\n```yml\nservices:\n  foo:\n    labels:\n      \"$VAR_NOT_INTERPOLATED_BY_COMPOSE\": \"BAR\"\n```\n\n```yml\nservices:\n  foo:\n    labels:\n      - \"$VAR_INTERPOLATED_BY_COMPOSE=BAR\"\n```\n# Merge and override\n\nCompose lets you define a Compose application model through [multiple Compose files](https://docs.docker.com/compose/multiple-compose-files/). \nWhen doing so, Compose follows the rules declared in this section to merge Compose files.\n\n## Mapping\n\nA YAML `mapping` gets merged by adding missing entries and merging the conflicting ones.\n\nMerging the following example YAML trees:\n\n```yaml\nservices:\n  foo:\n    key1: value1\n    key2: value2\n```\n\n```yaml\nservices:\n  foo:\n    key2: VALUE\n    key3: value3\n```\n\nResults in a Compose application model equivalent to the YAML tree:\n\n```yaml\nservices:\n  foo:\n    key1: value1\n    key2: VALUE\n    key3: value3\n```\n\n## Sequence\n\nA YAML `sequence` is merged by appending values from the overriding Compose file to the previous one.\n\nMerging the following example YAML trees:\n\n```yaml\nservices:\n  foo:\n    DNS:\n      - 1.1.1.1\n```\n\n```yaml\nservices:\n  foo:\n    DNS: \n      - 8.8.8.8\n```\n\nResults in a Compose application model equivalent to the YAML tree:\n\n```yaml\nservices:\n  foo:\n    DNS:\n      - 1.1.1.1\n      - 8.8.8.8\n```\n\n## Exceptions\n\n### Shell commands\n\nWhen merging Compose files that use the services attributes [command](05-services.md#command), [entrypoint](05-services.md#entrypoint) and [healthcheck: `test`](05-services.md#healthcheck), the value is overridden by the latest Compose file, and not appended.\n\nMerging the following example YAML trees:\n\n```yaml\nservices:\n  foo:\n    command: [\"echo\", \"foo\"]\n```\n\n```yaml\nservices:\n  foo:\n    command: [\"echo\", \"bar\"]\n```\n\nResults in a Compose application model equivalent to the YAML tree:\n\n```yaml\nservices:\n  foo:\n    command: [\"echo\", \"bar\"]\n```\n\n### Unique resources\n\nApplies to the [ports](05-services.md#ports), [volumes](05-services.md#volumes), [secrets](05-services.md#secrets) and [configs](05-services.md#configs) services attributes.\nWhile these types are modeled in a Compose file as a sequence, they have special uniqueness requirements:\n\n| Attribute   | Unique key               |\n|-------------|--------------------------|\n| volumes     |  target                  |\n| secrets     |  source                  |\n| configs     |  source                  |\n| ports       |  {ip, target, published, protocol}   |\n\nWhen merging Compose files, Compose appends new entries that do not violate a uniqueness constraint and merge entries that share a unique key.\n\nMerging the following example YAML trees:\n\n```yaml\nservices:\n  foo:\n    volumes:\n      - foo:/work\n```\n\n```yaml\nservices:\n  foo:\n    volumes:\n      - bar:/work\n```\n\nResults in a Compose application model equivalent to the YAML tree:\n\n```yaml\nservices:\n  foo:\n    volumes:\n      - bar:/work\n```\n\n### Reset value\n\nIn addition to the previously described mechanism, an override Compose file can also be used to remove elements from your application model.\nFor this purpose, the custom [YAML tag](https://yaml.org/spec/1.2.2/#24-tags) `!reset` can be set to\noverride a value set by the overriden Compose file. A valid value for attribute must be provided,\nbut will be ignored and target attribute will be set with type's default value or `null`. \n\nFor readability, it is recommended to explicitly set the attribute value to the null (`null`) or empty\narray `[]` (with `!reset null` or `!reset []`) so that it is clear that resulting attribute will be\ncleared.\n\nA base `compose.yaml` file:\n\n```yaml\nservices:\napp:\n    image: myapp\n    ports:\n      - \"8080:80\"\n    environment:\n      FOO: BAR             \n```\n\nAnd an `compose.override.yaml` file:\n\n```yaml\nservices:\n  app:\n    image: myapp\n    ports: !reset []\n    environment:\n      FOO: !reset null\n```\n\nResults in:\n\n```yaml\nservices:\n  app:\n    image: myapp\n```\n\n### Replace value\n\n[![Compose v2.24.4](https://img.shields.io/badge/compose-v2.24.4-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.24.4)\n\nWhile `!reset` can be used to remove a declaration from a Compose file using an override file, `!override` allows\nyou to fully replace an attribute, bypassing the standard merge rules. A typical example is to fully replace a \nresource definition, to rely on a distinct model but using the same name.\n\nA base `compose.yaml` file:\n\n```yaml\nservices:\napp:\n    image: myapp\n    ports:\n      - \"8080:80\"\n```\n\nTo remove the original port, but expose a new one, the following override file is used:\n\n```yaml\nservices:\n  app:\n    ports: !override\n      - \"8443:443\" \n```\n\nThis results in: \n\n```yaml\nservices:\n  app:\n    image: myapp\n    ports:\n      - \"8443:443\" \n```\n\nIf `!override` had not been used, both `8080:80` and `8443:443` would be exposed as per the [merging rules outlined above](#sequence). \n# Include\n\n[![Compose v2.20.0](https://img.shields.io/badge/compose-v2.20.0-blue?style=flat-square)](https://github.com/docker/compose/releases/v2.20.0)\n\nA Compose application can declare dependency on another Compose application. This is useful if:\n- You want to reuse other Compose files.\n- You need to factor out parts of your application model into separate Compose files so they can be managed separately or shared with others.\n- Teams need to keep a Compose file reasonably complicated for the limited amount of resources it has to declare for it's own sub-domain, within a larger deployment.\n\nThe `include` top-level section is used to define the dependency on another Compose application, or sub-domain.\nEach path listed in the `include` section is loaded as an individual Compose application model, with it's own project directory, in order to resolve relative paths. \n\nOnce the included Compose application is loaded, all resources definitions are copied into the \ncurrent Compose application model. Compose displays a warning if resource names conflict and doesn't \ntry to merge them. To enforce this, `include` is evaluated after the Compose file(s) selected \nto define the Compose application model have been parsed and merged, so that conflicts \nbetween Compose files are detected.\n\n`include` applies recursively so an included Compose file which declares its own `include` section, triggers those other files to be included as well. \n\nAny volumes, networks, or other resources pulled in from the included Compose file can be used by the current Compose application for cross-service references. For example:\n\n```yaml\ninclude:\n  - my-compose-include.yaml  #with serviceB declared\nservices:\n  serviceA:\n    build: .\n    depends_on:\n      - serviceB #use serviceB directly as if it was declared in this Compose file\n```\n\nCompose also supports the use of interpolated variables with `include`. It's recommended that you [specify mandatory variables](12-interpolation.md). For example:\n\n```text\ninclude:\n  -${INCLUDE_PATH:?FOO}/compose.yaml\n```\n\n## Short syntax\n\nThe short syntax only defines paths to other Compose files. The file is loaded with the parent\nfolder as the project directory, and an optional `.env` file that is loaded to define any variables' default values\nby interpolation. The local project's environment can override those values. \n\n```yaml\ninclude:\n  - ../commons/compose.yaml\n  - ../another_domain/compose.yaml\n\nservices:\n  webapp:\n    depends_on:\n      - included-service # defined by another_domain\n```\n\nIn the above example, both `../commons/compose.yaml` and \n`../another_domain/compose.yaml` are loaded as individual Compose projects. Relative paths \nin Compose files being referred by `include` are resolved relative to their own Compose \nfile path, not based on the local project's directory. Variables are interpolated using values set in the optional\n`.env` file in same folder, and is overridden by the local project's environment.\n\n## Long syntax\n\nThe long syntax offers more control over the sub-project parsing:\n\n```yaml\ninclude:\n   - path: ../commons/compose.yaml\n     project_directory: ..\n     env_file: ../another/.env\n```\n\n### path\n\n`path` is required and defines the location of the Compose file(s) to be parsed and included into the\nlocal Compose model. `path` can be set either to a string when a single Compose file is involved,\nor to a list of strings when multiple Compose files need to be [merged together](13-merge.md) to\ndefine the Compose model to be included in the local application.\n\n```yaml\ninclude:\n   - path: \n       - ../commons/compose.yaml\n       - ./commons-override.yaml\n```\n\n### project_directory\n\n`project_directory` defines a base path to resolve relative paths set in the Compose file. It defaults to \nthe directory of the included Compose file.\n\n### env_file\n\n`env_file` defines an environment file(s) to use to define default values when interpolating variables\nin the Compose file being parsed. It defaults to `.env` file in the `project_directory` for the Compose \nfile being parsed. \n\n`env_file` can be set either to a string or a list of strings when multiple environment files need to be merged\nto define a project environment.\n\n```yaml\ninclude:\n   - path: ../another/compose.yaml\n     env_file:\n       - ../another/.env\n       - ../another/dev.env\n```\n\nThe local project's environment has precedence over the values set by the Compose file, so that the local project can\noverride values for customization.\n# Profiles\n\nWith profiles you can define a set of active profiles so your Compose application model is adjusted for various usages and environments.\nThe exact mechanism is implementation specific and may include command line flags, environment variables, etc.\n\nThe [services](05-services.md) top-level element supports a `profiles` attribute to define a list of named profiles. \nServices without a `profiles` attribute are always enabled. \n\nA service is ignored by Compose when none of the listed `profiles` match the active ones, unless the service is\nexplicitly targeted by a command. In that case its profile is added to the set of active profiles.\n\n> **Note**\n>\n> All other top-level elements are not affected by `profiles` and are always active.\n\nReferences to other services (by `links`, `extends` or shared resource syntax `service:xxx`) do not\nautomatically enable a component that would otherwise have been ignored by active profiles. Instead\nCompose returns an error.\n\n## Illustrative example\n\n```yaml\nservices:\n  foo:\n    image: foo\n  bar:\n    image: bar\n    profiles:\n      - test\n  baz:\n    image: baz\n    depends_on:\n      - bar\n    profiles:\n      - test\n  zot:\n    image: zot\n    depends_on:\n      - bar\n    profiles:\n      - debug\n```\n\nIn the above example:\n\n- If the Compose application model is parsed with no profile enabled, it only contains the `foo` service.\n- If the profile `test` is enabled, the model contains the services `bar` and `baz`, and service `foo`, which is always enabled.\n- If the profile `debug` is enabled, the model contains both `foo` and `zot` services, but not `bar` and `baz`,\n  and as such the model is invalid regarding the `depends_on` constraint of `zot`.\n- If the profiles `debug` and `test` are enabled, the model contains all services; `foo`, `bar`, `baz` and `zot`.\n- If Compose is executed with `bar` as the explicit service to run, `bar` and the `test` profile\n  are active even if `test` profile is not enabled.\n- If Compose is executed with `baz` as the explicit service to run, the service `baz` and the\n  profile `test` are active and `bar` is pulled in by the `depends_on` constraint.\n- If Compose is executed with `zot` as the explicit service to run, again the model is\n  invalid regarding the `depends_on` constraint of `zot`, since `zot` and `bar` have no common `profiles`\n  listed.\n- If Compose is executed with `zot` as the explicit service to run and profile `test` is enabled,\n  profile `debug` is automatically enabled and service `bar` is pulled in as a dependency starting both\n  services `zot` and `bar`.\n\nSee how you can use `profiles` in [Docker Compose](https://docs.docker.com/compose/profiles/).\n"
        }
      ]
    }
  ]
}