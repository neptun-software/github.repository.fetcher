{
  "metadata": {
    "timestamp": 1736711295763,
    "page": 38,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "postgis/docker-postgis",
      "stars": 1410,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".coderabbit.yaml",
          "type": "blob",
          "size": 1.24609375,
          "content": "# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json\n# see - https://docs.coderabbit.ai/configure-coderabbit/\n\nlanguage: \"en-US\"\n\nearly_access: true\n\n# we(docker-postgis) always need a human to approve (and merge), we don't use this,\nreviews:\n  profile: \"chill\"\n  request_changes_workflow: false\n  high_level_summary: false\n  poem: false\n  review_status: false\n  collapse_walkthrough: true\n  auto_review:\n    enabled: false\n    drafts: false\n\n# chat is allowed\nchat:\n  auto_reply: true\n\n\n# https://docs.coderabbit.ai/guides/commands\n#\n# The following commands are available (invoked as PR comments):\n# @coderabbitai pause         :  to pause the reviews on a PR.\n# @coderabbitai resume        : to resume the paused reviews.\n# @coderabbitai review        : to trigger an incremental review. This is useful when automatic reviews are disabled for the repository.\n# @coderabbitai full review   : to do a full review from scratch and review all the files again.\n# @coderabbitai summary       : to regenerate the summary of the PR.\n# @coderabbitai resolve       : resolve all the CodeRabbit review comments.\n# @coderabbitai configuration : to show the current CodeRabbit configuration for the repository.\n# @coderabbitai help          : to get help.\n\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": "Dockerfile\n.git\n_*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.001953125,
          "content": "_*"
        },
        {
          "name": ".travis.yml.disabled",
          "type": "blob",
          "size": 0.9970703125,
          "content": "---\nlanguage: bash\nservices: docker\n\ndist: xenial\n\nenv:\n  - VERSION=13-master\n  - VERSION=13-3.0\n  - VERSION=13-3.0 VARIANT=alpine\n  - VERSION=12-master\n  - VERSION=12-3.0\n  - VERSION=12-3.0 VARIANT=alpine\n  - VERSION=12-2.5\n  - VERSION=12-2.5 VARIANT=alpine\n  - VERSION=11-3.0\n  - VERSION=11-3.0 VARIANT=alpine\n  - VERSION=11-2.5\n  - VERSION=11-2.5 VARIANT=alpine\n  - VERSION=10-3.0\n  - VERSION=10-3.0 VARIANT=alpine\n  - VERSION=10-2.5\n  - VERSION=10-2.5 VARIANT=alpine\n  - VERSION=9.6-3.0\n  - VERSION=9.6-3.0 VARIANT=alpine\n  - VERSION=9.6-2.5\n  - VERSION=9.6-2.5 VARIANT=alpine\n  - VERSION=9.5-3.0\n  - VERSION=9.5-3.0 VARIANT=alpine\n  - VERSION=9.5-2.5\n  - VERSION=9.5-2.5 VARIANT=alpine\n\njobs:\n  allow_failures:\n    - env: VERSION=12-master\n    - env: VERSION=13-master\n\nscript:\n  - if [[ \"$TRAVIS_PULL_REQUEST\" == \"false\" && \"$TRAVIS_BRANCH\" == \"master\" ]]; then\n        echo \"$DOCKERHUB_ACCESS_TOKEN\" | docker login -u $DOCKERHUB_USERNAME --password-stdin &&\n        make push ;\n    else\n        make test ;\n    fi\n"
        },
        {
          "name": "12-3.5",
          "type": "tree",
          "content": null
        },
        {
          "name": "13-3.5",
          "type": "tree",
          "content": null
        },
        {
          "name": "14-3.5",
          "type": "tree",
          "content": null
        },
        {
          "name": "15-3.5",
          "type": "tree",
          "content": null
        },
        {
          "name": "16-3.5",
          "type": "tree",
          "content": null
        },
        {
          "name": "16-master",
          "type": "tree",
          "content": null
        },
        {
          "name": "17-3.5",
          "type": "tree",
          "content": null
        },
        {
          "name": "17-master",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.0849609375,
          "content": "Mike Dillon <mike@appropriate.io>\n\nAnd other contributors not specifically named here.\n"
        },
        {
          "name": "Dockerfile.alpine.template",
          "type": "blob",
          "size": 4.59375,
          "content": "#\n# %%TXT_AUTOGENERATED%%\n#\nARG BASE_IMAGE=postgres:%%PG_MAJOR%%-alpine3.21\nFROM ${BASE_IMAGE}\n\nLABEL maintainer=\"PostGIS Project - https://postgis.net\" \\\n      org.opencontainers.image.description=\"PostGIS %%POSTGIS_VERSION%% spatial database extension with PostgreSQL %%PG_MAJOR%% Alpine\" \\\n      org.opencontainers.image.source=\"https://github.com/postgis/docker-postgis\"\n\nENV POSTGIS_VERSION %%POSTGIS_VERSION%%\nENV POSTGIS_SHA256 %%POSTGIS_SHA256%%\n\nRUN set -eux \\\n    && apk add --no-cache --virtual .fetch-deps \\\n        ca-certificates \\\n        openssl \\\n        tar \\\n    \\\n    && wget -O postgis.tar.gz \"https://github.com/postgis/postgis/archive/${POSTGIS_VERSION}.tar.gz\" \\\n    && echo \"${POSTGIS_SHA256} *postgis.tar.gz\" | sha256sum -c - \\\n    && mkdir -p /usr/src/postgis \\\n    && tar \\\n        --extract \\\n        --file postgis.tar.gz \\\n        --directory /usr/src/postgis \\\n        --strip-components 1 \\\n    && rm postgis.tar.gz \\\n    \\\n    && apk add --no-cache --virtual .build-deps \\\n        \\\n        gdal-dev \\\n        geos-dev \\\n        proj-dev \\\n        proj-util \\\n        sfcgal-dev \\\n        \\\n        # The upstream variable, '$DOCKER_PG_LLVM_DEPS' contains\n        #  the correct versions of 'llvm-dev' and 'clang' for the current version of PostgreSQL.\n        # This improvement has been discussed in https://github.com/docker-library/postgres/pull/1077\n        $DOCKER_PG_LLVM_DEPS \\\n        \\\n        autoconf \\\n        automake \\\n        cunit-dev \\\n        file \\\n        g++ \\\n        gcc \\\n        gettext-dev \\\n        git \\\n        json-c-dev \\\n        libtool \\\n        libxml2-dev \\\n        make \\\n        pcre2-dev \\\n        perl \\\n        protobuf-c-dev \\\n    \\\n# build PostGIS - with Link Time Optimization (LTO) enabled\n    && cd /usr/src/postgis \\\n    && gettextize \\\n    && ./autogen.sh \\\n    && ./configure \\\n        --enable-lto \\\n    && make -j$(nproc) \\\n    && make install \\\n    \\\n# This section is for refreshing the proj data for the regression tests.\n# It serves as a workaround for an issue documented at https://trac.osgeo.org/postgis/ticket/5316\n# This increases the Docker image size by about 1 MB.\n    && projsync --system-directory --file ch_swisstopo_CHENyx06_ETRS \\\n    && projsync --system-directory --file us_noaa_eshpgn \\\n    && projsync --system-directory --file us_noaa_prvi \\\n    && projsync --system-directory --file us_noaa_wmhpgn \\\n# This section performs a regression check.\n    && mkdir /tempdb \\\n    && chown -R postgres:postgres /tempdb \\\n    && su postgres -c 'pg_ctl -D /tempdb init' \\\n    && su postgres -c 'pg_ctl -D /tempdb -c -l /tmp/logfile -o '-F' start ' \\\n    && cd regress \\\n    && make -j$(nproc) check RUNTESTFLAGS=--extension   PGUSER=postgres \\\n    \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS postgis;\"' \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS postgis_raster;\"' \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS postgis_sfcgal;\"' \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS fuzzystrmatch; --needed for postgis_tiger_geocoder \"' \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS address_standardizer;\"' \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS address_standardizer_data_us;\"' \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder;\"' \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS postgis_topology;\"' \\\n    && su postgres -c 'psql -t -c \"SELECT version();\"'              >> /_pgis_full_version.txt \\\n    && su postgres -c 'psql -t -c \"SELECT PostGIS_Full_Version();\"' >> /_pgis_full_version.txt \\\n    && su postgres -c 'psql -t -c \"\\dx\"' >> /_pgis_full_version.txt \\\n    \\\n    && su postgres -c 'pg_ctl -D /tempdb --mode=immediate stop' \\\n    && rm -rf /tempdb \\\n    && rm -rf /tmp/logfile \\\n    && rm -rf /tmp/pgis_reg \\\n# add .postgis-rundeps\n    && apk add --no-cache --virtual .postgis-rundeps \\\n        \\\n        gdal \\\n        geos \\\n        proj \\\n        sfcgal \\\n        \\\n        json-c \\\n        libstdc++ \\\n        pcre2 \\\n        protobuf-c \\\n        \\\n        # ca-certificates: for accessing remote raster files\n        #   fix https://github.com/postgis/docker-postgis/issues/307\n        ca-certificates \\\n# clean\n    && cd / \\\n    && rm -rf /usr/src/postgis \\\n    && apk del .fetch-deps .build-deps \\\n# At the end of the build, we print the collected information\n# from the '/_pgis_full_version.txt' file. This is for experimental and internal purposes.\n    && cat /_pgis_full_version.txt\n\nCOPY ./initdb-postgis.sh /docker-entrypoint-initdb.d/10_postgis.sh\nCOPY ./update-postgis.sh /usr/local/bin\n"
        },
        {
          "name": "Dockerfile.master.template",
          "type": "blob",
          "size": 13.48828125,
          "content": "#\n# %%TXT_AUTOGENERATED%%\n#\n\n# \"Experimental\"; solely for testing purposes. Anticipate frequent changes!\n# This is a multi-stage Dockerfile, requiring a minimum Docker version of 17.05.\n\nARG DOCKER_CMAKE_BUILD_TYPE=Release\nARG CGAL_GIT_BRANCH=master\nFROM postgres:%%PG_MAJOR%%-%%DEBIAN_VERSION%% as builder\n\nLABEL maintainer=\"PostGIS Project - https://postgis.net\" \\\n      org.opencontainers.image.description=\"PostGIS - master  spatial database extension with PostgreSQL %%PG_MAJOR%% %%DEBIAN_VERSION%%\" \\\n      org.opencontainers.image.source=\"https://github.com/postgis/docker-postgis\"\n\nWORKDIR /\n\n# apt-get install\nRUN set -ex \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n      curl \\\n      libboost-atomic%%BOOST_VERSION%% \\\n      libboost-chrono%%BOOST_VERSION%% \\\n      libboost-date-time%%BOOST_VERSION%% \\\n      libboost-filesystem%%BOOST_VERSION%% \\\n      libboost-program-options%%BOOST_VERSION%% \\\n      libboost-serialization%%BOOST_VERSION%% \\\n      libboost-system%%BOOST_VERSION%% \\\n      libboost-test%%BOOST_VERSION%% \\\n      libboost-thread%%BOOST_VERSION%% \\\n      libboost-timer%%BOOST_VERSION%% \\\n      libcurl3-gnutls \\\n      libexpat1 \\\n      libgmp10 \\\n      libgmpxx4ldbl \\\n      libjson-c5 \\\n      libmpfr6 \\\n      libprotobuf-c1 \\\n      libtiff5 \\\n      libxml2 \\\n      sqlite3 \\\n      # build dependency\n      autoconf \\\n      automake \\\n      autotools-dev \\\n      bison \\\n      build-essential \\\n      ca-certificates \\\n      cmake \\\n      g++ \\\n      git \\\n      libboost-all-dev \\\n      libcurl4-gnutls-dev \\\n      libgmp-dev \\\n      libjson-c-dev \\\n      libmpfr-dev \\\n      libpcre3-dev \\\n      libpq-dev \\\n      libprotobuf-c-dev \\\n      libsqlite3-dev \\\n      libtiff-dev \\\n      libtool \\\n      libxml2-dev \\\n      make \\\n      pkg-config \\\n      protobuf-c-compiler \\\n      xsltproc \\\n      # gdal+\n      libblosc-dev \\\n      libcfitsio-dev \\\n      libfreexl-dev \\\n      libfyba-dev \\\n      libhdf5-dev \\\n      libkml-dev \\\n      liblz4-dev \\\n      liblzma-dev \\\n      libopenjp2-7-dev \\\n      libqhull-dev \\\n      libwebp-dev \\\n      libzstd-dev\n\nARG DOCKER_CMAKE_BUILD_TYPE\nENV DOCKER_CMAKE_BUILD_TYPE=${DOCKER_CMAKE_BUILD_TYPE}\n\n# cgal & sfcgal\nARG CGAL_GIT_BRANCH\nENV CGAL_GIT_BRANCH=${CGAL_GIT_BRANCH}\nENV CGAL_GIT_HASH %%CGAL_GIT_HASH%%\nENV SFCGAL_GIT_HASH %%SFCGAL_GIT_HASH%%\nRUN set -ex \\\n    && mkdir -p /usr/src \\\n    && cd /usr/src \\\n    && git clone --branch ${CGAL_GIT_BRANCH} https://github.com/CGAL/cgal  \\\n    && cd cgal \\\n    && git checkout ${CGAL_GIT_HASH} \\\n    && git log -1 > /_pgis_cgal_last_commit.txt \\\n    && cd /usr/src \\\n    && git clone https://gitlab.com/SFCGAL/SFCGAL.git \\\n    && cd SFCGAL \\\n    && git checkout ${SFCGAL_GIT_HASH} \\\n    && git log -1 > /_pgis_sfcgal_last_commit.txt \\\n    && mkdir cmake-build \\\n    && cd cmake-build \\\n    && cmake .. \\\n       -DCGAL_DIR=/usr/src/cgal \\\n       -DCMAKE_BUILD_TYPE=${DOCKER_CMAKE_BUILD_TYPE} \\\n       -DSFCGAL_BUILD_BENCH=OFF \\\n       -DSFCGAL_BUILD_EXAMPLES=OFF \\\n       -DSFCGAL_BUILD_TESTS=OFF \\\n       -DSFCGAL_WITH_OSG=OFF \\\n    && make -j$(nproc) \\\n    && make install \\\n    #\n    ## testing with -DSFCGAL_BUILD_TESTS=ON\n    # && CTEST_OUTPUT_ON_FAILURE=TRUE ctest \\\n    #\n    # clean\n    && rm -fr /usr/src/SFCGAL \\\n    && rm -fr /usr/src/cgal\n\n# proj\nENV PROJ_GIT_HASH %%PROJ_GIT_HASH%%\nRUN set -ex \\\n    && cd /usr/src \\\n    && git clone https://github.com/OSGeo/PROJ.git \\\n    && cd PROJ \\\n    && git checkout ${PROJ_GIT_HASH} \\\n    && git log -1 > /_pgis_proj_last_commit.txt \\\n    # check the autotools exist? https://github.com/OSGeo/PROJ/pull/3027\n    && if [ -f \"autogen.sh\" ] ; then \\\n        set -eux \\\n        && echo \"autotools version: 'autogen.sh' exists! Older version!\"  \\\n        && ./autogen.sh \\\n        && ./configure --disable-static \\\n        && make -j$(nproc) \\\n        && make install \\\n        ; \\\n    else \\\n        set -eux \\\n        && echo \"cmake version: 'autogen.sh' does not exists! Newer version!\" \\\n        && mkdir build \\\n        && cd build \\\n        && cmake .. -DCMAKE_BUILD_TYPE=${DOCKER_CMAKE_BUILD_TYPE} -DBUILD_TESTING=OFF \\\n        && make -j$(nproc) \\\n        && make install \\\n        ; \\\n    fi \\\n    \\\n    && rm -fr /usr/src/PROJ\n\n# geos\nENV GEOS_GIT_HASH %%GEOS_GIT_HASH%%\nRUN set -ex \\\n    && cd /usr/src \\\n    && git clone https://github.com/libgeos/geos.git \\\n    && cd geos \\\n    && git checkout ${GEOS_GIT_HASH} \\\n    && git log -1 > /_pgis_geos_last_commit.txt \\\n    && mkdir cmake-build \\\n    && cd cmake-build \\\n    && cmake .. -DCMAKE_BUILD_TYPE=${DOCKER_CMAKE_BUILD_TYPE} -DBUILD_TESTING=OFF \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cd / \\\n    && rm -fr /usr/src/geos\n\n# gdal\nENV GDAL_GIT_HASH %%GDAL_GIT_HASH%%\nRUN set -ex \\\n    && cd /usr/src \\\n    && git clone https://github.com/OSGeo/gdal.git \\\n    && cd gdal \\\n    && git checkout ${GDAL_GIT_HASH} \\\n    && git log -1 > /_pgis_gdal_last_commit.txt \\\n    \\\n    # gdal project directory structure - has been changed !\n    && if [ -d \"gdal\" ] ; then \\\n        echo \"Directory 'gdal' dir exists -> older version!\" ; \\\n        cd gdal ; \\\n    else \\\n        echo \"Directory 'gdal' does not exists! Newer version! \" ; \\\n    fi \\\n    \\\n    && if [ -f \"./autogen.sh\" ]; then \\\n        # Building with autoconf ( old/deprecated )\n        set -eux \\\n        && ./autogen.sh \\\n        && ./configure --disable-static \\\n        ; \\\n    else \\\n        # Building with cmake\n        set -eux \\\n        && mkdir build \\\n        && cd build \\\n        # config based on: https://salsa.debian.org/debian-gis-team/gdal/-/blob/master/debian/rules\n        && cmake .. -DCMAKE_BUILD_TYPE=${DOCKER_CMAKE_BUILD_TYPE} -DBUILD_TESTING=OFF \\\n            -DBUILD_DOCS=OFF \\\n            \\\n            -DGDAL_HIDE_INTERNAL_SYMBOLS=ON \\\n            -DRENAME_INTERNAL_TIFF_SYMBOLS=ON \\\n            -DGDAL_USE_BLOSC=ON \\\n            -DGDAL_USE_CFITSIO=ON \\\n            -DGDAL_USE_CURL=ON \\\n            -DGDAL_USE_DEFLATE=ON \\\n            -DGDAL_USE_EXPAT=ON \\\n            -DGDAL_USE_FREEXL=ON \\\n            -DGDAL_USE_FYBA=ON \\\n            -DGDAL_USE_GEOS=ON \\\n            -DGDAL_USE_HDF5=ON \\\n            -DGDAL_USE_JSONC=ON \\\n            -DGDAL_USE_LERC_INTERNAL=ON \\\n            -DGDAL_USE_LIBKML=ON \\\n            -DGDAL_USE_LIBLZMA=ON \\\n            -DGDAL_USE_LZ4=ON \\\n            -DGDAL_USE_OPENJPEG=ON \\\n            -DGDAL_USE_POSTGRESQL=ON \\\n            -DGDAL_USE_QHULL=ON \\\n            -DGDAL_USE_SQLITE3=ON \\\n            -DGDAL_USE_TIFF=ON \\\n            -DGDAL_USE_WEBP=ON \\\n            -DGDAL_USE_ZSTD=ON \\\n            \\\n            # OFF and Not working https://github.com/OSGeo/gdal/issues/7100\n            # -DRENAME_INTERNAL_GEOTIFF_SYMBOLS=ON \\\n            -DGDAL_USE_ECW=OFF \\\n            -DGDAL_USE_GEOTIFF=OFF \\\n            -DGDAL_USE_HEIF=OFF \\\n            -DGDAL_USE_SPATIALITE=OFF \\\n        ; \\\n    fi \\\n    \\\n    && make -j$(nproc) \\\n    && make install \\\n    && cd / \\\n    && rm -fr /usr/src/gdal\n\n# Minimal command line test.\nRUN set -ex \\\n    && ldconfig \\\n    && cs2cs \\\n    && ldd $(which gdalinfo) \\\n    && gdalinfo --version \\\n    && geos-config --version \\\n    && ogr2ogr --version \\\n    && proj \\\n    && sfcgal-config --version \\\n    && pcre-config  --version\n\n# -------------------------------------------\n# STAGE  final\n# -------------------------------------------\nFROM postgres:%%PG_MAJOR%%-%%DEBIAN_VERSION%%\n\nARG DOCKER_CMAKE_BUILD_TYPE\nENV DOCKER_CMAKE_BUILD_TYPE=${DOCKER_CMAKE_BUILD_TYPE}\n\nRUN set -ex \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n      curl \\\n      libboost-atomic%%BOOST_VERSION%% \\\n      libboost-chrono%%BOOST_VERSION%% \\\n      libboost-date-time%%BOOST_VERSION%% \\\n      libboost-filesystem%%BOOST_VERSION%% \\\n      libboost-program-options%%BOOST_VERSION%% \\\n      libboost-serialization%%BOOST_VERSION%% \\\n      libboost-system%%BOOST_VERSION%% \\\n      libboost-test%%BOOST_VERSION%% \\\n      libboost-thread%%BOOST_VERSION%% \\\n      libboost-timer%%BOOST_VERSION%% \\\n      libcurl3-gnutls \\\n      libexpat1 \\\n      libgmp10 \\\n      libgmpxx4ldbl \\\n      libjson-c5 \\\n      libmpfr6 \\\n      libpcre3 \\\n      libprotobuf-c1 \\\n      libtiff5 \\\n      libxml2 \\\n      sqlite3 \\\n      # gdal+\n      libblosc1 \\\n      libcfitsio9 \\\n      libfreexl1 \\\n      libfyba0 \\\n      libhdf5-103-1 \\\n      libkmlbase1 \\\n      libkmldom1 \\\n      libkmlengine1 \\\n      libopenjp2-7 \\\n      libqhull-r8.0 \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY --from=builder /_pgis*.* /\nCOPY --from=builder /usr/local /usr/local\n\nARG CGAL_GIT_BRANCH\nENV CGAL_GIT_BRANCH=${CGAL_GIT_BRANCH}\nENV CGAL_GIT_HASH %%CGAL_GIT_HASH%%\nENV SFCGAL_GIT_HASH %%SFCGAL_GIT_HASH%%\nENV PROJ_GIT_HASH %%PROJ_GIT_HASH%%\nENV GEOS_GIT_HASH %%GEOS_GIT_HASH%%\nENV GDAL_GIT_HASH %%GDAL_GIT_HASH%%\n\n# Minimal command line test ( fail fast )\nRUN set -ex \\\n    && ldconfig \\\n    && cs2cs \\\n    && ldd $(which gdalinfo) \\\n    && gdalinfo --version \\\n    && gdal-config --formats \\\n    && geos-config --version \\\n    && ogr2ogr --version \\\n    && proj \\\n    && sfcgal-config --version \\\n    \\\n    # Testing ogr2ogr PostgreSQL driver.\n    && ogr2ogr --formats | grep -q \"PostgreSQL/PostGIS\" && exit 0 \\\n            || echo \"ogr2ogr missing PostgreSQL driver\" && exit 1\n\n# install postgis\nENV POSTGIS_GIT_HASH %%POSTGIS_GIT_HASH%%\n\nRUN set -ex \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n      autoconf \\\n      automake \\\n      autotools-dev \\\n      bison \\\n      build-essential \\\n      ca-certificates \\\n      cmake \\\n      docbook-xml \\\n      docbook5-xml \\\n      g++ \\\n      git \\\n      libboost-all-dev \\\n      libcunit1-dev \\\n      libcurl4-gnutls-dev \\\n      libgmp-dev \\\n      libjson-c-dev \\\n      libmpfr-dev \\\n      libpcre3-dev \\\n      libprotobuf-c-dev \\\n      libsqlite3-dev \\\n      libtiff-dev \\\n      libtool \\\n      libxml2-dev \\\n      libxml2-utils \\\n      make \\\n      pkg-config \\\n      postgresql-server-dev-$PG_MAJOR \\\n      protobuf-c-compiler \\\n      xsltproc \\\n    && cd \\\n    # postgis\n    && cd /usr/src/ \\\n    && git clone https://github.com/postgis/postgis.git \\\n    && cd postgis \\\n    && git checkout ${POSTGIS_GIT_HASH} \\\n    && git log -1 > /_pgis_last_commit.txt \\\n    && ./autogen.sh \\\n# configure options taken from:\n# https://anonscm.debian.org/cgit/pkg-grass/postgis.git/tree/debian/rules?h=jessie\n    && ./configure \\\n        --enable-lto \\\n    && make -j$(nproc) \\\n    && make install \\\n# refresh proj data - workarounds: https://trac.osgeo.org/postgis/ticket/5316\n    && projsync --system-directory --file ch_swisstopo_CHENyx06_ETRS \\\n    && projsync --system-directory --file us_noaa_eshpgn \\\n    && projsync --system-directory --file us_noaa_prvi \\\n    && projsync --system-directory --file us_noaa_wmhpgn \\\n# regress check\n    && mkdir /tempdb \\\n    && chown -R postgres:postgres /tempdb \\\n    && su postgres -c 'pg_ctl -D /tempdb init' \\\n    && su postgres -c 'pg_ctl -D /tempdb -c -l /tmp/logfile -o '-F' start ' \\\n    && ldconfig \\\n    && cd regress \\\n    && make -j$(nproc) check RUNTESTFLAGS=--extension PGUSER=postgres \\\n    \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS postgis;\"' \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS postgis_raster;\"' \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS postgis_sfcgal;\"' \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS fuzzystrmatch; --needed for postgis_tiger_geocoder \"' \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS address_standardizer;\"' \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS address_standardizer_data_us;\"' \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder;\"' \\\n    && su postgres -c 'psql    -c \"CREATE EXTENSION IF NOT EXISTS postgis_topology;\"' \\\n    && su postgres -c 'psql -t -c \"SELECT version();\"' >> /_pgis_full_version.txt \\\n    && su postgres -c 'psql -t -c \"SELECT PostGIS_Full_Version();\"' >> /_pgis_full_version.txt \\\n    && su postgres -c 'psql -t -c \"\\dx\"' >> /_pgis_full_version.txt \\\n    \\\n    && su postgres -c 'pg_ctl -D /tempdb --mode=immediate stop' \\\n    && rm -rf /tempdb \\\n    && rm -rf /tmp/logfile \\\n    && rm -rf /tmp/pgis_reg \\\n# clean\n    && cd / \\\n    && rm -rf /usr/src/postgis \\\n    && apt-get purge -y --autoremove \\\n      autoconf \\\n      automake \\\n      autotools-dev \\\n      bison \\\n      build-essential \\\n      cmake \\\n      docbook-xml \\\n      docbook5-xml \\\n      g++ \\\n      git \\\n      libboost-all-dev \\\n      libcurl4-gnutls-dev \\\n      libgmp-dev \\\n      libjson-c-dev \\\n      libmpfr-dev \\\n      libpcre3-dev \\\n      libprotobuf-c-dev \\\n      libsqlite3-dev \\\n      libtiff-dev \\\n      libtool \\\n      libxml2-dev \\\n      libxml2-utils \\\n      make \\\n      pkg-config \\\n      postgresql-server-dev-$PG_MAJOR \\\n      protobuf-c-compiler \\\n      xsltproc \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /docker-entrypoint-initdb.d\nCOPY ./initdb-postgis.sh /docker-entrypoint-initdb.d/10_postgis.sh\nCOPY ./update-postgis.sh /usr/local/bin\n\n# last final test\nRUN set -ex \\\n    && ldconfig \\\n    && cs2cs \\\n    && ldd $(which gdalinfo) \\\n    && gdalinfo --version \\\n    && gdal-config --formats \\\n    && geos-config --version \\\n    && ogr2ogr --version \\\n    && proj \\\n    && sfcgal-config --version \\\n    \\\n    # Is the \"ca-certificates\" package installed? (for accessing remote raster files)\n    #   https://github.com/postgis/docker-postgis/issues/307\n    && dpkg-query -W -f='${Status}' ca-certificates 2>/dev/null | grep -c \"ok installed\" \\\n    \\\n    # list last commits.\n    && find /_pgis_*_last_commit.txt -type f -print -exec cat {} \\;  \\\n    # list postgresql, postgis version\n    && cat _pgis_full_version.txt\n"
        },
        {
          "name": "Dockerfile.template",
          "type": "blob",
          "size": 1.0732421875,
          "content": "#\n# %%TXT_AUTOGENERATED%%\n#\n\nFROM postgres:%%PG_MAJOR%%-%%DEBIAN_VERSION%%\n\nLABEL maintainer=\"PostGIS Project - https://postgis.net\" \\\n      org.opencontainers.image.description=\"PostGIS %%POSTGIS_VERSION%% spatial database extension with PostgreSQL %%PG_MAJOR%% %%DEBIAN_VERSION%%\" \\\n      org.opencontainers.image.source=\"https://github.com/postgis/docker-postgis\"\n\nENV POSTGIS_MAJOR %%POSTGIS_MAJOR%%\nENV POSTGIS_VERSION %%POSTGIS_VERSION%%\n\nRUN apt-get update \\\n      && apt-cache showpkg postgresql-$PG_MAJOR-postgis-$POSTGIS_MAJOR \\\n      && apt-get install -y --no-install-recommends \\\n           # ca-certificates: for accessing remote raster files;\n           #   fix: https://github.com/postgis/docker-postgis/issues/307\n           ca-certificates \\\n           \\\n           postgresql-$PG_MAJOR-postgis-$POSTGIS_MAJOR=$POSTGIS_VERSION \\\n           postgresql-$PG_MAJOR-postgis-$POSTGIS_MAJOR-scripts \\\n      && rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /docker-entrypoint-initdb.d\nCOPY ./initdb-postgis.sh /docker-entrypoint-initdb.d/10_postgis.sh\nCOPY ./update-postgis.sh /usr/local/bin\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "Copyright (c) 2014, Docker PostGIS Authors (See AUTHORS)\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.0947265625,
          "content": "\n# When processing the rules for tagging and pushing container images with the\n# \"latest\" tag, the following variable will be the version that is considered\n# to be the latest.\nLATEST_VERSION=17-3.5\n\n# The following flags are set based on VERSION and VARIANT environment variables\n# that may have been specified, and are used by rules to determine which\n# versions/variants are to be processed.  If no VERSION or VARIANT environment\n# variables were specified, process everything (the default).\ndo_default=true\ndo_alpine=true\n\n# The following logic evaluates VERSION and VARIANT variables that may have\n# been previously specified, and modifies the \"do\" flags depending on the values.\n# The VERSIONS variable is also set to contain the version(s) to be processed.\nifdef VERSION\n    VERSIONS=$(VERSION) # If a version was specified, VERSIONS only contains the specified version\n    ifdef VARIANT       # If a variant is specified, unset all do flags and allow subsequent logic to set them again where appropriate\n        do_default=false\n        do_alpine=false\n        ifeq ($(VARIANT),default)\n            do_default=true\n        endif\n        ifeq ($(VARIANT),alpine)\n            do_alpine=true\n        endif\n    endif\n    ifeq (\"$(wildcard $(VERSION)/alpine)\",\"\") # If no alpine subdirectory exists, don't process the alpine version\n        do_alpine=false\n    endif\nelse # If no version was specified, VERSIONS should contain all versions\n    VERSIONS = $(foreach df,$(wildcard */Dockerfile),$(df:%/Dockerfile=%))\nendif\n\n# The \"latest\" tag will only be provided for default images (no variant) so\n# only define the dependencies when the default image will be built.\nifeq ($(do_default),true)\n    BUILD_LATEST_DEP=build-$(LATEST_VERSION)\n    PUSH_LATEST_DEP=push-$(LATEST_VERSION)\n    PUSH_DEP=push-latest $(PUSH_LATEST_DEP)\n    # The \"latest\" tag shouldn't be processed if a VERSION was explicitly\n    # specified but does not correspond to the latest version.\n    ifdef VERSION\n        ifneq ($(VERSION),$(LATEST_VERSION))\n           PUSH_LATEST_DEP=\n           BUILD_LATEST_DEP=\n           PUSH_DEP=\n        endif\n    endif\nendif\n\n# The repository and image names default to the official but can be overriden\n# via environment variables.\nREPO_NAME  ?= postgis\nIMAGE_NAME ?= postgis\n\nDOCKER=docker\nDOCKERHUB_DESC_IMG=peterevans/dockerhub-description:latest\n\nGIT=git\nOFFIMG_LOCAL_CLONE=$(HOME)/official-images\nOFFIMG_REPO_URL=https://github.com/docker-library/official-images.git\n\n\nbuild: $(foreach version,$(VERSIONS),build-$(version))\n\nall: update build test\n\nupdate:\n\t$(DOCKER) run --rm -v $$(pwd):/work -w /work buildpack-deps ./update.sh\n\n\n### RULES FOR BUILDING ###\n\ndefine build-version\nbuild-$1:\nifeq ($(do_default),true)\n\t$(DOCKER) build --pull -t $(REPO_NAME)/$(IMAGE_NAME):$(shell echo $1) $1\n\t$(DOCKER) images          $(REPO_NAME)/$(IMAGE_NAME):$(shell echo $1)\nendif\nifeq ($(do_alpine),true)\nifneq (\"$(wildcard $1/alpine)\",\"\")\n\t$(DOCKER) build --pull -t $(REPO_NAME)/$(IMAGE_NAME):$(shell echo $1)-alpine $1/alpine\n\t$(DOCKER) images          $(REPO_NAME)/$(IMAGE_NAME):$(shell echo $1)-alpine\nendif\nendif\nendef\n$(foreach version,$(VERSIONS),$(eval $(call build-version,$(version))))\n\n\n## RULES FOR TESTING ###\n\ntest-prepare:\nifeq (\"$(wildcard $(OFFIMG_LOCAL_CLONE))\",\"\")\n\t$(GIT) clone $(OFFIMG_REPO_URL) $(OFFIMG_LOCAL_CLONE)\nendif\n\ntest: $(foreach version,$(VERSIONS),test-$(version))\n\ndefine test-version\ntest-$1: test-prepare build-$1\nifeq ($(do_default),true)\n\t$(OFFIMG_LOCAL_CLONE)/test/run.sh -c $(OFFIMG_LOCAL_CLONE)/test/config.sh -c test/postgis-config.sh $(REPO_NAME)/$(IMAGE_NAME):$(version)\nendif\nifeq ($(do_alpine),true)\nifneq (\"$(wildcard $1/alpine)\",\"\")\n\t$(OFFIMG_LOCAL_CLONE)/test/run.sh -c $(OFFIMG_LOCAL_CLONE)/test/config.sh -c test/postgis-config.sh $(REPO_NAME)/$(IMAGE_NAME):$(version)-alpine\nendif\nendif\nendef\n$(foreach version,$(VERSIONS),$(eval $(call test-version,$(version))))\n\n\n### RULES FOR TAGGING ###\n\ntag-latest: $(BUILD_LATEST_DEP)\n\t$(DOCKER) image tag $(REPO_NAME)/$(IMAGE_NAME):$(LATEST_VERSION) $(REPO_NAME)/$(IMAGE_NAME):latest\n\n\n### RULES FOR PUSHING ###\n\npush: $(foreach version,$(VERSIONS),push-$(version)) $(PUSH_DEP)\n\ndefine push-version\npush-$1: test-$1\nifeq ($(do_default),true)\n\t$(DOCKER) image push $(REPO_NAME)/$(IMAGE_NAME):$(version)\nendif\nifeq ($(do_alpine),true)\nifneq (\"$(wildcard $1/alpine)\",\"\")\n\t$(DOCKER) image push $(REPO_NAME)/$(IMAGE_NAME):$(version)-alpine\nendif\nendif\nendef\n$(foreach version,$(VERSIONS),$(eval $(call push-version,$(version))))\n\npush-latest: tag-latest $(PUSH_LATEST_DEP)\n\t$(DOCKER) image push $(REPO_NAME)/$(IMAGE_NAME):latest\n\t@$(DOCKER) run -v \"$(PWD)\":/workspace \\\n                      -e DOCKERHUB_USERNAME='$(DOCKERHUB_USERNAME)' \\\n                      -e DOCKERHUB_PASSWORD='$(DOCKERHUB_ACCESS_TOKEN)' \\\n                      -e DOCKERHUB_REPOSITORY='$(REPO_NAME)/$(IMAGE_NAME)' \\\n                      -e README_FILEPATH='/workspace/README.md' $(DOCKERHUB_DESC_IMG)\n\n\n.PHONY: build all update test-prepare test tag-latest push push-latest \\\n        $(foreach version,$(VERSIONS),build-$(version)) \\\n        $(foreach version,$(VERSIONS),test-$(version)) \\\n        $(foreach version,$(VERSIONS),push-$(version))\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.1025390625,
          "content": "# postgis/postgis\n\n[![Build Status](https://github.com/postgis/docker-postgis/workflows/Docker%20PostGIS%20CI/badge.svg)](https://github.com/postgis/docker-postgis/actions) [![Join the chat at https://gitter.im/postgis/docker-postgis](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/postgis/docker-postgis?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nThe `postgis/postgis` image provides tags for running Postgres with [PostGIS](http://postgis.net/) extensions installed. This image is based on the official [`postgres`](https://registry.hub.docker.com/_/postgres/) image and provides debian and alpine variants for PostGIS 3.5.x, which is compatible with PostgreSQL versions 12, 13, 14, 15, 16 and 17. Additionally, an image version is provided which is built from the latest two versions of Postgres (16, 17) with versions of PostGIS and its dependencies built from their respective master branches.\n\nThis image ensures that the default database created by the parent `postgres` image will have the following extensions installed:\n\n| installed extensions | [initialized](https://github.com/postgis/docker-postgis/blob/master/initdb-postgis.sh)|\n|---------------------|-----|\n| `postgis`           | yes |\n| `postgis_topology`  | yes |\n| `postgis_tiger_geocoder` | yes |\n| `postgis_raster` | |\n| `postgis_sfcgal` | |\n| `address_standardizer`| |\n| `address_standardizer_data_us`| |\n\nUnless `-e POSTGRES_DB` is passed to the container at startup time, this database will be named after the admin user (either `postgres` or the user specified with `-e POSTGRES_USER`). If you would prefer to use the older template database mechanism for enabling PostGIS, the image also provides a PostGIS-enabled template database called `template_postgis`.\n\n# Versions (2025-01-03)\n\nSupported architecture: `amd64` (also known as X86-64)\"\n\nRecommended versions for new users are: `postgis/postgis:17-3.5`, `postgis/postgis:16-3.5`\n\n### Debian based (recommended)\n\n* This Docker-PostGIS version has a cautious release cycle to guarantee high stability.\n  * By \"cautious\", we mean it does not always have the latest versions of geos, proj, gdal, and sfcgal packages.\n* We use PostGIS, geos, proj, gdal, and sfcgal packages from the Debian repository.\n  * In the Debian Bullseye repository, the versions are: geos=3.9, gdal=3.2, proj=7.2, and sfcgal=1.3.9.\n* This version is easy to extend and has matured over time.\n\n| DockerHub image | Dockerfile | OS | Postgres | PostGIS |\n| --------------- | ---------- | -- | -------- | ------- |\n| [postgis/postgis:12-3.5](https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=12-3.5) | [Dockerfile](https://github.com/postgis/docker-postgis/blob/master/12-3.5/Dockerfile) | debian:bullseye | 12 | 3.5.1 |\n| [postgis/postgis:13-3.5](https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=13-3.5) | [Dockerfile](https://github.com/postgis/docker-postgis/blob/master/13-3.5/Dockerfile) | debian:bullseye | 13 | 3.5.1 |\n| [postgis/postgis:14-3.5](https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=14-3.5) | [Dockerfile](https://github.com/postgis/docker-postgis/blob/master/14-3.5/Dockerfile) | debian:bullseye | 14 | 3.5.1 |\n| [postgis/postgis:15-3.5](https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=15-3.5) | [Dockerfile](https://github.com/postgis/docker-postgis/blob/master/15-3.5/Dockerfile) | debian:bullseye | 15 | 3.5.1 |\n| [postgis/postgis:16-3.5](https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=16-3.5) | [Dockerfile](https://github.com/postgis/docker-postgis/blob/master/16-3.5/Dockerfile) | debian:bullseye | 16 | 3.5.1 |\n| [postgis/postgis:17-3.5](https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=17-3.5) | [Dockerfile](https://github.com/postgis/docker-postgis/blob/master/17-3.5/Dockerfile) | debian:bullseye | 17 | 3.5.1 |\n\n### Alpine based\n\n* The base operating system is [Alpine Linux](https://alpinelinux.org/). It is designed to be small, simple, and secure, and it's based on [musl libc](https://musl.libc.org/).\n* In the Alpine 3.21 version, the package versions are: geos=3.13, gdal=3.10, proj=9.5, and sfcgal=2.0\n* PostGIS is compiled from source, making it a bit more challenging to extend.\n\n| DockerHub image | Dockerfile | OS | Postgres | PostGIS |\n| --------------- | ---------- | -- | -------- | ------- |\n| [postgis/postgis:12-3.5-alpine](https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=12-3.5-alpine) | [Dockerfile](https://github.com/postgis/docker-postgis/blob/master/12-3.5/alpine/Dockerfile) | alpine:3.21 | 12 | 3.5.1 |\n| [postgis/postgis:13-3.5-alpine](https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=13-3.5-alpine) | [Dockerfile](https://github.com/postgis/docker-postgis/blob/master/13-3.5/alpine/Dockerfile) | alpine:3.21 | 13 | 3.5.1 |\n| [postgis/postgis:14-3.5-alpine](https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=14-3.5-alpine) | [Dockerfile](https://github.com/postgis/docker-postgis/blob/master/14-3.5/alpine/Dockerfile) | alpine:3.21 | 14 | 3.5.1 |\n| [postgis/postgis:15-3.5-alpine](https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=15-3.5-alpine) | [Dockerfile](https://github.com/postgis/docker-postgis/blob/master/15-3.5/alpine/Dockerfile) | alpine:3.21 | 15 | 3.5.1 |\n| [postgis/postgis:16-3.5-alpine](https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=16-3.5-alpine) | [Dockerfile](https://github.com/postgis/docker-postgis/blob/master/16-3.5/alpine/Dockerfile) | alpine:3.21 | 16 | 3.5.1 |\n| [postgis/postgis:17-3.5-alpine](https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=17-3.5-alpine) | [Dockerfile](https://github.com/postgis/docker-postgis/blob/master/17-3.5/alpine/Dockerfile) | alpine:3.21 | 17 | 3.5.1 |\n\n### Test images\n\n* We provide alpha, beta, release candidate (rc), and development (identified as ~master) versions.\n* The template for the `*-master` images is updated manually, which might lead to a delay of a few weeks sometimes.\n\n| DockerHub image | Dockerfile | OS | Postgres | PostGIS |\n| --------------- | ---------- | -- | -------- | ------- |\n| [postgis/postgis:16-master](https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=16-master) | [Dockerfile](https://github.com/postgis/docker-postgis/blob/master/16-master/Dockerfile) | debian:bullseye | 16 | development: postgis, geos, proj, gdal |\n| [postgis/postgis:17-master](https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=17-master) | [Dockerfile](https://github.com/postgis/docker-postgis/blob/master/17-master/Dockerfile) | debian:bullseye | 17 | development: postgis, geos, proj, gdal |\n\n\n## Usage\n\nIn order to run a basic container capable of serving a PostGIS-enabled database, start a container as follows:\n\n    docker run --name some-postgis -e POSTGRES_PASSWORD=mysecretpassword -d postgis/postgis\n\nFor more detailed instructions about how to start and control your Postgres container, see the documentation for the `postgres` image [here](https://registry.hub.docker.com/_/postgres/).\n\nOnce you have started a database container, you can then connect to the database either directly on the running container:\n\n    docker exec -ti some-postgis psql -U postgres\n\n... or starting a new container to run as a client. In this case you can use a user-defined network to link both containers:\n\n    docker network create some-network\n\n    # Server container\n    docker run --name some-postgis --network some-network -e POSTGRES_PASSWORD=mysecretpassword -d postgis/postgis\n\n    # Client container\n    docker run -it --rm --network some-network postgis/postgis psql -h some-postgis -U postgres\n\nCheck the documentation on the [`postgres` image](https://registry.hub.docker.com/_/postgres/) and [Docker networking](https://docs.docker.com/network/) for more details and alternatives on connecting different containers.\n\nSee [the PostGIS documentation](http://postgis.net/docs/postgis_installation.html#create_new_db_extensions) for more details on your options for creating and using a spatially-enabled database.\n\n## Supported Environment Variables:\n\nSince the docker-postgis repository is an extension of the official Docker PostgreSQL repository, all environment variables supported there are also supported here:\n\n* `POSTGRES_PASSWORD`\n* `POSTGRES_USER`\n* `POSTGRES_DB`\n* `POSTGRES_INITDB_ARGS`\n* `POSTGRES_INITDB_WALDIR`\n* `POSTGRES_HOST_AUTH_METHOD`\n* `PGDATA`\n\nRead more:  https://github.com/docker-library/docs/blob/master/postgres/README.md\n\nWarning: **the Docker specific variables will only have an effect if you start the container with a data directory that is empty;** any pre-existing database will be left untouched on container startup.\n\nIt's important to note that the environment variables for the Docker image are different from those of the [libpq — C Library](https://www.postgresql.org/docs/current/libpq-envars.html)  (`PGDATABASE`,`PGUSER`,`PGPASSWORD` )\n\n## Troubleshooting tips:\n\nTroubleshooting can often be challenging. It's important to know that the docker-postgis repository is an extension of the official Docker PostgreSQL repository. Therefore, if you encounter any issues, it's worth testing whether the problem can be reproduced with the [official PostgreSQL Docker images](https://hub.docker.com/_/postgres). If so, it's recommended to search for solutions based on this. The following websites are suggested:\n\n* Upstream docker postgres repo: https://github.com/docker-library/postgres\n  * search for the open or closed issues !\n* Docker Community Forums: https://forums.docker.com\n* Docker Community Slack: https://dockr.ly/slack\n* Stack Overflow: https://stackoverflow.com/questions/tagged/docker+postgresql\n\nIf your problem is Postgis related:\n\n* Stack Overflow : docker + postgis https://stackoverflow.com/questions/tagged/docker+postgis\n* Postgis issue tracker: https://trac.osgeo.org/postgis/report\n\nAnd if you don't have a postgres docker experience - read this blog post:\n\n* https://www.docker.com/blog/how-to-use-the-postgres-docker-official-image/\n\n\n## Security\n\nIt's crucial to be aware that in a cloud environment, with default settings, these images are vulnerable, and there's a high risk of cryptominer infection if the ports are left open. ( [Read More](https://github.com/docker-library/postgres/issues/770#issuecomment-704460980) )\n* Note that ports which are not bound to the host (i.e., `-p 5432:5432` instead of `-p 127.0.0.1:5432:5432`) will be accessible from the outside. This also applies if you configured UFW to block this specific port, as Docker manages its own iptables rules. ( [Read More](https://docs.docker.com/network/iptables/) )\n\n#### Recomendations:\n* You can add options for using SSL ( [see postgres example](https://github.com/docker-library/postgres/issues/989#issuecomment-1222648067) )\n  - `-c ssl=on -c ssl_cert_file=/var/lib/postgresql/server.crt -c ssl_key_file=/var/lib/postgresql/server.key`\n* Or you can use [SSH Tunnels](https://www.postgresql.org/docs/15/ssh-tunnels.html) with `-p 127.0.0.1:5432:5432`\n\n#### Security scanner information:\n\n- Please also scan the base `postgres` docker Image:\nIt's important to also scan the base `postgres` Docker image for potential security issues. If your security scanner reports vulnerabilities (known as CVEs) in the image, you may wonder why. To get a better understanding, please read the Docker Library FAQ, especially the section titled [\"Why does my security scanner show that an image has CVEs?\"](https://github.com/docker-library/faq#why-does-my-security-scanner-show-that-an-image-has-cves)\nFor more specific issues related to the postgres docker image, you can search using these links:\n  - [search for repo:docker-library/postgres trivy](https://github.com/search?q=repo%3Adocker-library%2Fpostgres+trivy&type=issues)\n  - [search for repo:docker-library/postgres CVE](https://github.com/search?q=repo%3Adocker-library%2Fpostgres+CVE&type=issues)\n\n- Optimizing Security Scans:\nIt's advisable to focus on scanning and fixing issues that can be resolved.\nUse this command to scan for fixable issues only:\n  * `trivy image --ignore-unfixed postgis/postgis:16-3.5-alpine`\n  * `trivy image --ignore-unfixed postgres:16-alpine`\nFor more details, you can read this article: https://pythonspeed.com/articles/docker-security-scanner/\n\n#### Limitations on Updates:\nUnfortunately, we don't have control over updates to Debian and Alpine distributions or the upstream `postgres` image.\nBecause of this, there might be some issues that we cannot fix right away.\nOn the positive side, the `postgis/postgis` images are regenerated every Monday. This process is to ensure they include the latest changes and improvements. As a result, these images are consistently kept up-to-date.\n\n#### Suggestions Welcome:\nWe are always open to suggestions to enhance security. If you have any ideas, please let us know.\n\n## Known Issues / Errors\n\nWhen You encouter errors due to PostGIS update `OperationalError: could not access file \"$libdir/postgis-X.X`, run:\n\n`docker exec some-postgis update-postgis.sh`\n\nIt will update to Your newest PostGIS. Update is idempotent, so it won't hurt when You run it more than once, You will get notification like:\n\n```\nUpdating PostGIS extensions template_postgis to X.X.X\nNOTICE:  version \"X.X.X\" of extension \"postgis\" is already installed\nNOTICE:  version \"X.X.X\" of extension \"postgis_topology\" is already installed\nNOTICE:  version \"X.X.X\" of extension \"postgis_tiger_geocoder\" is already installed\nALTER EXTENSION\nUpdating PostGIS extensions docker to X.X.X\nNOTICE:  version \"X.X.X\" of extension \"postgis\" is already installed\nNOTICE:  version \"X.X.X\" of extension \"postgis_topology\" is already installed\nNOTICE:  version \"X.X.X\" of extension \"postgis_tiger_geocoder\" is already installed\nALTER EXTENSION\n```\n\n## Contributor guideline\n\nThis Docker-PostGIS project [is part of the PostGIS group](https://postgis.net/development/rfcs/rfc05/#projects-under-postgis-umbrella) and follows more flexible contributor rules.\n\n* Please take a moment to review the current issues, discussions, and pull requests before you start.\n* If you have a major change in mind, we kindly ask you to start a discussion about it first.\n* After making changes to the templates, please run the `./update.sh` script.\n\n## Code of Conduct\n\nsee: https://postgis.net/community/conduct/\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "initdb-postgis.sh",
          "type": "blob",
          "size": 0.7138671875,
          "content": "#!/bin/bash\n\nset -e\n\n# Perform all actions as $POSTGRES_USER\nexport PGUSER=\"$POSTGRES_USER\"\n\n# Create the 'template_postgis' template db\n\"${psql[@]}\" <<- 'EOSQL'\nCREATE DATABASE template_postgis IS_TEMPLATE true;\nEOSQL\n\n# Load PostGIS into both template_database and $POSTGRES_DB\nfor DB in template_postgis \"$POSTGRES_DB\"; do\n\techo \"Loading PostGIS extensions into $DB\"\n\t\"${psql[@]}\" --dbname=\"$DB\" <<-'EOSQL'\n\t\tCREATE EXTENSION IF NOT EXISTS postgis;\n\t\tCREATE EXTENSION IF NOT EXISTS postgis_topology;\n\t\t-- Reconnect to update pg_setting.resetval\n\t\t-- See https://github.com/postgis/docker-postgis/issues/288\n\t\t\\c\n\t\tCREATE EXTENSION IF NOT EXISTS fuzzystrmatch;\n\t\tCREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder;\nEOSQL\ndone\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "update-postgis.sh",
          "type": "blob",
          "size": 1.0205078125,
          "content": "#!/bin/sh\n\nset -e\n\n# Perform all actions as $POSTGRES_USER\nexport PGUSER=\"$POSTGRES_USER\"\n\nPOSTGIS_VERSION=\"${POSTGIS_VERSION%%+*}\"\n\n# Load PostGIS into both template_database and $POSTGRES_DB\nfor DB in template_postgis \"$POSTGRES_DB\" \"${@}\"; do\n    echo \"Updating PostGIS extensions '$DB' to $POSTGIS_VERSION\"\n    psql --dbname=\"$DB\" -c \"\n        -- Upgrade PostGIS (includes raster)\n        CREATE EXTENSION IF NOT EXISTS postgis VERSION '$POSTGIS_VERSION';\n        ALTER EXTENSION postgis  UPDATE TO '$POSTGIS_VERSION';\n\n        -- Upgrade Topology\n        CREATE EXTENSION IF NOT EXISTS postgis_topology VERSION '$POSTGIS_VERSION';\n        ALTER EXTENSION postgis_topology UPDATE TO '$POSTGIS_VERSION';\n\n        -- Install Tiger dependencies in case not already installed\n        CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;\n        -- Upgrade US Tiger Geocoder\n        CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder VERSION '$POSTGIS_VERSION';\n        ALTER EXTENSION postgis_tiger_geocoder UPDATE TO '$POSTGIS_VERSION';\n    \"\ndone\n"
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 12.697265625,
          "content": "#!/bin/bash\n# Derived from https://github.com/docker-library/postgres/blob/master/update.sh\nset -Eeuo pipefail\n\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\nversions=( \"$@\" )\nif [ ${#versions[@]} -eq 0 ]; then\n\tversions=( */Dockerfile )\nfi\nversions=( \"${versions[@]%/Dockerfile}\" )\n\nfor optimized in debian alpine test; do\n    rm -f      _dockerlists_${optimized}.md\n    echo \" \" > _dockerlists_${optimized}.md\n    echo \"| DockerHub image | Dockerfile | OS | Postgres | PostGIS |\" >> _dockerlists_${optimized}.md\n    echo \"| --------------- | ---------- | -- | -------- | ------- |\" >> _dockerlists_${optimized}.md\ndone\n\nautogenerated='NOTE: THIS DOCKERFILE IS GENERATED VIA \"make update\"! PLEASE DO NOT EDIT IT DIRECTLY.'\n\ndockerhublink=\"https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&name=\"\ngithubrepolink=\"https://github.com/postgis/docker-postgis/blob/master\"\n\n# sort version numbers with highest last (so it goes first in .travis.yml)\nIFS=$'\\n'; versions=( $(echo \"${versions[*]}\" | sort -V) ); unset IFS\n\ndefaultAlpinenSuite='3.21'\ndefaultDebianSuite='bullseye-slim'\ndeclare -A debianSuite=(\n    # https://github.com/docker-library/postgres/issues/582\n    [11]='bullseye-slim'\n    [12]='bullseye-slim'\n    [13]='bullseye-slim'\n    [14]='bullseye-slim'\n    [15]='bullseye-slim'\n    [16]='bullseye-slim'\n    [17]='bullseye-slim'\n)\n\ndefaultPostgisDebPkgNameVersionSuffix='3'\ndeclare -A postgisDebPkgNameVersionSuffixes=(\n    [3.0]='3'\n    [3.1]='3'\n    [3.2]='3'\n    [3.3]='3'\n    [3.4]='3'\n    [3.5]='3'\n)\n\npackagesBase='http://apt.postgresql.org/pub/repos/apt/dists/'\n\ncgalGitHash=\"$(git ls-remote https://github.com/CGAL/cgal.git heads/master | awk '{ print $1}')\"\nsfcgalGitHash=\"$(git ls-remote https://gitlab.com/SFCGAL/SFCGAL.git heads/master | awk '{ print $1}')\"\nprojGitHash=\"$(git ls-remote https://github.com/OSGeo/PROJ.git heads/master | awk '{ print $1}')\"\ngdalGitHash=\"$(git ls-remote https://github.com/OSGeo/gdal.git refs/heads/master | grep '\\srefs/heads/master' | awk '{ print $1}')\"\ngeosGitHash=\"$(git ls-remote https://github.com/libgeos/geos.git heads/main | awk '{ print $1}')\"\npostgisGitHash=\"$(git ls-remote https://github.com/postgis/postgis.git heads/master | awk '{ print $1}')\"\n\n#-------------------------------------------\n# Correct version sorting\nfunction version_reverse_sort() {\n    # This function sorts version numbers in reverse order,\n    # ensuring that versions without pre-release tags (e.g., \"3.4.0\")\n    # are ranked higher than those with pre-release tags (e.g., \"3.4.0rc4\").\n    # It adds a \".9991\" suffix to versions without pre-release tags,\n    # sorts them with `sort -Vr`, and then removes the \".9991\" suffix.\n    sed -r \"s/([0-9]+\\.[0-9]+\\.[0-9]+$)/\\1\\.9991/\" | sort -Vr | sed s/\\.9991$//\n}\n\napi_preference=\"github\"\nfunction fetch_postgis_versions() {\n    # get all postgis versions from github\n    local REPO=\"postgis/postgis\"\n    local PER_PAGE=100 # You can ask for up to 100 results per page\n    local page=1\n    postgis_all_v3_versions=\"\"\n\n    while true; do\n        local response\n        if [ \"$api_preference\" == \"github\" ]; then\n            response=$(curl --silent \"https://api.github.com/repos/$REPO/tags?per_page=$PER_PAGE&page=$page\") || {\n                echo \"Failed to fetch postgis_versions from api.github.com/repos/$REPO/tags\"\n                return 1\n            }\n        elif [ \"$api_preference\" == \"osgeo\" ]; then\n            response=$(curl --silent \"https://git.osgeo.org/gitea/api/v1/repos/${REPO}/tags?page=$page&limit=$PER_PAGE\") || {\n                echo \"Failed to fetch postgis_versions from git.osgeo.org/gitea/api/v1/repos/${REPO}/tags\"\n                return 1\n            }\n        fi\n\n        # Check for rate limit exceeded error - related to api.github.com\n        if echo \"$response\" | grep -q \"API rate limit exceeded\"; then\n            echo \"Error: API rate limit exceeded!\"\n            echo \"$response\"\n            exit 1\n        fi\n\n        # Extract tag names from the JSON response\n        local tags\n        tags=$(echo \"$response\" | grep -Po '\"name\":\\s*\"\\K[^\"]+' || true)\n        local count\n        count=$(echo \"$tags\" | sed '/^$/d' | wc -l)\n\n        if ((count == 0)); then\n            break\n        fi\n\n        if ((page > 12)); then\n            echo \"Too many pages: ${page} - exiting; unexpected and something is wrong!\"\n            exit 1\n        fi\n\n        postgis_all_v3_versions+=\" $tags\"\n\n        ((page++))\n    done\n}\n\nfetch_postgis_versions || {\n    echo \"Error fetching postgis versions! Maybe network or server error!\"\n    exit 1\n}\n\n# Keep 3.* versions only\npostgis_all_v3_versions=$(echo \"$postgis_all_v3_versions\" | sed '/^$/d' | grep '^3\\.' | version_reverse_sort)\npostgis_all_v3_versions_array_string=$(echo \"$postgis_all_v3_versions\" | tr '\\n' ' ')\necho \"postgis_all_v3_versions_array_string = ${postgis_all_v3_versions_array_string}\"\necho \" \"\n\n#-------------------------------------------\n\ndeclare -A suitePackageList=() suiteArches=()\nfor version in \"${versions[@]}\"; do\n    IFS=- read postgresVersion postgisVersion <<< \"$version\"\n\n    echo \" \"\n    echo \"---- generate Dockerfile for $version ----\"\n    echo \"postgresVersion=$postgresVersion\"\n    echo \"postgisVersion=$postgisVersion\"\n\n    if [ \"2.5\" == \"$postgisVersion\" ]; then\n        # posgis 2.5 only in the stretch ; no bullseye version\n        tag='stretch-slim'\n    else\n        tag=\"${debianSuite[$postgresVersion]:-$defaultDebianSuite}\"\n    fi\n    suite=\"${tag%%-slim}\"\n\n    if [ -z \"${suitePackageList[\"$suite\"]:+isset}\" ]; then\n        suitePackageList[\"$suite\"]=\"$(curl -fsSL \"${packagesBase}/${suite}-pgdg/main/binary-amd64/Packages.bz2\" | bunzip2)\"\n    fi\n    if [ -z \"${suiteArches[\"$suite\"]:+isset}\" ]; then\n        suiteArches[\"$suite\"]=\"$(curl -fsSL \"${packagesBase}/${suite}-pgdg/Release\" | awk -F ':[[:space:]]+' '$1 == \"Architectures\" { gsub(/[[:space:]]+/, \"|\", $2); print $2 }')\"\n    fi\n\n    postgresVersionMain=\"$(echo \"$postgresVersion\" | awk -F 'alpha|beta|rc' '{print $1}')\"\n    versionList=\"$(echo \"${suitePackageList[\"$suite\"]}\"; curl -fsSL \"${packagesBase}/${suite}-pgdg/${postgresVersionMain}/binary-amd64/Packages.bz2\" | bunzip2)\"\n    fullVersion=\"$(echo \"$versionList\" | awk -F ': ' '$1 == \"Package\" { pkg = $2 } $1 == \"Version\" && pkg == \"postgresql-'\"$postgresVersionMain\"'\" { print $2; exit }' || true)\"\n\n    if [ \"$suite\" = \"bullseye\" ]; then\n        boostVersion=\"1.74.0\"\n    else\n        echo \"Unknown debian version; stop\"\n        exit 1\n    fi\n\n\n    optimized=\"\"\n    if [[ \"$version\" =~ \"alpha\" || \"$version\" =~ \"beta\" || \"$version\" =~ \"rc\" || \"$version\" =~ \"master\" ]];\n    then\n        optimized=\"test\"\n    else\n        optimized=\"debian\"\n    fi\n    echo \"optimized=$optimized\"\n\n    debianPostgisMajMin=\"\"\n    if [ \"master\" == \"$postgisVersion\" ]; then\n        postgisPackageName=\"\"\n        postgisFullVersion=\"$postgisVersion\"\n        postgisMajor=\"\"\n        postgisDocSrc=\"development: postgis, geos, proj, gdal\"\n    else\n        postgisMajMin=\"$( echo \"${postgisVersion}\" | cut -d. -f1 ).$( echo \"${postgisVersion}\" | cut -d. -f2 )\"\n        echo \"postgisMajMin=${postgisMajMin}\"\n\n        postgisPackageName=\"postgresql-${postgresVersionMain}-postgis-${postgisDebPkgNameVersionSuffixes[${postgisMajMin}]}\"\n        postgisFullVersion=\"$(echo \"$versionList\" | awk -F ': ' '$1 == \"Package\" { pkg = $2 } $1 == \"Version\" && pkg == \"'\"$postgisPackageName\"'\" { print $2; exit }' || true)\"\n        echo \"postgisPackageName=${postgisPackageName}\"\n        echo \"postgisFullVersion=${postgisFullVersion}\"\n\n        debianPostgisMajMin=\"$( echo \"${postgisFullVersion}\" | cut -d. -f1 ).$( echo \"${postgisFullVersion}\" | cut -d. -f2 )\"\n\n        if [ \"$debianPostgisMajMin\" == \"$postgisMajMin\" ]; then\n            echo \"debian postgis version is OK \"\n            postgisMajor=\"${postgisDebPkgNameVersionSuffixes[${postgisMajMin}]}\"\n            postgisDocSrc=\"${postgisFullVersion%%+*}\"\n        else\n            echo \"debian postgis is not updated, different .. \"\n            postgisFullVersion=\"\"\n            postgisMajor=\"\"\n            postgisDocSrc=\"\"\n        fi\n    fi\n\n    if [ -z \"$postgisFullVersion\" ]\n    then\n        echo \"SKIP debian version\";\n        # debain version not found;\n        echo \" # placeholder Dockerfile\"                                         > \"$version/Dockerfile\"\n        echo \" # Debian version of postgis $postgisFullVersion is not detected!\">> \"$version/Dockerfile\"\n        echo \" # This is an autogenerated message of ./update.sh \"              >> \"$version/Dockerfile\"\n        rm -f \"$version/*.sh\"\n        rm -f \"$version/*.md\"\n        # detect the exact Postgis version - for the alpine version\n        # check the latest released 3.x version (so not alpha/beta/rc)\n        _postgisMinor=$(echo \"$postgisMajMin\" | cut -d. -f2)\n        postgisFullVersion=$(echo \"$postgis_all_v3_versions\" | grep \"^3\\.${_postgisMinor}\\.\" | grep -v '[a-zA-Z]' | version_reverse_sort | head -n 1 || true)\n        # Check if the result is empty\n        if [[ -z \"${postgisFullVersion}\" ]]; then\n            # If empty, run the command again without excluding pre-releases (alpha/beta/rc)\n            postgisFullVersion=$(echo \"$postgis_all_v3_versions\" | grep \"^3\\.${_postgisMinor}\\.\" | version_reverse_sort | head -n 1 || true)\n        fi\n        postgisDocSrc=$postgisFullVersion\n        echo \"!!!!! postgisFullVersion = ${postgisFullVersion}\";\n    else\n        (\n            set -x\n            cp -p initdb-postgis.sh update-postgis.sh \"$version/\"\n            if [ \"master\" == \"$postgisVersion\" ]; then\n              cat Dockerfile.master.template > \"$version/Dockerfile\"\n            else\n              cat Dockerfile.template        > \"$version/Dockerfile\"\n            fi\n            sed -i 's/%%TXT_AUTOGENERATED%%/'\"$autogenerated\"'/g; s/%%PG_MAJOR%%/'$postgresVersion'/g; s/%%POSTGIS_MAJOR%%/'$postgisMajor'/g; s/%%POSTGIS_VERSION%%/'$postgisFullVersion'/g; s/%%POSTGIS_GIT_HASH%%/'$postgisGitHash'/g; s/%%CGAL_GIT_HASH%%/'$cgalGitHash'/g; s/%%SFCGAL_GIT_HASH%%/'$sfcgalGitHash'/g; s/%%PROJ_GIT_HASH%%/'$projGitHash'/g; s/%%GDAL_GIT_HASH%%/'$gdalGitHash'/g; s/%%GEOS_GIT_HASH%%/'$geosGitHash'/g; s/%%BOOST_VERSION%%/'\"$boostVersion\"'/g; s/%%DEBIAN_VERSION%%/'\"$suite\"'/g;' \"$version/Dockerfile\"\n\n            echo \"| [postgis/postgis:${version}](${dockerhublink}${version}) | [Dockerfile](${githubrepolink}/${version}/Dockerfile) | debian:${suite} | ${postgresVersion} | ${postgisDocSrc} |\" >> _dockerlists_${optimized}.md\n        )\n    fi\n\n    if [ \"master\" == \"$postgisVersion\" ]; then\n        srcVersion=\"\"\n        srcSha256=\"\"\n    elif [ -d \"$version/alpine\" ]; then\n        # For Alpine, get the latest release in the same minor version series\n        _postgisMajor=$(echo \"$postgisMajMin\" | cut -d. -f1)\n        _postgisMinor=$(echo \"$postgisMajMin\" | cut -d. -f2)\n\n        # Find the latest non-preview release for this minor version\n        srcVersion=$(echo \"$postgis_all_v3_versions_array_string\" | tr ' ' '\\n' | grep \"^${_postgisMajor}\\.${_postgisMinor}\\.\" | grep -v '[a-zA-Z]' | head -n 1)\n\n        # If no stable release found, fall back to the debian version\n        if [ -z \"$srcVersion\" ]; then\n            srcVersion=\"${postgisFullVersion%%+*}\"\n        fi\n\n        srcSha256=\"$(curl -sSL \"https://github.com/postgis/postgis/archive/$srcVersion.tar.gz\" | sha256sum | awk '{ print $1 }')\"\n        echo \"Selected PostGIS version for Alpine: ${srcVersion}\"\n        postgisDocSrc=$srcVersion\n    else\n        srcVersion=\"${postgisFullVersion%%+*}\"\n        srcSha256=\"$(curl -sSL \"https://github.com/postgis/postgis/archive/$srcVersion.tar.gz\" | sha256sum | awk '{ print $1 }')\"\n        postgisDocSrc=$srcVersion\n    fi\n\n    for variant in alpine; do\n        if [ ! -d \"$version/$variant\" ]; then\n            continue\n        fi\n        (\n            set -x\n            if [ \"$optimized\" != \"test\" ]; then\n              optimized=\"alpine\"\n            fi\n            cp -p Dockerfile.alpine.template initdb-postgis.sh update-postgis.sh \"$version/$variant/\"\n            mv \"$version/$variant/Dockerfile.alpine.template\" \"$version/$variant/Dockerfile\"\n            sed -i 's/%%TXT_AUTOGENERATED%%/'\"$autogenerated\"'/g; s/%%PG_MAJOR%%/'\"$postgresVersion\"'/g; s/%%POSTGIS_VERSION%%/'\"$srcVersion\"'/g; s/%%POSTGIS_SHA256%%/'\"$srcSha256\"'/g' \"$version/$variant/Dockerfile\"\n\n            echo \"| [postgis/postgis:${version}-${variant}](${dockerhublink}${version}-${variant}) | [Dockerfile](${githubrepolink}/${version}/${variant}/Dockerfile) | alpine:${defaultAlpinenSuite} | ${postgresVersion} | ${postgisDocSrc} |\" >> _dockerlists_${optimized}.md\n        )\n    done\ndone\n\necho \"|-------------------------|\"\necho \"|-   Generated images    -|\"\necho \"|-------------------------|\"\n\nfor optimized in debian alpine test; do\n    echo \" \"\n    echo \"---- ${optimized} ----\"\n    cat _dockerlists_${optimized}.md\ndone\n\necho \" \"\necho \"Postprocessing todo:\"\necho \"- add the new versions to README.md ( manually )\"\nls -la  _dockerlists_*.md\necho \" \"\necho \" - done - \"\n"
        }
      ]
    }
  ]
}