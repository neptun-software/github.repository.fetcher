{
  "metadata": {
    "timestamp": 1736711410916,
    "page": 184,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lsgwr/spring-boot-online-exam",
      "stars": 1575,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.271484375,
          "content": "# Compiled class file\n*.class\n\n# Log file\n*.log\n\n# BlueJ files\n*.ctxt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.jar\n*.war\n*.nar\n*.ear\n*.zip\n*.tar.gz\n*.rar\n\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\nhs_err_pid*\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.1748046875,
          "content": "# build docker for project\nFROM waterknife/centos-nginx-jdk8-mysql\nWORKDIR /lsg/\nCOPY backend/target/*.jar ./app.jar\nCOPY entrypoint.sh ./\nRUN chmod 777 entrypoint.sh\nEXPOSE 9527\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2019 Liang Shan Guang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.2001953125,
          "content": "# spring-boot-online-exam\n\n> 在线Demo预览，http://129.211.88.191 ，账户分别是admin、teacher、student，密码是admin123。视频讲解代码：https://www.bilibili.com/video/BV1FP4y1L7xt/\n\n> 好消息！！！一个小伙伴做了Python实现，欢迎大家star：https://github.com/xingxingzaixian/django-drf-online-exam\n\n## 1.快速体验\n### 1.1 事先准备\n> clone代码并进入代码路径\n\n```shell\ngit clone git@github.com:lsgwr/spring-boot-online-exam.git\ncd spring-boot-online-exam\n```\n\n下面按照Linux和windows说明快速搭建的方法\n### 1.2 Linux\n执行代码下的脚本start.sh即可\n\n然后访问 http://ip:80 即可访问自己搭建的考试系统\n\n### 1.3 windows\n+ 1.安装JDK，推荐JDK8\n+ 2.从官方仓库下载发布的jar包，建议选择最新版：https://github.com/lsgwr/spring-boot-online-exam/releases\n+ 3.安装MySQL，创建数据库exam，并初始化密码为aA111111，导入doc/sql/exam.sql文件来创建数据库\n+ 4.启动jar包：`java -jar exam.jar`\n+ 5.访问：http://ip:9527 即可访问自己搭建的考试系统\n\n## 2.介绍\n基于springboot的在线考试系统\n\n### 2.1 功能简介\n\n+ 支持单选题、多选题、判断题\n+ 支持学生(student)、教师(teacher)、管理员(admin)三种角色\n  + 学生：参加考试和查看我的考试\n  + 教师：学生的所有权限+创建/编辑题目+创建/编辑考试\n  + 管理员：教师的所有权限+管理用户\n\n### 2.3 软件架构\n\n> 前后端分离，前段组件化，方便二次开发；后端\n\n+ 后端采用SpringBoot+JPA++Swagger2+JWT校验,根据不同用户的权限返回给用户不同的数据\n+ 后端采用Vue+AntDesign,组件化拆分，封装了很多年公共组件，方便维护和二次开发\n\n### 2.3 使用教程\n\n+ 1.下载代码\n  ```shell\n  git clone https://github.com/19920625lsg/spring-boot-online-exam.git\n  ```\n+ 2.初始化数据库\n  > 安装mysql的步骤这里省略，网上的教程很多。安装好mysql后，新建exam数据库，密码和`spring-boot-online-exam/backend/exam/src/main/resources/application.yml`的`password: xxxxxx`保持一致，然后导入`spring-boot-online-exam/doc/sql/exam.sql`\n+ 3.启动后端\n  > 打开`spring-boot-online-exam/backend/exam`这个Maven项目，可以在IDE里启动或者执行`mvn install`生成jar包启动\n+ 4.启动前端\n  + 进入到前端代码路径 `cd spring-boot-online-exam/frontend/exam/`\n  + 安装依赖 `npm install`\n  + 启动前端 `npm run serve`\n+ 5.部署完毕，查看效果\n  > 打开 http://localhost:8000 或者 http://本机ip:8000 即可查看演示效果\n\n## 3.功能图示\n\n+ 1.管理题目\n  + 1.1 题目列表\n    > ![题目查看](doc/images/question_list.png)\n  + 1.2 题目创建\n    > ![题目创建](doc/images/question_create.png)\n  + 1.3 题目更新\n    > ![题目更新](doc/images/question_update.png)\n+ 2.考试管理\n  + 2.1 考试列表\n    > ![考试查看](doc/images/exam_list.png)\n  + 2.2 考试创建\n    > ![考试创建](doc/images/exam_create.png)\n  + 2.3 考试更新(`还有点小bug，开发中`)\n    > ![考试更新](doc/images/exam_update.png)\n+ 3.我的考试\n  + 3.1 参加考试\n    > 在\"考试列表\"模块点击自己想参加的考试卡片即可\n    > ![参加考试1](doc/images/exam_join.png)\n    > ![参加考试2](doc/images/exam_join2.png)\n  + 3.2 考试记录查看\n    > ![考试记录查看](doc/images/exam_detail.png)\n\n## 4.参与贡献\n\n1.  Fork 本仓库\n2.  新建 exam_xxx 分支\n3.  提交代码\n4.  新建 Pull Request\n\n## 5.Todo\n+ `√`0.修复issue提地bug：题目创建失败\n+ `√`1.考试详情编辑\n+ 2.支持题目和考试的删除`删除的话比较麻烦，先不做了，最好是弄个visible字段，不实际删除，要不后面有些关联数据找不到就不好了`\n  > 如果题目有关联的考试则必须先删除对应的考试，反过来删除考试则不用删除题目\n+ 3.图片改成base64存到数据库中\n+ 4.题干和选项支持富文本\n+ 5.支持批量导入题目\n+ 6.新增用户管理、学科管理功能\n+ 7.老师能考到所有学生的成绩以及考试的统计信息\n+ 8.更多的数据分析功能\n+ 9.支持容器化一键式部署(编好Dockerfile)\n+ 10.支持移动端，最好用uniapp做\n+ ......抓紧做吧，争取每周末做一点......\n"
        },
        {
          "name": "backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.2392578125,
          "content": "#!/bin/bash\nrm -rf backend/src/main/resources/static\nrm -rf frontend/dist\ncd frontend && npm install && npm run build && mv dist ../backend/src/main/resources/static\ncd ../backend && mvn clean package\ncd ../ && docker build -t waterknife/exam .\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "entrypoint.sh",
          "type": "blob",
          "size": 0.03515625,
          "content": "#!/bin/sh\nnohup java -jar app.jar &\n"
        },
        {
          "name": "frontend",
          "type": "tree",
          "content": null
        },
        {
          "name": "start.sh",
          "type": "blob",
          "size": 0.1611328125,
          "content": "#!/bin/bash\ndocker rm -f exam\ndocker run -d -p 80:9527 -p 3306:3306 --name exam --privileged=true waterknife/exam  /usr/sbin/init\ndocker exec exam /lsg/entrypoint.sh"
        }
      ]
    }
  ]
}