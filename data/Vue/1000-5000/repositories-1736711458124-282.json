{
  "metadata": {
    "timestamp": 1736711458124,
    "page": 282,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "WuKongOpenSource/Wukong_Accounting",
      "stars": 1168,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0791015625,
          "content": ".DS_Store\n.idea/\n*.iml\nlogs/**\ntest\ntarget\n*/target/**\nrebel.xml\nrebel-remote.xml"
        },
        {
          "name": "72crm.bat",
          "type": "blob",
          "size": 0.7646484375,
          "content": "@echo off\ntitle ${project.artifactId}\nrem -------------------------------------------------------------------------\nrem\nrem 使用说明：\nrem\nrem 1: 打包时默认使用application-test.yml配置文件，如需要更改，直接更改下面的命令即可，如 -Dspring.profiles.include=core,prod\nrem\nrem -------------------------------------------------------------------------\n\nsetlocal & pushd\n\nset JAVA_OPTS=-Dspring.profiles.include=core,test\nif \"${project.artifactId}\" == \"gateway\" (\n    set JAVA_OPTS =\n)\nrem -Xms分配堆最小内存，默认为物理内存的1/64；-Xmx分配最大内存，默认为物理内存的1/4 如果程序会崩溃请将此值调高\njava -Xms128m -Xmx512m -jar %JAVA_OPTS% ${project.artifactId}-${project.version}.jar\n\nendlocal & popd\npause\n\n\n\n"
        },
        {
          "name": "72crm.sh",
          "type": "blob",
          "size": 1.0556640625,
          "content": "#!/bin/bash\n\nCOMMAND=\"$1\"\n\nif [[ \"$COMMAND\" != \"start\" ]] && [[ \"$COMMAND\" != \"stop\" ]] && [[ \"$COMMAND\" != \"restart\" ]]; then\n\techo \"Usage: $0 start | stop | restart\"\n\texit 0\nfi\n\nAPP_BASE_PATH=$(cd `dirname $0`; pwd)\n\nfunction start()\n{\n    # -Xms分配堆最小内存，默认为物理内存的1/64；-Xmx分配最大内存，默认为物理内存的1/4 如果程序会崩溃请将此值调高\n    nohup java -jar ${JAVA_OPTS} ${project.artifactId}-${project.version}.jar >> /dev/null 2>&1 &\n    echo \"--------项目启动成功--------\"\n    echo \"--------欢迎使用悟空CRM ^_^--------\"\n}\n\nfunction stop()\n{\n    P_ID=`ps -ef | grep -w ${project.artifactId}-${project.version}.jar | grep -v \"grep\" | awk '{print $2}'`\n    kill $P_ID\n    echo \"项目已关闭\"\n}\n\nfunction restart()\n{\n    P_ID=`ps -ef | grep -w ${project.artifactId}-${project.version}.jar | grep -v \"grep\" | awk '{print $2}'`\n    start\n    sleep 25s\n    kill $P_ID\n    echo \"项目重启成功\"\n}\n\nif [[ \"$COMMAND\" == \"start\" ]]; then\n\tstart\nelif [[ \"$COMMAND\" == \"stop\" ]]; then\n    stop\nelse\n    restart\nfi\n"
        },
        {
          "name": "DB",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 3.8642578125,
          "content": "悟空软件开源版使用协议\n\n悟空软件即：悟空客户关系管理软件、悟空人力资源管理系统、悟空财务管理系统、悟空项目管理系统、悟空进销存管理系系统、悟空知识库管理系统、悟空AI等悟空相关体系产品（以\n下简称悟空软件）由郑州卡卡罗特软件科技有限公司（以下简称卡卡罗特）开发。卡卡罗特\n依法拥有悟空CRM的所有版权和所有权益。本着共享开放的角度，卡卡罗特以开放源代码的\n形式发布悟空软件，您可以在遵守该协议的前提下使用悟空软件。\n\n自您安装悟空软件开始，您和卡卡罗特之间的合同关系自动成立，成为卡卡罗特用户\n（以下简称为用户）。除非您停止使用悟空软件或与卡卡罗特有签署额外合同，您须认真遵\n循该用户协议约定的每一项条款。\n\n官方地址：www.5kcrm.com/www.72crm.com\n官方电话：400-0812-558\n官方邮箱：service@5kcrm.com\n官方社区：bbs.72crm.net\n\n一、协议中提到的名词约定\n\n1.1下述条款中所指悟空软件的标志包括如下方面：\n悟空软件源代码及文档中关于悟空软件的版权提示、文字、图片和链接。\n悟空软件运行时界面上呈现出来的有关悟空软件的文字、图片和链接。\n\n1.2不包括如下方面：\n悟空软件提供的演示数据中关于悟空软件的文字、图片和链接。\n\n二、免责声明\n\n2.1用户出于自愿而使用本软件，必须了解使用本软件的风险，在尚未购买产品技术服务或\n商业授权之前，我们不承诺对免费用户提供任何形式的技术支持、使用担保，也不承担任何因\n使用本软件而产生问题的相关责任。\n\n2.2电子文本形式的使用协议如同双方书面签署的协议一样，具有完全的和等同的法律效力。\n您一旦开始确认本协议并安装悟空软件，即被视为完全理解并接受本协议的各项条款，在享\n有以下条款授予的权力的同时，受到相关的约束和限制。\n\n2.3协议许可范围以外的行为，将直接违反本授权协议并构成侵权，我们有权随时终止授权，\n责令停止损害，并保留追究相关责任的权利。\n\n三、协议许可的权利\n\n3.1如果您以学习或研究为目的使用悟空软件，卡卡罗特不对您做任何限制。\n\n3.2您可以在您个人任意数量的电脑上运行悟空软件，卡卡罗特不对电脑的数量做任何限\n制。\n\n3.3您可以对悟空软件源代码进行修改以适应您个人学习研究的要求，您做的改动无需对\n外发布。\n\n3.4卡卡罗特依法拥有悟空软件的所有版权和软件权益，未经商业授权，您无任何版权及\n软件相关权益。\n\n四、协议规定的约束和限制\n\n4.1当您开始将悟空软件用于企业内部管理使用，意味着已经商用，需购买相应的商业授\n权\n\n4.2未获得商业授权之前，不得将本软件用于商业用途（包括但不限于企业内部使用、二次\n开发后进行销售、以营利为目的或实现盈利等形式）。\n\n4.3未经官方许可，禁止在悟空软件的整体或任何部分基础上发展任何派生版本、修改版\n本或第三方版本用于重新分发,包括但不限于基于悟空软件开发SAAS平台等相关服务。\n\n4.4如果您未能遵守本协议的条款，您的授权将被终止，所被许可的权利将被收回，并承担\n相应法律责任。\n\n4.5您使用悟空软件时，必须保留悟空软件的所有标志，不得以任何方式隐藏或遮掩任\n一标志。\n\n五、未尽事项\n\n如果上述条款无法满足您使用悟空软件的要求，可联系卡卡罗特签署额外的合同以获得\n更灵活的授权许可。\n\n六、合同约束\n\n如果您违反了该协议的任一条款，该用户协议将自动终止，您必须停止使用，卡卡罗特保\n留通过法律手段追究责任的权利。\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.3583984375,
          "content": "# Wukong_Accounting\n\n### 🌐Read This in [English](README_EN.md)\n\n体验地址：[https://www.72crm.com](http://www.72crm.com)\n\n## 悟空财务系统介绍\n\n悟空财务系统可满足不同角色的跨级人员能处理日常业务，通过系统编制收款、付款、转账凭证、期末记账与结账等，自动形成总分类账、明细账和财务报表，自动进行财务分析，提高企业财务核算效率的同时，又能够反映业务运营状况。\n\n官网地址：[http://www.5kcrm.com](http://www.5kcrm.com/)\n\n扫码添加小悟官方客服微信，邀您加入千人微信交流群：\n\n<img src=\"https://images.gitee.com/uploads/images/2019/1231/115927_f9c580c8_345098.png\" width=\"120\">\n\n关注悟空CRM公众号，了解更多悟空资讯\n\n<img src=\"https://images.gitee.com/uploads/images/2019/1202/135713_d3566c6a_345098.jpeg\" width=\"120\">\n\n扫码加入微信群，在线客服解答疑问\n\n<img src=\"https://github.com/WuKongOpenSource/Wukong_Accounting/blob/main/img/b1.png\" width=\"120\">\n\n:boom:  :boom:  :boom: 注：悟空财务系统采用全新的前后端分离模式，本仓库代码中已集成前端vue打包后文件，  **可免去打包操作，无需运行前端**\n\n# 悟空项目管理目录结构\n\n```lua\nwk_open_finance\n├── common        -- 基础模块\n├── DB        -- sql文件\n├── finance        -- 财务管理模块\n├── ux        -- 前端源码\n```\n\n# 核心功能模块\n\n**凭证管理，智能生成：在真实、可靠录入凭证的基础上，正确、及时地反映 各项经济业务的完成情况，为登记账簿提供可靠的依据。** <br/>\n**账簿管理，多维度查询：强大的账薄功能，让您快速了解各项财务指标，录⼊ 凭证即可多维度查询账簿，支持总账、明细账、多栏 账、数量金额账、核算项目类账簿查询。** <br/>\n**财务报表管理，提供企业经营调整依据：保证高质量的财务信息，清晰反应企业财务状况，资 产运营能力，偿债能力与盈利能力，为企业战略决策 提供科学性的指导依据。** <br/>\n**辅助核算，提升财务业务准确度** <br/>\n**快捷结账，提高财务工作效率：计算并记录本期发生额合计及期末余额，并将其余额 转入按规定应转入的账户，或结转下期的会计核算环 节，准确而高效的处理财务数据。** <br/>\n**精细化科目管理，系统了解经济业务** <br/>\n\n# 悟空财务管理使用的主要技术栈\n\n# 后端：\n\n|名称                 | 版本                     | 说明   |\n|---------------------|---------------------------|----  |\n| spring-cloud-alibaba| 2021.0.5.0                 |  核心框架  |\n| spring-boot         | 2.7.15                    |  spring版本  |\n| mybatis-plus        | 3.5.3.2                    |  ORM框架  |\n\n# 前端：\n\n| 技术 | 说明 | 版本 |\n| --- | --- | --- |\n| [Vue](https://vuejs.org) | 框架 | 2.5.17 |\n| [Vue-router](https://router.vuejs.org) | 路由框架 | 3.0.1 |\n| [Vuex](https://vuex.vuejs.org) | 全局状态管理框架 | 3.0.1 |\n| [Element](https://element.eleme.io) | UI框架 | 2.12.0 |\n| [Axios](https://github.com/axios/axios) | HTTP框架 | 0.18.0 |\n\n# 使用说明\n\n### 一、本项目安装需要在Linux环境下进行，可在虚拟机中安装Linux环境\n\nLinux 环境配置要求如下：\n\n推荐使用系统：centos\n系统内存：≥16G\n系统CPU：≥4核\n磁盘大小：≥100G\n\n### 二、前置环境，需要在Linux环境下安装以下配置\n\n- Jdk1.8\n- Maven3.5^\n- Mysql8^\n- Redis(版本不限)\n- elasticsearch8.5.3\n\n### 安装说明\n\n#### 一、依赖环境安装\n\n###### 1. 安装jdk\n\n```\nyum -y install java-1.8.0-openjdk-devel;\n```\n\n###### 2. 安装redis\n\n```\nyum -y install epel-release;\nyum -y install redis;\nsystemctl start redis\n\n#-- 修改redis密码为123456\nyum -y install vim;\nvim /etc/redis.conf;\n\n#-- 在文件最下面追加一行\nrequirepass 123456\n#-- 或者输入 / 搜索 # requirepass foobared\n#-- 将前面的#删除，将foobared改为123456\n#-- 修改完成之后 :wq 保存并退出,重启redis\n\nsystemctl restart redis\n```\n\n###### 3.安装mysql\n\n```\nwget https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm\nyum -y install mysql80-community-release-el7-3.noarch.rpm\nyum -y install mysql-community-server --nogpgcheck\nsudo systemctl start mysqld.service;\nsudo systemctl enable mysqld.service;\n\n--查看安装的mysql默认密码\ngrep \"password\" /var/log/mysqld.log\n--进入mysql 例：mysql -u root -p\"GXOO%eiI/7o>\"\nmysql - u root -p\"此处为上一步的默认密码\" \n \n--修改mysql密码，如下图所示\nset global validate_password.policy=LOW;\nALTER USER 'root'@'localhost' IDENTIFIED BY 'password';\n\n--退出mysql\nexit\n    \n--修改mysql配置\nvim /etc/my.cnf;\n--输入 i 进入编辑模式，修改sql_mode设置，将下面sql_mode配置复制，到 [mysqld]下使用 shift+insert 粘贴\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION \n--修改完毕，按esc按键，然后 :wq 保存并退出，重启mysql\n\n\nservice mysqld restart;\n```\n\n### 4.安装elasticsearch(es)\n\n```\n--下载es  \n\n# 注意不要放在root目录下\n\nuseradd elasticsearch\nwget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.5.3-linux-x86_64.tar.gz\ntar xvf elasticsearch-8.5.3-linux-x86_64.tar.gz\nchown -R elasticsearch:elasticsearch  elasticsearch-8.5.3 \nchmod -R 777  elasticsearch-8.5.3\n\n--修改es配置文件:elasticsearch.yml\n\n# 安装es如有以下配置信息，需要修改配置信息\n\ningest.geoip.downloader.enabled: false  ## 添加配置\nxpack.security.enabled: true\nxpack.security.enrollment.enabled: true\n\nxpack.security.http.ssl:\n  enabled: false        # 改为false\n  keystore.path: certs/http.p12\n\nEnable encryption and mutual authentication between cluster nodes\nxpack.security.transport.ssl:\n  enabled: false         # 改为false\n  verification_mode: certificate\n  keystore.path: certs/transport.p12\n  truststore.path: certs/transport.p12\n\n-- 安装es分词器\n./elasticsearch-plugin install analysis-icu\n--重置 es 账户密码\n./elasticsearch-reset-password -u elastic\n\n-- 进入bin启动es\nsu elasticsearch\n./elasticsearch\n```\n\n#### 二、项目配置与启动\n\nyum -y install maven\n\n###### 1.导入DB目录下数据库\n\n```\ncreate database wk_open_finance character set utf8mb4 collate utf8mb4_general_ci;\n use wk_open_finance;\nsource XXX/wk_open_finance.sql（XXX为项目路径）\n```\n\n###### 2.在项目根目录执行mvn install\n\n###### 3.在项目中修改以下配置信息：\n\n###### 3.在finance模块下resource目录配置数据库帐号密码信息以及redis帐号信息`\n\n###### 4. 访问[悟空ID](https://id.72crm.com/)获取账号\n\n###### 注册之后点击默认企业,应用列表中选择财务管理\n\n![默认企业](img/001.png \"img1.png\")\n\n###### 点击财务管理\n\n![人力资源管理](img/002.png \"img2.png\")\n\n##### 将App ID，accessKey，secretKey复制到 finance-web\\src\\main\\resources\\application.yml，分别对应appId，clientId，clientSecret 如下图所示\n\n![代码配置](img/003.png \"img4.png\")\n将appId复制到finance-web\\src\\main\\resources\\static\\APPLICATION_ID.txt内，替换里面内容\n\n###### 5. 项目打包部署\n\n```\n--项目打包\nmkdir /opt/package\nmvn clean -Dmaven.test.skip=true package\ncp finance-web/target/finance-web.zip /opt/package\ncd /opt/package\nunzip finance-web.zip -d finance\ncd finance\nsh 72crm.sh start\n```\n\n###### 6. 前端项目项目运行、打包\n\n```\n- 下载node并安装(LTS)：https://nodejs.org/;\n- 该项目为前后端分离项目，本地访问需搭建后台环境，请参考[后端项目](https://gitee.com/wukongcrm/crm_pro);\n- 访问线上接口无需搭建后台环境，只需将config/index.js文件中的dev下的proxyTable中的target改为线上地址即可;\n- 执行 npm install，下载相关依赖;\n- 执行 npm run dev，运行项目;\n- 执行成功，即可访问http://localhost:8090，查看;\n\n打包：\n- 需将config/prod.env.js文件中的BASE_API，调整为自己需要的\n- 执行 npm run build\n- 打包完成\n```\n\n### 三、其他说明\n\n#### 1.接口文档<br/>\n\n```\n接口文档地址：http://localhost:44316/doc.html\n```\n\n#### 2.docker镜像<br/>\n\n```\n敬请期待\n```\n\n### 四、悟空财务管理功能模块预览\n\n![输入图片说明](img/01.png)\n![输入图片说明](img/02.png)\n![输入图片说明](img/03.png)\n![输入图片说明](img/04.png)\n![输入图片说明](img/05.png)\n![输入图片说明](img/06.png)\n\n"
        },
        {
          "name": "README_EN.md",
          "type": "blob",
          "size": 9.767578125,
          "content": "\n# Wukong Accounting\n\n### 🌐Read This in [Chinese](README.md)\n\nDemo Address: [https://www.72crm.com](http://www.72crm.com)\n\n## Introduction to Wukong Financial System\n\nWukong Financial System is capable of satisfying the cross-level personnel of different roles to handle daily business. Through the system, users can prepare vouchers for receipts, payments, transfers, and handle period-end accounting and closing. The system automatically generates general ledgers, subsidiary ledgers, and financial statements, performs financial analysis, enhances the efficiency of corporate financial accounting, and reflects the business operating conditions.\n\nOfficial Website Address: [http://www.5kcrm.com](http://www.5kcrm.com/)\n\nScan the QR code to add Wukong's official customer service WeChat, and you are invited to join the thousand-people WeChat discussion group:\n\n<img src=\"https://images.gitee.com/uploads/images/2019/1231/115927_f9c580c8_345098.png\" width=\"120\">\n\nFollow the Wukong CRM official WeChat account to learn more about Wukong's information\n\n<img src=\"https://images.gitee.com/uploads/images/2019/1202/135713_d3566c6a_345098.jpeg\" width=\"120\">\n\nScan the QR code to join the WeChat group and have online customer service answer your questions\n\n<img src=\"https://github.com/WuKongOpenSource/Wukong_Accounting/blob/main/img/b1.png\" width=\"120\">\n\n:boom: :boom: :boom: Note: The Wukong Financial System adopts a new front-end and back-end separation mode. The code in this repository has integrated the front-end Vue packaged files, **so the packaging operation can be omitted without running the front end.**\n\n# Wukong Project Management Directory Structure\n\n```lua\nwk_open_finance\n├── common        -- Basic Module\n├── DB        -- SQL files\n├── finance        -- Financial Management Module\n├── ux        -- Frontend Source Code\n```\n\n# Core Functional Modules\n\n**Voucher Management, Intelligent Generation: Accurately and timely reflect the completion of various economic transactions on the basis of real and reliable voucher entries, providing a reliable basis for registering books.** <br/>\n**Book Management, Multi-dimensional Query: Powerful ledger functionality allows you to quickly understand various financial indicators. Once vouchers are entered, you can query ledgers in multiple dimensions, supporting general ledger, subsidiary ledger, multi-column account, amount and quantity account, and accounting item category ledger queries.** <br/>\n**Financial Statement Management, Providing a Basis for Business Adjustment: Ensuring high-quality financial information, clearly reflecting the financial situation of the enterprise, its asset operation ability, solvency, and profitability, providing a scientific basis for corporate strategic decision-making.** <br/>\n**Auxiliary Accounting, Enhancing the Accuracy of Financial Business** <br/>\n**Quick Closing, Improving Financial Work Efficiency: Calculate and record the total amount of transactions for the current period and the ending balance, and transfer the balance to the account specified in accordance with regulations, or carry it forward to the next accounting period, processing financial data accurately and efficiently.** <br/>\n**Refined Subject Management, Systematically Understanding Economic Transactions** <br/>\n\n# Main Technology Stack Used in Wukong Financial Management\n\n# Backend:\n\n| Name                  | Version               | Description |\n|-----------------------|-----------------------|-------------|\n| spring-cloud-alibaba  | 2021.0.5.0            | Core Framework |\n| spring-boot           | 2.7.15                | Spring Version |\n| mybatis-plus          | 3.5.3.2               | ORM Framework |\n\n# Frontend:\n\n| Technology | Description | Version |\n|------------|-------------|---------|\n| [Vue](https://vuejs.org) | Framework | 2.5.17 |\n| [Vue-router](https://router.vuejs.org) | Routing Framework | 3.0.1 |\n| [Vuex](https://vuex.vuejs.org) | Global State Management Framework | 3.0.1 |\n| [Element](https://element.eleme.io) | UI Framework | 2.12.0 |\n| [Axios](https://github.com/axios/axios) | HTTP Framework | 0.18.0 |\n\n# Usage Instructions\n\n### I. This project needs to be installed in a Linux environment, and you can install the Linux environment in a virtual machine.\n\nThe Linux environment configuration requirements are as follows:\n\nRecommended Operating System: CentOS\nSystem Memory: ≥16G\nSystem CPU: ≥4 cores\nDisk Size: ≥100G\n\n### II. Prerequisite environment, the following configurations need to be installed in the Linux environment:\n\n- Jdk1.8\n- Maven3.5^\n- Mysql8^\n- Redis (version is not limited)\n- Elasticsearch 8.5.3\n\n### Installation Instructions\n\n#### I. Dependency Environment Installation\n\n###### 1. Install JDK\n\n```\nyum -y install java-1.8.0-openjdk-devel;\n```\n\n###### 2. Install Redis\n\n```\nyum -y install epel-release;\nyum -y install redis;\nsystemctl start redis;\n\n#-- Modify the Redis password to 123456\nyum -y install vim;\nvim /etc/redis.conf;\n\n#-- Append a line at the bottom of the file\nrequirepass 123456\n#-- Or search for # requirepass foobared using / and enter\n#-- Delete the # in front, change foobared to 123456\n#-- After modifying, save and exit with :wq, then restart Redis\n\nsystemctl restart redis;\n```\n\n###### 3. Install MySQL\n\n```\nwget https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm\nyum -y install mysql80-community-release-el7-3.noarch.rpm\nyum -y install mysql-community-server --nogpgcheck\nsudo systemctl start mysqld.service;\nsudo systemctl enable mysqld.service;\n\n#-- Check the default password of the installed MySQL\ngrep \"password\" /var/log/mysqld.log\n#-- Enter MySQL, for example: mysql -u root -p\"GXOO%eiI/7o>\"\nmysql -u root -p\"your default password here\"\n\n#-- Change the MySQL password, as shown below\nset global validate_password.policy=LOW;\nALTER USER 'root'@'localhost' IDENTIFIED BY 'new password';\n\n#-- Exit MySQL\nexit;\n\n#-- Modify the MySQL configuration\nvim /etc/my.cnf;\n#-- Enter edit mode with i, modify the sql_mode setting, copy the sql_mode configuration below, and paste it under [mysqld] using shift+insert\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION;\n#-- After modifying, save and exit with :wq, then restart MySQL\n\nservice mysqld restart;\n```\n\nCertainly! Below is the translation of your text, formatted using Markdown:\n\n```markdown\n# Installation of Elasticsearch with the Following Configuration Information, Modify the Configuration Information\n\ningest.geoip.downloader.enabled: false  ## Add configuration\nxpack.security.enabled: true\nxpack.security.enrollment.enabled: true\n\nxpack.security.http.ssl:\n  enabled: false        # Change to false\n  keystore.path: certs/http.p12\n\nEnable encryption and mutual authentication between cluster nodes\nxpack.security.transport.ssl:\n  enabled: false         # Change to false\n  verification_mode: certificate\n  keystore.path: certs/transport.p12\n  truststore.path: certs/transport.p12\n\n-- Install Elasticsearch Analyzer\n./elasticsearch-plugin install analysis-icu\n-- Reset Elasticsearch Account Password\n./elasticsearch-reset-password -u elastic\n\n-- Start Elasticsearch from the bin directory\nsu elasticsearch\n./elasticsearch\n```\n\n#### II. Project Configuration and Startup\n\nyum -y install maven\n\n###### 1. Import the Database Under the DB Directory\n\n```\ncreate database wk_open_finance character set utf8mb4 collate utf8mb4_general_ci;\n use wk_open_finance;\nsource XXX/wk_open_finance.sql (XXX is the project path)\n```\n\n###### 2. Execute mvn install in the Project Root Directory\n\n###### 3. Modify the Following Configuration Information in the Project:\n\n###### 3. In the finance module, configure the database username and password information, as well as the Redis account information in the resource directory.\n\n###### 4. Visit [Wukong ID](https://id.72crm.com/) to Get an Account\n\n###### After registration, click the default enterprise, and select Financial Management in the application list\n\n![Default Enterprise](img/001.png \"img1.png\")\n\n###### Click Financial Management\n\n![Human Resources Management](img/002.png \"img2.png\")\n\n##### Copy App ID, accessKey, and secretKey to finance-web\\src\\main\\resources\\application.yml, corresponding to appId, clientId, and clientSecret as shown below\n\n![Code Configuration](img/003.png \"img4.png\")\nCopy appId to finance-web\\src\\main\\resources\\static\\APPLICATION_ID.txt, replacing the content inside\n\n###### 5. Project Packaging and Deployment\n\n```\n-- Package the project\nmkdir /opt/package\nmvn clean -Dmaven.test.skip=true package\ncp finance-web/target/finance-web.zip /opt/package\ncd /opt/package\nunzip finance-web.zip -d finance\ncd finance\nsh 72crm.sh start\n```\n\n###### 6. Run and Package the Frontend Project\n\n```\n- Download and install Node (LTS): https://nodejs.org/;\n- This project is a front-end and back-end separation project. To access locally, you need to build a back-end environment. Please refer to [Back-end Project](https://gitee.com/wukongcrm/crm_pro);\n- To access the online interface, there is no need to build a back-end environment. Just change the target in proxyTable under dev in config/index.js to the online address;\n- Execute npm install to download the relevant dependencies;\n- Execute npm run dev to run the project;\n- If executed successfully, you can access http://localhost:8090 to view;\n\nPackaging:\n- Adjust the BASE_API in config/prod.env.js file to what you need\n- Execute npm run build\n- Packaging complete\n```\n\n### III. Other Instructions\n\n#### 1. API Documentation<br/>\n\n```\nAPI documentation address: http://localhost:44316/doc.html\n```\n\n#### 2. Docker Image<br/>\n\n```\nStay tuned\n```\n\n### IV. Preview of Wukong Financial Management Functional Modules\n\n![Input Image Description](img/01.png)\n![Input Image Description](img/02.png)\n![Input Image Description](img/03.png)\n![Input Image Description](img/04.png)\n![Input Image Description](img/05.png)\n![Input Image Description](img/06.png)\n"
        },
        {
          "name": "assembly.xml",
          "type": "blob",
          "size": 1.9482421875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<assembly\n        xmlns=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/2.0.0\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd\">\n    <id>make-assembly</id>\n    <formats>\n        <format>zip</format>\n        <format>tar.gz</format>\n    </formats>\n    <includeBaseDirectory>false</includeBaseDirectory>\n    <fileSets>\n        <fileSet>\n            <directory>${project.parent.parent.basedir}</directory>\n            <outputDirectory>/</outputDirectory>\n            <filtered>true</filtered>\n            <includes>\n                <include>72crm.sh</include>\n            </includes>\n            <fileMode>755</fileMode>\n            <lineEnding>unix</lineEnding>\n        </fileSet>\n        <fileSet>\n            <directory>${project.parent.parent.basedir}</directory>\n            <outputDirectory>/</outputDirectory>\n            <filtered>true</filtered>\n            <includes>\n                <include>72crm.bat</include>\n            </includes>\n        </fileSet>\n        <fileSet>\n            <directory>${project.build.directory}/config/</directory>\n            <outputDirectory>config</outputDirectory>\n        </fileSet>\n        <fileSet>\n            <directory>${project.build.directory}/public/</directory>\n            <outputDirectory>public</outputDirectory>\n        </fileSet>\n        <fileSet>\n            <directory>${project.build.directory}/lib/</directory>\n            <outputDirectory>lib</outputDirectory>\n        </fileSet>\n        <fileSet>\n            <directory>${project.build.directory}/</directory>\n            <includes>\n                <!--<include>${pom.artifactId}-${pom.version}.jar</include>-->\n                <include>*.jar</include>\n            </includes>\n            <outputDirectory>/</outputDirectory>\n        </fileSet>\n    </fileSets>\n</assembly>"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "finance",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 4.697265625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <packaging>pom</packaging>\n\n    <groupId>com.kakarote</groupId>\n    <artifactId>wk_open_finance</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n\n    <name>wk_open_finance</name>\n    <description>悟空财务</description>\n\n    <modules>\n        <module>finance</module>\n        <module>common</module>\n    </modules>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n        <springboot.version>2.7.15</springboot.version>\n        <spring.cloud.version>2021.0.5</spring.cloud.version>\n        <spring.cloud.alibaba.version>2021.0.5.0</spring.cloud.alibaba.version>\n        <knife4j.version>2.0.9</knife4j.version>\n        <hutool.version>5.8.21</hutool.version>\n        <core.version>2.3.211</core.version>\n        <log.version>1.0.0</log.version>\n        <fastjson.version>1.2.83</fastjson.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <!--支持Spring Boot 2.6.X-->\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-dependencies</artifactId>\n                <version>${springboot.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring.cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n                <version>${spring.cloud.alibaba.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>jakarta.json</groupId>\n                <artifactId>jakarta.json-api</artifactId>\n                <version>2.0.1</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n\n    <dependencies>\n        <!-- loadbalancer -->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-loadbalancer</artifactId>\n        </dependency>\n        <!--服务调用-->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n        <!--测试框架-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <!--使用 lombok 简化 Java 代码-->\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <scope>compile</scope>\n        </dependency>\n        <!--工具包-->\n        <dependency>\n            <groupId>cn.hutool</groupId>\n            <artifactId>hutool-all</artifactId>\n            <version>${hutool.version}</version>\n        </dependency>\n        <!--Redis缓存-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-pool2</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.83</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <!-- java编译插件 -->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.8.1</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <encoding>UTF-8</encoding>\n                    <compilerArgument>-parameters</compilerArgument>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n"
        },
        {
          "name": "ux",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}