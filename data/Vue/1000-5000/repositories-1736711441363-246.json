{
  "metadata": {
    "timestamp": 1736711441363,
    "page": 246,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "WuKongOpenSource/Wukong_ProjectManagement",
      "stars": 1285,
      "defaultBranch": "main",
      "files": [
        {
          "name": "72crm.bat",
          "type": "blob",
          "size": 0.7646484375,
          "content": "@echo off\ntitle ${project.artifactId}\nrem -------------------------------------------------------------------------\nrem\nrem 使用说明：\nrem\nrem 1: 打包时默认使用application-test.yml配置文件，如需要更改，直接更改下面的命令即可，如 -Dspring.profiles.include=core,prod\nrem\nrem -------------------------------------------------------------------------\n\nsetlocal & pushd\n\nset JAVA_OPTS=-Dspring.profiles.include=core,test\nif \"${project.artifactId}\" == \"gateway\" (\n    set JAVA_OPTS =\n)\nrem -Xms分配堆最小内存，默认为物理内存的1/64；-Xmx分配最大内存，默认为物理内存的1/4 如果程序会崩溃请将此值调高\njava -Xms128m -Xmx512m -jar %JAVA_OPTS% ${project.artifactId}-${project.version}.jar\n\nendlocal & popd\npause\n\n\n\n"
        },
        {
          "name": "72crm.sh",
          "type": "blob",
          "size": 1.1923828125,
          "content": "#!/bin/bash\n\nCOMMAND=\"$1\"\n\nif [[ \"$COMMAND\" != \"start\" ]] && [[ \"$COMMAND\" != \"stop\" ]] && [[ \"$COMMAND\" != \"restart\" ]]; then\n\techo \"Usage: $0 start | stop | restart\"\n\texit 0\nfi\n\nAPP_BASE_PATH=$(cd `dirname $0`; pwd)\n\nfunction start()\n{\n    JAVA_OPTS=-Dspring.profiles.active=core,test\n    if [[ \"${project.artifactId}\" == \"gateway\" ]]; then\n    \tJAVA_OPTS=\n    fi\n    # -Xms分配堆最小内存，默认为物理内存的1/64；-Xmx分配最大内存，默认为物理内存的1/4 如果程序会崩溃请将此值调高\n    nohup java -Xms128m -Xmx512m -jar ${JAVA_OPTS} ${project.artifactId}-${project.version}.jar >> /dev/null 2>&1 &\n    echo \"--------项目启动成功--------\"\n    echo \"--------欢迎使用CRM ^_^--------\"\n}\n\nfunction stop()\n{\n    P_ID=`ps -ef | grep -w ${project.artifactId}-${project.version}.jar | grep -v \"grep\" | awk '{print $2}'`\n    kill $P_ID\n    echo \"项目已关闭\"\n}\n\nfunction restart()\n{\n    P_ID=`ps -ef | grep -w ${project.artifactId}-${project.version}.jar | grep -v \"grep\" | awk '{print $2}'`\n    start\n    sleep 25s\n    kill $P_ID\n    echo \"项目重启成功\"\n}\n\nif [[ \"$COMMAND\" == \"start\" ]]; then\n\tstart\nelif [[ \"$COMMAND\" == \"stop\" ]]; then\n    stop\nelse\n    restart\nfi\n"
        },
        {
          "name": "DB",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.47265625,
          "content": "Introduction to Wukong Project Management\nWukong Project Management is officially open source. With Wukong CRM project management, you can help your team manage projects, quickly assign tasks to employees, keep up with progress through Gantt charts at any time, and improve enterprise management capabilities.\n\n# Wukong_PM\n\n\n体验地址：[https://www.72crm.com](http://www.72crm.com)\n\n## 悟空项目管理介绍\n\n\n悟空项目管理正式开源，借助悟空CRM项目管理可以帮助你的团队进行项目的管控，你可以快速分配员工任务、通过甘特图随时了解进度等，提升企业管理能力。\n\n\n官网地址：[http://www.5kcrm.com](http://www.5kcrm.com/)\n\n\nQQ群交流群群：[259359511](https://qm.qq.com/cgi-bin/qm/qr?k=G9T2audQqbZBR_HG0aTP9E-8fE7oMeb8&jump_from=webapi)\n\n\n扫码添加小悟官方客服微信，邀您加入千人微信交流群：\n\n<img src=\"https://images.gitee.com/uploads/images/2019/1231/115927_f9c580c8_345098.png\" width=\"120\">\n\n关注悟空CRM公众号，了解更多悟空资讯\n\n<img src=\"https://images.gitee.com/uploads/images/2019/1202/135713_d3566c6a_345098.jpeg\" width=\"120\">\n\n扫码加入微信群，在线客服解答疑问\n\n<img src=\"https://gitee.com/wukongcrm/project/raw/master/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230505171952.jpg\" width=\"120\">\n\n\n :boom:  :boom:  :boom: 注：悟空无代码平台采用全新的前后端分离模式，本仓库代码中已集成前端vue打包后文件，  **可免去打包操作，无需运行前端** \n\n\n\n# 悟空项目管理目录结构\n\n``` lua\nwk_pm\n├── work        -- 项目管理模块\n├── DB        -- sql文件\n├── common        -- 基础模块\n├── ux        -- 前端源码\n```\n\n# 核心功能模块\n\n **建立标准化项目流程** <br/>\n **项目附件数据完整记录** <br/>\n **支持多人、跨部门的协作** <br/>\n **多维度视图展示，轻松掌控项目推进进度** <br/>\n **精细化项目权限，确保项目数据安全** <br/>\n **与其他模块信息互通，信息展示更全面** <br/>\n **多维数据统计，让项目管理有据可循** <br/>\n\n\n# 悟空项目管理使用的主要技术栈\n\n# 后端：\n\n|名称                 | 版本                     | 说明   |\n|---------------------|---------------------------|----  |\n| spring-cloud-alibaba| 2021.0.4                  |  核心框架  |\n| spring-boot         | 2.6.11                    |  spring版本  |\n| mybatis-plus        | 3.5.2                     |  ORM框架  |\n| nacos               | 2.1.0                     |  注册中心以及配置管理  |\n| seata               | 1.2.0                     |  分布式事务 |\n| jetcache            | 2.7.1                     |  分布式缓存框架  |\n| feign               | 3.1.4                     |  服务调用        |\n\n# 前端：\n\n| 技术 | 说明 | 版本 |\n| --- | --- | --- |\n| [Vue](https://vuejs.org) | 框架 | 2.5.17 |\n| [Vue-router](https://router.vuejs.org) | 路由框架 | 3.0.1 |\n| [Vuex](https://vuex.vuejs.org) | 全局状态管理框架 | 3.0.1 |\n| [Element](https://element.eleme.io) | UI框架 | 2.12.0 |\n| [Axios](https://github.com/axios/axios) | HTTP框架 | 0.18.0 |\n\n# 使用说明\n\n### 一、前置环境\n- Jdk1.8\n- Maven3.5^   \n- Mysql5.7^\n- Redis(版本不限)\n- Nacos（1.4^)\n\n### 安装说明\n\n#### 一、依赖环境安装\n\n###### 1. 安装jdk\n```\nyum -y install java-1.8.0-openjdk-devel;\n```\n\n###### 2. 安装redis\n```\nyum -y install epel-release;\nyum -y install redis;\nchkconfig redis on;\n#-- 修改redis密码为123456\nyum -y install vim;\nvim /etc/redis.conf;\n#-- 在文件最下面追加一行\nrequirepass 123456\n#-- 或者输入 / 搜索 # requirepass foobared\n#-- 将前面的#删除，将foobared改为123456\n#-- 修改完成之后 :wq 保存并退出,重启redis\nservice redis restart;\n```\n\n###### 3.安装nacos [官方文档](https://nacos.io/zh-cn/docs/v2/quickstart/quick-start.html)\n```\n# 保存到/opt目录下\nwget https://github.com/alibaba/nacos/releases/download/2.0.3/nacos-server-2.0.3.zip -P /opt\nyum install unzip\nunzip /opt/nacos-server-2.0.3.zip -d /opt/nacos\ncd /opt/nacos/bin\nsh startup.sh -m standalone\n```\n\n###### 4.安装mysql\n```\nwget https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm\nyum -y install mysql80-community-release-el7-3.noarch.rpm\nyum -y install mysql-community-server --nogpgcheck\nsudo systemctl start mysqld.service;\nsudo systemctl enable mysqld.service;\n\n--查看安装的mysql默认密码\ngrep \"password\" /var/log/mysqld.log\n--进入mysql 例：mysql -u root -p\"GXOO%eiI/7o>\"\nmysql - u root -p\"此处为上一步的默认密码\" \n \n--修改mysql密码，如下图所示\nset global validate_password_policy=LOW;\nALTER USER 'root'@'localhost' IDENTIFIED BY 'password';\n\n--退出mysql\nexit\n    \n--修改mysql配置\nvim /etc/my.cnf;\n--输入 i 进入编辑模式，修改sql_mode设置，将下面sql_mode配置复制，到 [mysqld]下使用 shift+insert 粘贴\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION \n--修改完毕，按esc按键，然后 :wq 保存并退出，重启mysql\nservice mysqld restart;\n```\n\n\n#### 二、项目配置与启动\n\n###### 1.导入DB目录下数据库\n###### 2.在项目根目录执行mvn install\n###### 2.修改配置信息\n###### 3.在work模块下resource目录配置数据库帐号信息以及redis帐号信息`\n\n###### 4. 访问[悟空ID](https://id.72crm.com/)获取账号\n###### 注册之后点击默认企业\n![默认企业](https://foruda.gitee.com/images/1673774011290861301/5bdc4983_8065912.png \"img1.png\")\n###### 点击无代码管理\n![无代码管理](https://foruda.gitee.com/images/1673774098067066785/3a905bfb_8065912.png \"img2.png\")\n##### 将App ID，accessKey，secretKey复制到 work\\src\\main\\resources\\application-dev.yml，分别对应appId，clientId，clientSecret 如下图所示\n![代码配置](https://foruda.gitee.com/images/1673774280708048007/6d5b6fc7_8065912.png \"img4.png\")\n将appId复制到work\\src\\main\\webapp\\public\\APPLICATION_ID.txt内，替换里面内容\n###### 5. 项目打包部署\n```\n--项目打包\nmkdir /opt/package\nmvn clean -Dmaven.test.skip=true package\ncp work/target/work.zip /opt/package\ncd /opt/package\nunzip work.zip -d work\ncd work\nsh 72crm.sh start\n```\n\n###### 6. 前端项目项目运行、打包\n```\n- 下载node并安装(LTS)：https://nodejs.org/;\n- 该项目为前后端分离项目，本地访问需搭建后台环境，请参考[后端项目](https://gitee.com/wukongcrm/crm_pro);\n- 访问线上接口无需搭建后台环境，只需将config/index.js文件中的dev下的proxyTable中的target改为线上地址即可;\n- 执行 npm install，下载相关依赖;\n- 执行 npm run dev，运行项目;\n- 执行成功，即可访问http://localhost:8090，查看;\n\n打包：\n- 需将config/prod.env.js文件中的BASE_API，调整为自己需要的\n- 执行 npm run build\n- 打包完成\n```\n\n\n### 三、其他说明\n\n#### 1.接口文档<br/>\n\n```\n接口文档地址：http://localhost:46923/doc.html\n```\n#### 2.docker镜像<br/>\n```\n敬请期待\n```\n### 四、悟空项目管理功能模块预览\n![Image text](https://raw.githubusercontent.com/72wukong/72crm-pm-spring/main/img-folder/xmgl_1.png)\n![Image text](https://raw.githubusercontent.com/72wukong/72crm-pm-spring/main/img-folder/xmgl_2.png)\n![Image text](https://raw.githubusercontent.com/72wukong/72crm-pm-spring/main/img-folder/xmgl_3.png)\n![Image text](https://raw.githubusercontent.com/72wukong/72crm-pm-spring/main/img-folder/xmgl_4.png)\n![Image text](https://raw.githubusercontent.com/72wukong/72crm-pm-spring/main/img-folder/xmgl_5.png)\n"
        },
        {
          "name": "assembly.xml",
          "type": "blob",
          "size": 1.9345703125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<assembly\n        xmlns=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/2.0.0\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/plugins/maven-assembly-plugin/assembly/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd\">\n    <id>make-assembly</id>\n    <formats>\n        <format>zip</format>\n        <format>tar.gz</format>\n    </formats>\n    <includeBaseDirectory>false</includeBaseDirectory>\n    <fileSets>\n        <fileSet>\n            <directory>${project.parent.basedir}</directory>\n            <outputDirectory>/</outputDirectory>\n            <filtered>true</filtered>\n            <includes>\n                <include>72crm.sh</include>\n            </includes>\n            <fileMode>755</fileMode>\n            <lineEnding>unix</lineEnding>\n        </fileSet>\n        <fileSet>\n            <directory>${project.parent.basedir}</directory>\n            <outputDirectory>/</outputDirectory>\n            <filtered>true</filtered>\n            <includes>\n                <include>72crm.bat</include>\n            </includes>\n        </fileSet>\n        <fileSet>\n            <directory>${project.build.directory}/config/</directory>\n            <outputDirectory>config</outputDirectory>\n        </fileSet>\n        <fileSet>\n            <directory>${project.build.directory}/public/</directory>\n            <outputDirectory>public</outputDirectory>\n        </fileSet>\n        <fileSet>\n            <directory>${project.build.directory}/lib/</directory>\n            <outputDirectory>lib</outputDirectory>\n        </fileSet>\n        <fileSet>\n            <directory>${project.build.directory}/</directory>\n            <includes>\n                <!--<include>${pom.artifactId}-${pom.version}.jar</include>-->\n                <include>*.jar</include>\n            </includes>\n            <outputDirectory>/</outputDirectory>\n        </fileSet>\n    </fileSets>\n</assembly>"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "img-folder",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 3.7548828125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.kakarote</groupId>\n    <artifactId>wk_crm</artifactId>\n    <version>0.0.1</version>\n    <packaging>pom</packaging>\n\n    <name>wk_pm</name>\n    <description>悟空PM项目管理软件</description>\n\n    <modules>\n        <module>common</module>\n        <module>work</module>\n    </modules>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n        <springboot.version>2.6.11</springboot.version>\n        <spring.cloud.version>2021.0.4</spring.cloud.version>\n        <spring.cloud.alibaba.version>2021.0.4.0</spring.cloud.alibaba.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <!--支持Spring Boot 2.6.X-->\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-dependencies</artifactId>\n                <version>${springboot.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring.cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n                <version>${spring.cloud.alibaba.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n\n    <dependencies>\n        <!--注册中心-->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n        </dependency>\n        <!-- loadbalancer -->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-loadbalancer</artifactId>\n        </dependency>\n        <!--配置中心-->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n        </dependency>\n        <!--服务调用-->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n        <!--测试框架-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <!--熔断降级-->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\n        </dependency>\n        <!--熔断降级持久化-->\n        <dependency>\n            <groupId>com.alibaba.csp</groupId>\n            <artifactId>sentinel-datasource-nacos</artifactId>\n        </dependency>\n        <!-- lombok插件 -->\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n    </dependencies>\n</project>\n"
        },
        {
          "name": "ux",
          "type": "tree",
          "content": null
        },
        {
          "name": "work",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}