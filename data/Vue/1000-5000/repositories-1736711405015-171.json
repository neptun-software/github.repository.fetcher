{
  "metadata": {
    "timestamp": 1736711405015,
    "page": 171,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chaitin/passionfruit",
      "stars": 1669,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 0.5478515625,
          "content": "module.exports = {\n  extends: 'airbnb-base',\n  rules: {\n    semi: 0,\n    'nonblock-statement-body-position': 0,\n    'no-console': 0,\n    'class-methods-use-this': 0,\n    'space-before-function-paren': 0,\n    'object-curly-newline': 0,\n    'one-var': 0,\n    'one-var-declaration-per-line': 0,\n    'no-restricted-syntax': 0,\n    'no-await-in-loop': 0,\n    'no-plusplus': 0,\n    'import/no-unresolved': 0,\n    'no-bitwise': 0,\n    curly: ['error', 'multi-or-nest', 'consistent'],\n    'no-underscore-dangle': 0,\n    'no-fallthrough': 0,\n    'func-names': 0,\n  },\n};"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.015625,
          "content": "# Agent generated by frida-compile\n/agent/*.bundle.js\n/agent/*.bundle.bin\n\n# database\n*.db\n\n# frontend\n/gui/static\n\n# Mac Stuff\n.DS_Store\n\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Typescript v1 declaration files\ntypings/\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\npackage-lock.json\n"
        },
        {
          "name": ".jsbeautifyrc",
          "type": "blob",
          "size": 0.1953125,
          "content": "{\n  \"html\": {\n    \"wrap_line_length\": 80,\n    \"brace_style\": \"collapse\",\n    \"wrap_attributes\": \"force-aligned\"\n  },\n  \"js\": {\n    \"brace_style\": \"collapse,preserve-inline\",\n    \"indent_size\": 2\n  }\n}"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2017 CodeColorist\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.08984375,
          "content": "**Discontinued Project**\n\nThis project has been discontinued. Please use the new [Grapefruit](https://github.com/chichou/grapefruit)\n\nhttps://github.com/chaitin/passionfruit/issues/74\n\n## frida@14 compatibility issues\n\nfrida@14 introduces lots of breaking changes. After struggling a bit, I was unable to solve them. If you still need passionfruit, please keep the frida on your device to stay at 12.x.\n\n----\n\n<img src=\"images/logo.png\" alt=\"Passionfruit\" width=\"400\" align=\"center\">\n\n[![npm version](https://badge.fury.io/js/passionfruit.svg)](https://badge.fury.io/js/passionfruit)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nSimple iOS app blackbox assessment tool. Powered by [frida.re](https://www.frida.re) and [vuejs](https://www.vuejs.org).\n\n## TL;DR\n\n```shell\nnpm install -g passionfruit\npassionfruit\n```\n\n## Features\n\n* **Cross plarform web GUI!**\n* Also supports non-jailbroken device (see [Non-jailbroken device](#non-jailbroken-device)).\n* List all url schemes.\n* Check signature entitlements.\n* List human readable app meta info (Info.plist).\n* Capture screenshot.\n* Checksec: see if target app is encrypted, and has enabled PIE, ARC and stack canary.\n* App sandbox file browser. Directly preview images, SQLite databases and plist files on device. You can always download the file for further investigation.\n* Check the loaded frameworks. Hook exported native functions from these dylib to print the arguments and stack trace.\n* Log SQLite operations.\n* Log and try to bypass jailbreak detection.\n* List Objective-C classes from app, hook the methods and inspect the arguments and stack trace.\n* Dump KeyChain, BinaryCookies and UserDefaults.\n\n![General](images/metainfo.png)\n\nPlease check out Wiki for more information.\n\n* [Screenshots](https://github.com/chaitin/passionfruit/wiki/Screenshots)\n* [FAQ](https://github.com/chaitin/passionfruit/wiki/FAQ)\n\n## Setup\n\n### Desktop requirements:\n\n* [node.js](https://nodejs.org/) **LTS** and [npm](https://www.npmjs.com) to run the api server and web gui\n* Any modern desktop browser you like\n\nPassionfruit is now avaliable on npm, so just type following command to install:\n\n```shell\nnpm install -g passionfruit\n```\n\nThen launch it:\n\n```shell\npassionfruit\n```\n\nNote that if the port 31337 is in use, set environment variable `PORT` to use an alternative port. Also, setting `HOST` can force to listen on an alternative interface, but be careful because it has no authentication yet:\n\n```\nHOST=192.168.1.100 PORT=12345 passionfruit\n```\n\n**Security Warning**\n\nPassionfruit does not support authentication now, so any one that have access to the web page may control your connected devices!\n\n### Device setup:\n\n#### Jailbroken Device\n\nSee https://www.frida.re/docs/ios/\n\n> Start `Cydia` and add Frida’s repository by going to `Manage` -> `Sources` -> `Edit` -> `Add` and enter `https://build.frida.re`. You should now be able to find and install the `Frida` package which lets Frida inject JavaScript into apps running on your iOS device. This happens over USB, so you will need to have your USB cable handy, though there’s no need to plug it in just yet.\n\n#### Non-jailbroken Device\n\nOfficial documentation of frida.re (linked above) also introduces how to inject [FridaGadget.dylib](https://build.frida.re/frida/ios/lib/FridaGadget.dylib) to the ipa, requires repack and resign.\n\nHere are some articles about how to do so:\n\n* [MonkeyDev/wiki/非越狱App集成#集成frida](https://github.com/AloneMonkey/MonkeyDev/wiki/%E9%9D%9E%E8%B6%8A%E7%8B%B1App%E9%9B%86%E6%88%90#集成frida)（Chinese)\n* https://github.com/tanprathan/Fridpa\n* https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2016/october/ios-instrumentation-without-jailbreak/\n\n## Development setup\n\nClone this project and install requirements:\n\n```shell\ngit clone https://github.com/chaitin/passionfruit.git\nnpm install\n```\n\nFor those who wants to contribute, you may probably need to restart the api server and reload webpage each time you make a change. The following steps enable livereload.\n\n```shell\nnpm run dev\n```\n\nBrowser will be open (http://localhost:8080)\n\n## LICENCE\n\nMIT\n"
        },
        {
          "name": "agent",
          "type": "tree",
          "content": null
        },
        {
          "name": "app.js",
          "type": "blob",
          "size": 3.7021484375,
          "content": "const path = require('path')\nconst http = require('http')\nconst { Z_SYNC_FLUSH } = require('zlib')\n\nrequire('colors')\n\nconst frida = require('frida')\nconst FRIDA_VERSION = require('frida/package.json').version\nconst Koa = require('koa')\n\nconst logger = require('koa-logger')\nconst json = require('koa-json')\nconst compress = require('koa-compress')\nconst bodyParser = require('koa-bodyparser')\nconst send = require('koa-send')\nconst Router = require('koa-router')\n\nconst { FridaUtil, serializeDevice, serializeApp } = require('./lib/utils')\nconst channels = require('./lib/channels.js')\nconst { KnownError, InvalidDeviceError, VersionMismatchError } = require('./lib/error')\n\n\nconst app = new Koa()\nconst router = new Router({ prefix: '/api' })\n\nrouter\n  .get('/devices', async (ctx) => {\n    const mgr = await frida.getDeviceManager()\n    const list = await mgr.enumerateDevices()\n    ctx.body = {\n      version: FRIDA_VERSION,\n      list: list.map(serializeDevice),\n    }\n  })\n  .get('/device/:device/apps', async (ctx) => {\n    const id = ctx.params.device\n    // todo: refactor me\n    try {\n      const dev = await FridaUtil.getDevice(id)\n      const apps = await dev.enumerateApplications()\n      ctx.body = apps.map(serializeApp)\n    } catch (ex) {\n      if (ex.message.startsWith('Unable to connect to remote frida-server'))\n        throw new InvalidDeviceError(id)\n      if (ex.message.startsWith('Unable to communicate with remote frida-server'))\n        throw new VersionMismatchError(ex.message)\n      else\n        throw ex\n    }\n  })\n  .post('/url/start', async (ctx) => {\n    const { device, bundle, url } = ctx.request.body\n    const dev = await FridaUtil.getDevice(device)\n    const pid = await dev.spawn([bundle], { url })\n    await dev.resume(pid)\n    ctx.body = { status: 'ok', pid }\n  })\n  .put('/device/add', async (ctx) => {\n    const ip = ctx.request.rawBody\n    const mgr = await frida.getDeviceManager()\n    try {\n      mgr.addRemoteDevice(ip)\n    } catch(e) {\n      ctx.status = 400\n      ctx.body = { status: 'failed', error: e.message }\n      return\n    }\n    ctx.body = { status: 'ok' }\n  })\n  .delete('/device/:device', async (ctx) => {\n    const mgr = await frida.getDeviceManager()\n    try {\n      await mgr.removeRemoteDevice(ctx.params.device)\n    } catch(e) {\n      ctx.status = 404\n      ctx.body = { status: 'failed', error: e.message }\n      return\n    }\n    ctx.body = { status: 'ok' }\n  })\n\napp\n  .use(compress({\n    filter(contentType) {\n      return /text|json/i.test(contentType)\n    },\n    threshold: 2048,\n    flush: Z_SYNC_FLUSH,\n  }))\n  .use(bodyParser())\n  .use(async(ctx, next) => {\n    try {\n      await next()\n    } catch (e) {\n      if (e instanceof KnownError) ctx.throw(404, e.message)\n\n      if (process.env.NODE_ENV === 'development') throw e\n      else ctx.throw(500, e.message)\n    }\n  })\n  .use(router.routes())\n  .use(router.allowedMethods())\n\n\nif (process.env.NODE_ENV === 'development') {\n  app.use(json({\n    pretty: false,\n    param: 'pretty',\n  }))\n} else {\n  app.use(async (ctx, next) => {\n    const opt = { root: path.join(__dirname, 'gui') }\n    if (ctx.path.startsWith('/static/')) await send(ctx, ctx.path, opt)\n    else await send(ctx, '/index.html', opt)\n\n    next()\n  })\n  app.use(logger())\n}\n\nfunction start({ host, port }) {\n  console.info(`listening on http://${host}:${port}`.green)\n  const server = http.createServer(app.callback())\n  channels.attach(server)\n  server.listen(port, host)\n  process.on('unhandledRejection', (err) => {\n    console.error('An unhandledRejection occurred: '.red)\n    console.error(`Rejection: ${err}`.red)\n    console.error(err.stack)\n\n    channels.broadcast('unhandledRejection', {\n      err: err.toString(),\n      stack: err.stack,\n    })\n  })\n}\n\nmodule.exports = {\n  app,\n  start,\n}\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "gui",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.23046875,
          "content": "{\n  \"name\": \"passionfruit\",\n  \"version\": \"0.7.2\",\n  \"description\": \"Inject to iOS App\",\n  \"main\": \"app.js\",\n  \"engines\": {\n    \"node\": \">= 12.0\"\n  },\n  \"scripts\": {\n    \"prepare\": \"pushd gui && npm install && popd && npm run compile\",\n    \"prepublishOnly\": \"cd gui && npm run build\",\n    \"lint\": \"npm run lint:agent && npm run lint:server && npm run lint:frontend\",\n    \"lint:agent\": \"eslint agent/app\",\n    \"lint:server\": \"eslint *.js && eslint lib\",\n    \"lint:frontend\": \"eslint gui/src\",\n    \"dev\": \"node scripts/dev-all.js\",\n    \"compile\": \"node scripts/compile.js compile\",\n    \"watch\": \"node scripts/compile.js watch\",\n    \"postinstall\": \"node scripts/post-install.js\",\n    \"start\": \"cross-env NODE_ENV=development nodemon .\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+ssh://git@github.com/chaitin/passionfruit.git\"\n  },\n  \"keywords\": [\n    \"iOS\",\n    \"frida\"\n  ],\n  \"bin\": \"bin/cli.js\",\n  \"files\": [\n    \"gui/index.html\",\n    \"gui/static\",\n    \"lib/\",\n    \"bin/\",\n    \"scripts/post-install.js\",\n    \"agent/*.bundle.js\"\n  ],\n  \"author\": \"CodeColorist\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/chaitin/passionfruit/issues\"\n  },\n  \"homepage\": \"https://github.com/chaitin/passionfruit#readme\",\n  \"dependencies\": {\n    \"colors\": \"^1.4.0\",\n    \"frida\": \"^14.0.8\",\n    \"koa\": \"^2.13.0\",\n    \"koa-bodyparser\": \"^4.3.0\",\n    \"koa-compress\": \"^5.0.1\",\n    \"koa-json\": \"^2.0.2\",\n    \"koa-logger\": \"^3.2.1\",\n    \"koa-router\": \"^10.0.0\",\n    \"koa-send\": \"^5.0.1\",\n    \"plist\": \"^3.0.1\",\n    \"promise.prototype.finally\": \"^3.1.2\",\n    \"socket.io\": \"^2.2.0\",\n    \"socket.io-stream\": \"^0.9.1\",\n    \"sqlite3\": \"^5.0.0\",\n    \"vue-loader-plugin\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.12.3\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.12.1\",\n    \"@babel/plugin-proposal-decorators\": \"^7.12.1\",\n    \"@babel/plugin-transform-runtime\": \"^7.12.1\",\n    \"@babel/polyfill\": \"^7.12.1\",\n    \"@babel/preset-env\": \"^7.12.1\",\n    \"@babel/runtime\": \"^7.12.5\",\n    \"babelify\": \"^10.0.0\",\n    \"cross-env\": \"^7.0.2\",\n    \"eslint\": \"^7.13.0\",\n    \"eslint-config-airbnb-base\": \"^14.2.1\",\n    \"eslint-plugin-import\": \"^2.22.1\",\n    \"eslint-plugin-vue\": \"^7.1.0\",\n    \"frida-compile\": \"^9.5.2\",\n    \"macho\": \"^1.4.0\",\n    \"nodemon\": \"^2.0.6\"\n  }\n}\n"
        },
        {
          "name": "passionfruit.xd",
          "type": "blob",
          "size": 77.599609375,
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}