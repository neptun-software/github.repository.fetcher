{
  "metadata": {
    "timestamp": 1736711430333,
    "page": 225,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "elecV2/elecV2P",
      "stars": 1361,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0498046875,
          "content": ".dockerignore\r\n**/.git\r\n**/.github\r\n**/node_modules"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0283203125,
          "content": ".git\r\n.DS_Store\r\nnode_modules"
        },
        {
          "name": "Docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 11.0869140625,
          "content": "## 简介\r\n\r\nelecV2P - customize personal network.\r\n一款基于 NodeJS，可通过 JS 修改网络请求，以及定时运行脚本或 SHELL 指令的网络工具。\r\n\r\n![elecV2P overview/预览](https://raw.githubusercontent.com/elecV2/elecV2P-dei/master/docs/res/overview.png)\r\n\r\n### 基础功能\r\n\r\n- 查看/修改网络请求 (MITM)\r\n- 定时执行 JS/SHELL 脚本\r\n- FEED/IFTTT/自定义 通知\r\n- EFSS 基础文件管理\r\n\r\n## 安装/INSTALL\r\n\r\n***程序开放权限极大，建议局域网使用。公网部署（务必参考 [Advanced.md](https://github.com/elecV2/elecV2P-dei/blob/master/docs/Advanced.md)），风险自负***\r\n\r\n*elecV2P 所有文件及依赖总大小约 90 M。初始运行时内存占用约 90 M，运行 100 个定时任务时总内存占用约 150 M（仅供参考，不同软硬件条件下程序调用资源可能有所不同）*\r\n\r\n**在可使用 Docker 的情况下，推荐使用方法三进行安装**\r\n\r\n### 方法一：直接 NODEJS 运行\r\n\r\n**需求 NODEJS 版本 (node -v) >= 14.17.0**\r\n\r\n``` sh\r\ngit clone https://github.com/elecV2/elecV2P.git\r\ncd elecV2P\r\n\r\n# 安装依赖库（根据网络环境和硬盘读写速度，需要 1-10 分钟不等\r\nyarn\r\n\r\n# elecV2P 默认以 pm2 的方式启动，需要先安装好 pm2\r\n# pm2 的安装方式:\r\n# 1. 添加 elecV2P 所在目录/node_modules/.bin 到系统环境变量 PATH 中\r\n# 2. 或者直接执行 yarn global add pm2\r\n# 然后执行命令\r\nyarn start\r\n\r\n# 其他基础方式启动命令\r\nnode index.js\r\n# 假如提示 80 端口不可用，尝试命令\r\n# windows 平台 CMD:\r\n# set PORT=8000 && node index.js\r\n# windows 平台 PowerShell:\r\n# $env:PORT=\"8000\";node index.js\r\n# 其他平台：\r\n# PORT=8000 TZ=Asia/Shanghai node index.js\r\n## TZ=Asia/Shanghai 用于设置程序运行时区\r\n```\r\n\r\n#### 升级\r\n\r\n方式一：使用 [softupdate.js](https://raw.githubusercontent.com/elecV2/elecV2P/master/script/JSFile/softupdate.js) 软更新升级\r\n\r\n- 首先在 webUI/JSMANAGE 脚本管理中找到 softupdate.js 文件，假如不存在就远程推送或本地上传一下\r\n- 然后按照文件内的说明，根据自身需求更改 CONFIG 设置项\r\n- 最后点击测试运行即可\r\n\r\n方式二：手动升级（不推荐\r\n\r\n- 先备份好个人数据，比如 根证书，以及 efss、script/JSFile、Store、Lists、Shell 等文件夹\r\n- （推荐在 webUI/efss 界面，右键对应文件夹，然后 zip 打包下载。）\r\n- 然后在项目目录下执行命令 git pull，拉取最新的代码进行覆盖升级\r\n- 最后再把备份好的文件上传/复制还原到之前的位置\r\n\r\n### 其他 PM2 相关指令\r\n\r\n``` sh\r\npm2 stop elecV2P  # 停止 elecV2P\r\npm2 stop all      # 停止所有程序\r\n\r\npm2 restart elecV2P   # 重启 elecV2P\r\npm2 restart 0\r\n\r\npm2 ls      # 查看运行状态\r\npm2 logs --raw    # 查看运行日志\r\n\r\npm2 -h      # 查看 PM2 帮助列表\r\n```\r\n\r\n### 方法二：DOCKER\r\n\r\n镜像名称: elecv2/elecv2p\r\n镜像地址: https://hub.docker.com/r/elecv2/elecv2p\r\n\r\n``` sh\r\n# 基础使用命令\r\ndocker run --restart=always -d --name elecv2p -e TZ=Asia/Shanghai -p 80:80 -p 8001:8001 -p 8002:8002 elecv2/elecv2p\r\n\r\n# 推荐使用命令\r\ndocker run --restart=always \\\r\n  -d --name elecv2p \\\r\n  -e TZ=Asia/Shanghai \\\r\n  -p 8100:80 -p 8101:8001 -p 8102:8002 \\\r\n  -v /elecv2p/JSFile:/usr/local/app/script/JSFile \\\r\n  -v /elecv2p/Lists:/usr/local/app/script/Lists \\\r\n  -v /elecv2p/Store:/usr/local/app/script/Store \\\r\n  -v /elecv2p/Shell:/usr/local/app/script/Shell \\\r\n  -v /elecv2p/rootCA:/usr/local/app/rootCA \\\r\n  -v /elecv2p/efss:/usr/local/app/efss \\\r\n  elecv2/elecv2p\r\n\r\n# -p/-v 对应参数 宿主:容器\r\n# 如需更改默认的 80 端口，可在 -e 后面加上 PORT=8000\r\n# 升级 Docker 镜像（如果没有使用 -v 持久化存储，容器内数据会丢失，请提前备份）\r\ndocker rm -f elecv2p           # 先删除旧的容器\r\ndocker pull elecv2/elecv2p     # 再拉取新的镜像\r\n# 再使用之前的 docker run xxxx 命令重新启动一下\r\n# 如果拉取到的镜像不是最新的版本，请修改 Docker 当前使用的仓库地址\r\n```\r\n\r\n- ARM32 平台如果出错，参考 [issues #78](https://github.com/elecV2/elecV2P/issues/78)\r\n- v3.7.3 之后 Github Actions 一直无法生成 ARM32 平台的 Docker。建议通过软更新脚本进行升级 [softupdate.js](https://raw.githubusercontent.com/elecV2/elecV2P/master/script/JSFile/softupdate.js) 。（其他平台的 Docker 不受影响）\r\n\r\n### 方法三：DOCKER-COMPOSE （推荐）\r\n\r\n``` sh\r\n# 创建 elecV2P 持久化数据保存目录\r\nmkdir /elecv2p && cd /elecv2p\r\n# 假如失败，请尝试在其他有权限的目录进行创建\r\n# 后面 docker-compose.yaml 映射目录保持和创建的目录一致\r\n\r\n# 下载 docker-compose.yaml 文件\r\ncurl -sL https://git.io/JLw7s > docker-compose.yaml\r\n# 启动运行 elecV2P\r\ndocker-compose up -d\r\n\r\n# 注意: 需提前安装好 docker-compose 管理器\r\n# 默认将 80/8001/8002 端口分别映射到了宿主机的 8100/8101/8102 端口，以防出现占用的情况\r\n# 如果需要设置为其他端口，请自行修改 docker-compose.yaml 文件内容，然后重新启动\r\n```\r\n\r\n以下为 docker-compose.yaml 文件内容，可根据自身需求进行修改。\r\n\r\n``` yaml\r\nversion: '3.7'\r\nservices:\r\n  elecv2p:\r\n    image: elecv2/elecv2p\r\n    container_name: elecv2p\r\n    restart: always\r\n    environment:\r\n      - TZ=Asia/Shanghai\r\n    ports:\r\n      - \"8100:80\"\r\n      - \"8101:8001\"\r\n      - \"8102:8002\"\r\n    volumes:\r\n      - \"/elecv2p/JSFile:/usr/local/app/script/JSFile\"\r\n      - \"/elecv2p/Lists:/usr/local/app/script/Lists\"\r\n      - \"/elecv2p/Store:/usr/local/app/script/Store\"\r\n      - \"/elecv2p/Shell:/usr/local/app/script/Shell\"\r\n      - \"/elecv2p/rootCA:/usr/local/app/rootCA\"\r\n      - \"/elecv2p/efss:/usr/local/app/efss\"\r\n```\r\n\r\n修改后保存文件，然后在 docker-compose.yaml 文件所在目录下执行以下任一命令\r\n\r\n``` sh\r\n# 直接启动（首次启动命令）\r\ndocker-compose up -d\r\n\r\n# 更新镜像并重新启动\r\ndocker-compose pull elecv2p && docker-compose up -d\r\n```\r\n\r\n- 如果在某些设备上无法启动，尝试把文件开头的 version: '3.7' 更改为 version: '3.3'\r\n- ARM32 平台如果出错，参考 [issues #78](https://github.com/elecV2/elecV2P/issues/78)\r\n\r\n其他 docker 相关指令\r\n\r\n``` sh\r\n# 查看是否启动及对应端口\r\ndocker ps\r\n\r\n# 查看 elecV2P 运行日志\r\ndocker logs elecv2p -f\r\n```\r\n\r\n## 默认端口\r\n\r\n- 80：    webUI 后台管理界面。用于添加规则/管理脚本/定时任务/MITM 证书 等\r\n- 8001：  ANYPROXY HTTP 代理端口。（*代理端口不是网页，不能通过浏览器直接访问*）\r\n- 8002：  ANYPROXY 代理请求查看端口\r\n\r\n**ANYPROXY 相关端口默认关闭。可在 webUI 首页双击 ANYPROXY 临时开启。**\r\n**如需在启动时自动开启，请前往 webUI->SETTING->初始化相关设置 中进行设置。**\r\n**80/8002 对应端口需要用到 websocket，在使用 nginx 等反代工具时注意设置。参考 [ev2p-nginx.conf](https://github.com/elecV2/elecV2P-dei/blob/master/examples/ev2p-nginx.conf)**\r\n\r\n- *80 端口可使用环境变量 **PORT** 进行修改(比如: PORT=8000 node index.js)*\r\n- *在 elecV2P 已经启动时，可在 webUI->SETTING->初始化相关设置 中修改其他端口*\r\n- *在 elecV2P 尚未启动时，可在 script/Lists/config.json 文件中修改对应端口*\r\n\r\n## 根证书相关 - HTTPS 解密\r\n\r\n- *如果不使用 RULES/REWRITE 等 MITM 相关功能，此步骤可跳过。*\r\n- *升级启动后，如果不是使用之前的证书，需要重新下载安装信任根证书。*\r\n- *根证书包含两个文件 rootCA.crt/rootCA.key，文件名不可修改。*\r\n\r\n### 安装证书\r\n\r\n选择以下任意一种方式下载证书，然后安装并信任\r\n\r\n- 直接打开 :80/crt\r\n- :80 -> MITM -> 安装证书\r\n- :8002 -> RootCA\r\n\r\n根证书物理存储目录位于 `$HOME/.anyproxy/certificates`。\r\n\r\n*windows 平台的证书存储位置选择 浏览->受信任的根证书颁发机构*\r\n\r\n### 使用自签根证书\r\n\r\n在 webUI->MITM 界面上传自签根证书，然后重启 elecV2P\r\n\r\n**注意：使用新的证书后，记得重新下载安装信任证书，并清除由之前根证书签发的域名证书。**\r\n\r\n## RULES - 网络请求修改\r\n\r\n![rules](https://raw.githubusercontent.com/elecV2/elecV2P-dei/master/docs/res/rules.png)\r\n\r\n详细说明参考: [docs/03-rules.md](https://github.com/elecV2/elecV2P-dei/tree/master/docs/03-rules.md)\r\n\r\n## 定时任务\r\n\r\n![task](https://raw.githubusercontent.com/elecV2/elecV2P-dei/master/docs/res/taskall.png)\r\n\r\n支持两种定时方式：\r\n\r\n- 倒计时\r\n- cron 定时\r\n\r\n### 时间格式：\r\n\r\n- 倒计时 30 999 3 2  (以空格分开的四个数字，后三项可省略)\r\n\r\n|    30（秒）    |     999（次）   |      3（秒）         |       2（次）       \r\n:--------------: | :-------------: | :------------------: | :------------------:\r\n| 基础倒计时时间 | 重复次数（可选）| 增加随机时间（可选） | 增加随机重复次数（可选）  \r\n\r\n\r\n- *当重复次数大于等于 **999** 时，无限循环*\r\n\r\n示例: 40 8 10 3 ，表示倒计时40秒，随机10秒，所以具体倒计时时间位于 40-50 秒之间，重复运行 8-11 次\r\n\r\n- cron 定时 \r\n\r\n时间格式：* * * * * * （五/六位 cron 时间格式）\r\n\r\n| * (0-59)   |  * (0-59)  |  * (0-23)  |  * (1-31)  |  * (1-12)  |  * (0-7)      \r\n:----------: | :--------: | :--------: | :--------: | :--------: | :---------:\r\n| 秒（可选） |    分      |    小时    |     日     |     月     |    星期\r\n\r\n\r\n### 可执行任务类型\r\n\r\n- 运行 JS\r\n- 开始/停止 其他定时任务\r\n- 基础 shell 指令。比如 *rm -f \\**, *python test.py*, *reboot* 等等\r\n\r\n更多说明参考：[docs/06-task.md](https://github.com/elecV2/elecV2P-dei/tree/master/docs/06-task.md)\r\n\r\n## 通知\r\n\r\n目前支持通知方式：\r\n- FEED/RSS 订阅\r\n- IFTTT WEBHOOK\r\n- BARK 通知\r\n- 自定义通知\r\n\r\nFEED/RSS 订阅地址为 webUI/feed。\r\n\r\n通知内容：\r\n- 定时任务开始/结束\r\n- 定时任务 JS 运行次数\r\n- 脚本中的自主调用通知\r\n\r\nIFTTT/BARK/自定义通知等相关设置参考: [07-feed&notify](https://github.com/elecV2/elecV2P-dei/tree/master/docs/07-feed&notify.md)\r\n\r\n## DOCUMENTS&EXAMPLES\r\n\r\n说明文档及一些例程: [https://github.com/elecV2/elecV2P-dei](https://github.com/elecV2/elecV2P-dei)\r\n\r\n如果遇到问题欢迎 [open a issue](https://github.com/elecV2/elecV2P/issues)。尽量说明使用平台，版本，以及附上相关的错误日志（提供的信息越详细，越有助于解决问题）。\r\n\r\nTG 频道: https://t.me/elecV2\r\nTG 交流群: https://t.me/elecV2G\r\n\r\n## 更新日志\r\n\r\n查看: https://github.com/elecV2/elecV2P/blob/master/logs/update.log\r\n\r\n## 贡献参考\r\n\r\n- [anyproxy](https://github.com/alibaba/anyproxy)\r\n- [axios](https://github.com/axios/axios)\r\n- [expressjs](https://expressjs.com)\r\n- [node-cron](https://github.com/merencia/node-cron)\r\n- [node-rss](https://github.com/dylang/node-rss)\r\n- [pm2](https://pm2.keymetrics.io)\r\n- [vue](https://vuejs.org)\r\n- [vue-draggable-resizable](https://github.com/mauricius/vue-draggable-resizable)\r\n- [ace](https://github.com/ajaxorg/ace)\r\n- [adm-zip](https://github.com/cthackers/adm-zip)\r\n- [Ant Design Vue](https://www.antdv.com)"
        },
        {
          "name": "Todo.md",
          "type": "blob",
          "size": 19.2060546875,
          "content": "<div style=\"display: flex;justify-content: space-around;align-items: flex-start;box-sizing: border-box;color: white;font-size: 20px;\">\r\n<div style=\"width: 50%;margin: 0 12px;\">\r\n<div style=\"background-color: #1890ff;list-style: none;border-radius: 8px;padding: 0;margin: 0;\">\r\n<h3 style=\"font-size: 24px;text-align: center;border-bottom: 1px solid;color: white;padding: 6px;margin-bottom: 0;\">Todo</h3>\r\n<pre style=\"white-space: pre-line;word-break: break-word;margin: 0;padding: 6px 10px;text-align: left;display: flex;\">\r\n- [ ] EAPP 订阅/分类\r\n- [ ] RULE mock 修改方式\r\n- [ ] RULE repeat 网络请求\r\n- [ ] EFSS 自定义文件处理脚本\r\n- [ ] 自定义常用功能的快捷键\r\n- [ ] require 自定义可运行/禁用模块\r\n</pre>\r\n</div>\r\n<div style=\"background-color: #003153;margin-top: 12px;border-radius: 8px;\">\r\n<h3 style=\"font-size: 24px;text-align: center;border-bottom: 1px solid;color: white;padding: 6px;margin-bottom: 0;\">Project</h3>\r\n<pre style=\"margin-bottom: 0;white-space: pre-line;word-break: break-word;margin: 0;padding: 6px 10px;text-align: left;display: flex;\">\r\n- ev binary 执行程序\r\n- 前端可选择后台节点\r\n- 规则及定时任务的移动和排序\r\n- 使用脚本管理规则($rewrite/$rule\r\n- CTRL+K 全局搜索（规则/任务/脚本 等\r\n- eFlow: 不同语言的脚本执行流程可视化控制（天坑）\r\n- 多语言 [一个可能永远不填的坑..., start ready...]\r\n</pre>\r\n</div>\r\n</div>\r\n<div style=\"width: 50%;background-color: #2d8800;border-radius: 8px;margin: 0 12px; max-height: 480px; overflow: hidden auto;\">\r\n<h3 style=\"font-size: 24px;text-align: center;border-bottom: 1px solid;color: white;padding: 6px;margin-bottom: 0;\">Done</h3>\r\n<pre style=\"margin-bottom: 0;white-space: pre-line;word-break: break-word;margin: 0;padding: 6px 10px;text-align: left;display: flex;\">\r\n- [x] RULES 默认不对 body 进行匹配\r\n- [x] 可处理最大返回数据大小修改为 15M\r\n- [x] ws 断线后 LOGO 变化\r\n- [x] token 登录后隐藏信息\r\n- [x] PAC 自动生成文件优化\r\n- [x] PAC 文件自动生成\r\n- [x] 网络请求返回结果简化\r\n- [x] 软更新 tags 及通知优化\r\n- [x] 临时 token 可限制请求方法\r\n- [x] 404 显示页面优化\r\n- [x] 403 界面增加授权登录框\r\n- [x] webUI 多语言优化一点点\r\n- [x] anyproxy 直接访问提醒\r\n- [x] anyproxy 默认错误页面修改\r\n- [x] env PROXYEN 启动时打开代理\r\n- [x] type protobuf body buffer\r\n- [x] 临时 token 访问\r\n- [x] 默认 CORS Origin *\r\n- [x] 使用 userid 作为 cookie\r\n- [x] CONFIG 配置文件参数优化\r\n- [x] 自定义规则、脚本、定时任务等保存目录\r\n- [x] NODE_TLS_REJECT_UNAUTHORIZED 设置\r\n- [x] 增加默认 EAPP 随机配色\r\n- [x] webUI 增加背景及其他优化\r\n- [x] 主题元素背景替换为文字色彩\r\n- [x] env CONFIG 指定配置文件路径\r\n- [x] EAPP 增加备注及自动运行选择项\r\n- [x] 重连中计数逻辑调整\r\n- [x] 软更新默认依赖检测逻辑优化\r\n- [x] headers case insensitive\r\n- [x] stream with status and headers\r\n- [x] sw 缓存清理及策略优化\r\n- [x] EAPP 默认图标生成逻辑优化\r\n- [x] efh 增加简易 $ 选择器函数\r\n- [x] SSE 数据传输逻辑优化\r\n- [x] 脚本可通过 sse 向前端发送数据\r\n- [x] remove ANSI CSI code\r\n- [x] EFSS 文件搜索过滤显示\r\n- [x] EFSS 媒体文件预览优化\r\n- [x] EFSS 媒体播放自动设置\r\n- [x] download callback 函数优化\r\n- [x] pm2 log 还原到默认目录\r\n- [x] EFSS 收藏目录自动检测 index\r\n- [x] LOGS 日志查看界面优化\r\n- [x] EFSS 基础文件预览\r\n- [x] 可选择日志时间格式\r\n- [x] webhook 通用 payload 处理\r\n- [x] 部分 dependencies 更新\r\n- [x] websocket 多客户端体验优化\r\n- [x] 默认时区 Asia/Shanghai\r\n- [x] EAPP 新类型 EVALRUN\r\n- [x] ws offline 背景变化\r\n- [x] 引入 service worker\r\n- [x] 引入 manifest.json\r\n- [x] CONFIG 语言偏好设置\r\n- [x] MITM PORT 快捷切换\r\n- [x] 导航栏默认顺序调整\r\n- [x] 已连接客户端信息展示\r\n- [x] favend 选择隐藏部分规则\r\n- [x] 子命令交互输入框延迟显示\r\n- [x] 优化 EFSS 首次加载速度\r\n- [x] fix 部分子命令不退出的问题\r\n- [x] 自定义 LOGO 图标及文字\r\n- [x] websocket 重连时间间隔优化\r\n- [x] 日志输出支持 ansi 彩色\r\n- [x] webUI 可选择是否开启 TLS\r\n- [x] $axios method alias get/post\r\n- [x] 移除 enable 强制开启通知的功能\r\n- [x] 脚本后缀名不区分大小写\r\n- [x] eapp 简单交互输入\r\n- [x] eapp 默认图标风格选择\r\n- [x] 浏览器简单 notifications\r\n- [x] 自定义 app touch icon\r\n- [x] 首页快捷运行脚本 eapp\r\n- [x] 增加脚本默认参数 __md5hash\r\n- [x] 脚本内容缓存提升读取速度\r\n- [x] efh script runon 简化\r\n- [x] minishell run 命令初版\r\n- [x] 可设置取消所有 cookie 授权\r\n- [x] 总日志大小超过 10M 提醒\r\n- [x] cookie/store 常量加密储存\r\n- [x] 默认 PATH 添加 script/Shell\r\n- [x] $store.get/put 日志显示\r\n- [x] 自定义设置其他环境变量参数\r\n- [x] 使用根证书主动签发域名证书\r\n- [x] 环境变量 PATH 设置及更新\r\n- [x] 根证书多格式选择下载\r\n- [x] pem/.0 后缀证书生成\r\n- [x] websocket 连接及数据传输优化\r\n- [x] $fend cache key 及逻辑优化\r\n- [x] 脚本编辑快速添加任务\r\n- [x] 脚本测试运行日志全屏\r\n- [x] cookie=clear 清除授权 token\r\n- [x] addEventListener hashchange\r\n- [x] 可设置仅 webhook 端口可访问\r\n- [x] 增加 $request.pathname 参数\r\n- [x] 脚本中增加默认变量 __userid\r\n- [x] webUI 主题样式自定义\r\n- [x] ENV 设定默认 WEBHOOK TOKEN\r\n- [x] cookie 授权通知及记录\r\n- [x] EFSS 文件全选快捷键\r\n- [x] EFSS 默认不显示文件夹 node_modules\r\n- [x] softupdate.js 默认使用 ZIP 更新\r\n- [x] wbrun 快速运行脚本\r\n- [x] 定时任务快捷查看脚本\r\n- [x] webUI i18n 新建文件夹\r\n- [x] 简单主题开发者测试\r\n- [x] sponsors 用户ID 测试\r\n- [x] 默认更新检测调整\r\n- [x] 网页通知默认打开\r\n- [x] 脚本快捷执行及日志显示优化\r\n- [x] efh 自定义运行前后台部分\r\n- [x] task bIsValid 函数优化\r\n- [x] EFSS 编辑器 复制粘贴\r\n- [x] REWRITE 订阅添加优化\r\n- [x] 导航根据默认语言显示\r\n- [x] 订阅任务定时自动更新\r\n- [x] 左侧导航栏自定义显示\r\n- [x] 脚本运行时引用外部资源提醒\r\n- [x] minishell 子进程交互\r\n- [x] minishell cd $home/$temp\r\n- [x] exec 运行中子进程记录\r\n- [x] EFSS/favend 设置合并\r\n- [x] logHead cache\r\n- [x] string hash/hmac\r\n- [x] 脚本增加 $webhook 函数\r\n- [x] TASK 列表关键字搜索过滤\r\n- [x] efss download progress\r\n- [x] webhook 部分返回结果 JSON 化\r\n- [x] RULE/REWRITE 执行 efh 文件\r\n- [x] download 自动添加后缀\r\n- [x] SECURITY 未设置提醒\r\n- [x] efss 远程文件下载\r\n- [x] $axios 错误显示优化\r\n- [x] 显示脚本最近修改日期\r\n- [x] webUI 移动端导航栏固定\r\n- [x] 所有 store/cookie 常量备份/导入\r\n- [x] REWRITE 单条规则备注信息\r\n- [x] efh $fend 前后台数据交互\r\n- [x] webUI 页面缓存提醒优化\r\n- [x] elecV2P 启动次数统计\r\n- [x] favend 支持 efh 远程文件\r\n- [X] favend JS 重构(.efh 初版)\r\n- [x] 全局 CORS 设置\r\n- [x] 非授权访问通知提醒\r\n- [X] TASK 定时任务分组\r\n- [x] MITM 跳过对图片类数据的处理\r\n- [x] websocket 断连提醒\r\n- [x] 首次 token 访问时生成 cookie\r\n- [x] REWRITE 备份及订阅分组\r\n- [x] RULES/REWRITE 规则总开关\r\n- [x] REWRITE/MITM 规则匹配缓存\r\n- [x] webUI 与后台版本一致性检测\r\n- [x] TASK 部分远程 JS 更新\r\n- [x] 当前连接客户端信息简易记录\r\n- [X] EFSS 文件压缩/解压/重命名\r\n- [x] $download options existskip\r\n- [x] 远程推送 JS 时可重命名文件\r\n- [x] access.log 更详细记录\r\n- [x] 增加对 Buffer 类数据的处理\r\n- [x] webhook 打开/关闭代理端口\r\n- [x] EFSS 多文件操作\r\n- [x] softupdate.js 异步并行下载\r\n- [x] favend favorite 显示日期和大小\r\n- [X] EFSS 新增文本文件编辑器\r\n- [x] 添加 access.log 访问日志\r\n- [x] weboskcet token 验证\r\n- [x] 增加 $store.set 方法\r\n- [x] EFSS 右键新建文件夹\r\n- [x] EFSS 复制粘粘移动文件\r\n- [x] github action 自动构建多平台 docker 镜像\r\n- [x] table overflow 显示优化\r\n- [x] runJS 增加 -grant 参数处理\r\n- [x] 增加临时环境变量 $env\r\n- [x] 通知触发 JS 优化\r\n- [x] JS 增加 sudo 模式及 $task\r\n- [x] 增加默认变量__taskname/__taskid\r\n- [x] require 相关函数优化\r\n- [x] logs 界面删除按钮\r\n- [x] 部分对象 Proxy 化\r\n- [x] EFSS 右键增加 pm2 运行选项\r\n- [x] JS 默认环境变量增加 $cache\r\n- [X] EFSS favorite&backend\r\n- [x] TASK 批量删除/添加/暂停/开始\r\n- [x] logs 支持多级目录\r\n- [x] exec 远程指令优化及默认目录调整\r\n- [x] EFSS 支持删除文件夹\r\n- [x] JS 列表只返回 .js 结尾文件\r\n- [x] exec -env/-timeout 参数处理优化\r\n- [x] node 指令默认 cwd 修改为 script/JSFile\r\n- [x] 增加 console.time/timeLog/timeEnd\r\n- [x] 增加显示脚本内网络请求 url 的选项\r\n- [x] eAxios 网络请求增加黑/白名单模式\r\n- [x] @grant 增加 nodejs 兼容模式\r\n- [x] $message 支持点击打开 url\r\n- [x] $evui 增加 从后台关闭\r\n- [x] efss 右键显示文件地址及目录支持 $temp\r\n- [x] webUI 移动端显示 及 log.vue 等优化\r\n- [x] webUI 取消 TASK 转圈动画\r\n- [x] 单个 cookie 导出/导入\r\n- [x] webhook 增加对后台限制 IP 的更改\r\n- [x] webhook download 支持设置目录及文件名\r\n- [x] webhook 增加 jsfile 获取及添加\r\n- [x] REWRITE 订阅同时添加 MITMHOST 及 TASK\r\n- [x] REWRITE 增加 reject 类规则 (网络请求前)\r\n- [X] 使用 JSON 重构 Lists 数据结构\r\n- [X] 说明文档 [1.0 基本完成，优化中...]\r\n- [x] MITM list JSON 化\r\n- [x] 首页增加服务器相关信息显示\r\n- [x] 增加默认通知开关\r\n- [x] 定时任务本地订阅导入\r\n- [x] store/cookie 管理添加关联脚本及备注\r\n- [x] EFSS 跳过显示部分文件夹/文件\r\n- [x] 增加 ANYPROXY 快速关闭/打开功能\r\n- [x] webUI 增加 elecV2P 重启/关闭按钮\r\n- [x] task 远程 JS 更新，以及 ctrl+enter 测试\r\n- [x] eaxios 网络代理问题修复\r\n- [x] 本地 JS 支持多级目录\r\n- [x] anyproxy temp cache 关闭时自动清理\r\n- [x] download process(cb)\r\n- [x] webhook token 初始值更改为随机\r\n- [x] 通知触发 JS\r\n- [x] 通知测试按钮\r\n- [x] $feed title 开头使用 $enable$ 强制发送通知\r\n- [x] shell 指令支持执行远程文件\r\n- [x] $exec 增加延迟输入交互内容\r\n- [x] $evui 增加支持插入 script\r\n- [x] EFSS 目录支持使用 $HOME/~ 变量\r\n- [x] 添加定时任务订阅功能\r\n- [X] EFSS 删除文件/文件管理模块（初版完成）\r\n- [x] 默认启动方式更改为 PM2\r\n- [x] 增加在前端网页显示通知的功能\r\n- [x] 优化通过 token 访问 webUI（绕过 IP 屏蔽）\r\n- [x] 实现自定义通知\r\n- [x] $evui 实现基础的前后端数据交互\r\n- [x] $evui 通过脚本生成图形 UI\r\n- [x] @grant silent/quiet\r\n- [x] rules 301 -> 307\r\n- [x] runJSFile Promise 化\r\n- [x] bark 自定义服务器\r\n- [X] 限 IP 访问后台管理页面\r\n- [x] efss upload file test 0.1\r\n- [x] 添加 bark/serverchan 通知\r\n- [x] docker arm64/arm32 0.1 (test)\r\n- [x] dockerfile.arm test\r\n- [x] webUI logs better\r\n- [x] context require better\r\n- [x] context request bug fix\r\n- [x] windows downloadfile dest bug fix\r\n- [x] runjs addContext.rename to save\r\n- [x] efss file info\r\n- [x] downloadfile dest better\r\n- [x] exec/js env -e/-c bug fix\r\n- [x] file directory list\r\n- [x] efss 上线\r\n- [x] jsmanage test run js rename\r\n- [x] exec/shell ls bug fix\r\n- [x] feed notify better\r\n- [x] context notify bug fix\r\n- [x] schedule task promise finished better\r\n- [x] add store get type random\r\n- [x] logger alignhead & webUI better\r\n- [x] mock js body bug fix\r\n- [x] vm context 添加变量 __home\r\n- [x] string.js 优化，sString/sJson\r\n- [x] store.put type 优化\r\n- [x] context sType bug fixed\r\n- [x] exec callback finishflag\r\n- [x] wbhook runjs env\r\n- [x] 30x 重定向优化(bug fix)\r\n- [x] utils sType Object type detect\r\n- [x] webUI store 相关优化\r\n- [x] store.put type a (添加内容)\r\n- [x] store.get bug fix\r\n- [x] Todo.md 显示优化\r\n- [x] 添加 exec 执行日志\r\n- [x] webhook taskadd\r\n- [x] exec commandSetup\r\n- [x] res.end number bug fixed\r\n- [x] webhook runjs post rawcode\r\n- [x] wbhook better tip\r\n- [x] remove 1024->2048 move/tip\r\n- [x] webUI better finally hideloading\r\n- [x] task runjs type bug fixed\r\n- [x] js require bug fixed\r\n- [x] store put/get type/data\r\n- [x] mitmhost.list save bug fixed\r\n- [x] default useragent list\r\n- [x] mock log bug fixed\r\n- [x] log put subfolder bug fixed\r\n- [x] runstatus push bug fix\r\n- [x] JS push bug fix\r\n- [x] file.path join->resolve\r\n- [x] jsmanage searsh/filter js\r\n- [x] example exec 多语言(python/sh).js\r\n- [x] runJS return promise\r\n- [x] ctrl+s save js\r\n- [x] task runjs -e env\r\n- [x] exec -e env -c cwd\r\n- [X] (P)script, (sub)folder->JSFile/Shell(.js/.sh)\r\n- [x] 自签证书附加 p12 格式\r\n- [x] webhook remote JS forece downloads(rename)\r\n- [x] script 子目录保存获取\r\n- [x] docs Advanced.md\r\n- [x] webUI cookie/jsmanage 优化\r\n- [x] minishell >/space/prevent 问题\r\n- [x] docs webhook\r\n- [x] 定时任务 exec file.sh\r\n- [x] rename runjs to script\r\n- [x] minishell dispatch logic\r\n- [x] js notify to ifttt\r\n- [x] mock move to jsmanage\r\n- [x] docs js/webhook 填坑\r\n- [x] webhook put/post\r\n- [x] runJSFile remove fs/path\r\n- [x] utils/file.js jsfile.get/put\r\n- [x] wbtask list.get/put/post\r\n- [x] feed homepage set\r\n- [x] JSTEST 0/false bug fix\r\n- [x] webUI minishell/message 优化\r\n- [x] 引入 cheerio, 增强 JS 对 html 的处理\r\n- [x] config save bug fix\r\n- [x] setting eAxios timeout/proxy/usagent\r\n- [x] utils list.get/put\r\n- [x] webUI message 优化/bug fix\r\n- [X] (P)去 antd vue\r\n- [x] a-icon component\r\n- [x] $message 替换\r\n- [x] log component\r\n- [x] eAxios proxy 设置\r\n- [x] remove a-layout\r\n- [x] a-icon 合并\r\n- [x] 任务日志 清空 button\r\n- [x] myAxios 优化\r\n- [ ] [cancelled]anyproxy 替换，使用其他库或原生代码，增强可定制性\r\n- [x] mock request 通过内部 proxy\r\n- [x] config 单独 js/合并\r\n- [x] axios 封装 0.1\r\n- [x] mock to JS\r\n- [x] request 模拟 mock 1.0\r\n- [x] $HOLD request reject(直接返回)\r\n- [x] webhook taskinfo 调整\r\n- [x] webUI remove antd menu\r\n- [X] (P)自签证书自定义生成 1.0\r\n- [ ] (cancelled)JS 管理定时任务 $task.add/start/stop\r\n- [x] task run log\r\n- [x] filter list 添加 IP-CIDR\r\n- [ ] (cancelled)mongoDB 或者 其他 nosql 数据保存\r\n- [X] (P)TGbot 日志删除 远程JS 任务列表\r\n- [x] minishell onmessage\r\n- [x] logger 优化\r\n- [x] web UI 优化\r\n- [x] RUNJS 相关设置\r\n- [x] JS 运行优化\r\n- [x] tg bot status\r\n- [x] 取消多规则匹配\r\n- [x] 远程 JS\r\n- [x] $hold 添加 header(转文本编辑)\r\n- [x] hold_label 调整\r\n- [x] $HOLD overflow/header delete/url\r\n- [X] (P) $HOLD. hold返回结果到前端页面进行编辑\r\n- [x] tg bot 日志查看\r\n- [x] $hold timeout/req\r\n- [x] default list 添加 hold\r\n- [x] $hold web ui/title\r\n- [X] (P)内存使用优化 [progressing..., done.了吧..]\r\n- [x] wbstore 统一\r\n- [x] axios header 默认 user-agent\r\n- [x] $hold 初测试\r\n- [x] cfilter 优化\r\n- [x] 任务列表 运行/总数\r\n- [x] context req 优化\r\n- [x] webhook start/stop task\r\n- [x] webhook task info\r\n- [x] logs permission denied fix\r\n- [x] package 精简\r\n- [x] textarea 网线\r\n- [x] uploadjs 优化\r\n- [x] webhook deletelogs/get status\r\n- [x] mitm 开启/关闭 全部\r\n- [x] webrunjs to webhook\r\n- [x] setting homepage\r\n- [x] websocket 断开 status 显示\r\n- [x] JS 文件列表刷新\r\n- [x] require './xxx'\r\n- [x] 停止任务 出错 fixed\r\n- [x] 初始 lists/jsfile 添加\r\n- [x] overview jsrunstatus\r\n- [x] $request/$response 测试运行 错误提醒\r\n- [x] exec 编码 fix\r\n- [x] cat/type regex\r\n- [x] recver ready 调整\r\n- [x] setTimeout/setInterval context\r\n- [x] exec cross platform 简单命令转化\r\n- [x] exec 取消 iconv 编码转换\r\n- [x] minishell cd command 问题\r\n- [x] websocket 单独端口取消\r\n- [x] websocket recver readystatus\r\n- [x] websocket reconncet ready 重载\r\n- [x] minishell history\r\n- [x] shell cd\r\n- [x] websocket clientID(euid)\r\n- [X] (P)mini shell 1.0\r\n- [ ] lists 订阅（订个锤子，用 JS 和定时任务代替）\r\n- [x] exec cwd\r\n- [x] recver muti\r\n- [x] config_port 整理\r\n- [x] runstatus 修复\r\n- [x] 订阅更新 单个添加\r\n- [x] JSLISTS push 重复的问题\r\n- [x] 说明文档前 备注更新日期和版本\r\n- [x] logger 日志调整取消\r\n- [x] logger 全局日志调整分离\r\n- [x] exec stream 同步/片断 输出\r\n- [x] exec to ondata\r\n- [x] contextBase class 化\r\n- [x] feed.ifttt\r\n- [x] store delete\r\n- [x] overview logs/feed\r\n- [x] 服务器端 websocket 优化(setInterval)\r\n- [x] webUI collapse/logo\r\n- [x] context __dirname\r\n- [x] webws 终极优化\r\n- [x] setting.vue feed 优化\r\n- [x] task.md(exec)\r\n- [x] webws connecting 细节优化\r\n- [x] webrecv 优化 基本完成\r\n- [x] context @exec\r\n- [x] reconnect 逻辑优化\r\n- [x] exec task cb\r\n- [x] js.md 说明文档(@exec/@feed 等)\r\n- [x] feed 不更新问题\r\n- [x] // @require  nodejs module 0.1\r\n- [x] web websocket 分离\r\n- [x] websocket 重连后 message 续传\r\n- [x] 任务 exec 类型\r\n- [X] (P)overview 显示 precess 内存使用\r\n- [x] websocket 自动重连\r\n- [x] websocket 延时加载问题\r\n- [x] initdata 整理\r\n- [x] 远程 runjs token 设置\r\n- [X] (P)代码规范化（尽量） [done?, progressing...]\r\n- [x] 网页添加 docs 链接\r\n- [x] js 远程运行/token  :/runjs?token=2223sdd&fn=test.js\r\n- [x] task time 默认值自动调整\r\n- [x] web #tag 直达\r\n- [x] 任务初始化 ifttt 不通知的问题\r\n- [x] webmodule.js 拆分\r\n- [x] 代码规范化初步（尽力了）\r\n- [x] vue websocket 移动到最上层\r\n- [x] 清除 logs 部分/全部\r\n- [x] webmodules task 移动到 task\r\n- [x] websocket 断连问题\r\n- [x] random repeat\r\n- [x] 定时任务 时间合理检测\r\n- [x] mitm host 子域名通配符（*）\r\n- [x] JS context 添加 feed 通知 $feed\r\n- [x] feed 一定时间内（1 min）合并通知\r\n- [x] 自动启用 rootCA 证书\r\n- [x] JS context 分离为 module\r\n- [x] task stat\r\n- [x] mitm *\r\n- [x] 任务 运行 log 返回\r\n- [x] 客户端 websocket\r\n- [x] logger 添加 cb(websocket)\r\n- [x] list 更改 重载\r\n- [x] logger level 统一管理\r\n- [x] antd 精简\r\n- [x] vue 分拆重构\r\n- [x] web UI\r\n- [x] config 配置对象\r\n- [x] mitmhost.list\r\n- [x] schedule repeat 无数次\r\n- [x] 任务执行不影响原始任务数据\r\n- [x] utils 内容整理\r\n- [x] schedule 任务多元化\r\n- [x] clog 前缀自定义，多参数输入  .header\r\n- [x] clog 级别控制 .debug, .info, .error\r\n- [x] logger 库初级\r\n- [x] runJSFile Post/Get cb 处理\r\n- [x] axios callback/response 处理\r\n- [x] surger/qx $request/$response 兼容\r\n- [x] 单个域名 对应 user-agent\r\n- [x] rootCA 清空\r\n- [x] js 编写 默认模板\r\n- [x] filter.list 编辑\r\n- [x] help 页面（延迟加载）\r\n- [x] 设置页面 help\r\n- [x] 保存规则下移\r\n- [x] rule.list 编辑\r\n- [x] 保存规则去空，去无对应 js\r\n- [x] js 手动编写\r\n- [x] js 内容查看管理\r\n- [x] filter.list 生成\r\n- [x] js 删除\r\n- [x] menu lists （小图标）（请求信息查看/保存列表/。。。）\r\n- [x] rule.list 订阅（更新hook)(rewrite)\r\n- [x] js 远程下载\r\n- [x] 根证书只同步，不上传\r\n- [x] js 文件上传\r\n- [x] 同步证书/清空历史已签发证书\r\n</pre>\r\n</div>\r\n</div>"
        },
        {
          "name": "config.js",
          "type": "blob",
          "size": 2.7060546875,
          "content": "const fs = require('fs')\r\nconst path = require('path')\r\nconst { UUID, sHash } = require('./utils/string')\r\n\r\nconst CONFIG_Port = {     // 此处修改对应端口无效\r\n  proxy: 8001,    // anyproxy 代理端口\r\n  webif: 8002,    // 网络请求查看端口\r\n  webst: 80,      // webUI 主页面端口\r\n\r\n  // 其他 elecV2P 运行时参数\r\n  path: path.resolve(__dirname, 'script/Lists', process.env.CONFIG || 'config.json'),\r\n  start: Date.now(),\r\n  version: require('./package.json').version,\r\n}\r\ndelete process.env.CONFIG\r\n\r\nconst CONFIG = fs.existsSync(CONFIG_Port.path) ? require(CONFIG_Port.path) : Object.create(null);\r\nCONFIG_Port.webst = process.env.PORT || CONFIG.webUI?.port || CONFIG_Port.webst;\r\n\r\nCONFIG_Port.path_lists = path.resolve(__dirname, CONFIG.path_lists || 'script/Lists')\r\nCONFIG_Port.path_script = path.resolve(__dirname, CONFIG.path_script || 'script/JSFile')\r\nCONFIG_Port.path_store = path.resolve(__dirname, CONFIG.path_store || 'script/Store')\r\nCONFIG_Port.path_shell = path.resolve(__dirname, CONFIG.path_shell || 'script/Shell')\r\n\r\nif (CONFIG.anyproxy) {\r\n  if (CONFIG.anyproxy.port) {\r\n    CONFIG_Port.proxy = CONFIG.anyproxy.port\r\n  } else {\r\n    CONFIG.anyproxy.port = CONFIG_Port.proxy\r\n  }\r\n  if (CONFIG.anyproxy.webPort) {\r\n    CONFIG_Port.webif = CONFIG.anyproxy.webPort\r\n  } else {\r\n    CONFIG.anyproxy.webPort = CONFIG_Port.webif\r\n  }\r\n} else {\r\n  CONFIG.anyproxy = {\r\n    enable: false,\r\n    port: CONFIG_Port.proxy,\r\n    webPort: CONFIG_Port.webif\r\n  }\r\n}\r\n\r\nif (process.env.TOKEN) {\r\n  CONFIG.wbrtoken = process.env.TOKEN.trim()\r\n  delete process.env.TOKEN\r\n}\r\nif (!CONFIG.wbrtoken) {\r\n  CONFIG.wbrtoken = CONFIG.webhook?.token || UUID()\r\n}\r\nif (!CONFIG.env) {\r\n  CONFIG.env = {\r\n    path: ''\r\n  }\r\n} else {\r\n  const { path, PATH, ...config_other } = CONFIG.env\r\n  for (let enkey in config_other) {\r\n    process.env[enkey] = config_other[enkey]\r\n  }\r\n}\r\nif (!CONFIG.SECURITY) {\r\n  CONFIG.SECURITY = {\r\n    enable: false,\r\n  }\r\n} else if (CONFIG.SECURITY.tokens) {\r\n  const tokens = {}\r\n  for (let rawkey in CONFIG.SECURITY.tokens) {\r\n    let token = CONFIG.SECURITY.tokens[rawkey]\r\n    if (token.token && token.token !== CONFIG.wbrtoken) {\r\n      tokens[sHash(token.token)] = token\r\n    }\r\n  }\r\n  CONFIG.SECURITY.tokens = tokens\r\n}\r\nif (!CONFIG.webUI) {\r\n  CONFIG.webUI = {\r\n    port: 80,\r\n  }\r\n}\r\nprocess.env.PATH = [...new Set([\r\n  ...process.env.PATH.split(path.delimiter),\r\n  ...(CONFIG.env.path ?? CONFIG.env.PATH ?? '').split(path.delimiter),\r\n  path.join(__dirname, 'script/Shell')\r\n].filter(s=>s))].join(path.delimiter)\r\nCONFIG.env.path = process.env.PATH\r\n\r\nCONFIG_Port.userid = sHash(CONFIG.wbrtoken)\r\nCONFIG_Port.vernum = Number(CONFIG_Port.version.replace(/\\D/g, ''))\r\n\r\nmodule.exports = { CONFIG, CONFIG_Port }"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "efss",
          "type": "tree",
          "content": null
        },
        {
          "name": "func",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 2.6142578125,
          "content": "const { CONFIG, CONFIG_Port } = require('./config')\r\n\r\nconst webstser = require('./webmodule')\r\nwebstser()\r\n\r\nconst aProxyOptions = {\r\n  port: CONFIG_Port.proxy,\r\n  rule: require('./script/rule.js'),\r\n  webInterface: {\r\n    enable: true,          // 是否打开代理请求查看端口\r\n    webPort: CONFIG_Port.webif\r\n  },\r\n  wsIntercept: Boolean(CONFIG.anyproxy.wsIntercept)\r\n}\r\n\r\nconst { eproxy, wsSer, logger, message, checkupdate } = require('./utils')\r\nconst clog = new logger({ head: 'elecV2P', level: 'debug' })\r\n\r\n// anyproxy 临时设置\r\nCONFIG_Port.anyproxy = { ...CONFIG.anyproxy }\r\n\r\nif (process.env.PROXYEN) {\r\n  CONFIG_Port.anyproxy.enable = true\r\n}\r\n\r\nlet eProxy = null\r\nif (CONFIG_Port.anyproxy.enable === false) {\r\n  clog.info('anyproxy not enabled yet')\r\n} else {\r\n  eProxy = new eproxy(aProxyOptions)\r\n  eProxy.start()\r\n}\r\n\r\n// websocket 快速打开/关闭 anyproxy\r\nwsSer.recv.eproxy = (op = '')=>{\r\n  if (typeof op === 'object') {\r\n    if (op.port > 0) {\r\n      CONFIG_Port.anyproxy.port = op.port\r\n      aProxyOptions.port = op.port\r\n    }\r\n    if (op.webPort > 0) {\r\n      CONFIG_Port.anyproxy.webPort = op.webPort\r\n      aProxyOptions.webInterface.webPort = op.webPort\r\n    }\r\n    op = op.op || (op.enable ? 'start' : 'close')\r\n  }\r\n  switch(op) {\r\n    case 'new':\r\n    case 'start':\r\n    case 'enable':\r\n      if (eProxy === null) {\r\n        eProxy = new eproxy(aProxyOptions)\r\n        eProxy.start()\r\n        message.success(`anyproxy started on port ${CONFIG_Port.anyproxy.port}`)\r\n      } else {\r\n        clog.info('anyproxy already started')\r\n        message.error('anyproxy already started')\r\n      }\r\n      CONFIG_Port.anyproxy.enable = true\r\n      break\r\n    case 'delete':\r\n    case 'close':\r\n    case 'disable':\r\n      if (eProxy) {\r\n        eProxy.close()\r\n        message.success('anyproxy closed')\r\n        eProxy = null\r\n      } else {\r\n        clog.info('anyproxy already closed')\r\n        message.error('anyproxy already closed')\r\n      }\r\n      CONFIG_Port.anyproxy.enable = false\r\n      break\r\n    case 'restart':\r\n      if (eProxy) {\r\n        eProxy.close()\r\n        eProxy = null\r\n      }\r\n      eProxy = new eproxy(aProxyOptions)\r\n      eProxy.start()\r\n      message.success(`anyproxy restart on port ${CONFIG_Port.anyproxy.port}`)\r\n      CONFIG_Port.anyproxy.enable = true\r\n      break\r\n    default:{\r\n      clog.error('unknow operation on anyproxy:', op)\r\n      message.error('unknow operation on anyproxy')\r\n    }\r\n  }\r\n}\r\n\r\n// checkupdate\r\nif (CONFIG.init?.checkupdate !== false) {\r\n  checkupdate().then(body=>{\r\n    if (body.updateversion) {\r\n      clog.notify(`elecV2P v${body.updateversion} is available`)\r\n    }\r\n  })\r\n}"
        },
        {
          "name": "logs",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.1484375,
          "content": "{\n  \"name\": \"elecV2P\",\n  \"version\": \"3.8.2\",\n  \"description\": \"customize personal network\",\n  \"main\": \"index.js\",\n  \"author\": \"https://github.com/elecV2\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/elecV2/elecV2P\"\n  },\n  \"engines\": {\n    \"node\": \">=14.17.0\"\n  },\n  \"scripts\": {\n    \"build\": \"webpack --config config/webpack.product.config.js\",\n    \"start\": \"pm2 start index.js -n elecV2P --no-daemon\",\n    \"webdev\": \"webpack --config config/webpack.dev.config.js\",\n    \"dev\": \"set port=12521 && nodemon index.js\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/elecV2/elecV2P/issues\"\n  },\n  \"keywords\": [\n    \"MITM\",\n    \"V2P\",\n    \"anyproxy\",\n    \"task\",\n    \"shell\"\n  ],\n  \"dependencies\": {\n    \"adm-zip\": \"^0.5.12\",\n    \"anyproxy\": \"^4.1.3\",\n    \"axios\": \"^1.6.8\",\n    \"cheerio\": \"^1.0.0-rc.12\",\n    \"formidable\": \"^2.0.1\",\n    \"node-cron\": \"^3.0.2\",\n    \"pm2\": \"^5.2.0\",\n    \"rss\": \"^1.2.2\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.19.0\",\n    \"@babel/preset-env\": \"^7.19.0\",\n    \"babel-eslint\": \"^10.1.0\",\n    \"babel-loader\": \"^8.2.2\",\n    \"babel-plugin-import\": \"^1.13.3\",\n    \"babel-polyfill\": \"^6.26.0\",\n    \"clean-webpack-plugin\": \"^3.0.0\",\n    \"compression-webpack-plugin\": \"^7.1.2\",\n    \"copy-webpack-plugin\": \"^7.0.0\",\n    \"css-loader\": \"^6.7.1\",\n    \"css-minimizer-webpack-plugin\": \"^4.1.0\",\n    \"eslint\": \"^7.18.0\",\n    \"eslint-plugin-vue\": \"^7.4.1\",\n    \"file-loader\": \"^6.2.0\",\n    \"html-webpack-plugin\": \"^5.5.0\",\n    \"mini-css-extract-plugin\": \"^2.6.1\",\n    \"optimize-css-assets-webpack-plugin\": \"^6.0.1\",\n    \"postcss\": \"^8.4.16\",\n    \"postcss-loader\": \"^7.0.1\",\n    \"style-loader\": \"^3.3.1\",\n    \"uglifyjs-webpack-plugin\": \"^2.2.0\",\n    \"url-loader\": \"^4.1.1\",\n    \"vue\": \"^2.7.10\",\n    \"vue-draggable-resizable\": \"^2.3.0\",\n    \"vue-loader\": \"^15.10.0\",\n    \"vue-template-compiler\": \"^2.7.10\",\n    \"vue2-editor\": \"^2.10.3\",\n    \"webpack\": \"^5.74.0\",\n    \"webpack-cli\": \"^4.10.0\",\n    \"webpack-dev-server\": \"^4.11.0\",\n    \"webpack-merge\": \"^5.8.0\"\n  },\n  \"nodemonConfig\": {\n    \"ignore\": [\n      \"logs\",\n      \"script/JSFile/*\",\n      \"script/Lists/*\",\n      \"script/Store/*\",\n      \"web/*\",\n      \"*test.js\"\n    ]\n  }\n}"
        },
        {
          "name": "rootCA",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        },
        {
          "name": "webmodule.js",
          "type": "blob",
          "size": 3.8720703125,
          "content": "const fs = require('fs')\r\nconst http = require('http')\r\nconst path = require('path')\r\nconst express = require('express')\r\nconst compression = require('compression')\r\n\r\nconst { CONFIG, CONFIG_Port } = require('./config')\r\n\r\nconst { crtHost } = require('./func')\r\nconst { isAuthReq, logger, websocketSer, htmlTemplate } = require('./utils')\r\nconst clog = new logger({ head: 'webServer' })\r\n\r\nconst { wbefss, wbconfig, wbfeed, wbcrt, wbjs, wbtask, wblogs, wbstore, wbdata, wblist, wbhook, wbrpc, wbrun, wbeapp } = require('./webser')\r\n\r\nasync function newServer(app) {\r\n  if (CONFIG.webUI.tls?.enable) {\r\n    const host = CONFIG.webUI.tls.host || '127.0.0.1'\r\n    try {\r\n      if (!(fs.existsSync(`rootCA/${host}.key`) && fs.existsSync(`rootCA/${host}.crt`))) {\r\n        await crtHost(host)\r\n      }\r\n      clog.notify('enable TLS for webUI, HOST:', host)\r\n      return require('https').createServer({\r\n        key: fs.readFileSync(`rootCA/${host}.key`),\r\n        cert: fs.readFileSync(`rootCA/${host}.crt`)\r\n      }, app)\r\n    } catch(error) {\r\n      clog.error('fail to enable TLS for webUI, reason:', error)\r\n    }\r\n  }\r\n  return http.createServer(app)\r\n}\r\n\r\nmodule.exports = () => {\r\n  const app = express()\r\n  app.use(express.json({ limit: '10mb' }))\r\n  app.use(express.urlencoded({ extended: true }))\r\n  app.set('json spaces', 2)\r\n  app.use((req, res, next)=>{\r\n    if (isAuthReq(req, res)) {\r\n      res.set({ 'Access-Control-Allow-Origin': '*' })\r\n      next()\r\n    } else {\r\n      res.status(403).send(htmlTemplate(`<p style=\"margin-top: 0;padding-top: 160px;\">You have no permission to access.</p>\r\n<p>IP: ${req.headers['x-forwarded-for'] || req.connection.remoteAddress} is recorded.</p>\r\n<form method=\"${req.method}\"><label>TOKEN: <input placeholder=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" style=\"width: 460px;max-width: 98%;color: #003153B8;\" name=\"token\"></label><input style=\"color: #FAFAFD;background: #003153B8;cursor: pointer;\" type=\"submit\" value=\"⏵\"><br><label><input name=\"cookie\" type=\"checkbox\" value=\"long\" style=\"width: 24px;vertical-align: middle;cursor: pointer;\">cookie=long (365 days)</label></form><br>\r\n<p>Powered BY elecV2P: <a href='https://github.com/elecV2/elecV2P'>https://github.com/elecV2/elecV2P</a></p>`, '<style type=\"text/css\">input{height: 36px;line-height: 36px;box-sizing: border-box;border: none;font-size: 22px;border-radius: 1em;margin: 0 3px;padding: 0px 8px;text-align: center;}</style>')\r\n      )\r\n    }\r\n  })\r\n  wbrpc(app)\r\n\r\n  app.use(compression())\r\n  app.use(express.static(path.resolve(__dirname, 'web/dist')))\r\n\r\n  app.use(express.text({ type: 'text/*' }))\r\n  app.use(express.raw())\r\n  wbconfig(app)\r\n  wbfeed(app)\r\n  wbcrt(app)\r\n  wbjs(app)\r\n  wbtask(app)\r\n  wblogs(app)\r\n  wbstore(app)\r\n  wbdata(app)\r\n  wblist(app)\r\n  wbhook(app)\r\n  wbefss(app)\r\n  wbrun(app)\r\n  wbeapp(app)\r\n\r\n  app.use((req, res, next) => {\r\n    res.status(404).send(htmlTemplate(`<h3 style=\"margin-top: 0;padding: 140px 1em 0;white-space: pre-wrap;word-break: break-all;\">${req.method}    ${req.originalUrl}</h3>\r\n<h1>404, Not Found</h1><br>\r\n<nav><a href=\"/\">HOME</a><a href=\"/efss/\">EFSS</a><a href=\"/logs/\">LOGS</a></nav><br>\r\n<p><span>Powered BY </span><a target=\"_blank\" href=\"https://github.com/elecV2/elecV2P\">elecV2P</a></p>\r\n<p><span>TG Channel </span><a target=\"_blank\" href=\"https://t.me/elecV2\">@elecV2</a></p>`, '<style type=\"text/css\">nav{display: flex;justify-content: space-around;font-size: 26px;}</style>', '404, oops... - elecV2P'))\r\n  })\r\n\r\n  newServer(app).then(server=>{\r\n    server.on('clientError', (err, socket) => {\r\n      clog.error('elecV2P clientError', err)\r\n      socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n'+err.message)\r\n    })\r\n\r\n    server.listen(CONFIG_Port.webst, ()=>{\r\n      clog.notify('elecV2P', 'v' + CONFIG_Port.version, 'started on port', CONFIG_Port.webst);\r\n    })\r\n\r\n    websocketSer({ server, path: '/elecV2P' })\r\n  }).catch(err=>{\r\n    clog.error('elecV2P new server error:', err)\r\n  })\r\n}"
        },
        {
          "name": "webser",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}