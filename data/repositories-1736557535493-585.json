{
  "metadata": {
    "timestamp": 1736557535493,
    "page": 585,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gulpjs/gulp",
      "stars": 33050,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.21,
          "content": "# https://editorconfig.org\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nend_of_line = lf\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.02,
          "content": "{\n  \"extends\": \"gulp\"\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.11,
          "content": "* text eol=lf\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.64,
          "content": "# Logs\nlogs\n*.log\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directory\n# Commenting this out is preferred by some people, see\n# https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-my-node_modules-folder-into-git-\nnode_modules\n\n# Users Environment Variables\n.lock-wscript\n\n# Garbage files\n.DS_Store\n\n# Test results\ntest.xunit\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.02,
          "content": "package-lock=false\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.04,
          "content": "coverage/\n.nyc_output/\nCHANGELOG.md\n"
        },
        {
          "name": ".tidelift.yml",
          "type": "blob",
          "size": 0.45,
          "content": "ci:\n  platform:\n    NPM:\n      # We use an older version that doesn't use ES6+ features to support back to node 0.10\n      eslint:\n        tests:\n          outdated: skip\n      # We use an older version that doesn't use ES6+ features to support back to node 0.10\n      expect:\n        tests:\n          outdated: skip\n      # We use an older version that doesn't use ES6+ features to support back to node 0.10\n      mocha:\n        tests:\n          outdated: skip\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 14.7,
          "content": "# gulp changelog\n\n## [5.0.0](https://www.github.com/gulpjs/gulp/compare/v4.0.2...v5.0.0) (2024-03-29)\n\nWe've tried to provide a high-level changelog for gulp v5 below, but it\ndoesn't contain all changes from the 60+ dependencies that we maintain.\n\nPlease see [individual changelogs](#individual-changelogs) to drill down\ninto all changes that were made.\n\n### ⚠ BREAKING CHANGES\n\n* Drop support for Node.js <10.13\n* Default stream encoding to UTF-8\n* Standardized on `anymatch` library for globbing paths. All globs should work the same between `src` and `watch` now!\n* Removed support for ordered globs. This aligns with the chokidar globbing implementation. If you need your globs to be ordered, you can use `ordered-read-stream`\n* All globs and paths are normalized to unix-like filepaths\n* Only allow JS variants for `.gulp.*` config files\n* Removed support for alpha releases of v4 from `gulp-cli`\n* Removed the `--verify` flag\n* Renamed the `--require` flag to `--preload` to avoid conflicting with Node.js flags\n* Removed many legacy and deprecated loaders\n* Upgrade to chokidar v3\n* Clone `Vinyl` objects with stream contents using `teex`, but no longer wait for all streams to flow before cloned streams will receive data\n* Stop using `process.umask()` to make directories, instead falling back to Node's default mode\n* Throw on non-function, non-string option coercers\n* Drop support of Node.js snake_case flags\n* Use a Symbol for attaching the `gulplog` namespace to the store\n* Use a Symbol for attaching the `gulplog` store to the global\n* Use sha256 to hash the `v8flags` cache into a filename\n\n### Features\n\n* Streamlined the dependency tree\n* Switch all streams implementation to Streamx\n* Rewrote `glob-stream` to use a custom directory walk that relies on newer Node.js features and is more performant than old implementation\n* Implement translation support for all CLI messages and all messages passing through gulplog\n* Allow users to customize or remove the timestamp from their logs\n* Upgraded gulplog to v2. Messages logged via v1 will also display a deprecated warning. Plugins should update to v2 as the community upgrades to gulp 5\n* Added support for `gulpile.cjs` and `gulpfile.mjs`\n* Add support for `swc`, `esbuild`, `sucrase`, and `mdx` loaders\n* Provide an ESM export ([#2760](https://www.github.com/gulpjs/gulp/issues/2760)) ([b00de68](https://www.github.com/gulpjs/gulp/commit/b00de681f5ef6ade283d544f62f770f6b27a9e52))\n* Support sourcemap handling on streaming `Vinyl` contents\n* Support `extends` syntax for `.gulp.*` config file\n* Allow overriding `gulpfile` and `preloads` via `.gulp.*` config file\n\n### Bug Fixes\n\n* Resolve bugs related to symlinks on various platforms\n* Resolved some reported ReDoS CVEs and improved performance in glob-parent\n* Rework errors surfaced when encountering files or symlinks when trying to create directories\n* Ensure watch allows japanese characters in globs ([72668c6](https://www.github.com/gulpjs/gulp/commit/72668c61e445c81fad23bc6ed24967a3238a648d))\n* Ensure watch does not trigger on negated globs ([72668c6](https://www.github.com/gulpjs/gulp/commit/72668c61e445c81fad23bc6ed24967a3238a648d))\n* Improve handling of BOM at the beginning of a stream\n* Properly handle function coercer in array of option coercers\n* Fork `to-absolute-glob` to:\n  - Check negative patterns before trimming\n  - Ensure glob-like characters are escaped in cwd & root options\n  - Resolve `../` at the beginning of globs\n\n### Miscellaneous Chores\n\n* Remove lazystream dependency\n* Updated various stream test suites to test against Node.js core `stream`, `readable-stream`, and `streamx`\n* Normalize repository, dropping node <10.13 support ([#2758](https://www.github.com/gulpjs/gulp/issues/2758)) ([72668c6](https://www.github.com/gulpjs/gulp/commit/72668c61e445c81fad23bc6ed24967a3238a648d))\n\n### Individual Changelogs\n\nWe created and maintain various projects that gulp depends upon. You can find their changelogs linked below:\n\n* [undertaker](https://github.com/gulpjs/undertaker/blob/master/CHANGELOG.md#200-2024-03-22)\n* [vinyl-fs](https://github.com/gulpjs/vinyl-fs/blob/master/CHANGELOG.md#400-2023-06-11)\n* [glob-stream](https://github.com/gulpjs/glob-stream/blob/master/CHANGELOG.md#801-2024-03-25)\n* [gulp-cli](https://github.com/gulpjs/gulp-cli/blob/master/CHANGELOG.md#300-2024-03-24)\n* [interpret](https://github.com/gulpjs/interpret/blob/master/CHANGELOG.md#311-2022-06-29)\n* [glob-parent](https://github.com/gulpjs/glob-parent/blob/main/CHANGELOG.md#602-2021-09-29)\n* [glob-watcher](https://github.com/gulpjs/glob-watcher/blob/master/CHANGELOG.md#600-2023-05-31)\n* [vinyl](https://github.com/gulpjs/vinyl/blob/master/CHANGELOG.md#300-2022-09-26)\n* [fs-mkdirp-stream](https://github.com/gulpjs/fs-mkdirp-stream/blob/master/CHANGELOG.md#201-2022-09-17)\n* [lead](https://github.com/gulpjs/lead/blob/master/CHANGELOG.md#400-2022-09-22)\n* [vinyl-sourcemap](https://github.com/gulpjs/vinyl-sourcemap/blob/master/CHANGELOG.md#200-2022-10-17)\n* [to-through](https://github.com/gulpjs/to-through/blob/master/CHANGELOG.md#300-2022-09-07)\n* [resolve-options](https://github.com/gulpjs/resolve-options/blob/master/CHANGELOG.md#200-2022-06-24)\n* [remove-bom-stream](https://github.com/gulpjs/remove-bom-stream/blob/master/CHANGELOG.md#200-2022-04-19)\n* [value-or-function](https://github.com/gulpjs/value-or-function/blob/master/CHANGELOG.md#400-2022-01-30)\n* [now-and-later](https://github.com/gulpjs/now-and-later/blob/master/CHANGELOG.md#300-2022-06-25)\n* [@gulpjs/to-absolute-glob](https://github.com/gulpjs/to-absolute-glob/blob/master/CHANGELOG.md#400-2023-01-03)\n* [fined](https://github.com/gulpjs/fined/blob/master/CHANGELOG.md#200-2021-10-31)\n* [mute-stdout](https://github.com/gulpjs/mute-stdout/blob/master/CHANGELOG.md#200-2021-11-22)\n* [semver-greatest-satisfied-range](https://github.com/gulpjs/semver-greatest-satisfied-range/blob/master/CHANGELOG.md#200-2022-01-31)\n* [flagged-respawn](https://github.com/gulpjs/flagged-respawn/blob/master/CHANGELOG.md#200-2021-11-21)\n* [rechoir](https://github.com/gulpjs/rechoir/blob/master/CHANGELOG.md#080-2021-07-24)\n* [gulplog](https://github.com/gulpjs/gulplog/blob/master/CHANGELOG.md#220-2024-03-23)\n* [glogg](https://github.com/gulpjs/glogg/blob/master/CHANGELOG.md#220-2024-03-23)\n* [@gulpjs/messages](https://github.com/gulpjs/messages/blob/master/CHANGELOG.md#110-2024-03-24)\n* [sparkles](https://github.com/gulpjs/sparkles/blob/master/CHANGELOG.md#210-2024-03-23)\n* [liftoff](https://github.com/gulpjs/liftoff/blob/main/CHANGELOG.md#500-2024-03-16)\n* [v8flags](https://github.com/gulpjs/v8flags/blob/master/CHANGELOG.md#401-2023-09-03)\n* [bach](https://github.com/gulpjs/bach/blob/master/CHANGELOG.md#201-2022-08-29)\n* [undertaker-registry](https://github.com/gulpjs/undertaker-registry/blob/master/CHANGELOG.md#200-2021-12-29)\n* [async-settle](https://github.com/gulpjs/async-settle/blob/master/CHANGELOG.md#200-2022-06-25)\n* [last-run](https://github.com/gulpjs/last-run/blob/master/CHANGELOG.md#200-2022-01-10)\n* [async-done](https://github.com/gulpjs/async-done/blob/master/CHANGELOG.md#200-2022-06-25)\n* [replace-homedir](https://github.com/gulpjs/replace-homedir/blob/master/CHANGELOG.md#200-2022-01-31)\n\n## 4.0.0\n\n### Task system changes\n\n- replaced 3.x task system (orchestrator) with new task system (bach)\n  - removed gulp.reset\n  - removed 3 argument syntax for `gulp.task`\n  - `gulp.task` should only be used when you will call the task with the CLI\n  - added `gulp.series` and `gulp.parallel` methods for composing tasks. Everything must use these now.\n  - added single argument syntax for `gulp.task` which allows a named function to be used as the name of the task and task function.\n  - added `gulp.tree` method for retrieving the task tree. Pass `{ deep: true }` for an `archy` compatible node list.\n  - added `gulp.registry` for setting custom registries.\n\n### CLI changes\n\n- split CLI out into a module if you want to save bandwidth/disk space. you can install the gulp CLI using either `npm install gulp -g` or `npm install gulp-cli -g`, where gulp-cli is the smaller one (no module code included)\n- add `--tasks-json` flag to CLI to dump the whole tree out for other tools to consume\n- added `--verify` flag to check the dependencies in package.json against the plugin blacklist.\n\n### vinyl/vinyl-fs changes\n\n- added `gulp.symlink` which functions exactly like `gulp.dest`, but symlinks instead.\n- added `dirMode` param to `gulp.dest` and `gulp.symlink` which allows better control over the mode of the destination folder that is created.\n- globs passed to `gulp.src` will be evaluated in order, which means this is possible `gulp.src(['*.js', '!b*.js', 'bad.js'])` (exclude every JS file that starts with a b except bad.js)\n- performance for gulp.src has improved massively\n  - `gulp.src(['**/*', '!b.js'])` will no longer eat CPU since negations happen during walking now\n- added `since` option to `gulp.src` which lets you only match files that have been modified since a certain date (for incremental builds)\n- fixed `gulp.src` not following symlinks\n- added `overwrite` option to `gulp.dest` which allows you to enable or disable overwriting of existing files\n\n## 3.9.1\n\n- update interpret to 1.0.0 (support for babel-register)\n- fix to include manpages in published tarball\n- documentation/recipe updates\n\n## 3.9.0\n\n- add babel support\n- add transpiler fallback support\n- add support for some renamed transpilers: livescript, etc\n- add JSCS\n- update dependencies (liftoff, interpret)\n- documentation tweaks\n\n## 3.8.11\n\n- fix node 0.12/iojs problems\n- add node 0.12 and iojs to travis\n- update dependencies (liftoff, v8flags)\n- documentation tweaks\n\n## 3.8.10\n\n- add link to spanish docs\n- update dependencies (archy, semver, mocha, etc)\n- documentation tweaks\n\n## 3.8.9\n\n- fix local version undefined output\n- add completion for fish shell\n- fix powershell completion line splitting\n- add support for arbitrary node flags (oops, should have been a minor bump)\n- add v8flags dependency\n- update dependencies (liftoff)\n- documentation tweaks\n\n## 3.8.8\n\n- update dependencies (minimist, tildify)\n- documentation tweaks\n\n## 3.8.7\n\n- handle errors a bit better\n- update dependencies (gulp-util, semver, etc)\n- documentation tweaks\n\n## 3.8.6\n\n- remove executable flag from LICENSE\n- update dependencies (chalk, minimist, liftoff, etc)\n- documentation tweaks\n\n## 3.8.5\n\n- simplify --silent and --tasks-simple\n- fix bug in autocomplete where errors would come out\n\n## 3.8.4\n\n- CLI will use exit code 1 on exit when any task fails during the lifetime of the process\n\n\n## 3.8.3\n\n- Tweak error formatting to work better with PluginErrors and strings\n\n## 3.8.2\n\n- add manpage generation\n\n## 3.8.1\n\n- the CLI now adds process.env.INIT_CWD which is the original cwd it was launched from\n\n## 3.8.0\n\n- update vinyl-fs\n  - gulp.src is now a writable passthrough, this means you can use it to add files to your pipeline at any point\n  - gulp.dest can now take a function to determine the folder\n\nThis is now possible!\n\n```js\ngulp.src('lib/*.js')\n  .pipe(uglify())\n  .pipe(gulp.src('styles/*.css'))\n  .pipe(gulp.dest(function(file){\n    // I don't know, you can do something cool here\n    return 'build/whatever';\n  }));\n```\n\n## 3.7.0\n\n- update vinyl-fs to remove BOM from UTF8 files\n- add --tasks-simple flag for plaintext task listings\n- updated autocomplete scripts to be simpler and use new --tasks-simple flag\n- added support for transpilers via liftoff 0.11 and interpret\n  - just npm install your compiler (coffee-script for example) and it will work out of the box\n\n## 3.5.5\n\n- update deps\n- gulp.dest now support mode option, uses source file mode by default (file.stat.mode)\n- use chalk for colors in bin\n- update gulp.env deprecation msg to be more helpful\n\n\n## 3.5.2\n\n- add -V for version on CLI (unix standard)\n- -v is deprecated, use -V\n- add -T as an alias for --tasks\n- documentation\n\n## 3.5\n\n- added `gulp.watch(globs, tasksArray)` sugar\n- remove gulp.taskQueue\n- deprecate gulp.run\n- deprecate gulp.env\n- add engineStrict to prevent people with node < 0.9 from installing\n\n## 3.4\n\n- added `--tasks` that prints out the tree of tasks + deps\n- global cli + local install mismatch is no longer fatal\n- remove tests for fs stuff\n- switch core src, dest, and watch to vinyl-fs\n- internal cleaning\n\n## 3.3.4\n\n- `--base` is now `--cwd`\n\n## 3.3.3\n\n- support for `--base` CLI arg to change where the search for gulpfile/`--require`s starts\n- support for `--gulpfile` CLI arg to point to a gulpfile specifically\n\n## 3.3.0\n\n- file.contents streams are no longer paused coming out of src\n- dest now passes files through before they are empty to fix passing to multiple dests\n\n## 3.2.4\n\n- Bug fix - we didn't have any CLI tests\n\n## 3.2.3\n\n- Update dependencies for bug fixes\n- autocomplete stuff in the completion folder\n\n## 3.2\n\n- File object is now [vinyl](https://github.com/wearefractal/vinyl)\n- .watch() is now [glob-watcher](https://github.com/wearefractal/glob-watcher)\n- Fix CLI -v when no gulpfile found\n- gulp-util updated\n- Logging moved to CLI bin file\n  - Will cause double logging if you update global CLI to 3.2 but not local\n  - Will cause no logging if you update local to 3.1 but not global CLI\n- Drop support for < 0.9\n\n## 3.1.3\n\n- Move isStream and isBuffer to gulp-util\n\n## 3.1\n\n- Move file class to gulp-util\n\n## 3.0\n\n- Ability to pass multiple globs and glob negations to glob-stream\n- Breaking change to the way glob-stream works\n- File object is now a class\n- file.shortened changed to file.relative\n- file.cwd added\n- Break out getStats to avoid nesting\n- Major code reorganization\n\n## 2.7\n\n- Breaking change to the way options are passed to glob-stream\n- Introduce new File object to ease pain of computing shortened names (now a getter)\n\n## 2.4 - 2.6\n\n- Moved stuff to gulp-util\n- Quit exposing createGlobStream (just use the glob-stream module)\n- More logging\n- Prettier time durations\n- Tons of documentation changes\n- gulp.trigger(tasks...) as a through stream\n\n## 1.2-2.4 (11/12/13)\n\n- src buffer=false fixed for 0.8 and 0.9 (remember to .resume() on these versions before consuming)\n- CLI completely rewritten\n  - Colorful logging\n  - Uses local version of gulp to run tasks\n  - Uses findup to locate gulpfile (so you can run it anywhere in your project)\n  - chdir to gulpfile directory before loading it\n  - Correct exit codes on errors\n- silent flag added to gulp to disable logging\n- Fixes to task orchestration (3rd party)\n- Better support for globbed directories (thanks @robrich)\n\n## 1.2 (10/28/13)\n\n- Can specify buffer=false on src streams to make file.content a stream\n- Can specify read=false on src streams to disable file.content\n\n## 1.1 (10/21/13)\n\n- Can specify run callback\n- Can specify task dependencies\n- Tasks can accept callback or return promise\n- `gulp.verbose` exposes run-time internals\n\n## 1.0 (9/26/13)\n\n- Specify dependency versions\n- Updated docs\n\n## 0.2 (8/6/13)\n\n- Rename .files() to .src() and .folder() to .dest()\n\n## 0.1 (7/18/13)\n\n- Initial Release\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.21,
          "content": "# Request for contributions\n\nPlease contribute to this repository if any of the following is true:\n- You have expertise in community development, communication, or education\n- You want open source communities to be more collaborative and inclusive\n- You want to help lower the burden to first time contributors\n\n# How to contribute\n\nPrerequisites:\n\n- familiarity with [GitHub PRs](https://help.github.com/articles/using-pull-requests) (pull requests) and issues\n- knowledge of Markdown for editing `.md` documents\n\nIn particular, this community seeks the following types of contributions:\n\n- ideas: participate in an Issues thread or start your own to have your voice\nheard\n- resources: submit a PR to add to [docs README.md](/docs/README.md) with links to related content\n- outline sections: help us ensure that this repository is comprehensive. If\nthere is a topic that is overlooked, please add it, even if it is just a stub\nin the form of a header and single sentence. Initially, most things fall into\nthis category\n- write: contribute your expertise in an area by helping us expand the included\ncontent\n- copy editing: fix typos, clarify language, and generally improve the quality\nof the content\n- formatting: help keep content easy to read with consistent formatting\n- code: Fix issues or contribute new features to this or any related projects\n\n# Project structure\n\nGulp itself is tiny: index.js contains [very few lines of code](https://github.com/gulpjs/gulp/blob/master/index.js).\nIt is powered by a few other libraries which each handle a few specific tasks\neach.\n\nYou can view all issues with the \"help wanted\" label across all gulp projects\nhere: https://github.com/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+user%3Agulpjs+label%3A%22help+wanted%22+\n\n## Undertaker: task management\n\nUndertaker handles task management in Gulp: the `gulp.task()`, `gulp.series()`\nand `gulp.parallel()` functions. `gulp.series()` and `gulp.parallel()` are in\nturn powered by Bach.\n\n- https://github.com/gulpjs/undertaker\n- https://github.com/gulpjs/bach\n\n## vinyl-fs: file streams\n\nvinyl-fs powers the `gulp.src()` and `gulp.dest()` functions: they take files\nand globs specified by the user, turns them into a stream of file objects,\nand then puts them back into the filesystem when `gulp.dest()` is called.\n\nThe file objects themselves are vinyl objects: that's another library (a simple\none!)\n\n- https://github.com/gulpjs/vinyl-fs\n- https://github.com/gulpjs/vinyl\n\n## chokidar: file watching\n\n`gulp.watch()` is using chokidar for file watching. It's actually wrapped in a\nsmall library on the gulp organization, glob-watcher.\n\n- https://github.com/paulmillr/chokidar\n- https://github.com/gulpjs/glob-watcher\n\n## gulp-cli: running gulp\n\nFinally, we have gulp-cli. This uses liftoff to take what people run in the\ncommand line and run the correct tasks. It works with both gulp 4 and older\nversions of gulp.\n\n- https://github.com/gulpjs/gulp-cli\n- https://github.com/js-cli/js-liftoff\n\n# Conduct\n\nWe are committed to providing a friendly, safe and welcoming environment for\nall, regardless of gender, sexual orientation, disability, ethnicity, religion,\nor similar personal characteristic.\n\nOn IRC, please avoid using overtly sexual nicknames or other nicknames that\nmight detract from a friendly, safe and welcoming environment for all.\n\nPlease be kind and courteous. There's no need to be mean or rude.\nRespect that people have differences of opinion and that every design or\nimplementation choice carries a trade-off and numerous costs. There is seldom\na right answer, merely an optimal answer given a set of values and\ncircumstances.\n\nPlease keep unstructured critique to a minimum. If you have solid ideas you\nwant to experiment with, make a fork and see how it works.\n\nWe will exclude you from interaction if you insult, demean or harass anyone.\nThat is not welcome behavior. We interpret the term \"harassment\" as\nincluding the definition in the\n[Citizen Code of Conduct](http://citizencodeofconduct.org/);\nif you have any lack of clarity about what might be included in that concept,\nplease read their definition. In particular, we don't tolerate behavior that\nexcludes people in socially marginalized groups.\n\nPrivate harassment is also unacceptable. No matter who you are, if you feel\nyou have been or are being harassed or made uncomfortable by a community\nmember, please contact one of the channel ops or any of the\n[gulpjs](https://github.com/orgs/gulpjs/people) core team\nimmediately. Whether you're a regular contributor or a newcomer, we care about\nmaking this community a safe place for you and we've got your back.\n\nLikewise any spamming, trolling, flaming, baiting or other attention-stealing\nbehavior is not welcome.\n\n\n# Communication\n\nThere is an IRC channel on irc.freenode.net, channel `#gulpjs`. You're\nwelcome to drop in and ask questions, discuss bugs and such. The channel is\nnot currently logged.\n\nGitHub issues are the primary way for communicating about specific proposed\nchanges to this project.\n\nIn both contexts, please follow the conduct guidelines above. Language issues\nare often contentious and we'd like to keep discussion brief, civil and focused\non what we're actually doing, not wandering off into too much imaginary stuff.\n\n# Frequently Asked Questions\n\nSee [the FAQ docs page](/docs/FAQ.md)\n"
        },
        {
          "name": "EXPENSE_POLICY.md",
          "type": "blob",
          "size": 1.73,
          "content": "# Expense Policy\n\n## Funding can be requested for significant changes made by Core Members.\n* Discuss the changes in the private gulp team forum.\n* Include a cost estimation with either a fixed price or hours + rate (suggested $50 per hour).\n* Notify the team before you exceed an estimate.\n\n## Bug bounties may be assigned at the Core Members’ discretion to issues of significant importance - usually issues outstanding for at least 6 months.\n* Issues with bug bounties will be labeled “Bug Bounty: $x”.\n* In order to claim a bug bounty, create a Pull Request that fixes an issue with a “Bug Bounty” label.\n* The Pull Request must be reviewed and merged by a Core Member. If competing submissions exist, the best solution will be chosen by a Core Member. All else equal, the first submission will be chosen.\n* Once your Pull Request is merged, you can submit an expense to our [Open Collective](https://opencollective.com/gulpjs/expenses/new) which includes the link to your submission in the description (e.g. $100 bug bounty claim for https://github.com/gulpjs/gulp/pull/2226). You will also need to provide an invoice, see the [Open Collective Expense FAQ](https://opencollective.com/faq/expenses) for more details and to get a Google Docs template that you can use.\n* Then, add a comment on your Pull Request, noting that you’ve claimed the money, with a link to your Open Collective expense. This is to ensure the same person who fixed the issue is claiming the money.\n* Your expense will be validated by a Core Member and then your payment will be dispersed by Open Collective the following Friday.\n\n## If you're doing other good things for gulp that end up costing you real money, feel free to reach out and we can discuss helping with those expenses!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.12,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013-2024 Blaine Bublitz <blaine.bublitz@gmail.com> and Eric Schoffstall <yo@contra.io>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.53,
          "content": "<p align=\"center\">\n  <a href=\"https://gulpjs.com\">\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\n  </a>\n  <p align=\"center\">The streaming build system</p>\n</p>\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][ci-image]][ci-url] [![Coveralls Status][coveralls-image]][coveralls-url]\n\n## What is gulp?\n\n- **Automation** - gulp is a toolkit that helps you automate painful or time-consuming tasks in your development workflow.\n- **Platform-agnostic** - Integrations are built into all major IDEs and people are using gulp with PHP, .NET, Node.js, Java, and other platforms.\n- **Strong Ecosystem** - Use npm modules to do anything you want + over 3000 curated plugins for streaming file transformations.\n- **Simple** - By providing only a minimal API surface, gulp is easy to learn and simple to use.\n\n## Installation\n\nFollow our [Quick Start guide][quick-start].\n\n## Roadmap\n\nFind out about all our work-in-progress and outstanding issues at https://github.com/orgs/gulpjs/projects.\n\n## Documentation\n\nCheck out the [Getting Started guide][getting-started-guide] and [API docs][api-docs] on our website!\n\n__Excuse our dust! All other docs will be behind until we get everything updated. Please open an issue if something isn't working.__\n\n## Sample `gulpfile.js`\n\nThis file will give you a taste of what gulp does.\n\n```js\nvar gulp = require('gulp');\nvar less = require('gulp-less');\nvar babel = require('gulp-babel');\nvar concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\nvar rename = require('gulp-rename');\nvar cleanCSS = require('gulp-clean-css');\nvar del = require('del');\n\nvar paths = {\n  styles: {\n    src: 'src/styles/**/*.less',\n    dest: 'assets/styles/'\n  },\n  scripts: {\n    src: 'src/scripts/**/*.js',\n    dest: 'assets/scripts/'\n  }\n};\n\n/* Not all tasks need to use streams, a gulpfile is just another node program\n * and you can use all packages available on npm, but it must return either a\n * Promise, a Stream or take a callback and call it\n */\nfunction clean() {\n  // You can use multiple globbing patterns as you would with `gulp.src`,\n  // for example if you are using del 2.0 or above, return its promise\n  return del([ 'assets' ]);\n}\n\n/*\n * Define our tasks using plain functions\n */\nfunction styles() {\n  return gulp.src(paths.styles.src)\n    .pipe(less())\n    .pipe(cleanCSS())\n    // pass in options to the stream\n    .pipe(rename({\n      basename: 'main',\n      suffix: '.min'\n    }))\n    .pipe(gulp.dest(paths.styles.dest));\n}\n\nfunction scripts() {\n  return gulp.src(paths.scripts.src, { sourcemaps: true })\n    .pipe(babel())\n    .pipe(uglify())\n    .pipe(concat('main.min.js'))\n    .pipe(gulp.dest(paths.scripts.dest));\n}\n\nfunction watch() {\n  gulp.watch(paths.scripts.src, scripts);\n  gulp.watch(paths.styles.src, styles);\n}\n\n/*\n * Specify if tasks run in series or parallel using `gulp.series` and `gulp.parallel`\n */\nvar build = gulp.series(clean, gulp.parallel(styles, scripts));\n\n/*\n * You can use CommonJS `exports` module notation to declare tasks\n */\nexports.clean = clean;\nexports.styles = styles;\nexports.scripts = scripts;\nexports.watch = watch;\nexports.build = build;\n/*\n * Define default task that can be called by just running `gulp` from cli\n */\nexports.default = build;\n```\n\n## Use latest JavaScript version in your gulpfile\n\nGulp provides a wrapper that will be loaded in your ESM code, so you can name your gulpfile as `gulpfile.mjs` or with `\"type\": \"module\"` specified in your `package.json` file.\n\nAnd here's the same sample from above written in **ESNext**.\n\n```js\nimport { src, dest, watch } from 'gulp';\nimport less from 'gulp-less';\nimport babel from 'gulp-babel';\nimport concat from 'gulp-concat';\nimport uglify from 'gulp-uglify';\nimport rename from 'gulp-rename';\nimport cleanCSS from 'gulp-clean-css';\nimport del from 'del';\n\nconst paths = {\n  styles: {\n    src: 'src/styles/**/*.less',\n    dest: 'assets/styles/'\n  },\n  scripts: {\n    src: 'src/scripts/**/*.js',\n    dest: 'assets/scripts/'\n  }\n};\n\n/*\n * For small tasks you can export arrow functions\n */\nexport const clean = () => del([ 'assets' ]);\n\n/*\n * You can also declare named functions and export them as tasks\n */\nexport function styles() {\n  return src(paths.styles.src)\n    .pipe(less())\n    .pipe(cleanCSS())\n    // pass in options to the stream\n    .pipe(rename({\n      basename: 'main',\n      suffix: '.min'\n    }))\n    .pipe(dest(paths.styles.dest));\n}\n\nexport function scripts() {\n  return src(paths.scripts.src, { sourcemaps: true })\n    .pipe(babel())\n    .pipe(uglify())\n    .pipe(concat('main.min.js'))\n    .pipe(dest(paths.scripts.dest));\n}\n\n /*\n  * You could even use `export as` to rename exported tasks\n  */\nfunction watchFiles() {\n  watch(paths.scripts.src, scripts);\n  watch(paths.styles.src, styles);\n}\nexport { watchFiles as watch };\n\nconst build = gulp.series(clean, gulp.parallel(styles, scripts));\n/*\n * Export a default task\n */\nexport default build;\n```\n\n## Incremental Builds\n\nYou can filter out unchanged files between runs of a task using\nthe `gulp.src` function's `since` option and `gulp.lastRun`:\n```js\nconst paths = {\n  ...\n  images: {\n    src: 'src/images/**/*.{jpg,jpeg,png}',\n    dest: 'build/img/'\n  }\n}\n\nfunction images() {\n  return gulp.src(paths.images.src, {since: gulp.lastRun(images)})\n    .pipe(imagemin())\n    .pipe(gulp.dest(paths.images.dest));\n}\n\nfunction watch() {\n  gulp.watch(paths.images.src, images);\n}\n```\nTask run times are saved in memory and are lost when gulp exits. It will only\nsave time during the `watch` task when running the `images` task\nfor a second time.\n\n## Want to contribute?\n\nAnyone can help make this project better - check out our [Contributing guide](/CONTRIBUTING.md)!\n\n<!-- prettier-ignore-start -->\n[quick-start]: https://gulpjs.com/docs/en/getting-started/quick-start\n[getting-started-guide]: https://gulpjs.com/docs/en/getting-started/quick-start\n[api-docs]: https://gulpjs.com/docs/en/api/concepts\n[esm-module]: https://github.com/standard-things/esm\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n[downloads-image]: https://img.shields.io/npm/dm/gulp.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/gulp\n[npm-image]: https://img.shields.io/npm/v/gulp.svg?style=flat-square\n\n[ci-url]: https://github.com/gulpjs/gulp/actions?query=workflow:dev\n[ci-image]: https://img.shields.io/github/actions/workflow/status/gulpjs/gulp/dev.yml?branch=master&style=flat-square\n\n[coveralls-url]: https://coveralls.io/r/gulpjs/gulp\n[coveralls-image]: https://img.shields.io/coveralls/gulpjs/gulp/master.svg?style=flat-square\n<!-- prettier-ignore-end -->\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 1.39,
          "content": "'use strict';\n\nvar util = require('util');\nvar Undertaker = require('undertaker');\nvar vfs = require('vinyl-fs');\nvar watch = require('glob-watcher');\n\nfunction Gulp() {\n  Undertaker.call(this);\n\n  // Bind the functions for destructuring\n  this.watch = this.watch.bind(this);\n  this.task = this.task.bind(this);\n  this.series = this.series.bind(this);\n  this.parallel = this.parallel.bind(this);\n  this.registry = this.registry.bind(this);\n  this.tree = this.tree.bind(this);\n  this.lastRun = this.lastRun.bind(this);\n  this.src = this.src.bind(this);\n  this.dest = this.dest.bind(this);\n  this.symlink = this.symlink.bind(this);\n}\nutil.inherits(Gulp, Undertaker);\n\nGulp.prototype.src = vfs.src;\nGulp.prototype.dest = vfs.dest;\nGulp.prototype.symlink = vfs.symlink;\nGulp.prototype.watch = function(glob, opt, task) {\n  if (typeof opt === 'string' || typeof task === 'string' ||\n    Array.isArray(opt) || Array.isArray(task)) {\n    throw new Error('watching ' + glob + ': watch task has to be ' +\n      'a function (optionally generated by using gulp.parallel ' +\n      'or gulp.series)');\n  }\n\n  if (typeof opt === 'function') {\n    task = opt;\n    opt = {};\n  }\n\n  opt = opt || {};\n\n  var fn;\n  if (typeof task === 'function') {\n    fn = this.parallel(task);\n  }\n\n  return watch(glob, opt, fn);\n};\n\n// Let people use this class from our instance\nGulp.prototype.Gulp = Gulp;\n\nvar inst = new Gulp();\nmodule.exports = inst;\n"
        },
        {
          "name": "index.mjs",
          "type": "blob",
          "size": 0.49,
          "content": "import gulp from \"./index.js\";\n\n// These are bound to the gulp instance in our CommonJS file\n// so it is okay to reassign them to export\nexport const watch = gulp.watch;\nexport const task = gulp.task;\nexport const series = gulp.series;\nexport const parallel = gulp.parallel;\nexport const registry = gulp.registry;\nexport const tree = gulp.tree;\nexport const lastRun = gulp.lastRun;\nexport const src = gulp.src;\nexport const dest = gulp.dest;\nexport const symlink = gulp.symlink;\n\nexport default gulp;\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.38,
          "content": "{\n  \"name\": \"gulp\",\n  \"version\": \"5.0.0\",\n  \"description\": \"The streaming build system.\",\n  \"homepage\": \"https://gulpjs.com\",\n  \"author\": \"Gulp Team <team@gulpjs.com> (https://gulpjs.com/)\",\n  \"contributors\": [\n    \"Eric Schoffstall <yo@contra.io>\",\n    \"Blaine Bublitz <blaine.bublitz@gmail.com>\"\n  ],\n  \"repository\": \"gulpjs/gulp\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">=10.13.0\"\n  },\n  \"main\": \"index.js\",\n  \"exports\": {\n    \".\": {\n      \"import\": \"./index.mjs\",\n      \"require\": \"./index.js\"\n    }\n  },\n  \"files\": [\n    \"LICENSE\",\n    \"index.js\",\n    \"index.mjs\",\n    \"bin\"\n  ],\n  \"bin\": {\n    \"gulp\": \"./bin/gulp.js\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint .\",\n    \"pretest\": \"npm run lint\",\n    \"test\": \"nyc mocha --async-only\"\n  },\n  \"dependencies\": {\n    \"glob-watcher\": \"^6.0.0\",\n    \"gulp-cli\": \"^3.0.0\",\n    \"undertaker\": \"^2.0.0\",\n    \"vinyl-fs\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"^7.0.0\",\n    \"eslint-config-gulp\": \"^5.0.0\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"expect\": \"^27.0.0\",\n    \"mkdirp\": \"^3.0.1\",\n    \"mocha\": \"^8.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"rimraf\": \"^3.0.0\"\n  },\n  \"nyc\": {\n    \"reporter\": [\n      \"lcov\",\n      \"text-summary\"\n    ]\n  },\n  \"prettier\": {\n    \"singleQuote\": true\n  },\n  \"keywords\": [\n    \"build\",\n    \"stream\",\n    \"system\",\n    \"make\",\n    \"tool\",\n    \"asset\",\n    \"pipeline\",\n    \"series\",\n    \"parallel\",\n    \"streaming\"\n  ]\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}