{
  "metadata": {
    "timestamp": 1736557350061,
    "page": 308,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ziishaned/learn-regex",
      "stars": 45794,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.02,
          "content": ".vscode\n.DS_STORE"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.04,
          "content": "MIT License\n\nCopyright (c) 2019 Zeeshan Ahmad\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 24.92,
          "content": "<p align=\"center\">\n    <br/>\n    <a href=\"https://github.com/ziishaned/learn-regex\">\t\n        <img src=\"https://i.imgur.com/bYwl7Vf.png\" alt=\"Learn Regex\">\n    </a>\n</p>\n\n## Translations:\n\n* [English](README.md)\n* [German](translations/README-de.md)\n* [Español](translations/README-es.md)\n* [Français](translations/README-fr.md)\n* [Português do Brasil](translations/README-pt_BR.md)\n* [中文版](translations/README-cn.md)\n* [日本語](translations/README-ja.md)\n* [한국어](translations/README-ko.md)\n* [Turkish](translations/README-tr.md)\n* [Greek](translations/README-gr.md)\n* [Magyar](translations/README-hu.md)\n* [Polish](translations/README-pl.md)\n* [Русский](translations/README-ru.md)\n* [Tiếng Việt](translations/README-vn.md)\n* [فارسی](translations/README-fa.md)\n* [עברית](translations/README-he.md)\n\n\n## What is Regular Expression?\n\n<p>\n    <a href=\"https://gum.co/learn-regex\">\n        <img src=\"https://img.shields.io/badge/-Download%20PDF%20-0a0a0a.svg?style=flat&colorA=0a0a0a\" alt=\"Download PDF\">\n    </a>\n</p>\n\n> A regular expression is a group of characters or symbols which is used to find a specific pattern in a text.\n\nA regular expression is a pattern that is matched against a subject string from\nleft to right. Regular expressions are used to replace text within a string, \nvalidate forms, extract a substring from a string based on a pattern match, \nand so much more. The term \"regular expression\" is a mouthful, so you will usually\nfind the term abbreviated to \"regex\" or \"regexp\". \n\nImagine you are writing an application and you want to set the rules for when a\nuser chooses their username. We want to allow the username to contain letters,\nnumbers, underscores and hyphens. We also want to limit the number of characters\nin the username so it does not look ugly. We can use the following regular expression to\nvalidate the username:\n\n<br/><br/>\n<p align=\"center\">\n  <img src=\"./img/regexp-en.png\" alt=\"Regular expression\">\n</p>\n\nThe regular expression above can accept the strings `john_doe`, `jo-hn_doe` and\n`john12_as`. It does not match `Jo` because that string contains an uppercase\nletter and also it is too short.\n\n## Table of Contents\n\n- [Basic Matchers](#1-basic-matchers)\n- [Meta Characters](#2-meta-characters)\n  - [The Full Stop](#21-the-full-stop)\n  - [Character Sets](#22-character-sets)\n    - [Negated Character Sets](#221-negated-character-sets)\n  - [Repetitions](#23-repetitions)\n    - [The Star](#231-the-star)\n    - [The Plus](#232-the-plus)\n    - [The Question Mark](#233-the-question-mark)\n  - [Braces](#24-braces)\n  - [Capturing Groups](#25-capturing-groups)\n      - [Non-Capturing Groups](#251-non-capturing-groups)\n  - [Alternation](#26-alternation)\n  - [Escaping Special Characters](#27-escaping-special-characters)\n  - [Anchors](#28-anchors)\n    - [The Caret](#281-the-caret)\n    - [The Dollar Sign](#282-the-dollar-sign)\n- [Shorthand Character Sets](#3-shorthand-character-sets)\n- [Lookarounds](#4-lookarounds)\n  - [Positive Lookahead](#41-positive-lookahead)\n  - [Negative Lookahead](#42-negative-lookahead)\n  - [Positive Lookbehind](#43-positive-lookbehind)\n  - [Negative Lookbehind](#44-negative-lookbehind)\n- [Flags](#5-flags)\n  - [Case Insensitive](#51-case-insensitive)\n  - [Global Search](#52-global-search)\n  - [Multiline](#53-multiline)\n- [Greedy vs Lazy Matching](#6-greedy-vs-lazy-matching)\n\n## 1. Basic Matchers\n\nA regular expression is just a pattern of characters that we use to perform a\nsearch in a text.  For example, the regular expression `the` means: the letter\n`t`, followed by the letter `h`, followed by the letter `e`.\n\n<pre>\n\"the\" => The fat cat sat on <a href=\"#learn-regex\"><strong>the</strong></a> mat.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/dmRygT/1)\n\nThe regular expression `123` matches the string `123`. The regular expression is\nmatched against an input string by comparing each character in the regular\nexpression to each character in the input string, one after another. Regular\nexpressions are normally case-sensitive so the regular expression `The` would\nnot match the string `the`.\n\n<pre>\n\"The\" => <a href=\"#learn-regex\"><strong>The</strong></a> fat cat sat on the mat.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/1paXsy/1)\n\n## 2. Meta Characters\n\nMeta characters are the building blocks of regular expressions.  Meta\ncharacters do not stand for themselves but instead are interpreted in some\nspecial way. Some meta characters have a special meaning and are written inside\nsquare brackets. The meta characters are as follows:\n\n|Meta character|Description|\n|:----:|----|\n|.|Period matches any single character except a line break.|\n|[ ]|Character class. Matches any character contained between the square brackets.|\n|[^ ]|Negated character class. Matches any character that is not contained between the square brackets|\n|*|Matches 0 or more repetitions of the preceding symbol.|\n|+|Matches 1 or more repetitions of the preceding symbol.|\n|?|Makes the preceding symbol optional.|\n|{n,m}|Braces. Matches at least \"n\" but not more than \"m\" repetitions of the preceding symbol.|\n|(xyz)|Character group. Matches the characters xyz in that exact order.|\n|&#124;|Alternation. Matches either the characters before or the characters after the symbol.|\n|&#92;|Escapes the next character. This allows you to match reserved characters <code>[ ] ( ) { } . * + ? ^ $ \\ &#124;</code>|\n|^|Matches the beginning of the input.|\n|$|Matches the end of the input.|\n\n## 2.1 The Full Stop\n\nThe full stop `.` is the simplest example of a meta character. The meta character `.`\nmatches any single character. It will not match return or newline characters.\nFor example, the regular expression `.ar` means: any character, followed by the\nletter `a`, followed by the letter `r`.\n\n<pre>\n\".ar\" => The <a href=\"#learn-regex\"><strong>car</strong></a> <a href=\"#learn-regex\"><strong>par</strong></a>ked in the <a href=\"#learn-regex\"><strong>gar</strong></a>age.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/xc9GkU/1)\n\n## 2.2 Character Sets\n\nCharacter sets are also called character classes. Square brackets are used to\nspecify character sets. Use a hyphen inside a character set to specify the\ncharacters' range. The order of the character range inside the square brackets\ndoesn't matter. For example, the regular expression `[Tt]he` means: an uppercase\n`T` or lowercase `t`, followed by the letter `h`, followed by the letter `e`.\n\n<pre>\n\"[Tt]he\" => <a href=\"#learn-regex\"><strong>The</strong></a> car parked in <a href=\"#learn-regex\"><strong>the</strong></a> garage.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/2ITLQ4/1)\n\nA period inside a character set, however, means a literal period. The regular\nexpression `ar[.]` means: a lowercase character `a`, followed by the letter `r`,\nfollowed by a period `.` character.\n\n<pre>\n\"ar[.]\" => A garage is a good place to park a c<a href=\"#learn-regex\"><strong>ar.</strong></a>\n</pre>\n\n[Test the regular expression](https://regex101.com/r/wL3xtE/1)\n\n### 2.2.1 Negated Character Sets\n\nIn general, the caret symbol represents the start of the string, but when it is\ntyped after the opening square bracket it negates the character set. For\nexample, the regular expression `[^c]ar` means: any character except `c`,\nfollowed by the character `a`, followed by the letter `r`.\n\n<pre>\n\"[^c]ar\" => The car <a href=\"#learn-regex\"><strong>par</strong></a>ked in the <a href=\"#learn-regex\"><strong>gar</strong></a>age.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/nNNlq3/1)\n\n## 2.3 Repetitions\n\nThe meta characters `+`, `*` or `?` are used to specify how many times a\nsubpattern can occur. These meta characters act differently in different\nsituations.\n\n### 2.3.1 The Star\n\nThe `*` symbol matches zero or more repetitions of the preceding matcher. The\nregular expression `a*` means: zero or more repetitions of the preceding lowercase\ncharacter `a`. But if it appears after a character set or class then it finds\nthe repetitions of the whole character set. For example, the regular expression\n`[a-z]*` means: any number of lowercase letters in a row.\n\n<pre>\n\"[a-z]*\" => T<a href=\"#learn-regex\"><strong>he</strong></a> <a href=\"#learn-regex\"><strong>car</strong></a> <a href=\"#learn-regex\"><strong>parked</strong></a> <a href=\"#learn-regex\"><strong>in</strong></a> <a href=\"#learn-regex\"><strong>the</strong></a> <a href=\"#learn-regex\"><strong>garage</strong></a> #21.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/7m8me5/1)\n\nThe `*` symbol can be used with the meta character `.` to match any string of\ncharacters `.*`. The `*` symbol can be used with the whitespace character `\\s`\nto match a string of whitespace characters. For example, the expression\n`\\s*cat\\s*` means: zero or more spaces, followed by a lowercase `c`,\nfollowed by a lowercase `a`, followed by a lowercase `t`,\nfollowed by zero or more spaces.\n\n<pre>\n\"\\s*cat\\s*\" => The fat<a href=\"#learn-regex\"><strong> cat </strong></a>sat on the con<a href=\"#learn-regex\"><strong>cat</strong></a>enation.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/gGrwuz/1)\n\n### 2.3.2 The Plus\n\nThe `+` symbol matches one or more repetitions of the preceding character. For\nexample, the regular expression `c.+t` means: a lowercase `c`, followed by\nat least one character, followed by a lowercase `t`. It needs to be\nclarified that`t` is the last `t` in the sentence.\n\n<pre>\n\"c.+t\" => The fat <a href=\"#learn-regex\"><strong>cat sat on the mat</strong></a>.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/Dzf9Aa/1)\n\n### 2.3.3 The Question Mark\n\nIn regular expressions, the meta character `?` makes the preceding character\noptional. This symbol matches zero or one instance of the preceding character.\nFor example, the regular expression `[T]?he` means: Optional uppercase\n`T`, followed by a lowercase `h`, followed by a lowercase `e`.\n\n<pre>\n\"[T]he\" => <a href=\"#learn-regex\"><strong>The</strong></a> car is parked in the garage.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/cIg9zm/1)\n\n<pre>\n\"[T]?he\" => <a href=\"#learn-regex\"><strong>The</strong></a> car is parked in t<a href=\"#learn-regex\"><strong>he</strong></a> garage.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/kPpO2x/1)\n\n## 2.4 Braces\n\nIn regular expressions, braces (also called quantifiers) are used to\nspecify the number of times that a character or a group of characters can be\nrepeated. For example, the regular expression `[0-9]{2,3}` means: Match at least\n2 digits, but not more than 3, ranging from 0 to 9.\n\n<pre>\n\"[0-9]{2,3}\" => The number was 9.<a href=\"#learn-regex\"><strong>999</strong></a>7 but we rounded it off to <a href=\"#learn-regex\"><strong>10</strong></a>.0.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/juM86s/1)\n\nWe can leave out the second number. For example, the regular expression\n`[0-9]{2,}` means: Match 2 or more digits. If we also remove the comma, the\nregular expression `[0-9]{3}` means: Match exactly 3 digits.\n\n<pre>\n\"[0-9]{2,}\" => The number was 9.<a href=\"#learn-regex\"><strong>9997</strong></a> but we rounded it off to <a href=\"#learn-regex\"><strong>10</strong></a>.0.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/Gdy4w5/1)\n\n<pre>\n\"[0-9]{3}\" => The number was 9.<a href=\"#learn-regex\"><strong>999</strong></a>7 but we rounded it off to 10.0.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/Sivu30/1)\n\n## 2.5 Capturing Groups\n\nA capturing group is a group of subpatterns that is written inside parentheses \n`(...)`. As discussed before, in regular expressions, if we put a quantifier \nafter a character then it will repeat the preceding character. But if we put a quantifier\nafter a capturing group then it repeats the whole capturing group. For example,\nthe regular expression `(ab)*` matches zero or more repetitions of the character\n\"ab\". We can also use the alternation `|` meta character inside a capturing group.\nFor example, the regular expression `(c|g|p)ar` means: a lowercase `c`,\n`g` or `p`, followed by `a`, followed by `r`.\n\n<pre>\n\"(c|g|p)ar\" => The <a href=\"#learn-regex\"><strong>car</strong></a> is <a href=\"#learn-regex\"><strong>par</strong></a>ked in the <a href=\"#learn-regex\"><strong>gar</strong></a>age.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/tUxrBG/1)\n\nNote that capturing groups do not only match, but also capture, the characters for use in \nthe parent language. The parent language could be Python or JavaScript or virtually any\nlanguage that implements regular expressions in a function definition.\n\n### 2.5.1 Non-Capturing Groups\n\nA non-capturing group is a capturing group that matches the characters but \ndoes not capture the group. A non-capturing group is denoted by a `?` followed by a `:` \nwithin parentheses `(...)`. For example, the regular expression `(?:c|g|p)ar` is similar to \n`(c|g|p)ar` in that it matches the same characters but will not create a capture group.\n\n<pre>\n\"(?:c|g|p)ar\" => The <a href=\"#learn-regex\"><strong>car</strong></a> is <a href=\"#learn-regex\"><strong>par</strong></a>ked in the <a href=\"#learn-regex\"><strong>gar</strong></a>age.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/Rm7Me8/1)\n\nNon-capturing groups can come in handy when used in find-and-replace functionality or \nwhen mixed with capturing groups to keep the overview when producing any other kind of output. \nSee also [4. Lookaround](#4-lookaround).\n\n## 2.6 Alternation\n\nIn a regular expression, the vertical bar `|` is used to define alternation.\nAlternation is like an OR statement between multiple expressions. Now, you may be\nthinking that character sets and alternation work the same way. But the big\ndifference between character sets and alternation is that character sets work at the\ncharacter level but alternation works at the expression level. For example, the\nregular expression `(T|t)he|car` means: either (an uppercase `T` or a lowercase\n`t`, followed by a lowercase `h`, followed by a lowercase `e`) OR\n(a lowercase `c`, followed by a lowercase `a`, followed by\na lowercase `r`). Note that I included the parentheses for clarity, to show that either expression\nin parentheses can be met and it will match.\n\n<pre>\n\"(T|t)he|car\" => <a href=\"#learn-regex\"><strong>The</strong></a> <a href=\"#learn-regex\"><strong>car</strong></a> is parked in <a href=\"#learn-regex\"><strong>the</strong></a> garage.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/fBXyX0/1)\n\n## 2.7 Escaping Special Characters\n\nA backslash `\\` is used in regular expressions to escape the next character. This\nallows us to include reserved characters such as `{ } [ ] / \\ + * . $ ^ | ?` as matching characters. To use one of these special character as a matching character, prepend it with `\\`.\n\nFor example, the regular expression `.` is used to match any character except a\nnewline. Now, to match `.` in an input string, the regular expression\n`(f|c|m)at\\.?` means: a lowercase `f`, `c` or `m`, followed by a lowercase\n`a`, followed by a lowercase `t`, followed by an optional `.`\ncharacter.\n\n<pre>\n\"(f|c|m)at\\.?\" => The <a href=\"#learn-regex\"><strong>fat</strong></a> <a href=\"#learn-regex\"><strong>cat</strong></a> sat on the <a href=\"#learn-regex\"><strong>mat.</strong></a>\n</pre>\n\n[Test the regular expression](https://regex101.com/r/DOc5Nu/1)\n\n## 2.8 Anchors\n\nIn regular expressions, we use anchors to check if the matching symbol is the\nstarting symbol or ending symbol of the input string. Anchors are of two types:\nThe first type is the caret `^` that checks if the matching character is the first\ncharacter of the input and the second type is the dollar sign `$` which checks if a matching\ncharacter is the last character of the input string.\n\n### 2.8.1 The Caret\n\nThe caret symbol `^` is used to check if a matching character is the first character\nof the input string. If we apply the following regular expression `^a` (meaning 'a' must be\nthe starting character) to the string `abc`, it will match `a`. But if we apply\nthe regular expression `^b` to the above string, it will not match anything.\nBecause in the string `abc`, the \"b\" is not the starting character. Let's take a look\nat another regular expression `^(T|t)he` which means: an uppercase `T` or\na lowercase `t` must be the first character in the string, followed by a\nlowercase `h`, followed by a lowercase `e`.\n\n<pre>\n\"(T|t)he\" => <a href=\"#learn-regex\"><strong>The</strong></a> car is parked in <a href=\"#learn-regex\"><strong>the</strong></a> garage.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/5ljjgB/1)\n\n<pre>\n\"^(T|t)he\" => <a href=\"#learn-regex\"><strong>The</strong></a> car is parked in the garage.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/jXrKne/1)\n\n### 2.8.2 The Dollar Sign\n\nThe dollar sign `$` is used to check if a matching character is the last character\nin the string. For example, the regular expression `(at\\.)$` means: a\nlowercase `a`, followed by a lowercase `t`, followed by a `.`\ncharacter and the matcher must be at the end of the string.\n\n<pre>\n\"(at\\.)\" => The fat c<a href=\"#learn-regex\"><strong>at.</strong></a> s<a href=\"#learn-regex\"><strong>at.</strong></a> on the m<a href=\"#learn-regex\"><strong>at.</strong></a>\n</pre>\n\n[Test the regular expression](https://regex101.com/r/y4Au4D/1)\n\n<pre>\n\"(at\\.)$\" => The fat cat. sat. on the m<a href=\"#learn-regex\"><strong>at.</strong></a>\n</pre>\n\n[Test the regular expression](https://regex101.com/r/t0AkOd/1)\n\n##  3. Shorthand Character Sets\n\nThere are a number of convenient shorthands for commonly used character sets/\nregular expressions:\n\n|Shorthand|Description|\n|:----:|----|\n|.|Any character except new line|\n|\\w|Matches alphanumeric characters: `[a-zA-Z0-9_]`|\n|\\W|Matches non-alphanumeric characters: `[^\\w]`|\n|\\d|Matches digits: `[0-9]`|\n|\\D|Matches non-digits: `[^\\d]`|\n|\\s|Matches whitespace characters: `[\\t\\n\\f\\r\\p{Z}]`|\n|\\S|Matches non-whitespace characters: `[^\\s]`|\n\n## 4. Lookarounds\n\nLookbehinds and lookaheads (also called lookarounds) are specific types of\n***non-capturing groups*** (used to match a pattern but without including it in the matching\nlist). Lookarounds are used when a pattern must be\npreceded or followed by another pattern. For example, imagine we want to get all\nnumbers that are preceded by the `$` character from the string\n`$4.44 and $10.88`. We will use the following regular expression `(?<=\\$)[0-9\\.]*`\nwhich means: get all the numbers which contain the `.` character and are preceded\nby the `$` character. These are the lookarounds that are used in regular\nexpressions:\n\n|Symbol|Description|\n|:----:|----|\n|?=|Positive Lookahead|\n|?!|Negative Lookahead|\n|?<=|Positive Lookbehind|\n|?<!|Negative Lookbehind|\n\n### 4.1 Positive Lookahead\n\nThe positive lookahead asserts that the first part of the expression must be\nfollowed by the lookahead expression. The returned match only contains the text\nthat is matched by the first part of the expression. To define a positive\nlookahead, parentheses are used. Within those parentheses, a question mark with\nan equals sign is used like this: `(?=...)`. The lookahead expressions is written after\nthe equals sign inside parentheses. For example, the regular expression\n`(T|t)he(?=\\sfat)` means: match either a lowercase `t` or an uppercase\n `T`, followed by the letter `h`, followed by the letter `e`. In parentheses we\ndefine a positive lookahead which tells the regular expression engine to match `The`\nor `the` only if it's followed by the word `fat`.\n\n<pre>\n\"(T|t)he(?=\\sfat)\" => <a href=\"#learn-regex\"><strong>The</strong></a> fat cat sat on the mat.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/IDDARt/1)\n\n### 4.2 Negative Lookahead\n\nNegative lookaheads are used when we need to get all matches from an input string\nthat are not followed by a certain pattern. A negative lookahead is written the same way as a\npositive lookahead. The only difference is, instead of an equals sign `=`, we\nuse an exclamation mark `!` to indicate negation i.e. `(?!...)`. Let's take a look at the following\nregular expression `(T|t)he(?!\\sfat)` which means: get all `The` or `the` words\nfrom the input string that are not followed by a space character and the word `fat`.\n\n<pre>\n\"(T|t)he(?!\\sfat)\" => The fat cat sat on <a href=\"#learn-regex\"><strong>the</strong></a> mat.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/V32Npg/1)\n\n### 4.3 Positive Lookbehind\n\nPositive lookbehinds are used to get all the matches that are preceded by a\nspecific pattern. Positive lookbehinds are written `(?<=...)`. For example, the\nregular expression `(?<=(T|t)he\\s)(fat|mat)` means: get all `fat` or `mat` words\nfrom the input string that come after the word `The` or `the`.\n\n<pre>\n\"(?<=(T|t)he\\s)(fat|mat)\" => The <a href=\"#learn-regex\"><strong>fat</strong></a> cat sat on the <a href=\"#learn-regex\"><strong>mat</strong></a>.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/avH165/1)\n\n### 4.4 Negative Lookbehind\n\nNegative lookbehinds are used to get all the matches that are not preceded by a\nspecific pattern. Negative lookbehinds are written `(?<!...)`. For example, the\nregular expression `(?<!(T|t)he\\s)(cat)` means: get all `cat` words from the input\nstring that are not after the word `The` or `the`.\n\n<pre>\n\"(?&lt;!(T|t)he\\s)(cat)\" => The cat sat on <a href=\"#learn-regex\"><strong>cat</strong></a>.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/8Efx5G/1)\n\n## 5. Flags\n\nFlags are also called modifiers because they modify the output of a regular\nexpression. These flags can be used in any order or combination, and are an\nintegral part of the RegExp.\n\n|Flag|Description|\n|:----:|----|\n|i|Case insensitive: Match will be case-insensitive.|\n|g|Global Search: Match all instances, not just the first.|\n|m|Multiline: Anchor meta characters work on each line.|\n\n### 5.1 Case Insensitive\n\nThe `i` modifier is used to perform case-insensitive matching. For example, the\nregular expression `/The/gi` means: an uppercase `T`, followed by a lowercase\n`h`, followed by an `e`. And at the end of regular expression\nthe `i` flag tells the regular expression engine to ignore the case. As you can\nsee, we also provided `g` flag because we want to search for the pattern in the\nwhole input string.\n\n<pre>\n\"The\" => <a href=\"#learn-regex\"><strong>The</strong></a> fat cat sat on the mat.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/dpQyf9/1)\n\n<pre>\n\"/The/gi\" => <a href=\"#learn-regex\"><strong>The</strong></a> fat cat sat on <a href=\"#learn-regex\"><strong>the</strong></a> mat.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/ahfiuh/1)\n\n### 5.2 Global Search\n\nThe `g` modifier is used to perform a global match (finds all matches rather than\nstopping after the first match). For example, the regular expression`/.(at)/g`\nmeans: any character except a new line, followed by a lowercase `a`,\nfollowed by a lowercase `t`. Because we provided the `g` flag at the end of\nthe regular expression, it will now find all matches in the input string, not just the first one (which is the default behavior).\n\n<pre>\n\"/.(at)/\" => The <a href=\"#learn-regex\"><strong>fat</strong></a> cat sat on the mat.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/jnk6gM/1)\n\n<pre>\n\"/.(at)/g\" => The <a href=\"#learn-regex\"><strong>fat</strong></a> <a href=\"#learn-regex\"><strong>cat</strong></a> <a href=\"#learn-regex\"><strong>sat</strong></a> on the <a href=\"#learn-regex\"><strong>mat</strong></a>.\n</pre>\n\n[Test the regular expression](https://regex101.com/r/dO1nef/1)\n\n### 5.3 Multiline\n\nThe `m` modifier is used to perform a multi-line match. As we discussed earlier,\nanchors `(^, $)` are used to check if a pattern is at the beginning of the input or\nthe end. But if we want the anchors to work on each line, we use\nthe `m` flag. For example, the regular expression `/at(.)?$/gm` means: a lowercase\n`a`, followed by a lowercase `t` and, optionally, anything except\na new line. And because of the `m` flag, the regular expression engine now matches patterns\nat the end of each line in a string.\n\n<pre>\n\"/.at(.)?$/\" => The fat\n                cat sat\n                on the <a href=\"#learn-regex\"><strong>mat.</strong></a>\n</pre>\n\n[Test the regular expression](https://regex101.com/r/hoGMkP/1)\n\n<pre>\n\"/.at(.)?$/gm\" => The <a href=\"#learn-regex\"><strong>fat</strong></a>\n                  cat <a href=\"#learn-regex\"><strong>sat</strong></a>\n                  on the <a href=\"#learn-regex\"><strong>mat.</strong></a>\n</pre>\n\n[Test the regular expression](https://regex101.com/r/E88WE2/1)\n\n## 6. Greedy vs Lazy Matching\nBy default, a regex will perform a greedy match, which means the match will be as long as\npossible. We can use `?` to match in a lazy way, which means the match should be as short as possible.\n\n<pre>\n\"/(.*at)/\" => <a href=\"#learn-regex\"><strong>The fat cat sat on the mat</strong></a>. </pre>\n\n\n[Test the regular expression](https://regex101.com/r/AyAdgJ/1)\n\n<pre>\n\"/(.*?at)/\" => <a href=\"#learn-regex\"><strong>The fat</strong></a> cat sat on the mat. </pre>\n\n\n[Test the regular expression](https://regex101.com/r/AyAdgJ/2)\n\n\n## Contribution\n\n* Open a pull request with improvements\n* Discuss ideas in issues\n* Spread the word\n* Reach out with any feedback [![Twitter URL](https://img.shields.io/twitter/url/https/twitter.com/ziishaned.svg?style=social&label=Follow%20%40ziishaned)](https://twitter.com/ziishaned)\n\n## License\n\nMIT &copy; [Zeeshan Ahmad](https://twitter.com/ziishaned)\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "translations",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}