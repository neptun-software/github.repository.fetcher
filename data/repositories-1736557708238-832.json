{
  "metadata": {
    "timestamp": 1736557708238,
    "page": 832,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Advanced-Frontend/Daily-Interview-Question",
      "stars": 27438,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.13,
          "content": "*.md linguist-language=JavaScript\n*.js linguist-language=JavaScript\n*.css linguist-language=JavaScript\n*.html linguist-language=JavaScript"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01,
          "content": ".DS_Store\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.32,
          "content": "# Daily-Interview-Question\n\n加入「前端面试互助群」学习小组，搜索公众号「高级前端进阶」，关注即可加入！\n\n工作日每天一道大厂前端面试题，一年后再回头，会感谢曾经努力的自己！\n\n[线上版本阅读更流畅，点击阅读](https://muyiy.cn/question/)\n\n<br/>\n\n\n\n[推荐一个不错的前端算法系列，点击查看](https://github.com/sisterAn/JavaScript-Algorithms)\n\n<br/>\n\n\n\n推荐扫码使用微信小程序，除了本项目之外，还囊括了算法题、选择题等多种类型题目和详细解析\n\n记住我们的 Slogan：上下班路上刷一点，半年突击进大厂\n\n\n\n<img src=\"http://resource.muyiy.cn/image/20200106214930.jpg\" height=\"250px\">\n\n<br/>\n\n\n\n\n## 今日面试题\n\n第 162 题：实现对象的 Map 函数类似 Array.prototype.map\n\n解析：[第 162 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/431)\n\n<br/>\n\n\n\n\n## 最近汇总\n\n第 161 题：用最精炼的代码实现数组非零非负最小值 index \n\n```js\n// 例如：[10,21,0,-7,35,7,9,23,18] 输出 5, 7 最小\nfunction getIndex(arr){\n      let index=null;\n      ...\n      return index;\n}\n```\n\n\n解析：[第 161 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/421)\n\n<br/>\n\n\n\n第 160 题：输出以下代码运行结果，为什么？如果希望每隔 1s 输出一个结果，应该如何改造？注意不可改动 square 方法\n\n```js\nconst list = [1, 2, 3]\nconst square = num => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(num * num)\n    }, 1000)\n  })\n}\n\nfunction test() {\n  list.forEach(async x=> {\n    const res = await square(x)\n    console.log(res)\n  })\n}\ntest()\n```\n\n\n\n解析：[第 160 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/389)\n\n<br/>\n\n\n\n第 159 题：实现 `Promise.retry`，成功后 `resolve` 结果，失败后重试，尝试超过一定次数才真正的 `reject`\n\n\n\n解析：[第 159 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/387)\n\n<br/>\n\n\n\n第 158 题：如何模拟实现 Array.prototype.splice\n\n\n\n解析：[第 158 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/384)\n\n<br/>\n\n\n\n第 157 题：浏览器缓存 ETag 里的值是怎么生成的\n\n解析：[第 157 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/383)\n\n<br/>\n\n\n\n第 156 题：求最终 left、right 的宽度\n\n```js\n<div class=\"container\">\n    <div class=\"left\"></div>\n    <div class=\"right\"></div>\n</div>\n\n<style>\n  * {\n    padding: 0;\n    margin: 0;\n  }\n  .container {\n    width: 600px;\n    height: 300px;\n    display: flex;\n  }\n  .left {\n    flex: 1 2 300px;\n    background: red;\n  }\n  .right {\n    flex: 2 1 200px;\n    background: blue;\n  }\n</style>\n```\n\n注：此题和 155 题 left、right 样式有些不同\n\n\n\n解析：[第 156 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/382)\n\n<br/>\n\n\n\n第 155 题：求最终 left、right 的宽度\n\n```js\n<div class=\"container\">\n    <div class=\"left\"></div>\n    <div class=\"right\"></div>\n</div>\n\n<style>\n  * {\n    padding: 0;\n    margin: 0;\n  }\n  .container {\n    width: 600px;\n    height: 300px;\n    display: flex;\n  }\n  .left {\n    flex: 1 2 500px;\n    background: red;\n  }\n  .right {\n    flex: 2 1 400px;\n    background: blue;\n  }\n</style>\n```\n\n\n\n解析：[第 155 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/381)\n\n<br/>\n\n\n\n第 154 题：弹性盒子中 flex: 0 1 auto 表示什么意思\n\n解析：[第 154 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/380)\n\n<br/>\n\n\n\n第 153 题：实现一个批量请求函数 multiRequest(urls, maxNum)\n\n 要求如下：\n\n1. 要求最大并发数 maxNum\n\n2. 每当有一个请求返回，就留下一个空位，可以增加新的请求\n3. 所有请求完成后，结果按照 urls 里面的顺序依次打出\n\n\n\n解析：[第 153 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/378)\n\n<br/>\n\n\n\n2019-12-31\n\n> 第 152 题：实现一个 normalize 函数，能将输入的特定的字符串转化为特定的结构化数据\n\n\n\n解析：[第 152 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/331)\n\n<br/>\n\n\n\n\n2019-11-25\n\n> 第 151 题：用最简洁代码实现 indexOf 方法\n>\n\n\n\n解析：[第 151 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/321)\n\n<br/>\n\n\n2019-11-21\n\n> 第 150 题：二分查找如何定位左边界和右边界\n>\n> 不使用JS数组API，查找有序数列最先出现的位置和最后出现的位置\n\n\n\n解析：[第 150 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/320)\n\n<br/>\n\n\n\n2019-11-12\n\n> 第 149 题：babel 怎么把字符串解析成 AST，是怎么进行词法/语法分析的？\n\n解析：[第 149 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/315)\n\n<br/>\n\n\n\n2019-11-01\n\n> 第 148 题： webpack 中 loader 和 plugin 的区别是什么（平安）\n\n\n\n解析：[第 148 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/308)\n\n<br/>\n\n\n\n2019-10-31\n\n> 第 147 题：v-if、v-show、v-html 的原理是什么，它是如何封装的？\n\n\n\n解析：[第 147 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/307)\n\n<br/>\n\n\n\n2019-10-29\n\n> 第 146 题：Vue 中的 computed 和 watch 的区别在哪里（虾皮）\n\n\n\n解析：[第 146 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/304)\n\n<br/>\n\n\n\n2019-10-24\n\n> 第 145 题：前端项目如何找出性能瓶颈（阿里）\n\n\n\n解析：[第 145 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/300)\n\n<br/>\n\n\n\n2019-10-22\n\n> 第 144 题：手写二进制转 Base64（阿里）\n\n\n\n解析：[第 144 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/299)\n\n<br/>\n\n\n\n2019-10-21\n\n> 第 143 题：将 '10000000000' 形式的字符串，以每 3 位进行分隔展示 '10.000.000.000'\n\n\n\n解析：[第 143 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/296)\n\n<br/>\n\n\n\n2019-10-17\n\n> 第 142 题：（算法题）求多个数组之间的交集（阿里）\n\n\n\n解析：[第 142 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/293)\n\n<br/>\n\n\n\n2019-10-15\n\n> 第 141 题：Vue 中的 computed 是如何实现的（腾讯、平安）\n\n\n\n解析：[第 141 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/291)\n\n<br/>\n\n\n\n2019-10-14\n\n> 第 140 题：为什么 HTTP1.1 不能实现多路复用（腾讯）\n\n\n\n解析：[第 140 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/290)\n\n<br/>\n\n\n\n2019-09-17\n\n> 第 139 题：谈一谈 nextTick 的原理\n\n\n\n解析：[第 139 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/281)\n\n<br/>\n\n\n\n2019-09-11\n\n> 第 138 题：反转链表，每 k 个节点反转一次，不足 k 就保持原有顺序（哔哩哔哩）\n\n\n\n解析：[第 138 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/278)\n\n<br/>\n\n\n\n2019-09-04\n\n> 第 137 题：如何在 H5 和小程序项目中计算白屏时间和首屏时间，说说你的思路\n\n\n\n解析：[第 137 题](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/272)\n\n<br/>\n\n\n\n\n## 所有面试题汇总\n\n-   [壹题所有题目及答案汇总](https://github.com/Advanced-Frontend/Daily-Interview-Question/blob/master/datum/summary.md)\n\n<br/>\n\n\n\n## 半月刊\n\n- [前端 100 问：能搞懂 80% 的请把简历给我](https://github.com/yygmind/blog/issues/43)\n- [【半月刊 1】前端高频面试题及答案汇总](https://juejin.im/post/5c6977e46fb9a049fd1063dc)\n- [【半月刊 2】前端高频面试题及答案汇总](https://juejin.im/post/5c7bd72ef265da2de80f7f17)\n- [【半月刊 3】前端高频面试题及答案汇总](https://juejin.im/post/5c9ac3f66fb9a070e056718f)\n- [【半月刊 4】前端高频面试题及答案汇总](https://juejin.im/post/5cb3376bf265da039c0543da)\n\n<br/>\n\n\n\n## 联系我\n\n进阶系列文章汇总如下，觉得不错点个 star，欢迎 **加群** 互相学习。\n\n> [https://github.com/yygmind/blog](https://github.com/yygmind/blog)\n\n我是木易杨，公众号「高级前端进阶」作者，跟着我**每周重点攻克一个前端面试重难点**。接下来让我带你走进高级前端的世界，在进阶的路上，共勉！\n\n![image](http://resource.muyiy.cn/image/20200123162151.png)\n"
        },
        {
          "name": "datum",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}