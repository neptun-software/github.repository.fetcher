{
  "metadata": {
    "timestamp": 1736557313217,
    "page": 236,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NationalSecurityAgency/ghidra",
      "stars": 52917,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.23,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n\n# Explicitly declare text files you want to always be normalized and converted\n# to native line endings on checkout.\n*.bash text\n*.c text\n*.cc text\n*.command text\n*.cpp text\n*.cspec text\n*.css text\n*.gradle text\n*.groovy text\n*.h text\n*.hh text\n*.htm text\n*.html text\n*.java text\n*.jj text\n*.js text\n*.json text\n*.jsp text\n*.jspf text\n*.jspx text\n*.l text\n*.lang text\n*.ldefs text\n*.manifest text\n*.opinion text\n*.props text\n*.properties text\n*.proto text\n*.pspec text\n*.py text\n*.rxg text\n*.sh text\n*.sla text\n*.tag text\n*.tld text\n*.tool text\n*.trans text\n*.txt text\n*.xml text\n*.y text\n\n# Declare files that will always have CRLF line endings on checkout.\n*.bat text eol=crlf\n*.sln text eol=crlf\n*.vcproj text eol=crlf\n*.vcxproj text eol=crlf\n\n# Denote all files that are truly binary and should not be modified.\n*.a binary\n*.apk binary\n*.bmp binary\n*.class binary\n*.dll binary\n*.dmg binary\n*.ear binary\n*.exe binary\n*.gdt binary\n*.gif binary\n*.gz binary\n*.gzf binary\n*.ico binary\n*.ipsw binary\n*.jar binary\n*.jpeg binary\n*.jpg binary\n*.lib binary\n*.o binary\n*.obj binary\n*.pdf binary\n*.png binary\n*.sa binary\n*.so binary\n*.tar binary\n*.tgz binary\n*.war binary\n*.zip binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.03,
          "content": "excludedFiles.txt\nghidra.repos.config\n\n# Misc files produced while executing application\nrepositories/\ndependencies/\nflatRepo/\nGhidra/.ghidraSvrKeys\nwrapper.log*\n\nThumbs.db\n.DS_Store\n.svn\n\n/*/*/*/*/*/bin/\n/*/*/*/*/*/build/\n/*/*/*/*/bin/\n/*/*/*/*/build/\n/*/*/*/bin/\n/*/*/*/build/\n/*/*/bin/\n/*/*/build/\n/*/bin/\n/*/build/\n/build/\n/bin/\n\n**/dist\n\n# Ignore Sleigh generated files\n*.sla\n**/data/build.xml\n\n# Misc files\n*.setting\n*.settings\n*.directory\n.gradle/\n\n# File locks\n*.ulock\n*.lock\n\n# Ignore object files\n*.o\n*.obj\n*.class\n\n# Ignore MS Visual Studio artifcats\nRelease\n#Debug\n*.ncb\n*.suo\n*.aps\n*.vcproj.*\n*.vcxproj.*\n# dump files\n*.mdmp\n.vs/\n.editorconfig/\n\n# Ignore UNIX backup files\n*~\n*.swp\n\n# Ignore eclipse project files\n.project\n.classpath\n.settings/\n.prefs\n.pydevproject\n\n# Ignore XTEXT generated dirs/files\n*/*/*/*/xtend-gen\n*/*/*/*/src-gen\n*/*/*/*/model/generated\n*/*/*/*/test-bin\n\n# Ignore Intellij metadata\n**/*.iml\n**/.idea\n*.iml\n.idea\n\n# Ignore logs and core dumps\n*.log\ncore.*\n!core.png\n!core.py\n\n# python files\n*.egg-info\n__pycache__\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.03,
          "content": "# Contributors Guide\n\nGhidra is an open source project. If you are interested in making it better,\nthere are many ways you can contribute. For example, you can:\n\n- Submit a bug report\n- Suggest a new feature\n- Provide feedback by commenting on feature requests/proposals\n- Propose a patch by submitting a pull request\n- Suggest or submit documentation improvements\n- Review outstanding pull requests\n- Answer questions from other users\n- Share the software with other users who are interested\n- Teach others to use the software\n- Package and distribute the software in a downstream community (such as your\n  preferred Linux distribution)\n\n## Bugs and Feature Requests\n\nIf you believe that you have found a bug or wish to propose a new feature,\nplease first search the existing [issues] to see if it has already been\nreported. If you are unable to find an existing issue, consider using one of\nthe provided templates to create a new issue and provide as many details as you\ncan to assist in reproducing the bug or explaining your proposed feature.\n\n## Patch Submission tips\n\nPatches should be submitted in the form of Pull Requests to the Ghidra\n[repository] on GitHub. But first, consider the following tips to ensure a\nsmooth process when submitting a patch:\n\n- Ensure that the patch compiles and does not break any build-time tests.\n- Be understanding, patient, and friendly; developers may need time to review\n  your submissions before they can take action or respond. This does not mean\n  your contribution is not valued. If your contribution has not received a\n  response in a reasonable time, consider commenting with a polite inquiry for\n  an update.\n- Limit your patches to the smallest reasonable change to achieve your intended\n  goal. For example, do not make unnecessary indentation changes; but don't go\n  out of your way to make the patch so minimal that it isn't easy to read,\n  either. Consider the reviewer's perspective.\n- Unless previously authorized by the Ghidra team, repackaging, renaming, and \n  other refactoring should not be part of any pull request. These types of \n  changes are difficult to review, pollute the git history making it harder \n  to do git forensics on regressions, and will likely conflict with other \n  changes that the Ghidra team is making internally.\n- Avoid \"find and replace\" changes in your pull request.  While it may be \n  tempting to globally replace calls to deprecated methods or change the style\n  of the code to fit your personal preference, these types of seemingly trivial\n  changes have likely not already been performed by the Ghidra team for good \n  reason.\n- Focus your patches on bug fixes that were discovered through real-world\n  usage and testing, and on improvements that clearly satisfy a need in \n  Ghidra's functionality.  Before you begin implementing, consider first\n  opening a dialogue with the Ghidra team to ensure that your efforts will \n  align with the goals of the project.  This will significantly improve the odds\n  that your patch gets accepted.\n- Unless it addresses a critical security update, avoid pull requests that update \n  jars or other 3rd party libraries.  It is preferred that these changes are made\n  internally by the team.  If you have a need for an updated library, please\n  submit an issue with your request instead of a pull request.\n- Before submission, please squash your commits to using a message that starts\n  with the issue number and a description of the changes.\n- Isolate multiple patches from each other. If you wish to make several\n  independent patches, do so in separate, smaller pull requests that can be\n  reviewed more easily.\n- Be prepared to answer questions from reviewers. They may have further\n  questions before accepting your patch, and may even propose changes. Please\n  accept this feedback constructively, and not as a rejection of your proposed\n  change.\n\n## Review\n\n- We welcome code reviews from anyone. A committer is required to formally\n  accept and merge the changes.\n- Reviewers will be looking for things like threading issues, performance\n  implications, API design, duplication of existing functionality, readability\n  and code style, avoidance of bloat (scope-creep), etc.\n- Reviewers will likely ask questions to better understand your change.\n- Reviewers will make comments about changes to your patch:\n    - MUST means that the change is required\n    - SHOULD means that the change is suggested, further discussion on the\n      subject may be required\n    - COULD means that the change is optional\n\n## Getting Started\n\nOnce available, please see the [developer's guide][devguide] for instructions to set up a suitable development environment.\n\n## Timeline and Managing Expectations\n\nAs we continue to engage contributors and learn best practices for running a successful open source project, our processes \nand guidance will likely evolve. We will try to communicate expectations as we are able and to always be responsive. We \nhope that the community will share their suggestions for improving this engagement.  Based on the level of initial interest \nwe receive and the availability of resources to evaluate contributions, we anticipate the following:\n\n- We will initially prioritize pull requests that include small bug fixes and code that addresses potential vulnerabilities   \n  as well as pull requests that include improvements for processor language specifications because these require a \n  reasonable amount of effort to evaluate and will help us exercise and revise our process for accepting contributions.  In \n  other words, we are going to start small in order to work out the kinks first.\n- We are committed to maintaining the integrity and security of our code base.  In addition to the careful review the \n  maintainers will give to code contributions to make sure they do not introduce new bugs or vulnerabilities, we will be \n  trying to identify best practices to incorporate with our open source project so that contributors can have more control \n  over whether their contributions are accepted. These might include things like style guides and requirements for tests and \n  documentation to accompany some code contributions.  As a result, it may take a long time for some contributions to be \n  accepted.  This does not mean we are ignoring them.\n- We are committed to integrating this GitHub project with our team's regular development work flow so that the open source \n  project remains dynamic and relevant.  This may  affect our responsiveness and ability to accept pull requests \n  quickly.  This does not mean we are ignoring them.\n- Not all innovative ideas need to be accepted as pull requests into this GitHub project to be valuable to the community.        \n  There may be times when we recommend that you just share your code for some enhancement to Ghidra from your own \n  repository. As we identify and recognize extensions that are of general interest to the reverse engineering community, we \n  may seek to incorporate them with our baseline.\n\n## Legal\n\nConsistent with Section D.6. of the GitHub Terms of Service as of 2019, and Section 5. of the Apache License, Version 2.0, the project maintainer for this project accepts contributions using the inbound=outbound model.\nWhen you submit a pull request to this repository (inbound), you are agreeing to license your contribution under the same terms as specified in [LICENSE] (outbound).\n\nThis is an open source project.\nContributions you make to this public U.S. Government (\"USG\") repository are completely voluntary.\nWhen you submit an issue, bug report, question, enhancement, pull request, etc., you are offering your contribution without expectation of payment, you expressly waive any future pay claims against the USG related to your contribution, and you acknowledge that this does not create an obligation on the part of the USG of any kind.\nFurthermore, your contributing to this project does not create an employer-employee relationship between the United States (\"U.S.\") Government and the contributor.\n\n[issues]: https://github.com/NationalSecurityAgency/ghidra/issues\n[repository]: https://github.com/NationalSecurityAgency/ghidra/\n[devguide]: DevGuide.md\n[LICENSE]: LICENSE\n"
        },
        {
          "name": "DISCLAIMER.md",
          "type": "blob",
          "size": 1.75,
          "content": "# Disclaimer of Warranty\n\nThis Work is provided \"AS IS.\"\nAny express or implied warranties, including but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed.\nIn no event shall the United States Government be liable for any direct, indirect, incidental, special, exemplary or consequential damages (including, but not limited to, procurement of substitute goods or services, loss of use, data or profits, or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this Work, even if advised of the possibility of such damage.\n\nThe User of this Work agrees to hold harmless and indemnify the United States Government, its agents and employees from every claim or liability (whether in tort or in contract), including attorney's fees, court costs, and expenses, arising in direct consequence of Recipient's use of the item, including, but not limited to, claims or liabilities made for injury to or death of personnel of User or third parties, damage to or destruction of property of User or third parties, and infringement or other violations of intellectual property or technical data rights.\n\n# Disclaimer of Endorsement\n\nNothing in this Work is intended to constitute an endorsement, explicit or implied, by the United States Government of any particular manufacturer's product or service.\n\nReference herein to any specific commercial product, process, or service by trade name, trademark, manufacturer, or otherwise, in this Work does not constitute an endorsement, recommendation, or favoring by the United States Government and shall not be used for advertising or product endorsement purposes.\n"
        },
        {
          "name": "DevGuide.md",
          "type": "blob",
          "size": 18.32,
          "content": "# Developer's Guide\n\n## Environment\n* Primary Language: [Java][java]\n* Secondary Languages: [C++][cpp], [Sleigh][sleigh], [Python 3][python] [Jython 2.7][jython]\n* Integrated Development Environment: [Eclipse][eclipse]\n* Build System: [Gradle][gradle]\n* Source Control: [Git][git]\n\nFor specific information on required versions and download links please see the \n[README.md](README.md) file.\n\n## Quickstart\nFollow the [Advanced Development](README.md#advanced-development) instructions in the [\nREADME.md](README.md) file to get your development environment setup quickly. \n\n## Licensing and Copyright\n* Primary License: [Apache License 2.0][apache]\n* Secondary Licenses: [See licenses directory](licenses)\n\nIf possible please try to stick to the [Apache License 2.0][apache]\nlicense when developing for Ghidra.  At times it may be necessary to incorporate other compatible \nlicenses into Ghidra.  Any GPL code must live in the top-level `GPL/` directory as a totally \nstandalone, independently buildable Ghidra module.\n\nIf you are contributing code to the Ghidra project, the preferred way to receive credit/recognition \nis Git commit authorship.  Please ensure your Git credentials are properly linked to your GitHub \naccount so you appear as a Ghidra contributor on GitHub.  We do not have a standard for putting \nauthors' names directly in the source code, so it is discouraged.\n\n## Common Gradle Tasks\nDownload non-Maven Central dependencies.  This creates a `dependencies` directory in the repository\nroot.\n```\ngradle -I gradle/support/fetchDependencies.gradle\n```\n\nDownload Maven Central dependencies and setup the repository for development.  By default, these \nwill be stored at `$HOME/.gradle/`.\n```\ngradle prepdev\n```\n\nGenerate nested Eclipse project files which can then be imported into Eclipse as \"existing \nprojects\".\n```\ngradle cleanEclipse eclipse\n```\n\nBuild native components for your current platform.  Requires native tool chains to be present.\n```\ngradle buildNatives\n```\n\nManually compile sleigh files. Ghidra will also do this at runtime when necessary.\n```\ngradle sleighCompile\n```\n\nBuild Javadoc:\n```\ngradle createJavadocs\n```\n\nBuild Python3 packages for PyGhidra and the Debugger:\n```\ngradle buildPyPackage\n```\n\nBuild Ghidra to `build/dist` in an uncompressed form.  This will be a distribution intended only to \nrun on the platform on which it was built.\n```\ngradle assembleAll\n```\n\nBuild Ghidra to `build/dist` in a compressed form.  This will be a distribution intended only to run\non the platform on which it was built.\n```\ngradle buildGhidra\n```\n\n**Tip:**  You may want to skip certain Gradle tasks to speed up your build, or to deal with\na problem later.  For example, perhaps you added some new source files and the build is failing \nbecause of unresolved IP header issues.  You can use the Gradle `-x <task>` command line argument to\nprevent specific tasks from running:\n```\ngradle buildGhidra -x ip\n```\n\n## PyGhidra Development\nThe supported way to develop and debug PyGhidra is with the _[PyDev][pydev]_ plugin for Eclipse.\nWhen PyDev is installed and configured, several new Eclipse run configurations will appear that\nenable running and debugging PyGhidra from both _GUI_ and _Interpreter_ modes.\n\nTo prepare PyGhidra for development and/or debugging, first execute the following gradle task:\n```\ngradle prepPyGhidra\n```\nThis sets up a Python virtual environment at `build/venv/`, and installs an editable PyGhidra\nmodule (and its dependencies) into it. PyDev should be pointed at this virtual environment so it has\naccess to the editable PyGhidra module, as well as the typing/stub information. From Eclipse \n(with PyDev installed):\n\n1. _Settings -> PyDev -> Interpreters -> Python Interpreter_\n2. Click _New..._\n3. Click _Browse for python/pypy exe_\n4. Choose `build/venv/bin/python3`\n5. Enter a value for _Interpreter Name_\n6. Check _Select All_ and press _OK_\n7. Click the _Prefined_ tab, and then _New..._\n8. Choose `build/typestubs/pypredef`\n9. Click _Apply and Close_\n\n## GhidraDev Eclipse Plugin Development\nDeveloping the GhidraDev Eclipse plugin requires the \n_Eclipse PDE (Plug-in Development Environment)_, which can be installed via the Eclipse marketplace.\nIt is also included in the _Eclipse IDE for RCP and RAP Developers_. To generate the GhidraDev \nEclipse projects and prepare the necessary dependencies, execute:\n\n```\ngradle prepGhidraDev eclipse -PeclipsePDE\n```\n\nImport the newly generated GhidraDev projects into an Eclipse that supports this type of project. \n\n__Note:__ If you are getting compilation errors related to PyDev and CDT, go into Eclipse's \npreferences, and under _Target Platform_, activate _/Eclipse GhidraDevPlugin/GhidraDev.target_.\n\nSee [Building GhidraDev](GhidraBuild/EclipsePlugins/GhidraDev/GhidraDevPlugin/README.md#building)\nfor instructions on how to build the GhidraDev plugin.\n\n## Offline Development Environment\nSometimes you may want to move the Ghidra repository to an offline network and do development there.\nThese are the recommended steps to ensure that you not only move the source repository, but all \ndownloaded dependencies as well:\n\n1. `gradle -I gradle/support/fetchDependencies.gradle`\n2. `gradle -g dependencies/gradle prepdev`\n3. Move ghidra directory to different system\n4. `gradle -g dependencies/gradle buildGhidra` (on offline system)\n\n**NOTE**: The `-g` flag specifies the Gradle user home directory. The default is the `.gradle`\ndirectory in the user’s home directory.  Overriding it to be inside the Ghidra repository will\nensure that all maven central dependencies that were fetched during the `prepdev` task will be moved\nalong with the rest of the repo.\n\n## Running tests\nTo run unit tests, do:\n```\ngradle unitTestReport\n```\n\nFor more complex integration tests, do:\n```\ngradle integrationTest\n```\n\nFor running both unit and integration tests and to generate a report do:\n```\ngradle combinedTestReport\n```\n\n## Setup build in CI\n\nFor running tests in headless mode on Linux, in a CI environment, or in Docker, first do:\n```\nXvfb :99 -nolisten tcp &\nexport DISPLAY=:99\n```\nThis is required to make AWT happy.\n\n## Building Supporting Data\n\nSome features of Ghidra require the curation of rather extensive databases. These include the Data \nType Archives and Function ID Databases, both of which require collecting header files and libraries\nfor the relevant SDKs and platforms. Much of this work is done by hand. The archives included in our\nofficial builds can be found in the [ghidra-data] repository.\n\n### Building Data Type Archives\n\nThis task is often done manually from the Ghidra GUI, and the archives included in our official \nbuild require a fair bit of fine tuning.\n1. From the CodeBrowser, select __File -> Parse C Source__\n2. From here you can create and configure\nparsing profiles, which lists headers and pre-processor options.\n3. Click _Parse to File_ to create the Data Type Archive.\n4. The result can be added to an installation or source tree by copying it to \n`Ghidra/Features/Base/data/typeinfo`.\n\n### Building FID Databases\n\nThis task is often done manually from the Ghidra GUI, and the archives included in our official \nbuild require a fair bit of fine tuning. You will first need to import the relevant libraries from \nwhich you'd like to produce a FID database. This is often a set of libraries from an SDK. We include\na variety of Visual Studio platforms in the official build. The official .fidb files can be found in\nthe [ghidra-data][ghidra-data] repository.\n\n1. From the CodeBrowser, select __File -> Configure__\n2. Enable the \"Function ID\" plugins, and close the dialog.\n3. From the CodeBrowser, select __Tools -> Function ID -> Create new empty FidDb__.\n4. Choose a destination file.\n5. Select __Tools -> Function ID -> Populate FidDb__ from programs.\n6. Fill out the options appropriately and click OK.\n\nIf you'd like some details of our fine tuning, take a look at [building_fid.txt](Ghidra/Features/FunctionID/data/building_fid.txt).\n\n## Debugger Development\n\nWe have recently changed the Debugger's back-end architecture.\nWe no longer use JNA to access native Debugger APIs.\nWe only use it for pseudo-terminal access.\nInstead, we use Python3 and a protobuf-based TCP connection for back-end integration.\n\n### Additional Dependencies\n\nIn addition to Ghidra's normal dependencies, you may want the following:\n\n * WinDbg for Windows x64\n * GDB 13 or later for Linux\n * LLDB 10 or later for macOS\n\nThe others (e.g., JNA) are handled by Gradle via Maven Central.\n\n### Architecture Overview\n\nThere are several Eclipse projects each fitting into a larger architectural picture.\nThese all currently reside in the `Ghidra/Debug` directory, but will likely be re-factored into the\n`Framework` and `Feature` directories later. Each project is listed \"bottom up\" with a brief \ndescription and status.\n\n * ProposedUtils - a collection of utilities proposed to be moved to other respective projects.\n * AnnotationValidator - an experimental annotation processor for database access objects.\n * Framework-TraceModeling - a database schema and set of interfaces for storing machine state over\n time.\n * Framework-AsyncComm - a collection of utilities for asynchronous communication (packet formats\n and completable-future conveniences).\n * Debugger-api - the interfaces for interacting with the Debugger UI.\n * Debugger - the collection of Ghidra plugins and services comprising the Debugger UI implementation.\n * Debugger-isf - A service providing access to Ghidra's DataTypes via ISF.\n * Debugger-rmi-trace - the wire protocol, client, services, and UI components for Trace RMI, the new back-end architecture.\n * Debugger-agent-dbgeng - the connector for WinDbg (via dbgeng.dll and dbgmodel.dll) on Windows x64.\n * Debugger-agent-gdb - the connector for GDB (13 or later recommended) on UNIX and Windows.\n * Debugger-agent-lldb - the connector for LLDB (10 or later recommended) on macOS, UNIX, and Windows.\n * Debugger-jpda - an in-development connector for Java and Dalvik debugging via JDI (i.e., JDWP). This is deprecated and not yet replaced.\n\nThe Trace Modeling schema records machine state and markup over time.\nIt rests on the same database framework as Programs, allowing trace recordings to be stored in a Ghidra project and shared via a server, if desired.\nTrace \"recording\" is a de facto requirement for displaying information in Ghidra's UI.\nThe back-end connector has full discretion over what is recorded by using Trace RMI.\nTypically, only the machine state actually observed by the user (or perhaps a script) is recorded.\nFor most use cases, the Trace is small and ephemeral, serving only to mediate between the UI components and the target's model.\nIt supports many of the same markup (e.g., disassembly, data types) as Programs, in addition to tracking active threads, loaded modules, breakpoints, etc.\n\nEvery back end (or \"adapter\" or \"connector\" or \"agent\") employs the Trace RMI client to populate a trace database.\nAs a general rule in Ghidra, no component is allowed to access a native API and reside in the same JVM as the Ghidra UI.\nThis allows us to contain crashes, preventing data loss.\nTo accommodate this requirement &mdash; given that debugging native applications is almost certainly going to require access to native APIs &mdash; we've developed the Trace RMI protocol.\nThis also allows us to better bridge the language gap between Java and Python, which is supported by most native debuggers.\nThis protocol is loosely coupled to Framework-TraceModeling, essentially exposing its methods via RMI, as well as some methods for controlling the UI.\nThe protocol is built using Google's Protobuf library, providing a potential path for back-end implementations in alternative languages.\nWe provide the Trace RMI server as a Ghidra component implemented in Java and the Trace RMI client as a Python3 package.\nThe client is also available in Java, but it depends heavily on Ghidra's code base.\nA back-end implementation may be a stand-alone executable or script that accesses the native debugger's API, or a script or plugin for the native debugger.\nIt then connects to Ghidra via Trace RMI to populate the trace database with information gleaned from that API.\nIt should provide a set of diagnostic commands to control and monitor that connection.\nIt should also use the native API to detect session and target changes so that Ghidra's UI consistently reflects the debugging session.\nIt is the back-end's responsibility to discover targets in the session and map them to traces in the proper Ghidra language.\nTypically, it examines the target's architecture and immediately creates a trace upon connection.\n\n### Developing a new connector\n\nSo Ghidra does not yet support your favorite debugger?\nWe believe the new system is much less daunting than the previous.\nStill, please finish reading this guide, and look carefully at the ones we have so far, and perhaps ask to see if we are already developing one.\nOf course, in time you might also search the internet to see if others are developing one.\nThere are quite a few caveats and gotchas, the most notable being that this interface is still in some flux.\nWhen things go wrong, it could be because of, without limitation:\n\n1. A bug on your part\n2. A bug on our part\n3. A design flaw in the interfaces\n4. A bug in the debugger/API you're adapting\n\nWe are still (yes, still) in the process of writing up this documentation.\nIn the meantime, we recommend using the GDB and dbgeng agents as examples.\nBe sure to look at the Python code `src/main/py`!\nThis is not so readily presented by Eclipse.\n\nYou'll also need to provide launcher(s) so that Ghidra knows how to configure and start your connector.\nThese are just shell scripts.\nWe use bash scripts on Linux and macOS, and we use batch files on Windows.\nThe ideal goal for a launcher is (after one-time configuration) the user can launch and begin debugging with a single click.\nTry to include as many common use cases as makes sense for the debugger.\nThis provides the most flexibility to users and examples to power users who might create derivative launchers.\nLook at the existing launchers for examples.\n\nFor testing, please follow the examples for GDB.\nWe no longer provide abstract classes that prescribe requirements.\nInstead, we just provide GDB as an example or template.\nUsually, we split our tests into three categories:\n\n * Commands\n * Methods\n * Hooks\n\nThe Commands tests check that the user CLI commands, conventionally implemented in `commands.py`, work correctly.\nIn general, do the minimum connection setup, execute the command, and check that it produces the expected output and causes the expected effects.\n\nThe Methods tests check that the remote methods, conventionally implemented in `methods.py`, work correctly.\nMany methods are just wrappers around CLI commands, some provided by the native debugger and some provided by `commands.py`.\nThese work similarly to the commands test, except that they invoke methods instead of executing commands.\nCheck the return value (rarely applicable) and that it causes the expected effects.\n\nThe Hooks tests check that the back end is able to listen for session and target changes, e.g., knowing when the target stops.\n*The test should not \"cheat\" by executing commands or invoking methods that should instead be triggered by the hook.*\nIt should execute the minimal commands to setup the test, then trigger an event.\nIt should then check that the event in turn triggered the expected effects, e.g., updating PC upon the target stopping.\n\nWhenever you make a change to the Python code, you'll need to re-assemble the package's source.\n\n```\ngradle assemblePyPackage\n```\n\nThis is required in case your package includes generated source, as is the case for Debugger-rmi-trace.\nIf you want to create a new Ghidra module for your connector (recommended) use an existing one's `build.gradle` as a template.\nA key part is applying the `hasPythonPackage.gradle` script.\n\n### Adding a new platform\n\nIf a connector already exists for a suitable debugger on the desired platform, then adding it may be very simple.\nFor example, many platforms are supported by GDB, so even though we're currently focused on x86-64 (and to some extent arm64) support, we've provided the mappings for many.\nThese mappings are conventionally kept in each connector's `arch.py` file.\n\nIn general, to update `arch.py`, you need to know:\n\n1. What the platform is called (including variant names) by the debugger\n2. What the processor language is called by Ghidra\n3. If applicable, the mapping of target address spaces into Ghidra's address spaces\n4. If applicable, the mapping of target register names to those in Ghidra's processor language\n\nIn most cases (3) and (4) are already implemented by the included mappers.\nNaturally, you'll want to test the special cases, preferably in automated tests.\n\n### Emulation\n\nThe most obvious integration path for 3rd-party emulators is to write a \"connector.\"\nHowever, p-code emulation is an integral feature of the Ghidra UI, and it has a fairly accessible API.\nNamely, for interpolation between machines states recorded in a trace, and extrapolation into future machine states.\nIntegration of such emulators may still be useful to you, but we recommend trying the p-code emulator to see if it suits your needs for emulation in Ghidra before pursuing integration of another emulator.\nWe also provide out-of-the-box QEMU integration via GDB.\n\n### Contributing\n\nWhen submitting help tickets and pull requests, please tag those related to the debugger with \"Debugger\" so that we can triage them more quickly.\n\n## Known Issues\n* There is a known issue in Gradle that can prevent it from discovering native toolchains on Linux \n  if a non-English system locale is being used. As a workaround, set the following environment \n  variable prior to running your Gradle task: `LC_MESSAGES=en_US.UTF-8`\n* If the Ghidra build is only finding versions of Python that do not have access to `pip`, it may\n  be necessary to perform the build from a Python [virtual environment][venv].\n\n[java]: https://dev.java\n[cpp]: https://isocpp.org\n[sleigh]: https://htmlpreview.github.io/?https://github.com/NationalSecurityAgency/ghidra/blob/master/GhidraDocs/languages/index.html\n[python]: https://www.python.org\n[venv]: https://docs.python.org/3/tutorial/venv.html\n[jython]: https://www.jython.org\n[eclipse]: https://www.eclipse.org/downloads/\n[pydev]: https://www.pydev.org\n[gradle]: https://gradle.org\n[git]: https://git-scm.com\n[apache]: https://www.apache.org/licenses/LICENSE-2.0\n[fork]: https://docs.github.com/en/get-started/quickstart/fork-a-repo\n[ghidra-data]: https://github.com/NationalSecurityAgency/ghidra-data\n[DbgGuide]: DebuggerDevGuide.md\n"
        },
        {
          "name": "GPL",
          "type": "tree",
          "content": null
        },
        {
          "name": "Ghidra",
          "type": "tree",
          "content": null
        },
        {
          "name": "GhidraBuild",
          "type": "tree",
          "content": null
        },
        {
          "name": "GhidraDocs",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.09,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 2.23,
          "content": "Ghidra\n\nThis product includes software developed at National Security Agency\n(https://www.nsa.gov)\n\nPortions of this product were created by the U.S. Government and not subject to\nU.S. copyright protections under 17 U.S.C.\n\nThe remaining portions are copyright their respective authors and have been\ncontributed under the terms of one or more open source licenses, and made\navailable to you under the terms of those licenses. (See LICENSE)\n\n\n\nLicensing Intent\n\nThe intent is that this software and documentation (\"Project\") should be treated\nas if it is licensed under the license associated with the Project (\"License\")\nin the LICENSE file. However, because we are part of the United States (U.S.)\nFederal Government, it is not that simple.\n\nThe portions of this Project written by U.S. Federal Government employees within\nthe scope of their federal employment are ineligible for copyright protection in\nthe U.S.; this is generally understood to mean that these portions of the\nProject are placed in the public domain.\n\nIn countries where copyright protection is available (which does not include the\nU.S.), contributions made by U.S. Federal Government employees are released\nunder the License. Merged contributions from private contributors are released\nunder the License.\n\nThe Ghidra software is released under the Apache License, Version 2.0\n(\"Apache 2.0\").\n\nIn addition, each module may contain numerous 3rd party components (libraries,\nicons, etc.) that each have their own license which is compatible with Apache\n2.0. Each module has a LICENSE.txt file that lists each license used in that\nmodule and the 3rd party files that fall under that license. The license files\nfor each license used by Ghidra can be found in the licenses directory at the\ninstallation root.\n\nAlso, in the GPL directory, there are several stand-alone support programs that\nare released using the GPL 3 license.  Ghidra executes these programs as needed\nand parses the output to get the desired results. There is a licenses directory\nunder the GPL directory that has the GPL license files.\n\nConsistent with the inbound=outbound model, contributions to any module must be\nmade available, by the contributor, under the applicable license(s). Please read\nthe Legal section of the CONTRIBUTING.md guide.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.65,
          "content": "<img src=\"Ghidra/Features/Base/src/main/resources/images/GHIDRA_3.png\" width=\"400\">\n\n# Ghidra Software Reverse Engineering Framework\nGhidra is a software reverse engineering (SRE) framework created and maintained by the \n[National Security Agency][nsa] Research Directorate. This framework includes a suite of \nfull-featured, high-end software analysis tools that enable users to analyze compiled code on a \nvariety of platforms including Windows, macOS, and Linux. Capabilities include disassembly, \nassembly, decompilation, graphing, and scripting, along with hundreds of other features. Ghidra \nsupports a wide variety of processor instruction sets and executable formats and can be run in both \nuser-interactive and automated modes. Users may also develop their own Ghidra extension components \nand/or scripts using Java or Python.\n\nIn support of NSA's Cybersecurity mission, Ghidra was built to solve scaling and teaming problems \non complex SRE efforts, and to provide a customizable and extensible SRE research platform. NSA has \napplied Ghidra SRE capabilities to a variety of problems that involve analyzing malicious code and \ngenerating deep insights for SRE analysts who seek a better understanding of potential \nvulnerabilities in networks and systems.\n\nIf you are a U.S. citizen interested in projects like this, to develop Ghidra and other \ncybersecurity tools for NSA to help protect our nation and its allies, consider applying for a \n[career with us][career].\n\n## Security Warning\n**WARNING:** There are known security vulnerabilities within certain versions of Ghidra.  Before \nproceeding, please read through Ghidra's [Security Advisories][security] for a better understanding \nof how you might be impacted.\n\n## Install\nTo install an official pre-built multi-platform Ghidra release:  \n* Install [JDK 21 64-bit][jdk]\n* Download a Ghidra [release file][releases]\n  - **NOTE:** The official multi-platform release file is named \n    `ghidra_<version>_<release>_<date>.zip` which can be found under the \"Assets\" drop-down.\n    Downloading either of the files named \"Source Code\" is not correct for this step.\n* Extract the Ghidra release file\n* Launch Ghidra: `./ghidraRun` (`ghidraRun.bat` for Windows)\n  - or launch [PyGhidra][pyghidra]: `./support/pyGhidraRun` (`support\\pyGhidraRun.bat` for Windows)\n\nFor additional information and troubleshooting tips about installing and running a Ghidra release, \nplease refer to the [Installation Guide][installationguide] which can be found in a Ghidra release\nat `docs/InstallationGuide.html`. \n\n## Build\nTo create the latest development build for your platform from this source repository:\n\n##### Install build tools:\n* [JDK 21 64-bit][jdk]\n* [Gradle 8.5+][gradle] (or provided Gradle wrapper if Internet connection is available)\n* [Python3][python3] (version 3.9 to 3.13) with bundled pip\n* make, gcc, and g++ (Linux/macOS-only)\n* [Microsoft Visual Studio][vs] 2017+ or [Microsoft C++ Build Tools][vcbuildtools] with the\n  following components installed (Windows-only):\n  - MSVC\n  - Windows SDK\n  - C++ ATL\n\n##### Download and extract the source:\n[Download from GitHub][master]\n```\nunzip ghidra-master\ncd ghidra-master\n```\n**NOTE:** Instead of downloading the compressed source, you may instead want to clone the GitHub \nrepository: `git clone https://github.com/NationalSecurityAgency/ghidra.git`\n\n##### Download additional build dependencies into source repository:\n**NOTE:** If an Internet connection is available and you did not install Gradle, the following \n`gradle` commands may be replaced with `./gradle(.bat)`.\n```\ngradle -I gradle/support/fetchDependencies.gradle\n```\n\n##### Create development build: \n```\ngradle buildGhidra\n```\nThe compressed development build will be located at `build/dist/`.\n\nFor more detailed information on building Ghidra, please read the [Developer Guide][devguide].\n\nFor issues building, please check the [Known Issues][known-issues] section for possible solutions.\n\n## Develop\n\n### User Scripts and Extensions\nGhidra installations support users writing custom scripts and extensions via the *GhidraDev* plugin \nfor Eclipse.  The plugin and its corresponding instructions can be found within a Ghidra release at\n`Extensions/Eclipse/GhidraDev/` or at [this link][ghidradev].  Alternatively, Visual Studio Code may\nbe used to edit scripts by clicking the Visual Studio Code icon in the Script Manager.\nFully-featured Visual Studio Code projects can be created from a Ghidra CodeBrowser window at \n_Tools -> Create VSCode Module project_.\n\n**NOTE:** Both the *GhidraDev* plugin for Eclipse and Visual Studio Code integrations only support \ndeveloping against fully built Ghidra installations which can be downloaded from the\n[Releases][releases] page.\n\n### Advanced Development\nTo develop the Ghidra tool itself, it is highly recommended to use Eclipse, which the Ghidra \ndevelopment process has been highly customized for.\n\n##### Install build and development tools:\n* Follow the above [build instructions](#build) so the build completes without errors\n* Install [Eclipse IDE for Java Developers][eclipse]\n\n##### Prepare the development environment:\n``` \ngradle prepdev eclipse buildNatives\n```\n\n##### Import Ghidra projects into Eclipse:\n* *File* -> *Import...*\n* *General* | *Existing Projects into Workspace*\n* Select root directory to be your downloaded or cloned ghidra source repository\n* Check *Search for nested projects*\n* Click *Finish*\n\nWhen Eclipse finishes building the projects, Ghidra can be launched and debugged with the provided\n**Ghidra** Eclipse *run configuration*.\n\nFor more detailed information on developing Ghidra, please read the [Developer Guide][devguide].\n\n## Contribute\nIf you would like to contribute bug fixes, improvements, and new features back to Ghidra, please \ntake a look at our [Contributor Guide][contrib] to see how you can participate in this open \nsource project.\n\n\n[nsa]: https://www.nsa.gov\n[contrib]: CONTRIBUTING.md\n[devguide]: DevGuide.md\n[installationguide]: GhidraDocs/InstallationGuide.md\n[known-issues]: DevGuide.md#known-issues\n[career]: https://www.intelligencecareers.gov/nsa\n[releases]: https://github.com/NationalSecurityAgency/ghidra/releases\n[jdk]: https://adoptium.net/temurin/releases\n[gradle]: https://gradle.org/releases/\n[python3]: https://www.python.org/downloads/\n[vs]: https://visualstudio.microsoft.com/vs/community/\n[vcbuildtools]: https://visualstudio.microsoft.com/visual-cpp-build-tools/\n[eclipse]: https://www.eclipse.org/downloads/packages/\n[master]: https://github.com/NationalSecurityAgency/ghidra/archive/refs/heads/master.zip\n[security]: https://github.com/NationalSecurityAgency/ghidra/security/advisories\n[ghidradev]: GhidraBuild/EclipsePlugins/GhidraDev/GhidraDevPlugin/README.md\n[pyghidra]: Ghidra/Features/PyGhidra/README.md\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 14.87,
          "content": "/* ###\n * IP: GHIDRA\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\napply plugin: 'eclipse'\n\napply from: 'gradle/root/eclipse.gradle'\napply from: \"gradle/support/eclipseLauncher.gradle\"\napply from: \"gradle/support/loadApplicationProperties.gradle\"\n\n\n/***************************************************************************************\n* Print current Java and Gradle version and make sure the correct version of gradle is being used\n***************************************************************************************/\nimport org.gradle.util.GradleVersion;\nprintln \"Java: \" + JavaVersion.current()\nprintln \"Gradle: \" + GradleVersion.current().version\ncheckGradleVersion()\n\n/***************************************************************************************\n * Define the location of JAVA_HOME\n ***************************************************************************************/\nif (System.env.JAVA_HOME) {\n\t// Allow Gradle's default JAVA_HOME to be overridden by an environment variable we set\n\tproject.ext.JAVA_HOME = System.env.JAVA_HOME;\n}\nelse {\n\tproject.ext.JAVA_HOME = \"${System.properties.'java.home'}\"\n}\n\n/***************************************************************************************\n * Make sure Gradle wasn't launched with a 32-bit Java...it can cause confusing errors\n ***************************************************************************************/\nif (\"32\".equals(System.getProperty(\"sun.arch.data.model\"))) {\n\tthrow new GradleException(\"\\n\\n\\t32-bit Java detected!  Please use 64-bit Java.\\n\\n\");\n}\n\n/***************************************************************************************\n * Identify supported Python command\n ***************************************************************************************/\nproject.ext.PYTHON3 = findPython3(true)\nproject.ext.PYTHON_DEPS = new HashSet<String>()\n\n/*********************************************************************************\n *  Define the location of bin repo\n *********************************************************************************/\nproject.ext.GHIDRA_GROUP = \"Z Ghidra\"\nproject.ext.ROOT_PROJECT_DIR = projectDir.absolutePath\nproject.ext.BIN_REPO = file(\"${projectDir}/../ghidra.bin\").absolutePath\nproject.ext.DEPS_DIR = file(\"${projectDir}/dependencies\")\n\n/*********************************************************************************\n *  Prevent forked Java processes from stealing focus\n *********************************************************************************/\nallprojects {\n\ttasks.withType(JavaForkOptions) {\n\t\tjvmArgs '-Djava.awt.headless=true'\n\t}\n}\n\n/*********************************************************************************\n *  Use flat directory-style repository if flatRepo directory is present.\n *********************************************************************************/\ndef flatRepo = file(\"${DEPS_DIR}/flatRepo\") \nif (flatRepo.isDirectory()) {\n\tallprojects {\n\t\trepositories {\n\t\t\tmavenLocal()\n\t\t\tmavenCentral()\n\t\t\tflatDir name: \"flat\", dirs:[\"$flatRepo\"]\n\t\t}\n\t}\n}\nelse {\t\n\tFile f = file(\"ghidra.repos.config\")\n\tif (!f.exists()) {\n\t\tthrow new GradleException(\"\\n\\n\\n\\tUnable to find the local maven repo.\" +  \n\t\t\t\"  Ensure you have created the ${flatRepo.getName()} directory or ${f.getName()} file.\\n\\n\\n\");\n\t}\n}\n\n/*********************************************************************************\n * Imports\n *  For these tasks to be available on all subprojects, this MUST be placed \n *\tafter the \"setupJava\" configuration.\n *\n * Note: Distribution.gradle and distributionNew.gradle must not be applied at the\n * \t\tsame time; they have tasks with the same name. The former is the 'old' way\n * \t\tof building (produces several zips) while the former produces only one. \n * \t\tEventually distribution.gradle will be removed entirely, but it is included\n *\t\there for the time being for those who need it.\n *********************************************************************************/\napply from: \"GPL/utils.gradle\"                // adds utilities used in both Ghidra and GPL projects\napply from: \"GPL/nativePlatforms.gradle\"      // adds native platform support\napply from: \"gradle/root/test.gradle\"         // adds tasks for running tests\napply from: \"gradle/root/prepDev.gradle\"      // adds prepDev task for each subproject\napply from: 'gradle/root/distribution.gradle' // adds zip tasks\napply from: 'gradle/root/usage.gradle'        // adds task documentation\napply from: \"gradle/root/svg.gradle\"          // adds task to process svg files\napply from: \"gradle/root/jacoco.gradle\"       // adds tasks for java code coverage\napply from: \"gradle/root/venv.gradle\"         // adds tasks python virtual environments\n\n\napply plugin: 'base'\nclean {\n\tdelete \"$buildDir\"\n}\n\n/*********************************************************************************\n * Throws a GradleException if the current Gradle version is outside of the supported\n * Gradle version range defined in application.properties.\n *\n * NOTE: This function is duplicated in buildExtension.gradle\n *********************************************************************************/\nimport org.gradle.util.GradleVersion;\ndef checkGradleVersion() {\n\tGradleVersion min = null;\n\tGradleVersion max = null;\n\ttry {\n\t\tmin = GradleVersion.version(\"${rootProject.GRADLE_MIN}\")\n\t}\n\tcatch (IllegalArgumentException e) {\n\t\tString defaultMin = \"1.0\"\n\t\tprintln \"Invalid minimum Gradle version specified in application.properties...using ${defaultMin}\"\n\t\tmin = GradleVersion.version(defaultMin)\n\t}\n\ttry {\n\t\tif (rootProject.GRADLE_MAX) {\n\t\t\tmax = GradleVersion.version(\"${rootProject.GRADLE_MAX}\")\n\t\t}\n\t}\n\tcatch (IllegalArgumentException e) {\n\t\tprintln \"Invalid maximum Gradle version specified in application.properties...ignoring\"\n\t}\n\tString gradleRange = \"at least ${min}\"\n\tif (max) {\n\t\tgradleRange += \" and less than ${max}\"\t\t\n\t}\n\tif (GradleVersion.current() < min || (max && GradleVersion.current() >= max)) {\n\t\tthrow new GradleException(\"Requires ${gradleRange}, but was run with $gradle.gradleVersion\")\n\t}\n}\n\n\n/*********************************************************************************\n * Identifies supported python3 command to be used when building and checks for pip install.\n * Although warnings may be produced no exception is thrown since python only required\n * for specific build tasks and is not required for prepdev\n *********************************************************************************/\ndef checkPythonVersion(List<String> pyCmd) {\n\ttry {\n\t\tdef stdout = new ByteArrayOutputStream()\n\t\texec {\n\t\t\tcommandLine pyCmd\n\t\t\targs \"-c\", \"import sys; print('{0}.{1}'.format(*sys.version_info))\"\n\t\t\tstandardOutput = stdout\n\t\t\terrorOutput = OutputStream.nullOutputStream()\n\t\t}\n\t\treturn \"$stdout\".strip()\n\t}\n\tcatch (Exception e) {\n\t\treturn \"ABSENT\"\n\t}\n}\n\ndef getPythonExecutable(List<String> pyCmd) {\n\ttry {\n\t\tdef stdout = new ByteArrayOutputStream()\n\t\texec {\n\t\t\tcommandLine pyCmd\n\t\t\targs \"-c\", \"import sys; print(sys.executable)\"\n\t\t\tstandardOutput = stdout\n\t\t\terrorOutput = OutputStream.nullOutputStream()\n\t\t}\n\t\treturn \"$stdout\".strip()\n\t}\n\tcatch (Exception e) {\n\t\treturn \"ABSENT\"\n\t}\n}\n\ndef checkPip(List<String> pyCmd, boolean shouldPrint) {\n\ttry {\n\t\tdef stdout = new ByteArrayOutputStream()\n\t\texec {\n\t\t\tcommandLine pyCmd\n\t\t\targs \"-c\", \"import pip; print(pip.__version__)\"\n\t\t\tstandardOutput = stdout\n\t\t\terrorOutput = OutputStream.nullOutputStream()\n\t\t}\n\t\tdef version = \"$stdout\".strip();\n\t\tif (shouldPrint) {\n\t\t\tif (version.length() == 0) {\n\t\t\t\tprintln(\"Warning: Python3 pip not installed (required for build)\")\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprintln(\"Python3 pip version: ${version}\")\n\t\t\t}\n\t\t}\n\t\treturn version\n\t}\n\tcatch (Exception e) {\n\t\tif (shouldPrint) {\n\t\t\tprintln(\"Warning: Python3 pip not installed (required for build)\")\n\t\t}\n\t}\n}\n\ndef findPython3(boolean shouldPrint) {\n\tdef supportedVersions = \"${PYTHON_SUPPORTED}\".split(\",\").collect {\n\t\ttry {\n\t\t\tGradleVersion.version(it.trim()).getVersion() // use GradleVersion to validate version format\n\t\t}\n\t\tcatch (IllegalArgumentException e) {\n\t\t\tthrow new GradleException(\"Invalid supported Python version list specified in application.properties.\\n\" + e.message);\n\t\t}\t\n\t}\n\n\tdef pyCmds = supportedVersions.collectMany { [[\"python$it\"], [\"py\", \"-$it\"]] }\n\tpyCmds += [['python3'], ['python'], ['py']]\n\tfor (pyCmd in pyCmds) {\t\n\t\tdef pyVer = checkPythonVersion(pyCmd)\n\t\tdef pyExe = getPythonExecutable(pyCmd)\n\t\tif (pyVer in supportedVersions) {\n\t\t\tif (shouldPrint) {\n\t\t\t\tprintln(\"Python3 command: ${pyCmd} (${pyVer}, ${pyExe})\")\n\t\t\t}\n\t\t\tcheckPip(pyCmd, shouldPrint)\n\t\t\treturn pyCmd\n\t\t}\n\t}\n\n\tif (shouldPrint) {\n\t\tprintln(\"Warning: Supported Python [${PYTHON_SUPPORTED}] not found (required for build)\")\n\t}\n\t\n\t// Don't fail until task execution. Just retun null, which can be gracefully handled later.\n\treturn null\n}\n\n/******************************************************************************************\n *\n * Utility methods used by multiple build.gradle files\n *\n *****************************************************************************************/\t\n\n/*********************************************************************************\n * Returns a relative path from the root (ghidra) to the project's directory.\n * This is used to determine where inside a zip file to place a particular artifact\n *  (we want them to all start at \"Ghidra/....\"\n *\n * ie: If we have the following:\n * \t\t\tproject dir = /Users/<blah>/git/ghidra.master/ghidra/Ghidra/Features/Base\n *\t \t\troot project = /Users/<blah>/git/ghidra.master/ghidra/Ghidra\n *\n *\t \tThen the returned value will be:\n *\t \t\tGhidra/Features/Base \n * \n *  There are two special cases - Projects that live outside ghidra and projects\n *  that are extension projects.  Projects that live outside ghidra will\n *  have zip paths that make the project appear as if it did live in ghidra.\n *  Projects that extend other projects will appear as though they live in the project\n *  that they extend.  See the note at the top of the distribution.gradle file for more details.\n *********************************************************************************/\ndef getZipPath(Project p) {\n\t\n\tString path = getGhidraRelativePath(p)\n\t\t\n\t// if the project has been defined as an \"extension\" to another project, change its\n\t// zip path to the path of its \"base\" project.  A project is an extension if it has\n\t// defined an \"extendsFromProject\" property.\n\t\n\tif (p.hasProperty('extendsFromProject')) {\n\t\tProject baseProject = p.extendsFromProject\n\t\tpath = getGhidraRelativePath(baseProject);\n\t}\n\t\n\tif (p.hasProperty(\"pathExtension\")) {\n\t\tpath = path + \"/\" + p.pathExtension\n\t}\n\n\treturn path\n}\n\ndef getBaseProjectName(Project p) {\n\tif (p.hasProperty('extendsFromProject')) {\n\t\tProject baseProject = p.extendsFromProject\n\t\treturn baseProject.name\n\t}\n\t\n\treturn p.name\n}\n\n/*********************************************************************************\n * Returns the current date formatted as yyyyMMdd.\n *********************************************************************************/\ndef getCurrentDate() {\n\n\tdef date = new Date()\n\tdef formattedDate = date.format('yyyyMMdd')\n\treturn formattedDate\n}\n\n/*********************************************************************************\n * Returns the current date/time formatted as yyyyMMdd-HHmm.\n *********************************************************************************/\ndef getCurrentDateTime() {\n\n\tdef date = new Date()\n\tdef formattedDate = date.format('yyyyMMdd-HHmm')\n\treturn formattedDate\n}\n\n/*********************************************************************************\n * Returns the current date/time formatted as yyyy-MMM-dd HHmm z.\n *********************************************************************************/\ndef getCurrentDateTimeLong() {\n\n\tdef date = new Date()\n\tdef formattedDate = date.format('yyyy-MMM-dd HHmm z')\n\treturn formattedDate\n}\n\n/*********************************************************************************\n * Returns a list of all the external library paths declared as dependencies for the \n *         given project  \n *\n *********************************************************************************/\nList<String> getExternalRuntimeDependencies(Project project) {\n\tList<String> list = new ArrayList<String>()\n\n\tif (project.configurations.find { it.name == 'api' }) {\n\t\tlist.addAll(getExternalRuntimeDependencies(project, project.configurations.api));\n\t}\n\tif (project.configurations.find { it.name == 'implementation' }) {\n\t\tlist.addAll(getExternalRuntimeDependencies(project, project.configurations.implementation));\n\t}\n\tif (project.configurations.find { it.name == 'runtimeOnly' }) {\n\t\tlist.addAll(getExternalRuntimeDependencies(project, project.configurations.runtimeOnly));\n\t}\n\n\treturn list\n}\n\nList<String> getExternalRuntimeDependencies(Project project, Configuration configuration) {\n\tList<String> list = new ArrayList<>();\n\tconfiguration.dependencies.each { dep ->\n\n\t\t// if the dependency is an external jar\n\t\tif (dep instanceof ExternalDependency) { \t\n\t\t\tString name = dep.getName()\n\t\t\tSet<String> classifiers = dep.artifacts.classifier\n\t\t\tString group = dep.getGroup()\n\t\t\tString version = dep.getVersion()\t\n\t\t\tString searchString = name\n\n\t\t\tif (version != null) {\n\t\t\t\tsearchString = name+\"-\"+version;\n\t\t\t}\n\n\t\t\tif (!classifiers.empty) {\n\t\t\t\tString cls = classifiers.first()\n\t\t\t\tif (cls != null) {\n\t\t\t\t\tsearchString+= \"-$cls\"\n\t\t\t\t}\n\t\t\t}\n\t\t\t// search for the dependency in the runtime class path\n\t\t\tString depPath = project.configurations.runtimeClasspath.find {\n\t\t\t\tit.name.contains(searchString)\n\t\t\t}\n\n\t\t\tif (depPath == null) {\n\t\t\t\tprintln(\"****************DID NOT FIND DEPENDENCY: name = \"+name+\" version = \"+version)\n\t\t\t}\n\t\t\t// if we found the path, then add it to the list\n\t\t\tif (depPath) {\n\t\t\t\tlist.add(depPath)\n\t\t\t}\n\t\t}\t\n\t}\n\treturn list;\n}\n\n\n\n/******************************************************************************************\n * \n * Creates a file that lists the libraries used by each module.\n *\n ******************************************************************************************/\nString generateLibraryDependencyMapping() {\n\tFile libsFile = file(\"$buildDir/libraryDependencies.txt\")\n\t\n\t// Check to make sure the build folder exists - if it doesn't, the 'libsFile.withWriter'\n\t// call (below) will fail miserably.\n\tdef buildFolder = file (\"$buildDir\")\n\tif (!buildFolder.exists()) {\n\t\tbuildFolder.mkdirs()\n\t}\n\t\n\tlibsFile.withWriter { out ->\n\t\tsubprojects { p ->\n\t\t\tp.plugins.withType(JavaPlugin) {\n\t\t\t\tList<String> libs = getExternalRuntimeDependencies(p);\n\t\t\t\tif (libs != null) {\n\t\t\t\t\tout.println \"Module: $p.name\"\n\t\t\t\t\tlibs.each { path ->\n\t\t\t\t\t\tout.println \"\\t$path\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn libsFile.absolutePath\n}\n\ntask allSleighCompile {\n}\n"
        },
        {
          "name": "certification.local.manifest",
          "type": "blob",
          "size": 0.4,
          "content": "##VERSION: 2.0\n##MODULE IP: Apache License 2.0\n.gitattributes||GHIDRA||||END|\n.gitignore||GHIDRA||||END|\nCONTRIBUTING.md||GHIDRA||||END|\nDISCLAIMER.md||GHIDRA||||END|\nDevGuide.md||GHIDRA||||END|\nLICENSE||GHIDRA||||END|\nNOTICE||GHIDRA||||END|\nREADME.md||GHIDRA||||END|\nghidra.repos.config||GHIDRA||||END|\ngradle.properties||GHIDRA||||END|\ngradlew||Apache License 2.0||||END|\ngradlew.bat||Apache License 2.0||||END|\n"
        },
        {
          "name": "eclipse",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.18,
          "content": "# Increase maximum Gradle heap size (default is 1G)\n# And fix build in locales with non-default capitalizations (e.g. tr_TR)\norg.gradle.jvmargs=-Xmx2G -Duser.language=en -Duser.country=US\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 9.52,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd \"${APP_HOME:-./}\" > /dev/null && pwd -P ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\n#------------Ghidra Additions ----------------------------------------------------------------------\n\n# Set variables based on Production vs Dev environment\nif [ -f \"${APP_HOME}/gradle-wrapper.jar\" ]; then\n    # Production Environment\n    CLASSPATH=\"${APP_HOME}/gradle-wrapper.jar\"\n    GHIDRA_HOME=\"${APP_HOME}/../..\"\nelse\n    # Development Environment (Eclipse classes or \"gradle jar\")\n    CLASSPATH=\"${APP_HOME}/Ghidra/RuntimeScripts/Common/support/gradle/gradle-wrapper.jar\"\n    GHIDRA_HOME=\"${APP_HOME}\"\nfi\n\n# Read application properties\nwhile IFS='=' read -r key value\ndo\n    key=$(echo $key | tr '.' '_')\n    eval ${key}=\\${value}\ndone < \"${GHIDRA_HOME}/Ghidra/application.properties\"\n\n# Only proceed with wrapper if we are in single-repo PUBLIC/DEV mode\nif [ -d \"${GHIDRA_HOME}/../ghidra.bin\" ] || ([ ${application_release_name} != \"PUBLIC\" ] && [ ${application_release_name} != \"DEV\" ]) ; then\n     echo \"Please install Gradle ${application_gradle_min} or later and put it on your PATH.\"\n     exit 1\nfi\n#---------------------------------------------------------------------------------------------------\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 3.84,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\n@rem ------------Ghidra Additions ------------------------------------------------------------------\n\n@rem Set variables based on Production vs Dev environment\nif exist \"%APP_HOME%\\gradle-wrapper.jar\" (\n    @rem Production Environment\n    set \"CLASSPATH=%APP_HOME%gradle-wrapper.jar\"\n    set \"GHIDRA_HOME=%APP_HOME%..\\..\\\"\n) else (\n    @rem Development Environment (Eclipse classes or \"gradle jar\")\n    set \"CLASSPATH=%APP_HOME%Ghidra\\RuntimeScripts\\Common\\support\\gradle\\gradle-wrapper.jar\"\n    set \"GHIDRA_HOME=%APP_HOME%\"\n)\n\n@rem Read application properties\nfor /f \"tokens=1,2 delims==\" %%g in (%GHIDRA_HOME%Ghidra\\application.properties) DO (set %%g=%%h)\n\n@rem Only proceed with wrapper if we are in single-repo PUBLIC/DEV mode\nset PROCEED=1\nif exist \"%GHIDRA_HOME%..\\ghidra.bin\" (\n    set PROCEED=0\n)\nif not \"%application.release.name%\" == \"PUBLIC\" (\n    if not \"%application.release.name%\" == \"DEV\" (\n        set PROCEED=0\n    )\n)\n\nif %PROCEED% == 0 (\n    echo Please install Gradle %application.gradle.min% or later and put it on your PATH.\n    goto fail\n)\n@rem -----------------------------------------------------------------------------------------------\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 2.79,
          "content": "/* ###\n * IP: GHIDRA\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\napply from: \"gradle/support/settingsUtil.gradle\"\n\n/*******************************************************************************************\n * Include all the standard Ghidra modules.  See documentation below for more information\n * about includeProjects and includeProcessProjects.\n *******************************************************************************************/\n\nincludeProjects('Ghidra/Dev')\nincludeProjects('Ghidra/Debug')\nincludeProjects('Ghidra/Extensions')\nincludeProjects('Ghidra/Framework')\nincludeProjects('Ghidra/Features')\nincludeProjects('Ghidra/Configurations')\nincludeProjects('Ghidra/Processors')\nincludeProjects('Ghidra/Test')\nincludeProjects('GPL')\n\n/*******************************************************************************************\n * Include miscellaneous support modules\n *******************************************************************************************/\nincludeProject('Doclets', 'GhidraBuild/BuildFiles', true)\nincludeProject('LaunchSupport', 'GhidraBuild', true)\nincludeProject('MarkdownSupport', 'GhidraBuild', true)\nincludeProject('Skeleton', 'GhidraBuild', true)\nincludeProject('BuildFiles', 'GhidraBuild', true)\nincludeProject('decompile', 'Ghidra/Features/Decompiler/src', true)\nincludeProject('RuntimeScripts', 'Ghidra', true)\nincludeProject('IDAPro', 'GhidraBuild', true)\nincludeProject('GhidraDocs', '.', true)\nincludeProjects('GhidraBuild/EclipsePlugins/GhidraDev') // requires Eclipse PDE\nincludeProjects('GhidraBuild/EclipsePlugins/GhidraSleighEditor') // requires Eclipse DSL\n\n/*******************************************************************************************\n * Apply additional Ghidra respositories\n *******************************************************************************************/\nFile extensionsList = file(\"ghidra.repos.config\")\nif (extensionsList.isFile()) {\n\textensionsList.eachLine { line ->\n\t\tline = line.trim()\n\t\tif (line == \"\" || line.startsWith(\"#\")) {\n\t\t\treturn // Skip just this one\n\t\t}\n\t\tFile extraSettings = file(\"../$line/extraSettings.gradle\")\n\t\tif (extraSettings.exists()) {\n\t\t\tassert extraSettings.parentFile.parentFile == rootProject.projectDir.parentFile : \"Extension must be sibling of ghidra repository\"\t\n\t\t\tapply from: extraSettings.absolutePath\n\t\t}\n\t}\n}\n"
        }
      ]
    }
  ]
}