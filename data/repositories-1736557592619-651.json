{
  "metadata": {
    "timestamp": 1736557592619,
    "page": 651,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "amix/vimrc",
      "stars": 30926,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.23,
          "content": "temp_dirs/undodir/*\nsources_non_forked/ack.vim/.netrwhist\ntemp_dirs/yankring_history_v2.txt\nsources_forked/yankring/doc/tags\nsources_non_forked/tlib/doc/tags\nsources_non_forked/ctrlp.vim/doc/tags*\nmy_plugins/\nmy_configs.vim\ntags\n.DS_Store\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.06,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Amir Salihefendic\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.08,
          "content": "![VIM](https://dnp4pehkvoo6n.cloudfront.net/43c5af597bd5c1a64eb1829f011c208f/as/Ultimate%20Vimrc.svg)\n\n# The Ultimate vimrc\n\nOver the last 10 years, I have used and tweaked Vim. This configuration is the ultimate vimrc (or at least my version of it).\n\nThere are two versions:\n\n* **The Basic**: If you want something small just copy [basic.vim](https://github.com/amix/vimrc/blob/master/vimrcs/basic.vim) into your ~/.vimrc and you will have a good basic setup\n* **The Awesome**: Includes a ton of useful plugins, color schemes, and configurations\n\nI would, of course, recommend using the awesome version.\n\n\n## How to install the Awesome version?\n### Install for your own user only\nThe awesome version includes a lot of great plugins, configurations and color schemes that make Vim a lot better. To install it simply do following from your terminal:\n\n\tgit clone --depth=1 https://github.com/amix/vimrc.git ~/.vim_runtime\n\tsh ~/.vim_runtime/install_awesome_vimrc.sh\n\t\n### Install for multiple users\nTo install for multiple users, the repository needs to be cloned to a location accessible for all the intended users.\n\n\tgit clone --depth=1 https://github.com/amix/vimrc.git /opt/vim_runtime\n\tsh /opt/vim_runtime/install_awesome_parameterized.sh /opt/vim_runtime user0 user1 user2\n\t# to install for all users with home directories, note that root will not be included\n\tsh /opt/vim_runtime/install_awesome_parameterized.sh /opt/vim_runtime --all\n\t\nNaturally, `/opt/vim_runtime` can be any directory, as long as all the users specified have read access.\n\n## Fonts\n\nI recommend using [IBM Plex Mono font](https://github.com/IBM/plex) (it's an open-source and awesome font that can make your code look beautiful). The Awesome vimrc is already setup to try to use it.\n\nSome other fonts that Awesome will try to use:\n\n* [Hack](http://sourcefoundry.org/hack/)\n* [Source Code Pro](https://adobe-fonts.github.io/source-code-pro/)\n\n## How to install the Basic version?\n\nThe basic version is just one file and no plugins. Just copy [basic.vim](https://github.com/amix/vimrc/blob/master/vimrcs/basic.vim) and paste it into your vimrc.\n\nThe basic version is useful to install on remote servers where you don't need many plugins, and you don't do many edits.\n\n\tgit clone --depth=1 https://github.com/amix/vimrc.git ~/.vim_runtime\n\tsh ~/.vim_runtime/install_basic_vimrc.sh\n\n\n## How to install on Windows?\n\nUse [gitforwindows](http://gitforwindows.org/) to checkout the repository and run the installation instructions above. No special instructions needed ;-)\n\n\n## How to install on Linux\n\nIf you have vim aliased as `vi` instead of `vim`, make sure to either alias it: `alias vi=vim`. Otherwise, `apt-get install vim`\n\n\n## How to update to latest version?\n\nJust do a git rebase!\n\n\n    cd ~/.vim_runtime\n    git reset --hard\n    git clean -d --force\n    git pull --rebase\n    python update_plugins.py  # use python3 if python is unavailable\n\n## Some screenshots\n\nColors when editing a Python file:\n\n![Screenshot 1](https://dnp4pehkvoo6n.cloudfront.net/07583008e4da885801657e8781777844/as/Python%20editing.png)\n\n[NERD Tree](https://github.com/preservim/nerdtree) plugin in a terminal window:\n![Screenshot 3](https://dnp4pehkvoo6n.cloudfront.net/ae719203166585d64728f28398f4b1b7/as/Terminal%20usage.png)\n\nDistraction free mode using [goyo.vim](https://github.com/junegunn/goyo.vim) and [vim-zenroom2](https://github.com/amix/vim-zenroom2):\n![Screenshot 4](https://dnp4pehkvoo6n.cloudfront.net/f0dcc4c9739148c56cbf8285a910ac41/as/Zen%20mode.png)\n\n\n## Included Plugins\n\nI recommend reading the docs of these plugins to understand them better. Each plugin provides a much better Vim experience!\n\n* [ack.vim](https://github.com/mileszs/ack.vim): Vim plugin for `the_silver_searcher` (ag) or ack -- a wicked fast grep\n* [bufexplorer.zip](https://github.com/vim-scripts/bufexplorer.zip): Quickly and easily switch between buffers. This plugin can be opened with `<leader+o>`\n* [ctrlp.vim](https://github.com/ctrlpvim/ctrlp.vim): Fuzzy file, buffer, mru and tag finder. It's mapped to `<Ctrl+F>`\n* [goyo.vim](https://github.com/junegunn/goyo.vim) and [vim-zenroom2](https://github.com/amix/vim-zenroom2): \n* [lightline.vim](https://github.com/itchyny/lightline.vim): A light and configurable statusline/tabline for Vim\n* [NERD Tree](https://github.com/preservim/nerdtree): A tree explorer plugin for vim\n* [open_file_under_cursor.vim](https://github.com/amix/open_file_under_cursor.vim): Open file under cursor when pressing `gf`\n* [pathogen.vim](https://github.com/tpope/vim-pathogen): Manage your vim runtimepath \n* [snipmate.vim](https://github.com/garbas/vim-snipmate): snipmate.vim aims to be a concise vim script that implements some of TextMate's snippets features in Vim\n* [ale](https://github.com/dense-analysis/ale): Syntax and lint checking for vim (ALE requires NeoVim >= 0.2.0 or Vim 8 with +timers +job +channel)\n* [vim-commentary](https://github.com/tpope/vim-commentary): Comment stuff out.  Use `gcc` to comment out a line (takes a count), `gc` to comment out the target of a motion. `gcu` uncomments a set of adjacent commented lines\n* [vim-expand-region](https://github.com/terryma/vim-expand-region): Allows you to visually select increasingly larger regions of text using the same key combination\n* [vim-fugitive](https://github.com/tpope/vim-fugitive): A Git wrapper so awesome, it should be illegal\n* [vim-indent-object](https://github.com/michaeljsmith/vim-indent-object): Defines a new text object representing lines of code at the same indent level. Useful for python/vim scripts\n* [vim-multiple-cursors](https://github.com/terryma/vim-multiple-cursors): Sublime Text style multiple selections for Vim, CTRL+N is remapped to CTRL+S (due to YankRing)\n* [vim-yankstack](https://github.com/maxbrunsfeld/vim-yankstack): Maintains a history of previous yanks, changes and deletes\n* [vim-zenroom2](https://github.com/amix/vim-zenroom2) Remove all clutter and focus only on the essential. Similar to iA Writer or Write Room\n* [gist-vim](https://github.com/mattn/gist-vim) Easily create gists from Vim using the `:Gist` command\n* [vim-indent-guides](https://github.com/nathanaelkane/vim-indent-guides) Is a plugin for visually displaying indent levels in Vim\n* [editorconfig-vim](https://github.com/editorconfig/editorconfig-vim) EditorConfig helps maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs\n* [copilot.vim](https://github.com/github/copilot.vim) Plugin for GitHub Copilot (AI autocompletion FTW 😅)\n\n\n## Included color schemes\n\nType `:colorscheme <Tab>` to try out color schemes on the fly,\nor add the command to `~/.vim_runtime/my_configs.vim` (see [below](#how-to-include-your-own-stuff)),\nfor example `colorscheme pyte`.\n\n* [peaksea](https://github.com/vim-scripts/peaksea): The default\n* [dracula](https://github.com/dracula/vim)\n* [vim-colors-solarized](https://github.com/altercation/vim-colors-solarized)\n* [vim-irblack](https://github.com/wgibbs/vim-irblack)\n* [mayansmoke](https://github.com/vim-scripts/mayansmoke)\n* [vim-pyte](https://github.com/therubymug/vim-pyte)\n\n\n## Included modes\n\n* [vim-coffee-script](https://github.com/kchmck/vim-coffee-script)\n* [vim-less](https://github.com/groenewege/vim-less)\n* [vim-bundle-mako](https://github.com/sophacles/vim-bundle-mako)\n* [vim-markdown](https://github.com/plasticboy/vim-markdown)\n* [nginx.vim](https://github.com/vim-scripts/nginx.vim): Highlights configuration files for nginx\n* [rust.vim](https://github.com/rust-lang/rust.vim)\n* [vim-ruby](https://github.com/vim-ruby/vim-ruby)\n* [typescript-vim](https://github.com/leafgarland/typescript-vim)\n* [vim-javascript](https://github.com/pangloss/vim-javascript)\n* [vim-python-pep8-indent](https://github.com/Vimjas/vim-python-pep8-indent)\n\n\n## How to include your own stuff?\n\nAfter you have installed the setup,\ncreate an empty `~/.vim_runtime/my_configs.vim` file for further customization.\nThis file's syntax matches `vimrc` syntax,\nand add `vimrc` lines like `set number` as needed.\n\nFor instance, my `my_configs.vim` looks like this:\n\n\t~/.vim_runtime > cat my_configs.vim\n\tmap <leader>ct :cd ~/Desktop/Todoist/todoist<cr>\n\tmap <leader>cw :cd ~/Desktop/Wedoist/wedoist<cr> \n\nYou can also install your plugins, for instance, via pathogen you can install [vim-rails](https://github.com/tpope/vim-rails):\n\n\tcd ~/.vim_runtime\n\tgit clone git://github.com/tpope/vim-rails.git my_plugins/vim-rails\n\nYou can also install plugins without any plugin manager (vim 8+ required):\n\n* Create pack plugin directory:\\\n`mkdir -p ~/.vim_runtime/pack/plugins/start`\n* Clone the plugin that you want in that directory, for example:\\\n`git clone --depth=1 git://github.com/maxmellon/vim-jsx-pretty  ~/.vim_runtime/pack/plugins/start/vim-jsx-pretty`\n\n\n## Key Mappings\n\nThe [leader](http://learnvimscriptthehardway.stevelosh.com/chapters/06.html#leader) is `,`, so whenever you see `<leader>` it means `,`.\n\n\n### Normal mode mappings\n\nFast saving of a buffer (`<leader>w`):\n\n```vim\nnmap <leader>w :w!<cr>\n```\n\nMap `<Space>` to `/` (search) and `<Ctrl>+<Space>` to `?` (backwards search):\n```vim\t\nmap <space> /\nmap <C-space> ?\n```\nDisable highlights when you press `<leader><cr>`:\n\n```vim\nmap <silent> <leader><cr> :noh<cr>\n```\nSmart way to move between windows (`<ctrl>j` etc.):\n```vim\t\nmap <C-j> <C-W>j\nmap <C-k> <C-W>k\nmap <C-h> <C-W>h\nmap <C-l> <C-W>l\n```\nClosing of the current buffer(s) (`<leader>bd` and (`<leader>ba`)):\n```vim\t\n\" Close current buffer\nmap <leader>bd :Bclose<cr>\n\n\" Close all buffers\nmap <leader>ba :1,1000 bd!<cr>\n```\t\nUseful mappings for managing tabs:\n```vim\t\nmap <leader>tn :tabnew<cr>\nmap <leader>to :tabonly<cr>\nmap <leader>tc :tabclose<cr>\nmap <leader>tm :tabmove \n\n\" Opens a new tab with the current buffer's path\n\" Super useful when editing files in the same directory\nmap <leader>te :tabedit <C-r>=escape(expand(\"%:p:h\"), \" \")<cr>/\n```\t\nSwitch [CWD](http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file) to the directory of the open buffer:\n```vim\t\nmap <leader>cd :cd %:p:h<cr>:pwd<cr>\n```\t\nOpen `ack.vim` for fast search:\n```vim\t\nmap <leader>g :Ack \n```\nQuickly open a buffer for scripbble:\n```vim\t\nmap <leader>q :e ~/buffer<cr>\n```\nToggle paste mode on and off:\n```vim\t\nmap <leader>pp :setlocal paste!<cr>\n```\n\n### Visual mode mappings\n\nVisual mode pressing `*` or `#` searches for the current selection:\n```vim\nvnoremap <silent> * :call VisualSelection('f')<CR>\nvnoremap <silent> # :call VisualSelection('b')<CR>\n```\nWhen you press gv you `Ack.vim` after the selected text:\n```vim\nvnoremap <silent> gv :call VisualSelection('gv', '')<CR>\n```\nWhen you press `<leader>r` you can search and replace the selected text:\n```vim\nvnoremap <silent> <leader>r :call VisualSelection('replace')<CR>\n```\nSurround the visual selection in parenthesis/brackets/etc.:\n```vim\nvnoremap $1 <esc>`>a)<esc>`<i(<esc>\nvnoremap $2 <esc>`>a]<esc>`<i[<esc>\nvnoremap $3 <esc>`>a}<esc>`<i{<esc>\nvnoremap $$ <esc>`>a\"<esc>`<i\"<esc>\nvnoremap $q <esc>`>a'<esc>`<i'<esc>\nvnoremap $e <esc>`>a`<esc>`<i`<esc>\n```\n\n### Insert mode mappings\n\nQuickly insert parenthesis/brackets/etc.:\n```vim\ninoremap $1 ()<esc>i\ninoremap $2 []<esc>i\ninoremap $3 {}<esc>i\ninoremap $4 {<esc>o}<esc>O\ninoremap $q ''<esc>i\ninoremap $e \"\"<esc>i\ninoremap $t <><esc>i\n```\nInsert the current date and time (useful for timestamps):\n```vim\niab xdate <C-r>=strftime(\"%d/%m/%y %H:%M:%S\")<cr>\n```\n\n### Command line mappings\n\n$q is super useful when browsing on the command line. It deletes everything until the last slash:\n```vim\ncno $q <C-\\>eDeleteTillSlash()<cr>\n```\nBash like keys for the command line:\n```vim\ncnoremap <C-A>\t\t<Home>\ncnoremap <C-E>\t\t<End>\ncnoremap <C-K>\t\t<C-U>\n\ncnoremap <C-P> <Up>\ncnoremap <C-N> <Down>\n```\n\nWrite the file as sudo (works only on Unix). Super useful when you open a file and you don't have permissions to save your changes. [Vim tip](http://vim.wikia.com/wiki/Su-write):\n\n    :W \n\n### Plugin related mappings\n\nOpen [bufexplorer](https://github.com/vim-scripts/bufexplorer.zip) to see and manage the current buffers (`<leader>o`):\n```vim\nmap <leader>o :BufExplorer<cr>\n```\nOpen [ctrlp.vim](https://github.com/kien/ctrlp.vim) plugin to quickly find a file or a buffer (`<leader>j` or `<ctrl>f`):\n```vim\n\" Quickly find and open a file in the CWD\nlet g:ctrlp_map = '<C-f>'\n\n\" Quickly find and open a recently opened file\nmap <leader>f :MRU<CR>\n\n\" Quickly find and open a buffer\nmap <leader>b :CtrlPBuffer<cr>\n```\n[NERD Tree](https://github.com/preservim/nerdtree) mappings:\n```vim\nmap <leader>nn :NERDTreeToggle<cr>\nmap <leader>nb :NERDTreeFromBookmark \nmap <leader>nf :NERDTreeFind<cr>\n```\n[goyo.vim](https://github.com/junegunn/goyo.vim) and [vim-zenroom2](https://github.com/amix/vim-zenroom2) lets you only focus on one thing at a time. It removes all the distractions and centers the content. It has a special look when editing Markdown, reStructuredText and textfiles. It only has one mapping. (`<leader>z`)\n```vim\nmap <leader>z :Goyo<cr>\n```\n[vim-multiple-cursors](https://github.com/terryma/vim-multiple-cursors) mappings to manage multiple cursors at once:\n```vim\nlet g:multi_cursor_start_word_key      = '<C-s>'\nlet g:multi_cursor_select_all_word_key = '<A-s>'\nlet g:multi_cursor_start_key           = 'g<C-s>'\nlet g:multi_cursor_select_all_key      = 'g<A-s>'\nlet g:multi_cursor_next_key            = '<C-s>'\nlet g:multi_cursor_prev_key            = '<C-p>'\nlet g:multi_cursor_skip_key            = '<C-x>'\nlet g:multi_cursor_quit_key            = '<Esc>'\n```\n[vim-yankstack](https://github.com/maxbrunsfeld/vim-yankstack) mappings to manage the kill-ring (clipboard):\n```vim\nnmap <C-p> <Plug>yankstack_substitute_older_paste\nnmap <C-n> <Plug>yankstack_substitute_newer_paste\n```\n[ctrl-p](https://github.com/ctrlpvim/ctrlp.vim) mappings to easily find and open a file, buffer, etc.:\n```vim\nlet g:ctrlp_map = '<C-f>'\nmap <leader>j :CtrlP<cr>\nmap <C-b> :CtrlPBuffer<cr>\n```\n\n[vim-snipmate](https://github.com/garbas/vim-snipmate) mappings to autocomplete via snippets:\n```vim\nino <C-j> <C-r>=snipMate#TriggerSnippet()<cr>\nsnor <C-j> <esc>i<right><C-r>=snipMate#TriggerSnippet()<cr>\n```\n[vim-surround](https://github.com/tpope/vim-surround) mappings to easily surround a string with `_()` gettext annotation:\n```vim\nvmap Si S(i_<esc>f)\nau FileType mako vmap Si S\"i${ _(<esc>2f\"a) }<esc>\n```\n[ale](https://github.com/dense-analysis/ale) to easily go to the next Ale syntax/lint error:\n```vim\nnmap <silent> <leader>a <Plug>(ale_next_wrap)\n```\n[vim-indent-guides](https://github.com/nathanaelkane/vim-indent-guides) the default mapping to toggle the plugin is (`<leader>ig`)\n\n    You can also use the following commands inside Vim:\n    :IndentGuidesEnable\n    :IndentGuidesDisable\n    :IndentGuidesToggle\n\n[vim-fugitive](https://github.com/tpope/vim-fugitive) to copy the link to the line of a Git repository to the clipboard:\n```vim\nnnoremap <leader>v :.GBrowse!<CR>\nxnoremap <leader>v :'<'>GBrowse!<CR>\n```\n### Spell checking\nPressing `<leader>ss` will toggle spell checking:\n```vim\nmap <leader>ss :setlocal spell!<cr>\n```\nShortcuts using `<leader>` instead of special characters:\n```vim\nmap <leader>sn ]s\nmap <leader>sp [s\nmap <leader>sa zg\nmap <leader>s? z=\n```\n### Running Code\nTo run code directly from vim, press `F5`. The currently open code will execute without you having to type anything.\n\nCan be used to execute code written in C, C++, Java, Python, Go, Octave, Bash scripts and HTML. To edit how you want your code to be executed, make changes in the file `~/.vim_runtime/vimrcs/extended.vim`\n\n### Cope\nQuery `:help cope` if you are unsure what cope is. It's super useful!\n\nWhen you search with `Ack.vim`, display your results in cope by doing:\n`<leader>cc`\n\nTo go to the next search result do:\n`<leader>n`\n\nTo go to the previous search results do:\n`<leader>p`\n\nCope mappings:\n```vim\nmap <leader>cc :botright cope<cr>\nmap <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg\nmap <leader>n :cn<cr>\nmap <leader>p :cp<cr>\n```\n\n## How to uninstall\nJust do following:\n* Remove `~/.vim_runtime`\n* Remove any lines that reference `.vim_runtime` in your `~/.vimrc`\n\n\n## Looking for a remote-first job?\n\nMaintaining this Vim configuration isn't my day job. Daily I am the founder/CEO of [Doist](https://doist.com/). You could come and help us build the workplace of the future while living a balanced life (anywhere in the world 🌍🌎🌏).\n\nPS: Using Vim isn't a requirement 😄\n\n"
        },
        {
          "name": "autoload",
          "type": "tree",
          "content": null
        },
        {
          "name": "install_awesome_parameterized.sh",
          "type": "blob",
          "size": 1.07,
          "content": "#!/bin/bash\nset -e\n\necho 'Installing Awesome Vim from '$1\ncd $1\n\nVIMRC=\"\\\" DO NOT EDIT THIS FILE\n\\\" Add your own customizations in $1/my_configs.vim\n\nset runtimepath+=$1\n\nsource $1/vimrcs/basic.vim\nsource $1/vimrcs/filetypes.vim\nsource $1/vimrcs/plugins_config.vim\nsource $1/vimrcs/extended.vim\n\ntry\n  source $1/my_configs.vim\ncatch\nendtry\"\n\nif [ \"$2\" = \"--all\" ]; then\n    USERS=$(ls -l /home | awk '{if(NR>1)print $9}')\n    for user in $USERS; do\n        homepath=$(eval echo \"~$user\")\n        IFS=''\n        echo $VIMRC > ${homepath}/.vimrc\n        unset IFS\n        echo \"Installed the Ultimate Vim configuration for user $user successfully! Enjoy :-)\"\n    done\n    echo \"Installed the Ultimate Vim configuration successfully! Enjoy :-)\"\n    exit 0\nelse\n    SELECTED_USERS=${@:2}\n    echo \"Selected users: $SELECTED_USERS\"\n    for user in $SELECTED_USERS; do\n        homepath=$(eval echo \"~$user\")\n        IFS=''\n        echo $VIMRC > ${homepath}/.vimrc\n        unset IFS\n        echo \"Installed the Ultimate Vim configuration for user $user successfully! Enjoy :-)\"\n    done\n    exit 0\nfi\n"
        },
        {
          "name": "install_awesome_vimrc.sh",
          "type": "blob",
          "size": 0.47,
          "content": "#!/bin/sh\nset -e\n\ncd ~/.vim_runtime\n\necho '\" DO NOT EDIT THIS FILE\n\" Add your own customizations in ~/.vim_runtime/my_configs.vim\n\nset runtimepath+=~/.vim_runtime\n\nsource ~/.vim_runtime/vimrcs/basic.vim\nsource ~/.vim_runtime/vimrcs/filetypes.vim\nsource ~/.vim_runtime/vimrcs/plugins_config.vim\nsource ~/.vim_runtime/vimrcs/extended.vim\ntry\n  source ~/.vim_runtime/my_configs.vim\ncatch\nendtry' > ~/.vimrc\n\necho \"Installed the Ultimate Vim configuration successfully! Enjoy :-)\"\n"
        },
        {
          "name": "install_basic_vimrc.sh",
          "type": "blob",
          "size": 0.15,
          "content": "#!/bin/sh\nset -e\n\ncd ~/.vim_runtime\ncat ~/.vim_runtime/vimrcs/basic.vim > ~/.vimrc\necho \"Installed the Basic Vim configuration successfully! Enjoy :-)\"\n"
        },
        {
          "name": "my_plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "sources_forked",
          "type": "tree",
          "content": null
        },
        {
          "name": "sources_non_forked",
          "type": "tree",
          "content": null
        },
        {
          "name": "temp_dirs",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_plugins.py",
          "type": "blob",
          "size": 4.04,
          "content": "import re\nimport shutil\nimport tempfile\nimport urllib.request\nimport zipfile\nfrom io import BytesIO\nfrom os import path\n\n# --- Globals ----------------------------------------------\nPLUGINS = \"\"\"\nauto-pairs https://github.com/jiangmiao/auto-pairs\nale https://github.com/dense-analysis/ale\nvim-yankstack https://github.com/maxbrunsfeld/vim-yankstack\nack.vim https://github.com/mileszs/ack.vim\nbufexplorer https://github.com/jlanzarotta/bufexplorer\nctrlp.vim https://github.com/ctrlpvim/ctrlp.vim\nmayansmoke https://github.com/vim-scripts/mayansmoke\nnerdtree https://github.com/preservim/nerdtree\nnginx.vim https://github.com/chr4/nginx.vim\nopen_file_under_cursor.vim https://github.com/amix/open_file_under_cursor.vim\ntlib https://github.com/tomtom/tlib_vim\nvim-addon-mw-utils https://github.com/MarcWeber/vim-addon-mw-utils\nvim-bundle-mako https://github.com/sophacles/vim-bundle-mako\nvim-coffee-script https://github.com/kchmck/vim-coffee-script\nvim-colors-solarized https://github.com/altercation/vim-colors-solarized\nvim-indent-object https://github.com/michaeljsmith/vim-indent-object\nvim-less https://github.com/groenewege/vim-less\nvim-pyte https://github.com/therubymug/vim-pyte\nvim-snipmate https://github.com/garbas/vim-snipmate\nvim-snippets https://github.com/honza/vim-snippets\nvim-surround https://github.com/tpope/vim-surround\nvim-expand-region https://github.com/terryma/vim-expand-region\nvim-multiple-cursors https://github.com/terryma/vim-multiple-cursors\nvim-fugitive https://github.com/tpope/vim-fugitive\nvim-rhubarb https://github.com/tpope/vim-rhubarb\ngoyo.vim https://github.com/junegunn/goyo.vim\nvim-zenroom2 https://github.com/amix/vim-zenroom2\nvim-repeat https://github.com/tpope/vim-repeat\nvim-commentary https://github.com/tpope/vim-commentary\nvim-gitgutter https://github.com/airblade/vim-gitgutter\ngruvbox https://github.com/morhetz/gruvbox\nvim-flake8 https://github.com/nvie/vim-flake8\nvim-pug https://github.com/digitaltoad/vim-pug\nlightline.vim https://github.com/itchyny/lightline.vim\nlightline-ale https://github.com/maximbaz/lightline-ale\nvim-abolish https://github.com/tpope/vim-abolish\nrust.vim https://github.com/rust-lang/rust.vim\nvim-markdown https://github.com/plasticboy/vim-markdown\nvim-gist https://github.com/mattn/vim-gist\nvim-ruby https://github.com/vim-ruby/vim-ruby\ntypescript-vim https://github.com/leafgarland/typescript-vim\nvim-javascript https://github.com/pangloss/vim-javascript\nvim-python-pep8-indent https://github.com/Vimjas/vim-python-pep8-indent\nvim-indent-guides https://github.com/nathanaelkane/vim-indent-guides\nmru.vim https://github.com/vim-scripts/mru.vim\neditorconfig-vim https://github.com/editorconfig/editorconfig-vim\ndracula https://github.com/dracula/vim\ncopilot.vim https://github.com/github/copilot.vim\n\"\"\".strip()\n\nGITHUB_ZIP = \"%s/archive/master.zip\"\n\nSOURCE_DIR = path.join(path.dirname(__file__), \"sources_non_forked\")\n\n\ndef download_extract_replace(plugin_name, zip_path, temp_dir, source_dir):\n    # Download and extract file in temp dir\n    with urllib.request.urlopen(zip_path) as req:\n        zip_f = zipfile.ZipFile(BytesIO(req.read()))\n        zip_f.extractall(temp_dir)\n        content_disp = req.headers.get(\"Content-Disposition\")\n\n    filename = re.findall(\"filename=(.+).zip\", content_disp)[0]\n    plugin_temp_path = path.join(temp_dir, path.join(temp_dir, filename))\n\n    # Remove the current plugin and replace it with the extracted\n    plugin_dest_path = path.join(source_dir, plugin_name)\n\n    try:\n        shutil.rmtree(plugin_dest_path)\n    except OSError:\n        pass\n\n    shutil.move(plugin_temp_path, plugin_dest_path)\n    print(\"Updated {0}\".format(plugin_name))\n\n\ndef update(plugin):\n    name, github_url = plugin.split(\" \")\n    zip_path = GITHUB_ZIP % github_url\n    try:\n        download_extract_replace(name, zip_path, temp_directory, SOURCE_DIR)\n    except Exception as exp:\n        print(\"Could not update {}. Error was: {}\".format(name, str(exp)))\n\n\nif __name__ == \"__main__\":\n    temp_directory = tempfile.mkdtemp()\n\n    try:\n        [update(x) for x in PLUGINS.splitlines()]\n    finally:\n        shutil.rmtree(temp_directory)\n"
        },
        {
          "name": "vimrcs",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}