{
  "metadata": {
    "timestamp": 1736566289416,
    "page": 39,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Tencent/MMKV",
      "stars": 17594,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.8154296875,
          "content": "---\nBasedOnStyle: LLVM\nIndentWidth: 4\nTabWidth: 4\nAlwaysBreakTemplateDeclarations: true\nAllowShortFunctionsOnASingleLine: InlineOnly\n#AllowShortLambdasOnASingleLine: Inline\nBreakAfterJavaFieldAnnotations: true\nBreakBeforeBraces: Linux\nSpaceAfterCStyleCast: true\nIndentCaseLabels: true\nAccessModifierOffset: -4\nBreakBeforeBraces: Custom\nBraceWrapping:\n    AfterNamespace: false\n    AfterClass: false\n    AfterFunction: false\n\nBreakConstructorInitializersBeforeComma: true\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nBinPackParameters: false\nReflowComments: false\nObjCBlockIndentWidth: 4\n---\nLanguage: Cpp\nColumnLimit: 120\nIndentPPDirectives: AfterHash\n---\nLanguage: ObjC\nColumnLimit: 0\n#UseTab: ForIndentation\n---\nLanguage: Java\nColumnLimit: 120\nAllowShortFunctionsOnASingleLine: None\nBreakBeforeBinaryOperators: NonAssignment\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5517578125,
          "content": "## Various settings\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\n\n## Other\n*.xccheckout\n*.moved-aside\n*.xcuserstate\n*.xcscmblueprint\n\n#python\nvenv\n\n## OS X\n.DS_Store\n\n## Xcode\nDerivedData\n\n## Visual Studio\n.vs\n[Dd]ebug/\n[Rr]elease/\n*.user\n*.VC.opendb\n*.VC.db\nipch/\n\n#cmake\nCMakeCache.txt\nCMakeFiles/\ncmake_install.cmake\nLinux/Makefile\ncmake-build-debug/\ncmake-build-release/\nbuild/\nbuild_*/\ndist/\n*.egg-info/\n.cmake\n\n#CLion\n.idea\n\n#Android Studio\n.cxx\n\npubspec.lock\nPodfile.lock\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.09765625,
          "content": "[submodule \"Python/pybind11\"]\n\tpath = Python/pybind11\n\turl = https://github.com/pybind/pybind11.git\n"
        },
        {
          "name": "Android",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 39.8349609375,
          "content": "# MMKV Change Log\n## v2.0.2 / 2024-12-27\nMary holiday and a happy new year!\n### Changes for All platforms\n* Fix a bug that MMKV might fail to backup/restore across different filesystems.\n* Add protection from invalid value size of auto-key-expire mmkv.\n\n### Android\n* If the running App is 32-bit only, warn about it (by throwing `UnsupportedArchitectureException`) before trying to load native lib.\n* Add forward support for the correct filename with a custom root path.\n\n### HarmonyOS NEXT\n* Obfuscation fully supported.\n* Use atomic file rename on OHOS.\n* Add forward support for the correct filename with a custom root path.\n\n### Win32\n* Only `mmap()` on `ftruncate()`/`zeroFillFile()` failure iff we have a valid file mapping before.\n\n## v2.0.1 / 2024-11-12\n**This is a hotfix release.**\n### Changes for All platforms\n* Fix a bug that might cause MMKV to become dead-locked for other threads after decoding container-type values. The affected platforms and value types are listed below. So don't be surprised if you find no update on the unaffected platforms.\n\n### HarmonyOS NEXT\n* Fix a bug that MMKV might become dead-locked for other threads after `decodeStringSet()` / `decodeNumberSet` / `decodeBoolSet` or decoding `TypedArray`.\n\n### Flutter\n* Fix the bug on HarmonyOS NEXT listed above. A version named v2.0.1 was added to fix the Android version conflict between the LTS series & v2.0. Thanks to the federated plugins framework, only the underlying `mmkv_ohos` plugin is upgraded, the `mmkv` plugin stays the same.\n\n### POSIX\n* Fix a bug that MMKV might become dead-locked for other threads after decoding `std::vector<T>` or `std::span<T>` values.\n\n## v2.0.0 / 2024-10-21\n**This release is a breaking change release, especially for Android.**\n### Changes for All platforms\n* Add **readonly mode** support.\n* Fix a compile error when `MMKV_DISABLE_CRYPT` is defined and MMKV is built by source in DEBUG.\n\n### Android\n* Support 16K page size for Android 15.\n* Drop the support of **32-bit ABI**.\n* Bump the mini **SDK level to API 23**.\n\n### iOS / macOS\n* Add Mac Catalyst support\n\n### Flutter\n* Add add log/error/content-change callback.\n\n### HarmonyOS NEXT\n* Add add log/error/content-change callback.\n* Support obfuscation. For the time being, you will have to manually copy the content of MMKV's [consumer-rules.txt](https://github.com/Tencent/MMKV/blob/master/OpenHarmony/MMKV/consumer-rules.txt) into your App's obfuscation-rules.txt.\n\n### Win32\n* Replace `random()` with `rand()` to fix a compile error.\n\n## v1.3.9 / 2024-07-26\n**This is a Long Term Support (LTS) release.**\n### Changes for All platforms\n* Fix a data corruption bug on an encrypted MMKV with only one key value stored.\n* Make encryption more resilient from brute force cracking.\n* Fix a bug that `pthread_mutex` is not being destroyed correctly.\n\n### Android\n* Use an alternative way to get the process name to avoid potential App review issues.\n* Upgrade to NDK 26.3.11579264.\n\n### Flutter\n* Add support for HarmonyOS NEXT. In fact, a temp version named v1.3.8 adds this support with the native lib of v1.3.7. To avoid potential confusion, bump both versions to v1.3.9.\n\n## v1.3.7 / 2024-07-08\n### Android & Flutter\n**This Long Term Support (LTS) release** primarily reintroduces support for the ARMv7 architecture and lowers the minimum SDK version requirement to 21. Please note that only critical bug fixes will be applied to the 1.3.x series. New features will be introduced in version 2.0 and later, which will discontinue support for 32-bit architectures and raise the minimum SDK version requirement to 23.\n\n### For other platforms\nThis is exactly the same as v1.3.6, so don't be surprised if you don't see this version in CocoaPods or OHPM.\n\n## v1.3.6 / 2024-07-05\n### Changes for All platforms\n* The Core library now upgrades the C++ standard from C++17 to C++20 to make the most of morden C++ feature such as `Concept` & unordered containers with `std::string_view` as key. From now on, if you build MMKV by source (iOS, Windows, POSIX, etc), you will need a C++ compiler that supports the C++20 standard. If you only use MMKV in binary (Android, OHOS, etc), this upgrade of the C++ compiler is not required.\n* The key type changes from `std::string` to `std::string_view`, to avoid unnecessary string construction and destruction when the key is a raw string.\n\n### Android\n* Use the latest ashmem API if possible.\n* Use the latest API to get the device API level.\n\n### Flutter\n* MMKV will try to load libmmkv.so before Dart code, to reduce the error of loading library in Android.\n\n### HarmonyOS NEXT\n* Fix a bug that a `String` value might get truncated on encoding.\n* MMKV returns `undefined` when a key does not exist, previously a default value of the type (`false` for `boolean`, `0` for `number`, etc) is returned.\n* Add the feature to encode/decode a `float` value.\n* Add the feature to encode/decode a `TypedArray` value.\n* Support encoding a part of an `ArrayBuffer`.\n\n### iOS/macOS\n* Hide the default `NSObject.initialize()` from Swift/ObjC to prevent potential misuse.\n\n### POSIX\n* Support encode/decode `std::vector<T>` or `std::span<T>` values, with T as primitive types.\n* Fix a compile error on Linux env.\n* Fix a compile error on the GNU compiler.\n* Fix a compile error with some old version of zlib (on CentOS).\n\n### Python\n* Python now runs on Windows. Check out the latest [wiki](https://github.com/Tencent/MMKV/wiki/python_setup) for instructions.\n\n### Windows\n* Support encode/decode `std::vector<T>` or `std::span<T>` values, with T as primitive types.\n* Python now runs on Windows. Check out the latest [wiki](https://github.com/Tencent/MMKV/wiki/python_setup) for instructions.\n\n## v1.3.5 / 2024-04-24\n### HarmonyOS NEXT\n* This is the first official support of HarmonyOS NEXT.\n* Most things actually work!\n* Checkout the [wiki](https://github.com/Tencent/MMKV/wiki/ohos_setup) for more.\n\n### Flutter\n* Migrate to federated plugins to avoid the iOS rename headache. From now on, no more renaming from `mmkv` to `mmkvflutter` is needed.\n* Bump iOS Deployment Target to iOS 12.\n* Bump Android minSdkVersion to 23.\n\n### iOS & macOS\n* Avoid using so-called privacy APIs (`lstat()`, `fstat()`, `NSUserDefaults`).\n* Bump iOS Deployment Target to iOS 12.\n\n### Android\n* Bump minSdkVersion to 23.\n* Drop armv7 & x86 support.\n\n### POSIX\n* Use the embedded libz when libz can not be found.\n* Fix compile error when building with gcc.\n\n### Windows\n* Support x64 architecture.\n\n## v1.3.4 / 2024-03-15\n### Changes for All platforms\n* Make `trim()` more robust in multi-process mode.\n\n### iOS & macOS\n* Support visionOS.\n\n### POSIX\n* Fix a compile error on `::unlink()`.\n\n## v1.3.3 / 2024-01-25\n### Changes for All platforms\n* Add `removeStorage()` static method to safely delete underlying files of an MMKV instance.\n* Add protection from a potential crash of a multi-process MMKV loading due to the MMKV file not being valid.\n* Add back the lazy load feature. It was first introduced in v1.2.16. But it was rollbacked in v1.3.0 of potential ANR & file corruption. Now it's clear that the bug was caused by something else, it's time to bring it back.\n* **Optimize loading speed** by using shared inter-process lock unless there's a need to truncate the file size, which is rare.\n* Make these two lately added features **more robust**: customizing the initial file size & optimizing write speed when there's only one key inside MMKV.\n\n### Android\n* Fix a bug that `null` is returned when the value is in fact an empty ByteArray.\n* Fix AGP >= 8 package namespace error.\n* Fix the `FastNative` naming conflict.\n* Upgrade to SDK 34.\n* Upgrade `androidx.annotation`  to v1.7.1.\n\n### iOS & macOS\n* On the Xcode 15 build, an App will crash on iOS 14 and below. Previously we have recommended some workarounds (check the v1.3.2 release note for details). Now you can use Xcode 15.1 to fix this issue.\n* Fix a bug that the multi-process mode won't configure correctly. It was introduced in v1.3.2.\n* Fix a macro naming conflict.\n* Avoid using a so-called privacy API when creating temp files.\n\n### POSIX\n* Fix a compile error on `memcpy()`.\n\n### Golang\n* Fix a compile error when `MMKV_DISABLE_CRYPT` is on.\n\n## v1.3.2 / 2023-11-20\nAmong most of the features added in this version, the credit goes to @kaitian521.\n### Changes for All platforms\n* Add the feature of customizing the **initial file size** of an MMKV instance.\n* **Optimize write speed** when there's only one key inside MMKV, the new key is the same as the old one, and MMKV is in `SINGLE_PROCESS_MODE`.\n* **Optimize write speed** by overriding from the beginning of the file instead of append in the back, when there's zero key inside MMKV, and MMKV is in `SINGLE_PROCESS_MODE`.\n* Add the feature of `clearAll()` with keeping file disk space unchanged, **reducing the need to expand file size** on later insert & update operations. This feature is off by default, you will have to call it with relative params or newly added methods. \n* Add the feature of **comparing values before setting/encoding** on the same key.\n* Fix a potential bug that the MMKV file will be invalid state after a successful expansion but a failure `zeroFill()`, will lead to a crash.\n* Fix a potential crash due to other module/static lib turn-off **RTTI**, which will cause MMKV to fail to catch `std::exception`.\n* Fix several potential crash due to the MMKV file not being valid.\n\n### Android\n* Use the `-O2` optimization level by default, which will **reduce native lib size** and improve read/write speed a little bit.\n* Experimantal use `@fastNative` annotation on `enableCompareBeforeCompare()` to speed up JNI call.\n\n### iOS & macOS\n* Optimize auto-clean logic to **reduce lock waiting time**.\n* Turn-off mlock() protection in background on iOS 13+. We have **verified it on WeChat** that the protection is no longer needed from at least iOS 13. Maybe iOS 12 or older is also not needed, but we don't have the chance to verify that because WeChat no longer supports iOS 12.\n\n#### Known Issue\n* On Xcode 15 build, App will crash on iOS 14 and below. The bug is introduced by Apple's new linker. The official solutions provided by Apple are either:\n  * Drop the support of iOS 14.\n  * Add `-Wl,-weak_reference_mismatches,weak` or `-Wl,-ld_classic` options to the `OTHER_LDFLAGS` build setting of Xcode 15. Note that these options are **not recognized** by older versions of Xcode.\n  * Use older versions of Xcode, or **wait for Xcode 15.2**.\n\n## v1.3.1 / 2023-8-11\nThis is a hotfix version. It's **highly recommended** that v1.2.16 & v1.3.0 users upgrade as soon as possible.\n\n### Changes for All platforms\n* Fix a critical bug that might cause multi-process MMKV corrupt. This bug was introduced in v1.2.16.\n* Add the ability to filter expired keys on `count()` & `allKeys()` methods when auto key expiration is turn on.\n* Reduce the `msync()` call on newly created MMKV instances.\n\n### iOS & macOS\n* Fix a bug that NSKeyedArchive object might fail to decode when auto key expiration is turn on.\n\n## v1.3.0 / 2023-06-14\n### Changes for All platforms\n* Add auto key expiration feature. Note that this is a breaking change, once upgrade to auto expiration, the MMKV file is not valid for older versions of MMKV (v1.2.16 and below) to correctly operate.\n* Roll back the lazy load optimization due to reported ANR issues. It was introduced in v1.2.16.\n\n### iOS & macOS\n* Fix a potential memory leak on setting a new value for an existing key.\n* Upgrade min support target to iOS 11 / macOS 10.13 / tvOS 13 / watchOS 4.\n\n### Windows\n* Fix a bug that might fail to truncate the file size to a smaller size in some cases.\n\n### Flutter\n* The version of MMKV for Flutter is now the same as the MMKV native library.\n* Starting from v1.3.0, Flutter for Android will use `com.tencent:mmkv`. Previously it's `com.tencent:mmkv-static`. It's the same as `com.tencent:mmkv` starting from v1.2.11.\n\n## v1.2.16 / 2023-04-20\n### Changes for All platforms\n* Optimization: The actual file content is lazy loaded now, saving time on MMKV instance creation, and avoiding lock waiting when a lot of instances are created at the same time.\n* Fix a bug when restoring a loaded MMKV instance the meta file might mistakenly report corrupted.\n\n### Android\n* Optimization: Remove unnecessary binder call on main process instantiation.\n\n### Flutter\n* Fix a crash on decoding an empty list.\n* Remove deprecated dependence.\n* Make the script more robust to fix the iOS Flutter plugin name.\n\n### Windows\n* Fix a string format bug on the MinGW64 environment.\n\n### golang\n* Fix a build error on 32-bit OS.\n\n## v1.2.15 / 2023-01-12\n### Changes for All platforms\n* Log handler now handles all logs from the very beginning, especially the logs in initialization.\n* Log handler register method is now deprecated. It's integrated with `initialize()`.\n* Fix a bug that `lock()`/`unlock()`/`try_lock()` is not thread-safe.\n\n### Flutter\n* Reduce the privacy info needed to obtain android `sdkInt`, avoid unnecessary risk on Android App Review.\n\n### iOS & macOS\n* Fix a compile error on macOS.\n* Fix a bug that some ObjC exceptions are not being caught.\n* Add assert on nil MMKV base path, protect from mis-using MMKV in global variable initialization.\n* Starting from v1.2.15, one must call `+[MMKV initializeMMKV:]` manually before calling any MMKV methods.\n\n### golang\n* Fix a compile error on GCC.\n\n### Windows\n* Support CMake project on Windows.\n\n## v1.2.14 / 2022-08-10\n### Changes for All platforms\n* Fix a bug that `MMKV.getXXX()` may return invalid results in multi-process mode.\n\n### Android\n* Return `[]` instead of `null` on empty `StringSet` from `MMKV.decodeStringSet()` methods.\n* Upgrade Android Compile & Target SDK to `32`.\n\n### iOS\n* Protect from the crash in `-[MMKV getObject:forKey:]` method when the key-value doesn't exist.\n\n## v1.2.13 / 2022-03-30\n\n### Android\n* Fix crash on using Ashmem while `MMKV_DISABLE_CRYPT` macro is defined.\n\n### iOS\n* Add ability to retrieve key existece while getting value, aka `-[MMKV getXXX:forKey:hasValue:]` methods.\n\n### POSIX\n* Add ability to retrieve key existece while getting value, aka `MMKV::getXXX(key, defaultValue, hasValue)` methods.\n\n### Windows\n* Add ability to retrieve key existece while getting value, aka `MMKV::getXXX(key, defaultValue, hasValue)` methods.\n\n## v1.2.12 / 2022-01-17\n### Changes for All platforms\n* Fix a bug that a subsequential `clearAll()` call may fail to take effect in multi-process mode.\n* Hide some OpenSSL symbols to prevent link-time symbol conflict, when an App somehow also static linking OpenSSL.\n\n### Android\n* Upgrade `compileSdkVersion` & `targetSdkVersion` from `30` to `31`.\n\n## v1.2.11 / 2021-10-26\n\n### Android\n* Due to increasing report about crash inside STL, we have decided to make MMKV **static linking** `libc++` **by default**. Starting from v1.2.11, `com.tencent:mmkv-static` is the same as `com.tencent:mmkv`.\n* For those still in need of MMKV with shared linking of `libc++_shared`, you could use `com.tencent:mmkv-shared` instead.\n* Add backup & restore ability.\n\n### iOS / macOS\n* Add backup & restore ability.\n* Support tvOS.\n* Fix a compile error on some old Xcode.\n\n### Flutter (v1.2.12)\n* Add backup & restore ability.\n\n### POSIX / golang / Python\n* Add backup & restore ability.\n* Fix a compile error on Gentoo.\n\n### Windows\n* Add backup & restore ability.\n\n## v1.2.10 / 2021-06-25\nThis version is mainly for Android & Flutter.  \n\n### Android\n* Complete **JavaDoc documentation** for all public methods, classes, and interfaces. From now on, you can find the [API reference online](https://javadoc.io/doc/com.tencent/mmkv).\n* Drop the support of **armeabi** arch. Due to some local build cache mistake, the last version (v1.2.9) of MMKV still has an unstripped armeabi arch inside. This is fixed.\n* Change `MMKV.mmkvWithID()` from returning `null` to throwing exceptions on any error.\n* Add `MMKV.actualSize()` to get the actual used size of the file.\n* Mark `MMKV.commit()` & `MMKV.apply()` as deprecated, to avoid some misuse after migration from SharedPreferences to MMKV.\n\n### Flutter (v1.2.11)\n* Bug Fixed: When building on iOS, occasionally it will fail on symbol conflict with other libs. We have renamed all public native methods to avoid potential conflict.\n* Keep up with MMKV native lib v1.2.10.\n\n## v1.2.9 / 2021-05-26\nThis version is mainly for Android & Flutter.  \n\n### Android\n* Drop the support of **armeabi** arch. As has been mention in the last release, to avoid some crashes on the old NDK (r16b), and make the most of a more stable `libc++`, we have decided to upgrade MMKV's building NDK in this release. That means we can't support **armeabi** anymore. Those who still in need of armeabi can **build from sources** by following the [instruction in the wiki](https://github.com/Tencent/MMKV/wiki/android_setup).\n\nWe really appreciate your understanding.\n\n### Flutter (v1.2.10)\n* Bug Fixed: When calling `MMKV.encodeString()` with an empty string value on Android, `MMKV.decodeString()` will return `null`.\n* Bug Fixed: After **upgrading** from Flutter 1.20+ to 2.0+, calling `MMKV.defaultMMKV()` on Android might fail to load, you can try calling `MMKV.defaultMMKV(cryptKey: '\\u{2}U')` with an **encrytion key** '\\u{2}U' instead.\n* Keep up with MMKV native lib v1.2.9.\n\n## v1.2.8 / 2021-05-06\nThis will be the last version that supports **armeabi arch** on Android. To avoid some crashes on the old NDK (r16b), and make the most of a more stable `libc++`, we have decided to upgrade MMKV's building NDK in the next release. That means we can't support **armeabi** anymore.  \n\nWe really appreciate your understanding.\n\n### Android\n* Migrate MMKV to Maven Central Repository. For versions older than v1.2.7 (including), they are still available on JCenter.\n* Add `MMKV.disableProcessModeChecker()`. There are some native crash reports due to the process mode checker. You can disable it manually.\n* For the same reason described above (native crashed), MMKV will now turn off the process mode checker on a non-debuggable app (aka, a release build).\n* For MMKV to detect whether the app is debuggable or not, when calling `MMKV.initialize()` to customize the root directory, a `context` parameter is required now.\n\n### iOS / macOS\n* Min iOS support has been **upgrade to iOS 9**.\n* Support building by Xcode 12.\n\n### Flutter (v1.2.9)\n* Support null-safety.\n* Upgrade to flutter 2.0.\n* Fix a crash on the iOS when calling `encodeString()` with an empty string value.\n\n**Known Issue on Flutter**  \n\n* When calling `encodeString()` with an empty string value on Android, `decodeString()` will return `null`. This bug will be fixed in the next version of Android Native Lib. iOS does not have such a bug.\n\n### Windows\n* Fix a compile error on Visual Studio 2019.\n\n## v1.2.7 / 2020-12-25\nHappy holidays everyone!\n \n### Changes for All platforms\n* Fix a bug when calling `sync()` with `false ` won't do `msync()` asynchronous and won't return immediately.\n\n### Android\n* Fix an null pointer exception when calling `putStringSet()` with `null`.\n* Complete review of all MMKV methods about Java nullable/nonnull annotation.\n* Add API for `MMKV.initialize()` with both `Context` and `LibLoader` parammeters.\n\n### Flutter (v1.2.8)\n* Fix a crash on the iOS simulator when accessing the default MMKV instance.\n* Fix a bug on iOS when initing the default MMKV instance with a crypt key, the instance is still in plaintext.\n\n### Golang\nAdd golang for POSIX platforms. Most things actually work!. Check out the [wiki](https://github.com/Tencent/MMKV/wiki/golang_setup) for information.\n\n## v1.2.6 / 2020-11-27\n### Changes for All platforms\n* Fix a file corruption when calling `reKey()` after `removeKeys()` has just been called.\n\n### Android\n* Fix compile error when `MMKV_DISABLE_CRYPT` is set.\n* Add a preprocess directive `MMKV_DISABLE_FLUTTER` to disable flutter plugin features. If you integrate MMKV by source code, and if you are pretty sure the flutter plugin is not needed, you can turn that off to save some binary size.\n\n### Flutter (v1.2.7)\nAdd MMKV support for **Flutter** on iOS & Android platform.  Most things actually work!  \nCheck out the [wiki](https://github.com/Tencent/MMKV/wiki/flutter_setup) for more info.\n\n## v1.2.5 / 2020-11-13\nThis is a pre-version for Flutter. The official Flutter plugin of MMKV will come out soon. Stay Tune!\n\n### iOS / macOS\n* Fix an assert error of encrypted MMKV when encoding some `<NSCoding>` objects.\n* Fix a potential leak when decoding duplicated keys from the file.\n* Add `+[MMKV pageSize]`, `+[MMKV version]` methods.\n* Add `+[MMKV defaultMMKVWithCryptKey:]`, you can encrypt the default MMKV instance now, just like the Android users who already enjoy this for a long time.\n* Rename `-[MMKV getValueSizeForKey:]` to `-[MMKV getValueSizeForKey: actualSize:]` to align with Android interface.\n\n### Android\n* Fix a potential crash when getting MMKV instances in multi-thread at the same time.\n* Add `MMKV.version()` method.\n\n## v1.2.4 / 2020-10-21\nThis is a hotfix mainly for iOS.\n\n### iOS / macOS\n* Fix a decode error of encrypted MMKV on some devices.\n\n### Android\n* Fix a potential issue on checking `rootDir` in multi-thread while MMKV initialization is not finished.\n\n## v1.2.3 / 2020-10-16\n### Changes for All platforms\n* Fix a potential crash on 32-bit devices due to pointer alignment issue.\n* Fix a decode error of encrypted MMKV on some 32-bit devices.\n\n### iOS / macOS\n* Fix a potential `crc32()` crash on some kind of arm64 devices.\n* Fix a potential crash after calling `+[MMKV onAppTerminate]`.\n\n### Android\n* Fix a rare lock conflict on `checkProcessMode()`.\n\n### POSIX\nAdd MMKV support for **Python** on POSIX platforms.  Most things actually work!  \nCheck out the [wiki](https://github.com/Tencent/MMKV/wiki/python_setup) for more info.\n\n## v1.2.2 / 2020-07-30\n\n### iOS / macOS\n* Add auto clean up feature. Call `+[MMKV enableAutoCleanUp:]` to enable auto cleanup MMKV instances that not been accessed recently.\n* Fix a potential crash on devices under iPhone X.\n\n### Android\n* Add multi-process mode check. After so many issues had been created due to mistakenly using MMKV in multi-process mode in Android, this check is added. If an MMKV instance is accessed with `SINGLE_PROCESS_MODE` in multi-process, an `IllegalArgumentException` will be thrown.\n\n### POSIX\n* Add support for armv7 & arm64 arch on Linux.\n\n## v1.2.1 / 2020-07-03\nThis is a hotfix release. Anyone who has upgraded to v1.2.0 should upgrade to this version **immediately**.\n\n* Fix a potential file corruption bug when writing a file that was created in versions older than v1.2.0. This bug was introduced in v1.2.0.\n* Add a preprocess directive `MMKV_DISABLE_CRYPT` to turn off MMKV encryption ability once and for all. If you integrate MMKV by source code, and if you are pretty sure encryption is not needed, you can turn that off to save some binary size.\n* The parameter `relativePath` (customizing a separate folder for an MMKV instance), has been renamed to `rootPath`. Making it clear that an absolute path is expected for that parameter.\n\n### iOS / macOS\n* `-[MMKV mmkvWithID: relativePath:]` is deprecated. Use `-[MMKV mmkvWithID: rootPath:]` instead. \n* Likewise, `-[MMKV mmkvWithID: cryptKey: relativePath:]` is deprecated. Use `-[MMKV mmkvWithID: cryptKey: rootPath:]` instead. \n\n## v1.2.0 / 2020-06-30\nThis is the second **major version** of MMKV. Everything you call is the same as the last version, while almost everything underneath has been improved. \n\n* **Reduce Memory Footprint**. We used to cache all key-values in a dictionary for efficiency. From now on we store the offset of each key-value inside the mmap-memory instead, **reducing memory footprint by almost half** for (non-encrypt) MMKV. And the accessing efficiency is almost the same as before. As for encrypted MMKV, we can't simply store the offset of each key-value, the relative encrypt info needs to be stored as well. That will be too much for small key-values. We only store such info for large key-values (larger than 256B).\n* **Improve Writeback Efficiency**. Thanks to the optimization above, we now can implement writeback by simply calling **memmove()** multiple times. Efficiency is increased and memory consumption is down.\n* **Optimize Small Key-Values**. Small key-values of encrypted MMKV are still cached in memory, as all the old versions did. From now on, the struct `MMBuffer` will try to **store small values in the stack** instead of in the heap, saving a lot of time from `malloc()` & `free()`. In fact, all primitive types will be store in the stack memory.\n\nAll of the improvements above are available to all supported platforms. Here are the additional changes for each platform.\n\n### iOS / macOS\n* **Optimize insert & delete**. Especially for inserting new values to **existing keys**, or deleting keys. We now use the UTF-8 encoded keys in the mmap-memory instead of live encoding from keys, cutting the cost of string encoding conversion.\n* Fix Xcode compile error on some projects.\n* Drop the support of iOS 8. `thread_local` is not available on iOS 8. We choose to drop support instead of working around because iOS 8's market share is considerably small.\n\n### POSIX\n* It's known that GCC before 5.0 doesn't support C++17 standard very well. You should upgrade to the latest version of GCC to compile MMKV.\n\n## v1.1.2 / 2020-05-29\n\n### Android / iOS & macOS / Windows / POSIX\n\n* Fix a potential crash after `trim()` a multi-process MMKV instance.\n* Improve `clearAll()` a bit.\n\n## v1.1.1 / 2020-04-13\n\n### iOS / macOS\n\n* Support WatchOS.\n* Rename `+[MMKV onExit]` to `+[MMKV onAppTerminate]`, to avoid naming conflict with some other OpenSource projects.\n* Make background write protection much more robust, fix a potential crash when writing meta info in background.\n* Fix a potential data corruption bug when writing a UTF-8 (non-ASCII) key.\n\n### Android\n\n* Fix a crash in the demo project when the App is hot reloaded.\n* Improve wiki & readme to recommend users to init & destruct MMKV in the `Application` class instead of the `MainActivity` class.\n\n### POSIX\n* Fix two compile errors with some compilers.\n\n## v1.1.0 / 2020-03-24\nThis is the first **major breaking version** ever since MMKV was made public in September 2018, introducing bunches of improvement. Due to the Covid-19, it has been delayed for about a month. Now it's finally here! \n\n* **Improved File Recovery Strategic**. We store the CRC checksum & actual file size on each sync operation & full write back, plus storing the actual file size in the same file(aka the .crc meta file) as the CRC checksum. Base on our usage inside WeChat on the iOS platform, it cuts the file **corruption rate down by almost half**.\n* **Unified Core Library**. We refactor the whole MMKV project and unify the cross-platform Core library. From now on, MMKV on iOS/macOS, Android, Windows all **share the same core logic code**. It brings many benefits such as reducing the work to fix common bugs, improvements on one platform are available to other platforms immediately, and much more.\n* **Supports POSIX Platforms**. Thanks to the unified Core library, we port MMKV to POSIX platforms easily.\n* **Multi-Process Access on iOS/macOS**. Thanks to the unified Core library, we add multi-process access to iOS/macOS platforms easily.\n* **Efficiency Improvement**. We make the most of armv8 ability including the AES & CRC32 instructions to tune **encryption & error checking speed up by one order higher** than before on armv8 devices. There are bunches of other speed tuning all around the whole project.\n\nHere are the old-style change logs of each platform.\n\n### iOS / macOS\n* Adds **multi-process access** support. You should initialize MMKV by calling `+[MMKV initializeMMKV: groupDir: logLevel:]`, passing your **app group id**. Then you can get a multi-process instance by calling `+[MMKV mmkvWithID: mode:]` or `+[MMKV mmkvWithID: cryptKey: mode:]`, accessing it cross your app & your app extensions.\n* Add **inter-process content change notification**. You can get MMKV changes notification of other processes by implementing `- onMMKVContentChange:` of `<MMKVHandler>` protocol.\n* **Improved File Recovery Strategic**. Cuts the file corruption rate down by almost half. Details are above.\n* **Efficiency Improvement**. Encryption & error checking speed are up by one order higher on armv8 devices(aka iDevice including iPhone 5S and above). Encryption on armv7 devices is improved as well. Details are ahead.\n* Other speed improvements. Refactor core logic using **MRC**, improve std::vector `push_back()` speed by using **move constructors** & move assignments.\n* `+[MMKV setMMKVBasePath:]` & `+[MMKV setLogLevel:]` are marked **deprecated**. You should use `+[MMKV initializeMMKV:]` or `+[MMKV initializeMMKV: logLevel:]` instead.\n* The `MMKVLogLevel` enum has been improved in Swift. It can be used like `MMKVLogLevel.info` and so on.\n\n### Android\n* **Improved File Recovery Strategic**. Cuts the file corruption rate down by almost half. Details are above.\n* **Efficiency Improvement**. Encryption & error checking speed are up by one order higher on armv8 devices with the `arm64-v8a` abi. Encryption on `armeabi` & `armeabi-v7a` is improved as well. Details are ahead.\n* Add exception inside core encode & decode logic, making MMKV much more robust.\n* Other speed improvements. Improve std::vector `push_back()` speed by using **move constructors** & move assignments.\n\n### Windows\n* **Improved File Recovery Strategic**. Cuts the file corruption rate down by almost half. Details are above.\n* Add exception inside core encode & decode logic, making MMKV much more robust.\n* Other speed improvements. Improve std::vector `push_back()` speed by using **move constructors** & move assignments.\n\n### POSIX\n* Most things actually work! We have tested MMKV on the latest version of Linux(Ubuntu, Arch Linux, CentOS, Gentoo), and Unix(macOS, FreeBSD, OpenBSD) on the time v1.1.0 is released.\n\n## v1.0.24 / 2020-01-16\n\n### iOS / macOS\nWhat's new  \n\n* Fix a bug that MMKV will fail to save any key-values after calling `-[MMKV clearMemoryCache]` and then `-[MMKV clearAll]`.\n* Add `+[MMKV initializeMMKV:]` for users to init MMKV in the main thread, to avoid an iOS 13 potential crash when accessing `UIApplicationState` in child threads.\n* Fix a potential crash when writing a uniquely constructed string.\n* Fix a performance slow down when acquiring MMKV instances too often.\n* Make the baseline test in MMKVDemo more robust to NSUserDefaults' caches.\n\n### Android\nWhat's new  \n\n* Fix `flock()` bug on ashmem files in Android.\n* Fix a potential crash when writing a uniquely constructed string.\n* Fix a bug that the MMKVDemo might crash when running in a simulator.\n\n### Windows\n* Fix a potential crash when writing a uniquely constructed string or data.\n\n## v1.0.23 / 2019-09-03\n\n### iOS / macOS\nWhat's new  \n\n* Fix a potential security leak on encrypted MMKV.\n\n### Android\nWhat's new  \n\n* Fix a potential security leak on encrypted MMKV.\n* Fix filename bug when compiled on Windows environment.\n* Add option for decoding String Set into other `Set<>` classes other than the default `HashSet<String>`, check `decodeStringSet()` for details.\n* Add `putBytes()` & `getBytes()`, to make function names more clear and consistent.\n* Add notification of content changed by other process, check the new `MMKVContentChangeNotification<>` interface & `checkContentChangedByOuterProcess()` for details.\n\n### Windows\nWhat's new  \n\n* Fix a potential security leak on encrypted MMKV.\n* Fix `CriticalSection` init bug.\n\n## v1.0.22 / 2019-06-10\n\n### iOS / macOS\nWhat's new  \n\n* Fix a bug that MMKV will corrupt while adding just one key-value, and reboot or clear memory cache. This bug was introduced in v1.0.21.\n\n### Android\nWhat's new  \n\n* Fix a bug that MMKV will corrupt while adding just one key-value, and reboot or clear memory cache. This bug was introduced in v1.0.21.\n\n### Windows\nWhat's new  \n\n* Fix a bug that MMKV will corrupt while adding just one key-value, and reboot or clear memory cache. This bug was introduced in v1.0.21.\n\n## v1.0.21 / 2019-06-06\n### iOS / macOS\nWhat's new  \n\n* Fix a bug that MMKV might corrupt while repeatedly adding & removing key-value with specific length. This bug was introduced in v1.0.20.\n\n### Android\nWhat's new  \n\n* Fix a bug that MMKV might corrupt while repeatedly adding & removing key-value with specific length. This bug was introduced in v1.0.20.\n\n### Windows\nWhat's new  \n\n* Fix a bug that MMKV might corrupt while repeatedly adding & removing key-value with specific length. This bug was introduced in v1.0.20.\n\n## v1.0.20 / 2019-06-05\n### iOS / macOS\nWhat's new  \n\n* Fix a bug that MMKV might crash while storing key-value with specific length.\n* Fix a bug that `-[MMKV trim]` might not work properly.\n\n### Android\nWhat's new  \n\n* Migrate to AndroidX library.\n* Fix a bug that MMKV might crash while storing key-value with specific length.\n* Fix a bug that `trim()` might not work properly.\n* Fix a bug that dead-lock might be reported by Android mistakenly.\n* Using `RegisterNatives()` to simplify native method naming.\n\n### Windows\n* Fix a bug that MMKV might crash while storing key-value with specific length.\n* Fix a bug that `trim()` might not work properly.\n* Fix a bug that `clearAll()` might not work properly.\n\n## v1.0.19 / 2019-04-22\n### iOS / macOS\nWhat's new  \n\n* Support Swift 5.\n* Add method to get all keys `-[MMKV allKeys]`;\n* Add method to synchronize to file asynchronously `-[MMKV async]`.\n* Fix a pod configuration bug that might override target project's C++ setting on `CLANG_CXX_LANGUAGE_STANDARD`.\n* Fix a bug that `DEFAULT_MMAP_SIZE` might not be initialized before getting any MMKV instance.\n* Fix a bug that openssl's header files included inside MMKV might mess with target project's own openssl implementation.\n\n### Android\nWhat's new  \n\n* Support Android Q.\n* Add method to synchronize to file asynchronously `void sync()`, or `void apply()` that comes with `SharedPreferences.Editor` interface.\n* Fix a bug that a buffer with length of zero might be returned when the key is not existed.\n* Fix a bug that `DEFAULT_MMAP_SIZE` might not be initialized before getting any MMKV instance.\n\n\n## v1.0.18 / 2019-03-14\n### iOS / macOS\nWhat's new  \n\n* Fix a bug that defaultValue was not returned while decoding a `NSCoding` value.\n* Fix a compile error on static linking MMKV while openssl is static linked too.\n\n### Android\nWhat's new  \n\n* Introducing **Native Buffer**. Checkout [wiki](https://github.com/Tencent/MMKV/wiki/android_advance#native-buffer) for details.\n* Fix a potential crash when trying to recover data from file length error.\n* Protect from mistakenly passing `Context.MODE_MULTI_PROCESS` to init MMKV.\n\n\n### Windows\n* Fix a potential crash when trying to recover data from file length error.\n\n## v1.0.17 / 2019-01-25\n### iOS / macOS\nWhat's new  \n\n* Redirect logging of MMKV is supported now.\n* Dynamically disable logging of MMKV is supported now.\n* Add method `migrateFromUserDefaults ` to import from NSUserDefaults.\n\n### Android\nWhat's new  \n\n* Redirect logging of MMKV is supported now.\n* Dynamically disable logging of MMKV is supported now.  \n  Note: These two are breaking changes for interface `MMKVHandler`, update your implementation with `wantLogRedirecting()` & `mmkvLog()` for v1.0.17. (Interface with default method requires API level 24, sigh...)\n* Add option to use custom library loader `initialize(String rootDir, LibLoader loader)`. If you're facing `System.loadLibrary()` crash on some low API level device, consider using **ReLinker** to load MMKV. Example can be found in **mmkvdemo**.\n* Fix a potential corruption of meta file on multi-process mode.\n* Fix a potential crash when the meta file is not valid on multi-process mode.\n\n\n### Windows\n* Redirect logging of MMKV is supported now.\n* Dynamically disable logging of MMKV is supported now.\n* Fix a potential corruption of meta file on multi-process mode.\n\n## v1.0.16 / 2019-01-04\n### iOS / macOS\nWhat's new  \n\n* Customizing root folder of MMKV is supported now.\n* Customizing folder for specific MMKV is supported now.\n* Add method `getValueSizeForKey:` to get value's size of a key.\n\n### Android\nWhat's new  \n\n* Customizing root folder of MMKV is supported now.\n* Customizing folder for specific MMKV is supported now.\n* Add method `getValueSizeForKey()` to get value's size of a key.\n* Fix a potential crash when the meta file is not valid.\n\n\n### Windows\nMMKV for Windows is released now. Most things actually work!\n\n## v1.0.15 / 2018-12-13\n### iOS / macOS\nWhat's new  \n\n* Storing **NSString/NSData/NSDate** directly by calling `setString`/`getSring`, `setData`/`getData`, `setDate`/`getDate`.\n* Fix a potential crash due to divided by zero.\n\n\n### Android\nWhat's new  \n\n* Fix a stack overflow crash due to the **callback** feature introduced by v1.0.13.\n* Fix a potential crash due to divided by zero.\n\n### Windows\nMMKV for Windows in under construction. Hopefully will come out in next release. For those who are interested, check out branch `dev_Windows` for the latest development.\n\n## v1.0.14 / 2018-11-30\n### iOS / macOS\nWhat's new  \n\n* Setting `nil` value to reset a key is supported now.\n* Rename `boolValue(forKey:)` to `bool(forKey:)` for Swift.\n\n\n### Android\nWhat's new  \n\n* `Parcelable` objects can be stored directly into MMKV now.\n* Setting `null` value to reset a key is supported now.\n* Fix an issue that MMKV's file size might expand unexpectly large in some case.\n* Fix an issue that MMKV might crash on multi-thread removing and getting on the same key.\n\n\n## v1.0.13 / 2018-11-09\n### iOS / macOS\nWhat's new  \n\n* Special chars like `/` are supported in MMKV now. The file name of MMKV with special mmapID will be encoded with md5 and stored in seperate folder.\n* Add **callback** for MMKV error handling. You can make MMKV to recover instead of discard when crc32 check fail happens.\n* Add `trim` and `close` operation. Generally speaking they are not necessary in daily usage. Use them if you worry about disk / memory / fd usage.\n* Fix an issue that MMKV's file size might expand unexpectly large in some case.\n\nKnown Issues\n\n* Setting `nil` value to reset a key will be ignored. Use `remove` instead.\n\n### Android\nWhat's new  \n\n* Add static linked of libc++ to trim AAR size. Use it when there's no other lib in your App embeds `libc++_shared.so`. Or if you already have an older version of `libc++_shared.so` that doesn't agree with MMKV.  \nAdd `implementation 'com.tencent:mmkv-static:1.0.13'` to your App's gradle setting to integrate.\n* Special chars like `/` are supported in MMKV now. The file name of MMKV with special mmapID will be encoded with md5 and stored in seperate folder.\n* Add **callback** for MMKV error handling. You can make MMKV to recover instead of discard when crc32 check fail happens.\n* Add `trim` and `close` operation. Generally speaking they are not necessary in daily usage. Use them if you worry about disk / memory / fd usage.\n\nKnown Issues\n\n* Setting `null` value to reset a key will be ignored. Use `remove` instead.\n* MMKV's file size might expand unexpectly large in some case.\n\n## v1.0.12 / 2018-10-18\n### iOS / macOS\nWhat's new  \n\n* Fix `mlock` fail on some devices\n* Fix a performance issue caused by mistakenly merge of test code\n* Fix CocoaPods integration error of **macOS**\n\n### Android / 2018-10-24\nWhat's new  \n\n* Fix `remove()` causing data inconsistency on `MULTI_PROCESS_MODE`\n\n\n## v1.0.11 / 2018-10-12\n### iOS / macOS\nWhat's new  \n\n* Port to **macOS**\n* Support **NSCoding**  \nYou can  store NSArray/NSDictionary or any object what implements `<NSCoding>` protocol.\n* Redesign Swift interface\n* Some performance improvement\n\nKnown Issues\n\n* MMKV use mmapID as its filename, so don't contain any `/` inside mmapID.\n* Storing a value of `type A` and getting by `type B` may not work. MMKV does type erasure while storing values. That means it's hard for MMKV to do value-type-checking, if not impossible.\n\n### Android \nWhat's new  \n\n* Some performance improvement\n\nKnown Issues\n\n* Getting an MMKV instance with mmapID that contains `/` may fail.  \nMMKV uses mmapID as its filename, so don't contain any `/` inside mmapID.\n* Storing a value of `type A` and getting by `type B` may not work.  \nMMKV does type erasure while storing values. That means it's hard for MMKV to do value-type-checking, if not impossible.\n* `registerOnSharedPreferenceChangeListener` not supported.  \nThis is intended. We believe doing data-change-listener inside a storage framework smells really bad to us. We suggest using something like event-bus to notify any interesting clients.\n\n## v1.0.10 / 2018-09-21  \n\n * Initial Release\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2724609375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at guoling@tencent.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.0625,
          "content": "# Contributing to MMKV\nWelcome to [report Issues](https://github.com/Tencent/MMKV/issues) or [pull requests](https://github.com/Tencent/MMKV/pulls). It's recommended to read the following Contributing Guide first before contributing. \n\n## Issues\nWe use issues to track public bugs and feature requests.\n\n### Search Known Issues First\nPlease search the existing issues to see if any similar issue or feature request has already been filed. You should make sure your issue isn't redundant.\n\n### Reporting New Issues\nIf you open an issue, the more information the better. Such as detailed description, screenshot or video of your problem, logcat or code blocks for your crash.\n\n## Pull Requests\nWe strongly welcome your pull request to make MMKV better. \n\n### Branch Management\nThere are three main branches here:\n\n1. `master` branch.\n\t1. It is the latest (pre-)release branch. We use `master` for tags, with version number `1.1.0`, `1.2.0`, `1.3.0`...\n\t2. **Don't submit any PR on `master` branch.**\n2. `dev` branch. \n\t1. It is our stable developing branch. After full testing, `dev` will be merged to `master` branch for the next release.\n\t2. **You are recommended to submit bugfix or feature PR on `dev` branch.**\n3. `hotfix` branch. \n\t1. It is the latest tag version for hot fix. If we accept your pull request, we may just tag with version number `1.1.1`, `1.2.3`.\n\t2. **Only submit urgent PR on `hotfix` branch for next specific release.**\n\nNormal bugfix or feature request should be submitted to `dev` branch. After full testing, we will merge them to `master` branch for the next release. \n\nIf you have some urgent bugfixes on a published version, but the `master` branch have already far away with the latest tag version, you can submit a PR on hotfix. And it will be cherry picked to `dev` branch if it is possible.\n\n```\nmaster\n ↑\ndev        <--- hotfix PR\n ↑ \nfeature/bugfix PR\n```  \n\n### Make Pull Requests\nThe code team will monitor all pull request, we run some code check and test on it. After all tests passed, we will accecpt this PR. But it won't merge to `master` branch at once, which have some delay.\n\nBefore submitting a pull request, please make sure the followings are done:\n\n1. Fork the repo and create your branch from `master` or `hotfix`.\n2. Update code or documentation if you have changed APIs.\n3. Add the copyright notice to the top of any new files you've added.\n4. Check your code lints and checkstyles.\n5. Test and test again your code.\n6. Now, you can submit your pull request on `dev` or `hotfix` branch.\n\n## Code Style Guide\nWe choose the `LLVM code style` for MMKV project, with the specialization that using 4 space width for indent, and using tab for ObjC indentation. To make things simple, we have already defined our code style inside [clang-format](./.clang-format).  \nYou can just run `make format_code` on top directory to format all your changes before committing them.  \n\nAdditionly, check out [Code Style](./Android/MMKV/checkstyle.xml) for Java and Android.\n\n## License\nBy contributing to MMKV, you agree that your contributions will be licensed\nunder its [BSD LICENSE](./LICENSE.txt)\n"
        },
        {
          "name": "Core",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.TXT",
          "type": "blob",
          "size": 20.4794921875,
          "content": "Tencent is pleased to support the open source community by making MMKV available.  \nCopyright (C) 2018 THL A29 Limited, a Tencent company.  All rights reserved.\nIf you have downloaded a copy of the MMKV binary from Tencent, please note that the MMKV binary is licensed under the BSD 3-Clause License.\nIf you have downloaded a copy of the MMKV source code from Tencent, please note that MMKV source code is licensed under the BSD 3-Clause License, except for the third-party components listed below which are subject to different license terms.  Your integration of MMKV into your own projects may require compliance with the BSD 3-Clause License, as well as the other licenses applicable to the third-party components included within MMKV.\nA copy of the BSD 3-Clause License is included in this file.\n\nOther dependencies and licenses:\n\nOpen Source Software Licensed Under the OpenSSL License: \n----------------------------------------------------------------------------------------\n1. OpenSSL  1.1.0i\nCopyright (c) 1998-2018 The OpenSSL Project.  \nAll rights reserved.\nCopyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  \nAll rights reserved.\n\n\nTerms of the OpenSSL License:\n---------------------------------------------------\nLICENSE ISSUES:\n--------------------------------------------------------------------\n\nThe OpenSSL toolkit stays under a dual license, i.e. both the conditions of the OpenSSL License and the original SSLeay license apply to the toolkit.\nSee below for the actual license texts.\n\nOpenSSL License:\n--------------------------------------------------------------------\nCopyright (c) 1998-2018 The OpenSSL Project.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. All advertising materials mentioning features or use of this software must display the following acknowledgment:\n\"This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit. (http://www.openssl.org/)\"\n\n4. The names \"OpenSSL Toolkit\" and \"OpenSSL Project\" must not be used to endorse or promote products derived from this software without prior written permission. For written permission, please contact openssl-core@openssl.org.\n\n5. Products derived from this software may not be called \"OpenSSL\" nor may \"OpenSSL\" appear in their names without prior written permission of the OpenSSL Project.\n\n6. Redistributions of any form whatsoever must retain the following acknowledgment: \"This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit (http://www.openssl.org/)\"\n\nTHIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE OpenSSL PROJECT OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \n====================================================================\n* This product includes cryptographic software written by Eric Young (eay@cryptsoft.com).  This product includes software written by Tim Hudson (tjh@cryptsoft.com).\n\n\nOriginal SSLeay License:\n--------------------------------------------------------------------\nCopyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\nAll rights reserved.\n \nThis package is an SSL implementation written by Eric Young (eay@cryptsoft.com).\nThe implementation was written so as to conform with Netscapes SSL.\n \nThis library is free for commercial and non-commercial use as long as the following conditions are aheared to. The following conditions apply to all code found in this distribution, be it the RC4, RSA, lhash, DES, etc., code; not just the SSL code. The SSL documentation included with this distribution is covered by the same copyright terms except that the holder is Tim Hudson (tjh@cryptsoft.com).  \n\nCopyright remains Eric Young's, and as such any Copyright notices in the code are not to be removed.  If this package is used in a product, Eric Young should be given attribution as the author of the parts of the library used. This can be in the form of a textual message at program startup or in documentation (online or textual) provided with the package. \n  \nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n1. Redistributions of source code must retain the copyright notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n3. All advertising materials mentioning features or use of this software must display the following acknowledgement:\" This product includes cryptographic software written by Eric Young (eay@cryptsoft.com)\" The word 'cryptographic' can be left out if the rouines from the library being used are not cryptographic related :-).\n4. If you include any Windows specific code (or a derivative thereof) from the apps directory (application code) you must include an acknowledgement: \"This product includes software written by Tim Hudson (tjh@cryptsoft.com)\"\n \nTHIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \n  \nThe licence and distribution terms for any publically available version or derivative of this code cannot be changed.  i.e. this code cannot simply be copied and put under another distribution licence [including the GNU Public Licence.]\n\n\n\nOpen Source Software Licensed Under the Apache License, Version 2.0: \nThe below software in this distribution may have been modified by THL A29 Limited (“Tencent Modifications”). All Tencent Modifications are Copyright (C) 2018 THL A29 Limited.\n----------------------------------------------------------------------------------------\n1. MultiprocessSharedPreferences  v1.0\nCopyright (C) 2014 seven456@gmail.com\n\n\nTerms of the Apache License, Version 2.0:\n--------------------------------------------------------------------\nApache License Version 2.0, January 2004 http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n“License” shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n“Licensor” shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n“Legal Entity” shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, “control” means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n“You” (or “Your”) shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n“Source” form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n“Object” form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n“Work” shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n“Derivative Works” shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n“Contribution” shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, “submitted” means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as “Not a Contribution.”\n\n“Contributor” shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\na) \tYou must give any other recipients of the Work or Derivative Works a copy of this License; and\n\nb) \tYou must cause any modified files to carry prominent notices stating that You changed the files; and\n\nc) \tYou must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n\nd) \tIf the Work includes a “NOTICE” text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. \n\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. \n\n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work\nTo apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\nOpen Source Software Licensed Under the zlib License: \nThe below software in this distribution may have been modified by THL A29 Limited (“Tencent Modifications”). All Tencent Modifications are Copyright (C) 2018 THL A29 Limited.\n----------------------------------------------------------------------------------------\n1. zlib  v1.2.11\nCopyright (C) 1995-2017 Jean-loup Gailly and Mark Adler\n\nTerms of the zlib License:\n--------------------------------------------------------------------\n\nThis software is provided 'as-is', without any express or implied\nwarranty.  In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\n   claim that you wrote the original software. If you use this software\n   in a product, an acknowledgment in the product documentation would be\n   appreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\n   misrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\n\n\nOpen Source Software Licensed Under the BSD 3-Clause License: \n----------------------------------------------------------------------------------------\n1. pybind11 v2.5.0\nCopyright (c) 2016 Wenzel Jakob <wenzel.jakob@epfl.ch>, All rights reserved.\n\nTerms of the BSD 3-Clause License:\n--------------------------------------------------------------------\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of [copyright holder] nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MMKV.xcworkspace",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.0400390625,
          "content": "format_code:\n\tpython Script/formatCode.py"
        },
        {
          "name": "OpenHarmony",
          "type": "tree",
          "content": null
        },
        {
          "name": "POSIX",
          "type": "tree",
          "content": null
        },
        {
          "name": "Python",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.876953125,
          "content": "[![license](https://img.shields.io/badge/license-BSD_3-brightgreen.svg?style=flat)](https://github.com/Tencent/MMKV/blob/master/LICENSE.TXT)\r\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/Tencent/MMKV/pulls)\r\n[![Release Version](https://img.shields.io/badge/release-2.0.2-brightgreen.svg)](https://github.com/Tencent/MMKV/releases)\r\n[![Platform](https://img.shields.io/badge/Platform-%20Android%20%7C%20iOS%2FmacOS%20%7C%20Windows%20%7C%20POSIX%20%7C%20HarmonyOS%20NEXT-brightgreen.svg)](https://github.com/Tencent/MMKV/wiki/home)\r\n\r\n中文版本请参看[这里](./README_CN.md)\r\n\r\nMMKV is an **efficient**, **small**, **easy-to-use** mobile key-value storage framework used in the WeChat application. It's currently available on **Android**, **iOS/macOS**, **Windows**, **POSIX** and **HarmonyOS NEXT**.\r\n\r\n# MMKV for Android\r\n\r\n## Features\r\n\r\n* **Efficient**. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of Android to achieve the best performance.\r\n  * **Multi-Process concurrency**: MMKV supports concurrent read-read and read-write access between processes.\r\n\r\n* **Easy-to-use**. You can use MMKV as you go. All changes are saved immediately, no `sync`, no `apply` calls needed.\r\n\r\n* **Small**.\r\n  * **A handful of files**: MMKV contains process locks, encode/decode helpers and mmap logics, and nothing more. It's really tidy.\r\n  * **About 50K in binary size**: MMKV adds about 50K per architecture on App size, and much less when zipped (APK).\r\n\r\n\r\n## Getting Started\r\n\r\n### Installation Via Maven\r\nAdd the following lines to `build.gradle` on your app module:\r\n\r\n```gradle\r\ndependencies {\r\n    implementation 'com.tencent:mmkv:2.0.2'\r\n    // replace \"2.0.2\" with any available version\r\n}\r\n```\r\n\r\nStarting from v2.0.0, MMKV **no longer supports 32-bit** arch and API level 22 or 21, if you want 32-bit or API level 21~22, use v1.3.x LTS series.  \r\n\r\nFor other installation options, see [Android Setup](https://github.com/Tencent/MMKV/wiki/android_setup).\r\n\r\n### Quick Tutorial\r\nYou can use MMKV as you go. All changes are saved immediately, no `sync`, no `apply` calls needed.  \r\nSetup MMKV on App startup, say your `Application` class, add these lines:\r\n\r\n```Java\r\npublic void onCreate() {\r\n    super.onCreate();\r\n\r\n    String rootDir = MMKV.initialize(this);\r\n    System.out.println(\"mmkv root: \" + rootDir);\r\n    //……\r\n}\r\n```\r\n\r\nMMKV has a global instance, that can be used directly:\r\n\r\n```Java\r\nimport com.tencent.mmkv.MMKV;\r\n    \r\nMMKV kv = MMKV.defaultMMKV();\r\n\r\nkv.encode(\"bool\", true);\r\nboolean bValue = kv.decodeBool(\"bool\");\r\n\r\nkv.encode(\"int\", Integer.MIN_VALUE);\r\nint iValue = kv.decodeInt(\"int\");\r\n\r\nkv.encode(\"string\", \"Hello from mmkv\");\r\nString str = kv.decodeString(\"string\");\r\n```\r\n\r\nMMKV also supports **Multi-Process Access**. Full tutorials can be found here [Android Tutorial](https://github.com/Tencent/MMKV/wiki/android_tutorial).\r\n\r\n## Performance\r\nWriting random `int` for 1000 times, we get this chart:  \r\n![](https://github.com/Tencent/MMKV/wiki/assets/profile_android_mini.png)  \r\nFor more benchmark data, please refer to [our benchmark](https://github.com/Tencent/MMKV/wiki/android_benchmark).\r\n\r\n# MMKV for iOS/macOS\r\n\r\n## Features\r\n\r\n* **Efficient**. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of iOS/macOS to achieve the best performance.\r\n \r\n* **Easy-to-use**. You can use MMKV as you go, no configurations are needed. All changes are saved immediately, no `synchronize` calls are needed.\r\n\r\n* **Small**.\r\n  * **A handful of files**: MMKV contains encode/decode helpers and mmap logics and nothing more. It's really tidy.\r\n  * **Less than 30K in binary size**: MMKV adds less than 30K per architecture on App size, and much less when zipped (IPA).\r\n\r\n## Getting Started\r\n\r\n### Installation Via CocoaPods:\r\n  1. Install [CocoaPods](https://guides.CocoaPods.org/using/getting-started.html);\r\n  2. Open the terminal, `cd` to your project directory, run `pod repo update` to make CocoaPods aware of the latest available MMKV versions;\r\n  3. Edit your Podfile, add `pod 'MMKV'` to your app target;\r\n  4. Run `pod install`;\r\n  5. Open the `.xcworkspace` file generated by CocoaPods;\r\n  6. Add `#import <MMKV/MMKV.h>` to your source file and we are done.\r\n\r\nFor other installation options, see [iOS/macOS Setup](https://github.com/Tencent/MMKV/wiki/iOS_setup).\r\n\r\n### Quick Tutorial\r\nYou can use MMKV as you go, no configurations are needed. All changes are saved immediately, no `synchronize` calls are needed.\r\nSetup MMKV on App startup, in your `-[MyApp application: didFinishLaunchingWithOptions:]`, add these lines:\r\n\r\n```objective-c\r\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\r\n    // init MMKV in the main thread\r\n    [MMKV initializeMMKV:nil];\r\n\r\n    //...\r\n    return YES;\r\n}\r\n```\r\n\r\nMMKV has a global instance, that can be used directly:\r\n\r\n```objective-c\r\nMMKV *mmkv = [MMKV defaultMMKV];\r\n    \r\n[mmkv setBool:YES forKey:@\"bool\"];\r\nBOOL bValue = [mmkv getBoolForKey:@\"bool\"];\r\n    \r\n[mmkv setInt32:-1024 forKey:@\"int32\"];\r\nint32_t iValue = [mmkv getInt32ForKey:@\"int32\"];\r\n    \r\n[mmkv setString:@\"hello, mmkv\" forKey:@\"string\"];\r\nNSString *str = [mmkv getStringForKey:@\"string\"];\r\n```\r\n\r\nMMKV also supports **Multi-Process Access**. Full tutorials can be found [here](https://github.com/Tencent/MMKV/wiki/iOS_tutorial).\r\n\r\n## Performance\r\nWriting random `int` for 10000 times, we get this chart:  \r\n![](https://github.com/Tencent/MMKV/wiki/assets/profile_mini.png)  \r\nFor more benchmark data, please refer to [our benchmark](https://github.com/Tencent/MMKV/wiki/iOS_benchmark).\r\n\r\n\r\n# MMKV for Windows\r\n\r\n## Features\r\n\r\n* **Efficient**. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of Windows to achieve the best performance.\r\n  * **Multi-Process concurrency**: MMKV supports concurrent read-read and read-write access between processes.\r\n\r\n* **Easy-to-use**. You can use MMKV as you go. All changes are saved immediately, no `save`, no `sync` calls are needed.\r\n\r\n* **Small**.\r\n  * **A handful of files**: MMKV contains process locks, encode/decode helpers and mmap logics, and nothing more. It's really tidy.\r\n  * **About 10K in binary size**: MMKV adds about 10K on application size, and much less when zipped.\r\n\r\n\r\n## Getting Started\r\n\r\n### Installation Via Source\r\n1. Getting source code from git repository:\r\n  \r\n   ```\r\n   git clone https://github.com/Tencent/MMKV.git\r\n   ```\r\n  \r\n2. Add `Core/core.vcxproj` to your solution;\r\n3. Add `MMKV` project to your project's dependencies;\r\n4. Add `$(OutDir)include` to your project's `C/C++` -> `General` -> `Additional Include Directories`;\r\n5. Add `$(OutDir)` to your project's `Linker` -> `General` -> `Additional Library Directories`;\r\n6. Add `mmkv.lib` to your project's `Linker` -> `Input` -> `Additional Dependencies`;\r\n7. Add `#include <MMKV/MMKV.h>` to your source file and we are done.\r\n\r\n\r\nnote:  \r\n\r\n1. MMKV is compiled with `MT/MTd` runtime by default. If your project uses `MD/MDd`, you should change MMKV's setting to match your project's (`C/C++` -> `Code Generation` -> `Runtime Library`), or vice versa.\r\n2. MMKV is developed with Visual Studio 2017, change the `Platform Toolset` if you use a different version of Visual Studio.\r\n\r\nFor other installation options, see [Windows Setup](https://github.com/Tencent/MMKV/wiki/windows_setup).\r\n\r\n### Quick Tutorial\r\nYou can use MMKV as you go. All changes are saved immediately, no `sync`, no `save` calls needed.  \r\nSetup MMKV on App startup, say in your `main()`, add these lines:\r\n\r\n```C++\r\n#include <MMKV/MMKV.h>\r\n\r\nint main() {\r\n    std::wstring rootDir = getYourAppDocumentDir();\r\n    MMKV::initializeMMKV(rootDir);\r\n    //...\r\n}\r\n```\r\n\r\nMMKV has a global instance, that can be used directly:\r\n\r\n```C++\r\nauto mmkv = MMKV::defaultMMKV();\r\n\r\nmmkv->set(true, \"bool\");\r\nstd::cout << \"bool = \" << mmkv->getBool(\"bool\") << std::endl;\r\n\r\nmmkv->set(1024, \"int32\");\r\nstd::cout << \"int32 = \" << mmkv->getInt32(\"int32\") << std::endl;\r\n\r\nmmkv->set(\"Hello, MMKV for Windows\", \"string\");\r\nstd::string result;\r\nmmkv->getString(\"string\", result);\r\nstd::cout << \"string = \" << result << std::endl;\r\n```\r\n\r\nMMKV also supports **Multi-Process Access**. Full tutorials can be found here [Windows Tutorial](https://github.com/Tencent/MMKV/wiki/windows_tutorial).\r\n\r\n# MMKV for POSIX\r\n\r\n## Features\r\n\r\n* **Efficient**. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of POSIX to achieve the best performance.\r\n  * **Multi-Process concurrency**: MMKV supports concurrent read-read and read-write access between processes.\r\n\r\n* **Easy-to-use**. You can use MMKV as you go. All changes are saved immediately, no `save`, no `sync` calls are needed.\r\n\r\n* **Small**.\r\n  * **A handful of files**: MMKV contains process locks, encode/decode helpers and mmap logics, and nothing more. It's really tidy.\r\n  * **About 7K in binary size**: MMKV adds about 7K on application size, and much less when zipped.\r\n\r\n\r\n## Getting Started\r\n\r\n### Installation Via CMake\r\n1. Getting source code from the git repository:\r\n  \r\n   ```\r\n   git clone https://github.com/Tencent/MMKV.git\r\n   ```\r\n2. Edit your `CMakeLists.txt`, add those lines:\r\n\r\n    ```cmake\r\n    add_subdirectory(mmkv/POSIX/src mmkv)\r\n    target_link_libraries(MyApp\r\n        mmkv)\r\n    ```\r\n3. Add `#include \"MMKV.h\"` to your source file and we are done.\r\n\r\nFor other installation options, see [POSIX Setup](https://github.com/Tencent/MMKV/wiki/posix_setup).\r\n\r\n### Quick Tutorial\r\nYou can use MMKV as you go. All changes are saved immediately, no `sync`, no `save` calls needed.  \r\nSetup MMKV on App startup, say in your `main()`, add these lines:\r\n\r\n```C++\r\n#include \"MMKV.h\"\r\n\r\nint main() {\r\n    std::string rootDir = getYourAppDocumentDir();\r\n    MMKV::initializeMMKV(rootDir);\r\n    //...\r\n}\r\n```\r\n\r\nMMKV has a global instance, that can be used directly:\r\n\r\n```C++\r\nauto mmkv = MMKV::defaultMMKV();\r\n\r\nmmkv->set(true, \"bool\");\r\nstd::cout << \"bool = \" << mmkv->getBool(\"bool\") << std::endl;\r\n\r\nmmkv->set(1024, \"int32\");\r\nstd::cout << \"int32 = \" << mmkv->getInt32(\"int32\") << std::endl;\r\n\r\nmmkv->set(\"Hello, MMKV for Windows\", \"string\");\r\nstd::string result;\r\nmmkv->getString(\"string\", result);\r\nstd::cout << \"string = \" << result << std::endl;\r\n```\r\n\r\nMMKV also supports **Multi-Process Access**. Full tutorials can be found here [POSIX Tutorial](https://github.com/Tencent/MMKV/wiki/posix_tutorial).\r\n\r\n# MMKV for HarmonyOS NEXT\r\n\r\n## Features\r\n\r\n* **Efficient**. MMKV uses mmap to keep memory synced with file, and protobuf to encode/decode values, making the most of native platform to achieve best performance.\r\n  * **Multi-Process concurrency**: MMKV supports concurrent read-read and read-write access between processes.\r\n\r\n* **Easy-to-use**. You can use MMKV as you go. All changes are saved immediately, no `sync`, no `flush` calls needed.\r\n\r\n* **Small**.\r\n  * **A handful of files**: MMKV contains process locks, encode/decode helpers and mmap logics and nothing more. It's really tidy.\r\n  * **About 600K in binary size**: MMKV adds about 600K per architecture on App size, and much less when zipped (HAR/HAP).\r\n\r\n\r\n## Getting Started\r\n### Installation via OHPM:\r\n\r\n```bash\r\nohpm install @tencent/mmkv\r\n```\r\n### Quick Tutorial\r\nYou can use MMKV as you go. All changes are saved immediately, no `sync`, no `apply` calls needed.  \r\nSetup MMKV on App startup, say your `EntryAbility.onCreate()` function, add these lines:\r\n\r\n```js\r\nimport { MMKV } from '@tencent/mmkv';\r\n\r\nexport default class EntryAbility extends UIAbility {\r\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\r\n    let appCtx = this.context.getApplicationContext();\r\n    let mmkvRootDir = MMKV.initialize(appCtx);\r\n    console.info('mmkv rootDir: ', mmkvRootDir);\r\n    ……\r\n  }\r\n```\r\n\r\nMMKV has a global instance, that can be used directly:\r\n\r\n```js\r\nimport { MMKV } from '@tencent/mmkv';\r\n    \r\nlet mmkv = MMKV.defaultMMKV();\r\nmmkv.encodeBool('bool', true);\r\nconsole.info('bool = ', mmkv.decodeBool('bool'));\r\n    \r\nmmkv.encodeInt32('int32', Math.pow(2, 31) - 1);\r\nconsole.info('max int32 = ', mmkv.decodeInt32('int32'));\r\n    \r\nmmkv.encodeInt64('int', BigInt(2**63) - BigInt(1));\r\nconsole.info('max int64 = ', mmkv.decodeInt64('int'));\r\n    \r\nlet str: string = 'Hello OpenHarmony from MMKV';\r\nmmkv.encodeString('string', str);\r\nconsole.info('string = ', mmkv.decodeString('string'));\r\n\r\nlet arrayBuffer: ArrayBuffer = StringToArrayBuffer('Hello OpenHarmony from MMKV with bytes');\r\nmmkv.encodeBytes('bytes', arrayBuffer);\r\nlet bytes = mmkv.decodeBytes('bytes');\r\nconsole.info('bytes = ', ArrayBufferToString(bytes));\r\n```\r\n\r\nAs you can see, MMKV is quite easy to use.\r\nFor the full documentation, see [HarmonyOS NEXT Tutorial](https://github.com/Tencent/MMKV/wiki/ohos_setup).\r\n\r\n## License\r\nMMKV is published under the BSD 3-Clause license. For details check out the [LICENSE.TXT](./LICENSE.TXT).\r\n\r\n## Change Log\r\nCheck out the [CHANGELOG.md](./CHANGELOG.md) for details of change history.\r\n\r\n## Contributing\r\n\r\nIf you are interested in contributing, check out the [CONTRIBUTING.md](./CONTRIBUTING.md), also join our [Tencent OpenSource Plan](https://opensource.tencent.com/contribution).\r\n\r\nTo give clarity of what is expected of our members, MMKV has adopted the code of conduct defined by the Contributor Covenant, which is widely used. And we think it articulates our values well. For more, check out the [Code of Conduct](./CODE_OF_CONDUCT.md).\r\n\r\n## FAQ & Feedback\r\nCheck out the [FAQ](https://github.com/Tencent/MMKV/wiki/FAQ) first. Should there be any questions, don't hesitate to create [issues](https://github.com/Tencent/MMKV/issues).\r\n\r\n## Personal Information Protection Rules\r\nUser privacy is taken very seriously: MMKV does not obtain, collect or upload any personal information. Please refer to the [MMKV SDK Personal Information Protection Rules](https://support.weixin.qq.com/cgi-bin/mmsupportacctnodeweb-bin/pages/aY5BAtRiO1BpoHxo) for details.\r\n"
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 11.876953125,
          "content": "# MMKV——基于 mmap 的高性能通用 key-value 组件\r\nMMKV 是基于 mmap 内存映射的 key-value 组件，底层序列化/反序列化使用 protobuf 实现，性能高，稳定性强。从 2015 年中至今在微信上使用，其性能和稳定性经过了时间的验证。近期也已移植到 Android / macOS / Windows / POSIX / HarmonyOS NEXT 等平台，一并开源。\r\n\r\n## MMKV 源起\r\n在微信客户端的日常运营中，时不时就会爆发特殊文字引起系统的 crash，[参考文章](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=2649286826&idx=1&sn=35601cb1156617aa235b7fd4b085bfc4)，文章里面设计的技术方案是在关键代码前后进行计数器的加减，通过检查计数器的异常，来发现引起闪退的异常文字。在会话列表、会话界面等有大量 cell 的地方，希望新加的计时器不会影响滑动性能；另外这些计数器还要永久存储下来——因为闪退随时可能发生。这就需要一个性能非常高的通用 key-value 存储组件，我们考察了 SharedPreferences、NSUserDefaults、SQLite 等常见组件，发现都没能满足如此苛刻的性能要求。考虑到这个防 crash 方案最主要的诉求还是实时写入，而 mmap 内存映射文件刚好满足这种需求，我们尝试通过它来实现一套 key-value 组件。\r\n\r\n## MMKV 原理\r\n* **内存准备**  \r\n通过 mmap 内存映射文件，提供一段可供随时写入的内存块，App 只管往里面写数据，由操作系统负责将内存回写到文件，不必担心 crash 导致数据丢失。\r\n* **数据组织**  \r\n数据序列化方面我们选用 protobuf 协议，pb 在性能和空间占用上都有不错的表现。\r\n* **写入优化**  \r\n考虑到主要使用场景是频繁地进行写入更新，我们需要有增量更新的能力。我们考虑将增量 kv 对象序列化后，append 到内存末尾。\r\n* **空间增长**  \r\n使用 append 实现增量更新带来了一个新的问题，就是不断 append 的话，文件大小会增长得不可控。我们需要在性能和空间上做个折中。\r\n\r\n更详细的设计原理参考 [MMKV 原理](https://github.com/Tencent/MMKV/wiki/design)。\r\n\r\n## Android 指南\r\n### 安装引入\r\n推荐使用 Maven：\r\n\r\n```gradle\r\ndependencies {\r\n    implementation 'com.tencent:mmkv:2.0.2'\r\n    // replace \"2.0.2\" with any available version\r\n}\r\n```\r\n从 v2.0.0 起, MMKV **去掉了 32-bit 架构的支持**、API level 22 及以下的支持, 如有这类需求，请使用 v1.3.x LTS 版本。  \r\n更多安装指引参考 [Android Setup](https://github.com/Tencent/MMKV/wiki/android_setup_cn)。\r\n\r\n### 快速上手\r\nMMKV 的使用非常简单，所有变更立马生效，无需调用 `sync`、`apply`。\r\n在 App 启动时初始化 MMKV，设定 MMKV 的根目录（files/mmkv/），例如在 `Application` 里：\r\n\r\n```Java\r\npublic void onCreate() {\r\n    super.onCreate();\r\n\r\n    String rootDir = MMKV.initialize(this);\r\n    System.out.println(\"mmkv root: \" + rootDir);\r\n    //……\r\n}\r\n```\r\n\r\nMMKV 提供一个全局的实例，可以直接使用：\r\n\r\n```Java\r\nimport com.tencent.mmkv.MMKV;\r\n//……\r\n\r\nMMKV kv = MMKV.defaultMMKV();\r\n\r\nkv.encode(\"bool\", true);\r\nboolean bValue = kv.decodeBool(\"bool\");\r\n\r\nkv.encode(\"int\", Integer.MIN_VALUE);\r\nint iValue = kv.decodeInt(\"int\");\r\n\r\nkv.encode(\"string\", \"Hello from mmkv\");\r\nString str = kv.decodeString(\"string\");\r\n```\r\nMMKV 支持**多进程访问**，更详细的用法参考 [Android Tutorial](https://github.com/Tencent/MMKV/wiki/android_tutorial_cn)。\r\n\r\n### 性能对比\r\n循环写入随机的`int` 1k 次，我们有如下性能对比：  \r\n![](https://github.com/Tencent/MMKV/wiki/assets/profile_android_mini.png)  \r\n更详细的性能对比参考 [Android Benchmark](https://github.com/Tencent/MMKV/wiki/android_benchmark_cn)。\r\n\r\n## iOS/macOS 指南\r\n### 安装引入\r\n推荐使用 CocoaPods：\r\n\r\n  1. 安装 [CocoaPods](https://guides.CocoaPods.org/using/getting-started.html)；\r\n  2. 打开命令行, `cd` 到你的项目工程目录, 输入 `pod repo update` 让 CocoaPods 感知最新的 MMKV 版本；\r\n  3. 打开 Podfile, 添加 `pod 'MMKV'` 到你的 app target 里面；\r\n  4. 在命令行输入 `pod install`；\r\n  5. 用 Xcode 打开由 CocoaPods 自动生成的 `.xcworkspace` 文件；\r\n  6. 添加头文件 `#import <MMKV/MMKV.h>`，就可以愉快地开始你的 MMKV 之旅了。\r\n\r\n更多安装指引参考 [iOS/macOS Setup](https://github.com/Tencent/MMKV/wiki/iOS_setup_cn)。\r\n\r\n### 快速上手\r\nMMKV 的使用非常简单，无需任何配置，所有变更立马生效，无需调用 `synchronize`。在 App 启动时初始化 MMKV（设定 MMKV 的根目录），例如在`-[MyApp application: didFinishLaunchingWithOptions:]`里：\r\n\r\n```objective-c\r\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\r\n    // init MMKV in the main thread\r\n    [MMKV initializeMMKV:nil];\r\n\r\n    //...\r\n    return YES;\r\n}\r\n```\r\n\r\nMMKV 提供一个全局的实例，可以直接使用：\r\n\r\n```objective-c\r\nMMKV *mmkv = [MMKV defaultMMKV];\r\n    \r\n[mmkv setBool:YES forKey:@\"bool\"];\r\nBOOL bValue = [mmkv getBoolForKey:@\"bool\"];\r\n    \r\n[mmkv setInt32:-1024 forKey:@\"int32\"];\r\nint32_t iValue = [mmkv getInt32ForKey:@\"int32\"];\r\n    \r\n[mmkv setString:@\"hello, mmkv\" forKey:@\"string\"];\r\nNSString *str = [mmkv getStringForKey:@\"string\"];\r\n```\r\n\r\nMMKV 支持**多进程访问**，更详细的用法参考 [iOS/macOS Tutorial](https://github.com/Tencent/MMKV/wiki/iOS_tutorial_cn)。\r\n\r\n### 性能对比\r\n循环写入随机的`int` 1w 次，我们有如下性能对比：  \r\n![](https://github.com/Tencent/MMKV/wiki/assets/profile_mini.png)  \r\n更详细的性能对比参考 [iOS/macOS Benchmark](https://github.com/Tencent/MMKV/wiki/iOS_benchmark_cn)。\r\n\r\n## Windows 指南\r\n### 安装引入\r\n推荐使用子工程：\r\n\r\n  1. 获取 MMKV 源码：\r\n  \r\n     ```\r\n     git clone https://github.com/Tencent/MMKV.git\r\n     ```\r\n  \r\n  2. 添加工程 `Core/core.vcxproj` 到你的项目里；\r\n  3. 设置你的主工程依赖于 `MMKV` 工程;\r\n  4. 添加目录 `$(OutDir)include` 到你主工程的 `C/C++` -> `常规` -> `附加包含目录`;\r\n  5. 添加目录 `$(OutDir)` 到你主工程的 `链接器` -> `常规` -> `附加库目录`;\r\n  6. 添加 `mmkv.lib` 到你主工程的 `链接器` -> `输入` -> `附加依赖项`;\r\n  7. 添加头文件 `#include <MMKV/MMKV.h>`，就可以愉快地开始你的 MMKV 之旅了。\r\n\r\n注意：\r\n\r\n1. MMKV 默认使用 `MT/MTd` 运行时库来编译，如果你发现主工程的配置不一样，请修改 MMKV 的配置再编译;\r\n2. MMKV 使用 Visual Studio 2017 开发，如果你在使用其他版本的 Visual Studio，请修改 MMKV 的`工具集`与主工程一致，再编译.\r\n\r\n更多安装指引参考 [Windows Setup](https://github.com/Tencent/MMKV/wiki/windows_setup_cn)。\r\n\r\n### 快速上手\r\nMMKV 的使用非常简单，所有变更立马生效，无需调用 `save`、`sync`。\r\n在 App 启动时初始化 MMKV，设定 MMKV 的根目录，例如在 `main()` 里：\r\n\r\n\r\n```C++\r\n#include <MMKV/MMKV.h>\r\n\r\nint main() {\r\n    std::wstring rootDir = getYourAppDocumentDir();\r\n    MMKV::initializeMMKV(rootDir);\r\n    //...\r\n}\r\n```\r\n\r\nMMKV 提供一个全局的实例，可以直接使用：\r\n\r\n```C++\r\nauto mmkv = MMKV::defaultMMKV();\r\n\r\nmmkv->set(true, \"bool\");\r\nstd::cout << \"bool = \" << mmkv->getBool(\"bool\") << std::endl;\r\n\r\nmmkv->set(1024, \"int32\");\r\nstd::cout << \"int32 = \" << mmkv->getInt32(\"int32\") << std::endl;\r\n\r\nmmkv->set(\"Hello, MMKV for Windows\", \"string\");\r\nstd::string result;\r\nmmkv->getString(\"string\", result);\r\nstd::cout << \"string = \" << result << std::endl;\r\n```\r\n\r\nMMKV 支持**多进程访问**，更详细的用法参考 [Windows Tutorial](https://github.com/Tencent/MMKV/wiki/windows_tutorial_cn)。\r\n\r\n## POSIX 指南\r\n### 安装引入\r\n推荐使用 CMake：\r\n\r\n  1. 获取 MMKV 源码：\r\n  \r\n     ```\r\n     git clone https://github.com/Tencent/MMKV.git\r\n     ```\r\n  \r\n  2. 打开你项目的 `CMakeLists.txt`, 添加这几行:\r\n\r\n    ```cmake\r\n    add_subdirectory(mmkv/POSIX/src mmkv)\r\n    target_link_libraries(MyApp\r\n        mmkv)\r\n    ```\r\n 3. 添加头文件 `#include \"MMKV.h\"`，就可以愉快地开始你的 MMKV 之旅了。\r\n\r\n更多安装指引参考 [POSIX Setup](https://github.com/Tencent/MMKV/wiki/posix_setup_cn)。\r\n\r\n### 快速上手\r\nMMKV 的使用非常简单，所有变更立马生效，无需调用 `save`、`sync`。\r\n在 App 启动时初始化 MMKV，设定 MMKV 的根目录，例如在 `main()` 里：\r\n\r\n\r\n```C++\r\n#include \"MMKV.h\"\r\n\r\nint main() {\r\n    std::string rootDir = getYourAppDocumentDir();\r\n    MMKV::initializeMMKV(rootDir);\r\n    //...\r\n}\r\n```\r\n\r\nMMKV 提供一个全局的实例，可以直接使用：\r\n\r\n```C++\r\nauto mmkv = MMKV::defaultMMKV();\r\n\r\nmmkv->set(true, \"bool\");\r\nstd::cout << \"bool = \" << mmkv->getBool(\"bool\") << std::endl;\r\n\r\nmmkv->set(1024, \"int32\");\r\nstd::cout << \"int32 = \" << mmkv->getInt32(\"int32\") << std::endl;\r\n\r\nmmkv->set(\"Hello, MMKV for Windows\", \"string\");\r\nstd::string result;\r\nmmkv->getString(\"string\", result);\r\nstd::cout << \"string = \" << result << std::endl;\r\n```\r\n\r\nMMKV 支持**多进程访问**，更详细的用法参考 [POSIX Tutorial](https://github.com/Tencent/MMKV/wiki/posix_tutorial_cn)。\r\n\r\n## HarmonyOS NEXT 指南\r\n### 安装引入\r\n推荐使用 OHPM：\r\n\r\n```bash\r\nohpm install @tencent/mmkv\r\n```\r\n\r\n更多安装指引参考 [HarmonyOS NEXT Tutorial](https://github.com/Tencent/MMKV/wiki/ohos_setup)。\r\n\r\n### 快速上手\r\nMMKV 的使用非常简单，所有变更立马生效，无需调用 `save`、`sync`。\r\n在 App 启动时初始化 MMKV，设定 MMKV 的根目录，例如在 `EntryAbility.onCreate()` 里：\r\n\r\n```js\r\nimport { MMKV } from '@tencent/mmkv';\r\n\r\nexport default class EntryAbility extends UIAbility {\r\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\r\n    let appCtx = this.context.getApplicationContext();\r\n    let mmkvRootDir = MMKV.initialize(appCtx);\r\n    console.info('mmkv rootDir: ', mmkvRootDir);\r\n    ……\r\n  }\r\n```\r\n\r\nMMKV 提供一个全局的实例，可以直接使用：\r\n\r\n```js\r\nimport { MMKV } from '@tencent/mmkv';\r\n    \r\nlet mmkv = MMKV.defaultMMKV();\r\nmmkv.encodeBool('bool', true);\r\nconsole.info('bool = ', mmkv.decodeBool('bool'));\r\n    \r\nmmkv.encodeInt32('int32', Math.pow(2, 31) - 1);\r\nconsole.info('max int32 = ', mmkv.decodeInt32('int32'));\r\n    \r\nmmkv.encodeInt64('int', BigInt(2**63) - BigInt(1));\r\nconsole.info('max int64 = ', mmkv.decodeInt64('int'));\r\n    \r\nlet str: string = 'Hello OpenHarmony from MMKV';\r\nmmkv.encodeString('string', str);\r\nconsole.info('string = ', mmkv.decodeString('string'));\r\n\r\nlet arrayBuffer: ArrayBuffer = StringToArrayBuffer('Hello OpenHarmony from MMKV with bytes');\r\nmmkv.encodeBytes('bytes', arrayBuffer);\r\nlet bytes = mmkv.decodeBytes('bytes');\r\nconsole.info('bytes = ', ArrayBufferToString(bytes));\r\n```\r\n\r\nMMKV 更详细的用法参考 [HarmonyOS NEXT Tutorial](https://github.com/Tencent/MMKV/wiki/ohos_setup)。\r\n\r\n## License\r\nMMKV 以 BSD 3-Clause 证书开源，详情参见 [LICENSE.TXT](./LICENSE.TXT)。\r\n\r\n## 版本历史\r\n具体版本历史请参看 [CHANGELOG.md](./CHANGELOG.md)。\r\n\r\n## 参与贡献\r\n如果你有兴趣参与贡献，可以参考 [CONTRIBUTING.md](./CONTRIBUTING.md)。\r\n[腾讯开源激励计划](https://opensource.tencent.com/contribution) 鼓励开发者的参与和贡献，期待你的加入。\r\n\r\n为了明确我们对参与者的期望，MMKV 采用了被广泛使用的、由 Contributor Covenant 所定义的行为准则。我们认为它很好地阐明了我们的价值观。有关更多信息请查看 [Code of Conduct](./CODE_OF_CONDUCT.md)。\r\n\r\n## 问题 & 反馈\r\n常见问题参见 [FAQ](https://github.com/Tencent/MMKV/wiki/FAQ_cn)，欢迎提 [issues](https://github.com/Tencent/MMKV/issues) 提问反馈。\r\n\r\n## 个人信息处理规则\r\nMMKV 不收集、获取或上传任何个人信息，详情参考[《MMKV SDK个人信息保护规则》](https://support.weixin.qq.com/cgi-bin/mmsupportacctnodeweb-bin/pages/aY5BAtRiO1BpoHxo)。\r\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3818359375,
          "content": "# Security Policy\n\n## Supported Versions\n\nSecurity updates are currently being supported for these versions of MMKV.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 2.0.x   | :white_check_mark: |\n| 1.3.x   | :white_check_mark: |\n| < 1.3.9   | :x:                |\n\n## Reporting a Vulnerability\n\nSubmit an issue, or email me if it's sensitive, to report a vulnerability.\n"
        },
        {
          "name": "Script",
          "type": "tree",
          "content": null
        },
        {
          "name": "Win32",
          "type": "tree",
          "content": null
        },
        {
          "name": "flutter",
          "type": "tree",
          "content": null
        },
        {
          "name": "iOS",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}