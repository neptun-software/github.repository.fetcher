{
  "metadata": {
    "timestamp": 1736566299484,
    "page": 50,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kyleneideck/BackgroundMusic",
      "stars": 16586,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.419921875,
          "content": "# This file was added to get GitHub to display our source code correctly when\n# it has mixed tabs and spaces. (I didn't realise the sample code BGMDriver is\n# based on used tabs and it's too late to fix it now.)\n#\n# See http://editorconfig.org.\n\n# This is the top-most .editorconfig file.\nroot = true\n\n# Set tabs to the width of 4 spaces in C, C++, Objective-C and Objective-C++\n# source files.\n[*.{h,c,cpp,m,mm}]\ntab_width = 4\n\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.603515625,
          "content": ".DS_Store\n.*.swp\n/BGMDriver/BGMDriver/quick_install.conf\n/build_and_install.log\n.idea/\ntags\ncmake-build-debug/\n/Background-Music-*/\nBGM.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist\nImages/*.aux\nImages/*.log\n/archives/\n\n# Everything below is from https://github.com/github/gitignore/blob/master/Objective-C.gitignore\n\n## Build generated\nbuild/\nDerivedData\n\n## Various settings\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\n\n## Other\n*.xccheckout\n*.moved-aside\n*.xcuserstate\n*.xcscmblueprint\n\n## Obj-C/Swift specific\n*.hmap\n*.ipa\n"
        },
        {
          "name": "BGM.xcworkspace",
          "type": "tree",
          "content": null
        },
        {
          "name": "BGMApp",
          "type": "tree",
          "content": null
        },
        {
          "name": "BGMDriver",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.92578125,
          "content": "<!-- vim: set tw=120: -->\n\n# Contributing\n\nFirstly, thanks for reading this. Pull requests, bug reports, feature requests, questions, etc. are all very welcome --\nincluding ones from non-developers.\n\n## Issues\n\nYou'll probably want to update to the latest version of the code before creating an issue. The easiest way is to just\nrun the installation command from [README.md](/README.md#install) again. (But `git pull && ./build_and_install.sh` is\nfaster.)\n\nFor bug reports about `build_and_install.sh`, please include your `build_and_install.log`. It should be saved in the\ndirectory `build_and_install.sh` is in.\n\nIt might also be helpful to include logs in bug reports about Background Music itself. Those logs go to syslog by\ndefault, so you can use Console.app to read them. (It might help to search for \"BGM\" or \"Background Music\".)\n\nYou also might not get any log messages at all. Normally (i.e. in release builds) Background Music only logs errors and\nwarnings. We're still working on adding optional debug-level logging to release builds.\n\nIf you feel like being really helpful, you could reproduce your bug with a debug build and include the debug logs, which\nare much more detailed. But don't feel obligated to. To install a debug build, use `./build_and_install.sh -d`.\n\nIf you make an issue and you're interested in implementing/fixing it yourself, mention that in the issue so we can\nconfirm you're on the right track, assign the issue to you and so on.\n\n## Code\n\nThe code is mostly C++ and Objective-C. But don't worry if you don't know those languages--I don't either. Or Core\nAudio, for that matter. Also don't worry if you're not sure your code is right.\n\nNo dependencies so far. (Though you're welcome to add some.)\n\nThe best place to start is probably [DEVELOPING.md](/DEVELOPING.md), which has an overview of the project and\ninstructions for building, debugging, etc. It's kind of long, though, and not very interesting, so you might prefer to\ngo straight into the code. In that case, you'll probably want to start with\n[BGMAppDelegate.mm](/BGMApp/BGMApp/BGMAppDelegate.mm).\n\nIf you get stuck or have questions about the project, feel free to open an issue. You could also [email\nme](mailto:kyle@bearisdriving.com) or try [#backgroundmusic on\nFreenode](https://webchat.freenode.net/?channels=backgroundmusic).\n\nIf you have questions related to Core Audio, the [Core Audio mailing\nlist](https://lists.apple.com/archives/coreaudio-api) is very useful. There's also the [Core Audio\nOverview](https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/CoreAudioOverview/Introduction/Introduction.html)\nand the [Core Audio\nGlossary](https://developer.apple.com/library/mac/documentation/MusicAudio/Reference/CoreAudioGlossary/Glossary/core_audio_glossary.html).\n\nIf you remember to, add a copyright notice with your name to any source files you change substantially. Let us know in\nthe PR if you've intentionally not added one so we know not to add one for you.\n\n\n"
        },
        {
          "name": "DEVELOPING.md",
          "type": "blob",
          "size": 13.724609375,
          "content": "<!-- vim: set tw=120: -->\n\n# Development Overview\n\nThe codebase is split into two projects: BGMDriver, a [userspace](https://en.wikipedia.org/wiki/User_space) [Core\nAudio](https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/CoreAudioOverview/Introduction/Introduction.html)\n[HAL](https://developer.apple.com/library/mac/documentation/DeviceDrivers/Conceptual/WritingAudioDrivers/AudioOnMacOSX/AudioOnMacOSX.html#//apple_ref/doc/uid/TP30000730-TPXREF104)\n[plugin](https://developer.apple.com/library/prerelease/content/samplecode/AudioDriverExamples/Listings/ReadMe_txt.html)\nthat publishes the virtual audio device<sup id=\"a1\">[1](#f1)</sup>, and BGMApp, which handles the UI, passing audio from\nthe virtual device to the real output device and a few other things. The virtual device is usually referred to as\n\"BGMDevice\" in the code.  Any code shared between the two projects is kept in the `SharedSource` dir.\n\n## Summary\n\nFrom the user's perspective, BGMDevice appears as one input device and one output device, both named \"Background Music\".\nThey're shown in `System Settings > Sound` along with the real audio devices.\n\nWhen you start BGMApp, it sets BGMDevice as your system's default output device so the system (i.e. Core Audio) will\nstart sending all<sup id=\"a2\">[2](#f2)</sup> your audio data to BGMDriver. BGMDriver plays that audio on BGMDevice's\ninput stream, and the user can record it by selecting the Background Music device in QuickTime the same way they'd select\na microphone.\n\nSo that you can still hear the audio, BGMApp starts listening to BGMDevice's input stream and playing the audio out of\nyour real output device. (See [BGMPlayThrough](BGMApp/BGMApp/BGMPlayThrough.h)). \n\nThe auto-pausing and per-app volume features rely on the fact that BGMDriver can also see the audio from each program\n(technically each \"client\") before Core Audio mixes it all together. When you change an app's volume, BGMApp sends the\nnew volume to BGMDriver, which applies the app volumes by modifying the apps' audio data directly.\n\nTo know when to pause your music player, first BGMApp tells BGMDriver which app you've set as your music player. Then\nwhen audio is playing BGMDriver tells BGMApp whether it's coming from your music player or another app. If it's from\nanother app, BGMApp tells your music player to pause if it's playing as well. When the other program stops playing\naudio, BGMDriver tells BGMApp and BGMApp unpauses your music.\n\n## Real-time Constraints\n\nOne slightly tricky part of this project is the code that runs with real-time constraints. When [the\nHAL](https://developer.apple.com/library/prerelease/content/documentation/DeviceDrivers/Conceptual/WritingAudioDrivers/AudioOnMacOSX/AudioOnMacOSX.html#//apple_ref/doc/uid/TP30000730-TPXREF104)\ncalls certain functions of ours--the IO functions in BGMDriver and the IOProcs in BGMApp--they have to return within a\ncertain amount of time, every time. So they can't do things that aren't guaranteed to be fast, even if they almost\nalways are.\n\nThey can't dynamically allocate memory because OS X doesn't specify a maximum time for that to take. They also can't use\nalgorithms with a fast enough average-case run time if their worst-case is too slow.  In the `BGM_Device` class, they\ncan't lock the state mutex because a non-real-time function might be holding it and there's no guarantee it'll be\nreleased in time.\n\nIf you're interested, have a look at [Real-time Audio Programming 101: Time Waits for\nNothing](http://www.rossbencina.com/code/real-time-audio-programming-101-time-waits-for-nothing).\n\n## BGMDriver\n\nThe BGMDriver project is an audio driver for a virtual audio device named \"Background Music\", which we use to intercept\nthe audio playing on the user's system. The driver processes the audio data to apply per-app volumes, see if the music\nplayer is playing, etc. and then writes the audio to BGMDevice's input stream. It's essentially a loopback device with a\nfew extra features.\n\nThere are quite a few other open-source projects with drivers that do the same\nthing--[Soundflower](https://github.com/mattingalls/Soundflower) is probably the most well known--but as far as I know\nall of those drivers were either written as kernel extensions or using AudioHardwarePlugIn, which is now deprecated\nbecause of [issues with the OS X sandbox](https://lists.apple.com/archives/coreaudio-api/2013/Aug/msg00030.html). The\nApple sample code we started from gives us most of the same functionality and uses the latest Core Audio APIs. The other\nprojects are still definitely worth reading, though. There's a list in [the README](README.md) with a few of them.\n\nBGMDriver is an AudioServerPlugin (see\n[CoreAudio/AudioServerPlugIn.h](https://github.com/phracker/MacOSX-SDKs/blob/master/MacOSX10.11.sdk/System/Library/Frameworks/CoreAudio.framework/Versions/A/Headers/AudioServerPlugIn.h))\nbased on [Apple's SimpleAudio\nexample](https://developer.apple.com/library/mac/samplecode/AudioDriverExamples/Introduction/Intro.html).  An\nAudioServerPlugIn is a Core Audio driver that runs in userspace and is \"hosted\" by the HAL, which is nice because the\nHAL handles a lot of things for us. Only running in userspace means our bugs shouldn't be able to cause a kernel panic\n(though we can definitely crash the audio system) and users don't have to restart after installation. It also makes\ndebugging much less painful and is less insecure. In addition to running in userspace, the plugin also runs in a fairly\nrestrictive sandbox.\n\n`BGM_PlugInInterface.cpp` is where you'll find the entry point functions that the HAL calls, so it's a good place to\nstart. Those functions are our implementation of the interface defined by `AudioServerPlugIn.h`. They're mostly\nboilerplate and error handling code, and largely unchanged from the sample code. They call `BGM_PlugIn` or `BGM_Device`\n(and probably other subclasses of `BGM_Object` in future) to do the actual work.\n\n`BGM_Device` is by far the largest class, and should really be split up, but most of its code is very straightforward.\nThe simple parts mostly handle audio object properties, which are often static. An audio object is a plugin, device,\nstream, control (e.g. volume), etc. and is part of the HAL's object model. Each object is identified by an\n`AudioObjectID`. When the HAL asks us for the value of a property (or the size of the value, whether the value can be\nset, etc.) `BGM_Device` handles properties relating to our virtual device, its controls and its streams.\n\nThe rest of `BGM_Device` mostly handles IO. During each IO cycle, the HAL calls us for each phase of the cycle we\nsupport--reading input, writing output, etc. When the user has our device set as default, we receive the system's audio\nduring the read-input phase and store it in our ring buffer. Then in the write-output phase (technically, the\n`ProcessOutput` and `WriteMix` phases) we process the data and write from our ring buffer to our output stream. By\n\"process\" I just mean that we apply the per-app volume, keep track of whether the audio is audible or not, and other\nthings like that.\n\nBGMDriver's IO functions have to be real-time safe, which means any functions they call do as well. Some other functions\nneed to be real-time safe as well because they access data shared with the IO functions and have to do so on a real-time\nthread to avoid [priority inversion](https://en.wikipedia.org/wiki/Priority_inversion). Those functions are usually\ncalled using [BGM_TaskQueue](BGMDriver/BGMDriver/BGM_TaskQueue.h), which can dispatch calls to a real-time worker\nthread. BGM_TaskQueue can also be used from a real-time thread to asynchronously dispatch calls to functions that aren't\nreal-time safe.\n\n### Building and Debugging\n\nTo test your changes, build `Background Music Device.driver`, either inside Xcode (set the active scheme to \"BGMDevice\",\ngo `Product > Build For > Running` and look in the `products` folder) or with something like\n```shell\nxcodebuild -project BGMDriver/BGMDriver.xcodeproj -target \"PublicUtility\" -configuration Debug\nxcodebuild -project BGMDriver/BGMDriver.xcodeproj -configuration Debug\n```\nAnd then run `BGMDriver/BGMDriver/quick_install.sh` to install. Or if you'd rather install manually, copy `Background\nMusic Device.driver` to `/Library/Audio/Plug-Ins/HAL` and restart coreaudiod.\n\nYou might have to delete `BGMDriver/build` first if you're using `xcodebuild` and run into permissions problems.\n\nBefore you build, Xcode might show incorrect warnings on the `#pragma clang assume_nonnull` lines for some reason. They\ngo away after you build and don't seem to cause any problems.\n\n**The following debug instructions stopped working in OS X 10.11 (El Capitan).** [System Integrity\nProtection](https://support.apple.com/en-us/HT204899) stops LLDB from attaching to coreaudiod. I don't know of a\nworkaround except to disable SIP.\n\nTo debug in Xcode,\n - edit the BGMDevice scheme and\n    - set the build configuration to Debug,\n    - set \"Executable\" to coreaudiod in `/usr/sbin` (you can use `shift+cmd+G` to get there),\n    - check \"Debug Executable\",\n    - set the \"debug as\" user to root,\n    - and select \"wait for executable to be launched\",\n - set BGMDevice as the active scheme,\n - build and install,\n - stop coreaudiod\n\n   ```shell\n   sudo launchctl unload /System/Library/LaunchDaemons/com.apple.audio.coreaudiod.plist\n   ```\n - run in Xcode,\n - start coreaudiod\n\n   ```shell\n   sudo launchctl load /System/Library/LaunchDaemons/com.apple.audio.coreaudiod.plist\n   ```\n\nXcode should attach to the coreaudiod process when it starts running.\n\nDebug logging is to syslog by default. Console.app is probably the most convenient way to read it.\n\n### HALLab\n\nApple's HALLab tool can be useful for inspecting the driver's properties, notifications, etc. It's in the Audio Tools\nfor Xcode package, which you can find in the [Apple developer downloads](https://developer.apple.com/downloads/).\n\n## BGMApp\n\nBGMApp is a fairly standard Cocoa status-bar app, for the most part. The UI is simple and mostly built in Interface\nBuilder.\n\n`awakeFromNib` in [BGMAppDelegate.mm](/BGMApp/BGMApp/BGMAppDelegate.mm) is (more or less) the entry point/main\nfunction. `applicationDidFinishLaunching` gets called next and finishes setting things up.\n\nAt launch, BGMApp sets BGMDevice as the system's default device and starts playing the audio from BGMDevice through the\nactual output device. Usually that's the device that BGMDevice replaced when we set it as the default device. When\nBGMApp closes, it sets that device back as the default device.\n\nBGMApp stores a small amount of state data using [User\nDefaults](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/UserDefaults/AboutPreferenceDomains/AboutPreferenceDomains.html)\n-- currently just whether auto-pause is enabled and which music player to pause. Other persistent state (e.g. app\nvolumes) is managed by BGMDriver.\n\nBGMApp mostly communicates with BGMDriver through HAL notifications, though in some special cases we use XPC instead.\nThe only other communication between them is BGMDriver sending the system's audio data through BGMDevice's output\nstream, which BGMApp receives.\n\nFor example, when an app other than the music player starts playing audio, BGMDriver sends out a notification saying\nthat BGMDevice's `kAudioDeviceCustomPropertyDeviceAudibleState` property has changed.  BGMApp receives the notification\nfrom the HAL and decides whether it should pause the music player.\n\nOur custom notifications are defined/documented in `BGM_Types.h`, which is shared between the two projects.\n\nBGMApp also keeps the output device in sync with BGMDevice. For example, since BGMDevice is set as the default device,\nwhen the user changes their system volume only BGMDevice's volume will change. So BGMApp listens for changes to\nBGMDevice's volume and sets the output device's volume to match. \n\nThe only code in BGMApp that has to be real-time safe is in `BGMPlayThrough`'s IOProcs, `InputDeviceIOProc` and\n`OutputDeviceIOProc`, which don't do very much. The most complicated part of BGMApp is probably pausing/reducing IO when\nno other processes are playing audio, which is also handled in `BGMPlayThrough`.\n\n### BGMXPCHelper\n\nFrom [main.m](BGMApp/BGMXPCHelper/main.m):\n\n>BGMXPCHelper passes XPC messages between BGMDriver and BGMApp. So far it's only used for synchronization while starting\n>IO.\n\n>BGMApp and BGMDriver usually communicate by changing device properties and listening for notifications about those\n>changes, which the HAL sends. We use XPC, or plan to use it, for the few cases that notifications don't suit.\n\n### Building\n\nBuild and install/run BGMXPCHelper and `Background Music.app` either inside Xcode or with something like\n```shell\nsudo xcodebuild -project BGMApp/BGMApp.xcodeproj \\\n                -target BGMXPCHelper \\\n                DSTROOT=\"/\" \\\n                INSTALL_PATH=\"$(BGMApp/BGMXPCHelper/safe_install_dir.sh)\" \\\n                -configuration Debug \\\n                install\nsudo chown -R $(whoami):staff BGMApp/build  # Fix build dir ownership\nxcodebuild -project BGMApp/BGMApp.xcodeproj \\\n           -configuration Debug\nopen \"BGMApp/build/Debug/Background Music.app\"\n```\n\nYou might have to delete `BGMApp/build` first if you're using `xcodebuild` and run into permissions problems.\n\nTo test with Address Sanitizer, you might have to set the environment var `ASAN_OPTIONS=detect_odr_violation=0` to work\naround [Issue #647](https://github.com/google/sanitizers/issues/647). (In Xcode, go `Product` > `Scheme` > `Edit\nScheme...`, select the Background Music scheme, and add the environment var in Run > Arguments.)\n\n----\n\n<b id=\"f1\">[1]</b> It actually publishes two devices -- the main one and one for UI-related sounds, but you probably\nonly need to know about the main one. [↩](#a1)\n\n<b id=\"f2\">[2]</b> All, unless you're playing audio through a program that's set to always use a specific device or,\nfor some reason, doesn't switch to the new default device right away. [↩](#a2)\n\n\n"
        },
        {
          "name": "Images",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "LICENSE-Apple-Sample-Code",
          "type": "blob",
          "size": 2.88671875,
          "content": "Background Music includes code from Core Audio User-Space Driver\nExamples, see\n<https://developer.apple.com/library/mac/samplecode/AudioDriverExamples>,\nwhich was provided with the following copyright notice and the license\nbelow.\n \nCopyright (C) 2013 Apple Inc. All Rights Reserved.\n\nBackground Music includes code from Core Audio Utility Classes, see\n<https://developer.apple.com/library/content/samplecode/CoreAudioUtilityClasses>,\nwhich was provided with the following copyright notice and the license\nbelow.\n\nCopyright (C) 2014 Apple Inc. All Rights Reserved.\n\n------------------------------------------------------------------------\n\nDisclaimer: IMPORTANT:  This Apple software is supplied to you by Apple \nInc. (\"Apple\") in consideration of your agreement to the following \nterms, and your use, installation, modification or redistribution of \nthis Apple software constitutes acceptance of these terms.  If you do \nnot agree with these terms, please do not use, install, modify or \nredistribute this Apple software. \n \nIn consideration of your agreement to abide by the following terms, and \nsubject to these terms, Apple grants you a personal, non-exclusive \nlicense, under Apple's copyrights in this original Apple software (the \n\"Apple Software\"), to use, reproduce, modify and redistribute the Apple \nSoftware, with or without modifications, in source and/or binary forms; \nprovided that if you redistribute the Apple Software in its entirety and \nwithout modifications, you must retain this notice and the following \ntext and disclaimers in all such redistributions of the Apple Software. \nNeither the name, trademarks, service marks or logos of Apple Inc. may \nbe used to endorse or promote products derived from the Apple Software \nwithout specific prior written permission from Apple.  Except as \nexpressly stated in this notice, no other rights or licenses, express or \nimplied, are granted by Apple herein, including but not limited to any \npatent rights that may be infringed by your derivative works or by other \nworks in which the Apple Software may be incorporated. \n \nThe Apple Software is provided by Apple on an \"AS IS\" basis.  APPLE \nMAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION \nTHE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS \nFOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND \nOPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS. \n \nIN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL \nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \nINTERRUPTION) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, \nMODIFICATION AND/OR DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED \nAND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE), \nSTRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE \nPOSSIBILITY OF SUCH DAMAGE. \n\n\n"
        },
        {
          "name": "MANUAL-INSTALL.md",
          "type": "blob",
          "size": 1.4794921875,
          "content": "<!-- vim: set tw=120: -->\n\n# Manual Build and Install\n\n- Install the virtual audio device `Background Music Device.driver` to `/Library/Audio/Plug-Ins/HAL`.\n\n  ```shell\n  sudo xcodebuild -project BGMDriver/BGMDriver.xcodeproj \\\n                  -target \"PublicUtility\" \\\n                  RUN_CLANG_STATIC_ANALYZER=0 \\\n                  clean build\n  sudo xcodebuild -project BGMDriver/BGMDriver.xcodeproj \\\n                  -target \"Background Music Device\" \\\n                  RUN_CLANG_STATIC_ANALYZER=0 \\\n                  DSTROOT=\"/\" \\\n                  clean install\n  ```\n- Install the XPC helper.\n\n  ```shell\n  sudo xcodebuild -project BGMApp/BGMApp.xcodeproj \\\n                  -target BGMXPCHelper \\\n                  RUN_CLANG_STATIC_ANALYZER=0 \\\n                  DSTROOT=\"/\" \\\n                  INSTALL_PATH=\"$(BGMApp/BGMXPCHelper/safe_install_dir.sh)\" \\\n                  clean install\n  ```\n- Install `Background Music.app` to `/Applications` (or wherever).\n\n  ```shell\n  sudo xcodebuild -project BGMApp/BGMApp.xcodeproj \\\n                  -target \"Background Music\" \\\n                  RUN_CLANG_STATIC_ANALYZER=0 \\\n                  DSTROOT=\"/\" \\\n                  clean install\n  ```\n- Restart `coreaudiod`: <br>\n  (Audio will stop working until the next step, so you might want to pause any running audio apps.)\n\n  ```shell\n  sudo killall coreaudiod\n  ```\n\n  or, if that fails\n\n  ```shell\n  sudo launchctl kickstart -kp system/com.apple.audio.coreaudiod\n  ```\n- Run `Background Music.app`.\n\n\n"
        },
        {
          "name": "MANUAL-UNINSTALL.md",
          "type": "blob",
          "size": 2.0751953125,
          "content": "<!-- vim: set tw=120: -->\n\n# Manual Uninstall\n\n- Delete `Background Music.app` from `/Applications`.\n- Delete `Background Music Device.driver` from `/Library/Audio/Plug-Ins/HAL`.\n- Pause apps that are playing audio, if you can.\n- Restart `coreaudiod`:<br>\n  <sup>(Open `/Applications/Utilities/Terminal.app` and paste the following at the prompt.)</sup>\n\n  ```shell\n  sudo killall coreaudiod\n  ```\n  or, if that fails\n\n  ```shell\n  sudo launchctl kickstart -kp system/com.apple.audio.coreaudiod\n  ```\n- Go to the Sound section in System Settings and change your default output device at least once. (If you only have\n  one device now, either use `Audio MIDI Setup.app` to create a temporary aggregate device, restart any audio apps that\n  have stopped working or just restart your system.)\n  \n## Troubleshooting\n\nIf you still have the Background Music audio device, try using `Terminal.app` to make sure you've deleted its files:\n\n```shell\nsudo ls /Library/Audio/Plug-Ins/HAL\n```\n\nIf you see `Background Music Device.driver` in the output of that command, use this command to actually delete it:\n\n```shell\nsudo rm -rf \"/Library/Audio/Plug-Ins/HAL/Background Music Device.driver\"\n```\n\nThen restart `coreaudiod` again. If that still doesn't work, restart your computer. If that doesn't work, feel free to\nopen an issue. Include the output of `sudo ls /Library/Audio/Plug-Ins/HAL`.\n\n## Optional\n\n- Delete `BGMXPCHelper.xpc` from `/usr/local/libexec` or possibly `/Library/Application Support/Background Music`.\n- Unregister BGMXPCHelper.\n  - If you're using OS X 10.11 or later:\n\n    ```shell\n    sudo launchctl bootout system /Library/LaunchDaemons/com.bearisdriving.BGM.XPCHelper.plist\n    ```\n  - If you're using an earlier version of OS X:\n\n    ```shell\n    sudo launchctl unload /Library/LaunchDaemons/com.bearisdriving.BGM.XPCHelper.plist\n    ```\n- Delete BGMXPCHelper's launchd.plist.\n\n  ```shell\n  sudo rm /Library/LaunchDaemons/com.bearisdriving.BGM.XPCHelper.plist\n  ```\n- Delete BGMXPCHelper's user and group.\n\n  ```shell\n  sudo dscl . -delete /Users/_BGMXPCHelper\n  sudo dscl . -delete /Groups/_BGMXPCHelper\n  ```\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.4482421875,
          "content": "<!-- vim: set tw=120: -->\n\n![](Images/README/FermataIcon.png)\n\n# Background Music\n##### macOS audio utility\n\n<img src=\"Images/README/Screenshot.png\" width=\"340\" height=\"443\" />\n\n[Overview](#overview)<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Auto-pause music](#auto-pause-music)<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Application volume](#application-volume)<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Recording system audio](#recording-system-audio)<br/>\n[Download](#download)<br/>\n[Run / Configure](#run--configure)<br/>\n[Build and Install](#installing-from-source-code)</br>\n[Uninstall](#uninstall)<br/>\n[Troubleshooting](#troubleshooting)<br/>\n[Related Projects](#related-projects)<br/>\n[License](#license)<br/>\n\n# Overview\n\n+ Automatically pause/unpause your music player when other audio sources are playing/stopped\n+ Per-application volume control\n+ Record system audio\n+ No restart required to install\n\n##### *Note: Background Music is still in alpha.*\n\n## Auto-pause music\n\n**Background Music** automatically pauses your music player when a second audio source is playing and unpauses the player when the second source has stopped.\n\nThe auto-pause feature currently supports following music players:\n\n+ [iTunes](https://www.apple.com/itunes/)\n+ [Spotify](https://www.spotify.com)\n+ [VLC](https://www.videolan.org/vlc/)\n+ [VOX](https://vox.rocks/mac-music-player)\n+ [Decibel](https://sbooth.org/Decibel/)\n+ [Hermes](http://hermesapp.org/)\n+ [Swinsian](https://swinsian.com/)\n+ [GPMDP](https://www.googleplaymusicdesktopplayer.com/)\n\nAdding support for a new music player is usually straightforward.<sup id=\"a1\">[1](#f1)</sup> If you don't know how to program, or just don't feel\nlike it, feel free to [create an issue](https://github.com/kyleneideck/BackgroundMusic/issues/new). Otherwise, see\n[BGMMusicPlayer.h](BGMApp/BGMApp/Music%20Players/BGMMusicPlayer.h).\n\n## Application volume\n\n**Background Music** provides a volume slider for each application running your system. You can boost quiet applications above their maximum volume.\n\n## Recording system audio\n\nYou can record system audio with **Background Music**. With **Background Music** running, launch **QuickTime Player** and select **File > New Audio Recording** (or **New Screen Recording**, **New Movie Recording**). Then click the dropdown menu (`⌄`) next to the record button and select **Background Music** as the input device.\n\nYou can record system audio and a microphone together by creating an [aggregate\ndevice](https://support.apple.com/en-us/HT202000) that combines your input device (usually Built-in Input) with\nthe **Background Music** device. You can create the aggregate device using the **Audio MIDI Setup** utility under\n***/Applications/Utilities***.\n\n# Download\n\n**Requires macOS 10.13+**.\n\nYou can download the current version of **Background Music** using the following options. We also have [snapshot builds](https://github.com/kyleneideck/BackgroundMusic/releases).\n\n### Option 1\n\nDownload **version 0.4.3**:\n\n<a href=\"https://github.com/kyleneideck/BackgroundMusic/releases/download/v0.4.3/BackgroundMusic-0.4.3.pkg\"><img\nsrc=\"Images/README/pkg-icon.png\" width=\"32\" height=\"32\" align=\"absmiddle\" />\nBackgroundMusic-0.4.3.pkg</a> (771 KB)\n\n> <sub>MD5: 8c3bfe26c9cdf27365b9843f719ef188</sub><br/>\n> <sub>SHA256: c1c48a37c83af44ce50bee68879856c96b2f6c97360ce461b1c7d653515be7fd</sub><br/>\n> <sub>PGP:\n> [sig](https://github.com/kyleneideck/BackgroundMusic/releases/download/v0.4.3/BackgroundMusic-0.4.3.pkg.asc),\n> [key (0595DF814E41A6F69334C5E2CAA8D9B8E39EC18C)](https://bearisdriving.com/kyle-neideck.gpg)</sub>\n\n### Option 2\n\nInstall using [Homebrew](https://brew.sh/) by running the following command in **Terminal**:\n\n```bash\nbrew install --cask background-music\n```\n\n# Run / Configure\n\nJust run `Applications > Background Music.app`! **Background Music** sets itself as your default output device under\n`System Settings > Sound` when it starts up (and sets it back on Quit).\n\n### Launch at Startup (Optional)\n\nAdd **Background Music** to `System Settings > General > Login Items`.\n\n# Installing from Source Code\n\n**Background Music** usually takes less than a minute to build. You need [Xcode](https://developer.apple.com/xcode/download/) version\n10 or higher.\n\n### Option 1\n\n1. Open **Terminal**.\n2. Copy and paste the following command into **Terminal**:\n\n```shell\n(set -eo pipefail; URL='https://github.com/kyleneideck/BackgroundMusic/archive/master.tar.gz'; \\\n    cd $(mktemp -d); echo Downloading $URL to $(pwd); curl -qfL# $URL | gzcat - | tar x && \\\n    /bin/bash BackgroundMusic-master/build_and_install.sh -w && rm -rf BackgroundMusic-master)\n```\n\n<details><summary>More info...</summary>\n\nThis command uses `/bin/bash` instead of `bash` in case someone has a nonstandard Bash in their `$PATH`. However, it doesn't do this for `tar` or `curl`. In addition, `build_and_install.sh` doesn't call programs by absolute paths. This command also uses `gzcat - | tar x` instead of `tar xz` because `gzcat` will also check the file's integrity (gzip files\ninclude a checksum), and will ensure that a half-downloaded copy of `build_and_install.sh` doesn't run.\n\n</details>\n\n### Option 2\n\n1. Clone or [download](https://github.com/kyleneideck/BackgroundMusic/archive/master.zip) the project.\n2. If the project is in a zip, unzip it.\n3. Open **Terminal** and [change the directory](https://github.com/0nn0/terminal-mac-cheatsheet#core-commands) to the\n   directory containing the project.\n4. Run: `/bin/bash build_and_install.sh`.\n\nThe script restarts the system audio process (coreaudiod) at the end of the installation, so pause any applications\nplaying audio if you can.\n\nTo manually build and install, see [MANUAL_INSTALL.md](https://github.com/kyleneideck/BackgroundMusic/blob/master/MANUAL-INSTALL.md).\n\n# Uninstall\n\nTo uninstall **Background Music** from your system, follow these steps:\n\n1. Open **Terminal**.\n2. To locate `uninstall.sh`, run: `cd /Applications/Background\\ Music.app/Contents/Resources/`.\n3. Run: `bash uninstall.sh`.\n\nIf you cannot locate `uninstall.sh`, you can [download the project](https://github.com/kyleneideck/BackgroundMusic/archive/master.zip) again.\n\nTo manually uninstall, see [MANUAL_UNINSTALL.md](https://github.com/kyleneideck/BackgroundMusic/blob/master/MANUAL-UNINSTALL.md).\n\n# Troubleshooting\n\nIf Background Music crashes and your audio stops working, open `System Settings > Sound` and change your\nsystem's default output device to something other than the **Background Music device**. If it already is, then\nchange the default device and then change it back again.\n\nMake sure you allow \"microphone access\" when you first run Background Music. If you denied it, go to\n`System Settings > Security & Privacy > Privacy > Microphone`, find Background Music in the list\nand check the box next to it. Background Music doesn't actually listen to your microphone. It needs\nthe permission because it gets your system audio from its virtual input device, which macOS counts\nas a microphone. (We're working on it in [#177](/../../issues/177).)\n\nIf the volume slider for an app isn't working, try looking in `More Apps` for entries like `Some\nApp (Helper)`. For some meeting or video chat apps, you may need to do this to change the current\nmeeting volume.\n\n## Known issues and solutions\n\n- **Setting an application's volume above 50% can cause [clipping](https://en.wikipedia.org/wiki/Clipping_(audio)).**\n\n    - Set your volume to its maximum level and lower the volumes of other applications.\n\n- **Only 2-channel (stereo) audio devices are currently supported for output.**\n\n- **VLC pauses iTunes or Spotify when playing, and stops Background Music from unpausing your music afterward.**\n\n    - Under VLC's preferences, select **Show All**. Navigate to **Interface > Main interfaces > macosx** and change *Control external music players* to either *Do nothing* or *Pause and resume iTunes/Spotify*.\n\n- **Skype pauses iTunes during calls.**\n\n    - To disable this, uncheck *Pause iTunes during calls* on the **General** tab of **Skype**'s preferences.\n\n- **Plugging in or unplugging headphones when Background Music isn't running causes silence in the system audio.**\n    - Navigate to **System Settings > Sound**. Click the **Output** tab and change your default output device to something other than the **Background Music** device. Alternatively, press **Option + Click** on the sound icon within the menu bar to select a different output device. This happens when macOS remembers that the **Background Music** device was your default audio device the last time you used (or didn't use) headphones.\n\n- **[A Chrome bug](https://bugs.chromium.org/p/chromium/issues/detail?id=557620) stops Chrome from switching to the Background Music device after you open Background Music.**\n    - Chrome's audio will still play, but **Background Music** won't be aware of it.\n\n- **Some applications play notification sounds that are only just long enough to trigger an auto-pause.**\n    - Increase the `kPauseDelayNSec` constant in [BGMAutoPauseMusic.mm](/BGMApp/BGMApp/BGMAutoPauseMusic.mm). It will increase your music's overlap time over other audio, so don't increase it too much. See [#5](https://github.com/kyleneideck/BackgroundMusic/issues/5) for details.\n\nMany other issues are listed in [TODO.md](/TODO.md) and in [GitHub\nIssues](https://github.com/kyleneideck/BackgroundMusic/issues).\n\n# Related projects\n\n- [Core Audio User-Space Driver\n  Examples](https://developer.apple.com/library/mac/samplecode/AudioDriverExamples/Introduction/Intro.html)\n  The sample code from Apple that BGMDriver is based on.\n- [Soundflower](https://github.com/mattingalls/Soundflower) - \"MacOS system extension that allows applications to pass\n  audio to other applications.\"\n- [WavTap](https://github.com/pje/WavTap) - \"globally capture whatever your mac is playing—-as simply as a screenshot\"\n- [eqMac](http://www.bitgapp.com/eqmac/), [GitHub](https://github.com/nodeful/eqMac2) - \"System-wide Audio Equalizer for the Mac\"\n- [llaudio](https://github.com/mountainstorm/llaudio) - \"An old piece of work to reverse engineer the Mac OSX\n  user/kernel audio interface. Shows how to read audio straight out of the kernel as you would on Darwin (where most the\n  OSX goodness is missing)\"\n- [mute.fm](http://www.mutefm.com), [GitHub](https://github.com/jaredsohn/mutefm) (Windows) - Auto-pause music\n- [Jack OS X](http://www.jackosx.com) - \"A Jack audio connection kit implementation for Mac OS X\"\n- [PulseAudio OS X](https://github.com/zonque/PulseAudioOSX) - \"PulseAudio for Mac OS X\"\n- [Sound Pusher](https://github.com/q-p/SoundPusher) - \"Virtual audio device, real-time encoder and SPDIF forwarder for\n  Mac OS X\"\n- [Zirkonium](https://code.google.com/archive/p/zirkonium) - \"An infrastructure and application for multi-channel sound\n  spatialization on MacOS X.\"\n- [BlackHole](https://github.com/ExistentialAudio/BlackHole) - \"a modern macOS virtual audio driver that allows applications to pass audio to other applications with zero additional latency.\"\n\n### Non-free\n\n- [Audio Hijack](https://rogueamoeba.com/audiohijack/), [SoundSource](https://rogueamoeba.com/soundsource/) - \"Capture\n  Audio From Anywhere on Your Mac\", \"Get truly powerful control over all the audio on your Mac!\"\n- [Sound Siphon](https://staticz.com/soundsiphon/), [Sound Control](https://staticz.com/soundcontrol/) - System/app audio recording, per-app volumes, system audio equaliser\n- [SoundBunny](https://www.prosofteng.com/soundbunny-mac-volume-control/) - \"Control application volume independently.\"\n- [Boom 2](https://www.globaldelight.com/boom/) - \"The Best Volume Booster & Equalizer For Mac\"\n\n## License\n\nCopyright © 2016-2024 [Background Music contributors](https://github.com/kyleneideck/BackgroundMusic/graphs/contributors).\nLicensed under [GPLv2](https://www.gnu.org/licenses/gpl-2.0.html), or any later version.\n\n**Background Music** includes code from:\n\n- [Core Audio User-Space Driver\n  Examples](https://developer.apple.com/library/mac/samplecode/AudioDriverExamples/Introduction/Intro.html), [original\n  license](LICENSE-Apple-Sample-Code), Copyright (C) 2013 Apple Inc. All Rights Reserved.\n- [Core Audio Utility\n  Classes](https://developer.apple.com/library/content/samplecode/CoreAudioUtilityClasses/Introduction/Intro.html),\n  [original license](LICENSE-Apple-Sample-Code), Copyright (C) 2014 Apple Inc. All Rights Reserved.\n\n----\n\n<b id=\"f1\">[1]</b> However, if the music player doesn't support AppleScript, or doesn't support the events Background\nMusic needs (`isPlaying`, `isPaused`, `play` and `pause`), it can take significantly more effort to add. (And in some\ncases would require changes to the music player itself.) [↩](#a1)\n\n\n"
        },
        {
          "name": "SharedSource",
          "type": "tree",
          "content": null
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 5.3125,
          "content": "<!-- vim: set tw=120: -->\n\n# TODOs for BGMApp and BGMDriver\n\nThere are also lots of other TODOs commented around the code.\n\n## Fairly quick\n\n- Add nullability qualifiers to files without them. Use `assume_nonnull` pragmas everywhere.\n\n- Keyboard shortcuts for the system volume boost and the frontmost app's volume\n\n- Should we hide music players in the preferences menu if Launch Services says they aren't installed? (And they aren't\n  running or otherwise obviously present on the system.) If so, should we have a \"show all\" menu item?\n\n- System-wide volume boost\n\n- Listen for notifications when the output device is removed/disabled and revert to the previous output device\n\n- User-friendly installation process and binaries. A .dmg with `Background Music.app` and `Background Music\n  Device.driver` should be fine. Include links to `/Applications` and `/Library/Audio/Plug-Ins/HAL` with instructions to\n  drag-and-drop. BGMApp will need to restart coreaudiod on the first run so it can use BGMDevice. (See `launchctl`\n  commands in README.) I'm not sure how much work it is to make builds reproducible with Xcode, but it would be worth\n  looking into.\n\n## Less quick\n\n- Recording system/application audio. You can already record system audio by selecting BGMDevice as the input device in\n  QuickTime Player but that isn't obvious.\n\n- Persist some of BGMDriver's state (app volumes, music player, etc.) using `WriteToStorage` and `CopyFromStorage` from\n  AudioServerPlugIn.h. Right now it's lost when you restart.  CACFPreferences.h looks like it might be appropriate for\n  this.\n\n- So we don't increase clipping, we should only increase an app's relative volume in the driver if the output device is\n  already at full volume. My first thought is to set the volume of the output device to the highest app volume and\n  reduce the other app's volumes in the driver so they sound the same. Matching the output device's volume curve might\n  be a little tricky.\n\n- More tests. Integration or performance tests would be nice.\n\n- Support for more music players\n\n- Support for custom music players. Probably easiest to ask the user for AppleScript snippets. It could also have an\n  option to simulate pressing the play/pause key on the keyboard, which would be less hassle for users.\n\n- Allow the user to select multiple music players.\n\n- Start at login option/setting\n\n- App volumes are only stored with the app's bundle ID and pid, so volumes for apps without bundle IDs are forgotten\n  when the apps are closed.\n\n- `-Wprofile-instr-out-of-date` is disabled in BGMApp because I think we're running into \n  <https://llvm.org/bugs/show\\_bug.cgi?id=24996>\n\n- Support for devices with more than two output channels\n\n- Split `BGM_Device.cpp` into smaller classes\n\n- MPlayer OSX Extended's HAL client isn't the same process as the one we get from `NSRunningApplications` and it gives\n  the HAL a different bundle ID. I think it would work (in most cases like that) to also send any child processes'\n  pids/bundle IDs with the app volumes.\n\n- Advanced preferences menu options:\n    - Uninstall\n    - Restart driver/coreaudiod\n    - Size of the IO buffers on the output device, to trade off latency for CPU. BGMDriver will have to be set to match\n      the output device. I don't think its IO buffer size is settable yet.\n\n- Should we hide the BGM device when BGMApp isn't running? This would fix the problem of our device being left as the\n  default device if BGMApp doesn't shutdown properly (because of a crash, hard reset, etc.), which stops the system from\n  playing audio. The problem with that is the Background Music device can still be used without BGMApp, to record\n  system/apps' audio, so ideally the BGM device would be able to just unset itself as the default device when BGMApp\n  isn't running.  For now, I think we should just have `kAudioDevicePropertyDeviceCanBeDefaultDevice` become false.\n\n- Fault-tolerance:\n    - BGMApp should catch any uncaught `CAException` from `BGMPlayThrough` and try to restart\n      playthrough. (In release builds only.)\n    - ...\n\n- Only allow one instance of BGMApp to be running. Show a warning if the user tries to start another one. It would be\n  nice if the warning offered to kill the other instances and start a new one.\n\n- When BGMApp changes the default device to BGMDevice, some apps seem to keep using the previous default device if they\n  were running IO at the time. Not sure if we can do anything about this.\n\n- Figure out how to test BGMDriver with Address Sanitizer enabled. It isn't working because it makes coreaudiod try to\n  read files outside of its sandbox and the system kills it.\n\n- Proper crash reporting.\n    - CrashReporter doesn't show a GUI if BGMApp crashes because it has `LSUIElement` set in its `Info.plist`.\n    - We can't always symbolicate users' crash logs (from CrashReporter) because we don't have their debug symbols.\n\n- Test Background Music on a system running OS X on a case-sensitive file system.\n    - In [#64](https://github.com/kyleneideck/BackgroundMusic/issues/64), BGMDriver failed to compile and the error\n      suggests it was a case-sensitivity problem. That should be fixed now, but I haven't looked for any runtime bugs.\n    - As a partial solution, Travis CI now builds Background Music in a case-sensitive disk image.\n\n- BGMApp and BGMXPCHelper should be sandboxed. (BGMDriver already is because it runs in the `coreaudiod` system\n  process.)\n\n\n"
        },
        {
          "name": "build_and_install.sh",
          "type": "blob",
          "size": 32.1875,
          "content": "#!/bin/bash\n# vim: tw=100:\n\n# This file is part of Background Music.\n#\n# Background Music is free software: you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation, either version 2 of the\n# License, or (at your option) any later version.\n#\n# Background Music is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Background Music. If not, see <http://www.gnu.org/licenses/>.\n\n#\n# build_and_install.sh\n#\n# Copyright © 2016-2022, 2024 Kyle Neideck\n# Copyright © 2016 Nick Jacques\n#\n# Builds and installs BGMApp, BGMDriver and BGMXPCHelper. Requires xcodebuild and Xcode.\n#\n# Don't let the length of this script scare you away from building/installing without it (using\n# either Xcode or xcodebuild). 90% of this code is for error handling, logging, user friendliness,\n# etc. See MANUAL-INSTALL.md, DEVELOPING.md and BGMDriver/BGMDriver/quick_install.sh.\n#\n\n# Safe mode\nset -euo pipefail\nIFS=$'\\n\\t'\n\n# Subshells and functions inherit the ERR trap\nset -o errtrace\n\n# Go to the project directory.\ncd \"$( dirname \"${BASH_SOURCE[0]}\" )\"\n\nerror_handler() {\n    LAST_COMMAND=\"$3\" LAST_COMMAND_EXIT_STATUS=\"$2\"\n\n    # Log the error.\n    echo \"Failure in $0 at line $1. The last command was (probably)\" >> ${LOG_FILE}\n    echo \"    ${LAST_COMMAND}\" >> ${LOG_FILE}\n    echo \"which exited with status ${LAST_COMMAND_EXIT_STATUS}.\" >> ${LOG_FILE}\n    echo \"Error message: ${ERROR_MSG}\" >> ${LOG_FILE}\n    echo >> ${LOG_FILE}\n\n    # Scrub username from log (and also real name just in case).\n    sed -i'tmp' \"s/$(whoami)/[username removed]/g\" ${LOG_FILE}\n    sed -i'tmp' \"s/$(id -F)/[name removed]/g\" ${LOG_FILE}\n    rm \"${LOG_FILE}tmp\"\n\n    # Print an error message.\n    echo \"$(tput setaf 9)ERROR$(tput sgr0): Install failed at line $1 with the message:\" >&2\n    echo -e \"${ERROR_MSG}\" >&2\n    echo >&2\n    echo \"Feel free to report this. If you do, you'll probably want to include the\" \\\n         \"build_and_install.log file from this directory ($(pwd)). But quickly skim through it\" \\\n         \"first to check that it doesn't include any personal information. It shouldn't, but this\" \\\n         \"is alpha software so you never know.\" >&2\n    echo >&2\n    echo \"To try building and installing without this build script, see MANUAL-INSTALL.md.\" >&2\n    echo >&2\n    echo \"You can also try ignoring compiler warnings with: $0 -w\" >&2\n\n    echo >&2\n    echo \"Error details:\" >&2\n    echo \"Line $1. The last command was (probably)\" >&2\n    echo \"    ${LAST_COMMAND}\" >&2\n    echo \"which exited with status ${LAST_COMMAND_EXIT_STATUS}.\" >&2\n    echo >&2\n\n    # Finish logging debug info if the script fails early.\n    if ! [[ -z ${LOG_DEBUG_INFO_TASK_PID:-} ]]; then\n        wait ${LOG_DEBUG_INFO_TASK_PID}\n    fi\n}\n\nenable_error_handling() {\n    if [[ -z ${CONTINUE_ON_ERROR} ]] || [[ ${CONTINUE_ON_ERROR} -eq 0 ]]; then\n        set -e\n        # TODO: The version of Bash that ships with OSX only gives you the line number of the\n        #       function the error occurred in -- not the line the error occurred on. There are a\n        #       few solutions suggested on various websites, but none of them work.\n        trap 'error_handler ${LINENO} $? \"${BASH_COMMAND}\"' ERR\n    fi\n}\n\ndisable_error_handling() {\n    set +e\n    trap - ERR\n}\n\n# Build for release by default. Use -d for a debug build.\nCONFIGURATION=Release\n#CONFIGURATION=Debug\n\nXCODEBUILD_ACTION=\"install\"\n\n# The default is to clean before installing because we want the log file to have roughly the same\n# information after every build.\nCLEAN=clean\n\nXCODEBUILD_OPTIONS=\"\"\n\nCONTINUE_ON_ERROR=0\n\n# Update .gitignore if you change this.\nLOG_FILE=build_and_install.log\n\n# Empty the log file\necho -n > ${LOG_FILE}\n\nCOREAUDIOD_PLIST=\"/System/Library/LaunchDaemons/com.apple.audio.coreaudiod.plist\"\n\n# Output locations for installing. These are overwritten later if building or archiving.\n#\n# TODO: Should (can?) we use xcodebuild to get these from the Xcode project rather than duplicating\n#       them?\nAPP_PATH=\"/Applications\"\nAPP_DIR=\"Background Music.app\"\nDRIVER_PATH=\"/Library/Audio/Plug-Ins/HAL\"\nDRIVER_DIR=\"Background Music Device.driver\"\n# XPC_HELPER_OUTPUT_PATH is set below because it depends on the system (when installing).\nXPC_HELPER_DIR=\"BGMXPCHelper.xpc\"\n\n# The root output directory when archiving.\nARCHIVES_DIR=\"archives\"\n\nGENERAL_ERROR_MSG=\"Internal script error. Probably a bug in this script.\"\nBUILD_FAILED_ERROR_MSG=\"A build command failed. Probably a compilation error.\"\nBGMAPP_FAILED_TO_START_ERROR_MSG=\"Background Music (${APP_PATH}/${APP_DIR}) didn't seem to start \\\nup. It might just be taking a while.\n\nIf it didn't install correctly, you'll need to open the Sound control panel in System Settings \\\nand change your output device at least once. Your sound probably won't work until you do. (Or you \\\nrestart your computer.)\n\nIf you only have one device, you can create a temporary one by opening \\\n\\\"/Applications/Utilities/Audio MIDI Setup.app\\\", clicking the plus button and choosing \\\"Create \\\nMulti-Output Device\\\".\"\nERROR_MSG=\"${GENERAL_ERROR_MSG}\"\n\nXCODEBUILD=\"/usr/bin/xcodebuild\"\nif ! [[ -x \"${XCODEBUILD}\" ]]; then\n    XCODEBUILD=$(which xcodebuild || true)\nfi\n# This check is last because it takes 10 seconds or so if it fails.\nif ! [[ -x \"${XCODEBUILD}\" ]]; then\n    XCODEBUILD=\"$(/usr/bin/xcrun --find xcodebuild 2>>${LOG_FILE} || true)\"\nfi\n\nRECOMMENDED_MIN_XCODE_VERSION=8\n\nusage() {\n    echo \"Usage: $0 [options]\" >&2\n    echo -e \"\\t-n            Don't clean before building/installing.\" >&2\n    echo -e \"\\t-d            Debug build. (Release is the default.)\" >&2\n    echo -e \"\\t-a            Build and archive, don't install. See Xcode docs for info about archiving.\" >&2\n    echo -e \"\\t-b            Build only, don't install.\" >&2\n    echo -e \"\\t-w            Ignore compiler warnings. (They're treated as errors by default.)\" >&2\n    echo -e \"\\t-x [options]  Extra options to pass to xcodebuild.\" >&2\n    echo -e \"\\t-c            Continue on script errors. Might not be safe.\" >&2\n    echo -e \"\\t-h            Print this usage statement.\" >&2\n    exit 1\n}\n\nbold_face() {\n    echo $(tput bold)$*$(tput sgr0)\n}\n\n# Takes a PID and returns 0 if the process is running.\nis_alive() {\n    kill -0 $1 > /dev/null 2>&1 && return 0 || return 1\n}\n\n# Shows a \"...\" animation until the previous command finishes. Shows an error message and exits the\n# script if the command fails. The return value will be the exit status of the command.\n#\n# Params:\n#  - The error message to show if the previous command fails.\n#  - An optional timeout in seconds.\nshow_spinner() {\n    disable_error_handling\n\n    local PREV_COMMAND_PID=$!\n\n    # Get the previous command as a string, with variables resolved. Assumes that if the command has\n    # a child process we just want the text of the child process's command. (And that it only has\n    # one child.)\n    local CHILD_PID=$(pgrep -P ${PREV_COMMAND_PID} | head -n1 || echo ${PREV_COMMAND_PID})\n    local PREV_COMMAND_STRING=$(ps -o command= ${CHILD_PID})\n    local TIMEOUT=${2:-0}\n\n    exec 3>&1 # Creates an alias so the following subshell can print to stdout.\n    DID_TIMEOUT=$(\n        I=1\n        while (is_alive ${PREV_COMMAND_PID}) && \\\n            ([[ ${TIMEOUT} -lt 1 ]] || [[ $I -lt ${TIMEOUT} ]])\n        do\n            printf '.' >&3\n            sleep 1\n            # Erase after we've printed three dots. (\\b is backspace.)\n            [[ $((I % 3)) -eq 0 ]] && printf '\\b\\b\\b   \\b\\b\\b' >&3\n            ((I++))\n        done\n        if [[ $I -eq ${TIMEOUT} ]]; then\n            kill ${PREV_COMMAND_PID} >> ${LOG_FILE} 2>&1\n            echo 1\n        else\n            echo 0\n        fi)\n    exec 3<&- # Close the file descriptor.\n\n    wait ${PREV_COMMAND_PID}\n    local EXIT_STATUS=$?\n\n    # Clean up the dots.\n    printf '\\b\\b\\b   \\b\\b\\b'\n\n    # Print an error message if the command fails.\n    # (wait returns 127 if the process has already exited.)\n    if [[ ${EXIT_STATUS} -ne 0 ]] && [[ ${EXIT_STATUS} -ne 127 ]]; then\n        ERROR_MSG=\"$1\"\n        if [[ ${DID_TIMEOUT} -ne 0 ]]; then\n            ERROR_MSG+=\"\\n\\nCommand timed out after ${TIMEOUT} seconds.\"\n        fi\n\n        error_handler ${LINENO} ${EXIT_STATUS} \"${PREV_COMMAND_STRING}\"\n\n        if [[ ${CONTINUE_ON_ERROR} -eq 0 ]]; then\n            exit ${EXIT_STATUS}\n        fi\n    fi\n\n    enable_error_handling\n\n    return ${EXIT_STATUS}\n}\n\nparse_options() {\n    while getopts \":ndabwx:ch\" opt; do\n        case $opt in\n            n)\n                CLEAN=\"\"\n                ;;\n            d)\n                CONFIGURATION=\"Debug\"\n                ;;\n            a)\n                # The \"archive\" action makes a build for distribution. It's the same as the archive\n                # option in Xcode. It won't install.\n                XCODEBUILD_ACTION=\"archive\"\n                # The dirs xcodebuild will put the archives in.\n                APP_PATH=\"$ARCHIVES_DIR/BGMApp.xcarchive\"\n                XPC_HELPER_OUTPUT_PATH=\"$ARCHIVES_DIR/BGMXPCHelper.xcarchive\"\n                DRIVER_PATH=\"$ARCHIVES_DIR/BGMDriver.xcarchive\"\n                ;;\n            b)\n                # Just build; don't install.\n                XCODEBUILD_ACTION=\"build\"\n                # The dirs xcodebuild will build in.\n                # TODO: If these dirs were created by running this script without -b, they'll be\n                #       owned by root and xcodebuild will fail.\n                APP_PATH=\"./BGMApp/build\"\n                XPC_HELPER_OUTPUT_PATH=\"./BGMApp/build\"\n                DRIVER_PATH=\"./BGMDriver/build\"\n                ;;\n            w)\n                # TODO: What if they also pass their own OTHER_CFLAGS with -x?\n                XCODEBUILD_OPTIONS=\"${XCODEBUILD_OPTIONS} OTHER_CFLAGS=\\\"-Wno-error\\\"\"\n                ;;\n            x)\n                XCODEBUILD_OPTIONS=\"$OPTARG\"\n                ;;\n            c)\n                CONTINUE_ON_ERROR=1\n                echo \"$(tput setaf 11)WARNING$(tput sgr0): Ignoring errors.\"\n                disable_error_handling\n                ;;\n            h)\n                usage\n                ;;\n            \\?)\n                echo \"Invalid option: -$OPTARG\" >&2\n                usage\n                ;;\n        esac\n    done\n}\n\n# check_xcode return codes\nCHECK_XCODE_NO_ERR=0\nCHECK_XCODE_ERR_NO_CLTOOLS=1\nCHECK_XCODE_ERR_NO_XCODE=2\nCHECK_XCODE_ERR_NO_CLTOOLS_OR_XCODE=3\nCHECK_XCODE_ERR_LICENSE_NOT_ACCEPTED=4\nCHECK_XCODE_ERR_OLD_VERSION=5\n\n# Checks if $XCODEBUILD is a usable xcodebuild. Exits with one of the status codes above.\ncheck_xcode() {\n    local EXIT_CODE=${CHECK_XCODE_NO_ERR}\n\n    # First, check xcodebuild exists on the system an is an executable.\n    if ! [[ -x \"${XCODEBUILD}\" ]] || ! /usr/bin/xcode-select --print-path &>/dev/null || \\\n        (! [[ -e /Library/Developer/CommandLineTools/usr/bin/git ]] && \\\n            ! pkgutil --pkg-info=com.apple.pkg.CLTools_Executables &>/dev/null); then\n        EXIT_CODE=${CHECK_XCODE_ERR_NO_CLTOOLS}\n    fi\n\n    # Check that Xcode is installed, not just the command line tools.\n    if [[ \"${XCODE_VERSION}\" == \"-1\" ]]; then\n        ((EXIT_CODE+=2))\n    fi\n\n    # Check they've already accepted the Xcode license. This code is mostly copied from\n    # Homebrew/Library/Homebrew/brew.sh.\n    disable_error_handling\n\n    local XCRUN_OUTPUT  # (Declared local before assigning so we can get $?.)\n    XCRUN_OUTPUT=\"$(/usr/bin/xcrun clang 2>&1)\"\n    local XCRUN_STATUS=\"$?\"\n    if [[ ${EXIT_CODE} -eq 0 ]] && \\\n        [[ \"${XCRUN_STATUS}\" -ne 0 ]] && \\\n        ( [[ \"${XCRUN_OUTPUT}\" = *license* ]] || [[ \"${XCRUN_OUTPUT}\" = *licence* ]] ); then\n        EXIT_CODE=${CHECK_XCODE_ERR_LICENSE_NOT_ACCEPTED}\n    fi\n\n    enable_error_handling\n\n    # Version check.\n    local XCODE_MAJOR_VERSION=\"$(echo ${XCODE_VERSION} | sed 's/\\..*$//g')\" \n    if [[ ${EXIT_CODE} -eq 0 ]] && \\\n        [[ \"${XCODE_MAJOR_VERSION}\" -lt ${RECOMMENDED_MIN_XCODE_VERSION} ]]\n    then\n        EXIT_CODE=${CHECK_XCODE_ERR_OLD_VERSION}\n    fi\n\n    exit ${EXIT_CODE}\n}\n\n# Expects CHECK_XCODE_TASK_PID to be set and error handling to be disabled. Returns 1 if we need to\n# check for Xcode again.\nhandle_check_xcode_result() {\n    if [[ -z ${HANDLED_CHECK_XCODE_RESULT:-} ]]; then\n        HANDLED_CHECK_XCODE_RESULT=1\n        # Wait for the Xcode checks to finish.\n        wait ${CHECK_XCODE_TASK_PID}\n        CHECK_XCODE_TASK_STATUS=$?\n\n        # If there was a problem with Xcode/xcodebuild, print the error message and exit.\n        if [[ ${CHECK_XCODE_TASK_STATUS} -ne ${CHECK_XCODE_NO_ERR} ]]; then\n            handle_check_xcode_failure ${CHECK_XCODE_TASK_STATUS}\n            local STATUS=$?\n            return ${STATUS}\n        fi\n    fi\n\n    return 0\n}\n\n# Returns 1 if we need to check for Xcode again. Expects error handling to be disabled.\n#\n# Params:\n#  - The exit code of check_xcode.\nhandle_check_xcode_failure() {\n    local CONTINUE=${CONTINUE_ON_ERROR}\n\n    # No command line tools\n    if [[ $1 -eq ${CHECK_XCODE_ERR_NO_CLTOOLS} ]] || \\\n            [[ $1 -eq ${CHECK_XCODE_ERR_NO_CLTOOLS_OR_XCODE} ]]; then\n        echo \"$(tput setaf 9)ERROR$(tput sgr0): The Xcode Command Line Tools don't seem to be\" \\\n             \"installed on your system.\" >&2\n        echo >&2\n        echo \"If you have Xcode installed, you should be able to install them with\" >&2\n        echo \"    sudo /usr/bin/xcode-select --install\" >&2\n        echo \"If not, you'll need to install Xcode (~9GB), because xcodebuild no longer works\" \\\n             \"without it.\" >&2\n        echo >&2\n    fi\n\n    # No Xcode (that the command line tools are aware of)\n    if [[ $1 -eq ${CHECK_XCODE_ERR_NO_XCODE} ]] || \\\n            [[ $1 -eq ${CHECK_XCODE_ERR_NO_CLTOOLS_OR_XCODE} ]]; then\n        if ! handle_check_xcode_failure_no_xcode $1; then\n            return 1\n        fi\n    fi\n\n    # They need to agree to the Xcode license.\n    if [[ $1 -eq ${CHECK_XCODE_ERR_LICENSE_NOT_ACCEPTED} ]]; then\n        echo \"$(tput setaf 9)ERROR$(tput sgr0): You need to agree to the Xcode license before you\" \\\n             \"can build Background Music. Run this command and then try again:\" >&2\n        echo \"    sudo ${XCODEBUILD} -license\" >&2\n        echo >&2\n    fi\n\n    # Xcode version is probably too old.\n    if [[ $1 -eq ${CHECK_XCODE_ERR_OLD_VERSION} ]]; then\n        echo \"$(tput setaf 11)WARNING$(tput sgr0): Your version of Xcode (${XCODE_VERSION}) may\" \\\n             \"not be recent enough to build Background Music. If you have a newer version\" \\\n             \"installed, you can set the Xcode command line tools to use it with\" >&2\n        echo \"    sudo /usr/bin/xcode-select --switch /the/path/to/your/Xcode.app\" >&2\n        echo >&2\n        CONTINUE=1\n    fi\n\n    # Try to find Xcode and print a more useful error message.\n    if [[ $1 -eq ${CHECK_XCODE_ERR_NO_CLTOOLS} ]] || \\\n            [[ $1 -eq ${CHECK_XCODE_ERR_NO_XCODE} ]] || \\\n            [[ $1 -eq ${CHECK_XCODE_ERR_NO_CLTOOLS_OR_XCODE} ]] || \\\n            [[ $1 -eq ${CHECK_XCODE_ERR_OLD_VERSION} ]]; then\n        echo \"Searching for Xcode installations...\" >&2\n        echo >&2\n        XCODE_PATHS=$(mdfind \"kMDItemCFBundleIdentifier == 'com.apple.dt.Xcode' || \\\n                              kMDItemCFBundleIdentifier == 'com.apple.Xcode'\")\n\n        if [[ \"${XCODE_PATHS}\" != \"\" ]]; then\n            echo \"It looks like you have Xcode installed to:\" >&2\n            echo \"${XCODE_PATHS}\" >&2\n        else\n            echo \"None found.\" >&2\n        fi\n    fi\n\n    # Exit with an error status, unless we only printed a warning or were told to continue anyway.\n    if [[ ${CONTINUE} -eq 0 ]]; then\n        exit $1\n    fi\n\n    return 0\n}\n\n# Returns 1 if we need to check for Xcode again. Expects error handling to be disabled.\n#\n# Params:\n#  - The exit code of check_xcode.\nhandle_check_xcode_failure_no_xcode() {\n    # The problem could be that they have Xcode installed, but the command line tools can't find\n    # it.\n\n    # Just check for Xcode in the default location at first, since searching with mdfind can\n    # take a while.\n    if [[ $1 -eq ${CHECK_XCODE_ERR_NO_XCODE} ]] && [[ -d /Applications/Xcode.app ]]; then\n        echo \"It looks like you have Xcode installed to /Applications/Xcode.app, but the\" \\\n             \"Xcode command line tools aren't set to use it. Try\" >&2\n        echo \"    sudo /usr/bin/xcode-select --switch /Applications/Xcode.app\" >&2\n        echo \"and then run this installer again.\" >&2\n    else\n        echo \"$(tput setaf 9)ERROR$(tput sgr0): Unfortunately, Xcode (~9GB) is required to\" \\\n             \"build Background Music, but ${XCODEBUILD} doesn't appear to be usable. If you\" \\\n             \"do have Xcode installed, try telling the Xcode command line tools where to find\" \\\n             \"it with\" >&2\n        echo \"    sudo /usr/bin/xcode-select --switch /the/path/to/your/Xcode.app\" >&2\n        echo \"and then running this installer again.\" >&2\n    fi\n    echo >&2\n\n    # Explain how to revert the command we suggested.\n    local DEV_DIR_PATH  # (Declared local before assigning so we can get $?.)\n    DEV_DIR_PATH=$(/usr/bin/xcode-select --print-path 2>/dev/null)\n    local XCSELECT_STATUS=\"$?\"\n    if [[ \"${XCSELECT_STATUS}\" -eq 0 ]] && [[ \"${DEV_DIR_PATH}\" != \"\" ]]; then\n        echo \"If you want to change it back afterwards for some reason, use\" >&2\n        echo \"    sudo /usr/bin/xcode-select --switch ${DEV_DIR_PATH}\" >&2\n    fi\n    echo >&2\n\n    # Print the error message from xcodebuild.\n    local OUTPUT_MSG=\"Output from ${XCODEBUILD}: ------------------------------------------\"\n    echo \"${OUTPUT_MSG}\" >&2\n    \"${XCODEBUILD}\" -version >&2 || true\n    echo \"${OUTPUT_MSG}\" | tr '[:print:]' - >&2\n    echo >&2\n\n    # Offer to switch if it will probably work.\n    if [[ -d /Applications/Xcode.app ]]; then\n        local SWITCH_CMD=\"sudo xcode-select --switch /Applications/Xcode.app\"\n        read -p \"Try \\\"$(bold_face ${SWITCH_CMD})\\\" now (y/N)? \" TRY_SWITCH\n        if [[ \"${TRY_SWITCH}\" == \"y\" ]] || [[ \"${TRY_SWITCH}\" == \"Y\" ]]; then\n            echo\n            echo \"+ ${SWITCH_CMD}\"\n            eval ${SWITCH_CMD}\n            local XCS_STATUS=$?\n            if [[ ${XCS_STATUS} -eq 0 ]]; then\n                # Return that we should call check_xcode again to see if it worked.\n                echo\n                echo Seemed to work. Trying to start installation again...\n                echo\n                return 1\n            else\n                echo >&2\n                echo \"\\\"$(bold_face ${SWITCH_CMD})\\\" failed with exit status ${XCS_STATUS}.\" >&2\n                exit ${XCS_STATUS}\n            fi\n        fi\n        echo\n    fi\n\n    return 0\n}\n\nlog_debug_info() {\n    # Log some environment details, version numbers, etc. This takes a while, so we do it in the\n    # background.\n\n    (disable_error_handling\n        echo \"Background Music Build Log\" >> ${LOG_FILE}\n        echo \"----\" >> ${LOG_FILE}\n        echo \"Build script args: $*\" >> ${LOG_FILE}\n        echo \"System details:\" >> ${LOG_FILE}\n\n        sw_vers >> ${LOG_FILE} 2>&1\n        # The same as uname -a, except without printing the nodename (for privacy).\n        uname -mrsv >> ${LOG_FILE} 2>&1\n\n        /bin/bash --version >> ${LOG_FILE} 2>&1\n\n        echo \"On git branch: $(git rev-parse --abbrev-ref HEAD 2>&1)\" >> ${LOG_FILE}\n        echo \"Most recent commit: $(git rev-parse HEAD 2>&1)\" \\\n             \"(\\\"$(git show -s --format=%s HEAD 2>&1)\\\")\" >> ${LOG_FILE}\n\n        echo \"Using xcodebuild: ${XCODEBUILD}\" >> ${LOG_FILE}\n        echo \"Using BGMXPCHelper output path: ${XPC_HELPER_OUTPUT_PATH}\" >> ${LOG_FILE}\n\n        xcode-select --version >> ${LOG_FILE} 2>&1\n        echo \"Xcode path: $(xcode-select --print-path 2>&1)\" >> ${LOG_FILE}\n        echo \"Xcode version:\" >> ${LOG_FILE}\n        xcodebuild -version >> ${LOG_FILE} 2>&1\n        echo \"Xcode SDKs:\" >> ${LOG_FILE}\n        xcodebuild -showsdks >> ${LOG_FILE} 2>&1\n        xcrun --version >> ${LOG_FILE} 2>&1\n        echo \"Clang version:\" >> ${LOG_FILE}\n        $(/usr/bin/xcrun --find clang 2>&1) --version >> ${LOG_FILE} 2>&1\n\n        echo \"launchctl version: $(launchctl version 2>&1)\" >> ${LOG_FILE}\n        echo \"----\" >> ${LOG_FILE}) &\n\n    LOG_DEBUG_INFO_TASK_PID=$!\n}\n\n# Cleans the build products and intermediate files for a build scheme.\n#\n# Params:\n#  - The Xcode build scheme to clean, e.g. \"Background Music Device\".\nclean() {\n    if [[ \"${CLEAN}\" != \"\" ]]; then\n        ${SUDO} \"${XCODEBUILD}\" -scheme \"$1\" \\\n                                -configuration ${CONFIGURATION} \\\n                                BUILD_DIR=./build \\\n                                ${CLEAN} >> ${LOG_FILE} 2>&1\n    fi\n}\n\n# Register our handler so we can print a message and clean up if there's an error.\nenable_error_handling\n\nparse_options \"$@\"\n\n# Warn if running as root.\nif [[ $(id -u) -eq 0 ]]; then\n    echo \"$(tput setaf 11)WARNING$(tput sgr0): This script is not intended to be run as root. Run\" \\\n         \"it normally and it'll sudo when it needs to.\" >&2\nfi\n\n# Print initial message.\nif [[ \"${XCODEBUILD_ACTION}\" == \"install\" ]]; then\n    XPC_HELPER_OUTPUT_PATH=\"$(BGMApp/BGMXPCHelper/safe_install_dir.sh)\"\n\n    echo \"$(bold_face About to install Background Music). Please pause all audio, if you can.\"\n    [[ \"${CONFIGURATION}\" == \"Debug\" ]] && echo \"Debug build.\"\n    echo\n    echo \"This script will install:\"\n    echo \" - ${APP_PATH}/${APP_DIR}\"\n    echo \" - ${DRIVER_PATH}/${DRIVER_DIR}\"\n    echo \" - ${XPC_HELPER_OUTPUT_PATH}/${XPC_HELPER_DIR}\"\n    echo \" - /Library/LaunchDaemons/com.bearisdriving.BGM.XPCHelper.plist\"\n    echo\nelif [[ \"${XCODEBUILD_ACTION}\" == \"archive\" ]]; then\n    echo \"$(bold_face Building and archiving Background Music...)\"\n    echo\nelse\n    echo \"$(bold_face Building Background Music...)\"\n    echo\nfi\n\n# Make sure Xcode and the command line tools are installed and recent enough.\n# This sets XCODE_VERSION to major.minor, e.g. 8.3, or -1 if Xcode isn't installed.\nXCODE_VERSION=$((${XCODEBUILD} -version 2>/dev/null || echo 'V -1') | head -n 1 | awk '{ print $2 }')\ncheck_xcode &\nCHECK_XCODE_TASK_PID=$!\n\nif [[ \"${XCODEBUILD_ACTION}\" == \"install\" ]]; then\n    read -p \"Continue (y/N)? \" CONTINUE_INSTALLATION\n\n    if [[ \"${CONTINUE_INSTALLATION}\" != \"y\" ]] && [[ \"${CONTINUE_INSTALLATION}\" != \"Y\" ]]; then\n        echo \"Installation cancelled.\"\n        exit 0\n    fi\nfi\n\n# If the check_xcode process has already finished, we can check the result early.\nNEED_TO_HANDLE_CHECK_XCODE_RESULT=1\nif ! is_alive ${CHECK_XCODE_TASK_PID}; then\n    disable_error_handling\n\n    handle_check_xcode_result\n    NEED_TO_HANDLE_CHECK_XCODE_RESULT=$?\n\n    enable_error_handling\nfi\n\n# Update the user's sudo timestamp if we're going to need to sudo at some point. This prompts the\n# user for their password.\nif [[ \"${XCODEBUILD_ACTION}\" == \"install\" ]]; then\n    if ! sudo -v; then\n        echo \"$(tput setaf 9)ERROR$(tput sgr0): This script must be run by a user with\" \\\n             \"administrator (sudo) privileges.\" >&2\n        exit 1\n    fi\n    echo\nfi\n\nwhile [[ ${NEED_TO_HANDLE_CHECK_XCODE_RESULT} -ne 0 ]]; do\n    disable_error_handling\n\n    handle_check_xcode_result\n    NEED_TO_HANDLE_CHECK_XCODE_RESULT=$?\n\n    enable_error_handling\ndone\n\nlog_debug_info \"$@\"\n\n# Set some variables that control the compilation commands below.\nif [[ \"${XCODEBUILD_ACTION}\" == \"install\" ]]; then\n    SUDO=\"sudo\"\n    ACTIONING=\"Installing\"\n    DSTROOT_ARG=\"DSTROOT=/\"\n    # Work around an Xcode (15.2) bug where xcodebuild incorrectly detects a dependency cycle if\n    # DSTROOT is set to /.\n    for v in /Volumes/*; do\n        if [[ \"$(realpath \"$v\")\" == \"/\" ]]; then\n            DSTROOT_ARG=\"DSTROOT=$v\"\n            echo \"Set DSTROOT_ARG to ${DSTROOT_ARG} to work around an Xcode bug.\" >> ${LOG_FILE}\n            break\n        fi\n    done\n    echo \"DSTROOT_ARG: ${DSTROOT_ARG}.\" >> ${LOG_FILE}\nelif [[ \"${XCODEBUILD_ACTION}\" == \"archive\" ]]; then\n    SUDO=\"\"\n    ACTIONING=\"Building and archiving\"\n    DSTROOT_ARG=\"\"\nelse\n    # No need to sudo if we're only building.\n    SUDO=\"\"\n    ACTIONING=\"Building\"\n    DSTROOT_ARG=\"\"\nfi\n\n# Enable AddressSanitizer in debug builds to catch memory bugs. Allow ENABLE_ASAN to be set as an\n# environment variable by only setting it here if it isn't already set. (Used by package.sh.)\nif [[ \"${CONFIGURATION}\" == \"Debug\" ]]; then\n    ENABLE_ASAN=\"${ENABLE_ASAN:-YES}\"\nelse\n    ENABLE_ASAN=\"${ENABLE_ASAN:-NO}\"\nfi\n\nenableUBSanArg() {\n    if [[ \"${ENABLE_UBSAN+}\" != \"\" ]]; then\n        echo \"-enableUndefinedBehaviorSanitizer\"\n        echo \"$ENABLE_UBSAN\"\n    fi\n}\n\n# Clean all projects. Done separately to workaround what I think is a bug in Xcode 10.0. If you just\n# add \"clean\" to the other xcodebuild commands, they seem to fail because of the DSTROOT=\"/\" arg.\nif [[ \"${CLEAN}\" != \"\" ]]; then\n    if [[ \"${XCODEBUILD_ACTION}\" == \"archive\" ]]; then\n        # Delete any previous archives to force Xcode to rebuild them.\n        /bin/rm -rf \"${ARCHIVES_DIR}\" >> ${LOG_FILE} 2>&1\n    fi\n\n    # Disable the -e shell option and error trap for build commands so we can handle errors\n    # differently.\n    (disable_error_handling\n        clean \"Background Music Device\"\n        clean \"PublicUtility\"\n        clean \"BGMXPCHelper\"\n        clean \"Background Music\"\n        # Also delete the build dirs as files/dirs left in them can make the install step fail and,\n        # if you're using Xcode 10, the commands above will have cleaned the DerivedData dir but not\n        # the build dirs. I think this is a separate Xcode bug. See\n        # <http://www.openradar.me/40906897>.\n        ${SUDO} /bin/rm -rf BGMDriver/build BGMApp/build >> ${LOG_FILE} 2>&1) &\n\n    echo \"Cleaning\"\n    show_spinner \"Clean command failed. Try deleting the directories BGMDriver/build and \\\nBGMApp/build manually and running '$0 -n' to skip the cleaning step.\"\nfi\n\n# Prints the -archivePath option if we're archiving (i.e. making a .xcarchive). Does nothing if not.\n# Params:\n#  - The name for the archive. The .xcarchive extension will be added.\narchivePath() {\n    if [[ \"${XCODEBUILD_ACTION}\" == \"archive\" ]]; then\n        echo \"-archivePath\"\n        echo \"$ARCHIVES_DIR/$1\"\n    fi\n}\n\n# Prints the INSTALL_OWNER and INSTALL_GROUP arguments to use for the xcodebuild commands.\nownershipArgs() {\n    if [[ \"${XCODEBUILD_ACTION}\" != \"install\" ]]; then\n        # Stop xcodebuild from trying to chown the files in the archive to root when making an\n        # archive, so we don't need to use sudo.\n        echo \"INSTALL_OWNER=\"\n        echo \"INSTALL_GROUP=\"\n    fi\n}\n\n# BGMDriver\n\necho \"[1/3] ${ACTIONING} the virtual audio device $(bold_face ${DRIVER_DIR}) to\" \\\n         \"$(bold_face ${DRIVER_PATH})\" \\\n     | tee -a ${LOG_FILE}\n\n(disable_error_handling\n    # Build and, if requested, archive or install BGMDriver.\n    ${SUDO} \"${XCODEBUILD}\" -scheme \"Background Music Device\" \\\n                            -configuration ${CONFIGURATION} \\\n                            -enableAddressSanitizer ${ENABLE_ASAN} \\\n                            $(enableUBSanArg) \\\n                            $(archivePath BGMDriver) \\\n                            BUILD_DIR=./build \\\n                            RUN_CLANG_STATIC_ANALYZER=0 \\\n                            $(ownershipArgs) \\\n                            ${DSTROOT_ARG} \\\n                            ${XCODEBUILD_OPTIONS} \\\n                            \"${XCODEBUILD_ACTION}\" >> ${LOG_FILE} 2>&1) &\n\nshow_spinner \"${BUILD_FAILED_ERROR_MSG}\"\n\n# BGMXPCHelper\n\necho \"[2/3] ${ACTIONING} $(bold_face ${XPC_HELPER_DIR}) to $(bold_face ${XPC_HELPER_OUTPUT_PATH})\" \\\n    | tee -a ${LOG_FILE}\n\nxpcHelperInstallPathArg() {\n    if [[ \"${XCODEBUILD_ACTION}\" == \"install\" ]]; then\n        echo \"INSTALL_PATH=${XPC_HELPER_OUTPUT_PATH}\"\n    fi\n}\n\n# The Xcode project file is configured so that xcodebuild will call post_install.sh after it\n# finishes building. It calls post_install.sh with the ACTION env var set to \"install\" when\n# XCODEBUILD_ACTION is set to \"archive\" here. The REAL_ACTION arg in this command is a workaround\n# that lets post_install.sh know when we're archiving.\n(disable_error_handling\n    ${SUDO} \"${XCODEBUILD}\" -scheme BGMXPCHelper \\\n                            -configuration ${CONFIGURATION} \\\n                            -enableAddressSanitizer ${ENABLE_ASAN} \\\n                            $(enableUBSanArg) \\\n                            $(archivePath BGMXPCHelper) \\\n                            BUILD_DIR=./build \\\n                            RUN_CLANG_STATIC_ANALYZER=0 \\\n                            $(xpcHelperInstallPathArg) \\\n                            $(ownershipArgs) \\\n                            REAL_ACTION=\"${XCODEBUILD_ACTION}\" \\\n                            ${DSTROOT_ARG} \\\n                            ${XCODEBUILD_OPTIONS} \\\n                            \"${XCODEBUILD_ACTION}\" >> ${LOG_FILE} 2>&1) &\n\nshow_spinner \"${BUILD_FAILED_ERROR_MSG}\"\n\n# BGMApp\n\necho \"[3/3] ${ACTIONING} $(bold_face ${APP_DIR}) to $(bold_face ${APP_PATH})\" \\\n     | tee -a ${LOG_FILE}\n\n(disable_error_handling\n    ${SUDO} \"${XCODEBUILD}\" -scheme \"Background Music\" \\\n                            -configuration ${CONFIGURATION} \\\n                            -enableAddressSanitizer ${ENABLE_ASAN} \\\n                            $(enableUBSanArg) \\\n                            $(archivePath BGMApp) \\\n                            BUILD_DIR=./build \\\n                            RUN_CLANG_STATIC_ANALYZER=0 \\\n                            $(ownershipArgs) \\\n                            ${DSTROOT_ARG} \\\n                            ${XCODEBUILD_OPTIONS} \\\n                            \"${XCODEBUILD_ACTION}\" >> ${LOG_FILE} 2>&1) &\n\nshow_spinner \"${BUILD_FAILED_ERROR_MSG}\"\n\nif [[ \"${XCODEBUILD_ACTION}\" == \"install\" ]]; then\n    # Fix Background Music.app owner/group.\n    #\n    # We have to run xcodebuild as root to install BGMXPCHelper because it installs to directories\n    # owned by root. But that means the build directory gets created by root, and since BGMApp uses\n    # the same build directory we have to run xcodebuild as root to install BGMApp as well.\n    #\n    # TODO: Can't we just chown -R the build dir before we install BGMApp? Then we wouldn't have to\n    #       install BGMApp as root. (But maybe still handle the unlikely case of APP_PATH not being\n    #       user-writable.)\n    sudo chown -R \"$(whoami):admin\" \"${APP_PATH}/${APP_DIR}\"\n\n    # Fix the build directories' owner/group. This is mainly so the whole source directory can be\n    # deleted easily after installing.\n    sudo chown -R \"$(whoami):admin\" \"BGMApp/build\" \"BGMDriver/build\"\n\n    # Restart coreaudiod.\n\n    echo \"Restarting coreaudiod to load the virtual audio device.\" \\\n         | tee -a ${LOG_FILE}\n\n    # The extra or-clauses are fallback versions of the command that restarts coreaudiod. Apparently\n    # some of these commands don't work with older versions of launchctl, so I figure there's no\n    # harm in trying a bunch of different ways (which should all work).\n    (sudo launchctl kickstart -k system/com.apple.audio.coreaudiod &>/dev/null || \\\n        sudo launchctl kill SIGTERM system/com.apple.audio.coreaudiod &>/dev/null || \\\n        sudo launchctl kill TERM system/com.apple.audio.coreaudiod &>/dev/null || \\\n        sudo launchctl kill 15 system/com.apple.audio.coreaudiod &>/dev/null || \\\n        sudo launchctl kill -15 system/com.apple.audio.coreaudiod &>/dev/null || \\\n        (sudo launchctl unload \"${COREAUDIOD_PLIST}\" &>/dev/null && \\\n            sudo launchctl load \"${COREAUDIOD_PLIST}\" &>/dev/null) || \\\n        sudo killall coreaudiod &>/dev/null) && \\\n        sleep 5\n\n    # Invalidate sudo ticket\n    sudo -k\n\n    # Open BGMApp. We have to change the default audio device after restarting coreaudiod and this\n    # is the easiest way.\n    echo \"Launching Background Music.\"\n\n    ERROR_MSG=\"${BGMAPP_FAILED_TO_START_ERROR_MSG}\"\n    open \"${APP_PATH}/${APP_DIR}\"\n\n    # Ignore script errors from this point.\n    disable_error_handling\n\n    # Wait up to 5 seconds for Background Music to start.\n    (trap 'exit 1' TERM\n        while ! (ps -Ao ucomm= | grep 'Background Music' > /dev/null); do\n            sleep 1\n        done) &\n    show_spinner \"${BGMAPP_FAILED_TO_START_ERROR_MSG}\" 5\n\n    echo \"Done.\"\nelif [[ \"${XCODEBUILD_ACTION}\" == \"archive\" ]]; then\n    # Copy the dSYMs (debug symbols) into the correct directories in the archives. I haven't been\n    # able to figure out why Xcode isn't doing this automatically.\n    cp -r \"BGMDriver/build/Release/Background Music Device.driver.dSYM\" \"$DRIVER_PATH/dSYMs\"\n    cp -r \"BGMApp/build/Release/BGMXPCHelper.xpc.dSYM\" \"$XPC_HELPER_OUTPUT_PATH/dSYMs\"\n    mv \"$APP_PATH/Products/Applications/Background Music.app/Contents/MacOS/Background Music.dSYM\" \\\n       \"$APP_PATH/dSYMs\"\nfi\n\n"
        },
        {
          "name": "package.sh",
          "type": "blob",
          "size": 10.1064453125,
          "content": "#!/bin/bash\n# vim: tw=100:\n\n# This file is part of Background Music.\n#\n# Background Music is free software: you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation, either version 2 of the\n# License, or (at your option) any later version.\n#\n# Background Music is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Background Music. If not, see <http://www.gnu.org/licenses/>.\n\n#\n# package.sh\n#\n# Copyright © 2017-2022 Kyle Neideck\n# Copyright © 2016, 2017 Takayama Fumihiko\n# Copyright © 2023 modue sp. z o.o.\n#\n# Builds Background Music and packages it into a .pkg file. Call this script with -d to use the\n# debug build configuration.\n#\n# Call it with -r expanded_package_dir to repackage a package expanded using\n#     pkgutil --expand-full original_package.pkg expanded_package_dir\n# This is useful after code signing the bundles in the expanded package.\n#\n# Based on https://github.com/tekezo/Karabiner-Elements/blob/master/make-package.sh\n#\n\n# TODO: Code signing. See `man productbuild`.\n\nset -o nounset\nset -o errexit\nset -o pipefail\n\nPATH=\"/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin\"; export PATH\n\n# Sets all dirs in $1 to 755 (rwxr-xr-x) and all files in $1 to 644 (rw-r--r--).\nset_permissions() {\n    find \"$1\" -print0 | while read -d $'\\0' filepath; do\n        if [ -d \"$filepath\" ]; then\n            chmod -h 755 \"$filepath\"\n        else\n            chmod -h 644 \"$filepath\"\n        fi\n    done\n}\n\n# --------------------------------------------------\n\n# Use the release configuration and archive by default.\npackaging_operation=\"make_release_package\"\n\n# Handle the options passed to this script.\nwhile getopts \":dr:h\" opt; do\n    case $opt in\n        d)\n            packaging_operation=\"make_debug_package\"\n            ;;\n        r)\n            packaging_operation=\"repackage\"\n            repackage_dir=\"$(realpath \"$OPTARG\")\"\n            ;;\n        h)\n            # Just print out the header from this file.\n            awk '/^# package.sh/,/^$/' \"$0\"\n            exit 0\n            ;;\n        \\?)\n            echo \"Invalid option: -$OPTARG\" >&2\n            exit 1\n            ;;\n    esac\ndone\n\nif [[ $packaging_operation == \"repackage\" ]]; then\n    # No need to build anything if we're repackaging.\n    build_status=0\n\n    # Set the paths to the bundles in the expanded package that we're repackaging.\n    bgmapp_path=\"${repackage_dir}/Installer.pkg/Payload/Applications/Background Music.app\"\n    bgmdriver_path=\"${repackage_dir}/Installer.pkg/Payload/Library/Audio/Plug-Ins/HAL/Background Music Device.driver\"\n    bgmxpchelper_path=\"${repackage_dir}/Installer.pkg/Scripts/BGMXPCHelper.xpc\"\nelif [[ $packaging_operation == \"make_debug_package\" ]]; then\n    # Build using the debug configuration.\n    #\n    # Disable AddressSanitizer and UndefinedBehaviorSanitizer so we can distribute debug packages to\n    # users without worrying about loading the AddressSanitizer and UndefinedBehaviorSanitizer\n    # dylibs in coreaudiod. We've also had issues loading those dylibs in the other binaries when\n    # the binaries were built on other systems.\n    #\n    # TODO: Would debug packages be more useful if they were built with optimization (i.e. using the\n    #       DebugOpt configuration instead of Debug)?\n    ENABLE_ASAN=NO ENABLE_UBSAN=NO bash build_and_install.sh -b -d\n    build_status=$?\n\n    # Set the paths to the build products (i.e. the bundles).\n    bgmapp_path=\"BGMApp/build/Debug/Background Music.app\"\n    bgmdriver_path=\"BGMDriver/build/Debug/Background Music Device.driver\"\n    bgmxpchelper_path=\"BGMApp/build/Debug/BGMXPCHelper.xpc\"\nelse\n    # Build and archive. (It uses the release config when archiving.)\n    bash build_and_install.sh -a\n    build_status=$?\n\n    # Set the paths to the build products (i.e. the bundles). Note that these are in the archives.\n    bgmapp_path=\"archives/BGMApp.xcarchive/Products/Applications/Background Music.app\"\n    bgmdriver_path=\"archives/BGMDriver.xcarchive/Products/Library/Audio/Plug-Ins/HAL/Background Music Device.driver\"\n    bgmxpchelper_path=\"archives/BGMXPCHelper.xcarchive/Products/usr/local/libexec/BGMXPCHelper.xpc\"\nfi\n\n# Exit if the build failed.\nif [[ $build_status -ne 0 ]]; then\n    exit $build_status\nfi\n\n# Read the version string from the build.\nversion=\"$(/usr/libexec/PlistBuddy \\\n    -c \"Print CFBundleShortVersionString\" \\\n    \"${bgmapp_path}/Contents/Info.plist\")\"\n\n# Everything in out_dir at the end of this script will be released in the CI builds.\nout_dir=\"Background-Music-$version\"\nrm -rf \"$out_dir\"\nmkdir \"$out_dir\"\n\nif [[ $packaging_operation == \"make_release_package\" ]]; then\n    # Put the archives in a zip file. This file is mainly useful because the debug symbols (dSYMs)\n    # are in it.\n    echo \"Making archives zip\"\n    zip -r --quiet \"$out_dir/background-music-xcarchives-$version.zip\" \"archives\"\nfi\n\n# --------------------------------------------------\n\necho \"Compiling ListInputDevices\"\n\nif ! [[ $packaging_operation == \"repackage\" ]]; then\n    echo \"Compiling ListInputDevices\"\n    swiftc pkg/ListInputDevices.swift -o pkg/ListInputDevices-x86_64 -target x86_64-apple-macos13.0\n    swiftc pkg/ListInputDevices.swift -o pkg/ListInputDevices-arm64 -target arm64-apple-macos13.0\n    # Combine the x86_64 and arm64 binaries into a universal binary.\n    lipo -create pkg/ListInputDevices-x86_64 pkg/ListInputDevices-arm64 -output pkg/ListInputDevices\n    rm pkg/ListInputDevices-x86_64 pkg/ListInputDevices-arm64\nfi\n\n# --------------------------------------------------\n\necho \"Copying Files\"\n\nrm -rf \"pkgroot\"\nmkdir -p \"pkgroot\"\n\nmkdir -p \"pkgroot/Library/Audio/Plug-Ins/HAL\"\nmkdir -p \"pkgroot/Applications\"\nscripts_dir=\"$(mktemp -d)\"\n\nif [[ $packaging_operation == \"repackage\" ]]; then\n    # When repackaging, only set the permissions of the dirs this script creates. The copied\n    # dirs/files should already have the right permissions and we don't want to break any code\n    # signatures.\n    set_permissions \"pkgroot\"\n    set_permissions \"$scripts_dir\"\n\n    repackage_scripts_dir=\"${repackage_dir}/Installer.pkg/Scripts\"\n    cp \"${repackage_scripts_dir}/preinstall\" \"$scripts_dir\"\n    cp \"${repackage_scripts_dir}/postinstall\" \"$scripts_dir\"\n    cp \"${repackage_scripts_dir}/ListInputDevices\" \"$scripts_dir\"\n    cp \"${repackage_scripts_dir}/com.bearisdriving.BGM.XPCHelper.plist.template\" \"$scripts_dir\"\n    cp \"${repackage_scripts_dir}/safe_install_dir.sh\" \"$scripts_dir\"\n    cp \"${repackage_scripts_dir}/post_install.sh\" \"$scripts_dir\"\nelse\n    cp \"pkg/preinstall\" \"$scripts_dir\"\n    cp \"pkg/postinstall\" \"$scripts_dir\"\n    mv \"pkg/ListInputDevices\" \"$scripts_dir\"\n    cp \"BGMApp/BGMXPCHelper/com.bearisdriving.BGM.XPCHelper.plist.template\" \"$scripts_dir\"\n    cp \"BGMApp/BGMXPCHelper/safe_install_dir.sh\" \"$scripts_dir\"\n    cp \"BGMApp/BGMXPCHelper/post_install.sh\" \"$scripts_dir\"\nfi\n\n# Copy the bundles.\ncp -R \"$bgmdriver_path\" \"pkgroot/Library/Audio/Plug-Ins/HAL/\"\ncp -R \"$bgmapp_path\" \"pkgroot/Applications\"\ncp -R \"$bgmxpchelper_path\" \"$scripts_dir\"\n\n# Set the file/dir permissions.\nif [[ $packaging_operation != \"repackage\" ]]; then\n    set_permissions \"pkgroot\"\n    chmod 755 \"pkgroot/Applications/Background Music.app/Contents/MacOS/Background Music\"\n    chmod 755 \"pkgroot/Applications/Background Music.app/Contents/Resources/uninstall.sh\"\n    chmod 755 \"pkgroot/Applications/Background Music.app/Contents/Resources/_uninstall-non-interactive.sh\"\n    chmod 755 \"pkgroot/Library/Audio/Plug-Ins/HAL/Background Music Device.driver/Contents/MacOS/Background Music Device\"\n\n    set_permissions \"$scripts_dir\"\n    chmod 755 \"$scripts_dir/preinstall\"\n    chmod 755 \"$scripts_dir/postinstall\"\n    chmod 755 \"$scripts_dir/ListInputDevices\"\n    chmod 755 \"$scripts_dir/BGMXPCHelper.xpc/Contents/MacOS/BGMXPCHelper\"\nfi\n\n# Copy the package resources.\nrm -rf \"pkgres\"\nmkdir -p \"pkgres\"\n\nif [[ $packaging_operation == \"repackage\" ]]; then\n    cp \"${repackage_dir}/Resources/FermataIcon.pdf\" \"pkgres\"\n    cp \"${repackage_dir}/Distribution\" \"pkg/Distribution.xml\"\nelse\n    cp \"Images/FermataIcon.pdf\" \"pkgres\"\n    # Populate the Distribution.xml template and copy it. It only has one template variable so far.\n    sed \"s/{{VERSION}}/$version/g\" \"pkg/Distribution.xml.template\" > \"pkg/Distribution.xml\"\nfi\n\n# --------------------------------------------------\n\nif [[ $packaging_operation == \"repackage\" ]]; then\n    # Include \"repackaged\" in the filename just to make it clear.\n    pkg=\"$out_dir/BackgroundMusic-$version.repackaged.pkg\"\nelse\n    # As a security check for releases, we manually build the same package locally, compare it to\n    # the release built in CI and then code sign it. (And then remove the code signature on a\n    # different computer and check that it still matches the one from CI.) So we include \"unsigned\"\n    # in the name to differentiate the two versions.\n    pkg=\"$out_dir/BackgroundMusic-$version.unsigned.pkg\"\nfi\n\npkg_identifier=\"com.bearisdriving.BGM\"\n\necho \"Creating .pkg installer: $pkg\"\n\n# Build the \"component package\". (See `man pkgbuild`.)\npkgbuild \\\n    --root \"pkgroot\" \\\n    --component-plist \"pkg/pkgbuild.plist\" \\\n    --identifier \"$pkg_identifier\" \\\n    --scripts \"$scripts_dir\" \\\n    --version \"$version\" \\\n    --install-location \"/\" \\\n    \"$out_dir/Installer.pkg\"\n\n# Build the .pkg installer. This is basically a wrapper around the Installer.pkg we just built that\n# adds the background image and the settings in Distribution.xml.\nproductbuild \\\n    --distribution \"pkg/Distribution.xml\" \\\n    --identifier \"$pkg_identifier\" \\\n    --resources \"pkgres\" \\\n    --package-path \"$out_dir\" \\\n    \"$pkg\"\n\n# Clean up.\nrm -f \"$out_dir/Installer.pkg\"\nrm -rf \"pkgroot\"\nrm -rf \"pkgres\"\nrm -f \"pkg/Distribution.xml\"\n\n# Print checksums.\necho \"Checksums:\"\nmd5 \"$pkg\"\necho -n \"SHA256 \"\nshasum -a 256 \"$pkg\"\n\nif [[ $packaging_operation == \"make_release_package\" ]]; then\n    # Print the checksums of the archives zip.\n    md5 \"$out_dir/background-music-xcarchives-$version.zip\"\n    echo -n \"SHA256 \"\n    shasum -a 256 \"$out_dir/background-music-xcarchives-$version.zip\"\nfi\n\n"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "uninstall.sh",
          "type": "blob",
          "size": 2.2646484375,
          "content": "#!/bin/bash\n# vim: tw=120:\n\n# This file is part of Background Music.\n#\n# Background Music is free software: you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation, either version 2 of the\n# License, or (at your option) any later version.\n#\n# Background Music is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Background Music. If not, see <http://www.gnu.org/licenses/>.\n\n#\n# uninstall.sh\n#\n# Copyright © 2016 Nick Jacques\n# Copyright © 2016, 2017 Kyle Neideck\n#\n# Removes BGMApp, BGMDriver and BGMXPCHelper from the system.\n#\n\n# Halt on errors.\nset -e\n\nPATH=/bin:/sbin:/usr/bin:/usr/sbin; export PATH\n\nbold=$(tput bold)\nnormal=$(tput sgr0)\n\n# Warn if running as root.\nif [[ $(id -u) -eq 0 ]]; then\n  echo \"$(tput setaf 11)WARNING$(tput sgr0): This script is not intended to be run as root. Run\" \\\n       \"it normally and it'll sudo when it needs to.\" >&2\n  echo \"\"\nfi\n\necho \"${bold}You are about to uninstall Background Music.${normal}\"\necho \"Please pause all audio before continuing.\"\necho \"\"\nread -p \"Continue (y/N)? \" user_prompt\n\nif [ \"$user_prompt\" == \"y\" ] || [ \"$user_prompt\" == \"Y\" ]; then\n  # Run from the dir containing this script.\n  cd \"$( dirname \"${BASH_SOURCE[0]}\" )\"\n\n  if [ -f \"BGMApp/BGMApp/_uninstall-non-interactive.sh\" ]; then\n    # Running from the source directory.\n    bash \"BGMApp/BGMApp/_uninstall-non-interactive.sh\"\n  elif [ -f \"_uninstall-non-interactive.sh\" ]; then\n    # Probably running from Background Music.app/Contents/Resources.\n    bash \"_uninstall-non-interactive.sh\"\n  else\n    echo \"${bold}ERROR: Could not find _uninstall-non-interactive.sh${normal}\" >&2\n    exit 1\n  fi\n\n  # Invalidate sudo ticket\n  sudo -k\n\n  # Open System Settings and go to Sound > Output.\n  osascript -e 'tell application id \"com.apple.systempreferences\"\n                  activate\n                  reveal anchor \"output\" of pane id \"com.apple.preference.sound\"\n                end tell' >/dev/null || true\n  echo \"\"\n\nelse\n  echo \"Uninstall cancelled.\"\nfi\n\n\n"
        }
      ]
    }
  ]
}