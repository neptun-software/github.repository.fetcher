{
  "metadata": {
    "timestamp": 1736566315272,
    "page": 69,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "upx/upx",
      "stars": 14845,
      "defaultBranch": "devel",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.7138671875,
          "content": "# vim:set ft=yaml ts=2 sw=2 et:\n# Copyright (C) Markus Franz Xaver Johannes Oberhumer\n# for clang-format-15.0.6 from https://github.com/upx/upx-stubtools/releases\n#\n# \"Gofmt's style is nobody's favourite, but gofmt is everybody's favourite.\" --Rob Pike\n---\nBasedOnStyle: LLVM\nColumnLimit: 100\nIndentWidth: 4\n---\n# settings for C and C++\nLanguage: Cpp\nAccessModifierOffset: -4\nAlignConsecutiveMacros: AcrossComments\nAlwaysBreakTemplateDeclarations: true\nAttributeMacros:\n  - DELETED_FUNCTION\n  - XSPAN_DELETED_FUNCTION\n  - may_throw\nEmptyLineBeforeAccessModifier: Leave\n# IndentPPDirectives: AfterHash # TODO later\nSortIncludes: false\nSpaceAfterCStyleCast: true\nStandard: Cpp03\nStatementMacros:\n  - CLANG_FORMAT_DUMMY_STATEMENT\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.232421875,
          "content": "# vim:set ft=yaml ts=2 sw=2 et:\n# Copyright (C) Markus Franz Xaver Johannes Oberhumer\n# for clang-tidy from https://clang.llvm.org/extra/clang-tidy/\n---\nChecks: >\n  -*,\n  bugprone-*,\n    -bugprone-assignment-in-if-condition,\n    -bugprone-branch-clone,\n    -bugprone-casting-through-void,\n    -bugprone-easily-swappable-parameters,\n    -bugprone-empty-catch,\n    -bugprone-implicit-widening-of-multiplication-result,\n    -bugprone-inc-dec-in-conditions,\n    -bugprone-macro-parentheses,\n    -bugprone-narrowing-conversions,\n    -bugprone-reserved-identifier,\n    -bugprone-sizeof-expression,\n    -bugprone-suspicious-include,\n    -bugprone-suspicious-memory-comparison,\n    -bugprone-suspicious-string-compare,\n    -bugprone-switch-missing-default-case,\n  clang-analyzer-*,\n    -clang-analyzer-optin.performance.Padding,\n    -clang-analyzer-security.PointerSub,\n    -clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,\n    -clang-analyzer-security.insecureAPI.strcpy,\n    -clang-analyzer-unix.Stream,\n  clang-diagnostic-*,\n  performance-*,\n    -performance-avoid-endl,\n    -performance-enum-size,\n    -performance-no-int-to-ptr,\n    -performance-unnecessary-value-param,\nFormatStyle: file\nHeaderFilterRegex: '.*'\nInheritParentConfig: false\n...\n"
        },
        {
          "name": ".clangd",
          "type": "blob",
          "size": 1.06640625,
          "content": "# vim:set ft=yaml ts=2 sw=2 et:\n# Copyright (C) Markus Franz Xaver Johannes Oberhumer\n# for clangd from https://clangd.llvm.org/\n---\n# treat *.h files as C++ source code\nIf:\n  PathMatch: src/.*\\.h\n  PathExclude: vendor/.*\nCompileFlags:\n  Add:\n    - -xc++\n---\n# C++ flags\nIf:\n  PathMatch: [ src/.*\\.h, src/.*\\.cpp ]\n  PathExclude: vendor/.*\nCompileFlags:\n  Add:\n    - -std=gnu++17\n    # -std=gnu++20 # requires clangd >= 11.0\n    # -std=gnu++23 # requires clangd >= 18.0\n---\n# common flags for all C/C++ files\nIf:\n  PathMatch: [ src/.*\\.h, src/.*\\.c, src/.*\\.cpp ]\n  PathExclude: vendor/.*\nCompileFlags:\n  Add:\n    # see https://github.com/clangd/clangd/issues/1038 : Support deterministic relative include path\n    - -Ivendor\n    - -I../vendor\n    - -I../../vendor\n    - -DDEBUG\n    - -fno-strict-aliasing\n    - -fno-strict-overflow\n    - -funsigned-char\nDiagnostics:\n  Includes:\n    # IgnoreHeader: A list of regexes. Include Cleaner will not produce diagnostics\n    # for headers whose path is a suffix match for any of these.\n    IgnoreHeader:\n      - src/.*\\.h\n  UnusedIncludes: None\n...\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.37890625,
          "content": "# Copyright (C) Markus Franz Xaver Johannes Oberhumer\n# see https://editorconfig.org/\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[{GNUmakefile*,MMakefile*,Makefile*,Makevars*,*.mk}]\nindent_size = 8\nindent_style = tab\n\n[{*.asm,*.S}]\nindent_size = 8\n\n[{*.yaml,*.yml}]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.146484375,
          "content": "# Copyright (C) Markus Franz Xaver Johannes Oberhumer\n# see https://github.com/github-linguist/linguist\n#\n# HINT: check settings with\n#   git ls-files | git check-attr --stdin --all\n#   git ls-files --eol\n\n# disable all line ending conversions\n* -text\n\n#\n# tell diff tools that these files are generated automatically\n#\n\n/doc/upx.1                              linguist-generated\n/doc/upx-doc.*                          linguist-generated\n\n/src/stub/*.h                           linguist-generated\n/src/stub/src/arch/**/lzma_d_c[fns].S   linguist-generated\n/src/stub/tmp/**                        linguist-generated\n\n/misc/podman/*/packages*.txt            linguist-generated\n/misc/testsuite/*expected_sha256sums*   linguist-generated\n\n#\n# make GitHub language detection more accurate\n#\n\n/src/*.h                                linguist-language=C++\n/src/*/*.h                              linguist-language=C++\n\n/src/stub/**/*.ash                      linguist-language=Assembly\n/src/stub/**/*.asm                      linguist-language=Assembly\n/src/stub/**/*.S                        linguist-language=Assembly\n\n/src/stub/tmp/**                        linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.69921875,
          "content": "/.cache*\n/.hg*\n/.vscode*\n/CMakeCache*\n/CMakeFiles*\n/CTest*\n/Makevars[.-]global*\n/Testing*\n/build*\n/maint*\n/vendor*\n\nGNUmakefile*\nMMakefile*\nMakevars[.-]local*\ncompile_commands*.json\ncompile_flags*.txt\nTmp*\ntmp*\n\n*.a\n*.bz2\n*.d\n*.diff\n*.dll\n*.dylib\n*.exe\n*.gz\n*.lib\n*.map\n*.o\n*.obj\n*.out\n*.patch\n*.py[cdo]\n*.rar\n*.so\n*.swp\n*.tmp\n*.ttp\n*.xz\n*.zip\n*.zst\n\n/doc/*.man\n/doc/*.ps\n/doc/*.tex\n\n/src/stub/**/.*-stamp\n/src/stub/src/**/tmp*/*\n/src/stub/tmp*/*.bin\n/src/stub/tmp*/*.bin.bindump\n/src/stub/tmp*/*.bin.disasm\n/src/stub/tmp*/*.o.disasm\n/src/stub/tmp*/mips.r3000-*.[is]\n/src/stub/tmp*/mipsel.r3000-*.[is]\n\n/src/stub/tools/sstrip/amd64-linux-sstrip\n/src/stub/tools/sstrip/i386-linux-sstrip\n/src/stub/tools/sstrip/sstrip\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.7373046875,
          "content": "[submodule \"vendor/doctest\"]\n    path = vendor/doctest\n    url = https://github.com/upx/upx-vendor-doctest.git\n    branch = upx-vendor\n    shallow = true\n[submodule \"vendor/lzma-sdk\"]\n    path = vendor/lzma-sdk\n    url = https://github.com/upx/upx-vendor-lzma-sdk.git\n    branch = upx-vendor\n    shallow = true\n[submodule \"vendor/ucl\"]\n    path = vendor/ucl\n    url = https://github.com/upx/upx-vendor-ucl.git\n    branch = upx-vendor\n    shallow = true\n[submodule \"vendor/valgrind\"]\n    path = vendor/valgrind\n    url = https://github.com/upx/upx-vendor-valgrind.git\n    branch = upx-vendor\n    shallow = true\n[submodule \"vendor/zlib\"]\n    path = vendor/zlib\n    url = https://github.com/upx/upx-vendor-zlib.git\n    branch = upx-vendor\n    shallow = true\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 20.837890625,
          "content": "#\n# UPX \"CMake\" build file; see https://cmake.org/\n# Copyright (C) Markus Franz Xaver Johannes Oberhumer\n#\n\n# Build requirements:\n#   A C++ compiler that fully implements C++17: clang-5, gcc-8 or msvc-2019-16.11\n#   (older or other compilers may work but are unsupported, use at your own risk)\n\n# Sections of this CMakeLists.txt:\n#   - options\n#   - init\n#   - common compilation flags\n#   - targets\n#   - target compilation flags\n#   - test\n#   - install\n#   - print summary\n\n# CMake version check; using a somewhat current CMake version is highly recommended\nfile(REMOVE \"${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/.upx_cmake_config_done.txt\")\nif(DEFINED UPX_CONFIG_CMAKE_MINIMUM_REQUIRED_VERSION)\n    cmake_minimum_required(VERSION \"${UPX_CONFIG_CMAKE_MINIMUM_REQUIRED_VERSION}\" FATAL_ERROR)\nelseif(NOT ${CMAKE_VERSION} VERSION_LESS \"3.10\")\n    cmake_minimum_required(VERSION \"3.10\" FATAL_ERROR)\nelse()\n    cmake_minimum_required(VERSION \"3.8\" FATAL_ERROR) # CMake >= 3.8 is needed for CXX_STANDARD 17\nendif()\n\n# support functions and some utility\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/misc/cmake/functions.cmake\")\nupx_print_var(CMAKE_VERSION UPX_CONFIG_CMAKE_MINIMUM_REQUIRED_VERSION CMAKE_GENERATOR)\n\n#***********************************************************************\n# options\n#***********************************************************************\n\nupx_cmake_include_hook(1_options)\n\n# compilation config options\nif(NOT USE_STRICT_DEFAULTS)\n    # permissive config defaults when building from source code tarball\n    option(UPX_CONFIG_DISABLE_GITREV   \"Do not compile with Git version info.\"         ON)\n    option(UPX_CONFIG_DISABLE_SANITIZE \"Do not compile with sanitize options.\"         ON)\n    option(UPX_CONFIG_DISABLE_WERROR   \"Do not compile with -Werror option.\"           ON)\n    option(UPX_CONFIG_DISABLE_WSTRICT  \"Do not compile with strict compiler warnings.\" ON)\nelse()\n    # strict config defaults for Git developer builds\n    message(STATUS \"===== UPX NOTE: strict developer config defaults enabled =====\")\n    option(UPX_CONFIG_DISABLE_GITREV   \"Do not compile with Git version info.\"         OFF)\n    option(UPX_CONFIG_DISABLE_SANITIZE \"Do not compile with sanitize options.\"         OFF)\n    option(UPX_CONFIG_DISABLE_WERROR   \"Do not compile with -Werror option.\"           OFF)\n    option(UPX_CONFIG_DISABLE_WSTRICT  \"Do not compile with strict compiler warnings.\" OFF)\nendif()\n\n# test config options (see below)\n# IMPORTANT NOTE: self-pack test can only work if the host executable format is supported by UPX!\noption(UPX_CONFIG_DISABLE_SELF_PACK_TEST   \"Do not test packing UPX with itself\" OFF)\noption(UPX_CONFIG_DISABLE_EXHAUSTIVE_TESTS \"Do not run exhaustive tests\"         OFF)\n\n#***********************************************************************\n# init\n#***********************************************************************\n\nset(UPX_VERSION_STRING \"4.3.0\") # this should match src/version.h\n\nupx_cmake_include_hook(2_init)\n\n# Disallow in-source build. Note that you will still have to manually\n# clean up a few files if you accidentally try an in-source build.\nupx_disallow_in_source_build()\n\n# global settings\nif(${CMAKE_VERSION} VERSION_GREATER \"3.14.99\" AND NOT DEFINED CMAKE_MSVC_RUNTIME_LIBRARY)\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded\")\n    cmake_policy(SET CMP0091 NEW)\nendif()\n# global CMake settings that default to ON\nupx_cache_bool_vars(ON\n    CMAKE_C_STANDARD_REQUIRED CMAKE_CXX_STANDARD_REQUIRED\n    CMAKE_EXPORT_COMPILE_COMMANDS CMAKE_REQUIRED_QUIET\n)\n# internal UPX settings that default to OFF; useful for CI jobs\nupx_cache_bool_vars(OFF\n    UPX_CONFIG_CMAKE_DISABLE_TEST UPX_CONFIG_CMAKE_DISABLE_INSTALL\n    UPX_CONFIG_CMAKE_DISABLE_PRINT_INFO UPX_CONFIG_CMAKE_DISABLE_PLATFORM_CHECK\n    UPX_CONFIG_DISABLE_C_STANDARD UPX_CONFIG_DISABLE_CXX_STANDARD\n    UPX_CONFIG_DISABLE_RUN_UNPACKED_TEST UPX_CONFIG_DISABLE_RUN_PACKED_TEST\n    UPX_CONFIG_DISABLE_SAVE_TEMPS UPX_CONFIG_DISABLE_SHARED_LIBS UPX_CONFIG_REQUIRE_THREADS\n)\nupx_cache_bool_vars(ON UPX_CONFIG_EXPECT_THREADS)\nupx_print_env_var(CC CXX)\n\n# determine Git revision\nset(GITREV_SHORT \"\")\nset(GITREV_PLUS \"\")\nset(GIT_DESCRIBE \"\")\nif(IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/.git\" AND NOT UPX_CONFIG_DISABLE_GITREV)\n    find_package(Git)\n    if(Git_FOUND)\n        execute_process(\n            COMMAND \"${GIT_EXECUTABLE}\" rev-parse --short=12 HEAD\n            RESULT_VARIABLE result ERROR_QUIET\n            OUTPUT_VARIABLE GITREV_SHORT OUTPUT_STRIP_TRAILING_WHITESPACE\n        )\n        string(LENGTH \"${GITREV_SHORT}\" l)\n        if(${result} EQUAL 0 AND ${l} EQUAL 12)\n            execute_process(RESULT_VARIABLE result COMMAND \"${GIT_EXECUTABLE}\" diff --quiet)\n            if(NOT ${result} EQUAL 0)\n                set(GITREV_PLUS \"+\")\n            endif()\n        else()\n            set(GITREV_SHORT \"\")\n        endif()\n        execute_process(\n            COMMAND \"${GIT_EXECUTABLE}\" describe --match \"v*.*.*\" --tags --dirty\n            RESULT_VARIABLE result ERROR_QUIET\n            OUTPUT_VARIABLE GIT_DESCRIBE OUTPUT_STRIP_TRAILING_WHITESPACE\n        )\n        if(GIT_DESCRIBE MATCHES \"^v?([0-9]+\\\\.[0-9]+\\\\.[0-9]+)-([0-9]+)-g(.+)$\")\n            set(GIT_DESCRIBE \"${CMAKE_MATCH_1}-devel.${CMAKE_MATCH_2}+git-${CMAKE_MATCH_3}\")\n        endif()\n    endif()\nendif()\nif(GITREV_SHORT)\n    message(STATUS \"UPX_VERSION_GITREV = \\\"${GITREV_SHORT}${GITREV_PLUS}\\\"\")\n    if(GIT_DESCRIBE)\n        message(STATUS \"UPX_VERSION_GIT_DESCRIBE = \\\"${GIT_DESCRIBE}\\\"\")\n    endif()\nelseif(UPX_CONFIG_DISABLE_GITREV)\n    message(STATUS \"UPX_VERSION_GITREV: disabled\")\nelse()\n    message(STATUS \"UPX_VERSION_GITREV: not set\")\nendif()\n\n# CMake init\nupx_set_default_build_type(Release) # default is CMAKE_BUILD_TYPE=Release\nproject(upx VERSION \"${UPX_VERSION_STRING}\" LANGUAGES C CXX)\nupx_apply_build_type()\nupx_set_global_vars()\nupx_check_working_build_rpath(UPX_CONFIG_HAVE_WORKING_BUILD_RPATH)\n\nif(DEFINED UPX_CONFIG_CMAKE_EXECUTABLE_SUFFIX)\n    set(CMAKE_EXECUTABLE_SUFFIX \"${UPX_CONFIG_CMAKE_EXECUTABLE_SUFFIX}\")\nendif()\nif(NOT UPX_CONFIG_CMAKE_DISABLE_INSTALL AND CMAKE_INSTALL_PREFIX)\n    include(GNUInstallDirs)\nendif()\n\n#***********************************************************************\n# common compilation flags\n#***********************************************************************\n\ninclude(CheckCCompilerFlag)\ninclude(CheckFunctionExists)\ninclude(CheckIncludeFile)\ninclude(CheckStructHasMember)\ninclude(CheckSymbolExists)\ninclude(CheckTypeSize)\n\nupx_cmake_include_hook(3_common_compilation_flags)\n\n# assert sane type sizes\ncheck_type_size(\"size_t\" C_SIZEOF_SIZE_T LANGUAGE C)\ncheck_type_size(\"size_t\" CXX_SIZEOF_SIZE_T LANGUAGE CXX)\nif(NOT \"${C_SIZEOF_SIZE_T}\" MATCHES \"^(4|8|16)$\")\n    message(FATAL_ERROR \"ERROR: unexpected C_SIZEOF_SIZE_T '${C_SIZEOF_SIZE_T}'\")\nendif()\nif(NOT \",${C_SIZEOF_SIZE_T},\" STREQUAL \",${CXX_SIZEOF_SIZE_T},\")\n    message(FATAL_ERROR \"FATAL ERROR: '${C_SIZEOF_SIZE_T}' '${CXX_SIZEOF_SIZE_T}' mismatch\")\nendif()\n\nif(NOT DEFINED HAVE_UNISTD_H)\n    check_include_file(\"unistd.h\" HAVE_UNISTD_H)\nendif()\nif(NOT DEFINED HAVE_UTIMENSAT)\n    # proper checking for utimensat() is somewhat messy\n    check_function_exists(utimensat HAVE_UTIMENSAT_FUNCTION__)\n    if(HAVE_UTIMENSAT_FUNCTION__)\n        check_symbol_exists(utimensat \"sys/types.h;fcntl.h;sys/stat.h\" HAVE_UTIMENSAT_SYMBOL__)\n        if(HAVE_UTIMENSAT_SYMBOL__)\n            CHECK_STRUCT_HAS_MEMBER(\"struct stat\" \"st_mtim.tv_nsec\" \"sys/types.h;fcntl.h;sys/stat.h\" HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC) # POSIX.1-2008\n            if(NOT HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC)\n                CHECK_STRUCT_HAS_MEMBER(\"struct stat\" \"st_mtimespec.tv_nsec\" \"sys/types.h;fcntl.h;sys/stat.h\" HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC) # macOS\n            endif()\n            if(HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC OR HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC)\n                set(HAVE_UTIMENSAT 1)\n            endif()\n        endif()\n    endif()\nendif()\n\nif(UPX_CONFIG_DISABLE_WSTRICT)\n    # enable all basic warnings\n    set(warn_Wall -Wall)\n    set(warn_WN -W3)\nelse()\n    # enable all basic warnings, and enable lots of strict warnings\n    set(warn_Wall -Wall -Wextra -Wcast-align -Wcast-qual -Wmissing-declarations -Wpointer-arith -Wshadow -Wvla -Wwrite-strings)\n    set(warn_WN -W4)\nendif()\nif(UPX_CONFIG_DISABLE_WERROR)\n    # warnings are just warnings\n    set(warn_Werror \"\")\n    set(warn_WX \"\")\nelse()\n    # warnings are fatal errors; annoy developers to keep the source code warning-free\n    set(warn_Werror -Werror)\n    set(warn_WX -WX)\nendif()\nif(MSVC_FRONTEND)\n    # disable warning C5105 which may get triggered by some older versions of <windows.h>\n    set(warn_WX -wd5105 ${warn_WX})\nendif()\n\nif(NOT CMAKE_C_COMPILER_ID MATCHES \"^MSVC\")\n    # use -O2 instead of -O3 to reduce code size\n    string(REGEX REPLACE \"(^| )-O3( |$$)\" \"\\\\1-O2\\\\2\" a \"${CMAKE_C_FLAGS_RELEASE}\")\n    string(REGEX REPLACE \"(^| )-O3( |$$)\" \"\\\\1-O2\\\\2\" b \"${CMAKE_CXX_FLAGS_RELEASE}\")\n    set(CMAKE_C_FLAGS_RELEASE \"${a}\" CACHE STRING \"Flags used by the C compiler during RELEASE builds.\" FORCE)\n    set(CMAKE_CXX_FLAGS_RELEASE \"${b}\" CACHE STRING \"Flags used by the CXX compiler during RELEASE builds.\" FORCE)\nendif()\nif(MSVC_FRONTEND OR WIN32 OR MINGW OR CYGWIN)\n    # disable silly warnings about using \"deprecated\" POSIX functions like fopen()\n    add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)\n    add_definitions(-D_CRT_NONSTDC_NO_WARNINGS)\n    add_definitions(-D_CRT_SECURE_NO_DEPRECATE)\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n    add_definitions(-D_SCL_SECURE_NO_DEPRECATE)\n    add_definitions(-D_SCL_SECURE_NO_WARNINGS)\n    add_definitions(-DWIN32_LEAN_AND_MEAN)\n    add_definitions(-D__USE_MINGW_ANSI_STDIO)\nendif()\nif(MSVC_FRONTEND)\n    # use -funsigned-char; set __cplusplus according to selected C++ standard\n    add_definitions(-J -Zc:__cplusplus)\n    if(CMAKE_C_COMPILER_ID MATCHES \"^MSVC\")\n        upx_add_definitions(-Zc:preprocessor) # use new preprocessor\n    endif()\nendif()\nif(NOT CMAKE_C_COMPILER_ID MATCHES \"^MSVC\")\n    # protect against security threats caused by misguided compiler \"optimizations\"\n    upx_add_definitions(-fno-delete-null-pointer-checks -fno-lifetime-dse)\n    upx_add_definitions(-fno-strict-aliasing -fno-strict-overflow -funsigned-char)\n    # disable overambitious auto-vectorization until this actually gains something\n    upx_add_definitions(-fno-tree-vectorize)\n    # disable annoying clang warnings which get added by the macOS Xcode cmake generator\n    if(CMAKE_GENERATOR MATCHES \"Xcode\")\n        upx_add_definitions(-Wno-shorten-64-to-32)\n    endif()\nendif()\n\n# examine compiler configuration\nif(NOT UPX_CONFIG_CMAKE_DISABLE_PRINT_INFO)\n    upx_print_common_symbols()\n    upx_print_mingw_symbols()\nendif()\n\n#***********************************************************************\n# targets\n#***********************************************************************\n\n# internal settings; these may change in a future versions\nset(UPX_CONFIG_DISABLE_THREADS ON) # multithreading is currently not used; maybe in UPX version 5\nset(UPX_CONFIG_DISABLE_BZIP2 ON)   # bzip2 is currently not used; we might need it to decompress linux kernels\nset(UPX_CONFIG_DISABLE_ZSTD ON)    # zstd is currently not used; maybe in UPX version 5\n\nupx_cmake_include_hook(4_targets)\n\nif(NOT UPX_CONFIG_DISABLE_THREADS)\n    find_package(Threads)\nendif()\n# make sure that threads are indeed fully supported in C++\nif(Threads_FOUND)\n    foreach(f std_lock_guard.cpp types_abi.cpp)\n        set(CMAKE_TRY_COMPILE_TARGET_TYPE \"EXECUTABLE\")\n        if(NOT UPX_CONFIG_DISABLE_CXX_STANDARD)\n            try_compile(result \"${CMAKE_CURRENT_BINARY_DIR}\"\n                        \"${CMAKE_CURRENT_SOURCE_DIR}/misc/cmake/try_compile/${f}\"\n                        OUTPUT_VARIABLE output CXX_STANDARD 17)\n        else()\n            try_compile(result \"${CMAKE_CURRENT_BINARY_DIR}\"\n                        \"${CMAKE_CURRENT_SOURCE_DIR}/misc/cmake/try_compile/${f}\"\n                        OUTPUT_VARIABLE output)\n        endif()\n        if(NOT result)\n            # failed; under MinGW be sure to use the posix-threads and NOT the win32-threads version\n            if(UPX_CONFIG_REQUIRE_THREADS OR (UPX_CONFIG_EXPECT_THREADS AND NOT UPX_CONFIG_DISABLE_THREADS))\n                message(WARNING \"Threads FAILED ${f}: ${output}\") # output from try_compile\n            endif()\n            set(Threads_FOUND OFF)\n            break()\n        endif()\n    endforeach()\nendif()\n\nif(NOT UPX_CONFIG_DISABLE_BZIP2)\nupx_add_glob_files(bzip2_SOURCES \"vendor/bzip2/*.c\")\nadd_library(upx_vendor_bzip2 STATIC ${bzip2_SOURCES})\nif(NOT UPX_CONFIG_DISABLE_C_STANDARD)\n    set_property(TARGET upx_vendor_bzip2 PROPERTY C_STANDARD 11)\nendif()\nendif() # UPX_CONFIG_DISABLE_BZIP2\n\nupx_add_glob_files(ucl_SOURCES \"vendor/ucl/src/*.c\")\nadd_library(upx_vendor_ucl STATIC ${ucl_SOURCES})\nif(NOT UPX_CONFIG_DISABLE_C_STANDARD)\n    set_property(TARGET upx_vendor_ucl PROPERTY C_STANDARD 11)\nendif()\n\nupx_add_glob_files(zlib_SOURCES \"vendor/zlib/*.c\")\nadd_library(upx_vendor_zlib STATIC ${zlib_SOURCES})\nif(NOT UPX_CONFIG_DISABLE_C_STANDARD)\n    set_property(TARGET upx_vendor_zlib PROPERTY C_STANDARD 11)\nendif()\n\nif(NOT UPX_CONFIG_DISABLE_ZSTD)\nupx_add_glob_files(zstd_SOURCES \"vendor/zstd/lib/*/*.c\")\nadd_library(upx_vendor_zstd STATIC ${zstd_SOURCES})\nif(NOT UPX_CONFIG_DISABLE_C_STANDARD)\n    set_property(TARGET upx_vendor_zstd PROPERTY C_STANDARD 11)\nendif()\nendif() # UPX_CONFIG_DISABLE_ZSTD\n\nupx_add_glob_files(upx_SOURCES \"src/*.cpp\" \"src/[cfu]*/*.cpp\")\nadd_executable(upx ${upx_SOURCES})\nif(NOT UPX_CONFIG_DISABLE_CXX_STANDARD)\n    set_property(TARGET upx PROPERTY CXX_STANDARD 17)\nendif()\ntarget_link_libraries(upx upx_vendor_ucl upx_vendor_zlib)\nif(NOT UPX_CONFIG_DISABLE_BZIP2)\n    target_link_libraries(upx upx_vendor_bzip2)\nendif()\nif(NOT UPX_CONFIG_DISABLE_ZSTD)\n    target_link_libraries(upx upx_vendor_zstd)\nendif()\nif(Threads_FOUND)\n    target_link_libraries(upx Threads::Threads)\nendif()\n\n#***********************************************************************\n# target compilation flags\n#***********************************************************************\n\nupx_cmake_include_hook(5_target_compilation_flags)\n\nif(NOT UPX_CONFIG_DISABLE_BZIP2)\nset(t upx_vendor_bzip2)\nupx_compile_target_debug_with_O2(${t})\nupx_sanitize_target(${t})\ntarget_compile_definitions(${t} PRIVATE BZ_NO_STDIO=1)\nif(MSVC_FRONTEND)\n    target_compile_options(${t} PRIVATE ${warn_WN} -wd4127 -wd4244 -wd4267 ${warn_WX})\nelseif(GNU_FRONTEND)\n    target_compile_options(${t} PRIVATE ${warn_Wall} ${warn_Werror})\nendif()\nupx_add_target_extra_compile_options(${t} UPX_CONFIG_EXTRA_COMPILE_OPTIONS_BZIP2)\nendif() # UPX_CONFIG_DISABLE_BZIP2\n\nset(t upx_vendor_ucl)\ntarget_include_directories(${t} PRIVATE vendor/ucl/include vendor/ucl)\nupx_compile_target_debug_with_O2(${t})\nupx_sanitize_target(${t})\nif(MSVC_FRONTEND)\n    target_compile_options(${t} PRIVATE ${warn_WN} ${warn_WX})\nelseif(GNU_FRONTEND)\n    target_compile_options(${t} PRIVATE ${warn_Wall} ${warn_Werror})\nendif()\nupx_add_target_extra_compile_options(${t} UPX_CONFIG_EXTRA_COMPILE_OPTIONS_UCL)\n\nset(t upx_vendor_zlib)\nupx_compile_target_debug_with_O2(${t})\nupx_sanitize_target(${t})\ntarget_compile_definitions(${t} PRIVATE HAVE_VSNPRINTF=1)\nif(HAVE_UNISTD_H)\n    target_compile_definitions(${t} PRIVATE HAVE_UNISTD_H=1)\nendif()\nif(MSVC_FRONTEND)\n    target_compile_options(${t} PRIVATE -W3 ${warn_WX})\nelseif(GNU_FRONTEND)\n    target_compile_options(${t} PRIVATE ${warn_Wall} -Wno-cast-align -Wno-cast-qual ${warn_Werror})\nendif()\nupx_add_target_extra_compile_options(${t} UPX_CONFIG_EXTRA_COMPILE_OPTIONS_ZLIB)\n\nif(NOT UPX_CONFIG_DISABLE_ZSTD)\nset(t upx_vendor_zstd)\nupx_compile_target_debug_with_O2(${t})\nupx_sanitize_target(${t})\ntarget_compile_definitions(${t} PRIVATE DYNAMIC_BMI2=0 ZSTD_DISABLE_ASM=1)\nif(MSVC_FRONTEND)\n    target_compile_options(${t} PRIVATE ${warn_WN} ${warn_WX})\nelseif(GNU_FRONTEND)\n    target_compile_options(${t} PRIVATE ${warn_Wall} ${warn_Werror})\nendif()\nupx_add_target_extra_compile_options(${t} UPX_CONFIG_EXTRA_COMPILE_OPTIONS_ZSTD)\nendif() # UPX_CONFIG_DISABLE_ZSTD\n\nset(t upx)\ntarget_include_directories(${t} PRIVATE vendor)\ntarget_compile_definitions(${t} PRIVATE $<$<CONFIG:Debug>:DEBUG=1>)\nif(GITREV_SHORT)\n    target_compile_definitions(${t} PRIVATE UPX_VERSION_GITREV=\"${GITREV_SHORT}${GITREV_PLUS}\")\n    if(GIT_DESCRIBE)\n        target_compile_definitions(${t} PRIVATE UPX_VERSION_GIT_DESCRIBE=\"${GIT_DESCRIBE}\")\n    endif()\nendif()\nif(Threads_FOUND)\n    target_compile_definitions(${t} PRIVATE WITH_THREADS=1)\nendif()\nif(NOT UPX_CONFIG_DISABLE_WSTRICT)\n    target_compile_definitions(${t} PRIVATE UPX_CONFIG_DISABLE_WSTRICT=0)\nendif()\nif(NOT UPX_CONFIG_DISABLE_WERROR)\n    target_compile_definitions(${t} PRIVATE UPX_CONFIG_DISABLE_WERROR=0)\nendif()\nif(NOT UPX_CONFIG_DISABLE_BZIP2)\n    target_compile_definitions(${t} PRIVATE WITH_BZIP2=1)\nendif()\nif(NOT UPX_CONFIG_DISABLE_ZSTD)\n    target_compile_definitions(${t} PRIVATE WITH_ZSTD=1)\nendif()\nif(HAVE_UTIMENSAT)\n    target_compile_definitions(${t} PRIVATE USE_UTIMENSAT=1)\n    if(HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC)\n        target_compile_definitions(${t} PRIVATE HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC=1)\n    endif()\nendif()\n# improve speed of the Debug versions\nupx_compile_source_debug_with_O2(src/compress/compress_lzma.cpp)\nupx_compile_source_debug_with_O2(src/filter/filter_impl.cpp)\n#upx_compile_target_debug_with_O2(${t})\nupx_sanitize_target(${t})\nif(MSVC_FRONTEND)\n    target_compile_options(${t} PRIVATE -EHsc ${warn_WN} ${warn_WX})\nelseif(GNU_FRONTEND)\n    target_compile_options(${t} PRIVATE ${warn_Wall} ${warn_Werror})\nendif()\nupx_add_target_extra_compile_options(${t} UPX_CONFIG_EXTRA_COMPILE_OPTIONS_UPX)\n\n#***********************************************************************\n# test\n#   ctest\n#   make test\n#   ninja test\n#***********************************************************************\n\nupx_cmake_include_hook(6_test)\n\nif(NOT UPX_CONFIG_CMAKE_DISABLE_TEST)\n\nadd_custom_command(TARGET upx POST_BUILD COMMAND \"${CMAKE_COMMAND}\" -E make_directory \"${CMAKE_CURRENT_BINARY_DIR}/XTesting/$<CONFIG>\")\n\ninclude(CTest)\nif(NOT CMAKE_CROSSCOMPILING OR CMAKE_CROSSCOMPILING_EMULATOR)\n    upx_add_test(upx-version       upx --version)\n    upx_add_test(upx-version-short upx --version-short)\n    upx_add_test(upx-license       upx --license)\n    upx_add_test(upx-help-1        upx --help)\n    upx_add_test(upx-help-2        upx --help-short)\n    upx_add_test(upx-help-3        upx --help-verbose)\n    upx_add_test(upx-sysinfo-1     upx --sysinfo)\n    upx_add_test(upx-sysinfo-2     upx --sysinfo -v)\n    upx_add_test(upx-sysinfo-3     upx --sysinfo -vv)\n    if(NOT UPX_CONFIG_DISABLE_SELF_PACK_TEST)\n        # IMPORTANT NOTE: these tests can only work if the host executable format\n        #   is supported by UPX!\n        include(\"${CMAKE_CURRENT_SOURCE_DIR}/misc/cmake/self_pack_test.cmake\")\n    endif()\nendif()\n\nendif() # UPX_CONFIG_CMAKE_DISABLE_TEST\n\n#***********************************************************************\n# install\n#   cmake --install .\n#   make install\n#   ninja install\n#***********************************************************************\n\nupx_cmake_include_hook(7_install)\n\nif(NOT UPX_CONFIG_CMAKE_DISABLE_INSTALL)\n\n# installation prefix and directories\nif(NOT CMAKE_INSTALL_PREFIX)\n    #message(FATAL_ERROR \"ERROR: CMAKE_INSTALL_PREFIX is not defined\")\n    message(WARNING \"WARNING: CMAKE_INSTALL_PREFIX is not defined\")\nendif()\n# install files\nif(CMAKE_INSTALL_PREFIX AND DEFINED CMAKE_INSTALL_BINDIR)\n    install(TARGETS upx DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\n    install(FILES\n        COPYING LICENSE NEWS README doc/THANKS.txt doc/upx-doc.html doc/upx-doc.txt\n        DESTINATION \"${CMAKE_INSTALL_DOCDIR}\"\n    )\n    install(FILES doc/upx.1 DESTINATION \"${CMAKE_INSTALL_MANDIR}/man1\")\nendif()\n\nendif() # UPX_CONFIG_CMAKE_DISABLE_INSTALL\n\n#***********************************************************************\n# summary\n# print some info about the build configuration\n#***********************************************************************\n\nupx_cmake_include_hook(8_summary)\n\nupx_print_var(CMAKE_VERSION UPX_CONFIG_CMAKE_MINIMUM_REQUIRED_VERSION CMAKE_GENERATOR)\nif(NOT UPX_CONFIG_CMAKE_DISABLE_PRINT_INFO)\n    # print detailed info\n    include(\"${CMAKE_CURRENT_SOURCE_DIR}/misc/cmake/print_info.cmake\")\n    upx_print_info()\nendif()\nupx_print_var(CMAKE_INSTALL_PREFIX CMAKE_CONFIGURATION_TYPES CMAKE_TRY_COMPILE_CONFIGURATION CMAKE_BUILD_TYPE)\nif(Threads_FOUND)\n    message(STATUS \"WITH_THREADS = 1\")\nelseif(UPX_CONFIG_REQUIRE_THREADS)\n    message(FATAL_ERROR \"ERROR: WITH_THREADS required\")\nelseif(UPX_CONFIG_EXPECT_THREADS AND NOT UPX_CONFIG_DISABLE_THREADS)\n    message(FATAL_ERROR \"ERROR: WITH_THREADS expected; set UPX_CONFIG_EXPECT_THREADS=OFF\")\nendif()\nif(CMAKE_BUILD_TYPE AND NOT CMAKE_BUILD_TYPE MATCHES \"^(Debug|None|Release)$\")\n    message(WARNING \"WARNING: unsupported CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; please use \\\"Debug\\\" or \\\"Release\\\"\")\nendif()\n\n# extra sanity checks to detect incompatible C vs CXX settings\nif(NOT UPX_CONFIG_CMAKE_DISABLE_PLATFORM_CHECK)\n    upx_platform_check_c_cxx_mismatch()\nendif()\n\nupx_cmake_include_hook(9_finish)\nfile(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/.upx_cmake_config_done.txt\" \"\")\n\n# vim:set ft=cmake ts=4 sw=4 tw=0 et:\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 5.3203125,
          "content": "-----BEGIN PGP SIGNED MESSAGE-----\n\n\n                 ooooo     ooo ooooooooo.   ooooooo  ooooo\n                 `888'     `8' `888   `Y88.  `8888    d8'\n                  888       8   888   .d88'    Y888..8P\n                  888       8   888ooo88P'      `8888'\n                  888       8   888            .8PY888.\n                  `88.    .8'   888           d8'  `888b\n                    `YbodP'    o888o        o888o  o88888o\n\n\n                    The Ultimate Packer for eXecutables\n          Copyright (c) 1996-2000 Markus Oberhumer & Laszlo Molnar\n               http://wildsau.idv.uni-linz.ac.at/mfx/upx.html\n                          http://www.nexus.hu/upx\n                            http://upx.tsx.org\n\n\nPLEASE CAREFULLY READ THIS LICENSE AGREEMENT, ESPECIALLY IF YOU PLAN\nTO MODIFY THE UPX SOURCE CODE OR USE A MODIFIED UPX VERSION.\n\n\nABSTRACT\n========\n\n   UPX and UCL are copyrighted software distributed under the terms\n   of the GNU General Public License (hereinafter the \"GPL\").\n\n   The stub which is imbedded in each UPX compressed program is part\n   of UPX and UCL, and contains code that is under our copyright. The\n   terms of the GNU General Public License still apply as compressing\n   a program is a special form of linking with our stub.\n\n   As a special exception we grant the free usage of UPX for all\n   executables, including commercial programs.\n   See below for details and restrictions.\n\n\nCOPYRIGHT\n=========\n\n   UPX and UCL are copyrighted software. All rights remain with the authors.\n\n   UPX is Copyright (C) 1996-2000 Markus Franz Xaver Johannes Oberhumer\n   UPX is Copyright (C) 1996-2000 Laszlo Molnar\n\n   UCL is Copyright (C) 1996-2000 Markus Franz Xaver Johannes Oberhumer\n\n\nGNU GENERAL PUBLIC LICENSE\n==========================\n\n   UPX and the UCL library are free software; you can redistribute them\n   and/or modify them under the terms of the GNU General Public License as\n   published by the Free Software Foundation; either version 2 of\n   the License, or (at your option) any later version.\n\n   UPX and UCL are distributed in the hope that they will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; see the file COPYING.\n\n\nSPECIAL EXCEPTION FOR COMPRESSED EXECUTABLES\n============================================\n\n   The stub which is imbedded in each UPX compressed program is part\n   of UPX and UCL, and contains code that is under our copyright. The\n   terms of the GNU General Public License still apply as compressing\n   a program is a special form of linking with our stub.\n\n   Hereby Markus F.X.J. Oberhumer and Laszlo Molnar grant you special\n   permission to freely use and distribute all UPX compressed programs\n   (including commercial ones), subject to the following restrictions:\n\n   1. You must compress your program with a completely unmodified UPX\n      version; either with our precompiled version, or (at your option)\n      with a self compiled version of the unmodified UPX sources as\n      distributed by us.\n   2. This also implies that the UPX stub must be completely unmodfied, i.e.\n      the stub imbedded in your compressed program must be byte-identical\n      to the stub that is produced by the official unmodified UPX version.\n   3. The decompressor and any other code from the stub must exclusively get\n      used by the unmodified UPX stub for decompressing your program at\n      program startup. No portion of the stub may get read, copied,\n      called or otherwise get used or accessed by your program.\n\n\nANNOTATIONS\n===========\n\n  - You can use a modified UPX version or modified UPX stub only for\n    programs that are compatible with the GNU General Public License.\n\n  - We grant you special permission to freely use and distribute all UPX\n    compressed programs. But any modification of the UPX stub (such as,\n    but not limited to, removing our copyright string or making your\n    program non-decompressible) will immediately revoke your right to\n    use and distribute a UPX compressed program.\n\n  - UPX is not a software protection tool; by requiring that you use\n    the unmodified UPX version for your proprietary programs we\n    make sure that any user can decompress your program. This protects\n    both you and your users as nobody can hide malicious code -\n    any program that cannot be decompressed is highly suspicious\n    by definition.\n\n  - You can integrate all or part of UPX and UCL into projects that\n    are compatible with the GNU GPL, but obviously you cannot grant\n    any special exceptions beyond the GPL for our code in your project.\n\n  - We want to actively support manufacturers of virus scanners and\n    similar security software. Please contact us if you would like to\n    incorporate parts of UPX or UCL into such a product.\n\n\n\nMarkus F.X.J. Oberhumer                   Laszlo Molnar\nmarkus.oberhumer@jk.uni-linz.ac.at        ml1050@cdata.tvnet.hu\n\nLinz, Austria, 25 Feb 2000\n\n\n\n-----BEGIN PGP SIGNATURE-----\nVersion: 2.6.3ia\nCharset: noconv\n\niQCVAwUBOLaLS210fyLu8beJAQFYVAP/ShzENWKLTvedLCjZbDcwaBEHfUVcrGMI\nwE7frMkbWT2zmkdv9hW90WmjMhOBu7yhUplvN8BKOtLiolEnZmLCYu8AGCwr5wBf\ndfLoClxnzfTtgQv5axF1awp4RwCUH3hf4cDrOVqmAsWXKPHtm4hx96jF6L4oHhjx\nOO03+ojZdO8=\n=CS52\n-----END PGP SIGNATURE-----\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.1298828125,
          "content": "#\n# UPX top-level Makefile - needs GNU make and CMake >= 3.13\n# Copyright (C) Markus Franz Xaver Johannes Oberhumer\n#\n\n# INFO: this Makefile is just a convenience wrapper for calling CMake\n\n# HINT: if you only have an older CMake 3.x then you can invoke cmake manually like this:\n#   mkdir -p build/release\n#   cd build/release\n#   cmake ../..         # run config\n#   make -j4            # and run build\n\nCMAKE = cmake\nUPX_CMAKE_BUILD_FLAGS += --parallel\nifneq ($(VERBOSE),)\n  #UPX_CMAKE_BUILD_FLAGS += --verbose # requires CMake >= 3.14\n  UPX_CMAKE_CONFIG_FLAGS += -DCMAKE_VERBOSE_MAKEFILE=ON\nendif\n# enable this if you prefer Ninja for the actual builds:\n#UPX_CMAKE_CONFIG_FLAGS += -G Ninja\n\n#***********************************************************************\n# default\n#***********************************************************************\n\n.DEFAULT_GOAL = build/release\n\nrun_cmake_config = $(CMAKE) -S . -B $1 $(UPX_CMAKE_CONFIG_FLAGS) -DCMAKE_BUILD_TYPE=$2\nrun_cmake_build  = $(CMAKE) --build $1 $(UPX_CMAKE_BUILD_FLAGS) --config $2\n# avoid re-running run_cmake_config if .upx_cmake_config_done.txt already exists\nrun_config       = $(if $(wildcard $1/CMakeFiles/.*_cmake_config_done.txt),,$(call run_cmake_config,$1,$2))\nrun_build        = $(call run_cmake_build,$1,$2)\n\nbuild/debug: PHONY\n\t$(call run_config,$@,Debug)\n\t$(call run_build,$@,Debug)\n\nbuild/release: PHONY\n\t$(call run_config,$@,Release)\n\t$(call run_build,$@,Release)\n\n.NOTPARALLEL: # because the actual builds use \"cmake --parallel\"\n.PHONY: PHONY\n.SECONDEXPANSION:\n.SUFFIXES:\n\n# shortcuts (all => debug + release)\ndebug:   build/debug PHONY\nrelease: build/release PHONY\nall build/all: build/debug build/release PHONY\nbuild/%/all:   $$(dir $$@)debug $$(dir $$@)release PHONY ;\n\n#***********************************************************************\n# test\n#***********************************************************************\n\nCTEST = ctest\nCTEST_JOBS ?= 8\nCTEST_FLAGS = --output-on-failure --parallel $(CTEST_JOBS)\n\nbuild/debug+test:     $$(dir $$@)debug PHONY; cd \"$(dir $@)debug\" && $(CTEST) $(CTEST_FLAGS) -C Debug\nbuild/%/debug+test:   $$(dir $$@)debug PHONY; cd \"$(dir $@)debug\" && $(CTEST) $(CTEST_FLAGS) -C Debug\nbuild/release+test:   $$(dir $$@)release PHONY; cd \"$(dir $@)release\" && $(CTEST) $(CTEST_FLAGS) -C Release\nbuild/%/release+test: $$(dir $$@)release PHONY; cd \"$(dir $@)release\" && $(CTEST) $(CTEST_FLAGS) -C Release\nbuild/%/all+test:     $$(dir $$@)debug+test $$(dir $$@)release+test PHONY ;\n\n# shortcuts\ndebug+test:   build/debug+test PHONY\nrelease+test: build/release+test PHONY\nall+test build/all+test: build/debug+test build/release+test PHONY\n\ntest: $$(patsubst %+test,%,$$(.DEFAULT_GOAL))+test PHONY\n\n#\n# END of Makefile\n#\n\n# extra pre-defined build configurations and some utility; optional\n-include ./Makevars-local.mk\n-include ./misc/make/Makefile-extra.mk\n\n# developer convenience\nifneq ($(wildcard /usr/bin/env),) # need Unix utils like bash, perl, sed, xargs, etc.\nifneq ($(and $(wildcard ./misc/scripts/.),$(wildcard ./doc/upx.pod)),)\ncheck-whitespace clang-format run-testsuite run-testsuite-all run-testsuite-debug run-testsuite-release: src/Makefile PHONY\n\t$(MAKE) -C src $@\nendif\nendif\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 24.890625,
          "content": "==================================================================\nUser visible changes for UPX\n==================================================================\n\nChanges in 4.3.0 (XX XXX XXXX):\n  * bug fixes - see https://github.com/upx/upx/milestone/18\n  * ELF: PT_MIPS_ABIFLAGS is now forwarded into the compressed output;\n    qemu-mips can choose the right floating-point emulation\n  * ELF: --unmap-all-pages completely avoids /proc/self/exe\n  * ELF: --android-old supports older than Android 10; costs 1KB\n\nChanges in 4.2.4 (09 May 2024):\n  * bug fixes - see https://github.com/upx/upx/milestone/17\n\nChanges in 4.2.3 (27 Mar 2024):\n  * bug fixes - see https://github.com/upx/upx/milestone/16\n\nChanges in 4.2.2 (03 Jan 2024):\n  * bug fixes - see https://github.com/upx/upx/milestone/15\n\nChanges in 4.2.1 (01 Nov 2023):\n  * linux: /proc/self/exe now is optional\n  * windows: use SetFileTime to preserve sub-second file timestamps\n  * official Windows builds: revert activeCodePage change introduced in 4.2.0\n  * bug fixes - see https://github.com/upx/upx/milestone/14\n\nChanges in 4.2.0 (26 Oct 2023):\n  * win32/pe and win64/pe: stricter relocation checks; please report regressions\n  * unix: use utimensat to preserve sub-second file timestamps\n  * new option '--link' to preserve hard-links (Unix only; use with care)\n  * add support for NO_COLOR env var; see https://no-color.org/\n  * disable macOS support until we fix compatibility with macOS 13+\n  * official Windows builds: set activeCodePage to UTF-8\n  * bug fixes - see https://github.com/upx/upx/milestone/13\n\nChanges in 4.1.0 (08 Aug 2023):\n  * ELF: handle shared libraries with more than 2 PT_LOAD segments\n  * bug fixes - see https://github.com/upx/upx/milestone/11\n\nChanges in 4.0.2 (30 Jan 2023):\n  * bug fixes - see https://github.com/upx/upx/milestone/9\n\nChanges in 4.0.1 (16 Nov 2022):\n  * bug fixes - see https://github.com/upx/upx/milestone/8\n\nChanges in 4.0.0 (28 Oct 2022):\n  * Switch to semantic versioning\n  * SECURITY NOTES: emphasize the security context in the docs\n  * Support easy building from source code with CMake\n  * Support easy rebuilding the stubs from source with Podman/Docker\n  * Add integrated doctest C++ testing framework\n  * Add support for EFI files (PE x86; Kornel Pal)\n  * win32/pe and win64/pe: set correct SizeOfHeaders in the PE header\n  * bug fixes - see https://github.com/upx/upx/milestone/6\n  * bug fixes - see https://github.com/upx/upx/milestone/7\n\nChanges in 3.96 (23 Jan 2020):\n  * bug fixes - see https://github.com/upx/upx/milestone/5\n\nChanges in 3.95 (26 Aug 2018):\n  * Flag --android-shlib to work around bad design in Android\n  * Flag --force-pie when ET_DYN main program is not marked as DF_1_PIE\n  * Better compatibility with varying layout of address space on Linux\n  * Support for 4 PT_LOAD layout in ELF generated by binutils-2.31\n  * bug fixes, particularly better diagnosis of malformed input\n  * bug fixes - see https://github.com/upx/upx/milestone/4\n\nChanges in 3.94 (12 May 2017):\n  * Add support for arm64-linux (aka \"aarch64\").\n  * Add support for --lzma compression on 64-bit PowerPC (Thierry Fauck).\n  * For Mach, \"upx -d\" will unpack a prefix of the file (and warn).\n  * Various improvements to the ELF formats.\n  * bug fixes - see https://github.com/upx/upx/milestone/3\n\nChanges in 3.93 (29 Jan 2017):\n  * Fixed some win32/pe and win64/pe regressions introduced in 3.92\n  * bug fixes - see https://github.com/upx/upx/milestone/2\n\nChanges in 3.92 (11 Dec 2016):\n  * INFO: UPX has moved to GitHub - the new home page is https://upx.github.io\n  * IMPORTANT: all PE formats: internal changes: reunited the diverged source\n    files - please report all regressions into the bug tracker and try UPX 3.91\n    in case of problems.\n  * Support Apple MacOS 10.12 \"Sierra\", including more-robust de-compression.\n  * Explicitly diagnose Go-language bad PT_LOAD; recommend hemfix.c.\n    https://sourceforge.net/p/upx/bugs/195/   https://github.com/pwaller/goupx\n  * Fix CERT-FI Case 829767 UPX command line tools segfaults.\n    Received by UPX Team on 2015-May-08; originally reported\n    by Codenomicon to NCSC-FI on 2015-01-08.\n    The vulnerabilities were discovered by Joonas Kuorilehto and\n    Antti Häyrynen from Codenomicon.\n  * bug fixes - see https://github.com/upx/upx/milestone/1\n\nChanges in 3.91 (30 Sep 2013):\n  * Added experimental support for Windows 64-bit PE files, based on\n    work by Stefan Widmann. Please use for testing only!\n  * bug fixes\n\n==================================================================\n\nChanges in 3.09 (18 Feb 2013):\n  * New option --preserve-build-id for GNU ELF.\n  * Allow for code signing and LC_UUID on Mac OS X executables.\n  * Allow non-contiguous LC_SEGMENTs and 0==.vmsize for Mach-O.\n  * Allow zero-filled final page in PackUnix::canUnpack().\n  * bug fixes\n\nChanges in 3.08 (12 Dec 2011):\n  * Fix allocation in runtime stub for darwin.macho-entry (i386 and amd64).\n  * Compress shared library on ELF i386 only [ld.so threatens even this case].\n  * Attempt to support ELF on QNX 6.3.0 for armel (experimental).\n  * Better diagnostic when ELF -fPIC is needed.\n  * PT_NOTE improvements for BSD.\n  * Preserve more ELF .e_flags on ARM.\n  * Minor code improvements for ELF stubs.\n  * Defend against another flavor of corrupt PE header.\n  * bug fixes\n\nChanges in 3.07 (08 Sep 2010):\n  * win32/pe: fixed relocation handling for files with *no* TLS callbacks\n    [severe bug introduced in 3.06]\n\nChanges in 3.06 (04 Sep 2010):\n  * win32/pe: TLS callback support contributed by Stefan Widmann. Thanks!\n  * bug fixes\n\nChanges in 3.05 (27 Apr 2010):\n  * i386-linux and amd64-linux support shared libraries (DT_INIT must\n    exist, all info needed by runtime loader must be first in .text, etc.)\n  * Linux /proc/self/exe now is preserved by default, by leaving behind\n    one page.  New compress-time option --unmap-all-pages is available.\n  * Withdraw support for shared libraries on Darwin (Apple Mac OS X)\n    because upx does not understand enough about .dylib.\n  * bug fixes\n\nChanges in 3.04 (27 Sep 2009):\n  * new format Mach/AMD64 supports 64-bit programs on Apple Macintosh.\n  * new formats Dylib/i386 and Dylib/ppc32 support shared libraries\n    [such as browser plugins] on Darwin (Apple Macintosh).  An existing\n    -init function (LC_ROUTINES command) is required.\n  * new format vmlinuz/armel for Debian NSLU2 (etc.) linux kernel\n  * bvmlinuz boot protocol 2.08 for 386 Linux kernel\n  * Extended ABI version 4 for armel-eabi ARM Linux ELF\n  * bug fixes\n\nChanges in 3.03 (27 Apr 2008):\n  * implement cache flushing for PowerPC (esp. model 440)\n  * fix cache flushing on MIPS (>3 MiB compressed, or with holes)\n  * fix MIPS big-endian\n  * bug fixes\n\nChanges in 3.02 (16 Dec 2007):\n  * fix unmapping on arm-linux.elf\n  * fix error checking in mmap for i386-linux.elf [triggered by -fPIE]\n  * bug fixes\n\nChanges in 3.01 (31 Jul 2007):\n  * new options --no-mode, --no-owner and --no-time to disable preservation\n    of mode (file permissions), file ownership and timestamps.\n  * dos/exe: fixed an incorrect error message caused by a bug in\n    relocation handling\n  * new format linux/mipsel supports ELF on [32-bit] R3000\n  * fix argv[0] on PowerPC with --lzma\n  * bug fixes\n\nChanges in 3.00 (27 Apr 2007):\n  * watcom/le & tmt/adam: fixed a problem when using certain filters\n\nChanges in 2.93 beta (08 Mar 2007):\n  * new formats Mach/i386 and Mach/fat support Mac OS X i686 and\n    Universal binaries [i686 and PowerPC only]\n  * dos/exe: LZMA is now also supported for 16-bit dos/exe. Please note that\n    you have to explicitly use '--lzma' even for '--ultra-brute' here\n    because runtime decompression is about 30 times slower than NRV -\n    which is really noticeable on old machines.\n  * dos/exe: fixed a rarely occurring bug in relocation handling\n  * win32/pe & arm/pe: better icon compression handling\n\nChanges in 2.92 beta (23 Jan 2007):\n  * new option '--ultra-brute' which tries even more variants\n  * slightly improved compression ratio for some files when\n    using '--brute' or '--ultra-brute'\n  * bug fixes\n\nChanges in 2.91 beta (29 Nov 2006):\n  * assorted bug fixes\n  * wince/arm: fix \"missing\" icon & version info resource problem for WinCE 5\n  * win32/pe & arm/pe: added option --compress-icons=3 to compress all icons\n\nChanges in 2.90 beta (08 Oct 2006):\n  * LZMA algorithm support for most of the 32-bit and 64-bit file formats;\n    use new option '--lzma' to enable\n  * new format: BSD/elf386 supporting FreeBSD, NetBSD and OpenBSD\n    via auto-detection of PT_NOTE or EI_OSABI\n  * arm/pe: all the NRV compression methods are now supported\n    (only NRV2D is missing in thumb mode)\n  * linux/elf386, linux/ElfAMD: remember /proc/self/exe in environment\n  * major source code changes: the runtime decompression stubs are now\n    built from internal ELF objects\n\n==================================================================\n\nChanges in 2.03 (07 Nov 2006):\n  * bvmlinuz/386: fix for kernels not at 0x100000; also allow x86_64\n  * linux/elf386: work around Linux kernel bug (0-length .bss needs PF_W)\n\nChanges in 2.02 (13 Aug 2006):\n  * linux/386: work around Linux kernel bug (\".bss\" requires PF_W)\n  * linux/ppc32, mach/ppc32: compressed programs now work on a 405 CPU\n  * vmlinuz/386: fixed zlib uncompression problem on DOS\n\nChanges in 2.01 (06 Jun 2006):\n  * arm/pe: better DLL support\n  * dos/exe: device driver support added\n  * linux/386: Fix --force-execve for PaX, grSecurity, and strict SELinux.\n    /tmp must support execve(); therefore /tmp cannot be mounted 'noexec'.\n  * win32/pe & arm/pe: added new option '--keep-resource=' for\n    excluding selected resources from compression\n\nChanges in 2.00 (27 Apr 2006):\n  * linux/386: the stub now prints an error message if some strict\n    SELinux mode does prevent runtime decompression and execution\n    (for a fully SELinux-compatible but otherwise inferior compression\n    format you can use the '--force-execve' option)\n  * linux/386: worked around a problem where certain Linux kernels\n    clobber the %ebx register during a syscall\n  * win32/pe: disable filters for files with broken PE headers\n\nChanges in 1.96 beta (13 Apr 2006):\n  * arm/pe: added filter support\n  * win32/pe: removed an unnecessary check so that Delphi 2006 and\n    Digital Mars C++ programs finally are supported\n\nChanges in 1.95 beta (09 Apr 2006):\n  * arm/pe: added DLL support\n  * arm/pe: added thumb mode stub support\n  * arm/pe: added unpacking support\n  * win32/pe: really worked around R6002 runtime errors\n\nChanges in 1.94 beta (11 Mar 2006):\n  * new format: added support for wince/arm (ARM executables running on WinCE)\n  * new format: added support for linux elf/amd64\n  * new format: added support for linux elf/ppc32\n  * new format: added support for mach/ppc32 (Apple Mac OS X)\n  * win32/pe: hopefully working \"load config\" support\n  * win32/pe: R6002 runtime errors worked around\n  * win32/pe: the stub now clears the dirty stack\n\nChanges in 1.93 beta (07 Feb 2005):\n  * vmlinuz/386: fixes to support more kernels\n\nChanges in 1.92 beta (20 Jul 2004):\n  * win32/pe: added option '--strip-loadconf' to strip the SEH load\n    config section [NOTE: this option is obsolete since UPX 1.94]\n  * win32/pe: try to detect .NET (win32/net) files [not yet supported by UPX]\n  * vmlinux/386: new format that directly supports building Linux kernels\n  * source code: now compiles cleanly under Win64\n\nChanges in 1.91 beta (30 Jun 2004):\n  * djgpp2/coff: added support for recent binutils versions\n  * linux/elf386, linux/sh386: lots of improvements\n  * vmlinuz/386: added support for recent kernels\n  * watcom/le: don't crash on files without relocations\n  * win32/pe: stricter checks of some PE values\n  * option '--brute' now implies '--crp-ms=999999'.\n  * source code: much improved portability using ACC, the\n    Automatic Compiler Configuration\n  * source code: compile fixes for strict ISO C++ compilers\n  * source code: compile fixes for Win64\n  * re-synced with upx 1.25 branch\n\nChanges in 1.90 beta (11 Nov 2002):\n  * implemented several new options for finer compression control:\n    '--all-methods', '--all-filters' and '--brute'\n  * ps1/exe: new format - UPX now supports PlayStation One programs\n  * linux/386: added the option '--force-execve'\n  * vmlinuz/386: better kernel detection and sanity checks\n  * re-synced with upx 1.24 branch\n  * documentation updates\n\nChanges in 1.11 beta (20 Dec 2000):\n  * vmlinuz/386: new format - UPX now supports bootable linux kernels\n  * linux/elf386: added the new ELF direct-to-memory executable format - no\n    more temp files are needed for decompression!\n  * linux/sh386: added the new shell direct-to-memory executable format - no\n    more temp files are needed for decompression!\n  * reduced overall memory requirements during packing\n  * quite a number of internal source code rearrangements\n\n==================================================================\n\nChanges in 1.25 (29 Jun 2004)\n  * INFO: http://upx.sourceforge.net is the new UPX home page\n  * watcom/le: don't crash on files without relocations\n  * win32/pe: stricter checks of some PE values\n  * source code: much improved portability using ACC, the\n    Automatic Compiler Configuration\n  * source code: compile fixes for strict ISO C++ compilers\n  * source code: compile fixes for Win64\n\nChanges in 1.24 (07 Nov 2002)\n  * djgpp2/coff: stricter check of the COFF header to work around a\n    problem with certain binutils versions\n\nChanges in 1.23 (05 Sep 2002)\n  * atari/tos: fixed an unpacking problem where a buffer was too\n    small (introduced in 1.22)\n  * linux/386: don't give up too early if a single block turns out\n    to be incompressible\n  * documentation: added some quick tips how to achieve the best\n    compression ratio for the final release of your application\n  * fixed a rare situation where the exit code was not set correctly\n\nChanges in 1.22 (27 Jun 2002)\n  * atari/tos: the stub now flushes the CPU cache to avoid\n    problems on 68030+ machines\n  * source code: additional compiler support for Borland C++,\n    Digital Mars C++ and Watcom C++\n\nChanges in 1.21 (01 Jun 2002)\n  * New option '--crp-ms=' for slightly better compression at the cost\n    of higher memory requirements during compression.\n    Try 'upx --best --crp-ms=100000'. See the docs for more info.\n  * source code: portability fixes\n  * source code: compile fixes for g++ 3.0 and g++ 3.1\n\nChanges in 1.20 (23 May 2001)\n  * slightly faster compression\n  * work around a gcc problem in the latest djgpp2 distribution\n  * watcom/le: fixed detection of already compressed files\n  * win32/pe: do not compress RT_MANIFEST resource types\n  * win32/pe: improved the error message for empty resource sections\n  * [NOTE: the jump from 1.08 to 1.20 is to avoid confusion with\n           our unstable development releases 1.1x and 1.9x]\n\nChanges in 1.08 (30 Apr 2001)\n  * new native port to atari/tos\n  * win32/pe: shortened the identstring\n  * source code: portability fixes - UPX now builds cleanly under m68k CPUs\n\nChanges in 1.07 (20 Feb 2001)\n  * win32/pe: corrected the TLS callback check\n  * win32/pe: really fixed that rare bug in relocation handling\n  * win32/pe: experimental support for SizeOfHeaders > 0x1000\n  * win32/pe: check for superfluous data between sections\n  * win32/pe: compressing screensavers (.scr) should finally work\n\nChanges in 1.06 (27 Jan 2001)\n  * win32/pe: the check for TLS callbacks introduced in 1.05\n      was too strict - disabled for now\n  * dos/com: decreased the decompressor stack size a little bit\n\nChanges in 1.05 (24 Jan 2001)\n  * win32/pe: refuse to compress programs with TLS callbacks\n  * win32/pe: stub changes to avoid slowdowns with some virus monitors\n  * win32/pe: reverted the relocation handling changes in 1.04\n  * linux/386: dont try to compress Linux kernel images (have a look\n      at the unstable UPX 1.1x beta versions for that)\n\nChanges in 1.04 (19 Dec 2000)\n  * dos/exe: fixed an internal error when using '--no-reloc'\n  * win32/pe: fixed a rare bug in the relocation handling code\n  * some tunings for the default compression level\n\nChanges in 1.03 (30 Nov 2000)\n  * linked with a new version of the NRV compression library:\n      - improved compression ratio a little bit\n      - overall significantly faster compression\n      - much faster when using high compression levels like '-9' or '--best'\n      - much faster with large files\n  * atari/tos: added support for FreeMiNT\n  * the 32-bit DOS version now uses the new CWSDSTUB extender\n\nChanges in 1.02 (13 Sep 2000)\n  * watcom/le: fixed a problem with the Causeway extender\n  * win32/pe: don't automatically strip relocs if they seem needed\n  * support multiple backup generations when using '-k'\n  * updated the console screen driver\n\nChanges in 1.01 (09 Apr 2000)\n  * win32/pe: fixed an uncompression problem in DLLs with empty\n    fixup sections\n  * win32/pe: fixed another rare uncompression problem - a field in the\n    PE header was set incorrectly\n\nChanges in 1.00 (26 Mar 2000)\n  * documentation updates\n  * watcom/le: do not duplicate the non-resident name table\n  * win32/pe: fixed an import handling problem: sometimes too much data\n    could be deleted from a file -> the uncompressed file would not work\n    anymore\n\nChanges in 0.99.3 (07 Mar 2000)\n  * win32/pe: fixed a rare problem in the stub string handling part\n\nChanges in 0.99.2 (02 Mar 2000)\n  * dos/exe: fixed a typo causing an internal error (introduced in 0.99.1)\n\nChanges in 0.99.1 (29 Feb 2000)\n  * win32/pe: fixed some object alignments which were causing\n    problems when loading compressed DLLs under Windows NT/2000\n\nChanges in 0.99 (25 Feb 2000)\n  * FULL SOURCE CODE RELEASED UNDER THE TERMS OF THE GNU GPL\n  * win32/pe: changed default to '--strip-relocs=1'\n  * dos/com and dos/sys: fixed a bad decompressor problem\n  * linux/386: the counter for the progress indicator was off by one\n\n==================================================================\n\nChanges in 0.94 (06 Dec 1999)\n  * win32/pe: the stub now calls ExitProcess in case of import errors\n  * under DOS and Windows, the environment variable UPX now accepts\n    a '#' as replacement for '=' because of a COMMAND.COM limitation\n\nChanges in 0.93 (22 Nov 1999)\n  * win32/pe: fixed --strip-relocs problem with uncompression\n  * win32/pe: fixed a bug which could produce a broken decompressor stub\n  * linux/386: yet another FreeBSD compatibility fix\n\nChanges in 0.92 (14 Nov 1999)\n  * win32/pe: really fixed that one line (see below)\n\nChanges in 0.91 (13 Nov 1999)\n  * win32/pe: an important one-line fix for the newly introduced problems\n  * dos/com and dos/sys: fixed an internal error\n  * dos/exe: correctly restore cs when uncompressing\n\nChanges in 0.90 (10 Nov 1999)\n  * all formats: '--overlay=copy' now is the default overlay mode\n  * improved compression ratio for most files\n  * win32/pe: uncompression is finally supported\n  * win32/pe: never compress REGISTRY resources\n  * win32/pe: headersize was not set in PE header\n  * win32/pe: resource handling is rewritten\n  * win32/pe: the last :-) TLS problem is fixed\n  * win32/pe: somewhat less memory is required during compression\n  * linux/386: fixed compression of scripts which was broken since 0.71\n  * linux/386: more FreeBSD compatibility issues\n  * changed option: '-i' now prints some more details during compression\n    (not finished yet)\n\nChanges in 0.84 (04 Oct 1999)\n  * dos/exe: fixed a rare problem where the decompressor could crash\n  * some other minor fixes\n\nChanges in 0.83 (17 Sep 1999)\n  * dos/exe: fixed minimal memory requirement problem for some files\n  * win32/pe: fixed a bug which caused a crash in some compressed files\n  * linux/386: various improvements in the stub; also, for the sake\n    of FreeBSD users, the stub is now branded as Linux/ELF\n\nChanges in 0.82 (16 Aug 1999)\n  * dos/exe: fixed a decompressor bug which could cause crash on some files\n  * linux/386: section headers are now stripped from the stub so that\n    'strip' won't ruin a compressed file any longer\n  * wc/le: support for stack not in the last object disabled again\n  * win32/pe: removed some unneeded data\n\nChanges in 0.81 (04 Aug 1999)\n  * win32/pe: fixed an important bug in import handling\n  * dos/com: fixed an internal error that could happen with very small files\n\nChanges in 0.80 (03 Aug 1999)\n  * you can set some default options in the environment var 'UPX'\n  * dos/com: the decompressor stub now checks for enough free memory\n  * dos/exe: decompressor rewritten, some bugs are fixed\n  * dos/exe: new option '--no-reloc': no relocation data is put into\n    the DOS header\n  * tmt/adam: added support for more stubs, detect already packed files\n  * tmt/adam: new option '--copy-overlay'\n  * wc/le: reduced memory requirement during uncompression\n  * wc/le: support files which do not contain their stack in the last object\n  * wc/le: fixed a bug which could cause a crash, improved relocation\n    handling\n  * wc/le: new option '--copy-overlay'\n  * win32/pe: '--compress-icons=2' is now the default\n  * win32/pe: even better TLS support\n  * win32/pe: versioninfo works on NT\n  * win32/pe: import by ordinal from kernel32.dll works\n  * win32/pe: other import improvements: importing a nonexistent DLL\n    results in a usual Windows message, importing a nonexistent function\n    results in program exit (instead of crash ;-)\n  * win32/pe: new option: '--compress-resources=0'\n  * win32/pe: reduced memory requirement during uncompression, some\n    files might even require LESS memory when they're compressed\n  * win32/pe: TYPELIBs should work now\n  * win32/pe: improved relocation handling, 16-bit relocations should work\n  * win32/pe: new option '--strip-relocs' (only if you know what you are doing)\n  * win32/pe: new option '--copy-overlay'\n  * important internal changes: now the stubs are built at runtime\n\nChanges in 0.72 (12 May 1999)\n  * tmt/adam: fixed a serious problem in the decompressor stub; all\n    compressed tmt files should be recompressed\n  * win32/pe: fixed the 'shared sections not supported' warning:\n    read-only shared sections are fine\n  * win32/pe: never compress TYPELIB resources\n  * win32/pe: compressed files are hopefully less suspicious to heuristic\n    virus scanners now\n  * linux/386: minor decompressor stub updates, nicer progress bar\n\nChanges in 0.71 (19 Apr 1999)\n  * dos/exe: added option '--no-overlay'\n  * linux/386: various improvements in the stub, most notably the\n    overhead for an extra cleanup process has been removed\n  * win32/pe: added support for export forwarders\n  * win32/pe: added support for DLLs without entry point or imports\n  * win32/pe: yet another .bss fix\n  * win32/pe: new option '--compress-icons=2': compress all icons\n    which are not in the first icon directory\n  * win32/pe: rearranged stub to avoid false alerts from some virus scanners\n\nChanges in 0.70 (30 Mar 1999)\n  * added support for linux/386 executables\n  * improved compression ratio quite a bit\n  * added new compression level '--best' to squeeze out even some more bytes\n  * win32/pe: TLS support is much better now\n  * win32/pe: --compress-icons=0 should now work as well\n  * the usual minor fixes for win32/pe\n\nChanges in 0.62 (16 Mar 1999)\n  * win32/pe: --compress-icons and --compress-exports are on now by default\n  * win32/pe: --compress-icons should really work now\n  * win32/pe: fixed a problem with embedded .bss sections\n\nChanges in 0.61 (08 Mar 1999)\n  * atari/tos: fixed a problem where the bss segment could become too small\n\nChanges in 0.60 (06 Mar 1999)\n  * win32/pe: fixed file corruption when the size of the export data is invalid\n  * win32/pe: fixed a problem with empty resource data\n  * win32/pe: compressed file alignment set to minimum value\n  * win32/pe: made all compressed sections writable\n  * fixed some other win32/pe bugs\n  * fixed an address optimization problem for some not Watcom LE files\n  * fixed a bug which could make UPX hang when an exe header contained\n    an illegal value\n  * added some compression flags for the win32/pe format\n  * added support for Atari ST/TT executables (atari/tos)\n  * improved compression ratio\n  * improved compression speed\n\nChanges in 0.51 (14 Jan 1999)\n  * fixed a small bug in the PE header that would prevent some compressed\n    win32/pe executables from running under Windows NT and WINE\n\nChanges in 0.50 (03 Jan 1999)\n  * added support for PE format executables (win32/pe & rtm32/pe)\n  * added support for TMT executables (tmt/adam)\n  * fixed a dos/sys bug that affected OpenDOS\n\nChanges in 0.40 (05 Oct 1998)\n  * improved compression ratio\n  * fixed a small but fatal bug in dos/sys introduced in 0.30\n  * fixed a rare bug in dos/exe\n  * worked around a bug in djgpp's strip 2.8\n  * djgpp2/coff: Allegro packfile support should work now\n  * added dos/exeh compression method (works on 386+)\n\nChanges in 0.30 (27 Jul 1998)\n  * fixed a serious bug in the 32-bit compressors - please don't use\n    djgpp2/coff and watcom/le compressed files from previous versions,\n    some of them are possibly damaged !\n  * the 16-bit uncompressors are a little bit shorter & faster\n  * fixed progress indicator for VESA and SVGA text modes\n\nChanges in 0.20 (05 Jul 1998)\n  * second public beta release\n  * too many changes to list here\n\nChanges in 0.05 (26 May 1998)\n  * first public beta release\n  * based on experience gained from our previous packers DJP (djgpp2/coff, 1996),\n    lzop (1996) and mfxpak (atari/tos, 1990)\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 3.640625,
          "content": "                 ooooo     ooo  ooooooooo.  ooooooo  ooooo\n                 `888'     `8'  `888   `Y88. `8888    d8'\n                  888       8    888   .d88'   Y888..8P\n                  888       8    888ooo88P'     `8888'\n                  888       8    888           .8PY888.\n                  `88.    .8'    888          d8'  `888b\n                    `YbodP'     o888o       o888o  o88888o\n\n\n                    The Ultimate Packer for eXecutables\n   Copyright (c) 1996-2024 Markus Oberhumer, Laszlo Molnar & John Reiser\n                           https://upx.github.io\n\n\n\nWELCOME\n=======\n\nWelcome to UPX !\n\nUPX is a free, secure, portable, extendable, high-performance\nexecutable packer for several executable formats.\n\n\nINTRODUCTION\n============\n\nUPX is an advanced executable file compressor. UPX will typically\nreduce the file size of programs and DLLs by around 50%-70%, thus\nreducing disk space, network load times, download times and\nother distribution and storage costs.\n\nPrograms and libraries compressed by UPX are completely self-contained\nand run exactly as before, with no runtime or memory penalty for most\nof the supported formats.\n\nUPX supports a number of different executable formats, including\nWindows programs and DLLs, and Linux executables.\n\nUPX is free software distributed under the term of the GNU General\nPublic License. Full source code is available.\n\nUPX may be distributed and used freely, even with commercial applications.\nSee the UPX License Agreements for details.\n\n\nSECURITY CONTEXT\n================\n\nIMPORTANT NOTE: UPX inherits the security context of any files it handles.\n\nThis means that packing, unpacking, or even testing or listing a file requires\nthe same security considerations as actually executing the file.\n\nUse UPX on trusted files only!\n\n\nSHORT DOCUMENTATION\n===================\n\n'upx program.exe' will compress a program or DLL. For best compression\nresults try 'upx --best program.exe' or 'upx --brute program.exe'.\n\nPlease see the file UPX.DOC for the full documentation. The files\nNEWS and BUGS also contain various tidbits of information.\n\n\nTHE FUTURE\n==========\n\n  - Stay up-to-date with ongoing OS and executable format changes\n\n  - RISC-V 64 for Linux\n\n  - ARM64 for Windows (help wanted)\n\n  - We will *NOT* add any sort of protection and/or encryption.\n    This only gives people a false feeling of security because\n    all \"protectors\" can be broken by definition.\n\n  - Fix all remaining bugs - please report any issues\n    https://github.com/upx/upx/issues\n\n\nCOPYRIGHT\n=========\n\nCopyright (C) 1996-2024 Markus Franz Xaver Johannes Oberhumer\nCopyright (C) 1996-2024 Laszlo Molnar\nCopyright (C) 2000-2024 John F. Reiser\n\nUPX is distributed with full source code under the terms of the\nGNU General Public License v2+; either under the pure GPLv2+ (see\nthe file COPYING), or (at your option) under the GPLv+2 with special\nexceptions and restrictions granting the free usage for all binaries\nincluding commercial programs (see the file LICENSE).\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nYou should have received a copy of the UPX License Agreements along\nwith this program; see the files COPYING and LICENSE. If not,\nvisit the UPX home page.\n\n\nShare and enjoy,\nMarkus & Laszlo & John\n\n\n   Markus F.X.J. Oberhumer              Laszlo Molnar\n   <markus@oberhumer.com>               <ezerotven+github@gmail.com>\n\n   John F. Reiser\n   <jreiser@BitWagon.com>\n\n\n[ The term UPX is a shorthand for the Ultimate Packer for eXecutables\n  and holds no connection with potential owners of registered trademarks\n  or other rights. ]\n"
        },
        {
          "name": "README.SRC",
          "type": "blob",
          "size": 4.76953125,
          "content": "                        The UPX Hacker's Guide\n                        ======================\n\n\nForeword\n--------\n\n  The precompiled UPX versions are linked against the NRV compression\n  library instead of the UCL library. Using the same compression algorithms,\n  NRV achieves a better compression ratio. NRV is not publicly\n  available, though, and probably never will be.\n\n  While you may be disappointed that you don't have access to the\n  latest state-of-the-art compression technology this is actually\n  a safe guard for all of us. The UPX source code release makes\n  it very easy for any evil-minded person to do all sort of bad\n  things. By not providing the very best compression ratio it is much\n  more difficult to create fake or otherwise disguised UPX versions (or\n  similar trojans), as any end user will notice when the compression\n  has gotten worse with a new \"version\" or \"product\".\n\n  Finally please be aware that you now have your hands on the source\n  code of the most sophisticated executable packer ever.\n  Let's join our forces to make it even better :-)\n\n  Share and enjoy,\n  Markus & Laszlo\n\n\nShort overview\n--------------\n\n  The UPX source code consists of two mainly independent parts:\n\n  1) The src/stub directory contains the decompression stubs that\n     will get added to each compressed executable.\n     The stubs are mainly written in assembler and get \"compiled\"\n     into ordinary C header files.\n\n  2) The src directory contains the actual packer sources. The stubs\n     are #included by the individual executable format handlers.\n\n\nTools needed to build/modify the UPX sources\n--------------------------------------------\n\n  - A C++ compiler that fully implements C++17: clang-5, gcc-8 or msvc-2019-16.11\n    (older or other compilers may work but are unsupported, use at your own risk)\n\n  - GNU make\n\n  - CMake 3.13 or better; see https://cmake.org/\n\n\nTo compile the packer sources\n-----------------------------\n\n  - just run \"make\" in the top-level source directory\n\n\nIf you want to modify the stub sources you'll also need\n-------------------------------------------------------\n\n  - Podman/Docker: see misc/podman/rebuild-stubs - this\n    is the preferred way of rebuilding the stubs\n\n  - otherwise you will need:\n    - a Linux host system with Perl, Python2 and some older compat-libs\n    - upx-stubtools - a number of cross-assemblers and cross-compilers.\n      Precompiled binaries for amd64-linux hosts are available from\n      https://github.com/upx/upx-stubtools/releases\n\n\nDeveloper quick start\n---------------------\n 1)  $ mkdir my-upx; cd my-upx  # new directory for safety and convenience\n 2)  $ git clone https://github.com/upx/upx.git\n 3)  $ git clone https://github.com/upx/upx-testsuite.git\n 4)  # Optional for re-building stubs:\n 4a)    $ pushd upx/src/stub  # my-upx/upx/src/stub\n 4b)    $ wget https://github.com/upx/upx-stubtools/releases/download/v20221212/bin-upx-20221212.tar.xz\n          # Extract to $HOME/bin/bin-upx or $HOME/local/bin/bin-upx.\n          # See directions in: https://github.com/upx/upx-stubtools\n 4c)    $ make clean; make  # verify that you can re-build stubs\n 4d)    $ popd  # my-upx\n 5)  $ cd upx  # my-upx/upx\n 6)  $ git submodule update --init  # compression algorithms, etc.\n        # DO NOT TOUCH vendor/...\n        # After a git merge/pull/etc, then use \"git status\"\n        # to check whether the vendor directory is clean;\n        # if not, then update via \"git submodule update\".\n        # If stuck, then reset via \"rm -rf vendor; git submodule update --init\".\n 7)  $ mkdir -p build/debug build/release\n 8)  $ pushd build/debug  # my-upx/upx/build/debug\n 9)  $ cmake ../..  # configure cmake\n10)  $ cmake --build . --verbose  # optional \"--verbose\"\n        # This relies on stub/*.h, which YOU must re-build if necessary.\n        # When in doubt, then use \"cd src/stub; make clean; make\".\n11)  $ popd  # my-upx/upx\n12)  $ cd src  # my-upx/upx/src\n12a)    On MacOS: install homebrew (https:://brew.sh), then \"brew install coreutils\"\n        and put <some_prefix>/opt/coreutils/libexec/gnubin into PATH so that\n        \"readlink -en\" and \"sha256sum -b\" work.\n13)  $ make run-testsuite 2>&1  |  tee testsuite.log\n\n\n\nMisc. notes\n-----------\n\n  As the docs say: UPX is a portable, extendable and endian neutral\n  program, so if you want to add some new stuff, try not to break these\n  nice properties.\n\n  - Use the types LE16, LE32, BE16 and BE32 for fields in file headers.\n  - Use [sg]et_[bl]e(16|32) for getting/setting values in the data\n    stream.\n  - Use gcc extensions and other compiler specific stuff only through\n    macros.\n\n\nSome conventions:\n-----------------\n\n  - follow our coding style\n  - indent level = 4\n  - expand all tabulators\n\n  - Use throwSomeException() functions instead of throw SomeException():\n    this makes the code shorter if used often.\n\n# vim:set ts=4 sw=4 et:\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}