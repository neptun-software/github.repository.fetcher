{
  "metadata": {
    "timestamp": 1736566382382,
    "page": 144,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sonic-pi-net/sonic-pi",
      "stars": 10933,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.2880859375,
          "content": "\n.history\n\n# Compiled things\n# --------------\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n!prebuilt/**/*.dll\n!prebuilt/**/*.so\n!prebuilt/**/*.dylib\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n\n# Compiled Erlang files\n*.beam\n\n# Library files\n*.lib\n\n# MSVC stuff\n*.Debug\n*.Release\ndebug/\nrelease/\nrelwithdebinfo/\n\n# Build directories\nbuild\nbuild32\n\n# Core dumps\n*.dump\n\n# Ignore vcpkg\napp/vcpkg\n\n# QT GUI\n# --------\n\n# Compiled Mac libraries\n*.bundle\n\n*.pro.user\n*.qmake.stash\n\n# Ignore install artifacts\n*.wixobj\n*.wixpdb\n*.msi\ninstall/windows/gui.wxs\ninstall/windows/etc.wxs\ninstall/windows/server.wxs\ninstall/windows/config.wxs\ninstall/windows/etc\ninstall/windows/app\n\n# Application binary & autogenerated files\napp/gui/qt/sonic-pi\napp/gui/qt/moc_mainwindow.cpp\napp/gui/qt/moc_sonicpiudpserver.cpp\napp/gui/qt/qrc_SonicPi.cpp\napp/gui/qt/utils/ruby_help.h\napp/gui/qt/utils/lang_list.h\napp/gui/qt/help/*.html\napp/gui/qt/help_files.qrc\napp/gui/qt/lang/*.qm\napp/gui/qt/qrc_help_files.cpp\napp/gui/qt/Sonic-Pi.app\napp/gui/qt/Sonic Pi.app\napp/gui/qt/build\napp/gui/qt/cmake-build-*\napp/gui/qt/.idea\napp/gui/qt/.vscode\n\napp/gui/qt/info\napp/gui/qt/qrc*.cpp\napp/gui/qt/resources\n\n# HTML GUI\n# --------\n\n# Javascript map files\napp/gui/html/resources/public/js/*.map\n\n# Dev Javascript\napp/gui/html/resources/public/js/generated\napp/gui/html/target\napp/gui/html/resources/public/js/cljs-main.js\n\n\n# QT makefile\n# --------\n\napp/gui/qt/Makefile\n\napp/gui/qt/moc_*\napp/gui/qt/qrc__*\n\n\n# Detritus\n# ---------\n\n*.DS_Store\n*.log\n*.swp\n*.tmp\n\\.#*\n.lein-plugins\n*~\n*.orig\n\n# Native\n\napp/server/native/\napp/server/rb-native/\n# Patterns like this catch both\n# app/server/vendor/ffi/ext/ and app/server/ruby/vendor/ffi/ext/\n# (the latter is found in the Mac OS X build)\n**/vendor/*/ext/**/Makefile\n**/vendor/ffi-*/ext/ffi_c/extconf.h\n**/vendor/ffi-*/ext/ffi_c/libffi*/\n**/vendor/**/build/\n\n## Book\n\nbook/\n\n## IntelliJ IDEA\n\n*.iml\n.idea\n\n## i18n auto-generated files\n\netc/doc/lang/sonic-pi-tutorial.pot\netc/doc/generated/\n\n\n# Clojure synths native dir\n\netc/synthdefs/designs/overtone/sonic-pi/target\netc/synthdefs/designs/overtone/sonic-pi/classes\netc/synthdefs/designs/overtone/sonic-pi/checkouts\netc/synthdefs/designs/overtone/sonic-pi/native\n\n# Visual Studio settings folder.\n.vs\napp/.cache/clangd/index\nsonic-pi.desktop\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.2763671875,
          "content": "language: ruby\n\nos: linux\nsudo: required\ndist: trusty\naddons:\n  apt:\n    update: true\n    sources:\n      - sourceline: 'ppa:latthias/qgis-travis-deps'\n    packages:\n    - ruby-all-dev\n    - rake\n    - cmake\n    - pkg-config\n    - g++\n    - libfftw3-dev\n    - libffi-dev\n    - libqt5scintilla2-dev\n    - qtbase5-dev\n    - qttools5-dev\n    - qttools5-dev-tools\n    - qt5-default\n    - libqt5opengl5-dev\n    - libqt5svg5-dev\n    - libboost-all-dev\ncompiler: gcc\n\ncache:\n - apt\n - ccache\n\nrvm:\n  - 2.4.10\n  - 2.5.8\n  - 2.6.6\n  - 2.7.1\n\nbefore_install:\n - wget http://aubio.org/pub/aubio-0.4.4.tar.bz2\n - tar xvjf aubio-0.4.4.tar.bz2\n - cd aubio-0.4.4\n - ./waf configure build\n - sudo ./waf install\n\nscript:\n - set -e\n# the | starts a multiline YAML entry\n - |\n    # this compiles the gems and runs the Sonic Pi test suite with the ruby installed through Travis's rvm\n    echo \"\"\n    echo \"***********************************\"\n    echo \"* Compiling the vendor/ ruby gems *\"\n    echo \"***********************************\"\n    cd $TRAVIS_BUILD_DIR/app/server/ruby/bin\n    ruby ./compile-extensions.rb\n    echo \"\"\n    echo \"***********************************\"\n    echo \"* Running the Sonic Pi test suite *\"\n    echo \"***********************************\"\n    cd $TRAVIS_BUILD_DIR/app/server/ruby/test\n    rake test\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "BUILD-LINUX.md",
          "type": "blob",
          "size": 5.775390625,
          "content": "# Building the Latest Sonic Pi on Linux\n\nHello there lovely Linux user - welcome to our build instructions.\n\n**Important: Sonic Pi for Linux isn't currently officially supported and we\n  can't guarantee that it will work on all variants of Linux on all\n  hardware. However, we provide these instructions in the hope that they\n  can help you get Sonic Pi running on your specific Linux\n  distribution.**\n\n\n### Installing vs Building\n\nThese instructions are for people wanting to build/compile their own\nversion of Sonic Pi. If you're just looking to install it it might be\nthe case that a kind maintainer has already done this work for you and\npackaged it up for your Linux distribution. If you just want to get\nstarted as quickly as possible it might be worth checking your\ndistribution's package system to see if a package is already\navailable. However, if you want to use the absolute latest development\nversion or get involved with modifying and changing the source code,\nyou'll need to build things yourself and hopefully this document will\nhelp you do just that.\n\nOK, so just to get you prepared, we're going to do a few things:\n\n1. Install the various dependencies that Sonic Pi needs both to be built\nand to run\n2. Prepare the build by running some command scripts\n3. Build Sonic Pi using `cmake`\n4. Start your new Sonic Pi using your newly built app\n\n\n### Notes\n\n* If you have any issues building Sonic Pi on Linux please open up an\n  issue on GitHub and we'll try our best to assist you:\n  https://github.com/sonic-pi-net/sonic-pi/issues\n* If you're running Raspberry Pi OS, please see our other help file\n  `BUILD-RASPBERRY_PI.md` for more specific instructions.\n* These build instructions assume you're running under a Debian-based\n  Linux. You may need to modify the package names and other aspects to\n  match your specific Linux distribution.\n\n## 1. Installing Dependencies\n\nIn order to build Sonic Pi's various components, we need to install a\nfew dependencies:\n\n* Build Tools (c++ compiler, cmake, git.)\n* Qt + Dev tools (6+)\n* Pipewire\n* Ruby + Dev tools (2.5+)\n* Elixir + Dev tools (12.0+)\n* SuperCollider + SC3 plugins\n\nNote: please make sure that you have gcc12 installed. Compiling vcpkg dependencies does not work with gcc13 currently\n\n\n### 1.1 Debian\nThe following is a rough list of Debian packages that are needed that can serve as a starting position:\n```bash\nsudo apt-get install -y build-essential git libssl-dev ruby-dev elixir erlang-dev erlang-xmerl qt6-tools-dev qt6-tools-dev-tools libqt6svg6-dev libqt6opengl6-dev supercollider-server sc3-plugins-server alsa-utils  libasound2-dev cmake ninja-build pipewire-jack libspa-0.2-jack qt6-wayland libwayland-dev libxkbcommon-dev libegl1-mesa-dev libx11-dev libxft-dev libxext-dev qpwgraph compton\n```\n\n*Notes:*\n\n1. Check the version of `Qt` after package installation.\n\n* Check your current Qt version with `qmake --version`.\n*  If it is too old (see dependency list above) you should find a way to update `Qt` before going to the build step.\n\n3. The main repositories may not have a recent enough version of\nElixir. If this is the case, you can install it via **one** of the\nfollowing methods:\n\n* Run `app/pi-install-elixir.sh` to install it using [ASDF](https://github.com/asdf-vm/asdf)\n* Get newer packaged versions of Elixir from [Erlang Solutions' repository](https://www.erlang-solutions.com/downloads/) (though installing packages from outside your distros main repository is at your own risk!)\n* Build and install it yourself\n\nThere is an Audinux Copr [repository]()https://copr.fedorainfracloud.org/coprs/ycollet/audinux/package/sonic-pi/) with Sonic-Pi.\n\n## 2. Preparing the Build\n\nOnce we have installed all the dependencies, we're almost ready to build\nSonic Pi. However, we must first grab a copy of Sonic Pi's source code.\n\n_Note: if you would like to either try the unsupported development version, likely because you want to help with development\nthen pull the latest from the `dev` branch. Otherwise stick to the `stable` branch or one of the tags._\n\nThe easiest way of getting this is likely to be cloning from GitHub\ninto a folder on your hard drive such as `~/Development/sonic-pi`:\n\n```\ngit clone https://github.com/sonic-pi-net/sonic-pi.git ~/Development/sonic-pi\n```\n\nIf you don't have Git installed you should be able to download a `.zip`\nfile of the latest commit or specific release (v3.3+) you'd like to\nbuild:\n\nhttps://github.com/sonic-pi-net/sonic-pi/archive/main.zip\n\nFrom now on these instructions will assume you downloaded the source\ninto `~/Development/sonic-pi`. If you used a different location be sure to\nchange any future references to `~/Development/sonic-pi` to your chosen location.\n\n\n## 3. Running the Build\n\nNow we're ready to build everything. This is achieved with one single command\nwhich will:\n\n1. Run the prebuild script which builds and sets up a lot of the\n   dependencies.\n2. Run the config script to set up the build system.\n3. Run cmake to build the final entry-point binary.\n\n\n### 3.1 Move to the app directory\n\nFirstly, we need to change to the `app` directory at the root of the Sonic Pi repository:\n\n```\ncd ~/Development/sonic-pi/app\n```\n\n### 3.2 Build All\n\nNext we run the build-all script for Linux:\n\n```\n./linux-build-all.sh\n```\n\n\n## 4. Start Sonic Pi\n\nFinally, you can run your newly compiled `Sonic Pi` app within the `build`\ndirectly either by double clicking it in your file manager or via the terminal\n\n```\n./sonic-pi\n```\n\n\n## Good Luck!\n\nGood luck and please share your new live coding adventure with us over on:\n\nhttps://in-thread.sonic-pi.net\n\n\n#### Anaconda users beware!\n\nAnaconda (a popular data science toolkit) installs a lot of extra programs, which conflicts with the build process mentioned above.\n\nIf you run:\n\n```\nconda deactivate\n```\n\nBefore the build steps that should stop things breaking. Once Sonic Pi is built, you can use `conda` as normal after that.\n"
        },
        {
          "name": "BUILD-MAC.md",
          "type": "blob",
          "size": 4.50390625,
          "content": "# Building the Latest Sonic Pi on macOS\n\nHello there lovely macOS user - welcome to our build instructions.\n\n\n### Installing vs Building\n\nThese instructions are for people wanting to build/compile their own\nversion of Sonic Pi. If you're just looking to install it, we've already\ndone all of this work for you and you can grab the latest signed\npre-built version of the app here:\n\nhttps://github.com/sonic-pi-net/sonic-pi/releases\n\nIf you're definitely sure you want to build your own release, then we\nreally hope that these instructions help. Please let us know if you have\nany issues following them so we may continuously improve things.\n\nhttps://in-thread.sonic-pi.net\n\nOK, so just to get you prepared, we're going to do a few things:\n\n1. Install the various dependencies that Sonic Pi needs both to be built\nand to run\n2. Build Sonic Pi using a command line script\n3. Start your new Sonic Pi using your newly built app\n\n\n### Notes\n\n* If you have any issues building Sonic Pi on macOS please open up an\n  issue on GitHub and we'll try our best to assist you:\n  https://github.com/sonic-pi-net/sonic-pi/issues\n* These build instructions assume you're running under macOS 12+. If\n  you're using an older version of macOS some steps may need\n  modification.\n\n\n## 1. Installing Dependencies\n\nIn order to build Sonic Pi's various components, we need to install a\nfew dependencies:\n\n1. Xcode (12.1+) and command line tools\n2. Homebrew\n3. All other dependencies - Qt6 (6.2+), CMake (3.18+), Elixir(1.13+), pkg-config\n\n\n### 1.1 Install Xcode\n\nFirstly open the App Store and install the latest Xcode (12.1 at the\ntime of writing). Also install the command line tools which will give\nyou access to a compiler necessary to build the GUI and other\ncomponents.\n\n\n### 1.2 Install Homebrew\n\nInstall [Homebrew](https://brew.sh) by running the following within a terminal:\n\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\n_Note that running arbitrary scripts from the internet via `curl` is\nusually a bad idea from a security perspective. Whilst, Homebrew is a\ntrusted system used by many developers globally you're always\nrecommended to read any scripts before executing them to reassure\nyourself they aren't doing anything malicious._\n\n\n### 1.3 Install all other dependencies\n\nOnce you have Homebrew installed, pulling in the rest of the\ndependencies is a couple of lines to execute within a terminal:\n\n```\nbrew install qt cmake elixir pkg-config\n\n```\n\n\n## 2. Preparing the Build\n\nOnce we have installed all the dependencies, we're almost ready to build\nSonic Pi. However, we must first grab a copy of Sonic Pi's source code.\n\nThe easiest way of getting this is likely to be cloning from GitHub\ninto a folder on your hard drive such as `~/Development/sonic-pi`:\n\n```\ngit clone https://github.com/sonic-pi-net/sonic-pi.git ~/Development/sonic-pi\n```\n\nIf you don't have Git installed you should be able to download a `.zip`\nfile of the latest commit or specific release (v3.3+) you'd like to\nbuild:\n\nhttps://github.com/sonic-pi-net/sonic-pi/archive/main.zip\n\nFrom now on these instructions will assume you downloaded the source\ninto `~/Development/sonic-pi`. If you used a different location be sure to\nchange any future references to `~/Development/sonic-pi` to your chosen location.\n\n\n## 3. Running the Build\n\nNow we're ready to build everything. This is achieved with one single command\nwhich will:\n\n1. Run the prebuild script which builds and sets up a lot of the\n   dependencies.\n2. Run the config script to set up the build system.\n3. Run cmake to build the final entry-point binary.\n\n\n### 3.1 Move to the app directory\n\nFirstly, we need to change to the `app` directory at the root of the Sonic Pi repository:\n\n```\ncd ~/Development/sonic-pi/app\n```\n\n\n### 3.2 Build All\n\nNext we run the build-all script for macOS:\n\n```\n./mac-build-all.sh\n```\n\n\n## 4. Start Sonic Pi\n\nFinally, you can run your newly compiled `Sonic Pi` app within the new `build`\ndirectly either by double clicking it in the Finder or via the terminal:\n\n```\n./build/Sonic\\ Pi.app/Contents/MacOS/Sonic\\ Pi\n\n```\n\n\n## Good Luck!\n\nGood luck and please share your new live coding adventure with us over on:\n\nhttps://in-thread.sonic-pi.net\n\n\n#### Anaconda users beware!\n\nAnaconda (a popular data science toolkit) installs a lot of extra programs, including one called `macdeployqt` which conflicts with the build process mentioned above.\n\nIf you run:\n\n```\nconda deactivate\n```\n\nBefore the build steps that should stop things breaking. Once Sonic Pi is built, you can use `conda` as normal after that.\n"
        },
        {
          "name": "BUILD-RASPBERRY-PI.md",
          "type": "blob",
          "size": 3.0791015625,
          "content": "# Building the Latest Sonic Pi on Raspberry Pi\n\nHello there lovely Raspberry Pi user - welcome to our build instructions.\n\n\n### TLDR\n\nIf you're already familiar with the terminal and running shell scripts,\netc., you can fetch, build and start Sonic Pi with the following:\n\n```\ngit clone https://github.com/sonic-pi-net/sonic-pi.git\ncd sonic-pi/app\n./pi-setup.sh\n./pi-build-all.sh\n./build/gui/qt/sonic-pi\n\n```\n\nNote this requires at least the 64bit version of RaspberryPi Bookworm OS - released on October 10th 2023. The built application will run on P3, Pi4, P400 or Pi5 models.\n\n### Installing vs Building\n\nThese instructions are for people wanting to build/compile their own\nversion of Sonic Pi. If you're just looking to install and run it you\ncan download our latest binary deb from the Sonic Pi website here:\nhttps://sonic-pi.net/#rp\n\nHowever, if you want to use the absolute latest development version or\nget involved with modifying and changing the source code, you'll need to\nbuild things yourself and hopefully this document will help you do just\nthat.\n\nOK, so just to get you prepared, we're going to do a few things:\n\n1. Clone Sonic Pi's source code using git.\n2. Fetch all the development dependencies\n3. Initiate the build by using a shell script.\n4. Start your new Sonic Pi app.\n\nAll of these steps will require the terminal which can be found by\nclicking on the Raspberry Pi logo and then Accessories -> Terminal.\n\n\n### Notes\n\n* If you have any issues building Sonic Pi on Raspberry Pi OS please\n  open up an issue on GitHub and we'll try our best to assist you:\n  https://github.com/sonic-pi-net/sonic-pi/issues\n* These build instructions assume you're running the latest 64bit version\n  of Raspberry Pi OS based on Bookwork released in October 2023. You may therefore need to update your distribution before continuing.\n\n\n## 1. Get the Sonic Pi Source Code\n\nThe first thing we need to do is to grab a copy of Sonic Pi's source code.\n\nThe easiest way of getting this is to clone from GitHub\ninto a local folder such as `~/Development/sonic-pi`:\n\n```\ngit clone https://github.com/sonic-pi-net/sonic-pi.git ~/Development/sonic-pi\n```\n\nBy default this will check out the `dev` branch which contains all the\nmost recent development work. If you'd like the latest stable release\nyou'll need to checkout the `stable` branch with `cd\n~/Development/sonic-pi && git checkout stable`\n\nFrom now on these instructions will assume you're in the `sonic-pi`\ndirectory. For example, if you cloned into `~/Development/sonic-pi` you\ncan change into this directory with:\n\n```\ncd ~/Development/sonic-pi\n```\n\n## 2. Fetch the Development Dependencies\n\nNow we're ready to fetch all the development dependencies.\n\n```\n./app/pi-setup.sh\n```\n\n## 3. Running the Build\nTo start the build process run the following command (which will likely take some time - approx 1hr on a Pi400):\n\n```\n./app/pi-build-all.sh\n```\n\n## 4. Start Sonic Pi\n\nFinally, you can run your newly compiled Sonic Pi app with the following command:\n\n```\n./app/build/gui/qt/sonic-pi\n```\n\n\nGood luck and please share your new live coding adventure with us over on:\n\nhttps://in-thread.sonic-pi.net\n\n"
        },
        {
          "name": "BUILD-WINDOWS.md",
          "type": "blob",
          "size": 7.6005859375,
          "content": "# Building the Latest Sonic Pi on Windows\n\nHello there lovely Windows user - welcome to our build\ninstructions.\n\n\n### Installing vs Building\n\nThese instructions are for people wanting to build/compile\ntheir own version of Sonic Pi. If you're just looking to install it,\nwe've already done all of this work for you and you can grab an\ninstaller for the latest release here:\n\nhttps://github.com/sonic-pi-net/sonic-pi/releases\n\nIf you're definitely sure you want to build your own release, then we\nreally hope that these instructions help.\n\nOK, so just to get you prepared, we're going to do a few things:\n\n1. Install the various dependencies that Sonic Pi needs both to be built\nand to run\n2. Build Sonic Pi using a command line script\n3. Start your new Sonic Pi using your newly built `.exe` file.\n\n\n### Notes\n\n* If you have any issues building Sonic Pi on Windows please open up an\n  issue on GitHub and we'll try our best to assist you:\n  https://github.com/sonic-pi-net/sonic-pi/issues\n* The current build on Windows is assumed to be a 64 bit build done with\n  Visual Studio 2019 (Community edition is fine).\n* If you're attempting to build 32 bit binaries, there are equivalent\n  32-bit build scripts, but these are currently largely untested.\n\n\n## 1. Installing Dependencies\n\nIn order to build Sonic Pi's various components, we need to install a few\ndependencies:\n\n1. Visual Studio 2022\n2. Qt (6.7+)\n3. CMake (3.29+)\n4. Ruby (3.3.1+)\n5. Elixir (1.16+)\n\nLet's look at each in turn.\n\n\n### 1.1 Install - Visual Studio 2022\n\nIf you don't already have VS installed, head over to the downloads page\nand grab a copy of the *free* Community edition:\n\nhttps://visualstudio.microsoft.com/downloads/\n\nNote that you need to enable the \"Desktop development with C++\" workload. See: https://learn.microsoft.com/en-us/cpp/build/vscpp-step-0-installation?view=msvc-170#step-4---choose-workloads\n\n\n### 1.2 Install - Qt\n\nInstall the latest version of Qt6 (note that Qt5 may work on Windows but isn't supported) - ensure\nyou pick 64 bit options for msvc:\n\nhttps://download.qt.io/official_releases/qt/6.7/6.7.0/single/qt-everywhere-src-6.7.0.zip\n\nWhen selecting Qt components you need:\n\n* MSVC 2019 64-bit\n* Additional Libraries\n    - Qt Positioning\n    - Qt WebChannel\n    - Qt WebEngine\n    - Qt WebSockets\n\nIf you didn't select these components when you first installed Qt, you can\nalways open MaintenanceTool.exe (found within the Qt directory) which will\nenable you to update and select/deselect specific components to modify the\nexisting installation.\n\nYou now need to setup the environment variable `QT_INSTALL_LOCATION` to\npoint to Qt's new install location.\n\nA simple way of doing this is to use the Rapid Environment Editor to\nset up these variables permanently (https://www.rapidee.com/en/about).\n\nAlternatively, the `setx` command can make global variables. (Note that\nafter using `setx` the command line needs to be restarted for it to take\neffect).\n\nFor example, if you installed Qt to `C:\\Qt\\Qt6.7.0` then you could run:\n\n```\nsetx QT_INSTALL_LOCATION C:\\Qt\\6.7.0\\msvc2019_64\n```\n\n(followed by restarting your command prompt)\n\n\n### 1.3 Install - CMake\n\nWe use a build system called CMake to automatically build both Sonic\nPi's GUI and many of its dependencies.\n\nInstall the latest CMake from here: http://www.cmake.org/download\n\n\n### 1.4 Install - Ruby\n\nRuby is needed both for a number of the build steps and as the main\nruntime for the language server. We need to install both it and some\nadditional libraries.\n\nFirstly, install the latest version of Ruby (3.3.1 - 64 bit with devkit) from:\n\nhttps://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-3.3.1-1/rubyinstaller-devkit-3.3.1-1-x64.exe\n\nOnce you have installed Ruby, you need to grab some additional\nlibraries. We can do this from the command prompt with the following:\n\n```\ngem install rugged\n```\n\nThis uses the Ruby library management tool `gem` to install rugged which is used to\nstore the code diffs in a local Git repository.\n\nNote - with Ruby 3.3.1 you will need to modify line 321 of `lib\\ruby\\3.3.0\\win32\\registry.rb` from:\n\n```\ndata = \"\\0\".force_encoding('ASCII-8BIT') * unpackdw(size)\n```\nto\n```\ndata = \"\\0\".b * unpackdw(size)\n```\n\n### 1.5 Install Elixir\n\nLastly we just need to head over to the Elixir website and download and\nrun the installer:\n\nhttps://elixir-lang.org/install.html#windows\n\n\n## 2. Preparing the Build\n\nOnce we have installed all the dependencies, we're now ready to build\nSonic Pi. We need to:\n\n1. Get a copy of Sonic Pi's source code\n2. Link the version of Ruby you installed into the source code.\n\n\n### 2.1 Fetch Source\n\nBefore we can build Sonic Pi we must first get a copy of the source\ncode. The easiest way of getting this is likely to be cloning from GitHub\ninto a folder on your hard drive such as `C:\\dev\\sonic-pi`:\n\n```\ngit clone https://github.com/sonic-pi-net/sonic-pi.git C:\\dev\\sonic-pi\n```\n\nIf you don't have Git installed you should be able to download a `.zip`\nfile of the latest commit or specific release you'd like to build:\n\nhttps://github.com/sonic-pi-net/sonic-pi/archive/main.zip\n\nFrom now on these instructions will assume you downloaded the source\ninto `C:\\dev\\sonic-pi`. If you used a different location be sure to\nchange any future references to `C:\\dev\\sonic-pi` to your chosen location.\n\n\n### 2.2 Link Ruby\n\nNext, we need to point your build of Sonic Pi to your local Ruby\ninstallation. We can do this by creating a folder link - similar to a\nsymbolic link on Linux and macOS. First, find out where you installed\nRuby. For example, this might be `C:\\Ruby33-x64`.\n\nFinally, open a console as administrator (this is necessary for making the\nlink). Then `cd` into the `sonic-pi\\app\\server\\native` directory within\nyour copy of Sonic Pi's source. For example, if you put Sonic Pi within\n`C:\\dev` and installed Ruby to `C:\\Ruby33-x64` then you'd do the\nfollowing:\n\n```\ncd C:\\dev\\sonic-pi\\app\\server\\native\nmklink /d ruby C:\\Ruby33-x64\n```\n\n\n## 3. Running the Build\n\nNow we're ready to build everything. This is achieved with one single command\nwhich will:\n\n1. Run the prebuild script which builds and sets up a lot of the\n   dependencies.\n2. Run the config script to set up the build system.\n3. Run cmake to build the final entry-point binary.\n\n\n### 3.1 Move to the app directory\n\nFirstly, we need to change to the `app` directory at the root of the Sonic Pi repository:\n\n```\ncd C:\\dev\\sonic-pi\\app\n```\n\n\n### 3.2 Build All\n\nNext we run the build-all script for Windows:\n\n```\nwin-build-all.bat\n```\n\n\n## 4. Start Sonic Pi\n\nFinally, you can run your newly compiled Sonic Pi from the `build` directory:\n\n```\ngui\\qt\\Release\\sonic-pi.exe\n```\n\nOr from anywhere using the full path:\n\n```\nC:\\dev\\sonic-pi\\app\\build\\gui\\qt\\Release\\sonic-pi.exe\n```\n\n\n## Good Luck!\n\nGood luck and please share your new live coding adventure with us over on:\n\nhttps://in-thread.sonic-pi.net\n\n\n## Tips\n- Error logs are written to `%USERPROFILE%\\.sonic-pi\\logs`, and are useful\n  to diagnose any startup problems.\n- If a rebuild errors at the final stage of copying files, or you are\n  otherwise having trouble starting Sonic Pi, there is\n  win-killprocess.bat to remove Sonic Pi from memory.  This will also\n  kill SuperCollider if it has been left running.\n- 32bit and 64bit don't mix. Build the one you want in a clean tree.\n  Make sure you also install all the right 32/64 bit components to match\n  your build. 64bit is recommended on modern machines.\n- `cd %QT_INSTALL_LOCATION%` will take you to the directory you have set\n  for that environment variable - a good way to check you have set it up\n  correctly\n- If you're already familiar with Visual Studio you should be able to\n  take the existing solution file from within the `build` directory\n  and build things with that.\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 118.982421875,
          "content": "# History\n- [v5.0.0 'Live Loop'](#v5.0.0), To be released\n- [v4.5.1 '8oh8'](#v4.5.1), 26th April, 2024\n- [v4.5.0 '808'](#v4.5.0), 18th Oct, 2023\n- [v4.4.0 'Sawtooth'](#v4.4.0), 28th June, 2023\n- [v4.3.0 'Pathfinder'](#v4.3.0), 30th Sept, 2022\n- [v4.2.0 'Batch'](#v4.2.0), 14th Sept, 2022\n- [v4.1.0 'Phase'](#v4.1.0), 30th August 2022\n- [v4.0.3 'Dovetail'](#v4.0.3), 18th July 2022\n- [v4.0.2 'Relink'](#v4.0.2), 15th July 2022\n- [v4.0.1 'Verknüpfen'](#v4.0.1), 12th July 2022\n- [v4.0.0 'Link'](#v4.0.0), 6th July, 2022\n- [v3.3.1 'Beamer'](#v3.3.1), 1st Feb, 2021\n- [v3.3 'Beam'](#v3.3), 28th Jan, 2021\n- [v3.2.2 'Tau3'](#v3.2.2), 5th April, 2020\n- [v3.2.1 'Take Tau'](#v3.2.1), 3rd April, 2020\n- [v3.2.0 'Tau'](#v3.2.0), 28th Feb, 2020\n- [v3.1.0 'Sauna'](#v3.1.0), 23rd Jan, 2018\n- [v3.0.1 'IOIO'](#v3.0.1), 27th July, 2017\n- [v3.0 'IO'](#v3.0), 18th July, 2017\n- [v2.11.1 'Hack'](#v2.11.1), 16th Dec, 2016\n- [v2.11 'Time Warp'](#v2.11), 3rd Nov, 2016\n- [v2.10 'Cowbell'](#v2.10), 15th April, 2016\n- [v2.9 'Venster'](#v2.9), 31st Dec, 2015\n- [v2.8 'Karlsruhe'](#v2.8), 20th Nov, 2015\n- [v2.7 'Rerezzed'](#v2.7), 10th Sept, 2015\n- [v2.6 'Algorave'](#v2.6), 30th July, 2015\n- [v2.5 'Craft'](#v2.5), 13th April, 2015\n- [v2.4 'Defrost'](#v2.4), 11th Feb, 2015\n- [v2.3 'Bitcrush'](#v2.3), 28th Jan, 2015\n- [v2.2 'Slicer'](#v2.2), 18th Dec, 2014\n- [v2.1.1 'Firewall'](#v2.1.1), 25th Nov, 2014\n- [v2.1 'Core'](#v2.1), 21st Nov, 2014\n- [v2.0.1](#v2.0.1), 9th Sept, 2014\n- [v2.0 'Phoenix'](#v2.0), 2nd Sept, 2014\n\n<a name=\"v5.0.0\"></a>\n\n## version 5 'Live Loop'\n\nThis new release of Sonic Pi introduces a breaking change in the interaction between `live_loop`s and `with_fx` that significantly improve using them together in a live performance. There has also been a significant overhaul of the shortcuts in the GUI to allow you to change them. You can now choose between the default (called Emacs Live), Windows or Mac modes as well as customise them yourself. There's also a wonderful new function for working with tuplets designed by Dago Sondervan.\n\nBefore we get to the full breakdown list of all the changes, let's take a moment to explore the breaking change with `live_loop` and `with_f`:\n\n### Live Loop Now Behaves like Live Audio\n\nConsider this code:\n\n```ruby\nwith_fx :reverb do\n  live_audio :moog\nend\n```\n\nWhen you run this code, the audio from the sound card is played through reverb. Now, what if you're in the middle of a performance and wanted to change it to distortion? Easy, you just change the code to this and hit run again:\n\n```ruby\nwith_fx :distortion do\n  live_audio :moog\nend\n```\n\nThe live_audio magically moves out of the Reverb context and into the Distortion. There's no need to stop and start the code - it all happens live and is completely seemless. As an added bonus, behind the scenes the Reverb figures that the live_audio has moved on and automatically garbage collects itself freeing the resources. The crowd dances to the distorted Moog synth.\n\nNow consider this:\n\n```ruby\nwith_fx :reverb do\n  live_loop :foo do\n    play 70\n    sleep 0.5\n  end\nend\n```\n\nAs with the live_audio - this works as expected, the sound from the live loop is played through Reverb. However, if you changed the reverb to Distortion and hit run again, it did not change the FX over to the Distortion. The live loop wass stuck in the Reverb FX it was originally created in. Forever. This wasn't ideal and confused a lot of people.\n\nIt unfortunately stayed like this for many years because it was an incredibly hard problem to fix due to the architecture of Sonic Pi's internals. It required deep changes to the thread management system, the live loop implementation, and with_fx and its auto FX garbage collection system. Each of these is tricky enough to work on independently - but the intersection of them all is a thing of nightmares.\n\nWell, now more because the work is done and this behaves like live loop. Swap the code to this, hit the run whilst it's still playing and you'll hear the `:foo` `live_loop` played through distortion:\n\n```ruby\nwith_fx :distortion do\n  live_loop :foo do\n    play 70\n    sleep 0.5\n  end\nend\n```\n\nYou can even change the FX to one with a control parameter and it will still just work:\n\n```ruby\nwith_fx :lpf do |fx|\n  live_loop :foo do\n     control fx, cutoff: rrand(70, 120)\n     synth :square, note: :e3, release: 0.2\n     sleep 0.25\n  end\nend\n```\n\nWhen you're working with fast spinning `live_loop`s it's now generally better to put your FX outside the `live_loop` as it's much more efficient. You just have one FX running the whole time, rather than creating a new FX every time the loop spins round.\n\n### GUI\n* Complete overhaul of the shortcut system.\n\n### Improvements\n* `live_loop` now moves to new FX contexts similar to `live_audio`. You can therefore now use `with_fx` both within and outside of `live_loop` and be able to change things live in a performance.\n* Where supported, you can now indepedently specify different input and output sound cards in the `audio-settings.toml` config file. This is done with the new options `input_sound_card_name = \"\"` and `output_sound_card_name = \"\"`. Note, you still have to ensure that the sample rate is the same for input and output.\n* Incoming OSC bundles are now supported. Timestamps are ignored (if OSC scheduling is a commonly requested feature this could be added in the future). This increases compatability with software which exlusively sends OSC in budle format such as TouchDesigner.\n\n### New Fns\n* `tuplets` - Run block with tuplet timing and optional swing. Lets you supply a nested list such as `[70, 72, [73, 74], 76]` and a block. It will run the block passing in each element of the list and the sleep time between block calls will be automatically calculated depending on the length of the tuplet. Non-nested values e.g. `70`, `72` and `76` will take one beat and nested values `73`, and `74` will change the time density depending on the length of the nested list. So, a nested `[73, 74]` will be  with density 2 (all time values are halved) and a nested `[73, 74, 75]` will be with a density of 3 which creates triplets. There's also options to add swing and set the duration of one tuplet beat (defaults to 1).\n\n\n### Samples\n* Two new ride cymbals `:ride_tri` and `ride_via`.\n* New hi-hat `:hat_len`.\n\n\n### Translations\n\n* Improvements to the French, German, Korean, Polish, Portuguese, Portguguese (Brazil), Russian and Turkish, translations.\n\n\n<a name=\"v4.5.1\"></a>\n\n## Version 4.5.1 '8oh8'\n\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v4.5.1):\n\nThis is a maintanence and bugfix release which includes updates to all the major internal dependencies. The main goal of this\nrelease is to fix boot issues on Windows with specific locale settings.\n\n### Translations\n\n- Improvements to the Chinese, Dutch, German, Indonesian, Italian, Japanese and Russian translations.\n\n### Bugfixes\n\n- Only remove one level of comments when uncommenting\n\n<a name=\"v4.5.0\"></a>\n\n## Version 4.5.0 '808'\n\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v4.5.0):\n\nThis release comes packed with a number of exciting new synths for you to play with. We have a new hard-hitting kick drum `:gabberkick` for that gabber sound and a new vintage electric piano `:rhodey` synth. There are also 16 new percussive synths inspired by the infamous TR-808 drum synthesiser. All the synths come with many opts for you to play with to manipulate and change the default timbres.\n\nThere are also a number of minor improvements and bug fixes as detailed below.\n\nHave fun and get your live coded 808 on!\n\n### Synths\n\n- New synth: `:rhodey` - The sound of an electric piano from the 60s and 70s, producing a characteristic metallic  sound for notes below `:g2`. Adapted for Sonic Pi from [SuperCollider Code](https://sccode.org/1-522).\n- New synth `:gabberkick` - An aggressive Gabber synth sound adapted for Sonic Pi from [SuperCollider Code](https://sccode.org/1-57r)\n- 16 new 808 inspired synths based on [Yoshinosuke Horiuchi's](https://www.patreon.com/4H/posts): `:sc808_bassdrum`, `:sc808_snare`, `:sc808_clap`, `:sc808_tomlo`, `:sc808_tommid`, `:sc808_tomhi`, `:sc808_congalo`, `:sc808_congamid`, `:sc808_congahi`, `:sc808_rimshot`, `:sc808_claves`, `:sc808_maracas`, `:sc808_cowbell`, `:sc808_closed_hihat`, `:sc808_open_hihat`, `:sc808_cymbal`,\n\n### Improvements\n\n- Improve error message for invalid `midi_to_hz` args\n\n### Translations\n\n- Improvements to the Chinese, Danish, Portuguese, and Spanish translations.\n- Add native language name for Arabic\n\n### Bugfixes\n\n- Fixed a regression in the error reporting - \"did you mean\" suggestions now work again.\n- Fix system language detection when the language is generic English\n\n## Version 4.4.0 'Sawtooth'\n\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v4.4.0):\n\nThis release comes chock-full of new samples to play with. Firstly we have 5 new samples donated to Sonic Pi by the wonderful electric artist [Arovane](https://arovane.bandcamp.com). These are a selection of glitchy beats recorded at 130 BPM. To best use these either `use_bpm 130` or use the `beat_stretch` opt to make them fit seamlessly into your current BPM. They're also wonderful to use with the `onset:` option for extracting individual sounds to use on their own. Thank-you so much to Arovane for letting us play with these amazing new sounds.\n\nContinuing on the sample theme, there are also 20 new hi-hat samples. These all have a `:hat_` prefix and there's a wide variety of sounds to play with ranging from acoustic to electro to metal. They're perfect for adding a sense of drive or groove to your tracks.\n\nThis version of Sonic Pi is also the first to support a fully native build for Apple Macs running Apple Silicon CPUs such as the M1 and M2. This means that Sonic Pi can now run on modern Mac computers without needing Rosetta to run things under emulation.\n\n### Samples\n\n- New looping samples contributed by the wonderful electronic artist [Arovane](https://arovane.bandcamp.com). The new samples are: `:arovane_beat_a`, `:arovane_beat_b`, `:arovane_beat_c`, `:arovane_beat_d`, `:arovane_beat_e`.\n- 20 new hi-hat samples: `:hat_snap`, `:hat_zap`, `:hat_cats`, `:hat_tap`, `:hat_bdu`, `:hat_psych`, `:hat_zild`, `:hat_zan`, `:hat_zgump`, `:hat_noiz`, `:hat_sci`, `:hat_star`, `:hat_gem`, `:hat_raw`, `:hat_yosh`, `:hat_mess`, `:hat_cab`, `:hat_gnu`, `:hat_hier`, `:hat_metal`.\n\n### GUI\n\n- Improve text formatting of the information window that pops up with a boot error.\n\n### Documentation\n\n- Improvements to section 8.2 of the tutorial where the code has been updated to better match the behaviour of `play_pattern_timed`.\n- Improved `play_pattern_timed` function documentation.\n\n### Translations\n\n- Improvements to the Catalan, Chinese, Croatian, French, Georgian, Hebrew, Indonesian, Latvian, German, Portuguese, Russian, Slovak, Spanish, Swahili and Turkish translations.\n\n### Bugfixes\n\n- Syntax and runtime errors are now correctly coloured once again - pink for runtime and blue for syntax.\n- Fix `==` operator when comparing maps with `nil`. Now returns `false` as expected.\n\n<a name=\"v4.3.0\"></a>\n\n## Version 4.3.0 'Pathfinder'\n\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v4.3.0):\n\nThis is another maintenance and bugfix release - primarily addressing a critical issue with configuring external sound cards for audio input. This was accidentally introduced in v4.2. An issue with the auto-indentation preference in the GUI has also been addressed.\n\nThe GUI is now restricted to having one instance open at any one time. Having multiple instances of Sonic Pi running simultaneously can cause conflicts. This is now no longer possible, which should reduce any issues users may have observed when accidentally opening the app multiple times in quick succession. Now, only the first instance will open and all the subsequent others will exit before starting if they detect another instance already running.\n\n### GUI\n\n- Restrict running instances to only allow one instance of Sonic Pi to be running at any one time on a given machine.\n\n### Translations\n\n- Improvements to the Dutch, Estonian, Japanese and Polish translations.\n\n### Bugfixes\n\n- The behaviour of external audio card configuration should now be as it was in v4.1.\n- The auto-indent preference in the GUI now works as expected. Unchecking will stop the GUI from automatically reformatting the code.\n\n<a name=\"v4.2.0\"></a>\n\n## Version 4.2.0 'Batch'\n\n14th September 2022\n\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v4.2.0):\n\nThe main purpose of this release is to address a booting issue discovered on a school Windows cluster with common security restrictions. This issue was reported by Adam Cooper from Moor Park High School & Sixth Form in the UK. Adam was wonderfully helpful in finding the specific issue and testing potential solutions. Thanks Adam!\n\nIf you happen to have had any trouble running v4 of Sonic Pi on your school clusters, please give this release a go! (Note, this issue didn't affect v3 of Sonic Pi).\n\nIn addition, there have been some translation improvements, Global Time Warp now has a greater range and a couple of `time_warp` related bugs were found and dealt with. Have fun!\n\n### GUI\n\n- Change Global Time Warp range from +-250 to -250 -> 999. This lets users access the full phase down to a BPM of 48.\n\n### Improvements\n\n- Booting process on Windows has been modified to enable it to run when executing in an environment which restricts access to CMD (which prevents terminal usage and running .bat files). This is typical in schools.\n- Sonic Pi stores all its history, configuration and logs in a folder called `.sonic-pi` which is typically placed in the user's home directory. If the user happens to not have permission to write to their home directory, Sonic Pi now raises a descriptive error on boot and explains that the fix is to set an environment variable called `SONIC_PI_HOME` to point to a directory the user does have permission to write to.\n\n### Translations\n\n- Improvements to the Dutch, Hungarian and Indonesian translations.\n\n### Bugfixes\n\n- Teach timing safety system that `time_warp` doesn't sleep (even if it contains calls to `sleep` internally). This now means that wrapping all code within a `live_loop` with `time_warp` no longer causes the thread to spin out of control. It instead reports that the live loop did not sleep as expected.\n- Throw error when attempting to call `sync` within a `time_warp`. This is because time warps are effectively timeless and `sync` asks the running thread to wait for an unknown period (until a matching event appears). Attempting to wait within a timeless context is clearly nonsensical!\n\n<a name=\"v4.1.0\"></a>\n\n## Version 4.1.0 'Phase'\n\n30th August 2022\n\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v4.1.0):\n\nThe release of v4 of Sonic Pi introduced the ability to change the tempo of live running code to an external beat. This is possible either by setting the tempo manually to a specific BPM (Beats Per Minute) or by using the Tap Tempo button to tap along to an external rhythm. However, even when you do this, it's quite likely that things still don't sound quite right as there's a good chance that the two rhythms are out of phase despite being at the same tempo. This release introduces a new feature - Global Time Warp which lets you shift the phase of Sonic Pi's timing back or forward up to 250 milliseconds to let you align it with an external rhythm.\n\nTaking a quick step back, what does it mean for two rhythms to be out of phase and why is it a problem? Imagine you had two metronomes ticking away. If one has a higher tempo than the other, then one will be ticking faster than the other. This can be fixed by setting the tempos to be the same. However, unless they were both started at exactly the same time, they both wont be ticking at the same time. Instead, one will tick, then the other, then the first, then the second, etc. The second will always be a little later than the first and as they are at the same tempo, they will never catch up with each other, they will always tick at different times. This is called being out of phase. When two rhythms are out of phase it can sound very messy. Therefore, being able to get rhythms to start at exactly the same time is really important to being able to jam together and for it to sound good.\n\nThe new Global Time Warp control lets you shift the timing of all triggered synths, MIDI and OSC messages forwards or backwards by a specified time in milliseconds. You can either slide a slider or type in a specific time to adjust the phase of Sonic Pi's timing to match the phase of an external rhythm.\n\nThis means you can now easily jam to an external track - first by tapping out the tempo and then by shifting the phase using the new Global Time Warp controls until it sounds right. This is essentially what DJs do when they mix tracks together in a live set - only now you can layer coded rhythms, basslines and riffs on top of external music with code. This is not only a great way to perform live, but it's also a wonderful way to practice - by jamming along to music you love.\n\nIn addition to this, the accuracy of the Tap Tempo functionality has been improved in addition to UI tweaks to all the metronome controls.\n\nHave fun jamming in phase to external music and take your live coding collaborations to the next level!\n\n### GUI\n\n- New Global Time Warp controls. This lets you adjust the timing of all scheduled events (synths, samples, MIDI and OSC) forwards or backwards up to 250 milliseconds. This is important for matching the phase of an external rhythm.\n- Improved Tap Tempo logic aimed towards increased BPM detection accuracy and speed.\n- BPM scrubber and new Global Time Warp scrubber now respond to mouse wheel changes.\n\n### Improvements\n\n- Clearly specify in the tutorial that user-defined function names should start with a lower case letter. Therefore use `define :foo` rather than `define :Foo`.\n\n### Translations\n\n- Minor improvements to the Indonesian, Korean Portuguese (Brazil) and Russian translations.\n\n### Bugfixes\n\n- The `duration:` opt for `midi_clock_beat` has been fixed.\n- Fix `scsynth_opts` and `scsynth_opts_override` options in the `~/.sonic-pi/config/audio-settings.toml` config file.\n- Audio output via external soundcards on macOS should now work without requiring audio inputs to be enabled in the GUI.\n- `current_debug` now correctly returns `true` if logging/debug is enabled (the default). Previously it reported the inverse.\n- Minor improvements to documentation layout.\n\n<a name=\"v4.0.3\"></a>\n\n## Version 4.0.3 'Dovetail'\n\n18th July 2022\n\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v4.0.3):\n\nThis is a minor bugfix and maintenance release.\n\n### Improvements\n\n- The docs for `beat` have been updated to reflect the beat value can no longer be assumed to start at `0`. This changed since Ableton Link integration in v4 which now defines the initial beat value based on its internal state.\n\n### Translations\n\n- Minor improvements to the Vietnamese translation.\n\n### Bugfixes\n\n- A regression in the function `midi_sysex` introduced in v4 has been resolved. `midi_sysex` can now be called as expected.\n  <a name=\"v4.0.2\"></a>\n\n## Version 4.0.2 'Relink'\n\n15th July 2022\n\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v4.0.2):\n\nHot on the heals of v4.0.1 here's another bugfix release addressing an issue with the translations.\n\nDuring the last year there has been significant upheaval of the process used to build Sonic Pi. Somehow, during this upheaval, the translations never got added into the final release builds, despite being part of the dev builds. This has been true since v4.0 BETA 1 back in August 2021 - yet it somehow went unnoticed until now. Apologies! This release fixes this and re-introduces the translations which are so important for lowering the barrier to entry across the world.\n\nAs a bonus, a couple of nice improvements also managed to sneak in for good measure. Have fun!\n\n### GUI\n\n- All the translations are now available again - including the vast amount of new translation effort since v3.3.1 was released.\n- Loading a file no longer erases the undo history. This means that you can now \"undo\" a file load in the current buffer and return it to the state prior to the load.\n- The BPM-scrubbing behaviour (clicking your mouse and dragging to change the BPM) has been tweaked to make it easier to use.\n- Improvements for the Portuguese translation.\n\n<a name=\"v4.0.1\"></a>\n\n## Version 4.0.1 'Verknüpfen'\n\n12th July 2022\n\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v4.0.1):\n\nThis is a bugfix release addressing a startup issue for a number of users with non-ASCII characters within audio hardware information on macOS.\n\nWe also sadly say goodbye to Core Team member Hanno Zulla who did amazing work with Linux packaging - especially getting Sonic Pi into Debian. Hanno also spearheaded the translation work setting up the crowdsourced translation system which has now enabled Sonic Pi to be translated into over 50 languages. Thank-you so much Hanno - we wish you success and happiness in all you do going forwards.\n\nThis release also includes Italian and Polish translation updates.\n\n<a name=\"v4.0.0\"></a>\n\n## Version 4.0.0 'Link'\n\n6th July, 2022\n\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v4.0.0):\n\nGet ready to Jam with v4 of Sonic Pi.\n\nIn this release, the internal timing algorithms have been completely refactored to enable them to link to a new global metronome. The GUI now features a new metronome panel which will let you dynamically _change the BPM_ of your code _whilst it is running_. You can also use the new \"Tap Tempo\" button to click out a tempo and Sonic Pi will automatically shift to play in time with your taps. Additionally, you can link the metronome with other versions of Sonic Pi running on other computers connected to the same network (wifi or ethernet). This means it is now possible to gather some laptops together to form an ensemble or turn a whole classroom of computers into an orchestra of live coders - and for everyone to be in time with each other. You can even dynamically change the BPM for _everyone on the network_ whilst code is _running on everyone's computers independently_ and everything _maintains synchronised_ and _in time_. It's a real jam.\n\nFinally, you're not limited to syncing tempo with other copies of Sonic Pi. The new global metronome is built on top of a wonderful piece of technology called [Link](https://www.ableton.com/en/link/) which was developed and open sourced by [Ableton](https://www.ableton.com) who also make [Live](https://www.ableton.com/en/live/) and [Push](https://www.ableton.com/en/push/), both widely used by professional musicians and also automatically sync using Link. Additionally there are also over [200 other apps or hardware products](https://www.ableton.com/en/link/products/) that also sync with Link. Sonic Pi can therefore now automatically jam with any of these with just a click of a button. It's so exciting to imagine the new kinds of bands and collaborations that are going to be possible with this new timing system.\n\nThere's also a large number of other improvements and fixes within this release that together combine to form the most powerful and exciting release of Sonic Pi yet. See below for a full breakdown of visible changes.\n\nThis release would not have been possible without the huge number of fabulous contributors that have been involved. Key contributions have been a huge refactoring of our GUI by Chris Maughan, the wrapping of Link as an Erlang NIF by Luis Lloret and the tireless and constant attention to detail by Ethan Crawford. Thanks so much to you all. Thanks also to José Valim for financially supporting development during a tricky period. José is the creator of the programming language Elixir which is now integrated into the internals of Sonic Pi. Elixir opens up a rich world of exciting opportunities within Sonic Pi which we have already started exploring with earnest. Expect exciting things for the future and consider becoming a [Patreon supporter](https://patreon.com/samaaron) to automatically get access to all upcoming BETAs.....\n\nFinally, we would love for you all to extend a warm welcome to the latest member of the Sonic Pi Core Team: Lily Foster. She brings a huge depth of Linux knowledge to the team and we're terrifically excited to have her on board.\n\nNow, go and get your Live Coded Jam On!\n\n### Breaking Changes\n\n- The default BPM is now set to the new global Link metronome. This is set to 60 by default, so on the surface the behaviour will appear identical. However, if you change the Link metronome BPM using the GUI or the new fn `set_link_bpm!` it will change the BPM for all threads dynamically. Previous behaviour (a static BPM of 60 unlinked to the global metronome) can be obtained by starting your code with `use_bpm 60`.\n- Previously it was possible that the `onset:` option for `sample` silently ignored the last onset of a given sample. This has now been fixed. Some samples may therefore have an additional onset index which won't affect any code using earlier indexes but will affect code which uses indexes larger than the number of onsets (and therefore relying on the index wrapping behaviour).\n- The Minecraft Pi Edition API has been removed (all `mc_` fns). Minecraft Pi Edition appears to no longer ship on Raspberry Pi OS and the Pi Edition API is not the same as the standard Minecraft API.\n- The main mixer settings have been modified to reduce load on the limiter in common scenarios with the GUI volume slider set to a high position. This caused distortion and other unwanted audio issues. This change should be an improvement for most users - however if you wish to return to the old behaviour, you can run the following at the start of your session: `set_mixer_control! pre_amp: 1, amp: 1`.\n- The value returned by `beat` no longer starts at `0`. Instead it is now initialised with Ableton Link's current beat value. Other than the initial value not being `0`, `beat`'s behaviour remains unchanged.\n\n### New\n\n- Support for [Ableton Link](https://www.ableton.com/link/). This enables you to synchronise the tempo of Sonic Pi running on multiple computers connected on the same network. It will also enable automatic BPM synchronisation with music production tools such as Ableton Live, VJ tools such as Resolume, DJ hardware such as the MPC and many compatible iPad music apps. For a full list see: <https://www.ableton.com/link/products/>,,\n- New `:link` option to fn `use_bpm`. This enables Link mode for the current thread which automatically syncs the BPM to the Link metronome (which also syncs it with all other Link-capable apps running on any computer connected to the local (wired or wifi) network.\n- New fn `link` which sets the BPM to a new `:link` mode and also waits until the start of the next bar (as determined by Link) before continuing. This lets you automatically sync tempo and beat phase in one command.\n- New fn `link_sync` which sets the BPM to a new `:link` mode, waits for the Link session to be playing and also waits until the start of the next bar (as determined by Link) before continuing. This lets you automatically \"arm\" Sonic Pi to sync tempo and beat phase and wait for an external \"play\" command from another Link device - such as Ableton Live.\n- New fn `set_link_bpm!` to change the BPM/tempo of the Link metronome (and simultaneously change the tempo of all connected Link-capable apps on the network).\n- New fn `current_random_source` which returns the current random number source kind (see `use_random_source`).\n- New fn `load_synthdef` which lets you load a single synthdef file.\n- `load_synthdefs` now loads both directories and single files (by dispatching to `load_synthdef` where necessary).\n\n### Synths & FX\n\n- New synth `:winwood_lead` - a lead synth inspired by the Winwood songs from the early 80s.\n- New synth `:bass_foundation` - a soft bass synth inspired by the sounds of the 80s.\n- New synth `:bass_highend` - an addition to the :bass_foundation synth inspired by the sounds of the 80s.\n\n### Examples\n\n- New Algomancer example - Blockgame coded by DJ_Dave.\n- New Sorcerer example - Lorezzed.\n\n### GUI\n\n- Preference pane is now an overlay which hovers over the main window. This means that opening and closing it does not inadvertently modify a carefully chosen layout e.g. for a performance.\n- New preference option to show and hide the pane titles such as Scope, Log, Cues, Context, Help, etc.\n- New preference option to hide the menubar when in full-screen mode (Windows and Linux only as this behaviour is standard on macOS).\n- New preference option for enabling audio inputs (now disabled by default). Modifying this setting requires a reboot to take effect.\n- New preference option for selecting the default language translation. Modifying this setting requires a reboot to take effect.\n- Preferences now show audio hardware information such as connected input/out devices, sample rate, block size etc. The amount of information displayed varies by platform.\n- New GUI controls for interacting with the new Link Metronome. You can connect/disconnect to the network (to share tempo with others), change the tempo (in BPM) and tap out a new tempo.\n- Increase width of panel dividers and highlight on mouse hover.\n- Highlight scrollbars and preference checkbox descriptions on mouse hover.\n- Scrollbars now have rounded edges.\n- Teach autocompletion about random source choices: `:white`, `:light_pink`, `:pink`, etc.\n- Improve syntax indentation.\n- Improvements for Arabic, Catalan, Chinese (Simplified), Dutch, Estonian, French, German, Italian, Japanese, Korean, Persian, Polish, Portuguese (Brazil), Russian, Sinhala, Spanish, Swedish, Ukrainian.\n- Introduced new translations for Basque, Gaelic.\n\n### Improvements\n\n- Many minor documentation fixes and improvements.\n- When running on Raspberry Pi, Sonic Pi connects to PulseAudio by default.\n- The scheduling accuracy of outgoing OSC and MIDI messages is improved on Windows.\n- Optimise `midi_clock_beat`.\n- `note_range` can now handle both increasing and decreasing note ranges.\n- No longer connect to the input sound device on macOS by default - this also means audio input/output rate mismatches no longer cause boot issues on macOS by default.\n- SuperCollider audio server boot issues are now immediately detected and reported as a specific issue to the user alongside the full scsynth log file.\n\n### Bugfixes\n\n- Improve robustness of outgoing OSC messages in the case where an outgoing hostname is malformed and can't be resolved.\n- Synths `:dull_bell` and `:pretty_bell` now properly free themselves when they finish playing, which now means the resources they consumed are also properly freed.\n- Indexing into an empty ring no longer causes a divide by zero error.\n- No longer attempt to increase audio server priority on Windows which causes booting errors in some cases.\n- Fixed encoding issues when saving/loading files containing non-ascii characters on Windows.\n- `range` no longer loops infinitely with a step size of 0. Instead it now throws an error.\n- In some circumstances having the lissajous visualiser visible caused the GUI to crash on startup. This has now been addressed.\n- Stop thread hanging when passing `0` as the first argument to `spread`. Now just returns a ring of false values.\n\n<a name=\"v3.3.1\"></a>\n\n## Version 3.3.1 - 'Beamer'\n\n1st Feb, 2021\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v3.3.1):\n\nThis is a compatibility release addressing two issues with macOS Big Sur:\n\n1. Correct language translations now used based on user's current locale\n2. The language server is no longer killed by macOS Gatekeeper when a\n   sample's onset times are queried.\n\nThis release also includes minor translation updates.\n\n<a name=\"v3.3\"></a>\n\n## Version 3.3.0 - 'Beam'\n\n28th Jan, 2021\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v3.3.0):\n\nTen months of development, over 700 individual commits, loving\ncontributions from many many people have gone into this new version of\nSonic Pi. This release is also the result of a 3 month long community\nbeta process which took place over on\n[Patreon](https://patreon.com/samaaron) where supporters got access\nto early releases and really helped polish and shape development. Huge\nthanks to everyone that has supported continued development. We're\nreally excited and proud to share this new release with you all.\n\nIn terms of significant changes, there have been many internal\nimprovements, including a full rewrite of our MIDI subsystem. This\nshouldn't result in much change as a user (although some MIDI cue names\nmight have changed slightly) but it really sets us up for some exciting\ndevelopments in the future. We're essentially moving much more of the\ncore input/output functionality of Sonic Pi into a special system called\nthe BEAM and a language called [Erlang](https://www.erlang.org). This is\na system that has a strong emphasis on low latency, low jitter and high\nconcurrency which is exactly what the IO of a music system requires!\nWe're so excited to see what we'll be able to achieve with this new\napproach that the BEAM features as the codename of this release.\n\nAnother area that has seen a lot of love and attention is our strong\nfocus on accessibility. We now have a much improved menu bar which\nessentially duplicates much of the functionality found in the\npreferences but in a format that's extremely easy to work with via a\nscreen reader. We've also added a new context pane that displays the\ncurrent line and character position as a direct result of a\ncollaboration with Leiden University's accessibility group. There have\nalready been numerous studies that are reporting success for blind and\nlow-vision users of Sonic Pi - so we're confident we're on the right\ntrack with respect to accessibility. We're also not stopping here and are\nalways looking for ways to lower the many barriers to entry for creative\nexperiences with code for everyone.\n\nThis is also the first release where we officially welcome Chris Maughan\nas the latest member of the Sonic Pi core team. Chris has made\nsignificant contributions over the last year including improvements to\nthe scope and a complete reworking of our build process. I hope you join\nus in welcoming Chris to the team.\n\nFinally, we have official support for macOS Big Sur, some lovely new\nsynths and FX, improved translations, support for advanced configuration\n(audio and colour theming), new Turkish scales and many, many bug fixes\nand improvements.\n\nWe really hope you love this version of Sonic Pi as much as we do.\n\nHappy Live Coding!\n\n### Breaking Changes\n\n- MIDI port description names may be slightly different from previous versions. Precise matches on MIDI ports via `sync` and `get` will have to be updated accordingly.\n- Incoming MIDI cues now no longer include clock tick events. Optionally re-enabling these and new ways of working with incoming timing systems will feature in a future release.\n\n### New\n\n- Completely new MIDI subsystem.\n- `use/with_random_source` - change the current random stream used when selecting random values. We now have `:white`, `:light_pink`, `:pink`, `:dark_pink` and `:perlin`. Default is `:white` which is the same stream as previous releases to preserve compatibility.\n- Many Turkish scales (makams) have been added.\n- New user config directory for fine tuning aspects of the app such as advanced audio settings. See `~/.sonic-pi/config/README.md` for more information.\n\n### Synths & FX\n\n- New synth `:rodeo` - emulating an electric piano.\n- New synth `:kalimba` - an African thumb piano.\n- Add sliding to `:autotuner` FX opts `note:` and `formant_ratio:`.\n- `mix`, `pre_mix` and `pre_amp` opts are now affected by `slide:`.\n\n### GUI\n\n- New context pane which displays the current line number and position making this information accessible to screen readers. This may be shown/hidden with a preference setting.\n- New keyboard shortcuts for switching directly to a buffer. S-M-1 (hold shift and Meta and the number 1) will jump to buffer 1. Meta is Cmd on macOS and alt on Windows/Linux.\n- Autocompletion system can now be enabled or disabled. This is intended to help those using screen readers for which the autocompletion system is currently incompatible.\n- Sample listings in the help system now have a handy play button that allows you to preview them by clicking rather than having to write any code.\n- Improvements for Catalan, Chinese, Danish, Dutch, Finnish, French, German, Hebrew, Hungarian, Icelandic, Italian, Korean, Norwegian, Polish, Portuguese, Portuguese (Brazil), Russian, Slovak, Spanish, Swedish, Thai, Turkish and Vietnamese translations.\n- Sinhalese translation added.\n- GUI now has a much more complete menu bar which duplicates the functionality of the preferences pane whilst making it easily accessible to screen readers.\n- MIDI port names are now autocompleted.\n- The GUI now correctly saves and restores the visibility preferences for the buttons, tabs and log pane.\n\n### Improvements\n\n- Many minor improvements to the documentation.\n- Unsent external MIDI messages are now flushed and no longer sent after hitting the Stop button.\n- The common mistake of calling both `play` and `sample` on the same line such as `play sample :loop_amen` is now an error with an appropriately helpful description to explain that `play` should be removed.\n\n### Bugfixes\n\n- Fix `pulse_width_curve:` and `pulse_width_slide:` opts which were incorrectly swapped on `pulse`, `subpulse` and `dpulse` synths.\n- Improve boot on Windows systems that have default locale code pages currently unsupported by Ruby. We now force UTF-8.\n- Fix issue causing the incorrect error line to be highlighted in the GUI.\n- Fix issue when syncing with cues with `-` symbols in their paths.\n- Fix bug with `use_merged_synth_defaults` after a call to `use_synth_defaults`. This bug was triggered in the \"Sonic Dreams\" example which now plays through correctly again.\n- MIDI device hotswapping (detecting whether devices were connected or disconnected) now works on macOS.\n- Fix `.take_last` to no longer return `nil` for min and max of the range.\n- Fix off-by-one error in `line` fn. Now should always return rings of the correct length.\n\n<a name=\"v3.2.2\"></a>\n\n## Version 3.2.2 - 'Tau3'\n\n_5th April, 2020_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v3.2.2):\n\nThis is a minor bugfix and maintenance release.\n\n### GUI\n\n- Significant improvements to the Danish and Swedish translations.\n\n### Bugfixes\n\n- Fixed a build issue on macOS that stopped recording from working.\n- Fixed issues rendering images in the documentation for non-English translations.\n\n<a name=\"v3.2.1\"></a>\n\n## Version 3.2.1 - 'Take Tau'\n\n_3rd April, 2020_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v3.2.1):\n\nThis release is another maintenance release with a primary focus on\nincreasing stability and reliability. There are therefore no major new\nfeatures, but instead there are significant improvements to the\ninternals and the packaging of the Windows installer.\n\nWhilst there are no major new features, we have still been working hard\nengaging with users with accessibility requirements. We have added a\nnumber of modifications to the GUI to improve keyboard navigation which\nshould improve things for users that do not use a mouse (for example,\nusers working with a screen reader). As mentioned in the previous\nrelease, we will continue to work to improve accessibility support\nwherever possible in each release.\n\nOne core internal focus has been improving memory utilisation of the\napp. A number of memory leaks have been hunted down and fixed. A memory\nleak is where the application requests increasingly more memory from the\ncomputer and never gives it back. Over time this means that the app\nwould waste a lot of the system memory. This might have not been too\nnoticeable using Sonic Pi on modern computers that typically have\nincredibly large amounts of memory. However, it was noticeable and\nproblematic on low-powered systems with limited memory capacity. Sonic\nPi now uses a lot less memory and after a warm-up period, the memory\nusage stays much more constant than before. We will continue to look for\nand fix memory leaks going forward.\n\nFinally, this release is the first to ship with a fully signed Windows\ninstaller. This is a major milestone as we now ship with signed versions\nfor both macOS and Windows which should help more users and\norganisations (especially schools) trust the installation and running of\nSonic Pi.\n\nNow, go and get live coding!\n\n### Breaking Changes\n\n- The `ping_pong` FX now merges the dry sound with the result of the\n  echo to match the behaviour of `echo`.\n- In the last release, the `piano` synth had its default amplitude\n  accidentally altered when being updated to work with arbitrary\n  frequencies. This has been restored.\n- Incoming MIDI Active Sensing messages are now ignored\n\n### GUI\n\n- New shortcuts and menu items for explicitly placing focus on specific\n  areas of the app. This is primarily intended to improve accessibility\n  for screen readers or those not using a mouse or trackpad. The new\n  shortcuts are:\n\n  - `Control-shift-e` - move focus to editor\n  - `Control-shift-l` - move focus to logs\n  - `Control-shift-c` - move focus to cues\n  - `Control-shift-p` - move focus to preferences\n  - `Control-shift-h` - move focus to help listing (e.g. the list of available help section)\n  - `Control-shift-d` - move focus to help details (e.g. the contents of the chosen help section)\n  - `Control-shift-w` - move focus to syntax/runtime error warnings\n\n- Once focus is in the help listing, the up and down arrow keys now\n  navigate up and down in the list and the left and right arrow keys\n  switch tabs to work through the different help categories.\n- When an error occurs, focus is now placed on the error pop-up\n  window. Focus can be easily returned back to the editor by pressing\n  either the Escape key or `Control-g`.\n- Minor improvements for Catalan, Greek, Chinese, Russian,\n  French and Romanian translations.\n\n### Bugfixes\n\n- Upgraded the Ruby process library which improves/fixes process\n  shutdown behaviour on some Linux systems.\n- Fixed a number of memory leaks which resulted in the memory\n  requirements of the app increasing over time until it was closed and\n  opened again. This was particularly noticeable and potentially\n  problematic on machines with small memory footprints.\n- General memory usage has been significantly reduced due to the\n  introduction of further caching in hot areas of the code that created\n  many unnecessary object allocations.\n- The Windows installer now works on more Windows 10 systems thanks to\n  additional libraries now being included in the installer.\n\n<a name=\"v3.2.0\"></a>\n\n## Version 3.2.0 - 'Tau'\n\n_28th Feb, 2020_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v3.2.0):\n\nAfter a long 2 years without updates, we are threaded with excitement to\nbring you Sonic Pi's first fully independent release. Sam Aaron's work\non this release has been 100% supported by kind and generous donations\nfrom people on [Patreon](https://patreon.com/samaaron) in addition to\nfunds raised by delivering talks, workshops and performances. Sam's work\nhas also been hugely assisted by many wonderful code and translation\ncontributions both by members of the Core Team and by our growing\ninternational community of live coders. This release has truly been a\ncommunity effort.\n\nSo, what's new? This time there are no radical new features, instead we\nhave a much more polished, accessible and stable version than ever before.\n(This release has been heavily battle-tested in many performances worldwide).\n\nThis release is codenamed Tau -\n[(an improved Pi)](https://tauday.com/tau-manifesto).\n\nOne of the core focusses of this release is accessibility. Tau\nintroduces support for screen readers. Previously the code editor was\ninvisible to the main screen readers on both macOS and Windows and this\nis now fixed. There is also an accessible menu bar and a new high\ncontrast colour theme which is WCAG 2 level AAA compliant. Accessibility\nis very important to us - we acknowledge that this is only the\nbeginning and we value and encourage feedback from users who have\nspecific accessibility requirements that we are not directly meeting. We\nplan to improve our accessibility support where possible in every release\ngoing forward.\n\nAnother aspect of accessibility is support for Windows devices with high\nresolution displays. Previously on certain displays font and icon sizes\ncould be far too small, unreadable and out of proportion with the app in\ngeneral. This has all been addressed with significant work on ensuring\nSonic Pi looks great on a variety of monitors on both Windows and\nmacOS. We believe that this release looks better and is more usable than\nany previous release.\n\nTau features two beautiful new audio visualiser scopes - a spectrum\nscope showing the frequency content of the audio and a beautiful mirror\nstereo scope. These scopes have been contributed by Chris Maughan who\nhas also been pivotal in improving and simplifying the Windows build\nprocess. We are hugely grateful for his contributions - thanks Chris!\n\nWe have two fabulous new FX - a ping pong delay contributed by Ethan\nCrawford and an autotuner contributed by Xavier Riley. We hope you have\nas much fun playing with these as we have.\n\nFinally, this release has seen a significant improvement in\ntranslation coverage - both of the GUI and the tutorial. We truly\nbelieve that this helps us achieve our mission of lowering the barrier\nto entry for a creative experience with code by helping more non-English\nspeakers start their live coding journeys.\n\nNow, go and make some noise with code!\n\n### Breaking Changes\n\n- `spread` now produces identical patterns as in the\n  [Toussaint paper](http://cgm.cs.mcgill.ca/~godfried/publications/banff.pdf).\n  Previously, some of the patterns had been shifted. Use the `rotate:` opt to\n  match prior behaviour if required.\n- OSC cues now include the IP address and port number of incoming messages\n- MIDI cues now include the source information in the first part of the\n  path with `:` separators to match the new OSC cue format.\n- The `osc` fn now forces all outgoing args to either be numbers or\n  strings (binary blobs and timestamps are not supported at this\n  point). If the value is neither a number or string, it is 'inspected'\n  and the resulting description string is sent instead.\n- The default incoming OSC cues port is now 4560 as the previous value\n  was registered on the Iana Service Name and Transport Protocol Port\n  Number Registry. However, 4560 is currently free.\n- Constrain `:flanger` FX's `feedback:` opt to range 0->1. Values greater than 1 had the effect of increasing the amplitude which should be achieved via the `amp:` opt.\n- Add arg checker for `sample`'s `hpf:` opt which now ensures the value is not higher than 119 as values higher than this can cause bad noise artefacts.\n- Improve `sample`'s `start:`/`finish:`/`onset:`/`slice:` opt semantics. The `start:` and `finish:` opts for `sample` now work within the specified slice or onset. This allows you to easily play, say the first half of a given slice or onset by specifying a `start:` of `0` and a `finish:` of `0.5`. Where both the `slice:` and `onset:` opts are specified, then the slice operates within the onset. Where the `slice:`, `onset:` and `start:`/`finish:` opts are all used, the start/finish operate within the slice which in turn operates within the onset. See the updated sample examples for more information.\n\n### New Fns\n\n- `eval_file` evaluates the contents of the specified file inline in the\n  current thread as if it was a function.\n- `midi_sysex` for sending MIDI sysex messages.\n- Add new chain fn `.notes` which takes a ring of values and returns a\n  new ring with each element treated as a note. This will leave numbers\n  unchanged but will turn note names like `:C1` to their corresponding\n  MIDI note.\n\n### Synths & FX\n\n- New FX `ping_pong` - delayed echo alternating between left and right channels.\n- New FX `autotuner` - Autotune/phase vocoder effect.\n- The `gverb` FX now checks to ensure that the `room:` opt is greater than or equal to 1.\n- The `piano` synth now supports fractional notes such as `70.3`\n\n### GUI\n\n- New WCAG 2 level AAA compliant high contrast colour theme. This is\n  especially suited for those with low vision.\n- New application menu and shortcuts.\n- New default icons which match the pro icon feel.\n- 2 new visualiser scopes - mirror stereo and spectrum.\n- Move to simple numbered labels for buffers.\n- Improve scaling of icons, text etc. on high DPI displays on Windows.\n- The version number is no longer placed in the initial comment of new\n  empty buffers. This felt like a friendly thing to do, but can be\n  confusing if a given buffer hasn't been used and the version was\n  updated. This results in the buffer reporting the old version number\n  that was used to create the buffer not the current version used to\n  display it.\n- Many, many translation improvements. Thanks to all the wonderful\n  volunteers contributing to the translation effort: <https://hosted.weblate.org/projects/sonic-pi/>\n- Error pane height is now higher by default on all platforms and its\n  height is correctly scaled on high DPI monitors.\n- Preference checkboxes are now similarly styled on all platforms.\n\n### Improvements\n\n- Allow scale degrees over an octave and augmented/diminished degrees.\n- Calling `.tick` and `.look` on a normal array such as `[1, 2, 3]` will\n  now automatically convert it to a ring first.\n- Add docstring for the `set` fn.\n- Add new article A.20 - Creative Coding in the Classroom as appeared in\n  issue #9 of the Hello World magazine.\n- OSC messages are now sent from the external cue listening port. This\n  allows OSC servers that reply directly back to incoming messages (such\n  as SuperCollider) to be able to communicate back to messages sent from\n  Sonic Pi.\n- Random fns now understand notes. For example `rrand(:e1, :e2)` will\n  return a random frequency between E octave 1 and 2.\n- Windows can now detect sample onsets from samples stored in `.flac`\n  and `.ogg` format in addition to arbitrary sample rates such as 48khz.\n\n### Bugfixes\n\n- Further improve boot stability on Mac in the cases where audio input/output\n  sample rates do not match (typically due to the use of bluetooth\n  headsets). Audio inputs on macOS are now disabled by default unless we\n  can definitely determine the audio rates are the same.\n- Revert synthdefs to original bytecode version. This fixes a regression\n  in at least the `:tb303` synth and possibly others. All synths should\n  sound and behave as they did in `v3.0.1`.\n- Fix issue with scaling default opts. Previously it was possible that\n  unspecified opts correctly fell back to the default value - however\n  that default value wasn't scaled. Default values are now always scaled\n  whether or not explicitly specified.\n- `with_sched_ahead_time` now correctly sets the schedule ahead time\n  before running the block and returns the result of the\n  block itself\n- When \"Enforce Timing Guarantees\" is selected, Sonic Pi wil no longer\n  throw out of time warnings in 'real time' threads (specified using\n  `use_real_time`).\n- `set` and `cue` no longer print duplicate messages which was possible\n  in some cases.\n- Fix `time_warp` examples which were incorrect and misleading.\n- Improve pid handling on Linux. This should reduce the number of zombie\n  processes accidentally generated.\n- The `offset:` opt for `with_swing` now matches documented behaviour.\n- Teach `sample_duration` to scale correctly.\n- Fix GUI bug which could result in a buffer stuck in the highlighted\n  state after hitting Run.\n- Fix the `on:` opt when playing chords to work similarly across _all_\n  notes in a given chord.\n- Stop `defonce` from being executed multiple times\n- Calling `.take` on an empty ring no longer results in infinite\n  recursion but instead returns an empty ring.\n- Scope now has a minimum height.\n- Windows now supports sending and receiving OSC messages over the\n  network to and from external machines.\n\n<a name=\"v3.1.0\"></a>\n\n## Version 3.1.0 - 'Sauna'\n\n_23rd Jan, 2018_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v3.1.0):\n\nThe major feature of this release is that it brings v3 functionality to\nWindows. Windows now supports all the good stuff listed alongside\n`v3.0.x` including `live_audio`, `midi`, `osc` and much more. See\n`v3.0.1` and `v3.0.0` release notes below for more information.\n\nOf course, no new release comes without new features, and there are a\nnumber of additions and improvements on all levels. Firstly, we are\nhonoured to include a number of wonderful new samples kindly recorded\nand released into the public domain by our friends Mehackit. If you\naren't already aware, Mehackit organise and run creative coding\nworkshops all around Finland and Europe and were a core part behind the\nCodeBus Africa project which used Sonic Pi to engage almost 2000 African\nstudents with creative code. Our favourite of these samples is the new\n`:ambi_sauna` which has given us the name for this release.\n\nWe have added support for Ogg Vorbis encoded audio files `.ogg` and\n`.oga`. These are lossy encoders similar to `.MP3` but free from license\nrestrictions. See: <https://en.wikipedia.org/wiki/Vorbis>\n\nAnother notable addition is the increase in translation coverage across\na number of languages. If you still feel the translation for your\nlanguage could be improved, please do consider joining in the\ncrowd-sourced effort here: <https://hosted.weblate.org/projects/sonic-pi/>\n\nWe have also included some styling tweaks to the GUI - to make\nit look even cleaner and also work better when projecting code with\nvisuals underneath.\n\nFinally, this release also gives me the opportunity to welcome Ethan\nCrawford to the Core Team. He has been a prolific contributor to the\nproject over the years and his keen eye for detail has helped polish\nSonic Pi from the rough stone it once was to the shining gem it is\ntoday.\n\nHave fun and enjoy the new features - especially you lovely Windows\nusers!\n\n### Breaking Changes\n\n- The synth `chip_noise` now has standard default envelope opts (`sustain:` and `release:` are now 0 and 1 respectively (as opposed to 1 and 0))\n\n### New Fns\n\n- `set_audio_latency!` Apply positive or negative timing offset for audio events to allow for any timing differences between OSC/MIDI events caused by external latencies (such as wireless speakers).\n- `midi_pc` for sending MIDI Program Change messages\n\n### Samples\n\n- Add support for Ogg Vorbis encoded audio files `.ogg` and `.oga`.\n- Add new samples (kindly recorded and released into the public domain by Mehackit).\n  - new `glitch_` sample group containing sounds with a glitchy texture.\n  - new `mehackit_` sample group with sounds of old toys\n  - new samples: `:perc_bell2`, `:perc_door`, `:perc_impact1`, `:perc_impact2`, `:perc_swoosh`, `:ambi_sauna`, `:bd_mehackit`, `:sn_generic`, `:loop_3d_printer`, `:loop_drone_g_97`, `:loop_electric`, `:loop_mehackit1`, `:loop_mehackit2`, `:loop_perc1`, `:loop_perc2`, `:loop_weirdo`,\n\n### GUI\n\n- Add new in_thread forum to the community listings (and update other entries).\n- Many, many translation additions and improvements for a multitude of\n  languages. The tutorial is now available in German, Spanish, French,\n  Italian, Japanese, Dutch, Polish, Portuguese, Romanian, and Russian.\n- GUI now lets the user know when the buffer capacity has been exceeded\n  on macOS and Linux (Windows behaviour is currently unchanged). This\n  capacity limitation will be addressed more thoroughly in a future release.\n\n### Bugfixes\n\n- Stop the internal sample pattern matcher from duplicating matches in some cases.\n- Stop pro icon preference from resetting to 'off' when switching from dark to light mode\n\n<a name=\"v3.0.1\"></a>\n\n## Version 3.0.1 - 'IOIO'\n\n_28th July, 2017_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v3.0.1):\n\nThis is a minor release addressing a few bugs and includes a small\nnumber of modifications.\n\n### Breaking Changes\n\n- Raspberry Pi only - based on a request from Raspberry Pi we have\n  removed the ability to switch between HDMI and headphone output as\n  this is now duplicate functionality to what is now available in\n  PIXEL. Now, to change audio output, you need to right-click on the\n  audio logo in the menu at the top right of the screen.\n\n### GUI\n\n- The IO menu has been slightly tweaked to improve amount of space used.\n\n### Improvements\n\n- The Time State system no longer maintains a history of _all_ events -\n  instead it retains at least 20 events for each path and beyond that\n  culls events 30s in the past.\n\n### Bugfixes\n\n- Fix minor issues with docs (grammar and rendering).\n- Incoming OSC now correctly handles OSC paths which contain capital letters.\n\n<a name=\"v3.0\"></a>\n\n## Version 3.0 - 'IO'\n\n_18th July, 2017_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v3.0):\n\nThis release is our most ambitious to date. The goal is to open up the\ncode within Sonic Pi to the outside world. We want you to be able to both\nmanipulate the real world to change the code and change the real world\nwith the code. Input Output. IO.\n\nWe have therefore focussed on getting events and audio in and out of\nSonic Pi in new ways whilst keeping to our philosophy of simple code,\nlive manipulation, and strict, powerful timing. This release introduces\na number of brand-new components:\n\n- _Time State_ - a powerful new time-based deterministic shared memory system\n- _MIDI_ - support for input and output of MIDI\n- _OSC_ - support for sending and receiving OSC messages on the network.\n- _Live Audio_ - for getting multiple streams of audio into Sonic Pi\n- _Multi-channel audio out_ - for outputting multiple streams of audio.\n- _Audio Buffers_ - for internal recording of audio enabling the creation of loopers.\n\nIt's important to mention that MIDI and OSC output functionality is\npossible due to a new well-timed scheduler. This was built in a\nremarkable programming language called [Erlang](http://erlang.org) which\nis now part of the Sonic Pi distribution. We have had the great honour\nof one of Erlang's co-creators, Joe Armstrong working directly with us\non the implementation of this scheduler and we look forward immensely to\ncontinuing to work with him on new functionality.\n\nAnother very important part of this release is the addition of Robin\nNewman to the core team. We have always been consistently impressed with\nhis fearless and experimental attitude - pushing Sonic Pi into new areas\nwith ease. We're excited that he's decided to join our core team and\nhope you're as excited by his future work with us as we are.\n\nFinally, we're really very excited about what new kinds of instruments\npeople will be able to create with this new technology both in the\nclassroom and on stage at musical festivals. Sonic Pi has now become a\nfully programmable music studio. Have fun live coding!\n\n### Breaking Changes\n\n- Ring's `.pick` now returns 1 element by default. Previously calling `.pick` on a ring would pick n elements randomly from the ring (including duplicate picks) where n would be the size of the ring. With this change, `.pick` only returns a single element. This makes it similar to choose.\n\n### New Fns\n\n- `midi_*` - many new MIDI-specific fns such as `midi_note_on`, `midi_pitch_bend`, `midi_cc`, `midi_clock_tick`. See new tutorial section for more information. These fns _send_ MIDI messages to connected MIDI devices. Incoming MIDI is received via the new event log.\n- `with_swing` - add swing to successive calls to do/end block.\n- `get` - get a named value from the Time State at the current time. This will return the last value entered. Previous values can be read when within a `time_warp`. Has full support for OSC\n- `set` - set a named value in the Time State at the current time. Future values can be set when within a `time_warp`.\n- `use_real_time` - convenience fn for setting the schedule ahead time to 0 for the current thread. Very useful for removing latency from live loops that are working with external cues (such as MIDI or OSC).\n- `use_midi_defaults` - set defaults to be used for all subsequent MIDI calls. Similar to `use_synth_defaults`. Also available: `with_midi_defaults`.\n\n- `use_osc` - set the default hostname and port number for subsequent outgoing OSC messages. See also `with_osc`.\n- `osc` - send Open Sound Control messages in time with the music to default hostname and port\n- `osc_send` - similar to `osc` but requires you to specify the hostname and port\n- `use_sched_ahead_time` - set the schedule ahead time specifically for the current thread. Also available - `with_sched_ahead_time`.\n- `current_time` - return the current logical time.\n- `assert_error` - An assertion to ensure the specified block of code raises the specified error.\n\n### Synths & FX\n\n- New synth `live_audio` - directly stream audio from your sound-card as a synth.\n\n- New FX `record` - enables you to internally record any audio into named buffers. Perfect for building looper systems.\n\n- New FX `:sound_out` - stream out audio to a specific output on your sound card. This enables multi-channel audio out.\n- New FX `:sound_out_stereo` - similar to `sound_out` but streams out to a pair of consecutive audio card (left and right) output channels.\n- New FX `eq` - Parametric EQ with three centre freqs - low, mid & high - all with Q values and gain (-1 -> 1). Also has low and high shelves with centre freqs and slope adjustment.\n- New FX `tremolo` - simple tremolo effect which modulates the volume within the `do/end` block.\n\n### GUI\n\n- New 'pro' icon set for performances.\n- New GUI translations for the following languages: (BS) Bosnian, (CA) Catalan, (CS) Czech, (DA) Danish, (EL) Greek, (ET) Estonian, (HI) Hindi, (ID) Indonesian, (KO) Korean, (PT) Portuguese, (TR) Turkish, (ZH) Chinese\n- Added new pane for displaying new cue events (including incoming OSC and MIDI)\n- Added new IO preferences tab for configuring MIDI and network settings.\n- Automatically autocomplete `sync`, `cue` and `get` or `set`\n- Increase width of autocompletion popup.\n\n### Documentation & Examples\n\n- New articles on additive and subtractive synthesis techniques.\n- New example piece 'Cloud Beat' by Pit Noack\n\n### Improvements\n\n- Teach `time_warp` about input ranges. It now works similar to `at` in that it can now take two lists of args - times and values - which represent a list of time destinations to be visited in turn.\n- Ensure any unprinted messages are displayed if an exception occurs.\n- Teach `range` to work as expected with both floats and integers.\n- Teach rings a new chain method - `.scale` which will return a new ring with all elements multiplied by the scale value.\n- The fn `control` now returns the node you're controlling.\n- Add many new chords\n\n### Bugfixes\n\n- Fix randomisation aspects of `:slicer`, `:wobble` and `:panslicer` FX (i.e. via the `probability:` opt).\n- Fix file path drag and drop on Windows to not accidentally prefix path with /.\n- Teach `chord_invert` and `sample` to work with floating point args.\n\n<a name=\"v2.11.1\"></a>\n\n## Version 2.11.1 - 'Hack'\n\n_16th Dec, 2016_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.11.1)\n\nThis is primarily a maintenance release containing a number of bug\nfixes and minor tweaks. The feature set remains unchanged from `v2.11`.\n\nOne of the core bugs fixed in this release is an issue with the return\nkey within some Japanese layouts. Another important change is the\nunification of the font on all platforms to\n[Hack](http://sourcefoundry.org/hack/). This is from the same family as\nMenlo and Bitstream Vera (the previous fonts for Mac and Linux\nrespectively) and a dramatic improvement to the Courier font previously\nused for Windows.\n\n### GUI\n\n- Move all platforms to the same font -\n  [Hack](http://sourcefoundry.org/hack/).\n- Improve initial log information and messages.\n- The scope axes are no longer shown by default for a cleaner look and\n  feel.\n\n### Docs\n\n- Add new MagPi article on sample stretching.\n\n### Bugfixes\n\n- Ensure `chord_invert`'s shift value is a whole number - otherwise it\n  is possible to get into an infinite recursion.\n- Ensure thread locals have correct default values on `clear`. When a\n  run is created, the thread is given a set of default thread\n  locals. Previously `clear` removed _all_ thread locals. Now, we reset\n  the thread locals to the defaults for a brand new thread.\n- Fix line reported on syntax error.\n- Fix unknown synth error message.\n- `sync` can once again handle multiple cues correctly.\n- Fix boot issues for users that don't have a standard /etc/hosts file\n  that contains an entry for localhost.\n- `sample_duration` now handles onsets, slices and sustain.\n- Fix issue with return key not being recognised with Japanese\n  keyboards.\n- Fix sporadic flickering of current line on Raspberry Pi.\n- Fix errors in buffer 0 being reported as being from buffer 3.\n- Fix scrollbar background colour on Windows in dark mode.\n- Improve error message reported when required ports are not available\n  at boot.\n- Fix issue with calling `control` on a chord group.\n- Fix `rand` and `rand_i` to honour their arguments.\n\n<a name=\"v2.11\"></a>\n\n## Version 2.11 - 'Time Warp'\n\n_3rd Nov, 2016_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.11.0)\n\nThis release is the biggest and most adventurous release yet. There are\nas many (invisible) modifications and improvements to the internal\nsystems as there are new external features that you can see and play\nwith. The aim was to create a solid foundation for new and exciting\nfeatures both in this release and in preparation for future releases.\n\nWe also open our arms to welcome two new Core Team members - Luis Lloret\nand Adrian Cheater. Both have made generous and substantial\ncontributions to this release. Thank-you. Sadly we also say farewell to\nJeremy Weatherford. Please extend your kind thoughts and gratitude to\nJeremy for all of his contributions - in particular for turning the\nWindows release from a possibility into a reality. Luckily Luis has\nkindly stepped in to maintain the Windows installer.\n\nThe main visible feature is the new scope visualisers. The overall audio\noutput can now be visually monitored by one of three wave form\nvisualisers. Firstly there is the individual left and right channels,\nnext is a single mono scope which is mixed down from the stereo channels\nusing RMS and finally there is a Lissajous scope which displays phase\ndifferences between the left and right channels. Typically the mono\noutput will be most useful. Use the preferences pane to hide and show\neach of these scopes. All of them may be viewed at the same time if\nnecessary. Thanks to Adrian Cheater for the core work behind this\nfeature.\n\nWe now have support for multi-channel input (up to 16 channels) via the\nnew `sound_in*` synths for systems that have audio in. This opens up the\npossibility to use Sonic Pi as an FX unit for vocals, guitars and any\nother audio source.\n\nAnother exciting new feature is the sample opt `onset:` - which lets you\nplay a specific percussive part of a sample. This uses an automatic\nonset detection algorithm to determine all the points in the sample that\ngo from quiet to loud quickly such as a drum, synth or bass hit. For\nexample, this allows you to take a complex drum sample and trigger each\nof the individual drums in your own order and to your own timing.\n\nFinally, translations are now crowd-sourced and small or large\ncontributions for any language can be made here:\n`https://hosted.weblate.org/projects/sonic-pi/`. If your language isn't\nyet available or you would like to improve things, please join in the\neffort. Thanks to Hanno Zulla for making this possible.\n\n### Breaking Changes\n\n- `sample` now supports the opt `path:` which enables the sample's path\n  to be overridden.\n- `use_sample_pack` is now deprecated and no longer available. Consider\n  using the new filter system. See documentation for `sample` for more\n  details.\n- `current_sample_pack` is now deprecated and no longer available.\n- `inspect` has been removed. (Standard printing now calls\n  `Object#inspect` by default)\n- `load_sample` now only loads the first matched sample. `load_samples`\n  now loads all matched samples.\n- Remove SuperCollider server automatic reboot system as it was badly\n  conflicting with machines that went into a 'sleep state' (for example,\n  when a laptop is closed). The fn `reboot` is still supported and may\n  still be triggered manually if required.\n- Calls to `play`, `synth` and `sample` now consume all their arguments\n  before testing to see if the synth should be triggered. This ensures\n  all declared rands are consumed. This change might therefore\n  potentially modify your random stream consumption. Consider using\n  `rand_back` or `rand_skip` to re-align the stream if necessary.\n- New threads now start with a fresh set of tick counters and a new\n  random stream.\n- It is no longer possible to use lambdas as values for synth\n  defaults. This is because synth defaults are shared across thread\n  boundaries and there is now a new safety system that only allows\n  immutable/serialisable values to be used. Unfortunately Ruby has no\n  notion of a 'pure' function and each lambda captures over its\n  environment and therefore may contain free variables pointing to\n  mutable data. A replacement system for describing a simple set of pure\n  functions is being designed.\n\n### New Fns\n\n- `reset` - resets the user's thread locals (such as ticks and rand\n  stream index) to the snapshot of the state as recorded at the start of\n  the current thread.\n- `clear` - clears all the user's thread locals to a blank state.\n- `time_warp`- allows whole blocks of code to be shifted forward or\n  backwards in time up to the value of `current_sched_ahead_time`.\n- `rand_look` - generate a random number without consuming a rand by\n  looking ahead in the random stream.\n- `rand_i_look` - generate a random integer without consuming a rand by\n  looking ahead in the random stream.\n- `run_file` - Runs the contents of file at path as if it was in the\n  current buffer.\n- `run_code` - Runs the contents of the specified string as if it was in\n  the current buffer.\n- `Numeric#clamp` - max and minimum bound (will clamp self to a value <=\n  other and >= -1\\*other\n- `set_recording_bit_depth!` - set the bit depth for WAV files generated\n  by recording the audio. Default is 16 bits, and can now be set to one\n  of 8, 16, 24 and 32. Larger bit depths will result in better quality\n  audio files but also much larger file sizes for the same duration.\n- `scsynth_info` - obtain information about the running audio synthesis\n  server SuperCollider such as the number of available busses and\n  buffers.\n\n### Synths & FX\n\n- New synth `:tech_saws` - an implementation of a slightly modified\n  supersaw.\n- New synth `:sound_in` - reads audio from the sound card.\n- New synth `:sound_in_stereo` - reads audio from the sound card.\n- All FX now have a `pre_mix:` opt. This allows the audio flow to\n  completely bypass a given FX (unlike `mix:` which passes the audio\n  through the FX but modifies the amplitude afterwards).\n- Teach `control` to manipulate the last triggered synth by default. For\n  example, `control amp: 3` will set the `amp:` opt of the last\n  triggered synth to 3. However, `control foo, amp: 3` will still\n  specifically control synth `foo`.\n\n### Samples\n\n- New opt `slice:` - lets you play a specific slice of a sample. The\n  default number of slices is 16 which may be changed with the\n  `num_slices:` opt. Sample is divided equally into the number of slices\n  without regard for audio content and onset points. The `slice:` opt\n  also works with `pick` for triggering random sample slices: `sample\n:loop_amen, slice: pick`.\n- New opt `onset:` - lets you play a specific percussive part of a\n  sample. Uses automatic onset detection to determine the points in the\n  sample that go from quiet to loud quickly. Unlike `slice:`, `onset:`\n  does not necessarily divide a sample into equal onsets - some onsets\n  will be smaller or bigger than others and the number of onsets is\n  determined by the algorithm and isn't known in advance.\n\n### GUI\n\n- New scope visualisers.\n- Allow files to be dragged from the OS into the text area. This inserts\n  the file/folder name as a string.\n- GUI now remembers the last directory you saved or opened a file\n  to/from as the default location for next time.\n- Swap align button for a scope button. Given that alignment now happens\n  automatically, a specific button seems somewhat redundant. Instead we\n  now have a button for toggling the visibility of the scope(s).\n- Loading multiple samples simultaneously is now much faster.\n- Preferences have been slightly re-organised.\n- Preferences now has a Master volume slider which controls Sonic Pi's\n  audio amplitude independently from the system volume.\n- All buttons now display status message + shortcut where available.\n- Enable app transparency slider for Windows.\n- Dark and light theme colours have been slightly polished and unified\n  to use the same logic.\n- On multi-screen systems, full-screen mode now defaults to the app's\n  current screen.\n\n### Documentation\n\n- Translations are now crowd-sourced. See:\n  `https://hosted.weblate.org/projects/sonic-pi/`\n- Improve docstring for `live_loop`.\n- Add 3 new MagPi articles on amplitude modulation, performance and practice techniques.\n- Add missing `pulse_width:` opt to flanger FX doc.\n\n### Improvements\n\n- Improve log messages written to `~/.sonic-pi/log`\n- Improve booting on Mac in the case that the audio card's rate can't be\n  determined.\n- Massively improve boot stability on Windows.\n- Improve error message for `play_chord` when notes isn't list like.\n- The number of samples that may be loaded at any one time has been\n  increased from 1000 to 4000. However, memory limitations still apply\n  (4000 1MB samples will require 4000MB of free system memory)\n- `pick` now returns a lambda if no list is given as the first argument\n  (which makes it useful for using with sample's `onset:` and `slice:`\n  opts.\n- Audio server is now paused when app is not in use - reducing CPU load\n  and battery consumption.\n- Error messages now report names matching the editor tabs such as `buffer 0`.\n\n### Bugfixes\n\n- Decrease duration of `:loop_tabla` so that it correctly loops. (Length\n  reduced to 10.674 seconds).\n- Enforce UTF-8 encoding of all incoming text.\n- Fix `:reverb` FX's `mix:` opt to ensure it's in the range 0 to 1.\n- `sample nil` now no longer plays a sample - it was incorrectly\n  defaulting to the first built-in sample (`:ambi_choir`)\n- `pick`'s `skip:` opt now works as expected: `pick(5).drop(1) == pick(5, skip: 1)`\n- `sample` now prints a 'no sample found' message with both `sample nil` and `sample []` rather than incorrectly playing the first built-in wav file.\n- Limit `:piano` synth to notes less than 231 as higher values crash the audio server.\n\n<a name=\"v2.10\"></a>\n\n## Version 2.10 - 'Cowbell'\n\n_Friday 15th April, 2016_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.10.0)\n\n_\"I gotta have more cowbell!\"_ - The Bruce Dickinson\n\nThe main feature in this release is the completely new sample system for\nworking with large folders of samples. You can now easily index into and\nfilter over whole folders of samples with a simple yet powerful filter\nsystem. This system has been in development for over a year now and has\nbeen tuned and tweaked over many performances and practice sessions. See\nthe documentation and examples for `sample` as well as the new tutorial\nsection 3.7 for details.\n\nWe also have a number of exciting new sounds to play with including some\nbeautifully sounding chiptune synths, fun retro FX and new drum samples\nincluding a full tabla set and a cowbell.\n\nFinally, even more boot issues on both OS X and Windows have been\nfixed, making this the most polished and stable release to date.\n\nNow go and get your live code on!\n\n### Breaking Changes\n\n- `use_sample_pack_as` and `with_sample_pack_as` have been removed.\n- A synth opt value of `nil` now no longer resolves to 0.0. Instead it\n  masks any defaults and ensures the downstream default (for the actual\n  synthdef itself) is honoured. This allows you to override any existing\n  synth defaults specified via `use_synth_defaults` for a given synth\n  trigger.\n- Default schedule ahead time is now 0.5s on all platforms for\n  consistency (except for Raspberry Pi 1 which remains at 1s).\n\n### New Fns\n\n- `current_random_seed` - Get the current seed value of the random generator.\n- `set_cent_tuning!` - global tuning.\n- `on` - similar to `if` but behaves the same as the `on:` opt for\n  synths and samples.\n- `halves` - create a ring of successive halves.\n- `doubles` - create a ring of successive doubles.\n- `pick` - similar to shuffle but allows duplicates. You may also\n  specify how many items to pick.\n- `fx_names` - create a ring of all available FX.\n\n### Synths & FX\n\n- New synth `:dtri` - detuned triangle waves.\n- New synth `:pluck` - a lovely synthesised plucked string.\n- New synth `:chiplead` - retro NES style lead synth.\n- New synth `:chipbass` - retro NES style bass synth.\n- New synth `:chipnoise` - retro NES style noise synth.\n- New FX `:whammy` - low-tech transposition effect similar to the\n  Digitech Whammy guitar pedal.\n- New FX `:octaver` - low-tech octave effect similar to early guitar\n  pedals.\n- New FX `:vowel` - modifies incoming signal to match human vowel\n  sounds.\n- New FX `:mono` - mono effect for summing stereo channels.\n- `:tanh` FX is now more crunchy by default.\n- `:compressor` and `:krush` FX now correctly honour the `mix:` opt.\n\n### Samples\n\n- Samples in FLAC format (Free Lossless Audio Codec) are now supported!\n- The `sample` fn gained source and filter pre-opts. You may now specify\n  a number of parameters directly before the opts which describe both\n  folders containing samples and filters over those folders to allow you\n  to easily and quickly work with large sample sets. See Section 3.7 of\n  the tutorial for more information.\n- Samplers now have `hpf:` and `lpf:` opts. Any `cutoff:` opts are\n  automatically switched to `lpf:` and any errors will be reported with\n  an `lpf:` prefix.\n- The sampler synth gained a compressor enabled via the `compress:`\n  opt. This means you can now compress any triggered sample directly\n  without the need to reach for an FX.\n- Samplers gained the `pre_amp:` opt which applies the amp at the\n  beginning of its internal signal chain. You can use this to overload\n  the new compressor.\n- Samplers now have both high pass and low pass filter envelopes which\n  behave similarly to the amplitude envelope but control internal hpf\n  and lpf FX. These are available via new opts which mirror the standard\n  envelope opts but with a `hpf_` and `lpf_` prefix (such as\n  `hpf_attack`, `lpf_decay_level` and friends).\n- Passing a directory path to `load_samples` will now load all the\n  samples within that directory.\n- Passing a directory path to `free_samples` will now free all the\n  loaded samples within that directory.\n- Samples are now loaded asynchronously in a separate thread. This\n  therefore doesn't block the current thread and cause any subsequent\n  synth/sample triggers to be late.\n- Sample trigger logging now includes the directory of the contained\n  sample.\n- Samples are now reloaded asynchronously after a server reboot (and\n  therefore no longer block execution).\n- Add new `:tabla_` sample group with a range of tabla drum sounds.\n- Add new `:vinyl_` sample group with a range of vinyl scratches and\n  hisses.\n- Add new samples: `:drum_cowbell`, `:drum_roll`, `:misc_crow`,\n  `:misc_cineboom`, `:perc_swash`, `:perc_till`, `:loop_safari`,\n  `:loop_tabla`.\n\n### GUI\n\n- Add new preference to enforce strict synth/FX timing. When enabled\n  synths and samples no longer trigger if it is too late - instead they\n  are silent and print a warning message. This behaviour ensures samples\n  or synths are never triggered out of time.\n- New load button which will load the contents of a file into the\n  current buffer.\n- The vertical bars which help visualise nesting now render in a\n  contiguous fashion over blank lines.\n- `C-k` now nukes over trailing whitespace.\n- `load_sample` now has sample autocompletion.\n- GUI now correctly reports if the host is a Raspberry Pi 3.\n- New editor preference - Log Auto Scroll. When enabled will always\n  scroll log to the bottom after printing every new message.\n- Whitespace at top and bottom of buffer is no longer trimmed.\n- Hitting `RETURN` now auto-indents the buffer - ensuring that the\n  cursor is moved to the correct indentation on the following line.\n- Added Chinese Simplified GUI translation.\n- Log visibility now correctly matches GUI preference.\n\n### Documentation\n\n- New tutorial section 3.7 on Sample Pack Filters.\n- New appendix sections.\n- Examples for `sample` fn have been completely rewritten and extended.\n\n### Improvements\n\n- `scale` and `chord` can now handle being passed no tonic such as:\n  `(chord :minor)` which will return a ring of offsets from 0.\n- `chord` learned new variants: `add2`, `add4`, `add9`, `add11`,\n  `add13`, `madd2`, `madd4`, `madd9`, `madd11`, `madd13`\n- The ring's `.take` method can now take more elements than the original\n  ring by wrapping around:\n  `(ring 1, 2, 3).take(5) #=> (ring 1, 2, 3, 1, 2)`\n- Rings may now be added or subtracted from each other e.g.\n  `(ring 1, 2,  3) + (ring 4) #=> (ring 1, 2, 3, 4)`\n- Adding or subtracting a number from a ring will create a new ring with\n  the number added or subtracted from each of the original ring's\n  elements: `(ring 1, 2, 3) - 1 #=> (ring 0.0, 1.0, 2.0)`\n- Calling `(ring 1, 2, 3).take(0)` will now return an empty ring.\n- `density` now complains if it isn't passed a do/end block.\n- Improve error messages for `use/with_synth` when accidentally passed opts.\n\n### Bugfixes\n\n- On OS X only raise an error on boot if it's clear the sound card's in\n  and out rates are different.\n- Improve robustness of boot process on Windows.\n- Rest notes are no longer printed if synth logging is disabled.\n- No longer apply synth defaults to FX.\n- You may now control opts that have no associated info (previously it\n  would raise a 'not modulatable' error).\n- Fix index lookup of Vectors.\n- Fix `C-i` doc lookup shortcut to work with `:tb303` synth docs.\n- `C-i` now always displays docs where available (previously it was\n  possible for docs not to be displayed).\n- Sliding between chords now works correctly\n- Windows version will now boot on multiple networked machines logged in\n  with the same account.\n\n<a name=\"v2.9\"></a>\n\n## Version 2.9 - 'Venster'\n\n_Thursday 31st December, 2015_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.9.0)\n\nHot on the heels of the previous release comes `v2.9` codenamed\n`Venster` (Dutch for window). This release has a specific focus on\nfixing all the known issues with Sonic Pi running on Windows. If you've\ntried Sonic Pi on Windows before and had issues, make sure to try it\nagain with `v2.9`. If you're still having issues on Windows please do\nlet us know so we can fix it as soon as possible.\n\nFor all you Raspberry Pi and Mac OS X users - you're not left out. Sonic\nPi is just as stable as it was before (if not more stable) and `v2.9`\ncomes with a surprising amount of tweaks and features for its short 1\nmonth development cycle. There's two new FX to play with: `tanh` and\n`gverb` as well as a heavily revamped logging system which is much\nclearer about printing which opts are actually being used for your\nsynths and samples. Finally, we now include of all the published MagPi\nmagazine articles in the tutorial. We also now have Hungarian and\nNorwegian translations of the GUI.\n\nHappy Live Coding!\n\n### Breaking Changes\n\n- Rename fn `invert_chord` to `chord_invert`\n- Sampler no longer mixes `rate:` and `pitch_stretch:` opts. It's now\n  possible to set the `rate:` independent of the `pitch:` modification\n  caused by `pitch_stretch`.\n\n### New Fns\n\n- `block_duration` - returns the duration of the given block in seconds (not scaled with the BPM).\n- `block_slept?` - returns true if the contents of the block slept or synced.\n- `synth_names` - returns a list of all the available synths\n- `reset_mixer!` - resets the main mixer back to its default values.\n- `sample_free` - unload a sample from memory to free up memory usage.\n- `sample_free_all` - unload all samples from memory.\n- `use_octave` - similar to `use_transpose` but for whole octaves.\n- `with_octave` - similar to `with_transpose` but for whole octaves.\n- `use_merged_sample_defaults` - similar to `use_merged_synth_defaults`\n  but for samples\n- `with_merged_sample_defaults` - similar to\n  `with_merged_synth_defaults` but for samples\n- `use_cent_tuning` - uniformly tune all subsequent notes in cents\n- `with_cent_tuning` - uniformly tune all notes in cents within the block\n\n### Synths & FX\n\n- New FX `tanh` - for more distortion goodness.\n- New FX `gverb` - a different reverb FX to play with.\n\n### GUI\n\n- Synths and samples now also log defaults set by `use_synth_defaults`\n  and friends.\n- Opts are logged in the order they were defined with local opts first\n  followed by inherited opts.\n- BPM scaling is now accounted for in logging values.\n- Log metadata such as run number and time is now printed in a more\n  code-like way: as a hash of key value pairs.\n- `C-k` will now kill multiple lines if lines end with `,`.\n- When saving a buffer a `.txt` extension is automatically added to the\n  file name if none specified.\n- Add Hungarian and Norwegian translations of GUI.\n- Add Spanish translation of tutorial.\n- Add title to main window - enables Sonic Pi to be selected in\n  screen-sharing app lists such as Google Hangouts and OBS.\n- Add autocompletion for tuning systems.\n\n### Documentation\n\n- Add 8 complete MagPi magazine articles to the tutorial in appendix A.\n- Add new example 'ambient experiment' by Darin Wilson.\n- Add new example 'chord inversions' by Adrian Cheater.\n- Change tutorial license to CC-BY-SA 4.0.\n- Add instructions for compiling and building on Windows.\n- Many, many minor tweaks and improvements.\n\n### Improvements\n\n- Add `sync:` opt to `live_loop` and `in_thread`. This now syncs the\n  live loop once on creation. Similar to the `delay:` opt. If both\n  `sync:` and `delay:` are specified then the delay happens before the\n  sync.\n- The `synth` fn can now play chords with the `notes:` opt such as:\n  `synth :dsaw, notes: (chord :e3, :minor)`. This will return a single\n  controllable synth node representing all the notes similar to\n  `play_chord`.\n- BPM scaling and other normalisation is now honoured when controlling nodes\n- The `on:` opt is now honoured when playing chords.\n- Samplers sound signal now bypasses filter envelope when not used.\n- It is now possible to use externally defined FX synths by passing a\n  string as the FX name: `with_fx \"my_shiny_effect\"`. This needs to be\n  loaded manually via `load_synthdefs`.\n- OS X now supports rates other than 44.1k provided they are similar for\n  both audio in and out.\n- Run code in `~/.sonic-pi/init.rb` on launch if it exists.\n- If environment variable `SONIC_PI_HOME` is set it will be used over\n  `~` as the root of the user's `.sonic-pi` directory (used to auto-save\n  files and store logs).\n- Default sound card selection is now honoured on Raspberry Pi - so you\n  may now use your IQaudIO hat (or similar) out of the box.\n\n### Bugfixes\n\n- Fix number of synth validation errors.\n- Fix sporadically failing boot issues on Windows\n- Add auto-reboot functionality for audio server. This now detects\n  errors in the server (such as a killed or zombied process) and\n  automatically reboots it to enable Sonic Pi to continue without a full\n  restart. Reboots automatically reload all loaded samples and\n  synthdefs.\n- `sample_duration` now correctly takes account of TL defaults set by\n  `use_sample_defaults`.\n- Sampler opts `pitch_stretch`, `beat_stretch` and `rpitch` can now be\n  used in TL defaults.\n\n<a name=\"v2.8\"></a>\n\n## Version 2.8 - 'Karlsruhe'\n\n_Friday 20th November, 2015_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.8.0)\n\nThis release, named after Karlsruhe, one of the home cities of live\ncoding, is mainly a maintenance release with a strong focus on both\nperformance, stability and documentation. This is therefore the fastest\nand most stable release of Sonic Pi ever with a massive 10% performance\nimprovement on the original Raspberry Pi 1. It also ships with new\ntranslations in Polish, Japanese and French. Many of these improvements\n(such as the complete rewrite of the OSC stack) are not documented in\nthis release list but can instead be found in the commit logs over on\nGithub.\n\nHowever, not to go unnoticed are a number of exciting new features. For\nexample we now have a new Band EQ FX, the ability to use MIDI note names\nsuch as `:e5` as values for opts such as `cutoff:`, and new powerful\ncutoff envelopes on the sampler.\n\n### Breaking Changes\n\n- Shortcuts for switching buffers have changed. They are now `M-{` and\n  `M-}` for switching left and right respectively.\n- `sync` no longer inherits BPM by default. Set the `bpm_sync:` opt to\n  true to enable BPM inheritance.\n- Random seed generation for new threads is now reset on calls to\n  `use_random_seed`.\n\n### New Fns\n\n- `octs` - returns a ring of successive octaves.\n- `assert` - for raising an exception if the argument is not true.\n- `assert_equal` - for raising an exception if the two arguments are not\n  equal.\n- `bt` - converts the specified time w.r.t. the current BPM.\n- `inspect` - similar to `print` but prints the inspected version of the argument.\n\n### GUI\n\n- New translations for Polish, Japanese and French.\n- Improve efficiency of logging panel.\n- `M-RET` is now a duplicate shortcut for running the code.\n- Log title bar is now hidden in full-screen mode.\n- Log - don't display └ or ├ if the line is blank, instead display │\n- Add sample name autocompletion to more fns such as `sample_duration`.\n\n### Documentation\n\n- New tutorial section on ring chains (chainable functions for modifying rings)\n- Tilburg 2 example slightly tweaked for Raspberry Pi 1 compatibility.\n- Many minor tweaks and improvements in all areas.\n\n### Synths & FX\n\n- New FX - Band EQ for attenuating or boosting a specific frequency band.\n- New synth - DPulse - a detuned pulse wave.\n- Sampler now has a cutoff envelope which can be accessed via new opts\n  which mirror the standard envelope opts but with a `cutoff_` prefix\n  (such as `cutoff_attack`, `cutoff_decay_level` and friends).\n- Sampler now correctly handles samples with different sample rates.\n- Bitcrusher FX now has an internal low pass filter modifiable via a new `cutoff` opt.\n- Panslicer now correctly honours min and max pan values.\n- New default opt `on:` for both `sample` and `synth`. This acts like\n  `if` but ensures all the opt values are evaluated (useful if wanting to\n  keep the consumption of random streams or ticks consistent even when\n  not triggering a synth.\n- MIDI opts such as `cutoff:` can now accept note names such as `:c4`.\n- FX learned the global `slide:` opt to match synths.\n\n### Improvements\n\n- Massive performance improvements.\n- Teach `play_pattern_timed` to handle rings.\n- `current_transpose` now returns 0 if there is no current\n  transposition.\n- BPM scaling is now honoured when controlling synths and FX\n- All `with_fx*` fns now return the result of their block.\n- `spark` now handles rings correctly.\n- `spark` now treats booleans as 1s and 0s so you can now spark rings of bools.\n- `puts`, `print` and `mc_message` now handle multiple message arguments\n\n### Bug Fixes\n\n- Ensure `with_fx` doesn't swallow TL modifications such as\n  transposition, current synth etc.\n- Ensure `with_fx` doesn't affect random seed.\n- Improve reliability of boot process on Mac and Windows.\n- The FX `pre_amp:` opt is no longer scaled w.r.t. the current BPM.\n- Fixed GUI side of update checking system.\n\n<a name=\"v2.7\"></a>\n\n## Version 2.7 - 'Rerezzed'\n\n_Thursday 10th September, 2015_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.7.0)\n\nThis release brings a substantial change to the random number\ngenerator. This has the unfortunate side effect of breaking backwards\ncompatibility. If you have been using `rand`, `choose`, `shuffle` and\nfriends to create predictable patterns for your riffs, your code will\nproduce different results in this release. Please let me apologise and\nsay it's for a good cause. So what is this good cause? Well, you can\nnow jump backwards and forwards through the random stream giving you way\nmore creative control than before! The random stream is now also unified\nwith the random stream on the synthesis server allowing you to sync\nbehaviour between synths and code. Exciting times.\n\nThe sampler has also been super charged. We can now easily change the\nrate via MIDI note intervals with `rpitch:` and stretch the sample whilst\npreserving pitch via `pitch_stretch:` (although with variable results\n`;-)`).\n\nFinally you can now control the global mixer with `set_mixer_control!`\nfor those full filter sweeps over the entire sound...\n\nHave fun and happy live coding!\n\n### Breaking Changes\n\n- Complete rewrite of random number system. This means if you've been\n  combining calls to `use_random_seed` with randomisation to create\n  predictable melodies/rhythms/timbral manipulations you will\n  unfortunately get different results in `v2.7`. This change is to\n  synchronise both the Ruby rand stream with the one in SuperCollider as\n  well as enabling the reversal of calls to rand via `rand_back`.\n- `sync` now causes the BPM to be inherited from the thread calling the\n  matching `cue`. This may be disabled with the new `bpm_sync:` opt.\n- `rrand` and `rand` now return 0 if called with 0.\n- `invert_chord` now handles negative inversions in a more musically\n  appropriate manner..\n\n### New Fns\n\n- `ratio_to_pitch` which provides the inverse of `pitch_to_ratio`\n- `midi_notes` - returns a ring of numbers (mapping the source\n  ring/array through the fn `note`).\n- `rand_back` - reverse the random stream and 'undo' calls to `rand`\n- `rand_skip` - skip forward through the random stream.\n- `rand_reset`- reset the random stream to the last seed.\n\n### GUI\n\n- It is now possible to toggle the commenting of whole selections or\n  individual lines with the shortcut `M-/`.\n- Added Icelandic translation.\n\n### Synths & FX\n\n- All synths learned the `decay_level` opt to allow the sustain phase to\n  shift between two distinct values. The default value for `decay_level`\n  is to mirror `sustain_level:` thus preserving current behaviour.\n- `play` and `synth` have now learned the `pitch:` opt to match\n  `sample`. This just increments or decrements the final note.\n- `sample` now correctly validates opts.\n- `sample` learned the `pitch_stretch:` opt which combines `rate:`\n  modification (similar to `beat_stretch:` with `pitch:`. Attempts to\n  maintain the pitch whilst simultaneously changing the rate. The\n  underlying implementation is very basic and can easily destroy the\n  sound.\n- `sample` learned the `rpitch:` opt for simple rate pitch\n  modulation. This modifies the rate to match the specified number of\n  MIDI notes relative from the current pitch. For example, a `rpitch:`\n  of 12 would double the rate.\n- The unit of the FX `:echo`'s `decay:` opt is now beats and the value\n  is scaled with the BPM.\n\n### Examples\n\n- Most examples have been tweaked to sound good with the new random\n  generator.\n- Tilburg has been replaced with Tilburg 2. Play it and get your\n  Algorave on!\n\n### Improvements\n\n- Auto-align code on Run.\n- `live_loop` learned the `seed:` opt which will set the new thread with\n  the specified seed prior to initial run.\n- Add check to ensure BPM is a positive value.\n- `density` has now been taught to handle values between 0 and 1 which\n  will now stretch time for the specified block.\n- Errors now no longer print out unusual print version of context object\n  i.e. #<SonicPiSpiderUser1:0x007fc82e1f79a0>\n- Both `in_thread` and `live_loop` have now learned the `delay:` opt\n  which will delay the initial execution by the specified number of\n  beats.\n- Buffer and thread name are now printed on error.\n- `sample_duration` now understands all the opts that you can pass to `sample`\n- It is now possible to do basic arithmetic on symbols representing\n  rests: `:r + 3` returns `:r` (a rest plus any MIDI note shift is still\n  a rest).\n\n### Bug Fixes\n\n- Fixed crash when synth args were specified as Rationals.\n- `note_info` now correctly handles octaves.\n- Fix windows paste shortcut `C-v`.\n- Teach `invert_chord` how to properly handle out of range index ranges.\n\n<a name=\"v2.6\"></a>\n\n## Version 2.6 - 'Algorave'\n\n_Thursday 30th July, 2015_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.6.0)\n\nThe laser beams sliced through the wafts of smoke as the subwoofer\npumped bass deep into the bodies of the crowd. The atmosphere was ripe\nwith a heady mix of synths and dancing. However something wasn't quite\nright in this nightclub. Projected in bright colours above the DJ booth\nwas futuristic text, moving, dancing, flashing. This wasn't fancy\nvisuals, it was merely a projection of Sonic Pi running on a Raspberry\nPi. The occupant of the DJ booth wasn't spinning disks or playing MP3s,\nshe was writing, editing and evaluating code. She was _live coding_ and\nthis was an [Algorave](http://twitter.com/algorave).\n\nThis release is codenamed [Algorave](http://twitter.com/algorave) to\ncelebrate that Sonic Pi is now ready to be performed within nightclubs\nas well as still being a fantastic tool for learning how to code\ncreatively. There are many improvements as detailed below. However,\nlet's just take a brief look at some of the most fun. Firstly we have\nthe new error reporting system to make it easier to find and debug your\nerrors. Syntax errors are now blue and runtime errors pink. We also have\na new look and feel including a new dark mode for performing in dark\nplaces. We also have some fantastic new synths, FX and have even\nimproved the standard synths. For example, `sample` now lets you stretch\nto match the beat with the `beat_stretch:` opt and change pitch with\n`pitch:`. The `slicer` FX now sports a fantastic deterministic\n`probability:` opt for creating and manipulating rhythmic structures\nwith ease. Finally there's the new thread local `tick`/`look` system\nwhich will revolutionise the way you work with `ring`s within\n`live_loop`s. Of course there's so much more too!\n\nEnjoy this release and happy [Algoraving!](http://algorave.com)\n\n### Breaking Changes\n\n- The `res:` opt for all synths and FX now has range 0->1 rather than\n  1->0. This means that a higher res value results in more\n  resonance. This will hopefully be more intuitive to beginners and less\n  surprising for people with existing synth knowledge.\n- The fn `stop` has been renamed to `kill` for killing specific\n  synths. In its place a new fn `stop` has been added to stop a given\n  thread or `live_loop`.\n- `invert_wave` opts are now inverted. The default is now 0 which\n  has the same behaviour as the old 1. This means that it's more\n  intuitive to use the opt as to invert the current wave, you now\n  specify: `invert_wave: true`, rather than `invert_wave: false`. This\n  shouldn't affect any code which doesn't explicitly set the `invert_wave:`\n  opt. Pieces which have explicit inversion need to swap all 0s for 1s\n  and vice versa.\n- The `res:` opt for `rrand` and `rdist` has been renamed to `step:` to\n  avoid confusion with the resonance opt for cutoff filters.\n- Rename `pitch_ratio` to `pitch_to_ratio` to keep in line with other\n  similar fns such as `midi_to_hz`.\n\n### New Fns\n\n- New thread-local (i.e. live_loop local) counter system via fns `tick`\n  and `look`.\n- New fn `vector` which creates a new kind of Array - an immutable\n  vector (`SPVector`) which is now the default base class for all rings.\n- New fns `use_sample_defaults` and `with_sample_defaults` which act\n  similarly as their `*_synth_defaults` counterparts but for samples not\n  synths.\n- New fns `use_tuning` and `with_tuning` for exploring other tuning\n  systems such as `:just`, `:pythagorean`, and `:meantone`.\n- New fn `invert_chord` for chord inversions.\n- New fn `current_beat_duration` for returning the duration of the\n  current beat in seconds.\n- New fn `note_range` for returning a range of notes between two notes\n  with a `pitches:` opt for constraining the choice of filler notes.\n- New fns `scale_names` and `chord_names` for returning a ring of all\n  chords and scales.\n- New example `rerezzed` - strongly influenced by Daft Punk's track\n  `derezzed`.\n- New example `reich phase` - a nice way of combining `live_loop`s and\n  `tick` to create sophisticated polyrhythms.\n- New fns `use_cue_logging` and `with_cue_logging` for enabling and\n  disabling the logging of `cue` messages.\n\n### GUI\n\n- New visual look and feel including a new Dark Mode for live coding in\n  night clubs.\n- New preferences for hiding/showing aspects of the GUI such as the\n  buttons, log, tabs etc.\n- New preference for full screen mode.\n- Improve error message reporting. Syntax errors are now made distinct\n  from runtime errors with colour-coded messages. Also, the line number\n  of the error is much more visible, and the line of the error is\n  highlighted with an arrow in the left-hand margin.\n- Workspaces are now named buffers. This is a smaller word which works\n  better on lower res screens and is also a lovely term used by a number\n  of wonderful programming editors such as Emacs.\n- Print friendly messages to the log on boot.\n- Add pref option to check for updates now.\n\n### Synths & FX\n\n- New FX - `krush` for krushing the sound.\n- New FX - `panslicer` similar to `slicer` and `wobble` but modulates\n  the stereo panning of the audio.\n- New synth `subpulse` for a full range pulse with extra bass.\n- New synth `blade` - a moody Blade Runner-esque synth violin\n- New synth `piano` - a basic piano emulation. Only capable of whole notes.\n- FXs `slicer` and `wobble` now have a wonderful new `probability:` opt\n  which will only slice on (or off depending on wave inversion) with the\n  specified probability. The behaviour is deterministic, so repeated\n  calls with the same `seed:` and `probability:` opts will result in the\n  same behaviour. Great for adding interesting rhythmic variation to\n  sound.\n- FXs `slicer` and `wobble` now have smoothing opts for even more\n  control over the resulting wave form.\n- Teach `sample` the opt `beat_stretch:` for modifying the rate of the\n  sample to make sure the duration of the sample is n beats long (with\n  respect to the current bpm). Note: stretching the beat _does_ change\n  the pitch.\n- Teach `sample` the opt `pitch` to enable pitch shifting on any sample.\n- FX `flanger`'s feedback mixing is now more fair and is less likely to\n  hike up the amplitude.\n\n### Improvements\n\n- Teach `note_info` to also handle a number as its param.\n- Teach `factor?` to handle division by 0.\n- Teach `load_sample` to throw exception when passed an empty path.\n- Now throws an exception when you attempt to create an empty ring.\n- Rings are now immutable (in the Clojure sense) which means they can be\n  safely passed to multiple threads/live_loops without any issues.\n- Teach `use_sample_bpm` the opt `num_beats:` to indicate that a given\n  sample consists of a specific number of beats.\n- Teach `comment` and `uncomment` to require blocks.\n- Teach synth chord groups to allow their notes to be controlled\n  individually to allow transitions between chords.\n- Throw nicer exception when unable to normalise synth args\n- Teach `chord` the new opt `invert:` as a shortcut to the new\n  `invert_chord` fn.\n- Teach `sample_duration` about the opts `start:` and `finish:` and\n  envelope opts such as `attack:` and `release:`. This allows you to\n  replace any call to `sample` with `sample_duration` to get the exact\n  duration of that call.\n- Teach `chord` the opt `num_octaves` to enable the easy creation of\n  arpeggios.\n- It is now possible to set the block type in the Minecraft API.\n\n### Bug Fixes\n\n- Fix bug in `with_sample_pack_as` to now correctly accept a block.\n- `mc_surface_teleport` no longer throws an error.\n- `Array#shuffle` now works correctly with the random seeds for\n  deterministic behaviour.\n- Fix broken behaviour with multiple nested calls to `*_sample_bpm`.\n\n<a name=\"v2.5\"></a>\n\n## Version 2.5 - 'Craft'\n\n_Monday 13th April, 2015_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.5.0)\n\nThis release comes with support for\n[Minecraft: Pi Edition](http://pi.minecraft.net) installed on the\nRaspberry Pi. You can now create music with Minecraft visuals or even\ncode up a synth score in Minecraft blocks and read and play the score\nfrom Sonic Pi! Another exciting aspect of this release is much improved\neditor functionality for navigating around and manipulating code via\nkeyboard shortcuts. This means that live coding just got a lot more\nfun. The keyboard shortcuts are based on the standard shortcuts provided\nby [GNU Emacs](https://www.gnu.org/software/emacs/) - the oldest and\nmost powerful text editor in use by wizard programmers today.\n\n### Breaking Changes\n\n- `invert_wave` now defaults to 1 everywhere. I found I always inverted\n  the wave every time I used a synth/fx where wave inversion was\n  key. This seemed like such a better default I've broken compatibility\n  for it. Apologies if this has affected you.\n- The `flanger` FX now defaults the optional arg `stereo_invert_wave` to\n  1.\n- Renamed FX `ring` to `ring_mod` to reduce the potential for confusion\n  with the `ring` data-structure.\n- `Tab` now indents current line or selection rather than inserting a\n  useless tab character.\n\n### New\n\n- Support for programming [Minecraft Pi Edition](http://pi.minecraft.net).\n- `sync` now accepts multiple cue ids and will sync on the first matching id.\n- New fn `pitch_ratio` for converting a midi note to a frequency\n  ratio. Useful for tuning samples.\n- New fn `line` for creating a line from start to finish with a specific\n  number of slices.\n- New fn `spark` for displaying lists of numbers in a fancy text-graph\n  (`▁▃▅▇`) in the log.\n- On stop, amplitude of output slides down over 1s to silence for a\n  smoother transition.\n- `sample_duration` now scales result based on current BPM.\n- `range` now accepts optional args: `inclusive:` and `step:`.\n\n### GUI\n\n- German translation of GUI and tutorial. Simply open Sonic Pi with a\n  machine with a German localisation setting.\n- Display GUI fully maximised when opening for first ever time.\n- Workspace indexing now starts at 0 to match standard programming indexes.\n- New shortcuts - `M-<` and `M->` for switching workspaces.\n- Many new Emacs-based code navigation and editing shortcuts. See the\n  shortcut cheatsheet in the built-in tutorial for more information.\n- Increase height of doc and error panes.\n- Improve error pane colour scheme.\n- Auto-align now trims whitespace from start and end of buffer.\n- Add preference toggle to hide/show line numbers.\n- Documentation now supports semantic formatting and highlighting.\n- Docsystem tabs are now positioned at the bottom for better navigation.\n- New preference to hide/show line numbers in editor.\n\n### Synths & FX\n\n- New FX - `:pitch_shift`\n\n### Bug Fixes\n\n- Fix OSC lib to properly encode multi-byte chars such as UTF8\n- Fix sporadic issue on some platforms when trigging percussive sounds\n  within a `reverb` FX caused a serious audio overload.\n- Add missing fn metadata for `*_sample_bpm`\n- Fix synth metadata for FX `:bpf`.\n- Fix arg metadata for `use_sample_pack_as`\n- Rings now pretty print themselves as `(ring 1, 2, 3)` rather than `[1, 2, 3]`.\n- `C-k` keyboard shortcut now copies text into the clipboard.\n- Scales and chords now return actual `ring`s rather than `ring`-like\n  things.\n- Improve Ring Mod FX arguments\n- Exceptions created within `with_fx` are now raised correctly.\n\n<a name=\"v2.4\"></a>\n\n## Version 2.4 - 'Defrost'\n\n_Wednesday 11th February, 2015_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.4.0)\n\nA quick release following `v2.3` to address an issue with the GUI\nfreezing on specific CPUs. However, although this release has had a\nsmall development cycle, it ships with three fantastic features. Firstly\nwe now have the `spread` fn which provides an amazing way to create\ninteresting rhythms with very little code. Secondly we can now use\n`cutoff:` on any sample massively increasing their timbral range and\nfinally we have three exciting new synths for you to play with. Have\nfun!\n\n### Breaking Changes\n\n- Unfortunately 5 pre-release synths accidentally slipped into\n  v2.3. Three of them have been polished up and are in this release (one\n  with major changes including a name change). However, the other two\n  have been removed.\n\n### New\n\n- New fn `spread` for creating rings of Euclidean distributions. Great\n  for quickly creating interesting rhythms.\n- GUI now automatically appends a `:` to the FX opt autocomplete list\n- Synths and FX now raise an exception if any of their non-modulatable\n  opts are modulated. This is disabled when the pref 'check synth\n  args' is unchecked.\n- GUI now renders pretty UTF-8 `└─` `├─` characters when printing in the log\n  on RP.\n- Improve docstrings for sample player.\n\n### Synths & FX\n\n- New Synth `:dark_ambience`, an ambient bass trying to escape the\n  darkness.\n- New Synth `:hollow`, a hollow breathy sound.\n- New Synth `:growl`, a deep rumbling growl.\n- Sampler synths now sport built-in `rlpf` and `normaliser` FX. These\n  are disabled by default (i.e. won't affect sound of the sample) and\n  can by enabled via the new `cutoff:`, `res:` and `norm:` opts.\n\n### Bug Fixes\n\n- Fix insanely obscure bug which caused the GUI to freeze on certain\n  platforms (32 bit Windows and RP2 with 2G/2G kernel).\n- Remove DC Bias offset from Prophet synth (see\n  <http://en.wikipedia.org/wiki/DC_bias>)\n\n<a name=\"v2.3\"></a>\n\n## Version 2.3 - 'Bitcrush'\n\n_Wednesday 28th January, 2015_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.3.0)\n\n### Breaking Changes\n\n- Playing chords with the fn `chord` now divides the amplitude of each\n  resulting synth by the number of notes in the chord. This ensures the\n  resulting amplitude isn't excessive and is normalised.\n- Chords now evaluate their args once and those args are used for all\n  synth triggers. This means random values are only generated once and\n  are similar across all notes in the chord. Previous behaviour can be\n  obtained by calling play multiple times with no interleaved sleeps.\n- Ensure each new thread's random number generator is unique yet seeded\n  in a deterministic manner. This stops random values across `at` from\n  being identical.\n- `range` is now exclusive: `(range 1, 5) #=> (ring 1, 2, 3, 4)`\n\n### New\n\n- New fn `density` for compressing and repeating time Dr Who style. For\n  example, wrapping some code with a call to density of 2 will double\n  the bpm for that block as well as repeating it twice. This ensures the\n  block takes the same amount of time to execute while doing double the\n  work.\n- New fns `with_bpm_mul` and `use_bpm_mul` which will multiply the\n  current bpm by a specified amount. Useful for slowing down and\n  speeding up the execution of a specific thread or live_loop.\n- New fn `rdist` - generate a random number with a centred distribution\n- New examples: `square skit`, `shufflit` and `tilburg`\n\n### Improvements\n\n- Teach control to ignore nil nodes i.e. `control nil, amp: 3` will do\n  nothing.\n- Teach Float#times to yield a float to the block. For example,\n  `3.4.times {|v| puts v}` will yield `0.0`, `1.0` and `2.0`.\n- Synth, Sample and FX args now handle bools and nil correctly. `true`\n  resolves to `1.0` and `false`, `nil` resolve to `0.0`. This allows you\n  to write code such as: `play :e3, invert_wave: true`\n- Teach `at` to handle varying block arities differently. See docs for\n  more detail. Original behaviour is preserved and only extended.\n- App now checks for updates (at most once every 2 weeks). This may be\n  disabled in the prefs.\n- Teach `:reverb` FX to extend its kill delay time with larger room\n  sizes to reduce the chance of clipping.\n\n### Synths & FX\n\n- New FX `bitcrusher` - for crunching and destroying those hi-fi sounds.\n- New FX `flanger` - a classic swhooshing effect typically used with\n  vocals and guitars.\n- New FX `ring` - ring modulation for that friendly Dalek sound\n- New FX `bpf` - a band pass filter\n- New FX `rbpf` - a resonant band pass filter\n- New FX `nbpf` - a normalised band pass filter\n- New FX `nrbpf` - a normalised resonant band pass filter\n\n### New Samples\n\n- `perc_snap` - a finger snap\n- `perc_snap2` - another finger snap\n- `bd_ada` - a bass drum\n- `guit_em9` - a lovely guitar arpeggio over Em9\n\n### Bug Fixes\n\n- Namespace `live_loop` fn and thread names to stop them clashing with\n  standard user defined threads and fns.\n- GUI no longer crashes when you start a line with a symbol.\n- `with_fx` now returns the result of the block\n- Kill zombie scsynth servers on startup for better crash recovery.\n- Handle paths with UTF8 characters gracefully\n- Force sample rate for output and input to 44k on OS X. This stops\n  scsynth from crashing when output and input sample rates are\n  different.\n\n<a name=\"v2.2\"></a>\n\n## Version 2.2 - 'Slicer'\n\n_Thursday 18th December, 2014_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.2.0)\n\nThis release brings a number of nice enhancements. However the main\nfeature is the accurate timing for triggering FX. This means you can now\nreliably use FX for accurate rhythmic purposes such as wobbling, slicing\nand echoes.\n\n### Breaking Changes\n\n- `use_sample_pack_as` now uses a double underscore `__` as a separator\n  between the user-specified alias and the sample name.\n\n### API Changes\n\n- Teach synth args to take prefixed maps: `play 50, {amp: 0.5}, {release: 2}, amp: 2`\n- Don't round Floats when user specifically prints them to log with puts\n- `with_fx` FX synths are now triggered using virtual time rather than\n  real time. This means that FX can now be used for rhythmical purposes.\n- Work on new `RingArray` data-structure. This is essentially an array\n  that wraps its indexes so you can use indexes larger than the array size.\n- New fn `ring` - `(ring 1, 2, 3)` creates a new ring array.\n- New fn `knit` - `(knit :a1, 2, :c1, 1)` returns `(ring :a1, :a1, :c1)`\n- New fn `bools` - `(bools 1, 0, 1)` returns `(ring true, false, true)`\n- New fn `range` - `(range 70, 100, 10)` returns `(ring 70, 80, 90, 100)`\n- New fn `sample_loaded?` - to detect whether a specific sample has been loaded\n\n### Synths & FX\n\n- Fixed regression in `:tb303` synth - sound is reverted to v2.0 behaviour\n- New Synth - `:square` - Pure square wave\n\n### GUI\n\n- Help system now auto-docks on close\n- Preferences are now remembered across sessions\n- On Raspberry Pi, previous volume and audio output options are forced\n  on boot.\n\n### New Samples\n\n- `bd_tek` - Bass drum\n\n### Bug fixes\n\n- `one_in` now returns false if num is < 1\n- Ensure `live_loop`'s no-sleep detector works within nested `with_fx` blocks\n- `chord` now returns a ring.\n\n<a name=\"v2.1.1\"></a>\n\n## Version 2.1.1 - 'Firewall'\n\n_Tuesday 25th November, 2014_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.1.1)\n\n- Windows version no longer needs special firewall exceptions to run\n- Added license information to info window\n- Minor grammar and spelling tweaks to tutorial\n\n<a name=\"v2.1\"></a>\n\n## Version 2.1 - 'Core'\n\n_Friday 21st November, 2014_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.1.0)\n\nThe focus of release is very much on technical improvements, efficiency\nand general polish.\n\nThe most obvious and exciting change is the introduction of the\n`live_loop` which will change the way you work with Sonic Pi. For more\ninformation on `live_loop` take a look at the new section in the\ntutorial. Another very exciting development is that v2.1 marks the\nofficial support for Windows thanks to the excellent work by Jeremy\nWeatherford. Finally, this release is also the first release where Sonic\nPi has a Core Team of developers. Please give a warm welcome to Xavier\nRiley, Jeremy Weatherford and Joseph Wilk.\n\n### API Changes\n\n- New fn `live_loop` - A loop for live coding\n- New fn `inc` - increment\n- New fn `dec` - decrement\n- New fn `quantise` - quantise a value to resolution\n- New fn `factor?` - Factor test\n- New fn `at` - Run a block at the given times\n- New fn `degree` - for resolving a note in a scale by degree such as `:i`, `:iv`\n- New fn `chord_degree` - Construct chords based on scale degrees\n- New TL fn `use_sample_bpm` - for changing the BPM based on a sample's duration\n- New fn `rest?` - Determine if note or args is a rest\n- New fn `vt` - Get virtual time\n- New fn `set_control_delta!` - Set control delta globally\n- `wait` now handles both `sleep` and `sync` functionality\n- Allow first arg to `play` to be a proc or lambda. In which case simple call it and use the result as the note\n- Teach `play` to accept a single map argument (in which case it will extract `:note` key out if it exists.\n- Fns `play` and `synth` now treat 'notes' `nil`, `:r` and `:rest` as rests and don't trigger any synths.\n\n### GUI Modifications\n\n- Updated and improved tutorial\n- Much improved autocompletion\n- Add HPF, LPF, mono forcer and stereo swapping preferences to new studio section for use when performing with Sonic Pi through an external PA.\n- Shortcuts overhauled - now supports basic Emacs-style Ctrl-\\* navigation.\n- Shortcuts Alt-[ and Alt-] now cycle through workspaces\n- Shortcuts now work when toolbar is hidden\n- Font sizes for individual workspaces are now stored between sessions\n- Ctl-Mouse-wheel zooms font on Windows\n- Links are now clickable (opening external browser)\n- Entries in docsystem's synth arg table are now clickable and will take focus down to arg documentation\n- Stop users accidentally clearing entire workspace if they type quickly after hitting run\n- Hitting F1 or `C-i` over a function name now opens up the doc system at the relevant place\n\n### Bugs/Improvements\n\n- Reworked examples.\n- Much improved efficiency in many areas - especially for Raspberry Pi.\n- Avoid occasional clicking sound when stopping runs\n- Note Cb is now correctly resolved to be a semitone lower than C\n- Non RP systems now start with more audio busses (1024)\n- Array#sample and Array#shuffle are now correctly seeded with thread local random generator\n- Log files are now placed into ~/.sonic-pi/log\n- Chords and scales now wrap around when accessed from indexes outside of their range.\n- `rand_i` and `rrand_i` now correctly return integers rather than floats\n- rrand arguments now correctly handle a range of 0 (i.e. min == max)\n- Line offset in error messages is now correct\n- When saving files on Windows, CRLF line endings are used\n- Stop users defining functions with same name as core API fns\n\n### Synths, Samples & FX\n\n- New samples (bass drums, snares and loops)\n- Allow `mod_range:` opt to have negative values (for oscillating with lower notes)\n- Change slide mechanism to default to linear sliding with support for changing the curve type. All modifiable args now have corresponding `_slide_shape` and `_slide_curve` args.\n- Improve TB303 synth - now supports separate cutoff ADSR envelopes. New opts:\n  - `cutoff_attack:`,\n  - `cutoff_sustain:`,\n  - `cutoff_decay:`,\n  - `cutoff_release:`,\n  - `cutoff_min_slide:`,\n  - `cutoff_attack_level:`,\n  - `cutoff_sustain_level:`,\n  - `cutoff_env_curve:`\n\n<a name=\"v2.0.1\"></a>\n\n## Version 2.0.1\n\n_Tuesday 9th September, 2014_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.0.1)\n\n- Fix recording functionality\n- Improve documentation content and layout\n- Close off OSC server from external clients\n- Add History, Contributors and Community pages to info window\n- Improve startup speed on OS X\n- Re-work and add to shortcuts for key actions:\n  - on RP they are all `alt-*` prefixed\n  - on OS X they are all `cmd-*` prefixed\n- Improve highlighting of log messages (`cue`/`sync` messages are more clearly highlighted)\n- Log now communicates when a run has completed executing\n- Fix bug encountered when stopping threads in super fast loops (stopped comms with server)\n\n<a name=\"v2.0\"></a>\n\n## Version 2.0 - 'Phoenix'\n\n_Tuesday 2nd September, 2014_\n[(view commits)](https://github.com/sonic-pi-net/sonic-pi/commits/v2.0.0)\n\n- Complete rewrite since v1.0\n- Support for Live Coding - redefining behaviour whilst music is playing\n- New timing system - timing now guaranteed to be accurate\n- Many new synths\n- New chainable studio FX system\n- Support for sample playback\n- Inclusion of over 70 CC0 licensed samples from <http://freesound.org>\n- Support for controlling and modifying synth, fx and sample playback\n  arguments after they have been triggered\n- Completely re-designed GUI\n- Help system with full documentation, tutorial and many examples\n- Record functionality (for recording performances/pieces)\n- Support for controlling system audio settings on RP\n"
        },
        {
          "name": "COMMUNITY.md",
          "type": "blob",
          "size": 1.4560546875,
          "content": "# Welcome to our Community\n\nJoin the friendly Sonic Pi community and share your ideas and thoughts\nwith other educators, musicians and live coders...\n\n\n## Share | Discuss | Learn\n*<https://in-thread.sonic-pi.net/>*\n\n<a href=\"https://in-thread.sonic-pi.net\">\n  <img src=\":/images/in_thread_screen.png\" height=\"254dx\" width=\"413dx\"/>\n</a>\n\nCome and join the friendly discussion over at\n[in_thread](https://in-thread.sonic-pi.net), the main community forum.\n\n\n## Patreon Supporters\n*<https://patreon.com/samaaron>*\n\nA growing number of very generous community members are actively helping\nto sustain further development and keep Sonic Pi free.\n\nIf Sonic Pi has made you smile and you'd like to help keep it free so it\ncan continue to be shared with the world, please consider joining the\nother lovely supporters over on [Patreon](https://patreon.com/samaaron).\n\nPatreon supporters also gain access to an exclusive Sonic Pi Discord server.\n\n## Twitter \n*<https://twitter.com/sonic_pi>*\n\nFor bite-sized chunks of the latest Sonic Pi news and information.\n\n\n## YouTube & Twitch\n*<https://youtube.com/samaaron/>* <br />\n*<https://twitch.tv/samaaron/>*\n\nSam Aaron frequently streams his live coding sessions on [YouTube](https://youtube.com/samaaron) and [Twitch](https://twitch.tv/samaaron) -\nplease drop by, say hello and ask lots of questions.\n\n\n## GitHub\n*<https://github.com/sonic-pi-net/sonic-pi>*\n\nFor developers interested in the full source code. The issue tracker is\nalso hosted here.\n\n\n\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.84375,
          "content": "# Contributing\n\nHello! If you are interested in contributing to Sonic Pi in some way, fantastic. Everyone is welcome to help!\n\nAre you wondering about the different ways you might be able to contribute? See [TYPES-OF-CONTRIBUTIONS.md](TYPES-OF-CONTRIBUTIONS.md).\n\nDo you want to know about all the new features that we'd love to see included in Sonic Pi? See [the Sonic Pi features project board](https://github.com/orgs/sonic-pi-net/projects/1). \n\n## Understanding the Sonic Pi source code\nThere are several ways that you can learn more about the technical design of the Sonic Pi source code.\n- You can read brief outlines of the source code structure, and see a diagram of the major components, available from the 'Development' section of the sidebar on the [Sonic Pi wiki](https://github.com/sonic-pi-net/sonic-pi/wiki). _**Note: these are all out-of-date to varying degrees and we are in the process of updating them - so for any serious use, feel free to talk with us directly in the mean-time.**_\n- You can study the source code itself at our official [Sonic Pi GitHub repository](https://github.com/sonic-pi-net/sonic-pi)\n- You can ask the core development team or wider Sonic Pi community questions at any of the places we gather as a [community](COMMUNITY.md)\n\n## Project and development process guidelines\nThere are several guidelines that we value when planning the format of new work. We encourage community contributors to keep these in mind also when thinking about contributing to Sonic Pi. They are:\n\n- We prefer to limit the number of different technologies/frameworks/languages used in the project where practical\n- We prefer friendly, conversational style for documentation over formal language\n- In line with the core aims of the project, we want Sonic Pi features to be simple enough for a 10 year old child to understand and use\n- We prefer proposed contributions, as well as the technical choices made when building them, to have clear benefits that outweigh any downsides\n- We prefer not to introduce potential instability or uncertainty into the code that is used in the app's build process unless there is a really good reason to do so\n- Since the Sonic Pi project is ultimately owned by @samaaron, all contributions need to be in a form that aligns with Sam's vision for the project, and that he will be able to understand and maintain if the original author moves on from the project\n\nAlso, regarding the Sonic Pi development process:\n- We don't set development deadlines\n- All work in progress we merge into the `dev` branch. We merge code into the `stable` branch for stable releases.\n- We want code intended to be merged into the `dev` or `stable` branches to be passing all tests where possible\n- We prefer an issue ticket to be raised as soon as possible when a new bug is discovered (ideally within 48 hours)\n- When someone intends to start work on an issue or new feature:\n  - They check first that no-one else intends to (or has already done) work on it, via the [Issues page](https://github.com/sonic-pi-net/sonic-pi/issues) or [the Sonic Pi features project board](https://github.com/orgs/sonic-pi-net/projects/1)\n  - If the issue or feature is freely available for work, the person who intends to start work on it mentions this publicly somewhere (for issues, leaving a message on the ticket requesting to be assigned to it, and for new features, mentioning it in any of the places we gather as a [community](COMMUNITY.md))\n\n## Ideal process for contributing with code\n1. Familiarise yourself with the part(s) of the code that you wish to contribute towards if necessary. We're always happy to answer questions about the Sonic Pi code!\n2. For complex or large code changes, it's worth initially discussing the potential solutions with the core team and other Sonic Pi contributors - either by opening an issue and labelling it as a feature request, or again by chatting with us at any of the places we gather as a [community](COMMUNITY.md).\n3. Fork a copy of the Sonic Pi repository to your personal GitHub account.\n4. Clone your fork to your local machine.\n5. Make changes to your local clone of Sonic Pi.\n6. Commit your changes and push them to your fork on GitHub.\n7. Open a Pull Request to the official Sonic Pi repository.\n8. If changes are requested either by bots attached to the Sonic Pi repository, or the core team, make the desired changes and push again to your fork on GitHub.\n9. Once your code has passed review, it will be merged.\n\n(If you need any further help with any of the above steps for preparing a Pull Request for us on GitHub, it's worth searching the [GitHub documentation](https://docs.github.com/) first, but feel free to ask us for help if you're still stuck after that).\n\n**Note**: if it is decided that a contribution will _not_ be included at the time, this does _not_ mean that the effort is not valued! if such a situation occurs, the core team will endeavour to provide an explanation.\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 37.765625,
          "content": "# Contributors\n\nWe would like to express our sincerest thanks and gratitude to everyone\nthat has helped with either the development of Sonic Pi or supported its\nuse in any capacity. On its own Sonic Pi is just a piece of\nsoftware. Only when combined with our kind and generous community does\nit become a powerful tool for sharing and celebrating the creativity of\ncode. Thank-you everyone.\n\n\n## A humble beginning\n\nThe start of any project is a fragile period which relies heavily on the\ngenerous support of others. We would like to offer our considered\ngratitude to the following people who provided support in the early days\nof Sonic Pi with their time, advice, and wisdom:\n\n* [Carrie Anne Philbin](https://twitter.com/missphilbin)\n* [Robert Mullins](https://www.cl.cam.ac.uk/~rdm34/)\n* [Alex Bradbury](https://twitter.com/asbradbury)\n* [Alan Blackwell](https://www.cl.cam.ac.uk/~afb21/)\n* [Rachel Drury](https://twitter.com/Rachel_Drury)\n* [Juneau Projects](http://www.juneauprojects.co.uk)\n* Stephan Lachowsky\n* [Jonathan Graham](https://twitter.com/graham_jp)\n\n\n## Organisations\n\nThe following organisations kindly contributed to Sonic Pi and provided\na fertile ground for its initial development and growth within\n[The University of Cambridge Computer Laboratory](https://www.cl.cam.ac.uk)\nthrough various collaborations, projects and other means:\n\n* [The Raspberry Pi Foundation](https://www.raspberrypi.org)\n* [The Broadcom Foundation](http://broadcomfoundation.org/)\n* [Arts Council England](http://www.artscouncil.org.uk)\n* [Nesta](https://www.nesta.org.uk)\n* [pi-top](https://pi-top.com)\n* [Norfolk & Norwich Festival Bridge](https://nnfestival.org.uk/festival-bridge/)\n* [Emute Lab at the University of Sussex](https://www.emutelab.org)\n\n\n## Inspiration\n\nThe following is a far from complete list of some of the individuals who\nhave provided inspiration for the creation of Sonic Pi through their own\nprojects:\n\n* _why (why the lucky stiff) - [Shoes](https://en.wikipedia.org/wiki/Shoes_(GUI_toolkit))\n* Andrew Sorensen  - [Extempore](https://extemporelang.github.io/)\n* James McCartney - [SuperCollider](https://supercollider.github.io)\n* Jeff Rose - [Overtone](https://overtone.github.io/)\n* Joe Armstrong - [Erlang](https://www.erlang.org)\n* José Valim - [Elixir](https://elixir-lang.org)\n* Linda Liukas - [Hello Ruby](http://www.helloruby.com/)\n* Matz (Yukihiro Matsumoto まつもとゆきひろ) - [Ruby](https://www.ruby-lang.org)\n* Olivia Jack - [Hydra](https://hydra.ojack.xyz/)\n* Rich Hickey - [Clojure](https://clojure.org)\n* Seymour Papert - [Logo](https://en.wikipedia.org/wiki/Logo_(programming_language))\n* The Scratch Team - [Scratch](https://scratch.mit.edu)\n* Thor Magnusson - [ixi lang](http://www.ixi-audio.net/content/body_software_ixilang.html)\n\n\n## Sponsors\n\nThe following organisations have financially supported the continued\ndevelopment and maintenance of Sonic Pi. We give our appreciation and\nrespect back to them all for choosing to support open source software:\n\n* [Trading & Consulting 'H.P.C.' GmbH](https://www.hpc.at/)\n* [Dashbit](https://dashbit.co)\n* [Alembic](https://alembic.com.au)\n\n\n## Artistic Sample Contributions\n\nThe following artists have contributed towards Sonic Pi by kindly donating audio samples\ninto the public domain under a CC0 license for free use. Thank-you.\n\n* [Arovane](https://arovane.bandcamp.com)\n* [Tommi Toivonen](https://totosoundlab.com)\n\n\n## Patreon Supporters\n\nSonic Pi development is increasingly funded by a growing number of very\nkind and generous people via [Patreon](https://patreon.com/samaaron). We\nwould like to thank everyone who has supported Sonic Pi in this way -\nespecially the following individuals who have been remarkably generous:\n\n* Adam Renklint\n* Alan Boulton\n* Alan O'Donnell\n* [Alexandre Enkerli](https://twitter.com/enkerli)\n* [Anderson Reinkordt](https://soundcloud.com/april-club-music)\n* [André-Patrick Bubel](https://andre-bubel.de)\n* Andrew Litman\n* [Andrew Robillard](https://www.twitter.com/hoborobo123)\n* [Bartosz Majsak](https://twitter.com/majson)\n* [Ben Davis](https://soundcloud.com/ben_davis_noise)\n* [Benjamin Reitzammer](https://cto.coffee)\n* brainTrain\n* [Boris Bokowski](https://twitter.com/bokowski)\n* [Brandon Weaver](https://twitter.com/keystonelemur)\n* Bruce\n* Bryce Young\n* Cecily Morrison\n* [Chih-Chun Chen](http://abmcet.net/Chih-Chun_Chen/home.html)\n* [Christoffer Krakou](http://www.krakou.dk/)\n* Cobey Smith\n* Dallas Kidd\n* Dago Sondervan\n* [Darin Wilson](https://twitter.com/darinwilson/)\n* David Dickey\n* [Dean Wampler](https://twitter.com/deanwampler)\n* desmosthenes\n* Douglas Drumond Kayama\n* Elmar Geese\n* [Emlyn Corrin](https://github.com/emlyn)\n* [Evan Kroske](https://www.evankroske.com/)\n* Fergal Byrne\n* Florent Biville\n* [Florian Gilcher](https://twitter.com/Argorak)\n* [Gabe Jackson](https://github.com/gj)\n* Gerriet Selent\n* Gert Sylvest\n* [Godigital Media Group](godigitalmg.com)\n* Isu Portu\n* [James Abley](https://twitter.com/jabley)\n* Jaroslav Lichtblau\n* jer\n* [Joshua Thomas](instagram.com/tig3rbabu)\n* [Justin Balthrop](http://ninjudd.com)\n* [Justin Worrall](https://twitter.com/juzbo)\n* Kope Inefable\n* [Lily Foster](https://lily.flowers/)\n* [Luis Espinoza](https://twitter.com/luis_espinoza)\n* Maciej\n* Manfred Van Ursel\n* [Marco Rolappe](https://rolappe.it)\n* [Mark Rendle](https://twitter.com/markrendle)\n* [Markku Rontu](https://twitter.com/zorcam)\n* [Marmaduke Woodman](https://github.com/maedoc)\n* [Martin Butz](https://github.com/mbutz)\n* [Martin McDermott](https://twitter.com/marv_mcd)\n* Matt Jones\n* Matt Koscica\n* [Matthew Gilliard](https://twitter.com/MaximumGilliard)\n* Mat Schaffer\n* Mayur Dave\n* [Michael Hunger](https://twitter.com/mesirii)\n* [Nada Amin](http://namin.net)\n* [NAMTAO](https://namtao.com)\n* [Nathan Letwory](https://github.com/jesterKing)\n* nullstyle\n* [Oladapo Fadeyi](https://twitter.com/erfadda)\n* [Ole Friis Østergaard](https://github.com/olefriis)\n* [Paul Williams](https://pcwilliams.design)\n* [Pit Noack](http://www.maschinennah.de/)\n* Ramsés Morales\n* Rand Fitzpatrick\n* [Richard Buckley](https://burgundycomputing.com)\n* [Richard Bullington-McGuire](https://www.obscure.org/~rbulling/)\n* Robert Giacinto\n* [Robin Newman](https://twitter.com/rbnman)\n* [Roxanne Harris](https://instagram.com/alsoknownasrox)\n* Rushabh Doshi\n* [Sam Halliday](https://github.com/fommil)\n* Samuel Gikandi\n* [Sean Raser](https://twitter.com/sraser88)\n* Sci.Phi\n* [Scott Fleckenstein](http://nullstyle.com))\n* [Scott Turner](https://twitter.com/scottturneruon)\n* [Sébastien Rannou](https://mxs.sbrk.org/)\n* [Simon Woodman](https://twitter.com/sjwoodman)\n* Terry Wisniewski\n* [thattommyhall](https://twitter.com/thattommyhall)\n* Tim Regan\n* Uad Jayanth\n* Uiannis Mavroukakis\n* Vasilis Spilka\n* Zack Urlocker\n\n\n\n## Outstanding Community Contributions\n\nWe would like to recognise the following individuals for their important\ncontributions which have supported the Sonic Pi Community:\n\n* [Paul Winstanley](https://twitter.com/SCCMentor)\n* [Robin Newman](https://twitter.com/rbnman)\n* [Ethan Crawford](https://twitter.com/northwardface)\n\n\n## Guidance and Advice\n\nWe would like to thank the following people for their time providing\nvaluable advice, feedback and suggestions on a wide variety of aspects\nof Sonic Pi - from technical development, to artistic\nconceptualisations, to musical production and performance.\n\n* [Dago Sondervan](https://twitter.com/sondervan1)\n* [Sam Conran](https://twitter.com/samconran)\n* [Ben Smith](https://twitter.com/bensmithguitar)\n* [Steve Hellier](https://twitter.com/steveguyhellier)\n* [Pit Noack](https://twitter.com/maschinennah)\n* [Joe Armstrong](https://twitter.com/joeerl)\n\n\n\n## Core Team\n\nMuch of the development, distribution and support work for Sonic Pi is\ncarried out by the Core Team. This is a group of dedicated volunteers\n(with the exception of Sam Aaron who works full time on the project) who\nkindly donate their time to continue to improve Sonic Pi.\n\nCurrent members:\n\n* [Sam Aaron](https://github.com/samaaron)\n* [Xavier Riley](https://github.com/xavriley)\n* [Joseph Wilk](https://github.com/josephwilk)\n* [Hanno Zulla](https://github.com/hzulla)\n* [Adrian Cheater](https://github.com/factoid)\n* [Luis Lloret](https://github.com/llloret/)\n* [Robin Newman](https://github.com/rbnpi)\n* [Ethan Crawford](https://github.com/ethancrawford)\n* [Chris Maughan](https://github.com/cmaughan)\n* [Lily Foster](https://github.com/lilyinstarlight)\n\n\nPrevious members:\n\n* [Jeremy Weatherford](https://github.com/jweather)\n\n\n\n## Core Team Thanks\n\nSam Aaron would like to express his deep thanks to his family and\nfriends who have supported him over the years and given him the strength\nto continue on this strange and often unforgiving path. He would\nparticularly like to thank his friend and partner Susanna and also his\nfab Mum.\n\nLuis Lloret wants to thank his wonderful family for their understanding\nand support while working on this. Specially Marina, you are my reason\nto live. Mar and Darío, keep being so special and giving us so much joy.\n\nXavier Riley would like to thank his wife Emily, and he'd like to\nreassure her that he definitely loves her more than any computer. Also\nbig thanks to conference organizers, in particular Simon Starr for\nputting on the awesome Bath Ruby conferences and letting me rock out\nthere not [once](https://youtu.be/Jp0VKD_7pmw?t=10m1s), but\n[twice](https://www.youtube.com/watch?v=L06FlSoiBi4). Lastly I'd like to\nthank Scott Wilson for teaching me some programming as part of a music\ndegree, and my good friend David Bamber for helping me get started as a\nprogrammer.\n\nAdrian Cheater dedicates this space in loving memory of her mother,\nKatherine Cheater. Mom shared her passion for music and performance\nand equipped me with all the tools I needed to live life fully. She was\nkind, but did not let the opinions of strangers deter her from her path.\nThough mom never met me as her daughter, I know she would have been proud\nthat I chose to embrace my truth as it became known to me.\nMy wish is that you, fellow musician, will also choose to never dampen your\nlight, and that you will encourage and empower others to shine bright.\n\nRobin Newman would like to thank Sam for producing such inspirational\nsoftware as Sonic Pi. Both the sounds that it can produce and the\nintricate programming beneath the surface are a work of art. To work\nwith Sonic Pi gives me such a buzz as I have not experienced since\nworking with Music on a network of BBC Micros in the 1980s. Then as now\nmy Wife Julia describes herself as a computer widow. I thank her for\nputting up with my passion for musical programming over the years.\n\nEthan Crawford is grateful to his parents for giving him the opportunity\nof music lessons as a young boy, and all the skills and interests that\nthis helped to develop. He'd also like to thank Sam for creating Sonic\nPi and the ease and fun with which it combines two of his favourite\ninterests - music and programming.\n\n\n\n## Developer Contributions\n\nIn addition to the Sonic Pi Core Team, we would like to extend our\nthanks to the following developers who have donated their time and\neffort to help grow and improve the Sonic Pi code base:\n\n* [Sam Aaron](https://github.com/sonic-pi-net/sonic-pi/commits?author=samaaron) (5638)\n* [Ethan Crawford](https://github.com/sonic-pi-net/sonic-pi/commits?author=ethancrawford) (306)\n* [Hanno Zulla](https://github.com/sonic-pi-net/sonic-pi/commits?author=hzulla) (198)\n* [Joseph Wilk](https://github.com/sonic-pi-net/sonic-pi/commits?author=josephwilk) (160)\n* [Jeremy Weatherford](https://github.com/sonic-pi-net/sonic-pi/commits?author=jweather) (123)\n* [Xavier Riley](https://github.com/sonic-pi-net/sonic-pi/commits?author=xavriley) (110)\n* [SunderB](https://github.com/sonic-pi-net/sonic-pi/commits?author=SunderB) (105)\n* [Robin Newman](https://github.com/sonic-pi-net/sonic-pi/commits?author=rbnpi) (92)\n* [Emlyn Corrin](https://github.com/sonic-pi-net/sonic-pi/commits?author=emlyn) (82)\n* [Łukasz Siwiński](https://github.com/sonic-pi-net/sonic-pi/commits?author=hopbit) (82)\n* [Adrian Cheater](https://github.com/sonic-pi-net/sonic-pi/commits?author=factoid) (70)\n* [Chris Maughan](https://github.com/sonic-pi-net/sonic-pi/commits?author=cmaughan) (66)\n* [Lily Foster](https://github.com/sonic-pi-net/sonic-pi/commits?author=lilyinstarlight) (51)\n* [Nicolas Dermine](https://github.com/sonic-pi-net/sonic-pi/commits?author=nicoder) (42)\n* [Luis Lloret](https://github.com/sonic-pi-net/sonic-pi/commits?author=llloret) (41)\n* [Martin Keegan](https://github.com/sonic-pi-net/sonic-pi/commits?author=mk270) (41)\n* [Kenichi Kanai](https://github.com/sonic-pi-net/sonic-pi/commits?author=kn1kn1) (28)\n* [Nikolaus Gradwohl](https://github.com/sonic-pi-net/sonic-pi/commits?author=ngradwohl) (26)\n* [Ricardo Pozo](https://github.com/sonic-pi-net/sonic-pi/commits?author=thraex41) (23)\n* [Richard Carlsson](https://github.com/sonic-pi-net/sonic-pi/commits?author=richcarl) (21)\n* [Ben Marx](https://github.com/sonic-pi-net/sonic-pi/commits?author=level-xx) (20)\n* [Joseph Burnett](https://github.com/sonic-pi-net/sonic-pi/commits?author=josephburnett) (14)\n* [Richard Bullington-McGuire](https://github.com/sonic-pi-net/sonic-pi/commits?author=obscurerichard) (13)\n* [Owen Niblock](https://github.com/sonic-pi-net/sonic-pi/commits?author=owenniblock) (12)\n* [Wolfgang Werner](https://github.com/sonic-pi-net/sonic-pi/commits?author=wwerner) (12)\n* [level-xx](https://github.com/sonic-pi-net/sonic-pi/commits?author=level-xx) (11)\n* [Mikael Karlsson](https://github.com/sonic-pi-net/sonic-pi/commits?author=karlsson) (8)\n* [Benson Muite](https://github.com/sonic-pi-net/sonic-pi/commits?author=bkmgit) (7)\n* [Clare Macrae](https://github.com/sonic-pi-net/sonic-pi/commits?author=claremacrae) (7)\n* [G. Martin Butz](https://github.com/sonic-pi-net/sonic-pi/commits?author=mbutz) (6)\n* [Jeroen Castelein](https://github.com/sonic-pi-net/sonic-pi/commits?author=JeroennC) (6)\n* [Rob McKinnon](https://github.com/sonic-pi-net/sonic-pi/commits?author=robmckinnon) (6)\n* [Amruth Acharya](https://github.com/sonic-pi-net/sonic-pi/commits?author=amruth-acharya) (5)\n* [Christoph Scholtes](https://github.com/sonic-pi-net/sonic-pi/commits?author=cschol) (5)\n* [Enrike Hurtado](https://github.com/sonic-pi-net/sonic-pi/commits?author=enrike) (5)\n* [Hannes Fritz](https://github.com/sonic-pi-net/sonic-pi/commits?author=hztirf) (5)\n* [Martin van Es](https://github.com/sonic-pi-net/sonic-pi/commits?author=mrvanes) (5)\n* [Petter Reinholdtsen](https://github.com/sonic-pi-net/sonic-pi/commits?author=petterreinholdtsen) (5)\n* [Andrii Kurdiumov](https://github.com/sonic-pi-net/sonic-pi/commits?author=kant2002) (4)\n* [Antonio Bonifacio](https://github.com/sonic-pi-net/sonic-pi/commits?author=neuromancer85) (4)\n* [Franz Laügt](https://github.com/sonic-pi-net/sonic-pi/commits?author=znarf94) (4)\n* [Jim Greene](https://github.com/sonic-pi-net/sonic-pi/commits?author=CUBICinfinity) (4)\n* [José Valim](https://github.com/sonic-pi-net/sonic-pi/commits?author=josevalim) (4)\n* [Keiko Machiya](https://github.com/sonic-pi-net/sonic-pi/commits?author=keikomachiya) (4)\n* [Marco Giordano](https://github.com/sonic-pi-net/sonic-pi/commits?author=marco-giordano) (4)\n* [Sayak Mondal](https://github.com/sonic-pi-net/sonic-pi/commits?author=isayakmondal) (4)\n* [Anmol Gautam](https://github.com/sonic-pi-net/sonic-pi/commits?author=Tarptaeya) (3)\n* [Brock Wilcox](https://github.com/sonic-pi-net/sonic-pi/commits?author=awwaiid) (3)\n* [Brujo Rojas](https://github.com/sonic-pi-net/sonic-pi/commits?author=brujo-rojas) (3)\n* [Chris Ford](https://github.com/sonic-pi-net/sonic-pi/commits?author=ctford) (3)\n* [Edward Andrews-Hodgson](https://github.com/sonic-pi-net/sonic-pi/commits?author=aldreth) (3)\n* [Kıvanç Güçkıran](https://github.com/sonic-pi-net/sonic-pi/commits?author=kivancguckiran) (3)\n* [Mariano Guerra](https://github.com/sonic-pi-net/sonic-pi/commits?author=marianoguerra) (3)\n* [Mark Paton](https://github.com/sonic-pi-net/sonic-pi/commits?author=frobby) (3)\n* [Martin Zeilinger](https://github.com/sonic-pi-net/sonic-pi/commits?author=st01c) (3)\n* [Sebastian Stahn](https://github.com/sonic-pi-net/sonic-pi/commits?author=stahnirockt) (3)\n* [Sebastien Rannou](https://github.com/sonic-pi-net/sonic-pi/commits?author=aimxhaisse) (3)\n* [Steve Traylen](https://github.com/sonic-pi-net/sonic-pi/commits?author=traylenator) (3)\n* [Tobias Thüring](https://github.com/sonic-pi-net/sonic-pi/commits?author=hexagon6) (3)\n* [fossdd](https://github.com/sonic-pi-net/sonic-pi/commits?author=fossdd) (3)\n* [Ben Nuttall](https://github.com/sonic-pi-net/sonic-pi/commits?author=bennuttall) (2)\n* [Bruce Adams](https://github.com/sonic-pi-net/sonic-pi/commits?author=bruceadams) (2)\n* [Christoph B. Wurzinger](https://github.com/sonic-pi-net/sonic-pi/commits?author=chbw) (2)\n* [Daniel Canelhas](https://github.com/sonic-pi-net/sonic-pi/commits?author=dcanelhas) (2)\n* [Domingo Gómez](https://github.com/sonic-pi-net/sonic-pi/commits?author=domgomcom) (2)\n* [Eugene Kovalev](https://github.com/sonic-pi-net/sonic-pi/commits?author=wl8dr3) (2)\n* [Friends A.](https://github.com/sonic-pi-net/sonic-pi/commits?author=shaonianche) (2)\n* [Hubert Figuière](https://github.com/sonic-pi-net/sonic-pi/commits?author=hfiguiere) (2)\n* [Jose Añasco](https://github.com/sonic-pi-net/sonic-pi/commits?author=merongivian) (2)\n* [Katie Ots](https://github.com/sonic-pi-net/sonic-pi/commits?author=katiejots) (2)\n* [Louis Pilfold](https://github.com/sonic-pi-net/sonic-pi/commits?author=lpil) (2)\n* [Matt Ruzicka](https://github.com/sonic-pi-net/sonic-pi/commits?author=mattruzicka) (2)\n* [Michael Henry](https://github.com/sonic-pi-net/sonic-pi/commits?author=neoCrimeLabs) (2)\n* [Michel Echevres](https://github.com/sonic-pi-net/sonic-pi/commits?author=echevresm) (2)\n* [Mintesno Zewdu](https://github.com/sonic-pi-net/sonic-pi/commits?author=MinteZ) (2)\n* [Mistral Contrastin](https://github.com/sonic-pi-net/sonic-pi/commits?author=madgen) (2)\n* [Mukul Kolpe](https://github.com/sonic-pi-net/sonic-pi/commits?author=MukulKolpe) (2)\n* [Peter Shultz](https://github.com/sonic-pi-net/sonic-pi/commits?author=pashultz) (2)\n* [Phil Hagelberg](https://github.com/sonic-pi-net/sonic-pi/commits?author=technomancy) (2)\n* [Přemek Vyhnal](https://github.com/sonic-pi-net/sonic-pi/commits?author=premek) (2)\n* [Scott Kitterman](https://github.com/sonic-pi-net/sonic-pi/commits?author=kitterma) (2)\n* [Sergio Gil](https://github.com/sonic-pi-net/sonic-pi/commits?author=porras) (2)\n* [Shane Malone](https://github.com/sonic-pi-net/sonic-pi/commits?author=shanemalo) (2)\n* [Theodore Tsirpanis](https://github.com/sonic-pi-net/sonic-pi/commits?author=teo-tsirpanis) (2)\n* [Tim Clem](https://github.com/sonic-pi-net/sonic-pi/commits?author=misterfifths) (2)\n* [Will Stephenson](https://github.com/sonic-pi-net/sonic-pi/commits?author=wstephenson) (2)\n* [William W. Wu](https://github.com/sonic-pi-net/sonic-pi/commits?author=willy-vvu) (2)\n* [Adam Weiler](https://github.com/sonic-pi-net/sonic-pi/commits?author=dam-weiler) (1)\n* [Adlai](https://github.com/sonic-pi-net/sonic-pi/commits?author=adlai) (1)\n* [Aiko Mastboom](https://github.com/sonic-pi-net/sonic-pi/commits?author=aikomastboom) (1)\n* [Alex McLean](https://github.com/sonic-pi-net/sonic-pi/commits?author=yaxu) (1)\n* [Apokli](https://github.com/sonic-pi-net/sonic-pi/commits?author=Apokli) (1)\n* [Aspasia Beneti](https://github.com/sonic-pi-net/sonic-pi/commits?author=aspasia) (1)\n* [Bernhard M. Wiedemann](https://github.com/sonic-pi-net/sonic-pi/commits?author=bmwiedemann) (1)\n* [Björn Ekström](https://github.com/sonic-pi-net/sonic-pi/commits?author=bjornekstrom) (1)\n* [Björn Þór Jónsson](https://github.com/sonic-pi-net/sonic-pi/commits?author=bthj) (1)\n* [Brian Hagerty](https://github.com/sonic-pi-net/sonic-pi/commits?author=bhagerty) (1)\n* [Centre multimédia des Pieux](https://github.com/sonic-pi-net/sonic-pi/commits?author=epnlespieux) (1)\n* [Christian Perfect](https://github.com/sonic-pi-net/sonic-pi/commits?author=christianp) (1)\n* [Cosmin Stroe](https://github.com/sonic-pi-net/sonic-pi/commits?author=cstroe) (1)\n* [Daniel Nocito](https://github.com/sonic-pi-net/sonic-pi/commits?author=d-nct) (1)\n* [Daria Trainor](https://github.com/sonic-pi-net/sonic-pi/commits?author=dariatrainor) (1)\n* [Darío Hereñú](https://github.com/sonic-pi-net/sonic-pi/commits?author=kant) (1)\n* [Dionysis Zindros](https://github.com/sonic-pi-net/sonic-pi/commits?author=dionyziz) (1)\n* [Dominic Calkosz](https://github.com/sonic-pi-net/sonic-pi/commits?author=Dmcdominic) (1)\n* [Drew A. Moore](https://github.com/sonic-pi-net/sonic-pi/commits?author=moore-drew) (1)\n* [Eduardo Fonseca](https://github.com/sonic-pi-net/sonic-pi/commits?author=edrd-f) (1)\n* [Eric M](https://github.com/sonic-pi-net/sonic-pi/commits?author=em13914) (1)\n* [Ersin Ertan](https://github.com/sonic-pi-net/sonic-pi/commits?author=ersin-ertan) (1)\n* [Ezequiel Ramos](https://github.com/sonic-pi-net/sonic-pi/commits?author=ezequielramos) (1)\n* [Falko Spiller](https://github.com/sonic-pi-net/sonic-pi/commits?author=zenon) (1)\n* [Garen Hartunian](https://github.com/sonic-pi-net/sonic-pi/commits?author=garenhart) (1)\n* [Graham Taylor](https://github.com/sonic-pi-net/sonic-pi/commits?author=vinnievg) (1)\n* [Gábor Hermann](https://github.com/sonic-pi-net/sonic-pi/commits?author=gaborhermann) (1)\n* [Himanshu](https://github.com/sonic-pi-net/sonic-pi/commits?author=himanshu007-creator) (1)\n* [Hrafnkell Eiríksson](https://github.com/sonic-pi-net/sonic-pi/commits?author=hrafnkelle) (1)\n* [Ian Stevenson](https://github.com/sonic-pi-net/sonic-pi/commits?author=irstevenson) (1)\n* [Ikko Ashimine](https://github.com/sonic-pi-net/sonic-pi/commits?author=eltociear) (1)\n* [Ioan Bizău](https://github.com/sonic-pi-net/sonic-pi/commits?author=ibz) (1)\n* [Ivan Zarea](https://github.com/sonic-pi-net/sonic-pi/commits?author=minivan) (1)\n* [James Smith](https://github.com/sonic-pi-net/sonic-pi/commits?author=nanomancer) (1)\n* [James Watson](https://github.com/sonic-pi-net/sonic-pi/commits?author=jawatson) (1)\n* [Jamie Brandon](https://github.com/sonic-pi-net/sonic-pi/commits?author=jamii) (1)\n* [Jay Clark](https://github.com/sonic-pi-net/sonic-pi/commits?author=jayeclark) (1)\n* [Jean-Baptiste Mestelan](https://github.com/sonic-pi-net/sonic-pi/commits?author=Mestelan) (1)\n* [Jesper Hasselquist](https://github.com/sonic-pi-net/sonic-pi/commits?author=Joxtacy) (1)\n* [Joe Armstrong](https://github.com/sonic-pi-net/sonic-pi/commits?author=joearms) (1)\n* [Joe Francis](https://github.com/sonic-pi-net/sonic-pi/commits?author=lostapathy) (1)\n* [John Lawrence Aspden](https://github.com/sonic-pi-net/sonic-pi/commits?author=johnlawrenceaspden) (1)\n* [Joseph Haig](https://github.com/sonic-pi-net/sonic-pi/commits?author=jrmhaig) (1)\n* [Josh Hatcher](https://github.com/sonic-pi-net/sonic-pi/commits?author=jbjbhatcher) (1)\n* [Julian Cheal](https://github.com/sonic-pi-net/sonic-pi/commits?author=juliancheal) (1)\n* [Karl Hiner](https://github.com/sonic-pi-net/sonic-pi/commits?author=khiner) (1)\n* [Ken Perry](https://github.com/sonic-pi-net/sonic-pi/commits?author=krperry) (1)\n* [Kenan Erdogan](https://github.com/sonic-pi-net/sonic-pi/commits?author=bitnik) (1)\n* [Kevin Chau](https://github.com/sonic-pi-net/sonic-pi/commits?author=kevinchau321) (1)\n* [Leda](https://github.com/sonic-pi-net/sonic-pi/commits?author=HypnotizedLeda) (1)\n* [Liam Hurwitz](https://github.com/sonic-pi-net/sonic-pi/commits?author=contra-bit) (1)\n* [Lin Hsu](https://github.com/sonic-pi-net/sonic-pi/commits?author=chaosink) (1)\n* [Linda van der Pal](https://github.com/sonic-pi-net/sonic-pi/commits?author=lvdpal) (1)\n* [Lorenzo Moriondo](https://github.com/sonic-pi-net/sonic-pi/commits?author=Mec-iS) (1)\n* [Lucas Cruz dos Reis](https://github.com/sonic-pi-net/sonic-pi/commits?author=LCRERGO) (1)\n* [Manula Thejan](https://github.com/sonic-pi-net/sonic-pi/commits?author=manula2004) (1)\n* [Marko Peltola](https://github.com/sonic-pi-net/sonic-pi/commits?author=markopeltola) (1)\n* [Martin Gondermann](https://github.com/sonic-pi-net/sonic-pi/commits?author=magicmonty) (1)\n* [Mateusz Bielec](https://github.com/sonic-pi-net/sonic-pi/commits?author=mbie) (1)\n* [Matt Meyer](https://github.com/sonic-pi-net/sonic-pi/commits?author=mmeyer0505) (1)\n* [Matthew Gilliard](https://github.com/sonic-pi-net/sonic-pi/commits?author=mjg123) (1)\n* [Matthew Pagan](https://github.com/sonic-pi-net/sonic-pi/commits?author=mttpgn) (1)\n* [Matthias Cavigelli](https://github.com/sonic-pi-net/sonic-pi/commits?author=mcavigelli) (1)\n* [Max Puig](https://github.com/sonic-pi-net/sonic-pi/commits?author=MaxPuig) (1)\n* [Max Rabin](https://github.com/sonic-pi-net/sonic-pi/commits?author=maxrabin) (1)\n* [Michael Fulton](https://github.com/sonic-pi-net/sonic-pi/commits?author=fultonms) (1)\n* [Michał Lewandowski](https://github.com/sonic-pi-net/sonic-pi/commits?author=mlevvy) (1)\n* [Michel Kraaijeveld](https://github.com/sonic-pi-net/sonic-pi/commits?author=LandDragoon) (1)\n* [Morgan Owens](https://github.com/sonic-pi-net/sonic-pi/commits?author=equiamos) (1)\n* [Neal McBurnett](https://github.com/sonic-pi-net/sonic-pi/commits?author=nealmcb) (1)\n* [Nigel Michki](https://github.com/sonic-pi-net/sonic-pi/commits?author=nigeil) (1)\n* [No Name Pro](https://github.com/sonic-pi-net/sonic-pi/commits?author=NoNamePro0) (1)\n* [Paul Winstanley](https://github.com/sonic-pi-net/sonic-pi/commits?author=sccmentor) (1)\n* [Pierre De Wilde](https://github.com/sonic-pi-net/sonic-pi/commits?author=pierredewilde) (1)\n* [Piotr Jagielski](https://github.com/sonic-pi-net/sonic-pi/commits?author=pjagielski) (1)\n* [Přemek Vyhnal](https://github.com/sonic-pi-net/sonic-pi/commits?author=premek) (1)\n* [Radu Raicea](https://github.com/sonic-pi-net/sonic-pi/commits?author=Radu-Raicea) (1)\n* [Reuben Brown](https://github.com/sonic-pi-net/sonic-pi/commits?author=reubenbrown) (1)\n* [Ricardo Ramírez](https://github.com/sonic-pi-net/sonic-pi/commits?author=ricardoerl) (1)\n* [Rodrigo Iglesias](https://github.com/sonic-pi-net/sonic-pi/commits?author=Areidz) (1)\n* [Roland Schmid](https://github.com/sonic-pi-net/sonic-pi/commits?author=Pr0gm4n) (1)\n* [Roman Milovskiy](https://github.com/sonic-pi-net/sonic-pi/commits?author=dcromster) (1)\n* [Russell Jones](https://github.com/sonic-pi-net/sonic-pi/commits?author=Russell-Jones) (1)\n* [Ruzsa Balázs](https://github.com/sonic-pi-net/sonic-pi/commits?author=cellux) (1)\n* [Ryan Bigg](https://github.com/sonic-pi-net/sonic-pi/commits?author=radar) (1)\n* [Ryan Sands](https://github.com/sonic-pi-net/sonic-pi/commits?author=mobius927) (1)\n* [Rúben Ribeiro Franco](https://github.com/sonic-pi-net/sonic-pi/commits?author=RRFGamer) (1)\n* [Sam Conran](https://github.com/sonic-pi-net/sonic-pi/commits?author=samOrbs) (1)\n* [Sandy Maguire](https://github.com/sonic-pi-net/sonic-pi/commits?author=isovector) (1)\n* [Sarah Davis](https://github.com/sonic-pi-net/sonic-pi/commits?author=algoravedave) (1)\n* [Saravanan Selvamohan](https://github.com/sonic-pi-net/sonic-pi/commits?author=saravananselvamohan) (1)\n* [Serge Stinckwich](https://github.com/sonic-pi-net/sonic-pi/commits?author=SergeStinckwich) (1)\n* [Siim Põder](https://github.com/sonic-pi-net/sonic-pi/commits?author=windo) (1)\n* [Stephen](https://github.com/sonic-pi-net/sonic-pi/commits?author=vomitHatSteve) (1)\n* [Suleyman Poyraz](https://github.com/sonic-pi-net/sonic-pi/commits?author=Zaryob) (1)\n* [Takashi Udagawa](https://github.com/sonic-pi-net/sonic-pi/commits?author=udayan28) (1)\n* [Thibaut Barrère](https://github.com/sonic-pi-net/sonic-pi/commits?author=thbar) (1)\n* [Thomas Starzynski](https://github.com/sonic-pi-net/sonic-pi/commits?author=dcts) (1)\n* [TimMo](https://github.com/sonic-pi-net/sonic-pi/commits?author=TimMo-prog) (1)\n* [Tom Holford](https://github.com/sonic-pi-net/sonic-pi/commits?author=tomholford) (1)\n* [Tom den Braber](https://github.com/sonic-pi-net/sonic-pi/commits?author=tomdenbraber) (1)\n* [Tomasz Nurkiewicz](https://github.com/sonic-pi-net/sonic-pi/commits?author=nurkiewicz) (1)\n* [Tomek Rabczak](https://github.com/sonic-pi-net/sonic-pi/commits?author=tomekr) (1)\n* [Tommi Toivonen](https://github.com/sonic-pi-net/sonic-pi/commits?author=hullum) (1)\n* [Tristram Oaten](https://github.com/sonic-pi-net/sonic-pi/commits?author=0atman) (1)\n* [Tyler Korthal](https://github.com/sonic-pi-net/sonic-pi/commits?author=tjkorthal) (1)\n* [Uriel Corfa](https://github.com/sonic-pi-net/sonic-pi/commits?author=korfuri) (1)\n* [Valentin Vidić](https://github.com/sonic-pi-net/sonic-pi/commits?author=vvidic) (1)\n* [Veith Roethlingshoefer](https://github.com/sonic-pi-net/sonic-pi/commits?author=RunOrVeith) (1)\n* [kwmiebach](https://github.com/sonic-pi-net/sonic-pi/commits?author=kwmiebach) (1)\n* [miannoni](https://github.com/sonic-pi-net/sonic-pi/commits?author=miannoni) (1)\n\n\n\n## Translation\nThe following volunteers have generously helped to translate Sonic Pi into additional languages:\n\n\n* Łukasz Siwiński (114)\n* Kenichi Kanai (102)\n* Nico Staelens (84)\n* Nicolas Dermine (83)\n* Olivier Humbert (63)\n* Cindy Dallaire (49)\n* Hanno Zulla (48)\n* Sam Aaron (48)\n* Pau Monfort (45)\n* Emlyn Corrin (42)\n* Olympia Brikis (42)\n* Federico Pepe (36)\n* Mircea Patrascu (33)\n* Petter Reinholdtsen (30)\n* Daria Szatan (26)\n* Mauro João Salgado Figueira (24)\n* Nicolas Le Bellier (24)\n* Yann Pavlenko (23)\n* Giovanni Mori (22)\n* Ruben Tobalina (19)\n* Kanta Negishi (16)\n* Yaron Shahrabani (15)\n* Allan Nordhøy (14)\n* Boris Vogeler (14)\n* Kristjan Räts (13)\n* Álvaro Cáceres Muñoz (13)\n* Hong Lees (12)\n* Ole Friis Østergaard (12)\n* ssantos (12)\n* Aiko (11)\n* Kenryu Shibata (11)\n* Nicolas Limage (11)\n* Elena Ogaderova (10)\n* Oto Popis (10)\n* Tiago Morais Morgado (10)\n* Bote Wang (9)\n* Daniele Paradiso (9)\n* Herb Stigel (9)\n* Matthieu Ottaviani (9)\n* Ole Erik Yrvin (9)\n* Alex Esc (8)\n* Paulo Chiliguano (8)\n* Rachid Ben Moussa (8)\n* Rekc@h (8)\n* Timo Dankert (8)\n* Yang Wanjun (8)\n* Berkin Kadiroğlu (7)\n* Davide Anzaldi (7)\n* Eason Chang (7)\n* Jan Lund (7)\n* Miika Alonen (7)\n* Milo Ivir (7)\n* RD WebDesign (7)\n* Surajnath Sidh (7)\n* Timo Dankert (7)\n* Олексій Овдієнко (7)\n* Alaa alden Aldroubi (6)\n* Carlos Arturo Guerra Parra (6)\n* Daria Szatan (6)\n* Ettore Atalan (6)\n* Francisco Llaryora (6)\n* G. Martin Butz (6)\n* Harald Eilertsen (6)\n* Hayato Osanai (6)\n* Ivan Decard (6)\n* J. Lavoie (6)\n* Johan Ekblad (6)\n* Mahmutcan İlhandağ (6)\n* Marcin \"Tupteq\" Bardź (6)\n* Mark Lei  (6)\n* Michiel Leegwater (6)\n* Stanislav Senveter (6)\n* Stefan (6)\n* Suleyman Poyraz (6)\n* ArtyomIsFlash (5)\n* Björn Ekström (5)\n* CaoYi (5)\n* Diego Gurnari (5)\n* João Medeiros (5)\n* Kaz Yamazaki (5)\n* Maarten Brouwers (5)\n* Manula Thejan (5)\n* Miroslav Hrabal (5)\n* Muamer Ribica (5)\n* Nur Sodik (5)\n* Salih Vatansever (5)\n* Theodore Tsirpanis (5)\n* Abdeselam El-Haman (4)\n* Adeilson Silva (4)\n* Alban Vidal (4)\n* Alexandr Gusev (4)\n* Alexandre Karpinski Manikowski (4)\n* Andres Senn (4)\n* André Klöpfel (4)\n* Anton Shestakov (4)\n* Basel Akasha (4)\n* Black SheepX (4)\n* Dahlia Sager (4)\n* Dan Hojin (4)\n* Dustin Hendriks (4)\n* Edson Cunha (4)\n* Esteban Betancur (4)\n* Jakob Bo Kristensen (4)\n* Juan Pablo Riaño (4)\n* Kamyar (4)\n* Lucas Cruz dos Reis (4)\n* Luis Lloret (4)\n* Lupa Lupin (4)\n* Raúl Jiménez Martín (4)\n* Rosdyana Kusuma (4)\n* Sander Kesting (4)\n* Sebastian Stahn (4)\n* Sebastien van der Kwast (4)\n* Servaas Tilkin (4)\n* Stefan Boeykens (4)\n* Sune Sylvest Nilausen (4)\n* Thomas G. Kristensen (4)\n* Vera Rojman (4)\n* Volkan Bakir (4)\n* fossdd (4)\n* psyk10p (4)\n* Adrian Nöthlich (3)\n* Andreas Linz (3)\n* André Sá (3)\n* Anhquan Phanle (3)\n* Arnold Ewald (3)\n* Arnold Marko (3)\n* Aron Birkir Gudmundsson (3)\n* Breno Alberto (3)\n* Chenebel Dorian (3)\n* CreaZyp154 (3)\n* Dago Sondervan (3)\n* Dan Hanley (3)\n* Davide Facoetti (3)\n* Diego Ramos (3)\n* Edgar Delgado (3)\n* Elmer Blanksvärd (3)\n* Erick Bernalcrr (3)\n* Evgeni Latuhin (3)\n* Fabricio S Benevides (3)\n* Goncalo Vieira (3)\n* Haruki Niwa (3)\n* Hou Chen Zhong (3)\n* Hugo Vila (3)\n* Hur Ezeiza Zaldua (3)\n* Italo Adler (3)\n* Ivan Zarea (3)\n* Jacek Andrzejewski (3)\n* Jacque Fresco (3)\n* Jan Ole Hüser (3)\n* Jiaxi Gu (3)\n* John John (3)\n* Jon Georgsson (3)\n* Joschka Heinrich (3)\n* Juhyun Lee (3)\n* Jun Lin (3)\n* Jānis Grīnvalds (3)\n* Louis Wolf (3)\n* Luis Jimenez (3)\n* Lukas Spee (3)\n* László van den Hoek (3)\n* Madis Liias (3)\n* Maria Trofimova (3)\n* Martin Solheim (3)\n* Matthias Kaak (3)\n* Michael Peters (3)\n* Moisés Cachay Tello (3)\n* Moon Sungjoon (3)\n* Moru (3)\n* Nader Jafari (3)\n* Nami KJ (3)\n* Nathan Van der Auwera (3)\n* Neko Nekowazarashi (3)\n* Nicolas Cosson (3)\n* Nimplex (3)\n* Philip Lafeber (3)\n* Pierre Pintado (3)\n* Rodrigo Muniz (3)\n* Sebastian Rasmussen (3)\n* Shude Kun (3)\n* Stefan Höhn (3)\n* Szymon Jakubiak (3)\n* Tasos Protopapas (3)\n* Tiago Naufragado (3)\n* Tuomas Pyylampi (3)\n* Umair Raihan (3)\n* Vincent Renard (3)\n* Vladimir Támara Patiño (3)\n* Yakov Till (3)\n* Yandex (3)\n* Zsolt Szakács (3)\n* _eternal_flame (3)\n* gedobbles (3)\n* meTur4ik (3)\n* pisanvs (3)\n* threewater2 (3)\n* tter (3)\n* キツネさん (3)\n* Aaro Hillilä (2)\n* Airat (2)\n* Ajakko (2)\n* Alex Buznik (2)\n* Alex Popov (2)\n* Anders Berggren (2)\n* Anderson Freitas B. da Silva (2)\n* Andrey Raspopov (2)\n* Anna Knudsen (2)\n* Arnaud BOS (2)\n* Arno van Brunschot (2)\n* Artem (2)\n* Blez Tseng (2)\n* Burak Tufekci (2)\n* Carlos David Perales Cejudo (2)\n* Cattice (2)\n* Cedric Frossard (2)\n* Cem Kaan Kösali (2)\n* ChiakiQ (2)\n* Christopher Tibaldo (2)\n* Conny Söderholm (2)\n* Coruna (2)\n* CurlingTongs (2)\n* D. Lowl (2)\n* Daniel Krog (2)\n* David Romero (2)\n* David Wild (2)\n* Davide Giovannini (2)\n* Dim Kyriakoudis (2)\n* Dimitris Panokostas (2)\n* Duarte Botelho (2)\n* Edmond Frank (2)\n* Enrike Hurtado (2)\n* Eric (2)\n* Ertu (Er2, Err) (2)\n* Evandro Afonso Rodrigues (2)\n* Fabian Aussems (2)\n* Federico Saccà (2)\n* Fernando Alberto Ribeiro Tavar (2)\n* Francisco Jose Rey (2)\n* Gabriel Barba Gonzalez (2)\n* Gao Yuyang (2)\n* Genek Tomashko (2)\n* Gergő Fazekas (2)\n* Giovanni Domeneghini (2)\n* Guntitat Sawadwuthikul (2)\n* Gustavo Lourenco (2)\n* Hamidreza Montaseri (2)\n* Haowen You (2)\n* HelaBasa (2)\n* Hilla Shahrabani (2)\n* Huang Tianyu (2)\n* Ivan Eiji Yamauchi Simurra (2)\n* Ivan Krylov (2)\n* Joyinglee (2)\n* Kaijing Zheng (2)\n* Karl Below (2)\n* Karlox Loko (2)\n* Kiki Hzz (2)\n* Kirill Gorlovsky (2)\n* Lin Yu-Chien (2)\n* Lorenzo Bloedow  (2)\n* Louies (2)\n* Lu Lecocq (2)\n* Luis Garcia (2)\n* Luis Valdez (2)\n* Luna Jernberg (2)\n* Lázaro Henrique (2)\n* Marc Kohaupt (2)\n* Mario Barbuti (2)\n* Martin Lange (2)\n* Martin-Zack Mekkaoui (2)\n* Martín Aguilar (2)\n* Mateo Carreras (2)\n* Mathias Svendsen (2)\n* Mathieu H (2)\n* Mattias Münster (2)\n* Mauro Garcia (2)\n* Maxwell Edison (2)\n* Michael Bölling (2)\n* Michal Slaski (2)\n* Narek Torosyan (2)\n* Nicholas Pellizer (2)\n* Nicolás Londoño (2)\n* Omicron (2)\n* Paola García (2)\n* Pedro Fernandes (2)\n* Per-Erik Westerberg (2)\n* Přemek Vyhnal (2)\n* Rafael Capaci Pereira (2)\n* Ran Tsoref (2)\n* Ranforingus (2)\n* Raphaël Forment (2)\n* Reza Almanda (2)\n* Roger Narayan (2)\n* Roland Illig (2)\n* Samuel El-Borai (2)\n* Simao Gomes Viana (2)\n* Smite Chow (2)\n* Sohalt (2)\n* Song Li (2)\n* Stephan Schuster (2)\n* Sugahara Masayuki (2)\n* Thiemo Zaugg (2)\n* Thomas Qvidahl (2)\n* Tino Ejlerskov (2)\n* Tomás Vilariño (2)\n* Valentin Stern (2)\n* Vibo Lavida (2)\n* Victor Martin Garcia (2)\n* ViperMiniQ (2)\n* Warren Alex (2)\n* Weizheng Liu (2)\n* Wilson Dashing (2)\n* Y Honda (2)\n* Yangze Luo (2)\n* classiqorecord (2)\n* federicosan (2)\n* gezhanling (2)\n* kuenwoo (2)\n* mintpi (2)\n* sharmer156 (2)\n* thomas (2)\n* wbk (2)\n* zmni (2)\n* Иван Лавриков (2)\n* Рамиль Иксанов (2)\n* ۋولقان (2)\n* 고아침 (2)\n* 김운하 (2)\n* 조현퇴 (2)\n* Aaro Asikainen (1)\n* Adam Baranec (1)\n* Adam Süki (1)\n* AgentWu (1)\n* Ai Doan (1)\n* Alejandro Sánchez Medina (1)\n* Alessandro Kiefer (1)\n* Andras Nemeth (1)\n* Antonio Leal (1)\n* Apokli (1)\n* Artem Blinov (1)\n* Arthur Augusto (1)\n* Axel Céard (1)\n* Baran Umut Mutlu (1)\n* Benjamin Faguer (1)\n* Benson Muite (1)\n* Beryann Parker (1)\n* Breu Weber (1)\n* Bruno Arakaki (1)\n* Cem Olcay (1)\n* Claudio Pereira (1)\n* Cristian Cabrera (1)\n* CurlingTongs (1)\n* Cyprien Huissoud (1)\n* Dag7 (1)\n* Damian (1)\n* David Girón (1)\n* David Pilato (1)\n* Diemesleno Souza Carvalho (1)\n* Dinh Huy (1)\n* Elijah Grapes  (1)\n* Elizabeth Sherrock (1)\n* Er2 (1)\n* Felipe Kinoshita (1)\n* Feoder Aleksandrov (1)\n* Feodor Aleksandrov (1)\n* Filip Faste (1)\n* Fredrik Forsberg (1)\n* Gabriel Macedo (1)\n* Gabriele Boddi (1)\n* Garen Hart (1)\n* Gerardo Soares (1)\n* Glauco Luiz Corrêa Basilio Dos (1)\n* Guillaume Gautier (1)\n* Gustavo Castro (1)\n* HSGamer (1)\n* Haotong Chen (1)\n* Henk Broeze (1)\n* Huiting Milewski (1)\n* Hyemin Shim (1)\n* Ian Molina (1)\n* Ingrid Yrvin (1)\n* Ioannis Sarlis (1)\n* Iván Montiel Cardona (1)\n* Jaimie85 (1)\n* Jeff Huang (1)\n* Jeison Cardoso (1)\n* Jesper Juellund Jensen (1)\n* Joek van Montfort (1)\n* Jonas Hummel (1)\n* Joost T (1)\n* Kaipo James Wilmeth (1)\n* Kaique Ribeiro de Campos (1)\n* Kamen Mladenov (1)\n* Ke Ding (1)\n* Keiko Machiya (1)\n* Kurushina Margarita (1)\n* Lari Oesch (1)\n* Lee Yunseok (1)\n* Leidy (1)\n* Leonardo Martelli Oliveira (1)\n* Leonardo Mendes Miraglia (1)\n* Ludovico Besana (1)\n* Manuel Carcach (1)\n* Marcos Paulo Carvalho (1)\n* Marek freezy Víger (1)\n* Martin Gondermann (1)\n* Mathieu H (1)\n* Matteo Giaccone (1)\n* Mattias Roos (1)\n* Mehrad Mahmoudian (1)\n* Merlin Erdogmus (1)\n* Miguel García (1)\n* Mikkel Gravgaard (1)\n* Mui Kai En (1)\n* Nadezhda Ratckevich (1)\n* Nathan (1)\n* Netanel-M (1)\n* Novaldy Paringgi (1)\n* Paola Ducolin (1)\n* Pascal (1)\n* Paulo Amaral (1)\n* Pavel Kartsel (1)\n* Peng Li (1)\n* Perevedko (1)\n* Peter Bolch (1)\n* Rodrigo Iglesias (1)\n* Rogério Pimentel (1)\n* Rokibujjaman Rajon (1)\n* Roland Scholz (1)\n* Sander Boer (1)\n* Satjawat Paanakaan (1)\n* Serge Stinckwich (1)\n* Shu Shean (1)\n* Sveinn í Felli (1)\n* Sıtkı Bağdat (1)\n* T-Jak-T (1)\n* TA (1)\n* Temuri Doghonadze (1)\n* Thiago Buenos Aires Mattos (1)\n* Thiago Lopes (1)\n* Thodoris Bais (1)\n* Timo Roschier (1)\n* Tom Julux (1)\n* Tommi Toivonen (1)\n* Tuomas Hietala (1)\n* Uğur Küpeli (1)\n* Vadim R (1)\n* Valdeci Gomes (1)\n* Vee F (1)\n* Veres Károly (1)\n* Vitezslav Homolka (1)\n* Vladimir Knyazev (1)\n* Wim Jaap (1)\n* Xubin Cao (1)\n* Zaiyi Wang (1)\n* Zhe Wang (1)\n* Zhengkun Wang (1)\n* ggobugi27 (1)\n* hugoalh (1)\n* jadex (1)\n* leela (1)\n* li-sky (1)\n* noreply+26611@weblate.org (1)\n* noreply+6123-49ee60fcd5@weblate.org (1)\n* noreply+8441@weblate.org (1)\n* zxchen (1)\n* Максим Якимчук (1)\n* 丁科 (1)\n* 张达 (1)\n* 郑小则 (1)\n* 陆轶凡 (1)\n\n\n\n\n\n"
        },
        {
          "name": "CORETEAM.html",
          "type": "blob",
          "size": 7.7431640625,
          "content": "<h1> Sonic Pi Core Team </h1>\n\n<p>\n  Meet the Sonic Pi Core Team - a dedicated group of live coders, working\n  hard to bring you exciting new features, sounds and music making\n  possibilities.\n</p>\n\n<br/>\n\n<table cellpadding=\"9\">\n  <tr>\n    <td>\n      <table>\n        <tr>\n          <td> <a href=\"https://twitter.com/samaaron\"><img height=\"100dx\" width=\"100dx\" src=\":/images/coreteam/samaaron.png\"></a> </td>\n          <td>\n            <font size=\"5\" ><span style=\"color:white; background-color:deeppink;\">Sam Aaron</span></font>\n            <a href=\"https://twitter.com/samaaron\">Twitter</a> | <a href=\"https://github.com/samaaron\">GitHub</a>\n            <p>\n              Professional Live Coder and Creator of Sonic Pi\n              <br/>\n              Performing as <a href=\"https://youtube.com/samaaron\"> Sam Aaron </a>\n              <br/>\n            </p>\n          </td>\n        </tr>\n      </table>\n\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n      <table>\n        <tr>\n          <td> <a href=\"https://twitter.com/xavriley\"><img height=\"100dx\" width=\"100dx\" src=\":/images/coreteam/xavierriley.png\"></a> </td>\n          <td>\n            <font size=\"5\" ><span style=\"color:white; background-color:deeppink;\">Xavier Riley</span></font>\n            <a href=\"https://twitter.com/xavriley\">Twitter</a> | <a href=\"https://github.com/xavriley\">GitHub</a>\n            <p>\n              Jazz guitarist, double bassist &amp; music graduate who\n              writes Ruby code for a living.\n            </p>\n          </td>\n        </tr>\n      </table>\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n\n      <table>\n        <tr>\n          <td> <a href=\"https://twitter.com/josephwilk\"><img height=\"100dx\" width=\"100dx\" src=\":/images/coreteam/josephwilk.png\"></a> </td>\n          <td>\n            <font size=\"5\" ><span style=\"color:white; background-color:deeppink;\">Joseph Wilk</span></font>\n            <a href=\"https://twitter.com/josephwilk\">Twitter</a> | <a href=\"https://github.com/josephwilk\">GitHub</a>\n            <p>\n              Programmer &amp; live coder of sound, light &amp; poetry.\n              <br/>\n\n              Performing as <a href=\"http://www.repl-electric.com\">Repl Electric</a>.\n            </p>\n          </td>\n        </tr>\n      </table>\n\n    </td>\n  </tr>\n\n\n  <tr>\n    <td>\n\n      <table>\n        <tr>\n          <td> <a href=\"https://twitter.com/luislloret\"><img height=\"100dx\" width=\"100dx\" src=\":/images/coreteam/luislloret.png\"></a> </td>\n          <td>\n            <font size=\"5\" ><span style=\"color:white; background-color:deeppink;\">Luis Lloret</span></font>\n            <a href=\"https://twitter.com/luislloret\">Twitter</a> | <a href=\"https://github.com/llloret\">GitHub</a>\n\n            <p>\n              Music Technology is my thing. Helping to bring Sonic Pi to Windows. I am also a member of <a href=\"http://supercollider.github.io\">SuperCollider</a>.\n            </p>\n\n          </td>\n        </tr>\n      </table>\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n\n      <table>\n        <tr>\n          <td> <a href=\"https://www.facebook.com/groups/1803208756622082\"><img height=\"100dx\" width=\"100dx\" src=\":/images/coreteam/acheater.png\"></a> </td>\n          <td>\n            <font size=\"5\" ><span style=\"color:white; background-color:deeppink;\">Adrian Cheater</span></font>\n            <a href=\"https://twitter.com/wpgFactoid\">Twitter</a> | <a href=\"https://github.com/Factoid\">GitHub</a>\n            <p>\n              Standing on the shoulders of Sophie Wilson &amp; Wendy Carlos, I aim to empower others to be creative &amp; shine bright.\n            </p>\n          </td>\n        </tr>\n      </table>\n\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n\n      <table>\n        <tr>\n          <td> <a href=\" https://rbnrpi.wordpress.com\"><img height=\"100dx\" width=\"100dx\" src=\":/images/coreteam/robinnewman.png\"></a> </td>\n          <td>\n            <font size=\"5\" ><span style=\"color:white; background-color:deeppink;\">Robin Newman</span></font>\n            <a href=\"https://twitter.com/rbnman\">Twitter</a> | <a href=\"http://github.com/rbnpi\">GitHub</a>\n            <p>\n              Retired Teacher of Computing. Weaned on Nascom II, Apple II &amp; the BBC Micro. Now switched on to Sonic Pi.\n            </p>\n          </td>\n        </tr>\n      </table>\n\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n\n      <table>\n        <tr>\n          <td> <a href=\"https://twitter.com/northwardface\"><img height=\"100dx\" width=\"100dx\" src=\":/images/coreteam/ethancrawford.png\"></a> </td>\n          <td>\n            <font size=\"5\" ><span style=\"color:white; background-color:deeppink;\">Ethan Crawford</span></font>\n            <a href=\"https://twitter.com/northwardface\">Twitter</a> | <a href=\"https://github.com/ethancrawford\">GitHub</a>\n            <p>\n              Programmer &amp; aspiring trumpet player. Dreaming of ways to improve Sonic Pi.\n            </p>\n          </td>\n        </tr>\n      </table>\n\n    </td>\n  </tr>\n\n    <tr>\n    <td>\n\n      <table>\n        <tr>\n          <td> <a href=\"https://twitter.com/cmaughan\"><img height=\"100dx\" width=\"100dx\" src=\":/images/coreteam/chrismaughan.png\"></a> </td>\n          <td>\n            <font size=\"5\" ><span style=\"color:white; background-color:deeppink;\">Chris Maughan</span></font>\n            <a href=\"https://twitter.com/cmaughan\">Twitter</a> | <a href=\"https://github.com/cmaughan\">GitHub</a>\n            <p>\n              I'm a Graphics Programmer, I like to build tools that help people visualise things in a meaningful way.\n            </p>\n          </td>\n        </tr>\n      </table>\n\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n\n      <table>\n        <tr>\n          <td> <a href=\"https://lily.flowers/\"><img height=\"100dx\" width=\"100dx\" src=\":/images/coreteam/lilyfoster.png\"></a> </td>\n          <td>\n            <font size=\"5\" ><span style=\"color:white; background-color:deeppink;\">Lily Foster</span></font>\n            <a href=\"https://lily.flowers/\">Website</a> | <a href=\"https://github.com/lilyinstarlight\">GitHub</a>\n            <p>\n              Artistic programmer &amp; hobbyist musician. Seeking to facilitate education and learning through creativity.\n            </p>\n          </td>\n        </tr>\n      </table>\n\n    </td>\n  </tr>\n</table>\n\n\n<h1>Past Members</h1>\n\n<p>\n  The following were previously members of the Core Team but have since\n  moved onto pastures new. We are hugely indebted for all of the time\n  and effort they have placed into Sonic Pi. Thank-you.\n</p>\n\n<br/>\n\n<table cellpadding=\"9\">\n\n  <tr>\n    <td>\n\n      <table>\n        <tr>\n          <td><a href=\"https://twitter.com/weatherfnord\"> <img height=\"100dx\" width=\"100dx\" src=\":/images/coreteam/jweather.png\"></a> </td>\n          <td>\n            <font size=\"5\" ><span style=\"color:white; background-color:deeppink;\">Jeremy Weatherford</span></font>              <a href=\"https://twitter.com/weatherfnord\">Twitter</a> | <a href=\"https://github.com/jweather\">GitHub</a>\n\n            <p>\n              Composer of algorithms, musical and otherwise.  Builder of <a href=\"http://hackaday.io/project/3033-stepper-music-box\">musical</a> <a href=\"http://hackaday.io/project/3533-christmas-orchestra\">contraptions</a>.  Performing as <a href=\"https://soundcloud.com/jweather/\">jweather</a>.\n              <br/>\n\n            </p>\n\n          </td>\n        </tr>\n      </table>\n\n    </td>\n  </tr>\n\n  <tr>\n    <td>\n\n      <table>\n        <tr>\n          <td> <a href=\"http://www.hanno.de\"><img height=\"100dx\" width=\"100dx\" src=\":/images/coreteam/hannozulla.png\"></a> </td>\n          <td>\n            <font size=\"5\" ><span style=\"color:white; background-color:deeppink;\">Hanno Zulla</span></font>\n            <a href=\"https://twitter.com/hzulla\">Twitter</a> | <a href=\"https://github.com/hzulla\">GitHub</a>\n            <p>\n              Linux whizz &amp; friend of i18n. Helping to bring Sonic Pi to your native tongue &amp; to your Debian desktop.\n            </p>\n          </td>\n        </tr>\n      </table>\n\n    </td>\n  </tr>\n</table>\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 2.5947265625,
          "content": "# FAQ - Frequently Asked Questions\n\n## Doesn't work? Where to look for clues:\n\nIf you have trouble with Sonic Pi, have a look at the logs. You will\nfind the log files in your user home directory in `~/.sonic-pi/log/`.\nMost likely, you will find a helpful error message there.\n\n## Windows: Server boot error - Can't open UDP port 4558\n\nThis problem was reported on Windows machines in Sonic Pi v. 2.7. It was reported in following issues: [#699](https://github.com/samaaron/sonic-pi/issues/699), [#702](https://github.com/samaaron/sonic-pi/issues/702), [#720](https://github.com/samaaron/sonic-pi/issues/720). Occurred on Windows 7, Windows 8.1 & Windows 10.\n\n*Workaround solution:*\n\n* be sure, that you have closed Sonic Pi\n* open Windows Task Manager with `Ctrl + Shift + Esc` \n* try to kill all processes listed below if they're still running\n\nRuby Interpreter (CUI)  \nscsynth.exe\n\nYou can also check in Task Manager that there is no application entry sonic-pi.exe  \nand quit it if there is.\n\n## Linux: There is no sound with use_synth :piano\n\nYou probably didn't install the SC3 plugins\npackage for SuperCollider on your system. If there\nis no binary package provided by your distribution, you can\n[install it from source](https://github.com/samaaron/sonic-pi/blob/main/INSTALL-LINUX.md#supercollider-sc3-plugins).\n\n## Linux: Trouble with JACK\n\nIf the GUI complains that _\"The Sonic Pi server could not be started!\"_\nor the message _\"Loading previous buffer contents. Please wait...\"_\ndoes not disappear from your buffers after startup, the most likely\nreason is a problem with JACK.\n\nThe Linux version of Sonic Pi relies on the\n[JACK audio connection kit](http://jackaudio.github.io/) for its audio\noutput and it needs to be installed with it. The `jackd` audio daemon\nneeds to be started in the background and if it isn't running already,\nthe Sonic Pi server will start it for you. If this fails, Sonic Pi never\nfinishes starting up and won't get ready for you.\n\nAs a workaround, try this:\n\n* be sure that you have closed Sonic Pi\n* start jackd manually using the `qjackctl` GUI\n* once it started, start `sonic-pi` again\n\nSonic Pi contributor @rbnpi has described a [working configuration to\nworkaround problems starting JACK](https://github.com/samaaron/sonic-pi/issues/827#issuecomment-160928821).\n\nOn Linux distributions using PulseAudio, starting JACK may interfere\nwith the applications using sound that were running already, e.g.\nFirefox will stop playing audio once JACK starts. There is a guide on\n[how to configure JACK with PulseAudio](https://github.com/jackaudio/jackaudio.github.com/wiki/WalkThrough_User_PulseOnJack)\nto avoid this.\n\n----\n"
        },
        {
          "name": "FUNDING.yml",
          "type": "blob",
          "size": 0.0341796875,
          "content": "github: samaaron\npatreon: samaaron\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 15.291015625,
          "content": "# License\n\n## Main Source Code\n\n(contents of [app/](https://github.com/sonic-pi-net/sonic-pi/tree/stable/app) directory)\n\nThe MIT License (MIT)\n\nCopyright (c) 2012 - 2023 Samuel Aaron and contributors (sam@sonic-pi.net)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n## GPL Compliance\n\nAs Sonic Pi links with and contains GPLv3-licensed software, distributors of\nSonic Pi GUI binaries must comply with the terms of the GPL.\n\n## Samples\n\n(contents of [etc/samples/](https://github.com/sonic-pi-net/sonic-pi/tree/stable/etc/samples))\n\nAll the bundled samples are individually licensed under a\n[CC0 1.0 Universal Public Domain Dedication](http://creativecommons.org/publicdomain/zero/1.0/). They\nhave been obtained from [freesound.org](http://freesound.org) and\nlinks to their sources can be found in the file\n[etc/samples/README.md](https://github.com/sonic-pi-net/sonic-pi/blob/main/etc/samples/README.md)\n\nOne exception is the samples prefixed with `arovane_`. These have been kindly donated by Uwe Zahn\n([Arovane](https://arovane.bandcamp.com)) also under a CC0 license. Thanks Uwe!\n\n[http://creativecommons.org/publicdomain/zero/1.0/](http://creativecommons.org/publicdomain/zero/1.0/)\n\n## Wavetables\n\n(contents of [etc/wavetables/](https://github.com/sonic-pi-net/sonic-pi/tree/stable/etc/wavetables)\n\nAll the bundled wavetable samples are individually licensed under a\n[CC0 1.0 Universal Public Domain Dedication](http://creativecommons.org/publicdomain/zero/1.0/). They\nhave been obtained from the\n[Adventure Kid](http://www.adventurekid.se/akrt/waveforms/adventure-kid-waveforms/)\nsite.\n\n## Font\n\nThe font used in the GUI is [Hack](http://sourcefoundry.org/hack/) released under the [Hack Open Font License v2.0](https://github.com/chrissimpkins/Hack/blob/master/LICENSE.md)\n\n## Docs, Tutorial and Examples\n\n(contents of [etc/doc/](https://github.com/sonic-pi-net/sonic-pi/tree/stable/etc/doc) and [etc/examples](https://github.com/sonic-pi-net/sonic-pi/tree/stable/etc/examples) directories)\n\nAll the examples (in\n[etc/examples](https://github.com/sonic-pi-net/sonic-pi/tree/stable/etc/examples))\nand contents of the doc directory including the articles and the\ntutorial are copyright by Sam Aaron unless a specific author is stated\nwith the comment `# coded by ...` in which case the copyright is\nassociated with that author (2015) and the content is released under the\nCC BY-SA 4.0 license:\n\n[http://creativecommons.org/licenses/by-sa/4.0/](http://creativecommons.org/licenses/by-sa/4.0/)\n\n## Synth Designs\n\n(contents of [etc/synthdefs/](https://github.com/sonic-pi-net/sonic-pi/tree/stable/etc/synthdefs) directory)\n\nThe bundled synth designs (synthdefs) are licensed under the [MIT License](http://opensource.org/licenses/MIT) with the following exceptions, which are licensed under the [GNU General Public License v3](https://www.gnu.org/licenses/gpl-3.0.html):\n\n- [etc/synthdefs/designs/supercollider/bass_foundation.scd](https://github.com/sonic-pi-net/sonic-pi/tree/stable/etc/synthdefs/designs/supercollider/bass_foundation.scd)\n- [etc/synthdefs/designs/supercollider/bass_highend.scd](https://github.com/sonic-pi-net/sonic-pi/tree/stable/etc/synthdefs/designs/supercollider/bass_highend.scd)\n- [etc/synthdefs/designs/supercollider/winwood_lead.scd](https://github.com/sonic-pi-net/sonic-pi/tree/stable/etc/synthdefs/designs/supercollider/winwood_lead.scd)\n- [etc/synthdefs/designs/supercollider/organ_tonewheel.scd](https://github.com/sonic-pi-net/sonic-pi/tree/stable/etc/synthdefs/designs/supercollider/organ_tonewheel.scd)\n\nSee their source files for links to the original designs.\n\n## Bundled Software\n\nThe following is a list of the software included in Sonic Pi with their\nrelevant licenses:\n\n### Unlinked software\n\n- [Ruby](http://ruby-lang.org) - [Ruby License](https://www.ruby-lang.org/en/about/license.txt)\n- [SuperCollider](http://supercollider.sourceforge.net) - [GNU General Public License v3](https://www.gnu.org/licenses/gpl-3.0.html)\n- [Erlang](http://erlang.org) - [Erlang Public License](https://www.erlang.org/EPLICENSE)\n- [Elixir](http://elixir-lang.org/) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [Aubio](http://aubio.org) - [GNU General Public License v3](https://www.gnu.org/licenses/gpl-3.0.html)\n- [esbuild](https://esbuild.github.io/) - [MIT License](http://opensource.org/licenses/MIT)\n- [tailwind](https://tailwindcss.com/) - [MIT License](http://opensource.org/licenses/MIT)\n\n### Dynamically Linked Libraries for GUI\n\n- [Qt](http://qt-project.org) - [GNU Lesser General Public License v2.1](https://www.gnu.org/licenses/lgpl-2.1.html)\n- [QScintilla2](http://www.riverbankcomputing.com/software/qscintilla/intro) - [GNU General Public License v2](https://www.gnu.org/licenses/gpl-2.0.html)\n- [SingleApplication](https://github.com/itay-grudev/SingleApplication) - [MIT License](http://opensource.org/licenses/MIT)\n- [KISS FFT](https://github.com/mborgerding/kissfft) - [BSD 3-Clause License](http://opensource.org/licenses/BSD-3-Clause)\n- [Tracy](https://bitbucket.org/wolfpld/tracy/src/master/) - [BSD 3-Clause License](http://opensource.org/licenses/BSD-3-Clause)\n- [ghc_filesystem](https://github.com/gulrak/filesystem) - [MIT License](http://opensource.org/licenses/MIT)\n- [kissnet](https://github.com/Ybalrid/kissnet) - [MIT License](http://opensource.org/licenses/MIT)\n- [liblo](https://github.com/radarsat1/liblo) - [GNU Lesser General Public License v2.1](https://www.gnu.org/licenses/lgpl-2.1.html)\n- [boost (subset used by SuperCollider's scsynth)](https://www.boost.org) - [Boost Software License 1.0 (BSL-1.0)](https://opensource.org/licenses/BSL-1.0)\n- [TLSF](http://www.gii.upv.es/tlsf/) - [GNU Lesser General Public License v2.1](https://www.gnu.org/licenses/lgpl-2.1.html)\n\n### Dynamically Linked Libraries for Aubio\n\n- [ogg](https://github.com/xiph/ogg) - [BSD 3-Clause License](http://opensource.org/licenses/BSD-3-Clause)\n- [opus](https://github.com/xiph/opus) - [BSD 3-Clause License](http://opensource.org/licenses/BSD-3-Clause)\n- [flac](https://github.com/xiph/flac) - [GNU Lesser General Public License v2.1](https://www.gnu.org/licenses/lgpl-2.1.html)\n- [vorbis](https://github.com/xiph/vorbis) - [BSD 3-Clause License](http://opensource.org/licenses/BSD-3-Clause)\n- [libsndfile](http://www.mega-nerd.com/libsndfile/) - [GNU Lesser General Public License v2.1](https://www.gnu.org/licenses/lgpl-2.1.html)\n\n### Included Ruby Libraries for Spider Language Server\n\n(contents of [app/server/ruby/vendor/](https://github.com/sonic-pi-net/sonic-pi/tree/stable/app/server/ruby/vendor))\n\n- [ActiveSupport](https://github.com/rails/rails/tree/master/activesupport) - [MIT License](http://opensource.org/licenses/MIT)\n- [Blankslate](https://github.com/masover/blankslate) - [MIT License](http://opensource.org/licensesMIT)\n- [Concurrent Ruby](https://github.com/ruby-concurrency/concurrent-ruby) - [MIT License](http://opensource.org/licensesMIT)\n- [gettext](https://github.com/ruby-gettext/gettext) - [Ruby License](https://www.ruby-lang.org/en/about/license.txt)\n- [i81n](https://github.com/svenfuchs/i18n) - [MIT License](http://opensource.org/licenses/MIT)\n- [Kramdown](http://kramdown.gettalong.org) - [MIT License](http://opensource.org/licenses/MIT)\n- [Locale](https://github.com/ruby-gettext/locale) - [Ruby License](https://www.ruby-lang.org/en/about/license.txt)\n- [Memoist](https://github.com/matthewrudy/memoist) - [MIT License](http://opensource.org/licenses/MIT)\n- [Metaclass](https://github.com/floehopper/metaclass) - [MIT License](http://opensource.org/licenses/MIT)\n- [MiniTest](http://ruby-doc.org/stdlib-2.0.0/libdoc/minitest/rdoc/MiniTest.html) - [Ruby License](https://www.ruby-lang.org/en/about/license.txt)\n- [Mocha](http://gofreerange.com/mocha/docs/) - [MIT License](http://opensource.org/licenses/MIT)\n- [Multi JSON](https://github.com/intridea/multi_json) - [MIT License](http://opensource.org/licenses/MIT)\n- [Rouge](https://github.com/jneen/rouge) - [MIT License](http://opensource.org/licenses/MIT)\n- [Ruby Beautify](https://github.com/erniebrodeur/ruby-beautify) - [MIT License](http://opensource.org/licenses/MIT)\n- [Rugged](https://github.com/libgit2/rugged) - [MIT License](http://opensource.org/licenses/MIT)\n- [Text](https://github.com/threedaymonk/text) - [MIT License](http://opensource.org/licenses/MIT)\n- [Tomlrb](https://github.com/fbernier/tomlrb) - [MIT License](http://opensource.org/licenses/MIT)\n- [TZ Info](https://github.com/tzinfo/tzinfo) - [MIT License](http://opensource.org/licenses/MIT)\n- [WaveFile](https://github.com/jstrait/wavefile/) - [MIT License](http://opensource.org/licenses/MIT)\n\n### Dynamically Linked Libraries for Tau IO Server NIFs\n\n- [sp_midi](https://github.com/sonic-pi-net/sp_midi) - [MIT License](http://opensource.org/licenses/MIT)\n- [sp_link](https://github.com/sonic-pi-net/sp_link) - [MIT License](http://opensource.org/licenses/MIT)\n- [Ableton Link](https://github.com/Ableton/link) - [GNU General Public License v2](https://www.gnu.org/licenses/gpl-2.0.html)\n- [RtMidi](https://github.com/thestk/rtmidi) - [MIT License + sharing request](https://github.com/thestk/rtmidi/blob/master/LICENSE)\n\n### Included Elixir Libraries for Tau IO Server\n\n(contents of app/server/beam/tau/deps/):\n\n- [Bunt](https://github.com/rrrene/bunt) - [MIT License](http://opensource.org/licenses/MIT)\n- [castore](https://github.com/elixir-mint/castore) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [cowboy](https://github.com/ninenines/cowboy) - [ISC License](https://opensource.org/licenses/ISC)\n- [cowboy_telemetry](https://github.com/beam-telemetry/cowboy_telemetry) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [cowlib](https://github.com/ninenines/cowlib) - [ISC License](https://opensource.org/licenses/ISC)\n- [credo](https://github.com/rrrene/credo) - [MIT License](http://opensource.org/licenses/MIT)\n- [decimal](https://github.com/ericmj/decimal) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [decimal](https://github.com/ericmj/decimal) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [ecto](https://github.com/elixir-ecto/ecto) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [esbuild](https://github.com/phoenixframework/esbuild) - [MIT License](http://opensource.org/licenses/MIT)\n- [expo](https://github.com/elixir-gettext/expo) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [exsync](https://github.com/falood/exsync) - [BSD 3-Clause License](http://opensource.org/licenses/BSD-3-Clause)\n- [file_system](https://github.com/falood/file_system) - [WTFPL](http://www.wtfpl.net/)\n- [floki](https://github.com/philss/floki) - [MIT License](http://opensource.org/licenses/MIT)\n- [gettext](https://github.com/elixir-gettext/gettext) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [heroicons](https://github.com/mveytsman/heroicons_elixir) - [MIT License](http://opensource.org/licenses/MIT)\n- [jason](https://github.com/michalmuskala/jason) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [logger_file_backend](https://github.com/onkel-dirtus/logger_file_backend) - [MIT License](http://opensource.org/licenses/MIT)\n- [mime](https://github.com/elixir-plug/mime) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [petal_components](https://github.com/petalframework/petal_components) - [MIT License](http://opensource.org/licenses/MIT)\n- [phoenix](https://github.com/phoenixframework/phoenix) - [MIT License](http://opensource.org/licenses/MIT)\n- [phoenix_ecto](https://github.com/phoenixframework/phoenix_ecto) - [MIT License](http://opensource.org/licenses/MIT)\n- [phoenix_html](https://github.com/phoenixframework/phoenix_html) - [MIT License](http://opensource.org/licenses/MIT)\n- [phoenix_live_dashboard](https://github.com/phoenixframework/phoenix_live_dashboard) - [MIT License](http://opensource.org/licenses/MIT)\n- [phoenix_live_reload](https://github.com/phoenixframework/phoenix_live_reload) - [MIT License](http://opensource.org/licenses/MIT)\n- [phoenix_live_view](https://github.com/phoenixframework/phoenix_live_view) - [MIT License](http://opensource.org/licenses/MIT)\n- [phoenix_pubsub](https://github.com/phoenixframework/phoenix_pubsub) - [MIT License](http://opensource.org/licenses/MIT)\n- [phoenix_template](https://github.com/phoenixframework/phoenix_template) - [MIT License](http://opensource.org/licenses/MIT)\n- [plug](https://github.com/elixir-plug/plug) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [plug_cowboy](https://github.com/elixir-plug/plug_cowboy) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [plug_crypto](https://github.com/elixir-plug/plug_crypto) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [ranch](https://github.com/ninenines/ranch) - [ISC License](https://opensource.org/licenses/ISC)\n- [tailwind](https://github.com/phoenixframework/tailwind) - [MIT License](http://opensource.org/licenses/MIT)\n- [telemetry](https://github.com/beam-telemetry/telemetry) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [telemetry_metrics](https://github.com/beam-telemetry/telemetry_metrics) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [telemetry_poller](https://github.com/beam-telemetry/telemetry_poller) - [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n- [websock](https://github.com/phoenixframework/websock) - [MIT License](http://opensource.org/licenses/MIT)\n- [websock_adapter](https://github.com/phoenixframework/websock_adapter) - [MIT License](http://opensource.org/licenses/MIT)\n\n### Included Javascript Libraries for Tau IO Server\n\n(contents of [app/server/beam/tau/assets/vendor/](https://github.com/sonic-pi-net/sonic-pi/tree/stable/app/server/beam/tau/assets/vendor)):\n\n- [Alpine.js](https://github.com/alpinejs/alpine) - [MIT License](http://opensource.org/licenses/MIT)\n- [topbar](http://buunguyen.github.io/topbar) - [MIT License](http://opensource.org/licenses/MIT)\n- [Hydra Synth](https://github.com/hydra-synth/hydra-synth) - [GNU General Public License v3](https://www.gnu.org/licenses/gpl-3.0.html)\n- [P5.js](https://github.com/processing/p5.js) - [GNU Lesser General Public License v2.1](https://www.gnu.org/licenses/lgpl-2.1.html)\n- [tone.js](https://tonejs.github.io) - [MIT License](http://opensource.org/licenses/MIT)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.09765625,
          "content": "                                           ╘\n                                    ─       ╛▒╛\n                                     ▐╫       ▄█├\n                              ─╟╛      █▄      ╪▓▀\n                    ╓┤┤┤┤┤┤┤┤┤  ╩▌      ██      ▀▓▌\n                     ▐▒   ╬▒     ╟▓╘    ─▓█      ▓▓├\n                     ▒╫   ▒╪      ▓█     ▓▓─     ▓▓▄\n                    ╒▒─  │▒       ▓█     ▓▓     ─▓▓─\n                    ╬▒   ▄▒ ╒    ╪▓═    ╬▓╬     ▌▓▄\n                    ╥╒   ╦╥     ╕█╒    ╙▓▐     ▄▓╫\n                               ▐╩     ▒▒      ▀▀\n                                    ╒╪      ▐▄\n\n                 _____             __        ____  __\n                / ___/____  ____  /_/____   / __ \\/_/\n                \\__ \\/ __ \\/ __ \\/ / ___/  / /_/ / /\n               ___/ / /_/ / / / / / /__   / ____/ /\n              /____/\\____/_/ /_/_/\\___/  /_/   /_/\n\n\n## Code. Music. Live.\n\nSonic Pi is a *new kind of musical instrument*. Instead of strumming\nstrings or whacking things with sticks - you write code - **live**.\n\nSonic Pi has been designed with the aim to find a harmonious balance\nbetween three core principles:\n\n* **Simple** enough for the 10 year old within you\n* **Joyful** enough for you to lose yourself through play\n* **Powerful** enough for your own expressions\n\nSonic Pi is a complete open source programming environment originally\ndesigned to explore and *teach programming concepts* within schools through\nthe process of creating *new sounds*.\n\nIn addition to being an engaging education resource it has evolved into\nan *extremely powerful* and performance-ready *live coding instrument* suitable\nfor professional artists and DJs.\n\nWhilst Education is a core focus it now sits at the intersection\nbetween three core domains:\n\n* **Art** - providing the means to express yourself and ask new questions of music and notation\n* **Technology** - exploring questions related to liveness, time and concurrency in programming languages\n* **Education**  - demonstrating that open play rather than rigid structures increases motivation and engagement in the classroom\n\nAgain, finding a balance working to the best benefits of all these\ndomains is the objective.\n\n\n* Info & Latest Releases: https://sonic-pi.net\n* Source: https://github.com/sonic-pi-net/sonic-pi\n* Computing Education Resources for Schools: https://www.raspberrypi.org/learning/sonic-pi-lessons/\n* Music Education Toolkit for Schools: https://sonic-pi.mehackit.org\n\n## Contributors\n\nSonic Pi has been developed with support from many individuals and organisations. Please see the [CONTRIBUTORS.md](https://github.com/samaaron/sonic-pi/blob/main/CONTRIBUTORS.md) file for a more complete list.\n\n## Translations\n\nSonic Pi's application and built in tutorial have been translated into several languages thanks to the awesome work of several [volunteer translators](CONTRIBUTORS.md#translation):\n\nStatus                                                                                                                                                       | Language            | Application        | Tutorial\n-----------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------ | :----------------: | :----------------:\n[![Translation Status of Sonic Pi: da](https://hosted.weblate.org/widgets/sonic-pi/da/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | Danish              | :white_check_mark: | :red_circle:\n[![Translation Status of Sonic Pi: nl](https://hosted.weblate.org/widgets/sonic-pi/nl/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | Dutch               | :white_check_mark: | :white_check_mark:\n[![Translation Status of Sonic Pi: fi](https://hosted.weblate.org/widgets/sonic-pi/fi/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | Finnish             | :white_check_mark: | :red_circle:\n[![Translation Status of Sonic Pi: fr](https://hosted.weblate.org/widgets/sonic-pi/fr/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | French              | :white_check_mark: | :white_check_mark:\n[![Translation Status of Sonic Pi: de](https://hosted.weblate.org/widgets/sonic-pi/de/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | German              | :white_check_mark: | :white_check_mark:\n[![Translation Status of Sonic Pi: hu](https://hosted.weblate.org/widgets/sonic-pi/hu/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | Hungarian           | :white_check_mark: | :red_circle:\n[![Translation Status of Sonic Pi: is](https://hosted.weblate.org/widgets/sonic-pi/is/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | Icelandic           | :white_check_mark: | :red_circle:\n[![Translation Status of Sonic Pi: it](https://hosted.weblate.org/widgets/sonic-pi/it/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | Italian             | :white_check_mark: | :white_check_mark:\n[![Translation Status of Sonic Pi: ja](https://hosted.weblate.org/widgets/sonic-pi/ja/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | Japanese            | :white_check_mark: | :white_check_mark:\n[![Translation Status of Sonic Pi: nb](https://hosted.weblate.org/widgets/sonic-pi/nb/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | Norwegian Bokmål    | :white_check_mark: | :white_check_mark:\n[![Translation Status of Sonic Pi: pl](https://hosted.weblate.org/widgets/sonic-pi/pl/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | Polish              | :white_check_mark: | :white_check_mark:\n[![Translation Status of Sonic Pi: pt](https://hosted.weblate.org/widgets/sonic-pi/pt/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | Portuguese          | :red_circle:       | :white_check_mark:\n[![Translation Status of Sonic Pi: ro](https://hosted.weblate.org/widgets/sonic-pi/ro/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | Romanian            | :white_check_mark: | :white_check_mark:\n[![Translation Status of Sonic Pi: ru](https://hosted.weblate.org/widgets/sonic-pi/ru/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | Russian             | :white_check_mark: | :white_check_mark:\n[![Translation Status of Sonic Pi: zh_Hans](https://hosted.weblate.org/widgets/sonic-pi/zh_Hans/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/) | Simplified Chinese  | :white_check_mark: | :red_circle:\n[![Translation Status of Sonic Pi: es](https://hosted.weblate.org/widgets/sonic-pi/es/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | Spanish             | :white_check_mark: | :white_check_mark:\n[![Translation Status of Sonic Pi: si](https://hosted.weblate.org/widgets/sonic-pi/si/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)           | sinhalese           | :white_check_mark: | :red_circle:\n[![Translation Status of Sonic Pi: tr_TR](https://hosted.weblate.org/widgets/sonic-pi/tr_TR/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/) | Turkish             | :white_check_mark: | :red_circle:\n\nWould you like to contribute a translation too? If so, please take a look at our [translation docs](https://github.com/samaaron/sonic-pi/blob/main/TRANSLATION.md) to get started.\n\n## Information for developers\n\nSonic Pi is under active development, and welcomes new contributors:\n\n* [Contributing](CONTRIBUTING.md)\n* [Change log](CHANGELOG.md)\n* [Community](COMMUNITY.md)\n* [Contributors](CONTRIBUTORS.md)\n* Building\n  - [Linux](BUILD-LINUX.md)\n  - [Mac](BUILD-MAC.md)\n  - [Windows](BUILD-WINDOWS.md)\n* [License](LICENSE.md)\n* [Testing](TESTING.md)\n* [Translation](TRANSLATION.md)\n\n[![Weblate](https://hosted.weblate.org/widgets/sonic-pi/-/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)\n<br/>\n[![Travis CI](https://travis-ci.org/samaaron/sonic-pi.svg?branch=main)](https://travis-ci.org/samaaron/sonic-pi)\n<br/> \n"
        },
        {
          "name": "SYNTH_DESIGN.md",
          "type": "blob",
          "size": 11.009765625,
          "content": "# Synth Design\n\nThe sounds you hear in Sonic Pi are all produced by the SuperCollider\nsynthesis engine. These synths and effects have to be defined beforehand\nin a special kind of binary file called a `synthdef`.  The built in\nsynthdefs are loaded up on boot so they are ready to trigger.\n\n## Design Methods\n\nSynthdefs are ultimately compiled from source code into binary files, but there\nare two main ways you can do this. You can either use the Clojure based library\ncalled [Overtone](https://overtone.github.io), or directly use\n[SuperCollider](https://supercollider.github.io/)'s own language instead.\n\nYou can find the source code for the synthdefs that currently ship with Sonic Pi\nin the folder\n\n```\netc/synthdefs/designs/\n```\n\nMost of these were originally designed in Overtone. **_Please note however_**,\nthat for _new_ synth designs _that are intended to be distributed with Sonic\nPi_,the preference is that they are created with SuperCollider, as it is much\neasier to set up, create and maintain synths this way. As such, the instructions\nfor using Overtone still work, but if you are considering submitting a new synth\ndesign for distribution with Sonic Pi, we strongly recommend that you create\nyour synth with SuperCollider directly.\n\n(Note also that detailed information on Overtone and SuperCollider syntax is\nbeyond the scope of this document. However, the information contained below\nshould be a reasonable guide to getting set up and running, as well as giving a\nbrief outline of both the source code and process required to create and use\nyour own synths).\n\n[Synth design constraints](#constraints)<br/>\n[Using **Overtone** to design and compile your synths](#overtone)<br/>\n[Using **SuperCollider** to design and compile your synths](#supercollider)\n\n<a name=\"constraints\"/>\n\n### Synth design constraints\n\nIf you want your synth to work with Sonic Pi's automatic stereo\nsound infrastructure *you need to ensure your synth outputs a stereo\nsignal* to an audio bus with an index specified by a synth arg named\n`out_bus`.\n\nAdditionally, your synth must self-terminate at some point - Sonic Pi\nwill *not* tidy up zombied synths.\n\n<a name=\"overtone\"/>\n\n### Using **Overtone** to design and compile your synths\n\n#### Editing the synthdefs\n\nYou'll need the following to be able to compile the synths yourself:\n\n* The latest version of [Overtone](https://github.com/overtone/overtone) (`git clone git@github.com:overtone/overtone.git`)\n* [Leiningen](https://leiningen.org/)\n* A text editor setup to work with Clojure\n\nAfter cloning the Overtone repo, cd into the folder and edit the `project.clj` file to add\nthe Sonic Pi synthdefs folder to the locations it looks in when requiring Clojure files.\n\n```\n  :native-path \"native\"\n  :min-lein-version \"2.0.0\"\n  ;; this is the line to add\n  :source-paths  [\"src\"  \"/Users/foo/sonic-pi/etc/synthdefs/designs\"]\n  ;; make sure the path points to your installation of Sonic Pi\n```\n\n##### Starting a REPL\n\n`cd` into the Overtone folder and run\n\n```\n$ lein repl\n```\n\nMake a note of the port number that nREPL starts on:\n\n```\nnREPL server started on port 49223 ...\n```\n\n##### Connecting the editor to the REPL and booting Overtone\n\nIf you're using `vim` and `vim-fireplace`:\n\n  * open a new terminal window\n  * `cd` back into the Sonic Pi folder\n  * Open `etc/synthdefs/designs/overtone/sonic-pi/src/sonic_pi/core.clj`\n  * type `:Connect` then hit enter\n  * when prompted, enter the nREPL port number from earlier\n  * Visual select the namespace definition and type `:` followed by `Eval` then enter\n\nThis should start booting Overtone which will take a little while. If there are no errors,\nyour vim is successfully hooked up to Overtone!\n\nIf you're using `emacs`:\n\n  * open a new terminal window\n  * open `emacs` and go to the `project.clj` for Overtone\n  * `M-x cider-jack-in` to connect to the running nREPL\n  * Navigate back into the Sonic Pi folder and open `etc/synthdefs/designs/overtone/sonic-pi/src/sonic_pi/core.clj`\n  * Evaluate the namespace as you normally would for Clojure in emacs\n\n#### The synth design file\n\nTaking the example of a basic synth, let's have a look at what the bits are doing:\n\n```\n(ns sonic-pi.synths.studio\n  (:use [overtone.live])\n  (:require [sonic-pi.synths.core :as core]))\n\n(do\n  (without-namespace-in-synthdef\n    (defsynth sonic-pi-recorder\n         [out-buf 0 in_bus 0]\n         (disk-out out-buf (in in_bus 2))))\n\n\n  (uncomment\n    (core/save-synthdef sonic-pi-recorder)))\n```\n\nThis is the definition used to define the record functionality in Sonic\nPi.\n\nThe `without-namespace-in-synthdef` from `sonic-pi.synths.core` needs to\nwrap the `defsynth` for the synth to follow the correct naming\nconvention.\n\nThe `core/save-synthdef` manages the workflow for saving the compiled\nsynthdef file into the correct folder and also the graphviz design which\nis used for documentation.\n\nBy evaluating the whole form this should cause all the files to be saved\nto the correct places.\n\n<a name=\"supercollider\"/>\n\n### Using **SuperCollider** to design and compile your synths\n\nYou will need to have [Supercollider](https://supercollider.github.io/)\ninstalled on your computer. Simply define your synth with SuperCollider's built\nin language, and use the `writeDefFile()` command to store the compiled synthdef\ninto a directory of your choice. You can then dynamically load your synthdefs\nwith the `load_synthdefs` fn.\n\n#### The synth design file\n\nBelow is a small example of a synth design:\n```\n    SynthDef(\\\\piTest,\n             {|freq = 200, amp = 1, out_bus = 0 |\n               Out.ar(out_bus,\n                      SinOsc.ar([freq,freq],0,0.5)* Line.kr(1, 0, 5, amp, doneAction: 2))}\n    ).writeDefFile(\\\"/Users/sam/Desktop/my-synths\\\");\n```\n\nThis is a simple synth that causes two Sine wave oscillators to sound on two\nseparate channels for a short time.\n\nLet's examine it at a high level:\n\n`SynthDef` is the SuperCollider function that creates a **Synth Def**inition.\n\nHere, we pass `SynthDef` two parameters: `\\\\piTest`, (the name we want to give\nto the synth, preceded by `\\\\`), and a function enclosed in curly brackets\n`{...}`, that describes the components of the synth that will generate the\nsound. (This needs to adhere to the Sonic Pi [synth design\nconstraints](#constraints) as mentioned above).\n\nNext, `writeDefFile()` is used by SuperCollider to create the compiled binary\nfile from the source definition, and we pass it the location of a folder where\nthe compiled file is then stored.\n\nTo actually trigger the creation of the compiled file, once we have entered the\nabove synthdef source code into a new file in SuperCollider, we can select the\nmenu item `Language` > `Evaluate File`. The 'Post Window' (SuperCollider's log\nwindow) will show `-> a SynthDef`, indicating that the code was successfully\nexecuted and the result was a new synthdef file, as desired. The new file will\nbe waiting in the location we set with `writeDefFile()`.\n\n## Making the synth available in Sonic Pi\n\nThere are two choices for making your synth available in Sonic Pi.\n\n### 'Loose' integration into Sonic Pi\n\nIntegrating a synth into Sonic Pi 'loosely' will allow you to use it but will\nnot make features such as autocompletion of synth opts available.\n\nTo enable a synth in this manner, firstly, make sure that the setting\n'Enable external synths and FX' is turned on in the Preferences pane under\nAudio > Synths and FX.\n\nNext, in your Sonic Pi code, call `load_synthdefs` with the path to the folder\ncontaining the synthdefs you've compiled and they'll be immediately available\nto Sonic Pi via the `synth` fn.\n\nLastly, for synths like these that are not tightly integrated into Sonic Pi,\nYou call them by name with a string value - eg: `synth 'piTest'`.\n\n\n### 'Tight' integration into Sonic Pi\n\nIntegrating your synth into Sonic Pi in a tighter manner will allow you to use\nit without having to enable external synths and FX or explicitly load the synth\npath into memory beforehand. It will also enable features such as synth opt\nautocompletion.\n\nHowever, there's a little more involved when doing it this way. You need to add\nthe appropriate metadata to `app/server/ruby/lib/sonicpi/synths/synthinfo.rb`\nand re-compile the app.\n\nLastly, as with built-in synths, you would call the synth by name with a symbol.\nEg: `synth :piTest`.\n\nWe look forward to hearing about your synth and FX creations - have fun!\n\n## Gated synths\n\nAs described above, standard Sonic Pi synths always self-terminate. That is, they have an ADSR envelope with a finite duration, so they finish, and then they are automatically cleaned up from memory. This is a design decicision which aims at preventing users from starting synths that never terminate and finally fill up processor and memory.\n\nGated synths are non-standard in Sonic Pi. They use an envelope that is kept open at sustain level at a defined *release node* until a special parameter, the *gate* is set to 0. Only then they start the release phase after which they finally terminate. At this point they are cleaned up, just like the standard synths. The problem with gated synths is that you have to have a handle on a synth, so that later you can ``control`` the gate to 0. You obtain this handle by assigning the result from ``play`` or ``synth`` to a variable, like so:\n\n```\na = play 60\n```\n\nOn the contrary, if you miss this assignment, there will be no way to control the synth and set the gate to 0, so it will run forever, and the only way to stop it is to stop the entire run.\n\nHowever, gated synths can be fun, especially with external MIDI keyboards. The expected behaviour for playing music over a keyboard would be as described above: When the key is hit, the envelope progresses  through the attack and decay phases, but it is kept at sustain level until the key is released.\n\nSonic Pi comes with gated synths, but they are not directly accessible as standard synths, nor are they listed in the built-in help system. If you want to use them, you can find the sources in these directories\n\n```\netc/synthdefs/designs/overtone/sonic-pi/src/sonic_pi/gated\netc/synthdefs/designs/supercollider/gated\n```\nand the compiled ones in\n\n```\netc/synthdefs/compiled/gated\n```\n\nUsing them requires loading them. A simple usage example would be:\n\n```\nload_synthdefs \"<<path-to-your-sonic-pi-repo-fork>>/etc/synthdefs/compiled/gated\"\nuse_synth 'sonic-pi-fm_gated'\nsth = play 43\nsleep 4\ncontrol sth, gate: 0\n```\n\nSome final notes:\n\n- It is perfectly possible to play the standards synths with a MIDI keyboard. Using gated synths is a bit more straightforward, e. g. when trying to get the synth to use the release phase as selected with the `release:` parameter. Look for \"MIDI keyboard\" on [in-thread](https://in-thread.sonic-pi.net/) for examples of how a MIDI keyboard handler can be made, with or without gated synths.\n\n- Some synths have been left out on purpose. The `:dull_bell` and `:pretty_bell` synths depend on the interrelations of the envelopes of their partials and no reasonable way of adding a gate parameter was found. Also, merely percussive synths like the SC808 group of synths were not enabled to be used with a gate.\n\n- On some synths, e. g. `:kalimba`, it is necessary to reduce the default `:release` in order for the gate to take effect."
        },
        {
          "name": "TESTING.md",
          "type": "blob",
          "size": 1.9892578125,
          "content": "# Testing and Profiling\n\nThis is a short document to help out anyone who wants to\ncontribute to development of Sonic Pi. To do that you should\ntry to use (and add to) the test suites.\n\n## Running the tests\n\nSonic Pi doesn't have a database, so the tests are quite a lot\nsimpler than your average web app.\n\n```\n$ cd app/server/ruby/test\n$ rake test\n```\n\nThis should run all the tests for you. \n\nIf you have an error like this:\n\n```\nWarning: you should require 'minitest/autorun' instead.\nWarning: or add 'gem \"minitest\"' before 'require \"minitest/autorun\"'\n```\n\nYou may find you need to run the following.\n\n```\n$ gem install test-unit\n```\n\n## Profiling\n\nSonic Pi is a truly multi-threaded system with communications via OSC\n(open sound control) being sent between the Qt GUI, the Ruby server and\nthe scsynth synthesis server. As a result, profiling has proved to be tricky.\n\n### Profiling the Ruby server\n\nThe following is a suggestion for how one might go about profiling the Ruby\nelements of Sonic Pi. This assumes you are using Ruby 2.1 or greater.\n\n1. `gem install ruby-prof`\n2. (optional) Clone [this repo](https://github.com/xavriley/tinyosc), run `build.sh` followed by `./tinyosc 4557`\n This is just to provide a receiver for the OSC message that are sent to the GUI\non port 4557. If you don't do this you'll see some error messages to do with connections.\n3. `gem install sonic-pi-cli` - for version 2.7 dev and above you may need to install from this repo: https://github.com/xavriley/sonic-pi-cli\n4. Run this command from the root dir of Sonic Pi\n\n```\n$ ruby-prof -p multi ./app/server/ruby/bin/sonic-pi-server.rb\n```\n\n5. Run this command (again from the root dir) to send some code to Sonic Pi\n\n```\n$ cat etc/examples/wizard/tilburg.rb | sonic_pi\n```\n\n6. After letting it run for a while, run `sonic_pi stop` in a fresh terminal\nand then Ctrl+C the sonic-pi-server.rb process. This should create several\nfiles in the root folder containing profiling information.\n\n### Profiling the Qt GUI\n\nTODO\n\n### Profiling `scsynth`\n\nTODO\n"
        },
        {
          "name": "TRANSLATION-WORKFLOW.md",
          "type": "blob",
          "size": 4.2724609375,
          "content": "# Making Sonic Pi translatable\n\n[![Weblate](https://hosted.weblate.org/widgets/sonic-pi/-/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)\n\n(This document is meant for contributors to the Sonic Pi codebase. If \nyou're a translator who wants to help bring Sonic Pi to your language \nplease read the [Translation Guide](TRANSLATION.md).)\n\n## Making your code translatable\n\nTranslations for the Qt GUI are located in the Qt Linguist `.ts` files \nin [`app/gui/qt/lang/sonic-pi_<LANG>.ts`](./app/gui/qt/lang/). Do not \nedit these, that's what we use Weblate for.\n\nThe translatable message strings are marked in your C++ code using the \n[`tr()`](https://wiki.qt.io/QtInternationalization#What_is_tr.28.29.3F) \nmacro.\n\nThere is an extensive [I18N \nTutorial](http://doc.qt.io/qt-5/internationalization.html) for Qt, but \nthe condensed version is: _When you mark a message string with `tr()`, \nit can be translated._\n\nAnd that's it, that's already all you need to know to have your code\nready for i18n in Sonic Pi.\n\n## Integrating Weblate\n\nThe rest of this document is mostly meant as a cheatsheet for @samaaron\nas the main developer in charge of the main repository.\n\n[Weblate](https://weblate.org) is an open-source web-based translation \neditor. Their development team runs a hosted version of the tool and \nthey have kindly offered us to use the service for free. (Thanks!)\n\nThe Weblate server keeps a copy of Sonic Pi's upstream git repository. \nTranslators commit to the cloned repository on the Weblate server.\n\nSonic Pi's upstream git repository [is tracked by \nWeblate](http://weblate.readthedocs.io/en/latest/admin/continuous.html), \nit will pull changes from and push updates to us.\n\n## Setup\n\nThis is a one-time setup for the main repository and needs to be done\nby the main developer.\n\n- [Sign up](https://hosted.weblate.org/accounts/register/),\n  preferably using your Github account authorization.\n\n- To enable Weblate pulling updates from the main repository, add the\n  [Weblate service](https://docs.weblate.org/en/latest/admin/continuous.html#github-setup)\n  in the repository settings and use the URL\n  `https://hosted.weblate.org` for the Weblate service settings.\n\n- To enable Weblate pushing translation updates back to the main\n  repository, add the [Weblate push user](https://github.com/weblate)\n  to the collaborators in the main branch's repository settings.\n\nAfter this, translations will be synced automatically between Github \nand Weblate, using the [lazy \ncommit](http://weblate.readthedocs.io/en/latest/admin/continuous.html#lazy-commits) \nstrategy.\n\n## Workflow\n\nThe Qt Linguist `.ts` files are created and updated from the source \ncode, using the Qt `lupdate` tool.\n\nThe Tutorial `.po` files are created and updated from the tutorial's\nMarkdown source texts, using the `i18n-tool.rb` script.\n\nWhenever message strings or parts of the tutorial are changed or a\nmajor feature introduces new texts, you need to update these files.\n\nDon't update too often, as we don't want to annoy the volunteer \ntranslators with many small work chunks. Remember to do an extra update \nsome time before a major release, to give everybody a chance to \ncomplete the translation.\n\nTo initiate a translation update:\n\n1. [Lock the Sonic Pi project](https://hosted.weblate.org/projects/sonic-pi/#repository)\n   on Weblate, then wait for Weblate to automatically commit and merge\n   all outstanding  translation updates and wait for it to push them from\n   Weblate to Github.\n\n2. Update your local repo to the current HEAD of the main branch from\n   Github, update the translation files, commit the update and push it\n   back to the main branch.\n\n   ```\n     git pull\n\n     lupdate -pro app/gui/qt/SonicPi.pro -no-obsolete\n     git commit app/gui/qt/lang/sonic-pi_*.ts\n\n     app/server/ruby/bin/i18n-tool.rb -x\n     # the following will complain about every fuzzy entry\n     app/server/ruby/bin/i18n-tool.rb -u\n     git commit etc/doc/lang/*.po\n     \n     git push\n   ```\n\n3. Wait for Weblate to sync these changes back from Github, then\n   [unlock the Sonic Pi project](https://hosted.weblate.org/projects/sonic-pi/#repository)\n   on Weblate.\n\nThis will update all translation files and remove obsolete entries.\n\nWeblate will then fetch the changes automatically, translators can\nupdate them and the finished translations will flow back into the\nmain repository.\n"
        },
        {
          "name": "TRANSLATION.md",
          "type": "blob",
          "size": 3.7197265625,
          "content": "# How to get involved with Sonic Pi's translation effort\n\n[![Weblate](https://hosted.weblate.org/widgets/sonic-pi/-/svg-badge.svg)](https://hosted.weblate.org/engage/sonic-pi/)\n\n__(This document is meant for translators who want to help bring Sonic Pi\nto their language. If you're contributing code to Sonic Pi, please read\nthe primer to the [Translation Workflow](TRANSLATION-WORKFLOW.md) to\nlearn about the inner workings of i18n in your code.)__\n\nSonic Pi is designed to be usable by everyone including school students\nfrom 10 years old. It's therefore important to us that it is usable\noutside the English-speaking world. We are crowd-sourcing the\ntranslation effort so if you want to help people in your community to be\nable to play with it in your language, please consider joining the\ntranslation effort.\n\nLuckily a number of fabulous contributors have already started to\ntranslate much of Sonic Pi to their language. However, we always\nappreciate help by those willing to proofread, spellcheck or update the\nexisting translations. Every contribution - big or small is hugely\nappreciated.\n\n*Thanks to everybody involved!*\n\n\n## Getting started\n\nAs Sonic Pi development moves fast, there are always updates to the GUI\n(Graphical User Interface) and the tutorial. To help translators keep\ntrack of these changes, we use\n*[Weblate](https://hosted.weblate.org/engage/sonic-pi/)*, an\nopen-source web-based translation editor.\n\nThe nice thing about Weblate is that you don't need to be a developer to\nhelp translate Sonic Pi.\n\n\n## What you can translate\n\n* The *Sonic Pi Qt GUI* is the application you use on your desktop\n  screen. It contains few message strings and translating it is easy.\n\n* The *Tutorial* is a long document. Translating it requires\n  significantly more effort, but it's very rewarding as it is a\n  step-by-step introduction for new users to Sonic Pi.\n\n  The tutorial is written in\n  [Github Markdown](https://guides.github.com/features/mastering-markdown/),\n  which contains a few special control character sequences.\n\n* (The *Reference* cannot be translated - yet. We're working on that.)\n\n\n## How to fix or contribute a translation\n\nSo if you want to...\n\n* add a missing translation\n* proofread an existing translation\n* correct a mistake in a translation\n* translate to a whole new language\n\n...all you need to do is visit [Sonic Pi on\nWeblate](https://hosted.weblate.org/engage/sonic-pi/), sign up and\nfollow the instructions there.\n\nWeblate gives you a number of helpful tools, e.g. it spots common\nmistakes and you can keep a glossary of recurring terms that you can\nshare with other translators.\n\nWe can't thank you enough for putting up with the inconvenience of\ntranslating Sonic Pi, but allow me to ask you for one more giant\nfavour: If you want to help keep the translation up-to-date in the\nfuture, please consider [subscribing to the Sonic Pi project on\nWeblate](https://hosted.weblate.org/accounts/profile/#subscriptions) so\nthat you will be informed of new or changed strings.\n\n\n## Translation style\n\nThe original English text was written in a fun, friendly, open and\ninformal style designed to be accessible to children and adults\nalike. We would invite you to attempt to adopt this style when working\non translations to another language. For example, try to use simple\nlanguage where possible - and where not, try and explain what the\ncomplicated/technical words mean.\n\nIf it helps, try to think of Sonic Pi as a friend - and adopt the language\na friend might use when explaining things to you.\n\n\n## How to fix the original English texts\n\nYou cannot change the original English strings with Weblate. If you\nspot a mistake in the English texts, please [file an\nissue](https://github.com/samaaron/sonic-pi/issues) or correct it with\na pull request here on github. Thanks!\n"
        },
        {
          "name": "TYPES-OF-CONTRIBUTIONS.md",
          "type": "blob",
          "size": 3.1552734375,
          "content": "# Types of contributions\n\nHello! Are you interested in contributing to Sonic Pi, but not sure where to start? there are many ways to do so, even besides writing code.\nHere's a few ways you can help:\n\n## Share your Sonic Pi experiences\n- Sharing your Sonic Pi experiences with people is a great way to raise awareness of Sonic Pi. Giving talks, performances, tutorials or workshops, sharing resources and teaching materials, or even just posting a simple message on social media about it (on Twitter we're `@Sonic_Pi`) are all ways you can spread the word. For all the different ways people can connect as a community around Sonic Pi, see [COMMUNITY.md](COMMUNITY.md)\n\n## Help with issues and pull requests on GitHub\n- Proof-reading pull requests. If a pull request contains plain text besides code, then spelling and grammar checks are always helpful. The default language is British English (en-GB).\n- Adding helpful comments to issues. [The list of issues on GitHub](https://github.com/sonic-pi-net/sonic-pi/issues) can often be quite large - this can become difficult for the core development team to manage, so comments that help to manage this are always welcome.\n  This could include things like replying to folks:\n  - Reminders that (politely) point to our [troubleshooting guide](https://github.com/sonic-pi-net/sonic-pi/wiki/Troubleshooting-Issues)\n  - Help with filling out the issue templates\n  - Pointers to existing issues that might already describe the same specific problem or request\n  \n  Or providing your own extra information to issues:\n  - More detail to describe the problem\n  - Potential workarounds or ideas for solutions\n\n## Raise a feature request\nIf you have an idea for a new feature or enhancement, search the [Issues page](https://github.com/sonic-pi-net/sonic-pi/issues) or [the Sonic Pi features project board](https://github.com/orgs/sonic-pi-net/projects/1) first (someone might have raised it already!).\nIf it's new after all, go ahead and [raise a feature request](https://github.com/sonic-pi-net/sonic-pi/issues/new/choose)!\n\nYou can also visit [the Sonic Pi community forum](https://in-thread.sonic-pi.net/) if you want to discuss your idea more informally.\n\n## Translate Sonic Pi to your language\nIt's a wonderful way to introduce school kids in your country to\nSonic Pi and educators will appreciate it when we make it easier for\ntheir class. The tutorial is fairly long, but the graphical user\ninterface is quickly translated and a good place to start.\nFor details, see [TRANSLATION.md](TRANSLATION.md)\n\n## Send us some changes for Sonic Pi in a Pull Request\nWe're always interested in receiving fixes, new features and improvements for Sonic Pi - even more so in areas that the core team has been unable to focus on!\n\nIf you don't have a specific bug-fix, new feature, or enhancement already in mind, you can always browse the\n[open issues](https://github.com/sonic-pi-net/sonic-pi/issues) or [the Sonic Pi features project board](https://github.com/orgs/sonic-pi-net/projects/1) on GitHub.\nThere's probably an issue you can help to fix, or feature request you can help build.\nFor guidelines to keep in mind while you're preparing your contribution, see [CONTRIBUTING.md](CONTRIBUTING.md)\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 4.6669921875,
          "content": "# Build worker image (VM template)\nimage:\n  - Visual Studio 2019\n  - macos\n  - Ubuntu\n\nconfiguration:\n  - Release\n  - Debug\n\nbranches:\n  only:\n  - main\n\nplatform:\n  - x64\n\nmatrix:\n  fast_finish: true\n\nfor:\n# Windows build\n-\n  matrix:\n    only:\n      - image: Visual Studio 2019\n\n  configuration:\n    - Release\n    - Debug\n\n  environment:\n    MSBUILD_FLAGS: /verbosity:minimal /maxcpucount\n    matrix:\n      - generator: \"Visual Studio 16 2019\"\n\n  init:\n    # scripts that are called at very beginning, before repo cloning\n    - date /T & time /T\n    - git config --global core.autocrlf input\n    - cmake --version\n  install:\n    - dir c:\\\n    - dir c:\\Qt\n    - cd %APPVEYOR_BUILD_FOLDER%\n    - dir\n    - cd app\\server\\native\n    - mklink /d ruby c:\\Ruby26-x64\n    - set PATH=c:\\Ruby26-x64\\bin;C:\\Program Files (x86)\\WiX Toolset v3.11\\bin;%PATH%\n    - gem install aubio win32-process\n    - gem install rugged --version 0.27.1\n    - set QT_INSTALL_LOCATION=C:\\Qt\\5.14\\msvc2017_64\n    - set Qt5_DIR=C:\\Qt\\5.14\\msvc2017_64\\lib\\cmake\\Qt5\n  build_script:\n    # generate build script\n    - cd %APPVEYOR_BUILD_FOLDER%\n    - cd app\\gui\\qt\n    - win-prebuild.bat\n    - win-config.bat\n    - cd build\n    - cmake --build . --target ALL_BUILD --config %configuration% -- /nologo /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n  after_build:\n    - cd %APPVEYOR_BUILD_FOLDER%\n    - cd install\\windows\n    - IF \"%configuration%\"==\"Release\" install.bat\n    #- IF \"%configuration%\"==\"Release\" appveyor PushArtifact wix\\sonic-pi.msi\n\n\n# macOS build\n-\n  matrix:\n    only:\n      - image: macos\n\n  configuration:\n    - Release\n    - Debug\n\n  init:\n    # scripts that are called at very beginning, before repo cloning\n    - date '+%Y-%m-%d %T %Z(UTC%z)'\n    - cmake --version\n    - # Cleanup homebrew cache; output details about Homebrew's config; and check brew & print any warnings (for debugging)\n    - brew cleanup\n    - brew config\n    - brew doctor || true\n  install:\n    - cd \"$APPVEYOR_BUILD_FOLDER\"\n    - ls -lA\n    - # Install erlang & aubio\n    - # (We install aubio using brew instead of building it from source so that the build can complete within the 1 hour time limit)\n    - brew install erlang aubio\n    - # Relink gettext to Homebrew folders to hopefully fix symbol errors (based from https://github.com/EOSIO/eos/issues/2174)\n    - brew link gettext --force\n    - export PATH=\"/usr/local/opt/gettext/bin:$PATH\" # Add gettext to the path\n    - # Install prerequisite ruby gems\n    - sudo gem install bundler\n  build_script:\n    # generate build script\n    - cd \"$APPVEYOR_BUILD_FOLDER\"\n    - cd app/gui/qt\n    - ./mac-prebuild.sh\n    - # (We don't build aubio from source in prebuild, but instead use the brew installed version so that the build can complete within the 1 hour time limit)\n    - ./mac-config.sh --config $CONFIGURATION\n    - cd build\n    - cmake --build .\n\n# Ubuntu Linux build\n-\n  matrix:\n    only:\n      - image: Ubuntu\n\n  configuration:\n    - Release\n    - Debug\n\n  init:\n    # scripts that are called at very beginning, before repo cloning\n    - date '+%Y-%m-%d %T %Z(UTC%z)'\n    - cmake --version\n  install:\n    - cd \"$APPVEYOR_BUILD_FOLDER\"\n    - ls -lA\n    - sudo apt-get update\n    - # Remove old versions of CMake if pre-installed\n    - sudo apt-get purge -y --auto-remove cmake\n    - # Add Kitware's apt repo (for newest CMake)\n    - sudo apt-get install -y apt-transport-https ca-certificates gnupg software-properties-common wget\n    - wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -\n    - sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'\n    - sudo apt-get update\n    - # Install prerequisite packages\n    - sudo apt-get install -y git build-essential cmake ruby ruby-dev erlang-base\n    - sudo apt-get install -y qt5-default libqt5svg5-dev qttools5-dev qttools5-dev-tools qtdeclarative5-dev libqt5webkit5-dev qtpositioning5-dev libqt5sensors5-dev libqt5opengl5-dev qtmultimedia5-dev\n    - sudo apt-get install -y libjack-jackd2-dev libasound2-dev libavahi-client-dev libicu-dev libreadline6-dev libfftw3-dev libxt-dev libudev-dev libboost-dev libffi-dev\n    - # Remove Erlang 20 and install Erlang 22 (21 or above is required)\n    - sudo apt-get purge -y --auto-remove erlang\n    - cd ~\n    - git clone https://github.com/erlang/otp.git\n    - cd otp\n    - git checkout OTP-22.3\n    - ./otp_build autoconf\n    - ./configure\n    - make\n    - sudo make install\n    - # Install prerequisite ruby gems\n    - sudo gem install bundler\n  build_script:\n    # generate build script\n    - cd \"$APPVEYOR_BUILD_FOLDER\"\n    - cd app/gui/qt\n    - ./linux-prebuild.sh --build-aubio\n    - ./linux-config.sh --config $CONFIGURATION\n    - cd build\n    - cmake --build .\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "install",
          "type": "tree",
          "content": null
        },
        {
          "name": "prebuilt",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}