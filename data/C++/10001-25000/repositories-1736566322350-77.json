{
  "metadata": {
    "timestamp": 1736566322350,
    "page": 77,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Tencent/rapidjson",
      "stars": 14477,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.439453125,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n\n# Explicitly declare text files you want to always be normalized and converted\n# to native line endings on checkout.\n*.cpp text\n*.h text\n*.txt text\n*.md text\n*.cmake text\n*.svg text\n*.dot text\n*.yml text\n*.in text\n*.sh text\n*.autopkg text\nDockerfile text\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n*.json binary"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.39453125,
          "content": "/bin/*\n!/bin/data\n!/bin/encodings\n!/bin/jsonchecker\n!/bin/types\n!/bin/unittestschema\n/build\n/doc/html\n/doc/doxygen_*.db\n*.a\n\n# Temporary files created during CMake build\nCMakeCache.txt\nCMakeFiles\ncmake_install.cmake\nCTestTestfile.cmake\nMakefile\nRapidJSON*.cmake\nRapidJSON.pc\nTesting\n/googletest\ninstall_manifest.txt\nDoxyfile\nDoxyfile.zh-cn\nDartConfiguration.tcl\n*.nupkg\n\n# Files created by OS\n*.DS_Store\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1015625,
          "content": "[submodule \"thirdparty/gtest\"]\n\tpath = thirdparty/gtest\n\turl = https://github.com/google/googletest.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 6.42578125,
          "content": "sudo: required\ndist: xenial\n\nlanguage: cpp\ncache:\n  - ccache\n\naddons:\n  apt:\n    sources:\n      - ubuntu-toolchain-r-test\n    packages:\n      - cmake\n      - valgrind\n      - clang-8\nenv:\n  global:\n    - USE_CCACHE=1\n    - CCACHE_SLOPPINESS=pch_defines,time_macros\n    - CCACHE_COMPRESS=1\n    - CCACHE_MAXSIZE=100M\n    - ARCH_FLAGS_x86='-m32'        # #266: don't use SSE on 32-bit\n    - ARCH_FLAGS_x86_64='-msse4.2' #       use SSE4.2 on 64-bit\n    - ARCH_FLAGS_aarch64='-march=armv8-a'\n    - GITHUB_REPO='Tencent/rapidjson'\n    - secure: \"HrsaCb+N66EG1HR+LWH1u51SjaJyRwJEDzqJGYMB7LJ/bfqb9mWKF1fLvZGk46W5t7TVaXRDD5KHFx9DPWvKn4gRUVkwTHEy262ah5ORh8M6n/6VVVajeV/AYt2C0sswdkDBDO4Xq+xy5gdw3G8s1A4Inbm73pUh+6vx+7ltBbk=\"\n\nmatrix:\n  include:\n    # gcc\n    - env: CONF=release ARCH=x86     CXX11=ON  CXX17=OFF CXX20=OFF MEMBERSMAP=OFF\n      compiler: gcc\n      arch: amd64\n    - env: CONF=release ARCH=x86_64  CXX11=ON  CXX17=OFF CXX20=OFF MEMBERSMAP=OFF\n      compiler: gcc\n      arch: amd64\n    - env: CONF=release ARCH=x86_64  CXX11=ON  CXX17=OFF CXX20=OFF MEMBERSMAP=ON\n      compiler: gcc\n      arch: amd64\n    - env: CONF=debug   ARCH=x86     CXX11=OFF CXX17=OFF CXX20=OFF MEMBERSMAP=OFF\n      compiler: gcc\n      arch: amd64\n    - env: CONF=debug   ARCH=x86_64  CXX11=OFF CXX17=OFF CXX20=OFF MEMBERSMAP=OFF\n      compiler: gcc\n      arch: amd64\n    - env: CONF=debug   ARCH=x86     CXX11=OFF CXX17=ON  CXX20=OFF MEMBERSMAP=ON CXX_FLAGS='-D_GLIBCXX_DEBUG'\n      compiler: gcc\n      arch: amd64\n    - env: CONF=debug   ARCH=x86_64  CXX11=OFF CXX17=ON  CXX20=OFF MEMBERSMAP=ON CXX_FLAGS='-D_GLIBCXX_DEBUG'\n      compiler: gcc\n      arch: amd64\n    - env: CONF=release ARCH=aarch64 CXX11=ON  CXX17=OFF CXX20=OFF MEMBERSMAP=OFF\n      compiler: gcc\n      arch: arm64\n    - env: CONF=release ARCH=aarch64 CXX11=OFF CXX17=OFF CXX20=OFF MEMBERSMAP=OFF\n      compiler: gcc\n      arch: arm64\n    - env: CONF=release ARCH=aarch64 CXX11=OFF CXX17=ON  CXX20=OFF MEMBERSMAP=ON\n      compiler: gcc\n      arch: arm64\n    # clang\n    - env: CONF=release ARCH=x86     CXX11=ON  CXX17=OFF CXX20=OFF MEMBERSMAP=ON  CCACHE_CPP2=yes\n      compiler: clang\n      arch: amd64\n    - env: CONF=release ARCH=x86_64  CXX11=ON  CXX17=OFF CXX20=OFF MEMBERSMAP=ON  CCACHE_CPP2=yes\n      compiler: clang\n      arch: amd64\n    - env: CONF=release ARCH=x86_64  CXX11=ON  CXX17=OFF CXX20=OFF MEMBERSMAP=OFF CCACHE_CPP2=yes\n      compiler: clang\n      arch: amd64\n    - env: CONF=debug   ARCH=x86     CXX11=OFF CXX17=OFF CXX20=OFF MEMBERSMAP=ON  CCACHE_CPP2=yes\n      compiler: clang\n      arch: amd64\n    - env: CONF=debug   ARCH=x86_64  CXX11=OFF CXX17=OFF CXX20=OFF MEMBERSMAP=ON  CCACHE_CPP2=yes\n      compiler: clang\n      arch: amd64\n    - env: CONF=debug   ARCH=x86     CXX11=OFF CXX17=ON  CXX20=OFF MEMBERSMAP=OFF CCACHE_CPP2=yes\n      compiler: clang\n      arch: amd64\n    - env: CONF=debug   ARCH=x86_64  CXX11=OFF CXX17=ON  CXX20=OFF MEMBERSMAP=OFF CCACHE_CPP2=yes\n      compiler: clang\n      arch: amd64\n    - env: CONF=debug   ARCH=aarch64 CXX11=ON  CXX17=OFF CXX20=OFF MEMBERSMAP=ON  CCACHE_CPP2=yes\n      compiler: clang\n      arch: arm64\n    - env: CONF=debug   ARCH=aarch64 CXX11=OFF CXX17=OFF CXX20=OFF MEMBERSMAP=ON  CCACHE_CPP2=yes\n      compiler: clang\n      arch: arm64\n    - env: CONF=debug   ARCH=aarch64 CXX11=OFF CXX17=ON  CXX20=OFF MEMBERSMAP=OFF CCACHE_CPP2=yes\n      compiler: clang\n      arch: arm64\n    # coverage report\n    - env: CONF=debug   ARCH=x86     GCOV_FLAGS='--coverage' CXX_FLAGS='-O0' CXX11=OFF CXX17=OFF CXX20=OFF\n      compiler: gcc\n      arch: amd64\n      cache:\n        - ccache\n        - pip\n      after_success:\n        - pip install --user cpp-coveralls\n        - coveralls -r .. --gcov-options '\\-lp' -e thirdparty -e example -e test -e build/CMakeFiles -e include/rapidjson/msinttypes -e include/rapidjson/internal/meta.h -e include/rapidjson/error/en.h\n    - env: CONF=debug   ARCH=x86_64  GCOV_FLAGS='--coverage' CXX_FLAGS='-O0' CXX11=ON  CXX17=OFF CXX20=OFF MEMBERSMAP=ON\n      compiler: gcc\n      arch: amd64\n      cache:\n        - ccache\n        - pip\n      after_success:\n        - pip install --user cpp-coveralls\n        - coveralls -r .. --gcov-options '\\-lp' -e thirdparty -e example -e test -e build/CMakeFiles -e include/rapidjson/msinttypes -e include/rapidjson/internal/meta.h -e include/rapidjson/error/en.h\n    - env: CONF=debug   ARCH=aarch64 GCOV_FLAGS='--coverage' CXX_FLAGS='-O0' CXX11=OFF CXX17=ON  CXX20=OFF\n      compiler: gcc\n      arch: arm64\n      cache:\n        - ccache\n        - pip\n      after_success:\n        - pip install --user cpp-coveralls\n        - coveralls -r .. --gcov-options '\\-lp' -e thirdparty -e example -e test -e build/CMakeFiles -e include/rapidjson/msinttypes -e include/rapidjson/internal/meta.h -e include/rapidjson/error/en.h\n    - script: # Documentation task\n      - cd build\n      - cmake .. -DRAPIDJSON_HAS_STDSTRING=ON -DCMAKE_VERBOSE_MAKEFILE=ON\n      - make travis_doc\n      cache: false\n      addons:\n        apt:\n          packages:\n            - doxygen\n\nbefore_install:\n  - if [ \"x86_64\" = \"$(arch)\" ]; then sudo apt-get install -y g++-multilib libc6-dbg:i386 --allow-unauthenticated; fi\n\nbefore_script:\n    # travis provides clang-7 for amd64 and clang-3.8 for arm64\n    # here use clang-8 to all architectures as clang-7 is not available for arm64\n  - if [ -f /usr/bin/clang++-8 ]; then\n      sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-8 1000;\n      sudo update-alternatives --config clang++;\n      export PATH=/usr/bin:$PATH;\n    fi\n  - if [ \"$CXX\" = \"clang++\" ]; then export CCACHE_CPP2=yes; fi\n  - ccache -s\n    #   hack to avoid Valgrind bug (https://bugs.kde.org/show_bug.cgi?id=326469),\n    #   exposed by merging PR#163 (using -march=native)\n    #   TODO: Since this bug is already fixed. Remove this when valgrind can be upgraded.\n  - sed -i \"s/-march=native//\" CMakeLists.txt\n  - mkdir build\n\nscript:\n  - if [ \"$CXX\" = \"clang++\" ]; then export CXXFLAGS=\"-stdlib=libc++ ${CXXFLAGS}\"; fi\n  - >\n      eval \"ARCH_FLAGS=\\${ARCH_FLAGS_${ARCH}}\" ;\n      (cd build && cmake\n      -DRAPIDJSON_HAS_STDSTRING=ON\n      -DRAPIDJSON_USE_MEMBERSMAP=$MEMBERSMAP\n      -DRAPIDJSON_BUILD_CXX11=$CXX11\n      -DRAPIDJSON_BUILD_CXX17=$CXX17\n      -DRAPIDJSON_BUILD_CXX20=$CXX20\n      -DCMAKE_VERBOSE_MAKEFILE=ON\n      -DCMAKE_BUILD_TYPE=$CONF\n      -DCMAKE_CXX_FLAGS=\"$ARCH_FLAGS $GCOV_FLAGS $CXX_FLAGS\"\n      -DCMAKE_EXE_LINKER_FLAGS=$GCOV_FLAGS\n      ..)\n  - cd build\n  - make tests -j 2\n  - make examples -j 2\n  - ctest -j 2 -V `[ \"$CONF\" = \"release\" ] || echo \"-E perftest\"`\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.658203125,
          "content": "# Change Log\nAll notable changes to this project will be documented in this file.\nThis project adheres to [Semantic Versioning](http://semver.org/).\n\n## [Unreleased]\n\n## 1.1.0 - 2016-08-25\n\n### Added\n* Add GenericDocument ctor overload to specify JSON type (#369)\n* Add FAQ (#372, #373, #374, #376)\n* Add forward declaration header `fwd.h`\n* Add @PlatformIO Library Registry manifest file (#400)\n* Implement assignment operator for BigInteger (#404)\n* Add comments support (#443)\n* Adding coapp definition (#460)\n* documenttest.cpp: EXPECT_THROW when checking empty allocator (470)\n* GenericDocument: add implicit conversion to ParseResult (#480)\n* Use <wchar.h> with C++ linkage on Windows ARM (#485)\n* Detect little endian for Microsoft ARM targets \n* Check Nan/Inf when writing a double (#510)\n* Add JSON Schema Implementation (#522)\n* Add iostream wrapper (#530)\n* Add Jsonx example for converting JSON into JSONx (a XML format) (#531)\n* Add optional unresolvedTokenIndex parameter to Pointer::Get() (#532)\n* Add encoding validation option for Writer/PrettyWriter (#534)\n* Add Writer::SetMaxDecimalPlaces() (#536)\n* Support {0, } and {0, m} in Regex (#539)\n* Add Value::Get/SetFloat(), Value::IsLossLessFloat/Double() (#540)\n* Add stream position check to reader unit tests (#541)\n* Add Templated accessors and range-based for (#542)\n* Add (Pretty)Writer::RawValue() (#543)\n* Add Document::Parse(std::string), Document::Parse(const char*, size_t length) and related APIs. (#553)\n* Add move constructor for GenericSchemaDocument (#554)\n* Add VS2010 and VS2015 to AppVeyor CI (#555)\n* Add parse-by-parts example (#556, #562)\n* Support parse number as string (#564, #589)\n* Add kFormatSingleLineArray for PrettyWriter (#577)\n* Added optional support for trailing commas (#584)\n* Added filterkey and filterkeydom examples (#615)\n* Added npm docs (#639)\n* Allow options for writing and parsing NaN/Infinity (#641)\n* Add std::string overload to PrettyWriter::Key() when RAPIDJSON_HAS_STDSTRING is defined (#698)\n\n### Fixed\n* Fix gcc/clang/vc warnings (#350, #394, #397, #444, #447, #473, #515, #582, #589, #595, #667)\n* Fix documentation (#482, #511, #550, #557, #614, #635, #660)\n* Fix emscripten alignment issue (#535)\n* Fix missing allocator to uses of AddMember in document (#365)\n* CMake will no longer complain that the minimum CMake version is not specified (#501)\n* Make it usable with old VC8 (VS2005) (#383)\n* Prohibit C++11 move from Document to Value (#391)\n* Try to fix incorrect 64-bit alignment (#419)\n* Check return of fwrite to avoid warn_unused_result build failures (#421)\n* Fix UB in GenericDocument::ParseStream (#426)\n* Keep Document value unchanged on parse error (#439)\n* Add missing return statement (#450)\n* Fix Document::Parse(const Ch*) for transcoding (#478)\n* encodings.h: fix typo in preprocessor condition (#495)\n* Custom Microsoft headers are necessary only for Visual Studio 2012 and lower (#559)\n* Fix memory leak for invalid regex (26e69ffde95ba4773ab06db6457b78f308716f4b)\n* Fix a bug in schema minimum/maximum keywords for 64-bit integer (e7149d665941068ccf8c565e77495521331cf390)\n* Fix a crash bug in regex (#605)\n* Fix schema \"required\" keyword cannot handle duplicated keys (#609)\n* Fix cmake CMP0054 warning (#612)\n* Added missing include guards in istreamwrapper.h and ostreamwrapper.h (#634)\n* Fix undefined behaviour (#646)\n* Fix buffer overrun using PutN (#673)\n* Fix rapidjson::value::Get<std::string>() may returns wrong data (#681)\n* Add Flush() for all value types (#689)\n* Handle malloc() fail in PoolAllocator (#691)\n* Fix builds on x32 platform. #703\n\n### Changed\n* Clarify problematic JSON license (#392)\n* Move Travis to container based infrastructure (#504, #558)\n* Make whitespace array more compact (#513)\n* Optimize Writer::WriteString() with SIMD (#544)\n* x86-64 48-bit pointer optimization for GenericValue (#546)\n* Define RAPIDJSON_HAS_CXX11_RVALUE_REFS directly in clang (#617)\n* Make GenericSchemaDocument constructor explicit (#674)\n* Optimize FindMember when use std::string (#690)\n\n## [1.0.2] - 2015-05-14\n\n### Added\n* Add Value::XXXMember(...) overloads for std::string (#335)\n\n### Fixed\n* Include rapidjson.h for all internal/error headers.\n* Parsing some numbers incorrectly in full-precision mode (`kFullPrecisionParseFlag`) (#342)\n* Fix some numbers parsed incorrectly (#336)\n* Fix alignment of 64bit platforms (#328)\n* Fix MemoryPoolAllocator::Clear() to clear user-buffer (0691502573f1afd3341073dd24b12c3db20fbde4)\n\n### Changed\n* CMakeLists for include as a thirdparty in projects (#334, #337)\n* Change Document::ParseStream() to use stack allocator for Reader (ffbe38614732af8e0b3abdc8b50071f386a4a685) \n\n## [1.0.1] - 2015-04-25\n\n### Added\n* Changelog following [Keep a CHANGELOG](https://github.com/olivierlacan/keep-a-changelog) suggestions.\n\n### Fixed\n* Parsing of some numbers (e.g. \"1e-00011111111111\") causing assertion (#314).\n* Visual C++ 32-bit compilation error in `diyfp.h` (#317).\n\n## [1.0.0] - 2015-04-22\n\n### Added\n* 100% [Coverall](https://coveralls.io/r/Tencent/rapidjson?branch=master) coverage.\n* Version macros (#311)\n\n### Fixed\n* A bug in trimming long number sequence (4824f12efbf01af72b8cb6fc96fae7b097b73015).\n* Double quote in unicode escape (#288).\n* Negative zero roundtrip (double only) (#289).\n* Standardize behavior of `memcpy()` and `malloc()` (0c5c1538dcfc7f160e5a4aa208ddf092c787be5a, #305, 0e8bbe5e3ef375e7f052f556878be0bd79e9062d).\n\n### Removed\n* Remove an invalid `Document::ParseInsitu()` API (e7f1c6dd08b522cfcf9aed58a333bd9a0c0ccbeb).\n\n## 1.0-beta - 2015-04-8\n\n### Added\n* RFC 7159 (#101)\n* Optional Iterative Parser (#76)\n* Deep-copy values (#20)\n* Error code and message (#27)\n* ASCII Encoding (#70)\n* `kParseStopWhenDoneFlag` (#83)\n* `kParseFullPrecisionFlag` (881c91d696f06b7f302af6d04ec14dd08db66ceb)\n* Add `Key()` to handler concept (#134)\n* C++11 compatibility and support (#128)\n* Optimized number-to-string and vice versa conversions (#137, #80)\n* Short-String Optimization (#131)\n* Local stream optimization by traits (#32)\n* Travis & Appveyor Continuous Integration, with Valgrind verification (#24, #242)\n* Redo all documentation (English, Simplified Chinese)\n\n### Changed\n* Copyright ownership transferred to THL A29 Limited (a Tencent company).\n* Migrating from Premake to CMAKE (#192)\n* Resolve all warning reports\n\n### Removed\n* Remove other JSON libraries for performance comparison (#180)\n\n## 0.11 - 2012-11-16\n\n## 0.1 - 2011-11-18\n\n[Unreleased]: https://github.com/Tencent/rapidjson/compare/v1.1.0...HEAD\n[1.1.0]: https://github.com/Tencent/rapidjson/compare/v1.0.2...v1.1.0\n[1.0.2]: https://github.com/Tencent/rapidjson/compare/v1.0.1...v1.0.2\n[1.0.1]: https://github.com/Tencent/rapidjson/compare/v1.0.0...v1.0.1\n[1.0.0]: https://github.com/Tencent/rapidjson/compare/v1.0-beta...v1.0.0\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.796875,
          "content": "CMAKE_MINIMUM_REQUIRED(VERSION 3.5)\n\nSET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules)\n\nset(LIB_MAJOR_VERSION \"1\")\nset(LIB_MINOR_VERSION \"1\")\nset(LIB_PATCH_VERSION \"0\")\nset(LIB_VERSION_STRING \"${LIB_MAJOR_VERSION}.${LIB_MINOR_VERSION}.${LIB_PATCH_VERSION}\")\n\nPROJECT(RapidJSON VERSION \"${LIB_VERSION_STRING}\" LANGUAGES CXX)\n\n# compile in release with debug info mode by default\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"RelWithDebInfo\" CACHE STRING \"Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel.\" FORCE)\nendif()\n\n# Build all binaries in a separate directory\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\noption(RAPIDJSON_BUILD_DOC \"Build rapidjson documentation.\" ON)\noption(RAPIDJSON_BUILD_EXAMPLES \"Build rapidjson examples.\" ON)\noption(RAPIDJSON_BUILD_TESTS \"Build rapidjson perftests and unittests.\" ON)\noption(RAPIDJSON_BUILD_THIRDPARTY_GTEST\n    \"Use gtest installation in `thirdparty/gtest` by default if available\" OFF)\n\noption(RAPIDJSON_BUILD_CXX11 \"Build rapidjson with C++11\" ON)\noption(RAPIDJSON_BUILD_CXX17 \"Build rapidjson with C++17\" OFF)\noption(RAPIDJSON_BUILD_CXX20 \"Build rapidjson with C++20\" OFF)\nif(RAPIDJSON_BUILD_CXX11)\n    set(CMAKE_CXX_STANDARD 11)\n    set(CMAKE_CXX_STANDARD_REQUIRED TRUE)\nendif()\n\noption(RAPIDJSON_BUILD_ASAN \"Build rapidjson with address sanitizer (gcc/clang)\" OFF)\noption(RAPIDJSON_BUILD_UBSAN \"Build rapidjson with undefined behavior sanitizer (gcc/clang)\" OFF)\n\noption(RAPIDJSON_ENABLE_INSTRUMENTATION_OPT \"Build rapidjson with -march or -mcpu options\" ON)\n\noption(RAPIDJSON_HAS_STDSTRING \"\" OFF)\nif(RAPIDJSON_HAS_STDSTRING)\n    add_definitions(-DRAPIDJSON_HAS_STDSTRING)\nendif()\n\noption(RAPIDJSON_USE_MEMBERSMAP \"\" OFF)\nif(RAPIDJSON_USE_MEMBERSMAP)\n    add_definitions(-DRAPIDJSON_USE_MEMBERSMAP=1)\nendif()\n\nfind_program(CCACHE_FOUND ccache)\nif(CCACHE_FOUND)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\n    if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Qunused-arguments -fcolor-diagnostics\")\n    endif()\nendif(CCACHE_FOUND)\n\nfind_program(VALGRIND_FOUND valgrind)\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    if(RAPIDJSON_ENABLE_INSTRUMENTATION_OPT AND NOT CMAKE_CROSSCOMPILING)\n        if(CMAKE_SYSTEM_PROCESSOR STREQUAL \"powerpc\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"ppc\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"ppc64\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"ppc64le\")\n          set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mcpu=native\")\n        else()\n          #FIXME: x86 is -march=native, but doesn't mean every arch is this option. To keep original project's compatibility, I leave this except POWER.\n          set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=native\")\n        endif()\n    endif()\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra -Werror\")\n    set(EXTRA_CXX_FLAGS -Weffc++ -Wswitch-default -Wfloat-equal -Wconversion -Wsign-conversion)\n    if (RAPIDJSON_BUILD_CXX11 AND CMAKE_VERSION VERSION_LESS 3.1)\n        if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"4.7.0\")\n            set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++0x\")\n        else()\n            set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n        endif()\n    elseif (RAPIDJSON_BUILD_CXX17 AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"5.0\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++17\")\n    elseif (RAPIDJSON_BUILD_CXX20 AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"8.0\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++20\")\n    endif()\n    if (RAPIDJSON_BUILD_ASAN)\n        if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"4.8.0\")\n            message(FATAL_ERROR \"GCC < 4.8 doesn't support the address sanitizer\")\n        else()\n            set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\n        endif()\n    endif()\n    if (RAPIDJSON_BUILD_UBSAN)\n        if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"4.9.0\")\n            message(FATAL_ERROR \"GCC < 4.9 doesn't support the undefined behavior sanitizer\")\n        else()\n            set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=undefined\")\n        endif()\n    endif()\nelseif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    if(NOT CMAKE_CROSSCOMPILING)\n      if(CMAKE_SYSTEM_PROCESSOR STREQUAL \"powerpc\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"ppc\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"ppc64\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"ppc64le\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mcpu=native\")\n      else()\n        #FIXME: x86 is -march=native, but doesn't mean every arch is this option. To keep original project's compatibility, I leave this except POWER.\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -march=native\")\n      endif()\n    endif()\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra -Werror -Wno-missing-field-initializers\")\n    set(EXTRA_CXX_FLAGS -Weffc++ -Wswitch-default -Wfloat-equal -Wconversion -Wimplicit-fallthrough)\n    if (RAPIDJSON_BUILD_CXX11 AND CMAKE_VERSION VERSION_LESS 3.1)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n    elseif (RAPIDJSON_BUILD_CXX17 AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"4.0\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++17\")\n    elseif (RAPIDJSON_BUILD_CXX20 AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"10.0\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++20\")\n    endif()\n    if (RAPIDJSON_BUILD_ASAN)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\n    endif()\n    if (RAPIDJSON_BUILD_UBSAN)\n        if (CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\")\n            set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=undefined-trap -fsanitize-undefined-trap-on-error\")\n        else()\n            set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=undefined\")\n        endif()\n    endif()\nelseif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)\n    add_definitions(-DNOMINMAX)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /EHsc\")\n    # CMake >= 3.10 should handle the above CMAKE_CXX_STANDARD fine, otherwise use /std:c++XX with MSVC >= 19.10\n    if (RAPIDJSON_BUILD_CXX11 AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"19.10\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /std:c++11\")\n    elseif (RAPIDJSON_BUILD_CXX17 AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"19.14\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /std:c++17\")\n    elseif (RAPIDJSON_BUILD_CXX20 AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"19.29\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /std:c++20\")\n    endif()\n    # Always compile with /WX\n    if(CMAKE_CXX_FLAGS MATCHES \"/WX-\")\n        string(REGEX REPLACE \"/WX-\" \"/WX\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    else()\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /WX\")\n    endif()\nelseif (CMAKE_CXX_COMPILER_ID MATCHES \"XL\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -qarch=auto\")\nendif()\n\n#add extra search paths for libraries and includes\nSET(INCLUDE_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}/include\" CACHE PATH \"The directory the headers are installed in\")\nSET(LIB_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}/lib\" CACHE STRING \"Directory where lib will install\")\nSET(DOC_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}/share/doc/${PROJECT_NAME}\" CACHE PATH \"Path to the documentation\")\n\nIF(UNIX OR CYGWIN)\n    SET(_CMAKE_INSTALL_DIR \"${LIB_INSTALL_DIR}/cmake/${PROJECT_NAME}\")\nELSEIF(WIN32)\n    SET(_CMAKE_INSTALL_DIR \"${CMAKE_INSTALL_PREFIX}/cmake\")\nENDIF()\nSET(CMAKE_INSTALL_DIR \"${_CMAKE_INSTALL_DIR}\" CACHE PATH \"The directory cmake files are installed in\")\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)\n\nif(RAPIDJSON_BUILD_DOC)\n    add_subdirectory(doc)\nendif()\n\nadd_custom_target(travis_doc)\nadd_custom_command(TARGET travis_doc\n    COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/travis-doxygen.sh)\n\nif(RAPIDJSON_BUILD_EXAMPLES)\n    add_subdirectory(example)\nendif()\n\nif(RAPIDJSON_BUILD_TESTS)\n    if(MSVC11)\n        # required for VS2012 due to missing support for variadic templates\n        add_definitions(-D_VARIADIC_MAX=10)\n    endif(MSVC11)\n    add_subdirectory(test)\n    include(CTest)\nendif()\n\n# pkg-config\nIF (UNIX OR CYGWIN)\n  CONFIGURE_FILE (${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}.pc.in\n                  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc\n                  @ONLY)\n  INSTALL (FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc\n      DESTINATION \"${LIB_INSTALL_DIR}/pkgconfig\"\n      COMPONENT pkgconfig)\nENDIF()\n\ninstall(FILES readme.md\n        DESTINATION \"${DOC_INSTALL_DIR}\"\n        COMPONENT doc)\n\n# Add an interface target to export it\nadd_library(RapidJSON INTERFACE)\n\ntarget_include_directories(RapidJSON INTERFACE $<INSTALL_INTERFACE:include/rapidjson>)\n\ninstall(DIRECTORY include/rapidjson\n    DESTINATION \"${INCLUDE_INSTALL_DIR}\"\n    COMPONENT dev)\n\ninstall(DIRECTORY example/\n    DESTINATION \"${DOC_INSTALL_DIR}/examples\"\n    COMPONENT examples\n    # Following patterns are for excluding the intermediate/object files\n    # from an install of in-source CMake build.\n    PATTERN \"CMakeFiles\" EXCLUDE\n    PATTERN \"Makefile\" EXCLUDE\n    PATTERN \"cmake_install.cmake\" EXCLUDE)\n\n# Provide config and version files to be used by other applications\n# ===============================\n\n################################################################################\n# Export package for use from the build tree\nEXPORT( PACKAGE ${PROJECT_NAME} )\n\n# Create the RapidJSONConfig.cmake file for other cmake projects.\n# ... for the build tree\nSET( CONFIG_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})\nSET( CONFIG_DIR ${CMAKE_CURRENT_BINARY_DIR})\nSET( ${PROJECT_NAME}_INCLUDE_DIR \"\\${${PROJECT_NAME}_SOURCE_DIR}/include\" )\n\nINCLUDE(CMakePackageConfigHelpers)\nCONFIGURE_FILE( ${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in\n    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake @ONLY )\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}ConfigVersion.cmake.in\n    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake @ONLY)\n\n# ... for the install tree\nSET( CMAKECONFIG_INSTALL_DIR ${LIB_INSTALL_DIR}/cmake/${PROJECT_NAME} )\nFILE( RELATIVE_PATH REL_INCLUDE_DIR\n    \"${CMAKECONFIG_INSTALL_DIR}\"\n    \"${CMAKE_INSTALL_PREFIX}/include\" )\n\nSET( ${PROJECT_NAME}_INCLUDE_DIR \"\\${${PROJECT_NAME}_CMAKE_DIR}/${REL_INCLUDE_DIR}\" )\nSET( CONFIG_SOURCE_DIR )\nSET( CONFIG_DIR )\nCONFIGURE_FILE( ${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in\n    ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${PROJECT_NAME}Config.cmake @ONLY )\n\nINSTALL(FILES \"${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/${PROJECT_NAME}Config.cmake\"\n        DESTINATION ${CMAKECONFIG_INSTALL_DIR} )\n\n# Install files\nIF(CMAKE_INSTALL_DIR)\n    INSTALL(FILES\n        ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\n        ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n        DESTINATION \"${CMAKE_INSTALL_DIR}\"\n        COMPONENT dev)\n\n    INSTALL(TARGETS RapidJSON EXPORT RapidJSON-targets)\n    INSTALL(EXPORT RapidJSON-targets DESTINATION ${CMAKE_INSTALL_DIR})\nENDIF()\n"
        },
        {
          "name": "CMakeModules",
          "type": "tree",
          "content": null
        },
        {
          "name": "RapidJSON.pc.in",
          "type": "blob",
          "size": 0.2236328125,
          "content": "includedir=@INCLUDE_INSTALL_DIR@\n\nName: @PROJECT_NAME@\nDescription: A fast JSON parser/generator for C++ with both SAX/DOM style API\nVersion: @LIB_VERSION_STRING@\nURL: https://github.com/Tencent/rapidjson\nCflags: -I${includedir}\n"
        },
        {
          "name": "RapidJSONConfig.cmake.in",
          "type": "blob",
          "size": 0.6708984375,
          "content": "@PACKAGE_INIT@\n\ninclude (\"${CMAKE_CURRENT_LIST_DIR}/RapidJSON-targets.cmake\")\n\n################################################################################\n# RapidJSON source dir\nset( RapidJSON_SOURCE_DIR \"@CONFIG_SOURCE_DIR@\")\n\n################################################################################\n# RapidJSON build dir\nset( RapidJSON_DIR \"@CONFIG_DIR@\")\n\n################################################################################\n# Compute paths\nget_filename_component(RapidJSON_CMAKE_DIR \"${CMAKE_CURRENT_LIST_FILE}\" PATH)\n\nget_target_property(RapidJSON_INCLUDE_DIR RapidJSON INTERFACE_INCLUDE_DIRECTORIES)\n\nset( RapidJSON_INCLUDE_DIRS ${RapidJSON_INCLUDE_DIR} )\n"
        },
        {
          "name": "RapidJSONConfigVersion.cmake.in",
          "type": "blob",
          "size": 0.4580078125,
          "content": "SET(PACKAGE_VERSION \"@LIB_VERSION_STRING@\")\n\nIF (PACKAGE_FIND_VERSION VERSION_EQUAL PACKAGE_VERSION)\n  SET(PACKAGE_VERSION_EXACT \"true\")\nENDIF (PACKAGE_FIND_VERSION VERSION_EQUAL PACKAGE_VERSION)\nIF (NOT PACKAGE_FIND_VERSION VERSION_GREATER PACKAGE_VERSION)\n  SET(PACKAGE_VERSION_COMPATIBLE \"true\")\nELSE (NOT PACKAGE_FIND_VERSION VERSION_GREATER PACKAGE_VERSION)\n  SET(PACKAGE_VERSION_UNSUITABLE \"true\")\nENDIF (NOT PACKAGE_FIND_VERSION VERSION_GREATER PACKAGE_VERSION)\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 2.8212890625,
          "content": "version: 1.1.0.{build}\n\nconfiguration:\n- Debug\n- Release\n\nenvironment:\n  matrix:\n  # - VS_VERSION: 9 2008\n  #   VS_PLATFORM: win32\n  # - VS_VERSION: 9 2008\n  #   VS_PLATFORM: x64\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013\n    VS_VERSION: 10 2010\n    VS_PLATFORM: win32\n    CXX11: OFF\n    CXX17: OFF\n    CXX20: OFF\n    MEMBERSMAP: OFF\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013\n    VS_VERSION: 10 2010\n    VS_PLATFORM: x64\n    CXX11: OFF\n    CXX17: OFF\n    CXX20: OFF\n    MEMBERSMAP: ON\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013\n    VS_VERSION: 11 2012\n    VS_PLATFORM: win32\n    CXX11: OFF\n    CXX17: OFF\n    CXX20: OFF\n    MEMBERSMAP: ON\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013\n    VS_VERSION: 11 2012\n    VS_PLATFORM: x64\n    CXX11: OFF\n    CXX17: OFF\n    CXX20: OFF\n    MEMBERSMAP: OFF\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013\n    VS_VERSION: 12 2013\n    VS_PLATFORM: win32\n    CXX11: OFF\n    CXX17: OFF\n    CXX20: OFF\n    MEMBERSMAP: OFF\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013\n    VS_VERSION: 12 2013\n    VS_PLATFORM: x64\n    CXX11: OFF\n    CXX17: OFF\n    CXX20: OFF\n    MEMBERSMAP: ON\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n    VS_VERSION: 14 2015\n    VS_PLATFORM: win32\n    CXX11: OFF\n    CXX17: OFF\n    CXX20: OFF\n    MEMBERSMAP: ON\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n    VS_VERSION: 14 2015\n    VS_PLATFORM: x64\n    CXX11: OFF\n    CXX17: OFF\n    CXX20: OFF\n    MEMBERSMAP: OFF\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n    VS_VERSION: 15 2017\n    VS_PLATFORM: win32\n    CXX11: OFF\n    CXX17: OFF\n    CXX20: OFF\n    MEMBERSMAP: OFF\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n    VS_VERSION: 15 2017\n    VS_PLATFORM: x64\n    CXX11: OFF\n    CXX17: OFF\n    CXX20: OFF\n    MEMBERSMAP: ON\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n    VS_VERSION: 15 2017\n    VS_PLATFORM: x64\n    CXX11: ON\n    CXX17: OFF\n    CXX20: OFF\n    MEMBERSMAP: OFF\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n    VS_VERSION: 15 2017\n    VS_PLATFORM: x64\n    CXX11: OFF\n    CXX17: ON\n    CXX20: OFF\n    MEMBERSMAP: OFF\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n    VS_VERSION: 16 2019\n    VS_PLATFORM: x64\n    CXX11: OFF\n    CXX17: ON\n    CXX20: OFF\n    MEMBERSMAP: ON\n\nbefore_build:\n- git submodule update --init --recursive\n- cmake -H. -BBuild/VS -G \"Visual Studio %VS_VERSION%\" -DCMAKE_GENERATOR_PLATFORM=%VS_PLATFORM% -DCMAKE_VERBOSE_MAKEFILE=ON -DBUILD_SHARED_LIBS=true -DRAPIDJSON_BUILD_CXX11=%CXX11% -DRAPIDJSON_BUILD_CXX17=%CXX17% -DRAPIDJSON_BUILD_CXX20=%CXX20% -DRAPIDJSON_USE_MEMBERSMAP=%MEMBERSMAP% -Wno-dev\n\nbuild:\n  project: Build\\VS\\RapidJSON.sln\n  parallel: true\n  verbosity: minimal\n\ntest_script:\n- cd Build\\VS && if %CONFIGURATION%==Debug (ctest --verbose -E perftest --build-config %CONFIGURATION%) else (ctest --verbose --build-config %CONFIGURATION%)\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "include_dirs.js",
          "type": "blob",
          "size": 0.091796875,
          "content": "var path = require('path');\nconsole.log(path.join(path.relative('.', __dirname), 'include'));\n"
        },
        {
          "name": "library.json",
          "type": "blob",
          "size": 0.3466796875,
          "content": "{\n  \"name\": \"RapidJSON\",\n  \"version\": \"1.1.0\",\n  \"keywords\": \"json, sax, dom, parser, generator\",\n  \"description\": \"A fast JSON parser/generator for C++ with both SAX/DOM style API\",\n  \"export\": {\n    \"include\": \"include\"\n  },\n  \"examples\": \"example/*/*.cpp\",\n  \"repository\":\n  {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/Tencent/rapidjson\"\n  }\n}\n"
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 5.03125,
          "content": "Tencent is pleased to support the open source community by making RapidJSON available. \n \nCopyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip.  All rights reserved.\n\nIf you have downloaded a copy of the RapidJSON binary from Tencent, please note that the RapidJSON binary is licensed under the MIT License.\nIf you have downloaded a copy of the RapidJSON source code from Tencent, please note that RapidJSON source code is licensed under the MIT License, except for the third-party components listed below which are subject to different license terms.  Your integration of RapidJSON into your own projects may require compliance with the MIT License, as well as the other licenses applicable to the third-party components included within RapidJSON. To avoid the problematic JSON license in your own projects, it's sufficient to exclude the bin/jsonchecker/ directory, as it's the only code under the JSON license.\nA copy of the MIT License is included in this file.\n\nOther dependencies and licenses:\n\nOpen Source Software Licensed Under the BSD License:\n--------------------------------------------------------------------\n\nThe msinttypes r29 \nCopyright (c) 2006-2013 Alexander Chemeris \nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. \n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n* Neither the name of  copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nOpen Source Software Licensed Under the JSON License:\n--------------------------------------------------------------------\n\njson.org \nCopyright (c) 2002 JSON.org\nAll Rights Reserved.\n\nJSON_checker\nCopyright (c) 2002 JSON.org\nAll Rights Reserved.\n\n\t\nTerms of the JSON License:\n---------------------------------------------------\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nTerms of the MIT License:\n--------------------------------------------------------------------\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.5478515625,
          "content": "{\n  \"name\": \"rapidjson\",\n  \"version\": \"1.0.4\",\n  \"description\": \"![](doc/logo/rapidjson.png)\",\n  \"main\": \"include_dirs.js\",\n  \"directories\": {\n    \"doc\": \"doc\",\n    \"example\": \"example\",\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/Tencent/rapidjson.git\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Tencent/rapidjson/issues\"\n  },\n  \"homepage\": \"https://github.com/Tencent/rapidjson#readme\"\n}\n"
        },
        {
          "name": "rapidjson.autopkg",
          "type": "blob",
          "size": 3.3271484375,
          "content": "nuget {\n\t//Usage:  Write-NuGetPackage rapidjson.autopkg -defines:MYVERSION=1.1.0\n\t//Be sure you are running Powershell 3.0 and have the CoApp powershell extensions installed properly.\n\tnuspec {\n\t\tid = rapidjson;\n\t\tversion : ${MYVERSION};\n\t\ttitle: \"rapidjson\";\n\t\tauthors: {\"https://github.com/Tencent/rapidjson/releases/tag/v1.1.0\"};\n\t\towners: {\"@lsantos (github)\"};\n\t\tlicenseUrl: \"https://github.com/Tencent/rapidjson/blob/master/license.txt\";\n\t\tprojectUrl: \"https://github.com/Tencent/rapidjson/\";\n\t\ticonUrl: \"https://cdn1.iconfinder.com/data/icons/fatcow/32x32/json.png\";\n\t\trequireLicenseAcceptance:false;\n\t\tsummary: @\"A fast JSON parser/generator for C++ with both SAX/DOM style API\";\n\t\t\n\t\t// if you need to span several lines you can prefix a string with an @ symbol (exactly like c# does).\n\t\tdescription: @\"Rapidjson is an attempt to create the fastest JSON parser and generator.\n\n              - Small but complete. Supports both SAX and DOM style API. SAX parser only a few hundred lines of code.\n              - Fast. In the order of magnitude of strlen(). Optionally supports SSE2/SSE4.2 for acceleration.\n              - Self-contained. Minimal dependency on standard libraries. No BOOST, not even STL.\n              - Compact. Each JSON value is 16 or 20 bytes for 32 or 64-bit machines respectively (excluding text string storage). With the custom memory allocator, parser allocates memory compactly during parsing.\n              - Full  RFC4627 compliance. Supports UTF-8, UTF-16 and UTF-32.\n              - Support both in-situ parsing (directly decode strings into the source JSON text) and non-destructive parsing (decode strings into new buffers).\n              - Parse number to int/unsigned/int64_t/uint64_t/double depending on input\n              - Support custom memory allocation. Also, the default memory pool allocator can also be supplied with a user buffer (such as a buffer allocated on user's heap or - programme stack) to minimize allocation.\n\n              As the name implies, rapidjson is inspired by rapidxml.\";\n\t\t\n\t\treleaseNotes: @\"\nAdded\n\tAdd Value::XXXMember(...) overloads for std::string (#335)\n\nFixed\n\tInclude rapidjson.h for all internal/error headers.\n\tParsing some numbers incorrectly in full-precision mode (kFullPrecisionParseFlag) (#342)\n\tFix alignment of 64bit platforms (#328)\n\tFix MemoryPoolAllocator::Clear() to clear user-buffer (0691502)\n\nChanged\n\tCMakeLists for include as a thirdparty in projects (#334, #337)\n\tChange Document::ParseStream() to use stack allocator for Reader (ffbe386)\";\n\n\t\tcopyright: \"Copyright 2015\";\n\t\ttags: { native, coapp, JSON, nativepackage };\n\t\tlanguage: en-US;\n\t};\n\t\n\tdependencies {\n\t\tpackages : {\n\t\t\t//TODO:  Add dependencies here in [pkg.name]/[version] form per newline\t\t\n\t\t\t//zlib/[1.2.8],\t\t\t\n\t\t};\n\t}\n\t\n\t// the files that go into the content folders\n\tfiles {\t\n\t\t#defines {\n\t\t\tSDK_ROOT \t = .\\;\t\t\t\n\t\t}\n\n\t\t// grab all the files in the include folder\n\t\t// the folder that contains all the .h files will \n\t\t// automatically get added to the Includes path.\n\t\tnestedinclude += {\n\t\t\t#destination = ${d_include}rapidjson;\n\t\t\t\"${SDK_ROOT}include\\rapidjson\\**\\*.h\"\n\t\t};\n\t};\n\t\n\ttargets {\n\t\t// We're trying to be standard about these sorts of thing. (Will help with config.h later :D)\n\t\t//Defines += HAS_EQCORE;\n\t\t// Fix creating the package with Raggles' fork of CoApp\n\t\tIncludes += \"$(MSBuildThisFileDirectory)../..${d_include}\";\n\t};\n}"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 10.884765625,
          "content": "![RapidJSON logo](doc/logo/rapidjson.png)\n\n![Release version](https://img.shields.io/badge/release-v1.1.0-blue.svg)\n\n## A fast JSON parser/generator for C++ with both SAX/DOM style API\n\nTencent is pleased to support the open source community by making RapidJSON available.\n\nCopyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip.\n\n* [RapidJSON GitHub](https://github.com/Tencent/rapidjson/)\n* RapidJSON Documentation\n  * [English](http://rapidjson.org/)\n  * [简体中文](http://rapidjson.org/zh-cn/)\n  * [GitBook](https://www.gitbook.com/book/miloyip/rapidjson/) with downloadable PDF/EPUB/MOBI, without API reference.\n\n## Build status\n\n| [Linux][lin-link] | [Windows][win-link] | [Coveralls][cov-link] |\n| :---------------: | :-----------------: | :-------------------: |\n| ![lin-badge]      | ![win-badge]        | ![cov-badge]          |\n\n[lin-badge]: https://travis-ci.org/Tencent/rapidjson.svg?branch=master \"Travis build status\"\n[lin-link]:  https://travis-ci.org/Tencent/rapidjson \"Travis build status\"\n[win-badge]: https://ci.appveyor.com/api/projects/status/l6qulgqahcayidrf/branch/master?svg=true \"AppVeyor build status\"\n[win-link]:  https://ci.appveyor.com/project/miloyip/rapidjson-0fdqj/branch/master \"AppVeyor build status\"\n[cov-badge]: https://coveralls.io/repos/Tencent/rapidjson/badge.svg?branch=master \"Coveralls coverage\"\n[cov-link]:  https://coveralls.io/r/Tencent/rapidjson?branch=master \"Coveralls coverage\"\n\n## Introduction\n\nRapidJSON is a JSON parser and generator for C++. It was inspired by [RapidXml](http://rapidxml.sourceforge.net/).\n\n* RapidJSON is **small** but **complete**. It supports both SAX and DOM style API. The SAX parser is only a half thousand lines of code.\n\n* RapidJSON is **fast**. Its performance can be comparable to `strlen()`. It also optionally supports SSE2/SSE4.2 for acceleration.\n\n* RapidJSON is **self-contained** and **header-only**. It does not depend on external libraries such as BOOST. It even does not depend on STL.\n\n* RapidJSON is **memory-friendly**. Each JSON value occupies exactly 16 bytes for most 32/64-bit machines (excluding text string). By default it uses a fast memory allocator, and the parser allocates memory compactly during parsing.\n\n* RapidJSON is **Unicode-friendly**. It supports UTF-8, UTF-16, UTF-32 (LE & BE), and their detection, validation and transcoding internally. For example, you can read a UTF-8 file and let RapidJSON transcode the JSON strings into UTF-16 in the DOM. It also supports surrogates and \"\\u0000\" (null character).\n\nMore features can be read [here](doc/features.md).\n\nJSON(JavaScript Object Notation) is a light-weight data exchange format. RapidJSON should be in full compliance with RFC7159/ECMA-404, with optional support of relaxed syntax. More information about JSON can be obtained at\n* [Introducing JSON](http://json.org/)\n* [RFC7159: The JavaScript Object Notation (JSON) Data Interchange Format](https://tools.ietf.org/html/rfc7159)\n* [Standard ECMA-404: The JSON Data Interchange Format](https://www.ecma-international.org/publications/standards/Ecma-404.htm)\n\n## Highlights in v1.1 (2016-8-25)\n\n* Added [JSON Pointer](doc/pointer.md)\n* Added [JSON Schema](doc/schema.md)\n* Added [relaxed JSON syntax](doc/dom.md) (comment, trailing comma, NaN/Infinity)\n* Iterating array/object with [C++11 Range-based for loop](doc/tutorial.md)\n* Reduce memory overhead of each `Value` from 24 bytes to 16 bytes in x86-64 architecture.\n\nFor other changes please refer to [change log](CHANGELOG.md).\n\n## Compatibility\n\nRapidJSON is cross-platform. Some platform/compiler combinations which have been tested are shown as follows.\n* Visual C++ 2008/2010/2013 on Windows (32/64-bit)\n* GNU C++ 3.8.x on Cygwin\n* Clang 3.4 on Mac OS X (32/64-bit) and iOS\n* Clang 3.4 on Android NDK\n\nUsers can build and run the unit tests on their platform/compiler.\n\n## Installation\n\nRapidJSON is a header-only C++ library. Just copy the `include/rapidjson` folder to system or project's include path.\n\nAlternatively, if you are using the [vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager you can download and install rapidjson with CMake integration in a single command:\n* vcpkg install rapidjson\n\nRapidJSON uses following software as its dependencies:\n* [CMake](https://cmake.org/) as a general build tool\n* (optional) [Doxygen](http://www.doxygen.org) to build documentation\n* (optional) [googletest](https://github.com/google/googletest) for unit and performance testing\n\nTo generate user documentation and run tests please proceed with the steps below:\n\n1. Execute `git submodule update --init` to get the files of thirdparty submodules (google test).\n2. Create directory called `build` in rapidjson source directory.\n3. Change to `build` directory and run `cmake ..` command to configure your build. Windows users can do the same with cmake-gui application.\n4. On Windows, build the solution found in the build directory. On Linux, run `make` from the build directory.\n\nOn successful build you will find compiled test and example binaries in `bin`\ndirectory. The generated documentation will be available in `doc/html`\ndirectory of the build tree. To run tests after finished build please run `make\ntest` or `ctest` from your build tree. You can get detailed output using `ctest\n-V` command.\n\nIt is possible to install library system-wide by running `make install` command\nfrom the build tree with administrative privileges. This will install all files\naccording to system preferences.  Once RapidJSON is installed, it is possible\nto use it from other CMake projects by adding `find_package(RapidJSON)` line to\nyour CMakeLists.txt.\n\n## Usage at a glance\n\nThis simple example parses a JSON string into a document (DOM), make a simple modification of the DOM, and finally stringify the DOM to a JSON string.\n\n~~~~~~~~~~cpp\n// rapidjson/example/simpledom/simpledom.cpp`\n#include \"rapidjson/document.h\"\n#include \"rapidjson/writer.h\"\n#include \"rapidjson/stringbuffer.h\"\n#include <iostream>\n\nusing namespace rapidjson;\n\nint main() {\n    // 1. Parse a JSON string into DOM.\n    const char* json = \"{\\\"project\\\":\\\"rapidjson\\\",\\\"stars\\\":10}\";\n    Document d;\n    d.Parse(json);\n\n    // 2. Modify it by DOM.\n    Value& s = d[\"stars\"];\n    s.SetInt(s.GetInt() + 1);\n\n    // 3. Stringify the DOM\n    StringBuffer buffer;\n    Writer<StringBuffer> writer(buffer);\n    d.Accept(writer);\n\n    // Output {\"project\":\"rapidjson\",\"stars\":11}\n    std::cout << buffer.GetString() << std::endl;\n    return 0;\n}\n~~~~~~~~~~\n\nNote that this example did not handle potential errors.\n\nThe following diagram shows the process.\n\n![simpledom](doc/diagram/simpledom.png)\n\nMore [examples](https://github.com/Tencent/rapidjson/tree/master/example) are available:\n\n* DOM API\n  * [tutorial](https://github.com/Tencent/rapidjson/blob/master/example/tutorial/tutorial.cpp): Basic usage of DOM API.\n\n* SAX API\n  * [simplereader](https://github.com/Tencent/rapidjson/blob/master/example/simplereader/simplereader.cpp): Dumps all SAX events while parsing a JSON by `Reader`.\n  * [condense](https://github.com/Tencent/rapidjson/blob/master/example/condense/condense.cpp): A command line tool to rewrite a JSON, with all whitespaces removed.\n  * [pretty](https://github.com/Tencent/rapidjson/blob/master/example/pretty/pretty.cpp): A command line tool to rewrite a JSON with indents and newlines by `PrettyWriter`.\n  * [capitalize](https://github.com/Tencent/rapidjson/blob/master/example/capitalize/capitalize.cpp): A command line tool to capitalize strings in JSON.\n  * [messagereader](https://github.com/Tencent/rapidjson/blob/master/example/messagereader/messagereader.cpp): Parse a JSON message with SAX API.\n  * [serialize](https://github.com/Tencent/rapidjson/blob/master/example/serialize/serialize.cpp): Serialize a C++ object into JSON with SAX API.\n  * [jsonx](https://github.com/Tencent/rapidjson/blob/master/example/jsonx/jsonx.cpp): Implements a `JsonxWriter` which stringify SAX events into [JSONx](https://www-01.ibm.com/support/knowledgecenter/SS9H2Y_7.1.0/com.ibm.dp.doc/json_jsonx.html) (a kind of XML) format. The example is a command line tool which converts input JSON into JSONx format.\n\n* Schema\n  * [schemavalidator](https://github.com/Tencent/rapidjson/blob/master/example/schemavalidator/schemavalidator.cpp) : A command line tool to validate a JSON with a JSON schema.\n\n* Advanced\n  * [prettyauto](https://github.com/Tencent/rapidjson/blob/master/example/prettyauto/prettyauto.cpp): A modified version of [pretty](https://github.com/Tencent/rapidjson/blob/master/example/pretty/pretty.cpp) to automatically handle JSON with any UTF encodings.\n  * [parsebyparts](https://github.com/Tencent/rapidjson/blob/master/example/parsebyparts/parsebyparts.cpp): Implements an `AsyncDocumentParser` which can parse JSON in parts, using C++11 thread.\n  * [filterkey](https://github.com/Tencent/rapidjson/blob/master/example/filterkey/filterkey.cpp): A command line tool to remove all values with user-specified key.\n  * [filterkeydom](https://github.com/Tencent/rapidjson/blob/master/example/filterkeydom/filterkeydom.cpp): Same tool as above, but it demonstrates how to use a generator to populate a `Document`.\n\n## Contributing\n\nRapidJSON welcomes contributions. When contributing, please follow the code below.\n\n### Issues\n\nFeel free to submit issues and enhancement requests.\n\nPlease help us by providing **minimal reproducible examples**, because source code is easier to let other people understand what happens.\nFor crash problems on certain platforms, please bring stack dump content with the detail of the OS, compiler, etc.\n\nPlease try breakpoint debugging first, tell us what you found, see if we can start exploring based on more information been prepared.\n\n### Workflow\n\nIn general, we follow the \"fork-and-pull\" Git workflow.\n\n 1. **Fork** the repo on GitHub\n 2. **Clone** the project to your own machine\n 3. **Checkout** a new branch on your fork, start developing on the branch\n 4. **Test** the change before commit, Make sure the changes pass all the tests, including `unittest` and `preftest`, please add test case for each new feature or bug-fix if needed.\n 5. **Commit** changes to your own branch\n 6. **Push** your work back up to your fork\n 7. Submit a **Pull request** so that we can review your changes\n\nNOTE: Be sure to merge the latest from \"upstream\" before making a pull request!\n\n### Copyright and Licensing\n\nYou can copy and paste the license summary from below.\n\n```\nTencent is pleased to support the open source community by making RapidJSON available.\n\nCopyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip.\n\nLicensed under the MIT License (the \"License\"); you may not use this file except\nin compliance with the License. You may obtain a copy of the License at\n\nhttp://opensource.org/licenses/MIT\n\nUnless required by applicable law or agreed to in writing, software distributed \nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR \nCONDITIONS OF ANY KIND, either express or implied. See the License for the \nspecific language governing permissions and limitations under the License.\n```\n"
        },
        {
          "name": "readme.zh-cn.md",
          "type": "blob",
          "size": 8.5888671875,
          "content": "![RapidJSON logo](doc/logo/rapidjson.png)\n\n![Release version](https://img.shields.io/badge/release-v1.1.0-blue.svg)\n\n## 高效的 C++ JSON 解析／生成器，提供 SAX 及 DOM 风格 API\n\nTencent is pleased to support the open source community by making RapidJSON available.\n\nCopyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip.\n\n* [RapidJSON GitHub](https://github.com/Tencent/rapidjson/)\n* RapidJSON 文档\n  * [English](http://rapidjson.org/)\n  * [简体中文](http://rapidjson.org/zh-cn/)\n  * [GitBook](https://www.gitbook.com/book/miloyip/rapidjson/details/zh-cn) 可下载 PDF/EPUB/MOBI，但不含 API 参考手册。\n\n## Build 状态\n\n| [Linux][lin-link] | [Windows][win-link] | [Coveralls][cov-link] |\n| :---------------: | :-----------------: | :-------------------: |\n| ![lin-badge]      | ![win-badge]        | ![cov-badge]          |\n\n[lin-badge]: https://travis-ci.org/Tencent/rapidjson.svg?branch=master \"Travis build status\"\n[lin-link]:  https://travis-ci.org/Tencent/rapidjson \"Travis build status\"\n[win-badge]: https://ci.appveyor.com/api/projects/status/l6qulgqahcayidrf/branch/master?svg=true \"AppVeyor build status\"\n[win-link]:  https://ci.appveyor.com/project/miloyip/rapidjson-0fdqj/branch/master \"AppVeyor build status\"\n[cov-badge]: https://coveralls.io/repos/Tencent/rapidjson/badge.svg?branch=master \"Coveralls coverage\"\n[cov-link]:  https://coveralls.io/r/Tencent/rapidjson?branch=master \"Coveralls coverage\"\n\n## 简介\n\nRapidJSON 是一个 C++ 的 JSON 解析器及生成器。它的灵感来自 [RapidXml](http://rapidxml.sourceforge.net/)。\n\n* RapidJSON 小而全。它同时支持 SAX 和 DOM 风格的 API。SAX 解析器只有约 500 行代码。\n\n* RapidJSON 快。它的性能可与 `strlen()` 相比。可支持 SSE2/SSE4.2 加速。\n\n* RapidJSON 独立。它不依赖于 BOOST 等外部库。它甚至不依赖于 STL。\n\n* RapidJSON 对内存友好。在大部分 32/64 位机器上，每个 JSON 值只占 16 字节（除字符串外）。它预设使用一个快速的内存分配器，令分析器可以紧凑地分配内存。\n\n* RapidJSON 对 Unicode 友好。它支持 UTF-8、UTF-16、UTF-32 (大端序／小端序)，并内部支持这些编码的检测、校验及转码。例如，RapidJSON 可以在分析一个 UTF-8 文件至 DOM 时，把当中的 JSON 字符串转码至 UTF-16。它也支持代理对（surrogate pair）及 `\"\\u0000\"`（空字符）。\n\n在 [这里](doc/features.zh-cn.md) 可读取更多特点。\n\nJSON（JavaScript Object Notation）是一个轻量的数据交换格式。RapidJSON 应该完全遵从 RFC7159/ECMA-404，并支持可选的放宽语法。 关于 JSON 的更多信息可参考：\n* [Introducing JSON](http://json.org/)\n* [RFC7159: The JavaScript Object Notation (JSON) Data Interchange Format](https://tools.ietf.org/html/rfc7159)\n* [Standard ECMA-404: The JSON Data Interchange Format](https://www.ecma-international.org/publications/standards/Ecma-404.htm)\n\n## v1.1 中的亮点 (2016-8-25)\n\n* 加入 [JSON Pointer](doc/pointer.zh-cn.md) 功能，可更简单地访问及更改 DOM。\n* 加入 [JSON Schema](doc/schema.zh-cn.md) 功能，可在解析或生成 JSON 时进行校验。\n* 加入 [放宽的 JSON 语法](doc/dom.zh-cn.md) （注释、尾随逗号、NaN/Infinity）\n* 使用 [C++11 范围 for 循环](doc/tutorial.zh-cn.md) 去遍历 array 和 object。\n* 在 x86-64 架构下，缩减每个 `Value` 的内存开销从 24 字节至 16 字节。\n\n其他改动请参考 [change log](CHANGELOG.md).\n\n## 兼容性\n\nRapidJSON 是跨平台的。以下是一些曾测试的平台／编译器组合：\n* Visual C++ 2008/2010/2013 在 Windows (32/64-bit)\n* GNU C++ 3.8.x 在 Cygwin\n* Clang 3.4 在 Mac OS X (32/64-bit) 及 iOS\n* Clang 3.4 在 Android NDK\n\n用户也可以在他们的平台上生成及执行单元测试。\n\n## 安装\n\nRapidJSON 是只有头文件的 C++ 库。只需把 `include/rapidjson` 目录复制至系统或项目的 include 目录中。\n\nRapidJSON 依赖于以下软件：\n* [CMake](https://cmake.org/) 作为通用生成工具\n* (optional) [Doxygen](http://www.doxygen.org) 用于生成文档\n* (optional) [googletest](https://github.com/google/googletest) 用于单元及性能测试\n\n生成测试及例子的步骤：\n\n1. 执行 `git submodule update --init` 去获取 thirdparty submodules (google test)。\n2. 在 rapidjson 目录下，建立一个 `build` 目录。\n3. 在 `build` 目录下执行 `cmake ..` 命令以设置生成。Windows 用户可使用 cmake-gui 应用程序。\n4. 在 Windows 下，编译生成在 build 目录中的 solution。在 Linux 下，于 build 目录运行 `make`。\n\n成功生成后，你会在 `bin` 的目录下找到编译后的测试及例子可执行文件。而生成的文档将位于 build 下的 `doc/html` 目录。要执行测试，请在 build 下执行 `make test` 或 `ctest`。使用 `ctest -V` 命令可获取详细的输出。\n\n我们也可以把程序库安装至全系统中，只要在具管理权限下从 build 目录执行 `make install` 命令。这样会按系统的偏好设置安装所有文件。当安装 RapidJSON 后，其他的 CMake 项目需要使用它时，可以通过在 `CMakeLists.txt` 加入一句 `find_package(RapidJSON)`。\n\n## 用法一览\n\n此简单例子解析一个 JSON 字符串至一个 document (DOM)，对 DOM 作出简单修改，最终把 DOM 转换（stringify）至 JSON 字符串。\n\n~~~~~~~~~~cpp\n// rapidjson/example/simpledom/simpledom.cpp`\n#include \"rapidjson/document.h\"\n#include \"rapidjson/writer.h\"\n#include \"rapidjson/stringbuffer.h\"\n#include <iostream>\n\nusing namespace rapidjson;\n\nint main() {\n    // 1. 把 JSON 解析至 DOM。\n    const char* json = \"{\\\"project\\\":\\\"rapidjson\\\",\\\"stars\\\":10}\";\n    Document d;\n    d.Parse(json);\n\n    // 2. 利用 DOM 作出修改。\n    Value& s = d[\"stars\"];\n    s.SetInt(s.GetInt() + 1);\n\n    // 3. 把 DOM 转换（stringify）成 JSON。\n    StringBuffer buffer;\n    Writer<StringBuffer> writer(buffer);\n    d.Accept(writer);\n\n    // Output {\"project\":\"rapidjson\",\"stars\":11}\n    std::cout << buffer.GetString() << std::endl;\n    return 0;\n}\n~~~~~~~~~~\n\n注意此例子并没有处理潜在错误。\n\n下图展示执行过程。\n\n![simpledom](doc/diagram/simpledom.png)\n\n还有许多 [例子](https://github.com/Tencent/rapidjson/tree/master/example) 可供参考：\n\n* DOM API\n  * [tutorial](https://github.com/Tencent/rapidjson/blob/master/example/tutorial/tutorial.cpp): DOM API 的基本使用方法。\n\n* SAX API\n  * [simplereader](https://github.com/Tencent/rapidjson/blob/master/example/simplereader/simplereader.cpp): 使用 `Reader` 解析 JSON 时，打印所有 SAX 事件。\n  * [condense](https://github.com/Tencent/rapidjson/blob/master/example/condense/condense.cpp): 移除 JSON 中所有空白符的命令行工具。\n  * [pretty](https://github.com/Tencent/rapidjson/blob/master/example/pretty/pretty.cpp): 为 JSON 加入缩进与换行的命令行工具，当中使用了 `PrettyWriter`。\n  * [capitalize](https://github.com/Tencent/rapidjson/blob/master/example/capitalize/capitalize.cpp): 把 JSON 中所有字符串改为大写的命令行工具。\n  * [messagereader](https://github.com/Tencent/rapidjson/blob/master/example/messagereader/messagereader.cpp): 使用 SAX API 去解析一个 JSON 报文。\n  * [serialize](https://github.com/Tencent/rapidjson/blob/master/example/serialize/serialize.cpp): 使用 SAX API 去序列化 C++ 对象，生成 JSON。\n  * [jsonx](https://github.com/Tencent/rapidjson/blob/master/example/jsonx/jsonx.cpp): 实现了一个 `JsonxWriter`，它能把 SAX 事件写成 [JSONx](https://www-01.ibm.com/support/knowledgecenter/SS9H2Y_7.1.0/com.ibm.dp.doc/json_jsonx.html)（一种 XML）格式。这个例子是把 JSON 输入转换成 JSONx 格式的命令行工具。\n\n* Schema API\n  * [schemavalidator](https://github.com/Tencent/rapidjson/blob/master/example/schemavalidator/schemavalidator.cpp): 使用 JSON Schema 去校验 JSON 的命令行工具。\n\n* 进阶\n  * [prettyauto](https://github.com/Tencent/rapidjson/blob/master/example/prettyauto/prettyauto.cpp): [pretty](https://github.com/Tencent/rapidjson/blob/master/example/pretty/pretty.cpp) 的修改版本，可自动处理任何 UTF 编码的 JSON。\n  * [parsebyparts](https://github.com/Tencent/rapidjson/blob/master/example/parsebyparts/parsebyparts.cpp): 这例子中的 `AsyncDocumentParser` 类使用 C++ 线程来逐段解析 JSON。\n  * [filterkey](https://github.com/Tencent/rapidjson/blob/master/example/filterkey/filterkey.cpp): 移取使用者指定的键值的命令行工具。\n  * [filterkeydom](https://github.com/Tencent/rapidjson/blob/master/example/filterkey/filterkey.cpp): 如上的工具，但展示如何使用生成器（generator）去填充一个 `Document`。\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "thirdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "travis-doxygen.sh",
          "type": "blob",
          "size": 3.216796875,
          "content": "#!/bin/bash\n# Update Doxygen documentation after push to 'master'.\n# Author: @pah\n\nset -e\n\nDOXYGEN_VER=1_8_16\nDOXYGEN_URL=\"https://codeload.github.com/doxygen/doxygen/tar.gz/Release_${DOXYGEN_VER}\"\n\n: ${GITHUB_REPO:=\"Tencent/rapidjson\"}\nGITHUB_HOST=\"github.com\"\nGITHUB_CLONE=\"git://${GITHUB_HOST}/${GITHUB_REPO}\"\nGITHUB_URL=\"https://${GITHUB_HOST}/${GITHUB_PUSH-${GITHUB_REPO}}\"\n\n# if not set, ignore password\n#GIT_ASKPASS=\"${TRAVIS_BUILD_DIR}/gh_ignore_askpass.sh\"\n\nskip() {\n\techo \"$@\" 1>&2\n\techo \"Exiting...\" 1>&2\n\texit 0\n}\n\nabort() {\n\techo \"Error: $@\" 1>&2\n\techo \"Exiting...\" 1>&2\n\texit 1\n}\n\n# TRAVIS_BUILD_DIR not set, exiting\n[ -d \"${TRAVIS_BUILD_DIR-/nonexistent}\" ] || \\\n\tabort '${TRAVIS_BUILD_DIR} not set or nonexistent.'\n\n# check for pull-requests\n[ \"${TRAVIS_PULL_REQUEST}\" = \"false\" ] || \\\n\tskip \"Not running Doxygen for pull-requests.\"\n\n# check for branch name\n[ \"${TRAVIS_BRANCH}\" = \"master\" ] || \\\n\tskip \"Running Doxygen only for updates on 'master' branch (current: ${TRAVIS_BRANCH}).\"\n\n# check for job number\n# [ \"${TRAVIS_JOB_NUMBER}\" = \"${TRAVIS_BUILD_NUMBER}.1\" ] || \\\n# \tskip \"Running Doxygen only on first job of build ${TRAVIS_BUILD_NUMBER} (current: ${TRAVIS_JOB_NUMBER}).\"\n\n# install doxygen binary distribution\ndoxygen_install()\n{\n\tcd ${TMPDIR-/tmp}\n\tcurl ${DOXYGEN_URL} -o doxygen.tar.gz\n\ttar zxvf doxygen.tar.gz\n\tmkdir doxygen_build\n\tcd doxygen_build\n\tcmake ../doxygen-Release_${DOXYGEN_VER}/\n\tmake\n    \n\texport PATH=\"${TMPDIR-/tmp}/doxygen_build/bin:$PATH\"\n\t\n\tcd ../../\n}\n\ndoxygen_run()\n{\n\tcd \"${TRAVIS_BUILD_DIR}\";\n\tdoxygen ${TRAVIS_BUILD_DIR}/build/doc/Doxyfile;\n\tdoxygen ${TRAVIS_BUILD_DIR}/build/doc/Doxyfile.zh-cn;\n}\n\ngh_pages_prepare()\n{\n\tcd \"${TRAVIS_BUILD_DIR}/build/doc\";\n\t[ ! -d \"html\" ] || \\\n\t\tabort \"Doxygen target directory already exists.\"\n\tgit --version\n\tgit clone --single-branch -b gh-pages \"${GITHUB_CLONE}\" html\n\tcd html\n\t# setup git config (with defaults)\n\tgit config user.name \"${GIT_NAME-travis}\"\n\tgit config user.email \"${GIT_EMAIL-\"travis@localhost\"}\"\n\t# clean working dir\n\trm -f .git/index\n\tgit clean -df\n}\n\ngh_pages_commit() {\n\tcd \"${TRAVIS_BUILD_DIR}/build/doc/html\";\n\techo \"rapidjson.org\" > CNAME\n\tgit add --all;\n\tgit diff-index --quiet HEAD || git commit -m \"Automatic doxygen build\";\n}\n\ngh_setup_askpass() {\n\tcat > ${GIT_ASKPASS} <<EOF\n#!/bin/bash\necho\nexit 0\nEOF\n\tchmod a+x \"$GIT_ASKPASS\"\n}\n\ngh_pages_push() {\n\t# check for secure variables\n\t[ \"${TRAVIS_SECURE_ENV_VARS}\" = \"true\" ] || \\\n\t\tskip \"Secure variables not available, not updating GitHub pages.\"\n\t# check for GitHub access token\n\t[ \"${GH_TOKEN+set}\" = set ] || \\\n\t\tskip \"GitHub access token not available, not updating GitHub pages.\"\n\t[ \"${#GH_TOKEN}\" -eq 40 ] || \\\n\t\tabort \"GitHub token invalid: found ${#GH_TOKEN} characters, expected 40.\"\n\n\tcd \"${TRAVIS_BUILD_DIR}/build/doc/html\";\n\t# setup credentials (hide in \"set -x\" mode)\n\tgit remote set-url --push origin \"${GITHUB_URL}\"\n\tgit config credential.helper 'store'\n\t# ( set +x ; git config credential.username \"${GH_TOKEN}\" )\n\t( set +x ; [ -f ${HOME}/.git-credentials ] || \\\n\t\t\t( echo \"https://${GH_TOKEN}:@${GITHUB_HOST}\" > ${HOME}/.git-credentials ; \\\n\t\t\t chmod go-rw ${HOME}/.git-credentials ) )\n\t# push to GitHub\n\tgit push origin gh-pages\n}\n\ndoxygen_install\ngh_pages_prepare\ndoxygen_run\ngh_pages_commit\ngh_pages_push\n\n"
        }
      ]
    }
  ]
}