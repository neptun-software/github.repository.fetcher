{
  "metadata": {
    "timestamp": 1736566383660,
    "page": 145,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "CleverRaven/Cataclysm-DDA",
      "stars": 10876,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".astylerc",
          "type": "blob",
          "size": 1.3720703125,
          "content": "# These options are mirrored in .astylerc and doc/CODE_STYLE.txt\n\n# \"One True Brace Style\"\n--style=1tbs\n\n# Attach brackets to class and struct inline function definitions.\n--attach-inlines\n\n# 4 spaces per indentation level and per tab stop\n--indent=spaces=4\n\n# 'char *foo' instead of 'char* foo'\n--align-pointer=name\n\n# maximum length for a single unbroken line\n--max-code-length=100\n\n# 'foo ||\\nbar' instead of 'foo\\n|| bar'\n--break-after-logical\n\n# indent 'public:' 'protected:' 'private:' deeper than 'class' or 'struct'\n--indent-classes\n\n# indent 'case' lines deeper than 'switch'\n--indent-switches\n\n# indent later lines of multi-line preprocessor directives\n# to be deprecated by --indent-preproc-define\n--indent-preprocessor\n\n# indent comments on column 1 to match the code block they are in\n--indent-col1-comments\n\n# indent multi-line control block headers like 'if (foo\\nbar)'\n--min-conditional-indent=0\n\n# add space around operators with two operands\n--pad-oper\n\n# add brackets to unbracketed one line conditional statements\n--add-brackets\n\n# replaces tabs with spaces in non-indent sections, except in strings\n--convert-tabs\n\n# remove extra space padding around parentheses\n--unpad-paren\n\n# insert space padding around parentheses on the inside only\n--pad-paren-in\n\n# exclude src/third-party\n--exclude=src/third-party\n\n# but don't be sad about no tests/src/third-party\n--ignore-exclude-errors-x\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 3.9560546875,
          "content": "# Enable some categories of checks and then disable individual ones.\n# The disabled checks that appear as part of the initial alphabetical section\n# enabling categories (e.g. cert-err58-cpp) are ones that do not make sense for\n# this codebase and we do not intend to fix.  The disabled checks appearing\n# thereafter in a separate alphabetical list have yet to be triaged.  We may\n# fix their errors or recategorise them as checks we don't care about.\n#\n# Comments on the checks we have decided are not worthwhile:\n#\n# * bugprone-throw-keyword-missing\n# This check is too time consuming.  Disable it for now to save CI time.\n#\n# * cert-dcl21-cpp (postfix operator++ and operator-- should return const objects)\n# This is an unconventional code style, and conflicts with\n# readability-const-return-type.\n#\n# * cert-env33-c (calls to system, popen)\n# Unlikely to catch bugs, and using system is convenient for portability.\n#\n# * cert-dcl37-c and cert-dcl-51-cpp (reserved identifiers)\n# These two checks are aliases for bugprone-reserved-identifier.\n# Don't repeatedly run the same check for three times.\n#\n# * cert-err58-cpp (exceptions from static variable declarations)\n# We have lots of memory allocations in static variable declarations, and\n# that's fine.\n#\n# * clang-analyzer-core.{DivideZero,NonNullParamChecker,UndefinedBinaryOperatorResult}\n# * clang-analyzer-cplusplus.NewDelete\n# They report too many false positives.\n#\n# * modernize-use-auto\n# We prefer an almost-always-avoid-auto style.\n#\n# * modernize-use-trailing-return-type\n# An arbitrary style convention we haven't adopted.\n#\n# * readability-identifier-naming\n# We are not enforcing a standard identifier naming scheme in the code base.\n# This check does not bring much value at the moment and consumes a lot of CPU time.\n\nChecks: \"\\\nbugprone-*,\\\ncata-*,\\\ncert-*,\\\n-cert-dcl21-cpp,\\\n-cert-env33-c,\\\n-cert-dcl37-c,\\\n-cert-dcl51-cpp,\\\n-cert-err58-cpp,\\\n-clang-analyzer-core.CallAndMessage,\\\n-clang-analyzer-core.DivideZero,\\\n-clang-analyzer-core.NonNullParamChecker,\\\n-clang-analyzer-core.UndefinedBinaryOperatorResult,\\\n-clang-analyzer-cplusplus.NewDelete,\\\nclang-diagnostic-*,\\\ncppcoreguidelines-slicing,\\\ngoogle-explicit-constructor,\\\nllvm-namespace-comment,\\\nmisc-*,\\\nmodernize-*,\\\n-modernize-use-auto,\\\n-modernize-use-trailing-return-type,\\\nperformance-*,\\\nreadability-*,\\\n-bugprone-assignment-in-if-condition,\\\n-bugprone-easily-swappable-parameters,\\\n-bugprone-empty-catch,\\\n-bugprone-implicit-widening-of-multiplication-result,\\\n-bugprone-narrowing-conversions,\\\n-bugprone-switch-missing-default-case,\\\n-bugprone-throw-keyword-missing,\\\n-bugprone-unchecked-optional-access,\\\n-bugprone-unhandled-exception-at-new,\\\n-misc-confusable-identifiers,\\\n-misc-const-correctness,\\\n-misc-header-include-cycle,\\\n-misc-include-cleaner,\\\n-misc-no-recursion,\\\n-misc-non-private-member-variables-in-classes,\\\n-misc-use-anonymous-namespace,\\\n-modernize-concat-nested-namespaces,\\\n-modernize-macro-to-enum,\\\n-modernize-pass-by-value,\\\n-modernize-return-braced-init-list,\\\n-modernize-use-default-member-init,\\\n-modernize-use-nodiscard,\\\n-performance-avoid-endl,\\\n-performance-noexcept-swap,\\\n-performance-no-automatic-move,\\\n-readability-avoid-unconditional-preprocessor-if,\\\n-readability-container-data-pointer,\\\n-readability-convert-member-functions-to-static,\\\n-readability-else-after-return,\\\n-readability-function-cognitive-complexity,\\\n-readability-identifier-length,\\\n-readability-identifier-naming,\\\n-readability-implicit-bool-conversion,\\\n-readability-magic-numbers,\\\n-readability-named-parameter,\\\n-readability-simplify-boolean-expr,\\\n-readability-suspicious-call-argument,\\\n-readability-use-anyofallof,\\\n\"\nWarningsAsErrors: '*'\nHeaderFilterRegex: '(src|test|tools).*'\nFormatStyle:     none\nCheckOptions:\n  - key: cata-large-inline-function.MaxStatements\n    value: 5\n  - key: cata-text-style.EscapeUnicode\n    value: 0\n  - key: cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField\n    value: true\n  - key: readability-uppercase-literal-suffix.NewSuffixes\n    value: 'L;UL;LL;ULL'\n\n# vim:tw=0\n"
        },
        {
          "name": ".cmake-format.yml",
          "type": "blob",
          "size": 1.921875,
          "content": "# options affecting formatting\nformat:\n  # how wide to allow formatted cmake files\n  line_width: 100\n  # how many spaces to tab for indent\n  tab_size: 4\n  # if true, separate flow control names from their parentheses\n  separate_ctrl_name_with_space: true # currently ignored by cmake-lint\n  # if true, separate function names from parentheses with a\n  separate_fn_name_with_space: false # currently ignored by cmake-lint\n  # if a statement is wrapped to more than one line, than dangle\n  # the closing parenthesis on its own line.\n  dangle_parens: false # currently ignored by cmake-lint\n  # Format command names consistently as 'lower' or 'upper' case\n  # 'canonical': like in official documentation\n  command_case: 'canonical' # currently ignored by cmake-lint\n  # Format keywords consistently as 'lower' or 'upper' case\n  keyword_case: 'upper' # currently ignored by cmake-lint\n# options affecting comment reflow and formatting\nmarkup:\n  # enable comment markup parsing and reflow\n  enable_markup: false\n# options affecting linter\nlint:\n  # list of lint codes to disable\n  # C0113: Missing COMMENT in statement which allows it\n  disabled_codes: ['C0113']\n  # regular expression pattern describing valid function names\n  function_pattern: '[a-z_]+'\n  # regular expression pattern describing valid names for private variables\n  # WEIRD: strangely named \"directory variable name\" in lint output\n  private_var_pattern: '_[0-9A-Z_]+'\n  # regular expression pattern describing valid names for public variables (strangely named \"directories\"?)\n  # WEIRD: strangely named \"directory variable name\" in lint output\n  public_var_pattern: '[0-9A-Z]+'\n  # regular expression pattern describing valid macro names\n  macro_pattern: '[a-z_]+'\n  # regular expression pattern describing valid names for function/macro\n  # arguments and loop variables\n  argument_var_pattern: '[A-Z][A-Z0-9_]+'\n  # require no more than this many newlines between statements\n  max_statement_spacing: 2\n\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3349609375,
          "content": "# EditorConfig is awesome: http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n[*.json]\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\ncharset = utf-8\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.529296875,
          "content": "[flake8]\nexclude = .git,__pycache__,lang/json,tools/clang-tidy-plugin/test/check_clang_tidy.py\nignore =\n    # E265 forces comments to have a space after the '#'.  We have a bunch of\n    # optional debugging code commented out this way, and not having a space is\n    # a convenient way to distinguish it from proper comments.  Maybe we should\n    # delete that code, but unless that happens leaving E265 disabled.\n    E265,\n    # W503 and W504 require line breaks after or before binary operators; you\n    # can only have one enabled\n    W504\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.802734375,
          "content": "# Automatically normalize line endings for all files\n# detected as text (Convert CRLF => LF).\n*         text=auto\n\n# Explicitly normalize files with these extensions in\n# case Git doesn't detect them as text for some reason.\n*.c       text\n*.cbp     text\n*.cpp     text\n*.h       text\n*.json    text\n*.md      text\n*.py      text\n*.rc      text\n*.sh      text\n*.txt     text\n*.yml     text\n\n# Visual Studio project files, leave them alone.\n*.cmd     -text\n*.filters -text\n*.sln     -text\n*.user    -text\n*.vcxproj -text\n\n# Generated translation text, don't mess with them.\n*.mo      binary\n*.po      -text -diff\n*.pot     -text\n\n# Treat images, archives, and font files as binary.\n# (binary is a macro for -text -diff)\n*.db      binary\n*.fon     binary\n*.gz      binary\n*.ico     binary\n*.png     binary\n*.ttf     binary\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.2744140625,
          "content": "!src/chkjson\n*.7z\n*.a\n*.d\n*.dll\n*.exe\n*.o\n*.tmp\n*.zip\n*.apk\n*.log\n/WinDepend/\n/achievements/\n/bindist/\n/build/\n/build-start-time\n/cache/\n/cmake-build-debug/\n/config/\n/data/*.template\n/data/cache/\n/data/mods/user-default-mods.json\n/dep/\n/doxygen_doc/html/*\n/doxygen_doc/latex/*\n/font/\n/graveyard/\n/memorial/\n/mods/\n/obj/\n/objwin/\n/save/\n/src/version.h\n/src/prefix.h\n/sound/\n/templates/\n/export_dir/\n/tools/format/json_formatter.cgi\nCataclysmWin.cscope_file_list\nCataclysmWin.depend\nCataclysmWin.layout\ncata_test\ncata_test-tiles\ncataclysm\n*cataclysm-tiles\ncataclysm-vcpkg\ncataclysmdda-*\nchkjson*\ndebug.log\nlogg.txt\njson_formatter\n\n# Visual Studio files\n*.code-workspace\n*.exp\n*.ilk\n*.opensdf\n*.pdb\n*.lib\n*.manifest\n*.sdf\n*.suo\n*.user\n*.vcxproj.filters\n*.lastbuildstate\n.vs/\nDirectory.Build.props\nDirectory.Build.targets\n\n# Visual Studio Code\n.vscode/\n.vscode/**\n!.vscode/settings.json\n!.vscode/extensions.json\n\n# Visual Studio project files\n/msvc-full-features/**/\n\n# Temporary CMakeFiles\nCMakeFiles/git-data\nCMakeUserPresets.json\nout/\n\n# Visual Studio 2015\n/msvc-full-features/*db\n/msvc-full-features/ipch\nlnk*.tmp\nCataclysm.exe.lastcodeanalysissucceeded\n\n#Visual Studio 2017\n/msvc-full-features/PredictedInputCache_Debug_x64.dat\n\n# Visual Studio 2019\n**/enc_temp_folder/*\n\n#vcpkg\n/msvc-object_creator/vcpkg_installed\n\n# PVS Studio\n/msvc-full-features/*PVS-Studio*\n\n# Temporary and backup files\n*.bak\n*.cbTemp\n*.sw?\n*~\n\\#*\ngmon.out\n\n# System Files\n.DS_Store\n._.DS_Store\nThumbs.db\ncscope.*\ntags\n\n# Generated translation source\n/lang/po/*.pot\n\n# Compiled binary translations\n/lang/mo/\n\n# Stampfile for binary translations\n/lang/mo_built.stamp\n\n# Directory for translatable strings\n/lang/json/*\n!/lang/json/README\n\n# Languag translation stats intermediate files\n/lang/stats/\n\n# Netbeans IDE folders\nnbproject/\n\n# Python runtime files\n__pycache__\n*.pyc\n\n# vim files\n*.vim\n*.session\n.ycm_extra_conf.py\n.vimrc\n\n# taskwarrior files\n*.task*\n\n# GitEye files\n*.project\n\n# vimdiff backup\n*.orig\n\n# obsidian.md files\n.obsidian\n\n# OSX\nCataclysm.app\nbuild-data/osx/AppIcon.icns\nCataclysm.dmg\n\n# Jetbrains CLion\n.idea/\n\n# test executables and generated data\n/tests/obj\n/tests/cata_test\n/tests/line_test\n/tests/map_iterator_test\n/tests/shadowcasting_test\n/tests/data/jsionized_overmap.sav\n/test_user_dir\nmonfactions.txt\n\n# temporary files generated by tools/reduce_tests.sh\n/list_of_tests\n/list_of_tests.ok\n/log\n/multidelta.log\n\n# static library used to link the test executable\ncataclysm.a\n\n# coredumps\n*.core\n\n# sublime-text workspace\n*.sublime-workspace\n\n# cppcheck\n*cppcheck.xml\n*.cppcheck\n\n# clang tooling\ncompile_commands.json\n.clangd\n\n# IDA database\nCataclysm.i64\nCataclysm.id*\nCataclysm.til\nCataclysm.nam\n\n# Snapcraft build directories\nprime\nsnap\nstage\n\n# Snapcraft build file\n*.snap\n\n# Eclipse IDE\n.cproject\n.settings/\n\n# Apple Xcode IDE\nXcode/\n\n# gdb\n.gdb_history\n\n# Flatpak build artifacts\n/.flatpak-builder/\n/repo/\n/build-dir/\n\n# precompiled headers\n/pch/pch.hpp.pch\n/pch/main-pch.hpp.gch\n/pch/main-pch.hpp.pch\n/tests/pch/pch.hpp.pch\n/tests/pch/tests-pch.hpp.gch\n/tests/pch/tests-pch.hpp.pch\n/tests/catch/catch.hpp.gch\n/tests/catch/catch.hpp.pch\ncities.output\nweather.output\n\n# bundler local directories and files for jekyll site\n/.bundle/\n/_site/\n/vendor/\n.sass-cache\n.jekyll-metadata\nGemfile.lock\n\n# VERSION.txt generated by our CMakeLists.txt\nVERSION.txt\n"
        },
        {
          "name": ".gitmessage",
          "type": "blob",
          "size": 0.34765625,
          "content": "# If this commit is applied, it will ....\n# |<-- Using around 50, Maximum 72 Characters -->|\n\n# Explain why this change is being made\n# |<----      Limit Each Line to a Maximum Of 72 Characters       ---->|\n\n# Provide links or keys to any relevant tickets, articles or other resources\n# Example: fixes #1234, closes #2345, resolves #3456, references #4567\n"
        },
        {
          "name": ".lgtm.yml",
          "type": "blob",
          "size": 0.2900390625,
          "content": "extraction:\n  cpp:\n    prepare:\n      packages:\n      - \"libncurses-dev\"\n    index:\n      build_command: \"make RELEASE=1 cataclysm -j2\"\n\n# Disable FIXME query, in DDA it is as likely to be a future feature as a bug.\nqueries:\n    - exclude: cpp/fixme-comment\n    - exclude: cpp/non-constant-format\n"
        },
        {
          "name": ".tx",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 17.2412109375,
          "content": "cmake_minimum_required(VERSION 3.20)\n\nproject(CataclysmDDA)\n\nlist(APPEND CMAKE_MODULE_PATH\n        ${CMAKE_SOURCE_DIR}/CMakeModules)\nif (NOT VCPKG_MANIFEST_MODE)\n    list(APPEND CMAKE_MODULE_PATH\n            ${CMAKE_SOURCE_DIR}/CMakeModules/Find)\nendif()\n\nset(CMAKE_TLS_VERIFY ON)\n\n# Build options\ninclude(CMakeDependentOption)\noption(TILES \"Build graphical tileset version.\" \"OFF\")\noption(CURSES \"Build curses version.\" \"ON\")\noption(SOUND \"Support for in-game sounds & music.\" \"OFF\")\noption(BACKTRACE \"Support for printing stack backtraces on crash\" \"ON\")\noption(LIBBACKTRACE \"Print backtrace with libbacktrace.\" \"OFF\")\noption(USE_XDG_DIR \"Use XDG directories for save and config files.\" \"OFF\")\noption(USE_HOME_DIR \"Use user's home directory for save and config files.\" \"ON\")\ncmake_dependent_option(USE_PREFIX_DATA_DIR\n    \"Use UNIX system directories for game data in release build.\" ON\n    \"UNIX\" OFF\n)\noption(LOCALIZE \"Support for language localizations. Also enable UTF support.\" \"ON\")\noption(LANGUAGES \"Compile localization files for specified languages.\" \"\")\noption(DYNAMIC_LINKING\n        \"Use dynamic linking. Or use static to remove MinGW dependency instead.\" \"ON\")\noption(JSON_FORMAT \"Build JSON formatter\" \"OFF\")\noption(CATA_CCACHE \"Try to find and build with ccache\" \"ON\")\noption(CATA_CLANG_TIDY_PLUGIN \"Build Cata's custom clang-tidy checks as a plugin\" \"OFF\")\noption(CATA_CLANG_TIDY_EXECUTABLE \"Build Cata's custom clang-tidy checks as an executable\" \"OFF\")\noption(TESTS \"Compile Cata's tests\" \"ON\")\nset(CATA_CLANG_TIDY_INCLUDE_DIR \"\" CACHE STRING\n        \"Path to internal clang-tidy headers required for plugin (e.g. ClangTidy.h)\")\nset(CATA_CHECK_CLANG_TIDY \"\" CACHE STRING \"Path to check_clang_tidy.py for plugin tests\")\nset(GIT_BINARY \"\" CACHE STRING \"Git binary name or path.\")\nset(GETTEXT_MSGFMT_BINARY \"\" CACHE FILEPATH \"msgfmt binary name or path.\")\n\nif (TESTS)\ninclude(CTest)\nendif()\n\nmessage(STATUS \"${PROJECT_NAME} build environment --\")\nmessage(STATUS \"Build realm is: ${CMAKE_SYSTEM_NAME} ${CMAKE_HOST_SYSTEM_PROCESSOR}\")\n\nget_property(GENERATOR_IS_MULTI_CONFIG GLOBAL\n    PROPERTY GENERATOR_IS_MULTI_CONFIG\n)\nif (NOT CMAKE_BUILD_TYPE AND NOT GENERATOR_IS_MULTI_CONFIG)\n    set(CMAKE_BUILD_TYPE Debug)\nendif ()\n\nadd_definitions(-DCMAKE)\n\n# Retrieve version from git into GIT_VERSION and creates VERSION.txt\nexecute_process(COMMAND ${CMAKE_COMMAND}\n    -DGIT_BINARY=${GIT_BINARY}\n    -P ${CMAKE_SOURCE_DIR}/src/version.cmake\n    ERROR_VARIABLE GIT_VERSION\n    ERROR_STRIP_TRAILING_WHITESPACE\n    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n)\n\nif (GIT_VERSION)\n    message(STATUS \"${PROJECT_NAME} build version is: ${GIT_VERSION}\")\n    add_definitions(-DGIT_VERSION)\nelse()\n    message(WARNING \"Git binary not found. Build version will be set to NULL. Install Git package\n    or use -DGIT_BINARY to set path to git binary.\")\n    set(VERSION \"NULL\")\nendif ()\n\n#OS Check Placeholders. Will be used for BINDIST\nif (\"${CMAKE_SYSTEM_NAME}\" MATCHES \"Linux\")\n    set(_OS_LINUX_ 1)\nendif ()\n\nif (\"${CMAKE_SYSTEM_NAME}\" MATCHES \"FreeBSD\"\n    OR \"${CMAKE_SYSTEM_NAME}\" MATCHES \"NetBSD\"\n    OR \"${CMAKE_SYSTEM_NAME}\" MATCHES \"OpenBSD\")\n    set(_OS_BSD_ 1)\nendif ()\n\nif (\"${CMAKE_SYSTEM_NAME}\" MATCHES \"Darwin\")\n    set(_OS_DARWIN_ 1)\n    add_definitions(-DMACOSX)\n    if (TILES)\n        add_definitions(-DOSX_SDL2_LIBS)\n    endif ()\nendif ()\n\ninclude(CheckCXXCompilerFlag)\n\nif(DEFINED ENV{MSYSTEM})\n    set(MSYS2 True)\n    add_definitions(-DMSYS2)\nendif()\n#FIXME: Add dest build choice: m32 for 32 bit or m64 for 64 bit version\n#add_definitions(\"-m32\")\n#SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -m32\")\n#SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m32\")\n#SET(CMAKE_SHARED_LIBRARY_C_FLAGS \"${CMAKE_SHARED_LIBRARY_C_FLAGS} -m32\")\n#SET(CMAKE_SHARED_LIBRARY_CXX_FLAGS \"${CMAKE_SHARED_LIBRARY_CXX_FLAGS} -m32\")\n\nfind_package(PkgConfig)\nif (NOT DYNAMIC_LINKING)\n    if(NOT MSVC)\n        set(CMAKE_FIND_LIBRARY_SUFFIXES \".a;.dll.a\")\n    endif()\n    set(BUILD_SHARED_LIBRARIES OFF)\n    check_cxx_compiler_flag (-static HAVE_STATIC_FLAG)\n    if (HAVE_STATIC_FLAG)\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static\")\n    endif ()\n    # Workaround for cmake link library guesser\n    set(CMAKE_EXE_LINK_DYNAMIC_C_FLAGS)       # remove -Wl,-Bdynamic\n    set(CMAKE_EXE_LINK_DYNAMIC_CXX_FLAGS)\n    set(CMAKE_SHARED_LIBRARY_C_FLAGS)         # remove -fPIC\n    set(CMAKE_SHARED_LIBRARY_CXX_FLAGS)\n    set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS)    # remove -rdynamic\n    set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS)\nelse ()\n    if (MINGW AND NOT \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n        # Avoid depending on MinGW runtime DLLs\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++\")\n    endif ()\nendif ()\n\nmessage(STATUS \"${PROJECT_NAME} build options --\")\n\n# Preset variables\nif (NOT LANGUAGES)\n    set(LANGUAGES ar cs da de el es_AR es_ES fil_PH fr ga_IE hu id is it_IT ja ko nb nl pl pt_BR ro\n    ru sr tr uk_UA zh_CN zh_TW)\nendif ()\n\nif (GIT_BINARY)\n    set(GIT_EXECUTABLE ${GIT_BINARY})\nelse ()\n    find_package(Git)\n    if (NOT GIT_FOUND)\n        message(WARNING\n            \"Git binary not found. Build version will be set to NULL. \\\n             Install Git package or use -DGIT_BINARY to set path to git binary.\")\n    endif ()\nendif ()\n\n# Can't compile curses and tiles build's at same time\nif (TILES)\n    set(CURSES OFF)\nendif ()\n\n# Can't use both home and xdg directories\nif (USE_XDG_DIR)\n    set(USE_HOME_DIR OFF)\nendif ()\n\n# Set build types and display info\nif (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"Debug\")\n    set(RELEASE 0)\n    message(STATUS \"Build ${PROJECT_NAME} in development mode --\")\n    message(STATUS \"Binaries will be located in: \" ${CMAKE_SOURCE_DIR})\n    set(CMAKE_VERBOSE_MAKEFILE ON)\n    # Since CataclysmDDA does not respect PREFIX for development builds\n    # and has funny path handlers, we should create resulting Binaries\n    # in the source directory\n    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR} CACHE PATH\n            \"Single Directory for all Executables.\")\n    set(CMAKE_INSTALL_BINDIR .)\nelse ()\n    set(RELEASE 1)\n    add_definitions(-DRELEASE)\n    # Use CMAKE_INSTALL_PREFIX as storage of data,gfx, etc.. Useful only on *nix OS.\n    if(USE_PREFIX_DATA_DIR)\n        if (\"${CMAKE_SYSTEM_NAME}\" MATCHES \"(Linux|FreeBSD|Darwin)\")\n            set(CMAKE_INSTALL_DATAROOTDIR \"${CMAKE_INSTALL_PREFIX}/share/cataclysm-dda\")\n            add_definitions(-DPREFIX=${CMAKE_INSTALL_PREFIX})\n            configure_file(\n                \"${CMAKE_SOURCE_DIR}/src/prefix.h.in\"\n                \"${CMAKE_SOURCE_DIR}/src/prefix.h\"\n                @ONLY)\n            add_definitions(-DDATA_DIR_PREFIX)\n        endif ()\n    else()\n        set(CMAKE_INSTALL_DATADIR   data)\n        set(CMAKE_INSTALL_DOCDIR    .   )\n        set(CMAKE_INSTALL_LOCALEDIR lang)\n        set(CMAKE_INSTALL_BINDIR    .   )\n    endif ()\n    message(STATUS \"CMAKE_INSTALL_PREFIX          : ${CMAKE_INSTALL_PREFIX}\")\n    message(STATUS \"CMAKE_INSTALL_BINDIR          : ${CMAKE_INSTALL_BINDIR}\")\n    if (LOCALIZE)\n        message(STATUS \"CMAKE_INSTALL_LOCALEDIR       : ${CMAKE_INSTALL_LOCALEDIR}\")\n    endif ()\n    message(STATUS \"DESKTOP_ENTRY_PATH            : ${DESKTOP_ENTRY_PATH}\")\n    message(STATUS \"PIXMAPS_ENTRY_PATH            : ${PIXMAPS_ENTRY_PATH}\")\n    message(STATUS \"PIXMAPS_UNITY_ENTRY_PATH      : ${PIXMAPS_UNITY_ENTRY_PATH}\")\n    message(STATUS \"MANPAGE_ENTRY_PATH            : ${MANPAGE_ENTRY_PATH}\")\nendif ()\n\nmessage(STATUS \"GIT_BINARY                    : ${GIT_EXECUTABLE}\")\nmessage(STATUS \"DYNAMIC_LINKING               : ${DYNAMIC_LINKING}\")\nmessage(STATUS \"TILES                         : ${TILES}\")\nmessage(STATUS \"CURSES                        : ${CURSES}\")\nmessage(STATUS \"SOUND                         : ${SOUND}\")\nmessage(STATUS \"BACKTRACE                     : ${BACKTRACE}\")\nmessage(STATUS \"LOCALIZE                      : ${LOCALIZE}\")\nmessage(STATUS \"USE_XDG_DIR                   : ${USE_XDG_DIR}\")\nmessage(STATUS \"USE_HOME_DIR                  : ${USE_HOME_DIR}\")\nmessage(STATUS \"LANGUAGES                     : ${LANGUAGES}\")\nmessage(STATUS \"See doc/COMPILING/COMPILING-CMAKE.md for details and more info --\")\n\nif (NOT MSVC)\n    set(CATA_WARNINGS\n            \"-Werror -Wall -Wextra \\\n             -Wformat-signedness \\\n             -Wlogical-op \\\n             -Wmissing-declarations \\\n             -Wmissing-noreturn \\\n             -Wnon-virtual-dtor \\\n             -Wold-style-cast \\\n             -Woverloaded-virtual \\\n             -Wpedantic \\\n             -Wsuggest-override \\\n             -Wunused-macros \\\n             -Wzero-as-null-pointer-constant \\\n             -Wno-unknown-warning-option \\\n             -Wno-dangling-reference \\\n             -Wno-c++20-compat\")\n    if(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n        set(CATA_WARNINGS \"${CATA_WARNINGS} -Wno-unknown-warning-option\")\n    else()\n        set(CATA_WARNINGS \"${CATA_WARNINGS} -Wno-unknown-warning\")\n    endif()\n    if (NOT \"${CMAKE_SYSTEM_NAME}\" MATCHES \"Windows\")\n        set(CATA_WARNINGS \"${CATA_WARNINGS} -Wredundant-decls\")\n    endif ()\n    set(CATA_OTHER_FLAGS \"${CATA_OTHER_FLAGS} -fsigned-char -g1\")\n    # Compact the whitespace in the warning string\n    string(REGEX REPLACE \"[\\t ]+\" \" \" CATA_WARNINGS \"${CATA_WARNINGS}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CATA_WARNINGS} ${CATA_OTHER_FLAGS}\")\n    set(CMAKE_CXX_FLAGS_DEBUG \"-Og -g2\")\nendif ()\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# Force out-of-source build\nif (\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_BINARY_DIR}\")\n    message(FATAL_ERROR\n            \"This project requires an out of source build. \\\n             Remove the file 'CMakeCache.txt' found in this directory before continuing; \\\n             create a separate build directory and run 'cmake [options] <srcs>' from there. \\\n             See doc/COMPILING/COMPILING-CMAKE.md for details and more info.\")\nendif ()\n\n#set(THREADS_USE_PTHREADS_WIN32 True)\nset(CMAKE_THREAD_PREFER_PTHREAD True)\nfind_package(Threads REQUIRED)\n\nfind_package(ZLIB REQUIRED)\n\n# Check for build types and libraries\nif (TILES)\n    # Find SDL, SDL_ttf & SDL_image for graphical install\n    message(STATUS \"Searching for SDL2 library --\")\n    if (NOT CMAKE_FIND_PACKAGE_PREFER_CONFIG)\n        set(CMAKE_FIND_PACKAGE_PREFER_CONFIG ON)\n        # ^^ Use sdl2-config.cmake provided by the system or VCPKG\n        find_package(SDL2)\n        if(NOT SDL2_FOUND)\n            # Use our CMakeModules/Find/FindSDL2.cmake\n            set(CMAKE_FIND_PACKAGE_PREFER_CONFIG OFF)\n            find_package(SDL2)\n        endif()\n        set(CMAKE_FIND_PACKAGE_PREFER_CONFIG OFF)\n    endif()\n    if (NOT (SDL2_FOUND OR TARGET SDL2::SDL2 OR TARGET SDL2::SDL2-static))\n        message(FATAL_ERROR\n                \"This project requires SDL2 to be installed to compile in graphical mode.  \\\n                 Please install the SDL2 development libraries, \\\n                 or try compiling without -DTILES=1 for a text-only compilation. \\\n                 See doc/COMPILING/COMPILING-CMAKE.md for details and more info.\")\n    endif ()\n\n    message(STATUS \"Searching for SDL2_TTF library --\")\n    find_package(SDL2_ttf)\n    if (NOT (SDL2_TTF_FOUND OR TARGET SDL2::SDL2_ttf OR TARGET SDL2_ttf::SDL2_ttf-static))\n        message(FATAL_ERROR\n                \"This project requires SDL2_ttf to be installed to compile in graphical mode. \\\n                 Please install the SDL2_ttf development libraries, \\\n                 or try compiling without -DTILES=1 for a text-only compilation. \\\n                 See doc/COMPILING/COMPILING-CMAKE.md for details and more info.\")\n    endif ()\n\n    message(STATUS \"Searching for SDL2_image library --\")\n    find_package(SDL2_image)\n    if (NOT (SDL2_IMAGE_FOUND OR TARGET SDL2::SDL2_image OR TARGET SDL2_image::SDL2_image-static))\n        message(FATAL_ERROR\n                \"This project requires SDL2_image to be installed to compile in graphical mode. \\\n                 Please install the SDL2_image development libraries, \\\n                 or try compiling without -DTILES=1 for a text-only compilation. \\\n                 See doc/COMPILING/COMPILING-CMAKE.md for details and more info.\")\n    endif ()\n    add_definitions(-DTILES)\nendif ()\n\nif (CURSES)\n    # Find the ncurses library for a text based compile\n    message(STATUS \"Searching for Curses library --\")\n    set(CURSES_NEED_NCURSES TRUE)\n    set(CURSES_NEED_WIDE TRUE)\n    if (WIN32 AND VCPKG_MANIFEST_MODE)\n        find_package(unofficial-pdcurses CONFIG)\n        if(TARGET unofficial::pdcurses::pdcurses)\n            get_target_property(_IMPORTED_CONFIGURATIONS unofficial::pdcurses::pdcurses\n                IMPORTED_CONFIGURATIONS\n            )\n            if (RELEASE AND \"Release\" IN_LIST _IMPORTED_CONFIGURATIONS)\n                get_target_property(_IMPORTED_LOCATION unofficial::pdcurses::pdcurses\n                IMPORTED_IMPLIB_RELEASE)\n            elseif(\"Debug\" IN_LIST _IMPORTED_CONFIGURATIONS)\n                get_target_property(_IMPORTED_LOCATION unofficial::pdcurses::pdcurses\n                IMPORTED_IMPLIB_DEBUG)\n            endif()\n            set_target_properties(unofficial::pdcurses::pdcurses PROPERTIES\n                IMPORTED_LOCATION ${_IMPORTED_LOCATION})\n            set(USE_PDCURSES TRUE)\n        endif()\n    elseif(MSYS2)\n        if(True) # GNU NCURSES: mingw-w64-ucrt-x86_64-ncurses\n            add_library(pdcurses STATIC IMPORTED)\n            set_target_properties(pdcurses PROPERTIES\n                IMPORTED_LOCATION $ENV{MSYSTEM_PREFIX}/lib/libncursesw.a\n                INTERFACE_INCLUDE_DIRECTORIES $ENV{MSYSTEM_PREFIX}/include/ncursesw\n            )\n            set(USE_PDCURSES FALSE)\n        else() # PDCursesMOD: mingw-w64-ucrt-x86_64-pdcurses\n            add_library(pdcurses STATIC IMPORTED)\n            set_target_properties(pdcurses PROPERTIES\n                IMPORTED_LOCATION $ENV{MSYSTEM_PREFIX}/lib/libpdcurses_wingui.a\n                INTERFACE_INCLUDE_DIRECTORIES $ENV{MSYSTEM_PREFIX}/include/pdcurses\n                INTERFACE_COMPILE_DEFINITIONS\n                \"PDC_WIDE;PDC_FORCE_UTF8;PDC_NCMOUSE;PDC_RGB;CHTYPE_32\"\n            )\n            set(USE_PDCURSES TRUE)\n        endif()\n        set(CURSES_FOUND True)\n    else ()\n        find_package(Curses)\n    endif ()\n    if (NOT (CURSES_FOUND OR TARGET unofficial::pdcurses::pdcurses))\n        message(FATAL_ERROR\n                \"This project requires ncurses to be installed to be compiled in text-only mode. \\\n                 Please install the ncurses development libraries, \\\n                 or try compiling with -DTILES=1 for a graphical compilation. \\\n                 See doc/COMPILING/COMPILING-CMAKE.md for details and more info\")\n    endif ()\n    if (NOT DYNAMIC_LINKING)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DNCURSES_STATIC\")\n    endif ()\nendif ()\n\nif (SOUND)\n    # Sound requires SDL_mixer library\n    message(STATUS \"Searching for SDL2_mixer library --\")\n    find_package(SDL2_mixer)\n    if (NOT (SDL2_MIXER_FOUND OR TARGET SDL2_mixer::SDL2_mixer\n                              OR TARGET SDL2_mixer::SDL2_mixer-static))\n        message(FATAL_ERROR\n                \"You need the SDL2_mixer development library \\\n                    to be able to compile with sound enabled. \\\n                    See doc/COMPILING/COMPILING-CMAKE.md for details and more info.\")\n    endif()\nendif ()\n\nif (BACKTRACE)\n    add_definitions(-DBACKTRACE)\n    if (LIBBACKTRACE)\n        add_definitions(-DLIBBACKTRACE)\n    endif ()\n    if (_OS_BSD_)\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -lexecinfo\")\n    endif ()\nendif ()\n\nif ((LOCALIZE OR BUILD_TESTING) AND \"${GETTEXT_MSGFMT_BINARY}\" STREQUAL \"\")\n    if(MSVC)\n        list(APPEND Gettext_ROOT C:\\\\msys64\\\\usr)\n        list(APPEND Gettext_ROOT C:\\\\Program\\ Files\\\\Git\\\\usr)\n    endif(MSVC)\n    find_package(Gettext)\nendif ()\nif (NOT GETTEXT_MSGFMT_EXECUTABLE )\n    set(GETTEXT_MSGFMT_EXECUTABLE \"${GETTEXT_MSGFMT_BINARY}\")\nendif()\n\n# Ok. Now create build and install recipes\nif (LOCALIZE)\n    add_subdirectory(lang)\n    add_definitions(-DLOCALIZE)\nendif ()\n\nif (USE_HOME_DIR)\n    add_definitions(-DUSE_HOME_DIR)\nendif ()\n\nif (USE_XDG_DIR)\n    add_definitions(-DUSE_XDG_DIR)\nendif ()\n\nfind_program(CCACHE_FOUND ccache)\nif (CCACHE_FOUND AND CATA_CCACHE)\n    set(CMAKE_C_COMPILER_LAUNCHER ccache)\n    set(CMAKE_CXX_COMPILER_LAUNCHER ccache)\n    set(CMAKE_C_LINKER_LAUNCHER ccache)\n    set(CMAKE_CXX_LINKER_LAUNCHER ccache)\nendif ()\n\nadd_subdirectory(src)\nadd_subdirectory(data)\nif (NOT MSVC)\n    add_subdirectory(src/chkjson)\nendif()\n\nif(TESTS)\n    add_subdirectory(tests)\nendif()\n\nif (JSON_FORMAT)\n    add_subdirectory(tools/format)\nendif()\nif (CATA_CLANG_TIDY_PLUGIN OR CATA_CLANG_TIDY_EXECUTABLE)\n    add_subdirectory(tools/clang-tidy-plugin)\nendif()\n\ninstall(DIRECTORY doc TYPE DOC)\n\nif (RELEASE)\n    install(FILES\n        ${CMAKE_SOURCE_DIR}/README.md\n        ${CMAKE_SOURCE_DIR}/LICENSE.txt\n        ${CMAKE_SOURCE_DIR}/LICENSE-OFL-Terminus-Font.txt\n        ${CMAKE_SOURCE_DIR}/VERSION.txt\n        TYPE DOC)\n    if (TILES)\n        if (USE_PREFIX_DATA_DIR)\n            install(DIRECTORY ${CMAKE_SOURCE_DIR}/gfx\n                TYPE DATA)\n        else()\n            install(DIRECTORY ${CMAKE_SOURCE_DIR}/gfx\n                DESTINATION .)\n        endif()\n    endif()\nendif()\n\nconfigure_file(\n        \"${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in\"\n        \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"\n        IMMEDIATE @ONLY)\n\nadd_custom_target(uninstall\n        \"${CMAKE_COMMAND}\"\n        -P \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\")\n\n"
        },
        {
          "name": "CMakeModules",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 6.228515625,
          "content": "{\n  \"version\": 2,\n  \"cmakeMinimumRequired\": {\n    \"major\": 3,\n    \"minor\": 20,\n    \"patch\": 0\n  },\n  \"configurePresets\": [\n    {\n      \"name\": \"windows-x64\",\n      \"binaryDir\": \"${sourceDir}/out/build/${presetName}\",\n      \"displayName\": \"Windows x64 MSYS2 (MinGW)\",\n      \"description\": \"Target Windows (64-bit) with the MingGW Win64 development environment.\",\n      \"generator\": \"Ninja Multi-Config\",\n      \"cacheVariables\": {\n        \"DYNAMIC_LINKING\": \"False\",\n        \"CURSES\": \"True\", \"LOCALIZE\": \"True\", \"TILES\": \"False\", \"SOUND\": \"False\", \"TESTS\": \"True\",\n        \"CMAKE_INSTALL_MESSAGE\": \"NEVER\"\n      }\n    },\n    {\n      \"name\": \"windows-x64-msvc\",\n      \"binaryDir\": \"${sourceDir}/out/build/${presetName}\",\n      \"displayName\": \"Windows x64 MSVC\",\n      \"description\": \"Target Windows (64-bit) with the Visual Studio development environment.\",\n      \"generator\": \"Visual Studio 17 2022\",\n      \"environment\": {\n        \"VCPKG_ROOT\": \"C:/vcpkg\"\n      },\n      \"cacheVariables\": {\n        \"DYNAMIC_LINKING\": \"False\",\n        \"CURSES\": \"True\", \"LOCALIZE\": \"True\", \"TILES\": \"False\", \"SOUND\": \"False\", \"TESTS\": \"True\",\n        \"CMAKE_PROJECT_INCLUDE_BEFORE\": \"${sourceDir}/build-scripts/windows-tiles-sounds-x64-msvc.cmake\",\n        \"CMAKE_TOOLCHAIN_FILE\": \"${sourceDir}/build-scripts/MSVC.cmake\",\n        \"VCPKG_TARGET_TRIPLET\": \"x64-windows-static\",\n        \"CMAKE_INSTALL_MESSAGE\": \"NEVER\"\n      }\n    },\n    {\n      \"name\": \"windows-tiles-sounds-x64\",\n      \"binaryDir\": \"${sourceDir}/out/build/${presetName}\",\n      \"displayName\": \"Windows Tiles Sounds x64 MSYS2 (MinGW)\",\n      \"description\": \"Target Windows (64-bit) with the MingGW Win64 development environment.\",\n      \"generator\": \"Ninja Multi-Config\",\n      \"cacheVariables\": {\n        \"DYNAMIC_LINKING\": \"False\",\n        \"CURSES\": \"False\", \"LOCALIZE\": \"True\", \"TILES\": \"True\", \"SOUND\": \"True\", \"TESTS\": \"True\",\n        \"CMAKE_INSTALL_MESSAGE\": \"NEVER\"\n      }\n    },\n    {\n      \"name\": \"windows-tiles-sounds-x64-msvc\",\n      \"binaryDir\": \"${sourceDir}/out/build/${presetName}\",\n      \"displayName\": \"Windows Tiles Sounds x64 MSVC\",\n      \"description\": \"Target Windows (64-bit) with the Visual Studio development environment.\",\n      \"generator\": \"Visual Studio 17 2022\",\n      \"inherits\": \"windows-tiles-sounds-x64\",\n      \"environment\": {\n        \"VCPKG_ROOT\": \"C:/vcpkg\"\n      },\n      \"cacheVariables\": {\n        \"CMAKE_PROJECT_INCLUDE_BEFORE\": \"${sourceDir}/build-scripts/${presetName}.cmake\",\n        \"CMAKE_TOOLCHAIN_FILE\": \"${sourceDir}/build-scripts/MSVC.cmake\",\n        \"VCPKG_TARGET_TRIPLET\": \"x64-windows-static\"\n      }\n    },\n    {\n      \"name\": \"windows-tiles-sounds-x64-clang-cl\",\n      \"binaryDir\": \"${sourceDir}/out/build/${presetName}\",\n      \"displayName\": \"Windows Tiles Sounds x64 ClangCL\",\n      \"description\": \"Target Windows (64-bit) with the ClangCL development environment.\",\n      \"inherits\": \"windows-tiles-sounds-x64-msvc\",\n      \"toolset\": \"CLangCL\",\n      \"environment\": {\n        \"CXXFLAGS\": \"-ftime-trace\"\n      },\n      \"cacheVariables\": {\n        \"CMAKE_PROJECT_INCLUDE_BEFORE\": \"$env{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake\",\n        \"CMAKE_TOOLCHAIN_FILE\": null,\n        \"VCPKG_MANIFEST_DIR\": \"${sourceDir}/msvc-full-features\",\n        \"VCPKG_APPLOCAL_DEPS\": \"False\"\n      }\n    },\n    {\n      \"name\": \"linux-x64\",\n      \"binaryDir\": \"${sourceDir}/out/build/${presetName}\",\n      \"displayName\": \"Linux x64\",\n      \"description\": \"Target Linux (64-bit) with the GCC development environment.\",\n      \"generator\": \"Ninja Multi-Config\",\n      \"cacheVariables\": {\n        \"DYNAMIC_LINKING\": \"True\",\n        \"CURSES\": \"True\", \"LOCALIZE\": \"True\", \"TILES\": \"False\", \"SOUND\": \"False\", \"TESTS\": \"True\",\n        \"CMAKE_INSTALL_MESSAGE\": \"NEVER\"\n      }\n    },\n    {\n      \"name\": \"linux-tiles-sounds-x64\",\n      \"binaryDir\": \"${sourceDir}/out/build/${presetName}\",\n      \"displayName\": \"Linux Tiles Sounds x64\",\n      \"description\": \"Target Linux (64-bit) with the GCC development environment.\",\n      \"generator\": \"Ninja Multi-Config\",\n      \"cacheVariables\": {\n        \"DYNAMIC_LINKING\": \"True\",\n        \"CURSES\": \"False\", \"LOCALIZE\": \"True\", \"TILES\": \"True\", \"SOUND\": \"True\", \"TESTS\": \"True\",\n        \"CMAKE_INSTALL_MESSAGE\": \"NEVER\"\n      }\n    },\n    {\n      \"name\": \"linux-tiles-sounds-x64-vcpkg\",\n      \"inherits\": [\"linux-tiles-sounds-x64\"],\n      \"displayName\": \"Linux Tiles Sounds x64 VCPKG\",\n      \"description\": \"Target Linux (64-bit) with the GCC development environment and VCPKG.\",\n      \"generator\": \"Ninja Multi-Config\",\n      \"environment\": {\n        \"VCPKG_ROOT\": \"/usr/local/vcpkg\"\n      },\n      \"cacheVariables\": {\n        \"CMAKE_TOOLCHAIN_FILE\": \"$env{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake\",\n        \"VCPKG_TARGET_TRIPLET\": \"x64-linux\",\n        \"VCPKG_MANIFEST_DIR\": \"${sourceDir}/msvc-full-features/\"\n      }\n    }\n  ],\n  \"buildPresets\": [\n    {\n      \"name\": \"windows-x64\",\n      \"configurePreset\": \"windows-x64\",\n      \"configuration\":  \"RelWithDebInfo\"\n    },\n    {\n      \"name\": \"windows-x64-msvc\",\n      \"configurePreset\": \"windows-x64-msvc\",\n      \"configuration\": \"RelWithDebInfo\"\n    },\n    {\n      \"name\": \"windows-tiles-sounds-x64\",\n      \"configurePreset\": \"windows-tiles-sounds-x64\",\n      \"configuration\":  \"RelWithDebInfo\"\n    },\n    {\n      \"name\": \"linux-x64\",\n      \"configurePreset\": \"linux-x64\",\n      \"configuration\": \"RelWithDebInfo\"\n    },\n    {\n      \"name\": \"linux-tiles-sounds-x64\",\n      \"configurePreset\": \"linux-tiles-sounds-x64\",\n      \"configuration\":  \"RelWithDebInfo\"\n    },\n    {\n      \"name\": \"linux-tiles-sounds-x64-vcpkg\",\n      \"configurePreset\": \"linux-tiles-sounds-x64-vcpkg\"\n    },\n    {\n      \"name\": \"windows-tiles-sounds-x64-msvc\",\n      \"configurePreset\": \"windows-tiles-sounds-x64-msvc\",\n      \"configuration\": \"RelWithDebInfo\"\n    },\n    {\n      \"name\": \"windows-tiles-sounds-x64-clang-cl\",\n      \"configurePreset\": \"windows-tiles-sounds-x64-clang-cl\",\n      \"configuration\": \"RelWithDebInfo\",\n      \"environment\": {\n        \"UseMultiToolTask\":  \"true\"\n      }\n    }\n  ],\n  \"testPresets\": [\n    {\n      \"name\": \"windows-tiles-sounds-x64-msvc\",\n      \"configurePreset\": \"windows-tiles-sounds-x64-msvc\",\n      \"configuration\": \"RelWithDebInfo\"\n    },\n    {\n      \"name\": \"linux-tiles-sounds-x64\",\n      \"configurePreset\": \"linux-tiles-sounds-x64\",\n      \"configuration\": \"RelWithDebInfo\"\n    }\n  ]\n}\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.814453125,
          "content": "## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\n1. Assume other participants are posting in good faith, even if you disagree with what they say.\n2. Make an effort to treat other participants with respect.\n    1. Do not take a harsh tone towards other participants, and especially don't make personal attacks against them.\n    2. Recognize that criticism of your statements is not a personal attack on you.\n    3. Avoid statements about the presumed typical desires, capabilities or actions of some demographic group.\n3. Be especially kind to other contributors when saying they made a mistake.\n4. Don't argue unceasingly for your preferred course of action when a decision for some other course has already been made.\n5. If other participants complain about the way you express your ideas, please make an effort to cater to them.\n6. Don't raise unrelated political issues.\n7. If you feel these standards are being violated, please alert the project lead Kevin Granade at kevin.granade@gmail.com\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][CoC homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][CoC version] and the [GNU Kind Communications Guidelines][GKCG homepage].\n\n\n[CoC homepage]: http://contributor-covenant.org\n[CoC version]: http://contributor-covenant.org/version/1/4/\n[GKCG homepage]: https://www.gnu.org/philosophy/kind-communication.html\n"
        },
        {
          "name": "Cataclysm-DDA.sublime-project",
          "type": "blob",
          "size": 1.375,
          "content": "{\n\t\"build_systems\":\n\t[\n\t\t{\n\t\t\t\"cmd\":\n\t\t\t[\n\t\t\t\t\"make\",\n\t\t\t\t\"USE_HOME_DIR=1\",\n\t\t\t\t\"CLANG=1\",\n\t\t\t\t\"CCACHE=1\",\n\t\t\t\t\"RELEASE=1\"\n\t\t\t],\n\t\t\t\"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",\n\t\t\t\"name\": \"make RELEASE\",\n\t\t\t\"working_dir\": \"${folder:${project_path:${file_path}}}\"\n\t\t},\n\t\t{\n\t\t\t\"cmd\":\n\t\t\t[\n\t\t\t\t\"make\",\n\t\t\t\t\"USE_HOME_DIR=1\",\n\t\t\t\t\"CLANG=1\",\n\t\t\t\t\"CCACHE=1\"\n\t\t\t],\n\t\t\t\"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",\n\t\t\t\"name\": \"make\",\n\t\t\t\"working_dir\": \"${folder:${project_path:${file_path}}}\"\n\t\t},\n\t\t{\n\t\t\t\"cmd\":\n\t\t\t[\n\t\t\t\t\"make\",\n\t\t\t\t\"USE_HOME_DIR=1\",\n\t\t\t\t\"CLANG=1\",\n\t\t\t\t\"CCACHE=1\",\n\t\t\t\t\"TILES=1\"\n\t\t\t],\n\t\t\t\"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",\n\t\t\t\"name\": \"make TILES\",\n\t\t\t\"working_dir\": \"${folder:${project_path:${file_path}}}\"\n\t\t},\n\t\t{\n\t\t\t\"cmd\":\n\t\t\t[\n\t\t\t\t\"make\",\n\t\t\t\t\"USE_HOME_DIR=1\",\n\t\t\t\t\"CLANG=1\",\n\t\t\t\t\"CCACHE=1\",\n\t\t\t\t\"TILES=1\",\n\t\t\t\t\"RELEASE=1\"\n\t\t\t],\n\t\t\t\"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",\n\t\t\t\"name\": \"make RELEASE TILES\",\n\t\t\t\"working_dir\": \"${folder:${project_path:${file_path}}}\"\n\t\t}\n\t],\n\t\"folders\":\n\t[\n\t\t{\n\t\t\t\"folder_exclude_patterns\":\n\t\t\t[\n\t\t\t\t\"Cataclysm.app\"\n\t\t\t],\n\t\t\t\"path\": \".\"\n\t\t},\n\t\t{\n\t\t\t\"path\": \"~/.cataclysm-dda\"\n\t\t},\n\t\t{\n\t\t\t\"path\": \"~/Library/Application Support/Cataclysm\"\n\t\t}\n\t],\n\t\"settings\":\n\t{\n\t\t\"AStyleFormatter\":\n\t\t{\n\t\t\t\"options_c++\":\n\t\t\t{\n\t\t\t\t\"additional_options_file\": \".astylerc\",\n\t\t\t\t\"use_only_additional_options\": true\n\t\t\t}\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "ISSUES.md",
          "type": "blob",
          "size": 3.8125,
          "content": "# Issues\n\n## How to create new issues properly\n\nGitHub issues are used for everything from bug reporting to suggesting long-term ideas. You can make everything run much smoother by following some simple rules.\n\n### Rule zero\n\nAlways give your issue a meaningful title as this is the first thing anyone will see.\n\nNote: `[CR]` and `[WIP]` \"tags\" are meaningful only for PRs. All open issues by definition are request for comments and work in progress.\n\n### Bug reports\n\nBefore you submit a bug always search the current list of issues to see if it has been reported already.\n\nYour bug report has to include:\n\n- On what OS did you experience the problem (Windows, Linux, OS X etc.)\n- What version were you playing:\n - Tiles or Curses (text-based)\n - Version string (preferably full version e.g. \"0.C-4547-g3f1c109\", or Jenkins build number e.g. 3245)\n- Description of the problem written in a way that enables anyone to try and recreate it\n\nYour bug report may include:\n\n- Screenshot(s) as some things are best explained visually\n- Save file (e.g. link to a dropbox upload)\n\nBonus points for:\n\n- Checking if the bug exists under latest experimental build\n- Checking if it is OS specific\n\nThe OS and CDDA version are very important - with the pace of changes here it is possible the bug you have encountered has already been fixed. After that reproducibility is the key, so write your report with all the necessary details.\n\n### Enhancements and addition ideas\n\nWe have hundreds of issues open - most of them are ideas and suggestions. If you have a general idea or anything that can't be easily described in terms of *current* code changes you'd be better off suggesting it in the appropriate section of [the forum](https://discourse.cataclysmdda.org/). You'll also get much broader exposure for your idea there. After developing a polished idea on the forum, it should be easy to make a GitHub issue for it.\n\nPlease first search if something like what you have on mind has been already proposed. If so, feel free to join the discussion! If your idea is related but sufficiently different, open a new issue and refer to the older discussion (use GitHub's `#issue_number` reference system).\n\nRemember to take part in the discussion of your suggestions.\n\n### Labels\n\nYou can update issues with labels using comment-commands. First, open a PR adding your username to a list of allowed users [here](.github/comment-commands.yml), under the `active` section. Then you can add labels to issues, such as marking them confirmed with `/confirmed`, or requesting help with `/help-wanted`. A list of comments you can use is under the `keywords` section [here](.github/comment-commands.yml), and what each of these comment-commands do is described [here](.github/workflows/comment-commands.yml).\n\n### Questions\n\nYou should direct your questions to the forum or ask on IRC. You should also read the included documentation and additional text files, e.g. [COMPILING.md](doc/COMPILING/COMPILING.md) if you have problems building.\n\n## Bounties\n\nPlacing a bounty *does not* necessarily mean that change will be incorporated into the main game. Please coordinate in the issue you intend to place a bounty on to determine if it is a change the project will accept, and keep in mind that placing a bounty will not confer special status on the issue. A good way of thinking about bounties is as encouragement for contributors to work on a particular issue, and certainly not as \"paying for features\".\n\n## Issue resolution\n\nWe do not assign people to issues. If you plan to work on a bug fix or a validated idea feel free to just comment about that. Actual PRs are of much greater value than any assignments. In general the first correct PR about something will be the PR that will get merged, but remember: we are using Git - you can collaborate with someone else easily by sending them patches or PRs against their PR branch.\n"
        },
        {
          "name": "LICENSE-Apache-Robot-Font.txt",
          "type": "blob",
          "size": 8.9384765625,
          "content": "Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\n    You must give any other recipients of the Work or Derivative Works a copy of this License; and\n    You must cause any modified files to carry prominent notices stating that You changed the files; and\n    You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n    If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\n\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE-OFL-Terminus-Font.txt",
          "type": "blob",
          "size": 4.4326171875,
          "content": "Copyright (C) 2020 Dimitar Toshkov Zhekov,\nwith Reserved Font Name \"Terminus Font\".\n\nCopyright (c) 2017 tisimst\nwith Reserved Font Name \"Vecterminus\"\n\nCopyright (c) 2011-2023 Tilman Blumenbach,\nwith Reserved Font Name \"Terminus (TTF)\".\n\nThis Font Software is licensed under the SIL Open Font License, Version 1.1.\nThis license is copied below, and is also available with a FAQ at:\nhttp://scripts.sil.org/OFL\n\n\n-----------------------------------------------------------\nSIL OPEN FONT LICENSE Version 1.1 - 26 February 2007\n-----------------------------------------------------------\n\nPREAMBLE\nThe goals of the Open Font License (OFL) are to stimulate worldwide\ndevelopment of collaborative font projects, to support the font creation\nefforts of academic and linguistic communities, and to provide a free and\nopen framework in which fonts may be shared and improved in partnership\nwith others.\n\nThe OFL allows the licensed fonts to be used, studied, modified and\nredistributed freely as long as they are not sold by themselves. The\nfonts, including any derivative works, can be bundled, embedded, \nredistributed and/or sold with any software provided that any reserved\nnames are not used by derivative works. The fonts and derivatives,\nhowever, cannot be released under any other type of license. The\nrequirement for fonts to remain under this license does not apply\nto any document created using the fonts or their derivatives.\n\nDEFINITIONS\n\"Font Software\" refers to the set of files released by the Copyright\nHolder(s) under this license and clearly marked as such. This may\ninclude source files, build scripts and documentation.\n\n\"Reserved Font Name\" refers to any names specified as such after the\ncopyright statement(s).\n\n\"Original Version\" refers to the collection of Font Software components as\ndistributed by the Copyright Holder(s).\n\n\"Modified Version\" refers to any derivative made by adding to, deleting,\nor substituting -- in part or in whole -- any of the components of the\nOriginal Version, by changing formats or by porting the Font Software to a\nnew environment.\n\n\"Author\" refers to any designer, engineer, programmer, technical\nwriter or other person who contributed to the Font Software.\n\nPERMISSION & CONDITIONS\nPermission is hereby granted, free of charge, to any person obtaining\na copy of the Font Software, to use, study, copy, merge, embed, modify,\nredistribute, and sell modified and unmodified copies of the Font\nSoftware, subject to the following conditions:\n\n1) Neither the Font Software nor any of its individual components,\nin Original or Modified Versions, may be sold by itself.\n\n2) Original or Modified Versions of the Font Software may be bundled,\nredistributed and/or sold with any software, provided that each copy\ncontains the above copyright notice and this license. These can be\nincluded either as stand-alone text files, human-readable headers or\nin the appropriate machine-readable metadata fields within text or\nbinary files as long as those fields can be easily viewed by the user.\n\n3) No Modified Version of the Font Software may use the Reserved Font\nName(s) unless explicit written permission is granted by the corresponding\nCopyright Holder. This restriction only applies to the primary font name as\npresented to the users.\n\n4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font\nSoftware shall not be used to promote, endorse or advertise any\nModified Version, except to acknowledge the contribution(s) of the\nCopyright Holder(s) and the Author(s) or with their explicit written\npermission.\n\n5) The Font Software, modified or unmodified, in part or in whole,\nmust be distributed entirely under this license, and must not be\ndistributed under any other license. The requirement for fonts to\nremain under this license does not apply to any document created\nusing the Font Software.\n\nTERMINATION\nThis license becomes null and void if any of the above conditions are\nnot met.\n\nDISCLAIMER\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\nOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nINCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM\nOTHER DEALINGS IN THE FONT SOFTWARE.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 2.98046875,
          "content": "Cataclysm is licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/ or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.\n\nGNU Unifont (data/font/unifont.ttf) is licensed under SIL Open Font License version 1.1 and GNU General Public License v2+ with the GNU font embedding exception. Visit http://unifoundry.com/LICENSE.txt for details.\n\nTerminus Font (data/font/terminus.ttf) is licensed under the SIL Open Font License (see LICENSE-OFL-Terminus-Font.txt).\n\nVecterminus Font (data/font/VecTerminus12Medium.otf) is licensed under the SIL Open Font License (see LICENSE-OFL-Terminus-Font.txt).\n\nRobot font (data/font/Roboto-Medium.tt) is licensed under the Apache License, version 2.0 (see LICENSE-Apache-Roboto-Font.txt).\n\nCATCH unit-test framework (tests/catch/catch.hpp) is licensed under the Boost Software License. Visit https://github.com/philsquared/Catch/blob/master/LICENSE.txt to read the license.\n\nPLF List and PLF Colony (src/list.h, src/colony.h) are licensed under the zLib license (https://www.zlib.net/zlib_license.html).\n\ngetpost (tools/json_tools/format/getpost.h) is licensed under the MIT license, see file for text of license.\n\ngulrak filesystem (src/third-party/ghc/*) is licensed under the MIT license, see file for text of license.\n\nlibbacktrace is licensed under a BSD license (https://github.com/ianlancetaylor/libbacktrace/blob/master/LICENSE). The full license text is as follows:\n\n# Copyright (C) 2012-2016 Free Software Foundation, Inc.\n\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are\n# met:\n\n#     (1) Redistributions of source code must retain the above copyright\n#     notice, this list of conditions and the following disclaimer. \n\n#     (2) Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in\n#     the documentation and/or other materials provided with the\n#     distribution.  \n    \n#     (3) The name of the author may not be used to\n#     endorse or promote products derived from this software without\n#     specific prior written permission.\n\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\n# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 41.724609375,
          "content": "# vim: set expandtab tabstop=4 softtabstop=2 shiftwidth=2:\n# Platforms:\n# Linux/Cygwin native\n#   (don't need to do anything)\n# Linux 64-bit\n#   make NATIVE=linux64\n# Linux 32-bit\n#   make NATIVE=linux32\n# Linux cross-compile to Win32\n#   make CROSS=i686-pc-mingw32-\n#   or make CROSS=i586-mingw32msvc-\n#   or whichever prefix your crosscompiler uses\n#      as long as its name contains mingw32\n# Linux cross-compile to OSX with osxcross\n#   make CROSS=x86_64-apple-darwin15-\n#        NATIVE=osx\n#        CLANG=1\n#        OSXCROSS=1\n#        LIBSDIR=../libs\n#        FRAMEWORKSDIR=../Frameworks\n# Win32 (non-Cygwin)\n#   Run: make NATIVE=win32\n# OS X\n#   Run: make NATIVE=osx\n# Emscripten\n#   Run: make NATIVE=emscripten\n\n# Build types:\n# Debug (no optimizations)\n#  Default\n# ccache (use compilation caches)\n#  make CCACHE=1\n# Release (turn on optimizations)\n#  make RELEASE=1\n# Tiles (uses SDL rather than ncurses)\n#  make TILES=1\n# Sound (requires SDL, so TILES must be enabled)\n#  make TILES=1 SOUND=1\n# Disable gettext, on some platforms the dependencies are hard to wrangle.\n#  make LOCALIZE=0\n# Disable backtrace support, not available on all platforms\n#  make BACKTRACE=0\n# Use libbacktrace. Only has effect if BACKTRACE=1. (currently only for MinGW and Linux builds)\n#  make LIBBACKTRACE=1\n# Compile localization files for specified languages\n#  make localization LANGUAGES=\"<lang_id_1>[ lang_id_2][ ...]\"\n#  (for example: make LANGUAGES=\"zh_CN zh_TW\" for Chinese)\n#  make localization LANGUAGES=all\n#  (for every .po file in lang/po)\n# Enable sanitizer (address, undefined, etc.)\n#  make SANITIZE=address\n# Enable the string id debugging helper\n#  make STRING_ID_DEBUG=1\n# Adjust names of build artifacts (for example to allow easily toggling between build types).\n#  make BUILD_PREFIX=\"release-\"\n# Generate a build artifact prefix from the other build flags.\n#  make AUTO_BUILD_PREFIX=1\n# Install to system directories.\n#  make install\n# Install to $DIR ($DIR will contain bin and share directories).\n#  make PREFIX=$DIR\n#  make PREFIX=$DIR install\n# Use user's XDG base directories for save files and configs.\n#  make USE_XDG_DIR=1\n# Use user's home directory for save files.\n#  make USE_HOME_DIR=1\n# Use dynamic linking (requires system libraries).\n#  make DYNAMIC_LINKING=1\n# Use MSYS2 as the build environment on Windows\n#  make MSYS2=1\n# Turn off all optimizations, even debug-friendly optimizations. Overridden by RELEASE=1\n#  make NOOPT=1\n# Astyle all source files.\n#  make astyle\n# Astyle all source files as fast as possible.\n#  make astyle-fast\n# Check if source files are styled properly.\n#  make astyle-check\n# Style the whitelisted json files (maintain the current level of styling).\n#  make style-json\n# Style all json files using the current rules (don't PR this, it's too many changes at once).\n#  make style-all-json\n# Style all json files in parallel using all available CPU cores (don't make -jX on this, just make)\n#  make style-all-json-parallel\n# Disable astyle of source files.\n#  make ASTYLE=0\n# Disable format check of whitelisted json files.\n#  make LINTJSON=0\n# Disable building tests.\n#  make TESTS=0\n# Enable running tests.\n#  make RUNTESTS=1\n# Build source files in order of how often the matching header is included\n#  make HEADERPOPULARITY=1\n\n# comment these to toggle them as one sees fit.\n# DEBUG is best turned on if you plan to debug in gdb -- please do!\n# PROFILE is for use with gprof or a similar program -- don't bother generally.\n# RELEASE_FLAGS is flags for release builds.\nRELEASE_FLAGS =\nWARNINGS = \\\n  -Werror -Wall -Wextra \\\n  -Wformat-signedness \\\n  -Wlogical-op \\\n  -Wmissing-declarations \\\n  -Wmissing-noreturn \\\n  -Wnon-virtual-dtor \\\n  -Wold-style-cast \\\n  -Woverloaded-virtual \\\n  -Wpedantic \\\n  -Wsuggest-override \\\n  -Wunused-macros \\\n  -Wzero-as-null-pointer-constant \\\n  -Wno-unknown-warning-option \\\n  -Wno-dangling-reference \\\n  -Wno-c++20-compat\nifeq ($(NATIVE), emscripten)\n  # The EM_ASM macro triggers this warning.\n  WARNINGS += -Wno-gnu-zero-variadic-macro-arguments\nendif\n# Uncomment below to disable warnings\n#WARNINGS = -w\nDEBUGSYMS = -g\n#PROFILE = -pg\n#OTHERS = -O3\n#DEFINES = -DNDEBUG\n\n# Tells ccache to keep comments, as they can be meaningful to the compiler (as to suppress warnings).\nexport CCACHE_COMMENTS=1\n\n# Disable debug. Comment this out to get logging.\n#DEFINES = -DENABLE_LOGGING\n\n# Limit debug to level. Comment out all for all levels.\n#DEFINES += -DDEBUG_INFO\n#DEFINES += -DDEBUG_WARNING\n#DEFINES += -DDEBUG_ERROR\n#DEFINES += -DDEBUG_PEDANTIC_INFO\n\n# Limit debug to section. Comment out all for all levels.\n#DEFINES += -DDEBUG_ENABLE_MAIN\n#DEFINES += -DDEBUG_ENABLE_MAP\n#DEFINES += -DDEBUG_ENABLE_MAP_GEN\n#DEFINES += -DDEBUG_ENABLE_GAME\n\n# Explicitly let 'char' to be 'signed char' to fix #18776\nOTHERS += -fsigned-char\n\nVERSION = 0.I\n\nTARGET_NAME = cataclysm\nTILES_TARGET_NAME = $(TARGET_NAME)-tiles\nifeq ($(NATIVE), emscripten)\n  TILES_TARGET_NAME = $(TARGET_NAME)-tiles.js\nendif\n\nTARGET = $(BUILD_PREFIX)$(TARGET_NAME)\nTILESTARGET = $(BUILD_PREFIX)$(TILES_TARGET_NAME)\nifeq ($(TILES), 1)\n  APPTARGET = $(TILESTARGET)\nelse\n  APPTARGET = $(TARGET)\nendif\nW32TILESTARGET = $(BUILD_PREFIX)$(TILES_TARGET_NAME).exe\nW32TARGET = $(BUILD_PREFIX)$(TARGET_NAME).exe\nCHKJSON_BIN = $(BUILD_PREFIX)chkjson\nBINDIST_DIR = $(BUILD_PREFIX)bindist\nBUILD_DIR = $(CURDIR)\nSRC_DIR = src\nIMGUI_DIR = $(SRC_DIR)/third-party/imgui\nIMTUI_DIR = $(SRC_DIR)/third-party/imtui\nLOCALIZE = 1\nASTYLE_BINARY = astyle\n\n# Enable debug by default\nifndef RELEASE\n  RELEASE = 0\nendif\n\n# Enable astyle by default\nifndef ASTYLE\n  ASTYLE = 1\nendif\n\n# Enable json format check by default\nifndef LINTJSON\n  LINTJSON = 1\nendif\n\n# We don't want to have both 'check' and 'tests' as targets, because that will\n# result in make trying to build the tests twice in parallel, wasting time\n# (The tests target will be launched parallel to the check target, and both\n#  will build the tests executable)\n# There are three possible outcomes we expect:\n#   a. Tests are built and run (check)\n#   b. Tests are built (tests)\n#   c. Tests are not built\n#\n# This table defines the expected behavior for the possible values of TESTS and\n# RUNTESTS.\n# TESTS defaults to 1, RUNTESTS defaults to 0.\n#\n#   RUNTESTS\n# T # | 0 | 1\n# E ----------\n# S 0 | c | c\n# T ----------\n# S 1 | b | a\n#\n\n# Enable building tests by default\nifndef TESTS\n  TESTS = 1\nendif\n\n# Disable running tests by default\nifndef RUNTESTS\n  RUNTESTS = 0\nendif\n\n# Can't run tests if we aren't going to build them\nifeq ($(TESTS), 1)\n  ifeq ($(RUNTESTS), 1)\n    # Build and run the tests\n    TESTSTARGET = check\n  else\n    # Only build the tests\n    TESTSTARGET = tests\n  endif\nendif\n\nifndef PCH\n  PCH = 1\nendif\n\nifndef GOLD\nifeq ($(LTO), 1)\n  GOLD = 1\nelse\n  GOLD = 0\nendif\nendif\n\n# Auto-detect MSYS2\nifdef MSYSTEM\n  MSYS2 = 1\nendif\n\nifneq (,$(findstring clang,$(COMPILER)))\n  CLANG = $(COMPILER)\nendif\n\n# Windows sets the OS environment variable so we can cheaply test for it.\nifneq (,$(findstring Windows_NT,$(OS)))\n  IS_WINDOWS_HOST = 1\nelse\n  IS_WINDOWS_HOST = 0\nendif\n\nOS = $(shell uname -s)\n\nifneq ($(findstring Darwin,$(OS)),)\n  ifndef NATIVE\n    NATIVE = osx\n  endif\n  ifndef CLANG\n    CLANG = 1\n  endif\nendif\n\n# Default to disabling clang\nifndef CLANG\n  CLANG = 0\nendif\n\n# Determine JSON formatter binary name\nJSON_FORMATTER_BIN=tools/format/json_formatter.cgi\nifeq ($(MSYS2), 1)\n  JSON_FORMATTER_BIN=tools/format/json_formatter.exe\nendif\nifneq (,$(findstring mingw32,$(CROSS)))\n  JSON_FORMATTER_BIN=tools/format/json_formatter.exe\nendif\n\n# Enable backtrace by default\nifndef BACKTRACE\n  # ...except not on native Windows builds, because the relevant headers are\n  # probably not available\n  ifneq ($(MSYS2), 1)\n    BACKTRACE = 1\n  endif\nendif\nifeq ($(BACKTRACE), 1)\n  # Also enable libbacktrace on cross-compilation to Windows\n  ifndef LIBBACKTRACE\n    ifneq (,$(findstring mingw32,$(CROSS)))\n      LIBBACKTRACE = 1\n    endif\n  endif\nendif\n\n# tiles object directories are because gcc gets confused\n# Appears that the default value of $LD is unsuitable on most systems\n\n# when preprocessor defines change, but the source doesn't\nODIR = $(BUILD_PREFIX)obj\nODIRTILES = $(BUILD_PREFIX)obj/tiles\nW32ODIR = $(BUILD_PREFIX)objwin\nW32ODIRTILES = $(W32ODIR)/tiles\n\nifdef AUTO_BUILD_PREFIX\n  BUILD_PREFIX = $(if $(RELEASE),release-)$(if $(DEBUG_SYMBOLS),symbol-)$(if $(TILES),tiles-)$(if $(SOUND),sound-)$(if $(LOCALIZE),local-)$(if $(BACKTRACE),back-$(if $(LIBBACKTRACE),libbacktrace-))$(if $(SANITIZE),sanitize-)$(if $(USE_XDG_DIR),xdg-)$(if $(USE_HOME_DIR),home-)$(if $(DYNAMIC_LINKING),dynamic-)$(if $(MSYS2),msys2-)\n  export BUILD_PREFIX\nendif\n\n# if $(OS) contains 'BSD'\nifneq ($(findstring BSD,$(OS)),)\n  BSD = 1\nendif\n\nifeq ($(PCH), 1)\n\tCCACHEBIN = CCACHE_SLOPPINESS=pch_defines,time_macros,include_file_ctime,include_file_mtime ccache\nelse\n\tCCACHEBIN = ccache\nendif\n\nifeq ($(STRING_ID_DEBUG), 1)\n\tDEFINES += -DCATA_STRING_ID_DEBUGGING\nendif\n\n# This sets CXX and so must be up here\nifneq ($(CLANG), 0)\n  # Allow setting specific CLANG version\n  ifeq ($(CLANG), 1)\n    CLANGCMD = clang++\n  else\n    CLANGCMD = $(CLANG)\n  endif\n  ifeq ($(NATIVE), osx)\n    USE_LIBCXX = 1\n  endif\n  ifeq ($(BSD), 1)\n    ifndef USE_LIBCXX\n      USE_LIBCXX = 1\n    endif\n  endif\n  ifdef USE_LIBCXX\n    OTHERS += -stdlib=libc++\n    LDFLAGS += -stdlib=libc++ -Wno-unused-command-line-argument\n  endif\n  ifeq ($(CCACHE), 1)\n    CXX = CCACHE_CPP2=1 $(CCACHEBIN) $(CROSS)$(CLANGCMD)\n    LD  = CCACHE_CPP2=1 $(CCACHEBIN) $(CROSS)$(CLANGCMD)\n  else\n    CXX = $(CROSS)$(CLANGCMD)\n    LD  = $(CROSS)$(CLANGCMD)\n  endif\nelse\n  # Compiler version & target machine - used later for MXE ICE workaround\n  ifdef CROSS\n    CXXVERSION := $(shell $(CROSS)$(CXX) --version | grep -i gcc | sed 's/^.* //g')\n    CXXMACHINE := $(shell $(CROSS)$(CXX) -dumpmachine)\n  endif\n\n  # Expand at reference time to avoid recursive reference\n  ifneq ($(COMPILER),)\n    OS_COMPILER := $(COMPILER)\n    OS_LINKER := $(COMPILER)\n  else\n    OS_COMPILER := $(CXX)\n    OS_LINKER := $(CXX)\n  endif\n  # Appears that the default value of $LD is unsuitable on most systems\n  ifeq ($(CCACHE), 1)\n    CXX = $(CCACHEBIN) $(CROSS)$(OS_COMPILER)\n    LD  = $(CCACHEBIN) $(CROSS)$(OS_LINKER)\n  else\n    CXX = $(CROSS)$(OS_COMPILER)\n    LD  = $(CROSS)$(OS_LINKER)\n  endif\nendif\n\nSTRIP = $(CROSS)strip\nRC  = $(CROSS)windres\nAR  = $(CROSS)ar\n\nLDFLAGS += $(PROFILE)\n\nifneq ($(SANITIZE),)\n  SANITIZE_FLAGS := -fsanitize=$(SANITIZE) -fno-sanitize-recover=all -fno-omit-frame-pointer\n  CXXFLAGS += $(SANITIZE_FLAGS)\n  LDFLAGS += $(SANITIZE_FLAGS)\nendif\n\n# enable optimizations. slow to build\nifeq ($(RELEASE), 1)\n  ifeq ($(NATIVE), osx)\n    ifeq ($(shell $(CXX) -E -Os - < /dev/null > /dev/null 2>&1 && echo fos),fos)\n      OPTLEVEL = -Os\n    else\n      OPTLEVEL = -O3\n    endif\n  else ifeq ($(NATIVE), emscripten)\n    OPTLEVEL = -Os\n  else\n    # MXE ICE Workaround\n    # known bad on 4.9.3 and 4.9.4, if it gets fixed this could include a version test too\n    ifeq ($(CXXMACHINE), x86_64-w64-mingw32.static)\n      OPTLEVEL = -O3\n    else\n      OPTLEVEL = -Os\n    endif\n  endif\n\n  ifeq ($(LTO), 1)\n    ifneq ($(CLANG), 0)\n      # LLVM's LTO will complain if the optimization level isn't between O0 and\n      # O3 (inclusive)\n      OPTLEVEL = -O3\n    endif\n  endif\n  CXXFLAGS += $(OPTLEVEL)\n\n  ifeq ($(LTO), 1)\n    ifeq ($(NATIVE), osx)\n      ifneq ($(CLANG), 0)\n        LTOFLAGS += -flto=full\n      endif\n    else\n      ifeq ($(GOLD), 1)\n        LDFLAGS += -fuse-ld=gold # This breaks in OS X because gold can only produce ELF binaries, not Mach\n      endif\n    endif\n\n    ifneq ($(CLANG), 0)\n      LTOFLAGS += -flto\n    else\n      LTOFLAGS += -flto=jobserver -flto-odr-type-merging\n    endif\n  endif\n  LTOFLAGS += -Wodr\n  CXXFLAGS += $(LTOFLAGS)\n\n  # OTHERS += -mmmx -m3dnow -msse -msse2 -msse3 -mfpmath=sse -mtune=native\n  # OTHERS += -march=native # Uncomment this to build an optimized binary for your machine only\n\n  # Strip symbols, generates smaller executable.\n  OTHERS += $(RELEASE_FLAGS)\n  DEBUG =\n  ifndef DEBUG_SYMBOLS\n    ifeq ($(BACKTRACE), 1)\n      DEBUGSYMS = -g1\n    else\n      DEBUGSYMS =\n    endif\n  endif\n  DEFINES += -DRELEASE\n  # Check for astyle or JSON regressions on release builds.\n  ifeq ($(ASTYLE), 1)\n    CHECKS += astyle-check\n  endif\n  ifeq ($(LINTJSON), 1)\n    CHECKS += style-json\n  endif\nelse\n  ifeq ($(NOOPT), 1)\n    # While gcc claims to include all information required for\n    # debugging at -Og, at least with gcc 8.3, control flow\n    # doesn't move line-by-line at -Og.  Provide a command-line\n    # way to turn off optimization (make NOOPT=1) entirely.\n    OPTLEVEL = -O0\n  else\n    ifeq ($(NATIVE),emscripten)\n      OPTLEVEL = -O3\n    else ifeq ($(shell $(CXX) -E -Og - < /dev/null > /dev/null 2>&1 && echo fog),fog)\n      OPTLEVEL = -Og\n    else\n      OPTLEVEL = -O0\n    endif\n  endif\n  CXXFLAGS += $(OPTLEVEL)\nendif\n\nifeq ($(shell sh -c 'uname -o 2>/dev/null || echo not'),Cygwin)\n  OTHERS += -std=gnu++17\nelse\n  OTHERS += -std=c++17\nendif\n\nifeq ($(CYGWIN),1)\nWARNINGS += -Wimplicit-fallthrough=0\nendif\n\nifeq ($(PCH), 1)\n  PCHFLAGS = -Winvalid-pch\n  PCH_H = pch/main-pch.hpp\n\n  ifeq ($(CLANG), 0)\n    PCHFLAGS += -include pch/main-pch.hpp\n    PCH_P = $(PCH_H).gch\n  else\n    PCH_P = $(PCH_H).pch\n    PCHFLAGS += -include-pch $(PCH_P)\n\n    # FIXME: dirty hack ahead\n    # ccache won't wort with clang unless it supports -fno-pch-timestamp\n    ifeq ($(CCACHE), 1)\n      CLANGVER := $(shell echo 'int main(void){return 0;}'|$(CXX) -Xclang -fno-pch-timestamp -x c++ -o _clang_ver.o -c - 2>&1 || echo fail)\n      ifneq ($(CLANGVER),)\n        PCHFLAGS = \"\"\n        PCH_H = \"\"\n        PCH_P = \"\"\n        PCH = 0\n        $(warning your clang version does not support -fno-pch-timestamp: $(CLANGVER) ($(.SHELLSTATUS)))\n      else\n        CXXFLAGS += -Xclang -fno-pch-timestamp\n      endif\n    endif\n\n  endif\nendif\n\nCPPFLAGS += -Isrc -isystem ${SRC_DIR}/third-party\nCXXFLAGS += $(WARNINGS) $(DEBUG) $(DEBUGSYMS) $(PROFILE) $(OTHERS)\nTOOL_CXXFLAGS = -DCATA_IN_TOOL\n\nBINDIST_EXTRAS += README.md data doc LICENSE.txt LICENSE-OFL-Terminus-Font.txt VERSION.txt $(JSON_FORMATTER_BIN)\nBINDIST    = $(BUILD_PREFIX)cataclysmdda-$(VERSION).tar.gz\nW32BINDIST = $(BUILD_PREFIX)cataclysmdda-$(VERSION).zip\nBINDIST_CMD    = tar --transform=s@^$(BINDIST_DIR)@cataclysmdda-$(VERSION)@ -czvf $(BINDIST) $(BINDIST_DIR)\nW32BINDIST_CMD = cd $(BINDIST_DIR) && zip -r ../$(W32BINDIST) * && cd $(BUILD_DIR)\n\n\n# Check if called without a special build target\nifeq ($(NATIVE),)\n  ifeq ($(CROSS),)\n    ifeq ($(shell sh -c 'uname -o 2>/dev/null || echo not'),Cygwin)\n      DEFINES += -DCATA_NO_CPP11_STRING_CONVERSIONS\n      TARGETSYSTEM=CYGWIN\n    else\n      TARGETSYSTEM=LINUX\n    endif\n  endif\nendif\n\n# Linux 64-bit\nifeq ($(NATIVE), linux64)\n  CXXFLAGS += -m64\n  LDFLAGS += -m64\n  TARGETSYSTEM=LINUX\n  ifeq ($(GOLD), 1)\n    CXXFLAGS += -fuse-ld=gold\n    LDFLAGS += -fuse-ld=gold -Wl,--detect-odr-violations\n  endif\n  ifeq ($(MOLD), 1)\n    CXXFLAGS += -fuse-ld=mold\n    LDFLAGS += -fuse-ld=mold\n  endif\nelse\n  # Linux 32-bit\n  ifeq ($(NATIVE), linux32)\n    CXXFLAGS += -m32\n    LDFLAGS += -m32\n    TARGETSYSTEM=LINUX\n    ifeq ($(GOLD), 1)\n      CXXFLAGS += -fuse-ld=gold\n      LDFLAGS += -fuse-ld=gold -Wl,--detect-odr-violations\n    endif\n    ifeq ($(MOLD), 1)\n      CXXFLAGS += -fuse-ld=mold\n      LDFLAGS += -fuse-ld=mold\n    endif\n  endif\nendif\n\n# OSX\nifeq ($(NATIVE), osx)\n  DEFINES += -DMACOSX\n  CXXFLAGS += -mmacosx-version-min=10.13\n  LDFLAGS += -mmacosx-version-min=10.13 -framework CoreFoundation -Wl,-headerpad_max_install_names\n  ifeq ($(UNIVERSAL_BINARY), 1)\n    CXXFLAGS += -arch x86_64 -arch arm64\n    LDFLAGS += -arch x86_64 -arch arm64\n  endif\n  ifdef FRAMEWORK\n    ifeq ($(FRAMEWORKSDIR),)\n      FRAMEWORKSDIR := $(strip $(if $(shell [ -d $(HOME)/Library/Frameworks ] && echo 1), \\\n                             $(if $(shell find $(HOME)/Library/Frameworks -name 'SDL2.*'), \\\n                               $(HOME)/Library/Frameworks,),))\n    endif\n    ifeq ($(FRAMEWORKSDIR),)\n      FRAMEWORKSDIR := $(strip $(if $(shell find /Library/Frameworks -name 'SDL2.*'), \\\n                                 /Library/Frameworks,))\n    endif\n    ifeq ($(FRAMEWORKSDIR),)\n      $(error \"SDL2 framework not found\")\n    endif\n  endif\n  ifeq ($(LOCALIZE), 1)\n    ifneq ($(TILES), 1)\n      CXXFLAGS += -D_XOPEN_SOURCE_EXTENDED\n      ifeq ($(MACPORTS), 1)\n        CXXFLAGS += -I$(shell ncursesw6-config --includedir)\n        LDFLAGS += -L$(shell ncursesw6-config --libdir)\n      endif\n    endif\n  endif\n  TARGETSYSTEM=LINUX\n  ifneq ($(OS), Linux)\n    BINDIST_CMD = tar -s\"@^$(BINDIST_DIR)@cataclysmdda-$(VERSION)@\" -czvf $(BINDIST) $(BINDIST_DIR)\n  endif\nendif\n\n# Win32 (MinGW32 or MinGW-w64(32bit)?)\nifeq ($(NATIVE), win32)\n# Any reason not to use -m32 on MinGW32?\n  TARGETSYSTEM=WINDOWS\nelse\n  # Win64 (MinGW-w64?)\n  ifeq ($(NATIVE), win64)\n    CXXFLAGS += -m64\n    LDFLAGS += -m64\n    TARGETSYSTEM=WINDOWS\n  endif\nendif\n\n# MSYS2\nifeq ($(MSYS2), 1)\n  TARGETSYSTEM=WINDOWS\nendif\n\n# Cygwin\nifeq ($(NATIVE), cygwin)\n  TARGETSYSTEM=CYGWIN\nendif\n\n# Emscripten\nifeq ($(NATIVE), emscripten)\n  CXX=emcc\n  LD=emcc\n  ifeq ($(CCACHE), 1)\n    CXX=$(CCACHEBIN) emcc\n    LD=$(CCACHEBIN) emcc\n  endif\n\n  # Flags that are common across compile and link phases.\n  EMCC_COMMON_FLAGS = -sUSE_SDL=2 -sUSE_SDL_IMAGE=2 -sUSE_SDL_TTF=2 -sSDL2_IMAGE_FORMATS=['png'] -fexceptions\n\n  ifneq ($(RELEASE), 1)\n    EMCC_COMMON_FLAGS += -g\n  endif\n\n  CXXFLAGS += $(EMCC_COMMON_FLAGS)\n  LDFLAGS += $(EMCC_COMMON_FLAGS)\n\n  LDFLAGS += -sFORCE_FILESYSTEM\n  LDFLAGS += -sEXPORTED_RUNTIME_METHODS=['FS','stackTrace','jsStackTrace']\n  LDFLAGS += -sINITIAL_MEMORY=512MB\n  LDFLAGS += -sMAXIMUM_MEMORY=4GB\n  LDFLAGS += -sALLOW_MEMORY_GROWTH\n  LDFLAGS += -sSTACK_SIZE=262144\n  LDFLAGS += -sASYNCIFY\n  LDFLAGS += -sASYNCIFY_STACK_SIZE=16384\n  LDFLAGS += -sENVIRONMENT=web\n  LDFLAGS += -lidbfs.js\n  LDFLAGS += -lembind\n  LDFLAGS += -sWASM_BIGINT # Browser will require BigInt support.\n  LDFLAGS += -sMAX_WEBGL_VERSION=2\n\n  ifeq ($(RELEASE), 1)\n    # Release-mode Linker flags.\n    LDFLAGS += -Os\n    LDFLAGS += -sLZ4\n  else\n    # Debug mode linker flags.\n    LDFLAGS += -O1 # Emscripten link time is slow, so use low optimization level.\n    LDFLAGS += -sFS_DEBUG\n    LDFLAGS += -gseparate-dwarf\n  endif\nendif\n\n# MXE cross-compile to win32\nifneq (,$(findstring mingw32,$(CROSS)))\n  DEFINES += -DCROSS_LINUX\n  TARGETSYSTEM=WINDOWS\nendif\n\nifneq ($(TARGETSYSTEM),WINDOWS)\n  WARNINGS += -Wredundant-decls\nendif\n\n# Global settings for Windows targets\nifeq ($(TARGETSYSTEM),WINDOWS)\n  DEFINES += -DWIN32_LEAN_AND_MEAN\n  CHKJSON_BIN = chkjson.exe\n  TARGET = $(W32TARGET)\n  BINDIST = $(W32BINDIST)\n  BINDIST_CMD = $(W32BINDIST_CMD)\n  ODIR = $(W32ODIR)\n  ifeq ($(DYNAMIC_LINKING), 1)\n    # Windows isn't sold with programming support, these are static to remove MinGW dependency.\n    LDFLAGS += -static-libgcc -static-libstdc++\n  else\n    LDFLAGS += -static\n  endif\n  W32FLAGS += -Wl,-stack,12000000,-subsystem,windows\n  RFLAGS = -J rc -O coff\n  ifeq ($(NATIVE), win64)\n    RFLAGS += -F pe-x86-64\n  endif\nendif\n\nifeq ($(shell git rev-parse --is-inside-work-tree),true)\n  # We have a git repository, use git version\n  DEFINES += -DGIT_VERSION\nendif\n\nPKG_CONFIG = $(CROSS)pkg-config\n\nifeq ($(SDL), 1)\n  TILES = 1\nendif\n\nifeq ($(TILES), 1)\n  SDL = 1\n  BINDIST_EXTRAS += gfx\n  ifeq ($(NATIVE),osx)\n    ifdef FRAMEWORK\n      OSX_INC = -F$(FRAMEWORKSDIR) \\\n\t\t-I$(FRAMEWORKSDIR)/SDL2.framework/Headers \\\n\t\t-I$(FRAMEWORKSDIR)/SDL2_image.framework/Headers \\\n\t\t-I$(FRAMEWORKSDIR)/SDL2_ttf.framework/Headers\n\t\t\tifeq ($(SOUND), 1)\n\t\t\t\tOSX_INC += -I$(FRAMEWORKSDIR)/SDL2_mixer.framework/Headers\n\t\t\tendif\n      LDFLAGS += -F$(FRAMEWORKSDIR) -rpath $(FRAMEWORKSDIR) \\\n\t\t -framework SDL2 -framework SDL2_image -framework SDL2_ttf -framework Cocoa\n\t\t ifeq ($(SOUND), 1)\n\t\t \tLDFLAGS += -framework SDL2_mixer\n\t\t endif\n      CXXFLAGS += $(OSX_INC)\n    else # libsdl build\n      DEFINES += -DOSX_SDL2_LIBS\n      # handle #include \"SDL2/SDL.h\" and \"SDL.h\"\n      CXXFLAGS += $(shell sdl2-config --cflags) \\\n\t\t  -I$(shell dirname $(shell sdl2-config --cflags | sed 's/-I\\(.[^ ]*\\) .*/\\1/'))\n      LDFLAGS += -framework Cocoa $(shell sdl2-config --libs) -lSDL2_ttf\n      LDFLAGS += -lSDL2_image\n      ifeq ($(SOUND), 1)\n        LDFLAGS += -lSDL2_mixer\n      endif\n    endif\n    CXXFLAGS += $(shell $(PKG_CONFIG) --cflags freetype2)\n    LDFLAGS += $(shell $(PKG_CONFIG) --libs freetype2)\n  else ifneq ($(NATIVE),emscripten)\n    CXXFLAGS += $(shell $(PKG_CONFIG) --cflags sdl2)\n    CXXFLAGS += $(shell $(PKG_CONFIG) --cflags SDL2_image SDL2_ttf)\n    CXXFLAGS += $(shell $(PKG_CONFIG) --cflags freetype2)\n\n    ifeq ($(STATIC), 1)\n      LDFLAGS += $(shell $(PKG_CONFIG) sdl2 --static --libs)\n    else\n      LDFLAGS += $(shell $(PKG_CONFIG) sdl2 --libs)\n    endif\n\n    LDFLAGS += -lSDL2_ttf -lSDL2_image\n    LDFLAGS += $(shell $(PKG_CONFIG) --libs freetype2)\n  endif\n\n  DEFINES += -DTILES\n\n  ifeq ($(TARGETSYSTEM),WINDOWS)\n    ifndef DYNAMIC_LINKING\n      # These differ depending on what SDL2 is configured to use.\n      ifneq (,$(findstring mingw32,$(CROSS)))\n        # We use pkg-config to find out which libs are needed with MXE\n        LDFLAGS += $(shell $(PKG_CONFIG) --libs SDL2_image SDL2_ttf)\n        # We don't use SDL_main -- we have proper main()/WinMain()\n        LDFLAGS := $(filter-out -lSDL2main,$(LDFLAGS))\n      else\n        ifeq ($(MSYS2),1)\n          LDFLAGS += -Wl,--start-group -lharfbuzz -lfreetype -Wl,--end-group -lgraphite2 -lpng -lz -ltiff -lbz2 -lglib-2.0 -llzma -lws2_32 -lwebp -ljpeg -luuid\n        else\n          LDFLAGS += -lfreetype -lpng -lz -ljpeg -lbz2\n        endif\n      endif\n    else\n      # Currently none needed by the game itself (only used by SDL2 layer).\n      # Placeholder for future use (savegame compression, etc).\n      LDFLAGS +=\n    endif\n    TARGET = $(W32TILESTARGET)\n    ODIR = $(W32ODIRTILES)\n  else\n    TARGET = $(TILESTARGET)\n    ODIR = $(ODIRTILES)\n  endif\nelse\n  NCURSES_PREFIX = ncursesw\n  # ONLY when not cross-compiling, check for pkg-config or ncurses5-config\n  # When doing a cross-compile, we can't rely on the host machine's -configs\n  ifeq ($(CROSS),)\n      ifeq ($(OSXCROSS),)\n        ifneq ($(shell pkg-config --libs $(NCURSES_PREFIX) 2>/dev/null),)\n          HAVE_PKGCONFIG = 1\n        endif\n        ifneq ($(shell which $(NCURSES_PREFIX)5-config 2>/dev/null),)\n          HAVE_NCURSES5CONFIG = 1\n        endif\n      endif\n  endif\n\n  # Link to ncurses if we're using a non-tiles, Linux build\n  ifeq ($(HAVE_PKGCONFIG),1)\n    CXXFLAGS += $(shell $(PKG_CONFIG) --cflags $(NCURSES_PREFIX))\n    LDFLAGS += $(shell $(PKG_CONFIG) --libs $(NCURSES_PREFIX))\n  else\n    ifeq ($(HAVE_NCURSES5CONFIG),1)\n      CXXFLAGS += $(shell $(NCURSES_PREFIX)5-config --cflags)\n      LDFLAGS += $(shell $(NCURSES_PREFIX)5-config --libs)\n    else\n      ifneq ($(TARGETSYSTEM),WINDOWS)\n        LDFLAGS += -l$(NCURSES_PREFIX)\n      endif\n\n      ifdef OSXCROSS\n        LDFLAGS += -L$(LIBSDIR)/$(NCURSES_PREFIX)/lib\n        CXXFLAGS += -I$(LIBSDIR)/$(NCURSES_PREFIX)/include\n      endif # OSXCROSS\n    endif # HAVE_NCURSES5CONFIG\n  endif # HAVE_PKGCONFIG\n  ifeq ($(MSYS),1)\n    CXXFLAGS += -DNCURSES_INTERNALS\n  endif\nendif # TILES\n\nifeq ($(SOUND), 1)\n  ifeq ($(NATIVE),osx)\n    ifndef FRAMEWORK # libsdl build\n      ifeq ($(MACPORTS), 1)\n        LDFLAGS += -lSDL2_mixer -lvorbisfile -lvorbis -logg\n      else # homebrew\n        CXXFLAGS += $(shell $(PKG_CONFIG) --cflags SDL2_mixer)\n        LDFLAGS += $(shell $(PKG_CONFIG) --libs SDL2_mixer)\n        LDFLAGS += -lvorbisfile -lvorbis -logg\n      endif\n    endif\n  else # not osx\n    CXXFLAGS += $(shell $(PKG_CONFIG) --cflags SDL2_mixer)\n    LDFLAGS += $(shell $(PKG_CONFIG) --libs SDL2_mixer)\n    LDFLAGS += -lpthread\n  endif\n\n  ifeq ($(MSYS2),1)\n    LDFLAGS += -lmpg123 -lshlwapi -lvorbisfile -lvorbis -logg -lflac\n  endif\n\n  CXXFLAGS += -DSDL_SOUND\nendif\n\n# We don't use SDL_main -- we have proper main()/WinMain()\nCXXFLAGS := $(filter-out -Dmain=SDL_main,$(CXXFLAGS))\nLDFLAGS := $(filter-out -lSDL2main,$(LDFLAGS))\n\nifeq ($(BSD), 1)\n  # BSDs have backtrace() and friends in a separate library\n  ifeq ($(BACKTRACE), 1)\n    LDFLAGS += -lexecinfo\n    # ...which requires the frame pointer\n    CXXFLAGS += -fno-omit-frame-pointer\n  endif\n\n  # libexecinfo may be located in /usr/local on BSD\n  CXXFLAGS += -I/usr/local/include\n  LDFLAGS += -L/usr/local/lib\nendif\n\n# Global settings for Windows targets (at end)\nifeq ($(TARGETSYSTEM),WINDOWS)\n  LDFLAGS += -lgdi32 -lwinmm -limm32 -lole32 -loleaut32 -lversion\n  ifeq ($(BACKTRACE),1)\n    LDFLAGS += -ldbghelp\n  endif\nendif\n\nifeq ($(BACKTRACE),1)\n  DEFINES += -DBACKTRACE\n  ifeq ($(LIBBACKTRACE),1)\n      DEFINES += -DLIBBACKTRACE\n      LDFLAGS += -lbacktrace\n      ifneq (\"$(wildcard LICENSE-libbacktrace.txt)\",\"\")\n        BINDIST_EXTRAS += LICENSE-libbacktrace.txt\n      endif\n  endif\nendif\n\nifeq ($(LOCALIZE),1)\n  DEFINES += -DLOCALIZE\n  LOCALIZE_TEST_DEPS = localization $(TEST_MO)\nendif\n\nifeq ($(TARGETSYSTEM),LINUX)\n  BINDIST_EXTRAS += cataclysm-launcher\n  ifneq (\"$(wildcard LICENSE-SDL.txt)\",\"\")\n    SDL2_solib = $(shell ldd $(TARGET) | grep libSDL2-2\\.0 | cut -d ' ' -f 3)\n    INSTALL_EXTRAS += $(SDL2_solib)\n    BINDIST_EXTRAS += LICENSE-SDL.txt\n  endif\n  ifeq ($(BACKTRACE),1)\n    # -rdynamic needed for symbols in backtraces\n    LDFLAGS += -rdynamic\n  endif\nendif\n\nifeq ($(TARGETSYSTEM),CYGWIN)\n  BINDIST_EXTRAS += cataclysm-launcher\n  DEFINES += -D_GLIBCXX_USE_C99_MATH_TR1\nendif\n\nifeq ($(MSYS2),1)\n  DEFINES += -D_GLIBCXX_USE_C99_MATH_TR1\n  CXXFLAGS += -DMSYS2\nendif\n\n# Enumerations of all the source files and headers.\nifeq ($(HEADERPOPULARITY), 1)\n  # Alternate source file enumeration sorted in order of how many times the matching header file is included in source files\n  SOURCES := $(shell echo \"$$(echo $$(grep -oh \"^#include \\\"[^\\\"]*.h\\\"\" $(SRC_DIR)/*.cpp | sort | uniq -c | sort -rn | cut -d \\\" -f 2 | sed -e 's/\\.h$$/.cpp/' | sed -e 's/^/$(SRC_DIR)\\//') | xargs -n 1 ls 2> /dev/null; ls -1 $(SRC_DIR)/*.cpp)\" | awk '!x[$$0]++')\nelse\n  SOURCES := $(wildcard $(SRC_DIR)/*.cpp)\nendif\nTHIRD_PARTY_SOURCES := $(wildcard $(SRC_DIR)/third-party/flatbuffers/*.cpp)\nHEADERS := $(wildcard $(SRC_DIR)/*.h)\nOBJECT_CREATOR_SOURCES := $(wildcard $object_creator/*.cpp)\nOBJECT_CREATOR_HEADERS := $(wildcard $object_creator/*.h)\nTESTSRC := $(wildcard tests/*.cpp)\nTESTHDR := $(wildcard tests/*.h)\nJSON_FORMATTER_SOURCES := $(wildcard tools/format/*.cpp) src/wcwidth.cpp src/json.cpp\nJSON_FORMATTER_HEADERS := $(wildcard tools/format/*.h)\nCHKJSON_SOURCES := $(wildcard src/chkjson/*.cpp) src/wcwidth.cpp src/json.cpp\nCLANG_TIDY_PLUGIN_SOURCES := \\\n  $(wildcard tools/clang-tidy-plugin/*.cpp tools/clang-tidy-plugin/*/*.cpp)\nCLANG_TIDY_PLUGIN_HEADERS := \\\n  $(wildcard tools/clang-tidy-plugin/*.h tools/clang-tidy-plugin/*/*.h)\n# Using sort here because it has the side-effect of deduplicating the list\nASTYLE_SOURCES := $(sort \\\n  src/cldr/imgui-glyph-ranges.cpp \\\n  $(SOURCES) \\\n  $(HEADERS) \\\n  $(OBJECT_CREATOR_SOURCES) \\\n  $(OBJECT_CREATOR_HEADERS) \\\n  $(TESTSRC) \\\n  $(TESTHDR) \\\n  $(JSON_FORMATTER_SOURCES) \\\n  $(JSON_FORMATTER_HEADERS) \\\n  $(CHKJSON_SOURCES) \\\n  $(CLANG_TIDY_PLUGIN_SOURCES) \\\n  $(CLANG_TIDY_PLUGIN_HEADERS))\n\n# Third party sources should not be astyle'd\nSOURCES += $(THIRD_PARTY_SOURCES)\n\nIMGUI_SOURCES = $(IMGUI_DIR)/imgui.cpp $(IMGUI_DIR)/imgui_demo.cpp $(IMGUI_DIR)/imgui_draw.cpp $(IMGUI_DIR)/imgui_stdlib.cpp $(IMGUI_DIR)/imgui_tables.cpp $(IMGUI_DIR)/imgui_widgets.cpp\nifeq ($(SDL), 1)\n\tIMGUI_SOURCES += $(IMGUI_DIR)/imgui_freetype.cpp\n\tIMGUI_SOURCES += $(IMGUI_DIR)/imgui_impl_sdl2.cpp $(IMGUI_DIR)/imgui_impl_sdlrenderer2.cpp\nelse\n\tIMGUI_SOURCES += $(IMTUI_DIR)/imtui-impl-ncurses.cpp $(IMTUI_DIR)/imtui-impl-text.cpp\n\tDEFINES += -DIMTUI\nendif\n\nSOURCES += $(IMGUI_SOURCES)\n\n_OBJS = $(SOURCES:$(SRC_DIR)/%.cpp=%.o)\nifeq ($(TARGETSYSTEM),WINDOWS)\n  RSRC = $(wildcard $(SRC_DIR)/*.rc)\n  _OBJS += $(RSRC:$(SRC_DIR)/%.rc=%.o)\nendif\nifeq ($(HEADERPOPULARITY), 1)\n\tOBJS = $(patsubst %,$(ODIR)/%,$(_OBJS))\nelse\n\tOBJS = $(sort $(patsubst %,$(ODIR)/%,$(_OBJS)))\nendif\n\nifdef LANGUAGES\n  export LOCALE_DIR\n  L10N = localization\nendif\n\nifeq ($(TARGETSYSTEM), LINUX)\n  ifneq ($(PREFIX),)\n    DEFINES += -DPREFIX=\"$(PREFIX)\" -DDATA_DIR_PREFIX\n  endif\nendif\n\nifeq ($(TARGETSYSTEM), CYGWIN)\n  ifneq ($(PREFIX),)\n    DEFINES += -DPREFIX=\"$(PREFIX)\" -DDATA_DIR_PREFIX\n  endif\nendif\n\nifeq ($(USE_HOME_DIR),1)\n  ifeq ($(USE_XDG_DIR),1)\n    $(error \"USE_HOME_DIR=1 does not work with USE_XDG_DIR=1\")\n  endif\n  DEFINES += -DUSE_HOME_DIR\nendif\n\nifeq ($(USE_XDG_DIR),1)\n  ifeq ($(USE_HOME_DIR),1)\n    $(error \"USE_HOME_DIR=1 does not work with USE_XDG_DIR=1\")\n  endif\n  DEFINES += -DUSE_XDG_DIR\nendif\n\nifeq ($(LTO), 1)\n  # Depending on the compiler version, LTO usually requires all the\n  # optimization flags to be specified on the link line, and requires them to\n  # match the original invocations.\n  LDFLAGS += $(CXXFLAGS)\n\n  # If GCC or CLANG, use a wrapper for AR (if it exists) else test fails to build\n  ifeq ($(CLANG), 0)\n    GCCAR := $(shell command -v gcc-ar 2> /dev/null)\n    ifdef GCCAR\n      ifneq (,$(findstring gcc version,$(shell $(CXX) -v </dev/null 2>&1)))\n        AR = gcc-ar\n      endif\n    endif\n  else\n    LLVMAR := $(shell command -v llvm-ar 2> /dev/null)\n    ifdef LLVMAR\n      ifneq (,$(findstring clang version,$(shell $(CXX) -v </dev/null 2>&1)))\n        AR = llvm-ar\n      endif\n    endif\n  endif\nendif\n\nLDFLAGS += -lz\n\nall: version prefix $(CHECKS) $(TARGET) $(L10N) $(TESTSTARGET)\n\t@\n\n$(TARGET): $(OBJS)\n\t+$(LD) $(W32FLAGS) -o $(TARGET) $(OBJS) $(LDFLAGS)\nifeq ($(RELEASE), 1)\n  ifndef DEBUG_SYMBOLS\n    ifneq ($(BACKTRACE),1)\n      ifneq ($(NATIVE), emscripten)\n\t$(STRIP) $(TARGET)\n      endif\n    endif\n  endif\nendif\n\n$(PCH_P): $(PCH_H)\n\t-$(CXX) $(CPPFLAGS) $(DEFINES) $(CXXFLAGS) -MMD -MP -Wno-error -c $(PCH_H) -o $(PCH_P)\n\n$(BUILD_PREFIX)$(TARGET_NAME).a: $(OBJS)\n\t$(AR) rcs $(BUILD_PREFIX)$(TARGET_NAME).a $(filter-out $(ODIR)/main.o $(ODIR)/messages.o,$(OBJS))\n\n.PHONY: version prefix\nversion:\n\t@( VERSION_STRING=$(VERSION) ; \\\n        [ -e \".git\" ] && \\\n          GITVERSION=$$( git describe --tags --always --match \"[0-9A-Z]*.[0-9A-Z]*\" --match \"cdda-experimental-*\" --exact-match 2>/dev/null || true ) && \\\n          GITSHA=$$( git rev-parse --short HEAD ) && \\\n          DIRTYFLAG=$$( [ -z \"$$(git diff --numstat | grep -v lang/po/)\" ] || echo \"-dirty\") && \\\n          VERSION_STRING=\"$$GITVERSION $$GITSHA$$DIRTYFLAG\" && \\\n          VERSION_STRING=\"$${VERSION_STRING## }\" ; \\\n        [ -e \"$(SRC_DIR)/version.h\" ] && \\\n          OLDVERSION=$$(grep VERSION $(SRC_DIR)/version.h | cut -d '\"' -f2) ; \\\n        if [ \"x$$VERSION_STRING\" != \"x$$OLDVERSION\" ]; then \\\n          printf '// NOLINT(cata-header-guard)\\n#define VERSION \"%s\"\\n' \"$$VERSION_STRING\" | tee $(SRC_DIR)/version.h ; \\\n        fi \\\n     )\n\nprefix:\n\t@( PREFIX_STRING=$(PREFIX) ; \\\n            [ -e \"$(SRC_DIR)/prefix.h\" ] && OLDPREFIX=$$(grep PREFIX $(SRC_DIR)/PREFIX.h|cut -d '\"' -f2) ; \\\n            if [ \"x$$PREFIX_STRING\" != \"x$$OLDPREFIX\" ]; then printf '// NOLINT(cata-header-guard)\\n#define PREFIX \"%s\"\\n' \"$$PREFIX_STRING\" | tee $(SRC_DIR)/prefix.h ; fi \\\n         )\n\n# Unconditionally create the object dirs on every invocation.\nDIRS = $(sort $(dir $(OBJS)))\n$(shell mkdir -p $(DIRS))\n\n$(ODIR)/%.inc: $(SRC_DIR)/%.cpp\n\t$(CXX) $(CPPFLAGS) $(DEFINES) $(CXXFLAGS) -H -E $< -o /dev/null 2> $@\n\n.PHONY: includes\nincludes: $(OBJS:.o=.inc)\n\t+make -C tests includes\n\n$(ODIR)/third-party/imgui/%.o: $(IMGUI_DIR)/%.cpp\n\t$(CXX) $(CPPFLAGS) $(DEFINES) $(CXXFLAGS) -w -MMD -MP -c $< -o $@\n\n$(ODIR)/third-party/imtui/%.o: $(IMTUI_DIR)/%.cpp\n\t$(CXX) $(CPPFLAGS) $(DEFINES) $(CXXFLAGS) -w -MMD -MP -c $< -o $@\n\n$(ODIR)/%.o: $(SRC_DIR)/%.cpp $(PCH_P)\n\t$(CXX) $(CPPFLAGS) $(DEFINES) $(CXXFLAGS) -MMD -MP $(PCHFLAGS) -c $< -o $@\n\n$(ODIR)/%.o: $(SRC_DIR)/%.rc\n\t$(RC) $(RFLAGS) $< -o $@\n\n$(ODIR)/resource.o: data/cataicon.ico data/application_manifest.xml\n\nsrc/version.h: version\n\nsrc/version.cpp: src/version.h\n\nTEST_MO := data/mods/TEST_DATA/lang/mo/ru/LC_MESSAGES/TEST_DATA.mo\n\n$(TEST_MO): data/mods/TEST_DATA/lang/po/ru.po\n\tmkdir -p $(dir $@)\n\tmsgfmt -f -o $@ $<\n\nMO_DEPS := \\\n  $(wildcard lang/*.sh lang/*.py src/*.cpp src/*.h) \\\n  $(shell find data/raw data/json data/mods data/core -type f -name '*.json')\n\nlang/mo_built.stamp: $(MO_DEPS)\n\t$(MAKE) -C lang\n\ttouch $@\n\nlocalization: lang/mo_built.stamp\n\n$(CHKJSON_BIN): $(CHKJSON_SOURCES)\n\t$(CXX) $(CXXFLAGS) $(TOOL_CXXFLAGS) -Isrc/chkjson -Isrc -isystem src/third-party $(CHKJSON_SOURCES) -o $(CHKJSON_BIN)\n\njson-check: $(CHKJSON_BIN)\n\t./$(CHKJSON_BIN)\n\nclean: clean-tests clean-object_creator clean-pch clean-lang\n\trm -rf *$(TARGET_NAME) *$(TILES_TARGET_NAME)\n\trm -rf *$(TILES_TARGET_NAME).exe *$(TARGET_NAME).exe *$(TARGET_NAME).a\n\trm -rf *obj *objwin\n\trm -rf *$(BINDIST_DIR) *cataclysmdda-*.tar.gz *cataclysmdda-*.zip\n\trm -f $(SRC_DIR)/version.h $(SRC_DIR)/prefix.h\n\trm -f $(CHKJSON_BIN)\n\trm -f $(TEST_MO)\n\ndistclean:\n\trm -rf *$(BINDIST_DIR)\n\trm -rf save\n\trm -rf lang/mo lang/mo_built.stamp\n\trm -f data/options.txt\n\trm -f data/keymap.txt\n\trm -f data/auto_pickup.txt\n\trm -f data/fontlist.txt\n\nbindist: $(BINDIST)\n\nifeq ($(TARGETSYSTEM), LINUX)\nDATA_PREFIX=$(DESTDIR)$(PREFIX)/share/cataclysm-dda/\nBIN_PREFIX=$(DESTDIR)$(PREFIX)/bin\nLOCALE_DIR=$(DESTDIR)$(PREFIX)/share/locale\nSHARE_DIR=$(DESTDIR)$(PREFIX)/share\ninstall: version $(TARGET)\n\tmkdir -p $(DATA_PREFIX)\n\tmkdir -p $(BIN_PREFIX)\n\tinstall --mode=755 $(TARGET) $(BIN_PREFIX)\n\tcp -R --no-preserve=ownership data/core $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/font $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/json $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/mods $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/names $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/raw $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/motd $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/credits $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/title $(DATA_PREFIX)\nifeq ($(TILES), 1)\n\tcp -R --no-preserve=ownership gfx $(DATA_PREFIX)\n\tinstall -Dm755 -t $(SHARE_DIR)/applications/ data/xdg/org.cataclysmdda.CataclysmDDA.desktop\n\tinstall -Dm644 -t $(SHARE_DIR)/metainfo/ data/xdg/org.cataclysmdda.CataclysmDDA.appdata.xml\n\tinstall -Dm644 -t $(SHARE_DIR)/icons/hicolor/scalable/apps/ data/xdg/org.cataclysmdda.CataclysmDDA.svg\nendif\nifeq ($(SOUND), 1)\n\tcp -R --no-preserve=ownership data/sound $(DATA_PREFIX)\nendif\n\tinstall --mode=644 data/changelog.txt data/cataicon.ico data/fontdata.json \\\n                   LICENSE.txt LICENSE-OFL-Terminus-Font.txt -t $(DATA_PREFIX)\nifdef LANGUAGES\n\t$(MAKE) -C lang install\nendif\nendif\n\nifeq ($(TARGETSYSTEM), CYGWIN)\nDATA_PREFIX=$(DESTDIR)$(PREFIX)/share/cataclysm-dda/\nBIN_PREFIX=$(DESTDIR)$(PREFIX)/bin\nLOCALE_DIR=$(DESTDIR)$(PREFIX)/share/locale\nSHARE_DIR=$(DESTDIR)$(PREFIX)/share\ninstall: version $(TARGET)\n\tmkdir -p $(DATA_PREFIX)\n\tmkdir -p $(BIN_PREFIX)\n\tinstall --mode=755 $(TARGET) $(BIN_PREFIX)\n\tcp -R --no-preserve=ownership data/core $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/font $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/json $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/mods $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/names $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/raw $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/motd $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/credits $(DATA_PREFIX)\n\tcp -R --no-preserve=ownership data/title $(DATA_PREFIX)\nifeq ($(TILES), 1)\n\tcp -R --no-preserve=ownership gfx $(DATA_PREFIX)\n\tinstall -Dm755 -t $(SHARE_DIR)/applications/ data/xdg/org.cataclysmdda.CataclysmDDA.desktop\n\tinstall -Dm644 -t $(SHARE_DIR)/metainfo/ data/xdg/org.cataclysmdda.CataclysmDDA.appdata.xml\n\tinstall -Dm644 -t $(SHARE_DIR)/icons/hicolor/scalable/apps/ data/xdg/org.cataclysmdda.CataclysmDDA.svg\nendif\nifeq ($(SOUND), 1)\n\tcp -R --no-preserve=ownership data/sound $(DATA_PREFIX)\nendif\n\tinstall --mode=644 data/changelog.txt data/cataicon.ico data/fontdata.json \\\n                   LICENSE.txt LICENSE-OFL-Terminus-Font.txt -t $(DATA_PREFIX)\nifdef LANGUAGES\n\t$(MAKE) -C lang install\nendif\nendif\n\n\nifeq ($(NATIVE), osx)\nAPPTARGETDIR=Cataclysm.app\nAPPRESOURCESDIR=$(APPTARGETDIR)/Contents/Resources\nAPPDATADIR=$(APPRESOURCESDIR)/data\nifndef FRAMEWORK\n  SDLLIBSDIR=$(shell sdl2-config --libs | sed -n 's/.*-L\\([^ ]*\\) .*/\\1/p')\nendif  # ifndef FRAMEWORK\n\nappclean:\n\trm -rf $(APPTARGETDIR)\n\trm -f data/options.txt\n\trm -f data/keymap.txt\n\trm -f data/auto_pickup.txt\n\trm -f data/fontlist.txt\n\nbuild-data/osx/AppIcon.icns: build-data/osx/AppIcon.iconset\n\ticonutil -c icns $<\n\nifdef OSXCROSS\napp: appclean version $(APPTARGET)\nelse\napp: appclean version build-data/osx/AppIcon.icns $(APPTARGET)\nendif\n\tmkdir -p $(APPTARGETDIR)/Contents\n\tcp build-data/osx/Info.plist $(APPTARGETDIR)/Contents/\n\tmkdir -p $(APPTARGETDIR)/Contents/MacOS\n\tcp build-data/osx/Cataclysm.sh $(APPTARGETDIR)/Contents/MacOS/\n\tmkdir -p $(APPRESOURCESDIR)\n\tcp $(APPTARGET) $(APPRESOURCESDIR)/\n\tcp build-data/osx/AppIcon.icns $(APPRESOURCESDIR)/\n\tmkdir -p $(APPDATADIR)\n\tcp data/fontdata.json $(APPDATADIR)\n\tcp -R data/core $(APPDATADIR)\n\tcp -R data/font $(APPDATADIR)\n\tcp -R data/json $(APPDATADIR)\n\tcp -R data/mods $(APPDATADIR)\n\tcp -R data/names $(APPDATADIR)\n\tcp -R data/raw $(APPDATADIR)\n\tcp -R data/motd $(APPDATADIR)\n\tcp -R data/credits $(APPDATADIR)\n\tcp -R data/title $(APPDATADIR)\nifdef LANGUAGES\n\t$(MAKE) -C lang\n\tmkdir -p $(APPRESOURCESDIR)/lang/mo/\n\tcp -pR lang/mo/* $(APPRESOURCESDIR)/lang/mo/\nendif\nifeq ($(SOUND), 1)\n\tcp -R data/sound $(APPDATADIR)\nendif  # ifeq ($(SOUND), 1)\n\tcp -R gfx $(APPRESOURCESDIR)/\nifdef FRAMEWORK\n\tcp -R $(FRAMEWORKSDIR)/SDL2.framework $(APPRESOURCESDIR)/\n\tcp -R $(FRAMEWORKSDIR)/SDL2_image.framework $(APPRESOURCESDIR)/\n\tcp -R $(FRAMEWORKSDIR)/SDL2_ttf.framework $(APPRESOURCESDIR)/\nifeq ($(SOUND), 1)\n\tcp -R $(FRAMEWORKSDIR)/SDL2_mixer.framework $(APPRESOURCESDIR)/\nendif  # ifeq ($(SOUND), 1)\nendif  # ifdef FRAMEWORK\n\tdylibbundler -of -b -x $(APPRESOURCESDIR)/$(APPTARGET) -d $(APPRESOURCESDIR)/ -p @executable_path/\n\ndmgdistclean:\n\trm -rf Cataclysm\n\trm -f Cataclysm.dmg\n\trm -rf lang/mo\n\ndmgdist: dmgdistclean $(L10N) app\nifdef OSXCROSS\n\tmkdir Cataclysm\n\tcp -a $(APPTARGETDIR) Cataclysm/$(APPTARGETDIR)\n\tcp build-data/osx/DS_Store Cataclysm/.DS_Store\n\tcp build-data/osx/dmgback.png Cataclysm/.background.png\n\tln -s /Applications Cataclysm/Applications\n\tgenisoimage -quiet -D -V \"Cataclysm DDA\" -no-pad -r -apple -o Cataclysm-uncompressed.dmg Cataclysm/\n\tdmg dmg Cataclysm-uncompressed.dmg Cataclysm.dmg\n\trm Cataclysm-uncompressed.dmg\nelse\n\tplutil -convert binary1 Cataclysm.app/Contents/Info.plist\n\tdmgbuild -s build-data/osx/dmgsettings.py \"Cataclysm DDA\" Cataclysm.dmg\nendif\n\nendif  # ifeq ($(NATIVE), osx)\n\n$(BINDIST): distclean version $(TARGET) $(L10N) $(BINDIST_EXTRAS) $(BINDIST_LOCALE)\n\tmkdir -p $(BINDIST_DIR)\n\tcp -R $(TARGET) $(BINDIST_EXTRAS) $(BINDIST_DIR)\n\t$(foreach lib,$(INSTALL_EXTRAS), install --strip $(lib) $(BINDIST_DIR))\nifdef LANGUAGES\n\tcp -R --parents lang/mo $(BINDIST_DIR)\nendif\n\t$(BINDIST_CMD)\n\nexport ODIR _OBJS LDFLAGS CXX W32FLAGS DEFINES CXXFLAGS TARGETSYSTEM CLANG PCH PCHFLAGS\n\nctags: $(ASTYLE_SOURCES)\n\tctags $^\n\t./tools/json_tools/cddatags.py\n\netags: $(ASTYLE_SOURCES)\n\tetags $^\n\tfind data -name \"*.json\" -print0 | xargs -0 -L 50 etags --append\n\nifneq ($(IS_WINDOWS_HOST),1)\n# Parallel astyle for posix hosts where fork and filesystem are cheap.\n\nASTYLE_CHECK_STAMPS = $(sort $(patsubst %,$(ODIR)/%.astyle-check-stamp,$(ASTYLE_SOURCES)))\nastyle: $(ASTYLE_CHECK_STAMPS)\n$(ASTYLE_CHECK_STAMPS): $(ODIR)/%.astyle-check-stamp : %\n\t$(ASTYLE_BINARY) --options=.astylerc -n $< && mkdir -p $(@D) && touch $@\n\nelse\n# Serial astyle for Windows hosts which processes all files in one invocation.\n\nastyle: $(ODIR)/.astyle-check-stamp\n$(ODIR)/.astyle-check-stamp: $(ASTYLE_SOURCES)\n\t$(ASTYLE_BINARY) --options=.astylerc -n $?\n\tmkdir -p $(@D) && touch $@\n\nendif\n\nastyle-fast: $(ASTYLE_SOURCES)\n\techo $(ASTYLE_SOURCES) | xargs -P 0 -L 1 $(ASTYLE_BINARY) --quiet --options=.astylerc -n\n\nastyle-diff: $(ASTYLE_SOURCES)\n\t$(ASTYLE_BINARY) --options=.astylerc -n $$(git diff --name-only src/*.h src/*.cpp tests/*.h tests/*.cpp tools/*.h tools/*.cpp)\n\nastyle-all: $(ASTYLE_SOURCES)\n\t$(ASTYLE_BINARY) --options=.astylerc -n $(ASTYLE_SOURCES)\n\tmkdir -p $(ODIR) && touch $(ODIR)/.astyle-check-stamp\n\n# Test whether the system has a version of astyle that supports --dry-run\nifeq ($(shell $(ASTYLE_BINARY) -Q -X --dry-run src/game.h >/dev/null 2>/dev/null && echo foo),foo)\n  ASTYLE_CHECK=$(shell $(ASTYLE_BINARY) --options=.astylerc --dry-run -X -Q --ascii $(ASTYLE_SOURCES) | sed -E \"s/Formatted[[:space:]]+(.*)/Needs formatting: \\1\\\\\\n/\" | tr -d '\\n')\nendif\n\nastyle-check:\nifdef ASTYLE_CHECK\n\t$(info $(ASTYLE_BINARY) -V: $(shell $(ASTYLE_BINARY) -V))\n\t@if [ \"$(findstring Needs formatting:,$(ASTYLE_CHECK))\" = \"\" ]; then echo \"no astyle regressions\";\\\n        else printf \"astyle regressions found.\\n$(ASTYLE_CHECK)\" && false; fi\nelse\n\t@echo Cannot run an astyle check, your system either does not have astyle, or it is too old.\nendif\n\nJSON_SOURCES := $(shell find data -name '* *' -prune -o -name \"*.json\" -print)\nJSON_CHECK_STAMPS = $(sort $(patsubst %,$(ODIR)/%,$(JSON_SOURCES:.json=.jstyle-check-stamp)))\nstyle-json : $(JSON_CHECK_STAMPS) $(JSON_FORMATTER_BIN)\n$(JSON_CHECK_STAMPS) : $(ODIR)/%.jstyle-check-stamp : %.json $(JSON_FORMATTER_BIN)\nifndef CROSS\n\t$(JSON_FORMATTER_BIN) $< && mkdir -p $(@D) && touch $@\nelse\n\t@echo Cannot run json formatter in cross compiles.\nendif\n\nstyle-all-json: $(JSON_FORMATTER_BIN)\n\tfind data -name \"*.json\" -print0 | xargs -0 -L 1 $(JSON_FORMATTER_BIN)\n\nstyle-all-json-parallel: $(JSON_FORMATTER_BIN)\n\tfind data -name \"*.json\" -print0 | xargs -0 -L 1 -P $$(nproc) $(JSON_FORMATTER_BIN)\n\n$(JSON_FORMATTER_BIN): $(JSON_FORMATTER_SOURCES)\n\t$(CXX) $(CXXFLAGS) -MMD -MP $(TOOL_CXXFLAGS) -Itools/format -Isrc -isystem src/third-party \\\n\t  $(JSON_FORMATTER_SOURCES) -o $(JSON_FORMATTER_BIN)\n\npython-check:\n\tflake8\n\ntests: version $(BUILD_PREFIX)cataclysm.a $(LOCALIZE_TEST_DEPS)\n\t$(MAKE) -C tests\n\ncheck: version $(BUILD_PREFIX)cataclysm.a $(LOCALIZE_TEST_DEPS)\n\t$(MAKE) -C tests check\n\nclean-tests:\n\t$(MAKE) -C tests clean\n\nobject_creator: version $(BUILD_PREFIX)cataclysm.a\n\t$(MAKE) -C object_creator\n\nobject_creator.exe: version $(BUILD_PREFIX)cataclysm.a\n\t$(MAKE) -C object_creator object_creator.exe\n\nclean-object_creator:\n\t$(MAKE) -C object_creator clean\n\nclean-pch:\n\trm -f pch/*pch.hpp.gch\n\trm -f pch/*pch.hpp.pch\n\trm -f pch/*pch.hpp.d\n\t$(MAKE) -C tests clean-pch\n\nclean-lang:\n\t$(MAKE) -C lang clean\n\n.PHONY: tests check ctags etags clean-tests clean-object_creator clean-pch clean-lang install lint\n\n-include ${OBJS:.o=.d}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.7080078125,
          "content": "# Cataclysm: Dark Days Ahead\n\nCataclysm: Dark Days Ahead is a turn-based survival game set in a post-apocalyptic world. While some have described it as a \"zombie game\", there is far more to Cataclysm than that. Struggle to survive in a harsh, persistent, procedurally generated world. Scavenge the remnants of a dead civilization for food, equipment, or, if you are lucky, a vehicle with a full tank of gas to get you the hell out of Dodge. Fight to defeat or escape from a wide variety of powerful monstrosities, from zombies to giant insects to killer robots and things far stranger and deadlier, and against the others like yourself, who want what you have...\n\n<p align=\"center\">\n    <img src=\"./data/screenshots/ultica-showcase-sep-2021.png\" alt=\"Tileset: Ultica\">\n</p>\n\n## Downloads\n\n**Releases** - [Stable](https://cataclysmdda.org/releases/) | [Experimental](https://cataclysmdda.org/experimental/)\n\n**Source** - The source can be downloaded as a [.zip archive](https://github.com/CleverRaven/Cataclysm-DDA/archive/master.zip), or cloned from our [GitHub repo](https://github.com/CleverRaven/Cataclysm-DDA/).\n\n[![General build matrix](https://github.com/CleverRaven/Cataclysm-DDA/actions/workflows/matrix.yml/badge.svg)](https://github.com/CleverRaven/Cataclysm-DDA/actions/workflows/matrix.yml)\n[![Coverage Status](https://coveralls.io/repos/github/CleverRaven/Cataclysm-DDA/badge.svg?branch=master)](https://coveralls.io/github/CleverRaven/Cataclysm-DDA?branch=master)\n[![Open Source Helpers](https://www.codetriage.com/cleverraven/cataclysm-dda/badges/users.svg)](https://www.codetriage.com/cleverraven/cataclysm-dda)\n[![Commit Activity](https://img.shields.io/github/commit-activity/m/CleverRaven/Cataclysm-DDA)](https://github.com/CleverRaven/Cataclysm-DDA/graphs/contributors)\n[![Lines of Code](https://tokei.rs/b1/github/CleverRaven/Cataclysm-DDA?category=code)](https://github.com/XAMPPRocky/tokei)\n[![TODOs](https://badgen.net/https/api.tickgit.com/badgen/github.com/CleverRaven/Cataclysm-DDA)](https://www.tickgit.com/browse?repo=github.com/CleverRaven/Cataclysm-DDA)\n\n### Packaging status\n\n#### Arch Linux\n\nNcurses and tiles versions are available in the [community repo](https://www.archlinux.org/packages/?q=cataclysm-dda).\n\n`sudo pacman -S cataclysm-dda`\n\n#### Fedora\n\nNcurses and tiles versions are available in the [official repos](https://src.fedoraproject.org/rpms/cataclysm-dda).\n\n`sudo dnf install cataclysm-dda`\n\n#### Debian / Ubuntu\n\nNcurses and tiles versions are available in the [official repos](https://tracker.debian.org/pkg/cataclysm-dda).\n\n`sudo apt install cataclysm-dda-curses cataclysm-dda-sdl`\n\n#### Flathub\n\n[Download from Flathub](https://flathub.org/apps/org.cataclysmdda.CataclysmDDA)\n\n## Compile\n\nPlease read [COMPILING.md](doc/COMPILING/COMPILING.md) - it covers general information and more specific recipes for Linux, OS X, Windows and BSD. See [COMPILER_SUPPORT.md](doc/COMPILING/COMPILER_SUPPORT.md) for details on which compilers we support. And you can always dig for more information in [doc/](https://github.com/CleverRaven/Cataclysm-DDA/tree/master/doc).\n\nWe also have the following build guides:\n* Building on Windows with `MSYS2` at [COMPILING-MSYS.md](doc/COMPILING/COMPILING-MSYS.md)\n* Building on Windows with `vcpkg` at [COMPILING-VS-VCPKG.md](doc/COMPILING/COMPILING-VS-VCPKG.md)\n* Building with `cmake` at [COMPILING-CMAKE.md](doc/COMPILING/COMPILING-CMAKE.md)  (*unofficial guide*)\n\n## Contribute\n\nCataclysm: Dark Days Ahead is the result of contributions from over 1000 volunteers under the Creative Commons Attribution ShareAlike 3.0 license. The code and content of the game is free to use, modify, and redistribute for any purpose whatsoever. See https://creativecommons.org/licenses/by-sa/3.0/ for details.\nSome code distributed with the project is not part of the project and is released under different software licenses; the files covered by different software licenses have their own license notices.\n\nPlease see [CONTRIBUTING.md](doc/CONTRIBUTING.md) for details.\n\nSpecial thanks to the contributors, including but not limited to, people below:\n<a href=\"https://github.com/cleverraven/cataclysm-dda/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=cleverraven/cataclysm-dda\" />\n</a>\n\nMade with [contrib.rocks](https://contrib.rocks).\n\n## Community\n\nForums:\nhttps://discourse.cataclysmdda.org\n\nGitHub repo:\nhttps://github.com/CleverRaven/Cataclysm-DDA\n\nIRC:\n`#CataclysmDDA` on [Libera Chat](https://libera.chat), https://web.libera.chat/#CataclysmDDA\n\nOfficial Discord:\nhttps://discord.gg/jFEc7Yp\n\n## Frequently Asked Questions\n\n#### Is there a tutorial?\n\nYes, you can find the tutorial in the **Special** menu at the main menu (be aware that due to many code changes the tutorial may not function). You can also access documentation in-game via the `?` key.\n\n#### How can I change the key bindings?\n\nPress the `?` key, followed by the `1` key to see the full list of key commands. Press the `+` key to add a key binding, select which action with the corresponding letter key `a-w`, and then the key you wish to assign to that action.\n\n#### How can I start a new world?\n\n**World** on the main menu will generate a fresh world for you. Select **Create World**.\n\n#### I've found a bug. What should I do?\n\nPlease submit an issue on [our GitHub page](https://github.com/CleverRaven/Cataclysm-DDA/issues/) using [bug report template](https://github.com/CleverRaven/Cataclysm-DDA/issues/new?template=bug_report.md). If you're not able to, send an email to `kevin.granade@gmail.com`.\n\n#### I would like to make a suggestion. What should I do?\n\nPlease submit an issue on [our GitHub page](https://github.com/CleverRaven/Cataclysm-DDA/issues/) using [feature request template](https://github.com/CleverRaven/Cataclysm-DDA/issues/new?template=feature_request.md).\n"
        },
        {
          "name": "SIGNOFF",
          "type": "blob",
          "size": 2.8076171875,
          "content": "The undersigned release all their contributions to the Cataclysm project under the Creative Commons Attribution-ShareAlike 3.0 Unported License.\n\nKevin Granade <kevin.granade@gmail.com>\nMatthew Moffatt <TheDarklingWolf@gmail.com>\norigamiwolf <origamiwolf@gmail.com>\nFrank Huard <veryinky@gmail.com>\ndaftfad <daftfjord@gmail.com>\nZwodahS <ericnjf@gmail.com>\nWilliham \"Wito\" Totland <williham.totland@gmail.com>\nZach Morgan <zpmorgan@gmail.com>\nLivingstone <minexal@gmail.com>\nEthan \"Soron\" Kaminski <ethan.kaminski@gmail.com>\nSoyweiser <soyweiser@gmail.com>\nJason Gilbert <0jason.gilbert@gmail.com>\nCharlie Nolan (FunnyMan3595) <funnyman3595@gmail.com>\nuzername (some_name) <ivanpost777@gmail.com>\nChristian Buskirk (i2amroy) <i2amroy@gmail.com>\nKevin McKayven (GlyphGryph) <glyphgryph@gmail.com>\nOzone <satori.jj@gmail.com>\nHerbert Jones <jones.herbert@gmail.com>\nJustin \"MacrosBlackD\" Drury <macrosblackd@gmail.com>\nAtomicDryad <fnord@fnord> / <atomicdryad@gmail.com>\nIzicata\nVoker57 <voker57@gmail.com>\nTommy <yobbobanana@gmx.com>\nteh-sam\nAlex Casey (Tamunshin) <tamunshin@hotmail.com>\nStevensonz <money3030@yahoo.com.>\nDavid Holmes <dholmes@dholmes.us>\nSean McLaughlin <galenevil@hotmail.com> / <galenevil.eve@gmail.com>\nRobert Sørlie (1942rob) <1942rob@gmail.com>\nAngela Graves <Rivet.the.Zombie@gmail.com>\nIan Strachan <ian_e_strachan@hotmail.com>\nGreg McNew <gmcnew@gmail.com>\nNaturesWitness <natureswitness@gmail.com>\nCodeHero <codehero@nerdpol.ch>\ntasetase \"Tase\" <tase on irc.freenode.net>\nBarry Peddycord III <ishara@isharacomix.org>\nVidar Engh Skaugen <vidarsk@gmail.com>\nBrandon Bergren (Bdragon) <bdragon@rtk0.net> / <git@bdragon.rtk0.net>\nHenrik \"Tivec\" Bergvin <henrik@bergvin.com>\nFryCarson <frycarson@gmail.com>\nTranquilMarmot (Nate Moore) <nate272@gmail.com>\nStéphane Travostino <stephane.travostino@gmail.com>\nJeremy Osborne <jeremywosborne@gmail.com>\nDavid \"Davek\" Keaton <keaton.david@gmail.com>\nPiotr S. Staszewski (drbig) <p.staszewski@gmail.com>\nDonnie \"Desrik\" McNabb <koderkore@gmail.com>\nChristian R. Byrne <christianbyrne2012@gmail.com>\nDmitry \"illi-kun\" Serov <D.E.Serov@gmail.com>\nKarl Parakenings (karlnp) <karl.parakenings@gmail.com>\nRob Palkowski <dopeghoti@gmail.com>\nZaweri Runewright <mrampuja@gmail.com>\nCliffs Dover <cliffs@dancingbottle.com>\nSven-Hendrik \"svenstaro\" Haase <svenstaro@gmail.com>\nNick Owens <mischief@offblast.org>\nBrett Dong <brett.browning.dong@gmail.com>\nBarry Gackle <bdgackle@gmail.com>\nBorkBorkGoesTheCode <imreallytoolazy@protonmail.com>\nPatrik Stridvall <patrik@stridvall.se>\nRyan Schneider (RadHazard) <rslego@gmail.com>\nPaul Bransford (draeath) <draeath@gmail.com>\nMark Langsdorf (mlangsdorf) <mark.langsdorf@gmail.com> / <mlangsdo@redhat.com>\nRatul Saha (sahaRatul) <ratul.saha@arrakis.in> / <50.ratulsaha@gmail.com>\nDavis Bray (Kaltag1925) <pdavisbray@gmail.com>\nNicolas Appriou <nicolas.appriou@gmail.com>\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-data",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "cataclysm-launcher",
          "type": "blob",
          "size": 1.0966796875,
          "content": "#!/bin/sh\n\nprinterr() {\n    echo \"ERROR: $*\" >&2\n}\n\nTARGET_FILE=$0\n\ncd \"$(dirname \"$TARGET_FILE\")\" || {\n    printerr \"Could not change directory to '$TARGET_FILE'\"\n    exit 1\n}\nTARGET_FILE=\"$(basename \"$TARGET_FILE\")\"\n\n# Iterate down a (possible) chain of symlinks.\nwhile [ -L \"$TARGET_FILE\" ]\ndo\n    TARGET_FILE=\"$(readlink \"$TARGET_FILE\")\"\n    cd \"$(dirname \"$TARGET_FILE\")\" || {\n        printerr \"Could not change directory to '$TARGET_FILE'\"\n        exit 1\n    }\n    TARGET_FILE=\"$(basename \"$TARGET_FILE\")\"\ndone\n\n# Find the physical path and name of target file.\nDIR=$(pwd -P)\nBIN=$(basename \"$0\")\n\ncd \"$DIR\" || {\n    _errcode=$?\n    printerr \"Could not change directory to '$DIR'\"\n    exit $_errcode\n}\n\n# If name does not match a binary or is this same script, find the right one\nif [ ! -f \"$BIN\" ] || [ \"$BIN\" = \"cataclysm-launcher\" ]\nthen\n    BIN=\n    for bin in cataclysm-tiles cataclysm\n    do\n    [ -f \"$bin\" ] && BIN=\"$bin\" break\n    done\nfi\n\nif [ \"$BIN\" ]\nthen\n    env LD_LIBRARY_PATH=\"${DIR}:${LD_LIBRARY_PATH}\" ./\"${BIN}\" \"$@\"\nelse\n    printerr \"Couldn't find cataclysm game binary in '$DIR'/\"\n    exit 1\nfi\n"
        },
        {
          "name": "cmake_uninstall.cmake.in",
          "type": "blob",
          "size": 0.90234375,
          "content": "if (NOT EXISTS \"@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\")\n    message(FATAL_ERROR\n            \"Cannot find install manifest: \\\"@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\\\"\")\nendif ()\n\nfile(READ \"@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\" FILE_LIST)\nstring(REGEX REPLACE \"\\n\" \";\" FILE_LIST \"${FILE_LIST}\")\nforeach (FILE_NAME ${FILE_LIST})\n    message(STATUS \"Uninstalling \\\"$ENV{DESTDIR}${FILE_NAME}\\\"\")\n    if (EXISTS \"$ENV{DESTDIR}${FILE_NAME}\")\n        exec_program(\n                \"@CMAKE_COMMAND@\" ARGS \"-E remove \\\"$ENV{DESTDIR}${FILE_NAME}\\\"\"\n                OUTPUT_VARIABLE RM_OUT\n                RETURN_VALUE RM_RETVAL)\n        if (\"${RM_RETVAL}\" STREQUAL 0)\n        else ()\n            message(FATAL_ERROR \"Problem when removing \\\"$ENV{DESTDIR}${FILE_NAME}\\\"\")\n        endif ()\n    else ()\n        message(STATUS \"File \\\"$ENV{DESTDIR}${FILE_NAME}\\\" does not exist.\")\n    endif ()\nendforeach ()\n\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "doxygen_doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "gfx",
          "type": "tree",
          "content": null
        },
        {
          "name": "lang",
          "type": "tree",
          "content": null
        },
        {
          "name": "lgtm",
          "type": "tree",
          "content": null
        },
        {
          "name": "msvc-full-features",
          "type": "tree",
          "content": null
        },
        {
          "name": "msvc-object_creator",
          "type": "tree",
          "content": null
        },
        {
          "name": "object_creator",
          "type": "tree",
          "content": null
        },
        {
          "name": "org.cataclysmdda.CataclysmDDA.json",
          "type": "blob",
          "size": 1.3134765625,
          "content": "{\n  \"id\": \"org.cataclysmdda.CataclysmDDA\",\n  \"default-branch\": \"experimental\",\n  \"runtime\": \"org.freedesktop.Platform\",\n  \"runtime-version\": \"22.08\",\n  \"sdk\": \"org.freedesktop.Sdk\",\n  \"sdk-extensions\": [\n    \"org.freedesktop.Sdk.Extension.llvm16\"\n  ],\n  \"command\": \"cataclysm-tiles\",\n  \"finish-args\": [\n    \"--socket=pulseaudio\",\n    \"--socket=wayland\",\n    \"--socket=fallback-x11\",\n    \"--share=ipc\",\n    \"--device=dri\"\n  ],\n  \"modules\": [\n    {\n      \"name\": \"cataclysm-tiles\",\n      \"buildsystem\": \"simple\",\n      \"build-options\": {\n        \"append-path\": \"/usr/lib/sdk/llvm16/bin\",\n        \"prepend-ld-library-path\": \"/usr/lib/sdk/llvm16/lib\",\n        \"env\": {\n          \"MAKE_ARGS\": \"PREFIX=/app LANGUAGES=all CLANG=1 CCACHE=1 USE_XDG_DIR=1 TILES=1 SOUND=1 RELEASE=1 TESTS=0 ASTYLE=0 LINTJSON=0\"\n        }\n      },\n      \"build-commands\": [\n        \"mv soundpack/sound/CC-Sounds/ data/sound/\",\n        \"make -j $FLATPAK_BUILDER_N_JOBS $MAKE_ARGS\",\n        \"make $MAKE_ARGS localization\",\n        \"make $MAKE_ARGS install\"\n      ],\n      \"sources\": [\n        { \"type\": \"git\", \"url\": \"https://github.com/CleverRaven/Cataclysm-DDA\", \"branch\": \"master\" },\n        {\n          \"type\": \"git\",\n          \"url\": \"https://github.com/Fris0uman/CDDA-Soundpacks\",\n          \"branch\": \"main\",\n          \"dest\": \"soundpack\"\n        }\n      ]\n    }\n  ]\n}\n"
        },
        {
          "name": "org.cataclysmdda.CataclysmDDA.yml",
          "type": "blob",
          "size": 1.451171875,
          "content": "id: \"org.cataclysmdda.CataclysmDDA\"\nruntime: \"org.freedesktop.Platform\"\nruntime-version: '23.08'\nsdk: org.freedesktop.Sdk\ncommand: cataclysm-tiles\nfinish-args: \n  - --socket=pulseaudio\n  - --socket=wayland\n  - --socket=fallback-x11\n  - --share=ipc\n  - --device=dri\n\nmodules:\n  - name: cataclysm-tiles\n    buildsystem: simple\n    build-options:\n      env:\n        MAKE_ARGS: \"PREFIX=/app LANGUAGES=all USE_XDG_DIR=1 TILES=1 SOUND=1 RELEASE=1 RUNTESTS=0 ASTYLE=0 LINTJSON=0\"\n    build-commands:\n      - sed -i \"/#WARNINGS = -w/c WARNINGS = -w\" Makefile\n      - make -j $FLATPAK_BUILDER_N_JOBS $MAKE_ARGS\n      - make $MAKE_ARGS localization\n      - make $MAKE_ARGS install\n      - install -Dm644 data/xdg/org.cataclysmdda.CataclysmDDA.svg /app/share/icons/hicolor/scalable/apps/org.cataclysmdda.CataclysmDDA.svg\n      - install -Dm755 data/xdg/org.cataclysmdda.CataclysmDDA.desktop /app/share/applications/org.cataclysmdda.CataclysmDDA.desktop\n      - install -Dm644 org.cataclysmdda.CataclysmDDA.appdata.xml /app/share/metainfo/org.cataclysmdda.CataclysmDDA.appdata.xml\n    sources:\n      - type: git\n        url: https://github.com/CleverRaven/Cataclysm-DDA.git\n        commit: \"3a1e04656d51c79af87b5505b1b3c37867378cce\"\n      - type: file\n        url: https://raw.githubusercontent.com/CleverRaven/Cataclysm-DDA/dedfc2e5310b505a9728098d1b59777cb8b1e861/data/xdg/org.cataclysmdda.CataclysmDDA.appdata.xml\n        sha256: ca7bf1a3a0598729440aaae73111ffa3992121fa19f0e36d988eee22055db29e\n"
        },
        {
          "name": "pch",
          "type": "tree",
          "content": null
        },
        {
          "name": "snapcraft.yaml",
          "type": "blob",
          "size": 1.1611328125,
          "content": "name: cataclysm\nversion: git\nsummary: Post-apocalyptic turn-based survival game\nicon: data/xdg/cataclysm-dda.svg\narchitectures:\n  - build-on: [amd64]\n    run-on: [amd64]\ndescription: |\n  Cataclysm: Dark Days Ahead is a turn-based survival game set in a post-apocalyptic world. Surviving is difficult, you have been thrown, ill-equipped, into a landscape now riddled with monstrosities of which flesh eating zombies are neither the strangest nor the deadliest.\n\n  Note: This snap install the ncurses version of the game. Start playing by running the command `cataclysm` on your favorite terminal after installation.\n\n  License: CC-BY-SA 3.0 unported\ngrade: devel\nconfinement: strict\napps:\n  cataclysm:\n    command: cataclysm-launcher\n    environment:\n      LD_LIBRARY_PATH: $LD_LIBRARY_PATH:$SNAP/usr/lib/x86_64-linux-gnu/\n\nparts:\n  cataclysm:\n    plugin: make\n    build-packages: [astyle, ccache, build-essential, libncurses5-dev, libncursesw5-dev, gettext]\n    override-build: make NATIVE=linux64 RELEASE=1 LTO=1 LOCALIZE=1 CCACHE=1 USE_HOME_DIR=1 && mv * $SNAPCRAFT_PART_INSTALL\n    stage: [data, cataclysm, cataclysm-launcher, usr]\n    prime: [data, cataclysm, cataclysm-launcher, usr]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "utilities",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}