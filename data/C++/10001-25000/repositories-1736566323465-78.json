{
  "metadata": {
    "timestamp": 1736566323465,
    "page": 78,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ZLMediaKit/ZLMediaKit",
      "stars": 14420,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.52734375,
          "content": "# This is for clang-format >= 9.0.\n#\n# clang-format --version\n# clang-format version 9.0.1 (Red Hat 9.0.1-2.module+el8.2.0+5494+7b8075cf)\n#\n# 详细说明见: https://clang.llvm.org/docs/ClangFormatStyleOptions.html\n# 部分参数会随版本变化.\n---\nLanguage: Cpp\n# 基于 WebKit 的风格, https://www.webkit.org/coding/coding-style.html\nBasedOnStyle: WebKit\n\n# 以下各选项按字母排序\n\n# public/protected/private 不缩进\nAccessModifierOffset: -4\n# 参数过长时统一换行\nAlignAfterOpenBracket: AlwaysBreak\n# clang-format >= 13 required, map 之类的内部列对齐\n# AlignArrayOfStructures: Left\n# 换行符统一在 ColumnLimit 最右侧\nAlignEscapedNewlines: Right\n# 不允许短代码块单行, 即不允许单行代码: if (x) return;\nAllowShortBlocksOnASingleLine: false\n# 只允许 Inline 函数单行\nAllowShortFunctionsOnASingleLine: Inline\n# 模板声明换行\nAlwaysBreakTemplateDeclarations: Yes\n# 左开括号不换行\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterCaseLabel: false\n  AfterClass: false\n  # BraceWrappingAfterControlStatementStyle: MultiLine\n  AfterEnum: false\n  AfterFunction: false\n  AfterNamespace: false\n  AfterStruct: false\n  AfterUnion: false\n  AfterExternBlock: false\n  BeforeCatch: false\n  BeforeElse: false\n  BeforeLambdaBody: false\n  BeforeWhile: false\n  IndentBraces: false\n  SplitEmptyFunction: false\n  SplitEmptyRecord: false\n  SplitEmptyNamespace: false\n# 构造函数初始化时在 `,` 前换行, 和 `:` 对齐显得整齐\nBreakConstructorInitializers: BeforeComma\n# 继承过长需要换行时也在 `,` 前\nBreakInheritanceList: BeforeComma\n# 列宽 160\nColumnLimit: 160\n# c++11 括号内起始/结束无空格, false 会加上\nCpp11BracedListStyle: false\n# 命名空间后的注释会修正为: // namespace_name\nFixNamespaceComments: true\n\n#switch case的缩进\nIndentCaseLabels: true\n#允许单行case\nAllowShortCaseLabelsOnASingleLine: true\n\n# clang-format >= 13 required, lambda 函数内部缩进级别和外部一致, 默认会增加一级缩进\n# LambdaBodyIndentation: OuterScope\n# 命名空间不缩进\nNamespaceIndentation: None\n# PPIndentWidth: 2\n# */& 靠近变量, 向右靠\nPointerAlignment: Right\n# c++11 使用 {} 构造时和变量加个空格\nSpaceBeforeCpp11BracedList: true\n# 继承时 `:` 前加空格\nSpaceBeforeInheritanceColon: true\n# () 前不加空格, do/for/if/switch/while 除外\nSpaceBeforeParens: ControlStatements\n# 空 {} 中不加空格\nSpaceInEmptyBlock: false\nStandard: C++11\n# Tab 占 4 位\nTabWidth: 4\n# 不使用 TAB\nUseTab: Never\n---\nLanguage: Java\n---\nLanguage: JavaScript\n...\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.05078125,
          "content": "*.h linguist-language=cpp\n*.c linguist-language=cpp\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5673828125,
          "content": "# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n*.d\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n#*.dylib\n#*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.lib\n\n# Executables\n#*.exe\n*.out\n*.app\n/X64/\n\n\n*.DS_Store\n\n/cmake-build-debug/\n/cmake-build-release/\n/linux/\n/.vs/\n/.vscode/\n/.idea/\n/c_wrapper/.idea/\n/release/\n/out/\n/Android/.idea/\n/Android/app/src/main/cpp/libs_export/\n/3rdpart/media-server/.idea/\n/3rdpart/media-server/.idea/\n/build/\n/3rdpart/media-server/.idea/\n/ios/\n/cmake-build-*\n/3rdpart/ZLToolKit/cmake-build-mq/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.392578125,
          "content": "[submodule \"ZLToolKit\"]\n\tpath = 3rdpart/ZLToolKit\n\turl = https://gitee.com/xia-chu/ZLToolKit\n[submodule \"3rdpart/media-server\"]\n\tpath = 3rdpart/media-server\n\turl = https://gitee.com/ireader/media-server\n[submodule \"3rdpart/jsoncpp\"]\n\tpath = 3rdpart/jsoncpp\n\turl = https://gitee.com/mirrors/jsoncpp.git\n[submodule \"www/webassist\"]\n\tpath = www/webassist\n\turl = https://gitee.com/victor1002/zlm_webassist\n"
        },
        {
          "name": ".gitmodules_github",
          "type": "blob",
          "size": 0.416015625,
          "content": "[submodule \"ZLToolKit\"]\n\tpath = 3rdpart/ZLToolKit\n\turl = https://github.com/ZLMediaKit/ZLToolKit\n[submodule \"3rdpart/media-server\"]\n\tpath = 3rdpart/media-server\n\turl = https://github.com/ireader/media-server\n[submodule \"3rdpart/jsoncpp\"]\n    path = 3rdpart/jsoncpp\n    url = https://github.com/open-source-parsers/jsoncpp.git\n[submodule \"www/webassist\"]\n\tpath = www/webassist\n\turl = https://github.com/1002victor/zlm_webassist"
        },
        {
          "name": "3rdpart",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 4.2470703125,
          "content": "#代码贡献者列表，提交pr时请留下您的联系方式\n#Code contributor list, please leave your contact information when submitting a pull request\n\nxiongziliang <771730766@qq.com>\nGemfield <gemfield@civilnet.cn>\nhuohuo <913481084@qq.com>\n[南冠彤](https://github.com/nanguantong2)\n[凹凸慢](https://github.com/tsingeye)\n[史前小虫](https://github.com/zqsong)\n[清涩绿茶](https://github.com/baiyfcu)\n[3503207480](https://github.com/3503207480)\n[DroidChow](https://github.com/DroidChow)\n[火宣](https://github.com/ChinaCCF)\n[γ瑞γミ](https://github.com/JerryLinGd)\n[茄子](https://github.com/taotaobujue2008)\n[好心情](<409257224@qq.com>)\n[Xiaofeng Wang](https://github.com/wasphin)\n[doodoocoder](https://github.com/doodoocoder)\n[qingci](https://github.com/Colibrow)\nZhou Weimin <zhouweimin@supremind.com>\n[hewenyuan](https://gitee.com/kingyuanyuan)\nsunhui <sunhui200475@163.com>\nmirs <fangpengcheng@bilibili.com>\nKevin Cheng <kevin__cheng@outlook.com>\nLiu Jiang <root@oopy.org>\nalong(https://github.com/alongl)\nqingci <xpy66swsry@gmail.com>\nlyg1949 <zh.ghlong@qq.com>\nzhlong <zh.ghlong@qq.com>\n大裤衩 <3503207480@qq.com>\ndroid.chow <droid.chow@gmail.com>\n[陈晓林](https://github.com/musicwood)\n[老衲不出家](https://github.com/monktan89)\nbig panda <2381267071@qq.com>\nCharleyWangHZ(https://github.com/CharleyWangHZ)\nJohnny(https://github.com/johzzy)\nDoubleX69(https://github.com/DoubleX69)\nlawrencehj(https://github.com/lawrencehj)\nyangkun <xyyangkun@163.com>\nXinghua Zhao <(holychaossword@hotmail.com>\n[hejilin](https://github.com/brokensword2018)\n[rqb500](https://github.com/rqb500)\n[Alex](https://github.com/alexliyu7352)\n[Dw9](https://github.com/Dw9)\n明月惊鹊 <mingyuejingque@gmail.com>\ncgm <2958580318@qq.com>\nalexliyu7352 <liyu7352@gmail.com>\ncgm <2958580318@qq.com>\n[haorui wang](https://github.com/HaoruiWang)\njoshuafc <joshuafc@foxmail.com>\n[JayChen0519](https://github.com/JayChen0519)\nzx <zuoxue@qq.com>\nwangcker <wangcker@163.com>\nWuPeng <wp@zafu.edu.cn>\n[starry](https://github.com/starry)\n[mtdxc](https://github.com/mtdxc)\n[胡刚风](https://github.com/hugangfeng333)\n[zhao85](https://github.com/zhao85)\n[dreamisdream](https://github.com/dreamisdream)\n[dingcan](https://github.com/dcan123)\n[Haibo Chen](https://github.com/duiniuluantanqin)\n[Leon](https://gitee.com/leon14631)\n[custompal](https://github.com/custompal)\n[PioLing](https://github.com/PioLing)\n[KevinZang](https://github.com/ZSC714725)\n[gongluck](https://github.com/gongluck)\n[a-ucontrol](https://github.com/a-ucontrol)\n[TalusL](https://github.com/TalusL)\n[ahaooahaz](https://github.com/AHAOAHA)\n[TempoTian](https://github.com/TempoTian)\n[Derek Liu](https://github.com/yjkhtddx)\n[ljx0305](https://github.com/ljx0305)\n[朱如洪 ](https://github.com/zhu410289616)\n[lijin](https://github.com/1461521844lijin)\n[PioLing](https://github.com/PioLing)\n[BackT0TheFuture](https://github.com/BackT0TheFuture)\n[perara](https://github.com/perara)\n[codeRATny](https://github.com/codeRATny)\n[dengjfzh](https://github.com/dengjfzh)\n[百鸣](https://github.com/ixingqiao)\n[fruit Juice](https://github.com/xuandu)\n[tbago](https://github.com/tbago)\n[Luosh](https://github.com/Luosh)\n[linxiaoyan87](https://github.com/linxiaoyan)\n[waken](https://github.com/mc373906408)\n[Deepslient](https://github.com/Deepslient)\n[imp_rayjay](https://github.com/rayjay214)\n[ArmstrongCN](https://github.com/ArmstrongCN)\n[leibnewton](https://github.com/leibnewton)\n[Grin](https://github.com/xyyangkun)\n[xbpeng121](https://github.com/xbpeng121)\n[lvchenyun](https://github.com/lvchenyun)\n[Fummowo](https://github.com/Fummowo)\n[Jovial Young ](https://github.com/JHYoung1034)\n[yujitai](https://github.com/yujitai)\n[KisChang](https://github.com/kisChang)\n[zjx94](https://github.com/zjx94)\n[LeiZhi.Mai ](https://github.com/blueskiner)\n[JiaHao](https://github.com/nashiracn)\n[chdahuzi](https://github.com/chdahuzi)\n[snysmtx](https://github.com/snysmtx)\n[SetoKaiba](https://github.com/SetoKaiba)\n[sandro-qiang](https://github.com/sandro-qiang)\n[Paul Philippov](https://github.com/themactep)\n[张传峰](https://github.com/zhang-chuanfeng)\n[lidaofu-hub](https://github.com/lidaofu-hub)\n[huangcaichun](https://github.com/huangcaichun)\n[jamesZHANG500](https://github.com/jamesZHANG500)\n[weidelong](https://github.com/wdl1697454803)\n[小强先生](https://github.com/linshangqiang)"
        },
        {
          "name": "Android",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 19.0927734375,
          "content": "# MIT License\n#\n# Copyright (c) 2016-present The ZLMediaKit project authors. All Rights Reserved.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n#\n\ncmake_minimum_required(VERSION 3.1.3)\n\n# 加载自定义模块\n# Load custom modules\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\nproject(ZLMediaKit LANGUAGES C CXX)\n\n# 使能 C++11\n# Enable C++11\nset(CMAKE_CXX_STANDARD 11)\n\noption(ENABLE_API \"Enable C API SDK\" ON)\noption(ENABLE_API_STATIC_LIB \"Enable mk_api static lib\" OFF)\noption(ENABLE_ASAN \"Enable Address Sanitize\" OFF)\noption(ENABLE_CXX_API \"Enable C++ API SDK\" OFF)\noption(ENABLE_FAAC \"Enable FAAC\" OFF)\noption(ENABLE_FFMPEG \"Enable FFmpeg\" OFF)\noption(ENABLE_HLS \"Enable HLS\" ON)\noption(ENABLE_JEMALLOC_STATIC \"Enable static linking to the jemalloc library\" OFF)\noption(ENABLE_JEMALLOC_DUMP \"Enable jemalloc to dump malloc statistics\" OFF)\noption(ENABLE_MEM_DEBUG \"Enable Memory Debug\" OFF)\noption(ENABLE_MP4 \"Enable MP4\" ON)\noption(ENABLE_MSVC_MT \"Enable MSVC Mt/Mtd lib\" ON)\noption(ENABLE_MYSQL \"Enable MySQL\" OFF)\noption(ENABLE_OPENSSL \"Enable OpenSSL\" ON)\noption(ENABLE_PLAYER \"Enable Player\" ON)\noption(ENABLE_RTPPROXY \"Enable RTPPROXY\" ON)\noption(ENABLE_SERVER \"Enable Server\" ON)\noption(ENABLE_SERVER_LIB \"Enable server as android static library\" OFF)\noption(ENABLE_SRT \"Enable SRT\" ON)\noption(ENABLE_TESTS \"Enable Tests\" ON)\noption(ENABLE_SCTP \"Enable SCTP\" ON)\noption(ENABLE_WEBRTC \"Enable WebRTC\" ON)\noption(ENABLE_X264 \"Enable x264\" OFF)\noption(ENABLE_WEPOLL \"Enable wepoll\" ON)\noption(ENABLE_VIDEOSTACK \"Enable video stack\" OFF)\noption(DISABLE_REPORT \"Disable report to report.zlmediakit.com\" OFF)\noption(USE_SOLUTION_FOLDERS \"Enable solution dir supported\" ON)\n##############################################################################\n# 设置socket默认缓冲区大小为256k.如果设置为0则不设置socket的默认缓冲区大小,使用系统内核默认值(设置为0仅对linux有效)\n# Set the default buffer size of the socket to 256k. If set to 0, the default buffer size of the socket will not be set,\n# and the system kernel default value will be used (setting to 0 is only valid for linux)\nset(SOCKET_DEFAULT_BUF_SIZE 262144 CACHE STRING \"Default buffer size for socket\" FORCE)\n\nif(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n  set(CMAKE_BUILD_TYPE \"Debug\")\nendif()\n\nmessage(STATUS \"编译类型: ${CMAKE_BUILD_TYPE}\")\n\n# 方便排查编译问题, 需要 FORCE CACHE, 否则需要命令行设置才生效\n# To facilitate the troubleshooting of compilation problems, you need to FORCE CACHE, otherwise you need to set it on the command line to take effect\nset(CMAKE_VERBOSE_MAKEFILE ON CACHE INTERNAL \"\" FORCE)\n\n# TODO: include 当前目录会导致 server 编译出错, 待排除\nset(CMAKE_INCLUDE_CURRENT_DIR OFF)\n\n# 安装路径\n# Install path\nif(NOT CMAKE_INSTALL_PREFIX)\n  if(UNIX)\n    set(INSTALL_PATH_LIB     lib${LIB_SUFFIX})\n    set(INSTALL_PATH_INCLUDE include)\n    set(INSTALL_PATH_RUNTIME bin)\n  elseif(WIN32)\n    # Windows 下安装到了用户主目录下?\n    # Install to the user's home directory under Windows?\n    set(INSTALL_PATH_LIB     $ENV{HOME}/${CMAKE_PROJECT_NAME}/lib)\n    set(INSTALL_PATH_INCLUDE $ENV{HOME}/${CMAKE_PROJECT_NAME}/include)\n  else()\n    message(WARNING \"该平台(${CMAKE_SYSTEM_NAME})下暂未设置安装路径\")\n  endif()\nelse()\n  set(INSTALL_PATH_LIB     ${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX})\n  set(INSTALL_PATH_INCLUDE ${CMAKE_INSTALL_PREFIX}/include)\n  set(INSTALL_PATH_RUNTIME ${CMAKE_INSTALL_PREFIX}/bin)\nendif()\n\nstring(TOLOWER ${CMAKE_SYSTEM_NAME} SYSTEM_NAME_LOWER)\n# 设置输出目录, 包括 bin, lib 以及其他文件\n# Windows 也不再区分 32/64\n# Set the output directory, including bin, lib and other files\n# Windows no longer distinguishes 32/64\nset(OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/release/${SYSTEM_NAME_LOWER}/${CMAKE_BUILD_TYPE})\nset(LIBRARY_OUTPUT_PATH    ${OUTPUT_DIR})\nset(EXECUTABLE_OUTPUT_PATH ${OUTPUT_DIR})\n\n# 添加 git 版本信息\n# Add git version information\nset(COMMIT_HASH \"Git_Unkown_commit\")\nset(COMMIT_TIME \"Git_Unkown_time\")\nset(BRANCH_NAME \"Git_Unkown_branch\")\nset(BUILD_TIME \"\")\n\nstring(TIMESTAMP BUILD_TIME \"%Y-%m-%dT%H:%M:%S\")\n\nfind_package(Git QUIET)\nif(GIT_FOUND)\n  execute_process(\n    COMMAND ${GIT_EXECUTABLE} rev-parse --short=7 HEAD\n    OUTPUT_VARIABLE COMMIT_HASH\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    ERROR_QUIET\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\n  execute_process(\n    COMMAND ${GIT_EXECUTABLE} symbolic-ref --short -q HEAD\n    OUTPUT_VARIABLE BRANCH_NAME\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    ERROR_QUIET\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\n\n  execute_process(\n    COMMAND ${GIT_EXECUTABLE} log --format=format:%aI -1\n    OUTPUT_VARIABLE COMMIT_TIME\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    ERROR_QUIET\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\nendif()\n\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/ZLMVersion.h.ini\n  ${CMAKE_CURRENT_BINARY_DIR}/ZLMVersion.h\n  @ONLY)\n\nmessage(STATUS \"Git version is ${BRANCH_NAME} ${COMMIT_HASH}/${COMMIT_TIME} ${BUILD_TIME}\")\n\n##############################################################################\n\n# 方便修改全局变量\n# Convenient to modify global variables\nfunction(update_cached name value)\n  set(\"${name}\" \"${value}\" CACHE INTERNAL \"*** Internal ***\" FORCE)\nendfunction()\n\nfunction(update_cached_list name)\n  set(_tmp_list \"${${name}}\")\n  list(APPEND _tmp_list \"${ARGN}\")\n  list(REMOVE_DUPLICATES _tmp_list)\n  update_cached(${name} \"${_tmp_list}\")\nendfunction()\n\n# TODO:\nfunction(set_file_group prefix)\n  message(STATUS \"set_file_group \" ${prefix} \" \" ${ARGC})\n  foreach(FILE IN LISTS ARGN 1)\n    # Get the directory of the source file\n    get_filename_component(PARENT_DIR \"${FILE}\" DIRECTORY)\n\n    # Remove common directory prefix to make the group\n    string(REPLACE \"${prefix}\" \"\" GROUP \"${PARENT_DIR}\")\n\n    # Make sure we are using windows slashes\n    string(REPLACE \"/\" \"\\\\\" GROUP \"${GROUP}\")\n\n    source_group(\"${GROUP}\" FILES \"${FILE}\")\n  endforeach()\nendfunction()\n\n\nfind_program(CCACHE_FOUND ccache)\nif(CCACHE_FOUND)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK    ccache)\nendif()\n\nif(UNIX)\n  # UNIX/Linux/Darwin\n  set(COMPILE_OPTIONS_DEFAULT\n    \"-fPIC\"\n    \"-Wall;-Wextra\"\n    \"-Wno-unused-function;-Wno-unused-parameter;-Wno-unused-variable;-Wno-deprecated-declarations\"\n    \"-Wno-error=extra;-Wno-error=missing-field-initializers;-Wno-error=type-limits;-Wno-comment\")\n\n  if(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"Debug\")\n    set(COMPILE_OPTIONS_DEFAULT ${COMPILE_OPTIONS_DEFAULT} \"-g3\")\n  else()\n    set(COMPILE_OPTIONS_DEFAULT ${COMPILE_OPTIONS_DEFAULT} \"-g0\")\n  endif()\nelseif(WIN32)\n  if (MSVC)\n    set(COMPILE_OPTIONS_DEFAULT\n            # TODO: /wd4819 应该是不会生效\n            \"/wd4566;/wd4819;/utf-8\"\n            # warning C4530: C++ exception handler used, but unwind semantics are not enabled.\n            \"/EHsc\")\n    # disable Windows logo\n   string(REPLACE \"/nologo\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n   set(CMAKE_STATIC_LINKER_FLAGS \"\")\n  endif()\nendif()\n\nif(CMAKE_HOST_SYSTEM_NAME STREQUAL \"Darwin\")\n  if(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL \"arm64\")\n    include_directories(SYSTEM \"/opt/homebrew/include\")\n  endif()\nendif()\n\n# mediakit 以及各个 runtime 依赖\n# mediakit and various runtime dependencies\nupdate_cached(MK_LINK_LIBRARIES \"\")\nupdate_cached(MK_COMPILE_DEFINITIONS ENABLE_VERSION)\n\nif (DISABLE_REPORT)\n  update_cached_list(MK_COMPILE_DEFINITIONS DISABLE_REPORT)\nendif ()\n\nif(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n  include(CheckCXXSourceCompiles)\n  file(READ ${CMAKE_CURRENT_SOURCE_DIR}/cmake/checks/atomic_check.cpp atomic_check_cpp)\n  check_cxx_source_compiles(\"${atomic_check_cpp}\" HAVE_CXX_ATOMICS_WITHOUT_LIB)\n  if(NOT HAVE_CXX_ATOMICS_WITHOUT_LIB)\n    # cmake --help-policy CMP0075\n    list(APPEND CMAKE_REQUIRED_LIBRARIES \"atomic\")\n    check_cxx_source_compiles(\"${atomic_check_cpp}\" HAVE_CXX_ATOMICS_WITH_LIB)\n    if(NOT HAVE_CXX_ATOMICS_WITH_LIB)\n      message(WARNING \"Compiler doesn't support std::atomic<long long>\")\n    else()\n      update_cached_list(MK_LINK_LIBRARIES atomic)\n    endif()\n  endif()\nendif()\n\n# 多个模块依赖 ffmpeg 相关库, 统一查找\n# Multiple modules depend on ffmpeg related libraries, unified search\nif(ENABLE_FFMPEG)\n  find_package(PkgConfig QUIET)\n  # 查找 ffmpeg/libutil 是否安装\n  # find ffmpeg/libutil installed\n  if(PKG_CONFIG_FOUND)\n    pkg_check_modules(AVUTIL QUIET IMPORTED_TARGET libavutil)\n    if(AVUTIL_FOUND)\n      update_cached_list(MK_LINK_LIBRARIES PkgConfig::AVUTIL)\n      message(STATUS \"found library: ${AVUTIL_LIBRARIES}\")\n    endif()\n  endif()\n\n  # 查找 ffmpeg/libavcodec 是否安装\n  # find ffmpeg/libavcodec installed\n  if(PKG_CONFIG_FOUND)\n    pkg_check_modules(AVCODEC QUIET IMPORTED_TARGET libavcodec)\n    if(AVCODEC_FOUND)\n      update_cached_list(MK_LINK_LIBRARIES PkgConfig::AVCODEC)\n      message(STATUS \"found library: ${AVCODEC_LIBRARIES}\")\n    endif()\n  endif()\n\n  # 查找 ffmpeg/libswscale 是否安装\n  # find ffmpeg/libswscale installed\n  if(PKG_CONFIG_FOUND)\n    pkg_check_modules(SWSCALE QUIET IMPORTED_TARGET libswscale)\n    if(SWSCALE_FOUND)\n      update_cached_list(MK_LINK_LIBRARIES PkgConfig::SWSCALE)\n      message(STATUS \"found library: ${SWSCALE_LIBRARIES}\")\n    endif()\n  endif()\n\n  # 查找 ffmpeg/libswresample 是否安装\n  # find ffmpeg/libswresample installed\n  if(PKG_CONFIG_FOUND)\n    pkg_check_modules(SWRESAMPLE QUIET IMPORTED_TARGET libswresample)\n    if(SWRESAMPLE_FOUND)\n      update_cached_list(MK_LINK_LIBRARIES PkgConfig::SWRESAMPLE)\n      message(STATUS \"found library: ${SWRESAMPLE_LIBRARIES}\")\n    endif()\n  endif()\n\n  # 查找 ffmpeg/libutil 是否安装\n  # find ffmpeg/libutil installed\n  if(NOT AVUTIL_FOUND)\n    find_package(AVUTIL QUIET)\n    if(AVUTIL_FOUND)\n      include_directories(SYSTEM ${AVUTIL_INCLUDE_DIR})\n      update_cached_list(MK_LINK_LIBRARIES ${AVUTIL_LIBRARIES})\n      message(STATUS \"found library: ${AVUTIL_LIBRARIES}\")\n    endif ()\n  endif ()\n\n  # 查找 ffmpeg/libavcodec 是否安装\n  # find ffmpeg/libavcodec installed\n  if(NOT AVCODEC_FOUND)\n    find_package(AVCODEC QUIET)\n    if(AVCODEC_FOUND)\n      include_directories(SYSTEM ${AVCODEC_INCLUDE_DIR})\n      update_cached_list(MK_LINK_LIBRARIES ${AVCODEC_LIBRARIES})\n      message(STATUS \"found library: ${AVCODEC_LIBRARIES}\")\n    endif()\n  endif()\n\n  # 查找 ffmpeg/libswscale 是否安装\n  # find ffmpeg/libswscale installed\n  if(NOT SWSCALE_FOUND)\n    find_package(SWSCALE QUIET)\n    if(SWSCALE_FOUND)\n      include_directories(SYSTEM ${SWSCALE_INCLUDE_DIR})\n      update_cached_list(MK_LINK_LIBRARIES ${SWSCALE_LIBRARIES})\n      message(STATUS \"found library: ${SWSCALE_LIBRARIES}\")\n    endif()\n  endif()\n\n  # 查找 ffmpeg/libswresample 是否安装\n  # find ffmpeg/libswresample installed\n  if(NOT SWRESAMPLE_FOUND)\n    find_package(SWRESAMPLE QUIET)\n    if(SWRESAMPLE_FOUND)\n      include_directories(SYSTEM ${SWRESAMPLE_INCLUDE_DIRS})\n      update_cached_list(MK_LINK_LIBRARIES ${SWRESAMPLE_LIBRARIES})\n      message(STATUS \"found library: ${SWRESAMPLE_LIBRARIES}\")\n    endif()\n  endif()\n\n  if(AVUTIL_FOUND AND AVCODEC_FOUND AND SWSCALE_FOUND AND SWRESAMPLE_FOUND)\n    update_cached_list(MK_COMPILE_DEFINITIONS ENABLE_FFMPEG)\n    update_cached_list(MK_LINK_LIBRARIES ${CMAKE_DL_LIBS})\n  else()\n    set(ENABLE_FFMPEG OFF)\n    message(WARNING \"ffmpeg related functions not found\")\n  endif()\nendif()\n\nif(ENABLE_MEM_DEBUG)\n  update_cached_list(MK_LINK_LIBRARIES\n    \"-Wl,-wrap,free;-Wl,-wrap,malloc;-Wl,-wrap,realloc;-Wl,-wrap,calloc\")\n  update_cached_list(MK_COMPILE_DEFINITIONS ENABLE_MEM_DEBUG)\n  message(STATUS \"Memory debugging enabled\")\nendif()\n\nif(ENABLE_ASAN)\n  list(APPEND COMPILE_OPTIONS_DEFAULT\n    \"-fsanitize=address;-fno-omit-frame-pointer\")\n  # https://github.com/google/sanitizers/wiki/AddressSanitizer#using-addresssanitizer\n  # > In order to use AddressSanitizer you will need to\n  # > compile and link your program using clang with the -fsanitize=address switch.\n  update_cached_list(MK_LINK_LIBRARIES \"-fsanitize=address\")\n  message(STATUS \"Address Sanitize enabled\")\nendif()\n\n# 下载jemalloc后静态编译\n# Static compilation after downloading jemalloc\nset(DEP_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rdpart/external-${CMAKE_SYSTEM_NAME})\nif(ENABLE_JEMALLOC_STATIC)\n  if(NOT EXISTS ${DEP_ROOT_DIR})\n    file(MAKE_DIRECTORY ${DEP_ROOT_DIR})\n  endif()\n  if (ENABLE_JEMALLOC_DUMP)\n    set(ENABLE_JEMALLOC_STAT ON)\n  else ()\n    set(ENABLE_JEMALLOC_STAT OFF)\n  endif ()\n  include(Jemalloc)\n  include_directories(SYSTEM ${DEP_ROOT_DIR}/${JEMALLOC_NAME}/include)\n  link_directories(${DEP_ROOT_DIR}/${JEMALLOC_NAME}/lib)\n  # 用于影响后续查找过程\n  # Used to affect subsequent lookup process\n  set(JEMALLOC_ROOT_DIR \"${DEP_ROOT_DIR}/${JEMALLOC_NAME}\")\nendif()\n\n# 默认链接 jemalloc 库避免内存碎片\n# Link the jemalloc library by default to avoid memory fragmentation\nfind_package(JEMALLOC QUIET)\nif(JEMALLOC_FOUND)\n  message(STATUS \"found library: ${JEMALLOC_LIBRARIES}\")\n  include_directories(${JEMALLOC_INCLUDE_DIR})\n  update_cached_list(MK_LINK_LIBRARIES ${JEMALLOC_LIBRARIES})\n  add_definitions(-DUSE_JEMALLOC)\n  message(STATUS \"jemalloc will be used to avoid memory fragmentation\")\n  if (ENABLE_JEMALLOC_DUMP)\n    add_definitions(-DENABLE_JEMALLOC_DUMP)\n    message(STATUS \"jemalloc will save memory usage statistics when the program exits\")\n  endif ()\nendif()\n\n# 查找 openssl 是否安装\n# find openssl installed\nfind_package(OpenSSL QUIET)\nif(OPENSSL_FOUND AND ENABLE_OPENSSL)\n  message(STATUS \"found library: ${OPENSSL_LIBRARIES}, ENABLE_OPENSSL defined\")\n  include_directories(${OPENSSL_INCLUDE_DIR})\n  update_cached_list(MK_COMPILE_DEFINITIONS ENABLE_OPENSSL)\n  update_cached_list(MK_LINK_LIBRARIES ${OPENSSL_LIBRARIES})\n  if(CMAKE_SYSTEM_NAME MATCHES \"Linux\" AND OPENSSL_USE_STATIC_LIBS)\n    update_cached_list(MK_LINK_LIBRARIES ${CMAKE_DL_LIBS})\n  elseif(CMAKE_SYSTEM_NAME MATCHES \"Windows\" AND OPENSSL_USE_STATIC_LIBS)\n    update_cached_list(MK_LINK_LIBRARIES Crypt32)\n  endif()\nelse()\n  set(ENABLE_OPENSSL OFF)\n  set(ENABLE_WEBRTC OFF)\n  message(WARNING \"openssl 未找到, rtmp 将不支持 flash 播放器, https/wss/rtsps/rtmps/webrtc 也将失效\")\nendif()\n\n# 查找 mysql 是否安装\n# find mysql installed\nfind_package(MYSQL QUIET)\nif(MYSQL_FOUND AND ENABLE_MYSQL)\n  message(STATUS \"found library: ${MYSQL_LIBRARIES}, ENABLE_MYSQL defined\")\n  include_directories(SYSTEM\n    ${MYSQL_INCLUDE_DIR}\n    ${MYSQL_INCLUDE_DIR}/mysql)\n\n  update_cached_list(MK_COMPILE_DEFINITIONS ENABLE_MYSQL)\n  update_cached_list(MK_LINK_LIBRARIES ${MYSQL_LIBRARIES})\nendif()\n\n# 查找 x264 是否安装\n# find x264 installed\nfind_package(X264 QUIET)\nif(X264_FOUND AND ENABLE_X264)\n  message(STATUS \"found library: ${X264_LIBRARIES}, ENABLE_X264 defined\")\n  include_directories(SYSTEM ${X264_INCLUDE_DIRS})\n\n  update_cached_list(MK_COMPILE_DEFINITIONS ENABLE_X264)\n  update_cached_list(MK_LINK_LIBRARIES ${X264_LIBRARIES})\nendif()\n\n# 查找 faac 是否安装\n# find faac installed\nfind_package(FAAC QUIET)\nif(FAAC_FOUND AND ENABLE_FAAC)\n  message(STATUS \"found library:${FAAC_LIBRARIES}, ENABLE_FAAC defined\")\n  include_directories(SYSTEM ${FAAC_INCLUDE_DIR})\n  update_cached_list(MK_COMPILE_DEFINITIONS ENABLE_FAAC)\n  update_cached_list(MK_LINK_LIBRARIES ${FAAC_LIBRARIES})\nendif()\n\nif(WIN32)\n  update_cached_list(MK_LINK_LIBRARIES WS2_32 Iphlpapi shlwapi)\nelseif(ANDROID)\n  update_cached_list(MK_LINK_LIBRARIES log)\nelseif(NOT ANDROID OR IOS)\n  update_cached_list(MK_LINK_LIBRARIES pthread)\nendif()\n\nif(ENABLE_VIDEOSTACK)\n  if(ENABLE_FFMPEG AND ENABLE_X264)\n    message(STATUS \"ENABLE_VIDEOSTACK defined\")\n    update_cached_list(MK_COMPILE_DEFINITIONS ENABLE_VIDEOSTACK)\n  else()\n    message(WARNING \"ENABLE_VIDEOSTACK requires ENABLE_FFMPEG and ENABLE_X264\")\n  endif ()\nendif ()\n\nif(ENABLE_SRT)\n  update_cached_list(MK_COMPILE_DEFINITIONS ENABLE_SRT)\nendif()\n\n# ----------------------------------------------------------------------------\n# Solution folders:\n# ----------------------------------------------------------------------------\nif(USE_SOLUTION_FOLDERS)\n  set_property(GLOBAL PROPERTY USE_FOLDERS ON)\n  set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER \"CMakeTargets\")\nendif()\n\nif(MSVC AND ENABLE_MSVC_MT)\n  set(CompilerFlags\n    CMAKE_CXX_FLAGS\n    CMAKE_CXX_FLAGS_DEBUG\n    CMAKE_CXX_FLAGS_RELEASE\n    CMAKE_C_FLAGS\n    CMAKE_C_FLAGS_DEBUG\n    CMAKE_C_FLAGS_RELEASE)\n  # TODO: 通常应该不需要替换\n  foreach(CompilerFlag ${CompilerFlags})\n    string(REPLACE \"/MD\" \"/MT\" ${CompilerFlag} \"${${CompilerFlag}}\")\n  endforeach()\nendif()\n\n##############################################################################\n\n# for version.h\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n# for assert.h\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/3rdpart)\n\nadd_subdirectory(3rdpart)\n\nadd_subdirectory(src)\n\nadd_subdirectory(ext-codec)\n\nif(ENABLE_SRT)\n  add_subdirectory(srt)\nendif()\n\nif(ENABLE_WEBRTC)\n  add_subdirectory(webrtc)\nendif()\n\nif(ENABLE_API)\n  add_subdirectory(api)\nendif()\n\n##############################################################################\n\nif(ENABLE_PLAYER AND ENABLE_FFMPEG)\n  add_subdirectory(player)\nendif()\n\n#MediaServer主程序\n#MediaServer main program\nif(ENABLE_SERVER)\n  add_subdirectory(server)\nendif()\n\n# Android 会 add_subdirectory 并依赖该变量\n# Android will add_subdirectory and depend on this variable\nif(ENABLE_SERVER_LIB AND NOT CMAKE_PARENT_LIST_FILE STREQUAL CMAKE_CURRENT_LIST_FILE)\n  set(MK_LINK_LIBRARIES ${MK_LINK_LIBRARIES} PARENT_SCOPE)\nendif()\n\n# IOS 不编译可执行程序\n# IOS does not compile executable programs\nif(IOS)\n  return()\nendif()\n\n#cpp测试demo程序\n#cpp test demo program\nif (ENABLE_TESTS)\n  add_subdirectory(tests)\nendif ()\n\n# 拷贝www文件夹、配置文件、默认证书\n# Copy www folder, configuration file, default certificate\nfile(COPY \"${CMAKE_CURRENT_SOURCE_DIR}/www\" DESTINATION ${EXECUTABLE_OUTPUT_PATH})\nfile(COPY \"${CMAKE_CURRENT_SOURCE_DIR}/conf/config.ini\" DESTINATION ${EXECUTABLE_OUTPUT_PATH})\nfile(COPY \"${CMAKE_CURRENT_SOURCE_DIR}/default.pem\" DESTINATION ${EXECUTABLE_OUTPUT_PATH})\n\n# 拷贝VideoStack 无视频流时默认填充的背景图片\n# Copy the default background image used by VideoStack when there is no video stream\nif (ENABLE_VIDEOSTACK AND ENABLE_FFMPEG AND ENABLE_X264)\n  file(COPY \"${CMAKE_CURRENT_SOURCE_DIR}/conf/novideo.yuv\" DESTINATION ${EXECUTABLE_OUTPUT_PATH})\nendif ()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5595703125,
          "content": "MIT License\n\nCopyright (c) 2016-present The ZLMediaKit project authors. All Rights Reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n----------------------------------------------------------------------------------------\n\n补充协议:\n\n本项目采用类MIT协议，用户在履行MIT协议义务的同时，应当同时遵循保留ZLMediaKit软件版权信息的义务。\n用户不得去除ZLMediaKit提供的各种服务中包括但不限于 \"title\"、\"Server\"、\"User-Agent\" 等字段中 \"ZLMediaKit\" 的信息。\n否则本项目主要权利人(项目发起人、主要作者)保留声索起诉的权利。\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.693359375,
          "content": "![logo](https://raw.githubusercontent.com/ZLMediaKit/ZLMediaKit/master/www/logo.png)\n\n简体中文 | [English](./README_en.md)\n\n# 一个基于C++11的高性能运营级流媒体服务框架\n\n[![](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/ZLMediaKit/ZLMediaKit/blob/master/LICENSE)\n[![](https://img.shields.io/badge/language-c++-red.svg)](https://en.cppreference.com/)\n[![](https://img.shields.io/badge/platform-linux%20|%20macos%20|%20windows-blue.svg)](https://github.com/ZLMediaKit/ZLMediaKit)\n[![](https://img.shields.io/badge/PRs-welcome-yellow.svg)](https://github.com/ZLMediaKit/ZLMediaKit/pulls)\n\n[![](https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/android.yml/badge.svg)](https://github.com/ZLMediaKit/ZLMediaKit)\n[![](https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/linux.yml/badge.svg)](https://github.com/ZLMediaKit/ZLMediaKit)\n[![](https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/macos.yml/badge.svg)](https://github.com/ZLMediaKit/ZLMediaKit)\n[![](https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/windows.yml/badge.svg)](https://github.com/ZLMediaKit/ZLMediaKit)\n\n[![](https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/docker.yml/badge.svg)](https://hub.docker.com/r/zlmediakit/zlmediakit/tags)\n[![](https://img.shields.io/docker/pulls/zlmediakit/zlmediakit)](https://hub.docker.com/r/zlmediakit/zlmediakit/tags)\n\n## 项目特点\n\n- 基于C++11开发，避免使用裸指针，代码稳定可靠，性能优越。\n- 支持多种协议(RTSP/RTMP/HLS/HTTP-FLV/WebSocket-FLV/GB28181/HTTP-TS/WebSocket-TS/HTTP-fMP4/WebSocket-fMP4/MP4/WebRTC),支持协议互转。\n- 使用多路复用/多线程/异步网络IO模式开发，并发性能优越，支持海量客户端连接。\n- 代码经过长期大量的稳定性、性能测试，已经在线上商用验证已久。\n- 支持linux、macos、ios、android、windows全平台。\n- 支持x86、arm、risc-v、mips、龙芯、申威等指令集平台。\n- 支持画面秒开、极低延时([500毫秒内，最低可达100毫秒](https://github.com/ZLMediaKit/ZLMediaKit/wiki/%E5%BB%B6%E6%97%B6%E6%B5%8B%E8%AF%95))。\n- 提供完善的标准[C API](https://github.com/ZLMediaKit/ZLMediaKit/tree/master/api/include),可以作SDK用，或供其他语言调用。\n- 提供完整的[MediaServer](https://github.com/ZLMediaKit/ZLMediaKit/tree/master/server)服务器，可以免开发直接部署为商用服务器。\n- 提供完善的[restful api](https://github.com/ZLMediaKit/ZLMediaKit/wiki/MediaServer%E6%94%AF%E6%8C%81%E7%9A%84HTTP-API)以及[web hook](https://github.com/ZLMediaKit/ZLMediaKit/wiki/MediaServer%E6%94%AF%E6%8C%81%E7%9A%84HTTP-HOOK-API)，支持丰富的业务逻辑。\n- 打通了视频监控协议栈与直播协议栈，对RTSP/RTMP支持都很完善。\n- 功能完善，支持集群、按需转协议、按需推拉流、先播后推、断连续推等功能。\n- 极致性能，单机10W级别播放器，100Gb/s级别io带宽能力。\n- 极致体验，[独家特性](https://github.com/ZLMediaKit/ZLMediaKit/wiki/ZLMediakit%E7%8B%AC%E5%AE%B6%E7%89%B9%E6%80%A7%E4%BB%8B%E7%BB%8D)\n- [谁在使用zlmediakit?](https://github.com/ZLMediaKit/ZLMediaKit/issues/511)\n- 全面支持ipv6网络\n- 支持多轨道模式(一个流中多个视频/音频)\n- 全协议支持H264/H265/AAC/G711/OPUS/MP3，部分支持VP8/VP9/AV1/JPEG/MP3/H266/ADPCM/SVAC/G722/G723/G729\n\n## 项目定位\n\n- 移动嵌入式跨平台流媒体解决方案。\n- 商用级流媒体服务器。\n- 网络编程二次开发SDK。\n\n\n## 功能清单\n### 功能一览\n<img width=\"800\" alt=\"功能一览\" src=\"https://github.com/ZLMediaKit/ZLMediaKit/assets/11495632/481ea769-5b27-495e-bf7d-31191e6af9d2\">\n\n- RTSP[S]\n  - RTSP[S] 服务器，支持RTMP/MP4/HLS转RTSP[S],支持亚马逊echo show这样的设备\n  - RTSP[S] 播放器，支持RTSP代理，支持生成静音音频\n  - RTSP[S] 推流客户端与服务器\n  - 支持 `rtp over udp` `rtp over tcp` `rtp over http` `rtp组播`  四种RTP传输方式 \n  - 服务器/客户端完整支持Basic/Digest方式的登录鉴权，全异步可配置化的鉴权接口\n  - 支持H265编码\n  - 服务器支持RTSP推流(包括`rtp over udp` `rtp over tcp`方式)\n  - 支持H264/H265/AAC/G711/OPUS/MJPEG/MP3编码，其他编码能转发但不能转协议\n\n- RTMP[S]\n  - RTMP[S] 播放服务器，支持RTSP/MP4/HLS转RTMP\n  - RTMP[S] 发布服务器，支持录制发布流\n  - RTMP[S] 播放器，支持RTMP代理，支持生成静音音频\n  - RTMP[S] 推流客户端\n  - 支持http[s]-flv直播服务器\n  - 支持http[s]-flv直播播放器\n  - 支持websocket-flv直播\n  - 支持H264/H265/AAC/G711/OPUS/MP3编码，其他编码能转发但不能转协议\n  - 支持[RTMP-H265](https://github.com/ksvc/FFmpeg/wiki)\n  - 支持[RTMP-OPUS](https://github.com/ZLMediaKit/ZLMediaKit/wiki/RTMP%E5%AF%B9H265%E5%92%8COPUS%E7%9A%84%E6%94%AF%E6%8C%81)\n  - 支持[enhanced-rtmp(H265)](https://github.com/veovera/enhanced-rtmp)\n\n- HLS\n  - 支持HLS文件(mpegts/fmp4)生成，自带HTTP文件服务器\n  - 通过cookie追踪技术，可以模拟HLS播放为长连接，可以实现HLS按需拉流、播放统计等业务\n  - 支持HLS播发器，支持拉流HLS转rtsp/rtmp/mp4\n  - 支持H264/H265/AAC/G711/OPUS/MP3编码\n  - 支持多轨道模式\n  \n- TS\n  - 支持http[s]-ts直播\n  - 支持ws[s]-ts直播\n  - 支持H264/H265/AAC/G711/OPUS/MP3编码\n  - 支持多轨道模式\n  \n- fMP4\n  - 支持http[s]-fmp4直播\n  - 支持ws[s]-fmp4直播\n  - 支持H264/H265/AAC/G711/OPUS/MJPEG/MP3编码\n  - 支持多轨道模式\n\n- HTTP[S]与WebSocket\n  - 服务器支持`目录索引生成`,`文件下载`,`表单提交请求`\n  - 客户端提供`文件下载器(支持断点续传)`,`接口请求器`,`文件上传器`\n  - 完整HTTP API服务器，可以作为web后台开发框架\n  - 支持跨域访问\n  - 支持http客户端、服务器cookie\n  - 支持WebSocket服务器和客户端\n  - 支持http文件访问鉴权\n\n- GB28181与RTP推流\n  - 支持UDP/TCP RTP(PS/TS/ES)推流服务器，可以转换成RTSP/RTMP/HLS等协议\n  - 支持RTSP/RTMP/HLS等协议转rtp推流客户端，支持TCP/UDP模式，提供相应restful api，支持主动被动方式\n  - 支持H264/H265/AAC/G711/OPUS/MP3编码\n  - 支持es/ps/ts/ehome rtp推流\n  - 支持es/ps rtp转推\n  - 支持GB28181主动拉流模式\n  - 支持双向语音对讲\n  - 支持多轨道模式\n\n- MP4点播与录制\n  - 支持录制为FLV/HLS/MP4\n  - RTSP/RTMP/HTTP-FLV/WS-FLV支持MP4文件点播，支持seek\n  - 支持H264/H265/AAC/G711/OPUS/MP3编码\n  - 支持多轨道模式\n  \n- WebRTC\n  - 支持WebRTC推流，支持转其他协议\n  - 支持WebRTC播放，支持其他协议转WebRTC\n  - 支持双向echo test     \n  - 支持simulcast推流\n  - 支持上下行rtx/nack丢包重传\n  - **支持单端口、多线程、客户端网络连接迁移(开源界唯一)**。\n  - 支持TWCC rtcp动态调整码率\n  - 支持remb/pli/sr/rr rtcp\n  - 支持rtp扩展解析\n  - 支持GOP缓冲，webrtc播放秒开\n  - 支持datachannel\n  - 支持webrtc over tcp模式\n  - 优秀的nack、jitter buffer算法, 抗丢包能力卓越\n  - 支持whip/whep协议\n- [SRT支持](./srt/srt.md)\n- 其他\n  - 支持丰富的restful api以及web hook事件 \n  - 支持简单的telnet调试\n  - 支持配置文件热加载\n  - 支持流量统计、推拉流鉴权等事件\n  - 支持虚拟主机,可以隔离不同域名\n  - 支持按需拉流，无人观看自动关断拉流\n  - 支持先播放后推流，提高及时推流画面打开率\n  - 提供完整强大的c api sdk\n  - 支持FFmpeg拉流代理任意格式的流\n  - 支持http api生成并返回实时截图\n  - 支持按需解复用、转协议，当有人观看时才开启转协议，降低cpu占用率\n  - 支持溯源模式的集群部署，溯源方式支持rtsp/rtmp/hls/http-ts, 边沿站支持hls, 源站支持多个(采用round robin方式溯源)\n  - rtsp/rtmp/webrtc推流异常断开后，可以在超时时间内重连推流，播放器无感知\n  \n\n## 编译以及测试\n**编译前务必仔细参考wiki:[快速开始](https://github.com/ZLMediaKit/ZLMediaKit/wiki/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B)操作!!!**\n\n## 怎么使用\n\n 你有三种方法使用ZLMediaKit，分别是：\n\n - 1、使用c api，作为sdk使用，请参考[这里](https://github.com/ZLMediaKit/ZLMediaKit/tree/master/api/include).\n - 2、作为独立的流媒体服务器使用，不想做c/c++开发的，可以参考 [restful api](https://github.com/ZLMediaKit/ZLMediaKit/wiki/MediaServer支持的HTTP-API) 和 [web hook](https://github.com/ZLMediaKit/ZLMediaKit/wiki/MediaServer支持的HTTP-HOOK-API ).\n - 3、如果想做c/c++开发，添加业务逻辑增加功能，可以参考这里的[测试程序](https://github.com/ZLMediaKit/ZLMediaKit/tree/master/tests).\n\n## 二进制文件下载\nzlmediakit采用 github action 持续集成自动编译打包上传编译产出包，请在[issue列表](https://github.com/ZLMediaKit/ZLMediaKit/issues/483)下载最新sdk库文件以及可执行文件。\n\n## Docker 镜像\n\n你可以从Docker Hub下载已经编译好的镜像并启动它：\n\n```bash\n#此镜像为github action 持续集成自动编译推送，跟代码(master分支)保持最新状态\ndocker run -id -p 1935:1935 -p 8080:80 -p 8443:443 -p 8554:554 -p 10000:10000 -p 10000:10000/udp -p 8000:8000/udp -p 9000:9000/udp zlmediakit/zlmediakit:master\n```\n\n你也可以根据Dockerfile编译镜像：\n\n```bash\nbash build_docker_images.sh\n```\n\n## 合作项目\n   \n - 视频管理平台\n   - [wvp-GB28181-pro](https://github.com/648540858/wvp-GB28181-pro) java实现的开箱即用的GB28181协议视频平台\n   - [AKStream](https://github.com/chatop2020/AKStream) c#实现的全功能的软NVR接口/GB28181平台\n   - [BXC_SipServer](https://github.com/any12345com/BXC_SipServer) c++实现的国标GB28181流媒体信令服务器\n   - [gosip](https://github.com/panjjo/gosip) golang实现的GB28181服务器\n   - [FreeEhome](https://github.com/tsingeye/FreeEhome) golang实现的海康ehome服务器\n  \n - 播放器\n   - [h265web.js](https://github.com/numberwolf/h265web.js) 基于wasm支持H265的播放器，支持本项目多种专属协议\n   - [jessibuca](https://github.com/langhuihui/jessibuca) 基于wasm支持H265的播放器\n   - [wsPlayer](https://github.com/v354412101/wsPlayer) 基于MSE的websocket-fmp4播放器\n   - [BXC_gb28181Player](https://github.com/any12345com/BXC_gb28181Player) C++开发的支持国标GB28181协议的视频流播放器\n   - [RTCPlayer](https://github.com/leo94666/RTCPlayer) 一个基于Android客户端的的RTC播放器\n\n- WEB管理网站\n   - [zlm_webassist](https://github.com/1002victor/zlm_webassist) 本项目配套的前后端分离web管理项目\n   - [AKStreamNVR](https://github.com/langmansh/AKStreamNVR) 前后端分离web项目,支持webrtc播放\n   \n - SDK\n   - [spring-boot-starter](https://github.com/lunasaw/zlm-spring-boot-starter) 本项目hook和rest接口starter\n   - [java sdk](https://github.com/lidaofu-hub/j_zlm_sdk) 本项目c sdk完整java包装库\n   - [c# sdk](https://github.com/malegend/ZLMediaKit.Autogen) 本项目c sdk完整c#包装库\n   - [metaRTC](https://github.com/metartc/metaRTC) 全国产纯c webrtc sdk\n   \n - 其他项目(已停止更新)\n   - [NodeJS实现的GB28181平台](https://gitee.com/hfwudao/GB28181_Node_Http)\n   - [基于ZLMediaKit主线的管理WEB网站 ](https://gitee.com/kkkkk5G/MediaServerUI)\n   - [基于ZLMediaKit分支的管理WEB网站](https://github.com/chenxiaolei/ZLMediaKit_NVR_UI)\n   - [一个非常漂亮的可视化后台管理系统](https://github.com/MingZhuLiu/ZLMediaServerManagent)\n   - [基于C SDK实现的推流客户端](https://github.com/hctym1995/ZLM_ApiDemo)\n   - [C#版本的Http API与Hook](https://github.com/chengxiaosheng/ZLMediaKit.HttpApi)\n   - [DotNetCore的RESTful客户端](https://github.com/MingZhuLiu/ZLMediaKit.DotNetCore.Sdk)\n   \n   \n## 授权协议\n\n本项目自有代码使用宽松的MIT协议，在保留版权信息的情况下可以自由应用于各自商用、非商业的项目。\n但是本项目也零碎的使用了一些其他的[开源代码](https://github.com/ZLMediaKit/ZLMediaKit/wiki/%E4%BB%A3%E7%A0%81%E4%BE%9D%E8%B5%96%E4%B8%8E%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E)，在商用的情况下请自行替代或剔除；\n由于使用本项目而产生的商业纠纷或侵权行为一概与本项目及开发者无关，请自行承担法律风险。\n在使用本项目代码时，也应该在授权协议中同时表明本项目依赖的第三方库的协议。\n\n## 联系方式\n\n - 邮箱：<1213642868@qq.com>(本项目相关或流媒体相关问题请走issue流程，否则恕不邮件答复)\n - 请关注微信公众号获取最新消息推送：\n <img src=https://user-images.githubusercontent.com/11495632/232451702-4c50bc72-84d8-4c94-af2b-57290088ba7a.png width=15% />\n \n - 也可以自愿有偿加入知识星球咨询、获取资料以及加入微信技术群：\n <img src= https://user-images.githubusercontent.com/11495632/231946329-aa8517b0-3cf5-49cf-8c75-a93ed58cb9d2.png width=30% />\n  \n\n## 怎么提问？\n\n如果要对项目有相关疑问，建议您这么做：\n\n - 1、仔细看下readme、wiki，如果有必要可以查看下issue.\n - 2、如果您的问题还没解决，可以提issue.\n - 3、如果需要获取更及时贴心的技术支持，可以有偿加入[知识星球](https://github.com/ZLMediaKit/ZLMediaKit/issues/2364).\n\n## 特别感谢\n\n本项目采用了[老陈](https://github.com/ireader) 的 [media-server](https://github.com/ireader/media-server) 库，\n本项目的 ts/fmp4/mp4/ps 容器格式的复用解复用都依赖media-server库。在实现本项目诸多功能时，老陈多次给予了无私热情关键的帮助，\n特此对他表示诚挚的感谢！\n\n## 致谢\n\n感谢以下各位对本项目包括但不限于代码贡献、问题反馈、资金捐赠等各种方式的支持！以下排名不分先后：\n\n[老陈](https://github.com/ireader)\n[Gemfield](https://github.com/gemfield)\n[南冠彤](https://github.com/nanguantong2)\n[凹凸慢](https://github.com/tsingeye)\n[chenxiaolei](https://github.com/chenxiaolei)\n[史前小虫](https://github.com/zqsong)\n[清涩绿茶](https://github.com/baiyfcu)\n[3503207480](https://github.com/3503207480)\n[DroidChow](https://github.com/DroidChow)\n[阿塞](https://github.com/HuoQiShuai)\n[火宣](https://github.com/ChinaCCF)\n[γ瑞γミ](https://github.com/JerryLinGd)\n[linkingvision](https://www.linkingvision.com/)\n[茄子](https://github.com/taotaobujue2008)\n[好心情](mailto:409257224@qq.com)\n[浮沉](https://github.com/MingZhuLiu)\n[Xiaofeng Wang](https://github.com/wasphin)\n[doodoocoder](https://github.com/doodoocoder)\n[qingci](https://github.com/Colibrow)\n[swwheihei](https://github.com/swwheihei)\n[KKKKK5G](https://gitee.com/kkkkk5G)\n[Zhou Weimin](mailto:zhouweimin@supremind.com)\n[Jim Jin](https://github.com/jim-king-2000)\n[西瓜丶](mailto:392293307@qq.com)\n[MingZhuLiu](https://github.com/MingZhuLiu)\n[chengxiaosheng](https://github.com/chengxiaosheng)\n[big panda](mailto:2381267071@qq.com)\n[tanningzhong](https://github.com/tanningzhong)\n[hctym1995](https://github.com/hctym1995)\n[hewenyuan](https://gitee.com/kingyuanyuan)\n[sunhui](mailto:sunhui200475@163.com)\n[mirs](mailto:fangpengcheng@bilibili.com)\n[Kevin Cheng](mailto:kevin__cheng@outlook.com)\n[Liu Jiang](mailto:root@oopy.org)\n[along](https://github.com/alongl)\n[qingci](mailto:xpy66swsry@gmail.com)\n[lyg1949](mailto:zh.ghlong@qq.com)\n[zhlong](mailto:zh.ghlong@qq.com)\n[大裤衩](mailto:3503207480@qq.com)\n[droid.chow](mailto:droid.chow@gmail.com)\n[陈晓林](https://github.com/musicwood)\n[CharleyWangHZ](https://github.com/CharleyWangHZ)\n[Johnny](https://github.com/johzzy)\n[DoubleX69](https://github.com/DoubleX69)\n[lawrencehj](https://github.com/lawrencehj)\n[yangkun](mailto:xyyangkun@163.com)\n[Xinghua Zhao](mailto:holychaossword@hotmail.com)\n[hejilin](https://github.com/brokensword2018)\n[rqb500](https://github.com/rqb500)\n[Alex](https://github.com/alexliyu7352)\n[Dw9](https://github.com/Dw9)\n[明月惊鹊](mailto:mingyuejingque@gmail.com)\n[cgm](mailto:2958580318@qq.com)\n[hejilin](mailto:1724010622@qq.com)\n[alexliyu7352](mailto:liyu7352@gmail.com)\n[cgm](mailto:2958580318@qq.com)\n[haorui wang](https://github.com/HaoruiWang)\n[joshuafc](mailto:joshuafc@foxmail.com)\n[JayChen0519](https://github.com/JayChen0519)\n[zx](mailto:zuoxue@qq.com)\n[wangcker](mailto:wangcker@163.com)\n[WuPeng](mailto:wp@zafu.edu.cn)\n[starry](https://github.com/starry)\n[mtdxc](https://github.com/mtdxc)\n[胡刚风](https://github.com/hugangfeng333)\n[zhao85](https://github.com/zhao85)\n[dreamisdream](https://github.com/dreamisdream)\n[dingcan](https://github.com/dcan123)\n[Haibo Chen](https://github.com/duiniuluantanqin)\n[Leon](https://gitee.com/leon14631)\n[custompal](https://github.com/custompal)\n[PioLing](https://github.com/PioLing)\n[KevinZang](https://github.com/ZSC714725)\n[gongluck](https://github.com/gongluck)\n[a-ucontrol](https://github.com/a-ucontrol)\n[TalusL](https://github.com/TalusL)\n[ahaooahaz](https://github.com/AHAOAHA)\n[TempoTian](https://github.com/TempoTian)\n[Derek Liu](https://github.com/yjkhtddx)\n[ljx0305](https://github.com/ljx0305)\n[朱如洪 ](https://github.com/zhu410289616)\n[lijin](https://github.com/1461521844lijin)\n[PioLing](https://github.com/PioLing)\n[BackT0TheFuture](https://github.com/BackT0TheFuture)\n[perara](https://github.com/perara)\n[codeRATny](https://github.com/codeRATny)\n[dengjfzh](https://github.com/dengjfzh)\n[百鸣](https://github.com/ixingqiao)\n[fruit Juice](https://github.com/xuandu)\n[tbago](https://github.com/tbago)\n[Luosh](https://github.com/Luosh)\n[linxiaoyan87](https://github.com/linxiaoyan)\n[waken](https://github.com/mc373906408)\n[Deepslient](https://github.com/Deepslient)\n[imp_rayjay](https://github.com/rayjay214)\n[ArmstrongCN](https://github.com/ArmstrongCN)\n[leibnewton](https://github.com/leibnewton)\n[1002victor](https://github.com/1002victor)\n[Grin](https://github.com/xyyangkun)\n[xbpeng121](https://github.com/xbpeng121)\n[lvchenyun](https://github.com/lvchenyun)\n[Fummowo](https://github.com/Fummowo)\n[Jovial Young ](https://github.com/JHYoung1034)\n[yujitai](https://github.com/yujitai)\n[KisChang](https://github.com/kisChang)\n[zjx94](https://github.com/zjx94)\n[LeiZhi.Mai ](https://github.com/blueskiner)\n[JiaHao](https://github.com/nashiracn)\n[chdahuzi](https://github.com/chdahuzi)\n[snysmtx](https://github.com/snysmtx)\n[SetoKaiba](https://github.com/SetoKaiba)\n[sandro-qiang](https://github.com/sandro-qiang)\n[Paul Philippov](https://github.com/themactep)\n[张传峰](https://github.com/zhang-chuanfeng)\n[lidaofu-hub](https://github.com/lidaofu-hub)\n[huangcaichun](https://github.com/huangcaichun)\n[jamesZHANG500](https://github.com/jamesZHANG500)\n[weidelong](https://github.com/wdl1697454803)\n[小强先生](https://github.com/linshangqiang)\n[李之阳](https://github.com/leo94666)\n[sgzed](https://github.com/sgzed)\n[gaoshan](https://github.com/foobra)\n[zhang2349](https://github.com/zhang2349)\n[benshi](https://github.com/BenLocal)\n[autoantwort](https://github.com/autoantwort)\n[u7ko4](https://github.com/u7ko4)\n[WengQiang](https://github.com/Tsubaki-01)\n[wEnchanters](https://github.com/wEnchanters)\n[sbkyy](https://github.com/sbkyy)\n[wuxingzhong](https://github.com/wuxingzhong)\n[286897655](https://github.com/286897655)\n[ss002012](https://github.com/ss002012)\n[a839419160](https://github.com/a839419160)\n[oldma3095](https://github.com/oldma3095)\n\n同时感谢JetBrains对开源项目的支持，本项目使用CLion开发与调试：\n\n[![JetBrains](https://resources.jetbrains.com/storage/products/company/brand/logos/CLion.svg)](https://jb.gg/OpenSourceSupport)\n\n## 使用案例\n\n本项目已经得到不少公司和个人开发者的认可，据作者不完全统计，\n使用本项目的公司包括知名的互联网巨头、国内排名前列的云服务公司、多家知名的AI独角兽公司，\n以及一系列中小型公司。使用者可以通过在 [issue](https://github.com/ZLMediaKit/ZLMediaKit/issues/511) 上粘贴公司的大名和相关项目介绍为本项目背书，感谢支持！\n"
        },
        {
          "name": "README_en.md",
          "type": "blob",
          "size": 26.2578125,
          "content": "![logo](https://raw.githubusercontent.com/zlmediakit/ZLMediaKit/master/www/logo.png)\n\n[简体中文](./README.md) | English\n\n# An high-performance, enterprise-level streaming media service framework based on C++11.\n\n\n[![](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/ZLMediaKit/ZLMediaKit/blob/master/LICENSE)\n[![](https://img.shields.io/badge/language-c++-red.svg)](https://en.cppreference.com/)\n[![](https://img.shields.io/badge/platform-linux%20|%20macos%20|%20windows-blue.svg)](https://github.com/ZLMediaKit/ZLMediaKit)\n[![](https://img.shields.io/badge/PRs-welcome-yellow.svg)](https://github.com/ZLMediaKit/ZLMediaKit/pulls)\n\n[![](https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/android.yml/badge.svg)](https://github.com/ZLMediaKit/ZLMediaKit)\n[![](https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/linux.yml/badge.svg)](https://github.com/ZLMediaKit/ZLMediaKit)\n[![](https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/macos.yml/badge.svg)](https://github.com/ZLMediaKit/ZLMediaKit)\n[![](https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/windows.yml/badge.svg)](https://github.com/ZLMediaKit/ZLMediaKit)\n\n[![](https://github.com/ZLMediaKit/ZLMediaKit/actions/workflows/docker.yml/badge.svg)](https://hub.docker.com/r/zlmediakit/zlmediakit/tags)\n[![](https://img.shields.io/docker/pulls/zlmediakit/zlmediakit)](https://hub.docker.com/r/zlmediakit/zlmediakit/tags)\n\n## Project Features\n- Developed with C++11, avoiding the use of raw pointers, providing stable and reliable code with superior performance.\n- Supports multiple protocols (RTSP/RTMP/HLS/HTTP-FLV/WebSocket-FLV/GB28181/HTTP-TS/WebSocket-TS/HTTP-fMP4/WebSocket-fMP4/MP4/WebRTC), and protocol conversion.\n- Developed with multiplexing/multithreading/asynchronous network IO models, providing excellent concurrency performance and supporting massive client connections.\n- The code has undergone extensive stability and performance testing, and has been extensively used in production environments.\n- Supports all major platforms, including linux, macos, ios, android, and windows.\n- Supports multiple instruction set platforms, such as x86, arm, risc-v, mips, Loongson, and Shenwei.\n- Provides ultra-fast startup, extremely low latency (within 500 milliseconds, and can be as low as 100 milliseconds), and excellent user experience.\n- Provides a comprehensive standard [C API](https://github.com/ZLMediaKit/ZLMediaKit/tree/master/api/include) that can be used as an SDK or called by other languages.\n- Provides a complete [MediaServer](https://github.com/ZLMediaKit/ZLMediaKit/tree/master/server) server, which can be deployed directly as a commercial server without additional development.\n- Provides a complete [restful api](https://github.com/ZLMediaKit/ZLMediaKit/wiki/MediaServer%E6%94%AF%E6%8C%81%E7%9A%84HTTP-API) and [web hook](https://github.com/ZLMediaKit/ZLMediaKit/wiki/MediaServer%E6%94%AF%E6%8C%81%E7%9A%84HTTP-HOOK-API), supporting rich business logic.\n- Bridges the video surveillance protocol stack and the live streaming protocol stack, and provides comprehensive support for RTSP/RTMP.\n- Fully supports H265/H264/AAC/G711/OPUS.\n- Provides complete functions, including clustering, on-demand protocol conversion, on-demand push/pull streams, playback before publishing, and continuous publishing after disconnection.\n- Provides ultimate performance, supporting 10W-level players on a single machine and 100Gb/s-level IO bandwidth capability.\n- Provides ultimate user experience with [exclusive features](https://github.com/ZLMediaKit/ZLMediaKit/wiki/ZLMediakit%E7%8B%AC%E5%AE%B6%E7%89%B9%E6%80%A7%E4%BB%8B%E7%BB%8D).\n- [Who is using zlmediakit?](https://github.com/ZLMediaKit/ZLMediaKit/issues/511)\n- Fully supports IPv6 networks.\n\n## Project Positioning\n\n- Cross-platform streaming media solution for mobile and embedded systems.\n- Commercial-grade streaming media server.\n- Network programming secondary development SDK.\n\n## Feature List\n### Overview of Features\n<img width=\"800\" alt=\"Overview of Features\" src=\"https://github.com/ZLMediaKit/ZLMediaKit/assets/11495632/481ea769-5b27-495e-bf7d-31191e6af9d2\">\n\n- RTSP[S]\n  - RTSP[S] server, supports RTMP/MP4/HLS to RTSP[S] conversion, supports devices such as Amazon Echo Show\n  - RTSP[S] player, supports RTSP proxy, supports generating silent audio\n  - RTSP[S] push client and server\n  - Supports four RTP transmission modes: `rtp over udp` `rtp over tcp` `rtp over http` `rtp multicast`\n  - Server/client fully supports Basic/Digest authentication, asynchronous configurable authentication interface\n  - Supports H265 encoding\n  - The server supports RTSP pushing (including `rtp over udp` and `rtp over tcp`)\n  - Supports H264/H265/AAC/G711/OPUS/MJPEG encoding. Other encodings can be forwarded but cannot be converted to protocol\n\n- RTMP[S]\n  - RTMP[S] playback server, supports RTSP/MP4/HLS to RTMP conversion\n  - RTMP[S] publishing server, supports recording and publishing streams\n  - RTMP[S] player, supports RTMP proxy, supports generating silent audio\n  - RTMP[S] push client\n  - Supports http[s]-flv live streaming server\n  - Supports http[s]-flv live streaming player\n  - Supports websocket-flv live streaming\n  - Supports H264/H265/AAC/G711/OPUS encoding. Other encodings can be forwarded but cannot be converted to protocol\n  - Supports [RTMP-H265](https://github.com/ksvc/FFmpeg/wiki)\n  - Supports [RTMP-OPUS](https://github.com/ZLMediaKit/ZLMediaKit/wiki/RTMP%E5%AF%B9H265%E5%92%8COPUS%E7%9A%84%E6%94%AF%E6%8C%81)\n  - Supports [enhanced-rtmp(H265)](https://github.com/veovera/enhanced-rtmp)\n\n- HLS\n  - Supports HLS file(mpegts/fmp4) generation and comes with an HTTP file server\n  - Through cookie tracking technology, it can simulate HLS playback as a long connection, which can achieve HLS on-demand pulling, playback statistics, and other businesses\n  - Supports HLS player and can pull HLS to rtsp/rtmp/mp4\n  - Supports H264/H265/AAC/G711/OPUS encoding\n\n- TS\n  - Supports http[s]-ts live streaming\n  - Supports ws[s]-ts live streaming\n  - Supports H264/H265/AAC/G711/OPUS encoding\n\n- fMP4\n  - Supports http[s]-fmp4 live streaming\n  - Supports ws[s]-fmp4 live streaming\n  - Supports H264/H265/AAC/G711/OPUS/MJPEG encoding\n\n- HTTP[S] and WebSocket\n  - The server supports `directory index generation`, `file download`, `form submission requests`\n  - The client provides `file downloader (supports resume breakpoint)`, `interface requestor`, `file uploader`\n  - Complete HTTP API server, which can be used as a web backend development framework\n  - Supports cross-domain access\n  - Supports http client/server cookie\n  - Supports WebSocket server and client\n  - Supports http file access authentication\n \n- GB28181 and RTP Streaming\n  - Supports UDP/TCP RTP (PS/TS/ES) streaming server, which can be converted to RTSP/RTMP/HLS and other protocols\n  - Supports RTSP/RTMP/HLS and other protocol conversion to RTP streaming client, supports TCP/UDP mode, provides corresponding RESTful API, supports active and passive modes\n  - Supports H264/H265/AAC/G711/OPUS encoding\n  - Supports ES/PS/TS/EHOME RTP streaming\n  - Supports ES/PS RTP forwarding\n  - Supports GB28181 active pull mode\n  - Supports two-way voice intercom\n\n- MP4 VOD and Recording\n  - Supports recording as FLV/HLS/MP4\n  - Supports MP4 file playback for RTSP/RTMP/HTTP-FLV/WS-FLV, supports seek\n  - Supports H264/H265/AAC/G711/OPUS encoding\n\n- WebRTC\n  - Supports WebRTC streaming and conversion to other protocols\n  - Supports WebRTC playback and conversion from other protocols to WebRTC\n  - Supports two-way echo testing\n  - Supports simulcast streaming\n  - Supports uplink and downlink RTX/NACK packet loss retransmission\n  - **Supports single-port, multi-threaded, and client network connection migration (unique in the open source community)**.\n  - Supports TWCC RTCP dynamic rate control\n  - Supports REMB/PLI/SR/RR RTCP\n  - Supports RTP extension parsing\n  - Supports GOP buffer and instant WebRTC playback\n  - Supports data channels\n  - Supports WebRTC over TCP mode\n  - Excellent NACK and jitter buffer algorithms with outstanding packet loss resistance\n  - Supports WHIP/WHEP protocols\n- [SRT support](./srt/srt.md)\n- Others\n  - Supports rich RESTful APIs and webhook events\n  - Supports simple Telnet debugging\n  - Supports hot reloading of configuration files\n  - Supports traffic statistics, stream authentication, and other events\n  - Supports virtual hosts for isolating different domain names\n  - Supports on-demand streaming and automatic shutdown of streams with no viewers\n  - Supports pre-play before streaming to increase the rate of timely stream openings\n  - Provides a complete and powerful C API SDK\n  - Supports FFmpeg stream proxy for any format\n  - Supports HTTP API for real-time screenshot generation and return\n  - Supports on-demand demultiplexing and protocol conversion, reducing CPU usage by only enabling it when someone is watching\n  - Supports cluster deployment in traceable mode, with RTSP/RTMP/HLS/HTTP-TS support for traceable mode and HLS support for edge stations and multiple sources for source stations (using round-robin tracing)\n  - Can reconnect to streaming after abnormal disconnection in RTSP/RTMP/WebRTC pushing within a timeout period, with no impact on the player.\n \n## System Requirements\n\n- Compiler with c++11 support, such as GCC 4.8+, Clang 3.3+, or VC2015+.\n- CMake 3.1+.\n- Linux (32-bit and 64-bit).\n- Apple macOS (32-bit and 64-bit).\n- Any hardware with x86, x86_64, ARM, or MIPS CPU.\n- Windows.\n\n## How to build\n\nIt is recommended to compile on Ubuntu or macOS. Compiling on Windows is cumbersome, and some features are not compiled by default.\n\n### Before Building\n\n- **You must use Git to clone the complete code. Do not download the source code by downloading the ZIP package. Otherwise, the submodule code will not be downloaded by default. You can do it like this:**\n```\ngit clone https://github.com/ZLMediaKit/ZLMediaKit.git\ncd ZLMediaKit\ngit submodule update --init\n```\n\n### Building on Linux\n\n- My Environment\n  - Ubuntu 16.04 (64-bit) with GCC 5.4.\n  - CMake 3.5.1.\n- Guidance\n  \n  ```\n\t# If it is on CentOS 6.x, you need to install a newer version of GCC and CMake first,\n\t# and then compile manually according to the \"build_for_linux.sh\" script.\n\t# If it is on a newer version of a system such as Ubuntu or Debian,\n\t# step 4 can be manipulated directly.\n\t\n\t# 1. Install GCC 5.2 (this step can be skipped if the GCC version is higher than 4.7).\n\tsudo yum install centos-release-scl -y\n\tsudo yum install devtoolset-4-toolchain -y\n\tscl enable devtoolset-4 bash\n\t\n\t# 2. Install CMake (this step can be skipped if the CMake version is higher than 3.1).\n\ttar -xvf cmake-3.10.0-rc4.tar.gz #you need to download the CMake source file manually\n\tcd cmake-3.10.0-rc4\n\t./configure\n\tmake -j4\n\tsudo make install\n\t\n\t# 3. Switch to a higher version of GCC.\n\tscl enable devtoolset-4 bash\n\t\n\t# 4. Build.\n\tcd ZLMediaKit\n\t./build_for_linux.sh\n  ```\n\n### Building on macOS\n\n- My Environment\n  - macOS Sierra (10.12.1) with Xcode 8.3.1.\n  - Homebrew 1.1.3.\n  - CMake 3.8.0.\n- Guidance\n  \n  ```\n  cd ZLMediaKit\n  ./build_for_mac.sh\n  ```\n\n### Building on iOS\n- You can generate Xcode projects and recompile them , [learn more](https://github.com/leetal/ios-cmake):\n\n  ```\n  cd ZLMediaKit\n  mkdir -p build\n  cd build\n  # Generate Xcode project, project file is in build directory\n  cmake .. -G Xcode -DCMAKE_TOOLCHAIN_FILE=../cmake/ios.toolchain.cmake  -DPLATFORM=OS64COMBINED\n  ```\n  \n\n### Building on Android\n\n  Now you can open the Android Studio project in the `Android` folder. This is an `AAR` library and demo project.\n\n- My environment\n  - macOS Sierra (10.12.1) + Xcode 8.3.1\n  - Homebrew 1.1.3\n  - CMake 3.8.0\n  - [Android NDK r14b](https://dl.google.com/android/repository/android-ndk-r14b-darwin-x86_64.zip)\n  \n- Guidance \n\n  ```\n  cd ZLMediaKit\n  export ANDROID_NDK_ROOT=/path/to/ndk\n  ./build_for_android.sh\n  ```\n  \n### Building on Windows\n\n- My environment\n  - Windows 10\n  - Visual Studio 2017\n  - [CMake GUI](https://cmake.org/files/v3.10/cmake-3.10.0-rc1-win32-x86.msi)\n  \n- Guidance\n```\n1. Enter the ZLMediaKit directory and execute `git submodule update --init` to download the code for ZLToolKit.\n2. Open the project with CMake GUI and generate the Visual Studio project file.\n3. Find the project file (ZLMediaKit.sln), double-click to open it with VS2017.\n4. Choose to compile the Release version. Find the target file and run the test cases.\n```\n\n## Usage\n\n- As a server：\n\t```cpp\n\tTcpServer::Ptr rtspSrv(new TcpServer());\n\tTcpServer::Ptr rtmpSrv(new TcpServer());\n\tTcpServer::Ptr httpSrv(new TcpServer());\n\tTcpServer::Ptr httpsSrv(new TcpServer());\n\t\n\trtspSrv->start<RtspSession>(mINI::Instance()[Config::Rtsp::kPort]);\n\trtmpSrv->start<RtmpSession>(mINI::Instance()[Config::Rtmp::kPort]);\n\thttpSrv->start<HttpSession>(mINI::Instance()[Config::Http::kPort]);\n\thttpsSrv->start<HttpsSession>(mINI::Instance()[Config::Http::kSSLPort]);\n\t```\n\n- As a player：\n\t```cpp\n    MediaPlayer::Ptr player(new MediaPlayer());\n    weak_ptr<MediaPlayer> weakPlayer = player;\n    player->setOnPlayResult([weakPlayer](const SockException &ex) {\n        InfoL << \"OnPlayResult:\" << ex.what();\n        auto strongPlayer = weakPlayer.lock();\n        if (ex || !strongPlayer) {\n            return;\n        }\n\n        auto videoTrack = strongPlayer->getTrack(TrackVideo);\n        if (!videoTrack) {\n            WarnL << \"No video Track!\";\n            return;\n        }\n        videoTrack->addDelegate([](const Frame::Ptr &frame) {\n            //please decode video here\n        });\n    });\n\n    player->setOnShutdown([](const SockException &ex) {\n        ErrorL << \"OnShutdown:\" << ex.what();\n    });\n\n    //RTP transport over TCP\n    (*player)[Client::kRtpType] = Rtsp::RTP_TCP;\n    player->play(\"rtsp://admin:jzan123456@192.168.0.122/\");\n\t```\n- As a proxy server：\n\t```cpp\n\t//Support RTMP and RTSP URLs, but only H264 + AAC codec is supported\n\tauto urlList = {\"rtmp://live.hkstv.hk.lxdns.com/live/hks\",\n\t\t\t\"rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov\"};\n\tmap<string , PlayerProxy::Ptr> proxyMap;\n\tint i=0;\n\tfor(auto url : urlList){\n\t\tPlayerProxy::Ptr player(new PlayerProxy(\"live\",to_string(i++).data()));\n\t\tplayer->play(url);\n\t\tproxyMap.emplace(string(url),player);\n\t}\n\t```\n\t\n- As a pusher：\n\t```cpp\n\tPlayerProxy::Ptr player(new PlayerProxy(\"app\",\"stream\"));\n\tplayer->play(\"rtmp://live.hkstv.hk.lxdns.com/live/hks\");\n\t\n\tRtmpPusher::Ptr pusher;\n\tNoticeCenter::Instance().addListener(nullptr,Config::Broadcast::kBroadcastRtmpSrcRegisted,\n\t\t\t[&pusher](BroadcastRtmpSrcRegistedArgs){\n\t\tconst_cast<RtmpPusher::Ptr &>(pusher).reset(new RtmpPusher(app,stream));\n\t\tpusher->publish(\"rtmp://jizan.iok.la/live/test\");\n\t});\n\t\n\t```\n\n## Binary file download\nzlmediakit uses github action to continuously integrate automatic compilation package and upload the compilation output package. Please download the latest sdk library file and executable file at [issue list] (https://github.com/ZLMediaKit/ZLMediaKit/issues/483).\n\n## Docker Image\n\nYou can download the pre-compiled image from Docker Hub and start it:\n\n```bash\n#This image is pushed by the GitHub continuous integration automatic compilation to keep up with the latest code (master branch)\ndocker run -id -p 1935:1935 -p 8080:80 -p 8443:443 -p 8554:554 -p 10000:10000 -p 10000:10000/udp -p 8000:8000/udp -p 9000:9000/udp zlmediakit/zlmediakit:master\n```\n\nYou can also compile the image based on the Dockerfile:\n\n```bash\nbash build_docker_images.sh\n```\n\n## Collaborative Projects\n\n- Visual management website\n   - [A backend management website for this project](https://github.com/1002victor/zlm_webassist)\n   - [The latest web project with front-end and back-end separation, supporting webrtc playback](https://github.com/langmansh/AKStreamNVR)\n   - [Management web site based on ZLMediaKit master branch](https://gitee.com/kkkkk5G/MediaServerUI) \n   - [Management web site based on ZLMediaKit branch](https://github.com/chenxiaolei/ZLMediaKit_NVR_UI)\n   - [A very beautiful visual background management system](https://github.com/MingZhuLiu/ZLMediaServerManagent)\n    \n- Media management platform\n  - [GB28181 complete solution with web management website, supporting webrtc and h265 playback](https://github.com/648540858/wvp-GB28181-pro)\n  - [Powerful media control and management interface platform, supporting GB28181](https://github.com/chatop2020/AKStream)\n  - [GB28181 server implemented in C++](https://github.com/any12345com/BXC_SipServer)\n  - [GB28181 server implemented in Go](https://github.com/panjjo/gosip)\n  - [Node-js version of GB28181 platform](https://gitee.com/hfwudao/GB28181_Node_Http)\n  - [Hikvision ehome server implemented in Go](https://github.com/tsingeye/FreeEhome)\n\n- Client\n  - [Http Api and hook in zlm-spring-boot-starter](https://github.com/lunasaw/zlm-spring-boot-starter)\n  - [Complete java wrapper library for c sdk](https://github.com/lidaofu-hub/j_zlm_sdk)\n  - [Complete C# wrapper library for c sdk](https://github.com/malegend/ZLMediaKit.Autogen) \n  - [Push client implemented based on C SDK](https://github.com/hctym1995/ZLM_ApiDemo)\n  - [Http API and Hook in C#](https://github.com/chengxiaosheng/ZLMediaKit.HttpApi)\n  - [RESTful client in DotNetCore](https://github.com/MingZhuLiu/ZLMediaKit.DotNetCore.Sdk)\n   \n- Player\n  - [Player supporting H265 based on wasm](https://github.com/numberwolf/h265web.js)\n  - [WebSocket-fmp4 player based on MSE](https://github.com/v354412101/wsPlayer) \n  - [Domestic webrtc sdk(metaRTC)](https://github.com/metartc/metaRTC)\n  - [GB28181 player implemented in C++](https://github.com/any12345com/BXC_gb28181Player)\n  - [Android RTCPlayer](https://github.com/leo94666/RTCPlayer)\n\n\n## License\n\nThe self-owned code of this project is licensed under the permissive MIT License and can be freely applied to commercial and non-commercial projects while retaining copyright information.\nHowever, this project also uses some scattered [open source code](https://github.com/ZLMediaKit/ZLMediaKit/wiki/%E4%BB%A3%E7%A0%81%E4%BE%9D%E8%B5%96%E4%B8%8E%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E) , please replace or remove it for commercial use.\nAny commercial disputes or infringement caused by using this project have nothing to do with the project and developers and shall be at your own legal risk.\nWhen using the code of this project, the license agreement should also indicate the license of the third-party libraries that this project depends on.\n\n## Contact Information\n\n- Email: <1213642868@qq.com> (For project-related or streaming media-related questions, please follow the issue process. Otherwise, we will not reply to emails.)\n- QQ groups: Both QQ groups with a total of 4000 members are full. We will not create new QQ groups in the future. Users can join the [Knowledge Planet](https://github.com/ZLMediaKit/ZLMediaKit/issues/2364) to ask questions and support this project.\n- Follow WeChat Official Account:\n<img src=https://user-images.githubusercontent.com/11495632/232451702-4c50bc72-84d8-4c94-af2b-57290088ba7a.png width=15% />\n\n## How to Ask Questions?\n\nIf you have any questions about the project, we recommend that you:\n\n- 1. Carefully read the readme and wiki. If necessary, you can also check the issues.\n- 2. If your question has not been resolved, you can raise an issue.\n- 3. Some questions may not be suitable for issues, but can be raised in QQ groups.\n- 4. We generally do not accept free technical consulting and support via QQ private chat. ([Why we don't encourage QQ private chat](https://github.com/ZLMediaKit/ZLMediaKit/wiki/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%BB%BA%E8%AE%AEQQ%E7%A7%81%E8%81%8A%E5%92%A8%E8%AF%A2%E9%97%AE%E9%A2%98%EF%BC%9F)).\n- 5. If you need more timely and thoughtful technical support, you can join the [Knowledge Planet](https://github.com/ZLMediaKit/ZLMediaKit/issues/2364) for a fee.\n\n## Special Thanks\n\nThis project uses the [media-server](https://github.com/ireader/media-server) library developed by [Lao Chen](https://github.com/ireader). The reuse and de-multiplexing of ts/fmp4/mp4/ps container formats in this project depend on the media-server library. Lao Chen has provided invaluable help and support multiple times in implementing many functions of this project, and we would like to express our sincere gratitude to him!\n\n## Acknowledgments\n\nThanks to all those who have supported this project in various ways, including but not limited to code contributions, problem feedback, and donations. The following list is not in any particular order:\n\n[老陈](https://github.com/ireader)\n[Gemfield](https://github.com/gemfield)\n[南冠彤](https://github.com/nanguantong2)\n[凹凸慢](https://github.com/tsingeye)\n[chenxiaolei](https://github.com/chenxiaolei)\n[史前小虫](https://github.com/zqsong)\n[清涩绿茶](https://github.com/baiyfcu)\n[3503207480](https://github.com/3503207480)\n[DroidChow](https://github.com/DroidChow)\n[阿塞](https://github.com/HuoQiShuai)\n[火宣](https://github.com/ChinaCCF)\n[γ瑞γミ](https://github.com/JerryLinGd)\n[linkingvision](https://www.linkingvision.com/)\n[茄子](https://github.com/taotaobujue2008)\n[好心情](mailto:409257224@qq.com)\n[浮沉](https://github.com/MingZhuLiu)\n[Xiaofeng Wang](https://github.com/wasphin)\n[doodoocoder](https://github.com/doodoocoder)\n[qingci](https://github.com/Colibrow)\n[swwheihei](https://github.com/swwheihei)\n[KKKKK5G](https://gitee.com/kkkkk5G)\n[Zhou Weimin](mailto:zhouweimin@supremind.com)\n[Jim Jin](https://github.com/jim-king-2000)\n[西瓜丶](mailto:392293307@qq.com)\n[MingZhuLiu](https://github.com/MingZhuLiu)\n[chengxiaosheng](https://github.com/chengxiaosheng)\n[big panda](mailto:2381267071@qq.com)\n[tanningzhong](https://github.com/tanningzhong)\n[hctym1995](https://github.com/hctym1995)\n[hewenyuan](https://gitee.com/kingyuanyuan)\n[sunhui](mailto:sunhui200475@163.com)\n[mirs](mailto:fangpengcheng@bilibili.com)\n[Kevin Cheng](mailto:kevin__cheng@outlook.com)\n[Liu Jiang](mailto:root@oopy.org)\n[along](https://github.com/alongl)\n[qingci](mailto:xpy66swsry@gmail.com)\n[lyg1949](mailto:zh.ghlong@qq.com)\n[zhlong](mailto:zh.ghlong@qq.com)\n[大裤衩](mailto:3503207480@qq.com)\n[droid.chow](mailto:droid.chow@gmail.com)\n[陈晓林](https://github.com/musicwood)\n[CharleyWangHZ](https://github.com/CharleyWangHZ)\n[Johnny](https://github.com/johzzy)\n[DoubleX69](https://github.com/DoubleX69)\n[lawrencehj](https://github.com/lawrencehj)\n[yangkun](mailto:xyyangkun@163.com)\n[Xinghua Zhao](mailto:holychaossword@hotmail.com)\n[hejilin](https://github.com/brokensword2018)\n[rqb500](https://github.com/rqb500)\n[Alex](https://github.com/alexliyu7352)\n[Dw9](https://github.com/Dw9)\n[明月惊鹊](mailto:mingyuejingque@gmail.com)\n[cgm](mailto:2958580318@qq.com)\n[hejilin](mailto:1724010622@qq.com)\n[alexliyu7352](mailto:liyu7352@gmail.com)\n[cgm](mailto:2958580318@qq.com)\n[haorui wang](https://github.com/HaoruiWang)\n[joshuafc](mailto:joshuafc@foxmail.com)\n[JayChen0519](https://github.com/JayChen0519)\n[zx](mailto:zuoxue@qq.com)\n[wangcker](mailto:wangcker@163.com)\n[WuPeng](mailto:wp@zafu.edu.cn)\n[starry](https://github.com/starry)\n[mtdxc](https://github.com/mtdxc)\n[胡刚风](https://github.com/hugangfeng333)\n[zhao85](https://github.com/zhao85)\n[dreamisdream](https://github.com/dreamisdream)\n[dingcan](https://github.com/dcan123)\n[Haibo Chen](https://github.com/duiniuluantanqin)\n[Leon](https://gitee.com/leon14631)\n[custompal](https://github.com/custompal)\n[PioLing](https://github.com/PioLing)\n[KevinZang](https://github.com/ZSC714725)\n[gongluck](https://github.com/gongluck)\n[a-ucontrol](https://github.com/a-ucontrol)\n[TalusL](https://github.com/TalusL)\n[ahaooahaz](https://github.com/AHAOAHA)\n[TempoTian](https://github.com/TempoTian)\n[Derek Liu](https://github.com/yjkhtddx)\n[ljx0305](https://github.com/ljx0305)\n[朱如洪 ](https://github.com/zhu410289616)\n[lijin](https://github.com/1461521844lijin)\n[PioLing](https://github.com/PioLing)\n[BackT0TheFuture](https://github.com/BackT0TheFuture)\n[perara](https://github.com/perara)\n[codeRATny](https://github.com/codeRATny)\n[dengjfzh](https://github.com/dengjfzh)\n[百鸣](https://github.com/ixingqiao)\n[fruit Juice](https://github.com/xuandu)\n[tbago](https://github.com/tbago)\n[Luosh](https://github.com/Luosh)\n[linxiaoyan87](https://github.com/linxiaoyan)\n[waken](https://github.com/mc373906408)\n[Deepslient](https://github.com/Deepslient)\n[imp_rayjay](https://github.com/rayjay214)\n[ArmstrongCN](https://github.com/ArmstrongCN)\n[leibnewton](https://github.com/leibnewton)\n[1002victor](https://github.com/1002victor)\n[Grin](https://github.com/xyyangkun)\n[xbpeng121](https://github.com/xbpeng121)\n[lvchenyun](https://github.com/lvchenyun)\n[Fummowo](https://github.com/Fummowo)\n[Jovial Young ](https://github.com/JHYoung1034)\n[yujitai](https://github.com/yujitai)\n[KisChang](https://github.com/kisChang)\n[zjx94](https://github.com/zjx94)\n[LeiZhi.Mai ](https://github.com/blueskiner)\n[JiaHao](https://github.com/nashiracn)\n[chdahuzi](https://github.com/chdahuzi)\n[snysmtx](https://github.com/snysmtx)\n[SetoKaiba](https://github.com/SetoKaiba)\n[sandro-qiang](https://github.com/sandro-qiang)\n[Paul Philippov](https://github.com/themactep)\n[张传峰](https://github.com/zhang-chuanfeng)\n[lidaofu-hub](https://github.com/lidaofu-hub)\n[huangcaichun](https://github.com/huangcaichun)\n[jamesZHANG500](https://github.com/jamesZHANG500)\n[weidelong](https://github.com/wdl1697454803)\n[小强先生](https://github.com/linshangqiang)\n[李之阳](https://github.com/leo94666)\n[sgzed](https://github.com/sgzed)\n[gaoshan](https://github.com/foobra)\n[zhang2349](https://github.com/zhang2349)\n[benshi](https://github.com/BenLocal)\n[autoantwort](https://github.com/autoantwort)\n[u7ko4](https://github.com/u7ko4)\n[WengQiang](https://github.com/Tsubaki-01)\n[wEnchanters](https://github.com/wEnchanters)\n[sbkyy](https://github.com/sbkyy)\n[wuxingzhong](https://github.com/wuxingzhong)\n[286897655](https://github.com/286897655)\n[ss002012](https://github.com/ss002012)\n[a839419160](https://github.com/a839419160)\n[oldma3095](https://github.com/oldma3095)\n\nAlso thank to JetBrains for their support for open source project, we developed and debugged zlmediakit with CLion:\n\n[![JetBrains](https://resources.jetbrains.com/storage/products/company/brand/logos/CLion.svg)](https://jb.gg/OpenSourceSupport)\n\n## Use Cases\n\nThis project has gained recognition from many companies and individual developers. According to the author's incomplete statistics, companies using this project include well-known Internet giants, leading cloud service companies in China, several well-known AI unicorn companies, as well as a series of small and medium-sized companies. Users can endorse this project by pasting their company name and relevant project information on the [issue page](https://github.com/ZLMediaKit/ZLMediaKit/issues/511). Thank you for your support!\n"
        },
        {
          "name": "ZLMVersion.h.ini",
          "type": "blob",
          "size": 0.21875,
          "content": "#ifndef __GIT_VERSION_H__\n#define __GIT_VERSION_H__\n\n#define COMMIT_HASH \"@COMMIT_HASH@\"\n#define COMMIT_TIME \"@COMMIT_TIME@\"\n#define BRANCH_NAME \"@BRANCH_NAME@\"\n#define BUILD_TIME \"@BUILD_TIME@\"\n\n#endif //__GIT_VERSION_H__\n\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_docker_images.sh",
          "type": "blob",
          "size": 1.5732421875,
          "content": "#!/bin/bash\nset -e\nwhile getopts c:t:p:m:v:  opt\ndo\n\tcase $opt in\n\t\tt)\n\t\t\ttype=$OPTARG\n\t\t\t;;\n\t\tv)\n\t\t\tversion=$OPTARG\n\t\t\t;;\n\t\tp)\n\t\t\tplatform=$OPTARG\n\t\t\t;;\n\t\tm)\n\t\t\tmodel=$OPTARG\n\t\t\t;;\n\t\t?)\n\t\t\techo \"unkonwn\"\n\t\t\texit\n\t\t\t;;\n       esac\ndone\n\nhelp_string=\".sh [-t build|push] [-p (amd64|arm64|...,default is `arch`) ] [-m Debug|Release] [-v [version]]\"\n\nif [[ ! -n $type ]];then\n        echo $help_string\n        exit\nfi\n\nif [[ ! -n $model ]];then\n        echo $help_string\n        exit\nfi\n\nif [[ ! -n $version ]];then\n        echo \"use latest no version set\"\n        version=\"latest\"\nfi\n\nif [[ ! -n $platform ]];then\n\tplatform=`arch`\n\techo \"auto select arch:${platform}\" \nfi\n\ncase $platform in\n\"arm64\")\n\t#eg:osx\n\tplatform=\"linux/arm64\"\n\t;;\n\"x86_64\"|\"amd64\")\n\tplatform=\"linux/amd64\"\n\t;;\n*)\n\techo \"unknown cpu-arch ${platform}\"\n\techo \"Use 'docker buildx ls' to get supported ARCH\"\n\texit\n\t;;\nesac\n\ncase $model in\n\t'Debug')\n\t\t;;\n\t'Release')\n\t\t;;\n\t*)\n        echo \"unkonwn model\"\n\techo $help_string\n        exit\n        ;;\nesac\n\nnamespace=\"zlmediakit\"\npackagename=\"zlmediakit\"\n\ncase $type in\n\t'build')\n\trm -rf ./build/CMakeCache.txt\n\t# 以腾讯云账号为例\n\tdocker buildx build --platform=$platform --network=host --build-arg MODEL=$model -t $namespace/$packagename:$model.$version .\n\t#docker build --network=host --build-arg MODEL=$model -t $namespace/$packagename:$model.$version .\n\t\t;;\n\t'push')\n\t\techo \"push to dst registry\"\n\t\t# 以腾讯云账号为例\n\t\tdocker login --username=zlmediakit\n\t\tdocker push $namespace/$packagename:$model.$version\n\t\t;;\n \t*)\n\t\techo \"unkonwn type\"\n\t\techo $help_string\n\t\texit\n\t\t;;\nesac\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "conf",
          "type": "tree",
          "content": null
        },
        {
          "name": "default.pem",
          "type": "blob",
          "size": 5.37109375,
          "content": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAtgg0vsIc8bIMb9hAO1Lwq2TVNYMiD928WCVwq7Bj3B9LM8ci\nfN+mBxHz35SeC9JnQysbKAf8VVfVi7GVzwFq4VaRreoIl8DoMbBORb2iKxfLXKEH\nS283bbl17csAYHTTBqFsKnO3kKvYoDHRKFX0T0rzZibI0ACQiylW+ALE3fVS0hFI\n8fmoZnIAOyQ15RLp7KPO4bMRVdZaOqRUZeW0YzbvOBeGZKbx3bXiscL9RwfGSxlF\nMCLahaJsBrVDo4/IGDRCmSydK8k/41MHd86pGPzCixBx7cqtKO/6+cVeEuGxfJPf\nJVuxNq6vkRSt2HxCc6i2iagA2uL/WYdg3Pa/4wIDAQABAoIBAADFrCObAzBrRu46\nhps50NeJR/ZAJibXE/NzxTSVPPc0EseXcqgA8t1Y0CYEpV77d4CrcCQNVJ6wDrHX\nAQGtydxG17tbIMo0AUgkrVBSa5uvMCembzd8s0l93egyUkAWfsaqbKEJeJ/eer7D\nN1Xqd2zWro2iYHuxZOuSM1I+AMPIQsmYJ71w6/h9YpQh436Vd+zNQ5k/nWpLHihT\nVB2ECrJ36IbuiYo3UbSr9gQjyBSMkk/oUqO4jonkb6L7r0mqHXNeblycg99/m6i7\nO5c5DQKMhzqibwvNNf6uvWCcLKfF5Kqzzf9DKR3/pYOBQrVTA24l4UFsfTdEKUNS\na8W3P8ECgYEA6CQOG15V9upc2nPzfFwgftGyomSMYH54PkSFdr2R4djyXkyil6Ik\nefK3E+lKr9YnzwcLw3csPmVt3lqSgixQUMcyXXrhCttfk/qzSJkI+UZPQE+SrNeW\n0c+blQOzVcfbNRu248iGFaRx+5qA6PMH4UZTgn7e6nXoPUgRp4ryI/MCgYEAyL24\nR7uMSuPQBRJFU84Lu+Rv4lkKdCYSLuQtMZly74m11iG6e+EHJQx0C3eexrC8LhOV\nSm4xTlwVrYQ+IdW51bhAwwHcnzGUzpbESJSDK5ZTd/P5daz8yt8ZaGbUFxNEsxTr\nElKPRcjJH5CRuyYr24DYg+CpMGdlF0N6Pcx5IFECgYAedlzDiqWNOUPmBsE02IIL\nIklmtfsVzoLI6QT6h/XUxTtI1JWhgE15EzijDEIYwOmIaUxJ4iGULos0Wn5PRrFj\naEBbs/xECHWKXaOZKzvaOje8ILUGqWPJNI0eCNZHs2o4leJyEaZGwMWUVroD16B5\nF1luDmgCLGbFY+etLLaJsQKBgB40VbcNZDWcg59PuXi7pw5Vd/RB243QcKn3kUlG\nQoICYYbfulSLbmzHq+pRzGUvEJGKRstVOzwEJQrfvA2RQA4FVFFDRXP6nN5c1xno\nprf3PYXuAtoO9lZ8LTGFT2JNdufPPPOb0oz4gjKqqRLU0oKLp4hoVGzBEffnIkyM\nKKmRAoGBAIGXh4gvxzEQMgGzfKfNuxKCT9SEhsg7NU++Iey3qn4G4t+jIWOt2Gi7\n5+y49JWoGq6DL+2ZVVw6Cn6wd9tfzDKD5GhvIztK0z1+wqpFOL4M8bwqJDOKgsZ3\nPCPASbxPgMyNCjRhvxBuscCr+dRFYDUrirOK9EUPyO9EoNTPPN9a\n-----END RSA PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\nMIIGBTCCBO2gAwIBAgIQDNIYeWoFoT3jxF2+HmEbTDANBgkqhkiG9w0BAQsFADBu\nMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\nd3cuZGlnaWNlcnQuY29tMS0wKwYDVQQDEyRFbmNyeXB0aW9uIEV2ZXJ5d2hlcmUg\nRFYgVExTIENBIC0gRzIwHhcNMjMwOTI4MDAwMDAwWhcNMjQwOTI3MjM1OTU5WjAh\nMR8wHQYDVQQDExZkZWZhdWx0LnpsbWVkaWFraXQuY29tMIIBIjANBgkqhkiG9w0B\nAQEFAAOCAQ8AMIIBCgKCAQEAtgg0vsIc8bIMb9hAO1Lwq2TVNYMiD928WCVwq7Bj\n3B9LM8cifN+mBxHz35SeC9JnQysbKAf8VVfVi7GVzwFq4VaRreoIl8DoMbBORb2i\nKxfLXKEHS283bbl17csAYHTTBqFsKnO3kKvYoDHRKFX0T0rzZibI0ACQiylW+ALE\n3fVS0hFI8fmoZnIAOyQ15RLp7KPO4bMRVdZaOqRUZeW0YzbvOBeGZKbx3bXiscL9\nRwfGSxlFMCLahaJsBrVDo4/IGDRCmSydK8k/41MHd86pGPzCixBx7cqtKO/6+cVe\nEuGxfJPfJVuxNq6vkRSt2HxCc6i2iagA2uL/WYdg3Pa/4wIDAQABo4IC6jCCAuYw\nHwYDVR0jBBgwFoAUeN+RkF/u3qz2xXXr1UxVU+8kSrYwHQYDVR0OBBYEFHmEMVp9\n9EHIPWA2U1iLKogCosGFMCEGA1UdEQQaMBiCFmRlZmF1bHQuemxtZWRpYWtpdC5j\nb20wPgYDVR0gBDcwNTAzBgZngQwBAgEwKTAnBggrBgEFBQcCARYbaHR0cDovL3d3\ndy5kaWdpY2VydC5jb20vQ1BTMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggr\nBgEFBQcDAQYIKwYBBQUHAwIwgYAGCCsGAQUFBwEBBHQwcjAkBggrBgEFBQcwAYYY\naHR0cDovL29jc3AuZGlnaWNlcnQuY29tMEoGCCsGAQUFBzAChj5odHRwOi8vY2Fj\nZXJ0cy5kaWdpY2VydC5jb20vRW5jcnlwdGlvbkV2ZXJ5d2hlcmVEVlRMU0NBLUcy\nLmNydDAMBgNVHRMBAf8EAjAAMIIBfwYKKwYBBAHWeQIEAgSCAW8EggFrAWkAdgDu\nzdBk1dsazsVct520zROiModGfLzs3sNRSFlGcR+1mwAAAYravqonAAAEAwBHMEUC\nIQDX+gqsd7I0yzjkhgp2YrccUlTx4wkFptFvmQxeChImRgIgJdgJa2Uamd790BCI\n/CZwSqmRlor5eU8exAixdcopYpcAdwBIsONr2qZHNA/lagL6nTDrHFIBy1bdLIHZ\nu7+rOdiEcwAAAYravqqCAAAEAwBIMEYCIQCP6rkKg2FlF92CyMbVMk3ESh/9gVaM\ntRsv5I//i5IVigIhAINHERhy7812wR47fwmvqWDjxyOB1ZodU7WA9D5L/1bVAHYA\n2ra/az+1tiKfm8K7XGvocJFxbLtRhIU0vaQ9MEjX+6sAAAGK2r6qQQAABAMARzBF\nAiAiz3bp/j4SlnVxKg1HZY+YdUboi+kaKf5G8X6aFLIqUgIhAPPCm5UN05p7Oqrc\nsP/wdHDB7O/2AbUksYSLhidmwfmhMA0GCSqGSIb3DQEBCwUAA4IBAQBmaG51jU1E\nMsgT1VzutQUXglEvJGVf54cA+0TSfjfnP1n9ALdKjGxHL3KBh4UkPx5zdE5//FUX\ndacua6BQEWSCmMtYL0CFieFnLGXh0mgkfvRaP6+3xe6TkJ4kuyJkMS9YMDpVl80F\n2GLlE09EsZ3Xk9+SCpmWOPLOCDFURbwpc5ht+acROfzYJQyCY0L8EGbyL5/q9oMn\nugRGh4oyGvXgKvFIPzpZkaOmb0b63/uBc5JkiyQhuFdYaS2cLOwupXmCtIHL4Od6\nOU8/8smT8NEkD7d3lUijtc84q2TihW7ebT7RtOco49PDvFP/7w28QjxM8Ohv9/Gz\nXyta8ICQVwmK\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEqjCCA5KgAwIBAgIQDeD/te5iy2EQn2CMnO1e0zANBgkqhkiG9w0BAQsFADBh\nMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\nd3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBH\nMjAeFw0xNzExMjcxMjQ2NDBaFw0yNzExMjcxMjQ2NDBaMG4xCzAJBgNVBAYTAlVT\nMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j\nb20xLTArBgNVBAMTJEVuY3J5cHRpb24gRXZlcnl3aGVyZSBEViBUTFMgQ0EgLSBH\nMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAO8Uf46i/nr7pkgTDqnE\neSIfCFqvPnUq3aF1tMJ5hh9MnO6Lmt5UdHfBGwC9Si+XjK12cjZgxObsL6Rg1njv\nNhAMJ4JunN0JGGRJGSevbJsA3sc68nbPQzuKp5Jc8vpryp2mts38pSCXorPR+sch\nQisKA7OSQ1MjcFN0d7tbrceWFNbzgL2csJVQeogOBGSe/KZEIZw6gXLKeFe7mupn\nNYJROi2iC11+HuF79iAttMc32Cv6UOxixY/3ZV+LzpLnklFq98XORgwkIJL1HuvP\nha8yvb+W6JislZJL+HLFtidoxmI7Qm3ZyIV66W533DsGFimFJkz3y0GeHWuSVMbI\nlfsCAwEAAaOCAU8wggFLMB0GA1UdDgQWBBR435GQX+7erPbFdevVTFVT7yRKtjAf\nBgNVHSMEGDAWgBROIlQgGJXm427mD/r6uRLtBhePOTAOBgNVHQ8BAf8EBAMCAYYw\nHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMBIGA1UdEwEB/wQIMAYBAf8C\nAQAwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdp\nY2VydC5jb20wQgYDVR0fBDswOTA3oDWgM4YxaHR0cDovL2NybDMuZGlnaWNlcnQu\nY29tL0RpZ2lDZXJ0R2xvYmFsUm9vdEcyLmNybDBMBgNVHSAERTBDMDcGCWCGSAGG\n/WwBAjAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy5kaWdpY2VydC5jb20vQ1BT\nMAgGBmeBDAECATANBgkqhkiG9w0BAQsFAAOCAQEAoBs1eCLKakLtVRPFRjBIJ9LJ\nL0s8ZWum8U8/1TMVkQMBn+CPb5xnCD0GSA6L/V0ZFrMNqBirrr5B241OesECvxIi\n98bZ90h9+q/X5eMyOD35f8YTaEMpdnQCnawIwiHx06/0BfiTj+b/XQih+mqt3ZXe\nxNCJqKexdiB2IWGSKcgahPacWkk/BAQFisKIFYEqHzV974S3FAz/8LIfD58xnsEN\nGfzyIDkH3JrwYZ8caPTf6ZX9M1GrISN8HnWTtdNCH2xEajRa/h9ZBXjUyFKQrGk2\nn2hcLrfZSbynEC/pSw/ET7H5nWwckjmAJ1l9fcnbqkU/pf6uMQmnfl0JQjJNSg==\n-----END CERTIFICATE-----"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "dockerfile",
          "type": "blob",
          "size": 2.357421875,
          "content": "FROM ubuntu:20.04 AS build\nARG MODEL\n#shell,rtmp,rtsp,rtsps,http,https,rtp\nEXPOSE 1935/tcp\nEXPOSE 554/tcp\nEXPOSE 80/tcp\nEXPOSE 443/tcp\nEXPOSE 10000/udp\nEXPOSE 10000/tcp\nEXPOSE 8000/udp\nEXPOSE 8000/tcp\nEXPOSE 9000/udp\n\n# ADD sources.list /etc/apt/sources.list\n\nRUN apt-get update && \\\n         DEBIAN_FRONTEND=\"noninteractive\" \\\n         apt-get install -y --no-install-recommends \\\n         build-essential \\\n         cmake \\\n         git \\\n         curl \\\n         vim \\\n         wget \\\n         ca-certificates \\\n         tzdata \\\n         libssl-dev \\\n         gcc \\\n         g++ \\\n         gdb && \\\n         apt-get autoremove -y && \\\n         apt-get clean -y && \\\n         rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /opt/media\nCOPY . /opt/media/ZLMediaKit\nWORKDIR /opt/media/ZLMediaKit\n\n# 3rdpart init\nWORKDIR /opt/media/ZLMediaKit/3rdpart\nRUN wget https://github.com/cisco/libsrtp/archive/v2.3.0.tar.gz -O libsrtp-2.3.0.tar.gz && \\\n    tar xfv libsrtp-2.3.0.tar.gz && \\\n    mv libsrtp-2.3.0 libsrtp && \\\n    cd libsrtp && ./configure --enable-openssl && make -j $(nproc) && make install\n#RUN git submodule update --init --recursive && \\\n\nRUN mkdir -p build release/linux/${MODEL}/\n\nWORKDIR /opt/media/ZLMediaKit/build\nRUN cmake -DCMAKE_BUILD_TYPE=${MODEL} -DENABLE_WEBRTC=true -DENABLE_FFMPEG=true -DENABLE_TESTS=false -DENABLE_API=false .. && \\\n    make -j $(nproc)\n\nFROM ubuntu:20.04\nARG MODEL\n\n# ADD sources.list /etc/apt/sources.list\n\nRUN apt-get update && \\\n         DEBIAN_FRONTEND=\"noninteractive\" \\\n         apt-get install -y --no-install-recommends \\\n         vim \\\n         wget \\\n         ca-certificates \\\n         tzdata \\\n         curl \\\n         libssl-dev \\\n         ffmpeg \\\n         gcc \\\n         g++ \\\n         gdb && \\\n         apt-get autoremove -y && \\\n         apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/*\n\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \\\n        && echo $TZ > /etc/timezone && \\\n        mkdir -p /opt/media/bin/www\n\nWORKDIR /opt/media/bin/\nCOPY --from=build /opt/media/ZLMediaKit/release/linux/${MODEL}/MediaServer /opt/media/ZLMediaKit/default.pem /opt/media/bin/\nCOPY --from=build /opt/media/ZLMediaKit/release/linux/${MODEL}/config.ini /opt/media/conf/\nCOPY --from=build /opt/media/ZLMediaKit/www/ /opt/media/bin/www/\nENV PATH /opt/media/bin:$PATH\nCMD [\"./MediaServer\",\"-s\", \"default.pem\", \"-c\", \"../conf/config.ini\", \"-l\",\"0\"]\n"
        },
        {
          "name": "ext-codec",
          "type": "tree",
          "content": null
        },
        {
          "name": "golang",
          "type": "tree",
          "content": null
        },
        {
          "name": "k8s_readme.md",
          "type": "blob",
          "size": 0.9501953125,
          "content": "# k8s部署建议\n\n## 编译\n\n- 方式一 \n\n    可以自己写脚本编译\n\n- 方式二\n\n    可以使用自带`build_docker_images.sh`脚本编译，具体参见[部署](##部署)\n\n## 部署\n- 可以是用根目录下面build_docker_images.sh脚本进行编译与推送到指定仓库\n\n    - 推送\n\n        推送之前务必修改脚本中`镜像仓库用户名与仓库地址`。有需要也可以同时修改`命名空间与包名`。\n\n    - 编译\n\n        ```shell\n        sh build_docker_images.sh [-t build|push] [-m Debug|Release] [-v [version]]\n        -t: 指定编译类型，build 编译镜像 push 推送到指定仓库\n        -m: 编译类型\n        -v：版本号\n        ```\n\n- 如果需要自定义配置文件，可以使用`configMap`挂载到pod中`/opt/media/conf/`目录来覆盖默认配置文件\n- 如果需要自定义证书，请替换源码目录`tests`目录下面的`default.pem`证书文件，zlmedia在pod启动时候会默认加载。\n\n"
        },
        {
          "name": "package",
          "type": "tree",
          "content": null
        },
        {
          "name": "player",
          "type": "tree",
          "content": null
        },
        {
          "name": "postman",
          "type": "tree",
          "content": null
        },
        {
          "name": "resource.rc",
          "type": "blob",
          "size": 1.228515625,
          "content": "﻿#ifdef APSTUDIO_INVOKED\n#error This file is not editable by Visual C++.\n#endif //APSTUDIO_INVOKED\n\n#include \"winres.h\"\n\n#if defined(ENABLE_VERSION)\n#include \"ZLMVersion.h\"\n#endif\n\n#define ZLM_VERSION 8,0,0,1\n\n// 拼接 BRANCH_NAME 和 COMMIT_HASH ，例如 master - 1c8ed1c\n#define COMMIT_HASH_BRANCH_STR BRANCH_NAME \" - \" COMMIT_HASH \n\nIDI_ICON1 ICON DISCARDABLE \"www//logo.ico\"\n\nVS_VERSION_INFO VERSIONINFO\n FILEVERSION ZLM_VERSION\n PRODUCTVERSION ZLM_VERSION\n FILEFLAGSMASK 0x17L\n#ifdef _DEBUG\n FILEFLAGS 0x1L\n#else\n FILEFLAGS 0x0L\n#endif\n FILEOS 0x4L\n FILETYPE 0x2L\n FILESUBTYPE 0x0L\nBEGIN\n    BLOCK \"StringFileInfo\"\n    BEGIN\n        BLOCK \"000004b0\"\n        BEGIN\n            VALUE \"CompanyName\", \"Applied ZLMediaKit Informatics Software\"\n            VALUE \"FileDescription\", \"This file is part of the C++ ZLM\"\n            VALUE \"FileVersion\", COMMIT_HASH_BRANCH_STR\n            VALUE \"InternalName\", COMMIT_HASH_BRANCH_STR\n            VALUE \"LegalCopyright\", \"Copyright (c) 2016-present The ZLMediaKit project authors\"\n            VALUE \"ProductName\", \"https://github.com/ZLMediaKit\"\n            VALUE \"ProductVersion\", COMMIT_HASH_BRANCH_STR\n        END\n    END\n    BLOCK \"VarFileInfo\"\n    BEGIN\n        VALUE \"Translation\", 0x0, 1200\n    END\nEND\n"
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "sources.list",
          "type": "blob",
          "size": 0.962890625,
          "content": "deb http://mirrors.cloud.tencent.com/ubuntu/ bionic main restricted universe multiverse\n# deb-src http://mirrors.cloud.tencent.com/ubuntu/ bionic main restricted universe multiverse\ndeb http://mirrors.cloud.tencent.com/ubuntu/ bionic-updates main restricted universe multiverse\n# deb-src http://mirrors.cloud.tencent.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb http://mirrors.cloud.tencent.com/ubuntu/ bionic-backports main restricted universe multiverse\n# deb-src http://mirrors.cloud.tencent.com/ubuntu/ bionic-backports main restricted universe multiverse\ndeb http://mirrors.cloud.tencent.com/ubuntu/ bionic-security main restricted universe multiverse\n# deb-src http://mirrors.cloud.tencent.com/ubuntu/ bionic-security main restricted universe multiverse\n \n# deb http://mirrors.cloud.tencent.com/ubuntu/ bionic-proposed main restricted universe multiverse\n# deb-src http://mirrors.cloud.tencent.com/ubuntu/ bionic-proposed main restricted universe multiverse\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "srt",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "webrtc",
          "type": "tree",
          "content": null
        },
        {
          "name": "www",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}