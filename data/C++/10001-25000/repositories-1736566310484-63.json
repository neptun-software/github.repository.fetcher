{
  "metadata": {
    "timestamp": 1736566310484,
    "page": 63,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "exaloop/codon",
      "stars": 15255,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0380859375,
          "content": "---\nBasedOnStyle: LLVM\nColumnLimit: 88\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.3544921875,
          "content": "---\nChecks: 'clang-diagnostic-*,clang-analyzer-*,cppcoreguidelines-*,modernize-*,bugprone-*,concurrency-*,performance-*,portability-*,-modernize-use-nodiscard,-modernize-use-trailing-return-type,-cppcoreguidelines-special-member-functions'\nWarningsAsErrors: false\nHeaderFilterRegex: '(build/.+)|(codon/util/.+)'\nAnalyzeTemporaryDtors: false\nFormatStyle: llvm\n...\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.349609375,
          "content": "*.codon linguist-language=Python\n\n*.png binary\n*.jpg binary\n*.jpeg binary\n*.gif binary\n*.ico binary\n*.mov binary\n*.mp4 binary\n*.mp3 binary\n*.flv binary\n*.fla binary\n*.swf binary\n*.gz binary\n*.zip binary\n*.7z binary\n*.ttf binary\n*.eot binary\n*.woff binary\n*.pyc binary\n*.pdf binary\n\n*.gz binary\n\n*.bam binary\n*.bam.bai binary\n*.cram binary\n*.cram.crai binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8994140625,
          "content": "######################\n# Generic .gitignore #\n######################\n\n# Compiled source #\n###################\n*.com\n*.class\n*.dll\n*.exe\n*.o\n*.a\n*.obj\n*.so\n*.dylib\n*.pyc\nbuild/\ninstall/\ninstall_*/\ninstall-*/\nextra/python/src/jit.cpp\nextra/jupyter/build/\n\n# Packages #\n############\n# it's better to unpack these files and commit the raw source\n# git has its own built-in compression methods\n*.7z\n*.dmg\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n**/**.egg-info\n\n# Logs and databases #\n######################\n*.log\n*.sql\n*.sqlite\n\n# OS generated files #\n######################\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n\n# IDE generated files #\n#######################\n.idea\n.mypy_cache\n.vscode\n.cache\n.ipynb_checkpoints\n\n# CMake generated files #\n#########################\njupyter/share/jupyter/kernels/codon/kernel.json\njit/codon/version.py\n\n# Testing files #\n#################\ntemp/\nplayground/\nscratch*.*\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.2626953125,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n      - id: trailing-whitespace\n\n  - repo: https://github.com/pre-commit/mirrors-clang-format\n    rev: v17.0.2\n    hooks:\n      - id: clang-format\n        types:\n          - c++\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 15.5634765625,
          "content": "cmake_minimum_required(VERSION 3.14)\nproject(\n  Codon\n  VERSION \"0.17.0\"\n  HOMEPAGE_URL \"https://github.com/exaloop/codon\"\n  DESCRIPTION \"high-performance, extensible Python compiler\")\nset(CODON_JIT_PYTHON_VERSION \"0.2.0\")\nconfigure_file(\"${PROJECT_SOURCE_DIR}/cmake/config.h.in\"\n               \"${PROJECT_SOURCE_DIR}/codon/config/config.h\")\nconfigure_file(\"${PROJECT_SOURCE_DIR}/cmake/config.py.in\"\n               \"${PROJECT_SOURCE_DIR}/jit/codon/version.py\")\n\noption(CODON_GPU \"build Codon GPU backend\" OFF)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\nif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  set(CMAKE_CXX_FLAGS\n      \"${CMAKE_CXX_FLAGS} -pedantic -fvisibility-inlines-hidden -Wno-return-type-c-linkage -Wno-gnu-zero-variadic-macro-arguments -Wno-deprecated-declarations\"\n  )\nelse()\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-return-type\")\nendif()\nset(CMAKE_CXX_FLAGS_DEBUG \"-g\")\nif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -fno-limit-debug-info\")\nendif()\nset(CMAKE_CXX_FLAGS_RELEASE \"-O3\")\ninclude_directories(.)\n\nset(APPLE_ARM OFF)\nif (APPLE AND CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL \"arm64\")\n  set(APPLE_ARM ON)\nendif()\n\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\nfind_package(LLVM REQUIRED)\n\nif (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.24.0\")\n  cmake_policy(SET CMP0135 NEW)\nendif()\n\nmessage(STATUS \"Found LLVM ${LLVM_PACKAGE_VERSION}\")\nmessage(STATUS \"Using LLVMConfig.cmake in: ${LLVM_DIR}\")\ninclude(${CMAKE_SOURCE_DIR}/cmake/deps.cmake)\n\nset(CMAKE_BUILD_WITH_INSTALL_RPATH ON)\nif(APPLE)\n  set(CMAKE_INSTALL_RPATH \"@loader_path;@loader_path/../lib/codon\")\n  set(STATIC_LIBCPP \"\")\nelse()\n  set(CMAKE_INSTALL_RPATH \"$ORIGIN:$ORIGIN/../lib/codon\")\n  set(STATIC_LIBCPP \"-static-libstdc++\")\nendif()\n\nadd_executable(peg2cpp codon/util/peg2cpp.cpp)\ntarget_include_directories(peg2cpp PRIVATE ${peglib_SOURCE_DIR})\ntarget_link_libraries(peg2cpp PRIVATE Threads::Threads fmt)\nadd_custom_command(\n  OUTPUT codon_rules.cpp\n  COMMAND peg2cpp ${CMAKE_SOURCE_DIR}/codon/parser/peg/grammar.peg\n          codon_rules.cpp codon\n  DEPENDS peg2cpp codon/parser/peg/grammar.peg)\nadd_custom_command(\n  OUTPUT omp_rules.cpp\n  COMMAND peg2cpp ${CMAKE_SOURCE_DIR}/codon/parser/peg/openmp.peg omp_rules.cpp\n          omp\n  DEPENDS peg2cpp codon/parser/peg/openmp.peg)\n\n# Codon Jupyter library\nset(CODON_JUPYTER_FILES codon/util/jupyter.h codon/util/jupyter.cpp)\nadd_library(codon_jupyter SHARED ${CODON_JUPYTER_FILES})\n\n# Codon runtime library\nset(CODONRT_FILES codon/runtime/lib.h codon/runtime/lib.cpp\n                  codon/runtime/re.cpp codon/runtime/exc.cpp\n                  codon/runtime/gpu.cpp)\nadd_library(codonrt SHARED ${CODONRT_FILES})\nadd_dependencies(codonrt zlibstatic gc backtrace bz2 liblzma re2 fast_float)\ntarget_include_directories(codonrt PRIVATE ${backtrace_SOURCE_DIR}\n                                           ${re2_SOURCE_DIR}\n                                           \"${gc_SOURCE_DIR}/include\"\n                                           \"${fast_float_SOURCE_DIR}/include\" runtime)\ntarget_link_libraries(codonrt PRIVATE fmt omp backtrace ${STATIC_LIBCPP}\n                                      LLVMSupport)\nif(APPLE)\n  target_link_libraries(\n    codonrt\n    PRIVATE -Wl,-force_load,$<TARGET_FILE:zlibstatic>\n            -Wl,-force_load,$<TARGET_FILE:gc>\n            -Wl,-force_load,$<TARGET_FILE:bz2>\n            -Wl,-force_load,$<TARGET_FILE:liblzma>\n            -Wl,-force_load,$<TARGET_FILE:re2>)\nelse()\n  target_link_libraries(\n    codonrt\n    PRIVATE -Wl,--whole-archive $<TARGET_FILE:zlibstatic> $<TARGET_FILE:gc>\n            $<TARGET_FILE:bz2> $<TARGET_FILE:liblzma> $<TARGET_FILE:re2>\n            -Wl,--no-whole-archive)\nendif()\nif(ASAN)\n  target_compile_options(\n    codonrt PRIVATE \"-fno-omit-frame-pointer\" \"-fsanitize=address\"\n                    \"-fsanitize-recover=address\")\n  target_link_libraries(\n    codonrt PRIVATE \"-fno-omit-frame-pointer\" \"-fsanitize=address\"\n                    \"-fsanitize-recover=address\")\nendif()\nif(CODON_GPU)\n  add_compile_definitions(CODON_GPU)\n  find_package(CUDAToolkit REQUIRED)\n  target_link_libraries(codonrt PRIVATE CUDA::cudart_static CUDA::cuda_driver)\nendif()\nadd_custom_command(\n  TARGET codonrt\n  POST_BUILD\n  COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:omp>\n          ${CMAKE_BINARY_DIR})\n\n# Codon compiler library\ninclude_directories(${LLVM_INCLUDE_DIRS})\nadd_definitions(${LLVM_DEFINITIONS})\nset(CODON_HPPFILES\n    codon/compiler/compiler.h\n    codon/compiler/debug_listener.h\n    codon/compiler/engine.h\n    codon/compiler/error.h\n    codon/compiler/jit.h\n    codon/compiler/memory_manager.h\n    codon/dsl/dsl.h\n    codon/dsl/plugins.h\n    codon/parser/ast.h\n    codon/parser/ast/expr.h\n    codon/parser/ast/stmt.h\n    codon/parser/ast/types.h\n    codon/parser/ast/types/type.h\n    codon/parser/ast/types/link.h\n    codon/parser/ast/types/class.h\n    codon/parser/ast/types/function.h\n    codon/parser/ast/types/union.h\n    codon/parser/ast/types/static.h\n    codon/parser/ast/types/traits.h\n    codon/parser/cache.h\n    codon/parser/common.h\n    codon/parser/ctx.h\n    codon/parser/peg/peg.h\n    codon/parser/peg/rules.h\n    codon/parser/visitors/doc/doc.h\n    codon/parser/visitors/format/format.h\n    codon/parser/visitors/simplify/simplify.h\n    codon/parser/visitors/simplify/ctx.h\n    codon/parser/visitors/translate/translate.h\n    codon/parser/visitors/translate/translate_ctx.h\n    codon/parser/visitors/typecheck/typecheck.h\n    codon/parser/visitors/typecheck/ctx.h\n    codon/parser/visitors/visitor.h\n    codon/cir/analyze/analysis.h\n    codon/cir/analyze/dataflow/capture.h\n    codon/cir/analyze/dataflow/cfg.h\n    codon/cir/analyze/dataflow/dominator.h\n    codon/cir/analyze/dataflow/reaching.h\n    codon/cir/analyze/module/global_vars.h\n    codon/cir/analyze/module/side_effect.h\n    codon/cir/attribute.h\n    codon/cir/base.h\n    codon/cir/const.h\n    codon/cir/dsl/codegen.h\n    codon/cir/dsl/nodes.h\n    codon/cir/flow.h\n    codon/cir/func.h\n    codon/cir/instr.h\n    codon/cir/llvm/gpu.h\n    codon/cir/llvm/llvisitor.h\n    codon/cir/llvm/llvm.h\n    codon/cir/llvm/optimize.h\n    codon/cir/module.h\n    codon/cir/pyextension.h\n    codon/cir/cir.h\n    codon/cir/transform/cleanup/canonical.h\n    codon/cir/transform/cleanup/dead_code.h\n    codon/cir/transform/cleanup/global_demote.h\n    codon/cir/transform/cleanup/replacer.h\n    codon/cir/transform/folding/const_fold.h\n    codon/cir/transform/folding/const_prop.h\n    codon/cir/transform/folding/folding.h\n    codon/cir/transform/folding/rule.h\n    codon/cir/transform/lowering/imperative.h\n    codon/cir/transform/lowering/pipeline.h\n    codon/cir/transform/manager.h\n    codon/cir/transform/parallel/openmp.h\n    codon/cir/transform/parallel/schedule.h\n    codon/cir/transform/pass.h\n    codon/cir/transform/pythonic/dict.h\n    codon/cir/transform/pythonic/generator.h\n    codon/cir/transform/pythonic/io.h\n    codon/cir/transform/pythonic/list.h\n    codon/cir/transform/pythonic/str.h\n    codon/cir/transform/rewrite.h\n    codon/cir/types/types.h\n    codon/cir/util/cloning.h\n    codon/cir/util/context.h\n    codon/cir/util/format.h\n    codon/cir/util/inlining.h\n    codon/cir/util/irtools.h\n    codon/cir/util/iterators.h\n    codon/cir/util/matching.h\n    codon/cir/util/operator.h\n    codon/cir/util/outlining.h\n    codon/cir/util/packs.h\n    codon/cir/util/side_effect.h\n    codon/cir/util/visitor.h\n    codon/cir/value.h\n    codon/cir/var.h\n    codon/util/common.h\n    codon/compiler/jit_extern.h)\nset(CODON_CPPFILES\n    codon/compiler/compiler.cpp\n    codon/compiler/debug_listener.cpp\n    codon/compiler/engine.cpp\n    codon/compiler/error.cpp\n    codon/compiler/jit.cpp\n    codon/compiler/memory_manager.cpp\n    codon/dsl/plugins.cpp\n    codon/parser/ast/expr.cpp\n    codon/parser/ast/stmt.cpp\n    codon/parser/ast/types/type.cpp\n    codon/parser/ast/types/link.cpp\n    codon/parser/ast/types/class.cpp\n    codon/parser/ast/types/function.cpp\n    codon/parser/ast/types/union.cpp\n    codon/parser/ast/types/static.cpp\n    codon/parser/ast/types/traits.cpp\n    codon/parser/cache.cpp\n    codon/parser/common.cpp\n    codon/parser/peg/peg.cpp\n    codon/parser/visitors/doc/doc.cpp\n    codon/parser/visitors/format/format.cpp\n    codon/parser/visitors/simplify/simplify.cpp\n    codon/parser/visitors/simplify/ctx.cpp\n    codon/parser/visitors/simplify/assign.cpp\n    codon/parser/visitors/simplify/basic.cpp\n    codon/parser/visitors/simplify/call.cpp\n    codon/parser/visitors/simplify/class.cpp\n    codon/parser/visitors/simplify/collections.cpp\n    codon/parser/visitors/simplify/cond.cpp\n    codon/parser/visitors/simplify/function.cpp\n    codon/parser/visitors/simplify/access.cpp\n    codon/parser/visitors/simplify/import.cpp\n    codon/parser/visitors/simplify/loops.cpp\n    codon/parser/visitors/simplify/op.cpp\n    codon/parser/visitors/simplify/error.cpp\n    codon/parser/visitors/translate/translate.cpp\n    codon/parser/visitors/translate/translate_ctx.cpp\n    codon/parser/visitors/typecheck/typecheck.cpp\n    codon/parser/visitors/typecheck/infer.cpp\n    codon/parser/visitors/typecheck/ctx.cpp\n    codon/parser/visitors/typecheck/assign.cpp\n    codon/parser/visitors/typecheck/basic.cpp\n    codon/parser/visitors/typecheck/call.cpp\n    codon/parser/visitors/typecheck/class.cpp\n    codon/parser/visitors/typecheck/collections.cpp\n    codon/parser/visitors/typecheck/cond.cpp\n    codon/parser/visitors/typecheck/function.cpp\n    codon/parser/visitors/typecheck/access.cpp\n    codon/parser/visitors/typecheck/loops.cpp\n    codon/parser/visitors/typecheck/op.cpp\n    codon/parser/visitors/typecheck/error.cpp\n    codon/parser/visitors/visitor.cpp\n    codon/cir/attribute.cpp\n    codon/cir/analyze/analysis.cpp\n    codon/cir/analyze/dataflow/capture.cpp\n    codon/cir/analyze/dataflow/cfg.cpp\n    codon/cir/analyze/dataflow/dominator.cpp\n    codon/cir/analyze/dataflow/reaching.cpp\n    codon/cir/analyze/module/global_vars.cpp\n    codon/cir/analyze/module/side_effect.cpp\n    codon/cir/base.cpp\n    codon/cir/const.cpp\n    codon/cir/dsl/nodes.cpp\n    codon/cir/flow.cpp\n    codon/cir/func.cpp\n    codon/cir/instr.cpp\n    codon/cir/llvm/gpu.cpp\n    codon/cir/llvm/llvisitor.cpp\n    codon/cir/llvm/optimize.cpp\n    codon/cir/module.cpp\n    codon/cir/transform/cleanup/canonical.cpp\n    codon/cir/transform/cleanup/dead_code.cpp\n    codon/cir/transform/cleanup/global_demote.cpp\n    codon/cir/transform/cleanup/replacer.cpp\n    codon/cir/transform/folding/const_fold.cpp\n    codon/cir/transform/folding/const_prop.cpp\n    codon/cir/transform/folding/folding.cpp\n    codon/cir/transform/lowering/imperative.cpp\n    codon/cir/transform/lowering/pipeline.cpp\n    codon/cir/transform/manager.cpp\n    codon/cir/transform/parallel/openmp.cpp\n    codon/cir/transform/parallel/schedule.cpp\n    codon/cir/transform/pass.cpp\n    codon/cir/transform/pythonic/dict.cpp\n    codon/cir/transform/pythonic/generator.cpp\n    codon/cir/transform/pythonic/io.cpp\n    codon/cir/transform/pythonic/list.cpp\n    codon/cir/transform/pythonic/str.cpp\n    codon/cir/types/types.cpp\n    codon/cir/util/cloning.cpp\n    codon/cir/util/format.cpp\n    codon/cir/util/inlining.cpp\n    codon/cir/util/irtools.cpp\n    codon/cir/util/matching.cpp\n    codon/cir/util/outlining.cpp\n    codon/cir/util/side_effect.cpp\n    codon/cir/util/visitor.cpp\n    codon/cir/value.cpp\n    codon/cir/var.cpp\n    codon/util/common.cpp)\nadd_library(codonc SHARED ${CODON_HPPFILES})\ntarget_include_directories(codonc PRIVATE ${peglib_SOURCE_DIR}\n                                          ${toml_SOURCE_DIR}/include\n                                          ${semver_SOURCE_DIR}/include\n                                          ${fast_float_SOURCE_DIR}/include)\ntarget_sources(codonc PRIVATE ${CODON_CPPFILES} codon_rules.cpp omp_rules.cpp)\nif(ASAN)\n  target_compile_options(\n    codonc PRIVATE \"-fno-omit-frame-pointer\" \"-fsanitize=address\"\n                   \"-fsanitize-recover=address\")\n  target_link_libraries(\n    codonc PRIVATE \"-fno-omit-frame-pointer\" \"-fsanitize=address\"\n                   \"-fsanitize-recover=address\")\nendif()\nif(CMAKE_BUILD_TYPE MATCHES Debug)\n  set_source_files_properties(codon_rules.cpp codon/parser/peg/peg.cpp\n                              PROPERTIES COMPILE_FLAGS \"-O2\")\nendif()\nllvm_map_components_to_libnames(\n  LLVM_LIBS\n  AllTargetsAsmParsers\n  AllTargetsCodeGens\n  AllTargetsDescs\n  AllTargetsInfos\n  AggressiveInstCombine\n  Analysis\n  AsmParser\n  BitWriter\n  CodeGen\n  Core\n  Extensions\n  IPO\n  IRReader\n  InstCombine\n  Instrumentation\n  MC\n  MCJIT\n  ObjCARCOpts\n  OrcJIT\n  Remarks\n  ScalarOpts\n  Support\n  Symbolize\n  Target\n  TransformUtils\n  Vectorize\n  Passes)\nif(APPLE)\n  target_link_libraries(codonc PRIVATE ${LLVM_LIBS} fmt dl codonrt)\nelse()\n  target_link_libraries(codonc PRIVATE ${STATIC_LIBCPP} ${LLVM_LIBS} fmt dl codonrt)\nendif()\n\n# Gather headers\nadd_custom_target(\n  headers ALL\n  COMMENT \"Collecting headers\"\n  BYPRODUCTS \"${CMAKE_BINARY_DIR}/include\"\n  VERBATIM\n  COMMAND ${CMAKE_COMMAND} -E make_directory \"${CMAKE_BINARY_DIR}/include/codon\"\n  COMMAND ${CMAKE_COMMAND} -E copy_directory \"${CMAKE_SOURCE_DIR}/codon\"\n          \"${CMAKE_BINARY_DIR}/include/codon\"\n  COMMAND find \"${CMAKE_BINARY_DIR}/include\" -type f ! -name \"*.h\" -exec rm {}\n          \\\\;)\nadd_dependencies(headers codonrt codonc)\n\n# Prepare lib directory for plugin compilation\nadd_custom_target(\n  libs ALL\n  COMMENT \"Collecting libraries\"\n  BYPRODUCTS \"${CMAKE_BINARY_DIR}/lib\"\n  VERBATIM\n  COMMAND ${CMAKE_COMMAND} -E make_directory \"${CMAKE_BINARY_DIR}/lib/codon\"\n  COMMAND\n    ${CMAKE_COMMAND} -E copy\n    \"${CMAKE_BINARY_DIR}/libcodonc${CMAKE_SHARED_LIBRARY_SUFFIX}\"\n    \"${CMAKE_BINARY_DIR}/lib/codon\"\n  COMMAND\n    ${CMAKE_COMMAND} -E copy\n    \"${CMAKE_BINARY_DIR}/libcodonrt${CMAKE_SHARED_LIBRARY_SUFFIX}\"\n    \"${CMAKE_BINARY_DIR}/lib/codon\"\n  COMMAND\n    ${CMAKE_COMMAND} -E copy\n    \"${CMAKE_BINARY_DIR}/libomp${CMAKE_SHARED_LIBRARY_SUFFIX}\"\n    \"${CMAKE_BINARY_DIR}/lib/codon\")\nadd_dependencies(libs codonrt codonc)\n\n# Codon command-line tool\nadd_executable(codon codon/app/main.cpp)\ntarget_link_libraries(codon PUBLIC ${STATIC_LIBCPP} fmt codonc codon_jupyter Threads::Threads)\n\n# Codon test Download and unpack googletest at configure time\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/609281088cfefc76f9d0ce82e1ff6c30cc3591e5.zip\n)\n# For Windows: Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\noption(INSTALL_GTEST \"Enable installation of googletest.\" OFF)\nFetchContent_MakeAvailable(googletest)\nenable_testing()\nset(CODON_TEST_CPPFILES\n    test/main.cpp\n    test/cir/analyze/dominator.cpp\n    test/cir/analyze/reaching.cpp\n    test/cir/base.cpp\n    test/cir/constant.cpp\n    test/cir/flow.cpp\n    test/cir/func.cpp\n    test/cir/instr.cpp\n    test/cir/module.cpp\n    test/cir/transform/manager.cpp\n    test/cir/types/types.cpp\n    test/cir/util/matching.cpp\n    test/cir/value.cpp\n    test/cir/var.cpp\n    test/types.cpp)\nadd_executable(codon_test ${CODON_TEST_CPPFILES})\ntarget_include_directories(codon_test PRIVATE test/cir\n                                              \"${gc_SOURCE_DIR}/include\")\ntarget_link_libraries(codon_test fmt codonc codonrt gtest_main)\ntarget_compile_definitions(codon_test\n                           PRIVATE TEST_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}/test\")\n\ninstall(TARGETS codonrt codonc codon_jupyter DESTINATION lib/codon)\ninstall(FILES ${CMAKE_BINARY_DIR}/libomp${CMAKE_SHARED_LIBRARY_SUFFIX} DESTINATION lib/codon)\ninstall(TARGETS codon DESTINATION bin)\ninstall(DIRECTORY ${CMAKE_BINARY_DIR}/include/codon DESTINATION include)\ninstall(DIRECTORY ${CMAKE_SOURCE_DIR}/stdlib DESTINATION lib/codon)\ninstall(DIRECTORY ${CMAKE_SOURCE_DIR}/jit/ DESTINATION python)\ninstall(DIRECTORY DESTINATION lib/codon/plugins)\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.1005859375,
          "content": "*                    @arshajii @inumanag\n/codon/              @arshajii\n/codon/parser/       @inumanag\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.45703125,
          "content": "# Contributing to Codon\n\nThank you for considering contributing to Codon! This document contains some helpful information for getting started.\nThe best place to ask questions or get feedback is [our Slack](https://join.slack.com/t/exaloop/shared_invite/zt-1jusa4kc0-T3rRWrrHDk_iZ1dMS8s0JQ).\n\n## Development workflow\n\nAll development is done on the [`develop`](https://github.com/exaloop/codon/tree/develop) branch. Just before release,\nwe bump the version number, merge into [`master`](https://github.com/exaloop/codon/tree/master) and tag the build with\na tag of the form `vX.Y.Z` where `X`, `Y` and `Z` are the [SemVer](https://semver.org) major, minor and patch numbers,\nrespectively. Our CI build process automatically builds and deploys tagged commits as a new GitHub release.\n\n## Coding standards\n\nAll C++ code should be formatted with [ClangFormat](https://clang.llvm.org/docs/ClangFormat.html) using the `.clang-format`\nfile in the root of the repository.\n\n## Writing tests\n\nTests are written as Codon programs. The [`test/core/`](https://github.com/exaloop/codon/tree/master/test/core) directory\ncontains some examples. If you add a new test file, be sure to add it to\n[`test/main.cpp`](https://github.com/exaloop/codon/blob/master/test/main.cpp) so that it will be executed as part of the test\nsuite. There are two ways to write tests for Codon:\n\n#### New style\n\nExample:\n\n```python\n@test\ndef my_test():\n    assert 2 + 2 == 4\nmy_test()\n```\n\n**Semantics:** `assert` statements in functions marked `@test` are not compiled to standard assertions: they don't terminate\nthe program when the condition fails, but instead print source information, fail the test, and move on.\n\n#### Old style\n\nExample:\n\n```python\nprint(2 + 2)  # EXPECT: 4\n```\n\n**Semantics:** The source file is scanned for `EXPECT`s, executed, then the output is compared to the \"expected\" output. Note\nthat if you have, for example, an `EXPECT` in a loop, you will need to duplicate it however many times the loop is executed.\nUsing `EXPECT` is helpful mainly in cases where you need to test control flow, **otherwise prefer the new style**.\n\n## Pull requests\n\nPull requests should generally be based on the `develop` branch. Before submitting a pull request, please make sure...\n\n- ... to provide a clear description of the purpose of the pull request.\n- ... to include tests for any new or changed code.\n- ... that all code is formatted as per the guidelines above.\n\nPlease be patient with pull request reviews, as our throughput is limited.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 3.876953125,
          "content": "Business Source License 1.1\n\nLicense text copyright (c) 2017 MariaDB Corporation Ab, All Rights Reserved.\n\"Business Source License\" is a trademark of MariaDB Corporation Ab.\n\n-----------------------------------------------------------------------------\n\nParameters\n\nLicensor:             Exaloop, Inc.\n\nLicensed Work:        Codon compiler, runtime, and standard library\n                      The Licensed Work is (c) 2022-2024 Exaloop Inc.\n\nAdditional Use Grant: None\n\nChange Date:          2028-03-01\n\nChange License:       Apache License, Version 2.0\n\nFor information about alternative licensing arrangements for the Software,\nplease visit: https://exaloop.io/\n\n-----------------------------------------------------------------------------\n\nTerms\n\nThe Licensor hereby grants you the right to copy, modify, create derivative\nworks, redistribute, and make non-production use of the Licensed Work. The\nLicensor may make an Additional Use Grant, above, permitting limited\nproduction use.\n\nEffective on the Change Date, or the fourth anniversary of the first publicly\navailable distribution of a specific version of the Licensed Work under this\nLicense, whichever comes first, the Licensor hereby grants you rights under\nthe terms of the Change License, and the rights granted in the paragraph\nabove terminate.\n\nIf your use of the Licensed Work does not comply with the requirements\ncurrently in effect as described in this License, you must purchase a\ncommercial license from the Licensor, its affiliated entities, or authorized\nresellers, or you must refrain from using the Licensed Work.\n\nAll copies of the original and modified Licensed Work, and derivative works\nof the Licensed Work, are subject to this License. This License applies\nseparately for each version of the Licensed Work and the Change Date may vary\nfor each version of the Licensed Work released by Licensor.\n\nYou must conspicuously display this License on each original or modified copy\nof the Licensed Work. If you receive the Licensed Work in original or\nmodified form from a third party, the terms and conditions set forth in this\nLicense apply to your use of that work.\n\nAny use of the Licensed Work in violation of this License will automatically\nterminate your rights under this License for the current and all other\nversions of the Licensed Work.\n\nThis License does not grant you any right in any trademark or logo of\nLicensor or its affiliates (provided that you may use a trademark or logo of\nLicensor as expressly required by this License).\n\nTO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON\nAN \"AS IS\" BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,\nEXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND\nTITLE.\n\nMariaDB hereby grants you permission to use this License's text to license\nyour works, and to refer to it using the trademark \"Business Source License\",\nas long as you comply with the Covenants of Licensor below.\n\nCovenants of Licensor\n\nIn consideration of the right to use this License's text and the \"Business\nSource License\" name and trademark, Licensor covenants to MariaDB, and to all\nother recipients of the licensed work to be provided by Licensor:\n\n1. To specify as the Change License the GPL Version 2.0 or any later version,\n   or a license that is compatible with GPL Version 2.0 or a later version,\n   where \"compatible\" means that software provided under the Change License can\n   be included in a program with software provided under GPL Version 2.0 or a\n   later version. Licensor may specify additional Change Licenses without\n   limitation.\n\n2. To either: (a) specify an additional grant of rights to use that does not\n   impose any additional restriction on the right granted in this License, as\n   the Additional Use Grant; or (b) insert the text \"None\".\n\n3. To specify a Change Date.\n\n4. Not to modify this License in any other way.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.0693359375,
          "content": "<p align=\"center\">\n <img src=\"docs/img/codon.png?raw=true\" width=\"600\" alt=\"Codon\"/>\n</p>\n\n<h3 align=\"center\">\n  <a href=\"https://docs.exaloop.io/codon\" target=\"_blank\"><b>Docs</b></a>\n  &nbsp;&#183;&nbsp;\n  <a href=\"https://docs.exaloop.io/codon/general/faq\" target=\"_blank\"><b>FAQ</b></a>\n  &nbsp;&#183;&nbsp;\n  <a href=\"https://blog.exaloop.io\" target=\"_blank\"><b>Blog</b></a>\n  &nbsp;&#183;&nbsp;\n  <a href=\"https://join.slack.com/t/exaloop/shared_invite/zt-1jusa4kc0-T3rRWrrHDk_iZ1dMS8s0JQ\" target=\"_blank\">Chat</a>\n  &nbsp;&#183;&nbsp;\n  <a href=\"https://docs.exaloop.io/codon/general/roadmap\" target=\"_blank\">Roadmap</a>\n  &nbsp;&#183;&nbsp;\n  <a href=\"https://exaloop.io/benchmarks\" target=\"_blank\">Benchmarks</a>\n</h3>\n\n<a href=\"https://github.com/exaloop/codon/actions/workflows/ci.yml\">\n  <img src=\"https://github.com/exaloop/codon/actions/workflows/ci.yml/badge.svg\"\n       alt=\"Build Status\">\n</a>\n\n## What is Codon?\n\nCodon is a high-performance Python implementation that compiles to native machine code without\nany runtime overhead. Typical speedups over vanilla Python are on the order of 10-100x or more, on\na single thread. Codon's performance is typically on par with (and sometimes better than) that of\nC/C++. Unlike Python, Codon supports native multithreading, which can lead to speedups many times\nhigher still.\n\n*Think of Codon as Python reimagined for static, ahead-of-time compilation, built from the ground\nup with best possible performance in mind.*\n\n### Goals\n\n- :bulb: **No learning curve:** Be as close to CPython as possible in terms of syntax, semantics and libraries\n- :rocket: **Top-notch performance:** At *least* on par with low-level languages like C, C++ or Rust\n- :computer: **Hardware support:** Full, seamless support for multicore programming, multithreading (no GIL!), GPU and more\n- :chart_with_upwards_trend: **Optimizations:** Comprehensive optimization framework that can target high-level Python constructs\n  and libraries\n- :battery: **Interoperability:** Full interoperability with Python's ecosystem of packages and libraries\n\n### Non-goals\n\n- :x: *Drop-in replacement for CPython:* Codon is not a drop-in replacement for CPython. There are some\n  aspects of Python that are not suitable for static compilation — we don't support these in Codon.\n  There are ways to use Codon in larger Python codebases via its [JIT decorator](https://docs.exaloop.io/codon/interoperability/decorator)\n  or [Python extension backend](https://docs.exaloop.io/codon/interoperability/pyext). Codon also supports\n  calling any Python module via its [Python interoperability](https://docs.exaloop.io/codon/interoperability/python).\n  See also [*\"Differences with Python\"*](https://docs.exaloop.io/codon/general/differences) in the docs.\n\n- :x: *New syntax and language constructs:* We try to avoid adding new syntax, keywords or other language\n  features as much as possible. While Codon does add some new syntax in a couple places (e.g. to express\n  parallelism), we try to make it as familiar and intuitive as possible.\n\n## Install\n\nPre-built binaries for Linux (x86_64) and macOS (x86_64 and arm64) are available alongside [each release](https://github.com/exaloop/codon/releases).\nDownload and install with:\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://exaloop.io/install.sh)\"\n```\n\nOr you can [build from source](https://docs.exaloop.io/codon/advanced/build).\n\n## Examples\n\nCodon is a Python-compatible language, and many Python programs will work with few if any modifications:\n\n```python\ndef fib(n):\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a+b\n    print()\nfib(1000)\n```\n\nThe `codon` compiler has a number of options and modes:\n\n```bash\n# compile and run the program\ncodon run fib.py\n# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\n\n# compile and run the program with optimizations enabled\ncodon run -release fib.py\n# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\n\n# compile to executable with optimizations enabled\ncodon build -release -exe fib.py\n./fib\n# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\n\n# compile to LLVM IR file with optimizations enabled\ncodon build -release -llvm fib.py\n# outputs file fib.ll\n```\n\nSee [the docs](https://docs.exaloop.io/codon/general/intro) for more options and examples.\n\nYou can import and use any Python package from Codon. For example:\n\n```python\nfrom python import matplotlib.pyplot as plt\ndata = [x**2 for x in range(10)]\nplt.plot(data)\nplt.show()\n```\n\n(Just remember to set the `CODON_PYTHON` environment variable to the CPython shared library,\nas explained in the [the docs](https://docs.exaloop.io/codon/interoperability/python).)\n\nThis prime counting example showcases Codon's [OpenMP](https://www.openmp.org/) support, enabled\nwith the addition of one line. The `@par` annotation tells the compiler to parallelize the\nfollowing `for`-loop, in this case using a dynamic schedule, chunk size of 100, and 16 threads.\n\n```python\nfrom sys import argv\n\ndef is_prime(n):\n    factors = 0\n    for i in range(2, n):\n        if n % i == 0:\n            factors += 1\n    return factors == 0\n\nlimit = int(argv[1])\ntotal = 0\n\n@par(schedule='dynamic', chunk_size=100, num_threads=16)\nfor i in range(2, limit):\n    if is_prime(i):\n        total += 1\n\nprint(total)\n```\n\nCodon supports writing and executing GPU kernels. Here's an example that computes the\n[Mandelbrot set](https://en.wikipedia.org/wiki/Mandelbrot_set):\n\n```python\nimport gpu\n\nMAX    = 1000  # maximum Mandelbrot iterations\nN      = 4096  # width and height of image\npixels = [0 for _ in range(N * N)]\n\ndef scale(x, a, b):\n    return a + (x/N)*(b - a)\n\n@gpu.kernel\ndef mandelbrot(pixels):\n    idx = (gpu.block.x * gpu.block.dim.x) + gpu.thread.x\n    i, j = divmod(idx, N)\n    c = complex(scale(j, -2.00, 0.47), scale(i, -1.12, 1.12))\n    z = 0j\n    iteration = 0\n\n    while abs(z) <= 2 and iteration < MAX:\n        z = z**2 + c\n        iteration += 1\n\n    pixels[idx] = int(255 * iteration/MAX)\n\nmandelbrot(pixels, grid=(N*N)//1024, block=1024)\n```\n\nGPU programming can also be done using the `@par` syntax with `@par(gpu=True)`.\n\n## Documentation\n\nPlease see [docs.exaloop.io](https://docs.exaloop.io/codon) for in-depth documentation.\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "book.json",
          "type": "blob",
          "size": 0.0244140625,
          "content": "{\n    \"root\": \"./docs\"\n}\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codon",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "jit",
          "type": "tree",
          "content": null
        },
        {
          "name": "jupyter",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "stdlib",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}