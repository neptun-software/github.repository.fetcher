{
  "metadata": {
    "timestamp": 1736566309898,
    "page": 62,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "abseil/abseil-cpp",
      "stars": 15282,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0498046875,
          "content": "---\nLanguage:        Cpp\nBasedOnStyle:  Google\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3408203125,
          "content": "# Bzlmod lockfile\nMODULE.bazel.lock\n# Ignore all bazel-* symlinks.\n/bazel-*\n# Ignore Bazel verbose explanations\n--verbose_explanations\n# Ignore CMake usual build directory\nbuild\n# Ignore Vim files\n*.swp\n# Ignore QtCreator Project file\nCMakeLists.txt.user\n# Ignore VS Code files\n.vscode/*\n# Ignore generated python artifacts\n*.pyc\ncopts/__pycache__/\n"
        },
        {
          "name": "ABSEIL_ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 1.0693359375,
          "content": "Please submit a new Abseil Issue using the template below:\n\n## [Short title of proposed API change(s)]\n\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\n\n## Background\n\n[Provide the background information that is required in order to evaluate the\nproposed API changes. No controversial claims should be made here. If there are\ndesign constraints that need to be considered, they should be presented here\n**along with justification for those constraints**. Linking to other docs is\ngood, but please keep the **pertinent information as self contained** as\npossible in this section.]\n\n## Proposed API Change (s)\n\n[Please clearly describe the API change(s) being proposed. If multiple changes,\nplease keep them clearly distinguished. When possible, **use example code\nsnippets to illustrate before-after API usages**. List pros-n-cons. Highlight\nthe main questions that you want to be answered. Given the Abseil project compatibility requirements, describe why the API change is safe.]\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.2880859375,
          "content": "# This is the list of Abseil authors for copyright purposes.\n#\n# This does not necessarily list everyone who has contributed code, since in\n# some cases, their employer may be the copyright holder.  To see the full list\n# of contributors, see the revision history in source control.\nGoogle Inc.\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 1.0234375,
          "content": "# Copyright 2020 The Abseil Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\npackage(default_visibility = [\"//visibility:public\"])\n\nlicenses([\"notice\"])  # Apache 2.0\n\n# Expose license for external usage through bazel.\nexports_files([\n    \"AUTHORS\",\n    \"LICENSE\",\n])\n\n# For building with clang-cl.\n# https://bazel.build/configure/windows#clang\nplatform(\n    name = \"x64_windows-clang-cl\",\n    constraint_values = [\n        \"@platforms//cpu:x86_64\",\n        \"@platforms//os:windows\",\n        \"@bazel_tools//tools/cpp:clang-cl\",\n    ],\n)\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.037109375,
          "content": "#\n# Copyright 2017 The Abseil Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# https://github.com/google/oss-policies-info/blob/main/foundational-cxx-support-matrix.md\n# As of 2024-07-01, CMake 3.16 is the minimum supported version.\ncmake_minimum_required(VERSION 3.16)\n\n# Allow the user to specify the CMAKE_MSVC_DEBUG_INFORMATION_FORMAT\nif (POLICY CMP0141)\n  cmake_policy(SET CMP0141 NEW)\nendif (POLICY CMP0141)\n\nproject(absl LANGUAGES CXX)\nset(ABSL_SOVERSION 0)\ninclude(CTest)\n\n# Output directory is correct by default for most build setups. However, when\n# building Abseil as a DLL, it is important to have the DLL in the same\n# directory as the executable using it. Thus, we put all executables in a single\n# /bin directory.\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\n# when absl is included as subproject (i.e. using add_subdirectory(abseil-cpp))\n# in the source tree of a project that uses it, install rules are disabled.\nif(NOT CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)\n  option(ABSL_ENABLE_INSTALL \"Enable install rule\" OFF)\nelse()\n  option(ABSL_ENABLE_INSTALL \"Enable install rule\" ON)\nendif()\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN\")\nset(CMAKE_INSTALL_RPATH_USE_LINK_PATH ON)\nset(CMAKE_BUILD_RPATH_USE_ORIGIN ON)\n\noption(ABSL_PROPAGATE_CXX_STD\n  \"Use CMake C++ standard meta features (e.g. cxx_std_14) that propagate to targets that link to Abseil\"\n  ON)\n\noption(ABSL_USE_SYSTEM_INCLUDES\n  \"Silence warnings in Abseil headers by marking them as SYSTEM includes\"\n  OFF)\n\nlist(APPEND CMAKE_MODULE_PATH\n  ${CMAKE_CURRENT_LIST_DIR}/CMake\n  ${CMAKE_CURRENT_LIST_DIR}/absl/copts\n)\n\noption(ABSL_MSVC_STATIC_RUNTIME\n  \"Link static runtime libraries\"\n  OFF)\nif(ABSL_MSVC_STATIC_RUNTIME)\n  set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\nelse()\n  set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>DLL\")\nendif()\n\ninclude(CMakePackageConfigHelpers)\ninclude(GNUInstallDirs)\ninclude(AbseilDll)\ninclude(AbseilHelpers)\n\n\n##\n## Using absl targets\n##\n## all public absl targets are\n## exported with the absl:: prefix\n##\n## e.g absl::base absl::synchronization absl::strings ....\n##\n## DO NOT rely on the internal targets outside of the prefix\n\n\n# include current path\nlist(APPEND ABSL_COMMON_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR})\n\nif(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n  set(ABSL_USING_CLANG ON)\nelse()\n  set(ABSL_USING_CLANG OFF)\nendif()\n\n# find dependencies\n## pthread\nfind_package(Threads REQUIRED)\n\ninclude(CMakeDependentOption)\n\noption(ABSL_BUILD_TESTING\n  \"If ON, Abseil will build all of Abseil's own tests.\" OFF)\n\noption(ABSL_BUILD_TEST_HELPERS\n  \"If ON, Abseil will build libraries that you can use to write tests against Abseil code. This option requires that Abseil is configured to use GoogleTest.\"\n  OFF)\n\noption(ABSL_USE_EXTERNAL_GOOGLETEST\n  \"If ON, Abseil will assume that the targets for GoogleTest are already provided by the including project. This makes sense when Abseil is used with add_subdirectory.\" OFF)\n\ncmake_dependent_option(ABSL_FIND_GOOGLETEST\n  \"If ON, Abseil will use find_package(GTest) rather than assuming that GoogleTest is already provided by the including project.\"\n  ON\n  \"ABSL_USE_EXTERNAL_GOOGLETEST\"\n  OFF)\n\n\noption(ABSL_USE_GOOGLETEST_HEAD\n  \"If ON, abseil will download HEAD from GoogleTest at config time.\" OFF)\n\nset(ABSL_GOOGLETEST_DOWNLOAD_URL \"\" CACHE STRING \"If set, download GoogleTest from this URL\")\n\nset(ABSL_LOCAL_GOOGLETEST_DIR \"/usr/src/googletest\" CACHE PATH\n  \"If ABSL_USE_GOOGLETEST_HEAD is OFF and ABSL_GOOGLETEST_URL is not set, specifies the directory of a local GoogleTest checkout.\"\n  )\n\noption(ABSL_BUILD_MONOLITHIC_SHARED_LIBS\n  \"Build Abseil as a single shared library (always enabled for Windows)\"\n  OFF\n)\nif(NOT BUILD_SHARED_LIBS AND ABSL_BUILD_MONOLITHIC_SHARED_LIBS)\n  message(WARNING \"Not building a shared library because BUILD_SHARED_LIBS is not set. Ignoring ABSL_BUILD_MONOLITHIC_SHARED_LIBS.\")\nendif()\n\nif((BUILD_TESTING AND ABSL_BUILD_TESTING) OR ABSL_BUILD_TEST_HELPERS)\n  if (ABSL_USE_EXTERNAL_GOOGLETEST)\n    if (ABSL_FIND_GOOGLETEST)\n      find_package(GTest REQUIRED)\n    elseif(NOT TARGET GTest::gtest)\n      if(TARGET gtest)\n        # When Google Test is included directly rather than through find_package, the aliases are missing.\n        add_library(GTest::gtest ALIAS gtest)\n        add_library(GTest::gtest_main ALIAS gtest_main)\n        add_library(GTest::gmock ALIAS gmock)\n        add_library(GTest::gmock_main ALIAS gmock_main)\n      else()\n        message(FATAL_ERROR \"ABSL_USE_EXTERNAL_GOOGLETEST is ON and ABSL_FIND_GOOGLETEST is OFF, which means that the top-level project must build the Google Test project. However, the target gtest was not found.\")\n      endif()\n    endif()\n  else()\n    set(absl_gtest_build_dir ${CMAKE_BINARY_DIR}/googletest-build)\n    if(ABSL_USE_GOOGLETEST_HEAD AND ABSL_GOOGLETEST_DOWNLOAD_URL)\n      message(FATAL_ERROR \"Do not set both ABSL_USE_GOOGLETEST_HEAD and ABSL_GOOGLETEST_DOWNLOAD_URL\")\n    endif()\n    if(ABSL_USE_GOOGLETEST_HEAD)\n      set(absl_gtest_download_url \"https://github.com/google/googletest/archive/main.zip\")\n    elseif(ABSL_GOOGLETEST_DOWNLOAD_URL)\n      set(absl_gtest_download_url ${ABSL_GOOGLETEST_DOWNLOAD_URL})\n    endif()\n    if(absl_gtest_download_url)\n      set(absl_gtest_src_dir ${CMAKE_BINARY_DIR}/googletest-src)\n    else()\n      set(absl_gtest_src_dir ${ABSL_LOCAL_GOOGLETEST_DIR})\n    endif()\n    include(CMake/Googletest/DownloadGTest.cmake)\n  endif()\nendif()\n\nadd_subdirectory(absl)\n\nif(ABSL_ENABLE_INSTALL)\n  # absl:lts-remove-begin(system installation is supported for LTS releases)\n  # We don't support system-wide installation\n  list(APPEND SYSTEM_INSTALL_DIRS \"/usr/local\" \"/usr\" \"/opt/\" \"/opt/local\" \"c:/Program Files/${PROJECT_NAME}\")\n  if(NOT DEFINED CMAKE_INSTALL_PREFIX OR CMAKE_INSTALL_PREFIX IN_LIST SYSTEM_INSTALL_DIRS)\n    message(WARNING \"\\\n  The default and system-level install directories are unsupported except in LTS \\\n  releases of Abseil.  Please set CMAKE_INSTALL_PREFIX to install Abseil in your \\\n  source or build tree directly.\\\n    \")\n  endif()\n  # absl:lts-remove-end\n\n  # install as a subdirectory only\n  install(EXPORT ${PROJECT_NAME}Targets\n    NAMESPACE absl::\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  )\n\n  configure_package_config_file(\n    CMake/abslConfig.cmake.in\n    \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n    INSTALL_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  )\n  install(FILES \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  )\n\n  # Abseil only has a version in LTS releases.  This mechanism is accomplished\n  # Abseil's internal Copybara (https://github.com/google/copybara) workflows and\n  # isn't visible in the CMake buildsystem itself.\n  if(absl_VERSION)\n    write_basic_package_version_file(\n      \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\"\n      COMPATIBILITY ExactVersion\n    )\n\n    install(FILES \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\"\n      DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n    )\n  endif()  # absl_VERSION\n\n  # Install the headers except for \"options.h\" which is installed separately.\n  install(DIRECTORY absl\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n    FILES_MATCHING\n      PATTERN \"*.inc\"\n      PATTERN \"*.h\"\n      PATTERN \"options.h\" EXCLUDE\n      PATTERN \"copts\" EXCLUDE\n      PATTERN \"testdata\" EXCLUDE\n    )\n\n  # Rewrite options.h to use the compiled ABI.\n  file(READ \"absl/base/options.h\" ABSL_INTERNAL_OPTIONS_H_CONTENTS)\n\n  # Handle features that require at least C++20.\n  if (ABSL_INTERNAL_AT_LEAST_CXX20)\n    foreach(FEATURE \"ORDERING\")\n      string(REPLACE\n      \"#define ABSL_OPTION_USE_STD_${FEATURE} 2\"\n      \"#define ABSL_OPTION_USE_STD_${FEATURE} 1\"\n      ABSL_INTERNAL_OPTIONS_H_PINNED\n      \"${ABSL_INTERNAL_OPTIONS_H_CONTENTS}\")\n      set(ABSL_INTERNAL_OPTIONS_H_CONTENTS \"${ABSL_INTERNAL_OPTIONS_H_PINNED}\")\n    endforeach()\n  endif()\n\n  # Handle features that require at least C++17.\n  if (ABSL_INTERNAL_AT_LEAST_CXX17)\n    foreach(FEATURE \"ANY\" \"OPTIONAL\" \"STRING_VIEW\" \"VARIANT\")\n      string(REPLACE\n      \"#define ABSL_OPTION_USE_STD_${FEATURE} 2\"\n      \"#define ABSL_OPTION_USE_STD_${FEATURE} 1\"\n      ABSL_INTERNAL_OPTIONS_H_PINNED\n      \"${ABSL_INTERNAL_OPTIONS_H_CONTENTS}\")\n      set(ABSL_INTERNAL_OPTIONS_H_CONTENTS \"${ABSL_INTERNAL_OPTIONS_H_PINNED}\")\n    endforeach()\n  endif()\n\n  # Any feature that still has the value of 2 (because it was not handled above)\n  # should be set to 0.\n  string(REGEX REPLACE\n    \"#define ABSL_OPTION_USE_STD_([^ ]*) 2\"\n    \"#define ABSL_OPTION_USE_STD_\\\\1 0\"\n    ABSL_INTERNAL_OPTIONS_H_PINNED\n    \"${ABSL_INTERNAL_OPTIONS_H_CONTENTS}\")\n\n  # If the file already exists, check if it matches the new contents.\n  # This avoids writing the file if it is already up-to-date when the CMake\n  # generation is triggered and triggering unnecessary rebuilds.\n  set(ABSL_INTERNAL_OPTIONS_H_PINNED_NEEDS_UPDATE TRUE)\n  if (EXISTS \"${CMAKE_BINARY_DIR}/options-pinned.h\")\n    file(READ \"${CMAKE_BINARY_DIR}/options-pinned.h\" ABSL_INTERNAL_OPTIONS_PINNED_H_CONTENTS)\n    if (\"${ABSL_INTERNAL_OPTIONS_H_PINNED}\" STREQUAL \"${ABSL_INTERNAL_OPTIONS_PINNED_H_CONTENTS}\")\n      set(ABSL_INTERNAL_OPTIONS_H_PINNED_NEEDS_UPDATE FALSE)\n    endif()\n  endif()\n\n  # If the file needs an update, generate it.\n  if (ABSL_INTERNAL_OPTIONS_H_PINNED_NEEDS_UPDATE)\n    file(GENERATE OUTPUT \"${CMAKE_BINARY_DIR}/options-pinned.h\" CONTENT \"${ABSL_INTERNAL_OPTIONS_H_PINNED}\")\n  endif()\n\n  install(FILES \"${CMAKE_BINARY_DIR}/options-pinned.h\"\n         DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/absl/base\n         RENAME \"options.h\")\n\nendif()  # ABSL_ENABLE_INSTALL\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.7109375,
          "content": "# How to Contribute to Abseil\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\nNOTE: If you are new to GitHub, please start by reading [Pull Request\nhowto](https://help.github.com/articles/about-pull-requests/)\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution,\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Contribution Guidelines\n\nPotential contributors sometimes ask us if the Abseil project is the appropriate\nhome for their utility library code or for specific functions implementing\nmissing portions of the standard. Often, the answer to this question is \"no\".\nWe’d like to articulate our thinking on this issue so that our choices can be\nunderstood by everyone and so that contributors can have a better intuition\nabout whether Abseil might be interested in adopting a new library.\n\n### Priorities\n\nAlthough our mission is to augment the C++ standard library, our goal is not to\nprovide a full forward-compatible implementation of the latest standard. For us\nto consider a library for inclusion in Abseil, it is not enough that a library\nis useful. We generally choose to release a library when it meets at least one\nof the following criteria:\n\n*   **Widespread usage** - Using our internal codebase to help gauge usage, most\n    of the libraries we've released have tens of thousands of users.\n*   **Anticipated widespread usage** - Pre-adoption of some standard-compliant\n    APIs may not have broad adoption initially but can be expected to pick up\n    usage when it replaces legacy APIs. `absl::from_chars`, for example,\n    replaces existing code that converts strings to numbers and will therefore\n    likely see usage growth.\n*   **High impact** - APIs that provide a key solution to a specific problem,\n    such as `absl::FixedArray`, have higher impact than usage numbers may signal\n    and are released because of their importance.\n*   **Direct support for a library that falls under one of the above** - When we\n    want access to a smaller library as an implementation detail for a\n    higher-priority library we plan to release, we may release it, as we did\n    with portions of `absl/meta/type_traits.h`. One consequence of this is that\n    the presence of a library in Abseil does not necessarily mean that other\n    similar libraries would be a high priority.\n\n### API Freeze Consequences\n\nVia the\n[Abseil Compatibility Guidelines](https://abseil.io/about/compatibility), we\nhave promised a large degree of API stability. In particular, we will not make\nbackward-incompatible changes to released APIs without also shipping a tool or\nprocess that can upgrade our users' code. We are not yet at the point of easily\nreleasing such tools. Therefore, at this time, shipping a library establishes an\nAPI contract which is borderline unchangeable. (We can add new functionality,\nbut we cannot easily change existing behavior.) This constraint forces us to\nvery carefully review all APIs that we ship.\n\n\n## Coding Style\n\nTo keep the source consistent, readable, diffable and easy to merge, we use a\nfairly rigid coding style, as defined by the\n[google-styleguide](https://github.com/google/styleguide) project. All patches\nwill be expected to conform to the style outlined\n[here](https://google.github.io/styleguide/cppguide.html).\n\n## Guidelines for Pull Requests\n\n*   If you are a Googler, it is required that you send us a Piper CL instead of\n    using the GitHub pull-request process. The code propagation process will\n    deliver the change to GitHub.\n\n*   Create **small PRs** that are narrowly focused on **addressing a single\n    concern**. We often receive PRs that are trying to fix several things at a\n    time, but if only one fix is considered acceptable, nothing gets merged and\n    both author's & review's time is wasted. Create more PRs to address\n    different concerns and everyone will be happy.\n\n*   For speculative changes, consider opening an [Abseil\n    issue](https://github.com/abseil/abseil-cpp/issues) and discussing it first.\n    If you are suggesting a behavioral or API change, consider starting with an\n    [Abseil proposal template](ABSEIL_ISSUE_TEMPLATE.md).\n\n*   Provide a good **PR description** as a record of **what** change is being\n    made and **why** it was made. Link to a GitHub issue if it exists.\n\n*   Don't fix code style and formatting unless you are already changing that\n    line to address an issue. Formatting of modified lines may be done using\n   `git clang-format`. PRs with irrelevant changes won't be merged. If\n    you do want to fix formatting or style, do that in a separate PR.\n\n*   Unless your PR is trivial, you should expect there will be reviewer comments\n    that you'll need to address before merging. We expect you to be reasonably\n    responsive to those comments, otherwise the PR will be closed after 2-3\n    weeks of inactivity.\n\n*   Maintain **clean commit history** and use **meaningful commit messages**.\n    PRs with messy commit history are difficult to review and won't be merged.\n    Use `rebase -i upstream/master` to curate your commit history and/or to\n    bring in latest changes from master (but avoid rebasing in the middle of a\n    code review).\n\n*   Keep your PR up to date with upstream/master (if there are merge conflicts,\n    we can't really merge your change).\n\n*   **All tests need to be passing** before your change can be merged. We\n    recommend you **run tests locally** (see below)\n\n*   Exceptions to the rules can be made if there's a compelling reason for doing\n    so. That is - the rules are here to serve us, not the other way around, and\n    the rules need to be serving their intended purpose to be valuable.\n\n*   All submissions, including submissions by project members, require review.\n\n## Running Tests\n\nIf you have [Bazel](https://bazel.build/) installed, use `bazel test\n--test_tag_filters=\"-benchmark\" ...` to run the unit tests.\n\nIf you are running the Linux operating system and have\n[Docker](https://www.docker.com/) installed, you can also run the `linux_*.sh`\nscripts under the `ci/`(https://github.com/abseil/abseil-cpp/tree/master/ci)\ndirectory to test Abseil under a variety of conditions.\n\n## Abseil Committers\n\nThe current members of the Abseil engineering team are the only committers at\npresent.\n\n## Release Process\n\nAbseil lives at head, where latest-and-greatest code can be found.\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 8.822265625,
          "content": "# Abseil FAQ\n\n## Is Abseil the right home for my utility library?\n\nMost often the answer to the question is \"no.\" As both the [About\nAbseil](https://abseil.io/about/) page and our [contributing\nguidelines](https://github.com/abseil/abseil-cpp/blob/master/CONTRIBUTING.md#contribution-guidelines)\nexplain, Abseil contains a variety of core C++ library code that is widely used\nat [Google](https://www.google.com/). As such, Abseil's primary purpose is to be\nused as a dependency by Google's open source C++ projects. While we do hope that\nAbseil is also useful to the C++ community at large, this added constraint also\nmeans that we are unlikely to accept a contribution of utility code that isn't\nalready widely used by Google.\n\n## How to I set the C++ dialect used to build Abseil?\n\nThe short answer is that whatever mechanism you choose, you need to make sure\nthat you set this option consistently at the global level for your entire\nproject. If, for example, you want to set the C++ dialect to C++17, with\n[Bazel](https://bazel/build/) as the build system and `gcc` or `clang` as the\ncompiler, there several ways to do this:\n* Pass `--cxxopt=-std=c++17` on the command line (for example, `bazel build\n  --cxxopt=-std=c++17 ...`)\n* Set the environment variable `BAZEL_CXXOPTS` (for example,\n  `BAZEL_CXXOPTS=-std=c++17`)\n* Add `build --cxxopt=-std=c++17` to your [`.bazelrc`\n  file](https://docs.bazel.build/versions/master/guide.html#bazelrc)\n\nIf you are using CMake as the build system, you'll need to add a line like\n`set(CMAKE_CXX_STANDARD 17)` to your top level `CMakeLists.txt` file. If you\nare developing a library designed to be used by other clients, you should\ninstead leave `CMAKE_CXX_STANDARD` unset and configure the minimum C++ standard\nrequired by each of your library targets via `target_compile_features`. See the\n[CMake build\ninstructions](https://github.com/abseil/abseil-cpp/blob/master/CMake/README.md)\nfor more information.\n\nFor a longer answer to this question and to understand why some other approaches\ndon't work, see the answer to [\"What is ABI and why don't you recommend using a\npre-compiled version of\nAbseil?\"](#what-is-abi-and-why-dont-you-recommend-using-a-pre-compiled-version-of-abseil)\n\n## What is ABI and why don't you recommend using a pre-compiled version of Abseil?\n\nFor the purposes of this discussion, you can think of\n[ABI](https://en.wikipedia.org/wiki/Application_binary_interface) as the\ncompiled representation of the interfaces in code. This is in contrast to\n[API](https://en.wikipedia.org/wiki/Application_programming_interface), which\nyou can think of as the interfaces as defined by the code itself. [Abseil has a\nstrong promise of API compatibility, but does not make any promise of ABI\ncompatibility](https://abseil.io/about/compatibility). Let's take a look at what\nthis means in practice.\n\nYou might be tempted to do something like this in a\n[Bazel](https://bazel.build/) `BUILD` file:\n\n```\n# DON'T DO THIS!!!\ncc_library(\n    name = \"my_library\",\n    srcs = [\"my_library.cc\"],\n    copts = [\"-std=c++17\"],  # May create a mixed-mode compile!\n    deps = [\"@com_google_absl//absl/strings\"],\n)\n```\n\nApplying `-std=c++17` to an individual target in your `BUILD` file is going to\ncompile that specific target in C++17 mode, but it isn't going to ensure the\nAbseil library is built in C++17 mode, since the Abseil library itself is a\ndifferent build target. If your code includes an Abseil header, then your\nprogram may contain conflicting definitions of the same\nclass/function/variable/enum, etc. As a rule, all compile options that affect\nthe ABI of a program need to be applied to the entire build on a global basis.\n\nC++ has something called the [One Definition\nRule](https://en.wikipedia.org/wiki/One_Definition_Rule) (ODR). C++ doesn't\nallow multiple definitions of the same class/function/variable/enum, etc. ODR\nviolations sometimes result in linker errors, but linkers do not always catch\nviolations. Uncaught ODR violations can result in strange runtime behaviors or\ncrashes that can be hard to debug.\n\nIf you build the Abseil library and your code using different compile options\nthat affect ABI, there is a good chance you will run afoul of the One Definition\nRule. Examples of GCC compile options that affect ABI include (but aren't\nlimited to) language dialect (e.g. `-std=`), optimization level (e.g. `-O2`),\ncode generation flags (e.g. `-fexceptions`), and preprocessor defines\n(e.g. `-DNDEBUG`).\n\nIf you use a pre-compiled version of Abseil, (for example, from your Linux\ndistribution package manager or from something like\n[vcpkg](https://github.com/microsoft/vcpkg)) you have to be very careful to\nensure ABI compatibility across the components of your program. The only way you\ncan be sure your program is going to be correct regarding ABI is to ensure\nyou've used the exact same compile options as were used to build the\npre-compiled library. This does not mean that Abseil cannot work as part of a\nLinux distribution since a knowledgeable binary packager will have ensured that\nall packages have been built with consistent compile options. This is one of the\nreasons we warn against - though do not outright reject - using Abseil as a\npre-compiled library.\n\nAnother possible way that you might afoul of ABI issues is if you accidentally\ninclude two versions of Abseil in your program. Multiple versions of Abseil can\nend up within the same binary if your program uses the Abseil library and\nanother library also transitively depends on Abseil (resulting in what is\nsometimes called the diamond dependency problem). In cases such as this you must\nstructure your build so that all libraries use the same version of Abseil.\n[Abseil's strong promise of API compatibility between\nreleases](https://abseil.io/about/compatibility) means the latest \"HEAD\" release\nof Abseil is almost certainly the right choice if you are doing as we recommend\nand building all of your code from source.\n\nFor these reasons we recommend you avoid pre-compiled code and build the Abseil\nlibrary yourself in a consistent manner with the rest of your code.\n\n## What is \"live at head\" and how do I do it?\n\nFrom Abseil's point-of-view, \"live at head\" means that every Abseil source\nrelease (which happens on an almost daily basis) is either API compatible with\nthe previous release, or comes with an automated tool that you can run over code\nto make it compatible. In practice, the need to use an automated tool is\nextremely rare. This means that upgrading from one source release to another\nshould be a routine practice that can and should be performed often.\n\nWe recommend you update to the [latest commit in the `master` branch of\nAbseil](https://github.com/abseil/abseil-cpp/commits/master) as often as\npossible. Not only will you pick up bug fixes more quickly, but if you have good\nautomated testing, you will catch and be able to fix any [Hyrum's\nLaw](https://www.hyrumslaw.com/) dependency problems on an incremental basis\ninstead of being overwhelmed by them and having difficulty isolating them if you\nwait longer between updates.\n\nIf you are using the [Bazel](https://bazel.build/) build system and its\n[external dependencies](https://docs.bazel.build/versions/master/external.html)\nfeature, updating the\n[`http_archive`](https://docs.bazel.build/versions/master/repo/http.html#http_archive)\nrule in your\n[`WORKSPACE`](https://docs.bazel.build/versions/master/be/workspace.html) for\n`com_google_abseil` to point to the [latest commit in the `master` branch of\nAbseil](https://github.com/abseil/abseil-cpp/commits/master) is all you need to\ndo. For example, on February 11, 2020, the latest commit to the master branch\nwas `98eb410c93ad059f9bba1bf43f5bb916fc92a5ea`. To update to this commit, you\nwould add the following snippet to your `WORKSPACE` file:\n\n```\nhttp_archive(\n  name = \"com_google_absl\",\n  urls = [\"https://github.com/abseil/abseil-cpp/archive/98eb410c93ad059f9bba1bf43f5bb916fc92a5ea.zip\"],  # 2020-02-11T18:50:53Z\n  strip_prefix = \"abseil-cpp-98eb410c93ad059f9bba1bf43f5bb916fc92a5ea\",\n  sha256 = \"aabf6c57e3834f8dc3873a927f37eaf69975d4b28117fc7427dfb1c661542a87\",\n)\n```\n\nTo get the `sha256` of this URL, run `curl -sL --output -\nhttps://github.com/abseil/abseil-cpp/archive/98eb410c93ad059f9bba1bf43f5bb916fc92a5ea.zip\n| sha256sum -`.\n\nYou can commit the updated `WORKSPACE` file to your source control every time\nyou update, and if you have good automated testing, you might even consider\nautomating this.\n\nOne thing we don't recommend is using GitHub's `master.zip` files (for example\n[https://github.com/abseil/abseil-cpp/archive/master.zip](https://github.com/abseil/abseil-cpp/archive/master.zip)),\nwhich are always the latest commit in the `master` branch, to implement live at\nhead. Since these `master.zip` URLs are not versioned, you will lose build\nreproducibility. In addition, some build systems, including Bazel, will simply\ncache this file, which means you won't actually be updating to the latest\nrelease until your cache is cleared or invalidated.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0947265625,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 1.46484375,
          "content": "# Copyright 2024 The Abseil Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# https://bazel.build/external/overview#bzlmod\n\nmodule(\n    name = \"abseil-cpp\",\n    version = \"head\",\n    compatibility_level = 1,\n)\n\ncc_configure = use_extension(\"@rules_cc//cc:extensions.bzl\",\n                             \"cc_configure_extension\",\n                             dev_dependency = True)\nuse_repo(cc_configure, \"local_config_cc\")\n\n# Only direct dependencies need to be listed below.\n# Please keep the versions in sync with the versions in the WORKSPACE file.\n\nbazel_dep(name = \"rules_cc\", version = \"0.1.0\")\nbazel_dep(name = \"bazel_skylib\", version = \"1.7.1\")\nbazel_dep(name = \"platforms\", version = \"0.0.10\")\n\nbazel_dep(\n    name = \"google_benchmark\",\n    version = \"1.8.5\",\n    dev_dependency = True,\n)\n\n# Note: Googletest is NOT a dev_dependency. Some Abseil test utilities\n# intended to be used by Abseil users depend on GoogleTest.\nbazel_dep(\n    name = \"googletest\",\n    version = \"1.15.2\",\n)\n"
        },
        {
          "name": "PrivacyInfo.xcprivacy",
          "type": "blob",
          "size": 0.3720703125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>NSPrivacyTracking</key>\n  <false/>\n  <key>NSPrivacyCollectedDataTypes</key>\n  <array/>\n  <key>NSPrivacyTrackingDomains</key>\n  <array/>\n  <key>NSPrivacyAccessedAPITypes</key>\n  <array/>\n</dict>\n</plist>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.58984375,
          "content": "# Abseil - C++ Common Libraries\n\nThe repository contains the Abseil C++ library code. Abseil is an open-source\ncollection of C++ code (compliant to C++14) designed to augment the C++\nstandard library.\n\n## Table of Contents\n\n- [About Abseil](#about)\n- [Quickstart](#quickstart)\n- [Building Abseil](#build)\n- [Support](#support)\n- [Codemap](#codemap)\n- [Releases](#releases)\n- [License](#license)\n- [Links](#links)\n\n<a name=\"about\"></a>\n## About Abseil\n\nAbseil is an open-source collection of C++ library code designed to augment\nthe C++ standard library. The Abseil library code is collected from Google's\nown C++ code base, has been extensively tested and used in production, and\nis the same code we depend on in our daily coding lives.\n\nIn some cases, Abseil provides pieces missing from the C++ standard; in\nothers, Abseil provides alternatives to the standard for special needs\nwe've found through usage in the Google code base. We denote those cases\nclearly within the library code we provide you.\n\nAbseil is not meant to be a competitor to the standard library; we've\njust found that many of these utilities serve a purpose within our code\nbase, and we now want to provide those resources to the C++ community as\na whole.\n\n<a name=\"quickstart\"></a>\n## Quickstart\n\nIf you want to just get started, make sure you at least run through the\n[Abseil Quickstart](https://abseil.io/docs/cpp/quickstart). The Quickstart\ncontains information about setting up your development environment, downloading\nthe Abseil code, running tests, and getting a simple binary working.\n\n<a name=\"build\"></a>\n## Building Abseil\n\n[Bazel](https://bazel.build) and [CMake](https://cmake.org/) are the official\nbuild systems for Abseil.\nSee the [quickstart](https://abseil.io/docs/cpp/quickstart) for more information\non building Abseil using the Bazel build system.\nIf you require CMake support, please check the [CMake build\ninstructions](CMake/README.md) and [CMake\nQuickstart](https://abseil.io/docs/cpp/quickstart-cmake).\n\n<a name=\"support\"></a>\n## Support\n\nAbseil follows Google's [Foundational C++ Support\nPolicy](https://opensource.google/documentation/policies/cplusplus-support). See\n[this\ntable](https://github.com/google/oss-policies-info/blob/main/foundational-cxx-support-matrix.md)\nfor a list of currently supported versions compilers, platforms, and build\ntools.\n\n<a name=\"codemap\"></a>\n## Codemap\n\nAbseil contains the following C++ library components:\n\n* [`base`](absl/base/)\n  <br /> The `base` library contains initialization code and other code which\n  all other Abseil code depends on. Code within `base` may not depend on any\n  other code (other than the C++ standard library).\n* [`algorithm`](absl/algorithm/)\n  <br /> The `algorithm` library contains additions to the C++ `<algorithm>`\n  library and container-based versions of such algorithms.\n* [`cleanup`](absl/cleanup/)\n  <br /> The `cleanup` library contains the control-flow-construct-like type\n  `absl::Cleanup` which is used for executing a callback on scope exit.\n* [`container`](absl/container/)\n  <br /> The `container` library contains additional STL-style containers,\n  including Abseil's unordered \"Swiss table\" containers.\n* [`crc`](absl/crc/) The `crc` library contains code for\n  computing error-detecting cyclic redundancy checks on data.\n* [`debugging`](absl/debugging/)\n  <br /> The `debugging` library contains code useful for enabling leak\n  checks, and stacktrace and symbolization utilities.\n* [`flags`](absl/flags/)\n  <br /> The `flags` library contains code for handling command line flags for\n  libraries and binaries built with Abseil.\n* [`hash`](absl/hash/)\n  <br /> The `hash` library contains the hashing framework and default hash\n  functor implementations for hashable types in Abseil.\n* [`log`](absl/log/)\n  <br /> The `log` library contains `LOG` and `CHECK` macros and facilities\n  for writing logged messages out to disk, `stderr`, or user-extensible\n  destinations.\n* [`memory`](absl/memory/)\n  <br /> The `memory` library contains memory management facilities that augment\n  C++'s `<memory>` library.\n* [`meta`](absl/meta/)\n  <br /> The `meta` library contains compatible versions of type checks\n  available within C++14 and C++17 versions of the C++ `<type_traits>` library.\n* [`numeric`](absl/numeric/)\n  <br /> The `numeric` library contains 128-bit integer types as well as\n  implementations of C++20's bitwise math functions.\n* [`profiling`](absl/profiling/)\n  <br /> The `profiling` library contains utility code for profiling C++\n  entities.  It is currently a private dependency of other Abseil libraries.\n* [`random`](absl/random/)\n  <br /> The `random` library contains functions for generating psuedorandom\n  values.\n* [`status`](absl/status/)\n  <br /> The `status` library contains abstractions for error handling,\n  specifically `absl::Status` and `absl::StatusOr<T>`.\n* [`strings`](absl/strings/)\n  <br /> The `strings` library contains a variety of strings routines and\n  utilities, including a C++14-compatible version of the C++17\n  `std::string_view` type.\n* [`synchronization`](absl/synchronization/)\n  <br /> The `synchronization` library contains concurrency primitives (Abseil's\n  `absl::Mutex` class, an alternative to `std::mutex`) and a variety of\n  synchronization abstractions.\n* [`time`](absl/time/)\n  <br /> The `time` library contains abstractions for computing with absolute\n  points in time, durations of time, and formatting and parsing time within\n  time zones.\n* [`types`](absl/types/)\n  <br /> The `types` library contains non-container utility types, like a\n  C++14-compatible version of the C++17 `std::optional` type.\n* [`utility`](absl/utility/)\n  <br /> The `utility` library contains utility and helper code.\n\n<a name=\"releases\"></a>\n## Releases\n\nAbseil recommends users \"live-at-head\" (update to the latest commit from the\nmaster branch as often as possible). However, we realize this philosophy doesn't\nwork for every project, so we also provide [Long Term Support\nReleases](https://github.com/abseil/abseil-cpp/releases) to which we backport\nfixes for severe bugs. See our [release\nmanagement](https://abseil.io/about/releases) document for more details.\n\n<a name=\"license\"></a>\n## License\n\nThe Abseil C++ library is licensed under the terms of the Apache\nlicense. See [LICENSE](LICENSE) for more information.\n\n<a name=\"links\"></a>\n## Links\n\nFor more information about Abseil:\n\n* Consult our [Abseil Introduction](https://abseil.io/about/intro)\n* Read [Why Adopt Abseil](https://abseil.io/about/philosophy) to understand our\n  design philosophy.\n* Peruse our\n  [Abseil Compatibility Guarantees](https://abseil.io/about/compatibility) to\n  understand both what we promise to you, and what we expect of you in return.\n"
        },
        {
          "name": "UPGRADES.md",
          "type": "blob",
          "size": 0.6259765625,
          "content": "# C++ Upgrade Tools\n\nAbseil may occasionally release API-breaking changes. As noted in our\n[Compatibility Guidelines][compatibility-guide], we will aim to provide a tool\nto do the work of effecting such API-breaking changes, when absolutely\nnecessary.\n\nThese tools will be listed on the [C++ Upgrade Tools][upgrade-tools] guide on\nhttps://abseil.io.\n\nFor more information, the [C++ Automated Upgrade Guide][api-upgrades-guide]\noutlines this process.\n\n[compatibility-guide]: https://abseil.io/about/compatibility\n[api-upgrades-guide]: https://abseil.io/docs/cpp/tools/api-upgrades\n[upgrade-tools]: https://abseil.io/docs/cpp/tools/upgrades/\n\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 2.52734375,
          "content": "#\n# Copyright 2019 The Abseil Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nworkspace(name = \"abseil-cpp\")\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\n# GoogleTest/GoogleMock framework. Used by most unit-tests.\nhttp_archive(\n    name = \"googletest\",\n    sha256 = \"7b42b4d6ed48810c5362c265a17faebe90dc2373c885e5216439d37927f02926\",\n    strip_prefix = \"googletest-1.15.2\",\n    # Keep this URL in sync with the version in ci/cmake_common.sh and\n    # ci/windows_msvc_cmake.bat.\n    urls = [\"https://github.com/google/googletest/releases/download/v1.15.2/googletest-1.15.2.tar.gz\"],\n    # Now that Abseil is using the canonical names from the Bazel Central Registry, map\n    # GoogleTest's old names to the new canonical names.\n    repo_mapping = {\n        \"@com_google_absl\": \"@\",\n        \"@com_googlesource_code_re2\": \"@re2\",\n    },\n)\n\n# RE2 (the regular expression library used by GoogleTest)\nhttp_archive(\n    name = \"re2\",\n    sha256 = \"eb2df807c781601c14a260a507a5bb4509be1ee626024cb45acbd57cb9d4032b\",\n    strip_prefix = \"re2-2024-07-02\",\n    urls = [\"https://github.com/google/re2/releases/download/2024-07-02/re2-2024-07-02.tar.gz\"],\n)\n\n# Google benchmark.\nhttp_archive(\n    name = \"google_benchmark\",\n    sha256 = \"d26789a2b46d8808a48a4556ee58ccc7c497fcd4c0af9b90197674a81e04798a\",\n    strip_prefix = \"benchmark-1.8.5\",\n    urls = [\"https://github.com/google/benchmark/archive/refs/tags/v1.8.5.tar.gz\"],\n)\n\n# Bazel Skylib.\nhttp_archive(\n    name = \"bazel_skylib\",\n    sha256 = \"bc283cdfcd526a52c3201279cda4bc298652efa898b10b4db0837dc51652756f\",\n    urls = [\"https://github.com/bazelbuild/bazel-skylib/releases/download/1.7.1/bazel-skylib-1.7.1.tar.gz\"],\n)\n\n# Bazel platform rules.\nhttp_archive(\n    name = \"platforms\",\n    urls = [\n        \"https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/0.0.10/platforms-0.0.10.tar.gz\",\n        \"https://github.com/bazelbuild/platforms/releases/download/0.0.10/platforms-0.0.10.tar.gz\",\n    ],\n    sha256 = \"218efe8ee736d26a3572663b374a253c012b716d8af0c07e842e82f238a0a7ee\",\n)\n"
        },
        {
          "name": "WORKSPACE.bzlmod",
          "type": "blob",
          "size": 0.8310546875,
          "content": "# Copyright 2024 The Abseil Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# https://bazel.build/external/migration#workspace.bzlmod\n#\n# This file is intentionally empty. When bzlmod is enabled and this\n# file exists, the contents of WORKSPACE is ignored. This prevents\n# bzlmod builds from unintentionally depending on the WORKSPACE file.\n"
        },
        {
          "name": "absl",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "conanfile.py",
          "type": "blob",
          "size": 2.0185546875,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Note: Conan is supported on a best-effort basis. Abseil doesn't use Conan\n# internally, so we won't know if it stops working. We may ask community\n# members to help us debug any problems that arise.\n\nfrom conans import ConanFile, CMake, tools\nfrom conans.errors import ConanInvalidConfiguration\nfrom conans.model.version import Version\n\n\nclass AbseilConan(ConanFile):\n    name = \"abseil\"\n    url = \"https://github.com/abseil/abseil-cpp\"\n    homepage = url\n    author = \"Abseil <abseil-io@googlegroups.com>\"\n    description = \"Abseil Common Libraries (C++) from Google\"\n    license = \"Apache-2.0\"\n    topics = (\"conan\", \"abseil\", \"abseil-cpp\", \"google\", \"common-libraries\")\n    exports = [\"LICENSE\"]\n    exports_sources = [\"CMakeLists.txt\", \"CMake/*\", \"absl/*\"]\n    generators = \"cmake\"\n    settings = \"os\", \"arch\", \"compiler\", \"build_type\"\n\n    def configure(self):\n        if self.settings.os == \"Windows\" and \\\n           self.settings.compiler == \"Visual Studio\" and \\\n           Version(self.settings.compiler.version.value) < \"14\":\n            raise ConanInvalidConfiguration(\"Abseil does not support MSVC < 14\")\n\n    def build(self):\n        tools.replace_in_file(\"CMakeLists.txt\", \"project(absl LANGUAGES CXX)\", \"project(absl LANGUAGES CXX)\\ninclude(conanbuildinfo.cmake)\\nconan_basic_setup()\")\n        cmake = CMake(self)\n        cmake.definitions[\"BUILD_TESTING\"] = False\n        cmake.configure()\n        cmake.build()\n\n    def package(self):\n        self.copy(\"LICENSE\", dst=\"licenses\")\n        self.copy(\"*.h\", dst=\"include\", src=\".\")\n        self.copy(\"*.inc\", dst=\"include\", src=\".\")\n        self.copy(\"*.a\", dst=\"lib\", src=\".\", keep_path=False)\n        self.copy(\"*.lib\", dst=\"lib\", src=\".\", keep_path=False)\n\n    def package_info(self):\n        if self.settings.os == \"Linux\":\n            self.cpp_info.libs = [\"-Wl,--start-group\"]\n        self.cpp_info.libs.extend(tools.collect_libs(self))\n        if self.settings.os == \"Linux\":\n            self.cpp_info.libs.extend([\"-Wl,--end-group\", \"pthread\"])\n"
        },
        {
          "name": "create_lts.py",
          "type": "blob",
          "size": 4.4560546875,
          "content": "#!/usr/bin/env python3\n#\n# Copyright 2021 The Abseil Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"A script to do source transformations to create a new LTS release.\n\n   Usage: ./create_lts.py YYYYMMDD\n\"\"\"\n\nimport sys\n\n\ndef ReplaceStringsInFile(filename, replacement_dict):\n  \"\"\"Performs textual replacements in a file.\n\n  Rewrites filename with the keys in replacement_dict replaced with\n  their values. This function assumes the file can fit in memory.\n\n  Args:\n    filename: the filename to perform the replacement on\n    replacement_dict: a dictionary of key strings to be replaced with their\n      values\n\n  Raises:\n    Exception: A failure occurred\n  \"\"\"\n  f = open(filename, 'r')\n  content = f.read()\n  f.close()\n\n  for key, value in replacement_dict.items():\n    original = content\n    content = content.replace(key, value)\n    if content == original:\n      raise Exception('Failed to find {} in {}'.format(key, filename))\n\n  f = open(filename, 'w')\n  f.write(content)\n  f.close()\n\n\ndef StripContentBetweenTags(filename, strip_begin_tag, strip_end_tag):\n  \"\"\"Strip contents from a file.\n\n  Rewrites filename with by removing all content between\n  strip_begin_tag and strip_end_tag, including the tags themselves.\n\n  Args:\n    filename: the filename to perform the replacement on\n    strip_begin_tag: the start of the content to be removed\n    strip_end_tag: the end of the content to be removed\n\n  Raises:\n    Exception: A failure occurred\n  \"\"\"\n  f = open(filename, 'r')\n  content = f.read()\n  f.close()\n\n  while True:\n    begin = content.find(strip_begin_tag)\n    if begin == -1:\n      break\n    end = content.find(strip_end_tag, begin + len(strip_begin_tag))\n    if end == -1:\n      raise Exception('{}: imbalanced strip begin ({}) and '\n                      'end ({}) tags'.format(filename, strip_begin_tag,\n                                             strip_end_tag))\n    content = content.replace(content[begin:end + len(strip_end_tag)], '')\n\n  f = open(filename, 'w')\n  f.write(content)\n  f.close()\n\n\ndef main(argv):\n  if len(argv) != 2:\n    print('Usage: {} YYYYMMDD'.format(sys.argv[0], file=sys.stderr))\n    sys.exit(1)\n\n  datestamp = sys.argv[1]\n  if len(datestamp) != 8 or not datestamp.isdigit():\n    raise Exception(\n        'datestamp={} is not in the YYYYMMDD format'.format(datestamp))\n\n  # Replacement directives go here.\n  ReplaceStringsInFile(\n      'MODULE.bazel', {\n          'version = \"head\"':\n              'version = \"{}.0\"'.format(datestamp)\n      })\n  ReplaceStringsInFile(\n      'absl/base/config.h', {\n          '#undef ABSL_LTS_RELEASE_VERSION':\n              '#define ABSL_LTS_RELEASE_VERSION {}'.format(datestamp),\n          '#undef ABSL_LTS_RELEASE_PATCH_LEVEL':\n              '#define ABSL_LTS_RELEASE_PATCH_LEVEL 0'\n      })\n  ReplaceStringsInFile(\n      'absl/base/options.h', {\n          '#define ABSL_OPTION_USE_INLINE_NAMESPACE 0':\n              '#define ABSL_OPTION_USE_INLINE_NAMESPACE 1',\n          '#define ABSL_OPTION_INLINE_NAMESPACE_NAME head':\n              '#define ABSL_OPTION_INLINE_NAMESPACE_NAME lts_{}'.format(\n                  datestamp)\n      })\n  ReplaceStringsInFile(\n      'CMakeLists.txt',\n      {\n          'project(absl LANGUAGES CXX)': (\n              'project(absl LANGUAGES CXX VERSION {})'.format(datestamp)\n          ),\n          # Set the SOVERSION to YYMM.0.0 - The first 0 means we only have ABI\n          # compatible changes, and the second 0 means we can increment it to\n          # mark changes as ABI-compatible, for patch releases.  Note that we\n          # only use the last two digits of the year and the month because the\n          # MacOS linker requires the first part of the SOVERSION to fit into\n          # 16 bits.\n          # https://www.sicpers.info/2013/03/how-to-version-a-mach-o-library/\n          'ABSL_SOVERSION 0': 'ABSL_SOVERSION \"{}.0.0\"'.format(datestamp[2:6]),\n      },\n  )\n  StripContentBetweenTags('CMakeLists.txt', '# absl:lts-remove-begin',\n                          '# absl:lts-remove-end')\n\n\nif __name__ == '__main__':\n  main(sys.argv)\n"
        }
      ]
    }
  ]
}