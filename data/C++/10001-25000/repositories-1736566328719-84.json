{
  "metadata": {
    "timestamp": 1736566328719,
    "page": 84,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "triton-lang/triton",
      "stars": 13964,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0185546875,
          "content": "BasedOnStyle: LLVM\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.501953125,
          "content": "# https://editorconfig.org/\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.py]\nindent_size = 4\nsrc_paths=python\n\n[*.{yaml,yml}]\nindent_size = 2\n\n[*.md]\nindent_size = 2\nx-soft-wrap-text = true\n\n[*.rst]\nindent_size = 4\nx-soft-wrap-text = true\n\n[CMakeLists.txt,*.cmake]\nindent_size = 2\n\n[Makefile]\nindent_style = tab\n\n[*.{c,cc,cpp,h,hpp,cu,cuh}]\nindent_size = 2\n\n[*.mlir]\nindent_size = 2\n\n[*.td]\nindent_size = 4\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.2412109375,
          "content": "[flake8]\n# W503 (linebreak occurred before binary operator) seems to be enabled by\n# default, even though it goes against pep8 and is incompatible with W504\n# (linebreak occurred *after* binary operator).  Disable it.\nignore = E501,E701,E731,W503\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.8603515625,
          "content": "# Commits listed here are ignored by `git blame`.  Add \"big and uninteresting\n# changes\" here.  Don't forget that it has to be a separate commit (and, because\n# our automation squashes PRs, a separate PR)!\n#\n# Run the following command to teach your `git blame` to pick up this file.\n#\n#  $ git config blame.ignoreRevsFile .git-blame-ignore-revs`\n\n841a77d1b5961b43e1b64e5265bdfe52c133574d\ncb68a0d9d501657258ed9f7ad7610d0784c9be9a\n03184de8b535bb24fb1f49cc1f5e008bcbaa73ef\nbc4a8e66da036fafc01b87ee9e210df7ee8fb738\n846d6e7e77891706d179b20f27b1278ac3b9a9ac\n0327b9d32db6d1d63d207ccab722bd45e00a6678\ndf08301e76a56d9ab3f36ff00ab7133672baa8d3\nf88b01f558df06f010a869e01473253a5f5cd8db\n312cf97e147e962562877026fd82c928cf6eaa30\n53d868113a706988394134ca1f7f85cb3016cc81\n539fbe5049570f29e73dc6843f984cd4913c5505\n053af4e9f8f005e1bc3f8ac9bf285eaf0ac9bf72\n5b36cb48ad9ce566dd24ff7183f207a1cb9358b5\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2265625,
          "content": "# Triton builds\nbuild/\nbuild-*/\n\n# Triton Python module builds\npython/build/\npython/dist/\npython/triton*.egg-info/\n\npython/triton/_C/*.pyd\npython/triton/_C/*.so\npython/triton/_C/*.dylib\npython/triton/_C/*.pdb\npython/triton/_C/*.exe\npython/triton/_C/*.ilk\n\n# Backends copied from submodules\npython/triton/backends/\n!python/triton/backends/__init__.py\n!python/triton/backends/compiler.py\n!python/triton/backends/driver.py\n\n# Language extras\npython/triton/language/extra\n\n# Tools extras\npython/triton/tools/extra\n\n# Proton\npython/triton/profiler\n\n# Pytest\npytest.ini\n\n# Instrumentation\npython/triton/instrumentation\n\n# Python caches\n__pycache__/\n*.py[cod]\n.pytest_cache\n\n# Environments\n.venv\nvenv/\nvenv.bak/\n\n# VS Code project files\n.vscode\n.vs\n\n# JetBrains project files\n.idea\ncmake-build-*\n\n# Third-party binaries\ncuobjdump\nnvdisasm\nptxas\n\n# Third-party include\nthird_party/nvidia/backend/include\nthird_party/nvidia/backend/lib/cupti\n\n# Docs\ndocs/_build/\ndocs/python-api/generated/\ndocs/dialects/\ndocs/getting-started/tutorials\ndocs/sg_execution_times.rst\n!python/tutorials/*.py\n!python/tutorials/*.rst\n\n# clangd index. (\".clangd\" is a config file now, thus trailing slash)\n.clangd/\n.cache\n/compile_commands.json\n.vscode\n.vs\n\n# Vim\n*.swp\n\n# macOS\n.DS_Store\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 2.1015625,
          "content": "default_stages: [pre-commit, pre-push, manual]\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-symlinks\n      - id: destroyed-symlinks\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-yaml\n      - id: check-toml\n      - id: check-ast\n      - id: check-added-large-files\n      - id: check-merge-conflict\n      - id: check-executables-have-shebangs\n      - id: check-shebang-scripts-are-executable\n      - id: detect-private-key\n      - id: debug-statements\n\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.7.1\n    hooks:\n      - id: ruff\n        files: '^python/.*'\n        args: [\"--fix\", \"--exit-non-zero-on-fix\"]\n        exclude: |\n          (?x)(\n            ^python/triton/runtime/.*|\n            ^test/|\n            ^docs/conf.py$\n          )\n\n  - repo: https://github.com/google/yapf\n    rev: \"7e21823\"\n    hooks:\n      - id: yapf\n        args: [\"-p\", \"-i\"]\n        exclude: \"python/test/unit/language/test_line_info.py\"\n\n  - repo: https://github.com/pre-commit/mirrors-clang-format\n    rev: v19.1.2\n    hooks:\n      - id: clang-format\n\n  # Expand YAML anchors in files used by github workflows, because github can't\n  # do this itself.  This lets us use anchors, which avoids code duplication.\n  - repo: local\n    hooks:\n    - id: expand-yaml-anchors\n      name: Expand YAML anchors\n      language: golang\n      additional_dependencies: [github.com/mikefarah/yq/v4@latest]\n      entry: >\n        bash -c '\n          OUT=\".github/workflows/integration-tests.yml\"\n          IN=\"$OUT.in\"\n          echo \"# AUTOGENERATED by pre-commit, modify the .in file instead.\" > \"$OUT\" &&\n          echo >> \"$OUT\"\n          yq \"explode(.)\" \"$IN\" >> \"$OUT\"\n        '\n      files: ^.github/workflows/integration-tests.yml.*\n      pass_filenames: false\n\nexclude: |\n  (?x)(\n    ^include/triton/external/|\n    ^third_party/amd/backend/include/hip/|\n    ^third_party/amd/backend/include/hsa/|\n    ^third_party/amd/backend/include/roctracer/|\n    ^third_party/amd/backend/lib/|\n    ^third_party/nvidia/backend/include/cuda.h|\n    ^third_party/f2reduce\n  )\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.30859375,
          "content": "cmake_minimum_required(VERSION 3.18)\n\nif(POLICY CMP0116)\n# Introduced in cmake 3.20\n# https://cmake.org/cmake/help/latest/policy/CMP0116.html\n  cmake_policy(SET CMP0116 OLD)\nendif()\n\ninclude(ExternalProject)\n\nset(CMAKE_CXX_STANDARD 17)\n\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\n\nproject(triton CXX C)\ninclude(CTest)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\n# Options\noption(TRITON_BUILD_TUTORIALS \"Build C++ Triton tutorials\" ON)\noption(TRITON_BUILD_PYTHON_MODULE \"Build Python Triton bindings\" OFF)\noption(TRITON_BUILD_PROTON \"Build the Triton Proton profiler\" ON)\noption(TRITON_BUILD_UT \"Build C++ Triton Unit Tests\" ON)\noption(TRITON_BUILD_WITH_CCACHE \"Build with ccache (if available)\" ON)\nset(TRITON_CODEGEN_BACKENDS \"\" CACHE STRING \"Enable different codegen backends\")\n\nif(TRITON_BUILD_WITH_CCACHE)\n  find_program(CCACHE_PROGRAM ccache)\n  if(CCACHE_PROGRAM)\n    set(CMAKE_C_COMPILER_LAUNCHER \"${CCACHE_PROGRAM}\"\n        CACHE STRING \"C compiler launcher\")\n    set(CMAKE_CXX_COMPILER_LAUNCHER \"${CCACHE_PROGRAM}\"\n        CACHE STRING \"CXX compiler launcher\")\n  else()\n    message(\n      STATUS\n        \"Could not find ccache. Consider installing ccache to speed up compilation.\"\n    )\n  endif()\nendif()\n\nset(TRITON_PARALLEL_LINK_JOBS \"\" CACHE STRING\n  \"Define the maximum number of concurrent link jobs (Ninja only).\")\nif (TRITON_PARALLEL_LINK_JOBS)\n    set_property(GLOBAL APPEND PROPERTY JOB_POOLS link_job_pool=${TRITON_PARALLEL_LINK_JOBS})\n    set(CMAKE_JOB_POOL_LINK link_job_pool)\nendif()\n\n\n# Ensure Python3 vars are set correctly\n# used conditionally in this file and by lit tests\n\n# Customized release build type with assertions: TritonRelBuildWithAsserts\nif(NOT MSVC)\n  set(CMAKE_C_FLAGS_TRITONRELBUILDWITHASSERTS \"-O2 -g\")\n  set(CMAKE_CXX_FLAGS_TRITONRELBUILDWITHASSERTS \"-O2 -g\")\n  set(CMAKE_C_FLAGS_TRITONBUILDWITHO1 \"-O1\")\n  set(CMAKE_CXX_FLAGS_TRITONBUILDWITHO1 \"-O1\")\nelse()\n  set(CMAKE_C_FLAGS_TRITONRELBUILDWITHASSERTS \"/Zi /RTC1 /bigobj /Zc:preprocessor /permissive-\")\n  set(CMAKE_CXX_FLAGS_TRITONRELBUILDWITHASSERTS \"/Zi /RTC1 /bigobj /Zc:preprocessor /permissive-\")\n  set(CMAKE_EXE_LINKER_FLAGS_TRITONRELBUILDWITHASSERTS \"/debug:fastlink /INCREMENTAL\")\n  set(CMAKE_MODULE_LINKER_FLAGS_TRITONRELBUILDWITHASSERTS \"/debug:fastlink /INCREMENTAL\")\n  set(CMAKE_SHARED_LINKER_FLAGS_TRITONRELBUILDWITHASSERTS \"/debug:fastlink /INCREMENTAL\")\nendif()\n\n# Default build type\nif(NOT CMAKE_BUILD_TYPE)\n  message(STATUS \"Default build type: Release\")\n  set(CMAKE_BUILD_TYPE \"Release\")\nendif()\n\nif(NOT WIN32)\n  find_library(TERMINFO_LIBRARY tinfo)\nendif()\n\nif(TRITON_BUILD_UT)\n  # This is an aggregate target for all unit tests.\n  add_custom_target(TritonUnitTests)\n  set_target_properties(TritonUnitTests PROPERTIES FOLDER \"Triton/Tests\")\n  include(AddTritonUnitTest)\nendif()\n\n# Compiler flags\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)\nif(NOT MSVC)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D__STDC_FORMAT_MACROS  -fPIC -std=gnu++17\")\nelse()\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D__STDC_FORMAT_MACROS\")\nendif()\n\n\n# #########\n# LLVM\n# #########\nif(NOT MLIR_DIR)\n  set(MLIR_DIR ${LLVM_LIBRARY_DIR}/cmake/mlir)\nendif()\n\n# MLIR\nfind_package(MLIR REQUIRED CONFIG PATHS ${MLIR_DIR})\n\nlist(APPEND CMAKE_MODULE_PATH \"${MLIR_CMAKE_DIR}\")\nlist(APPEND CMAKE_MODULE_PATH \"${LLVM_CMAKE_DIR}\")\n\ninclude(TableGen) # required by AddMLIR\ninclude(AddLLVM)\ninclude(AddMLIR)\n\n# Utilities\nfunction(add_triton_object name)\n  cmake_parse_arguments(ARG \"\" \"\" \"DEPENDS;LINK_LIBS\" ${ARGN})\n  add_library(${name} OBJECT)\n  target_sources(${name}\n    PRIVATE ${ARG_UNPARSED_ARGUMENTS}\n    INTERFACE $<TARGET_OBJECTS:${name}>\n  )\n\n\n  # add_library(${name} OBJECT ${ARG_UNPARSED_ARGUMENTS})\n  if(ARG_DEPENDS)\n    add_dependencies(${name} ${ARG_DEPENDS})\n  endif()\n  if(ARG_LINK_LIBS)\n    target_link_libraries(${name} PUBLIC ${ARG_LINK_LIBS})\n  endif()\nendfunction(add_triton_object)\n\nset_property(GLOBAL PROPERTY TRITON_LIBS \"\")\nfunction(add_triton_library name)\n  set_property(GLOBAL APPEND PROPERTY TRITON_LIBS ${name})\n  add_triton_object(${name} ${ARGN})\n  llvm_update_compile_flags(${name})\nendfunction()\n\nset_property(GLOBAL PROPERTY TRITON_PLUGINS \"\")\nfunction(add_triton_plugin name)\n  set_property(GLOBAL APPEND PROPERTY TRITON_PLUGINS ${name})\n  add_triton_object(${name} ${ARGN})\nendfunction()\n\n\n# Disable warnings that show up in external code (gtest;pybind11)\nif(NOT MSVC)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Werror -Wno-covered-switch-default -fvisibility=hidden\")\nelse()\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /wd4244 /wd4624 /wd4715 /wd4530\")\nendif()\n\ninclude_directories(\".\")\ninclude_directories(${MLIR_INCLUDE_DIRS})\ninclude_directories(${LLVM_INCLUDE_DIRS})\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\ninclude_directories(${PROJECT_BINARY_DIR}/include) # Tablegen'd files\ninclude_directories(${PROJECT_SOURCE_DIR}/third_party)\ninclude_directories(${PROJECT_BINARY_DIR}/third_party) # Tablegen'd files\n\n# link_directories(${LLVM_LIBRARY_DIR})\nadd_subdirectory(include)\nadd_subdirectory(lib)\n\n# TODO: Figure out which target is sufficient to fix errors; triton is\n# apparently not enough. Currently set linking libstdc++fs for all targets\n# to support some old version GCC compilers like 8.3.0.\nif (NOT WIN32 AND NOT APPLE)\n  link_libraries(stdc++fs)\nendif()\n\n\n# -----\n\n# ------\nif(TRITON_BUILD_PYTHON_MODULE)\n  message(STATUS \"Adding Python module\")\n  set(PYTHON_SRC_PATH ${CMAKE_CURRENT_SOURCE_DIR}/python/src)\n  include_directories(${PYTHON_SRC_PATH})\n\n  # Python Interpreter is used to run lit tests\n  find_package(Python3 REQUIRED COMPONENTS Development.Module Interpreter)\n  find_package(pybind11 CONFIG REQUIRED HINTS \"${Python3_SITELIB}\")\n\n  if (DEFINED TRITON_PLUGIN_DIRS)\n    foreach(PLUGIN_DIR ${TRITON_PLUGIN_DIRS})\n      # Read the plugin name under dir/backend/name.conf\n      cmake_path(APPEND PLUGIN_DIR \"backend\" \"name.conf\" OUTPUT_VARIABLE PLUGIN_NAME_PATH)\n      file(READ ${PLUGIN_NAME_PATH} PLUGIN_NAME)\n      string(STRIP ${PLUGIN_NAME} PLUGIN_NAME)\n\n      list(APPEND TRITON_PLUGIN_NAMES ${PLUGIN_NAME})\n\n      # Include the plugin as part of the build, placing the build output under\n      # ${TRITON_BINARY_DIR}/third_party/${PLUGIN_NAME}\n      cmake_path(APPEND TRITON_BINARY_DIR \"third_party\" ${PLUGIN_NAME} OUTPUT_VARIABLE PLUGIN_DIR_BUILD_OUTPUT)\n      message(STATUS \"Building plugin '${PLUGIN_NAME}' from ${PLUGIN_DIR} with output ${PLUGIN_DIR_BUILD_OUTPUT}\")\n      add_subdirectory(${PLUGIN_DIR} ${PLUGIN_DIR_BUILD_OUTPUT})\n    endforeach()\n  endif()\n\n  foreach(CODEGEN_BACKEND ${TRITON_CODEGEN_BACKENDS})\n    add_subdirectory(third_party/${CODEGEN_BACKEND})\n  endforeach()\n\n  if (TRITON_BUILD_PROTON)\n    add_subdirectory(third_party/proton)\n  endif()\n  # We always build proton dialect\n  list(APPEND TRITON_PLUGIN_NAMES \"proton\")\n  add_subdirectory(third_party/proton/dialect)\n\n  get_property(triton_libs GLOBAL PROPERTY TRITON_LIBS)\n  get_property(triton_plugins GLOBAL PROPERTY TRITON_PLUGINS)\n  set(TRITON_LIBRARIES\n    ${triton_libs}\n    ${triton_plugins}\n\n    # mlir\n    MLIRAMDGPUDialect\n    MLIRNVVMDialect\n    MLIRNVVMToLLVMIRTranslation\n    MLIRGPUToNVVMTransforms\n    MLIRGPUToGPURuntimeTransforms\n    MLIRGPUTransforms\n    MLIRIR\n    MLIRControlFlowToLLVM\n    MLIRBytecodeWriter\n    MLIRPass\n    MLIRTransforms\n    MLIRLLVMDialect\n    MLIRSupport\n    MLIRTargetLLVMIRExport\n    MLIRMathToLLVM\n    MLIRROCDLToLLVMIRTranslation\n    MLIRGPUDialect\n    MLIRSCFToControlFlow\n    MLIRIndexToLLVM\n    MLIRGPUToROCDLTransforms\n    MLIRUBToLLVM\n\n    # LLVM\n    LLVMPasses\n    LLVMNVPTXCodeGen\n    # LLVMNVPTXAsmPrinter\n    LLVMAMDGPUCodeGen\n    LLVMAMDGPUAsmParser\n\n    Python3::Module\n    pybind11::headers\n\n  )\n  if(CMAKE_SYSTEM_PROCESSOR MATCHES \"aarch64\" OR # Linux arm64\n     CMAKE_SYSTEM_PROCESSOR MATCHES \"arm64\" OR # macOS arm64\n     CMAKE_OSX_ARCHITECTURES MATCHES \"arm64\")  # also macOS arm64\n      list(APPEND TRITON_LIBRARIES\n          LLVMAArch64CodeGen\n          LLVMAArch64AsmParser\n      )\n  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64\" OR CMAKE_SYSTEM_PROCESSOR MATCHES \"AMD64\")\n      list(APPEND TRITON_LIBRARIES\n          LLVMX86CodeGen\n          LLVMX86AsmParser\n      )\n  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"ppc64le\")\n      list(APPEND TRITON_LIBRARIES\n        LLVMPowerPCAsmParser\n        LLVMPowerPCCodeGen\n      )\n  else()\n    message(FATAL_ERROR \"LLVM codegen/ASM parser libs: This HW architecture (${CMAKE_SYSTEM_PROCESSOR}) is not configured in cmake lib dependencies.\")\n  endif()\n\n  # Define triton library\n  string(JOIN \",\" TRITON_BACKENDS_TUPLE ${TRITON_CODEGEN_BACKENDS})\n\n  if (DEFINED TRITON_PLUGIN_NAMES)\n    string(JOIN \",\" TRITON_BACKENDS_TUPLE ${TRITON_BACKENDS_TUPLE} ${TRITON_PLUGIN_NAMES})\n  endif()\n\n  message(STATUS \"Triton backends tuple: ${TRITON_BACKENDS_TUPLE}\")\n\n  set(TRITON_BACKENDS_TUPLE \"(${TRITON_BACKENDS_TUPLE})\")\n  add_compile_definitions(TRITON_BACKENDS_TUPLE=${TRITON_BACKENDS_TUPLE})\n  add_library(triton SHARED ${PYTHON_SRC_PATH}/main.cc\n                  ${PYTHON_SRC_PATH}/ir.cc\n                  ${PYTHON_SRC_PATH}/passes.cc\n                  ${PYTHON_SRC_PATH}/interpreter.cc\n                  ${PYTHON_SRC_PATH}/llvm.cc)\n\n  # Link triton with its dependencies\n  target_link_libraries(triton PRIVATE ${TRITON_LIBRARIES})\n  if(WIN32)\n    target_link_libraries(triton PRIVATE ${CMAKE_DL_LIBS})\n    set_target_properties(triton PROPERTIES SUFFIX \".pyd\")\n    set_target_properties(triton PROPERTIES PREFIX \"lib\")\n  else()\n    target_link_libraries(triton PRIVATE z)\n  endif()\n  target_link_options(triton PRIVATE ${LLVM_LDFLAGS})\nendif()\n\nif (UNIX AND NOT APPLE)\n  set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--exclude-libs,ALL\")\nendif()\n\nif(TRITON_BUILD_PYTHON_MODULE AND NOT WIN32)\n  set(CMAKE_SHARED_LIBRARY_SUFFIX \".so\")\n\n  # Check if the platform is MacOS\n  if(APPLE)\n    set(PYTHON_LDFLAGS \"-undefined dynamic_lookup\")\n  endif()\n\n  target_link_options(triton PRIVATE ${PYTHON_LDFLAGS})\nendif()\n\nif(NOT TRITON_BUILD_PYTHON_MODULE)\n  foreach(CODEGEN_BACKEND ${TRITON_CODEGEN_BACKENDS})\n    add_subdirectory(third_party/${CODEGEN_BACKEND})\n  endforeach()\n  add_subdirectory(third_party/proton/dialect)\nendif()\n\nfind_package(Threads REQUIRED)\n\nadd_subdirectory(third_party/f2reduce)\nadd_subdirectory(bin)\nadd_subdirectory(test)\n\nif(TRITON_BUILD_UT)\n  add_subdirectory(unittest)\n  # This target runs all the unit tests.\n  add_custom_target(check-triton-unit-tests\n    COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure\n    DEPENDS TritonUnitTests\n    USES_TERMINAL\n  )\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.43359375,
          "content": "# Governance Structure\n\nTriton adopts the following hierarchical technical governance structure:\n* A community of **contributors** who file issues and submit pull requests\n* A group of **module maintainers** who own parts of Triton and drive their development\n* A body of **core maintainers** who own Triton overall and drive its development\n* A **lead core maintainer** who is the catch-all decision maker when consensus cannot be reached by core maintainers\n\nAll contributions are expected to follow Triton’s design principles, as enforced by module and core maintainers. While high-quality pull requests are appreciated and encouraged, all maintainers reserve the right to prioritize their own work over code reviews at-will, hence contributors should not expect their work to be reviewed promptly.\n\nContributors can maximize the chances of their work being accepted by maintainers by meeting a high quality bar before sending a PR to maintainers.  We encourage maintainers who contribute to Triton on behalf of a company to get reviews from senior developers within their company before sending to maintainers.\nModule maintainers\nWe aim to make the Triton codebase as modular as possible, such that different components (e.g., subdirectories) can be improved in parallel under the supervision of different module maintainers.\n\nWhat constitutes (or not) a module is up to the core maintainers. Core maintainers also reserve the right to decide whether the development of a module should happen – or keep happening – in-tree or not.\n\n**List of in-tree modules (as of 05/12/2024, alphabetical order):**\n* AMD backend (Lei Zhang)\n* Interpreter (Keren Zhou)\n* Profiler (Keren Zhou)\n\nNote: Parts of Triton that are not listed above (e.g., Nvidia backend) are assumed to be owned by core maintainers.\n\nNote: Some important parts of the Triton eco-system (e.g., Intel XPU backend) may be maintained out-of-tree and advertised in our repository. The governance rules described in this document do not carry over to these modules.\n\n__List of out-of-tree modules (as of 05/12/2024, alphabetical order):__\n* CPU backend (Bert Maher, Ilya Enkovich)\n* Intel backend (Ettore Tiotto, Whitney Tsang)\n\n\n## Core maintainers\nThe core maintainers drive the development of Triton at large and set the roadmap for the project. As such, they have the following responsibilities:\n* Proposing, implementing and reviewing profound changes to user-facing APIs, IR specifications and/or pass infrastructures\n* Enforcing code quality standards and adherence to core design principles\n* Drawing module boundaries and resolving disputes between module maintainers\n\n\nThe core maintainers as a group have the power to veto any decision made at a Module maintainer level.\n\nThe core maintainers should publicly articulate their decision-making, and share the reasoning behind their decisions, vetoes, and dispute resolution.\n\n__List of core maintainers (as of 08/30/2024, alphabetical order):__\n* Keren Zhou\n* Mario Lezcano-Casado\n* Pawel Szczerbuk\n* Peter Bell\n* Phil Tillet\n* Thomas Raoux\n* Zahi Moudallal\n\n## Lead core maintainer\nWhen core maintainers cannot come to a consensus, a publicly declared lead maintainer is expected to settle the debate and make executive decisions.\n\nThe Lead Core Maintainer should publicly articulate their decision-making, and give a clear reasoning for their decisions.\n\nThe Lead Core Maintainer is also responsible for confirming or removing core maintainers.\n\n**Lead maintainer (as of 05/12/2024)**\n* Phil Tillet\n\n# Decision Making\n\n## Uncontroversial Changes\n\nWe are committed to accepting functional bug fixes that meet our quality standards – and include minimized unit tests to avoid future regressions. Performance improvements generally fall under the same category, with the caveat that they may be rejected if the trade-off between usefulness and complexity is deemed unfavorable by core maintainers (e.g., complex swizzling logic to improve the performance of non-tensor-cores matrix multiplications). Design changes that neither fix known functional nor performance issues are automatically considered controversial.\n\n## Controversial Changes\n\nMore controversial design changes (e.g., changes in our IRs/APIs/Passes) are evaluated on a case-by-case basis under the subjective judgment of core maintainers. While it is possible for contributors to propose and land deep design changes upstream (see https://github.com/triton-lang/triton/pull/1305), the community should expect such occurrences to be relatively rare.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.10546875,
          "content": "/*\n* Copyright 2018-2020 Philippe Tillet\n* Copyright 2020-2022 OpenAI\n*\n* Permission is hereby granted, free of charge, to any person obtaining\n* a copy of this software and associated documentation files\n* (the \"Software\"), to deal in the Software without restriction,\n* including without limitation the rights to use, copy, modify, merge,\n* publish, distribute, sublicense, and/or sell copies of the Software,\n* and to permit persons to whom the Software is furnished to do so,\n* subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.6630859375,
          "content": "# This is not the build system, just a helper to run common development commands.\n# Make sure to first initialize the build system with:\n#     make dev-install\n\nPYTHON := python\nBUILD_DIR := $(shell cd python; $(PYTHON) -c 'from build_helpers import get_cmake_dir; print(get_cmake_dir())')\nTRITON_OPT := $(BUILD_DIR)/bin/triton-opt\n\n.PHONY: all\nall:\n\tninja -C $(BUILD_DIR)\n\n.PHONY: triton-opt\ntriton-opt:\n\tninja -C $(BUILD_DIR) triton-opt\n\n.PHONY: test-lit\ntest-lit:\n\tninja -C $(BUILD_DIR) check-triton-lit-tests\n\n.PHONY: test-cpp\ntest-cpp:\n\tninja -C $(BUILD_DIR) check-triton-unit-tests\n\n.PHONY: test-python\ntest-python: all\n\t$(PYTHON) -m pytest python/test/unit\n\n.PHONY: test\ntest: test-lit test-cpp test-python\n\n.PHONY: dev-install\ndev-install:\n\t# build-time dependencies\n\t$(PYTHON) -m pip install ninja cmake wheel pybind11\n\t# test dependencies\n\t$(PYTHON) -m pip install scipy numpy torch pytest lit pandas matplotlib\n\t$(PYTHON) -m pip install -e python --no-build-isolation -v\n\n.PHONY: golden-samples\ngolden-samples: triton-opt\n\t$(TRITON_OPT) test/TritonGPU/samples/simulated-grouped-gemm.mlir.in -tritongpu-loop-scheduling -tritongpu-pipeline -canonicalize | \\\n\t\t$(PYTHON) utils/generate-test-checks.py --source test/TritonGPU/samples/simulated-grouped-gemm.mlir.in --source_delim_regex=\"\\bmodule\" \\\n\t\t-o test/TritonGPU/samples/simulated-grouped-gemm.mlir\n\t$(TRITON_OPT) test/TritonGPU/samples/descriptor-matmul-pipeline.mlir.in -tritongpu-loop-scheduling -tritongpu-pipeline -canonicalize | \\\n\t\t$(PYTHON) utils/generate-test-checks.py --source test/TritonGPU/samples/descriptor-matmul-pipeline.mlir.in --source_delim_regex=\"\\bmodule\" \\\n\t\t-o test/TritonGPU/samples/descriptor-matmul-pipeline.mlir\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.427734375,
          "content": "<div align=\"center\">\n  <img src=\"https://lh5.googleusercontent.com/wzQKEsTFkrgNQO9JjhGH5wFvslJr1saLtLaJ_a6Fp_gNENpvt3VG7BmztwngU9hFJaU4CPwGiw1opQtDvTkLrxWRbO_a12Q-pdESWHgtmheIHcPbOL5ZMC4TSiJVe5ty1w=w3517\" alt=\"Triton logo\">\n</div>\n\n| **`Documentation`** | **`Nightly Wheels`** |\n|-------------------- | -------------------- |\n| [![Documentation](https://github.com/triton-lang/triton/actions/workflows/documentation.yml/badge.svg)](https://triton-lang.org/) | [![Wheels](https://github.com/triton-lang/triton/actions/workflows/wheels.yml/badge.svg?branch=release/2.0.x)](https://github.com/triton-lang/triton/actions/workflows/wheels.yml) |\n\n# Triton\n\nThis is the development repository of Triton, a language and compiler for writing highly efficient custom Deep-Learning primitives. The aim of Triton is to provide an open-source environment to write fast code at higher productivity than CUDA, but also with higher flexibility than other existing DSLs.\n\nThe foundations of this project are described in the following MAPL2019 publication: [Triton: An Intermediate Language and Compiler for Tiled Neural Network Computations](http://www.eecs.harvard.edu/~htk/publication/2019-mapl-tillet-kung-cox.pdf). Please consider citing this work if you use Triton!\n\nThe [official documentation](https://triton-lang.org) contains installation instructions and tutorials.  See also these third-party [Triton puzzles](https://github.com/srush/Triton-Puzzles), which can all be run using the Triton interpreter -- no GPU required.\n\n# Quick Installation\n\nYou can install the latest stable release of Triton from pip:\n\n```shell\npip install triton\n```\n\nBinary wheels are available for CPython 3.8-3.12 and PyPy 3.8-3.9.\n\nAnd the latest nightly release:\n\n```shell\npip install -U --index-url https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/Triton-Nightly/pypi/simple/ triton-nightly\n```\n\n# Install from source\n\n```shell\ngit clone https://github.com/triton-lang/triton.git;\ncd triton;\n\npip install ninja cmake wheel pybind11; # build-time dependencies\npip install -e python\n```\n\nOr with a virtualenv:\n\n```shell\ngit clone https://github.com/triton-lang/triton.git;\ncd triton;\n\npython -m venv .venv --prompt triton;\nsource .venv/bin/activate;\n\npip install ninja cmake wheel pybind11; # build-time dependencies\npip install -e python\n```\n\n# Building with a custom LLVM\n\nTriton uses LLVM to generate code for GPUs and CPUs.  Normally, the Triton build\ndownloads a prebuilt LLVM, but you can also build LLVM from source and use that.\n\nLLVM does not have a stable API, so the Triton build will not work at an\narbitrary LLVM version.\n\n1. Find the version of LLVM that Triton builds against.  Check\n`cmake/llvm-hash.txt` to see the current version. For example, if it says:\n       49af6502c6dcb4a7f7520178bd14df396f78240c\n\n   This means that the version of Triton you have builds against\n   [LLVM](https://github.com/llvm/llvm-project) 49af6502.\n\n2. `git checkout` LLVM at this revision.  Optionally, make additional\n   modifications to LLVM.\n\n3. [Build LLVM](https://llvm.org/docs/CMake.html).  For example, you might run\n\n       $ cd $HOME/llvm-project  # your clone of LLVM.\n       $ mkdir build\n       $ cd build\n       $ cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON ../llvm -DLLVM_ENABLE_PROJECTS=\"mlir;llvm\" -DLLVM_TARGETS_TO_BUILD=\"host;NVPTX;AMDGPU\"\n       $ ninja\n\n4. Grab a snack, this will take a while.\n\n5. Build Triton as above, but set the following environment variables.\n\n       # Modify as appropriate to point to your LLVM build.\n       $ export LLVM_BUILD_DIR=$HOME/llvm-project/build\n\n       $ cd <triton install>\n       $ LLVM_INCLUDE_DIRS=$LLVM_BUILD_DIR/include \\\n         LLVM_LIBRARY_DIR=$LLVM_BUILD_DIR/lib \\\n         LLVM_SYSPATH=$LLVM_BUILD_DIR \\\n         pip install -e python\n\n# Tips for building\n\n- Set `TRITON_BUILD_WITH_CLANG_LLD=true` as an environment variable to use clang\n  and lld.  lld in particular results in faster builds.\n\n- Set `TRITON_BUILD_WITH_CCACHE=true` to build with ccache.\n\n- Set `TRITON_HOME=/some/path` to change the location of the `.triton`\n  directory where Triton's cache is located and downloads are stored\n  during the build. By default, this is the user's home directory. It\n  can be changed anytime.\n\n- Pass `--no-build-isolation` to `pip install` to make nop builds faster.\n  Without this, every invocation of `pip install` uses a different symlink to\n  cmake, and this forces ninja to rebuild most of the `.a` files.\n\n- vscode intellisense has some difficulty figuring out how to build Triton's C++\n  (probably because, in our build, users don't invoke cmake directly, but\n  instead use setup.py).  Teach vscode how to compile Triton as follows.\n\n    - Do a local build. Run command `pip install -e python`\n    - Get the full path to the `compile_commands.json` file produced by the build:\n      `find python/build -name 'compile_commands.json' | xargs readlink -f`.\n      You might get a full path similar to `/Users/{username}/triton/python/build/cmake.macosx-11.1-arm64-cpython-3.12/compile_commands.json`\n    - In vscode, install the\n      [C/C++\n      extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools),\n      then open the command palette (`Shift + Command + P` on Mac, or `Shift +\n      Ctrl + P` on Windows/Linux) and open `C/C++: Edit Configurations (UI)`.\n    - Open \"Advanced Settings\" and paste the full path to\n      `compile_commands.json` into the \"Compile Commands\" textbox.\n\n# Running tests\n\nThere currently isn't a turnkey way to run all the Triton tests, but you can\nfollow the following recipe.\n\n```shell\n# One-time setup.  Note this will reinstall local Triton because torch\n# overwrites it with the public version.\n$ make dev-install\n\n# To run all tests (requires a GPU)\n$ make test\n\n# Or, to run tests without a gpu\n$ make test-cpp test-lit\n```\n\n# Tips for hacking\n\nFor detailed instructions on how to debug Triton's frontend, please refer to this [tutorial](https://triton-lang.org/main/programming-guide/chapter-3/debugging.html). The following includes additional tips for hacking on Triton's backend.\n\n**Helpful environment variables**\n\n- `MLIR_ENABLE_DUMP=1` dumps the IR before every MLIR pass Triton runs, for all\n   kernels. Use `MLIR_ENABLE_DUMP=kernelName` to dump for a specific kernel only.\n  - Triton cache can interfere with the dump. In cases where `MLIR_ENABLE_DUMP=1` does not work, try cleaning your triton cache: `rm -r ~/.triton/cache/*`\n- `MLIR_DUMP_PATH` specifies where `MLIR_ENABLE_DUMP` will dump to. If unset will dump to stderr.\n- `LLVM_IR_ENABLE_DUMP=1` dumps the IR before every pass run over the LLVM IR.\n- `TRITON_REPRODUCER_PATH=<reproducer_path>` will generate an MLIR reproducer file\n  at `<reproducer_path>` before each MLIR compiler stage. If any of the stages fail,\n  `<reproducer_path>` will be a local MLIR reproducer captured right before the failing pass.\n- `TRITON_INTERPRET=1` uses the Triton interpreter instead of running on the\n  GPU.  You can insert Python breakpoints in your kernel code!\n- `TRITON_ENABLE_LLVM_DEBUG=1` passes `-debug` to LLVM, printing a lot of\n  debugging information to stdout.  If this is too noisy, run with just\n  `TRITON_LLVM_DEBUG_ONLY` instead to limit the output.\n\n  An alternative way to reduce output noisiness is running with\n  `LLVM_IR_ENABLE_DUMP=1`, extract the IR before the LLVM pass of interest, and\n  then run LLVM's `opt` standalone, perhaps passing `-debug-only=foo` on the\n  command line.\n- `TRITON_LLVM_DEBUG_ONLY=<comma-separated>` is the equivalent of LLVM's\n  `-debug-only` command-line option. This limits the LLVM debug output to\n  specific pass or component names (which are specified using `#define\n  DEBUG_TYPE` throughout LLVM and Triton) in order to allow the debug output to\n  be less noisy. `TRITON_LLVM_DEBUG_ONLY` allows for one or more comma\n  separated values to be specified (eg\n  `TRITON_LLVM_DEBUG_ONLY=\"tritongpu-remove-layout-conversions` or\n  `TRITON_LLVM_DEBUG_ONLY=\"tritongpu-remove-layout-conversions,regalloc\"`).\n- `TRITON_ENABLE_ASAN=1` invokes the LLVM address sanitizer for\n  memory leak and out of bounds access detection. Currently only supported on the AMD\n  backend. This must be run using the ASAN libraries documented [here](https://rocm.docs.amd.com/projects/llvm-project/en/latest/conceptual/using-gpu-sanitizer.html).\n\n  When enabling the address sanitizer it is recommended to disable various memory caching strategies\n  both within the ROCm stack and PyTorch. This will give the address sanitizer the best chance at finding the\n  memory fault where it originates. See this [test](https://github.com/triton-lang/triton/blob/main/third_party/amd/python/test/test_address_sanitizer.py) for more details.\n\n- `USE_IR_LOC={ttir,ttgir}` reparses the IR such that the location information\n  will be the line number of the IR file with that particular extension,\n  instead of line number of the python file. This can provide a direct mapping\n  from the IR to llir/ptx. When used with performance tools, it can provide a\n  breakdown on IR instructions.\n- `TRITON_PRINT_AUTOTUNING=1` prints out the best autotuning config and total time\n  spent for each kernel after autotuning is complete.\n- `DISABLE_LLVM_OPT` will disable llvm optimizations for make_llir and make_ptx\n  if its value is true when parsing as Bool. Otherwise, it will be parsed as a list\n  of flags to disable llvm optimizations. One usage case is\n  `DISABLE_LLVM_OPT=\"disable-lsr\"`\n  Loop strength reduction is known to cause up to 10% performance changes for\n  certain kernels with register pressure.\n- `TRITON_ALWAYS_COMPILE=1` forces to compile kernels regardless of cache hit.\n- `MLIR_ENABLE_TIMING` dumps the timing information for each MLIR pass.\n- `LLVM_ENABLE_TIMING` dumps the timing information for each LLVM pass.\n- `TRITON_DEFAULT_FP_FUSION` overrides the default behavior of allowing fp fusion (mul+add->fma).\n- `MLIR_ENABLE_REMARK` enables the performance warnings that are emitted as remarks.\n- `TRITON_KERNEL_DUMP` enables the dumping of the IR from each compilation stage and the final ptx/amdgcn.\n- `TRITON_DUMP_DIR` specifies the directory to save the dumped IR and ptx/amdgcn when `TRITON_KERNEL_DUMP` is set to 1.\n- `TRITON_KERNEL_OVERRIDE` enables the override of the compiled kernel with a user-specified IR/ptx/amdgcn at the beginning of each compilation stage.\n- `TRITON_OVERRIDE_DIR` specifies the directory from which to load the IR/ptx/amdgcn files when `TRITON_KERNEL_OVERRIDE` is set to 1.\n\n**Kernel Override Steps**\n\n```bash\nexport TRITON_ALWAYS_COMPILE=1\nexport TRITON_KERNEL_DUMP=1\nexport TRITON_DUMP_DIR=<dump_dir>\nexport TRITON_KERNEL_OVERRIDE=1\nexport TRITON_OVERRIDE_DIR=<override_dir>\n# Step 1: Run the kernel once to dump kernel's IRs and ptx/amdgcn in $TRITON_DUMP_DIR\n# Step 2: Copy $TRITON_DUMP_DIR/<kernel_hash> to $TRITON_OVERRIDE_DIR\n# Step 3: Delete the stages that you do not want to override and modify the stage you do want to override\n# Step 4: Run the kernel again to see the overridden result\n```\n\n\n# Changelog\n\nVersion 2.0 is out! New features include:\n\n- Many, many bug fixes\n- Performance improvements\n- Backend rewritten to use MLIR\n- Support for kernels that contain back-to-back matmuls (e.g., flash attention)\n\n# Contributing\n\nCommunity contributions are more than welcome, whether it be to fix bugs or to add new features at [github](https://github.com/triton-lang/triton/). For more detailed instructions, please visit our [contributor's guide](CONTRIBUTING.md).\n\n# Compatibility\n\nSupported Platforms:\n\n- Linux\n\nSupported Hardware:\n\n- NVIDIA GPUs (Compute Capability 8.0+)\n- AMD GPUs (ROCm 6.2+)\n- Under development: CPUs\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.771484375,
          "content": "[build-system]\nrequires = [\"setuptools>=40.8.0\", \"wheel\", \"cmake>=3.18\", \"ninja>=1.11.1\"]\n\n[tool.yapf]\nbased_on_style = \"pep8\"\ncolumn_limit = 120\ndisable_split_list_with_comment = true\neach_dict_entry_on_separate_line=false\nsplit_before_named_assigns = false\nsplit_complex_comprehension = true\n\n[tool.yapfignore]\nignore_patterns = [\n    # This exclusion is also specified in .pre-commit-config.yaml.\n    # - We put it here because if you run yapf directly, we want it to skip the\n    #   file.\n    # - We also put it in .pre-commit-config because yapf raises an error if\n    #   pre-commit runs it but all of the files it might touch are ignored!\n    \"python/test/unit/language/test_line_info.py\"\n]\n\n[tool.ruff]\nline-length = 120\n\n[tool.ruff.lint]\nignore = [\"E501\", \"E701\", \"E731\", \"E741\"]\n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "unittest",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}