{
  "metadata": {
    "timestamp": 1736566271018,
    "page": 19,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fmtlib/fmt",
      "stars": 21119,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.38671875,
          "content": "# Run manually to reformat a file:\n# clang-format -i --style=file <file>\nLanguage: Cpp\nBasedOnStyle: Google\nIndentPPDirectives: AfterHash\nIndentCaseLabels: false\nAlwaysBreakTemplateDeclarations: false\nDerivePointerAlignment: false\nAllowShortCaseLabelsOnASingleLine: true\nAlignConsecutiveShortCaseStatements:\n  Enabled: true\n  AcrossEmptyLines: true\n  AcrossComments: true\n  AlignCaseColons: false"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2197265625,
          "content": "*.a\n*.so*\n*.xcodeproj\n*~\n.vscode/\n/CMakeScripts\n/Testing\n/_CPack_Packages\n/install_manifest.txt\nCMakeCache.txt\nCMakeFiles\nCPack*.cmake\nCTestTestfile.cmake\nFMT.build\nMakefile\nbin/\nbuild/\ncmake_install.cmake\nfmt-*.cmake\nfmt.pc\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 19.017578125,
          "content": "cmake_minimum_required(VERSION 3.8...3.28)\n\n# Fallback for using newer policies on CMake <3.12.\nif (${CMAKE_VERSION} VERSION_LESS 3.12)\n  cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})\nendif ()\n\n# Determine if fmt is built as a subproject (using add_subdirectory)\n# or if it is the master project.\nif (NOT DEFINED FMT_MASTER_PROJECT)\n  set(FMT_MASTER_PROJECT OFF)\n  if (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n    set(FMT_MASTER_PROJECT ON)\n    message(STATUS \"CMake version: ${CMAKE_VERSION}\")\n  endif ()\nendif ()\n\n# Joins arguments and places the results in ${result_var}.\nfunction(join result_var)\n  set(result \"\")\n  foreach (arg ${ARGN})\n    set(result \"${result}${arg}\")\n  endforeach ()\n  set(${result_var} \"${result}\" PARENT_SCOPE)\nendfunction()\n\n# DEPRECATED! Should be merged into add_module_library.\nfunction(enable_module target)\n  if (MSVC)\n    set(BMI ${CMAKE_CURRENT_BINARY_DIR}/${target}.ifc)\n    target_compile_options(${target}\n      PRIVATE /interface /ifcOutput ${BMI}\n      INTERFACE /reference fmt=${BMI})\n    set_target_properties(${target} PROPERTIES ADDITIONAL_CLEAN_FILES ${BMI})\n    set_source_files_properties(${BMI} PROPERTIES GENERATED ON)\n  endif ()\nendfunction()\n\nset(FMT_USE_CMAKE_MODULES FALSE)\nif (CMAKE_VERSION VERSION_GREATER_EQUAL 3.28 AND\n    CMAKE_GENERATOR STREQUAL \"Ninja\")\n  set(FMT_USE_CMAKE_MODULES TRUE)\nendif ()\n\n# Adds a library compiled with C++20 module support.\n# `enabled` is a CMake variables that specifies if modules are enabled.\n# If modules are disabled `add_module_library` falls back to creating a\n# non-modular library.\n#\n# Usage:\n#   add_module_library(<name> [sources...] FALLBACK [sources...] [IF enabled])\nfunction(add_module_library name)\n  cmake_parse_arguments(AML \"\" \"IF\" \"FALLBACK\" ${ARGN})\n  set(sources ${AML_UNPARSED_ARGUMENTS})\n\n  add_library(${name})\n  set_target_properties(${name} PROPERTIES LINKER_LANGUAGE CXX)\n\n  if (NOT ${${AML_IF}})\n    # Create a non-modular library.\n    target_sources(${name} PRIVATE ${AML_FALLBACK})\n    set_target_properties(${name} PROPERTIES CXX_SCAN_FOR_MODULES OFF)\n    return()\n  endif ()\n\n  # Modules require C++20.\n  target_compile_features(${name} PUBLIC cxx_std_20)\n  if (CMAKE_COMPILER_IS_GNUCXX)\n    target_compile_options(${name} PUBLIC -fmodules-ts)\n  endif ()\n\n  target_compile_definitions(${name} PRIVATE FMT_MODULE)\n\n  if (FMT_USE_CMAKE_MODULES)\n    target_sources(${name} PUBLIC FILE_SET fmt TYPE CXX_MODULES\n                   FILES ${sources})\n  else()\n    # `std` is affected by CMake options and may be higher than C++20.\n    get_target_property(std ${name} CXX_STANDARD)\n\n    if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n      set(pcms)\n      foreach (src ${sources})\n        get_filename_component(pcm ${src} NAME_WE)\n        set(pcm ${pcm}.pcm)\n\n        # Propagate -fmodule-file=*.pcm to targets that link with this library.\n        target_compile_options(\n          ${name} PUBLIC -fmodule-file=${CMAKE_CURRENT_BINARY_DIR}/${pcm})\n\n        # Use an absolute path to prevent target_link_libraries prepending -l\n        # to it.\n        set(pcms ${pcms} ${CMAKE_CURRENT_BINARY_DIR}/${pcm})\n        add_custom_command(\n          OUTPUT ${pcm}\n          COMMAND ${CMAKE_CXX_COMPILER}\n                  -std=c++${std} -x c++-module --precompile -c\n                  -o ${pcm} ${CMAKE_CURRENT_SOURCE_DIR}/${src}\n                  \"-I$<JOIN:$<TARGET_PROPERTY:${name},INCLUDE_DIRECTORIES>,;-I>\"\n          # Required by the -I generator expression above.\n          COMMAND_EXPAND_LISTS\n          DEPENDS ${src})\n      endforeach ()\n\n      # Add .pcm files as sources to make sure they are built before the library.\n      set(sources)\n      foreach (pcm ${pcms})\n        get_filename_component(pcm_we ${pcm} NAME_WE)\n        set(obj ${pcm_we}.o)\n        # Use an absolute path to prevent target_link_libraries prepending -l.\n        set(sources ${sources} ${pcm} ${CMAKE_CURRENT_BINARY_DIR}/${obj})\n        add_custom_command(\n          OUTPUT ${obj}\n          COMMAND ${CMAKE_CXX_COMPILER} $<TARGET_PROPERTY:${name},COMPILE_OPTIONS>\n                  -c -o ${obj} ${pcm}\n          DEPENDS ${pcm})\n      endforeach ()\n    endif ()\n    target_sources(${name} PRIVATE ${sources})\n  endif()\nendfunction()\n\ninclude(CMakeParseArguments)\n\n# Sets a cache variable with a docstring joined from multiple arguments:\n#   set(<variable> <value>... CACHE <type> <docstring>...)\n# This allows splitting a long docstring for readability.\nfunction(set_verbose)\n  # cmake_parse_arguments is broken in CMake 3.4 (cannot parse CACHE) so use\n  # list instead.\n  list(GET ARGN 0 var)\n  list(REMOVE_AT ARGN 0)\n  list(GET ARGN 0 val)\n  list(REMOVE_AT ARGN 0)\n  list(REMOVE_AT ARGN 0)\n  list(GET ARGN 0 type)\n  list(REMOVE_AT ARGN 0)\n  join(doc ${ARGN})\n  set(${var} ${val} CACHE ${type} ${doc})\nendfunction()\n\n# Set the default CMAKE_BUILD_TYPE to Release.\n# This should be done before the project command since the latter can set\n# CMAKE_BUILD_TYPE itself (it does so for nmake).\nif (FMT_MASTER_PROJECT AND NOT CMAKE_BUILD_TYPE)\n  set_verbose(CMAKE_BUILD_TYPE Release CACHE STRING\n              \"Choose the type of build, options are: None(CMAKE_CXX_FLAGS or \"\n              \"CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel.\")\nendif ()\n\nproject(FMT CXX)\ninclude(GNUInstallDirs)\nset_verbose(FMT_INC_DIR ${CMAKE_INSTALL_INCLUDEDIR} CACHE STRING\n            \"Installation directory for include files, a relative path that \"\n            \"will be joined with ${CMAKE_INSTALL_PREFIX} or an absolute path.\")\n\noption(FMT_PEDANTIC \"Enable extra warnings and expensive tests.\" OFF)\noption(FMT_WERROR \"Halt the compilation with an error on compiler warnings.\"\n       OFF)\n\n# Options that control generation of various targets.\noption(FMT_DOC \"Generate the doc target.\" ${FMT_MASTER_PROJECT})\noption(FMT_INSTALL \"Generate the install target.\" ON)\noption(FMT_TEST \"Generate the test target.\" ${FMT_MASTER_PROJECT})\noption(FMT_FUZZ \"Generate the fuzz target.\" OFF)\noption(FMT_CUDA_TEST \"Generate the cuda-test target.\" OFF)\noption(FMT_OS \"Include OS-specific APIs.\" ON)\noption(FMT_MODULE \"Build a module instead of a traditional library.\" OFF)\noption(FMT_SYSTEM_HEADERS \"Expose headers with marking them as system.\" OFF)\noption(FMT_UNICODE \"Enable Unicode support.\" ON)\n\nif (FMT_TEST AND FMT_MODULE)\n  # The tests require {fmt} to be compiled as traditional library\n  message(STATUS \"Testing is incompatible with build mode 'module'.\")\nendif ()\nset(FMT_SYSTEM_HEADERS_ATTRIBUTE \"\")\nif (FMT_SYSTEM_HEADERS)\n  set(FMT_SYSTEM_HEADERS_ATTRIBUTE SYSTEM)\nendif ()\nif (CMAKE_SYSTEM_NAME STREQUAL \"MSDOS\")\n  set(FMT_TEST OFF)\n  message(STATUS \"MSDOS is incompatible with gtest\")\nendif ()\n\n# Get version from base.h\nfile(READ include/fmt/base.h base_h)\nif (NOT base_h MATCHES \"FMT_VERSION ([0-9]+)([0-9][0-9])([0-9][0-9])\")\n  message(FATAL_ERROR \"Cannot get FMT_VERSION from base.h.\")\nendif ()\n# Use math to skip leading zeros if any.\nmath(EXPR CPACK_PACKAGE_VERSION_MAJOR ${CMAKE_MATCH_1})\nmath(EXPR CPACK_PACKAGE_VERSION_MINOR ${CMAKE_MATCH_2})\nmath(EXPR CPACK_PACKAGE_VERSION_PATCH ${CMAKE_MATCH_3})\njoin(FMT_VERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.\n                 ${CPACK_PACKAGE_VERSION_PATCH})\nmessage(STATUS \"{fmt} version: ${FMT_VERSION}\")\n\nmessage(STATUS \"Build type: ${CMAKE_BUILD_TYPE}\")\n\nif (NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)\nendif ()\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}\n  \"${CMAKE_CURRENT_SOURCE_DIR}/support/cmake\")\n\ninclude(CheckCXXCompilerFlag)\ninclude(JoinPaths)\n\nif (FMT_MASTER_PROJECT AND NOT DEFINED CMAKE_CXX_VISIBILITY_PRESET)\n  set_verbose(CMAKE_CXX_VISIBILITY_PRESET hidden CACHE STRING\n              \"Preset for the export of private symbols\")\n  set_property(CACHE CMAKE_CXX_VISIBILITY_PRESET PROPERTY STRINGS\n               hidden default)\nendif ()\n\nif (FMT_MASTER_PROJECT AND NOT DEFINED CMAKE_VISIBILITY_INLINES_HIDDEN)\n  set_verbose(CMAKE_VISIBILITY_INLINES_HIDDEN ON CACHE BOOL\n              \"Whether to add a compile flag to hide symbols of inline functions\")\nendif ()\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n  set(PEDANTIC_COMPILE_FLAGS -pedantic-errors -Wall -Wextra -pedantic\n      -Wold-style-cast -Wundef\n      -Wredundant-decls -Wwrite-strings -Wpointer-arith\n      -Wcast-qual -Wformat=2 -Wmissing-include-dirs\n      -Wcast-align\n      -Wctor-dtor-privacy -Wdisabled-optimization\n      -Winvalid-pch -Woverloaded-virtual\n      -Wconversion -Wundef\n      -Wno-ctor-dtor-privacy -Wno-format-nonliteral)\n  if (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.6)\n      set(PEDANTIC_COMPILE_FLAGS ${PEDANTIC_COMPILE_FLAGS}\n         -Wno-dangling-else -Wno-unused-local-typedefs)\n  endif ()\n  if (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)\n      set(PEDANTIC_COMPILE_FLAGS ${PEDANTIC_COMPILE_FLAGS} -Wdouble-promotion\n          -Wtrampolines -Wzero-as-null-pointer-constant -Wuseless-cast\n          -Wvector-operation-performance -Wsized-deallocation -Wshadow)\n  endif ()\n  if (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0)\n      set(PEDANTIC_COMPILE_FLAGS ${PEDANTIC_COMPILE_FLAGS} -Wshift-overflow=2\n          -Wduplicated-cond)\n      # Workaround for GCC regression\n      # [12/13/14/15 regression] New (since gcc 12) false positive null-dereference in vector.resize\n      # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108860\n      if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 12.0)\n        set(PEDANTIC_COMPILE_FLAGS ${PEDANTIC_COMPILE_FLAGS} -Wnull-dereference)\n      endif ()\n  endif ()\n  set(WERROR_FLAG -Werror)\nendif ()\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  set(PEDANTIC_COMPILE_FLAGS -Wall -Wextra -pedantic -Wconversion -Wundef\n      -Wdeprecated -Wweak-vtables -Wshadow\n      -Wno-gnu-zero-variadic-macro-arguments)\n  check_cxx_compiler_flag(-Wzero-as-null-pointer-constant HAS_NULLPTR_WARNING)\n  if (HAS_NULLPTR_WARNING)\n    set(PEDANTIC_COMPILE_FLAGS ${PEDANTIC_COMPILE_FLAGS}\n        -Wzero-as-null-pointer-constant)\n  endif ()\n  set(WERROR_FLAG -Werror)\nendif ()\n\nif (MSVC)\n  set(PEDANTIC_COMPILE_FLAGS /W3)\n  set(WERROR_FLAG /WX)\nendif ()\n\nif (FMT_MASTER_PROJECT AND CMAKE_GENERATOR MATCHES \"Visual Studio\")\n  # If Microsoft SDK is installed create script run-msbuild.bat that\n  # calls SetEnv.cmd to set up build environment and runs msbuild.\n  # It is useful when building Visual Studio projects with the SDK\n  # toolchain rather than Visual Studio.\n  include(FindSetEnv)\n  if (WINSDK_SETENV)\n    set(MSBUILD_SETUP \"call \\\"${WINSDK_SETENV}\\\"\")\n  endif ()\n  # Set FrameworkPathOverride to get rid of MSB3644 warnings.\n  join(netfxpath\n       \"C:\\\\Program Files\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\\"\n       \".NETFramework\\\\v4.0\")\n  file(WRITE run-msbuild.bat \"\n    ${MSBUILD_SETUP}\n    ${CMAKE_MAKE_PROGRAM} -p:FrameworkPathOverride=\\\"${netfxpath}\\\" %*\")\nendif ()\n\nfunction(add_headers VAR)\n  set(headers ${${VAR}})\n  foreach (header ${ARGN})\n    set(headers ${headers} include/fmt/${header})\n  endforeach()\n  set(${VAR} ${headers} PARENT_SCOPE)\nendfunction()\n\n# Define the fmt library, its includes and the needed defines.\nadd_headers(FMT_HEADERS args.h base.h chrono.h color.h compile.h core.h format.h\n                        format-inl.h os.h ostream.h printf.h ranges.h std.h\n                        xchar.h)\nset(FMT_SOURCES src/format.cc)\n\nadd_module_library(fmt src/fmt.cc FALLBACK\n                   ${FMT_SOURCES} ${FMT_HEADERS} README.md ChangeLog.md\n                   IF FMT_MODULE)\nadd_library(fmt::fmt ALIAS fmt)\nif (FMT_MODULE)\n  enable_module(fmt)\nelseif (FMT_OS)\n  target_sources(fmt PRIVATE src/os.cc)\nelse()\n  target_compile_definitions(fmt PRIVATE FMT_OS=0)\nendif ()\n\nif (FMT_WERROR)\n  target_compile_options(fmt PRIVATE ${WERROR_FLAG})\nendif ()\nif (FMT_PEDANTIC)\n  target_compile_options(fmt PRIVATE ${PEDANTIC_COMPILE_FLAGS})\nendif ()\n\nif (cxx_std_11 IN_LIST CMAKE_CXX_COMPILE_FEATURES)\n  target_compile_features(fmt PUBLIC cxx_std_11)\nelse ()\n  message(WARNING \"Feature cxx_std_11 is unknown for the CXX compiler\")\nendif ()\n\ntarget_include_directories(fmt ${FMT_SYSTEM_HEADERS_ATTRIBUTE} BEFORE PUBLIC\n  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\n  $<INSTALL_INTERFACE:${FMT_INC_DIR}>)\n\nset(FMT_DEBUG_POSTFIX d CACHE STRING \"Debug library postfix.\")\n\nset_target_properties(fmt PROPERTIES\n  VERSION ${FMT_VERSION} SOVERSION ${CPACK_PACKAGE_VERSION_MAJOR}\n  PUBLIC_HEADER \"${FMT_HEADERS}\"\n  DEBUG_POSTFIX \"${FMT_DEBUG_POSTFIX}\"\n\n  # Workaround for Visual Studio 2017:\n  # Ensure the .pdb is created with the same name and in the same directory\n  # as the .lib. Newer VS versions already do this by default, but there is no\n  # harm in setting it for those too. Ignored by other generators.\n  COMPILE_PDB_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n  COMPILE_PDB_NAME \"fmt\"\n  COMPILE_PDB_NAME_DEBUG \"fmt${FMT_DEBUG_POSTFIX}\")\n\n# Set FMT_LIB_NAME for pkg-config fmt.pc. We cannot use the OUTPUT_NAME target\n# property because it's not set by default.\nset(FMT_LIB_NAME fmt)\nif (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  set(FMT_LIB_NAME ${FMT_LIB_NAME}${FMT_DEBUG_POSTFIX})\nendif ()\n\nif (BUILD_SHARED_LIBS)\n  target_compile_definitions(fmt PRIVATE FMT_LIB_EXPORT INTERFACE FMT_SHARED)\nendif ()\nif (FMT_SAFE_DURATION_CAST)\n  target_compile_definitions(fmt PUBLIC FMT_SAFE_DURATION_CAST)\nendif ()\n\nadd_library(fmt-header-only INTERFACE)\nadd_library(fmt::fmt-header-only ALIAS fmt-header-only)\n\nif (NOT MSVC)\n  # Unicode is always supported on compilers other than MSVC.\nelseif (FMT_UNICODE)\n  # Unicode support requires compiling with /utf-8.\n  target_compile_options(fmt PUBLIC $<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:MSVC>>:/utf-8>)\n  target_compile_options(fmt-header-only INTERFACE $<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:MSVC>>:/utf-8>)\nelse ()\n  target_compile_definitions(fmt PUBLIC FMT_UNICODE=0)\nendif ()\n\ntarget_compile_definitions(fmt-header-only INTERFACE FMT_HEADER_ONLY=1)\ntarget_compile_features(fmt-header-only INTERFACE cxx_std_11)\n\ntarget_include_directories(fmt-header-only\n  ${FMT_SYSTEM_HEADERS_ATTRIBUTE} BEFORE INTERFACE\n  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\n  $<INSTALL_INTERFACE:${FMT_INC_DIR}>)\n\n# Install targets.\nif (FMT_INSTALL)\n  include(CMakePackageConfigHelpers)\n  set_verbose(FMT_CMAKE_DIR ${CMAKE_INSTALL_LIBDIR}/cmake/fmt CACHE STRING\n              \"Installation directory for cmake files, a relative path that \"\n              \"will be joined with ${CMAKE_INSTALL_PREFIX} or an absolute \"\n              \"path.\")\n  set(version_config ${PROJECT_BINARY_DIR}/fmt-config-version.cmake)\n  set(project_config ${PROJECT_BINARY_DIR}/fmt-config.cmake)\n  set(pkgconfig ${PROJECT_BINARY_DIR}/fmt.pc)\n  set(targets_export_name fmt-targets)\n\n  set_verbose(FMT_LIB_DIR ${CMAKE_INSTALL_LIBDIR} CACHE STRING\n              \"Installation directory for libraries, a relative path that \"\n              \"will be joined to ${CMAKE_INSTALL_PREFIX} or an absolute path.\")\n\n  set_verbose(FMT_PKGCONFIG_DIR ${CMAKE_INSTALL_LIBDIR}/pkgconfig CACHE STRING\n              \"Installation directory for pkgconfig (.pc) files, a relative \"\n              \"path that will be joined with ${CMAKE_INSTALL_PREFIX} or an \"\n              \"absolute path.\")\n\n  # Generate the version, config and target files into the build directory.\n  write_basic_package_version_file(\n    ${version_config}\n    VERSION ${FMT_VERSION}\n    COMPATIBILITY AnyNewerVersion)\n\n  join_paths(libdir_for_pc_file \"\\${exec_prefix}\" \"${FMT_LIB_DIR}\")\n  join_paths(includedir_for_pc_file \"\\${prefix}\" \"${FMT_INC_DIR}\")\n\n  configure_file(\n    \"${PROJECT_SOURCE_DIR}/support/cmake/fmt.pc.in\"\n    \"${pkgconfig}\"\n    @ONLY)\n  configure_package_config_file(\n    ${PROJECT_SOURCE_DIR}/support/cmake/fmt-config.cmake.in\n    ${project_config}\n    INSTALL_DESTINATION ${FMT_CMAKE_DIR})\n\n  set(INSTALL_TARGETS fmt fmt-header-only)\n\n  set(INSTALL_FILE_SET)\n  if (FMT_USE_CMAKE_MODULES)\n    set(INSTALL_FILE_SET FILE_SET fmt DESTINATION \"${FMT_INC_DIR}/fmt\")\n  endif()\n\n  # Install the library and headers.\n  install(TARGETS ${INSTALL_TARGETS}\n          COMPONENT core\n          EXPORT ${targets_export_name}\n          LIBRARY DESTINATION ${FMT_LIB_DIR}\n          ARCHIVE DESTINATION ${FMT_LIB_DIR}\n          PUBLIC_HEADER DESTINATION \"${FMT_INC_DIR}/fmt\"\n          RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n          ${INSTALL_FILE_SET})\n\n  # Use a namespace because CMake provides better diagnostics for namespaced\n  # imported targets.\n  export(TARGETS ${INSTALL_TARGETS} NAMESPACE fmt::\n         FILE ${PROJECT_BINARY_DIR}/${targets_export_name}.cmake)\n\n  # Install version, config and target files.\n  install(FILES ${project_config} ${version_config}\n          DESTINATION ${FMT_CMAKE_DIR}\n          COMPONENT core)\n  install(EXPORT ${targets_export_name} DESTINATION ${FMT_CMAKE_DIR}\n          NAMESPACE fmt::\n          COMPONENT core)\n\n  install(FILES \"${pkgconfig}\" DESTINATION \"${FMT_PKGCONFIG_DIR}\"\n          COMPONENT core)\nendif ()\n\nfunction(add_doc_target)\n  find_program(DOXYGEN doxygen\n    PATHS \"$ENV{ProgramFiles}/doxygen/bin\"\n          \"$ENV{ProgramFiles\\(x86\\)}/doxygen/bin\")\n  if (NOT DOXYGEN)\n    message(STATUS \"Target 'doc' disabled because doxygen not found\")\n    return ()\n  endif ()\n\n  find_program(MKDOCS mkdocs)\n  if (NOT MKDOCS)\n    message(STATUS \"Target 'doc' disabled because mkdocs not found\")\n    return ()\n  endif ()\n\n  set(sources )\n  foreach (source api.md index.md syntax.md get-started.md fmt.css fmt.js)\n    set(sources ${sources} doc/${source})\n  endforeach()\n\n  add_custom_target(\n    doc\n    COMMAND\n      ${CMAKE_COMMAND}\n        -E env PYTHONPATH=${CMAKE_CURRENT_SOURCE_DIR}/support/python\n        ${MKDOCS} build -f ${CMAKE_CURRENT_SOURCE_DIR}/support/mkdocs.yml\n        # MkDocs requires the site dir to be outside of the doc dir.\n                        --site-dir ${CMAKE_CURRENT_BINARY_DIR}/doc-html\n                        --no-directory-urls\n    SOURCES ${sources})\n\n  include(GNUInstallDirs)\n  install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc-html/\n          DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/doc/fmt\n          COMPONENT doc OPTIONAL)\nendfunction()\n\nif (FMT_DOC)\n  add_doc_target()\nendif ()\n\nif (FMT_TEST)\n  enable_testing()\n  add_subdirectory(test)\nendif ()\n\n# Control fuzzing independent of the unit tests.\nif (FMT_FUZZ)\n  add_subdirectory(test/fuzzing)\n\n  # The FMT_FUZZ macro is used to prevent resource exhaustion in fuzzing\n  # mode and make fuzzing practically possible. It is similar to\n  # FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION but uses a different name to\n  # avoid interfering with fuzzing of projects that use {fmt}.\n  # See also https://llvm.org/docs/LibFuzzer.html#fuzzer-friendly-build-mode.\n  target_compile_definitions(fmt PUBLIC FMT_FUZZ)\nendif ()\n\nset(gitignore ${PROJECT_SOURCE_DIR}/.gitignore)\nif (FMT_MASTER_PROJECT AND EXISTS ${gitignore})\n  # Get the list of ignored files from .gitignore.\n  file (STRINGS ${gitignore} lines)\n  list(REMOVE_ITEM lines /doc/html)\n  foreach (line ${lines})\n    string(REPLACE \".\" \"[.]\" line \"${line}\")\n    string(REPLACE \"*\" \".*\" line \"${line}\")\n    set(ignored_files ${ignored_files} \"${line}$\" \"${line}/\")\n  endforeach ()\n  set(ignored_files ${ignored_files} /.git /build/doxyxml .vagrant)\n\n  set(CPACK_SOURCE_GENERATOR ZIP)\n  set(CPACK_SOURCE_IGNORE_FILES ${ignored_files})\n  set(CPACK_SOURCE_PACKAGE_FILE_NAME fmt-${FMT_VERSION})\n  set(CPACK_PACKAGE_NAME fmt)\n  set(CPACK_RESOURCE_FILE_README ${PROJECT_SOURCE_DIR}/README.md)\n  include(CPack)\nendif ()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.693359375,
          "content": "Contributing to {fmt}\n=====================\n\nBy submitting a pull request or a patch, you represent that you have the right\nto license your contribution to the {fmt} project owners and the community,\nagree that your contributions are licensed under the {fmt} license, and agree\nto future changes to the licensing.\n\nAll C++ code must adhere to [Google C++ Style Guide](\nhttps://google.github.io/styleguide/cppguide.html) with the following\nexceptions:\n\n* Exceptions are permitted\n* snake_case should be used instead of UpperCamelCase for function and type\n  names\n\nAll documentation must adhere to the [Google Developer Documentation Style\nGuide](https://developers.google.com/style).\n\nThanks for contributing!\n"
        },
        {
          "name": "ChangeLog.md",
          "type": "blob",
          "size": 102.5361328125,
          "content": "# 11.1.1 - 2024-12-27\n\n- Fixed ABI compatibility with earlier 11.x versions\n  (https://github.com/fmtlib/fmt/issues/4278).\n\n- Defined CMake components (`core` and `doc`) to allow docs to be installed\n  separately (https://github.com/fmtlib/fmt/pull/4276).\n  Thanks @carlsmedstad.\n\n# 11.1.0 - 2024-12-25\n\n- Improved C++20 module support\n  (https://github.com/fmtlib/fmt/issues/4081,\n  https://github.com/fmtlib/fmt/pull/4083,\n  https://github.com/fmtlib/fmt/pull/4084,\n  https://github.com/fmtlib/fmt/pull/4152,\n  https://github.com/fmtlib/fmt/issues/4153,\n  https://github.com/fmtlib/fmt/pull/4169,\n  https://github.com/fmtlib/fmt/issues/4190,\n  https://github.com/fmtlib/fmt/issues/4234,\n  https://github.com/fmtlib/fmt/pull/4239).\n  Thanks @kamrann and @Arghnews.\n\n- Reduced debug (unoptimized) binary code size and the number of template\n  instantiations when passing formatting arguments. For example, unoptimized\n  binary code size for `fmt::print(\"{}\", 42)` was reduced by ~40% on GCC and\n  ~60% on clang (x86-64).\n\n  GCC:\n  - Before: 161 instructions of which 105 are in reusable functions\n    ([godbolt](https://www.godbolt.org/z/s9bGoo4ze)).\n  - After: 116 instructions of which 60 are in reusable functions\n    ([godbolt](https://www.godbolt.org/z/r7GGGxMs6)).\n\n  Clang:\n  - Before: 310 instructions of which 251 are in reusable functions\n    ([godbolt](https://www.godbolt.org/z/Ts88b7M9o)).\n  - After: 194 instructions of which 135 are in reusable functions\n    ([godbolt](https://www.godbolt.org/z/vcrjP8ceW)).\n\n- Added an experimental `fmt::writer` API that can be used for writing to\n  different destinations such as files or strings\n  (https://github.com/fmtlib/fmt/issues/2354).\n  For example ([godbolt](https://www.godbolt.org/z/rWoKfbP7e)):\n\n  ```c++\n  #include <fmt/os.h>\n\n  void write_text(fmt::writer w) {\n    w.print(\"The answer is {}.\", 42);\n  }\n\n  int main() {\n    // Write to FILE.\n    write_text(stdout);\n\n    // Write to fmt::ostream.\n    auto f = fmt::output_file(\"myfile\");\n    write_text(f);\n\n    // Write to std::string.\n    auto sb = fmt::string_buffer();\n    write_text(sb);\n    std::string s = sb.str();\n  }\n  ```\n\n- Added width and alignment support to the formatter of `std::error_code`.\n\n- Made `std::expected<void, E>` formattable\n  (https://github.com/fmtlib/fmt/issues/4145,\n  https://github.com/fmtlib/fmt/pull/4148).\n  For example ([godbolt](https://www.godbolt.org/z/hrj5c6G86)):\n\n  ```c++\n  fmt::print(\"{}\", std::expected<void, int>());\n  ```\n\n  prints\n\n  ```\n  expected()\n  ```\n\n  Thanks @phprus.\n\n- Made `fmt::is_formattable<void>` SFINAE-friendly\n  (https://github.com/fmtlib/fmt/issues/4147).\n\n- Added support for `_BitInt` formatting when using clang\n  (https://github.com/fmtlib/fmt/issues/4007,\n  https://github.com/fmtlib/fmt/pull/4072,\n  https://github.com/fmtlib/fmt/issues/4140,\n  https://github.com/fmtlib/fmt/issues/4173,\n  https://github.com/fmtlib/fmt/pull/4176).\n  For example ([godbolt](https://www.godbolt.org/z/KWjbWec5z)):\n\n  ```c++\n  using int42 = _BitInt(42);\n  fmt::print(\"{}\", int42(100));\n  ```\n\n  Thanks @Arghnews.\n\n- Added the `n` specifier for tuples and pairs\n  (https://github.com/fmtlib/fmt/pull/4107). Thanks @someonewithpc.\n\n- Added support for tuple-like types to `fmt::join`\n  (https://github.com/fmtlib/fmt/issues/4226,\n  https://github.com/fmtlib/fmt/pull/4230). Thanks @phprus.\n\n- Made more types formattable at compile time\n  (https://github.com/fmtlib/fmt/pull/4127). Thanks @AnthonyVH.\n\n- Implemented a more efficient compile-time `fmt::formatted_size`\n  (https://github.com/fmtlib/fmt/issues/4102,\n  https://github.com/fmtlib/fmt/pull/4103). Thanks @phprus.\n\n- Fixed compile-time formatting of some string types\n  (https://github.com/fmtlib/fmt/pull/4065). Thanks @torshepherd.\n\n- Made compiled version of `fmt::format_to` work with\n  `std::back_insert_iterator<std::vector<char>>`\n  (https://github.com/fmtlib/fmt/issues/4206,\n  https://github.com/fmtlib/fmt/pull/4211). Thanks @phprus.\n\n- Added a formatter for `std::reference_wrapper`\n  (https://github.com/fmtlib/fmt/pull/4163,\n  https://github.com/fmtlib/fmt/pull/4164). Thanks @yfeldblum and @phprus.\n\n- Added experimental padding support (glibc `strftime` extension) to `%m`, `%j`\n  and `%Y` (https://github.com/fmtlib/fmt/pull/4161). Thanks @KKhanhH.\n\n- Made microseconds formatted as `us` instead of `µs` if the Unicode support is\n  disabled (https://github.com/fmtlib/fmt/issues/4088).\n\n- Fixed an unreleased regression in transcoding of surrogate pairs\n  (https://github.com/fmtlib/fmt/issues/4094,\n  https://github.com/fmtlib/fmt/pull/4095). Thanks @phprus.\n\n- Made `fmt::appender` satisfy `std::output_iterator` concept\n  (https://github.com/fmtlib/fmt/issues/4092,\n  https://github.com/fmtlib/fmt/pull/4093). Thanks @phprus.\n\n- Made `std::iterator_traits<fmt::appender>` standard-conforming\n  (https://github.com/fmtlib/fmt/pull/4185). Thanks @CaseyCarter.\n\n- Made it easier to reuse `fmt::formatter<std::string_view>` for types with\n  an implicit conversion to `std::string_view`\n  (https://github.com/fmtlib/fmt/issues/4036,\n  https://github.com/fmtlib/fmt/pull/4055). Thanks @Arghnews.\n\n- Made it possible to disable `<filesystem>` use via `FMT_CPP_LIB_FILESYSTEM`\n  for compatibility with some video game console SDKs, e.g. Nintendo Switch SDK\n  (https://github.com/fmtlib/fmt/issues/4257,\n  https://github.com/fmtlib/fmt/pull/4258,\n  https://github.com/fmtlib/fmt/pull/4259). Thanks @W4RH4WK and @phprus.\n\n- Fixed compatibility with platforms that use 80-bit `long double`\n  (https://github.com/fmtlib/fmt/issues/4245,\n  https://github.com/fmtlib/fmt/pull/4246). Thanks @jsirpoma.\n\n- Added support for UTF-32 code units greater than `0xFFFF` in fill\n  (https://github.com/fmtlib/fmt/issues/4201).\n\n- Fixed handling of legacy encodings on Windows with GCC\n  (https://github.com/fmtlib/fmt/issues/4162).\n\n- Made `fmt::to_string` take `fmt::basic_memory_buffer` by const reference\n  (https://github.com/fmtlib/fmt/issues/4261,\n  https://github.com/fmtlib/fmt/pull/4262). Thanks @sascha-devel.\n\n- Added `fmt::dynamic_format_arg_store::size`\n  (https://github.com/fmtlib/fmt/pull/4270). Thanks @hannes-harnisch.\n\n- Removed the ability to control locale usage via an undocumented\n  `FMT_STATIC_THOUSANDS_SEPARATOR` in favor of `FMT_USE_LOCALE`.\n\n- Renamed `FMT_EXCEPTIONS` to `FMT_USE_EXCEPTIONS` for consistency with other\n  similar macros.\n\n- Improved include directory ordering to reduce the chance of including\n  incorrect headers when using multiple versions of {fmt}\n  (https://github.com/fmtlib/fmt/pull/4116). Thanks @cdzhan.\n\n- Made it possible to compile a subset of {fmt} without the C++ runtime.\n\n- Improved documentation and README\n  (https://github.com/fmtlib/fmt/pull/4066,\n  https://github.com/fmtlib/fmt/issues/4117,\n  https://github.com/fmtlib/fmt/issues/4203,\n  https://github.com/fmtlib/fmt/pull/4235). Thanks @zyctree and @nikola-sh.\n\n- Improved the documentation generator (https://github.com/fmtlib/fmt/pull/4110,\n  https://github.com/fmtlib/fmt/pull/4115). Thanks @rturrado.\n\n- Improved CI (https://github.com/fmtlib/fmt/pull/4155,\n  https://github.com/fmtlib/fmt/pull/4151). Thanks @phprus.\n\n- Fixed various warnings and compilation issues\n  (https://github.com/fmtlib/fmt/issues/2708,\n  https://github.com/fmtlib/fmt/issues/4091,\n  https://github.com/fmtlib/fmt/issues/4109,\n  https://github.com/fmtlib/fmt/issues/4113,\n  https://github.com/fmtlib/fmt/issues/4125,\n  https://github.com/fmtlib/fmt/issues/4129,\n  https://github.com/fmtlib/fmt/pull/4130,\n  https://github.com/fmtlib/fmt/pull/4131,\n  https://github.com/fmtlib/fmt/pull/4132,\n  https://github.com/fmtlib/fmt/issues/4133,\n  https://github.com/fmtlib/fmt/issues/4144,\n  https://github.com/fmtlib/fmt/issues/4150,\n  https://github.com/fmtlib/fmt/issues/4158,\n  https://github.com/fmtlib/fmt/pull/4159,\n  https://github.com/fmtlib/fmt/issues/4160,\n  https://github.com/fmtlib/fmt/pull/4170,\n  https://github.com/fmtlib/fmt/issues/4177,\n  https://github.com/fmtlib/fmt/pull/4187,\n  https://github.com/fmtlib/fmt/pull/4188,\n  https://github.com/fmtlib/fmt/pull/4194,\n  https://github.com/fmtlib/fmt/pull/4200,\n  https://github.com/fmtlib/fmt/issues/4205,\n  https://github.com/fmtlib/fmt/issues/4207,\n  https://github.com/fmtlib/fmt/pull/4208,\n  https://github.com/fmtlib/fmt/pull/4210,\n  https://github.com/fmtlib/fmt/issues/4220,\n  https://github.com/fmtlib/fmt/issues/4231,\n  https://github.com/fmtlib/fmt/issues/4232,\n  https://github.com/fmtlib/fmt/pull/4233,\n  https://github.com/fmtlib/fmt/pull/4236,\n  https://github.com/fmtlib/fmt/pull/4267,\n  https://github.com/fmtlib/fmt/pull/4271).\n  Thanks @torsten48, @Arghnews, @tinfoilboy, @aminya, @Ottani, @zeroomega,\n  @c4v4, @kongy, @vinayyadav3016, @sergio-nsk, @phprus and @YexuanXiao.\n\n# 11.0.2 - 2024-07-20\n\n- Fixed compatibility with non-POSIX systems\n  (https://github.com/fmtlib/fmt/issues/4054,\n  https://github.com/fmtlib/fmt/issues/4060).\n\n- Fixed performance regressions when using `std::back_insert_iterator` with\n  `fmt::format_to` (https://github.com/fmtlib/fmt/issues/4070).\n\n- Fixed handling of `std::generator` and move-only iterators\n  (https://github.com/fmtlib/fmt/issues/4053,\n  https://github.com/fmtlib/fmt/pull/4057). Thanks @Arghnews.\n\n- Made `formatter<std::string_view>::parse` work with types convertible to\n  `std::string_view` (https://github.com/fmtlib/fmt/issues/4036,\n  https://github.com/fmtlib/fmt/pull/4055). Thanks @Arghnews.\n\n- Made `volatile void*` formattable\n  (https://github.com/fmtlib/fmt/issues/4049,\n  https://github.com/fmtlib/fmt/pull/4056). Thanks @Arghnews.\n\n- Made `Glib::ustring` not be confused with `std::string`\n  (https://github.com/fmtlib/fmt/issues/4052).\n\n- Made `fmt::context` iterator compatible with STL algorithms that rely on\n  iterator category (https://github.com/fmtlib/fmt/issues/4079).\n\n# 11.0.1 - 2024-07-05\n\n- Fixed version number in the inline namespace\n  (https://github.com/fmtlib/fmt/issues/4047).\n\n- Fixed disabling Unicode support via CMake\n  (https://github.com/fmtlib/fmt/issues/4051).\n\n- Fixed deprecated `visit_format_arg` (https://github.com/fmtlib/fmt/pull/4043).\n  Thanks @nebkat.\n\n- Fixed handling of a sign and improved the `std::complex` formater\n  (https://github.com/fmtlib/fmt/pull/4034,\n  https://github.com/fmtlib/fmt/pull/4050). Thanks @tesch1 and @phprus.\n\n- Fixed ADL issues in `fmt::printf` when using C++20\n  (https://github.com/fmtlib/fmt/pull/4042). Thanks @toge.\n\n- Removed a redundant check in the formatter for `std::expected`\n  (https://github.com/fmtlib/fmt/pull/4040). Thanks @phprus.\n\n# 11.0.0 - 2024-07-01\n\n- Added `fmt/base.h` which provides a subset of the API with minimal include\n  dependencies and enough functionality to replace all uses of the `printf`\n  family of functions. This brings the compile time of code using {fmt} much\n  closer to the equivalent `printf` code as shown on the following benchmark\n  that compiles 100 source files:\n\n  | Method       | Compile Time (s) |\n  |--------------|------------------|\n  | printf       | 1.6              |\n  | IOStreams    | 25.9             |\n  | fmt 10.x     | 19.0             |\n  | fmt 11.0     | 4.8              |\n  | tinyformat   | 29.1             |\n  | Boost Format | 55.0             |\n\n  This gives almost 4x improvement in build speed compared to version 10.\n  Note that the benchmark is purely formatting code and includes. In real\n  projects the difference from `printf` will be smaller partly because common\n  standard headers will be included in almost any translation unit (TU) anyway.\n  In particular, in every case except `printf` above ~1s is spent in total on\n  including `<type_traits>` in all TUs.\n\n- Optimized includes in other headers such as `fmt/format.h` which is now\n  roughly equivalent to the old `fmt/core.h` in terms of build speed.\n\n- Migrated the documentation at https://fmt.dev/ from Sphinx to MkDocs.\n\n- Improved C++20 module support\n  (https://github.com/fmtlib/fmt/issues/3990,\n  https://github.com/fmtlib/fmt/pull/3991,\n  https://github.com/fmtlib/fmt/issues/3993,\n  https://github.com/fmtlib/fmt/pull/3994,\n  https://github.com/fmtlib/fmt/pull/3997,\n  https://github.com/fmtlib/fmt/pull/3998,\n  https://github.com/fmtlib/fmt/pull/4004,\n  https://github.com/fmtlib/fmt/pull/4005,\n  https://github.com/fmtlib/fmt/pull/4006,\n  https://github.com/fmtlib/fmt/pull/4013,\n  https://github.com/fmtlib/fmt/pull/4027,\n  https://github.com/fmtlib/fmt/pull/4029). In particular, native CMake support\n  for modules is now used if available. Thanks @yujincheng08 and @matt77hias.\n\n- Added an option to replace standard includes with `import std` enabled via\n  the `FMT_IMPORT_STD` macro (https://github.com/fmtlib/fmt/issues/3921,\n  https://github.com/fmtlib/fmt/pull/3928). Thanks @matt77hias.\n\n- Exported `fmt::range_format`, `fmt::range_format_kind` and\n  `fmt::compiled_string` from the `fmt` module\n  (https://github.com/fmtlib/fmt/pull/3970,\n  https://github.com/fmtlib/fmt/pull/3999).\n  Thanks @matt77hias and @yujincheng08.\n\n- Improved integration with stdio in `fmt::print`, enabling direct writes\n  into a C stream buffer in common cases. This may give significant\n  performance improvements ranging from tens of percent to [2x](\n  https://stackoverflow.com/a/78457454/471164) and eliminates dynamic memory\n  allocations on the buffer level. It is currently enabled for built-in and\n  string types with wider availability coming up in future releases.\n\n  For example, it gives ~24% improvement on a [simple benchmark](\n  https://isocpp.org/files/papers/P3107R5.html#perf) compiled with Apple clang\n  version 15.0.0 (clang-1500.1.0.2.5) and run on macOS 14.2.1:\n\n  ```\n  -------------------------------------------------------\n  Benchmark             Time             CPU   Iterations\n  -------------------------------------------------------\n  printf             81.8 ns         81.5 ns      8496899\n  fmt::print (10.x)  63.8 ns         61.9 ns     11524151\n  fmt::print (11.0)  51.3 ns         51.0 ns     13846580\n  ```\n\n- Improved safety of `fmt::format_to` when writing to an array\n  (https://github.com/fmtlib/fmt/pull/3805).\n  For example ([godbolt](https://www.godbolt.org/z/cYrn8dWY8)):\n\n  ```c++\n  auto volkswagen = char[4];\n  auto result = fmt::format_to(volkswagen, \"elephant\");\n  ```\n\n  no longer results in a buffer overflow. Instead the output will be truncated\n  and you can get the end iterator and whether truncation occurred from the\n  `result` object. Thanks @ThePhD.\n\n- Enabled Unicode support by default in MSVC, bringing it on par with other\n  compilers and making it unnecessary for users to enable it explicitly.\n  Most of {fmt} is encoding-agnostic but this prevents mojibake in places\n  where encoding matters such as path formatting and terminal output.\n  You can control the Unicode support via the CMake `FMT_UNICODE` option.\n  Note that some {fmt} packages such as the one in vcpkg have already been\n  compiled with Unicode enabled.\n\n- Added a formatter for `std::expected`\n  (https://github.com/fmtlib/fmt/pull/3834). Thanks @dominicpoeschko.\n\n- Added a formatter for `std::complex`\n  (https://github.com/fmtlib/fmt/issues/1467,\n  https://github.com/fmtlib/fmt/issues/3886,\n  https://github.com/fmtlib/fmt/pull/3892,\n  https://github.com/fmtlib/fmt/pull/3900). Thanks @phprus.\n\n- Added a formatter for `std::type_info`\n  (https://github.com/fmtlib/fmt/pull/3978). Thanks @matt77hias.\n\n- Specialized `formatter` for `std::basic_string` types with custom traits\n  and allocators (https://github.com/fmtlib/fmt/issues/3938,\n  https://github.com/fmtlib/fmt/pull/3943). Thanks @dieram3.\n\n- Added formatters for `std::chrono::day`, `std::chrono::month`,\n  `std::chrono::year` and `std::chrono::year_month_day`\n  (https://github.com/fmtlib/fmt/issues/3758,\n  https://github.com/fmtlib/fmt/issues/3772,\n  https://github.com/fmtlib/fmt/pull/3906,\n  https://github.com/fmtlib/fmt/pull/3913). For example:\n\n  ```c++\n  #include <fmt/chrono.h>\n  #include <fmt/color.h>\n\n  int main() {\n    fmt::print(fg(fmt::color::green), \"{}\\n\", std::chrono::day(7));\n  }\n  ```\n\n  prints a green day:\n\n  <img width=\"306\" alt=\"image\" src=\"https://github.com/fmtlib/fmt/assets/576385/6e395f8b-451a-4cf7-bccc-ee92ca0dec65\">\n\n  Thanks @zivshek.\n\n- Fixed handling of precision in `%S` (https://github.com/fmtlib/fmt/issues/3794,\n  https://github.com/fmtlib/fmt/pull/3814). Thanks @js324.\n\n- Added support for the `-` specifier (glibc `strftime` extension) to day of\n  the month (`%d`) and week of the year (`%W`, `%U`, `%V`) specifiers\n  (https://github.com/fmtlib/fmt/pull/3976). Thanks @ZaheenJ.\n\n- Fixed the scope of the `-` extension in chrono formatting so that it doesn't\n  apply to subsequent specifiers (https://github.com/fmtlib/fmt/issues/3811,\n  https://github.com/fmtlib/fmt/pull/3812). Thanks @phprus.\n\n- Improved handling of `time_point::min()`\n  (https://github.com/fmtlib/fmt/issues/3282).\n\n- Added support for character range formatting\n  (https://github.com/fmtlib/fmt/issues/3857,\n  https://github.com/fmtlib/fmt/pull/3863). Thanks @js324.\n\n- Added `string` and `debug_string` range formatters\n  (https://github.com/fmtlib/fmt/pull/3973,\n  https://github.com/fmtlib/fmt/pull/4024). Thanks @matt77hias.\n\n- Enabled ADL for `begin` and `end` in `fmt::join`\n  (https://github.com/fmtlib/fmt/issues/3813,\n  https://github.com/fmtlib/fmt/pull/3824). Thanks @bbolli.\n\n- Made contiguous iterator optimizations apply to `std::basic_string` iterators\n  (https://github.com/fmtlib/fmt/pull/3798). Thanks @phprus.\n\n- Added support for ranges with mutable `begin` and `end`\n  (https://github.com/fmtlib/fmt/issues/3752,\n  https://github.com/fmtlib/fmt/pull/3800,\n  https://github.com/fmtlib/fmt/pull/3955). Thanks @tcbrindle and @Arghnews.\n\n- Added support for move-only iterators to `fmt::join`\n  (https://github.com/fmtlib/fmt/issues/3802,\n  https://github.com/fmtlib/fmt/pull/3946). Thanks @Arghnews.\n\n- Moved range and iterator overloads of `fmt::join` to `fmt/ranges.h`, next\n  to other overloads.\n\n- Fixed handling of types with `begin` returning `void` such as Eigen matrices\n  (https://github.com/fmtlib/fmt/issues/3839,\n  https://github.com/fmtlib/fmt/pull/3964). Thanks @Arghnews.\n\n- Added an `fmt::formattable` concept (https://github.com/fmtlib/fmt/pull/3974).\n  Thanks @matt77hias.\n\n- Added support for `__float128` (https://github.com/fmtlib/fmt/issues/3494).\n\n- Fixed rounding issues when formatting `long double` with fixed precision\n  (https://github.com/fmtlib/fmt/issues/3539).\n\n- Made `fmt::isnan` not trigger floating-point exception for NaN values\n  (https://github.com/fmtlib/fmt/issues/3948,\n  https://github.com/fmtlib/fmt/pull/3951). Thanks @alexdewar.\n\n- Removed dependency on `<memory>` for `std::allocator_traits` when possible\n  (https://github.com/fmtlib/fmt/pull/3804). Thanks @phprus.\n\n- Enabled compile-time checks in formatting functions that take text colors and\n  styles.\n\n- Deprecated wide stream overloads of `fmt::print` that take text styles.\n\n- Made format string compilation work with clang 12 and later despite\n  only partial non-type template parameter support\n  (https://github.com/fmtlib/fmt/issues/4000,\n  https://github.com/fmtlib/fmt/pull/4001). Thanks @yujincheng08.\n\n- Made `fmt::iterator_buffer`'s move constructor `noexcept`\n  (https://github.com/fmtlib/fmt/pull/3808). Thanks @waywardmonkeys.\n\n- Started enforcing that `formatter::format` is const for compatibility\n  with `std::format` (https://github.com/fmtlib/fmt/issues/3447).\n\n- Added `fmt::basic_format_arg::visit` and deprecated `fmt::visit_format_arg`.\n\n- Made `fmt::basic_string_view` not constructible from `nullptr` for\n  consistency with `std::string_view` in C++23\n  (https://github.com/fmtlib/fmt/pull/3846). Thanks @dalle.\n\n- Fixed `fmt::group_digits` for negative integers\n  (https://github.com/fmtlib/fmt/issues/3891,\n  https://github.com/fmtlib/fmt/pull/3901). Thanks @phprus.\n\n- Fixed handling of negative ids in `fmt::basic_format_args::get`\n  (https://github.com/fmtlib/fmt/pull/3945). Thanks @marlenecota.\n\n- Fixed handling of a buffer boundary on flush\n  (https://github.com/fmtlib/fmt/issues/4229).\n\n- Improved named argument validation\n  (https://github.com/fmtlib/fmt/issues/3817).\n\n- Disabled copy construction/assignment for `fmt::format_arg_store` and\n  fixed moved construction (https://github.com/fmtlib/fmt/pull/3833).\n  Thanks @ivafanas.\n\n- Worked around a locale issue in RHEL/devtoolset\n  (https://github.com/fmtlib/fmt/issues/3858,\n  https://github.com/fmtlib/fmt/pull/3859). Thanks @g199209.\n\n- Added RTTI detection for MSVC (https://github.com/fmtlib/fmt/pull/3821,\n  https://github.com/fmtlib/fmt/pull/3963). Thanks @edo9300.\n\n- Migrated the documentation from Sphinx to MkDocs.\n\n- Improved documentation and README\n  (https://github.com/fmtlib/fmt/issues/3775,\n  https://github.com/fmtlib/fmt/pull/3784,\n  https://github.com/fmtlib/fmt/issues/3788,\n  https://github.com/fmtlib/fmt/pull/3789,\n  https://github.com/fmtlib/fmt/pull/3793,\n  https://github.com/fmtlib/fmt/issues/3818,\n  https://github.com/fmtlib/fmt/pull/3820,\n  https://github.com/fmtlib/fmt/pull/3822,\n  https://github.com/fmtlib/fmt/pull/3843,\n  https://github.com/fmtlib/fmt/pull/3890,\n  https://github.com/fmtlib/fmt/issues/3894,\n  https://github.com/fmtlib/fmt/pull/3895,\n  https://github.com/fmtlib/fmt/pull/3905,\n  https://github.com/fmtlib/fmt/issues/3942,\n  https://github.com/fmtlib/fmt/pull/4008).\n  Thanks @zencatalyst, WolleTD, @tupaschoal, @Dobiasd, @frank-weinberg, @bbolli,\n  @phprus, @waywardmonkeys, @js324 and @tchaikov.\n\n- Improved CI and tests\n  (https://github.com/fmtlib/fmt/issues/3878,\n  https://github.com/fmtlib/fmt/pull/3883,\n  https://github.com/fmtlib/fmt/issues/3897,\n  https://github.com/fmtlib/fmt/pull/3979,\n  https://github.com/fmtlib/fmt/pull/3980,\n  https://github.com/fmtlib/fmt/pull/3988,\n  https://github.com/fmtlib/fmt/pull/4010,\n  https://github.com/fmtlib/fmt/pull/4012,\n  https://github.com/fmtlib/fmt/pull/4038).\n  Thanks @vgorrX, @waywardmonkeys, @tchaikov and @phprus.\n\n- Fixed buffer overflow when using format string compilation with debug format\n  and `std::back_insert_iterator` (https://github.com/fmtlib/fmt/issues/3795,\n  https://github.com/fmtlib/fmt/pull/3797). Thanks @phprus.\n\n- Improved Bazel support\n  (https://github.com/fmtlib/fmt/pull/3792,\n  https://github.com/fmtlib/fmt/pull/3801,\n  https://github.com/fmtlib/fmt/pull/3962,\n  https://github.com/fmtlib/fmt/pull/3965). Thanks @Vertexwahn.\n\n- Improved/fixed the CMake config\n  (https://github.com/fmtlib/fmt/issues/3777,\n  https://github.com/fmtlib/fmt/pull/3783,\n  https://github.com/fmtlib/fmt/issues/3847,\n  https://github.com/fmtlib/fmt/pull/3907). Thanks @phprus and @xTachyon.\n\n- Fixed various warnings and compilation issues\n  (https://github.com/fmtlib/fmt/issues/3685,\n  https://github.com/fmtlib/fmt/issues/3769,\n  https://github.com/fmtlib/fmt/issues/3796,\n  https://github.com/fmtlib/fmt/issues/3803,\n  https://github.com/fmtlib/fmt/pull/3806,\n  https://github.com/fmtlib/fmt/pull/3807,\n  https://github.com/fmtlib/fmt/issues/3809,\n  https://github.com/fmtlib/fmt/pull/3810,\n  https://github.com/fmtlib/fmt/issues/3830,\n  https://github.com/fmtlib/fmt/pull/3832,\n  https://github.com/fmtlib/fmt/issues/3835,\n  https://github.com/fmtlib/fmt/pull/3844,\n  https://github.com/fmtlib/fmt/issues/3854,\n  https://github.com/fmtlib/fmt/pull/3856,\n  https://github.com/fmtlib/fmt/pull/3865,\n  https://github.com/fmtlib/fmt/pull/3866,\n  https://github.com/fmtlib/fmt/pull/3880,\n  https://github.com/fmtlib/fmt/issues/3881,\n  https://github.com/fmtlib/fmt/issues/3884,\n  https://github.com/fmtlib/fmt/issues/3898,\n  https://github.com/fmtlib/fmt/pull/3899,\n  https://github.com/fmtlib/fmt/pull/3909,\n  https://github.com/fmtlib/fmt/pull/3917,\n  https://github.com/fmtlib/fmt/pull/3923,\n  https://github.com/fmtlib/fmt/pull/3924,\n  https://github.com/fmtlib/fmt/issues/3925,\n  https://github.com/fmtlib/fmt/pull/3930,\n  https://github.com/fmtlib/fmt/pull/3931,\n  https://github.com/fmtlib/fmt/pull/3933,\n  https://github.com/fmtlib/fmt/issues/3935,\n  https://github.com/fmtlib/fmt/pull/3937,\n  https://github.com/fmtlib/fmt/pull/3967,\n  https://github.com/fmtlib/fmt/pull/3968,\n  https://github.com/fmtlib/fmt/pull/3972,\n  https://github.com/fmtlib/fmt/pull/3983,\n  https://github.com/fmtlib/fmt/issues/3992,\n  https://github.com/fmtlib/fmt/pull/3995,\n  https://github.com/fmtlib/fmt/pull/4009,\n  https://github.com/fmtlib/fmt/pull/4023).\n  Thanks @hmbj, @phprus, @res2k, @Baardi, @matt77hias, @waywardmonkeys, @hmbj,\n  @yakra, @prlw1, @Arghnews, @mtillmann0, @ShifftC, @eepp, @jimmy-park and\n  @ChristianGebhardt.\n\n# 10.2.1 - 2024-01-04\n\n- Fixed ABI compatibility with earlier 10.x versions\n  (https://github.com/fmtlib/fmt/issues/3785,\n  https://github.com/fmtlib/fmt/pull/3786). Thanks @saraedum.\n\n# 10.2.0 - 2024-01-01\n\n- Added support for the `%j` specifier (the number of days) for\n  `std::chrono::duration` (https://github.com/fmtlib/fmt/issues/3643,\n  https://github.com/fmtlib/fmt/pull/3732). Thanks @intelfx.\n\n- Added support for the chrono suffix for days and changed\n  the suffix for minutes from \"m\" to the correct \"min\"\n  (https://github.com/fmtlib/fmt/issues/3662,\n  https://github.com/fmtlib/fmt/pull/3664).\n  For example ([godbolt](https://godbolt.org/z/9KhMnq9ba)):\n\n  ```c++\n  #include <fmt/chrono.h>\n\n  int main() {\n    fmt::print(\"{}\\n\", std::chrono::days(42)); // prints \"42d\"\n  }\n  ```\n\n  Thanks @Richardk2n.\n\n- Fixed an overflow in `std::chrono::time_point` formatting with large dates\n  (https://github.com/fmtlib/fmt/issues/3725,\n  https://github.com/fmtlib/fmt/pull/3727). Thanks @cschreib.\n\n- Added a formatter for `std::source_location`\n  (https://github.com/fmtlib/fmt/pull/3730).\n  For example ([godbolt](https://godbolt.org/z/YajfKjhhr)):\n\n  ```c++\n  #include <source_location>\n  #include <fmt/std.h>\n\n  int main() {\n    fmt::print(\"{}\\n\", std::source_location::current());\n  }\n  ```\n\n  prints\n\n  ```\n  /app/example.cpp:5:51: int main()\n  ```\n\n  Thanks @felix642.\n\n- Added a formatter for `std::bitset`\n  (https://github.com/fmtlib/fmt/pull/3660).\n  For example ([godbolt](https://godbolt.org/z/bdEaGeYxe)):\n\n  ```c++\n  #include <bitset>\n  #include <fmt/std.h>\n\n  int main() {\n    fmt::print(\"{}\\n\", std::bitset<6>(42)); // prints \"101010\"\n  }\n  ```\n\n  Thanks @muggenhor.\n\n- Added an experimental `nested_formatter` that provides an easy way of\n  applying a formatter to one or more subobjects while automatically handling\n  width, fill and alignment. For example:\n\n  ```c++\n  #include <fmt/format.h>\n\n  struct point {\n    double x, y;\n  };\n\n  template <>\n  struct fmt::formatter<point> : nested_formatter<double> {\n    auto format(point p, format_context& ctx) const {\n      return write_padded(ctx, [=](auto out) {\n        return format_to(out, \"({}, {})\", nested(p.x), nested(p.y));\n      });\n    }\n  };\n\n  int main() {\n    fmt::print(\"[{:>20.2f}]\", point{1, 2});\n  }\n  ```\n\n  prints\n\n  ```\n  [          (1.00, 2.00)]\n  ```\n\n- Added the generic representation (`g`) to `std::filesystem::path`\n  (https://github.com/fmtlib/fmt/issues/3715,\n  https://github.com/fmtlib/fmt/pull/3729). For example:\n\n  ```c++\n  #include <filesystem>\n  #include <fmt/std.h>\n\n  int main() {\n    fmt::print(\"{:g}\\n\", std::filesystem::path(\"C:\\\\foo\"));\n  }\n  ```\n\n  prints `\"C:/foo\"` on Windows.\n\n  Thanks @js324.\n\n- Made `format_as` work with references\n  (https://github.com/fmtlib/fmt/pull/3739). Thanks @tchaikov.\n\n- Fixed formatting of invalid UTF-8 with precision\n  (https://github.com/fmtlib/fmt/issues/3284).\n\n- Fixed an inconsistency between `fmt::to_string` and `fmt::format`\n  (https://github.com/fmtlib/fmt/issues/3684).\n\n- Disallowed unsafe uses of `fmt::styled`\n  (https://github.com/fmtlib/fmt/issues/3625):\n\n  ```c++\n  auto s = fmt::styled(std::string(\"dangle\"), fmt::emphasis::bold);\n  fmt::print(\"{}\\n\", s); // compile error\n  ```\n\n  Pass `fmt::styled(...)` as a parameter instead.\n\n- Added a null check when formatting a C string with the `s` specifier\n  (https://github.com/fmtlib/fmt/issues/3706).\n\n- Disallowed the `c` specifier for `bool`\n  (https://github.com/fmtlib/fmt/issues/3726,\n  https://github.com/fmtlib/fmt/pull/3734). Thanks @js324.\n\n- Made the default formatting unlocalized in `fmt::ostream_formatter` for\n  consistency with the rest of the library\n  (https://github.com/fmtlib/fmt/issues/3460).\n\n- Fixed localized formatting in bases other than decimal\n  (https://github.com/fmtlib/fmt/issues/3693,\n  https://github.com/fmtlib/fmt/pull/3750). Thanks @js324.\n\n- Fixed a performance regression in experimental `fmt::ostream::print`\n  (https://github.com/fmtlib/fmt/issues/3674).\n\n- Added synchronization with the underlying output stream when writing to\n  the Windows console\n  (https://github.com/fmtlib/fmt/pull/3668,\n  https://github.com/fmtlib/fmt/issues/3688,\n  https://github.com/fmtlib/fmt/pull/3689).\n  Thanks @Roman-Koshelev and @dimztimz.\n\n- Changed to only export `format_error` when {fmt} is built as a shared\n  library (https://github.com/fmtlib/fmt/issues/3626,\n  https://github.com/fmtlib/fmt/pull/3627). Thanks @phprus.\n\n- Made `fmt::streamed` `constexpr`.\n  (https://github.com/fmtlib/fmt/pull/3650). Thanks @muggenhor.\n\n- Made `fmt::format_int` `constexpr`\n  (https://github.com/fmtlib/fmt/issues/4031,\n  https://github.com/fmtlib/fmt/pull/4032). Thanks @dixlorenz.\n\n- Enabled `consteval` on older versions of MSVC\n  (https://github.com/fmtlib/fmt/pull/3757). Thanks @phprus.\n\n- Added an option to build without `wchar_t` support on Windows\n  (https://github.com/fmtlib/fmt/issues/3631,\n  https://github.com/fmtlib/fmt/pull/3636). Thanks @glebm.\n\n- Improved build and CI configuration\n  (https://github.com/fmtlib/fmt/pull/3679,\n  https://github.com/fmtlib/fmt/issues/3701,\n  https://github.com/fmtlib/fmt/pull/3702,\n  https://github.com/fmtlib/fmt/pull/3749).\n  Thanks @jcar87, @pklima and @tchaikov.\n\n- Fixed various warnings, compilation and test issues\n  (https://github.com/fmtlib/fmt/issues/3607,\n  https://github.com/fmtlib/fmt/pull/3610,\n  https://github.com/fmtlib/fmt/pull/3624,\n  https://github.com/fmtlib/fmt/pull/3630,\n  https://github.com/fmtlib/fmt/pull/3634,\n  https://github.com/fmtlib/fmt/pull/3638,\n  https://github.com/fmtlib/fmt/issues/3645,\n  https://github.com/fmtlib/fmt/issues/3646,\n  https://github.com/fmtlib/fmt/pull/3647,\n  https://github.com/fmtlib/fmt/pull/3652,\n  https://github.com/fmtlib/fmt/issues/3654,\n  https://github.com/fmtlib/fmt/pull/3663,\n  https://github.com/fmtlib/fmt/issues/3670,\n  https://github.com/fmtlib/fmt/pull/3680,\n  https://github.com/fmtlib/fmt/issues/3694,\n  https://github.com/fmtlib/fmt/pull/3695,\n  https://github.com/fmtlib/fmt/pull/3699,\n  https://github.com/fmtlib/fmt/issues/3705,\n  https://github.com/fmtlib/fmt/issues/3710,\n  https://github.com/fmtlib/fmt/issues/3712,\n  https://github.com/fmtlib/fmt/pull/3713,\n  https://github.com/fmtlib/fmt/issues/3714,\n  https://github.com/fmtlib/fmt/pull/3716,\n  https://github.com/fmtlib/fmt/pull/3723,\n  https://github.com/fmtlib/fmt/issues/3738,\n  https://github.com/fmtlib/fmt/issues/3740,\n  https://github.com/fmtlib/fmt/pull/3741,\n  https://github.com/fmtlib/fmt/pull/3743,\n  https://github.com/fmtlib/fmt/issues/3745,\n  https://github.com/fmtlib/fmt/pull/3747,\n  https://github.com/fmtlib/fmt/pull/3748,\n  https://github.com/fmtlib/fmt/pull/3751,\n  https://github.com/fmtlib/fmt/pull/3754,\n  https://github.com/fmtlib/fmt/pull/3755,\n  https://github.com/fmtlib/fmt/issues/3760,\n  https://github.com/fmtlib/fmt/pull/3762,\n  https://github.com/fmtlib/fmt/issues/3763,\n  https://github.com/fmtlib/fmt/pull/3764,\n  https://github.com/fmtlib/fmt/issues/3774,\n  https://github.com/fmtlib/fmt/pull/3779).\n  Thanks @danakj, @vinayyadav3016, @cyyever, @phprus, @qimiko, @saschasc,\n  @gsjaardema, @lazka, @Zhaojun-Liu, @carlsmedstad, @hotwatermorning,\n  @cptFracassa, @kuguma, @PeterJohnson, @H1X4Dev, @asantoni, @eltociear,\n  @msimberg, @tchaikov, @waywardmonkeys.\n\n- Improved documentation and README\n  (https://github.com/fmtlib/fmt/issues/2086,\n  https://github.com/fmtlib/fmt/issues/3637,\n  https://github.com/fmtlib/fmt/pull/3642,\n  https://github.com/fmtlib/fmt/pull/3653,\n  https://github.com/fmtlib/fmt/pull/3655,\n  https://github.com/fmtlib/fmt/pull/3661,\n  https://github.com/fmtlib/fmt/issues/3673,\n  https://github.com/fmtlib/fmt/pull/3677,\n  https://github.com/fmtlib/fmt/pull/3737,\n  https://github.com/fmtlib/fmt/issues/3742,\n  https://github.com/fmtlib/fmt/pull/3744).\n  Thanks @idzm, @perlun, @joycebrum, @fennewald, @reinhardt1053, @GeorgeLS.\n\n- Updated CI dependencies\n  (https://github.com/fmtlib/fmt/pull/3615,\n  https://github.com/fmtlib/fmt/pull/3622,\n  https://github.com/fmtlib/fmt/pull/3623,\n  https://github.com/fmtlib/fmt/pull/3666,\n  https://github.com/fmtlib/fmt/pull/3696,\n  https://github.com/fmtlib/fmt/pull/3697,\n  https://github.com/fmtlib/fmt/pull/3759,\n  https://github.com/fmtlib/fmt/pull/3782).\n\n# 10.1.1 - 2023-08-28\n\n- Added formatters for `std::atomic` and `atomic_flag`\n  (https://github.com/fmtlib/fmt/pull/3574,\n  https://github.com/fmtlib/fmt/pull/3594).\n  Thanks @wangzw and @AlexGuteniev.\n- Fixed an error about partial specialization of `formatter<string>`\n  after instantiation when compiled with gcc and C++20\n  (https://github.com/fmtlib/fmt/issues/3584).\n- Fixed compilation as a C++20 module with gcc and clang\n  (https://github.com/fmtlib/fmt/issues/3587,\n  https://github.com/fmtlib/fmt/pull/3597,\n  https://github.com/fmtlib/fmt/pull/3605).\n  Thanks @MathewBensonCode.\n- Made `fmt::to_string` work with types that have `format_as`\n  overloads (https://github.com/fmtlib/fmt/pull/3575). Thanks @phprus.\n- Made `formatted_size` work with integral format specifiers at\n  compile time (https://github.com/fmtlib/fmt/pull/3591).\n  Thanks @elbeno.\n- Fixed a warning about the `no_unique_address` attribute on clang-cl\n  (https://github.com/fmtlib/fmt/pull/3599). Thanks @lukester1975.\n- Improved compatibility with the legacy GBK encoding\n  (https://github.com/fmtlib/fmt/issues/3598,\n  https://github.com/fmtlib/fmt/pull/3599). Thanks @YuHuanTin.\n- Added OpenSSF Scorecard analysis\n  (https://github.com/fmtlib/fmt/issues/3530,\n  https://github.com/fmtlib/fmt/pull/3571). Thanks @joycebrum.\n- Updated CI dependencies\n  (https://github.com/fmtlib/fmt/pull/3591,\n  https://github.com/fmtlib/fmt/pull/3592,\n  https://github.com/fmtlib/fmt/pull/3593,\n  https://github.com/fmtlib/fmt/pull/3602).\n\n# 10.1.0 - 2023-08-12\n\n- Optimized format string compilation resulting in up to 40% speed up\n  in compiled `format_to` and \\~4x speed up in compiled `format_to_n`\n  on a concatenation benchmark\n  (https://github.com/fmtlib/fmt/issues/3133,\n  https://github.com/fmtlib/fmt/issues/3484).\n\n  {fmt} 10.0:\n\n      ---------------------------------------------------------\n      Benchmark               Time             CPU   Iterations\n      ---------------------------------------------------------\n      BM_format_to         78.9 ns         78.9 ns      8881746\n      BM_format_to_n        568 ns          568 ns      1232089\n\n  {fmt} 10.1:\n\n      ---------------------------------------------------------\n      Benchmark               Time             CPU   Iterations\n      ---------------------------------------------------------\n      BM_format_to         54.9 ns         54.9 ns     12727944\n      BM_format_to_n        133 ns          133 ns      5257795\n\n- Optimized storage of an empty allocator in `basic_memory_buffer`\n  (https://github.com/fmtlib/fmt/pull/3485). Thanks @Minty-Meeo.\n\n- Added formatters for proxy references to elements of\n  `std::vector<bool>` and `std::bitset<N>`\n  (https://github.com/fmtlib/fmt/issues/3567,\n  https://github.com/fmtlib/fmt/pull/3570). For example\n  ([godbolt](https://godbolt.org/z/zYb79Pvn8)):\n\n  ```c++\n  #include <vector>\n  #include <fmt/std.h>\n\n  int main() {\n    auto v = std::vector<bool>{true};\n    fmt::print(\"{}\", v[0]);\n  }\n  ```\n\n  Thanks @phprus and @felix642.\n\n- Fixed an ambiguous formatter specialization for containers that look\n  like container adaptors such as `boost::flat_set`\n  (https://github.com/fmtlib/fmt/issues/3556,\n  https://github.com/fmtlib/fmt/pull/3561). Thanks @5chmidti.\n\n- Fixed compilation when formatting durations not convertible from\n  `std::chrono::seconds`\n  (https://github.com/fmtlib/fmt/pull/3430). Thanks @patlkli.\n\n- Made the `formatter` specialization for `char*` const-correct\n  (https://github.com/fmtlib/fmt/pull/3432). Thanks @timsong-cpp.\n\n- Made `{}` and `{:}` handled consistently during compile-time checks\n  (https://github.com/fmtlib/fmt/issues/3526).\n\n- Disallowed passing temporaries to `make_format_args` to improve API\n  safety by preventing dangling references.\n\n- Improved the compile-time error for unformattable types\n  (https://github.com/fmtlib/fmt/pull/3478). Thanks @BRevzin.\n\n- Improved the floating-point formatter\n  (https://github.com/fmtlib/fmt/pull/3448,\n  https://github.com/fmtlib/fmt/pull/3450).\n  Thanks @florimond-collette.\n\n- Fixed handling of precision for `long double` larger than 64 bits.\n  (https://github.com/fmtlib/fmt/issues/3539,\n  https://github.com/fmtlib/fmt/issues/3564).\n\n- Made floating-point and chrono tests less platform-dependent\n  (https://github.com/fmtlib/fmt/issues/3337,\n  https://github.com/fmtlib/fmt/issues/3433,\n  https://github.com/fmtlib/fmt/pull/3434). Thanks @phprus.\n\n- Removed the remnants of the Grisu floating-point formatter that has\n  been replaced by Dragonbox in earlier versions.\n\n- Added `throw_format_error` to the public API\n  (https://github.com/fmtlib/fmt/pull/3551). Thanks @mjerabek.\n\n- Made `FMT_THROW` assert even if assertions are disabled when\n  compiling with exceptions disabled\n  (https://github.com/fmtlib/fmt/issues/3418,\n  https://github.com/fmtlib/fmt/pull/3439). Thanks @BRevzin.\n\n- Made `format_as` and `std::filesystem::path` formatter work with\n  exotic code unit types.\n  (https://github.com/fmtlib/fmt/pull/3457,\n  https://github.com/fmtlib/fmt/pull/3476). Thanks @gix and @hmbj.\n\n- Added support for the `?` format specifier to\n  `std::filesystem::path` and made the default unescaped for\n  consistency with strings.\n\n- Deprecated the wide stream overload of `printf`.\n\n- Removed unused `basic_printf_parse_context`.\n\n- Improved RTTI detection used when formatting exceptions\n  (https://github.com/fmtlib/fmt/pull/3468). Thanks @danakj.\n\n- Improved compatibility with VxWorks7\n  (https://github.com/fmtlib/fmt/pull/3467). Thanks @wenshan1.\n\n- Improved documentation\n  (https://github.com/fmtlib/fmt/issues/3174,\n  https://github.com/fmtlib/fmt/issues/3423,\n  https://github.com/fmtlib/fmt/pull/3454,\n  https://github.com/fmtlib/fmt/issues/3458,\n  https://github.com/fmtlib/fmt/pull/3461,\n  https://github.com/fmtlib/fmt/issues/3487,\n  https://github.com/fmtlib/fmt/pull/3515).\n  Thanks @zencatalyst, @rlalik and @mikecrowe.\n\n- Improved build and CI configurations\n  (https://github.com/fmtlib/fmt/issues/3449,\n  https://github.com/fmtlib/fmt/pull/3451,\n  https://github.com/fmtlib/fmt/pull/3452,\n  https://github.com/fmtlib/fmt/pull/3453,\n  https://github.com/fmtlib/fmt/pull/3459,\n  https://github.com/fmtlib/fmt/issues/3481,\n  https://github.com/fmtlib/fmt/pull/3486,\n  https://github.com/fmtlib/fmt/issues/3489,\n  https://github.com/fmtlib/fmt/pull/3496,\n  https://github.com/fmtlib/fmt/issues/3517,\n  https://github.com/fmtlib/fmt/pull/3523,\n  https://github.com/fmtlib/fmt/pull/3563).\n  Thanks @joycebrum, @glebm, @phprus, @petrmanek, @setoye and @abouvier.\n\n- Fixed various warnings and compilation issues\n  (https://github.com/fmtlib/fmt/issues/3408,\n  https://github.com/fmtlib/fmt/issues/3424,\n  https://github.com/fmtlib/fmt/issues/3444,\n  https://github.com/fmtlib/fmt/pull/3446,\n  https://github.com/fmtlib/fmt/pull/3475,\n  https://github.com/fmtlib/fmt/pull/3482,\n  https://github.com/fmtlib/fmt/issues/3492,\n  https://github.com/fmtlib/fmt/pull/3493,\n  https://github.com/fmtlib/fmt/pull/3508,\n  https://github.com/fmtlib/fmt/issues/3509,\n  https://github.com/fmtlib/fmt/issues/3533,\n  https://github.com/fmtlib/fmt/pull/3542,\n  https://github.com/fmtlib/fmt/issues/3543,\n  https://github.com/fmtlib/fmt/issues/3540,\n  https://github.com/fmtlib/fmt/pull/3544,\n  https://github.com/fmtlib/fmt/issues/3548,\n  https://github.com/fmtlib/fmt/pull/3549,\n  https://github.com/fmtlib/fmt/pull/3550,\n  https://github.com/fmtlib/fmt/pull/3552).\n  Thanks @adesitter, @hmbj, @Minty-Meeo, @phprus, @TobiSchluter,\n  @kieranclancy, @alexeedm, @jurihock, @Ozomahtli and @razaqq.\n\n# 10.0.0 - 2023-05-09\n\n- Replaced Grisu with a new floating-point formatting algorithm for\n  given precision (https://github.com/fmtlib/fmt/issues/3262,\n  https://github.com/fmtlib/fmt/issues/2750,\n  https://github.com/fmtlib/fmt/pull/3269,\n  https://github.com/fmtlib/fmt/pull/3276). The new algorithm\n  is based on Dragonbox already used for the shortest representation\n  and gives substantial performance improvement:\n\n  ![](https://user-images.githubusercontent.com/33922675/211956670-84891a09-6867-47d9-82fc-3230da7abe0f.png)\n\n  -   Red: new algorithm\n  -   Green: new algorithm with `FMT_USE_FULL_CACHE_DRAGONBOX` defined\n      to 1\n  -   Blue: old algorithm\n\n  Thanks @jk-jeon.\n\n- Replaced `snprintf`-based hex float formatter with an internal\n  implementation (https://github.com/fmtlib/fmt/pull/3179,\n  https://github.com/fmtlib/fmt/pull/3203). This removes the\n  last usage of `s(n)printf` in {fmt}. Thanks @phprus.\n\n- Fixed alignment of floating-point numbers with localization\n  (https://github.com/fmtlib/fmt/issues/3263,\n  https://github.com/fmtlib/fmt/pull/3272). Thanks @ShawnZhong.\n\n- Made handling of `#` consistent with `std::format`.\n\n- Improved C++20 module support\n  (https://github.com/fmtlib/fmt/pull/3134,\n  https://github.com/fmtlib/fmt/pull/3254,\n  https://github.com/fmtlib/fmt/pull/3386,\n  https://github.com/fmtlib/fmt/pull/3387,\n  https://github.com/fmtlib/fmt/pull/3388,\n  https://github.com/fmtlib/fmt/pull/3392,\n  https://github.com/fmtlib/fmt/pull/3397,\n  https://github.com/fmtlib/fmt/pull/3399,\n  https://github.com/fmtlib/fmt/pull/3400).\n  Thanks @laitingsheng, @Orvid and @DanielaE.\n  \n- Switched to the [modules CMake library](https://github.com/vitaut/modules)\n  which allows building {fmt} as a C++20 module with clang:\n\n      CXX=clang++ cmake -DFMT_MODULE=ON .\n      make\n\n- Made `format_as` work with any user-defined type and not just enums.\n  For example ([godbolt](https://godbolt.org/z/b7rqhq5Kh)):\n\n  ```c++\n  #include <fmt/format.h>\n\n  struct floaty_mc_floatface {\n    double value;\n  };\n\n  auto format_as(floaty_mc_floatface f) { return f.value; }\n\n  int main() {\n    fmt::print(\"{:8}\\n\", floaty_mc_floatface{0.42}); // prints \"    0.42\"\n  }\n  ```\n\n- Removed deprecated implicit conversions for enums and conversions to\n  primitive types for compatibility with `std::format` and to prevent\n  potential ODR violations. Use `format_as` instead.\n\n- Added support for fill, align and width to the time point formatter\n  (https://github.com/fmtlib/fmt/issues/3237,\n  https://github.com/fmtlib/fmt/pull/3260,\n  https://github.com/fmtlib/fmt/pull/3275). For example\n  ([godbolt](https://godbolt.org/z/rKP6MGz6c)):\n\n  ```c++\n  #include <fmt/chrono.h>\n\n  int main() {\n    // prints \"    2023\"\n    fmt::print(\"{:>8%Y}\\n\", std::chrono::system_clock::now());\n  }\n  ```\n\n  Thanks @ShawnZhong.\n\n- Implemented formatting of subseconds\n  (https://github.com/fmtlib/fmt/issues/2207,\n  https://github.com/fmtlib/fmt/issues/3117,\n  https://github.com/fmtlib/fmt/pull/3115,\n  https://github.com/fmtlib/fmt/pull/3143,\n  https://github.com/fmtlib/fmt/pull/3144,\n  https://github.com/fmtlib/fmt/pull/3349). For example\n  ([godbolt](https://godbolt.org/z/45738oGEo)):\n\n  ```c++\n  #include <fmt/chrono.h>\n\n  int main() {\n    // prints 01.234567\n    fmt::print(\"{:%S}\\n\", std::chrono::microseconds(1234567));\n  }\n  ```\n\n  Thanks @patrickroocks @phprus and @BRevzin.\n\n- Added precision support to `%S`\n  (https://github.com/fmtlib/fmt/pull/3148). Thanks @SappyJoy\n\n- Added support for `std::utc_time`\n  (https://github.com/fmtlib/fmt/issues/3098,\n  https://github.com/fmtlib/fmt/pull/3110). Thanks @patrickroocks.\n\n- Switched formatting of `std::chrono::system_clock` from local time\n  to UTC for compatibility with the standard\n  (https://github.com/fmtlib/fmt/issues/3199,\n  https://github.com/fmtlib/fmt/pull/3230). Thanks @ned14.\n\n- Added support for `%Ez` and `%Oz` to chrono formatters.\n  (https://github.com/fmtlib/fmt/issues/3220,\n  https://github.com/fmtlib/fmt/pull/3222). Thanks @phprus.\n\n- Improved validation of format specifiers for `std::chrono::duration`\n  (https://github.com/fmtlib/fmt/issues/3219,\n  https://github.com/fmtlib/fmt/pull/3232). Thanks @ShawnZhong.\n\n- Fixed formatting of time points before the epoch\n  (https://github.com/fmtlib/fmt/issues/3117,\n  https://github.com/fmtlib/fmt/pull/3261). For example\n  ([godbolt](https://godbolt.org/z/f7bcznb3W)):\n\n  ```c++\n  #include <fmt/chrono.h>\n\n  int main() {\n    auto t = std::chrono::system_clock::from_time_t(0) -\n             std::chrono::milliseconds(250);\n    fmt::print(\"{:%S}\\n\", t); // prints 59.750000000\n  }\n  ```\n\n  Thanks @ShawnZhong.\n\n- Experimental: implemented glibc extension for padding seconds,\n  minutes and hours\n  (https://github.com/fmtlib/fmt/issues/2959,\n  https://github.com/fmtlib/fmt/pull/3271). Thanks @ShawnZhong.\n\n- Added a formatter for `std::exception`\n  (https://github.com/fmtlib/fmt/issues/2977,\n  https://github.com/fmtlib/fmt/issues/3012,\n  https://github.com/fmtlib/fmt/pull/3062,\n  https://github.com/fmtlib/fmt/pull/3076,\n  https://github.com/fmtlib/fmt/pull/3119). For example\n  ([godbolt](https://godbolt.org/z/8xoWGs9e4)):\n\n  ```c++\n  #include <fmt/std.h>\n  #include <vector>\n\n  int main() {\n    try {\n      std::vector<bool>().at(0);\n    } catch(const std::exception& e) {\n      fmt::print(\"{}\", e);\n    }\n  }\n  ```\n\n  prints:\n\n      vector<bool>::_M_range_check: __n (which is 0) >= this->size() (which is 0)\n\n  on libstdc++. Thanks @zach2good and @phprus.\n\n- Moved `std::error_code` formatter from `fmt/os.h` to `fmt/std.h`.\n  (https://github.com/fmtlib/fmt/pull/3125). Thanks @phprus.\n\n- Added formatters for standard container adapters:\n  `std::priority_queue`, `std::queue` and `std::stack`\n  (https://github.com/fmtlib/fmt/issues/3215,\n  https://github.com/fmtlib/fmt/pull/3279). For example\n  ([godbolt](https://godbolt.org/z/74h1xY9qK)):\n\n  ```c++\n  #include <fmt/ranges.h>\n  #include <stack>\n  #include <vector>\n\n  int main() {\n    auto s = std::stack<bool, std::vector<bool>>();\n    for (auto b: {true, false, true}) s.push(b);\n    fmt::print(\"{}\\n\", s); // prints [true, false, true]\n  }\n  ```\n\n  Thanks @ShawnZhong.\n\n- Added a formatter for `std::optional` to `fmt/std.h`\n  (https://github.com/fmtlib/fmt/issues/1367,\n  https://github.com/fmtlib/fmt/pull/3303).\n  Thanks @tom-huntington.\n\n- Fixed formatting of valueless by exception variants\n  (https://github.com/fmtlib/fmt/pull/3347). Thanks @TheOmegaCarrot.\n\n- Made `fmt::ptr` accept `unique_ptr` with a custom deleter\n  (https://github.com/fmtlib/fmt/pull/3177). Thanks @hmbj.\n\n- Fixed formatting of noncopyable ranges and nested ranges of chars\n  (https://github.com/fmtlib/fmt/pull/3158\n  https://github.com/fmtlib/fmt/issues/3286,\n  https://github.com/fmtlib/fmt/pull/3290). Thanks @BRevzin.\n\n- Fixed issues with formatting of paths and ranges of paths\n  (https://github.com/fmtlib/fmt/issues/3319,\n  https://github.com/fmtlib/fmt/pull/3321\n  https://github.com/fmtlib/fmt/issues/3322). Thanks @phprus.\n\n- Improved handling of invalid Unicode in paths.\n\n- Enabled compile-time checks on Apple clang 14 and later\n  (https://github.com/fmtlib/fmt/pull/3331). Thanks @cloyce.\n\n- Improved compile-time checks of named arguments\n  (https://github.com/fmtlib/fmt/issues/3105,\n  https://github.com/fmtlib/fmt/pull/3214). Thanks @rbrich.\n\n- Fixed formatting when both alignment and `0` are given\n  (https://github.com/fmtlib/fmt/issues/3236,\n  https://github.com/fmtlib/fmt/pull/3248). Thanks @ShawnZhong.\n\n- Improved Unicode support in the experimental file API on Windows\n  (https://github.com/fmtlib/fmt/issues/3234,\n  https://github.com/fmtlib/fmt/pull/3293). Thanks @Fros1er.\n\n- Unified UTF transcoding\n  (https://github.com/fmtlib/fmt/pull/3416). Thanks @phprus.\n\n- Added support for UTF-8 digit separators via an experimental locale\n  facet (https://github.com/fmtlib/fmt/issues/1861). For\n  example ([godbolt](https://godbolt.org/z/f7bcznb3W)):\n\n  ```c++\n  auto loc = std::locale(\n    std::locale(), new fmt::format_facet<std::locale>(\"’\"));\n  auto s = fmt::format(loc, \"{:L}\", 1000);\n  ```\n\n  where `’` is U+2019 used as a digit separator in the de_CH locale.\n\n- Added an overload of `formatted_size` that takes a locale\n  (https://github.com/fmtlib/fmt/issues/3084,\n  https://github.com/fmtlib/fmt/pull/3087). Thanks @gerboengels.\n\n- Removed the deprecated `FMT_DEPRECATED_OSTREAM`.\n\n- Fixed a UB when using a null `std::string_view` with\n  `fmt::to_string` or format string compilation\n  (https://github.com/fmtlib/fmt/issues/3241,\n  https://github.com/fmtlib/fmt/pull/3244). Thanks @phprus.\n\n- Added `starts_with` to the fallback `string_view` implementation\n  (https://github.com/fmtlib/fmt/pull/3080). Thanks @phprus.\n\n- Added `fmt::basic_format_string::get()` for compatibility with\n  `basic_format_string`\n  (https://github.com/fmtlib/fmt/pull/3111). Thanks @huangqinjin.\n\n- Added `println` for compatibility with C++23\n  (https://github.com/fmtlib/fmt/pull/3267). Thanks @ShawnZhong.\n\n- Renamed the `FMT_EXPORT` macro for shared library usage to\n  `FMT_LIB_EXPORT`.\n\n- Improved documentation\n  (https://github.com/fmtlib/fmt/issues/3108,\n  https://github.com/fmtlib/fmt/issues/3169,\n  https://github.com/fmtlib/fmt/pull/3243).\n  https://github.com/fmtlib/fmt/pull/3404,\n  https://github.com/fmtlib/fmt/pull/4002).\n  Thanks @Cleroth, @Vertexwahn and @yujincheng08.\n\n- Improved build configuration and tests\n  (https://github.com/fmtlib/fmt/pull/3118,\n  https://github.com/fmtlib/fmt/pull/3120,\n  https://github.com/fmtlib/fmt/pull/3188,\n  https://github.com/fmtlib/fmt/issues/3189,\n  https://github.com/fmtlib/fmt/pull/3198,\n  https://github.com/fmtlib/fmt/pull/3205,\n  https://github.com/fmtlib/fmt/pull/3207,\n  https://github.com/fmtlib/fmt/pull/3210,\n  https://github.com/fmtlib/fmt/pull/3240,\n  https://github.com/fmtlib/fmt/pull/3256,\n  https://github.com/fmtlib/fmt/pull/3264,\n  https://github.com/fmtlib/fmt/issues/3299,\n  https://github.com/fmtlib/fmt/pull/3302,\n  https://github.com/fmtlib/fmt/pull/3312,\n  https://github.com/fmtlib/fmt/issues/3317,\n  https://github.com/fmtlib/fmt/pull/3328,\n  https://github.com/fmtlib/fmt/pull/3333,\n  https://github.com/fmtlib/fmt/pull/3369,\n  https://github.com/fmtlib/fmt/issues/3373,\n  https://github.com/fmtlib/fmt/pull/3395,\n  https://github.com/fmtlib/fmt/pull/3406,\n  https://github.com/fmtlib/fmt/pull/3411).\n  Thanks @dimztimz, @phprus, @DavidKorczynski, @ChrisThrasher,\n  @FrancoisCarouge, @kennyweiss, @luzpaz, @codeinred, @Mixaill, @joycebrum,\n  @kevinhwang and @Vertexwahn.\n\n- Fixed a regression in handling empty format specifiers after a colon\n  (`{:}`) (https://github.com/fmtlib/fmt/pull/3086). Thanks @oxidase.\n\n- Worked around a broken implementation of\n  `std::is_constant_evaluated` in some versions of libstdc++ on clang\n  (https://github.com/fmtlib/fmt/issues/3247,\n  https://github.com/fmtlib/fmt/pull/3281). Thanks @phprus.\n\n- Fixed formatting of volatile variables\n  (https://github.com/fmtlib/fmt/pull/3068).\n\n- Fixed various warnings and compilation issues\n  (https://github.com/fmtlib/fmt/pull/3057,\n  https://github.com/fmtlib/fmt/pull/3066,\n  https://github.com/fmtlib/fmt/pull/3072,\n  https://github.com/fmtlib/fmt/pull/3082,\n  https://github.com/fmtlib/fmt/pull/3091,\n  https://github.com/fmtlib/fmt/issues/3092,\n  https://github.com/fmtlib/fmt/pull/3093,\n  https://github.com/fmtlib/fmt/pull/3095,\n  https://github.com/fmtlib/fmt/issues/3096,\n  https://github.com/fmtlib/fmt/pull/3097,\n  https://github.com/fmtlib/fmt/issues/3128,\n  https://github.com/fmtlib/fmt/pull/3129,\n  https://github.com/fmtlib/fmt/pull/3137,\n  https://github.com/fmtlib/fmt/pull/3139,\n  https://github.com/fmtlib/fmt/issues/3140,\n  https://github.com/fmtlib/fmt/pull/3142,\n  https://github.com/fmtlib/fmt/issues/3149,\n  https://github.com/fmtlib/fmt/pull/3150,\n  https://github.com/fmtlib/fmt/issues/3154,\n  https://github.com/fmtlib/fmt/issues/3163,\n  https://github.com/fmtlib/fmt/issues/3178,\n  https://github.com/fmtlib/fmt/pull/3184,\n  https://github.com/fmtlib/fmt/pull/3196,\n  https://github.com/fmtlib/fmt/issues/3204,\n  https://github.com/fmtlib/fmt/pull/3206,\n  https://github.com/fmtlib/fmt/pull/3208,\n  https://github.com/fmtlib/fmt/issues/3213,\n  https://github.com/fmtlib/fmt/pull/3216,\n  https://github.com/fmtlib/fmt/issues/3224,\n  https://github.com/fmtlib/fmt/issues/3226,\n  https://github.com/fmtlib/fmt/issues/3228,\n  https://github.com/fmtlib/fmt/pull/3229,\n  https://github.com/fmtlib/fmt/pull/3259,\n  https://github.com/fmtlib/fmt/issues/3274,\n  https://github.com/fmtlib/fmt/issues/3287,\n  https://github.com/fmtlib/fmt/pull/3288,\n  https://github.com/fmtlib/fmt/issues/3292,\n  https://github.com/fmtlib/fmt/pull/3295,\n  https://github.com/fmtlib/fmt/pull/3296,\n  https://github.com/fmtlib/fmt/issues/3298,\n  https://github.com/fmtlib/fmt/issues/3325,\n  https://github.com/fmtlib/fmt/pull/3326,\n  https://github.com/fmtlib/fmt/issues/3334,\n  https://github.com/fmtlib/fmt/issues/3342,\n  https://github.com/fmtlib/fmt/pull/3343,\n  https://github.com/fmtlib/fmt/issues/3351,\n  https://github.com/fmtlib/fmt/pull/3352,\n  https://github.com/fmtlib/fmt/pull/3362,\n  https://github.com/fmtlib/fmt/issues/3365,\n  https://github.com/fmtlib/fmt/pull/3366,\n  https://github.com/fmtlib/fmt/pull/3374,\n  https://github.com/fmtlib/fmt/issues/3377,\n  https://github.com/fmtlib/fmt/pull/3378,\n  https://github.com/fmtlib/fmt/issues/3381,\n  https://github.com/fmtlib/fmt/pull/3398,\n  https://github.com/fmtlib/fmt/pull/3413,\n  https://github.com/fmtlib/fmt/issues/3415).\n  Thanks @phprus, @gsjaardema, @NewbieOrange, @EngineLessCC, @asmaloney,\n  @HazardyKnusperkeks, @sergiud, @Youw, @thesmurph, @czudziakm,\n  @Roman-Koshelev, @chronoxor, @ShawnZhong, @russelltg, @glebm, @tmartin-gh,\n  @Zhaojun-Liu, @louiswins and @mogemimi.\n\n# 9.1.0 - 2022-08-27\n\n- `fmt::formatted_size` now works at compile time\n  (https://github.com/fmtlib/fmt/pull/3026). For example\n  ([godbolt](https://godbolt.org/z/1MW5rMdf8)):\n\n  ```c++\n  #include <fmt/compile.h>\n\n  int main() {\n    using namespace fmt::literals;\n    constexpr size_t n = fmt::formatted_size(\"{}\"_cf, 42);\n    fmt::print(\"{}\\n\", n); // prints 2\n  }\n  ```\n\n  Thanks @marksantaniello.\n\n- Fixed handling of invalid UTF-8\n  (https://github.com/fmtlib/fmt/pull/3038,\n  https://github.com/fmtlib/fmt/pull/3044,\n  https://github.com/fmtlib/fmt/pull/3056).\n  Thanks @phprus and @skeeto.\n\n- Improved Unicode support in `ostream` overloads of `print`\n  (https://github.com/fmtlib/fmt/pull/2994,\n  https://github.com/fmtlib/fmt/pull/3001,\n  https://github.com/fmtlib/fmt/pull/3025). Thanks @dimztimz.\n\n- Fixed handling of the sign specifier in localized formatting on\n  systems with 32-bit `wchar_t`\n  (https://github.com/fmtlib/fmt/issues/3041).\n\n- Added support for wide streams to `fmt::streamed`\n  (https://github.com/fmtlib/fmt/pull/2994). Thanks @phprus.\n\n- Added the `n` specifier that disables the output of delimiters when\n  formatting ranges (https://github.com/fmtlib/fmt/pull/2981,\n  https://github.com/fmtlib/fmt/pull/2983). For example\n  ([godbolt](https://godbolt.org/z/roKqGdj8c)):\n\n  ```c++\n  #include <fmt/ranges.h>\n  #include <vector>\n\n  int main() {\n    auto v = std::vector{1, 2, 3};\n    fmt::print(\"{:n}\\n\", v); // prints 1, 2, 3\n  }\n  ```\n\n  Thanks @BRevzin.\n\n- Worked around problematic `std::string_view` constructors introduced\n  in C++23 (https://github.com/fmtlib/fmt/issues/3030,\n  https://github.com/fmtlib/fmt/issues/3050). Thanks @strega-nil-ms.\n\n- Improve handling (exclusion) of recursive ranges\n  (https://github.com/fmtlib/fmt/issues/2968,\n  https://github.com/fmtlib/fmt/pull/2974). Thanks @Dani-Hub.\n\n- Improved error reporting in format string compilation\n  (https://github.com/fmtlib/fmt/issues/3055).\n\n- Improved the implementation of\n  [Dragonbox](https://github.com/jk-jeon/dragonbox), the algorithm\n  used for the default floating-point formatting\n  (https://github.com/fmtlib/fmt/pull/2984). Thanks @jk-jeon.\n\n- Fixed issues with floating-point formatting on exotic platforms.\n\n- Improved the implementation of chrono formatting\n  (https://github.com/fmtlib/fmt/pull/3010). Thanks @phprus.\n\n- Improved documentation\n  (https://github.com/fmtlib/fmt/pull/2966,\n  https://github.com/fmtlib/fmt/pull/3009,\n  https://github.com/fmtlib/fmt/issues/3020,\n  https://github.com/fmtlib/fmt/pull/3037).\n  Thanks @mwinterb, @jcelerier and @remiburtin.\n\n- Improved build configuration\n  (https://github.com/fmtlib/fmt/pull/2991,\n  https://github.com/fmtlib/fmt/pull/2995,\n  https://github.com/fmtlib/fmt/issues/3004,\n  https://github.com/fmtlib/fmt/pull/3007,\n  https://github.com/fmtlib/fmt/pull/3040).\n  Thanks @dimztimz and @hwhsu1231.\n\n- Fixed various warnings and compilation issues\n  (https://github.com/fmtlib/fmt/issues/2969,\n  https://github.com/fmtlib/fmt/pull/2971,\n  https://github.com/fmtlib/fmt/issues/2975,\n  https://github.com/fmtlib/fmt/pull/2982,\n  https://github.com/fmtlib/fmt/pull/2985,\n  https://github.com/fmtlib/fmt/issues/2988,\n  https://github.com/fmtlib/fmt/issues/2989,\n  https://github.com/fmtlib/fmt/issues/3000,\n  https://github.com/fmtlib/fmt/issues/3006,\n  https://github.com/fmtlib/fmt/issues/3014,\n  https://github.com/fmtlib/fmt/issues/3015,\n  https://github.com/fmtlib/fmt/pull/3021,\n  https://github.com/fmtlib/fmt/issues/3023,\n  https://github.com/fmtlib/fmt/pull/3024,\n  https://github.com/fmtlib/fmt/pull/3029,\n  https://github.com/fmtlib/fmt/pull/3043,\n  https://github.com/fmtlib/fmt/issues/3052,\n  https://github.com/fmtlib/fmt/pull/3053,\n  https://github.com/fmtlib/fmt/pull/3054).\n  Thanks @h-friederich, @dimztimz, @olupton, @bernhardmgruber and @phprus.\n\n# 9.0.0 - 2022-07-04\n\n- Switched to the internal floating point formatter for all decimal\n  presentation formats. In particular this results in consistent\n  rounding on all platforms and removing the `s[n]printf` fallback for\n  decimal FP formatting.\n\n- Compile-time floating point formatting no longer requires the\n  header-only mode. For example\n  ([godbolt](https://godbolt.org/z/G37PTeG3b)):\n\n  ```c++\n  #include <array>\n  #include <fmt/compile.h>\n\n  consteval auto compile_time_dtoa(double value) -> std::array<char, 10> {\n    auto result = std::array<char, 10>();\n    fmt::format_to(result.data(), FMT_COMPILE(\"{}\"), value);\n    return result;\n  }\n\n  constexpr auto answer = compile_time_dtoa(0.42);\n  ```\n\n  works with the default settings.\n\n- Improved the implementation of\n  [Dragonbox](https://github.com/jk-jeon/dragonbox), the algorithm\n  used for the default floating-point formatting\n  (https://github.com/fmtlib/fmt/pull/2713,\n  https://github.com/fmtlib/fmt/pull/2750). Thanks @jk-jeon.\n\n- Made `fmt::to_string` work with `__float128`. This uses the internal\n  FP formatter and works even on system without `__float128` support\n  in `[s]printf`.\n\n- Disabled automatic `std::ostream` insertion operator (`operator<<`)\n  discovery when `fmt/ostream.h` is included to prevent ODR\n  violations. You can get the old behavior by defining\n  `FMT_DEPRECATED_OSTREAM` but this will be removed in the next major\n  release. Use `fmt::streamed` or `fmt::ostream_formatter` to enable\n  formatting via `std::ostream` instead.\n\n- Added `fmt::ostream_formatter` that can be used to write `formatter`\n  specializations that perform formatting via `std::ostream`. For\n  example ([godbolt](https://godbolt.org/z/5sEc5qMsf)):\n\n  ```c++\n  #include <fmt/ostream.h>\n\n  struct date {\n    int year, month, day;\n\n    friend std::ostream& operator<<(std::ostream& os, const date& d) {\n      return os << d.year << '-' << d.month << '-' << d.day;\n    }\n  };\n\n  template <> struct fmt::formatter<date> : ostream_formatter {};\n\n  std::string s = fmt::format(\"The date is {}\", date{2012, 12, 9});\n  // s == \"The date is 2012-12-9\"\n  ```\n\n- Added the `fmt::streamed` function that takes an object and formats\n  it via `std::ostream`. For example\n  ([godbolt](https://godbolt.org/z/5G3346G1f)):\n\n  ```c++\n  #include <thread>\n  #include <fmt/ostream.h>\n\n  int main() {\n    fmt::print(\"Current thread id: {}\\n\",\n               fmt::streamed(std::this_thread::get_id()));\n  }\n  ```\n\n  Note that `fmt/std.h` provides a `formatter` specialization for\n  `std::thread::id` so you don\\'t need to format it via\n  `std::ostream`.\n\n- Deprecated implicit conversions of unscoped enums to integers for\n  consistency with scoped enums.\n\n- Added an argument-dependent lookup based `format_as` extension API\n  to simplify formatting of enums.\n\n- Added experimental `std::variant` formatting support\n  (https://github.com/fmtlib/fmt/pull/2941). For example\n  ([godbolt](https://godbolt.org/z/KG9z6cq68)):\n\n  ```c++\n  #include <variant>\n  #include <fmt/std.h>\n\n  int main() {\n    auto v = std::variant<int, std::string>(42);\n    fmt::print(\"{}\\n\", v);\n  }\n  ```\n\n  prints:\n\n      variant(42)\n\n  Thanks @jehelset.\n\n- Added experimental `std::filesystem::path` formatting support\n  (https://github.com/fmtlib/fmt/issues/2865,\n  https://github.com/fmtlib/fmt/pull/2902,\n  https://github.com/fmtlib/fmt/issues/2917,\n  https://github.com/fmtlib/fmt/pull/2918). For example\n  ([godbolt](https://godbolt.org/z/o44dMexEb)):\n\n  ```c++\n  #include <filesystem>\n  #include <fmt/std.h>\n\n  int main() {\n    fmt::print(\"There is no place like {}.\", std::filesystem::path(\"/home\"));\n  }\n  ```\n\n  prints:\n\n      There is no place like \"/home\".\n\n  Thanks @phprus.\n\n- Added a `std::thread::id` formatter to `fmt/std.h`. For example\n  ([godbolt](https://godbolt.org/z/j1azbYf3E)):\n\n  ```c++\n  #include <thread>\n  #include <fmt/std.h>\n\n  int main() {\n    fmt::print(\"Current thread id: {}\\n\", std::this_thread::get_id());\n  }\n  ```\n\n- Added `fmt::styled` that applies a text style to an individual\n  argument (https://github.com/fmtlib/fmt/pull/2793). For\n  example ([godbolt](https://godbolt.org/z/vWGW7v5M6)):\n\n  ```c++\n  #include <fmt/chrono.h>\n  #include <fmt/color.h>\n\n  int main() {\n    auto now = std::chrono::system_clock::now();\n    fmt::print(\n      \"[{}] {}: {}\\n\",\n      fmt::styled(now, fmt::emphasis::bold),\n      fmt::styled(\"error\", fg(fmt::color::red)),\n      \"something went wrong\");\n  }\n  ```\n\n  prints\n\n  ![](https://user-images.githubusercontent.com/576385/175071215-12809244-dab0-4005-96d8-7cd911c964d5.png)\n\n  Thanks @rbrugo.\n\n- Made `fmt::print` overload for text styles correctly handle UTF-8\n  (https://github.com/fmtlib/fmt/issues/2681,\n  https://github.com/fmtlib/fmt/pull/2701). Thanks @AlexGuteniev.\n\n- Fixed Unicode handling when writing to an ostream.\n\n- Added support for nested specifiers to range formatting\n  (https://github.com/fmtlib/fmt/pull/2673). For example\n  ([godbolt](https://godbolt.org/z/xd3Gj38cf)):\n\n  ```c++\n  #include <vector>\n  #include <fmt/ranges.h>\n\n  int main() {\n    fmt::print(\"{::#x}\\n\", std::vector{10, 20, 30});\n  }\n  ```\n\n  prints `[0xa, 0x14, 0x1e]`.\n\n  Thanks @BRevzin.\n\n- Implemented escaping of wide strings in ranges\n  (https://github.com/fmtlib/fmt/pull/2904). Thanks @phprus.\n\n- Added support for ranges with `begin` / `end` found via the\n  argument-dependent lookup\n  (https://github.com/fmtlib/fmt/pull/2807). Thanks @rbrugo.\n\n- Fixed formatting of certain kinds of ranges of ranges\n  (https://github.com/fmtlib/fmt/pull/2787). Thanks @BRevzin.\n\n- Fixed handling of maps with element types other than `std::pair`\n  (https://github.com/fmtlib/fmt/pull/2944). Thanks @BrukerJWD.\n\n- Made tuple formatter enabled only if elements are formattable\n  (https://github.com/fmtlib/fmt/issues/2939,\n  https://github.com/fmtlib/fmt/pull/2940). Thanks @jehelset.\n\n- Made `fmt::join` compatible with format string compilation\n  (https://github.com/fmtlib/fmt/issues/2719,\n  https://github.com/fmtlib/fmt/pull/2720). Thanks @phprus.\n\n- Made compile-time checks work with named arguments of custom types\n  and `std::ostream` `print` overloads\n  (https://github.com/fmtlib/fmt/issues/2816,\n  https://github.com/fmtlib/fmt/issues/2817,\n  https://github.com/fmtlib/fmt/pull/2819). Thanks @timsong-cpp.\n\n- Removed `make_args_checked` because it is no longer needed for\n  compile-time checks\n  (https://github.com/fmtlib/fmt/pull/2760). Thanks @phprus.\n\n- Removed the following deprecated APIs: `_format`, `arg_join`, the\n  `format_to` overload that takes a memory buffer, `[v]fprintf` that\n  takes an `ostream`.\n\n- Removed the deprecated implicit conversion of `[const] signed char*`\n  and `[const] unsigned char*` to C strings.\n\n- Removed the deprecated `fmt/locale.h`.\n\n- Replaced the deprecated `fileno()` with `descriptor()` in\n  `buffered_file`.\n\n- Moved `to_string_view` to the `detail` namespace since it\\'s an\n  implementation detail.\n\n- Made access mode of a created file consistent with `fopen` by\n  setting `S_IWGRP` and `S_IWOTH`\n  (https://github.com/fmtlib/fmt/pull/2733). Thanks @arogge.\n\n- Removed a redundant buffer resize when formatting to `std::ostream`\n  (https://github.com/fmtlib/fmt/issues/2842,\n  https://github.com/fmtlib/fmt/pull/2843). Thanks @jcelerier.\n\n- Made precision computation for strings consistent with width\n  (https://github.com/fmtlib/fmt/issues/2888).\n\n- Fixed handling of locale separators in floating point formatting\n  (https://github.com/fmtlib/fmt/issues/2830).\n\n- Made sign specifiers work with `__int128_t`\n  (https://github.com/fmtlib/fmt/issues/2773).\n\n- Improved support for systems such as CHERI with extra data stored in\n  pointers (https://github.com/fmtlib/fmt/pull/2932).\n  Thanks @davidchisnall.\n\n- Improved documentation\n  (https://github.com/fmtlib/fmt/pull/2706,\n  https://github.com/fmtlib/fmt/pull/2712,\n  https://github.com/fmtlib/fmt/pull/2789,\n  https://github.com/fmtlib/fmt/pull/2803,\n  https://github.com/fmtlib/fmt/pull/2805,\n  https://github.com/fmtlib/fmt/pull/2815,\n  https://github.com/fmtlib/fmt/pull/2924).\n  Thanks @BRevzin, @Pokechu22, @setoye, @rtobar, @rbrugo, @anoonD and\n  @leha-bot.\n\n- Improved build configuration\n  (https://github.com/fmtlib/fmt/pull/2766,\n  https://github.com/fmtlib/fmt/pull/2772,\n  https://github.com/fmtlib/fmt/pull/2836,\n  https://github.com/fmtlib/fmt/pull/2852,\n  https://github.com/fmtlib/fmt/pull/2907,\n  https://github.com/fmtlib/fmt/pull/2913,\n  https://github.com/fmtlib/fmt/pull/2914).\n  Thanks @kambala-decapitator, @mattiasljungstrom, @kieselnb, @nathannaveen\n  and @Vertexwahn.\n\n- Fixed various warnings and compilation issues\n  (https://github.com/fmtlib/fmt/issues/2408,\n  https://github.com/fmtlib/fmt/issues/2507,\n  https://github.com/fmtlib/fmt/issues/2697,\n  https://github.com/fmtlib/fmt/issues/2715,\n  https://github.com/fmtlib/fmt/issues/2717,\n  https://github.com/fmtlib/fmt/pull/2722,\n  https://github.com/fmtlib/fmt/pull/2724,\n  https://github.com/fmtlib/fmt/pull/2725,\n  https://github.com/fmtlib/fmt/issues/2726,\n  https://github.com/fmtlib/fmt/pull/2728,\n  https://github.com/fmtlib/fmt/pull/2732,\n  https://github.com/fmtlib/fmt/issues/2738,\n  https://github.com/fmtlib/fmt/pull/2742,\n  https://github.com/fmtlib/fmt/issues/2744,\n  https://github.com/fmtlib/fmt/issues/2745,\n  https://github.com/fmtlib/fmt/issues/2746,\n  https://github.com/fmtlib/fmt/issues/2754,\n  https://github.com/fmtlib/fmt/pull/2755,\n  https://github.com/fmtlib/fmt/issues/2757,\n  https://github.com/fmtlib/fmt/pull/2758,\n  https://github.com/fmtlib/fmt/issues/2761,\n  https://github.com/fmtlib/fmt/pull/2762,\n  https://github.com/fmtlib/fmt/issues/2763,\n  https://github.com/fmtlib/fmt/pull/2765,\n  https://github.com/fmtlib/fmt/issues/2769,\n  https://github.com/fmtlib/fmt/pull/2770,\n  https://github.com/fmtlib/fmt/issues/2771,\n  https://github.com/fmtlib/fmt/issues/2777,\n  https://github.com/fmtlib/fmt/pull/2779,\n  https://github.com/fmtlib/fmt/pull/2782,\n  https://github.com/fmtlib/fmt/pull/2783,\n  https://github.com/fmtlib/fmt/issues/2794,\n  https://github.com/fmtlib/fmt/issues/2796,\n  https://github.com/fmtlib/fmt/pull/2797,\n  https://github.com/fmtlib/fmt/pull/2801,\n  https://github.com/fmtlib/fmt/pull/2802,\n  https://github.com/fmtlib/fmt/issues/2808,\n  https://github.com/fmtlib/fmt/issues/2818,\n  https://github.com/fmtlib/fmt/pull/2819,\n  https://github.com/fmtlib/fmt/issues/2829,\n  https://github.com/fmtlib/fmt/issues/2835,\n  https://github.com/fmtlib/fmt/issues/2848,\n  https://github.com/fmtlib/fmt/issues/2860,\n  https://github.com/fmtlib/fmt/pull/2861,\n  https://github.com/fmtlib/fmt/pull/2882,\n  https://github.com/fmtlib/fmt/issues/2886,\n  https://github.com/fmtlib/fmt/issues/2891,\n  https://github.com/fmtlib/fmt/pull/2892,\n  https://github.com/fmtlib/fmt/issues/2895,\n  https://github.com/fmtlib/fmt/issues/2896,\n  https://github.com/fmtlib/fmt/pull/2903,\n  https://github.com/fmtlib/fmt/issues/2906,\n  https://github.com/fmtlib/fmt/issues/2908,\n  https://github.com/fmtlib/fmt/pull/2909,\n  https://github.com/fmtlib/fmt/issues/2920,\n  https://github.com/fmtlib/fmt/pull/2922,\n  https://github.com/fmtlib/fmt/pull/2927,\n  https://github.com/fmtlib/fmt/pull/2929,\n  https://github.com/fmtlib/fmt/issues/2936,\n  https://github.com/fmtlib/fmt/pull/2937,\n  https://github.com/fmtlib/fmt/pull/2938,\n  https://github.com/fmtlib/fmt/pull/2951,\n  https://github.com/fmtlib/fmt/issues/2954,\n  https://github.com/fmtlib/fmt/pull/2957,\n  https://github.com/fmtlib/fmt/issues/2958,\n  https://github.com/fmtlib/fmt/pull/2960).\n  Thanks @matrackif @Tobi823, @ivan-volnov, @VasiliPupkin256,\n  @federico-busato, @barcharcraz, @jk-jeon, @HazardyKnusperkeks, @dalboris,\n  @seanm, @gsjaardema, @timsong-cpp, @seanm, @frithrah, @chronoxor, @Agga,\n  @madmaxoft, @JurajX, @phprus and @Dani-Hub.\n\n# 8.1.1 - 2022-01-06\n\n- Restored ABI compatibility with version 8.0.x\n  (https://github.com/fmtlib/fmt/issues/2695,\n  https://github.com/fmtlib/fmt/pull/2696). Thanks @saraedum.\n- Fixed chrono formatting on big endian systems\n  (https://github.com/fmtlib/fmt/issues/2698,\n  https://github.com/fmtlib/fmt/pull/2699).\n  Thanks @phprus and @xvitaly.\n- Fixed a linkage error with mingw\n  (https://github.com/fmtlib/fmt/issues/2691,\n  https://github.com/fmtlib/fmt/pull/2692). Thanks @rbberger.\n\n# 8.1.0 - 2022-01-02\n\n- Optimized chrono formatting\n  (https://github.com/fmtlib/fmt/pull/2500,\n  https://github.com/fmtlib/fmt/pull/2537,\n  https://github.com/fmtlib/fmt/issues/2541,\n  https://github.com/fmtlib/fmt/pull/2544,\n  https://github.com/fmtlib/fmt/pull/2550,\n  https://github.com/fmtlib/fmt/pull/2551,\n  https://github.com/fmtlib/fmt/pull/2576,\n  https://github.com/fmtlib/fmt/issues/2577,\n  https://github.com/fmtlib/fmt/pull/2586,\n  https://github.com/fmtlib/fmt/pull/2591,\n  https://github.com/fmtlib/fmt/pull/2594,\n  https://github.com/fmtlib/fmt/pull/2602,\n  https://github.com/fmtlib/fmt/pull/2617,\n  https://github.com/fmtlib/fmt/issues/2628,\n  https://github.com/fmtlib/fmt/pull/2633,\n  https://github.com/fmtlib/fmt/issues/2670,\n  https://github.com/fmtlib/fmt/pull/2671).\n\n  Processing of some specifiers such as `%z` and `%Y` is now up to\n  10-20 times faster, for example on GCC 11 with libstdc++:\n\n      ----------------------------------------------------------------------------\n      Benchmark                                  Before             After\n      ----------------------------------------------------------------------------\n      FMTFormatter_z                             261 ns             26.3 ns\n      FMTFormatterCompile_z                      246 ns             11.6 ns\n      FMTFormatter_Y                             263 ns             26.1 ns\n      FMTFormatterCompile_Y                      244 ns             10.5 ns\n      ----------------------------------------------------------------------------\n\n  Thanks @phprus and @toughengineer.\n\n- Implemented subsecond formatting for chrono durations\n  (https://github.com/fmtlib/fmt/pull/2623). For example\n  ([godbolt](https://godbolt.org/z/es7vWTETe)):\n\n  ```c++\n  #include <fmt/chrono.h>\n\n  int main() {\n    fmt::print(\"{:%S}\", std::chrono::milliseconds(1234));\n  }\n  ```\n\n  prints \\\"01.234\\\".\n\n  Thanks @matrackif.\n\n- Fixed handling of precision 0 when formatting chrono durations\n  (https://github.com/fmtlib/fmt/issues/2587,\n  https://github.com/fmtlib/fmt/pull/2588). Thanks @lukester1975.\n\n- Fixed an overflow on invalid inputs in the `tm` formatter\n  (https://github.com/fmtlib/fmt/pull/2564). Thanks @phprus.\n\n- Added `fmt::group_digits` that formats integers with a non-localized\n  digit separator (comma) for groups of three digits. For example\n  ([godbolt](https://godbolt.org/z/TxGxG9Poq)):\n\n  ```c++\n  #include <fmt/format.h>\n\n  int main() {\n    fmt::print(\"{} dollars\", fmt::group_digits(1000000));\n  }\n  ```\n\n  prints \\\"1,000,000 dollars\\\".\n\n- Added support for faint, conceal, reverse and blink text styles\n  (https://github.com/fmtlib/fmt/pull/2394):\n\n  <https://user-images.githubusercontent.com/576385/147710227-c68f5317-f8fa-42c3-9123-7c4ba3c398cb.mp4>\n\n  Thanks @benit8 and @data-man.\n\n- Added experimental support for compile-time floating point\n  formatting (https://github.com/fmtlib/fmt/pull/2426,\n  https://github.com/fmtlib/fmt/pull/2470). It is currently\n  limited to the header-only mode. Thanks @alexezeder.\n\n- Added UDL-based named argument support to compile-time format string\n  checks (https://github.com/fmtlib/fmt/issues/2640,\n  https://github.com/fmtlib/fmt/pull/2649). For example\n  ([godbolt](https://godbolt.org/z/ohGbbvonv)):\n\n  ```c++\n  #include <fmt/format.h>\n\n  int main() {\n    using namespace fmt::literals;\n    fmt::print(\"{answer:s}\", \"answer\"_a=42);\n  }\n  ```\n\n  gives a compile-time error on compilers with C++20 `consteval` and\n  non-type template parameter support (gcc 10+) because `s` is not a\n  valid format specifier for an integer.\n\n  Thanks @alexezeder.\n\n- Implemented escaping of string range elements. For example\n  ([godbolt](https://godbolt.org/z/rKvM1vKf3)):\n\n  ```c++\n  #include <fmt/ranges.h>\n  #include <vector>\n\n  int main() {\n    fmt::print(\"{}\", std::vector<std::string>{\"\\naan\"});\n  }\n  ```\n\n  is now printed as:\n\n      [\"\\naan\"]\n\n  instead of:\n\n      [\"\n      aan\"]\n\n- Added an experimental `?` specifier for escaping strings.\n  (https://github.com/fmtlib/fmt/pull/2674). Thanks @BRevzin.\n\n- Switched to JSON-like representation of maps and sets for\n  consistency with Python\\'s `str.format`. For example\n  ([godbolt](https://godbolt.org/z/seKjoY9W5)):\n\n  ```c++\n  #include <fmt/ranges.h>\n  #include <map>\n\n  int main() {\n    fmt::print(\"{}\", std::map<std::string, int>{{\"answer\", 42}});\n  }\n  ```\n\n  is now printed as:\n\n      {\"answer\": 42}\n\n- Extended `fmt::join` to support C++20-only ranges\n  (https://github.com/fmtlib/fmt/pull/2549). Thanks @BRevzin.\n\n- Optimized handling of non-const-iterable ranges and implemented\n  initial support for non-const-formattable types.\n\n- Disabled implicit conversions of scoped enums to integers that was\n  accidentally introduced in earlier versions\n  (https://github.com/fmtlib/fmt/pull/1841).\n\n- Deprecated implicit conversion of `[const] signed char*` and\n  `[const] unsigned char*` to C strings.\n\n- Deprecated `_format`, a legacy UDL-based format API\n  (https://github.com/fmtlib/fmt/pull/2646). Thanks @alexezeder.\n\n- Marked `format`, `formatted_size` and `to_string` as `[[nodiscard]]`\n  (https://github.com/fmtlib/fmt/pull/2612). @0x8000-0000.\n\n- Added missing diagnostic when trying to format function and member\n  pointers as well as objects convertible to pointers which is\n  explicitly disallowed\n  (https://github.com/fmtlib/fmt/issues/2598,\n  https://github.com/fmtlib/fmt/pull/2609,\n  https://github.com/fmtlib/fmt/pull/2610). Thanks @AlexGuteniev.\n\n- Optimized writing to a contiguous buffer with `format_to_n`\n  (https://github.com/fmtlib/fmt/pull/2489). Thanks @Roman-Koshelev.\n\n- Optimized writing to non-`char` buffers\n  (https://github.com/fmtlib/fmt/pull/2477). Thanks @Roman-Koshelev.\n\n- Decimal point is now localized when using the `L` specifier.\n\n- Improved floating point formatter implementation\n  (https://github.com/fmtlib/fmt/pull/2498,\n  https://github.com/fmtlib/fmt/pull/2499). Thanks @Roman-Koshelev.\n\n- Fixed handling of very large precision in fixed format\n  (https://github.com/fmtlib/fmt/pull/2616).\n\n- Made a table of cached powers used in FP formatting static\n  (https://github.com/fmtlib/fmt/pull/2509). Thanks @jk-jeon.\n\n- Resolved a lookup ambiguity with C++20 format-related functions due\n  to ADL (https://github.com/fmtlib/fmt/issues/2639,\n  https://github.com/fmtlib/fmt/pull/2641). Thanks @mkurdej.\n\n- Removed unnecessary inline namespace qualification\n  (https://github.com/fmtlib/fmt/issues/2642,\n  https://github.com/fmtlib/fmt/pull/2643). Thanks @mkurdej.\n\n- Implemented argument forwarding in `format_to_n`\n  (https://github.com/fmtlib/fmt/issues/2462,\n  https://github.com/fmtlib/fmt/pull/2463). Thanks @owent.\n\n- Fixed handling of implicit conversions in `fmt::to_string` and\n  format string compilation\n  (https://github.com/fmtlib/fmt/issues/2565).\n\n- Changed the default access mode of files created by\n  `fmt::output_file` to `-rw-r--r--` for consistency with `fopen`\n  (https://github.com/fmtlib/fmt/issues/2530).\n\n- Make `fmt::ostream::flush` public\n  (https://github.com/fmtlib/fmt/issues/2435).\n\n- Improved C++14/17 attribute detection\n  (https://github.com/fmtlib/fmt/pull/2615). Thanks @AlexGuteniev.\n\n- Improved `consteval` detection for MSVC\n  (https://github.com/fmtlib/fmt/pull/2559). Thanks @DanielaE.\n\n- Improved documentation\n  (https://github.com/fmtlib/fmt/issues/2406,\n  https://github.com/fmtlib/fmt/pull/2446,\n  https://github.com/fmtlib/fmt/issues/2493,\n  https://github.com/fmtlib/fmt/issues/2513,\n  https://github.com/fmtlib/fmt/pull/2515,\n  https://github.com/fmtlib/fmt/issues/2522,\n  https://github.com/fmtlib/fmt/pull/2562,\n  https://github.com/fmtlib/fmt/pull/2575,\n  https://github.com/fmtlib/fmt/pull/2606,\n  https://github.com/fmtlib/fmt/pull/2620,\n  https://github.com/fmtlib/fmt/issues/2676).\n  Thanks @sobolevn, @UnePierre, @zhsj, @phprus, @ericcurtin and @Lounarok.\n\n- Improved fuzzers and added a fuzzer for chrono timepoint formatting\n  (https://github.com/fmtlib/fmt/pull/2461,\n  https://github.com/fmtlib/fmt/pull/2469). @pauldreik,\n\n- Added the `FMT_SYSTEM_HEADERS` CMake option setting which marks\n  {fmt}\\'s headers as system. It can be used to suppress warnings\n  (https://github.com/fmtlib/fmt/issues/2644,\n  https://github.com/fmtlib/fmt/pull/2651). Thanks @alexezeder.\n\n- Added the Bazel build system support\n  (https://github.com/fmtlib/fmt/pull/2505,\n  https://github.com/fmtlib/fmt/pull/2516). Thanks @Vertexwahn.\n\n- Improved build configuration and tests\n  (https://github.com/fmtlib/fmt/issues/2437,\n  https://github.com/fmtlib/fmt/pull/2558,\n  https://github.com/fmtlib/fmt/pull/2648,\n  https://github.com/fmtlib/fmt/pull/2650,\n  https://github.com/fmtlib/fmt/pull/2663,\n  https://github.com/fmtlib/fmt/pull/2677).\n  Thanks @DanielaE, @alexezeder and @phprus.\n\n- Fixed various warnings and compilation issues\n  (https://github.com/fmtlib/fmt/pull/2353,\n  https://github.com/fmtlib/fmt/pull/2356,\n  https://github.com/fmtlib/fmt/pull/2399,\n  https://github.com/fmtlib/fmt/issues/2408,\n  https://github.com/fmtlib/fmt/pull/2414,\n  https://github.com/fmtlib/fmt/pull/2427,\n  https://github.com/fmtlib/fmt/pull/2432,\n  https://github.com/fmtlib/fmt/pull/2442,\n  https://github.com/fmtlib/fmt/pull/2434,\n  https://github.com/fmtlib/fmt/issues/2439,\n  https://github.com/fmtlib/fmt/pull/2447,\n  https://github.com/fmtlib/fmt/pull/2450,\n  https://github.com/fmtlib/fmt/issues/2455,\n  https://github.com/fmtlib/fmt/issues/2465,\n  https://github.com/fmtlib/fmt/issues/2472,\n  https://github.com/fmtlib/fmt/issues/2474,\n  https://github.com/fmtlib/fmt/pull/2476,\n  https://github.com/fmtlib/fmt/issues/2478,\n  https://github.com/fmtlib/fmt/issues/2479,\n  https://github.com/fmtlib/fmt/issues/2481,\n  https://github.com/fmtlib/fmt/pull/2482,\n  https://github.com/fmtlib/fmt/pull/2483,\n  https://github.com/fmtlib/fmt/issues/2490,\n  https://github.com/fmtlib/fmt/pull/2491,\n  https://github.com/fmtlib/fmt/pull/2510,\n  https://github.com/fmtlib/fmt/pull/2518,\n  https://github.com/fmtlib/fmt/issues/2528,\n  https://github.com/fmtlib/fmt/pull/2529,\n  https://github.com/fmtlib/fmt/pull/2539,\n  https://github.com/fmtlib/fmt/issues/2540,\n  https://github.com/fmtlib/fmt/pull/2545,\n  https://github.com/fmtlib/fmt/pull/2555,\n  https://github.com/fmtlib/fmt/issues/2557,\n  https://github.com/fmtlib/fmt/issues/2570,\n  https://github.com/fmtlib/fmt/pull/2573,\n  https://github.com/fmtlib/fmt/pull/2582,\n  https://github.com/fmtlib/fmt/issues/2605,\n  https://github.com/fmtlib/fmt/pull/2611,\n  https://github.com/fmtlib/fmt/pull/2647,\n  https://github.com/fmtlib/fmt/issues/2627,\n  https://github.com/fmtlib/fmt/pull/2630,\n  https://github.com/fmtlib/fmt/issues/2635,\n  https://github.com/fmtlib/fmt/issues/2638,\n  https://github.com/fmtlib/fmt/issues/2653,\n  https://github.com/fmtlib/fmt/issues/2654,\n  https://github.com/fmtlib/fmt/issues/2661,\n  https://github.com/fmtlib/fmt/pull/2664,\n  https://github.com/fmtlib/fmt/pull/2684).\n  Thanks @DanielaE, @mwinterb, @cdacamar, @TrebledJ, @bodomartin, @cquammen,\n  @white238, @mmarkeloff, @palacaze, @jcelerier, @mborn-adi, @BrukerJWD,\n  @spyridon97, @phprus, @oliverlee, @joshessman-llnl, @akohlmey, @timkalu,\n  @olupton, @Acretock, @alexezeder, @andrewcorrigan, @lucpelletier and\n  @HazardyKnusperkeks.\n\n# 8.0.1 - 2021-07-02\n\n- Fixed the version number in the inline namespace\n  (https://github.com/fmtlib/fmt/issues/2374).\n- Added a missing presentation type check for `std::string`\n  (https://github.com/fmtlib/fmt/issues/2402).\n- Fixed a linkage error when mixing code built with clang and gcc\n  (https://github.com/fmtlib/fmt/issues/2377).\n- Fixed documentation issues\n  (https://github.com/fmtlib/fmt/pull/2396,\n  https://github.com/fmtlib/fmt/issues/2403,\n  https://github.com/fmtlib/fmt/issues/2406). Thanks @mkurdej.\n- Removed dead code in FP formatter (\n  https://github.com/fmtlib/fmt/pull/2398). Thanks @javierhonduco.\n- Fixed various warnings and compilation issues\n  (https://github.com/fmtlib/fmt/issues/2351,\n  https://github.com/fmtlib/fmt/issues/2359,\n  https://github.com/fmtlib/fmt/pull/2365,\n  https://github.com/fmtlib/fmt/issues/2368,\n  https://github.com/fmtlib/fmt/pull/2370,\n  https://github.com/fmtlib/fmt/pull/2376,\n  https://github.com/fmtlib/fmt/pull/2381,\n  https://github.com/fmtlib/fmt/pull/2382,\n  https://github.com/fmtlib/fmt/issues/2386,\n  https://github.com/fmtlib/fmt/pull/2389,\n  https://github.com/fmtlib/fmt/pull/2395,\n  https://github.com/fmtlib/fmt/pull/2397,\n  https://github.com/fmtlib/fmt/issues/2400,\n  https://github.com/fmtlib/fmt/issues/2401,\n  https://github.com/fmtlib/fmt/pull/2407).\n  Thanks @zx2c4, @AidanSun05, @mattiasljungstrom, @joemmett, @erengy,\n  @patlkli, @gsjaardema and @phprus.\n\n# 8.0.0 - 2021-06-21\n\n- Enabled compile-time format string checks by default. For example\n  ([godbolt](https://godbolt.org/z/sMxcohGjz)):\n\n  ```c++\n  #include <fmt/core.h>\n\n  int main() {\n    fmt::print(\"{:d}\", \"I am not a number\");\n  }\n  ```\n\n  gives a compile-time error on compilers with C++20 `consteval`\n  support (gcc 10+, clang 11+) because `d` is not a valid format\n  specifier for a string.\n\n  To pass a runtime string wrap it in `fmt::runtime`:\n\n  ```c++\n  fmt::print(fmt::runtime(\"{:d}\"), \"I am not a number\");\n  ```\n\n- Added compile-time formatting\n  (https://github.com/fmtlib/fmt/pull/2019,\n  https://github.com/fmtlib/fmt/pull/2044,\n  https://github.com/fmtlib/fmt/pull/2056,\n  https://github.com/fmtlib/fmt/pull/2072,\n  https://github.com/fmtlib/fmt/pull/2075,\n  https://github.com/fmtlib/fmt/issues/2078,\n  https://github.com/fmtlib/fmt/pull/2129,\n  https://github.com/fmtlib/fmt/pull/2326). For example\n  ([godbolt](https://godbolt.org/z/Mxx9d89jM)):\n\n  ```c++\n  #include <fmt/compile.h>\n\n  consteval auto compile_time_itoa(int value) -> std::array<char, 10> {\n    auto result = std::array<char, 10>();\n    fmt::format_to(result.data(), FMT_COMPILE(\"{}\"), value);\n    return result;\n  }\n\n  constexpr auto answer = compile_time_itoa(42);\n  ```\n\n  Most of the formatting functionality is available at compile time\n  with a notable exception of floating-point numbers and pointers.\n  Thanks @alexezeder.\n\n- Optimized handling of format specifiers during format string\n  compilation. For example, hexadecimal formatting (`\"{:x}\"`) is now\n  3-7x faster than before when using `format_to` with format string\n  compilation and a stack-allocated buffer\n  (https://github.com/fmtlib/fmt/issues/1944).\n\n  Before (7.1.3):\n\n      ----------------------------------------------------------------------------\n      Benchmark                                  Time             CPU   Iterations\n      ----------------------------------------------------------------------------\n      FMTCompileOld/0                         15.5 ns         15.5 ns     43302898\n      FMTCompileOld/42                        16.6 ns         16.6 ns     43278267\n      FMTCompileOld/273123                    18.7 ns         18.6 ns     37035861\n      FMTCompileOld/9223372036854775807       19.4 ns         19.4 ns     35243000\n      ----------------------------------------------------------------------------\n\n  After (8.x):\n\n      ----------------------------------------------------------------------------\n      Benchmark                                  Time             CPU   Iterations\n      ----------------------------------------------------------------------------\n      FMTCompileNew/0                         1.99 ns         1.99 ns    360523686\n      FMTCompileNew/42                        2.33 ns         2.33 ns    279865664\n      FMTCompileNew/273123                    3.72 ns         3.71 ns    190230315\n      FMTCompileNew/9223372036854775807       5.28 ns         5.26 ns    130711631\n      ----------------------------------------------------------------------------\n\n  It is even faster than `std::to_chars` from libc++ compiled with\n  clang on macOS:\n\n      ----------------------------------------------------------------------------\n      Benchmark                                  Time             CPU   Iterations\n      ----------------------------------------------------------------------------\n      ToChars/0                               4.42 ns         4.41 ns    160196630\n      ToChars/42                              5.00 ns         4.98 ns    140735201\n      ToChars/273123                          7.26 ns         7.24 ns     95784130\n      ToChars/9223372036854775807             8.77 ns         8.75 ns     75872534\n      ----------------------------------------------------------------------------\n\n  In other cases, especially involving `std::string` construction, the\n  speed up is usually lower because handling format specifiers takes a\n  smaller fraction of the total time.\n\n- Added the `_cf` user-defined literal to represent a compiled format\n  string. It can be used instead of the `FMT_COMPILE` macro\n  (https://github.com/fmtlib/fmt/pull/2043,\n  https://github.com/fmtlib/fmt/pull/2242):\n\n  ```c++\n  #include <fmt/compile.h>\n\n  using namespace fmt::literals;\n  auto s = fmt::format(FMT_COMPILE(\"{}\"), 42); // 🙁 not modern\n  auto s = fmt::format(\"{}\"_cf, 42);           // 🙂 modern as hell\n  ```\n\n  It requires compiler support for class types in non-type template\n  parameters (a C++20 feature) which is available in GCC 9.3+.\n  Thanks @alexezeder.\n\n- Format string compilation now requires `format` functions of\n  `formatter` specializations for user-defined types to be `const`:\n\n  ```c++\n  template <> struct fmt::formatter<my_type>: formatter<string_view> {\n    template <typename FormatContext>\n    auto format(my_type obj, FormatContext& ctx) const {  // Note const here.\n      // ...\n    }\n  };\n  ```\n\n- Added UDL-based named argument support to format string compilation\n  (https://github.com/fmtlib/fmt/pull/2243,\n  https://github.com/fmtlib/fmt/pull/2281). For example:\n\n  ```c++\n  #include <fmt/compile.h>\n\n  using namespace fmt::literals;\n  auto s = fmt::format(FMT_COMPILE(\"{answer}\"), \"answer\"_a = 42);\n  ```\n\n  Here the argument named \\\"answer\\\" is resolved at compile time with\n  no runtime overhead. Thanks @alexezeder.\n\n- Added format string compilation support to `fmt::print`\n  (https://github.com/fmtlib/fmt/issues/2280,\n  https://github.com/fmtlib/fmt/pull/2304). Thanks @alexezeder.\n\n- Added initial support for compiling {fmt} as a C++20 module\n  (https://github.com/fmtlib/fmt/pull/2235,\n  https://github.com/fmtlib/fmt/pull/2240,\n  https://github.com/fmtlib/fmt/pull/2260,\n  https://github.com/fmtlib/fmt/pull/2282,\n  https://github.com/fmtlib/fmt/pull/2283,\n  https://github.com/fmtlib/fmt/pull/2288,\n  https://github.com/fmtlib/fmt/pull/2298,\n  https://github.com/fmtlib/fmt/pull/2306,\n  https://github.com/fmtlib/fmt/pull/2307,\n  https://github.com/fmtlib/fmt/pull/2309,\n  https://github.com/fmtlib/fmt/pull/2318,\n  https://github.com/fmtlib/fmt/pull/2324,\n  https://github.com/fmtlib/fmt/pull/2332,\n  https://github.com/fmtlib/fmt/pull/2340). Thanks @DanielaE.\n\n- Made symbols private by default reducing shared library size\n  (https://github.com/fmtlib/fmt/pull/2301). For example\n  there was a \\~15% reported reduction on one platform. Thanks @sergiud.\n\n- Optimized includes making the result of preprocessing `fmt/format.h`\n  \\~20% smaller with libstdc++/C++20 and slightly improving build\n  times (https://github.com/fmtlib/fmt/issues/1998).\n\n- Added support of ranges with non-const `begin` / `end`\n  (https://github.com/fmtlib/fmt/pull/1953). Thanks @kitegi.\n\n- Added support of `std::byte` and other formattable types to\n  `fmt::join` (https://github.com/fmtlib/fmt/issues/1981,\n  https://github.com/fmtlib/fmt/issues/2040,\n  https://github.com/fmtlib/fmt/pull/2050,\n  https://github.com/fmtlib/fmt/issues/2262). For example:\n\n  ```c++\n  #include <fmt/format.h>\n  #include <cstddef>\n  #include <vector>\n\n  int main() {\n    auto bytes = std::vector{std::byte(4), std::byte(2)};\n    fmt::print(\"{}\", fmt::join(bytes, \"\"));\n  }\n  ```\n\n  prints \\\"42\\\".\n\n  Thanks @kamibo.\n\n- Implemented the default format for `std::chrono::system_clock`\n  (https://github.com/fmtlib/fmt/issues/2319,\n  https://github.com/fmtlib/fmt/pull/2345). For example:\n\n  ```c++\n  #include <fmt/chrono.h>\n\n  int main() {\n    fmt::print(\"{}\", std::chrono::system_clock::now());\n  }\n  ```\n\n  prints \\\"2021-06-18 15:22:00\\\" (the output depends on the current\n  date and time). Thanks @sunmy2019.\n\n- Made more chrono specifiers locale independent by default. Use the\n  `'L'` specifier to get localized formatting. For example:\n\n  ```c++\n  #include <fmt/chrono.h>\n\n  int main() {\n    std::locale::global(std::locale(\"ru_RU.UTF-8\"));\n    auto monday = std::chrono::weekday(1);\n    fmt::print(\"{}\\n\", monday);   // prints \"Mon\"\n    fmt::print(\"{:L}\\n\", monday); // prints \"пн\"\n  }\n  ```\n\n- Improved locale handling in chrono formatting\n  (https://github.com/fmtlib/fmt/issues/2337,\n  https://github.com/fmtlib/fmt/pull/2349,\n  https://github.com/fmtlib/fmt/pull/2350). Thanks @phprus.\n\n- Deprecated `fmt/locale.h` moving the formatting functions that take\n  a locale to `fmt/format.h` (`char`) and `fmt/xchar` (other\n  overloads). This doesn\\'t introduce a dependency on `<locale>` so\n  there is virtually no compile time effect.\n\n- Deprecated an undocumented `format_to` overload that takes\n  `basic_memory_buffer`.\n\n- Made parameter order in `vformat_to` consistent with `format_to`\n  (https://github.com/fmtlib/fmt/issues/2327).\n\n- Added support for time points with arbitrary durations\n  (https://github.com/fmtlib/fmt/issues/2208). For example:\n\n  ```c++\n  #include <fmt/chrono.h>\n\n  int main() {\n    using tp = std::chrono::time_point<\n      std::chrono::system_clock, std::chrono::seconds>;\n    fmt::print(\"{:%S}\", tp(std::chrono::seconds(42)));\n  }\n  ```\n\n  prints \\\"42\\\".\n\n- Formatting floating-point numbers no longer produces trailing zeros\n  by default for consistency with `std::format`. For example:\n\n  ```c++\n  #include <fmt/core.h>\n\n  int main() {\n    fmt::print(\"{0:.3}\", 1.1);\n  }\n  ```\n\n  prints \\\"1.1\\\". Use the `'#'` specifier to keep trailing zeros.\n\n- Dropped a limit on the number of elements in a range and replaced\n  `{}` with `[]` as range delimiters for consistency with Python\\'s\n  `str.format`.\n\n- The `'L'` specifier for locale-specific numeric formatting can now\n  be combined with presentation specifiers as in `std::format`. For\n  example:\n\n  ```c++\n  #include <fmt/core.h>\n  #include <locale>\n\n  int main() {\n    std::locale::global(std::locale(\"fr_FR.UTF-8\"));\n    fmt::print(\"{0:.2Lf}\", 0.42);\n  }\n  ```\n\n  prints \\\"0,42\\\". The deprecated `'n'` specifier has been removed.\n\n- Made the `0` specifier ignored for infinity and NaN\n  (https://github.com/fmtlib/fmt/issues/2305,\n  https://github.com/fmtlib/fmt/pull/2310). Thanks @Liedtke.\n\n- Made the hexfloat formatting use the right alignment by default\n  (https://github.com/fmtlib/fmt/issues/2308,\n  https://github.com/fmtlib/fmt/pull/2317). Thanks @Liedtke.\n\n- Removed the deprecated numeric alignment (`'='`). Use the `'0'`\n  specifier instead.\n\n- Removed the deprecated `fmt/posix.h` header that has been replaced\n  with `fmt/os.h`.\n\n- Removed the deprecated `format_to_n_context`, `format_to_n_args` and\n  `make_format_to_n_args`. They have been replaced with\n  `format_context`, `` format_args` and ``make_format_args\\`\\`\n  respectively.\n\n- Moved `wchar_t`-specific functions and types to `fmt/xchar.h`. You\n  can define `FMT_DEPRECATED_INCLUDE_XCHAR` to automatically include\n  `fmt/xchar.h` from `fmt/format.h` but this will be disabled in the\n  next major release.\n\n- Fixed handling of the `'+'` specifier in localized formatting\n  (https://github.com/fmtlib/fmt/issues/2133).\n\n- Added support for the `'s'` format specifier that gives textual\n  representation of `bool`\n  (https://github.com/fmtlib/fmt/issues/2094,\n  https://github.com/fmtlib/fmt/pull/2109). For example:\n\n  ```c++\n  #include <fmt/core.h>\n\n  int main() {\n    fmt::print(\"{:s}\", true);\n  }\n  ```\n\n  prints \\\"true\\\". Thanks @powercoderlol.\n\n- Made `fmt::ptr` work with function pointers\n  (https://github.com/fmtlib/fmt/pull/2131). For example:\n\n  ```c++\n  #include <fmt/format.h>\n\n  int main() {\n    fmt::print(\"My main: {}\\n\", fmt::ptr(main));\n  }\n  ```\n\n  Thanks @mikecrowe.\n\n- The undocumented support for specializing `formatter` for pointer\n  types has been removed.\n\n- Fixed `fmt::formatted_size` with format string compilation\n  (https://github.com/fmtlib/fmt/pull/2141,\n  https://github.com/fmtlib/fmt/pull/2161). Thanks @alexezeder.\n\n- Fixed handling of empty format strings during format string\n  compilation (https://github.com/fmtlib/fmt/issues/2042):\n\n  ```c++\n  auto s = fmt::format(FMT_COMPILE(\"\"));\n  ```\n\n  Thanks @alexezeder.\n\n- Fixed handling of enums in `fmt::to_string`\n  (https://github.com/fmtlib/fmt/issues/2036).\n\n- Improved width computation\n  (https://github.com/fmtlib/fmt/issues/2033,\n  https://github.com/fmtlib/fmt/issues/2091). For example:\n\n  ```c++\n  #include <fmt/core.h>\n\n  int main() {\n    fmt::print(\"{:-<10}{}\\n\", \"你好\", \"世界\");\n    fmt::print(\"{:-<10}{}\\n\", \"hello\", \"world\");\n  }\n  ```\n\n  prints\n\n  ![](https://user-images.githubusercontent.com/576385/119840373-cea3ca80-beb9-11eb-91e0-54266c48e181.png)\n\n  on a modern terminal.\n\n- The experimental fast output stream (`fmt::ostream`) is now\n  truncated by default for consistency with `fopen`\n  (https://github.com/fmtlib/fmt/issues/2018). For example:\n\n  ```c++\n  #include <fmt/os.h>\n\n  int main() {\n    fmt::ostream out1 = fmt::output_file(\"guide\");\n    out1.print(\"Zaphod\");\n    out1.close();\n    fmt::ostream out2 = fmt::output_file(\"guide\");\n    out2.print(\"Ford\");\n  }\n  ```\n\n  writes \\\"Ford\\\" to the file \\\"guide\\\". To preserve the old file\n  content if any pass `fmt::file::WRONLY | fmt::file::CREATE` flags to\n  `fmt::output_file`.\n\n- Fixed moving of `fmt::ostream` that holds buffered data\n  (https://github.com/fmtlib/fmt/issues/2197,\n  https://github.com/fmtlib/fmt/pull/2198). Thanks @vtta.\n\n- Replaced the `fmt::system_error` exception with a function of the\n  same name that constructs `std::system_error`\n  (https://github.com/fmtlib/fmt/issues/2266).\n\n- Replaced the `fmt::windows_error` exception with a function of the\n  same name that constructs `std::system_error` with the category\n  returned by `fmt::system_category()`\n  (https://github.com/fmtlib/fmt/issues/2274,\n  https://github.com/fmtlib/fmt/pull/2275). The latter is\n  similar to `std::system_category` but correctly handles UTF-8.\n  Thanks @phprus.\n\n- Replaced `fmt::error_code` with `std::error_code` and made it\n  formattable (https://github.com/fmtlib/fmt/issues/2269,\n  https://github.com/fmtlib/fmt/pull/2270,\n  https://github.com/fmtlib/fmt/pull/2273). Thanks @phprus.\n\n- Added speech synthesis support\n  (https://github.com/fmtlib/fmt/pull/2206).\n\n- Made `format_to` work with a memory buffer that has a custom\n  allocator (https://github.com/fmtlib/fmt/pull/2300).\n  Thanks @voxmea.\n\n- Added `Allocator::max_size` support to `basic_memory_buffer`.\n  (https://github.com/fmtlib/fmt/pull/1960). Thanks @phprus.\n\n- Added wide string support to `fmt::join`\n  (https://github.com/fmtlib/fmt/pull/2236). Thanks @crbrz.\n\n- Made iterators passed to `formatter` specializations via a format\n  context satisfy C++20 `std::output_iterator` requirements\n  (https://github.com/fmtlib/fmt/issues/2156,\n  https://github.com/fmtlib/fmt/pull/2158,\n  https://github.com/fmtlib/fmt/issues/2195,\n  https://github.com/fmtlib/fmt/pull/2204). Thanks @randomnetcat.\n\n- Optimized the `printf` implementation\n  (https://github.com/fmtlib/fmt/pull/1982,\n  https://github.com/fmtlib/fmt/pull/1984,\n  https://github.com/fmtlib/fmt/pull/2016,\n  https://github.com/fmtlib/fmt/pull/2164).\n  Thanks @rimathia and @moiwi.\n\n- Improved detection of `constexpr` `char_traits`\n  (https://github.com/fmtlib/fmt/pull/2246,\n  https://github.com/fmtlib/fmt/pull/2257). Thanks @phprus.\n\n- Fixed writing to `stdout` when it is redirected to `NUL` on Windows\n  (https://github.com/fmtlib/fmt/issues/2080).\n\n- Fixed exception propagation from iterators\n  (https://github.com/fmtlib/fmt/issues/2097).\n\n- Improved `strftime` error handling\n  (https://github.com/fmtlib/fmt/issues/2238,\n  https://github.com/fmtlib/fmt/pull/2244). Thanks @yumeyao.\n\n- Stopped using deprecated GCC UDL template extension.\n\n- Added `fmt/args.h` to the install target\n  (https://github.com/fmtlib/fmt/issues/2096).\n\n- Error messages are now passed to assert when exceptions are disabled\n  (https://github.com/fmtlib/fmt/pull/2145). Thanks @NobodyXu.\n\n- Added the `FMT_MASTER_PROJECT` CMake option to control build and\n  install targets when {fmt} is included via `add_subdirectory`\n  (https://github.com/fmtlib/fmt/issues/2098,\n  https://github.com/fmtlib/fmt/pull/2100).\n  Thanks @randomizedthinking.\n\n- Improved build configuration\n  (https://github.com/fmtlib/fmt/pull/2026,\n  https://github.com/fmtlib/fmt/pull/2122).\n  Thanks @luncliff and @ibaned.\n\n- Fixed various warnings and compilation issues\n  (https://github.com/fmtlib/fmt/issues/1947,\n  https://github.com/fmtlib/fmt/pull/1959,\n  https://github.com/fmtlib/fmt/pull/1963,\n  https://github.com/fmtlib/fmt/pull/1965,\n  https://github.com/fmtlib/fmt/issues/1966,\n  https://github.com/fmtlib/fmt/pull/1974,\n  https://github.com/fmtlib/fmt/pull/1975,\n  https://github.com/fmtlib/fmt/pull/1990,\n  https://github.com/fmtlib/fmt/issues/2000,\n  https://github.com/fmtlib/fmt/pull/2001,\n  https://github.com/fmtlib/fmt/issues/2002,\n  https://github.com/fmtlib/fmt/issues/2004,\n  https://github.com/fmtlib/fmt/pull/2006,\n  https://github.com/fmtlib/fmt/pull/2009,\n  https://github.com/fmtlib/fmt/pull/2010,\n  https://github.com/fmtlib/fmt/issues/2038,\n  https://github.com/fmtlib/fmt/issues/2039,\n  https://github.com/fmtlib/fmt/issues/2047,\n  https://github.com/fmtlib/fmt/pull/2053,\n  https://github.com/fmtlib/fmt/issues/2059,\n  https://github.com/fmtlib/fmt/pull/2065,\n  https://github.com/fmtlib/fmt/pull/2067,\n  https://github.com/fmtlib/fmt/pull/2068,\n  https://github.com/fmtlib/fmt/pull/2073,\n  https://github.com/fmtlib/fmt/issues/2103,\n  https://github.com/fmtlib/fmt/issues/2105,\n  https://github.com/fmtlib/fmt/pull/2106,\n  https://github.com/fmtlib/fmt/pull/2107,\n  https://github.com/fmtlib/fmt/issues/2116,\n  https://github.com/fmtlib/fmt/pull/2117,\n  https://github.com/fmtlib/fmt/issues/2118,\n  https://github.com/fmtlib/fmt/pull/2119,\n  https://github.com/fmtlib/fmt/issues/2127,\n  https://github.com/fmtlib/fmt/pull/2128,\n  https://github.com/fmtlib/fmt/issues/2140,\n  https://github.com/fmtlib/fmt/issues/2142,\n  https://github.com/fmtlib/fmt/pull/2143,\n  https://github.com/fmtlib/fmt/pull/2144,\n  https://github.com/fmtlib/fmt/issues/2147,\n  https://github.com/fmtlib/fmt/issues/2148,\n  https://github.com/fmtlib/fmt/issues/2149,\n  https://github.com/fmtlib/fmt/pull/2152,\n  https://github.com/fmtlib/fmt/pull/2160,\n  https://github.com/fmtlib/fmt/issues/2170,\n  https://github.com/fmtlib/fmt/issues/2175,\n  https://github.com/fmtlib/fmt/issues/2176,\n  https://github.com/fmtlib/fmt/pull/2177,\n  https://github.com/fmtlib/fmt/issues/2178,\n  https://github.com/fmtlib/fmt/pull/2179,\n  https://github.com/fmtlib/fmt/issues/2180,\n  https://github.com/fmtlib/fmt/issues/2181,\n  https://github.com/fmtlib/fmt/pull/2183,\n  https://github.com/fmtlib/fmt/issues/2184,\n  https://github.com/fmtlib/fmt/issues/2185,\n  https://github.com/fmtlib/fmt/pull/2186,\n  https://github.com/fmtlib/fmt/pull/2187,\n  https://github.com/fmtlib/fmt/pull/2190,\n  https://github.com/fmtlib/fmt/pull/2192,\n  https://github.com/fmtlib/fmt/pull/2194,\n  https://github.com/fmtlib/fmt/pull/2205,\n  https://github.com/fmtlib/fmt/issues/2210,\n  https://github.com/fmtlib/fmt/pull/2211,\n  https://github.com/fmtlib/fmt/pull/2215,\n  https://github.com/fmtlib/fmt/pull/2216,\n  https://github.com/fmtlib/fmt/pull/2218,\n  https://github.com/fmtlib/fmt/pull/2220,\n  https://github.com/fmtlib/fmt/issues/2228,\n  https://github.com/fmtlib/fmt/pull/2229,\n  https://github.com/fmtlib/fmt/pull/2230,\n  https://github.com/fmtlib/fmt/issues/2233,\n  https://github.com/fmtlib/fmt/pull/2239,\n  https://github.com/fmtlib/fmt/issues/2248,\n  https://github.com/fmtlib/fmt/issues/2252,\n  https://github.com/fmtlib/fmt/pull/2253,\n  https://github.com/fmtlib/fmt/pull/2255,\n  https://github.com/fmtlib/fmt/issues/2261,\n  https://github.com/fmtlib/fmt/issues/2278,\n  https://github.com/fmtlib/fmt/issues/2284,\n  https://github.com/fmtlib/fmt/pull/2287,\n  https://github.com/fmtlib/fmt/pull/2289,\n  https://github.com/fmtlib/fmt/pull/2290,\n  https://github.com/fmtlib/fmt/pull/2293,\n  https://github.com/fmtlib/fmt/issues/2295,\n  https://github.com/fmtlib/fmt/pull/2296,\n  https://github.com/fmtlib/fmt/pull/2297,\n  https://github.com/fmtlib/fmt/issues/2311,\n  https://github.com/fmtlib/fmt/pull/2313,\n  https://github.com/fmtlib/fmt/pull/2315,\n  https://github.com/fmtlib/fmt/issues/2320,\n  https://github.com/fmtlib/fmt/pull/2321,\n  https://github.com/fmtlib/fmt/pull/2323,\n  https://github.com/fmtlib/fmt/issues/2328,\n  https://github.com/fmtlib/fmt/pull/2329,\n  https://github.com/fmtlib/fmt/pull/2333,\n  https://github.com/fmtlib/fmt/pull/2338,\n  https://github.com/fmtlib/fmt/pull/2341).\n  Thanks @darklukee, @fagg, @killerbot242, @jgopel, @yeswalrus, @Finkman,\n  @HazardyKnusperkeks, @dkavolis, @concatime, @chronoxor, @summivox, @yNeo,\n  @Apache-HB, @alexezeder, @toojays, @Brainy0207, @vadz, @imsherlock, @phprus,\n  @white238, @yafshar, @BillyDonahue, @jstaahl, @denchat, @DanielaE,\n  @ilyakurdyukov, @ilmai, @JessyDL, @sergiud, @mwinterb, @sven-herrmann,\n  @jmelas, @twoixter, @crbrz and @upsj.\n\n- Improved documentation\n  (https://github.com/fmtlib/fmt/issues/1986,\n  https://github.com/fmtlib/fmt/pull/2051,\n  https://github.com/fmtlib/fmt/issues/2057,\n  https://github.com/fmtlib/fmt/pull/2081,\n  https://github.com/fmtlib/fmt/issues/2084,\n  https://github.com/fmtlib/fmt/pull/2312).\n  Thanks @imba-tjd, @0x416c69 and @mordante.\n\n- Continuous integration and test improvements\n  (https://github.com/fmtlib/fmt/issues/1969,\n  https://github.com/fmtlib/fmt/pull/1991,\n  https://github.com/fmtlib/fmt/pull/2020,\n  https://github.com/fmtlib/fmt/pull/2110,\n  https://github.com/fmtlib/fmt/pull/2114,\n  https://github.com/fmtlib/fmt/issues/2196,\n  https://github.com/fmtlib/fmt/pull/2217,\n  https://github.com/fmtlib/fmt/pull/2247,\n  https://github.com/fmtlib/fmt/pull/2256,\n  https://github.com/fmtlib/fmt/pull/2336,\n  https://github.com/fmtlib/fmt/pull/2346).\n  Thanks @jgopel, @alexezeder and @DanielaE.\n\nThe change log for versions 0.8.0 - 7.1.3 is available [here](\ndoc/ChangeLog-old.md).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.3974609375,
          "content": "Copyright (c) 2012 - present, Victor Zverovich and {fmt} contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n--- Optional exception to the license ---\n\nAs an exception, if, as a result of your compiling your source code, portions\nof this Software are embedded into a machine-executable object form of such\nsource code, you may redistribute such embedded portions in such object form\nwithout including the above copyright and permission notices.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.0986328125,
          "content": "<img src=\"https://user-images.githubusercontent.com/576385/156254208-f5b743a9-88cf-439d-b0c0-923d53e8d551.png\" alt=\"{fmt}\" width=\"25%\"/>\n\n[![image](https://github.com/fmtlib/fmt/workflows/linux/badge.svg)](https://github.com/fmtlib/fmt/actions?query=workflow%3Alinux)\n[![image](https://github.com/fmtlib/fmt/workflows/macos/badge.svg)](https://github.com/fmtlib/fmt/actions?query=workflow%3Amacos)\n[![image](https://github.com/fmtlib/fmt/workflows/windows/badge.svg)](https://github.com/fmtlib/fmt/actions?query=workflow%3Awindows)\n[![fmt is continuously fuzzed at oss-fuzz](https://oss-fuzz-build-logs.storage.googleapis.com/badges/fmt.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?\\%0Acolspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20\\%0ASummary&q=proj%3Dfmt&can=1)\n[![Ask questions at StackOverflow with the tag fmt](https://img.shields.io/badge/stackoverflow-fmt-blue.svg)](https://stackoverflow.com/questions/tagged/fmt)\n[![image](https://api.securityscorecards.dev/projects/github.com/fmtlib/fmt/badge)](https://securityscorecards.dev/viewer/?uri=github.com/fmtlib/fmt)\n\n**{fmt}** is an open-source formatting library providing a fast and safe\nalternative to C stdio and C++ iostreams.\n\nIf you like this project, please consider donating to one of the funds\nthat help victims of the war in Ukraine: <https://www.stopputin.net/>.\n\n[Documentation](https://fmt.dev)\n\n[Cheat Sheets](https://hackingcpp.com/cpp/libs/fmt.html)\n\nQ&A: ask questions on [StackOverflow with the tag\nfmt](https://stackoverflow.com/questions/tagged/fmt).\n\nTry {fmt} in [Compiler Explorer](https://godbolt.org/z/8Mx1EW73v).\n\n# Features\n\n- Simple [format API](https://fmt.dev/latest/api/) with positional\n  arguments for localization\n- Implementation of [C++20\n  std::format](https://en.cppreference.com/w/cpp/utility/format) and\n  [C++23 std::print](https://en.cppreference.com/w/cpp/io/print)\n- [Format string syntax](https://fmt.dev/latest/syntax/) similar\n  to Python\\'s\n  [format](https://docs.python.org/3/library/stdtypes.html#str.format)\n- Fast IEEE 754 floating-point formatter with correct rounding,\n  shortness and round-trip guarantees using the\n  [Dragonbox](https://github.com/jk-jeon/dragonbox) algorithm\n- Portable Unicode support\n- Safe [printf\n  implementation](https://fmt.dev/latest/api/#printf-formatting)\n  including the POSIX extension for positional arguments\n- Extensibility: [support for user-defined\n  types](https://fmt.dev/latest/api/#formatting-user-defined-types)\n- High performance: faster than common standard library\n  implementations of `(s)printf`, iostreams, `to_string` and\n  `to_chars`, see [Speed tests](#speed-tests) and [Converting a\n  hundred million integers to strings per\n  second](http://www.zverovich.net/2020/06/13/fast-int-to-string-revisited.html)\n- Small code size both in terms of source code with the minimum\n  configuration consisting of just three files, `core.h`, `format.h`\n  and `format-inl.h`, and compiled code; see [Compile time and code\n  bloat](#compile-time-and-code-bloat)\n- Reliability: the library has an extensive set of\n  [tests](https://github.com/fmtlib/fmt/tree/master/test) and is\n  [continuously fuzzed](https://bugs.chromium.org/p/oss-fuzz/issues/list?colspec=ID%20Type%20Component%20Status%20Proj%20Reported%20Owner%20Summary&q=proj%3Dfmt&can=1)\n- Safety: the library is fully type-safe, errors in format strings can\n  be reported at compile time, automatic memory management prevents\n  buffer overflow errors\n- Ease of use: small self-contained code base, no external\n  dependencies, permissive MIT\n  [license](https://github.com/fmtlib/fmt/blob/master/LICENSE)\n- [Portability](https://fmt.dev/latest/#portability) with\n  consistent output across platforms and support for older compilers\n- Clean warning-free codebase even on high warning levels such as\n  `-Wall -Wextra -pedantic`\n- Locale independence by default\n- Optional header-only configuration enabled with the\n  `FMT_HEADER_ONLY` macro\n\nSee the [documentation](https://fmt.dev) for more details.\n\n# Examples\n\n**Print to stdout** ([run](https://godbolt.org/z/Tevcjh))\n\n``` c++\n#include <fmt/core.h>\n\nint main() {\n  fmt::print(\"Hello, world!\\n\");\n}\n```\n\n**Format a string** ([run](https://godbolt.org/z/oK8h33))\n\n``` c++\nstd::string s = fmt::format(\"The answer is {}.\", 42);\n// s == \"The answer is 42.\"\n```\n\n**Format a string using positional arguments**\n([run](https://godbolt.org/z/Yn7Txe))\n\n``` c++\nstd::string s = fmt::format(\"I'd rather be {1} than {0}.\", \"right\", \"happy\");\n// s == \"I'd rather be happy than right.\"\n```\n\n**Print dates and times** ([run](https://godbolt.org/z/c31ExdY3W))\n\n``` c++\n#include <fmt/chrono.h>\n\nint main() {\n  auto now = std::chrono::system_clock::now();\n  fmt::print(\"Date and time: {}\\n\", now);\n  fmt::print(\"Time: {:%H:%M}\\n\", now);\n}\n```\n\nOutput:\n\n    Date and time: 2023-12-26 19:10:31.557195597\n    Time: 19:10\n\n**Print a container** ([run](https://godbolt.org/z/MxM1YqjE7))\n\n``` c++\n#include <vector>\n#include <fmt/ranges.h>\n\nint main() {\n  std::vector<int> v = {1, 2, 3};\n  fmt::print(\"{}\\n\", v);\n}\n```\n\nOutput:\n\n    [1, 2, 3]\n\n**Check a format string at compile time**\n\n``` c++\nstd::string s = fmt::format(\"{:d}\", \"I am not a number\");\n```\n\nThis gives a compile-time error in C++20 because `d` is an invalid\nformat specifier for a string.\n\n**Write a file from a single thread**\n\n``` c++\n#include <fmt/os.h>\n\nint main() {\n  auto out = fmt::output_file(\"guide.txt\");\n  out.print(\"Don't {}\", \"Panic\");\n}\n```\n\nThis can be [5 to 9 times faster than\nfprintf](http://www.zverovich.net/2020/08/04/optimal-file-buffer-size.html).\n\n**Print with colors and text styles**\n\n``` c++\n#include <fmt/color.h>\n\nint main() {\n  fmt::print(fg(fmt::color::crimson) | fmt::emphasis::bold,\n             \"Hello, {}!\\n\", \"world\");\n  fmt::print(fg(fmt::color::floral_white) | bg(fmt::color::slate_gray) |\n             fmt::emphasis::underline, \"Olá, {}!\\n\", \"Mundo\");\n  fmt::print(fg(fmt::color::steel_blue) | fmt::emphasis::italic,\n             \"你好{}！\\n\", \"世界\");\n}\n```\n\nOutput on a modern terminal with Unicode support:\n\n![image](https://github.com/fmtlib/fmt/assets/%0A576385/2a93c904-d6fa-4aa6-b453-2618e1c327d7)\n\n# Benchmarks\n\n## Speed tests\n\n| Library           | Method        | Run Time, s |\n|-------------------|---------------|-------------|\n| libc              | printf        |   0.91      |\n| libc++            | std::ostream  |   2.49      |\n| {fmt} 9.1         | fmt::print    |   0.74      |\n| Boost Format 1.80 | boost::format |   6.26      |\n| Folly Format      | folly::format |   1.87      |\n\n{fmt} is the fastest of the benchmarked methods, \\~20% faster than\n`printf`.\n\nThe above results were generated by building `tinyformat_test.cpp` on\nmacOS 12.6.1 with `clang++ -O3 -DNDEBUG -DSPEED_TEST -DHAVE_FORMAT`, and\ntaking the best of three runs. In the test, the format string\n`\"%0.10f:%04d:%+g:%s:%p:%c:%%\\n\"` or equivalent is filled 2,000,000\ntimes with output sent to `/dev/null`; for further details refer to the\n[source](https://github.com/fmtlib/format-benchmark/blob/master/src/tinyformat-test.cc).\n\n{fmt} is up to 20-30x faster than `std::ostringstream` and `sprintf` on\nIEEE754 `float` and `double` formatting\n([dtoa-benchmark](https://github.com/fmtlib/dtoa-benchmark)) and faster\nthan [double-conversion](https://github.com/google/double-conversion)\nand [ryu](https://github.com/ulfjack/ryu):\n\n[![image](https://user-images.githubusercontent.com/576385/95684665-11719600-0ba8-11eb-8e5b-972ff4e49428.png)](https://fmt.dev/unknown_mac64_clang12.0.html)\n\n## Compile time and code bloat\n\nThe script [bloat-test.py][test] from [format-benchmark][bench] tests compile\ntime and code bloat for nontrivial projects. It generates 100 translation units\nand uses `printf()` or its alternative five times in each to simulate a\nmedium-sized project. The resulting executable size and compile time (Apple\nclang version 15.0.0 (clang-1500.1.0.2.5), macOS Sonoma, best of three) is shown\nin the following tables.\n\n[test]: https://github.com/fmtlib/format-benchmark/blob/master/bloat-test.py\n[bench]: https://github.com/fmtlib/format-benchmark\n\n**Optimized build (-O3)**\n\n| Method        | Compile Time, s | Executable size, KiB | Stripped size, KiB |\n|---------------|-----------------|----------------------|--------------------|\n| printf        |             1.6 |                   54 |                 50 |\n| IOStreams     |            25.9 |                   98 |                 84 |\n| fmt 83652df   |             4.8 |                   54 |                 50 |\n| tinyformat    |            29.1 |                  161 |                136 |\n| Boost Format  |            55.0 |                  530 |                317 |\n\n{fmt} is fast to compile and is comparable to `printf` in terms of per-call\nbinary size (within a rounding error on this system).\n\n**Non-optimized build**\n\n| Method        | Compile Time, s | Executable size, KiB | Stripped size, KiB |\n|---------------|-----------------|----------------------|--------------------|\n| printf        |             1.4 |                   54 |                 50 |\n| IOStreams     |            23.4 |                   92 |                 68 |\n| {fmt} 83652df |             4.4 |                   89 |                 85 |\n| tinyformat    |            24.5 |                  204 |                161 |\n| Boost Format  |            36.4 |                  831 |                462 |\n\n`libc`, `lib(std)c++`, and `libfmt` are all linked as shared libraries\nto compare formatting function overhead only. Boost Format is a\nheader-only library so it doesn\\'t provide any linkage options.\n\n## Running the tests\n\nPlease refer to [Building the\nlibrary](https://fmt.dev/latest/get-started/#building-from-source) for\ninstructions on how to build the library and run the unit tests.\n\nBenchmarks reside in a separate repository,\n[format-benchmarks](https://github.com/fmtlib/format-benchmark), so to\nrun the benchmarks you first need to clone this repository and generate\nMakefiles with CMake:\n\n    $ git clone --recursive https://github.com/fmtlib/format-benchmark.git\n    $ cd format-benchmark\n    $ cmake .\n\nThen you can run the speed test:\n\n    $ make speed-test\n\nor the bloat test:\n\n    $ make bloat-test\n\n# Migrating code\n\n[clang-tidy](https://clang.llvm.org/extra/clang-tidy/) v18 provides the\n[modernize-use-std-print](https://clang.llvm.org/extra/clang-tidy/checks/modernize/use-std-print.html)\ncheck that is capable of converting occurrences of `printf` and\n`fprintf` to `fmt::print` if configured to do so. (By default it\nconverts to `std::print`.)\n\n# Notable projects using this library\n\n- [0 A.D.](https://play0ad.com/): a free, open-source, cross-platform\n  real-time strategy game\n- [AMPL/MP](https://github.com/ampl/mp): an open-source library for\n  mathematical programming\n- [Apple's FoundationDB](https://github.com/apple/foundationdb): an open-source,\n  distributed, transactional key-value store\n- [Aseprite](https://github.com/aseprite/aseprite): animated sprite\n  editor & pixel art tool\n- [AvioBook](https://www.aviobook.aero/en): a comprehensive aircraft\n  operations suite\n- [Blizzard Battle.net](https://battle.net/): an online gaming\n  platform\n- [Celestia](https://celestia.space/): real-time 3D visualization of\n  space\n- [Ceph](https://ceph.com/): a scalable distributed storage system\n- [ccache](https://ccache.dev/): a compiler cache\n- [ClickHouse](https://github.com/ClickHouse/ClickHouse): an\n  analytical database management system\n- [ContextVision](https://www.contextvision.com/): medical imaging software\n- [Contour](https://github.com/contour-terminal/contour/): a modern\n  terminal emulator\n- [CUAUV](https://cuauv.org/): Cornell University\\'s autonomous\n  underwater vehicle\n- [Drake](https://drake.mit.edu/): a planning, control, and analysis\n  toolbox for nonlinear dynamical systems (MIT)\n- [Envoy](https://github.com/envoyproxy/envoy): C++ L7 proxy and\n  communication bus (Lyft)\n- [FiveM](https://fivem.net/): a modification framework for GTA V\n- [fmtlog](https://github.com/MengRao/fmtlog): a performant\n  fmtlib-style logging library with latency in nanoseconds\n- [Folly](https://github.com/facebook/folly): Facebook open-source\n  library\n- [GemRB](https://gemrb.org/): a portable open-source implementation\n  of Bioware's Infinity Engine\n- [Grand Mountain\n  Adventure](https://store.steampowered.com/app/1247360/Grand_Mountain_Adventure/):\n  a beautiful open-world ski & snowboarding game\n- [HarpyWar/pvpgn](https://github.com/pvpgn/pvpgn-server): Player vs\n  Player Gaming Network with tweaks\n- [KBEngine](https://github.com/kbengine/kbengine): an open-source\n  MMOG server engine\n- [Keypirinha](https://keypirinha.com/): a semantic launcher for\n  Windows\n- [Kodi](https://kodi.tv/) (formerly xbmc): home theater software\n- [Knuth](https://kth.cash/): high-performance Bitcoin full-node\n- [libunicode](https://github.com/contour-terminal/libunicode/): a\n  modern C++17 Unicode library\n- [MariaDB](https://mariadb.org/): relational database management\n  system\n- [Microsoft Verona](https://github.com/microsoft/verona): research\n  programming language for concurrent ownership\n- [MongoDB](https://mongodb.com/): distributed document database\n- [MongoDB Smasher](https://github.com/duckie/mongo_smasher): a small\n  tool to generate randomized datasets\n- [OpenSpace](https://openspaceproject.com/): an open-source\n  astrovisualization framework\n- [PenUltima Online (POL)](https://www.polserver.com/): an MMO server,\n  compatible with most Ultima Online clients\n- [PyTorch](https://github.com/pytorch/pytorch): an open-source\n  machine learning library\n- [quasardb](https://www.quasardb.net/): a distributed,\n  high-performance, associative database\n- [Quill](https://github.com/odygrd/quill): asynchronous low-latency\n  logging library\n- [QKW](https://github.com/ravijanjam/qkw): generalizing aliasing to\n  simplify navigation, and execute complex multi-line terminal\n  command sequences\n- [redis-cerberus](https://github.com/HunanTV/redis-cerberus): a Redis\n  cluster proxy\n- [redpanda](https://vectorized.io/redpanda): a 10x faster Kafka®\n  replacement for mission-critical systems written in C++\n- [rpclib](http://rpclib.net/): a modern C++ msgpack-RPC server and\n  client library\n- [Salesforce Analytics\n  Cloud](https://www.salesforce.com/analytics-cloud/overview/):\n  business intelligence software\n- [Scylla](https://www.scylladb.com/): a Cassandra-compatible NoSQL\n  data store that can handle 1 million transactions per second on a\n  single server\n- [Seastar](http://www.seastar-project.org/): an advanced, open-source\n  C++ framework for high-performance server applications on modern\n  hardware\n- [spdlog](https://github.com/gabime/spdlog): super fast C++ logging\n  library\n- [Stellar](https://www.stellar.org/): financial platform\n- [Touch Surgery](https://www.touchsurgery.com/): surgery simulator\n- [TrinityCore](https://github.com/TrinityCore/TrinityCore):\n  open-source MMORPG framework\n- [🐙 userver framework](https://userver.tech/): open-source\n  asynchronous framework with a rich set of abstractions and database\n  drivers\n- [Windows Terminal](https://github.com/microsoft/terminal): the new\n  Windows terminal\n\n[More\\...](https://github.com/search?q=fmtlib&type=Code)\n\nIf you are aware of other projects using this library, please let me\nknow by [email](mailto:victor.zverovich@gmail.com) or by submitting an\n[issue](https://github.com/fmtlib/fmt/issues).\n\n# Motivation\n\nSo why yet another formatting library?\n\nThere are plenty of methods for doing this task, from standard ones like\nthe printf family of function and iostreams to Boost Format and\nFastFormat libraries. The reason for creating a new library is that\nevery existing solution that I found either had serious issues or\ndidn\\'t provide all the features I needed.\n\n## printf\n\nThe good thing about `printf` is that it is pretty fast and readily\navailable being a part of the C standard library. The main drawback is\nthat it doesn\\'t support user-defined types. `printf` also has safety\nissues although they are somewhat mitigated with [\\_\\_attribute\\_\\_\n((format (printf,\n\\...))](https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html) in\nGCC. There is a POSIX extension that adds positional arguments required\nfor\n[i18n](https://en.wikipedia.org/wiki/Internationalization_and_localization)\nto `printf` but it is not a part of C99 and may not be available on some\nplatforms.\n\n## iostreams\n\nThe main issue with iostreams is best illustrated with an example:\n\n``` c++\nstd::cout << std::setprecision(2) << std::fixed << 1.23456 << \"\\n\";\n```\n\nwhich is a lot of typing compared to printf:\n\n``` c++\nprintf(\"%.2f\\n\", 1.23456);\n```\n\nMatthew Wilson, the author of FastFormat, called this \\\"chevron hell\\\".\niostreams don\\'t support positional arguments by design.\n\nThe good part is that iostreams support user-defined types and are safe\nalthough error handling is awkward.\n\n## Boost Format\n\nThis is a very powerful library that supports both `printf`-like format\nstrings and positional arguments. Its main drawback is performance.\nAccording to various benchmarks, it is much slower than other methods\nconsidered here. Boost Format also has excessive build times and severe\ncode bloat issues (see [Benchmarks](#benchmarks)).\n\n## FastFormat\n\nThis is an interesting library that is fast, safe and has positional\narguments. However, it has significant limitations, citing its author:\n\n> Three features that have no hope of being accommodated within the\n> current design are:\n>\n> - Leading zeros (or any other non-space padding)\n> - Octal/hexadecimal encoding\n> - Runtime width/alignment specification\n\nIt is also quite big and has a heavy dependency, on STLSoft, which might be\ntoo restrictive for use in some projects.\n\n## Boost Spirit.Karma\n\nThis is not a formatting library but I decided to include it here for\ncompleteness. As iostreams, it suffers from the problem of mixing\nverbatim text with arguments. The library is pretty fast, but slower on\ninteger formatting than `fmt::format_to` with format string compilation\non Karma\\'s own benchmark, see [Converting a hundred million integers to\nstrings per\nsecond](http://www.zverovich.net/2020/06/13/fast-int-to-string-revisited.html).\n\n# License\n\n{fmt} is distributed under the MIT\n[license](https://github.com/fmtlib/fmt/blob/master/LICENSE).\n\n# Documentation License\n\nThe [Format String Syntax](https://fmt.dev/latest/syntax/) section\nin the documentation is based on the one from Python [string module\ndocumentation](https://docs.python.org/3/library/string.html#module-string).\nFor this reason, the documentation is distributed under the Python\nSoftware Foundation license available in\n[doc/python-license.txt](https://raw.github.com/fmtlib/fmt/master/doc/python-license.txt).\nIt only applies if you distribute the documentation of {fmt}.\n\n# Maintainers\n\nThe {fmt} library is maintained by Victor Zverovich\n([vitaut](https://github.com/vitaut)) with contributions from many other\npeople. See\n[Contributors](https://github.com/fmtlib/fmt/graphs/contributors) and\n[Releases](https://github.com/fmtlib/fmt/releases) for some of the\nnames. Let us know if your contribution is not listed or mentioned\nincorrectly and we\\'ll make it right.\n\n# Security Policy\n\nTo report a security issue, please disclose it at [security\nadvisory](https://github.com/fmtlib/fmt/security/advisories/new).\n\nThis project is maintained by a team of volunteers on a\nreasonable-effort basis. As such, please give us at least *90* days to\nwork on a fix before public exposure.\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "support",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}