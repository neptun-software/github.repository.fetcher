{
  "metadata": {
    "timestamp": 1736566279291,
    "page": 26,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pqrs-org/Karabiner-Elements",
      "stars": 19198,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.1806640625,
          "content": "BasedOnStyle: LLVM\nColumnLimit: 0\nDerivePointerBinding: true\nAllowShortIfStatementsOnASingleLine: true\nAllowShortBlocksOnASingleLine: true\nPointerAlignment: Left\nIndentCaseLabels: true\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3876953125,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\nindent_style = space\nindent_size = 2\ntrim_trailing_whitespace = true\n\n[Makefile]\nindent_style = tab\n\n[*.md]\nindent_size = 4\n\n[*.sh]\nindent_size = 4\n\n[postinstall]\nindent_size = 4\n\n[preinstall]\nindent_size = 4\n\n[*.applescript]\nindent_size = 4\n\n[*.json]\nindent_size = 4\n\n[*.jsonc]\nindent_size = 4\n\n[*.py]\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.064453125,
          "content": ".DS_Store\n*.pkg/\n*.zip\n*.dmg\n*.o\n*.tmp\na.out\npkgroot/\nbuild/\ntmp/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.189453125,
          "content": "[submodule \"src/vendor/Karabiner-DriverKit-VirtualHIDDevice\"]\n\tpath = src/vendor/Karabiner-DriverKit-VirtualHIDDevice\n\turl = https://github.com/pqrs-org/Karabiner-DriverKit-VirtualHIDDevice.git\n"
        },
        {
          "name": ".markdownlint.json",
          "type": "blob",
          "size": 0.287109375,
          "content": "{\n    \"MD007\": {\n        \"indent\": 4\n    },\n    \"MD013\": false,\n    \"MD030\": {\n        \"ul_single\": 3,\n        \"ul_multi\": 3,\n        \"ol_single\": 2,\n        \"ol_multi\": 2\n    },\n    \"MD033\": {\n        \"allowed_elements\": [\"br\", \"img\", \"table\", \"tbody\", \"tr\", \"td\"]\n    },\n    \"MD041\": false\n}\n"
        },
        {
          "name": ".prettierrc.json",
          "type": "blob",
          "size": 0.20703125,
          "content": "{\n    \"semi\": false,\n    \"singleQuote\": true,\n    \"tabWidth\": 4,\n\n    \"overrides\": [\n        {\n            \"files\": \"*.yml\",\n            \"options\": {\n                \"tabWidth\": 2\n            }\n        }\n    ]\n}\n"
        },
        {
          "name": ".swift-version",
          "type": "blob",
          "size": 0.00390625,
          "content": "5.5\n"
        },
        {
          "name": ".swiftlint.yml",
          "type": "blob",
          "size": 0.5947265625,
          "content": "disabled_rules:\n  - opening_brace\n  - trailing_comma\n\nexcluded:\n  - '**/build'\n  - '**/vendor'\n\n#\n# parameters\n#\n\ncyclomatic_complexity:\n  warning: 100\n  error: 150\n\nfile_length:\n  warning: 2000\n  error: 3000\n\nfunction_body_length:\n  warning: 1200\n  error: 1500\n\nfunction_parameter_count:\n  warning: 10\n  error: 20\n\nidentifier_name:\n  max_length:\n    warning: 100\n  min_length:\n    warning: 1\n\nlarge_tuple:\n  warning: 5\n\nline_length:\n  warning: 1000\n  error: 2000\n\nnesting:\n  type_level:\n    warning: 2\n\ntype_body_length:\n  warning: 1200\n  error: 1500\n\ntype_name:\n  max_length:\n    warning: 80\n    error: 200\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "DEVELOPMENT.md",
          "type": "blob",
          "size": 18.8427734375,
          "content": "# Development\n\n## How to replace binaries without reinstalling package\n\n### Replace `karabiner_grabber`\n\n```shell\ncd src/core/grabber\nmake install\n```\n\n### Replace `karabiner_session_monitor`\n\n```shell\ncd src/core/session_monitor\nmake install\n```\n\n### Replace `karabiner_console_user_server`\n\n```shell\ncd src/core/console_user_server\nmake install\n```\n\n## Core Processes\n\n-   `karabiner_grabber`\n    -   Seize the input devices and modify events then post events using `Karabiner-DriverKit-VirtualHIDDevice`.\n    -   It is run with root privileges which are required to seize the device and send events to the virtual driver.\n-   `karabiner_session_monitor`\n    -   It informs `karabiner_grabber` of the user currently using the console.\n        karabiner_grabber will change the owner of the Unix domain socket that `karabiner_grabber` provides for `karabiner_console_user_server`.\n    -   The methods for accurately detecting the console user, including when multiple people are logged in through Screen Sharing, are very limited.\n        Even in macOS 14, there is no alternative to using the Core Graphics API `CGSessionCopyCurrentDictionary`.\n        To use this API, it must be launched from a GUI session. Specifically, it needs to be started from LaunchAgents.\n        Therefore, the function to detect the console user cannot be integrated into `karabiner_grabber` and is implemented as a separate process.\n    -   It is run with root privileges because if the notification of the console user to `karabiner_grabber` can be done by anyone, the console user could be spoofed.\n        This would allow a user who is not currently using the console to send requests to `karabiner_grabber` via `karabiner_console_user_server`.\n-   `karabiner_console_user_server`\n    -   `karabiner_console_user_server` connects to the Unix domain socket provided by `karabiner_grabber` and requests the start of processing input events.\n        `karabiner_grabber` will not modify the input events until it receives a connection from `karabiner_console_user_server` (unless the system default configuration is enabled).\n    -   The execution of `shell_command`, `software_function`, and `select_input_source` is carried out by karabiner_console_user_server.\n    -   It notifies `karabiner_grabber` of the information needed to reference the filter function when modifying input events, such as the active application and the current input source.\n    -   Run with the console user privilege.\n\n![processes](files/images/processes.svg)\n\n### program sequence\n\n#### start up\n\n`karabiner_grabber`\n\n1.  Run `karabiner_grabber`.\n2.  `karabiner_grabber` opens session_monitor_receiver Unix domain socket which only root can access.\n3.  `karabiner_grabber` opens grabber server Unix domain socket.\n4.  When a window server session state is changed, `karabiner_grabber` changes the Unix domain socket owner to console user.\n\n`karabiner_session_monitor`\n\n1.  Run `karabiner_session_monitor`.\n2.  `karabiner_session_monitor` monitors a window server session state and notify it to `karabiner_grabber`.\n3.  `karabiner_grabber` changes the owner of Unix domain socket for `karabiner_console_user_server` when the console user is changed.\n\n#### device grabbing\n\n1.  Run `karabiner_console_user_server`.\n2.  Try to open console_user_server Unix domain socket.\n3.  grabber seizes input devices.\n\n### Other notes\n\nIOHIDSystem requires the process is running with the console user privilege.\nThus, `karabiner_grabber` cannot send events to IOHIDSystem directly.\n\n---\n\n## The difference of event grabbing methods\n\n### IOKit\n\nIOKit allows you to read raw HID input events from kernel.<br />\nThe highest layer is IOHIDQueue which provides us the HID values.\n\n`karabiner_grabber` uses this method.\n\n#### IOKit with Apple Trackpads\n\nIOKit cannot catch events from Apple Trackpads.<br />\n(== Apple Trackpad driver does not send events to IOKit.)\n\nThus, we should use CGEventTap together for pointing devices.\n\n#### `IOHIDQueueRegisterValueAvailableCallback` from multiple processes\n\nWe can use `IOHIDDeviceOpen` and `IOHIDQueueRegisterValueAvailableCallback` from multiple processes.\n\nGenerally, `ValueAvailableCallback` is not called for `IOHIDDeviceOpen(kIOHIDOptionsTypeNone)` while device is opened with `kIOHIDOptionsTypeSeizeDevice`.\nHowever, it seems `ValueAvailableCallback` is called both seized `IOHIDDeviceRef` and normal `IOHIDDeviceRef` in some cases (e.g. after awake from sleep)\n\n#### `IOHIDQueueRegisterValueAvailableCallback` from multiple IOHIDDeviceRef for one device\n\nWe can create multiple IOHIDDeviceRef for one device by using `IOHIDDeviceCreate`.\nIn this case, `ValueAvailableCallback` is called both seized `IOHIDDeviceRef` and normal `IOHIDDeviceRef`.\n\n```c\n// IOHIDDeviceRef device1 is passed by IOHIDManagerRegisterDeviceMatchingCallback\nIOHIDDeviceRef device2 = IOHIDDeviceCreate(kCFAllocatorDefault, IOHIDDeviceGetService(device1));\n\nIOHIDDeviceOpen(device1, kIOHIDOptionsTypeNone);\nIOHIDDeviceOpen(device2, kIOHIDOptionsTypeSeizeDevice);\n\n// ValueAvailableCallback is called both device1 and device2 even device2 seizes the device. (on macOS 10.13.4)\n```\n\n### CGEventTapCreate\n\n`CGEventTapCreate` is a limited approach.<br />\nIt does not work with Secure Keyboard Entry even if we use `kCGHIDEventTap` and root privillege.<br />\nThus, it does not work in Terminal.<br />\nYou can confirm this behavior in `appendix/eventtap`.\n\nThere is another problem with `CGEventTapCreate`.<br />\n`Shake mouse pointer to locate` feature will be stopped after we call `CGEventTapCreate` with `kCGEventTapOptionDefault`.<br />\n(We confirmed the problem at least on macOS 10.13.1.)<br />\n\n`karabiner_grabber` uses `CGEventTapCreate` with `kCGEventTapOptionListenOnly` in order to catch Apple mouse/trackpad events which we cannot catch in IOKit.\n(See above note.)\n\n---\n\n## The difference of event posting methods\n\n### IOKit device report in dext\n\nIt requires posting HID events.<br />\nThe IOHIKeyboard processes the reports by passing reports to `handleReport`.\n\n`karabiner_grabber` uses this method by using `Karabiner-DriverKit-VirtualHIDDevice`.\n\nNote: `handleReport` fails to treat events which usage page are `kHIDPage_AppleVendorKeyboard` or `kHIDPage_AppleVendorTopCase` on macOS 10.11 or earlier.\n\n### IOHIDPostEvent\n\nIt requires posting coregraphics events.<br />\n\n`IOHIDPostEvent` will be failed if the process is not running in the current session user.\n(The root user is also forbidden.)\n\n### CGEventPost\n\nIt requires posting coregraphics events.<br />\n\n`CGEventPost` does not support some key events in OS X 10.12.\n\n-   Mission Control key\n-   Launchpad key\n-   Option-Command-Escape\n\nThus, `karabiner_grabber` does not use `CGEventPost`.\n\n---\n\n## Modifier flags handling in kernel\n\nThe modifier flag events are handled in the following sequence in macOS 10.12.\n\n1.  Receive HID reports from device.\n2.  Treat reports in the keyboard device driver.\n3.  Treat flags in accessibility functions. (eg. sticky keys, zoom)\n4.  Treat flags in mouse events.\n5.  Treat flags in IOHIDSystem.\n6.  Treat flags in Coregraphics.\n\nThus, `IOHIDPostEvent` will be ignored in accessibility functions and mouse events.\n\n---\n\n## About hid reports\n\nWe can get hid reports from devices via `IOHIDDeviceRegisterInputReportCallback`.<br />\nThe hid report contains a list of pressed keys, so it seems suitable information to observe.\n\nBut `karabiner_grabber` does not use it in order to reduce the device dependancy.\n\n### The limitation of device reports\n\n#### Apple devices reports\n\nApple keyboards does not use generic HID keyboard report descriptor.<br />\nThus, we have to handle them by separate way.\n\n##### Generic HID keyboard report descriptor\n\n```c\nuint8_t modifiers;\nuint8_t reserved;\nuint8_t keys[6];\n```\n\n###### modifiers bit\n\n```text\n0x1 << 0 : left control\n0x1 << 1 : left shift\n0x1 << 2 : left option\n0x1 << 3 : left command\n0x1 << 4 : right control\n0x1 << 5 : right shift\n0x1 << 6 : right option\n0x1 << 7 : right command\n```\n\n##### Apple HID keyboard report descriptor\n\n```c\nuint8_t record_id;\nuint8_t modifiers;\nuint8_t reserved;\nuint8_t keys[6];\nuint8_t extra_modifiers; // fn\n```\n\n---\n\n## Session\n\n### About console user detection\n\nThere are several way to get the session information, however, the reliable way is limited.\n\n-   The owner of `/dev/console`\n    -   The owner of `/dev/console` becomes wrong value after remote user is logged in via Screen Sharing.<br />\n        How to reproduce the problem.\n        1.  Restart macOS.\n        2.  Log in from console as Guest user.\n        3.  Log in from Screen Sharing as another user.\n        4.  The owner of `/dev/console` is changed to another user even the console user is Guest.\n-   `SCDynamicStoreCopyConsoleUser`\n    -   `SCDynamicStoreCopyConsoleUser` has same problem of `/dev/console`.\n-   `SessionGetInfo`\n    -   `SessionGetInfo` cannot get uid of session.\n        Thus, `SessionGetInfo` cannot determine the console user.\n-   `CGSessionCopyCurrentDictionary`\n    -   `karabiner_session_monitor` uses it to avoid the above problems.\n\n---\n\n## Caps lock handling\n\nThe caps lock is quite different from the normal modifier.\n\n-   The caps lock might be used another purpose. (e.g., switch input source)\n    -   We should refer the caps lock LED to determine caps lock is on/off.\n-   The caps lock modifier is not synchronized with the physical state of key down/up.\n    -   We should send key_down and key_up event to change the caps lock state.\n-   The caps lock will be treated as both generic key event and modifier key event due to the above reasons.\n    -   If the caps lock is specified as \"to.key_code: caps_lock\", the caps lock event is treated as generic key event.\n        -   For example, `key_event_dispatcher` manages in `key_event_dispatcher::pressed_keys_`.\n    -   If the caps lock is specified as \"from.modifiers\" or \"to.modifiers\", the caps lock event is treated as modifier key event.\n        -   For example, `key_event_dispatcher` manages in `key_event_dispatcher::pressed_modifier_flags_`.\n\n### Events related with caps lock in Karabiner-Elements\n\n-   `hid::usage::keyboard_or_keypad::keyboard_caps_lock`\n    -   The event is sent when the physical caps lock key is pressed.\n    -   The event does not change the state of `modifier_flag_manager` because the event might be used another purpose.\n    -   `event::type::caps_lock_state_changed` might be sent due to the LED state change.\n-   `event::type::caps_lock_state_changed`\n    -   This event happens when the caps lock LED is changed.\n    -   The event changes the state of `modifier_flag_manager`.\n        -   `hid::usage::keyboard_or_keypad::keyboard_caps_lock` might be sent due to the `modifier_flag_manager` state change.\n-   `event::type::sticky_modifier`\n    -   `basic > from.modifiers.mandatory` and `basic > to.modifiers` also send this event in order to change the state of `modifier_flag_manager`,\n    -   The event changes the state of `modifier_flag_manager`.\n        -   `hid::usage::keyboard_or_keypad::keyboard_caps_lock` might be sent due to the `modifier_flag_manager` state change.\n\n### The flow of updating `modifier_flag_manager`\n\n-   karabiner_grabber receives `hid::usage::keyboard_or_keypad::keyboard_caps_lock`.\n-   Send the event via virtual hid keyboard.\n-   macOS update the caps lock LED of virtual hid keyboard.\n-   Virtual hid keyboard sends the LED updated event.\n-   karabiner_grabber observes events from the virtual hid keyboard.\n    When an event {usage_page::leds, usage::led::caps_lock} is detected, karabiner_grabber generates an `event::type::caps_lock_state_changed` and adds it to the queue.\n-   The state of `modifier_flag_manager` is changed by `event::type::caps_lock_state_changed`.\n\n### modifier state holders\n\n-   `modifier_flag_manager`\n    -   Keep ideal modifiers state for event modification.\n-   `key_event_dispatcher`\n    -   Keep actually sent modifiers.\n\nFor example, `modifier_flag_manager` contains the lazy modifiers, but `key_event_dispatcher` does not.\n\n### The flow of handling caps lock as modifier\n\nExample:\n\n```json\n{\n    \"from\": {\n        \"key_code\": \"down_arrow\",\n        \"modifiers\": {\n            \"mandatory\": [\"caps_lock\"],\n            \"optional\": [\"any\"]\n        }\n    },\n    \"to\": [\n        {\n            \"key_code\": \"d\"\n        }\n    ],\n    \"type\": \"basic\"\n}\n```\n\n-   Press the physical caps_lock key (`hid::usage::keyboard_or_keypad::keyboard_caps_lock`)\n    -   `key_event_dispatcher` is updated.\n        -   `pressed_keys_.insert(caps_lock)`\n    -   macOS update the caps lock LED state (on).\n    -   `event::type::caps_lock_state_changed (on)` is sent via `krbn::event_queue::utility::make_queue` in `karabiner_grabber`.\n        -   `modifier_flag_manager increase_led_lock (caps_lock)`\n        -   `key_event_dispatcher` is updated.\n            -   `pressed_modifier_flags_.insert(caps_lock)`\n-   Release the physical caps_lock key (`hid::usage::keyboard_or_keypad::keyboard_caps_lock`)\n    -   `key_event_dispatcher` is updated.\n        -   `pressed_keys_.erase(caps_lock)`\n-   Press `down_arrow` key.j\n    -   `sticky_modifier caps_lock false` is sent by `modifiers.mandatory`.\n        -   `modifier_flag_manager decrease_sticky (caps_lock)`\n    -   `hid::usage::keyboard_or_keypad::keyboard_caps_lock` is sent via virtual hid keyboard.\n    -   `key_event_dispatcher` is updated.\n        -   `pressed_modifier_flags_.erase(caps_lock)`\n    -   `d` is sent via virtual hid keyboard.\n    -   sticky_modifiers are erased.\n    -   `sticky_modifier caps_lock true` is sent by `modifiers.mandatory`.\n        -   `modifier_flag_manager increase_sticky (caps_lock)`\n    -   macOS update the caps lock LED state (off).\n    -   `event::type::caps_lock_state_changed (off)` is sent via `krbn::event_queue::utility::make_queue` in `karabiner_grabber`.\n        -   `modifier_flag_manager decrease_led_lock (caps_lock)`\n            -   Note: led_lock will be ignored while other counter is active in modifier_flag_manager.\n-   Release `down_arrow` key.\n    -   `d` is sent via virtual hid keyboard.\n-   Press `tab` key.\n    -   `hid::usage::keyboard_or_keypad::keyboard_caps_lock` is sent via virtual hid keyboard by sticky_modifier.\n    -   sticky_modifiers are erased.\n    -   `tab` is sent via virtual hid keyboard.\n\n---\n\n## macOS Service Management\n\nThe elements related to managing services on macOS are as follows:\n\n-   `SMAppService`:\n    -   Register `LaunchDaemons/*.plist` and `LaunchAgents/*.plist`.\n-   `launchd`:\n    -   Starts processes according to the contents of plist files.\n-   `sfltool`:\n    -   A command to reset approval settings for LaunchDaemons.\n\nThere are two types of background processes: `daemon` and `agent`. Their characteristics are as follows:\n\n-   `daemon`:\n    -   Runs with root privileges.\n    -   Executes with the startup of macOS, even before the user logs in.\n    -   After the plist is registered by `SMAppService`, it is executed only after being approved by the user from `System Settings > General > Login Items & Extensions`.\n-   `agent`:\n    -   Runs with user privileges.\n    -   Executes when the user logs in.\n    -   Executes as soon as the plist is registered by `SMAppService`.\n\nThe behavior of agents is straightforward, and they operate as expected.\nHowever, daemons require user approval, which can easily lead to configuration inconsistencies on macOS.\nSpecifically, the following issues occur on macOS 13:\n\n-   The daemon does not automatically start after user approval if the following steps are taken:\n    -   Reproduction steps:\n        1.  Register a daemon using `SMAppService.register`.\n        2.  Approve the daemon in System Settings > General > Login Items & Extensions.\n        3.  Revoke the approval.\n        4.  Restart macOS.\n        5.  Re-approve the daemon.\n    -   Workaround:\n        -   After re-approving the daemon, register it using `SMAppService.register` to start the daemon.\n        -   Alternatively, restarting macOS also resolves the issue.\n-   The following steps can lead to various issues:\n    -   Reproduction steps:\n        1.  Register a daemon using `SMAppService.register`.\n        2.  Approve the daemon in System Settings > General > Login Items & Extensions.\n        3.  Reset the Login Items settings with `sfltool resetbtm`.\n        4.  Restart macOS.\n        5.  Register the daemon with SMAppService.register.\n            -   Problem #1: Although the user has not approved the daemon, it appears as if it is approved in System Settings > General > Login Items & Extensions.\n                The status of SMAppService correctly shows requiresApproval.\n                This is a problem with the System Settings UI.\n            -   Problem #2: In this state, even if the user re-approves the daemon, it will not start.\n                Restarting macOS will not start the daemon either.\n                To get it running, you need to call `SMAppService.unregister` once before `SMAppService.register`.\n\nTo avoid these issues, the application should adhere to the following:\n\n-   To avoid an issue after `sfltool resetbtm`, if the status of SMAppService is `.notFound`, call `unregister` before calling `register`.\n-   To avoid an issue of the daemon not starting, periodically check if the daemon is running using `launchctl print` command.\n    If the process is not running, call `SMAppService.register` to start the daemon.\n-   To avoid an issue with the System Settings UI, prompt the user to approve the daemon if it is not running.\n    Inform them that it may already appear as approved and, if it does not work correctly, guide them to revoke and re-approve the daemon.\n\n### Separate the applications that manage daemons and agents\n\nAs mentioned above, daemons and agents have different approval statuses when registered.\nIn the macOS System Settings > General > Login Items & Extensions UI, a display issue occurs if these two services are managed by a single application.\nSpecifically, if either daemons or agents are in the `requiresApproval` state, the checkbox in Login Items should be off.\nHowever, in reality, if either one is in the `enabled` state, the checkbox appears on.\nThis results in the checkbox being on even though either daemons or agents are not actually enabled.\n\nSeparating the applications that manage daemons and agents can avoid this issue.\nAdditionally, by thoughtfully naming the management applications, it becomes clearer that privileged processes are running, which enhances the user experience.\nTherefore, separating them is preferable from a user experience perspective.\n\n| Good example                                                | Bad example                                                   |\n| ----------------------------------------------------------- | ------------------------------------------------------------- |\n| ![processes](files/images/daemons-and-agents-separated.png) | ![processes](files/images/daemons-and-agents-in-same-app.png) |\n\n### How to check if a process is running using `launchctl print`\n\nFirst, run the following command:\n\n```shell\nlaunchctl print system/org.pqrs.service.daemon.karabiner_grabber\n```\n\nIf the output includes a line like `pid = 658`, this indicates the process ID, and the daemon is running if such a line is present.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.181640625,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org>\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.8828125,
          "content": "VERSION = `head -n 1 version`\n\nall:\n\t@echo \"Read a document at the following URL to build a distributable package.\"\n\t@echo \"https://github.com/pqrs-org/Karabiner-Elements/#how-to-build\"\n\npackage: clean\n\t./make-package.sh\n\t$(MAKE) clean-launch-services-database\n\nbuild:\n\t$(MAKE) -C src\n\nclean:\n\t$(MAKE) -C src clean\n\t$(MAKE) -C tests clean\n\trm -rf pkgroot\n\trm -f *.dmg\n\nclean-launch-services-database:\n\t$(MAKE) -C tools/clean-launch-services-database\n\ngitclean:\n\tgit clean -f -x -d\n\t(cd src/vendor/Karabiner-DriverKit-VirtualHIDDevice && git clean -f -x -d)\n\nnotarize:\n\txcrun notarytool \\\n\t\tsubmit Karabiner-Elements-$(VERSION).dmg \\\n\t\t--keychain-profile \"pqrs.org notarization\" \\\n\t\t--wait\n\t$(MAKE) staple\n\tsay \"notarization completed\"\n\nstaple:\n\txcrun stapler staple Karabiner-Elements-$(VERSION).dmg\n\nswift-format:\n\tfind src/apps -name '*.swift' -print0 | xargs -0 swift-format -i\n\nswiftlint:\n\tswiftlint\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 39.439453125,
          "content": "# Changelog\n\n## Beta\n\n-   🐛 Bug Fixes\n    -   Fixed an overflow issue with the mouse key movements.\n    -   Fixed an issue that the fn key is unintentionally tapped when use the media keys if \"Use all F1, F2, etc. keys as standard function keys\" is enabled.\n-   ✨ New Features\n    -   Added `XY movement multiplier` and `Wheels multiplier` to the mouse settings in Devices tab.\n    -   Added `frontmost_application_history_index` option into `open_application`.\n    -   Added `conditions` option into `to`.\n-   ⚡️ Improvements\n    -   Support the following keys:\n        -   consumer::ac_zoom_out\n        -   consumer::ac_zoom_in\n        -   generic_desktop::system_sleep\n    -   Added support for new consumer keys (Thanks to @indygriffiths):\n        -   `{ \"consumer_key_code\": \"stop\" }`\n        -   `{ \"consumer_key_code\": \"bass_boost\" }`\n        -   `{ \"consumer_key_code\": \"loudness\" }`\n        -   `{ \"consumer_key_code\": \"bass_increment\" }`\n        -   `{ \"consumer_key_code\": \"bass_decrement\" }`\n        -   `{ \"consumer_key_code\": \"ac_search\" }`\n    -   The implicit conversion of Touch ID to the Lock key has been modified to work even when modifiers are held down.\n\n## Karabiner-Elements 15.3.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v15.3.0/Karabiner-Elements-15.3.0.dmg)\n-   📅 Release date\n    -   Oct 28, 2024\n-   🐛 Bug Fixes\n    -   Fixed the behavior when setting the function keys to act as regular f1...f12 keys instead of media controls.\n-   ✨ New Features\n    -   Added the following variables for `variable_if`, `variable_unless`:\n        -   `system.scroll_direction_is_natural`\n        -   `system.use_fkeys_as_standard_function_keys`\n-   ⚡️ Improvements\n    -   The key names in the Function Keys settings became clearer when \"Use all F1, F2, etc. keys as standard function keys\" is enabled.\n\n## Karabiner-Elements 15.2.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v15.2.0/Karabiner-Elements-15.2.0.dmg)\n-   📅 Release date\n    -   Oct 7, 2024\n-   🐛 Bug Fixes\n    -   The method for setting \"Use all F1, F2, etc. keys as standard function keys\" has been changed.\n        Due to internal processing in macOS, with the new virtual keyboard introduced in version 15.1.0, this setting must be changed through System Settings.\n\n## Karabiner-Elements 15.1.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v15.1.0/Karabiner-Elements-15.1.0.dmg)\n-   📅 Release date\n    -   Oct 6, 2024\n-   🔔 Important Notes\n    -   After the upgrade, you have to set keyboard type and restart macOS.\n        <table><tbody><tr><td><!-- border hack -->\n        <img src=\"https://karabiner-elements.pqrs.org/docs/releasenotes/images/v15.1.0/keyboard-type-selector@2x.png?v=2\" alt=\"keyboard type selector\" />\n        </td></tr></tbody></table>\n        <br/><br/>\n        <table><tbody><tr><td><!-- border hack -->\n        <img src=\"https://karabiner-elements.pqrs.org/docs/releasenotes/images/v15.1.0/macos-restart-required@2x.png\" alt=\"macOS restart required\" />\n        </td></tr></tbody></table>\n-   💥 Breaking changes\n    -   The implicit conversion feature for fn+arrow keys, fn+return, and fn+delete has been removed.\n        For example, fn+up arrow used to be automatically changed to page up, but it will now be treated as fn+up arrow without modification.\n    -   To improve the behavior around the fn key, the Vendor ID and Product ID of the virtual keyboard used by Karabiner-Elements have been changed to the same values as those of a real Apple external keyboard.\n    -   There were two JSON files that output information about connected devices, but this information has now been consolidated into `karabiner_grabber_devices.json`.\n        `karabiner_grabber_device_details.json` is no longer used. Please use `karabiner_grabber_devices.json` from now on.\n        -   `karabiner_grabber_devices.json`\n        -   `karabiner_grabber_device_details.json` (obsoleted)\n-   ✨ New Features\n    -   Added [open_application](https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/to/software_function/open_application/) to complex modifications.\n    -   A setting has been added to disable mouse cursor movement and scrolling for both the mouse and gamepad.\n    -   Settings of the gamepad stick have been added; deadzone and delta magnitude detection threshold.\n    -   Added an option to allow quitting EventViewer with Command+Q and Command+W.\n-   ⚡️ Improvements\n    -   Fixed an issue where disconnected devices would occasionally remain in the device list.\n    -   Updated the embedded screenshots and help messages for macOS 15 Sequoia.\n    -   Adjusted the gamepad deadzone default value.\n\n## Karabiner-Elements 15.0.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v15.0.0/Karabiner-Elements-15.0.0.dmg)\n-   📅 Release date\n    -   Aug 8, 2024\n-   💥 Breaking changes\n    -   macOS 11 and macOS 12 are no longer supported.\n    -   The background service management method has been changed to a new method compatible with macOS 13 and later.\n        Therefore, permission needs to be granted for the background service to run. Please follow the steps below.\n        -   Open Karabiner-Elements Settings.\n        -   Follow the instructions to allow Karabiner-Elements Privileged Daemons to run in the System Settings.\n            <br/><br/>\n            <table><tbody><tr><td><!-- border hack -->\n            <img src=\"https://karabiner-elements.pqrs.org/docs/releasenotes/images/v15.0.0/settings@2x.png\" alt=\"Karabiner-Elements Setttings\" />\n            </td></tr></tbody></table>\n    -   The method to enable the Multitouch Extension has changed.\n        To enable the Multitouch Extension, go to the Misc tab in the settings and turn on `Enable Multitouch Extension`.\n        <br/><br/>\n        <table><tbody><tr><td><!-- border hack -->\n        <img src=\"https://karabiner-elements.pqrs.org/docs/releasenotes/images/v15.0.0/multitouch-extension@2x.png\" alt=\"Karabiner-Elements Setttings\" />\n        </td></tr></tbody></table>\n-   🔔 Important Notes\n    -   A unique random ID called `karabiner_machine_identifier` is now generated during installation.\n        This ID is used for machine-specific settings and may be included in the karabiner.json file.\n        If you are sharing karabiner.json with others, you might be interested in how this ID is generated and whether it is safe to share.\n        Since it is a safe ID to share with others, and there is no need to mask it when you share karabiner.json with others.\n        For more details, please refer to the [Privacy](https://karabiner-elements.pqrs.org/docs/privacy/) page.\n        <br/><br/>\n        <table><tbody><tr><td><!-- border hack -->\n        <img src=\"https://karabiner-elements.pqrs.org/docs/releasenotes/images/v15.0.0/karabiner-machine-identifier@2x.png\" alt=\"karabiner_machine_identifier\" />\n        </td></tr></tbody></table>\n-   ✨ New Features\n    -   Added the ability to disable Complex Modifications rules.\n    -   Added the ability to duplicate and reorder profiles.\n    -   Added the ability to restart Karabiner-Elements from the menu.\n    -   Added the ability to reset device settings that are not currently connected.\n-   ⚡️ Improvements\n    -   Improved \"{device} is ignored temporarily until {key_code} is pressed again\" message for to make it more understandable. (Thanks to @adamnovak)\n    -   Added \"Enable Karabiner Notification Window\" configuration, which allows you to hide the notification window by turning off this setting. (Thanks to @jwodnicki)\n    -   Support `al_consumer_control_configuration` key, used as the Music key. (Thanks to @kambala-decapitator)\n    -   Improved behaviour when using the gamepad stick as a pointing device.\n    -   Improved `to_if_alone` behavior to use the modifier flags of the time the key is pressed, when sending events.\n    -   Added `{\"type\": \"unset\"}` option to `set_variable`.\n    -   Integrated `karabiner_observer` functions into `karabiner_grabber`, and then `karabiner_observer` has been removed.\n        The number of background processes has been reduced, resolving performance issues caused by inter-process communication that were occurring in some environments.\n    -   A custom JSON formatter has been introduced to save JSON in a more compact format.\n    -   The process for saving the configuration file has been optimized so that settings that have not been changed from their default values are not included in karabiner.json.\n    -   Internal changes:\n        -   Improved the interface of libkrbn to minimize the use of unsafe pointers in Swift.\n\n## Karabiner-Elements 14.13.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v14.13.0/Karabiner-Elements-14.13.0.dmg)\n-   📅 Release date\n    -   Dec 9, 2023\n-   🔔 Important Notes\n    -   A reboot is required when upgrading from version 14.12.0 or earlier, to update the virtual keyboard driver.\n-   ✨ New Features\n    -   Palm detection is supported in MultitouchExtension. (Thanks to @quarkw)\n    -   Use Bluetooth address (Bluetooth MAC address) is used to identify the device when the Bluetooth device does not have Vendor ID and Product ID. (Thanks to @stackia)\n    -   Add the following settings into Devices tab.\n        -   `Flip mouse X`\n        -   `Flip mouse Y`\n        -   `Flip mouse vertical wheel`\n        -   `Flip mouse horizontal wheel`\n        -   `Swap mouse X and Y`\n        -   `Swap mouse wheels`\n    -   Gamepad support (DirectInput devices are supported. Xinput is not supported at all)\n    -   Added \"Add your own rule\" button into Complex Modifications settings.\n    -   The json content of Complex Modifications can now be changed via the Edit button.\n    -   Added \"Move item to top\" and \"Move item to bottom\" into the context menu of the Complex Modifications list.\n    -   Add the following options to `karabiner_cli`\n        -   `--format-json`\n        -   `--eval-js`\n        -   `--silent`\n    -   Changes for users who write their own json.\n        -   The `device_address` condition has been added into `device_if` and `device_unless`. (Thanks to @stackia)\n        -   Added `key_up_value` to `set_variable`.\n        -   Added `mouse_basic` manipulator.\n-   ⚡️ Improvements\n    -   Added the ability to filter by keywords when adding Complex Modifications rules.\n    -   Adjusted the position of the Add rule button in Complex Modifications. (Thanks to @GanZhiXiong)\n    -   MultitouchExtension has been rewritten in Swift.\n\n## Karabiner-Elements 14.12.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v14.12.0/Karabiner-Elements-14.12.0.dmg)\n-   📅 Release date\n    -   Apr 16, 2023\n-   ✨ New Features\n    -   Added the ability to switch application icons. This can be changed from the UI tab in Settings.\n        -   [Manual](https://karabiner-elements.pqrs.org/docs/manual/misc/change-app-icon/)\n    -   Added new application icons. (Thanks to @Zabriskije)\n    -   Added the following variables in MultitouchExtension. (Thanks to @codeanpeace)\n        -   multitouch_extension_finger_count_upper_quarter_area\n        -   multitouch_extension_finger_count_lower_quarter_area\n        -   multitouch_extension_finger_count_left_quarter_area\n        -   multitouch_extension_finger_count_right_quarter_area\n-   ⚡️ Improvements\n    -   Prevent moving the mouse from waking up from sleep by ungrab devices during system sleep. (Thanks to @aspacca)\n    -   Fixed inconsistent and confusing brightness label in Simple Modifications. (Thanks to @revolter)\n    -   Improved MultitouchExtension to synchronize finger count (half and quarter) variables with finger movement.\n    -   Moved \"Disable the built-in keyboard while this device is connected\" settings into Devices tab from Devices > Advanced tab in Settings.\n-   🐛 Bug Fixes\n    -   Fixed an issue that dynamic keyboard type change (ANSI, ISO and JIS) by changing the country code of the virtual keyboard did not work properly.\n\n## Karabiner-Elements 14.11.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v14.11.0/Karabiner-Elements-14.11.0.dmg)\n-   📅 Release date\n    -   Jan 7, 2023\n-   💥 Breaking changes\n    -   Changed bundle identifier of Karabiner-Elements Settings to `org.pqrs.Karabiner-Elements.Settings` from `org.pqrs.Karabiner-Elements.Preferences`.\n-   ✨ New Features\n    -   Added `Ask for confirmation when quitting` option into Settings > Misc tab. (Thanks to @basti1302)\n-   ⚡️ Improvements\n    -   Improved health checks for inter-process communication to better recover from errors.\n-   🐛 Bug Fixes\n    -   Fixed an issue that uninstaller does not remove Karabiner-Elements.app and Karabiner-EventViewer.app in macOS Ventura.\n    -   Fixed an issue that could cause multiple update windows will be shown.\n\n## Karabiner-Elements 14.10.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v14.10.0/Karabiner-Elements-14.10.0.dmg)\n-   📅 Release date\n    -   Sep 25, 2022\n-   ⚡️ Improvements\n    -   Update `set_mouse_cursor_position` to use the current screen if `screen` option is not specified. (Thanks to @gnawf)\n    -   Sparkle Framework has been updated.\n-   🐛 Bug Fixes\n    -   Fixed an issue that the `device_if` and `device_unless` does not work if vendor_id or product_id is zero. (or more precisely, if vendor_id or product_id cannot be retrieved and is set to 0)\n\n## Karabiner-Elements 14.9.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v14.9.0/Karabiner-Elements-14.9.0.dmg)\n-   📅 Release date\n    -   Sep 11, 2022\n-   ✨ New Features\n    -   Supported Remote control buttons. (menu arrows buttons, color buttons)\n    -   The `is_built_in_keyboard` has been added into `device_if` and `device_unless`.\n    -   The `device_exists_if` and `device_exists_unless` has been added into `conditions`.\n-   🐛 Bug Fixes\n    -   Fixed an issue that the ignored device's modifier keys are not ignored properly.\n\n## Karabiner-Elements 14.8.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v14.8.0/Karabiner-Elements-14.8.0.dmg)\n-   📅 Release date\n    -   Aug 11, 2022\n-   ✨ New Features\n    -   Add `Enable unsafe configuration` feature into Preferences > Pro tab.\n-   🐛 Bug Fixes\n    -   Fixed an issue that the built-in keyboard is not be treated as the built-in keyboard if the keyboard is connected via SPI (Serial Peripheral Interface), such as M2 MacBook Air.\n\n## Karabiner-Elements 14.6.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v14.6.0/Karabiner-Elements-14.6.0.dmg)\n-   📅 Release date\n    -   Jul 31, 2022\n-   ✨ New Features\n    -   `Treat as a built-in keyboard` setting has been added into Devices configuration. It works with \"Disable the built-in keyboard\" feature.\n-   🐛 Bug Fixes\n    -   Fixed an issue that \"Disable the built-in keyboard\" feature does not work if the built-in keyboard is not included in the event modification target devices.\n\n## Karabiner-Elements 14.5.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v14.5.0/Karabiner-Elements-14.5.0.dmg)\n-   📅 Release date\n    -   Jul 17, 2022\n-   💥 Breaking changes\n    -   The following modifier flags and manipulators are now canceled even for events from devices not grabbed by Karabiner-Elements, e.g. mouse clicks.\n        -   `sticky modifiers`\n        -   `to_if_alone`\n        -   `to_if_held_down`\n        -   `to_delayed_action`\n-   ⚡️ Improvements\n    -   Improved behavior the sticky modifiers when used together with the built-in trackpad. (Thanks to @quarkw)\n    -   Preferences Window is rewritten in SwiftUI.\n    -   `set_variable` now supports bool and string value.\n    -   Sparkle Framework has been updated.\n\n## Karabiner-Elements 14.4.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v14.4.0/Karabiner-Elements-14.4.0.dmg)\n-   📅 Release date\n    -   Mar 1, 2022\n-   🐛 Bug Fixes\n    -   Fixed an issue that NotificationWindow causes high CPU usage in some environments.\n\n## Karabiner-Elements 14.3.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v14.3.0/Karabiner-Elements-14.3.0.dmg)\n-   📅 Release date\n    -   Nov 20, 2021\n-   ⚡️ Improvements\n    -   Added System Extensions tab to EventViewer.\n    -   Added a workaround for macOS's ioreg command issue that consumes high CPU usage on macOS Monterey.\n\n## Karabiner-Elements 14.2.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v14.2.0/Karabiner-Elements-14.2.0.dmg)\n-   📅 Release date\n    -   Nov 3, 2021\n-   💥 Breaking changes\n    -   macOS 10.15 support has been dropped.\n-   ✨ New Features\n    -   Supported Touch ID on Magic Keyboard.\n    -   Supported application launcher keys (Mail, Browser, Calculator, etc.) which are belong to HID Consumer Usage Page and Application Launch Buttons Usage.\n    -   Add new features for writing your own settings:\n        -   Added [`software_function.iokit_power_management_sleep_system`](https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/to/software_function/iokit_power_management_sleep_system/).\n-   🐛 Bug Fixes\n    -   Fixed an issue that an alert window appears in an incorrect position on macOS 12 Monterey.\n-   ⚡️ Improvements\n    -   Update application icons. (Thanks to Kouji TAMURA)\n    -   EventViewer is rewritten in SwiftUI.\n\n## Karabiner-Elements 13.7.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v13.7.0/Karabiner-Elements-13.7.0.dmg)\n-   📅 Release date\n    -   Sep 6, 2021\n-   🐛 Bug Fixes\n    -   Fix an issue that `shell_command` does not set environment variables (HOME, USER, etc.).\n\n## Karabiner-Elements 13.6.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v13.6.0/Karabiner-Elements-13.6.0.dmg)\n-   📅 Release date\n    -   Sep 3, 2021\n-   ✨ New Features\n    -   Add new features for writing your own settings:\n        -   Added [`software_function.cg_event_double_click`](https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/to/software_function/cg_event_double_click/).\n        -   Added [`software_function.set_mouse_cursor_position`](https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/to/software_function/set_mouse_cursor_position/).\n        -   Added [`set_notification_message`](https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/to/set-notification-message/).\n-   🐛 Bug Fixes\n    -   Fixed an issue that karabiner.json parse error message is not shown in Preferences > Log if the error message contains corrupted characters.\n-   ⚡️ Improvements\n    -   Changed to log the output of shell_command into console_user_server.log.\n    -   The notification window transparency will be increased when the mouse cursor is hovered.\n\n## Karabiner-Elements 13.5.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v13.5.0/Karabiner-Elements-13.5.0.dmg)\n-   📅 Release date\n    -   Jun 20, 2021\n-   ⚡️ Improvements\n    -   Improved temporary directory handling to reduce the frequency of mds process accessing it.\n    -   Improved `mouse_key.speed_multiplier` handling when it is used with `to.modifiers`, the modifier is retained while speed_multiplier is active.\n    -   The caps lock LED manipulation has been enabled by default.\n        -   Note: This change applies to newly connected keyboards.\n    -   Several Objective-C code around GUI has been rewritten in Swift + SwiftUI.\n\n## Karabiner-Elements 13.4.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v13.4.0/Karabiner-Elements-13.4.0.dmg)\n-   📅 Release date\n    -   Apr 4, 2021\n-   🐛 Bug Fixes\n    -   Fixed an issue that Karabiner-Elements stops working with `virtual_hid_keyboard is not ready. Please wait for a while.` error message when you kill `karabiner_console_user_server` process manually.\n-   ⚡️ Improvements\n    -   Changed to terminate virtual HID devices immediately after quit Karabiner-Elements.\n\n### 🔔 Notes for Mac computers with Apple Silicon (Apple M1) users\n\nmacOS Big Sur 11.2 or earlier has an issue within memory management and HID device handling that causes kernel panics on Mac computers with Apple Silicon.\nThe virtual device that is used internally by Karabiner-Elements triggers this issue, and a kernel panic might be caused at macOS shutdown.\n\nWe confirmed that this issue has been fixed in [macOS Big Sur 11.3 Beta](https://beta.apple.com/sp/betaprogram/).\nPlease use macOS Big Sur 11.3 Beta or later versions if you are facing the kernel panic issue.\n\n## Karabiner-Elements 13.3.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v13.3.0/Karabiner-Elements-13.3.0.dmg)\n-   📅 Release date\n    -   Jan 29, 2021\n-   🐛 Bug Fixes\n    -   Fixed an issue that installer requires Rosetta 2 on Apple Silicon Macs.\n-   💥 Breaking changes\n    -   Changed the default function of f4 key to `spotlight`, f5 key to `dictation`, f6 key to `f6`.\n        -   Note: This change will be applied when you create a new profile.\n    -   Changed to Karabiner-Elements does not modify f1-f12 keys on touch bar.\n    -   The caps lock delay of Karabiner Virtual HID Keyboard has been removed.\n        The state of caps lock will be changed immediately after you press the caps lock key.\n-   ✨ New Features\n    -   Supported [`sticky modifier keys`](https://karabiner-elements.pqrs.org/docs/help/how-to/sticky-modifier-key/)\n    -   Added `apple_vendor_keyboard_key_code` and `apple_vendor_top_case_key_code` to event definitions.\n        -   [apple_vendor_keyboard_key_code](https://github.com/pqrs-org/Karabiner-Elements/blob/main/src/share/types/momentary_switch_event_details/apple_vendor_keyboard_key_code.hpp)\n        -   [apple_vendor_top_case_key_code](https://github.com/pqrs-org/Karabiner-Elements/blob/main/src/share/types/momentary_switch_event_details/apple_vendor_top_case_key_code.hpp)\n-   ⚡️ Improvements\n    -   Updated in-app screenshots to Big Sur.\n    -   Added the close button to notification window.\n\n## Karabiner-Elements 13.1.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v13.1.0/Karabiner-Elements-13.1.0.dmg)\n-   📅 Release date\n    -   Oct 30, 2020\n-   🔔 Important Notes\n    -   **Restarting macOS is required** after upgrading from v13.0.0.<br />\n        The following alert will be shown after upgrade. Please follow the instructions.<br />\n        <img src=\"https://karabiner-elements.pqrs.org/docs/releasenotes/images/v13.1.0/driver-version-not-matched-alert.png\" alt=\"driver version not matched alert\" width=\"400\" />\n-   🐛 Bug Fixes\n    -   Fixed an issue that Karabiner-DriverKit-VirtualHIDDevice might crash when caps lock key is pressed in some environments.\n\n## Karabiner-Elements 13.0.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v13.0.0/Karabiner-Elements-13.0.0.dmg)\n-   📅 Release date\n    -   Oct 4, 2020\n-   💥 Breaking changes\n    -   macOS 10.12 - 10.14 support has been dropped.\n-   ✨ New Features\n    -   Supported macOS Big Sur (11.0)\n    -   Supported both Intel-based Macs and Apple Silicon Macs.\n    -   Changed the virtual keyboard and mouse implementation to DriverKit from deprecated kernel extension.\n-   ⚡️ Improvements\n    -   Improved preferences window messages.\n    -   Partial support for comments in karabiner.json configuration file.\n        -   Supported reading json file with comments.\n        -   Limitation: The json comments will be removed if you change the json from Preferences GUI or command line interface.\n\n## Karabiner-Elements 12.10.0\n\n-   [📦 Download](https://github.com/pqrs-org/Karabiner-Elements/releases/download/v12.10.0/Karabiner-Elements-12.10.0.dmg)\n-   📅 Release date\n    -   Jun 27, 2020\n-   ✨ New Features\n    -   `event_changed_if` and `event_changed_unless` has been added to `conditions`.\n-   ⚡️ Improvements\n    -   Improved sending f1-f12 keys in complex modification (e.g., \"change command+e to f2\") by ignoring media key mappings for these keys.\n    -   Improved caps lock LED handling.\n    -   Improved uninstaller adding the kernel extension staging area clean up.\n    -   Improved complex modifications json checker.\n    -   \"Check for updates\" has been improved.\n        -   Updated Sparkle signing to EdDSA (ed25519) from DSA.\n        -   URL of appcast.xml has been updated.\n\n## Karabiner-Elements 12.9.0\n\n-   📅 Release date\n    -   Jan 18, 2020\n-   ✨ New Features\n    -   `Open config folder` button has been added into Preferences.<br>\n        The feature provides [an easy way exporting configuration](https://karabiner-elements.pqrs.org/docs/manual/operation/export/).\n-   ⚡️ Improvements\n    -   Added a workaround for non-dismissible `Device is ignored temporarily` alert\n        which is caused by some devices that sends abnormal input events.\n-   🐛 Bug Fixes\n    -   Fixed `Add {key_code} to Karabiner-Elements` button on EventViewer for unnamed keys (raw number key codes).\n    -   Fixed an issue that modifier flag events are not dispatched when changing pointing button while other character keys are pressed.\n        (e.g., when changing pointing_button::button3 -> command+pointing_button::button1, command modifier is not sent when button1 is pressed while `t` key is also pressed.)\n\n## Karabiner-Elements 12.8.0\n\n-   📅 Release date\n    -   Nov 17, 2019\n-   ✨ New Features\n    -   Add `--show-current-profile-name` option into `karabiner_cli`.\n    -   Add `--list-profile-names` option into `karabiner_cli`.\n-   🐛 Bug Fixes\n    -   Fixed an issue that Karabiner-Elements stops working after switching user on macOS Catalina.\n    -   Fixed an issue that Caps Lock LED is always manipulated even `Manipulate LED` setting is off.\n    -   Fixed an issue that MultitouchExtension does not handle ignored area properly when a finger is touched ignored area repeatedly.\n\n## Karabiner-Elements 12.7.0\n\n-   📅 Release date\n    -   Sep 12, 2019\n-   ✨ New Features\n    -   MultitouchExtension app has been added.\n        -   Documentation:\n            -   [Usage](https://karabiner-elements.pqrs.org/docs/manual/misc/multitouch-extension/)\n            -   [How to integrate MultitouchExtension to your complex modifications](https://karabiner-elements.pqrs.org/docs/json/extra/multitouch-extension/)\n    -   Dark Mode has been supported.\n    -   Added `--set-variables` option into `karabiner_cli`.\n-   🐛 Bug Fixes\n    -   Fixed an issue that Karabiner-Elements might stop working after sleep on macOS Catalina.\n\n## Karabiner-Elements 12.6.0\n\n-   📅 Release date\n    -   Aug 16, 2019\n-   ✨ New Features\n    -   Support macOS Catalina.\n-   🐛 Bug Fixes\n    -   Fixed an issue that Karabiner-Elements fails to grab a device in rare cases.\n-   ⚡️ Improvements\n    -   Introduced karabiner_kextd.\n        (kext loading function was separated from karabiner_grabber.)\n    -   Improved EventViewer to show modifier flags of key events.\n    -   Suppressed unnecessary log messages.\n\n## Karabiner-Elements 12.5.0\n\n-   📅 Release date\n    -   Jun 10, 2019\n-   ✨ New Features\n    -   Add `Delay before open device` configuration into `Karabiner-Elements Preferences > Devices > Advanced` tab.\n    -   Added `Show key code in hexadecimal format` option into EventViewer.\n-   🐛 Bug Fixes\n    -   Fixed a key stuck issue which occurs when the key is released,\n        and at the exact same moment Karabiner-Elements opens the device.\n    -   Fixed an issue which Karabiner-Elements mistakes a remote user for a current console user\n        if another user is logged in from Screen Sharing while console is used.\n-   ⚡️ Improvements\n    -   Improved `XXX is ignored temporarily until YYY is pressed again` behavior.\n    -   Move `Disable the built-in keyboard while one of the following selected devices is connected` configuration\n        into `Karabiner-Elements Preferences > Devices > Advanced` tab.\n\n## Karabiner-Elements 12.4.0\n\n-   📅 Release date\n    -   May 14, 2019\n-   ✨ New Features\n    -   Add `Mouse Key XY speed` configuration into `Karabiner-Elements Preferences > Virtual Keyboard` tab.\n    -   `Device is ignored temporarily` alert has been introduced.<br/>\n        This alert will be shown if you hold keys or buttons down before Karabiner-Elements opens the device.<br/>\n        Please press the described key or button again to dismiss the alert.\n-   🐛 Bug Fixes\n    -   Fixed a key stuck issue which occurs when the key is held down before Karabiner-Elements opens the device.\n-   ⚡️ Improvements\n    -   Event code format on EventViewer changed to decimal number from hex.\n\n## Karabiner-Elements 12.3.0\n\n-   📅 Release date\n    -   Apr 24, 2019\n-   💥 Breaking changes\n    -   complex modifications json will be checked strictly since this release.<br/>\n        Please check error messages if your complex modifications do not work after upgrade.\n-   ✨ New Features\n    -   Added [Change mouse motion to scroll](https://ke-complex-modifications.pqrs.org/#mouse_motion_to_scroll) feature.<br/>\n        -   Note: You have to enable your mice on [Devices tab](https://karabiner-elements.pqrs.org/docs/manual/configuration/configure-devices/) when you want to use this feature.\n    -   Added `--lint-complex-modifications` option into `karabiner_cli`.\n        It allows you checks a complex-modifications json file.\n-   ⚡️ Improvements\n    -   Set Karabiner-Elements.app and Karabiner-EventViewer.app immutable\n        in order to ensure unremovable them except built-in uninstaller.\n        Please use the [uninstaller](https://karabiner-elements.pqrs.org/docs/manual/operation/uninstall/) when you want to remove Karabiner-Elements.\n    -   Added a wait before grabbing device in order to avoid an macOS issue that device will be unusable after Karabiner-Elements is quit.\n    -   Changes for users who write their own json.\n        -   `to` and `to_*` support single object, e.g., `\"to\": { \"key_code\": \"spacebar\" }`.\n        -   New modifier aliases are added: `left_alt`, `left_gui`, `right_alt`, `right_gui`.\n        -   `key_code`, `consumer_key_code` and `pointing_button` supports a number value, e.g., `\"from\": {\"key_code\": 175}`.\n\n## Karabiner-Elements 12.2.0\n\n-   📅 Release date\n    -   Feb 1, 2019\n-   ✨ New Features\n    -   Karabiner-Elements makes a backup file of karabiner.json before updating it if the backup file does not exists.\n        (~/.config/karabiner/automatic_backups/karabiner_YYYYMMDD.json)\n-   🐛 Bug Fixes\n    -   Fixed an issue that Caps Lock LED does not work on macOS Mojave.\n-   ⚡️ Improvements\n    -   `shell_command` string max length has been expanded. (256 byte -> 32 KB)\n    -   A device grabbing process has been improved. (Observing device state by a separated `karabiner_observer` process.)\n    -   The event processing has been improved and the latency has been reduced by using [pqrs::dispatcher](https://github.com/pqrs-org/cpp-dispatcher).\n\n## Karabiner-Elements 12.1.0\n\n-   📅 Release date\n    -   May 30, 2018\n-   💥 Breaking changes\n    -   Changed the order of `to_if_alone` and `to_after_key_up` event handling.<br />\n        `to_if_alone` will be handled before `to_after_key_up`.\n-   ✨ New Features\n    -   Added new items into `simultaneous_options`:\n        -   `simultaneous_options.detect_key_down_uninterruptedly`\n        -   `simultaneous_options.key_up_when`\n    -   Added new parameters into `to event definition`:\n        -   `hold_down_milliseconds`\n        -   `halt`\n-   🐛 Bug Fixes\n    -   Fixed an issue that random key repeat happen at extremely high system CPU usage.\n-   ⚡️ Improvements\n    -   Increased rollover limit of virtual keyboard. (6 -&gt; 32)<br />\n        This change mainly improves usability when you are using multiple keyboards at the same time.\n    -   Improved modifier flags handling in `to_after_key_up` and `to_if_alone`.\n\n## Karabiner-Elements 12.0.0\n\n-   📅 Release date\n    -   Apr 12, 2018\n-   💥 Breaking changes\n    -   macOS 10.11 support has been dropped.<br />\n        Karabiner-Elements works on macOS 10.12 (Sierra) or later.\n    -   `Keyboard type` in the virtual keyboard preferences has been removed. (Adverse effect of virtual keyboard improvement.)<br />\n        Please change the keyboard type from `System Preferences > Keyboard > Change Keyboard Type...`.\n    -   `Caps Lock Delay` in the virtual keyboard preferences has been removed. (Adverse effect of virtual keyboard improvement.)\n    -   Changed `simultaneous` behaviour to post key_up events when any key is released.\n    -   Changed `to_after_key_up` and `to_if_alone` behaviour as mandatory modifiers are removed from these events.\n-   ✨ New Features\n    -   Added `simultaneous_options.key_down_order`, `simultaneous_options.key_up_order` and `simultaneous_options.to_after_key_up`.\n-   🐛 Bug Fixes\n    -   Fixed an issue that `to_if_alone`, `to_if_held_down` and `to_delayed_action` does not work properly with `simultaneous`.\n-   ⚡️ Improvements\n    -   The virtual keyboard compatibility has been improved.\n    -   EventViewer has been improved showing the correct key name for PC keyboard keys and international keys.\n    -   Improved keyboard repeat handling with `simultaneous`.\n\n## Karabiner-Elements 11.6.0\n\n-   📅 Release date\n    -   Feb 20, 2018\n-   ✨ New Features\n    -   Simultaneous key presses has been supported in complex modifications.\n-   ⚡️ Improvements\n    -   Improved Mouse key scroll wheel direction referring `System Preferences > Mouse > Scroll direction`.\n    -   Improved modifier flags handling around pointing button manipulations.\n    -   Mouse keys have been added into Simple Modifications.\n    -   The eject key has been added into the from key of Simple Modifications.\n    -   The Vendor ID and Product ID of virtual devices has been changed. (0x0,0x0 -> 0x16c0,0x27db and 0x16c0,0x27da)\n\n## Karabiner-Elements 11.5.0\n\n-   📅 Release date\n    -   Dec 30, 2017\n-   ✨ New Features\n    -   `to_if_held_down` has been added.\n-   🐛 Bug Fixes\n    -   Avoided a VMware Remote Console issue that mouse pointer does not work properly on VMRC when Karabiner-Elements grabs the pointing device.\n    -   Fixed an issue that `to_if_alone` does not work properly when `to` is empty.\n-   ⚡️ Improvements\n    -   Improved modifier flags handling in `to events`.\n    -   Improved a way to save karabiner.json.\n\n## Karabiner-Elements 11.4.0\n\n-   📅 Release date\n    -   Dec 7, 2017\n-   ✨ New Features\n    -   `mouse_key` has been added.\n        -   Examples:\n            -   Mouse keys (simple):\n                [json](https://github.com/pqrs-org/KE-complex_modifications/blob/main/public/json/mouse_keys_simple.json)\n                [(src)](https://github.com/pqrs-org/KE-complex_modifications/blob/main/src/json/mouse_keys_simple.json.erb)\n            -   Mouse keys (full)\n                [json](https://github.com/pqrs-org/KE-complex_modifications/blob/main/public/json/mouse_keys_full.json)\n                [(src)](https://github.com/pqrs-org/KE-complex_modifications/blob/main/src/json/mouse_keys_full.json.erb)\n    -   `location_id` has been added to `device_if` and `device_unless`.\n-   🐛 Bug Fixes\n    -   Fixed an issue that the checkbox in `Preferences > Devices` is disabled for keyboards which do not have their own vendor id.\n\n## Karabiner-Elements 11.3.0\n\n-   📅 Release date\n    -   Nov 12, 2017\n-   🐛 Bug Fixes\n    -   Fixed an issue that Karabiner-11.2.0 does not work properly on some environments due to a possibility of macOS kernel extension cache problem.\n\n## Karabiner-Elements 11.2.0\n\n-   📅 Release date\n    -   Nov 9, 2017\n-   ✨ New Features\n    -   Mouse button modifications has been added.<br />\n        Note:\n        -   You have to enable your Mouse manually in Preferences &gt; Devices tab.\n        -   Karabiner-Elements cannot modify Apple's pointing devices.\n    -   `to_delayed_action` has been added.\n    -   `input_source_if` and `input_source_unless` has been added to `conditions`.\n    -   `select_input_source` has been added.\n    -   `keyboard_type_if` and `keyboard_type_unless` has been added to `conditions`.\n    -   The caps lock LED manipulation has been disabled with non Apple keyboards until it is enabled manually.\n-   ⚡️ Improvements\n    -   The virtual keyboard handling has been improved.\n\n## Karabiner-Elements 11.1.0\n\n-   📅 Release date\n    -   Oct 4, 2017\n-   🐛 Bug Fixes\n    -   Fixed an issue that modifier flags becomes improperly state by mouse events.\n\n## Karabiner-Elements 11.0.0\n\n-   📅 Release date\n    -   Sep 18, 2017\n-   ✨ New Features\n    -   The first stable release of Karabiner-Elements.\n        (There is no changes from Karabiner-Elements 0.91.16.)\n\n## Karabiner-Elements 0.91.16\n\n-   Karabiner-Elements waits grabbing device until all modifier keys are released in order to avoid modifier flags stuck issue in mouse events.\n-   Support consumer keys (e.g., media key events in Logitech keyboards.)\n\n## Karabiner-Elements 0.91.13\n\n-   Add per device support in `Simple Modifications` and `Fn Function Keys`.\n-   The modifier flag event handling has been improved.\n\n## Karabiner-Elements 0.91.12\n\n-   `device_if` and `device_unless` has been added to `conditions`.\n    -   An example: <https://github.com/pqrs-org/KE-complex_modifications/blob/main/public/json/example_device.json>\n\n## Karabiner-Elements 0.91.11\n\n-   Fixed an issue that modifier flags might become improperly state in complex_modifications.\n    (In complex_modifications rules which changes modifier+modifier to modifier.)\n\n## Karabiner-Elements 0.91.10\n\n-   macOS 10.13 (High Sierra) support has been improved.\n\n## Karabiner-Elements 0.91.9\n\n-   `variable_if` and `variable_unless` has been added to `conditions`.\n    You can use `set_variable` to change the variables.\n    -   An example: <https://github.com/pqrs-org/KE-complex_modifications/blob/ef8074892e5fff8a4781a898869f8d341b5a815a/docs/json/personal_tekezo.json>\n-   `to_after_key_up` has been added to `complex_modifications > basic`.\n-   `\"from\": { \"any\": \"key_code\" }` has been added to `complex_modifications > basic`.\n    You can use this to disable untargeted keys in your mode. (e.g., disable untargeted keys in Launcher Mode.)\n    -   An example: <https://github.com/pqrs-org/KE-complex_modifications/blob/ef8074892e5fff8a4781a898869f8d341b5a815a/docs/json/personal_tekezo.json#L818-L844>\n-   `Variables` tab has been added into `EventViewer`.\n    You can confirm the `set_variable` result in `Variables` tab.\n\n## Karabiner-Elements 0.91.8\n\n-   Fixed an issue that karabiner_grabber might be crashed when frontmost application is changed.\n\n## Karabiner-Elements 0.91.7\n\n-   Shell command execution has been supported. (e.g., Launch apps in <https://ke-complex-modifications.pqrs.org/> )\n\n## Karabiner-Elements 0.91.6\n\n-   The conditional event manipulation has been supported. (`frontmost_application_if` and `frontmost_application_unless`)\n\n## Karabiner-Elements 0.91.5\n\n-   GUI for complex_modifications has been added.\n-   Syntax of `complex_modifications > parameters` has been changed.\n\n## Karabiner-Elements 0.91.4\n\n-   The modifier flag event handling has been improved.\n-   Show warning and error logs by colored text in Log tab.\n\n## Karabiner-Elements 0.91.3\n\n-   Add timeout to `to_if_alone`.\n\n## Karabiner-Elements 0.91.2\n\n-   Initial support of `complex_modifications > basic > to_if_alone`.\n\n## Karabiner-Elements 0.91.1\n\n-   Fixed an issue that Karabiner-Elements stops working after user switching.\n-   Initial support of `complex_modifications` (No GUI yet).\n\n## Karabiner-Elements 0.91.0\n\n-   event manipulation has been changed to `src/core/grabber/include/manipulator/details/basic.hpp`.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.876953125,
          "content": "[![Build Status](https://github.com/pqrs-org/Karabiner-Elements/workflows/Karabiner-Elements%20CI/badge.svg)](https://github.com/pqrs-org/Karabiner-Elements/actions)\n[![License](https://img.shields.io/badge/license-Public%20Domain-blue.svg)](https://github.com/pqrs-org/Karabiner-Elements/blob/main/LICENSE.md)\n\n# Karabiner-Elements\n\nKarabiner-Elements is a powerful key remapper for macOS.\n\n## Download\n\nYou can download Karabiner-Elements from the [official site](https://karabiner-elements.pqrs.org/).\n\nAlternatively, for users of [homebrew](https://brew.sh/), Karabiner-Elements may be installed with `brew install --cask karabiner-elements`.\n\n### Old releases\n\nYou can download previous versions of Karabiner-Elements from [here](https://karabiner-elements.pqrs.org/docs/releasenotes/).\n\n## Supported systems\n\n-   macOS 15 Sequoia\n    -   Both Intel-based Macs and Apple Silicon Macs\n-   macOS 14 Sonoma\n    -   Both Intel-based Macs and Apple Silicon Macs\n-   macOS 13 Ventura\n    -   Both Intel-based Macs and Apple Silicon Macs\n\n## Usage\n\nDocumentation can be found here: <https://karabiner-elements.pqrs.org/docs/>\n\n## Donations\n\nIf you would like to contribute financially to the development of Karabiner-Elements, donations can be made via <https://karabiner-elements.pqrs.org/docs/pricing/>\n\n---\n\n## For developers\n\n### How to build\n\nSystem requirements to build Karabiner-Elements:\n\n-   macOS 13+\n-   Xcode 15.0.1+\n-   Command Line Tools for Xcode (`xcode-select --install`)\n-   xz (`brew install xz`)\n-   [XcodeGen](https://github.com/yonaskolb/XcodeGen) (`brew install xcodegen`)\n-   CMake (`brew install cmake`)\n\n#### Steps\n\n1.  Get source code by executing the following command in Terminal.app.\n\n    ```shell\n    git clone --depth 1 https://github.com/pqrs-org/Karabiner-Elements.git\n    cd Karabiner-Elements\n    git submodule update --init --recursive --depth 1\n    ```\n\n2.  (Optional) If you have a codesign identity:\n\n    1.  Find your codesign identity.\n\n        ```shell\n        security find-identity -p codesigning -v | grep 'Developer ID Application'\n        ```\n\n        The result is as follows.\n\n        ```text\n        1) 8D660191481C98F5C56630847A6C39D95C166F22 \"Developer ID Application: Fumihiko Takayama (G43BCU2T37)\"\n        ```\n\n        Your codesign identity is `8D660191481C98F5C56630847A6C39D95C166F22` in the above case.\n\n    2.  Set environment variable to use your codesign identity.\n\n        ```shell\n        export PQRS_ORG_CODE_SIGN_IDENTITY=8D660191481C98F5C56630847A6C39D95C166F22\n        ```\n\n    3.  Find your codesign identity for installer signing.\n\n        ```shell\n        security find-identity -p basic -v | grep 'Developer ID Installer'\n        ```\n\n        The result is as follows.\n\n        ```text\n        1) C86BB5F7830071C7B0B07D168A9A9375CC2D02C5 \"Developer ID Installer: Fumihiko Takayama (G43BCU2T37)\"\n        ```\n\n        Your codesign identity is `C86BB5F7830071C7B0B07D168A9A9375CC2D02C5` in the above case.\n\n    4.  Set environment variable to use your codesign identity for installer signing.\n\n        ```shell\n        export PQRS_ORG_INSTALLER_CODE_SIGN_IDENTITY=C86BB5F7830071C7B0B07D168A9A9375CC2D02C5\n        ```\n\n3.  Build a package by executing the following command in Terminal.app.\n\n    ```shell\n    make package\n    ```\n\n    The `make` script will create a redistributable **Karabiner-Elements-VERSION.dmg** in the current directory.\n\n#### Note about pre-built binaries in the source tree\n\nKarabiner-Elements uses some pre-built binaries in the source tree.\n\n-   `src/vendor/Karabiner-DriverKit-VirtualHIDDevice/dist/Karabiner-DriverKit-VirtualHIDDevice-*.pkg` (the latest one)\n-   `Sparkle.framework` in `src/apps/SettingsWindow/`\n\nThe above `make package` command does not rebuild these binaries.<br/>\n(These binaries will be copied in the distributed package.)\n\nIf you want to rebuild these binaries, you have to build them manually.<br/>\nPlease follow the instruction of these projects.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.0966796875,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nPlease send an email to <vulnerability@pqrs.org>\n\n"
        },
        {
          "name": "TASKS.md",
          "type": "blob",
          "size": 1.099609375,
          "content": "# Tasks\n\n-   [ ] Add disable scroll wheel feature.\n-   [ ] Add scroll wheel to source events.\n-   [ ] Add mouse movement to source events.\n-   [ ] Add `event_type` to `to` in order to support `key_down` only event.\n-   [ ] Support ignoring debouncing events\n\n## Done\n\n-   [x] Update launch daemons and agents with dropping macOS 12 support.\n    -   <https://developer.apple.com/documentation/servicemanagement/updating_helper_executables_from_earlier_versions_of_macos>\n-   [x] Support sticky keys without lock\n        <https://github.com/pqrs-org/Karabiner-Elements/issues/477>\n-   [x] Migrate Catch2 to boost-ext/ut.\n-   [x] Migrate Objective-C code to Swift.\n    -   [x] KarabinerKit\n    -   [x] MultitouchExtension\n    -   [x] EventViewer\n    -   [x] Menu\n    -   [x] Settings\n    -   [x] NotificationWindow\n-   [x] Migrate to SwiftUI.\n    -   [x] MultitouchExtension\n    -   [x] Settings\n    -   [x] EventViewer\n    -   [x] NotificationWindow\n\n## Wontfix\n\n-   [x] Add IOHIDSystem keyboard implementation to support own adjustable key repeat feature.\n    -   IOHIDSystem has been deprecated at macOS Big Sur (macOS 11.0).\n"
        },
        {
          "name": "appendix",
          "type": "tree",
          "content": null
        },
        {
          "name": "files",
          "type": "tree",
          "content": null
        },
        {
          "name": "make-package.sh",
          "type": "blob",
          "size": 3.5986328125,
          "content": "#!/bin/bash\n\nset -u # forbid undefined variables\nset -e # forbid command failure\n\nversion=$(cat version)\n\n#\n# Build\n#\n\necho \"make build\"\nruby scripts/reduce-logs.rb 'make build' || exit 99\n\n#\n# Copy files\n#\n\necho \"Copy Files\"\n\nrm -rf pkgroot\nmkdir -p pkgroot\n\nbasedir=\"pkgroot/Library/Application Support/org.pqrs/Karabiner-Elements\"\nmkdir -p \"$basedir\"\ncp version \"$basedir/package-version\"\ncp src/scripts/uninstall.sh \"$basedir\"\ncp src/scripts/uninstall_core.sh \"$basedir\"\ncp src/scripts/repair.sh \"$basedir\"\ncp files/complex_modifications_rules_example.json \"$basedir\"\ncp -R \"src/apps/AppIconSwitcher/build/Release/Karabiner-AppIconSwitcher.app\" \"$basedir\"\ncp -R \"src/apps/Menu/build/Release/Karabiner-Menu.app\" \"$basedir\"\ncp -R \"src/apps/MultitouchExtension/build/Release/Karabiner-MultitouchExtension.app\" \"$basedir\"\ncp -R \"src/apps/NotificationWindow/build/Release/Karabiner-NotificationWindow.app\" \"$basedir\"\ncp -R \"src/apps/ServiceManager-Non-Privileged-Agents/build/Release/Karabiner-Elements Non-Privileged Agents.app\" \"$basedir\"\ncp -R \"src/apps/ServiceManager-Privileged-Daemons/build/Release/Karabiner-Elements Privileged Daemons.app\" \"$basedir\"\n\nbasedir=\"pkgroot/Library/Application Support/org.pqrs/Karabiner-Elements/scripts\"\nmkdir -p \"$basedir\"\ncp src/scripts/copy_current_profile_to_system_default_profile.applescript \"$basedir\"\ncp src/scripts/remove_system_default_profile.applescript \"$basedir\"\ncp src/scripts/uninstaller.applescript \"$basedir\"\n\nbasedir=\"pkgroot/Library/Application Support/org.pqrs/Karabiner-Elements/bin\"\nmkdir -p \"$basedir\"\ncp src/bin/cli/build/Release/karabiner_cli \"$basedir\"\ncp src/core/console_user_server/build/Release/karabiner_console_user_server \"$basedir\"\ncp src/core/grabber/build/Release/karabiner_grabber \"$basedir\"\ncp src/core/session_monitor/build/Release/karabiner_session_monitor \"$basedir\"\n\nbasedir=\"pkgroot/Applications\"\nmkdir -p \"$basedir\"\ncp -R \"src/apps/EventViewer/build/Release/Karabiner-EventViewer.app\" \"$basedir\"\ncp -R \"src/apps/SettingsWindow/build/Release/Karabiner-Elements.app\" \"$basedir\"\n\n#\n# Sign with Developer ID\n#\n\nbash scripts/codesign.sh \"pkgroot\"\n\n#\n# Update file permissions\n#\n\nbash \"scripts/setpermissions.sh\" pkginfo\nbash \"scripts/setpermissions.sh\" pkgroot\n\nchmod 755 pkginfo/Scripts/postinstall\nchmod 755 pkginfo/Scripts/preinstall\n\n#\n# Create pkg\n#\n\necho \"Create pkg\"\n\npkgName=\"Karabiner-Elements.pkg\"\npkgIdentifier=\"org.pqrs.Karabiner-Elements\"\narchiveName=\"Karabiner-Elements-${version}\"\n\nrm -rf $archiveName\nmkdir $archiveName\n\npkgbuild \\\n    --root pkgroot \\\n    --component-plist pkginfo/pkgbuild.plist \\\n    --scripts pkginfo/Scripts \\\n    --identifier $pkgIdentifier \\\n    --version $version \\\n    --install-location \"/\" \\\n    $archiveName/Installer.pkg\n\n#\n# Copy Karabiner-DriverKit-VirtualHIDDevice.pkg.\n#\n\nvirtualHIDDeviceDmg=$(ls src/vendor/Karabiner-DriverKit-VirtualHIDDevice/dist/Karabiner-DriverKit-VirtualHIDDevice-*.pkg | sort --version-sort | tail -n 1)\ncp $virtualHIDDeviceDmg $archiveName/Karabiner-DriverKit-VirtualHIDDevice.pkg\n\n#\n# productbuild\n#\n\nproductbuild \\\n    --distribution pkginfo/Distribution.xml \\\n    --package-path $archiveName \\\n    $archiveName/$pkgName\n\nrm -f $archiveName/Installer.pkg\nrm -f $archiveName/Karabiner-DriverKit-VirtualHIDDevice.pkg\n\n#\n# Sign\n#\n\necho \"Sign with Developer ID\"\n\nbash scripts/codesign-pkg.sh $archiveName/$pkgName\n\n#\n# Create dmg\n#\n\necho \"Make Archive\"\n\n# Note:\n# Some third vendor archiver fails to extract zip archive.\n# Therefore, we use dmg instead of zip.\n\nrm -f $archiveName.dmg\nhdiutil create -nospotlight $archiveName.dmg -srcfolder $archiveName -fs 'Journaled HFS+' -format ULMO\nrm -rf $archiveName\nchmod 644 $archiveName.dmg\n"
        },
        {
          "name": "pkginfo",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "version",
          "type": "blob",
          "size": 0.0078125,
          "content": "15.3.13\n"
        }
      ]
    }
  ]
}