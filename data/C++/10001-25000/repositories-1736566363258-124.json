{
  "metadata": {
    "timestamp": 1736566363258,
    "page": 124,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Alinshans/MyTinySTL",
      "stars": 11626,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.8095703125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# Local build files\n*c.cmd\n*a.exe\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\n[Xx]64/\n[Xx]86/\n[Bb]uild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n\n# Visual Studio Code\n.vscode/\n\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n\n# TODO: Un-comment the next line if you do not want to checkin \n# your web deploy settings because they may include unencrypted\n# passwords\n#*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Microsoft Azure ApplicationInsights config file\nApplicationInsights.config\n\n# Windows Store app package directory\nAppPackages/\nBundleArtifacts/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# LightSwitch generated files\nGeneratedArtifacts/\nModelManifest.xml\n\n# Paket dependency manager\n.paket/paket.exe\n\n# FAKE - F# Make\n.fake/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.3046875,
          "content": "language: cpp\n\n# ubuntu 14.04 version\nsudo: required\ndist: trusty\n\nmatrix:\n  include:\n    - os: linux\n      compiler: gcc\n      addons:\n        apt:\n          sources: ['ubuntu-toolchain-r-test']\n          packages: ['g++-5']\n      env:\n        - MATRIX_EVAL=\"CC=gcc-5 && CXX=g++-5\"\n\n    - os: linux\n      compiler: gcc\n      addons:\n        apt:\n          sources: ['ubuntu-toolchain-r-test']\n          packages: ['g++-6']\n      env:\n        - MATRIX_EVAL=\"CC=gcc-6 && CXX=g++-6\"\n\n    - os: linux\n      compiler: gcc\n      addons:\n        apt:\n          sources: ['ubuntu-toolchain-r-test']\n          packages: ['g++-7']\n      env:\n        - MATRIX_EVAL=\"CC=gcc-7 && CXX=g++-7\"\n        \n    - os: osx\n      osx_image: xcode5\n      env:\n        - MATRIX_EVAL=\"CC=clang && CXX=clang++\"\n        \n    - os: osx\n      osx_image: xcode6\n      env:\n        - MATRIX_EVAL=\"CC=clang && CXX=clang++\"\n        \n    - os: osx\n      osx_image: xcode7\n      env:\n        - MATRIX_EVAL=\"CC=clang && CXX=clang++\"\n        \n    - os: osx\n      osx_image: xcode8\n      env:\n        - MATRIX_EVAL=\"CC=clang && CXX=clang++\"\n        \n        \nbefore_script:\n  - eval \"${MATRIX_EVAL}\"\n  - $CXX --version\n  \nscript:\n  - mkdir build && cd ./build\n  - cmake ..\n  - make\n  - cd ../bin && ./stltest\n  \nbranches:\n  only:\n  - master\n  \nnotifications:\n  email: false\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.31640625,
          "content": "cmake_minimum_required(VERSION 2.8)\n\nproject(MyTinySTL)\n\n# version\nset(MyTinySTL_VERSION_MAJOR 2)\nset(MyTinySTL_VERSION_MINOR 0)\nset(MyTinySTL_VERSION_PATCH 0)\nset(MyTinySTL_VERSION \"${MyTinySTL_VERSION_MAJOR}.${MyTinySTL_VERSION_MINOR}.${MyTinySTL_VERSION_PATCH}\")\nmessage(STATUS \"The version of this project is: ${MyTinySTL_VERSION}\")\n\n# build type\nset(CMAKE_BUILD_TYPE release)\n\nif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O2 -Wall -Wextra -Wno-sign-compare -Wno-unused-but-set-variable -Wno-array-bounds\")\n\t# set(EXTRA_CXX_FLAGS -Weffc++ -Wswitch-default -Wfloat-equal -Wconversion -Wsign-conversion)\n\tif (CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"5.0.0\")\n\t\tmessage(FATAL_ERROR \"required GCC 5.0 or later\")\n\telse()\n\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n\tendif()\nelseif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O2 -Wall -Wextra -Wno-sign-compare\")\n\t# set(EXTRA_CXX_FLAGS -Weffc++ -Wswitch-default -Wfloat-equal -Wconversion -Wimplicit-fallthrough)\n\tif (CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"3.5.0\")\n\t\tmessage(FATAL_ERROR \"required Clang 3.5 or later\")\n\telse()\n\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n\tendif()\nendif()\n\nmessage(STATUS \"The cmake_cxx_flags is: ${CMAKE_CXX_FLAGS}\")\n\nadd_subdirectory(${PROJECT_SOURCE_DIR}/Test)\n"
        },
        {
          "name": "License.txt",
          "type": "blob",
          "size": 1.1953125,
          "content": "Copyright (c) 2016-2017 Alinshans. All rights reserved.\r\n\r\nFirst published on github, see https://github.com/Alinshans/MyTinySTL\r\n\r\nThe MyTinySTL source code is licensed under the MIT License.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n"
        },
        {
          "name": "MSVC",
          "type": "tree",
          "content": null
        },
        {
          "name": "MyTinySTL",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.884765625,
          "content": "MyTinySTL\n=====\n[![Build Status](https://travis-ci.org/Alinshans/MyTinySTL.svg?branch=master)](https://travis-ci.org/Alinshans/MyTinySTL) [![Build Status](https://ci.appveyor.com/api/projects/status/github/Alinshans/MyTinySTL?branch=master&svg=true)](https://ci.appveyor.com/project/Alinshans/mytinystl) [![Release](https://img.shields.io/github/release/Alinshans/MyTinySTL.svg)](https://github.com/Alinshans/MyTinySTL/releases) [![License](https://img.shields.io/badge/License-MIT%20License-blue.svg)](https://opensource.org/licenses/MIT) [![Chat](https://img.shields.io/badge/chat-on%20gitter-FF6EB4.svg)](https://gitter.im/alinshans/MyTinySTL)\n\n## 简介\n   基于 `C++11` 的 `tinySTL`，这是我的第一个项目，使用了中文文档与中文注释，有不规范或不当的地方还请海涵。刚开始是作为新手练习用途，直到现在已经发布了 `2.x.x` 版本。实现了大部分 STL 中的容器与函数，但仍存在许多不足与 bug 。从 `2.x.x` 版本开始，本项目会进入长期维护的阶段，即基本不会增加新的内容，只修复发现的 bug。如发现错误，还请在 [`Issues`](https://github.com/Alinshans/MyTinySTL/issues) 中指出，欢迎 `Fork` 和 [`Pull requests`](https://github.com/Alinshans/MyTinySTL/pulls) 改善代码，谢谢！\n\n## 支持\n\n* 操作系统\n  * linux\n  * windows\n  * osx\n* 编译器\n  * g++ 5.4 或以上\n  * clang++ 3.5 或以上\n  * msvc 14.0 或以上\n\n## 需要\n  * 使用 cmake 2.8 来构建项目（**可选**）\n\n## 运行\n\n如果你想要运行测试，请先阅读 [这个](https://github.com/Alinshans/MyTinySTL/blob/master/Test/README.md) 。\n\n  * gcc/clang on linux/osx\n  1. 克隆仓库\n```bash\n$ git clone git@github.com:Alinshans/MyTinySTL.git\n$ cd MyTinySTL\n```\n  2. 构建并运行\n```bash\n$ mkdir build && cd build\n$ cmake ..\n$ make\n$ cd ../bin && ./stltest\n```\n\n  * msvc on windows\n  1. 克隆仓库或 [Download ZIP](https://github.com/Alinshans/MyTinySTL/archive/master.zip)\n  2. 使用 `vs2015`（或 `vs2017`）打开 `MSVC/MyTinySTL_VS2015.sln`，配置成 `Release` 模式，（Ctrl + F5）开始执行。\n  \n## 文档\n  见 [Wiki](https://github.com/Alinshans/MyTinySTL/wiki)。\n\n## 测试\n  见 [Test](https://github.com/Alinshans/MyTinySTL/tree/master/Test)。\n\n---\n\n## Introduction\n\nThis is a `tinySTL` based on `C++11`, which is my first project for practice. I use the Chinese documents and annotations for convenience, maybe there will be an English version later, but now I have no time to do that yet. Now I have released version `2.0.0`. I have achieved the vast majority of the containers and functions of `STL`, and there may be some deficiencies and bugs. From the version `2.x.x`, the project will enter the stage of long-term maintenance, i.e., I probably will not add new content but only fix bugs found. If you find any bugs, please point out that in [`Issues`](https://github.com/Alinshans/MyTinySTL/issues), or make a [`Pull requests`](https://github.com/Alinshans/MyTinySTL/pulls) to improve it, thanks!\n\n## Supported\n\n* os\n  * linux\n  * windows\n  * osx\n* complier\n  * g++ 5.4 or later\n  * clang++ 3.5 or later\n  * msvc 14.0 or later\n\n## Required\n\n* Use cmake 2.8 to build this project (**Optional**)\n\n## Run test\n\nIf you want to run the test, please read [this](https://github.com/Alinshans/MyTinySTL/blob/master/Test/README.md) first.\n\n* gcc/clang on linux/osx\n\n1. git clone\n```bash\n$ git clone git@github.com:Alinshans/MyTinySTL.git\n$ cd MyTinySTL\n```\n2. build and run\n```bash\n$ mkdir build && cd build\n$ cmake ..\n$ make\n$ cd ../bin && ./stltest\n```\n\n* msvc on windows\n\n1. git clone or [Download ZIP](https://github.com/Alinshans/MyTinySTL/archive/master.zip)\n2. use `vs2015`(or `vs2017`) open the file `MSVC/MyTinySTL_VS2015.sln`, configured in `Release`, run this project(Ctrl + F5).\n\n## Documents\n\nSee [Wiki](https://github.com/Alinshans/MyTinySTL/wiki).\n\n## Test\n\nSee [Test](https://github.com/Alinshans/MyTinySTL/tree/master/Test).\n"
        },
        {
          "name": "Test",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.26953125,
          "content": "version: 2.0.1{build}\n\nbranches:\n  only:\n    - master\n  \nimage: \n  - Visual Studio 2015\n  - Visual Studio 2017\n  \nconfiguration: \n  - Release\n\nbuild:\n  parallel: true\n  project: MSVC\\MyTinySTL_VS2015.sln\n  \ntest_script:\n  - cmd: cd .\\MSVC\\x64\\Release\\\n  - cmd: MyTinySTL.exe\n\n"
        }
      ]
    }
  ]
}