{
  "metadata": {
    "timestamp": 1736566353467,
    "page": 110,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ShiqiYu/libfacedetection",
      "stars": 12388,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.111328125,
          "content": "model/\r\n*.swp\r\nMakefile.Debug\r\nMakefile.Release\r\nVersion.h\r\nUpdate/Update_*.xml\r\n*.bak\r\n*~\r\n*.autosave\r\n*.qm\r\n*.user\r\ntest.xml\r\n.CCodec.h.kate-swp\r\n.kdev4/\r\n.kdev_include_paths\r\n.vs/\r\nCMakeSettings.json\r\nbuild_\r\nmodul/\r\nbuild-*/\r\nbuild/\r\nbuild_android/\r\nbuild_unix_mingw/\r\nbuild_windows_mingw/\r\nbuild_unix/\r\nbuild_windows_msvc/\r\n*.ncb\r\n.metadata/\r\ndebug/\r\nbin/\r\n*.class\r\n.deps/\r\nMakefile.in\r\naclocal.m4\r\nconfig.guess\r\nconfig.h\r\nconfig.h.in\r\nconfig.h.in~\r\nconfig.log\r\nconfig.status\r\nconfig.sub\r\nconfigure\r\ndepcomp\r\ninstall-sh\r\nlibtool\r\nltmain.sh\r\nmissing\r\nreachmonitor\r\nstamp-h1\r\n.deps/\r\nMakefile.in\r\naclocal.m4\r\nconfig.guess\r\nconfig.h\r\nconfig.h.in\r\nconfig.h.in~\r\nconfig.log\r\nconfig.status\r\nconfig.sub\r\nconfigure\r\ndepcomp\r\ninstall-sh\r\nlibtool\r\nltmain.sh\r\nmissing\r\nstamp-h1\r\n*.bak\r\n*.bs\r\n*.la\r\n*.lo\r\n*.ft\r\n*.ft.1\r\n*.made\r\n*.o\r\n*.obj\r\n*.old\r\n*.orig\r\n*.out\r\n*.pdb\r\n*.rej\r\n.libs/\r\nMakefile\r\n*.cdf\r\n*.cache\r\n*.obj\r\n*.ilk\r\n*.resources\r\n*.tlb\r\n*.tli\r\n*.tlh\r\n*.tmp\r\n*.rsp\r\n*.pgc\r\n*.pgd\r\n*.meta\r\n*.tlog\r\n*.manifest\r\n*.res\r\n*.pch\r\n*.exp\r\n*.idb\r\n*.rep\r\n*.xdc\r\n*.pdb\r\n*_manifest.rc\r\n*.bsc\r\n*.sbr\r\n*.opensdf\r\n*.sdf\r\n*.suo\r\nDebug/\r\nrelease/\r\nRelease/\r\nipch/\r\nrabbitim.kdev4\r\n*.pro.user.*\r\nDoxygen/\r\nDoxyfile\r\nandroid/local.properties\r\nandroid/gradlew.*\r\nandroid/gradle.properties\r\n*.iml\r\n\r\n# Compiled Object files\r\n*.slo\r\n*.lo\r\n*.o\r\n*.obj\r\n\r\n# Precompiled Headers\r\n*.gch\r\n*.pch\r\n\r\n# Compiled Dynamic libraries\r\n*.so\r\n*.dylib\r\n*.dll\r\n\r\n# Fortran module files\r\n*.mod\r\n\r\n# Compiled Static libraries\r\n*.lai\r\n*.la\r\n*.a\r\n*.lib\r\n\r\n# Executables\r\n*.exe\r\n*.out\r\n*.app\r\n\r\n# Platform Specifics - auto generated files\r\nPlatformSpecifics/Windows/*.rc\r\n\r\n# Visual studio - project files\r\n*.sln\r\n*.suo\r\n*.vcxproj\r\n*.vcxproj.filters\r\n*.vcxproj.user\r\n\r\n# Visual Studio - Build Results\r\n[Dd]ebug/\r\n[Rr]elease/\r\n[Mm]in[Ss]ize[Rr]el/\r\n[Rr]el[Ww]ith[Dd]eb[Ii]nfo/\r\n\r\n# Visual Studio - Browsing Database File\r\n*.sdf\r\n*.opensdf\r\n\r\n#osx xcode\r\nDerivedData/\r\n*.DS_Store\r\n*.build\r\n*.xcodeproj\r\n\r\n#CPACK related files\r\nCPackConfig-*.cmake\r\n_CPack_Packages/\r\n\r\n#packages\r\n*.tar.gz\r\n*.zip\r\n\r\nandroid/.gradle/\r\nandroid/.idea/\r\nandroid/android.iml\r\nandroid/gradle/\r\nandroid/gradlew\r\n\r\n**/__pycache__\r\n.vscode"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 6.2568359375,
          "content": "# CMakeLists for libfacedetectcnn\n\nproject(libfacedetection)\n\ncmake_minimum_required(VERSION 2.8.12)\n\noption(ENABLE_NEON \"whether use neon, if use arm please set it on\" OFF)\noption(ENABLE_AVX512 \"use avx512\" OFF)\noption(ENABLE_AVX2 \"use avx2\" ON)\noption(DEMO \"build the demo\" OFF)\noption(USE_OPENMP \"Use OpenMP\" ON)\n\nif (BUILD_SHARED_LIBS)\n\tadd_definitions(-DBUILD_SHARED_LIBS)\n    if (CMAKE_COMPILER_IS_GNUCXX AND NOT MINGW)\n       # Just setting CMAKE_POSITION_INDEPENDENT_CODE should be enough to set\n       # -fPIC for GCC but sometimes it still doesn't get set, so make sure it\n       # does.\n       add_definitions(\"-fPIC\")\n    endif()\n    set(CMAKE_POSITION_INDEPENDENT_CODE ON)\nendif()\n\nSET(BUILD_VERSION \"v0.0.3\")\n# Find Git Version Patch\nIF(EXISTS \"${CMAKE_SOURCE_DIR}/.git\")\n    if(NOT GIT)\n        SET(GIT $ENV{GIT})\n    endif()\n    if(NOT GIT)\n        FIND_PROGRAM(GIT NAMES git git.exe git.cmd)\n    endif()\n    IF(GIT)\n        EXECUTE_PROCESS(\n            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n            COMMAND ${GIT} describe --tags\n            OUTPUT_VARIABLE GIT_VERSION  OUTPUT_STRIP_TRAILING_WHITESPACE\n        )\n        if(NOT GIT_VERSION)\n            EXECUTE_PROCESS(\n                WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n                COMMAND ${GIT} rev-parse --short HEAD\n                OUTPUT_VARIABLE GIT_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE\n            )\n        endif()\n        IF(NOT GIT_VERSION)\n            SET(BUILD_VERSION ${GIT_VERSION})\n\tENDIF()\n    ENDIF()\nENDIF()\nmessage(\"BUILD_VERSION:${BUILD_VERSION}\")\n\nSET(fdt_base_dir   ${PROJECT_SOURCE_DIR})\nSET(fdt_src_dir    ${fdt_base_dir}/src)\nSET(fdt_inc_dir    ${fdt_base_dir}/src)\n\nSET(fdt_lib_name   facedetection)\n\nFILE(GLOB_RECURSE fdt_source_files ${fdt_src_dir}/*.cpp)\nLIST(SORT         fdt_source_files)\n\nSET(INSTALLHEADER_FILES ${fdt_inc_dir}/facedetectcnn.h)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nIF(MSVC)\n    # This option is to enable the /MP switch for Visual Studio 2005 and above compilers\n    OPTION(WIN32_USE_MP \"Set to ON to build with the /MP option (Visual Studio 2005 and above).\" ON)\n    IF(WIN32_USE_MP)\n        #SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")\n        add_compile_options(/MP)\n    ENDIF(WIN32_USE_MP)\n    add_compile_options(\"$<$<C_COMPILER_ID:MSVC>:/utf-8>\")\n    add_compile_options(\"$<$<CXX_COMPILER_ID:MSVC>:/utf-8>\")\nENDIF(MSVC)\n\nIF(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\"\n    OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n    #use -O3 to speedup\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O3\")\nENDIF()\n\nif(ENABLE_AVX512)\n\tadd_definitions(-D_ENABLE_AVX512)\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mavx512bw\")\nendif()\n\nif(ENABLE_AVX2)\n\tadd_definitions(-D_ENABLE_AVX2)\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mavx2 -mfma\")\nendif()\n\nif(ENABLE_NEON)\n\tmessage(\"Using ENON\")\n\tadd_definitions(-D_ENABLE_NEON)\nendif()\n\nif(USE_OPENMP)\n    FIND_PACKAGE(OpenMP)\n    if(OPENMP_FOUND)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}\")\n    endif()\nendif()\n\nINCLUDE_DIRECTORIES(${fdt_inc_dir})\n\ninclude(CMakePackageConfigHelpers)\ninclude(GenerateExportHeader)\ninclude(GNUInstallDirs)\n\n# Create a library\nADD_LIBRARY(${fdt_lib_name} ${fdt_source_files} ${INSTALLHEADER_FILES})\n\n# Generate export header\nGENERATE_EXPORT_HEADER(${fdt_lib_name})\nstring(TOLOWER ${fdt_lib_name} LOWER_PROJECT_NAME)\nset(INSTALLHEADER_FILES ${INSTALLHEADER_FILES} \n    ${CMAKE_CURRENT_BINARY_DIR}/${LOWER_PROJECT_NAME}_export.h)\nfile(COPY ${CMAKE_CURRENT_BINARY_DIR}/${LOWER_PROJECT_NAME}_export.h\n    DESTINATION ${CMAKE_BINARY_DIR})\n\ninclude_directories(${fdt_lib_name} ${CMAKE_BINARY_DIR})\n\nset_target_properties(${fdt_lib_name} PROPERTIES\n    PUBLIC_HEADER \"${INSTALLHEADER_FILES}\" # Install head files\n    VERSION ${BUILD_VERSION}\n   )\n\n# Install target\nINSTALL(TARGETS ${fdt_lib_name}\n    EXPORT ${fdt_lib_name}Config\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n    LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/facedetection\n    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n    )\nexport(TARGETS ${fdt_lib_name}\n       APPEND FILE ${CMAKE_BINARY_DIR}/${fdt_lib_name}Config.cmake\n)\n# Install cmake configure files\ninstall(EXPORT ${fdt_lib_name}Config\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${fdt_lib_name}\"\n        )\nwrite_basic_package_version_file(\n    \"${CMAKE_BINARY_DIR}/${fdt_lib_name}ConfigVersion.cmake\"\n    VERSION ${BUILD_VERSION}\n    COMPATIBILITY AnyNewerVersion)\ninstall(FILES \"${CMAKE_BINARY_DIR}/${fdt_lib_name}ConfigVersion.cmake\" DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${fdt_lib_name}\")\n\n# Create demo. OpenCV is requred.\nif (DEMO)\n    find_package(OpenCV REQUIRED)\n    include_directories(${OpenCV_INCLUDE_DIRS})\n\n    add_executable(detect-image-demo ${fdt_base_dir}/example/detect-image.cpp)\n    target_link_libraries(detect-image-demo ${fdt_lib_name} ${OpenCV_LIBS})\n\n    add_executable(detect-camera-demo ${fdt_base_dir}/example/detect-camera.cpp)\n    target_link_libraries(detect-camera-demo ${fdt_lib_name} ${OpenCV_LIBS})\n    \n    add_executable(benchmark ${fdt_base_dir}/example/benchmark.cpp)\n    target_link_libraries(benchmark ${fdt_lib_name} ${OpenCV_LIBS})\nendif()\n\nif (GSTREAMER)\n    find_package(OpenCV REQUIRED)\n\n    include(FindPkgConfig)\n    pkg_search_module(GSTREAMER REQUIRED gstreamer-1.0)\n    pkg_search_module(GSTREAMER_BASE REQUIRED gstreamer-base-1.0)\n    pkg_search_module(GSTREAMER_VIDEO REQUIRED gstreamer-video-1.0)\n\n    add_library(gstfacedetect SHARED\n        example/libfacedetect.cpp\n    )\n\n    include_directories(gstfacedetect PRIVATE\n        ${GSTREAMER_INCLUDE_DIRS}\n        ${GSTREAMER_BASE_INCLUDE_DIRS}\n        ${GSTREAMER_VIDEO_INCLUDE_DIRS}\n        ${OpenCV_INCLUDE_DIRS}\n    )\n\n    target_link_libraries(gstfacedetect\n        ${GSTREAMER_LIBRARIES}\n        ${GSTREAMER_BASE_LIBRARIES}\n        ${GSTREAMER_VIDEO_LIBRARIES}\n        ${OpenCV_LIBS}\n        ${fdt_lib_shared}\n    )\n\nendif()\n\nmessage(\"CXX_FLAGS: ${CMAKE_CXX_FLAGS}\")\nmessage(\"LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}\")\nmessage(\"AVX512 = ${ENABLE_AVX512}\")\nmessage(\"AVX2 = ${ENABLE_AVX2}\")\nmessage(\"NEON = ${ENABLE_NEON}\")\nmessage(\"OpenMP = ${OPENMP_FOUND}\")\nmessage(\"DEMO = ${DEMO}\")\n"
        },
        {
          "name": "COMPILE.md",
          "type": "blob",
          "size": 12.50390625,
          "content": "# How to compile the library\n\n## Table of contents:\n- [Compilation](#compilation)\n  - Windows 10\n     - [with Visual Studio 2019 (MSVC)](#windows-10-with-visual-studio-2019)\n     - [with MinGW](#windows-10-with-mingw)\n  - [Linux/Ubuntu](#linux-or-ubuntu)\n  - [Android](#android)\n  - [OpenCV DNN](#opencv-dnn)\n  - [Cross build for aarch64](#cross-build-for-aarch64)\n\n- [Usage](#usage)\n\n- [Example](#example)\n\n## Compilation\nTo use the library, you can do either of the following:\n- Copy the .cpp files in src folder directly to your project's source folder, and then compile them with the other files in your project.\nThe source code are written in standard C/C++, so they should compile on any platform that supports C/C++;\n- Or follow the steps below to generate dynamic/static libraries under different environments.\n### Windows 10 with Visual Studio 2019\n  0. Set up OpenCV with 4.51+ version.\n  1. Download libfacedetection and then run powershell terminal <ins>as administrator</ins>:\n\n            cd libfacedetection\n            mkdir build\n            cd build\n            cmake .. -DCMAKE_INSTALL_PREFIX=install -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DDEMO=OFF\n            cmake --build . --config Release\n            cmake --build . --config Release --target install\n\n      Dynamic library(facedetection.dll) is generated. Then, to generate static library(lib), you need to set the parameter `BUILD_SHARED_LIBS` to `OFF` with the above commands.\n  2. To deploy the facedetection libraries in a Visual Studio C++ console app, in your console application's property pages, <ins>under Release mode</ins> (because the build type is Release), add the path of your `libfacedetection\\build\\install\\include\\facedetection` to VC++ Directories -> Include Directories and the path of your `libfacedetection\\build\\install\\lib` to VC++ Directories -> Library Directories, and add `facedetection.lib` to Linker -> Input -> Additional Dependencies.\n\n  3. Add `#include \"facedetectcnn.h\"` to your source files. See [code example built with Visual Studio](#visual-studio-example).\n\n### Windows 10 with MinGW\n  0. Set up OpenCV with 4.51+ version.\n  1. Same as the step 1 above with Visual Studio. `libfacedetection.so` is built with `BUILD_SHARED_LIBS=ON` and `libfacedetecion.a` is built with the variable set to `OFF`. \n  2. Set the environment variable `facedetection_DIR` to `path\\to\\libfacedetection\\build`.\n  3. Use `find_package(facedetection)` in the CMakeLists of your project, or use `target_link_libraries( your-program /path/to/libfacedetection/build/install/lib/libfacedetection.so)`.\n\n            find_package(facedetection)\n            if(facedetection_FOUND)\n            //your code\n            endif()\n  4. Add `#include \"facedetectcnn.h\"` to your source files to use the libraries.\n\n### Linux or Ubuntu\n  0. [Set up OpenCV](https://docs.opencv.org/4.5.2/d7/d9f/tutorial_linux_install.html) with 4.51+ version.\n  1. Same as the step 1 above with Visual Studio. `libfacedetection.so` is built with `BUILD_SHARED_LIBS=ON` and `libfacedetecion.a` is built with the variable set to `OFF`. \n  2. Set the environment variable `facedetection_DIR` to `path\\to\\libfacedetection\\build`.\n  3. Use `target_link_libraries( your-program /path/to/libfacedetection/build/install/lib/libfacedetection.so)`in the CMakelists of your project to use the shared object.\n  4. Add `#include \"facedetectcnn.h\"` to your source files to use the libraries. See [code example built with GNU on Linux/Ubuntu](#linux-or-ubuntu-example).\n\n### Android\n1. Install ndk\n   - Download and install to /home/android-ndk from https://developer.android.com/ndk/downloads \n   - Setting environment variables\n\n        export ANDROID_NDK=/home/android-ndk\n\n2. Compile\n   - The host is Linux / Ubuntu\n     - Build\n\n            mkdir build\n            cd build\n            cmake .. -DCMAKE_INSTALL_PREFIX=install \\\n                  -DCMAKE_BUILD_TYPE=MinSizeRel \\\n                  -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \\\n                  -DANDROID_ABI=\"arm64-v8a\" \\\n                  -DANDROID_PLATFORM=android-18 \\\n                  -DUSE_OPENMP=OFF \\\n                  -DENABLE_NEON=ON \\\n                  -DENABLE_AVX2=OFF \\\n                  -DDEMO=OFF\n            cmake --build . --config MinSizeRel\n\n     - Install\n\n            cmake --build . --config MinSizeRel --target install/strip\n\n   - The host is Windows\n      - Build\n\n            mkdir build\n            cd build\n            cmake .. -DCMAKE_INSTALL_PREFIX=%cd%\\install -G\"Unix Makefiles\" -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_TOOLCHAIN_FILE=%ANDROID_NDK%/build/cmake/android.toolchain.cmake -DCMAKE_MAKE_PROGRAM=%ANDROID_NDK%/prebuilt/windows-x86_64/bin/make.exe -DANDROID_ABI=arm64-v8a -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-24 -DUSE_OPENMP=OFF -DENABLE_NEON=ON -DENABLE_AVX2=OFF -DDEMO=OFF\n            cmake --build . --config MinSizeRel\n\n      - Install\n\n            cmake --build . --config MinSizeRel --target install/strip\n    \n    - msys2 or cygwin\n      - Build\n\n            mkdir build\n            cd build\n            cmake .. -DCMAKE_INSTALL_PREFIX=install \\\n                  -G\"Unix Makefiles\" \\\n                  -DCMAKE_BUILD_TYPE=MinSizeRel \\\n                  -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \\\n                  -DCMAKE_MAKE_PROGRAM=${ANDROID_NDK}\\prebuilt\\windows-x86_64\\bin\\make.exe \\\n                  -DANDROID_ABI=arm64-v8a \\\n                  -DANDROID_ARM_NEON=ON \\\n                  -DUSE_OPENMP=OFF \\\n                  -DENABLE_NEON=ON \\\n                  -DENABLE_AVX2=OFF \\\n                  -DDEMO=OFF\n            cmake --build . --config MinSizeRel\n\n      - Install\n\n            cmake --build . --config MinSizeRel --target install/strip\n\n+ Parameter Description: https://developer.android.google.cn/ndk/guides/cmake\n    + ANDROID_ABI: The following values can be taken:\n       Goal ABI. If the target ABI is not specified, CMake uses armeabi-v7a by default.\n       Valid ABI are:\n      - armeabi：CPU with software floating point arithmetic based on ARMv5TE\n      - armeabi-v7a：ARMv7-based device with hardware FPU instructions (VFP v3 D16)\n      - armeabi-v7a with NEON：Same as armeabi-v7a, but with NEON floating point instructions enabled. This is equivalent to setting -DANDROID_ABI=armeabi-v7a and -DANDROID_ARM_NEON=ON.\n      - arm64-v8a：ARMv8 AArch64 Instruction Set\n      - x86：IA-32 Instruction Set\n      - x86_64 - x86-64 Instruction Set\n    + ANDROID_NDK <path> The path of installed ndk in host\n    + ANDROID_PLATFORM: For a full list of platform names and corresponding Android system images, see the [Android NDK Native API] (https://developer.android.google.com/ndk/guides/stable_apis.html)\n    + ANDROID_ARM_MODE\n    + ANDROID_ARM_NEON\n    + ANDROID_STL:Specifies the STL that CMake should use. \n      - c++_shared: use libc++ shared library\n      - c++_static: use libc++ static library\n      - none: no stl\n      - system: use system STL \n\n### OpenCV DNN\n- To deploy libfacedetection with the OpenCV DNN module and ONNX model, see\n[face detection with OpenCV DNN](https://github.com/ShiqiYu/libfacedetection/tree/master/opencv_dnn).\n\n### Cross build for aarch64\n\n1. Set cross compiler for aarch64 (please refer to aarch64-toolchain.cmake).\n2. Set opencv path since the example code depends on opencv.\n\n```bash\ncmake \\\n    -DENABLE_NEON=ON \\\n    -DCMAKE_BUILD_TYPE=RELEASE \\\n    -DCMAKE_TOOLCHAIN_FILE=../aarch64-toolchain.cmake \\\n     ..\n\nmake\n```    \n\n\n## Usage\nHere is an example of how to use the face detection model in C++:\n```C++\n#include \"facedetect.h\"\n#include <opencv2/opencv.hpp>\n\n#define DETECT_BUFFER_SIZE 0x20000\n\nint main()\n{\n    int * pResults = NULL;\n    unsigned char * pBuffer = (unsigned char *)malloc(DETECT_BUFFER_SIZE);\n    Mat image = imread(file_path);\n\n    /**\n     The function that loads the face detection model.\n     \n     @param result_buffer Buffer memory for storing face detection results, whose size must be 0x20000 * bytes.\n     @param rgb_image_data Input image, which must be BGR (three channels) instead of RGB image.\n     @param width The width of the input image.\n     @param height The height.\n     @param step The step.\n     @return An int pointer reflecting the face detection result, see Example for detailed usage.\n    */\n    int * pResults = facedetect_cnn(pBuffer, (unsigned char*)(image.ptr(0)), image.cols, image.rows, (int)image.step);\n}\n```\n\n## Example\n\n+ To build the ./example of libfacedetection:\n\n  - Tips:\n    * Please add facedetection_export.h file in the position where you copy your facedetectcnn.h files, add #define FACEDETECTION_EXPORT to  facedetection_export.h file. See: [issues #222](https://github.com/ShiqiYu/libfacedetection/issues/222)\n    * Please add -O3 to turn on optimizations when you compile the source code using g++.\n    * Please choose 'Maximize Speed/-O2' when you compile the source code using Microsoft Visual Studio.\n    * You can enable OpenMP to speedup. But the best solution is to call the detection function in different threads.\n\n  ### Linux or Ubuntu example\n\n  If using Linux/Ubuntu, you can:\n    \n    0. [Generate libfacedetecion.so](#linux-or-ubuntu);\n    1. Add CMakeLists.txt:\n\n        ```\n        cmake_minimum_required( VERSION 2.8 )\n        project( example )\n        find_package( OpenCV REQUIRED )\n        message(STATUS \"OpenCV_LIBS = ${OpenCV_LIBS}\")\n        include_directories( ${OpenCV_INCLUDE_DIRS} )\n        add_executable( detect-image detect-image.cpp )\n        add_executable( detect-camera detect-camera.cpp )\n        target_link_libraries( detect-image ${OpenCV_LIBS} )\n        target_link_libraries( detect-image /libfacedetection/build/install/lib/libfacedetection.so )\n        target_link_libraries( detect-image /opencv/build/lib/libopencv_highgui.so )\n        target_link_libraries( detect-image /opencv/build/lib/libopencv_imgproc.so )\n        target_link_libraries( detect-image /opencv/build/lib/libopencv_core.so )\n        target_link_libraries( detect-image /opencv/build/lib/libopencv_imgcodecs.so )\n        target_link_libraries( detect-camera ${OpenCV_LIBS} )\n        target_link_libraries( detect-camera /libfacedetection/build/install/lib/libfacedetection.so )\n        target_link_libraries( detect-camera /opencv/build/lib/libopencv_highgui.so )\n        target_link_libraries( detect-camera /opencv/build/lib/libopencv_video.so )\n        target_link_libraries( detect-camera /opencv/build/lib/libopencv_imgproc.so )\n        target_link_libraries( detect-camera /opencv/build/lib/libopencv_core.so )\n        target_link_libraries( detect-camera /opencv/build/lib/libopencv_videoio.so )\n        ```\n            \n    2. CMake and make:\n       \n        ```\n        cd example\n        mkdir build\n        cd build\n        cmake ..\n        make\n        // detect using an image\n        ./detect-image <path to image>\n        // or detect using camera\n        ./detect-camera <camera-index>\n        ```\n  ### Visual Studio example\n\n  If using Visual Studio 2019, you can:\n    \n    0. [Generate facedetection.lib](#windows-10-with-visual-studio-2019) as well as facedetection.dll (to avoid errors);\n    1. You can either: \n       - Add a similar CMakeLists, but instead linking the project to *.lib and compile the folder as a whole into a solution(.sln) that opens in Visual Studio. \n    \n       OR\n\n       - Create a new project with C++ Console App template. Go to Project->Properties and select Release in Configuration, x64 in Platform, then do the following: add the path of your `libfacedetection\\build\\install\\include\\facedetection` (as well as your OpenCV include path) to VC++ Directories -> Include Directories and the path of your `libfacedetection\\build\\install\\lib` (as well as your OpenCV lib path)to VC++ Directories -> Library Directories, and add `facedetection.lib` and other necessary dependencies to Linker -> Input -> Additional Dependencies.\n       - Add one file in the example folder to the project's Source folder. To build another example, you can right-click the current Solution in the Solution Explorer, Add->New Project and follow the above step (or use property manager to copy-paste Property Sheet). \n       \n    2. Build the solution and run the powershell terminal in Visual Studio:\n        ```\n        cd x64/Release\n        // detect using an image\n        ./detect-image <path/to/your/image/file>\n        // or detect using camera\n        ./detect-camera <camera-index>\n        ```\n\n\n  \n+ Sample output of detect-image\n    ![Examples](/images/cnnresult.png \"Detection example\")\n\n+ Third-party examples\n\n  - FaceRecognizer: https://github.com/KangLin/FaceRecognizer  \n    This is a cross-platforms program. It has supported windows, linux, android, etc.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 2.6943359375,
          "content": "2022-09-14\n---------------------\n* Update the model to v3. The new model is anchor-free instead of anchor-based.\n* The number of parameters is sharply dropped to only 55K.\n* The runtime speed has been improved to varying degrees on all platforms.\n* The performance on WIDER Face is improving from 0.856/0.842/0.727 to 0.887/0.871/0.768.\n\n2021-06-09\n---------------------\n* Now the model is depth-wise based.\n* The number of parameters is sharply dropped to only 85K. File size of the PyTorch model is 399KB, while ONNX is 337KB.\n* The runtime speed is slightly faster on X86 CPU, and 20% faster on ARM CPU.\n* int8-quantization is dropped, but float operations are carried out by AVX2/AVX512/NEON accordingly.\n\n2020-02-27\n---------------------\n* Update the model to v3. The computational cost similar with the previous one.\n* Now the algorithm can support 5 landmakr detection.\n* AVX512 support is added.\n\n2019-09-14\n---------------------\n* Update the model to v2. The computational cost is doubled. But the speed is almost the same with the previous one because int8 convolutional operation is carried out by AVX2.\n* NEON support is not finished.\n\n2019-03-13\n---------------------\n* Release the source code and the model files. Removed the binary libary. \n\n2018-11-17\n---------------------\n* Replaced the AdaBoost methods with a CNN based one.\n\n2017-02-24\n---------------------\n* landmark detection speed reaches to 0.8ms per face. The former version is 1.7ms per face.\n\n2017-01-20\n---------------------\n* 68-point landmark detection added.\n\n2016-11-24\n---------------------\n* Added benchmark.cpp which can run face detection in multiple threads using OpenMP.\n\n2016-11-16\n---------------------\n* Bugs in the previous version were fixed. std::vector was removed from the API because it can cause error.\n\n2016-11-10\n---------------------\n* The API was updated. std::vector was involved.\n* The functions can be called in multiple threads at the same time.\n\n2016-10-6\n---------------------\n* The algorithm has been speeded up greatly (2x to 3x). \n* The true positive rates (FDDB) have been improved 1% to 2% at FP=100.\n* Multi-core parallelization has been disabled. The detection time is still the same.\n\n2016-9-16\n---------------------\n* Speedup again.\n* Change function name facedetect_frontal_tmp() to facedetect_frontal_surveillance(). This function now uses a new trained classifier which can achieve a higher detection speed.\n\n2016-6-28\n---------------------\n* 64-bit dll added since there are so many users request it.\n* An easter egg is hidden in the 64-bit dll. Can you find it?\n\n2016-6-8\n---------------------\n* Speedup 1.2x\n* Added an experimental function facedetect_frontal_tmp(). The function can gain a higher detection rate in video surveillance."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.7607421875,
          "content": "By downloading, copying, installing or using the software you agree to this license.\nIf you do not agree to this license, do not download, install,\ncopy or use the software.\n\n\n                  License Agreement For libfacedetection\n                     (3-clause BSD License)\n\nCopyright (c) 2015-2019, Shiqi Yu, all rights reserved.\nshiqi.yu@gmail.com\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n  * Neither the names of the copyright holders nor the names of the contributors\n    may be used to endorse or promote products derived from this software\n    without specific prior written permission.\n\nThis software is provided by the copyright holders and contributors \"as is\" and\nany express or implied warranties, including, but not limited to, the implied\nwarranties of merchantability and fitness for a particular purpose are disclaimed.\nIn no event shall copyright holders or contributors be liable for any direct,\nindirect, incidental, special, exemplary, or consequential damages\n(including, but not limited to, procurement of substitute goods or services;\nloss of use, data, or profits; or business interruption) however caused\nand on any theory of liability, whether in contract, strict liability,\nor tort (including negligence or otherwise) arising in any way out of\nthe use of this software, even if advised of the possibility of such damage."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.0048828125,
          "content": "# libfacedetection\r\n\r\nThis is an open source library for CNN-based face detection in images. The CNN model has been converted to static variables in C source files. The source code does not depend on any other libraries. What you need is just a C++ compiler. You can compile the source code under Windows, Linux, ARM and any platform with a C++ compiler.\r\n\r\nSIMD instructions are used to speed up the detection. You can enable AVX2 if you use Intel CPU or NEON for ARM.\r\n\r\nThe model files are provided in `src/facedetectcnn-data.cpp` (C++ arrays) & [the model (ONNX) from OpenCV Zoo](https://github.com/opencv/opencv_zoo/tree/master/models/face_detection_yunet). You can try our scripts (C++ & Python) in `opencv_dnn/` with the ONNX model. View the network architecture [here](https://netron.app/?url=https://raw.githubusercontent.com/ShiqiYu/libfacedetection.train/master/onnx/yunet*.onnx).\r\n\r\nPlease note that OpenCV DNN does not support the latest version of YuNet with dynamic input shape. Please ensure you have the exact same input shape as the one in the ONNX model to run latest YuNet with OpenCV DNN.\r\n\r\nexamples/detect-image.cpp and examples/detect-camera.cpp show how to use the library.\r\n\r\nThe library was trained by [libfacedetection.train](https://github.com/ShiqiYu/libfacedetection.train).\r\n\r\n![Examples](/images/cnnresult.png \"Detection example\")\r\n\r\n## How to use the code\r\n\r\nYou can copy the files in directory src/ into your project,\r\nand compile them as the other files in your project.\r\nThe source code is written in standard C/C++.\r\nIt should be compiled at any platform which supports C/C++.\r\n\r\nSome tips:\r\n\r\n  * Please add facedetection_export.h file in the position where you copy your facedetectcnn.h files, add #define FACEDETECTION_EXPORT to  facedetection_export.h file. See: [issues #222](https://github.com/ShiqiYu/libfacedetection/issues/222)\r\n  * Please add -O3 to turn on optimizations when you compile the source code using g++.\r\n  * Please choose 'Maximize Speed/-O2' when you compile the source code using Microsoft Visual Studio.\r\n  * You can enable OpenMP to speedup. But the best solution is to call the detection function in different threads.\r\n\r\nYou can also compile the source code to a static or dynamic library, and then use it in your project.\r\n\r\n[How to compile](COMPILE.md)\r\n\r\n\r\n## CNN-based Face Detection on Intel CPU\r\n\r\nUsing **AVX2** instructions\r\n| Method             |Time          | FPS         |Time          | FPS         |\r\n|--------------------|--------------|-------------|--------------|-------------|\r\n|                    |  X64         |X64          |  X64         |X64          |\r\n|                    |Single-thread |Single-thread|Multi-thread  |Multi-thread |\r\n|cnn (CPU, 640x480)  |  50.02ms     |  19.99      |   6.55ms     |  152.65     |\r\n|cnn (CPU, 320x240)  |  13.09ms     |  76.39      |   1.82ms     |  550.54     |\r\n|cnn (CPU, 160x120)  |   3.61ms     | 277.37      |   0.57ms     | 1745.13     |\r\n|cnn (CPU, 128x96)   |   2.11ms     | 474.60      |   0.33ms     | 2994.23     | \r\n\r\nUsing **AVX512** instructions\r\n| Method             |Time          | FPS         |Time          | FPS         |\r\n|--------------------|--------------|-------------|--------------|-------------|\r\n|                    |  X64         |X64          |  X64         |X64          |\r\n|                    |Single-thread |Single-thread|Multi-thread  |Multi-thread |\r\n|cnn (CPU, 640x480)  |  46.47ms     |  21.52      |   6.39ms     |  156.47     |\r\n|cnn (CPU, 320x240)  |  12.10ms     |  82.67      |   1.67ms     |  599.31     |\r\n|cnn (CPU, 160x120)  |   3.37ms     | 296.47      |   0.46ms     | 2155.80     |\r\n|cnn (CPU, 128x96)   |   1.98ms     | 504.72      |   0.31ms     | 3198.63     | \r\n\r\n* Minimal face size ~10x10\r\n* Intel(R) Core(TM) i7-7820X CPU @ 3.60GHz\r\n* Multi-thread in 16 threads and 16 processors.\r\n\r\n\r\n## CNN-based Face Detection on ARM Linux (Raspberry Pi 4 B)\r\n\r\n| Method             |Time          | FPS         |Time          | FPS         |\r\n|--------------------|--------------|-------------|--------------|-------------|\r\n|                    |Single-thread |Single-thread|Multi-thread  |Multi-thread |\r\n|cnn (CPU, 640x480)  |  404.63ms    |  2.47       |  125.47ms    |   7.97      |\r\n|cnn (CPU, 320x240)  |  105.73ms    |  9.46       |   32.98ms    |  30.32      |\r\n|cnn (CPU, 160x120)  |   26.05ms    | 38.38       |    7.91ms    | 126.49      |\r\n|cnn (CPU, 128x96)   |   15.06ms    | 66.38       |    4.50ms    | 222.28      |\r\n\r\n* Minimal face size ~10x10\r\n* Raspberry Pi 4 B, Broadcom BCM2835, Cortex-A72 (ARMv8) 64-bit SoC @ 1.5GHz\r\n* Multi-thread in 4 threads and 4 processors.\r\n\r\n## Performance on WIDER Face \r\nRun on default settings: scales=[1.], confidence_threshold=0.02, floating point:\r\n```\r\nAP_easy=0.887, AP_medium=0.871, AP_hard=0.768\r\n```\r\n\r\n## Author\r\n* Shiqi Yu, <shiqi.yu@gmail.com>\r\n\r\n## Contributors\r\nAll contributors who contribute at GitHub.com are listed [here](https://github.com/ShiqiYu/libfacedetection/graphs/contributors). \r\n\r\nThe contributors who were not listed at GitHub.com:\r\n* Jia Wu (吴佳)\r\n* Dong Xu (徐栋)\r\n* Shengyin Wu (伍圣寅)\r\n\r\n## Acknowledgment\r\nThe work was partly supported by the Science Foundation of Shenzhen (Grant No. 20170504160426188).\r\n\r\n## Citation\r\n\r\nThe master thesis of Mr. Wei Wu. All details of the algorithm are in the thesis. The thesis can be downloaded at [吴伟硕士毕业论文](wu-thesis-facedetect.pdf)\r\n```\r\n@thesis{wu2023thesisyunet,\r\n    author      = {吴伟},\r\n    title       = {面向边缘设备的高精度毫秒级人脸检测技术研究},\r\n    type        = {硕士学位论文},\r\n    institution = {南方科技大学},\r\n    year        = {2023},\r\n}\r\n```\r\n\r\nThe paper for the main idea of this repository https://link.springer.com/article/10.1007/s11633-023-1423-y.\r\n\r\n```\r\n@article{wu2023miryunet,\r\n\ttitle     = {YuNet: A Tiny Millisecond-level Face Detector},\r\n\tauthor    = {Wu, Wei and Peng, Hanyang and Yu, Shiqi},\r\n\tjournal   = {Machine Intelligence Research},\r\n\tpages     = {1--10},\r\n\tyear      = {2023},\r\n\tdoi       = {10.1007/s11633-023-1423-y},\r\n\tpublisher = {Springer}\r\n}\r\n```\r\n\r\nThe survey paper on face detection to evaluate different methods. It can be open-accessed at https://ieeexplore.ieee.org/document/9580485\r\n```\r\n@article{feng2022face,\r\n\tauthor  = {Feng, Yuantao and Yu, Shiqi and Peng, Hanyang and Li, Yan-Ran and Zhang, Jianguo},\r\n\tjournal = {IEEE Transactions on Biometrics, Behavior, and Identity Science}, \r\n\ttitle   = {Detect Faces Efficiently: A Survey and Evaluations}, \r\n\tyear    = {2022},\r\n\tvolume  = {4},\r\n\tnumber  = {1},\r\n\tpages   = {1-18},\r\n\tdoi     = {10.1109/TBIOM.2021.3120412}\r\n}\r\n```\r\n\r\nThe loss used in training is EIoU, a novel extended IoU. The paper can be open-accessed at https://ieeexplore.ieee.org/document/9429909.\r\n```\r\n@article{peng2021eiou,\r\n\tauthor  = {Peng, Hanyang and Yu, Shiqi},\r\n\tjournal = {IEEE Transactions on Image Processing}, \r\n\ttitle   = {A Systematic IoU-Related Method: Beyond Simplified Regression for Better Localization}, \r\n\tyear    = {2021},\r\n\tvolume  = {30},\r\n\tpages   = {5032-5044},\r\n\tdoi     = {10.1109/TIP.2021.3077144}\r\n}\r\n```\r\n"
        },
        {
          "name": "aarch64-toolchain.cmake",
          "type": "blob",
          "size": 0.3134765625,
          "content": "set(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_VERSION 1)\nset(CMAKE_SYSTEM_PROCESSOR \"aarch64\")\nset(CMAKE_CXX_COMPILER \"/opt/linaro/gcc-linaro-6.3.1-2017.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-g++\")\nset(CMAKE_C_COMPILER \"/opt/linaro/gcc-linaro-6.3.1-2017.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-gcc\")\n"
        },
        {
          "name": "build_android.sh",
          "type": "blob",
          "size": 0.837890625,
          "content": "#!/bin/bash\n\nif [ -n \"$1\" ]; then\n    ANDROID_NDK=$1\nfi\nif [ -z \"${ANDROID_NDK}\" ]; then\n    echo \"$0 ANDROID_NDK\"\n    exit -1\nfi\n\nif [ -z \"${ANDROID_STL}\" ]; then\n   ANDROID_STL=c++_static\nfi\n\nif [ ! -d build_android ]; then\n    mkdir -p build_android\nfi\ncd build_android\n\ncmake .. -G\"Unix Makefiles\" -DCMAKE_INSTALL_PREFIX=install \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_VERBOSE_MAKEFILE=TRUE \\\n    -DANDROID_ABI=\"arm64-v8a\" \\\n    -DANDROID_ARM_NEON=ON \\\n    -DANDROID_PLATFORM=android-24 \\\n    -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \\\n    -DANDROID_STL=${ANDROID_STL} \\\n    -DENABLE_NEON=ON \\\n    -DENABLE_AVX2=OFF\n\ncmake --build . --config Release -- -j`cat /proc/cpuinfo |grep 'cpu cores' |wc -l`\n\ncmake --build . --config Release --target install/strip -- -j`cat /proc/cpuinfo |grep 'cpu cores' |wc -l`\n\ncd ..\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "mobile",
          "type": "tree",
          "content": null
        },
        {
          "name": "opencv_dnn",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "wu-thesis-facedetect.pdf",
          "type": "blob",
          "size": 6844.8642578125,
          "content": ""
        }
      ]
    }
  ]
}