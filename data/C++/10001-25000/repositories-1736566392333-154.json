{
  "metadata": {
    "timestamp": 1736566392333,
    "page": 154,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "skypjack/entt",
      "stars": 10444,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.0048828125,
          "content": "test\n"
        },
        {
          "name": ".bazeliskrc",
          "type": "blob",
          "size": 0.021484375,
          "content": "USE_BAZEL_VERSION=6.x\n"
        },
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 0.40234375,
          "content": "common --enable_bzlmod\nbuild --enable_platform_specific_config\nbuild --incompatible_enable_cc_toolchain_resolution\nbuild --enable_runfiles\nbuild --incompatible_strict_action_env\n\n# required for googletest\nbuild:linux --cxxopt=-std=c++17\nbuild:macos --cxxopt=-std=c++17\n\ncommon:ci --announce_rc\ncommon:ci --verbose_failures\ncommon:ci --keep_going\ntest:ci --test_output=errors\n\ntry-import %workspace%/user.bazelrc\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.1240234375,
          "content": "BasedOnStyle: llvm\n---\nAccessModifierOffset: -4\nAlignEscapedNewlines: DontAlign\nAllowShortBlocksOnASingleLine: Always\nAllowShortEnumsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: WithoutElse\nAllowShortLambdasOnASingleLine: All\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakTemplateDeclarations: Yes\nBreakBeforeBinaryOperators: NonAssignment\nBreakBeforeTernaryOperators: true\nColumnLimit: 0\nDerivePointerAlignment: false\nIncludeCategories:\n  - Regex: '<[[:alnum:]_]+>'\n    Priority: 1\n  - Regex: '<(gtest|gmock)/'\n    Priority: 2\n  - Regex: '<[[:alnum:]_./]+>'\n    Priority: 3\n  - Regex: '<entt/'\n    Priority: 4\n  - Regex: '.*'\n    Priority: 5\nIncludeIsMainRegex: \"^$\"\nIndentPPDirectives: AfterHash\nIndentWidth: 4\nKeepEmptyLinesAtTheStartOfBlocks: false\nLanguage: Cpp\nPointerAlignment: Right\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: false\nSpaceAroundPointerQualifiers: After\nSpaceBeforeCaseColon: false\nSpaceBeforeCtorInitializerColon: false\nSpaceBeforeInheritanceColon: false\nSpaceBeforeParens: Never\nSpaceBeforeRangeBasedForLoopColon: false\nStandard: Latest\nTabWidth: 4\nUseTab: Never\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.83203125,
          "content": "Checks: >\n    bugprone-*,\n    concurrency-*,\n    cppcoreguidelines-*,\n    -cppcoreguidelines-owning-memory,\n    -cppcoreguidelines-pro-bounds-constant-array-index,\n    -cppcoreguidelines-pro-type-const-cast,\n    -cppcoreguidelines-pro-type-member-init,\n    -cppcoreguidelines-pro-type-reinterpret-cast,\n    -cppcoreguidelines-pro-type-union-access,\n    misc-*,\n    -misc-include-cleaner,\n    -misc-no-recursion,\n    modernize-*,\n    -modernize-use-trailing-return-type,\n    performance-*,\n    portability-*,\n    readability-*,\n    -readability-function-cognitive-complexity,\n    -readability-named-parameter,\n    -readability-uppercase-literal-suffix,\nCheckOptions:\n    - key: cppcoreguidelines-avoid-magic-numbers.IgnoreAllFloatingPointValues\n      value: true\n    - key: cppcoreguidelines-avoid-magic-numbers.IgnorePowersOf2IntegerValues\n      value: true\n    - key: cppcoreguidelines-special-member-functions.AllowMissingMoveFunctions\n      value: true\n    - key: cppcoreguidelines-special-member-functions.AllowMissingMoveFunctionsWhenCopyIsDeleted\n      value: true\n    - key: cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor\n      value: true\n    - key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic\n      value: true\n    - key: misc-non-private-member-variables-in-classes.IgnorePublicMemberVariables\n      value: true\n    - key: modernize-avoid-c-arrays.AllowStringArrays\n      value: true\n    - key: readability-function-cognitive-complexity.IgnoreMacros\n      value: true\n    - key: readability-identifier-length.MinimumParameterNameLength\n      value: 2\n    - key: readability-identifier-length.MinimumVariableNameLength\n      value: 2\n    - key: readability-magic-numbers.IgnoreAllFloatingPointValues\n      value: true\n    - key: readability-magic-numbers.IgnorePowersOf2IntegerValues\n      value: true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1494140625,
          "content": "# Conan\nconan/test_package/build\n\n# IDEs\n*.user\n.idea\n.vscode\n.vs\nCMakeSettings.json\ncpp.hint\n\n# Bazel\n/bazel-*\n/test/bazel-*\n/user.bazelrc\n*.bazel.lock\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.4912109375,
          "content": "# Author\n\nskypjack\n\n# Contributors\n\nalexames\nBenediktConze\nbjadamson\nceeac\nColinH\ncorystegel\nCroydon\ncschreib\ncugone\ndbacchet\ndBagrat\ndjarek\nDNKpp\nDonKult\ndrglove\neliasdaler\nerez-o\neugeneko\ngale83\nghost\ngrdowns\nGreen-Sky\nInnokentiy-Alaytsev\nKerndog73\nKoward\nLawrencemm\nmarkand\nmhammerc\nMilerius\nMinimonium\nmorbo84\nm-waka\nnetpoetica\nNixAJ\nOortonaut\nPaolo-Oliverio\npgruenbacher\nprowolf\nQix-\nstefanofiorentino\nsuVrik\nszunhammer\nThe5-1\nvblanco20-1\nwilltunnels\nWizardIke\nWoLfulus \nw1th0utnam3\nxissburg\nzaucy\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 0.107421875,
          "content": "package(default_visibility = [\"//visibility:public\"])\n\nalias(\n    name = \"entt\",\n    actual = \"//src:entt\",\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 12.6708984375,
          "content": "# EnTT\n\ncmake_minimum_required(VERSION 3.15.7)\n\n# Read project version\n\nset(ENTT_VERSION_REGEX \"#define ENTT_VERSION_.*[ \\t]+(.+)\")\nfile(STRINGS \"${CMAKE_CURRENT_SOURCE_DIR}/src/entt/config/version.h\" ENTT_VERSION REGEX ${ENTT_VERSION_REGEX})\nlist(TRANSFORM ENTT_VERSION REPLACE ${ENTT_VERSION_REGEX} \"\\\\1\")\nstring(JOIN \".\" ENTT_VERSION ${ENTT_VERSION})\n\n# Project configuration\n\nproject(\n    EnTT\n    VERSION ${ENTT_VERSION}\n    DESCRIPTION \"Gaming meets modern C++ - a fast and reliable entity-component system (ECS) and much more\"\n    HOMEPAGE_URL \"https://github.com/skypjack/entt\"\n    LANGUAGES C CXX\n)\n\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Debug)\nendif()\n\nmessage(VERBOSE \"*\")\nmessage(VERBOSE \"* ${PROJECT_NAME} v${PROJECT_VERSION} (${CMAKE_BUILD_TYPE})\")\nmessage(VERBOSE \"* Copyright (c) 2017-2024 Michele Caini <michele.caini@gmail.com>\")\nmessage(VERBOSE \"*\")\n\n# CMake stuff\n\nlist(INSERT CMAKE_MODULE_PATH 0 ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules)\n\n# Compiler stuff\n\noption(ENTT_USE_LIBCPP \"Use libc++ by adding -stdlib=libc++ flag if available.\" OFF)\noption(ENTT_USE_SANITIZER \"Enable sanitizers by adding -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined flags if available.\" OFF)\noption(ENTT_USE_CLANG_TIDY \"Enable static analysis with clang-tidy\" OFF)\n\nif(ENTT_USE_LIBCPP)\n    if(NOT WIN32)\n        include(CheckCXXSourceCompiles)\n        include(CMakePushCheckState)\n\n        cmake_push_check_state()\n\n        set(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -stdlib=libc++\")\n\n        check_cxx_source_compiles(\"\n            #include<type_traits>\n            int main() { return std::is_same_v<int, char>; }\n        \" ENTT_HAS_LIBCPP)\n\n        cmake_pop_check_state()\n    endif()\n\n    if(NOT ENTT_HAS_LIBCPP)\n        message(VERBOSE \"The option ENTT_USE_LIBCPP is set but libc++ is not available.\")\n    endif()\nendif()\n\nif(ENTT_USE_SANITIZER)\n    if(CMAKE_CXX_COMPILER_ID MATCHES \"Clang|GNU\")\n        set(ENTT_HAS_SANITIZER TRUE CACHE BOOL \"\" FORCE)\n        mark_as_advanced(ENTT_HAS_SANITIZER)\n    endif()\n\n    if(NOT ENTT_HAS_SANITIZER)\n        message(VERBOSE \"The option ENTT_USE_SANITIZER is set but sanitizer support is not available.\")\n    endif()\nendif()\n\nif(ENTT_USE_CLANG_TIDY)\n    find_program(ENTT_CLANG_TIDY_EXECUTABLE \"clang-tidy\")\n\n    if(NOT ENTT_CLANG_TIDY_EXECUTABLE)\n        message(VERBOSE \"The option ENTT_USE_CLANG_TIDY is set but clang-tidy executable is not available.\")\n    endif()\nendif()\n\n# Add EnTT target\n\noption(ENTT_INCLUDE_HEADERS \"Add all EnTT headers to the EnTT target.\" OFF)\noption(ENTT_INCLUDE_NATVIS \"Add EnTT natvis files to the EnTT target.\" OFF)\n\nif(ENTT_INCLUDE_NATVIS)\n    if(MSVC)\n        set(ENTT_HAS_NATVIS TRUE CACHE BOOL \"\" FORCE)\n        mark_as_advanced(ENTT_HAS_NATVIS)\n    endif()\n\n    if(NOT ENTT_HAS_NATVIS)\n        message(VERBOSE \"The option ENTT_INCLUDE_NATVIS is set but natvis files are not supported. They will not be added to the target.\")\n    endif()\nendif()\n\ninclude(GNUInstallDirs)\n\nadd_library(EnTT INTERFACE)\nadd_library(EnTT::EnTT ALIAS EnTT)\n\ntarget_include_directories(\n    EnTT\n    INTERFACE\n        $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src>\n        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n)\n\ntarget_compile_features(EnTT INTERFACE cxx_std_17)\n\nif(ENTT_INCLUDE_HEADERS)\n    target_sources(\n        EnTT\n        INTERFACE\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/config/config.h>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/config/macro.h>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/config/version.h>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/container/dense_map.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/container/dense_set.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/container/table.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/container/fwd.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/algorithm.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/any.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/attribute.h>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/bit.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/compressed_pair.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/enum.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/family.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/fwd.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/hashed_string.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/ident.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/iterator.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/memory.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/monostate.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/ranges.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/tuple.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/type_info.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/type_traits.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/core/utility.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/component.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/entity.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/fwd.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/group.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/handle.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/mixin.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/helper.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/organizer.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/ranges.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/registry.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/runtime_view.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/snapshot.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/sparse_set.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/storage.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entity/view.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/graph/adjacency_matrix.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/graph/dot.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/graph/flow.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/graph/fwd.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/locator/locator.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/meta/adl_pointer.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/meta/container.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/meta/context.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/meta/factory.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/meta/fwd.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/meta/meta.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/meta/node.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/meta/pointer.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/meta/policy.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/meta/range.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/meta/resolve.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/meta/template.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/meta/type_traits.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/meta/utility.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/poly/fwd.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/poly/poly.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/process/fwd.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/process/process.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/process/scheduler.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/resource/cache.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/resource/fwd.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/resource/loader.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/resource/resource.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/signal/delegate.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/signal/dispatcher.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/signal/emitter.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/signal/fwd.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/signal/sigh.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/entt.hpp>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/src/entt/fwd.hpp>\n    )\nendif()\n\nif(ENTT_HAS_NATVIS)\n    target_sources(\n        EnTT\n        INTERFACE\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/natvis/entt/config.natvis>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/natvis/entt/container.natvis>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/natvis/entt/core.natvis>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/natvis/entt/entity.natvis>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/natvis/entt/graph.natvis>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/natvis/entt/locator.natvis>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/natvis/entt/meta.natvis>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/natvis/entt/poly.natvis>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/natvis/entt/process.natvis>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/natvis/entt/resource.natvis>\n            $<BUILD_INTERFACE:${EnTT_SOURCE_DIR}/natvis/entt/signal.natvis>\n    )\nendif()\n\nif(ENTT_HAS_SANITIZER)\n    target_compile_options(EnTT INTERFACE $<$<CONFIG:Debug>:-fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined>)\n    target_link_libraries(EnTT INTERFACE $<$<CONFIG:Debug>:-fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined>)\nendif()\n\nif(ENTT_CLANG_TIDY_EXECUTABLE)\n    set(CMAKE_CXX_CLANG_TIDY \"${ENTT_CLANG_TIDY_EXECUTABLE};--config-file=${EnTT_SOURCE_DIR}/.clang-tidy;--header-filter=${EnTT_SOURCE_DIR}/src/entt/.*\")\nendif()\n\nif(ENTT_HAS_LIBCPP)\n    target_compile_options(EnTT BEFORE INTERFACE -stdlib=libc++)\nendif()\n\n# Install pkg-config file\n\ninclude(JoinPaths)\n\nset(EnTT_PKGCONFIG ${CMAKE_CURRENT_BINARY_DIR}/entt.pc)\n\njoin_paths(EnTT_PKGCONFIG_INCLUDEDIR \"\\${prefix}\" \"${CMAKE_INSTALL_INCLUDEDIR}\")\n\nconfigure_file(\n    ${EnTT_SOURCE_DIR}/cmake/in/entt.pc.in\n    ${EnTT_PKGCONFIG}\n    @ONLY\n)\n\ninstall(\n    FILES ${EnTT_PKGCONFIG}\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig\n)\n\n# Install EnTT\n\ninclude(CMakePackageConfigHelpers)\n\ninstall(\n    TARGETS EnTT\n    EXPORT EnTTTargets\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n)\n\nwrite_basic_package_version_file(\n    EnTTConfigVersion.cmake\n    VERSION ${PROJECT_VERSION}\n    COMPATIBILITY AnyNewerVersion\n)\n\nconfigure_package_config_file(\n    ${EnTT_SOURCE_DIR}/cmake/in/EnTTConfig.cmake.in\n    EnTTConfig.cmake\n    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/EnTT/cmake\n)\n\nexport(\n    EXPORT EnTTTargets\n    FILE ${CMAKE_CURRENT_BINARY_DIR}/EnTTTargets.cmake\n    NAMESPACE EnTT::\n)\n\ninstall(\n    EXPORT EnTTTargets\n    FILE EnTTTargets.cmake\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/EnTT/cmake\n    NAMESPACE EnTT::\n)\n\ninstall(\n    FILES\n        ${PROJECT_BINARY_DIR}/EnTTConfig.cmake\n        ${PROJECT_BINARY_DIR}/EnTTConfigVersion.cmake\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/EnTT/cmake\n)\n\ninstall(\n    DIRECTORY src/\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n    FILES_MATCHING\n    PATTERN \"*.h\"\n    PATTERN \"*.hpp\"\n)\n\nexport(PACKAGE EnTT)\n\n# Tests\n\noption(ENTT_BUILD_TESTING \"Enable building tests.\" OFF)\n\nif(ENTT_BUILD_TESTING)\n    option(ENTT_FIND_GTEST_PACKAGE \"Enable finding gtest package.\" OFF)\n    option(ENTT_BUILD_BENCHMARK \"Build benchmark.\" OFF)\n    option(ENTT_BUILD_EXAMPLE \"Build examples.\" OFF)\n    option(ENTT_BUILD_LIB \"Build lib tests.\" OFF)\n    option(ENTT_BUILD_SNAPSHOT \"Build snapshot test with Cereal.\" OFF)\n\n    set(ENTT_ID_TYPE std::uint32_t CACHE STRING \"Type of identifiers to use for the tests\")\n    set(ENTT_CXX_STD cxx_std_17 CACHE STRING \"C++ standard revision to use for the tests\")\n\n    include(CTest)\n    enable_testing()\n    add_subdirectory(test)\nendif()\n\n# Tools\n\noption(ENTT_BUILD_TOOLS \"Enable building tools.\" OFF)\n\nif(ENTT_BUILD_TOOLS)\n    add_subdirectory(tools)\nendif()\n\n# Documentation\n\noption(ENTT_BUILD_DOCS \"Enable building with documentation.\" OFF)\n\nif(ENTT_BUILD_DOCS)\n    find_package(Doxygen 1.10)\n\n    if(DOXYGEN_FOUND)\n        add_subdirectory(docs)\n    endif()\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.43359375,
          "content": "# Contributing\n\nFirst of all, thank you very much for taking the time to contribute to the\n`EnTT` library.<br/>\nHow to do it mostly depends on the type of contribution:\n\n* If you have a question, **please** ensure there isn't already an answer for\n  you by searching on GitHub under\n  [issues](https://github.com/skypjack/entt/issues). Do not forget to search\n  also through the closed ones. If you are unable to find a proper answer, feel\n  free to [open a new issue](https://github.com/skypjack/entt/issues/new).\n  Usually, questions are marked as such and closed in a few days.\n\n* If you want to fix a typo in the inline documentation or in the README file,\n  if you want to add some new sections or if you want to help me with the\n  language by reviewing what I wrote so far (I'm not a native speaker after\n  all), **please** open a new\n  [pull request](https://github.com/skypjack/entt/pulls) with your changes.\n\n* If you found a bug, **please** ensure there isn't already an answer for you by\n  searching on GitHub under [issues](https://github.com/skypjack/entt/issues).\n  If you are unable to find an open issue addressing the problem, feel free to\n  [open a new one](https://github.com/skypjack/entt/issues/new). **Please**, do\n  not forget to carefully describe how to reproduce the problem, then add all\n  the information about the system on which you are experiencing it and point\n  out the version of `EnTT` you are using (tag or commit).\n\n* If you found a bug and you wrote a patch to fix it, open a new\n  [pull request](https://github.com/skypjack/entt/pulls) with your code.\n  **Please**, add some tests to avoid regressions in future if possible, it\n  would be really appreciated. Note that the `EnTT` library has a\n  [coverage at 100%](https://coveralls.io/github/skypjack/entt?branch=master)\n  (at least it was at 100% at the time I wrote this file) and this is the reason\n  for which you can be confident with using it in a production environment.\n\n* If you want to propose a new feature and you know how to code it, **please**\n  do not issue directly a pull request. Before to do it,\n  [create a new issue](https://github.com/skypjack/entt/issues/new) to discuss\n  your proposal. Other users could be interested in your idea and the discussion\n  that will follow can refine it and therefore give us a better solution.\n\n* If you want to request a new feature, I'm available for hiring. Take a look at\n  [my profile](https://github.com/skypjack) and feel free to write me.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0712890625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017-2024 Michele Caini, author of EnTT\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopy of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopy or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 0.1201171875,
          "content": "module(name = \"entt\")\n\nbazel_dep(name = \"rules_cc\", version = \"0.0.8\")\nbazel_dep(name = \"bazel_skylib\", version = \"1.4.2\")\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.3505859375,
          "content": "![EnTT: Gaming meets modern C++](https://user-images.githubusercontent.com/1812216/103550016-90752280-4ea8-11eb-8667-12ed2219e137.png)\n\n[![Build Status](https://github.com/skypjack/entt/workflows/build/badge.svg)](https://github.com/skypjack/entt/actions)\n[![Coverage](https://codecov.io/gh/skypjack/entt/branch/master/graph/badge.svg)](https://codecov.io/gh/skypjack/entt)\n[![Try online](https://img.shields.io/badge/try-online-brightgreen)](https://godbolt.org/z/zxW73f)\n[![Documentation](https://img.shields.io/badge/docs-doxygen-blue)](https://skypjack.github.io/entt/)\n[![Vcpkg port](https://img.shields.io/vcpkg/v/entt)](https://vcpkg.link/ports/entt)\n[![Conan Center](https://img.shields.io/conan/v/entt)](https://conan.io/center/recipes/entt)\n[![Gitter chat](https://badges.gitter.im/skypjack/entt.png)](https://gitter.im/skypjack/entt)\n[![Discord channel](https://img.shields.io/discord/707607951396962417?logo=discord)](https://discord.gg/5BjPWBd)\n\n> `EnTT` has been a dream so far, we haven't found a single bug to date and it's\n> super easy to work with\n>\n> -- Every EnTT User Ever\n\n`EnTT` is a header-only, tiny and easy to use library for game programming and\nmuch more written in **modern C++**.<br/>\n[Among others](https://github.com/skypjack/entt/wiki/EnTT-in-Action), it's used\nin [**Minecraft**](https://minecraft.net/en-us/attribution/) by Mojang, the\n[**ArcGIS Runtime SDKs**](https://developers.arcgis.com/arcgis-runtime/) by Esri\nand the amazing [**Ragdoll**](https://ragdolldynamics.com/).<br/>\nIf you don't see your project in the list, please open an issue, submit a PR or\nadd the [\\#entt](https://github.com/topics/entt) tag to your _topics_! :+1:\n\n---\n\nDo you want to **keep up with changes** or do you have a **question** that\ndoesn't require you to open an issue?<br/>\nJoin the [gitter channel](https://gitter.im/skypjack/entt) and the\n[discord server](https://discord.gg/5BjPWBd), meet other users like you. The\nmore we are, the better for everyone.<br/>\nDon't forget to check the\n[FAQs](https://github.com/skypjack/entt/wiki/Frequently-Asked-Questions) and the\n[wiki](https://github.com/skypjack/entt/wiki) too. Your answers may already be\nthere.\n\nDo you want to support `EnTT`? Consider becoming a\n[**sponsor**](https://github.com/users/skypjack/sponsorship) or making a\ndonation via [**PayPal**](https://www.paypal.me/skypjack).<br/>\nMany thanks to [these people](https://skypjack.github.io/sponsorship/) and\n**special** thanks to:\n\n[![mojang](https://user-images.githubusercontent.com/1812216/106253145-67ca1980-6217-11eb-9c0b-d93561b37098.png)](https://mojang.com)\n[![imgly](https://user-images.githubusercontent.com/1812216/106253726-271ed000-6218-11eb-98e0-c9c681925770.png)](https://img.ly/)\n\n# Table of Contents\n\n* [Introduction](#introduction)\n  * [Code Example](#code-example)\n  * [Motivation](#motivation)\n  * [Benchmark](#benchmark)\n* [Integration](#integration)\n  * [Requirements](#requirements)\n  * [CMake](#cmake)\n  * [Natvis support](#natvis-support)\n  * [Packaging Tools](#packaging-tools)\n  * [pkg-config](#pkg-config)\n* [Documentation](#documentation)\n* [Tests](#tests)\n* [EnTT in Action](#entt-in-action)\n* [Contributors](#contributors)\n* [License](#license)\n\n# Introduction\n\nThe entity-component-system (also known as _ECS_) is an architectural pattern\nused mostly in game development. For further details:\n\n* [Entity Systems Wiki](http://entity-systems.wikidot.com/)\n* [Evolve Your Hierarchy](http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/)\n* [ECS on Wikipedia](https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system)\n\nThis project started off as a pure entity-component system. Over time the\ncodebase has grown as more and more classes and functionalities were added.<br/>\nHere is a brief, yet incomplete list of what it offers today:\n\n* Built-in **RTTI system** mostly similar to the standard one.\n* A `constexpr` utility for human-readable **resource names**.\n* Minimal **configuration system** built using the monostate pattern.\n* Incredibly fast **entity-component system** with its own _pay for what you\n  use_ policy, unconstrained component types with optional pointer stability and\n  hooks for storage customization.\n* Views and groups to iterate entities and components and allow different access\n  patterns, from **perfect SoA** to fully random.\n* A lot of **facilities** built on top of the entity-component system to help\n  the users and avoid reinventing the wheel.\n* General purpose **execution graph builder** for optimal scheduling.\n* The smallest and most basic implementation of a **service locator** ever seen.\n* A built-in, non-intrusive and macro-free runtime **reflection system**.\n* **Static polymorphism** made simple and within everyone's reach.\n* A few homemade containers, like a sparse set based **hash map**.\n* A **cooperative scheduler** for processes of any type.\n* All that is needed for **resource management** (cache, loaders, handles).\n* Delegates, **signal handlers** and a tiny event dispatcher.\n* A general purpose **event emitter** as a CRTP idiom based class template.\n* And **much more**! Check out the\n  [**wiki**](https://github.com/skypjack/entt/wiki).\n\nConsider this list a work in progress as well as the project. The whole API is\nfully documented in-code for those who are brave enough to read it.<br/>\nPlease, do note that all tools are also DLL-friendly now and run smoothly across\nboundaries.\n\nOne thing known to most is that `EnTT` is also used in **Minecraft**.<br/>\nGiven that the game is available literally everywhere, I can confidently say \nthat the library has been sufficiently tested on every platform that can come to \nmind.\n\n## Code Example\n\n```cpp\n#include <entt/entt.hpp>\n\nstruct position {\n    float x;\n    float y;\n};\n\nstruct velocity {\n    float dx;\n    float dy;\n};\n\nvoid update(entt::registry &registry) {\n    auto view = registry.view<const position, velocity>();\n\n    // use a callback\n    view.each([](const auto &pos, auto &vel) { /* ... */ });\n\n    // use an extended callback\n    view.each([](const auto entity, const auto &pos, auto &vel) { /* ... */ });\n\n    // use a range-for\n    for(auto [entity, pos, vel]: view.each()) {\n        // ...\n    }\n\n    // use forward iterators and get only the components of interest\n    for(auto entity: view) {\n        auto &vel = view.get<velocity>(entity);\n        // ...\n    }\n}\n\nint main() {\n    entt::registry registry;\n\n    for(auto i = 0u; i < 10u; ++i) {\n        const auto entity = registry.create();\n        registry.emplace<position>(entity, i * 1.f, i * 1.f);\n        if(i % 2 == 0) { registry.emplace<velocity>(entity, i * .1f, i * .1f); }\n    }\n\n    update(registry);\n}\n```\n\n## Motivation\n\nI started developing `EnTT` for the _wrong_ reason: my goal was to design an\nentity-component system to beat another well known open source library both in\nterms of performance and possibly memory usage.<br/>\nIn the end, I did it, but it wasn't very satisfying. Actually it wasn't\nsatisfying at all. The fastest and nothing more, fairly little indeed. When I\nrealized it, I tried hard to keep intact the great performance of `EnTT` and to\nadd all the features I wanted to see in *my own library* at the same time.\n\nNowadays, `EnTT` is finally what I was looking for: still faster than its\n_competitors_, lower memory usage in the average case, a really good API and an\namazing set of features. And even more, of course.\n\n## Benchmark\n\nFor what it's worth, you'll **never** see me trying to make other projects look\nbad or offer dubious comparisons just to make this library seem cooler.<br/>\nI leave this activity to others, if they enjoy it (and it seems that some people\nactually like it). I prefer to make better use of my time.\n\nIf you are interested, you can compile the `benchmark` test in release mode (to\nenable compiler optimizations, otherwise it would make little sense) by setting\nthe `ENTT_BUILD_BENCHMARK` option of `CMake` to `ON`, then evaluate yourself\nwhether you're satisfied with the results or not.\n\nThere are also a lot of projects out there that use `EnTT` as a basis for\ncomparison (this should already tell you a lot). Many of these benchmarks are\ncompletely wrong, many others are simply incomplete, good at omitting some\ninformation and using the wrong function to compare a given feature. Certainly\nthere are also good ones but they age quickly if nobody updates them, especially\nwhen the library they are dealing with is actively developed.<br/>\nOut of all of them, [this](https://github.com/abeimler/ecs_benchmark) seems like\nthe most up-to-date project and also covers a certain number of libraries. I\ncan't say exactly whether `EnTT` is used correctly or not. However, even if used\npoorly, it should still give the reader an idea of where it's going to operate.\n\n# Integration\n\n`EnTT` is a header-only library. This means that including the `entt.hpp` header\nis enough to include the library as a whole and use it. For those who are\ninterested only in the entity-component system, consider to include the sole\n`entity/registry.hpp` header instead.<br/>\nIt's a matter of adding the following line to the top of a file:\n\n```cpp\n#include <entt/entt.hpp>\n```\n\nUse the line below to include only the entity-component system instead:\n\n```cpp\n#include <entt/entity/registry.hpp>\n```\n\nThen pass the proper `-I` argument to the compiler to add the `src` directory to\nthe include paths.\n\n## Requirements\n\nTo be able to use `EnTT`, users must provide a full-featured compiler that\nsupports at least C++17.<br/>\nThe requirements below are mandatory to compile the tests and to extract the\ndocumentation:\n\n* `CMake` version 3.7 or later.\n* `Doxygen` version 1.8 or later.\n\nAlternatively, [Bazel](https://bazel.build) is also supported as a build system\n(credits to [zaucy](https://github.com/zaucy) who offered to maintain it).<br/>\nIn the documentation below I'll still refer to `CMake`, this being the official\nbuild system of the library.\n\n## CMake\n\nTo use `EnTT` from a `CMake` project, just link an existing target to the\n`EnTT::EnTT` alias.<br/>\nThe library offers everything you need for locating (as in `find_package`),\nembedding (as in `add_subdirectory`), fetching (as in `FetchContent`) or using\nit in many of the ways that you can think of and that involve `CMake`.<br/>\nCovering all possible cases would require a treatise and not a simple README\nfile, but I'm confident that anyone reading this section also knows what it's\nabout and can use `EnTT` from a `CMake` project without problems.\n\n## Natvis support\n\nWhen using `CMake`, just enable the option `ENTT_INCLUDE_NATVIS` and enjoy\nit.<br/>\nOtherwise, most of the tools are covered via Natvis and all files can be found\nin the `natvis` directory, divided by module.<br/>\nIf you spot errors or have suggestions, any contribution is welcome!\n\n## Packaging Tools\n\n`EnTT` is available for some of the most known packaging tools. In particular:\n\n* [`Conan`](https://github.com/conan-io/conan-center-index), the C/C++ Package\n  Manager for Developers.\n\n* [`vcpkg`](https://github.com/Microsoft/vcpkg), Microsoft VC++ Packaging\n  Tool.<br/>\n  You can download and install `EnTT` in just a few simple steps:\n\n  ```\n  $ git clone https://github.com/Microsoft/vcpkg.git\n  $ cd vcpkg\n  $ ./bootstrap-vcpkg.sh\n  $ ./vcpkg integrate install\n  $ vcpkg install entt\n  ```\n\n  Or you can use the `experimental` feature to test the latest changes:\n\n  ```\n  vcpkg install entt[experimental] --head\n  ```\n\n  The `EnTT` port in `vcpkg` is kept up to date by Microsoft team members and\n  community contributors.<br/>\n  If the version is out of date, please\n  [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the\n  `vcpkg` repository.\n\n* [`Homebrew`](https://github.com/skypjack/homebrew-entt), the missing package\n  manager for macOS.<br/>\n  Available as a homebrew formula. Just type the following to install it:\n\n  ```\n  brew install skypjack/entt/entt\n  ```\n\n* [`build2`](https://build2.org), build toolchain for developing and packaging C\n  and C++ code.<br/>\n  In order to use the [`entt`](https://cppget.org/entt) package in a `build2`\n  project, add the following line or a similar one to the `manifest` file:\n\n  ```\n  depends: entt ^3.0.0\n  ```\n\n  Also check that the configuration refers to a valid repository, so that the\n  package can be found by `build2`:\n\n  * [`cppget.org`](https://cppget.org), the open-source community central\n    repository, accessible as `https://pkg.cppget.org/1/stable`.\n\n  * [Package source repository](https://github.com/build2-packaging/entt):\n    accessible as either `https://github.com/build2-packaging/entt.git` or\n    `ssh://git@github.com/build2-packaging/entt.git`.\n    Feel free to [report issues](https://github.com/build2-packaging/entt) with\n    this package.\n\n  Both can be used with `bpkg add-repo` or added in a project\n  `repositories.manifest`. See the official\n  [documentation](https://build2.org/build2-toolchain/doc/build2-toolchain-intro.xhtml#guide-repositories)\n  for more details.\n\n* [`bzlmod`](https://bazel.build/external/overview#bzlmod), Bazel's external\n  dependency management system.<br/>\n  To use the [`entt`](https://registry.bazel.build/modules/entt) module in a\n  `bazel` project, add the following to your `MODULE.bazel` file:\n\n  ```starlark\n  bazel_dep(name = \"entt\", version = \"3.12.2\")\n  ```\n\n  EnTT will now be available as `@entt` (short for `@entt//:entt`) to be used\n  in your `cc_*` rule `deps`. \n\nConsider this list a work in progress and help me to make it longer if you like.\n\n## pkg-config\n\n`EnTT` also supports `pkg-config` (for some definition of _supports_ at least).\nA suitable file called `entt.pc` is generated and installed in a proper\ndirectory when running `CMake`.<br/>\nThis should also make it easier to use with tools such as `Meson` or similar.\n\n# Documentation\n\nThe documentation is based on [doxygen](http://www.doxygen.nl/). To build it:\n\n    $ cd build\n    $ cmake .. -DENTT_BUILD_DOCS=ON\n    $ make\n\nThe API reference is created in HTML format in the `build/docs/html` directory.\nTo navigate it with your favorite browser:\n\n    $ cd build\n    $ your_favorite_browser docs/html/index.html\n\nThe same version is also available [online](https://skypjack.github.io/entt/)\nfor the latest release, that is the last stable tag.<br/>\nMoreover, there exists a [wiki](https://github.com/skypjack/entt/wiki) dedicated\nto the project where users can find all related documentation pages.\n\n# Tests\n\nTo compile and run the tests, `EnTT` requires *googletest*.<br/>\n`cmake` downloads and compiles the library before compiling anything else. In\norder to build the tests, set the `CMake` option `ENTT_BUILD_TESTING` to `ON`.\n\nTo build the most basic set of tests:\n\n* `$ cd build`\n* `$ cmake -DENTT_BUILD_TESTING=ON ..`\n* `$ make`\n* `$ make test`\n\nNote that benchmarks are not part of this set.\n\n# EnTT in Action\n\n`EnTT` is widely used in private and commercial applications. I cannot even\nmention most of them because of some signatures I put on some documents time\nago. Fortunately, there are also people who took the time to implement open\nsource projects based on `EnTT` and did not hold back when it came to\ndocumenting them.\n\n[Here](https://github.com/skypjack/entt/wiki/EnTT-in-Action) you can find an\nincomplete list of games, applications and articles that can be used as a\nreference.\n\nIf you know of other resources out there that are about `EnTT`, feel free to\nopen an issue or a PR and I'll be glad to add them to the list.\n\n# Contributors\n\nRequests for features, PRs, suggestions and feedback are highly appreciated.\n\nIf you find you can help and want to contribute to the project with your\nexperience or you do want to get part of the project for some other reason, feel\nfree to contact me directly (you can find the mail in the\n[profile](https://github.com/skypjack)).<br/>\nI can't promise that each and every contribution will be accepted, but I can\nassure that I'll do my best to take them all as soon as possible.\n\nIf you decide to participate, please see the guidelines for\n[contributing](https://github.com/skypjack/entt/blob/master/CONTRIBUTING.md)\nbefore to create issues or pull requests.<br/>\nTake also a look at the\n[contributors list](https://github.com/skypjack/entt/blob/master/AUTHORS) to\nknow who has participated so far.\n\n# License\n\nCode and documentation Copyright (c) 2017-2024 Michele Caini.<br/>\nColorful logo Copyright (c) 2018-2021 Richard Caseres.\n\nCode released under\n[the MIT license](https://github.com/skypjack/entt/blob/master/LICENSE).<br/>\nDocumentation released under\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/).<br/>\nAll logos released under\n[CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/).\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 2.880859375,
          "content": "EXAMPLES\n* filter on runtime values/variables (not only types)\n* support to polymorphic types (see #859)\n\nDOC:\n* custom storage/view\n* update entity doc when the storage based model is in place\n* in-place O(1) release/destroy for non-orphaned entities, out-of-sync model\n* view: single vs multi type views are no longer a thing actually\n* bump entities, reserved bits on identifiers\n\nTODO:\n* deprecate non-owning groups in favor of owning views and view packs, introduce lazy owning views\n* bring nested groups back in place (see bd34e7f)\n* work stealing job system (see #100) + mt scheduler based on const awareness for types\n* view: reduce inst due to/improve perf with index-based approach in dispatch_get/pick_and_each/each (single type too, define storage ::at and ::at_as_tuple)\n* view: update natvis as needed after the last rework, merge pools/filter in the same array, drop check (?) and turn view into a position\n* view: type-only view_iterator (dyn get/excl sizes), type-only basic_common_view (dyn get/excl sizes with pointer to array from derived)\n* combine version-mask-vs-version-bits tricks with reserved bits to allow things like enabling/disabling\n* self contained entity traits to avoid explicit specializations (ie enum constants)\n* auto type info data from types if present\n* test: push sharing types further\n* after non-continuous generation for entity storage:\n  - get/reset placeholder to position after saving/loading (avoid long lookup)\n  - allow skipping/reserving entity identifiers\n  - documentation for reserved entities\n* storage entity: no emplace/insert, rename and add a fast range-push from above\n* table: pop back to support swap and pop, single column access, empty type optimization\n* checkout tools workflow\n* improve front (no multiple checks) and back (ie no contains) for multi-type view\n* cleanup common view from tricks to handle single swap-only and in-place, if constexpr branches\n* entity based component_traits\n* review cmake warning about FetchContent_Populate (need .28 and EXCLUDE_FROM_ALL for FetchContent)\n* after removing meta prop vectors, copy meta objects in their handles directly\n* suppress -Wself-move on CI with g++13\n* view specializations for multi, single and filtered elements\n* organizer support to groups\n* meta range: move id to meta objects and return plain types (?), then remove id from meta base and meta ctor too\n* refine the storage fallback mechanism for views (ie alloc?)\n* don't pass reactive storage by default to callback\n* runtime types support for meta for types that aren't backed by C++ types\n* dtor, traits and custom should be part of meta descriptor (update meta_factory tests then)\n* allow attaching const values of non-Type type to meta types\n* built-in no-pagination storage - no_pagination page size as limits::max\n* meta_any ownership construction and from_void\n* sparse_set shrink_to_fit argument for sparse array shrink policy (none, empty, deep, whatever)\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "WORKSPACE.bazel",
          "type": "blob",
          "size": 0.0185546875,
          "content": "# SEE MODULE.bazel\n"
        },
        {
          "name": "bazel",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "conan",
          "type": "tree",
          "content": null
        },
        {
          "name": "conanfile.py",
          "type": "blob",
          "size": 0.8173828125,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom conans import ConanFile\n\n\nclass EnttConan(ConanFile):\n    name = \"entt\"\n    description = \"Gaming meets modern C++ - a fast and reliable entity-component system (ECS) and much more \"\n    topics = (\"conan,\" \"entt\", \"gaming\", \"entity\", \"ecs\")\n    url = \"https://github.com/skypjack/entt\"\n    homepage = url\n    author = \"Michele Caini <michele.caini@gmail.com>\"\n    license = \"MIT\"\n    exports = [\"LICENSE\"]\n    exports_sources = [\"src/*\"]\n    no_copy_source = True\n\n    def package(self):\n        self.copy(pattern=\"LICENSE\", dst=\"licenses\")\n        self.copy(pattern=\"*\", dst=\"include\", src=\"src\", keep_path=True)\n\n    def package_info(self):\n        if not self.in_local_cache:\n            self.cpp_info.includedirs = [\"src\"]\n\n    def package_id(self):\n        self.info.header_only()\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "entt.imp",
          "type": "blob",
          "size": 4.67578125,
          "content": "[\n  # gtest only\n  { \"include\": [ \"@<gtest/internal/.*>\", \"private\", \"<gtest/gtest.h>\", \"public\" ] },\n  { \"include\": [ \"@<gtest/gtest-.*>\", \"private\", \"<gtest/gtest.h>\", \"public\" ] },\n  # forward files\n  { \"include\": [ \"@[\\\"<].*/container/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/container/dense_map.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/container/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/container/dense_set.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/container/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/container/table.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/core/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/core/any.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/core/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/core/compressed_pair.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/core/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/core/family.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/core/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/core/hashed_string.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/core/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/core/ident.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/core/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/core/monostate.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/core/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/core/type_info.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/core/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/core/type_traits.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/entity/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/entity/component.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/entity/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/entity/entity.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/entity/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/entity/group.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/entity/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/entity/handle.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/entity/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/entity/helper.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/entity/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/entity/mixin.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/entity/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/entity/organizer.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/entity/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/entity/ranges.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/entity/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/entity/registry.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/entity/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/entity/runtime_view.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/entity/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/entity/snapshot.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/entity/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/entity/sparse_set.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/entity/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/entity/storage.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/entity/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/entity/view.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/graph/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/graph/adjacency_matrix.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/graph/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/graph/dot.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/graph/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/graph/flow.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/meta/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/meta/meta.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/poly/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/poly/poly.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/process/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/process/process.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/process/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/process/scheduler.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/resource/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/resource/cache.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/resource/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/resource/loader.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/resource/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/resource/resource.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/signal/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/signal/delegate.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/signal/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/signal/dispatcher.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/signal/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/signal/emitter.hpp>\", \"public\" ] },\n  { \"include\": [ \"@[\\\"<].*/signal/fwd\\\\.hpp[\\\">]\", \"private\", \"<entt/signal/sigh.hpp>\", \"public\" ] },\n  # symbols\n  { symbol: [ \"std::allocator\", private, \"<entt/container/fwd.hpp>\", public ] },\n  { symbol: [ \"std::allocator\", private, \"<entt/entity/fwd.hpp>\", public ] },\n  { symbol: [ \"std::allocator\", private, \"<entt/graph/fwd.hpp>\", public ] },\n  { symbol: [ \"std::allocator\", private, \"<entt/process/fwd.hpp>\", public ] },\n  { symbol: [ \"std::allocator\", private, \"<entt/resource/fwd.hpp>\", public ] },\n  { symbol: [ \"std::allocator\", private, \"<entt/signal/fwd.hpp>\", public ] }\n]\n"
        },
        {
          "name": "natvis",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "single_include",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}