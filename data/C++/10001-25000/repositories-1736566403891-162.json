{
  "metadata": {
    "timestamp": 1736566403891,
    "page": 162,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjE2NA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mawww/kakoune",
      "stars": 10079,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".builds",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 1.51953125,
          "content": "freebsd_task:\n    freebsd_instance:\n        image_family: freebsd-13-3\n    matrix:\n        - name: freebsd_clang\n          env:\n              CXX: clang++\n        - name: freebsd_gcc\n          gcc_script: pkg install -y gcc\n          env:\n              CXX: g++\n    test_script: make CXX=$CXX -j$(sysctl -n hw.ncpu) test\n    env:\n        LC_ALL: en_US.UTF-8\n\nlinux_task:\n    locales_script:\n        - apt-get update && apt-get -y install locales\n        - echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen\n        - locale-gen en_US.UTF-8\n    matrix:\n        - name: linux_clang\n          container:\n              image: silkeh/clang:13\n          env:\n              CXX: clang++\n        - name: linux_gcc\n          container:\n              image: gcc:10\n              memory: 8G\n          env:\n              CXX: g++\n    test_script: make CXX=$CXX -j$(nproc) test\n    env:\n        LC_ALL: en_US.UTF-8\n\nmacos_task:\n    macos_instance:\n        image: ghcr.io/cirruslabs/macos-ventura-base:latest\n    matrix:\n        - name: macos_clang\n          clang_script: brew install llvm@13\n          env:\n              CXX: /opt/homebrew/opt/llvm@13/bin/clang++\n        - name: macos_gcc\n          gcc_script:\n            - /usr/sbin/softwareupdate --install-rosetta --agree-to-license\n            - arch -x86_64 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n            - arch -x86_64 /usr/local/bin/brew install gcc@12\n          env:\n              CXX: g++-12\n    test_script: make CXX=$CXX -j$(sysctl -n hw.ncpu) test\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1845703125,
          "content": "*.o\n*.d\n*.pyc\n*.1-r\n.*.kak.*\n*.tar*\nsrc/kak\nsrc/kak.debug\nsrc/kak.debug.san_*\nsrc/kak.opt\nsrc/kak.opt.san_*\nsrc/.version*\nsrc/.*.json\ndoc/kak.1.gz\ndoc/manpages/*.gz\ntags\nGPATH\nGRTAGS\nGTAGS\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 0.02734375,
          "content": "doc/pages/changelog.asciidoc"
        },
        {
          "name": "CONTRIBUTING",
          "type": "blob",
          "size": 0.7578125,
          "content": "The preferred way to contribute would be through GitHub pull requests,\nas an alternative patches can be discussed on the IRC channel.\n\nWhen contributing your first changes, please include an empty commit for\ncopyright waiver using the following message (replace 'John Doe' with\nyour name or nickname):\n\n  John Doe Copyright Waiver\n\n  I dedicate any and all copyright interest in this software to the\n  public domain.  I make this dedication for the benefit of the public at\n  large and to the detriment of my heirs and successors.  I intend this\n  dedication to be an overt act of relinquishment in perpetuity of all\n  present and future rights to this software under copyright law.\n\nThe command to create an empty commit from the command-line is:\n\n  git commit --allow-empty\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.8291015625,
          "content": ".POSIX:\n.SUFFIXES:\n\nCXX = c++\n\ndebug = no\nstatic = no\ngzip_man = yes\n# to get format compatible with GitHub archive use \"gzip -S .gz\" here\ncompress_bin = bzip2\n\ncompress-suffix-bzip2 = bz2\ncompress-suffix-zstd = zst\n\nCPPFLAGS-debug-yes = -DKAK_DEBUG\nCXXFLAGS-debug-yes = -O0 -g3\ntag-debug-yes = .debug\n\nCXXFLAGS-debug-no = -O3 -g3\ntag-debug-no = .opt\n\nCXXFLAGS-sanitize-address = -fsanitize=address\nLDFLAGS-sanitize-address = -lasan\ntag-sanitize-address = .san_a\n\nCXXFLAGS-sanitize-undefined = -fsanitize=undefined\n\nLDFLAGS-sanitize-undefined = -lubsan\ntag-sanitize-undefined = .san_u\n\nLDFLAGS-static-yes = -static -pthread\n\nversion = $(shell cat .version 2>/dev/null || git describe --tags HEAD 2>/dev/null | sed s/^v// || echo unknown)\nversion != cat .version 2>/dev/null || ( git describe --tags HEAD 2>/dev/null | sed s/^v// ) || echo unknown\n\nPREFIX = /usr/local\nDESTDIR = # root dir\n\nbindir = $(DESTDIR)$(PREFIX)/bin\nlibexecdir = $(DESTDIR)$(PREFIX)/libexec/kak\nsharedir = $(DESTDIR)$(PREFIX)/share/kak\ndocdir = $(DESTDIR)$(PREFIX)/share/doc/kak\nmandir = $(DESTDIR)$(PREFIX)/share/man/man1\n\n# Both Cygwin and MSYS2 have \"_NT\" in their uname.\nos = $(shell uname | sed 's/.*_NT.*/Windows/')\nos != uname | sed 's/.*_NT.*/Windows/'\n\nCPPFLAGS-os-Darwin = -I/opt/local/include\nLDFLAGS-os-Darwin = -L/opt/local/lib\n\nCPPFLAGS-os-FreeBSD = -I/usr/local/include\nLDFLAGS-os-FreeBSD = -L/usr/local/lib\n\nLIBS-os-Haiku = -lnetwork -lbe\n\nCPPFLAGS-os-OpenBSD = -DKAK_BIN_PATH=\\\"$(bindir)/kak\\\" -I/usr/local/include\nLDFLAGS-os-OpenBSD = -L/usr/local/lib\nmandir-os-OpenBSD = $(DESTDIR)$(PREFIX)/man/man1\n\nLDFLAGS-os-SunOS = -lsocket -rdynamic\n\nCPPFLAGS-os-Windows = -D_XOPEN_SOURCE=700\nLIBS-os-Windows = -ldbghelp\n\nCXXFLAGS-default = -std=c++2a -Wall -Wextra -pedantic -Wno-unused-parameter -Wno-sign-compare\n\ncompiler = $(shell $(CXX) --version | grep -E -o 'clang|g\\+\\+|c\\+\\+' | head -1)\ncompiler != $(CXX) --version | grep -E -o 'clang|g\\+\\+|c\\+\\+' | head -1\nCXXFLAGS-compiler-clang = -fsized-deallocation\nCXXFLAGS-compiler-g++ = -Wno-init-list-lifetime -Wno-stringop-overflow\nCXXFLAGS-compiler-c++ = $(CXXFLAGS-compiler-g++)\n\nKAK_CPPFLAGS = \\\n\t$(CPPFLAGS-default) \\\n\t$(CPPFLAGS-debug-$(debug)) \\\n\t$(CPPFLAGS-os-$(os)) \\\n\t$(CPPFLAGS)\n\nKAK_CXXFLAGS = \\\n\t$(CXXFLAGS-default) \\\n\t$(CXXFLAGS-debug-$(debug)) \\\n\t$(CXXFLAGS-sanitize-$(sanitize)) \\\n\t$(CXXFLAGS-compiler-$(compiler)) \\\n\t$(CXXFLAGS)\n\nKAK_LDFLAGS = \\\n\t$(LDFLAGS-default) \\\n\t$(LDFLAGS-sanitize-$(sanitize)) \\\n\t$(LDFLAGS-static-$(static)) \\\n\t$(LDFLAGS-os-$(os)) \\\n\t$(LDFLAGS)\n\nKAK_LIBS = \\\n\t$(LIBS-os-$(os)) \\\n\t$(LIBS)\n\ntag = $(tag-debug-$(debug))$(tag-sanitize-$(sanitize))\n\n.SUFFIXES: $(tag).o .cc\n.PHONY: src/kak\n\nsources = $(shell find src -type f -name '*.cc' | sed -e '/\\.version\\.cc/d')\nsources != find src -type f -name '*.cc' | sed -e '/\\.version\\.cc/d'\nobjects = $(sources:.cc=$(tag).o)\n\nall: src/kak\n\nsrc/kak: src/kak$(tag)\n\tln -sf kak$(tag) $@\n\nsrc/kak$(tag): src/.version.o $(objects)\n\t$(CXX) $(KAK_LDFLAGS) $(KAK_CXXFLAGS) $(objects) src/.version.o $(KAK_LIBS) -o $@\n\ndeps = $(shell touch src/.version$(tag).d && find src -type f -name '.*$(tag).d') # Ensure we find one deps for FreeBSD make\ndeps != touch src/.version$(tag).d && find src -type f -name '.*$(tag).d' # Ensure we find one deps for FreeBSD make\ninclude $(deps)\n\n.cc$(tag).o:\n\t$(CXX) $(KAK_CPPFLAGS) $(KAK_CXXFLAGS) -MD -MP -MF $(*D)/.$(*F)$(tag).d -c -o $@ $<\n\nsrc/.version.cc:\n\techo 'namespace Kakoune { const char *version = \"$(version)\"; }' > $@\n\nsrc/.version.o: src/.version.cc\n\t$(CXX) $(KAK_CPPFLAGS) $(KAK_CXXFLAGS) -c -o $@ src/.version.cc\n\n# Generate the man page\nman: gzip-man-$(gzip_man)\n\ngzip-man-yes: doc/kak.1.gz\ngzip-man-no: doc/kak.1\n\ndoc/kak.1.gz: doc/kak.1\n\tgzip -n -9 -f < doc/kak.1 > $@\n\ncheck: test\ntest: src/kak\n\tif [ $(os) = OpenBSD ]; then \\\n        \texport KAKOUNE_RUNTIME=$$PWD/share/kak; \\\n\tfi && \\\n\tcd test && ./run\n\nTAGS: tags\ntags:\n\tctags -R\n\nclean:\n\trm -f $(objects) $(deps) src/.version*\n\ndist: kakoune-$(version).tar.$(compress-suffix-$(compress_bin))\n\nkakoune-$(version).tar.$(compress-suffix-$(compress_bin)): kakoune-$(version).tar\n\t$(compress_bin) -f $<\n\nkakoune-$(version).tar:\n\t@if ! [ -d .git ]; then echo \"make dist can only run from a git repo\";  false; fi\n\t@if git status -s | grep -qEv '^\\?\\?'; then echo \"working tree is not clean\";  false; fi\n\tgit archive --format=tar --prefix=$(@:.tar=)/ HEAD -o $@\n\techo \"$(version)\" > .version\n\ttar --transform \"s,^,$(@:.tar=)/,\" -rf $@ .version\n\trm -f .version\n\ndistclean: clean\n\trm -f src/kak src/kak$(suffix) src/.*.d src/*.o\n\tfind doc -type f -name '*.gz' -exec rm -f '{}' +\n\ninstalldirs: installdirs-debug-$(debug)\n\ninstalldirs-debug-no:\n\tmkdir -p \\\n\t\t$(bindir) \\\n\t\t$(libexecdir) \\\n\t\t$(sharedir)/rc \\\n\t\t$(sharedir)/colors \\\n\t\t$(sharedir)/doc \\\n\t\t$(docdir) \\\n\t\t$(mandir)\n\ninstalldirs-debug-yes: installdirs-debug-no\n\tmkdir -p $(sharedir)/gdb\n\ninstall: src/kak installdirs install-debug-$(debug) install-gzip-man-$(gzip_man)\n\tcp src/kak$(suffix) $(bindir)\n\tchmod 0755 $(bindir)/kak\n\n\tln -sf ../../bin/kak $(libexecdir)/kak\n\n\tcp share/kak/kakrc $(sharedir)\n\tchmod 0644 $(sharedir)/kakrc\n\n\tcp -r rc/* $(sharedir)/rc\n\tfind $(sharedir)/rc -type f -exec chmod 0644 {} +\n\t[ -e $(sharedir)/autoload ] || ln -s rc $(sharedir)/autoload\n\n\tcp colors/* $(sharedir)/colors\n\tchmod 0644 $(sharedir)/colors/*\n\n\tcp README.asciidoc $(docdir)\n\tchmod 0644 $(docdir)/*.asciidoc\n\tcp doc/pages/*.asciidoc $(sharedir)/doc\n\tchmod 0644 $(sharedir)/doc/*.asciidoc\n\ninstall-gzip-man-yes: gzip-man-yes installdirs\n\tcp -f doc/kak.1.gz $(mandir)\n\tchmod 0644 $(mandir)/kak.1.gz\n\ninstall-gzip-man-no: gzip-man-no installdirs\n\tcp -f doc/kak.1 $(mandir)\n\tchmod 0644 $(mandir)/kak.1\n\ninstall-debug-yes: installdirs-debug-yes\n\tcp -f gdb/kakoune.py $(sharedir)/gdb\n\tchmod 0644 $(sharedir)/gdb/kakoune.py\n\ninstall-debug-no: installdirs-debug-no\n\ninstall-strip: install\n\tstrip -s $(bindir)/kak\n\nuninstall:\n\trm -rf \\\n\t\t$(bindir)/kak \\\n\t\t$(libexecdir) \\\n\t\t$(sharedir) \\\n\t\t$(docdir) \\\n\t\t$(mandir)/kak.*\n"
        },
        {
          "name": "README.asciidoc",
          "type": "blob",
          "size": 27.7578125,
          "content": "= image:{logo}[K,30,30,link=\"{website}\",title=\"Kakoune logo by p0nce\"] Kakoune image:{cirrus-img}[link=\"{cirrus-url}\"] image:{srht-img}[link=\"{srht-url}\"] image:{irc-img}[link=\"{irc-url}\"]\nifdef::env-github,env-browser[:outfilesuffix: .asciidoc]\n:logo: https://rawgit.com/mawww/kakoune/master/doc/kakoune_logo.svg\n:website: https://kakoune.org\n:cirrus-img: https://api.cirrus-ci.com/github/mawww/kakoune.svg\n:cirrus-url: https://cirrus-ci.com/github/mawww/kakoune\n:srht-img: https://builds.sr.ht/~mawww/kakoune.svg\n:srht-url: https://builds.sr.ht/~mawww/kakoune?\n:irc-img: https://img.shields.io/badge/IRC-%23kakoune-blue.svg\n:irc-url: https://web.libera.chat/?channels=kakoune\n:icons: font\n:toc: right\n:pp: ++\n\nTL;DR\n-----\n\n{website}\n\n*Modal editor* -- *Faster as in fewer keystrokes* --\n*Multiple selections* -- *Orthogonal design*\n\n---------------------------------------------\ngit clone https://github.com/mawww/kakoune.git\ncd kakoune\nmake\n./src/kak\n---------------------------------------------\n\nSee https://github.com/mawww/golf for Kakoune solutions to vimgolf challenges,\nregularly beating the best Vim solution.\n\nSee the link:doc/design.asciidoc[design document] for more information on\nKakoune's philosophy and design.\n\nIntroduction\n------------\n\nKakoune is a code editor that implements Vi's \"keystrokes as a text editing\nlanguage\" model. As it is also a modal editor, it is somewhat similar to the\nVim editor (after which Kakoune was originally inspired).\n\nKakoune can operate in two modes: *normal* and *insertion*. In insertion mode,\nkeys are directly inserted into the current buffer. In normal mode, keys\nare used to manipulate the current selection and to enter insertion mode.\n\nKakoune has a strong focus on interactivity. Most commands provide immediate\nand incremental results, while being competitive with Vim in terms of keystroke count.\n\nKakoune works on selections, which are oriented, inclusive ranges of characters.\nSelections have an anchor and a cursor. Most commands move both of\nthem except when extending selections, where the anchor character stays fixed\nand the cursor moves around.\n\nSee https://vimeo.com/82711574\n\nJoin us on libera IRC `#Kakoune`\n\nFeatures\n~~~~~~~~\n\n * Multiple selections as a central way of interacting\n * Powerful selection manipulation primitives\n   - Select all regex matches in current selections\n   - Keep selections containing/not containing a match for a given regex\n   - Split current selections with a regex\n   - Text objects (paragraph, sentence, nestable blocks)\n * Powerful text manipulation primitives\n   - Align selections\n   - Rotate selection contents\n   - Case manipulation\n   - Indentation\n   - Piping each selection to external filter\n * Client-Server architecture\n   - Multiple clients on the same editing session\n   - Use tmux, zellij, kitty, wezterm or your X11/Wayland window manager to\n     manage splits/panes by spawning clients connected to the same session\n * Simple interaction with external programs\n * Automatic contextual help\n * Automatic as you type completion\n * Macros\n * Hooks\n * Syntax Highlighting\n   - Supports multiple languages in the same buffer\n   - Highlight a buffer differently in different windows\n\nScreenshots\n~~~~~~~~~~~\n\n[[screenshot-i3]]\n.Kakoune in i3\nimage::doc/screenshot-i3.gif[Kakoune in i3]\n\n[[screenshot-tmux]]\n.Kakoune in tmux\nimage::doc/screenshot-tmux.gif[Kakoune in tmux]\n\nGetting started\n---------------\n\nBuilding\n~~~~~~~~\n\nKakoune's dependencies are:\n\n * A {cpp}20 compliant compiler (GCC >= 10.3 or clang >= 11) along with its\n   associated {cpp} standard library (libstdc{pp} >= 10 or libc{pp})\n\nTo build, just type *make* in the root directory.\nTo generate man pages, type *make man* in the root directory.\n\nKakoune can be built on Linux, MacOS, and Cygwin. Due to Kakoune relying heavily\non being in a Unix-like environment, no native Windows version is planned.\n\nInstalling\n~~~~~~~~~~\n\nIn order to install *kak* on your system, rather than running it directly from\nits source directory, type *make install*. You can specify the `PREFIX` and\n`DESTDIR` if needed.\n\n[TIP]\n.Homebrew (macOS) or Linuxbrew\n====\n---------------------------------\nbrew install kakoune\n---------------------------------\n====\n\n[TIP]\n.MacPorts (macOS)\n====\n---------------------------------\nsudo port selfupdate\nsudo port install kakoune\n---------------------------------\n====\n\n[TIP]\n.Fedora supported versions and Rawhide\n====\n---------------------------------\ndnf install kakoune\n---------------------------------\n====\n\n[TIP]\n.Fedora daily builds\n====\nUse the https://copr.fedoraproject.org/coprs/jkonecny/kakoune/[copr] repository.\n---------------------------------\ndnf copr enable jkonecny/kakoune\ndnf install kakoune\n---------------------------------\n====\n\n[TIP]\n.RHEL/CentOS 8\n====\nKakoune can be found in the https://src.fedoraproject.org/rpms/kakoune/tree/epel8[EPEL8 repositories].\n---------------------------------\ndnf install kakoune\n---------------------------------\n====\n\n[TIP]\n.Arch Linux\n====\nKakoune is found in the https://www.archlinux.org/packages/community/x86_64/kakoune/[repositories].\n--------------------------------------------------\npacman -S kakoune\n--------------------------------------------------\n====\n\n[TIP]\n.Gentoo\n====\nKakoune is found in portage as\nhttps://packages.gentoo.org/packages/app-editors/kakoune[app-editors/kakoune].\n--------------------------------\nemerge kakoune\n--------------------------------\nhttps://wiki.gentoo.org/wiki/Kakoune[Installation and Gentoo specific documentation] is available.\n====\n\n[TIP]\n.Exherbo\n====\n--------------------------------\ncave resolve -x repository/mawww\ncave resolve -x kakoune\n--------------------------------\n====\n\n[TIP]\n.openSUSE\n====\nKakoune can be found in the https://software.opensuse.org/package/kakoune[repositories].\n\n---------------------------\nsudo zypper install kakoune\n---------------------------\n====\n\n[TIP]\n.Ubuntu\n====\nKakoune can be found in the Ubuntu repositories.\n\n----------------------------\nsudo apt install kakoune\n----------------------------\n\nIf you want to compile from source on 20.04 or earlier, you must force the build to use GCC 10, which is not the default. Also, make sure you have .local/bin in your path so that kak is available after the installation.\n\n----------------------------------------------------------------\ngit clone https://github.com/mawww/kakoune.git && cd kakoune/src\nCXX=g++-10 make\nmake PREFIX=$HOME/.local install\n----------------------------------------------------------------\n====\n\n[TIP]\n.Debian\n====\nKakoune can be found in Debian 9 (Stretch) and later releases.\n\n---------------------------\nsudo apt install kakoune\n---------------------------\n====\n\n[TIP]\n.FreeBSD\n====\nKakoune is available in the official ports tree as\nhttps://www.freshports.org/editors/kakoune[editors/kakoune].\n\nA binary package is also available and can be installed with\n--------------------------------------------------\npkg install kakoune\n--------------------------------------------------\n====\n\n[TIP]\n.OpenBSD\n====\nBuilding on OpenBSD 6.7 amd64.\n\n--------------------------------------------------\n# pkg_add git gmake\n# git clone https://github.com/mawww/kakoune\n# cd kakoune\n# export CXX=clang++\n# gmake install\n--------------------------------------------------\n\nKakoune is available in the 6.7-current port tree as \nhttp://cvsweb.openbsd.org/cgi-bin/cvsweb/ports/editors/kakoune/[editors/kakoune]\n\nA binary package is also available for -current snapshot and can be installed with\n--------------------------------------------------\n# pkg_add kakoune\n--------------------------------------------------\n\nRunning with support for plugins.\n--------------------------------------------------\n# pkg_add dash\n$ export KAKOUNE_POSIX_SHELL=/usr/local/bin/dash \n$ kak\n--------------------------------------------------\n====\n\n[TIP]\n.Solus\n====\nKakoune is available in the Solus stable repository.\n\nIt can be installed with\n---------------------\neopkg install kakoune\n---------------------\n====\n\n[TIP]\n.Void\n====\nKakoune is available in the repositories.\n\nIt can be installed with\n-----------------------\nxbps-install -S kakoune\n-----------------------\n====\n\n[TIP]\n.Termux\n====\nKakoune is available in the repositories.\n\nIt can be installed with\n-------------------\npkg install kakoune\n-------------------\n====\n\n[TIP]\n.Nix\n====\n--------------------------------\nnix-env -iA nixpkgs.kakoune\n--------------------------------\n====\n\nRunning\n~~~~~~~\n\nRunning *kak* launches a new kak session with a client on local terminal.\nRun *kak -help* to discover the valid command line flags.\n\nConfiguration\n^^^^^^^^^^^^^\n\nThere are two directories containing Kakoune's scripts:\n\n* `runtime`: located in `../share/kak/` relative to the `kak` binary\n  contains the system scripts, installed with Kakoune.\n* `userconf`: located in `$XDG_CONFIG_HOME/kak/`, which will fallback\n  to `$HOME/.config/kak/` if `$XDG_CONFIG_HOME` is not set, containing\n  the user configuration.\n\nUnless `-n` is specified, Kakoune will load its startup script located\nat `${runtime}/kakrc` relative to the `kak` binary. This startup script\nis responsible for loading the user configuration.\n\nFirst, Kakoune will search recursively for `.kak` files in the `autoload`\ndirectory. It will first look for an `autoload` directory at\n`${userconf}/autoload` and will fallback to `${runtime}/autoload` if\nit does not exist.\n\nOnce all those files are loaded, Kakoune will try to source\n`${runtime}/kakrc.local`, which is expected to contain distribution provided\nconfiguration.\n\nFinally, the user configuration will load from `${userconf}/kakrc`.\n\nNOTE: If you create a user `autoload` directory in `${userconf}/autoload`,\nthe system one at `${runtime}/autoload` will not load anymore. You can\nadd a symbolic link to it (or to individual scripts) inside\n`${userconf}/autoload` to keep loading system scripts.\n\nBasic Interaction\n-----------------\n\nSelections\n~~~~~~~~~~\n\nThe main concept in Kakoune is the selection. A selection is an inclusive,\ndirected range of characters. A selection has two ends, the anchor and the\ncursor.\n\nThere is always at least one selection, and a selection is always at least\none character (in which case the anchor and cursor of the selection are\non the same character).\n\nNormal Mode\n~~~~~~~~~~~\n\nIn normal mode, keys are not inserted directly inside the buffer, but are editing\ncommands. These commands provide ways to manipulate either the selections themselves\nor the selected text.\n\nInsert Mode\n~~~~~~~~~~~\n\nWhen entering insert mode, keys are now directly inserted before each\nselection's cursor. Some additional keys are recognised in insert mode:\n\n * `<esc>`: leave insert mode\n * `<backspace>`: delete characters before cursors\n * `<del>`: delete characters under cursors\n * `<left>, <right>, <up>, <down>`: move cursors in given direction\n * `<home>`: move cursors to line beginning\n * `<end>`: move cursors to line ending\n\n * `<c-n>`: select next completion candidate\n * `<c-p>`: select previous completion candidate\n * `<c-x>`: explicit insert completion query, followed by:\n   - `f`: explicit file completion\n   - `w`: explicit word completion\n   - `l`: explicit line completion\n * `<c-o>`: disable automatic completion for this insert session\n\n * `<c-r>`: insert contents of the register given by next key\n * `<c-v>`: insert next keystroke directly into the buffer,\n    without interpreting it\n\n * `<c-u>`: commit changes up to now as a single undo group\n\n * `<a-;>`: escape to normal mode for a single command\n\nMovement\n~~~~~~~~\n\nSee <<Appending>> below for instructions on extending (appending to) the current selection in order to select more text.\n\n * `h`: select the character on the left of selection end\n * `j`: select the character below the selection end\n * `k`: select the character above the selection end\n * `l`: select the character on the right of selection end\n\n * `w`: select the word and following whitespaces on the right of selection end\n * `b`: select preceding whitespaces and the word on the left of selection end\n * `e`: select preceding whitespaces and the word on the right of selection end\n * `<a-[wbe]>`: same as [wbe], but select WORD instead of word\n\n * `f`: select to (including) the next occurrence of the given character\n * `t`: select until (excluding) the next occurrence of the given character\n * `<a-[ft]>`: same as [ft] but in the other direction\n\n * `m`: select to matching character\n * `M`: extend selection to matching character\n\n * `x`: expand selections to contain full lines (including end-of-lines)\n * `<a-x>`: trim selections to only contain full lines (not including last\n            end-of-line)\n\n * `%`: select whole buffer\n\n * `<a-h>`: select to line begin\n * `<a-l>`: select to line end\n\n * `/`: search (select next match)\n * `<a-/>`: search (select previous match)\n * `?`: search (extend to next match)\n * `<a-?>`: search (extend to previous match)\n * `n`: select next match\n * `N`: add a new selection with next match\n * `<a-n>`: select previous match\n * `<a-N>`: add a new selection with previous match\n\n * `pageup, <c-b>`: scroll one page up\n * `pagedown, <c-f>`: scroll one page down\n * `<c-u>`: scroll half a page up\n * `<c-d>`: scroll half a page down\n\n * `)`: rotate selections (the main selection becomes the next one)\n * `(`: rotate selections backwards\n\n * `;`: reduce selections to their cursor\n * `<a-;>`: flip the selections' direction\n * `<a-:>`: ensure selections are in forward direction (cursor after anchor)\n\n * `<a-.>`: repeat last object or `f`/`t` selection command.\n\n * `_`: trim selections\n\nA word is a sequence of alphanumeric characters or underscore, a WORD is a\nsequence of non whitespace characters.\n\nAppending\n~~~~~~~~~\n\nFor most <<Movement>> commands, using `Shift` extends the current selection\ninstead of replacing it.\n\nExamples:\n\n * `wWW` selects 3 consecutive words: first `w` selects a word, then `WW` extends the selection two words further.\n * `f/F/` selects up to and including the second `/` character forward.\n\nUsing Counts\n~~~~~~~~~~~~\n\nMost selection commands also support counts, which are entered before the\ncommand itself.\n\nFor example, `3W` selects 3 consecutive words and `3w` select the third word on\nthe right of selection end.\n\nDisabling Hooks\n~~~~~~~~~~~~~~~\n\nAny normal mode command can be prefixed with `\\` which will disable hook execution\nfor the duration for the command (including the duration of modes the command could\nmove to, so `\\i` will disable hooks for the whole insert session).\n\nAs autoindentation is implemented in terms of hooks, this can be used to disable\nit when pasting text.\n\nChanges\n~~~~~~~\n\n * `i`: enter insert mode before each selection\n * `a`: enter insert mode after each selection\n * `d`: yank and delete each selection\n * `c`: yank and delete each selection and enter insert mode\n * `.`: repeat last insert mode change (`i`, `a`, or `c`, including\n        the inserted text)\n\n * `<a-d>`: delete each selection\n * `<a-c>`: delete each selection and enter insert mode\n\n * `I`: enter insert mode at each selection begin line start\n * `A`: enter insert mode at each selection end line end\n * `o`: enter insert mode in one (or given count) new lines below\n        each selection end\n * `O`: enter insert mode in one (or given count)  new lines above\n        each selection begin\n\n * `<a-o>`: add an empty line below each cursor\n * `<a-O>`: add an empty line above each cursor\n\n * `y`: yank selections\n * `p`: paste after each selection end\n * `P`: paste before each selection begin\n * `<a-p>`: paste all after each selection end\n * `<a-P>`: paste all before each selection begin\n * `R`: replace each selection with yanked text\n * `<a-R>`: replace each selection with every yanked text\n\n * `r`: replace each character with the next entered one\n\n * `<a-j>`: join selected lines\n * `<a-J>`: join selected lines and select spaces inserted\n            in place of line breaks\n * `<a-_>`: merge contiguous selections together (works across lines as well)\n\n * `<gt> (>)`: indent selected lines\n * `<a-gt>`: indent selected lines, including empty lines\n * `<lt> (<)`: deindent selected lines\n * `<a-lt>`: deindent selected lines, do not remove incomplete\n        indent (3 leading spaces when indent is 4)\n\n * `|`: pipe each selection through the given external filter program\n        and replace the selection with its output.\n * `<a-|>`: pipe each selection through the given external filter program\n        and ignore its output\n\n * `!`: insert command output before each selection\n * `<a-!>`: append command output after each selection\n\n * `u`: undo last change\n * `<c-k>`: move backward in history\n * `<a-u>`: undo selection changes\n * `U`: redo last change\n * `<c-j>`: move forward in history\n * `<a-U>`: redo selection changes\n\n * `&`: align selections, align the cursor of selections by inserting\n        spaces before the first character of the selection\n * `<a-&>`: copy indent, copy the indentation of the main selection\n        (or the count one if a count is given) to all other ones\n\n * ```: to lower case\n * `~`: to upper case\n * ``<a-`>``: swap case\n\n * `@`: convert selected tabs to spaces, uses the buffer tabstop option or\n        the count parameter for tabstop.\n * `<a-@>`: convert selected spaces to tabs, uses the buffer tabstop option\n            or the count parameter for tabstop.\n\n * `<a-)>`: rotate selections content, if specified, the count groups\n            selections, so `3<a-)>` rotate (1, 2, 3) and (4, 5, 6)\n            independently.\n * `<a-(>`: rotate selections content backwards\n\nGoto Commands\n~~~~~~~~~~~~~\n\nCommands beginning with `g` are used to goto certain position and or buffer.\nIf a count is given prior to hitting `g`, `g` will jump to the given line.\nUsing `G` will extend the selection rather than jump.\n\nSee <<doc/pages/keys#goto-commands,`:doc keys goto-commands`>>.\n\nView commands\n~~~~~~~~~~~~~\n\nCommands beginning with `v` permit to center or scroll the current\nview. Using `V` will lock view mode until `<esc>` is hit\n\nSee <<doc/pages/keys#view-commands,`:doc keys view-commands`>>.\n\nMarks\n~~~~~\n\nCurrent selections position can be saved in a register and restored later on.\n\nSee <<doc/pages/keys#marks,`:doc keys marks`>>.\n\nJump list\n~~~~~~~~~\n\nSome commands, like the goto commands, buffer switch or search commands,\npush the previous selections to the client's jump list.\n\nSee <<doc/pages/keys#jump-list,`:doc keys jump-list`>>.\n\nMulti Selection\n~~~~~~~~~~~~~~~\n\nKak was designed from the start to handle multiple selections.\nOne way to get a multiselection is via the `s` key.\n\nFor example, to change all occurrences of word 'roger' to word 'marcel'\nin a paragraph, here is what can be done:\n\n * select the paragraph with `x` then enough `J`\n * press `s` and enter roger, then enter\n * now paragraph selection was replaced with multiselection of each roger in\nthe paragraph\n * press `c` and marcel<esc> to replace rogers with marcels\n\nA multiselection can also be obtained with `S`, which splits the current\nselection according to the regex entered. To split a comma separated list,\nuse `S` then ', *'\n\nThe regex syntax supported by Kakoune is the based on the ECMAScript script\nsyntax and is described at <<doc/pages/regex#,`:doc regex`>>.\n\n`s` and `S` share the search pattern with `/`, and hence entering an empty\npattern uses the last one.\n\nAs a convenience, `<a-s>` allows you to split the current selections on\nline boundaries.\n\nTo clear multiple selections, use `,`. To keep only the nth selection\nuse `n` followed by `,`, in order to remove a selection, use `<a-,>`.\n\n`<a-k>` allows you to enter a regex and keep only the selections that\ncontains a match for this regex. Using `<a-K>` you can keep the selections\nnot containing a match.\n\n`C` duplicates selections on the lines that follow them, column-wise.\n`<a-C>` does the same but on the preceding lines.\n\n`$` allows you to enter a shell command and pipe each selection to it.\nSelections whose shell command returns 0 will be kept, other will be dropped.\n\nObject Selection\n~~~~~~~~~~~~~~~~\n\nObjects are specific portions of text, like sentences, paragraphs, numbers…\nKakoune offers many keys allowing you to select various text objects.\n\nSee <<doc/pages/keys#object-selection,`:doc keys object-selection`>>.\n\nCommands\n--------\n\nWhen pressing `:` in normal mode, Kakoune will open a prompt to enter a command.\n\nCommands are used for non editing tasks, such as opening a buffer, writing the\ncurrent one, quitting, etc.\n\nSee <<doc/pages/keys#prompt-commands,`:doc keys prompt-commands`>>.\n\nBasic Commands\n~~~~~~~~~~~~~~\n\nSome commands take an exclamation mark (`!`), which can be used to force\nthe execution of the command (i.e. to quit a modified buffer, the\ncommand `q!` has to be used).\n\nCommands starting with horizontal whitespace (e.g. a space) will not be\nsaved in the command history.\n\n * `cd [<directory>]`: change the current directory to `<directory>`, or the home directory if unspecified\n * `doc <topic>`: display documentation about a topic. The completion list\n     displays the available topics.\n * `e[dit][!] <filename> [<line> [<column>]]`: open buffer on file, go to given\n     line and column. If file is already opened, just switch to this file.\n     Use edit! to force reloading.\n * `w[rite][!] [<filename>]`: write buffer to <filename> or use its name if\n     filename is not given. If the file is write-protected, its\n     permissions are temporarily changed to allow saving the buffer and\n     restored afterwards when the write! command is used.\n * `w[rite]a[ll]`: write all buffers that are associated to a file.\n * `q[uit][!] [<exit status>]`: exit Kakoune, use quit! to force quitting even\n     if there is some unsaved buffers remaining. If specified, the client exit\n     status will be set to <exit status>.\n * `w[a]q[!] [<exit status>]`: write the current buffer (or all buffers when\n     `waq` is used) and quit. If specified, the client exit status will be set\n     to <exit status>.\n * `kill[!]`: terminate the current session, all the clients as well as the server,\n     use kill! to ignore unsaved buffers\n * `b[uffer] <name>`: switch to buffer <name>\n * `b[uffer]n[ext]`: switch to the next buffer\n * `b[uffer]p[rev]`: switch to the previous buffer\n * `d[el]b[uf][!] [<name>]`: delete the buffer <name>\n * `source <filename>`: execute commands in <filename>\n * `colorscheme <name>`: load named colorscheme.\n * `rename-client <name>`: set current client name\n * `rename-buffer <name>`: set current buffer name\n * `rename-session <name>`: set current session name\n * `echo [options] <text>`: show <text> in status line, with the following options:\n   ** `-markup`: expand the markup strings in <text>\n   ** `-debug`: print the given text to the `\\*debug*` buffer\n * `nop`: does nothing, but as with every other commands, arguments may be\n     evaluated. So nop can be used for example to execute a shell command\n     while being sure that its output will not be interpreted by kak.\n     `:%sh{ echo echo tchou }` will echo tchou in Kakoune, whereas\n     `:nop %sh{ echo echo tchou }` will not, but both will execute the\n     shell command.\n * `fail <text>`: raise an error, uses <text> as its description\n\nMultiple commands\n~~~~~~~~~~~~~~~~~\n\nMultiple commands can be separated either by new lines or by semicolons,\nas such a semicolon must be escaped with `\\;` to be considered as a literal\nsemicolon argument.\n\nString syntax and expansions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nValues, options and shell context can be interpolated in strings.\n\nSee <<doc/pages/expansions#,`:doc expansions`>>.\n\nConfiguration & Autoloading\n---------------------------\n\nKakrc\n~~~~~\n\nIf not launched with the `-n` switch, Kakoune will source the\n`../share/kak/kakrc` file relative to the `kak` binary, which\nwill source additional files:\n\nIf the `$XDG_CONFIG_HOME/kak/autoload` directory exists, load every\n`*.kak` files in it, and load recursively any subdirectory.\n\nIf it does not exist, falls back to the site wide autoload directory\nin `../share/kak/autoload/`.\n\nAfter that, if it exists, source the `$XDG_CONFIG_HOME/kak/kakrc` file\nwhich should be used for user configuration.\n\nIn order to continue autoloading site-wide files with a local autoload\ndirectory, just add a symbolic link to `../share/kak/autoload/` into\nyour local autoload directory.\n\nColor Schemes\n~~~~~~~~~~~~~\n\nKakoune ships with some color schemes that are installed to\n`../share/kak/colors/`. If `$XDG_CONFIG_HOME/kak/colors/` is present\nthe builtin command `colorscheme` will offer completion for those\ncolor schemes. If a scheme is duplicated in userspace, it will take\nprecedence.\n\nOptions\n-------\n\nKakoune can store named and typed values that can be used both to\ncustomize the core editor behaviour, and to keep data used by extension\nscripts.\n\nSee <<doc/pages/options#,`:doc options`>>.\n\n\nAdvanced topics\n---------------\n\nFaces\n~~~~~\n\nFaces describe how characters are displayed on the screen: color, bold, italic...\n\nSee <<doc/pages/faces#,`:doc faces`>>.\n\nRegisters\n~~~~~~~~~\n\nRegisters are named lists of text. They are used for various purposes,\nlike storing the last yanked text, or the captured groups associated with the selections.\n\nSee <<doc/pages/registers#,`:doc registers`>>.\n\nMacros\n~~~~~~\n\nKakoune can record and replay a sequence of key presses.\n\nSee <<doc/pages/keys#macros,`:doc keys macros`>>.\n\nSearch selection\n~~~~~~~~~~~~~~~~\n\nUsing the `*` key, you can set the search pattern to the current selection.\nSee <<doc/pages/keys#searching,`:doc keys searching`>>.\n\nRegex syntax\n~~~~~~~~~~~~\n\nKakoune regex syntax is based on the ECMAScript syntax (ECMA-262 standard).\nIt always runs on Unicode codepoint sequences, not on bytes.\n\nSee <<doc/pages/regex#,`:doc regex`>>.\n\nExec and Eval\n~~~~~~~~~~~~~\n\nThe `execute-keys` and `evaluate-commands` are useful for scripting\nin non interactive contexts.\n\nSee <<doc/pages/execeval#,`:doc execeval`>>.\n\nInsert mode completion\n~~~~~~~~~~~~~~~~~~~~~~\n\nKakoune can propose completions while inserting text: filenames, words, lines…\n\nSee <<doc/pages/keys#insert-mode-completion,`:doc keys insert-mode-completion`>>.\n\nEscape to normal mode\n~~~~~~~~~~~~~~~~~~~~~\n\nFrom insert mode, pressing `<a-;>` allows you to execute a single normal mode\ncommand. This provides a few advantages:\n\n * The selections are not modified: when leaving insert mode using `<esc>` the\n   selections can change, for example when insert mode was entered with `a` the\n   cursor will go back one char. Or if on an end of line the cursor will go back\n   left (if possible).\n\n * The modes are nested: that means the normal mode can enter prompt (with `:`),\n   or any other modes (using `:on-key` or `:menu` for example), and these modes\n   will get back to the insert mode afterwards.\n\nThis feature is tailored for scripting/macros, as it provides a more predictable\nbehaviour than leaving insert mode with `<esc>`, executing normal mode command\nand entering back insert mode (with which binding ?)\n\nSee <<doc/pages/modes#,`:doc modes`>>.\n\nHighlighters\n~~~~~~~~~~~~\n\nManipulation of the displayed text, such as syntax coloration and wrapping\nis done through highlighters.\n\nSee <<doc/pages/highlighters#,`:doc highlighters`>>.\n\nHooks\n~~~~~\n\nCommands can be registered to be executed when certain events arise with hooks.\n\nSee <<doc/pages/hooks#,`:doc hooks`>>.\n\nKey Mapping\n~~~~~~~~~~~\n\nCustom key shortcuts can be registered through mappings.\n\nSee <<doc/pages/mapping#,`:doc mapping`>>.\n\nDefining Commands and Aliases\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNew commands can be created using `:define-command`.\n\nSee <<doc/pages/commands#declaring-new-commands,`:doc commands declaring-new-commands`>>.\n\nThey can be given additional short names depending of the scope with `:alias`.\n\nSee <<doc/pages/commands#aliases,`:doc commands aliases`>>.\n\nSome helper commands are available to define composite commands.\n\nSee <<doc/pages/commands#helpers,`:doc commands helpers`>>.\n\nFIFO Buffers\n~~~~~~~~~~~\n\nFIFO buffers are very useful for running some commands asynchronously while\nprogressively displaying their result in Kakoune.\n\nSee <<doc/pages/buffers#fifo-buffers,`:doc buffers fifo-buffers`>>.\n\nCredits\n-------\n\nThanks to https://github.com/p0nce[p0nce] for designing the\nhttps://github.com/mawww/kakoune/blob/master/doc/kakoune_logo.svg[Kakoune\nlogo].\n\nAnd thanks to all the\nhttps://github.com/mawww/kakoune/graphs/contributors[contributors] who help\nmove the project forward!\n"
        },
        {
          "name": "UNLICENSE",
          "type": "blob",
          "size": 1.18359375,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <https://unlicense.org/>\n"
        },
        {
          "name": "VIMTOKAK",
          "type": "blob",
          "size": 2.6103515625,
          "content": "Vi(m) to Kakoune:\n=================\n\nKakoune is inspired heavily by Vim. It strives to be as efficient as Vim,\nmore consistent and simpler. A big difference is that a lot of special\nfeatures in Vim just become regular interactions of basic features in\nKakoune.\n\nOperations and moves are reversed in Kakoune. First select whatever text\nyou want to operate on, and then use a modifying operation. That makes\nthings more consistent: Vim needs separate x and d operations because\nof the operator -> move order, while Kakoune only needs the d operation.\nSelecting first also allows more complex selections.\n\ndelete a word:\n * vim: dw\n * kak: wd\n\ndelete a character:\n * vim: x\n * kak: d or ;d (; reduces the selection to a single char)\n\ncopy a line:\n * vim: yy\n * kak: xy\n\nglobal replace:\n * vim: :%s/word/replacement<ret>\n * kak: %sword<ret>creplacement<esc>,\n\nExplanation: '%' selects the entire buffer, 's' opens a prompt for a\nregex, <ret> validates the regex and replaces the selection with one\nper match (hence all occurences of \"word\" are selected). 'c' deletes\nthe selection contents and enters insert mode where \"replacement\" is\ntyped, and <esc> goes back to normal mode. The final ',' gets rid of\nmultiple cursors.\n\nNote that the Kakoune version is one key less, and is not a special\nfeature per se, but just a nice way Kakoune features work together.\n\nglobal interactive replace:\n * vim: :%s/word/replacement/gc<ret>\n   and then keep pressing 'y' to accept the change or 'n' to reject.\n * kak: /word<ret>creplacement<esc>\n   and then press 'n' to search for the next occurence and either '.'\n   to redo the last insert operation (that is replace 'word' with\n   'replacement') or 'n' to go to the next match.\n\nreplace in current curly brace block:\n * vim: viB:s/word/replacement<ret>\n * kak: <a-i>Bsword<ret>creplacement<esc>\n\nHere again, Vim had to rely on a special feature, visual mode.\n\njoin line with next:\n * vim: J\n * kak: <a-J>\n\ndelete to line end:\n * vim: d$\n * kak: <a-l>d or Gld\n\nSome classic Vim moves are not bound to the same key. Kakoune\nuses shifted moves to extend the selection, so Vim moves that were bound to\nshifted characters had to change.\n\n* % became m (for \"matching\"). However, m replaces the selection with the next\n  block. If you want to get a selection from the current point to the next\n  block's end, you should use ;M (; reduces the selection to one character).\n\n* 0 and $ became <a-h> and <a-l>. Equivalent bindings are gh and gl.\n\n:[gv]/re/cmd\nTo emulate :g or :v, use % to select the whole buffer, <a-s> to get\none selection per line, and then <a-k> or <a-K> to keep only the\nselections matching (or not matching) the entered regex.\n"
        },
        {
          "name": "colors",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "gdb",
          "type": "tree",
          "content": null
        },
        {
          "name": "libexec",
          "type": "tree",
          "content": null
        },
        {
          "name": "rc",
          "type": "tree",
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}