{
  "metadata": {
    "timestamp": 1736566286177,
    "page": 34,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebook/hhvm",
      "stars": 18250,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.072265625,
          "content": "[{CMakeLists.txt,*.cmake,*.h,*.cpp}]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0859375,
          "content": "third-party/*/src/** linguist-vendored\nthird-party/fb-mysql/8.0.20/** linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.55859375,
          "content": "*.[oad]\n*.hhbc\n*.rej\n*.orig\n.merlin\n.mkdir\n.DS_Store\nhphp.log\n/_build\nhphp/hack/_build/\nhphp/hack/cargo_home/\n/deps\n\n/hphp/test/test\n/hphp/test/test_fast.inc\n/hphp/test/test_mysql_info.inc\n/hphp/test/test_suite.inc\n/hphp/test/real_mysql_info.inc\n/hphp/test/*.tmp\n/hphp/test/vm/*.out\n/hphp/test/vm/*.diff\n/hphp/test/vm/*.log\n/hphp/test/vm/*.reduce_out\n/hphp/test/vm/*.reduce_diff\n/hphp/test/vm/*.reduce_exp\n/hphp/test/vm/*.perf\n/hphp/test/vm/perf/*.out\n/hphp/test/vm/perf/*.diff\n/hphp/test/vm/perf/*.perf\n/hphp/runtime/ext_hhvm/ext_noinline.cpp\n/hphp/runtime/ext/*/CMakeLists.txt\n/hphp/runtime/ext/*/*.so\n\n/hphp/runtime/test/hphp_runtime_test\n\n/hphp/runtime/tmp/string\n\n/hphp/hhvm/gen\n\n/hphp/tools/shmw/shmw\n/hphp/tools/version/version\n/hphp/tools/gdb/hhvm-gdb\n\n/hphp/ffi/java/classes\n/hphp/ffi/java/hphp_ffi_java.h\n\n/bin\n/output_gd/\n\n# tags files\n/hphp/TAGS\ntags\nTAGS\n\n# old directories with makefiles\n/hphp/submodules\n/hphp/third_party\n/third-party/libzip/libzip.dylib\n\n# eclipse files\n.project\n.cproject\n.settings\n\n# vim files\n.*.swp\n.*.swo\n*.vimrc\n.syntastic_cpp_config\n*~\n\n# vscode\n.vscode\n\n# CMake\nCMakeCache.txt\nCMakeFiles\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\n\n# CMake-generated files that need to stay in the source tree because\n# of ocamlbuild\n/hphp/hack/src/options/buildOptions.ml\n/hphp/hack/opam.stamp\n/hphp/hack/test/.mypy_cache\n/hphp/util/generated-hhjs-babel-transform.txt\n\n# CPack\nCPackConfig.cmake\nCPackSourceConfig.cmake\n\n# Ninja\n.ninja_deps\n.ninja_log\n*.ninja\n\n# windows files\n*.exe\n\n# python scripts\n*.pyc\n\n# clangd JSON Compilation Database\ncompile_commands.json\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.66015625,
          "content": "[submodule \"__FORKS__\"]\n\tpath = third-party/forks\n\turl = https://github.com/hhvm/hhvm-third-party.git\n[submodule \"fastlz\"]\n\tpath = third-party/fastlz/src\n\turl = https://github.com/ariya/FastLZ\n[submodule \"fatal\"]\n\tpath = third-party/fatal\n\turl = https://github.com/facebook/fatal\n[submodule \"fb303\"]\n\tpath = third-party/fb303/src\n\turl = https://github.com/facebookincubator/fb303.git\n[submodule \"libafdt\"]\n\tpath = third-party/libafdt/src\n\turl = https://github.com/facebook/libafdt\n[submodule \"xed-mbuild\"]\n\tpath = third-party/xed/mbuild\n\turl = https://github.com/intelxed/mbuild.git\n[submodule \"xed-xed\"]\n\tpath = third-party/xed/xed\n\turl = https://github.com/intelxed/xed.git\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.990234375,
          "content": "CMAKE_MINIMUM_REQUIRED(VERSION 2.8.7 FATAL_ERROR)\n# Make `get_target_property()` on a target that does not exist a fatal error\n# https://cmake.org/cmake/help/v3.0/policy/CMP0045.html\ncmake_policy(SET CMP0045 NEW)\n# ditto for add_dependencies(): https://cmake.org/cmake/help/v3.0/policy/CMP0046.html\ncmake_policy(SET CMP0046 NEW)\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# This needs to be done before any languages are enabled or\n# projects are created.\nINCLUDE(\"${CMAKE_CURRENT_SOURCE_DIR}/CMake/VisualStudioToolset.cmake\")\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\n# includes\nSET(\n  CMAKE_MODULE_PATH\n  \"${CMAKE_CURRENT_SOURCE_DIR}/CMake\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/build/fbcode_builder/CMake\"\n  ${CMAKE_MODULE_PATH}\n)\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n\nPROJECT(hhvm C CXX ASM)\n\ninclude(HHVMProject)\n\nif (MSVC)\n  enable_language(ASM_MASM)\nendif()\n\nMARK_AS_ADVANCED(CLEAR CMAKE_INSTALL_PREFIX)\nIF(APPLE)\n  # CMake really likes finding libraries inside OS X frameworks. This can\n  # create super unexpected results, such as the LDAP framework, where the\n  # ldap.h header there just consists of \"#include <ldap.h>\" -- obviously\n  # assuming /usr/include appears on the include path before that framework\n  # (which wasn't really supposed to be on the include path at all). This\n  # leads to a hilarious recursive include and general fireworks. Instead,\n  # tell CMake to search frameworks *last*, if it doesn't find something in\n  # /usr (or MacPorts/Homebrew).\n  SET(CMAKE_FIND_FRAMEWORK \"LAST\")\n  MARK_AS_ADVANCED(CMAKE_OSX_ARCHITECTURES\n    CMAKE_OSX_DEPLOYMENT_TARGET\n    CMAKE_OSX_SYSROOT)\n  SET(CMAKE_OSX_DEPLOYMENT_TARGET 10.15)\nENDIF()\n\n# Check architecture OS\nIF(NOT CMAKE_SIZEOF_VOID_P EQUAL 8)\n  MESSAGE(FATAL_ERROR \"HHVM requires a 64bit OS\")\nENDIF()\n\n# Enable ccache if present and not already enabled system wide.\noption(SKIP_CCACHE \"Skip detecting/enabling ccache - no effect if ccache enabled system wide\" FALSE)\nif(NOT SKIP_CCACHE)\n  find_program(CCACHE_FOUND ccache)\n  if(CCACHE_FOUND)\n    if (NOT (\"${CMAKE_CXX_COMPILER} ${CMAKE_C_COMPILER}\" MATCHES \".*ccache.*\"))\n      set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_FOUND})\n      message(STATUS \"Found ccache: ${CCACHE_FOUND} - enabling ccache as compiler wrapper\")\n    else()\n      message(STATUS \"Found ccache - ccache already in use as C and/or CXX compiler wrapper\")\n   endif()\n  endif(CCACHE_FOUND)\nendif(NOT SKIP_CCACHE)\n\nINCLUDE(HPHPFunctions)\nINCLUDE(CheckFunctionExists)\n\nSET(HPHP_HOME ${CMAKE_CURRENT_SOURCE_DIR})\nSET(TP_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/third-party\")\nSET(TP_BUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/third-party\")\n\ninclude(MSVCDefaults)\ninclude(Options)\ninclude(HPHPCompiler)\ninclude(HPHPFindLibs)\n\nADD_SUBDIRECTORY(third-party EXCLUDE_FROM_ALL)\nADD_SUBDIRECTORY(hphp)\n\n# use GNU install dirs (e.g. lib64 instead of lib)\nINCLUDE(GNUInstallDirs)\n\n# modules / depends\nFILE(GLOB HHVM_CMAKE_FILES \"CMake/*.cmake\")\nINSTALL(\n  FILES ${HHVM_CMAKE_FILES}\n  DESTINATION \"${CMAKE_INSTALL_LIBDIR}/hhvm/CMake\"\n  COMPONENT dev)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.27734375,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <opensource-conduct@fb.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.154296875,
          "content": "# Contributing to HHVM\n\nWe'd love to have your help in making HHVM better. Before jumping into the code, please familiarize yourself with our [coding conventions](hphp/doc/coding-conventions.md). We're also working on a [Hacker's Guide to HHVM](hphp/doc/hackers-guide). It's still very incomplete, but if there's a specific topic you'd like to see addressed sooner rather than later, let us know. For documentation and any other problems, please open an [issue](https://github.com/facebook/hhvm/issues), or better yet, [fork us and send a pull request](https://github.com/facebook/hhvm/pulls). Join us on Freenode in [#hhvm](https://webchat.freenode.net/?channels=hhvm) for general discussion, or [#hhvm-dev](https://webchat.freenode.net/?channels=hhvm-dev) for development-oriented discussion.\n\nIf you want to help but don't know where to start, try fixing some of the [\"probably easy\" issues](https://github.com/facebook/hhvm/issues?q=is%3Aopen+is%3Aissue+label%3A%22probably+easy%22); add a test to hphp/test/slow/something_appropriate, and run it with hphp/test/run.\n\nAll the open issues tagged [PHP5 incompatibility](https://github.com/facebook/hhvm/issues?labels=php5+incompatibility&page=1&state=open) are real issues reported by the community in existing PHP code and [frameworks](https://github.com/facebook/hhvm/wiki/OSS-PHP-Frameworks-Unit-Testing:-General) that could use some attention.\n\n## Code of Conduct\nThe code of conduct is described in [`CODE_OF_CONDUCT.md`](CODE_OF_CONDUCT.md)\n\n## Submitting Pull Requests\n\nBefore changes can be accepted a [Contributor Licensing Agreement](https://code.facebook.com/cla) must be completed. You will be prompted to accept the CLA when you submit your first pull request. If you prefer a hard copy, you can print the [pdf](https://github.com/facebook/hhvm/raw/master/hphp/doc/FB_Individual_CLA.pdf), sign it, scan it, and send it to <cla@fb.com>.\n\nPlease add appropriate test cases as you make changes, and make sure that they pass locally before submitting your pull request; see [here](hphp/test/README.md) for more information.  All the tests are run via Phabricator, however testing locally greatly speeds up the process of accepting your changes.\n\n### Stable Version Updates\n\nWe maintain up to three [stable branches](https://github.com/facebook/hhvm/wiki/Release%20Schedule) at once (the current release plus two [LTS branches](https://github.com/facebook/hhvm/wiki/Long-term-support-%28LTS%29)). To get a fix into one of those branches, first get accepted into master, as described above. Fixes are merged into master and then merged backwards into stable releases as appropriate.\n\nThen, submit another PR against the relevant stable branch(es) cherry-picking your change into that branch, with any changes needed to properly backport. Make sure to explain in the PR summary why the change should be considered for inclusion in the stable branch -- basically, make the case for why the issue the change is fixing is worse than the possible risk of what the change might break (and thus what *we* will be responsible for debugging, fixing, and maintaining).\n\n## Quick Links\n\n * [Slack](https://hhvm.com/slack)\n * [Issue tracker](https://github.com/facebook/hhvm/issues)\n"
        },
        {
          "name": "LICENSE.PHP",
          "type": "blob",
          "size": 3.12890625,
          "content": "--------------------------------------------------------------------\n                  The PHP License, version 3.01\nCopyright (c) 1999 - 2010 The PHP Group. All rights reserved.\n--------------------------------------------------------------------\n\nRedistribution and use in source and binary forms, with or without\nmodification, is permitted provided that the following conditions\nare met:\n\n  1. Redistributions of source code must retain the above copyright\n     notice, this list of conditions and the following disclaimer.\n\n  2. Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n     distribution.\n\n  3. The name \"PHP\" must not be used to endorse or promote products\n     derived from this software without prior written permission. For\n     written permission, please contact group@php.net.\n\n  4. Products derived from this software may not be called \"PHP\", nor\n     may \"PHP\" appear in their name, without prior written permission\n     from group@php.net.  You may indicate that your software works in\n     conjunction with PHP by saying \"Foo for PHP\" instead of calling\n     it \"PHP Foo\" or \"phpfoo\"\n\n  5. The PHP Group may publish revised and/or new versions of the\n     license from time to time. Each version will be given a\n     distinguishing version number.\n     Once covered code has been published under a particular version\n     of the license, you may always continue to use it under the terms\n     of that version. You may also choose to use such covered code\n     under the terms of any subsequent version of the license\n     published by the PHP Group. No one other than the PHP Group has\n     the right to modify the terms applicable to covered code created\n     under this License.\n\n  6. Redistributions of any form whatsoever must retain the following\n     acknowledgment:\n     \"This product includes PHP software, freely available from\n     <http://www.php.net/software/>\".\n\nTHIS SOFTWARE IS PROVIDED BY THE PHP DEVELOPMENT TEAM ``AS IS'' AND\nANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE PHP\nDEVELOPMENT TEAM OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\n\n--------------------------------------------------------------------\n\nThis software consists of voluntary contributions made by many\nindividuals on behalf of the PHP Group.\n\nThe PHP Group can be contacted via Email at group@php.net.\n\nFor more information on the PHP Group and the PHP project,\nplease see <http://www.php.net>.\n\nPHP includes the Zend Engine, freely available at\n<http://www.zend.com>.\n"
        },
        {
          "name": "LICENSE.ZEND",
          "type": "blob",
          "size": 2.7373046875,
          "content": "--------------------------------------------------------------------\n                The Zend Engine License, version 2.00\nCopyright (c) 1999-2002 Zend Technologies Ltd. All rights reserved.\n--------------------------------------------------------------------\n\nRedistribution and use in source and binary forms, with or without\nmodification, is permitted provided that the following conditions\nare met:\n\n  1. Redistributions of source code must retain the above copyright\n     notice, this list of conditions and the following disclaimer.\n\n  2. Redistributions in binary form must reproduce the above\n     copyright notice, this list of conditions and the following\n     disclaimer in the documentation and/or other materials provided\n     with the distribution.\n\n  3. The names \"Zend\" and \"Zend Engine\" must not be used to endorse\n     or promote products derived from this software without prior\n     permission from Zend Technologies Ltd. For written permission,\n     please contact license@zend.com.\n\n  4. Zend Technologies Ltd. may publish revised and/or new versions\n     of the license from time to time. Each version will be given a\n     distinguishing version number.\n     Once covered code has been published under a particular version\n     of the license, you may always continue to use it under the\n     terms of that version. You may also choose to use such covered\n     code under the terms of any subsequent version of the license\n     published by Zend Technologies Ltd. No one other than Zend\n     Technologies Ltd. has the right to modify the terms applicable\n     to covered code created under this License.\n\n  5. Redistributions of any form whatsoever must retain the following\n     acknowledgment:\n     \"This product includes the Zend Engine, freely available at\n     http://www.zend.com\"\n\n  6. All advertising materials mentioning features or use of this\n     software must display the following acknowledgment:\n     \"The Zend Engine is freely available at http://www.zend.com\"\n\nTHIS SOFTWARE IS PROVIDED BY ZEND TECHNOLOGIES LTD. ``AS IS'' AND\nANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL ZEND\nTECHNOLOGIES LTD.  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\nUSE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\nOF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\n--------------------------------------------------------------------\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.8203125,
          "content": "# HHVM\n\n[HHVM page](https://hhvm.com) |\n[HHVM documentation](https://docs.hhvm.com/hhvm/) |\n[Hacklang page](http://hacklang.org) |\n[General group](https://www.facebook.com/groups/hhvm.general/) |\n[Dev group](https://www.facebook.com/groups/hhvm.dev/) |\n[Twitter](https://twitter.com/HipHopVM)\n\nHHVM is an open-source virtual machine designed for executing programs written in [Hack](http://hacklang.org). HHVM uses a just-in-time (JIT) compilation approach to achieve superior performance while maintaining amazing development flexibility.\n\nHHVM should be used together with a webserver like the built in, easy to deploy [Proxygen](https://docs.hhvm.com/hhvm/basic-usage/proxygen), or a [FastCGI](https://docs.hhvm.com/hhvm/advanced-usage/fastCGI)-based webserver on top of nginx or Apache.\n\n## Installing\n\nIf you're new, try our [getting started guide](https://docs.hhvm.com/hhvm/getting-started/getting-started).\n\nYou can install a [prebuilt package](https://docs.hhvm.com/hhvm/installation/introduction#prebuilt-packages) or [compile from source](https://docs.hhvm.com/hhvm/installation/building-from-source).\n\n## Running\n\nYou can run standalone programs just by passing them to hhvm: `hhvm example.hack`.\n\nIf you want to host a website:\n* Install your favorite webserver. [Proxygen](https://docs.hhvm.com/hhvm/basic-usage/proxygen) is built into HHVM, fast and easy to deploy.\n* Install our [package](https://docs.hhvm.com/hhvm/installation/introduction#prebuilt-packages)\n* Start your webserver\n* Run `sudo /etc/init.d/hhvm start`\n* Visit your site at `http://.../main.hack`\n\nOur [getting started guide](https://docs.hhvm.com/hhvm/getting-started/getting-started) provides a slightly more detailed introduction as well as links to more information.\n\n## Contributing\n\nWe'd love to have your help in making HHVM better. If you're interested, please read our [guide to contributing](CONTRIBUTING.md).\n\n## License\n\nHHVM is licensed under the PHP and Zend licenses except as otherwise noted.\n\nThe [Hack typechecker](hphp/hack) is licensed under the MIT [License](hphp/hack/LICENSE) except as otherwise noted.\n\nThe [Hack Standard Library](hphp/hsl) is licensed under the MIT [License](hphp/hsl/LICENSE) except as otherwise noted.\n\n## Reporting Crashes\n\nSee [Reporting Crashes](https://github.com/facebook/hhvm/wiki/Reporting-Crashes) for helpful tips on how to report crashes in an actionable manner.\n\n## Security\n\nFor information on reporting security vulnerabilities in HHVM, see [SECURITY.md](SECURITY.md).\n\n## FAQ\n\nOur [user FAQ](https://docs.hhvm.com/hhvm/FAQ/faq) has answers to many common questions about HHVM, from [general questions](https://docs.hhvm.com/hhvm/FAQ/faq#general) to questions geared towards those that want to [use](https://docs.hhvm.com/hhvm/FAQ/faq#users).\n\nThere is also a FAQ for [contributors](https://github.com/facebook/hhvm/wiki/FAQ#contributors) to HHVM.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.4384765625,
          "content": "# Reporting and Fixing Security Issues\n\nPlease do not open GitHub issues or pull requests - this makes the problem immediately visible to everyone, including malicious actors. Security issues in HHVM can be safely reported via HHVM's Whitehat Bug Bounty program:\n\n[facebook.com/whitehat](https://www.facebook.com/whitehat)\n\nFacebook's security team will triage your report and determine whether or not is it eligible for a bounty under our program.\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "clang.code-workspace",
          "type": "blob",
          "size": 0.7041015625,
          "content": "{\n  \"folders\": [\n    {\n      \"path\": \".\"\n    }\n  ],\n  \"settings\": {\n    \"nixEnvSelector.nixFile\": \"${workspaceRoot}/shell_clang.nix\",\n    \"nix.enableLanguageServer\": true,\n    \"terminal.integrated.profiles.linux\": {\n      \"Nix Shell\": {\n        \"path\": \"nix-shell\",\n        \"args\": [\n          \"shell_clang.nix\"\n        ]\n      }\n    },\n    \"terminal.integrated.profiles.osx\": {\n      \"Nix Shell\": {\n        \"path\": \"nix-shell\",\n        \"args\": [\n          \"shell_clang.nix\"\n        ]\n      }\n    },\n    \"cmake.buildDirectory\": \"${workspaceFolder}/_build\"\n  },\n  \"extensions\": {\n    \"recommendations\": [\n      \"arrterian.nix-env-selector\",\n      \"jnoortheen.nix-ide\",\n      \"ms-vscode.cpptools-extension-pack\"\n    ]\n  }\n}"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.4287109375,
          "content": "too-many-lines-threshold = 200\nawait-holding-invalid-types = [\n    { path = \"tracing::span::Entered\", reason = \"`Entered` is not aware when a function is suspended: https://docs.rs/tracing/latest/tracing/struct.Span.html#in-asynchronous-code\" },\n    { path = \"tracing::span::EnteredSpan\", reason = \"`EnteredSpan` is not aware when a function is suspended: https://docs.rs/tracing/latest/tracing/struct.Span.html#in-asynchronous-code\" },\n]\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 0.626953125,
          "content": "#!/usr/bin/env bash\n\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n\nif [ \"$1\" = '--help' ] || [ \"$1\" = '-h' ]; then\n  echo \"usage: $0 -Dvariable=argument ...\"\n  echo ''\n  echo 'Variables: '\n  options=`cat $DIR/CMake/Options.cmake | grep option | sed -e 's/^[ \\t]*//' |\n           sed 's/\\s*option(/  -D/; s/ \"/=ON|OFF : /;  \n                s/\" / : Default: /; s/)$//' | sort`\n  options=\"  -DCMAKE_BUILD_TYPE=Debug|Release|RelWithDebInfo|MinSizeRel : Sets build type \\\n: Default: Release\n$options\"\n  if which column > /dev/null; then \n    options=`echo \"$options\" | column -t -s : `\n  fi\n  echo \"$options\"\n  exit 2\nfi\n\ncmake \"$@\" .\n"
        },
        {
          "name": "default.nix",
          "type": "blob",
          "size": 0.3603515625,
          "content": "(import\n  (\n    let lock = builtins.fromJSON (builtins.readFile ./flake.lock); in\n    fetchTarball {\n      url = \"https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz\";\n      sha256 = lock.nodes.flake-compat.locked.narHash;\n    }\n  )\n  { src = builtins.fetchGit { url = ./.; submodules = true; shallow = true; }; }\n).defaultNix\n"
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.8857421875,
          "content": "{\n  \"nodes\": {\n    \"flake-compat\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1650374568,\n        \"narHash\": \"sha256-Z+s0J8/r907g149rllvwhb4pKi8Wam5ij0st8PwAh+E=\",\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"rev\": \"b4a34015c698c7793d592d66adbab377907a2be8\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"type\": \"github\"\n      }\n    },\n    \"flake-utils\": {\n      \"locked\": {\n        \"lastModified\": 1667395993,\n        \"narHash\": \"sha256-nuEHfE/LcWyuSWnS8t12N1wc105Qtau+/OdUAjtQ0rA=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"5aed5285a952e0b949eb3ba02c12fa4fcfef535f\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1667758139,\n        \"narHash\": \"sha256-CbDAP6wttlaVs9s4DPZlJ5Wf6Ozz9lX7SdJVtFA8cAo=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"8993cc730d11148ef59e84a8f15f94f688e1bfd1\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"id\": \"nixpkgs\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"nixpkgs-mozilla\": {\n      \"locked\": {\n        \"lastModified\": 1664789696,\n        \"narHash\": \"sha256-UGWJHQShiwLCr4/DysMVFrYdYYHcOqAOVsWNUu+l6YU=\",\n        \"owner\": \"mozilla\",\n        \"repo\": \"nixpkgs-mozilla\",\n        \"rev\": \"80627b282705101e7b38e19ca6e8df105031b072\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"mozilla\",\n        \"repo\": \"nixpkgs-mozilla\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-compat\": \"flake-compat\",\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\",\n        \"nixpkgs-mozilla\": \"nixpkgs-mozilla\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 4.619140625,
          "content": "{\n  inputs = {\n    flake-utils.url = \"github:numtide/flake-utils\";\n    flake-compat.url = \"github:edolstra/flake-compat\";\n    flake-compat.flake = false;\n    nixpkgs-mozilla.url = \"github:mozilla/nixpkgs-mozilla\";\n  };\n  outputs =\n    { self, nixpkgs, flake-utils, flake-compat, nixpkgs-mozilla }:\n    flake-utils.lib.eachSystem [\n      \"x86_64-darwin\"\n      \"x86_64-linux\"\n    ]\n      (\n        system:\n        let\n          pkgs = import nixpkgs {\n            inherit system;\n            overlays = [\n              nixpkgs-mozilla.overlays.rust\n            ];\n            config.permittedInsecurePackages = [\n              # It's OK to depend on libdwarf 20210528, because we did not call\n              # the particular vulnerable function in libdwarf\n              \"libdwarf-20210528\"\n            ];\n          };\n          devShellForPackage = hhvm:\n            pkgs.mkShell.override\n              { stdenv = hhvm.stdenv; }\n              {\n                inputsFrom = [\n                  hhvm\n                ];\n                packages = [\n                  pkgs.rnix-lsp\n                  pkgs.fpm\n                  pkgs.rpm\n                ];\n                inherit (hhvm)\n                  NIX_CFLAGS_COMPILE\n                  CMAKE_TOOLCHAIN_FILE;\n              };\n        in\n        rec {\n          packages.hhvm = pkgs.callPackage ./hhvm.nix {\n            lastModifiedDate = self.lastModifiedDate;\n          };\n          packages.hhvm_clang = packages.hhvm.override {\n            stdenv = pkgs.llvmPackages_14.stdenv;\n          };\n          packages.default = packages.hhvm;\n\n          devShells.clang = devShellForPackage packages.hhvm_clang;\n          devShells.default = devShellForPackage packages.hhvm;\n\n          ${if pkgs.hostPlatform.isLinux then \"bundlers\" else null} =\n            let\n              fpmScript =\n                outputType: pkg:\n                ''\n                  # Copy to a temporary directory as a workaround to https://github.com/jordansissel/fpm/issues/807\n                  while read LINE\n                  do\n                    mkdir -p \"$(dirname \"./$LINE\")\"\n                    cp -r \"/$LINE\" \"./$LINE\"\n                    chmod --recursive u+w \"./$LINE\"\n                    FPM_INPUTS+=(\"./$LINE\")\n                  done < ${pkgs.lib.strings.escapeShellArg (pkgs.referencesByPopularity pkg)}\n\n                  ${pkgs.lib.strings.escapeShellArg pkgs.fpm}/bin/fpm \\\n                    --verbose \\\n                    --package \"$out\" \\\n                    --input-type dir \\\n                    --output-type ${outputType} \\\n                    --name ${pkgs.lib.strings.escapeShellArg pkg.pname} \\\n                    --version ${\n                      pkgs.lib.strings.escapeShellArg\n                        (builtins.replaceStrings [\"-\"] [\"~\"] pkg.version)\n                    } \\\n                    --description ${pkgs.lib.strings.escapeShellArg pkg.meta.description} \\\n                    --url ${pkgs.lib.strings.escapeShellArg pkg.meta.homepage} \\\n                    --maintainer ${pkgs.lib.strings.escapeShellArg (pkgs.lib.strings.concatStringsSep \", \" (map ({name, email, ...}: \"\\\"${name}\\\" <${email}>\") pkg.meta.maintainers))} \\\n                    --license ${pkgs.lib.strings.escapeShellArg (pkgs.lib.strings.concatStringsSep \" AND \" (map ({spdxId, ...}: spdxId) (pkgs.lib.lists.toList pkg.meta.license)))} \\\n                    --after-install ${\n                      pkgs.writeScript \"after-install.sh\" ''\n                        for EXECUTABLE in ${pkgs.lib.strings.escapeShellArg pkg}/bin/*\n                        do\n                          NAME=$(basename \"$EXECUTABLE\")\n                          update-alternatives --install \"/usr/bin/$NAME\" \"$NAME\" \"$EXECUTABLE\" 1\n                        done\n                      ''\n                    } \\\n                    --before-remove ${\n                      pkgs.writeScript \"before-remove.sh\" ''\n                        for EXECUTABLE in ${pkgs.lib.strings.escapeShellArg pkg}/bin/*\n                        do\n                          NAME=$(basename \"$EXECUTABLE\")\n                          update-alternatives --remove \"$NAME\" \"$EXECUTABLE\"\n                        done\n                      ''\n                    } \\\n                    -- \\\n                    \"''${FPM_INPUTS[@]}\"\n                '';\n            in\n            {\n              rpm = pkg: pkgs.runCommand\n                \"bundle.rpm\"\n                { nativeBuildInputs = [ pkgs.rpm ]; }\n                (fpmScript \"rpm\" pkg);\n              deb = pkg: pkgs.runCommand\n                \"bundle.deb\"\n                { nativeBuildInputs = [ pkg.stdenv.cc ]; }\n                (fpmScript \"deb\" pkg);\n            };\n\n        }\n      );\n}\n"
        },
        {
          "name": "gpg-key.kms-ciphertext",
          "type": "blob",
          "size": 3.8984375,
          "content": null
        },
        {
          "name": "hhvm.code-workspace",
          "type": "blob",
          "size": 0.5869140625,
          "content": "{\n  \"folders\": [\n    {\n      \"path\": \".\"\n    }\n  ],\n  \"settings\": {\n    \"nixEnvSelector.nixFile\": \"${workspaceRoot}/shell.nix\",\n    \"nix.enableLanguageServer\": true,\n    \"terminal.integrated.profiles.linux\": {\n      \"Nix Shell\": {\n        \"path\": \"nix-shell\"\n      }\n    },\n    \"terminal.integrated.profiles.osx\": {\n      \"Nix Shell\": {\n        \"path\": \"nix-shell\"\n      }\n    },\n    \"cmake.buildDirectory\": \"${workspaceFolder}/_build\"\n  },\n  \"extensions\": {\n    \"recommendations\": [\n      \"arrterian.nix-env-selector\",\n      \"jnoortheen.nix-ide\",\n      \"ms-vscode.cpptools-extension-pack\"\n    ]\n  }\n}"
        },
        {
          "name": "hhvm.nix",
          "type": "blob",
          "size": 6.7607421875,
          "content": "{ bison\n, boost\n, brotli\n, bzip2\n, cacert\n, cmake\n, curl\n, darwin\n, double-conversion\n, editline\n, expat\n, flex\n, fmt_8\n, freetype\n, fribidi\n, gcc-unwrapped\n, gd\n, gdb\n, gettext\n, gflags\n, git\n, glog\n, gmp\n, gperf\n, gperftools\n, hostPlatform\n, icu\n, imagemagick6\n, jemalloc\n, lastModifiedDate\n, lib\n, libcap\n, libdwarf_20210528\n, libedit\n, libelf\n, libevent\n, libkrb5\n, libmcrypt\n, libmemcached\n, libpng\n, libsodium\n, libunwind\n, libvpx\n, libxml2\n, libxslt\n, libzip\n, linux-pam\n, lz4\n, numactl\n, oniguruma\n, openldap\n, openssl_1_1\n, pcre\n, perl\n, pkg-config\n, python3\n, re2\n, re2c\n, rustChannelOf\n, stdenv\n, sqlite\n, tbb\n, tzdata\n, unixtools\n, unzip\n, uwimap\n, which\n, writeTextFile\n, zlib\n, zstd\n}:\nlet\n  # TODO(https://github.com/NixOS/nixpkgs/pull/193086): Use stdenv.cc.libcxx once it is available\n  isDefaultStdlib =\n    builtins.match \".*-stdlib=\\+\\+.*\" (builtins.readFile \"${stdenv.cc}/nix-support/libcxx-ldflags\") == null;\n  versionParts =\n    builtins.match\n      ''\n        .*\n        #[[:blank:]]*define[[:blank:]]+HHVM_VERSION_MAJOR[[:blank:]]+([[:digit:]]+)\n        #[[:blank:]]*define[[:blank:]]+HHVM_VERSION_MINOR[[:blank:]]+([[:digit:]]+)\n        #[[:blank:]]*define[[:blank:]]+HHVM_VERSION_PATCH[[:blank:]]+([[:digit:]]+)\n        #[[:blank:]]*define[[:blank:]]+HHVM_VERSION_SUFFIX[[:blank:]]+\"([^\"]*)\"\n        .*\n      ''\n      (builtins.readFile ./hphp/runtime/version.h);\n  makeVersion = major: minor: patch: suffix:\n    if suffix == \"-dev\" then \"${major}.${minor}.${patch}-dev${lastModifiedDate}\" else \"${major}.${minor}.${patch}\";\n\n  rustChannel = rustChannelOf {\n\n    # When the date attribute changes, sha256 should be updated accordingly.\n    #\n    # 1. Export your diff to GitHub;\n    # 2. Wait for an error message about sha256 mismatch from the GitHub\n    #    Actions;\n    # 3. Copy the new sha256 from the error message and paste it here;\n    # 4. Submit the diff and export the diff to GitHub, again.\n    # 5. Ensure no error message about sha256 mismatch from the GitHub Actions.\n    sha256 = \"wVnIzrnpYGqiCBtc3k55tw4VW8YLA3WZY0mSac+2yl0=\";\n\n    date = \"2022-08-11\";\n    channel = \"nightly\";\n  };\nin\nstdenv.mkDerivation rec {\n  rust = rustChannel.rust;\n  pname = \"hhvm\";\n  version = builtins.foldl' lib.trivial.id makeVersion versionParts;\n  src = ./.;\n  nativeBuildInputs =\n    [\n      bison\n      cacert\n      cmake\n      flex\n      pkg-config\n      python3\n      unixtools.getconf\n      which\n    ] ++ lib.optionals hostPlatform.isMacOS [\n      # `system_cmds` provides `sysctl`, which is used in hphp/test/run.php on macOS\n      darwin.system_cmds\n    ];\n  buildInputs =\n    [\n      (if isDefaultStdlib then boost else boost.override { inherit stdenv; })\n      brotli\n      bzip2\n      (curl.override { openssl = openssl_1_1; })\n      (\n        if isDefaultStdlib then\n          double-conversion\n        else\n          double-conversion.override { inherit stdenv; }\n      )\n      editline\n      expat\n      (if isDefaultStdlib then fmt_8 else fmt_8.override { inherit stdenv; })\n      freetype\n      fribidi\n      # Workaround for https://github.com/NixOS/nixpkgs/issues/192665\n      gcc-unwrapped.lib\n      gd\n      gdb\n      gettext\n      git\n      (\n        if isDefaultStdlib then\n          glog\n        else\n          (glog.override {\n            inherit stdenv;\n            gflags = gflags.override { inherit stdenv; };\n          }).overrideAttrs\n            (finalAttrs: previousAttrs: {\n              # Workaround for https://github.com/google/glog/issues/709\n              doCheck = !stdenv.cc.isClang;\n            })\n      )\n      gmp\n      (if isDefaultStdlib then gperf else gperf.override { inherit stdenv; })\n      (\n        if isDefaultStdlib then\n          gperftools\n        else\n          gperftools.override { inherit stdenv; }\n      )\n      (if isDefaultStdlib then icu else icu.override { inherit stdenv; })\n      imagemagick6\n      jemalloc\n      libdwarf_20210528\n      libedit\n      libelf\n      libevent\n      libkrb5\n      libmcrypt\n      libmemcached\n      libpng\n      libsodium\n      libunwind\n      libvpx\n      libxml2\n      libxslt\n      libzip\n      lz4\n      oniguruma\n      openldap\n      openssl_1_1\n      pcre\n      perl\n      re2\n      re2c\n      sqlite\n      (if isDefaultStdlib then tbb else tbb.override { inherit stdenv; })\n      tzdata\n      unzip\n      zlib\n      zstd\n    ]\n    ++ lib.optionals hostPlatform.isLinux [\n      libcap\n      linux-pam\n      numactl\n      uwimap\n    ]\n    ++ lib.optionals hostPlatform.isMacOS [\n      darwin.apple_sdk.frameworks.CoreFoundation\n      darwin.apple_sdk.frameworks.CoreServices\n    ];\n\n  NIX_CFLAGS_COMPILE =\n    lib.optionals stdenv.cc.isClang [\n      # Workaround for dtoa.0.3.2\n      \"-Wno-error=unused-command-line-argument\"\n    ];\n\n  CMAKE_TOOLCHAIN_FILE = writeTextFile {\n    name = \"toolchain.cmake\";\n    text = ''\n      set(ENABLE_SYSTEM_LOCALE_ARCHIVE ON CACHE BOOL \"Use system locale archive as the default LOCALE_ARCHIVE for nix patched glibc\" FORCE)\n      set(CAN_USE_SYSTEM_ZSTD ON CACHE BOOL \"Use system zstd\" FORCE)\n      set(HAVE_SYSTEM_TZDATA_PREFIX \"${tzdata}/share/zoneinfo\" CACHE PATH \"The zoneinfo directory\" FORCE)\n      set(HAVE_SYSTEM_TZDATA ON CACHE BOOL \"Use system zoneinfo\" FORCE)\n      set(MYSQL_UNIX_SOCK_ADDR \"/run/mysqld/mysqld.sock\" CACHE FILEPATH \"The MySQL unix socket\" FORCE)\n      set(CARGO_EXECUTABLE \"${rust}/bin/cargo\" CACHE FILEPATH \"The nightly cargo\" FORCE)\n      set(RUSTC_EXECUTABLE \"${rust}/bin/rustc\" CACHE FILEPATH \"The nightly rustc\" FORCE)\n      set(CMAKE_VERBOSE_MAKEFILE ON CACHE BOOL \"Enable verbose output from Makefile builds\" FORCE)\n      ${\n        lib.optionalString hostPlatform.isMacOS ''\n          set(CMAKE_OSX_DEPLOYMENT_TARGET \"10.15\" CACHE STRING \"Targeting macOS version\" FORCE)\n        ''\n      }\n    '';\n  };\n\n  prePatch = ''\n    patchShebangs .\n  '';\n\n  preBuild =\n    ''\n      set -e\n      make \\\n        -f third-party/proxygen/CMakeFiles/bundled_proxygen.dir/build.make \\\n        third-party/proxygen/bundled_proxygen-prefix/src/bundled_proxygen-stamp/bundled_proxygen-patch\n      patchShebangs \\\n        third-party/proxygen/bundled_proxygen-prefix/src/bundled_proxygen\n    '';\n\n  doCheck = true;\n\n  checkPhase =\n    ''\n      set -e\n      runHook preCheck\n      export HHVM_BIN=\"$PWD/hphp/hhvm/hhvm\"\n      (cd ${./.} && \"$HHVM_BIN\" hphp/test/run.php quick)\n      runHook postCheck\n    '';\n\n  meta = {\n    description = \"High-performance JIT compiler for PHP/Hack\";\n    platforms = [\n      \"x86_64-darwin\"\n      \"x86_64-linux\"\n    ];\n    homepage = \"https://hhvm.com\";\n    license = [\n      lib.licenses.php301\n      {\n        spdxId = \"Zend-2.0\";\n        fullName = \"Zend License v2.0\";\n        url = \"https://www.zend.com/sites/zend/files/pdfs/2_00.txt\";\n      }\n    ];\n    maintainers = [{\n      email = \"hhvm-oss@fb.com\";\n      github = \"hhvm\";\n      githubId = 4553654;\n      name = \"HHVM/Hack Open Source\";\n    }];\n  };\n}\n"
        },
        {
          "name": "hphp",
          "type": "tree",
          "content": null
        },
        {
          "name": "main-repo-push-key.kms-ciphertext",
          "type": "blob",
          "size": 1.7939453125,
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.2734375,
          "content": "# Get help on options with `rustfmt --help=config`\n# Please keep these in alphabetical order.\nedition = \"2021\"\nformat_code_in_doc_comments = true\ngroup_imports = \"StdExternalCrate\"\nimports_granularity = \"Item\"\nmerge_derives = false\nuse_field_init_shorthand = true\nversion = \"Two\"\n"
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 0.328125,
          "content": "(\n  import\n    (\n      let\n        lock = builtins.fromJSON (builtins.readFile ./flake.lock);\n      in\n      fetchTarball {\n        url = \"https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz\";\n        sha256 = lock.nodes.flake-compat.locked.narHash;\n      }\n    )\n    { src = ./.; }\n).shellNix\n"
        },
        {
          "name": "shell_clang.nix",
          "type": "blob",
          "size": 0.369140625,
          "content": "(\n  import\n    (\n      let\n        lock = builtins.fromJSON (builtins.readFile ./flake.lock);\n      in\n      fetchTarball {\n        url = \"https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz\";\n        sha256 = lock.nodes.flake-compat.locked.narHash;\n      }\n    )\n    { src = ./.; }\n).shellNix.devShells.${builtins.currentSystem}.clang\n"
        },
        {
          "name": "third-party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}