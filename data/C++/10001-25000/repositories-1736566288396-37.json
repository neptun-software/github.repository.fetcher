{
  "metadata": {
    "timestamp": 1736566288396,
    "page": 37,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/filament",
      "stars": 17989,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 0.287109375,
          "content": ";;; Directory Local Variables            -*- no-byte-compile: t -*-\n;;; For more information see (info \"(emacs) Directory Variables\")\n\n((c++-mode . ((c-file-style . \"filament\")\n              (apheleia-inhibit . t)))\n (c-mode . ((c-file-style . \"filament\")\n            (apheleia-inhibit . t))))\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.166015625,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\n\n[*.{c,cpp,h,inc,kt,java,js,md}]\nindent_style = space\nindent_size = 4\nmax_line_length = 100\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.216796875,
          "content": ".DS_Store\n.idea\nimgui.ini\ncmake-*\nImportExecutables-*.cmake\n/out*\ndist\ndist-*\ntoolchains\nfilament/docs/html/**\n.vscode\n*tmp*.png\ncivetweb.txt\n/TAGS\nsettings.json\ntest*.png\ntest*.json\nresults\n/compile_commands.json\n/.cache\n"
        },
        {
          "name": "BRANCHING.md",
          "type": "blob",
          "size": 1.3505859375,
          "content": "![Filament branching strategy](art/diagrams/branching.png)\n\n## Which branch do I open my PR against?\n\nFor normal development, open PRs against main. Once they're merged, no further action is necessary.\n\nIf you discover a bug with the latest *release candidate*, open a bug fix PR against the release\ncandidate branch (rc/1.9.0, for example). Once the PR is merged, decide whether it makes sense for\nthe fix to also go into main. If it was a temporary fix, simply make the _correct_ fix in main as\nyou would any other change. If the fix is good for main as well, use `git cherry-pick <sha>` to\ncherry-pick it into main.\n\nIf an immediate hotfix is needed on the *release* branch, open a PR against the release branch. Once\nthe PR is merged, decide whether the fix is temporary or permanent. If the fix was temporary, make\nthe _correct_ fix in both the next release candidate branch _and_ main. If the fix is good, use `git\ncherry-pick <sha>` to cherry-pick it into the relase candidate branch and main.\n\n## What consitutes a bug?\n\nOnly bug fix PRs should be opened against the *release candidate* branch.\n\nBugs are defined as one of the following _introduced since the prior release_:\n\n- crashes\n- rendering issues\n- unintentional binary size increases\n- unintentional public API changes\n\nFor example, a long-standing crash just recently discovered would not necessitate a bug fix PR.\n"
        },
        {
          "name": "BUILDING.md",
          "type": "blob",
          "size": 15.83203125,
          "content": "## Building Filament\n\n### Prerequisites\n\nTo build Filament, you must first install the following tools:\n\n- CMake 3.19 (or more recent)\n- clang 14.0 (or more recent)\n- [ninja 1.10](https://github.com/ninja-build/ninja/wiki/Pre-built-Ninja-packages) (or more recent)\n\nAdditional dependencies may be required for your operating system. Please refer to the appropriate\nsection below.\n\nTo build Filament for Android you must also install the following:\n\n- Android Studio Flamingo or more recent\n- Android SDK\n- Android NDK 25.1 or higher\n- Java 17\n\n### Environment variables\n\nTo build Filament for Android, make sure the environment variable `ANDROID_HOME` points to the\nlocation of your Android SDK.\n\nWhen building for WebGL, you'll also need to set `EMSDK`. See [WebAssembly](#webassembly).\n\n### IDE\n\nWe recommend using CLion to develop for Filament. Simply open the root directory's CMakeLists.txt\nin CLion to obtain a usable project.\n\n### Easy build\n\nOnce the required OS specific dependencies listed below are installed, you can use the script\nlocated in `build.sh` to build Filament easily on macOS and Linux.\n\nThis script can be invoked from anywhere and will produce build artifacts in the `out/` directory\ninside the Filament source tree.\n\nTo trigger an incremental debug build:\n\n```shell\n./build.sh debug\n```\n\nTo trigger an incremental release build:\n\n```shell\n./build.sh release\n```\n\nTo trigger both incremental debug and release builds:\n\n```shell\n./build.sh debug release\n```\n\nIf build fails for some reasons, it may leave the `out/` directory in a broken state. You can\nforce a clean build by adding the `-c` flag in that case.\n\nTo install the libraries and executables in `out/debug/` and `out/release/`, add the `-i` flag.\nThe script offers more features described by executing `build.sh -h`.\n\n### Filament-specific CMake Options\n\nThe following CMake options are boolean options specific to Filament:\n\n- `FILAMENT_ENABLE_LTO`:           Enable link-time optimizations if supported by the compiler\n- `FILAMENT_BUILD_FILAMAT`:        Build filamat and JNI buildings\n- `FILAMENT_SUPPORTS_OPENGL`:      Include the OpenGL backend\n- `FILAMENT_SUPPORTS_METAL`:       Include the Metal backend\n- `FILAMENT_SUPPORTS_VULKAN`:      Include the Vulkan backend\n- `FILAMENT_INSTALL_BACKEND_TEST`: Install the backend test library so it can be consumed on iOS\n- `FILAMENT_USE_EXTERNAL_GLES3`:   Experimental: Compile Filament against OpenGL ES 3\n- `FILAMENT_SKIP_SAMPLES`:         Don't build sample apps\n\nTo turn an option on or off:\n\n```shell\ncd <cmake-build-directory>\ncmake . -DOPTION=ON       # Replace OPTION with the option name, set to ON / OFF\n```\n\nOptions can also be set with the CMake GUI.\n\n### Linux\n\nMake sure you've installed the following dependencies:\n\n- `clang-14` or higher\n- `libglu1-mesa-dev`\n- `libc++-14-dev` (`libcxx-devel` and `libcxx-static` on Fedora) or higher\n- `libc++abi-14-dev` (`libcxxabi-static` on Fedora) or higher\n- `ninja-build`\n- `libxi-dev`\n- `libxcomposite-dev` (`libXcomposite-devel` on Fedora)\n- `libxxf86vm-dev` (`libXxf86vm-devel` on Fedora)\n\nAfter dependencies have been installed, we highly recommend using the [easy build](#easy-build)\nscript.\n\nIf you'd like to run `cmake` directly rather than using the build script, it can be invoked as\nfollows, with some caveats that are explained further down.\n\n```shell\nmkdir out/cmake-release\ncd out/cmake-release\ncmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../release/filament ../..\n```\n\nYour Linux distribution might default to `gcc` instead of `clang`, if that's the case invoke\n`cmake` with the following command:\n\n```shell\nmkdir out/cmake-release\ncd out/cmake-release\n# Or use a specific version of clang, for instance /usr/bin/clang-14\nCC=/usr/bin/clang CXX=/usr/bin/clang++ CXXFLAGS=-stdlib=libc++ \\\n  cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../release/filament ../..\n```\n\nYou can also export the `CC` and `CXX` environment variables to always point to `clang`. Another\nsolution is to use `update-alternatives` to both change the default compiler, and point to a\nspecific version of clang:\n\n```shell\nupdate-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100\nupdate-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-14 100\nupdate-alternatives --install /usr/bin/cc cc /usr/bin/clang 100\nupdate-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 100\n```\n\nFinally, invoke `ninja`:\n\n```shell\nninja\n```\n\nThis will build Filament, its tests and samples, and various host tools.\n\n### macOS\n\nTo compile Filament you must have the most recent version of Xcode installed and you need to\nmake sure the command line tools are setup by running:\n\n```shell\nxcode-select --install\n```\n\nIf you wish to run the Vulkan backend instead of the default Metal backend, you must install\nthe LunarG SDK, enable \"System Global Components\", and reboot your machine.\n\nThen run `cmake` and `ninja` to trigger a build:\n\n```shell\nmkdir out/cmake-release\ncd out/cmake-release\ncmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../release/filament ../..\nninja\n```\n\n### iOS\n\nThe easiest way to build Filament for iOS is to use `build.sh` and the\n`-p ios` flag. For instance to build the debug target:\n\n```shell\n./build.sh -p ios debug\n```\n\nSee [ios/samples/README.md](./ios/samples/README.md) for more information.\n\n### Windows\n\n#### Building on Windows with Visual Studio 2019 or later\n\nInstall the following components:\n\n- [Visual Studio 2019 or later](https://www.visualstudio.com/downloads)\n- [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/)\n- [Python 3.7](https://www.python.org/ftp/python/3.7.0/python-3.7.0.exe)\n- [CMake 3.14 or later](https://github.com/Kitware/CMake/releases/download/v3.14.7/cmake-3.14.7-win64-x64.msi)\n\nThe latest Windows SDK can also be installed by opening Visual Studio and selecting _Get Tools and\nFeatures..._ under the _Tools_ menu.\n\nBy default, Windows treats the file system as case insensitive. Please do not enable case\nsensitivity in your repo, since this does not align with CMake expectations. This can be queried\nusing `fsutil.exe file queryCaseSensitiveInfo`.\n\nNext, open `x64 Native Tools Command Prompt for VS 2019`, create a working directory, and run\nCMake in it:\n\n```bat\nmkdir out\ncd out\ncmake ..\n```\n\nOpen the generated solution file `TNT.sln` in Visual Studio.\n\nTo build all targets, run _Build Solution_ from the _Build_ menu. Alternatively, right click on a\ntarget in the _Solution Explorer_ and choose _Build_ to build a specific target.\n\nFor example, build the `material_sandbox` sample and run it from the `out` directory with:\n\n```bat\nsamples\\Debug\\material_sandbox.exe ..\\assets\\models\\monkey\\monkey.obj\n```\n\nYou can also use CMake to invoke the build without opening Visual Studio. For example, from the\n`out` folder run the following command.\n\n```bat\ncmake --build . --target gltf_viewer --config Release\n```\n\n### Android\n\nBefore building Filament for Android, make sure to build Filament for your host. Some of the\nhost tools are required to successfully build for Android.\n\nFilament can be built for the following architectures:\n\n- ARM 64-bit (`arm64-v8a`)\n- ARM 32-bit (`armeabi-v7a`)\n- Intel 64-bit (`x86_64`)\n- Intel 32-bit (`x86`)\n\nNote that the main target is the ARM 64-bit target. Our implementation is optimized first and\nforemost for `arm64-v8a`.\n\nTo build Android on Windows machines, see [android/Windows.md](android/Windows.md).\n\n#### Easy Android build\n\nThe easiest way to build Filament for Android is to use `build.sh` and the\n`-p android` flag. For instance to build the release target:\n\n```shell\n./build.sh -p android release\n```\n\nRun `build.sh -h` for more information.\n\n#### Manual builds\n\nInvoke CMake in a build directory of your choice, inside of filament's directory. The commands\nbelow show how to build Filament for ARM 64-bit (`aarch64`).\n\n```shell\nmkdir out/android-build-release-aarch64\ncd out/android-build-release-aarch64\ncmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=../../build/toolchain-aarch64-linux-android.cmake \\\n      -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../android-release/filament ../..\n```\n\nAnd then invoke `ninja`:\n\n```shell\nninja install\n```\n\nor\n\n```shell\nninja install/strip\n```\n\nThis will generate Filament's Android binaries in `out/android-release`. This location is important\nto build the Android Studio projects located in `filament/android`. After install, the library\nbinaries should be found in `out/android-release/filament/lib/arm64-v8a`.\n\n#### AAR\n\nBefore you attempt to build the AAR, make sure you've compiled and installed the native libraries\nas explained in the sections above. You must have the following ABIs built in\n`out/android-release/filament/lib/`:\n\n- `arm64-v8a`\n- `armeabi-v7a`\n- `x86_64`\n- `x86`\n\nTo build Filament's AAR simply open the Android Studio project in `android/`. The\nAAR is a universal AAR that contains all supported build targets:\n\n- `arm64-v8a`\n- `armeabi-v7a`\n- `x86_64`\n- `x86`\n\nTo filter out unneeded ABIs, rely on the `abiFilters` of the project that links against Filament's\nAAR.\n\nAlternatively you can build the AAR from the command line by executing the following in the\n`android/` directory:\n\n```shell\n./gradlew -Pcom.google.android.filament.dist-dir=../../out/android-release/filament assembleRelease\n```\n\nThe `-Pcom.google.android.filament.dist-dir` can be used to specify a different installation\ndirectory (it must match the CMake install prefix used in the previous steps).\n\n#### Using Filament's AAR\n\nCreate a new module in your project and select _Import .JAR or .AAR Package_ when prompted. Make\nsure to add the newly created module as a dependency to your application.\n\nIf you do not wish to include all supported ABIs, make sure to create the appropriate flavors in\nyour Gradle build file. For example:\n\n```gradle\nflavorDimensions 'cpuArch'\nproductFlavors {\n    arm8 {\n        dimension 'cpuArch'\n        ndk {\n            abiFilters 'arm64-v8a'\n        }\n    }\n    arm7 {\n        dimension 'cpuArch'\n        ndk {\n            abiFilters 'armeabi-v7a'\n        }\n    }\n    x86_64 {\n        dimension 'cpuArch'\n        ndk {\n            abiFilters 'x86_64'.\n        }\n    }\n    x86 {\n        dimension 'cpuArch'\n        ndk {\n            abiFilters 'x86'\n        }\n    }\n    universal {\n        dimension 'cpuArch'\n    }\n}\n```\n\n### WebAssembly\n\nThe core Filament library can be cross-compiled to WebAssembly from either macOS or Linux. To get\nstarted, follow the instructions for building Filament on your platform ([macOS](#macos) or\n[linux](#linux)), which will ensure you have the proper dependencies installed.\n\nNext, you need to install the Emscripten SDK. The following instructions show how to install the\nsame version that our continuous builds use.\n\n```shell\ncd <your chosen parent folder for the emscripten SDK>\ncurl -L https://github.com/emscripten-core/emsdk/archive/refs/tags/3.1.15.zip > emsdk.zip\nunzip emsdk.zip ; mv emsdk-* emsdk ; cd emsdk\npython ./emsdk.py install latest\npython ./emsdk.py activate latest\nsource ./emsdk_env.sh\n```\n\nAfter this you can invoke the [easy build](#easy-build) script as follows:\n\n```shell\nexport EMSDK=<your chosen home for the emscripten SDK>\n./build.sh -p webgl release\n```\n\nThe EMSDK variable is required so that the build script can find the Emscripten SDK. The build\ncreates a `samples` folder that can be used as the root of a simple static web server. Note that you\ncannot open the HTML directly from the filesystem due to CORS. We recommend using the emrun tool\nto create a quick localhost server:\n\n```shell\nemrun out/cmake-webgl-release/web/samples --no_browser --port 8000\n```\n\nYou can then open http://localhost:8000/suzanne.html in your web browser.\n\nAlternatively, if you have node installed you can use the\n[live-server](https://www.npmjs.com/package/live-server) package, which automatically refreshes the\nweb page when it detects a change.\n\nEach sample app has its own handwritten html file. Additionally the server folder contains assets\nsuch as meshes, textures, and materials.\n\n## Running the native samples\n\nThe `samples/` directory contains several examples of how to use Filament with SDL2.\n\nSome of the samples accept FBX/OBJ meshes while others rely on the `filamesh` file format. To\ngenerate a `filamesh ` file from an FBX/OBJ asset, run the `filamesh` tool\n(`./tools/filamesh/filamesh` in your build directory):\n\n```shell\nfilamesh ./assets/models/monkey/monkey.obj monkey.filamesh\n```\n\nMost samples accept an IBL that must be generated using the `cmgen` tool (`./tools/filamesh/cmgen`\nin your build directory). These sample apps expect a path to a directory containing the `.rgb32f`\nfiles for the IBL (which are PNGs containing `R11F_G11F_B10F` data) or a path to a directory\ncontaining two `.ktx` files (one for the IBL itself, one for the skybox). To generate an IBL\nsimply use this command:\n\n```shell\ncmgen -f ktx -x ./ibls/ my_ibl.exr\n```\n\nThe source environment map can be a PNG (8 or 16 bit), a PSD (16 or 32 bit), an HDR or an OpenEXR\nfile. The environment map can be an equirectangular projection, a horizontal cross, a vertical\ncross, or a list of cubemap faces (horizontal or vertical).\n\n`cmgen` will automatically create a directory based on the name of the source environment map. In\nthe example above, the final directory will be `./ibls/my_ibl/`. This directory should contain the\npre-filtered environment map (one file per cubemap face and per mip level), the environment map\ntexture for the skybox and a text file containing the level harmonics for indirect diffuse\nlighting.\n\nIf you prefer a blurred background, run `cmgen` with this flag: `--extract-blur=0.1`. The numerical\nvalue is the desired roughness between 0 and 1.\n\n## Generating C++ documentation\n\nTo generate the documentation you must first install `doxygen` and `graphviz`, then run the\nfollowing commands:\n\n```shell\ncd filament/filament\ndoxygen docs/doxygen/filament.doxygen\n```\n\nFinally simply open `docs/html/index.html` in your web browser.\n\n## Software Rasterization\n\nWe have tested swiftshader and Mesa for software rasterization on the Vulkan/GL backends.\n\nTo use this for Vulkan, please first make sure that the [Vulkan SDK](https://www.lunarg.com/vulkan-sdk/) is\ninstalled on your machine. If you are doing a manual installation of the SDK on Linux, you will have\nto source `setup-env.sh` in the SDK's root folder to make sure the Vulkan loader is the first lib loaded.\n\n### Swiftshader (Vulkan) [tested on macOS and Linux]\n\nFirst, build SwiftShader\n\n```shell\ngit clone https://github.com/google/swiftshader.git\ncd swiftshader/build\ncmake .. &&  make -j\n```\n\nand then set `VK_ICD_FILENAMES` to the ICD json produced in the build. For example,\n```shell\nexport VK_ICD_FILENAMES=/Users/user/swiftshader/build/Darwin/vk_swiftshader_icd.json\n```\n\nBuild and run Filament as usual and specify the Vulkan backend when creating the Engine.\n\n### Mesa's LLVMPipe (GL) and Lavapipe (Vulkan) [tested on Linux]\n\nWe will only cover steps that build Mesa from source. The official documentation of Mesa mentioned\nthat in general precompiled libraries [are **not** made available](https://docs.mesa3d.org/precompiled.html).\n\nDownload the repo and make sure you have the build depedencies. For example (assuming an Ubuntu/Debian distro),\n```shell\ngit clone https://gitlab.freedesktop.org/mesa/mesa.git\nsudo apt-get build-dep mesa\n```\n\nTo build both the GL and Vulkan rasterizers,\n\n```shell\ncd mesa\nmkdir -p out\nmeson setup builddir/ -Dprefix=$(pwd)/out -Dglx=xlib -Dgallium-drivers=swrast -Dvulkan-drivers=swrast\nmeson install -C builddir/\n```\n\nFor GL, we need to ensure that we load the GL lib from the mesa output directory.  For example, to run\nthe debug `gltf_viewer`, we would execute\n```shell\nLD_LIBRARY_PATH=/Users/user/mesa/out/lib/x86_64-linux-gnu \\\n    ./out/cmake-debug/samples/gltf_viewer -a opengl\n```\n\nFor Vulkan, we need to set the path to the ICD json, which tells the loader where to find the driver\nlibrary. To run `gltf_viewer`, we would execute\n```shell\nVK_ICD_FILENAMES=/Users/user/mesa/out/share/vulkan/icd.d/lvp_icd.x86_64.json \\\n    ./out/cmake-debug/samples/gltf_viewer -a vulkan\n\n```\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 33.3798828125,
          "content": "# ==================================================================================================\n# CMake\n# ==================================================================================================\ncmake_minimum_required(VERSION 3.19)\n\n# ==================================================================================================\n# Toolchain configuration\n# ==================================================================================================\nif (APPLE AND NOT IOS)\n    # This must be set before project() is called\n    set(CMAKE_OSX_DEPLOYMENT_TARGET 10.15 CACHE STRING \"\")\nendif()\n\n# ==================================================================================================\n# Project declaration\n# ==================================================================================================\nproject(TNT)\n\n# ==================================================================================================\n# Options\n# ==================================================================================================\noption(FILAMENT_USE_EXTERNAL_GLES3 \"Experimental: Compile Filament against OpenGL ES 3\" OFF)\n\noption(FILAMENT_ENABLE_LTO \"Enable link-time optimizations if supported by the compiler\" OFF)\n\noption(FILAMENT_SKIP_SAMPLES \"Don't build samples\" OFF)\n\noption(FILAMENT_SUPPORTS_XCB \"Include XCB support in Linux builds\" ON)\n\noption(FILAMENT_SUPPORTS_XLIB \"Include XLIB support in Linux builds\" ON)\n\noption(FILAMENT_SUPPORTS_EGL_ON_LINUX \"Use EGL for OpenGL in Linux builds\" OFF)\n\noption(FILAMENT_SUPPORTS_WAYLAND \"Include Wayland support in Linux builds\" OFF)\n\noption(FILAMENT_SKIP_SDL2 \"Skip dependencies of SDL2, and SDL2\" OFF)\n\noption(FILAMENT_LINUX_IS_MOBILE \"Treat Linux as Mobile\" OFF)\n\noption(FILAMENT_ENABLE_ASAN_UBSAN \"Enable Address and Undefined Behavior Sanitizers\" OFF)\n\noption(FILAMENT_ENABLE_TSAN \"Enable Thread Sanitizer\" OFF)\n\noption(FILAMENT_ENABLE_FEATURE_LEVEL_0 \"Enable Feature Level 0\" ON)\n\noption(FILAMENT_ENABLE_MULTIVIEW \"Enable multiview for Filament\" OFF)\n\noption(FILAMENT_SUPPORTS_OSMESA \"Enable OSMesa (headless GL context) for Filament\" OFF)\n\nset(FILAMENT_NDK_VERSION \"\" CACHE STRING\n    \"Android NDK version or version prefix to be used when building for Android.\"\n)\n\nset(FILAMENT_PER_RENDER_PASS_ARENA_SIZE_IN_MB \"3\" CACHE STRING\n    \"Per render pass arena size. Must be roughly 1 MB larger than FILAMENT_PER_FRAME_COMMANDS_SIZE_IN_MB, default 3.\"\n)\n\nset(FILAMENT_PER_FRAME_COMMANDS_SIZE_IN_MB \"2\" CACHE STRING\n    \"Size of the high-level draw commands buffer. Rule of thumb, 1 MB less than FILAMENT_PER_RENDER_PASS_ARENA_SIZE_IN_MB, default 2.\"\n)\n\nset(FILAMENT_MIN_COMMAND_BUFFERS_SIZE_IN_MB \"2\" CACHE STRING\n    \"Size of the command-stream buffer. As a rule of thumb use the same value as FILAMENT_PER_FRRAME_COMMANDS_SIZE_IN_MB, default 2.\"\n)\n\nset(FILAMENT_OPENGL_HANDLE_ARENA_SIZE_IN_MB \"4\" CACHE STRING\n    \"Size of the OpenGL handle arena, default 4.\"\n)\n\nset(FILAMENT_METAL_HANDLE_ARENA_SIZE_IN_MB \"8\" CACHE STRING\n    \"Size of the Metal handle arena, default 8.\"\n)\n\nset(FILAMENT_BACKEND_DEBUG_FLAG \"\" CACHE STRING\n    \"A debug flag meant for enabling/disabling backend debugging paths\"\n)\n\nset(FILAMENT_OSMESA_PATH \"\" CACHE STRING\n    \"Path to the OSMesa header and lib\"\n)\n\n# Enable exceptions by default in spirv-cross.\nset(SPIRV_CROSS_EXCEPTIONS_TO_ASSERTIONS OFF)\n\n# ==================================================================================================\n# CMake policies\n# ==================================================================================================\nif (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.12\")\n    cmake_policy(SET CMP0074 NEW)\nendif()\n\n# ==================================================================================================\n# Support for ccache\n# ==================================================================================================\nfind_program(CCACHE_PROGRAM ccache)\nif (CCACHE_PROGRAM)\n    if (WIN32)\n        set(CMAKE_C_COMPILER_LAUNCHER   \"${CCACHE_PROGRAM}\")\n        set(CMAKE_CXX_COMPILER_LAUNCHER \"${CCACHE_PROGRAM}\")\n    else()\n        set(C_LAUNCHER   \"${CCACHE_PROGRAM}\")\n        set(CXX_LAUNCHER \"${CCACHE_PROGRAM}\")\n\n        configure_file(build/launch-c.in   launch-c)\n        configure_file(build/launch-cxx.in launch-cxx)\n\n        execute_process(COMMAND chmod a+rx\n            \"${CMAKE_CURRENT_BINARY_DIR}/launch-c\"\n            \"${CMAKE_CURRENT_BINARY_DIR}/launch-cxx\"\n        )\n\n        if (CMAKE_GENERATOR STREQUAL \"Xcode\")\n            set(CMAKE_XCODE_ATTRIBUTE_CC         \"${CMAKE_CURRENT_BINARY_DIR}/launch-c\")\n            set(CMAKE_XCODE_ATTRIBUTE_CXX        \"${CMAKE_CURRENT_BINARY_DIR}/launch-cxx\")\n            set(CMAKE_XCODE_ATTRIBUTE_LD         \"${CMAKE_CURRENT_BINARY_DIR}/launch-c\")\n            set(CMAKE_XCODE_ATTRIBUTE_LDPLUSPLUS \"${CMAKE_CURRENT_BINARY_DIR}/launch-cxx\")\n        else()\n            set(CMAKE_C_COMPILER_LAUNCHER        \"${CMAKE_CURRENT_BINARY_DIR}/launch-c\")\n            set(CMAKE_CXX_COMPILER_LAUNCHER      \"${CMAKE_CURRENT_BINARY_DIR}/launch-cxx\")\n        endif()\n    endif()\nendif()\n\n# ==================================================================================================\n# Support Vim and Visual Studio Code by generating compile_commands.json\n# ==================================================================================================\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\n# ==================================================================================================\n# OS specific\n# ==================================================================================================\nif (UNIX AND NOT APPLE AND NOT ANDROID AND NOT WEBGL)\n    set(LINUX TRUE)\nelse()\n    # since cmake 3.25 LINUX is automatically set based on CMAKE_SYSTEM_NAME, which the android\n    # cmake files are setting to \"Linux\".\n    set(LINUX FALSE)\nendif()\n\nif (LINUX)\n    if (NOT FILAMENT_OSMESA_PATH STREQUAL \"\")\n        if (NOT EXISTS ${FILAMENT_OSMESA_PATH}/)\n            message(FATAL_ERROR \"Cannot find specified OSMesa build directory: ${FILAMENT_OSMESA_PATH}\")\n        endif()\n        set(FILAMENT_SUPPORTS_OSMESA TRUE)\n    endif()\n\n    if (FILAMENT_SUPPORTS_WAYLAND)\n        add_definitions(-DFILAMENT_SUPPORTS_WAYLAND)\n        set(FILAMENT_SUPPORTS_X11 FALSE)\n    elseif (FILAMENT_SUPPORTS_EGL_ON_LINUX)\n        add_definitions(-DFILAMENT_SUPPORTS_EGL_ON_LINUX)\n        set(FILAMENT_SUPPORTS_X11 FALSE)\n    elseif (FILAMENT_SUPPORTS_OSMESA)\n        set(FILAMENT_SUPPORTS_X11 FALSE)\n        add_definitions(-DFILAMENT_SUPPORTS_OSMESA)\n    else ()\n        if (FILAMENT_SUPPORTS_XCB)\n            add_definitions(-DFILAMENT_SUPPORTS_XCB)\n        endif()\n\n        if (FILAMENT_SUPPORTS_XLIB)\n            add_definitions(-DFILAMENT_SUPPORTS_XLIB)\n        endif()\n\n        if (FILAMENT_SUPPORTS_XCB OR FILAMENT_SUPPORTS_XLIB)\n            add_definitions(-DFILAMENT_SUPPORTS_X11)\n            set(FILAMENT_SUPPORTS_X11 TRUE)\n        endif()\n    endif()\nendif()\n\nif (ANDROID OR WEBGL OR IOS OR FILAMENT_LINUX_IS_MOBILE)\n    set(IS_MOBILE_TARGET TRUE)\nendif()\n\nif (ANDROID)\n    add_definitions(-D__ANDROID_UNAVAILABLE_SYMBOLS_ARE_WEAK__)\nendif()\n\nif (NOT ANDROID AND NOT WEBGL AND NOT IOS AND NOT FILAMENT_LINUX_IS_MOBILE)\n    set(IS_HOST_PLATFORM TRUE)\nendif()\n\nif (WIN32)\n    # Link statically against c/c++ lib to avoid missing redistriburable such as\n    # \"VCRUNTIME140.dll not found. Try reinstalling the app.\", but give users\n    # a choice to opt for the shared runtime if they want.\n    option(USE_STATIC_CRT \"Link against the static runtime libraries.\" ON)\n\n    # On Windows we need to instruct cmake to generate the .def in order to get the .lib required\n    # when linking against dlls. CL.EXE will not generate .lib without .def file (or without pragma\n    # __declspec(dllexport) in front of each functions).\n    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n\n    # The CMAKE_CXX_FLAGS vars can be overriden by some Visual Studio generators, so we use an alternative\n    # global method here:\n    if (${USE_STATIC_CRT})\n        add_compile_options(\n            $<$<CONFIG:>:/MT>\n            $<$<CONFIG:Debug>:/MTd>\n            $<$<CONFIG:Release>:/MT>\n        )\n    else()\n        add_compile_options(\n            $<$<CONFIG:>:/MD>\n            $<$<CONFIG:Debug>:/MDd>\n            $<$<CONFIG:Release>:/MD>\n        )\n    endif()\n\n    # TODO: Figure out why pdb generation messes with incremental compilaton.\n    # IN RELEASE_WITH_DEBUG_INFO, generate debug info in .obj, no in pdb.\n    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /Z7\")\n    set(CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO} /Z7\")\n\n    # In RELEASE, also generate PDBs.\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /Zi\")\n    set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /Zi\")\n\n    # In DEBUG, avoid generating a PDB file which seems to mess with incremental compilation.\n    # Instead generate debug info directly inside obj files.\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /Z7\")\n    set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /Z7\")\n\n    # Special settings when building on CI.\n    if (${FILAMENT_WINDOWS_CI_BUILD})\n        set(LinkerFlags\n            CMAKE_SHARED_LINKER_FLAGS_DEBUG\n            CMAKE_EXE_LINKER_FLAGS_DEBUG\n            CMAKE_MODULE_LINKER_FLAGS_DEBUG\n            )\n        foreach(LinkerFlag ${LinkerFlags})\n            # The /debug flag outputs .pdb files, which we don't need on CI.\n            string(REPLACE \"/debug\" \"\" ${LinkerFlag} ${${LinkerFlag}})\n\n            # The /INCREMENTAL flag outputs .ilk files for incremental linking. These are huge, and\n            # we don't need them on CI.\n            string(REPLACE \"/INCREMENTAL\" \"/INCREMENTAL:NO\" ${LinkerFlag} ${${LinkerFlag}})\n        endforeach()\n\n        # We turn off compile-time optimizations for CI, as options that speed up the compile-time\n        # (e.g. /MP) might increase memory usage, leading to instabilities on limited CI machines.\n        option(FILAMENT_SHORTEN_MSVC_COMPILATION \"Shorten compile-time in Visual Studio\" OFF)\n    else()\n        option(FILAMENT_SHORTEN_MSVC_COMPILATION \"Shorten compile-time in Visual Studio\" ON)\n    endif()\n\n    if (MSVC)\n        if (FILAMENT_SHORTEN_MSVC_COMPILATION)\n            # enable multi-processor compilation\n            set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")\n            # disable run-time STL checks to improve tools (e.g. matc) performance\n            set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /D_ITERATOR_DEBUG_LEVEL=0\")\n        endif()\n    endif()\nendif()\n\n# ==================================================================================================\n#  Paths\n# ==================================================================================================\n# Where our external libs are\nset(EXTERNAL ${CMAKE_CURRENT_SOURCE_DIR}/third_party)\n\n# Where our libraries are\nset(LIBRARIES ${CMAKE_CURRENT_SOURCE_DIR}/libs)\n\n# Where our filament code is\nset(FILAMENT ${CMAKE_CURRENT_SOURCE_DIR})\n\n# Where our tools are\nset(TOOLS ${CMAKE_CURRENT_SOURCE_DIR}/tools)\n\n# ==================================================================================================\n# Compiler check\n# ==================================================================================================\nset(MIN_CLANG_VERSION \"6.0\")\n\nif (CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    if (CMAKE_C_COMPILER_VERSION VERSION_LESS MIN_CLANG_VERSION)\n        message(FATAL_ERROR \"Detected C compiler Clang ${CMAKE_C_COMPILER_VERSION} < ${MIN_CLANG_VERSION}\")\n    endif()\nelseif (NOT MSVC)\n    message(FATAL_ERROR \"Detected C compiler ${CMAKE_C_COMPILER_ID} is unsupported\")\nendif()\n\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS MIN_CLANG_VERSION)\n        message(FATAL_ERROR \"Detected CXX compiler Clang ${CMAKE_CXX_COMPILER_VERSION} < ${MIN_CLANG_VERSION}\")\n    endif()\nelseif (NOT MSVC)\n    message(FATAL_ERROR \"Detected CXX compiler ${CMAKE_CXX_COMPILER_ID} is unsupported\")\nendif()\n\n# Detect use of the clang-cl.exe frontend, which does not support all of clangs normal options\nif (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n    if (\"${CMAKE_CXX_SIMULATE_ID}\" STREQUAL \"MSVC\")\n        message(FATAL_ERROR \"Building with Clang on Windows is no longer supported. Use MSVC 2019 instead.\")\n    endif()\nendif()\n\n# ==================================================================================================\n# Link time optimizations (LTO)\n# ==================================================================================================\nif (FILAMENT_ENABLE_LTO)\n    include(CheckIPOSupported)\n\n    check_ipo_supported(RESULT IPO_SUPPORT)\n\n    if (IPO_SUPPORT)\n        message(STATUS \"LTO support is enabled\")\n        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\n    endif()\nendif()\n\n# ==================================================================================================\n# General compiler flags\n# ==================================================================================================\nset(CXX_STANDARD \"-std=c++17\")\nif (WIN32)\n    set(CXX_STANDARD \"/std:c++17\")\nendif()\n\nif (MSVC)\n    set(CXX_STANDARD \"/std:c++latest\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CXX_STANDARD} /W0 /Zc:__cplusplus\")\nelse()\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CXX_STANDARD} -fstrict-aliasing -Wno-unknown-pragmas -Wno-unused-function -Wno-deprecated-declarations\")\nendif()\n\nif (FILAMENT_USE_EXTERNAL_GLES3)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DUSE_EXTERNAL_GLES3\")\nendif()\n\nif (FILAMENT_SUPPORTS_EGL_ON_LINUX)\n  set(EGL TRUE)\nendif()\n\nif (WIN32)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D_USE_MATH_DEFINES=1\")\nendif()\n\nif (LINUX)\n    option(USE_STATIC_LIBCXX \"Link against the static runtime libraries.\" ON)\n    if (${USE_STATIC_LIBCXX})\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++\")\n        link_libraries(\"-static-libgcc -static-libstdc++\")\n        link_libraries(libc++.a)\n        link_libraries(libc++abi.a)\n    endif()\n\n    # Only linux, clang doesn't want to use a shared library that is not PIC.\n    # /usr/bin/ld: ../bluegl/libbluegl.a(BlueGL.cpp.o): relocation R_X86_64_32S\n    # against `.bss' can not be used when making a shared object; recompile with -fPIC\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC\")\nendif()\n\nif (ANDROID)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC -Werror=unguarded-availability\")\nendif()\n\nif (CYGWIN)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-exceptions -fno-rtti\")\n    set(SPIRV_CROSS_EXCEPTIONS_TO_ASSERTIONS ON)\nendif()\n\nif (MSVC)\n    # Since the \"secure\" replacements that MSVC suggests are not portable, disable\n    # the deprecation warnings. Also disable warnings about use of POSIX functions (i.e. \"unlink\").\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE\")\nendif()\n\n# Add colors to ninja builds\nif (UNIX AND CMAKE_GENERATOR STREQUAL \"Ninja\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fcolor-diagnostics\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fcolor-diagnostics\")\nendif()\n\n# Use hidden by default and expose what we need.\nif (NOT WIN32)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fvisibility=hidden\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility=hidden\")\nendif()\n\n# ==================================================================================================\n# Release compiler flags\n# ==================================================================================================\nif (NOT MSVC AND NOT IOS)\n    # Omitting stack frame pointers prevents the generation of readable stack traces in crash reports on iOS\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -fomit-frame-pointer\")\nendif()\n\nif (NOT MSVC)\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -ffunction-sections -fdata-sections\")\nendif()\n\n# On Android RELEASE builds, we disable exceptions and RTTI to save some space (about 75 KiB\n# saved by -fno-exception and 10 KiB saved by -fno-rtti).\nif (ANDROID OR IOS OR WEBGL)\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -fno-exceptions -fno-rtti\")\n    set(SPIRV_CROSS_EXCEPTIONS_TO_ASSERTIONS ON)\n\n    if (ANDROID OR WEBGL)\n        # Omitting unwind info prevents the generation of readable stack traces in crash reports on iOS\n        set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -fno-unwind-tables -fno-asynchronous-unwind-tables\")\n    endif()\nendif()\n\n# Turn off exceptions on iOS debug as well. This fixes an availability error we see when using\n# std::visit, which is not supported on iOS 11.0 when exceptions are enabled.\nif (IOS)\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -fno-exceptions\")\n    set(SPIRV_CROSS_EXCEPTIONS_TO_ASSERTIONS ON)\nendif()\n\n# With WebGL, we disable RTTI even for debug builds because we pass emscripten::val back and forth\n# between C++ and JavaScript in order to efficiently access typed arrays, which are unbound.\n# NOTE: This is not documented in emscripten so we should consider a different approach.\nif (WEBGL)\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -fno-rtti\")\nendif()\n\nif (WEBGL_PTHREADS)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread\")\nendif()\n\n# ==================================================================================================\n# Debug compiler flags\n# ==================================================================================================\nif (FILAMENT_ENABLE_ASAN_UBSAN)\n   set(EXTRA_SANITIZE_OPTIONS \"-fsanitize=address -fsanitize=undefined\")\nendif()\nif (FILAMENT_ENABLE_TSAN)\n   set(EXTRA_SANITIZE_OPTIONS \"-fsanitize=thread\")\nendif()\nif (ANDROID)\n    # keep STL debug infos (mimics what the NDK does)\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -fno-limit-debug-info\")\nendif()\nif (NOT MSVC AND NOT WEBGL)\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -fstack-protector\")\nendif()\nset(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} ${EXTRA_SANITIZE_OPTIONS}\")\n\n# Disable the stack check for macOS to workaround a known issue in clang 11.0.0.\n# See: https://forums.developer.apple.com/thread/121887\nif (APPLE)\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE}  -fno-stack-check\")\nendif()\n\n# ==================================================================================================\n# Linker flags\n# ==================================================================================================\n# Strip unused sections\nif (NOT WEBGL)\n    set(GC_SECTIONS \"-Wl,--gc-sections\")\nendif()\n\nset(B_SYMBOLIC_FUNCTIONS \"-Wl,-Bsymbolic-functions\")\n\nif (ANDROID)\nset(BINARY_ALIGNMENT \"-Wl,-z,max-page-size=16384\")\nendif()\n\nif (APPLE)\n    set(GC_SECTIONS \"-Wl,-dead_strip\")\n    set(B_SYMBOLIC_FUNCTIONS \"\")\n\n    # tell ranlib to ignore empty compilation units\n    set(CMAKE_C_ARCHIVE_FINISH   \"<CMAKE_RANLIB> -no_warning_for_no_symbols <TARGET>\")\n    set(CMAKE_CXX_ARCHIVE_FINISH \"<CMAKE_RANLIB> -no_warning_for_no_symbols <TARGET>\")\n    # prevents ar from invoking ranlib, let CMake do it\n    set(CMAKE_C_ARCHIVE_CREATE   \"<CMAKE_AR> qc -S <TARGET> <LINK_FLAGS> <OBJECTS>\")\n    set(CMAKE_CXX_ARCHIVE_CREATE \"<CMAKE_AR> qc -S <TARGET> <LINK_FLAGS> <OBJECTS>\")\nendif()\n\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${GC_SECTIONS}\")\nset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} ${GC_SECTIONS} ${B_SYMBOLIC_FUNCTIONS} ${BINARY_ALIGNMENT}\")\n\nif (WEBGL_PTHREADS)\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -pthread\")\nendif()\n\n# ==================================================================================================\n# Project flags\n# ==================================================================================================\n# Debug modes only\nif (CMAKE_BUILD_TYPE STREQUAL \"Debug\" OR CMAKE_BUILD_TYPE STREQUAL \"RelWithDebInfo\")\n    set(TNT_DEV true)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DTNT_DEV\")\nendif()\n\n# By default, build with support for OpenGL on all platforms.\noption(FILAMENT_SUPPORTS_OPENGL \"Include the OpenGL backend\" ON)\nif (FILAMENT_SUPPORTS_OPENGL)\n    add_definitions(-DFILAMENT_SUPPORTS_OPENGL)\nendif()\n\n# By default, build with Vulkan support on desktop platforms, although clients must request to use\n# it at run time.\nif (WIN32 OR WEBGL OR IOS)\n    option(FILAMENT_SUPPORTS_VULKAN \"Include the Vulkan backend\" OFF)\nelse()\n    option(FILAMENT_SUPPORTS_VULKAN \"Include the Vulkan backend\" ON)\nendif()\nif (FILAMENT_SUPPORTS_VULKAN)\n    add_definitions(-DFILAMENT_DRIVER_SUPPORTS_VULKAN)\nendif()\n\n# Build with Metal support on non-WebGL Apple platforms.\nif (APPLE AND NOT WEBGL)\n    option(FILAMENT_SUPPORTS_METAL \"Include the Metal backend\" ON)\nelse()\n    option(FILAMENT_SUPPORTS_METAL \"Include the Metal backend\" OFF)\nendif()\nif (FILAMENT_SUPPORTS_METAL)\n    add_definitions(-DFILAMENT_SUPPORTS_METAL)\nendif()\n\n# Building filamat increases build times and isn't required for web, so turn it off by default.\nif (NOT WEBGL)\n    option(FILAMENT_BUILD_FILAMAT \"Build filamat and JNI buildings\" ON)\nelse()\n    option(FILAMENT_BUILD_FILAMAT \"Build filamat and JNI buildings\" OFF)\nendif()\n\n# By default, link in matdbg/fgviewer for Desktop + Debug only since it pulls in filamat and a web server.\nif (CMAKE_BUILD_TYPE STREQUAL \"Debug\" AND IS_HOST_PLATFORM)\n    option(FILAMENT_ENABLE_MATDBG \"Enable the material debugger\" ON)\n    # TODO: Uncomment below when fgviewer is ready\n    # option(FILAMENT_ENABLE_FGVIEWER \"Enable the frame graph viewer\" ON)\nelse()\n    option(FILAMENT_ENABLE_MATDBG \"Enable the material debugger\" OFF)\n    option(FILAMENT_ENABLE_FGVIEWER \"Enable the frame graph viewer\" OFF)\nendif()\n\n# Only optimize materials in Release mode (so error message lines match the source code)\nif (CMAKE_BUILD_TYPE MATCHES Release)\n    option(FILAMENT_DISABLE_MATOPT \"Disable material optimizations\" OFF)\nelse()\n    option(FILAMENT_DISABLE_MATOPT \"Disable material optimizations\" ON)\nendif()\n\n# This only affects the prebuilt shader files in gltfio and samples, not filament library.\n# The value can be either \"instanced\", \"multiview\", or \"none\"\nset(FILAMENT_SAMPLES_STEREO_TYPE \"none\" CACHE STRING\n    \"Stereoscopic type that shader files in gltfio and samples are built for.\"\n)\nstring(TOLOWER \"${FILAMENT_SAMPLES_STEREO_TYPE}\" FILAMENT_SAMPLES_STEREO_TYPE)\nif (NOT FILAMENT_SAMPLES_STEREO_TYPE STREQUAL \"instanced\"\n    AND NOT FILAMENT_SAMPLES_STEREO_TYPE STREQUAL \"multiview\"\n    AND NOT FILAMENT_SAMPLES_STEREO_TYPE STREQUAL \"none\")\n    message(FATAL_ERROR \"Invalid stereo type: \\\"${FILAMENT_SAMPLES_STEREO_TYPE}\\\" choose either \\\"instanced\\\",  \\\"multiview\\\", or \\\"none\\\" \")\nendif ()\n\n# Compiling samples for multiview implies enabling multiview feature as well.\nif (FILAMENT_SAMPLES_STEREO_TYPE STREQUAL \"multiview\")\n    set(FILAMENT_ENABLE_MULTIVIEW ON)\nendif ()\n\n# Define backend flag for debug only\nif (CMAKE_BUILD_TYPE STREQUAL \"Debug\" AND NOT FILAMENT_BACKEND_DEBUG_FLAG STREQUAL \"\")\n    add_definitions(-DFILAMENT_BACKEND_DEBUG_FLAG=${FILAMENT_BACKEND_DEBUG_FLAG})\n    unset(FILAMENT_BACKEND_DEBUG_FLAG)\nendif()\n\n# ==================================================================================================\n# Material compilation flags\n# ==================================================================================================\n\n# Target system.\nif (IS_MOBILE_TARGET)\n    set(MATC_TARGET mobile)\nelse()\n    set(MATC_TARGET desktop)\nendif()\n\nset(MATC_API_FLAGS )\n\nif (FILAMENT_SUPPORTS_OPENGL)\n    set(MATC_API_FLAGS ${MATC_API_FLAGS} -a opengl)\nendif()\nif (FILAMENT_SUPPORTS_VULKAN)\n    set(MATC_API_FLAGS ${MATC_API_FLAGS} -a vulkan)\nendif()\nif (FILAMENT_SUPPORTS_METAL)\n    set(MATC_API_FLAGS ${MATC_API_FLAGS} -a metal)\nendif()\n\n# Disable ESSL 1.0 code generation.\nif (NOT FILAMENT_ENABLE_FEATURE_LEVEL_0)\n    set(MATC_API_FLAGS ${MATC_API_FLAGS} -1)\nendif()\n\n# Enable debug info (preserves names in SPIR-V)\nif (FILAMENT_ENABLE_MATDBG)\n    set(MATC_OPT_FLAGS ${MATC_OPT_FLAGS} -d)\nendif()\n\n# Disable optimizations\nif (FILAMENT_DISABLE_MATOPT)\n    set(MATC_OPT_FLAGS ${MATC_OPT_FLAGS} -g)\nendif()\n\nset(MATC_BASE_FLAGS ${MATC_API_FLAGS} -p ${MATC_TARGET} ${MATC_OPT_FLAGS})\n\n# ==================================================================================================\n# Distribution\n# ==================================================================================================\n# choose where to put the objects in the dist folder\nif (NOT DIST_ARCH)\n    # On Apple silicon, the value of CMAKE_HOST_SYSTEM_PROCESSOR varies based on the CMake process's\n    # own architecture. Because of this, running a x86_64 CMake binary on Apple silicon will cause\n    # DIST_ARCH to be set incorrectly.\n    set(DIST_ARCH \"${CMAKE_HOST_SYSTEM_PROCESSOR}\")\n\n    if (CMAKE_OSX_ARCHITECTURES MATCHES \".*;.*\")\n        set(DIST_ARCH \"universal\")\n    else()\n        if (NOT \"${CMAKE_OSX_ARCHITECTURES}\" STREQUAL \"\")\n            set(DIST_ARCH \"${CMAKE_OSX_ARCHITECTURES}\")\n        endif()\n    endif()\n\nendif()\n# On Windows machines, the host processor is set to 'AMD64', which we'll interpret as x86_64.\nstring(TOLOWER \"${DIST_ARCH}\" DIST_ARCH)\nstring(REPLACE \"amd64\" \"x86_64\" DIST_ARCH \"${DIST_ARCH}\")\nif (NOT DIST_DIR)\n    set(DIST_DIR \"${DIST_ARCH}\")\nendif()\n\n# ==================================================================================================\n# Functions\n# ==================================================================================================\n## The MSVC compiler has a limitation on literal string length which is reached when all the\n## licenses are concatenated together into a large string... so split them into multiple strings.\nfunction(list_licenses OUTPUT MODULES)\n    set(STR_OPENER \"R\\\"FILAMENT__(\")\n    set(STR_CLOSER \")FILAMENT__\\\"\")\n    set(CONTENT)\n    set(_MODULES ${MODULES} ${ARGN})\n    foreach(module ${_MODULES})\n        set(license_path \"../../third_party/${module}/LICENSE\")\n        get_filename_component(fullname \"${license_path}\" ABSOLUTE)\n        if(EXISTS ${fullname})\n            string(APPEND CONTENT \"${STR_OPENER}License and copyrights for ${module}:\\n${STR_CLOSER},\\n\")\n            file(READ ${license_path} license_long)\n            string(REPLACE \"\\n\" \"${STR_CLOSER},\\n${STR_OPENER}\" license ${license_long})\n            string(APPEND CONTENT ${STR_OPENER}${license}\\n${STR_CLOSER},)\n            string(APPEND CONTENT \"\\n\\n\")\n        else()\n            message(AUTHOR_WARNING \"${license_path} not found. You can ignore this warning if you have devendored ${module}.\")\n        endif()\n    endforeach()\n    configure_file(${FILAMENT}/build/licenses.inc.in ${OUTPUT})\nendfunction()\n\nset(COMBINE_SCRIPT \"${CMAKE_CURRENT_SOURCE_DIR}/build/linux/combine-static-libs.sh\")\nif (WIN32)\n    set(COMBINE_SCRIPT \"${CMAKE_CURRENT_SOURCE_DIR}/build/windows/combine-static-libs.bat\")\n    set(CMAKE_AR \"lib.exe\")\nendif()\n\n# Add a custom command to TARGET that combines the static libraries in DEPS into a single archive.\nfunction(combine_static_libs TARGET OUTPUT DEPS)\n    # Loop through the dependent libraries and query their location on disk.\n    set(DEPS_FILES )\n    foreach(DEPENDENCY ${DEPS})\n        if (TARGET ${DEPENDENCY})\n            get_property(dep_type TARGET ${DEPENDENCY} PROPERTY TYPE)\n            if (dep_type STREQUAL \"STATIC_LIBRARY\")\n                list(APPEND DEPS_FILES \"$<TARGET_FILE:${DEPENDENCY}>\")\n            endif()\n        endif()\n    endforeach()\n\n    add_custom_command(\n        TARGET ${TARGET} POST_BUILD\n        COMMAND \"${COMBINE_SCRIPT}\" \"${CMAKE_AR}\" \"${OUTPUT}\" ${DEPS_FILES}\n        COMMENT \"Combining ${target} dependencies into single shared library\"\n        VERBATIM\n    )\nendfunction()\n\n# ==================================================================================================\n# Configuration for CMAKE_CROSSCOMPILING.\n# ==================================================================================================\nif (WEBGL)\n    set(IMPORT_EXECUTABLES ${FILAMENT}/${IMPORT_EXECUTABLES_DIR}/ImportExecutables-Release.cmake)\nelse()\n    set(IMPORT_EXECUTABLES ${FILAMENT}/${IMPORT_EXECUTABLES_DIR}/ImportExecutables-${CMAKE_BUILD_TYPE}.cmake)\nendif()\n\n# ==================================================================================================\n# Common Functions\n# ==================================================================================================\n\n# Sets the following variables: RESGEN_HEADER, RESGEN_SOURCE, RESGEN_FLAGS, RESGEN_SOURCE_FLAGS,\n# and RESGEN_OUTPUTS. Please pass in an ARCHIVE_NAME that is unique to your project, otherwise the\n# incbin directive will happily consume a blob from the wrong project without warnings or errors.\n# Also be sure to include the ASM language in the CMake \"project\" directive for your project.\nfunction(get_resgen_vars ARCHIVE_DIR ARCHIVE_NAME)\n    set(OUTPUTS\n        ${ARCHIVE_DIR}/${ARCHIVE_NAME}.bin\n        ${ARCHIVE_DIR}/${ARCHIVE_NAME}.S\n        ${ARCHIVE_DIR}/${ARCHIVE_NAME}.apple.S\n        ${ARCHIVE_DIR}/${ARCHIVE_NAME}.h\n    )\n    if (IOS)\n        set(ASM_ARCH_FLAG \"-arch ${DIST_ARCH}\")\n    endif()\n    if (APPLE)\n        set(ASM_SUFFIX \".apple\")\n    endif()\n    set(RESGEN_HEADER \"${ARCHIVE_DIR}/${ARCHIVE_NAME}.h\" PARENT_SCOPE)\n    # Visual Studio makes it difficult to use assembly without using MASM. MASM doesn't support\n    # the equivalent of .incbin, so on Windows we'll just tell resgen to output a C file.\n    if (WEBGL OR WIN32 OR ANDROID_ON_WINDOWS)\n        set(RESGEN_OUTPUTS \"${OUTPUTS};${ARCHIVE_DIR}/${ARCHIVE_NAME}.c\" PARENT_SCOPE)\n        set(RESGEN_FLAGS -qcx ${ARCHIVE_DIR} -p ${ARCHIVE_NAME} PARENT_SCOPE)\n        set(RESGEN_SOURCE \"${ARCHIVE_DIR}/${ARCHIVE_NAME}.c\" PARENT_SCOPE)\n    else()\n        set(RESGEN_OUTPUTS \"${OUTPUTS}\" PARENT_SCOPE)\n        set(RESGEN_FLAGS -qx ${ARCHIVE_DIR} -p ${ARCHIVE_NAME} PARENT_SCOPE)\n        set(RESGEN_SOURCE \"${ARCHIVE_DIR}/${ARCHIVE_NAME}${ASM_SUFFIX}.S\" PARENT_SCOPE)\n        set(RESGEN_SOURCE_FLAGS \"-I'${ARCHIVE_DIR}' ${ASM_ARCH_FLAG}\" PARENT_SCOPE)\n    endif()\nendfunction()\n\n# ==================================================================================================\n# Sub-projects\n# ==================================================================================================\n\n# Common to all platforms\nadd_subdirectory(${EXTERNAL}/libgtest/tnt)\nadd_subdirectory(${LIBRARIES}/camutils)\nadd_subdirectory(${LIBRARIES}/filabridge)\nadd_subdirectory(${LIBRARIES}/filaflat)\nadd_subdirectory(${LIBRARIES}/filagui)\nadd_subdirectory(${LIBRARIES}/filameshio)\nadd_subdirectory(${LIBRARIES}/gltfio)\nadd_subdirectory(${LIBRARIES}/ibl)\nadd_subdirectory(${LIBRARIES}/iblprefilter)\nadd_subdirectory(${LIBRARIES}/image)\nadd_subdirectory(${LIBRARIES}/ktxreader)\nadd_subdirectory(${LIBRARIES}/math)\nadd_subdirectory(${LIBRARIES}/mathio)\nadd_subdirectory(${LIBRARIES}/uberz)\nadd_subdirectory(${LIBRARIES}/utils)\nadd_subdirectory(${LIBRARIES}/viewer)\nadd_subdirectory(${FILAMENT}/filament)\nadd_subdirectory(${FILAMENT}/shaders)\nadd_subdirectory(${EXTERNAL}/basisu/tnt)\nadd_subdirectory(${EXTERNAL}/civetweb/tnt)\nadd_subdirectory(${EXTERNAL}/imgui/tnt)\nadd_subdirectory(${EXTERNAL}/robin-map/tnt)\nadd_subdirectory(${EXTERNAL}/smol-v/tnt)\nadd_subdirectory(${EXTERNAL}/benchmark/tnt)\nadd_subdirectory(${EXTERNAL}/meshoptimizer/tnt)\nadd_subdirectory(${EXTERNAL}/mikktspace)\nadd_subdirectory(${EXTERNAL}/cgltf/tnt)\nadd_subdirectory(${EXTERNAL}/draco/tnt)\nadd_subdirectory(${EXTERNAL}/jsmn/tnt)\nadd_subdirectory(${EXTERNAL}/stb/tnt)\nadd_subdirectory(${EXTERNAL}/getopt)\n\n# Note that this has to be placed after mikktspace in order for combine_static_libs to work.\nadd_subdirectory(${LIBRARIES}/geometry)\n\nif (FILAMENT_BUILD_FILAMAT OR IS_HOST_PLATFORM)\n    # spirv-tools must come before filamat, as filamat relies on the presence of the\n    # spirv-tools_SOURCE_DIR variable.\n    add_subdirectory(${EXTERNAL}/spirv-tools)\n    add_subdirectory(${EXTERNAL}/glslang/tnt)\n    add_subdirectory(${EXTERNAL}/spirv-cross/tnt)\n    add_subdirectory(${LIBRARIES}/filamat)\n\n    # the material debugger requires filamat\n    if (FILAMENT_ENABLE_MATDBG OR IS_HOST_PLATFORM)\n        add_subdirectory(${LIBRARIES}/matdbg)\n    endif()\n\n    # TODO: Uncomment below when fgviewer is ready\n    # if (FILAMENT_ENABLE_FGVIEWER OR IS_HOST_PLATFORM)\n    #     add_subdirectory(${LIBRARIES}/fgviewer)\n    # endif()\nendif()\n\nif (FILAMENT_SUPPORTS_VULKAN)\n    add_subdirectory(${LIBRARIES}/bluevk)\n    add_subdirectory(${EXTERNAL}/vkmemalloc/tnt)\n    set(SPIRV_HEADERS_SKIP_EXAMPLES ON)\n    add_subdirectory(${EXTERNAL}/spirv-headers)\nendif()\n\nset(FILAMENT_SAMPLES_BINARY_DIR ${PROJECT_BINARY_DIR}/samples)\n\nif (WEBGL)\n    add_subdirectory(web/filament-js)\n    add_subdirectory(web/samples)\nendif()\n\nif (IS_HOST_PLATFORM)\n    if (FILAMENT_SUPPORTS_OPENGL)\n        add_subdirectory(${LIBRARIES}/bluegl)\n    endif()\n    if (NOT FILAMENT_SKIP_SDL2)\n      add_subdirectory(${LIBRARIES}/filamentapp)\n    endif()\n    add_subdirectory(${LIBRARIES}/imageio)\n\n    add_subdirectory(${FILAMENT}/samples)\n\n    add_subdirectory(${EXTERNAL}/libassimp/tnt)\n    add_subdirectory(${EXTERNAL}/libpng/tnt)\n    add_subdirectory(${EXTERNAL}/libsdl2/tnt)\n    add_subdirectory(${EXTERNAL}/libz/tnt)\n    add_subdirectory(${EXTERNAL}/tinyexr/tnt)\n\n    add_subdirectory(${TOOLS}/cmgen)\n    add_subdirectory(${TOOLS}/cso-lut)\n    add_subdirectory(${TOOLS}/filamesh)\n    add_subdirectory(${TOOLS}/glslminifier)\n    add_subdirectory(${TOOLS}/matc)\n    add_subdirectory(${TOOLS}/matinfo)\n    if (NOT WIN32)  # matedit not yet supported on Windows\n        add_subdirectory(${TOOLS}/matedit)\n    endif()\n    add_subdirectory(${TOOLS}/mipgen)\n    add_subdirectory(${TOOLS}/normal-blending)\n    add_subdirectory(${TOOLS}/resgen)\n    add_subdirectory(${TOOLS}/rgb-to-lmsr)\n    add_subdirectory(${TOOLS}/roughness-prefilter)\n    add_subdirectory(${TOOLS}/specular-color)\n    add_subdirectory(${TOOLS}/uberz)\nendif()\n\n# Generate exported executables for cross-compiled builds (Android, WebGL, and iOS)\nif (NOT CMAKE_CROSSCOMPILING)\n    export(TARGETS matc cmgen filamesh mipgen resgen uberz glslminifier FILE ${IMPORT_EXECUTABLES})\nendif()\n"
        },
        {
          "name": "CODE_STYLE.md",
          "type": "blob",
          "size": 4.677734375,
          "content": "# Filament Code style and Formatting\n\nFilament largely uses Android's code style, which is significantly different from the\nGoogle code style and is derived from the Java code style, but not quite.\n\nThe guiding principles of the filament code style and code formatting can be resumed as:\n- no nonsense\n- use your own judgement\n- break the rules **if it makes sense** e.g.: it improves readability substantially\n- use the formatting of the file you're in, even if it breaks the rules\n- no nonsense\n\n## Formatting\n\n- 4 spaces indent\n- 8 spaces continuation indent\n- 100 columns\n- `{` at the end of the line\n- spaces around operators and after `;`\n- class access modifiers are not indented\n- last line of `.cpp` or `.h` file must be an empty line\n\n```\nfor (int i = 0; i < max; i++) {\n}\n\nclass Foo {\npublic:\nprotected:\nprivate:\n};\n\n```\n\n## Naming Conventions\n\n### Files\n\n- headers use the `.h` extension\n- implementation files use the `.cpp` extension\n- included files use the `.inc` extension\n- class files bear the name of the class they implement\n- **no spaces** in file names\n- file names must be treated as case **insensitive**, i.e. it is not allowed to have several files\n  with the same name but a different case\n- `#include` must use **fully qualified** names\n- use `#include < >` for all public (exported) headers\n- use `#include \" \"` for private headers\n- all *public* include files must reside under the `include` folder\n- all *source* files must reside under the `src` folder\n- tests reside under the `test` folder\n- public headers of a `foo` library must live in a folder named `foo`\n\n```\nlibfoo.so\n\ninclude/foo/FooBar.h\nsrc/FooBar.cpp\nsrc/data.inc\n\n#include <foo/FooBar.h>\n#include \"FooBarPrivate.h\"\n```\n\n### Code\n\n- Everything is camel case except constants\n- `constants` are uppercase and don't have a prefix\n- `global` variables prefixed with `g`\n- `static` variables prefixed with `s`\n- `private` and `protected` class attributes prefixed with `m`\n- `static` class attributes prefixed with `s`\n- `public` class attributes *are not* prefixed\n- class attributes and methods are lower camelcase\n\n```\nextern int gGlobalWarming;\n\nclass FooBar {\npublic:\n    void methodName();\n    int sizeInBytes;\nprivate:\n    int mAttributeName;\n    static int sGlobalAttribute;\n    static constexpr int FOO_COUNT = 10;\n    enum {\n        ONE, TWO, THREE\n    };\n};\n```\n\n## Code Style\n\n### Files\n\n- always include the copyright notice at the top of every file\n- make sure the date is correct\n\n```\n/*\n * Copyright (C) 2018 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n```\n\n### Headers\n\n- **always** include a class' header **first** in the `.cpp` file\n- other headers are sorted in reverse order of their layering, that is, lower layer headers last\n- within a layer, headers are sorted alphabetically\n- strive for implementing one class per file\n- `STL` limited in public headers to:\n    - `type_traits`\n    - `limits`\n\n*Sorting the headers is important to help catching missing `#include` directives.*\n\n```\n/*\n * Copyright (C) 2018 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Bar.cpp\n\n#include <foo/Bar.h>\n\n#include \"PrivateStuff.h\"\n\n#include <foo/Alloc.h>\n#include <foo/Bar.h>\n\n#include <utils/compiler.h>\n\n#include <algorithm>\n#include <iostream>\n\n#include <assert.h>\n#include <string.h>\n```\n\n### Strings\n\n- Never use `std::string` in the Filament core renderer. Prefer `utils::CString` or `std::string_view`.\n- When using `std::string` in tools, always include the `std::` qualifier to disambiguate it\n  from other string types.\n\n### Misc\n\n- Use `auto` only when the type appears on the same line or with iterators and lambdas.\n```\nauto foo = new Foo();\nfor (auto& i : collection) { }\n```\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.087890625,
          "content": "# How to become a contributor and submit your own code\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Contributing A Patch\n\n1. Submit an issue describing your proposed change to the repo in question.\n1. The repo owner will respond to your issue promptly.\n1. If your proposed change is accepted, and you haven't already done so, sign a\n   Contributor License Agreement (see details above).\n1. Fork the desired repo, develop and test your code changes.\n1. Ensure that your code adheres to the existing style in the sample to which\n   you are contributing. Refer to [CodeStyle.md](/CODE_STYLE.md) for the recommended coding\n   standards for this project.\n1. Ensure that your code has an appropriate set of unit tests which all pass.\n1. Submit a pull request.\n\n## Code Style\n\nSee [CODE_STYLE.md](/CODE_STYLE.md)\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google.com/conduct/).\n\n## Dependencies\n\nOne of our design goals is that Filament itself should have no dependencies or as few dependencies\nas possible. The current external dependencies of the runtime library include:\n\n- STL\n- robin-map (header only library)\n\nWhen building with Vulkan enabled, we have a few additional small dependencies:\n\n- vkmemalloc\n- smol-v\n\nHost tools (such as `matc` or `cmgen`) can use external dependencies freely.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.095703125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2023 The Android Open Source Project\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NEW_RELEASE_NOTES.md",
          "type": "blob",
          "size": 0.3408203125,
          "content": "# Filament Release Notes log\n\n**If you are merging a PR into main**: please add the release note below, under the *Release notes\nfor next branch cut* header.\n\n**If you are cherry-picking a commit into an rc/ branch**: add the release note under the\nappropriate header in [RELEASE_NOTES.md](./RELEASE_NOTES.md).\n\n## Release notes for next branch cut\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.291015625,
          "content": "# Filament\n\n[![Android Build Status](https://github.com/google/filament/workflows/Android/badge.svg)](https://github.com/google/filament/actions?query=workflow%3AAndroid)\n[![iOS Build Status](https://github.com/google/filament/workflows/iOS/badge.svg)](https://github.com/google/filament/actions?query=workflow%3AiOS)\n[![Linux Build Status](https://github.com/google/filament/workflows/Linux/badge.svg)](https://github.com/google/filament/actions?query=workflow%3ALinux)\n[![macOS Build Status](https://github.com/google/filament/workflows/macOS/badge.svg)](https://github.com/google/filament/actions?query=workflow%3AmacOS)\n[![Windows Build Status](https://github.com/google/filament/workflows/Windows/badge.svg)](https://github.com/google/filament/actions?query=workflow%3AWindows)\n[![Web Build Status](https://github.com/google/filament/workflows/Web/badge.svg)](https://github.com/google/filament/actions?query=workflow%3AWeb)\n\nFilament is a real-time physically based rendering engine for Android, iOS, Linux, macOS, Windows,\nand WebGL. It is designed to be as small as possible and as efficient as possible on Android.\n\n## Download\n\n[Download Filament releases](https://github.com/google/filament/releases) to access stable builds.\nFilament release archives contains host-side tools that are required to generate assets.\n\nMake sure you always use tools from the same release as the runtime library. This is particularly\nimportant for `matc` (material compiler).\n\nIf you'd rather build Filament yourself, please refer to our [build manual](BUILDING.md).\n\n### Android\n\nAndroid projects can simply declare Filament libraries as Maven dependencies:\n\n```gradle\nrepositories {\n    // ...\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'com.google.android.filament:filament-android:1.56.5'\n}\n```\n\nHere are all the libraries available in the group `com.google.android.filament`:\n\n| Artifact      | Description   |\n| ------------- | ------------- |\n| [![filament-android](https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filament-android/badge.svg?subject=filament-android)](https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filament-android)  | The Filament rendering engine itself. |\n| [![filament-android-debug](https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filament-android-debug/badge.svg?subject=filament-android-debug)](https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filament-android-debug)  | Debug version of `filament-android`. |\n| [![gltfio-android](https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/gltfio-android/badge.svg?subject=gltfio-android)](https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/gltfio-android) | A glTF 2.0 loader for Filament, depends on `filament-android`. |\n| [![filament-utils-android](https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filament-utils-android/badge.svg?subject=filament-utils-android)](https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filament-utils-android) | KTX loading, Kotlin math, and camera utilities, depends on `gltfio-android`. |\n| [![filamat-android](https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filamat-android/badge.svg?subject=filamat-android)](https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filamat-android) | A runtime material builder/compiler. This library is large but contains a full shader compiler/validator/optimizer and supports both OpenGL and Vulkan. |\n| [![filamat-android-lite](https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filamat-android-lite/badge.svg?subject=filamat-android-lite)](https://maven-badges.herokuapp.com/maven-central/com.google.android.filament/filamat-android-lite) | A much smaller alternative to `filamat-android` that can only generate OpenGL shaders. It does not provide validation or optimizations. |\n\n### iOS\n\niOS projects can use CocoaPods to install the latest release:\n\n```shell\npod 'Filament', '~> 1.56.5'\n```\n\n## Documentation\n\n- [Filament](https://google.github.io/filament/Filament.html), an in-depth explanation of\n  real-time physically based rendering, the graphics capabilities and implementation of Filament.\n  This document explains the math and reasoning behind most of our decisions. This document is a\n  good introduction to PBR for graphics programmers.\n- [Materials](https://google.github.io/filament/Materials.html), the full reference\n  documentation for our material system. This document explains our different material models, how\n  to use the material compiler `matc` and how to write custom materials.\n- [Material Properties](https://google.github.io/filament/Material%20Properties.pdf), a reference\n  sheet for the standard material model.\n\n## Examples\n\n![Night scene](docs/images/samples/example_bistro1.jpg)\n![Night scene](docs/images/samples/example_bistro2.jpg)\n![Materials](docs/images/samples/example_materials1.jpg)\n![Materials](docs/images/samples/example_materials2.jpg)\n![Helmet](docs/images/samples/example_helmet.jpg)\n![Screen-space refraction](docs/images/samples/example_ssr.jpg)\n\n## Features\n\n### APIs\n\n- Native C++ API for Android, iOS, Linux, macOS and Windows\n- Java/JNI API for Android\n- JavaScript API\n\n### Backends\n\n- OpenGL 4.1+ for Linux, macOS and Windows\n- OpenGL ES 3.0+ for Android and iOS\n- Metal for macOS and iOS\n- Vulkan 1.0 for Android, Linux, macOS, and Windows\n- WebGL 2.0 for all platforms\n\n### Rendering\n\n- Clustered forward renderer\n- Cook-Torrance microfacet specular BRDF\n- Lambertian diffuse BRDF\n- Custom lighting/surface shading\n- HDR/linear lighting\n- Metallic workflow\n- Clear coat\n- Anisotropic lighting\n- Approximated translucent (subsurface) materials\n- Cloth/fabric/sheen shading\n- Normal mapping & ambient occlusion mapping\n- Image-based lighting\n- Physically-based camera (shutter speed, sensitivity and aperture)\n- Physical light units\n- Point lights, spot lights, and directional light\n- Specular anti-aliasing\n- Point, spot, and directional light shadows\n- Cascaded shadows\n- EVSM, PCSS, DPCF, or PCF shadows\n- Transparent shadows\n- Contact shadows\n- Screen-space ambient occlusion\n- Screen-space reflections\n- Screen-space refraction\n- Global fog\n- Dynamic resolution (with support for AMD FidelityFX FSR)\n\n### Post processing\n\n- HDR bloom\n- Depth of field bokeh\n- Multiple tone mappers: generic (customizable), ACES, filmic, etc.\n- Color and tone management: luminance scaling, gamut mapping\n- Color grading: exposure, night adaptation, white balance, channel mixer,\n  shadows/mid-tones/highlights, ASC CDL, contrast, saturation, etc.\n- TAA, FXAA, MSAA\n- Screen-space lens flares\n\n### glTF 2.0\n\n- Encodings\n  - [x] Embeded\n  - [x] Binary\n\n- Primitive Types\n  - [x] Points\n  - [x] Lines\n  - [ ] Line Loop\n  - [x] Line Strip\n  - [x] Triangles\n  - [x] Triangle Strip\n  - [ ] Triangle Fan\n\n- Animation\n  - [x] Transform animation\n  - [x] Linear interpolation\n  - [x] Morph animation\n    - [x] Sparse accessor\n  - [x] Skin animation\n  - [x] Joint animation\n\n- Extensions\n  - [x] KHR_draco_mesh_compression\n  - [x] KHR_lights_punctual\n  - [x] KHR_materials_clearcoat\n  - [x] KHR_materials_emissive_strength\n  - [x] KHR_materials_ior\n  - [x] KHR_materials_pbrSpecularGlossiness\n  - [x] KHR_materials_sheen\n  - [x] KHR_materials_transmission\n  - [x] KHR_materials_unlit\n  - [x] KHR_materials_variants\n  - [x] KHR_materials_volume\n  - [x] KHR_materials_specular\n  - [x] KHR_mesh_quantization\n  - [x] KHR_texture_basisu\n  - [x] KHR_texture_transform\n  - [x] EXT_meshopt_compression\n\n\n## Rendering with Filament\n\n### Native Linux, macOS and Windows\n\nYou must create an `Engine`, a `Renderer` and a `SwapChain`. The `SwapChain` is created from a\nnative window pointer (an `NSView` on macOS or a `HWND` on Windows for instance):\n\n```c++\nEngine* engine = Engine::create();\nSwapChain* swapChain = engine->createSwapChain(nativeWindow);\nRenderer* renderer = engine->createRenderer();\n```\n\nTo render a frame you must then create a `View`, a `Scene` and a `Camera`:\n\n```c++\nCamera* camera = engine->createCamera(EntityManager::get().create());\nView* view = engine->createView();\nScene* scene = engine->createScene();\n\nview->setCamera(camera);\nview->setScene(scene);\n```\n\nRenderables are added to the scene:\n\n```c++\nEntity renderable = EntityManager::get().create();\n// build a quad\nRenderableManager::Builder(1)\n        .boundingBox({{ -1, -1, -1 }, { 1, 1, 1 }})\n        .material(0, materialInstance)\n        .geometry(0, RenderableManager::PrimitiveType::TRIANGLES, vertexBuffer, indexBuffer, 0, 6)\n        .culling(false)\n        .build(*engine, renderable);\nscene->addEntity(renderable);\n```\n\nThe material instance is obtained from a material, itself loaded from a binary blob generated\nby `matc`:\n\n```c++\nMaterial* material = Material::Builder()\n        .package((void*) BAKED_MATERIAL_PACKAGE, sizeof(BAKED_MATERIAL_PACKAGE))\n        .build(*engine);\nMaterialInstance* materialInstance = material->createInstance();\n```\n\nTo learn more about materials and `matc`, please refer to the\n[materials documentation](./docs/Materials.md.html).\n\nTo render, simply pass the `View` to the `Renderer`:\n\n```c++\n// beginFrame() returns false if we need to skip a frame\nif (renderer->beginFrame(swapChain)) {\n    // for each View\n    renderer->render(view);\n    renderer->endFrame();\n}\n```\n\nFor complete examples of Linux, macOS and Windows Filament applications, look at the source files\nin the `samples/` directory. These samples are all based on `libs/filamentapp/` which contains the\ncode that creates a native window with SDL2 and initializes the Filament engine, renderer and views.\n\nFor more information on how to prepare environment maps for image-based lighting please refer to\n[BUILDING.md](https://github.com/google/filament/blob/main/BUILDING.md#running-the-native-samples).\n\n### Android\n\nSee `android/samples` for examples of how to use Filament on Android.\n\nYou must always first initialize Filament by calling `Filament.init()`.\n\nRendering with Filament on Android is similar to rendering from native code (the APIs are largely\nthe same across languages). You can render into a `Surface` by passing a `Surface` to the\n`createSwapChain` method. This allows you to render to a `SurfaceTexture`, a `TextureView` or\na `SurfaceView`. To make things easier we provide an Android specific API called `UiHelper` in the\npackage `com.google.android.filament.android`. All you need to do is set a render callback on the\nhelper and attach your `SurfaceView` or `TextureView` to it. You are still responsible for\ncreating the swap chain in the `onNativeWindowChanged()` callback.\n\n### iOS\n\nFilament is supported on iOS 11.0 and above. See `ios/samples` for examples of using Filament on\niOS.\n\nFilament on iOS is largely the same as native rendering with C++. A `CAEAGLLayer` or `CAMetalLayer`\nis passed to the `createSwapChain` method. Filament for iOS supports both Metal (preferred) and\nOpenGL ES.\n\n## Assets\n\nTo get started you can use the textures and environment maps found respectively in\n`third_party/textures` and `third_party/environments`. These assets are under CC0 license. Please\nrefer to their respective `URL.txt` files to know more about the original authors.\n\nEnvironments must be pre-processed using\n[`cmgen`](https://github.com/google/filament/blob/main/BUILDING.md#running-the-native-samples) or\nusing the `libiblprefilter` library.\n\n## How to make contributions\n\nPlease read and follow the steps in [CONTRIBUTING.md](/CONTRIBUTING.md). Make sure you are\nfamiliar with the [code style](/CODE_STYLE.md).\n\n## Directory structure\n\nThis repository not only contains the core Filament engine, but also its supporting libraries\nand tools.\n\n- `android`:                  Android libraries and projects\n  - `filamat-android`:        Filament material generation library (AAR) for Android\n  - `filament-android`:       Filament library (AAR) for Android\n  - `filament-utils-android`: Extra utilities (KTX loader, math types, etc.)\n  - `gltfio-android`:         Filament glTF loading library (AAR) for Android\n  - `samples`:                Android-specific Filament samples\n- `art`:                      Source for various artworks (logos, PDF manuals, etc.)\n- `assets`:                   3D assets to use with sample applications\n- `build`:                    CMake build scripts\n- `docs`:                     Documentation\n  - `math`:                   Mathematica notebooks used to explore BRDFs, equations, etc.\n- `filament`:                 Filament rendering engine (minimal dependencies)\n  - `backend`:                Rendering backends/drivers (Vulkan, Metal, OpenGL/ES)\n- `ide`:                      Configuration files for IDEs (CLion, etc.)\n- `ios`:                      Sample projects for iOS\n- `libs`:                     Libraries\n  - `bluegl`:                 OpenGL bindings for macOS, Linux and Windows\n  - `bluevk`:                 Vulkan bindings for macOS, Linux, Windows and Android\n  - `camutils`:               Camera manipulation utilities\n  - `filabridge`:             Library shared by the Filament engine and host tools\n  - `filaflat`:               Serialization/deserialization library used for materials\n  - `filagui`:                Helper library for [Dear ImGui](https://github.com/ocornut/imgui)\n  - `filamat`:                Material generation library\n  - `filamentapp`:            SDL2 skeleton to build sample apps\n  - `filameshio`:             Tiny filamesh parsing library (see also `tools/filamesh`)\n  - `geometry`:               Mesh-related utilities\n  - `gltfio`:                 Loader for glTF 2.0\n  - `ibl`:                    IBL generation tools\n  - `image`:                  Image filtering and simple transforms\n  - `imageio`:                Image file reading / writing, only intended for internal use\n  - `matdbg`:                 DebugServer for inspecting shaders at run-time (debug builds only)\n  - `math`:                   Math library\n  - `mathio`:                 Math types support for output streams\n  - `utils`:                  Utility library (threads, memory, data structures, etc.)\n  - `viewer`:                 glTF viewer library (requires gltfio)\n- `samples`:                  Sample desktop applications\n- `shaders`:                  Shaders used by `filamat` and `matc`\n- `third_party`:              External libraries and assets\n  - `environments`:           Environment maps under CC0 license that can be used with `cmgen`\n  - `models`:                 Models under permissive licenses\n  - `textures`:               Textures under CC0 license\n- `tools`:                    Host tools\n  - `cmgen`:                  Image-based lighting asset generator\n  - `filamesh`:               Mesh converter\n  - `glslminifier`:           Minifies GLSL source code\n  - `matc`:                   Material compiler\n  - `matinfo`                 Displays information about materials compiled with `matc`\n  - `mipgen`                  Generates a series of miplevels from a source image\n  - `normal-blending`:        Tool to blend normal maps\n  - `resgen`                  Aggregates binary blobs into embeddable resources\n  - `roughness-prefilter`:    Pre-filters a roughness map from a normal map to reduce aliasing\n  - `specular-color`:         Computes the specular color of conductors based on spectral data\n- `web`:                      JavaScript bindings, documentation, and samples\n\n## License\n\nPlease see [LICENSE](/LICENSE).\n\n## Disclaimer\n\nThis is not an officially supported Google product.\n"
        },
        {
          "name": "RELEASE_GUIDE.md",
          "type": "blob",
          "size": 3.7548828125,
          "content": "# Filament Release Guide\n\nThis guide makes use of some \"environment variables\":\n- $RELEASE = the new version of Filament we are releasing today. (e.g., 1.9.3)\n- $NEXT_RELEASE = the version we plan to release next week (e.g., 1.9.4)\n\nBefore starting, ensure that each of these branches is up-to-date with origin:\n- release\n- rc/$RELEASE\n- main\n\n## 0. Check versions.\n\nMake sure the rc/$RELEASE branch has the correct Filament version. It should have the version\ncorresponding to its name, $RELEASE.\n\nMake sure `MATERIAL_VERSION` has been bumped to a new version if this is a MAJOR or MINOR release\n(first two version numbers).\n\n## 1. Bump Filament versions on main to $RELEASE.\n\nCheckout main and run the following command to bump Filament's version to $RELEASE:\n\n```\nbuild/common/bump-version.sh $RELEASE\n```\n\nCommit changes to main with the title:\n\n```\nRelease Filament $RELEASE\n```\n\nDo not push to origin yet.\n\n## 2. Update RELEASE_NOTES.md on main.\n\nCreate a new header in RELEASE_NOTES.md for $NEXT_RELEASE. Copy the release notes in\nNEW_RELEASE_NOTES.md to RELEASE_NOTES.md under the new header. Clear NEW_RELEASE_NOTES.md.\n\nAmend these changes to the \"Release Filament $RELEASE\" commit.\n\n```\ngit add -u\ngit commit --amend --no-edit\n```\n\n## 3. Run release script.\n\n```\nbuild/common/release.sh rc/$RELEASE rc/$NEXT_RELEASE\n```\n\nThis script will merge rc/$RELEASE into release, delete the rc branch, and create a new rc\nbranch called rc/$NEXT_RELEASE. Verify that everything looks okay locally.\n\n## 4. Push the release branch.\n\n```\ngit push origin release\n```\n\n## 5. Create the GitHub release.\n\nUse the GitHub UI to create a GitHub release corresponding to $RELEASE version.\nMake sure the target is set to the release branch.\n\n## 6. Delete the old rc branch (optional).\n\nThis step is optional. The old rc branch may be left alive for a few weeks for posterity.\n\n```\ngit push origin --delete rc/$RELEASE\n```\n\n## 7. Bump the version on the new rc branch to $NEXT_RELEASE.\n\n```\ngit checkout rc/$NEXT_RELEASE\nbuild/common/bump-version.sh $NEXT_RELEASE\n```\n\nCommit the changes to rc/$NEXT_RELEASE with the title:\n\n```\nBump version to $NEXT_RELEASE\n```\n\n## 8. Push main.\n\n```\ngit push origin main\n```\n\n## 9. Push the new rc branch.\n\n```\ngit push origin -u rc/$NEXT_RELEASE\n```\n\n## 10. Rebuild the GitHub release (if failed).\n\nSometimes the GitHub release job will fail. In this case, you can manually re-run the release job.\n\n### Remove any assets uploaded to the release (if needed).\n\nFor example, if rebuilding the Mac release, ensure that the `filament-<version>-mac.tgz` artifact\nis removed from the release assets.\n\n### Update the release branch (if needed).\n\nIf you need to add one or more new commits to the release, perform the following:\n\nFirst, push the new commit(s) to the `release` branch.\n\nThen, with the release branch checked out with the new commit(s), run\n\n```\ngit tag -f -a <release tagname>\ngit push origin -f <release tagname>\n```\n\nThis will update and force push the tag.\n\n### Re-run the GitHub release workflow\n\nNavigate to [Filament's release\nworkflow](https://github.com/google/filament/actions/workflows/release.yml). Hit the _Run workflow_\ndropdown. Modify _Platform to build_ and _Release tag to build_, then hit _Run workflow_. This will\ninitiate a new release run.\n\n## 11. Kick off the npm and CocoaPods release jobs\n\nNavigate to [Filament's npm deploy\nworkflow](https://github.com/google/filament/actions/workflows/npm-deploy.yml).\nHit the _Run workflow_ dropdown. Modify _Release tag to deploy_ to the tag corresponding to this\nrelease (for example, v1.42.2).\n\nNavigate to [Filament's CocoaPods deploy\nworkflow](https://github.com/google/filament/actions/workflows/cocopods-deploy.yml).\nHit the _Run workflow_ dropdown. Modify _Release tag to deploy_ to the tag corresponding to this\nrelease (for example, v1.42.2).\n"
        },
        {
          "name": "RELEASE_NOTES.md",
          "type": "blob",
          "size": 65.92578125,
          "content": "# Filament Release Notes log\n\nThis file contains one line summaries of commits that are worthy of mentioning in release notes.\nA new header is inserted each time a *tag* is created.\n\n**Do not edit this file unless you are performing a release or cherry-picking into an rc/ branch.**\nInstead, if you are authoring a PR for the main branch, add your release note to\n[NEW_RELEASE_NOTES.md](./NEW_RELEASE_NOTES.md).\n\n## v1.56.6\n\nfix crash: the 'target_node' of Animation Channel may be nullpointer.\n\n## v1.56.5\n\n\n## v1.56.4\n\n\n## v1.56.3\n\n\n## v1.56.2\n\n- vk: fix stage pool gc logic\n\n## v1.56.1\n\n## v1.56.0\n\n- backend: descriptor layouts distinguish samplers and external samplers (b/376089915) [⚠️ **New Material Version**]\n\n## v1.55.1\n\n\n## v1.55.0\n- Add descriptor sets to describe shader resources. [⚠️ **New Material Version**]\n\n## v1.54.5\n\n\n## v1.54.4\n\n- Add support for multi-layered render target with array textures.\n\n## v1.54.3\n\n\n## v1.54.2\n\n- Add a `name` API to Filament objects for debugging handle use-after-free assertions\n\n## v1.54.1\n\n\n## v1.54.0\n\n- materials: add a new `stereoscopicType` material parameter. [⚠️ **New Material Version**]\n- Fix a crash when compiling shaders on IMG devices\n\n## v1.53.5\n\n- engine: Fix bug causing certain sampler parameters to not be applied correctly in GLES 2.0 and on\n  certain GLES 3.0 drivers.\n\n## v1.53.4\n\n\n## v1.53.3\n\n- Add drag and drop support for IBL files for desktop gltf_viewer.\n\n## v1.53.2\n\n\n## v1.53.1\n\n\n## v1.53.0\n\n- engine: fix skinning normals with large transforms (b/342459864) [⚠️ **New Material Version**]\n\n## v1.52.3\n\n\n## v1.52.2\n\n\n## v1.52.1\n\n- Add instructions for using Mesa for software rasterization\n\n## v1.51.9\n\n\n## v1.51.8\n\n- filagui: Fix regression which broke WebGL\n- Add a new Engine::Config setting to control preferred shader language\n- Add `getEyeIndex` vertex API\n- ios: Remove bitcode from iOS builds\n\n## v1.51.7\n\n- Add new matedit tool\n- filagui: Support rendering `GL_TEXTURE_EXTERNAL_OES` textures.\n- `setFrameScheduledCallback` now takes a `utils::Invocable`.\n- engine: Add `isPaused()`\n\n## v1.51.6\n\n- Add new matedit tool\n- filagui: Support rendering `GL_TEXTURE_EXTERNAL_OES` textures.\n\n## v1.51.5\n\n\n## v1.51.4\n\n\n## v1.51.3\n\n\n## v1.51.2\n\n- engine: Add experimental APIs `Engine::builder::paused()` and `Engine::setPaused()`\n\n## v1.51.1\n\n\n## v1.51.0\n\n- materials: add support for post-lighting mix factor (b/328498606) [⚠️ **New Material Version**]\n\n## v1.50.6\n\n- Add new API `SwapChain::getFrameScheduledCallback`\n- vulkan: fixed validation error VUID-vkAcquireNextImageKHR-semaphore-01779\n- opengl: Add support for protected content swapchains and contexts\n\n## v1.50.5\n\n- android: NDK 26.1.10909125 is used by default\n- android: Minimum API level on Android is now API 21 instead of API 19. This allows the use of OpenGL ES 3.1\n- rendering: New PBR Neutral tone mapper, designed to preserve materials color appearance\n- android: Change default frameRateOptions.interval to 1.0\n\n## v1.50.4\n\n\n## v1.50.3\n\n\n## v1.50.2\n\n\n## v1.50.1\n\n- Metal: fix some shader artifacts by disabling fast math optimizations.\n- backend: remove `atan2` overload which had a typo and wasn't useful. Fixes b/320856413.\n- utils: remove usages of `SpinLock`. Fixes b/321101014.\n\n## v1.50.0\n- engine: TAA now supports 4x upscaling [BETA] [⚠️ **New Material Version**]\n\n## v1.49.3\n\n- matc: Generate stereo variants for FL0 materials [⚠️ **Recompile materials**]\n\n## v1.49.2\n\n\n## v1.49.1\n\n\n## v1.49.0\n\n- matc: Fix ESSL 1.0 codegen when using external samplers [⚠️ **Recompile materials**]\n\n## v1.48.0\n\n- matc: New option `-1` to disable generation of ESSL 1.0 code in Feature Level 0 materials\n- matc: Support optimizations for ESSL 1.0 code [⚠️ **Recompile materials**]\n\n## v1.47.0\n\n- engine: Support up to 4 side-by-side stereoscopic eyes, configurable at Engine creation time. See\n  `Engine::Config::stereoscopicEyeCount`. [⚠️ **Recompile Materials**]\n\n## v1.46.0\n\n- engine: Allow instantiating Engine at a given feature level via `Engine::Builder::featureLevel`\n- matc: Enable `GL_OES_standard_derivatives` extension in ESSL 1.0 shaders\n- matc: Fix code generation of double sided and masked materials in ESSL 1.0 shaders\n- filagui: Add support for feature level 0\n- matc: Add support for post-process materials in feature level 0\n- engine: Add `Material::getFeatureLevel()`\n- engine: Add missing `Material::getReflectionMode()` method in Java\n- engine: Support basic usage of post-processing materials on feature level 0\n- engine: Fix critical GLES 2.0 bugs\n- engine: Add `FILAMENT_ENABLE_FEATURE_LEVEL_0` build-time option optionally allow building Filament\n  without FL0 support.\n\n## v1.45.1\n\n- engine: Added parameter for configuring JobSystem thread count\n- engine: In Java, introduce Engine.Builder\n- gltfio: fix ubershader index for transmission&volume material\n- engine: New tone mapper: `AgXTonemapper`.\n- matinfo: Add support for viewing ESSL 1.0 shaders\n- engine: Add `Renderer::getClearOptions()` [b/243846268]\n- engine: Fix stable shadows (again) when an IBL rotation is used\n\n## v1.45.0\n\n- materials: fix alpha masked materials when MSAA is turned on [⚠️ **Recompile materials**]\n- materials: better support materials with custom depth [**Recompile Materials**]\n- engine: fade shadows at shadowFar distance instead of hard cutoff [⚠️ **New Material Version**]\n\n## v1.44.0\n\n- engine: add support for skinning with more than four bones per vertex.\n- engine: remove `BloomOptions::anamorphism` which wasn't working well in most cases [**API CHANGE**]\n- engine: new API to return a Material's supported variants, C++ only (b/297456590)\n- build: fix emscripten-1.3.46 build\n- engine: materials built for feature level 0 can now also be loaded in higher feature levels [⚠️\n  **New Material Version**]\n\n## v1.43.1\n\n## v1.43.0\n\n- gltfio: Fix possible change of scale sign when decomposing transform matrix for animation\n- engine: Fixes \"stable\" shadows (see b/299310624)\n\n## v1.42.2\n\n- Fix possible NPE when updating fog options from Java/Kotlin\n- The `emissive` property was not applied properly to `MASKED` materials, and could cause\n  dark fringes to appear (recompile materials)\n- Allow glTF materials with transmission/volume extensions to choose their alpha mode\n  instead of forcing `MASKED`\n- Fix a crash in gltfio when not using ubershaders\n- Use flatmat for mat parameter in jsbinding\n- Fix TextureFlags for sheenRoughnessMap when textures of sheenRoughnessMap and sheenColorMap is same\n- Directional shadows can now be transformed (b/297095805)\n\n## v1.42.1\n\n- Fix potential `EXC_BAD_ACCESS` with Metal backend: b/297059776\n- `setFrameCompletedCallback` now takes a `backend::CallbackHandler`.\n\n## v1.42.0\n\n- engine: add preliminary support for instanced stereoscopic rendering [⚠️ **Recompile materials**]\n\n## v1.41.0\n\n- backend: fix #6997 : picking can fail on Adreno [⚠️ **New Material Version**]\n- backend: A partial workaround for PowerVR devices (#5118, b/190221124) [⚠️ **Recompile Materials**]\n\n## v1.40.5\n\n- backend: Disable timer queries on all Mali GPUs (fixes b/233754398)\n- engine: Add a way to query the validity of most filament objects (see `Engine::isValid`)\n- opengl: fix b/290388359 : possible crash when shutting down the engine\n- engine: Improve precision of frame time measurement when using emulated TimerQueries\n- backend: Improve frame pacing on Android and Vulkan.\n- backend: workaround b/291140208 (gltf_viewer crashes on Nexus 6P)\n- engine: support `setDepthFunc` for `MaterialInstance`\n- web: Added setDepthFunc()/getDepthFunc() to MaterialInstance\n- android: Added setDepthFunc()/getDepthFunc() to MaterialInstance\n\n## v1.40.4\n\n- gltfio: fix crash when compute morph target without material\n- matc: fix buggy `variant-filter` flag\n- web: Added missing setMat3Parameter()/setMat4Parameter() to MaterialInstance\n- opengl: fix b/290670707 : crash when using the blob cache\n- engine: fix a crash with `Material::compile()` when a callback is specified\n\n## v1.40.3\n\n## v1.40.2\n\n- rendering: dynamic resolution would not work with a translucent render target and quality > low\n- Java/Kotlin: user callbacks were not invoked on successful texture upload\n\n## v1.40.1\n\n## v1.40.0\n\n- matc: fix VSM high precision option on mobile [⚠️ **Recompile materials**]\n- vulkan: support sRGB swap chain\n- Add new `getMaxAutomaticInstances()` API on `Engine` to get max supported automatic instances.\n- UiHelper: fix jank when a `TextureView` is resized (fixes b\\282220665)\n- backend: parallel shader compilation support. This breaks and improves the recent `Material::compile` API.\n\n## v1.39.0\n\n- matc: workaround a bug in spirv-tools causing vsm to fail [⚠️ **Recompile materials**]\n\n## v1.38.0\n\n- engine: a new feature to set a transform on the global-scale fog  [⚠️ **Recompile materials**]\n- engine: large-scale fog can now be opted-out on a per-renderable basis\n- engine: improve froxelizer resource efficiency [⚠️ **Recompile materials**]\n- matc: better accounting and validation of used samplers in user materials\n- engine: add support for sampling fog color from a custom texture [⚠️ **Recompile materials**]\n- vulkan: introduce new custom swapchain API\n- vulkan: new context sharing API\n\n## v1.37.0\n\n- backend: added `Platform` blob cache APIs, typically used to cache programs [⚠️ **Recompile materials**]\n\n## v1.36.0\n\n- engine: a local transform can now be supplied for each GPU instance [⚠️ **Recompile materials**]\n- everything: Add limited support for OpenGL ES 2.0 devices. [⚠️ **Recompile Materials**]\n- platform: New virtual on `OpenGLPlatform` to preserve ancillary buffers\n\n## v1.35.0\n\n- materials: Materials can now access up to 4 global `vec4` visible by all materials [⚠️ **Recompile Materials**]\n\n## v1.34.0\n\n- materials: picking is done in float (prepare for ES2) [⚠️ **New Material Version**]\n- materials: postLightingBlending is now applied before the fog [⚠️ **Recompile materials**]\n- vulkan: fix adreno optimized material artifacts [⚠️ **Recompile Materials**]\n\n## v1.33.0\n\n- materials: prepare ES2 support [⚠️ **New Material Version**]\n\n## v1.32.4\n\n- engine: Add support for _constant parameters_, which are constants that can be specialized after material compilation.\n- materials: improved size reduction of OpenGL/Metal shaders by ~65% when compiling materials with\n             size optimizations (`matc -S`) [⚠️ **Recompile Materials**]\n- engine: fix potential crash on Metal devices with A8X GPU (iPad Air 2) [⚠️ **Recompile Materials**]\n- opengl: support the external image on macOS\n\n## v1.32.3\n\n- fog: added an option to disable the fog after a certain distance [⚠️ **Recompile Materials**].\n- fog: fog color now takes exposure and IBL intensity into account [⚠️ **Recompile Materials**].\n- materials: implement cascades debugging as a post-process [⚠️ **Recompile Materials**].\n- materials: use 9 digits or less for floats [⚠️ **Recompile Materials**].\n- gltfio: fix skinning when objects are far from the origin\n- materials: remove 4 unneeded variants from `unlit` materials [⚠️ **Recompile Materials**].\n\n## v1.32.2\n\n- lighting: the sun disc was computed in low/medium quality instead of high quality. This will\n  provide performance improvements to mobile devices [⚠️ **Recompile Materials**]\n\n## v1.32.1\n\n## v1.32.0\n\n- fog: fixed fog height falloff and computation precision on mobile [⚠️ **Recompile Materials**]\n- materials: new alphaToCoverage property can be used to control alpha to coverage behavior\n- materials: added `getUserWorldFromWorldMatrix()` and `getUserWorldPosition()` to retrieve the\n  API-level (user) world position in materials. Deprecated `getWorldOffset()`. [⚠️ **Recompile\n  Materials**]\n- engine: fix precision issue with `shading_view` in large scenes\n- vulkan: readPixels is now async (#6560)\n\n## v1.31.7\n\n## v1.31.6\n\n- engine: the default render channel is now 2 instead of 0\n- gltfio: Fix crash when a MIME type has no texture provider\n\n## v1.31.5\n\n- gltfio: fix potential early freeing of data provided with `ResourceLoader::addResourceData`.\n\n## v1.31.4\n\n- engine: fix broken picking [⚠️ **Recompile Materials to get the fix**]\n- engine: added support for sRGB swapchains. See `SwapChain.h`\n- bluegl: support Windows32\n\n## v1.31.3\n\n- vulkan: fix memory leak in readPixels\n- engine: added support for draw-commands channels (stronger ordering of commands/renderables)\n\n## v1.31.2\n\n## v1.31.1\n\n- gltfio: expose joint inverse bind matrices via method on FilamentInstance\n- filamesh: add error when uv coords size does not match num of vertices. (#6351)\n\n## v1.31.0\n\n- java: fix confusing typo in Camera documentation\n- engine: the output color space can be set on `ColorGrading`. This API currently has limitations,\n  please refer to the documentation for more details\n- Support for RGTC and BPTC texture compression\n- engine: fix TransformManager high precision mode when using transactions\n- web: added TypeScript definition for `Engine.destroy`\n- materials: `getNormalizedViewportCoord()` now returns the logical (i.e. user) viewport\n             normalized position and keeps z reversed [⚠️ **Recompile Materials**]\n- backend: workaround Adreno shader compiler bug (#6355) [⚠️ **Recompile Materials**]\n- geometry: change computing tangent basis from normal vector to use Frisvad's method\n\n## v1.30.0\n\n- engine: optimize per-shadow UBO [⚠️ **Recompile Materials**]\n- engine: fix potential memory corruption with larger scenes\n- engine: VSM's MSAA setting is now per-view instead of per-light [⚠️ **API Change**]\n\n## v1.29.0\n\n- gltfio: calculate primitive's AABB correctly.\n- gltfio: recompute bounding boxes with morph targets\n- engine: add missing getters on `MaterialInstance`\n- WebGL: add missing `ColorGrading` JS bindings\n- engine: improvements/cleanup of Shadow mapping code [⚠️ **Recompile Materials**]\n\n## v1.28.3\n\n\n- backend: add support for GGP platform\n- engine: primitives with `CullingMode::FRONT_AND_BACK` are now skipped.\n\n## v1.28.2\n\n- gltfio: support EXT_meshopt_compression\n- release packaging: fixed location of default IBL file\n\n## v1.28.1\n\n- gltfio: fix reloading crash in ubershader mode\n- Vulkan: improve performance in the readPixels path\n- engine: raise the spot shadows limit to 64, from 14.\n- engine: add experimental support for point light shadows.\n- gltfio: fix ubershader issues with assignment of dummy textures\n- gltfio: material instances and variants are now accessed via `FilamentInstance` [⚠️ **API Change**]\n- gltfio: the animator can now only be accessed via `FilamentInstance` [⚠️ **API Change**]\n- engine: fix \"stable\" shadows and make the default cascade splits logarithmic.\n- engine: Add new quality options to EVSM shadows + rendering fixes\n\n## v1.28.0\n\n- engine: LiSPSM is now a user settable option\n- engine: get the morph target buffer to the given primitive\n- Java: Fix TransformManager.getChildren()\n- Metal: newer devices are no longer limited to 16 samplers per Material.\n- gltfio: fix interpretation of occlusion strength\n- engine: minsdk is now 21 instead of 19. This allows the use of OpenGL ES 3.1\n- Vulkan: fix black screen regression\n\n## v1.27.2\n\n- gltfio: punctual lights are now duplicated when adding new asset instances\n- gltfio: FilamentInstance getAsset method now returns an immutable asset\n- gltfio: allow zero-instance assets\n- gltfio: fix regression with meshes that have no material\n- gltfio: fix regression with recomputeBoundingBoxes()\n- filamesh / matinfo: fix minor ASAN issues\n- engine: Added `Engine::resetBackendState()`, available only in WebGL builds\n\n## v1.27.1\n\n- Java: add methods for TransformManager.getChildCount(), TransformManager.getChildren() and Scene.hasEntity()\n- engine: Fix stencil buffer writes with OpenGL backend.\n- gltfio: add new virtual method to MaterialProvider that all plugins must implement\n- gltfio: add an assert for inconsistent sRGB flags among usages of a particular texture\n- engine: improve scissor documentation\n- backend: scissor is no longer clipped to the viewport (done on filament side)\n- samples: add debug overdraw visualization to gltf_viewer\n\n## v1.27.0\n\n- WebGL: reduce max instance count to work around Chrome issues [⚠️ **Recompile Materials**]\n- engine: rework material/shader sampler binding code [⚠️ **Recompile Materials**]\n- gltfio: move the API for `recomputeBoundingBoxes` [⚠️ **API Change**]\n- engine: add support for specialization constants [⚠️ **Recompile Materials**]\n- gltfio: fix spotlight regression\n- gltfio: clear the MaterialInstance cache when creating new instances\n\n## v1.26.0\n\n- engine: new feature level APIs, see `Engine::getSupportedFeatureLevel()`\n- engine: add new stencil API to `View` and stencil state APIs to `MaterialInstance` [**NEW API**].\n- engine: Fix guard bands and TAA with `vertexDomain:Device` [⚠️ **Recompile Materials**]\n- engine: `clipSpaceTransform` is now only available with `vertexDomain:Device` [⚠️ **API Change**]\n- gltfio: add unified `AssetLoader::createAsset()` method [⚠️ **API Change**]\n- gltfio: all assets are now \"instanced\" [⚠️ **API Change**]\n\n## v1.25.6\n\n- engine: Add `CONFIG_MINSPEC_UBO_SIZE` as a nicer way to allow exceeding the ES3.0 minspec.\n- gltfio: minor efficiency improvement for Android and WebGL builds.\n- gltfio: add support for concurrent texture downloading and decoding.\n\n## v1.25.5\n\n- WebGL: upgraded the JS bindings to work with emsdk 3.1.15\n- WebGL: added missing IBL builder to TypeScript annotations\n- engine: Fix incorrect precision restoration when computing accurate world translations\n- engine: make `MaterialInstance` public API friendly to `std::string_view` parameters\n- gltfio: add 'detach' methods to allow ownership transfer of entities and components\n\n## v1.25.4\n\n- backend: streamline texture upload APIs [⚠️ **API Change**]\n\n## v1.25.3\n\n- engine: Fix Adreno gpu crash introduced by gpu morph target change\n- engine: Add optional memory configuration parameters to Engine initialization\n\n## v1.25.2\n\n- engine: `Camera::getNear()` and `Camera::getCullingFar()` now return `doubles`\n- Metal: implement scissor support.\n- engine: `Renderer::getUserTime()` now returns seconds as documented (#5722) [⚠️ **API Fix**]\n\n## v1.25.1\n\n- engine: add support for automatic instancing. Must be enabled with `Engine::setAutomaticInstancingEnabled(bool)`\n\n## v1.25.0\n\n- Vulkan: smol-v blobs are now 8-byte aligned within the filamat archive. [⚠️ **Recompile Materials**]\n- backend: added support for EGL on linux (headless)\n- uberz tool: add --append and --template arguments.\n- matc tool: add --template argument.\n\n## v1.24.0\n\n- ImGuiHelper: add support for Y flip.\n- Metal: ignore `MTLTexture` formatting when importing external textures.\n- materials: add a new `instanced` material parameter that is now mandatory in order to call `getInstanceIndex()`\n- gltfio: UbershaderProvider now takes the ubershader archive in its constructor [⚠️ **API Change**]\n- gltfio: Fix morphing with sparse accessors.\n- gltfio: Fix models that use signed integers for morphing.\n- engine: Documentation improvements regarding SkinningBuffer and fix an off-by-one assert when setting a SkinningBuffer.\n- picking is now exposed to JavaScript\n- gltf_viewer: Exercise picking functionality.\n- OpenGL: add WebGL support for ReadPixels\n- Vulkan: add assert and error message for OOM (debug builds)\n- Vulkan: fix crash with picking and 2-component ReadPixels.\n- backend: workaround broken GLES timer query on some Mali-Gxx old drivers\n- backend: revert c049a1 & reenable b2cdf9 (\"don't issue a flush systematically after framegraph's execute\")\n- gltfio: namespace now lives under Filament [⚠️ **API Change**]\n- gltfio: UbershaderLoader renamed to UbershaderProvider [⚠️ **API Change**]\n- gltfio: MaterialGenerator renamed to JitShaderProvider [⚠️ **API Change**]\n\n## v1.23.2\n\n- gltfio: Fix morphing for un-packed accessors.\n- gltfio: Ubershaders are now packaged into flexible archives.\n- gltfio: Remove poorly maintained lite flavor.\n- engine: Disable user scissor while rendering the Shadow Maps.\n- engine: Merge identical backend `RenderPrimitives` together.\n- engine: Improve `ResourceAllocator` performance a bit by reserving 128 cache entries.\n- utils: Remove `std::hash<T>` definitions for `libutils` types. Use `T::Hasher` explicitly instead. [⚠️ **API Change**]\n- backend: Fix WGL context attributes.\n- Metal: Fix potential invalid shaders when using gltfio in Ubershader mode. [⚠️ **Recompile Materials to get the fix**]\n\n## v1.23.1\n\n- gltfio: support skinning with bones that do not belong to any scene.\n- gltfio: add `attachSkin` / `detachSkin` method to FilamentAsset.\n- gltfio: ubershader mode: set sheen to `OPAQUE`.\n- Metal: fix issues seen with dynamic resolution on M1 Macs.\n- engine: add a \"global\" mode for render primitive's `blendOrder`.\n- engine: remove `RenderManager::setGeometryAt(index, count)`. [⚠️ **API Change**]\n- engine: fix overallocation by about 17MB.\n- WebGL: Add JS bindings for Texture class methods.\n\n## v1.23.0\n\n- engine: Changed UBOs layout [⚠️ **Material breakage**].\n- engine: Normals on morphed models have been fixed (core Filament change).\n- Java: View has several minor changes due to generated code, such as field ordering.\n- gltfio: Fix crash when reloading glTF assets.\n- gltfio: introduce cross-fade animation API [**NEW API**].\n\n## v1.22.2\n\n- Java: Minor API change: rename `ssctStartTraceDistance` to `ssctShadowDistance`. [⚠️ **API Change**]\n- Java: Minor API change: rename `blendingMode` to `blendMode`. [⚠️ **API Change**]\n- engine: Fix some memory leaks.\n\n## v1.22.1\n\n- Metal: Shaders now use `half` floating-point arithmetic when possible for improved performance. [⚠️ **Recompile Materials**]\n- engine: add support for presentation time in `Renderer`\n- engine: added guard bands support for screen-space effects\n- gltfio: Add multi-scene support.\n- gltfio: Various glTF-related cleanup and enhancements.\n- gltfio: Add support for KHR_texture_basisu.\n\n## v1.22.0\n\n- engine: Changed UBOs layout [⚠️ **Material breakage**].\n- engine: Improve effects relying on mipmapping\n- engine: Fix assert seen with VSM shadows.\n- WebGL: Fix `isTextureFormatSupported` for ETC2 formats.\n\n## v1.21.3\n\n- Java: Renamed the `KTXLoader` Kotlin class to `KTX1Loader`.  [⚠️ **API Change**].\n- libs: Added `Ktx2Reader` and `BasisEncoder` to support Basis-encoded KTX2 files.\n- engine: Remove deprecated `Stream` APIs, see `Texture::import()` for an alternative [⚠️ **API Change**].\n- tools: Removed KTX1 compression support from mipgen.  [⚠️ **API Change**].\n- tools: Added support for KTX2 to mipgen.\n- gltfio: Added `resetBoneMatrices()` method.\n- gltfio: Introduced `TextureProvider` interface.  [⚠️ **API Change**].\n- gltfio: Fix progress indicator when error occurs.\n- samples: Desktop and Web Suzanne samples now use KTX2 instead of KTX1.\n- samples: Fix regression with sample-gltf-viewer and zip files.\n\n## v1.21.2\n\n- Java: Add Java binding to get skins in `FilamentAsset`.\n- libs: Add libs/ktxreader [⚠️ **API Change**].\n- mipgen: fixups / clarification regarding sRGB.\n- WebGL: fix intermittent 'detached ArrayBuffer' errors.\n\n## v1.21.1\n\n- engine: Allow both screen-space refraction and screen-space reflections on the same object [⚠️ **Material breakage**].\n- engine: Optimizations for screen-space reflections.\n- engine: Remove `Viewport::scale()` [⚠️ **API Change**].\n- engine: Fix 12x overallocation of memory in `MorphTargetBuffer`.\n- Metal: Fix validation error when reading from default `SwapChain`.\n\n## v1.21.0\n\n- engine: OpenGL performance improvements with some drivers.\n- engine: Fix incorrect shadows with some custom projection matrices.\n- engine: Fix low frame rates seen with a lot of morph targets.\n- gltfio: Add support for KHR_materials_variants.\n- gltfio: Add support for KHR_materials_emissive_strength.\n- gltfio: Java now exposes morph target names as an array for consistency [⚠️ **API Change**].\n\n## v1.20.5\n\n- engine: New behavior for MASKED to work with translucent views. [⚠️ **Recompile Materials** to get the fix]\n- engine: Fix screen-space reflections when post-processing and MSAA are off.\n- engine: Update MAX_MORPH_TARGETS constant to 256.\n- engine: Fix point light lighting with ortho projection.\n- libs: BlueGL symbols are now prefixed with `bluegl` on all platforms.\n- gltfio: Add skinning getters to `FilamentAsset`.\n\n## v1.20.4\n\n- gltfio: Java clients must now destroy the MaterialProvider [⚠️ **API Change**].\n- gltfio: Fix, bone pose not applied if glTF model doesn't have animations.\n- libs: Added `math::quat::fromDirectedRotation` [**NEW API**].\n- WebGL: Restore GL state when frame ends.\n\n## v1.20.3\n\n- Java: Fix URI bug in Android Viewer sample when dropping some zips.\n- Vulkan: Fix \"uninitialized texture\" warnings from the Vulkan backend.\n\n## v1.20.2\n\n- engine: Binary size optimizations.\n- engine: Fix, Mat4 from Quaternion was transposed.\n- Vulkan: Internal bug fixes and robustness improvements.\n- Vulkan: Reduced log spam.\n\n## v1.20.1\n\n- engine: Binary size improvements.\n- engine: Add basic support for instanced renderables [**NEW API**].\n- engine: Fix, first imaged passed to `Stream::SetAcquiredImage` is ignored and leaked.\n- Vulkan: Robustness improvements.\n- Java: Fix, lookAt z axis negated.\n- gltfio: Be graceful when model has > 4 weights per vert.\n\n## v1.20.0\n\n- engine: Support rough screen-space reflections [⚠️ **Material breakage**].\n- engine: Added `Scene::forEach` API to iterate through a scene's entities.\n- engine: Fix incorrect normals with skinned models.\n- Vulkan: Fix segfault during shutdown.\n- WebGL: Support web apps that have multiple `FilamentViewer`s.\n- gltfio: Performance enhancements when loading models.\n\n## v1.19.0\n\n- engine: Support 256 morph targets.\n- engine: Screen-space reflection improvements.\n- engine: Morphing improvements and bug fixes.\n- gltfio: Generate morphing normals when they are missing.\n- gltfio: Support material extras.\n- Java: Add bindings for new morphing API.\n- Vulkan: Fix segfault on macOS.\n\n## v1.18.0\n\n- engine: Add support separate samplers in fragment and vertex shaders [⚠️ **Material breakage**].\n- engine: Support legacy morphing mode with vertex attributes.\n- engine: Allow more flexible quality settings for the ColorGrading LUT.\n- engine: Improve screen-space reflections quality and allow reflections and refractions together.\n- Vulkan: Bug fixes and improvements.\n\n## v1.17.0\n\n- engine: Add experimental glossy screen-space reflections.\n- engine: Add support for GPU morphing and 128 morph targets.\n- engine: Fix crash with non-shadow receiving renderables and VSM.\n- engine: Bring back the 3x3 filter for PCF shadows.\n- engine: Correct AABB calculation for skinned glTF models.\n\n## v1.16.1\n\n- engine: Added line/triangle strip support.\n\n## v1.16.0\n\n- engine: Fixes skinning calculations (#4887) [⚠️ **Material breakage**].\n- engine: Add support for the glTF extension KHR_materials_emissive_strength.\n- engine: Improvements and fixes to skinning calculations.\n- engine: Fix debug checks for compressed textures.\n- Metal: Fix `readPixels` when dimensions are greater than the render target's.\n\n## v1.15.2\n\n- engine: Add support for PCSS (Percentage Closer Soft Shadows).\n- engine: Fix spotlight shadow bias.\n- samples: Avoid leaking IBLs in Android sample-gltf-viewer.\n- libs: Fix `libibl` on mobile.\n\n## v1.15.1\n\n- engine: add support for DPCF (PCF shadows with contact hardening).\n- engine: add support for Wayland and Vulkan.\n- engine: Fade lights out when close to light far plane.\n- Java: Add missing `Engine#destroySkinningBuffer` method.\n\n## v1.15.0\n\n- engine: Fix spotlights normal bias calculation [⚠️ **Material breakage**].\n- libimage: Fix loading spherical harmonics on certain locals.\n\n## v1.14.2\n\n- Metal: Fix validation error when rendering to `RenderTarget` without depth attachment.\n- engine: Fix rendering glitch with zero-scale bone transforms.\n\n## v1.14.1\n\n- engine: Improvements to shadowing.\n\n## v1.14.0\n\n- engine: Internal materials can use structures as parameters [⚠️ **Material breakage**].\n- engine: `readPixels` on a `SwapChain` must be called within `beginFrame` / `endFrame` [⚠️ **API\n  Change**].\n- engine: Fix normal bias and improve spotlight quality.\n- Java: Fix shadow biases.\n\n## v1.13.0\n\n- Android: Gradle configuration caching is now enabled.\n- Android: Filament's Gradle properties have all been renamed to `com.google.android.filament.xxx`\n  where `xxx` is the property name. See `android/build.gradle` for a complete list [⚠️]\n- Android: The Gradle property `filament_tools_dir` (now called\n  `com.google.android.filament.tools-dir`) does not have a default value anymore. Please specify one\n  in your `gradle.properties` if you reuse the Gradle plugin in your projects [⚠️]\n- engine: Fix spotlights direction and falloff [⚠️ **Material breakage**].\n- engine: Improvements to VSM and spotlight shadows.\n\n## v1.12.11\n\n- Metal: Color grading performance improvement on M1 devices.\n- samples: Fix glitchy animation seen in gltf-viewer iOS sample.\n\n## v1.12.10\n\n- engine: rewrite dynamic resolution scaling controller for better accuracy and less jittering.\n- Java: fix missing ASTC texture enum.\n- tools: Fix normal map issues in mipgen.\n- WebGL: expose some `SurfaceOrientation` functions.\n\n## v1.12.9\n\n- engine: New API: `MultiSampleAntiAliasingOptions` and HDR-aware MSAA resolve. When `customResolve`\n  is enabled, improves anti-aliasing quality [**NEW API**].\n- engine: Fixes and improvements for FSR.\n- engine: All APIs that take a callback as argument now also take a `CallbackHandler*`, a new\n  interface that provides more flexibility around callback dispatch [**NEW API**].\n- Android: Fix JNI bindings for `DepthOfFieldOptions`.\n- Android: workarounds for Adreno-specific fraembuffer issue.\n- JavaScript: updates to JS bindings.\n\n## v1.12.8\n\n- engine: Added picking API to `View`  [⚠️ **Materials need to be rebuilt to access this new feature**].\n- engine: A new `Engine::pumpMessageQueues()` method can be used to trigger all pending user\n  callbacks right away [**NEW API**].\n- engine: new inline helpers to more easily use lambdas, functors and method callbacks with\n  `{Pixel}BufferDescriptor`.\n- Vulkan: fix vertical offset for `readPixels`.\n- Vulkan: various internal improvements.\n- Metal: support integer formats with `readPixels`.\n\n## v1.12.7\n\n- engine: Fix, apply emissive after shadowing.\n\n## v1.12.6\n\n- engine: Added concept of lod bias to materials.\n  [⚠️ **Materials need to be rebuilt to access this new feature**].\n- engine: Fix, BGRA ordering respected for external images with OpenGL on iOS.\n- engine: Use more sensible defaults for spot light inner outer cone angles.\n- engine: Fix potential race condition that caused stalls in `endFrame`.\n- gltfio: Improved handling of transparent materials.\n- Metal: Fix potential crash on earlier versions of iOS (<= 13.0).\n- Android: Fix `filament-utils-android` 'lite' flavor.\n- Java: Fix potential crash with `IBLPrefilter`.\n\n## v1.12.5\n\n- engine: work around a job scheduling issue in `endFrame` that caused stuttering on some Android\ndevices.\n\n## v1.12.4\n\n- engine: New night adaptation API on `ColorGrading`. This API can be used to create an effect that\n  that simulates color and brightness shifts in human vision in low-light conditions.\n- engine: improved performance of AMD FidelityFX FSR1 by 4.6x, it now runs in about 2ms in 4K.\n- engine: Dynamic resolution quality `MEDIUM`, `HIGH` and `ULTRA` now all use AMD FidelityFX FSR1.\n- engine: Fix crash when duplicating material instances.\n- gltfio: generate tangents if requested by the material.\n\n## v1.12.3\n\n- engine: Support AMD FidelityFX Super Resolution for dynamic resolution scaling\n\n## v1.12.2\n\n- engine: New API on `ColorGrading` to enable or disable gamut mapping at will [**New API**].\n- engine: Fix typo causing ShadowOptions::shadowFar to not work properly.\n- engine: Fix, CSM glitch when using shadowMultiplier materials.\n- engine: Improve precision when computing camera projection.\n- engine: Increase the number of supported spot shadows to 14 (from 6).\n- Metal: Add texture swizzling support for external textures.\n\n## v1.12.1\n\n- engine: `double` precision translation support in TransformManager. Disabled by default.\n  Augment model (and view) matrix on `Camera` to accept double precision matrices. When enabled,\n  double precision translations allow filament to handle a very large world space [**New API**].\n- engine: Fix, Views with custom render targets are now blendable.\n\n## v1.12.0\n\n- engine: Option to automatically compute bent normals from SSAO & apply to specular AO\n  [⚠️ **Material breakage**].\n- engine: New APIs: Light channels. Geometry and lights now have a channel associated to them, at\n  least one channel must match for lighting to occur [⚠️ **Material breakage**].\n- engine: Fix potential GPU crash with punctual lights near the far clipping plane.\n- materials: The `inverseTonemap` API is now an exact inverse of the Filmic tonemapper.\n- Metal: Better support for texture formats on M1 Macs.\n\n## v1.11.2\n\n- engine: New API: `ColorGrading::Builder::toneMapper(const ToneMapper*)`.\n- engine: New tone mapper: `GenericToneMapper`, a configurable tone mapper.\n- engine: `ColorGrading::Builder::toneMapping(ColorGrading::ToneMapping)` is now deprecated.\n- engine: Removed `REINHARD` tonemap operator[⚠️ **API Change**].\n- engine: Improve s3tc_srgb detection on desktop.\n- engine: Add bilateral threshold in SSAO options.\n- gltfio: Fix AssetLoader leak, remove unwanted destructor.\n- Metal/Vulkan: Fix uploading texture data with padding or offset.\n- Metal: fix GPU crash seen with large amounts of geometry.\n\n## v1.11.1\n\n- engine: Luminance scaling can now be used with any tone mapping operator. It was previously tied\n  to the \"EVILS\" tone mapping operator.\n- engine: Removed the \"EVILS\" tone mapping operator [⚠️ **API Change**].\n- engine: Improvements to Skinning. A new `SkinningBuffer` API allows bone sharing between\n  renderables.\n- engine: Improvements to internal memory allocation for Metal and Vulkan backends.\n- engine: Default to OpenGL backend when Windows does not support Vulkan.\n- samples: Add new sample app: image_viewer.\n\n## v1.11.0\n\n- engine: Added support for transparent shadows. Add `transparentShadow : true` in the material file.\n- engine: honor user-defined precision in material files for non-samplers, rename `SamplerPrecision`\n  to `ParameterPrecicion`. [⚠️ **API Change**]\n- engine: Work around Qualcomm issue with point lights.\n- engine: Allow MSAA when post-processing is disabled.\n- engine: enable up to 6 spot-light shadows.\n- gltfio: Added support for `KHR_materials_volume`.\n- gltfio: fix precision in KHR_texture_transform.\n- java: Removed support for Java desktop targets (macOS, Linux, and Windows) [⚠️ **API Change**].\n\n## v1.10.7\n\n- engine: Spot-light position calculation moved to fragment shader.\n- engine: Small shadow mapping fixes and improvements.\n- gltfio: Add fast path for native material providers.\n- gltfio: Allow Java / Kotlin clients to customize MaterialProvider.\n- engine: Fix out of bounds access with `RenderTarget` java bindings.\n- Metal: `TextureFormat::DEPTH24_STENCIL8` now maps to a 32 bit depth format on iOS.\n\n## v1.10.6\n\n- engine: Use exponential VSM and improve VSM user settings [⚠️ **Recompile Materials for VSM**].\n- engine: Optional blurring of VSM shadowmaps.\n- engine: Fix a crash when using lens flares.\n- engine: Fix backend crashes when using an unsupported sample count.\n- gltfio: Add new `getAsset`API to `FilamentInstance`.\n- gltfio: Introduce support for extras strings.\n- OpenGL: Increase OpenGL backend handle arena from 2 to 4 MiB.\n- Vulkan: Fix Texture swizzle support.\n\n## v1.10.5\n\n- android: AAR libraries now properly include their ProGuard rules.\n- engine: User materials can now provide custom lighting/surface shading, please consult\n  the [materials documentation](https://google.github.io/filament/Materials.html) for details.\n- engine: `Backend::DEFAULT` now selects the most appropriate backend for the platform, rather than\n  always `OPENGL`. On Android the default is `OPENGL`, on Apple platforms the default is `METAL` and\n  on all other platforms that default is `VULKAN`.\n- engine: Fix a potential memory corruption when using more than 4 render targets.\n- engine: Fix a possible crash when bloom is enabled.\n- engine: Fix and refactor support for S3TC + SRGB with OpenGL.\n- engine: Fix automatic clearing of rendertargets.\n- engine: Fix imported render target discard and clear flags.\n- engine: Fix opaque blit with imported render targets.\n\n## v1.10.4\n\n- engine: improvements to internal job system.\n- Vulkan: performance improvements on Mali.\n- gltfio: improvements to load time for large models.\n- WebGL: remove bogus stride argument, fix `BindingType` TypeScript definition.\n\n## v1.10.3\n\n- android: use `debug.filament.backend` system property to select the desired backend.\n- engine: fix `LightManager::getFalloff`.\n- gltfio: fix crash with non-triangles.\n- macOS: fix main thread checker warnings with OpenGL.\n- vulkan: fix crash on Windows machines with NVIDIA GPUs.\n\n## v1.10.2\n\n- Vulkan: validation and diagnostic improvements\n- engine: improvements for scenes with many renderables.\n- gltfio: added support for `KHR_materials_ior`.\n- java: Add bindings for `IBLPrefilterContext`.\n- java: add `KTXLoader.getSphericalHarmonics` JNI binding\n- libimage: fix, respect sRGB option for compressed formats.\n- sample-gltf-viewer: fix lifetime cycle for RemoteServer.\n\n## v1.10.1\n\n- engine: Add `getPlatform` API to Engine.\n- engine: Add a new cone angles API to `LightManager`.\n- engine: Attachments of custom RendereTargets are not systematically discarded.\n- engine: Fix a crash when using custom rendertargets.\n- engine: New API to duplicate a `MaterialInstance`.\n- filagui: fix support for custom images in ImGuiHelper.\n- java: Add bindings for HDRLoader.\n\n## v1.10.0\n\n- engine: User materials can now use 9 samplers instead of 8 [⚠️ **Material breakage**].\n- engine: Remove `populateTangentQuaternions`  [⚠️ **API change**].\n- engine: Deprecate `Stream::Builder::stream(intptr_t)` [⚠️ **API Change**].\n- engine: Remove deprecated APIs: `Camera::setScaling`, `Engine::destroy(Camera*)`,\n  `Engine::createCamera`, `Renderer::beginFrame(SwapChain*, uint64_t,\n  backend::FrameScheduledCallback, void*)`, and `View::setShadowsEnabled` [⚠️ **API Change**].\n- engine: Remove `focusDistance` from `View::BloomOptions` [⚠️ **API Change**].\n- engine: Add a `FILAMENT_SUPPORTS_OPENGL` CMake option to enable/disable OpenGL support.\n- Vulkan: fixes and improvements for large scenes.\n- gltfio: fix morphing bugs uncovered by MorphStressTest.\n- Java: add API for `Texture::Builder::import()`.\n- WebGL: Fix a potential INVALID_OPERATION.\n\n## v1.9.25\n\n- NEW API: Screen-space lens flare effect.\n- engine: Fix several memory leaks in the GL backend.\n- Vulkan: General bug fixes and improvements.\n- Vulkan: Fix some problems seen on Mali devices.\n- ios: Fix VSM shadows not working.\n- webgl: Fix black screen seen with some samples.\n\n## v1.9.24\n\n- engine: Fix memory leaks in OpenGL driver.\n- engine: new experimental tone mapper, `EVILS` (name will most likely change).\n- engine: Improvements to Vulkan backend.\n- engine: Fix incorrect units documented for `LightManager.getIntensity`.\n- engine: fix high quality upsampling for SSAO.\n- engine: implement accurate normal reconstruction for SSAO.\n- engine: improve LOW and HIGH quality levels for SSAO.\n- libs: improvements to `libiblprefilter`.\n- materials: New `quality` property.\n- samples: Add new gltf-viewer iOS sample.\n- samples: clear the background in lightbulb sample.\n\n## v1.9.23\n\n- Vulkan: various fixes.\n- android: fix crash seen using VSM with MSAA on Adreno devices.\n- engine: Add `Engine::getEntityManager()`.\n- engine: Fix desktop crash seen with some GPU drivers.\n- engine: improve importance sampling.\n- gltfio: robustness improvements for Draco meshes.\n- libs: Add new Transcoder API for C++ clients (part of `libgeometry`).\n- libs: New `iblprefilter` library to compute IBL pre-integration on the GPU using filament.\n- materials: Fix documentation for `getNormalizedViewportCoord`.\n- samples: fix rendertarget sample crash on launch.\n\n## v1.9.22\n\n- NEW API: `Renderer::renderStandaloneView()` is a new method that can be used outside of\n  beginFrame/endFrame on Views that have a RenderTarget associated. This can be used as a\n  pseudo-compute API.\n- Vulkan: bug fixes and improvements.\n- engine: RenderTarget API can now use MRT.\n- sample-gltf-viewer: improvements for reading zip files.\n- sample-gltf-viewer: enable contact-shadows functionality in mobile gltf-viewer.\n- windows: fix build error in filament_framegraph_test.\n\n## v1.9.21\n\n- JavaScript: add missing TextureSampler bindings.\n- Metal: Fix texture swizzling crash with older Nvidia GPUs.\n- Vulkan: fix image layout validation error on Android.\n- android: fix MSAA w/ multisampled_render_to_texture on Mali.\n- engine: better anisotropic filtering with various drivers.\n- gltfio: Use BufferObject API, simplify MorphHelper.\n- gltfio: honor stride in normalizeSkinningWeights.\n- samples: Add web component demo.\n\n## v1.9.20\n\n- Android: Fix VSM.\n- engine: Introduce BufferObject API.\n- engine: Add new isTextureSwizzleSupported API on Texture.\n- engine: Add support to Metal and Vulkan backends for texture swizzling.\n- engine: Add new DoF settings (native/half res, gather kernel ring counts, CoC radius clamp).\n- engine: DoF quality and performance improvements.\n- engine: Fix high-quality upsampling issue with SSAO.\n- Java: Expose `TransformManager.getParent(int)`.\n- samples: Add Metal and Vulkan backend support to Suzanne sample.\n- WebGL: expose fitIntoUnitCube to JS.\n- WebGL: support for multiple `<canvas>` elements.\n\n## v1.9.19\n\n- engine: Fix Metal bug when setGeometryAt is called multiple times.\n- engine: Improvements to DoF.\n- engine: Fix RenderTarget NPE when depth is not present.\n- engine: Improvements to Camera APIs. Move focus distance from DofOptions to Camera.\n- engine: VSM shadows now support `shadowMultiplier`.\n- java: Expose several MaterialInstance APIs (setColorWrite, setDepthWrite, setDepthCulling) that\n  should have been public.\n- java: fix bug with Texture::setImage buffer size calculation.\n\n## v1.9.18\n\n- engine: Fix a DoF bug that caused black dots around the fast tiles.\n- engine: Minor DoF optimizations.\n- engine: Fix blanking windows not being drawn into on macOS.\n- gltfio: Add support for data:// in image URI's.\n- gltfio: Add internal MorphHelper, enable up to 255 targets.\n- engine: Fix a hang in JobSystem.\n- samples: Fix rendertarget sample app.\n\n## v1.9.17\n\n- engine: New shift parameter on `Camera` to translate the viewport and emulate a tilt/shift lens.\n- engine: `Camera::setCustomProjection()` now allows to set a different projection for culling and rendering.\n- engine: Fixed depth of field rendering with custom projection matrices.\n- engine: Fix a rare indefinite hang.\n- gltfio: `SimpleViewer` now exposes more rendering parameters, including `ColorGrading`.\n- gltfio: Fix tangents when morphing is enabled.\n- Metal/Vulkan: fix incorrect dominant light shadows rendering.\n- Fixe some issues with imported rendertargets.\n\n## v1.9.16\n\ngltfio: Add ResourceLoader evict API.\ngltfio: Fix ResourceLoader cache bug.\niOS: Disable exceptions to reduce binary size.\n\n## v1.9.15\n\n- filamat/matc: fix sporadic crash.\n\n## v1.9.14\n\n- Improve bloom/emissive with glTF files.\n- Publicly expose Exposure API for gltfio.\n\n## v1.9.13\n\n- Android: fix \"No implementation found\" error.\n- Android: fix compilation error in UbershaderLoader.\n- engine: computeDataSize now returns correct value for USHORT_565.\n- Vulkan: various internal improvements.\n\n## v1.9.12\n\n- engine: Fixed GL errors seen with MSAA on WebGL.\n  Warning: this can affect multisampling behavior on devices that do not support OpenGL ES 3.1\n- materials: Added new `getVertexIndex()` API for vertex shaders.\n- samples: RenderTarget demo now disables post-processing in offscreen view and creates depth attachment.\n- gltfio: Fix, animation jolt when time delta is very small.\n\n## v1.9.11\n\n- Added support for Apple silicon Macs. build.sh can now be used to build on either Apple silicon or\n  Intel-based Macs. Pass the `-l` flag to build universal binaries.\n- Added `sheenColor` and `sheenRoughness` properties to materials to create cloth/fabric.\n- Materials generation using `libfilamat` is now multi-threaded.\n- `MaterialBuilder::build()` now expects a reference to a `JobSystem` to multi-thread shaders\n  generation. A `JobSystem` can be obtained with `Engine::getJobSystem()` when using Filament,\n  or created directly otherwise. (⚠️ **API change**)\n- Add planar reflection RenderTarget demo.\n- Metal: honor inverseFrontFaces RasterState.\n- Metal: Fix crash when switching between views with shadowing enabled.\n- Metal: Fix crash when calling Texture::setImage() on SAMPLER_2D_ARRAY texture.\n- gltfio: added support for `KHR_materials_sheen`.\n- gltfio: shader optimizations are now disabled by default, unless opting in or using ubershaders.\n- gltfio: Fix \"_maskThreshold not found\" error.\n- gltfio on Java: fix potential memory leak in AssetLoader#destroy.\n- gltfio: fix crash during async texture decode.\n- gltfio: support animation in dynamically-added instances.\n- gltfio: Improve robustness when decoding textures.\n- gltfio: Fix animator crash for orphaned nodes.\n- gltfio: fix tangents with morphing.\n- gltf_viewer: fix very sporadic crash when exiting.\n- gltf_viewer: fix crash when rapidly switching between glTF models.\n- WebGL: Fix samples erroring on Windows with Chrome.\n- WebGL: Support `highlight` for setBloomOptions in JavaScript.\n- WebGL: Include TypeScript bindings in releases.\n- engine: Fix, punctual lights get clipped at certain angles.\n- engine: Fix memory leak when calling `View::setViewport` frequently.\n- engine: Fix, materials not working on some Qualcomm devices.\n- engine: Modulate emissive by alpha on blended objects.\n- engine: Fix, RenderTarget cleared multiple times.\n- Java: Fix JNI bindings for color grading.\n- Android: reduced binary size.\n\n## v1.9.10\n\n- Introduce `libibl_lite` library.\n- engine: Fix `EXC_BAD_INSTRUCTION` seen when using headless SwapChains on macOS with OpenGL.\n- engine: Add new callback API to `SwapChain`.\n- engine: Fix SwiftShader crash when using an IBL without a reflections texture.\n- filamat: Shrink internal `Skybox` material size.\n- filamat: improvements to generated material size.\n- filamat: silence spirv-opt warnings in release builds.\n- matc: Add fog variant filter.\n- matc: Fix crash when building mobile materials.\n- math: reduce template bloat for matrices.\n\n## v1.9.9\n\n- Vulkan: internal robustness improvements.\n- Metal: Support CVPixelBuffer SwapChains.\n- Metal: Support copyFrame.\n- Fix clear behavior with RenderTarget API.\n- Fix GetRefractionMode JNI binding.\n- Additional fixes for Fence bug.\n\n## v1.9.8\n\n- Fix a few Fence-related bugs\n- gltfio: add createInstance() to AssetLoader.\n- gltfio: fix ASAN issue when consuming invalid animation.\n- gltfio: do not segfault on invalid primitives.\n- gltfio: add safety checks to getAnimator.\n- gltfio: fix segfault when consuming invalid file.\n- Vulkan: various internal refactoring and improvements\n- mathio: add ostream operator for quaternions.\n- Fix color grading not applied when dithering is off.\n\n## v1.9.7\n\n- Vulkan: improvements to the ReadPixels implementation.\n- Vulkan: warn instead of panic for sampler overflow.\n- Vulkan: fix leak with headless swap chain.\n- PlatformVkLinux now supports all combos of XLIB and XCB.\n- Fix TypeScript binding for TextureUsage.\n\n## v1.9.6\n\n- Added View::setVsmShadowOptions (experimental)\n- Add anisotropic shadow map sampling with VSM (experimental)\n- matc: fixed bug where some compilation failures still exited with code 0\n- Vulkan + Android: fix build break\n- Add optional XCB support to PlatformVkLinux\n- Fix Vulkan black screen on Windows with NVIDIA hardware\n\n## v1.9.5\n\n- Added a new Live Wallpaper Android sample\n- `UiHelper` now supports managing a `SurfaceHolder`\n- Fix: an internal texture resource was never destroyed\n- Fix: hang on 2-CPU machines\n- Fix: Vulkan crash when using shadow cascades\n- Linux fixes for headless SwiftShader\n- Fix null pointer dereference in `FIndirectLight`\n- Fix Windows build by avoiding nested initializers\n- Vulkan: support readPixels and headless swap chains\n- VSM improvements\n\n## v1.9.4\n\n- Add screen space cone tracing (SSCT)\n- Improvements to VSM shadow quality\n- New `ShadowOptions` control to render Variance Shadow Maps (VSM) with MSAA (experimental)\n- Improvements and fixes to screen-space ambient occlusion\n- gltf_viewer: add --headless option\n- gltf_viewer: Add new automation UI and functionality\n\n## v1.9.3\n\n- engine: Added new APIs to enable/disable screen space refraction\n- engine: Fix, flip the shading normal when det < 0.\n- gltfio: Fix animation by clamping the per-channel interpolant.\n- gltfio: add async cancellation API\n- gltfio: Fix \"uniform not found\" errors.\n- gltfio: Disable clear coat layer IOR change in glTF files (#3104)\n- Vulkan: fix final image barrier used for swap chain.\n- matdbg: Various improvements\n- JavaScript bindings: fix TextureUsage bitmask.\n- cmgen / mipgen: add opt-in for ASTC / ETC support.\n\n## v1.9.2\n\n- Fixes / improvements for contact shadows, fog, and DOF\n- Reduce SSAO creases caused by geometry tessellation\n- Fix compilation warnings and issue with Clang 12\n- Fix JNI crashes\n- Rename .blurScale to .cocScale in DOF options\n\n## v1.9.1\n\n- Improvements to SSAO quality\n- Fix unoptimized shader crashes with certain OpenGL drivers\n- Add float versions of math constants to libmath\n- filament-utils: fix, `CoroutineScope` job should be canceled before destroy\n\n## v1.9.0\n\n- `MASKED` mode now leaves destination alpha intact (useful for transparent targets).\n- `MASKED` mode now benefit from smoothing in `unlit` materials.\n- Small performance improvement to FXAA.\n- Fixed `KHR_materials_transmission` to use the `FADE` blending mode.\n- Fixed frame graph crash when more than 32 stages were required.\n- Fixed several memory leaks in gltfio and the JavaScript bindings.\n- Fixed several platform-specific Vulkan bugs and crashes.\n- Temporal Anti-Aliasing (TAA) is now available as a complement to MSAA and FXAA. It can be turned\n  on and controlled using `View.setTemporalAntiAliasingOptions()`.\n- Added texture getters to `Skybox` and `IndirectLight` (C++, Java, JavaScript).\n- Added APIs to create 3D textures and 2D texture arrays.\n- Internal buffers can now be sized at compile times for applications that render very large\n  numbers of objects.\n- `View.setAmbientOcclusion()` is deprecated in favor of `View.setAmbientOcclusionOptions`\n   (⚠️ **API change**).\n- Switched to C++17.\n- Variance Shadow Mapping (VSM) is now available as an alternative to PCF shadows (experimental).\n- Reduced compiled material sizes by removing unnecessary variants.\n- Many improvement and fixes in the Vulkan backend.\n- Many improvement and fixes in the Metal backend.\n- Fixed translucent views with custom render targets.\n- Improved MSAA implementation compatibility on Android devices.\n- Use \"reverse-z\" for the depth buffer.\n- Added a way to create an `Engine` asynchronously.\n- Highlights are now more stable under depth of field.\n- New option to compress highlights before bloom.\n- Improvements and fixes to SSAO and DOF.\n\n## v1.8.1\n\n- New CocoaPods sample for iOS.\n- Filament for iOS now supports iOS 11.\n- Updated the Emscripten SDK to 1.39.19.\n- Fixed skinning issue with Emscripten.\n- JavaScript APIs for color grading and the vignette effect.\n- Added various missing APIs to Java and JavaScript bindings.\n- Fixed camera aspect ratio when loading a camera from a glTF file.\n- gltfio now uses specular anti-aliasing by default.\n- gltfio now supports the KHR_materials_transmission extension.\n- Compiled materials do not perform unnecessary fp32 operations anymore.\n- Improved quality and performance of the depth of field effect.\n- Fixed transform hierarchy memory corruption when a node is set to be parentless.\n- Fixed crashed in some browsers and on some mobile devices caused by\n  Google-style line directives in shaders.\n- Color grading now has a quality option which affects the size and bit depth of the 3D LUT.\n- Fixed crash in the Metal backend when more than 16 samplers are bound.\n- Added validation in `Texture::setImage()`.\n- Fixed refraction/transmission roughness when specular anti-aliasing is enabled.\n\n## v1.8.0\n\n- Improved JavaScript API for SurfaceOrientation and Scene.\n- Updated JavaScript API around Camera construction / destruction (⚠️ **API change**)\n- Add missing JavaScript API for `View::setVisibleLayers()`.\n- Fixed regression in JavaScript IcoSphere that caused tutorial to fail.\n- gltf_viewer now supports viewing with glTF cameras.\n- gltfio now uses high precision for texture coordinates.\n- gltfio now supports importing glTF cameras.\n- gltfio now supports simple instancing of entire assets.\n- gltfio has improved performance and assumes assets are well-formed.\n- gltfio now supports name and prefix lookup for entities.\n- ModelViewer now allows resources to be fetched off the UI thread.\n- Add support for DOF with Metal backend.\n- New Depth-of-Field (Dof) algorithm, which is more plausible and about an order of magnitude faster\n  (about 4ms on Pixel4).\n- SSAO now has an optional high(er) quality upsampler.\n- Tone mappping now uses the real ACES tone mapper, applied in the proper color space.\n- Tone mapping is now applied via a LUT.\n- `View::setToneMapping` is deprecated, use `View::setColorGrading` instead. (⚠️ **API change**)\n- Color grading capabilities per View: white balance (temperature/tint), channel mixer,\n  tonal ranges (shadows/mid-tones/highlights), ASC CDL (slope/offset/power), contrast, vibrance,\n  saturation, and curves.\n- New vignette effect.\n- Improved MSAA performance on mobile.\n- Improved performance of the post-process pass when bloom is disabled on mobile.\n- Added support for 3D textures.\n- Fixed private API access on some versions of Android.\n- Many improvements and bug fixes in Metal and Vulkan backends.\n- Fixed bug in the Metal backend when SSR and MSAA were turned on.\n- Fixed Metal issue with `BufferDescriptor` and `PixelBufferDescriptor`s not being called on\n  the application thread.\n\n## v1.7.0\n\n- MaterialInstances now have optional names.\n- Improved Depth of Field effect: bokeh rotates with the aperture diameter, improved CoC calculation, feather blur radius.\n- Introduced `getNormalizedViewportCoord` shader API.\n- Added basic SwiftShader support.\n- Fixed SwapChain resizing issues in Vulkan.\n- Added debug option to track `Entities`.\n- Fixed `Camera` entity leaks.\n- Removed problematic `CreateEliminateDeadMembersPass`, which broke UBO layout.\n- Added assert that the engine is not terminated in `flushAndWait()`.\n- Added several fixes and improvements around objects lifetime management\n- `gltfio`: AssetLoader now loads names for mesh-free nodes\n- `gltfio`: Material names are now preserved in ubershader mode\n- Fixed JNI objects allocation and memory corruption\n- JNI constructors are now \"package private\" unless they take an Engine.\n\n## v1.6.0\n\n- gltfio: fixed incorrect cone angles with lights.\n- Specular ambient occlusion now offers 3 modes: off, simple (default on desktop) and bent normals.\n  The latter is more accurate but more expensive and requires a bent normal to be specified in the\n  material. If selected and not bent normal is specified, Filament falls back to the simple mode.\n- Specular ambient occlusion from bent normals now smoothly disappears as roughness goes from 0.3\n  to 0.1. Specular ambient occlusion can completely remove specular light which looks bad on glossy\n  metals. Use the simple specular occlusion mode for glossy metals instead.\n- Refraction can now be set on `MaterialBuilder` from Java.\n- Refraction mode and type can now be set by calling `MaterialBuilder::refractionMode()`.\n  and `MaterialBuilder::refractionType()` instad of `materialRefraction()` and\n  `materialRefractionType()` (️⚠️ **API change**).\n- Fixed documentation confusion about focused spot vs spot lights.\n- Fixed a race condition in the job system.\n- Fixed support for 565 bitmaps on Android.\n- Added support for timer queries in the Metal backend.\n- Improved dynamic resolution implementation to be more accurate and target more platforms.\n- `beginFrame()` now accepts a v-sync timestamp for accurate frame time measurement (used for\n  frame skipping and dynamic resolution). You can pass `0` to get the old behavior (⚠️ **API change**).\n- Fixed several issues related to multi-view support: removed\n  `View::setClearColor()`, a similar functionality is now handled by `Renderer::setClearOptions()`\n  and `Skybox`, the later now can be set to a constant color (⚠️ **API breakage**).\n- Fixed spot/point lights rendering bug depending on Viewport position.\n- Textures can now be swizzled.\n- The emissive property of materials is now expressed in nits and the alpha channel contains the\n  exposure weight (at 0.0 the exposure is not applied to the emissive component of a surface, at\n  1.0 the exposure is applied just like with any regular light) (⚠️ **API breakage**).\n- Added new `intensityCandela` and `setIntensityCandela` API to `LightManager` for setting a punctual\n  light's intensity in candela.\n- Fixed an issue where some `ShadowOptions` were not being respected when passed to\n  `LightManager::Builder`.\n- Added a Depth of Field post-processing effect\n\n## v1.5.2\n\n- gltfio: fixed null pointer exception seen with some Android clients.\n- Engine now exposes its JobSystem to C++ clients.\n- Expose setCulling() in public RenderableManager API.\n\n## v1.5.1\n\n- Fixed \"no texture bound\" warning in WebGL.\n- Fixed a clearing bug with imported render targets.\n- Fixed the creation potentially invalid entities during shadow map initialization.\n- Fixed Maven dependencies for the `filament-utils` library.\n\n## v1.5.0\n\n⚠️ This release breaks compiled materials, use matc to recompile.\n\n- The Android support libraries (gltfio and filament-utils) now use dynamic linking.\n- Removed depth-prepass related APIs. (⚠ API Change)\n- gltfio: add asynchronous API to ResourceLoader.\n- gltfio: generate normals for flat-shaded models that do not have normals.\n- Material instances now allow dynamic depth testing and other rasterization state.\n- Unlit materials now apply emissive in the same way as lit materials.\n- Screen-space refraction is now supported.\n- Support for HDR Bloom as a post-process effect.\n- Alpha masked objects are now part of the SSAO pass.\n- Added Java bindings for geometry::SurfaceOrientation.\n- Fixed bug rendering transparent objects with Metal backend.\n- Fixed crash on macOS Catalina when rendering with Metal backend.\n- Fixed bug in Camera::setLensProjection() and added the aspect ratio parameter. (⚠ API Change)\n- WebGL: Improved TypeScript annotations.\n- WebGL: Simplified callback API for glTF. (⚠ API Change)\n- gltfio: Removed deprecated \"Bindings\" API. (⚠ API Change)\n- gltfio: Added support for Draco.\n- gltfio: Reduced the size of the library.\n- Improved performance of SSAO.\n- Added support for screen-space contact shadows.\n- Added support for global fog.\n- Added support for bent normal maps and specular occlusion from bent normal maps.\n- Added support for shadow-casting spot lights.\n\n## v1.4.5\n\n- The depth prepass setting in View is now ignored and deprecated.\n- Fixed a threading bug with the NOOP backend.\n- Improved memory management for gltfio on Android.\n- Introduced `filament-utils` library with `TextureLoader`, `ModelViewer`, and Java bindings for `camutils`.\n- Fix out-of-bounds bug when glTF has many UV sets.\n- Added new `setMediaOverlay` API to `UiHelper` for controlling surface ordering.\n- Implemented sRGB support for DXT encoded textures.\n- Fix bug with incorrect world transforms computed in `TransformManager`.\n- gltfio: support external resources on Android.\n\n\n## v1.4.4\n\n- Added support for solid and thin layer cubemap and screen-space refraction.\n- Improved high roughness material rendering by default when regenerating environments maps.\n- Fix bad instruction exception with macOS Catalina.\n- Fixed bad state after removing an IBL from the Scene.\n- Fixed incorrect punctual light binning (affected Metal and Vulkan backends).\n- Fixed crash when using a Metal headless SwapChain with an Intel integrated GPU.\n- Added support for ASTC textures on iOS with Metal backend.\n- Added new heightfield sample.\n- Removed `<iostream>` from math headers.\n- cmgen now places KTX files directly in the specified deployment folder.\n\n## v1.4.3\n\n- Fixed an assertion when a parameter array occurs last in a material definition.\n- Fixed morph shapes not rendering in WebGL.\n- Added support for the latest version of emscripten.\n- gltfio: fixed blackness seen with default material.\n- Added ETC2 and BC compressed texture support to Metal backend.\n- Rendering a `SAMPLER_EXTERNAL` texture before setting an external image no longer results in GPU errors.\n- Fixed a normals issue when skinning without a normal map or anisotropy.\n- Fixed an issue where transparent views couldn't be used with post-processing.\n- Always use higher quality 3-bands SH for indirect lighting, even on mobile.\n- The Metal backend can now handle binding individual planes of YUV external images.\n- Added support for depth buffer when post-processing is turned off\n- Improved performance on GPUs that use tile-based rendering\n\n## v1.4.2\n\n- Cleaned up the validation strategy in Engine (checks for use-after-destroy etc).\n- OpenGL: Fixed ES 3.0 support on iOS.\n- OpenGL: Added support for KHR_debug in debug builds.\n- gltfio: Added Java / Kotlin bindings for Animator.\n- gltfio: Fixed panic with the Android gltf-bloom demo.\n- gltfio: Java clients should no longer call Filament#init.\n- Improved IBL diffuse by allowing to use the specular cubemap at `roughness` = 1 instead of Spherical Harmonics\n\n## v1.4.1\n\n- Added missing API documentation.\n- Fixed crash for sandboxed macOS apps using Filament.\n- Fixed an issue that limited the camera near plane to ~1mm.\n- Added Android sample for Camera Stream.\n- Fixed an Xcode assertion when rendering skinned meshes using the Metal backend.\n- Added support for Core Animation / Metal frame synchronization with Metal backend.\n- Fixed an issue with culling in `MaterialInstance`.\n- Fix additional compatibility issues with MSVC, including the Vulkan backend.\n- matdbg: fixed missing symbol issue when linking against debug builds.\n- filamat: fixed crash when using the \"lite\" version of the library.\n- matinfo: Fix a crash with on Windows.\n- gltfio: fixed an animation loop bug.\n- gltfio: added support for sparse accessors.\n- Add JS binding to unary `Camera::setExposure`.\n\n## v1.4.0\n\n- API Breakage: Simplified public-facing Fence API.\n- Minimum API level on Android is now API 19 instead of API 21.\n- Filament can now be built with msvc 2019.\n- Added the ability to modify clip space coordinates in the vertex shader.\n- Added missing API documentation.\n- Improved existing API documentation.\n- Added `Camera::setExposure(float)` to directly control the camera's exposure.\n- Backface culling can now be toggled on material instances.\n- Face direction is now reversed when transforms have negative scale.\n- Dielectrics now behave properly under a white furnace (energy preserving and conserving).\n- Clear coat roughness now remains in the 0..1 (previously remapped to the 0..0.6 range).\n- gltfio: Fixed several limitations with ubershader mode.\n- gltfio: Fixed a transforms issue with non-uniform scale.\n- webgl: Fixed an issue with JPEG textures.\n- Windows: Fix link error in debug builds.\n- matdbg: Web server must now be enabled with an environment variable.\n- matdbg: Added support for editing GLSL and MSL code.\n\n## v1.3.2\n\n- Added optional web server for real-time inspection of shader code.\n- Added basic #include support in material files.\n- Fixed potential Metal memory leak.\n- Fixed intermittent memory overflow in wasm builds.\n- Fix bad normal mapping with skinning.\n- Java clients can now call getNativeObject().\n\n## v1.3.1\n\n- Unified Filament Sceneform and npm releases.\n- Improved cmgen SH with HDR images.\n- IndirectLight can now be queried for dominant direction and color.\n- Added support for vertex morphing.\n- Introduced custom attributes, accessible from the vertex shader.\n- Added Java / Kotlin bindings for KtxLoader.\n- Added JavaScript / Typescript bindings for the new `RenderTarget` class.\n- Added base path to glTF loadResources method for JavaScript.\n- Added support for iOS `CVPixelBuffer` external images with the OpenGL backend.\n\n## sceneform-1.9pr4\n\n- Added `gltf_bloom` Android sample to show gltfio and the `RenderTarget` API.\n- Added `getMaterialInstanceAt` to the Java version of RenderableManager.\n- Fix JNI bindings for setting values in parameter arrays.\n- Added JNI bindings for the gltfio library.\n- Fix support for parameter arrays in `.mat` files.\n- Added support for `RGB_11_11_10`\n- Removed support for `RGBM` (**warning:** source compatibility breakage)\n- IBL cubemap can now be of any size\n- `Texture::generatePrefilterMipmap` can be used for runtime generation of a reflection cubemap\n\n## sceneform-1.9pr3\n\n- Added `Scene.addEntities()` to the Java / Kotlin bindings.\n- Improved robustness in the tangents utility for meshes that have tangents *and* normals.\n- Introduced `RenderTarget` API that allows View to reference an offscreen render target.\n- Added `lucy_bloom` sample to demonstrate the new `RenderTarget` API.\n- Added Screen Space Ambient Occlusion support (SAO)\n- New blending modes: `multiply` and `screen`\n- Fixed an issue when sorting blended objects with different blending modes\n- The material property `curvatureToRoughness` has been replaced with `specularAntiAliasing`.\n  This new specular anti-aliasing solution offers more control via two new properties:\n  `specularAntiAliasingVariance` and `specularAntiAliasingThreshold`. They can also be set on\n  material instances if needed\n- Added specular ambient occlusion to compute a new AO term applied to specular reflections\n  (see `specularAmbientOcclusion` property in materials)\n- Added multi-bounce ambient occlusion to brighten AO and preserve local color\n  (see `multiBounceAmbientOcclusion` property in materials)\n- Micro-shadowing is now applied to material ambient occlusion\n- Use a smaller 64x64 DFG LUT on mobile to reduce binary size\n- Added a distance field generator to libimage.\n- JavaScript MaterialInstance now supports vec4 colors.\n- Further reduced `filamat` binary size by removing reliance on stdlib.\n- Added a new, smaller, version of the `filamat` library, `filamat_lite`. Material optimization and\n  compiling for non-OpenGL backends have been removed in favor of a smaller binary size.\n- Implemented hard fences for the Metal backend, enablying dynamic resolution support.\n- Improved `SurfaceOrientation` robustness when using UVs to generate tangents.\n- Created a `RELEASE_NOTES.md` file, to be updated with significant PRs.\n\n## sceneform-1.9pr2\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 35.5439453125,
          "content": "#!/bin/bash\nset -e\n\n# Host tools required by Android, WebGL, and iOS builds\nMOBILE_HOST_TOOLS=\"matc resgen cmgen filamesh uberz\"\nWEB_HOST_TOOLS=\"${MOBILE_HOST_TOOLS} mipgen filamesh\"\n\nfunction print_help {\n    local self_name=$(basename \"$0\")\n    echo \"Usage:\"\n    echo \"    $self_name [options] <build_type1> [<build_type2> ...] [targets]\"\n    echo \"\"\n    echo \"Options:\"\n    echo \"    -h\"\n    echo \"        Print this help message.\"\n    echo \"    -a\"\n    echo \"        Generate .tgz build archives, implies -i.\"\n    echo \"    -c\"\n    echo \"        Clean build directories.\"\n    echo \"    -C\"\n    echo \"        Clean build directories and revert android/ to a freshly sync'ed state.\"\n    echo \"        All (and only) git-ignored files under android/ are deleted.\"\n    echo \"        This is sometimes needed instead of -c (which still misses some clean steps).\"\n    echo \"    -d\"\n    echo \"        Enable matdbg.\"\n    echo \"    -t\"\n    echo \"        Enable fgviewer.\"\n    echo \"    -f\"\n    echo \"        Always invoke CMake before incremental builds.\"\n    echo \"    -g\"\n    echo \"        Disable material optimization.\"\n    echo \"    -i\"\n    echo \"        Install build output\"\n    echo \"    -m\"\n    echo \"        Compile with make instead of ninja.\"\n    echo \"    -p platform1,platform2,...\"\n    echo \"        Where platformN is [desktop|android|ios|webgl|all].\"\n    echo \"        Platform(s) to build, defaults to desktop.\"\n    echo \"        Building for iOS will automatically perform a partial desktop build.\"\n    echo \"    -q abi1,abi2,...\"\n    echo \"        Where platformN is [armeabi-v7a|arm64-v8a|x86|x86_64|all].\"\n    echo \"        ABIs to build when the platform is Android. Defaults to all.\"\n    echo \"    -u\"\n    echo \"        Run all unit tests, will trigger a debug build if needed.\"\n    echo \"    -v\"\n    echo \"        Exclude Vulkan support from the Android build.\"\n    echo \"    -s\"\n    echo \"        Add iOS simulator support to the iOS build.\"\n    echo \"    -e\"\n    echo \"        Enable EGL on Linux support for desktop builds.\"\n    echo \"    -l\"\n    echo \"        Build arm64/x86_64 universal libraries.\"\n    echo \"        For iOS, this builds universal binaries for devices and the simulator (implies -s).\"\n    echo \"        For macOS, this builds universal binaries for both Apple silicon and Intel-based Macs.\"\n    echo \"    -w\"\n    echo \"        Build Web documents (compiles .md.html files to .html).\"\n    echo \"    -k sample1,sample2,...\"\n    echo \"        When building for Android, also build select sample APKs.\"\n    echo \"        sampleN is an Android sample, e.g., sample-gltf-viewer.\"\n    echo \"        This automatically performs a partial desktop build and install.\"\n    echo \"    -b\"\n    echo \"        Enable Address and Undefined Behavior Sanitizers (asan/ubsan) for debugging.\"\n    echo \"        This is only for the desktop build.\"\n    echo \"    -x value\"\n    echo \"        Define a preprocessor flag FILAMENT_BACKEND_DEBUG_FLAG with [value]. This is useful for\"\n    echo \"        enabling debug paths in the backend from the build script. For example, make a\"\n    echo \"        systrace-enabled build without directly changing #defines. Remember to add -f when\"\n    echo \"        changing this option.\"\n    echo \"    -X osmesa_path\"\n    echo \"        Indicates a path to a completed OSMesa build. OSMesa is used to create an offscreen GL\"\n    echo \"        context for software rasterization\"\n    echo \"    -S type\"\n    echo \"        Enable stereoscopic rendering where type is one of [instanced|multiview]. This is only\"\n    echo \"        meant for building the samples.\"\n    echo \"\"\n    echo \"Build types:\"\n    echo \"    release\"\n    echo \"        Release build only\"\n    echo \"    debug\"\n    echo \"        Debug build only\"\n    echo \"\"\n    echo \"Targets:\"\n    echo \"    Any target supported by the underlying build system\"\n    echo \"\"\n    echo \"Examples:\"\n    echo \"    Desktop release build:\"\n    echo \"        \\$ ./$self_name release\"\n    echo \"\"\n    echo \"    Desktop debug and release builds:\"\n    echo \"        \\$ ./$self_name debug release\"\n    echo \"\"\n    echo \"    Clean, desktop debug build and create archive of build artifacts:\"\n    echo \"        \\$ ./$self_name -c -a debug\"\n    echo \"\"\n    echo \"    Android release build type:\"\n    echo \"        \\$ ./$self_name -p android release\"\n    echo \"\"\n    echo \"    Desktop and Android release builds, with installation:\"\n    echo \"        \\$ ./$self_name -p desktop,android -i release\"\n    echo \"\"\n    echo \"    Desktop matc target, release build:\"\n    echo \"        \\$ ./$self_name release matc\"\n    echo \"\"\n    echo \"    Build gltf_viewer:\"\n    echo \"        \\$ ./$self_name release gltf_viewer\"\n    echo \"\"\n }\n\nfunction print_matdbg_help {\n    echo \"matdbg is enabled in the build, but some extra steps are needed.\"\n    echo \"\"\n    echo \"FOR DESKTOP BUILDS:\"\n    echo \"\"\n    echo \"Please set the port environment variable before launching. e.g., on macOS do:\"\n    echo \"   export FILAMENT_MATDBG_PORT=8080\"\n    echo \"\"\n    echo \"FOR ANDROID BUILDS:\"\n    echo \"\"\n    echo \"1) For Android Studio builds, make sure to set:\"\n    echo \"       -Pcom.google.android.filament.matdbg\"\n    echo \"   option in Preferences > Build > Compiler > Command line options.\"\n    echo \"\"\n    echo \"2) The port number is hardcoded to 8081 so you will need to do:\"\n    echo \"       adb forward tcp:8081 tcp:8081\"\n    echo \"\"\n    echo \"3) Be sure to enable INTERNET permission in your app's manifest file.\"\n    echo \"\"\n}\n\nfunction print_fgviewer_help {\n    echo \"fgviewer is enabled in the build, but some extra steps are needed.\"\n    echo \"\"\n    echo \"FOR DESKTOP BUILDS:\"\n    echo \"\"\n    echo \"Please set the port environment variable before launching. e.g., on macOS do:\"\n    echo \"   export FILAMENT_FGVIEWER_PORT=8085\"\n    echo \"\"\n    echo \"FOR ANDROID BUILDS:\"\n    echo \"\"\n    echo \"1) For Android Studio builds, make sure to set:\"\n    echo \"       -Pcom.google.android.filament.fgviewer\"\n    echo \"   option in Preferences > Build > Compiler > Command line options.\"\n    echo \"\"\n    echo \"2) The port number is hardcoded to 8085 so you will need to do:\"\n    echo \"       adb forward tcp:8085 tcp:8085\"\n    echo \"\"\n    echo \"3) Be sure to enable INTERNET permission in your app's manifest file.\"\n    echo \"\"\n}\n\n# Unless explicitly specified, NDK version will be selected as highest available version within same major release chain\nFILAMENT_NDK_VERSION=${FILAMENT_NDK_VERSION:-$(cat `dirname $0`/build/android/ndk.version | cut -f 1 -d \".\")}\n\n# Requirements\nCMAKE_MAJOR=3\nCMAKE_MINOR=19\n\n# Internal variables\nISSUE_CLEAN=false\nISSUE_CLEAN_AGGRESSIVE=false\n\nISSUE_DEBUG_BUILD=false\nISSUE_RELEASE_BUILD=false\n\n# Default: build desktop only\nISSUE_ANDROID_BUILD=false\nISSUE_IOS_BUILD=false\nISSUE_DESKTOP_BUILD=true\nISSUE_WEBGL_BUILD=false\n\n# Default: all\nABI_ARMEABI_V7A=true\nABI_ARM64_V8A=true\nABI_X86=true\nABI_X86_64=true\nABI_GRADLE_OPTION=\"all\"\n\nISSUE_ARCHIVES=false\nBUILD_JS_DOCS=false\n\nISSUE_CMAKE_ALWAYS=false\n\nISSUE_WEB_DOCS=false\n\nANDROID_SAMPLES=()\nBUILD_ANDROID_SAMPLES=false\n\nRUN_TESTS=false\n\nINSTALL_COMMAND=\n\nVULKAN_ANDROID_OPTION=\"-DFILAMENT_SUPPORTS_VULKAN=ON\"\nVULKAN_ANDROID_GRADLE_OPTION=\"\"\n\nEGL_ON_LINUX_OPTION=\"-DFILAMENT_SUPPORTS_EGL_ON_LINUX=OFF\"\n\nMATDBG_OPTION=\"-DFILAMENT_ENABLE_MATDBG=OFF\"\nFGVIEWER_OPTION=\"-DFILAMENT_ENABLE_FGVIEWER=OFF\"\nMATDBG_GRADLE_OPTION=\"\"\n\nMATOPT_OPTION=\"\"\nMATOPT_GRADLE_OPTION=\"\"\n\nASAN_UBSAN_OPTION=\"\"\n\nBACKEND_DEBUG_FLAG_OPTION=\"\"\n\nSTEREOSCOPIC_OPTION=\"\"\n\nOSMESA_OPTION=\"\"\n\nIOS_BUILD_SIMULATOR=false\nBUILD_UNIVERSAL_LIBRARIES=false\n\nBUILD_GENERATOR=Ninja\nBUILD_COMMAND=ninja\nBUILD_CUSTOM_TARGETS=\n\nUNAME=$(uname)\nLC_UNAME=$(echo \"${UNAME}\" | tr '[:upper:]' '[:lower:]')\n\n# Functions\n\nfunction build_clean {\n    echo \"Cleaning build directories...\"\n    rm -Rf out\n    rm -Rf android/filament-android/build android/filament-android/.externalNativeBuild android/filament-android/.cxx\n    rm -Rf android/filamat-android/build android/filamat-android/.externalNativeBuild android/filamat-android/.cxx\n    rm -Rf android/gltfio-android/build android/gltfio-android/.externalNativeBuild android/gltfio-android/.cxx\n    rm -Rf android/filament-utils-android/build android/filament-utils-android/.externalNativeBuild android/filament-utils-android/.cxx\n    rm -f compile_commands.json\n}\n\nfunction build_clean_aggressive {\n    echo \"Cleaning build directories...\"\n    rm -Rf out\n    git clean -qfX android\n}\n\nfunction build_desktop_target {\n    local lc_target=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n    local build_targets=$2\n\n    if [[ ! \"${build_targets}\" ]]; then\n        build_targets=${BUILD_CUSTOM_TARGETS}\n    fi\n\n    echo \"Building ${lc_target} in out/cmake-${lc_target}...\"\n    mkdir -p \"out/cmake-${lc_target}\"\n\n    pushd \"out/cmake-${lc_target}\" > /dev/null\n\n    local lc_name=$(echo \"${UNAME}\" | tr '[:upper:]' '[:lower:]')\n    if [[ \"${lc_name}\" == \"darwin\" ]]; then\n        if [[ \"${BUILD_UNIVERSAL_LIBRARIES}\" == \"true\" ]]; then\n            local architectures=\"-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64\"\n        fi\n    fi\n\n    if [[ ! -d \"CMakeFiles\" ]] || [[ \"${ISSUE_CMAKE_ALWAYS}\" == \"true\" ]]; then\n        cmake \\\n            -G \"${BUILD_GENERATOR}\" \\\n            -DIMPORT_EXECUTABLES_DIR=out \\\n            -DCMAKE_BUILD_TYPE=\"$1\" \\\n            -DCMAKE_INSTALL_PREFIX=\"../${lc_target}/filament\" \\\n            ${EGL_ON_LINUX_OPTION} \\\n            ${FGVIEWER_OPTION} \\\n            ${MATDBG_OPTION} \\\n            ${MATOPT_OPTION} \\\n            ${ASAN_UBSAN_OPTION} \\\n            ${BACKEND_DEBUG_FLAG_OPTION} \\\n            ${STEREOSCOPIC_OPTION} \\\n            ${OSMESA_OPTION} \\\n            ${architectures} \\\n            ../..\n        ln -sf \"out/cmake-${lc_target}/compile_commands.json\" \\\n           ../../compile_commands.json\n    fi\n    ${BUILD_COMMAND} ${build_targets}\n\n    if [[ \"${INSTALL_COMMAND}\" ]]; then\n        echo \"Installing ${lc_target} in out/${lc_target}/filament...\"\n        ${BUILD_COMMAND} ${INSTALL_COMMAND}\n    fi\n\n    if [[ -d \"../${lc_target}/filament\" ]]; then\n        if [[ \"${ISSUE_ARCHIVES}\" == \"true\" ]]; then\n            echo \"Generating out/filament-${lc_target}-${LC_UNAME}.tgz...\"\n            pushd \"../${lc_target}\" > /dev/null\n            tar -czvf \"../filament-${lc_target}-${LC_UNAME}.tgz\" filament\n            popd > /dev/null\n        fi\n    fi\n\n    popd > /dev/null\n}\n\nfunction build_desktop {\n    if [[ \"${ISSUE_DEBUG_BUILD}\" == \"true\" ]]; then\n        build_desktop_target \"Debug\" \"$1\"\n    fi\n\n    if [[ \"${ISSUE_RELEASE_BUILD}\" == \"true\" ]]; then\n        build_desktop_target \"Release\" \"$1\"\n    fi\n}\n\nfunction build_webgl_with_target {\n    local lc_target=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n\n    echo \"Building WebGL ${lc_target}...\"\n    mkdir -p \"out/cmake-webgl-${lc_target}\"\n    pushd \"out/cmake-webgl-${lc_target}\" > /dev/null\n\n    if [[ ! \"${BUILD_TARGETS}\" ]]; then\n        BUILD_TARGETS=${BUILD_CUSTOM_TARGETS}\n        ISSUE_CMAKE_ALWAYS=true\n    fi\n\n    if [[ ! -d \"CMakeFiles\" ]] || [[ \"${ISSUE_CMAKE_ALWAYS}\" == \"true\" ]]; then\n        # Apply the emscripten environment within a subshell.\n        (\n        # shellcheck disable=SC1090\n        source \"${EMSDK}/emsdk_env.sh\"\n        cmake \\\n            -G \"${BUILD_GENERATOR}\" \\\n            -DIMPORT_EXECUTABLES_DIR=out \\\n            -DCMAKE_TOOLCHAIN_FILE=\"${EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake\" \\\n            -DCMAKE_BUILD_TYPE=\"$1\" \\\n            -DCMAKE_INSTALL_PREFIX=\"../webgl-${lc_target}/filament\" \\\n            -DWEBGL=1 \\\n            ${BACKEND_DEBUG_FLAG_OPTION} \\\n            ../..\n        ln -sf \"out/cmake-webgl-${lc_target}/compile_commands.json\" \\\n           ../../compile_commands.json\n        ${BUILD_COMMAND} ${BUILD_TARGETS}\n        )\n    fi\n\n    if [[ -d \"web/filament-js\" ]]; then\n\n        if [[ \"${BUILD_JS_DOCS}\" == \"true\" ]]; then\n            echo \"Generating JavaScript documentation...\"\n            local DOCS_FOLDER=\"web/docs\"\n            local DOCS_SCRIPT=\"../../web/docs/build.py\"\n            python3 ${DOCS_SCRIPT} --disable-demo \\\n                --output-folder \"${DOCS_FOLDER}\" \\\n                --build-folder \"${PWD}\"\n        fi\n\n        if [[ \"${ISSUE_ARCHIVES}\" == \"true\" ]]; then\n            echo \"Generating out/filament-${lc_target}-web.tgz...\"\n            pushd web/filament-js > /dev/null\n            tar -cvf \"../../../filament-${lc_target}-web.tar\" filament.js\n            tar -rvf \"../../../filament-${lc_target}-web.tar\" filament.wasm\n            tar -rvf \"../../../filament-${lc_target}-web.tar\" filament.d.ts\n            popd > /dev/null\n            gzip -c \"../filament-${lc_target}-web.tar\" > \"../filament-${lc_target}-web.tgz\"\n            rm \"../filament-${lc_target}-web.tar\"\n        fi\n    fi\n\n    popd > /dev/null\n}\n\nfunction build_webgl {\n    # For the host tools, suppress install and always use Release.\n    local old_install_command=${INSTALL_COMMAND}; INSTALL_COMMAND=\n    local old_issue_debug_build=${ISSUE_DEBUG_BUILD}; ISSUE_DEBUG_BUILD=false\n    local old_issue_release_build=${ISSUE_RELEASE_BUILD}; ISSUE_RELEASE_BUILD=true\n\n    build_desktop \"${WEB_HOST_TOOLS}\"\n\n    INSTALL_COMMAND=${old_install_command}\n    ISSUE_DEBUG_BUILD=${old_issue_debug_build}\n    ISSUE_RELEASE_BUILD=${old_issue_release_build}\n\n    if [[ \"${ISSUE_DEBUG_BUILD}\" == \"true\" ]]; then\n        build_webgl_with_target \"Debug\"\n    fi\n\n    if [[ \"${ISSUE_RELEASE_BUILD}\" == \"true\" ]]; then\n        build_webgl_with_target \"Release\"\n    fi\n}\n\nfunction build_android_target {\n    local lc_target=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n    local arch=$2\n\n    echo \"Building Android ${lc_target} (${arch})...\"\n    mkdir -p \"out/cmake-android-${lc_target}-${arch}\"\n\n    pushd \"out/cmake-android-${lc_target}-${arch}\" > /dev/null\n\n    if [[ ! -d \"CMakeFiles\" ]] || [[ \"${ISSUE_CMAKE_ALWAYS}\" == \"true\" ]]; then\n        cmake \\\n            -G \"${BUILD_GENERATOR}\" \\\n            -DIMPORT_EXECUTABLES_DIR=out \\\n            -DCMAKE_BUILD_TYPE=\"$1\" \\\n            -DFILAMENT_NDK_VERSION=\"${FILAMENT_NDK_VERSION}\" \\\n            -DCMAKE_INSTALL_PREFIX=\"../android-${lc_target}/filament\" \\\n            -DCMAKE_TOOLCHAIN_FILE=\"../../build/toolchain-${arch}-linux-android.cmake\" \\\n            ${FGVIEWER_OPTION} \\\n            ${MATDBG_OPTION} \\\n            ${MATOPT_OPTION} \\\n            ${VULKAN_ANDROID_OPTION} \\\n            ${BACKEND_DEBUG_FLAG_OPTION} \\\n            ${STEREOSCOPIC_OPTION} \\\n            ../..\n        ln -sf \"out/cmake-android-${lc_target}-${arch}/compile_commands.json\" \\\n           ../../compile_commands.json\n    fi\n\n    # We must always install Android libraries to build the AAR\n    ${BUILD_COMMAND} install\n\n    popd > /dev/null\n}\n\nfunction build_android_arch {\n    local arch=$1\n\n    if [[ \"${ISSUE_DEBUG_BUILD}\" == \"true\" ]]; then\n        build_android_target \"Debug\" \"${arch}\"\n    fi\n\n    if [[ \"${ISSUE_RELEASE_BUILD}\" == \"true\" ]]; then\n        build_android_target \"Release\" \"${arch}\"\n    fi\n}\n\nfunction archive_android {\n    local lc_target=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n\n    if [[ -d \"out/android-${lc_target}/filament\" ]]; then\n        if [[ \"${ISSUE_ARCHIVES}\" == \"true\" ]]; then\n            echo \"Generating out/filament-android-${lc_target}-${LC_UNAME}.tgz...\"\n            pushd \"out/android-${lc_target}\" > /dev/null\n            tar -czvf \"../filament-android-${lc_target}-${LC_UNAME}.tgz\" filament\n            popd > /dev/null\n        fi\n    fi\n}\n\nfunction ensure_android_build {\n    if [[ \"${ANDROID_HOME}\" == \"\" ]]; then\n        echo \"Error: ANDROID_HOME is not set, exiting\"\n        exit 1\n    fi\n\n    # shellcheck disable=SC2012\n    if [[ -z $(ls \"${ANDROID_HOME}/ndk/\" | sort -V | grep \"^${FILAMENT_NDK_VERSION}\") ]]; then\n        echo \"Error: Android NDK side-by-side version ${FILAMENT_NDK_VERSION} or compatible must be installed, exiting\"\n        exit 1\n    fi\n\n    local cmake_version=$(cmake --version)\n    if [[ \"${cmake_version}\" =~ ([0-9]+)\\.([0-9]+)\\.[0-9]+ ]]; then\n        if [[ \"${BASH_REMATCH[1]}\" -lt \"${CMAKE_MAJOR}\" ]] || \\\n           [[ \"${BASH_REMATCH[2]}\" -lt \"${CMAKE_MINOR}\" ]]; then\n            echo \"Error: cmake version ${CMAKE_MAJOR}.${CMAKE_MINOR}+ is required,\" \\\n                 \"${BASH_REMATCH[1]}.${BASH_REMATCH[2]} installed, exiting\"\n            exit 1\n        fi\n    fi\n}\n\nfunction build_android {\n    ensure_android_build\n\n    # Suppress intermediate desktop tools install\n    local old_install_command=${INSTALL_COMMAND}\n    INSTALL_COMMAND=\n\n    build_desktop \"${MOBILE_HOST_TOOLS}\"\n\n    # When building the samples, we need to partially \"install\" the host tools so Gradle can see\n    # them.\n    if [[ \"${BUILD_ANDROID_SAMPLES}\" == \"true\" ]]; then\n        if [[ \"${ISSUE_DEBUG_BUILD}\" == \"true\" ]]; then\n            mkdir -p out/debug/filament/bin\n            for tool in ${MOBILE_HOST_TOOLS}; do\n                cp out/cmake-debug/tools/${tool}/${tool} out/debug/filament/bin/\n            done\n        fi\n\n        if [[ \"${ISSUE_RELEASE_BUILD}\" == \"true\" ]]; then\n            mkdir -p out/release/filament/bin\n            for tool in ${MOBILE_HOST_TOOLS}; do\n                cp out/cmake-release/tools/${tool}/${tool} out/release/filament/bin/\n            done\n        fi\n    fi\n\n    INSTALL_COMMAND=${old_install_command}\n\n    if [[ \"${ABI_ARM64_V8A}\" == \"true\" ]]; then\n        build_android_arch \"aarch64\" \"aarch64-linux-android\"\n    fi\n    if [[ \"${ABI_ARMEABI_V7A}\" == \"true\" ]]; then\n        build_android_arch \"arm7\" \"arm-linux-androideabi\"\n    fi\n    if [[ \"${ABI_X86_64}\" == \"true\" ]]; then\n        build_android_arch \"x86_64\" \"x86_64-linux-android\"\n    fi\n    if [[ \"${ABI_X86}\" == \"true\" ]]; then\n        build_android_arch \"x86\" \"i686-linux-android\"\n    fi\n\n    if [[ \"${ISSUE_DEBUG_BUILD}\" == \"true\" ]]; then\n        archive_android \"Debug\"\n    fi\n\n    if [[ \"${ISSUE_RELEASE_BUILD}\" == \"true\" ]]; then\n        archive_android \"Release\"\n    fi\n\n    pushd android > /dev/null\n\n    if [[ \"${ISSUE_DEBUG_BUILD}\" == \"true\" ]]; then\n        ./gradlew \\\n            -Pcom.google.android.filament.dist-dir=../out/android-debug/filament \\\n            -Pcom.google.android.filament.abis=${ABI_GRADLE_OPTION} \\\n            ${VULKAN_ANDROID_GRADLE_OPTION} \\\n            ${MATDBG_GRADLE_OPTION} \\\n            ${MATOPT_GRADLE_OPTION} \\\n            :filament-android:assembleDebug \\\n            :gltfio-android:assembleDebug \\\n            :filament-utils-android:assembleDebug\n\n        ./gradlew \\\n            -Pcom.google.android.filament.dist-dir=../out/android-debug/filament \\\n            -Pcom.google.android.filament.abis=${ABI_GRADLE_OPTION} \\\n            :filamat-android:assembleDebug\n\n        if [[ \"${BUILD_ANDROID_SAMPLES}\" == \"true\" ]]; then\n            for sample in ${ANDROID_SAMPLES}; do\n                ./gradlew \\\n                    -Pcom.google.android.filament.dist-dir=../out/android-debug/filament \\\n                    -Pcom.google.android.filament.abis=${ABI_GRADLE_OPTION} \\\n                    ${MATOPT_GRADLE_OPTION} \\\n                    :samples:${sample}:assembleDebug\n            done\n        fi\n\n        if [[ \"${INSTALL_COMMAND}\" ]]; then\n            echo \"Installing out/filamat-android-debug.aar...\"\n            cp filamat-android/build/outputs/aar/filamat-android-debug.aar ../out/filamat-android-debug.aar\n\n            echo \"Installing out/filament-android-debug.aar...\"\n            cp filament-android/build/outputs/aar/filament-android-debug.aar ../out/\n\n            echo \"Installing out/gltfio-android-debug.aar...\"\n            cp gltfio-android/build/outputs/aar/gltfio-android-debug.aar ../out/gltfio-android-debug.aar\n\n            echo \"Installing out/filament-utils-android-debug.aar...\"\n            cp filament-utils-android/build/outputs/aar/filament-utils-android-debug.aar ../out/filament-utils-android-debug.aar\n\n            if [[ \"${BUILD_ANDROID_SAMPLES}\" == \"true\" ]]; then\n                for sample in ${ANDROID_SAMPLES}; do\n                    echo \"Installing out/${sample}-debug.apk\"\n                    cp samples/${sample}/build/outputs/apk/debug/${sample}-debug.apk \\\n                        ../out/${sample}-debug.apk\n                done\n            fi\n        fi\n    fi\n\n    if [[ \"${ISSUE_RELEASE_BUILD}\" == \"true\" ]]; then\n        ./gradlew \\\n            -Pcom.google.android.filament.dist-dir=../out/android-release/filament \\\n            -Pcom.google.android.filament.abis=${ABI_GRADLE_OPTION} \\\n            ${VULKAN_ANDROID_GRADLE_OPTION} \\\n            ${MATDBG_GRADLE_OPTION} \\\n            ${MATOPT_GRADLE_OPTION} \\\n            :filament-android:assembleRelease \\\n            :gltfio-android:assembleRelease \\\n            :filament-utils-android:assembleRelease\n\n        ./gradlew \\\n            -Pcom.google.android.filament.dist-dir=../out/android-release/filament \\\n            -Pcom.google.android.filament.abis=${ABI_GRADLE_OPTION} \\\n            :filamat-android:assembleRelease\n\n        if [[ \"${BUILD_ANDROID_SAMPLES}\" == \"true\" ]]; then\n            for sample in ${ANDROID_SAMPLES}; do\n                ./gradlew \\\n                    -Pcom.google.android.filament.dist-dir=../out/android-release/filament \\\n                    -Pcom.google.android.filament.abis=${ABI_GRADLE_OPTION} \\\n                    ${MATOPT_GRADLE_OPTION} \\\n                    :samples:${sample}:assembleRelease\n            done\n        fi\n\n        if [[ \"${INSTALL_COMMAND}\" ]]; then\n            echo \"Installing out/filamat-android-release.aar...\"\n            cp filamat-android/build/outputs/aar/filamat-android-release.aar ../out/filamat-android-release.aar\n\n            echo \"Installing out/filament-android-release.aar...\"\n            cp filament-android/build/outputs/aar/filament-android-release.aar ../out/\n\n            echo \"Installing out/gltfio-android-release.aar...\"\n            cp gltfio-android/build/outputs/aar/gltfio-android-release.aar ../out/gltfio-android-release.aar\n\n            echo \"Installing out/filament-utils-android-release.aar...\"\n            cp filament-utils-android/build/outputs/aar/filament-utils-android-release.aar ../out/filament-utils-android-release.aar\n\n            if [[ \"${BUILD_ANDROID_SAMPLES}\" == \"true\" ]]; then\n                for sample in ${ANDROID_SAMPLES}; do\n                    echo \"Installing out/${sample}-release.apk\"\n                    cp samples/${sample}/build/outputs/apk/release/${sample}-release-unsigned.apk \\\n                        ../out/${sample}-release.apk\n                done\n            fi\n        fi\n    fi\n\n    popd > /dev/null\n}\n\nfunction build_ios_target {\n    local lc_target=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n    local arch=$2\n    local platform=$3\n\n    echo \"Building iOS ${lc_target} (${arch}) for ${platform}...\"\n    mkdir -p \"out/cmake-ios-${lc_target}-${arch}\"\n\n    pushd \"out/cmake-ios-${lc_target}-${arch}\" > /dev/null\n\n    if [[ ! -d \"CMakeFiles\" ]] || [[ \"${ISSUE_CMAKE_ALWAYS}\" == \"true\" ]]; then\n        cmake \\\n            -G \"${BUILD_GENERATOR}\" \\\n            -DIMPORT_EXECUTABLES_DIR=out \\\n            -DCMAKE_BUILD_TYPE=\"$1\" \\\n            -DCMAKE_INSTALL_PREFIX=\"../ios-${lc_target}/filament\" \\\n            -DIOS_ARCH=\"${arch}\" \\\n            -DPLATFORM_NAME=\"${platform}\" \\\n            -DIOS=1 \\\n            -DCMAKE_TOOLCHAIN_FILE=../../third_party/clang/iOS.cmake \\\n            ${FGVIEWER_OPTION} \\\n            ${MATDBG_OPTION} \\\n            ${MATOPT_OPTION} \\\n            ${STEREOSCOPIC_OPTION} \\\n            ../..\n        ln -sf \"out/cmake-ios-${lc_target}-${arch}/compile_commands.json\" \\\n           ../../compile_commands.json\n    fi\n\n    ${BUILD_COMMAND}\n\n    if [[ \"${INSTALL_COMMAND}\" ]]; then\n        echo \"Installing ${lc_target} in out/${lc_target}/filament...\"\n        ${BUILD_COMMAND} ${INSTALL_COMMAND}\n    fi\n\n    popd > /dev/null\n}\n\nfunction archive_ios {\n    local lc_target=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n\n    if [[ -d \"out/ios-${lc_target}/filament\" ]]; then\n        if [[ \"${ISSUE_ARCHIVES}\" == \"true\" ]]; then\n            echo \"Generating out/filament-${lc_target}-ios.tgz...\"\n            pushd \"out/ios-${lc_target}\" > /dev/null\n            tar -czvf \"../filament-${lc_target}-ios.tgz\" filament\n            popd > /dev/null\n        fi\n    fi\n}\n\nfunction build_ios {\n    # Suppress intermediate desktop tools install\n    local old_install_command=${INSTALL_COMMAND}\n    INSTALL_COMMAND=\n\n    build_desktop \"${MOBILE_HOST_TOOLS}\"\n\n    INSTALL_COMMAND=${old_install_command}\n\n    # In theory, we could support iPhone architectures older than arm64, but\n    # only arm64 devices support OpenGL 3.0 / Metal\n\n    if [[ \"${ISSUE_DEBUG_BUILD}\" == \"true\" ]]; then\n        build_ios_target \"Debug\" \"arm64\" \"iphoneos\"\n        if [[ \"${IOS_BUILD_SIMULATOR}\" == \"true\" ]]; then\n            build_ios_target \"Debug\" \"x86_64\" \"iphonesimulator\"\n        fi\n\n        if [[ \"${BUILD_UNIVERSAL_LIBRARIES}\" == \"true\" ]]; then\n            build/ios/create-universal-libs.sh \\\n                -o out/ios-debug/filament/lib/universal \\\n                out/ios-debug/filament/lib/arm64 \\\n                out/ios-debug/filament/lib/x86_64\n            rm -rf out/ios-debug/filament/lib/arm64\n            rm -rf out/ios-debug/filament/lib/x86_64\n        fi\n\n        archive_ios \"Debug\"\n    fi\n\n    if [[ \"${ISSUE_RELEASE_BUILD}\" == \"true\" ]]; then\n        build_ios_target \"Release\" \"arm64\" \"iphoneos\"\n        if [[ \"${IOS_BUILD_SIMULATOR}\" == \"true\" ]]; then\n            build_ios_target \"Release\" \"x86_64\" \"iphonesimulator\"\n        fi\n\n        if [[ \"${BUILD_UNIVERSAL_LIBRARIES}\" == \"true\" ]]; then\n            build/ios/create-universal-libs.sh \\\n                -o out/ios-release/filament/lib/universal \\\n                out/ios-release/filament/lib/arm64 \\\n                out/ios-release/filament/lib/x86_64\n            rm -rf out/ios-release/filament/lib/arm64\n            rm -rf out/ios-release/filament/lib/x86_64\n        fi\n\n        archive_ios \"Release\"\n    fi\n}\n\nfunction build_web_docs {\n    echo \"Building Web documents...\"\n\n    mkdir -p out/web-docs\n    cp -f docs/web-docs-package.json out/web-docs/package.json\n    pushd out/web-docs > /dev/null\n\n    npm install > /dev/null\n\n    # Generate documents\n    npx markdeep-rasterizer ../../docs/Filament.md.html ../../docs/Materials.md.html  ../../docs/\n\n    popd > /dev/null\n}\n\nfunction validate_build_command {\n    set +e\n    # Make sure CMake is installed\n    local cmake_binary=$(command -v cmake)\n    if [[ ! \"${cmake_binary}\" ]]; then\n        echo \"Error: could not find cmake, exiting\"\n        exit 1\n    fi\n\n    # Make sure Ninja is installed\n    if [[ \"${BUILD_COMMAND}\" == \"ninja\" ]]; then\n        local ninja_binary=$(command -v ninja)\n        if [[ ! \"${ninja_binary}\" ]]; then\n            echo \"Warning: could not find ninja, using make instead\"\n            BUILD_GENERATOR=\"Unix Makefiles\"\n            BUILD_COMMAND=\"make\"\n        fi\n    fi\n    # Make sure Make is installed\n    if [[ \"${BUILD_COMMAND}\" == \"make\" ]]; then\n        local make_binary=$(command -v make)\n        if [[ ! \"${make_binary}\" ]]; then\n            echo \"Error: could not find make, exiting\"\n            exit 1\n        fi\n    fi\n    # If building a WebAssembly module, ensure we know where Emscripten lives.\n    if [[ \"${EMSDK}\" == \"\" ]] && [[ \"${ISSUE_WEBGL_BUILD}\" == \"true\" ]]; then\n        echo \"Error: EMSDK is not set, exiting\"\n        exit 1\n    fi\n    # Web documents require node and npm for processing\n    if [[ \"${ISSUE_WEB_DOCS}\" == \"true\" ]]; then\n        local node_binary=$(command -v node)\n        local npm_binary=$(command -v npm)\n        local npx_binary=$(command -v npx)\n        if [[ ! \"${node_binary}\" ]] || [[ ! \"${npm_binary}\" ]] || [[ ! \"${npx_binary}\" ]]; then\n            echo \"Error: Web documents require node, npm and npx to be installed\"\n            exit 1\n        fi\n    fi\n\n    # Make sure FILAMENT_BACKEND_DEBUG_FLAG is only meant for debug builds\n    if [[ \"${ISSUE_DEBUG_BUILD}\" != \"true\" ]] && [[ ! -z \"${BACKEND_DEBUG_FLAG_OPTION}\" ]]; then\n        echo \"Error: cannot specify FILAMENT_BACKEND_DEBUG_FLAG in non-debug build\"\n        exit 1\n    fi\n\n    set -e\n}\n\nfunction run_test {\n    local test=$1\n    # The input string might contain arguments, so we use \"set -- $test\" to replace $1 with the\n    # first whitespace-separated token in the string.\n    # shellcheck disable=SC2086\n    set -- ${test}\n    local test_name=$(basename \"$1\")\n    # shellcheck disable=SC2086\n    ./out/cmake-debug/${test} --gtest_output=\"xml:out/test-results/${test_name}/sponge_log.xml\"\n}\n\nfunction run_tests {\n    if [[ \"${ISSUE_WEBGL_BUILD}\" == \"true\" ]]; then\n        if ! echo \"TypeScript $(tsc --version)\" ; then\n            tsc --noEmit \\\n                third_party/gl-matrix/gl-matrix.d.ts \\\n                web/filament-js/filament.d.ts \\\n                web/filament-js/test.ts\n        fi\n    else\n        while read -r test; do\n            run_test \"${test}\"\n        done < build/common/test_list.txt\n    fi\n}\n\nfunction check_debug_release_build {\n    if [[ \"${ISSUE_DEBUG_BUILD}\" == \"true\" || \\\n          \"${ISSUE_RELEASE_BUILD}\" == \"true\" || \\\n          \"${ISSUE_CLEAN}\" == \"true\" || \\\n          \"${ISSUE_WEB_DOCS}\" == \"true\" ]]; then\n        \"$@\";\n    else\n        echo \"You must declare a debug or release target for $@ builds.\"\n        echo \"\"\n        exit 1\n    fi\n}\n\n# Beginning of the script\n\npushd \"$(dirname \"$0\")\" > /dev/null\n\nwhile getopts \":hacCfgijmp:q:uvslwedtk:bx:S:X:\" opt; do\n    case ${opt} in\n        h)\n            print_help\n            exit 0\n            ;;\n        a)\n            ISSUE_ARCHIVES=true\n            INSTALL_COMMAND=install\n            ;;\n        c)\n            ISSUE_CLEAN=true\n            ;;\n        C)\n            ISSUE_CLEAN_AGGRESSIVE=true\n            ;;\n        d)\n            PRINT_MATDBG_HELP=true\n            MATDBG_OPTION=\"-DFILAMENT_ENABLE_MATDBG=ON, -DFILAMENT_BUILD_FILAMAT=ON\"\n            MATDBG_GRADLE_OPTION=\"-Pcom.google.android.filament.matdbg\"\n            ;;\n        t)\n            # TODO: Uncomment below when fgviewer is ready\n            # PRINT_FGVIEWER_HELP=true\n            # FGVIEWER_OPTION=\"-DFILAMENT_ENABLE_FGVIEWER=ON\"\n            #FGVIEWER_GRADLE_OPTION=\"-Pcom.google.android.filament.fgviewer\"\n            ;;\n        f)\n            ISSUE_CMAKE_ALWAYS=true\n            ;;\n        g)\n            MATOPT_OPTION=\"-DFILAMENT_DISABLE_MATOPT=ON\"\n            MATOPT_GRADLE_OPTION=\"-Pcom.google.android.filament.matnopt\"\n            ;;\n        i)\n            INSTALL_COMMAND=install\n            ;;\n        m)\n            BUILD_GENERATOR=\"Unix Makefiles\"\n            BUILD_COMMAND=\"make\"\n            ;;\n        p)\n            ISSUE_DESKTOP_BUILD=false\n            platforms=$(echo \"${OPTARG}\" | tr ',' '\\n')\n            for platform in ${platforms}\n            do\n                case $(echo \"${platform}\" | tr '[:upper:]' '[:lower:]') in\n                    desktop)\n                        ISSUE_DESKTOP_BUILD=true\n                    ;;\n                    android)\n                        ISSUE_ANDROID_BUILD=true\n                    ;;\n                    ios)\n                        ISSUE_IOS_BUILD=true\n                    ;;\n                    webgl)\n                        ISSUE_WEBGL_BUILD=true\n                    ;;\n                    all)\n                        ISSUE_ANDROID_BUILD=true\n                        ISSUE_IOS_BUILD=true\n                        ISSUE_DESKTOP_BUILD=true\n                        ISSUE_WEBGL_BUILD=false\n                    ;;\n                    *)\n                        echo \"Unknown platform ${platform}\"\n                        echo \"Platform must be one of [desktop|android|ios|webgl|all]\"\n                        echo \"\"\n                        exit 1\n                    ;;\n                esac\n            done\n            ;;\n        q)\n            ABI_ARMEABI_V7A=false\n            ABI_ARM64_V8A=false\n            ABI_X86=false\n            ABI_X86_64=false\n            ABI_GRADLE_OPTION=\"${OPTARG}\"\n            abis=$(echo \"${OPTARG}\" | tr ',' '\\n')\n            for abi in ${abis}\n            do\n                case $(echo \"${abi}\" | tr '[:upper:]' '[:lower:]') in\n                    armeabi-v7a)\n                        ABI_ARMEABI_V7A=true\n                    ;;\n                    arm64-v8a)\n                        ABI_ARM64_V8A=true\n                    ;;\n                    x86)\n                        ABI_X86=true\n                    ;;\n                    x86_64)\n                        ABI_X86_64=true\n                    ;;\n                    all)\n                        ABI_ARMEABI_V7A=true\n                        ABI_ARM64_V8A=true\n                        ABI_X86=true\n                        ABI_X86_64=true\n                    ;;\n                    *)\n                        echo \"Unknown abi ${abi}\"\n                        echo \"ABI must be one of [armeabi-v7a|arm64-v8a|x86|x86_64|all]\"\n                        echo \"\"\n                        exit 1\n                    ;;\n                esac\n            done\n            ;;\n        u)\n            ISSUE_DEBUG_BUILD=true\n            RUN_TESTS=true\n            ;;\n        v)\n            VULKAN_ANDROID_OPTION=\"-DFILAMENT_SUPPORTS_VULKAN=OFF\"\n            VULKAN_ANDROID_GRADLE_OPTION=\"-Pcom.google.android.filament.exclude-vulkan\"\n            echo \"Disabling support for Vulkan in the core Filament library.\"\n            echo \"Consider using -c after changing this option to clear the Gradle cache.\"\n            ;;\n        s)\n            IOS_BUILD_SIMULATOR=true\n            echo \"iOS simulator support enabled.\"\n            ;;\n        e)\n            EGL_ON_LINUX_OPTION=\"-DFILAMENT_SUPPORTS_EGL_ON_LINUX=ON -DFILAMENT_SKIP_SDL2=ON -DFILAMENT_SKIP_SAMPLES=ON\"\n            echo \"EGL on Linux support enabled; skipping SDL2.\"\n            ;;\n        l)\n            IOS_BUILD_SIMULATOR=true\n            BUILD_UNIVERSAL_LIBRARIES=true\n            echo \"Building universal libraries.\"\n            ;;\n        w)\n            ISSUE_WEB_DOCS=true\n            ;;\n        k)\n            BUILD_ANDROID_SAMPLES=true\n            ANDROID_SAMPLES=$(echo \"${OPTARG}\" | tr ',' '\\n')\n            ;;\n        b)  ASAN_UBSAN_OPTION=\"-DFILAMENT_ENABLE_ASAN_UBSAN=ON\"\n            echo \"Enabled ASAN/UBSAN\"\n            ;;\n        x)  BACKEND_DEBUG_FLAG_OPTION=\"-DFILAMENT_BACKEND_DEBUG_FLAG=${OPTARG}\"\n            ;;\n        S)  case $(echo \"${OPTARG}\" | tr '[:upper:]' '[:lower:]') in\n                instanced)\n                    STEREOSCOPIC_OPTION=\"-DFILAMENT_SAMPLES_STEREO_TYPE=instanced\"\n                    ;;\n                multiview)\n                    STEREOSCOPIC_OPTION=\"-DFILAMENT_SAMPLES_STEREO_TYPE=multiview\"\n                    ;;\n                *)\n                    echo \"Unknown stereoscopic type ${OPTARG}\"\n                    echo \"Type must be one of [instanced|multiview]\"\n                    echo \"\"\n                    exit 1\n            esac\n            ;;\n        X)  OSMESA_OPTION=\"-DFILAMENT_OSMESA_PATH=${OPTARG}\"\n            ;;\n        \\?)\n            echo \"Invalid option: -${OPTARG}\" >&2\n            echo \"\"\n            print_help\n            exit 1\n            ;;\n        :)\n            echo \"Option -${OPTARG} requires an argument.\" >&2\n            echo \"\"\n            print_help\n            exit 1\n            ;;\n    esac\ndone\n\nif [[ \"$#\" == \"0\" ]]; then\n    print_help\n    exit 1\nfi\n\nshift $((OPTIND - 1))\n\nfor arg; do\n    if [[ $(echo \"${arg}\" | tr '[:upper:]' '[:lower:]') == \"release\" ]]; then\n        ISSUE_RELEASE_BUILD=true\n    elif [[ $(echo \"${arg}\" | tr '[:upper:]' '[:lower:]') == \"debug\" ]]; then\n        ISSUE_DEBUG_BUILD=true\n    else\n        BUILD_CUSTOM_TARGETS=\"${BUILD_CUSTOM_TARGETS} ${arg}\"\n    fi\ndone\n\nvalidate_build_command\n\nif [[ \"${ISSUE_CLEAN}\" == \"true\" ]]; then\n    build_clean\nfi\n\nif [[ \"${ISSUE_CLEAN_AGGRESSIVE}\" == \"true\" ]]; then\n    build_clean_aggressive\nfi\n\nif [[ \"${ISSUE_DESKTOP_BUILD}\" == \"true\" ]]; then\n    check_debug_release_build build_desktop\nfi\n\nif [[ \"${ISSUE_ANDROID_BUILD}\" == \"true\" ]]; then\n    check_debug_release_build build_android\nfi\n\nif [[ \"${ISSUE_IOS_BUILD}\" == \"true\" ]]; then\n    check_debug_release_build build_ios\nfi\n\nif [[ \"${ISSUE_WEBGL_BUILD}\" == \"true\" ]]; then\n    check_debug_release_build build_webgl\nfi\n\nif [[ \"${ISSUE_WEB_DOCS}\" == \"true\" ]]; then\n    build_web_docs\nfi\n\nif [[ \"${RUN_TESTS}\" == \"true\" ]]; then\n    run_tests\nfi\n\nif [[ \"${PRINT_MATDBG_HELP}\" == \"true\" ]]; then\n    print_matdbg_help\nfi\n\nif [[ \"${PRINT_FGVIEWER_HELP}\" == \"true\" ]]; then\n    print_fgviewer_help\nfi\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "filament",
          "type": "tree",
          "content": null
        },
        {
          "name": "ide",
          "type": "tree",
          "content": null
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "shaders",
          "type": "tree",
          "content": null
        },
        {
          "name": "site",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}