{
  "metadata": {
    "timestamp": 1736566375923,
    "page": 138,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "assimp/assimp",
      "stars": 11181,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.7373046875,
          "content": "# Commented out parameters are those with the same value as base LLVM style\n# We can uncomment them if we want to change their value, or enforce the\n# chosen value in case the base style changes (last sync: Clang 6.0.1).\n---\n### General config, applies to all languages ###\nBasedOnStyle:  LLVM\nAccessModifierOffset: -4\nAlignAfterOpenBracket: DontAlign\n# AlignConsecutiveAssignments: false\n# AlignConsecutiveDeclarations: false\n# AlignEscapedNewlines: Right\n# AlignOperands:   true\nAlignTrailingComments: false\nAllowAllParametersOfDeclarationOnNextLine: false\n# AllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: true\n# AllowShortLoopsOnASingleLine: false\n# AlwaysBreakAfterDefinitionReturnType: None\n# AlwaysBreakAfterReturnType: None\n# AlwaysBreakBeforeMultilineStrings: false\n# AlwaysBreakTemplateDeclarations: false\n# BinPackArguments: true\n# BinPackParameters: true\n# BraceWrapping:\n#   AfterClass:      false\n#   AfterControlStatement: false\n#   AfterEnum:       false\n#   AfterFunction:   false\n#   AfterNamespace:  false\n#   AfterObjCDeclaration: false\n#   AfterStruct:     false\n#   AfterUnion:      false\n#   AfterExternBlock: false\n#   BeforeCatch:     false\n#   BeforeElse:      false\n#   IndentBraces:    false\n#   SplitEmptyFunction: true\n#   SplitEmptyRecord: true\n#   SplitEmptyNamespace: true\n# BreakBeforeBinaryOperators: None\n# BreakBeforeBraces: Attach\n# BreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: false\n# BreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: AfterColon\n# BreakStringLiterals: true\nColumnLimit:     0\n# CommentPragmas:  '^ IWYU pragma:'\n# CompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 8\nContinuationIndentWidth: 8\nCpp11BracedListStyle: false\n# DerivePointerAlignment: false\n# DisableFormat:   false\n# ExperimentalAutoDetectBinPacking: false\n# FixNamespaceComments: true\n# ForEachMacros:\n#   - foreach\n#   - Q_FOREACH\n#   - BOOST_FOREACH\n# IncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '\".*\"'\n    Priority:        1\n  - Regex:           '^<.*\\.h>'\n    Priority:        2\n  - Regex:           '^<.*'\n    Priority:        3\n# IncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: false \n#IndentPPDirectives: AfterHash\nIndentWidth:     4\n# IndentWrappedFunctionNames: false\n# JavaScriptQuotes: Leave\n# JavaScriptWrapImports: true\n# KeepEmptyLinesAtTheStartOfBlocks: true\n# MacroBlockBegin: ''\n# MacroBlockEnd:   ''\n# MaxEmptyLinesToKeep: 1\n# NamespaceIndentation: None\n# PenaltyBreakAssignment: 2\n# PenaltyBreakBeforeFirstCallParameter: 19\n# PenaltyBreakComment: 300\n# PenaltyBreakFirstLessLess: 120\n# PenaltyBreakString: 1000\n# PenaltyExcessCharacter: 1000000\n# PenaltyReturnTypeOnItsOwnLine: 60\n# PointerAlignment: Right\n# RawStringFormats:\n#   - Delimiter:       pb\n#     Language:        TextProto\n#     BasedOnStyle:    google\n# ReflowComments:  true\n# SortIncludes:    true\n# SortUsingDeclarations: true\n# SpaceAfterCStyleCast: false\n# SpaceAfterTemplateKeyword: true\n# SpaceBeforeAssignmentOperators: true\n# SpaceBeforeParens: ControlStatements\n# SpaceInEmptyParentheses: false\n# SpacesBeforeTrailingComments: 1\n# SpacesInAngles:  false\n# SpacesInContainerLiterals: true\n# SpacesInCStyleCastParentheses: false\n# SpacesInParentheses: false\n# SpacesInSquareBrackets: false\nTabWidth:        4\nUseTab:          Never\n---\n### C++ specific config ###\nLanguage:        Cpp\nStandard:        Cpp11\n---\n### ObjC specific config ###\nLanguage:        ObjC\nStandard:        Cpp11\nObjCBlockIndentWidth: 4\n# ObjCSpaceAfterProperty: false\n# ObjCSpaceBeforeProtocolList: true\n---\n### Java specific config ###\nLanguage:        Java\n# BreakAfterJavaFieldAnnotations: false\n...\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4033203125,
          "content": "# See <http://EditorConfig.org> for details\n\nroot = true\n\n[CMakeLists.txt,*.cmake{,.in}]\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nindent_size = 2\nindent_style = space\n\n[*.h.in]\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nindent_size = 4\nindent_style = space\n\n[*.txt]\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5498046875,
          "content": "# Declare files that will always have LF line endings on checkout.\n*.cpp text eol=lf\n*.h text eol=lf\n*.c text eol=lf\n*.cc text eol=lf\n*.cpp text eol=lf\n*.rc text eol=lf\n*.hpp text eol=lf\n*.txt text eol=lf\n*.cmake text eol=lf\n*.sh text eol=lf\nCHANGES text eol=lf\nCREDITS text eol=lf\nLICENSE text eol=lf\nReadme.md text eol=lf\n# make sure that repo-specific settings (.gitignore, CI-setup,...)\n# are excluded from the source-package generated via 'git archive'\n.git*      \texport-ignore\n/.travis*\texport-ignore\n/.coveralls*\texport-ignore\nappveyor.yml\texport-ignore\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.4619140625,
          "content": ".idea\nbuild\n.project\n*.kdev4*\n.DS_Store\n\n# build artefacts\n*.o\n*.a\n\n# Visual Studio\n*.sln\n*.ncb\n*.vcproj\n*.vcxproj.user\n*.VC.db\n*.VC.db-shm\n*.VC.db-wal\n*.VC.opendb\n*.ipch\n.vs/\nout/\nCMakeSettings.json\n\n# Output\nbin/\nlib/\nx64/\n# QtCreator\nCMakeLists.txt.user\n\n# Generated\nassimp.pc\nassimp.aps\nrevision.h\ncontrib/zlib/zconf.h\ncontrib/zlib/zlib.pc\ninclude/assimp/config.h\nunit.vcxproj.user\n\n# CMake\nCMakeCache.txt\nCMakeFiles\ncmake_install.cmake\ncmake_uninstall.cmake\n*.dir/\nassimp-config.cmake\nassimp-config-version.cmake\nassimpTargets*.cmake\n\n# MakeFile\nMakefile\ncode/Makefile\ntest/Makefile\ntest/headercheck/Makefile\ntools/assimp_cmd/Makefile\n\n# Tests\ntest/results\ntest/readlinetest*\n\n# Python\n__pycache__\n*.log\n*.vcxproj\n*.filters\n*.tlog\nAssimp.sdf\ntest/gtest/tmp/gtest-gitupdate.cmake\ntest/gtest/tmp/gtest-gitclone.cmake\ntest/gtest/tmp/gtest-cfgcmd.txt.in\ntest/gtest/tmp/gtest-cfgcmd.txt\ntest/gtest/src/gtest-stamp/gtest-download.cmake\ntest/gtest/src/gtest-stamp/gtest-configure.cmake\ntest/gtest/src/gtest-stamp/gtest-build.cmake\ntest/gtest/src/gtest-stamp/Debug/gtest-patch\n*.cache\ntest/gtest/src/gtest-stamp/Debug/gtest-build\n*.suo\n*.lib\ntest/gtest/src/gtest-stamp/Debug/\ntools/assimp_view/assimp_viewer.vcxproj.user\n*.pyc\n\n### Rust ###\n# Generated by Cargo; will have compiled files and executables\nport/assimp_rs/target/\n# Backup files generated by rustfmt\nport/assimp_rs/**/*.rs.bk\n\n# Unix editor backups\n*~\ntest/gtest/src/gtest-stamp/gtest-gitinfo.txt\ntest/gtest/src/gtest-stamp/gtest-gitclone-lastrun.txt\nAssimp.opensdf\ncontrib/zlib/CTestTestfile.cmake\ncontrib/zlib/Debug/zlibstaticd.pdb\nipch/assimp_viewer-44bbbcd1/assimp_viewerd-ccc45335.ipch\nbin64/assimp-vc140-mt.dll\nbin64/assimp-vc140-mtd.dll\nlib64/assimp-vc140-mt.exp\nlib64/assimp-vc140-mtd.exp\nlib64/assimp-vc140-mtd.ilk\nlib64/assimp-vc140-mtd.pdb\nbin64/assimp-vc120-mt.dll\nbin64/assimp-vc120-mtd.dll\nlib64/assimp-vc120-mtd.pdb\nlib64/assimp-vc120-mtd.ilk\nlib64/assimp-vc120-mtd.exp\nlib64/assimp-vc120-mt.exp\nxcuserdata\n\ncmake-build-debug\ninstall_manifest.txt\ntools/assimp_qt_viewer/moc_glview.cpp\ntools/assimp_qt_viewer/moc_glview.cpp_parameters\ntools/assimp_qt_viewer/moc_mainwindow.cpp\ntools/assimp_qt_viewer/moc_mainwindow.cpp_parameters\ntools/assimp_qt_viewer/ui_mainwindow.h\n\n#Generated directory\ngenerated/*\n\n# 3rd party cloned repos/tarballs etc\n# meshlab repo, automatically cloned via CMake (to gain 2 source files for VRML file format conversion)\ncontrib/meshlab/autoclone\n# tinyusdz repo, automatically cloned via CMake\ncontrib/tinyusdz/autoclone\n"
        },
        {
          "name": "BUILDBINARIES_EXAMPLE.bat",
          "type": "blob",
          "size": 0.9208984375,
          "content": ":: This is an example file to generate binaries using Windows Operating System\n:: This script is configured to be executed from the source directory\n\n:: Compiled binaries will be placed in BINARIES_DIR\\code\\CONFIG\n\n:: NOTE\n:: The build process will generate a config.h file that is placed in BINARIES_DIR\\include\n:: This file must be merged with SOURCE_DIR\\include\n:: You should write yourself a script that copies the files where you want them.\n:: Also see: https://github.com/assimp/assimp/pull/2646\n\nSET SOURCE_DIR=.\nSET GENERATOR=Visual Studio 16 2019\n\nSET BINARIES_DIR=\"./build/Win32\"\ncmake . -G \"%GENERATOR%\" -A Win32 -S %SOURCE_DIR% -B %BINARIES_DIR%\ncmake --build %BINARIES_DIR% --config debug\ncmake --build %BINARIES_DIR% --config release\n\nSET BINARIES_DIR=\"./build/x64\"\ncmake . -G \"%GENERATOR%\" -A x64 -S %SOURCE_DIR% -B %BINARIES_DIR%\ncmake --build %BINARIES_DIR% --config debug\ncmake --build %BINARIES_DIR% --config release\n\nPAUSE\n"
        },
        {
          "name": "Build.md",
          "type": "blob",
          "size": 5.6787109375,
          "content": "# Build / Install Instructions\n\n## Manual build instructions\n### Install prerequisites\nYou need to install\n* cmake\n* Your compiler\n\n### Get the source\nMake sure you have a working git-installation. Open a command prompt and clone the Asset-Importer-Lib via:\n```bash\ngit clone https://github.com/assimp/assimp.git\n```\n### Build from source:\n* For *assimp.lib* without any tools:\n```bash\ncd assimp\ncmake CMakeLists.txt\ncmake --build .\n```\n\n* For assimp with the common tools like *assimp-cmd*\n```bash\ncd assimp\ncmake CMakeLists.txt -DASSIMP_BUILD_ASSIMP_TOOLS=ON\ncmake --build .\n```\nNote that by default this builds a shared library into the `bin` directory. If you want to build it as a static library see the build options at the bottom of this file.\n\n### Build instructions for Windows with Visual-Studio\nFirst, you have to install Visual-Studio on your windows-system. You can get the Community-Version for free here: https://visualstudio.microsoft.com/de/downloads/\nTo generate the build environment for your IDE open a command prompt, navigate to your repo and type:\n```bash\ncmake CMakeLists.txt\n```\nThis will generate the project files for the visual studio. All dependencies used to build Asset-Importer-Lib shall be part of the repo. If you want to use you own zlib installation this is possible as well. Check the options for it.\n\n### Build instructions for Windows with UWP\nSee <https://stackoverflow.com/questions/40803170/cmake-uwp-using-cmake-to-build-universal-windows-app>\n\n### Build instructions for MinGW\n Older versions of MinGW's compiler (e.g. 5.1.0) do not support the -mbig_obj flag \nrequired to compile some of assimp's files, especially for debug builds.\nVersion 7.3.0 of g++-mingw-w64 & gcc-mingw-w64 appears to work.\n\nPlease see [CMake Cross Compiling](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling) for general information on CMake Toolchains.\n\nSome users have had success building assimp using MinGW on Linux using [polly](https://github.com/ruslo/polly/).\n\nThe following toolchain, which is not maintained by assimp, seems to work on Linux: [linux-mingw-w64-gnuxx11.cmake](https://github.com/ruslo/polly/blob/master/linux-mingw-w64-gnuxx11.cmake)\n\nThe following toolchain may or may not be helpful for building assimp using MinGW on Windows (untested):\n [mingw-cxx17.cmake](https://github.com/ruslo/polly/blob/master/mingw-cxx17.cmake)\n\nBesides the toolchain, compilation should be the same as for Linux / Unix.\n\n### CMake build options\nThe cmake-build-environment provides options to configure the build. The following options can be used:\n- **ASSIMP_HUNTER_ENABLED (default OFF)**: Enable Hunter package manager support.\n- **BUILD_SHARED_LIBS (default ON)**: Generation of shared libs (dll for windows, so for Linux). Set this to OFF to get a static lib.\n- **ASSIMP_BUILD_FRAMEWORK (default OFF, MacOnly)**: Build package as Mac OS X Framework bundle.\n- **ASSIMP_DOUBLE_PRECISION (default OFF)**: All data will be stored as double values.\n- **ASSIMP_OPT_BUILD_PACKAGES (default OFF)**: Set to ON to generate CPack configuration files and packaging targets.\n- **ASSIMP_ANDROID_JNIIOSYSTEM (default OFF)**: Android JNI IOSystem support is active.\n- **ASSIMP_NO_EXPORT (default OFF)**: Disable Assimp's export functionality.\n- **ASSIMP_BUILD_ZLIB (default OFF)**: Build our own zlib.\n- **ASSIMP_BUILD_ALL_EXPORTERS_BY_DEFAULT (default ON)**: Build Assimp with all exporters enabled.\n- **ASSIMP_BUILD_ALL_IMPORTERS_BY_DEFAULT (default ON)**: Build Assimp with all importers enabled.\n- **ASSIMP_BUILD_ASSIMP_TOOLS (default OFF)**: If the supplementary tools for Assimp are built in addition to the library.\n- **ASSIMP_BUILD_SAMPLES (default OFF)**: If the official samples are built as well (needs Glut).\n- **ASSIMP_BUILD_TESTS (default ON)**: If the test suite for Assimp is built in addition to the library.\n- **ASSIMP_COVERALLS (default OFF)**: Enable this to measure test coverage.\n- **ASSIMP_INSTALL (default ON)**: Install Assimp library. Disable this if you want to use Assimp as a submodule.\n- **ASSIMP_WARNINGS_AS_ERRORS (default ON)**: Treat all warnings as errors.\n- **ASSIMP_ASAN (default OFF)**: Enable AddressSanitizer.\n- **ASSIMP_UBSAN (default OFF)**: Enable Undefined Behavior sanitizer.\n- **ASSIMP_BUILD_DOCS (default OFF)**: Build documentation using Doxygen. OBSOLETE, see https://github.com/assimp/assimp-docs\n- **ASSIMP_INJECT_DEBUG_POSTFIX (default ON)**: Inject debug postfix in .a/.so/.lib/.dll lib names\n- **ASSIMP_IGNORE_GIT_HASH (default OFF)**: Don't call git to get the hash.\n- **ASSIMP_INSTALL_PDB (default ON)**: Install MSVC debug files.\n- **USE_STATIC_CRT (default OFF)**: Link against the static MSVC runtime libraries.\n- **ASSIMP_BUILD_DRACO (default OFF)**: Build Draco libraries. Primarily for glTF.\n- **ASSIMP_BUILD_ASSIMP_VIEW (default ON, if DirectX found, OFF otherwise)**: Build Assimp view tool (requires DirectX).\n\n### Install prebuild binaries\n## Install on all platforms using vcpkg\nYou can download and install assimp using the [vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager:\n```bash\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install assimp\n```\nThe assimp port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n### Install on Ubuntu\nYou can install the Asset-Importer-Lib via apt:\n```\nsudo apt-get update\nsudo apt-get install libassimp-dev\n```\n\n### Install pyassimp\nYou need to have pip installed:\n```\npip install pyassimp\n```\n\n### Get the SDK from itchi.io\nJust check [itchi.io](https://kimkulling.itch.io/the-asset-importer-lib)\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 24.4970703125,
          "content": "----------------------------------------------------------------------\nCHANGELOG\n----------------------------------------------------------------------\n4.1.0 (2017-12):\n- FEATURES:\n - Export 3MF ( experimental )\n - Import / Export glTF 2\n - Introduce new zib-lib to eb able to export zip-archives\n- FIXES/HOUSEKEEPING:\n - Added missing include to stdlib.h and remove load library call\n - Fix install for builds with MSVC compiler and NMake.\n - Update list of supported file formats.\n - Add TriLib to the official list of supported ports.\n - Re-enabling PACK_STRUCT for MDL files.\n - Use std.::unique_ptr\n - Update D3MFExporter.h\n - Update MD3Loader.cpp, using index\n - Fix all warnings on MSVC14\n - Copy assimp dll to unit folder on windows\n - Update jvm port supported formats\n - Add support for building Mac OS X Framework bundles\n - Check for nullptr dereferencing before copying scene data\n - Update ValidateDataStructure.h, typo\n - Enable data structure validation in cases where it doesn't cause failures\n - Remove some dead assignments\n - fast_atof: Silence some uninitialized variable warnings\n - Check for area test if the face is a triangle.\n - Set mNumUVComponents to 0 when deleting texture coordinate sets\n - Only scale the root node because this will rescale all children nodes as well.\n - Issue 1514: Fix frame pointer arithmetic\n - Prevent failing stringstream to crash the export process\n - powf -> pow\n - add Defines.h to include folder for install.\n - Android:\n  - Fix android build\n  - Fix assimp for cross compile for android\n  - Use define for D_FILE_OFFSET_BITS only for not-android systems.\n - FBX:\n  - Fix handling with embedded textures\n  - FBX 7500 Binary reading\n  - Remove dead assignment\n  - Fix export of deleted meshes; Add LazyDict::Remove method\n  - Log an error instead of letting the fbx-importer crash. ( issue 213 )\n  - Replace bad pointer casting with memcpy\n  - Remove useless const qualifier from return value\n  - Add explicit instantiation of log_prefix so other FBX source files can see it\n  - add missing inversion of postrotation matrix for fbx.\n  - FIReader: Silence uninitialized variable warning\n  - Update version check in FBX reader to check for version >= 7500\n  - Use actual min/max of anim keys when start/stop time is missing\n- GLTF1:\n - Fix output of glTF 1 version string\n - Fix delete / delete[] mismatch in glTFAsset\n - Don’t ignore rgba(1,1,1,1) color properties\n - glTF2 primitives fixes\n - Don’t ignore rgba(1,1,1,1) color properties\n - Fix delete / delete[] mismatch in glTFAsset\n - Remove KHR_binary_glTF code\n - glTF nodes can only hold one mesh. this simply assigns to and check’s a Node’s Mesh\n - version in glb header is stored as uint32_t\n- GLTF2:\n - node name conflict fix\n - Fix transform matrices multiplication order\n - Preserve node names when importing\n - Add support for tangents in import\n - Fix typo on gltf2 camera parameters\n - Moved byteStride from accessor to bufferView\n - Implemented reading binary glTF2 (glb) files\n - Fix signed/unsigned warning\n - Add postprocess step for scaling\n - Fix shininess to roughness conversion\n - Prefer “BLEND” over “MASK” as an alphaMode default\n - Approximate specularity / glossiness in metallicRoughness materials\n - Diffuse color and diffuse texture import and export improvements\n - Addressed some mismatched news/deletes caused by the new glTF2 sources.\n - Fix delete / delete[] mismatches in glTF2 importer\n - use correct name of exporter to gltf2\n - Fix possible infinite loop when exporting to gltf2\n - Fix glTF2::Asset::FindUniqueID() when the input string is >= 256 chars\n - Fix glTF2 alphaMode storage and reading\n - Fix glTF 2.0 multi-primitive support\n - Load gltf .bin files from correct directory\n - Add support for importing both glTF and glTF2 files\n - ampler improvements; Add new LazyDict method\n - Changes to GLTF2 materials\n - Remove Light, Technique references\n - Start removing materials common, and adding pbrSpecularGlossiness\n - Use !ObjectEmpty() vs. MemberCount() > 0\n - Working read, import, export, and write of gltf2 (pbr) material\n - Check in gltf2 models to test directory\n - Remove un-needed test models\n - Start managing and importing gltf2 pbr materials\n - Update glTF2 Asset to use indexes\n - Duplicate gltfImporter as gltf2Importer; Include glTF2 importer in CMake List\n - glTF2: Fix animation export\n - use opacity for diffuse alpha + alphaMode\n- STL:\n - Restore import of multi mesh binary STLs\n- Blender:\n - Silence warning about uninitialized member\n- MDLImporter:\n - Don't take address of packed struct member\n- assimp_cmd:\n - Fix strict-aliasing warnings\n- Open3DGC:\n - Fix strict-aliasing warnings\n - Add assertions to silence static analyzer warnings\n - Remove redundant const qualifiers from return types\n - Fix some uninitialized variable warnings\n - Remove OPEN3DGC and compression references\n- unzip:\n - Remove dead assignment\n - Bail on bad compression method\n - Fix possibly uninitialized variables\n- clipper:\n - Add assertion to silence a static analyzer warning\n- OpenDDLExport:\n - Reduce scope of a variable\n - Remove dead variable\n - Remove dead assignment\n - Fix another potential memory leak\n- X3DImporter:\n - Add assertions to silence static analyzer warnings\n - Add missing unittest\n - Workaround for buggy Android NDK (issue #1361)\n- TerragenLoader:\n - Remove unused variable\n- SIBImporter:\n - Add assertions to silence static analyzer warnings\n- IFC:\n - Remove dead code\n - Add explicit instantiation of log_prefix so IFCMaterial.cpp can see it\n- PLY:\n - Remove dead assignment and reduce scope of a variable\n - fix vertex attribute lookup.\n- OpenGEX:\n - Add assertion to silence a static analyzer warning\n - Fix for TextureFile with number in file name\n - Return early when element is TextureFile\n- NFF:\n - Add assertions to silence static analyzer warnings\n - Split up some complicated assignments\n- Raw: Fix misleading indentation warning\n - Reduce scope of a variable\n- LWO\n - Reduce scope of a variable\n- IRRLoader:\n - Fix confusing boolean casting\n- AssbinExporter:\n - Add assertion to silence a static analyzer warning\n- ASE:\n - Add assertion to silence a static analyzer warning\n- AMFImporter:\n - Add assertion to silence a static analyzer warning\n - Add a block\n- OptimizeGraph:\n - Fix possible null pointer dereference\n - RemoveRedundantMaterials:\n - Add assertion to silence a static analyzer warning\n- ImproveCacheLocality:\n - Add assertion to silence a static analyzer warning\n- RemoveRedundantMaterials:\n - Set pointer to nullptr after deleting it\n- Travis:\n - Disable unit tests in scan-build config\n - Move slower builds earlier to improve parallelization\n - Add static analysis to build\n - Remove unused branch rule for travis.\n - Add Clang UBSan build configuration\n - Treat warnings as errors, without typos this time\n- Unittests:\n - Add VS-based source groups for the unittests.\n- Collada:\n - export <library_animations> tag\n - Update ColladaExporter.cpp\n - Silence uninitialized variable warning\n - Add support for line strip primitives\n- Obj Wavefront:\n - check in exporting against out-of-bounds-access .\n - Issue 1351: use correct name for obj-meshname export for groups.\n - fix mem-lead: face will be not released in case of an error.\n - Anatoscope obj exporter nomtl\n - Raise exception when obj file contains invalid face indices\n - Added alternative displacement texture token in OBJ MTL material.\n - Obj: rename attribute from exporter.\n - Fix OBJ discarding all material names if the material library is missing\n- Step:\n - use correct lookup for utf32\n- MD2:\n - Fix MD2 frames containing garbage\n- STL\n - add missing const.\n - Fix memory-alignment bug.\n - Fix issue 104: deal with more solids in one STL file.\n- CMake\n - Fix issue 213: use correct include folder for assimp\n- Doxygen\n - Fix issue 1513: put irrXML onto exclucde list for doxygen run\n- PyAssimp:\n - Search for libassimp.so in LD_LIBRARY_PATH if available.\n - Fix operator precedence issue in header check\n - Split setup.py into multiple lines\n - Detect if Anaconda and fixed 3d_viewer for Python 3\n - created a python3 version of the 3dviewer and fixed the / = float in py3\n- Blender:\n - Fix invalid access to mesh array when the array is empty.\n - Fix short overflow.\n - Silence warning about inline function which is declared but not defined\n- JAssimp\n - Changed license header for IHMC contributions from Apache 2.0 to BSD\n - Add Node metadata to the Jassmip Java API\n - Added supported for custom IO Systems in Java. Implemented ClassLoader IO System\n - Added a link to pure jvm assimp port\n- Clang sanitizer:\n - Undefined Behavior sanitizer\n - Fixed a divide by zero error in IFCBoolean that was latent, but nevertheless a bug\n- B3DImporter:\n - Replace bad pointer casting with memcpy\n- AppVeyor:\n - Cleanup and Addition of VS 2017 and running Tests\n - Fixed File Size reported as 0 in tests that use temporary files\n - x86 isn't a valid VS platform. Win32 it is, then.\n - Replaced the worker image name, which doesn't work as generator name, with a manually created generator name.\n - Cleaned up appveyor setup, added VS 2017 to the build matrix and attempted to add running of tests.\n - Treat warnings as errors on Appveyor\n - Disable warning 4351 on MSVC 2013\n- OpenGEXImporter:\n - Copy materials to scene\n - Store RefInfo in unique_ptr so they get automatically cleaned up\n - Fix IOStream leak\n - Store ChildInfo in unique_ptr so they get automatically cleaned up\n - improve logging to be able to detect error-prone situations.\n-  AMFImporter:\n - Fix memory leak\n- UnrealLoader:\n - Fix IOStream leak\n- Upgrade RapidJSON to get rid of a clang warning\n- zlib:\n - Update zlib contribution\n - Removed unnecessary files from zlib contribution\n - Replaced unsigned long for the crc table to z_crc_t, to match what is returned by get-crc_table\n- MakeVerboseFormat:\n  - Fix delete / delete[] mismatches in MakeVerboseFormat\n- MaterialSystem:\n - Fix out-of-bounds read in MaterialSystem unit test\n- SIB:\n - Added support for SIB models from Silo 2.5\n- AssbinExporter:\n - Fix strict aliasing violation\n - Add Write specialization for aiColor3D\n- DefaultLogger:\n - Whitespace cleanup to fix GCC misleading indentation warning\n- MDP:\n - Fix encoding issues.\n - PreTransformVertices:\n - fix name lost in mesh and nodes when load with flag\n- C4D:\n - Fixes for C4D importer\n- Unzip:\n - Latest greatest.\n\n4.0.1 (2017-07-28)\n    - FIXES/HOUSEKEEPING:\n    - fix version test.\n    - Not compiling when using ASSIMP_DOUBLE_PRECISION\n    - Added support for python3\n    - Check if cmake is installed with brew\n    - Low performance in OptimizeMeshesProcess::ProcessNode with huge numbers of meshes\n    - Elapsed seconds not shown correctly\n    - StreamReader: fix out-of-range exception\n    - PPdPmdParser: fix compilation for clang\n\n\n4.0.0 (2017-07-18)\n\nFEATURES:\n    - Double precision support provided ( available via cmake option )\n\t- QT-Widget based assimp-viewer ( works for windows, linux, osx )\n\t- Open3DGC codec supported by glFT-importer\n\t- glTF: Read and write transparency values\n\t- Add Triangulate post-processing step to glTF exporters\n\t- Update rapidjson to v1.0.2\n\t- Added method to append new metadata to structure\n\t- Unittests: intoduce a prototype model differ\n\t- X3D support\n\t- AMF support\n\t- Lugdunum3D support\n\t- Obj-Importer: obj-homogeneous_coords support\n\t- Obj-Importer: new streaming handling\n\t- Added support for 64 bit version header introduced in FbxSdk2016\n\t- Travis: enable coverall support.\n\t- PyAssimp: New version of the pyASSIMP 3D viewer, with much improved 3D controls\n    - Morph animation support for collada\t\n\t- Added support for parameters Ni and Tf in OBJ/MTL file format\n\t- aiScene: add method to add children\n\t- Added new option to IFC importer to control tessellation angle + removed unused IFC option\n\t- aiMetaData: introduce aiMetaData::Dealloc\n\t- Samples: add a DX11 example\n\t- travis ci: test on OXS ( XCode 6.3 ) as well\n\t- travis ci: enable sudo support.\n\t- openddlparser: integrate release v0.4.0\n\t- aiMetaData: Added support for metadata in assbin format\n\t\nFIXES/HOUSEKEEPING:\n    - Introduce usage of #pragma statement\n\t- Put cmake-scripts into their own folder\n\t- Fix install pathes ( issue 938 )\n\t- Fix object_compare in blender importer( issue 946 )\n\t- Fix OSX compilation error\n\t- Fix unzip path when no other version was found ( issue 967 )\n\t- Set _FILE_OFFSET_BITS=64 for 32-bit linux ( issue 975 )\n\t- Fix constructor for radjson on OSX\n\t- Use Assimp namespace to fix build for big-endian architectures\n\t- Add -fPIC to C Flags for 64bit linux Shared Object builds\n\t- MDLLoader: fix resource leak.\n\t- MakeVerboseFormat: fix invalid delete statement\n\t- IFC: fix possible use after free access bug\n\t- ComputeUVMappingprocess: add missing initialization for scalar value\n    - Fix invalid release of mat + mesh\n\t- IrrImporter: Fix release functions\n\t- Split mesh before exporting gltf ( issue 995 )\n\t- 3MFImporter: add source group for visual studio\n\t- IFC: Switch generated file to 2 files to fix issue related to <mingw4.9 ( Thanks Qt! )\n\t- ObjImporter: fix test for vertices import\n    - export scene combiner ( issues177 )\n\t- FBX: make lookup test less strict ( issues 994 )\n\t- OpenGEX-Importer: add import of vertex colors ( issue 954 )\n\t- fix bug when exporting mRotationKeys data\n\t- fix mingw build (mingw supports stat64 nowadays)\n\t- cfileio: fix leaks by not closing files in the destructor\n\t- Fix OBJ parser mtllib statement parsing bug.\n\t- Q3BSP-Importer: remove dead code\n\t- Fix BlenderDNA for clang cross compiler.\n\t- ScenePreprocessor: fix invalid index counter.\n\t- Fix compiler warnings ( issue 957 )\n\t- Fix obj .mtl file loading\n\t- Fixed a compile error on MSVC14 x64 caused by the /bigobj flag failing to be set for the 1 and 2-suffixed versions introduced in commit 0a25b076b8968b7ea2aa96d7d1b4381be2d72ce6\n\t- Fixed build warnings on MSVC14 x64\n\t- Remove scaling of specular exponent in OBJFileImporter.cpp\n\t- use ai_assert instead of assert ( issue 1076 )\n\t- Added a preprocessor definition for MSVC to silence safety warnings regarding C library functions. This addresses all warnings for MSVC x86 and x64 when building zlib, tools and viewer as a static lib\n\t- fix parsing of texture name ( issue 899 )\n\t- add warning when detecting invalid mat definition ( issue 1111 )\n\t- copy aiTexture type declaration instead of using decltype for declaration to fix iOS build( issue 1101 )\n\t- FBX: Add additional material properties\n\t- FBX: Correct camera position and clip planes\n    - FBX: Add correct light locations and falloff values\n\t- fix typo ( issue 1141 )\n\t- Fix collada export. Don't duplicate TEXCOORD/NORMALS/COLORS in <vertices> and <polylist> ( issue 1084 )\n\t- OBJParser: set material index when changing current material\n\t- OBJ: check for null mesh before updating material index\n\t- add vertex color export support ( issue 809 )\n\t- Fix memory leak in Collada importer ( issue 1169 )\n\t- add stp to the list of supported extensions for step-files ( issue 1183 )\n\t- fix clang build ( Issue-1169 ) \n\t- fix for FreeBSD\n\t- Import FindPkgMacros to main CMake Configuration\n\t- Extended support for tessellation parameter to more IFC shapes\n\t- defensice handling of utf-8 decode issues ( issue 1211 )\n\t- Fixed compiler error on clang 4.0 running on OSX\n\t- use test extension for exported test files ( issue 1228 )\n\t- Set UVW index material properties for OBJ files\n\t- Fixed no member named 'atop' in global namespace issue for Android NDK compilation\n\t- Apply mechanism to decide use for IrrXML external or internal\n\t- Fix static init ordering bug in OpenGEX importer\n\t- GLTF exporter: ensure animation accessors have same count\n\t- GLTF exporter: convert animation time from ticks to seconds\n\t- Add support for reading texture coordinates from PLY meshes with properties named 'texture_u' and 'texture_v'\n\t- Added TokensForSearch in BlenderLoader to allow CanRead return true for in-memory files.\n\t- fix wrong delete ( issue 1266 )\n\t- OpenGEX: fix invalid handling with color4 token ( issue 1262 )\n\t- LWOLoader: fix link in loader description\n\t- Fix error when custom CMAKE_C_FLAGS is specified\n\t- Fast-atof: log overflow errors\n\t- Obj-Importer: do not break when detecting an overflow ( issue 1244 )\n\t- Obj-Importer: fix parsing of multible line data definitions\n\t- Fixed bug where IFC models with multiple IFCSite only loaded 1 site instead of the complete model\n\t- PLYImporter: - optimize memory and speed on ply importer / change parser to use a file stream - manage texture path in ply \n\t  import - manage texture coords on faces in ply import - correction on point cloud faces generation\n\t- Utf8: integrate new lib ( issue 1158 )\n\t- fixed CMAKE_MODULE_PATH overwriting previous values\n\t- OpenGEX: Fixed bug in material color processing ( issue 1271 )\n\t- SceneCombiner: move header for scenecombiner to public folder.\n\t- GLTF exporter: ensure buffer view byte offsets are correctly aligned\n\t- X3D importer: Added EXPORT and IMPORT to the list of ignored XML tags\n    - X3D Exporter: fixed missing attributes\n    - X3D importer: Fixed import of normals for the single index / normal per vertex case\n    - X3D importer: Fixed handling of inlined files\n    - X3D importer: fixed whitespace handling (issue 1202)\n\t- X3D importer: Fixed iterator on MSVC 2015\n    - X3D importer: Fixed problems with auto, override and regex on older compilers\n    - X3D importer: Fixed missing header file\n    - X3D importer: Fixed path handling\n\t- X3D importer: Implemented support for binary X3D files\n    - fix build without 3DS ( issue 1319 )\n\t- pyassimp: Fixed indices for IndexedTriangleFanSet, IndexedTriangleSet and IndexedTriangleStripSet\n\t- Fixes parameters to pyassimp.load\n\t- Obj-Importe: Fixed texture bug due simultaneously using 'usemtl' and 'usemap' attributes\n\t- check if all exporters are disabled ( issue 1320 )\n\t- Remove std functions deprecated by C++11.\n\t- X-Importer: make it deal with lines\n\t- use correct path for compilers ( issue 1335 )\n\t- Collada: add workaround to deal with polygon with holes \n\t- update python readme\n\t- Use unique node names when loading Collada files\n\t- Fixed many FBX bugs\n\nAPI COMPATIBILITY:\n    - Changed ABI-compatibility to v3.3.1, please rebuild your precompiled libraries ( see issue 1182 )\n\t- VS2010 outdated\n\n3.3.1 (2016-07-08)\n\nFIXES/HOUSEKEEPING:\n    - Setup of default precision for 17 exporters\n    - Fix xcode project files\n    - Fix BlenderTesselator: offsetof operator\n    - Invalid version in cmake file\n    - Update pstdint.h to latest greatest\n\n\n3.3.0 (2016-07-05)\n\nFEATURES:\n    - C++11 support enabled\n    - New regression-test-UI\n    - Experimental glTF-importer support\n    - OpenGEX: add support for cameras and lights\n    - C4D: update to latest Melange-SDK\n    - Add a gitter channel\n    - Coverity check enabled\n    - Switch to <...> include brackets for public headers \n    - Enable export by pyAssimp\n    - CI: check windows build\n    - Add functionality to perform a singlepost-processing step\n    - many more, just check the history\n\nFIXES/HOUSEKEEPING:\n    - Fix of many resource leaks in unittests and main lib\n    - Fix iOS-buildfor X64\n    - Choosing zlib manually for cmake\n    - many more, just check the history\n\n\n3.2.1 (2016-010-10)\n\nFEATURES:\n  - Updated glTF exporter to meet 1.0 specification.\n\nFIXES/HOUSEKEEPING:\n  - Fixed glTF Validator errors for exported glTF format.\n\nISSUES:\n  - Hard coded sampler setting for\n    - magFilter\n    - minFilter\n  - void* in ExportData for accessor max and min.\n\n\n3.2.0 (2015-11-03)\n\nFEATURES:\n  - OpenDDL-Parser is part of contrib-source.\n  - Experimental OpenGEX-support\n  - CI-check for linux and windows\n  - Coverity check added\n  - New regression testsuite.\n\nFIXES/HOUSEKEEPING:\n  - Hundreds of bugfixes  in all parts of the library\n  - Unified line endings\n\n\nAPI COMPATIBILITY:\n  - Removed precompiled header to increase build speed for linux\n\n\n3.1.1 (2014-06-15)\n\nFEATURES:\n   - Support for FBX 2013 and newer, binary and ASCII (this is partly\n     work from Google Summer of Code 2012)\n   - Support for OGRE binary mesh and skeleton format\n   - Updated BLEND support for newer Blender versions\n   - Support for arbitrary meta data, used to hold FBX and DAE metadata\n   - OBJ Export now produces smaller files\n   - Meshes can now have names, this is supported by the major importers\n   - Improved IFC geometry generation\n   - M3 support has been removed\n\nFIXES/HOUSEKEEPING:\n    - Hundreds of bugfixes in all parts of the library\n    - CMake is now the primary build system\n\nAPI COMPATIBILITY:\n    - 3.1.1 is not binary compatible to 3.0 due to aiNode::mMetaData\n      and aiMesh::mName\n    - Export interface has been cleaned up and unified\n    - Other than that no relevant changes\n\n\n3.0 (2012-07-07)\n\nFEATURES:\n   - new export interface similar to the import API.\n   - Supported export formats: Collada, OBJ, PLY and STL\n   - added new import formats: XGL/ZGL, M3 (experimental)\n   - new postprocessing steps: Debone\n   - vastly improved IFC (Industry Foundation Classes) support\n   - introduced API to query importer meta information (such as supported\n       format versions, full name, maintainer info).\n   - reworked Ogre XML import\n   - C-API now supports per-import properties\n\nFIXES/HOUSEKEEPING:\n\n   - hundreds of bugfixes in all parts of the library\n   - unified naming and cleanup of public headers\n   - improved CMake build system\n   - templatized math library\n   - reduce dependency on boost.thread, only remaining spot\n     is synchronization for the C logging API\n\nAPI COMPATIBILITY:\n   - renamed headers, export interface, C API properties and meta data\n     prevent compatibility with code written for 2.0, but in\n     most cases these can be easily resolved\n   - Note: 3.0 is not binary compatible with 2.0\n\n\n2.0 (2010-11-21)\n\nFEATURES:\n   - Add support for static Blender (*.blend) scenes\n   - Add support for Q3BSP scenes\n   - Add a windows-based OpenGL sample featuring texturing & basic materials\n   - Add an experimental progress feedback interface.\n   - Vastly improved performance (up to 500%, depending on mesh size and\n     spatial structure) in some expensive postprocessing steps\n   - AssimpView now uses a reworked layout which leaves more space\n     to the scene hierarchy window\n\n   - Add C# bindings ('Assimp.NET')\n   - Keep BSD-licensed and otherwise free test files in separate\n     folders (./test/models and ./test/models-nonbsd).\n\nFIXES:\n   - Many Collada bugfixes, improve fault tolerance\n   - Fix possible crashes in the Obj loader\n   - Improve the Ogre XML loader\n   - OpenGL-sample now works with MinGW\n   - Fix Importer::FindLoader failing on uppercase file extensions\n   - Fix flawed path handling when locating external files\n   - Limit the maximum number of vertices, faces, face indices and\n     weights that Assimp is able to handle. This is to avoid\n     crashes due to overflowing counters.\n\n   - Updated XCode project files\n   - Further CMAKE build improvements\n\n\nAPI CHANGES:\n   - Add data structures for vertex-based animations (These are not\n     currently used, however ...)\n   - Some Assimp::Importer methods are const now.\n\n   \n1.1 (2010-04-17)\nThis is the list of relevant changes from the 1.0 (r412) release to 1.1 (r700).\n\nFEATURES:\n  - Vastly improved Collada support\n  - Add MS3D (Milkshape 3D) support\n  - Add support for Ogre XML static meshes\n  - Add experimental COB (TrueSpace) support\n  - Automatic test suite to quickly locate regressions\n  - D bindings (`dAssimp`)\n  - Python 2.n bindings (`PyAssimp`)\n  - Add basic support for Unicode input files (utf8, utf16 and utf32)\n  - Add further utilities to the `assimp` tool (xml/binary dumps, quick file stats)\n  - Switch to a CMAKE-based build system including an install target for unix'es\n  - Automatic evaluation of subdivision surfaces for some formats.\n  - Add `Importer::ReadFileFromMemory` and the corresponding C-API `aiReadFileFromMemory`\n  - Expose further math utilities via the C-API (i.e. `aiMultiplyMatrix4`)\n\n  - Move noboost files away from the public include directory\n  - Many, many bugfixes and improvements in existing loaders and postprocessing steps\n  - Documentation improved and clarified in many places.\n  - Add a sample on using Assimp in conjunction with OpenGL\n\n  - Distribution/packaging: comfortable SDK installer for Windows\n  - Distribution/packaging: improved release packages for other architectures\n\nCRITICAL FIXES:\n  - Resolve problems with clashing heap managers, STL ABIs and runtime libraries (win32)\n  - Fix automatic detection of file type if no file extension is given\n  - Improved exception safety and robustness, prevent leaking of exceptions through the C interface\n  - Fix possible heap corruption due to material properties pulled in incorrectly\n  - Avoid leaking in certain error scenarios\n  - Fix 64 bit compatibility problems in some loaders (i.e. MDL)\n\nBREAKING API CHANGES:\n  - None -\n\nMINOR API BEHAVIOUR CHANGES:\n - Change quaternion orientation to suit to the more common convention (-w).\n - aiString is utf8 now. Not yet consistent, however.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 37.220703125,
          "content": "# Open Asset Import Library (assimp)\n# ----------------------------------------------------------------------\n# Copyright (c) 2006-2024, assimp team\n#\n# All rights reserved.\n#\n# Redistribution and use of this software in source and binary forms,\n# with or without modification, are permitted provided that the\n# following conditions are met:\n#\n# * Redistributions of source code must retain the above\n#   copyright notice, this list of conditions and the\n#   following disclaimer.\n#\n# * Redistributions in binary form must reproduce the above\n#   copyright notice, this list of conditions and the\n#   following disclaimer in the documentation and/or other\n#   materials provided with the distribution.\n#\n# * Neither the name of the assimp team, nor the names of its\n#   contributors may be used to endorse or promote products\n#   derived from this software without specific prior\n#   written permission of the assimp team.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#----------------------------------------------------------------------\nSET(CMAKE_POLICY_DEFAULT_CMP0012 NEW)\nSET(CMAKE_POLICY_DEFAULT_CMP0074 NEW)\nSET(CMAKE_POLICY_DEFAULT_CMP0092 NEW)\n\nCMAKE_MINIMUM_REQUIRED( VERSION 3.22 )\n\n#================================================================================#\n#                    Model formats not enabled by default\n#\n#    3rd party projects may not adhere to strict standards enforced by assimp,\n#    in which case those formats must be opt-in; otherwise the 3rd party code\n#    would fail assimp CI checks\n#================================================================================#\n# M3D format import support (assimp integration no longer supported by M3D format author)\n# User may override these in their CMake script to provide M3D import/export support\n# (M3D importer/exporter was disabled for assimp release 5.1 or later)\noption(ASSIMP_BUILD_M3D_IMPORTER \"Enable M3D file import\" off)\noption(ASSIMP_BUILD_M3D_EXPORTER \"Enable M3D file export\" off)\n\n# Experimental USD importer: disabled, need to opt-in\n# Note: assimp github PR automatic checks will fail the PR due to compiler warnings in\n# the external, 3rd party tinyusdz code which isn't technically part of the PR since it's\n# auto-cloned during build; so MUST disable the feature or the PR will be rejected\noption(ASSIMP_BUILD_USD_IMPORTER \"Enable USD file import\" off)\noption(ASSIMP_BUILD_USD_VERBOSE_LOGS \"Enable verbose USD import debug logging\" off)\n\n# VRML (.wrl/.x3dv) file import support by leveraging X3D importer and 3rd party file\n# format converter to convert .wrl/.x3dv files to X3D-compatible .xml\n# (Need to make this opt-in because 3rd party code triggers lots of CI code quality warnings)\noption(ASSIMP_BUILD_VRML_IMPORTER \"Enable VRML (.wrl/.x3dv) file import\" off)\n#--------------------------------------------------------------------------------#\n#                  Internal impl for optional model formats\n#--------------------------------------------------------------------------------#\n# Internal/private M3D logic\nif (NOT ASSIMP_BUILD_M3D_IMPORTER)\n    ADD_DEFINITIONS( -DASSIMP_BUILD_NO_M3D_IMPORTER)\nendif () # if (not ASSIMP_BUILD_M3D_IMPORTER)\nif (NOT ASSIMP_BUILD_M3D_EXPORTER)\n    ADD_DEFINITIONS( -DASSIMP_BUILD_NO_M3D_EXPORTER)\nendif () # if (not ASSIMP_BUILD_M3D_EXPORTER)\n\n# Internal/private VRML logic\nif (NOT ASSIMP_BUILD_VRML_IMPORTER)\n    ADD_DEFINITIONS( -DASSIMP_BUILD_NO_VRML_IMPORTER)\nendif () # if (not ASSIMP_BUILD_VRML_IMPORTER)\n#================================================================================#\n\noption(ASSIMP_BUILD_USE_CCACHE \"Use ccache to speed up compilation.\" on)\n\nif(ASSIMP_BUILD_USE_CCACHE)\n  find_program(CCACHE_PATH ccache)\n  if (CCACHE_PATH)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_PATH})\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ${CCACHE_PATH})\n  endif()\nendif()\n\n# Toggles the use of the hunter package manager\noption(ASSIMP_HUNTER_ENABLED \"Enable Hunter package manager support\" OFF)\n\nIF(ASSIMP_HUNTER_ENABLED)\n  include(\"cmake-modules/HunterGate.cmake\")\n  HunterGate(\n    URL \"https://github.com/cpp-pm/hunter/archive/v0.25.8.tar.gz\"\n    SHA1 \"26c79d587883ec910bce168e25f6ac4595f97033\"\n  )\n  add_definitions(-DASSIMP_USE_HUNTER)\nENDIF()\n\nPROJECT(Assimp VERSION 5.4.3)\n\n# All supported options ###############################################\n\nOPTION( BUILD_SHARED_LIBS\n  \"Build package with shared libraries.\"\n  ON\n)\nOPTION( ASSIMP_BUILD_FRAMEWORK\n  \"Build package as Mac OS X Framework bundle.\"\n  OFF\n)\nOPTION( ASSIMP_DOUBLE_PRECISION\n  \"Set to ON to enable double precision processing\"\n  OFF\n)\nOPTION( ASSIMP_OPT_BUILD_PACKAGES\n  \"Set to ON to generate CPack configuration files and packaging targets\"\n  OFF\n)\nOPTION( ASSIMP_ANDROID_JNIIOSYSTEM\n  \"Android JNI IOSystem support is active\"\n  OFF\n)\nOPTION( ASSIMP_NO_EXPORT\n  \"Disable Assimp's export functionality.\"\n  OFF\n)\nOPTION( ASSIMP_BUILD_ASSIMP_TOOLS\n  \"If the supplementary tools for Assimp are built in addition to the library.\"\n  OFF\n)\nOPTION ( ASSIMP_BUILD_SAMPLES\n  \"If the official samples are built as well (needs Glut).\"\n  OFF\n)\nOPTION ( ASSIMP_BUILD_TESTS\n  \"If the test suite for Assimp is built in addition to the library.\"\n  ON\n)\nOPTION ( ASSIMP_COVERALLS\n  \"Enable this to measure test coverage.\"\n  OFF\n)\nOPTION( ASSIMP_INSTALL\n  \"Disable this if you want to use assimp as a submodule.\"\n  ON\n)\nOPTION ( ASSIMP_WARNINGS_AS_ERRORS\n  \"Treat all warnings as errors.\"\n  ON\n)\nOPTION ( ASSIMP_ASAN\n  \"Enable AddressSanitizer.\"\n  OFF\n)\nOPTION ( ASSIMP_UBSAN\n  \"Enable Undefined Behavior sanitizer.\"\n  OFF\n)\nOPTION ( ASSIMP_BUILD_DOCS\n  \"Build documentation using Doxygen.\"\n  OFF\n)\nOPTION( ASSIMP_INJECT_DEBUG_POSTFIX\n  \"Inject debug postfix in .a/.so/.dll lib names\"\n  ON\n)\n\nOPTION ( ASSIMP_IGNORE_GIT_HASH\n   \"Don't call git to get the hash.\"\n   OFF\n)\n\nIF (WIN32)\n  OPTION( ASSIMP_BUILD_ZLIB\n    \"Build your zlib\"\n    ON\n  )\nELSE()\n  OPTION( ASSIMP_BUILD_ZLIB\n    \"Build your zlib\"\n    OFF\n  )\nENDIF()\n\nIF (WIN32)\n  # Use a subset of Windows.h\n  ADD_DEFINITIONS( -DWIN32_LEAN_AND_MEAN )\n\n  IF(MSVC)\n    OPTION( ASSIMP_INSTALL_PDB\n      \"Create MSVC debug symbol files and add to Install target.\"\n      ON )\n    IF(NOT (MSVC_VERSION LESS 1900))\n      # Multibyte character set has been deprecated since at least MSVC2015 (possibly earlier)\n      ADD_DEFINITIONS( -DUNICODE -D_UNICODE )\n    ENDIF()\n\n    # Link statically against c/c++ lib to avoid missing redistributable such as\n    # \"VCRUNTIME140.dll not found. Try reinstalling the app.\", but give users\n    # a choice to opt for the shared runtime if they want.\n    option(USE_STATIC_CRT \"Link against the static runtime libraries.\" OFF)\n\n    # The CMAKE_CXX_FLAGS vars can be overridden by some Visual Studio generators, so we use an alternative\n    # global method here:\n    if (${USE_STATIC_CRT})\n      add_compile_options(\n          $<$<CONFIG:>:/MT>\n          $<$<CONFIG:Debug>:/MTd>\n          $<$<CONFIG:Release>:/MT>\n      )\n    endif()\n  ENDIF()\nENDIF()\n\nIF (IOS AND NOT ASSIMP_HUNTER_ENABLED)\n  IF (NOT CMAKE_BUILD_TYPE)\n    SET(CMAKE_BUILD_TYPE \"Release\")\n  ENDIF ()\n  ADD_DEFINITIONS(-DENABLE_BITCODE)\nENDIF ()\n\n\nIF (ASSIMP_BUILD_FRAMEWORK)\n  SET (BUILD_SHARED_LIBS ON)\n  MESSAGE(STATUS \"Framework bundle building enabled\")\nENDIF()\n\nIF(NOT BUILD_SHARED_LIBS)\n  MESSAGE(STATUS \"Shared libraries disabled\")\n  SET(LINK_SEARCH_START_STATIC TRUE)\n  SET(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX} ${CMAKE_FIND_LIBRARY_SUFFIXES})\nELSE()\n  MESSAGE(STATUS \"Shared libraries enabled\")\nENDIF()\n\n# Define here the needed parameters\nSET (ASSIMP_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})\nSET (ASSIMP_VERSION_MINOR ${PROJECT_VERSION_MINOR})\nSET (ASSIMP_VERSION_PATCH ${PROJECT_VERSION_PATCH})\nSET (ASSIMP_VERSION ${ASSIMP_VERSION_MAJOR}.${ASSIMP_VERSION_MINOR}.${ASSIMP_VERSION_PATCH})\nSET (ASSIMP_SOVERSION 5)\n\nSET( ASSIMP_PACKAGE_VERSION \"0\" CACHE STRING \"the package-specific version used for uploading the sources\" )\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_C_STANDARD 99)\n\nIF(NOT ASSIMP_IGNORE_GIT_HASH)\n  # Get the current working branch\n  EXECUTE_PROCESS(\n    COMMAND git rev-parse --abbrev-ref HEAD\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    OUTPUT_VARIABLE GIT_BRANCH\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    ERROR_QUIET\n  )\n\n  # Get the latest abbreviated commit hash of the working branch\n  EXECUTE_PROCESS(\n    COMMAND git rev-parse --short=8 HEAD\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    OUTPUT_VARIABLE GIT_COMMIT_HASH\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    ERROR_QUIET\n  )\nENDIF()\n\nIF(NOT GIT_COMMIT_HASH)\n  SET(GIT_COMMIT_HASH 0)\nENDIF()\n\nIF(ASSIMP_DOUBLE_PRECISION)\n  ADD_DEFINITIONS(-DASSIMP_DOUBLE_PRECISION)\nENDIF()\n\nINCLUDE_DIRECTORIES( BEFORE\n  ./\n  code/\n  include\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}/include\n)\n\nLIST(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake-modules\" )\nSET(LIBASSIMP_COMPONENT     \"libassimp${ASSIMP_VERSION_MAJOR}.${ASSIMP_VERSION_MINOR}.${ASSIMP_VERSION_PATCH}\" )\nSET(LIBASSIMP-DEV_COMPONENT \"libassimp${ASSIMP_VERSION_MAJOR}.${ASSIMP_VERSION_MINOR}.${ASSIMP_VERSION_PATCH}-dev\" )\nSET(CPACK_COMPONENTS_ALL assimp-bin ${LIBASSIMP_COMPONENT} ${LIBASSIMP-DEV_COMPONENT} assimp-dev)\nSET(ASSIMP_LIBRARY_SUFFIX \"\" CACHE STRING \"Suffix to append to library names\")\n\nIF( UNIX )\n  # Use GNUInstallDirs for Unix predefined directories\n  INCLUDE(GNUInstallDirs)\n  # Ensure that we do not run into issues like http://www.tcm.phy.cam.ac.uk/sw/inodes64.html on 32 bit Linux\n  IF(NOT ${OPERATING_SYSTEM} MATCHES \"Android\")\n    IF ( CMAKE_SIZEOF_VOID_P EQUAL 4) # only necessary for 32-bit Linux\n      ADD_DEFINITIONS(-D_FILE_OFFSET_BITS=64 )\n    ENDIF()\n  ENDIF()\nENDIF()\n\n# Grouped compiler settings ########################################\nIF ((CMAKE_C_COMPILER_ID MATCHES \"GNU\") AND NOT MINGW AND NOT HAIKU)\n  IF(NOT ASSIMP_HUNTER_ENABLED)\n    SET(CMAKE_POSITION_INDEPENDENT_CODE ON)\n  ENDIF()\n\n  IF(CMAKE_CXX_COMPILER_VERSION GREATER_EQUAL 13 AND CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\n    MESSAGE(STATUS \"GCC13 detected disabling \\\"-Wdangling-reference\\\" in Cpp files as it appears to be a false positive\")\n    ADD_COMPILE_OPTIONS(\"$<$<COMPILE_LANGUAGE:CXX>:-Wno-dangling-reference>\")\n  ENDIF()\n  # hide all not-exported symbols\n  IF(CMAKE_HOST_SYSTEM_PROCESSOR MATCHES \"mips64\" )\n    SET(CMAKE_CXX_FLAGS \"-mxgot -fvisibility=hidden -fno-strict-aliasing -Wall ${CMAKE_CXX_FLAGS}\")\n    SET(CMAKE_C_FLAGS \"-fno-strict-aliasing ${CMAKE_C_FLAGS}\")\n    SET(LIBSTDC++_LIBRARIES -lstdc++)\n  ELSE()\n    SET(CMAKE_CXX_FLAGS \"-fvisibility=hidden -fno-strict-aliasing -Wall ${CMAKE_CXX_FLAGS}\")\n    SET(CMAKE_C_FLAGS \"-fno-strict-aliasing ${CMAKE_C_FLAGS}\")\n    SET(LIBSTDC++_LIBRARIES -lstdc++)\n  ENDIF()\nELSEIF(MSVC)\n  # enable multi-core compilation with MSVC\n  IF(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" ) # clang-cl\n    ADD_COMPILE_OPTIONS(/bigobj)\n  ELSE() # msvc\n    ADD_COMPILE_OPTIONS(/MP /bigobj)\n  ENDIF()\n\n  # disable \"elements of array '' will be default initialized\" warning on MSVC2013\n  IF(MSVC12)\n    ADD_COMPILE_OPTIONS(/wd4351)\n  ENDIF()\n  # supress warning for double to float conversion if Double precision is activated\n  ADD_COMPILE_OPTIONS(/wd4244)\n  SET(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /D_DEBUG /Zi /Od\")\n  # Allow user to disable PDBs\n  if(ASSIMP_INSTALL_PDB)\n    SET(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /Zi\")\n    SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /DEBUG:FULL /PDBALTPATH:%_PDB% /OPT:REF /OPT:ICF\")\n  elseif((GENERATOR_IS_MULTI_CONFIG) OR (CMAKE_BUILD_TYPE MATCHES Release))\n    message(\"-- MSVC PDB generation disabled. Release binary will not be debuggable.\")\n  endif()\n  # Source code is encoded in UTF-8\n  ADD_COMPILE_OPTIONS(/source-charset:utf-8)\nELSEIF (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" )\n  IF(NOT ASSIMP_HUNTER_ENABLED)\n    SET(CMAKE_POSITION_INDEPENDENT_CODE ON)\n  ENDIF()\n  SET(CMAKE_CXX_FLAGS \"-fvisibility=hidden -fno-strict-aliasing -Wall -Wno-long-long ${CMAKE_CXX_FLAGS}\" )\n  SET(CMAKE_C_FLAGS \"-fno-strict-aliasing ${CMAKE_C_FLAGS}\")\nELSEIF( MINGW )\n  IF (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.0)\n    message(FATAL_ERROR \"MinGW is too old to be supported. Please update MinGW and try again.\")\n  ELSEIF(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 7.3)\n    message(WARNING \"MinGW is old, if you experience errors, update MinGW.\")\n  ENDIF()\n  IF(NOT ASSIMP_HUNTER_ENABLED)\n    SET(CMAKE_CXX_FLAGS \"-std=gnu++17 ${CMAKE_CXX_FLAGS}\")\n    SET(CMAKE_C_FLAGS \"-fPIC ${CMAKE_C_FLAGS}\")\n  ENDIF()\n    IF (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n      SET(CMAKE_CXX_FLAGS \"-fvisibility=hidden -fno-strict-aliasing -Wno-dangling-reference -Wall -Wno-long-long -Wa,-mbig-obj -g ${CMAKE_CXX_FLAGS}\")\n    ELSE()\n      SET(CMAKE_CXX_FLAGS \"-fvisibility=hidden -fno-strict-aliasing -Wno-dangling-reference -Wall -Wno-long-long -Wa,-mbig-obj -O3 ${CMAKE_CXX_FLAGS}\")\n    ENDIF()\n    SET(CMAKE_C_FLAGS \"-fno-strict-aliasing ${CMAKE_C_FLAGS}\")\nENDIF()\n\nIF ( IOS AND NOT ASSIMP_HUNTER_ENABLED)\n  IF (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    SET(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS} -fembed-bitcode -Og\")\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fembed-bitcode -Og\")\n  ELSE()\n    SET(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS} -fembed-bitcode -O3\")\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fembed-bitcode -O3\")\n  ENDIF()\nENDIF()\n\nIF (ASSIMP_COVERALLS)\n  MESSAGE(STATUS \"Coveralls enabled\")\n\n  INCLUDE(Coveralls)\n  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -g -O0 -fprofile-arcs -ftest-coverage\")\n  SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g -O0 -fprofile-arcs -ftest-coverage\")\nENDIF()\n\nIF (ASSIMP_ASAN)\n  MESSAGE(STATUS \"AddressSanitizer enabled\")\n\n  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\n  SET(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS} -fsanitize=address\")\nENDIF()\n\nIF (ASSIMP_UBSAN)\n  MESSAGE(STATUS \"Undefined Behavior sanitizer enabled\")\n\n  SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=undefined,shift,shift-exponent,integer-divide-by-zero,unreachable,vla-bound,null,return,signed-integer-overflow,bounds,float-divide-by-zero,float-cast-overflow,nonnull-attribute,returns-nonnull-attribute,bool,enum,vptr,pointer-overflow,builtin -fno-sanitize-recover=all\")\n  SET(CMAKE_C_FLAGS   \"${CMAKE_C_FLAGS} -fsanitize=undefined,shift,shift-exponent,integer-divide-by-zero,unreachable,vla-bound,null,return,signed-integer-overflow,bounds,float-divide-by-zero,float-cast-overflow,nonnull-attribute,returns-nonnull-attribute,bool,enum,vptr,pointer-overflow,builtin -fno-sanitize-recover=all\")\nENDIF()\n\nINCLUDE (FindPkgMacros)\nINCLUDE (PrecompiledHeader)\n\n# Set Assimp project output directory variables.\n# Will respect top-level CMAKE_*_OUTPUT_DIRECTORY variables if any are set.\nIF(NOT DEFINED CMAKE_RUNTIME_OUTPUT_DIRECTORY)\n  SET(ASSIMP_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/bin\" CACHE STRING \"Path for runtime output files\")\nELSE()\n  SET(ASSIMP_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} CACHE STRING \"Path for runtime output files\")\nENDIF()\n\nIF(NOT DEFINED CMAKE_LIBRARY_OUTPUT_DIRECTORY)\n  SET(ASSIMP_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/bin\" CACHE STRING \"Path for library output files\")\nELSE()\n  SET(ASSIMP_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY} CACHE STRING \"Path for runtime output files\")\nENDIF()\n\nIF(NOT DEFINED CMAKE_ARCHIVE_OUTPUT_DIRECTORY)\n  SET(ASSIMP_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/lib\" CACHE STRING \"Path for library output files\")\nELSE()\n  SET(ASSIMP_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY} CACHE STRING \"Path for runtime output files\")\nENDIF()\n\n# Macro used to set the output directories of a target to the\n# respective Assimp output directories.\nMACRO(TARGET_USE_COMMON_OUTPUT_DIRECTORY target)\n  set_target_properties(${target} PROPERTIES\n      RUNTIME_OUTPUT_DIRECTORY ${ASSIMP_RUNTIME_OUTPUT_DIRECTORY}\n      LIBRARY_OUTPUT_DIRECTORY ${ASSIMP_LIBRARY_OUTPUT_DIRECTORY}\n      ARCHIVE_OUTPUT_DIRECTORY ${ASSIMP_ARCHIVE_OUTPUT_DIRECTORY}\n  )\nENDMACRO()\n\nget_cmake_property(is_multi_config GENERATOR_IS_MULTI_CONFIG)\n\nIF (ASSIMP_INJECT_DEBUG_POSTFIX AND (is_multi_config OR CMAKE_BUILD_TYPE STREQUAL \"Debug\"))\n  SET(CMAKE_DEBUG_POSTFIX \"d\" CACHE STRING \"Debug Postfix for lib, samples and tools\")\nELSE()\n  SET(CMAKE_DEBUG_POSTFIX \"\" CACHE STRING \"Debug Postfix for lib, samples and tools\")\nENDIF()\n\n# Only generate this target if no higher-level project already has\nIF (NOT TARGET uninstall AND ASSIMP_INSTALL)\n  # add make uninstall capability\n  CONFIGURE_FILE(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake-modules/cmake_uninstall.cmake.in\" \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\" IMMEDIATE @ONLY)\n  ADD_CUSTOM_TARGET(uninstall \"${CMAKE_COMMAND}\" -P \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\")\nENDIF()\n\nIF( UNIX )\n  # Use GNUInstallDirs for Unix predefined directories\n  INCLUDE(GNUInstallDirs)\n\n  SET( ASSIMP_LIB_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR})\n  SET( ASSIMP_INCLUDE_INSTALL_DIR ${CMAKE_INSTALL_INCLUDEDIR})\n  SET( ASSIMP_BIN_INSTALL_DIR ${CMAKE_INSTALL_BINDIR})\nELSE()\n  # Cache these to allow the user to override them on non-Unix platforms\n  SET( ASSIMP_LIB_INSTALL_DIR \"lib\" CACHE STRING\n    \"Path the built library files are installed to.\" )\n  SET( ASSIMP_INCLUDE_INSTALL_DIR \"include\" CACHE STRING\n    \"Path the header files are installed to.\" )\n  SET( ASSIMP_BIN_INSTALL_DIR \"bin\" CACHE STRING\n    \"Path the tool executables are installed to.\" )\n\n  SET(CMAKE_INSTALL_FULL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX}/${ASSIMP_INCLUDE_INSTALL_DIR})\n  SET(CMAKE_INSTALL_FULL_LIBDIR ${CMAKE_INSTALL_PREFIX}/${ASSIMP_LIB_INSTALL_DIR})\n  SET(CMAKE_INSTALL_FULL_BINDIR ${CMAKE_INSTALL_PREFIX}/${ASSIMP_BIN_INSTALL_DIR})\nENDIF()\n\nset(GENERATED_DIR \"${CMAKE_CURRENT_BINARY_DIR}/generated\")\n\nIF(ASSIMP_HUNTER_ENABLED)\n  set(CONFIG_INSTALL_DIR \"lib/cmake/${PROJECT_NAME}\")\n  set(CMAKE_CONFIG_TEMPLATE_FILE \"cmake-modules/assimp-hunter-config.cmake.in\")\n  set(NAMESPACE \"${PROJECT_NAME}::\")\n  set(TARGETS_EXPORT_NAME \"${PROJECT_NAME}Targets\")\n  set(VERSION_CONFIG \"${GENERATED_DIR}/${PROJECT_NAME}ConfigVersion.cmake\")\n  set(PROJECT_CONFIG \"${GENERATED_DIR}/${PROJECT_NAME}Config.cmake\")\nELSE()\n  set(CONFIG_INSTALL_DIR \"${ASSIMP_LIB_INSTALL_DIR}/cmake/assimp-${ASSIMP_VERSION_MAJOR}.${ASSIMP_VERSION_MINOR}\")\n  set(CMAKE_CONFIG_TEMPLATE_FILE \"cmake-modules/assimp-plain-config.cmake.in\")\n  string(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWERCASE)\n  set(NAMESPACE \"${PROJECT_NAME_LOWERCASE}::\")\n  set(TARGETS_EXPORT_NAME \"${PROJECT_NAME_LOWERCASE}Targets\")\n  set(VERSION_CONFIG \"${GENERATED_DIR}/${PROJECT_NAME_LOWERCASE}ConfigVersion.cmake\")\n  set(PROJECT_CONFIG \"${GENERATED_DIR}/${PROJECT_NAME_LOWERCASE}Config.cmake\")\nENDIF()\n\nset(INCLUDE_INSTALL_DIR \"include\")\n\n# Include module with fuction 'write_basic_package_version_file'\ninclude(CMakePackageConfigHelpers)\n\n# Note: PROJECT_VERSION is used as a VERSION\nwrite_basic_package_version_file(\"${VERSION_CONFIG}\" COMPATIBILITY SameMajorVersion)\n\nconfigure_package_config_file(\n    ${CMAKE_CONFIG_TEMPLATE_FILE}\n    \"${PROJECT_CONFIG}\"\n    INSTALL_DESTINATION \"${CONFIG_INSTALL_DIR}\"\n)\n\nif(ASSIMP_INSTALL)\n  install(\n      FILES \"${PROJECT_CONFIG}\" \"${VERSION_CONFIG}\"\n      DESTINATION \"${CONFIG_INSTALL_DIR}\"\n      COMPONENT ${LIBASSIMP-DEV_COMPONENT}\n  )\n\n  install(\n      EXPORT \"${TARGETS_EXPORT_NAME}\"\n      NAMESPACE \"${NAMESPACE}\"\n      DESTINATION \"${CONFIG_INSTALL_DIR}\"\n      COMPONENT ${LIBASSIMP-DEV_COMPONENT}\n  )\nendif()\n\nIF( ASSIMP_BUILD_DOCS )\n  ADD_SUBDIRECTORY(doc)\nENDIF()\n\n# Search for external dependencies, and build them from source if not found\n# Search for zlib\nIF(ASSIMP_HUNTER_ENABLED)\n  hunter_add_package(ZLIB)\n  find_package(ZLIB CONFIG REQUIRED)\n\n  add_definitions(-DASSIMP_BUILD_NO_OWN_ZLIB)\n  set(ZLIB_FOUND TRUE)\n  set(ZLIB_LIBRARIES ZLIB::zlib)\n  set(ASSIMP_BUILD_MINIZIP TRUE)\nELSE()\n  # If the zlib is already found outside, add an export in case assimpTargets can't find it.\n  IF( ZLIB_FOUND AND ASSIMP_INSTALL)\n    INSTALL( TARGETS zlib zlibstatic\n        EXPORT \"${TARGETS_EXPORT_NAME}\")\n  ENDIF()\n\n  IF ( NOT ASSIMP_BUILD_ZLIB )\n    FIND_PACKAGE(ZLIB)\n  ENDIF()\n\n  IF ( NOT ZLIB_FOUND AND NOT ASSIMP_BUILD_ZLIB )\n    message( FATAL_ERROR\n      \"Build configured with -DASSIMP_BUILD_ZLIB=OFF but unable to find zlib\"\n    )\n  ELSEIF( NOT ZLIB_FOUND )\n    MESSAGE(STATUS \"compiling zlib from sources\")\n    INCLUDE(CheckIncludeFile)\n    INCLUDE(CheckTypeSize)\n    INCLUDE(CheckFunctionExists)\n\n    # Explicitly turn off ASM686 and AMD64 cmake options.\n    # The AMD64 option causes a build failure on MSVC and the ASM builds seem to have problems:\n    #\t\thttps://github.com/madler/zlib/issues/41#issuecomment-125848075\n    # Also prevents these options from \"polluting\" the cmake options if assimp is being\n    # included as a submodule.\n    set( ASM686 FALSE CACHE INTERNAL \"Override ZLIB flag to turn off assembly\" FORCE )\n    set( AMD64 FALSE CACHE INTERNAL \"Override ZLIB flag to turn off assembly\" FORCE )\n\n    # compile from sources\n    ADD_SUBDIRECTORY(contrib/zlib)\n    SET(ZLIB_FOUND 1)\n    SET(ZLIB_LIBRARIES zlibstatic)\n    SET(ZLIB_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/contrib/zlib ${CMAKE_CURRENT_BINARY_DIR}/contrib/zlib)\n    # need to ensure we don't link with system zlib or minizip as well.\n    SET(ASSIMP_BUILD_MINIZIP 1)\n  ELSE()\n    ADD_DEFINITIONS(-DASSIMP_BUILD_NO_OWN_ZLIB)\n    SET(ZLIB_LIBRARIES_LINKED -lz)\n  ENDIF()\n  INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})\nENDIF()\n\nIF( NOT IOS )\n  IF( NOT ASSIMP_BUILD_MINIZIP )\n    use_pkgconfig(UNZIP minizip)\n  ENDIF()\nELSE ()\n  IF( NOT BUILD_SHARED_LIBS )\n    IF( NOT ASSIMP_BUILD_MINIZIP )\n      use_pkgconfig(UNZIP minizip)\n    ENDIF()\n  ENDIF ()\nENDIF ()\n\nIF ( ASSIMP_NO_EXPORT )\n  ADD_DEFINITIONS( -DASSIMP_BUILD_NO_EXPORT)\n  MESSAGE( STATUS \"Build an import-only version of Assimp.\" )\nENDIF()\n\nSET ( ASSIMP_BUILD_ARCHITECTURE \"\" CACHE STRING\n  \"describe the current architecture.\"\n)\nIF( ASSIMP_BUILD_ARCHITECTURE STREQUAL \"\")\nELSE()\n  ADD_DEFINITIONS ( -D'ASSIMP_BUILD_ARCHITECTURE=\"${ASSIMP_BUILD_ARCHITECTURE}\"' )\nENDIF()\n\n# ${CMAKE_GENERATOR}\nSET ( ASSIMP_BUILD_COMPILER \"\" CACHE STRING\n  \"describe the current compiler.\"\n)\nIF( ASSIMP_BUILD_COMPILER STREQUAL \"\")\nELSE()\n  ADD_DEFINITIONS ( -D'ASSIMP_BUILD_COMPILER=\"${ASSIMP_BUILD_COMPILER}\"' )\nENDIF()\n\nMARK_AS_ADVANCED ( ASSIMP_BUILD_ARCHITECTURE ASSIMP_BUILD_COMPILER )\n\nSET ( ASSIMP_BUILD_NONFREE_C4D_IMPORTER OFF CACHE BOOL\n  \"Build the C4D importer, which relies on the non-free Cineware SDK.\"\n)\n\nIF (ASSIMP_BUILD_NONFREE_C4D_IMPORTER)\n  SET(C4D_INCLUDES \"${CMAKE_CURRENT_SOURCE_DIR}/contrib/Cineware/includes\")\n\n  IF (WIN32)\n    # pick the correct prebuilt library\n    IF(MSVC143)\n      SET(C4D_LIB_POSTFIX \"_2022\")\n    ELSEIF(MSV142)\n      SET(C4D_LIB_POSTFIX \"_2019\")\n    ELSEIF(MSVC15)\n      SET(C4D_LIB_POSTFIX \"_2017\")\n    ELSEIF(MSVC14)\n      SET(C4D_LIB_POSTFIX \"_2015\")\n    ELSEIF(MSVC12)\n      SET(C4D_LIB_POSTFIX \"_2013\")\n    ELSEIF(MSVC11)\n      SET(C4D_LIB_POSTFIX \"_2012\")\n    ELSEIF(MSVC10)\n      SET(C4D_LIB_POSTFIX \"_2010\")\n    ELSE()\n      MESSAGE( FATAL_ERROR\n        \"C4D for Windows is currently only supported with MSVC 10, 11, 12, 14, 14.2, 14.3\"\n      )\n    ENDIF()\n\n    SET(C4D_LIB_BASE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/contrib/Cineware/libraries/win\")\n\n    SET(C4D_DEBUG_LIBRARIES\n      \"${C4D_LIB_BASE_PATH}/cinewarelib${C4D_LIB_POSTFIX}/cinewarelib_debug.lib\"\n      \"${C4D_LIB_BASE_PATH}/jpeglib${C4D_LIB_POSTFIX}/jpeglib_debug.lib\"\n    )\n    SET(C4D_RELEASE_LIBRARIES\n      \"${C4D_LIB_BASE_PATH}/cinewarelib${C4D_LIB_POSTFIX}/cinewarelib_release.lib\"\n      \"${C4D_LIB_BASE_PATH}/jpeglib${C4D_LIB_POSTFIX}/jpeglib_release.lib\"\n    )\n\n    # winsock and winmm are necessary (and undocumented) dependencies of Cineware SDK because\n    # it can be used to communicate with a running Cinema 4D instance\n    SET(C4D_EXTRA_LIBRARIES WSock32.lib Winmm.lib)\n  ELSEIF (APPLE)\n    SET(C4D_LIB_BASE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/contrib/Cineware/libraries/osx\")\n\n    SET(C4D_DEBUG_LIBRARIES\n      \"${C4D_LIB_BASE_PATH}/debug/libcinewarelib.a\"\n      \"${C4D_LIB_BASE_PATH}/debug/libjpeglib.a\"\n    )\n    SET(C4D_RELEASE_LIBRARIES\n      \"${C4D_LIB_BASE_PATH}/release/libcinewarelib.a\"\n      \"${C4D_LIB_BASE_PATH}/release/libjpeglib.a\"\n    )\n  ELSE ()\n    MESSAGE( FATAL_ERROR\n      \"C4D is currently only available on Windows and macOS with Cineware SDK installed in contrib/Cineware\"\n    )\n  ENDIF ()\nELSE ()\n  ADD_DEFINITIONS( -DASSIMP_BUILD_NO_C4D_IMPORTER )\nENDIF ()\n\nif(ASSIMP_BUILD_DRACO_STATIC)\n  set(ASSIMP_BUILD_DRACO ON)\nendif()\n\n# Draco requires cmake 3.12\nIF (DEFINED CMAKE_VERSION AND \"${CMAKE_VERSION}\" VERSION_LESS \"3.12\")\n  message(NOTICE \"draco requires cmake 3.12 or newer, cmake is ${CMAKE_VERSION} . Draco is disabled\")\n  SET ( ASSIMP_BUILD_DRACO OFF CACHE BOOL \"Disabled: Draco requires newer cmake\" FORCE )\nELSE()\n  OPTION ( ASSIMP_BUILD_DRACO \"If the Draco libraries are to be built. Primarily for glTF\" OFF )\n  IF ( ASSIMP_BUILD_DRACO )\n    # Primarily for glTF v2\n    # Enable Draco glTF feature set\n    set(DRACO_GLTF_BITSTREAM ON CACHE BOOL \"\" FORCE)\n    # Disable unnecessary or omitted components\n    set(DRACO_JS_GLUE OFF CACHE BOOL \"\" FORCE)\n    set(DRACO_WASM OFF CACHE BOOL \"\" FORCE)\n    set(DRACO_MAYA_PLUGIN OFF CACHE BOOL \"\" FORCE)\n    set(DRACO_UNITY_PLUGIN OFF CACHE BOOL \"\" FORCE)\n    set(DRACO_TESTS OFF CACHE BOOL \"\" FORCE)\n\n    IF(ASSIMP_HUNTER_ENABLED)\n      hunter_add_package(draco)\n      find_package(draco CONFIG REQUIRED)\n      set(draco_LIBRARIES draco::draco)\n    ELSE()\n      # Draco 1.4.1 has many warnings and will not build with /WX or -Werror\n      # See https://github.com/google/draco/issues/672\n      # and https://github.com/google/draco/issues/673\n      IF(MSVC)\n        set(DRACO_CXX_FLAGS \"/W0\")\n      ELSE()\n        list(APPEND DRACO_CXX_FLAGS\n          \"-Wno-bool-compare\"\n          \"-Wno-comment\"\n          \"-Wno-maybe-uninitialized\"\n          \"-Wno-sign-compare\"\n          \"-Wno-unused-local-typedefs\"\n        )\n\n        if(NOT ASSIMP_BUILD_DRACO_STATIC)\n          # Draco 1.4.1 does not explicitly export any symbols under GCC/clang\n          list(APPEND DRACO_CXX_FLAGS\n            \"-fvisibility=default\"\n          )\n        endif()\n      ENDIF()\n\n      # Don't build or install all of Draco by default\n      ADD_SUBDIRECTORY( \"contrib/draco\" EXCLUDE_FROM_ALL )\n\n      if(ASSIMP_BUILD_DRACO_STATIC)\n        set_property(DIRECTORY \"contrib/draco\" PROPERTY BUILD_SHARED_LIBS OFF)\n      endif()\n\n      if(MSVC OR WIN32)\n        set(draco_LIBRARIES \"draco\")\n      else()\n        if(ASSIMP_BUILD_DRACO_STATIC)\n          set(draco_LIBRARIES \"draco_static\")\n        else()\n          set(draco_LIBRARIES \"draco_shared\")\n        endif()\n      endif()\n\n      # Don't build the draco command-line tools by default\n      set_target_properties(draco_encoder draco_decoder PROPERTIES\n        EXCLUDE_FROM_ALL TRUE\n        EXCLUDE_FROM_DEFAULT_BUILD TRUE\n      )\n\n      # Do build the draco shared library\n      set_target_properties(${draco_LIBRARIES} PROPERTIES\n        EXCLUDE_FROM_ALL FALSE\n        EXCLUDE_FROM_DEFAULT_BUILD FALSE\n      )\n\n      TARGET_USE_COMMON_OUTPUT_DIRECTORY(${draco_LIBRARIES})\n      TARGET_USE_COMMON_OUTPUT_DIRECTORY(draco_encoder)\n      TARGET_USE_COMMON_OUTPUT_DIRECTORY(draco_decoder)\n\n      set(draco_INCLUDE_DIRS \"${CMAKE_CURRENT_SOURCE_DIR}/contrib/draco/src\")\n\n      # This is probably wrong\n      if (ASSIMP_INSTALL)\n        INSTALL( TARGETS ${draco_LIBRARIES}\n          EXPORT \"${TARGETS_EXPORT_NAME}\"\n          LIBRARY DESTINATION ${ASSIMP_LIB_INSTALL_DIR}\n          ARCHIVE DESTINATION ${ASSIMP_LIB_INSTALL_DIR}\n          RUNTIME DESTINATION ${ASSIMP_BIN_INSTALL_DIR}\n          FRAMEWORK DESTINATION ${ASSIMP_LIB_INSTALL_DIR}\n          COMPONENT ${LIBASSIMP_COMPONENT}\n          INCLUDES DESTINATION include\n        )\n      endif()\n    ENDIF()\n  ENDIF()\nENDIF()\n\n# Main assimp code\nADD_SUBDIRECTORY( code/ )\n\nIF ( ASSIMP_BUILD_ASSIMP_TOOLS )\n  # The viewer for windows only\n  IF (WIN32)\n    FIND_PACKAGE(DirectX)\n    OPTION ( ASSIMP_BUILD_ASSIMP_VIEW \"If the Assimp view tool is built. (requires DirectX)\" ${DirectX_FOUND} )\n    IF ( ASSIMP_BUILD_ASSIMP_VIEW )\n      ADD_SUBDIRECTORY( tools/assimp_view/ )\n    ENDIF ()\n  ELSE()\n    MESSAGE(\"Building Assimp Viewer only supported on Windows.\")\n  ENDIF ()\n  # The command line tool\n  ADD_SUBDIRECTORY( tools/assimp_cmd/ )\nENDIF ()\n\nIF ( ASSIMP_BUILD_SAMPLES )\n  SET( SAMPLES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/samples )\n  SET( SAMPLES_SHARED_CODE_DIR ${SAMPLES_DIR}/SharedCode )\n  IF ( WIN32 )\n    ADD_SUBDIRECTORY( samples/SimpleTexturedOpenGL/ )\n    ADD_SUBDIRECTORY( samples/SimpleTexturedDirectx11 )\n  ENDIF ()\n  ADD_SUBDIRECTORY( samples/SimpleOpenGL/ )\nENDIF ()\n\nIF ( ASSIMP_BUILD_TESTS )\n  ADD_SUBDIRECTORY( test/ )\nENDIF ()\n\n# Generate a pkg-config .pc, revision.h, and config.h for the Assimp library.\nCONFIGURE_FILE( \"${PROJECT_SOURCE_DIR}/assimp.pc.in\" \"${PROJECT_BINARY_DIR}/assimp.pc\" @ONLY )\nIF ( ASSIMP_INSTALL )\n  INSTALL( FILES \"${PROJECT_BINARY_DIR}/assimp.pc\" DESTINATION ${ASSIMP_LIB_INSTALL_DIR}/pkgconfig/ COMPONENT ${LIBASSIMP-DEV_COMPONENT})\nENDIF()\n\nCONFIGURE_FILE(\n  ${CMAKE_CURRENT_LIST_DIR}/include/assimp/revision.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/include/assimp/revision.h\n)\n\nCONFIGURE_FILE(\n  ${CMAKE_CURRENT_LIST_DIR}/include/assimp/config.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/include/assimp/config.h\n)\n\nIF ( ASSIMP_INSTALL )\n  IF(CMAKE_CPACK_COMMAND AND UNIX AND ASSIMP_OPT_BUILD_PACKAGES)\n    # Packing information\n    SET(CPACK_PACKAGE_NAME                    \"assimp{ASSIMP_VERSION_MAJOR}.{ASSIMP_VERSION_MINOR}\")\n    SET(CPACK_PACKAGE_CONTACT \"\" CACHE STRING \"Package maintainer and PGP signer.\")\n    SET(CPACK_PACKAGE_VENDOR                  \"https://github.com/assimp\")\n    SET(CPACK_PACKAGE_DISPLAY_NAME            \"Assimp ${ASSIMP_VERSION}\")\n    SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY     \" - Open Asset Import Library ${ASSIMP_VERSION}\")\n    SET(CPACK_PACKAGE_VERSION                 \"${ASSIMP_VERSION}.${ASSIMP_PACKAGE_VERSION}\" )\n    SET(CPACK_PACKAGE_VERSION_MAJOR           \"${ASSIMP_VERSION_MAJOR}\")\n    SET(CPACK_PACKAGE_VERSION_MINOR           \"${ASSIMP_VERSION_MINOR}\")\n    SET(CPACK_PACKAGE_VERSION_PATCH           \"${ASSIMP_VERSION_PATCH}\")\n    SET(CPACK_PACKAGE_INSTALL_DIRECTORY       \"assimp${ASSIMP_VERSION_MAJOR}.${ASSIMP_VERSION_MINOR}\")\n    SET(CPACK_RESOURCE_FILE_LICENSE           \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\")\n\n    STRING(TOUPPER ${LIBASSIMP_COMPONENT}     \"LIBASSIMP_COMPONENT_UPPER\")\n    STRING(TOUPPER ${LIBASSIMP-DEV_COMPONENT} \"LIBASSIMP-DEV_COMPONENT_UPPER\")\n\n    SET(CPACK_COMPONENT_ASSIMP-BIN_DISPLAY_NAME                       \"tools\")\n    SET(CPACK_COMPONENT_ASSIMP-BIN_DEPENDS                            \"${LIBASSIMP_COMPONENT}\" )\n    SET(CPACK_COMPONENT_${LIBASSIMP_COMPONENT_UPPER}_DISPLAY_NAME     \"libraries\")\n    SET(CPACK_COMPONENT_${LIBASSIMP-DEV_COMPONENT_UPPER}_DISPLAY_NAME \"common headers and installs\")\n    SET(CPACK_COMPONENT_${LIBASSIMP-DEV_COMPONENT_UPPER}_DEPENDS $    \"{LIBASSIMP_COMPONENT}\" )\n    SET(CPACK_COMPONENT_ASSIMP-DEV_DISPLAY_NAME                       \"${CPACK_COMPONENT_${LIBASSIMP-DEV_COMPONENT}_DISPLAY_NAME}\" )\n    SET(CPACK_COMPONENT_ASSIMP-DEV_DEPENDS                            \"${LIBASSIMP-DEV_COMPONENT}\" )\n    SET(CPACK_DEBIAN_BUILD_DEPENDS debhelper cmake zlib1g-dev pkg-config)\n\n    # debian\n    SET(CPACK_DEBIAN_PACKAGE_PRIORITY \"optional\")\n    SET(CPACK_DEBIAN_CMAKE_OPTIONS    \"-DBUILD_ASSIMP_SAMPLES:BOOL=${ASSIMP_BUILD_SAMPLES}\")\n    SET(CPACK_DEBIAN_PACKAGE_SECTION  \"libs\" )\n    SET(CPACK_DEBIAN_PACKAGE_DEPENDS  \"${CPACK_COMPONENTS_ALL}\")\n    SET(CPACK_DEBIAN_PACKAGE_SUGGESTS)\n    SET(CPACK_DEBIAN_PACKAGE_NAME     \"assimp\")\n    SET(CPACK_DEBIAN_PACKAGE_REMOVE_SOURCE_FILES contrib/gtest contrib/zlib workspaces test doc obj samples packaging)\n    SET(CPACK_DEBIAN_PACKAGE_SOURCE_COPY svn export --force)\n    SET(CPACK_DEBIAN_CHANGELOG)\n    execute_process(COMMAND lsb_release -is\n      OUTPUT_VARIABLE _lsb_distribution OUTPUT_STRIP_TRAILING_WHITESPACE\n      RESULT_VARIABLE _lsb_release_failed)\n    SET(CPACK_DEBIAN_DISTRIBUTION_NAME ${_lsb_distribution} CACHE STRING \"Name of the distrubiton\")\n    STRING(TOLOWER ${CPACK_DEBIAN_DISTRIBUTION_NAME} CPACK_DEBIAN_DISTRIBUTION_NAME)\n    IF( ${CPACK_DEBIAN_DISTRIBUTION_NAME} STREQUAL \"ubuntu\" )\n      SET(CPACK_DEBIAN_DISTRIBUTION_RELEASES lucid maverick natty oneiric precise CACHE STRING \"Release code-names of the distrubiton release\")\n    ENDIF()\n    SET(DPUT_HOST \"\" CACHE STRING \"PPA repository to upload the debian sources\")\n    INCLUDE(CPack)\n    INCLUDE(DebSourcePPA)\n  ENDIF()\nENDIF()\n\nif(WIN32)\n  if (CMAKE_SIZEOF_VOID_P EQUAL 8)\n    SET(BIN_DIR \"${PROJECT_SOURCE_DIR}/bin64/\")\n    SET(LIB_DIR \"${PROJECT_SOURCE_DIR}/lib64/\")\n  else()\n    SET(BIN_DIR \"${PROJECT_SOURCE_DIR}/bin32/\")\n    SET(LIB_DIR \"${PROJECT_SOURCE_DIR}/lib32/\")\n  ENDIF()\n\n  IF(MSVC_TOOLSET_VERSION)\n    SET(MSVC_PREFIX \"vc${MSVC_TOOLSET_VERSION}\")\n    SET(ASSIMP_MSVC_VERSION ${MSVC_PREFIX})\n  ELSE()\n    IF(MSVC12)\n      SET(ASSIMP_MSVC_VERSION \"vc120\")\n    ELSEIF(MSVC14)\n      SET(ASSIMP_MSVC_VERSION \"vc140\")\n    ELSEIF(MSVC15)\n      SET(ASSIMP_MSVC_VERSION \"vc141\")\n    ELSEIF(MSV142)\n      SET(ASSIMP_MSVC_VERSION \"vc142\")\n    ELSEIF(MSVC143)\n      SET(ASSIMP_MSVC_VERSION \"vc143\")\n    ENDIF()\n  ENDIF()\n\n  IF(MSVC12 OR MSVC14 OR MSVC15 )\n    ADD_CUSTOM_TARGET(UpdateAssimpLibsDebugSymbolsAndDLLs COMMENT \"Copying Assimp Libraries ...\" VERBATIM)\n    IF(CMAKE_GENERATOR MATCHES \"^Visual Studio\")\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/Release/assimp-${ASSIMP_MSVC_VERSION}-mt.dll\t${BIN_DIR}assimp-${ASSIMP_MSVC_VERSION}-mt.dll VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/Release/assimp-${ASSIMP_MSVC_VERSION}-mt.exp\t${LIB_DIR}assimp-${ASSIMP_MSVC_VERSION}-mt.exp VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/Release/assimp-${ASSIMP_MSVC_VERSION}-mt.lib\t${LIB_DIR}assimp-${ASSIMP_MSVC_VERSION}-mt.lib VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/Debug/assimp-${ASSIMP_MSVC_VERSION}-mtd.dll\t\t${BIN_DIR}assimp-${ASSIMP_MSVC_VERSION}-mtd.dll  VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/Debug/assimp-${ASSIMP_MSVC_VERSION}-mtd.exp\t\t${LIB_DIR}assimp-${ASSIMP_MSVC_VERSION}-mtd.exp VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/Debug/assimp-${ASSIMP_MSVC_VERSION}-mtd.ilk\t\t${LIB_DIR}assimp-${ASSIMP_MSVC_VERSION}-mtd.ilk VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/Debug/assimp-${ASSIMP_MSVC_VERSION}-mtd.lib\t\t${LIB_DIR}assimp-${ASSIMP_MSVC_VERSION}-mtd.lib VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/Debug/assimp-${ASSIMP_MSVC_VERSION}-mtd.pdb\t\t${LIB_DIR}assimp-${ASSIMP_MSVC_VERSION}-mtd.pdb VERBATIM)\n    ELSE()\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/assimp-${ASSIMP_MSVC_VERSION}-mt.dll\t${BIN_DIR}assimp-${ASSIMP_MSVC_VERSION}-mt.dll VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/assimp-${ASSIMP_MSVC_VERSION}-mt.exp\t${LIB_DIR}assimp-${ASSIMP_MSVC_VERSION}-mt.exp VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/assimp-${ASSIMP_MSVC_VERSION}-mt.lib\t${LIB_DIR}assimp-${ASSIMP_MSVC_VERSION}-mt.lib VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/assimp-${ASSIMP_MSVC_VERSION}-mtd.dll\t\t${BIN_DIR}assimp-${ASSIMP_MSVC_VERSION}-mtd.dll  VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/assimp-${ASSIMP_MSVC_VERSION}-mtd.exp\t\t${LIB_DIR}assimp-${ASSIMP_MSVC_VERSION}-mtd.exp VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/assimp-${ASSIMP_MSVC_VERSION}-mtd.ilk\t\t${LIB_DIR}assimp-${ASSIMP_MSVC_VERSION}-mtd.ilk VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/assimp-${ASSIMP_MSVC_VERSION}-mtd.lib\t\t${LIB_DIR}assimp-${ASSIMP_MSVC_VERSION}-mtd.lib VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/assimp-${ASSIMP_MSVC_VERSION}-mtd.pdb\t\t${LIB_DIR}assimp-${ASSIMP_MSVC_VERSION}-mtd.pdb VERBATIM)\n      ADD_CUSTOM_COMMAND(TARGET UpdateAssimpLibsDebugSymbolsAndDLLs COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/code/assimp-${ASSIMP_MSVC_VERSION}-mtd.pdb\t\t${LIB_DIR}assimp-${ASSIMP_MSVC_VERSION}-mtd.pdb VERBATIM)\n    ENDIF()\n  ENDIF()\nENDIF ()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.080078125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.71875,
          "content": "# How to contribute\n\nIf you want to contribute, follow these steps:\n\n- First, create your own clone of assimp.\n- When you want to fix a bug or add a new feature, create a branch on your own fork following [these instructions](https://help.github.com/articles/creating-a-pull-request-from-a-fork/).\n- Push it to your fork of the repository and open a pull request.\n- A pull request will start our continuous integration service, which checks if the build works for Linux and Windows.\n  It will check for memory leaks, compiler warnings and memory alignment issues. If any of these tests fail, fix it and the tests will be restarted automatically.\n  - At the end, we will perform a code review and merge your branch to the master branch.\n"
        },
        {
          "name": "CREDITS",
          "type": "blob",
          "size": 4.4658203125,
          "content": "===============================================================\nOpen Asset Import Library (Assimp)\nDevelopers and Contributors\n===============================================================\n\nThe following is a non-exhaustive list of all constributors over the years.\nIf you think your name should be listed here, drop us a line and we'll add you.\n\n- Alexander Gessler,\n3DS-, BLEND-, ASE-, DXF-, HMP-, MDL-, MD2-, MD3-, MD5-, MDC-, NFF-, PLY-, STL-, RAW-, OFF-, MS3D-, Q3D- and LWO-Loader, Assimp-Viewer, assimp-cmd, -noboost, Website (Design).\n\n- Thomas Schulze,\nX-, Collada-, BVH-Loader, Postprocessing framework. Data structure & Interface design, documentation.\n\n- Kim Kulling,\nObj-, Q3BSD-, OpenGEX-Loader, Logging system, CMake-build-environment, Linux-build, Website ( Admin ), Coverity ( Admin ), Glitter ( Admin ).\n\n- R.Schmidt,\nLinux build, eclipse support.\n\n- Matthias Gubisch,\nAssimp.net\nVisual Studio 9 support, bugfixes.\n\n- Mark Sibly\nB3D-Loader, Assimp testing\n\n- Jonathan Klein\nOgre Loader, VC2010 fixes and CMake fixes.\n\n- Sebastian Hempel,\nPyAssimp (first version)\nCompile-Bugfixes for mingw, add environment for static library support in make.\n\n- Jonathan Pokrass\nSupplied a bugfix concerning the scaling in the md3 loader.\n\n- Andrew Galante,\nSubmitted patches to make Assimp compile with GCC-4, a makefile and the xcode3 workspace.\n\n- Andreas Nagel\nFirst Assimp testing & verification under Windows Vista 64 Bit.\n\n- Marius Schr�der\nAllowed us to use many of his models for screenshots and testing.\n\n- Christian Schubert\nSupplied various XFiles for testing purposes.\n\n- Tizian Wieland\nSearched the web for hundreds of test models for internal use\n\n- John Connors\nSupplied patches for linux and SCons.\n\n- T. R.\nThe GUY who performed some of the CSM mocaps.\n\n- Andy Maloney\nContributed fixes for the documentation and the doxygen markup\n\n- Zhao Lei\nContributed several bugfixes fixing memory leaks and improving float parsing \n\n- sueastside\nUpdated PyAssimp to the latest Assimp data structures and provided a script to keep the Python binding up-to-date.\n\n- Tobias Rittig\nCollada testing with Cinema 4D\n\n- Brad Grantham\nImprovements in OpenGL-Sample.\n\n- Robert Ramirez\nAdd group loading feature to Obj-Loader.\n\n- Chris Maiwald\nMany bugreports, improving Assimp's portability, regular testing & feedback.\n\n- Stepan Hrbek\nBugreport and fix for a obj-materialloader crash.\n\n- David Nadlinger\nD bindings, CMake install support.\n\n- Dario Accornero\nContributed several patches regarding Mac OS/XCode targets, bug reports.\n\n- Martin Walser (Samhayne)\nContributed the 'SimpleTexturedOpenGl' sample.\n\n- Matthias Fauconneau\nContributed a fix for the Q3-BSP loader.\n\n- Jørgen P. Tjernø\nContributed updated and improved xcode workspaces\n\n- drparallax\nContributed the /samples/SimpleAssimpViewX sample\n\n- Carsten Fuchs\nContributed a fix for the Normalize method in aiQuaternion.\n\n- dbburgess\nContributes a Android-specific build issue: log the hardware architecture for ARM.\n\n- alfiereinre7\nContributes a obj-fileparser fix: missing tokens in the obj-token list.\n\n- Roman Kharitonov\nContributes a fix for the configure script environment.\n\n- Ed Diana\nContributed AssimpDelphi (/port/AssimpDelphi).\n\n- rdb\nContributes a bundle of fixes and improvements for the bsp-importer.\n\n- Mick P\nFor contributing the De-bone postprocessing step and filing various bug reports.\n\n- Rosen Diankov\nContributed patches to build assimp debian packages using cmake.\n\n- Mark Page\nContributed a patch to fix the VertexTriangleAdjacency postprocessing step.\n\n- IOhannes\nContributed the Debian build fixes ( architecture macro ).\n\n- gellule\nSeveral LWO and LWS fixes (pivoting). \n\n- Marcel Metz\nGCC/Linux fixes for the SimpleOpenGL sample.\n\n- Brian Miller\nBugfix for a compiler fix for iOS on arm.\n\n- Séverin Lemaignan\nRewrite of PyAssimp, distutils and Python3 support\n\n- albert-wang\nBugfixes for the collada parser\n\n- Ya ping Jin\nBugfixes for uv-tanget calculation.\n\n- Jonne Nauha\nOgre Binary format support\n\n- Filip Wasil, Tieto Poland Sp. z o.o.\nAndroid JNI asset extraction support\n\n- Richard Steffen\nContributed ExportProperties interface\nContributed X File exporter\nContributed Step (stp) exporter\n\n- Thomas Iorns (mesilliac)\nInitial FBX Export support\n\nFor a more detailed list just check: https://github.com/assimp/assimp/network/members\n\n\n========\nPatreons\n========\n\nHuge thanks to our Patreons!\n\n- migenius\n- Marcus\n- Cort\n- elect\n- Steffen\n\n\n===================\nCommercial Sponsors\n===================\n\n- MyDidimo (mydidimo.com): Sponsored development of FBX Export support\n"
        },
        {
          "name": "CodeConventions.md",
          "type": "blob",
          "size": 0.3876953125,
          "content": "\nOpen Asset Import Library Coding Conventions\n==\n\nIf you want to participate as a developer in the **Open Asset Import Library** please read and respect the following coding conventions. This will ensure consistency throughout the codebase and help all the Open Asset Import Library users.\n\nSpacing\n==\n\n* Use UNIX-style line endings (LF)\n* Remove any trailing whitespace\n* Expand tabs to 4 spaces\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.3427734375,
          "content": "FROM gcc:latest\n\nRUN apt-get update && apt-get install --no-install-recommends -y ninja-build cmake \n\nWORKDIR /app\nRUN apt install zlib1g-dev\n\nCOPY . .\n\nRUN mkdir build && cd build && \\\n    cmake -G 'Ninja' \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DASSIMP_BUILD_ASSIMP_TOOLS=ON \\\n    .. && \\\n    ninja -j4 && ninja install\n\nCMD [\"/app/build/bin/unit\"]\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.55078125,
          "content": "\t\n========================================================================\nOpen Asset Import Library (assimp) INSTALL \n========================================================================\n\n------------------------------\nGetting the documentation\n------------------------------\n\nA regularly-updated copy is available at \nhttps://assimp-docs.readthedocs.io/en/latest/\n\n------------------------------\nBuilding Assimp \n------------------------------\n\nJust check the build-instructions which you can find here: https://github.com/assimp/assimp/blob/master/Build.md\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 3.7021484375,
          "content": "Open Asset Import Library (assimp)\n\nCopyright (c) 2006-2021, assimp team\nAll rights reserved.\n\nRedistribution and use of this software in source and binary forms,\nwith or without modification, are permitted provided that the\nfollowing conditions are met:\n\n* Redistributions of source code must retain the above\n  copyright notice, this list of conditions and the\n  following disclaimer.\n\n* Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the\n  following disclaimer in the documentation and/or other\n  materials provided with the distribution.\n\n* Neither the name of the assimp team, nor the names of its\n  contributors may be used to endorse or promote products\n  derived from this software without specific prior\n  written permission of the assimp team.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\n******************************************************************************\n\nAN EXCEPTION applies to all files in the ./test/models-nonbsd folder.\nThese are 3d models for testing purposes, from various free sources\non the internet. They are - unless otherwise stated - copyright of\ntheir respective creators, which may impose additional requirements\non the use of their work. For any of these models, see\n<model-name>.source.txt for more legal information. Contact us if you\nare a copyright holder and believe that we credited you inproperly or\nif you don't want your files to appear in the repository.\n\n\n******************************************************************************\n\nPoly2Tri Copyright (c) 2009-2010, Poly2Tri Contributors\nhttp://code.google.com/p/poly2tri/\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n* Neither the name of Poly2Tri nor the names of its contributors may be\n  used to endorse or promote products derived from this software without specific\n  prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 6.744140625,
          "content": "Open Asset Import Library (assimp)\n==================================\n\nOpen Asset Import Library is a library that loads various 3D file formats into a shared, in-memory format. It supports more than __40 file formats__ for import and a growing selection of file formats for export.\n\n### Current project status ### \n![C/C++ CI](https://github.com/assimp/assimp/workflows/C/C++%20CI/badge.svg)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/9973693b7bdd4543b07084d5d9cf4745)](https://www.codacy.com/gh/assimp/assimp/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=assimp/assimp&amp;utm_campaign=Badge_Grade)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=assimp_assimp&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=assimp_assimp)\n[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/assimp/assimp.svg)](http://isitmaintained.com/project/assimp/assimp \"Average time to resolve an issue\")\n[![Percentage of issues still open](http://isitmaintained.com/badge/open/assimp/assimp.svg)](http://isitmaintained.com/project/assimp/assimp \"Percentage of issues still open\")\n[![Gurubase](https://img.shields.io/badge/Gurubase-Ask%20assimp%20Guru-006BFF)](https://gurubase.io/g/assimp)\n[![Financial Contributors on Open Collective](https://opencollective.com/assimp/all/badge.svg?label=financial+contributors)](https://opencollective.com/assimp)\n<br>\n\nAPIs are provided for C and C++. Various bindings exist to other languages (C#, Java, Python, Delphi, D). Assimp also runs on Android and iOS.\nAdditionally, assimp features various __mesh post-processing tools__: normals and tangent space generation, triangulation, vertex cache locality optimization, removal of degenerate primitives and duplicate vertices, sorting by primitive type, merging of redundant materials and many more.\n\n## Project activity ##\n![Alt](https://repobeats.axiom.co/api/embed/997f84e5f9fcf772da1e687f3a4f3a8afdbf4cf0.svg \"Repobeats analytics image\")\n\n### Documentation ###\nRead [our latest documentation](https://assimp-docs.readthedocs.io/en/latest/).\n\n### Pre-built binaries ###\nDownload binaries from [our Itchi Projectspace](https://kimkulling.itch.io/the-asset-importer-lib).\n\n### Test data ###\nClone [our model database](https://github.com/assimp/assimp-mdb).\n\n### Communities ###\n- Ask questions at [the Assimp Discussion Board](https://github.com/assimp/assimp/discussions).\n- Find us on [https://discord.gg/s9KJfaem](https://discord.gg/kKazXMXDy2)\n- Ask [the Assimp community on Reddit](https://www.reddit.com/r/Assimp/).\n- Ask on [StackOverflow with the assimp-tag](http://stackoverflow.com/questions/tagged/assimp?sort=newest). \n- Nothing has worked? File a question or an issue report at [The Assimp-Issue Tracker](https://github.com/assimp/assimp/issues)\n\n#### Supported file formats ####\nSee [the complete list of supported formats](https://github.com/assimp/assimp/blob/master/doc/Fileformats.md).\n\n### Building ###\nStart by reading [our build instructions](https://github.com/assimp/assimp/blob/master/Build.md). We are available in vcpkg, and our build system is CMake; if you used CMake before there is a good chance you know what to do.\n\n### Ports ###\n* [Android](port/AndroidJNI/README.md)\n* [Python](port/PyAssimp/README.md)\n* [.NET](https://github.com/Saalvage/AssimpNetter)\n* [Pascal](port/AssimpPascal/Readme.md)\n* [Javascript (Alpha)](https://github.com/makc/assimp2json)\n* [Javascript/Node.js Interface](https://github.com/kovacsv/assimpjs)\n* [Unity 3d Plugin](https://ricardoreis.net/trilib-2/)\n* [Unreal Engine Plugin](https://github.com/irajsb/UE4_Assimp/)\n* [JVM](https://github.com/kotlin-graphics/assimp) Full JVM port (current [status](https://github.com/kotlin-graphics/assimp/wiki/Status))\n* [HAXE-Port](https://github.com/longde123/assimp-haxe) The Assimp-HAXE-port.\n* [Rust](https://github.com/jkvargas/russimp)\n\n### Other tools ###\n[open3mod](https://github.com/acgessler/open3mod) is a powerful 3D model viewer based on Assimp's import and export abilities.\n[Assimp-Viewer](https://github.com/assimp/assimp_view) is an experimental implementation for an Asset-Viewer based on ImGUI and Assimp (experimental).\n\n#### Repository structure ####\nOpen Asset Import Library is implemented in C++. The directory structure looks like this:\n\n\t/code\t\tSource code\n\t/contrib\tThird-party libraries\n\t/doc\t\tDocumentation (Doxygen source and pre-compiled docs)\n\t/fuzz           Contains the test code for the Google Fuzzer project\n\t/include\tPublic header C and C++ header files\n\t/scripts \tScripts are used to generate the loading code for some formats\n\t/port\t\tPorts to other languages and scripts to maintain those.\n\t/test\t\tUnit- and regression tests, test suite of models\n\t/tools\t\tTools (old assimp viewer, command line `assimp`)\n\t/samples\tA small number of samples to illustrate possible use cases for Assimp\n\nThe source code is organized in the following way:\n\n\tcode/Common\t\t\tThe base implementation for importers and the infrastructure\n\tcode/CApi                       Special implementations which are only used for the C-API\n\tcode/Geometry                   A collection of geometry tools\n\tcode/Material                   The material system\n\tcode/PBR                        An exporter for physical-based models\n\tcode/PostProcessing\t\tThe post-processing steps\n\tcode/AssetLib/<FormatName>\tImplementation for import and export of the format\n\n### Contributing ###\nI would greatly appreciate contributing to assimp. The easiest way to get involved is to submit\na pull request with your changes against the main repository's `master` branch.\n\n## Contributors\n\n### Code Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n\n<a href=\"https://github.com/assimp/assimp/graphs/contributors\"><img src=\"https://opencollective.com/assimp/contributors.svg?width=890&button=false\" /></a>\n\n### Financial Contributors\n\nBecome a financial contributor and help us sustain our community. [[Contribute](https://opencollective.com/assimp/contribute)]\n\n#### Individuals\n\n<a href=\"https://opencollective.com/assimp\"><img src=\"https://opencollective.com/assimp/individuals.svg?width=890\"></a>\n\n\n#### Organizations\n\nYou can support the project with your organization. Your logo will show up here with a link to your website. [[Contribute](https://opencollective.com/assimp/contribute)]\n\n<a href=\"https://opencollective.com/assimp/organization/0/website\"><img src=\"https://opencollective.com/assimp/organization/0/avatar.svg\"></a>\n\n### License ###\nOur license is based on the modified, __3-clause BSD__-License.\n\nAn _informal_ summary is: do whatever you want, but include Assimp's license text with your product -\nand don't sue us if our code doesn't work. Note that, unlike LGPLed code, you may link statically to Assimp.\nFor the legal details, see the `LICENSE` file.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3828125,
          "content": "# Security Policy\n\n## Supported Versions\n\nUse this section to tell people about which versions of your project are\ncurrently being supported with security updates.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 5.2.4   | :white_check_mark: |\n\n## Reporting a Vulnerability\n\nIf you have found any security vulnerability you can contact us via \nkim.kulling@googlemail.com\n\n"
        },
        {
          "name": "assimp.pc.in",
          "type": "blob",
          "size": 0.3369140625,
          "content": "libdir=@CMAKE_INSTALL_FULL_LIBDIR@\nincludedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@\n\nName: @CMAKE_PROJECT_NAME@\nDescription: Import various well-known 3D model formats in an uniform manner.\nVersion: @PROJECT_VERSION@\nLibs: -L${libdir} -lassimp@ASSIMP_LIBRARY_SUFFIX@\nLibs.private: @LIBSTDC++_LIBRARIES@ @ZLIB_LIBRARIES_LINKED@\nCflags: -I${includedir}\n"
        },
        {
          "name": "cmake-modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "code",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "port",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}