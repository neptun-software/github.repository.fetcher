{
  "metadata": {
    "timestamp": 1736566295771,
    "page": 46,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/LightGBM",
      "stars": 16864,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 1.099609375,
          "content": "version: 4.5.0.99.{build}\n\nimage: Visual Studio 2015\nplatform: x64\nconfiguration:\n  - '3.8'\n\n# only build on 'master' and pull requests targeting it\nbranches:\n  only:\n    - master\n\nenvironment:\n  matrix:\n    - COMPILER: MSVC\n      TASK: python\n    - COMPILER: MINGW\n      TASK: python\n\nclone_depth: 5\n\ninstall:\n  - git submodule update --init --recursive  # get `external_libs` folder\n  - set PATH=C:\\mingw-w64\\x86_64-8.1.0-posix-seh-rt_v6-rev0\\mingw64\\bin;%PATH%\n  - set PYTHON_VERSION=%CONFIGURATION%\n  - ps: |\n      $env:ALLOW_SKIP_ARROW_TESTS = \"1\"\n      $env:APPVEYOR = \"true\"\n      $env:CMAKE_BUILD_PARALLEL_LEVEL = 4\n      $env:MINICONDA = \"C:\\Miniconda3-x64\"\n      $env:PATH = \"$env:MINICONDA;$env:MINICONDA\\Scripts;$env:PATH\"\n      $env:BUILD_SOURCESDIRECTORY = \"$env:APPVEYOR_BUILD_FOLDER\"\n\nbuild: false\n\ntest_script:\n  - conda config --remove channels defaults\n  - conda config --add channels nodefaults\n  - conda config --add channels conda-forge\n  - conda config --set channel_priority strict\n  - conda init powershell\n  - powershell.exe -ExecutionPolicy Bypass -File %APPVEYOR_BUILD_FOLDER%\\.ci\\test-windows.ps1\n"
        },
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.42578125,
          "content": "root = true\n\n[*]\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nend_of_line = lf\nindent_style = space\nindent_size = 2\n\n[*.{py,sh,ps1,js,json}]\nindent_size = 4\nmax_line_length = 120\nskip = external_libs\nknown_first_party = lightgbm\n\n# Tabs matter for Makefile and .gitmodules\n[{makefile*,Makefile*,*.mk,*.mak,*.makefile,*.Makefile,GNUmakefile,BSDmakefile,make.bat,Makevars*,*.gitmodules}]\nindent_style = tab\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.2568359375,
          "content": "# introduce ruff-format (#6308)\n6330d6269c81dfd4c96e664b99239b8ff39ccf91\n# enable ruff format on tests and examples (#6317)\n1b792e716682254c33ddb5eb845357e84018636d\n# enable ruff-format on main library Python code (#6336)\ndd31208ab7a7aea86762830697b00666f843ded9\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.3623046875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n[Bb]uild/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Microsoft Azure ApplicationInsights config file\nApplicationInsights.config\n\n# Windows Store app package directory\nAppPackages/\nBundleArtifacts/\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n.*.swp\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\n\n# FAKE - F# Make\n.fake/\n\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n/windows/LightGBM.VC.db\n/lightgbm\n/testlightgbm\n\n# Created by https://www.gitignore.io/api/python\n\n### Python ###\n!/python-package/lightgbm/\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\nprof/\n*.prof\ncoverage.xml\n*,cover\n.hypothesis/\n**/coverage.html\n**/coverage.html.zip\n**/Rplots.pdf\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\ndocs/pythonapi/\n*.flag\n\n# Doxygen documentation\ndocs/doxyoutput/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\nUntitled*.ipynb\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\n.venv/\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n\n# R testing artefact\nlightgbm.model\n\n# saved or dumped model/data\n*.model\n*.pkl\n*.bin\n*.h5\n\n# macOS\n**/.DS_Store\n\n# VSCode\n.vscode\n\n# IntelliJ/CLion\n.idea\n*.iml\n/cmake-build-debug/\n\n# Files from local Python install\nlightgbm-python/\npython-package/LICENSE\npython-package/build_cpp/\npython-package/compile/\npython-package/lightgbm/VERSION.txt\n\n# R build artefacts\n**/autom4te.cache/\nR-package/conftest*\nR-package/config.status\n!R-package/data/agaricus.test.rda\n!R-package/data/agaricus.train.rda\n!R-package/data/bank.rda\nR-package/docs\nR-package/src/CMakeLists.txt\nR-package/src/Makevars\nR-package/src/lib_lightgbm.so.dSYM/\nR-package/src/src/\nR-package/src-x64\nR-package/src-i386\nR-package/**/VERSION.txt\n**/Makevars.win\nlightgbm_r/*\nlightgbm*.tar.gz\nlightgbm*.tgz\nlightgbm.Rcheck/\nmiktex*.zip\n*.def\n\n# Files created by examples and tests\n*.buffer\n**/lgb-Dataset.data\n**/lgb.Dataset.data\n**/model.txt\n**/lgb-model.txt\nexamples/**/*.txt\ntests/distributed/mlist.txt\ntests/distributed/train*\ntests/distributed/model*\ntests/distributed/predict*\n\n\n# Files from interactive R sessions\n.Rproj.user\n**/.Rapp.history\n**/.Rhistory\n*.rda\n*.RData\n*.rds\n\n# Files generated by aspell\n**/*.bak\n\n# GraphViz artifacts\n*.gv\n*.gv.*\n\n# Files from local Dask work\ndask-worker-space/\n\n# credentials and key material\n*.env\n*.pem\n*.pub\n*.rdp\n*_rsa\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.4345703125,
          "content": "[submodule \"include/boost/compute\"]\n\tpath = external_libs/compute\n\turl = https://github.com/boostorg/compute\n[submodule \"eigen\"]\n\tpath = external_libs/eigen\n\turl = https://gitlab.com/libeigen/eigen.git\n[submodule \"external_libs/fmt\"]\n\tpath = external_libs/fmt\n\turl = https://github.com/fmtlib/fmt.git\n[submodule \"external_libs/fast_double_parser\"]\n\tpath = external_libs/fast_double_parser\n\turl = https://github.com/lemire/fast_double_parser.git\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.185546875,
          "content": "# exclude files which are auto-generated by build tools\nexclude: |\n  (?x)^(\n      build|\n      external_libs|\n      lightgbm-python|\n      lightgbm_r|\n  )$\n  |R-package/configure$\n  |R-package/inst/Makevars$\n  |R-package/inst/Makevars.win$\n  |R-package/man/.*Rd$\n\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n  - repo: https://github.com/adrienverge/yamllint\n    rev: v1.35.1\n    hooks:\n      - id: yamllint\n        args: [\"--strict\"]\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    # Ruff version.\n    rev: v0.8.3\n    hooks:\n      # Run the linter.\n      - id: ruff\n        args: [\"--config\", \"python-package/pyproject.toml\"]\n        types_or: [python, jupyter]\n      # Run the formatter.\n      - id: ruff-format\n        args: [\"--config\", \"python-package/pyproject.toml\"]\n        types_or: [python, jupyter]\n  - repo: https://github.com/shellcheck-py/shellcheck-py\n    rev: v0.10.0.1\n    hooks:\n      - id: shellcheck\n  - repo: https://github.com/crate-ci/typos\n    rev: v1.28.3\n    hooks:\n      - id: typos\n        args: [\"--force-exclude\"]\n        exclude: (\\.gitignore$)|(^\\.editorconfig$)\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.24609375,
          "content": "version: 2\nbuild:\n  os: \"ubuntu-20.04\"\n  tools:\n    python: \"miniconda3-4.7\"\nconda:\n  environment: docs/env.yml\nformats:\n  - pdf\nsphinx:\n  builder: html\n  configuration: docs/conf.py\n  fail_on_warning: true\nsubmodules:\n  include: all\n  recursive: true\n"
        },
        {
          "name": ".typos.toml",
          "type": "blob",
          "size": 0.3359375,
          "content": "default.extend-ignore-re = [\n  \"/Ot\",\n  \"mis-alignment\",\n  \"mis-spelled\",\n  \"posix-seh-rt\",\n]\n\n[default.extend-words]\nMAPE = \"MAPE\"\ndatas = \"datas\"\ninterprete = \"interprete\"\nmape = \"mape\"\nsplitted = \"splitted\"\n\n[default.extend-identifiers]\nERRORs = \"ERRORs\"\nGAM = \"GAM\"\nND24s = \"ND24s\"\nWARNINGs = \"WARNINGs\"\nfullset = \"fullset\"\nthess = \"thess\"\n"
        },
        {
          "name": ".vsts-ci.yml",
          "type": "blob",
          "size": 15.611328125,
          "content": "trigger:\n  branches:\n    include:\n    - master\n  tags:\n    include:\n    - v*\npr:\n- master\nvariables:\n  AZURE: 'true'\n  CMAKE_BUILD_PARALLEL_LEVEL: 4\n  PYTHON_VERSION: '3.12'\n  runCodesignValidationInjection: false\n  skipComponentGovernanceDetection: true\n  Codeql.Enabled: false\n  Codeql.SkipTaskAutoInjection: true\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true\n  SKBUILD_STRICT_CONFIG: true\nresources:\n  # The __work/ directory, where Azure DevOps writes the source files, needs to be read-write because\n  # LightGBM's CI jobs write files in the source directory.\n  #\n  # For all the containers included here, all other directories that Azure mounts in are mounted as read-only\n  # to minimize the risk of side effects from one run affecting future runs.\n  # ref: https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/resources-containers-container\n  containers:\n  - container: linux-artifact-builder\n    image: lightgbm/vsts-agent:manylinux_2_28_x86_64\n    mountReadOnly:\n      work: false\n      externals: true\n      tools: true\n      tasks: true\n  - container: ubuntu-latest\n    image: 'ubuntu:22.04'\n    options: \"--name ci-container -v /usr/bin/docker:/tmp/docker:ro\"\n    mountReadOnly:\n      work: false\n      externals: true\n      tools: true\n      tasks: true\n  - container: rbase\n    image: wch1/r-debug\n    mountReadOnly:\n      work: false\n      externals: true\n      tools: true\n      tasks: true\njobs:\n###########################################\n- job: Maintenance\n###########################################\n  pool: mariner-20240410-0\n  container: ubuntu-latest\n  # routine maintenance (like periodically deleting old files),\n  # to be run on 1 random CI runner in the self-hosted pool each runner\n  steps:\n  - script: |\n      print-diagnostics(){\n        echo \"---- df -h -m ----\"\n        df -h -m\n        echo \"---- docker system df ----\"\n        /tmp/docker system df\n        echo \"---- docker images ----\"\n        /tmp/docker images\n      }\n      # check disk usage\n      print-diagnostics\n      # remove old containers, container images, volumes\n      # ref: https://stackoverflow.com/a/32723127/3986677\n      # ref: https://depot.dev/blog/docker-clear-cache#removing-everything-with-docker-system-prune\n      echo \"---- running 'docker system prune' ----\"\n      /tmp/docker system prune \\\n        --all \\\n        --force \\\n        --volumes \\\n        --filter until=720h\n      # check disk usage again\n      print-diagnostics\n    displayName: Clean\n###########################################\n- job: Linux\n###########################################\n  variables:\n    COMPILER: gcc\n    SETUP_CONDA: 'false'\n    OS_NAME: 'linux'\n    PRODUCES_ARTIFACTS: 'true'\n  pool: mariner-20240410-0\n  container: linux-artifact-builder\n  strategy:\n    matrix:\n      regular:\n        TASK: regular\n        PYTHON_VERSION: '3.10'\n      sdist:\n        TASK: sdist\n        PYTHON_VERSION: '3.8'\n      bdist:\n        TASK: bdist\n        PYTHON_VERSION: '3.9'\n      inference:\n        TASK: if-else\n      mpi_source:\n        TASK: mpi\n        METHOD: source\n        PYTHON_VERSION: '3.9'\n      gpu_source:\n        TASK: gpu\n        METHOD: source\n      swig:\n        TASK: swig\n  steps:\n  - script: |\n      echo \"##vso[task.setvariable variable=BUILD_DIRECTORY]$BUILD_SOURCESDIRECTORY\"\n      echo \"##vso[task.prependpath]/usr/lib64/openmpi/bin\"\n      echo \"##vso[task.prependpath]$CONDA/bin\"\n    displayName: 'Set variables'\n  - script: |\n      git clean -d -f -x\n    displayName: 'Clean source directory'\n  - script: |\n      echo '$(Build.SourceVersion)' > '$(Build.ArtifactStagingDirectory)/commit.txt'\n    displayName: 'Add commit hash to artifacts archive'\n  - task: Bash@3\n    displayName: Setup\n    inputs:\n      filePath: $(Build.SourcesDirectory)/.ci/setup.sh\n      targetType: filePath\n  - task: Bash@3\n    displayName: Test\n    inputs:\n      filePath: $(Build.SourcesDirectory)/.ci/test.sh\n      targetType: filePath\n  - task: PublishBuildArtifacts@1\n    condition: and(succeeded(), in(variables['TASK'], 'regular', 'sdist', 'bdist', 'swig'), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))\n    inputs:\n      pathtoPublish: '$(Build.ArtifactStagingDirectory)'\n      artifactName: PackageAssets\n      artifactType: container\n###########################################\n- job: Linux_latest\n###########################################\n  variables:\n    COMPILER: clang-17\n    DEBIAN_FRONTEND: 'noninteractive'\n    IN_UBUNTU_BASE_CONTAINER: 'true'\n    OS_NAME: 'linux'\n    SETUP_CONDA: 'true'\n  pool: mariner-20240410-0\n  container: ubuntu-latest\n  strategy:\n    matrix:\n      regular:\n        TASK: regular\n      sdist:\n        TASK: sdist\n      bdist:\n        TASK: bdist\n        PYTHON_VERSION: '3.10'\n      inference:\n        TASK: if-else\n      mpi_source:\n        TASK: mpi\n        METHOD: source\n      mpi_pip:\n        TASK: mpi\n        METHOD: pip\n        PYTHON_VERSION: '3.11'\n      mpi_wheel:\n        TASK: mpi\n        METHOD: wheel\n        PYTHON_VERSION: '3.9'\n      gpu_source:\n        TASK: gpu\n        METHOD: source\n        PYTHON_VERSION: '3.11'\n      gpu_pip:\n        TASK: gpu\n        METHOD: pip\n        PYTHON_VERSION: '3.10'\n      gpu_wheel:\n        TASK: gpu\n        METHOD: wheel\n        PYTHON_VERSION: '3.9'\n      cpp_tests:\n        TASK: cpp-tests\n        METHOD: with-sanitizers\n  steps:\n  - script: |\n      echo \"##vso[task.setvariable variable=BUILD_DIRECTORY]$BUILD_SOURCESDIRECTORY\"\n      CONDA=$HOME/miniforge\n      echo \"##vso[task.setvariable variable=CONDA]$CONDA\"\n      echo \"##vso[task.prependpath]$CONDA/bin\"\n    displayName: 'Set variables'\n  # https://github.com/microsoft/azure-pipelines-agent/issues/2043#issuecomment-687983301\n  - script: |\n      /tmp/docker exec -t -u 0 ci-container \\\n      sh -c \"apt-get update && apt-get -o Dpkg::Options::=\"--force-confold\" -y install sudo\"\n    displayName: 'Install sudo'\n  - script: |\n      sudo apt-get update\n      sudo apt-get install -y --no-install-recommends git\n      git clean -d -f -x\n    displayName: 'Clean source directory'\n  - task: Bash@3\n    displayName: Setup\n    inputs:\n      filePath: $(Build.SourcesDirectory)/.ci/setup.sh\n      targetType: 'filePath'\n  - task: Bash@3\n    displayName: Test\n    inputs:\n      filePath: $(Build.SourcesDirectory)/.ci/test.sh\n      targetType: 'filePath'\n###########################################\n- job: QEMU_multiarch\n###########################################\n  variables:\n    BUILD_DIRECTORY: /LightGBM\n    COMPILER: gcc\n    PRODUCES_ARTIFACTS: 'true'\n  pool:\n    vmImage: ubuntu-22.04\n  timeoutInMinutes: 180\n  strategy:\n    matrix:\n      bdist:\n        TASK: bdist\n        ARCH: aarch64\n  steps:\n  - script: |\n      sudo apt-get update\n      sudo apt-get install --no-install-recommends -y \\\n        binfmt-support \\\n        qemu \\\n        qemu-user \\\n        qemu-user-static\n    displayName: 'Install QEMU'\n  - script: |\n      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    displayName: 'Enable Docker multi-architecture support'\n  - script: |\n      git clean -d -f -x\n    displayName: 'Clean source directory'\n  - script: |\n      cat > docker-script.sh <<EOF\n      export CONDA=\\$HOME/miniforge\n      export PATH=\\$CONDA/bin:/opt/rh/llvm-toolset-7.0/root/usr/bin:\\$PATH\n      export LD_LIBRARY_PATH=/opt/rh/llvm-toolset-7.0/root/usr/lib64:\\$LD_LIBRARY_PATH\n      \\$BUILD_DIRECTORY/.ci/setup.sh || exit 1\n      \\$BUILD_DIRECTORY/.ci/test.sh || exit 1\n      EOF\n      IMAGE_URI=\"lightgbm/vsts-agent:manylinux2014_aarch64\"\n      docker pull \"${IMAGE_URI}\" || exit 1\n      PLATFORM=$(docker inspect --format='{{.Os}}/{{.Architecture}}' \"${IMAGE_URI}\") || exit 1\n      echo \"detected image platform: ${PLATFORM}\"\n      docker run \\\n        --platform \"${PLATFORM}\" \\\n        --rm \\\n        --env AZURE=true \\\n        --env BUILD_ARTIFACTSTAGINGDIRECTORY=$BUILD_ARTIFACTSTAGINGDIRECTORY \\\n        --env BUILD_DIRECTORY=$BUILD_DIRECTORY \\\n        --env COMPILER=$COMPILER \\\n        --env METHOD=$METHOD \\\n        --env OS_NAME=linux \\\n        --env PRODUCES_ARTIFACTS=$PRODUCES_ARTIFACTS \\\n        --env PYTHON_VERSION=$PYTHON_VERSION \\\n        --env TASK=$TASK \\\n        -v \"$(Build.SourcesDirectory)\":\"$BUILD_DIRECTORY\" \\\n        -v \"$(Build.ArtifactStagingDirectory)\":\"$(Build.ArtifactStagingDirectory)\" \\\n        \"${IMAGE_URI}\" \\\n        /bin/bash $BUILD_DIRECTORY/docker-script.sh\n    displayName: 'Setup and run tests'\n  - task: PublishBuildArtifacts@1\n    condition: and(succeeded(), in(variables['TASK'], 'bdist'), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))\n    inputs:\n      pathtoPublish: '$(Build.ArtifactStagingDirectory)'\n      artifactName: PackageAssets\n      artifactType: container\n###########################################\n- job: macOS\n###########################################\n  variables:\n    COMPILER: clang\n    OS_NAME: 'macos'\n    PRODUCES_ARTIFACTS: 'true'\n  pool:\n    vmImage: 'macOS-12'\n  strategy:\n    matrix:\n      regular:\n        TASK: regular\n        PYTHON_VERSION: '3.10'\n      sdist:\n        TASK: sdist\n        PYTHON_VERSION: '3.9'\n      bdist:\n        TASK: bdist\n      swig:\n        TASK: swig\n      cpp_tests:\n        TASK: cpp-tests\n        METHOD: with-sanitizers\n        SANITIZERS: \"address;undefined\"\n  steps:\n  - script: |\n      echo \"##vso[task.setvariable variable=BUILD_DIRECTORY]$BUILD_SOURCESDIRECTORY\"\n      CONDA=$AGENT_HOMEDIRECTORY/miniforge\n      echo \"##vso[task.setvariable variable=CONDA]$CONDA\"\n      echo \"##vso[task.prependpath]$CONDA/bin\"\n      echo \"##vso[task.setvariable variable=JAVA_HOME]$JAVA_HOME_8_X64\"\n    displayName: 'Set variables'\n  - script: |\n      git clean -d -f -x\n    displayName: 'Clean source directory'\n  - task: Bash@3\n    displayName: Setup\n    inputs:\n      filePath: $(Build.SourcesDirectory)/.ci/setup.sh\n      targetType: filePath\n  - task: Bash@3\n    displayName: Test\n    inputs:\n      filePath: $(Build.SourcesDirectory)/.ci/test.sh\n      targetType: filePath\n  - task: PublishBuildArtifacts@1\n    condition: and(succeeded(), in(variables['TASK'], 'regular', 'bdist', 'swig'), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))\n    inputs:\n      pathtoPublish: '$(Build.ArtifactStagingDirectory)'\n      artifactName: PackageAssets\n      artifactType: container\n###########################################\n- job: Windows\n###########################################\n  pool:\n    vmImage: 'windows-2019'\n  strategy:\n    matrix:\n      regular:\n        TASK: regular\n        PYTHON_VERSION: '3.10'\n      sdist:\n        TASK: sdist\n        PYTHON_VERSION: '3.9'\n      bdist:\n        TASK: bdist\n      swig:\n        TASK: swig\n      cpp_tests:\n        TASK: cpp-tests\n  steps:\n  - powershell: |\n      Write-Host \"##vso[task.prependpath]$env:CONDA\\Scripts\"\n    displayName: 'Set Variables'\n  - script: |\n      git clean -d -f -x\n    displayName: 'Clean source directory'\n  - script: |\n      cmd /c \"powershell -ExecutionPolicy Bypass -File %BUILD_SOURCESDIRECTORY%/.ci/install-opencl.ps1\"\n    condition: eq(variables['TASK'], 'bdist')\n    displayName: 'Install OpenCL'\n  - script: |\n      cmd /c \"conda config --remove channels defaults\"\n      cmd /c \"conda config --add channels nodefaults\"\n      cmd /c \"conda config --add channels conda-forge\"\n      cmd /c \"conda config --set channel_priority strict\"\n      cmd /c \"conda init powershell\"\n      cmd /c \"powershell -ExecutionPolicy Bypass -File %BUILD_SOURCESDIRECTORY%/.ci/test-windows.ps1\"\n    displayName: Test\n  - task: PublishBuildArtifacts@1\n    condition: and(succeeded(), in(variables['TASK'], 'regular', 'bdist', 'swig'), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))\n    inputs:\n      pathtoPublish: '$(Build.ArtifactStagingDirectory)'\n      artifactName: PackageAssets\n      artifactType: container\n###########################################\n- job: R_artifact\n###########################################\n  condition: not(startsWith(variables['Build.SourceBranch'], 'refs/pull/'))\n  pool:\n    vmImage: 'ubuntu-22.04'\n  container: rbase\n  steps:\n  - script: |\n      git clean -d -f -x\n    displayName: 'Clean source directory'\n  - script: |\n      LGB_VER=$(head -n 1 VERSION.txt | sed \"s/rc/-/g\")\n      R_LIB_PATH=~/Rlib\n      export R_LIBS=${R_LIB_PATH}\n      mkdir -p ${R_LIB_PATH}\n      RDscript -e \"install.packages(c('R6', 'data.table', 'jsonlite', 'knitr', 'markdown', 'Matrix', 'RhpcBLASctl'),  lib = '${R_LIB_PATH}', dependencies = c('Depends', 'Imports', 'LinkingTo'), repos = 'https://cran.rstudio.com', Ncpus = parallel::detectCores())\" || exit 1\n      sh build-cran-package.sh --r-executable=RD || exit 1\n      mv lightgbm_${LGB_VER}.tar.gz $(Build.ArtifactStagingDirectory)/lightgbm-${LGB_VER}-r-cran.tar.gz\n    displayName: 'Build CRAN R-package'\n  - task: PublishBuildArtifacts@1\n    condition: succeeded()\n    inputs:\n      pathtoPublish: $(Build.ArtifactStagingDirectory)\n      artifactName: R-package\n      artifactType: container\n\n###########################################\n- job: Package\n###########################################\n  dependsOn:\n  - Linux\n  - Linux_latest\n  - QEMU_multiarch\n  - macOS\n  - Windows\n  - R_artifact\n  condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))\n  pool:\n    vmImage: 'ubuntu-22.04'\n  steps:\n  # Create archives with complete source code included (with git submodules)\n  - task: ArchiveFiles@2\n    displayName: Create zip archive\n    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))\n    inputs:\n      rootFolderOrFile: $(Build.SourcesDirectory)\n      includeRootFolder: false\n      archiveType: zip\n      archiveFile: '$(Build.ArtifactStagingDirectory)/archives/LightGBM-complete_source_code_zip.zip'\n      replaceExistingArchive: true\n  - task: ArchiveFiles@2\n    displayName: Create tar.gz archive\n    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))\n    inputs:\n      rootFolderOrFile: $(Build.SourcesDirectory)\n      includeRootFolder: false\n      archiveType: tar\n      tarCompression: gz\n      archiveFile: '$(Build.ArtifactStagingDirectory)/archives/LightGBM-complete_source_code_tar_gz.tar.gz'\n      replaceExistingArchive: true\n  # Download all agent packages from all previous phases\n  - task: DownloadBuildArtifacts@0\n    displayName: Download package assets\n    inputs:\n      artifactName: PackageAssets\n      downloadPath: $(Build.SourcesDirectory)/binaries\n  - task: DownloadBuildArtifacts@0\n    displayName: Download R-package\n    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))\n    inputs:\n      artifactName: R-package\n      downloadPath: $(Build.SourcesDirectory)/R\n  - script: |\n      python \"$(Build.SourcesDirectory)/.ci/create-nuget.py\" \"$(Build.SourcesDirectory)/binaries/PackageAssets\"\n    displayName: 'Create NuGet configuration files'\n  - task: NuGetCommand@2\n    inputs:\n      command: pack\n      packagesToPack: '$(Build.SourcesDirectory)/.ci/nuget/*.nuspec'\n      packDestination: '$(Build.ArtifactStagingDirectory)/nuget'\n  - task: PublishBuildArtifacts@1\n    inputs:\n      pathtoPublish: '$(Build.ArtifactStagingDirectory)/nuget'\n      artifactName: NuGet\n      artifactType: container\n  - task: GitHubRelease@0\n    displayName: 'Create GitHub Release'\n    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))\n    inputs:\n      gitHubConnection: guolinke\n      repositoryName: '$(Build.Repository.Name)'\n      action: 'create'\n      target: '$(Build.SourceVersion)'\n      tagSource: 'auto'\n      title: '$(Build.SourceBranchName)'\n      assets: |\n        $(Build.SourcesDirectory)/binaries/PackageAssets/*\n        $(Build.SourcesDirectory)/R/R-package/*\n        $(Build.ArtifactStagingDirectory)/nuget/*.nupkg\n        $(Build.ArtifactStagingDirectory)/archives/*\n      assetUploadMode: 'delete'\n      isDraft: true\n      isPreRelease: false\n      addChangeLog: false\n"
        },
        {
          "name": ".yamllint.yml",
          "type": "blob",
          "size": 0.3984375,
          "content": "# default config: https://yamllint.readthedocs.io/en/stable/configuration.html#default-configuration\nextends: default\n\nrules:\n  document-start: disable\n  line-length:\n    max: 999  # temporarily increase allowed line length\n  truthy:\n    # prevent treating GitHub Workflow \"on\" key as boolean value\n    check-keys: false\n\n  # temporarily disabled rules\n  indentation: disable\n  comments-indentation: disable\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 26.818359375,
          "content": "option(USE_MPI \"Enable MPI-based distributed learning\" OFF)\noption(USE_OPENMP \"Enable OpenMP\" ON)\noption(USE_GPU \"Enable GPU-accelerated training\" OFF)\noption(USE_SWIG \"Enable SWIG to generate Java API\" OFF)\noption(USE_TIMETAG \"Set to ON to output time costs\" OFF)\noption(USE_CUDA \"Enable CUDA-accelerated training \" OFF)\noption(USE_DEBUG \"Set to ON for Debug mode\" OFF)\noption(USE_SANITIZER \"Use sanitizer flags\" OFF)\nset(\n  ENABLED_SANITIZERS\n  \"address\" \"leak\" \"undefined\"\n  CACHE\n  STRING\n  \"Semicolon separated list of sanitizer names, e.g., 'address;leak'. \\\nSupported sanitizers are address, leak, undefined and thread.\"\n)\noption(USE_HOMEBREW_FALLBACK \"(macOS-only) also look in 'brew --prefix' for libraries (e.g. OpenMP)\" ON)\noption(BUILD_CLI \"Build the 'lightgbm' command-line interface in addition to lib_lightgbm\" ON)\noption(BUILD_CPP_TEST \"Build C++ tests with Google Test\" OFF)\noption(BUILD_STATIC_LIB \"Build static library\" OFF)\noption(INSTALL_HEADERS \"Install headers to CMAKE_INSTALL_PREFIX (e.g. '/usr/local/include')\" ON)\noption(__BUILD_FOR_PYTHON \"Set to ON if building lib_lightgbm for use with the Python-package\" OFF)\noption(__BUILD_FOR_R \"Set to ON if building lib_lightgbm for use with the R-package\" OFF)\noption(__INTEGRATE_OPENCL \"Set to ON if building LightGBM with the OpenCL ICD Loader and its dependencies included\" OFF)\n\ncmake_minimum_required(VERSION 3.28)\n\n# If using Visual Studio generators, always target v10.x of the Windows SDK.\n# Doing this avoids lookups that could fall back to very old versions, e.g. by finding\n# outdated registry entries.\n# ref: https://cmake.org/cmake/help/latest/variable/CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION.html\nif(CMAKE_GENERATOR MATCHES \"Visual Studio\")\n    set(CMAKE_SYSTEM_VERSION 10.0 CACHE INTERNAL \"target Windows SDK version\" FORCE)\nendif()\n\nproject(lightgbm LANGUAGES C CXX)\n\nif(BUILD_CPP_TEST)\n  set(CMAKE_CXX_STANDARD 14)\nelse()\n  set(CMAKE_CXX_STANDARD 11)\nendif()\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nlist(APPEND CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake/modules\")\n\n#-- Sanitizer\nif(USE_SANITIZER)\n  if(MSVC)\n    message(FATAL_ERROR \"Sanitizers are not supported with MSVC.\")\n  endif()\n  include(cmake/Sanitizer.cmake)\n  enable_sanitizers(\"${ENABLED_SANITIZERS}\")\nendif()\n\nif(__INTEGRATE_OPENCL)\n  set(__INTEGRATE_OPENCL ON CACHE BOOL \"\" FORCE)\n  set(USE_GPU OFF CACHE BOOL \"\" FORCE)\n  message(STATUS \"Building library with integrated OpenCL components\")\nendif()\n\nif(__BUILD_FOR_PYTHON OR __BUILD_FOR_R OR USE_SWIG)\n    # the SWIG wrapper, the Python and R packages don't require the CLI\n    set(BUILD_CLI OFF)\n    # installing the SWIG wrapper, the R and Python packages shouldn't place LightGBM's headers\n    # outside of where the package is installed\n    set(INSTALL_HEADERS OFF)\nendif()\n\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"4.8.2\")\n    message(FATAL_ERROR \"Insufficient gcc version\")\n  endif()\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"3.8\")\n    message(FATAL_ERROR \"Insufficient Clang version\")\n  endif()\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\")\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"8.1.0\")\n    message(FATAL_ERROR \"Insufficient AppleClang version\")\n  endif()\nelseif(MSVC)\n  if(MSVC_VERSION LESS 1900)\n    message(\n      FATAL_ERROR\n      \"The compiler ${CMAKE_CXX_COMPILER} doesn't support required C++11 features. Please use a newer MSVC.\"\n    )\n  endif()\nendif()\n\nif(USE_SWIG)\n  find_package(SWIG REQUIRED)\n  find_package(Java REQUIRED)\n  find_package(JNI REQUIRED)\n  include(UseJava)\n  include(UseSWIG)\n  set(SWIG_CXX_EXTENSION \"cxx\")\n  set(SWIG_EXTRA_LIBRARIES \"\")\n  set(SWIG_JAVA_EXTRA_FILE_EXTENSIONS \".java\" \"JNI.java\")\n  set(SWIG_MODULE_JAVA_LANGUAGE \"JAVA\")\n  set(SWIG_MODULE_JAVA_SWIG_LANGUAGE_FLAG \"java\")\n  set(CMAKE_SWIG_OUTDIR \"${CMAKE_CURRENT_BINARY_DIR}/java\")\n  include_directories(Java_INCLUDE_DIRS)\n  include_directories(JNI_INCLUDE_DIRS)\n  include_directories($ENV{JAVA_HOME}/include)\n  if(WIN32)\n      set(LGBM_SWIG_DESTINATION_DIR \"${CMAKE_CURRENT_BINARY_DIR}/com/microsoft/ml/lightgbm/windows/x86_64\")\n      include_directories($ENV{JAVA_HOME}/include/win32)\n  elseif(APPLE)\n      set(LGBM_SWIG_DESTINATION_DIR \"${CMAKE_CURRENT_BINARY_DIR}/com/microsoft/ml/lightgbm/osx/x86_64\")\n      include_directories($ENV{JAVA_HOME}/include/darwin)\n  else()\n      set(LGBM_SWIG_DESTINATION_DIR \"${CMAKE_CURRENT_BINARY_DIR}/com/microsoft/ml/lightgbm/linux/x86_64\")\n      include_directories($ENV{JAVA_HOME}/include/linux)\n  endif()\n  file(MAKE_DIRECTORY \"${LGBM_SWIG_DESTINATION_DIR}\")\nendif()\n\nset(EIGEN_DIR \"${PROJECT_SOURCE_DIR}/external_libs/eigen\")\ninclude_directories(${EIGEN_DIR})\n\n# See https://gitlab.com/libeigen/eigen/-/blob/master/COPYING.README\nadd_definitions(-DEIGEN_MPL2_ONLY)\nadd_definitions(-DEIGEN_DONT_PARALLELIZE)\n\nset(FAST_DOUBLE_PARSER_INCLUDE_DIR \"${PROJECT_SOURCE_DIR}/external_libs/fast_double_parser/include\")\ninclude_directories(${FAST_DOUBLE_PARSER_INCLUDE_DIR})\n\nset(FMT_INCLUDE_DIR \"${PROJECT_SOURCE_DIR}/external_libs/fmt/include\")\ninclude_directories(${FMT_INCLUDE_DIR})\n\nif(__BUILD_FOR_R)\n    find_package(LibR REQUIRED)\n    message(STATUS \"LIBR_EXECUTABLE: ${LIBR_EXECUTABLE}\")\n    message(STATUS \"LIBR_INCLUDE_DIRS: ${LIBR_INCLUDE_DIRS}\")\n    message(STATUS \"LIBR_LIBS_DIR: ${LIBR_LIBS_DIR}\")\n    message(STATUS \"LIBR_CORE_LIBRARY: ${LIBR_CORE_LIBRARY}\")\n    include_directories(${LIBR_INCLUDE_DIRS})\n    add_definitions(-DLGB_R_BUILD)\nendif()\n\nif(USE_TIMETAG)\n    add_definitions(-DTIMETAG)\nendif()\n\nif(USE_DEBUG)\n    add_definitions(-DDEBUG)\nendif()\n\nif(USE_MPI)\n    find_package(MPI REQUIRED)\n    add_definitions(-DUSE_MPI)\nelse()\n    add_definitions(-DUSE_SOCKET)\nendif()\n\nif(USE_CUDA)\n    set(CMAKE_CUDA_HOST_COMPILER \"${CMAKE_CXX_COMPILER}\")\n    enable_language(CUDA)\n    set(USE_OPENMP ON CACHE BOOL \"CUDA requires OpenMP\" FORCE)\nendif()\n\nif(USE_OPENMP)\n    if(APPLE)\n        find_package(OpenMP)\n        if(NOT OpenMP_FOUND)\n            if(USE_HOMEBREW_FALLBACK)\n                # libomp 15.0+ from brew is keg-only, so have to search in other locations.\n                # See https://github.com/Homebrew/homebrew-core/issues/112107#issuecomment-1278042927.\n                execute_process(COMMAND brew --prefix libomp\n                            OUTPUT_VARIABLE HOMEBREW_LIBOMP_PREFIX\n                            OUTPUT_STRIP_TRAILING_WHITESPACE)\n                set(OpenMP_C_FLAGS \"-Xpreprocessor -fopenmp -I${HOMEBREW_LIBOMP_PREFIX}/include\")\n                set(OpenMP_CXX_FLAGS \"-Xpreprocessor -fopenmp -I${HOMEBREW_LIBOMP_PREFIX}/include\")\n                set(OpenMP_C_LIB_NAMES omp)\n                set(OpenMP_CXX_LIB_NAMES omp)\n                set(OpenMP_omp_LIBRARY ${HOMEBREW_LIBOMP_PREFIX}/lib/libomp.dylib)\n            endif()\n            find_package(OpenMP REQUIRED)\n        endif()\n    else()\n        find_package(OpenMP REQUIRED)\n    endif()\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\nendif()\n\nif(USE_GPU)\n    set(BOOST_COMPUTE_HEADER_DIR ${PROJECT_SOURCE_DIR}/external_libs/compute/include)\n    include_directories(${BOOST_COMPUTE_HEADER_DIR})\n    find_package(OpenCL REQUIRED)\n    include_directories(${OpenCL_INCLUDE_DIRS})\n    message(STATUS \"OpenCL include directory: \" ${OpenCL_INCLUDE_DIRS})\n    if(WIN32)\n        set(Boost_USE_STATIC_LIBS ON)\n    endif()\n    find_package(Boost 1.56.0 COMPONENTS filesystem system REQUIRED)\n    if(WIN32)\n        # disable autolinking in boost\n        add_definitions(-DBOOST_ALL_NO_LIB)\n    endif()\n    include_directories(${Boost_INCLUDE_DIRS})\n    add_definitions(-DUSE_GPU)\nendif()\n\nif(__INTEGRATE_OPENCL)\n    if(APPLE)\n        message(FATAL_ERROR \"Integrated OpenCL build is not available on macOS\")\n    else()\n        include(cmake/IntegratedOpenCL.cmake)\n        add_definitions(-DUSE_GPU)\n    endif()\nendif()\n\nif(BUILD_CPP_TEST AND MSVC)\n  # Use /MT flag to statically link the C runtime\n  set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\nendif()\n\nif(USE_CUDA)\n    find_package(CUDAToolkit 11.0 REQUIRED)\n    include_directories(${CUDAToolkit_INCLUDE_DIRS})\n    set(CMAKE_CUDA_FLAGS \"${CMAKE_CUDA_FLAGS} -Xcompiler=${OpenMP_CXX_FLAGS} -Xcompiler=-fPIC -Xcompiler=-Wall\")\n\n    # reference for mapping of CUDA toolkit component versions to supported architectures (\"compute capabilities\"):\n    # https://en.wikipedia.org/wiki/CUDA#GPUs_supported\n    set(CUDA_ARCHS \"60\" \"61\" \"62\" \"70\" \"75\")\n    if(CUDA_VERSION VERSION_GREATER_EQUAL \"110\")\n        list(APPEND CUDA_ARCHS \"80\")\n    endif()\n    if(CUDA_VERSION VERSION_GREATER_EQUAL \"111\")\n        list(APPEND CUDA_ARCHS \"86\")\n    endif()\n    if(CUDA_VERSION VERSION_GREATER_EQUAL \"115\")\n        list(APPEND CUDA_ARCHS \"87\")\n    endif()\n    if(CUDA_VERSION VERSION_GREATER_EQUAL \"118\")\n        list(APPEND CUDA_ARCHS \"89\")\n        list(APPEND CUDA_ARCHS \"90\")\n    endif()\n    list(POP_BACK CUDA_ARCHS CUDA_LAST_SUPPORTED_ARCH)\n    list(APPEND CUDA_ARCHS \"${CUDA_LAST_SUPPORTED_ARCH}+PTX\")\n    if(USE_DEBUG)\n      set(CMAKE_CUDA_FLAGS \"${CMAKE_CUDA_FLAGS} -g\")\n    else()\n      set(CMAKE_CUDA_FLAGS \"${CMAKE_CUDA_FLAGS} -O3 -lineinfo\")\n    endif()\n    message(STATUS \"CMAKE_CUDA_FLAGS: ${CMAKE_CUDA_FLAGS}\")\n\n    add_definitions(-DUSE_CUDA)\n\n    if(NOT DEFINED CMAKE_CUDA_STANDARD)\n      set(CMAKE_CUDA_STANDARD 11)\n      set(CMAKE_CUDA_STANDARD_REQUIRED ON)\n    endif()\nendif()\n\ninclude(CheckCXXSourceCompiles)\ncheck_cxx_source_compiles(\"\n#include <xmmintrin.h>\nint main() {\n  int a = 0;\n  _mm_prefetch(&a, _MM_HINT_NTA);\n  return 0;\n}\n\" MM_PREFETCH)\n\nif(${MM_PREFETCH})\n  message(STATUS \"Using _mm_prefetch\")\n  add_definitions(-DMM_PREFETCH)\nendif()\n\ninclude(CheckCXXSourceCompiles)\ncheck_cxx_source_compiles(\"\n#include <mm_malloc.h>\nint main() {\n  char *a = (char*)_mm_malloc(8, 16);\n  _mm_free(a);\n  return 0;\n}\n\" MM_MALLOC)\n\nif(${MM_MALLOC})\n  message(STATUS \"Using _mm_malloc\")\n  add_definitions(-DMM_MALLOC)\nendif()\n\nif(UNIX OR MINGW OR CYGWIN)\n  set(\n    CMAKE_CXX_FLAGS\n    \"${CMAKE_CXX_FLAGS} -pthread -Wextra -Wall -Wno-ignored-attributes -Wno-unknown-pragmas -Wno-return-type\"\n  )\n  if(MINGW)\n    # ignore this warning: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95353\n    set(\n      CMAKE_CXX_FLAGS\n      \"${CMAKE_CXX_FLAGS} -Wno-stringop-overflow\"\n    )\n  endif()\n  if(USE_DEBUG)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -g -O0\")\n  else()\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O3\")\n  endif()\n  if(USE_SWIG)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-strict-aliasing\")\n  endif()\n  if(NOT USE_OPENMP)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-unknown-pragmas -Wno-unused-private-field\")\n  endif()\n  if(__BUILD_FOR_R AND CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-cast-function-type\")\n  endif()\nendif()\n\nif(WIN32 AND MINGW)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -static-libstdc++\")\nendif()\n\n# Check if inet_pton is already available, to avoid conflicts with the implementation in LightGBM.\n# As of 2022, MinGW started including a definition of inet_pton.\nif(WIN32)\n  include(CheckSymbolExists)\n  list(APPEND CMAKE_REQUIRED_LIBRARIES \"ws2_32\")\n  check_symbol_exists(inet_pton \"ws2tcpip.h\" WIN_INET_PTON_FOUND)\n  if(WIN_INET_PTON_FOUND)\n    add_definitions(-DWIN_HAS_INET_PTON)\n  endif()\n  list(REMOVE_ITEM CMAKE_REQUIRED_LIBRARIES \"ws2_32\")\nendif()\n\nif(MSVC)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /W4 /MP\")\n    if(__BUILD_FOR_R)\n        # MSVC does not like this commit:\n        # https://github.com/wch/r-source/commit/fb52ac1a610571fcb8ac92d886b9fefcffaa7d48\n        #\n        # and raises \"error C3646: 'private_data_c': unknown override specifier\"\n        add_definitions(-DR_LEGACY_RCOMPLEX)\n    endif()\n    if(USE_DEBUG)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /Od\")\n    else()\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /O2 /Ob2 /Oi /Ot /Oy\")\n    endif()\nelse()\n    if(NOT BUILD_STATIC_LIB)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC\")\n    endif()\n    if(NOT USE_DEBUG)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -funroll-loops\")\n    endif()\nendif()\n\nset(LightGBM_HEADER_DIR ${PROJECT_SOURCE_DIR}/include)\n\nset(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR})\nset(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR})\n\ninclude_directories(${LightGBM_HEADER_DIR})\n\nif(USE_MPI)\n  include_directories(${MPI_CXX_INCLUDE_PATH})\nendif()\n\nset(\n    LGBM_SOURCES\n      src/boosting/boosting.cpp\n      src/boosting/gbdt_model_text.cpp\n      src/boosting/gbdt_prediction.cpp\n      src/boosting/gbdt.cpp\n      src/boosting/prediction_early_stop.cpp\n      src/boosting/sample_strategy.cpp\n      src/io/bin.cpp\n      src/io/config_auto.cpp\n      src/io/config.cpp\n      src/io/dataset_loader.cpp\n      src/io/dataset.cpp\n      src/io/file_io.cpp\n      src/io/json11.cpp\n      src/io/metadata.cpp\n      src/io/parser.cpp\n      src/io/train_share_states.cpp\n      src/io/tree.cpp\n      src/metric/dcg_calculator.cpp\n      src/metric/metric.cpp\n      src/network/linker_topo.cpp\n      src/network/linkers_mpi.cpp\n      src/network/linkers_socket.cpp\n      src/network/network.cpp\n      src/objective/objective_function.cpp\n      src/treelearner/data_parallel_tree_learner.cpp\n      src/treelearner/feature_histogram.cpp\n      src/treelearner/feature_parallel_tree_learner.cpp\n      src/treelearner/gpu_tree_learner.cpp\n      src/treelearner/gradient_discretizer.cpp\n      src/treelearner/linear_tree_learner.cpp\n      src/treelearner/serial_tree_learner.cpp\n      src/treelearner/tree_learner.cpp\n      src/treelearner/voting_parallel_tree_learner.cpp\n      src/utils/openmp_wrapper.cpp\n)\nset(\n    LGBM_CUDA_SOURCES\n      src/boosting/cuda/cuda_score_updater.cpp\n      src/boosting/cuda/cuda_score_updater.cu\n      src/metric/cuda/cuda_binary_metric.cpp\n      src/metric/cuda/cuda_pointwise_metric.cpp\n      src/metric/cuda/cuda_regression_metric.cpp\n      src/metric/cuda/cuda_pointwise_metric.cu\n      src/objective/cuda/cuda_binary_objective.cpp\n      src/objective/cuda/cuda_multiclass_objective.cpp\n      src/objective/cuda/cuda_rank_objective.cpp\n      src/objective/cuda/cuda_regression_objective.cpp\n      src/objective/cuda/cuda_binary_objective.cu\n      src/objective/cuda/cuda_multiclass_objective.cu\n      src/objective/cuda/cuda_rank_objective.cu\n      src/objective/cuda/cuda_regression_objective.cu\n      src/treelearner/cuda/cuda_best_split_finder.cpp\n      src/treelearner/cuda/cuda_data_partition.cpp\n      src/treelearner/cuda/cuda_histogram_constructor.cpp\n      src/treelearner/cuda/cuda_leaf_splits.cpp\n      src/treelearner/cuda/cuda_single_gpu_tree_learner.cpp\n      src/treelearner/cuda/cuda_best_split_finder.cu\n      src/treelearner/cuda/cuda_data_partition.cu\n      src/treelearner/cuda/cuda_gradient_discretizer.cu\n      src/treelearner/cuda/cuda_histogram_constructor.cu\n      src/treelearner/cuda/cuda_leaf_splits.cu\n      src/treelearner/cuda/cuda_single_gpu_tree_learner.cu\n      src/io/cuda/cuda_column_data.cu\n      src/io/cuda/cuda_tree.cu\n      src/io/cuda/cuda_column_data.cpp\n      src/io/cuda/cuda_metadata.cpp\n      src/io/cuda/cuda_row_data.cpp\n      src/io/cuda/cuda_tree.cpp\n      src/cuda/cuda_utils.cpp\n      src/cuda/cuda_algorithms.cu\n)\n\nif(USE_CUDA)\n  list(APPEND LGBM_SOURCES ${LGBM_CUDA_SOURCES})\nendif()\n\nadd_library(lightgbm_objs OBJECT ${LGBM_SOURCES})\n\nif(BUILD_CLI)\n    add_executable(lightgbm src/main.cpp src/application/application.cpp)\n    target_link_libraries(lightgbm PRIVATE lightgbm_objs)\nendif()\n\nset(API_SOURCES \"src/c_api.cpp\")\n# Only build the R part of the library if building for\n# use with the R-package\nif(__BUILD_FOR_R)\n  list(APPEND API_SOURCES \"src/lightgbm_R.cpp\")\nendif()\n\nadd_library(lightgbm_capi_objs OBJECT ${API_SOURCES})\n\nif(BUILD_STATIC_LIB)\n  add_library(_lightgbm STATIC)\nelse()\n  add_library(_lightgbm SHARED)\nendif()\n\n# R expects libraries of the form <project>.{dll,dylib,so}, not lib_<project>.{dll,dylib,so}\nif(__BUILD_FOR_R)\n  set_target_properties(\n    _lightgbm\n    PROPERTIES\n      PREFIX \"\"\n      OUTPUT_NAME \"lightgbm\"\n  )\nendif()\n\n# LightGBM headers include openmp, cuda, R etc. headers,\n# thus PUBLIC is required for building _lightgbm_swig target.\ntarget_link_libraries(_lightgbm PUBLIC lightgbm_capi_objs lightgbm_objs)\n\nif(MSVC AND NOT __BUILD_FOR_R)\n  set_target_properties(_lightgbm PROPERTIES OUTPUT_NAME \"lib_lightgbm\")\nendif()\n\nif(USE_SWIG)\n  set_property(SOURCE swig/lightgbmlib.i PROPERTY CPLUSPLUS ON)\n  list(APPEND swig_options -package com.microsoft.ml.lightgbm)\n  set_property(SOURCE swig/lightgbmlib.i PROPERTY SWIG_FLAGS \"${swig_options}\")\n  swig_add_library(_lightgbm_swig LANGUAGE java SOURCES swig/lightgbmlib.i)\n  swig_link_libraries(_lightgbm_swig _lightgbm)\n  set_target_properties(\n    _lightgbm_swig\n    PROPERTIES\n      # needed to ensure Linux build does not have lib prefix specified twice, e.g. liblib_lightgbm_swig\n      PREFIX \"\"\n      # needed in some versions of CMake for VS and MinGW builds to ensure output dll has lib prefix\n      OUTPUT_NAME \"lib_lightgbm_swig\"\n  )\n  if(WIN32)\n    set(LGBM_SWIG_LIB_DESTINATION_PATH \"${LGBM_SWIG_DESTINATION_DIR}/lib_lightgbm_swig.dll\")\n    if(MINGW OR CYGWIN)\n        set(LGBM_LIB_SOURCE_PATH \"${PROJECT_SOURCE_DIR}/lib_lightgbm.dll\")\n        set(LGBM_SWIG_LIB_SOURCE_PATH \"${PROJECT_SOURCE_DIR}/lib_lightgbm_swig.dll\")\n    else()\n        set(LGBM_LIB_SOURCE_PATH \"${PROJECT_SOURCE_DIR}/Release/lib_lightgbm.dll\")\n        set(LGBM_SWIG_LIB_SOURCE_PATH \"${PROJECT_SOURCE_DIR}/Release/lib_lightgbm_swig.dll\")\n    endif()\n  elseif(APPLE)\n    set(LGBM_LIB_SOURCE_PATH \"${PROJECT_SOURCE_DIR}/lib_lightgbm.dylib\")\n    set(LGBM_SWIG_LIB_SOURCE_PATH \"${PROJECT_SOURCE_DIR}/lib_lightgbm_swig.jnilib\")\n    set(LGBM_SWIG_LIB_DESTINATION_PATH \"${LGBM_SWIG_DESTINATION_DIR}/lib_lightgbm_swig.dylib\")\n  else()\n    set(LGBM_LIB_SOURCE_PATH \"${PROJECT_SOURCE_DIR}/lib_lightgbm.so\")\n    set(LGBM_SWIG_LIB_SOURCE_PATH \"${PROJECT_SOURCE_DIR}/lib_lightgbm_swig.so\")\n    set(LGBM_SWIG_LIB_DESTINATION_PATH \"${LGBM_SWIG_DESTINATION_DIR}/lib_lightgbm_swig.so\")\n  endif()\n  add_custom_command(\n      TARGET _lightgbm_swig\n      POST_BUILD\n      COMMAND \"${Java_JAVAC_EXECUTABLE}\" -d . java/*.java\n      COMMAND\n        \"${CMAKE_COMMAND}\"\n        -E\n        copy_if_different\n        \"${LGBM_LIB_SOURCE_PATH}\"\n        \"${LGBM_SWIG_DESTINATION_DIR}\"\n      COMMAND\n        \"${CMAKE_COMMAND}\"\n        -E\n        copy_if_different\n        \"${LGBM_SWIG_LIB_SOURCE_PATH}\"\n        \"${LGBM_SWIG_LIB_DESTINATION_PATH}\"\n      COMMAND \"${Java_JAR_EXECUTABLE}\" -cf lightgbmlib.jar com\n    )\nendif()\n\nif(USE_MPI)\n  target_link_libraries(lightgbm_objs PUBLIC ${MPI_CXX_LIBRARIES})\nendif()\n\nif(USE_OPENMP)\n  if(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    target_link_libraries(lightgbm_objs PUBLIC OpenMP::OpenMP_CXX)\n    # c_api headers also includes OpenMP headers, thus compiling\n    # lightgbm_capi_objs needs include directory for OpenMP.\n    # Specifying OpenMP in target_link_libraries will get include directory\n    # requirements for compilation.\n    # This uses CMake's Transitive Usage Requirements. Refer to CMake doc:\n    # https://cmake.org/cmake/help/v3.16/manual/cmake-buildsystem.7.html#transitive-usage-requirements\n    target_link_libraries(lightgbm_capi_objs PUBLIC OpenMP::OpenMP_CXX)\n  endif()\nendif()\n\nif(USE_GPU)\n  target_link_libraries(lightgbm_objs PUBLIC ${OpenCL_LIBRARY} ${Boost_LIBRARIES})\nendif()\n\nif(__INTEGRATE_OPENCL)\n  # targets OpenCL and Boost are added in IntegratedOpenCL.cmake\n  add_dependencies(lightgbm_objs OpenCL Boost)\n  # variables INTEGRATED_OPENCL_* are set in IntegratedOpenCL.cmake\n  target_include_directories(lightgbm_objs PRIVATE ${INTEGRATED_OPENCL_INCLUDES})\n  target_compile_definitions(lightgbm_objs PRIVATE ${INTEGRATED_OPENCL_DEFINITIONS})\n  target_link_libraries(lightgbm_objs PUBLIC ${INTEGRATED_OPENCL_LIBRARIES} ${CMAKE_DL_LIBS})\nendif()\n\nif(USE_CUDA)\n\n  set_target_properties(\n    lightgbm_objs\n    PROPERTIES\n      CUDA_ARCHITECTURES ${CUDA_ARCHS}\n      CUDA_SEPARABLE_COMPILATION ON\n  )\n\n  set_target_properties(\n    _lightgbm\n    PROPERTIES\n      CUDA_ARCHITECTURES ${CUDA_ARCHS}\n      CUDA_RESOLVE_DEVICE_SYMBOLS ON\n  )\n\n  if(BUILD_CLI)\n    set_target_properties(\n      lightgbm\n      PROPERTIES\n        CUDA_ARCHITECTURES ${CUDA_ARCHS}\n        CUDA_RESOLVE_DEVICE_SYMBOLS ON\n    )\n  endif()\nendif()\n\nif(WIN32)\n    if(MINGW OR CYGWIN)\n      target_link_libraries(lightgbm_objs PUBLIC ws2_32 iphlpapi)\n    endif()\nendif()\n\nif(__BUILD_FOR_R)\n  # utils/log.h and capi uses R headers, thus both object libraries need to link\n  # with R lib.\n  if(MSVC)\n    set(R_LIB ${LIBR_MSVC_CORE_LIBRARY})\n  else()\n    set(R_LIB ${LIBR_CORE_LIBRARY})\n  endif()\n  target_link_libraries(lightgbm_objs PUBLIC ${R_LIB})\n  target_link_libraries(lightgbm_capi_objs PUBLIC ${R_LIB})\nendif()\n\n#-- Google C++ tests\nif(BUILD_CPP_TEST)\n  find_package(GTest CONFIG)\n  if(NOT GTEST_FOUND)\n    message(STATUS \"Did not find Google Test in the system root. Fetching Google Test now...\")\n    include(FetchContent)\n    FetchContent_Declare(\n      googletest\n      GIT_REPOSITORY https://github.com/google/googletest.git\n      GIT_TAG        v1.14.0\n    )\n    FetchContent_MakeAvailable(googletest)\n    add_library(GTest::GTest ALIAS gtest)\n  endif()\n\n  set(LightGBM_TEST_HEADER_DIR ${PROJECT_SOURCE_DIR}/tests/cpp_tests)\n  include_directories(${LightGBM_TEST_HEADER_DIR})\n\n  set(\n    CPP_TEST_SOURCES\n      tests/cpp_tests/test_array_args.cpp\n      tests/cpp_tests/test_arrow.cpp\n      tests/cpp_tests/test_byte_buffer.cpp\n      tests/cpp_tests/test_chunked_array.cpp\n      tests/cpp_tests/test_common.cpp\n      tests/cpp_tests/test_main.cpp\n      tests/cpp_tests/test_serialize.cpp\n      tests/cpp_tests/test_single_row.cpp\n      tests/cpp_tests/test_stream.cpp\n      tests/cpp_tests/testutils.cpp\n    )\n  if(MSVC)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /permissive-\")\n  endif()\n  add_executable(testlightgbm ${CPP_TEST_SOURCES})\n  target_link_libraries(testlightgbm PRIVATE lightgbm_objs lightgbm_capi_objs GTest::GTest)\nendif()\n\nif(BUILD_CLI)\n    install(\n      TARGETS lightgbm\n      RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin\n    )\nendif()\n\nif(__BUILD_FOR_PYTHON)\n    set(CMAKE_INSTALL_PREFIX \"lightgbm\")\nendif()\n\n# The macOS linker puts an absolute path to linked libraries in lib_lightgbm.dylib.\n# This block overrides that information for LightGBM's OpenMP dependency, to allow\n# finding that library in more places.\n#\n# This reduces the risk of runtime issues resulting from multiple {libgomp,libiomp,libomp}.dylib being loaded.\n#\nif(APPLE AND USE_OPENMP AND NOT BUILD_STATIC_LIB)\n  # store path to {libgomp,libiomp,libomp}.dylib found at build time in a variable\n  get_target_property(\n    OpenMP_LIBRARY_LOCATION\n    OpenMP::OpenMP_CXX\n    INTERFACE_LINK_LIBRARIES\n  )\n  # get just the filename of that path\n  # (to deal with the possibility that it might be 'libomp.dylib' or 'libgomp.dylib' or 'libiomp.dylib')\n  get_filename_component(\n    OpenMP_LIBRARY_NAME\n    ${OpenMP_LIBRARY_LOCATION}\n    NAME\n  )\n  # get directory of that path\n  get_filename_component(\n    OpenMP_LIBRARY_DIR\n    ${OpenMP_LIBRARY_LOCATION}\n    DIRECTORY\n  )\n  # get exact name of the library in a variable\n  get_target_property(\n    __LIB_LIGHTGBM_OUTPUT_NAME\n    _lightgbm\n    OUTPUT_NAME\n  )\n  if(NOT __LIB_LIGHTGBM_OUTPUT_NAME)\n    set(__LIB_LIGHTGBM_OUTPUT_NAME \"lib_lightgbm\")\n  endif()\n\n  if(CMAKE_SHARED_LIBRARY_SUFFIX_CXX)\n    set(\n      __LIB_LIGHTGBM_FILENAME \"${__LIB_LIGHTGBM_OUTPUT_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX_CXX}\"\n      CACHE INTERNAL \"lightgbm shared library filename\"\n    )\n  else()\n    set(\n      __LIB_LIGHTGBM_FILENAME \"${__LIB_LIGHTGBM_OUTPUT_NAME}.dylib\"\n      CACHE INTERNAL \"lightgbm shared library filename\"\n    )\n  endif()\n\n  # Override the absolute path to OpenMP with a relative one using @rpath.\n  #\n  # This also ensures that if a {libgomp,libiomp,libomp}.dylib has already been loaded, it'll just use that.\n  add_custom_command(\n    TARGET _lightgbm\n    POST_BUILD\n      COMMAND\n        install_name_tool\n        -change\n        ${OpenMP_LIBRARY_LOCATION}\n        \"@rpath/${OpenMP_LIBRARY_NAME}\"\n        \"${__LIB_LIGHTGBM_FILENAME}\"\n      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n      COMMENT \"Replacing hard-coded OpenMP install_name with '@rpath/${OpenMP_LIBRARY_NAME}'...\"\n  )\n  # add RPATH entries to ensure the loader looks in the following, in the following order:\n  #\n  #   - (R-only) ${LIBR_LIBS_DIR}    (wherever R for macOS stores vendored third-party libraries)\n  #   - ${OpenMP_LIBRARY_DIR}        (wherever find_package(OpenMP) found OpenMP at build time)\n  #   - /opt/homebrew/opt/libomp/lib (where 'brew install' / 'brew link' puts libomp.dylib)\n  #   - /opt/local/lib/libomp        (where 'port install' puts libomp.dylib)\n  #\n\n  # with some compilers, OpenMP ships with the compiler (e.g. libgomp with gcc)\n  list(APPEND __omp_install_rpaths \"${OpenMP_LIBRARY_DIR}\")\n\n  # with clang, libomp doesn't ship with the compiler and might be supplied separately\n  if(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n      list(\n        APPEND __omp_install_rpaths\n          \"/opt/homebrew/opt/libomp/lib\"\n          \"/opt/local/lib/libomp\"\n      )\n      # It appears that CRAN's macOS binaries compiled with -fopenmp have install names\n      # of the form:\n      #\n      #   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libomp.dylib\n      #\n      # That corresponds to the libomp.dylib that ships with the R framework for macOS, available\n      # from https://cran.r-project.org/bin/macosx/.\n      #\n      # That absolute-path install name leads to that library being loaded unconditionally.\n      #\n      # That can result in e.g. 'library(data.table)' loading R's libomp.dylib and 'library(lightgbm)' loading\n      # Homebrew's. Having 2 loaded in the same process can lead to segfaults and unpredictable behavior.\n      #\n      # This can't be easily avoided by forcing R-package builds in LightGBM to use R's libomp.dylib\n      # at build time... LightGBM's CMake uses find_package(OpenMP), and R for macOS only provides the\n      # library, not CMake config files for it.\n      #\n      # Best we can do, to allow CMake-based builds of the R-package here to continue to work\n      # alongside CRAN-prepared binaries of other packages with OpenMP dependencies, is to\n      # ensure that R's library directory is the first place the loader searches for\n      # libomp.dylib when clang is used.\n      #\n      # ref: https://github.com/microsoft/LightGBM/issues/6628\n      #\n      if(__BUILD_FOR_R)\n        list(PREPEND __omp_install_rpaths \"${LIBR_LIBS_DIR}\")\n      endif()\n  endif()\n  set_target_properties(\n    _lightgbm\n    PROPERTIES\n      BUILD_WITH_INSTALL_RPATH TRUE\n      INSTALL_RPATH \"${__omp_install_rpaths}\"\n      INSTALL_RPATH_USE_LINK_PATH FALSE\n  )\nendif()\n\ninstall(\n  TARGETS _lightgbm\n  RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin\n  LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib\n)\n\nif(INSTALL_HEADERS)\n    install(\n      DIRECTORY ${LightGBM_HEADER_DIR}/LightGBM\n      DESTINATION ${CMAKE_INSTALL_PREFIX}/include\n    )\n    install(\n      FILES ${FAST_DOUBLE_PARSER_INCLUDE_DIR}/fast_double_parser.h\n      DESTINATION ${CMAKE_INSTALL_PREFIX}/include/LightGBM/utils\n    )\n    install(\n      DIRECTORY ${FMT_INCLUDE_DIR}/\n      DESTINATION ${CMAKE_INSTALL_PREFIX}/include/LightGBM/utils\n      FILES_MATCHING PATTERN \"*.h\"\n    )\nendif()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.5771484375,
          "content": "# Microsoft Open Source Code of Conduct\n\nThis code of conduct outlines expectations for participation in Microsoft-managed open source communities, as well as steps for reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all. People violating this code of conduct may be banned from the community.\n\n## Our open source communities strive to:\n\n* Be friendly and patient: Remember you might not be communicating in someone else's primary spoken or programming language, and others may not have your level of understanding.\n* Be welcoming: Our communities welcome and support people of all backgrounds and identities. This includes, but is not limited to members of any race, ethnicity, culture, national origin, color, immigration status, social and economic class, educational level, sex, sexual orientation, gender identity and expression, age, size, family status, political belief, religion, and mental and physical ability.\n* Be respectful: We are a world-wide community of professionals, and we conduct ourselves professionally. Disagreement is no excuse for poor behavior and poor manners. Disrespectful and unacceptable behavior includes, but is not limited to:\n    1. Violent threats or language.\n    2. Discriminatory or derogatory jokes and language.\n    3. Posting sexually explicit or violent material.\n    4. Posting, or threatening to post, people's personally identifying information (\"doxing\").\n    5. Insults, especially those using discriminatory terms or slurs.\nBehavior that could be perceived as sexual attention.\nAdvocating for or encouraging any of the above behaviors.\n* Understand disagreements: Disagreements, both social and technical, are useful learning opportunities. Seek to understand the other viewpoints and resolve differences constructively.\n* This code is not exhaustive or complete. It serves to capture our common understanding of a productive, collaborative environment. We expect the code to be followed in spirit as much as in the letter.\n\n## Scope\n\nThis code of conduct applies to all repos and communities for Microsoft-managed open source projects regardless of whether or not the repo explicitly calls out its use of this code. The code also applies in public spaces when an individual is representing a project or its community. Examples include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\nNote: Some Microsoft-managed communities have codes of conduct that pre-date this document and issue resolution process. While communities are not required to change their code, they are expected to use the resolution process outlined here. The review team will coordinate with the communities involved to address your concerns.\n\n## Reporting Code of Conduct Issues\n\nWe encourage all communities to resolve issues on their own whenever possible. This builds a broader and deeper understanding and ultimately a healthier interaction. In the event that an issue cannot be resolved locally, please feel free to report your concerns by contacting opencode@microsoft.com. Your report will be handled in accordance with the issue resolution process described in the Code of Conduct FAQ.\n\nIn your report please include:\n\n* Your contact information.\n* Names (real, usernames or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well.\n* Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public chat log), please include a link or attachment.\n* Any additional information that may be helpful.\n\nAll reports will be reviewed by a multi-person team and will result in a response that is deemed necessary and appropriate to the circumstances. Where additional perspectives are needed, the team may seek insight from others with relevant expertise or experience. The confidentiality of the person reporting the incident will be kept at all times. Involved parties are never part of the review team.\n\nAnyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the review team may take any action they deem appropriate, including a permanent ban from the community.\n\nThis code of conduct is based on the template established by the TODO Group and used by numerous other large communities (e.g., Facebook, Yahoo, Twitter, GitHub) and the Scope section from the Contributor Covenant version 1.4.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.521484375,
          "content": "# contributing\n\nLightGBM has been developed and used by many active community members.\n\nYour help is very valuable to make it better for everyone.\n\n## How to Contribute\n\n- Check the [Feature Requests Hub](https://github.com/microsoft/LightGBM/issues/2302), and submit pull requests to address chosen issue. If you need development guideline, you can check the [Development Guide](https://github.com/microsoft/LightGBM/blob/master/docs/Development-Guide.rst) or directly ask us in Issues/Pull Requests.\n- Contribute to the [tests](https://github.com/microsoft/LightGBM/tree/master/tests) to make it more reliable.\n- Contribute to the [documentation](https://github.com/microsoft/LightGBM/tree/master/docs) to make it clearer for everyone.\n- Contribute to the [examples](https://github.com/microsoft/LightGBM/tree/master/examples) to share your experience with other users.\n- Add your stories and experience to [Awesome LightGBM](https://github.com/microsoft/LightGBM/blob/master/examples/README.md). If LightGBM helped you in a machine learning competition or some research application, we want to hear about it!\n- [Open an issue](https://github.com/microsoft/LightGBM/issues) to report problems or recommend new features.\n\n## Development Guide\n\n### Linting\n\nEvery commit in the repository is tested with multiple static analyzers.\n\nWhen developing locally, run some of them using `pre-commit` ([pre-commit docs](https://pre-commit.com/)).\n\n```shell\npre-commit run --all-files\n```\n\nThat command will check for some issues and automatically reformat the code.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) Microsoft Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "R-package",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.3564453125,
          "content": "<img src=https://github.com/microsoft/LightGBM/blob/master/docs/logo/LightGBM_logo_black_text.svg width=300 />\n\nLight Gradient Boosting Machine\n===============================\n\n[![Python-package GitHub Actions Build Status](https://github.com/microsoft/LightGBM/actions/workflows/python_package.yml/badge.svg?branch=master)](https://github.com/microsoft/LightGBM/actions/workflows/python_package.yml)\n[![R-package GitHub Actions Build Status](https://github.com/microsoft/LightGBM/actions/workflows/r_package.yml/badge.svg?branch=master)](https://github.com/microsoft/LightGBM/actions/workflows/r_package.yml)\n[![CUDA Version GitHub Actions Build Status](https://github.com/microsoft/LightGBM/actions/workflows/cuda.yml/badge.svg?branch=master)](https://github.com/microsoft/LightGBM/actions/workflows/cuda.yml)\n[![Static Analysis GitHub Actions Build Status](https://github.com/microsoft/LightGBM/actions/workflows/static_analysis.yml/badge.svg?branch=master)](https://github.com/microsoft/LightGBM/actions/workflows/static_analysis.yml)\n[![Azure Pipelines Build Status](https://lightgbm-ci.visualstudio.com/lightgbm-ci/_apis/build/status/Microsoft.LightGBM?branchName=master)](https://lightgbm-ci.visualstudio.com/lightgbm-ci/_build/latest?definitionId=1)\n[![Appveyor Build Status](https://ci.appveyor.com/api/projects/status/1ys5ot401m0fep6l/branch/master?svg=true)](https://ci.appveyor.com/project/guolinke/lightgbm/branch/master)\n[![Documentation Status](https://readthedocs.org/projects/lightgbm/badge/?version=latest)](https://lightgbm.readthedocs.io/)\n[![Link checks](https://github.com/microsoft/LightGBM/actions/workflows/linkchecker.yml/badge.svg?branch=master)](https://github.com/microsoft/LightGBM/actions/workflows/linkchecker.yml)\n[![License](https://img.shields.io/github/license/microsoft/lightgbm.svg)](https://github.com/microsoft/LightGBM/blob/master/LICENSE)\n[![Python Versions](https://img.shields.io/pypi/pyversions/lightgbm.svg?logo=python&logoColor=white)](https://pypi.org/project/lightgbm)\n[![PyPI Version](https://img.shields.io/pypi/v/lightgbm.svg?logo=pypi&logoColor=white)](https://pypi.org/project/lightgbm)\n[![conda Version](https://img.shields.io/conda/vn/conda-forge/lightgbm?logo=conda-forge&logoColor=white&label=conda)](https://anaconda.org/conda-forge/lightgbm)\n[![CRAN Version](https://www.r-pkg.org/badges/version/lightgbm)](https://cran.r-project.org/package=lightgbm)\n[![NuGet Version](https://img.shields.io/nuget/v/lightgbm?logo=nuget&logoColor=white)](https://www.nuget.org/packages/LightGBM)\n\nLightGBM is a gradient boosting framework that uses tree based learning algorithms. It is designed to be distributed and efficient with the following advantages:\n\n- Faster training speed and higher efficiency.\n- Lower memory usage.\n- Better accuracy.\n- Support of parallel, distributed, and GPU learning.\n- Capable of handling large-scale data.\n\nFor further details, please refer to [Features](https://github.com/microsoft/LightGBM/blob/master/docs/Features.rst).\n\nBenefiting from these advantages, LightGBM is being widely-used in many [winning solutions](https://github.com/microsoft/LightGBM/blob/master/examples/README.md#machine-learning-challenge-winning-solutions) of machine learning competitions.\n\n[Comparison experiments](https://github.com/microsoft/LightGBM/blob/master/docs/Experiments.rst#comparison-experiment) on public datasets show that LightGBM can outperform existing boosting frameworks on both efficiency and accuracy, with significantly lower memory consumption. What's more, [distributed learning experiments](https://github.com/microsoft/LightGBM/blob/master/docs/Experiments.rst#parallel-experiment) show that LightGBM can achieve a linear speed-up by using multiple machines for training in specific settings.\n\nGet Started and Documentation\n-----------------------------\n\nOur primary documentation is at https://lightgbm.readthedocs.io/ and is generated from this repository. If you are new to LightGBM, follow [the installation instructions](https://lightgbm.readthedocs.io/en/latest/Installation-Guide.html) on that site.\n\nNext you may want to read:\n\n- [**Examples**](https://github.com/microsoft/LightGBM/tree/master/examples) showing command line usage of common tasks.\n- [**Features**](https://github.com/microsoft/LightGBM/blob/master/docs/Features.rst) and algorithms supported by LightGBM.\n- [**Parameters**](https://github.com/microsoft/LightGBM/blob/master/docs/Parameters.rst) is an exhaustive list of customization you can make.\n- [**Distributed Learning**](https://github.com/microsoft/LightGBM/blob/master/docs/Parallel-Learning-Guide.rst) and [**GPU Learning**](https://github.com/microsoft/LightGBM/blob/master/docs/GPU-Tutorial.rst) can speed up computation.\n- [**FLAML**](https://www.microsoft.com/en-us/research/project/fast-and-lightweight-automl-for-large-scale-data/articles/flaml-a-fast-and-lightweight-automl-library/) provides automated tuning for LightGBM ([code examples](https://microsoft.github.io/FLAML/docs/Examples/AutoML-for-LightGBM/)).\n- [**Optuna Hyperparameter Tuner**](https://medium.com/optuna/lightgbm-tuner-new-optuna-integration-for-hyperparameter-optimization-8b7095e99258) provides automated tuning for LightGBM hyperparameters ([code examples](https://github.com/optuna/optuna-examples/blob/main/lightgbm/lightgbm_tuner_simple.py)).\n- [**Understanding LightGBM Parameters (and How to Tune Them using Neptune)**](https://neptune.ai/blog/lightgbm-parameters-guide).\n\nDocumentation for contributors:\n\n- [**How we update readthedocs.io**](https://github.com/microsoft/LightGBM/blob/master/docs/README.rst).\n- Check out the [**Development Guide**](https://github.com/microsoft/LightGBM/blob/master/docs/Development-Guide.rst).\n\nNews\n----\n\nPlease refer to changelogs at [GitHub releases](https://github.com/microsoft/LightGBM/releases) page.\n\nExternal (Unofficial) Repositories\n----------------------------------\n\nProjects listed here offer alternative ways to use LightGBM.\nThey are not maintained or officially endorsed by the `LightGBM` development team.\n\nJPMML (Java PMML converter): https://github.com/jpmml/jpmml-lightgbm\n\nNyoka (Python PMML converter): https://github.com/SoftwareAG/nyoka\n\nTreelite (model compiler for efficient deployment): https://github.com/dmlc/treelite\n\nlleaves (LLVM-based model compiler for efficient inference): https://github.com/siboehm/lleaves\n\nHummingbird (model compiler into tensor computations): https://github.com/microsoft/hummingbird\n\ncuML Forest Inference Library (GPU-accelerated inference): https://github.com/rapidsai/cuml\n\ndaal4py (Intel CPU-accelerated inference): https://github.com/intel/scikit-learn-intelex/tree/master/daal4py\n\nm2cgen (model appliers for various languages): https://github.com/BayesWitnesses/m2cgen\n\nleaves (Go model applier): https://github.com/dmitryikh/leaves\n\nONNXMLTools (ONNX converter): https://github.com/onnx/onnxmltools\n\nSHAP (model output explainer): https://github.com/slundberg/shap\n\nShapash (model visualization and interpretation): https://github.com/MAIF/shapash\n\ndtreeviz (decision tree visualization and model interpretation): https://github.com/parrt/dtreeviz\n\nsupertree (interactive visualization of decision trees): https://github.com/mljar/supertree\n\nSynapseML (LightGBM on Spark): https://github.com/microsoft/SynapseML\n\nKubeflow Fairing (LightGBM on Kubernetes): https://github.com/kubeflow/fairing\n\nKubeflow Operator (LightGBM on Kubernetes): https://github.com/kubeflow/xgboost-operator\n\nlightgbm_ray (LightGBM on Ray): https://github.com/ray-project/lightgbm_ray\n\nMars (LightGBM on Mars): https://github.com/mars-project/mars\n\nML.NET (.NET/C#-package): https://github.com/dotnet/machinelearning\n\nLightGBM.NET (.NET/C#-package): https://github.com/rca22/LightGBM.Net\n\nLightGBM Ruby (Ruby gem): https://github.com/ankane/lightgbm-ruby\n\nLightGBM4j (Java high-level binding): https://github.com/metarank/lightgbm4j\n\nLightGBM4J (JVM interface for LightGBM written in Scala): https://github.com/seek-oss/lightgbm4j\n\nJulia-package: https://github.com/IQVIA-ML/LightGBM.jl\n\nlightgbm3 (Rust binding): https://github.com/Mottl/lightgbm3-rs\n\nMLServer (inference server for LightGBM): https://github.com/SeldonIO/MLServer\n\nMLflow (experiment tracking, model monitoring framework): https://github.com/mlflow/mlflow\n\nFLAML (AutoML library for hyperparameter optimization): https://github.com/microsoft/FLAML\n\nMLJAR AutoML (AutoML on tabular data): https://github.com/mljar/mljar-supervised\n\nOptuna (hyperparameter optimization framework): https://github.com/optuna/optuna\n\nLightGBMLSS (probabilistic modelling with LightGBM): https://github.com/StatMixedML/LightGBMLSS\n\nmlforecast (time series forecasting with LightGBM): https://github.com/Nixtla/mlforecast\n\nskforecast (time series forecasting with LightGBM): https://github.com/JoaquinAmatRodrigo/skforecast\n\n`{bonsai}` (R `{parsnip}`-compliant interface): https://github.com/tidymodels/bonsai\n\n`{mlr3extralearners}` (R `{mlr3}`-compliant interface): https://github.com/mlr-org/mlr3extralearners\n\nlightgbm-transform (feature transformation binding): https://github.com/microsoft/lightgbm-transform\n\n`postgresml` (LightGBM training and prediction in SQL, via a Postgres extension): https://github.com/postgresml/postgresml\n\n`pyodide` (run `lightgbm` Python-package in a web browser): https://github.com/pyodide/pyodide\n\n`vaex-ml` (Python DataFrame library with its own interface to LightGBM): https://github.com/vaexio/vaex\n\nSupport\n-------\n\n- Ask a question [on Stack Overflow with the `lightgbm` tag](https://stackoverflow.com/questions/ask?tags=lightgbm), we monitor this for new questions.\n- Open **bug reports** and **feature requests** on [GitHub issues](https://github.com/microsoft/LightGBM/issues).\n\nHow to Contribute\n-----------------\n\nCheck [CONTRIBUTING](https://github.com/microsoft/LightGBM/blob/master/CONTRIBUTING.md) page.\n\nMicrosoft Open Source Code of Conduct\n-------------------------------------\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nReference Papers\n----------------\n\nYu Shi, Guolin Ke, Zhuoming Chen, Shuxin Zheng, Tie-Yan Liu. \"Quantized Training of Gradient Boosting Decision Trees\" ([link](https://papers.nips.cc/paper_files/paper/2022/hash/77911ed9e6e864ca1a3d165b2c3cb258-Abstract.html)). Advances in Neural Information Processing Systems 35 (NeurIPS 2022), pp. 18822-18833.\n\nGuolin Ke, Qi Meng, Thomas Finley, Taifeng Wang, Wei Chen, Weidong Ma, Qiwei Ye, Tie-Yan Liu. \"[LightGBM: A Highly Efficient Gradient Boosting Decision Tree](https://papers.nips.cc/paper/6907-lightgbm-a-highly-efficient-gradient-boosting-decision-tree)\". Advances in Neural Information Processing Systems 30 (NIPS 2017), pp. 3149-3157.\n\nQi Meng, Guolin Ke, Taifeng Wang, Wei Chen, Qiwei Ye, Zhi-Ming Ma, Tie-Yan Liu. \"[A Communication-Efficient Parallel Algorithm for Decision Tree](http://papers.nips.cc/paper/6380-a-communication-efficient-parallel-algorithm-for-decision-tree)\". Advances in Neural Information Processing Systems 29 (NIPS 2016), pp. 1279-1287.\n\nHuan Zhang, Si Si and Cho-Jui Hsieh. \"[GPU Acceleration for Large-scale Tree Boosting](https://arxiv.org/abs/1706.08359)\". SysML Conference, 2018.\n\nLicense\n-------\n\nThis project is licensed under the terms of the MIT license. See [LICENSE](https://github.com/microsoft/LightGBM/blob/master/LICENSE) for additional details.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.69140625,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.7 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc).\n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "VERSION.txt",
          "type": "blob",
          "size": 0.0087890625,
          "content": "4.5.0.99\n"
        },
        {
          "name": "biome.json",
          "type": "blob",
          "size": 0.34375,
          "content": "{\n    \"files\": {\n        \"ignore\": [\".mypy_cache/\"]\n    },\n    \"formatter\": {\n        \"enabled\": true,\n        \"useEditorconfig\": true\n    },\n    \"organizeImports\": {\n        \"enabled\": true\n    },\n    \"linter\": {\n        \"enabled\": true,\n        \"rules\": {\n            \"all\": true\n        }\n    },\n    \"javascript\": {\n        \"globals\": [\"$\"]\n    }\n}\n"
        },
        {
          "name": "build-cran-package.sh",
          "type": "blob",
          "size": 6.828125,
          "content": "#!/bin/sh\n\n# [description]\n#     Prepare a source distribution of the R-package\n#     to be submitted to CRAN.\n#\n# [arguments]\n#\n#     --r-executable Customize the R executable used by `R CMD build`.\n#                    Useful if building the R-package in an environment with\n#                    non-standard builds of R, such as those provided in\n#                    https://github.com/wch/r-debug.\n#\n#     --no-build-vignettes Pass this flag to skip creating vignettes.\n#                          You might want to do this to avoid installing\n#                          vignette-only dependencies, or to avoid\n#                          portability issues.\n#\n# [usage]\n#\n#     # default usage\n#     sh build-cran-package.sh\n#\n#     # custom R build\n#     sh build-cran-package.sh --r-executable=RDvalgrind\n#\n#     # skip vignette building\n#     sh build-cran-package.sh --no-build-vignettes\n\nset -e -u\n\n# Default values of arguments\nBUILD_VIGNETTES=true\nLGB_R_EXECUTABLE=R\n\nwhile [ $# -gt 0 ]; do\n  case \"$1\" in\n    --r-executable=*)\n      LGB_R_EXECUTABLE=\"${1#*=}\"\n      ;;\n    --no-build-vignettes*)\n      BUILD_VIGNETTES=false\n      ;;\n    *)\n      echo \"invalid argument '${1}'\"\n      exit 1\n      ;;\n  esac\n  shift\ndone\n\necho \"Building lightgbm with R executable: ${LGB_R_EXECUTABLE}\"\n\nORIG_WD=\"$(pwd)\"\nTEMP_R_DIR=\"$(pwd)/lightgbm_r\"\n\nif test -d \"${TEMP_R_DIR}\"; then\n    rm -r \"${TEMP_R_DIR}\"\nfi\nmkdir -p \"${TEMP_R_DIR}\"\n\nCURRENT_DATE=$(date +'%Y-%m-%d')\n\n# R packages cannot have versions like 3.0.0rc1, but\n# 3.0.0-1 is acceptable\nLGB_VERSION=$(head -1 ./VERSION.txt | sed \"s/rc/-/g\")\n\n# move relevant files\ncp -R R-package/* \"${TEMP_R_DIR}\"\ncp -R include \"${TEMP_R_DIR}/src/\"\ncp -R src/* \"${TEMP_R_DIR}/src/\"\n\nif ${BUILD_VIGNETTES} ; then\n    cp docs/logo/LightGBM_logo_black_text.svg \"${TEMP_R_DIR}/vignettes/\"\nfi\n\ncp \\\n    external_libs/fast_double_parser/include/fast_double_parser.h \\\n    \"${TEMP_R_DIR}/src/include/LightGBM/utils\"\n\nmkdir -p \"${TEMP_R_DIR}/src/include/LightGBM/utils/fmt\"\ncp \\\n    external_libs/fmt/include/fmt/*.h \\\n    \"${TEMP_R_DIR}/src/include/LightGBM/utils/fmt\"\n\n# including only specific files from Eigen, to keep the R-package\n# small and avoid redistributing code with licenses incompatible with\n# LightGBM's license\nEIGEN_R_DIR=\"${TEMP_R_DIR}/src/include/Eigen\"\nmkdir -p \"${EIGEN_R_DIR}\"\n\nmodules=\"Cholesky Core Dense Eigenvalues Geometry Householder Jacobi LU QR SVD\"\nfor eigen_module in ${modules}; do\n    cp \"external_libs/eigen/Eigen/${eigen_module}\" \"${EIGEN_R_DIR}/${eigen_module}\"\n    if [ \"${eigen_module}\" != \"Dense\" ]; then\n        mkdir -p \"${EIGEN_R_DIR}/src/${eigen_module}/\"\n        cp -R \"external_libs/eigen/Eigen/src/${eigen_module}\"/* \"${EIGEN_R_DIR}/src/${eigen_module}/\"\n    fi\ndone\n\nmkdir -p \"${EIGEN_R_DIR}/src/misc\"\ncp -R external_libs/eigen/Eigen/src/misc/* \"${EIGEN_R_DIR}/src/misc/\"\n\nmkdir -p \"${EIGEN_R_DIR}/src/plugins\"\ncp -R external_libs/eigen/Eigen/src/plugins/* \"${EIGEN_R_DIR}/src/plugins/\"\n\ncd \"${TEMP_R_DIR}\"\n\n    # Remove files not needed for CRAN\n    echo \"Removing files not needed for CRAN\"\n    rm src/install.libs.R\n    rm -r inst/\n    rm -r pkgdown/\n    rm cran-comments.md\n    rm AUTOCONF_UBUNTU_VERSION\n    rm recreate-configure.sh\n\n    # files only used by the lightgbm CLI aren't needed for\n    # the R-package\n    rm src/application/application.cpp\n    rm src/include/LightGBM/application.h\n    rm src/main.cpp\n\n    # configure.ac and DESCRIPTION have placeholders for version\n    # and date so they don't have to be updated manually\n    sed -i.bak -e \"s/~~VERSION~~/${LGB_VERSION}/\" configure.ac\n    sed -i.bak -e \"s/~~VERSION~~/${LGB_VERSION}/\" DESCRIPTION\n    sed -i.bak -e \"s/~~DATE~~/${CURRENT_DATE}/\" DESCRIPTION\n\n    # Rtools35 (used with R 3.6 on Windows) doesn't support C++17\n    LGB_CXX_STD=\"C++17\"\n    using_windows_and_r3=$(\n        # shellcheck disable=SC2016\n        Rscript -e 'cat(.Platform$OS.type == \"windows\" && R.version[[\"major\"]] < 4)'\n    )\n    if test \"${using_windows_and_r3}\" = \"TRUE\"; then\n        LGB_CXX_STD=\"C++11\"\n    fi\n    sed -i.bak -e \"s/~~CXXSTD~~/${LGB_CXX_STD}/\" DESCRIPTION\n\n    # Remove 'region', 'endregion', and 'warning' pragmas.\n    # This won't change the correctness of the code. CRAN does\n    # not allow you to use compiler flag '-Wno-unknown-pragmas' or\n    # pragmas that suppress warnings.\n    echo \"Removing unknown pragmas in headers\"\n    find . \\( -name '*.h' -o -name '*.hpp' -o -name '*.cpp' \\) -exec \\\n      sed \\\n        -i.bak \\\n        -e 's/^.*#pragma clang diagnostic.*$//' \\\n        -e 's/^.*#pragma diag_suppress.*$//' \\\n        -e 's/^.*#pragma GCC diagnostic.*$//' \\\n        -e 's/^.*#pragma region.*$//' \\\n        -e 's/^.*#pragma endregion.*$//' \\\n        -e 's/^.*#pragma warning.*$//' \\\n        {} +\n\n    # 'processx' is listed as a 'Suggests' dependency in DESCRIPTION\n    # because it is used in install.libs.R, a file that is not\n    # included in the CRAN distribution of the package\n    sed \\\n        -i.bak \\\n        '/processx/d' \\\n        DESCRIPTION\n\n    echo \"Cleaning sed backup files\"\n    find . -name '*.bak' -exec rm {} \\;\n\ncd \"${ORIG_WD}\"\n\nif ${BUILD_VIGNETTES} ; then\n    \"${LGB_R_EXECUTABLE}\" CMD build \\\n        --keep-empty-dirs \\\n        lightgbm_r\n\n    echo \"removing object files created by vignettes\"\n    rm -rf ./_tmp\n    mkdir _tmp\n    TARBALL_NAME=\"lightgbm_${LGB_VERSION}.tar.gz\"\n    mv \"${TARBALL_NAME}\" _tmp/\n\n    echo \"untarring ${TARBALL_NAME}\"\n    cd _tmp\n        tar -xf \"${TARBALL_NAME}\" > /dev/null 2>&1\n        rm -f \"${TARBALL_NAME}\"\n        echo \"done untarring ${TARBALL_NAME}\"\n\n        # Object files are left behind from compiling the library to generate vignettes.\n        # Approaches like using tar --exclude=*.so to exclude them are not portable\n        # (for example, don't work with some versions of tar on Windows).\n        #\n        # Removing them manually here removes the need to use tar --exclude.\n        #\n        # For background, see https://github.com/microsoft/LightGBM/pull/3946#pullrequestreview-799415812.\n        rm -f ./lightgbm/src/*.o\n        rm -f ./lightgbm/src/boosting/*.o\n        rm -f ./lightgbm/src/io/*.o\n        rm -f ./lightgbm/src/metric/*.o\n        rm -f ./lightgbm/src/network/*.o\n        rm -f ./lightgbm/src/objective/*.o\n        rm -f ./lightgbm/src/treelearner/*.o\n        rm -f ./lightgbm/src/utils/*.o\n\n        echo \"re-tarring ${TARBALL_NAME}\"\n        # --no-xattrs is the default in GNU tar but not some distributions of BSD tar.\n        # Enable it here to avoid errors on macOS.\n        # ref: https://stackoverflow.com/a/74373784/3986677\n        tar \\\n            -cz \\\n            --no-xattrs \\\n            -f \"${TARBALL_NAME}\" \\\n            lightgbm \\\n        > /dev/null 2>&1\n        mv \"${TARBALL_NAME}\" ../\n    cd ..\n    echo \"Done creating ${TARBALL_NAME}\"\n\n    rm -rf ./_tmp\nelse\n    \"${LGB_R_EXECUTABLE}\" CMD build \\\n        --keep-empty-dirs \\\n        --no-build-vignettes \\\n        lightgbm_r\nfi\n\necho \"Done building R-package\"\n"
        },
        {
          "name": "build-python.sh",
          "type": "blob",
          "size": 12.328125,
          "content": "#!/bin/sh\n\n# [description]\n#\n#     Prepare a source distribution (sdist) or built distribution (wheel)\n#     of the Python-package, and optionally install it.\n#\n# [usage]\n#\n#     # build sdist and put it in dist/\n#     sh ./build-python.sh sdist\n#\n#     # build wheel and put it in dist/\n#     sh ./build-python.sh bdist_wheel [OPTIONS]\n#\n#     # compile lib_lightgbm and install the Python-package wrapping it\n#     sh ./build-python.sh install [OPTIONS]\n#\n#     # install the Python-package using a pre-compiled lib_lightgbm\n#     # (assumes lib_lightgbm.{dll,so} is located at the root of the repo)\n#     sh ./build-python.sh install --precompile\n#\n# [options]\n#\n#     --boost-dir=FILEPATH\n#                                   Directory with Boost package configuration file.\n#     --boost-include-dir=FILEPATH\n#                                   Directory containing Boost headers.\n#     --boost-librarydir=FILEPATH\n#                                   Preferred Boost library directory.\n#     --boost-root=FILEPATH\n#                                   Boost preferred installation prefix.\n#     --opencl-include-dir=FILEPATH\n#                                   OpenCL include directory.\n#     --opencl-library=FILEPATH\n#                                   Path to OpenCL library.\n#     --bit32\n#                                   Compile 32-bit version.\n#     --cuda\n#                                   Compile CUDA version.\n#     --gpu\n#                                   Compile GPU version.\n#     --integrated-opencl\n#                                   Compile integrated OpenCL version.\n#     --mingw\n#                                   Compile with MinGW.\n#     --mpi\n#                                   Compile MPI version.\n#     --no-isolation\n#                                   Assume all build and install dependencies are already installed,\n#                                   don't go to the internet to get them.\n#     --nomp\n#                                   Compile version without OpenMP support.\n#     --precompile\n#                                   Use precompiled library.\n#                                   Only used with 'install' command.\n#     --time-costs\n#                                   Output time costs for different internal routines.\n#     --user\n#                                   Install into user-specific instead of global site-packages directory.\n#                                   Only used with 'install' command.\n\nset -e -u\n\necho \"building lightgbm\"\n\n# Default values of arguments\nINSTALL=\"false\"\nBUILD_SDIST=\"false\"\nBUILD_WHEEL=\"false\"\n\nPIP_INSTALL_ARGS=\"\"\nBUILD_ARGS=\"\"\nPRECOMPILE=\"false\"\n\nwhile [ $# -gt 0 ]; do\n  case \"$1\" in\n    ############################\n    # sub-commands of setup.py #\n    ############################\n    install)\n      INSTALL=\"true\"\n      ;;\n    sdist)\n      BUILD_SDIST=\"true\"\n      ;;\n    bdist_wheel)\n      BUILD_WHEEL=\"true\"\n      ;;\n    ############################\n    # customized library paths #\n    ############################\n    --boost-dir|--boost-dir=*)\n        if echo \"$1\" | grep -q '^*=*$';\n            then shift;\n        fi\n        BOOST_DIR=\"${1#*=}\"\n        BUILD_ARGS=\"${BUILD_ARGS} --config-setting=cmake.define.Boost_DIR='${BOOST_DIR}'\"\n        ;;\n    --boost-include-dir|--boost-include-dir=*)\n        if echo \"$1\" | grep -q '^*=*$';\n            then shift;\n        fi\n        BOOST_INCLUDE_DIR=\"${1#*=}\"\n        BUILD_ARGS=\"${BUILD_ARGS} --config-setting=cmake.define.Boost_INCLUDE_DIR='${BOOST_INCLUDE_DIR}'\"\n        ;;\n    --boost-librarydir|--boost-librarydir=*)\n        if echo \"$1\" | grep -q '^*=*$';\n            then shift;\n        fi\n        BOOST_LIBRARY_DIR=\"${1#*=}\"\n        BUILD_ARGS=\"${BUILD_ARGS} --config-setting=cmake.define.BOOST_LIBRARYDIR='${BOOST_LIBRARY_DIR}'\"\n        ;;\n    --boost-root|--boost-root=*)\n        if echo \"$1\" | grep -q '^*=*$';\n            then shift;\n        fi\n        BOOST_ROOT=\"${1#*=}\"\n        BUILD_ARGS=\"${BUILD_ARGS} --config-setting=cmake.define.Boost_ROOT='${BOOST_ROOT}'\"\n        ;;\n    --opencl-include-dir|--opencl-include-dir=*)\n        if echo \"$1\" | grep -q '^*=*$';\n            then shift;\n        fi\n        OPENCL_INCLUDE_DIR=\"${1#*=}\"\n        BUILD_ARGS=\"${BUILD_ARGS} --config-setting=cmake.define.OpenCL_INCLUDE_DIR='${OPENCL_INCLUDE_DIR}'\"\n        ;;\n    --opencl-library|--opencl-library=*)\n        if echo \"$1\" | grep -q '^*=*$';\n            then shift;\n        fi\n        OPENCL_LIBRARY=\"${1#*=}\"\n        BUILD_ARGS=\"${BUILD_ARGS} --config-setting=cmake.define.OpenCL_LIBRARY='${OPENCL_LIBRARY}'\"\n        ;;\n    #########\n    # flags #\n    #########\n    --bit32)\n        export CMAKE_GENERATOR=\"Visual Studio 17 2022\"\n        export CMAKE_GENERATOR_PLATFORM=\"Win32\"\n        echo \"[INFO] Attempting to build 32-bit version of LightGBM, which is only supported on Windows with generator '${CMAKE_GENERATOR}'.\"\n        ;;\n    --cuda)\n        BUILD_ARGS=\"${BUILD_ARGS} --config-setting=cmake.define.USE_CUDA=ON\"\n        ;;\n    --gpu)\n        BUILD_ARGS=\"${BUILD_ARGS} --config-setting=cmake.define.USE_GPU=ON\"\n        ;;\n    --integrated-opencl)\n        BUILD_ARGS=\"${BUILD_ARGS} --config-setting=cmake.define.__INTEGRATE_OPENCL=ON\"\n        ;;\n    --mingw)\n        export CMAKE_GENERATOR='MinGW Makefiles'\n        # ref: https://stackoverflow.com/a/45104058/3986677\n        BUILD_ARGS=\"${BUILD_ARGS} --config-setting=cmake.define.CMAKE_SH=CMAKE_SH-NOTFOUND\"\n        ;;\n    --mpi)\n        BUILD_ARGS=\"${BUILD_ARGS} --config-setting=cmake.define.USE_MPI=ON\"\n        ;;\n    --no-isolation)\n        BUILD_ARGS=\"${BUILD_ARGS} --no-isolation\"\n        PIP_INSTALL_ARGS=\"${PIP_INSTALL_ARGS} --no-build-isolation\"\n        ;;\n    --nomp)\n        BUILD_ARGS=\"${BUILD_ARGS} --config-setting=cmake.define.USE_OPENMP=OFF\"\n        ;;\n    --precompile)\n        PRECOMPILE=\"true\"\n        ;;\n    --time-costs)\n        BUILD_ARGS=\"${BUILD_ARGS} --config-setting=cmake.define.USE_TIMETAG=ON\"\n        ;;\n    --user)\n        PIP_INSTALL_ARGS=\"${PIP_INSTALL_ARGS} --user\"\n        ;;\n    *)\n        echo \"invalid argument '${1}'\"\n        exit 1\n        ;;\n  esac\n  shift\ndone\n\npip install --prefer-binary 'build>=0.10.0'\n\n# create a new directory that just contains the files needed\n# to build the Python-package\ncreate_isolated_source_dir() {\n    rm -rf \\\n        ./lightgbm-python \\\n        ./lightgbm \\\n        ./python-package/build \\\n        ./python-package/build_cpp \\\n        ./python-package/compile \\\n        ./python-package/dist \\\n        ./python-package/lightgbm.egg-info\n\n    cp -R ./python-package ./lightgbm-python\n\n    cp LICENSE ./lightgbm-python/\n    cp VERSION.txt ./lightgbm-python/lightgbm/VERSION.txt\n\n    cp -R ./cmake ./lightgbm-python\n    cp CMakeLists.txt ./lightgbm-python\n    cp -R ./include ./lightgbm-python\n    cp -R ./src ./lightgbm-python\n    cp -R ./swig ./lightgbm-python\n\n    # include only specific files from external_libs, to keep the package\n    # small and avoid redistributing code with licenses incompatible with\n    # LightGBM's license\n\n    ######################\n    # fast_double_parser #\n    ######################\n    mkdir -p ./lightgbm-python/external_libs/fast_double_parser\n    cp \\\n        external_libs/fast_double_parser/CMakeLists.txt \\\n        ./lightgbm-python/external_libs/fast_double_parser/CMakeLists.txt\n    cp \\\n        external_libs/fast_double_parser/LICENSE* \\\n        ./lightgbm-python/external_libs/fast_double_parser/\n\n    mkdir -p ./lightgbm-python/external_libs/fast_double_parser/include/\n    cp \\\n        external_libs/fast_double_parser/include/fast_double_parser.h \\\n        ./lightgbm-python/external_libs/fast_double_parser/include/\n\n    #######\n    # fmt #\n    #######\n    mkdir -p ./lightgbm-python/external_libs/fmt\n    cp \\\n        external_libs/fast_double_parser/CMakeLists.txt \\\n        ./lightgbm-python/external_libs/fmt/CMakeLists.txt\n    cp \\\n        external_libs/fmt/LICENSE* \\\n        ./lightgbm-python/external_libs/fmt/\n\n    mkdir -p ./lightgbm-python/external_libs/fmt/include/fmt\n    cp \\\n        external_libs/fmt/include/fmt/*.h \\\n        ./lightgbm-python/external_libs/fmt/include/fmt/\n\n    #########\n    # Eigen #\n    #########\n    mkdir -p ./lightgbm-python/external_libs/eigen/Eigen\n    cp \\\n        external_libs/eigen/CMakeLists.txt \\\n        ./lightgbm-python/external_libs/eigen/CMakeLists.txt\n\n    modules=\"Cholesky Core Dense Eigenvalues Geometry Householder Jacobi LU QR SVD\"\n    for eigen_module in ${modules}; do\n        cp \\\n            \"external_libs/eigen/Eigen/${eigen_module}\" \\\n            \"./lightgbm-python/external_libs/eigen/Eigen/${eigen_module}\"\n        if [ \"${eigen_module}\" != \"Dense\" ]; then\n            mkdir -p \"./lightgbm-python/external_libs/eigen/Eigen/src/${eigen_module}/\"\n            cp \\\n                -R \\\n                \"external_libs/eigen/Eigen/src/${eigen_module}\"/* \\\n                \"./lightgbm-python/external_libs/eigen/Eigen/src/${eigen_module}/\"\n        fi\n    done\n\n    mkdir -p ./lightgbm-python/external_libs/eigen/Eigen/misc\n    cp \\\n        -R \\\n        external_libs/eigen/Eigen/src/misc \\\n        ./lightgbm-python/external_libs/eigen/Eigen/src/misc/\n\n    mkdir -p ./lightgbm-python/external_libs/eigen/Eigen/plugins\n    cp \\\n        -R \\\n        external_libs/eigen/Eigen/src/plugins \\\n        ./lightgbm-python/external_libs/eigen/Eigen/src/plugins/\n\n    ###################\n    # compute (Boost) #\n    ###################\n    mkdir -p ./lightgbm-python/external_libs/compute\n    cp \\\n        -R \\\n        external_libs/compute/include \\\n        ./lightgbm-python/external_libs/compute/include/\n}\n\ncreate_isolated_source_dir\n\ncd ./lightgbm-python\n\n# installation involves building the wheel + `pip install`-ing it\nif test \"${INSTALL}\" = true; then\n    if test \"${PRECOMPILE}\" = true; then\n        BUILD_SDIST=true\n        BUILD_WHEEL=false\n        BUILD_ARGS=\"\"\n        rm -rf \\\n            ./cmake \\\n            ./CMakeLists.txt \\\n            ./external_libs \\\n            ./include \\\n            ./src \\\n            ./swig\n        # use regular-old setuptools for these builds, to avoid\n        # trying to recompile the shared library\n        sed -i.bak -e '/start:build-system/,/end:build-system/d' pyproject.toml\n        # shellcheck disable=SC2129\n        echo '[build-system]' >> ./pyproject.toml\n        echo 'requires = [\"setuptools\"]' >> ./pyproject.toml\n        echo 'build-backend = \"setuptools.build_meta\"' >> ./pyproject.toml\n        echo \"\" >> ./pyproject.toml\n        echo \"recursive-include lightgbm *.dll *.dylib *.so\" > ./MANIFEST.in\n        echo \"\" >> ./MANIFEST.in\n        mkdir -p ./lightgbm/lib\n        if test -f ../lib_lightgbm.so; then\n            echo \"found pre-compiled lib_lightgbm.so\"\n            cp ../lib_lightgbm.so ./lightgbm/lib/lib_lightgbm.so\n        elif test -f ../lib_lightgbm.dylib; then\n            echo \"found pre-compiled lib_lightgbm.dylib\"\n            cp ../lib_lightgbm.dylib ./lightgbm/lib/lib_lightgbm.dylib\n        elif test -f ../Release/lib_lightgbm.dll; then\n            echo \"found pre-compiled Release/lib_lightgbm.dll\"\n            cp ../Release/lib_lightgbm.dll ./lightgbm/lib/lib_lightgbm.dll\n        elif test -f ../windows/x64/DLL/lib_lightgbm.dll; then\n            echo \"found pre-compiled windows/x64/DLL/lib_lightgbm.dll\"\n            cp ../windows/x64/DLL/lib_lightgbm.dll ./lightgbm/lib/lib_lightgbm.dll\n            cp ../windows/x64/DLL/lib_lightgbm.lib ./lightgbm/lib/lib_lightgbm.lib\n        fi\n        rm -f ./*.bak\n    else\n        BUILD_SDIST=\"false\"\n        BUILD_WHEEL=\"true\"\n    fi\nfi\n\nif test \"${BUILD_SDIST}\" = true; then\n    echo \"--- building sdist ---\"\n    rm -f ../dist/*.tar.gz\n    # shellcheck disable=SC2086\n    python -m build \\\n        --sdist \\\n        --outdir ../dist \\\n        ${BUILD_ARGS} \\\n        .\nfi\n\nif test \"${BUILD_WHEEL}\" = true; then\n    echo \"--- building wheel ---\"\n    rm -f ../dist/*.whl || true\n    # shellcheck disable=SC2086\n    python -m build \\\n        --wheel \\\n        --outdir ../dist \\\n        ${BUILD_ARGS} \\\n        .\nfi\n\nif test \"${INSTALL}\" = true; then\n    echo \"--- installing lightgbm ---\"\n    cd ../dist\n    if test \"${BUILD_WHEEL}\" = true; then\n        PACKAGE_NAME=\"$(echo lightgbm*.whl)\"\n    else\n        PACKAGE_NAME=\"$(echo lightgbm*.tar.gz)\"\n    fi\n    # ref for use of '--find-links': https://stackoverflow.com/a/52481267/3986677\n    # shellcheck disable=SC2086\n    pip install \\\n        ${PIP_INSTALL_ARGS} \\\n        --force-reinstall \\\n        --no-cache-dir \\\n        --no-deps \\\n        --find-links=. \\\n        \"${PACKAGE_NAME}\"\n    cd ../\nfi\n\necho \"cleaning up\"\nrm -rf ./lightgbm-python\n"
        },
        {
          "name": "build_r.R",
          "type": "blob",
          "size": 12.2421875,
          "content": "# For macOS users who have decided to use gcc\n# (replace 8 with version of gcc installed on your machine)\n# NOTE: your gcc / g++ from Homebrew is probably in /usr/local/bin\n#export CXX=/usr/local/bin/g++-8 CC=/usr/local/bin/gcc-8\n# Sys.setenv(\"CXX\" = \"/usr/local/bin/g++-8\")\n# Sys.setenv(\"CC\" = \"/usr/local/bin/gcc-8\")\n\nargs <- commandArgs(trailingOnly = TRUE)\nINSTALL_AFTER_BUILD <- !(\"--skip-install\" %in% args)\nTEMP_R_DIR <- file.path(getwd(), \"lightgbm_r\")\nTEMP_SOURCE_DIR <- file.path(TEMP_R_DIR, \"src\")\n\n# [description]\n#     Parse the content of commandArgs() into a structured\n#     list. This returns a list with two sections.\n#       * \"flags\" = a character of vector of flags like \"--use-gpu\"\n#       * \"keyword_args\" = a named character vector, where names\n#           refer to options and values are the option values. For\n#           example, c(\"--boost-librarydir\" = \"/usr/lib/x86_64-linux-gnu\")\n.parse_args <- function(args) {\n  out_list <- list(\n    \"flags\" = character(0L)\n    , \"keyword_args\" = character(0L)\n    , \"make_args\" = character(0L)\n  )\n  for (arg in args) {\n    if (any(grepl(\"^\\\\-j[0-9]+\", arg))) {  # nolint: non_portable_path\n        out_list[[\"make_args\"]] <- arg\n    } else if (any(grepl(\"=\", arg, fixed = TRUE))) {\n      split_arg <- strsplit(arg, \"=\", fixed = TRUE)[[1L]]\n      arg_name <- split_arg[[1L]]\n      arg_value <- split_arg[[2L]]\n      out_list[[\"keyword_args\"]][[arg_name]] <- arg_value\n    } else {\n      out_list[[\"flags\"]] <- c(out_list[[\"flags\"]], arg)\n    }\n  }\n  return(out_list)\n}\nparsed_args <- .parse_args(args)\n\nSKIP_VIGNETTES <- \"--no-build-vignettes\" %in% parsed_args[[\"flags\"]]\nUSING_GPU <- \"--use-gpu\" %in% parsed_args[[\"flags\"]]\nUSING_MINGW <- \"--use-mingw\" %in% parsed_args[[\"flags\"]]\nUSING_MSYS2 <- \"--use-msys2\" %in% parsed_args[[\"flags\"]]\n\n# this maps command-line arguments to defines passed into CMake,\nARGS_TO_DEFINES <- c(\n  \"--boost-root\" = \"-DBOOST_ROOT\"\n  , \"--boost-dir\" = \"-DBoost_DIR\"\n  , \"--boost-include-dir\" = \"-DBoost_INCLUDE_DIR\"\n  , \"--boost-librarydir\" = \"-DBOOST_LIBRARYDIR\"\n  , \"--opencl-include-dir\" = \"-DOpenCL_INCLUDE_DIR\"\n  , \"--opencl-library\" = \"-DOpenCL_LIBRARY\"\n)\n\nrecognized_args <- c(\n  \"--no-build-vignettes\"\n  , \"--skip-install\"\n  , \"--use-gpu\"\n  , \"--use-mingw\"\n  , \"--use-msys2\"\n  , names(ARGS_TO_DEFINES)\n)\ngiven_args <- c(\n  parsed_args[[\"flags\"]]\n  , names(parsed_args[[\"keyword_args\"]])\n)\nunrecognized_args <- setdiff(given_args, recognized_args)\nif (length(unrecognized_args) > 0L) {\n  msg <- paste0(\n    \"Unrecognized arguments: \"\n    , toString(unrecognized_args)\n  )\n  stop(msg)\n}\n\n# [description] Replace statements in install.libs.R code based on\n#               command-line flags\n.replace_flag <- function(variable_name, value, content) {\n  out <- gsub(\n    pattern = paste0(variable_name, \" <-.*\")\n    , replacement = paste0(variable_name, \" <- \", as.character(value))\n    , x = content\n  )\n  return(out)\n}\n\ninstall_libs_content <- readLines(\n  file.path(\"R-package\", \"src\", \"install.libs.R\")\n)\ninstall_libs_content <- .replace_flag(\"use_gpu\", USING_GPU, install_libs_content)\ninstall_libs_content <- .replace_flag(\"use_mingw\", USING_MINGW, install_libs_content)\ninstall_libs_content <- .replace_flag(\"use_msys2\", USING_MSYS2, install_libs_content)\n\n# set up extra flags based on keyword arguments\nkeyword_args <- parsed_args[[\"keyword_args\"]]\nif (length(keyword_args) > 0L) {\n  cmake_args_to_add <- NULL\n  for (i in seq_len(length(keyword_args))) {\n    arg_name <- names(keyword_args)[[i]]\n    define_name <- ARGS_TO_DEFINES[[arg_name]]\n    arg_value <- shQuote(normalizePath(keyword_args[[arg_name]], winslash = \"/\"))\n    cmake_args_to_add <- c(cmake_args_to_add, paste0(define_name, \"=\", arg_value))\n  }\n  install_libs_content <- gsub(\n    pattern = paste0(\"command_line_args <- NULL\")\n    , replacement = paste0(\n      \"command_line_args <- c(\\'\"\n      , paste(cmake_args_to_add, collapse = \"', '\")\n      , \"')\"\n    )\n    , x = install_libs_content\n    , fixed = TRUE\n  )\n}\n\n# if provided, set '-j' in 'make' commands in install.libs.R\nif (length(parsed_args[[\"make_args\"]]) > 0L) {\n  install_libs_content <- gsub(\n    pattern = \"make_args_from_build_script <- character(0L)\"\n    , replacement = paste0(\n      \"make_args_from_build_script <- c(\\\"\"\n      , paste0(parsed_args[[\"make_args\"]], collapse = \"\\\", \\\"\")\n      , \"\\\")\"\n    )\n    , x = install_libs_content\n    , fixed = TRUE\n  )\n}\n\n# R returns FALSE (not a non-zero exit code) if a file copy operation\n# breaks. Let's fix that\n.handle_result <- function(res) {\n  if (!all(res)) {\n    stop(\"Copying files failed!\")\n  }\n  return(invisible(NULL))\n}\n\n# system() will not raise an R exception if the process called\n# fails. Wrapping it here to get that behavior.\n#\n# system() introduces a lot of overhead, at least on Windows,\n# so trying processx if it is available\n.run_shell_command <- function(cmd, args, strict = TRUE) {\n    on_windows <- .Platform$OS.type == \"windows\"\n    has_processx <- suppressMessages({\n      suppressWarnings({\n        require(\"processx\")  # nolint: undesirable_function\n      })\n    })\n    if (has_processx && on_windows) {\n      result <- processx::run(\n        command = cmd\n        , args = args\n        , windows_verbatim_args = TRUE\n        , error_on_status = FALSE\n        , echo = TRUE\n      )\n      exit_code <- result$status\n    } else {\n      if (on_windows) {\n        message(paste0(\n          \"Using system() to run shell commands. Installing \"\n          , \"'processx' with install.packages('processx') might \"\n          , \"make this faster.\"\n        ))\n      }\n      cmd <- paste0(cmd, \" \", paste0(args, collapse = \" \"))\n      exit_code <- system(cmd)\n    }\n\n    if (exit_code != 0L && isTRUE(strict)) {\n        stop(paste0(\"Command failed with exit code: \", exit_code))\n    }\n    return(invisible(exit_code))\n}\n\n# Make a new temporary folder to work in\nunlink(x = TEMP_R_DIR, recursive = TRUE)\ndir.create(TEMP_R_DIR)\n\n# copy in the relevant files\nresult <- file.copy(\n  from = \"R-package/./\"\n  , to = sprintf(\"%s/\", TEMP_R_DIR)\n  , recursive = TRUE\n  , overwrite = TRUE\n)\n.handle_result(result)\n\n# overwrite src/install.libs.R with new content based on command-line flags\nwriteLines(\n  text = install_libs_content\n  , con = file.path(TEMP_SOURCE_DIR, \"install.libs.R\")\n)\n\n# Add blank Makevars files\nresult <- file.copy(\n  from = file.path(TEMP_R_DIR, \"inst\", \"Makevars\")\n  , to = file.path(TEMP_SOURCE_DIR, \"Makevars\")\n  , overwrite = TRUE\n)\n.handle_result(result)\nresult <- file.copy(\n  from = file.path(TEMP_R_DIR, \"inst\", \"Makevars.win\")\n  , to = file.path(TEMP_SOURCE_DIR, \"Makevars.win\")\n  , overwrite = TRUE\n)\n.handle_result(result)\n\nresult <- file.copy(\n  from = \"include/\"\n  , to =  sprintf(\"%s/\", TEMP_SOURCE_DIR)\n  , recursive = TRUE\n  , overwrite = TRUE\n)\n.handle_result(result)\n\nresult <- file.copy(\n  from = \"src/\"\n  , to = sprintf(\"%s/\", TEMP_SOURCE_DIR)\n  , recursive = TRUE\n  , overwrite = TRUE\n)\n.handle_result(result)\n\nEIGEN_R_DIR <- file.path(TEMP_SOURCE_DIR, \"include\", \"Eigen\")\ndir.create(EIGEN_R_DIR)\n\neigen_modules <- c(\n  \"Cholesky\"\n  , \"Core\"\n  , \"Dense\"\n  , \"Eigenvalues\"\n  , \"Geometry\"\n  , \"Householder\"\n  , \"Jacobi\"\n  , \"LU\"\n  , \"QR\"\n  , \"SVD\"\n)\nfor (eigen_module in eigen_modules) {\n  result <- file.copy(\n    from = file.path(\"external_libs\", \"eigen\", \"Eigen\", eigen_module)\n    , to = EIGEN_R_DIR\n    , recursive = FALSE\n    , overwrite = TRUE\n  )\n  .handle_result(result)\n}\n\ndir.create(file.path(EIGEN_R_DIR, \"src\"))\n\nfor (eigen_module in c(eigen_modules, \"misc\", \"plugins\")) {\n  if (eigen_module == \"Dense\") {\n    next\n  }\n  module_dir <- file.path(EIGEN_R_DIR, \"src\", eigen_module)\n  dir.create(module_dir, recursive = TRUE)\n  result <- file.copy(\n    from = sprintf(\"%s/\", file.path(\"external_libs\", \"eigen\", \"Eigen\", \"src\", eigen_module))\n    , to = sprintf(\"%s/\", file.path(EIGEN_R_DIR, \"src\"))\n    , recursive = TRUE\n    , overwrite = TRUE\n  )\n  .handle_result(result)\n}\n\n.replace_pragmas <- function(filepath) {\n  pragma_patterns <- c(\n    \"^.*#pragma clang diagnostic.*$\"\n    , \"^.*#pragma diag_suppress.*$\"\n    , \"^.*#pragma GCC diagnostic.*$\"\n    , \"^.*#pragma region.*$\"\n    , \"^.*#pragma endregion.*$\"\n    , \"^.*#pragma warning.*$\"\n  )\n  content <- readLines(filepath)\n  for (pragma_pattern in pragma_patterns) {\n    content <- content[!grepl(pragma_pattern, content)]\n  }\n  writeLines(content, filepath)\n}\n\n# remove pragmas that suppress warnings, to appease R CMD check\n.replace_pragmas(\n  file.path(EIGEN_R_DIR, \"src\", \"Core\", \"arch\", \"SSE\", \"Complex.h\")\n)\n.replace_pragmas(\n  file.path(EIGEN_R_DIR, \"src\", \"Core\", \"util\", \"DisableStupidWarnings.h\")\n)\n\nresult <- file.copy(\n  from = \"CMakeLists.txt\"\n  , to = file.path(TEMP_R_DIR, \"inst\", \"bin/\")\n  , overwrite = TRUE\n)\n.handle_result(result)\n\n# remove CRAN-specific files\nresult <- file.remove(\n  file.path(TEMP_R_DIR, \"cleanup\")\n  , file.path(TEMP_R_DIR, \"configure\")\n  , file.path(TEMP_R_DIR, \"configure.ac\")\n  , file.path(TEMP_R_DIR, \"configure.win\")\n  , file.path(TEMP_SOURCE_DIR, \"Makevars.in\")\n  , file.path(TEMP_SOURCE_DIR, \"Makevars.win.in\")\n)\n.handle_result(result)\n\n#------------#\n# submodules #\n#------------#\nEXTERNAL_LIBS_R_DIR <- file.path(TEMP_SOURCE_DIR, \"external_libs\")\ndir.create(EXTERNAL_LIBS_R_DIR)\nfor (submodule in list.dirs(\n  path = \"external_libs\"\n  , full.names = FALSE\n  , recursive = FALSE\n)) {\n  # compute/ is a submodule with boost, only needed if\n  # building the R-package with GPU support;\n  # eigen/ has a special treatment due to licensing aspects\n  if ((submodule == \"compute\" && !USING_GPU) || submodule == \"eigen\") {\n    next\n  }\n  result <- file.copy(\n    from = sprintf(\"%s/\", file.path(\"external_libs\", submodule))\n    , to = sprintf(\"%s/\", EXTERNAL_LIBS_R_DIR)\n    , recursive = TRUE\n    , overwrite = TRUE\n  )\n  .handle_result(result)\n}\n\n# copy files into the place CMake expects\nCMAKE_MODULES_R_DIR <- file.path(TEMP_SOURCE_DIR, \"cmake\", \"modules\")\ndir.create(CMAKE_MODULES_R_DIR, recursive = TRUE)\nresult <- file.copy(\n  from = file.path(\"cmake\", \"modules\", \"FindLibR.cmake\")\n  , to = sprintf(\"%s/\", CMAKE_MODULES_R_DIR)\n  , overwrite = TRUE\n)\n.handle_result(result)\nfor (src_file in c(\"lightgbm_R.cpp\", \"lightgbm_R.h\")) {\n  result <- file.copy(\n    from = file.path(TEMP_SOURCE_DIR, src_file)\n    , to = file.path(TEMP_SOURCE_DIR, \"src\", src_file)\n    , overwrite = TRUE\n  )\n  .handle_result(result)\n  result <- file.remove(\n    file.path(TEMP_SOURCE_DIR, src_file)\n  )\n  .handle_result(result)\n}\n\nresult <- file.copy(\n  from = file.path(\"R-package\", \"inst\", \"make-r-def.R\")\n  , to = file.path(TEMP_R_DIR, \"inst\", \"bin/\")\n  , overwrite = TRUE\n)\n.handle_result(result)\n\n# R packages cannot have versions like 3.0.0rc1, but\n# 3.0.0-1 is acceptable\nLGB_VERSION <- readLines(\"VERSION.txt\")[1L]\nLGB_VERSION <- gsub(\n  pattern = \"rc\"\n  , replacement = \"-\"\n  , x = LGB_VERSION\n  , fixed = TRUE\n)\n\n# DESCRIPTION has placeholders for version\n# and date so it doesn't have to be updated manually\nDESCRIPTION_FILE <- file.path(TEMP_R_DIR, \"DESCRIPTION\")\ndescription_contents <- readLines(DESCRIPTION_FILE)\ndescription_contents <- gsub(\n  pattern = \"~~VERSION~~\"\n  , replacement = LGB_VERSION\n  , x = description_contents\n  , fixed = TRUE\n)\ndescription_contents <- gsub(\n  pattern = \"~~DATE~~\"\n  , replacement = as.character(Sys.Date())\n  , x = description_contents\n  , fixed = TRUE\n)\ndescription_contents <- gsub(\n  pattern = \"~~CXXSTD~~\"\n  , replacement = \"C++11\"\n  , x = description_contents\n  , fixed = TRUE\n)\nwriteLines(description_contents, DESCRIPTION_FILE)\n\n# NOTE: --keep-empty-dirs is necessary to keep the deep paths expected\n#       by CMake while also meeting the CRAN req to create object files\n#       on demand\nr_build_args <- c(\"CMD\", \"build\", TEMP_R_DIR, \"--keep-empty-dirs\")\nif (isTRUE(SKIP_VIGNETTES)) {\n  r_build_args <- c(r_build_args, \"--no-build-vignettes\")\n}\n.run_shell_command(\"R\", r_build_args)\n\n# Install the package\nversion <- gsub(\n  pattern = \"Version: \",\n  replacement = \"\",\n  x = grep(\n    pattern = \"Version: \"\n    , x = readLines(con = file.path(TEMP_R_DIR, \"DESCRIPTION\"))\n    , value = TRUE\n    , fixed = TRUE\n  )\n  , fixed = TRUE\n)\ntarball <- file.path(getwd(), sprintf(\"lightgbm_%s.tar.gz\", version))\n\ninstall_cmd <- \"R\"\ninstall_args <- c(\"CMD\", \"INSTALL\", \"--no-multiarch\", \"--with-keep.source\", tarball)\nif (INSTALL_AFTER_BUILD) {\n  .run_shell_command(install_cmd, install_args)\n} else {\n  cmd <- paste0(install_cmd, \" \", paste0(install_args, collapse = \" \"))\n  print(sprintf(\"Skipping installation. Install the package with command '%s'\", cmd))\n}\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "external_libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "python-package",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "swig",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "windows",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}