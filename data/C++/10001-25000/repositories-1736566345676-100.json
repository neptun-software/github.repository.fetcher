{
  "metadata": {
    "timestamp": 1736566345676,
    "page": 100,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dolphin-emu/dolphin",
      "stars": 13232,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.40625,
          "content": "root = true\n\n[*]\ncharset = utf-8\nindent_size = 2\ntrim_trailing_whitespace = true\n\n[*.{c,cpp,h,java}]\nindent_style = space\ninsert_final_newline = true\nmax_line_length = 100\n\n[{CMakeLists.txt,*.cmake}]\nindent_style = tab\n\n[.editorconfig]\ninsert_final_newline = true\n\n[*.gradle]\nindent_size = 4\nindent_style = space\ninsert_final_newline = false\n\n[*.xml]\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 2.291015625,
          "content": "# This file can be used for git blame using --ignore-revs-file\n# or by setting blame.ignoreRevsFile in the git config.\n\n# Remove unnecessary Src/ folders\n34692ab826abc8f8faa61bdb2280b742424528f1\n\n# Reformat C++ code\n3570c7f03a2aa90aa634f96c0af1969af610f14d\n\n# Reformat Android code\n248ee12aed057acd0bdd310359c328e8d4fd5e5a\n\n# Enum and struct indentation cleanup\n40182a48a56b8e294e126c64f5f37910a40c67cd\nebb48d019eec1c29a37a406e2db16d7565367faa\n\n# SVN line-ending conversion\n30c883bcfc65761dc9fb61fea16a25fb61a7e220\n3b36e0657140a8f54729f55f94ad108547362ed5\n473cd01181be6c8160ce477f25ca6bd39f8cc083\n49cfded60bb5b444d1828190eacc52bbb49a9cb8\n4a0c8fc0c9b6666e7933683260e2befbc81917ff\n4b5b9ad05c10d95c9af43502ecc6877d6e680c4d\n4b68a543ba30ec18e79c93b742bc6f110ccd4561\n4f889ca1a3cb66ff78f11aa6864edf8ce51b8c93\n578c402d2ce5e6a7b6e42a4c7449d9aeac61e5e2\n5e81298ef0147bf36c4aaafa35accc2700777bd3\n7efbc879e544cba7f205b3eeaeff050f46fd9607\n7f4ebed1ddb7ca9aaa49172946fc1f7dc2dc3c75\n8151b21ec75107b73a5863177f29d6f69b7174fc\n8fca9a8e8d547653581ecb4aac12a09a4311eba3\n901fe7c00fec5e2aaf55d184edbcb6d092345d52\n90bac5731cc4b15f40be9cf3a51a2c88ca6b53bf\n9146b9b261c34f476c9f83934e6da6a463ad51c7\na41c1b2d0a9fab51f8a75ccdb7dba0890f766820\na524cecfabbd4e321485e0cbac9325efde2123ef\nab76cbf2fcf31b059edf10c220800150313ddf18\nbbb98d8e2e8259213cc231041eba922471555eb9\ne6fe5ec42f025a710918c1aaf8643da36a13bb3e\nfc1c7c31a08d55be4c756a1ed599d6afeedd9a11\n\n# Trailing whitespace\nc579637eafb9e9eb7f83711569254bd8da6d09d2\n664c8d30a055f4762a2a60be77c1c8eaec1a5d85\n84ae817c180556badd1a810fceff4c4168672541\n8da425b008b46ef90d649e55c6c0d4a0bc2b556b\n8f7c6286f4d4b3e1dccc7076012fe6e593e78c8b\n\n# Additional reformatting\n40bb9974f21878e64fb03d70e717cb996bf13a29\n\n# Tabs vs spaces\n0e3d8e2e9f1b3eab593b09be986c4ff12a0221e2\n16a74a9557779cd15890b0a3bb2924cb4b00ad6f\n1db10b139cb1f9b92b2e90eb86f236dcd30333b4\n1de39a4a6e6b5ef3ec55bd717d4ba02c02ff8d29\n2316cb6876e6d79584ce0cc50771d2fb8495fe45\n2d4c3c7c918877c844babaa5ac4c23f8a441fb64\n31f037b187525d72c10b83695f780ede1ad9db68\n3c6d0fc7106131098fe1a79d2deb0f39671c5252\n3fd87a7636ff434118a5d7f7334550be8db55c0b\n71ef0a02451393b32fc2304008f87d5b29b61444\n7ab0cca6455830a838b1b1e38e2c3f265e4e5d0b\nd800b5fb74c077522ef7a0752e49968df46e745e\nedd9d0e0ef6898a0528ac6389e93e9fca6132ff6\nee61bd6f2e4db8df8e92be6f92c02b808aa92234\nef85b9af45922c6ca364930d40f8aacf1a6dfe64\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01953125,
          "content": "*.sln text eol=crlf\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.88671875,
          "content": "# Ignore image thumbnail files created by windows\nThumbs.db\n# Ignore Finder view option files created by OS X\n.DS_Store\n# Ignore autogenerated source files\nExternals/mGBA/version.c\nSource/Core/Common/scmrev.h\n# Ignore files output by build\n/cmake-build-debug\n/cmake-build-release\n/[Bb]uild*/\n/[Bb]inary*/\n/obj/\n# Ignore files output by Android cmake build\n/Source/Android/app/.cxx/\n/libs/\n# Ignore various files created by visual studio/msbuild\n*.ipch\n*.opensdf\n*.sdf\n*.suo\n*.vcxproj.user\n*.obj\n*.tlog\n*.VC.opendb\n*.VC.db\n.vs*/\n/Source/enc_temp_folder/\n# Ignore build info file created by QtCreator\nCMakeLists.txt.user\n# Ignore files created by posix people\n*~\n# Ignore vim swapfiles\n*.swp\n# Ignore emacs temp files\n\\#*\\#\n.\\#*\n# Ignore kdevelop files/dirs\n*.kdev4\n# Ignore IDEA/Clion files/dirs\n.idea/\n# Ignore Visual Studio Code's working dir\n/.vscode/\n# Ignore flatpak-builder's cache dir\n.flatpak-builder\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 2.8564453125,
          "content": "[submodule \"Externals/Qt\"]\n\tpath = Externals/Qt\n\turl = https://github.com/dolphin-emu/ext-win-qt.git\n\tbranch = master\n\tshallow = true\n[submodule \"Externals/mGBA/mgba\"]\n\tpath = Externals/mGBA/mgba\n\turl = https://github.com/mgba-emu/mgba.git\n\tbranch = master\n\tshallow = true\n[submodule \"Externals/FFmpeg-bin\"]\n\tpath = Externals/FFmpeg-bin\n\turl = https://github.com/dolphin-emu/ext-win-ffmpeg.git\n\tbranch = master\n\tshallow = true\n[submodule \"libusb\"]\n\tpath = Externals/libusb/libusb\n\turl = https://github.com/libusb/libusb.git\n\tbranch = master\n\tshallow = true\n[submodule \"Externals/spirv_cross/SPIRV-Cross\"]\n\tpath = Externals/spirv_cross/SPIRV-Cross\n\turl = https://github.com/KhronosGroup/SPIRV-Cross.git\n\tbranch = main\n\tshallow = true\n[submodule \"SDL\"]\n\tpath = Externals/SDL/SDL\n\turl = https://github.com/libsdl-org/SDL.git\n\tbranch = SDL2\n\tshallow = true\n[submodule \"Externals/zlib-ng/zlib-ng\"]\n\tpath = Externals/zlib-ng/zlib-ng\n\turl = https://github.com/zlib-ng/zlib-ng.git\n\tshallow = true\n[submodule \"Externals/libspng/libspng\"]\n\tpath = Externals/libspng/libspng\n\turl = https://github.com/randy408/libspng.git\n\tbranch = v0.7.2\n\tshallow = true\n[submodule \"Externals/VulkanMemoryAllocator\"]\n\tpath = Externals/VulkanMemoryAllocator\n\turl = https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git\n[submodule \"Externals/cubeb/cubeb\"]\n\tpath = Externals/cubeb/cubeb\n\turl = https://github.com/mozilla/cubeb.git\n\tbranch = master\n\tshallow = true\n[submodule \"Externals/implot/implot\"]\n\tpath = Externals/implot/implot\n\turl = https://github.com/epezent/implot.git\n[submodule \"Externals/gtest\"]\n\tpath = Externals/gtest\n\turl = https://github.com/google/googletest.git\n[submodule \"Externals/rcheevos/rcheevos\"]\n\tpath = Externals/rcheevos/rcheevos\n\turl = https://github.com/RetroAchievements/rcheevos.git\n[submodule \"Externals/libadrenotools\"]\n\tpath = Externals/libadrenotools\n\turl = https://github.com/bylaws/libadrenotools.git\n[submodule \"Externals/curl/curl\"]\n\tpath = Externals/curl/curl\n\turl = https://github.com/curl/curl.git\n[submodule \"Externals/fmt/fmt\"]\n\tpath = Externals/fmt/fmt\n\turl = https://github.com/fmtlib/fmt.git\n[submodule \"Externals/lz4/lz4\"]\n\tpath = Externals/lz4/lz4\n\turl = https://github.com/lz4/lz4\n[submodule \"Externals/xxhash/xxHash\"]\n\tpath = Externals/xxhash/xxHash\n\turl = https://github.com/Cyan4973/xxHash.git\n[submodule \"Externals/enet/enet\"]\n\tpath = Externals/enet/enet\n\turl = https://github.com/lsalzman/enet.git\n[submodule \"hidapi-src\"]\n\tpath = Externals/hidapi/hidapi-src\n\turl = https://github.com/libusb/hidapi\n[submodule \"Externals/tinygltf/tinygltf\"]\n\tpath = Externals/tinygltf/tinygltf\n\turl = https://github.com/syoyo/tinygltf.git\n[submodule \"Externals/minizip-ng/minizip-ng\"]\n\tpath = Externals/minizip-ng/minizip-ng\n\turl = https://github.com/zlib-ng/minizip-ng\n[submodule \"Externals/Vulkan-Headers\"]\n\tpath = Externals/Vulkan-Headers\n\turl = https://github.com/KhronosGroup/Vulkan-Headers.git\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 2.7275390625,
          "content": "# This file exists to enable \"git shortlog -s\" to group by person.\nAndrew de los Reyes <adlr@gmail.com> <adlr@chromium.org>\nAugustin Cavalier <waddlesplash@gmail.com> <ajcsweb@gmail.com>\nBenjamin Przybocki <buddybenj@gmail.com>\nDolphin Bots <noreply@dolphin-emu.org> <dolphin-emu-bot@users.noreply.github.com>\nDolphin Bots <noreply@dolphin-emu.org> <contact+i18n@dolphin-emu.org>\nDolphin Bots <noreply@dolphin-emu.org> <buildbot@ubuntu.ubuntu.dolphin-emu.org>\nGrant Paul <git@grantpaul.com> <chpwn@chpwn.com>\nHenrik Rydg√•rd <hrydgard@gmail.com>\nJack Frost <bhaal@0x1337.org> <j4ck.fr0st@gmail.com>\nJames Dunne <james.jdunne@gmail.com>\nJohn Chadwick <johnwchadwick@gmail.com> <johnwchadwick>\nJohn Peterson <john.s.peterson@live.com>\nJohn Peterson <john.s.peterson@live.com> <jpeterson57@gmail.com>\nJordan Cristiano <jordan.cristi@gmail.com> <jordan.cristi AT [Google mail]>\nJordan Cristiano <jordan.cristi@gmail.com> <jordan.cristi [AT] gmail.com>\nJordan Woyak <jordan.woyak@gmail.com> <jordan@bill-laptop.lan>\nJordan Woyak <jordan.woyak@gmail.com> <Billiard26@gmail.com>\nJules Blok <jules.blok@gmail.com> Armada <jules.blok@gmail.com>\nLioncash <mathew1800@gmail.com>\nLioncash <mathew1800@gmail.com> Lioncash <nope>\nLioncash <mathew1800@gmail.com> <mathew1900@hotmail.com>\nMaarten ter Huurne <maarten@treewalker.org> <mth@lexx-9122.trinair2002>\nMarcos Vitali <marcosvitali@gmail.com>\nMarkus Wick <markus+github@selfnet.de> <wickmarkus@web.de>\nMatthew Parlane <parlane@gmail.com>\nMatthew Parlane <parlane@gmail.com> <matthew@phantuntu.(none)>\nOussama Danba <Shadoxfix@gmail.com>\nPascal Jouy <pascal.jouy@hotmail.fr>\nPierre <pierre@pirsoft.de>\nPierre Bourdon <delroth@gmail.com> <delroth@lse.epita.fr>\nRodolfo Bogado <rodolfoosvaldobogado@gmail.com>\nRog <rdragoon@optonline.net>\nRolandMunsil <roland@munsil.com> <RolandMunsil@users.noreply.github.com>\nRuno <i.am.runo@hotmail.com>\nRyan Houdek <sonicadvance1@gmail.com>\nRyan Houdek <sonicadvance1@gmail.com> <Sonicadvance1@gmail.com>\nRyan Houdek <sonicadvance1@gmail.com> <ryan.houdek@codethink.co.uk>\nRyan Houdek <sonicadvance1@gmail.com> <sonicadvance1@Ryan-Desktop.(none)>\nSacha <xsacha@gmail.com>\nSean Maas <seanmaas27@gmail.com>\nShawn Hoffman <godisgovernment@gmail.com>\nSteven V. <Stevoisiak@gmail.com>\nSteven V. <Stevoisiak@gmail.com> <S.Vascellaro@gmail.com>\nTony Wasserka <neobrainx@gmail.com> <NeoBrainX@googlemail.com>\nTony Wasserka <neobrainx@gmail.com> <NeoBrainX@gmail.com>\nTotalNerd <xtrafear@gmail.com>\nbooto <remornicus@gmail.com> <booto+dolphin@justanothercoder.com>\ni418c <starfield94@aol.com> <i418c@users.noreply.github.com>\nluisr142004 <luisr142004@gmail.com> <luisr142004@yahoo.com>\nmagumagu <magumagu9@gmail.com>\nmasken <masken3@gmail.com> <masken@emulation64.com>\nnitsuja <nitsuja-@hotmail.com>\nskidau <skidau@gmail.com>\n"
        },
        {
          "name": ".tx",
          "type": "tree",
          "content": null
        },
        {
          "name": "AndroidSetup.md",
          "type": "blob",
          "size": 1.5908203125,
          "content": "# How to Set Up an Android Development Environment\n\nIf you'd like to contribute to the Android project, but do not currently have a development environment setup, follow the instructions in this guide.\n\n## Prerequisites\n\n* [Android Studio](https://developer.android.com/studio/)\n\nIf you downloaded Android Studio, install it with the default options and open the project located in `dolphin/Source/Android`\n\n## Setting Up Android Studio\n\n1. Wait for background tasks to complete on the bottom of the window.\n2. Launch the Android SDK Manager by clicking on its icon in Android Studio's main toolbar:\n![Android Studio Package Icon][package-icon]\n3. Install or update the SDK Platform. Choose the API level as defined in the app module's [build.gradle](Source/Android/app/build.gradle#L7) file.\n4. Install a CMake version as defined in the app module's [build.gradle](Source/Android/app/build.gradle#L99) file. The option won't appear until you select `Show Package Details`.\n5. Select `Build Variants` on the left side of the window to choose the build variant and ABI you would like to compile for the `:app` module.\n6. Select the green hammer icon in the main toolbar to build and create the apk in `Source/Android/app/build/outputs/apk`\n\n## Compiling from the Command-Line\n\nFor command-line users, any task may be executed with `cd Source/Android` followed by `gradlew <task-name>`. In particular, `gradlew assemble` builds debug and release versions of the application (which are placed in `Source/Android/app/build/outputs/apk`).\n\n[package-icon]: https://i.imgur.com/hgmMlsM.png\n[code-style]: https://i.imgur.com/3b3UBhb.png\n"
        },
        {
          "name": "BuildMacOSUniversalBinary.py",
          "type": "blob",
          "size": 13.8203125,
          "content": "#!/usr/bin/env python3\n\"\"\"\nThe current tooling supported in CMake, Homebrew, and Qt5 are insufficient for\ncreating macOS universal binaries automatically for applications like Dolphin\nwhich have more complicated build requirements (like different libraries, build\nflags and source files for each target architecture).\n\nSo instead, this script manages the configuration and compilation of distinct\nbuilds and project files for each target architecture and then merges the two\nbinaries into a single universal binary.\n\nRunning this script will:\n1) Generate Xcode project files for the ARM build (if project files don't\n   already exist)\n2) Generate Xcode project files for the x64 build (if project files don't\n   already exist)\n3) Build the ARM project for the selected build_target\n4) Build the x64 project for the selected build_target\n5) Generate universal .app packages combining the ARM and x64 packages\n6) Use the lipo tool to combine the binary objects inside each of the\n   packages into universal binaries\n7) Code sign the final universal binaries using the specified\n   codesign_identity\n\"\"\"\n\nimport argparse\nimport filecmp\nimport glob\nimport json\nimport multiprocessing\nimport os\nimport shutil\nimport subprocess\n\n# The config variables listed below are the defaults, but they can be\n# overridden by command line arguments see parse_args(), or run:\n# BuildMacOSUniversalBinary.py --help\nDEFAULT_CONFIG = {\n\n    # Location of destination universal binary\n    \"dst_app\": \"universal/\",\n    # Build Target (dolphin-emu to just build the emulator and skip the tests)\n    \"build_target\": \"ALL_BUILD\",\n\n    # Location for CMake to search for files (default is for homebrew)\n    \"arm64_cmake_prefix\":  \"/opt/homebrew\",\n    \"x86_64_cmake_prefix\": \"/usr/local\",\n\n    # Locations to qt5 directories for arm and x64 libraries\n    # The default values of these paths are taken from the default\n    # paths used for homebrew\n    \"arm64_qt5_path\":  \"/opt/homebrew/opt/qt5\",\n    \"x86_64_qt5_path\": \"/usr/local/opt/qt5\",\n\n    # Identity to use for code signing. \"-\" indicates that the app will not\n    # be cryptographically signed/notarized but will instead just use a\n    # SHA checksum to verify the integrity of the app. This doesn't\n    # protect against malicious actors, but it does protect against\n    # running corrupted binaries and allows for access to the extended\n    # permisions needed for ARM builds\n    \"codesign_identity\":  \"-\",\n\n    # Minimum macOS version for each architecture slice\n    \"arm64_mac_os_deployment_target\":  \"11.0.0\",\n    \"x86_64_mac_os_deployment_target\": \"10.15.0\",\n\n    # CMake Generator to use for building\n    \"generator\": \"Unix Makefiles\",\n    \"build_type\": \"Release\",\n\n    \"run_unit_tests\": False,\n\n    # Whether our autoupdate functionality is enabled or not.\n    \"autoupdate\": True,\n\n    # The distributor for this build.\n    \"distributor\": \"None\"\n}\n\n# Architectures to build for. This is explicity left out of the command line\n# config options for several reasons:\n# 1) Adding new architectures will generally require more code changes\n# 2) Single architecture builds should utilize the normal generated cmake\n#    project files rather than this wrapper script\n\nARCHITECTURES = [\"x86_64\", \"arm64\"]\n\n\ndef parse_args(conf=DEFAULT_CONFIG):\n    \"\"\"\n    Parses the command line arguments into a config dictionary.\n    \"\"\"\n\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument(\n        \"--target\",\n        help=\"Build target in generated project files\",\n        default=conf[\"build_target\"],\n        dest=\"build_target\")\n    parser.add_argument(\n        \"-G\",\n        help=\"CMake Generator to use for creating project files\",\n        default=conf[\"generator\"],\n        dest=\"generator\")\n    parser.add_argument(\n        \"--build_type\",\n        help=\"CMake build type [Debug, Release, RelWithDebInfo, MinSizeRel]\",\n        default=conf[\"build_type\"],\n        dest=\"build_type\")\n    parser.add_argument(\n        \"--dst_app\",\n        help=\"Directory where universal binary will be stored\",\n        default=conf[\"dst_app\"])\n\n    parser.add_argument(\"--run_unit_tests\", action=\"store_true\",\n                        default=conf[\"run_unit_tests\"])\n\n    parser.add_argument(\n        \"--autoupdate\",\n        help=\"Enables our autoupdate functionality\",\n        action=argparse.BooleanOptionalAction,\n        default=conf[\"autoupdate\"])\n\n    parser.add_argument(\n        \"--distributor\",\n        help=\"Sets the distributor for this build\",\n        default=conf[\"distributor\"])\n\n    parser.add_argument(\n        \"--codesign\",\n        help=\"Code signing identity to use to sign the applications\",\n        default=conf[\"codesign_identity\"],\n        dest=\"codesign_identity\")\n\n    for arch in ARCHITECTURES:\n        parser.add_argument(\n             f\"--{arch}_cmake_prefix\",\n             help=\"Folder for cmake to search for packages\",\n             default=conf[arch+\"_cmake_prefix\"],\n             dest=arch+\"_cmake_prefix\")\n\n        parser.add_argument(\n             f\"--{arch}_qt5_path\",\n             help=f\"Install path for {arch} qt5 libraries\",\n             default=conf[arch+\"_qt5_path\"])\n\n        parser.add_argument(\n             f\"--{arch}_mac_os_deployment_target\",\n             help=f\"Deployment architecture for {arch} slice\",\n             default=conf[arch+\"_mac_os_deployment_target\"])\n\n    return vars(parser.parse_args())\n\n\ndef lipo(path0, path1, dst):\n    if subprocess.call([\"lipo\", \"-create\", \"-output\", dst, path0, path1]) != 0:\n        print(f\"WARNING: {path0} and {path1} cannot be lipo'd\")\n\n        shutil.copy(path0, dst)\n\n\ndef recursive_merge_binaries(src0, src1, dst):\n    \"\"\"\n    Merges two build trees together for different architectures into a single\n    universal binary.\n\n    The rules for merging are:\n\n    1) Files that exist in either src tree are copied into the dst tree\n    2) Files that exist in both trees and are identical are copied over\n       unmodified\n    3) Files that exist in both trees and are non-identical are lipo'd\n    4) Symlinks are created in the destination tree to mirror the hierarchy in\n       the source trees\n    \"\"\"\n\n    # Check that all files present in the folder are of the same type and that\n    # links link to the same relative location\n    for newpath0 in glob.glob(src0+\"/*\"):\n        filename = os.path.basename(newpath0)\n        newpath1 = os.path.join(src1, filename)\n        if not os.path.exists(newpath1):\n            continue\n\n        if os.path.islink(newpath0) and os.path.islink(newpath1):\n            if os.path.relpath(newpath0, src0) == os.path.relpath(newpath1, src1):\n                continue\n\n        if os.path.isdir(newpath0) and os.path.isdir(newpath1):\n            continue\n\n        # isfile() can be true for links so check that both are not links\n        # before checking if they are both files\n        if (not os.path.islink(newpath0)) and (not os.path.islink(newpath1)):\n            if os.path.isfile(newpath0) and os.path.isfile(newpath1):\n                continue\n\n        raise Exception(f\"{newpath0} and {newpath1} cannot be \" +\n                        \"merged into a universal binary because they are of \" +\n                        \"incompatible types. Perhaps the installed libraries\" +\n                        \" are from different versions for each architecture\")\n\n    for newpath0 in glob.glob(src0+\"/*\"):\n        filename = os.path.basename(newpath0)\n        newpath1 = os.path.join(src1, filename)\n        new_dst_path = os.path.join(dst, filename)\n        if os.path.islink(newpath0):\n            # Symlinks will be fixed after files are resolved\n            continue\n\n        if not os.path.exists(newpath1):\n            if os.path.isdir(newpath0):\n                shutil.copytree(newpath0, new_dst_path)\n            else:\n                shutil.copy(newpath0, new_dst_path)\n\n            continue\n\n        if os.path.isdir(newpath1):\n            os.mkdir(new_dst_path)\n            recursive_merge_binaries(newpath0, newpath1, new_dst_path)\n            continue\n\n        if filecmp.cmp(newpath0, newpath1):\n            shutil.copy(newpath0, new_dst_path)\n        else:\n            lipo(newpath0, newpath1, new_dst_path)\n\n    # Loop over files in src1 and copy missing things over to dst\n    for newpath1 in glob.glob(src1+\"/*\"):\n        filename = os.path.basename(newpath1)\n        newpath0 = os.path.join(src0, filename)\n        new_dst_path = os.path.join(dst, filename)\n        if (not os.path.exists(newpath0)) and (not os.path.islink(newpath1)):\n            if os.path.isdir(newpath1):\n                shutil.copytree(newpath1, new_dst_path)\n            else:\n                shutil.copy(newpath1, new_dst_path)\n\n    # Fix up symlinks for path0\n    for newpath0 in glob.glob(src0+\"/*\"):\n        filename = os.path.basename(newpath0)\n        new_dst_path = os.path.join(dst, filename)\n        if os.path.islink(newpath0):\n            relative_path = os.path.relpath(os.path.realpath(newpath0), src0)\n            os.symlink(relative_path, new_dst_path)\n    # Fix up symlinks for path1\n    for newpath1 in glob.glob(src1+\"/*\"):\n        filename = os.path.basename(newpath1)\n        new_dst_path = os.path.join(dst, filename)\n        newpath0 = os.path.join(src0, filename)\n        if os.path.islink(newpath1) and not os.path.exists(newpath0):\n            relative_path = os.path.relpath(os.path.realpath(newpath1), src1)\n            os.symlink(relative_path, new_dst_path)\n\ndef python_to_cmake_bool(boolean):\n    return \"ON\" if boolean else \"OFF\"\n\ndef build(config):\n    \"\"\"\n    Builds the project with the parameters specified in config.\n    \"\"\"\n\n    print(\"Building config:\")\n    print(json.dumps(config, indent=4))\n\n    # Configure and build single architecture builds for each architecture\n    for arch in ARCHITECTURES:\n        if not os.path.exists(arch):\n            os.mkdir(arch)\n\n        # Place Qt on the prefix path.\n        prefix_path = config[arch+\"_qt5_path\"]+';'+config[arch+\"_cmake_prefix\"]\n\n        env = os.environ.copy()\n        env[\"CMAKE_OSX_ARCHITECTURES\"] = arch\n        env[\"CMAKE_PREFIX_PATH\"] = prefix_path\n\n        # Add the other architecture's prefix path to the ignore path so that\n        # CMake doesn't try to pick up the wrong architecture's libraries when\n        # cross compiling.\n        ignore_path = \"\"\n        for a in ARCHITECTURES:\n            if a != arch:\n                ignore_path = config[a+\"_cmake_prefix\"]\n\n        subprocess.check_call([\n                \"cmake\", \"../../\", \"-G\", config[\"generator\"],\n                \"-DCMAKE_BUILD_TYPE=\" + config[\"build_type\"],\n                '-DCMAKE_CXX_FLAGS=\"-DMACOS_UNIVERSAL_BUILD=1\"',\n                '-DCMAKE_C_FLAGS=\"-DMACOS_UNIVERSAL_BUILD=1\"',\n                # System name needs to be specified for CMake to use\n                # the specified CMAKE_SYSTEM_PROCESSOR\n                \"-DCMAKE_SYSTEM_NAME=Darwin\",\n                \"-DCMAKE_PREFIX_PATH=\"+prefix_path,\n                \"-DCMAKE_SYSTEM_PROCESSOR=\"+arch,\n                \"-DCMAKE_IGNORE_PATH=\"+ignore_path,\n                \"-DCMAKE_OSX_DEPLOYMENT_TARGET=\"\n                + config[arch+\"_mac_os_deployment_target\"],\n                \"-DMACOS_CODE_SIGNING_IDENTITY=\"\n                + config[\"codesign_identity\"],\n                '-DMACOS_CODE_SIGNING=\"ON\"',\n                \"-DENABLE_AUTOUPDATE=\"\n                + python_to_cmake_bool(config[\"autoupdate\"]),\n                '-DDISTRIBUTOR=' + config['distributor'],\n                # Always use libraries from Externals to prevent any libraries\n                # installed by Homebrew from leaking in to the app\n                \"-DUSE_SYSTEM_LIBS=OFF\",\n                # However, we should still use the macOS provided versions of\n                # iconv, bzip2, and curl\n                \"-DUSE_SYSTEM_ICONV=ON\",\n                \"-DUSE_SYSTEM_BZIP2=ON\",\n                \"-DUSE_SYSTEM_CURL=ON\"\n            ],\n            env=env, cwd=arch)\n\n        threads = multiprocessing.cpu_count()\n        subprocess.check_call([\"cmake\", \"--build\", \".\",\n                               \"--config\", config[\"build_type\"],\n                               \"--parallel\", f\"{threads}\"], cwd=arch)\n\n    dst_app = config[\"dst_app\"]\n\n    if os.path.exists(dst_app):\n        shutil.rmtree(dst_app)\n\n    # Create and codesign the universal binary/\n    os.mkdir(dst_app)\n\n    # Source binary trees to merge together\n    src_app0 = ARCHITECTURES[0]+\"/Binaries/\"\n    src_app1 = ARCHITECTURES[1]+\"/Binaries/\"\n\n    recursive_merge_binaries(src_app0, src_app1, dst_app)\n    \n    if config[\"autoupdate\"]:\n        subprocess.check_call([\n            \"../Tools/mac-codesign.sh\",\n            \"-t\",\n            \"-e\", \"preserve\",\n            config[\"codesign_identity\"],\n            dst_app+\"/Dolphin.app/Contents/Helpers/Dolphin Updater.app\"])\n\n    subprocess.check_call([\n        \"../Tools/mac-codesign.sh\",\n        \"-t\",\n        \"-e\", \"preserve\",\n        config[\"codesign_identity\"],\n        dst_app+\"/Dolphin.app\"])\n\n    print(\"Built Universal Binary successfully!\")\n\n    # Build and run unit tests for each architecture\n    unit_test_results = {}\n    if config[\"run_unit_tests\"]:\n        for arch in ARCHITECTURES:\n            if not os.path.exists(arch):\n                os.mkdir(arch)\n\n            print(f\"Building and running unit tests for: {arch}\")\n            unit_test_results[arch] = \\\n                subprocess.call([\"cmake\", \"--build\", \".\",\n                                 \"--config\", config[\"build_type\"],\n                                 \"--target\", \"unittests\",\n                                 \"--parallel\", f\"{threads}\"], cwd=arch)\n\n        passed_unit_tests = True\n        for a in unit_test_results:\n            code = unit_test_results[a]\n            passed = code == 0\n\n            status_string = \"PASSED\"\n            if not passed:\n                passed_unit_tests = False\n                status_string = f\"FAILED ({code})\"\n\n            print(a + \" Unit Tests: \" + status_string)\n\n        if not passed_unit_tests:\n            exit(-1)\n\n        print(\"Passed all unit tests\")\n\n\nif __name__ == \"__main__\":\n    conf = parse_args()\n    build(conf)\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 31.7548828125,
          "content": "########################################\n# General setup\n#\ncmake_minimum_required(VERSION 3.13)\n\ncmake_policy(SET CMP0079 NEW) # let target_link_libraries() link to a target defined in a different directory\ncmake_policy(SET CMP0080 OLD) # allow using BundleUtilities at configure time\n\nif (POLICY CMP0099)\n  cmake_policy(SET CMP0099 NEW) # Propagate INTERFACE_LINK_OPTIONS from private dependencies, used by MacOS framework builds of SDL\nendif()\n\n# Weird chicken-and-egg problem: We can't check the compiler before the project() call, but we have to set the policies before it.\n# So we do this in two steps: Set the policies if they exist, then error out afterwards if we end up being MSVC and they don't exist.\nif (POLICY CMP0117)\n  cmake_policy(SET CMP0091 NEW) # MSVC runtime library flags are selected by an abstraction.\n  cmake_policy(SET CMP0092 NEW) # MSVC warning flags are not in CMAKE_{C,CXX}_FLAGS by default.\n  cmake_policy(SET CMP0117 NEW) # MSVC RTTI flag will not be added by default.\nendif()\n\nif (POLICY CMP0141)\n  cmake_policy(SET CMP0141 NEW) # MSVC debug information format flags are selected by an abstraction.\nendif()\n\n# Minimum OS X version.\n# This is inserted into the Info.plist as well.\nset(CMAKE_OSX_DEPLOYMENT_TARGET \"10.15.0\" CACHE STRING \"\")\n\nset(CMAKE_USER_MAKE_RULES_OVERRIDE \"${CMAKE_CURRENT_SOURCE_DIR}/CMake/FlagsOverride.cmake\")\n\nproject(dolphin-emu)\n\nif (MSVC)\n  if (POLICY CMP0117)\n    # cmake is a weird language. You can't do if(not POLICY)\n  else()\n    message(FATAL_ERROR \"Please update to CMake 3.20 or higher.\")\n  endif()\n\n  set(CMAKE_C_STANDARD 99)\n  set(CMAKE_CXX_STANDARD 23)\n  set(CMAKE_CXX_STANDARD_REQUIRED ON)\nendif()\n\nset(COMPILER ${CMAKE_CXX_COMPILER_ID})\nif (COMPILER STREQUAL \"GNU\")\n  set(COMPILER \"GCC\") # perfer printing GCC instead of GNU\nendif()\n\n# Enforce minimum compiler versions that support the c++20 features we use\nset (GCC_min_version 11)\nset (Clang_min_version 14)\nset (AppleClang_min_version 14.0.3)\nset (min_xcode_version \"14.0\") # corresponding xcode version for AppleClang_min_version\nset (MSVC_min_version 14.32)\nset (min_vs_version \"2022 17.2.3\") # corresponding Visual Studio version for MSVC_min_version\n\nmessage(STATUS \"Using ${COMPILER} ${CMAKE_CXX_COMPILER_VERSION}\")\n\nif (\"-\" STREQUAL \"${${COMPILER}_min_version}-\")\n  message(WARNING \"Unknown compiler ${COMPILER}, assuming it is new enough\")\nelse()\n  if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS  ${${COMPILER}_min_version})\n    message(FATAL_ERROR \"Requires GCC ${GCC_min_version}, Clang ${Clang_min_version},\"\n    \" AppleClang ${AppleClang_min_version} (Xcode ${min_xcode_version}),\"\n    \" or MSVC ${MSVC_min_version} (Visual Studio ${min_vs_version}) or higher\")\n  endif()\nendif()\n\n# Name of the Dolphin distributor. If you redistribute Dolphin builds (forks,\n# unofficial builds) please consider identifying your distribution with a\n# unique name here.\nset(DISTRIBUTOR \"None\" CACHE STRING \"Name of the distributor.\")\n\nset(DOLPHIN_DEFAULT_UPDATE_TRACK \"\" CACHE STRING \"Name of the default update track. If empty, disables auto-update.\")\n\nif(UNIX AND NOT APPLE AND NOT ANDROID)\n  option(ENABLE_X11 \"Enables X11 Support\" ON)\nendif()\nif(NOT WIN32 AND NOT APPLE AND NOT HAIKU)\n  option(ENABLE_EGL \"Enables EGL OpenGL Interface\" ON)\nendif()\n\nif(NOT ANDROID)\n  option(ENABLE_CLI_TOOL \"Enable dolphin-tool, a CLI-based utility for functions such as managing disc images\" ON)\nendif()\n\n\nset(USE_SYSTEM_LIBS \"AUTO\" CACHE STRING \"Use system libraries instead of bundled libraries.  ON - Always use system and fail if unavailable, OFF - Always use bundled, AUTO - Use system if available, otherwise use bundled.  Default is AUTO\")\nif(APPROVED_VENDORED_DEPENDENCIES)\n  message(WARNING \"APPROVED_VENDORED_DEPENDENCIES is deprecated.  Please migrate to setting USE_SYSTEM_LIBS to ON and setting USE_SYSTEM_<dependency> to either AUTO or OFF to allow bundled libs.\")\nendif()\noption(USE_UPNP \"Enables UPnP port mapping support\" ON)\noption(ENABLE_NOGUI \"Enable NoGUI frontend\" ON)\noption(ENABLE_QT \"Enable Qt (Default)\" ON)\noption(ENABLE_LTO \"Enables Link Time Optimization\" OFF)\noption(ENABLE_GENERIC \"Enables generic build that should run on any little-endian host\" OFF)\noption(ENABLE_HEADLESS \"Enables running Dolphin as a headless variant\" OFF)\noption(ENABLE_ALSA \"Enables ALSA sound backend\" ON)\noption(ENABLE_PULSEAUDIO \"Enables PulseAudio sound backend\" ON)\noption(ENABLE_LLVM \"Enables LLVM support, for disassembly\" ON)\noption(ENABLE_TESTS \"Enables building the unit tests\" ON)\noption(ENABLE_VULKAN \"Enables vulkan video backend\" ON)\noption(USE_DISCORD_PRESENCE \"Enables Discord Rich Presence, show the current game on Discord\" ON)\noption(USE_MGBA \"Enables GBA controllers emulation using libmgba\" ON)\noption(ENABLE_AUTOUPDATE \"Enables support for automatic updates\" ON)\noption(USE_RETRO_ACHIEVEMENTS \"Enables integration with retroachievements.org\" ON)\n\n# Maintainers: if you consider blanket disabling this for your users, please\n# consider the following points:\n#  * No data is being sent without explicit user approval (pop up box at first\n#    launch).\n#  * The Dolphin team relies on the data in order to understand the behavior\n#    of our software in the wild.\noption(ENABLE_ANALYTICS \"Enables opt-in Analytics collection\" ON)\n\noption(ENCODE_FRAMEDUMPS \"Encode framedumps in AVI format\" ON)\n\noption(ENABLE_GPROF \"Enable gprof profiling (must be using Debug build)\" OFF)\noption(FASTLOG \"Enable all logs\" OFF)\noption(OPROFILING \"Enable profiling\" OFF)\n\n# TODO: Add DSPSpy\noption(DSPTOOL \"Build dsptool\" OFF)\n\n# Enable SDL by default on operating systems that aren't Android.\nif(NOT ANDROID)\n  option(ENABLE_SDL \"Enables SDL as a generic controller backend\" ON)\nelse()\n  option(ENABLE_SDL \"Enables SDL as a generic controller backend\" OFF)\nendif()\n\nif(APPLE)\n  option(MACOS_USE_DEFAULT_SEARCH_PATH \"Don't prioritize system library paths\" OFF)\n  option(SKIP_POSTPROCESS_BUNDLE \"Skip postprocessing bundle for redistributability\" OFF)\n  # Enable adhoc code signing by default (otherwise makefile builds on ARM will not work)\n  option(MACOS_CODE_SIGNING \"Enable codesigning\" ON)\n  option(USE_BUNDLED_MOLTENVK \"Build MoltenVK from Externals with Dolphin-specific patches\" ON)\n  set(MACOS_CODE_SIGNING_IDENTITY \"-\" CACHE STRING \"The identity used for codesigning.\")\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n  option(ENABLE_VTUNE \"Enable Intel VTune integration for JIT code.\" OFF)\n\n  if(NOT ANDROID)\n    option(ENABLE_EVDEV \"Enables the evdev controller backend\" ON)\n  endif()\nendif()\n\nif(UNIX)\n  # Builds a relocatable binary on Linux.\n  # The Sys folder will need to be copied to the Binaries folder.\n  option(LINUX_LOCAL_DEV \"Enable relocatable binary\" OFF)\nendif()\n\nlist(APPEND CMAKE_MODULE_PATH\n  ${CMAKE_CURRENT_SOURCE_DIR}/CMake\n)\n\n# Support functions\ninclude(CheckAndAddFlag)\ninclude(CheckCCompilerFlag)\ninclude(DolphinCompileDefinitions)\ninclude(DolphinDisableWarningsMSVC)\ninclude(DolphinLibraryTools)\ninclude(GNUInstallDirs)\ninclude(RemoveCompileFlag)\n\n# Enable folders for IDE\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n# Set up paths\nset(datadir ${CMAKE_INSTALL_FULL_DATADIR}/dolphin-emu CACHE PATH \"datadir\")\nadd_definitions(-DDATA_DIR=\"${datadir}/\")\n\nif(CMAKE_SYSROOT)\n  # If we should use a sysroot, tell pkg-config to search for packages in there, not on the host\n  set(ENV{PKG_CONFIG_LIBDIR} \"${CMAKE_SYSROOT}/usr/lib/pkgconfig:${CMAKE_SYSROOT}/usr/share/pkgconfig\")\n  set(ENV{PKG_CONFIG_SYSROOT_DIR} \"${CMAKE_SYSROOT}\")\nendif()\n\n# Set where the binary files will be built.  The program will not execute from\n# here.  You must run \"make install\" to install these to the proper location\n# as defined above.\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/Binaries)\n\nif (WIN32)\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/Binary)\n\n  if (CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64|amd64|AMD64\")\n    string(APPEND CMAKE_RUNTIME_OUTPUT_DIRECTORY /x64)\n  elseif (CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\")\n    string(APPEND CMAKE_RUNTIME_OUTPUT_DIRECTORY /ARM64)\n  endif()\nendif()\n\n# setup CCache\ninclude(CCache)\n\n# Architecture detection and arch specific settings\nmessage(STATUS \"Detected architecture: ${CMAKE_SYSTEM_PROCESSOR}\")\n\n# Detect 64bit or 32bit\n# CMake doesn't provide a simple way to determine 32bit or 64bit\n# If we ever support a architecture that is 64bit with 32bit pointers then this'll break\n# Of course the chances of that are slim(x32?) so who cares\nif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n  set(_ARCH_64 1)\n  add_definitions(-D_ARCH_64=1)\nelse()\n  set(_ARCH_32 1)\n  add_definitions(-D_ARCH_32=1)\nendif()\n\nif(ENABLE_GENERIC)\n  message(STATUS \"Warning! Building generic build!\")\n  set(_M_GENERIC 1)\n  add_definitions(-D_M_GENERIC=1)\nelseif(_ARCH_64 AND CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64|amd64|AMD64\")\n  set(_M_X86_64 1)\n  add_definitions(-D_M_X86_64=1)\n  check_and_add_flag(HAVE_SSE2 -msse2)\nelseif(_ARCH_64 AND CMAKE_SYSTEM_PROCESSOR MATCHES \"aarch64|arm64\")\n  set(_M_ARM_64 1)\n  add_definitions(-D_M_ARM_64=1)\n  # CRC instruction set is used in the CRC32 hash function\n  check_and_add_flag(HAVE_ARCH_ARMV8 -march=armv8-a+crc)\nelse()\n  message(FATAL_ERROR \"You're building on an unsupported platform: \"\n      \"'${CMAKE_SYSTEM_PROCESSOR}' with ${CMAKE_SIZEOF_VOID_P}-byte pointers.\"\n      \" Enable generic build if you really want a JIT-less binary.\")\nendif()\n\nif(CMAKE_GENERATOR MATCHES \"Ninja\")\n  check_and_add_flag(DIAGNOSTICS_COLOR -fdiagnostics-color)\nelseif(CMAKE_GENERATOR MATCHES \"Visual Studio\")\n  # Only MSBuild needs this, other generators will compile one file at a time\n  add_compile_options(\"/MP\")\nendif()\n\nif(MSVC)\n  check_and_add_flag(EXCEPTIONS /EHsc)\n  dolphin_compile_definitions(_DEBUG DEBUG_ONLY)\n\n  # Disable RTTI\n  add_compile_options(/GR-)\n\n  # Set warning level 4 (the highest)\n  add_compile_options(/W4)\n\n  # Treat all warnings as errors\n  add_compile_options(/WX)\n\n  # Disable some warnings\n  add_compile_options(\n    /wd4201 # nonstandard extension used : nameless struct/union\n    /wd4127 # conditional expression is constant\n    /wd4100 # 'identifier' : unreferenced formal parameter\n    /wd4200 # InputCommon fix temp.\n    /wd4244 # 'conversion' conversion from 'type1' to 'type2', possible loss of data\n    /wd4121 # 'symbol' : alignment of a member was sensitive to packing\n    /wd4324 # Padding was added at the end of a structure because you specified a __declspec(align) value.\n    /wd4714 # function 'function' marked as __forceinline not inlined\n    /wd4351 # new behavior: elements of array 'array' will be default initialized\n    # TODO: Enable this warning once possible\n    /wd4245 # conversion from 'type1' to 'type2', signed/unsigned mismatch\n    # Currently jits use some annoying code patterns which makes this common\n  )\n\n  # Additional warnings\n  add_compile_options(\n    /w44263 # Non-virtual member function hides base class virtual function\n    /w44265 # Class has virtual functions, but destructor is not virtual\n    /w44946 # Reinterpret cast between related types\n  )\n\n  # All files are encoded as UTF-8\n  add_compile_options(/utf-8)\n\n  # Ignore warnings in external headers\n  add_compile_options(/external:anglebrackets)\n  add_compile_options(/external:W0)\n  add_compile_options(/external:templates-)\n\n  # Request deterministic builds\n  add_compile_options(/experimental:deterministic)\n  add_link_options(/experimental:deterministic)\n\n  # Enable function-level linking\n  add_compile_options(/Gy)\n  # Generate intrinsic functions\n  add_compile_options(/Oi)\n  # Enable buffer security check on Debug, disable otherwise\n  add_compile_options($<IF:$<CONFIG:Debug>,/GS,/GS->)\n  # Remove unreferenced inline functions/data to reduce link time and catch bugs\n  # Note: In msbuild build, this gets set by msbuild by default\n  add_compile_options(/Zc:inline)\n  # Fix various other non-conformant behaviors\n  add_compile_options(/Zc:__cplusplus,enumTypes,externConstexpr,preprocessor,templateScope,throwingNew)\n  # Enforce strict volatile semantics as per ISO C++\n  add_compile_options(/volatile:iso)\n\n  # Use 'precise' floating point model\n  add_compile_options(/fp:precise)\n\n  string(APPEND CMAKE_EXE_LINKER_FLAGS \" /NXCOMPAT\")\n  # Generate debug data\n  string(APPEND CMAKE_EXE_LINKER_FLAGS \" /DEBUG\")\n  # Eliminate dead code and data\n  string(APPEND CMAKE_EXE_LINKER_FLAGS \" /OPT:REF /OPT:ICF\")\nelse()\n  add_definitions(-D_DEFAULT_SOURCE)\n\n  # gcc uses some optimizations which might break stuff without this flag\n  check_and_add_flag(NO_STRICT_ALIASING -fno-strict-aliasing)\n  check_and_add_flag(NO_EXCEPTIONS -fno-exceptions)\n\n  check_and_add_flag(VISIBILITY_INLINES_HIDDEN -fvisibility-inlines-hidden)\n  check_and_add_flag(VISIBILITY_HIDDEN -fvisibility=hidden)\n\n  check_and_add_flag(FOMIT_FRAME_POINTER -fomit-frame-pointer NO_DEBINFO_ONLY)\n\n  dolphin_compile_definitions(_DEBUG DEBUG_ONLY)\n  check_and_add_flag(GGDB -ggdb DEBUG_ONLY)\n\n  if(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    # GNU ar: Create thin archive files.\n    # Requires binutils-2.19 or later.\n    set(CMAKE_C_ARCHIVE_CREATE   \"<CMAKE_AR> qcTP <TARGET> <LINK_FLAGS> <OBJECTS>\")\n    set(CMAKE_C_ARCHIVE_APPEND   \"<CMAKE_AR> qTP  <TARGET> <LINK_FLAGS> <OBJECTS>\")\n    set(CMAKE_CXX_ARCHIVE_CREATE \"<CMAKE_AR> qcTP <TARGET> <LINK_FLAGS> <OBJECTS>\")\n    set(CMAKE_CXX_ARCHIVE_APPEND \"<CMAKE_AR> qTP  <TARGET> <LINK_FLAGS> <OBJECTS>\")\n  endif()\nendif()\n\nif(CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\n  if(NOT MACOS_USE_DEFAULT_SEARCH_PATH)\n    # Hack up the path to prioritize the path to built-in OS libraries to\n    # increase the chance of not depending on a bunch of copies of them\n    # installed by MacPorts, Fink, Homebrew, etc, and ending up copying\n    # them into the bundle.  Since we optionally depend on libraries which\n    # are not part of OS X (ffmpeg, etc.), however, don't remove the default\n    # path entirely as was done in a previous version of this file.  This is\n    # still kinda evil, since it defeats the user's path settings...\n    # See http://www.cmake.org/cmake/help/v3.0/command/find_program.html\n    list(APPEND CMAKE_PREFIX_PATH \"/usr\")\n  endif()\n\n  # Prevents Xcode from overriding the -fno-strict-aliasing flag\n  set(CMAKE_XCODE_ATTRIBUTE_GCC_STRICT_ALIASING NO)\n\n  # Specify target CPUs.\n  if(_ARCH_64 AND CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64|amd64|AMD64\")\n    check_and_add_flag(HAVE_MSSSE3 -mssse3)\n    check_and_add_flag(HAVE_ARCH_CORE2 -march=core2)\n  endif()\n  # Linker flags.\n  # Drop unreachable code and data.\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-dead_strip,-dead_strip_dylibs\")\n\n  # Set FMT_EXCEPTIONS = 0, for consistency with -fno-exceptions earlier.\n  # If we set only -fno-exceptions, fmt fails to compile when included from\n  # Objective-C++ because fmt tries try to use throw because __EXCEPTIONS is defined.\n  add_definitions(-DFMT_EXCEPTIONS=0)\n\n  find_library(APPKIT_LIBRARY AppKit)\n  find_library(APPSERV_LIBRARY ApplicationServices)\n  find_library(CARBON_LIBRARY Carbon)\n  find_library(COCOA_LIBRARY Cocoa)\n  find_library(COREFOUNDATION_LIBRARY CoreFoundation)\n  find_library(CORESERV_LIBRARY CoreServices)\n  find_library(FORCEFEEDBACK_LIBRARY ForceFeedback)\n  find_library(FOUNDATION_LIBRARY Foundation)\n  find_library(IOB_LIBRARY IOBluetooth)\n  find_library(IOK_LIBRARY IOKit)\n  find_library(OPENGL_LIBRARY OpenGL)\nendif()\n\nif(ENABLE_LTO)\n  if(CMAKE_C_COMPILER_ID MATCHES \"MSVC\")\n    add_compile_options(/GL)\n    string(APPEND CMAKE_EXE_LINKER_FLAGS \" /LTCG\")\n  else()\n    check_and_add_flag(LTO -flto)\n    if(CMAKE_CXX_COMPILER_ID STREQUAL GNU)\n      set(CMAKE_AR gcc-ar)\n      set(CMAKE_RANLIB gcc-ranlib)\n    endif()\n  endif()\nendif()\n\nif(UNIX)\n  if(LINUX_LOCAL_DEV)\n    add_definitions(-DLINUX_LOCAL_DEV)\n  endif()\nendif()\n\n# BSDs put packages in /usr/local instead of /usr, so we need to\n# force CMake to look in those directories by default, too.\n# All commands and submodule commands also need to see these\n# changes, so just setting them in the project scope via\n# include_directories and link_directories is not sufficient\nif(CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")\n  set(CMAKE_PREFIX_PATH \"${CMAKE_PREFIX_PATH};/usr/local\")\n  set(CMAKE_REQUIRED_INCLUDES \"/usr/local/include\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -L/usr/local/lib\")\n\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 14.0)\n    # Workaround: the llvm libc++ and versions of clang eariler than 14 have a bug with consteval\n    # so we define FMT_CONSTEVAL to blank to just disable consteval in fmt\n    add_definitions(-DFMT_CONSTEVAL=)\n  endif()\nendif()\n\n# Dolphin requires threads.\nfind_package(Threads)\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING\n      \"Build type (Release/Debug/RelWithDebInfo/MinSizeRel)\" FORCE)\nendif()\n\nif(ENABLE_GPROF)\n  check_and_add_flag(HAVE_PG -pg)\n  if(NOT FLAG_C_HAVE_PG)\n    message(FATAL_ERROR \"Compiler option -pg is not supported\")\n  endif()\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -pg\")\nendif()\n\nif(FASTLOG)\n  add_definitions(-DDEBUGFAST)\nendif()\n\nif(ENABLE_VTUNE)\n  set(VTUNE_DIR \"/opt/intel/vtune_amplifier\")\n  add_definitions(-DUSE_VTUNE)\n  include_directories(\"${VTUNE_DIR}/include\")\n  set(VTUNE_LIBRARIES\n      \"${VTUNE_DIR}/lib64/libjitprofiling.a\"\n      \"${VTUNE_DIR}/lib64/libittnotify.a\"\n  )\nendif()\n\nif(ANDROID)\n  message(STATUS \"Building for Android\")\n  if(NOT ENABLE_HEADLESS)\n    add_definitions(-DANDROID)\n    if(ENABLE_NOGUI)\n      message(STATUS \"Building Android app, disabling NoGUI frontend.\")\n      set(ENABLE_NOGUI 0)\n    endif()\n  else()\n    # Lie to cmake a bit. We are cross compiling to Android\n    # but not as a shared library. We want an executable.\n    set(ANDROID 0)\n  endif()\n  set(USE_UPNP 0)\n  set(ENABLE_QT 0)\n  set(USE_DISCORD_PRESENCE 0)\n\n  # We are cross compiling, search only the toolchain for libraries and includes\n  SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n  SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  SET(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\nendif()\n\nif(ENABLE_HEADLESS)\n  message(STATUS \"Enabling Headless! Disabling GUI.\")\n  set(ENABLE_QT 0)\n  set(USE_DISCORD_PRESENCE 0)\nendif()\n\n# Set file offset size to 64 bits. On modern Unixes, this is typically already the case. Exceptions:\n#\n# glibc may default to 32 bits. This can be configured by setting _FILE_OFFSET_BITS=64.\n#\n# bionic (Android) defaults to 32 bits for 32-bit ABIs. Here too we can use _FILE_OFFSET_BITS=64,\n# but only on API 25 and up. Since we're currently supporting older API levels and 32-bit Android\n# isn't a build configuration we officially support, let's leave this as it is for now.\n# More details: https://android.googlesource.com/platform/bionic/+/master/docs/32-bit-abi.md\nif(NOT ANDROID AND NOT CMAKE_SYSTEM_NAME MATCHES \"Windows\")\n  add_definitions(-D_FILE_OFFSET_BITS=64)\n  add_definitions(-D_LARGEFILE_SOURCE)\nendif()\n\n########################################\n# Dependency checking\n#\n# TODO: We should have options for dependencies included in the externals to\n# override autodetection of system libraries and force the usage of the\n# externals.\ninclude(CheckLib)\ninclude(CheckCXXSourceRuns)\n\nset(OpenGL_GL_PREFERENCE GLVND CACHE STRING \"Linux-only: if GLVND, use the vendor-neutral GL libraries (default). If LEGACY, use the legacy ones (might be necessary to have optirun/primusrun work)\")\nset_property(CACHE OpenGL_GL_PREFERENCE PROPERTY STRINGS GLVND LEGACY)\nfind_package(OpenGL)\nif (OPENGL_GL)\n  include_directories(${OPENGL_INCLUDE_DIR})\nendif()\n\nif(ENABLE_X11)\n  pkg_check_modules(X11 x11 IMPORTED_TARGET)\n  if(X11_FOUND)\n    add_definitions(-DHAVE_X11=1)\n    pkg_check_modules(XRANDR xrandr IMPORTED_TARGET)\n    if(XRANDR_FOUND)\n      add_definitions(-DHAVE_XRANDR=1)\n    endif()\n    pkg_check_modules(X11_INPUT REQUIRED xi>=1.5.0 IMPORTED_TARGET)\n    message(STATUS \"X11 support enabled\")\n  else()\n    message(WARNING \"X11 support enabled but not found. This build will not support X11.\")\n  endif()\nendif()\n\nif(ENABLE_EGL)\n  find_package(EGL)\n  if(EGL_FOUND)\n    add_definitions(-DHAVE_EGL=1)\n    message(STATUS \"EGL OpenGL interface enabled\")\n  else()\n    message(WARNING \"EGL support enabled but not found. This build will not support EGL.\")\n  endif()\nendif()\n\nif(ENCODE_FRAMEDUMPS)\n  if(WIN32)\n    if(_M_X86_64)\n      set(FFMPEG_DIR Externals/FFmpeg-bin/x64)\n    elseif(_M_ARM_64)\n      set(FFMPEG_DIR Externals/FFmpeg-bin/ARM64)\n    endif()\n  endif()\n  find_package(FFmpeg COMPONENTS avcodec avformat avutil swresample swscale)\n  if(FFmpeg_FOUND)\n    if(APPLE)\n      find_library(COREMEDIA_LIBRARY CoreMedia)\n      find_library(VIDEOTOOLBOX_LIBRARY VideoToolbox)\n      find_library(COREVIDEO_LIBRARY CoreVideo)\n      find_library(AUDIOTOOLBOX_LIBRARY AudioToolbox)\n    endif()\n    message(STATUS \"libav/ffmpeg found, enabling AVI frame dumps\")\n    add_definitions(-DHAVE_FFMPEG)\n    if(WIN32)\n      # Our prebuilt binaries depend on Bcrypt\n      set_property(TARGET FFmpeg::avutil APPEND PROPERTY\n        INTERFACE_LINK_LIBRARIES \"Bcrypt.lib\"\n      )\n    endif()\n  else()\n    message(STATUS \"libav/ffmpeg not found, disabling AVI frame dumps\")\n  endif()\nendif()\n\nif(OPROFILING)\n  find_package(OProfile)\n  if(OPROFILE_FOUND)\n    message(STATUS \"OProfile found, enabling profiling support\")\n    add_definitions(-DUSE_OPROFILE=1)\n  else()\n    message(FATAL_ERROR \"OProfile not found. Can't build profiling support.\")\n  endif()\nendif()\n\nif(ENABLE_EVDEV)\n  find_package(LIBUDEV REQUIRED)\n  find_package(LIBEVDEV REQUIRED)\n  if(LIBUDEV_FOUND AND LIBEVDEV_FOUND)\n    message(STATUS \"libevdev/libudev found, enabling evdev controller backend\")\n    add_definitions(-DHAVE_LIBUDEV=1)\n    add_definitions(-DHAVE_LIBEVDEV=1)\n  else()\n    message(FATAL_ERROR \"Couldn't find libevdev and/or libudev. Can't build evdev controller backend.\\nDisable ENABLE_EVDEV if you wish to build without controller support\")\n  endif()\nendif()\n\nif(UNIX)\n  message(STATUS \"Using named pipes as controller inputs\")\n  add_definitions(-DUSE_PIPES=1)\n  message(STATUS \"Watching game memory for changes\")\n  add_definitions(-DUSE_MEMORYWATCHER=1)\nendif()\n\nif(ENABLE_SDL)\n  dolphin_find_optional_system_library(SDL2 Externals/SDL 2.30.9)\nendif()\n\nif(ENABLE_ANALYTICS)\n  message(STATUS \"Enabling analytics collection (subject to end-user opt-in)\")\n  add_definitions(-DUSE_ANALYTICS=1)\nendif()\n\nif(ENABLE_AUTOUPDATE)\n  message(STATUS \"Enabling automatic update support\")\n  add_definitions(-DAUTOUPDATE=1)\nendif()\n\n########################################\n# Setup include directories (and make sure they are preferred over the Externals)\n#\ninclude_directories(Source/Core)\nif(ANDROID)\n  include_directories(Source/Android)\nendif()\n\n########################################\n# Process externals and setup their include directories\n#\n# NOTES about adding Externals:\n#   - If an external provides a target, or one can be introduced with find_package, consider using it.\n#     - If a target doesn't exist, consider introducing a target for it with add_library and adding all necessary\n#       includes, definitions, etc, to that target. This way, only libraries that need those attributes simply\n#       need to link that target in, as opposed to them being provided to every library\n#       (which is the case with the directory-based include_directories, add_definitions, etc)\n#\n#   - make sure to tell cmake to link them statically or dynamically (most\n#     should be linked statically)\n#   - place the CMakeLists.txt in the first-level subdirectory, e.g.\n#     Externals/zlib/CMakeLists.txt (that is: NOT in some Src/ subdirectory)\n#\nif (_M_X86_64)\n  add_subdirectory(Externals/Bochs_disasm)\nendif()\nadd_subdirectory(Externals/cpp-optparse)\n\ndolphin_find_optional_system_library_pkgconfig(FMT\n  fmt>=10.1 fmt::fmt Externals/fmt\n)\n\nadd_subdirectory(Externals/imgui)\nadd_subdirectory(Externals/implot)\nadd_subdirectory(Externals/glslang)\n# SPIRV-Cross is used on Windows for GLSL to HLSL conversion for the Direct3D 11 and Direct3D 12\n# video backends, and on Apple devices for the Metal video backend.\nif(WIN32 OR APPLE)\n  add_subdirectory(Externals/spirv_cross)\nendif()\nadd_subdirectory(Externals/tinygltf)\n\nif(ENABLE_VULKAN)\n  add_definitions(-DHAS_VULKAN)\n\n  if(APPLE AND USE_BUNDLED_MOLTENVK)\n    add_subdirectory(Externals/MoltenVK)\n  endif()\n\n\n  if (ANDROID AND _M_ARM_64)\n    add_subdirectory(Externals/libadrenotools)\n  endif()\nendif()\n\nif(NOT WIN32 OR (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\")))\n  # OpenGL is available on all platforms except windows-arm64\n  add_definitions(-DHAS_OPENGL)\nendif()\n\ndolphin_find_optional_system_library(pugixml Externals/pugixml)\n\ndolphin_find_optional_system_library_pkgconfig(ENET libenet>=1.3.18 enet::enet Externals/enet)\n\ndolphin_find_optional_system_library_pkgconfig(xxhash libxxhash>=0.8.2 xxhash::xxhash Externals/xxhash)\n\ndolphin_find_optional_system_library(BZip2 Externals/bzip2)\n\ndolphin_find_optional_system_library(LibLZMA Externals/liblzma)\n# Imported target added in CMake 3.14\ndolphin_make_imported_target_if_missing(LibLZMA::LibLZMA LIBLZMA)\n\ndolphin_find_optional_system_library_pkgconfig(ZSTD libzstd>=1.4.0 zstd::zstd Externals/zstd)\n\nadd_subdirectory(Externals/zlib-ng)\n\ndolphin_find_optional_system_library_pkgconfig(MINIZIP\n  \"minizip>=4.0.4\" minizip::minizip Externals/minizip-ng\n)\n\ndolphin_find_optional_system_library(LZO Externals/LZO)\n\ndolphin_find_optional_system_library_pkgconfig(lz4 liblz4>=1.8 LZ4::LZ4 Externals/lz4)\n\ndolphin_find_optional_system_library_pkgconfig(SPNG spng spng::spng Externals/libspng)\n\n# Using static FreeSurround from Externals\n# There is no system FreeSurround library.\nmessage(STATUS \"Using static FreeSurround from Externals\")\nadd_subdirectory(Externals/FreeSurround)\n\nif (APPLE OR WIN32)\n  message(STATUS \"Using ed25519 from Externals\")\n  add_subdirectory(Externals/ed25519)\n  include_directories(Externals/ed25519)\nendif()\n\n# Using static soundtouch from Externals\n# Unable to use system soundtouch library: We require shorts, not floats.\nadd_subdirectory(Externals/soundtouch)\ninclude_directories(Externals/soundtouch)\n\ndolphin_find_optional_system_library(CUBEB Externals/cubeb)\n\nif(NOT ANDROID)\n  dolphin_find_optional_system_library_pkgconfig(\n    LibUSB libusb-1.0 LibUSB::LibUSB Externals/libusb\n  )\n  add_definitions(-D__LIBUSB__)\nendif()\n\ndolphin_find_optional_system_library(SFML Externals/SFML 2.1 COMPONENTS network system)\n\nif(USE_UPNP)\n  dolphin_find_optional_system_library(MINIUPNPC Externals/miniupnpc 1.6)\n  add_definitions(-DUSE_UPNP)\nendif()\n\ndolphin_find_optional_system_library(MBEDTLS Externals/mbedtls 2.28)\n\ndolphin_find_optional_system_library(CURL Externals/curl)\n\nif(NOT ANDROID)\n  dolphin_find_optional_system_library(Iconv Externals/libiconv-1.14)\nelse()\n  message(STATUS \"Using static iconv from Externals\")\n  add_subdirectory(Externals/libiconv-1.14 EXCLUDE_FROM_ALL)\nendif()\n\nif(NOT ANDROID)\n  dolphin_find_optional_system_library(HIDAPI Externals/hidapi)\nendif()\n\nif(USE_DISCORD_PRESENCE)\n  message(STATUS \"Using static DiscordRPC from Externals\")\n  add_subdirectory(Externals/discord-rpc EXCLUDE_FROM_ALL)\n  include_directories(Externals/discord-rpc/include)\nendif()\n\nif(NOT ENABLE_QT)\n  set(USE_MGBA 0)\nendif()\nif(USE_MGBA)\n  dolphin_find_optional_system_library(LIBMGBA Externals/mGBA)\nendif()\n\nfind_package(SYSTEMD)\nif(SYSTEMD_FOUND)\n  message(STATUS \"libsystemd found, enabling traversal server watchdog support\")\n  add_definitions(-DHAVE_LIBSYSTEMD)\nelse()\n  message(STATUS \"libsystemd not found, disabling traversal server watchdog support\")\nendif()\n\nif (WIN32)\n  include_directories(Externals/WIL/include)\n  include_directories(Externals/OpenAL/include)\nendif()\n\ninclude_directories(Externals/picojson)\n\nadd_subdirectory(Externals/expr)\n\nadd_subdirectory(Externals/rangeset)\n\nadd_subdirectory(Externals/FatFs)\n\nif (USE_RETRO_ACHIEVEMENTS)\n\tadd_subdirectory(Externals/rcheevos)\nendif()\n\n########################################\n# Pre-build events: Define configuration variables and write SCM info header\n#\n\n# Remove in-tree revision information generated by Visual Studio\n# This is because the compiler will check in-tree first and use this, even if it is outdated\nfile(REMOVE \"${PROJECT_SOURCE_DIR}/Source/Core/Common/scmrev.h\")\n\nfile(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/Source/Core/Common)\nif (NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/Source/Core/Common/scmrev.h)\n\tfile(TOUCH ${CMAKE_CURRENT_BINARY_DIR}/Source/Core/Common/scmrev.h)\nendif()\n\nif(APPLE)\n  file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/Source/Core)\n  if (NOT EXISTS ${CMAKE_CURRENT_BINARY_DIR}/Source/Core/VersionInfo.plist)\n    file(TOUCH ${CMAKE_CURRENT_BINARY_DIR}/Source/Core/VersionInfo.plist)\n  endif()\nendif()\n\nfind_package(Git)\nif(NOT GIT_FOUND)\n\tset(GIT_EXECUTABLE \"\")\nendif()\nadd_custom_target(\n\tdolphin_scmrev\n\t${CMAKE_COMMAND} -DPROJECT_SOURCE_DIR=${PROJECT_SOURCE_DIR} -DPROJECT_BINARY_DIR=${PROJECT_BINARY_DIR} -DDISTRIBUTOR=${DISTRIBUTOR} -DDOLPHIN_DEFAULT_UPDATE_TRACK=${DOLPHIN_DEFAULT_UPDATE_TRACK} -DGIT_FOUND=${GIT_FOUND} -DGIT_EXECUTABLE=${GIT_EXECUTABLE} -DDOLPHIN_WC_REVISION=${DOLPHIN_WC_REVISION} -DDOLPHIN_WC_DESCRIBE=${DOLPHIN_WC_DESCRIBE} -DDOLPHIN_WC_BRANCH=${DOLPHIN_WC_BRANCH} -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET} -P ${CMAKE_CURRENT_SOURCE_DIR}/CMake/ScmRevGen.cmake\n\tBYPRODUCTS \"${CMAKE_CURRENT_BINARY_DIR}/Source/Core/Common/scmrev.h\" \"${CMAKE_CURRENT_BINARY_DIR}/Source/Core/DolphinQt/Info.plist\" \"${CMAKE_CURRENT_BINARY_DIR}/Source/Core/MacUpdater/Info.plist\"\n\tVERBATIM\n)\n\n# This is here so #include \"Common/scmrev.h\" finds the generated header.\ninclude_directories(\"${PROJECT_BINARY_DIR}/Source/Core\")\n\n########################################\n# Unit testing.\n#\nif(ENABLE_TESTS)\n  dolphin_find_optional_system_library_pkgconfig(GTEST\n    gtest gtest::gtest Externals/gtest\n  )\n  # dolphin_find_optional_system_library_pkgconfig() doesn't add an alias if it\n  # uses the bundled libraries, so we add one ourselves.\n  if (NOT TARGET gtest::gtest)\n    add_library(gtest::gtest ALIAS gtest)\n  endif()\n  # Force gtest to link the C runtime dynamically on Windows in order to avoid\n  # runtime mismatches.\n  set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nelse()\n  message(STATUS \"Unit tests are disabled\")\nendif()\n\n########################################\n# Process Dolphin source now that all setup is complete\n#\nadd_subdirectory(Source)\n\n########################################\n# Install shared data files\n#\nif(NOT CMAKE_SYSTEM_NAME MATCHES \"Darwin|Windows\")\n  install(DIRECTORY Data/Sys/ DESTINATION ${datadir}/sys PATTERN)\nendif()\nif(NOT CMAKE_SYSTEM_NAME MATCHES \"Linux|FreeBSD|OpenBSD|Darwin\")\n  install(FILES Data/license.txt DESTINATION ${datadir})\nendif()\nif(CMAKE_SYSTEM_NAME MATCHES \"Linux|FreeBSD|OpenBSD\")\n  # Install the application icon and menu item\n  install(FILES Data/dolphin-emu.svg\n          DESTINATION ${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/scalable/apps)\n  install(FILES Data/dolphin-emu.png\n          DESTINATION ${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/256x256/apps)\n  install(FILES Data/dolphin-emu.desktop\n          DESTINATION ${CMAKE_INSTALL_PREFIX}/share/applications)\n  # Install manpages\n  install(FILES Data/dolphin-emu.6\n          DESTINATION ${CMAKE_INSTALL_MANDIR}/man6)\n  install(FILES Data/dolphin-emu-nogui.6\n          DESTINATION ${CMAKE_INSTALL_MANDIR}/man6)\nendif()\n\n# packaging information\nset(CPACK_PACKAGE_NAME \"dolphin-emu\")\nset(CPACK_PACKAGE_VENDOR \"Dolphin Team\")\nset(CPACK_PACKAGE_VERSION_MAJOR ${DOLPHIN_VERSION_MAJOR})\nset(CPACK_PACKAGE_VERSION_MINOR ${DOLPHIN_VERSION_MINOR})\nset(CPACK_PACKAGE_VERSION_PATCH ${DOLPHIN_VERSION_PATCH})\nset(CPACK_PACKAGE_DESCRIPTION_FILE ${PROJECT_SOURCE_DIR}/Data/cpack_package_description.txt)\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"A GameCube and Wii emulator\")\n\nset(CPACK_RPM_PACKAGE_GROUP System/Emulators/Other)\nset(CPACK_RPM_PACKAGE_LICENSE GPL-2.0)\n# TODO: CPACK_RESOURCE_FILE_README\n# TODO: CPACK_RESOURCE_FILE_WELCOME\n# TODO: CPACK_PACKAGE_ICON\n# TODO: CPACK_NSIS_*\n# TODO: Use CPack components for DSPSpy, etc => cpack_add_component\n\n# Debian Specific. Install dpkg-dev for automatic deps generation\nset(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)\nset(CPACK_DEBIAN_PACKAGE_SECTION \"Games\")\n\nset(CPACK_SET_DESTDIR ON)\nset(CPACK_SOURCE_GENERATOR \"TGZ;TBZ2;ZIP\")\nset(CPACK_SOURCE_IGNORE_FILES  \"\\\\\\\\.#;/#;.*~;\\\\\\\\.swp;/\\\\\\\\.git\")\nlist(APPEND CPACK_SOURCE_IGNORE_FILES \"${CMAKE_BINARY_DIR}\")\n\n# CPack must be included after the CPACK_* variables are set in order for those\n# variables to take effect.\nInclude(CPack)\n"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 1.5546875,
          "content": "{\n  \"configurations\": [\n    {\n      \"name\": \"Release\",\n      \"configurationType\": \"Release\",\n      \"generator\": \"Ninja\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n      \"buildCommandArgs\": \"\",\n      \"buildRoot\": \"${workspaceRoot}\\\\Build\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"variables\": [\n      ]\n    },\n    {\n      \"name\": \"Debug\",\n      \"configurationType\": \"Debug\",\n      \"generator\": \"Ninja\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n      \"buildCommandArgs\": \"\",\n      \"buildRoot\": \"${workspaceRoot}\\\\Build\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"variables\": [\n      ]\n    },\n    {\n      \"name\": \"Release (arm64)\",\n      \"configurationType\": \"Release\",\n      \"generator\": \"Ninja\",\n      \"inheritEnvironments\": [ \"msvc_arm64_x64\" ],\n      \"buildCommandArgs\": \"\",\n      \"buildRoot\": \"${workspaceRoot}\\\\Build\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"variables\": [\n        {\n          \"name\": \"CMAKE_SYSTEM_NAME\",\n          \"value\": \"Windows\"\n        },\n        {\n          \"name\": \"CMAKE_SYSTEM_PROCESSOR\",\n          \"value\": \"aarch64\"\n        }\n      ]\n    },\n    {\n      \"name\": \"Debug (arm64)\",\n      \"configurationType\": \"Debug\",\n      \"generator\": \"Ninja\",\n      \"inheritEnvironments\": [ \"msvc_arm64_x64\" ],\n      \"buildCommandArgs\": \"\",\n      \"buildRoot\": \"${workspaceRoot}\\\\Build\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"variables\": [\n        {\n          \"name\": \"CMAKE_SYSTEM_NAME\",\n          \"value\": \"Windows\"\n        },\n        {\n          \"name\": \"CMAKE_SYSTEM_PROCESSOR\",\n          \"value\": \"aarch64\"\n        }\n      ]\n    }\n  ]\n}"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 6.4462890625,
          "content": "# Dolphin Emulator Code of Conduct\n\nLike many Open Source projects and the greater FLOSS community, Dolphin is a\ncollaborative open source community comprised of a diverse group of\ncontributors and users from around the globe. We find the contributions,\ncollaborations, and mentorships within our community to be the essential\nlifeblood of our project and appreciate the efforts of those who participate to\nnurture and grow those, and all other aspects of our community.\n\nHowever, when a large and sufficiently diverse group of people work together,\nthere are often cultural, communication, and compatibility issues. In order to\nminimize conflict, and provide a framework for resolution, we have a brief code\nof conduct that we ask all participants in the Dolphin community adhere to.\nThese rules should apply to everyone, regardless of their status within the\ncommunity, and anyone can serve to remind, or ask the project leads to help\nresolve issues.\n\nNo list is ever exhaustive, so we encourage members of the Dolphin community to\nadhere to the spirit, rather than the letter, of this code, as that is how it\nwill be enforced. Places where this code may be particularly applicable are\nGitHub issues and pull requests, bug tracker comments, IRC, Discord, forums,\nTwitter discussions broadly directed at or between members of the community,\nand other direct interactions within the community. Any violations, especially\ncontinued or flagrant offenses, may affect an individual‚Äôs (or organization‚Äôs)\nability to participate within the Dolphin community.\n\nIf you feel that someone is in violation of the code of conduct, whether in\nletter or in spirit, we request that you email as detailed a description as\npossible of the offense and offending party/parties to\n[conduct@dolphin-emu.org](mailto:conduct@dolphin-emu.org). If you have\nquestions, concerns, or any other inquiries please feel free to contact the\nproject leads.\n\n## Rules\n\n1. **Be friendly and patient.** We were all new or suffered from a lack of\n   knowledge at one point in time. Please try to remember what it felt like to\n   be on that end, and treat people accordingly.\n\n2. **Be welcoming.** We strive to be a community that welcomes and supports\n   people of all backgrounds and identities. This includes, but is not limited\n   to members of any race, ethnicity, culture, national origin, colour,\n   immigration status, social and economic class, educational level, sex,\n   sexual orientation, gender identity and expression, age, size, family\n   status, political belief, religion, and mental and physical ability.\n\n3. **Be helpful.** By helping others to learn our entire ecosystem is enriched.\n   We encourage members of the Dolphin community to mentor each other and help\n   to raise the general level of knowledge in the community whenever possible.\n\n4. **Be considerate.** Your work will be used by other people, and you in turn\n   will depend on the work of others. Any decision you take will affect users\n   and colleagues, and you should take those consequences into account when\n   making decisions. Remember that we‚Äôre a world-wide community, so you might\n   not be communicating in someone else‚Äôs primary language.\n\n5. **Be respectful.** Not all of us will agree all the time, but disagreement\n   is no excuse for poor behavior and poor manners. We might all experience\n   some frustration now and then, but we cannot allow that frustration to turn\n   into a personal attack. It‚Äôs important to remember that a community where\n   people feel uncomfortable or threatened is not a productive one. Members of\n   the Dolphin community should be respectful when dealing with other members\n   as well as with people outside the Dolphin community.\n\n6. **Be careful in the words that you choose.** We are a community of\n   professionals, and we conduct ourselves professionally. Be kind to others.\n   Do not insult or put down other participants. Harassment and other\n   exclusionary behavior aren‚Äôt acceptable. This includes, but is not limited\n   to:\n\n    - Violent threats or language directed against another person.\n    - Discriminatory jokes and language.\n    - Posting sexually explicit or violent material.\n    - Posting (or threatening to post) other people‚Äôs personally identifying\n      information (‚Äúdoxing‚Äù), regardless of whether it is publicly available.\n    - Personal insults, especially those using racist, sexist, or otherwise\n      discriminatory terms.\n    - Deliberately referring to others by names or pronouns counter to their\n      identity.\n    - Unwelcome sexual attention.\n    - Advocating for, or encouraging, any of the above behavior.\n    - Repeated harassment of others. In general, if someone asks you to stop,\n      then stop.\n\n7. **When we disagree, try to understand why.** Disagreements, both social and\n   technical, happen all the time and Dolphin is no exception. It is important\n   that we resolve disagreements and differing views constructively.  Remember\n   that we‚Äôre different. The strength of Dolphin comes from its varied\n   community, people from a wide range of backgrounds. Different people have\n   different perspectives on issues. Being unable to understand why someone\n   holds a viewpoint doesn‚Äôt mean that they‚Äôre wrong. Don‚Äôt forget that it is\n   human to err and blaming each other doesn‚Äôt get us anywhere. Instead, focus\n   on helping to resolve issues and learning from mistakes.\n\n## Consequences\n\nExcept in flagrant or otherwise egregious cases, the first infraction will\nresult in a verbal warning. Everyone slips up or acts out of frustration at\ntimes, we just ask that you work to not repeat the behavior. Continued\ninfractions will be dealt with on a case-by-case basis, and could lead to\nactions including:\n\n- Temporary suspension from one or all avenues of Dolphin community\n  participation. This includes, but is not limited to, IRC, Discord, GitHub,\n  Redmine, and the Dolphin Forums.\n- Permanent suspension from participating in the Dolphin community.\n\nModerators should generally assume good intent when evaluating infractions, but\nshould also keep in mind that good intent does not override the Code of Conduct\nrules.\n\n## Acknowledgments\n\nThis text is adapted from the [Asahi Linux Code of\nConduct](https://asahilinux.org/code-of-conduct/), itself derived from the\n[Ceph Code of Conduct](https://ceph.io/community/code-of-conduct/), and the\n[Django Project Code of Conduct](https://www.djangoproject.com/conduct/). Feel\nfree to reuse under the terms of the [CC-BY-SA 4.0\nlicense](https://creativecommons.org/licenses/by-sa/4.0/).\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.482421875,
          "content": "Most of Dolphin's original source code is licensed under GPLv2+. Part of the\nsource code distributed in this repository is derived from other projects and\nmay have stronger or weaker licensing requirement. Overall, in aggregate, the\nentirety of this repository is compatible with the GPLv3 license.\n\nPer-file licensing information is provided via SPDX tags [1]. The licenses\nreferenced in these tags can be found in the LICENSES/ directory within this\nsource repository.\n\n[1] https://spdx.dev/\n"
        },
        {
          "name": "Contributing.md",
          "type": "blob",
          "size": 12.6259765625,
          "content": "# <a name=\"main-section-overview\"></a>Dolphin Coding Style & Legal Requirements\n\n- [Legal](#legal)\n- [Coding style introduction](#introduction)\n- [C++ coding style and formatting](#cpp-coding-style-and-formatting)\n- [C++ code-specific guidelines](#cpp-code-specific-guidelines)\n- [Android](#android)\n- [Help](#help)\n\n# <a name=\"legal\"></a>Legal\n\nSummary:\n\n- [Trade secrets](#trade-secrets)\n- [Code licensing](#code-licensing)\n\n## <a name=\"trade-secrets\"></a>Trade secrets\n\nFollowing all relevant laws is of utmost importance for an emulation project like Dolphin.\n\nIf you know any confidential information related to the GameCube, Wii, or Triforce, either because you signed a non-disclosure agreement or because you looked at leaked materials, we ask that you don't contribute code to Dolphin **at all**. While accepting code from contributors who know confidential information is legal if the code is unrelated to the confidential information, we refuse to accept code from such contributors because it greatly increases our review burden and increases the legal risk we take.\n\nAlso, this probably goes without saying, but piracy is strictly forbidden both on GitHub and in all other Dolphin channels.\n\n## <a name=\"code-licensing\"></a>Code licensing\n\nIf you make any contributions to Dolphin after December 1st, 2014, you are agreeing that any code you have contributed will be licensed under the GNU GPL version 2 (or any later version).\n\n# <a name=\"introduction\"></a>Coding style introduction\n\nSummary:\n\n- [Aims](#intro-aims)\n- [Checking and fixing formatting issues](#intro-formatting-issues)\n\n## <a name=\"intro-aims\"></a>Aims\n\nThis guide is for developers who wish to contribute to the Dolphin codebase. It will detail how to properly style and format code to fit this project. This guide also offers suggestions on specific functions and other varia that may be used in code.\n\nFollowing this guide and formatting your code as detailed will likely get your pull request merged much faster than if you don't (assuming the written code has no mistakes in itself).\n\nThis project uses clang-format (stable branch) to check for common style issues. In case of conflicts between this guide and clang-format rules, the latter should be followed instead of this guide.\n\n## <a name=\"intro-formatting-issues\"></a>Checking and fixing formatting issues\n\nWindows users need to be careful about line endings. Windows users should configure git to checkout UNIX-style line endings to keep clang-format simple.\n\nIn most cases, clang-format can and **should** be used to automatically reformat code and solve most formatting issues.\n\n- To run clang-format on all staged files:\n  ```\n  git diff --cached --name-only | egrep '[.](cpp|h|mm)$' | xargs clang-format -i\n  ```\n\n- Formatting issues can be checked for before committing with a lint script that is included with the codebase. To enable it as a pre-commit hook (assuming you are in the repository root):\n  ```\n  ln -s ../../Tools/lint.sh .git/hooks/pre-commit\n  ```\n\n- Alternatively, a custom git filter driver can be used to automatically and transparently reformat any changes:\n  ```\n  git config filter.clang_format.smudge 'cat'\n  git config filter.clang_format.clean 'clang-format %f'\n  echo '/Source/Core/**/*.cpp filter=clang_format' >> .git/info/attributes\n  echo '/Source/Core/**/*.h filter=clang_format' >> .git/info/attributes\n  echo '/Source/Core/**/*.mm filter=clang_format' >> .git/info/attributes\n  ```\n\n- Visual Studio supports automatically formatting the current document according to the clang-format configuration by pressing <kbd>Control</kbd>+<kbd>K</kbd> followed by <kbd>Control</kbd>+<kbd>D</kbd> (or selecting Edit &rarr; Advanced &rarr; Format Document). This can be used without separately installing clang-format.\n\n# <a name=\"cpp-coding-style-and-formatting\"></a>C++ coding style and formatting\n\nSummary:\n\n- [General](#cpp-style-general)\n- [Naming](#cpp-style-naming)\n- [Conditionals](#cpp-style-conditionals)\n- [Classes and structs](#cpp-style-classes-and-structs)\n\n## <a name=\"cpp-style-general\"></a>General\n- Try to limit lines of code to a maximum of 100 characters.\n    - Note that this does not mean you should try and use all 100 characters every time you have the chance. Typically with well formatted code, you normally shouldn't hit a line count of anything over 80 or 90 characters.\n- The indentation style we use is 2 spaces per level.\n- The opening brace for namespaces, classes, functions, enums, structs, unions, conditionals, and loops go on the next line.\n  - With array initializer lists and lambda expressions it is OK to keep the brace on the same line.\n- References and pointers have the ampersand or asterisk against the type name, not the variable name. Example: `int* var`, not `int *var`.\n- Don't use multi-line comments (`/* Comment text */`), use single-line comments (`// Comment text`) instead.\n- Don't collapse single line conditional or loop bodies onto the same line as its header. Put it on the next line.\n  - Yes:\n\n    ```c++\n    if (condition)\n      return 0;\n\n    while (var != 0)\n      var--;\n    ```\n  - No:\n\n    ```c++\n    if (condition) return 0;\n\n    while (var != 0) var--;\n    ```\n\n## <a name=\"cpp-style-naming\"></a>Naming\n- All class, enum, function, and struct names should be in upper CamelCase. If the name contains an abbreviation uppercase it.\n  - `class SomeClassName`\n  - `enum IPCCommandType`\n- All compile time constants should be fully uppercased. With constants that have more than one word in them, use an underscore to separate them.\n  - `constexpr double PI = 3.14159;`\n  - `constexpr int MAX_PATH = 260;`\n- All variables should be lowercase with underscores separating the individual words in the name.\n  - `int this_variable_name;`\n- Please do not use [Hungarian notation](https://en.wikipedia.org/wiki/Hungarian_notation) prefixes with variables. The only exceptions to this are the variable prefixes below.\n  - Global variables ‚Äì `g_`\n  - Class variables ‚Äì `m_`\n  - Static variables ‚Äì `s_`\n\n## <a name=\"cpp-style-conditionals\"></a>Conditionals\n- Do not leave `else` or `else if` conditions dangling unless the `if` condition lacks braces.\n  - Yes:\n\n    ```c++\n    if (condition)\n    {\n      // code\n    }\n    else\n    {\n      // code\n    }\n    ```\n  - Acceptable:\n\n    ```c++\n    if (condition)\n      // code line\n    else\n      // code line\n    ```\n  - No:\n\n    ```c++\n    if (condition)\n    {\n      // code\n    }\n    else\n      // code line\n    ```\n\n\n## <a name=\"cpp-style-classes-and-structs\"></a>Classes and structs\n- If making a [POD](https://en.wikipedia.org/wiki/Passive_data_structure) type, use a `struct` for this. Use a `class` otherwise.\n- Class layout should be in the order, `public`, `protected`, and then `private`.\n  - If one or more of these sections are not needed, then simply don't include them.\n- For each of the above specified access levels, the contents of each should follow this given order: constructor, destructor, operator overloads, functions, then variables.\n- When defining the variables, define `static` variables before the non-static ones.\n\n```c++\nclass ExampleClass : public SomeParent\n{\npublic:\n  ExampleClass(int x, int y);\n\n  int GetX() const;\n  int GetY() const;\n\nprotected:\n  virtual void SomeProtectedFunction() = 0;\n  static float s_some_variable;\n\nprivate:\n  int m_x;\n  int m_y;\n};\n```\n\n# <a name=\"cpp-code-specific-guidelines\"></a>C++ code-specific guidelines\n\nSummary:\n\n- [General](#cpp-code-general)\n- [Headers](#cpp-code-headers)\n- [Loops](#cpp-code-loops)\n- [Functions](#cpp-code-functions)\n- [Classes and Structs](#cpp-code-classes-and-structs)\n\n## <a name=\"cpp-code-general\"></a>General\n- The codebase currently uses C++20, though not all compilers support all C++20 features.\n  - See CMakeLists.txt \"Enforce minimum compiler versions\" for the currently supported compilers.\n- Use the [nullptr](https://en.cppreference.com/w/cpp/language/nullptr) type over the macro `NULL`.\n- If a [range-based for loop](https://en.cppreference.com/w/cpp/language/range-for) can be used instead of container iterators, use it.\n- Obviously, try not to use `goto` unless you have a *really* good reason for it.\n- If a compiler warning is found, please try and fix it.\n- Try to avoid using raw pointers (pointers allocated with `new`) as much as possible. There are cases where using a raw pointer is unavoidable, and in these situations it is OK to use them. An example of this is functions from a C library that require them. In cases where it is avoidable, the STL usually has a means to solve this (`vector`, `unique_ptr`, etc).\n- Do not use the `auto` keyword everywhere. While it's nice that the type can be determined by the compiler, it cannot be resolved at 'readtime' by the developer as easily. Use auto only in cases where it is obvious what the type being assigned is (note: 'obvious' means not having to open other files or reading the header file). Some situations where it is appropriate to use `auto` is when iterating over a `std::map` container in a foreach loop, or to shorten the length of container iterator variable declarations.\n- Do not use `using namespace [x];` in headers. Try not to use it at all if you can.\n- The preferred form of the increment and decrement operator in for-loops is prefix-form (e.g. `++var`).\n\n## <a name=\"cpp-code-headers\"></a>Headers\n- If a header is not necessary in a certain source file, remove them.\n- If you find duplicate includes of a certain header, remove it.\n- When declaring includes in a source file, make sure they follow the given pattern:\n  - The header for the source file\n  - Standard library headers\n  - System-specific headers (these should also likely be in an `#ifdef` block unless the source file itself is system-specific).\n  - Other Dolphin source file headers\n- Each of the above header sections should also be in alphabetical order\n- Project source file headers should be included in a way that is relative to the `[Dolphin Root]/Source/Core` directory.\n- This project uses `#pragma once` as header guards.\n\n## <a name=\"cpp-code-loops\"></a>Loops\n- If an infinite loop is required, do not use `for (;;)`, use `while (true)`.\n- Empty-bodied loops should use braces after their header, not a semicolon.\n  - Yes: `while (condition) {}`\n  - No: `while (condition);`\n- For do-while loops, place 'while' on the same line as the closing brackets\n\n  ```c++\n  do\n  {\n    // code\n  } while (false);\n  ```\n\n## <a name=\"cpp-code-functions\"></a>Functions\n- If a function parameter is a pointer or reference and its value or data isn't intended to be changed, please mark that parameter as `const`.\n- Functions that specifically modify their parameters should have the respective parameter(s) marked as a pointer so that the variables being modified are syntactically obvious.\n  - What not to do:\n\n    ```c++\n    template<class T>\n    inline void Clamp(T& val, const T& min, const T& max)\n    {\n      if (val < min)\n        val = min;\n      else if (val > max)\n        val = max;\n    }\n    ```\n\n    Example call: `Clamp(var, 1000, 5000);`\n\n  - What to do:\n\n    ```c++\n    template<class T>\n    inline void Clamp(T* val, const T& min, const T& max)\n    {\n      if (*val < min)\n        *val = min;\n      else if (*val > max)\n        *val = max;\n    }\n    ```\n\n    Example call: `Clamp(&var, 1000, 5000);`\n\n- Class member functions that you do not want to be overridden in inheriting classes should be marked with the `final` specifier.\n\n  ```c++\n  class ClassName : ParentClass\n  {\n  public:\n    void Update() final;\n  };\n  ```\n\n- Overridden member functions that can also be inherited should be marked with the `override` specifier to make it easier to see which functions belong to the parent class.\n\n  ```c++\n  class ClassName : ParentClass\n  {\n  public:\n    void Update() override;\n  };\n  ```\n\n## <a name=\"cpp-code-classes-and-structs\"></a>Classes and structs\n- Classes and structs that are not intended to be extended through inheritance should be marked with the `final` specifier.\n\n  ```c++\n  class ClassName final : ParentClass\n  {\n    // Class definitions\n  };\n  ```\n\n# <a name=\"android\"></a>Android\n\nIf you are using Kotlin, just use the built-in official Kotlin code style.\n\nTo install the Java code style in Android Studio, select the gear icon in the Code Style settings as shown, select `Import Scheme...` and select `dolphin/Source/Android/code-style-java.xml`. The Code Style menu should look like this when complete. ![Code Style Window][code-style]\n\nYou can now select any section of code and press `Ctrl + Alt + L` to automatically format it.\n\n# <a name=\"help\"></a>Help\nIf you have any questions about Dolphin's development or would like some help, Dolphin developers use `#dolphin-emu @ irc.libera.chat` to communicate. If you are new to IRC, [Libera.Chat has resources to get started chatting with IRC.](https://libera.chat/)\n\n[code-style]: https://i.imgur.com/3b3UBhb.png\n"
        },
        {
          "name": "Data",
          "type": "tree",
          "content": null
        },
        {
          "name": "Externals",
          "type": "tree",
          "content": null
        },
        {
          "name": "Flatpak",
          "type": "tree",
          "content": null
        },
        {
          "name": "Installer",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "Languages",
          "type": "tree",
          "content": null
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 10.6484375,
          "content": "# Dolphin - A GameCube and Wii Emulator\n\n[Homepage](https://dolphin-emu.org/) | [Project Site](https://github.com/dolphin-emu/dolphin) | [Buildbot](https://dolphin.ci/) | [Forums](https://forums.dolphin-emu.org/) | [Wiki](https://wiki.dolphin-emu.org/) | [GitHub Wiki](https://github.com/dolphin-emu/dolphin/wiki) | [Issue Tracker](https://bugs.dolphin-emu.org/projects/emulator/issues) | [Coding Style](https://github.com/dolphin-emu/dolphin/blob/master/Contributing.md) | [Transifex Page](https://app.transifex.com/dolphinemu/dolphin-emu/dashboard/)\n\nDolphin is an emulator for running GameCube and Wii games on Windows,\nLinux, macOS, and recent Android devices. It's licensed under the terms\nof the GNU General Public License, version 2 or later (GPLv2+).\n\nPlease read the [FAQ](https://dolphin-emu.org/docs/faq/) before using Dolphin.\n\n## System Requirements\n\n### Desktop\n\n* OS\n    * Windows (10 1703 or higher).\n    * Linux.\n    * macOS (10.15 Catalina or higher).\n    * Unix-like systems other than Linux are not officially supported but might work.\n* Processor\n    * A CPU with SSE2 support.\n    * A modern CPU (3 GHz and Dual Core, not older than 2008) is highly recommended.\n* Graphics\n    * A reasonably modern graphics card (Direct3D 11.1 / OpenGL 3.3).\n    * A graphics card that supports Direct3D 11.1 / OpenGL 4.4 is recommended.\n\n### Android\n\n* OS\n    * Android (5.0 Lollipop or higher).\n* Processor\n    * A processor with support for 64-bit applications (either ARMv8 or x86-64).\n* Graphics\n    * A graphics processor that supports OpenGL ES 3.0 or higher. Performance varies heavily with [driver quality](https://dolphin-emu.org/blog/2013/09/26/dolphin-emulator-and-opengl-drivers-hall-fameshame/).\n    * A graphics processor that supports standard desktop OpenGL features is recommended for best performance.\n\nDolphin can only be installed on devices that satisfy the above requirements. Attempting to install on an unsupported device will fail and display an error message.\n\n## Building for Windows\n\nUse the solution file `Source/dolphin-emu.sln` to build Dolphin on Windows.\nDolphin targets the latest MSVC shipped with Visual Studio or Build Tools.\nOther compilers might be able to build Dolphin on Windows but have not been\ntested and are not recommended to be used. Git and latest Windows SDK must be\ninstalled when building.\n\nMake sure to pull submodules before building:\n```sh\ngit submodule update --init --recursive\n```\n\nThe \"Release\" solution configuration includes performance optimizations for the best user experience but complicates debugging Dolphin.\nThe \"Debug\" solution configuration is significantly slower, more verbose and less permissive but makes debugging Dolphin easier.\n\n## Building for Linux and macOS\n\nDolphin requires [CMake](https://cmake.org/) for systems other than Windows. \nYou need a recent version of GCC or Clang with decent c++20 support. CMake will\ninform you if your compiler is too old.\nMany libraries are bundled with Dolphin and used if they're not installed on \nyour system. CMake will inform you if a bundled library is used or if you need\nto install any missing packages yourself. You may refer to the [wiki](https://github.com/dolphin-emu/dolphin/wiki/Building-for-Linux) for more information.\n\nMake sure to pull submodules before building:\n```sh\ngit submodule update --init --recursive\n```\n\n### macOS Build Steps:\n\nA binary supporting a single architecture can be built using the following steps: \n\n1. `mkdir build`\n2. `cd build`\n3. `cmake ..`\n4. `make -j $(sysctl -n hw.logicalcpu)`\n\nAn application bundle will be created in `./Binaries`.\n\nA script is also provided to build universal binaries supporting both x64 and ARM in the same\napplication bundle using the following steps:\n\n1. `mkdir build`\n2. `cd build`\n3. `python ../BuildMacOSUniversalBinary.py`\n4. Universal binaries will be available in the `universal` folder\n\nDoing this is more complex as it requires installation of library dependencies for both x64 and ARM (or universal library\nequivalents) and may require specifying additional arguments to point to relevant library locations. \nExecute BuildMacOSUniversalBinary.py --help for more details.  \n\n### Linux Global Build Steps:\n\nTo install to your system.\n\n1. `mkdir build`\n2. `cd build`\n3. `cmake ..`\n4. `make -j $(nproc)`\n5. `sudo make install`\n\n### Linux Local Build Steps:\n\nUseful for development as root access is not required.\n\n1. `mkdir Build`\n2. `cd Build`\n3. `cmake .. -DLINUX_LOCAL_DEV=true`\n4. `make -j $(nproc)`\n5. `ln -s ../../Data/Sys Binaries/`\n\n### Linux Portable Build Steps:\n\nCan be stored on external storage and used on different Linux systems.\nOr useful for having multiple distinct Dolphin setups for testing/development/TAS.\n\n1. `mkdir Build`\n2. `cd Build`\n3. `cmake .. -DLINUX_LOCAL_DEV=true`\n4. `make -j $(nproc)`\n5. `cp -r ../Data/Sys/ Binaries/`\n6. `touch Binaries/portable.txt`\n\n## Building for Android\n\nThese instructions assume familiarity with Android development. If you do not have an\nAndroid dev environment set up, see [AndroidSetup.md](AndroidSetup.md).\n\nMake sure to pull submodules before building:\n```sh\ngit submodule update --init --recursive\n```\n\nIf using Android Studio, import the Gradle project located in `./Source/Android`.\n\nAndroid apps are compiled using a build system called Gradle. Dolphin's native component,\nhowever, is compiled using CMake. The Gradle script will attempt to run a CMake build\nautomatically while building the Java code.\n\n## Uninstalling\n\nOn Windows, simply remove the extracted directory, unless it was installed with the NSIS installer,\nin which case you can uninstall Dolphin like any other Windows application.\n\nLinux users can run `cat install_manifest.txt | xargs -d '\\n' rm` as root from the build directory\nto uninstall Dolphin from their system.\n\nmacOS users can simply delete Dolphin.app to uninstall it.\n\nAdditionally, you'll want to remove the global user directory if you don't plan on reinstalling Dolphin.\n\n## Command Line Usage\n\n```\nUsage: Dolphin.exe [options]... [FILE]...\n\nOptions:\n  --version             show program's version number and exit\n  -h, --help            show this help message and exit\n  -u USER, --user=USER  User folder path\n  -m MOVIE, --movie=MOVIE\n                        Play a movie file\n  -e <file>, --exec=<file>\n                        Load the specified file\n  -n <16-character ASCII title ID>, --nand_title=<16-character ASCII title ID>\n                        Launch a NAND title\n  -C <System>.<Section>.<Key>=<Value>, --config=<System>.<Section>.<Key>=<Value>\n                        Set a configuration option\n  -s <file>, --save_state=<file>\n                        Load the initial save state\n  -d, --debugger        Show the debugger pane and additional View menu options\n  -l, --logger          Open the logger\n  -b, --batch           Run Dolphin without the user interface (Requires\n                        --exec or --nand-title)\n  -c, --confirm         Set Confirm on Stop\n  -v VIDEO_BACKEND, --video_backend=VIDEO_BACKEND\n                        Specify a video backend\n  -a AUDIO_EMULATION, --audio_emulation=AUDIO_EMULATION\n                        Choose audio emulation from [HLE|LLE]\n```\n\nAvailable DSP emulation engines are HLE (High Level Emulation) and\nLLE (Low Level Emulation). HLE is faster but less accurate whereas\nLLE is slower but close to perfect. Note that LLE has two submodes (Interpreter and Recompiler)\nbut they cannot be selected from the command line.\n\nAvailable video backends are \"D3D\" and \"D3D12\" (they are only available on Windows), \"OGL\", and \"Vulkan\".\nThere's also \"Null\", which will not render anything, and\n\"Software Renderer\", which uses the CPU for rendering and\nis intended for debugging purposes only.\n\n## DolphinTool Usage\n```\nusage: dolphin-tool COMMAND -h\n\ncommands supported: [convert, verify, header, extract]\n```\n\n```\nUsage: convert [options]... [FILE]...\n\nOptions:\n  -h, --help            show this help message and exit\n  -u USER, --user=USER  User folder path, required for temporary processing\n                        files.Will be automatically created if this option is\n                        not set.\n  -i FILE, --input=FILE\n                        Path to disc image FILE.\n  -o FILE, --output=FILE\n                        Path to the destination FILE.\n  -f FORMAT, --format=FORMAT\n                        Container format to use. Default is RVZ. [iso|gcz|wia|rvz]\n  -s, --scrub           Scrub junk data as part of conversion.\n  -b BLOCK_SIZE, --block_size=BLOCK_SIZE\n                        Block size for GCZ/WIA/RVZ formats, as an integer.\n                        Suggested value for RVZ: 131072 (128 KiB)\n  -c COMPRESSION, --compression=COMPRESSION\n                        Compression method to use when converting to WIA/RVZ.\n                        Suggested value for RVZ: zstd [none|zstd|bzip|lzma|lzma2]\n  -l COMPRESSION_LEVEL, --compression_level=COMPRESSION_LEVEL\n                        Level of compression for the selected method. Ignored\n                        if 'none'. Suggested value for zstd: 5\n```\n\n```\nUsage: verify [options]...\n\nOptions:\n  -h, --help            show this help message and exit\n  -u USER, --user=USER  User folder path, required for temporary processing\n                        files.Will be automatically created if this option is\n                        not set.\n  -i FILE, --input=FILE\n                        Path to disc image FILE.\n  -a ALGORITHM, --algorithm=ALGORITHM\n                        Optional. Compute and print the digest using the\n                        selected algorithm, then exit. [crc32|md5|sha1|rchash]\n```\n\n```\nUsage: header [options]...\n\nOptions:\n  -h, --help            show this help message and exit\n  -i FILE, --input=FILE\n                        Path to disc image FILE.\n  -b, --block_size      Optional. Print the block size of GCZ/WIA/RVZ formats,\nthen exit.\n  -c, --compression     Optional. Print the compression method of GCZ/WIA/RVZ\n                        formats, then exit.\n  -l, --compression_level\n                        Optional. Print the level of compression for WIA/RVZ\n                        formats, then exit.\n```\n\n```\nUsage: extract [options]...\n\nOptions:\n  -h, --help            show this help message and exit\n  -i FILE, --input=FILE\n                        Path to disc image FILE.\n  -o FOLDER, --output=FOLDER\n                        Path to the destination FOLDER.\n  -p PARTITION, --partition=PARTITION\n                        Which specific partition you want to extract.\n  -s SINGLE, --single=SINGLE\n                        Which specific file/directory you want to extract.\n  -l, --list            List all files in volume/partition. Will print the\n                        directory/file specified with --single if defined.\n  -q, --quiet           Mute all messages except for errors.\n  -g, --gameonly        Only extracts the DATA partition.\n```\n"
        },
        {
          "name": "Source",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}