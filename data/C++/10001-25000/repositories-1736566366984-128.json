{
  "metadata": {
    "timestamp": 1736566366984,
    "page": 128,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ggerganov/ggml",
      "stars": 11515,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3662109375,
          "content": "# https://EditorConfig.org\n\n# Top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file, utf-8 charset\n[*]\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\ncharset = utf-8\nindent_style = space\nindent_size = 4\n\n[*.md]\nindent_size = 2\n\n[Makefile]\nindent_style = tab\n\n[prompts/*.txt]\ninsert_final_newline = unset\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2900390625,
          "content": "build/\nbuild-*/\nout/\ntmp/\nmodels/\nmodels-mnt\n\ncompile_commands.json\nCMakeSettings.json\n.vs/\n.vscode/\n.clangd\n\n.venv/\nggml_env/\n.exrc\n.cache\n.DS_Store\n.stablelm\n.gpt-2\n\nsrc/arm_neon.h\ntests/arm_neon.h\n\nzig-out/\nzig-cache/\n\n*.o\n*.d\n*.dot\n\n*.sw?\n\n__pycache__/\n\n# Model files\nggml-model-f16.bin\n*.bat\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.099609375,
          "content": "[submodule \"kompute\"]\n\tpath = src/ggml-kompute/kompute\n\turl = https://github.com/nomic-ai/kompute.git\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 12.5087890625,
          "content": "# date: Tue Dec  3 20:24:37 EET 2024\n# this file is auto-generated by scripts/gen-authors.sh\n\n0cc4m <picard12@live.de>\n65a <10104049+65a@users.noreply.github.com>\nAT <manyoso@users.noreply.github.com>\nAbhilash Majumder <30946547+abhilash1910@users.noreply.github.com>\nAdam Tazi <52357206+ad1tazi@users.noreply.github.com>\nAhmad Tameem <113388789+Tameem-10xE@users.noreply.github.com>\nAidanBeltonS <87009434+AidanBeltonS@users.noreply.github.com>\nAidanBeltonS <aidan.belton@codeplay.com>\nAkarshan Biswas <akarshan.biswas@gmail.com>\nAkarshan Biswas <akarshanbiswas@fedoraproject.org>\nAlbert Jin <albert.jin@gmail.com>\nAlberto Cabrera Pérez <alberto.cabrera@codeplay.com>\nAlberto Cabrera Pérez <alberto.cabrera@intel.com>\nAlex Azarov <alex@azarov.by>\nAlex O'Connell <35843486+acon96@users.noreply.github.com>\nAlex von Gluck IV <kallisti5@unixzen.com>\nAmbientL <107641468+AmbientL@users.noreply.github.com>\nAmirAli Mirian <37371367+amiralimi@users.noreply.github.com>\nAnanta Bastola <anantarajbastola@gmail.com>\nAndreas (Andi) Kunar <andreask@msn.com>\nAndrei <abetlen@gmail.com>\nAndrew Minh Nguyen <40281306+amqdn@users.noreply.github.com>\nArjun <ccldarjun@icloud.com>\nAshraful Islam <ashraful.meche@gmail.com>\nAstariul <43774355+astariul@users.noreply.github.com>\nAsukaMinato <asukaminato@nyan.eu.org>\nAvi Lumelsky <avilume@gmail.com>\nBart Pelle <3662930+Velocity-@users.noreply.github.com>\nBen Ashbaugh <ben.ashbaugh@intel.com>\nBorislav Stanimirov <b.stanimirov@abv.bg>\nBrad Ito <phlogisticfugu@users.noreply.github.com>\nBrad Murray <59848399+bradmurray-dt@users.noreply.github.com>\nBrian <mofosyne@gmail.com>\nBryan Lozano <b.lozano.havoc@gmail.com>\nCarolinabanana <140120812+Carolinabanana@users.noreply.github.com>\nCarterLi999 <664681047@qq.com>\nCebtenzzre <cebtenzzre@gmail.com>\nChangyeon Kim <cyzero.kim@samsung.com>\nCharles Xu <63788048+chaxu01@users.noreply.github.com>\nCharles Xu <charles.xu@arm.com>\nChen Xi <xi2.chen@intel.com>\nChen Xi <xixichen08@foxmail.com>\nChris Elrod <elrodc@gmail.com>\nClint Herron <hanclinto@gmail.com>\nConrad Kramer <conrad@conradkramer.com>\nCordeiro <1471463+ocordeiro@users.noreply.github.com>\nCristiano Calcagno <cristianoc@users.noreply.github.com>\nDAN™ <dranger003@gmail.com>\nDan Forbes <dan@danforbes.dev>\nDan Johansson <164997844+eddnjjn@users.noreply.github.com>\nDan Johansson <dan.johansson@arm.com>\nDaniel Bevenius <daniel.bevenius@gmail.com>\nDaniel Ziegenberg <daniel@ziegenberg.at>\nDaniele <57776841+daniandtheweb@users.noreply.github.com>\nDaulet Zhanguzin <daulet@users.noreply.github.com>\nDave <dave-fl@users.noreply.github.com>\nDave Airlie <airlied@gmail.com>\nDave Airlie <airlied@redhat.com>\nDavid Miller <david@patagona.ca>\nDavidKorczynski <david@adalogics.com>\nDavidson Francis <davidsondfgl@gmail.com>\nDibakar Gope <dibakar.gope@arm.com>\nDidzis Gosko <didzis@users.noreply.github.com>\nDiego Devesa <slarengh@gmail.com>\nDiogo <dgcruz983@gmail.com>\nDjip007 <djip.perois@free.fr>\nDou Xinpeng <15529241576@163.com>\nDou Xinpeng <81913537+Dou-Git@users.noreply.github.com>\nDr. Tom Murphy VII Ph.D <499244+tom7@users.noreply.github.com>\nEbey Abraham <ebey97@gmail.com>\nEldar Yusupov <eyusupov@gmail.com>\nEmmanuel Durand <emmanueldurand@protonmail.com>\nEngininja2 <139037756+Engininja2@users.noreply.github.com>\nEric Zhang <34133756+EZForever@users.noreply.github.com>\nErik Scholz <Green-Sky@users.noreply.github.com>\nEttore Di Giacinto <mudler@users.noreply.github.com>\nEve <139727413+netrunnereve@users.noreply.github.com>\nF1L1P <78918286+F1L1Pv2@users.noreply.github.com>\nFaisal Zaghloul <quic_fzaghlou@quicinc.com>\nFantasyGmm <16450052+FantasyGmm@users.noreply.github.com>\nFelix <stenbackfelix@gmail.com>\nFinn Voorhees <finnvoorhees@gmail.com>\nFirstTimeEZ <179362031+FirstTimeEZ@users.noreply.github.com>\nFrankie Robertson <frankier@users.noreply.github.com>\nGainLee <perfecter.gen@gmail.com>\nGeorge Hindle <george@georgehindle.com>\nGeorgi Gerganov <ggerganov@gmail.com>\nGilad S <7817232+giladgd@users.noreply.github.com>\nGilad S <giladgd@users.noreply.github.com>\nGuillaume Wenzek <gwenzek@users.noreply.github.com>\nHalalaluyafail3 <55773281+Halalaluyafail3@users.noreply.github.com>\nHerman Semenov <GermanAizek@yandex.ru>\nHirochika Matsumoto <git@hkmatsumoto.com>\nHong Bo PENG <penghb@cn.ibm.com>\nHugo Rosenkranz-Costa <hugo.rosenkranz@gmail.com>\nHyunsung Lee <ita9naiwa@gmail.com>\nIGUILIZ Salah-Eddine <76955987+salahiguiliz@users.noreply.github.com>\nIan Bull <irbull@eclipsesource.com>\nIkko Eltociear Ashimine <eltociear@gmail.com>\nIvan <nekotekina@gmail.com>\nIvan Filipov <159561759+vanaka11@users.noreply.github.com>\nIvan Stepanov <ivanstepanovftw@gmail.com>\nIvan Zdane <accounts@ivanzdane.com>\nJack Mousseau <jmousseau@users.noreply.github.com>\nJack Vial <vialjack@gmail.com>\nJacobLinCool <jacoblincool@gmail.com>\nJakob Frick <jakob.maria.frick@gmail.com>\nJan Ploski <jpl@plosquare.com>\nJared Van Bortel <jared@nomic.ai>\nJeff Bolz <jbolz@nvidia.com>\nJeffrey Quesnelle <jquesnelle@gmail.com>\nJeroen Mostert <jeroen.mostert@cm.com>\nJiahao Li <liplus17@163.com>\nJidongZhang-THU <1119708529@qq.com>\nJiří Podivín <66251151+jpodivin@users.noreply.github.com>\nJo Liss <joliss42@gmail.com>\nJoe Todd <joe.todd@codeplay.com>\nJohannes Gäßler <johannesg@5d6.de>\nJohn Balis <phobossystems@gmail.com>\nJosh Bleecher Snyder <josharian@gmail.com>\nJudd <foldl@users.noreply.github.com>\nJun Hee Yoo <contact.jhyoo@gmail.com>\nJustina Cho <justcho5@gmail.com>\nJustine Tunney <jtunney@gmail.com>\nJustine Tunney <jtunney@mozilla.com>\nKawrakow <48489457+ikawrakow@users.noreply.github.com>\nKevin Gibbons <bakkot@gmail.com>\nKonstantin Zhuravlyov <konstantin.zhuravlyov@amd.com>\nKylin <56434533+KyL0N@users.noreply.github.com>\nLoganDark <git@logandark.mozmail.com>\nLoganDark <github@logandark.mozmail.com>\nLostRuins <39025047+LostRuins@users.noreply.github.com>\nLukas Möller <mail@lukas-moeller.ch>\nM Refi D.A <24388107+refinism@users.noreply.github.com>\nM. Yusuf Sarıgöz <yusufsarigoz@gmail.com>\nMa Mingfei <mingfei.ma@intel.com>\nMahesh Madhav <67384846+heshpdx@users.noreply.github.com>\nMaiHD <maihd.dev@gmail.com>\nMark Zhuang <zhuangqiubin@gmail.com>\nMarkus Tavenrath <mtavenrath@users.noreply.github.com>\nMasaya, Kato <62578291+msy-kato@users.noreply.github.com>\nMathijs de Bruin <mathijs@mathijsfietst.nl>\nMatt Stephenson <mstephenson6@users.noreply.github.com>\nMax Krasnyansky <max.krasnyansky@gmail.com>\nMax Krasnyansky <quic_maxk@quicinc.com>\nMayank Kumar Pal <mynkpl1998@gmail.com>\nMeng, Hengyu <hengyu.meng@intel.com>\nMengqing Cao <cmq0113@163.com>\nMetal Whale <45712559+metalwhale@users.noreply.github.com>\nMichael Klimenko <mklimenko29@gmail.com>\nMichael Podvitskiy <podvitskiymichael@gmail.com>\nMichael Verrilli <msv@pobox.com>\nMolly Sophia <mollysophia379@gmail.com>\nNatsu <chino@hotococoa.moe>\nNeo Zhang <14088817+arthw@users.noreply.github.com>\nNeo Zhang Jianyu <jianyu.zhang@intel.com>\nNeuman Vong <neuman.vong@gmail.com>\nNevin <nevinpuri1901@gmail.com>\nNicholai Tukanov <nicholaitukanov@gmail.com>\nNico Bosshard <nico@bosshome.ch>\nNouamane Tazi <nouamane98@gmail.com>\nOlivier Chafik <ochafik@google.com>\nOlivier Chafik <ochafik@users.noreply.github.com>\nOndřej Čertík <ondrej@certik.us>\nOuadie EL FAROUKI <ouadie.elfarouki@codeplay.com>\nPAB <pierreantoine.bannier@gmail.com>\nPaul Tsochantaris <ptsochantaris@icloud.com>\nPhilpax <me@philpax.me>\nPierre Alexandre SCHEMBRI <pa.schembri@gmail.com>\nPlamen Minev <pacominev@gmail.com>\nPlaydev <josang1204@gmail.com>\nPrashant Vithule <119530321+Vithulep@users.noreply.github.com>\nPrzemysław Pawełczyk <przemoc@gmail.com>\nR0CKSTAR <xiaodong.ye@mthreads.com>\nR0CKSTAR <yeahdongcn@gmail.com>\nRadoslav Gerganov <rgerganov@gmail.com>\nRadosław Gryta <radek.gryta@gmail.com>\nRavindra Marella <marella@users.noreply.github.com>\nRay Cromwell <cromwellian@gmail.com>\nReinforce-II <fate@eastal.com>\nReza Rezvan <reza@rezvan.xyz>\nRick G <26732651+TheFlipbook@users.noreply.github.com>\nRiverZhou <riverzhou2000@gmail.com>\nRomain Biessy <romain.biessy@codeplay.com>\nRonsor <ronsor@ronsor.pw>\nRotem Dan <rotemdan@gmail.com>\nRyan Hitchman <hitchmanr@gmail.com>\nSRHMorris <69468379+SRHMorris@users.noreply.github.com>\nSXX <sxx1136965276@gmail.com>\nSalvatore Mesoraca <s.mesoraca16@gmail.com>\nSam Spilsbury <smspillaz@gmail.com>\nSanchit Gandhi <93869735+sanchit-gandhi@users.noreply.github.com>\nSanttu Keskinen <santtu.keskinen@gmail.com>\nSergio López <slp@redhat.com>\nSergio López <slp@sinrega.org>\nShijie <821898965@qq.com>\nShupei Fan <dymarkfan@outlook.com>\nSiddharth Ramakrishnan <srr2141@columbia.edu>\nSigbjørn Skjæret <sigbjorn.skjaeret@scala.com>\nSkyler Celestinian-Sterling <80314197+Celestinian@users.noreply.github.com>\nSlava Primenko <primenko.s@gmail.com>\nSrihari-mcw <96763064+Srihari-mcw@users.noreply.github.com>\nSteward Garcia <57494570+FSSRepo@users.noreply.github.com>\nSupreet Sethi <supreet.sethi@gmail.com>\nTakuya Takeuchi <takuya.takeuchi.dev@gmail.com>\nTamotsu Takahashi <ttakah+github@gmail.com>\nTanmay <tnmysachan@gmail.com>\nTanmay Sachan <tnmysachan@gmail.com>\nTimothy Cronin <40186632+4imothy@users.noreply.github.com>\nTom Bailey <tombailey@users.noreply.github.com>\nTom Jobbins <784313+TheBloke@users.noreply.github.com>\nTony Wasserka <4840017+neobrain@users.noreply.github.com>\nTristan Druyen <tristan@vault81.mozmail.com>\nTyé singwa <92231658+tye-singwa@users.noreply.github.com>\nUEXTM.com <84163508+uextm@users.noreply.github.com>\nWillCorticesAI <150854901+WillCorticesAI@users.noreply.github.com>\nWilliam Tambellini <william.tambellini@gmail.com>\nWilliam Tambellini <wtambellini@sdl.com>\nXiaotaoChen <chenxiaotao1234@gmail.com>\nXinpeng Dou <81913537+Dou-Git@users.noreply.github.com>\nXuan Son Nguyen <thichthat@gmail.com>\nYavor Ivanov <yivanov@viewray.com>\nYavorGIvanov <yivanov@viewray.com>\nYilong Guo <vfirst218@gmail.com>\nYilong Guo <yilong.guo@intel.com>\nYuri Khrustalev <ykhrustalev@users.noreply.github.com>\nZhenwei Jin <109658203+kylo5aby@users.noreply.github.com>\nZhiyuan Li <lizhiyuan@uniartisan.com>\nagray3 <agray3@users.noreply.github.com>\namritahs-ibm <amritahs@linux.vnet.ibm.com>\napcameron <37645737+apcameron@users.noreply.github.com>\nappvoid <78444142+appvoid@users.noreply.github.com>\nariez-xyz <41232910+ariez-xyz@users.noreply.github.com>\nautomaticcat <daogiatuank54@gmail.com>\nbandoti <141645996+bandoti@users.noreply.github.com>\nbmwl <brian.marshall@tolko.com>\nbobqianic <129547291+bobqianic@users.noreply.github.com>\nbssrdf <merlintiger@hotmail.com>\nchengchi <davesjoewang@gmail.com>\ncompilade <113953597+compilade@users.noreply.github.com>\ncompilade <git@compilade.net>\nddpasa <112642920+ddpasa@users.noreply.github.com>\ndenersc <denerstassun@gmail.com>\ndscripka <dscripka@users.noreply.github.com>\nfitzsim <fitzsim@fitzsim.org>\nfraxy-v <65565042+fraxy-v@users.noreply.github.com>\ngoerch <jhr.walter@t-online.de>\ngoldwaving <77494627+goldwaving@users.noreply.github.com>\nhidenorly <hidenorly@users.noreply.github.com>\nhipudding <huafengchun@gmail.com>\nhydai <z54981220@gmail.com>\njaeminSon <woalsdnd@gmail.com>\njdomke <28772296+jdomke@users.noreply.github.com>\njiez <373447296@qq.com>\njohnson442 <56517414+johnson442@users.noreply.github.com>\njunchao-loongson <68935141+junchao-loongson@users.noreply.github.com>\nk.h.lai <adrian.k.h.lai@outlook.com>\nkatsu560 <118887472+katsu560@users.noreply.github.com>\nklosax <131523366+klosax@users.noreply.github.com>\nkunnis <kunnis@users.noreply.github.com>\nl3utterfly <gc.pthzfoldr@gmail.com>\nle.chang <cljs118@126.com>\nleejet <31925346+leejet@users.noreply.github.com>\nleejet <leejet714@gmail.com>\nleo-pony <nengjunma@outlook.com>\nliuwei-git <14815172+liuwei-git@users.noreply.github.com>\nluoyu-intel <yu.luo@intel.com>\nmagicse <magicse@users.noreply.github.com>\nmahorozte <41834471+mahorozte@users.noreply.github.com>\nmashizora <30516315+mashizora@users.noreply.github.com>\nmatteo <matteogeniaccio@yahoo.it>\nochafik <ochafik@google.com>\notaGran <ujt2h8@gmail.com>\npengxin99 <pengxin.yuan@intel.com>\npikalover6 <49179590+pikalover6@users.noreply.github.com>\npostmasters <namnguyen@google.com>\nsjinzh <sjinzh@gmail.com>\nskirodev <57715494+skirodev@users.noreply.github.com>\nslaren <slarengh@gmail.com>\nsnadampal <87143774+snadampal@users.noreply.github.com>\ntaher <8665427+nullhook@users.noreply.github.com>\ntexmex76 <40733439+texmex76@users.noreply.github.com>\nthe-crypt-keeper <84680712+the-crypt-keeper@users.noreply.github.com>\nthewh1teagle <61390950+thewh1teagle@users.noreply.github.com>\nucag.li <ucag@qq.com>\nulatekh <ulatekh@yahoo.com>\nwangshuai09 <391746016@qq.com>\nwoachk <24752637+woachk@users.noreply.github.com>\nxctan <axunlei@gmail.com>\nyangyaofei <yangyaofei@gmail.com>\nyuri@FreeBSD <yuri@FreeBSD>\nzhentaoyu <zhentao.yu@intel.com>\nzhouwg <6889919+zhouwg@users.noreply.github.com>\nzhouwg <zhouwg2000@gmail.com>\n布客飞龙 <562826179@qq.com>\n旺旺碎冰冰 <38837039+Cyberhan123@users.noreply.github.com>\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.447265625,
          "content": "cmake_minimum_required(VERSION 3.14) # for add_link_options and implicit target directories.\nproject(\"ggml\" C CXX)\ninclude(CheckIncludeFileCXX)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nif (NOT XCODE AND NOT MSVC AND NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\n\nif (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n    set(GGML_STANDALONE ON)\n\n    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\n    # configure project version\n    # TODO\nelse()\n    set(GGML_STANDALONE OFF)\nendif()\n\nif (EMSCRIPTEN)\n    set(BUILD_SHARED_LIBS_DEFAULT OFF)\n\n    option(GGML_WASM_SINGLE_FILE \"ggml: embed WASM inside the generated ggml.js\" ON)\nelse()\n    if (MINGW)\n        set(BUILD_SHARED_LIBS_DEFAULT OFF)\n    else()\n        set(BUILD_SHARED_LIBS_DEFAULT ON)\n    endif()\nendif()\n\n# remove the lib prefix on win32 mingw\nif (WIN32)\n    set(CMAKE_STATIC_LIBRARY_PREFIX \"\")\n    set(CMAKE_SHARED_LIBRARY_PREFIX \"\")\n    set(CMAKE_SHARED_MODULE_PREFIX  \"\")\nendif()\n\noption(BUILD_SHARED_LIBS \"ggml: build shared libraries\" ${BUILD_SHARED_LIBS_DEFAULT})\noption(GGML_BACKEND_DL   \"ggml: build backends as dynamic libraries (requires BUILD_SHARED_LIBS)\" OFF)\n\n#\n# option list\n#\n\n# TODO: mark all options as advanced when not GGML_STANDALONE\n\nif (APPLE)\n    set(GGML_METAL_DEFAULT ON)\n    set(GGML_BLAS_DEFAULT ON)\n    set(GGML_BLAS_VENDOR_DEFAULT \"Apple\")\nelse()\n    set(GGML_METAL_DEFAULT OFF)\n    set(GGML_BLAS_DEFAULT OFF)\n    set(GGML_BLAS_VENDOR_DEFAULT \"Generic\")\nendif()\n\nif (CMAKE_CROSSCOMPILING)\n    set(GGML_NATIVE_DEFAULT OFF)\nelse()\n    set(GGML_NATIVE_DEFAULT ON)\nendif()\n\n# defaults\nif (NOT GGML_LLAMAFILE_DEFAULT)\n    set(GGML_LLAMAFILE_DEFAULT OFF)\nendif()\n\nif (NOT GGML_CUDA_GRAPHS_DEFAULT)\n    set(GGML_CUDA_GRAPHS_DEFAULT OFF)\nendif()\n\n# general\noption(GGML_STATIC \"ggml: static link libraries\"                     OFF)\noption(GGML_NATIVE \"ggml: optimize the build for the current system\" ${GGML_NATIVE_DEFAULT})\noption(GGML_LTO    \"ggml: enable link time optimization\"             OFF)\noption(GGML_CCACHE \"ggml: use ccache if available\"                   ON)\n\n# debug\noption(GGML_ALL_WARNINGS           \"ggml: enable all compiler warnings\"                   ON)\noption(GGML_ALL_WARNINGS_3RD_PARTY \"ggml: enable all compiler warnings in 3rd party libs\" OFF)\noption(GGML_GPROF                  \"ggml: enable gprof\"                                   OFF)\n\n# build\noption(GGML_FATAL_WARNINGS    \"ggml: enable -Werror flag\"    OFF)\n\n# sanitizers\noption(GGML_SANITIZE_THREAD    \"ggml: enable thread sanitizer\"    OFF)\noption(GGML_SANITIZE_ADDRESS   \"ggml: enable address sanitizer\"   OFF)\noption(GGML_SANITIZE_UNDEFINED \"ggml: enable undefined sanitizer\" OFF)\n\n# instruction set specific\nif (GGML_NATIVE OR NOT GGML_NATIVE_DEFAULT)\n    set(INS_ENB OFF)\nelse()\n    set(INS_ENB ON)\nendif()\n\noption(GGML_CPU_HBM          \"ggml: use memkind for CPU HBM\" OFF)\noption(GGML_CPU_AARCH64      \"ggml: use runtime weight conversion of Q4_0 to Q4_X_X\" ON)\noption(GGML_AVX              \"ggml: enable AVX\"              ${INS_ENB})\noption(GGML_AVX_VNNI         \"ggml: enable AVX-VNNI\"         OFF)\noption(GGML_AVX2             \"ggml: enable AVX2\"             ${INS_ENB})\noption(GGML_AVX512           \"ggml: enable AVX512F\"          OFF)\noption(GGML_AVX512_VBMI      \"ggml: enable AVX512-VBMI\"      OFF)\noption(GGML_AVX512_VNNI      \"ggml: enable AVX512-VNNI\"      OFF)\noption(GGML_AVX512_BF16      \"ggml: enable AVX512-BF16\"      OFF)\nif (NOT MSVC)\n    # in MSVC F16C and FMA is implied with AVX2/AVX512\n    option(GGML_FMA          \"ggml: enable FMA\"              ${INS_ENB})\n    option(GGML_F16C         \"ggml: enable F16C\"             ${INS_ENB})\n    # MSVC does not seem to support AMX\n    option(GGML_AMX_TILE     \"ggml: enable AMX-TILE\"         OFF)\n    option(GGML_AMX_INT8     \"ggml: enable AMX-INT8\"         OFF)\n    option(GGML_AMX_BF16     \"ggml: enable AMX-BF16\"         OFF)\nendif()\noption(GGML_LASX             \"ggml: enable lasx\"             ON)\noption(GGML_LSX              \"ggml: enable lsx\"              ON)\noption(GGML_RVV              \"ggml: enable rvv\"              ON)\n\noption(GGML_CPU_ALL_VARIANTS \"ggml: build all variants of the CPU backend (requires GGML_BACKEND_DL)\" OFF)\nset(GGML_CPU_ARM_ARCH \"\" CACHE STRING \"ggml: CPU architecture for ARM\")\n\n\nif (WIN32)\n    set(GGML_WIN_VER \"0x602\" CACHE STRING   \"ggml: Windows version\")\nendif()\n\n# ggml core\nset(GGML_SCHED_MAX_COPIES  \"4\" CACHE STRING \"ggml: max input copies for pipeline parallelism\")\noption(GGML_CPU                             \"ggml: enable CPU backend\"                        ON)\n\n# 3rd party libs / backends\noption(GGML_ACCELERATE                      \"ggml: enable Accelerate framework\"               ON)\noption(GGML_BLAS                            \"ggml: use BLAS\"                                  ${GGML_BLAS_DEFAULT})\nset(GGML_BLAS_VENDOR ${GGML_BLAS_VENDOR_DEFAULT} CACHE STRING\n                                            \"ggml: BLAS library vendor\")\noption(GGML_LLAMAFILE                       \"ggml: use LLAMAFILE\"                             ${GGML_LLAMAFILE_DEFAULT})\n\noption(GGML_CUDA                            \"ggml: use CUDA\"                                  OFF)\noption(GGML_MUSA                            \"ggml: use MUSA\"                                  OFF)\noption(GGML_CUDA_FORCE_MMQ                  \"ggml: use mmq kernels instead of cuBLAS\"         OFF)\noption(GGML_CUDA_FORCE_CUBLAS               \"ggml: always use cuBLAS instead of mmq kernels\"  OFF)\noption(GGML_CUDA_F16                        \"ggml: use 16 bit floats for some calculations\"   OFF)\nset   (GGML_CUDA_PEER_MAX_BATCH_SIZE \"128\" CACHE STRING\n                                            \"ggml: max. batch size for using peer access\")\noption(GGML_CUDA_NO_PEER_COPY               \"ggml: do not use peer to peer copies\"            OFF)\noption(GGML_CUDA_NO_VMM                     \"ggml: do not try to use CUDA VMM\"                OFF)\noption(GGML_CUDA_FA_ALL_QUANTS              \"ggml: compile all quants for FlashAttention\"     OFF)\noption(GGML_CUDA_GRAPHS                     \"ggml: use CUDA graphs (llama.cpp only)\"          ${GGML_CUDA_GRAPHS_DEFAULT})\n\noption(GGML_HIP                             \"ggml: use HIP\"                                   OFF)\noption(GGML_HIP_UMA                         \"ggml: use HIP unified memory architecture\"       OFF)\noption(GGML_VULKAN                          \"ggml: use Vulkan\"                                OFF)\noption(GGML_VULKAN_CHECK_RESULTS            \"ggml: run Vulkan op checks\"                      OFF)\noption(GGML_VULKAN_DEBUG                    \"ggml: enable Vulkan debug output\"                OFF)\noption(GGML_VULKAN_MEMORY_DEBUG             \"ggml: enable Vulkan memory debug output\"         OFF)\noption(GGML_VULKAN_SHADER_DEBUG_INFO        \"ggml: enable Vulkan shader debug info\"           OFF)\noption(GGML_VULKAN_PERF                     \"ggml: enable Vulkan perf output\"                 OFF)\noption(GGML_VULKAN_VALIDATE                 \"ggml: enable Vulkan validation\"                  OFF)\noption(GGML_VULKAN_RUN_TESTS                \"ggml: run Vulkan tests\"                          OFF)\noption(GGML_KOMPUTE                         \"ggml: use Kompute\"                               OFF)\noption(GGML_METAL                           \"ggml: use Metal\"                                 ${GGML_METAL_DEFAULT})\noption(GGML_METAL_USE_BF16                  \"ggml: use bfloat if available\"                   OFF)\noption(GGML_METAL_NDEBUG                    \"ggml: disable Metal debugging\"                   OFF)\noption(GGML_METAL_SHADER_DEBUG              \"ggml: compile Metal with -fno-fast-math\"         OFF)\noption(GGML_METAL_EMBED_LIBRARY             \"ggml: embed Metal library\"                       ${GGML_METAL})\nset   (GGML_METAL_MACOSX_VERSION_MIN \"\" CACHE STRING\n                                            \"ggml: metal minimum macOS version\")\nset   (GGML_METAL_STD \"\" CACHE STRING       \"ggml: metal standard version (-std flag)\")\noption(GGML_OPENMP                          \"ggml: use OpenMP\"                                ON)\noption(GGML_RPC                             \"ggml: use RPC\"                                   OFF)\noption(GGML_SYCL                            \"ggml: use SYCL\"                                  OFF)\noption(GGML_SYCL_F16                        \"ggml: use 16 bit floats for sycl calculations\"   OFF)\nset   (GGML_SYCL_TARGET \"INTEL\" CACHE STRING\n                                            \"ggml: sycl target device\")\nset   (GGML_SYCL_DEVICE_ARCH \"\" CACHE STRING\n                                            \"ggml: sycl device architecture\")\n\noption(GGML_OPENCL                          \"ggml: use OpenCL\"                                OFF)\noption(GGML_OPENCL_PROFILING                \"ggml: use OpenCL profiling (increases overhead)\" OFF)\noption(GGML_OPENCL_EMBED_KERNELS            \"ggml: embed kernels\"                             ON)\noption(GGML_OPENCL_USE_ADRENO_KERNELS       \"ggml: use optimized kernels for Adreno\"          ON)\n\n# extra artifacts\noption(GGML_BUILD_TESTS    \"ggml: build tests\"    ${GGML_STANDALONE})\noption(GGML_BUILD_EXAMPLES \"ggml: build examples\" ${GGML_STANDALONE})\n\n#\n# dependencies\n#\n\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_C_STANDARD_REQUIRED true)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED true)\n\nset(THREADS_PREFER_PTHREAD_FLAG ON)\n\nfind_package(Threads REQUIRED)\n\n#\n# build the library\n#\n\nadd_subdirectory(src)\n\n#\n# tests and examples\n#\n\nif (GGML_BUILD_TESTS)\n    enable_testing()\n    add_subdirectory(tests)\nendif ()\n\nif (GGML_BUILD_EXAMPLES)\n    add_subdirectory(examples)\nendif ()\n\n#\n# install\n#\n\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\n\n# all public headers\nset(GGML_PUBLIC_HEADERS\n    include/ggml.h\n    include/ggml-cpu.h\n    include/ggml-alloc.h\n    include/ggml-backend.h\n    include/ggml-blas.h\n    include/ggml-cann.h\n    include/ggml-cuda.h\n    include/ggml-kompute.h\n    include/ggml-opt.h\n    include/ggml-metal.h\n    include/ggml-rpc.h\n    include/ggml-sycl.h\n    include/ggml-vulkan.h)\n\nset_target_properties(ggml PROPERTIES PUBLIC_HEADER \"${GGML_PUBLIC_HEADERS}\")\n#if (GGML_METAL)\n#    set_target_properties(ggml PROPERTIES RESOURCE \"${CMAKE_CURRENT_SOURCE_DIR}/src/ggml-metal.metal\")\n#endif()\ninstall(TARGETS ggml LIBRARY PUBLIC_HEADER)\ninstall(TARGETS ggml-base LIBRARY)\n\nif (GGML_STANDALONE)\n    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/ggml.pc.in\n        ${CMAKE_CURRENT_BINARY_DIR}/ggml.pc\n        @ONLY)\n\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/ggml.pc\n        DESTINATION share/pkgconfig)\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "MIT License\n\nCopyright (c) 2023-2024 The ggml authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Package.swift",
          "type": "blob",
          "size": 1.486328125,
          "content": "// swift-tools-version: 5.5\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"ggml\",\n    platforms: [\n        .macOS(.v12),\n        .iOS(.v14),\n        .watchOS(.v4),\n        .tvOS(.v14)\n    ],\n    products: [\n        .library(name: \"ggml\", targets: [\"ggml\"]),\n    ],\n    targets: [\n        .target(\n            name: \"ggml\",\n            path: \".\",\n            exclude: [],\n            sources: [\n                \"src/ggml.c\",\n                \"src/ggml-alloc.c\",\n                \"src/ggml-backend.cpp\",\n                \"src/ggml-quants.c\",\n                \"src/ggml-metal.m\",\n            ],\n            resources: [\n                .process(\"src/ggml-metal.metal\")\n            ],\n            publicHeadersPath: \"spm-headers\",\n            cSettings: [\n                .unsafeFlags([\"-Wno-shorten-64-to-32\", \"-O3\", \"-DNDEBUG\"]),\n                .define(\"GGML_USE_ACCELERATE\"),\n                .unsafeFlags([\"-fno-objc-arc\"]),\n                .define(\"GGML_USE_METAL\"),\n                // NOTE: NEW_LAPACK will required iOS version 16.4+\n                // We should consider add this in the future when we drop support for iOS 14\n                // (ref: ref: https://developer.apple.com/documentation/accelerate/1513264-cblas_sgemm?language=objc)\n                // .define(\"ACCELERATE_NEW_LAPACK\"),\n                // .define(\"ACCELERATE_LAPACK_ILP64\")\n            ],\n            linkerSettings: [\n                .linkedFramework(\"Accelerate\")\n            ]\n        )\n    ],\n    cxxLanguageStandard: .cxx11\n)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.8759765625,
          "content": "# ggml\n\n[Roadmap](https://github.com/users/ggerganov/projects/7) / [Manifesto](https://github.com/ggerganov/llama.cpp/discussions/205)\n\nTensor library for machine learning\n\n***Note that this project is under active development. \\\nSome of the development is currently happening in the [llama.cpp](https://github.com/ggerganov/llama.cpp) and [whisper.cpp](https://github.com/ggerganov/whisper.cpp) repos***\n\n## Features\n\n- Low-level cross-platform implementation\n- Integer quantization support\n- Broad hardware support\n- Automatic differentiation\n- ADAM and L-BFGS optimizers\n- No third-party dependencies\n- Zero memory allocations during runtime\n\n## Build\n\n```bash\ngit clone https://github.com/ggerganov/ggml\ncd ggml\n\n# install python dependencies in a virtual environment\npython3.10 -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n\n# build the examples\nmkdir build && cd build\ncmake ..\ncmake --build . --config Release -j 8\n```\n\n## GPT inference (example)\n\n```bash\n# run the GPT-2 small 117M model\n../examples/gpt-2/download-ggml-model.sh 117M\n./bin/gpt-2-backend -m models/gpt-2-117M/ggml-model.bin -p \"This is an example\"\n```\n\nFor more information, checkout the corresponding programs in the [examples](examples) folder.\n\n## Using CUDA\n\n```bash\n# fix the path to point to your CUDA compiler\ncmake -DGGML_CUDA=ON -DCMAKE_CUDA_COMPILER=/usr/local/cuda-12.1/bin/nvcc ..\n```\n\n## Using hipBLAS\n\n```bash\ncmake -DCMAKE_C_COMPILER=\"$(hipconfig -l)/clang\" -DCMAKE_CXX_COMPILER=\"$(hipconfig -l)/clang++\" -DGGML_HIP=ON\n```\n\n## Using SYCL\n\n```bash\n# linux\nsource /opt/intel/oneapi/setvars.sh\ncmake -G \"Ninja\" -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icpx -DGGML_SYCL=ON ..\n\n# windows\n\"C:\\Program Files (x86)\\Intel\\oneAPI\\setvars.bat\"\ncmake -G \"Ninja\" -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=icx -DGGML_SYCL=ON ..\n```\n\n## Compiling for Android\n\nDownload and unzip the NDK from this download [page](https://developer.android.com/ndk/downloads). Set the NDK_ROOT_PATH environment variable or provide the absolute path to the CMAKE_ANDROID_NDK in the command below.\n\n```bash\ncmake .. \\\n   -DCMAKE_SYSTEM_NAME=Android \\\n   -DCMAKE_SYSTEM_VERSION=33 \\\n   -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a \\\n   -DCMAKE_ANDROID_NDK=$NDK_ROOT_PATH\n   -DCMAKE_ANDROID_STL_TYPE=c++_shared\n```\n\n```bash\n# create directories\nadb shell 'mkdir /data/local/tmp/bin'\nadb shell 'mkdir /data/local/tmp/models'\n\n# push the compiled binaries to the folder\nadb push bin/* /data/local/tmp/bin/\n\n# push the ggml library\nadb push src/libggml.so /data/local/tmp/\n\n# push model files\nadb push models/gpt-2-117M/ggml-model.bin /data/local/tmp/models/\n\nadb shell\ncd /data/local/tmp\nexport LD_LIBRARY_PATH=/data/local/tmp\n./bin/gpt-2-backend -m models/ggml-model.bin -p \"this is an example\"\n```\n\n## Resources\n\n- [Introduction to ggml](https://huggingface.co/blog/introduction-to-ggml)\n- [The GGUF file format](https://github.com/ggerganov/ggml/blob/master/docs/gguf.md)\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "ggml.pc.in",
          "type": "blob",
          "size": 0.2353515625,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}\nincludedir=${prefix}/include\nlibdir=${prefix}/lib\n\nName: ggml\nDescription: The GGML Tensor Library for Machine Learning\nVersion: 0.0.0\nCflags: -I${includedir}/ggml\nLibs: -L${libdir} -lggml\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.2099609375,
          "content": "accelerate==0.19.0\nnumpy>=2.0.2\nsentencepiece~=0.1.98\ntorchvision>=0.15.2\ntransformers>=4.35.2,<5.0.0\ngguf>=0.1.0\nkeras==3.5.0\ntensorflow==2.18.0\n\n--extra-index-url https://download.pytorch.org/whl/cpu\ntorch~=2.5.1\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "spm-headers",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}