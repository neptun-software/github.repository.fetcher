{
  "metadata": {
    "timestamp": 1736566341714,
    "page": 94,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hoffstadt/DearPyGui",
      "stars": 13566,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.6494140625,
          "content": "*.py   text diff=python\n*.pyi  text diff=python\n*.c    text diff=c\n*.cpp  text diff=cpp\n*.hpp  text diff=cpp\n*.h    text diff=c\n*.m    text diff=objc\n*.mm   text\n*.bat  text\n*.md   text\n*.txt  text\n*.html text\n*.sh   text eol=lf\n*.yml  text\n*.ttf  binary\n*.png  binary\n*.jpg  binary\n*.jpeg binary\n*.gif  binary\n*.tif  binary\n*.tiff binary\n*.ico  binary\n\n.gitattributes export-ignore\n.gitignore     export-ignore\n\n# generated code\ndearpygui/dearpygui.py      linguist-generated\ndearpygui/_dearpygui.pyi    linguist-generated\ndearpygui/_dearpygui_RTD.py linguist-generated\n\n# vendored code\nthirdparty/* linguist-vendored\n\n# documentation\ndocs/* linguist-documentation"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3076171875,
          "content": ".idea/\n.vs/\n.vscode/\nout/\ncmake-build-debug/\ncmake-build-release/\ncmake-build-local/\noutput/\ndist/\n.DS_Store\n__pycache__/\nlib_location.txt\nversion_number.txt\ndearpygui.egg-info/\nbuild/\n# Ignore only subdirectories\nsandbox/*/\nsrc/CMakeFiles/\nthirdparty/CMakeFiles/\nthirdparty/Makefile\nthirdparty/cmake_install.cmake\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.5595703125,
          "content": "[submodule \"thirdparty/imgui\"]\n\tpath = thirdparty/imgui\n\turl = https://github.com/ocornut/imgui\n\tbranch = docking\n[submodule \"thirdparty/implot\"]\n\tpath = thirdparty/implot\n\turl = https://github.com/epezent/implot\n\tbranch = master\n[submodule \"thirdparty/cpython\"]\n\tpath = thirdparty/cpython\n\turl = https://github.com/python/cpython\n\tbranch = master\n[submodule \"thirdparty/glfw\"]\n\tpath = thirdparty/glfw\n\turl = https://github.com/glfw/glfw\n\tbranch = master\n[submodule \"thirdparty/freetype\"]\n\tpath = thirdparty/freetype\n\turl = https://gitlab.freedesktop.org/freetype/freetype\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.4599609375,
          "content": "# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.8\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n\n# Optionally build your docs in additional formats such as PDF and ePub\nformats: all\n\npython:\n  install:\n    - requirements: docs/requirements.txt\n    - method: pip\n      path: .\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.4345703125,
          "content": "﻿cmake_minimum_required (VERSION 3.13)\n\nproject (\"DearPyGui\")\n\nif(WIN32)\n    add_definitions(-DIMGUI_USER_CONFIG=\"mvImGuiConfig.h\")\n    add_definitions(-DMV_PLATFORM=\"windows\")\nelseif(APPLE)\n    add_definitions(-DIMGUI_USER_CONFIG=\"mvImGuiLinuxConfig.h\")\n    add_definitions(-DMV_PLATFORM=\"apple\")\nelse() # Linux\n\tadd_definitions(-DIMGUI_USER_CONFIG=\"mvImGuiLinuxConfig.h\")\n    add_definitions(-DMV_PLATFORM=\"linux\")\nendif()\n\nif(WIN32)\nelse() # Linux\n\tadd_definitions(-DCUSTOM_IMGUIFILEDIALOG_CONFIG=\"ImGuiFileDialogConfigUnix.h\")\nendif()\n\n# various settings\nadd_definitions(\n    -D_CRT_SECURE_NO_WARNINGS \n    -D_USE_MATH_DEFINES)\n\nset(MV_PY_VERSION ${MV_PY_VERSION})\nset(MVDPG_VERSION ${MVDPG_VERSION})\nadd_definitions(-DMV_DPG_MAJOR_VERSION=1)\nadd_definitions(-DMV_DPG_MINOR_VERSION=0)\nif(MVDPG_VERSION)\n    add_definitions(-DMV_SANDBOX_VERSION=\"${MVDPG_VERSION}\")\nelse()\n    add_definitions(-DMV_SANDBOX_VERSION=\"master\")\nendif()\n\n# when set to \"ON\", the embedded version\n# will be the only version build (no sandbox builds)\nset(MVDIST_ONLY ${MVDIST_ONLY})\nif(MVDIST_ONLY)\n    add_definitions(-DMVDIST_ONLY)\nelse()\n    add_definitions(-DMV_LOG)\nendif()\n\n# runs python tests\nset(MV_TESTS_ONLY ${MV_TESTS_ONLY})\nif(MV_TESTS_ONLY)\n    add_definitions(-DMV_TESTS_ONLY)\nendif()\n\nadd_subdirectory(\"thirdparty\")\n\n# if this is not a distribution build\n# build development environment\nif(NOT MVDIST_ONLY)\n    add_subdirectory (\"sandbox\")\nendif()\n\nadd_subdirectory (\"src\")\n"
        },
        {
          "name": "CMakeSettings.json",
          "type": "blob",
          "size": 0.7353515625,
          "content": "﻿{\n  \"configurations\": [\n    {\n      \"name\": \"x64-Debug\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Debug\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ],\n      \"buildRoot\": \"${projectDir}\\\\cmake-build-debug\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\"\n    },\n    {\n      \"name\": \"x64-Release\",\n      \"generator\": \"Ninja\",\n      \"configurationType\": \"Release\",\n      \"buildRoot\": \"${projectDir}\\\\cmake-build-release\",\n      \"installRoot\": \"${projectDir}\\\\out\\\\install\\\\${name}\",\n      \"cmakeCommandArgs\": \"\",\n      \"buildCommandArgs\": \"\",\n      \"ctestCommandArgs\": \"\",\n      \"inheritEnvironments\": [ \"msvc_x64_x64\" ]\n    }\n  ]\n}"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2025 Dear PyGui, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.2763671875,
          "content": "<h1 align=\"center\">\n  <br>\n  <a href=\"https://github.com/hoffstadt/DearPyGui\"><img src=\"https://raw.githubusercontent.com/hoffstadt/DearPyGui/assets/readme/dpg_logo_button.png\" alt=\"Dear PyGui logo\"></a>\n</h1>\n\n<h4 align=\"center\">A modern, fast and powerful GUI framework for Python</h4>\n\n<h1></h1>\n\n<p align=\"center\">\n  <a href=\"\"><img src=\"https://img.shields.io/pypi/pyversions/dearpygui\" alt=\"Python versions\"></a>\n  <a href=\"https://pypi.org/project/dearpygui/\"><img src=\"https://img.shields.io/pypi/v/dearpygui\" alt=\"PYPI\"></a>\n  <a href=\"https://pepy.tech/project/dearpygui\"><img src=\"https://pepy.tech/badge/dearpygui\" alt=\"Downloads\"></a>\n  <a href=\"#license\"><img src=\"https://github.com/hoffstadt/DearPyGui/blob/assets/readme/mit_badge.svg\" alt=\"MIT License\"></a>\n</p>\n\n<p align=\"center\">\n   <a href=\"https://github.com/hoffstadt/DearPyGui/actions?workflow=Embedded%20Build\"><img src=\"https://github.com/hoffstadt/DearPyGui/workflows/Embedded%20Build/badge.svg?branch=master\" alt=\"static-analysis\"></a>\n   <a href=\"https://github.com/hoffstadt/DearPyGui/actions?workflow=Static%20Analysis\"><img src=\"https://github.com/hoffstadt/DearPyGui/workflows/Static%20Analysis/badge.svg?branch=master\" alt=\"static-analysis\"></a>\n   <a href=\"https://github.com/hoffstadt/DearPyGui/actions/workflows/Deployment.yml\"><img src=\"https://github.com/hoffstadt/DearPyGui/actions/workflows/Deployment.yml/badge.svg?branch=master\" alt=\"Deployment\"></a>\n   <a href=\"https://dearpygui.readthedocs.io/en/latest/?badge=latest\"><img src=\"https://readthedocs.org/projects/dearpygui/badge/?version=latest\" alt=\"Documentation Status\"></a>\n</p>\n\n<h1></h1>\n\n<p align=\"center\">\n  <a href=\"#features\">Features</a> •\n  <a href=\"#installation\">Installation</a> •\n  <a href=\"#how-to-use\">How To Use</a> • \n  <a href=\"#demo\">Demo</a> •\n  <a href=\"#resources\">Resources</a> •\n  <a href=\"#support\">Support</a> •\n  <a href=\"#tech-stack\">Tech stack</a> •\n  <a href=\"#credits\">Credits</a> •\n  <a href=\"#license\">License</a> •\n  <a href=\"#gallery\">Gallery</a>\n</p>\n\n<h1></h1>\n\n<BR>![Themes](https://raw.githubusercontent.com/hoffstadt/DearPyGui/assets/linuxthemes.PNG) \n  \n## Features  \n- **Modern look** — Complete theme and style control\n- **Great performance** —  GPU-based rendering and efficient C/C++ code\n- **Stable operation** —  Asynchronous function support\n- **Fast graphs** — Display over 1 million datapoints at 60 fps, zoom and pan\n- **Node editor** — Intuitive user interaction\n- **Built-in demo** — Quickly learn all features\n- **Developer tools** — Theme and resource inspection, runtime metrics, debugger\n- **Cross-platform** — Windows, Linux, MacOS\n- **MIT license**\n\n<h1></h1>\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/wiki/epezent/implot/screenshots3/stem.gif\" width=\"380\">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;<img src=\"https://raw.githubusercontent.com/wiki/epezent/implot/screenshots3/tables.gif\" width=\"380\">\n</p>\n<h1></h1>\n\n<h1></h1>\n<p align=\"center\"> \n<img src=\"https://raw.githubusercontent.com/wiki/epezent/implot/screenshots3/pie.gif\" width=\"380\">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;<img src=\"https://raw.githubusercontent.com/wiki/epezent/implot/screenshots3/candle.gif\" width=\"380\"> \n</p>\n<h1></h1>\n  \n## Installation\n\nEnsure you have at least Python 3.8 64bit.\n ```\n pip install dearpygui\n or\n pip3 install dearpygui\n ```\n \n## How to use?\n \nUsing Dear PyGui is as simple as the following Python script.\n  \n```Python\nimport dearpygui.dearpygui as dpg\n\ndef save_callback():\n    print(\"Save Clicked\")\n\ndpg.create_context()\ndpg.create_viewport()\ndpg.setup_dearpygui()\n\nwith dpg.window(label=\"Example Window\"):\n    dpg.add_text(\"Hello world\")\n    dpg.add_button(label=\"Save\", callback=save_callback)\n    dpg.add_input_text(label=\"string\")\n    dpg.add_slider_float(label=\"float\")\n\ndpg.show_viewport()\ndpg.start_dearpygui()\ndpg.destroy_context()\n```\n<br/>\n<p align=\"center\"><a href=\"https://dearpygui.readthedocs.io/en/latest/tutorials/first-steps.html#first-run\"><img src=\"https://raw.githubusercontent.com/hoffstadt/DearPyGui/assets/readme/first_app.gif\" alt=\"Dear PyGui example window\"></a></p>\n                                                                                           \n## Demo\nThe built-in demo shows all of Dear PyGui's functionality. To run the demo, you can run:\n\n```bash\npython -m dearpygui.demo\n```\n\nOr you can use [this code](https://dearpygui.readthedocs.io/en/latest/tutorials/first-steps.html#demo) to run the demo. The following impression shows a few, but not nearly all, of the available widgets and features. Since the Python code of the demo can be <a href=\"https://github.com/hoffstadt/DearPyGui/blob/master/dearpygui/demo.py\" alt=\"demo code repository\">inspected</a>, you can leverage the demo code to build your own apps.\n<br/><br/>\n<p align=\"center\"><a href=\"https://dearpygui.readthedocs.io/en/latest/tutorials/first-steps.html#demo\"><img src=\"https://raw.githubusercontent.com/hoffstadt/DearPyGui/assets/readme/demo.gif\" alt=\"Dear PyGui demo\"></a></p>\n  \n## Resources\n\n- [API documentation](https://dearpygui.readthedocs.io/en/latest/index.html) :books: \n- [Development Roadmap](https://github.com/hoffstadt/DearPyGui/projects/4)\n- [FAQ](https://github.com/hoffstadt/DearPyGui/discussions/categories/frequently-asked-questions-faq)\n- [Feature Tracker](https://github.com/hoffstadt/DearPyGui/issues?q=is%3Aissue+is%3Aopen+label%3A%22type%3A+feature%22)\n- [Bug Tracker](https://github.com/hoffstadt/DearPyGui/issues?q=is%3Aissue+is%3Aopen+label%3A%22type%3A+bug%22)\n- [Useful code snippets demonstrating best practices](https://github.com/my1e5/dpg-examples)\n- [Showcase apps including source code](https://github.com/hoffstadt/DearPyGui/wiki/Dear-PyGui-Showcase) :star:\n- [Showcase apps made with older versions of Dear PyGui](https://github.com/hoffstadt/DearPyGui/wiki/Showcase-apps-older-Dear-PyGui-versions)\n- [Useful tools and widgets](https://github.com/hoffstadt/DearPyGui/wiki/Tools-and-Widgets)\n  \n## Support\n\nIf you are having issues or want to help, here are some places you can go.\n  - [Discord Forum](https://discord.gg/tyE7Gu4) 💬\n  - [Reddit](https://www.reddit.com/r/DearPyGui/)\n\n[![Chat on Discord](https://img.shields.io/discord/736279277242417272?logo=discord)](https://discord.gg/tyE7Gu4) &nbsp; &nbsp; &nbsp; [![Reddit](https://img.shields.io/reddit/subreddit-subscribers/dearpygui?label=r%2Fdearpygui)](https://www.reddit.com/r/DearPyGui/)\n\n## Tech stack\nDear PyGui is built on top of <a href=\"https://github.com/ocornut/imgui\" target=\"_blank\">Dear ImGui</a>, including the [ImPlot](https://github.com/epezent/implot) and [imnodes](https://github.com/Nelarius/imnodes) extensions, and is fundamentally different than other Python GUI frameworks. Under the hood, it uses the immediate mode paradigm and your computer's GPU to facilitate extremely dynamic interfaces. In the same manner Dear ImGui provides a simple way to create tools for game developers, Dear PyGui provides a simple way for python developers to create quick and powerful GUIs for scripts. Dear PyGui is written in C/C++ resulting in highly performant Python applications. Dear PyGui is currently supported on the following platforms. \n<br/>\n  \n| Platform | Graphics API | Newest Version |\n|:---------|:-------------|:---------------|\n| **Windows 10** | _DirectX 11_ | [![PYPI](https://img.shields.io/pypi/v/dearpygui)](https://pypi.org/project/dearpygui/) |\n| **macOS** | _Metal_ | [![PYPI](https://img.shields.io/pypi/v/dearpygui)](https://pypi.org/project/dearpygui/) |\n| **Linux** | _OpenGL 3_ | [![PYPI](https://img.shields.io/pypi/v/dearpygui)](https://pypi.org/project/dearpygui/) |\n| **Raspberry Pi 4** | _OpenGL ES_ | [![PYPI](https://img.shields.io/badge/pypi-v1.6-blue)](https://img.shields.io/badge/pypi-v1.6-blue) |\n\n  \n## Credits\n\n- Developed by [Jonathan Hoffstadt](https://github.com/hoffstadt), [Preston Cothren](https://github.com/Pcothren) and every direct or indirect contributor.\n\n- [Omar Cornut](http://www.miracleworld.net/) for all his incredible work on [Dear ImGui](https://github.com/ocornut/imgui).\n\n- [Evan Pezent](http://evanpezent.com/) for all his work on [ImPlot](https://github.com/epezent/implot).\n\n- [Johann Muszynski](https://github.com/Nelarius) for all of his work on [imnodes](https://github.com/Nelarius/imnodes).\n\n## License\nDear PyGui is licensed under the [MIT License](https://github.com/hoffstadt/DearPyGui/blob/master/LICENSE).\n  \n## Sponsor\nContinued maintenance and development are a full-time endeavor which we would like to sustain and grow. Ongoing development is financially supported by users and private sponsors. If you enjoy Dear PyGui please consider becoming a [sponsor](https://github.com/hoffstadt/DearPyGui/wiki/Sponsors) or buy us a [cup of coffee](https://www.buymeacoffee.com/DearPyGui).\n\n<img src=\"https://img.shields.io/github/sponsors/hoffstadt?label=Github%20Sponsors\">&nbsp; &nbsp; &nbsp; <img src=\"https://img.shields.io/opencollective/sponsors/dearpygui?label=Open%20Collective%20Sponsors\">\n\n## Gallery\n\n#### Plotting/Graphing\n_Dear PyGui_ includes a plotting API built with [ImPlot](https://github.com/epezent/implot)\n\n<img src=\"https://raw.githubusercontent.com/wiki/epezent/implot/screenshots3/controls.gif\" width=\"380\">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;<img src=\"https://raw.githubusercontent.com/wiki/epezent/implot/screenshots3/dnd.gif\" width=\"380\">\n\n<img src=\"https://raw.githubusercontent.com/wiki/epezent/implot/screenshots3/query.gif\" width=\"380\">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;<img src=\"https://raw.githubusercontent.com/wiki/epezent/implot/screenshots3/bars.gif\" width=\"380\">\n  \n<img src=\"https://raw.githubusercontent.com/wiki/epezent/implot/screenshots3/rt.gif\" width=\"380\">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;<img src=\"https://raw.githubusercontent.com/wiki/epezent/implot/screenshots3/markers.gif\" width=\"380\">\n  \n<img src=\"https://raw.githubusercontent.com/wiki/epezent/implot/screenshots3/shaded.gif\" width=\"380\">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;<img src=\"https://raw.githubusercontent.com/wiki/epezent/implot/screenshots3/heat.gif\" width=\"380\">\n\n\n#### Node Editor\n_Dear PyGui_ includes a node editor built with [imnodes](https://github.com/Nelarius/imnodes)\n![](https://github.com/hoffstadt/DearPyGui/blob/assets/readme/nodes2.png)\n\n\n#### Canvas\n_Dear PyGui_ includes a drawing API to create custom drawings, plot, and even 2D games.\n![](https://github.com/hoffstadt/DearPyGui/blob/assets/readme/tetris.png)\n\n\n ![](https://github.com/hoffstadt/DearPyGui/blob/assets/readme/3d.png)\n \n ![](https://github.com/hoffstadt/DearPyGui/blob/assets/readme/nodes1.png)\n \n ![](https://github.com/hoffstadt/DearPyGui/blob/assets/readme/space.png)\n \n ![](https://github.com/hoffstadt/DearPyGui/blob/assets/readme/snake.gif)\n \n ![](https://github.com/hoffstadt/DearPyGui/blob/assets/readme/drawing.png)\n \n <BR>![BasicUsageExample](https://github.com/hoffstadt/DearPyGui/blob/assets/canvas.png?raw=true)\n \n ![](https://github.com/hoffstadt/DearPyGui/blob/assets/readme/nodes3.png)\n \n ![](https://github.com/hoffstadt/DearPyGui/blob/assets/readme/3d1.png)\n \n ![](https://github.com/hoffstadt/DearPyGui/blob/assets/readme/game1.png)\n \n ![](https://github.com/hoffstadt/DearPyGui/blob/assets/readme/mandlebrot.gif)\n \n ![](https://github.com/hoffstadt/DearPyGui/blob/assets/readme/nodes4.png)\n\n## SAST Tools\n\n[PVS-Studio](https://pvs-studio.com/en/pvs-studio/?utm_source=website&utm_medium=github&utm_campaign=open_source) - static analyzer for C, C++, C#, and Java code.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "dearpygui",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "sandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 9.3671875,
          "content": "from setuptools import setup, find_packages, Distribution\nfrom setuptools.command import build_py\nimport distutils.cmd\nfrom codecs import open\nimport os\nfrom os import path\nimport textwrap\nimport sys\nimport shutil\nimport subprocess\n\nwip_version = \"2.0.0\"\n\ndef version_number():\n    \"\"\"This function reads the version number which is populated by github actions\"\"\"\n\n    if os.environ.get('READTHEDOCS') == 'True':\n        return wip_version\n    try:\n        with open('version_number.txt', encoding='utf-8') as f:\n            version = f.readline().rstrip()\n\n            # temporary fix fox CI issues with windows\n            if(version.startswith(\"ECHO\")):\n                return \"0.0.1\"\n\n            return version\n\n    except IOError:\n        return wip_version\n\ndef get_platform():\n\n    platforms = {\n        'linux' : 'Linux',\n        'linux1' : 'Linux',\n        'linux2' : 'Linux',\n        'darwin' : 'OS X',\n        'win32' : 'Windows'\n    }\n    if sys.platform not in platforms:\n        return sys.platform\n    \n    return platforms[sys.platform]\n\nclass BinaryDistribution(Distribution):\n    def has_ext_modules(var):\n        return True\n\nclass DPGBuildCommand(distutils.cmd.Command):\n  \n  description = 'DPG Build Command'\n  user_options = []\n\n  def initialize_options(self):\n    pass\n\n  def finalize_options(self):\n    pass\n\n  def run(self):\n\n    if os.environ.get('READTHEDOCS') == 'True':\n        self.announce('Using readthedocs hack',level=distutils.log.INFO)\n        return\n\n    if get_platform() == \"Windows\":\n        command = [r'set PATH=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\CMake\\bin\";\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\CMake\\bin\";\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\CMake\\bin\";%PATH% && ']\n        command.append(\"mkdir cmake-build-local && \")\n        command.append(\"cd cmake-build-local && \")\n        command.append('cmake .. -G \"Visual Studio 16 2019\" -A \"x64\" -DMVDIST_ONLY=True -DMVDPG_VERSION=')\n        command.append(version_number() + \" -DMV_PY_VERSION=\")\n        command.append(str(sys.version_info[0]) + \".\" + str(sys.version_info[1]) + \" && \")\n        command.append(\"cd .. && cmake --build cmake-build-local --config Release\")\n        self.announce('Running command: %s' % \"Dear PyGui Build for Windows\", level=distutils.log.INFO)\n        subprocess.check_call(''.join(command), env=os.environ, shell=True)\n        src_path = os.path.dirname(os.path.abspath(__file__))\n        shutil.copy(\"cmake-build-local/DearPyGui/Release/_dearpygui.pyd\", src_path +\"/output/dearpygui\")\n\n    elif get_platform() == \"Linux\":\n        command = [\"mkdir cmake-build-local; \"]\n        command.append(\"cd cmake-build-local; \")\n        command.append('cmake .. -DMVDIST_ONLY=True -DMVDPG_VERSION='+version_number()+ \" -DMV_PY_VERSION=\"+ str(sys.version_info[0]) + \".\" + str(sys.version_info[1])+\"; \")\n        command.append(\"cd ..; cmake --build cmake-build-local --config Release\")\n        self.announce('Running command: %s' % \"Dear PyGui Build for Linux\",level=distutils.log.INFO)\n        subprocess.check_call(''.join(command), shell=True)\n        src_path = os.path.dirname(os.path.abspath(__file__))\n        shutil.copy(\"cmake-build-local/DearPyGui/_dearpygui.so\", src_path +\"/output/dearpygui\")\n    \n    elif get_platform() == \"OS X\":\n        command = [\"mkdir cmake-build-local; \"]\n        command.append(\"cd cmake-build-local; \")\n        command.append('cmake .. -DMVDIST_ONLY=True -DMVDPG_VERSION='+version_number()+ \" -DMV_PY_VERSION=\"+ str(sys.version_info[0]) + \".\" + str(sys.version_info[1])+\"; \")\n        command.append(\"cd ..; cmake --build cmake-build-local --config Release\")\n        self.announce('Running command: %s' % \"Dear PyGui Build for OS X\",level=distutils.log.INFO)\n        subprocess.check_call(''.join(command), shell=True)\n        src_path = os.path.dirname(os.path.abspath(__file__))\n        shutil.copy(\"cmake-build-local/DearPyGui/_dearpygui.so\", src_path +\"/output/dearpygui\")\n\n    else:\n        self.announce('Command not ready.',level=distutils.log.INFO)\n\nclass BuildPyCommand(build_py.build_py):\n  def run(self):\n    self.run_command('dpg_build')\n    build_py.build_py.run(self)\n\ndef setup_package():\n\n    src_path = os.path.dirname(os.path.abspath(__file__))\n    old_path = os.getcwd()\n    os.chdir(src_path)\n    sys.path.insert(0, src_path)\n\n    # import readme content\n    with open(\"./README.md\", encoding='utf-8') as f:\n        long_description = f.read()\n\n    # create the necessary directories if they do not exist\n    if os.path.isdir(src_path +  \"/output\"):\n        shutil.rmtree(src_path +  \"/output\")\n    os.mkdir(src_path + \"/output\")\n    os.mkdir(src_path + \"/output/dearpygui\")\n\n    if os.path.isdir(src_path + \"/cmake-build-local\"):\n        shutil.rmtree(src_path + \"/cmake-build-local\")\n\n    # copy add items to temporary location\n    if os.environ.get('READTHEDOCS') == 'True':\n        shutil.copy(src_path + \"/dearpygui/_dearpygui_RTD.py\", src_path + \"/output/dearpygui\")\n    else:\n        shutil.copy(src_path + \"/dearpygui/dearpygui.py\", src_path + \"/output/dearpygui\")\n\n    shutil.copy(src_path + \"/dearpygui/demo.py\", src_path + \"/output/dearpygui\")\n    shutil.copy(src_path + \"/dearpygui/experimental.py\", src_path + \"/output/dearpygui\")\n\n    with open(src_path + \"/output/dearpygui/__init__.py\", 'w') as file:\n        file.write(\"__version__='\" + version_number() + \"'\\n\")\n\n    if os.environ.get('READTHEDOCS') == 'True':\n\n        os.rename(src_path + \"/output/dearpygui/_dearpygui_RTD.py\", src_path + \"/output/dearpygui/dearpygui.py\")\n        with open(src_path + \"/output/dearpygui/_dearpygui.py\", 'w') as newfile:\n            with open(src_path + \"/dearpygui/_dearpygui.pyi\", 'r') as file:\n                lines = file.readlines()\n                for line in lines:\n                    if line.__contains__(\"...\") and not line.__contains__(\"[\"):\n                        newfile.write(\"\\tpass\\n\")\n                    elif line.__contains__(\"dearpygui._dearpygui\"):\n                        newfile.write(\"mvBuffer = 7\\n\") # hacky\n                        newfile.write(\"mvVec4 = 7\\n\") # hacky\n                        newfile.write(\"mvMat4 = 7\\n\") # hacky\n                    else:\n                        newfile.write(line)\n    else:\n\n        # copy add items to temporary location\n        shutil.copy(src_path + \"/dearpygui/_dearpygui.pyi\", src_path + \"/output/dearpygui\")\n        if get_platform() == \"Windows\":\n            shutil.copy(src_path + \"/thirdparty/Microsoft/vcruntime140_1.dll\", src_path + \"/output/dearpygui\")\n\n    metadata = dict(\n        name='dearpygui',                                      # Required\n        version=version_number(),                              # Required\n        author=\"Jonathan Hoffstadt and Preston Cothren\",       # Optional\n        author_email=\"jonathanhoffstadt@yahoo.com\",            # Optional\n        description='DearPyGui: A simple Python GUI Toolkit',  # Required\n        long_description=long_description,                     # Optional\n        long_description_content_type='text/markdown',         # Optional\n        url='https://github.com/hoffstadt/DearPyGui',          # Optional\n        license = 'MIT',\n        python_requires='>=3.8',\n        classifiers=[\n                'Development Status :: 5 - Production/Stable',\n                'Intended Audience :: Education',\n                'Intended Audience :: Developers',\n                'Intended Audience :: Science/Research',\n                'License :: OSI Approved :: MIT License',\n                'Operating System :: MacOS',\n                'Operating System :: Microsoft :: Windows :: Windows 10',\n                'Operating System :: POSIX',\n                'Operating System :: Unix',\n                'Programming Language :: Python :: 3.8',\n                'Programming Language :: Python :: 3.9',\n                'Programming Language :: Python :: 3.10',\n                'Programming Language :: Python :: 3.11',\n                'Programming Language :: Python :: 3.12',\n                'Programming Language :: Python :: 3.13',\n                'Programming Language :: Python :: Implementation :: CPython',\n                'Programming Language :: Python :: 3 :: Only',\n                'Topic :: Software Development :: User Interfaces',\n                'Topic :: Software Development :: Libraries :: Python Modules',\n            ],\n        packages=['dearpygui'],\n        package_dir = {'': 'output'},\n        package_data={},\n        distclass=BinaryDistribution,\n        cmdclass={\n        'dpg_build': DPGBuildCommand,\n        'build_py': BuildPyCommand,\n        },\n    )\n\n    if os.environ.get('READTHEDOCS') == 'True':\n        metadata['package_data']['dearpygui'] = [\"__init__.py\", \"_dearpygui.py\", \"dearpygui.py\", \"demo.py\", \"experimental.py\"]\n    elif get_platform() == \"Windows\":\n        metadata['package_data']['dearpygui'] = [\"__init__.py\", \"_dearpygui.so\", \"_dearpygui.pyd\", \"_dearpygui.pyi\", \"dearpygui.py\", \"demo.py\", \"experimental.py\", \"vcruntime140_1.dll\"]\n    else:\n        metadata['package_data']['dearpygui'] = [\"__init__.py\", \"_dearpygui.so\", \"_dearpygui.pyd\", \"_dearpygui.pyi\", \"dearpygui.py\", \"demo.py\", \"experimental.py\"]\n\n    if \"--force\" in sys.argv:\n        sys.argv.remove('--force')\n\n    try:\n        setup(**metadata)\n    finally:\n        del sys.path[0]\n        os.chdir(old_path)\n    return\n\nif __name__ == '__main__':\n    setup_package()\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "thirdparty",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}