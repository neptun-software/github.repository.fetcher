{
  "metadata": {
    "timestamp": 1736566334718,
    "page": 86,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "blender/blender",
      "stars": 13821,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 7.3212890625,
          "content": "\n# Configuration of clang-format\n# =============================\n#\n# Tested to work with versions: 8 to 11.\n\n# This causes parameters on continuations to align to the opening brace.\n#\n#   like_this_long_name(parameter_one,\n#                       parameter_two,\n#                       parameter_three);\n#\nAlignAfterOpenBracket: 'Align'\n\n# Disallow short functions on one line; break them up.\nAllowShortBlocksOnASingleLine: false\n\n# These two settings trigger stacking of parameters in most cases; this is\n# easier to read and also makes diffs easier to read (since an added or removed\n# parameter is obvious). For example, function calls will look like this:\n#\n#   like_this_long_name(parameter_one,\n#                       parameter_two,\n#                       parameter_three,\n#                       parameter_four,\n#                       parameter_five,\n#                       parameter_six);\n#\n# Instead of:\n#\n#   like_this_long_name(parameter_one, parameter_two, parameter_three, parameter_four,\n#                       parameter_five, parameter_six);\n#\nBinPackArguments: false\nBinPackParameters: false\n\n# Line width (don't exceed 100).\nColumnLimit: 99\n\n# Cause initializer lists to have one member initialized per line, in the case\n# that all initializers can't fit on a single line.\nConstructorInitializerAllOnOneLineOrOnePerLine: true\n\n# Indent the : after a constructor. For example:\n#\n#   explicit foo_class ()\n#       : member1_(5)\n#   {\n#   }\n#\nConstructorInitializerIndentWidth: 4\n\n# Make access modifier slightly more visible.\nAccessModifierOffset: -1\n\n# This will unfortunately use spaces in some cases where it's not desired (like\n# function calls) but the overall result is better since it will allow\n# alignment to work properly with different tab width settings.\nContinuationIndentWidth: 4\n\n# This tries to match Blender's style as much as possible. One\nBreakBeforeBraces: Custom\nBraceWrapping: {\n    AfterClass: 'false',\n    AfterControlStatement: 'MultiLine',\n    AfterEnum : 'false',\n    AfterFunction : 'true',\n    AfterNamespace : 'false',\n    AfterStruct : 'false',\n    AfterUnion : 'false',\n    BeforeCatch : 'true',\n    BeforeElse : 'true',\n    IndentBraces : 'false',\n    AfterObjCDeclaration: 'true',\n}\n\n# For switch statements, indent the cases.\nIndentCaseLabels: true\n\n# Indent after the hash inside preprocessor directives\nIndentPPDirectives: AfterHash\n\nBreakBeforeTernaryOperators: false\n\nSpaceAfterTemplateKeyword: false\n\n# Handy comment at the end of each C++ name space.\nFixNamespaceComments: true\n\n# Use \"if (...)\" instead of \"if(...)\", but have function calls like foo().\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\n\n# Use two spaces before trailing comments, for example\n#\n#   foo = bar;  // comment\n#\n# Note that this doesn't work for C-style comments.\nSpacesBeforeTrailingComments: 2\n\n# Reflow comments, developers must disable formatting as with code to override this.\nReflowComments: true\n\n# Never use tabs for indentation.\n# Note: TabWidth and IndentWidth must be the same, or strange things happen.\nUseTab: Never\nTabWidth: 2\nIndentWidth: 2\n\n# Add a big penalty on breaking after the return type of functions. For example,\n#\n#   static void foo(...)\n#\n# Instead of:\n#\n#   static void\n#   foo(very long content here that maybe could be stacked)\n#\nPenaltyReturnTypeOnItsOwnLine: 10000\n\n# Avoid having function calls broken onto a new line:\n#\n#   int a = foo(\n#       long, list, of, many, params);\n#\n# Instead of:\n#\n#   int a =\n#       foo(long, list, of, many, params);\n#\nPenaltyBreakAssignment: 100\n\nAllowShortFunctionsOnASingleLine: Empty\n\nSortIncludes: true\n\n# Don't right align escaped newlines to the right because we have a wide default\nAlignEscapedNewlines: DontAlign\n\n# Always break:\n#\n#   const char *foo =\n#       \"multi\"\n#       \"line\";\n#\n# Instead of:\n#\n#   const char *foo = \"multi\"\n#                     \"line\";\n#\nAlwaysBreakBeforeMultilineStrings: true\n\n# We don't want literal strings to break,\n# however clang-format seems to ignore this (sigh).\nPenaltyBreakString: 1000000\n\n# There are macros in Blender for custom for loops; tell Clang to treat them\n# like loops rather than an expression, and so put the { on the same line.\n#\n# To find these use multi-line regex search:\n# \"^\\s+[A-Z][A-Z0-9_]+\\s*\\([^\\n]*\\)\\n\\s*\\{\"\nForEachMacros:\n  - BEGIN_ANIMFILTER_SUBCHANNELS\n  - BLI_FOREACH_SPARSE_RANGE\n  - BLI_SMALLSTACK_ITER_BEGIN\n  - BMO_ITER\n  - BMO_ITER_INDEX\n  - BMW_ITER\n  - BM_FACES_OF_VERT_ITER_BEGIN\n  - BM_ITER_BPY_BM_SEQ\n  - BM_ITER_ELEM\n  - BM_ITER_ELEM_INDEX\n  - BM_ITER_MESH\n  - BM_ITER_MESH_INDEX\n  - BM_ITER_MESH_MUTABLE\n  - BM_LOOPS_OF_VERT_ITER_BEGIN\n  - BOOST_FOREACH\n  - CTX_DATA_BEGIN\n  - CTX_DATA_BEGIN_WITH_ID\n  - DEG_OBJECT_ITER_BEGIN\n  - DEG_OBJECT_ITER_FOR_RENDER_ENGINE_BEGIN\n  - DRW_ENABLED_ENGINE_ITER\n  - DRIVER_TARGETS_LOOPER_BEGIN\n  - DRIVER_TARGETS_USED_LOOPER_BEGIN\n  - FOREACH_BASE_IN_EDIT_MODE_BEGIN\n  - FOREACH_BASE_IN_MODE_BEGIN\n  - FOREACH_BEGIN\n  - FOREACH_COLLECTION_BEGIN\n  - FOREACH_COLLECTION_OBJECT_RECURSIVE_BEGIN\n  - FOREACH_COLLECTION_VISIBLE_OBJECT_RECURSIVE_BEGIN\n  - FOREACH_EDIT_OBJECT_BEGIN\n  - FOREACH_MAIN_ID_BEGIN\n  - FOREACH_MAIN_LISTBASE_BEGIN\n  - FOREACH_MAIN_LISTBASE_ID_BEGIN\n  - FOREACH_MESH_BUFFER_CACHE\n  - FOREACH_NODETREE_BEGIN\n  - FOREACH_OBJECT_BEGIN\n  - FOREACH_OBJECT_FLAG_BEGIN\n  - FOREACH_OBJECT_IN_EDIT_MODE_BEGIN\n  - FOREACH_OBJECT_IN_MODE_BEGIN\n  - FOREACH_OBJECT_RENDERABLE_BEGIN\n  - FOREACH_PCHAN_SELECTED_IN_OBJECT_BEGIN\n  - FOREACH_PCHAN_VISIBLE_IN_OBJECT_BEGIN\n  - FOREACH_SCENE_COLLECTION_BEGIN\n  - FOREACH_SCENE_OBJECT_BEGIN\n  - FOREACH_SELECTED_BASE_BEGIN\n  - FOREACH_SELECTED_BEZT_BEGIN\n  - FOREACH_SELECTED_EDITABLE_OBJECT_BEGIN\n  - FOREACH_SELECTED_OBJECT_BEGIN\n  - FOREACH_TRANS_DATA_CONTAINER\n  - FOREACH_VIEW_LAYER_TO_RENDER_BEGIN\n  - FOREACH_VISIBLE_BASE_BEGIN\n  - FOREACH_VISIBLE_OBJECT_BEGIN\n  - GHASH_FOREACH_BEGIN\n  - GHASH_ITER\n  - GHASH_ITER_INDEX\n  - GPU_SELECT_LOAD_IF_PICKSEL_LIST\n  - GP_EDITABLE_STROKES_BEGIN\n  - GP_EVALUATED_STROKES_BEGIN\n  - GSET_FOREACH_BEGIN\n  - GSET_ITER\n  - GSET_ITER_INDEX\n  - ITER_BEGIN\n  - ITER_PIXELS\n  - ITER_SLOTS\n  - ITER_SLOTS_BEGIN\n  - LOOP_EDITED_POINTS\n  - LOOP_KEYS\n  - LOOP_POINTS\n  - LOOP_SELECTED_KEYS\n  - LOOP_SELECTED_POINTS\n  - LOOP_TAGGED_KEYS\n  - LOOP_TAGGED_POINTS\n  - LOOP_UNSELECTED_POINTS\n  - LOOP_VISIBLE_KEYS\n  - LOOP_VISIBLE_POINTS\n  - LIGHT_FOREACH_BEGIN_DIRECTIONAL\n  - LIGHT_FOREACH_BEGIN_LOCAL\n  - LISTBASE_CIRCULAR_BACKWARD_BEGIN\n  - LISTBASE_CIRCULAR_FORWARD_BEGIN\n  - LISTBASE_FOREACH\n  - LISTBASE_FOREACH_BACKWARD\n  - LISTBASE_FOREACH_MUTABLE\n  - LISTBASE_FOREACH_BACKWARD_MUTABLE\n  - LISTBASE_FOREACH_INDEX\n  - MAN_ITER_AXES_BEGIN\n  - NODE_INSTANCE_HASH_ITER\n  - NODE_SOCKET_TYPES_BEGIN\n  - NODE_TREE_TYPES_BEGIN\n  - NODE_TYPES_BEGIN\n  - PIXEL_LOOPER_BEGIN\n  - PIXEL_LOOPER_BEGIN_CHANNELS\n  - RENDER_PASS_ITER_BEGIN\n  - RNA_BEGIN\n  - RNA_PROP_BEGIN\n  - RNA_STRUCT_BEGIN\n  - RNA_STRUCT_BEGIN_SKIP_RNA_TYPE\n  - SEQ_ALL_BEGIN\n  - SEQ_ITERATOR_FOREACH\n  - SURFACE_QUAD_ITER_BEGIN\n  - foreach\n  - ED_screen_areas_iter\n  - SLOT_PROBING_BEGIN\n  - SET_SLOT_PROBING_BEGIN\n  - MAP_SLOT_PROBING_BEGIN\n  - VECTOR_SET_SLOT_PROBING_BEGIN\n  - WL_ARRAY_FOR_EACH\n  - FOREACH_SPECTRUM_CHANNEL\n\nStatementMacros:\n  - PyObject_HEAD\n  - PyObject_VAR_HEAD\n  - ccl_gpu_kernel_postfix\n\nMacroBlockBegin: \"^OSL_CLOSURE_STRUCT_BEGIN$\"\nMacroBlockEnd: \"^OSL_CLOSURE_STRUCT_END$\"\n\n# Ensure single new line at the end of source files.\nInsertNewlineAtEOF: True\nKeepEmptyLinesAtEOF: False\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.8837890625,
          "content": "# The warnings below are disabled because they are too pedantic and not worth fixing.\n# Some of them will be enabled as part of the Clang-Tidy task, see T78535.\n\n# NOTE: No comments in the list below is allowed. Clang-tidy will ignore items after comments in the lists flag list.\n# This is because the comment is not a valid list item and it will stop parsing flags if a list item is a comment.\nChecks:  >\n  -*,\n  readability-*,\n  -readability-uppercase-literal-suffix,\n  -readability-magic-numbers,\n  -readability-isolate-declaration,\n  -readability-convert-member-functions-to-static,\n  -readability-implicit-bool-conversion,\n  -readability-avoid-const-params-in-decls,\n  -readability-simplify-boolean-expr,\n  -readability-make-member-function-const,\n  -readability-suspicious-call-argument,\n  -readability-redundant-member-init,\n  -readability-misleading-indentation,\n  -readability-use-anyofallof,\n  -readability-identifier-length,\n  -readability-enum-initial-value,\n  -readability-math-missing-parentheses,\n  -readability-avoid-nested-conditional-operator,\n  -readability-avoid-unconditional-preprocessor-if,\n\n  -readability-function-cognitive-complexity,\n\n  bugprone-*,\n  -bugprone-narrowing-conversions,\n  -bugprone-unhandled-self-assignment,\n  -bugprone-branch-clone,\n  -bugprone-macro-parentheses,\n  -bugprone-reserved-identifier,\n  -bugprone-easily-swappable-parameters,\n  -bugprone-implicit-widening-of-multiplication-result,\n\n  -bugprone-sizeof-expression,\n  -bugprone-integer-division,\n\n  -bugprone-redundant-branch-condition,\n\n  -bugprone-suspicious-include,\n\n  modernize-*,\n  -modernize-use-auto,\n  -modernize-use-trailing-return-type,\n  -modernize-avoid-c-arrays,\n  -modernize-use-nodiscard,\n  -modernize-loop-convert,\n  -modernize-pass-by-value,\n  -modernize-raw-string-literal,\n  -modernize-return-braced-init-list,\n\n  objc-*\n\nCheckOptions:\n  - key: modernize-use-default-member-init.UseAssignment\n    value: 1\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.2666015625,
          "content": "# C/C++\n[*.{c,cc,h,hh,inl,glsl}]\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\nmax_line_length = 99\n\n# CMake & Text\n[*.{cmake,txt}]\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\nmax_line_length = 99\n\n# Python\n[*.py]\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\nmax_line_length = 120\n\n# Shell\n[*.sh]\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\nmax_line_length = 99\n\n# Tom's Obvious Minimal Language\n[*.toml]\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\nmax_line_length = 120\n\n# reStructuredText\n[*.rst]\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 3\nmax_line_length = 120\n\n# Makefile\n[{Makefile,GNUmakefile}]\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = tab\nindent_size = 4\nmax_line_length = 120\n\n# HTML\n[*.html]\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\nmax_line_length = 99\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 3.4150390625,
          "content": "# git config blame.ignoreRevsFile .git-blame-ignore-revs\n#\n# After running the above, commits listed in this file will be\n# ignored by git blame. The blame will be shifted to the person\n# who edited the line(s) before the ignored commit.\n#\n# To disable this ignorance for a command, run as follows\n# git blame --ignore-revs-file=\"\" <other options>\n#\n# Changes that belong here:\n# - Massive comment, doxy-sections, or spelling corrections.\n# - Clang-format, PEP8 or other automated changes which are *strictly* \"no functional change\".\n# - Several commits should be added to this list at once, because adding\n#   one extra commit (to edit this file) after every cleanup is noisy.\n# - No clang-tidy changes.\n#\n# Note:\n# - The comment above the SHA should be the first line of the commit.\n# - It is fine to pack together similar commits if they have the same explanatory comment.\n# - Use only 40 character git SHAs; not smaller ones, not prefixed with rB.\n#\n# https://git-scm.com/docs/git-blame/2.23.0\n\n# white space commit. (2 spaces -> tab).\n0a3694cd6ebec710da7110e9f168a72d47c71ee0\n\n# Cycles: Cleanup, spacing after preprocessor\ncb4b5e12abf1fc6cf9ffc0944e0a1bc406286c63\n\n# ClangFormat: apply to source, most of intern\ne12c08e8d170b7ca40f204a5b0423c23a9fbc2c1\n\n# Code Style: use \"#pragma once\" in source directory\n91694b9b58ab953f3b313be9389cc1303e472fc2\n\n# Code Style: use \"#pragma once\" in some newer headers\n8198dbb888856b8c11757586df02aca15f132f90\n\n# Code Style: use \"#pragma once\" in intern/ghost\n1b1129f82a9cf316b54fbc025f8cfcc1a74b8589\n\n# Cleanup: mostly comments, use doxy syntax & typos\ne0cb02587012b4b2f4b18363dc7d0a7da2c02093\n\n# Cleanup: use C comments for descriptive text\n2abfcebb0eb7989e3d1e7d03f37ecf5c088210af\n\n# use lowercase for cmake builtin names and macros, remove contents in else() and endif() which is no longer needed.\nafacd184982e58a9c830a3d5366e25983939a7ba\n\n# Spelling: It's Versus Its\n3a7fd309fce89213b0224b3c6807adb2d1fe7ca8\n\n# Spelling: Then Versus Than\nd1eefc421544e2ea632fb35cb6bcaade4c39ce6b\n\n# Spelling: Miscellaneous\n84ef3b80de4915a24a9fd2fd214d0fa44e59b854\n\n# Spelling: Loose Versus Lose\nc0a6bc19794c69843c38451c762e91bc10136e0f\n\n# Spelling: Apart Versus A Part\n3d26cd01b9ba6381eb165e11536345ae652dfb41\n\n# Cleanup: use 2 space indentation for CMake\n3076d95ba441cd32706a27d18922a30f8fd28b8a\n\n# Cleanup: use over-line for doxy comments\n4b188bb08cf5aaae3c68ab57bbcfa037eef1ac10\n\n# Cleanup: General comment style clean up of graph_edit.c and fcurve.c\n0105f146bb40bd609ccbda3d3f6aeb8e14ad3f9e\n\n# Cleanup: pep8 (indentation, spacing, long lines)\n41d2d6da0c96d351b47acb64d3e0decdba16cb16\n\n# Cleanup: pep8, blank lines\nbab9de2a52929fe2b45ecddb1eb09da3378e303b\n\n# Cleanup: PEP8 for python changes\n1e7e94588daa66483190f45a9de5e98228f80e05\n\n# GPencil: Cleanup pep8\na09cc3ee1a99f2cd5040bbf30c8ab8c588bb2bb1\n\n# Cleanup: trailing space, remove tabs, pep8\nc42a6b77b52560d257279de2cb624b4ef2c0d24c\n\n# Cleanup: use C style doxygen comments\n8c1726918374e1d2d2123e17bae8db5aadde3433\n\n# Cleanup: use doxy sections for imbuf\nc207f7c22e1439e0b285fba5d2c072bdae23f981\n\n# Cleanup: clang-format\nc4d8f6a4a8ddc29ed27311ed7578b3c8c31399d2\nb5d310b569e07a937798a2d38539cfd290149f1c\n8c846cccd6bdfd3e90a695fabbf05f53e5466a57\n4eac03d821fa17546f562485f7d073813a5e5943\n1166110a9d66af9c5a47cee2be591f50fdc445e8\n\n# Cleanup: clang-format.\n40d4a4cb1a6b4c3c2a486e8f2868f547530e0811\n\n# Code Style: format (with BraceWrapping::AfterControlStatement \"MultiLine\").\n6859bb6e67031765e79e525ae62bf2ebf4df2330\n"
        },
        {
          "name": ".gitea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.4755859375,
          "content": "# generic files to ignore\n.*\n\n# python temp paths\n__pycache__/\n*.py[cod]\n\n# editors\n*~\n*.swp\n*.swo\n*#\n\n# Indexes for emacs, vi & others\nTAGS\ntags\n\n# QtCreator\nCMakeLists.txt.user\n\n# ms-windows\nThumbs.db\nehthumbs.db\nDesktop.ini\n\n# commonly used paths in blender\n/blender.bin\n/BUILD_NOTES.txt\n\n# local patches\n/*.patch\n/*.diff\n\n# in-source doc-gen\n/doc/doxygen/html/\n/doc/python_api/sphinx-in-tmp/\n/doc/python_api/sphinx-in/\n/doc/python_api/sphinx-out/\n/doc/python_api/rst/bmesh.ops.rst\n\n# in-source lib downloads and staging\n/build_files/build_environment/downloads/\n/build_files/build_environment/windows/build/\n\n# in-source buildbot signing configuration\n/build_files/buildbot/codesign/config_server.py\n\n# smoke simulation noise tile (generated)\nwaveletNoiseTile.bin\n\n# testing environment\n/Testing/\n\n# Translations.\n/locale/user-config.py\n\n# External repositories.\n/scripts/addons/\n/scripts/addons_contrib/\n/tests/benchmarks/\n\n# Ignore old submodules directories.\n# Eventually need to get rid of those, but for the first time of transition\n# avoid indidents when the folders exists after bisect and developers staging\n# them by accident.\n/release/scripts/addons/\n/release/datafiles/locale/\n/release/scripts/addons_contrib/\n/source/tools/\n\n# Build files for VS and VS Code.\n/build/\n/out/\nCMakeSettings.json\nCMakePresets.json\nCMakeUserPresets.json\n\n# Compile commands generated by CMake that may be linked into the source code\n# folder to make it easier for tools like clangd to discover.\ncompile_commands.json\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.0029296875,
          "content": "[submodule \"lib/linux_x64\"]\n\tupdate = none\n\tpath = lib/linux_x64\n\turl = https://projects.blender.org/blender/lib-linux_x64.git\n\tbranch = main\n[submodule \"lib/macos_arm64\"]\n\tupdate = none\n\tpath = lib/macos_arm64\n\turl = https://projects.blender.org/blender/lib-macos_arm64.git\n\tbranch = main\n[submodule \"lib/macos_x64\"]\n\tupdate = none\n\tpath = lib/macos_x64\n\turl = https://projects.blender.org/blender/lib-macos_x64.git\n\tbranch = main\n[submodule \"lib/windows_x64\"]\n\tupdate = none\n\tpath = lib/windows_x64\n\turl = https://projects.blender.org/blender/lib-windows_x64.git\n\tbranch = main\n[submodule \"lib/windows_arm64\"]\n    update = none\n\tpath = lib/windows_arm64\n\turl = https://projects.blender.org/blender/lib-windows_arm64.git\n\tbranch = main\n[submodule \"release/datafiles/assets\"]\n\tpath = release/datafiles/assets\n\turl = https://projects.blender.org/blender/blender-assets.git\n\tbranch = main\n[submodule \"tests/data\"]\n\tupdate = none\n\tpath = tests/data\n\turl = https://projects.blender.org/blender/blender-test-data.git\n\tbranch = main\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 27.0224609375,
          "content": "# This is the list of Blender authors for copyright purposes.\n#\n# This does not necessarily list everyone who has contributed code.\n# To see the full list of contributors, see the revision history in source\n# control.\n\n# Names should be added to this file with this pattern:\n#\n# For individuals:\n#   Name <email address>\n#\n# For organizations:\n#   Organization <fnmatch pattern>\n#\n# See python fnmatch module documentation for more information.\n#\n# Please keep the list sorted.\n#\n# The individual authors section can be regenerated using:\n#   python ./tools/utils/authors_git_gen.py\n\n# BEGIN individuals section.\n20kdc <asdd2808@gmail.com>\nAaron Carlisle <carlisle.aaron00@gmail.com>\nAaron Franke <arnfranke@yahoo.com>\nAbdelrahman <said.abdelrahman89@gmail.com>\nAdam Nydahl <Loginer>\nAdi Sage <adisage.connect@gmail.com>\nAditya Y Jeppu <quantimoney>\nAdrian Bibby Walther <adrianbibbywalther@gmail.com>\nAdrian Newton <TFS>\nAgAmemnno <kaz380@hotmail.co.jp>\nAhmad Rifai <riff.blend@gmail.com>\nAidan Davey <ShadowDragon>\nAidan Haile <tactical_fluke>\nAlan Babu <alanaman>\nAlan Troth <Al>\nAlaska <alaskayou01@gmail.com>\nAlejandro Conty Estevez <conty@yafray.org>\nAleksandr Zinovev <roaoao@gmail.com>\nAleksi Juvani <aleksijuvani>\nAlessio Monti di Sopra <a.monti>\nAlex Babahin <tamerlan311@gmail.com>\nAlex Fraser <alex@phatcore.com>\nAlex Parker <zanders3>\nAlex Strand <astrand130>\nAlex Sytnik <the.smerch@gmail.com>\nAlexander Court <admin@alexandercourt.de>\nAlexander Ewering <blender@instinctive.de>\nAlexander Gavrilov <angavrilov@gmail.com>\nAlexander Gordeev <agordeevw>\nAlexander Kuznetsov <kuzsasha@gmail.com>\nAlexander Pinzon <apinzonf@gmail.com>\nAlexander Revkov <arevkov>\nAlexander Romanov <a.romanov@blend4web.com>\nAlexander Wilms <alexanderwilms@noreply.localhost>\nAlexandr Kuznetsov <ak3636@nyu.edu>\nAlexandre Cardaillac <cardaillac.alexandre@gmail.com>\nAlexis-19 <alexis-19@noreply.localhost>\nAleš Jelovčan <frogstomp>\nAlfredo de Greef <eeshlo@yahoo.com>\nAli-Erdinc-Koroglu <ali-erdinc-koroglu@noreply.localhost>\nAliaksandr Sharstniou <kartiz0l@noreply.localhost>\nAlistair Sealy <alisealy>\nAlmaz Shinbay <almaz.shinbay@nu.edu.kz>\nAmine Bensalem <bensalem.amine321@gmail.com>\nAmélie Fondevilla <amelie.fondevilla@les-fees-speciales.coop>\nAnatoly TechTonik <techtonik@gmail.com>\nAndras-Borsanyi <andras-borsanyi@noreply.localhost>\nAndre Susano Pinto <andresusanopinto@gmail.com>\nAndrea Beconcini <beco>\nAndrea Weikert <elubie@gmx.net>\nAndreas Bergmeier <abergmeier>\nAndrej730 <azhilenkov@gmail.com>\nAndres Stephens <ondraise15@hotmail.com>\nAndrew Buttery <axb2035@gmail.com>\nAndrew Hale <TrumanBlending@gmail.com>\nAndrew Oates <andrew@andrewoates.com>\nAndrew Wason <rectalogic@rectalogic.com>\nAndrew Wiggin <ender79bl@gmail.com>\nAndrew Williams <sobakasu>\nAndrii Symkin <pembem22>\nAngel Bueno <angelbpineda>\nAngus Stanton <abstanton>\nAnish Bharadwaj <bharadwajanish@gmail.com>\nAnkit Meel <ankitjmeel@gmail.com>\nAnkur Deria <DAnkur>\nAnthony Edlin <akrashe@gmail.com>\nAnthony Eriksson <Kony>\nAnthony Roberts <anthony.roberts@linaro.org>\nAnton Khirnov <anton@khirnov.net>\nAnton Raves <Memento>\nAnton Stötzer <blendermusic>\nAntonio Vazquez <blendergit@gmail.com>\nAntony Riakiotakis <kalast@gmail.com>\nAras Pranckevicius <aras@nesnausk.org>\nAres Deveaux <aresdevo@gmail.com>\nAristotelis Dossas <teldosas>\nArius-Cr <arius-cr@qq.com>\nArnaud Degroote <arnaud.degroote@isae-supaero.fr>\nArno Mayrhofer <azrael3000>\nArto Kitula <arto.kitula@gmail.com>\nArye Ramaty <aryeramaty@gmail.com>\nArystanbek Dyussenov <arystan.d@gmail.com>\nAsad-ullah Khan <kh4n>\nAsher <ThatAsherGuy>\nAshley Ruglys <ashley.ruglys@gmail.com>\nAttila Afra <attila.t.afra@intel.com>\nAurel Gruber <aurel.gruber@infix.ch>\nAurel Wildfellner <aurel.w@gmail.com>\nAurelien Jarno <aurel32>\nAzeem Bande-Ali <azeemba>\nBaardaap <blender@aaltjegron.nl>\nBart van der Braak <bart@blender.org>\nBartosz Kosiorek <gang65@poczta.onet.pl>\nBartosz Moniewski <monio>\nBassam Kurdali <bassam@urchn.org>\nBastien Montagne <bastien@blender.org>\nBataev Artem <shader>\nBen Batt <benbatt@gmail.com>\nBen-7 <ben-7@noreply.localhost>\nBen-7 <bgotthei@amd.com>\nBenjamin N. Summerton <def.pri.pub@gmail.com>\nBenjamin Schmithüsen <UX3D-schmithuesen>\nBenjy Cook <benjycook@hotmail.com>\nBenoit Bolsee <benoit.bolsee@online.be>\nBernhard M. Wiedemann <bwiedemann@suse.de>\nBill Currie <bill@taniwha.org>\nBill Spitzak <bills@sidefx.com>\nBlazer <breakingspell@gmail.com>\nBogdan Nagirniak <bodyan@gmail.com>\nBrad Clark <RiggingDojo>\nBrad Smith <brad@comstyle.com>\nBrady Johnston <brady.johnston@me.com>\nBrecht Van Lommel <brecht@blender.org>\nBrendon Murphy <meta.androcto1@gmail.com>\nBrian Savery <brian.savery@gmail.com>\nBruno Boaventura Scholl <brunobbs>\nCampbell Barton <campbell@blender.org>\nCarlo Andreacchio <carlorules@gmail.com>\nCasey Bianco-Davis <caseycasey739@gmail.com>\nCasey Corn <cmccad@yahoo.com>\nChad Fraleigh <chadf@triularity.org>\nChao Li <chaolinyc@gmail.com>\nCharles Flèche <charlesf>\nCharles Wardlaw <cwardlaw@nvidia.com>\nCharlie Carley <snailrose@gmail.com>\nCharlie Jolly <mistajolly@gmail.com>\nCheryl Chen <chnchryl>\nChingiz Dyussenov <chingiz.ds@gmail.com>\nChris Blackbourn <chrisbblend@gmail.com>\nChris Burt <desoto@exenex.com>\nChris Clyne <chris@lateasusual.com>\nChris Want <cwant@ualberta.ca>\nChristian Brinkmann <hallo@zblur.de>\nChristian Friedrich <rbx775>\nChristian Hubert <christian.hubert@dstribe.com>\nChristian Rauch <Rauch.Christian@gmx.de>\nChristian Stolze <regcs>\nChristoph Lendenfeld <chris.lenden@gmail.com>\nChristophe Hery <chery>\nChristopher Peerman <chris_82>\nCian Jinks <cjinks99@gmail.com>\nClément Busschaert <clement.busschaert@gmail.com>\nClément Foucault <foucault.clem@gmail.com>\nCoDEmanX <codemanx@gmx.de>\nCody Winchester <CodyWinch>\nColby Klein <shakesoda>\nColin Basnett <cmbasnett@gmail.com>\nColin Marmond <kdblender@gmail.com>\nCorbin Dunn <corbin>\nCsaba Boncsér <geochuder>\nCyrax <cyrax.iiit@gmail.com>\nCédric Paille <cedricp>\nD. O <Likkez>\nD.J. Capelis <blender@capelis.dj>\nDaiki Hashimoto <daisea3e1203@gmail.com>\nDaisuke Takahashi <noreply@blender.org>\nDalai Felinto <dalai@blender.org>\nDamien Dh <damdhe>\nDamien Picard <dam.pic@free.fr>\nDamien Plisson <damien.plisson@yahoo.fr>\nDan Eicher <dan@eu.phorio.us>\nDan Horák <dan@danny.cz>\nDan Koschier <dankosc>\nDaniel <bestdani>\nDaniel Bailey <danieljabailey>\nDaniel Dunbar <daniel@zuster.org>\nDaniel Genrich <daniel.genrich@gmx.net>\nDaniel Grosse <Spikebaby>\nDaniel Salazar <zanqdo@gmail.com>\nDaniel Stokes <kupomail@gmail.com>\nDanrae Pray <blink.ornitier@gmail.com>\nDave Pagurek <davepagurek>\nDavid Ballesteros <dballesg>\nDavid Friedli <hlorus>\nDavid Murmann <david@23x5.net>\nDavid Vogel <Dadido3>\nDaybreak <daybreak-2@noreply.localhost>\nDeep Majumder <dmcoder>\nDemeter Dzadik <demeterdzadik@gmail.com>\nDenis Kovacs <den.products@gmail.com>\nDennis Ranish <Codec>\nDevashish Lal <devashish-lal@noreply.localhost>\nDevinBayly <baylyd@email.arizona.edu>\nDiego Borghetti <bdiego@gmail.com>\nDiego Gangl <dnicolas@gmail.com>\nDiego Garcia <diego@sinestesia.co>\nDilith Jayakody <dilithjay@gmail.com>\nDimitry Kaplin <DimKa>\nDiptangshu Dey <Tha_Hobbist>\nDirk <d-egg>\nDisquietingFridge <30654622+DisquietingFridge@users.noreply.github.com>\nDmitry Dygalo <noreply@developer.blender.org>\nDominik Fill <dominikfill>\nDomino Marama <domino@dominodesigns.info>\nDontsov Valentin <@blend4web.com>\nDorian <BD3D>\nDoug Hammond <doughammond@hamsterfight.co.uk>\nDouglas Paul <douglas.w.paul@gmail.com>\nDyvine57 <dulana57@gmail.com>\nESASHIKA Kaoru <git@pluser.dev>\nEd Halley <ed@halley.cc>\nEdgar Roman Cervantes <redvant>\nEdmund Kapusniak <edmundmk>\nEdward <edward88>\nEimear Crotty <eimearc>\nEitanSomething <eitant13@gmail.com>\nEjner Fergo <ejnersan@gmail.com>\nElia Sarti <vekoon@gmail.com>\nEmanuel Claesson <emanuel.claesson@gmail.com>\nEmmett Lalish <elalish@google.com>\nEnrico Fracasso <enrico.fracasso@email.it>\nEnrique-de-la-Calle <encalle@ucm.es>\nEoin Mcloughlin <hkeoin@eoinrul.es>\nEric Bickle <ShadowChaser>\nEric Cosky <eric_cosky>\nErik Abrahamsson <ecke101@gmail.com>\nErvin Weber <ervin.weber@gmail.com>\nErwin Coumans <blender@erwincoumans.com>\nEthan Hall <Ethan1080>\nEugene Kuznetsov <eugene.kuznetsov@amd.com>\nEvan Wilson <EAW>\nFabian Schempp <fabianschempp@googlemail.com>\nFabian-Herb <fabian-herb@noreply.localhost>\nFabrício Luis <ce3po>\nFalk David <falk@blender.org>\nFen <chemicalcrux>\nFermin <ferminlozanorodriguez@gmail.com>\nFlorian Eggenberger <florian.eggenberger@o-x.ch>\nFlorian Meyer <florianfelix@web.de>\nFolkert de Vries <flokkievids@gmail.com>\nFrancesco Siddi <francesco@blender.org>\nFrancis Laurence <laurencebourn@hotmail.com>\nFrancisco De La Cruz <dlcs.frank@gmail.com>\nFrank van Beek <frank@iae.nl>\nFrederick Lee <phaethon@linux.ucla.edu>\nFredrik Hansson <fredrikh>\nFulk33 <spaceshipwars@gmx.de>\nFynn Grotehans <fynngr@noreply.localhost>\nFélix <Miadim>\nGaia Clary <gaia.clary@machinimatrix.org>\nGangneron <clementgangneron@gmail.com>\nGarry R. Osgood <grosgood>\nGavin Li <gav@developer.blender.org>\nGeoffrey Bantle <hairbat@yahoo.com>\nGeoffroy Krantz <kgeogeo@hotmail.com>\nGeorge Mavroeidis <gmav.graphics@gmail.com>\nGeorge Vogiatzis <Gvgeo>\nGeorgiy Markelov <georgiy.m.markelov@gmail.com>\nGermano Cavalcante <germano.costa@ig.com.br>\nGilberto Rodrigues <gilbertorodrigues@outlook.com>\nGlenn Tester <karmacop>\nGottfried Hofmann <gottfried>\nGreg Neumiller <rlneumiller>\nGrigory Revzin <revzingg@gmail.com>\nGuillermo S. Romero <gsr.b3d@infernal-iceberg.com>\nGuillermo Venegas <guillermovcra@gmail.com>\nHabib Gahbiche <habibgahbiche@gmail.com>\nHallam Roberts <MysteryPancake>\nHamdi Ozbayburtlu <hamdio>\nHamed Zaghaghi <hamed.zaghaghi@gmail.com>\nHannes Loeschke <blender@hlae.de>\nHans Goudey <hans@blender.org>\nHans Lambermont <hans@lambermont.dyndns.org>\nHarley Acheson <harley.acheson@gmail.com>\nHarshit Mehta <harshitmehta2293@gmail.com>\nHeinrich Schuchardt <xypron>\nHenrik Aarnio <hjaarnio@gmail.com>\nHenrik Dick <hen-di@web.de>\nHenry Chang <ChengduLittleA>\nHimanshi Kalra <himanshikalra98@gmail.com>\nHong Shin <hongshin@google.com>\nHoshinova <nucleohoshinova@gmail.com>\nHoward Trickey <howard.trickey@gmail.com>\nHugo Sales <someonewithpc>\nHuseyin Karakullukcu <imgeself>\nHåkan Ardö <hakanardo>\nIRIE Shinsuke <irieshinsuke@yahoo.co.jp>\nIan Karanja <ranjian0>\nIan Thompson <quornian@googlemail.com>\nIchthyostega <prg@ichthyostega.de>\nIliya Katueshenock <modormoder@gmail.com>\nIndy Ray <ScatteredRay>\nInês Almeida <britalmeida@gmail.com>\nIsh Bosamiya <ish_bosamiya>\nIsrael Medina <imedina>\nIvan Kosarev <mail@ivankosarev.com>\nIvan Perevala <ivpe>\nIyad Ahmed <iyadahmed430@gmail.com>\nJack Andersen <someemail@gmail.com>\nJacob Møller <SirPaws>\nJacques Beuarain <jacques.beaurain@gmail.com>\nJacques Guignot <guignot@wanadoo.fr>\nJacques Lucke <jacques@blender.org>\nJagannadhan Ravi <easythrees>\nJaggz H <jaggz>\nJakub Marcowski <chubercikbattle@gmail.com>\nJakub Steiner <jimmac@gmail.com>\nJamell Moore <JamellMoore>\nJames <devpalestrina>\nJames Fulop <Yam>\nJames Monteath <james@blender.org>\nJames Partsafas <JamesPartsafas>\nJames Yonan <james@openvpn.net>\nJan-Willem van Dronkelaar <jwvd>\nJanne Karhu <jhkarh@gmail.com>\nJanusch Patas <patjan>\nJarrett Johnson <jarrett.johnson>\nJason Hays <jason_hays22@mymail.eku.edu>\nJason Schleifer <jasonschleifer>\nJason Wilkins <Jason.A.Wilkins@gmail.com>\nJean Da Costa <jeacom256>\nJean First <robbott>\nJean-Luc Peurière <jlp@nerim.net>\nJeducious <jameshcrowther>\nJeff Knox <jd.knox@gmail.com>\nJeffrey Hoover <italic.rendezvous@gmail.com>\nJens <JRottm>\nJens Ehrhardt <Jens_Eopus>\nJens Ole Wund <bjornmose@gmx.net>\nJens Verwiebe <info@jensverwiebe.de>\nJeroen Bakker <jeroen@blender.org>\nJesse Yurkovich <jesse.y@gmail.com>\nJim Eckerlein <UX3D-eckerlein>\nJiri Hnidek <jiri.hnidek@tul.cz>\nJishan Singh <ringmaker>\nJoel Godin <FloridaJo>\nJoep Peters <Joep>\nJohan Walles <walles>\nJohannes J <johannesj@noreply.localhost>\nJohannes Jakob <johjakob>\nJohannes Meng <info@jmeng.de>\nJohn Cox <johnedwardcox@yahoo.com>\nJohn Kiril Swenson <kirilswenson@gmail.com>\nJohn Quillan <jquillan>\nJohnny Matthews <johnny.matthews@gmail.com>\nJoilnen Leite <joilnen.leite@gmail.com>\nJonas Holzman <jonas@holzman.fr>\nJonasDichelle <jonasdichelle@gmail.com>\nJonathan Smith <j.jaydez@gmail.com>\nJonathan Williamson <jonathan@cgcookie.com>\nJorge Bernal <jbernalmartinez@gmail.com>\nJorijn de Graaf <bonj@noreply.localhost>\nJorn Visser <git@jornvisser.com>\nJose Molina Garcia <jose_molinag@yahoo.es>\nJose Vicente Barrachina <jbarrachinab@tutanota.com>\nJosef Raschen <JosefR>\nJoseph Brandenburg <TheAngerSpecialist>\nJoseph Eagar <joeedh@gmail.com>\nJoseph Gilbert <ascotan@gmail.com>\nJoseph Mansfield <sftrabbit@gmail.com>\nJoseph Micheli <JMicheli>\nJosh Maros <joshm-2@noreply.localhost>\nJoshua Leung <aligorith@gmail.com>\nJosé Luis Oliveira Cunha <JoseCunha>\nJot <jot@noreply.localhost>\nJuan Gea <juang3d>\nJuanfran Matheu <jfmatheu>\nJuha Mäki-Kanto <ih5235252@gmail.com>\nJuho Vepsalainen <bebraw@gmail.com>\nJulian Eisel <julian@blender.org>\nJulian Plak <julian.plak@live.nl>\nJulian Squires <julian@cipht.net>\nJulien Duroure <julien.duroure@gmail.com>\nJulien Kaspar <julien@blender.org>\nJun Mizutani <mizutani.jun@nifty.ne.jp>\nJung Jaeyun <cube-c>\nJure Triglav <juretriglav@gmail.com>\nJustin Dailey <dail8859@yahoo.com>\nJustin Jones <jjones780>\nJörg Müller <nexyon@gmail.com>\nJürgen Herrmann <shadowrom@me.com>\nKai Jægersen <kaio>\nKamil Galik <kgalik@3dconnexion.com>\nKarsten Schwenk <macnihilist@gmx.net>\nKarthik Rangasai Sivaraman <rangasai>\nKaspian Jakobsson <kaspian.jakobsson@gmail.com>\nKazashi Yoshioka <kaz380@hotmail.co.jp>\nKdaf <Kdaf>\nKeir Mierle <mierle@gmail.com>\nKeith Boshoff <wahooney>\nKen Hughes <khughes@pacific.edu>\nKenneth Perry <thothonegan>\nKent Mein <mein@cs.umn.edu>\nKenzie <kenziemac130@noreply.localhost>\nKester Maddock <Christopher.Maddock.1@uni.massey.ac.nz>\nKevin Buhr <buhr>\nKevin C. Burke <kevincburke@noreply.localhost>\nKevin Chuang <kaiwenjon23@gmail.com>\nKevin Curry <KevinCurry_Unity>\nKevin Havranek <Mzartek>\nKevin Mackay <mackay.ka@gmail.com>\nKhanh Ha <khanhhh89@gmail.com>\nKonrad Kleine <konrad.wilhelm.kleine@gmail.com>\nKonrad Puklicki <puklicki>\nKoranir <101683475+Koranir@users.noreply.github.com>\nKris <Metricity>\nKrzysztof Recko <yetioszek@gmail.com>\nKyler Kelly <Kylerk@gmail.com>\nKévin Dietrich <kevin.dietrich@mailoo.org>\nL. E. Segovia <leonardo.segovia@cs.uns.edu.ar>\nLalit Shankar Chowdhury <lalitshankarch@gmail.com>\nLaurynas Duburas <laduem@gmail.com>\nLawrence D'Oliveiro <from-blender@geek-central.gen.nz>\nLeha <leha>\nLeon Marz <main@lmarz.org>\nLeon Schittek <leon.schittek@gmx.net>\nLeon Zandman <lzandman>\nLiam Scaife <Voltist>\nLictex Steaven <lictex_>\nLiu Deyuan <liudeyuan>\nLleu Yang <hello@megakite.icu>\nLoren Osborn <linux_dr>\nLorenzo Pierfederici <lpierfederici@atomiccartoons.com>\nLorenzo-Carpaneto <lorenzocarpaneto@yahoo.it>\nLuc Revardel <luc.revardel@gmail.com>\nLuca Bonavita <mindrones@gmail.com>\nLuca Rood <dev@lucarood.com>\nLucas Boutrot <thornydre>\nLucas Tadeu Teixeira <lucas@lucastadeu.com>\nLucas Veber <lucky3>\nLuis Pereira <LuisPereira>\nLuis de Bethencourt Guimera <luisbg>\nLukas Steiblys <imbusy@imbusy.org>\nLukas Stockner <lukas@lukasstockner.de>\nLukas Treyer <treyer@arch.ethz.ch>\nLukas Tönne <lukas@blender.org>\nLukasz Czyz <lukasz.czyzz@gmail.com>\nLuke Frisken <l.frisken@gmail.com>\nLéo Depoix <PiloeGAO>\nM.G. Kishalmi <lmg@kishalmi.net>\nMaarten Gribnau <mail@maartengribnau.com>\nMacelaru Tiberiu <ButcherTibi>\nMahid Sheikh <standingpad-animations@noreply.localhost>\nMai Lavelle <mai.lavelle@gmail.com>\nMaikon Araujo <Nokiam>\nMal Duffin <malachyduffin@gmail.com>\nMangal Kushwah <MangalK2324>\nManuel Castilla <manzanillawork@gmail.com>\nMarc Chehab <marcchehab@protonmail.ch>\nMarc Freixas <mfreixas@lsi.upc.edu>\nMarcelo Demian Gómez <mdemiang>\nMarcelo Mutzbauer <1xundoredo@gmail.com>\nMarco <nacioss>\nMarcos Perez <pistolario>\nMarino Toscano <marino.toscano@gmail.com>\nMark Ayers <markthema3@gmail.com>\nMark Stead <Scumbag>\nMartijn Berger <mberger@denc.com>\nMartijn Versteegh <martijn@aaltjegron.nl>\nMartin Ettl <ettl.martin78@gmail.com>\nMartin Felke <martin.felke@googlemail.com>\nMartin Heistermann <mheistermann@noreply.localhost>\nMartin Poirier <theeth@yahoo.com>\nMasakazu Ito <sakasama@mtc.biglobe.ne.jp>\nMateo de Mayo <mateodemayo@gmail.com>\nMateusz Albecki <mateusz.albecki@outlook.com>\nMateusz Grzeliński <grzelinskimat@gmail.com>\nMatheus Santos <MatheusSantos>\nMatheus de Sousa Faria <MatheusFaria>\nMatias Herrero <herrero.maty>\nMatias Mendiola <matias.mendiola@gmail.com>\nMatt Ebb <matt@mke3.net>\nMatt Heimlich <matt.heimlich@gmail.com>\nMatt Hill <theothermatt>\nMatt Rossman <mattrossman>\nMatteo F. Vescovi <mfvescovi@gmail.com>\nMatteo Falduto <matteolegna>\nMatthew Hinson <matthewm.hinson@gmail.com>\nMatthew Krueger <contact@matthewkrueger.com>\nMatthew Smith <mjdietel@gmail.com>\nMatthias Ellerbeck <voyager25>\nMatthieu Carteron <rubisetcie@gmail.com>\nMatti-Ranta <matti-ranta@noreply.localhost>\nMattias Fredriksson <Osares>\nMax Edge <bbbooo3>\nMax Schlecht <bobbe@noreply.localhost>\nMaxim Vasiliev <qmax>\nMaxime Casas <maxime_casas@orange.fr>\nMaxime Chambonnet <Maxzor_2_what_the_fuck_blenderid>\nMaxime Curioni <maxime.curioni@gmail.com>\nMelissa <Melissa-Goon>\nMichael <michael64>\nMichael Fox <mfoxdogg@gmail.com>\nMichael Kowalski <makowalski@nvidia.com>\nMichael Möller <mmoeller>\nMichael Soluyanov <crantisz>\nMichal Srb <xixixao>\nMichel Anders <varkenvarken>\nMichel Selten <michel@mselten.demon.nl>\nMiguel G <ghaspias>\nMiguel Porces <cmporces>\nMiguel Pozo <pragma37@gmail.com>\nMiika Hamalainen <blender@miikah.org>\nMika Saari <mika.saari@wipsl.com>\nMike Erwin <significant.bit@gmail.com>\nMike Pan <mike.c.pan@gmail.com>\nMike93 <mike93@noreply.localhost>\nMikhail Matrosov <ktdfly>\nMikhail Rachinskiy <alm>\nMikkel Gjoel <mikkelgjoel>\nMilan Davidović <milan.davidovic@protonmail.com>\nMilan Jaros <jar091>\nMitchell Stokes <mogurijin@gmail.com>\nMonique Dewanchand <mdewanchand@atmind.nl>\nMoritz Röhrich <ildefons>\nMorten Mikkelsen <mikkelsen7@gmail.com>\nMyles Walcott <myles_walcott>\nMyron Carey <myroncarey>\nNate Rupsis <nrupsis@gmail.com>\nNathan Burnham <nathan@nathanburnham.uk>\nNathan Craddock <nzcraddock@gmail.com>\nNathan Letwory <nathan@blender.org>\nNathan Lovato <nathan@gdquest.com>\nNathan Rozendaal <super_jo_nathan>\nNathan Vegdahl <cessen@cessen.com>\nNicholas Bishop <nicholasbishop@gmail.com>\nNicholas Rishel <rishel.nick@gmail.com>\nNick Milios <semaphore>\nNick Samarin <nicks1987@bigmir.net>\nNicola De Mitri <nicolasap>\nNicolas Fauvet <droune2001>\nNika Kutsniashvili <nickberckley@gmail.com>\nNikhil Shringarpurey <Nikhil.Net>\nNikita Sirgienko <nikita.sirgienko@intel.com>\nNikolaus Leopold <nikolaus.leopold@gmail.com>\nNils Thuerey <nils@thuerey.de>\nNischay-Raj <nischay-raj@noreply.localhost>\nNorman Lin <nlin@nlin.net>\nNueSB <moocowperson@gmail.com>\nOctave C <toctave>\nOlivier Jolly <zeograd>\nOlivier Maury <omaury>\nOmar Emara <mail@OmarEmara.dev>\nOve Murberg Henriksen <sorayasilvermoon@hotmail.com>\nPablo Delgado Krämer <private@pablode.com>\nPablo Dobarro <pablodp606@gmail.com>\nPablo Vazquez <pablo@blender.org>\nPaolo Acampora <pkrime>\nPaolo Amadini <paolo.blender.dev@amadzone.org>\nPascal Schoen <pascal.schoen@adidas-group.com>\nPatrick Bender <ichbinkeinreh>\nPatrick Busch <xylvier@noreply.localhost>\nPatrick Foley <Patrick-Foley>\nPatrick Huang <phuang1024>\nPatrick Mours <pmours@nvidia.com>\nPaul (Thirio) <paul@paulcoops.com>\nPaul Golter <paulgolter>\nPaul Melis <paulmelis>\nPaulKristoffersson <57681017+PaulKristoffersson@users.noreply.github.com>\nPawel Franitza <Rongix>\nPedro A <povmaniac@noreply.localhost>\nPedro Reis <veryprofessionaldodo>\nPeng Yan <1105012124@qq.com>\nPetar Dosev <pdosev@gmail.com>\nPeter Fog <tintwotin>\nPeter Kim <pk15950@gmail.com>\nPeter Larabell <xgl.asyliax@gmail.com>\nPeter Lönnebring <peter_l>\nPeter Schlaile <peter@schlaile.de>\nPeter Sergay <psergay>\nPeter Staples <batfinger@gmail.com>\nPhil Gosch <phil@saphirestudio.at>\nPhil Stopford <philstopford>\nPhilip Holzmann <Foaly>\nPhilipp Oeser <philipp@blender.org>\nPhilippe Schmid <tuxtoriel@openmailbox.com>\nPhillip Thomas <Cambloid>\nPhoenix Katsch <phoenixkatsch>\nPi Lanningham <Quantumplation>\nPierluigi Grassi <pierluigi@tukano.it>\nPierre Risch <prisch>\nPierrick Bouvier <pierrick.bouvier@linaro.org>\nPiotr Makal <pmakal>\nPiotr Ostrowski <postrowski>\nPrakhar Singh Chouhan <tunealso@gmail.com>\nPratik Borhade <pratikborhade302@gmail.com>\nPrikshit singh <prikshitsingh79@gmail.com>\nQuentin Wenger <matpi@protonmail.ch>\nRUben <KUbo_0>\nRahul Chaudhary <RC12>\nRaimund Klink <raimund58@noreply.localhost>\nRajesh Advani <rajeshja>\nRajesh Malviya <rajveer0malviya@gmail.com>\nRalf Hölzemer <r.hoelzemer@googlemail.com>\nRamil Roosileht <Limarest>\nRateeb Riyasat <bmollusc>\nRaul Fernandez <farsthary84@gmail.com>\nRawalanche <rawalanche@gmail.com>\nRay Molenkamp <github@lazydodo.com>\nRebecca Dengate <beckyd>\nRed Mser <RedMser>\nReinier de Blois <rddeblois@gmail.com>\nRemigiusz Fiedler <migius@gmx.net>\nRemy Fayet <rems64des@gmail.com>\nRichard Antalik <richardantalik@gmail.com>\nRick Astley <mrbimax>\nRicki Myers <antihc3@gmail.com>\nRob Haarsma <phaseIV@zonnet.nl>\nRobert Fornof <amdbcg>\nRobert Guetzkow <gitcommit@outlook.de>\nRobert Holcomb <bob_holcomb@hotmail.com>\nRobert Sheldon <rsheldiii>\nRobert Wenzlaff <rwenzlaff@soylent-green.com>\nRobert-André Mauchin <zebob.m@gmail.com>\nRobin Allen <roblovski@gmail.com>\nRobin Hohnsbeen <robin@hohnsbeen.de>\nRoel Koster <kostex>\nRoel Spruit <roel@spruitje.nl>\nRohan Rathi <rohanrathi08@gmail.com>\nRoland Hess <me@harkyman.com>\nRomain Foyard <romain_f>\nRoman Kornev <RomanKornev>\nRyan Inch <Imaginer>\nS J Bennett (quollism) <quollism@ii.net>\nSahar A. Kashi <sahar.alipourkashi@amd.com>\nSam Miller <samuelmiller>\nSamuel Bilek <samuel-bilek-1@noreply.localhost>\nSandy Carter <bwrsandman@gmail.com>\nSayak Biswas <sayakAMD>\nScott Petrovic <scottpetrovic@gmail.com>\nScott Spadea <scottspadea>\nScott Wilson <propersquid>\nScurest <scurest>\nSean <seantommurray@gmail.com>\nSean Kim <SeanCTKim@protonmail.com>\nSebastian Herholz <sebastian.herholz@intel.com>\nSebastian Koenig <sebastiankoenig@posteo.de>\nSebastian Parborg <sebastian@blender.org>\nSebastianWitt <w.basti@gmx.de>\nSebastiano Barrera <bars>\nSebastián Barschkis <sebbas@sebbas.org>\nSergej Reich <sergej.reich@googlemail.com>\nSergey Sharybin <sergey@blender.org>\nShane Ambler <Shane@ShaneWare.Biz>\nSharan Ranjit <SharanRanjit>\nShashank Shekhar <secondary.cmdr2@gmail.com>\nShaul Kedem <shaul_kedem@yahoo.com>\nShen Ciao <ShenCiao>\nShrey Aggarwal <shrey_agg>\nShuvro Sarker <shuvro05@gmail.com>\nSibo Van Gool <SiboVG>\nSiddhartha Jejurkar <f20180617@goa.bits-pilani.ac.in>\nSietse Brouwer <sietse@hetvrijeoog.nl>\nSimon Clitherow <aphex@nildram.co.uk>\nSimon G <intrigus>\nSimon Lenz <Amudtogal>\nSimon Repp <simon@openideas.at>\nSimone Barbieri <s.barbieri>\nSmitty van Bodegom <smitop>\nSoeren Schmidt-Clausen <f_scociety@noreply.localhost>\nSonny Campbell <sonny.campbell@unity3d.com>\nSpencer Magnusson <smagnusson@noreply.localhost>\nSriharsha Kotcharlakot <k.venkatsriharsha@gmail.com>\nStanislav Blinov <radcapricorn>\nStefan Gartner <stefang@aon.at>\nStefan Heinz <stefanh@noreply.localhost>\nStefan Werner <stefan.werner@intel.com>\nStefano Bonicatti <smjert>\nStephan Seitz <theHamsta>\nStephen Kelly <steveire@gmail.com>\nStephen Seo <seodisparate>\nStephen Swaney <sswaney@centurytel.net>\nStuart Broadfoot <gbroadfoot@hotmail.com>\nSukhitha Prabhath Jayathilake <pr.jayathilake@gmail.com>\nSun Kim <perplexing.sun@gmail.com>\nSv. Lockal <lockalsash@gmail.com>\nSybren A. Stüvel <sybren@blender.org>\nSzymon Ulatowski <szulat>\nTakahiro Shizuki <sntulix>\nTamito Kajiyama <rd6t-kjym@asahi-net.or.jp>\nTarek Yasser <tarekspeed7@gmail.com>\nThibault de Villèle <thibaulltt>\nThomas Barlow <github@mysterymayhem.co.uk>\nThomas Beck <software@plasmasolutions.de>\nThomas Dinges <thomas@blender.org>\nThomas Lachmann <tl@bunker-werk.net>\nThomas Szepe <HG1_public@gmx.net>\nThomas Wilshaw <thomaswilshaw@gmail.com>\nTiago Chaves <laurelkeys>\nTianwei Shen <shentianweipku@gmail.com>\nTim Stullich <tstullich>\nTimo Gurr <timo.gurr@gmail.com>\nTobias Heinke <TobiasH>\nTom Edwards <contact@steamreview.org>\nTom Musgrove <LetterRip@gmail.com>\nTomek Gubala <VGT>\nTomoaki Kawada <i@yvt.jp>\nTomoaki Nakano <tomnak>\nTon Roosendaal <ton@blender.org>\nToni Alatalo <antont@kyperjokki.fi>\nTonyG <TonyG>\nTorsten Rupp <foobar@blender.org>\nTristan Porteries <republicthunderbolt9@gmail.com>\nTroy Sobotka <troy.sobotka@gmail.com>\nTuan N <tuan.ngn94@gmail.com>\nTuomo Keskitalo <tuomo.keskitalo@iki.fi>\nTyler <tsjordan>\nTyler Alden Gubala <TylerGubala>\nTyler Seacrest <tylerseacrest>\nUlysse Martin <you.le@live.fr>\nUrko <urko3d>\nVaishnav S <padthai>\nValdemar Lindberg <Voldie>\nValentin <Poulpator>\nVasilis-Milios <vasilis-milios@noreply.localhost>\nVasyl Pidhirskyi <vpidhirskyi@gmail.com>\nVictor Chedeville <victor-09@noreply.localhost>\nVictor Seiji Hariki <seijihariki>\nVictor-Louis De Gusseme <victorlouis>\nViktoriia Safiullina <safiuvik>\nVille Kivistö <vkivisto>\nVincent Blankfield <vvv>\nVitalijs Komasilovs <vitalijs.komasilovs@gmail.com>\nVitor Boschi <vitorboschi@gmail.com>\nVuk Gardašević <lijenstina>\nWael El Oraiby <wael.eloraiby@gmail.com>\nWalid Shouman <eng.walidshouman@gmail.com>\nWannes Malfait <wannes.malfait@gmail.com>\nWayde Moss <wbmoss_dev@yahoo.com>\nWeikang Qiu <qiuweikang1999@gmail.com>\nWeizhen Huang <weizhen@blender.org>\nWelp <jtf515@gmail.com>\nWilliam Leeson <william@blender.org>\nWilliam Reynish <william@reynish.com>\nWillian Padovani Germano <wpgermano@gmail.com>\nWouter <waterflames>\nWouter van Heyst <larstiq-bforge@larstiq.dyndns.org>\nWybren van Keulen <wybren>\nXDzZyq <xiaodouzizyq@gmail.com>\nXavier Cho <mysticfall>\nXavier Hallade <xavier.hallade@intel.com>\nXavier Thomas <xavier.thomas.1980@gmail.com>\nXiao Xiangquan <xiaoxiangquan@gmail.com>\nXing Liu <xing>\nYann Doersam <YetAnotherNiceName>\nYann Lanthony <yann-lty>\nYann Vernier <yann@algonet.se>\nYevgeny Makarov <jenkm>\nYiming Wu <xp8110@outlook.com>\nYonatan Maor <yon.maor@gmail.com>\nYuki Hashimoto <hzuika>\nYuki Shirakawa <shirakawa>\nYuntoko <yuntokon@gmail.com>\nZ-Map <blendfan@gmail.com>\nZev Eisenberg <ZevEisenberg>\nZijun Zhou <eary@noreply.localhost>\nZopolis4 <creatorsmithmdt@gmail.com>\nalxdsptr <helloworld6489mdp@gmail.com>\nandreas atteneder <atti>\nariva00 <ariva00.it@gmail.com>\nb-init <b-init>\nbartus <bartus@noreply.localhost>\nbird_d <bird_d>\nbrunoT <drehuwann@gmail.com>\nbuildxyz-git <buildxyz@gmail.com>\ncgtinker <Denys.Hsu@gmail.com>\ncoyo_t <constachugga@gmail.com>\ndereck <v8786339@hotmail.com>\ndupoxy <dupoxy@gmail.com>\nfiord <hyoga_quasar@yahoo.co.jp>\ngrady <mgradysaunders@gmail.com>\nhimisa <himisa@noreply.localhost>\nil4n <il4n@noreply.localhost>\njamesf <jameslynnfulop@gmail.com>\njim man <jimman2003>\njon denning <gfxcoder@gmail.com>\nkiki <charles@skeletalstudios.com>\nlaurynas <laduem@gmail.com>\nlistout <listout@protonmail.com>\nluzpaz <luzpaz>\nmatc <matc>\nmenda <alguien@aqui.es>\nn-kall <noa@tutamail.com>\nnBurn <nbwashburn@gmail.com>\nnoodlebox <noodlebox.art@gmail.com>\nnotrudyyy <rudy.vempati@gmail.com>\nnutti <nutti.metro@gmail.com>\nok_what <ip1149a@gmail.com>\npersun <perplexing.sun@gmail.com>\npowergainer <95447782+powergainer@users.noreply.github.com>\npriera <pedro.riera.marto@gmail.com>\nquackarooni <alfonsomartzii@gmail.com>\nrifai.id <arifai.dev@gmail.com>\nsandarm <sandarm@noreply.localhost>\nsoftyoda <yo561@live.fr>\nswann <slumber>\nunclezeiv <davide.vercelli@gmail.com>\nyves <valfeur>\nzhanghe9702 <zhanghe9702@163.com>\nÉlie Michel <elie>\nŁukasz Kwoska <Szakulus>\n# Please DO NOT APPEND here. See comments at the top of the file.\n# END individuals section.\n\n# BEGIN organizations section.\nApple <*@apple.com>\nAMD <*@amd.com>\nBlender Foundation <*@blender.org>\nIntel <*@intel.com>\nNVIDIA <*@nvidia.com>\n# Please DO NOT APPEND here. See comments at the top of the file.\n# END organizations section.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 107.751953125,
          "content": "# SPDX-FileCopyrightText: 2006 Blender Authors\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# -----------------------------------------------------------------------------\n# Early Initialization\n\n# NOTE: We don't allow in-source builds. This causes no end of troubles because\n# all out-of-source builds will use the CMakeCache.txt file there and even\n# build the libs and objects in it.\nif(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})\n  if(NOT DEFINED WITH_IN_SOURCE_BUILD)\n    message(FATAL_ERROR\n      \"CMake generation for blender is not allowed within the source directory!\"\n      \"\\n Remove \\\"${CMAKE_SOURCE_DIR}/CMakeCache.txt\\\"\"\n      \"\\n then try again from another directory, e.g.:\"\n      \"\\n \"\n      \"\\n rm -rf CMakeCache.txt CMakeFiles\"\n      \"\\n cd ..\"\n      \"\\n mkdir cmake-make\"\n      \"\\n cd cmake-make\"\n      \"\\n cmake ../blender\"\n      \"\\n \"\n      \"\\n Alternately define WITH_IN_SOURCE_BUILD to force this option (not recommended!)\"\n    )\n  endif()\nendif()\n\ncmake_minimum_required(VERSION 3.10)\n\nif(NOT EXECUTABLE_OUTPUT_PATH)\n  set(FIRST_RUN TRUE)\nelse()\n  set(FIRST_RUN FALSE)\nendif()\n\n# this starts out unset\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/build_files/cmake/Modules\")\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/build_files/cmake/platform\")\n\n# Avoid having an empty `CMAKE_BUILD_TYPE`.\nif(NOT DEFINED CMAKE_BUILD_TYPE_INIT)\n  set(CMAKE_BUILD_TYPE_INIT \"Release\")\n  # Internal logic caches this variable, avoid showing it by default\n  # since it's easy to accidentally set instead of the build type.\nendif()\nmark_as_advanced(CMAKE_BUILD_TYPE_INIT)\n\n# Omit superfluous \"Up-to-date\" messages.\nif(NOT DEFINED CMAKE_INSTALL_MESSAGE)\n  set(CMAKE_INSTALL_MESSAGE \"LAZY\")\nendif()\n\n# quiet output for Makefiles, 'make -s' helps too\n# set_property(GLOBAL PROPERTY RULE_MESSAGES OFF)\n\n# Global compile definitions since add_definitions() adds for all.\n# _DEBUG is a Visual Studio define, enabled for all platforms.\nset_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS\n  $<$<CONFIG:Debug>:_DEBUG>\n)\n# -----------------------------------------------------------------------------\n# Set policy\n\n# see \"cmake --help-policy CMP0003\"\n# So library linking is more sane\ncmake_policy(SET CMP0003 NEW)\n\n# So BUILDINFO and BLENDERPATH strings are automatically quoted\ncmake_policy(SET CMP0005 NEW)\n\n# So syntax problems are errors\ncmake_policy(SET CMP0010 NEW)\n\n# Input directories must have CMakeLists.txt\ncmake_policy(SET CMP0014 NEW)\n\n# Silence draco warning on macOS, new policy works fine.\nif(POLICY CMP0068)\n  cmake_policy(SET CMP0068 NEW)\nendif()\n\n# find_package() uses <PackageName>_ROOT variables.\nif(POLICY CMP0074)\n  cmake_policy(SET CMP0074 NEW)\nendif()\n\n# find_package() uses uppercase <PackageName>_ROOT variables.\nif(POLICY CMP0144)\n  cmake_policy(SET CMP0144 NEW)\nendif()\n\n# Install CODE|SCRIPT allow the use of generator expressions.\nif(POLICY CMP0087)\n  cmake_policy(SET CMP0087 NEW)\nendif()\n\n# Allow to specify language per file.\nif(POLICY CMP0119)\n  cmake_policy(SET CMP0119 NEW)\nendif()\n\n# Install DESTINATION paths are normalized.\nif(POLICY CMP0177)\n  cmake_policy(SET CMP0177 NEW)\nendif()\n\n# -----------------------------------------------------------------------------\n# Load Blender's Local Macros\n\ninclude(build_files/cmake/macros.cmake)\n\n# -----------------------------------------------------------------------------\n# Initialize Project\n\nblender_project_hack_pre()\n\nproject(Blender)\n\nblender_project_hack_post()\n\nenable_testing()\n\n\n# -----------------------------------------------------------------------------\n# Test Compiler Support\n#\n# Keep in sync with: https://developer.blender.org/docs/handbook/building_blender/\n\nif(CMAKE_COMPILER_IS_GNUCC)\n  if(\"${CMAKE_C_COMPILER_VERSION}\" VERSION_LESS \"11.0.0\")\n    message(FATAL_ERROR \"\\\nThe minimum supported version of GCC is 11.0.0, found C compiler: ${CMAKE_C_COMPILER_VERSION}\"\n    )\n  endif()\n  if(\"${CMAKE_CXX_COMPILER_VERSION}\" VERSION_LESS \"11.0.0\")\n    message(FATAL_ERROR \"\\\nThe minimum supported version of GCC is 11.0.0, found C++ compiler${CMAKE_CXX_COMPILER_VERSION}\"\n    )\n  endif()\nelseif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  if(CMAKE_COMPILER_IS_GNUCC)\n    if(\"${CMAKE_C_COMPILER_VERSION}\" VERSION_LESS \"8.0\")\n      message(FATAL_ERROR \"\\\nThe minimum supported version of CLANG is 8.0, found C compiler ${CMAKE_C_COMPILER_VERSION}\"\n      )\n    endif()\n    if(\"${CMAKE_CXX_COMPILER_VERSION}\" VERSION_LESS \"8.0\")\n      message(FATAL_ERROR \"\\\nThe minimum supported version of CLANG is 8.0, found C++ compiler ${CMAKE_CXX_COMPILER_VERSION}\"\n      )\n    endif()\n  endif()\nelseif(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n  if(MSVC_VERSION VERSION_LESS \"1928\")\n    # MSVC_VERSION is an internal version number, it doesn't map to something\n    # the end user would recognize as a version. Because of this, for MSVC we do\n    # not show the found number. When using our make.bat the actual VS version\n    # will be displayed on the console before starting the build, anyway.\n    message(FATAL_ERROR \"The minimum supported version of MSVC is 2019 (16.9.16)\")\n  endif()\nendif()\n\n# -----------------------------------------------------------------------------\n# Test Compiler/Library Features\n\ninclude(build_files/cmake/have_features.cmake)\n\n\n# -----------------------------------------------------------------------------\n# Redirect Output Files\n\nset(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin CACHE INTERNAL \"\" FORCE)\nset(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib CACHE INTERNAL \"\" FORCE)\n\nget_property(GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(GENERATOR_IS_MULTI_CONFIG)\n  set(TESTS_OUTPUT_DIR ${EXECUTABLE_OUTPUT_PATH}/tests/$<CONFIG>/ CACHE INTERNAL \"\" FORCE)\nelse()\n  set(TESTS_OUTPUT_DIR ${EXECUTABLE_OUTPUT_PATH}/tests/ CACHE INTERNAL \"\" FORCE)\nendif()\n\n\n# -----------------------------------------------------------------------------\n# Set Default Configuration Options\n\nget_blender_version()\n\nif(WIN32)\n  add_definitions(\n    # This is the app ID used for file registration, given it's used from several modules\n    # there really is no nice way to get this information consistent without a global define.\n    -DBLENDER_WIN_APPID=\"blender.${BLENDER_VERSION_MAJOR}.${BLENDER_VERSION_MINOR}\"\n    # This is the name that will be shown in the taskbar and OpenWith windows UI\n    -DBLENDER_WIN_APPID_FRIENDLY_NAME=\"Blender ${BLENDER_VERSION_MAJOR}.${BLENDER_VERSION_MINOR}\"\n  )\nendif()\n\n\nif(${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.19\")\n  # This changes the default value from Off to On, but will still allow people to manually change\n  # this setting through their CMakeCache.txt if they desire to do so.\n  set(CMAKE_OPTIMIZE_DEPENDENCIES ON CACHE INTERNAL \"\")\nendif()\n\n# -----------------------------------------------------------------------------\n# Declare Options\n\n# Blender internal features\noption(WITH_BLENDER \"Build blender (disable to build only Cycles stand-alone).\" ON)\nmark_as_advanced(WITH_BLENDER)\n\nif(WIN32)\n  option(WITH_BLENDER_THUMBNAILER \"\\\nBuild \\\"BlendThumb.dll\\\" helper for Windows explorer integration to support extracting \\\nthumbnails from `.blend` files.\"\n    ON\n  )\nelse()\n  set(_option_default ON)\n  if(APPLE)\n    # In future, can be used with `quicklookthumbnailing/qlthumbnailreply`\n    # to create file thumbnails for say Finder.\n    # Turn it off for now, even though it can build on APPLE, it's not likely to be useful.\n    set(_option_default OFF)\n  endif()\n  option(WITH_BLENDER_THUMBNAILER \"\\\nBuild stand-alone \\\"blender-thumbnailer\\\" command-line thumbnail extraction utility, \\\nintended for use by file-managers to extract PNG images from `.blend` files.\"\n    ${_option_default}\n  )\n  unset(_option_default)\nendif()\n\noption(WITH_INTERNATIONAL \"Enable I18N (International fonts and text)\" ON)\n\noption(WITH_PYTHON \"Enable Embedded Python API (only disable for development)\" ON)\noption(WITH_PYTHON_SECURITY \"Disables execution of scripts within blend files by default\" ON)\n# Don't want people disabling this unless they really know what they are doing.\nmark_as_advanced(WITH_PYTHON)\n# Some distributions see this as a security issue, rather than have them patch it,\n# make a build option.\nmark_as_advanced(WITH_PYTHON_SECURITY)\n\noption(WITH_PYTHON_SAFETY \"\\\nEnable internal API error checking to track invalid data to prevent crash on access \\\n(at the expense of some efficiency, only enable for development).\"\n  OFF\n)\nmark_as_advanced(WITH_PYTHON_SAFETY)\noption(WITH_PYTHON_MODULE \"\\\nEnable building as a python module which runs without a user interface, \\\nlike running regular blender in background mode (only enable for development), \\\ninstalls to PYTHON_SITE_PACKAGES (or CMAKE_INSTALL_PREFIX if WITH_INSTALL_PORTABLE is enabled).\"\n  OFF\n)\n\noption(WITH_BUILDINFO \"\\\nInclude extra build details (only disable for development & faster builds)\"\n  ON\n)\nset(BUILDINFO_OVERRIDE_DATE \"\" CACHE STRING \"\\\nUse instead of the current date for reproducible builds (empty string disables this option)\"\n)\nset(BUILDINFO_OVERRIDE_TIME \"\" CACHE STRING \"\\\nUse instead of the current time for reproducible builds (empty string disables this option)\"\n)\nset(CPACK_OVERRIDE_PACKAGENAME \"\" CACHE STRING \"\\\nUse instead of the standard packagename (empty string disables this option)\"\n)\nmark_as_advanced(CPACK_OVERRIDE_PACKAGENAME)\nmark_as_advanced(BUILDINFO_OVERRIDE_DATE)\nmark_as_advanced(BUILDINFO_OVERRIDE_TIME)\n\n# CMAKE 3.28.2 has issues with the combination of PCH and unity builds, disable for now.\n# upstream ticket https://gitlab.kitware.com/cmake/cmake/-/issues/25650\nif(${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.16\" AND NOT ${CMAKE_VERSION} VERSION_EQUAL \"3.28.2\")\n  option(WITH_UNITY_BUILD \"\\\nEnable unity build for modules that support it to improve compile times.\\n\\\nWARNING: this option allows files to be built without all necessary headers!\\n\nThis option should be disabled before manipulating or removing headers.\"\n    ON\n  )\n  mark_as_advanced(WITH_UNITY_BUILD)\nelse()\n  set(WITH_UNITY_BUILD OFF)\nendif()\n\nif(COMMAND target_precompile_headers)\n  # Disabling is needed for `./tools/utils_maintenance/code_clean.py` to function.\n  option(WITH_COMPILER_PRECOMPILED_HEADERS \"\\\nUse pre-compiled headers to speed up compilation.\"\n    ON\n  )\n  mark_as_advanced(WITH_COMPILER_PRECOMPILED_HEADERS)\n\n  if(WITH_CLANG_TIDY AND (CMAKE_COMPILER_IS_GNUCC OR APPLE))\n    if(WITH_COMPILER_PRECOMPILED_HEADERS)\n      message(STATUS\n        \"Clang-Tidy and the current compiler's precompiled headers are incompatible, disabling precompiled headers.\"\n      )\n      set(WITH_COMPILER_PRECOMPILED_HEADERS OFF)\n    endif()\n  endif()\n\n  if(NOT WITH_COMPILER_PRECOMPILED_HEADERS)\n    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n  endif()\nendif()\n\noption(WITH_IK_ITASC \"\\\nEnable ITASC IK solver (only disable for development & for incompatible C++ compilers)\"\n  ON\n)\noption(WITH_IK_SOLVER \"\\\nEnable Legacy IK solver (only disable for development)\"\n  ON\n)\noption(WITH_FFTW3 \"Enable FFTW3 support (Used for smoke, ocean sim, glare, and audio effects)\" ON)\noption(WITH_PUGIXML \"Enable PugiXML support (Used for OpenImageIO, Grease Pencil SVG export)\" ON)\noption(WITH_BULLET \"Enable Bullet (Physics Engine)\" ON)\noption(WITH_SYSTEM_BULLET \"\\\nUse the systems bullet library (currently unsupported due to missing features in upstream!)\"\n  OFF\n)\nmark_as_advanced(WITH_SYSTEM_BULLET)\noption(WITH_OPENCOLORIO \"Enable OpenColorIO color management\" ON)\n\nset(_option_default ON)\nif(APPLE)\n  # There's no OpenXR runtime in sight for macOS, neither is code well\n  # tested there -> disable it by default.\n  set(_option_default OFF)\nendif()\noption(WITH_XR_OPENXR \"Enable VR features through the OpenXR specification\" ${_option_default})\nif(APPLE)\n  mark_as_advanced(WITH_XR_OPENXR)\nendif()\nunset(_option_default)\n\noption(WITH_GMP \"Enable features depending on GMP (Exact Boolean)\" ON)\n\noption(WITH_OPENIMAGEDENOISE \"Enable the OpenImageDenoise compositing node\" ON)\n\noption(WITH_OPENSUBDIV \"Enable OpenSubdiv for surface subdivision\" ON)\n\noption(WITH_POTRACE \"Enable features relying on potrace\" ON)\noption(WITH_OPENVDB \"Enable features relying on OpenVDB\" ON)\noption(WITH_OPENVDB_BLOSC \"\\\nEnable blosc compression for OpenVDB, only enable if OpenVDB was built with blosc support\"\n  ON\n)\noption(WITH_OPENVDB_3_ABI_COMPATIBLE \"\\\nAssume OpenVDB library has been compiled with version 3 ABI compatibility\"\n  OFF\n)\nmark_as_advanced(WITH_OPENVDB_3_ABI_COMPATIBLE)\noption(WITH_NANOVDB \"Enable usage of NanoVDB data structure for rendering on the GPU\" ON)\noption(WITH_HARU \"Enable features relying on Libharu (Grease pencil PDF export)\" ON)\n\n# GHOST Windowing Library Options\noption(WITH_GHOST_DEBUG \"Enable debugging output for the GHOST library\" OFF)\nmark_as_advanced(WITH_GHOST_DEBUG)\n\noption(WITH_GHOST_SDL \"\\\nEnable building Blender against SDL for windowing rather than the native APIs\"\n  OFF\n)\nmark_as_advanced(WITH_GHOST_SDL)\n\nif(UNIX AND NOT (APPLE OR HAIKU))\n  option(WITH_GHOST_X11 \"Enable building Blender against X11 for windowing\" ON)\n  mark_as_advanced(WITH_GHOST_X11)\n\n  option(WITH_GHOST_WAYLAND \"Enable building Blender against Wayland for windowing\" ON)\n  mark_as_advanced(WITH_GHOST_WAYLAND)\n\n  if(WITH_GHOST_WAYLAND)\n    option(WITH_GHOST_WAYLAND_LIBDECOR \"Optionally build with LibDecor window decorations\" ON)\n    mark_as_advanced(WITH_GHOST_WAYLAND_LIBDECOR)\n\n    option(WITH_GHOST_WAYLAND_DYNLOAD \"Enable runtime dynamic WAYLAND libraries loading\" ON)\n    mark_as_advanced(WITH_GHOST_WAYLAND_DYNLOAD)\n\n    set(WITH_GHOST_WAYLAND_APP_ID \"\" CACHE STRING \"\\\nThe application ID used for Blender (use default when an empty string), \\\nthis can be used to differentiate Blender instances by version or branch for example.\"\n    )\n    mark_as_advanced(WITH_GHOST_WAYLAND_APP_ID)\n  endif()\nendif()\n\nif(WITH_GHOST_X11)\n  option(WITH_GHOST_XDND \"Enable drag'n'drop support on X11 using XDND protocol\" ON)\nendif()\n\n# Misc...\noption(WITH_HEADLESS \"Build without graphical support (renderfarm, server mode only)\" OFF)\nmark_as_advanced(WITH_HEADLESS)\n\noption(WITH_QUADRIFLOW \"Build with quadriflow remesher support\" ON)\n\noption(WITH_AUDASPACE \"\\\nBuild with blenders audio library (only disable if you know what you're doing!)\"\n  ON\n)\noption(WITH_SYSTEM_AUDASPACE \"\\\nBuild with external audaspace library installed on the system \\\n(only enable if you know what you're doing!)\"\n  OFF\n)\nmark_as_advanced(WITH_AUDASPACE)\nmark_as_advanced(WITH_SYSTEM_AUDASPACE)\n\nset_and_warn_dependency(WITH_AUDASPACE WITH_SYSTEM_AUDASPACE OFF)\n\noption(WITH_OPENMP \"Enable OpenMP (has to be supported by the compiler)\" ON)\nif(UNIX AND NOT APPLE)\n  option(WITH_OPENMP_STATIC \"Link OpenMP statically (only used by the release environment)\" OFF)\n  mark_as_advanced(WITH_OPENMP_STATIC)\nelseif(WIN32 AND CMAKE_C_COMPILER_ID MATCHES \"Clang\" AND CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\")\n  # At time of testing (LLVM 18.1.6) OMP is not included in public LLVM builds for Windows ARM64\n  set(WITH_OPENMP OFF)\n  set(WITH_OPENMP_STATIC OFF)\nendif()\n\nif(WITH_GHOST_X11)\n  option(WITH_X11_XINPUT \"Enable X11 Xinput (tablet support and unicode input)\" ON)\n  option(WITH_X11_XF86VMODE \"Enable X11 video mode switching\" ON)\n  option(WITH_X11_XFIXES \"Enable X11 XWayland cursor warping workaround\" ON)\nendif()\n\nif(UNIX AND NOT APPLE)\n  option(WITH_SYSTEM_FREETYPE \"Use the freetype library provided by the operating system\" OFF)\n  option(WITH_SYSTEM_EIGEN3 \"Use the systems Eigen3 library\" OFF)\nelse()\n  set(WITH_SYSTEM_FREETYPE OFF)\n  set(WITH_SYSTEM_EIGEN3 OFF)\nendif()\n\nif((NOT WITH_PYTHON_MODULE) AND (\n      (WIN32 AND (CMAKE_SYSTEM_PROCESSOR STREQUAL \"AMD64\")) OR\n      ((UNIX AND NOT APPLE) AND (CMAKE_SYSTEM_PROCESSOR STREQUAL \"x86_64\"))))\n  option(WITH_CPU_CHECK \"\\\nReport when a CPU is not compatible on startup \\\ninstead of failing to start with an inscrutable error.\"\n    ON\n  )\n  mark_as_advanced(WITH_CPU_CHECK)\nelse()\n  set(WITH_CPU_CHECK OFF)\nendif()\n\n# Modifiers\noption(WITH_MOD_FLUID \"Enable Mantaflow Fluid Simulation Framework\" ON)\noption(WITH_MOD_REMESH \"Enable Remesh Modifier\" ON)\noption(WITH_MOD_OCEANSIM \"Enable Ocean Modifier\" ON)\n\n# UV solvers.\noption(WITH_UV_SLIM \"SLIM UV unwrapping solver\" ON)\n\n# Image format support\noption(WITH_IMAGE_OPENEXR \"Enable OpenEXR Support (http://www.openexr.com)\" ON)\noption(WITH_IMAGE_OPENJPEG \"Enable OpenJpeg Support (http://www.openjpeg.org)\" ON)\noption(WITH_IMAGE_CINEON \"Enable CINEON and DPX Image Support\" ON)\noption(WITH_IMAGE_WEBP \"Enable WebP Image Support\" ON)\n\n# Audio/Video format support\noption(WITH_CODEC_FFMPEG \"Enable FFMPeg Support (http://ffmpeg.org)\" ON)\noption(WITH_CODEC_SNDFILE \"Enable libsndfile Support (http://www.mega-nerd.com/libsndfile)\" ON)\n\n# Alembic support\noption(WITH_ALEMBIC \"Enable Alembic Support\" ON)\n\n# Universal Scene Description support\noption(WITH_USD \"Enable Universal Scene Description (USD) Support\" ON)\n\n# MaterialX\noption(WITH_MATERIALX \"Enable MaterialX Support\" ON)\n\n# Hydra render engine\noption(WITH_HYDRA \"Enable Hydra render engine\" ON)\n\n# RTL Languages, Complex Shaping, OpenType Features\noption(WITH_FRIBIDI \"Enable features relying on fribidi\" OFF)\noption(WITH_HARFBUZZ \"Enable features relying on harfbuzz\" OFF)\n\n# 3D format support\n# Disable opencollada when we don't have precompiled libs\noption(WITH_OPENCOLLADA \"Enable OpenCollada Support (http://www.opencollada.org)\" ON)\noption(WITH_IO_WAVEFRONT_OBJ \"Enable Wavefront-OBJ 3D file format support (*.obj)\" ON)\noption(WITH_IO_PLY \"Enable PLY 3D file format support (*.ply)\" ON)\noption(WITH_IO_STL \"Enable STL 3D file format support (*.stl)\" ON)\noption(WITH_IO_GREASE_PENCIL \"Enable grease-pencil file format IO (*.svg, *.pdf)\" ON)\n\n# Sound output\noption(WITH_SDL \"Enable SDL for sound\" OFF)\noption(WITH_OPENAL \"Enable OpenAL Support (http://www.openal.org)\" ON)\nif(APPLE)\n  option(WITH_COREAUDIO \"Enable CoreAudio for audio support on macOS\" ON)\nelse()\n  set(WITH_COREAUDIO OFF)\nendif()\nif(NOT WIN32)\n  set(_option_default ON)\n  if(APPLE)\n    set(_option_default OFF)\n  endif()\n  option(WITH_JACK \"Enable JACK Support (http://www.jackaudio.org)\" ${_option_default})\n  unset(_option_default)\n  option(WITH_JACK_DYNLOAD \"Enable runtime dynamic JACK libraries loading\" OFF)\nelse()\n  set(WITH_JACK OFF)\nendif()\nif(UNIX AND NOT APPLE)\n  option(WITH_PULSEAUDIO \"Enable PulseAudio for audio support on Linux\" ON)\n  option(WITH_PULSEAUDIO_DYNLOAD \"Enable runtime dynamic PulseAudio libraries loading\" OFF)\n  option(WITH_PIPEWIRE \"Enable Pipewire for audio support on Linux\" ON)\n  option(WITH_PIPEWIRE_DYNLOAD \"Enable runtime dynamic Pipewire libraries loading\" OFF)\nelse()\n  set(WITH_PULSEAUDIO OFF)\n  set(WITH_PIPEWIRE OFF)\nendif()\nif(WIN32)\n  option(WITH_WASAPI \"Enable Windows Audio Sessions API for audio support on Windows\" ON)\nelse()\n  set(WITH_WASAPI OFF)\nendif()\n\n# Compression\noption(WITH_LZO \"Enable fast LZO compression (used for pointcache)\" ON)\noption(WITH_LZMA \"Enable best LZMA compression, (used for pointcache)\" ON)\nif(UNIX AND NOT APPLE)\n  option(WITH_SYSTEM_LZO \"Use the system LZO library\" OFF)\nendif()\noption(WITH_DRACO \"Enable Draco mesh compression Python module (used for glTF)\" ON)\n\n# Camera/motion tracking\noption(WITH_LIBMV \"Enable Libmv structure from motion library\" ON)\noption(WITH_LIBMV_SCHUR_SPECIALIZATIONS \"Enable fixed-size schur specializations.\" ON)\nmark_as_advanced(WITH_LIBMV_SCHUR_SPECIALIZATIONS)\n\n# Logging/unbit test libraries.\noption(WITH_SYSTEM_GFLAGS \"Use system-wide Gflags instead of a bundled one\" OFF)\noption(WITH_SYSTEM_GLOG \"Use system-wide Glog instead of a bundled one\" OFF)\nmark_as_advanced(WITH_SYSTEM_GFLAGS)\nmark_as_advanced(WITH_SYSTEM_GLOG)\n\n# Freestyle\noption(WITH_FREESTYLE \"Enable Freestyle (advanced edges rendering)\" ON)\n\n# Libraries.\nif(UNIX AND NOT APPLE)\n  # Optionally build without pre-compiled libraries.\n  # NOTE: this could be supported on all platforms however in practice UNIX is the only platform\n  # that has good support for detecting installed libraries.\n  option(WITH_LIBS_PRECOMPILED \"\\\nDetect and link against pre-compiled libraries (typically found under \\\"../lib/\\\"). \\\nDisabling this option will use the system libraries although cached paths \\\nthat point to pre-compiled libraries will be left as-is.\"\n    ON\n  )\n  mark_as_advanced(WITH_LIBS_PRECOMPILED)\n\n  option(WITH_STATIC_LIBS \"\\\nTry to link with static libraries, as much as possible, \\\nto make blender more portable across distributions\"\n    OFF\n  )\n  if(WITH_STATIC_LIBS)\n    option(WITH_BOOST_ICU \"\\\nBoost uses ICU library (required for linking with static Boost built with libicu).\"\n      OFF\n    )\n    mark_as_advanced(WITH_BOOST_ICU)\n  endif()\nendif()\n\n# Misc\nif(WIN32 OR APPLE OR ((UNIX AND (NOT HAIKU)) AND WITH_GHOST_WAYLAND))\n  option(WITH_INPUT_IME \"Enable Input Method Editor (IME) for complex Asian character input\" ON)\nelse()\n  set(WITH_INPUT_IME OFF)\nendif()\noption(WITH_INPUT_NDOF \"Enable NDOF input devices (SpaceNavigator and friends)\" ON)\n# On Windows and for the Blender application on macOS, portable install\n# is the only supported installation type, so there is no option.\nif(UNIX AND (NOT APPLE OR WITH_PYTHON_MODULE))\n  option(WITH_INSTALL_PORTABLE \"\\\nInstall redistributable runtime, otherwise install into CMAKE_INSTALL_PREFIX\"\n    ON\n  )\nendif()\n\noption(WITH_PYTHON_INSTALL \"Copy system python into the blender install directory\" ON)\n\noption(WITH_INSTALL_COPYRIGHT \"\\\nCopy the official Blender Authors's copyright.txt into the Blender install directory\"\n  OFF\n)\nmark_as_advanced(WITH_INSTALL_COPYRIGHT)\n\nif((WITH_AUDASPACE AND NOT WITH_SYSTEM_AUDASPACE) OR WITH_MOD_FLUID)\n  option(WITH_PYTHON_NUMPY \"Include NumPy in Blender (used by Audaspace and Mantaflow)\" ON)\nendif()\n\nif(WIN32 OR APPLE)\n  # Windows and macOS have this bundled with Python libraries.\nelseif(WITH_PYTHON_INSTALL OR WITH_PYTHON_NUMPY)\n  set(PYTHON_NUMPY_PATH \"\" CACHE PATH \"\\\nPath to python site-packages or dist-packages containing 'numpy' module\"\n  )\n  mark_as_advanced(PYTHON_NUMPY_PATH)\n  set(PYTHON_NUMPY_INCLUDE_DIRS \"\" CACHE PATH \"Path to the include directory of the NumPy module\")\n  mark_as_advanced(PYTHON_NUMPY_INCLUDE_DIRS)\nendif()\nif(WITH_PYTHON_INSTALL)\n  option(WITH_PYTHON_INSTALL_NUMPY \"Copy system NumPy into the blender install directory\" ON)\n\n  if(UNIX AND NOT APPLE)\n    option(WITH_PYTHON_INSTALL_REQUESTS \"\\\nCopy system requests into the blender install directory\"\n      ON\n    )\n    set(PYTHON_REQUESTS_PATH \"\" CACHE PATH \"\\\nPath to python site-packages or dist-packages containing 'requests' module\"\n    )\n    mark_as_advanced(PYTHON_REQUESTS_PATH)\n  endif()\n\n  option(WITH_PYTHON_INSTALL_ZSTANDARD \"Copy zstandard into the blender install directory\" ON)\n  set(PYTHON_ZSTANDARD_PATH \"\" CACHE PATH \"\\\nPath to python site-packages or dist-packages containing 'zstandard' module\"\n  )\n  mark_as_advanced(PYTHON_ZSTANDARD_PATH)\nendif()\n\noption(WITH_CPU_SIMD \"Enable SIMD instruction if they're detected on the host machine\" ON)\nmark_as_advanced(WITH_CPU_SIMD)\n\n# Cycles\noption(WITH_CYCLES \"Enable Cycles Render Engine\" ON)\noption(WITH_CYCLES_OSL \"Build Cycles with OpenShadingLanguage support\" ON)\noption(WITH_CYCLES_PATH_GUIDING \"Build Cycles with path guiding support\" ON)\noption(WITH_CYCLES_EMBREE \"Build Cycles with Embree support\" ON)\noption(WITH_CYCLES_LOGGING \"Build Cycles with logging support\" ON)\noption(WITH_CYCLES_DEBUG \"Build Cycles with options useful for debugging (e.g., MIS)\" OFF)\n\noption(WITH_CYCLES_STANDALONE \"Build Cycles standalone application\" OFF)\noption(WITH_CYCLES_STANDALONE_GUI \"Build Cycles standalone with GUI\" OFF)\noption(WITH_CYCLES_PRECOMPUTE \"Build Cycles data precomputation tool\" OFF)\n\noption(WITH_CYCLES_HYDRA_RENDER_DELEGATE \"Build Cycles Hydra render delegate\" OFF)\n\noption(WITH_CYCLES_DEBUG_NAN \"\\\nBuild Cycles with additional asserts for detecting NaNs and invalid values\"\n  OFF\n)\noption(WITH_CYCLES_NATIVE_ONLY \"\\\nBuild Cycles with native kernel only (which fits current CPU, use for development only)\"\n  OFF\n)\noption(WITH_CYCLES_KERNEL_ASAN \"\\\nBuild Cycles kernels with address sanitizer when WITH_COMPILER_ASAN is on, even if it's very slow\"\n  OFF\n)\nset(CYCLES_TEST_DEVICES CPU CACHE STRING \"\\\nRun regression tests on the specified device types (CPU CUDA OPTIX HIP)\"\n)\noption(WITH_CYCLES_TEST_OSL \"\\\nRun additional Cycles test with OSL enabled\"\n  OFF\n)\nmark_as_advanced(WITH_CYCLES_KERNEL_ASAN)\nmark_as_advanced(WITH_CYCLES_LOGGING)\nmark_as_advanced(WITH_CYCLES_DEBUG_NAN)\nmark_as_advanced(WITH_CYCLES_NATIVE_ONLY)\nmark_as_advanced(WITH_CYCLES_PRECOMPUTE)\nmark_as_advanced(CYCLES_TEST_DEVICES)\nmark_as_advanced(WITH_CYCLES_TEST_OSL)\n\n# NVIDIA CUDA & OptiX\nif(NOT APPLE AND NOT (WIN32 AND CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\"))\n  option(WITH_CYCLES_DEVICE_CUDA \"Enable Cycles NVIDIA CUDA compute support\" ON)\n  option(WITH_CYCLES_DEVICE_OPTIX \"Enable Cycles NVIDIA OptiX support\" ON)\n  mark_as_advanced(WITH_CYCLES_DEVICE_CUDA)\n\n  option(WITH_CYCLES_CUDA_BINARIES \"Build Cycles NVIDIA CUDA binaries\" OFF)\n  set(CYCLES_CUDA_BINARIES_ARCH\n    sm_30 sm_35 sm_37 sm_50 sm_52 sm_60 sm_61 sm_70 sm_75 sm_86 sm_89 compute_75\n    CACHE STRING \"CUDA architectures to build binaries for\"\n  )\n  option(WITH_CYCLES_CUDA_BUILD_SERIAL \"\\\nBuild cubins one after another (useful on machines with limited RAM)\"\n    OFF\n  )\n  option(WITH_CUDA_DYNLOAD \"\\\nDynamically load CUDA libraries at runtime (for developers, makes cuda-gdb work)\"\n    ON\n  )\n\n  set(OPTIX_ROOT_DIR \"\" CACHE PATH \"\\\nPath to the OptiX SDK root directory, for building Cycles OptiX kernels.\"\n  )\n  set(CYCLES_RUNTIME_OPTIX_ROOT_DIR \"\" CACHE PATH \"\\\nPath to the OptiX SDK root directory. \\\nWhen set, this path will be used at runtime to compile OptiX kernels.\"\n  )\n\n  mark_as_advanced(CYCLES_CUDA_BINARIES_ARCH)\n  mark_as_advanced(WITH_CYCLES_CUDA_BUILD_SERIAL)\n  mark_as_advanced(WITH_CUDA_DYNLOAD)\n  mark_as_advanced(OPTIX_ROOT_DIR)\n  mark_as_advanced(CYCLES_RUNTIME_OPTIX_ROOT_DIR)\nendif()\n\n# AMD HIP\nif(NOT APPLE AND NOT (WIN32 AND CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\"))\n  option(WITH_CYCLES_DEVICE_HIP \"Enable Cycles AMD HIP support\" ON)\n  option(WITH_CYCLES_HIP_BINARIES \"Build Cycles AMD HIP binaries\" OFF)\n  # We only support RDNA1 (gfx101X) and newer. Vega and older generations have rendering artifacts and crashing issues.\n  set(CYCLES_HIP_BINARIES_ARCH\n    gfx1010 gfx1011 gfx1012\n    gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1036\n    gfx1100 gfx1101 gfx1102 gfx1103 gfx1150 gfx1151\n    CACHE STRING \"AMD HIP architectures to build binaries for\"\n  )\n  mark_as_advanced(WITH_CYCLES_DEVICE_HIP)\n  mark_as_advanced(CYCLES_HIP_BINARIES_ARCH)\n\n  option(WITH_CYCLES_DEVICE_HIPRT \"Enable Cycles AMD HIPRT support\" OFF)\n  mark_as_advanced(WITH_CYCLES_DEVICE_HIPRT)\nendif()\n\n# Apple Metal\nif(APPLE)\n  option(WITH_CYCLES_DEVICE_METAL \"Enable Cycles Apple Metal compute support\" ON)\nendif()\n\n# oneAPI\nif(NOT APPLE AND NOT (WIN32 AND CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\"))\n  option(WITH_CYCLES_DEVICE_ONEAPI \"Enable Cycles oneAPI compute support\" OFF)\n  option(WITH_CYCLES_ONEAPI_BINARIES \"\\\nEnable Ahead-Of-Time compilation for Cycles oneAPI device\"\n    OFF\n  )\n  option(WITH_CYCLES_ONEAPI_HOST_TASK_EXECUTION \"\\\nSwitch target of oneAPI implementation from SYCL devices to Host Task (single thread on CPU). \\\nThis option is only for debugging purposes.\"\n    OFF\n  )\n\n  # https://www.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top/compilation/ahead-of-time-compilation.html\n  # The supported devices can be retrieved from `ocloc` output when running\n  # `ocloc compile --help`.\n  set(CYCLES_ONEAPI_INTEL_BINARIES_ARCH dg2 mtl lnl bmg CACHE STRING \"\\\noneAPI Intel GPU architectures to build binaries for\"\n  )\n  set(CYCLES_ONEAPI_SYCL_TARGETS spir64 spir64_gen CACHE STRING \"\\\noneAPI targets to build AOT binaries for\"\n  )\n\n  mark_as_advanced(WITH_CYCLES_ONEAPI_HOST_TASK_EXECUTION)\n  mark_as_advanced(CYCLES_ONEAPI_INTEL_BINARIES_ARCH)\n  mark_as_advanced(CYCLES_ONEAPI_SYCL_TARGETS)\nendif()\n\n# Draw Manager\noption(WITH_DRAW_DEBUG \"Add extra debug capabilities to Draw Manager\" OFF)\nmark_as_advanced(WITH_DRAW_DEBUG)\n\n# LLVM\noption(WITH_LLVM \"Use LLVM\" OFF)\noption(LLVM_STATIC \"Link with LLVM static libraries\" OFF)\nmark_as_advanced(LLVM_STATIC)\noption(WITH_CLANG \"Use Clang\" OFF)\n\n# disable for now, but plan to support on all platforms eventually\noption(WITH_MEM_JEMALLOC \"Enable malloc replacement (http://www.canonware.com/jemalloc)\" ON)\nmark_as_advanced(WITH_MEM_JEMALLOC)\n\n# currently only used for BLI_mempool\noption(WITH_MEM_VALGRIND \"Enable extended valgrind support for better reporting\" OFF)\nmark_as_advanced(WITH_MEM_VALGRIND)\n\noption(WITH_ASSERT_ABORT \"Call abort() when raising an assertion through BLI_assert()\" ON)\nmark_as_advanced(WITH_ASSERT_ABORT)\n\noption(WITH_ASSERT_RELEASE \"Build with asserts enabled even for non-debug configurations\" OFF)\nmark_as_advanced(WITH_ASSERT_RELEASE)\n\nif(UNIX OR (CMAKE_GENERATOR MATCHES \"^Visual Studio.+\"))\n  option(WITH_CLANG_TIDY \"\\\nUse Clang Tidy to analyze the source code \\\n(only enable for development on Linux using Clang, or Windows using the Visual Studio IDE)\"\n    OFF\n  )\n  mark_as_advanced(WITH_CLANG_TIDY)\nendif()\n\noption(WITH_BOOST \"Enable features depending on boost\" ON)\noption(WITH_TBB \"\\\nEnable multi-threading. TBB is also required for features such as Cycles, OpenVDB and USD\"\n  ON\n)\n\n# TBB malloc is only supported on for windows currently\nif(WIN32 AND NOT CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\")\n  option(WITH_TBB_MALLOC_PROXY \"Enable the TBB malloc replacement\" ON)\nendif()\n\noption(WITH_EXPERIMENTAL_FEATURES \"Enable experimental features\" ON)\n\n# This should be turned off when Blender enter beta/rc/release\nif(\"${BLENDER_VERSION_CYCLE}\" STREQUAL \"alpha\" AND WITH_EXPERIMENTAL_FEATURES)\n  set(WITH_EXPERIMENTAL_FEATURES ON)\nelse()\n  set(WITH_EXPERIMENTAL_FEATURES OFF)\nendif()\n\n# Unit testing\noption(WITH_GTESTS \"Enable GTest unit testing\" OFF)\noption(WITH_GPU_RENDER_TESTS \"\\\nEnable GPU render related unit testing (EEVEE, Workbench and Grease Pencil)\"\n  OFF\n)\noption(WITH_GPU_RENDER_TESTS_VULKAN \"\\\nEnable GPU render related unit testing using Vulkan\"\n  OFF\n)\nmark_as_advanced(WITH_GPU_RENDER_TESTS_VULKAN)\noption(WITH_GPU_RENDER_TESTS_SILENT \"\\\nRun GPU render tests silently (finished tests will pass). \\\nGenerated report will show failing tests\"\n  ON\n)\noption(WITH_GPU_BACKEND_TESTS \"\\\nEnable GPU backend related unit testing\"\n  OFF\n)\noption(WITH_GPU_DRAW_TESTS \"\\\nEnable GPU drawing related unit testing (draw manager)\"\n  OFF\n)\noption(WITH_GPU_COMPOSITOR_TESTS \"Enable regression testing for GPU compositor\" OFF)\nif(UNIX AND NOT (APPLE OR HAIKU))\n  option(WITH_UI_TESTS \"\\\nEnable user-interface tests using a headless display server. \\\nCurrently this depends on WITH_GHOST_WAYLAND and the weston compositor \\\n(Experimental)\"\n    OFF\n  )\n  option(WITH_LINUX_OFFICIAL_RELEASE_TESTS \"\\\nEnable sanity check tests for the linux official release. \\\nThese test are only relevant for checking that our offical Linux releases are portable and \\\npackaged properly. For example that we don't link to any unexpected system libraries.\"\n    OFF\n  )\nelse()\n  # TODO: support running GUI tests on other platforms.\n  set(WITH_UI_TESTS OFF)\n  # TODO: We should probaby add more sanity checks for Windows and Mac as well\n  set(WITH_LINUX_OFFICIAL_RELEASE_TESTS OFF)\nendif()\n\n# Enabled by default for typical use cases to speed up development cycles. However, when looking\n# into threading or memory related issues (in dependency graph, out-of-bounds, etc) forcing single\n# test per Blender instance could give much better clues about the root of the problem.\noption(WITH_TESTS_BATCHED \"\\\nRun multiple tests in a single Blender invocation, for faster test execution\"\n  ON\n)\nmark_as_advanced(WITH_TESTS_BATCHED)\n\noption(WITH_TESTS_SINGLE_BINARY \"\\\nLink GTest tests into a single binary. \\\nFor faster overall build and less disk space, but slower individual test build\"\n  ON\n)\nmark_as_advanced(WITH_TESTS_SINGLE_BINARY)\n\n# NOTE: All callers of this must add `TEST_PYTHON_EXE_EXTRA_ARGS` before any other arguments.\nset(TEST_PYTHON_EXE \"\" CACHE PATH \"Python executable to run unit tests\")\nmark_as_advanced(TEST_PYTHON_EXE)\n\n\n# System python tests.\noption(WITH_SYSTEM_PYTHON_TESTS \"\\\nEnable tests validating some build-related scripts against the 'system' version of Python \\\n(buildbots currently can use significantly older versions of Python than Blender's)\"\n  OFF\n)\nmark_as_advanced(WITH_SYSTEM_PYTHON_TESTS)\n# We could use `find_package (Python3 COMPONENTS Interpreter)` to set that value automatically.\n# However, on some buildbots this will give the default python version of the current virtual environment,\n# which may differ from the OS default python version.\n# And it would set that global 'python3 exec path' CMake value for all CMake scripts, which could have\n# unexpected and dangerous side effects.\n# So this has to be set explicitly for all builders.\nset(TEST_SYSTEM_PYTHON_EXE \"\" CACHE PATH \"Python executable used to run 'system python' tests\")\nmark_as_advanced(TEST_SYSTEM_PYTHON_EXE)\n\n\n# Documentation\nif(UNIX AND NOT APPLE)\n  option(WITH_DOC_MANPAGE \"Create a manual page (Unix manpage)\" OFF)\nendif()\n\n\n# GPU Module\noption(WITH_RENDERDOC \"Use Renderdoc API to capture frames\" OFF)\n\noption(WITH_GPU_SHADER_ASSERT \"\\\nGlobally enable in-shader asserts.\n(Requires a debug build or setting GPU_FORCE_ENABLE_SHADER_PRINTF to 1)\"\n  OFF\n)\n\nmark_as_advanced(\n  WITH_RENDERDOC\n  WITH_GPU_SHADER_ASSERT\n)\n\nif(POLICY CMP0119)\n  option(WITH_GPU_SHADER_CPP_COMPILATION \"\\\n  Compiler shaders using C++. \\\n  Allows testing Metal compilation on other platform and enable C++ IDE support for shader code\"\n    OFF\n  )\n  mark_as_advanced(WITH_GPU_SHADER_CPP_COMPILATION)\nelse()\n  set(WITH_GPU_SHADER_CPP_COMPILATION OFF)\nendif()\n\n\n# OpenGL\nif(NOT APPLE)\n  option(WITH_OPENGL_BACKEND \"Enable OpenGL support as graphic backend\" ON)\n  mark_as_advanced(WITH_OPENGL_BACKEND)\nelse()\n  set(WITH_OPENGL_BACKEND OFF)\nendif()\n\n# Vulkan\noption(WITH_VULKAN_BACKEND \"Enable Vulkan as graphics backend (experimental)\" ON)\nmark_as_advanced(WITH_VULKAN_BACKEND)\nif(APPLE)\n  option(WITH_VULKAN_MOLTENVK \"Enable Vulkan over MoltenVK (development option)\" OFF)\n  mark_as_advanced(WITH_VULKAN_MOLTENVK)\nendif()\n\nif(APPLE AND NOT WITH_VULKAN_MOLTENVK)\n  set(WITH_VULKAN_BACKEND OFF)\nendif()\nif(NOT WITH_EXPERIMENTAL_FEATURES)\n  if(APPLE)\n    set(WITH_VULKAN_MOLTENVK OFF)\n    set(WITH_VULKAN_BACKEND OFF)\n  endif()\nendif()\n\n# Metal\nif(APPLE)\n  option(WITH_METAL_BACKEND \"\\\nUse Metal for graphics instead of (or as well as) OpenGL on macOS.\"\n    ON\n  )\n  mark_as_advanced(WITH_METAL_BACKEND)\nelse()\n  set(WITH_METAL_BACKEND OFF)\nendif()\n\nif(WIN32)\n  getDefaultWindowsPrefixBase(CMAKE_GENERIC_PROGRAM_FILES)\n  set(CPACK_INSTALL_PREFIX ${CMAKE_GENERIC_PROGRAM_FILES}/${})\nendif()\n\noption(WITH_STRSIZE_DEBUG \"\\\nEnsure string operations on fixed size buffers \\\n(works well with with \\\"WITH_COMPILER_ASAN\\\" & valgrind to detect incorrect buffer size arguments)\"\n  OFF)\nmark_as_advanced(WITH_STRSIZE_DEBUG)\n\n# Compiler tool-chain.\nif(UNIX)\n  if(CMAKE_COMPILER_IS_GNUCC)\n    option(WITH_LINKER_GOLD \"Use ld.gold linker which is usually faster than ld.bfd\" ON)\n    mark_as_advanced(WITH_LINKER_GOLD)\n  endif()\n  if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    option(WITH_LINKER_LLD \"Use ld.lld linker which is usually faster than ld.gold\" OFF)\n    mark_as_advanced(WITH_LINKER_LLD)\n    option(WITH_LINKER_MOLD \"Use ld.mold linker which is usually faster than ld.gold & ld.lld\" OFF)\n    mark_as_advanced(WITH_LINKER_MOLD)\n  endif()\nendif()\n\noption(WITH_COMPILER_ASAN \"\\\nBuild and link against address sanitizer (only for Debug & RelWithDebInfo targets).\"\n  OFF\n)\nmark_as_advanced(WITH_COMPILER_ASAN)\noption(WITH_COMPILER_ASAN_EXTERN \"\\\nBuild `extern` dependencies with address sanitizer when WITH_COMPILER_ASAN is on. \\\nCan cause linking issues due to too large binary size.\"\n  OFF\n)\nmark_as_advanced(WITH_COMPILER_ASAN_EXTERN)\nset_and_warn_incompatible(WITH_COMPILER_ASAN WITH_MEM_JEMALLOC OFF)\nset_and_warn_incompatible(WITH_COMPILER_ASAN WITH_MEM_VALGRIND OFF)\nset_and_warn_incompatible(WITH_COMPILER_ASAN_EXTERN WITH_MEM_JEMALLOC OFF)\nset_and_warn_incompatible(WITH_COMPILER_ASAN_EXTERN WITH_MEM_VALGRIND OFF)\n\noption(WITH_COMPILER_CODE_COVERAGE \"\\\nBuild and link with code coverage support (only for Debug targets).\"\n  OFF\n)\nmark_as_advanced(WITH_COMPILER_CODE_COVERAGE)\n\nif(WITH_COMPILER_CODE_COVERAGE)\n  if(NOT CMAKE_COMPILER_IS_GNUCC)\n    message(\"WITH_COMPILER_CODE_COVERAGE only works with GCC currently.\")\n    set(WITH_COMPILER_CODE_COVERAGE OFF)\n  endif()\nendif()\n\nif(WITH_COMPILER_CODE_COVERAGE)\n  set(_code_coverage_defaults \"--coverage\")\n  set(COMPILER_CODE_COVERAGE_CFLAGS ${_code_coverage_defaults} CACHE STRING \"C flags for code coverage\")\n  mark_as_advanced(COMPILER_CODE_COVERAGE_CFLAGS)\n  set(COMPILER_CODE_COVERAGE_CXXFLAGS ${_code_coverage_defaults} CACHE STRING \"C++ flags for code coverage\")\n  mark_as_advanced(COMPILER_CODE_COVERAGE_CXXFLAGS)\n  unset(_code_coverage_defaults)\nendif()\n\nif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  if(WITH_COMPILER_ASAN)\n    set(_asan_defaults \"\\\n-fsanitize=address \\\n-fsanitize=bool \\\n-fsanitize=bounds \\\n-fsanitize=enum \\\n-fsanitize=float-cast-overflow \\\n-fsanitize=float-divide-by-zero \\\n-fsanitize=nonnull-attribute \\\n-fsanitize=returns-nonnull-attribute \\\n-fsanitize=signed-integer-overflow \\\n-fsanitize=undefined \\\n-fsanitize=vla-bound \\\n-fno-sanitize=alignment \\\n\")\n\n    if(MSVC)\n      # clang-cl doesn't support all sanitizers, but leak and object-size give errors/warnings.\n      set(_asan_defaults \"${_asan_defaults}\")\n    elseif(APPLE)\n      # AppleClang doesn't support all sanitizers, but leak gives error.\n      # Build type is not known for multi-config generator, so don't add object-size sanitizer.\n      if(CMAKE_BUILD_TYPE MATCHES \"Debug\" OR GENERATOR_IS_MULTI_CONFIG)\n        # Silence the warning that object-size is not effective in -O0.\n        set(_asan_defaults \"${_asan_defaults}\")\n      else()\n        string(APPEND _asan_defaults \" -fsanitize=object-size\")\n      endif()\n    elseif(CMAKE_COMPILER_IS_GNUCC)\n      string(APPEND _asan_defaults \" -fsanitize=leak -fsanitize=object-size\")\n    else()\n      string(APPEND _asan_defaults \" -fsanitize=leak\")\n    endif()\n\n    set(COMPILER_ASAN_CFLAGS \"${_asan_defaults}\" CACHE STRING \"C flags for address sanitizer\")\n    mark_as_advanced(COMPILER_ASAN_CFLAGS)\n    set(COMPILER_ASAN_CXXFLAGS \"${_asan_defaults}\" CACHE STRING \"C++ flags for address sanitizer\")\n    mark_as_advanced(COMPILER_ASAN_CXXFLAGS)\n\n    unset(_asan_defaults)\n\n    if(MSVC)\n      find_library(\n        COMPILER_ASAN_LIBRARY NAMES clang_rt.asan-x86_64\n        PATHS\n        [HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Wow6432Node\\\\LLVM\\\\LLVM;]/lib/clang/7.0.0/lib/windows\n        [HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Wow6432Node\\\\LLVM\\\\LLVM;]/lib/clang/6.0.0/lib/windows\n      )\n      mark_as_advanced(COMPILER_ASAN_LIBRARY)\n    elseif(APPLE)\n      execute_process(COMMAND ${CMAKE_CXX_COMPILER}\n        -print-file-name=lib\n        OUTPUT_VARIABLE CLANG_LIB_DIR\n      )\n      string(STRIP \"${CLANG_LIB_DIR}\" CLANG_LIB_DIR)\n      find_library(\n        COMPILER_ASAN_LIBRARY\n        NAMES\n          libclang_rt.asan_osx_dynamic.dylib\n        PATHS\n          \"${CLANG_LIB_DIR}/darwin/\"\n      )\n      unset(CLANG_LIB_DIR)\n      mark_as_advanced(COMPILER_ASAN_LIBRARY)\n    elseif(CMAKE_COMPILER_IS_GNUCC)\n      find_library(\n        COMPILER_ASAN_LIBRARY asan ${CMAKE_C_IMPLICIT_LINK_DIRECTORIES}\n      )\n      mark_as_advanced(COMPILER_ASAN_LIBRARY)\n    endif()\n\n  endif()\nendif()\n\nif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  option(WITH_COMPILER_SHORT_FILE_MACRO \"\\\nMake paths in macros like __FILE__ relative to top level source and build directories.\"\n    ON\n  )\n  mark_as_advanced(WITH_COMPILER_SHORT_FILE_MACRO)\nendif()\n\nif(WIN32)\n  # Use hardcoded paths or find_package to find externals\n  option(WITH_WINDOWS_FIND_MODULES \"Use find_package to locate libraries\" OFF)\n  mark_as_advanced(WITH_WINDOWS_FIND_MODULES)\n\n  option(WINDOWS_PYTHON_DEBUG \"\\\nInclude the files needed for debugging python scripts with visual studio 2017+.\"\n    OFF\n  )\n  mark_as_advanced(WINDOWS_PYTHON_DEBUG)\n\n  option(WITH_WINDOWS_BUNDLE_CRT \"Bundle the C runtime for install free distribution.\" ON)\n  mark_as_advanced(WITH_WINDOWS_BUNDLE_CRT)\n\n  option(WITH_WINDOWS_EXTERNAL_MANIFEST \"Use external manifest files\" OFF)\n  mark_as_advanced(WITH_WINDOWS_EXTERNAL_MANIFEST)\n\n  option(WITH_WINDOWS_SCCACHE \"Use sccache to speed up builds (Ninja builder only)\" OFF)\n  mark_as_advanced(WITH_WINDOWS_SCCACHE)\n\n  option(WITH_WINDOWS_RELEASE_PDB \"\\\nGenerate a pdb file for client side stacktraces for release builds\"\n    ON\n  )\n  mark_as_advanced(WITH_WINDOWS_RELEASE_PDB)\n\n  option(WITH_WINDOWS_RELEASE_STRIPPED_PDB \"Use a stripped PDB file for release builds\" ON)\n  mark_as_advanced(WITH_WINDOWS_RELEASE_STRIPPED_PDB)\n\nendif()\n\nif(WIN32 OR XCODE)\n  option(IDE_GROUP_SOURCES_IN_FOLDERS \"\\\nOrganize the source files in filters matching the source directory.\"\n    ON\n  )\n  mark_as_advanced(IDE_GROUP_SOURCES_IN_FOLDERS)\n\n  option(IDE_GROUP_PROJECTS_IN_FOLDERS \"\\\nOrganize the projects according to source directory structure.\"\n    ON\n  )\n  mark_as_advanced(IDE_GROUP_PROJECTS_IN_FOLDERS)\n\n  if(IDE_GROUP_PROJECTS_IN_FOLDERS)\n    set_property(GLOBAL PROPERTY USE_FOLDERS ON)\n  endif()\nendif()\n\nif(UNIX)\n  # See WITH_WINDOWS_SCCACHE for Windows.\n  option(WITH_COMPILER_CCACHE \"\\\nUse ccache to improve rebuild times (Works with Ninja, Makefiles and Xcode)\"\n    OFF\n  )\n  mark_as_advanced(WITH_COMPILER_CCACHE)\nendif()\n\n# The following only works with the Ninja generator in CMake >= 3.0.\nif(\"${CMAKE_GENERATOR}\" MATCHES \"Ninja\")\n  option(WITH_NINJA_POOL_JOBS \"\\\nEnable Ninja pools of jobs, to try to ease building on machines with 16GB of RAM or less \\\n(if not yet defined, will try to set best values based on detected machine specifications).\"\n    ON\n  )\n  mark_as_advanced(WITH_NINJA_POOL_JOBS)\nendif()\n\n# Installation process.\nset(POSTINSTALL_SCRIPT \"\" CACHE FILEPATH \"Run given CMake script after installation process\")\nmark_as_advanced(POSTINSTALL_SCRIPT)\n\nset(POSTCONFIGURE_SCRIPT \"\" CACHE FILEPATH \"\\\nRun given CMake script as the last step of CMake configuration\"\n)\nmark_as_advanced(POSTCONFIGURE_SCRIPT)\n\n# end option(...)\n\n\n\n# By default we want to install to the directory we are compiling our executables\n# unless specified otherwise, which we currently do not allow\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  if(WIN32)\n    set(CMAKE_INSTALL_PREFIX ${EXECUTABLE_OUTPUT_PATH}/\\${BUILD_TYPE} CACHE PATH \"\\\ndefault install path\"\n      FORCE\n    )\n  elseif(APPLE)\n    set(CMAKE_INSTALL_PREFIX ${EXECUTABLE_OUTPUT_PATH}/\\${BUILD_TYPE} CACHE PATH \"\\\ndefault install path\"\n      FORCE\n    )\n  else()\n    if(WITH_INSTALL_PORTABLE)\n      set(CMAKE_INSTALL_PREFIX ${EXECUTABLE_OUTPUT_PATH} CACHE PATH \"default install path\" FORCE)\n    endif()\n  endif()\nendif()\n\n# Effective install path including config directory, as a generator expression.\nget_property(GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(GENERATOR_IS_MULTI_CONFIG)\n  string(\n    REPLACE \"\\${BUILD_TYPE}\" \"$<CONFIG>\"\n    CMAKE_INSTALL_PREFIX_WITH_CONFIG ${CMAKE_INSTALL_PREFIX}\n  )\nelse()\n  string(\n    REPLACE \"\\${BUILD_TYPE}\" \"\"\n    CMAKE_INSTALL_PREFIX_WITH_CONFIG ${CMAKE_INSTALL_PREFIX}\n  )\nendif()\n\n\n# Apple\n\nif(APPLE)\n  include(platform_apple_xcode)\nendif()\n\n\n# -----------------------------------------------------------------------------\n# Check for Conflicting/Unsupported Configurations\n\noption(WITH_STRICT_BUILD_OPTIONS \"\\\nWhen requirements for a build option are not met, error instead of disabling the option.\"\n  OFF\n)\n\nif(NOT WITH_BLENDER AND NOT WITH_CYCLES_STANDALONE AND NOT WITH_CYCLES_HYDRA_RENDER_DELEGATE)\n  message(FATAL_ERROR\n    \"At least one of WITH_BLENDER or WITH_CYCLES_STANDALONE \"\n    \"or WITH_CYCLES_HYDRA_RENDER_DELEGATE \"\n    \"must be enabled, nothing to do!\"\n  )\nendif()\n\nset_and_warn_dependency(WITH_AUDASPACE WITH_OPENAL OFF)\nset_and_warn_dependency(WITH_AUDASPACE WITH_COREAUDIO OFF)\nset_and_warn_dependency(WITH_AUDASPACE WITH_JACK OFF)\nset_and_warn_dependency(WITH_AUDASPACE WITH_PULSEAUDIO OFF)\nset_and_warn_dependency(WITH_AUDASPACE WITH_WASAPI OFF)\n\nif(NOT WITH_SDL AND WITH_GHOST_SDL)\n  message(FATAL_ERROR \"WITH_GHOST_SDL requires WITH_SDL\")\nendif()\n\n# python module, needs some different options\nif(WITH_PYTHON_MODULE AND WITH_PYTHON_INSTALL)\n  message(FATAL_ERROR \"WITH_PYTHON_MODULE requires WITH_PYTHON_INSTALL to be OFF\")\nendif()\n\nset_and_warn_dependency(WITH_PYTHON WITH_CYCLES        OFF)\nset_and_warn_dependency(WITH_PYTHON WITH_DRACO         OFF)\nset_and_warn_dependency(WITH_PYTHON WITH_MOD_FLUID     OFF)\n\n# enable boost for cycles, audaspace or i18n\n# otherwise if the user disabled\n\nset_and_warn_dependency(WITH_BOOST WITH_INTERNATIONAL  OFF)\nset_and_warn_dependency(WITH_BOOST WITH_OPENVDB        OFF)\nset_and_warn_dependency(WITH_BOOST WITH_QUADRIFLOW     OFF)\nset_and_warn_dependency(WITH_BOOST WITH_USD            OFF)\nif(WITH_CYCLES)\n  set_and_warn_dependency(WITH_BOOST   WITH_CYCLES_OSL          OFF)\n  set_and_warn_dependency(WITH_PUGIXML WITH_CYCLES_OSL          OFF)\n  set_and_warn_dependency(WITH_PUGIXML WITH_CYCLES_STANDALONE   OFF)\n  set_and_warn_dependency(WITH_CYCLES_OSL WITH_CYCLES_TEST_OSL  OFF)\nendif()\n\nset_and_warn_dependency(WITH_TBB WITH_CYCLES            OFF)\nset_and_warn_dependency(WITH_TBB WITH_USD               OFF)\nset_and_warn_dependency(WITH_TBB WITH_OPENVDB           OFF)\nset_and_warn_dependency(WITH_TBB WITH_MOD_FLUID         OFF)\n\n# NanoVDB requires OpenVDB to convert the data structure\nset_and_warn_dependency(WITH_OPENVDB WITH_NANOVDB       OFF)\n\n# OpenVDB, Alembic and OSL uses 'half' or 'imath' from OpenEXR\nset_and_warn_dependency(WITH_IMAGE_OPENEXR WITH_OPENVDB OFF)\nset_and_warn_dependency(WITH_IMAGE_OPENEXR WITH_ALEMBIC OFF)\nset_and_warn_dependency(WITH_IMAGE_OPENEXR WITH_CYCLES_OSL OFF)\n\n# Hydra requires USD.\nset_and_warn_dependency(WITH_USD WITH_HYDRA OFF)\n\n# The Ocean modifier requires FFTW3.\nset_and_warn_dependency(WITH_FFTW3 WITH_MOD_OCEANSIM OFF)\n\nif(NOT WITH_CYCLES)\n  set(WITH_CYCLES_OSL OFF)\nendif()\n\n# don't store paths to libs for portable distribution\nif(WITH_INSTALL_PORTABLE)\n  set(CMAKE_SKIP_BUILD_RPATH TRUE)\nendif()\n\nif(UNIX AND NOT (APPLE OR HAIKU))\n  set_and_warn_incompatible(WITH_HEADLESS WITH_GHOST_WAYLAND OFF)\n  set_and_warn_incompatible(WITH_HEADLESS WITH_GHOST_X11 OFF)\nendif()\nset_and_warn_incompatible(WITH_HEADLESS WITH_GHOST_SDL OFF)\n\nif(WITH_INPUT_IME)\n  set_and_warn_incompatible(WITH_HEADLESS WITH_INPUT_IME OFF)\n  set_and_warn_incompatible(WITH_GHOST_SDL WITH_INPUT_IME OFF)\nendif()\n\nset_and_warn_incompatible(WITH_HEADLESS WITH_XR_OPENXR OFF)\nset_and_warn_incompatible(WITH_GHOST_SDL WITH_XR_OPENXR OFF)\n\nif(WITH_UI_TESTS)\n  set_and_warn_dependency(WITH_GHOST_WAYLAND WITH_UI_TESTS OFF)\nendif()\n\nif(WITH_BUILDINFO)\n  find_package(Git)\n  set_and_warn_library_found(\"Git\" GIT_FOUND WITH_BUILDINFO)\nendif()\n\nif(WITH_AUDASPACE)\n  if(NOT WITH_SYSTEM_AUDASPACE)\n    set(AUDASPACE_C_INCLUDE_DIRS\n      \"${CMAKE_SOURCE_DIR}/extern/audaspace/bindings/C\"\n      \"${CMAKE_BINARY_DIR}/extern/audaspace\"\n    )\n    set(AUDASPACE_PY_INCLUDE_DIRS\n      \"${CMAKE_SOURCE_DIR}/extern/audaspace/bindings\"\n    )\n  endif()\nendif()\n\n# Auto-enable CUDA dynload if toolkit is not found.\nif(WITH_CYCLES AND WITH_CYCLES_DEVICE_CUDA AND NOT WITH_CUDA_DYNLOAD)\n  find_package(CUDA)\n  if(NOT CUDA_FOUND)\n    message(\n      STATUS\n      \"CUDA toolkit not found, \"\n      \"using dynamic runtime loading of libraries (WITH_CUDA_DYNLOAD) instead\"\n    )\n    set(WITH_CUDA_DYNLOAD ON)\n  endif()\nendif()\n\nif(WITH_CYCLES_DEVICE_HIP)\n  # Currently HIP must be dynamically loaded, this may change in future toolkits\n  set(WITH_HIP_DYNLOAD ON)\nendif()\n\n\n# -----------------------------------------------------------------------------\n# Check if Sub-modules are Cloned\n\nif(WITH_PYTHON)\n  # While we have this as an '#error' in 'bpy_capi_utils.hh',\n  # upgrading Python tends to cause confusion for users who build.\n  # Give the error message early to make this more obvious.\n  #\n  # Do this before main 'platform_*' checks,\n  # because UNIX will search for the old Python paths which may not exist.\n  # giving errors about missing paths before this case is met.\n  if(DEFINED PYTHON_VERSION AND \"${PYTHON_VERSION}\" VERSION_LESS \"3.11\")\n    message(\n      FATAL_ERROR\n      \"At least Python 3.11 is required to build, but found Python ${PYTHON_VERSION}\"\n    )\n  endif()\nendif()\n\n\n# -----------------------------------------------------------------------------\n# InitialIze Un-cached Vars, Avoid Unused Warning\n\n# linux only, not cached\nset(WITH_BINRELOC OFF)\n\n# MACOSX only, set to avoid uninitialized\nset(EXETYPE \"\")\n\n# C/C++ flags\nset(PLATFORM_CFLAGS)\n\n# these are added to later on.\nset(C_WARNINGS)\nset(CXX_WARNINGS)\n\n# NOTE: These flags are intended for situations where where it's impractical to\n# suppress warnings by modifying the code or for code which is maintained externally.\n# For GCC this typically means adding `-Wno-*` arguments to negate warnings\n# that are useful in the general case.\nset(C_REMOVE_STRICT_FLAGS)\nset(CXX_REMOVE_STRICT_FLAGS)\n\n# Libraries to link to targets in setup_platform_linker_libs\nset(PLATFORM_LINKLIBS \"\")\n\n# Added to target linker flags in setup_platform_linker_flags\n# - CMAKE_EXE_LINKER_FLAGS\n# - CMAKE_EXE_LINKER_FLAGS_DEBUG\nset(PLATFORM_LINKFLAGS \"\")\nset(PLATFORM_LINKFLAGS_DEBUG \"\")\nset(PLATFORM_LINKFLAGS_RELEASE \"\")\nset(PLATFORM_LINKFLAGS_EXECUTABLE \"\")\n\nif(WITH_COMPILER_CODE_COVERAGE)\n  string(APPEND CMAKE_C_FLAGS_DEBUG \" ${COMPILER_CODE_COVERAGE_CFLAGS}\")\n  string(APPEND CMAKE_CXX_FLAGS_DEBUG \" ${COMPILER_CODE_COVERAGE_CXXFLAGS}\")\nendif()\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Release\")\n  if(WITH_COMPILER_ASAN)\n    if(NOT APPLE)\n      # Avoid passing address sanitizer compiler flags to `try_compile`.\n      # Since linker flags are not set, all compiler checks and `find_package`\n      # calls that rely on `try_compile` will fail.\n      # See CMP0066 also.\n      string(APPEND CMAKE_C_FLAGS_DEBUG \" ${COMPILER_ASAN_CFLAGS}\")\n      string(APPEND CMAKE_C_FLAGS_RELWITHDEBINFO \" ${COMPILER_ASAN_CFLAGS}\")\n\n      string(APPEND CMAKE_CXX_FLAGS_DEBUG \" ${COMPILER_ASAN_CXXFLAGS}\")\n      string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO \" ${COMPILER_ASAN_CXXFLAGS}\")\n    endif()\n    if(MSVC)\n      set(COMPILER_ASAN_LINKER_FLAGS \"/FUNCTIONPADMIN:6\")\n    endif()\n\n    if(APPLE AND COMPILER_ASAN_LIBRARY)\n      string(REPLACE \" \" \";\" _list_COMPILER_ASAN_CFLAGS ${COMPILER_ASAN_CFLAGS})\n      set(_is_CONFIG_DEBUG \"$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>\")\n      add_compile_options(\"$<${_is_CONFIG_DEBUG}:${_list_COMPILER_ASAN_CFLAGS}>\")\n\n      # Skip generation of the unwind tables, as they might require a lot of space when sanitizers\n      # are enabled and not fit into the .eh_frame section. Disabling the unwind tables might have\n      # side effects on code which does frame walking, such as\n      #   - backtrace()\n      #   - __attribute__((__cleanup__(f)))\n      #   - __builtin_return_address(n), for n > 0\n      #   - pthread_cleanup_push when it is implemented using __attribute__((__cleanup__(f)))\n      # It should not have affect on debugging, since it uses -g flag which generates debugging\n      # tables in the .debug_frame section.\n      # At the time of adding these flags calling backtrace() from C code on Apple M2 did not\n      # affect on the printed backtrace, and exception handling was correct as well.\n      #\n      # Related discussion:\n      #  https://stackoverflow.com/questions/26300819\n      add_compile_options(\"$<${_is_CONFIG_DEBUG}:-fno-unwind-tables>\")\n      add_compile_options(\"$<${_is_CONFIG_DEBUG}:-fno-asynchronous-unwind-tables>\")\n\n      add_compile_options(\"$<${_is_CONFIG_DEBUG}:-fno-omit-frame-pointer>\")\n      add_link_options(\"$<${_is_CONFIG_DEBUG}:-fno-omit-frame-pointer;-fsanitize=address>\")\n      unset(_list_COMPILER_ASAN_CFLAGS)\n      unset(_is_CONFIG_DEBUG)\n    elseif(COMPILER_ASAN_LIBRARY)\n      set(PLATFORM_LINKLIBS \"${PLATFORM_LINKLIBS};${COMPILER_ASAN_LIBRARY}\")\n      set(PLATFORM_LINKFLAGS \"${COMPILER_ASAN_LIBRARY}\")\n      set(PLATFORM_LINKFLAGS_DEBUG \"${COMPILER_ASAN_LIBRARY}\")\n      if(DEFINED COMPILER_ASAN_LINKER_FLAGS)\n        set(PLATFORM_LINKFLAGS \"${PLATFORM_LINKFLAGS} ${COMPILER_ASAN_LINKER_FLAGS}\")\n        set(PLATFORM_LINKFLAGS_DEBUG \"${PLATFORM_LINKFLAGS_DEBUG} ${COMPILER_ASAN_LINKER_FLAGS}\")\n      endif()\n    endif()\n  endif()\nendif()\n\n# Test SIMD support, before platform includes to determine if sse2neon is needed.\nif(WITH_CPU_SIMD)\n  set(COMPILER_SSE42_FLAG)\n\n  # Test Neon first since macOS Arm can compile and run x86-64 SSE binaries.\n  test_neon_support()\n  if(NOT SUPPORT_NEON_BUILD)\n    test_sse_support(COMPILER_SSE42_FLAG)\n  endif()\nendif()\n\n\n# ----------------------------------------------------------------------------\n# Main Platform Checks\n#\n# - UNIX\n# - WIN32\n# - APPLE\n\nif(UNIX AND NOT APPLE)\n  include(platform_unix)\nelseif(WIN32)\n  include(platform_win32)\nelseif(APPLE)\n  include(platform_apple)\nendif()\n\n\n# -----------------------------------------------------------------------------\n# Common Checks for Compatible Options\n\nif(WITH_INTERNATIONAL)\n  if(NOT WITH_BOOST)\n    message(\n      FATAL_ERROR\n      \"Internationalization requires WITH_BOOST, the library may not have been found. \"\n      \"Configure BOOST or disable WITH_INTERNATIONAL\"\n    )\n  endif()\nendif()\n\n# Enable SIMD support if detected by `test_sse_support()` or `test_neon_support()`.\n#\nif(WITH_CPU_SIMD)\n  if(SUPPORT_NEON_BUILD)\n    # Neon\n    if(SSE2NEON_FOUND)\n      include_directories(SYSTEM \"${SSE2NEON_INCLUDE_DIRS}\")\n      add_definitions(-DWITH_SSE2NEON)\n    endif()\n  else()\n    # SSE\n    if(SUPPORT_SSE42_BUILD)\n      string(APPEND CMAKE_CXX_FLAGS \" ${COMPILER_SSE42_FLAG}\")\n      string(APPEND CMAKE_C_FLAGS \" ${COMPILER_SSE42_FLAG}\")\n      # MSVC doesn't define any of these and only does the AVX and higher flags.\n      # For consistency we define these flags for MSVC.\n      if(WIN32)\n        add_compile_definitions(\n          __MMX__\n          __SSE__\n          __SSE2__\n          __SSE3__\n          __SSE4_1__\n          __SSE4_2__\n        )\n      endif()\n    endif()\n  endif()\nendif()\n\n# Print instructions used on first run.\nif(FIRST_RUN)\n  if(WITH_CPU_SIMD)\n    if(SUPPORT_NEON_BUILD)\n      if(SSE2NEON_FOUND)\n        message(STATUS \"Neon SIMD instructions enabled\")\n      else()\n        message(STATUS \"Neon SIMD instructions detected but unused, requires sse2neon\")\n      endif()\n    elseif(SUPPORT_SSE42_BUILD)\n      message(STATUS \"SSE42 SIMD instructions enabled\")\n    else()\n      message(STATUS \"No SIMD instructions detected\")\n    endif()\n  else()\n    message(STATUS \"SIMD instructions disabled\")\n  endif()\nendif()\n\n# set the endian define\nif(MSVC)\n  # for some reason this fails on msvc\n  add_definitions(-D__LITTLE_ENDIAN__)\n\n  # OSX-Note: as we do cross-compiling with specific set architecture,\n  # endianness-detection and auto-setting is counterproductive\n  # so we just set endianness according CMAKE_OSX_ARCHITECTURES\n\nelseif(CMAKE_OSX_ARCHITECTURES MATCHES i386 OR\n       CMAKE_OSX_ARCHITECTURES MATCHES x86_64 OR\n       CMAKE_OSX_ARCHITECTURES MATCHES arm64)\n  add_definitions(-D__LITTLE_ENDIAN__)\nelseif(CMAKE_OSX_ARCHITECTURES MATCHES ppc OR CMAKE_OSX_ARCHITECTURES MATCHES ppc64)\n  add_definitions(-D__BIG_ENDIAN__)\n\nelse()\n  include(TestBigEndian)\n  test_big_endian(_SYSTEM_BIG_ENDIAN)\n  if(_SYSTEM_BIG_ENDIAN)\n    add_definitions(-D__BIG_ENDIAN__)\n  else()\n    add_definitions(-D__LITTLE_ENDIAN__)\n  endif()\n  unset(_SYSTEM_BIG_ENDIAN)\nendif()\nif(WITH_IMAGE_OPENJPEG)\n  # Special handling of Windows platform where openjpeg is always static.\n  if(WIN32)\n    set(OPENJPEG_DEFINES \"-DOPJ_STATIC\")\n  else()\n    set(OPENJPEG_DEFINES \"\")\n  endif()\nendif()\n\nif(NOT WITH_SYSTEM_EIGEN3)\n  set(EIGEN3_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/extern/Eigen3)\nendif()\n\nif(WITH_OPENVDB)\n  list(APPEND OPENVDB_DEFINITIONS -DWITH_OPENVDB)\n\n  if(WITH_OPENVDB_3_ABI_COMPATIBLE)\n    list(APPEND OPENVDB_DEFINITIONS -DOPENVDB_3_ABI_COMPATIBLE)\n  endif()\n\n  # OpenVDB headers use deprecated TBB headers, silence warning.\n  list(APPEND OPENVDB_DEFINITIONS -DTBB_SUPPRESS_DEPRECATED_MESSAGES=1)\n\n  list(APPEND OPENVDB_INCLUDE_DIRS\n    ${BOOST_INCLUDE_DIR}\n    ${TBB_INCLUDE_DIRS}\n    ${OPENEXR_INCLUDE_DIRS}\n  )\n\n  list(APPEND OPENVDB_LIBRARIES ${OPENEXR_LIBRARIES} ${ZLIB_LIBRARIES})\n\n  if(WITH_OPENVDB_BLOSC)\n    list(APPEND OPENVDB_DEFINITIONS -DWITH_OPENVDB_BLOSC)\n    # Even when `WITH_OPENVDB_BLOSC` is set, `FindBlosc.cmake` isn't running.\n    # As this might be used at some point, check the libraries are defined.\n    if(DEFINED BLOSC_LIBRARIES)\n      list(APPEND OPENVDB_LIBRARIES ${BLOSC_LIBRARIES})\n    endif()\n    list(APPEND OPENVDB_LIBRARIES ${ZLIB_LIBRARIES})\n  endif()\n\n  list(APPEND OPENVDB_LIBRARIES ${BOOST_LIBRARIES} ${TBB_LIBRARIES})\nendif()\n\n# -----------------------------------------------------------------------------\n# Configure Metal\n\nif(WITH_METAL_BACKEND)\n  add_definitions(-DWITH_METAL_BACKEND)\n\n  # No need to add frameworks here, all the ones we need for Metal and\n  # Metal-OpenGL Interop are already being added by\n  # build_files/cmake/platform/platform_apple.cmake\nendif()\n\n\n# -----------------------------------------------------------------------------\n# Configure OpenMP\n\nif(WITH_OPENMP)\n  if(NOT OPENMP_CUSTOM)\n    find_package(OpenMP)\n  endif()\n\n  set_and_warn_library_found(\"OpenMP\" OPENMP_FOUND WITH_OPENMP)\n\n  if(OPENMP_FOUND)\n    if(NOT WITH_OPENMP_STATIC)\n      string(APPEND CMAKE_C_FLAGS \" ${OpenMP_C_FLAGS}\")\n      string(APPEND CMAKE_CXX_FLAGS \" ${OpenMP_CXX_FLAGS}\")\n      if(DEFINED OpenMP_LINKER_FLAGS)\n        string(APPEND CMAKE_EXE_LINKER_FLAGS \" ${OpenMP_LINKER_FLAGS}\")\n        string(APPEND CMAKE_MODULE_LINKER_FLAGS \" ${OpenMP_LINKER_FLAGS}\")\n      endif()\n    else()\n      # Typically avoid adding flags as defines but we can't\n      # pass OpenMP flags to the linker for static builds, meaning\n      # we can't add any OpenMP related flags to CFLAGS variables\n      # since they're passed to the linker as well.\n      add_definitions(\"${OpenMP_C_FLAGS}\")\n\n      find_library_static(OpenMP_LIBRARIES gomp ${CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES})\n      mark_as_advanced(\n        OpenMP_LIBRARIES\n      )\n    endif()\n  endif()\n\n  mark_as_advanced(\n    OpenMP_C_FLAGS\n    OpenMP_CXX_FLAGS\n  )\nendif()\n\n\n# -----------------------------------------------------------------------------\n# Configure Bullet\n\nif(WITH_BULLET)\n  if(WITH_SYSTEM_BULLET)\n    find_package(Bullet)\n    set_and_warn_library_found(\"Bullet\" BULLET_FOUND WITH_BULLET)\n  else()\n    set(BULLET_INCLUDE_DIRS \"${CMAKE_SOURCE_DIR}/extern/bullet2/src\")\n    set(BULLET_LIBRARIES \"extern_bullet\")\n  endif()\nendif()\n\n\n# -----------------------------------------------------------------------------\n# Configure Python\n\n# Not currently supported due to different required Python link flags.\nset_and_warn_incompatible(WITH_PYTHON_MODULE WITH_GTESTS OFF)\n\n\n# -----------------------------------------------------------------------------\n# Configure `GLog/GFlags`\n\nif(WITH_LIBMV OR WITH_GTESTS OR (WITH_CYCLES AND WITH_CYCLES_LOGGING))\n  if(WITH_SYSTEM_GFLAGS)\n    find_package(Gflags)\n    if(NOT GFLAGS_FOUND)\n      message(FATAL_ERROR \"System wide Gflags is requested but was not found\")\n    endif()\n    # `FindGflags` does not define this, and we are not even sure what to use here.\n    set(GFLAGS_DEFINES)\n  else()\n    set(GFLAGS_DEFINES\n      -DGFLAGS_DLL_DEFINE_FLAG=\n      -DGFLAGS_DLL_DECLARE_FLAG=\n      -DGFLAGS_DLL_DECL=\n    )\n    set(GFLAGS_NAMESPACE \"gflags\")\n    set(GFLAGS_LIBRARIES extern_gflags)\n    set(GFLAGS_INCLUDE_DIRS \"${PROJECT_SOURCE_DIR}/extern/gflags/src\")\n  endif()\n\n  if(WITH_SYSTEM_GLOG)\n    find_package(Glog)\n    if(NOT GLOG_FOUND)\n      message(FATAL_ERROR \"System wide Glog is requested but was not found\")\n    endif()\n    # `FindGlog` does not define this, and we are not even sure what to use here.\n    set(GLOG_DEFINES)\n  else()\n    set(GLOG_DEFINES\n      -DGOOGLE_GLOG_DLL_DECL=\n    )\n    set(GLOG_LIBRARIES extern_glog)\n    if(WIN32)\n      set(GLOG_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/extern/glog/src/windows)\n    else()\n      set(GLOG_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/extern/glog/include)\n    endif()\n  endif()\nendif()\n\n# -----------------------------------------------------------------------------\n# Common dependency targets\n\ninclude(dependency_targets)\n\n# -----------------------------------------------------------------------------\n# Ninja Job Limiting\n\n# Extra limits to number of jobs running in parallel for some kind os tasks.\n# Only supported by Ninja build system currently.\n\nif(\"${CMAKE_GENERATOR}\" MATCHES \"Ninja\" AND WITH_NINJA_POOL_JOBS)\n  if(NOT NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS AND\n     NOT NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS AND\n     NOT NINJA_MAX_NUM_PARALLEL_LINK_JOBS)\n    # Try to define good default values.\n    # Max mem of heavy cpp files compilation: about 2.5GB\n    # Max mem during linking: about 3.3GB\n    cmake_host_system_information(RESULT _NUM_CORES QUERY NUMBER_OF_LOGICAL_CORES)\n    # Note: this gives mem in MB.\n    cmake_host_system_information(RESULT _TOT_MEM QUERY TOTAL_PHYSICAL_MEMORY)\n\n    # Heuristics: Assume 8Gb of RAM is needed per heavy compile job.\n    # Typical RAM peak usage of these is actually less than 3GB currently,\n    # but this also accounts for the part of the physical RAM being used by other unrelated\n    # processes on the system, and the part being used by the 'regular' compile and linking jobs.\n    #\n    # Also always cap heavy jobs amount to `number of available threads - 1`,\n    # to ensure that even if there would be enough RAM, the machine never ends up\n    # handling only heavy jobs at some point.\n    # This can have annoying sides effects, like lack of output in the console for several\n    # minutes, which can lead to a wrong detection of 'unresponsive' state by the build-bots e.g.\n    #\n    # Currently, these settings applied to a 64GB/16threads linux machine will use,\n    # for a full build:\n    #   - release build:\n    #      * RAM: typically less than 20%, with some peaks at 25%.\n    #      * CPU: over 90% of usage on average over the whole build time.\n    #   - debug with ASAN build:\n    #      * RAM: typically less than 40%, with some peaks at 50%.\n    #      * CPU: over 90% of usage on average over the whole build time.\n    math(EXPR _compile_heavy_jobs \"${_TOT_MEM} / 8000\")\n    math(EXPR _compile_heavy_jobs_max \"${_NUM_CORES} - 1\")\n    if(${_compile_heavy_jobs} GREATER ${_compile_heavy_jobs_max})\n      set(_compile_heavy_jobs ${_compile_heavy_jobs_max})\n    elseif(${_compile_heavy_jobs} LESS 1)\n      set(_compile_heavy_jobs 1)\n    endif()\n    set(NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS \"${_compile_heavy_jobs}\" CACHE STRING \"\\\nDefine the maximum number of concurrent heavy compilation jobs, for ninja build system \\\n(used for some targets which cpp files can take several GB each during compilation).\"\n      FORCE\n    )\n    mark_as_advanced(NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS)\n    set(_compile_heavy_jobs)\n    set(_compile_heavy_jobs_max)\n\n    # Heuristics: Assume 2Gb of RAM is needed per heavy compile job.\n    # Typical RAM peak usage of these is actually way less than 1GB usually,\n    # but this also accounts for the part of the physical RAM being used by other unrelated\n    # processes on the system, and the part being used by the 'heavy' compile and linking jobs.\n    #\n    # If there are 'enough' cores available, cap the maximum number of regular jobs to\n    # `number of cores - 1`, otherwise allow using all cores if there is enough RAM available.\n    # This allows to ensure that the heavy jobs won't get starved by too many normal jobs,\n    # since the former usually take a long time to process.\n    math(EXPR _compile_jobs \"${_TOT_MEM} / 2000\")\n    if(${_NUM_CORES} GREATER 3)\n      math(EXPR _compile_jobs_max \"${_NUM_CORES} - 1\")\n    else()\n      set(_compile_jobs_max ${_NUM_CORES})\n    endif()\n    if(${_compile_jobs} GREATER ${_compile_jobs_max})\n      set(_compile_jobs ${_compile_jobs_max})\n    elseif(${_compile_jobs} LESS 1)\n      set(_compile_jobs 1)\n    endif()\n    set(NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS \"${_compile_jobs}\" CACHE STRING\n        \"Define the maximum number of concurrent compilation jobs, for ninja build system.\" FORCE)\n    mark_as_advanced(NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS)\n    set(_compile_jobs)\n    set(_compile_jobs_max)\n\n    # In practice, even when there is RAM available,\n    # this proves to be quicker than running in parallel (due to slow disks accesses).\n    set(NINJA_MAX_NUM_PARALLEL_LINK_JOBS \"1\" CACHE STRING\n        \"Define the maximum number of concurrent link jobs, for ninja build system.\" FORCE)\n    mark_as_advanced(NINJA_MAX_NUM_PARALLEL_LINK_JOBS)\n\n    set(_NUM_CORES)\n    set(_TOT_MEM)\n  endif()\n\n  if(NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS)\n    set_property(\n      GLOBAL APPEND PROPERTY\n      JOB_POOLS compile_job_pool=${NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS}\n    )\n    set(CMAKE_JOB_POOL_COMPILE compile_job_pool)\n  endif()\n\n  if(NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS)\n    set_property(\n      GLOBAL APPEND PROPERTY\n      JOB_POOLS compile_heavy_job_pool=${NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS}\n    )\n  endif()\n\n  if(NINJA_MAX_NUM_PARALLEL_LINK_JOBS)\n    set_property(\n      GLOBAL APPEND PROPERTY\n      JOB_POOLS link_job_pool=${NINJA_MAX_NUM_PARALLEL_LINK_JOBS}\n    )\n    set(CMAKE_JOB_POOL_LINK link_job_pool)\n  endif()\nendif()\n\n\n# -----------------------------------------------------------------------------\n# Extra Compile Flags\n\nif(CMAKE_COMPILER_IS_GNUCC)\n\n  add_check_c_compiler_flags(\n    C_WARNINGS\n\n    C_WARN_ALL -Wall\n    C_WARN_ERROR_IMPLICIT_FUNCTION_DECLARATION -Werror=implicit-function-declaration\n\n    # System headers sometimes do this, disable for now, was: `-Werror=strict-prototypes`.\n    C_WARN_STRICT_PROTOTYPES -Wstrict-prototypes\n\n    C_WARN_ERROR_RETURN_TYPE -Werror=return-type\n    C_WARN_ERROR_VLA -Werror=vla\n    C_WARN_MISSING_PROTOTYPES -Wmissing-prototypes\n    C_WARN_NO_CHAR_SUBSCRIPTS -Wno-char-subscripts\n    C_WARN_NO_UNKNOWN_PRAGMAS -Wno-unknown-pragmas\n    C_WARN_POINTER_ARITH -Wpointer-arith\n    C_WARN_UNUSED_PARAMETER -Wunused-parameter\n    C_WARN_WRITE_STRINGS -Wwrite-strings\n    C_WARN_LOGICAL_OP -Wlogical-op\n    C_WARN_UNDEF -Wundef\n\n    # Needs: `-Wuninitialized`.\n    C_WARN_INIT_SELF -Winit-self\n\n    C_WARN_MISSING_INCLUDE_DIRS -Wmissing-include-dirs\n    C_WARN_NO_DIV_BY_ZERO -Wno-div-by-zero\n    C_WARN_TYPE_LIMITS -Wtype-limits\n    C_WARN_FORMAT_SIGN -Wformat-signedness\n    C_WARN_RESTRICT -Wrestrict\n\n    # Useful but too many false positives and inconvenient to suppress each occurrence.\n    C_WARN_NO_STRINGOP_OVERREAD -Wno-stringop-overread\n    C_WARN_NO_STRINGOP_OVERFLOW -Wno-stringop-overflow\n\n    # C-only.\n    C_WARN_NO_NULL -Wnonnull\n    C_WARN_ABSOLUTE_VALUE -Wabsolute-value\n\n    C_WARN_UNINITIALIZED -Wuninitialized\n    C_WARN_REDUNDANT_DECLS -Wredundant-decls\n    C_WARN_SHADOW -Wshadow\n\n    # Disable because it gives warnings for printf() & friends.\n    # C_WARN_DOUBLE_PROMOTION \"-Wdouble-promotion -Wno-error=double-promotion\"\n\n    # Use `ATTR_FALLTHROUGH` macro to suppress.\n    C_WARN_IMPLICIT_FALLTHROUGH -Wimplicit-fallthrough=5\n  )\n\n  if(NOT APPLE)\n    add_check_c_compiler_flags(\n      C_WARNINGS\n      C_WARN_NO_ERROR_UNUSED_BUT_SET_VARIABLE -Wno-error=unused-but-set-variable\n    )\n  endif()\n\n  add_check_cxx_compiler_flags(\n    CXX_WARNINGS\n\n    CXX_WARN_UNINITIALIZED -Wuninitialized\n    CXX_WARN_REDUNDANT_DECLS -Wredundant-decls\n\n    CXX_WARN_ALL -Wall\n    CXX_WARN_NO_INVALID_OFFSETOF -Wno-invalid-offsetof\n    CXX_WARN_NO_SIGN_COMPARE -Wno-sign-compare\n    CXX_WARN_LOGICAL_OP -Wlogical-op\n\n    # Needs: `-Wuninitialized`.\n    CXX_WARN_INIT_SELF -Winit-self\n\n    CXX_WARN_MISSING_INCLUDE_DIRS -Wmissing-include-dirs\n    CXX_WARN_NO_DIV_BY_ZERO -Wno-div-by-zero\n    CXX_WARN_TYPE_LIMITS -Wtype-limits\n    CXX_WARN_ERROR_RETURN_TYPE -Werror=return-type\n    CXX_WARN_NO_CHAR_SUBSCRIPTS -Wno-char-subscripts\n    CXX_WARN_NO_UNKNOWN_PRAGMAS -Wno-unknown-pragmas\n    CXX_WARN_POINTER_ARITH -Wpointer-arith\n    CXX_WARN_UNUSED_PARAMETER -Wunused-parameter\n    CXX_WARN_WRITE_STRINGS -Wwrite-strings\n    CXX_WARN_UNDEF -Wundef\n    CXX_WARN_COMMA_SUBSCRIPT -Wcomma-subscript\n    CXX_WARN_FORMAT_SIGN -Wformat-signedness\n    CXX_WARN_RESTRICT -Wrestrict\n    CXX_WARN_NO_SUGGEST_OVERRIDE -Wno-suggest-override\n    CXX_WARN_UNINITIALIZED -Wuninitialized\n\n    # NOTE(@ideasman42): In GCC 13.2.1 on Linux this causes internal compiler errors.\n    # The crashes can be resolved by disabling the flag per module (but not via pragmas).\n    # However this also causes a type mix-up FreeStyle  (Blender & FreeStyle's `Curve`)\n    # so it seems to impact GCC's the internal state enough that it's too risky to enable.\n    # When this is resolved the check can be enabled for fixed GCC versions.\n    #\n    # Prevents linking errors with MSVC.\n    # `CXX_WARN_MISMATCHED_TAGS -Wmismatched-tags`\n\n    # Useful but too many false positives and inconvenient to suppress each occurrence.\n    CXX_WARN_NO_STRINGOP_OVERREAD -Wno-stringop-overread\n    CXX_WARN_NO_STRINGOP_OVERFLOW -Wno-stringop-overflow\n\n    # Use `[[fallthrough]]` or `ATTR_FALLTHROUGH` macro to suppress.\n    CXX_WARN_IMPLICIT_FALLTHROUGH -Wimplicit-fallthrough=5\n  )\n\n  # causes too many warnings\n  if(NOT APPLE)\n    add_check_cxx_compiler_flags(\n      CXX_WARNINGS\n      CXX_WARN_UNDEF -Wundef\n      CXX_WARN_MISSING_DECLARATIONS -Wmissing-declarations\n    )\n  endif()\n\n  # ---------------------\n  # Suppress Strict Flags\n  #\n  # Exclude the following warnings from this list:\n  # - `-Wno-address`:\n  #   This can give useful hints that point to bugs/misleading logic.\n  # - `-Wno-strict-prototypes`:\n  #   No need to support older C-style prototypes.\n  #\n  # If code in `./extern/` needs to suppress these flags that can be done on a case-by-case basis.\n\n  # flags to undo strict flags\n  add_check_c_compiler_flags(\n    C_REMOVE_STRICT_FLAGS\n\n    C_WARN_NO_DEPRECATED_DECLARATIONS -Wno-deprecated-declarations\n    C_WARN_NO_UNUSED_PARAMETER -Wno-unused-parameter\n    C_WARN_NO_UNUSED_FUNCTION -Wno-unused-function\n    C_WARN_NO_TYPE_LIMITS -Wno-type-limits\n    C_WARN_NO_INT_IN_BOOL_CONTEXT -Wno-int-in-bool-context\n    C_WARN_NO_FORMAT -Wno-format\n    C_WARN_NO_SWITCH -Wno-switch\n    C_WARN_NO_UNUSED_VARIABLE -Wno-unused-variable\n    C_WARN_NO_UNUSED_VARIABLE -Wno-uninitialized\n    C_WARN_NO_IMPLICIT_FALLTHROUGH -Wno-implicit-fallthrough\n  )\n\n\n  add_check_cxx_compiler_flags(\n    CXX_REMOVE_STRICT_FLAGS\n\n    CXX_WARN_NO_CLASS_MEMACCESS -Wno-class-memaccess\n    CXX_WARN_NO_COMMENT -Wno-comment\n    CXX_WARN_NO_UNUSED_TYPEDEFS -Wno-unused-local-typedefs\n    CXX_WARN_NO_UNUSED_VARIABLE -Wno-unused-variable\n    CXX_WARN_NO_UNUSED_VARIABLE -Wno-uninitialized\n  )\n\n\n  if(NOT APPLE)\n    add_check_c_compiler_flags(\n      C_REMOVE_STRICT_FLAGS\n      C_WARN_NO_ERROR_UNUSED_BUT_SET_VARIABLE -Wno-error=unused-but-set-variable\n    )\n  endif()\n\nelseif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  # Matches both \"Clang\" & \"AppleClang\" on macOS.\n\n  add_check_c_compiler_flags(\n    C_WARNINGS\n\n    # Strange, clang complains these are not supported, but then uses them.\n    C_WARN_ALL -Wall\n    C_WARN_ERROR_IMPLICIT_FUNCTION_DECLARATION -Werror=implicit-function-declaration\n    C_WARN_ERROR_RETURN_TYPE -Werror=return-type\n    C_WARN_NO_AUTOLOGICAL_COMPARE -Wno-tautological-compare\n    C_WARN_NO_UNKNOWN_PRAGMAS -Wno-unknown-pragmas\n    C_WARN_NO_CHAR_SUBSCRIPTS -Wno-char-subscripts\n    C_WARN_STRICT_PROTOTYPES -Wstrict-prototypes\n    C_WARN_MISSING_PROTOTYPES -Wmissing-prototypes\n    C_WARN_UNUSED_PARAMETER -Wunused-parameter\n    C_WARN_UNDEF -Wundef\n    C_WARN_UNDEF_PREFIX -Wundef-prefix\n\n    C_WARN_ERROR_UNGUARDED_AVAILABILITY_NEW -Werror=unguarded-availability-new\n  )\n\n  add_check_cxx_compiler_flags(\n    CXX_WARNINGS\n\n    CXX_WARN_ALL -Wall\n    # Using C++20 features while having C++17 as the project language isn't allowed by MSVC.\n    CXX_CXX20_DESIGNATOR -Wc++20-designator\n\n    CXX_WARN_NO_AUTOLOGICAL_COMPARE -Wno-tautological-compare\n    CXX_WARN_NO_UNKNOWN_PRAGMAS -Wno-unknown-pragmas\n    CXX_WARN_NO_CHAR_SUBSCRIPTS -Wno-char-subscripts\n\n    # We get a lot of these, if its a problem a dev needs to look into it.\n    CXX_WARN_NO_OVERLOADED_VIRTUAL -Wno-overloaded-virtual\n\n    CXX_WARN_NO_SIGN_COMPARE -Wno-sign-compare\n    CXX_WARN_NO_INVALID_OFFSETOF -Wno-invalid-offsetof\n\n    # Apple Clang (tested on version 12) doesn't support this flag while LLVM Clang 11 does.\n    CXX_WARN_NO_SUGGEST_OVERRIDE -Wno-suggest-override\n\n    CXX_WARN_UNDEF -Wundef\n    CXX_WARN_UNDEF_PREFIX -Wundef-prefix\n    CXX_WARN_UNUSED_PARAMETER -Wunused-parameter\n\n    # Prevents linking errors with MSVC.\n    CXX_WARN_MISMATCHED_TAGS -Wmismatched-tags\n\n    # Gives too many unfixable warnings.\n    # `C_WARN_UNUSED_MACROS -Wunused-macros`\n    # `CXX_WARN_UNUSED_MACROS -Wunused-macros`\n\n    CXX_WARN_ERROR_UNGUARDED_AVAILABILITY_NEW -Werror=unguarded-availability-new\n  )\n  if(MSVC_CLANG)\n    # clang-cl produces an unhealthy ammount of warnings in its default\n    # configuration as it for reasons unknown decided to enable all\n    # warnings known to mankind. Resulting in a 5.5GB build log containing\n    # well over 11 million warnings. The code below disables every single\n    # one of them indiscriminately. Someone with time on their hands,\n    # could/should go over these and either fix them or describe why we\n    # would want to disable the warning. The list below contains both C\n    # and C++ warnings for all warnings since clang has seemingly no\n    # easy way to tell if something is a C or C++ specific warning and\n    # manually auditing every single one of them just isn't in the cards\n    # right now.\n\n    # /W3 is being removed, then added back again, this is because order\n    # matters for clang and these flags are being placed before the\n    # CMAKE_[LANGUAGE]_FLAGS which normally contain /W3, so we would\n    # disable certain warings here only for them to be re-enabled by /W3\n    # later on.\n    remove_cc_flag(\"/W3\")\n\n    add_check_c_compiler_flags(\n      C_WARNINGS\n      C_WARN_CLANG_CL_W3 /W3\n      # The number behind each warn is the number of unique warning were\n      # generated on 2024-04-24 (d2be9cecc28a03ff1f799e8c63f1f9f8eda7cce3)\n      # especially the ones in the single and low double digits are likely\n      # genuine problems that can be investigated.\n      C_WARN_CLANG_CL_C++98_COMPAT -Wno-c++98-compat # 352692\n      C_WARN_CLANG_CL_OLD_STYLE_CAST -Wno-old-style-cast # 178608\n      C_WARN_CLANG_CL_UNSAFE_BUFFER_USAGE -Wno-unsafe-buffer-usage # 89032\n      C_WARN_CLANG_CL_MISSING_PROTOTYPES -Wno-missing-prototypes # 25587\n      C_WARN_CLANG_CL_SIGN_CONVERSION -Wno-sign-conversion # 20109\n      C_WARN_CLANG_CL_MISSING_FIELD_INITIALIZERS -Wno-missing-field-initializers # 20060\n      C_WARN_CLANG_CL_EXTRA_SEMI -Wno-extra-semi # 12513\n      C_WARN_CLANG_CL_LANGUAGE_EXTENSION_TOKEN -Wno-language-extension-token # 11032\n      C_WARN_CLANG_CL_IMPLICIT_FLOAT_CONVERSION -Wno-implicit-float-conversion # 11003\n      C_WARN_CLANG_CL_C++98_COMPAT_PEDANTIC -Wno-c++98-compat-pedantic # 10336\n      C_WARN_CLANG_CL_IMPLICIT_INT_FLOAT_CONVERSION -Wno-implicit-int-float-conversion # 7354\n      C_WARN_CLANG_CL_DOUBLE_PROMOTION -Wno-double-promotion # 7350\n      C_WARN_CLANG_CL_PRE_C++17_COMPAT -Wno-pre-c++17-compat # 7303\n      C_WARN_CLANG_CL_SHORTEN_64_TO_32 -Wno-shorten-64-to-32 # 7085\n      C_WARN_CLANG_CL_C++98_COMPAT_LOCAL_TYPE_TEMPLATE_ARGS -Wno-c++98-compat-local-type-template-args # 6906\n      C_WARN_CLANG_CL_RESERVED_IDENTIFIER -Wno-reserved-identifier # 5886\n      C_WARN_CLANG_CL_CAST_ALIGN -Wno-cast-align # 5513\n      C_WARN_CLANG_CL_DOCUMENTATION -Wno-documentation # 5107\n      C_WARN_CLANG_CL_DISABLED_MACRO_EXPANSION -Wno-disabled-macro-expansion # 4449\n      C_WARN_CLANG_CL_EXTRA_SEMI_STMT -Wno-extra-semi-stmt # 4349\n      C_WARN_CLANG_CL_ZERO_AS_NULL_POINTER_CONSTANT -Wno-zero-as-null-pointer-constant # 3209\n      C_WARN_CLANG_CL_FLOAT_CONVERSION -Wno-float-conversion # 2869\n      C_WARN_CLANG_CL_RESERVED_MACRO_IDENTIFIER -Wno-reserved-macro-identifier # 2862\n      C_WARN_CLANG_CL_CAST_FUNCTION_TYPE_STRICT -Wno-cast-function-type-strict # 2663\n      C_WARN_CLANG_CL_FLOAT_EQUAL -Wno-float-equal # 2153\n      C_WARN_CLANG_CL_IMPLICIT_INT_CONVERSION -Wno-implicit-int-conversion # 2117\n      C_WARN_CLANG_CL_SHADOW -Wno-shadow # 2068\n      C_WARN_CLANG_CL_SHADOW_FIELD_IN_CONSTRUCTOR -Wno-shadow-field-in-constructor # 1829\n      C_WARN_CLANG_CL_CAST_QUAL -Wno-cast-qual # 1742\n      C_WARN_CLANG_CL_PRE_C++14_COMPAT -Wno-pre-c++14-compat # 1569\n      C_WARN_CLANG_CL_GLOBAL_CONSTRUCTORS -Wno-global-constructors # 1402\n      C_WARN_CLANG_CL_SWITCH_ENUM -Wno-switch-enum # 973\n      C_WARN_CLANG_CL_EXIT_TIME_DESTRUCTORS -Wno-exit-time-destructors # 940\n      C_WARN_CLANG_CL_CTAD_MAYBE_UNSUPPORTED -Wno-ctad-maybe-unsupported # 891\n      C_WARN_CLANG_CL_UNDEFINED_FUNC_TEMPLATE -Wno-undefined-func-template # 863\n      C_WARN_CLANG_CL_C++98_COMPAT_EXTRA_SEMI -Wno-c++98-compat-extra-semi # 848\n      C_WARN_CLANG_CL_CAST_FUNCTION_TYPE -Wno-cast-function-type # 807\n      C_WARN_CLANG_CL_NULLABILITY_EXTENSION -Wno-nullability-extension # 602\n      C_WARN_CLANG_CL_SHADOW_FIELD -Wno-shadow-field # 585\n      C_WARN_CLANG_CL_CONDITIONAL_UNINITIALIZED -Wno-conditional-uninitialized # 555\n      C_WARN_CLANG_CL_UNUSED_PARAMETER -Wno-unused-parameter # 539\n      C_WARN_CLANG_CL_SUGGEST_DESTRUCTOR_OVERRIDE -Wno-suggest-destructor-override # 356\n      C_WARN_CLANG_CL_SHADOW_UNCAPTURED_LOCAL -Wno-shadow-uncaptured-local # 355\n      C_WARN_CLANG_CL_UNUSED_MACROS -Wno-unused-macros # 289\n      C_WARN_CLANG_CL_COVERED_SWITCH_DEFAULT -Wno-covered-switch-default # 233\n      C_WARN_CLANG_CL_SIGNED_ENUM_BITFIELD -Wno-signed-enum-bitfield # 229\n      C_WARN_CLANG_CL_DECLARATION_AFTER_STATEMENT -Wno-declaration-after-statement # 228\n      C_WARN_CLANG_CL_IMPLICIT_FALLTHROUGH -Wno-implicit-fallthrough # 164\n      C_WARN_CLANG_CL_NON_VIRTUAL_DTOR -Wno-non-virtual-dtor # 161\n      C_WARN_CLANG_CL_NESTED_ANON_TYPES -Wno-nested-anon-types # 140\n      C_WARN_CLANG_CL_GNU_ZERO_VARIADIC_MACRO_ARGUMENTS -Wno-gnu-zero-variadic-macro-arguments # 132\n      C_WARN_CLANG_CL_UNREACHABLE_CODE_BREAK -Wno-unreachable-code-break # 115\n      C_WARN_CLANG_CL_INCONSISTENT_MISSING_DESTRUCTOR_OVERRIDE -Wno-inconsistent-missing-destructor-override # 104\n      C_WARN_CLANG_CL_FORMAT_PEDANTIC -Wno-format-pedantic # 97\n      C_WARN_CLANG_CL_NONPORTABLE_SYSTEM_INCLUDE_PATH -Wno-nonportable-system-include-path # 95\n      C_WARN_CLANG_CL_UNDEF -Wno-undef # 94\n      C_WARN_CLANG_CL_IGNORED_QUALIFIERS -Wno-ignored-qualifiers # 93\n      C_WARN_CLANG_CL_USED_BUT_MARKED_UNUSED -Wno-used-but-marked-unused # 83\n      C_WARN_CLANG_CL_HEADER_HYGIENE -Wno-header-hygiene # 79\n      C_WARN_CLANG_CL_CHAR_SUBSCRIPTS -Wno-char-subscripts # 76\n      C_WARN_CLANG_CL_UNREACHABLE_CODE_RETURN -Wno-unreachable-code-return # 71\n      C_WARN_CLANG_CL_UNUSED_TEMPLATE -Wno-unused-template # 66\n      C_WARN_CLANG_CL_GNU_ANONYMOUS_STRUCT -Wno-gnu-anonymous-struct # 63\n      C_WARN_CLANG_CL_DEPRECATED_COPY_WITH_USER_PROVIDED_DTOR -Wno-deprecated-copy-with-user-provided-dtor # 62\n      C_WARN_CLANG_CL_INCONSISTENT_MISSING_OVERRIDE -Wno-inconsistent-missing-override # 54\n      C_WARN_CLANG_CL_UNREACHABLE_CODE -Wno-unreachable-code # 52\n      C_WARN_CLANG_CL_DEPRECATED_DYNAMIC_EXCEPTION_SPEC -Wno-deprecated-dynamic-exception-spec # 51\n      C_WARN_CLANG_CL_BAD_FUNCTION_CAST -Wno-bad-function-cast # 50\n      C_WARN_CLANG_CL_MICROSOFT_ENUM_VALUE -Wno-microsoft-enum-value # 47\n      C_WARN_CLANG_CL_DEPRECATED_COPY_WITH_USER_PROVIDED_COPY -Wno-deprecated-copy-with-user-provided-copy # 41\n      C_WARN_CLANG_CL_ZERO_LENGTH_ARRAY -Wno-zero-length-array # 39\n      C_WARN_CLANG_CL_UNUSED_FUNCTION -Wno-unused-function # 38\n      C_WARN_CLANG_CL_PEDANTIC -Wno-pedantic # 38\n      C_WARN_CLANG_CL_DEPRECATED_COPY_WITH_DTOR -Wno-deprecated-copy-with-dtor # 37\n      C_WARN_CLANG_CL_DOCUMENTATION_UNKNOWN_COMMAND -Wno-documentation-unknown-command # 34\n      C_WARN_CLANG_CL_UNDEFINED_REINTERPRET_CAST -Wno-undefined-reinterpret-cast # 33\n      C_WARN_CLANG_CL_FORMAT_NONLITERAL -Wno-format-nonliteral # 29\n      C_WARN_CLANG_CL_COMMA -Wno-comma # 27\n      C_WARN_CLANG_CL_DOCUMENTATION_DEPRECATED_SYNC -Wno-documentation-deprecated-sync # 26\n      C_WARN_CLANG_CL_SHIFT_SIGN_OVERFLOW -Wno-shift-sign-overflow # 24\n      C_WARN_CLANG_CL_PRE_C++17_COMPAT_PEDANTIC -Wno-pre-c++17-compat-pedantic # 24\n      C_WARN_CLANG_CL_C++98_COMPAT_UNNAMED_TYPE_TEMPLATE_ARGS -Wno-c++98-compat-unnamed-type-template-args # 22\n      C_WARN_CLANG_CL_SIGN_COMPARE -Wno-sign-compare # 21\n      C_WARN_CLANG_CL_FORMAT -Wno-format # 21\n      C_WARN_CLANG_CL_C++98_COMPAT_BIND_TO_TEMPORARY_COPY -Wno-c++98-compat-bind-to-temporary-copy # 21\n      C_WARN_CLANG_CL_ENUM_ENUM_CONVERSION -Wno-enum-enum-conversion # 20\n      C_WARN_CLANG_CL_ANON_ENUM_ENUM_CONVERSION -Wno-anon-enum-enum-conversion # 14\n      C_WARN_CLANG_CL_RANGE_LOOP_BIND_REFERENCE -Wno-range-loop-bind-reference # 14\n      C_WARN_CLANG_CL_ENUM_FLOAT_CONVERSION -Wno-enum-float-conversion # 12\n      C_WARN_CLANG_CL_KEYWORD_MACRO -Wno-keyword-macro # 10\n      C_WARN_CLANG_CL_DEPRECATED_COPY -Wno-deprecated-copy # 10\n      C_WARN_CLANG_CL_UNUSED_MEMBER_FUNCTION -Wno-unused-member-function # 9\n      C_WARN_CLANG_CL_MISSING_NORETURN -Wno-missing-noreturn # 8\n      C_WARN_CLANG_CL_MISSING_VARIABLE_DECLARATIONS -Wno-missing-variable-declarations # 8\n      C_WARN_CLANG_CL_DOCUMENTATION_HTML -Wno-documentation-html # 6\n      C_WARN_CLANG_CL_GNU_REDECLARED_ENUM -Wno-gnu-redeclared-enum # 6\n      C_WARN_CLANG_CL_DEPRECATED_DECLARATIONS -Wno-deprecated-declarations # 6\n      C_WARN_CLANG_CL_OVERLOADED_VIRTUAL -Wno-overloaded-virtual # 5\n      C_WARN_CLANG_CL_C++98_C++11_COMPAT_BINARY_LITERAL -Wno-c++98-c++11-compat-binary-literal # 4\n      C_WARN_CLANG_CL_DEPRECATED_REDUNDANT_CONSTEXPR_STATIC_DEF -Wno-deprecated-redundant-constexpr-static-def # 4\n      C_WARN_CLANG_CL_MISSING_BRACES -Wno-missing-braces # 4\n      C_WARN_CLANG_CL_C99_EXTENSIONS -Wno-c99-extensions # 4\n      C_WARN_CLANG_CL_STRICT_PROTOTYPES -Wno-strict-prototypes # 4\n      C_WARN_CLANG_CL_UNREACHABLE_CODE_LOOP_INCREMENT -Wno-unreachable-code-loop-increment # 4\n      C_WARN_CLANG_CL_GNU_CASE_RANGE -Wno-gnu-case-range # 4\n      C_WARN_CLANG_CL_DUPLICATE_ENUM -Wno-duplicate-enum # 3\n      C_WARN_CLANG_CL_NULL_POINTER_SUBTRACTION -Wno-null-pointer-subtraction # 2\n      C_WARN_CLANG_CL_DEPRECATED_LITERAL_OPERATOR -Wno-deprecated-literal-operator # 2\n      C_WARN_CLANG_CL_NEWLINE_EOF -Wno-newline-eof # 2\n      C_WARN_CLANG_CL_MICROSOFT_CAST -Wno-microsoft-cast # 2\n      C_WARN_CLANG_CL_DATE_TIME -Wno-date-time # 2\n      C_WARN_CLANG_CL_DELETE_NON_ABSTRACT_NON_VIRTUAL_DTOR -Wno-delete-non-abstract-non-virtual-dtor # 2\n      C_WARN_CLANG_CL_UNUSED_PRIVATE_FIELD -Wno-unused-private-field # 2\n      C_WARN_CLANG_CL_FLEXIBLE_ARRAY_EXTENSIONS -Wno-flexible-array-extensions # 2\n      C_WARN_CLANG_CL_STRING_CONVERSION -Wno-string-conversion # 2\n      C_WARN_CLANG_CL_FINAL_DTOR_NON_FINAL_CLASS -Wno-final-dtor-non-final-class # 2\n      C_WARN_CLANG_CL_MICROSOFT_UNQUALIFIED_FRIEND -Wno-microsoft-unqualified-friend # 2\n      C_WARN_CLANG_CL_INVALID_NORETURN -Wno-invalid-noreturn # 1\n      C_WARN_CLANG_CL_INVALID_UTF8 -Wno-invalid-utf8 # 1\n      C_WARN_CLANG_CL_FOUR_CHAR_CONSTANTS -Wno-four-char-constants # 1\n      C_WARN_CLANG_CL_PARENTHESES -Wno-parentheses # 1\n      C_WARN_CLANG_CL_PESSIMIZING_MOVE -Wno-pessimizing-move # 1\n      C_WARN_CLANG_CL_DEPRECATED_NON_PROTOTYPE -Wno-deprecated-non-prototype # 1\n      C_WARN_CLANG_CL_BITFIELD_ENUM_CONVERSION -Wno-bitfield-enum-conversion # 1\n      C_WARN_CLANG_CL_UNUSED_LAMBDA_CAPTURE -Wno-unused-lambda-capture # 1\n      C_WARN_CLANG_CL_SHADOW_FIELD_IN_CONSTRUCTOR_MODIFIED -Wno-shadow-field-in-constructor-modified # 1\n      # And some additional ones that came up when using LLVM 18.1.8 on Windows ARM64\n      C_WARN_CLANG_CL_SWITCH_DEFAULT -Wno-switch-default\n      C_WARN_CLANG_CL_NAN_INFINITY_DISABLED -Wno-nan-infinity-disabled\n    )\n\n    add_check_cxx_compiler_flags(\n      CXX_WARNINGS\n      CXX_WARN_CLANG_CL_W3 /W3\n      CXX_WARN_CLANG_CL_C++98_COMPAT -Wno-c++98-compat # 352692\n      CXX_WARN_CLANG_CL_OLD_STYLE_CAST -Wno-old-style-cast # 178608\n      CXX_WARN_CLANG_CL_UNSAFE_BUFFER_USAGE -Wno-unsafe-buffer-usage # 89032\n      CXX_WARN_CLANG_CL_MISSING_PROTOTYPES -Wno-missing-prototypes # 25587\n      CXX_WARN_CLANG_CL_SIGN_CONVERSION -Wno-sign-conversion # 20109\n      CXX_WARN_CLANG_CL_MISSING_FIELD_INITIALIZERS -Wno-missing-field-initializers # 20060\n      CXX_WARN_CLANG_CL_EXTRA_SEMI -Wno-extra-semi # 12513\n      CXX_WARN_CLANG_CL_LANGUAGE_EXTENSION_TOKEN -Wno-language-extension-token # 11032\n      CXX_WARN_CLANG_CL_IMPLICIT_FLOAT_CONVERSION -Wno-implicit-float-conversion # 11003\n      CXX_WARN_CLANG_CL_C++98_COMPAT_PEDANTIC -Wno-c++98-compat-pedantic # 10336\n      CXX_WARN_CLANG_CL_IMPLICIT_INT_FLOAT_CONVERSION -Wno-implicit-int-float-conversion # 7354\n      CXX_WARN_CLANG_CL_DOUBLE_PROMOTION -Wno-double-promotion # 7350\n      CXX_WARN_CLANG_CL_PRE_C++17_COMPAT -Wno-pre-c++17-compat # 7303\n      CXX_WARN_CLANG_CL_SHORTEN_64_TO_32 -Wno-shorten-64-to-32 # 7085\n      CXX_WARN_CLANG_CL_C++98_COMPAT_LOCAL_TYPE_TEMPLATE_ARGS -Wno-c++98-compat-local-type-template-args # 6906\n      CXX_WARN_CLANG_CL_RESERVED_IDENTIFIER -Wno-reserved-identifier # 5886\n      CXX_WARN_CLANG_CL_CAST_ALIGN -Wno-cast-align # 5513\n      CXX_WARN_CLANG_CL_DOCUMENTATION -Wno-documentation # 5107\n      CXX_WARN_CLANG_CL_DISABLED_MACRO_EXPANSION -Wno-disabled-macro-expansion # 4449\n      CXX_WARN_CLANG_CL_EXTRA_SEMI_STMT -Wno-extra-semi-stmt # 4349\n      CXX_WARN_CLANG_CL_ZERO_AS_NULL_POINTER_CONSTANT -Wno-zero-as-null-pointer-constant # 3209\n      CXX_WARN_CLANG_CL_FLOAT_CONVERSION -Wno-float-conversion # 2869\n      CXX_WARN_CLANG_CL_RESERVED_MACRO_IDENTIFIER -Wno-reserved-macro-identifier # 2862\n      CXX_WARN_CLANG_CL_CAST_FUNCTION_TYPE_STRICT -Wno-cast-function-type-strict # 2663\n      CXX_WARN_CLANG_CL_FLOAT_EQUAL -Wno-float-equal # 2153\n      CXX_WARN_CLANG_CL_IMPLICIT_INT_CONVERSION -Wno-implicit-int-conversion # 2117\n      CXX_WARN_CLANG_CL_SHADOW -Wno-shadow # 2068\n      CXX_WARN_CLANG_CL_SHADOW_FIELD_IN_CONSTRUCTOR -Wno-shadow-field-in-constructor # 1829\n      CXX_WARN_CLANG_CL_CAST_QUAL -Wno-cast-qual # 1742\n      CXX_WARN_CLANG_CL_PRE_C++14_COMPAT -Wno-pre-c++14-compat # 1569\n      CXX_WARN_CLANG_CL_GLOBAL_CONSTRUCTORS -Wno-global-constructors # 1402\n      CXX_WARN_CLANG_CL_SWITCH_ENUM -Wno-switch-enum # 973\n      CXX_WARN_CLANG_CL_EXIT_TIME_DESTRUCTORS -Wno-exit-time-destructors # 940\n      CXX_WARN_CLANG_CL_CTAD_MAYBE_UNSUPPORTED -Wno-ctad-maybe-unsupported # 891\n      CXX_WARN_CLANG_CL_UNDEFINED_FUNC_TEMPLATE -Wno-undefined-func-template # 863\n      CXX_WARN_CLANG_CL_C++98_COMPAT_EXTRA_SEMI -Wno-c++98-compat-extra-semi # 848\n      CXX_WARN_CLANG_CL_CAST_FUNCTION_TYPE -Wno-cast-function-type # 807\n      CXX_WARN_CLANG_CL_NULLABILITY_EXTENSION -Wno-nullability-extension # 602\n      CXX_WARN_CLANG_CL_SHADOW_FIELD -Wno-shadow-field # 585\n      CXX_WARN_CLANG_CL_CONDITIONAL_UNINITIALIZED -Wno-conditional-uninitialized # 555\n      CXX_WARN_CLANG_CL_UNUSED_PARAMETER -Wno-unused-parameter # 539\n      CXX_WARN_CLANG_CL_SUGGEST_DESTRUCTOR_OVERRIDE -Wno-suggest-destructor-override # 356\n      CXX_WARN_CLANG_CL_SHADOW_UNCAPTURED_LOCAL -Wno-shadow-uncaptured-local # 355\n      CXX_WARN_CLANG_CL_UNUSED_MACROS -Wno-unused-macros # 289\n      CXX_WARN_CLANG_CL_COVERED_SWITCH_DEFAULT -Wno-covered-switch-default # 233\n      CXX_WARN_CLANG_CL_SIGNED_ENUM_BITFIELD -Wno-signed-enum-bitfield # 229\n      CXX_WARN_CLANG_CL_DECLARATION_AFTER_STATEMENT -Wno-declaration-after-statement # 228\n      CXX_WARN_CLANG_CL_IMPLICIT_FALLTHROUGH -Wno-implicit-fallthrough # 164\n      CXX_WARN_CLANG_CL_NON_VIRTUAL_DTOR -Wno-non-virtual-dtor # 161\n      CXX_WARN_CLANG_CL_NESTED_ANON_TYPES -Wno-nested-anon-types # 140\n      CXX_WARN_CLANG_CL_GNU_ZERO_VARIADIC_MACRO_ARGUMENTS -Wno-gnu-zero-variadic-macro-arguments # 132\n      CXX_WARN_CLANG_CL_UNREACHABLE_CODE_BREAK -Wno-unreachable-code-break # 115\n      CXX_WARN_CLANG_CL_INCONSISTENT_MISSING_DESTRUCTOR_OVERRIDE -Wno-inconsistent-missing-destructor-override # 104\n      CXX_WARN_CLANG_CL_FORMAT_PEDANTIC -Wno-format-pedantic # 97\n      CXX_WARN_CLANG_CL_NONPORTABLE_SYSTEM_INCLUDE_PATH -Wno-nonportable-system-include-path # 95\n      CXX_WARN_CLANG_CL_UNDEF -Wno-undef # 94\n      CXX_WARN_CLANG_CL_IGNORED_QUALIFIERS -Wno-ignored-qualifiers # 93\n      CXX_WARN_CLANG_CL_USED_BUT_MARKED_UNUSED -Wno-used-but-marked-unused # 83\n      CXX_WARN_CLANG_CL_HEADER_HYGIENE -Wno-header-hygiene # 79\n      CXX_WARN_CLANG_CL_CHAR_SUBSCRIPTS -Wno-char-subscripts # 76\n      CXX_WARN_CLANG_CL_UNREACHABLE_CODE_RETURN -Wno-unreachable-code-return # 71\n      CXX_WARN_CLANG_CL_UNUSED_TEMPLATE -Wno-unused-template # 66\n      CXX_WARN_CLANG_CL_GNU_ANONYMOUS_STRUCT -Wno-gnu-anonymous-struct # 63\n      CXX_WARN_CLANG_CL_DEPRECATED_COPY_WITH_USER_PROVIDED_DTOR -Wno-deprecated-copy-with-user-provided-dtor # 62\n      CXX_WARN_CLANG_CL_INCONSISTENT_MISSING_OVERRIDE -Wno-inconsistent-missing-override # 54\n      CXX_WARN_CLANG_CL_UNREACHABLE_CODE -Wno-unreachable-code # 52\n      CXX_WARN_CLANG_CL_DEPRECATED_DYNAMIC_EXCEPTION_SPEC -Wno-deprecated-dynamic-exception-spec # 51\n      CXX_WARN_CLANG_CL_BAD_FUNCTION_CAST -Wno-bad-function-cast # 50\n      CXX_WARN_CLANG_CL_MICROSOFT_ENUM_VALUE -Wno-microsoft-enum-value # 47\n      CXX_WARN_CLANG_CL_DEPRECATED_COPY_WITH_USER_PROVIDED_COPY -Wno-deprecated-copy-with-user-provided-copy # 41\n      CXX_WARN_CLANG_CL_ZERO_LENGTH_ARRAY -Wno-zero-length-array # 39\n      CXX_WARN_CLANG_CL_UNUSED_FUNCTION -Wno-unused-function # 38\n      CXX_WARN_CLANG_CL_PEDANTIC -Wno-pedantic # 38\n      CXX_WARN_CLANG_CL_DEPRECATED_COPY_WITH_DTOR -Wno-deprecated-copy-with-dtor # 37\n      CXX_WARN_CLANG_CL_DOCUMENTATION_UNKNOWN_COMMAND -Wno-documentation-unknown-command # 34\n      CXX_WARN_CLANG_CL_UNDEFINED_REINTERPRET_CAST -Wno-undefined-reinterpret-cast # 33\n      CXX_WARN_CLANG_CL_FORMAT_NONLITERAL -Wno-format-nonliteral # 29\n      CXX_WARN_CLANG_CL_COMMA -Wno-comma # 27\n      CXX_WARN_CLANG_CL_DOCUMENTATION_DEPRECATED_SYNC -Wno-documentation-deprecated-sync # 26\n      CXX_WARN_CLANG_CL_SHIFT_SIGN_OVERFLOW -Wno-shift-sign-overflow # 24\n      CXX_WARN_CLANG_CL_PRE_C++17_COMPAT_PEDANTIC -Wno-pre-c++17-compat-pedantic # 24\n      CXX_WARN_CLANG_CL_C++98_COMPAT_UNNAMED_TYPE_TEMPLATE_ARGS -Wno-c++98-compat-unnamed-type-template-args # 22\n      CXX_WARN_CLANG_CL_SIGN_COMPARE -Wno-sign-compare # 21\n      CXX_WARN_CLANG_CL_FORMAT -Wno-format # 21\n      CXX_WARN_CLANG_CL_C++98_COMPAT_BIND_TO_TEMPORARY_COPY -Wno-c++98-compat-bind-to-temporary-copy # 21\n      CXX_WARN_CLANG_CL_ENUM_ENUM_CONVERSION -Wno-enum-enum-conversion # 20\n      CXX_WARN_CLANG_CL_ANON_ENUM_ENUM_CONVERSION -Wno-anon-enum-enum-conversion # 14\n      CXX_WARN_CLANG_CL_RANGE_LOOP_BIND_REFERENCE -Wno-range-loop-bind-reference # 14\n      CXX_WARN_CLANG_CL_ENUM_FLOAT_CONVERSION -Wno-enum-float-conversion # 12\n      CXX_WARN_CLANG_CL_KEYWORD_MACRO -Wno-keyword-macro # 10\n      CXX_WARN_CLANG_CL_DEPRECATED_COPY -Wno-deprecated-copy # 10\n      CXX_WARN_CLANG_CL_UNUSED_MEMBER_FUNCTION -Wno-unused-member-function # 9\n      CXX_WARN_CLANG_CL_MISSING_NORETURN -Wno-missing-noreturn # 8\n      CXX_WARN_CLANG_CL_MISSING_VARIABLE_DECLARATIONS -Wno-missing-variable-declarations # 8\n      CXX_WARN_CLANG_CL_DOCUMENTATION_HTML -Wno-documentation-html # 6\n      CXX_WARN_CLANG_CL_GNU_REDECLARED_ENUM -Wno-gnu-redeclared-enum # 6\n      CXX_WARN_CLANG_CL_DEPRECATED_DECLARATIONS -Wno-deprecated-declarations # 6\n      CXX_WARN_CLANG_CL_OVERLOADED_VIRTUAL -Wno-overloaded-virtual # 5\n      CXX_WARN_CLANG_CL_C++98_C++11_COMPAT_BINARY_LITERAL -Wno-c++98-c++11-compat-binary-literal # 4\n      CXX_WARN_CLANG_CL_DEPRECATED_REDUNDANT_CONSTEXPR_STATIC_DEF -Wno-deprecated-redundant-constexpr-static-def # 4\n      CXX_WARN_CLANG_CL_MISSING_BRACES -Wno-missing-braces # 4\n      CXX_WARN_CLANG_CL_C99_EXTENSIONS -Wno-c99-extensions # 4\n      CXX_WARN_CLANG_CL_STRICT_PROTOTYPES -Wno-strict-prototypes # 4\n      CXX_WARN_CLANG_CL_UNREACHABLE_CODE_LOOP_INCREMENT -Wno-unreachable-code-loop-increment # 4\n      CXX_WARN_CLANG_CL_GNU_CASE_RANGE -Wno-gnu-case-range # 4\n      CXX_WARN_CLANG_CL_DUPLICATE_ENUM -Wno-duplicate-enum # 3\n      CXX_WARN_CLANG_CL_NULL_POINTER_SUBTRACTION -Wno-null-pointer-subtraction # 2\n      CXX_WARN_CLANG_CL_DEPRECATED_LITERAL_OPERATOR -Wno-deprecated-literal-operator # 2\n      CXX_WARN_CLANG_CL_NEWLINE_EOF -Wno-newline-eof # 2\n      CXX_WARN_CLANG_CL_MICROSOFT_CAST -Wno-microsoft-cast # 2\n      CXX_WARN_CLANG_CL_DATE_TIME -Wno-date-time # 2\n      CXX_WARN_CLANG_CL_DELETE_NON_ABSTRACT_NON_VIRTUAL_DTOR -Wno-delete-non-abstract-non-virtual-dtor # 2\n      CXX_WARN_CLANG_CL_UNUSED_PRIVATE_FIELD -Wno-unused-private-field # 2\n      CXX_WARN_CLANG_CL_FLEXIBLE_ARRAY_EXTENSIONS -Wno-flexible-array-extensions # 2\n      CXX_WARN_CLANG_CL_STRING_CONVERSION -Wno-string-conversion # 2\n      CXX_WARN_CLANG_CL_FINAL_DTOR_NON_FINAL_CLASS -Wno-final-dtor-non-final-class # 2\n      CXX_WARN_CLANG_CL_MICROSOFT_UNQUALIFIED_FRIEND -Wno-microsoft-unqualified-friend # 2\n      CXX_WARN_CLANG_CL_INVALID_NORETURN -Wno-invalid-noreturn # 1\n      CXX_WARN_CLANG_CL_INVALID_UTF8 -Wno-invalid-utf8 # 1\n      CXX_WARN_CLANG_CL_FOUR_CHAR_CONSTANTS -Wno-four-char-constants # 1\n      CXX_WARN_CLANG_CL_PARENTHESES -Wno-parentheses # 1\n      CXX_WARN_CLANG_CL_PESSIMIZING_MOVE -Wno-pessimizing-move # 1\n      CXX_WARN_CLANG_CL_DEPRECATED_NON_PROTOTYPE -Wno-deprecated-non-prototype # 1\n      CXX_WARN_CLANG_CL_BITFIELD_ENUM_CONVERSION -Wno-bitfield-enum-conversion # 1\n      CXX_WARN_CLANG_CL_UNUSED_LAMBDA_CAPTURE -Wno-unused-lambda-capture # 1\n      CXX_WARN_CLANG_CL_SHADOW_FIELD_IN_CONSTRUCTOR_MODIFIED -Wno-shadow-field-in-constructor-modified # 1\n      # And some additional ones that came up when using LLVM 18.1.8 on Windows ARM64\n      CXX_WARN_CLANG_CL_SWITCH_DEFAULT -Wno-switch-default\n      CXX_WARN_CLANG_CL_NAN_INFINITY_DISABLED -Wno-nan-infinity-disabled\n    )\n  endif()\n\n\n  # ---------------------\n  # Suppress Strict Flags\n\n  # flags to undo strict flags\n\n  add_check_c_compiler_flags(\n    C_REMOVE_STRICT_FLAGS\n\n    C_WARN_NO_UNUSED_PARAMETER -Wno-unused-parameter\n    C_WARN_NO_UNUSED_VARIABLE -Wno-unused-variable\n    C_WARN_NO_UNUSED_MACROS -Wno-unused-macros\n    C_WARN_NO_MISLEADING_INDENTATION -Wno-misleading-indentation\n\n    C_WARN_NO_MISSING_VARIABLE_DECLARATIONS -Wno-missing-variable-declarations\n    C_WARN_NO_INCOMPAT_PTR_DISCARD_QUAL -Wno-incompatible-pointer-types-discards-qualifiers\n    C_WARN_NO_UNUSED_FUNCTION -Wno-unused-function\n    C_WARN_NO_INT_TO_VOID_POINTER_CAST -Wno-int-to-void-pointer-cast\n    C_WARN_NO_MISSING_PROTOTYPES -Wno-missing-prototypes\n    C_WARN_NO_DUPLICATE_ENUM -Wno-duplicate-enum\n    C_WARN_NO_UNDEF -Wno-undef\n    C_WARN_NO_MISSING_NORETURN -Wno-missing-noreturn\n    C_WARN_NO_UNUSED_BUT_SET_VARIABLE -Wno-unused-but-set-variable\n    C_WARN_NO_DEPRECATED_DECLARATIONS -Wno-deprecated-declarations\n    C_WARN_NO_STRICT_PROTOTYPES -Wno-strict-prototypes\n    C_WARN_NO_BITWISE_INSTEAD_OF_LOGICAL -Wno-bitwise-instead-of-logical\n    C_WARN_NO_IMPLICIT_CONST_INT_FLOAT_CONVERSION -Wno-implicit-const-int-float-conversion\n    C_WARN_NO_SINGLE_BIT_BITFIELD_CONSTANT_CONVERSION -Wno-single-bit-bitfield-constant-conversion\n  )\n\n  add_check_cxx_compiler_flags(\n    CXX_REMOVE_STRICT_FLAGS\n\n    CXX_WARN_NO_UNUSED_PARAMETER -Wno-unused-parameter\n    CXX_WARN_NO_UNUSED_PRIVATE_FIELD -Wno-unused-private-field\n    CXX_WARN_NO_CXX11_NARROWING -Wno-c++11-narrowing\n    CXX_WARN_NO_NON_VIRTUAL_DTOR -Wno-non-virtual-dtor\n    CXX_WARN_NO_UNUSED_MACROS -Wno-unused-macros\n    CXX_WARN_NO_UNUSED_VARIABLE -Wno-unused-variable\n    CXX_WARN_NO_REORDER -Wno-reorder\n    CXX_WARN_NO_COMMENT -Wno-comment\n    CXX_WARN_NO_UNUSED_TYPEDEFS -Wno-unused-local-typedefs\n    CXX_WARN_NO_UNDEFINED_VAR_TEMPLATE -Wno-undefined-var-template\n    CXX_WARN_NO_INSTANTIATION_AFTER_SPECIALIZATION -Wno-instantiation-after-specialization\n    CXX_WARN_NO_MISLEADING_INDENTATION -Wno-misleading-indentation\n    CXX_WARN_NO_BITWISE_INSTEAD_OF_LOGICAL -Wno-bitwise-instead-of-logical\n    CXX_WARN_NO_IMPLICIT_CONST_INT_FLOAT_CONVERSION -Wno-implicit-const-int-float-conversion\n    CXX_WARN_NO_UNDEF -Wno-undef\n    CXX_WARN_NO_UNDEF_PREFIX -Wno-undef-prefix\n  )\n\nelseif(CMAKE_C_COMPILER_ID STREQUAL \"Intel\")\n\n  add_check_c_compiler_flags(\n    C_WARNINGS\n\n    C_WARN_ALL -Wall\n    C_WARN_POINTER_ARITH -Wpointer-arith\n    C_WARN_NO_UNKNOWN_PRAGMAS -Wno-unknown-pragmas\n  )\n\n  add_check_cxx_compiler_flags(\n    CXX_WARNINGS\n\n    CXX_WARN_ALL -Wall\n    CXX_WARN_NO_INVALID_OFFSETOF -Wno-invalid-offsetof\n    CXX_WARN_NO_SIGN_COMPARE -Wno-sign-compare\n  )\n\n  # Disable numbered, false positives.\n  string(APPEND C_WARNINGS \" -wd188,186,144,913,556,858,597,177,1292,167,279,592,94,2722,3199\")\n  string(APPEND CXX_WARNINGS \" -wd188,186,144,913,556,858,597,177,1292,167,279,592,94,2722,3199\")\nelseif(CMAKE_C_COMPILER_ID STREQUAL \"MSVC\")\n  # most msvc warnings are C & C++\n  set(_WARNINGS\n    # warning level:\n    \"/W3\"\n    \"/w34062\"  # switch statement contains 'default' but no 'case' labels\n    \"/w34100\"  # 'identifier' : unreferenced formal parameter\n    \"/w34115\"  # 'type' : named type definition in parentheses\n    \"/w34189\"  # local variable is initialized but not referenced\n    # see https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/c5038?view=vs-2017\n    \"/w35038\"  # order of initialization in c++ constructors\n    # disable:\n    \"/wd4018\"  # signed/unsigned mismatch\n    \"/wd4146\"  # unary minus operator applied to unsigned type, result still unsigned\n    \"/wd4065\"  # switch statement contains 'default' but no 'case' labels\n    \"/wd4127\"  # conditional expression is constant\n    \"/wd4181\"  # qualifier applied to reference type; ignored\n    \"/wd4200\"  # zero-sized array in struct/union\n    \"/wd4244\"  # conversion from 'type1' to 'type2', possible loss of data\n    \"/wd4267\"  # conversion from 'size_t' to 'type', possible loss of data\n    \"/wd4305\"  # truncation from 'type1' to 'type2'\n    \"/wd4800\"  # forcing value to bool 'true' or 'false'\n    \"/wd4828\"  # The file contains a character that is illegal\n    \"/wd4996\"  # identifier was declared deprecated\n    \"/wd4661\"  # no suitable definition provided for explicit template instantiation request\n    \"/wd4848\"  # 'no_unique_address' is a vendor extension in C++17\n    # errors:\n    \"/we4013\"  # 'function' undefined; assuming extern returning int\n    \"/we4133\"  # incompatible pointer types\n    \"/we4431\"  # missing type specifier - int assumed\n    \"/we4033\"  # 'function' must return a value\n  )\n\n  string(REPLACE \";\" \" \" _WARNINGS \"${_WARNINGS}\")\n  set(C_WARNINGS \"${_WARNINGS}\")\n  set(CXX_WARNINGS \"${_WARNINGS}\")\n  unset(_WARNINGS)\nendif()\n\n# Xcode enables additional warning flags by default. Disable some to match\n# command line build and other platforms more closely.\nif(XCODE)\n  set(CMAKE_XCODE_ATTRIBUTE_GCC_WARN_64_TO_32_BIT_CONVERSION NO)\nendif()\n\n# ensure python header is found since detection can fail, this could happen\n# with _any_ library but since we used a fixed python version this tends to\n# be most problematic.\nif(WITH_PYTHON)\n  if(NOT EXISTS \"${PYTHON_INCLUDE_DIR}/Python.h\")\n    message(\n      FATAL_ERROR\n      \"Missing: \\\"${PYTHON_INCLUDE_DIR}/Python.h\\\",\\n\"\n      \"Set the cache entry 'PYTHON_INCLUDE_DIR' to point \"\n      \"to a valid python include path. Containing \"\n      \"Python.h for python version \\\"${PYTHON_VERSION}\\\"\"\n    )\n  endif()\n\n  if(WIN32)\n    # Always use numpy bundled in precompiled libs.\n  elseif((WITH_PYTHON_INSTALL AND WITH_PYTHON_INSTALL_NUMPY) OR WITH_PYTHON_NUMPY)\n    if((\"${PYTHON_NUMPY_PATH}\" STREQUAL \"\") OR (${PYTHON_NUMPY_PATH} MATCHES NOTFOUND))\n      find_python_package(numpy \"core/include\")\n    endif()\n  endif()\n\n  if(WIN32 OR APPLE)\n    # Always copy from precompiled libs.\n  elseif(WITH_PYTHON_INSTALL_REQUESTS)\n    find_python_package(requests \"\")\n  endif()\n\n  if(WIN32 OR APPLE)\n    # Always copy from precompiled libs.\n  elseif(WITH_PYTHON_INSTALL_ZSTANDARD)\n    find_python_package(zstandard \"\")\n  endif()\nendif()\n\n# Select C++17 as the standard for C++ projects.\nset(CMAKE_CXX_STANDARD 17)\n# If C++17 is not available, downgrading to an earlier standard is NOT OK.\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n# Do not enable compiler specific language extensions.\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# Visual Studio has all standards it supports available by default\n# Clang on windows copies this behavior and does not support these switches\nif(CMAKE_COMPILER_IS_GNUCC OR\n   (CMAKE_C_COMPILER_ID MATCHES \"Clang\" AND (NOT MSVC)) OR\n   (CMAKE_C_COMPILER_ID STREQUAL \"Intel\"))\n\n  # Use C11 + GNU extensions, works with GCC, Clang, ICC\n  string(APPEND CMAKE_C_FLAGS \" -std=gnu11\")\nendif()\n\nif(WITH_COMPILER_SHORT_FILE_MACRO)\n  # Use '-fmacro-prefix-map' for Clang and GCC (MSVC doesn't support this).\n  set(C_PREFIX_MAP_FLAGS \"\")\n  set(CXX_PREFIX_MAP_FLAGS \"\")\n  add_check_c_compiler_flags(\n    C_PREFIX_MAP_FLAGS\n    C_MACRO_PREFIX_MAP -fmacro-prefix-map=foo=bar\n  )\n  add_check_cxx_compiler_flags(\n    CXX_PREFIX_MAP_FLAGS\n    CXX_MACRO_PREFIX_MAP -fmacro-prefix-map=foo=bar\n  )\n  if(C_MACRO_PREFIX_MAP AND CXX_MACRO_PREFIX_MAP)\n    if(APPLE)\n      if(XCODE AND ${XCODE_VERSION} VERSION_LESS 12.0)\n        # Developers may have say LLVM Clang-10.0.1 toolchain (which supports the flag)\n        # with Xcode-11 (the Clang of which doesn't support the flag).\n        message(\n          WARNING\n          \"-fmacro-prefix-map flag is NOT supported by Clang shipped with Xcode-${XCODE_VERSION}.\"\n          \" Some Xcode functionality in Product menu may not work. \"\n          \"Disabling WITH_COMPILER_SHORT_FILE_MACRO.\"\n        )\n        set(WITH_COMPILER_SHORT_FILE_MACRO OFF)\n      endif()\n    endif()\n    if(WITH_COMPILER_SHORT_FILE_MACRO)\n      path_ensure_trailing_slash(_src_dir \"${CMAKE_SOURCE_DIR}\")\n      path_ensure_trailing_slash(_bin_dir \"${CMAKE_BINARY_DIR}\")\n      # Keep this variable so it can be stripped from build-info.\n      set(PLATFORM_CFLAGS_FMACRO_PREFIX_MAP\n        \"-fmacro-prefix-map=\\\"${_src_dir}\\\"=\\\"\\\" -fmacro-prefix-map=\\\"${_bin_dir}\\\"=\\\"\\\"\")\n      string(APPEND PLATFORM_CFLAGS \" ${PLATFORM_CFLAGS_FMACRO_PREFIX_MAP}\")\n      unset(_src_dir)\n      unset(_bin_dir)\n    endif()\n  else()\n    message(\n      WARNING\n      \"-fmacro-prefix-map flag is NOT supported by C/C++ compiler.\"\n      \" Disabling WITH_COMPILER_SHORT_FILE_MACRO.\"\n    )\n    set(WITH_COMPILER_SHORT_FILE_MACRO OFF)\n  endif()\n  unset(C_PREFIX_MAP_FLAGS)\n  unset(CXX_PREFIX_MAP_FLAGS)\nendif()\n\n# Include warnings first, so its possible to disable them with user defined flags\n# eg: -Wno-uninitialized\nset(CMAKE_C_FLAGS \"${C_WARNINGS} ${CMAKE_C_FLAGS} ${PLATFORM_CFLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CXX_WARNINGS} ${CMAKE_CXX_FLAGS} ${PLATFORM_CFLAGS}\")\n\n# defined above, platform specific but shared names\nmark_as_advanced(\n  CYCLES_OSL\n  OSL_LIB_EXEC\n  OSL_COMPILER\n  OSL_LIB_COMP\n  OSL_LIB_QUERY\n  OSL_INCLUDE_DIR\n)\n\nmark_as_advanced(\n  LLVM_CONFIG\n  LLVM_ROOT_DIR\n  LLVM_LIBRARY\n  LLVM_VERSION\n)\n\n\n# -------------------------------------------------------------------------------\n# Global Defines\n\nif(WITH_ASSERT_ABORT)\n  add_definitions(-DWITH_ASSERT_ABORT)\nendif()\n\n# NDEBUG is the standard C define to disable asserts.\nif(WITH_ASSERT_RELEASE)\n  # CMake seemingly be setting the NDEBUG flag on its own already on some configurations\n  # therefore we need to remove the flags if they happen to be set.\n  remove_cc_flag(\"-DNDEBUG\") # GCC/CLang\n  remove_cc_flag(\"/DNDEBUG\") # MSVC\nelse()\n  set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS\n    $<$<CONFIG:Release>:NDEBUG>\n    $<$<CONFIG:MinSizeRel>:NDEBUG>\n    $<$<CONFIG:RelWithDebInfo>:NDEBUG>\n  )\nendif()\n\n# message(STATUS \"Using CFLAGS: ${CMAKE_C_FLAGS}\")\n# message(STATUS \"Using CXXFLAGS: ${CMAKE_CXX_FLAGS}\")\n\n# -----------------------------------------------------------------------------\n# Testing Functions\n\ninclude(build_files/cmake/testing.cmake)\n\n# -----------------------------------------------------------------------------\n# Add Sub-Directories\n\nif(WITH_BLENDER)\n  add_subdirectory(intern)\n  add_subdirectory(extern)\n\n  # source after intern and extern to gather all\n  # internal and external library information first, for test linking\n  add_subdirectory(source)\nelseif(WITH_CYCLES_STANDALONE OR WITH_CYCLES_HYDRA_RENDER_DELEGATE)\n  add_subdirectory(intern/atomic)\n  add_subdirectory(intern/guardedalloc)\n  add_subdirectory(intern/libc_compat)\n  add_subdirectory(intern/sky)\n\n  add_subdirectory(intern/cycles)\n  if(WITH_CYCLES_LOGGING)\n    if(NOT WITH_SYSTEM_GFLAGS)\n      add_subdirectory(extern/gflags)\n    endif()\n    add_subdirectory(extern/glog)\n  endif()\n  if(WITH_CUDA_DYNLOAD)\n    add_subdirectory(extern/cuew)\n  endif()\n  if(WITH_HIP_DYNLOAD)\n    add_subdirectory(extern/hipew)\n  endif()\nendif()\n\n\n# -----------------------------------------------------------------------------\n# Add Testing Directory\n\nadd_subdirectory(tests)\n\n\n# -----------------------------------------------------------------------------\n# Add Blender Application\n\nif(WITH_BLENDER)\n  add_subdirectory(source/creator)\nendif()\n\n\n# -----------------------------------------------------------------------------\n# Define 'heavy' sub-modules (for Ninja builder when using pools)\nsetup_heavy_lib_pool()\n\n\n# -----------------------------------------------------------------------------\n# CPack for generating packages\n\ninclude(build_files/cmake/packaging.cmake)\n\n\n# -----------------------------------------------------------------------------\n# Use Dynamic Loading for OpenMP\n\nif(WITH_BLENDER)\n  openmp_delayload(blender)\nendif()\n\n\n# -----------------------------------------------------------------------------\n# Print Final Configuration\n\nif(FIRST_RUN)\n\n  set(_config_msg \"\\nBlender Configuration\\n=====================\")\n\n  function(info_cfg_option\n    _setting\n    )\n\n    set(_msg \"  - ${_setting}\")\n    string(LENGTH \"${_msg}\" _len)\n    while(\"36\" GREATER \"${_len}\")\n      string(APPEND _msg \" \")\n      math(EXPR _len \"${_len} + 1\")\n    endwhile()\n\n    set(_config_msg \"${_config_msg}\\n${_msg}${${_setting}}\" PARENT_SCOPE)\n  endfunction()\n\n  function(info_cfg_text\n    _text\n    )\n\n    set(_config_msg \"${_config_msg}\\n\\n  ${_text}\" PARENT_SCOPE)\n  endfunction()\n\n  message(STATUS \"C Compiler:   \\\"${CMAKE_C_COMPILER_ID}\\\"\")\n  message(STATUS \"C++ Compiler: \\\"${CMAKE_CXX_COMPILER_ID}\\\"\")\n\n  info_cfg_text(\"Build Options:\")\n  info_cfg_option(WITH_ALEMBIC)\n  info_cfg_option(WITH_BULLET)\n  info_cfg_option(WITH_CLANG)\n  info_cfg_option(WITH_CYCLES)\n  info_cfg_option(WITH_FFTW3)\n  info_cfg_option(WITH_FREESTYLE)\n  info_cfg_option(WITH_GMP)\n  info_cfg_option(WITH_HARU)\n  info_cfg_option(WITH_IK_ITASC)\n  info_cfg_option(WITH_IK_SOLVER)\n  info_cfg_option(WITH_INPUT_NDOF)\n  info_cfg_option(WITH_INPUT_IME)\n  info_cfg_option(WITH_INTERNATIONAL)\n  info_cfg_option(WITH_OPENCOLLADA)\n  info_cfg_option(WITH_OPENCOLORIO)\n  info_cfg_option(WITH_OPENIMAGEDENOISE)\n  info_cfg_option(WITH_OPENVDB)\n  info_cfg_option(WITH_POTRACE)\n  info_cfg_option(WITH_PUGIXML)\n  info_cfg_option(WITH_QUADRIFLOW)\n  info_cfg_option(WITH_TBB)\n  info_cfg_option(WITH_USD)\n  info_cfg_option(WITH_MATERIALX)\n  info_cfg_option(WITH_XR_OPENXR)\n\n  info_cfg_text(\"Compiler Options:\")\n  info_cfg_option(WITH_BUILDINFO)\n  info_cfg_option(WITH_OPENMP)\n\n  info_cfg_text(\"System Options:\")\n  info_cfg_option(WITH_INSTALL_PORTABLE)\n  info_cfg_option(WITH_MEM_JEMALLOC)\n  info_cfg_option(WITH_MEM_VALGRIND)\n\n  info_cfg_text(\"GHOST Options:\")\n  info_cfg_option(WITH_GHOST_DEBUG)\n  info_cfg_option(WITH_GHOST_SDL)\n  if(UNIX AND NOT APPLE)\n    info_cfg_option(WITH_GHOST_X11)\n    info_cfg_option(WITH_GHOST_WAYLAND)\n    if(WITH_GHOST_X11)\n      info_cfg_option(WITH_GHOST_XDND)\n      info_cfg_option(WITH_X11_XF86VMODE)\n      info_cfg_option(WITH_X11_XFIXES)\n      info_cfg_option(WITH_X11_XINPUT)\n    endif()\n    if(WITH_GHOST_WAYLAND)\n      info_cfg_option(WITH_GHOST_WAYLAND_DYNLOAD)\n      info_cfg_option(WITH_GHOST_WAYLAND_LIBDECOR)\n    endif()\n  endif()\n\n  info_cfg_text(\"Image Formats:\")\n  info_cfg_option(WITH_IMAGE_CINEON)\n  info_cfg_option(WITH_IMAGE_OPENEXR)\n  info_cfg_option(WITH_IMAGE_OPENJPEG)\n\n  info_cfg_text(\"Audio:\")\n  info_cfg_option(WITH_CODEC_FFMPEG)\n  info_cfg_option(WITH_CODEC_SNDFILE)\n  info_cfg_option(WITH_COREAUDIO)\n  info_cfg_option(WITH_JACK)\n  info_cfg_option(WITH_JACK_DYNLOAD)\n  info_cfg_option(WITH_OPENAL)\n  info_cfg_option(WITH_PULSEAUDIO)\n  info_cfg_option(WITH_PULSEAUDIO_DYNLOAD)\n  info_cfg_option(WITH_SDL)\n  info_cfg_option(WITH_WASAPI)\n\n  info_cfg_text(\"Compression:\")\n  info_cfg_option(WITH_LZMA)\n  info_cfg_option(WITH_LZO)\n\n  if(WITH_PYTHON)\n    info_cfg_text(\"Python:\")\n    info_cfg_option(WITH_PYTHON_INSTALL)\n    info_cfg_option(WITH_PYTHON_INSTALL_NUMPY)\n    info_cfg_option(WITH_PYTHON_INSTALL_ZSTANDARD)\n    info_cfg_option(WITH_PYTHON_MODULE)\n    info_cfg_option(WITH_PYTHON_SAFETY)\n  endif()\n\n  info_cfg_text(\"Modifiers:\")\n  info_cfg_option(WITH_MOD_FLUID)\n  info_cfg_option(WITH_MOD_OCEANSIM)\n  info_cfg_option(WITH_MOD_REMESH)\n\n  info_cfg_text(\"Rendering:\")\n  info_cfg_option(WITH_HYDRA)\n\n  if(WITH_CYCLES)\n    info_cfg_text(\"Rendering (Cycles):\")\n    info_cfg_option(WITH_CYCLES_OSL)\n    info_cfg_option(WITH_CYCLES_EMBREE)\n    info_cfg_option(WITH_CYCLES_PATH_GUIDING)\n    if(NOT APPLE)\n      info_cfg_option(WITH_CYCLES_DEVICE_OPTIX)\n      info_cfg_option(WITH_CYCLES_DEVICE_CUDA)\n      info_cfg_option(WITH_CYCLES_CUDA_BINARIES)\n      info_cfg_option(WITH_CYCLES_DEVICE_ONEAPI)\n      info_cfg_option(WITH_CYCLES_ONEAPI_BINARIES)\n      info_cfg_option(WITH_CYCLES_DEVICE_HIP)\n      info_cfg_option(WITH_CYCLES_HIP_BINARIES)\n      info_cfg_option(WITH_CYCLES_DEVICE_HIPRT)\n    endif()\n  endif()\n\n  info_cfg_text(\"\")\n\n  message(\"${_config_msg}\")\nendif()\n\nif(0)\n  print_all_vars()\nendif()\n\n# Should be the last step of configuration.\nif(POSTCONFIGURE_SCRIPT)\n  include(${POSTCONFIGURE_SCRIPT})\nendif()\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.294921875,
          "content": "Blender uses the GNU General Public License, which describes the rights\nto distribute or change the code. \n\nPlease read this file for the full license.\ndoc/license/GPL-license.txt\n\nApart from the GNU GPL, Blender is not available under other licenses.\n\n2010, Blender Foundation\nfoundation@blender.org\n\n"
        },
        {
          "name": "GNUmakefile",
          "type": "blob",
          "size": 19.86328125,
          "content": "# SPDX-FileCopyrightText: 2011-2023 Blender Authors\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# This Makefile does an out-of-source CMake build in ../build_`OS`\n# eg:\n#   ../build_linux_i386\n# This is for users who like to configure & build blender with a single command.\n\ndefine HELP_TEXT\n\nBlender Convenience Targets\n   Provided for building Blender (multiple targets can be used at once).\n\n   * debug:         Build a debug binary.\n   * full:          Enable all supported dependencies & options.\n   * lite:          Disable non essential features for a smaller binary and faster build.\n   * release:       Complete build with all options enabled including CUDA and Optix, matching the releases on blender.org\n   * headless:      Build without an interface (renderfarm or server automation).\n   * cycles:        Build Cycles standalone only, without Blender.\n   * bpy:           Build as a python module which can be loaded from python directly.\n   * developer:     Enable faster builds, error checking and tests, recommended for developers.\n   * ninja:         Use ninja build tool for faster builds.\n   * ccache:        Use ccache for faster rebuilds.\n\n   Note: when passing in multiple targets their order is not important.\n   So for a fast build you can for e.g. run 'make lite ccache ninja'.\n   Note: passing the argument 'BUILD_DIR=path' when calling make will override the default build dir.\n   Note: passing the argument 'BUILD_CMAKE_ARGS=args' lets you add cmake arguments.\n\nOther Convenience Targets\n   Provided for other building operations.\n\n   * config:        Run cmake configuration tool to set build options.\n   * deps:          Build library dependencies (intended only for platform maintainers).\n\n                    The existence of locally build dependencies overrides the pre-built dependencies from subversion.\n                    These must be manually removed from 'lib/' to go back to using the pre-compiled libraries.\n\nProject Files\n   Generate project files for development environments.\n\n   * project_qtcreator:     QtCreator Project Files.\n   * project_eclipse:       Eclipse CDT4 Project Files.\n\nPackage Targets\n\n   * package_archive:   Build an archive package.\n\nTesting Targets\n   Not associated with building Blender.\n\n   * test:\n     Run automated tests with ctest.\n\nStatic Source Code Checking\n   Not associated with building Blender.\n\n   * check_cppcheck:        Run blender source through cppcheck (C & C++).\n   * check_clang_array:     Run blender source through clang array checking script (C & C++).\n   * check_struct_comments: Check struct member comments are correct (C & C++).\n   * check_deprecated:      Check if there is any deprecated code to remove.\n   * check_descriptions:    Check for duplicate/invalid descriptions.\n   * check_licenses:        Check license headers follow the SPDX license specification,\n                            using one of the accepted licenses in 'doc/license/SPDX-license-identifiers.txt'\n                            Append with 'SHOW_HEADERS=1' to show all unique headers\n                            which can be useful for spotting license irregularities.\n   * check_cmake:           Runs our own cmake file checker which detects errors in the cmake file list definitions.\n   * check_pep8:            Checks all Python script are pep8 which are tagged to use the stricter formatting.\n   * check_mypy:            Checks all Python scripts using mypy,\n                            see: tools/check_source/check_mypy_config.py scripts which are included.\n\nDocumentation Checking\n\n   * check_docs_file_structure:\n     Check the documentation for the source-tree's file structure\n     matches Blender's source-code.\n     See: https://developer.blender.org/docs/features/code_layout/\n\nSpell Checkers\n   This runs the spell checker from the developer tools repositor.\n\n   * check_spelling_c:       Check for spelling errors (C/C++ only),\n   * check_spelling_py:      Check for spelling errors (Python only).\n   * check_spelling_shaders: Check for spelling errors (GLSL,OSL & MSL only).\n   * check_spelling_cmake:   Check for spelling errors (CMake only).\n\n   Note: an additional word-list is maintained at: 'tools/check_source/check_spelling_c_config.py'\n\n   Note: that spell checkers can take a 'CHECK_SPELLING_CACHE' filepath argument,\n   so re-running does not need to re-check unchanged files.\n\n   Example:\n      make check_spelling_c CHECK_SPELLING_CACHE=../spelling_cache.data\n\nUtilities\n   Not associated with building Blender.\n\n   * icons_geom:\n     Updates Geometry icons from BLEND file.\n\n     Optionally pass in variable: 'BLENDER_BIN'\n     otherwise default paths are used.\n\n     Example\n        make icons_geom BLENDER_BIN=/path/to/blender\n\n   * source_archive:\n     Create a compressed archive of the source code.\n\n   * source_archive_complete:\n     Create a compressed archive of the source code and all the libraries of dependencies.\n\n   * update:\n     Updates git and all submodules and svn.\n\n   * update_code:\n     Updates git and all submodules but not svn.\n\n   * format:\n     Format source code using clang-format & autopep8 (uses PATHS if passed in). For example::\n\n        make format PATHS=\"source/blender/blenlib source/blender/blenkernel\"\n\n   * license:\n     Create a combined file with all the license information relative to the libraries and other\n     code depedencies.\n\nEnvironment Variables\n\n   * BUILD_CMAKE_ARGS:      Arguments passed to CMake.\n   * BUILD_DIR:             Override default build path.\n   * PYTHON:                Use this for the Python command (used for checking tools).\n   * NPROCS:                Number of processes to use building (auto-detect when omitted).\n   * AUTOPEP8:              Command used for Python code-formatting (used for the format target).\n\nDocumentation Targets\n   Not associated with building Blender.\n\n   * doc_py:        Generate sphinx python api docs.\n   * doc_doxy:      Generate doxygen C/C++ docs.\n   * doc_dna:       Generate blender file format reference.\n   * doc_man:       Generate manpage.\n\nInformation\n\n   * help:              This help message.\n   * help_features:     Show a list of optional features when building.\n\nendef\n# HELP_TEXT (end)\n\n# This makefile is not meant for Windows\nifeq ($(OS),Windows_NT)\n\t$(error On Windows, use \"cmd //c make.bat\" instead of \"make\")\nendif\n\n# System Vars\nOS:=$(shell uname -s)\nOS_NCASE:=$(shell uname -s | tr '[A-Z]' '[a-z]')\nCPU:=$(shell uname -m)\n\n# Use our OS and CPU architecture naming conventions.\nifeq ($(CPU),x86_64)\n\tCPU:=x64\nendif\nifeq ($(CPU),aarch64)\n\tCPU:=arm64\nendif\nifeq ($(OS_NCASE),darwin)\n\tOS_LIBDIR:=macos\nelse\n\tOS_LIBDIR:=$(OS_NCASE)\nendif\n\n\n# Source and Build DIR's\nBLENDER_DIR:=$(shell pwd -P)\nBUILD_TYPE:=Release\nBLENDER_IS_PYTHON_MODULE:=\n\n# CMake arguments, assigned to local variable to make it mutable.\nCMAKE_CONFIG_ARGS := $(BUILD_CMAKE_ARGS)\n\nifndef BUILD_DIR\n\tBUILD_DIR:=$(shell dirname \"$(BLENDER_DIR)\")/build_$(OS_NCASE)\nendif\n\n# Dependencies DIR's\nDEPS_SOURCE_DIR:=$(BLENDER_DIR)/build_files/build_environment\n\nifndef DEPS_BUILD_DIR\n\tDEPS_BUILD_DIR:=$(BUILD_DIR)/deps_$(CPU)\nendif\n\nifndef DEPS_INSTALL_DIR\n\tDEPS_INSTALL_DIR:=$(BLENDER_DIR)/lib/$(OS_LIBDIR)_$(CPU)\nendif\n\n# Set the LIBDIR, an empty string when not found.\nLIBDIR:=$(wildcard $(BLENDER_DIR)/lib/${OS_LIBDIR}_${CPU})\nifeq (, $(LIBDIR))\n\tLIBDIR:=$(wildcard $(BLENDER_DIR)/lib/${OS_LIBDIR})\nendif\n\n# Find the newest Python version bundled in `LIBDIR`.\nPY_LIB_VERSION:=3.15\nifeq (, $(wildcard $(LIBDIR)/python/bin/python$(PY_LIB_VERSION)))\n\tPY_LIB_VERSION:=3.14\n\tifeq (, $(wildcard $(LIBDIR)/python/bin/python$(PY_LIB_VERSION)))\n\t\tPY_LIB_VERSION:=3.13\n\t\tifeq (, $(wildcard $(LIBDIR)/python/bin/python$(PY_LIB_VERSION)))\n\t\t\tPY_LIB_VERSION:=3.12\n\t\t\tifeq (, $(wildcard $(LIBDIR)/python/bin/python$(PY_LIB_VERSION)))\n\t\t\t\tPY_LIB_VERSION:=3.11\n\t\t\t\tifeq (, $(wildcard $(LIBDIR)/python/bin/python$(PY_LIB_VERSION)))\n\t\t\t\t\tPY_LIB_VERSION:=3.10\n\t\t\t\tendif\n\t\t\tendif\n\t\tendif\n\tendif\nendif\n\n# Allow to use alternative binary (pypy3, etc)\nifndef PYTHON\n\t# If not overriden, first try using Python from LIBDIR.\n\tPYTHON:=$(LIBDIR)/python/bin/python$(PY_LIB_VERSION)\n\tifeq (, $(wildcard $(PYTHON)))\n\t\t# If not available, use system python3 or python command.\n\t\tPYTHON:=python3\n\t\tifeq (, $(shell command -v $(PYTHON)))\n\t\t\tPYTHON:=python\n\t\tendif\n\telse\n\t\t# Don't generate __pycache__ files in lib folder, they\n\t\t# can interfere with updates.\n\t\tPYTHON:=$(PYTHON) -B\n\tendif\nendif\n\n# Use the autopep8 module in ../lib/ (which can be executed via Python directly).\n# Otherwise the \"autopep8\" command can be used.\nifndef AUTOPEP8\n\tifneq (, $(LIBDIR))\n\t\tAUTOPEP8:=$(wildcard $(LIBDIR)/python/lib/python$(PY_LIB_VERSION)/site-packages/autopep8.py)\n\tendif\n\tifeq (, $(AUTOPEP8))\n\t\tAUTOPEP8:=autopep8\n\tendif\nendif\n\n\n# -----------------------------------------------------------------------------\n# Additional targets for the build configuration\n\n# NOTE: These targets can be combined and are applied in reverse order listed here.\n# So it's important that `bpy` comes before `release` (for example)\n# `make bpy release` first loads `release` configuration, then `bpy`.\n# This is important as `bpy` will turn off some settings enabled by release.\n\nifneq \"$(findstring bpy, $(MAKECMDGOALS))\" \"\"\n\tBUILD_DIR:=$(BUILD_DIR)_bpy\n\tCMAKE_CONFIG_ARGS:=-C\"$(BLENDER_DIR)/build_files/cmake/config/bpy_module.cmake\" $(CMAKE_CONFIG_ARGS)\n\tBLENDER_IS_PYTHON_MODULE:=1\nendif\nifneq \"$(findstring debug, $(MAKECMDGOALS))\" \"\"\n\tBUILD_DIR:=$(BUILD_DIR)_debug\n\tBUILD_TYPE:=Debug\nendif\nifneq \"$(findstring full, $(MAKECMDGOALS))\" \"\"\n\tBUILD_DIR:=$(BUILD_DIR)_full\n\tCMAKE_CONFIG_ARGS:=-C\"$(BLENDER_DIR)/build_files/cmake/config/blender_full.cmake\" $(CMAKE_CONFIG_ARGS)\nendif\nifneq \"$(findstring lite, $(MAKECMDGOALS))\" \"\"\n\tBUILD_DIR:=$(BUILD_DIR)_lite\n\tCMAKE_CONFIG_ARGS:=-C\"$(BLENDER_DIR)/build_files/cmake/config/blender_lite.cmake\" $(CMAKE_CONFIG_ARGS)\nendif\nifneq \"$(findstring release, $(MAKECMDGOALS))\" \"\"\n\tBUILD_DIR:=$(BUILD_DIR)_release\n\tCMAKE_CONFIG_ARGS:=-C\"$(BLENDER_DIR)/build_files/cmake/config/blender_release.cmake\" $(CMAKE_CONFIG_ARGS)\nendif\nifneq \"$(findstring cycles, $(MAKECMDGOALS))\" \"\"\n\tBUILD_DIR:=$(BUILD_DIR)_cycles\n\tCMAKE_CONFIG_ARGS:=-C\"$(BLENDER_DIR)/build_files/cmake/config/cycles_standalone.cmake\" $(CMAKE_CONFIG_ARGS)\nendif\nifneq \"$(findstring headless, $(MAKECMDGOALS))\" \"\"\n\tBUILD_DIR:=$(BUILD_DIR)_headless\n\tCMAKE_CONFIG_ARGS:=-C\"$(BLENDER_DIR)/build_files/cmake/config/blender_headless.cmake\" $(CMAKE_CONFIG_ARGS)\nendif\n\nifneq \"$(findstring developer, $(MAKECMDGOALS))\" \"\"\n\tCMAKE_CONFIG_ARGS:=-C\"$(BLENDER_DIR)/build_files/cmake/config/blender_developer.cmake\" $(CMAKE_CONFIG_ARGS)\nendif\n\nifneq \"$(findstring ccache, $(MAKECMDGOALS))\" \"\"\n\tCMAKE_CONFIG_ARGS:=-DWITH_COMPILER_CCACHE=YES $(CMAKE_CONFIG_ARGS)\nendif\n\n# -----------------------------------------------------------------------------\n# build tool\n\nifneq \"$(findstring ninja, $(MAKECMDGOALS))\" \"\"\n\tCMAKE_CONFIG_ARGS:=$(CMAKE_CONFIG_ARGS) -G Ninja\n\tBUILD_COMMAND:=ninja\n\tDEPS_BUILD_COMMAND:=ninja\nelse\n\tifneq (\"$(wildcard $(BUILD_DIR)/build.ninja)\",\"\")\n\t\tBUILD_COMMAND:=ninja\n\telse\n\t\tBUILD_COMMAND:=make -s\n\tendif\n\n\tifneq (\"$(wildcard $(DEPS_BUILD_DIR)/build.ninja)\",\"\")\n\t\tDEPS_BUILD_COMMAND:=ninja\n\telse\n\t\tifeq ($(OS), Darwin)\n\t\t\tDEPS_BUILD_COMMAND:=make -s\n\t\telse\n\t\t\tDEPS_BUILD_COMMAND:=\"$(BLENDER_DIR)/build_files/build_environment/linux/make_deps_wrapper.sh\" -s\n\t\tendif\n\tendif\nendif\n\n# -----------------------------------------------------------------------------\n# Blender binary path\n\n# Allow passing in own BLENDER_BIN so developers who don't\n# use the default build path can still use utility helpers.\nifeq ($(OS), Darwin)\n\tBLENDER_BIN?=\"$(BUILD_DIR)/bin/Blender.app/Contents/MacOS/Blender\"\n\tBLENDER_BIN_DIR?=\"$(BUILD_DIR)/bin/Blender.app/Contents/MacOS/Blender\"\nelse\n\tBLENDER_BIN?=\"$(BUILD_DIR)/bin/blender\"\n\tBLENDER_BIN_DIR?=\"$(BUILD_DIR)/bin\"\nendif\n\n\n# -----------------------------------------------------------------------------\n# Get the number of cores for threaded build\nifndef NPROCS\n\tNPROCS:=1\n\tifeq ($(OS), Linux)\n\t\tNPROCS:=$(shell nproc)\n\tendif\n\tifeq ($(OS), NetBSD)\n\t\tNPROCS:=$(shell getconf NPROCESSORS_ONLN)\n\tendif\n\tifneq (,$(filter $(OS),Darwin FreeBSD))\n\t\tNPROCS:=$(shell sysctl -n hw.ncpu)\n\tendif\nendif\n\n\n# -----------------------------------------------------------------------------\n# Macro for configuring cmake\n\nCMAKE_CONFIG = cmake $(CMAKE_CONFIG_ARGS) \\\n                     -H\"$(BLENDER_DIR)\" \\\n                     -B\"$(BUILD_DIR)\" \\\n                     -DCMAKE_BUILD_TYPE_INIT:STRING=$(BUILD_TYPE)\n\n\n# -----------------------------------------------------------------------------\n# Tool for 'make config'\n\n# X11 specific.\nifdef DISPLAY\n\tCMAKE_CONFIG_TOOL = cmake-gui\nelse\n\tCMAKE_CONFIG_TOOL = ccmake\nendif\n\n\n# -----------------------------------------------------------------------------\n# Build Blender\nall: .FORCE\n\t@echo\n\t@echo Configuring Blender in \\\"$(BUILD_DIR)\\\" ...\n\n#\t# if test ! -f $(BUILD_DIR)/CMakeCache.txt ; then \\\n#\t# \t$(CMAKE_CONFIG); \\\n#\t# fi\n\n#\t# do this always incase of failed initial build, could be smarter here...\n\t@$(CMAKE_CONFIG)\n\n\t@echo\n\t@echo Building Blender ...\n\t$(BUILD_COMMAND) -C \"$(BUILD_DIR)\" -j $(NPROCS) install\n\t@echo\n\t@echo Edit build configuration with: \\\"$(BUILD_DIR)/CMakeCache.txt\\\" run make again to rebuild.\n\t@if test -z \"$(BLENDER_IS_PYTHON_MODULE)\"; then \\\n\t\techo Blender successfully built, run from: $(BLENDER_BIN); \\\n\telse \\\n\t\techo Blender successfully built as a Python module, \\\"bpy\\\" can be imported from: $(BLENDER_BIN_DIR); \\\n\tfi\n\t@echo\n\ndebug: all\nfull: all\nlite: all\nrelease: all\ncycles: all\nheadless: all\nbpy: all\ndeveloper: all\nninja: all\nccache: all\n\n# -----------------------------------------------------------------------------\n# Build dependencies\nDEPS_TARGET = install\nifneq \"$(findstring clean, $(MAKECMDGOALS))\" \"\"\n\tDEPS_TARGET = clean\nendif\n\ndeps: .FORCE\n\t@echo\n\t@echo Configuring dependencies in \\\"$(DEPS_BUILD_DIR)\\\", install to \\\"$(DEPS_INSTALL_DIR)\\\"\n\n\t@cmake -H\"$(DEPS_SOURCE_DIR)\" \\\n\t       -B\"$(DEPS_BUILD_DIR)\" \\\n\t       -DHARVEST_TARGET=$(DEPS_INSTALL_DIR)\n\n\t@echo\n\t@echo Building dependencies ...\n\t$(DEPS_BUILD_COMMAND) -C \"$(DEPS_BUILD_DIR)\" -j $(NPROCS) $(DEPS_TARGET)\n\t@echo\n\t@echo Dependencies successfully built and installed to $(DEPS_INSTALL_DIR).\n\t@echo\n\n# -----------------------------------------------------------------------------\n# Configuration (save some cd'ing around)\nconfig: .FORCE\n\t$(CMAKE_CONFIG_TOOL) \"$(BUILD_DIR)\"\n\n\n# -----------------------------------------------------------------------------\n# Help for build targets\nexport HELP_TEXT\nhelp: .FORCE\n\t@echo \"$$HELP_TEXT\"\n\n# -----------------------------------------------------------------------------\n# Packages\n#\n\npackage_archive: .FORCE\n\tmake -C \"$(BUILD_DIR)\" -s package_archive\n\t@echo archive in \"$(BUILD_DIR)/release\"\n\n\n# -----------------------------------------------------------------------------\n# Tests\n#\ntest: .FORCE\n\t@$(PYTHON) ./build_files/utils/make_test.py \"$(BUILD_DIR)\"\n\n\n# -----------------------------------------------------------------------------\n# Project Files\n#\n\nproject_qtcreator: .FORCE\n\t$(PYTHON) tools/utils_ide/cmake_qtcreator_project.py --build-dir \"$(BUILD_DIR)\"\n\nproject_eclipse: .FORCE\n\tcmake -G\"Eclipse CDT4 - Unix Makefiles\" -H\"$(BLENDER_DIR)\" -B\"$(BUILD_DIR)\"\n\n\n# -----------------------------------------------------------------------------\n# Static Checking\n#\n\ncheck_cppcheck: .FORCE\n\t@$(CMAKE_CONFIG)\n\t@cd \"$(BUILD_DIR)\" ; \\\n\t$(PYTHON) \\\n\t    \"$(BLENDER_DIR)/tools/check_source/static_check_cppcheck.py\"\n\ncheck_struct_comments: .FORCE\n\t@$(CMAKE_CONFIG)\n\t@cd \"$(BUILD_DIR)\" ; \\\n\t$(PYTHON) \\\n\t    \"$(BLENDER_DIR)/tools/check_source/static_check_clang.py\" \\\n\t    --checks=struct_comments --match=\".*\" --jobs=$(NPROCS)\n\ncheck_clang_array: .FORCE\n\t@$(CMAKE_CONFIG)\n\t@cd \"$(BUILD_DIR)\" ; \\\n\t$(PYTHON) \"$(BLENDER_DIR)/tools/check_source/static_check_clang_array.py\"\n\ncheck_mypy: .FORCE\n\t@$(PYTHON) \"$(BLENDER_DIR)/tools/check_source/check_mypy.py\"\n\ncheck_docs_file_structure: .FORCE\n\t@PYTHONIOENCODING=utf_8 $(PYTHON) \\\n\t    \"$(BLENDER_DIR)/tools/check_docs/check_docs_code_layout.py\"\n\ncheck_spelling_py: .FORCE\n\t@PYTHONIOENCODING=utf_8 $(PYTHON) \\\n\t    \"$(BLENDER_DIR)/tools/check_source/check_spelling.py\" \\\n\t    --cache-file=$(CHECK_SPELLING_CACHE) \\\n\t    --match=\".*\\.(py)$$\" \\\n\t    \"$(BLENDER_DIR)/scripts\" \\\n\t    \"$(BLENDER_DIR)/source\" \\\n\t    \"$(BLENDER_DIR)/tools\"\n\ncheck_spelling_c: .FORCE\n\t@PYTHONIOENCODING=utf_8 $(PYTHON) \\\n\t    \"$(BLENDER_DIR)/tools/check_source/check_spelling.py\" \\\n\t    --cache-file=$(CHECK_SPELLING_CACHE) \\\n\t    --match=\".*\\.(c|cc|cpp|cxx|h|hh|hpp|hxx|inl|m|mm)$$\" \\\n\t    \"$(BLENDER_DIR)/source\" \\\n\t    \"$(BLENDER_DIR)/intern/cycles\" \\\n\t    \"$(BLENDER_DIR)/intern/guardedalloc\" \\\n\t    \"$(BLENDER_DIR)/intern/ghost\"\n\ncheck_spelling_shaders: .FORCE\n\t@PYTHONIOENCODING=utf_8 $(PYTHON) \\\n\t    \"$(BLENDER_DIR)/tools/check_source/check_spelling.py\" \\\n\t    --cache-file=$(CHECK_SPELLING_CACHE) \\\n\t    --match=\".*\\.(osl|metal|msl|glsl)$$\" \\\n\t    \"$(BLENDER_DIR)/intern/\" \\\n\t    \"$(BLENDER_DIR)/source/\"\n\ncheck_spelling_cmake: .FORCE\n\t@PYTHONIOENCODING=utf_8 $(PYTHON) \\\n\t    \"$(BLENDER_DIR)/tools/check_source/check_spelling.py\" \\\n\t    --cache-file=$(CHECK_SPELLING_CACHE) \\\n\t    --match=\".*\\.(cmake)$$\" \\\n\t    --match=\".*\\bCMakeLists\\.(txt)$$\" \\\n\t    \"$(BLENDER_DIR)/build_files/\" \\\n\t    \"$(BLENDER_DIR)/intern/\" \\\n\t    \"$(BLENDER_DIR)/source/\"\n\ncheck_descriptions: .FORCE\n\t@$(BLENDER_BIN) --background --factory-startup --python \\\n\t    \"$(BLENDER_DIR)/tools/check_source/check_descriptions.py\"\n\ncheck_deprecated: .FORCE\n\t@PYTHONIOENCODING=utf_8 $(PYTHON) \\\n\t    tools/check_source/check_deprecated.py\n\ncheck_licenses: .FORCE\n\t@PYTHONIOENCODING=utf_8 $(PYTHON) \\\n\t    \"$(BLENDER_DIR)/tools/check_source/check_licenses.py\" \\\n\t    \"--show-headers=$(SHOW_HEADERS)\"\n\ncheck_pep8: .FORCE\n\t@PYTHONIOENCODING=utf_8 $(PYTHON) \\\n\t    tests/python/pep8.py\n\ncheck_cmake: .FORCE\n\t@PYTHONIOENCODING=utf_8 $(PYTHON) \\\n\t    tools/check_source/check_cmake_consistency.py\n\n\n# -----------------------------------------------------------------------------\n# Utilities\n#\n\nsource_archive: .FORCE\n\t@$(PYTHON) ./build_files/utils/make_source_archive.py\n\nsource_archive_complete: .FORCE\n\t@cmake \\\n\t    -S \"$(BLENDER_DIR)/build_files/build_environment\" -B\"$(BUILD_DIR)/source_archive\" \\\n\t    -DCMAKE_BUILD_TYPE_INIT:STRING=$(BUILD_TYPE) -DPACKAGE_USE_UPSTREAM_SOURCES=OFF\n# This assumes CMake is still using a default `PACKAGE_DIR` variable:\n\t@$(PYTHON) ./build_files/utils/make_source_archive.py --include-packages \"$(BUILD_DIR)/source_archive/packages\"\n\nicons_geom: .FORCE\n\t@BLENDER_BIN=$(BLENDER_BIN) \\\n\t    \"$(BLENDER_DIR)/release/datafiles/blender_icons_geom_update.py\"\n\nupdate: .FORCE\n\t@$(PYTHON) ./build_files/utils/make_update.py\n\nupdate_code: .FORCE\n\t@$(PYTHON) ./build_files/utils/make_update.py --no-libraries\n\nformat: .FORCE\n\t@PATH=\"${LIBDIR}/llvm/bin/:$(PATH)\" $(PYTHON) tools/utils_maintenance/clang_format_paths.py $(PATHS)\n\t@$(PYTHON) tools/utils_maintenance/autopep8_format_paths.py --autopep8-command=\"$(AUTOPEP8)\" $(PATHS)\n\nlicense: .FORCE\n\t@$(PYTHON) tools/utils_maintenance/make_license.py\n\n# -----------------------------------------------------------------------------\n# Documentation\n#\n\n# Simple version of ./doc/python_api/sphinx_doc_gen.sh with no PDF generation.\ndoc_py: .FORCE\n\t@ASAN_OPTIONS=halt_on_error=0:${ASAN_OPTIONS} \\\n\t$(BLENDER_BIN) \\\n\t    --background --factory-startup \\\n\t    --python doc/python_api/sphinx_doc_gen.py\n\t@sphinx-build -b html -j $(NPROCS) doc/python_api/sphinx-in doc/python_api/sphinx-out\n\t@echo \"docs written into: '$(BLENDER_DIR)/doc/python_api/sphinx-out/index.html'\"\n\ndoc_doxy: .FORCE\n\t@cd doc/doxygen; doxygen Doxyfile\n\t@echo \"docs written into: '$(BLENDER_DIR)/doc/doxygen/html/index.html'\"\n\ndoc_dna: .FORCE\n\t@$(BLENDER_BIN) \\\n\t    --background --factory-startup \\\n\t    --python doc/blender_file_format/BlendFileDnaExporter_25.py\n\t@echo \"docs written into: '$(BLENDER_DIR)/doc/blender_file_format/dna.html'\"\n\ndoc_man: .FORCE\n\t@$(PYTHON) doc/manpage/blender.1.py --blender=\"$(BLENDER_BIN)\" --output=blender.1 --verbose\n\nhelp_features: .FORCE\n\t@$(PYTHON) \"$(BLENDER_DIR)/build_files/cmake/cmake_print_build_options.py\" $(BLENDER_DIR)\"/CMakeLists.txt\"\n\nclean: .FORCE\n\t$(BUILD_COMMAND) -C \"$(BUILD_DIR)\" clean\n\n.PHONY: all\n\n.FORCE:\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.203125,
          "content": "<!--\nKeep this document short & concise,\nlinking to external resources instead of including content in-line.\nSee 'release/text/readme.html' for the end user read-me.\n-->\n\nBlender\n=======\n\nBlender is the free and open source 3D creation suite.\nIt supports the entirety of the 3D pipeline-modeling, rigging, animation, simulation, rendering, compositing,\nmotion tracking and video editing.\n\n![Blender screenshot](https://code.blender.org/wp-content/uploads/2018/12/springrg.jpg \"Blender screenshot\")\n\nProject Pages\n-------------\n\n- [Main Website](http://www.blender.org)\n- [Reference Manual](https://docs.blender.org/manual/en/latest/index.html)\n- [User Community](https://www.blender.org/community/)\n\nDevelopment\n-----------\n\n- [Build Instructions](https://developer.blender.org/docs/handbook/building_blender/)\n- [Code Review & Bug Tracker](https://projects.blender.org)\n- [Developer Forum](https://devtalk.blender.org)\n- [Developer Documentation](https://developer.blender.org/docs/)\n\n\nLicense\n-------\n\nBlender as a whole is licensed under the GNU General Public License, Version 3.\nIndividual files may have a different, but compatible license.\n\nSee [blender.org/about/license](https://www.blender.org/about/license) for details.\n"
        },
        {
          "name": "build_files",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "extern",
          "type": "tree",
          "content": null
        },
        {
          "name": "intern",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "locale",
          "type": "tree",
          "content": null
        },
        {
          "name": "make.bat",
          "type": "blob",
          "size": 3.4814453125,
          "content": "@echo off\nREM This batch file does an out-of-source CMake build in ../build_windows\nREM This is for users who like to configure & build Blender with a single command.\nsetlocal EnableDelayedExpansion\nsetlocal ENABLEEXTENSIONS\nset BLENDER_DIR=%~dp0\n\ncall \"%BLENDER_DIR%\\build_files\\windows\\reset_variables.cmd\"\n\ncall \"%BLENDER_DIR%\\build_files\\windows\\check_spaces_in_path.cmd\"\nif errorlevel 1 goto EOF\n\ncall \"%BLENDER_DIR%\\build_files\\windows\\parse_arguments.cmd\" %*\nif errorlevel 1 goto EOF\n\ncall \"%BLENDER_DIR%\\build_files\\windows\\find_dependencies.cmd\"\nif errorlevel 1 goto EOF\n\nREM if it is one of the convenience targets and BLENDER_BIN is set\nREM skip compiler detection\nif \"%ICONS%%ICONS_GEOM%%DOC_PY%\" == \"1\" (\n\tif EXIST \"%BLENDER_BIN%\" (\n\t\tgoto convenience_targets\n\t)\n)\n\nif \"%BUILD_SHOW_HASHES%\" == \"1\" (\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\show_hashes.cmd\"\n\tgoto EOF\n)\n\nif \"%SHOW_HELP%\" == \"1\" (\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\show_help.cmd\"\n\tgoto EOF\n)\n\nif \"%FORMAT%\" == \"1\" (\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\format.cmd\"\n\tgoto EOF\n)\n\nif \"%LICENSE%\" == \"1\" (\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\license.cmd\"\n\tgoto EOF\n)\n\ncall \"%BLENDER_DIR%\\build_files\\windows\\detect_architecture.cmd\"\nif errorlevel 1 goto EOF\n\nif \"%BUILD_VS_YEAR%\" == \"\" (\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\autodetect_msvc.cmd\"\n\tif errorlevel 1 (\n\t\techo Visual Studio not found ^(try with the 'verbose' switch for more information^)\n\t\tgoto EOF\n\t)\n) else (\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\detect_msvc%BUILD_VS_YEAR%.cmd\"\n\tif errorlevel 1 (\n\t\techo Visual Studio %BUILD_VS_YEAR% not found ^(try with the 'verbose' switch for more information^)\n\t\tgoto EOF\n\t)\n)\n\nif \"%BUILD_UPDATE%\" == \"1\" (\n\tREM First see if the SVN libs are there and check them out if they are not.\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\check_libraries.cmd\"\n\tif errorlevel 1 goto EOF\n\tif \"%BUILD_UPDATE_SVN%\" == \"1\" (\n\t\tREM Then update SVN platform libraries, since updating python while python is\n\t\tREM running tends to be problematic. The python script that update_sources\n\t\tREM calls later on may still try to switch branches and run into trouble,\n\t\tREM but for *most* people this will side step the problem.\n\t\tcall \"%BLENDER_DIR%\\build_files\\windows\\lib_update.cmd\"\n\t)\n\tREM Finally call the python script shared between all platforms that updates git\n\tREM and does any other SVN work like update the tests or branch switches\n\tREM if required.\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\update_sources.cmd\"\n\tgoto EOF\n)\n\ncall \"%BLENDER_DIR%\\build_files\\windows\\set_build_dir.cmd\"\n\n:convenience_targets\n\nif \"%ICONS_GEOM%\" == \"1\" (\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\icons_geom.cmd\"\n\tgoto EOF\n)\n\nif \"%DOC_PY%\" == \"1\" (\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\doc_py.cmd\"\n\tgoto EOF\n)\n\nif \"%CMAKE%\" == \"\" (\n\techo Cmake not found in path, required for building, exiting...\n\texit /b 1\n)\n\necho Building blender with VS%BUILD_VS_YEAR% for %BUILD_ARCH% in %BUILD_DIR%\n\ncall \"%BLENDER_DIR%\\build_files\\windows\\check_libraries.cmd\"\nif errorlevel 1 goto EOF\n\nif \"%TEST%\" == \"1\" (\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\test.cmd\"\n\tgoto EOF\n)\n\nif \"%BUILD_WITH_NINJA%\" == \"\" (\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\configure_msbuild.cmd\"\n\tif errorlevel 1 goto EOF\n\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\build_msbuild.cmd\"\n\tif errorlevel 1 goto EOF\n) else (\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\configure_ninja.cmd\"\n\tif errorlevel 1 goto EOF\n\n\tcall \"%BLENDER_DIR%\\build_files\\windows\\build_ninja.cmd\"\n\tif errorlevel 1 goto EOF\n)\n\n:EOF\nif errorlevel 1 exit /b %errorlevel%\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.2646484375,
          "content": "# SPDX-License-Identifier: GPL-2.0-or-later\n\n[tool.autopep8]\n# Configuration for `autopep8`, allowing the command: autopep8 .\n# to reformat all source files.\n#\n# NOTE: the settings defined here map directly to command line arguments\n# which will override these settings when passed in to autopep8.\n\nmax_line_length = 120\n\nignore = [\n    # Info: Use `isinstance()` instead of comparing types directly.\n    # Why disable? Changes code logic, in rare cases we want to compare exact types.\n    \"E721\",\n    # Info: Fix bare except.\n    # Why disable? Disruptive, leave our exceptions alone.\n    \"E722\",\n    # Info: Fix module level import not at top of file.\n    # Why disable? Re-ordering imports is disruptive and breaks some scripts\n    # that need to check if a module has already been loaded in the case of reloading.\n    \"E402\",\n    # Info: Fix various deprecated code (via lib2to3)\n    # Why disable? Does nothing besides incorrectly adding a duplicate import,\n    # could be reported as a bug except this is likely to be removed soon, see:\n    # https://github.com/python/cpython/issues/84540.\n    \"W690\",\n]\n\n# Use aggressive as many useful edits are disabled unless it's enabled.\n# Any edits which are overly disruptive or risky can be removed in the `ignore` list.\naggressive = 2\n\n# Exclude:\n# - `./extern/` because it's maintained separately.\n# - `./tools/svn_rev_map/` contains data-files which are slow to re-format and don't benefit from formatting.\n# - `./scripts/addons*` because it is an external repository.\n#   which can contain their own configuration and be handled separately.\n# - `./scripts/modules/rna_manual_reference.py` because it's a generated data-file.\nexclude = \"\"\"\nextern/*,\nscripts/addons_core/*,\nscripts/modules/rna_manual_reference.py,\ntools/svn_rev_map/sha1_to_rev.py,\ntools/svn_rev_map/rev_to_sha1.py,\n\"\"\"\n\n# Omit settings such as `jobs`, `in_place` & `recursive` as they can cause editor utilities that auto-format on save\n# to fail if the STDIN/STDOUT is used for formatting (which isn't compatible with these options).\n\n# Black shouldn't be used as a formatter. But if it's accidentally\n# used, it certainly shouldn't change all the quote marks around\n# strings. This simply makes such a mistake easier to recover from.\n[tool.black]\nskip-string-normalization = true\nline-length = 120\n"
        },
        {
          "name": "release",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}