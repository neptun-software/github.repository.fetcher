{
  "metadata": {
    "timestamp": 1736566349039,
    "page": 104,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebook/watchman",
      "stars": 12860,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0263671875,
          "content": "* text eol=lf\n*.png binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.16796875,
          "content": "/built/\n/external\nbuck-out\nbuck-cache\n.buckd\n.idea\n*.iml\n/Makefile.in\n/test-driver\n/aclocal.m4\n/autom4te.cache/\n/configure\n/depcomp\n/install-sh\n/missing\n/config.log\n.deps/\n.windeps\n/*.in\n/Makefile\n*.o\n/config.status\n*.swp\n/compile\n/stamp-h1\n/config.h*\n/thirdparty/jansson/jansson_config.h\n/compile\n/tests/*.t\n/*.t\n.dirstamp\n*.a\n/tests/integration/.watchman.*\n*.rpm\n/config.sub\n/config.guess\n/configure.lineno\n/python/build\n/python/dist/\n/watchman/python/pywatchman.egg-info/\n*.pyc\n*.pyd\n*.so\n*.obj\n*.exe\n*.dll\n*.pdb\n/test-suite.log\n/tests/*.log\n/tests/*.trs\n/a\n/arc\n/node/package-lock.json\n/node/node_modules\n/node/bser/node_modules\n/website/node_modules\n/website/build\n/website/src/watchman/docs\n/website/src/watchman/*.js\n/website/core/metadata.js\n/website/.sass-cache\n/website/_site\n/npm-debug.log\n/Debug\n.deps\n*.dep\n*.nativecodeanalysis.xml\n/watchman-test.log\nWatchman.vcxproj.*\nWatchman.vcxproj\n*.opensdf\n*.sdf\n*.sln\n*.suo\nm4/\n.libs/\n*.lo\n*.la\n/tests/integration/cppclient.t\nlibtool\nltmain.sh\ncppclient/watchmanclient.pc\n/website/.jekyll-metadata\n/CMakeCache.txt\n/CMakeFiles\n/*.cmake\n/Testing\n/install_manifest.txt\n*.vcxproj\n*.dir\n/x64\n/Release\n/Debug\n*.filters\n/.vs\n/external\n/common\n/eden\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 24.5341796875,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\ncmake_minimum_required(VERSION 3.8 FATAL_ERROR)\n\nset(CMAKE_MODULE_PATH\n  # For in-fbsource builds on mac\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../opensource/fbcode_builder/CMake\"\n  # For shipit-transformed builds\n  \"${CMAKE_CURRENT_SOURCE_DIR}/build/fbcode_builder/CMake\"\n  ${CMAKE_MODULE_PATH})\n\nif(NOT CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 17)\n  set(CMAKE_CXX_STANDARD_REQUIRED ON)\n  message(STATUS \"setting C++ standard to C++${CMAKE_CXX_STANDARD}\")\nendif()\n\n# Explicitly enable coroutine support, since GCC does not enable it\n# by default when targeting C++17.\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fcoroutines>)\nendif()\n\nif (WIN32)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DWIN32_LEAN_AND_MEAN -DNOMINMAX -DSTRICT\")\nendif()\n\n# Tell CMake to also look in the directories where getdeps.py installs\n# our third-party dependencies.\nlist(APPEND CMAKE_PREFIX_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/external/install\")\n\noption(BUILD_SHARED_LIBS\n  \"If enabled, build libraries as a shared library.  \\\n  This is generally discouraged, since we do not commit to having \\\n  a stable ABI.\"\n  OFF\n)\n# Mark BUILD_SHARED_LIBS as an \"advanced\" option, since enabling it\n# is generally discouraged.\nmark_as_advanced(BUILD_SHARED_LIBS)\n\noption(USE_SYS_PYTHON\n  \"If enabled, prefers to use the system installed python vs the user \\\n  installed python. Flipping this switch will change which python is used \\\n  during packaging and should be set to maximize portability.\"\n  ON\n)\n\nenable_testing()\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR})\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\ninclude_directories(\"${CMAKE_CURRENT_SOURCE_DIR}/external/install/include\")\n\noption(ENABLE_EDEN_SUPPORT \"If enabled, add support for the Eden \\\n  virtual filesystem.  That requires fbthrift.\"\n  ON)\n\n# Determine whether we are the git repo produced by shipit, a staging\n# area produced by shipit in the FB internal CI, or whether\n# we are building in the source monorepo.\n# For the FB internal CI flavor running shipit, CMAKE_CURRENT_SOURCE_DIR\n# will have a value like \"..../shipit_projects/watchman\".\nif (IS_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/.git\" OR\n    \"${CMAKE_CURRENT_SOURCE_DIR}\" MATCHES \"shipit_projects\")\n  set(IS_SHIPPED_IT TRUE)\nelse()\n  set(IS_SHIPPED_IT FALSE)\nendif()\n\n# If we're building from inside the monorepo, make the local directory\n# look like the shipit-transformed source in the git repo.\n# On windows we do a dumb recursive copy of the files because we cannot\n# guarantee that we'll be successful in setting up a symlink.\n# On everything else we set up a simple symlink.\n# In theory we can tell cmake to add a non-child subdir and avoid the\n# copy/symlink thing, but we'd need to teach various targets how to resolve\n# the path and that is rather a lot of work (I spent a couple of hours on this\n# before throwing in the towel).\nfunction(maybe_shipit_dir MONOREPO_RELATIVE_PATH)\n  get_filename_component(base \"${MONOREPO_RELATIVE_PATH}\" NAME)\n  if (NOT IS_SHIPPED_IT AND\n      NOT IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${base})\n    if (WIN32)\n      file(COPY\n        \"${CMAKE_CURRENT_SOURCE_DIR}/${MONOREPO_RELATIVE_PATH}\"\n        DESTINATION ${CMAKE_CURRENT_SOURCE_DIR})\n    else()\n      execute_process(COMMAND\n        ln -s ${MONOREPO_RELATIVE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/${base})\n    endif()\n  endif()\nendfunction()\n\nif (ENABLE_EDEN_SUPPORT)\n  # We use shipit to mirror in these locations from the monorepo\n  maybe_shipit_dir(\"../eden\")\nendif()\n\n# A nonsensical version that doesn't correspond to any manually\n# released version.\nset(PACKAGE_VERSION \"0.0.0\")\nset(WATCHMAN_VERSION_OVERRIDE \"\" CACHE STRING \"Use this version code for \\\n    Watchman version instead of the default computed from the repo\")\nset(WATCHMAN_BUILDINFO_OVERRIDE \"\" CACHE STRING \"Use this version code for \\\n    Watchman build info instead of the default (nothing)\")\n\nif (WATCHMAN_VERSION_OVERRIDE)\n  set(PACKAGE_VERSION \"${WATCHMAN_VERSION_OVERRIDE}\")\nelseif(DEFINED ENV{WATCHMAN_VERSION_OVERRIDE})\n  set(PACKAGE_VERSION \"$ENV{WATCHMAN_VERSION_OVERRIDE}\")\nelseif(DEFINED ENV{FBSOURCE_DATE})\n  # If set, we expect FBSOURCE_DATE to have the form \"20200324.113140\"\n  set(PACKAGE_VERSION \"$ENV{FBSOURCE_DATE}.0\")\n  set(BUILD_INFO \"$ENV{FBSOURCE_HASH}\")\nelse()\n  find_program(GIT git)\n  if(GIT)\n    execute_process(\n      COMMAND \"${GIT}\" \"show\" \"-s\" \"--format=%H;%cd\" \"--date=format:%Y%m%d.%H%M%S.0\"\n      WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"\n      RESULT_VARIABLE git_result\n      OUTPUT_VARIABLE git_data\n      ERROR_VARIABLE git_err\n      OUTPUT_STRIP_TRAILING_WHITESPACE\n    )\n    if(git_result EQUAL 0)\n      list(GET git_data 0 BUILD_INFO)\n      list(GET git_data 1 PACKAGE_VERSION)\n    endif()\n  endif()\nendif()\nmessage(STATUS \"PACKAGE_VERSION=${PACKAGE_VERSION}, BUILD_INFO=${BUILD_INFO}\")\n\nset(PACKAGE_NAME      \"watchman\")\nset(PACKAGE_STRING    \"${PACKAGE_NAME} ${PACKAGE_VERSION}\")\nset(PACKAGE_TARNAME   \"${PACKAGE_NAME}-${PACKAGE_VERSION}\")\nset(PACKAGE_BUGREPORT \"https://github.com/facebook/watchman/issues\")\nproject(${PACKAGE_NAME} CXX C)\n\nfind_package(GMock MODULE REQUIRED)\ninclude_directories(${GMOCK_INCLUDEDIR} ${LIBGMOCK_INCLUDE_DIR})\ninclude(GoogleTest)\nenable_testing()\n\ninclude(FBThriftCppLibrary)\ninclude(CheckFunctionExists)\ninclude(CheckIncludeFiles)\ninclude(CheckStructHasMember)\ninclude(CheckSymbolExists)\ninclude(RustStaticLibrary)\n\n# configure_file wants us to define a separate file.  I'd rather not\n# have boilerplate for the same thing in two difference files, so we\n# roll the checks in together with writing out the features to config.h\n# ourselves here.\nfunction(config_h LINE)\n  file(APPEND \"${CMAKE_CURRENT_BINARY_DIR}/watchman/config.h.new\" \"${LINE}\\n\")\nendfunction()\n\nfile(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/watchman/config.h.new\" \"#pragma once\\n\")\n\nif(NOT WIN32)\n  set(WATCHMAN_STATE_DIR \"${CMAKE_INSTALL_PREFIX}/var/run/watchman\" CACHE STRING\n    \"Run-time path of the persistent state directory\")\n  set(INSTALL_WATCHMAN_STATE_DIR OFF CACHE BOOL\n    \"Whether WATCHMAN_STATE_DIR should be created by the cmake install\n    target.  Disabling this is useful in the case where the CMAKE_INSTALL_PREFIX\n    is owned by a non-privileged user but where the WATCHMAN_STATE_DIR requires\n    administrative rights to create and set its permissions.\")\nelse()\n  set(WATCHMAN_STATE_DIR)\n  set(INSTALL_WATCHMAN_STATE_DIR)\nendif()\n\nif(WATCHMAN_STATE_DIR AND INSTALL_WATCHMAN_STATE_DIR)\n  install(DIRECTORY DESTINATION ${WATCHMAN_STATE_DIR}\n    DIRECTORY_PERMISSIONS\n    OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE\n    GROUP_EXECUTE WORLD_READ WORLD_WRITE WORLD_EXECUTE SETGID)\nendif()\n\nconfig_h(\"// Generated by cmake\")\nif(WIN32)\n  config_h(\"#define WATCHMAN_CONFIG_FILE \\\n\\\"C:/ProgramData/facebook/watchman.json\\\"\")\nelse()\n  config_h(\"#define WATCHMAN_CONFIG_FILE \\\"/etc/watchman.json\\\"\")\nendif()\n\nif(WATCHMAN_STATE_DIR)\n  config_h(\"#define WATCHMAN_STATE_DIR \\\"${WATCHMAN_STATE_DIR}\\\"\")\nendif()\nconfig_h(\"#define PACKAGE_VERSION \\\"${PACKAGE_VERSION}\\\"\")\n\nif(BUILD_INFO)\n  config_h(\"#define WATCHMAN_BUILD_INFO \\\"${BUILD_INFO}\\\"\")\nendif ()\n\n\n# While most of these tests are not strictly needed on windows, it is vital\n# that we probe for and find strtoll in order for the jansson build to use\n# a 64-bit integer type, otherwise the mtime_us field renders as garbage\n# in the integration tests.\nforeach(wat_func\n    accept4\n    backtrace\n    backtrace_symbols\n    backtrace_symbols_fd\n    fdopendir\n    getattrlistbulk\n    inotify_init\n    inotify_init1\n    kqueue\n    localeconv\n    memmem\n    mkostemp\n    openat\n    pipe2\n    port_create\n    statfs\n    strtoll\n    sys_siglist\n)\n  CHECK_FUNCTION_EXISTS(${wat_func} have_${wat_func})\n  if (have_${wat_func})\n    string(TOUPPER have_${wat_func} sym)\n    config_h(\"#define ${sym} 1\")\n  endif()\nendforeach(wat_func)\n\nforeach(wat_header\n    CoreServices/CoreServices.h\n    execinfo.h\n    fcntl.h\n    inttypes.h\n    locale.h\n    port.h\n    sys/event.h\n    sys/inotify.h\n    sys/mount.h\n    sys/param.h\n    sys/resource.h\n    sys/socket.h\n    sys/statfs.h\n    sys/statvfs.h\n    sys/types.h\n    sys/ucred.h\n    sys/vfs.h\n    valgrind/valgrind.h\n)\n  string(TOUPPER have_${wat_header} sym)\n  string(REGEX REPLACE [./] _ sym ${sym})\n  CHECK_INCLUDE_FILES(${wat_header} ${sym})\n  if (${sym})\n    config_h(\"#define ${sym} 1\")\n  endif()\nendforeach(wat_header)\n\nCHECK_STRUCT_HAS_MEMBER(statvfs f_fstypename sys/statvfs.h\n  HAVE_STRUCT_STATVFS_F_FSTYPENAME)\nif (HAVE_STRUCT_STATVFS_F_BASETYPE)\n  config_h(\"define HAVE_STRUCT_STATVFS_F_FSTYPENAME 1\")\nendif()\n\nCHECK_STRUCT_HAS_MEMBER(statvfs f_basetype sys/statvfs.h\n  HAVE_STRUCT_STATVFS_F_BASETYPE)\nif (HAVE_STRUCT_STATVFS_F_BASETYPE)\n  config_h(\"define HAVE_STRUCT_STATVFS_F_BASETYPE 1\")\nendif()\n\nif(have_fcntl.h)\n  CHECK_SYMBOL_EXISTS(O_SYMLINK fcntl.h HAVE_DECL_O_SYMLINK)\n  if(HAVE_DECL_O_SYMLINK)\n    config_h(\"#define HAVE_DECL_O_SYMLINK 1\")\n  endif()\nendif()\nfind_package(PCRE2)\nif(PCRE2_FOUND)\n  config_h(\"#define HAVE_PCRE_H 1\")\nendif()\n\n# Now close out config.h.  We only want to touch the file if the contents are\n# different, so do a little dance to figure that out.\nif(EXISTS \"${CMAKE_CURRENT_BINARY_DIR}/watchman/config.h\")\n  file(MD5 \"${CMAKE_CURRENT_BINARY_DIR}/watchman/config.h\" orig_hash)\n  file(MD5 \"${CMAKE_CURRENT_BINARY_DIR}/watchman/config.h.new\" this_hash)\n  if(NOT orig_hash STREQUAL this_hash)\n    file(RENAME \"${CMAKE_CURRENT_BINARY_DIR}/watchman/config.h.new\"\n      \"${CMAKE_CURRENT_BINARY_DIR}/watchman/config.h\")\n  endif()\nelse()\n  file(RENAME \"${CMAKE_CURRENT_BINARY_DIR}/watchman/config.h.new\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/watchman/config.h\")\nendif()\n\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\n\n# This block is for cmake 3.0 which doesn't define the Threads::Threads\n# interface section.  Test for that and define it for ourselves.\nif(THREADS_FOUND AND NOT TARGET Threads::Threads)\n  add_library(Threads::Threads INTERFACE IMPORTED)\n\n  if(THREADS_HAVE_PTHREAD_ARG)\n    set_property(TARGET Threads::Threads PROPERTY\n      INTERFACE_COMPILE_OPTIONS \"-pthread\")\n  endif()\n\n  if(CMAKE_THREAD_LIBS_INIT)\n    set_property(TARGET Threads::Threads PROPERTY\n      INTERFACE_LINK_LIBRARIES \"${CMAKE_THREAD_LIBS_INIT}\")\n  endif()\nendif()\n\nfind_package(OpenSSL)\n\n# This block is for cmake 3.0 which doesn't define the OpenSSL::Crypto\n# interface section.  Test for that and define it for ourselves.\nif(OPENSSL_FOUND AND NOT TARGET OpenSSL::Crypto)\n  add_library(OpenSSL::Crypto UNKNOWN IMPORTED)\n    set_target_properties(OpenSSL::Crypto PROPERTIES\n      INTERFACE_INCLUDE_DIRECTORIES \"${OPENSSL_INCLUDE_DIR}\")\n    if(EXISTS \"${OPENSSL_CRYPTO_LIBRARY}\")\n      set_target_properties(OpenSSL::Crypto PROPERTIES\n        IMPORTED_LINK_INTERFACE_LANGUAGES \"C\"\n        IMPORTED_LOCATION \"${OPENSSL_CRYPTO_LIBRARY}\")\n    endif()\nendif()\n\nfind_package(Gflags REQUIRED)\ninclude_directories(SYSTEM ${GFLAGS_INCLUDE_DIR})\n\nfind_package(Glog REQUIRED)\nadd_compile_definitions(GLOG_NO_ABBREVIATED_SEVERITIES)\n\n# We indirectly depend on boost.  This logic needs to match\n# the same criteria used in thrift, which wants static libs\n# on windows.\nif(MSVC)\n  set(Boost_USE_STATIC_LIBS ON) #Force static lib in msvc\nendif(MSVC)\nfind_package(\n  Boost 1.54.0 REQUIRED #1.54.0 or greater\n  COMPONENTS\n    context\n    thread\n)\n\n# We indirectly depend on libevent.  Folly pulls in linkage to\n# event.lib, but on my system it does so as simply \"event.lib\"\n# and that fails linking.  Let's probe for the library and force\n# in the library directory for the linker. :-/\nfind_package(LibEvent REQUIRED)\nget_filename_component(LIBEVENT_LIBDIR \"${LIBEVENT_LIB}\" DIRECTORY)\nlink_directories(${LIBEVENT_LIBDIR})\nfind_package(edencommon CONFIG REQUIRED)\nfind_package(fmt CONFIG REQUIRED)\nfind_package(folly CONFIG REQUIRED)\n\nif (ENABLE_EDEN_SUPPORT)\n  find_package(fizz CONFIG REQUIRED)\n  find_package(wangle CONFIG REQUIRED)\n  find_package(FBThrift CONFIG REQUIRED)\n  find_package(fb303 CONFIG REQUIRED)\n  find_package(cpptoml CONFIG REQUIRED)\n  include_directories(${FB303_INCLUDE_DIR})\nendif()\nif(DEFINED ENV{NODE_BIN})\n  set(NODE $ENV{NODE_BIN})\nelse()\n  find_program(NODE node)\nendif()\nif(DEFINED ENV{YARN_PATH})\n  set(YARN $ENV{YARN_PATH})\nelse()\n  find_program(YARN yarn)\nendif()\n\n\nif(NOT WIN32)\n  # Sometimes the environment has a Python installation earlier in the\n  # PATH that is not suitable for building extensions. Prefer the\n  # primary system installation.\n  set(Python3_FIND_STRATEGY LOCATION)\n  if(USE_SYS_PYTHON)\n    message(STATUS \"Using sys python\")\n    set(Python3_ROOT_DIR /usr/bin)\n  else()\n    message(STATUS \"Using local python\")\n    set(Python3_ROOT_DIR /usr/local/bin)\n  endif()\nendif()\n\nfind_package(Python3 COMPONENTS Interpreter Development)\n\nif(NOT Python3_Interpreter_FOUND)\n  message(STATUS \"python not found, using default python\")\n  unset(Python3_ROOT_DIR)\n  unset(Python3_FIND_STRATEGY)\n  find_package(Python3 COMPONENTS Interpreter Development)\nendif()\n\n\nif(Python3_Development_FOUND)\n  set(PYOUT \"${CMAKE_CURRENT_BINARY_DIR}/pywatchman\")\n  set(SETUP_PY \"${CMAKE_CURRENT_SOURCE_DIR}/watchman/python/setup.py\")\n  set(PYWATCHMAN_BASE ${CMAKE_CURRENT_SOURCE_DIR}/watchman/python)\n  file(GLOB PYWATCHMAN_PY_SRCS \"watchman/python/pywatchman/*.py\")\n  file(MAKE_DIRECTORY ${PYOUT})\n  add_custom_command(\n    COMMENT \"Building pywatchman\"\n    OUTPUT ${PYOUT}\n    DEPENDS ${PYWATCHMAN_PY_SRCS} \"watchman/python/pywatchman/bser.c\"\n    WORKING_DIRECTORY ${PYWATCHMAN_BASE}\n    COMMAND ${CMAKE_COMMAND} -E env\n      CMAKE_CURRENT_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}\n      CMAKE_CURRENT_BINARY_DIR=${CMAKE_CURRENT_BINARY_DIR}\n      ${Python3_EXECUTABLE} ${SETUP_PY} build --build-base ${PYOUT}\n    COMMAND ${CMAKE_COMMAND} -E touch ${PYOUT}\n  )\n  add_custom_target(pybuild ALL DEPENDS ${PYOUT})\n  install(CODE \"\n    execute_process(COMMAND\n      ${CMAKE_COMMAND} -E env\n        CMAKE_CURRENT_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}\n        ${Python3_EXECUTABLE} ${SETUP_PY} install\n        --root $ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}\n      WORKING_DIRECTORY ${PYWATCHMAN_BASE}\n      RESULT_VARIABLE STATUS)\n    if (NOT STATUS STREQUAL 0)\n      message(FATAL_ERROR \\\"pywatchman install failed\\\")\n    endif()\n  \")\n  include(FBPythonBinary)\n  add_subdirectory(watchman/python)\n  add_subdirectory(watchman/integration)\nendif()\n\nif(Python3_Interpreter_FOUND AND NODE AND YARN)\n  add_subdirectory(watchman/node/bser)\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  # Check target architecture\n  if (NOT CMAKE_SIZEOF_VOID_P EQUAL 8)\n    message(FATAL_ERROR \"watchman requires a 64bit target architecture.\")\n  endif()\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)\n  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/watchman/winbuild)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /Zi /Zo /MP /Oi /EHsc /GL- /wd4250\")\n  set(CMAKE_SHARED_LINKER_FLAGS\n    \"${CMAKE_SHARED_LINKER_FLAGS} /DEBUG /OPT:NOREF\")\n  set(CMAKE_EXE_LINKER_FLAGS\n    \"${CMAKE_EXE_LINKER_FLAGS} /DEBUG /OPT:NOREF\")\n  set(CMAKE_MODULE_LINKER_FLAGS\n    \"${CMAKE_MODULE_LINKER_FLAGS} /DEBUG /OPT:NOREF\")\n  set(CMAKE_STATIC_LIBRARY_FLAGS\n    \"${CMAKE_STATIC_LIBRARY_FLAGS} /DEBUG /OPT:NOREF\")\nelse()\n  set(CMAKE_CXX_FLAGS_COMMON \"-g -Wall -Wextra -std=gnu++17\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_COMMON}\")  # for cmake 3.0\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_COMMON}\")\n  set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_COMMON} -O3\")\nendif()\n\nadd_library(third_party_deps INTERFACE)\ntarget_link_libraries(third_party_deps INTERFACE\n  Folly::folly\n  glog::glog\n  gflags\n  ${Boost_LIBRARIES}\n  fb303::fb303\n  fmt::fmt\n  edencommon::edencommon_utils\n  edencommon::edencommon_telemetry\n)\ntarget_include_directories(third_party_deps INTERFACE\n  ${FOLLY_INCLUDE_DIR}\n  ${GLOG_INCLUDE_DIR}\n  ${GFLAGS_INCLUDE_DIR}\n  ${Boost_INCLUDE_DIRS}\n)\nif (ENABLE_EDEN_SUPPORT)\n  target_link_libraries(\n    third_party_deps\n    INTERFACE\n    ${YARPL_LIBRARIES}\n    FBThrift::thriftcpp2\n    cpptoml\n  )\nendif()\nif(PCRE2_FOUND)\n  target_link_libraries(third_party_deps INTERFACE ${PCRE2_LIBRARY})\n  target_include_directories(third_party_deps INTERFACE ${PCRE2_INCLUDE_DIR})\n  target_compile_definitions(third_party_deps INTERFACE ${PCRE2_DEFINES})\n  if (WIN32)\n    # The pcre headers assume that the library is a dll by default\n    # but our preferred build environment only builds them as\n    # static, so be sure to ask for static pcre linkage\n    target_compile_definitions(third_party_deps INTERFACE PCRE2_STATIC)\n  endif()\nendif()\ntarget_link_libraries(third_party_deps INTERFACE Threads::Threads)\nif(TARGET OpenSSL::Crypto)\n  target_link_libraries(third_party_deps INTERFACE OpenSSL::Crypto)\nendif()\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  target_link_libraries(third_party_deps INTERFACE \"-framework CoreServices\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  target_link_libraries(third_party_deps INTERFACE\n    advapi32.lib\n    dbghelp.lib\n    shlwapi.lib\n  )\nendif()\n\nadd_library(wildmatch STATIC\n  watchman/thirdparty/wildmatch/wildmatch.c\n  watchman/thirdparty/wildmatch/wildmatch.h\n)\nadd_library(log STATIC\n  watchman/PubSub.cpp\n  watchman/LogConfig.cpp\n  watchman/Logging.cpp\n  watchman/portability/Backtrace.cpp\n)\ntarget_link_libraries(log third_party_deps)\nadd_library(err STATIC watchman/Poison.cpp watchman/root/warnerr.cpp)\ntarget_link_libraries(err third_party_deps)\nadd_library(jansson_utf STATIC watchman/thirdparty/jansson/utf.cpp)\n\nadd_library(string STATIC watchman/string.cpp)\ntarget_link_libraries(string jansson_utf third_party_deps)\n\nadd_library(jansson STATIC\nwatchman/thirdparty/jansson/dump.cpp\nwatchman/thirdparty/jansson/error.cpp\nwatchman/thirdparty/jansson/load.cpp\nwatchman/thirdparty/jansson/strconv.cpp\nwatchman/thirdparty/jansson/value.cpp\n)\ntarget_link_libraries(jansson string third_party_deps)\n\nlist(APPEND testsupport_sources\nwatchman/ChildProcess.cpp\nwatchman/fs/FileDescriptor.cpp\nwatchman/fs/FileInformation.cpp\nwatchman/fs/FSDetect.cpp\nwatchman/FlagMap.cpp\nwatchman/IgnoreSet.cpp\nwatchman/PendingCollection.cpp\nwatchman/fs/Pipe.cpp\nwatchman/fs/WindowsTime.cpp\nwatchman/ThreadPool.cpp\nwatchman/WatchmanConfig.cpp\nwatchman/bser.cpp\nwatchman/fs/UnixDirHandle.cpp\nwatchman/fs/WinDirHandle.cpp\nwatchman/stream.cpp\nwatchman/stream_unix.cpp\nwatchman/stream_win.cpp\nwatchman/portability/PosixSpawn.cpp\nwatchman/portability/WinError.cpp\nwatchman/root/dir.cpp\nwatchman/root/file.cpp\n)\n\nadd_library(testsupport STATIC ${testsupport_sources})\ntarget_link_libraries(testsupport log string jansson third_party_deps)\n\nif (ENABLE_EDEN_SUPPORT)\n  add_fbthrift_cpp_library(\n    eden_config_thrift\n    eden/fs/config/eden_config.thrift\n  )\n  add_fbthrift_cpp_library(\n    eden_service_thrift\n    eden/fs/service/eden.thrift\n    SERVICES\n      EdenService\n    DEPENDS\n      eden_config_thrift\n      fb303::fb303_thrift_cpp\n  )\n  add_fbthrift_cpp_library(\n    streamingeden_thrift\n    eden/fs/service/streamingeden.thrift\n    SERVICES\n      StreamingEdenService\n    DEPENDS\n      eden_service_thrift\n      fb303::fb303_thrift_cpp\n  )\nendif()\n\nlist(APPEND watchman_sources\nwatchman/ChildProcess.cpp\nwatchman/Client.cpp\nwatchman/Clock.cpp\nwatchman/Command.cpp\nwatchman/CommandRegistry.cpp\nwatchman/Connect.cpp\nwatchman/ContentHash.cpp\nwatchman/CookieSync.cpp\nwatchman/Errors.cpp\nwatchman/fs/FileDescriptor.cpp\nwatchman/fs/FileInformation.cpp\nwatchman/fs/FileSystem.cpp\nwatchman/FlagMap.cpp\nwatchman/fs/FSDetect.cpp\nwatchman/GroupLookup.cpp\nwatchman/IgnoreSet.cpp\nwatchman/InMemoryView.cpp\nwatchman/Options.cpp\nwatchman/PDU.cpp\nwatchman/PendingCollection.cpp\nwatchman/PerfSample.cpp\nwatchman/fs/ParallelWalk.cpp\nwatchman/fs/Pipe.cpp\nwatchman/ProcessLock.cpp\nwatchman/ProcessUtil.cpp\n# PubSub.cpp  (in liblog)\nwatchman/QueryableView.cpp\nwatchman/SanityCheck.cpp\nwatchman/Shutdown.cpp\nwatchman/SignalHandler.cpp\nwatchman/SymlinkTargets.cpp\nwatchman/ThreadPool.cpp\nwatchman/TriggerCommand.cpp\nwatchman/fs/UnixDirHandle.cpp\nwatchman/fs/WindowsTime.cpp\nwatchman/UserDir.cpp\nwatchman/WatchmanConfig.cpp\nwatchman/fs/WinDirHandle.cpp\nwatchman/bser.cpp\nwatchman/listener-user.cpp\nwatchman/listener.cpp\nwatchman/main.cpp\nwatchman/sockname.cpp\nwatchman/state.cpp\nwatchman/stream.cpp\nwatchman/stream_unix.cpp\nwatchman/stream_stdout.cpp\nwatchman/stream_win.cpp\n# string.cpp (in libstring)\nwatchman/portability/PosixSpawn.cpp\nwatchman/portability/WinError.cpp\nwatchman/query/FileResult.cpp\nwatchman/query/LocalFileResult.cpp\nwatchman/query/GlobEscaping.cpp\nwatchman/query/GlobTree.cpp\nwatchman/query/QueryContext.cpp\nwatchman/query/Query.cpp\nwatchman/query/QueryResult.cpp\nwatchman/query/TermRegistry.cpp\nwatchman/query/base.cpp\nwatchman/query/dirname.cpp\nwatchman/query/empty.cpp\nwatchman/query/eval.cpp\nwatchman/query/fieldlist.cpp\nwatchman/query/glob.cpp\nwatchman/query/intcompare.cpp\nwatchman/query/match.cpp\nwatchman/query/name.cpp\nwatchman/query/parse.cpp\nwatchman/query/pcre.cpp\nwatchman/query/since.cpp\nwatchman/query/suffix.cpp\nwatchman/query/type.cpp\nwatchman/cmds/debug.cpp\nwatchman/cmds/find.cpp\n# cmds/heapprof.cpp\nwatchman/cmds/info.cpp\nwatchman/cmds/log.cpp\nwatchman/cmds/query.cpp\nwatchman/cmds/since.cpp\nwatchman/cmds/state.cpp\nwatchman/cmds/subscribe.cpp\nwatchman/cmds/trigger.cpp\nwatchman/cmds/watch.cpp\nwatchman/root/ageout.cpp\nwatchman/root/dir.cpp\nwatchman/root/file.cpp\nwatchman/root/init.cpp\nwatchman/root/iothread.cpp\nwatchman/root/notifythread.cpp\nwatchman/# root/poison.cpp (in liberr)\nwatchman/root/reap.cpp\nwatchman/root/resolve.cpp\nwatchman/root/sync.cpp\nwatchman/root/threading.cpp\n# root/warnerr.cpp (in liberr)\nwatchman/root/watchlist.cpp\nwatchman/saved_state/LocalSavedStateInterface.cpp\nwatchman/saved_state/SavedStateFactory.cpp\nwatchman/saved_state/SavedStateInterface.cpp\nwatchman/scm/Git.cpp\nwatchman/scm/Mercurial.cpp\nwatchman/scm/SCM.cpp\nwatchman/telemetry/LogEvent.cpp\nwatchman/telemetry/WatchmanStats.cpp\nwatchman/telemetry/WatchmanStructuredLogger.cpp\nwatchman/thirdparty/getopt/GetOpt.cpp\nwatchman/watcher/Watcher.cpp\nwatchman/watcher/WatcherRegistry.cpp\nwatchman/watcher/fsevents.cpp\nwatchman/watcher/inotify.cpp\nwatchman/watcher/kqueue.cpp\nwatchman/watcher/portfs.cpp\nwatchman/watcher/kqueue_and_fsevents.cpp\nwatchman/watcher/win32.cpp\n)\n\nif (ENABLE_EDEN_SUPPORT)\n  # We currently only support talking to eden on posix systems\n  list(APPEND watchman_sources watchman/watcher/eden.cpp)\nendif()\n\nadd_executable(watchman ${watchman_sources})\nset_target_properties(watchman PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin\n)\ntarget_link_libraries(\n  watchman\n  log\n  string\n  err\n  jansson\n  wildmatch\n  third_party_deps\n)\n\nif (WIN32)\n  add_subdirectory(watchman/thirdparty/deelevate_binding)\n  target_link_libraries(\n    watchman\n    libdeelevate\n  )\n  install_rust_executable(deelevate)\nendif()\n\nif (ENABLE_EDEN_SUPPORT)\n  target_link_libraries(\n    watchman\n    streamingeden_thrift\n  )\nendif()\n\ninstall(TARGETS watchman RUNTIME DESTINATION bin)\n\nadd_subdirectory(watchman/cli)\n\nset(tests)\n# Helper function to define a unit test executable\nfunction(t_test NAME)\n  add_executable(${NAME}.t ${ARGN})\n  target_link_libraries(\n    ${NAME}.t\n    testsupport wildmatch third_party_deps\n    ${LIBGMOCK_LIBRARIES}\n  )\n  target_compile_definitions(${NAME}.t\n    PUBLIC WATCHMAN_TEST_SRC_DIR=\\\"${CMAKE_CURRENT_SOURCE_DIR}\\\")\n  gtest_discover_tests(${NAME}.t DISCOVERY_TIMEOUT 60)\n  list(APPEND tests ${NAME}.t)\nendfunction()\n\n# The `check` target runs the unit tests\nadd_custom_target(check\n  DEPENDS ${tests}\n  COMMAND ${CMAKE_CTEST_COMMAND})\n\nif(Python3_Interpreter_FOUND)\n  if (WIN32)\n    add_executable(susres watchman/winbuild/susres.cpp)\n    target_link_libraries(susres third_party_deps)\n    add_custom_target(make_susres ALL DEPENDS susres)\n  endif()\n\n  # The `integration` target runs the unit tests and integration tests\n  add_custom_target(integration\n    DEPENDS pybuild check\n    COMMAND ${Python3_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/runtests.py\n      --watchman-path ${CMAKE_CURRENT_BINARY_DIR}/watchman\n      --pybuild-dir ${CMAKE_CURRENT_BINARY_DIR}/watchman/python\n      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\nendif()\n\nt_test(art watchman/test/ArtTest.cpp)\nt_test(bser watchman/test/BserTest.cpp)\nt_test(cache watchman/test/CacheTest.cpp)\nt_test(childproc watchman/test/ChildProcTest.cpp)\nt_test(fsdetect watchman/test/FSDetectTest.cpp)\nt_test(ignore watchman/test/BserTest.cpp)\n# Linking this test needs the targets graph to be cleaned up.\n#t_test(inmemoryview watchman/test/InMemoryViewTest.cpp)\nt_test(log watchman/test/LogTest.cpp)\nt_test(maputil watchman/test/MapUtilTest.cpp)\nt_test(pendingcollection watchman/test/PendingCollectionTest.cpp)\n# Linking this test needs the targets graph to be cleaned up.\n#t_test(perfsample watchman/test/PerfSampleTest.cpp)\nt_test(result watchman/test/ResultTest.cpp)\nt_test(ringbuffer watchman/test/RingBufferTest.cpp)\nt_test(string watchman/test/StringTest.cpp)\nt_test(wildmatch watchman/test/WildmatchTest.cpp)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.27734375,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <opensource-conduct@fb.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.669921875,
          "content": "# Contributing to watchman\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Our Development Process\nWatchman is currently developed in Meta's internal repositories and then exported out to GitHub by a Meta team member; however, we invite you to submit pull requests as described below.\n\n## Pull Requests\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `main`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Getting Started\nFor more information on how to get started please see [contributing guide](https://facebook.github.io/watchman/docs/contributing).\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Meta's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nMeta has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## Coding Style\n* 2 spaces for indentation rather than tabs\n* 80 character line length\n\n## License\nBy contributing to watchman, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree (MIT License).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.06640625,
          "content": "MIT License\n\nCopyright (c) Meta Platforms, Inc. and its affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.markdown",
          "type": "blob",
          "size": 1.1904296875,
          "content": "<div align=\"center\">\n <img src=\"website/static/img/logo.png\" width=\"20%\" height=\"20%\" alt=\"watchman-logo\">\n <h1>Watchman</h1>\n <h3>A file watching service.</h3>\n</div>\n\n## Purpose\n\nWatchman exists to watch files and record when they actually change. It can\nalso trigger actions (such as rebuilding assets) when matching files change.\n\n## Documentation\n\nHead on over to https://facebook.github.io/watchman/\n\n## License\n\nWatchman is made available under the terms of the MIT License. See the\nLICENSE file that accompanies this distribution for the full text of the\nlicense.\n\n## Support\n\nWatchman is primarily maintained by the source control team at Meta Platforms, Inc. We support:\n\n* Windows and macOS builds\n* Linux builds on recent Ubuntu and Fedora releases\n* Watchman's [compatibility commitment](https://facebook.github.io/watchman/docs/compatibility.html)\n* Python, Rust, and JavaScript clients\n\nSupport for additional operating systems, release packaging, and language bindings is community-maintained:\n\n* Homebrew\n* FreeBSD\n* Solaris\n\nPlease submit a [GitHub issue](https://github.com/facebook/watchman/issues/) to report any troubles.\n\n## Contributing\n\nPlease see the [contributing document](CONTRIBUTING.md).\n"
        },
        {
          "name": "autogen.cmd",
          "type": "blob",
          "size": 0.357421875,
          "content": "@ECHO OFF\n\npython3 build/fbcode_builder/getdeps.py build --src-dir=. watchman \"--project-install-prefix=watchman:%userprofile%\" --scratch-path \"C:\\open\\scratch\"\n\npython3 build/fbcode_builder/getdeps.py fixup-dyn-deps --src-dir=. watchman  built \"--project-install-prefix=watchman:%userprofile%\" --final-install-prefix \"%userprofile%\" --scratch-path \"C:\\open\\scratch\""
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.6806640625,
          "content": "#!/bin/bash -e\n# vim:ts=2:sw=2:et:\n# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\ncd \"$(dirname \"$0\")\"\n\nset -x\nPREFIX=${PREFIX:-/usr/local}\npython3 build/fbcode_builder/getdeps.py build \\\n        --allow-system-packages \\\n        --src-dir=. \\\n        \"--project-install-prefix=watchman:$PREFIX\" \\\n        watchman\npython3 build/fbcode_builder/getdeps.py fixup-dyn-deps \\\n        --allow-system-packages \\\n        --src-dir=. \\\n        \"--project-install-prefix=watchman:$PREFIX\" \\\n        --final-install-prefix \"$PREFIX\" \\\n        watchman built\n\nfind built -ls\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.4287109375,
          "content": "too-many-lines-threshold = 200\nawait-holding-invalid-types = [\n    { path = \"tracing::span::Entered\", reason = \"`Entered` is not aware when a function is suspended: https://docs.rs/tracing/latest/tracing/struct.Span.html#in-asynchronous-code\" },\n    { path = \"tracing::span::EnteredSpan\", reason = \"`EnteredSpan` is not aware when a function is suspended: https://docs.rs/tracing/latest/tracing/struct.Span.html#in-asynchronous-code\" },\n]\n"
        },
        {
          "name": "eden",
          "type": "tree",
          "content": null
        },
        {
          "name": "install-system-packages.sh",
          "type": "blob",
          "size": 0.3134765625,
          "content": "#!/bin/bash -e\n# vim:ts=2:sw=2:et:\n# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\nset -x\npython3 \"$(dirname \"$0\")/build/fbcode_builder/getdeps.py\" install-system-deps --recursive watchman\n"
        },
        {
          "name": "run-tests.sh",
          "type": "blob",
          "size": 0.3251953125,
          "content": "#!/bin/bash -e\n# vim:ts=2:sw=2:et:\n# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\nset -x\npython3 \"$(dirname \"$0\")/build/fbcode_builder/getdeps.py\" test --allow-system-packages --no-testpilot watchman\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.2734375,
          "content": "# Get help on options with `rustfmt --help=config`\n# Please keep these in alphabetical order.\nedition = \"2021\"\nformat_code_in_doc_comments = true\ngroup_imports = \"StdExternalCrate\"\nimports_granularity = \"Item\"\nmerge_derives = false\nuse_field_init_shorthand = true\nversion = \"Two\"\n"
        },
        {
          "name": "watchman",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}