{
  "metadata": {
    "timestamp": 1736566262286,
    "page": 8,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hyprwm/Hyprland",
      "stars": 22607,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.763671875,
          "content": "---\nLanguage: Cpp\nBasedOnStyle: LLVM\n\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignConsecutiveMacros: true\nAlignConsecutiveAssignments: true\nAlignEscapedNewlines: Right\nAlignOperands: false\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: true\nAllowAllConstructorInitializersOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: true\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLambdasOnASingleLine: All\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializers: AfterColon\nColumnLimit: 180\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: false\nIncludeBlocks: Preserve\nIndentCaseLabels: true\nIndentWidth: 4\nPointerAlignment: Left\nReflowComments: false\nSortIncludes: false\nSortUsingDeclarations: false\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInCStyleCastParentheses: false\nSpacesInContainerLiterals: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard: Auto\nTabWidth: 4\nUseTab: Never\n\nAllowShortEnumsOnASingleLine: false\n\nBraceWrapping:\n  AfterEnum: false\n\nAlignConsecutiveDeclarations: AcrossEmptyLines\n\nNamespaceIndentation: All\n"
        },
        {
          "name": ".clang-format-ignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": "subprojects/**/*\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 3.6796875,
          "content": "WarningsAsErrors: '*'\nHeaderFilterRegex: '.*\\.hpp'\nFormatStyle: file\nChecks: >\n  -*,\n  bugprone-*,\n  -bugprone-easily-swappable-parameters,\n  -bugprone-forward-declararion-namespace,\n  -bugprone-forward-declararion-namespace,\n  -bugprone-macro-parentheses,\n  -bugprone-narrowing-conversions,\n  -bugprone-branch-clone,\n  -bugprone-assignment-in-if-condition,\n  concurrency-*,\n  -concurrency-mt-unsafe,\n  cppcoreguidelines-*,\n  -cppcoreguidelines-owning-memory,\n  -cppcoreguidelines-avoid-magic-numbers,\n  -cppcoreguidelines-pro-bounds-constant-array-index,\n  -cppcoreguidelines-avoid-const-or-ref-data-members,\n  -cppcoreguidelines-non-private-member-variables-in-classes,\n  -cppcoreguidelines-avoid-goto,\n  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,\n  -cppcoreguidelines-avoid-do-while,\n  -cppcoreguidelines-avoid-non-const-global-variables,\n  -cppcoreguidelines-special-member-functions,\n  -cppcoreguidelines-explicit-virtual-functions,\n  -cppcoreguidelines-avoid-c-arrays,\n  -cppcoreguidelines-pro-bounds-pointer-arithmetic,\n  -cppcoreguidelines-narrowing-conversions,\n  -cppcoreguidelines-pro-type-union-access,\n  -cppcoreguidelines-pro-type-member-init,\n  -cppcoreguidelines-macro-usage,\n  -cppcoreguidelines-macro-to-enum,\n  -cppcoreguidelines-init-variables,\n  -cppcoreguidelines-pro-type-cstyle-cast,\n  -cppcoreguidelines-pro-type-vararg,\n  -cppcoreguidelines-pro-type-reinterpret-cast,\n  google-global-names-in-headers,\n  -google-readability-casting,\n  google-runtime-operator,\n  misc-*,\n  -misc-unused-parameters,\n  -misc-no-recursion,\n  -misc-non-private-member-variables-in-classes,\n  -misc-include-cleaner,\n  -misc-use-anonymous-namespace,\n  -misc-const-correctness,\n  modernize-*,\n  -modernize-return-braced-init-list,\n  -modernize-use-trailing-return-type,\n  -modernize-use-using,\n  -modernize-use-override,\n  -modernize-avoid-c-arrays,\n  -modernize-macro-to-enum,\n  -modernize-loop-convert,\n  -modernize-use-nodiscard,\n  -modernize-pass-by-value,\n  -modernize-use-auto,\n  performance-*,\n  -performance-avoid-endl,\n  -performance-unnecessary-value-param,\n  portability-std-allocator-const,\n  readability-*,\n  -readability-function-cognitive-complexity,\n  -readability-function-size,\n  -readability-identifier-length,\n  -readability-magic-numbers,\n  -readability-uppercase-literal-suffix,\n  -readability-braces-around-statements,\n  -readability-redundant-access-specifiers,\n  -readability-else-after-return,\n  -readability-container-data-pointer,\n  -readability-implicit-bool-conversion,\n  -readability-avoid-nested-conditional-operator,\n  -readability-redundant-member-init,\n  -readability-redundant-string-init,\n  -readability-avoid-const-params-in-decls,\n  -readability-named-parameter,\n  -readability-convert-member-functions-to-static,\n  -readability-qualified-auto,\n  -readability-make-member-function-const,\n  -readability-isolate-declaration,\n  -readability-inconsistent-declaration-parameter-name,\n  -clang-diagnostic-error,\n\nCheckOptions:\n  performance-for-range-copy.WarnOnAllAutoCopies: true\n  performance-inefficient-string-concatenation.StrictMode: true\n  readability-braces-around-statements.ShortStatementLines: 0\n  readability-identifier-naming.ClassCase: CamelCase\n  readability-identifier-naming.ClassIgnoredRegexp: I.*\n  readability-identifier-naming.ClassPrefix: C # We can't use regex here?!?!?!?\n  readability-identifier-naming.EnumCase: CamelCase\n  readability-identifier-naming.EnumPrefix: e\n  readability-identifier-naming.EnumConstantCase: UPPER_CASE\n  readability-identifier-naming.FunctionCase: camelBack\n  readability-identifier-naming.NamespaceCase: CamelCase\n  readability-identifier-naming.NamespacePrefix: N\n  readability-identifier-naming.StructPrefix: S\n  readability-identifier-naming.StructCase: CamelCase\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.064453125,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4716796875,
          "content": "CMakeLists.txt.user\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\nCPackConfig.cmake\nCPackSourceConfig.cmake\nhyprland.pc\n_deps\n\nbuild/\nresult*\n/.pre-commit-config.yaml\n/.vscode/\n/.idea/\n.envrc\n.cache\n.direnv\n/.cmake/\n/.worktree/\n\n*.o\nprotocols/*.c*\nprotocols/*.h*\n.ccls-cache\n*.so\n\nhyprctl/hyprctl\n\ngmon.out\n*.out\n*.tar.gz\n\nPKGBUILD\n\nsrc/version.h\nhyprpm/Makefile\nhyprctl/Makefile\n\n**/.#*.*\n**/#*.*#\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.337890625,
          "content": "[submodule \"subprojects/hyprland-protocols\"]\n\tpath = subprojects/hyprland-protocols\n\turl = https://github.com/hyprwm/hyprland-protocols\n[submodule \"subprojects/udis86\"]\n\tpath = subprojects/udis86\n\turl = https://github.com/canihavesomecoffee/udis86\n[submodule \"subprojects/tracy\"]\n\tpath = subprojects/tracy\n\turl = https://github.com/wolfpld/tracy\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 13.7138671875,
          "content": "cmake_minimum_required(VERSION 3.30)\n\n# Get version\nfile(READ \"${CMAKE_SOURCE_DIR}/VERSION\" VER_RAW)\nstring(STRIP ${VER_RAW} VER)\n\nproject(\n  Hyprland\n  DESCRIPTION \"A Modern C++ Wayland Compositor\"\n  VERSION ${VER})\n\ninclude(CheckIncludeFile)\ninclude(GNUInstallDirs)\n\nset(HYPRLAND_VERSION ${VER})\nset(PREFIX ${CMAKE_INSTALL_PREFIX})\nset(INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR})\nset(BINDIR ${CMAKE_INSTALL_BINDIR})\nconfigure_file(hyprland.pc.in hyprland.pc @ONLY)\n\nset(CMAKE_MESSAGE_LOG_LEVEL \"STATUS\")\n\nmessage(STATUS \"Gathering git info\")\n\n# Get git info hash and branch\nexecute_process(COMMAND ./scripts/generateVersion.sh\n                WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})\n\nfind_package(PkgConfig REQUIRED)\n\n# Try to find canihavesomecoffee's udis86 using pkgconfig vmd/udis86 does not\n# provide a .pc file and won't be detected this way\npkg_check_modules(udis_dep IMPORTED_TARGET udis86>=1.7.2)\n\n# Fallback to subproject\nif(NOT udis_dep_FOUND)\n  add_subdirectory(\"subprojects/udis86\")\n  include_directories(\"subprojects/udis86\")\n  message(STATUS \"udis86 dependency not found, falling back to subproject\")\nendif()\n\nif(CMAKE_BUILD_TYPE)\n  string(TOLOWER ${CMAKE_BUILD_TYPE} BUILDTYPE_LOWER)\n  if(BUILDTYPE_LOWER STREQUAL \"release\")\n    # Pass.\n  elseif(BUILDTYPE_LOWER STREQUAL \"debug\")\n    # Pass.\n  elseif(BUILDTYPE_LOWER STREQUAL \"relwithdebinfo\")\n    set(BUILDTYPE_LOWER \"debugoptimized\")\n  elseif(BUILDTYPE_LOWER STREQUAL \"minsizerel\")\n    set(BUILDTYPE_LOWER \"minsize\")\n  elseif(BUILDTYPE_LOWER STREQUAL \"none\")\n    set(BUILDTYPE_LOWER \"plain\")\n  else()\n    set(BUILDTYPE_LOWER \"release\")\n  endif()\nelse()\n  set(BUILDTYPE_LOWER \"release\")\nendif()\n\npkg_get_variable(WAYLAND_PROTOCOLS_DIR wayland-protocols pkgdatadir)\nmessage(STATUS \"Found wayland-protocols at ${WAYLAND_PROTOCOLS_DIR}\")\npkg_get_variable(WAYLAND_SCANNER_PKGDATA_DIR wayland-scanner pkgdatadir)\nmessage(\n  STATUS \"Found wayland-scanner pkgdatadir at ${WAYLAND_SCANNER_PKGDATA_DIR}\")\n\nif(CMAKE_BUILD_TYPE MATCHES Debug OR CMAKE_BUILD_TYPE MATCHES DEBUG)\n  message(STATUS \"Configuring Hyprland in Debug with CMake\")\n  add_compile_definitions(HYPRLAND_DEBUG)\nelse()\n  add_compile_options(-O3)\n  message(STATUS \"Configuring Hyprland in Release with CMake\")\nendif()\n\nadd_compile_definitions(HYPRLAND_VERSION=\"${HYPRLAND_VERSION}\")\n\ninclude_directories(. \"src/\" \"protocols/\")\n\nset(CMAKE_CXX_STANDARD 26)\nadd_compile_options(\n  -Wall\n  -Wextra\n  -Wno-unused-parameter\n  -Wno-unused-value\n  -Wno-missing-field-initializers\n  -Wno-narrowing\n  -Wno-pointer-arith\n  -fmacro-prefix-map=${CMAKE_SOURCE_DIR}/=)\n\nset(CMAKE_EXECUTABLE_ENABLE_EXPORTS TRUE)\nset(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)\n\nmessage(STATUS \"Checking deps...\")\n\nfind_package(Threads REQUIRED)\n\nif(LEGACY_RENDERER)\n  set(GLES_VERSION \"GLES2\")\nelse()\n  set(GLES_VERSION \"GLES3\")\nendif()\nfind_package(OpenGL REQUIRED COMPONENTS ${GLES_VERSION})\n\npkg_check_modules(aquamarine_dep REQUIRED IMPORTED_TARGET aquamarine>=0.4.5)\npkg_check_modules(hyprlang_dep REQUIRED IMPORTED_TARGET hyprlang>=0.3.2)\npkg_check_modules(hyprcursor_dep REQUIRED IMPORTED_TARGET hyprcursor>=0.1.7)\npkg_check_modules(hyprutils_dep REQUIRED IMPORTED_TARGET hyprutils>=0.3.3)\npkg_check_modules(hyprgraphics_dep REQUIRED IMPORTED_TARGET hyprgraphics>=0.1.1)\n\nadd_compile_definitions(AQUAMARINE_VERSION=\"${aquamarine_dep_VERSION}\")\nadd_compile_definitions(HYPRLANG_VERSION=\"${hyprlang_dep_VERSION}\")\nadd_compile_definitions(HYPRUTILS_VERSION=\"${hyprutils_dep_VERSION}\")\nadd_compile_definitions(HYPRCURSOR_VERSION=\"${hyprcursor_dep_VERSION}\")\nadd_compile_definitions(HYPRGRAPHICS_VERSION=\"${hyprgraphics_dep_VERSION}\")\n\npkg_check_modules(\n  deps\n  REQUIRED\n  IMPORTED_TARGET\n  xkbcommon\n  uuid\n  wayland-server>=1.22.90\n  wayland-protocols\n  cairo\n  pango\n  pangocairo\n  pixman-1\n  xcursor\n  libdrm\n  libinput\n  gbm\n  gio-2.0\n  re2)\n\nfind_package(hyprwayland-scanner 0.3.10 REQUIRED)\n\nfile(GLOB_RECURSE SRCFILES \"src/*.cpp\")\n\nset(TRACY_CPP_FILES \"\")\nif(USE_TRACY)\n  set(TRACY_CPP_FILES \"subprojects/tracy/public/TracyClient.cpp\")\n  message(STATUS \"Tracy enabled, TRACY_CPP_FILES: \" ${TRACY_CPP_FILES})\nendif()\n\nadd_executable(Hyprland ${SRCFILES} ${TRACY_CPP_FILES})\n\nset(USE_GPROF ON)\n\nif(CMAKE_BUILD_TYPE MATCHES Debug OR CMAKE_BUILD_TYPE MATCHES DEBUG)\n  message(STATUS \"Setting debug flags\")\n\n  if(WITH_ASAN)\n    message(STATUS \"Enabling ASan\")\n\n    target_link_libraries(Hyprland asan)\n    target_compile_options(Hyprland PUBLIC -fsanitize=address)\n  endif()\n\n  if(USE_TRACY)\n    message(STATUS \"Tracy is turned on\")\n\n    option(TRACY_ENABLE \"\" ON)\n    option(TRACY_ON_DEMAND \"\" ON)\n    add_subdirectory(subprojects/tracy)\n\n    target_link_libraries(Hyprland Tracy::TracyClient)\n\n    if(USE_TRACY_GPU)\n      message(STATUS \"Tracy GPU Profiling is turned on\")\n      add_compile_definitions(USE_TRACY_GPU)\n    endif()\n  endif()\n\n  add_compile_options(-fno-pie -fno-builtin)\n  add_link_options(-no-pie -fno-builtin)\n  if(USE_GPROF)\n    add_compile_options(-pg)\n    add_link_options(-pg)\n  endif()\nendif()\n\ncheck_include_file(\"execinfo.h\" EXECINFOH)\nif(EXECINFOH)\n  message(STATUS \"Configuration supports execinfo\")\n  add_compile_definitions(HAS_EXECINFO)\nendif()\n\ninclude(CheckLibraryExists)\ncheck_library_exists(execinfo backtrace \"\" HAVE_LIBEXECINFO)\nif(HAVE_LIBEXECINFO)\n  target_link_libraries(Hyprland execinfo)\nendif()\n\ncheck_include_file(\"sys/timerfd.h\" HAS_TIMERFD)\npkg_check_modules(epoll IMPORTED_TARGET epoll-shim)\nif(NOT HAS_TIMERFD AND epoll_FOUND)\n  target_link_libraries(Hyprland PkgConfig::epoll)\nendif()\n\nif(LEGACY_RENDERER)\n  message(STATUS \"Using the legacy GLES2 renderer!\")\n  add_compile_definitions(LEGACY_RENDERER)\nendif()\n\nif(NO_XWAYLAND)\n  message(STATUS \"Using the NO_XWAYLAND flag, disabling XWayland!\")\n  add_compile_definitions(NO_XWAYLAND)\nelse()\n  message(STATUS \"XWAYLAND Enabled (NO_XWAYLAND not defined) checking deps...\")\n  pkg_check_modules(\n    xdeps\n    REQUIRED\n    IMPORTED_TARGET\n    xcb\n    xcb-render\n    xcb-xfixes\n    xcb-icccm\n    xcb-composite\n    xcb-res\n    xcb-errors)\n  target_link_libraries(Hyprland PkgConfig::xdeps)\nendif()\n\nif(NO_SYSTEMD)\n  message(STATUS \"SYSTEMD support is disabled...\")\nelse()\n  message(STATUS \"SYSTEMD support is requested (NO_SYSTEMD not defined)...\")\n  add_compile_definitions(USES_SYSTEMD)\n\n  # session file -uwsm\n  if(NO_UWSM)\n    message(STATUS \"UWSM support is disabled...\")\n  else()\n    message(STATUS \"UWSM support is enabled (NO_UWSM not defined)...\")\n    install(FILES ${CMAKE_SOURCE_DIR}/systemd/hyprland-uwsm.desktop\n            DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/wayland-sessions)\n  endif()\nendif()\n\nset(CPACK_PROJECT_NAME ${PROJECT_NAME})\nset(CPACK_PROJECT_VERSION ${PROJECT_VERSION})\ninclude(CPack)\n\nmessage(STATUS \"Setting precompiled headers\")\n\ntarget_precompile_headers(Hyprland PRIVATE\n                          $<$<COMPILE_LANGUAGE:CXX>:src/pch/pch.hpp>)\n\nmessage(STATUS \"Setting link libraries\")\n\ntarget_link_libraries(Hyprland rt PkgConfig::aquamarine_dep PkgConfig::hyprlang_dep PkgConfig::hyprutils_dep PkgConfig::hyprcursor_dep PkgConfig::hyprgraphics_dep PkgConfig::deps)\nif(udis_dep_FOUND)\n  target_link_libraries(Hyprland PkgConfig::udis_dep)\nelse()\n  target_link_libraries(Hyprland libudis86)\nendif()\n\n# used by `make installheaders`, to ensure the headers are generated\nadd_custom_target(generate-protocol-headers)\n\nfunction(protocolnew protoPath protoName external)\n  if(external)\n    set(path ${protoPath})\n  else()\n    set(path ${WAYLAND_PROTOCOLS_DIR}/${protoPath})\n  endif()\n  add_custom_command(\n    OUTPUT ${CMAKE_SOURCE_DIR}/protocols/${protoName}.cpp\n           ${CMAKE_SOURCE_DIR}/protocols/${protoName}.hpp\n    COMMAND hyprwayland-scanner ${path}/${protoName}.xml\n            ${CMAKE_SOURCE_DIR}/protocols/\n    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})\n  target_sources(Hyprland PRIVATE protocols/${protoName}.cpp\n                                  protocols/${protoName}.hpp)\n  target_sources(generate-protocol-headers\n                 PRIVATE ${CMAKE_SOURCE_DIR}/protocols/${protoName}.hpp)\nendfunction()\nfunction(protocolWayland)\n  add_custom_command(\n    OUTPUT ${CMAKE_SOURCE_DIR}/protocols/wayland.cpp\n           ${CMAKE_SOURCE_DIR}/protocols/wayland.hpp\n    COMMAND\n      hyprwayland-scanner --wayland-enums\n      ${WAYLAND_SCANNER_PKGDATA_DIR}/wayland.xml ${CMAKE_SOURCE_DIR}/protocols/\n    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})\n  target_sources(Hyprland PRIVATE protocols/wayland.cpp protocols/wayland.hpp)\n  target_sources(generate-protocol-headers\n                 PRIVATE ${CMAKE_SOURCE_DIR}/protocols/wayland.hpp)\nendfunction()\n\ntarget_link_libraries(Hyprland OpenGL::EGL OpenGL::GL Threads::Threads)\n\npkg_check_modules(hyprland_protocols_dep hyprland-protocols>=0.4.0)\nif(hyprland_protocols_dep_FOUND)\n  pkg_get_variable(HYPRLAND_PROTOCOLS hyprland-protocols pkgdatadir)\n  message(STATUS \"hyprland-protocols dependency set to ${HYPRLAND_PROTOCOLS}\")\nelse()\n  set(HYPRLAND_PROTOCOLS \"subprojects/hyprland-protocols\")\n  message(STATUS \"hyprland-protocols subproject set to ${HYPRLAND_PROTOCOLS}\")\nendif()\n\nprotocolnew(\"${HYPRLAND_PROTOCOLS}/protocols\" \"hyprland-global-shortcuts-v1\"\n            true)\nprotocolnew(\"unstable/text-input\" \"text-input-unstable-v1\" false)\nprotocolnew(\"${HYPRLAND_PROTOCOLS}/protocols\" \"hyprland-toplevel-export-v1\"\n            true)\nprotocolnew(\"protocols\" \"wlr-screencopy-unstable-v1\" true)\nprotocolnew(\"protocols\" \"wlr-gamma-control-unstable-v1\" true)\nprotocolnew(\"protocols\" \"wlr-foreign-toplevel-management-unstable-v1\" true)\nprotocolnew(\"protocols\" \"wlr-output-power-management-unstable-v1\" true)\nprotocolnew(\"protocols\" \"virtual-keyboard-unstable-v1\" true)\nprotocolnew(\"protocols\" \"wlr-virtual-pointer-unstable-v1\" true)\nprotocolnew(\"protocols\" \"input-method-unstable-v2\" true)\nprotocolnew(\"protocols\" \"wlr-output-management-unstable-v1\" true)\nprotocolnew(\"protocols\" \"kde-server-decoration\" true)\nprotocolnew(\"protocols\" \"wlr-data-control-unstable-v1\" true)\nprotocolnew(\"${HYPRLAND_PROTOCOLS}/protocols\" \"hyprland-focus-grab-v1\" true)\nprotocolnew(\"protocols\" \"wlr-layer-shell-unstable-v1\" true)\nprotocolnew(\"protocols\" \"xx-color-management-v4\" true)\nprotocolnew(\"protocols\" \"frog-color-management-v1\" true)\nprotocolnew(\"protocols\" \"wayland-drm\" true)\nprotocolnew(\"${HYPRLAND_PROTOCOLS}/protocols\" \"hyprland-ctm-control-v1\" true)\nprotocolnew(\"${HYPRLAND_PROTOCOLS}/protocols\" \"hyprland-surface-v1\" true)\n\nprotocolnew(\"staging/tearing-control\" \"tearing-control-v1\" false)\nprotocolnew(\"staging/fractional-scale\" \"fractional-scale-v1\" false)\nprotocolnew(\"unstable/xdg-output\" \"xdg-output-unstable-v1\" false)\nprotocolnew(\"staging/cursor-shape\" \"cursor-shape-v1\" false)\nprotocolnew(\"unstable/idle-inhibit\" \"idle-inhibit-unstable-v1\" false)\nprotocolnew(\"unstable/relative-pointer\" \"relative-pointer-unstable-v1\" false)\nprotocolnew(\"unstable/xdg-decoration\" \"xdg-decoration-unstable-v1\" false)\nprotocolnew(\"staging/alpha-modifier\" \"alpha-modifier-v1\" false)\nprotocolnew(\"staging/ext-foreign-toplevel-list\" \"ext-foreign-toplevel-list-v1\"\n            false)\nprotocolnew(\"unstable/pointer-gestures\" \"pointer-gestures-unstable-v1\" false)\nprotocolnew(\"unstable/keyboard-shortcuts-inhibit\"\n            \"keyboard-shortcuts-inhibit-unstable-v1\" false)\nprotocolnew(\"unstable/text-input\" \"text-input-unstable-v3\" false)\nprotocolnew(\"unstable/pointer-constraints\" \"pointer-constraints-unstable-v1\"\n            false)\nprotocolnew(\"staging/xdg-activation\" \"xdg-activation-v1\" false)\nprotocolnew(\"staging/ext-idle-notify\" \"ext-idle-notify-v1\" false)\nprotocolnew(\"staging/ext-session-lock\" \"ext-session-lock-v1\" false)\nprotocolnew(\"stable/tablet\" \"tablet-v2\" false)\nprotocolnew(\"stable/presentation-time\" \"presentation-time\" false)\nprotocolnew(\"stable/xdg-shell\" \"xdg-shell\" false)\nprotocolnew(\"unstable/primary-selection\" \"primary-selection-unstable-v1\" false)\nprotocolnew(\"staging/xwayland-shell\" \"xwayland-shell-v1\" false)\nprotocolnew(\"stable/viewporter\" \"viewporter\" false)\nprotocolnew(\"stable/linux-dmabuf\" \"linux-dmabuf-v1\" false)\nprotocolnew(\"staging/drm-lease\" \"drm-lease-v1\" false)\nprotocolnew(\"staging/linux-drm-syncobj\" \"linux-drm-syncobj-v1\" false)\nprotocolnew(\"staging/xdg-dialog\" \"xdg-dialog-v1\" false)\nprotocolnew(\"staging/single-pixel-buffer\" \"single-pixel-buffer-v1\" false)\nprotocolnew(\"staging/security-context\" \"security-context-v1\" false)\n\nprotocolwayland()\n\n# tools\nadd_subdirectory(hyprctl)\nadd_subdirectory(hyprpm)\n\n# binary and symlink\ninstall(TARGETS Hyprland)\n\ninstall(\n  CODE \"execute_process( \\\n        COMMAND ${CMAKE_COMMAND} -E create_symlink \\\n        ${CMAKE_INSTALL_FULL_BINDIR}/Hyprland \\\n        \\\"\\$ENV{DESTDIR}${CMAKE_INSTALL_FULL_BINDIR}/hyprland\\\" \\\n        )\")\n\n# session file\ninstall(FILES ${CMAKE_SOURCE_DIR}/example/hyprland.desktop\n        DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/wayland-sessions)\n\n# allow Hyprland to find assets\nadd_compile_definitions(DATAROOTDIR=\"${CMAKE_INSTALL_FULL_DATAROOTDIR}\")\n\n# installable assets\nfile(GLOB_RECURSE INSTALLABLE_ASSETS \"assets/install/*\")\nlist(FILTER INSTALLABLE_ASSETS EXCLUDE REGEX \"meson.build\")\ninstall(FILES ${INSTALLABLE_ASSETS}\n        DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/hypr)\n\n# default config\ninstall(FILES ${CMAKE_SOURCE_DIR}/example/hyprland.conf\n        DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/hypr)\n\n# portal config\ninstall(FILES ${CMAKE_SOURCE_DIR}/assets/hyprland-portals.conf\n        DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/xdg-desktop-portal)\n\n# man pages\nfile(GLOB_RECURSE MANPAGES \"docs/*.1\")\ninstall(FILES ${MANPAGES} DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)\n\n# pkgconfig entry\ninstall(FILES ${CMAKE_BINARY_DIR}/hyprland.pc\n        DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/pkgconfig)\n\n# protocol headers\nset(HEADERS_PROTO \"${CMAKE_CURRENT_SOURCE_DIR}/protocols\")\ninstall(\n  DIRECTORY ${HEADERS_PROTO}\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/hyprland\n  FILES_MATCHING\n  PATTERN \"*.h*\")\n\n# hyprland headers\nset(HEADERS_SRC \"${CMAKE_CURRENT_SOURCE_DIR}/src\")\ninstall(\n  DIRECTORY ${HEADERS_SRC}\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/hyprland\n  FILES_MATCHING\n  PATTERN \"*.h*\")\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2783203125,
          "content": "## Goal\n\nOur goal is to provide a space where it is safe for everyone to contribute to,\nand get support for, open-source software in a respectful and cooperative\nmanner.\n\nWe value all contributions and want to make this organization and its\nsurrounding community a place for everyone.\n\nAs members, contributors, and everyone else who may participate in the\ndevelopment, we strive to keep the entire experience civil.\n\n## Standards\n\nOur community standards exist in order to make sure everyone feels comfortable\ncontributing to the project(s) together.\n\nOur standards are:\n - Do not harass, attack, or in any other way discriminate against anyone, including\nfor their protected traits, including, but not limited to, sex, religion, race,\nappearance, gender, identity, nationality, sexuality, etc.\n - Do not go off-topic, do not post spam.\n - Treat everyone with respect.\n\nExamples of breaking each rule respectively include:\n - Harassment, bullying or inappropriate jokes about another person.\n - Posting distasteful imagery, trolling, or posting things unrelated to the topic at hand.\n - Treating someone as worse because of their lack of understanding of an issue.\n\n## Enforcement\n\nEnforcement of this CoC is done by the members of the hyprwm organization.\n\nWe, as the organization, will strive our best to keep this community civil and\nfollowing the standards outlined above.\n\n### Reporting incidents\n\nIf you believe an incident of breaking our standards has occurred, but nobody has\ntaken appropriate action, you can privately contact the people responsible for dealing\nwith such incidents in multiple ways:\n\n***E-Mail***\n - `vaxry[at]vaxry.net`\n - `mihai[at]fufexan.net`\n\n***Discord***\n - `@vaxry`\n - `@fufexan`\n\n***Matrix***\n - `@vaxry:matrix.vaxry.net`\n - `@fufexan:matrix.org`\n \nWe, as members, guarantee your privacy and will not share those reports with anyone.\n\n## Enforcement Strategy\n\nDepending on the severity of the infraction, any action from the list below may be applied.\nPlease keep in mind cases are reviewed on a per-case basis and members are the ultimate\ndeciding factor in the type of punishment.\n\nIf the matter would benefit from an outside opinion, a member might reach for more opinions\nfrom people unrelated to the organization, however, the final decision regarding the action\nto be taken is still up to the member.\n\nFor example, if the matter at hand regards a representative of a marginalized group or minority,\nthe member might ask for a first-hand opinion from another representative of such group.\n\n### Correction/Edit\n\nIf your message is found to be misleading or poorly worded, a member might\nedit your message.\n\n### Warning/Deletion\n\nIf your message is found inappropriate, a member might give you a public or private warning,\nand/or delete your message.\n\n### Mute\n\nIf your message is disruptive, or you have been repeatedly violating the standards,\na member might mute (or temporarily ban) you.\n\n### Ban\n\nIf your message is hateful, very disruptive, or other, less serious infractions are repeated\nignoring previous punishments, a member might ban you permanently.\n\n## Scope\n\nThis CoC shall apply to all projects ran under the `hyprwm` organization and all _official_ communities\noutside of GitHub.\n\nHowever, it is worth noting that official communities outside of GitHub might have their own,\nadditional sets of rules.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4853515625,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2022-2024, vaxerski\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.9892578125,
          "content": "PREFIX = /usr/local\n\nstub:\n\t@echo \"Do not run $(MAKE) directly without any arguments. Please refer to the wiki on how to compile Hyprland.\"\n\nlegacyrenderer:\n\tcmake --no-warn-unused-cli -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_INSTALL_PREFIX:STRING=${PREFIX} -DLEGACY_RENDERER:BOOL=true -S . -B ./build\n\tcmake --build ./build --config Release --target all -j`nproc 2>/dev/null || getconf NPROCESSORS_CONF`\n\nlegacyrendererdebug:\n\tcmake --no-warn-unused-cli -DCMAKE_BUILD_TYPE:STRING=Debug -DCMAKE_INSTALL_PREFIX:STRING=${PREFIX} -DLEGACY_RENDERER:BOOL=true -S . -B ./build\n\tcmake --build ./build --config Debug --target all -j`nproc 2>/dev/null || getconf NPROCESSORS_CONF`\n\nrelease:\n\tcmake --no-warn-unused-cli -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_INSTALL_PREFIX:STRING=${PREFIX} -S . -B ./build\n\tcmake --build ./build --config Release --target all -j`nproc 2>/dev/null || getconf NPROCESSORS_CONF`\n\ndebug:\n\tcmake --no-warn-unused-cli -DCMAKE_BUILD_TYPE:STRING=Debug -DCMAKE_INSTALL_PREFIX:STRING=${PREFIX} -S . -B ./build\n\tcmake --build ./build --config Debug --target all -j`nproc 2>/dev/null || getconf NPROCESSORS_CONF`\n\nnopch:\n\tcmake --no-warn-unused-cli -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_INSTALL_PREFIX:STRING=${PREFIX} -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON -S . -B ./build\n\tcmake --build ./build --config Release --target all -j`nproc 2>/dev/null || getconf NPROCESSORS_CONF`\n\nclear:\n\trm -rf build\n\trm -f ./protocols/*.h ./protocols/*.c ./protocols/*.cpp ./protocols/*.hpp\n\nall:\n\t$(MAKE) clear\n\t$(MAKE) release\n\ninstall:\n\tcmake --install ./build\n\nuninstall:\n\txargs rm < ./build/install_manifest.txt\n\npluginenv:\n\t@echo -en \"$(MAKE) pluginenv has been deprecated.\\nPlease run $(MAKE) all && sudo $(MAKE) installheaders\\n\"\n\t@exit 1\n\ninstallheaders:\n\t@if [ ! -f ./src/version.h ]; then echo -en \"You need to run $(MAKE) all first.\\n\" && exit 1; fi\n\n\t# remove previous headers from hyprpm's dir\n\trm -fr ${PREFIX}/include/hyprland\n\tmkdir -p ${PREFIX}/include/hyprland\n\tmkdir -p ${PREFIX}/include/hyprland/protocols\n\tmkdir -p ${PREFIX}/share/pkgconfig\n\n\tcmake --build ./build --config Release --target generate-protocol-headers\n\n\tfind src -name '*.h*' -print0 | cpio --quiet -0dump ${PREFIX}/include/hyprland\n\tcp ./protocols/*.h* ${PREFIX}/include/hyprland/protocols\n\tcp ./build/hyprland.pc ${PREFIX}/share/pkgconfig\n\tif [ -d /usr/share/pkgconfig ]; then cp ./build/hyprland.pc /usr/share/pkgconfig 2>/dev/null || true; fi\n\n\tchmod -R 755 ${PREFIX}/include/hyprland\n\tchmod 755 ${PREFIX}/share/pkgconfig\n\nman:\n\tpandoc ./docs/Hyprland.1.rst \\\n\t\t--standalone \\\n\t\t--variable=header:\"Hyprland User Manual\" \\\n\t\t--variable=date:\"${DATE}\" \\\n\t\t--variable=section:1 \\\n\t\t--from rst \\\n\t\t--to man > ./docs/Hyprland.1\n\n\tpandoc ./docs/hyprctl.1.rst \\\n\t\t--standalone \\\n\t\t--variable=header:\"hyprctl User Manual\" \\\n\t\t--variable=date:\"${DATE}\" \\\n\t\t--variable=section:1 \\\n\t\t--from rst \\\n\t\t--to man > ./docs/hyprctl.1\n\nasan:\n\t@echo -en \"!!WARNING!!\\nOnly run this in the TTY.\\n\"\n\t@pidof Hyprland > /dev/null && echo -ne \"Refusing to run with Hyprland running.\\n\" || echo \"\"\n\t@pidof Hyprland > /dev/null && exit 1 || echo \"\"\n\n\trm -rf ./wayland\n\t#git reset --hard\n\n\t@echo -en \"If you want to apply a patch, input its path (leave empty for none):\\n\"\n\t@read patchvar; \\\n\t if [ -n \"$$patchvar\" ]; then patch -p1 < \"$$patchvar\" || echo \"\"; else echo \"No patch specified\"; fi\n\n\tgit clone --recursive https://gitlab.freedesktop.org/wayland/wayland\n\tcd wayland && patch -p1 < ../scripts/waylandStatic.diff && meson setup build --buildtype=debug -Db_sanitize=address -Ddocumentation=false && ninja -C build && cd ..\n\tcp ./wayland/build/src/libwayland-server.a .\n\t@echo \"Wayland done\"\n\n\tpatch -p1 < ./scripts/hyprlandStaticAsan.diff\n\tcmake --no-warn-unused-cli -DCMAKE_BUILD_TYPE:STRING=Debug -DWITH_ASAN:STRING=True -DUSE_TRACY:STRING=False -DUSE_TRACY_GPU:STRING=False -S . -B ./build -G Ninja\n\tcmake --build ./build --config Debug --target all\n\t@echo \"Hyprland done\"\n\n\tASAN_OPTIONS=\"detect_odr_violation=0,log_path=asan.log\" HYPRLAND_NO_CRASHREPORTER=1 ./build/Hyprland -c ~/.config/hypr/hyprland.conf\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.0029296875,
          "content": "<div align = center>\n\n<img src=\"https://raw.githubusercontent.com/hyprwm/Hyprland/main/assets/header.svg\" width=\"750\" height=\"300\" alt=\"banner\">\n\n<br>\n\n![Badge Workflow] \n[![Badge License]][License] \n![Badge Language] \n[![Badge Pull Requests]][Pull Requests] \n[![Badge Issues]][Issues] \n![Badge Hi Mom]<br>\n\n<br>\n\nHyprland is a 100% independent, dynamic tiling Wayland compositor that doesn't sacrifice on its looks.\n\nIt provides the latest Wayland features, is highly customizable, has all the eyecandy, the most powerful plugins,\neasy IPC, much more QoL stuff than other compositors and more...\n<br>\n<br>\n\n---\n\n**[<kbd> <br> Install <br> </kbd>][Install]** \n**[<kbd> <br> Quick Start <br> </kbd>][Quick Start]** \n**[<kbd> <br> Configure <br> </kbd>][Configure]** \n**[<kbd> <br> Contribute <br> </kbd>][Contribute]**\n\n---\n\n<br>\n\n</div>\n\n# Features\n\n- All of the eyecandy: gradient borders, blur, animations, shadows and much more\n- A lot of customization\n- 100% independent, no wlroots, no libweston, no kwin, no mutter.\n- Custom bezier curves for the best animations\n- Powerful plugin support\n- Built-in plugin manager\n- Tearing support for better gaming performance\n- Easily expandable and readable codebase\n- Fast and active development\n- Not afraid to provide bleeding-edge features\n- Config reloaded instantly upon saving\n- Fully dynamic workspaces\n- Two built-in layouts and more available as plugins\n- Global keybinds passed to your apps of choice\n- Tiling/pseudotiling/floating/fullscreen windows\n- Special workspaces (scratchpads)\n- Window groups (tabbed mode)\n- Powerful window/monitor/layer rules\n- Socket-based IPC\n- Native IME and Input Panels Support\n- and much more...\n\n<br>\n<br>\n\n<div align = center>\n\n# Gallery\n\n<br>\n\n![Preview A]\n\n<br>\n\n![Preview B]\n\n<br>\n\n![Preview C]\n\n<br>\n<br>\n\n</div>\n\n# Special Thanks\n\n<br>\n\n**[wlroots]** - *For powering Hyprland in the past*\n\n**[tinywl]** - *For showing how 2 do stuff*\n\n**[Sway]** - *For showing how 2 do stuff the overkill way*\n\n**[Vivarium]** - *For showing how 2 do stuff the simple way*\n\n**[dwl]** - *For showing how 2 do stuff the hacky way*\n\n**[Wayfire]** - *For showing how 2 do some graphics stuff*\n\n\n<!----------------------------------------------------------------------------->\n\n[Configure]: https://wiki.hyprland.org/Configuring/\n[Stars]: https://starchart.cc/hyprwm/Hyprland\n[Hypr]: https://github.com/hyprwm/Hypr\n\n[Pull Requests]: https://github.com/hyprwm/Hyprland/pulls\n[Issues]: https://github.com/hyprwm/Hyprland/issues\n[Todo]: https://github.com/hyprwm/Hyprland/projects?type=beta\n\n[Contribute]: https://wiki.hyprland.org/Contributing-and-Debugging/\n[Install]: https://wiki.hyprland.org/Getting-Started/Installation/\n[Quick Start]: https://wiki.hyprland.org/Getting-Started/Master-Tutorial/\n[License]: LICENSE\n\n\n<!----------------------------------{ Thanks }--------------------------------->\n\n[Vivarium]: https://github.com/inclement/vivarium\n[WlRoots]: https://gitlab.freedesktop.org/wlroots/wlroots\n[Wayfire]: https://github.com/WayfireWM/wayfire\n[TinyWl]: https://gitlab.freedesktop.org/wlroots/wlroots/-/blob/master/tinywl/tinywl.c\n[Sway]: https://github.com/swaywm/sway\n[DWL]: https://codeberg.org/dwl/dwl\n\n<!----------------------------------{ Images }--------------------------------->\n\n[Preview A]: https://i.ibb.co/C1yTb0r/falf.png\n[Preview B]: https://linfindel.github.io/cdn/hyprland-preview-b.png\n[Preview C]: https://i.ibb.co/B3GJg28/20221126-20h53m26s-grim.png\n\n\n<!----------------------------------{ Badges }--------------------------------->\n\n[Badge Workflow]: https://github.com/hyprwm/Hyprland/actions/workflows/ci.yaml/badge.svg\n\n[Badge Issues]: https://img.shields.io/github/issues/hyprwm/Hyprland\n[Badge Pull Requests]: https://img.shields.io/github/issues-pr/hyprwm/Hyprland\n[Badge Language]: https://img.shields.io/github/languages/top/hyprwm/Hyprland\n[Badge License]: https://img.shields.io/github/license/hyprwm/Hyprland\n[Badge Lines]: https://img.shields.io/tokei/lines/github/hyprwm/Hyprland\n[Badge Hi Mom]: https://img.shields.io/badge/Hi-mom!-ff69b4\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0068359375,
          "content": "0.46.0\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 8.404296875,
          "content": "{\n  \"nodes\": {\n    \"aquamarine\": {\n      \"inputs\": {\n        \"hyprutils\": [\n          \"hyprutils\"\n        ],\n        \"hyprwayland-scanner\": [\n          \"hyprwayland-scanner\"\n        ],\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ],\n        \"systems\": [\n          \"systems\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1736102453,\n        \"narHash\": \"sha256-5qb4kb7Xbt8jJFL/oDqOor9Z2+E+A+ql3PiyDvsfWZ0=\",\n        \"owner\": \"hyprwm\",\n        \"repo\": \"aquamarine\",\n        \"rev\": \"4846091641f3be0ad7542086d52769bb7932bde6\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"hyprwm\",\n        \"repo\": \"aquamarine\",\n        \"type\": \"github\"\n      }\n    },\n    \"flake-compat\": {\n      \"flake\": false,\n      \"locked\": {\n        \"lastModified\": 1696426674,\n        \"narHash\": \"sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=\",\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"rev\": \"0f9255e01c2351cc7d116c072cb317785dd33b33\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"edolstra\",\n        \"repo\": \"flake-compat\",\n        \"type\": \"github\"\n      }\n    },\n    \"gitignore\": {\n      \"inputs\": {\n        \"nixpkgs\": [\n          \"pre-commit-hooks\",\n          \"nixpkgs\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1709087332,\n        \"narHash\": \"sha256-HG2cCnktfHsKV0s4XW83gU3F57gaTljL9KNSuG6bnQs=\",\n        \"owner\": \"hercules-ci\",\n        \"repo\": \"gitignore.nix\",\n        \"rev\": \"637db329424fd7e46cf4185293b9cc8c88c95394\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"hercules-ci\",\n        \"repo\": \"gitignore.nix\",\n        \"type\": \"github\"\n      }\n    },\n    \"hyprcursor\": {\n      \"inputs\": {\n        \"hyprlang\": [\n          \"hyprlang\"\n        ],\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ],\n        \"systems\": [\n          \"systems\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1734906540,\n        \"narHash\": \"sha256-vQ/L9hZFezC0LquLo4TWXkyniWtYBlFHAKIsDc7PYJE=\",\n        \"owner\": \"hyprwm\",\n        \"repo\": \"hyprcursor\",\n        \"rev\": \"69270ba8f057d55b0e6c2dca0e165d652856e613\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"hyprwm\",\n        \"repo\": \"hyprcursor\",\n        \"type\": \"github\"\n      }\n    },\n    \"hyprgraphics\": {\n      \"inputs\": {\n        \"hyprutils\": [\n          \"hyprutils\"\n        ],\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ],\n        \"systems\": [\n          \"systems\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1736115290,\n        \"narHash\": \"sha256-Jcn6yAzfUMcxy3tN/iZRbi/QgrYm7XLyVRl9g/nbUl4=\",\n        \"owner\": \"hyprwm\",\n        \"repo\": \"hyprgraphics\",\n        \"rev\": \"52202272d89da32a9f866c0d10305a5e3d954c50\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"hyprwm\",\n        \"repo\": \"hyprgraphics\",\n        \"type\": \"github\"\n      }\n    },\n    \"hyprland-protocols\": {\n      \"inputs\": {\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ],\n        \"systems\": [\n          \"systems\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1735774328,\n        \"narHash\": \"sha256-vIRwLS9w+N99EU1aJ+XNOU6mJTxrUBa31i1r82l0V7s=\",\n        \"owner\": \"hyprwm\",\n        \"repo\": \"hyprland-protocols\",\n        \"rev\": \"e3b6af97ddcfaafbda8e2828c719a5af84f662cb\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"hyprwm\",\n        \"repo\": \"hyprland-protocols\",\n        \"type\": \"github\"\n      }\n    },\n    \"hyprland-qtutils\": {\n      \"inputs\": {\n        \"hyprutils\": [\n          \"hyprutils\"\n        ],\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ],\n        \"systems\": [\n          \"systems\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1736114838,\n        \"narHash\": \"sha256-FxbuGQExtN37ToWYnGmO6weOYN6WPHN/RAqbr7gNPek=\",\n        \"owner\": \"hyprwm\",\n        \"repo\": \"hyprland-qtutils\",\n        \"rev\": \"6997fe382dcf396704227d2b98ffdd5066da6959\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"hyprwm\",\n        \"repo\": \"hyprland-qtutils\",\n        \"type\": \"github\"\n      }\n    },\n    \"hyprlang\": {\n      \"inputs\": {\n        \"hyprutils\": [\n          \"hyprutils\"\n        ],\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ],\n        \"systems\": [\n          \"systems\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1735393019,\n        \"narHash\": \"sha256-NPpqA8rtmDLsEmZOmz+qR67zsB6Y503Jnv+nSFLKJZ8=\",\n        \"owner\": \"hyprwm\",\n        \"repo\": \"hyprlang\",\n        \"rev\": \"55608efdaa387af7bfdc0eddb404c409958efa43\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"hyprwm\",\n        \"repo\": \"hyprlang\",\n        \"type\": \"github\"\n      }\n    },\n    \"hyprutils\": {\n      \"inputs\": {\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ],\n        \"systems\": [\n          \"systems\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1736164519,\n        \"narHash\": \"sha256-1LimBKvDpBbeX+qW7T240WEyw+DBVpDotZB4JYm8Aps=\",\n        \"owner\": \"hyprwm\",\n        \"repo\": \"hyprutils\",\n        \"rev\": \"3c895da64b0eb19870142196fa48c07090b441c4\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"hyprwm\",\n        \"repo\": \"hyprutils\",\n        \"type\": \"github\"\n      }\n    },\n    \"hyprwayland-scanner\": {\n      \"inputs\": {\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ],\n        \"systems\": [\n          \"systems\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1735493474,\n        \"narHash\": \"sha256-fktzv4NaqKm94VAkAoVqO/nqQlw+X0/tJJNAeCSfzK4=\",\n        \"owner\": \"hyprwm\",\n        \"repo\": \"hyprwayland-scanner\",\n        \"rev\": \"de913476b59ee88685fdc018e77b8f6637a2ae0b\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"hyprwm\",\n        \"repo\": \"hyprwayland-scanner\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1736012469,\n        \"narHash\": \"sha256-/qlNWm/IEVVH7GfgAIyP6EsVZI6zjAx1cV5zNyrs+rI=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"8f3e1f807051e32d8c95cd12b9b421623850a34d\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"pre-commit-hooks\": {\n      \"inputs\": {\n        \"flake-compat\": \"flake-compat\",\n        \"gitignore\": \"gitignore\",\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1735882644,\n        \"narHash\": \"sha256-3FZAG+pGt3OElQjesCAWeMkQ7C/nB1oTHLRQ8ceP110=\",\n        \"owner\": \"cachix\",\n        \"repo\": \"git-hooks.nix\",\n        \"rev\": \"a5a961387e75ae44cc20f0a57ae463da5e959656\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"cachix\",\n        \"repo\": \"git-hooks.nix\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"aquamarine\": \"aquamarine\",\n        \"hyprcursor\": \"hyprcursor\",\n        \"hyprgraphics\": \"hyprgraphics\",\n        \"hyprland-protocols\": \"hyprland-protocols\",\n        \"hyprland-qtutils\": \"hyprland-qtutils\",\n        \"hyprlang\": \"hyprlang\",\n        \"hyprutils\": \"hyprutils\",\n        \"hyprwayland-scanner\": \"hyprwayland-scanner\",\n        \"nixpkgs\": \"nixpkgs\",\n        \"pre-commit-hooks\": \"pre-commit-hooks\",\n        \"systems\": \"systems\",\n        \"xdph\": \"xdph\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1689347949,\n        \"narHash\": \"sha256-12tWmuL2zgBgZkdoB6qXZsgJEH9LR3oUgpaQq2RbI80=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default-linux\",\n        \"rev\": \"31732fcf5e8fea42e59c2488ad31a0e651500f68\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default-linux\",\n        \"type\": \"github\"\n      }\n    },\n    \"xdph\": {\n      \"inputs\": {\n        \"hyprland-protocols\": [\n          \"hyprland-protocols\"\n        ],\n        \"hyprlang\": [\n          \"hyprlang\"\n        ],\n        \"hyprutils\": [\n          \"hyprutils\"\n        ],\n        \"hyprwayland-scanner\": [\n          \"hyprwayland-scanner\"\n        ],\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ],\n        \"systems\": [\n          \"systems\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1734907020,\n        \"narHash\": \"sha256-p6HxwpRKVl1KIiY5xrJdjcEeK3pbmc///UOyV6QER+w=\",\n        \"owner\": \"hyprwm\",\n        \"repo\": \"xdg-desktop-portal-hyprland\",\n        \"rev\": \"d7f18dda5e511749fa1511185db3536208fb1a63\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"hyprwm\",\n        \"repo\": \"xdg-desktop-portal-hyprland\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 4.6630859375,
          "content": "{\n  description = \"Hyprland is a dynamic tiling Wayland compositor that doesn't sacrifice on its looks\";\n\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n\n    # <https://github.com/nix-systems/nix-systems>\n    systems.url = \"github:nix-systems/default-linux\";\n\n    aquamarine = {\n      url = \"github:hyprwm/aquamarine\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n      inputs.systems.follows = \"systems\";\n      inputs.hyprutils.follows = \"hyprutils\";\n      inputs.hyprwayland-scanner.follows = \"hyprwayland-scanner\";\n    };\n\n    hyprcursor = {\n      url = \"github:hyprwm/hyprcursor\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n      inputs.systems.follows = \"systems\";\n      inputs.hyprlang.follows = \"hyprlang\";\n    };\n\n    hyprgraphics = {\n      url = \"github:hyprwm/hyprgraphics\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n      inputs.systems.follows = \"systems\";\n      inputs.hyprutils.follows = \"hyprutils\";\n    };\n\n    hyprland-protocols = {\n      url = \"github:hyprwm/hyprland-protocols\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n      inputs.systems.follows = \"systems\";\n    };\n\n    hyprland-qtutils = {\n      url = \"github:hyprwm/hyprland-qtutils\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n      inputs.systems.follows = \"systems\";\n      inputs.hyprutils.follows = \"hyprutils\";\n    };\n\n    hyprlang = {\n      url = \"github:hyprwm/hyprlang\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n      inputs.systems.follows = \"systems\";\n      inputs.hyprutils.follows = \"hyprutils\";\n    };\n\n    hyprutils = {\n      url = \"github:hyprwm/hyprutils\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n      inputs.systems.follows = \"systems\";\n    };\n\n    hyprwayland-scanner = {\n      url = \"github:hyprwm/hyprwayland-scanner\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n      inputs.systems.follows = \"systems\";\n    };\n\n    xdph = {\n      url = \"github:hyprwm/xdg-desktop-portal-hyprland\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n      inputs.systems.follows = \"systems\";\n      inputs.hyprland-protocols.follows = \"hyprland-protocols\";\n      inputs.hyprlang.follows = \"hyprlang\";\n      inputs.hyprutils.follows = \"hyprutils\";\n      inputs.hyprwayland-scanner.follows = \"hyprwayland-scanner\";\n    };\n\n    pre-commit-hooks = {\n      url = \"github:cachix/git-hooks.nix\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n    };\n  };\n\n  outputs = inputs @ {\n    self,\n    nixpkgs,\n    systems,\n    ...\n  }: let\n    inherit (nixpkgs) lib;\n    eachSystem = lib.genAttrs (import systems);\n    pkgsFor = eachSystem (system:\n      import nixpkgs {\n        localSystem = system;\n        overlays = with self.overlays; [\n          hyprland-packages\n          hyprland-extras\n        ];\n      });\n    pkgsCrossFor = eachSystem (system: crossSystem:\n      import nixpkgs {\n        localSystem = system;\n        inherit crossSystem;\n        overlays = with self.overlays; [\n          hyprland-packages\n          hyprland-extras\n        ];\n      });\n  in {\n    overlays = import ./nix/overlays.nix {inherit self lib inputs;};\n\n    checks = eachSystem (system:\n      (lib.filterAttrs\n        (n: _: (lib.hasPrefix \"hyprland\" n) && !(lib.hasSuffix \"debug\" n))\n        self.packages.${system})\n      // {\n        inherit (self.packages.${system}) xdg-desktop-portal-hyprland;\n        pre-commit-check = inputs.pre-commit-hooks.lib.${system}.run {\n          src = ./.;\n          hooks = {\n            hyprland-treewide-formatter = {\n              enable = true;\n              entry = \"${self.formatter.${system}}/bin/hyprland-treewide-formatter\";\n              pass_filenames = false;\n              excludes = [\"subprojects\"];\n              always_run = true;\n            };\n          };\n        };\n      });\n\n    packages = eachSystem (system: {\n      default = self.packages.${system}.hyprland;\n      inherit\n        (pkgsFor.${system})\n        # hyprland-packages\n        hyprland\n        hyprland-debug\n        hyprland-legacy-renderer\n        hyprland-unwrapped\n        # hyprland-extras\n        xdg-desktop-portal-hyprland\n        ;\n      hyprland-cross = (pkgsCrossFor.${system} \"aarch64-linux\").hyprland;\n    });\n\n    devShells = eachSystem (system: {\n      default =\n        pkgsFor.${system}.mkShell.override {\n          inherit (self.packages.${system}.default) stdenv;\n        } {\n          name = \"hyprland-shell\";\n          hardeningDisable = [\"fortify\"];\n          inputsFrom = [pkgsFor.${system}.hyprland];\n          packages = [pkgsFor.${system}.clang-tools];\n          inherit (self.checks.${system}.pre-commit-check) shellHook;\n        };\n    });\n\n    formatter = eachSystem (system: pkgsFor.${system}.callPackage ./nix/formatter.nix {});\n\n    nixosModules.default = import ./nix/module.nix inputs;\n    homeManagerModules.default = import ./nix/hm-module.nix self;\n  };\n}\n"
        },
        {
          "name": "hyprctl",
          "type": "tree",
          "content": null
        },
        {
          "name": "hyprland.pc.in",
          "type": "blob",
          "size": 0.21484375,
          "content": "prefix=@PREFIX@/@INCLUDEDIR@\n\nName: Hyprland\nURL: https://github.com/hyprwm/Hyprland\nDescription: Hyprland header files\nVersion: @HYPRLAND_VERSION@\nCflags: -I${prefix} -I${prefix}/hyprland/protocols -I${prefix}/hyprland\n"
        },
        {
          "name": "hyprpm",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 3.943359375,
          "content": "project(\n  'Hyprland',\n  'cpp',\n  'c',\n  version: run_command('cat', join_paths(meson.project_source_root(), 'VERSION'), check: true).stdout().strip(),\n  default_options: [\n    'warning_level=2',\n    'default_library=static',\n    'optimization=3',\n    'buildtype=release',\n    'debug=false',\n    'cpp_std=c++26',\n  ],\n)\n\ndatarootdir = '-DDATAROOTDIR=\"' + get_option('prefix') / get_option('datadir') + '\"'\nadd_project_arguments(\n  [\n    '-Wno-unused-parameter',\n    '-Wno-unused-value',\n    '-Wno-missing-field-initializers',\n    '-Wno-narrowing',\n    '-Wno-pointer-arith', datarootdir,\n    '-DHYPRLAND_VERSION=\"' + meson.project_version() + '\"',\n  ],\n  language: 'cpp',\n)\n\ncpp_compiler = meson.get_compiler('cpp')\nif cpp_compiler.check_header('execinfo.h')\n  add_project_arguments('-DHAS_EXECINFO', language: 'cpp')\nendif\n\naquamarine = dependency('aquamarine', version: '>=0.4.5')\nhyprcursor = dependency('hyprcursor', version: '>=0.1.7')\nhyprgraphics = dependency('hyprgraphics', version: '>= 0.1.1')\nhyprlang = dependency('hyprlang', version: '>= 0.3.2')\nhyprutils = dependency('hyprutils', version: '>= 0.2.3')\nadd_project_arguments(['-DAQUAMARINE_VERSION=\"@0@\"'.format(aquamarine.version())], language: 'cpp')\nadd_project_arguments(['-DHYPRCURSOR_VERSION=\"@0@\"'.format(hyprcursor.version())], language: 'cpp')\nadd_project_arguments(['-DHYPRGRAPHICS_VERSION=\"@0@\"'.format(hyprgraphics.version())], language: 'cpp')\nadd_project_arguments(['-DHYPRLANG_VERSION=\"@0@\"'.format(hyprlang.version())], language: 'cpp')\nadd_project_arguments(['-DHYPRUTILS_VERSION=\"@0@\"'.format(hyprutils.version())], language: 'cpp')\n\nxcb_dep = dependency('xcb', required: get_option('xwayland'))\nxcb_composite_dep = dependency('xcb-composite', required: get_option('xwayland'))\nxcb_errors_dep = dependency('xcb-errors', required: get_option('xwayland'))\nxcb_icccm_dep = dependency('xcb-icccm', required: get_option('xwayland'))\nxcb_render_dep = dependency('xcb-render', required: get_option('xwayland'))\nxcb_res_dep = dependency('xcb-res', required: get_option('xwayland'))\nxcb_xfixes_dep = dependency('xcb-xfixes', required: get_option('xwayland'))\n\ngio_dep = dependency('gio-2.0', required: true)\n\nif not xcb_dep.found()\n  add_project_arguments('-DNO_XWAYLAND', language: 'cpp')\nendif\n\nbacktrace_dep = cpp_compiler.find_library('execinfo', required: false)\nepoll_dep = dependency('epoll-shim', required: false) # timerfd on BSDs\n\nre2 = dependency('re2', required: true)\n\n# Handle options\nsystemd_option = get_option('systemd')\nsystemd = dependency('systemd', required: systemd_option)\nsystemd_option.enable_auto_if(systemd.found())\n\nif (systemd_option.enabled())\n  message('Enabling systemd integration')\n  add_project_arguments('-DUSES_SYSTEMD', language: 'cpp')\n  subdir('systemd')\nendif\n\nif get_option('legacy_renderer').enabled()\n  add_project_arguments('-DLEGACY_RENDERER', language: 'cpp')\nendif\n\nif get_option('buildtype') == 'debug'\n  add_project_arguments('-DHYPRLAND_DEBUG', language: 'cpp')\nendif\n\n# Generate hyprland version and populate version.h\nrun_command('sh', '-c', 'scripts/generateVersion.sh', check: true)\n\n# Install headers\nglobber = run_command('find', 'src', '-name', '*.h*', check: true)\nheaders = globber.stdout().strip().split('\\n')\nforeach file : headers\n  install_headers(file, subdir: 'hyprland', preserve_path: true)\nendforeach\n\ntracy = dependency('tracy', static: true, required: get_option('tracy_enable'))\n\nif get_option('tracy_enable') and get_option('buildtype') != 'debugoptimized'\n  warning('Profiling builds should set -- buildtype = debugoptimized')\nendif\n\n\n\nsubdir('protocols')\nsubdir('src')\nsubdir('hyprctl')\nsubdir('hyprpm/src')\nsubdir('assets')\nsubdir('example')\nsubdir('docs')\n\n# Generate hyprland.pc\npkg_install_dir = join_paths(get_option('datadir'), 'pkgconfig')\n\nimport('pkgconfig').generate(\n  name: 'Hyprland',\n  filebase: 'hyprland',\n  url: 'https://github.com/hyprwm/Hyprland',\n  description: 'Hyprland header files',\n  install_dir: pkg_install_dir,\n  subdirs: ['', 'hyprland/protocols', 'hyprland'],\n)\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.4921875,
          "content": "option('xwayland', type: 'feature', value: 'auto', description: 'Enable support for X11 applications')\noption('systemd', type: 'feature', value: 'auto', description: 'Enable systemd integration')\noption('uwsm', type: 'feature', value: 'enabled', description: 'Enable uwsm integration (only if systemd is enabled)')\noption('legacy_renderer', type: 'feature', value: 'disabled', description: 'Enable legacy renderer')\noption('tracy_enable', type: 'boolean', value: false , description: 'Enable profiling')\n"
        },
        {
          "name": "nix",
          "type": "tree",
          "content": null
        },
        {
          "name": "protocols",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "systemd",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}