{
  "metadata": {
    "timestamp": 1736566362844,
    "page": 123,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Snapchat/KeyDB",
      "stars": 11658,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8232421875,
          "content": ".*.swp\ncore\n*.o\n*.xo\n*.so\n*.d\n!**/bash_completion.d\n!**/logrotate.d\n!**/keydb.service.d\n!**/keydb-sentinel.service.d\n*.log\ndump.rdb\nsrc/keydb-server\n**/bin/keydb-server\n**/app/keydb-server\n*.deb\n*.rpm\nsrc/keydb-cli\n**/bin/keydb-cli\n**/app/keydb-cli\nsrc/keydb-sentinel\n**/bin/keydb-sentinel\n**/app/keydb-sentinel\nredis-benchmark\nkeydb-benchmark\nredis-check-aof\nkeydb-check-aof\nredis-check-rdb\nkeydb-check-rdb\nredis-check-dump\nkeydb-check-dump\nkeydb-diagnostic-tool\nredis-cli\nredis-sentinel\nredis-server\ndoc-tools\nrelease\nmisc/*\nsrc/release.h\nappendonly.aof\nSHORT_TERM_TODO\nrelease.h\nsrc/transfer.sh\nsrc/configs\nredis.ds\nsrc/keydb.conf\nsrc/nodes.conf\ndeps/lua/src/lua\ndeps/lua/src/luac\ndeps/lua/src/liblua.a\ntests/tls*/*\n.make-*\n.prerequisites\n*.dSYM\nMakefile.dep\n.vscode/*\n.idea/*\n.ccls\n.ccls-cache/*\ncompile_commands.json\nkeydb.code-workspace\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2177734375,
          "content": "[submodule \"deps/rocksdb\"]\n\tpath = deps/rocksdb\n\turl = https://github.com/facebook/rocksdb.git\n[submodule \"deps/depot_tools\"]\n\tpath = deps/depot_tools\n\turl = https://chromium.googlesource.com/chromium/tools/depot_tools.git\n"
        },
        {
          "name": "00-RELEASENOTES",
          "type": "blob",
          "size": 32.8359375,
          "content": "Redis 6.2 release notes\n=======================\n\n--------------------------------------------------------------------------------\nUpgrade urgency levels:\n\nLOW:      No need to upgrade unless there are new features you want to use.\nMODERATE: Program an upgrade of the server, but it's not urgent.\nHIGH:     There is a critical bug that may affect a subset of users. Upgrade!\nCRITICAL: There is a critical bug affecting MOST USERS. Upgrade ASAP.\nSECURITY: There are security fixes in the release.\n--------------------------------------------------------------------------------\n\n================================================================================\nRedis 6.2.6 Released Mon Oct 4 12:00:00 IDT 2021\n================================================================================\n\nUpgrade urgency: SECURITY, contains fixes to security issues.\n\nSecurity Fixes:\n* (CVE-2021-41099) Integer to heap buffer overflow handling certain string\n  commands and network payloads, when proto-max-bulk-len is manually configured\n  to a non-default, very large value [reported by yiyuaner].\n* (CVE-2021-32762) Integer to heap buffer overflow issue in redis-cli and\n  redis-sentinel parsing large multi-bulk replies on some older and less common\n  platforms [reported by Microsoft Vulnerability Research].\n* (CVE-2021-32687) Integer to heap buffer overflow with intsets, when\n  set-max-intset-entries is manually configured to a non-default, very large\n  value [reported by Pawel Wieczorkiewicz, AWS].\n* (CVE-2021-32675) Denial Of Service when processing RESP request payloads with\n  a large number of elements on many connections.\n* (CVE-2021-32672) Random heap reading issue with Lua Debugger [reported by\n  Meir Shpilraien].\n* (CVE-2021-32628) Integer to heap buffer overflow handling ziplist-encoded\n  data types, when configuring a large, non-default value for\n  hash-max-ziplist-entries, hash-max-ziplist-value, zset-max-ziplist-entries\n  or zset-max-ziplist-value [reported by sundb].\n* (CVE-2021-32627) Integer to heap buffer overflow issue with streams, when\n  configuring a non-default, large value for proto-max-bulk-len and\n  client-query-buffer-limit [reported by sundb].\n* (CVE-2021-32626) Specially crafted Lua scripts may result with Heap buffer\n  overflow [reported by Meir Shpilraien].\n\nBug fixes that involve behavior changes:\n* GEO* STORE with empty source key deletes the destination key and return 0 (#9271)\n  Previously it would have returned an empty array like the non-STORE variant.\n* PUBSUB NUMPAT replies with number of patterns rather than number of subscriptions (#9209)\n  This actually changed in 6.2.0 but was overlooked and omitted from the release notes.\n\nBug fixes that are only applicable to previous releases of Redis 6.2:\n* Fix CLIENT PAUSE, used an old timeout from previous PAUSE (#9477)\n* Fix CLIENT PAUSE in a replica would mess the replication offset (#9448)\n* Add some missing error statistics in INFO errorstats (#9328)\n\nOther bug fixes:\n* Fix incorrect reply of COMMAND command key positions for MIGRATE command (#9455)\n* Fix appendfsync to always guarantee fsync before reply, on MacOS and FreeBSD (kqueue) (#9416)\n* Fix the wrong mis-detection of sync_file_range system call, affecting performance (#9371)\n\nCLI tools:\n* When redis-cli received ASK response, it didn't handle it (#8930)\n\nImprovements:\n* Add latency monitor sample when key is deleted via lazy expire (#9317)\n* Sanitize corrupt payload improvements (#9321, #9399)\n* Delete empty keys when loading RDB file or handling a RESTORE command (#9297, #9349)\n\n================================================================================\nRedis 6.2.5 Released Wed Jul 21 16:32:19 IDT 2021\n================================================================================\n\nUpgrade urgency: SECURITY, contains fixes to security issues that affect\nauthenticated client connections on 32-bit versions. MODERATE otherwise.\n\nFix integer overflow in BITFIELD on 32-bit versions (CVE-2021-32761).\nAn integer overflow bug in Redis version 2.2 or newer can be exploited using the\nBITFIELD command to corrupt the heap and potentially result with remote code\nexecution.\n\nBug fixes that involve behavior changes:\n* Change reply type for ZPOPMAX/MIN with count in RESP3 to nested array (#8981).\n  Was using a flat array like in RESP2 instead of a nested array like ZRANGE does.\n* Fix reply type for HRANDFIELD and ZRANDMEMBER when key is missing (#9178).\n  Was using a null array instead of an empty array.\n* Fix reply type for ZRANGESTORE when source key is missing (#9089).\n  Was using an empty array like ZRANGE instead of 0 (used in the STORE variant).\n\nBug fixes that are only applicable to previous releases of Redis 6.2:\n* ZRANDMEMBER WITHSCORES with negative COUNT may return bad score (#9162)\n* Fix crash after CLIENT UNPAUSE when threaded I/O config is enabled (#9041)\n* Fix XTRIM or XADD with LIMIT may delete more entries than the limit (#9048)\n* Fix build issue with OpenSSL 1.1.0 (#9233)\n\nOther bug fixes:\n* Fail EXEC command in case a watched key is expired (#9194)\n* Fix SMOVE not to invalidate dest key (WATCH and tracking) when member already exists (#9244)\n* Fix SINTERSTORE not to delete dest key when getting a wrong type error (#9032)\n* Fix overflows on 32-bit versions in GETBIT, SETBIT, BITCOUNT, BITPOS, and BITFIELD (#9191)\n* Improve MEMORY USAGE on stream keys (#9164)\n* Set TCP keepalive on inbound cluster bus connections (#9230)\n* Fix diskless replica loading to recover from RDB short read on module AUX data (#9199)\n* Fix race in client side tracking (#9116)\n* Fix ziplist length updates on big-endian platforms (#2080)\n\nCLI tools:\n* redis-cli cluster import command may issue wrong MIGRATE command, sending COPY instead of REPLACE (#8945)\n* redis-cli --rdb fixes when using \"-\" to write to stdout (#9136, #9135)\n* redis-cli support for RESP3 set type in CSV and RAW output (#7338)\n\nModules:\n* Module API for getting current command name (#8792)\n* Fix RM_StringTruncate when newlen is 0 (#3718)\n* Fix CLIENT UNBLOCK crashing modules without timeout callback (#9167)\n\n================================================================================\nRedis 6.2.4 Released Tue June 1 12:00:00 IST 2021\n================================================================================\n\nUpgrade urgency: SECURITY, Contains fixes to security issues that affect\nauthenticated client connections. MODERATE otherwise.\n\nFix integer overflow in STRALGO LCS (CVE-2021-32625)\nAn integer overflow bug in Redis version 6.0 or newer can be exploited using the\nSTRALGO LCS command to corrupt the heap and potentially result with remote code\nexecution. This is a result of an incomplete fix by CVE-2021-29477.\n\nBug fixes that are only applicable to previous releases of Redis 6.2:\n* Fix crash after a diskless replication fork child is terminated (#8991)\n* Fix redis-benchmark crash on unsupported configs (#8916)\n\nOther bug fixes:\n* Fix crash in UNLINK on a stream key with deleted consumer groups (#8932)\n* SINTERSTORE: Add missing keyspace del event when none of the sources exist (#8949)\n* Sentinel: Fix CONFIG SET of empty string sentinel-user/sentinel-pass configs (#8958)\n* Enforce client output buffer soft limit when no traffic (#8833)\n\nImprovements:\n* Hide AUTH passwords in MIGRATE command from slowlog (#8859)\n\n================================================================================\nRedis 6.2.3 Released Mon May 3 19:00:00 IST 2021\n================================================================================\n\nUpgrade urgency: SECURITY, Contains fixes to security issues that affect\nauthenticated client connections. LOW otherwise.\n\nInteger overflow in STRALGO LCS command (CVE-2021-29477):\nAn integer overflow bug in Redis version 6.0 or newer could be exploited using\nthe STRALGO LCS command to corrupt the heap and potentially result in remote\ncode execution. The integer overflow bug exists in all versions of Redis\nstarting with 6.0.\n\nInteger overflow in COPY command for large intsets (CVE-2021-29478):\nAn integer overflow bug in Redis 6.2 could be exploited to corrupt the heap and\npotentially result with remote code execution. The vulnerability involves\nchanging the default set-max-intset-entries configuration value, creating a\nlarge set key that consists of integer values and using the COPY command to\nduplicate it. The integer overflow bug exists in all versions of Redis starting\nwith 2.6, where it could result with a corrupted RDB or DUMP payload, but not\nexploited through COPY (which did not exist before 6.2).\n\nBug fixes that are only applicable to previous releases of Redis 6.2:\n* Fix memory leak in moduleDefragGlobals (#8853)\n* Fix memory leak when doing lazy freeing client tracking table (#8822)\n* Block abusive replicas from sending command that could assert and crash redis (#8868)\n\nOther bug fixes:\n* Use a monotonic clock to check for Lua script timeout (#8812)\n* redis-cli: Do not use unix socket when we got redirected in cluster mode (#8870)\n\nModules:\n* Fix RM_GetClusterNodeInfo() to correctly populate master id (#8846)\n\n================================================================================\nRedis 6.2.2 Released Mon April 19 19:00:00 IST 2021\n================================================================================\n\nUpgrade urgency: HIGH, if you're using ACL and pub/sub, CONFIG REWRITE, or\nsuffering from performance regression. see below.\n\nBug fixes for regressions in previous releases of Redis 6.2:\n* Fix BGSAVE, AOFRW, and replication slowdown due to child reporting CoW (#8645)\n* Fix short busy loop when timer event is about to fire (#8764)\n* Fix default user, overwritten and reset users losing pubsub channel permissions (#8723)\n* Fix config rewrite with an empty `save` config resulsing in default `save` values (#8719)\n* Fix not starting on alpine/libmusl without IPv6 (#8655)\n* Fix issues with propagation and MULTI/EXEC in modules (#8617)\n  Several issues around nested calls and thread safe contexts\n\nBug fixes that are only applicable to previous releases of Redis 6.2:\n* ACL Pub/Sub channels permission handling for save/load scenario (#8794)\n* Fix early rejection of PUBLISH inside MULTI-EXEC transaction (#8534)\n* Fix missing SLOWLOG records for blocked commands (#8632)\n* Allow RESET command during busy scripts (#8629)\n* Fix some error replies were not counted on stats (#8659)\n\nBug fixes:\n* Add a timeout mechanism for replicas stuck in fullsync (#8762)\n* Process HELLO command even if the default user has no permissions (#8633)\n* Client issuing a long running script and using a pipeline, got disconnected (#8715)\n* Fix script kill to work also on scripts that use `pcall` (#8661)\n* Fix list-compress-depth may compress more node than required (#8311)\n* Fix redis-cli handling of rediss:// URL scheme (#8705)\n* Cluster: Skip unnecessary check which may prevent failure detection (#8585)\n* Cluster: Fix hang manual failover when replica just started (#8651)\n* Sentinel: Fix info-refresh time field before sentinel get first response (#8567)\n* Sentinel: Fix possible crash on failed connection attempt (#8627)\n* Systemd: Send the readiness notification when a replica is ready to accept connections (#8409)\n\nCommand behavior changes:\n* ZADD: fix wrong reply when INCR used with GT/LT which blocked the update (#8717)\n  It was responding with the incremented value rather than nil\n* XAUTOCLAIM: fix response to return the next available id as the cursor (#8725)\n  Previous behavior was retuning the last one which was already scanned\n* XAUTOCLAIM: fix JUSTID to prevent incrementing delivery_count (#8724)\n\nNew config options:\n* Add cluster-allow-replica-migration config option (#5285)\n* Add replica-announced config option (#8653)\n* Add support for plaintext clients in TLS cluster (#8587)\n* Add support for reading encrypted keyfiles (#8644)\n\nImprovements:\n* Fix performance regression in BRPOP on Redis 6.0 (#8689)\n* Avoid adding slowlog entries for config with sensitive data (#8584)\n* Improve redis-cli non-binary safe string handling (#8566)\n* Optimize CLUSTER SLOTS reply (#8541)\n* Handle remaining fsync errors (#8419)\n\nInfo fields and introspection changes:\n* Strip % sign from current_fork_perc info field (#8628)\n* Fix RSS memory info on FreeBSD (#8620)\n* Fix client_recent_max_input/output_buffer in 'INFO CLIENTS' when all clients drop (#8588)\n* Fix invalid master_link_down_since_seconds in info replication (#8785)\n\nPlatform and deployment-related changes:\n* Fix FreeBSD <12.x builds (#8603)\n\nModules:\n* Add macros for RedisModule_log logging levels (#4246)\n* Add RedisModule_GetAbsExpire / RedisModule_SetAbsExpire (#8564)\n* Add a module type for key space notification (#8759)\n* Set module eviction context flag only in masters (#8631)\n* Fix unusable RedisModule_IsAOFClient API (#8596)\n* Fix missing EXEC on modules propagation after failed EVAL execution (#8654)\n* Fix edge-case when a module client is unblocked (#8618)\n\n================================================================================\nRedis 6.2.1 Released Mon Mar  1 17:51:36 IST 2021\n================================================================================\n\nUpgrade urgency: LOW.\n\nHere is a comprehensive list of changes in this release compared to 6.2.0,\neach one includes the PR number that added it, so you can get more details\nat https://github.com/redis/redis/pull/<number>\n\nBug fixes:\n* Fix sanitize-dump-payload for stream with deleted records (#8568)\n* Prevent client-query-buffer-limit config from being set to lower than 1mb (#8557)\n\nImprovements:\n* Make port, tls-port and bind config options modifiable at runtime (#8510)\n\nPlatform and deployment-related changes:\n* Fix compilation error on non-glibc systems if jemalloc is not used (#8533)\n* Improved memory consumption and memory usage tracking on FreeBSD (#8545)\n* Fix compilation on ARM64 MacOS with jemalloc (#8458)\n\nModules:\n* New Module API for getting user name of a client (#8508)\n* Optimize RM_Call by utilizing a shared reusable client (#8516)\n* Fix crash running CLIENT INFO via RM_Call (#8560)\n\n================================================================================\nRedis 6.2.0 GA  Released Tue Feb 22 14:00:00 IST 2021\n================================================================================\n\nUpgrade urgency: SECURITY if you use 32bit build of redis (see bellow), MODERATE\nif you used earlier versions of Redis 6.2, LOW otherwise.\n\nInteger overflow on 32-bit systems (CVE-2021-21309):\nRedis 4.0 or newer uses a configurable limit for the maximum supported bulk\ninput size. By default, it is 512MB which is a safe value for all platforms.\nIf the limit is significantly increased, receiving a large request from a client\nmay trigger several integer overflow scenarios, which would result with buffer\noverflow and heap corruption.\n\nHere is a comprehensive list of changes in this release compared to 6.2 RC3,\neach one includes the PR number that added it, so you can get more details\nat https://github.com/redis/redis/pull/<number>\n\nBug fixes:\n* Avoid 32-bit overflows when proto-max-bulk-len is set high (#8522)\n* Fix broken protocol in client tracking tracking-redir-broken message (#8456)\n* Avoid unsafe field name characters in INFO commandstats, errorstats, modules (#8492)\n* XINFO able to access expired keys during CLIENT PAUSE WRITE (#8436)\n* Fix allowed length for REPLCONF ip-address, needed due to Sentinel's support for hostnames (#8517)\n* Fix broken protocol in redis-benchmark when used with -a or --dbnum (#8486)\n* XADD counts deleted records too when considering switching to a new listpack (#8390)\n\nBug fixes that are only applicable to previous releases of Redis 6.2:\n* Fixes in GEOSEARCH bybox (accuracy and mismatch between width and height) (#8445)\n* Fix risk of OOM panic in HRANDFIELD, ZRANDMEMBER commands with huge negative count (#8429)\n* Fix duplicate replicas issue in Sentinel, needed due to hostname support (#8481)\n* Fix Sentinel configuration rewrite, an improvement of #8271 (#8480)\n\nCommand behavior changes:\n* SRANDMEMBER uses RESP3 array type instead of set type (#8504)\n* EXPIRE, EXPIREAT, SETEX, GETEX: Return error when provided expire time overflows (#8287)\n\nOther behavior changes:\n* Remove ACL subcommand validation if fully added command exists. (#8483)\n\nImprovements:\n* Optimize sorting in GEORADIUS / GEOSEARCH with COUNT (#8326)\n* Optimize HRANDFIELD and ZRANDMEMBER case 4 when ziplist encoded (#8444)\n* Optimize in-place replacement of elements in HSET, HINCRBY, LSET (#8493)\n* Remove redundant list to store pubsub patterns (#8472)\n* Add --insecure option to command line tools (#8416)\n\nInfo fields and introspection changes:\n* Add INFO fields to track progress of BGSAVE, AOFRW, replication (#8414)\n\nModules:\n* RM_ZsetRem: Delete key if empty, the bug could leave empty zset keys (#8453)\n* RM_HashSet: Add COUNT_ALL flag and set errno (#8446)\n\n================================================================================\nRedis 6.2 RC3   Released Tue Feb 1 14:00:00 IST 2021\n================================================================================\n\nUpgrade urgency LOW: This is the third Release Candidate of Redis 6.2.\n\nHere is a comprehensive list of changes in this release compared to 6.2 RC2,\neach one includes the PR number that added it, so you can get more details\nat https://github.com/redis/redis/pull/<number>\n\nNew commands / args:\n* Add HRANDFIELD and ZRANDMEMBER commands (#8297)\n* Add FAILOVER command (#8315)\n* Add GETEX, GETDEL commands (#8327)\n* Add PXAT/EXAT arguments to SET command (#8327)\n* Add SYNC arg to FLUSHALL and FLUSHDB, and ASYNC/SYNC arg to SCRIPT FLUSH (#8258)\n\nSentinel:\n* Add hostname support to Sentinel (#8282)\n* Prevent file descriptors from leaking into Sentinel scripts (#8242)\n* Fix config file line order dependency and config rewrite sequence (#8271)\n\nNew configuration options:\n* Add set-proc-title config option to disable changes to the process title (#3623)\n* Add proc-title-template option to control what's shown in the process title (#8397)\n* Add lazyfree-lazy-user-flush config option to control FLUSHALL, FLUSHDB and SCRIPT FLUSH (#8258)\n\nBug fixes:\n* AOF: recover from last write error by turning on/off appendonly config (#8030)\n* Exit on fsync error when the AOF fsync policy is 'always' (#8347)\n* Avoid assertions (on older kernels) when testing arm64 CoW bug (#8405)\n* CONFIG REWRITE should honor umask settings (#8371)\n* Fix firstkey,lastkey,step in COMMAND command for some commands (#8367)\n\nSpecial considerations:\n* Fix misleading description of the save configuration directive (#8337)\n\nImprovements:\n* A way to get RDB file via replication without excessive replication buffers (#8303)\n* Optimize performance of clusterGenNodesDescription for large clusters (#8182)\n\nInfo fields and introspection changes:\n* SLOWLOG and LATENCY monitor include unblocking time of blocked commands (#7491)\n\nModules:\n* Add modules API for streams (#8288)\n* Add event for fork child birth and termination (#8289)\n* Add RM_BlockedClientMeasureTime* etc, to track background processing in commandstats (#7491)\n* Fix bug in v6.2, wrong value passed to the new unlink callback (#8381)\n* Fix bug in v6.2, modules blocked on keys unblock on commands like LPUSH (#8356)\n\n================================================================================\nRedis 6.2 RC2   Released Tue Jan 12 16:17:20 IST 2021\n================================================================================\n\nUpgrade urgency LOW: This is the second Release Candidate of Redis 6.2.\n\nIMPORTANT: If you're running Redis on ARM64 or a big-endian system, upgrade may\nhave significant implications. Please be sure to read the notes below.\n\nHere is a comprehensive list of changes in this release compared to 6.2 RC1,\neach one includes the PR number that added it, so you can get more details\nat https://github.com/redis/redis/pull/<number>\n\nNew commands / args:\n* Add the REV, BYLEX and BYSCORE arguments to ZRANGE, and the ZRANGESTORE command (#7844)\n* Add the XAUTOCLAIM command (#7973)\n* Add the MINID trimming strategy and the LIMIT argument to XADD and XTRIM (#8169)\n* Add the ANY argument to GEOSEARCH and GEORADIUS (#8259)\n* Add the CH, NX, XX arguments to GEOADD (#8227)\n* Add the COUNT argument to LPOP and RPOP (#8179)\n* Add the WRITE argument to CLIENT PAUSE for pausing write commands exclusively (#8170)\n* Change the proto-ver argument of HELLO to optional (#7377)\n* Add the CLIENT TRACKINGINFO subcommand (#7309)\n\nCommand behavior changes:\n* CLIENT TRACKING yields an error when given overlapping BCAST prefixes (#8176)\n* SWAPDB invalidates WATCHed keys (#8239)\n* SORT command behaves differently when used on a writable replica (#8283)\n\nOther behavior changes:\n* Avoid propagating MULTI/EXEC for read-only transactions (#8216)\n* Remove the read-only flag from TIME, ECHO, ROLE, LASTSAVE (#8216)\n* Fix the command flags of PFDEBUG (#8222)\n* Tracking clients will no longer receive unnecessary key invalidation messages after FLUSHDB (#8039)\n* Sentinel: Fix missing updates to the config file after SENTINEL SET command (#8229)\n\nBug fixes with compatibility implications (bugs introduced in Redis 6.0):\n* Fix RDB CRC64 checksum on big-endian systems (#8270)\n  If you're using big-endian please consider the compatibility implications with\n  RESTORE, replication and persistence.\n* Fix wrong order of key/value in Lua's map response (#8266)\n  If your scripts use redis.setresp() or return a map (new in Redis 6.0), please\n  consider the implications.\n\nBug fixes that are only applicable to previous releases of Redis 6.2:\n* Resolve rare assertions in active defragmentation while loading (#8284, #8281)\n\nBug fixes:\n* Fix the selection of a random element from large hash tables (#8133)\n* Fix an issue where a forked process deletes the parent's pidfile (#8231)\n* Fix crashes when enabling io-threads-do-reads (#8230)\n* Fix a crash in redis-cli after executing cluster backup (#8267)\n* Fix redis-benchmark to use an IP address for the first cluster node (#8154)\n* Fix saving of strings larger than 2GB into RDB files (#8306)\n\nAdditional improvements:\n* Improve replication handshake time (#8214)\n* Release client tracking table memory asynchronously in cases where the DB is also freed asynchronously (#8039)\n* Avoid wasteful transient memory allocation in certain cases (#8286, #5954)\n* Handle binary string values by the 'requirepass' and 'masterauth' configs (#8200)\n\nPlatform and deployment-related changes:\n* Install redis-check-rdb and redis-check-aof as symlinks to redis-server (#5745)\n* Add a check for an ARM64 Linux kernel bug (#8224)\n  Due to the potential severity of this issue, Redis will refuse to run on\n  affected platforms by default.\n\nInfo fields and introspection changes:\n* Add the errorstats section to the INFO command (#8217)\n* Add the failed_calls and rejected_calls fields INFO's commandstats section (#8217)\n* Report child copy-on-write metrics continuously (#8264)\n\nModule API changes:\n* Add the RedisModule_SendChildCOWInfo API (#8264)\n* Add the may-replicate command flag (#8170)\n\n================================================================================\nRedis 6.2 RC1   Released Mon Dec 14 11:50:00 IST 2020\n================================================================================\n\nUpgrade urgency LOW: This is the first Release Candidate of Redis 6.2.\n\nIntroduction to the Redis 6.2 release\n=====================================\n\nThis release is the first significant Redis release managed by the core team\nunder the new project governance model.\n\nRedis 6.2 includes many new commands and improvements, but no big features. It\nmainly makes Redis more complete and addresses issues that have been requested\nby many users frequently or for a long time.\n\nMany of these changes were not eligible for 6.0.x for several reasons:\n\n1. They are not backward compatible, which is always the case with new or\n   extended commands (that cannot be replicated to an older replica).\n2. They require a longer release-candidate test cycle.\n\n\nHere is a comprehensive list of changes in this release compared to 6.0.9,\neach one includes the PR number that added it, so you can get more details\nat https://github.com/redis/redis/pull/<number>\n\nNew commands / args:\n* Add SMISMEMBER command that checks multiple members (#7615)\n* Add ZMSCORE command that returns an array of scores (#7593)\n* Add LMOVE and BLMOVE commands that pop and push arbitrarily (#6929)\n* Add RESET command that resets client connection state (#7982)\n* Add COPY command that copies keys (#7953)\n* Add ZDIFF and ZDIFFSTORE commands (#7961)\n* Add ZINTER and ZUNION commands (#7794)\n* Add GEOSEARCH/GEOSEARCHSTORE commands for bounding box spatial queries (#8094)\n* Add GET parameter to SET command, for more powerful GETSET (#7852)\n* Add exclusive range query to XPENDING (#8130)\n* Add exclusive range query to X[REV]RANGE (#8072)\n* Add GT and LT options to ZADD for conditional score updates (#7818)\n* Add CLIENT INFO and CLIENT LIST for specific ids (#8113)\n* Add IDLE argument to XPENDING command (#7972)\n* Add local address to CLIENT LIST, and a CLIENT KILL filter. (#7913)\n* Add NOMKSTREAM option to XADD command (#7910)\n* Add command introspection to Sentinel (#7940)\n* Add SENTINEL MYID subcommand (#7858)\n\nNew features:\n* Dump payload sanitization: prevent corrupt payload causing crashes (#7807)\n  Has flags to enable full O(N) validation (disabled by default).\n* ACL patterns for Pub/Sub channels (#7993)\n* Support ACL for Sentinel mode (#7888)\n* Support getting configuration from both stdin and file at the same time (#7893)\n  Lets you avoid storing secrets on the disk.\n\nNew features in CLI tools:\n* redis-cli RESP3 push support (#7609)\n* redis-cli cluster import support source and target that require auth (#7994)\n* redis-cli URIs able to provide user name in addition to password (#8048)\n* redis-cli/redis-benchmark allow specifying the prefered ciphers/ciphersuites (#8005)\n* redis-cli add -e option to exit with code when command execution fails (#8136)\n\nCommand behavior changes:\n* EXISTS should not alter LRU (#8016)\n  In Redis 5.0 and 6.0 it would have touched the LRU/LFU of the key.\n* OBJECT should not reveal logically expired keys (#8016)\n  Will now behave the same TYPE or any other non-DEBUG command.\n* Improve db id range check for SELECT and MOVE (#8085)\n  Changes the error message text on a wrong db index.\n* Modify AUTH / HELLO error message (#7648)\n  Changes the error message text when the user isn't found or is disabled.\n* BITOPS length limited to proto_max_bulk_len rather than 512MB (#8096)\n  The limit is now configurable like in SETRANGE, and APPEND.\n* GEORADIUS[BYMEMBER] can fail with -OOM if Redis is over the memory limit (#8107)\n\nOther behavior changes:\n* Optionally (default) fail to start if requested bind address is not available (#7936)\n  If you rely on Redis starting successfully even if one of the bind addresses\n  is not available, you'll need to tune the new config.\n* Limit the main db dictionaries expansion to prevent key eviction (#7954)\n  In the past big dictionary rehashing could result in massive data eviction.\n  Now this rehashing is delayed (up to a limit), which can result in performance\n  loss due to hash collisions.\n* CONFIG REWRITE is atomic and safer, but requires write access to the config file's folder (#7824, #8051)\n  This change was already present in 6.0.9, but was missing from the release\n  notes.\n* A new incremental eviction mechanism that reduces latency on eviction spikes (#7653)\n  In pathological cases this can cause memory to grow uncontrolled and may require\n  specific tuning.\n* Not resetting \"save\" config when Redis is started with command line arguments. (#7092)\n  In case you provide command line arguments without \"save\" and count on it\n  being disabled, Now the defaults \"save\" config will kick in.\n* Update memory metrics for INFO during loading (#7690)\n* When \"supervised\" config is enabled, it takes precedence over \"daemonize\". (#8036)\n* Assertion and panic, print crash log without generating SIGSEGV (#7585)\n* Added crash log report on SIGABRT, instead of silently exiting (#8004)\n* Disable THP (Transparent Huge Pages) if enabled (#7381)\n  If you deliberately enabled it, you'll need to config Redis to keep it.\n\nBug fixes:\n* Handle output buffer limits for module blocked clients (#8141)\n  Could result in a module sending reply to a blocked client to go beyond the\n  limit.\n* Fix setproctitle related crashes. (#8150, #8088)\n  Caused various crashes on startup, mainly on Apple M1 chips or under\n  instrumentation.\n* A module doing RM_Call could cause replicas to get nested MULTI (#8097).\n* Backup/restore cluster mode keys to slots map for repl-diskless-load=swapdb (#8108)\n  In cluster mode with repl-diskless-load, when loading failed, slot map\n  wouldn't have been restored.\n* Fix oom-score-adj-values range, and bug when used in config file (#8046)\n  Enabling setting this in the config file in a line after enabling it, would\n  have been buggy.\n* Reset average ttl when empty databases (#8106)\n  Just causing misleading metric in INFO\n* Disable rehash when Redis has child process (#8007)\n  This could have caused excessive CoW during BGSAVE, replication or AOFRW.\n* Further improved ACL algorithm for picking categories (#7966)\n  Output of ACL GETUSER is now more similar to the one provided by ACL SETUSER.\n* Fix bug with module GIL being released prematurely (#8061)\n  Could in theory (and rarely) cause multi-threaded modules to corrupt memory.\n* Fix cluster redirect for module command with no firstkey. (#7539)\n* Reduce effect of client tracking causing feedback loop in key eviction (#8100)\n* Kill disk-based fork child when all replicas drop and 'save' is not enabled (#7819)\n* Rewritten commands (modified for propagation) are logged as their original command (#8006)\n* Fix cluster access to unaligned memory (SIGBUS on old ARM) #7958\n* If diskless repl child is killed, make sure to reap the child pid (#7742)\n* Broadcast a PONG message when slot's migration is over, may reduce MOVED responses (#7571)\n\nOther improvements:\n* TLS Support in redis-benchmark (#7959)\n* Accelerate diskless master connections, and general re-connections (#6271)\n* Run active defrag while blocked / loading (#7726)\n* Performance and memory reporting improvement - sds take control of its internal fragmentation (#7875)\n* Speedup cluster failover. (#7948)\n\nPlatform / toolchain support related improvements:\n* Optionally (not by default) use H/W Monotonic clock for faster time sampling (#7644)\n* Remove the requirements for C11 and _Atomic supporting compiler (#7707)\n  This would allow to more easily build and use Redis on older systems and\n  compilers again.\n* Fix crash log registers output on ARM. (#8020)\n* Raspberry build fix. (#8095)\n* Setting process title support for Haiku. (#8060)\n* DragonFlyBSD RSS memory sampling support. (#8023)\n\nNew configuration options:\n* Enable configuring OpenSSL using the standard openssl.cnf (#8143)\n* oom-score-adj-values config can now take absolute values (besides relative ones) (#8046)\n* TLS: Add different client cert support. (#8076)\n* Note that a few other changes listed above added their config options.\n\nInfo fields and introspection changes:\n* Add INFO fields to track diskless and disk-based replication progress (#7981)\n* Add INFO field for main thread cpu time, and scrape system time. (#8132)\n* Add total_forks to INFO STATS (#8155)\n* Add maxclients and cluster_connections to INFO CLIENTS (#7979)\n* Add tracking bcast flag and client redirection in client list (#7995)\n* Fixed INFO client_recent_max_input_buffer includes argv array (#8065, see #7874)\n* Note that a few other changes listed above added their info fields.\n\nModule API changes:\n* Add CTX_FLAGS_DENY_BLOCKING as a unified the way to know if blocking is allowed (#8025)\n* Add data type callbacks for lazy free effort, and unlink (#7912)\n* Add data type callback for COPY command (#8112)\n* Add callbacks for defrag support. (#8149)\n* Add module event for repl-diskless-load swapdb (#8153)\n\nModule related fixes:\n* Moved RMAPI_FUNC_SUPPORTED so that it's usable (#8037)\n* Improve timer accuracy (#7987)\n* Allow '\\0' inside of result of RM_CreateStringPrintf (#6260)\n\n\nThanks to all the users and developers who made this release possible.\nWe'll follow up with more RC releases, until the code looks production ready\nand we don't get reports of serious issues for a while.\n\nA special thank you for the amount of work put into this release by:\n- Oran Agra\n- Yossi Gottlieb\n- Viktor Söderqvist\n- Yang Bodong\n- Filipe Oliveira\n- Guy Benoish\n- Itamar Haber\n- Madelyn Olson\n- Wang Yuan\n- Felipe Machado\n- Wen Hui\n- Tatsuya Arisawa\n- Jonah H. Harris\n- Raghav Muddur\n- Jim Brunner\n- Yaacov Hazan\n- Allen Farris\n- Chen Yang\n- Nitai Caro\n- sundb\n- Meir Shpilraien\n- maohuazhu\n- Valentino Geron\n- Zhao Zhao\n- Qu Chen\n- George Prekas\n- Tyson Andre\n- Uri Yagelnik\n- Michael Grunder\n- Huang Zw\n- alexronke-channeladvisor\n- Andy Pan\n- Wu Yunlong\n- Wei Kukey\n- Yoav Steinberg\n- Greg Femec\n- Uri Shachar\n- Nykolas Laurentino de Lima\n- xhe\n- zhenwei pi\n- David CARLIER\n\nMigrating from 6.0 to 6.2\n=========================\n\nRedis 6.2 is mostly a strict superset of 6.0, you should not have any problem\nupgrading your application from 6.0 to 6.2. However there are some small changes\nof behavior listed above, please make sure you are not badly affected by any of\nthem.\n\nSpecifically these sections:\n* Command behavior changes\n* Other behavior changes\n\n--------------------------------------------------------------------------------\n\nCheers,\nThe Redis team\n"
        },
        {
          "name": "BUGS",
          "type": "blob",
          "size": 0.0498046875,
          "content": "Please check https://github.com/redis/redis/issues\n"
        },
        {
          "name": "CONDUCT",
          "type": "blob",
          "size": 4.908203125,
          "content": "Contributor Covenant Code of Conduct\nOur Pledge\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\nOur Standards\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\nand learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\noverall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\nadvances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others’ private information, such as a physical or email\naddress, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\nprofessional setting\n\nEnforcement Responsibilities\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\nScope\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\nEnforcement\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nthis email address: redis@redis.io.\nAll complaints will be reviewed and investigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\nEnforcement Guidelines\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n1. Correction\nCommunity Impact: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n2. Warning\nCommunity Impact: A violation through a single incident or series\nof actions.\nConsequence: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n3. Temporary Ban\nCommunity Impact: A serious violation of community standards, including\nsustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n4. Permanent Ban\nCommunity Impact: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within\nthe community.\nAttribution\nThis Code of Conduct is adapted from the Contributor Covenant,\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by Mozilla’s code of conduct\nenforcement ladder.\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations."
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.564453125,
          "content": "Copyright (c) 2006-2020, Salvatore Sanfilippo\nCopyright (C) 2019-2021, John Sully\nCopyright (C) 2020-2021, EQ Alpha Technology Ltd.\nCopyright (C) 2022 Snap Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n    * Neither the name of Redis nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.0107421875,
          "content": "See README\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.2060546875,
          "content": "# Top level makefile, this just calls into src/Makefile where the real work is done. Changes should be made there.\n\ndefault: all\n\n.DEFAULT:\n\tcd src && $(MAKE) $@\n\ninstall:\n\tcd src && $(MAKE) $@\n\n.PHONY: install\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.275390625,
          "content": "![Current Release](https://img.shields.io/github/release/JohnSully/KeyDB.svg)\n![CI](https://github.com/JohnSully/KeyDB/workflows/CI/badge.svg?branch=unstable)\n[![StackShare](http://img.shields.io/badge/tech-stack-0690fa.svg?style=flat)](https://stackshare.io/eq-alpha-technology-inc/eq-alpha-technology-inc)\n\n##### KeyDB is now a part of Snap Inc! Check out the announcement [here](https://docs.keydb.dev/news/2022/05/12/keydb-joins-snap) \n\n##### [Release v6.3.0](https://github.com/EQ-Alpha/KeyDB/releases/tag/v6.3.0) is here with major improvements as we consolidate our Open Source and Enterprise offerings into a single BSD-3 licensed project. See our [roadmap](https://docs.keydb.dev/docs/coming-soon) for details. \n\n##### Want to extend KeyDB with Javascript?  Try [ModJS](https://github.com/JohnSully/ModJS)\n\n##### Need Help? Check out our extensive [documentation](https://docs.keydb.dev).\n\n##### KeyDB is on Slack. Click [here](https://docs.keydb.dev/slack/) to learn more and join the KeyDB Community Slack workspace.\n\nWhat is KeyDB?\n--------------\n\nKeyDB is a high performance fork of Redis with a focus on multithreading, memory efficiency, and high throughput. In addition to performance improvements, KeyDB offers features such as Active Replication, FLASH Storage and Subkey Expires. KeyDB has a MVCC architecture that allows you to execute queries such as KEYS and SCAN without blocking the database and degrading performance.\n\nKeyDB maintains full compatibility with the Redis protocol, modules, and scripts.  This includes the atomicity guarantees for scripts and transactions.  Because KeyDB keeps in sync with Redis development KeyDB is a superset of Redis functionality, making KeyDB a drop in replacement for existing Redis deployments.\n\nOn the same hardware KeyDB can achieve significantly higher throughput than Redis. Active-Replication simplifies hot-spare failover allowing you to easily distribute writes over replicas and use simple TCP based load balancing/failover. KeyDB's higher performance allows you to do more on less hardware which reduces operation costs and complexity.\n\nThe chart below compares several KeyDB and Redis setups, including the latest Redis6 io-threads option, and TLS benchmarks.\n\n<img src=\"https://docs.keydb.dev/img/blog/2020-09-15/ops_comparison.png\"/>\n\nSee the full benchmark results and setup information here: https://docs.keydb.dev/blog/2020/09/29/blog-post/\n\nWhy fork Redis?\n---------------\n\nKeyDB has a different philosophy on how the codebase should evolve.  We feel that ease of use, high performance, and a \"batteries included\" approach is the best way to create a good user experience.  While we have great respect for the Redis maintainers it is our opinion that the Redis approach focuses too much on simplicity of the code base at the expense of complexity for the user.  This results in the need for external components and workarounds to solve common problems - resulting in more complexity overall.\n\nBecause of this difference of opinion features which are right for KeyDB may not be appropriate for Redis.  A fork allows us to explore this new development path and implement features which may never be a part of Redis.  KeyDB keeps in sync with upstream Redis changes, and where applicable we upstream bug fixes and changes. It is our hope that the two projects can continue to grow and learn from each other.\n\nProject Support\n-------------------\n\nThe KeyDB team maintains this project as part of Snap Inc. KeyDB is used by Snap as part of its caching infrastructure and is fully open sourced. There is no separate commercial product and no paid support options available. We really value collaborating with the open source community and welcome PRs, bug reports, and open discussion. For community support or to get involved further with the project check out our community support options [here](https://docs.keydb.dev/docs/support) (slack, forum, meetup, github issues). Our team monitors these channels regularly.\n\n\nAdditional Resources\n--------------------\n\nTry the KeyDB [Docker Image](https://hub.docker.com/r/eqalpha/keydb)\n\nJoin us on [Slack](https://docs.keydb.dev/slack/)\n\nLearn more using KeyDB's extensive [documentation](https://docs.keydb.dev)\n\nSee the [KeyDB Roadmap](https://docs.keydb.dev/docs/coming-soon) to see what's in store\n\n\nBenchmarking KeyDB\n------------------\n\nPlease note keydb-benchmark and redis-benchmark are currently single threaded and too slow to properly benchmark KeyDB.  We recommend using a redis cluster benchmark tool such as [memtier](https://github.com/RedisLabs/memtier_benchmark).  Please ensure your machine has enough cores for both KeyDB and memtier if testing locally.  KeyDB expects exclusive use of any cores assigned to it.\n\n\nNew Configuration Options\n-------------------------\n\nWith new features comes new options. All other configuration options behave as you'd expect.  Your existing configuration files should continue to work unchanged.\n\n```\n    server-threads N\n    server-thread-affinity [true/false]\n```\nThe number of threads used to serve requests.  This should be related to the number of queues available in your network hardware, *not* the number of cores on your\nmachine.  Because KeyDB uses spinlocks to reduce latency; making this too high will reduce performance.  We recommend using 4 here.  By default this is set to two.\n\n```\nmin-clients-per-thread 50\n```\nThe minimum number of clients on a thread before KeyDB assigns new connections to a different thread. Tuning this parameter is a tradeoff between locking overhead and distributing the workload over multiple cores\n\n```\nreplica-weighting-factor 2\n```\nKeyDB will attempt to balance clients across threads evenly; However, replica clients are usually much more expensive than a normal client, and so KeyDB will try to assign fewer clients to threads with a replica.  The weighting factor below is intended to help tune this behavior.  A replica weighting factor of 2 means we treat a replica as the equivalent of two normal clients.  Adjusting this value may improve performance when replication is used.  The best weighting is workload specific - e.g. read heavy workloads should set this to 1.  Very write heavy workloads may benefit from higher numbers.\n\n```\nactive-client-balancing yes\n```\nShould KeyDB make active attempts at balancing clients across threads?  This can impact performance accepting new clients.  By default this is enabled.  If disabled there is still a best effort from the kernel to distribute across threads with SO_REUSEPORT but it will not be as fair. By default this is enabled\n\n```\n    active-replica yes\n```\nIf you are using active-active replication set `active-replica` option to “yes”. This will enable both instances to accept reads and writes while remaining synced. [Click here](https://docs.keydb.dev/docs/active-rep/) to see more on active-rep in our docs section. There are also [docker examples]( https://docs.keydb.dev/docs/docker-active-rep/) on docs.\n\n```\nmulti-master-no-forward no\n```\nAvoid forwarding RREPLAY messages to other masters? WARNING: This setting is dangerous! You must be certain all masters are connected to eachother in a true mesh topology or data loss will occur! This command can be used to reduce multimaster bus traffic\n\n\n```\n    db-s3-object /path/to/bucket\n```\nIf you would like KeyDB to dump and load directly to AWS S3 this option specifies the bucket.  Using this option with the traditional RDB options will result in KeyDB backing up twice to both locations.  If both are specified KeyDB will first attempt to load from the local dump file and if that fails load from S3.  This requires the AWS CLI tools to be installed and configured which are used under the hood to transfer the data.\n\n\n```\nstorage-provider flash /path/to/flash\n```\nIf you would like to use KeyDB FLASH storage, specify the storage medium followed by the directory path on your local SSD volume. Note that this feature is still considered experimental and should be used with discretion. See [FLASH Documentation](https://docs.keydb.dev/docs/flash) for more details on configuration and setting up your FLASH volume. \n\n\nBuilding KeyDB\n--------------\n\nKeyDB can be compiled and is tested for use on Linux.  KeyDB currently relies on SO_REUSEPORT's load balancing behavior which is available only in Linux.  When we support marshalling connections across threads we plan to support other operating systems such as FreeBSD.\n\nMore on CentOS/Archlinux/Alpine/Debian/Ubuntu dependencies and builds can be found here: https://docs.keydb.dev/docs/build/\n\nInit and clone submodule dependencies:\n\n    % git submodule init && git submodule update\n\nInstall dependencies:\n\n    % sudo apt install build-essential nasm autotools-dev autoconf libjemalloc-dev tcl tcl-dev uuid-dev libcurl4-openssl-dev libbz2-dev libzstd-dev liblz4-dev libsnappy-dev libssl-dev\n\nCompiling is as simple as:\n\n    % make\n\nTo build with systemd support, you'll need systemd development libraries (such \nas libsystemd-dev on Debian/Ubuntu or systemd-devel on CentOS) and run:\n\n    % make USE_SYSTEMD=yes\n\nTo append a suffix to KeyDB program names, use:\n\n    % make PROG_SUFFIX=\"-alt\"\n\n***Note that the following dependencies may be needed: \n    % sudo apt-get install autoconf autotools-dev libnuma-dev libtool\n\nKeyDB by default is built with TLS enabled. To build without TLS support, use:\n\n    % make BUILD_TLS=no\n\nRunning the tests with TLS enabled (you will need `tcl-tls`\ninstalled):\n\n    % ./utils/gen-test-certs.sh\n    % ./runtest --tls\n\nTo build with KeyDB FLASH support, use:\n\n    % make ENABLE_FLASH=yes\n\n***Note that the KeyDB FLASH feature is considered experimental (beta) and should used with discretion\n\n\nFixing build problems with dependencies or cached build options\n---------\n\nKeyDB has some dependencies which are included in the `deps` directory.\n`make` does not automatically rebuild dependencies even if something in\nthe source code of dependencies changes.\n\nWhen you update the source code with `git pull` or when code inside the\ndependencies tree is modified in any other way, make sure to use the following\ncommand in order to really clean everything and rebuild from scratch:\n\n    make distclean\n\nThis will clean: jemalloc, lua, hiredis, linenoise.\n\nAlso if you force certain build options like 32bit target, no C compiler\noptimizations (for debugging purposes), and other similar build time options,\nthose options are cached indefinitely until you issue a `make distclean`\ncommand.\n\nFixing problems building 32 bit binaries\n---------\n\nIf after building KeyDB with a 32 bit target you need to rebuild it\nwith a 64 bit target, or the other way around, you need to perform a\n`make distclean` in the root directory of the KeyDB distribution.\n\nIn case of build errors when trying to build a 32 bit binary of KeyDB, try\nthe following steps:\n\n* Install the package libc6-dev-i386 (also try g++-multilib).\n* Try using the following command line instead of `make 32bit`:\n  `make CFLAGS=\"-m32 -march=native\" LDFLAGS=\"-m32\"`\n\nAllocator\n---------\n\nSelecting a non-default memory allocator when building KeyDB is done by setting\nthe `MALLOC` environment variable. KeyDB is compiled and linked against libc\nmalloc by default, with the exception of jemalloc being the default on Linux\nsystems. This default was picked because jemalloc has proven to have fewer\nfragmentation problems than libc malloc.\n\nTo force compiling against libc malloc, use:\n\n    % make MALLOC=libc\n\nTo compile against jemalloc on Mac OS X systems, use:\n\n    % make MALLOC=jemalloc\n\nMonotonic clock\n---------------\n\nBy default, KeyDB will build using the POSIX clock_gettime function as the\nmonotonic clock source.  On most modern systems, the internal processor clock\ncan be used to improve performance.  Cautions can be found here: \n    http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/\n\nTo build with support for the processor's internal instruction clock, use:\n\n    % make CFLAGS=\"-DUSE_PROCESSOR_CLOCK\"\n\nVerbose build\n-------------\n\nKeyDB will build with a user friendly colorized output by default.\nIf you want to see a more verbose output, use the following:\n\n    % make V=1\n\nRunning KeyDB\n-------------\n\nTo run KeyDB with the default configuration, just type:\n\n    % cd src\n    % ./keydb-server\n\nIf you want to provide your keydb.conf, you have to run it using an additional\nparameter (the path of the configuration file):\n\n    % cd src\n    % ./keydb-server /path/to/keydb.conf\n\nIt is possible to alter the KeyDB configuration by passing parameters directly\nas options using the command line. Examples:\n\n    % ./keydb-server --port 9999 --replicaof 127.0.0.1 6379\n    % ./keydb-server /etc/keydb/6379.conf --loglevel debug\n\nAll the options in keydb.conf are also supported as options using the command\nline, with exactly the same name.\n\n\nRunning KeyDB with TLS:\n------------------\n\nPlease consult the [TLS.md](TLS.md) file for more information on\nhow to use KeyDB with TLS.\n\n\nPlaying with KeyDB\n------------------\n\nYou can use keydb-cli to play with KeyDB. Start a keydb-server instance,\nthen in another terminal try the following:\n\n    % cd src\n    % ./keydb-cli\n    keydb> ping\n    PONG\n    keydb> set foo bar\n    OK\n    keydb> get foo\n    \"bar\"\n    keydb> incr mycounter\n    (integer) 1\n    keydb> incr mycounter\n    (integer) 2\n    keydb>\n\nYou can find the list of all the available commands at https://docs.keydb.dev/docs/commands/\n\nInstalling KeyDB\n-----------------\n\nIn order to install KeyDB binaries into /usr/local/bin, just use:\n\n    % make install\n\nYou can use `make PREFIX=/some/other/directory install` if you wish to use a\ndifferent destination.\n\nMake install will just install binaries in your system, but will not configure\ninit scripts and configuration files in the appropriate place. This is not\nneeded if you just want to play a bit with KeyDB, but if you are installing\nit the proper way for a production system, we have a script that does this\nfor Ubuntu and Debian systems:\n\n    % cd utils\n    % ./install_server.sh\n\n_Note_: `install_server.sh` will not work on Mac OSX; it is built for Linux only.\n\nThe script will ask you a few questions and will setup everything you need\nto run KeyDB properly as a background daemon that will start again on\nsystem reboots.\n\nYou'll be able to stop and start KeyDB using the script named\n`/etc/init.d/keydb_<portnumber>`, for instance `/etc/init.d/keydb_6379`.\n\nMultithreading Architecture\n---------------------------\n\nKeyDB works by running the normal Redis event loop on multiple threads.  Network IO, and query parsing are done concurrently.  Each connection is assigned a thread on accept().  Access to the core hash table is guarded by spinlock.  Because the hashtable access is extremely fast this lock has low contention.  Transactions hold the lock for the duration of the EXEC command.  Modules work in concert with the GIL which is only acquired when all server threads are paused.  This maintains the atomicity guarantees modules expect.\n\nUnlike most databases the core data structure is the fastest part of the system.  Most of the query time comes from parsing the REPL protocol and copying data to/from the network.\n\n\nCode contributions\n-----------------\n\nNote: by contributing code to the KeyDB project in any form, including sending\na pull request via Github, a code fragment or patch via private email or\npublic discussion groups, you agree to release your code under the terms\nof the BSD license that you can find in the COPYING file included in the KeyDB\nsource distribution.\n\nPlease see the CONTRIBUTING file in this source distribution for more\ninformation.\n\n\n"
        },
        {
          "name": "TLS.md",
          "type": "blob",
          "size": 2.166015625,
          "content": "TLS Support\n===========\n\nGetting Started\n---------------\n\n### Building\n\nTLS support is enabled in the default build. To build without TLS, run `make BUILD_TLS=no`.\n\n### Tests\n\nTo run KeyDB test suite with TLS, you'll need TLS support for TCL (i.e.\n`tcl-tls` package on Debian/Ubuntu).\n\n1. Run `./utils/gen-test-certs.sh` to generate a root CA and a server\n   certificate.\n\n2. Run `./runtest --tls` or `./runtest-cluster --tls` to run KeyDB and KeyDB\n   Cluster tests in TLS mode.\n\n### Running manually\n\nTo manually run a Redis server with TLS mode (assuming `gen-test-certs.sh` was\ninvoked so sample certificates/keys are available):\n\n    ./src/keydb-server --tls-port 6379 --port 0 \\\n        --tls-cert-file ./tests/tls/client.crt \\\n        --tls-key-file ./tests/tls/client.key \\\n        --tls-ca-cert-file ./tests/tls/ca.crt\n\nTo connect to this Redis server with `keydb-cli`:\n\n    ./src/keydb-cli --tls \\\n        --cert ./tests/tls/keydb.crt \\\n        --key ./tests/tls/keydb.key \\\n        --cacert ./tests/tls/ca.crt\n\nThis will disable TCP and enable TLS on port 6379. It's also possible to have\nboth TCP and TLS available, but you'll need to assign different ports.\n\nTo make a Replica connect to the master using TLS, use `--tls-replication yes`,\nand to make KeyDB Cluster use TLS across nodes use `--tls-cluster yes`.\n\nConnections\n-----------\n\nAll socket operations now go through a connection abstraction layer that hides\nI/O and read/write event handling from the caller.\n\nNote that unlike Redis, KeyDB fully supports multithreading of TLS connections.\n\nTo-Do List\n----------\n\n- [ ] keydb-benchmark support. The current implementation is a mix of using\n  hiredis for parsing and basic networking (establishing connections), but\n  directly manipulating sockets for most actions. This will need to be cleaned\n  up for proper TLS support. The best approach is probably to migrate to hiredis\n  async mode.\n- [ ] keydb-cli `--slave` and `--rdb` support.\n\nMulti-port\n----------\n\nConsider the implications of allowing TLS to be configured on a separate port,\nmaking KeyDB listening on multiple ports:\n\n1. Startup banner port notification\n2. Proctitle\n3. How slaves announce themselves\n4. Cluster bus port calculation\n"
        },
        {
          "name": "build.yaml",
          "type": "blob",
          "size": 3.7294921875,
          "content": "# Doc: https://wiki.sc-corp.net/pages/viewpage.action?pageId=121500284\nversion: 1\nmachamp:\n  keydb-build:\n    # Optional - build counter is linked to the build def\n    tag_template: \"0.0.%build.counter%-%sha%\"\n    # Optional - value in seconds before a build is terminated, default is 3600 seconds\n    timeout: 3600\n    # Optional - update ghe or not, default to true\n    update_ghe: true\n    code_coverage: false\n    # Required\n    steps:\n      make-build:\n        type: cmd\n        # https://github.sc-corp.net/Snapchat/img/tree/master/keydb/ubuntu-20-04\n        builder_image: us.gcr.io/snapchat-build-artifacts/prod/snapchat/img/keydb/keydb-ubuntu-20-04@sha256:cf869a3f5d1de1e1d976bb906689c37b7031938eb68661b844a38c532f27248c\n        command: ./machamp_scripts/build.sh\n      tls-test:\n        type: cmd\n        parent: make-build\n        # https://github.sc-corp.net/Snapchat/img/tree/master/keydb/ubuntu-20-04\n        builder_image: us.gcr.io/snapchat-build-artifacts/prod/snapchat/img/keydb/keydb-ubuntu-20-04@sha256:cf869a3f5d1de1e1d976bb906689c37b7031938eb68661b844a38c532f27248c\n        command: ./runtest --clients 4 --verbose --tls\n      cluster-test:\n        type: cmd\n        parent: make-build\n        # https://github.sc-corp.net/Snapchat/img/tree/master/keydb/ubuntu-20-04\n        builder_image: us.gcr.io/snapchat-build-artifacts/prod/snapchat/img/keydb/keydb-ubuntu-20-04@sha256:cf869a3f5d1de1e1d976bb906689c37b7031938eb68661b844a38c532f27248c\n        command: ./runtest-cluster --tls\n      sentinel-test:\n        type: cmd\n        parent: make-build\n        # https://github.sc-corp.net/Snapchat/img/tree/master/keydb/ubuntu-20-04\n        builder_image: us.gcr.io/snapchat-build-artifacts/prod/snapchat/img/keydb/keydb-ubuntu-20-04@sha256:cf869a3f5d1de1e1d976bb906689c37b7031938eb68661b844a38c532f27248c\n        command: ./runtest-sentinel\n      module-test:\n        type: cmd\n        parent: make-build\n        # https://github.sc-corp.net/Snapchat/img/tree/master/keydb/ubuntu-20-04\n        builder_image: us.gcr.io/snapchat-build-artifacts/prod/snapchat/img/keydb/keydb-ubuntu-20-04@sha256:cf869a3f5d1de1e1d976bb906689c37b7031938eb68661b844a38c532f27248c\n        command: ./runtest-moduleapi\n      rotation-test:\n        type: cmd\n        parent: make-build\n        # https://github.sc-corp.net/Snapchat/img/tree/master/keydb/ubuntu-20-04\n        builder_image: us.gcr.io/snapchat-build-artifacts/prod/snapchat/img/keydb/keydb-ubuntu-20-04@sha256:cf869a3f5d1de1e1d976bb906689c37b7031938eb68661b844a38c532f27248c\n        command: ./runtest-rotation\n  keydb-docker-build:\n    # Optional - build counter is linked to the build def\n    tag_template: \"%sha%\"\n    # Optional - value in seconds before a build is terminated, default is 3600 seconds\n    timeout: 3600\n    # Optional - update ghe or not, default to true\n    update_ghe: true\n    code_coverage: false\n    # Required\n    steps:\n      # to ensure a clearer docker build env\n      code-checkout:\n        type: cmd\n        command: echo checkout\n        # default machamp builder image does not work for multi arch\n        builder_image: us.gcr.io/snapchat-build-artifacts/prod/snapchat/img/ubuntu/ubuntu-23-04@sha256:bd43177a80e6ce1c3583e8ea959b88a9081c0f56b765ec9c5a157c27a637c23b\n      docker:\n        parent: code-checkout\n        type: docker # published images can be found in https://console.cloud.google.com/gcr/images/machamp-prod/global/keydb\n        dockerfile: machamp_scripts/Dockerfile\n        image_name: keydb # git commit sha will be deafult tag in the final image\n        workspace_context: ./ # This is the workspace context that your Dockerfile will use to move files around. <Root of checkout repository>/<Workspace Context>/<Dockerfile> If the workspace context is just the root of the repository, you can just use \"./\".\n"
        },
        {
          "name": "ci.yaml",
          "type": "blob",
          "size": 1.5693359375,
          "content": "# Doc: https://wiki.sc-corp.net/display/TOOL/ci.yaml+User+Guide\nversion: 1\non:\n  # https://wiki.sc-corp.net/display/TOOL/Onboard+Machamp+Build+By+ci.yaml+Configuration\n  # on pull_request is used for any pr build\n  pull_request:\n    - branches: ['!!main', '*'] # this branch pattern means any branch but not main branch will trigger this pr build\n      workflows:\n        # All builds that use machamp should use the defined `backend_workflow`\n        - workflow_type: backend_workflow\n          # references a build defined in build.yaml\n          build_name: keydb-build\n          arch_types: [\"amd64\", \"arm64\"]\n        - workflow_type: backend_workflow\n          # references a build defined in build.yaml\n          build_name: keydb-docker-build\n          arch_types: [\"amd64\", \"arm64\"]\n  # on push is used for release branch, meaning: trigger this build when there is commit pushed to this branch\n  push:\n    - branches: [main]\n      workflows:\n        - workflow_type: backend_workflow\n          build_name: keydb-build\n          arch_types: [\"amd64\", \"arm64\"]\n        - workflow_type: backend_workflow\n          # references a build defined in build.yaml\n          build_name: keydb-docker-build\n          arch_types: [\"amd64\", \"arm64\"]\n\n# below defines which branch is release branch / release tag\nmachamp:\n  releases:\n    # Note: machamp will only respect the ci.yaml file from default branch for \"release branch\" definition (most repositories using master/main as default branch)\n    # https://wiki.sc-corp.net/display/TOOL/Onboard+Machamp+Build+By+ci.yaml+Configuration\n    - branch_name: ^main$\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "keydb.conf",
          "type": "blob",
          "size": 94.69140625,
          "content": "# KeyDB configuration file example.\n#\n# Note that in order to read the configuration file, KeyDB must be\n# started with the file path as first argument:\n#\n# ./keydb-server /path/to/keydb.conf\n\n# Note on units: when memory size is needed, it is possible to specify\n# it in the usual form of 1k 5GB 4M and so forth:\n#\n# 1k => 1000 bytes\n# 1kb => 1024 bytes\n# 1m => 1000000 bytes\n# 1mb => 1024*1024 bytes\n# 1g => 1000000000 bytes\n# 1gb => 1024*1024*1024 bytes\n#\n# units are case insensitive so 1GB 1Gb 1gB are all the same.\n\n################################## INCLUDES ###################################\n\n# Include one or more other config files here.  This is useful if you\n# have a standard template that goes to all KeyDB servers but also need\n# to customize a few per-server settings.  Include files can include\n# other files, so use this wisely.\n#\n# Note that option \"include\" won't be rewritten by command \"CONFIG REWRITE\"\n# from admin or KeyDB Sentinel. Since KeyDB always uses the last processed\n# line as value of a configuration directive, you'd better put includes\n# at the beginning of this file to avoid overwriting config change at runtime.\n#\n# If instead you are interested in using includes to override configuration\n# options, it is better to use include as the last line.\n#\n# Included paths may contain wildcards. All files matching the wildcards will\n# be included in alphabetical order.\n# Note that if an include path contains a wildcards but no files match it when\n# the server is started, the include statement will be ignored and no error will\n# be emitted.  It is safe, therefore, to include wildcard files from empty\n# directories.\n#\n# include /path/to/local.conf\n# include /path/to/other.conf\n# include /path/to/fragments/*.conf\n#\n\n################################## MODULES #####################################\n\n# Load modules at startup. If the server is not able to load modules\n# it will abort. It is possible to use multiple loadmodule directives.\n#\n# loadmodule /path/to/my_module.so\n# loadmodule /path/to/other_module.so\n\n################################## NETWORK #####################################\n\n# By default, if no \"bind\" configuration directive is specified, KeyDB listens\n# for connections from all available network interfaces on the host machine.\n# It is possible to listen to just one or multiple selected interfaces using\n# the \"bind\" configuration directive, followed by one or more IP addresses.\n# Each address can be prefixed by \"-\", which means that redis will not fail to\n# start if the address is not available. Being not available only refers to\n# addresses that does not correspond to any network interfece. Addresses that\n# are already in use will always fail, and unsupported protocols will always BE\n# silently skipped.\n#\n# Examples:\n#\n# bind 192.168.1.100 10.0.0.1     # listens on two specific IPv4 addresses\n# bind 127.0.0.1 ::1              # listens on loopback IPv4 and IPv6\n# bind * -::*                     # like the default, all available interfaces\n#\n# ~~~ WARNING ~~~ If the computer running KeyDB is directly exposed to the\n# internet, binding to all the interfaces is dangerous and will expose the\n# instance to everybody on the internet. So by default we uncomment the\n# following bind directive, that will force KeyDB to listen only on the\n# IPv4 and IPv6 (if available) loopback interface addresses (this means KeyDB will only be able to\n# accept client connections from the same host that it is running on).\n#\n# IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES\n# JUST COMMENT OUT THE FOLLOWING LINE.\n#\n# You will also need to set a password unless you explicitly disable protected\n# mode.\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nbind 127.0.0.1 -::1\n\n# Protected mode is a layer of security protection, in order to avoid that\n# KeyDB instances left open on the internet are accessed and exploited.\n#\n# When protected mode is on and if:\n#\n# 1) The server is not binding explicitly to a set of addresses using the\n#    \"bind\" directive.\n# 2) No password is configured.\n#\n# The server only accepts connections from clients connecting from the\n# IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain\n# sockets.\n#\n# By default protected mode is enabled. You should disable it only if\n# you are sure you want clients from other hosts to connect to KeyDB\n# even if no authentication is configured, nor a specific set of interfaces\n# are explicitly listed using the \"bind\" directive.\nprotected-mode yes\n\n# Accept connections on the specified port, default is 6379 (IANA #815344).\n# If port 0 is specified KeyDB will not listen on a TCP socket.\nport 6379\n\n# TCP listen() backlog.\n#\n# In high requests-per-second environments you need a high backlog in order\n# to avoid slow clients connection issues. Note that the Linux kernel\n# will silently truncate it to the value of /proc/sys/net/core/somaxconn so\n# make sure to raise both the value of somaxconn and tcp_max_syn_backlog\n# in order to get the desired effect.\ntcp-backlog 511\n\n# Unix socket.\n#\n# Specify the path for the Unix socket that will be used to listen for\n# incoming connections. There is no default, so KeyDB will not listen\n# on a unix socket when not specified.\n#\n# unixsocket /tmp/keydb.sock\n# unixsocketperm 700\n\n# Close the connection after a client is idle for N seconds (0 to disable)\ntimeout 0\n\n# TCP keepalive.\n#\n# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence\n# of communication. This is useful for two reasons:\n#\n# 1) Detect dead peers.\n# 2) Force network equipment in the middle to consider the connection to be\n#    alive.\n#\n# On Linux, the specified value (in seconds) is the period used to send ACKs.\n# Note that to close the connection the double of the time is needed.\n# On other kernels the period depends on the kernel configuration.\n#\n# A reasonable value for this option is 300 seconds, which is the new\n# KeyDB default starting with KeyDB 3.2.1.\ntcp-keepalive 300\n\n################################# TLS/SSL #####################################\n\n# By default, TLS/SSL is disabled. To enable it, the \"tls-port\" configuration\n# directive can be used to define TLS-listening ports. To enable TLS on the\n# default port, use:\n#\n# port 0\n# tls-port 6379\n\n# Configure a X.509 certificate and private key to use for authenticating the\n# server to connected clients, masters or cluster peers.  These files should be\n# PEM formatted.\n#\n# tls-cert-file keydb.crt \n# tls-key-file keydb.key\n#\n# If the key file is encrypted using a passphrase, it can be included here\n# as well.\n#\n# tls-key-file-pass secret\n\n# Normally KeyDB uses the same certificate for both server functions (accepting\n# connections) and client functions (replicating from a master, establishing\n# cluster bus connections, etc.).\n#\n# Sometimes certificates are issued with attributes that designate them as\n# client-only or server-only certificates. In that case it may be desired to use\n# different certificates for incoming (server) and outgoing (client)\n# connections. To do that, use the following directives:\n#\n# tls-client-cert-file client.crt\n# tls-client-key-file client.key\n#\n# If the key file is encrypted using a passphrase, it can be included here\n# as well.\n#\n# tls-client-key-file-pass secret\n\n# Configure a DH parameters file to enable Diffie-Hellman (DH) key exchange,\n# required by older versions of OpenSSL (<3.0). Newer versions do not require\n# this configuration and recommend against it.\n#\n# tls-dh-params-file keydb.dh\n\n# Configure a CA certificate(s) bundle or directory to authenticate TLS/SSL\n# clients and peers. KeyDB requires an explicit configuration of at least one\n# of these, and will not implicitly use the system wide configuration.\n#\n# tls-ca-cert-file ca.crt\n# tls-ca-cert-dir /etc/ssl/certs\n\n# By default, clients (including replica servers) on a TLS port are required\n# to authenticate using valid client side certificates.\n#\n# If \"no\" is specified, client certificates are not required and not accepted.\n# If \"optional\" is specified, client certificates are accepted and must be\n# valid if provided, but are not required.\n#\n# tls-auth-clients no\n# tls-auth-clients optional\n\n# By default, a KeyDB replica does not attempt to establish a TLS connection\n# with its master.\n#\n# Use the following directive to enable TLS on replication links.\n#\n# tls-replication yes\n\n# By default, the KeyDB Cluster bus uses a plain TCP connection. To enable\n# TLS for the bus protocol, use the following directive:\n#\n# tls-cluster yes\n\n# Explicitly specify TLS versions to support. Allowed values are case insensitive\n# and include \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\", \"TLSv1.3\" (OpenSSL >= 1.1.1) or\n# any combination. To enable only TLSv1.2 and TLSv1.3, use:\n#\n# tls-protocols \"TLSv1.2 TLSv1.3\"\n\n# Configure allowed ciphers.  See the ciphers(1ssl) manpage for more information\n# about the syntax of this string.\n#\n# Note: this configuration applies only to <= TLSv1.2.\n#\n# tls-ciphers DEFAULT:!MEDIUM\n\n# Configure allowed TLSv1.3 ciphersuites.  See the ciphers(1ssl) manpage for more\n# information about the syntax of this string, and specifically for TLSv1.3\n# ciphersuites.\n#\n# tls-ciphersuites TLS_CHACHA20_POLY1305_SHA256\n\n# When choosing a cipher, use the server's preference instead of the client\n# preference. By default, the server follows the client's preference.\n#\n# tls-prefer-server-ciphers yes\n\n# By default, TLS session caching is enabled to allow faster and less expensive\n# reconnections by clients that support it. Use the following directive to disable\n# caching.\n#\n# tls-session-caching no\n\n# Change the default number of TLS sessions cached. A zero value sets the cache\n# to unlimited size. The default size is 20480.\n#\n# tls-session-cache-size 5000\n\n# Change the default timeout of cached TLS sessions. The default timeout is 300\n# seconds.\n#\n# tls-session-cache-timeout 60\n\n# Allow the server to monitor the filesystem and rotate out TLS certificates if \n# they change on disk, defaults to no.\n# \n# tls-rotation no\n\n# Setup a allowlist of allowed Common Names (CNs)/Subject Alternative Names (SANs)\n# that are allowed to connect to this server. This includes both normal clients as\n# well as other servers connected for replication/clustering purposes. If nothing is\n# specified, then no allowlist is used and all certificates are accepted. \n# Supports IPv4, DNS, RFC822, and URI SAN types.\n# You can put multiple names on one line as follows:\n#\n# tls-allowlist <dns1> <dns2> <dns3> ...\n# \n#\n# This configuration also allows for wildcard characters with glob style formatting\n# i.e. \"*.com\" would allow all clients to connect with a CN/SAN that ends with \".com\"\n\n################################# GENERAL #####################################\n\n# By default KeyDB does not run as a daemon. Use 'yes' if you need it.\n# Note that KeyDB will write a pid file in /var/run/keydb.pid when daemonized.\ndaemonize no\n\n# If you run KeyDB from upstart or systemd, KeyDB can interact with your\n# supervision tree. Options:\n#   supervised no      - no supervision interaction\n#   supervised upstart - signal upstart by putting KeyDB into SIGSTOP mode\n#                        requires \"expect stop\" in your upstart job config\n#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET\n#   supervised auto    - detect upstart or systemd method based on\n#                        UPSTART_JOB or NOTIFY_SOCKET environment variables\n# Note: these supervision methods only signal \"process is ready.\"\n#       They do not enable continuous pings back to your supervisor.\nsupervised no\n\n# If a pid file is specified, KeyDB writes it where specified at startup\n# and removes it at exit.\n#\n# When the server runs non daemonized, no pid file is created if none is\n# specified in the configuration. When the server is daemonized, the pid file\n# is used even if not specified, defaulting to \"/var/run/keydb.pid\".\n#\n# Creating a pid file is best effort: if KeyDB is not able to create it\n# nothing bad happens, the server will start and run normally.\npidfile /var/run/keydb_6379.pid\n\n# Specify the server verbosity level.\n# This can be one of:\n# debug (a lot of information, useful for development/testing)\n# verbose (many rarely useful info, but not a mess like the debug level)\n# notice (moderately verbose, what you want in production probably)\n# warning (only very important / critical messages are logged)\nloglevel notice\n\n# Specify the log file name. Also the empty string can be used to force\n# KeyDB to log on the standard output. Note that if you use standard\n# output for logging but daemonize, logs will be sent to /dev/null\nlogfile \"\"\n\n# To enable logging to the system logger, just set 'syslog-enabled' to yes,\n# and optionally update the other syslog parameters to suit your needs.\n# syslog-enabled no\n\n# Specify the syslog identity.\n# syslog-ident keydb\n\n# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.\n# syslog-facility local0\n\n# To disable the built in crash log, which will possibly produce cleaner core\n# dumps when they are needed, uncomment the following:\n#\n# crash-log-enabled no\n\n# To disable the fast memory check that's run as part of the crash log, which\n# will possibly let keydb terminate sooner, uncomment the following:\n#\n# crash-memcheck-enabled no\n\n# Set the number of databases. The default database is DB 0, you can select\n# a different one on a per-connection basis using SELECT <dbid> where\n# dbid is a number between 0 and 'databases'-1\ndatabases 16\n\n# By default KeyDB shows an ASCII art logo only when started to log to the\n# standard output and if the standard output is a TTY. Basically this means\n# that normally a logo is displayed only in interactive sessions.\n#\n# However it is possible to force the pre-4.0 behavior and always show a\n# ASCII art logo in startup logs by setting the following option to yes.\nalways-show-logo yes\n\n# By default, KeyDB modifies the process title (as seen in 'top' and 'ps') to\n# provide some runtime information. It is possible to disable this and leave\n# the process name as executed by setting the following to no.\nset-proc-title yes\n\n# Retrieving \"message of today\" using CURL requests.\n#enable-motd yes\n\n# When changing the process title, KeyDB uses the following template to construct\n# the modified title.\n#\n# Template variables are specified in curly brackets. The following variables are\n# supported:\n#\n# {title}           Name of process as executed if parent, or type of child process.\n# {listen-addr}     Bind address or '*' followed by TCP or TLS port listening on, or\n#                   Unix socket if only that's available.\n# {server-mode}     Special mode, i.e. \"[sentinel]\" or \"[cluster]\".\n# {port}            TCP port listening on, or 0.\n# {tls-port}        TLS port listening on, or 0.\n# {unixsocket}      Unix domain socket listening on, or \"\".\n# {config-file}     Name of configuration file used.\n#\nproc-title-template \"{title} {listen-addr} {server-mode}\"\n\n################################ SNAPSHOTTING  ################################\n#\n# Save the DB on disk:\n#\n#   save <seconds> <changes>\n#\n#   Will save the DB if both the given number of seconds and the given\n#   number of write operations against the DB occurred.\n#\n#   In the example below the behavior will be to save:\n#   after 900 sec (15 min) if at least 1 key changed\n#   after 300 sec (5 min) if at least 10 keys changed\n#   after 60 sec if at least 10000 keys changed\n#\n#   It is also possible to remove all the previously configured save\n#   points by adding a save directive with a single empty string argument\n#   like in the following example:\n#\n#   save \"\"\n\nsave 900 1\nsave 300 10\nsave 60 10000\n\n# By default KeyDB will stop accepting writes if RDB snapshots are enabled\n# (at least one save point) and the latest background save failed.\n# This will make the user aware (in a hard way) that data is not persisting\n# on disk properly, otherwise chances are that no one will notice and some\n# disaster will happen.\n#\n# If the background saving process will start working again KeyDB will\n# automatically allow writes again.\n#\n# However if you have setup your proper monitoring of the KeyDB server\n# and persistence, you may want to disable this feature so that KeyDB will\n# continue to work as usual even if there are problems with disk,\n# permissions, and so forth.\nstop-writes-on-bgsave-error yes\n\n# Compress string objects using LZF when dump .rdb databases?\n# By default compression is enabled as it's almost always a win.\n# If you want to save some CPU in the saving child set it to 'no' but\n# the dataset will likely be bigger if you have compressible values or keys.\nrdbcompression yes\n\n# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.\n# This makes the format more resistant to corruption but there is a performance\n# hit to pay (around 10%) when saving and loading RDB files, so you can disable it\n# for maximum performances.\n#\n# RDB files created with checksum disabled have a checksum of zero that will\n# tell the loading code to skip the check.\nrdbchecksum yes\n\n# Enables or disables full sanitation checks for ziplist and listpack etc when\n# loading an RDB or RESTORE payload. This reduces the chances of a assertion or\n# crash later on while processing commands.\n# Options:\n#   no         - Never perform full sanitation\n#   yes        - Always perform full sanitation\n#   clients    - Perform full sanitation only for user connections.\n#                Excludes: RDB files, RESTORE commands received from the master\n#                connection, and client connections which have the\n#                skip-sanitize-payload ACL flag.\n# The default should be 'clients' but since it currently affects cluster\n# resharding via MIGRATE, it is temporarily set to 'no' by default.\n#\n# sanitize-dump-payload no\n\n# The filename where to dump the DB\ndbfilename dump.rdb\n\n# Remove RDB files used by replication in instances without persistence\n# enabled. By default this option is disabled, however there are environments\n# where for regulations or other security concerns, RDB files persisted on\n# disk by masters in order to feed replicas, or stored on disk by replicas\n# in order to load them for the initial synchronization, should be deleted\n# ASAP. Note that this option ONLY WORKS in instances that have both AOF\n# and RDB persistence disabled, otherwise is completely ignored.\n#\n# An alternative (and sometimes better) way to obtain the same effect is\n# to use diskless replication on both master and replicas instances. However\n# in the case of replicas, diskless is not always an option.\nrdb-del-sync-files no\n\n# The working directory.\n#\n# The DB will be written inside this directory, with the filename specified\n# above using the 'dbfilename' configuration directive.\n#\n# The Append Only File will also be created inside this directory.\n#\n# Note that you must specify a directory here, not a file name.\ndir ./\n\n################################# REPLICATION #################################\n\n# Master-Replica replication. Use replicaof to make a KeyDB instance a copy of\n# another KeyDB server. A few things to understand ASAP about KeyDB replication.\n#\n#   +------------------+      +---------------+\n#   |      Master      | ---> |    Replica    |\n#   | (receive writes) |      |  (exact copy) |\n#   +------------------+      +---------------+\n#\n# 1) KeyDB replication is asynchronous, but you can configure a master to\n#    stop accepting writes if it appears to be not connected with at least\n#    a given number of replicas.\n# 2) KeyDB replicas are able to perform a partial resynchronization with the\n#    master if the replication link is lost for a relatively small amount of\n#    time. You may want to configure the replication backlog size (see the next\n#    sections of this file) with a sensible value depending on your needs.\n# 3) Replication is automatic and does not need user intervention. After a\n#    network partition replicas automatically try to reconnect to masters\n#    and resynchronize with them.\n#\n# replicaof <masterip> <masterport>\n\n# If the master is password protected (using the \"requirepass\" configuration\n# directive below) it is possible to tell the replica to authenticate before\n# starting the replication synchronization process, otherwise the master will\n# refuse the replica request.\n#\n# masterauth <master-password>\n#\n# However this is not enough if you are using KeyDB ACLs (for KeyDB version\n# 6 or greater), and the default user is not capable of running the PSYNC\n# command and/or other commands needed for replication (gathered in the\n# @replication group). In this case it's better to configure a special user to\n# use with replication, and specify the masteruser configuration as such:\n#\n# masteruser <username>\n#\n# When masteruser is specified, the replica will authenticate against its\n# master using the new AUTH form: AUTH <username> <password>.\n\n# When a replica loses its connection with the master, or when the replication\n# is still in progress, the replica can act in two different ways:\n#\n# 1) if replica-serve-stale-data is set to 'yes' (the default) the replica will\n#    still reply to client requests, possibly with out of date data, or the\n#    data set may just be empty if this is the first synchronization.\n#\n# 2) If replica-serve-stale-data is set to 'no' the replica will reply with\n#    an error \"SYNC with master in progress\" to all commands except:\n#    INFO, REPLICAOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG, SUBSCRIBE,\n#    UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, COMMAND, POST,\n#    HOST and LATENCY.\n#\nreplica-serve-stale-data yes\n\n# Active Replicas will allow read only data access while loading remote RDBs\n# provided they are permitted to serve stale data.  As an option you may also\n# permit them to accept write commands.  This is an EXPERIMENTAL feature and\n# may result in commands not being fully synchronized\n#\n# allow-write-during-load no\n\n# You can modify the number of masters necessary to form a replica quorum when\n# multi-master is enabled and replica-serve-stale-data is \"no\".  By default \n# this is set to -1 which implies the number of known masters (e.g. those\n# you added with replicaof)\n#\n# replica-quorum -1\n\n# You can configure a replica instance to accept writes or not. Writing against\n# a replica instance may be useful to store some ephemeral data (because data\n# written on a replica will be easily deleted after resync with the master) but\n# may also cause problems if clients are writing to it because of a\n# misconfiguration.\n#\n# Since KeyDB 2.6 by default replicas are read-only.\n#\n# Note: read only replicas are not designed to be exposed to untrusted clients\n# on the internet. It's just a protection layer against misuse of the instance.\n# Still a read only replica exports by default all the administrative commands\n# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve\n# security of read only replicas using 'rename-command' to shadow all the\n# administrative / dangerous commands.\nreplica-read-only yes\n\n# Replication SYNC strategy: disk or socket.\n#\n# New replicas and reconnecting replicas that are not able to continue the\n# replication process just receiving differences, need to do what is called a\n# \"full synchronization\". An RDB file is transmitted from the master to the\n# replicas.\n#\n# The transmission can happen in two different ways:\n#\n# 1) Disk-backed: The KeyDB master creates a new process that writes the RDB\n#                 file on disk. Later the file is transferred by the parent\n#                 process to the replicas incrementally.\n# 2) Diskless: The KeyDB master creates a new process that directly writes the\n#              RDB file to replica sockets, without touching the disk at all.\n#\n# With disk-backed replication, while the RDB file is generated, more replicas\n# can be queued and served with the RDB file as soon as the current child\n# producing the RDB file finishes its work. With diskless replication instead\n# once the transfer starts, new replicas arriving will be queued and a new\n# transfer will start when the current one terminates.\n#\n# When diskless replication is used, the master waits a configurable amount of\n# time (in seconds) before starting the transfer in the hope that multiple\n# replicas will arrive and the transfer can be parallelized.\n#\n# With slow disks and fast (large bandwidth) networks, diskless replication\n# works better.\nrepl-diskless-sync no\n\n# When diskless replication is enabled, it is possible to configure the delay\n# the server waits in order to spawn the child that transfers the RDB via socket\n# to the replicas.\n#\n# This is important since once the transfer starts, it is not possible to serve\n# new replicas arriving, that will be queued for the next RDB transfer, so the\n# server waits a delay in order to let more replicas arrive.\n#\n# The delay is specified in seconds, and by default is 5 seconds. To disable\n# it entirely just set it to 0 seconds and the transfer will start ASAP.\nrepl-diskless-sync-delay 5\n\n# -----------------------------------------------------------------------------\n# WARNING: RDB diskless load is experimental. Since in this setup the replica\n# does not immediately store an RDB on disk, it may cause data loss during\n# failovers. RDB diskless load + KeyDB modules not handling I/O reads may also\n# cause KeyDB to abort in case of I/O errors during the initial synchronization\n# stage with the master. Use only if your do what you are doing.\n# -----------------------------------------------------------------------------\n#\n# Replica can load the RDB it reads from the replication link directly from the\n# socket, or store the RDB to a file and read that file after it was completely\n# received from the master.\n#\n# In many cases the disk is slower than the network, and storing and loading\n# the RDB file may increase replication time (and even increase the master's\n# Copy on Write memory and salve buffers).\n# However, parsing the RDB file directly from the socket may mean that we have\n# to flush the contents of the current database before the full rdb was\n# received. For this reason we have the following options:\n#\n# \"disabled\"    - Don't use diskless load (store the rdb file to the disk first)\n# \"on-empty-db\" - Use diskless load only when it is completely safe.\n# \"swapdb\"      - Keep a copy of the current db contents in RAM while parsing\n#                 the data directly from the socket. note that this requires\n#                 sufficient memory, if you don't have it, you risk an OOM kill.\nrepl-diskless-load disabled\n\n# Replicas send PINGs to server in a predefined interval. It's possible to\n# change this interval with the repl_ping_replica_period option. The default\n# value is 10 seconds.\n#\n# repl-ping-replica-period 10\n\n# The following option sets the replication timeout for:\n#\n# 1) Bulk transfer I/O during SYNC, from the point of view of replica.\n# 2) Master timeout from the point of view of replicas (data, pings).\n# 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).\n#\n# It is important to make sure that this value is greater than the value\n# specified for repl-ping-replica-period otherwise a timeout will be detected\n# every time there is low traffic between the master and the replica. The default\n# value is 60 seconds.\n#\n# repl-timeout 60\n\n# Disable TCP_NODELAY on the replica socket after SYNC?\n#\n# If you select \"yes\" KeyDB will use a smaller number of TCP packets and\n# less bandwidth to send data to replicas. But this can add a delay for\n# the data to appear on the replica side, up to 40 milliseconds with\n# Linux kernels using a default configuration.\n#\n# If you select \"no\" the delay for data to appear on the replica side will\n# be reduced but more bandwidth will be used for replication.\n#\n# By default we optimize for low latency, but in very high traffic conditions\n# or when the master and replicas are many hops away, turning this to \"yes\" may\n# be a good idea.\nrepl-disable-tcp-nodelay no\n\n# Set the replication backlog size. The backlog is a buffer that accumulates\n# replica data when replicas are disconnected for some time, so that when a\n# replica wants to reconnect again, often a full resync is not needed, but a\n# partial resync is enough, just passing the portion of data the replica\n# missed while disconnected.\n#\n# The bigger the replication backlog, the longer the replica can endure the\n# disconnect and later be able to perform a partial resynchronization.\n#\n# The backlog is only allocated if there is at least one replica connected.\n#\n# repl-backlog-size 1mb\n\n# After a master has no connected replicas for some time, the backlog will be\n# freed. The following option configures the amount of seconds that need to\n# elapse, starting from the time the last replica disconnected, for the backlog\n# buffer to be freed.\n#\n# Note that replicas never free the backlog for timeout, since they may be\n# promoted to masters later, and should be able to correctly \"partially\n# resynchronize\" with other replicas: hence they should always accumulate backlog.\n#\n# A value of 0 means to never release the backlog.\n#\n# repl-backlog-ttl 3600\n\n# The replica priority is an integer number published by KeyDB in the INFO\n# output. It is used by KeyDB Sentinel in order to select a replica to promote\n# into a master if the master is no longer working correctly.\n#\n# A replica with a low priority number is considered better for promotion, so\n# for instance if there are three replicas with priority 10, 100, 25 Sentinel\n# will pick the one with priority 10, that is the lowest.\n#\n# However a special priority of 0 marks the replica as not able to perform the\n# role of master, so a replica with priority of 0 will never be selected by\n# KeyDB Sentinel for promotion.\n#\n# By default the priority is 100.\nreplica-priority 100\n\n# -----------------------------------------------------------------------------\n# By default, KeyDB Sentinel includes all replicas in its reports. A replica\n# can be excluded from KeyDB Sentinel's announcements. An unannounced replica\n# will be ignored by the 'sentinel replicas <master>' command and won't be\n# exposed to KeyDB Sentinel's clients.\n#\n# This option does not change the behavior of replica-priority. Even with\n# replica-announced set to 'no', the replica can be promoted to master. To\n# prevent this behavior, set replica-priority to 0.\n#\n# replica-announced yes\n\n# It is possible for a master to stop accepting writes if there are less than\n# N replicas connected, having a lag less or equal than M seconds.\n#\n# The N replicas need to be in \"online\" state.\n#\n# The lag in seconds, that must be <= the specified value, is calculated from\n# the last ping received from the replica, that is usually sent every second.\n#\n# This option does not GUARANTEE that N replicas will accept the write, but\n# will limit the window of exposure for lost writes in case not enough replicas\n# are available, to the specified number of seconds.\n#\n# For example to require at least 3 replicas with a lag <= 10 seconds use:\n#\n# min-replicas-to-write 3\n# min-replicas-max-lag 10\n#\n# Setting one or the other to 0 disables the feature.\n#\n# By default min-replicas-to-write is set to 0 (feature disabled) and\n# min-replicas-max-lag is set to 10.\n\n# A KeyDB master is able to list the address and port of the attached\n# replicas in different ways. For example the \"INFO replication\" section\n# offers this information, which is used, among other tools, by\n# KeyDB Sentinel in order to discover replica instances.\n# Another place where this info is available is in the output of the\n# \"ROLE\" command of a master.\n#\n# The listed IP address and port normally reported by a replica is\n# obtained in the following way:\n#\n#   IP: The address is auto detected by checking the peer address\n#   of the socket used by the replica to connect with the master.\n#\n#   Port: The port is communicated by the replica during the replication\n#   handshake, and is normally the port that the replica is using to\n#   listen for connections.\n#\n# However when port forwarding or Network Address Translation (NAT) is\n# used, the replica may actually be reachable via different IP and port\n# pairs. The following two options can be used by a replica in order to\n# report to its master a specific set of IP and port, so that both INFO\n# and ROLE will report those values.\n#\n# There is no need to use both the options if you need to override just\n# the port or the IP address.\n#\n# replica-announce-ip 5.5.5.5\n# replica-announce-port 1234\n\n############################### KEYS TRACKING #################################\n\n# KeyDB implements server assisted support for client side caching of values.\n# This is implemented using an invalidation table that remembers, using\n# 16 millions of slots, what clients may have certain subsets of keys. In turn\n# this is used in order to send invalidation messages to clients. Please\n# check this page to understand more about the feature:\n#\n#   https://redis.io/topics/client-side-caching\n#\n# When tracking is enabled for a client, all the read only queries are assumed\n# to be cached: this will force KeyDB to store information in the invalidation\n# table. When keys are modified, such information is flushed away, and\n# invalidation messages are sent to the clients. However if the workload is\n# heavily dominated by reads, KeyDB could use more and more memory in order\n# to track the keys fetched by many clients.\n#\n# For this reason it is possible to configure a maximum fill value for the\n# invalidation table. By default it is set to 1M of keys, and once this limit\n# is reached, KeyDB will start to evict keys in the invalidation table\n# even if they were not modified, just to reclaim memory: this will in turn\n# force the clients to invalidate the cached values. Basically the table\n# maximum size is a trade off between the memory you want to spend server\n# side to track information about who cached what, and the ability of clients\n# to retain cached objects in memory.\n#\n# If you set the value to 0, it means there are no limits, and KeyDB will\n# retain as many keys as needed in the invalidation table.\n# In the \"stats\" INFO section, you can find information about the number of\n# keys in the invalidation table at every given moment.\n#\n# Note: when key tracking is used in broadcasting mode, no memory is used\n# in the server side so this setting is useless.\n#\n# tracking-table-max-keys 1000000\n\n################################## SECURITY ###################################\n\n# Warning: since KeyDB is pretty fast, an outside user can try up to\n# 1 million passwords per second against a modern box. This means that you\n# should use very strong passwords, otherwise they will be very easy to break.\n# Note that because the password is really a shared secret between the client\n# and the server, and should not be memorized by any human, the password\n# can be easily a long string from /dev/urandom or whatever, so by using a\n# long and unguessable password no brute force attack will be possible.\n\n# KeyDB ACL users are defined in the following format:\n#\n#   user <username> ... acl rules ...\n#\n# For example:\n#\n#   user worker +@list +@connection ~jobs:* on >ffa9203c493aa99\n#\n# The special username \"default\" is used for new connections. If this user\n# has the \"nopass\" rule, then new connections will be immediately authenticated\n# as the \"default\" user without the need of any password provided via the\n# AUTH command. Otherwise if the \"default\" user is not flagged with \"nopass\"\n# the connections will start in not authenticated state, and will require\n# AUTH (or the HELLO command AUTH option) in order to be authenticated and\n# start to work.\n#\n# The ACL rules that describe what a user can do are the following:\n#\n#  on           Enable the user: it is possible to authenticate as this user.\n#  off          Disable the user: it's no longer possible to authenticate\n#               with this user, however the already authenticated connections\n#               will still work.\n#  skip-sanitize-payload    RESTORE dump-payload sanitation is skipped.\n#  sanitize-payload         RESTORE dump-payload is sanitized (default).\n#  +<command>   Allow the execution of that command\n#  -<command>   Disallow the execution of that command\n#  +@<category> Allow the execution of all the commands in such category\n#               with valid categories are like @admin, @set, @sortedset, ...\n#               and so forth, see the full list in the server.cpp file where\n#               the KeyDB command table is described and defined.\n#               The special category @all means all the commands, but currently\n#               present in the server, and that will be loaded in the future\n#               via modules.\n#  +<command>|subcommand    Allow a specific subcommand of an otherwise\n#                           disabled command. Note that this form is not\n#                           allowed as negative like -DEBUG|SEGFAULT, but\n#                           only additive starting with \"+\".\n#  allcommands  Alias for +@all. Note that it implies the ability to execute\n#               all the future commands loaded via the modules system.\n#  nocommands   Alias for -@all.\n#  ~<pattern>   Add a pattern of keys that can be mentioned as part of\n#               commands. For instance ~* allows all the keys. The pattern\n#               is a glob-style pattern like the one of KEYS.\n#               It is possible to specify multiple patterns.\n#  allkeys      Alias for ~*\n#  resetkeys    Flush the list of allowed keys patterns.\n#  &<pattern>   Add a glob-style pattern of Pub/Sub channels that can be\n#               accessed by the user. It is possible to specify multiple channel\n#               patterns.\n#  allchannels  Alias for &*\n#  resetchannels            Flush the list of allowed channel patterns.\n#  ><password>  Add this password to the list of valid password for the user.\n#               For example >mypass will add \"mypass\" to the list.\n#               This directive clears the \"nopass\" flag (see later).\n#  <<password>  Remove this password from the list of valid passwords.\n#  nopass       All the set passwords of the user are removed, and the user\n#               is flagged as requiring no password: it means that every\n#               password will work against this user. If this directive is\n#               used for the default user, every new connection will be\n#               immediately authenticated with the default user without\n#               any explicit AUTH command required. Note that the \"resetpass\"\n#               directive will clear this condition.\n#  resetpass    Flush the list of allowed passwords. Moreover removes the\n#               \"nopass\" status. After \"resetpass\" the user has no associated\n#               passwords and there is no way to authenticate without adding\n#               some password (or setting it as \"nopass\" later).\n#  reset        Performs the following actions: resetpass, resetkeys, off,\n#               -@all. The user returns to the same state it has immediately\n#               after its creation.\n#\n# ACL rules can be specified in any order: for instance you can start with\n# passwords, then flags, or key patterns. However note that the additive\n# and subtractive rules will CHANGE MEANING depending on the ordering.\n# For instance see the following example:\n#\n#   user alice on +@all -DEBUG ~* >somepassword\n#\n# This will allow \"alice\" to use all the commands with the exception of the\n# DEBUG command, since +@all added all the commands to the set of the commands\n# alice can use, and later DEBUG was removed. However if we invert the order\n# of two ACL rules the result will be different:\n#\n#   user alice on -DEBUG +@all ~* >somepassword\n#\n# Now DEBUG was removed when alice had yet no commands in the set of allowed\n# commands, later all the commands are added, so the user will be able to\n# execute everything.\n#\n# Basically ACL rules are processed left-to-right.\n#\n# The following is a list of command categories and their meanings:\n# * keyspace - Writing or reading from keys, databases, or their metadata \n#     in a type agnostic way. Includes DEL, RESTORE, DUMP, RENAME, EXISTS, DBSIZE,\n#     KEYS, EXPIRE, TTL, FLUSHALL, etc. Commands that may modify the keyspace,\n#     key or metadata will also have `write` category. Commands that only read\n#     the keyspace, key or metadata will have the `read` category.\n# * read - Reading from keys (values or metadata). Note that commands that don't\n#     interact with keys, will not have either `read` or `write`.\n# * write - Writing to keys (values or metadata)\n# * admin - Administrative commands. Normal applications will never need to use\n#     these. Includes REPLICAOF, CONFIG, DEBUG, SAVE, MONITOR, ACL, SHUTDOWN, etc.\n# * dangerous - Potentially dangerous (each should be considered with care for\n#     various reasons). This includes FLUSHALL, MIGRATE, RESTORE, SORT, KEYS,\n#     CLIENT, DEBUG, INFO, CONFIG, SAVE, REPLICAOF, etc.\n# * connection - Commands affecting the connection or other connections.\n#     This includes AUTH, SELECT, COMMAND, CLIENT, ECHO, PING, etc.\n# * blocking - Potentially blocking the connection until released by another\n#     command.\n# * fast - Fast O(1) commands. May loop on the number of arguments, but not the\n#     number of elements in the key.\n# * slow - All commands that are not Fast.\n# * pubsub - PUBLISH / SUBSCRIBE related\n# * transaction - WATCH / MULTI / EXEC related commands.\n# * scripting - Scripting related.\n# * set - Data type: sets related.\n# * sortedset - Data type: zsets related.\n# * list - Data type: lists related.\n# * hash - Data type: hashes related.\n# * string - Data type: strings related.\n# * bitmap - Data type: bitmaps related.\n# * hyperloglog - Data type: hyperloglog related.\n# * geo - Data type: geo related.\n# * stream - Data type: streams related.\n#\n# For more information about ACL configuration please refer to\n# the Redis web site at https://redis.io/topics/acl\n\n# ACL LOG\n#\n# The ACL Log tracks failed commands and authentication events associated\n# with ACLs. The ACL Log is useful to troubleshoot failed commands blocked \n# by ACLs. The ACL Log is stored in memory. You can reclaim memory with \n# ACL LOG RESET. Define the maximum entry length of the ACL Log below.\nacllog-max-len 128\n\n# Using an external ACL file\n#\n# Instead of configuring users here in this file, it is possible to use\n# a stand-alone file just listing users. The two methods cannot be mixed:\n# if you configure users here and at the same time you activate the external\n# ACL file, the server will refuse to start.\n#\n# The format of the external ACL user file is exactly the same as the\n# format that is used inside keydb.conf to describe users.\n#\n# aclfile /etc/keydb/users.acl\n\n# IMPORTANT NOTE: starting with KeyDB 6 \"requirepass\" is just a compatibility\n# layer on top of the new ACL system. The option effect will be just setting\n# the password for the default user. Clients will still authenticate using\n# AUTH <password> as usually, or more explicitly with AUTH default <password>\n# if they follow the new protocol: both will work.\n#\n# The requirepass is not compatible with aclfile option and the ACL LOAD\n# command, these will cause requirepass to be ignored.\n#\n# requirepass foobared\n\n# New users are initialized with restrictive permissions by default, via the\n# equivalent of this ACL rule 'off resetkeys -@all'. Starting with KeyDB 6.2, it\n# is possible to manage access to Pub/Sub channels with ACL rules as well. The\n# default Pub/Sub channels permission if new users is controlled by the\n# acl-pubsub-default configuration directive, which accepts one of these values:\n#\n# allchannels: grants access to all Pub/Sub channels\n# resetchannels: revokes access to all Pub/Sub channels\n#\n# To ensure backward compatibility while upgrading KeyDB 6.0, acl-pubsub-default\n# defaults to the 'allchannels' permission.\n#\n# Future compatibility note: it is very likely that in a future version of KeyDB\n# the directive's default of 'allchannels' will be changed to 'resetchannels' in\n# order to provide better out-of-the-box Pub/Sub security. Therefore, it is\n# recommended that you explicitly define Pub/Sub permissions for all users\n# rather then rely on implicit default values. Once you've set explicit\n# Pub/Sub for all existing users, you should uncomment the following line.\n#\n# acl-pubsub-default resetchannels\n\n# Command renaming (DEPRECATED).\n#\n# ------------------------------------------------------------------------\n# WARNING: avoid using this option if possible. Instead use ACLs to remove\n# commands from the default user, and put them only in some admin user you\n# create for administrative purposes.\n# ------------------------------------------------------------------------\n#\n# It is possible to change the name of dangerous commands in a shared\n# environment. For instance the CONFIG command may be renamed into something\n# hard to guess so that it will still be available for internal-use tools\n# but not available for general clients.\n#\n# Example:\n#\n# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\n#\n# It is also possible to completely kill a command by renaming it into\n# an empty string:\n#\n# rename-command CONFIG \"\"\n#\n# Please note that changing the name of commands that are logged into the\n# AOF file or transmitted to replicas may cause problems.\n\n################################### CLIENTS ####################################\n\n# Set the max number of connected clients at the same time. By default\n# this limit is set to 10000 clients, however if the KeyDB server is not\n# able to configure the process file limit to allow for the specified limit\n# the max number of allowed clients is set to the current file limit\n# minus 32 (as KeyDB reserves a few file descriptors for internal uses).\n#\n# Once the limit is reached KeyDB will close all the new connections sending\n# an error 'max number of clients reached'.\n#\n# IMPORTANT: When KeyDB Cluster is used, the max number of connections is also\n# shared with the cluster bus: every node in the cluster will use two\n# connections, one incoming and another outgoing. It is important to size the\n# limit accordingly in case of very large clusters.\n#\n# maxclients 10000\n\n############################## MEMORY MANAGEMENT ################################\n\n# Set a memory usage limit to the specified amount of bytes.\n# When the memory limit is reached KeyDB will try to remove keys\n# according to the eviction policy selected (see maxmemory-policy).\n#\n# If KeyDB can't remove keys according to the policy, or if the policy is\n# set to 'noeviction', KeyDB will start to reply with errors to commands\n# that would use more memory, like SET, LPUSH, and so on, and will continue\n# to reply to read-only commands like GET.\n#\n# This option is usually useful when using KeyDB as an LRU or LFU cache, or to\n# set a hard memory limit for an instance (using the 'noeviction' policy).\n#\n# WARNING: If you have replicas attached to an instance with maxmemory on,\n# the size of the output buffers needed to feed the replicas are subtracted\n# from the used memory count, so that network problems / resyncs will\n# not trigger a loop where keys are evicted, and in turn the output\n# buffer of replicas is full with DELs of keys evicted triggering the deletion\n# of more keys, and so forth until the database is completely emptied.\n#\n# In short... if you have replicas attached it is suggested that you set a lower\n# limit for maxmemory so that there is some free RAM on the system for replica\n# output buffers (but this is not needed if the policy is 'noeviction').\n#\n# maxmemory <bytes>\n\n# MAXMEMORY POLICY: how KeyDB will select what to remove when maxmemory\n# is reached. You can select one from the following behaviors:\n#\n# volatile-lru -> Evict using approximated LRU, only keys with an expire set.\n# allkeys-lru -> Evict any key using approximated LRU.\n# volatile-lfu -> Evict using approximated LFU, only keys with an expire set.\n# allkeys-lfu -> Evict any key using approximated LFU.\n# volatile-random -> Remove a random key having an expire set.\n# allkeys-random -> Remove a random key, any key.\n# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)\n# noeviction -> Don't evict anything, just return an error on write operations.\n#\n# LRU means Least Recently Used\n# LFU means Least Frequently Used\n#\n# Both LRU, LFU and volatile-ttl are implemented using approximated\n# randomized algorithms.\n#\n# Note: with any of the above policies, KeyDB will return an error on write\n#       operations, when there are no suitable keys for eviction.\n#\n#       At the date of writing these commands are: set setnx setex append\n#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd\n#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby\n#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby\n#       getset mset msetnx exec sort\n#\n# The default is:\n#\n# maxmemory-policy noeviction\n\n# LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated\n# algorithms (in order to save memory), so you can tune it for speed or\n# accuracy. By default KeyDB will check five keys and pick the one that was\n# used least recently, you can change the sample size using the following\n# configuration directive.\n#\n# The default of 5 produces good enough results. 10 Approximates very closely\n# true LRU but costs more CPU. 3 is faster but not very accurate.\n#\n# maxmemory-samples 5\n\n# Eviction processing is designed to function well with the default setting.\n# If there is an unusually large amount of write traffic, this value may need to\n# be increased.  Decreasing this value may reduce latency at the risk of\n# eviction processing effectiveness\n#   0 = minimum latency, 10 = default, 100 = process without regard to latency\n#\n# maxmemory-eviction-tenacity 10\n\n# Starting from KeyDB 5, by default a replica will ignore its maxmemory setting\n# (unless it is promoted to master after a failover or manually). It means\n# that the eviction of keys will be just handled by the master, sending the\n# DEL commands to the replica as keys evict in the master side.\n#\n# This behavior ensures that masters and replicas stay consistent, and is usually\n# what you want, however if your replica is writable, or you want the replica\n# to have a different memory setting, and you are sure all the writes performed\n# to the replica are idempotent, then you may change this default (but be sure\n# to understand what you are doing).\n#\n# Note that since the replica by default does not evict, it may end using more\n# memory than the one set via maxmemory (there are certain buffers that may\n# be larger on the replica, or data structures may sometimes take more memory\n# and so forth). So make sure you monitor your replicas and make sure they\n# have enough memory to never hit a real out-of-memory condition before the\n# master hits the configured maxmemory setting.\n#\n# replica-ignore-maxmemory yes\n\n# KeyDB reclaims expired keys in two ways: upon access when those keys are\n# found to be expired, and also in background, in what is called the\n# \"active expire key\". The key space is slowly and interactively scanned\n# looking for expired keys to reclaim, so that it is possible to free memory\n# of keys that are expired and will never be accessed again in a short time.\n#\n# The default effort of the expire cycle will try to avoid having more than\n# ten percent of expired keys still in memory, and will try to avoid consuming\n# more than 25% of total memory and to add latency to the system. However\n# it is possible to increase the expire \"effort\" that is normally set to\n# \"1\", to a greater value, up to the value \"10\". At its maximum value the\n# system will use more CPU, longer cycles (and technically may introduce\n# more latency), and will tolerate less already expired keys still present\n# in the system. It's a tradeoff between memory, CPU and latency.\n#\n# active-expire-effort 1\n\n# Force evictions when used system memory reaches X% of total system memory.\n# This is useful as a safeguard to prevent OOM kills (0 to disable).\n#\n# force-eviction-percent 0\n\n############################# LAZY FREEING ####################################\n\n# KeyDB has two primitives to delete keys. One is called DEL and is a blocking\n# deletion of the object. It means that the server stops processing new commands\n# in order to reclaim all the memory associated with an object in a synchronous\n# way. If the key deleted is associated with a small object, the time needed\n# in order to execute the DEL command is very small and comparable to most other\n# O(1) or O(log_N) commands in KeyDB. However if the key is associated with an\n# aggregated value containing millions of elements, the server can block for\n# a long time (even seconds) in order to complete the operation.\n#\n# For the above reasons KeyDB also offers non blocking deletion primitives\n# such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and\n# FLUSHDB commands, in order to reclaim memory in background. Those commands\n# are executed in constant time. Another thread will incrementally free the\n# object in the background as fast as possible.\n#\n# DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.\n# It's up to the design of the application to understand when it is a good\n# idea to use one or the other. However the KeyDB server sometimes has to\n# delete keys or flush the whole database as a side effect of other operations.\n# Specifically KeyDB deletes objects independently of a user call in the\n# following scenarios:\n#\n# 1) On eviction, because of the maxmemory and maxmemory policy configurations,\n#    in order to make room for new data, without going over the specified\n#    memory limit.\n# 2) Because of expire: when a key with an associated time to live (see the\n#    EXPIRE command) must be deleted from memory.\n# 3) Because of a side effect of a command that stores data on a key that may\n#    already exist. For example the RENAME command may delete the old key\n#    content when it is replaced with another one. Similarly SUNIONSTORE\n#    or SORT with STORE option may delete existing keys. The SET command\n#    itself removes any old content of the specified key in order to replace\n#    it with the specified string.\n# 4) During replication, when a replica performs a full resynchronization with\n#    its master, the content of the whole database is removed in order to\n#    load the RDB file just transferred.\n#\n# In all the above cases the default is to delete objects in a blocking way,\n# like if DEL was called. However you can configure each case specifically\n# in order to instead release memory in a non-blocking way like if UNLINK\n# was called, using the following configuration directives.\n\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nreplica-lazy-flush no\n\n# It is also possible, for the case when to replace the user code DEL calls\n# with UNLINK calls is not easy, to modify the default behavior of the DEL\n# command to act exactly like UNLINK, using the following configuration\n# directive:\n\nlazyfree-lazy-user-del no\n\n# FLUSHDB, FLUSHALL, and SCRIPT FLUSH support both asynchronous and synchronous\n# deletion, which can be controlled by passing the [SYNC|ASYNC] flags into the\n# commands. When neither flag is passed, this directive will be used to determine\n# if the data should be deleted asynchronously.\n\nlazyfree-lazy-user-flush no\n\n############################ KERNEL OOM CONTROL ##############################\n\n# On Linux, it is possible to hint the kernel OOM killer on what processes\n# should be killed first when out of memory.\n#\n# Enabling this feature makes KeyDB actively control the oom_score_adj value\n# for all its processes, depending on their role. The default scores will\n# attempt to have background child processes killed before all others, and\n# replicas killed before masters.\n#\n# KeyDB supports three options:\n#\n# no:       Don't make changes to oom-score-adj (default).\n# yes:      Alias to \"relative\" see below.\n# absolute: Values in oom-score-adj-values are written as is to the kernel.\n# relative: Values are used relative to the initial value of oom_score_adj when\n#           the server starts and are then clamped to a range of -1000 to 1000.\n#           Because typically the initial value is 0, they will often match the\n#           absolute values.\noom-score-adj no\n\n# When oom-score-adj is used, this directive controls the specific values used\n# for master, replica and background child processes. Values range -2000 to\n# 2000 (higher means more likely to be killed).\n#\n# Unprivileged processes (not root, and without CAP_SYS_RESOURCE capabilities)\n# can freely increase their value, but not decrease it below its initial\n# settings. This means that setting oom-score-adj to \"relative\" and setting the\n# oom-score-adj-values to positive values will always succeed.\noom-score-adj-values 0 200 800\n\n\n#################### KERNEL transparent hugepage CONTROL ######################\n\n# Usually the kernel Transparent Huge Pages control is set to \"madvise\" or\n# or \"never\" by default (/sys/kernel/mm/transparent_hugepage/enabled), in which\n# case this config has no effect. On systems in which it is set to \"always\",\n# KeyDB will attempt to disable it specifically for the KeyDB process in order\n# to avoid latency problems specifically with fork(2) and CoW.\n# If for some reason you prefer to keep it enabled, you can set this config to\n# \"no\" and the kernel global to \"always\".\n\ndisable-thp yes\n\n############################## APPEND ONLY MODE ###############################\n\n# By default KeyDB asynchronously dumps the dataset on disk. This mode is\n# good enough in many applications, but an issue with the KeyDB process or\n# a power outage may result into a few minutes of writes lost (depending on\n# the configured save points).\n#\n# The Append Only File is an alternative persistence mode that provides\n# much better durability. For instance using the default data fsync policy\n# (see later in the config file) KeyDB can lose just one second of writes in a\n# dramatic event like a server power outage, or a single write if something\n# wrong with the KeyDB process itself happens, but the operating system is\n# still running correctly.\n#\n# AOF and RDB persistence can be enabled at the same time without problems.\n# If the AOF is enabled on startup KeyDB will load the AOF, that is the file\n# with the better durability guarantees.\n#\n# Please check http://redis.io/topics/persistence for more information.\n\nappendonly no\n\n# The name of the append only file (default: \"appendonly.aof\")\n\nappendfilename \"appendonly.aof\"\n\n# The fsync() call tells the Operating System to actually write data on disk\n# instead of waiting for more data in the output buffer. Some OS will really flush\n# data on disk, some other OS will just try to do it ASAP.\n#\n# KeyDB supports three different modes:\n#\n# no: don't fsync, just let the OS flush the data when it wants. Faster.\n# always: fsync after every write to the append only log. Slow, Safest.\n# everysec: fsync only one time every second. Compromise.\n#\n# The default is \"everysec\", as that's usually the right compromise between\n# speed and data safety. It's up to you to understand if you can relax this to\n# \"no\" that will let the operating system flush the output buffer when\n# it wants, for better performances (but if you can live with the idea of\n# some data loss consider the default persistence mode that's snapshotting),\n# or on the contrary, use \"always\" that's very slow but a bit safer than\n# everysec.\n#\n# More details please check the following article:\n# http://antirez.com/post/redis-persistence-demystified.html\n#\n# If unsure, use \"everysec\".\n\n# appendfsync always\nappendfsync everysec\n# appendfsync no\n\n# When the AOF fsync policy is set to always or everysec, and a background\n# saving process (a background save or AOF log background rewriting) is\n# performing a lot of I/O against the disk, in some Linux configurations\n# KeyDB may block too long on the fsync() call. Note that there is no fix for\n# this currently, as even performing fsync in a different thread will block\n# our synchronous write(2) call.\n#\n# In order to mitigate this problem it's possible to use the following option\n# that will prevent fsync() from being called in the main process while a\n# BGSAVE or BGREWRITEAOF is in progress.\n#\n# This means that while another child is saving, the durability of KeyDB is\n# the same as \"appendfsync none\". In practical terms, this means that it is\n# possible to lose up to 30 seconds of log in the worst scenario (with the\n# default Linux settings).\n#\n# If you have latency problems turn this to \"yes\". Otherwise leave it as\n# \"no\" that is the safest pick from the point of view of durability.\n\nno-appendfsync-on-rewrite no\n\n# Automatic rewrite of the append only file.\n# KeyDB is able to automatically rewrite the log file implicitly calling\n# BGREWRITEAOF when the AOF log size grows by the specified percentage.\n#\n# This is how it works: KeyDB remembers the size of the AOF file after the\n# latest rewrite (if no rewrite has happened since the restart, the size of\n# the AOF at startup is used).\n#\n# This base size is compared to the current size. If the current size is\n# bigger than the specified percentage, the rewrite is triggered. Also\n# you need to specify a minimal size for the AOF file to be rewritten, this\n# is useful to avoid rewriting the AOF file even if the percentage increase\n# is reached but it is still pretty small.\n#\n# Specify a percentage of zero in order to disable the automatic AOF\n# rewrite feature.\n\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n\n# An AOF file may be found to be truncated at the end during the KeyDB\n# startup process, when the AOF data gets loaded back into memory.\n# This may happen when the system where KeyDB is running\n# crashes, especially when an ext4 filesystem is mounted without the\n# data=ordered option (however this can't happen when KeyDB itself\n# crashes or aborts but the operating system still works correctly).\n#\n# KeyDB can either exit with an error when this happens, or load as much\n# data as possible (the default now) and start if the AOF file is found\n# to be truncated at the end. The following option controls this behavior.\n#\n# If aof-load-truncated is set to yes, a truncated AOF file is loaded and\n# the KeyDB server starts emitting a log to inform the user of the event.\n# Otherwise if the option is set to no, the server aborts with an error\n# and refuses to start. When the option is set to no, the user requires\n# to fix the AOF file using the \"keydb-check-aof\" utility before to restart\n# the server.\n#\n# Note that if the AOF file will be found to be corrupted in the middle\n# the server will still exit with an error. This option only applies when\n# KeyDB will try to read more data from the AOF file but not enough bytes\n# will be found.\naof-load-truncated yes\n\n# When rewriting the AOF file, KeyDB is able to use an RDB preamble in the\n# AOF file for faster rewrites and recoveries. When this option is turned\n# on the rewritten AOF file is composed of two different stanzas:\n#\n#   [RDB file][AOF tail]\n#\n# When loading, KeyDB recognizes that the AOF file starts with the \"REDIS\"\n# string and loads the prefixed RDB file, then continues loading the AOF\n# tail.\naof-use-rdb-preamble yes\n\n################################ LUA SCRIPTING  ###############################\n\n# Max execution time of a Lua script in milliseconds.\n#\n# If the maximum execution time is reached KeyDB will log that a script is\n# still in execution after the maximum allowed time and will start to\n# reply to queries with an error.\n#\n# When a long running script exceeds the maximum execution time only the\n# SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be\n# used to stop a script that did not yet call any write commands. The second\n# is the only way to shut down the server in the case a write command was\n# already issued by the script but the user doesn't want to wait for the natural\n# termination of the script.\n#\n# Set it to 0 or a negative value for unlimited execution without warnings.\nlua-time-limit 5000\n\n################################ KEYDB CLUSTER  ###############################\n\n# Normal KeyDB instances can't be part of a KeyDB Cluster; only nodes that are\n# started as cluster nodes can. In order to start a KeyDB instance as a\n# cluster node enable the cluster support uncommenting the following:\n#\n# cluster-enabled yes\n\n# Every cluster node has a cluster configuration file. This file is not\n# intended to be edited by hand. It is created and updated by KeyDB nodes.\n# Every KeyDB Cluster node requires a different cluster configuration file.\n# Make sure that instances running in the same system do not have\n# overlapping cluster configuration file names.\n#\n# cluster-config-file nodes-6379.conf\n\n# Cluster node timeout is the amount of milliseconds a node must be unreachable\n# for it to be considered in failure state.\n# Most other internal time limits are a multiple of the node timeout.\n#\n# cluster-node-timeout 15000\n\n# A replica of a failing master will avoid to start a failover if its data\n# looks too old.\n#\n# There is no simple way for a replica to actually have an exact measure of\n# its \"data age\", so the following two checks are performed:\n#\n# 1) If there are multiple replicas able to failover, they exchange messages\n#    in order to try to give an advantage to the replica with the best\n#    replication offset (more data from the master processed).\n#    Replicas will try to get their rank by offset, and apply to the start\n#    of the failover a delay proportional to their rank.\n#\n# 2) Every single replica computes the time of the last interaction with\n#    its master. This can be the last ping or command received (if the master\n#    is still in the \"connected\" state), or the time that elapsed since the\n#    disconnection with the master (if the replication link is currently down).\n#    If the last interaction is too old, the replica will not try to failover\n#    at all.\n#\n# The point \"2\" can be tuned by user. Specifically a replica will not perform\n# the failover if, since the last interaction with the master, the time\n# elapsed is greater than:\n#\n#   (node-timeout * cluster-replica-validity-factor) + repl-ping-replica-period\n#\n# So for example if node-timeout is 30 seconds, and the cluster-replica-validity-factor\n# is 10, and assuming a default repl-ping-replica-period of 10 seconds, the\n# replica will not try to failover if it was not able to talk with the master\n# for longer than 310 seconds.\n#\n# A large cluster-replica-validity-factor may allow replicas with too old data to failover\n# a master, while a too small value may prevent the cluster from being able to\n# elect a replica at all.\n#\n# For maximum availability, it is possible to set the cluster-replica-validity-factor\n# to a value of 0, which means, that replicas will always try to failover the\n# master regardless of the last time they interacted with the master.\n# (However they'll always try to apply a delay proportional to their\n# offset rank).\n#\n# Zero is the only value able to guarantee that when all the partitions heal\n# the cluster will always be able to continue.\n#\n# cluster-replica-validity-factor 10\n\n# Cluster replicas are able to migrate to orphaned masters, that are masters\n# that are left without working replicas. This improves the cluster ability\n# to resist to failures as otherwise an orphaned master can't be failed over\n# in case of failure if it has no working replicas.\n#\n# Replicas migrate to orphaned masters only if there are still at least a\n# given number of other working replicas for their old master. This number\n# is the \"migration barrier\". A migration barrier of 1 means that a replica\n# will migrate only if there is at least 1 other working replica for its master\n# and so forth. It usually reflects the number of replicas you want for every\n# master in your cluster.\n#\n# Default is 1 (replicas migrate only if their masters remain with at least\n# one replica). To disable migration just set it to a very large value or\n# set cluster-allow-replica-migration to 'no'.\n# A value of 0 can be set but is useful only for debugging and dangerous\n# in production.\n#\n# cluster-migration-barrier 1\n\n# Turning off this option allows to use less automatic cluster configuration.\n# It both disables migration to orphaned masters and migration from masters\n# that became empty.\n#\n# Default is 'yes' (allow automatic migrations).\n#\n# cluster-allow-replica-migration yes\n\n# By default KeyDB Cluster nodes stop accepting queries if they detect there\n# is at least a hash slot uncovered (no available node is serving it).\n# This way if the cluster is partially down (for example a range of hash slots\n# are no longer covered) all the cluster becomes, eventually, unavailable.\n# It automatically returns available as soon as all the slots are covered again.\n#\n# However sometimes you want the subset of the cluster which is working,\n# to continue to accept queries for the part of the key space that is still\n# covered. In order to do so, just set the cluster-require-full-coverage\n# option to no.\n#\n# cluster-require-full-coverage yes\n\n# This option, when set to yes, prevents replicas from trying to failover its\n# master during master failures. However the master can still perform a\n# manual failover, if forced to do so.\n#\n# This is useful in different scenarios, especially in the case of multiple\n# data center operations, where we want one side to never be promoted if not\n# in the case of a total DC failure.\n#\n# cluster-replica-no-failover no\n\n# This option, when set to yes, allows nodes to serve read traffic while the\n# the cluster is in a down state, as long as it believes it owns the slots. \n#\n# This is useful for two cases.  The first case is for when an application \n# doesn't require consistency of data during node failures or network partitions.\n# One example of this is a cache, where as long as the node has the data it\n# should be able to serve it. \n#\n# The second use case is for configurations that don't meet the recommended  \n# three shards but want to enable cluster mode and scale later. A \n# master outage in a 1 or 2 shard configuration causes a read/write outage to the\n# entire cluster without this option set, with it set there is only a write outage.\n# Without a quorum of masters, slot ownership will not change automatically. \n#\n# cluster-allow-reads-when-down no\n\n# In order to setup your cluster make sure to read the documentation\n# available at http://redis.io web site.\n\n########################## CLUSTER DOCKER/NAT support  ########################\n\n# In certain deployments, KeyDB Cluster nodes address discovery fails, because\n# addresses are NAT-ted or because ports are forwarded (the typical case is\n# Docker and other containers).\n#\n# In order to make KeyDB Cluster working in such environments, a static\n# configuration where each node knows its public address is needed. The\n# following four options are used for this scope, and are:\n#\n# * cluster-announce-ip\n# * cluster-announce-port\n# * cluster-announce-tls-port\n# * cluster-announce-bus-port\n#\n# Each instructs the node about its address, client ports (for connections\n# without and with TLS), and cluster message\n# bus port. The information is then published in the header of the bus packets\n# so that other nodes will be able to correctly map the address of the node\n# publishing the information.\n#\n# If cluster-tls is set to yes and cluster-announce-tls-port is omitted or set\n# to zero, then cluster-announce-port refers to the TLS port. Note also that\n# cluster-announce-tls-port has no effect if cluster-tls is set to no.\n#\n# If the above options are not used, the normal KeyDB Cluster auto-detection\n# will be used instead.\n#\n# Note that when remapped, the bus port may not be at the fixed offset of\n# clients port + 10000, so you can specify any port and bus-port depending\n# on how they get remapped. If the bus-port is not set, a fixed offset of\n# 10000 will be used as usual.\n#\n# Example:\n#\n# cluster-announce-ip 10.1.1.5\n# cluster-announce-tls-port 6379\n# cluster-announce-port 0\n# cluster-announce-bus-port 6380\n\n################################## SLOW LOG ###################################\n\n# The KeyDB Slow Log is a system to log queries that exceeded a specified\n# execution time. The execution time does not include the I/O operations\n# like talking with the client, sending the reply and so forth,\n# but just the time needed to actually execute the command (this is the only\n# stage of command execution where the thread is blocked and can not serve\n# other requests in the meantime).\n#\n# You can configure the slow log with two parameters: one tells KeyDB\n# what is the execution time, in microseconds, to exceed in order for the\n# command to get logged, and the other parameter is the length of the\n# slow log. When a new command is logged the oldest one is removed from the\n# queue of logged commands.\n\n# The following time is expressed in microseconds, so 1000000 is equivalent\n# to one second. Note that a negative number disables the slow log, while\n# a value of zero forces the logging of every command.\nslowlog-log-slower-than 10000\n\n# There is no limit to this length. Just be aware that it will consume memory.\n# You can reclaim memory used by the slow log with SLOWLOG RESET.\nslowlog-max-len 128\n\n################################ LATENCY MONITOR ##############################\n\n# The KeyDB latency monitoring subsystem samples different operations\n# at runtime in order to collect data related to possible sources of\n# latency of a KeyDB instance.\n#\n# Via the LATENCY command this information is available to the user that can\n# print graphs and obtain reports.\n#\n# The system only logs operations that were performed in a time equal or\n# greater than the amount of milliseconds specified via the\n# latency-monitor-threshold configuration directive. When its value is set\n# to zero, the latency monitor is turned off.\n#\n# By default latency monitoring is disabled since it is mostly not needed\n# if you don't have latency issues, and collecting data has a performance\n# impact, that while very small, can be measured under big load. Latency\n# monitoring can easily be enabled at runtime using the command\n# \"CONFIG SET latency-monitor-threshold <milliseconds>\" if needed.\nlatency-monitor-threshold 0\n\n############################# EVENT NOTIFICATION ##############################\n\n# KeyDB can notify Pub/Sub clients about events happening in the key space.\n# This feature is documented at http://redis.io/topics/notifications\n#\n# For instance if keyspace events notification is enabled, and a client\n# performs a DEL operation on key \"foo\" stored in the Database 0, two\n# messages will be published via Pub/Sub:\n#\n# PUBLISH __keyspace@0__:foo del\n# PUBLISH __keyevent@0__:del foo\n#\n# It is possible to select the events that KeyDB will notify among a set\n# of classes. Every class is identified by a single character:\n#\n#  K     Keyspace events, published with __keyspace@<db>__ prefix.\n#  E     Keyevent events, published with __keyevent@<db>__ prefix.\n#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...\n#  $     String commands\n#  l     List commands\n#  s     Set commands\n#  h     Hash commands\n#  z     Sorted set commands\n#  x     Expired events (events generated every time a key expires)\n#  e     Evicted events (events generated when a key is evicted for maxmemory)\n#  t     Stream commands\n#  d     Module key type events\n#  m     Key-miss events (Note: It is not included in the 'A' class)\n#  A     Alias for g$lshzxetd, so that the \"AKE\" string means all the events\n#        (Except key-miss events which are excluded from 'A' due to their\n#         unique nature).\n#\n#  The \"notify-keyspace-events\" takes as argument a string that is composed\n#  of zero or multiple characters. The empty string means that notifications\n#  are disabled.\n#\n#  Example: to enable list and generic events, from the point of view of the\n#           event name, use:\n#\n#  notify-keyspace-events Elg\n#\n#  Example 2: to get the stream of the expired keys subscribing to channel\n#             name __keyevent@0__:expired use:\n#\n#  notify-keyspace-events Ex\n#\n#  By default all notifications are disabled because most users don't need\n#  this feature and the feature has some overhead. Note that if you don't\n#  specify at least one of K or E, no events will be delivered.\nnotify-keyspace-events \"\"\n\n############################### ADVANCED CONFIG ###############################\n\n# Hashes are encoded using a memory efficient data structure when they have a\n# small number of entries, and the biggest entry does not exceed a given\n# threshold. These thresholds can be configured using the following directives.\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\n\n# Lists are also encoded in a special way to save a lot of space.\n# The number of entries allowed per internal list node can be specified\n# as a fixed maximum size or a maximum number of elements.\n# For a fixed maximum size, use -5 through -1, meaning:\n# -5: max size: 64 Kb  <-- not recommended for normal workloads\n# -4: max size: 32 Kb  <-- not recommended\n# -3: max size: 16 Kb  <-- probably not recommended\n# -2: max size: 8 Kb   <-- good\n# -1: max size: 4 Kb   <-- good\n# Positive numbers mean store up to _exactly_ that number of elements\n# per list node.\n# The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),\n# but if your use case is unique, adjust the settings as necessary.\nlist-max-ziplist-size -2\n\n# Lists may also be compressed.\n# Compress depth is the number of quicklist ziplist nodes from *each* side of\n# the list to *exclude* from compression.  The head and tail of the list\n# are always uncompressed for fast push/pop operations.  Settings are:\n# 0: disable all list compression\n# 1: depth 1 means \"don't start compressing until after 1 node into the list,\n#    going from either the head or tail\"\n#    So: [head]->node->node->...->node->[tail]\n#    [head], [tail] will always be uncompressed; inner nodes will compress.\n# 2: [head]->[next]->node->node->...->node->[prev]->[tail]\n#    2 here means: don't compress head or head->next or tail->prev or tail,\n#    but compress all nodes between them.\n# 3: [head]->[next]->[next]->node->node->...->node->[prev]->[prev]->[tail]\n# etc.\nlist-compress-depth 0\n\n# Sets have a special encoding in just one case: when a set is composed\n# of just strings that happen to be integers in radix 10 in the range\n# of 64 bit signed integers.\n# The following configuration setting sets the limit in the size of the\n# set in order to use this special memory saving encoding.\nset-max-intset-entries 512\n\n# Similarly to hashes and lists, sorted sets are also specially encoded in\n# order to save a lot of space. This encoding is only used when the length and\n# elements of a sorted set are below the following limits:\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\n\n# HyperLogLog sparse representation bytes limit. The limit includes the\n# 16 bytes header. When an HyperLogLog using the sparse representation crosses\n# this limit, it is converted into the dense representation.\n#\n# A value greater than 16000 is totally useless, since at that point the\n# dense representation is more memory efficient.\n#\n# The suggested value is ~ 3000 in order to have the benefits of\n# the space efficient encoding without slowing down too much PFADD,\n# which is O(N) with the sparse encoding. The value can be raised to\n# ~ 10000 when CPU is not a concern, but space is, and the data set is\n# composed of many HyperLogLogs with cardinality in the 0 - 15000 range.\nhll-sparse-max-bytes 3000\n\n# Streams macro node max size / items. The stream data structure is a radix\n# tree of big nodes that encode multiple items inside. Using this configuration\n# it is possible to configure how big a single node can be in bytes, and the\n# maximum number of items it may contain before switching to a new node when\n# appending new stream entries. If any of the following settings are set to\n# zero, the limit is ignored, so for instance it is possible to set just a\n# max entires limit by setting max-bytes to 0 and max-entries to the desired\n# value.\nstream-node-max-bytes 4096\nstream-node-max-entries 100\n\n# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in\n# order to help rehashing the main KeyDB hash table (the one mapping top-level\n# keys to values). The hash table implementation KeyDB uses (see dict.c)\n# performs a lazy rehashing: the more operation you run into a hash table\n# that is rehashing, the more rehashing \"steps\" are performed, so if the\n# server is idle the rehashing is never complete and some more memory is used\n# by the hash table.\n#\n# The default is to use this millisecond 10 times every second in order to\n# actively rehash the main dictionaries, freeing memory when possible.\n#\n# If unsure:\n# use \"activerehashing no\" if you have hard latency requirements and it is\n# not a good thing in your environment that KeyDB can reply from time to time\n# to queries with 2 milliseconds delay.\n#\n# use \"activerehashing yes\" if you don't have such hard requirements but\n# want to free memory asap when possible.\nactiverehashing yes\n\n# The client output buffer limits can be used to force disconnection of clients\n# that are not reading data from the server fast enough for some reason (a\n# common reason is that a Pub/Sub client can't consume messages as fast as the\n# publisher can produce them).\n#\n# The limit can be set differently for the three different classes of clients:\n#\n# normal -> normal clients including MONITOR clients\n# replica  -> replica clients\n# pubsub -> clients subscribed to at least one pubsub channel or pattern\n#\n# The syntax of every client-output-buffer-limit directive is the following:\n#\n# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>\n#\n# A client is immediately disconnected once the hard limit is reached, or if\n# the soft limit is reached and remains reached for the specified number of\n# seconds (continuously).\n# So for instance if the hard limit is 32 megabytes and the soft limit is\n# 16 megabytes / 10 seconds, the client will get disconnected immediately\n# if the size of the output buffers reach 32 megabytes, but will also get\n# disconnected if the client reaches 16 megabytes and continuously overcomes\n# the limit for 10 seconds.\n#\n# By default normal clients are not limited because they don't receive data\n# without asking (in a push way), but just after a request, so only\n# asynchronous clients may create a scenario where data is requested faster\n# than it can read.\n#\n# Instead there is a default limit for pubsub and replica clients, since\n# subscribers and replicas receive data in a push fashion.\n#\n# Both the hard or the soft limit can be disabled by setting them to zero.\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n\n# Client query buffers accumulate new commands. They are limited to a fixed\n# amount by default in order to avoid that a protocol desynchronization (for\n# instance due to a bug in the client) will lead to unbound memory usage in\n# the query buffer. However you can configure it here if you have very special\n# needs, such us huge multi/exec requests or alike.\n#\n# client-query-buffer-limit 1gb\n\n# In the KeyDB protocol, bulk requests, that are, elements representing single\n# strings, are normally limited to 512 mb. However you can change this limit\n# here, but must be 1mb or greater\n#\n# proto-max-bulk-len 512mb\n\n# KeyDB calls an internal function to perform many background tasks, like\n# closing connections of clients in timeout, purging expired keys that are\n# never requested, and so forth.\n#\n# Not all tasks are performed with the same frequency, but KeyDB checks for\n# tasks to perform according to the specified \"hz\" value.\n#\n# By default \"hz\" is set to 10. Raising the value will use more CPU when\n# KeyDB is idle, but at the same time will make KeyDB more responsive when\n# there are many keys expiring at the same time, and timeouts may be\n# handled with more precision.\n#\n# The range is between 1 and 500, however a value over 100 is usually not\n# a good idea. Most users should use the default of 10 and raise this up to\n# 100 only in environments where very low latency is required.\nhz 10\n\n# Normally it is useful to have an HZ value which is proportional to the\n# number of clients connected. This is useful in order, for instance, to\n# avoid too many clients are processed for each background task invocation\n# in order to avoid latency spikes.\n#\n# Since the default HZ value by default is conservatively set to 10, KeyDB\n# offers, and enables by default, the ability to use an adaptive HZ value\n# which will temporarily raise when there are many connected clients.\n#\n# When dynamic HZ is enabled, the actual configured HZ will be used\n# as a baseline, but multiples of the configured HZ value will be actually\n# used as needed once more clients are connected. In this way an idle\n# instance will use very little CPU time while a busy instance will be\n# more responsive.\ndynamic-hz yes\n\n# When a child rewrites the AOF file, if the following option is enabled\n# the file will be fsync-ed every 32 MB of data generated. This is useful\n# in order to commit the file to the disk more incrementally and avoid\n# big latency spikes.\naof-rewrite-incremental-fsync yes\n\n# When KeyDB saves RDB file, if the following option is enabled\n# the file will be fsync-ed every 32 MB of data generated. This is useful\n# in order to commit the file to the disk more incrementally and avoid\n# big latency spikes.\nrdb-save-incremental-fsync yes\n\n# KeyDB LFU eviction (see maxmemory setting) can be tuned. However it is a good\n# idea to start with the default settings and only change them after investigating\n# how to improve the performances and how the keys LFU change over time, which\n# is possible to inspect via the OBJECT FREQ command.\n#\n# There are two tunable parameters in the KeyDB LFU implementation: the\n# counter logarithm factor and the counter decay time. It is important to\n# understand what the two parameters mean before changing them.\n#\n# The LFU counter is just 8 bits per key, it's maximum value is 255, so KeyDB\n# uses a probabilistic increment with logarithmic behavior. Given the value\n# of the old counter, when a key is accessed, the counter is incremented in\n# this way:\n#\n# 1. A random number R between 0 and 1 is extracted.\n# 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).\n# 3. The counter is incremented only if R < P.\n#\n# The default lfu-log-factor is 10. This is a table of how the frequency\n# counter changes with a different number of accesses with different\n# logarithmic factors:\n#\n# +--------+------------+------------+------------+------------+------------+\n# | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |\n# +--------+------------+------------+------------+------------+------------+\n# | 0      | 104        | 255        | 255        | 255        | 255        |\n# +--------+------------+------------+------------+------------+------------+\n# | 1      | 18         | 49         | 255        | 255        | 255        |\n# +--------+------------+------------+------------+------------+------------+\n# | 10     | 10         | 18         | 142        | 255        | 255        |\n# +--------+------------+------------+------------+------------+------------+\n# | 100    | 8          | 11         | 49         | 143        | 255        |\n# +--------+------------+------------+------------+------------+------------+\n#\n# NOTE: The above table was obtained by running the following commands:\n#\n#   keydb-benchmark -n 1000000 incr foo\n#   keydb-cli object freq foo\n#\n# NOTE 2: The counter initial value is 5 in order to give new objects a chance\n# to accumulate hits.\n#\n# The counter decay time is the time, in minutes, that must elapse in order\n# for the key counter to be divided by two (or decremented if it has a value\n# less <= 10).\n#\n# The default value for the lfu-decay-time is 1. A special value of 0 means to\n# decay the counter every time it happens to be scanned.\n#\n# lfu-log-factor 10\n# lfu-decay-time 1\n\n########################### ACTIVE DEFRAGMENTATION #######################\n#\n# What is active defragmentation?\n# -------------------------------\n#\n# Active (online) defragmentation allows a KeyDB server to compact the\n# spaces left between small allocations and deallocations of data in memory,\n# thus allowing to reclaim back memory.\n#\n# Fragmentation is a natural process that happens with every allocator (but\n# less so with Jemalloc, fortunately) and certain workloads. Normally a server\n# restart is needed in order to lower the fragmentation, or at least to flush\n# away all the data and create it again. However thanks to this feature\n# implemented by Oran Agra for Redis 4.0 this process can happen at runtime\n# in a \"hot\" way, while the server is running.\n#\n# Basically when the fragmentation is over a certain level (see the\n# configuration options below) KeyDB will start to create new copies of the\n# values in contiguous memory regions by exploiting certain specific Jemalloc\n# features (in order to understand if an allocation is causing fragmentation\n# and to allocate it in a better place), and at the same time, will release the\n# old copies of the data. This process, repeated incrementally for all the keys\n# will cause the fragmentation to drop back to normal values.\n#\n# Important things to understand:\n#\n# 1. This feature is disabled by default, and only works if you compiled KeyDB\n#    to use the copy of Jemalloc we ship with the source code of KeyDB.\n#    This is the default with Linux builds.\n#\n# 2. You never need to enable this feature if you don't have fragmentation\n#    issues.\n#\n# 3. Once you experience fragmentation, you can enable this feature when\n#    needed with the command \"CONFIG SET activedefrag yes\".\n#\n# The configuration parameters are able to fine tune the behavior of the\n# defragmentation process. If you are not sure about what they mean it is\n# a good idea to leave the defaults untouched.\n\n# Enabled active defragmentation\n# activedefrag no\n\n# Minimum amount of fragmentation waste to start active defrag\n# active-defrag-ignore-bytes 100mb\n\n# Minimum percentage of fragmentation to start active defrag\n# active-defrag-threshold-lower 10\n\n# Maximum percentage of fragmentation at which we use maximum effort\n# active-defrag-threshold-upper 100\n\n# Minimal effort for defrag in CPU percentage, to be used when the lower\n# threshold is reached\n# active-defrag-cycle-min 1\n\n# Maximal effort for defrag in CPU percentage, to be used when the upper\n# threshold is reached\n# active-defrag-cycle-max 25\n\n# Maximum number of set/hash/zset/list fields that will be processed from\n# the main dictionary scan\n# active-defrag-max-scan-fields 1000\n\n# Jemalloc background thread for purging will be enabled by default\njemalloc-bg-thread yes\n\n# It is possible to pin different threads and processes of KeyDB to specific\n# CPUs in your system, in order to maximize the performances of the server.\n# This is useful both in order to pin different KeyDB threads in different\n# CPUs, but also in order to make sure that multiple KeyDB instances running\n# in the same host will be pinned to different CPUs.\n#\n# Normally you can do this using the \"taskset\" command, however it is also\n# possible to this via KeyDB configuration directly, both in Linux and FreeBSD.\n#\n# You can pin the server/IO threads, bio threads, aof rewrite child process, and\n# the bgsave child process. The syntax to specify the cpu list is the same as\n# the taskset command:\n#\n# Set redis server/io threads to cpu affinity 0,2,4,6:\n# server_cpulist 0-7:2\n#\n# Set bio threads to cpu affinity 1,3:\n# bio_cpulist 1,3\n#\n# Set aof rewrite child process to cpu affinity 8,9,10,11:\n# aof_rewrite_cpulist 8-11\n#\n# Set bgsave child process to cpu affinity 1,10,11\n# bgsave_cpulist 1,10-11\n\n# In some cases KeyDB will emit warnings and even refuse to start if it detects\n# that the system is in bad state, it is possible to suppress these warnings\n# by setting the following config which takes a space delimited list of warnings\n# to suppress\n#\n# ignore-warnings ARM64-COW-BUG\n\n# The minimum number of clients on a thread before KeyDB assigns new connections to a different thread\n#  Tuning this parameter is a tradeoff between locking overhead and distributing the workload over multiple cores\n# min-clients-per-thread 50\n\n# How often to run RDB load progress callback?\n# The callback runs during key load to ping other servers and prevent timeouts.\n# It also updates load time estimates.\n# Change these values to run it more or less often. It will run when either condition is true.\n# Either when x bytes have been processed, or when x keys have been loaded.\n# loading-process-events-interval-bytes 2097152\n# loading-process-events-interval-keys 8192\n\n# Avoid forwarding RREPLAY messages to other masters?\n#   WARNING: This setting is dangerous! You must be certain all masters are connected to each\n#   other in a true mesh topology or data loss will occur!\n#   This command can be used to reduce multimaster bus traffic\n# multi-master-no-forward no\n\n# Path to directory for file backed scratchpad.  The file backed scratchpad\n# reduces memory requirements by storing rarely accessed data on disk \n# instead of RAM.  A temporary file will be created in this directory.\n# scratch-file-path /tmp/\n\n# Number of worker threads serving requests.  This number should be related to the performance\n# of your network hardware, not the number of cores on your machine.  We don't recommend going\n# above 4 at this time.  By default this is set 1.\n#\n# Note: KeyDB does not use io-threads, but io-threads is a config alias for server-threads\nserver-threads 2\n\n# Should KeyDB pin threads to CPUs? By default this is disabled, and KeyDB will not bind threads.\n# When enabled threads are bount to cores sequentially starting at core 0.\n# server-thread-affinity true\n\n# Uncomment the option below to enable Active Active support.  Note that\n# replicas will still sync in the normal way and incorrect ordering when\n# bringing up replicas can result in data loss (the first master will win).\n# active-replica yes\n\n# KeyDB will attempt to balance clients across threads evenly; However, replica clients\n# are usually much more expensive than a normal client, and so KeyDB will try to assign\n# fewer clients to threads with a replica.  The weighting factor below is intented to help tune\n# this behavior.  A replica weighting factor of 2 means we treat a replica as the equivalent\n# of two normal clients.  Adjusting this value may improve performance when replication is\n# used.  The best weighting is workload specific - e.g. read heavy workloads should set\n# this to 1.  Very write heavy workloads may benefit from higher numbers.\n#\n# By default KeyDB sets this to 2.\nreplica-weighting-factor 2\n\n# Should KeyDB make active attempts at balancing clients across threads?  This can impact\n# performance accepting new clients.  By default this is enabled.  If disabled there is still\n# a best effort from the kernel to distribute across threads with SO_REUSEPORT but it will not\n# be as fair.\n#\n# By default this is enabled\n#\nactive-client-balancing yes\n\n# Enable FLASH support (Experimental Feature)\n# storage-provider flash /path/to/flash/db\n\n# Blob support is a way to store very large objects (>200MB) on disk\n# The files are automatically cleaned up when KeyDB exits and are only\n# for temporary use.  This helps reduce memory pressure for very large\n# data items at the cost of some performance.\n#\n# By default this config is disable.  When enabled the disk associated\n# with KeyDB's working directory will be used.  If there is insufficient\n# disk space or any other I/O error KeyDB will instead use memory.\n#\n# blob-support false\n\n# Begin load shedding if we use more than X% CPU relative to the number of server threads\n# E.g. if overload-protect-percent is set to 80 and there are 8 server-threads, then the \n# actual CPU protection will be 8 * 100 * 0.80 = 640% CPU usage.\n#\n# Set to 0 to disable\n# overload-protect-percent 0\n\n# Inform KeyDB of the availability zone if running in a cloud environment.  Currently\n# this is only exposed via the info command for clients to use, but in the future we\n# we may also use this when making decisions for replication.\n#\n# availability-zone \"us-east-1a\""
        },
        {
          "name": "machamp_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "monkey",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtest",
          "type": "blob",
          "size": 0.3310546875,
          "content": "#!/bin/sh\nTCL_VERSIONS=\"8.5 8.6\"\nTCLSH=\"\"\n\nexport ASAN_OPTIONS=allocator_may_return_null=1  $ASAN_OPTIONS\n\nfor VERSION in $TCL_VERSIONS; do\n\tTCL=`which tclsh$VERSION 2>/dev/null` && TCLSH=$TCL\ndone\n\nif [ -z $TCLSH ]\nthen\n    echo \"You need tcl 8.5 or newer in order to run the KeyDB test\"\n    exit 1\nfi\n$TCLSH tests/test_helper.tcl \"${@}\"\n"
        },
        {
          "name": "runtest-cluster",
          "type": "blob",
          "size": 0.2724609375,
          "content": "#!/bin/sh\nTCL_VERSIONS=\"8.5 8.6\"\nTCLSH=\"\"\n\nfor VERSION in $TCL_VERSIONS; do\n\tTCL=`which tclsh$VERSION 2>/dev/null` && TCLSH=$TCL\ndone\n\nif [ -z $TCLSH ]\nthen\n    echo \"You need tcl 8.5 or newer in order to run the KeyDB Cluster test\"\n    exit 1\nfi\n$TCLSH tests/cluster/run.tcl $*\n"
        },
        {
          "name": "runtest-moduleapi",
          "type": "blob",
          "size": 1.1513671875,
          "content": "#!/bin/sh\nTCL_VERSIONS=\"8.5 8.6\"\nTCLSH=\"\"\n[ -z \"$MAKE\" ] && MAKE=make\n\nfor VERSION in $TCL_VERSIONS; do\n\tTCL=`which tclsh$VERSION 2>/dev/null` && TCLSH=$TCL\ndone\n\nif [ -z $TCLSH ]\nthen\n    echo \"You need tcl 8.5 or newer in order to run the KeyDB ModuleApi test\"\n    exit 1\nfi\n\n$MAKE -C tests/modules && \\\n$TCLSH tests/test_helper.tcl \\\n--single unit/moduleapi/commandfilter \\\n--single unit/moduleapi/basics \\\n--single unit/moduleapi/fork \\\n--single unit/moduleapi/testrdb \\\n--single unit/moduleapi/infotest \\\n--single unit/moduleapi/propagate \\\n--single unit/moduleapi/hooks \\\n--single unit/moduleapi/misc \\\n--single unit/moduleapi/blockonkeys \\\n--single unit/moduleapi/blockonbackground \\\n--single unit/moduleapi/scan \\\n--single unit/moduleapi/datatype \\\n--single unit/moduleapi/auth \\\n--single unit/moduleapi/keyspace_events \\\n--single unit/moduleapi/blockedclient \\\n--single unit/moduleapi/moduleloadsave \\\n--single unit/moduleapi/getkeys \\\n--single unit/moduleapi/test_lazyfree \\\n--single unit/moduleapi/defrag \\\n--single unit/moduleapi/hash \\\n--single unit/moduleapi/zset \\\n--single unit/moduleapi/stream \\\n--single unit/moduleapi/load \\\n--config server-threads 3 \\\n\"${@}\"\n"
        },
        {
          "name": "runtest-rotation",
          "type": "blob",
          "size": 0.7275390625,
          "content": "#!/bin/sh\nTCL_VERSIONS=\"8.5 8.6\"\nTCLSH=\"\"\n\nexport ASAN_OPTIONS=allocator_may_return_null=1  $ASAN_OPTIONS\n\nfor VERSION in $TCL_VERSIONS; do\n\tTCL=`which tclsh$VERSION 2>/dev/null` && TCLSH=$TCL\ndone\n\nif [ -z $TCLSH ]\nthen\n    echo \"You need tcl 8.5 or newer in order to run the KeyDB test\"\n    exit 1\nfi\nif [ ! -r tests/tls ] || [ ! -r tests/tls_1 ] || [ ! -r tests/tls_2 ];\nthen\n    echo \"Generating neccessary certificates for TLS rotation testing.\"\n    rm -rf tests/tls tests/tls_1 tests/tls_2\n\n    utils/gen-test-certs.sh\n    mv tests/tls tests/tls_1\n    utils/gen-test-certs.sh\n    mv tests/tls tests/tls_2\n    utils/gen-test-certs.sh\nfi\n$TCLSH tests/test_helper.tcl \\\n--single unit/tls-rotation \\\n--tls \\\n--config server-threads 3 \\\n\"${@}\"\n"
        },
        {
          "name": "runtest-sentinel",
          "type": "blob",
          "size": 0.2744140625,
          "content": "#!/bin/sh\nTCL_VERSIONS=\"8.5 8.6\"\nTCLSH=\"\"\n\nfor VERSION in $TCL_VERSIONS; do\n\tTCL=`which tclsh$VERSION 2>/dev/null` && TCLSH=$TCL\ndone\n\nif [ -z $TCLSH ]\nthen\n    echo \"You need tcl 8.5 or newer in order to run the KeyDB Sentinel test\"\n    exit 1\nfi\n$TCLSH tests/sentinel/run.tcl $*\n"
        },
        {
          "name": "sentinel.conf",
          "type": "blob",
          "size": 13.4453125,
          "content": "# Example sentinel.conf\n\n# *** IMPORTANT ***\n#\n# By default Sentinel will not be reachable from interfaces different than\n# localhost, either use the 'bind' directive to bind to a list of network\n# interfaces, or disable protected mode with \"protected-mode no\" by\n# adding it to this configuration file.\n#\n# Before doing that MAKE SURE the instance is protected from the outside\n# world via firewalling or other means.\n#\n# For example you may use one of the following:\n#\n# bind 127.0.0.1 192.168.1.1\n#\n# protected-mode no\n\n# port <sentinel-port>\n# The port that this sentinel instance will run on\nport 26379\n\n# By default KeyDB Sentinel does not run as a daemon. Use 'yes' if you need it.\n# Note that KeyDB will write a pid file in /var/run/keydb-sentinel.pid when\n# daemonized.\ndaemonize no\n\n# When running daemonized, KeyDB Sentinel writes a pid file in\n# /var/run/keydb-sentinel.pid by default. You can specify a custom pid file\n# location here.\npidfile /var/run/keydb-sentinel.pid\n\n# Specify the log file name. Also the empty string can be used to force\n# Sentinel to log on the standard output. Note that if you use standard\n# output for logging but daemonize, logs will be sent to /dev/null\nlogfile \"\"\n\n# sentinel announce-ip <ip>\n# sentinel announce-port <port>\n#\n# The above two configuration directives are useful in environments where,\n# because of NAT, Sentinel is reachable from outside via a non-local address.\n#\n# When announce-ip is provided, the Sentinel will claim the specified IP address\n# in HELLO messages used to gossip its presence, instead of auto-detecting the\n# local address as it usually does.\n#\n# Similarly when announce-port is provided and is valid and non-zero, Sentinel\n# will announce the specified TCP port.\n#\n# The two options don't need to be used together, if only announce-ip is\n# provided, the Sentinel will announce the specified IP and the server port\n# as specified by the \"port\" option. If only announce-port is provided, the\n# Sentinel will announce the auto-detected local IP and the specified port.\n#\n# Example:\n#\n# sentinel announce-ip 1.2.3.4\n\n# dir <working-directory>\n# Every long running process should have a well-defined working directory.\n# For KeyDB Sentinel to chdir to /tmp at startup is the simplest thing\n# for the process to don't interfere with administrative tasks such as\n# unmounting filesystems.\ndir /tmp\n\n# sentinel monitor <master-name> <ip> <keydb-port> <quorum>\n#\n# Tells Sentinel to monitor this master, and to consider it in O_DOWN\n# (Objectively Down) state only if at least <quorum> sentinels agree.\n#\n# Note that whatever is the ODOWN quorum, a Sentinel will require to\n# be elected by the majority of the known Sentinels in order to\n# start a failover, so no failover can be performed in minority.\n#\n# Replicas are auto-discovered, so you don't need to specify replicas in\n# any way. Sentinel itself will rewrite this configuration file adding\n# the replicas using additional configuration options.\n# Also note that the configuration file is rewritten when a\n# replica is promoted to master.\n#\n# Note: master name should not include special characters or spaces.\n# The valid charset is A-z 0-9 and the three characters \".-_\".\nsentinel monitor mymaster 127.0.0.1 6379 2\n\n# sentinel auth-pass <master-name> <password>\n#\n# Set the password to use to authenticate with the master and replicas.\n# Useful if there is a password set in the KeyDB instances to monitor.\n#\n# Note that the master password is also used for replicas, so it is not\n# possible to set a different password in masters and replicas instances\n# if you want to be able to monitor these instances with Sentinel.\n#\n# However you can have KeyDB instances without the authentication enabled\n# mixed with KeyDB instances requiring the authentication (as long as the\n# password set is the same for all the instances requiring the password) as\n# the AUTH command will have no effect in KeyDB instances with authentication\n# switched off.\n#\n# Example:\n#\n# sentinel auth-pass mymaster MySUPER--secret-0123passw0rd\n\n# sentinel auth-user <master-name> <username>\n#\n# This is useful in order to authenticate to instances having ACL capabilities,\n# that is, running KeyDB 6.0 or greater. When just auth-pass is provided the\n# Sentinel instance will authenticate to KeyDB using the old \"AUTH <pass>\"\n# method. When also an username is provided, it will use \"AUTH <user> <pass>\".\n# In the KeyDB servers side, the ACL to provide just minimal access to\n# Sentinel instances, should be configured along the following lines:\n#\n#     user sentinel-user >somepassword +client +subscribe +publish \\\n#                        +ping +info +multi +slaveof +config +client +exec on\n\n# sentinel down-after-milliseconds <master-name> <milliseconds>\n#\n# Number of milliseconds the master (or any attached replica or sentinel) should\n# be unreachable (as in, not acceptable reply to PING, continuously, for the\n# specified period) in order to consider it in S_DOWN state (Subjectively\n# Down).\n#\n# Default is 30 seconds.\nsentinel down-after-milliseconds mymaster 30000\n\n# IMPORTANT NOTE: starting with KeyDB 6.2 ACL capability is supported for\n# Sentinel mode, please refer to the Redis website https://redis.io/topics/acl\n# for more details.\n\n# Sentinel's ACL users are defined in the following format:\n#\n#   user <username> ... acl rules ...\n#\n# For example:\n#\n#   user worker +@admin +@connection ~* on >ffa9203c493aa99\n#\n# For more information about ACL configuration please refer to the Redis\n# website at https://redis.io/topics/acl and KeyDB server configuration \n# template keydb.conf.\n\n# ACL LOG\n#\n# The ACL Log tracks failed commands and authentication events associated\n# with ACLs. The ACL Log is useful to troubleshoot failed commands blocked \n# by ACLs. The ACL Log is stored in memory. You can reclaim memory with \n# ACL LOG RESET. Define the maximum entry length of the ACL Log below.\nacllog-max-len 128\n\n# Using an external ACL file\n#\n# Instead of configuring users here in this file, it is possible to use\n# a stand-alone file just listing users. The two methods cannot be mixed:\n# if you configure users here and at the same time you activate the external\n# ACL file, the server will refuse to start.\n#\n# The format of the external ACL user file is exactly the same as the\n# format that is used inside keydb.conf to describe users.\n#\n# aclfile /etc/keydb/sentinel-users.acl\n\n# requirepass <password>\n#\n# You can configure Sentinel itself to require a password, however when doing\n# so Sentinel will try to authenticate with the same password to all the\n# other Sentinels. So you need to configure all your Sentinels in a given\n# group with the same \"requirepass\" password. Check the following documentation\n# for more info: https://redis.io/topics/sentinel\n#\n# IMPORTANT NOTE: starting with KeyDB 6.2 \"requirepass\" is a compatibility\n# layer on top of the ACL system. The option effect will be just setting\n# the password for the default user. Clients will still authenticate using\n# AUTH <password> as usually, or more explicitly with AUTH default <password>\n# if they follow the new protocol: both will work.\n#\n# New config files are advised to use separate authentication control for\n# incoming connections (via ACL), and for outgoing connections (via\n# sentinel-user and sentinel-pass) \n#\n# The requirepass is not compatable with aclfile option and the ACL LOAD\n# command, these will cause requirepass to be ignored.\n\n# sentinel sentinel-user <username>\n#\n# You can configure Sentinel to authenticate with other Sentinels with specific\n# user name. \n\n# sentinel sentinel-pass <password>\n#\n# The password for Sentinel to authenticate with other Sentinels. If sentinel-user\n# is not configured, Sentinel will use 'default' user with sentinel-pass to authenticate.\n\n# sentinel parallel-syncs <master-name> <numreplicas>\n#\n# How many replicas we can reconfigure to point to the new replica simultaneously\n# during the failover. Use a low number if you use the replicas to serve query\n# to avoid that all the replicas will be unreachable at about the same\n# time while performing the synchronization with the master.\nsentinel parallel-syncs mymaster 1\n\n# sentinel failover-timeout <master-name> <milliseconds>\n#\n# Specifies the failover timeout in milliseconds. It is used in many ways:\n#\n# - The time needed to re-start a failover after a previous failover was\n#   already tried against the same master by a given Sentinel, is two\n#   times the failover timeout.\n#\n# - The time needed for a replica replicating to a wrong master according\n#   to a Sentinel current configuration, to be forced to replicate\n#   with the right master, is exactly the failover timeout (counting since\n#   the moment a Sentinel detected the misconfiguration).\n#\n# - The time needed to cancel a failover that is already in progress but\n#   did not produced any configuration change (SLAVEOF NO ONE yet not\n#   acknowledged by the promoted replica).\n#\n# - The maximum time a failover in progress waits for all the replicas to be\n#   reconfigured as replicas of the new master. However even after this time\n#   the replicas will be reconfigured by the Sentinels anyway, but not with\n#   the exact parallel-syncs progression as specified.\n#\n# Default is 3 minutes.\nsentinel failover-timeout mymaster 180000\n\n# SCRIPTS EXECUTION\n#\n# sentinel notification-script and sentinel reconfig-script are used in order\n# to configure scripts that are called to notify the system administrator\n# or to reconfigure clients after a failover. The scripts are executed\n# with the following rules for error handling:\n#\n# If script exits with \"1\" the execution is retried later (up to a maximum\n# number of times currently set to 10).\n#\n# If script exits with \"2\" (or an higher value) the script execution is\n# not retried.\n#\n# If script terminates because it receives a signal the behavior is the same\n# as exit code 1.\n#\n# A script has a maximum running time of 60 seconds. After this limit is\n# reached the script is terminated with a SIGKILL and the execution retried.\n\n# NOTIFICATION SCRIPT\n#\n# sentinel notification-script <master-name> <script-path>\n# \n# Call the specified notification script for any sentinel event that is\n# generated in the WARNING level (for instance -sdown, -odown, and so forth).\n# This script should notify the system administrator via email, SMS, or any\n# other messaging system, that there is something wrong with the monitored\n# KeyDB systems.\n#\n# The script is called with just two arguments: the first is the event type\n# and the second the event description.\n#\n# The script must exist and be executable in order for sentinel to start if\n# this option is provided.\n#\n# Example:\n#\n# sentinel notification-script mymaster /var/keydb/notify.sh\n\n# CLIENTS RECONFIGURATION SCRIPT\n#\n# sentinel client-reconfig-script <master-name> <script-path>\n#\n# When the master changed because of a failover a script can be called in\n# order to perform application-specific tasks to notify the clients that the\n# configuration has changed and the master is at a different address.\n# \n# The following arguments are passed to the script:\n#\n# <master-name> <role> <state> <from-ip> <from-port> <to-ip> <to-port>\n#\n# <state> is currently always \"failover\"\n# <role> is either \"leader\" or \"observer\"\n# \n# The arguments from-ip, from-port, to-ip, to-port are used to communicate\n# the old address of the master and the new address of the elected replica\n# (now a master).\n#\n# This script should be resistant to multiple invocations.\n#\n# Example:\n#\n# sentinel client-reconfig-script mymaster /var/keydb/reconfig.sh\n\n# SECURITY\n#\n# By default SENTINEL SET will not be able to change the notification-script\n# and client-reconfig-script at runtime. This avoids a trivial security issue\n# where clients can set the script to anything and trigger a failover in order\n# to get the program executed.\n\nsentinel deny-scripts-reconfig yes\n\n# KEYDB COMMANDS RENAMING\n#\n# Sometimes the KeyDB server has certain commands, that are needed for Sentinel\n# to work correctly, renamed to unguessable strings. This is often the case\n# of CONFIG and SLAVEOF in the context of providers that provide KeyDB as\n# a service, and don't want the customers to reconfigure the instances outside\n# of the administration console.\n#\n# In such case it is possible to tell Sentinel to use different command names\n# instead of the normal ones. For example if the master \"mymaster\", and the\n# associated replicas, have \"CONFIG\" all renamed to \"GUESSME\", I could use:\n#\n# SENTINEL rename-command mymaster CONFIG GUESSME\n#\n# After such configuration is set, every time Sentinel would use CONFIG it will\n# use GUESSME instead. Note that there is no actual need to respect the command\n# case, so writing \"config guessme\" is the same in the example above.\n#\n# SENTINEL SET can also be used in order to perform this configuration at runtime.\n#\n# In order to set a command back to its original name (undo the renaming), it\n# is possible to just rename a command to itself:\n#\n# SENTINEL rename-command mymaster CONFIG CONFIG\n\n# HOSTNAMES SUPPORT\n#\n# Normally Sentinel uses only IP addresses and requires SENTINEL MONITOR\n# to specify an IP address. Also, it requires the KeyDB replica-announce-ip\n# keyword to specify only IP addresses.\n#\n# You may enable hostnames support by enabling resolve-hostnames. Note\n# that you must make sure your DNS is configured properly and that DNS\n# resolution does not introduce very long delays.\n#\nSENTINEL resolve-hostnames no\n\n# When resolve-hostnames is enabled, Sentinel still uses IP addresses\n# when exposing instances to users, configuration files, etc. If you want\n# to retain the hostnames when announced, enable announce-hostnames below.\n#\nSENTINEL announce-hostnames no\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}