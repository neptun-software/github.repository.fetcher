{
  "metadata": {
    "timestamp": 1736566349640,
    "page": 105,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "webview/webview",
      "stars": 12798,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.0947265625,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  LLVM\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Right\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: false\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:   \n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:   \n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks:   Preserve\nIncludeCategories: \n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n  - Regex:           '.*'\n    Priority:        1\nIncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: false\nIndentPPDirectives: None\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Right\nReflowComments:  false\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        8\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.4892578125,
          "content": "---\n# We should aim to fix the code and re-enable most of the rules here.\n# The following were disabled due to false positives:\n# - clang-analyzer-cplusplus.NewDeleteLeaks: Finds a leak inside std::function (clang-tidy 15.0.7)\nChecks: >\n    bugprone-*,\n    cert-*,\n    clang-analyzer-*,\n    clang-diagnostic-*,\n    cppcoreguidelines-*,\n    hicpp-*,\n    misc-*,\n    modernize-*,\n    performance-*,\n    portability-*,\n    readability-*,\n    -bugprone-easily-swappable-parameters,\n    -bugprone-branch-clone,\n    -cert-env33-c,\n    -clang-analyzer-core.CallAndMessage,\n    -clang-analyzer-optin.cplusplus.UninitializedObject,\n    -clang-analyzer-security.insecureAPI.strcpy,\n    -clang-analyzer-cplusplus.NewDeleteLeaks,\n    -clang-diagnostic-unused-parameter,\n    -cppcoreguidelines-avoid-c-arrays,\n    -cppcoreguidelines-avoid-magic-numbers,\n    -cppcoreguidelines-init-variables,\n    -cppcoreguidelines-macro-usage,\n    -cppcoreguidelines-owning-memory,\n    -cppcoreguidelines-explicit-virtual-functions,\n    -cppcoreguidelines-pro-bounds-array-to-pointer-decay,\n    -cppcoreguidelines-pro-bounds-pointer-arithmetic,\n    -cppcoreguidelines-pro-type-cstyle-cast,\n    -cppcoreguidelines-pro-type-vararg,\n    -cppcoreguidelines-special-member-functions,\n    -hicpp-avoid-c-arrays,\n    -hicpp-explicit-conversions,\n    -hicpp-no-array-decay,\n    -hicpp-signed-bitwise,\n    -hicpp-special-member-functions,\n    -hicpp-use-override,\n    -hicpp-vararg,\n    -misc-definitions-in-headers,\n    -misc-include-cleaner,\n    -misc-non-private-member-variables-in-classes,\n    -modernize-avoid-c-arrays,\n    -modernize-make-unique,\n    -modernize-pass-by-value,\n    -modernize-use-nodiscard,\n    -modernize-use-override,\n    -modernize-use-trailing-return-type,\n    -modernize-use-using,\n    -performance-enum-size,\n    -performance-unnecessary-value-param,\n    -readability-convert-member-functions-to-static,\n    -readability-else-after-return,\n    -readability-qualified-auto,\n    -readability-function-cognitive-complexity,\n    -readability-implicit-bool-conversion,\n    -readability-inconsistent-declaration-parameter-name,\n    -readability-magic-numbers\nCheckOptions:\n  # We use short variables like \"w\"\n  - key:   readability-identifier-length.MinimumVariableNameLength\n    value: 1\n  # We use short parameters like \"w\"\n  - key:   readability-identifier-length.MinimumParameterNameLength\n    value: 1\n  # We have many value variables that aren't declared as const.\n  - key:   misc-const-correctness.AnalyzeValues\n    value: 0\nHeaderFilterRegex: webview\\.h$\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0234375,
          "content": "*.h linguist-language=c\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0244140625,
          "content": "# Build artifacts\n/build\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.15625,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.12.0] - 2024-09-11\n\n### Added\n\n- Use CMake `cxx_std_11` compile feature ([#1135](https://github.com/webview/webview/pull/1135))\n\n### Fixed\n\n- ODR issues caused by functions not being marked with `inline` ([#1138](https://github.com/webview/webview/pull/1138))\n\n### Breaking Changes\n\n- Synchronize CMake alias targets and export names ([#1140](https://github.com/webview/webview/pull/1140))\n\n## [0.11.0] - 2024-08-29\n\n### Added\n\n- New compile-time options for controlling `WEBVIEW_API` ([#893](https://github.com/webview/webview/pull/893))\n- Support for WebKitGTK API 4.1 ([#1022](https://github.com/webview/webview/pull/1022))\n- Support for WebKitGTK API 6.0 and GTK 4 ([#1125](https://github.com/webview/webview/pull/1125))\n- CMake build system ([#1130](https://github.com/webview/webview/pull/1130))\n\n### Changed\n\n- Disable status bar (Windows/WebView2) ([#1028](https://github.com/webview/webview/pull/1028))\n- Reworked handling and reporting of errors ([#1099](https://github.com/webview/webview/pull/1099))\n\n### Breaking Changes\n\n- `WEBVIEW_API` is now `inline` by default for C++ ([#893](https://github.com/webview/webview/pull/893))\n- Treat result of binding function as JSON, not JS ([#1002](https://github.com/webview/webview/pull/1002))\n- App lifecycle separation ([#1005](https://github.com/webview/webview/pull/1005))\n\n## [0.10.0] - 2023-09-16\n\nThis is the first release since the library rewrite by [zserge](https://github.com/zserge) ([#315](https://github.com/webview/webview/pull/315)), and is a necessary one that allows us to prepare for future changes in the library.\n\nDue to the vast amount of contributions that are in this release on top of the changes and removals introduced in the library rewrite, we've picked a few contributions aside from the rewrite that had a significant impact compared to the previous release.\n\n### Added\n\nWindows:\n\n- Microsoft Edge WebView2 backend ([#315](https://github.com/webview/webview/pull/315))\n- Custom WebView2Loader implementation ([#783](https://github.com/webview/webview/pull/783))\n- DPI scaling for Windows 10 and later ([#982](https://github.com/webview/webview/pull/982))\n- Add support for dark title bar on Windows 10 and later ([#996](https://github.com/webview/webview/pull/996))\n\n### Removed\n\n- MSHTML backend ([#315](https://github.com/webview/webview/pull/315))\n- Go binding ([#1009](https://github.com/webview/webview/pull/1009)) â€” moved to [webview/webview_go](https://github.com/webview/webview_go)\n\n## [0.1.1] - 2020-01-21\n\n## [0.1.0] - 2018-05-09\n\n[unreleased]: https://github.com/webview/webview/compare/0.12.0...HEAD\n[0.12.0]:     https://github.com/webview/webview/compare/0.11.0...0.12.0\n[0.11.0]:     https://github.com/webview/webview/compare/0.10.0...0.11.0\n[0.10.0]:     https://github.com/webview/webview/compare/0.1.1...0.10.0\n[0.1.1]:      https://github.com/webview/webview/compare/0.1.0...0.1.1\n[0.1.0]:      https://github.com/webview/webview/releases/tag/0.1.0\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.841796875,
          "content": "cmake_minimum_required(VERSION 3.16)\n\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/internal.cmake\")\nwebview_extract_version()\n\nproject(\n    webview\n    VERSION \"${WEBVIEW_VERSION_NUMBER}\"\n    DESCRIPTION \"A tiny cross-platform webview library for C/C++ to build modern cross-platform GUIs.\"\n    HOMEPAGE_URL https://github.com/webview/webview)\n\nwebview_init()\n\nif(WEBVIEW_BUILD)\n    add_subdirectory(compatibility)\n\n    if(WEBVIEW_BUILD_TESTS)\n        include(CTest)\n        add_subdirectory(test_driver)\n    endif()\n\n    add_subdirectory(core)\n\n    if(WEBVIEW_BUILD_EXAMPLES)\n        add_subdirectory(examples)\n    endif()\n\n    if(WEBVIEW_BUILD_DOCS)\n        add_subdirectory(docs)\n    endif()\n\n    if(WEBVIEW_INSTALL_TARGETS)\n        webview_install_targets()\n    endif()\n\n    if(WEBVIEW_ENABLE_PACKAGING)\n        add_subdirectory(packaging)\n    endif()\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.625,
          "content": "# Contributing\n\nContributing to the webview project is always welcome! We are especially in need of MacOs developers. Active maintainers who review pull requests and triage issues are listed here.\n- @justjosias\n- @dandeto\n- @nicklasfrahm\n\n### Guidelines for Contributing Examples\n\nAll examples will be held to the same standard as the main codebase.\n\nAdditionally, examples should...\n- Be cross platform except under certain circumstances\n- Highlight a subset of the webview library's API\n- Be well documented\n- Have a simple goal in mind and lack large dependencies\n- Link to external libraries instead of copying them to the webview repo\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0859375,
          "content": "MIT License\n\nCopyright (c) 2017 Serge Zaitsev\nCopyright (c) 2022 Steffen AndrÃ© Langnes\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MIGRATION.md",
          "type": "blob",
          "size": 2.9638671875,
          "content": "# Migration\n\n## v0.11.0 to v0.12.0\n\nSome CMake targets names have been replaced in order to match the exported/installed target names:\n\nOld target         | Replacement\n----------         | -----------\n`webview::headers` | `webview::core`\n`webview::shared`  | `webview::core_shared`\n`webview::static`  | `webview::core_static`\n\n## v0.10.0 to v0.11.0\n\n### New Defaults for `WEBVIEW_API`\n\nLanguage | Old default | New default\n-------- | ----------- | -----------\nC++      | `extern`    | `inline`\nC        | `extern`    | `extern`\n\nIf you relied on the old default being `extern` when using a C++ compiler then you should either define `WEBVIEW_STATIC` or `WEBVIEW_API=extern`.\n\n### Behavior of `webview_return()`\n\n`webview_return()` no longer evaluates the passed-in result as JavaScript but instead parses it as JSON. The new behavior is consistent with the documented behavior while the old behavior wasn't. Use `webview_eval()` if you need to evaluate JavaScript code.\n\n### Application Lifecycle\n\nIf you relied on the library's management of the application lifecycle when passing in an existing window to the library then you should now either manage the lifecycle by yourself or let the library create the window.\n\nSpecific things that are now only done by the library when the window is created for you:\n\nPlatform | What\n-------- | ----\nLinux    | Call to `gtk_init_check()`.\nWindows  | COM initialization and DPI awareness enablement.\n\n## v0.1.1 to v0.10.0\n\n1. Use opaque `webview_t` type instead of `struct webview`. Size, title and URL are controlled via API setter functions. Invoke callback has been replaced with `webview_bind()` and `webview_return()` to make native function bindings inter-operate with JS.\n2. If you have been using simplified `webview()` API to only open a single URL\n   in a webview window - this function has been removed. You now have to create\n   a new webview instance, configure and run it explicitly.\n3. `webview_init()` is replaced by `webview_create()` which creates a new webview instance.\n4. `webview_exit()` has been replaced with more meaningful `webview_destroy()`.\n5. Main UI loop with `webview_loop()` inside has been replaced with `webview_run()` runs infinitely until the webview window is closed.\n6. `webview_terminate()` remains the same.\n7. `webview_dispatch()` remains the same.\n8. `webview_set_title()` remains the same.\n9. `webview_set_color()` has been removed. Use `webview_get_window` and native\n   window APIs to control colors, transparency and other native window\n   properties. At some point these APIs might be brought back.\n10. `webview_set_fullscreen()` has been removed, see above.\n11. `webview_dialog()` has been removed. But I'd like to see it added back as a separate independent module or library.\n12. `webview_eval()` remains the same.\n13. `webview_inject_css()` has been removed. Use `webview_eval()` to create style tag manually.\n14. `webview_debug()` has been removed. Use whatever fits best to your programming language and environment to debug your GUI apps.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.57421875,
          "content": "# webview\n\n<a href=\"https://discord.gg/24KMecn\" title=\"Join the chat at Discord\"><img src=\"https://assets-global.website-files.com/6257adef93867e50d84d30e2/636e0b5061df29d55a92d945_full_logo_blurple_RGB.svg\" alt=\"Discord\" height=\"20\" /></a>\n[![Build Status](https://img.shields.io/github/actions/workflow/status/webview/webview/ci.yaml?branch=master)](https://github.com/webview/webview)\n\nA tiny cross-platform webview library for C/C++ to build modern cross-platform GUIs.\n\nThe goal of the project is to create a common HTML5 UI abstraction layer for the most widely used platforms.\n\nIt supports two-way JavaScript bindings (to call JavaScript from C/C++ and to call C/C++ from JavaScript).\n\n> [!NOTE]\n> Language binding for Go [has moved][webview_go]. Versions <= 0.1.1 are available in *this* repository.\n\n## Platform Support\n\nPlatform | Technologies\n-------- | ------------\nLinux    | [GTK][gtk], [WebKitGTK][webkitgtk]\nmacOS    | Cocoa, [WebKit][webkit]\nWindows  | [Windows API][win32-api], [WebView2][ms-webview2]\n\n## Documentation\n\nThe most up-to-date documentation is right in the source code. Improving the documentation is a continuous effort and you are more than welcome to contribute.\n\n## Prerequisites\n\nYour compiler must support minimum C++11 except for platforms that require a more modern version.\n\nThis project uses CMake and Ninja, and while recommended for your convenience, these tools aren't required for using the library.\n\n### Linux and BSD\n\nThe [GTK][gtk] and [WebKitGTK][webkitgtk] libraries are required for development and distribution. You need to check your package repositories regarding which packages to install.\n\n#### Packages\n\n* Debian:\n  * WebKitGTK 6.0, GTK 4:\n    * Development: `apt install libgtk-4-dev libwebkitgtk-6.0-dev`\n    * Production: `apt install libgtk-4-1 libwebkitgtk-6.0-4`\n  * WebKitGTK 4.1, GTK 3, libsoup 3:\n    * Development: `apt install libgtk-3-dev libwebkit2gtk-4.1-dev`\n    * Production: `apt install libgtk-3-0 libwebkit2gtk-4.1-0`\n  * WebKitGTK 4.0, GTK 3, libsoup 2:\n    * Development: `apt install libgtk-3-dev libwebkit2gtk-4.0-dev`\n    * Production: `apt install libgtk-3-0 libwebkit2gtk-4.0-37`\n* Fedora:\n  * WebKitGTK 6.0, GTK 4:\n    * Development: `dnf install gtk4-devel webkitgtk6.0-devel`\n    * Production: `dnf install gtk4 webkitgtk6.0`\n  * WebKitGTK 4.1, GTK 3, libsoup 3:\n    * Development: `dnf install gtk3-devel webkit2gtk4.1-devel`\n    * Production: `dnf install gtk3 webkit2gtk4.1`\n  * WebKitGTK 4.0, GTK 3, libsoup 2:\n    * Development: `dnf install gtk3-devel webkit2gtk4.0-devel`\n    * Production: `dnf install gtk3 webkit2gtk4.0`\n* FreeBSD:\n  * GTK 4: `pkg install webkit2-gtk4`\n  * GTK 3: `pkg install webkit2-gtk3`\n\n#### Library Dependencies\n\n* Linux:\n  * Use `pkg-config` with `--cflags` and `--libs` to get the compiler/linker options for one of these sets of modules:\n    * `gtk4 webkitgtk-6.0`\n    * `gtk+-3.0 webkit2gtk-4.1`\n    * `gtk+-3.0 webkit2gtk-4.0`\n  * Link libraries: `dl`\n* macOS:\n  * Link frameworks: `WebKit`\n  * Link libraries: `dl`\n* Windows:\n  * [WebView2 from NuGet](https://www.nuget.org/packages/Microsoft.Web.WebView2).\n  * Windows libraries: `advapi32 ole32 shell32 shlwapi user32 version`\n\n#### BSD\n\n* Execution on BSD-based systems may require adding the `wxallowed` option (see [mount(8)](https://man.openbsd.org/mount.8))  to your fstab to bypass [W^X](https://en.wikipedia.org/wiki/W%5EX \"write xor execute\") memory protection for your executable. Please see if it works without disabling this security feature first.\n\n### Windows\n\nYour compiler must support C++14 and we recommend to pair it with an up-to-date Windows 10 SDK.\n\nFor Visual C++ we recommend Visual Studio 2022 or later. There are some [requirements when using MinGW-w64](#mingw-w64-requirements).\n\nDevelopers and end-users must have the [WebView2 runtime][ms-webview2-rt] installed on their system for any version of Windows before Windows 11.\n\n## Getting Started\n\nIf you are a developer of this project then please go to the [development section](#development).\n\nYou will have a working app, but you are encouraged to explore the [available examples][examples].\n\nCreate the following files in a new directory:\n\n`.gitignore`:\n```\n# Build artifacts\n/build\n```\n\n### C++ Example\n\n`CMakeLists.txt`:\n```cmake\ncmake_minimum_required(VERSION 3.16)\nproject(example LANGUAGES CXX)\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib\")\n\ninclude(FetchContent)\n\nFetchContent_Declare(\n    webview\n    GIT_REPOSITORY https://github.com/webview/webview\n    GIT_TAG 0.12.0)\nFetchContent_MakeAvailable(webview)\n\nadd_executable(example WIN32)\ntarget_sources(example PRIVATE main.cc)\ntarget_link_libraries(example PRIVATE webview::core)\n```\n\n`main.cc`:\n```cpp\n#include \"webview/webview.h\"\n\n#include <iostream>\n\n#ifdef _WIN32\nint WINAPI WinMain(HINSTANCE /*hInst*/, HINSTANCE /*hPrevInst*/,\n                   LPSTR /*lpCmdLine*/, int /*nCmdShow*/) {\n#else\nint main() {\n#endif\n  try {\n    webview::webview w(false, nullptr);\n    w.set_title(\"Basic Example\");\n    w.set_size(480, 320, WEBVIEW_HINT_NONE);\n    w.set_html(\"Thanks for using webview!\");\n    w.run();\n  } catch (const webview::exception &e) {\n    std::cerr << e.what() << '\\n';\n    return 1;\n  }\n\n  return 0;\n}\n```\n\n### C Example\n\n`CMakeLists.txt`:\n```cmake\ncmake_minimum_required(VERSION 3.16)\nproject(example LANGUAGES C CXX)\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib\")\n\ninclude(FetchContent)\n\nFetchContent_Declare(\n    webview\n    GIT_REPOSITORY https://github.com/webview/webview\n    GIT_TAG 0.12.0)\nFetchContent_MakeAvailable(webview)\n\nadd_executable(example WIN32)\ntarget_sources(example PRIVATE main.c)\ntarget_link_libraries(example PRIVATE webview::core_static)\n```\n\n`main.c`:\n```cpp\n#include \"webview/webview.h\"\n#include <stddef.h>\n\n#ifdef _WIN32\n#include <windows.h>\n#endif\n\n#ifdef _WIN32\nint WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPSTR lpCmdLine,\n                   int nCmdShow) {\n  (void)hInst;\n  (void)hPrevInst;\n  (void)lpCmdLine;\n  (void)nCmdShow;\n#else\nint main(void) {\n#endif\n  webview_t w = webview_create(0, NULL);\n  webview_set_title(w, \"Basic Example\");\n  webview_set_size(w, 480, 320, WEBVIEW_HINT_NONE);\n  webview_set_html(w, \"Thanks for using webview!\");\n  webview_run(w);\n  webview_destroy(w);\n  return 0;\n}\n```\n\n### Building the Example\n\nBuild the project:\n\n```sh\ncmake -G Ninja -B build -S . -D CMAKE_BUILD_TYPE=Release\ncmake --build build\n```\n\nFind the executable in the `build/bin` directory.\n\n### Building Amalgamated Library\n\nAn amalgamated library can be built when building the project using CMake, or the `amalgamate.py` script can be invoked directly.\n\nThe latter is described below.\n\n```sh\npython3 scripts/amalgamate.py --output webview_amalgamation.h core/include/webview/webview.h\n```\n\nSee `python3 scripts/amalgamate.py --help` for script usage.\n\n### Non-CMake Usage\n\nHere's an example for invoking GCC/Clang-like compilers directly. Use the `main.cc` file from the previous example.\n\nPlace either the amalgamated `webview.h` header or all of the individual files into `libs/webview`, and `WebView2.h` from [MS WebView2][ms-webview2-sdk] into `libs`.\n\nBuild the project on your chosen platform.\n\n<details>\n  <summary>macOS</summary>\n  <pre><code>c++ main.cc -O2 --std=c++11 -Ilibs -framework WebKit -ldl -o example</code></pre>\n</details>\n\n<details>\n  <summary>Linux</summary>\n  <pre><code>c++ main.cc -O2 --std=c++11 -Ilibs $(pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.1) -ldl -o example</code></pre>\n</details>\n\n<details>\n  <summary>Windows</summary>\n  <pre><code>c++ main.cc -O2 --std=c++14 -static -mwindows -Ilibs -ladvapi32 -lole32 -lshell32 -lshlwapi -luser32 -lversion -o example</code></pre>\n</details>\n\n## Customization\n\n### CMake Targets\n\nThe following CMake targets are available:\n\nName                   | Description\n----                   | -----------\n`webview::core`        | Headers for C++.\n`webview::core_shared` | Shared library for C.\n`webview::core_static` | Static library for C.\n\nSpecial targets for on-demand checks and related tasks:\n\nName                   | Description\n----                   | -----------\n`webview_format_check` | Check files with clang-format.\n`webview_reformat`     | Reformat files with clang-format.\n\n### CMake Options\n\nThe following boolean options can be used when building the webview project standalone or when building it as part of your project (e.g. with FetchContent).\n\nOption                            | Description\n------                            | -----------\n`WEBVIEW_BUILD`                   | Enable building\n`WEBVIEW_BUILD_AMALGAMATION`      | Build amalgamated library\n`WEBVIEW_BUILD_DOCS`              | Build documentation\n`WEBVIEW_BUILD_EXAMPLES`          | Build examples\n`WEBVIEW_BUILD_SHARED_LIBRARY`    | Build shared libraries\n`WEBVIEW_BUILD_STATIC_LIBRARY`    | Build static libraries\n`WEBVIEW_BUILD_TESTS`             | Build tests\n`WEBVIEW_ENABLE_CHECKS`           | Enable checks\n`WEBVIEW_ENABLE_CLANG_FORMAT`     | Enable clang-format\n`WEBVIEW_ENABLE_CLANG_TIDY`       | Enable clang-tidy\n`WEBVIEW_ENABLE_PACKAGING`        | Enable packaging\n`WEBVIEW_INSTALL_DOCS`            | Install documentation\n`WEBVIEW_INSTALL_TARGETS`         | Install targets\n`WEBVIEW_IS_CI`                   | Initialized by the `CI` environment variable\n`WEBVIEW_PACKAGE_AMALGAMATION`    | Package amalgamated library\n`WEBVIEW_PACKAGE_DOCS`            | Package documentation\n`WEBVIEW_PACKAGE_HEADERS`         | Package headers\n`WEBVIEW_PACKAGE_LIB`             | Package compiled libraries\n`WEBVIEW_STRICT_CHECKS`           | Make checks strict\n`WEBVIEW_STRICT_CLANG_FORMAT`     | Make clang-format check strict\n`WEBVIEW_STRICT_CLANG_TIDY`       | Make clang-tidy check strict\n`WEBVIEW_USE_COMPAT_MINGW`        | Use compatibility helper for MinGW\n`WEBVIEW_USE_STATIC_MSVC_RUNTIME` | Use static runtime library (MSVC)\n\n> [!NOTE]\n> Checks are *enabled* by default, but aren't *enforced* by default for local development (controlled by the `WEBVIEW_IS_CI` option).\n\nNon-boolean options:\n\nOption                            | Description\n------                            | -----------\n`WEBVIEW_CLANG_FORMAT_EXE`        | Path of the `clang-format` executable.\n`WEBVIEW_CLANG_TIDY_EXE`          | Path of the `clang-tidy` executable.\n\n### Package Consumer Options\n\nThese options can be used when when using the webview CMake package.\n\n#### Linux-specific Options\n\nOption                          | Description\n------                          | -----------\n`WEBVIEW_WEBKITGTK_API`         | WebKitGTK API to interface with, e.g. `6.0`, `4.1` (recommended) or `4.0`. This will also automatically decide the GTK version. Uses the latest recommended API by default if available, or the latest known and available API. Note that there can be major differences between API versions that can affect feature availability. See webview API documentation for details on feature availability.\n\n#### Windows-specific Options\n\nOption                          | Description\n------                          | -----------\n`WEBVIEW_MSWEBVIEW2_VERSION`    | MS WebView2 version, e.g. `1.0.1150.38`.\n`WEBVIEW_USE_BUILTIN_MSWEBVIEW2`| Use built-in MS WebView2.\n\n### Compile-time Options\n\nThese options can be specified as preprocessor macros to modify the build, but are not needed when using CMake.\n\n#### C API Linkage\n\nName                   | Description\n----                   | -----------\n`WEBVIEW_API`          | Controls C API linkage, symbol visibility and whether it's a shared library. By default this is `inline` for C++ and `extern` for C.\n`WEBVIEW_BUILD_SHARED` | Modifies `WEBVIEW_API` for building a shared library.\n`WEBVIEW_SHARED`       | Modifies `WEBVIEW_API` for using a shared library.\n`WEBVIEW_STATIC`       | Modifies `WEBVIEW_API` for building or using a static library.\n\n#### Backend Selection\n\nName                   | Description\n----                   | -----------\n`WEBVIEW_GTK`          | Compile the GTK/WebKitGTK backend.\n`WEBVIEW_COCOA`        | Compile the Cocoa/WebKit backend.\n`WEBVIEW_EDGE`         | Compile the Win32/WebView2 backend.\n\n#### Windows-specific Options\n\nOption                            | Description\n------                            | -----------\n`WEBVIEW_MSWEBVIEW2_BUILTIN_IMPL` | Enables (`1`) or disables (`0`) the built-in implementation of the WebView2 loader. Enabling this avoids the need for `WebView2Loader.dll` but if the DLL is present then the DLL takes priority. This option is enabled by default.\n`WEBVIEW_MSWEBVIEW2_EXPLICIT_LINK`| Enables (`1`) or disables (`0`) explicit linking of `WebView2Loader.dll`. Enabling this avoids the need for import libraries (`*.lib`). This option is enabled by default if `WEBVIEW_MSWEBVIEW2_BUILTIN_IMPL` is enabled.\n\n## MinGW-w64 Requirements\n\nIn order to build this library using MinGW-w64 on Windows then it must support C++14 and have an up-to-date Windows SDK.\n\nDistributions that are known to be compatible:\n\n* [LLVM MinGW](https://github.com/mstorsjo/llvm-mingw)\n* [MSYS2](https://www.msys2.org/)\n* [WinLibs](https://winlibs.com/)\n\n## MS WebView2 Loader\n\nLinking the WebView2 loader part of the Microsoft WebView2 SDK is not a hard requirement when using our webview library, and neither is distributing `WebView2Loader.dll` with your app.\n\nIf, however, `WebView2Loader.dll` is loadable at runtime, e.g. from the executable's directory, then it will be used; otherwise our minimalistic implementation will be used instead.\n\nShould you wish to use the official loader then remember to distribute it along with your app unless you link it statically. Linking it statically is possible with Visual C++ but not MinGW-w64.\n\nHere are some of the noteworthy ways our implementation of the loader differs from the official implementation:\n\n* Does not support configuring WebView2 using environment variables such as `WEBVIEW2_BROWSER_EXECUTABLE_FOLDER`.\n* Microsoft Edge Insider (preview) channels are not supported.\n\n[Customization options](#Customization) can be used to change how the library integrates the WebView2 loader.\n\n## Development\n\nThis project uses the CMake build system.\n\n### Development Dependencies\n\nIn addition to the dependencies mentioned earlier in this document for developing *with* the webview library, the following are used during development *of* the webview library.\n\n* Amalgamation:\n  * Python >= 3.9\n* Checks:\n  * `clang-format`\n  * `clang-tidy`\n* Documentation:\n  * Doxygen\n  * Graphvis\n\n### Building\n\n```sh\ncmake -G \"Ninja Multi-Config\" -B build -S .\ncmake --build build --config CONFIG\n```\n\nReplace `CONFIG` with one of `Debug`, `Release`, or `Profile`. Use `Profile` to enable code coverage (GCC/Clang).\n\nRun tests:\n\n```sh\nctest --test-dir build --build-config CONFIG\n```\n\nGenerate test coverage report:\n\n```sh\ngcovr\n```\n\nFind the coverage report in `build/coverage`.\n\n### Packaging\n\nRun this after building the `Debug` and `Release` configs of the project:\n\n```sh\ncd build\ncpack -G External -C \"Debug;Release\" --config CPackConfig.cmake\n```\n\n### Cross-compilation\n\nSee CMake toolchain files in the `cmake/toolchains` directory.\n\nFor example, this targets Windows x64 on Linux with POSIX threads:\n\n```sh\ncmake -G \"Ninja Multi-Config\" -B build -S . -D CMAKE_TOOLCHAIN_FILE=cmake/toolchains/x86_64-w64-mingw32.cmake -D WEBVIEW_TOOLCHAIN_EXECUTABLE_SUFFIX=-posix\ncmake --build build --config CONFIG\n```\n\n## Limitations\n\n### Browser Features\n\nSince a browser engine is not a full web browser it may not support every feature you may expect from a browser. If you find that a feature does not work as expected then please consult with the browser engine's documentation and [open an issue][issues-new] if you think that the library should support it.\n\nFor example, the library does not attempt to support user interaction features like `alert()`, `confirm()` and `prompt()` and other non-essential features like `console.log()`.\n\n## Bindings\n\nLanguage    | Project\n----------  | -------\nAda         | [thechampagne/webview-ada](https://github.com/thechampagne/webview-ada)\nBun         | [tr1ckydev/webview-bun](https://github.com/tr1ckydev/webview-bun)\nC#          | [webview/webview_csharp](https://github.com/webview/webview_csharp)\nC3          | [thechampagne/webview-c3](https://github.com/thechampagne/webview-c3)\nCrystal     | [naqvis/webview](https://github.com/naqvis/webview)\nD           | [thechampagne/webview-d](https://github.com/thechampagne/webview-d), [ronnie-w/webviewd](https://github.com/ronnie-w/webviewd)\nDeno        | [webview/webview_deno](https://github.com/webview/webview_deno)\nGo          | [webview/webview_go][webview_go]\nHarbour     | [EricLendvai/Harbour_WebView](https://github.com/EricLendvai/Harbour_WebView)\nHaskell     | [lettier/webviewhs](https://github.com/lettier/webviewhs)\nJanet       | [janet-lang/webview](https://github.com/janet-lang/webview)\nJava        | [webview/webview_java](https://github.com/webview/webview_java)\nKotlin      | [Winterreisender/webviewko](https://github.com/Winterreisender/webviewko)\nNim         | [oskca/webview](https://github.com/oskca/webview), [neroist/webview](https://github.com/neroist/webview)\nNode.js     | [Winterreisender/webview-nodejs](https://github.com/Winterreisender/webview-nodejs)\nOdin        | [thechampagne/webview-odin](https://github.com/thechampagne/webview-odin)\nPascal      | [PierceNg/fpwebview](http://github.com/PierceNg/fpwebview)\nPython      | [congzhangzh/webview_python](https://github.com/congzhangzh/webview_python),[zserge/webview-python](https://github.com/zserge/webview-python)\nPHP         | [0hr/php-webview](https://github.com/0hr/php-webview)\nRuby        | [Maaarcocr/webview_ruby](https://github.com/Maaarcocr/webview_ruby)\nRust        | [Boscop/web-view](https://github.com/Boscop/web-view)\nSwift       | [jakenvac/SwiftWebview](https://github.com/jakenvac/SwiftWebview)\nV           | [malisipi/mui](https://github.com/malisipi/mui/tree/main/webview), [ttytm/webview](https://github.com/ttytm/webview)\nZig         | [thechampagne/webview-zig](https://github.com/thechampagne/webview-zig)\n\nIf you wish to add bindings to the list, feel free to submit a pull request or [open an issue][issues-new].\n\n## Generating Bindings\n\nYou can generate bindings for the library by yourself using the included SWIG interface (`webview.i`).\n\nHere are some examples to get you started. Unix-style command lines are used for conciseness.\n\n```sh\nmkdir -p build/bindings/{python,csharp,java,ruby}\nswig -c++ -python -outdir build/bindings/python -o build/bindings/python/python_wrap.cpp webview.i\nswig -c++ -csharp -outdir build/bindings/csharp -o build/bindings/csharp/csharp_wrap.cpp webview.i\nswig -c++ -java -outdir build/bindings/java -o build/bindings/java/java_wrap.cpp webview.i\nswig -c++ -ruby -outdir build/bindings/ruby -o build/bindings/ruby/ruby_wrap.cpp webview.i\n```\n\n## License\n\nCode is distributed under MIT license, feel free to use it in your proprietary projects as well.\n\n[examples]:          https://github.com/webview/webview/tree/master/examples\n[gtk]:               https://gtk.org/\n[issues]:            https://github.com/webview/docs/issues\n[issues-new]:        https://github.com/webview/webview/issues/new\n[webkit]:            https://webkit.org/\n[webkitgtk]:         https://webkitgtk.org/\n[webview]:           https://github.com/webview/webview\n[webview_go]:        https://github.com/webview/webview_go\n[webview.dev]:       https://webview.dev\n[ms-webview2]:       https://developer.microsoft.com/en-us/microsoft-edge/webview2/\n[ms-webview2-sdk]:   https://www.nuget.org/packages/Microsoft.Web.WebView2\n[ms-webview2-rt]:    https://developer.microsoft.com/en-us/microsoft-edge/webview2/\n[win32-api]:         https://docs.microsoft.com/en-us/windows/win32/apiindex/windows-api-list\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "compatibility",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gcovr.cfg",
          "type": "blob",
          "size": 0.1826171875,
          "content": "html-details = yes\noutput = build/coverage/\nfilter = ^core/include/\ngcov-exclude-directories = build/_deps/\ndelete-gcov-files = yes\nexclude = build/_deps/\nmerge-mode-functions = separate\n"
        },
        {
          "name": "gcovr.ci.cfg",
          "type": "blob",
          "size": 0.1162109375,
          "content": "filter = ^core/include/\ngcov-exclude-directories = build/_deps/\nexclude = build/_deps/\nmerge-mode-functions = separate\n"
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_driver",
          "type": "tree",
          "content": null
        },
        {
          "name": "webview.i",
          "type": "blob",
          "size": 1.201171875,
          "content": "%module webview \n%{\n#include \"webview.h\"\n%}\n#define WEBVIEW_HINT_NONE 0\n#define WEBVIEW_HINT_MIN 1\n#define WEBVIEW_HINT_MAX 2\n#define WEBVIEW_HINT_FIXED 3\ntypedef void *webview_t;\nextern webview_t webview_create(int debug, void *window);\nextern void webview_destroy(webview_t w);\nextern void webview_run(webview_t w);\nextern void webview_terminate(webview_t w);\nextern void webview_dispatch(webview_t w, void (*fn)(webview_t w, void *arg), void *arg);\nextern void *webview_get_window(webview_t w);\nextern void *webview_get_native_handle(webview_t w, webview_native_handle_kind_t kind);\nextern void webview_set_title(webview_t w, const char *title);\nextern void webview_set_size(webview_t w, int width, int height, int hints);\nextern void webview_navigate(webview_t w, const char *url);\nextern void webview_set_html(webview_t w, const char *html);\nextern void webview_init(webview_t w, const char *js);\nextern void webview_eval(webview_t w, const char *js);\nextern void webview_bind(webview_t w, const char *name, void (*fn)(const char *seq, const char *req, void *arg), void *arg);\nextern void webview_unbind(webview_t w, const char *name);\nextern void webview_return(webview_t w, const char *seq, int status, const char *result);"
        }
      ]
    }
  ]
}