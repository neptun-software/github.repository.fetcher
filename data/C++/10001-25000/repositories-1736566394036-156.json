{
  "metadata": {
    "timestamp": 1736566394036,
    "page": 156,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/STL",
      "stars": 10328,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 10.1865234375,
          "content": "# Copyright (c) Microsoft Corporation.\r\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\r\n\r\n# https://releases.llvm.org/18.1.8/tools/clang/docs/ClangFormatStyleOptions.html\r\n\r\n# To update this .clang-format file for a new clang-format version:\r\n# 1. Update the documentation link above.\r\n# 2. Copy the output of `clang-format -dump-config` into a temporary file.\r\n#    a. Comment out all of its lines.\r\n#    b. Uncomment `BasedOnStyle:  LLVM`.\r\n# 3. Compare that temporary file to this .clang-format file.\r\n# 4. Adjust this .clang-format file to record new and updated options.\r\n#    a. Read the new documentation to understand such changes.\r\n# 5. The goal is for the comparison from the temporary file to this .clang-format file to be pure additions (green).\r\n#    a. That is, comments here are recording the defaults, while added lines are our customized settings.\r\n\r\n---\r\n# Language:        Cpp\r\nBasedOnStyle:  LLVM\r\n# AccessModifierOffset: -2\r\nAccessModifierOffset: -4\r\n# AlignAfterOpenBracket: Align\r\nAlignAfterOpenBracket: DontAlign\r\n# AlignArrayOfStructures: None\r\n# AlignConsecutiveAssignments:\r\n#   Enabled:         false\r\n#   AcrossEmptyLines: false\r\n#   AcrossComments:  false\r\n#   AlignCompound:   false\r\n#   AlignFunctionPointers: false\r\n#   PadOperators:    true\r\nAlignConsecutiveAssignments: Consecutive\r\n# AlignConsecutiveBitFields:\r\n#   Enabled:         false\r\n#   AcrossEmptyLines: false\r\n#   AcrossComments:  false\r\n#   AlignCompound:   false\r\n#   AlignFunctionPointers: false\r\n#   PadOperators:    false\r\n# AlignConsecutiveDeclarations:\r\n#   Enabled:         false\r\n#   AcrossEmptyLines: false\r\n#   AcrossComments:  false\r\n#   AlignCompound:   false\r\n#   AlignFunctionPointers: false\r\n#   PadOperators:    false\r\n# AlignConsecutiveMacros:\r\n#   Enabled:         false\r\n#   AcrossEmptyLines: false\r\n#   AcrossComments:  false\r\n#   AlignCompound:   false\r\n#   AlignFunctionPointers: false\r\n#   PadOperators:    false\r\nAlignConsecutiveMacros: Consecutive\r\n# AlignConsecutiveShortCaseStatements:\r\n#   Enabled:         false\r\n#   AcrossEmptyLines: false\r\n#   AcrossComments:  false\r\n#   AlignCaseColons: false\r\n# AlignEscapedNewlines: Right\r\nAlignEscapedNewlines: Left\r\n# AlignOperands:   Align\r\nAlignOperands: AlignAfterOperator\r\n# AlignTrailingComments:\r\n#   Kind:            Always\r\n#   OverEmptyLines:  0\r\nAlignTrailingComments:\r\n  Kind:            Never\r\n# AllowAllArgumentsOnNextLine: true\r\n# AllowAllParametersOfDeclarationOnNextLine: true\r\n# AllowBreakBeforeNoexceptSpecifier: Never\r\nAllowBreakBeforeNoexceptSpecifier: OnlyWithParen\r\n# AllowShortBlocksOnASingleLine: Never\r\n# AllowShortCaseLabelsOnASingleLine: false\r\n# AllowShortCompoundRequirementOnASingleLine: true\r\n# AllowShortEnumsOnASingleLine: true\r\n# AllowShortFunctionsOnASingleLine: All\r\nAllowShortFunctionsOnASingleLine: Empty\r\n# AllowShortIfStatementsOnASingleLine: Never\r\n# AllowShortLambdasOnASingleLine: All\r\n# AllowShortLoopsOnASingleLine: false\r\n# AlwaysBreakAfterDefinitionReturnType: None\r\n# AlwaysBreakAfterReturnType: None\r\n# AlwaysBreakBeforeMultilineStrings: false\r\n# AlwaysBreakTemplateDeclarations: MultiLine\r\nAlwaysBreakTemplateDeclarations: Yes\r\n# AttributeMacros:\r\n#   - __capability\r\n# BinPackArguments: true\r\n# BinPackParameters: true\r\n# BitFieldColonSpacing: Both\r\n# BraceWrapping:\r\n#   AfterCaseLabel:  false\r\n#   AfterClass:      false\r\n#   AfterControlStatement: Never\r\n#   AfterEnum:       false\r\n#   AfterExternBlock: false\r\n#   AfterFunction:   false\r\n#   AfterNamespace:  false\r\n#   AfterObjCDeclaration: false\r\n#   AfterStruct:     false\r\n#   AfterUnion:      false\r\n#   BeforeCatch:     false\r\n#   BeforeElse:      false\r\n#   BeforeLambdaBody: false\r\n#   BeforeWhile:     false\r\n#   IndentBraces:    false\r\n#   SplitEmptyFunction: true\r\n#   SplitEmptyRecord: true\r\n#   SplitEmptyNamespace: true\r\n# BreakAdjacentStringLiterals: true\r\n# BreakAfterAttributes: Leave\r\nBreakAfterAttributes: Never\r\n# BreakAfterJavaFieldAnnotations: false\r\n# BreakArrays:     true\r\n# BreakBeforeBinaryOperators: None\r\nBreakBeforeBinaryOperators: NonAssignment\r\n# BreakBeforeConceptDeclarations: Always\r\n# BreakBeforeBraces: Attach\r\n# BreakBeforeInlineASMColon: OnlyMultiline\r\n# BreakBeforeTernaryOperators: true\r\n# BreakConstructorInitializers: BeforeColon\r\n# BreakInheritanceList: BeforeColon\r\n# BreakStringLiterals: true\r\n# ColumnLimit:     80\r\nColumnLimit:     120\r\n# CommentPragmas:  '^ IWYU pragma:'\r\n# CompactNamespaces: false\r\n# ConstructorInitializerIndentWidth: 4\r\n# ContinuationIndentWidth: 4\r\n# Cpp11BracedListStyle: true\r\n# DerivePointerAlignment: false\r\n# DisableFormat:   false\r\n# EmptyLineAfterAccessModifier: Never\r\n# EmptyLineBeforeAccessModifier: LogicalBlock\r\n# ExperimentalAutoDetectBinPacking: false\r\n# FixNamespaceComments: true\r\n# ForEachMacros:\r\n#   - foreach\r\n#   - Q_FOREACH\r\n#   - BOOST_FOREACH\r\n# IfMacros:\r\n#   - KJ_IF_MAYBE\r\n# IncludeBlocks:   Preserve\r\nIncludeBlocks:   Regroup\r\n# IncludeCategories:\r\n#   - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\r\n#     Priority:        2\r\n#     SortPriority:    0\r\n#     CaseSensitive:   false\r\n#   - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\r\n#     Priority:        3\r\n#     SortPriority:    0\r\n#     CaseSensitive:   false\r\n#   - Regex:           '.*'\r\n#     Priority:        1\r\n#     SortPriority:    0\r\n#     CaseSensitive:   false\r\nIncludeCategories:\r\n  - Regex:           '^<(yvals|yvals_core)\\.h>$'\r\n    Priority:        10\r\n  - Regex:           '^<__msvc_.*\\.hpp>$'\r\n    Priority:        20\r\n  - Regex:           '^<initguid\\.h>$' # <initguid.h> should be included before any header that includes <guiddef.h>\r\n    Priority:        30\r\n    SortPriority:    30\r\n  - Regex:           '^<(DbgEng|DbgHelp|Shlwapi|Windows)\\.h>$'\r\n    Priority:        30\r\n    SortPriority:    31\r\n  - Regex:           '^<winioctl\\.h>$'\r\n    Priority:        30\r\n    SortPriority:    32\r\n  - Regex:           '\\.hpp[>\"]$'\r\n    Priority:        40\r\n  - Regex:           '.*'\r\n    Priority:        20\r\n# IncludeIsMainRegex: '(Test)?$'\r\n# IncludeIsMainSourceRegex: ''\r\n# IndentAccessModifiers: false\r\n# IndentCaseBlocks: false\r\nIndentCaseBlocks: true\r\n# IndentCaseLabels: false\r\n# IndentExternBlock: AfterExternBlock\r\n# IndentGotoLabels: true\r\n# IndentPPDirectives: None\r\n# IndentRequiresClause: true\r\n# IndentWidth:     2\r\nIndentWidth:     4\r\n# IndentWrappedFunctionNames: false\r\nIndentWrappedFunctionNames: true\r\n# InsertBraces:    false\r\nInsertBraces:    true\r\n# InsertNewlineAtEOF: false\r\nInsertNewlineAtEOF: true\r\n# InsertTrailingCommas: None\r\n# IntegerLiteralSeparator:\r\n#   Binary:          0\r\n#   BinaryMinDigits: 0\r\n#   Decimal:         0\r\n#   DecimalMinDigits: 0\r\n#   Hex:             0\r\n#   HexMinDigits:    0\r\n# JavaScriptQuotes: Leave\r\n# JavaScriptWrapImports: true\r\n# KeepEmptyLinesAtTheStartOfBlocks: true\r\n# KeepEmptyLinesAtEOF: false\r\n# LambdaBodyIndentation: Signature\r\n# LineEnding:      DeriveLF\r\nLineEnding:      CRLF\r\n# NOTE: MacroBlockBegin/MacroBlockEnd don't work with _CATCH_ALL.\r\n# MacroBlockBegin: ''\r\n# MacroBlockEnd:   ''\r\n# MaxEmptyLinesToKeep: 1\r\nMaxEmptyLinesToKeep: 2\r\n# NamespaceIndentation: None\r\nNamespaceIndentation: All\r\n# ObjCBinPackProtocolList: Auto\r\n# ObjCBlockIndentWidth: 2\r\n# ObjCBreakBeforeNestedBlockParam: true\r\n# ObjCSpaceAfterProperty: false\r\n# ObjCSpaceBeforeProtocolList: true\r\n# PackConstructorInitializers: BinPack\r\n# PenaltyBreakAssignment: 2\r\n# PenaltyBreakBeforeFirstCallParameter: 19\r\n# PenaltyBreakComment: 300\r\n# PenaltyBreakFirstLessLess: 120\r\n# PenaltyBreakOpenParenthesis: 0\r\n# PenaltyBreakScopeResolution: 500\r\n# PenaltyBreakString: 1000\r\n# PenaltyBreakTemplateDeclaration: 10\r\n# PenaltyExcessCharacter: 1000000\r\n# PenaltyIndentedWhitespace: 0\r\n# PenaltyReturnTypeOnItsOwnLine: 60\r\n# PointerAlignment: Right\r\nPointerAlignment: Left\r\n# PPIndentWidth:   -1\r\n# QualifierAlignment: Leave\r\n# ReferenceAlignment: Pointer\r\n# ReflowComments:  true\r\n# RemoveBracesLLVM: false\r\n# RemoveParentheses: Leave\r\n# RemoveSemicolon: false\r\nRemoveSemicolon: true\r\n# RequiresClausePosition: OwnLine\r\n# RequiresExpressionIndentation: OuterScope\r\n# SeparateDefinitionBlocks: Leave\r\n# ShortNamespaceLines: 1\r\n# SkipMacroDefinitionBody: false\r\n# SortIncludes:    CaseSensitive\r\n# SortJavaStaticImport: Before\r\n# SortUsingDeclarations: LexicographicNumeric\r\n# SpaceAfterCStyleCast: false\r\nSpaceAfterCStyleCast: true\r\n# SpaceAfterLogicalNot: false\r\n# SpaceAfterTemplateKeyword: true\r\n# SpaceAroundPointerQualifiers: Default\r\n# SpaceBeforeAssignmentOperators: true\r\n# SpaceBeforeCaseColon: false\r\n# SpaceBeforeCpp11BracedList: false\r\n# SpaceBeforeCtorInitializerColon: true\r\n# SpaceBeforeInheritanceColon: true\r\n# SpaceBeforeJsonColon: false\r\n# SpaceBeforeParens: ControlStatements\r\n# SpaceBeforeParensOptions:\r\n#   AfterControlStatements: true\r\n#   AfterForeachMacros: true\r\n#   AfterFunctionDefinitionName: false\r\n#   AfterFunctionDeclarationName: false\r\n#   AfterIfMacros:   true\r\n#   AfterOverloadedOperator: false\r\n#   AfterPlacementOperator: true\r\n#   AfterRequiresInClause: false\r\n#   AfterRequiresInExpression: false\r\n#   BeforeNonEmptyParentheses: false\r\nSpaceBeforeParens: Custom\r\nSpaceBeforeParensOptions:\r\n  AfterRequiresInClause: true\r\n# SpaceBeforeRangeBasedForLoopColon: true\r\n# SpaceBeforeSquareBrackets: false\r\n# SpaceInEmptyBlock: false\r\n# SpacesBeforeTrailingComments: 1\r\n# SpacesInAngles:  Never\r\n# SpacesInContainerLiterals: true\r\n# SpacesInLineCommentPrefix:\r\n#   Minimum:         1\r\n#   Maximum:         -1\r\n# SpacesInParens:  Never\r\n# SpacesInParensOptions:\r\n#   InCStyleCasts:   false\r\n#   InConditionalStatements: false\r\n#   InEmptyParentheses: false\r\n#   Other:           false\r\n# SpacesInSquareBrackets: false\r\n# Standard:        Latest\r\n# StatementAttributeLikeMacros:\r\n#   - Q_EMIT\r\n# StatementMacros:\r\n#   - Q_UNUSED\r\n#   - QT_REQUIRE_VERSION\r\n# NOTE: _STD_BEGIN, _STD_END, etc. aren't macros for complete statements, but telling\r\n# clang-format that they are produces the behavior that we want (with no block indentation).\r\nStatementMacros:\r\n  - _EXTERN_CXX_WORKAROUND\r\n  - _END_EXTERN_CXX_WORKAROUND\r\n  - _STD_BEGIN\r\n  - _STD_END\r\n  - _STDEXT_BEGIN\r\n  - _STDEXT_END\r\n  - _FMT_P2286_BEGIN\r\n  - _FMT_P2286_END\r\n  - _EXTERN_C_UNLESS_PURE\r\n  - _END_EXTERN_C_UNLESS_PURE\r\n# TabWidth:        8\r\n# UseTab:          Never\r\n# VerilogBreakBetweenInstancePorts: true\r\n# WhitespaceSensitiveMacros:\r\n#   - BOOST_PP_STRINGIZE\r\n#   - CF_SWIFT_NAME\r\n#   - NS_SWIFT_NAME\r\n#   - PP_STRINGIZE\r\n#   - STRINGIZE\r\n...\r\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5595703125,
          "content": "# Copyright (c) Microsoft Corporation.\r\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\r\n\r\n# Disable CRLF-mapping for all files.\r\n* -text\r\n\r\n# Ensure GitHub detects our C++ code as C++ code.\r\n/stl/inc/** linguist-language=C++\r\n/stl/modules/** linguist-language=C++\r\n/stl/src/** linguist-language=C++\r\n*.h linguist-language=C++\r\n\r\n# Ensure GitHub detects lit.cfg and lit.local.cfg as Python instead of HAProxy.\r\n*.cfg linguist-language=Python\r\n\r\n# Ensure GitHub detects our Perl legacy test harness code as Perl code instead of Raku.\r\n*.pl linguist-language=Perl\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.185546875,
          "content": "# Copyright (c) Microsoft Corporation.\r\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\r\n\r\n__pycache__/\r\n.vs/\r\n.vscode/\r\n/build/\r\n/out/\r\n/tools/out/\r\n/CMakeLists.txt.user\r\n/*.log\r\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.4091796875,
          "content": "# Copyright (c) Microsoft Corporation.\r\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\r\n\r\n[submodule \"llvm-project\"]\r\n\tpath = llvm-project\r\n\turl = https://github.com/llvm/llvm-project.git\r\n[submodule \"boost-math\"]\r\n\tpath = boost-math\r\n\turl = https://github.com/boostorg/math.git\r\n[submodule \"benchmarks/google-benchmark\"]\r\n\tpath = benchmarks/google-benchmark\r\n\turl = https://github.com/google/benchmark.git\r\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.46875,
          "content": "# Copyright (c) Microsoft Corporation.\r\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\r\n\r\n# This file maps author and committer email addresses to canonical names and email\r\n# addresses for display in the output of `git log` and `git blame`.\r\n# Format:\r\n# Canonical Name <canonical@example.com> <commit@example.com>\r\n\r\n\r\nAmy Wishnousky <amyw@microsoft.com> <stwish@microsoft.com>\r\nAnju del Moral Gonzalez <delMoralGonzalez.Anju@microsoft.com> <judelmor@microsoft.com>\r\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.89453125,
          "content": "# Copyright (c) Microsoft Corporation.\r\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\r\n\r\ncmake_minimum_required(VERSION 3.30.0)\r\n\r\nset(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)\r\nproject(msvc_standard_libraries LANGUAGES CXX)\r\n\r\ninclude(CheckCXXSourceCompiles)\r\ncheck_cxx_source_compiles([=[\r\n#include <sdkddkver.h>\r\nstatic_assert(WDK_NTDDI_VERSION >= NTDDI_WIN10_NI, \"Inspecting WDK_NTDDI_VERSION, the Windows SDK version.\");\r\nint main() {}\r\n]=] WINDOWS_SDK_VERSION_CHECK)\r\n\r\nif(NOT WINDOWS_SDK_VERSION_CHECK)\r\n    message(FATAL_ERROR \"The STL must be built with the Windows 11 SDK (10.0.22621.0) or later. Make sure it's available by selecting it in the Individual Components tab of the VS Installer.\")\r\nendif()\r\n\r\nif(NOT DEFINED VCLIBS_TARGET_ARCHITECTURE)\r\n    set(VCLIBS_TARGET_ARCHITECTURE \"${CMAKE_CXX_COMPILER_ARCHITECTURE_ID}\")\r\nendif()\r\n\r\nstring(TOLOWER \"${VCLIBS_TARGET_ARCHITECTURE}\" VCLIBS_TARGET_ARCHITECTURE)\r\n\r\nif(VCLIBS_TARGET_ARCHITECTURE MATCHES \"^x64$|^x86$\")\r\n    enable_language(ASM_MASM)\r\nendif()\r\n\r\n# add the tools subdirectory _before_ we change all the flags\r\nadd_subdirectory(tools EXCLUDE_FROM_ALL)\r\n\r\n# these allow the targets to show up in the top-level\r\n# (as opposed to under the tools subdirectory)\r\nif(TARGET run-format)\r\n    add_custom_target(format)\r\n    add_dependencies(format run-format)\r\nendif()\r\n\r\nif(TARGET run-validate)\r\n    add_custom_target(validate)\r\n    add_dependencies(validate run-validate)\r\nendif()\r\n\r\noption(BUILD_TESTING \"Enable testing\" ON)\r\nset(VCLIBS_SUFFIX \"_oss\" CACHE STRING \"suffix for built DLL names to avoid conflicts with distributed DLLs\")\r\n\r\noption(STL_USE_ANALYZE \"Pass the /analyze flag to MSVC\" OFF)\r\noption(STL_ASAN_BUILD \"Build the STL with ASan enabled\" OFF)\r\n\r\nset(VCLIBS_EXPLICIT_MACHINE \"\")\r\n\r\nif(\"${VCLIBS_TARGET_ARCHITECTURE}\" STREQUAL \"x86\")\r\n    set(VCLIBS_TARGET_ARCHITECTURE \"x86\")\r\n    set(VCLIBS_I386_OR_AMD64 \"i386\")\r\n    set(VCLIBS_X86_OR_X64 \"x86\")\r\n\r\n    # Note that we set _WIN32_WINNT to a high level to make declarations available, but still engage downlevel\r\n    # runtime dynamic linking by setting our own _STL_WIN32_WINNT back to Windows XP.\r\n    add_compile_definitions(_X86_ _VCRT_WIN32_WINNT=0x0501 _STL_WIN32_WINNT=0x0501)\r\nelseif(VCLIBS_TARGET_ARCHITECTURE STREQUAL \"x64\")\r\n    set(VCLIBS_TARGET_ARCHITECTURE \"x64\")\r\n    set(VCLIBS_I386_OR_AMD64 \"amd64\")\r\n    set(VCLIBS_X86_OR_X64 \"x64\")\r\n    add_compile_definitions(_AMD64_ _VCRT_WIN32_WINNT=0x0501 _STL_WIN32_WINNT=0x0501)\r\nelseif(VCLIBS_TARGET_ARCHITECTURE STREQUAL \"armv7\")\r\n    set(VCLIBS_TARGET_ARCHITECTURE \"arm\")\r\n    set(VCLIBS_I386_OR_AMD64 \"arm\")\r\n    set(VCLIBS_X86_OR_X64 \"arm\")\r\n    add_compile_definitions(_ARM_ _VCRT_WIN32_WINNT=0x0602 _STL_WIN32_WINNT=0x0602)\r\nelseif(VCLIBS_TARGET_ARCHITECTURE STREQUAL \"arm64\")\r\n    set(VCLIBS_TARGET_ARCHITECTURE \"arm64\")\r\n    set(VCLIBS_I386_OR_AMD64 \"arm64\")\r\n    set(VCLIBS_X86_OR_X64 \"arm64\")\r\n    add_compile_definitions(_ARM64_ _VCRT_WIN32_WINNT=0x0A00 _STL_WIN32_WINNT=0x0A00)\r\nelseif(VCLIBS_TARGET_ARCHITECTURE STREQUAL \"arm64ec\")\r\n    set(VCLIBS_TARGET_ARCHITECTURE \"arm64ec\")\r\n    set(VCLIBS_I386_OR_AMD64 \"arm64ec\")\r\n    set(VCLIBS_X86_OR_X64 \"arm64\") # Yes, really: `%VCToolsInstallDir%lib\\arm64ec` only contains the Link Options\r\n    add_compile_definitions(_AMD64_ _ARM64EC_ _VCRT_WIN32_WINNT=0x0501 _STL_WIN32_WINNT=0x0501)\r\n    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/arm64EC>)\r\n    set(VCLIBS_EXPLICIT_MACHINE \"/machine:arm64ec\")\r\nelse()\r\n    message(FATAL_ERROR \"Could not determine target architecture: VCLIBS_TARGET_ARCHITECTURE: ${VCLIBS_TARGET_ARCHITECTURE}\")\r\nendif()\r\n\r\nget_filename_component(TOOLSET_BINARIES_DIR \"${CMAKE_CXX_COMPILER}\" DIRECTORY) # Example: $\\VC\\Tools\\MSVC\\14.23.27931\\bin\\Hostx86\\x86\r\nget_filename_component(TOOLSET_ROOT_DIR \"${TOOLSET_BINARIES_DIR}\" DIRECTORY) # $\\VC\\Tools\\MSVC\\14.23.27931\\bin\\Hostx86\r\nget_filename_component(TOOLSET_ROOT_DIR \"${TOOLSET_ROOT_DIR}\" DIRECTORY) # $\\VC\\Tools\\MSVC\\14.23.27931\\bin\r\nget_filename_component(TOOLSET_ROOT_DIR \"${TOOLSET_ROOT_DIR}\" DIRECTORY) # $\\VC\\Tools\\MSVC\\14.23.27931\r\nset(TOOLSET_LIB \"${TOOLSET_ROOT_DIR}/lib/${VCLIBS_X86_OR_X64}\")\r\nset(STL_ARCHIVE_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/out/lib/${VCLIBS_I386_OR_AMD64}\")\r\nset(STL_LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/out/lib/${VCLIBS_I386_OR_AMD64}\")\r\nset(STL_RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/out/bin/${VCLIBS_I386_OR_AMD64}\")\r\nadd_compile_definitions(\r\n    _ALLOW_ITERATOR_DEBUG_LEVEL_MISMATCH WIN32_LEAN_AND_MEAN STRICT _CRT_STDIO_ARBITRARY_WIDE_SPECIFIERS\r\n    _WIN32_WINNT=0x0A00 NTDDI_VERSION=NTDDI_WIN10_NI)\r\n\r\nif(STL_USE_ANALYZE)\r\n    # TRANSITION OS-40109504: Windows SDK: incorrect SAL annotations on functions the STL uses\r\n    # warning C6553: The annotation for function 'LCMapStringEx' on _Param_(9)\r\n    # does not apply to a value type.\r\n    # There's a bug in the declaration for LCMapStringEx - it applies _In_opt_ to an LPARAM.\r\n    # LPARAM is a LONG_PTR (intptr_t), and it's invalid to apply _In_opt_ to a non-pointer.\r\n    # As of the Windows 11 SDK (10.0.22621.0), there are 5 total occurrences of warning C6553 affecting the STL's build.\r\n    add_compile_options(\"$<$<COMPILE_LANGUAGE:CXX>:/analyze:autolog-;/wd6553>\")\r\nendif()\r\n\r\nset(VCLIBS_DEBUG_OPTIONS \"$<$<COMPILE_LANGUAGE:CXX>:/Od>\")\r\n\r\n# TRANSITION: Potentially remove `/Os` if it results in speed improvements.\r\n# This requires benchmarking!\r\n# Note that in MSVC version 19.32.31328,\r\n# `/Os` results in a binary size difference of 102K\r\n# in the release DLL (a gain of 18.4%).\r\n# So, make certain that that tradeoff is considered when or if `/Os` is removed.\r\n# See GH-2108 for more info.\r\nset(VCLIBS_RELEASE_OPTIONS \"$<$<COMPILE_LANGUAGE:CXX>:/O2;/Os>\")\r\n\r\nif(BUILD_TESTING)\r\n    add_subdirectory(tests)\r\nendif()\r\n\r\nif(STL_ASAN_BUILD)\r\n    message(STATUS \"Building with ASan enabled\")\r\n    add_compile_options(\"$<$<COMPILE_LANGUAGE:CXX>:-fsanitize=address;-fno-sanitize-address-vcasan-lib>\")\r\nendif()\r\n\r\nadd_subdirectory(boost-math)\r\nadd_subdirectory(stl)\r\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 2.8564453125,
          "content": "{\r\n  \"version\": 5,\r\n  \"cmakeMinimumRequired\": {\r\n    \"major\": 3,\r\n    \"minor\": 26,\r\n    \"patch\": 0\r\n  },\r\n  \"configurePresets\": [\r\n    {\r\n      \"name\": \"base\",\r\n      \"hidden\": true,\r\n      \"generator\": \"Ninja\",\r\n      \"binaryDir\": \"${sourceDir}/out/${presetName}\"\r\n    },\r\n    {\r\n      \"name\": \"x86\",\r\n      \"inherits\": \"base\",\r\n      \"description\": \"x86 Ninja Config\",\r\n      \"architecture\": {\r\n        \"strategy\": \"external\",\r\n        \"value\": \"x86\"\r\n      },\r\n      \"condition\": {\r\n        \"type\": \"inList\",\r\n        \"string\": \"$env{Platform}\",\r\n        \"list\": [\r\n          \"x86\",\r\n          \"\"\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      \"name\": \"x64\",\r\n      \"inherits\": \"base\",\r\n      \"description\": \"x64 Ninja Config\",\r\n      \"architecture\": {\r\n        \"strategy\": \"external\",\r\n        \"value\": \"x64\"\r\n      },\r\n      \"condition\": {\r\n        \"type\": \"inList\",\r\n        \"string\": \"$env{Platform}\",\r\n        \"list\": [\r\n          \"x64\",\r\n          \"\"\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      \"name\": \"ARM\",\r\n      \"inherits\": \"base\",\r\n      \"description\": \"ARM Ninja Config\",\r\n      \"architecture\": {\r\n        \"strategy\": \"external\",\r\n        \"value\": \"ARM\"\r\n      },\r\n      \"condition\": {\r\n        \"type\": \"inList\",\r\n        \"string\": \"$env{Platform}\",\r\n        \"list\": [\r\n          \"arm\",\r\n          \"\"\r\n        ]\r\n      },\r\n      \"cacheVariables\": {\r\n        \"TESTS_BUILD_ONLY\": true\r\n      }\r\n    },\r\n    {\r\n      \"name\": \"ARM64\",\r\n      \"inherits\": \"base\",\r\n      \"description\": \"ARM64 Ninja Config\",\r\n      \"architecture\": {\r\n        \"strategy\": \"external\",\r\n        \"value\": \"ARM64\"\r\n      },\r\n      \"condition\": {\r\n        \"type\": \"inList\",\r\n        \"string\": \"$env{Platform}\",\r\n        \"list\": [\r\n          \"arm64\",\r\n          \"\"\r\n        ]\r\n      },\r\n      \"cacheVariables\": {\r\n        \"TESTS_BUILD_ONLY\": true\r\n      }\r\n    },\r\n    {\r\n      \"name\": \"ARM64EC\",\r\n      \"inherits\": \"base\",\r\n      \"description\": \"ARM64EC Ninja Config\",\r\n      \"architecture\": {\r\n        \"strategy\": \"external\",\r\n        \"value\": \"ARM64EC\"\r\n      },\r\n      \"condition\": {\r\n        \"type\": \"inList\",\r\n        \"string\": \"$env{Platform}\",\r\n        \"list\": [\r\n          \"arm64\",\r\n          \"\"\r\n        ]\r\n      },\r\n      \"cacheVariables\": {\r\n        \"TESTS_BUILD_ONLY\": true,\r\n        \"VCLIBS_TARGET_ARCHITECTURE\": \"ARM64EC\"\r\n      }\r\n    }\r\n  ],\r\n  \"buildPresets\": [\r\n    {\r\n      \"name\": \"x86\",\r\n      \"configurePreset\": \"x86\",\r\n      \"description\": \"Build x86 STL\"\r\n    },\r\n    {\r\n      \"name\": \"x64\",\r\n      \"configurePreset\": \"x64\",\r\n      \"description\": \"Build x64 STL\"\r\n    },\r\n    {\r\n      \"name\": \"ARM\",\r\n      \"configurePreset\": \"ARM\",\r\n      \"description\": \"Build ARM STL\"\r\n    },\r\n    {\r\n      \"name\": \"ARM64\",\r\n      \"configurePreset\": \"ARM64\",\r\n      \"description\": \"Build ARM64 STL\"\r\n    },\r\n    {\r\n      \"name\": \"ARM64EC\",\r\n      \"configurePreset\": \"ARM64EC\",\r\n      \"description\": \"Build ARM64EC STL\"\r\n    }\r\n  ]\r\n}\r\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.544921875,
          "content": "# Microsoft Open Source Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\n\nResources:\n\n- [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/)\n- [Microsoft Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\n- Contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with questions or concerns\n- Employees can reach out at [aka.ms/opensource/moderation-support](https://aka.ms/opensource/moderation-support)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.6201171875,
          "content": "# Contributing\r\n\r\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\r\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\r\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\r\n\r\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\r\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\r\nprovided by the bot. You will only need to do this once across all repos using our CLA.\r\n\r\n## Types of Contributions\r\n\r\n### Submitting a Pull Request\r\n\r\nThe STL repo has many open issues that track work which needs to be completed.\r\nIf you're unsure of where to start, you may want to:\r\n\r\n* look for pinned issues, or\r\n* check issues under the labels [`good first issue`][label:\"good first issue\"],\r\n  [`high priority`][label:\"high priority\"], or [`help wanted`][label:\"help wanted\"].\r\n\r\n### Reviewing a Pull Request\r\n\r\nWe love code reviews from contributors! Reviews from other contributors can often accelerate the reviewing process\r\nby helping a PR reach a more finished state before maintainers review the changes. As a result, such a PR may require\r\nfewer maintainer review iterations before reaching a \"Ready to Merge\" state.\r\n\r\nTo gain insight into our Code Review process, you can check out:\r\n\r\n* pull requests which are [undergoing review][review:changes-requested],\r\n* [Advice for Reviewing Pull Requests][wiki:advice-for-reviewing], and\r\n* [Code Review Videos][wiki:videos].\r\n\r\n## PR Checklist\r\n\r\nBefore submitting a pull request, please ensure:\r\n\r\n1. Any non-standard identifiers in product code (including local variables, exposition-only members, etc.)\r\n   begin with an underscore and a capital letter, as per [\\[lex.name\\]/3.1][].\r\n\r\n2. Your changes don't affect the ABI for any type or function that a user may use (including adding or removing\r\n   non-static data members, adding or removing virtual member functions, changing whether a type is an aggregate\r\n   or trivially copyable, etc.).\r\n\r\n3. Your changes are written from scratch using only acceptable sources:\r\n   * this repository,\r\n   * the C++ Working Draft (including any cited standards),\r\n   * other WG21 papers (excluding reference implementations outside of proposed standard wording),\r\n   * LWG issues, or\r\n   * a project listed in [NOTICE.txt][] (make sure to cite the project in the PR description!).\r\n\r\nIf your changes are derived from any other project, you _must_ mention it in the pull request description,\r\nso we can determine whether the license is compatible and whether any other steps need to be taken.\r\n\r\n# Code of Conduct\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\r\n\r\nSee [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md) for more information.\r\n\r\n[label:\"good first issue\"]:\r\n   https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\r\n[label:\"high priority\"]: https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3A%22high+priority%22\r\n[label:\"help wanted\"]: https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22\r\n[review:changes-requested]: https://github.com/microsoft/STL/pulls?q=is%3Apr+is%3Aopen+review%3Achanges-requested\r\n[wiki:advice-for-reviewing]: https://github.com/microsoft/STL/wiki/Advice-for-Reviewing-Pull-Requests\r\n[NOTICE.txt]: https://github.com/microsoft/STL/blob/main/NOTICE.txt\r\n[wiki:videos]: https://github.com/microsoft/STL/wiki/Code-Review-Videos\r\n[\\[lex.name\\]/3.1]: https://eel.is/c++draft/lex.name#3.1\r\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 12.255859375,
          "content": "The Microsoft C++ Standard Library is under the Apache License v2.0 with LLVM Exception:\r\n\r\n                                 Apache License\r\n                           Version 2.0, January 2004\r\n                        http://www.apache.org/licenses/\r\n\r\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n   1. Definitions.\r\n\r\n      \"License\" shall mean the terms and conditions for use, reproduction,\r\n      and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n      \"Licensor\" shall mean the copyright owner or entity authorized by\r\n      the copyright owner that is granting the License.\r\n\r\n      \"Legal Entity\" shall mean the union of the acting entity and all\r\n      other entities that control, are controlled by, or are under common\r\n      control with that entity. For the purposes of this definition,\r\n      \"control\" means (i) the power, direct or indirect, to cause the\r\n      direction or management of such entity, whether by contract or\r\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n      outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n      exercising permissions granted by this License.\r\n\r\n      \"Source\" form shall mean the preferred form for making modifications,\r\n      including but not limited to software source code, documentation\r\n      source, and configuration files.\r\n\r\n      \"Object\" form shall mean any form resulting from mechanical\r\n      transformation or translation of a Source form, including but\r\n      not limited to compiled object code, generated documentation,\r\n      and conversions to other media types.\r\n\r\n      \"Work\" shall mean the work of authorship, whether in Source or\r\n      Object form, made available under the License, as indicated by a\r\n      copyright notice that is included in or attached to the work\r\n      (an example is provided in the Appendix below).\r\n\r\n      \"Derivative Works\" shall mean any work, whether in Source or Object\r\n      form, that is based on (or derived from) the Work and for which the\r\n      editorial revisions, annotations, elaborations, or other modifications\r\n      represent, as a whole, an original work of authorship. For the purposes\r\n      of this License, Derivative Works shall not include works that remain\r\n      separable from, or merely link (or bind by name) to the interfaces of,\r\n      the Work and Derivative Works thereof.\r\n\r\n      \"Contribution\" shall mean any work of authorship, including\r\n      the original version of the Work and any modifications or additions\r\n      to that Work or Derivative Works thereof, that is intentionally\r\n      submitted to Licensor for inclusion in the Work by the copyright owner\r\n      or by an individual or Legal Entity authorized to submit on behalf of\r\n      the copyright owner. For the purposes of this definition, \"submitted\"\r\n      means any form of electronic, verbal, or written communication sent\r\n      to the Licensor or its representatives, including but not limited to\r\n      communication on electronic mailing lists, source code control systems,\r\n      and issue tracking systems that are managed by, or on behalf of, the\r\n      Licensor for the purpose of discussing and improving the Work, but\r\n      excluding communication that is conspicuously marked or otherwise\r\n      designated in writing by the copyright owner as \"Not a Contribution.\"\r\n\r\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n      on behalf of whom a Contribution has been received by Licensor and\r\n      subsequently incorporated within the Work.\r\n\r\n   2. Grant of Copyright License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      copyright license to reproduce, prepare Derivative Works of,\r\n      publicly display, publicly perform, sublicense, and distribute the\r\n      Work and such Derivative Works in Source or Object form.\r\n\r\n   3. Grant of Patent License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      (except as stated in this section) patent license to make, have made,\r\n      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n      where such license applies only to those patent claims licensable\r\n      by such Contributor that are necessarily infringed by their\r\n      Contribution(s) alone or by combination of their Contribution(s)\r\n      with the Work to which such Contribution(s) was submitted. If You\r\n      institute patent litigation against any entity (including a\r\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n      or a Contribution incorporated within the Work constitutes direct\r\n      or contributory patent infringement, then any patent licenses\r\n      granted to You under this License for that Work shall terminate\r\n      as of the date such litigation is filed.\r\n\r\n   4. Redistribution. You may reproduce and distribute copies of the\r\n      Work or Derivative Works thereof in any medium, with or without\r\n      modifications, and in Source or Object form, provided that You\r\n      meet the following conditions:\r\n\r\n      (a) You must give any other recipients of the Work or\r\n          Derivative Works a copy of this License; and\r\n\r\n      (b) You must cause any modified files to carry prominent notices\r\n          stating that You changed the files; and\r\n\r\n      (c) You must retain, in the Source form of any Derivative Works\r\n          that You distribute, all copyright, patent, trademark, and\r\n          attribution notices from the Source form of the Work,\r\n          excluding those notices that do not pertain to any part of\r\n          the Derivative Works; and\r\n\r\n      (d) If the Work includes a \"NOTICE\" text file as part of its\r\n          distribution, then any Derivative Works that You distribute must\r\n          include a readable copy of the attribution notices contained\r\n          within such NOTICE file, excluding those notices that do not\r\n          pertain to any part of the Derivative Works, in at least one\r\n          of the following places: within a NOTICE text file distributed\r\n          as part of the Derivative Works; within the Source form or\r\n          documentation, if provided along with the Derivative Works; or,\r\n          within a display generated by the Derivative Works, if and\r\n          wherever such third-party notices normally appear. The contents\r\n          of the NOTICE file are for informational purposes only and\r\n          do not modify the License. You may add Your own attribution\r\n          notices within Derivative Works that You distribute, alongside\r\n          or as an addendum to the NOTICE text from the Work, provided\r\n          that such additional attribution notices cannot be construed\r\n          as modifying the License.\r\n\r\n      You may add Your own copyright statement to Your modifications and\r\n      may provide additional or different license terms and conditions\r\n      for use, reproduction, or distribution of Your modifications, or\r\n      for any such Derivative Works as a whole, provided Your use,\r\n      reproduction, and distribution of the Work otherwise complies with\r\n      the conditions stated in this License.\r\n\r\n   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n      any Contribution intentionally submitted for inclusion in the Work\r\n      by You to the Licensor shall be under the terms and conditions of\r\n      this License, without any additional terms or conditions.\r\n      Notwithstanding the above, nothing herein shall supersede or modify\r\n      the terms of any separate license agreement you may have executed\r\n      with Licensor regarding such Contributions.\r\n\r\n   6. Trademarks. This License does not grant permission to use the trade\r\n      names, trademarks, service marks, or product names of the Licensor,\r\n      except as required for reasonable and customary use in describing the\r\n      origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n   7. Disclaimer of Warranty. Unless required by applicable law or\r\n      agreed to in writing, Licensor provides the Work (and each\r\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n      implied, including, without limitation, any warranties or conditions\r\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n      appropriateness of using or redistributing the Work and assume any\r\n      risks associated with Your exercise of permissions under this License.\r\n\r\n   8. Limitation of Liability. In no event and under no legal theory,\r\n      whether in tort (including negligence), contract, or otherwise,\r\n      unless required by applicable law (such as deliberate and grossly\r\n      negligent acts) or agreed to in writing, shall any Contributor be\r\n      liable to You for damages, including any direct, indirect, special,\r\n      incidental, or consequential damages of any character arising as a\r\n      result of this License or out of the use or inability to use the\r\n      Work (including but not limited to damages for loss of goodwill,\r\n      work stoppage, computer failure or malfunction, or any and all\r\n      other commercial damages or losses), even if such Contributor\r\n      has been advised of the possibility of such damages.\r\n\r\n   9. Accepting Warranty or Additional Liability. While redistributing\r\n      the Work or Derivative Works thereof, You may choose to offer,\r\n      and charge a fee for, acceptance of support, warranty, indemnity,\r\n      or other liability obligations and/or rights consistent with this\r\n      License. However, in accepting such obligations, You may act only\r\n      on Your own behalf and on Your sole responsibility, not on behalf\r\n      of any other Contributor, and only if You agree to indemnify,\r\n      defend, and hold each Contributor harmless for any liability\r\n      incurred by, or claims asserted against, such Contributor by reason\r\n      of your accepting any such warranty or additional liability.\r\n\r\n   END OF TERMS AND CONDITIONS\r\n\r\n   APPENDIX: How to apply the Apache License to your work.\r\n\r\n      To apply the Apache License to your work, attach the following\r\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\r\n      replaced with your own identifying information. (Don't include\r\n      the brackets!)  The text should be enclosed in the appropriate\r\n      comment syntax for the file format. We also recommend that a\r\n      file or class name and description of purpose be included on the\r\n      same \"printed page\" as the copyright notice for easier\r\n      identification within third-party archives.\r\n\r\n   Copyright [yyyy] [name of copyright owner]\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n\r\n---- LLVM Exceptions to the Apache 2.0 License ----\r\n\r\nAs an exception, if, as a result of your compiling your source code, portions\r\nof this Software are embedded into an Object form of such source code, you\r\nmay redistribute such embedded portions in such Object form without complying\r\nwith the conditions of Sections 4(a), 4(b) and 4(d) of the License.\r\n\r\nIn addition, if you combine or link compiled forms of this Software with\r\nsoftware that is licensed under the GPLv2 (\"Combined Software\") and if a\r\ncourt of competent jurisdiction determines that the patent provision (Section\r\n3), the indemnity provision (Section 9) or other Section of the License\r\nconflicts with the conditions of the GPLv2, you may retroactively and\r\nprospectively choose to deem waived or otherwise exclude such Section(s) of\r\nthe License, but only in their entirety and only with respect to the Combined\r\nSoftware.\r\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 10.509765625,
          "content": "Microsoft C++ Standard Library\r\n\r\nCopyright (c) Microsoft Corporation\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n\r\n---- LLVM Exceptions to the Apache 2.0 License ----\r\n\r\nAs an exception, if, as a result of your compiling your source code, portions\r\nof this Software are embedded into an Object form of such source code, you\r\nmay redistribute such embedded portions in such Object form without complying\r\nwith the conditions of Sections 4(a), 4(b) and 4(d) of the License.\r\n\r\nIn addition, if you combine or link compiled forms of this Software with\r\nsoftware that is licensed under the GPLv2 (\"Combined Software\") and if a\r\ncourt of competent jurisdiction determines that the patent provision (Section\r\n3), the indemnity provision (Section 9) or other Section of the License\r\nconflicts with the conditions of the GPLv2, you may retroactively and\r\nprospectively choose to deem waived or otherwise exclude such Section(s) of\r\nthe License, but only in their entirety and only with respect to the Combined\r\nSoftware.\r\n\r\n----------------------------------------------------\r\n\r\nIn addition, certain files include the notices provided below.\r\n\r\n\r\n\r\n// Copyright 2018 Ulf Adams\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n\r\n// Boost Software License - Version 1.0 - August 17th, 2003\r\n\r\n// Permission is hereby granted, free of charge, to any person or organization\r\n// obtaining a copy of the software and accompanying documentation covered by\r\n// this license (the \"Software\") to use, reproduce, display, distribute,\r\n// execute, and transmit the Software, and to prepare derivative works of the\r\n// Software, and to permit third-parties to whom the Software is furnished to\r\n// do so, all subject to the following:\r\n\r\n// The copyright notices in the Software and this entire statement, including\r\n// the above license grant, this restriction and the following disclaimer,\r\n// must be included in all copies of the Software, in whole or in part, and\r\n// all derivative works of the Software, unless such copies or derivative\r\n// works are solely in the form of machine-executable object code generated by\r\n// a source language processor.\r\n\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\r\n// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\r\n// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\r\n// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n// DEALINGS IN THE SOFTWARE.\r\n\r\n----------------------\r\n\r\n/*\r\n* This file is derived from software bearing the following\r\n* restrictions:\r\n*\r\n* (c) Copyright William E. Kempf 2001\r\n*\r\n* Permission to use, copy, modify, distribute and sell this\r\n* software and its documentation for any purpose is hereby\r\n* granted without fee, provided that the above copyright\r\n* notice appear in all copies and that both that copyright\r\n* notice and this permission notice appear in supporting\r\n* documentation. William E. Kempf makes no representations\r\n* about the suitability of this software for any purpose.\r\n* It is provided \"as is\" without express or implied warranty.\r\n*/\r\n\r\n----------------------\r\n\r\n// NOTE:\r\n//  The conversion data in this header has been derived by Dinkumware\r\n//  from a Unicode, Inc. file with the preamble reproduced below, under\r\n//  the grant of right described in that preamble. This header contains\r\n//  no other material from that file.\r\n//\r\n// Copyright (c) 1994-2011 Unicode, Inc.  All Rights reserved.\r\n//\r\n// This file is provided as-is by Unicode, Inc. (The Unicode Consortium).\r\n// No claims are made as to fitness for any particular purpose.  No\r\n// warranties of any kind are expressed or implied.  The recipient\r\n// agrees to determine applicability of information provided.  If this\r\n// file has been provided on magnetic media by Unicode, Inc., the sole\r\n// remedy for any claim will be exchange of defective media within 90\r\n// days of receipt.\r\n//\r\n//  Unicode, Inc. hereby grants the right to freely use the information\r\n//  supplied in this file in the creation of products supporting the\r\n//  Unicode Standard, and to make copies of this file in any form for\r\n//  internal or external distribution as long as this notice remains\r\n//  attached.\r\n\r\n----------------------\r\n\r\n/// NOTE:\r\n//  The conversion data in this header has been derived by Dinkumware\r\n//  from a Unicode, Inc. file with the preamble reproduced below, under\r\n//  the grant of right described in that preamble. This header contains\r\n//  no other material from that file.\r\n//\r\n//  Copyright (c) 1991-1994 Unicode, Inc.  All Rights reserved.\r\n//\r\n//  This file is provided as-is by Unicode, Inc. (The Unicode Consortium).\r\n//  No claims are made as to fitness for any particular purpose.  No\r\n//  warranties of any kind are expressed or implied.  The recipient\r\n//  agrees to determine applicability of information provided.  If this\r\n//  file has been provided on magnetic media by Unicode, Inc., the sole\r\n//  remedy for any claim will be exchange of defective media within 90\r\n//  days of receipt.\r\n//\r\n//  Recipient is granted the right to make copies in any form for\r\n//  internal distribution and to freely use the information supplied\r\n//  in the creation of products supporting Unicode.\r\n\r\n----------------------\r\n\r\n//===----------------------------------------------------------------------===//\r\n//\r\n// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\r\n// See https://llvm.org/LICENSE.txt for license information.\r\n// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\r\n//\r\n//===----------------------------------------------------------------------===//\r\n\r\n----------------------\r\n\r\n// Copyright (c) 2012 - present, Victor Zverovich\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining\r\n// a copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so, subject to\r\n// the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be\r\n// included in all copies or substantial portions of the Software.\r\n\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\n// --- Optional exception to the license ---\r\n//\r\n// As an exception, if, as a result of your compiling your source code, portions\r\n// of this Software are embedded into a machine-executable object form of such\r\n// source code, you may redistribute such embedded portions in such object form\r\n// without including the above copyright and permission notices.\r\n\r\n----------------------\r\n\r\n// UNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE\r\n//\r\n// See Terms of Use <https://www.unicode.org/copyright.html>\r\n// for definitions of Unicode Inc.'s Data Files and Software.\r\n//\r\n// NOTICE TO USER: Carefully read the following legal agreement.\r\n// BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S\r\n// DATA FILES (\"DATA FILES\"), AND/OR SOFTWARE (\"SOFTWARE\"),\r\n// YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE\r\n// TERMS AND CONDITIONS OF THIS AGREEMENT.\r\n// IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE\r\n// THE DATA FILES OR SOFTWARE.\r\n//\r\n// COPYRIGHT AND PERMISSION NOTICE\r\n//\r\n// Copyright (c) 1991-2022 Unicode, Inc. All rights reserved.\r\n// Distributed under the Terms of Use in https://www.unicode.org/copyright.html.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining\r\n// a copy of the Unicode data files and any associated documentation\r\n// (the \"Data Files\") or Unicode software and any associated documentation\r\n// (the \"Software\") to deal in the Data Files or Software\r\n// without restriction, including without limitation the rights to use,\r\n// copy, modify, merge, publish, distribute, and/or sell copies of\r\n// the Data Files or Software, and to permit persons to whom the Data Files\r\n// or Software are furnished to do so, provided that either\r\n// (a) this copyright and permission notice appear with all copies\r\n// of the Data Files or Software, or\r\n// (b) this copyright and permission notice appear in associated\r\n// Documentation.\r\n//\r\n// THE DATA FILES AND SOFTWARE ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF\r\n// ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\r\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n// NONINFRINGEMENT OF THIRD PARTY RIGHTS.\r\n// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS\r\n// NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL\r\n// DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\r\n// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\r\n// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n// PERFORMANCE OF THE DATA FILES OR SOFTWARE.\r\n//\r\n// Except as contained in this notice, the name of a copyright holder\r\n// shall not be used in advertising or otherwise to promote the sale,\r\n// use or other dealings in these Data Files or Software without prior\r\n// written authorization of the copyright holder.\r\n\r\n----------------------\r\n\r\n/*  Written in 2018 by David Blackman and Sebastiano Vigna (vigna@acm.org)\r\n\r\nTo the extent possible under law, the author has dedicated all copyright\r\nand related and neighboring rights to this software to the public domain\r\nworldwide. This software is distributed without any warranty.\r\n\r\nSee <http://creativecommons.org/publicdomain/zero/1.0/>. */\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 32.037109375,
          "content": "# Microsoft's C++ Standard Library\r\n\r\nThis is the official repository for Microsoft's implementation of the C++ Standard Library (also known as the STL),\r\nwhich ships as part of the MSVC toolset and the Visual Studio IDE.\r\n\r\n* Our [Changelog][] tracks which updates to this repository appear in each VS release.\r\n* Our [Status Chart][] displays our overall progress over time.\r\n* Join our [Discord server][].\r\n* [![CI Status Badge][STL-CI-badge]][STL-CI-link] (STL-CI build status)\r\n* [![ASan CI Status Badge][STL-ASan-CI-badge]][STL-ASan-CI-link] (STL-ASan-CI build status)\r\n\r\n# What This Repo Is Useful For\r\n\r\nIf you're a programmer who just wants to use the STL, you **don't** need this repo. Simply install the Visual Studio IDE\r\nand select the \"Desktop development with C++\" workload.\r\n\r\nIf you want to participate in the STL's development, welcome! You can report issues, comment on pull requests, and learn\r\nabout what we're working on. You can also submit pull requests to fix bugs or add features: see [CONTRIBUTING.md][] for\r\nmore information.\r\n\r\nFinally, you can take our code and use it in other apps and libraries (according to the terms of our license, like\r\neverything else).\r\n\r\n# GitHub Migration Status\r\n\r\nWe're in the process of moving all of our work on the STL to GitHub. Current status:\r\n\r\n* Code: **Done.** Our source code is available under the Apache License v2.0 with LLVM Exception. (See\r\n[LICENSE.txt][] and [NOTICE.txt][] for more information.)\r\n\r\n* Build System: **In progress.** We're working on a CMake build system, which is currently capable of building one\r\nflavor of the STL (native desktop). We need to extend this to build all of the flavors required for the MSVC toolset\r\n(e.g. `/clr`, `/clr:pure`, OneCore, Spectre). Until that's done, we're keeping our legacy build system around in the\r\n`stl/msbuild` subdirectory. (We're keeping those files in this repo, even though they're unusable outside of Microsoft,\r\nbecause they need to be updated whenever source files are added/renamed/deleted. We'll delete the legacy machinery as\r\nsoon as possible.)\r\n\r\n* Tests: **In progress.** We rely on three test suites: std, tr1, and [libcxx][]. We've partially ported std and tr1,\r\nand fully ported libcxx to run under [lit][] using the various configurations/compilers we test internally.\r\n\r\n* Continuous Integration: **In progress.** We've set up Azure Pipelines to validate changes to the repository.\r\nCurrently, it builds the STL (native desktop for x86, x64, ARM, and ARM64). Also, it strictly verifies that all of our\r\nfiles have been formatted with [clang-format][] and follow our other whitespace conventions.\r\n\r\n* Contribution Guidelines: **Coming soon.** Working on the STL's code involves following many rules. We have codebase\r\nconventions, Standard requirements, Microsoft-specific requirements, binary compatibility (ABI) requirements, and more.\r\nWe're eager to begin accepting features and fixes from the community, but in addition to setting up a CI system, we need\r\nto write down all of the rules that are currently stored in our brains. (The ABI rules may be useful to other C++\r\nlibraries.)\r\n\r\n* Issues: **In progress.** We're going to use GitHub issues to track all of the things that we need to work on. This\r\nincludes C++20 features, [LWG issues][], conformance bugs, performance improvements, and other todos. There are\r\napproximately 200 active bugs in the STL's Microsoft-internal database; we need to manually replicate all of them to\r\nGitHub issues. Currently, the [cxx20 tag][] and [LWG tag][] are done; every remaining work item is tracked by a GitHub\r\nissue. The [bug tag][] and [enhancement tag][] are being populated.\r\n\r\n* Plans: **In progress.** We're writing up our [Roadmap][].\r\n\r\n# Goals\r\n\r\nWe're implementing the latest C++ Working Draft, currently [N5001][], which will eventually become the next C++\r\nInternational Standard. The terms Working Draft (WD) and Working Paper (WP) are interchangeable; we often\r\ninformally refer to these drafts as \"the Standard\" while being aware of the difference. (There are other relevant\r\nStandards; for example, supporting `/std:c++14` and `/std:c++17` involves understanding how the C++14 and C++17\r\nStandards differ from the Working Paper, and we often need to refer to the C Standard Library and ECMAScript regular\r\nexpression specifications.)\r\n\r\nOur primary goals are conformance, performance, usability, and compatibility.\r\n\r\n* Conformance: The Working Paper is a moving target; as features and LWG issue resolutions are added, we need to\r\nimplement them. That can involve a lot of work because the STL is required to behave in very specific ways and to\r\nhandle users doing very unusual things.\r\n\r\n* Performance: The STL needs to be extremely fast at runtime; speed is one of C++'s core strengths and most C++\r\nprograms use the STL extensively. As a result, we spend more time on optimization than most general-purpose libraries.\r\n(However, we're wary of changes that improve some scenarios at the expense of others, or changes that make code\r\nsignificantly more complicated and fragile. That is, there's a \"complexity budget\" that must be spent carefully.)\r\n\r\n* Usability: This includes parts of the programming experience like compiler throughput, diagnostic messages, and\r\ndebugging checks. For example, we've extensively marked the STL with `[[nodiscard]]` attributes because this helps\r\nprogrammers avoid bugs.\r\n\r\n* Compatibility: This includes binary compatibility and source compatibility. We're keeping VS 2022 binary-compatible\r\nwith VS 2015/2017/2019, which restricts what we can change in VS 2022 updates. (We've found that significant changes\r\nare possible even though other changes are impossible, which we'll be documenting in our Contribution Guidelines soon.)\r\nWhile there are a few exceptions to this rule (e.g. if a feature is added to the Working Paper, we implement it, and\r\nthen the feature is significantly changed before the International Standard is finalized, we reserve the right to break\r\nbinary compatibility because `/std:c++latest` offers an experimental preview of such features), binary compatibility\r\ngenerally overrides all other considerations, even conformance. Source compatibility refers to being able to\r\nsuccessfully recompile user code without changes. We consider source compatibility to be important, but not\r\nall-important; breaking source compatibility can be an acceptable cost if done for the right reasons in the right way\r\n(e.g. in a controlled manner with escape hatches).\r\n\r\n# Non-Goals\r\n\r\nThere are things that we aren't interested in doing with this project, for various reasons (most importantly, we need to\r\nfocus development effort on our goals). Some examples:\r\n\r\n* Non-goal: Porting to other platforms.\r\n\r\n* Non-goal: Adding non-Standard extensions.\r\n\r\n* Non-goal: Implementing Technical Specifications. (We're prioritizing features in the Working Paper. Occasionally, we\r\nmight implement some or all of a TS, often when we're working on the specification itself.)\r\n\r\nIf you're proposing a feature to WG21 (the C++ Standardization Committee), you're welcome (and encouraged!) to use our\r\ncode as a base for a proof-of-concept implementation. These non-goals simply mean that we're unable to consider pull\r\nrequests for a proposed feature until it has been voted into a Working Paper. After that happens, we'll be delighted to\r\nreview a production-ready pull request.\r\n\r\n# Reporting Issues\r\n\r\nYou can report STL bugs here, where they'll be directly reviewed by maintainers. You can also report STL bugs through\r\n[Developer Community][], or the VS IDE (Help > Send Feedback > Report a Problem...).\r\n\r\n**Please help us** efficiently process bug reports by following these rules:\r\n\r\n* Only STL bugs should be reported here. If it's a bug in the compiler, CRT, or IDE, please report it through Developer\r\nCommunity or Report A Problem. If it's a bug in the Windows SDK, please report it through the [Feedback Hub][hub] app.\r\nIf you aren't sure, try to reduce your test case and see if you can eliminate the STL's involvement while still\r\nreproducing the bug.\r\n\r\n* You should be reasonably confident that you're looking at an actual implementation bug, instead of undefined behavior\r\nor surprising-yet-Standard behavior. Comparing against other implementations can help (but remember that implementations\r\ncan differ while conforming to the Standard); try [Compiler Explorer][]. If you still aren't\r\nsure, ask the nearest C++ expert.\r\n\r\n* You should prepare a self-contained command-line test case, ideally as small as possible. We need a source file, a\r\ncommand line, what happened (e.g. a compiler error, runtime misbehavior), and what you expected to happen. By\r\n\"self-contained\", we mean that your source file has to avoid including code that we don't have. Ideally, only CRT and\r\nSTL headers should be included. If you have to include other MSVC libraries, or the Windows SDK, to trigger an STL bug,\r\nthat's okay. But if you need parts of your own source code to trigger the STL bug, you need to extract that for us. (On\r\nDeveloper Community, we'll accept zipped IDE projects if you have no other way to reproduce a bug, but this is very\r\ntime-consuming for us to reduce.)\r\n\r\n* A good title is helpful. We prefer \"`<header_name>`: Short description of your issue\". You don't usually need to\r\nmention `std::` or C++. For example, \"`<type_traits>`: `is_cute` should be true for `enum class FluffyKittens`\".\r\n\r\nIt's okay if you report an apparent STL bug that turns out to be a compiler bug or surprising-yet-Standard behavior.\r\nJust try to follow these rules, so we can spend more time fixing bugs and implementing features.\r\n\r\n# How To Build With The Visual Studio IDE\r\n\r\n1. Install Visual Studio 2022 17.13 Preview 2 or later.\r\n    * Select \"Windows 11 SDK (10.0.22621.0)\" in the VS Installer.\r\n    * Select \"MSVC v143 - VS 2022 C++ ARM64/ARM64EC build tools (Latest)\" in the VS Installer\r\n    if you would like to build the ARM64/ARM64EC target.\r\n    * Select \"MSVC v143 - VS 2022 C++ ARM build tools (Latest)\" in the VS Installer\r\n    if you would like to build the ARM target.\r\n    * We recommend selecting \"C++ CMake tools for Windows\" in the VS Installer.\r\n    This will ensure that you're using supported versions of CMake and Ninja.\r\n    * Otherwise, install [CMake][] 3.30.0 or later, and [Ninja][] 1.12.1 or later.\r\n    * Make sure [Python][] 3.13 or later is available to CMake.\r\n2. Open Visual Studio, and choose the \"Clone or check out code\" option. Enter the URL of this repository,\r\n   `https://github.com/microsoft/STL`.\r\n3. Open a terminal in the IDE with `` Ctrl + ` `` (by default) or press on \"View\" in the top bar, and then \"Terminal\".\r\n4. In the terminal, invoke `git submodule update --init --progress`\r\n5. Choose the architecture you wish to build in the IDE, and build as you would any other project. All necessary CMake\r\n   settings are set by `CMakePresets.json`.\r\n\r\n# How To Build With A Native Tools Command Prompt\r\n\r\n1. Install Visual Studio 2022 17.13 Preview 2 or later.\r\n    * Select \"Windows 11 SDK (10.0.22621.0)\" in the VS Installer.\r\n    * Select \"MSVC v143 - VS 2022 C++ ARM64/ARM64EC build tools (Latest)\" in the VS Installer\r\n    if you would like to build the ARM64/ARM64EC target.\r\n    * Select \"MSVC v143 - VS 2022 C++ ARM build tools (Latest)\" in the VS Installer\r\n    if you would like to build the ARM target.\r\n    * We recommend selecting \"C++ CMake tools for Windows\" in the VS Installer.\r\n    This will ensure that you're using supported versions of CMake and Ninja.\r\n    * Otherwise, install [CMake][] 3.30.0 or later, and [Ninja][] 1.12.1 or later.\r\n    * Make sure [Python][] 3.13 or later is available to CMake.\r\n2. Open a command prompt.\r\n3. Change directories to a location where you'd like a clone of this STL repository.\r\n4. `git clone https://github.com/microsoft/STL.git --recurse-submodules`\r\n\r\nTo build the x86 target:\r\n\r\n1. Open an \"x86 Native Tools Command Prompt for VS 2022 Preview\".\r\n2. Change directories to the previously cloned `STL` directory.\r\n3. `cmake --preset x86`\r\n4. `cmake --build --preset x86`\r\n\r\nTo build the x64 target (recommended):\r\n\r\n1. Open an \"x64 Native Tools Command Prompt for VS 2022 Preview\".\r\n2. Change directories to the previously cloned `STL` directory.\r\n3. `cmake --preset x64`\r\n4. `cmake --build --preset x64`\r\n\r\nTo build the ARM target:\r\n\r\n1. `\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x64_arm`\r\n    * If you installed VS to a non-default location, change this path accordingly.\r\n2. Change directories to the previously cloned `STL` directory.\r\n3. `cmake --preset ARM`\r\n4. `cmake --build --preset ARM`\r\n\r\nTo build the ARM64 target:\r\n\r\n1. `\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x64_arm64`\r\n    * If you installed VS to a non-default location, change this path accordingly.\r\n2. Change directories to the previously cloned `STL` directory.\r\n3. `cmake --preset ARM64`\r\n4. `cmake --build --preset ARM64`\r\n\r\nTo build the ARM64EC target:\r\n\r\n1. `\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x64_arm64`\r\n    * If you installed VS to a non-default location, change this path accordingly.\r\n2. Change directories to the previously cloned `STL` directory.\r\n3. `cmake --preset ARM64EC`\r\n4. `cmake --build --preset ARM64EC`\r\n\r\n# How To Consume\r\n\r\nConsumption of the built library is largely based on the build system you're using. There are at least 2 directories\r\nyou need to hook up. Assuming you built the x64 target with the Visual Studio IDE, with the STL repository cloned to\r\n`C:\\Dev\\STL`, build outputs will end up at `C:\\Dev\\STL\\out\\x64\\out`. Ensure that the `inc` directory is searched\r\nfor headers, and that `lib\\{architecture}` is searched for link libraries, before any defaults supplied by MSVC. The\r\nnames of the import and static libraries are the same as those that ship with MSVC. As a result, the compiler `/MD`,\r\n`/MDd`, `/MT`, or `/MTd` switches will work without modification of your build scripts or command-line muscle memory.\r\n\r\nShould you choose to use the DLL flavors, the DLLs to deploy are built to `bin\\{architecture}`. Note that the DLLs\r\ngenerated by the CMake build system here have a suffix, defaulting to `_oss`, which distinguishes them from the binaries\r\nthat ship with MSVC. That avoids any conflict with the DLLs installed by the [redistributables][] into System32 and\r\nensures that other components wanting to be a \"guest in your process\", like print drivers and shell extensions, see the\r\nexport surface of the STL they were built with. Otherwise, the \"`msvcp140.dll`\" you deployed in the same directory as\r\nyour .exe would \"win\" over the versions in System32.\r\n\r\nThe compiler looks for include directories according to the `INCLUDE` environment variable, and the linker looks for\r\nimport library directories according to the `LIB` environment variable, and the Windows loader will (eventually) look\r\nfor DLL dependencies according to directories in the `PATH` environment variable.\r\nThe build generates a batch script named `set_environment.bat` in the output directory. If you run this script in a VS\r\nDeveloper Command Prompt, it will insert the proper directories into the `INCLUDE`, `LIB`, and `PATH` environment\r\nvariables to ensure that the built headers and libraries are used.\r\n\r\n## Complete Example Using x64 DLL Flavor\r\n\r\nFrom an \"x64 Native Tools Command Prompt for VS 2022 Preview\":\r\n\r\n```\r\nC:\\Users\\username\\Desktop>C:\\Dev\\STL\\out\\x64\\set_environment.bat\r\n\r\nC:\\Users\\username\\Desktop>type example.cpp\r\n#include <iostream>\r\n\r\nint main() {\r\n    std::cout << \"Hello STL OSS world!\\n\";\r\n}\r\n\r\nC:\\Users\\username\\Desktop>cl /nologo /EHsc /W4 /WX /MDd /std:c++latest .\\example.cpp\r\nexample.cpp\r\n\r\nC:\\Users\\username\\Desktop>.\\example.exe\r\nHello STL OSS world!\r\n\r\nC:\\Users\\username\\Desktop>dumpbin /DEPENDENTS .\\example.exe | findstr msvcp\r\n    msvcp140d_oss.dll\r\n```\r\n\r\n# How To Run The Tests With A Native Tools Command Prompt\r\n\r\n1. Follow either [How To Build With A Native Tools Command Prompt][] or [How To Build With The Visual Studio IDE][].\r\n2. Acquire [Python][] 3.13 or newer and have it on the `PATH` (or run it directly using its absolute or relative path).\r\n3. Have LLVM's `bin` directory on the `PATH` (so `clang-cl.exe` is available).\r\n    * We recommend selecting \"C++ Clang tools for Windows\" in the VS Installer. This will automatically add LLVM to the\r\n    `PATH` of the x86 and x64 Native Tools Command Prompts, and will ensure that you're using a supported version.\r\n    * Otherwise, use [LLVM's installer][] and choose to add LLVM to your `PATH` during installation.\r\n4. Follow the instructions below.\r\n\r\n## Running The Tests\r\n\r\nOur tests are currently split across three test suites that are located at `tests\\std`, `tests\\tr1`, and\r\n`llvm-project\\libcxx\\test\\std`. The test runner `${PROJECT_BINARY_DIR}\\tests\\utils\\stl-lit\\stl-lit.py` accepts paths to\r\ndirectories in the test suites and runs all tests located in the subtree rooted at those paths. This can mean executing\r\nthe entirety of a single test suite, running all tests under a category in `libcxx`, or running a single test in `std`\r\nand `tr1`.\r\n\r\nSome useful `stl-lit.py` options:\r\n* `-v` (verbose) tells `stl-lit.py` to show us output from failed test cases.\r\n* `-Dnotags=ASAN` disables the \"extra ASan configs\" that we typically run only in CI. This is useful to limit runtime\r\n  for full validation runs, but often omitted when running just a few test cases to enable the extra ASan coverage.\r\n\r\n## Examples\r\n\r\nThese examples assume that your current directory is `C:\\Dev\\STL\\out\\x64`.\r\n\r\n* This command will run all of the test suites:\r\n  + `python tests\\utils\\stl-lit\\stl-lit.py -Dnotags=ASAN ..\\..\\llvm-project\\libcxx\\test ..\\..\\tests\\std ..\\..\\tests\\tr1`\r\n* This command will run only the std test suite.\r\n  + `python tests\\utils\\stl-lit\\stl-lit.py -Dnotags=ASAN ..\\..\\tests\\std`\r\n* If you want to run a subset of a test suite, you need to point it to the right place in the sources. The following\r\nwill run the single test found under `VSO_0000000_any_calling_conventions`.\r\n  + `python tests\\utils\\stl-lit\\stl-lit.py -Dnotags=ASAN ..\\..\\tests\\std\\tests\\VSO_0000000_any_calling_conventions`\r\n* You can invoke `stl-lit` with any arbitrary subdirectory of a test suite. In libcxx this allows you to have finer\r\ncontrol over what category of tests you would like to run. The following will run all the libcxx map tests.\r\n  + `python tests\\utils\\stl-lit\\stl-lit.py -Dnotags=ASAN ..\\..\\llvm-project\\libcxx\\test\\std\\containers\\associative\\map`\r\n* You can also use the `--filter` option to include tests whose names match a regular expression. The following\r\n  command will run tests with \"atomic_wait\" in their names in both the std and libcxx test suites.\r\n  + `python tests\\utils\\stl-lit\\stl-lit.py ..\\..\\llvm-project\\libcxx\\test ..\\..\\tests\\std --filter=atomic_wait`\r\n* There's also a `--filter-out` option to exclude tests matching a regular expression;\r\n  `--filter=iota --filter-out=view` would run tests with names matching \"iota\" but not \"view\".\r\n\r\n## Interpreting The Results Of Tests\r\n\r\n`stl-lit.py` prints the result of each test. The format of each result is\r\n`{Result Code}: {Test Suite Name} :: {Test Name}:{Configuration Number}`.\r\n\r\nExample:\r\n```\r\n-- Testing: 28 tests, 12 workers --\r\nPASS: tr1 :: tests/cwchar1:01 (1 of 28)\r\nPASS: tr1 :: tests/cwchar1:11 (2 of 28)\r\nPASS: tr1 :: tests/cwchar1:02 (3 of 28)\r\nPASS: tr1 :: tests/cwchar1:03 (4 of 28)\r\nPASS: tr1 :: tests/cwchar1:00 (5 of 28)\r\nPASS: tr1 :: tests/cwchar1:04 (6 of 28)\r\nPASS: tr1 :: tests/cwchar1:05 (7 of 28)\r\nPASS: tr1 :: tests/cwchar1:09 (8 of 28)\r\nPASS: tr1 :: tests/cwchar1:06 (9 of 28)\r\nUNSUPPORTED: tr1 :: tests/cwchar1:20 (10 of 28)\r\nUNSUPPORTED: tr1 :: tests/cwchar1:21 (11 of 28)\r\nUNSUPPORTED: tr1 :: tests/cwchar1:22 (12 of 28)\r\nUNSUPPORTED: tr1 :: tests/cwchar1:23 (13 of 28)\r\nUNSUPPORTED: tr1 :: tests/cwchar1:24 (14 of 28)\r\nPASS: tr1 :: tests/cwchar1:07 (15 of 28)\r\nPASS: tr1 :: tests/cwchar1:08 (16 of 28)\r\nPASS: tr1 :: tests/cwchar1:10 (17 of 28)\r\nPASS: tr1 :: tests/cwchar1:16 (18 of 28)\r\nPASS: tr1 :: tests/cwchar1:17 (19 of 28)\r\nPASS: tr1 :: tests/cwchar1:14 (20 of 28)\r\nPASS: tr1 :: tests/cwchar1:12 (21 of 28)\r\nPASS: tr1 :: tests/cwchar1:13 (22 of 28)\r\nPASS: tr1 :: tests/cwchar1:19 (23 of 28)\r\nPASS: tr1 :: tests/cwchar1:18 (24 of 28)\r\nPASS: tr1 :: tests/cwchar1:15 (25 of 28)\r\nPASS: tr1 :: tests/cwchar1:25 (26 of 28)\r\nPASS: tr1 :: tests/cwchar1:26 (27 of 28)\r\nPASS: tr1 :: tests/cwchar1:27 (28 of 28)\r\n\r\nTesting Time: 3.96s\r\n  Expected Passes    : 23\r\n  Unsupported Tests  : 5\r\n```\r\n\r\nIn the above example, we see that 23 tests succeeded and 5 were unsupported.\r\n\r\n### Result Code Values\r\n\r\nOur tests use the standard [lit result codes][], and an undocumented result code: `SKIPPED`. For our tests, only the\r\n`PASS`, `XFAIL`, `XPASS`, `FAIL`, `UNSUPPORTED`, and `SKIPPED` result codes are relevant.\r\n\r\nThe `PASS` and `FAIL` result codes are self-explanatory. We want our tests to `PASS` and not `FAIL`.\r\n\r\nThe `XPASS` and `XFAIL` result codes are less obvious. `XPASS` is actually a failure result and indicates that we\r\nexpected a test to fail but it passed. `XFAIL` is a successful result and indicates that we expected the test to fail\r\nand it did. Typically an `XPASS` result means that the `expected_results.txt` file for the test suite needs to be\r\nmodified. If the `XPASS` result is a test legitimately passing, the usual course of action would be to remove a `FAIL`\r\nentry from the `expected_results.txt`. However, some tests from `libcxx` mark themselves as `XFAIL` (meaning they\r\nexpect to fail) for features they have added tests for but have yet to implement in `libcxx`. If the STL implements\r\nthose features first the tests will begin passing unexpectedly for us and return `XPASS` results. In order to resolve\r\nthis it is necessary to add a `PASS` entry to the `expected_results.txt` of the test suite in question.\r\n\r\nThe `UNSUPPORTED` result code means that the requirements for a test are not met and so it will not be run. Currently,\r\nall tests which use the `/clr` or `/clr:pure` options are unsupported. Also, the `/BE` option is unsupported for x86.\r\n\r\nThe `SKIPPED` result code indicates that a given test was explicitly skipped by adding a `SKIPPED` entry to the\r\n`expected_results.txt`. A test may be skipped for a number of reasons, which include, but are not limited to:\r\n* being an incorrect test\r\n* taking a very long time to run\r\n* failing or passing for the incorrect reason\r\n\r\n### Debugging Individual Tests\r\n\r\nWhile `stl-lit` is super awesome in finding out that *something* is wrong or not even compiling, it is not really\r\nhelpful in debugging *what* is going wrong. However, debugging individual tests is rather simple given some additional\r\nsteps. Let's assume we want to debug a new feature with tests located in `tests\\std\\tests\\GH_XXXX_meow`.\r\n\r\nAs always, build the STL from your branch and run the tests:\r\n```\r\nC:\\STL\\out\\x64> ninja\r\nC:\\STL\\out\\x64> python tests\\utils\\stl-lit\\stl-lit.py -v C:\\STL\\tests\\std\\tests\\GH_XXXX_meow\r\n```\r\n\r\nLet's assume one of the tests fails an assert and we want to debug that configuration. `stl-lit` will conveniently print\r\nthe build command, which is far too long to provide here in full. The important part is to add the following options to\r\nprovide debug symbols: `/Zi /Fdbark.pdb`.\r\n\r\nYou can replace `bark` with any descriptive name you like. Add these before the `\"-link\"` option in the command line\r\nand recompile. Example:\r\n```\r\nC:\\STL\\out\\x64>cl \"C:\\STL\\tests\\std\\tests\\GH_XXXX_meow\\test.cpp\" [... more arguments ...]\r\n\"-FeC:\\STL\\out\\x64\\tests\\std\\tests\\GH_XXXX_meow\\Output\\02\\GH_XXXX_meow.exe\" /Zi /Fdbark.pdb \"-link\"\r\n[... more arguments ...]\r\n```\r\n\r\nYou can now start debugging the test via:\r\n```\r\ndevenv \"C:\\STL\\out\\x64\\tests\\std\\tests\\GH_XXXX_meow\\Output\\02\\GH_XXXX_meow.exe\"\r\n       \"C:\\STL\\tests\\std\\tests\\GH_XXXX_meow\\test.cpp\"\r\n```\r\n\r\nHowever, this might not work right away, as Visual Studio may complain about a missing `msvcp140_oss.dll`. The reason\r\nis that the STL builds those and other DLLs itself and we should under no circumstances overwrite the installed ones.\r\nIf you are testing one of the configurations with dynamic linkage (`/MD` or `/MDd`) the easiest solution is to add the\r\nbuild folder to your path:\r\n```\r\nset PATH=C:\\STL\\out\\x64\\out\\bin\\amd64;%PATH%\r\n```\r\n\r\n## Running Tests With Address Sanitizer (ASan)\r\n\r\nYou don't need any extra steps to run with test code and the code in STL headers instrumented with [ASan][].\r\nThe test matrices include both ASan and non-ASan configurations.\r\n\r\nHowever, to instrument the separately-compiled code (the DLL, the satellites, the [Import Library][] - everything that's\r\nin `/stl/src`), you need to build the STL with ASan. Change the build steps to add `-DSTL_ASAN_BUILD=ON`:\r\n\r\n```\r\ncmake --preset x64 -DSTL_ASAN_BUILD=ON\r\ncmake --build --preset x64\r\n```\r\n\r\nASan-instrumented STL binaries require that the executable be instrumented as well, so you'll have to skip the non-ASan\r\nconfigurations by passing `-Dtags=ASAN` to `stl-lit.py`:\r\n\r\n```\r\npython tests\\utils\\stl-lit\\stl-lit.py ..\\..\\tests\\std\\tests\\VSO_0000000_vector_algorithms -Dtags=ASAN -v\r\n```\r\n\r\n# Benchmarking\r\n\r\nFor performance-sensitive code &ndash; containers, algorithms, and the like &ndash;\r\nyou may wish to write and/or run benchmarks, and the STL team will likely\r\nrun any benchmarks we do have in our PR process. Additionally,\r\nif you are writing a \"performance improvement\" PR, please add and run benchmarks\r\nto show that the PR does, in fact, improve performance.\r\n\r\nThe benchmarking code is located in `benchmarks`. Adding a new benchmark is as easy as adding a new file\r\nto `benchmarks/src`, and then adding `add_benchmark(<name> <source_file>)`\r\nto `benchmarks/CMakeLists.txt`.\r\nYou may also modify an existing benchmark file. We use Google's [Benchmark][gbenchmark] library,\r\nso you may find [their documentation][gbenchmark:docs] helpful, and you can also read the existing code\r\nfor how _we_ use it.\r\n\r\nTo run benchmarks, you'll need to first build the STL, then build the benchmarks:\r\n\r\n```cmd\r\ncmake --preset x64\r\ncmake --build --preset x64\r\ncmake -B out\\bench -S benchmarks -G Ninja -DSTL_BINARY_DIR=out\\x64\r\ncmake --build out\\bench\r\n```\r\n\r\nYou can then run your benchmark with:\r\n\r\n```cmd\r\nout\\bench\\benchmark-<benchmark-name> --benchmark_out=<file> --benchmark_out_format=csv\r\n```\r\n\r\nAnd then you can copy this CSV file into Excel, or another spreadsheet program. For example:\r\n\r\n```cmd\r\nout\\bench\\benchmark-std_copy --benchmark_out=benchmark-std_copy-results.csv --benchmark_out_format=csv\r\n```\r\n\r\nIf you want to see all the other flags you can pass, run:\r\n\r\n```cmd\r\nout\\bench\\benchmark-<benchmark-name> --help\r\n```\r\n\r\n# Editing And Testing The Debugger Visualizer\r\n\r\n### Modify The Visualizer\r\n\r\nTo modify how components are visualized in the debugger, edit the file `stl\\debugger\\STL.natvis`. For more information\r\non how to modify this file, check the [natvis documentation][].\r\n\r\n### Test Your Changes\r\n\r\nYou can add the natvis file to any Visual Studio C++ project if you right-click your project > Add > Existing Item and\r\nselect the STL.natvis file. After doing this you should be able to see your changes in a Visual Studio debugging\r\nsession.\r\n\r\n# Block Diagram\r\n\r\nThe STL is built atop other compiler support libraries that ship with Windows and Visual Studio, like the UCRT,\r\nVCRuntime, and VCStartup. The following diagram describes the dependencies between those components and their ship\r\nvehicles.\r\n\r\n```mermaid\r\nflowchart TB\r\n%%{ init: {\"flowchart\": {\"htmlLabels\": true}} }%%\r\n    classDef default text-align:left\r\n    subgraph VisualStudioSubgraph[Visual Studio]\r\n        direction TB\r\n        STLNode(\"<b>STL</b>\r\n        This repo; provides C++ Standard Library headers, separately\r\n        compiled implementations of most of the iostreams functionality,\r\n        and a few runtime support components like std::exception_ptr.\")\r\n        subgraph VCRuntimeSubgraph[VCRuntime]\r\n            direction TB\r\n            VCStartupNode(\"<b>VCStartup</b>\r\n            Provides compiler support mechanisms that\r\n            live in each binary; such as machinery to\r\n            call constructors and destructors for global\r\n            variables, the entry point, and the /GS cookie.\r\n\r\n            Merged into static and import libraries of VCRuntime.\")\r\n            VCRuntimeNode(\"<b>VCRuntime</b>\r\n            Provides compiler support mechanisms that can be\r\n            shared between binaries; code that the compiler calls\r\n            on your behalf, such as the C++ exception handling\r\n            runtime, string.h intrinsics, math intrinsics, and\r\n            declarations for CPU-vendor-specific intrinsics.\")\r\n        end\r\n    end\r\n    subgraph WindowsSDKSubgraph[Windows SDK]\r\n        UniversalCRTNode(\"<b>Universal CRT</b>\r\n        Windows component that provides C library support, such as printf,\r\n        C locales, and some POSIX-like shims for the Windows API, like _stat.\")\r\n    end\r\n    STLNode ==> VCRuntimeSubgraph & UniversalCRTNode\r\n    VCStartupNode ==> VCRuntimeNode ==> UniversalCRTNode\r\n```\r\n\r\n# Contributing\r\n\r\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\r\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\r\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\r\n\r\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\r\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\r\nprovided by the bot. You will only need to do this once across all repos using our CLA.\r\n\r\nSee [CONTRIBUTING.md][] for more information.\r\n\r\n# Code Of Conduct\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct][].\r\n\r\nSee [CODE_OF_CONDUCT.md][] for more information.\r\n\r\n# License\r\n\r\nCopyright (c) Microsoft Corporation.\r\n\r\nSPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\r\n\r\n[Changelog]: https://github.com/microsoft/STL/wiki/Changelog\r\n[clang-format]: https://clang.llvm.org/docs/ClangFormat.html\r\n[CMake]: https://cmake.org/download\r\n[CODE_OF_CONDUCT.md]: CODE_OF_CONDUCT.md\r\n[Compiler Explorer]: https://godbolt.org\r\n[CONTRIBUTING.md]: CONTRIBUTING.md\r\n[Developer Community]: https://aka.ms/feedback/report?space=62\r\n[Discord server]: https://discord.gg/XWanNww\r\n[How To Build With A Native Tools Command Prompt]: #how-to-build-with-a-native-tools-command-prompt\r\n[How To Build With The Visual Studio IDE]: #how-to-build-with-the-visual-studio-ide\r\n[LICENSE.txt]: LICENSE.txt\r\n[LLVM's installer]: https://releases.llvm.org/download.html\r\n[LWG issues]: https://cplusplus.github.io/LWG/lwg-toc.html\r\n[LWG tag]: https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3ALWG\r\n[Microsoft Open Source Code of Conduct]: https://opensource.microsoft.com/codeofconduct/\r\n[N5001]: https://wg21.link/N5001\r\n[NOTICE.txt]: NOTICE.txt\r\n[Ninja]: https://ninja-build.org\r\n[STL-CI-badge]: https://dev.azure.com/vclibs/STL/_apis/build/status%2FSTL-CI?branchName=main \"STL-CI\"\r\n[STL-CI-link]: https://dev.azure.com/vclibs/STL/_build/latest?definitionId=4&branchName=main\r\n[STL-ASan-CI-badge]: https://dev.azure.com/vclibs/STL/_apis/build/status%2FSTL-ASan-CI?branchName=main \"STL-ASan-CI\"\r\n[STL-ASan-CI-link]: https://dev.azure.com/vclibs/STL/_build/latest?definitionId=5&branchName=main\r\n[Python]: https://www.python.org/downloads/windows/\r\n[Roadmap]: https://github.com/microsoft/STL/wiki/Roadmap\r\n[Status Chart]: https://microsoft.github.io/STL/\r\n[bug tag]: https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3Abug\r\n[cxx20 tag]: https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3Acxx20\r\n[enhancement tag]: https://github.com/microsoft/STL/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement\r\n[gbenchmark]: https://github.com/google/benchmark\r\n[gbenchmark:docs]: https://github.com/google/benchmark/blob/main/docs/user_guide.md\r\n[hub]: https://support.microsoft.com/en-us/help/4021566/windows-10-send-feedback-to-microsoft-with-feedback-hub-app\r\n[libcxx]: https://libcxx.llvm.org\r\n[lit]: https://llvm.org/docs/CommandGuide/lit.html\r\n[lit result codes]: https://llvm.org/docs/CommandGuide/lit.html#test-status-results\r\n[redistributables]: https://learn.microsoft.com/en-US/cpp/windows/latest-supported-vc-redist\r\n[natvis documentation]: https://learn.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects\r\n[ASan]: https://learn.microsoft.com/en-us/cpp/sanitizers/asan\r\n[Import Library]: /docs/import_library.md\r\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.59375,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.9 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet) and [Xamarin](https://github.com/xamarin).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/security.md/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/security.md/msrc/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/security.md/msrc/pgp).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/security.md/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/security.md/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "azure-devops",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 3.58203125,
          "content": "# Copyright (c) Microsoft Corporation.\r\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\r\n\r\n# Build STL targeting x86, x64, arm, arm64\r\n\r\nvariables:\r\n  - template: azure-devops/config.yml\r\n\r\npr:\r\n  drafts: false\r\n\r\nstages:\r\n  - stage: Code_Format\r\n    displayName: 'Code Format'\r\n    pool:\r\n      name: ${{ variables.poolName }}\r\n      demands: ${{ variables.poolDemands }}\r\n    jobs:\r\n      - template: azure-devops/format-validation.yml\r\n\r\n  - stage: Early_Build_x64\r\n    dependsOn: []\r\n    displayName: 'Early Build x64'\r\n    pool:\r\n      name: ${{ variables.poolName }}\r\n      demands: ${{ variables.poolDemands }}\r\n    jobs:\r\n      - template: azure-devops/build-and-test.yml\r\n        parameters:\r\n          hostArch: x64\r\n          targetArch: x64\r\n          analyzeBuild: true\r\n          buildBenchmarks: true\r\n          numShards: 1\r\n          skipTesting: true\r\n\r\n  - stage: Early_Build_x86\r\n    dependsOn: []\r\n    displayName: 'Early Build x86'\r\n    pool:\r\n      name: ${{ variables.poolName }}\r\n      demands: ${{ variables.poolDemands }}\r\n    jobs:\r\n      - template: azure-devops/build-and-test.yml\r\n        parameters:\r\n          hostArch: x86\r\n          targetArch: x86\r\n          analyzeBuild: true\r\n          buildBenchmarks: true\r\n          numShards: 1\r\n          skipTesting: true\r\n\r\n  - stage: Early_Build_ARM\r\n    dependsOn: []\r\n    displayName: 'Early Build ARM'\r\n    pool:\r\n      name: ${{ variables.poolName }}\r\n      demands: ${{ variables.poolDemands }}\r\n    jobs:\r\n      - template: azure-devops/build-and-test.yml\r\n        parameters:\r\n          hostArch: x64\r\n          targetArch: arm\r\n          analyzeBuild: true\r\n          numShards: 1\r\n          skipTesting: true\r\n\r\n  - stage: Early_Build_ARM64\r\n    dependsOn: []\r\n    displayName: 'Early Build ARM64'\r\n    pool:\r\n      name: ${{ variables.poolName }}\r\n      demands: ${{ variables.poolDemands }}\r\n    jobs:\r\n      - template: azure-devops/build-and-test.yml\r\n        parameters:\r\n          hostArch: x64\r\n          targetArch: arm64\r\n          analyzeBuild: true\r\n          buildBenchmarks: true\r\n          numShards: 1\r\n          skipTesting: true\r\n\r\n  - stage: Build_And_Test_x64\r\n    dependsOn:\r\n      - Code_Format\r\n      - Early_Build_x64\r\n      - Early_Build_x86\r\n      - Early_Build_ARM\r\n      - Early_Build_ARM64\r\n    displayName: 'Build and Test x64'\r\n    pool:\r\n      name: ${{ variables.poolName }}\r\n      demands: ${{ variables.poolDemands }}\r\n    jobs:\r\n      - template: azure-devops/build-and-test.yml\r\n        parameters:\r\n          hostArch: x64\r\n          targetArch: x64\r\n\r\n  - stage: Build_And_Test_x86\r\n    dependsOn: Build_And_Test_x64\r\n    displayName: 'Build and Test x86'\r\n    pool:\r\n      name: ${{ variables.poolName }}\r\n      demands: ${{ variables.poolDemands }}\r\n    jobs:\r\n      - template: azure-devops/build-and-test.yml\r\n        parameters:\r\n          hostArch: x86\r\n          targetArch: x86\r\n\r\n  - stage: Build_And_Test_ARM\r\n    dependsOn: Build_And_Test_x64\r\n    displayName: 'Build and Test ARM'\r\n    pool:\r\n      name: ${{ variables.poolName }}\r\n      demands: ${{ variables.poolDemands }}\r\n    jobs:\r\n      - template: azure-devops/build-and-test.yml\r\n        parameters:\r\n          hostArch: x64\r\n          targetArch: arm\r\n          testsBuildOnly: true\r\n\r\n  - stage: Build_And_Test_ARM64\r\n    dependsOn: Build_And_Test_x64\r\n    displayName: 'Build and Test ARM64'\r\n    pool:\r\n      name: ${{ variables.poolName }}\r\n      demands: ${{ variables.poolDemands }}\r\n    jobs:\r\n      - template: azure-devops/build-and-test.yml\r\n        parameters:\r\n          hostArch: x64\r\n          targetArch: arm64\r\n          testsBuildOnly: true\r\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "boost-math",
          "type": "commit",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "llvm-project",
          "type": "commit",
          "content": null
        },
        {
          "name": "stl",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}