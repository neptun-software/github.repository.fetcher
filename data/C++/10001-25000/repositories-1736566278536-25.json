{
  "metadata": {
    "timestamp": 1736566278536,
    "page": 25,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "simdjson/simdjson",
      "stars": 19561,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 1.83203125,
          "content": "version: '{build}'\nbranches: { only: [ master ] }\nconfiguration: Release\nimage: Visual Studio 2019\nplatform: x64\n\ncache:\n  - C:\\dependencies -> dependencies\\CMakeLists.txt\n\nenvironment:\n  # Forward slash is used because this is used in CMake as is\n  simdjson_DEPENDENCY_CACHE_DIR: C:/dependencies\n\n  matrix:\n    - job_name: VS2019\n      CMAKE_ARGS: -A %Platform%\n    - job_name: VS2019ARM\n      CMAKE_ARGS: -A ARM64   -DSIMDJSON_DEVELOPER_MODE=ON -DCMAKE_CROSSCOMPILING=1 -D SIMDJSON_GOOGLE_BENCHMARKS=OFF # Does Google Benchmark builds under VS ARM?\n    - job_name: VS2017 (Static, No Threads)\n      image: Visual Studio 2017\n      CMAKE_ARGS: -A %Platform%   -DSIMDJSON_DEVELOPER_MODE=ON -DBUILD_SHARED_LIBS=OFF -DSIMDJSON_ENABLE_THREADS=OFF\n      CTEST_ARGS: -LE explicitonly\n    - job_name: VS2019 (Win32)\n      platform: Win32\n      CMAKE_ARGS: -A %Platform%   -DSIMDJSON_DEVELOPER_MODE=ON -DBUILD_SHARED_LIBS=ON -DSIMDJSON_ENABLE_THREADS=ON # This should be the default. Testing anyway.\n      CTEST_ARGS: -LE explicitonly\n    - job_name: VS2019 (Win32, No Exceptions)\n      platform: Win32\n      CMAKE_ARGS: -A %Platform%   -DSIMDJSON_DEVELOPER_MODE=ON -DBUILD_SHARED_LIBS=ON -DSIMDJSON_ENABLE_THREADS=ON -DSIMDJSON_EXCEPTIONS=OFF\n      CTEST_ARGS: -LE explicitonly\n    - job_name: VS2015\n      image: Visual Studio 2015\n      CMAKE_ARGS: -A %Platform%   -DSIMDJSON_DEVELOPER_MODE=ON -DBUILD_SHARED_LIBS=OFF -DSIMDJSON_ENABLE_THREADS=OFF\n      CTEST_ARGS: -LE explicitonly\n\nbuild_script:\n  - mkdir build\n  - cd build\n  - cmake --version\n  - cmake %CMAKE_ARGS% ..\n  - cmake -LH ..\n  - cmake --build . --config %Configuration% --verbose --parallel\n\nfor:\n-\n  matrix:\n    except:\n      - job_name: VS2019ARM\n\n  test_script:\n    - ctest --output-on-failure -C %Configuration% --verbose %CTEST_ARGS% --parallel\n\nclone_folder: c:\\projects\\simdjson\n\nmatrix:\n  fast_finish: true\n"
        },
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.59765625,
          "content": "task:\n  timeout_in: 120m\n  freebsd_instance:\n    matrix:\n      - image_family: freebsd-13-0-snap\n\n  env:\n    ASSUME_ALWAYS_YES: YES\n    simdjson_DEPENDENCY_CACHE_DIR: $HOME/.dep_cache\n  dep_cache:\n    folder: $HOME/.dep_cache\n    reupload_on_changes: false\n    fingerprint_script: cat dependencies/CMakeLists.txt\n  setup_script:\n    - pkg update -f\n    - pkg install bash\n    - pkg install cmake\n    - pkg install git\n  build_script:\n    - mkdir build\n    - cd build\n    - cmake -DSIMDJSON_BASH=OFF  -DSIMDJSON_GIT=OFF ..\n    - make\n  test_script:\n    - cd build\n    - ctest --output-on-failure -LE explicitonly\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0185546875,
          "content": "BasedOnStyle: LLVM\n"
        },
        {
          "name": ".clangd",
          "type": "blob",
          "size": 1.365234375,
          "content": "CompileFlags:\n    CompilationDatabase: build\n    Add:\n        - -Werror -Wall -Wextra -Weffc++ -Wsign-compare -Wshadow -Wwrite-strings -Wpointer-arith -Winit-self -Wconversion -Wno-sign-conversion\n        - -Wundefined-inline\nDiagnostics:\n    Suppress:\n        - misc-unused-alias-decls\n        - misc-unused-using-decls\n        - misc-definitions-in-headers # TODO fix and remove these violations\n---\nIf:\n    PathMatch:\n        - include/.*\n        - src/.*\n    PathExclude:\n        - include/simdjson.h\n        - src/simdjson.cpp\nCompileFlags:\n    Add:\n        - -Wno-unneeded-internal-declaration\n        - -Wno-undefined-internal # TODO fix and remove these violations\n        - -Wno-unused-function\n        - -Wno-unused-const-variable\nDiagnostics:\n    Suppress:\n        - pp_including_mainfile_in_preamble\n        - unused-includes\n---\n# Amalgamated files that require or partly define an implementation\nIf:\n    PathMatch:\n        - .*/(arm64|fallback|haswell|icelake|ppc64|westmere)/begin.h\n        - .*/generic/.*\nDiagnostics:\n    Suppress:\n        - pragma_attribute_no_pop_eof\n---\n# clang has a bad time detecting the push/pop together in src/ for some reason\nIf:\n    PathMatch:\n        - include/simdjson/.*/end.h\n        - src/(arm64|fallback|haswell|icelake|ppc64|westmere).cpp\nDiagnostics:\n    Suppress:\n        - pragma_attribute_no_pop_eof\n        - pragma_attribute_stack_mismatch\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1396484375,
          "content": "*\n!.git\n!Makefile\n!amalgamate.py\n!benchmark\n!dependencies\n!include\n!jsonchecker\n!jsonexamples\n!scripts\n!singleheader\n!src\n!style\n!tests\n!tools\n"
        },
        {
          "name": ".drone.yml",
          "type": "blob",
          "size": 13.53515625,
          "content": "kind: pipeline\nname: gcc9\nplatform: { os: linux, arch: amd64 }\nsteps:\n- name: Build and Test\n  image: gcc:9\n  environment:\n    CC: gcc\n    CXX: g++\n    BUILD_FLAGS: -- -j\n    CMAKE_FLAGS: -DBUILD_SHARED_LIBS=OFF -DSIMDJSON_IMPLEMENTATION=icelake;haswell;westmere;fallback\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n  commands:\n    - echo \"deb http://deb.debian.org/debian buster-backports main\" >> /etc/apt/sources.list\n    - apt-get update -qq\n    - apt-get -t buster-backports install -y cmake\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ctest $CTEST_FLAGS -L acceptance -LE per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=icelake ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=haswell ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=westmere ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=fallback ctest $CTEST_FLAGS -L per_implementation\n    - ctest $CTEST_FLAGS -LE \"acceptance|per_implementation\" # Everything we haven't run yet, run now.\n---\nkind: pipeline\nname: clang6\nplatform: { os: linux, arch: amd64 }\nsteps:\n- name: Build and Test\n  image: conanio/clang60\n  user: root\n  environment:\n    CC: clang-6.0\n    CXX: clang++-6.0\n    BUILD_FLAGS: -- -j\n    CMAKE_FLAGS: -DBUILD_SHARED_LIBS=OFF -DSIMDJSON_IMPLEMENTATION=icelake;haswell;westmere;fallback\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n  commands:\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ctest $CTEST_FLAGS -L acceptance -LE per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=icelake ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=haswell ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=westmere ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=fallback ctest $CTEST_FLAGS -L per_implementation\n    - ctest $CTEST_FLAGS -LE \"acceptance|per_implementation\" # Everything we haven't run yet, run now.\n---\nkind: pipeline\nname: dynamic-gcc9\nplatform: { os: linux, arch: amd64 }\nsteps:\n- name: Build and Test\n  image: gcc:9\n  environment:\n    CC: gcc\n    CXX: g++\n    BUILD_FLAGS: -- -j\n    CMAKE_FLAGS: -DBUILD_SHARED_LIBS=ON\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n  commands:\n    - echo \"deb http://deb.debian.org/debian buster-backports main\" >> /etc/apt/sources.list\n    - apt-get update -qq\n    - apt-get -t buster-backports install -y cmake\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ctest $CTEST_FLAGS\n---\nkind: pipeline\nname: dynamic-clang9\nplatform: { os: linux, arch: amd64 }\nsteps:\n- name: Build and Test\n  image: conanio/clang9\n  user: root\n  environment:\n    CC: clang-9\n    CXX: clang++-9\n    CMAKE_FLAGS: -DBUILD_SHARED_LIBS=ON\n    BUILD_FLAGS: -- -j\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n  commands:\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ctest $CTEST_FLAGS\n---\nkind: pipeline\nname: sanitize-gcc9\nplatform: { os: linux, arch: amd64 }\nsteps:\n- name: Build and Test\n  image: gcc:9\n  environment:\n    CC: gcc\n    CXX: g++\n    BUILD_FLAGS: -- -j\n    CMAKE_FLAGS: -DBUILD_SHARED_LIBS=OFF -DSIMDJSON_IMPLEMENTATION=icelake;haswell;westmere;fallback\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n  commands:\n    - echo \"deb http://deb.debian.org/debian buster-backports main\" >> /etc/apt/sources.list\n    - apt-get update -qq\n    - apt-get -t buster-backports install -y cmake\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L acceptance -LE per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=icelake ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=haswell ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=westmere ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=fallback ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L per_implementation\n    - ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -LE \"acceptance|per_implementation\" # Everything we haven't run yet, run now.\n---\nkind: pipeline\nname: sanitize-clang9\nplatform: { os: linux, arch: amd64 }\nsteps:\n- name: Build and Test\n  image: conanio/clang9\n  user: root\n  environment:\n    CC: clang-9\n    CXX: clang++-9\n    CMAKE_FLAGS: -DSIMDJSON_SANITIZE=ON -DSIMDJSON_IMPLEMENTATION=icelake;haswell;westmere;fallback\n    BUILD_FLAGS: -- -j\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n  commands:\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L acceptance -LE per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=icelake ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=haswell ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=westmere ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=fallback ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L per_implementation\n    - ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -LE \"acceptance|per_implementation\" # Everything we haven't run yet, run now.\n---\nkind: pipeline\nname: cpp20-clang11-libcpp\nplatform: { os: linux, arch: amd64 }\nsteps:\n- name: Build and Test\n  image: pauldreik/llvm-11\n  user: root\n  environment:\n    CC: clang-11\n    CXX: clang++-11\n    CMAKE_FLAGS: -GNinja\n    BUILD_FLAGS:\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n    CXXFLAGS: -std=c++20 -stdlib=libc++\n  commands:\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ctest $CTEST_FLAGS\n---\nkind: pipeline\nname: arm64-gcc8\nplatform: { os: linux, arch: arm64 }\nsteps:\n- name: Build and Test\n  image: gcc:8\n  environment:\n    CC: gcc\n    CXX: g++\n    BUILD_FLAGS: -- -j\n    CMAKE_FLAGS: -DBUILD_SHARED_LIBS=OFF -DSIMDJSON_IMPLEMENTATION=arm64;fallback\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n  commands:\n    - echo \"deb http://deb.debian.org/debian buster-backports main\" >> /etc/apt/sources.list\n    - apt-get update -qq\n    - apt-get -t buster-backports install -y cmake\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ctest $CTEST_FLAGS -L acceptance -LE per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=arm64 ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=fallback ctest $CTEST_FLAGS -L per_implementation\n    - ctest $CTEST_FLAGS -LE \"acceptance|per_implementation\" # Everything we haven't run yet, run now.\n---\nkind: pipeline\nname: arm64-clang6\nplatform: { os: linux, arch: arm64 }\nsteps:\n- name: Build and Test\n  image: debian:buster-backports\n  environment:\n    CC: clang-6.0\n    CXX: clang++-6.0\n    CMAKE_FLAGS: -DBUILD_SHARED_LIBS=ON\n    BUILD_FLAGS: -- -j\n    CTEST_FLAGS: -j4 --output-on-failure  -LE explicitonly\n  commands:\n    - apt-get -qq update\n    - apt-get -t buster-backports install -y cmake\n    - apt-get install -y clang-6.0 git\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ctest $CTEST_FLAGS\n---\nkind: pipeline\nname: arm64-dynamic-gcc8\nplatform: { os: linux, arch: arm64 }\nsteps:\n- name: Build and Test\n  image: gcc:8\n  environment:\n    CC: gcc\n    CXX: g++\n    BUILD_FLAGS: -- -j\n    CMAKE_FLAGS: -DBUILD_SHARED_LIBS=ON\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n  commands:\n    - echo \"deb http://deb.debian.org/debian buster-backports main\" >> /etc/apt/sources.list\n    - apt-get update -qq\n    - apt-get -t buster-backports install -y cmake\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ctest $CTEST_FLAGS\n---\nkind: pipeline\nname: arm64-dynamic-clang6\nplatform: { os: linux, arch: arm64 }\nsteps:\n- name: Build and Test\n  image: debian:buster-backports\n  environment:\n    CC: clang-6.0\n    CXX: clang++-6.0\n    CMAKE_FLAGS: -DBUILD_SHARED_LIBS=ON\n    BUILD_FLAGS: -- -j\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n  commands:\n    - apt-get -qq update\n    - apt-get -t buster-backports install -y cmake\n    - apt-get install -y clang-6.0 git\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ctest $CTEST_FLAGS\n---\nkind: pipeline\nname: arm64-sanitize-gcc8\nplatform: { os: linux, arch: arm64 }\nsteps:\n- name: Build and Test\n  image: gcc:8\n  environment:\n    BUILD_FLAGS: -- -j\n    CMAKE_FLAGS: -DBUILD_SHARED_LIBS=OFF -DSIMDJSON_IMPLEMENTATION=arm64;fallback\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n    CC: gcc\n    CXX: g++\n  commands:\n    - echo \"deb http://deb.debian.org/debian buster-backports main\" >> /etc/apt/sources.list\n    - apt-get update -qq\n    - apt-get -t buster-backports install -y cmake\n    - apt-get install -y libstdc++6\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L acceptance -LE per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=arm64 ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=fallback ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L per_implementation\n    - ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -LE \"acceptance|per_implementation\" # Everything we haven't run yet, run now.\n---\nkind: pipeline\nname: arm64-sanitize-clang6\nplatform: { os: linux, arch: arm64 }\nsteps:\n- name: Build and Test\n  image: debian:buster-backports\n  environment:\n    CC: clang-6.0\n    CXX: clang++-6.0\n    CMAKE_FLAGS: -DSIMDJSON_SANITIZE=ON -DSIMDJSON_IMPLEMENTATION=arm64;fallback\n    BUILD_FLAGS: -- -j\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n  commands:\n    - apt-get -qq update\n    - apt-get -t buster-backports install -y cmake\n    - apt-get install -y clang-6.0 git\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L acceptance -LE per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=arm64 ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L per_implementation\n    - SIMDJSON_FORCE_IMPLEMENTATION=fallback ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -L per_implementation\n    - ASAN_OPTIONS=\"detect_leaks=0\" ctest $CTEST_FLAGS -LE \"acceptance|per_implementation\" # Everything we haven't run yet, run now.\n---\nkind: pipeline\nname: ninja-clang9\nplatform: { os: linux, arch: amd64 }\nsteps:\n- name: Build and Test\n  image: conanio/clang9\n  user: root\n  environment:\n    CC: clang-9\n    CXX: clang++-9\n    BUILD_FLAGS: -- -j 4\n    CMAKE_FLAGS: -GNinja -DBUILD_SHARED_LIBS=OFF\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n    CXXFLAGS: -stdlib=libc++\n  commands:\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ctest $CTEST_FLAGS\n---\nkind: pipeline\nname: libcpp-clang9\nplatform: { os: linux, arch: amd64 }\nsteps:\n- name: Build and Test\n  image: conanio/clang9\n  user: root\n  environment:\n    CC: clang-9\n    CXX: clang++-9\n    BUILD_FLAGS: -- -j\n    CMAKE_FLAGS: -DBUILD_SHARED_LIBS=OFF\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n    CXXFLAGS: -stdlib=libc++\n  commands:\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ctest $CTEST_FLAGS\n---\nkind: pipeline\nname: libcpp-clang7\nplatform: { os: linux, arch: amd64 }\nsteps:\n- name: Build and Test\n  image: conanio/clang7\n  user: root\n  environment:\n    CC: clang-7\n    CXX: clang++-7\n    BUILD_FLAGS: -- -j\n    CMAKE_FLAGS: -DBUILD_SHARED_LIBS=OFF\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n    CXXFLAGS: -stdlib=libc++\n  commands:\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ctest $CTEST_FLAGS\n---\nkind: pipeline\nname: noexceptions-gcc9\nplatform: { os: linux, arch: amd64 }\nsteps:\n- name: Build and Test\n  image: gcc:9\n  environment:\n    CC: gcc\n    CXX: g++\n    BUILD_FLAGS: -- -j\n    CMAKE_FLAGS: -DSIMDJSON_EXCEPTIONS=OFF\n    CTEST_FLAGS: -j4 --output-on-failure -LE explicitonly\n  commands:\n    - echo \"deb http://deb.debian.org/debian buster-backports main\" >> /etc/apt/sources.list\n    - apt-get update -qq\n    - apt-get -t buster-backports install -y cmake\n    - mkdir build\n    - cd build\n    - cmake $CMAKE_FLAGS ..\n    - cmake --build . $BUILD_FLAGS\n    - ctest $CTEST_FLAGS\n---\nkind: pipeline\nname: arm64-fuzz\nplatform: { os: linux, arch: arm64 }\nsteps:\n- name: Build and run fuzzers shortly\n  image: ubuntu:20.04\n  environment:\n    CC: clang\n    CXX: clang++\n    DEBIAN_FRONTEND: noninteractive\n    ASAN_OPTIONS: detect_leaks=0\n  commands:\n    - apt-get -qq update\n    - apt-get install -q -y clang cmake git wget zip ninja-build\n    - wget -O corpus.tar.gz https://readonly:readonly@www.pauldreik.se/fuzzdata/index.php?project=simdjson\n    - tar xf corpus.tar.gz && rm corpus.tar.gz\n    - fuzz/build_like_ossfuzz.sh\n    - mkdir -p common_out\n    - for fuzzer in build/fuzz/fuzz_* ; do echo $fuzzer;$fuzzer common_out out/* -max_total_time=40; done\n---\nkind: pipeline\nname: stylecheck\nplatform: { os: linux, arch: amd64 }\nsteps:\n- name: Build and Test\n  image: ubuntu:18.04\n  commands:\n    - apt-get update -y\n    - apt-get install -y python clang-format\n    - ./style/run-clang-format.py -r include/ benchmark/ src/ tests/\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.380859375,
          "content": "# https://editorconfig.org/\nroot = true\n# Conservatively avoid changing defaults for other file types, e.g. raw json files for test cases,\n# Makefiles, etc.\n[*.{cpp,h,md}]\ncharset                  = utf-8\nend_of_line              = lf\nindent_size              = 2\nindent_style             = space\ninsert_final_newline     = true\ntab_width                = 2\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.3408203125,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n# Uncomment next line to adjust line endings\n* text=auto\n\n# we don't want json files to be modified for this project\n*.json binary diff=astextplain\n\n\n# Common settings that generally should always be used with your language specific settings\n\n#\n# From generator:\n# https://www.davidlaing.com/2012/09/19/customise-your-gitattributes-to-become-a-git-ninja/\n#\n\n# Documents\n*.bibtex   text diff=bibtex\n*.doc\t        diff=astextplain\n*.DOC\t        diff=astextplain\n*.docx          diff=astextplain\n*.DOCX          diff=astextplain\n*.dot           diff=astextplain\n*.DOT           diff=astextplain\n*.pdf           diff=astextplain\n*.PDF           diff=astextplain\n*.rtf           diff=astextplain\n*.RTF\t        diff=astextplain\n*.md       text\n*.tex      text diff=tex\n*.adoc     text\n*.textile  text\n*.mustache text\n*.csv      text\n*.tab      text\n*.tsv      text\n*.txt      text\n*.sql      text\n\n# Graphics\n*.png      binary\n*.jpg      binary\n*.jpeg     binary\n*.gif      binary\n*.tif      binary\n*.tiff     binary\n*.ico      binary\n# SVG treated as an asset (binary) by default.\n*.svg      text\n# If you want to treat it as binary,\n# use the following line instead.\n# *.svg    binary\n*.eps      binary\n\n# Scripts\n*.bash     text eol=lf\n*.sh       text eol=lf\n# These are explicitly windows files and should use crlf\n*.bat      text eol=crlf\n*.cmd      text eol=crlf\n*.ps1      text eol=crlf\n\n# Serialisation\n#*.json     text\n*.toml     text\n*.xml      text\n*.yaml     text\n*.yml      text\n\n# Archives\n*.7z       binary\n*.gz       binary\n*.tar      binary\n*.zip      binary\n\n#\n# Exclude files from exporting\n#\n\n.gitattributes export-ignore\n.gitignore     export-ignore\n.editorconfig  export-ignore\n\n# Sources\n*.c     text eol=lf diff=c\n*.cc    text eol=lf diff=cpp\n*.cxx   text eol=lf diff=cpp\n*.cpp   text eol=lf diff=cpp\n*.c++   text eol=lf diff=cpp\n*.hpp   text eol=lf diff=cpp\n*.h     text eol=lf diff=c\n*.h++   text eol=lf diff=cpp\n*.hh    text eol=lf diff=cpp\n\n# Compiled Object files\n*.slo   binary\n*.lo    binary\n*.o     binary\n*.obj   binary\n\n# Precompiled Headers\n*.gch   binary\n*.pch   binary\n\n# Compiled Dynamic libraries\n*.so    binary\n*.dylib binary\n*.dll   binary\n\n# Compiled Static libraries\n*.lai   binary\n*.la    binary\n*.a     binary\n*.lib   binary\n\n# Executables\n*.exe   binary\n*.out   binary\n*.app   binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2451171875,
          "content": "# eclipse project files\n.cproject\n.project\n.settings\n\n# emacs temp files\n*~\n\n# vim temp files\n.*.swp\n\n# XCode\n^build/\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\n*.xccheckout\n*.moved-aside\nDerivedData\n*.hmap\n*.ipa\n*.xcuserstate\n*.DS_Store\n\n# IDE specific folder for JetBrains IDEs\n.idea/\ncmake-build-debug/\ncmake-build-release/\n\n# Visual Studio Code artifacts\n.vscode/*\n.history/\n\n# Visual Studio artifacts\n/VS/\n\n# C/C++ build outputs\n.build/\nbins\ngens\nlibs\nobjs\n\n# C++ ignore from https://github.com/github/gitignore/blob/master/C%2B%2B.gitignore\n\n# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n\n# CMake files that may be specific to our installation\n\n# Build outputs\n/build*/\n/visual_studio/\n\n# Fuzzer outputs generated by instructions in fuzz/Fuzzing.md\n/corpus.zip\n/ossfuzz-out/\n/out/\n\n# Generated docs\n/doc/api\n*.orig\n\n# VSCode workspace files\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n\n# clangd\n.cache"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 4.775390625,
          "content": "language: cpp\n\ndist: bionic\n\narch:\n  - ppc64le\n\ncache:\n  directories:\n    - $HOME/.dep_cache\n\nenv:\n  global:\n    - simdjson_DEPENDENCY_CACHE_DIR=$HOME/.dep_cache\n\nmatrix:\n  include:\n    - os: linux\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-8\n      env:\n        - COMPILER=\"CC=gcc-8 && CXX=g++-8\"\n      compiler: gcc-8\n\n    - os: linux\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-9\n      env:\n        - COMPILER=\"CC=gcc-9 && CXX=g++-9\"\n      compiler: gcc-9\n\n    - os: linux\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-10\n      env:\n        - COMPILER=\"CC=gcc-10 && CXX=g++-10\"\n      compiler: gcc-10\n\n# The sanitizer runs fail systematically\n#    - os: linux\n#      addons:\n#        apt:\n#          sources:\n#            - ubuntu-toolchain-r-test\n#          packages:\n#            - g++-10\n#      env:\n#        - COMPILER=\"CC=gcc-10 && CXX=g++-10\"\n#        - SANITIZE=\"on\"\n#      compiler: gcc-10-sanitize\n\n    - os: linux\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n          packages:\n            - g++-10\n      env:\n        - COMPILER=\"CC=gcc-10 && CXX=g++-10\"\n        - STATIC=\"on\"\n      compiler: gcc-10-static\n\n    - os: linux\n      addons:\n        apt:\n          sources:\n            - llvm-toolchain-bionic-6.0\n          packages:\n            - clang-6.0\n      env:\n        - COMPILER=\"CC=clang-6.0 && CXX=clang++-6.0\"\n      compiler: clang-6\n\n    - os: linux\n      addons:\n        apt:\n          sources:\n            - llvm-toolchain-bionic-7\n          packages:\n            - clang-7\n      env:\n        - COMPILER=\"CC=clang-7 && CXX=clang++-7\"\n      compiler: clang-7\n\n    - os: linux\n      addons:\n        apt:\n          sources:\n            - llvm-toolchain-bionic-8\n          packages:\n            - clang-8\n      env:\n        - COMPILER=\"CC=clang-8 && CXX=clang++-8\"\n      compiler: clang-8\n\n    - os: linux\n      addons:\n        apt:\n          sources:\n            - llvm-toolchain-bionic-9\n          packages:\n            - clang-9\n      env:\n        - COMPILER=\"CC=clang-9 && CXX=clang++-9\"\n      compiler: clang-9\n\n    - os: linux\n      addons:\n        apt:\n          packages:\n            - clang-10\n          sources:\n            - ubuntu-toolchain-r-test\n            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'\n              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'\n      env:\n        - COMPILER=\"CC=clang-10 && CXX=clang++-10\"\n      compiler: clang-10\n\n    - os: linux\n      addons:\n        apt:\n          packages:\n            - clang-10\n          sources:\n            - ubuntu-toolchain-r-test\n            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'\n              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'\n      env:\n        - COMPILER=\"CC=clang-10 && CXX=clang++-10\"\n        - STATIC=\"on\"\n      compiler: clang-10-static\n\n# The clang sanitizer runs fail frequently at setup time\n#    - os: linux\n#      addons:\n#        apt:\n#          packages:\n#            - clang-10\n#          sources:\n#            - ubuntu-toolchain-r-test\n#            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'\n#              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'\n#      env:\n#        - COMPILER=\"CC=clang-10 && CXX=clang++-10\"\n#        - SANITIZE=\"on\"\n#      compiler: clang-10-sanitize\n\nbefore_install:\n  - eval \"${COMPILER}\"\n\ninstall:\n  - wget -q -O - \"https://raw.githubusercontent.com/simdjson/debian-ppa/master/key.gpg\" | sudo apt-key add -\n  - sudo apt-add-repository \"deb https://raw.githubusercontent.com/simdjson/debian-ppa/master simdjson main\"\n  - sudo apt-get -qq update\n  - sudo apt-get purge cmake cmake-data\n  - sudo apt-get -t simdjson -y install cmake\n  - export CMAKE_CXX_FLAGS=\"-maltivec -mcpu=power9 -mtune=power9\"\n  - export CMAKE_C_FLAGS=\"${CMAKE_CXX_FLAGS}\"\n  - export CMAKE_FLAGS=\"-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS} -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} -DSIMDJSON_IMPLEMENTATION=ppc64;fallback\";\n  - if [[ \"${SANITIZE}\" == \"on\" ]]; then\n      export CMAKE_FLAGS=\"${CMAKE_FLAGS} -DSIMDJSON_SANITIZE=ON\";\n      export ASAN_OPTIONS=\"detect_leaks=0\";\n    fi\n  - if [[ \"${STATIC}\" == \"on\" ]]; then\n      export CMAKE_FLAGS=\"${CMAKE_FLAGS} -DBUILD_SHARED_LIBS=OFF\";\n    fi\n  - export CTEST_FLAGS=\"-j4 --output-on-failure -LE explicitonly\"\n\nscript:\n  - mkdir build\n  - cd build\n  - cmake $CMAKE_FLAGS ..\n  - cmake --build . -- -j2\n  - SIMDJSON_FORCE_IMPLEMENTATION=ppc64 ctest $CTEST_FLAGS -L per_implementation\n  - SIMDJSON_FORCE_IMPLEMENTATION=fallback ctest $CTEST_FLAGS -L per_implementation\n  - ctest $CTEST_FLAGS -LE \"acceptance|per_implementation\"\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.103515625,
          "content": "# List of authors for copyright purposes, in no particular order\nDaniel Lemire\nGeoff Langdale\nJohn Keiser\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.041015625,
          "content": "cmake_minimum_required(VERSION 3.14)\n\nproject(\n    simdjson\n    # The version number is modified by tools/release.py\n    VERSION 3.11.5\n    DESCRIPTION \"Parsing gigabytes of JSON per second\"\n    HOMEPAGE_URL \"https://simdjson.org/\"\n    LANGUAGES CXX C\n)\n\nset(SIMDJSON_GITHUB_REPOSITORY \"https://github.com/simdjson/simdjson\")\n\nstring(\n    COMPARE EQUAL\n    \"${CMAKE_SOURCE_DIR}\" \"${CMAKE_CURRENT_SOURCE_DIR}\"\n    is_top_project\n)\n\n# ---- Options, variables ----\n\n# These version numbers are modified by tools/release.py\nset(SIMDJSON_LIB_VERSION \"24.0.0\" CACHE STRING \"simdjson library version\")\nset(SIMDJSON_LIB_SOVERSION \"24\" CACHE STRING \"simdjson library soversion\")\n\noption(SIMDJSON_BUILD_STATIC_LIB \"Build simdjson_static library along with simdjson (only makes sense if BUILD_SHARED_LIBS=ON)\" OFF)\nif(SIMDJSON_BUILD_STATIC_LIB AND NOT BUILD_SHARED_LIBS)\n  message(WARNING \"SIMDJSON_BUILD_STATIC_LIB only makes sense if BUILD_SHARED_LIBS is set to ON\")\n  message(WARNING \"You might be building and installing a two identical static libraries.\")\nendif()\n\noption(SIMDJSON_ENABLE_THREADS \"Link with thread support\" ON)\n\ninclude(cmake/simdjson-props.cmake)\ninclude(cmake/implementation-flags.cmake)\ninclude(cmake/exception-flags.cmake)\n\noption(SIMDJSON_DISABLE_DEPRECATED_API \"Disables deprecated APIs\" OFF)\nif(SIMDJSON_DISABLE_DEPRECATED_API)\n  simdjson_add_props(\n      target_compile_definitions PUBLIC\n      SIMDJSON_DISABLE_DEPRECATED_API=1\n  )\nendif()\n\noption(SIMDJSON_DEVELOPMENT_CHECKS \"Enable development-time aids, such as \\\nchecks for incorrect API usage. Enabled by default in DEBUG.\" OFF)\nif(SIMDJSON_DEVELOPMENT_CHECKS)\n  simdjson_add_props(\n      target_compile_definitions PUBLIC\n      SIMDJSON_DEVELOPMENT_CHECKS\n  )\nendif()\n\nif(is_top_project)\n  option(SIMDJSON_DEVELOPER_MODE \"Enable targets for developing simdjson\" OFF)\n  option(BUILD_SHARED_LIBS \"Build simdjson as a shared library\" OFF)\n  option(SIMDJSON_SINGLEHEADER \"Disable singleheader generation\" ON)\nendif()\n\ninclude(cmake/handle-deprecations.cmake)\ninclude(cmake/developer-options.cmake)\n\n# ---- simdjson library ----\n\nset(SIMDJSON_SOURCES src/simdjson.cpp)\n\nadd_library(simdjson ${SIMDJSON_SOURCES})\nadd_library(simdjson::simdjson ALIAS simdjson)\nset(SIMDJSON_LIBRARIES simdjson)\n\nif(SIMDJSON_BUILD_STATIC_LIB)\n  add_library(simdjson_static STATIC ${SIMDJSON_SOURCES})\n  add_library(simdjson::simdjson_static ALIAS simdjson_static)\n  list(APPEND SIMDJSON_LIBRARIES simdjson_static)\nendif()\n\nset_target_properties(\n    simdjson PROPERTIES\n    VERSION \"${SIMDJSON_LIB_VERSION}\"\n    SOVERSION \"${SIMDJSON_LIB_SOVERSION}\"\n    # FIXME: symbols should be hidden by default\n    WINDOWS_EXPORT_ALL_SYMBOLS YES\n)\n\n# FIXME: Use proper CMake integration for exports\nif(MSVC AND BUILD_SHARED_LIBS)\n  target_compile_definitions(\n      simdjson\n      PRIVATE SIMDJSON_BUILDING_WINDOWS_DYNAMIC_LIBRARY=1\n      INTERFACE SIMDJSON_USING_WINDOWS_DYNAMIC_LIBRARY=1\n  )\nendif()\n\nsimdjson_add_props(\n    target_include_directories\n    PUBLIC \"$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>\"\n    PRIVATE \"$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/src>\"\n)\n\nsimdjson_add_props(target_compile_features PUBLIC cxx_std_11)\n\n# workaround for GNU GCC poor AVX load/store code generation\nif(\n    CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\"\n    AND CMAKE_SYSTEM_PROCESSOR MATCHES \"^(i.86|x86(_64)?)$\"\n)\n  simdjson_add_props(\n      target_compile_options PRIVATE\n      -mno-avx256-split-unaligned-load -mno-avx256-split-unaligned-store\n  )\nendif()\n\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"^(loongarch64)$\")\n    option(SIMDJSON_PREFER_LSX \"Prefer LoongArch SX\" ON)\n    include(CheckCXXCompilerFlag)\n    check_cxx_compiler_flag(-mlasx COMPILER_SUPPORTS_LASX)\n    check_cxx_compiler_flag(-mlsx COMPILER_SUPPORTS_LSX)\n    if(COMPILER_SUPPORTS_LASX AND NOT SIMDJSON_PREFER_LSX)\n        simdjson_add_props(\n            target_compile_options PRIVATE\n            -mlasx\n        )\n    elseif(COMPILER_SUPPORTS_LSX)\n        simdjson_add_props(\n            target_compile_options PRIVATE\n            -mlsx\n        )\n    endif()\nendif()\n\n# GCC and Clang have horrendous Debug builds when using SIMD.\n# A common fix is to use '-Og' instead.\n# bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412\nif(\n    (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" OR\n        CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\" OR\n        CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\")\n)\n  message(STATUS \"Adding -Og to compile flag\")\n  simdjson_add_props(\n      target_compile_options PRIVATE\n      $<$<CONFIG:DEBUG>:-Og>\n  )\nendif()\n\nif(SIMDJSON_ENABLE_THREADS)\n  find_package(Threads REQUIRED)\n  simdjson_add_props(target_link_libraries PUBLIC Threads::Threads)\n  simdjson_add_props(target_compile_definitions PUBLIC SIMDJSON_THREADS_ENABLED=1)\nendif()\n\nsimdjson_apply_props(simdjson)\nif(SIMDJSON_BUILD_STATIC_LIB)\n  simdjson_apply_props(simdjson_static)\nendif()\n\n# ---- Install rules ----\n\ninclude(CMakePackageConfigHelpers)\ninclude(GNUInstallDirs)\n\nif(SIMDJSON_SINGLEHEADER)\n  install(\n      FILES singleheader/simdjson.h\n      DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n      COMPONENT simdjson_Development\n  )\nendif()\n\ninstall(\n    TARGETS simdjson\n    EXPORT simdjsonTargets\n    RUNTIME COMPONENT simdjson_Runtime\n    LIBRARY COMPONENT simdjson_Runtime\n    NAMELINK_COMPONENT simdjson_Development\n    ARCHIVE COMPONENT simdjson_Development\n    INCLUDES DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n)\nconfigure_file(cmake/simdjson-config.cmake.in simdjson-config.cmake @ONLY)\n\nwrite_basic_package_version_file(\n    simdjson-config-version.cmake\n    COMPATIBILITY SameMinorVersion\n)\n\nset(\n    SIMDJSON_INSTALL_CMAKEDIR \"${CMAKE_INSTALL_LIBDIR}/cmake/simdjson\"\n    CACHE STRING \"CMake package config location relative to the install prefix\"\n)\nmark_as_advanced(SIMDJSON_INSTALL_CMAKEDIR)\n\ninstall(\n    FILES\n    \"${PROJECT_BINARY_DIR}/simdjson-config.cmake\"\n    \"${PROJECT_BINARY_DIR}/simdjson-config-version.cmake\"\n    DESTINATION \"${SIMDJSON_INSTALL_CMAKEDIR}\"\n    COMPONENT simdjson_Development\n)\n\ninstall(\n    EXPORT simdjsonTargets\n    NAMESPACE simdjson::\n    DESTINATION \"${SIMDJSON_INSTALL_CMAKEDIR}\"\n    COMPONENT simdjson_Development\n)\n\nif(SIMDJSON_BUILD_STATIC_LIB)\n  install(\n      TARGETS simdjson_static\n      EXPORT simdjson_staticTargets\n      ARCHIVE COMPONENT simdjson_Development\n      INCLUDES DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n  )\n  install(\n      EXPORT simdjson_staticTargets\n      NAMESPACE simdjson::\n      DESTINATION \"${SIMDJSON_INSTALL_CMAKEDIR}\"\n      COMPONENT simdjson_Development\n  )\nendif()\n\n# pkg-config\ninclude(cmake/JoinPaths.cmake)\njoin_paths(PKGCONFIG_INCLUDEDIR \"\\${prefix}\" \"${CMAKE_INSTALL_INCLUDEDIR}\")\njoin_paths(PKGCONFIG_LIBDIR \"\\${prefix}\" \"${CMAKE_INSTALL_LIBDIR}\")\n\nif(SIMDJSON_ENABLE_THREADS)\n  set(PKGCONFIG_CFLAGS \"-DSIMDJSON_THREADS_ENABLED=1\")\n  if(CMAKE_THREAD_LIBS_INIT)\n    set(PKGCONFIG_LIBS_PRIVATE \"Libs.private: ${CMAKE_THREAD_LIBS_INIT}\")\n  endif()\nendif()\n\nconfigure_file(\"simdjson.pc.in\" \"simdjson.pc\" @ONLY)\ninstall(\n    FILES \"${CMAKE_CURRENT_BINARY_DIR}/simdjson.pc\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\"\n)\n\n#\n# CPack\n#\nif(is_top_project)\n  set(CPACK_PACKAGE_VENDOR \"Daniel Lemire\")\n  set(CPACK_PACKAGE_CONTACT \"lemire@gmail.com\")\n  set(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/LICENSE\")\n  set(CPACK_RESOURCE_FILE_README \"${PROJECT_SOURCE_DIR}/README.md\")\n\n  set(CPACK_RPM_PACKAGE_LICENSE \"${PROJECT_SOURCE_DIR}/LICENSE\")\n\n  set(CPACK_SOURCE_GENERATOR \"TGZ;ZIP\")\n\n  include(CPack)\nendif()\n\n# ---- Developer mode extras ----\n\nif(is_top_project AND NOT SIMDJSON_DEVELOPER_MODE)\n  message(STATUS \"Building only the library. Advanced users and contributors may want to turn SIMDJSON_DEVELOPER_MODE to ON, e.g., via -D SIMDJSON_DEVELOPER_MODE=ON.\")\nelseif(SIMDJSON_DEVELOPER_MODE AND NOT is_top_project)\n  message(AUTHOR_WARNING \"Developer mode in simdjson is intended for the developers of simdjson\")\nendif()\n\nif(NOT SIMDJSON_DEVELOPER_MODE)\n  return()\nendif()\n\nsimdjson_apply_props(simdjson-internal-flags)\n\nset(\n    SIMDJSON_USER_CMAKECACHE\n    \"${CMAKE_BINARY_DIR}/.simdjson-user-CMakeCache.txt\"\n)\nadd_custom_target(\n    simdjson-user-cmakecache\n    COMMAND \"${CMAKE_COMMAND}\"\n    -D \"BINARY_DIR=${CMAKE_BINARY_DIR}\"\n    -D \"USER_CMAKECACHE=${SIMDJSON_USER_CMAKECACHE}\"\n    -P \"${PROJECT_SOURCE_DIR}/cmake/simdjson-user-cmakecache.cmake\"\n    VERBATIM\n)\n\n# Setup tests\nenable_testing()\n# So we can build just tests with \"make all_tests\"\nadd_custom_target(all_tests)\n\nadd_subdirectory(windows)\ninclude(cmake/CPM.cmake)\nadd_subdirectory(dependencies) ## This needs to be before tools because of cxxopts\nadd_subdirectory(tools)  ## This needs to be before tests because of cxxopts\n\n# Data: jsonexamples is left with only the bare essential.\n# most of the data has been moved to https://github.com/simdjson/simdjson-data\nadd_subdirectory(jsonexamples)\n\nif(SIMDJSON_SINGLEHEADER)\nadd_subdirectory(singleheader)\nendif()\n\n\n\n#\n# Compile tools / tests / benchmarks\n#\nadd_subdirectory(tests)\nadd_subdirectory(examples)\nif(CMAKE_SIZEOF_VOID_P EQUAL 8) # we only include the benchmarks on 64-bit systems.\n  add_subdirectory(benchmark)\nendif()\nadd_subdirectory(fuzz)\n\n#\n# Source files should be just ASCII\n#\nfind_program(FIND find)\nfind_program(FILE file)\nfind_program(GREP grep)\nif(FIND AND FILE AND GREP)\n  add_test(\n      NAME just_ascii\n      COMMAND sh -c \"\\\n${FIND} include src windows tools singleheader tests examples benchmark \\\n-path benchmark/checkperf-reference -prune -name '*.h' -o -name '*.cpp' \\\n-type f -exec ${FILE} '{}' \\; | ${GREP} -qv ASCII || exit 0  && exit 1\"\n      WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n  )\nendif()\n\n##\n## In systems like R, libraries must not use stderr or abort to be acceptable.\n## Thus we make it a hard rule that one is not allowed to call abort or stderr.\n## The sanitized builds are allowed to abort.\n##\nif(NOT SIMDJSON_SANITIZE)\n  find_program(GREP grep)\n  find_program(NM nm)\n  if((NOT GREP) OR (NOT NM))\n    message(\"grep and nm are unavailable on this system.\")\n  else()\n    add_test(\n      NAME \"avoid_abort\"\n      # Under FreeBSD, the __cxa_guard_abort symbol may appear but it is fine.\n      # So we want to look for <space><possibly _>abort as a test.\n      COMMAND sh -c \"${NM}  $<TARGET_FILE_NAME:simdjson> |  ${GREP} ' _*abort' || exit 0  && exit 1\"\n      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}\n    )\n    add_test(\n      NAME \"avoid_cout\"\n      COMMAND sh -c \"${NM}  $<TARGET_FILE_NAME:simdjson> |  ${GREP} ' _*cout' || exit 0  && exit 1\"\n      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}\n    )\n    add_test(\n      NAME \"avoid_cerr\"\n      COMMAND sh -c \"${NM}  $<TARGET_FILE_NAME:simdjson> |  ${GREP} ' _*cerr' || exit 0  && exit 1\"\n      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}\n    )\n    add_test(\n      NAME \"avoid_printf\"\n      COMMAND sh -c \"${NM}  $<TARGET_FILE_NAME:simdjson> |  ${GREP} ' _*printf' || exit 0  && exit 1\"\n      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}\n    )\n    add_test(\n      NAME \"avoid_stdout\"\n      COMMAND sh -c \"${NM}  $<TARGET_FILE_NAME:simdjson> |  ${GREP} stdout || exit 0 && exit 1\"\n      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}\n    )\n    add_test(\n      NAME \"avoid_stderr\"\n      COMMAND sh -c \"${NM}  $<TARGET_FILE_NAME:simdjson> |  ${GREP} stderr || exit 0 && exit 1\"\n      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}\n    )\n  endif()\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.5986328125,
          "content": "Contributing\n============\n\nThe simdjson library is an open project written in C++. Contributions are invited. Contributors\nagree to the project's license.\n\nWe have an extensive list of issues, and contributions toward any of these issues is invited.\nContributions can take the form of code samples, better documentation or design ideas.\n\nIn particular, the following contributions are invited:\n\n- The library is focused on performance. Well-documented performance optimization are invited.\n- Fixes to known or newly discovered bugs are always welcome. Typically, a bug fix should come with\n  a test demonstrating that the bug has been fixed.\n- The simdjson library is advanced software and maintainability and flexibility are always a\n  concern. Specific contributions to improve maintainability and flexibility are invited.\n\nWe discourage the following types of contributions:\n\n- Code refactoring. We all have our preferences as to how code should be written, but unnecessary\n  refactoring can waste time and introduce new bugs. If you believe that refactoring is needed, you\n  first must explain how it helps in concrete terms. Does it improve the performance?\n- Applications of new language features for their own sake. Using advanced C++ language constructs\n  is actually a negative as it may reduce portability (to old compilers, old standard libraries and\n  systems) and reduce accessibility (to programmers that have not kept up), so it must be offsetted\n  by clear gains like performance or maintainability. When in doubt, avoid advanced C++ features\n  (beyond C++11).\n- Style formatting. In general, please abstain from reformatting code just to make it look prettier.\n  Though code formatting is important, it can also be a waste of time if several contributors try to\n  tweak the code base toward their own preference. Please do not introduce unneeded white-space\n  changes.\n\nIn short, most code changes should either bring new features or better performance. We want to avoid unmotivated code changes.\n\n\nSpecific rules\n----------\n\nWe have few hard rules, but we have some:\n\n- Printing to standard output or standard error (`stderr`, `stdout`, `std::cerr`, `std::cout`) in the core library is forbidden. This follows from the [Writing R Extensions](https://cran.r-project.org/doc/manuals/R-exts.html) manual which states that \"Compiled code should not write to stdout or stderr\".\n- Calls to `abort()` are forbidden in the core library. This follows from the [Writing R Extensions](https://cran.r-project.org/doc/manuals/R-exts.html) manual which states that \"Under no circumstances should your compiled code ever call abort or exit\".\n- All source code files (.h, .cpp) must be ASCII.\n- All C macros introduced in public headers need to be prefixed with either `SIMDJSON_` or `simdjson_`.\n- We avoid trailing white space characters within lines. That is, your lines of code should not terminate with unnecessary spaces. Generally, please avoid making unnecessary changes to white-space characters when contributing code.\n\nTools, tests and benchmarks are not held to these same strict rules.\n\nGeneral Guidelines\n----------\n\nContributors are encouraged to :\n\n- Document their changes. Though we do not enforce a rule regarding code comments, we prefer that non-trivial algorithms and techniques be somewhat documented in the code.\n- Follow as much as possible the existing code style. We do not enforce a specific code style, but we prefer consistency. We avoid contractions (isn't, aren't) in the comments.\n- Modify as few lines of code as possible when working on an issue. The more lines you modify, the harder it is for your fellow human beings to understand what is going on.\n- Tools may report \"problems\" with the code, but we never delegate programming to tools: if there is a problem with the code, we need to understand it. Thus we will not \"fix\" code merely to please a static analyzer.\n- Provide tests for any new feature. We will not merge a new feature without tests.\n- Run before/after benchmarks so that we can appreciate the effect of the changes on the performance.\n\nPull Requests\n--------------\n\nPull requests are always invited. However, we ask that you follow these guidelines:\n\n- It is wise to discuss your ideas first as part of an issue before you start coding. If you omit this step and code first, be prepared to have your code receive scrutiny and be dropped.\n- Users should provide a rationale for their changes. Does it improve performance? Does it add a feature? Does it improve maintainability? Does it fix a bug? This must be explicitly stated as part of the pull request. Do not propose changes based on taste or intuition. We do not delegate programming to tools: that some tool suggested a code change is not reason enough to change the code.\n   1. When your code improves performance, please document the gains with a benchmark using hard numbers.\n   2. If your code fixes a bug, please either fix a failing test, or propose a new test.\n   3. Other types of changes must be clearly motivated. We openly discourage changes with no identifiable benefits.\n- Changes should be focused and minimal. You should change as few lines of code as possible. Please do not reformat or touch files needlessly.\n- New features must be accompanied by new tests, in general.\n- Your code should pass our continuous-integration tests. It is your responsibility to ensure that your proposal pass the tests. We do not merge pull requests that would break our build.\n   - An exception to this would be changes to non-code files, such as documentation and assets, or trivial changes to code, such as comments, where it is encouraged to explicitly ask for skipping a CI run using the `[skip ci]` prefix in your Pull Request title **and** in the first line of the most recent commit in a push. Example for such a commit: `[skip ci] Fixed typo in power_of_ten's docs`\n   This benefits the project in such a way that the CI pipeline is not burdened by running jobs on changes that don't change any behavior in the code, which reduces wait times for other Pull Requests that do change behavior and require testing.\n\nIf the benefits of your proposed code remain unclear, we may choose to discard your code: that is not an insult, we frequently discard our own code. We may also consider various alternatives and choose another path. Again, that is not an insult or a sign that you have wasted your time.\n\nStyle\n-----\n\nOur formatting style is inspired by the LLVM style.\nThe simdjson library is written using the snake case: when a variable or a function is a phrase,  each space is replaced by an underscore character, and the first letter of each word written in lowercase.  Compile-time constants are written entirely in uppercase with the same underscore convention.\n\nCode of Conduct\n---------------\n\nThough we do not have a formal code of conduct, we will not tolerate bullying, bigotry or\nintimidation. Everyone is welcome to contribute. If you have concerns, you can raise them privately with the core team members (e.g., D. Lemire, J. Keiser).\n\nWe welcome contributions from women and less represented groups. If you need help, please reach out.\n\nConsider the following points when engaging with the project:\n\n- We discourage arguments from authority: ideas are discusssed on their own merits and not based on who stated it.\n- Be mindful that what you may view as an aggression is maybe merely a difference of opinion or a misunderstanding.\n- Be mindful that a collection of small aggressions, even if mild in isolation, can become harmful.\n\nGetting Started Hacking\n-----------------------\n\nAn overview of simdjson's directory structure, with pointers to architecture and design\nconsiderations and other helpful notes, can be found at [HACKING.md](HACKING.md).\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 0.7861328125,
          "content": "# contributors (in no particular order)\nThomas Navennec\nKai Wolf\nTyler Kennedy\nFrank Wessels\nGeorge Fotopoulos\nHeinz N. Gies\nEmil Gedda\nWojciech Muła\nGeorgios Floros\nDong Xie\nNan Xiao\nEgor Bogatov\nJinxi Wang\nLuiz Fernando Peres\nWouter Bolsterlee\nAnish Karandikar\nReini Urban\nTom Dyson\nIhor Dotsenko\nAlexey Milovidov\nChang Liu\nSunny Gleason\nJohn Keiser\nZach Bjornson\nVitaly Baranov\nJuho Lauri\nMichael Eisel\nIo Daza Dillon\nPaul Dreik\nJeremie Piotte\nMatthew Wilson\nDušan Jovanović\nMatjaž Ostroveršnik\nNong Li\nFurkan Taşkale\nBrendan Knapp\nDanila Kutenin\nPavel Pavlov\nHao Chen\nNicolas Boyer\nKim Walisch and Jatin Bhateja (AVX-512 bitset decoder)\nFangzheng Zhang and Weiqiang Wan (AVX-512 kernel)\n# if you have contributed to the project and your name does not\n# appear in this list, please let us know!\n"
        },
        {
          "name": "Doxyfile",
          "type": "blob",
          "size": 110.3828125,
          "content": "# Doxyfile 1.8.17\n\n# This file describes the settings to be used by the documentation system\n# doxygen (www.doxygen.org) for a project.\n#\n# All text after a double hash (##) is considered a comment and is placed in\n# front of the TAG it is preceding.\n#\n# All text after a single hash (#) is considered a comment and will be ignored.\n# The format is:\n# TAG = value [value, ...]\n# For lists, items can also be appended using:\n# TAG += value [value, ...]\n# Values that contain spaces should be placed between quotes (\\\" \\\").\n\n#---------------------------------------------------------------------------\n# Project related configuration options\n#---------------------------------------------------------------------------\n\n# This tag specifies the encoding used for all characters in the configuration\n# file that follow. The default is UTF-8 which is also the encoding used for all\n# text before the first occurrence of this tag. Doxygen uses libiconv (or the\n# iconv built into libc) for the transcoding. See\n# https://www.gnu.org/software/libiconv/ for the list of possible encodings.\n# The default value is: UTF-8.\n\nDOXYFILE_ENCODING      = UTF-8\n\n# The PROJECT_NAME tag is a single word (or a sequence of words surrounded by\n# double-quotes, unless you are using Doxywizard) that should identify the\n# project for which the documentation is generated. This name is used in the\n# title of most generated pages and in a few other places.\n# The default value is: My Project.\n\nPROJECT_NAME           = simdjson\n\n# The PROJECT_NUMBER tag can be used to enter a project or revision number. This\n# could be handy for archiving the generated documentation or if some version\n# control system is used.\n\nPROJECT_NUMBER         = \"3.11.5\"\n\n# Using the PROJECT_BRIEF tag one can provide an optional one line description\n# for a project that appears at the top of each page and should give viewer a\n# quick idea about the purpose of the project. Keep the description short.\n\nPROJECT_BRIEF          = \"Ridiculously Fast JSON\"\n\n# With the PROJECT_LOGO tag one can specify a logo or an icon that is included\n# in the documentation. The maximum height of the logo should not exceed 55\n# pixels and the maximum width should not exceed 200 pixels. Doxygen will copy\n# the logo to the output directory.\n\nPROJECT_LOGO           = images/logotiny.png\n\n# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) path\n# into which the generated documentation will be written. If a relative path is\n# entered, it will be relative to the location where doxygen was started. If\n# left blank the current directory will be used.\n\nOUTPUT_DIRECTORY       = doc/api\n\n# If the CREATE_SUBDIRS tag is set to YES then doxygen will create 4096 sub-\n# directories (in 2 levels) under the output directory of each output format and\n# will distribute the generated files over these directories. Enabling this\n# option can be useful when feeding doxygen a huge amount of source files, where\n# putting all generated files in the same directory would otherwise causes\n# performance problems for the file system.\n# The default value is: NO.\n\nCREATE_SUBDIRS         = NO\n\n# If the ALLOW_UNICODE_NAMES tag is set to YES, doxygen will allow non-ASCII\n# characters to appear in the names of generated files. If set to NO, non-ASCII\n# characters will be escaped, for example _xE3_x81_x84 will be used for Unicode\n# U+3044.\n# The default value is: NO.\n\nALLOW_UNICODE_NAMES    = NO\n\n# The OUTPUT_LANGUAGE tag is used to specify the language in which all\n# documentation generated by doxygen is written. Doxygen will use this\n# information to generate all constant output in the proper language.\n# Possible values are: Afrikaans, Arabic, Armenian, Brazilian, Catalan, Chinese,\n# Chinese-Traditional, Croatian, Czech, Danish, Dutch, English (United States),\n# Esperanto, Farsi (Persian), Finnish, French, German, Greek, Hungarian,\n# Indonesian, Italian, Japanese, Japanese-en (Japanese with English messages),\n# Korean, Korean-en (Korean with English messages), Latvian, Lithuanian,\n# Macedonian, Norwegian, Persian (Farsi), Polish, Portuguese, Romanian, Russian,\n# Serbian, Serbian-Cyrillic, Slovak, Slovene, Spanish, Swedish, Turkish,\n# Ukrainian and Vietnamese.\n# The default value is: English.\n\nOUTPUT_LANGUAGE        = English\n\n# The OUTPUT_TEXT_DIRECTION tag is used to specify the direction in which all\n# documentation generated by doxygen is written. Doxygen will use this\n# information to generate all generated output in the proper direction.\n# Possible values are: None, LTR, RTL and Context.\n# The default value is: None.\n\nOUTPUT_TEXT_DIRECTION  = None\n\n# If the BRIEF_MEMBER_DESC tag is set to YES, doxygen will include brief member\n# descriptions after the members that are listed in the file and class\n# documentation (similar to Javadoc). Set to NO to disable this.\n# The default value is: YES.\n\nBRIEF_MEMBER_DESC      = YES\n\n# If the REPEAT_BRIEF tag is set to YES, doxygen will prepend the brief\n# description of a member or function before the detailed description\n#\n# Note: If both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the\n# brief descriptions will be completely suppressed.\n# The default value is: YES.\n\nREPEAT_BRIEF           = YES\n\n# This tag implements a quasi-intelligent brief description abbreviator that is\n# used to form the text in various listings. Each string in this list, if found\n# as the leading text of the brief description, will be stripped from the text\n# and the result, after processing the whole list, is used as the annotated\n# text. Otherwise, the brief description is used as-is. If left blank, the\n# following values are used ($name is automatically replaced with the name of\n# the entity):The $name class, The $name widget, The $name file, is, provides,\n# specifies, contains, represents, a, an and the.\n\nABBREVIATE_BRIEF       = \"The $name class\" \\\n                         \"The $name widget\" \\\n                         \"The $name file\" \\\n                         is \\\n                         provides \\\n                         specifies \\\n                         contains \\\n                         represents \\\n                         a \\\n                         an \\\n                         the\n\n# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then\n# doxygen will generate a detailed section even if there is only a brief\n# description.\n# The default value is: NO.\n\nALWAYS_DETAILED_SEC    = NO\n\n# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n# inherited members of a class in the documentation of that class as if those\n# members were ordinary class members. Constructors, destructors and assignment\n# operators of the base classes will not be shown.\n# The default value is: NO.\n\nINLINE_INHERITED_MEMB  = NO\n\n# If the FULL_PATH_NAMES tag is set to YES, doxygen will prepend the full path\n# before files name in the file list and in the header files. If set to NO the\n# shortest path that makes the file name unique will be used\n# The default value is: YES.\n\nFULL_PATH_NAMES        = YES\n\n# The STRIP_FROM_PATH tag can be used to strip a user-defined part of the path.\n# Stripping is only done if one of the specified strings matches the left-hand\n# part of the path. The tag can be used to show relative paths in the file list.\n# If left blank the directory from which doxygen is run is used as the path to\n# strip.\n#\n# Note that you can specify absolute paths here, but also relative paths, which\n# will be relative from the directory where doxygen is started.\n# This tag requires that the tag FULL_PATH_NAMES is set to YES.\n\nSTRIP_FROM_PATH        =\n\n# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of the\n# path mentioned in the documentation of a class, which tells the reader which\n# header file to include in order to use a class. If left blank only the name of\n# the header file containing the class definition is used. Otherwise one should\n# specify the list of include paths that are normally passed to the compiler\n# using the -I flag.\n\nSTRIP_FROM_INC_PATH    =\n\n# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter (but\n# less readable) file names. This can be useful is your file systems doesn't\n# support long names like on DOS, Mac, or CD-ROM.\n# The default value is: NO.\n\nSHORT_NAMES            = NO\n\n# If the JAVADOC_AUTOBRIEF tag is set to YES then doxygen will interpret the\n# first line (until the first dot) of a Javadoc-style comment as the brief\n# description. If set to NO, the Javadoc-style will behave just like regular Qt-\n# style comments (thus requiring an explicit @brief command for a brief\n# description.)\n# The default value is: NO.\n\nJAVADOC_AUTOBRIEF      = YES\n\n# If the JAVADOC_BANNER tag is set to YES then doxygen will interpret a line\n# such as\n# /***************\n# as being the beginning of a Javadoc-style comment \"banner\". If set to NO, the\n# Javadoc-style will behave just like regular comments and it will not be\n# interpreted by doxygen.\n# The default value is: NO.\n\nJAVADOC_BANNER         = NO\n\n# If the QT_AUTOBRIEF tag is set to YES then doxygen will interpret the first\n# line (until the first dot) of a Qt-style comment as the brief description. If\n# set to NO, the Qt-style will behave just like regular Qt-style comments (thus\n# requiring an explicit \\brief command for a brief description.)\n# The default value is: NO.\n\nQT_AUTOBRIEF           = NO\n\n# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make doxygen treat a\n# multi-line C++ special comment block (i.e. a block of //! or /// comments) as\n# a brief description. This used to be the default behavior. The new default is\n# to treat a multi-line C++ comment block as a detailed description. Set this\n# tag to YES if you prefer the old behavior instead.\n#\n# Note that setting this tag to YES also means that rational rose comments are\n# not recognized any more.\n# The default value is: NO.\n\nMULTILINE_CPP_IS_BRIEF = NO\n\n# If the INHERIT_DOCS tag is set to YES then an undocumented member inherits the\n# documentation from any documented member that it re-implements.\n# The default value is: YES.\n\nINHERIT_DOCS           = YES\n\n# If the SEPARATE_MEMBER_PAGES tag is set to YES then doxygen will produce a new\n# page for each member. If set to NO, the documentation of a member will be part\n# of the file/class/namespace that contains it.\n# The default value is: NO.\n\nSEPARATE_MEMBER_PAGES  = NO\n\n# The TAB_SIZE tag can be used to set the number of spaces in a tab. Doxygen\n# uses this value to replace tabs by spaces in code fragments.\n# Minimum value: 1, maximum value: 16, default value: 4.\n\nTAB_SIZE               = 4\n\n# This tag can be used to specify a number of aliases that act as commands in\n# the documentation. An alias has the form:\n# name=value\n# For example adding\n# \"sideeffect=@par Side Effects:\\n\"\n# will allow you to put the command \\sideeffect (or @sideeffect) in the\n# documentation, which will result in a user-defined paragraph with heading\n# \"Side Effects:\". You can put \\n's in the value part of an alias to insert\n# newlines (in the resulting output). You can put ^^ in the value part of an\n# alias to insert a newline as if a physical newline was in the original file.\n# When you need a literal { or } or , in the value part of an alias you have to\n# escape them by means of a backslash (\\), this can lead to conflicts with the\n# commands \\{ and \\} for these it is advised to use the version @{ and @} or use\n# a double escape (\\\\{ and \\\\})\n\nALIASES                =\n\n# This tag can be used to specify a number of word-keyword mappings (TCL only).\n# A mapping has the form \"name=value\". For example adding \"class=itcl::class\"\n# will allow you to use the command class in the itcl::class meaning.\n\nTCL_SUBST              =\n\n# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C sources\n# only. Doxygen will then generate output that is more tailored for C. For\n# instance, some of the names that are used will be different. The list of all\n# members will be omitted, etc.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_FOR_C  = NO\n\n# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java or\n# Python sources only. Doxygen will then generate output that is more tailored\n# for that language. For instance, namespaces will be presented as packages,\n# qualified scopes will look different, etc.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_JAVA   = NO\n\n# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran\n# sources. Doxygen will then generate output that is tailored for Fortran.\n# The default value is: NO.\n\nOPTIMIZE_FOR_FORTRAN   = NO\n\n# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL\n# sources. Doxygen will then generate output that is tailored for VHDL.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_VHDL   = NO\n\n# Set the OPTIMIZE_OUTPUT_SLICE tag to YES if your project consists of Slice\n# sources only. Doxygen will then generate output that is more tailored for that\n# language. For instance, namespaces will be presented as modules, types will be\n# separated into more groups, etc.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_SLICE  = NO\n\n# Doxygen selects the parser to use depending on the extension of the files it\n# parses. With this tag you can assign which parser to use for a given\n# extension. Doxygen has a built-in mapping, but you can override or extend it\n# using this tag. The format is ext=language, where ext is a file extension, and\n# language is one of the parsers supported by doxygen: IDL, Java, JavaScript,\n# Csharp (C#), C, C++, D, PHP, md (Markdown), Objective-C, Python, Slice,\n# Fortran (fixed format Fortran: FortranFixed, free formatted Fortran:\n# FortranFree, unknown formatted Fortran: Fortran. In the later case the parser\n# tries to guess whether the code is fixed or free formatted code, this is the\n# default for Fortran type files), VHDL, tcl. For instance to make doxygen treat\n# .inc files as Fortran files (default is PHP), and .f files as C (default is\n# Fortran), use: inc=Fortran f=C.\n#\n# Note: For files without extension you can use no_extension as a placeholder.\n#\n# Note that for custom extensions you also need to set FILE_PATTERNS otherwise\n# the files are not read by doxygen.\n\nEXTENSION_MAPPING      =\n\n# If the MARKDOWN_SUPPORT tag is enabled then doxygen pre-processes all comments\n# according to the Markdown format, which allows for more readable\n# documentation. See https://daringfireball.net/projects/markdown/ for details.\n# The output of markdown processing is further processed by doxygen, so you can\n# mix doxygen, HTML, and XML commands with Markdown formatting. Disable only in\n# case of backward compatibilities issues.\n# The default value is: YES.\n\nMARKDOWN_SUPPORT       = YES\n\n# When the TOC_INCLUDE_HEADINGS tag is set to a non-zero value, all headings up\n# to that level are automatically included in the table of contents, even if\n# they do not have an id attribute.\n# Note: This feature currently applies only to Markdown headings.\n# Minimum value: 0, maximum value: 99, default value: 5.\n# This tag requires that the tag MARKDOWN_SUPPORT is set to YES.\n\nTOC_INCLUDE_HEADINGS   = 5\n\n# When enabled doxygen tries to link words that correspond to documented\n# classes, or namespaces to their corresponding documentation. Such a link can\n# be prevented in individual cases by putting a % sign in front of the word or\n# globally by setting AUTOLINK_SUPPORT to NO.\n# The default value is: YES.\n\nAUTOLINK_SUPPORT       = YES\n\n# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want\n# to include (a tag file for) the STL sources as input, then you should set this\n# tag to YES in order to let doxygen match functions declarations and\n# definitions whose arguments contain STL classes (e.g. func(std::string);\n# versus func(std::string) {}). This also make the inheritance and collaboration\n# diagrams that involve STL classes more complete and accurate.\n# The default value is: NO.\n\nBUILTIN_STL_SUPPORT    = NO\n\n# If you use Microsoft's C++/CLI language, you should set this option to YES to\n# enable parsing support.\n# The default value is: NO.\n\nCPP_CLI_SUPPORT        = NO\n\n# Set the SIP_SUPPORT tag to YES if your project consists of sip (see:\n# https://www.riverbankcomputing.com/software/sip/intro) sources only. Doxygen\n# will parse them like normal C++ but will assume all classes use public instead\n# of private inheritance when no explicit protection keyword is present.\n# The default value is: NO.\n\nSIP_SUPPORT            = NO\n\n# For Microsoft's IDL there are propget and propput attributes to indicate\n# getter and setter methods for a property. Setting this option to YES will make\n# doxygen to replace the get and set methods by a property in the documentation.\n# This will only work if the methods are indeed getting or setting a simple\n# type. If this is not the case, or you want to show the methods anyway, you\n# should set this option to NO.\n# The default value is: YES.\n\nIDL_PROPERTY_SUPPORT   = YES\n\n# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n# tag is set to YES then doxygen will reuse the documentation of the first\n# member in the group (if any) for the other members of the group. By default\n# all members of a group must be documented explicitly.\n# The default value is: NO.\n\nDISTRIBUTE_GROUP_DOC   = NO\n\n# If one adds a struct or class to a group and this option is enabled, then also\n# any nested class or struct is added to the same group. By default this option\n# is disabled and one has to add nested compounds explicitly via \\ingroup.\n# The default value is: NO.\n\nGROUP_NESTED_COMPOUNDS = NO\n\n# Set the SUBGROUPING tag to YES to allow class member groups of the same type\n# (for instance a group of public functions) to be put as a subgroup of that\n# type (e.g. under the Public Functions section). Set it to NO to prevent\n# subgrouping. Alternatively, this can be done per class using the\n# \\nosubgrouping command.\n# The default value is: YES.\n\nSUBGROUPING            = YES\n\n# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and unions\n# are shown inside the group in which they are included (e.g. using \\ingroup)\n# instead of on a separate page (for HTML and Man pages) or section (for LaTeX\n# and RTF).\n#\n# Note that this feature does not work in combination with\n# SEPARATE_MEMBER_PAGES.\n# The default value is: NO.\n\nINLINE_GROUPED_CLASSES = NO\n\n# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and unions\n# with only public data fields or simple typedef fields will be shown inline in\n# the documentation of the scope in which they are defined (i.e. file,\n# namespace, or group documentation), provided this scope is documented. If set\n# to NO, structs, classes, and unions are shown on a separate page (for HTML and\n# Man pages) or section (for LaTeX and RTF).\n# The default value is: NO.\n\nINLINE_SIMPLE_STRUCTS  = NO\n\n# When TYPEDEF_HIDES_STRUCT tag is enabled, a typedef of a struct, union, or\n# enum is documented as struct, union, or enum with the name of the typedef. So\n# typedef struct TypeS {} TypeT, will appear in the documentation as a struct\n# with name TypeT. When disabled the typedef will appear as a member of a file,\n# namespace, or class. And the struct will be named TypeS. This can typically be\n# useful for C code in case the coding convention dictates that all compound\n# types are typedef'ed and only the typedef is referenced, never the tag name.\n# The default value is: NO.\n\nTYPEDEF_HIDES_STRUCT   = NO\n\n# The size of the symbol lookup cache can be set using LOOKUP_CACHE_SIZE. This\n# cache is used to resolve symbols given their name and scope. Since this can be\n# an expensive process and often the same symbol appears multiple times in the\n# code, doxygen keeps a cache of pre-resolved symbols. If the cache is too small\n# doxygen will become slower. If the cache is too large, memory is wasted. The\n# cache size is given by this formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range\n# is 0..9, the default is 0, corresponding to a cache size of 2^16=65536\n# symbols. At the end of a run doxygen will report the cache usage and suggest\n# the optimal cache size from a speed point of view.\n# Minimum value: 0, maximum value: 9, default value: 0.\n\nLOOKUP_CACHE_SIZE      = 0\n\n#---------------------------------------------------------------------------\n# Build related configuration options\n#---------------------------------------------------------------------------\n\n# If the EXTRACT_ALL tag is set to YES, doxygen will assume all entities in\n# documentation are documented, even if no documentation was available. Private\n# class members and static file members will be hidden unless the\n# EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES.\n# Note: This will also disable the warnings about undocumented members that are\n# normally produced when WARNINGS is set to YES.\n# The default value is: NO.\n\nEXTRACT_ALL            = NO\n\n# If the EXTRACT_PRIVATE tag is set to YES, all private members of a class will\n# be included in the documentation.\n# The default value is: NO.\n\nEXTRACT_PRIVATE        = NO\n\n# If the EXTRACT_PRIV_VIRTUAL tag is set to YES, documented private virtual\n# methods of a class will be included in the documentation.\n# The default value is: NO.\n\nEXTRACT_PRIV_VIRTUAL   = NO\n\n# If the EXTRACT_PACKAGE tag is set to YES, all members with package or internal\n# scope will be included in the documentation.\n# The default value is: NO.\n\nEXTRACT_PACKAGE        = NO\n\n# If the EXTRACT_STATIC tag is set to YES, all static members of a file will be\n# included in the documentation.\n# The default value is: NO.\n\nEXTRACT_STATIC         = NO\n\n# If the EXTRACT_LOCAL_CLASSES tag is set to YES, classes (and structs) defined\n# locally in source files will be included in the documentation. If set to NO,\n# only classes defined in header files are included. Does not have any effect\n# for Java sources.\n# The default value is: YES.\n\nEXTRACT_LOCAL_CLASSES  = YES\n\n# This flag is only useful for Objective-C code. If set to YES, local methods,\n# which are defined in the implementation section but not in the interface are\n# included in the documentation. If set to NO, only methods in the interface are\n# included.\n# The default value is: NO.\n\nEXTRACT_LOCAL_METHODS  = NO\n\n# If this flag is set to YES, the members of anonymous namespaces will be\n# extracted and appear in the documentation as a namespace called\n# 'anonymous_namespace{file}', where file will be replaced with the base name of\n# the file that contains the anonymous namespace. By default anonymous namespace\n# are hidden.\n# The default value is: NO.\n\nEXTRACT_ANON_NSPACES   = NO\n\n# If the HIDE_UNDOC_MEMBERS tag is set to YES, doxygen will hide all\n# undocumented members inside documented classes or files. If set to NO these\n# members will be included in the various overviews, but no documentation\n# section is generated. This option has no effect if EXTRACT_ALL is enabled.\n# The default value is: NO.\n\nHIDE_UNDOC_MEMBERS     = NO\n\n# If the HIDE_UNDOC_CLASSES tag is set to YES, doxygen will hide all\n# undocumented classes that are normally visible in the class hierarchy. If set\n# to NO, these classes will be included in the various overviews. This option\n# has no effect if EXTRACT_ALL is enabled.\n# The default value is: NO.\n\nHIDE_UNDOC_CLASSES     = NO\n\n# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, doxygen will hide all friend\n# declarations. If set to NO, these declarations will be included in the\n# documentation.\n# The default value is: NO.\n\nHIDE_FRIEND_COMPOUNDS  = YES\n\n# If the HIDE_IN_BODY_DOCS tag is set to YES, doxygen will hide any\n# documentation blocks found inside the body of a function. If set to NO, these\n# blocks will be appended to the function's detailed documentation block.\n# The default value is: NO.\n\nHIDE_IN_BODY_DOCS      = NO\n\n# The INTERNAL_DOCS tag determines if documentation that is typed after a\n# \\internal command is included. If the tag is set to NO then the documentation\n# will be excluded. Set it to YES to include the internal documentation.\n# The default value is: NO.\n\nINTERNAL_DOCS          = NO\n\n# If the CASE_SENSE_NAMES tag is set to NO then doxygen will only generate file\n# names in lower-case letters. If set to YES, upper-case letters are also\n# allowed. This is useful if you have classes or files whose names only differ\n# in case and if your file system supports case sensitive file names. Windows\n# (including Cygwin) ands Mac users are advised to set this option to NO.\n# The default value is: system dependent.\n\nCASE_SENSE_NAMES       = NO\n\n# If the HIDE_SCOPE_NAMES tag is set to NO then doxygen will show members with\n# their full class and namespace scopes in the documentation. If set to YES, the\n# scope will be hidden.\n# The default value is: NO.\n\nHIDE_SCOPE_NAMES       = NO\n\n# If the HIDE_COMPOUND_REFERENCE tag is set to NO (default) then doxygen will\n# append additional text to a page's title, such as Class Reference. If set to\n# YES the compound reference will be hidden.\n# The default value is: NO.\n\nHIDE_COMPOUND_REFERENCE= NO\n\n# If the SHOW_INCLUDE_FILES tag is set to YES then doxygen will put a list of\n# the files that are included by a file in the documentation of that file.\n# The default value is: YES.\n\nSHOW_INCLUDE_FILES     = NO\n\n# If the SHOW_GROUPED_MEMB_INC tag is set to YES then Doxygen will add for each\n# grouped member an include statement to the documentation, telling the reader\n# which file to include in order to use the member.\n# The default value is: NO.\n\nSHOW_GROUPED_MEMB_INC  = NO\n\n# If the FORCE_LOCAL_INCLUDES tag is set to YES then doxygen will list include\n# files with double quotes in the documentation rather than with sharp brackets.\n# The default value is: NO.\n\nFORCE_LOCAL_INCLUDES   = NO\n\n# If the INLINE_INFO tag is set to YES then a tag [inline] is inserted in the\n# documentation for inline members.\n# The default value is: YES.\n\nINLINE_INFO            = YES\n\n# If the SORT_MEMBER_DOCS tag is set to YES then doxygen will sort the\n# (detailed) documentation of file and class members alphabetically by member\n# name. If set to NO, the members will appear in declaration order.\n# The default value is: YES.\n\nSORT_MEMBER_DOCS       = YES\n\n# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the brief\n# descriptions of file, namespace and class members alphabetically by member\n# name. If set to NO, the members will appear in declaration order. Note that\n# this will also influence the order of the classes in the class list.\n# The default value is: NO.\n\nSORT_BRIEF_DOCS        = NO\n\n# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the\n# (brief and detailed) documentation of class members so that constructors and\n# destructors are listed first. If set to NO the constructors will appear in the\n# respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.\n# Note: If SORT_BRIEF_DOCS is set to NO this option is ignored for sorting brief\n# member documentation.\n# Note: If SORT_MEMBER_DOCS is set to NO this option is ignored for sorting\n# detailed member documentation.\n# The default value is: NO.\n\nSORT_MEMBERS_CTORS_1ST = NO\n\n# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the hierarchy\n# of group names into alphabetical order. If set to NO the group names will\n# appear in their defined order.\n# The default value is: NO.\n\nSORT_GROUP_NAMES       = NO\n\n# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be sorted by\n# fully-qualified names, including namespaces. If set to NO, the class list will\n# be sorted only by class name, not including the namespace part.\n# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.\n# Note: This option applies only to the class list, not to the alphabetical\n# list.\n# The default value is: NO.\n\nSORT_BY_SCOPE_NAME     = NO\n\n# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to do proper\n# type resolution of all parameters of a function it will reject a match between\n# the prototype and the implementation of a member function even if there is\n# only one candidate or it is obvious which candidate to choose by doing a\n# simple string match. By disabling STRICT_PROTO_MATCHING doxygen will still\n# accept a match between prototype and implementation in such cases.\n# The default value is: NO.\n\nSTRICT_PROTO_MATCHING  = NO\n\n# The GENERATE_TODOLIST tag can be used to enable (YES) or disable (NO) the todo\n# list. This list is created by putting \\todo commands in the documentation.\n# The default value is: YES.\n\nGENERATE_TODOLIST      = YES\n\n# The GENERATE_TESTLIST tag can be used to enable (YES) or disable (NO) the test\n# list. This list is created by putting \\test commands in the documentation.\n# The default value is: YES.\n\nGENERATE_TESTLIST      = YES\n\n# The GENERATE_BUGLIST tag can be used to enable (YES) or disable (NO) the bug\n# list. This list is created by putting \\bug commands in the documentation.\n# The default value is: YES.\n\nGENERATE_BUGLIST       = YES\n\n# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or disable (NO)\n# the deprecated list. This list is created by putting \\deprecated commands in\n# the documentation.\n# The default value is: YES.\n\nGENERATE_DEPRECATEDLIST= YES\n\n# The ENABLED_SECTIONS tag can be used to enable conditional documentation\n# sections, marked by \\if <section_label> ... \\endif and \\cond <section_label>\n# ... \\endcond blocks.\n\nENABLED_SECTIONS       =\n\n# The MAX_INITIALIZER_LINES tag determines the maximum number of lines that the\n# initial value of a variable or macro / define can have for it to appear in the\n# documentation. If the initializer consists of more lines than specified here\n# it will be hidden. Use a value of 0 to hide initializers completely. The\n# appearance of the value of individual variables and macros / defines can be\n# controlled using \\showinitializer or \\hideinitializer command in the\n# documentation regardless of this setting.\n# Minimum value: 0, maximum value: 10000, default value: 30.\n\nMAX_INITIALIZER_LINES  = 30\n\n# Set the SHOW_USED_FILES tag to NO to disable the list of files generated at\n# the bottom of the documentation of classes and structs. If set to YES, the\n# list will mention the files that were used to generate the documentation.\n# The default value is: YES.\n\nSHOW_USED_FILES        = YES\n\n# Set the SHOW_FILES tag to NO to disable the generation of the Files page. This\n# will remove the Files entry from the Quick Index and from the Folder Tree View\n# (if specified).\n# The default value is: YES.\n\nSHOW_FILES             = YES\n\n# Set the SHOW_NAMESPACES tag to NO to disable the generation of the Namespaces\n# page. This will remove the Namespaces entry from the Quick Index and from the\n# Folder Tree View (if specified).\n# The default value is: YES.\n\nSHOW_NAMESPACES        = YES\n\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command command input-file, where command is the value of the\n# FILE_VERSION_FILTER tag, and input-file is the name of an input file provided\n# by doxygen. Whatever the program writes to standard output is used as the file\n# version. For an example see the documentation.\n\nFILE_VERSION_FILTER    =\n\n# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed\n# by doxygen. The layout file controls the global structure of the generated\n# output files in an output format independent way. To create the layout file\n# that represents doxygen's defaults, run doxygen with the -l option. You can\n# optionally specify a file name after the option, if omitted DoxygenLayout.xml\n# will be used as the name of the layout file.\n#\n# Note that if you run doxygen from a directory containing a file called\n# DoxygenLayout.xml, doxygen will parse it automatically even if the LAYOUT_FILE\n# tag is left empty.\n\nLAYOUT_FILE            =\n\n# The CITE_BIB_FILES tag can be used to specify one or more bib files containing\n# the reference definitions. This must be a list of .bib files. The .bib\n# extension is automatically appended if omitted. This requires the bibtex tool\n# to be installed. See also https://en.wikipedia.org/wiki/BibTeX for more info.\n# For LaTeX the style of the bibliography can be controlled using\n# LATEX_BIB_STYLE. To use this feature you need bibtex and perl available in the\n# search path. See also \\cite for info how to create references.\n\nCITE_BIB_FILES         =\n\n#---------------------------------------------------------------------------\n# Configuration options related to warning and progress messages\n#---------------------------------------------------------------------------\n\n# The QUIET tag can be used to turn on/off the messages that are generated to\n# standard output by doxygen. If QUIET is set to YES this implies that the\n# messages are off.\n# The default value is: NO.\n\nQUIET                  = NO\n\n# The WARNINGS tag can be used to turn on/off the warning messages that are\n# generated to standard error (stderr) by doxygen. If WARNINGS is set to YES\n# this implies that the warnings are on.\n#\n# Tip: Turn warnings on while writing the documentation.\n# The default value is: YES.\n\nWARNINGS               = YES\n\n# If the WARN_IF_UNDOCUMENTED tag is set to YES then doxygen will generate\n# warnings for undocumented members. If EXTRACT_ALL is set to YES then this flag\n# will automatically be disabled.\n# The default value is: YES.\n\nWARN_IF_UNDOCUMENTED   = YES\n\n# If the WARN_IF_DOC_ERROR tag is set to YES, doxygen will generate warnings for\n# potential errors in the documentation, such as not documenting some parameters\n# in a documented function, or documenting parameters that don't exist or using\n# markup commands wrongly.\n# The default value is: YES.\n\nWARN_IF_DOC_ERROR      = YES\n\n# This WARN_NO_PARAMDOC option can be enabled to get warnings for functions that\n# are documented, but have no documentation for their parameters or return\n# value. If set to NO, doxygen will only warn about wrong or incomplete\n# parameter documentation, but not about the absence of documentation. If\n# EXTRACT_ALL is set to YES then this flag will automatically be disabled.\n# The default value is: NO.\n\nWARN_NO_PARAMDOC       = NO\n\n# If the WARN_AS_ERROR tag is set to YES then doxygen will immediately stop when\n# a warning is encountered.\n# The default value is: NO.\n\nWARN_AS_ERROR          = NO\n\n# The WARN_FORMAT tag determines the format of the warning messages that doxygen\n# can produce. The string should contain the $file, $line, and $text tags, which\n# will be replaced by the file and line number from which the warning originated\n# and the warning text. Optionally the format may contain $version, which will\n# be replaced by the version of the file (if it could be obtained via\n# FILE_VERSION_FILTER)\n# The default value is: $file:$line: $text.\n\nWARN_FORMAT            = \"$file:$line: $text\"\n\n# The WARN_LOGFILE tag can be used to specify a file to which warning and error\n# messages should be written. If left blank the output is written to standard\n# error (stderr).\n\nWARN_LOGFILE           =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the input files\n#---------------------------------------------------------------------------\n\n# The INPUT tag is used to specify the files and/or directories that contain\n# documented source files. You may enter file names like myfile.cpp or\n# directories like /usr/src/myproject. Separate the files or directories with\n# spaces. See also FILE_PATTERNS and EXTENSION_MAPPING\n# Note: If this tag is empty the current directory is searched.\n\nINPUT                  = doc include/simdjson include/simdjson/dom include/simdjson/generic\n\n# This tag can be used to specify the character encoding of the source files\n# that doxygen parses. Internally doxygen uses the UTF-8 encoding. Doxygen uses\n# libiconv (or the iconv built into libc) for the transcoding. See the libiconv\n# documentation (see: https://www.gnu.org/software/libiconv/) for the list of\n# possible encodings.\n# The default value is: UTF-8.\n\nINPUT_ENCODING         = UTF-8\n\n# If the value of the INPUT tag contains directories, you can use the\n# FILE_PATTERNS tag to specify one or more wildcard patterns (like *.cpp and\n# *.h) to filter out the source-files in the directories.\n#\n# Note that for custom extensions or not directly supported extensions you also\n# need to set EXTENSION_MAPPING for the extension otherwise the files are not\n# read by doxygen.\n#\n# If left blank the following patterns are tested:*.c, *.cc, *.cxx, *.cpp,\n# *.c++, *.java, *.ii, *.ixx, *.ipp, *.i++, *.inl, *.idl, *.ddl, *.odl, *.h,\n# *.hh, *.hxx, *.hpp, *.h++, *.cs, *.d, *.php, *.php4, *.php5, *.phtml, *.inc,\n# *.m, *.markdown, *.md, *.mm, *.dox (to be provided as doxygen C comment),\n# *.doc (to be provided as doxygen C comment), *.txt (to be provided as doxygen\n# C comment), *.py, *.pyw, *.f90, *.f95, *.f03, *.f08, *.f, *.for, *.tcl, *.vhd,\n# *.vhdl, *.ucf, *.qsf and *.ice.\n\nFILE_PATTERNS          = *.c \\\n                         *.cc \\\n                         *.cxx \\\n                         *.cpp \\\n                         *.c++ \\\n                         *.java \\\n                         *.ii \\\n                         *.ixx \\\n                         *.ipp \\\n                         *.i++ \\\n                         *.inl \\\n                         *.idl \\\n                         *.ddl \\\n                         *.odl \\\n                         *.h \\\n                         *.hh \\\n                         *.hxx \\\n                         *.hpp \\\n                         *.h++ \\\n                         *.cs \\\n                         *.d \\\n                         *.php \\\n                         *.php4 \\\n                         *.php5 \\\n                         *.phtml \\\n                         *.inc \\\n                         *.m \\\n                         *.markdown \\\n                         *.md \\\n                         *.mm \\\n                         *.dox \\\n                         *.doc \\\n                         *.txt \\\n                         *.py \\\n                         *.pyw \\\n                         *.f90 \\\n                         *.f95 \\\n                         *.f03 \\\n                         *.f08 \\\n                         *.f \\\n                         *.for \\\n                         *.tcl \\\n                         *.vhd \\\n                         *.vhdl \\\n                         *.ucf \\\n                         *.qsf \\\n                         *.ice\n\n# The RECURSIVE tag can be used to specify whether or not subdirectories should\n# be searched for input files as well.\n# The default value is: NO.\n\nRECURSIVE              = YES\n\n# The EXCLUDE tag can be used to specify files and/or directories that should be\n# excluded from the INPUT source files. This way you can easily exclude a\n# subdirectory from a directory tree whose root is specified with the INPUT tag.\n#\n# Note that relative paths are relative to the directory from which doxygen is\n# run.\n\nEXCLUDE                =\n\n# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or\n# directories that are symbolic links (a Unix file system feature) are excluded\n# from the input.\n# The default value is: NO.\n\nEXCLUDE_SYMLINKS       = NO\n\n# If the value of the INPUT tag contains directories, you can use the\n# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude\n# certain files from those directories.\n#\n# Note that the wildcards are matched against the file with absolute path, so to\n# exclude all test directories for example use the pattern */test/*\n\nEXCLUDE_PATTERNS       =\n\n# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names\n# (namespaces, classes, functions, etc.) that should be excluded from the\n# output. The symbol name can be a fully qualified name, a word, or if the\n# wildcard * is used, a substring. Examples: ANamespace, AClass,\n# AClass::ANamespace, ANamespace::*Test\n#\n# Note that the wildcards are matched against the file with absolute path, so to\n# exclude all test directories use the pattern */test/*\n\nEXCLUDE_SYMBOLS        = simdjson::internal\n\n# The EXAMPLE_PATH tag can be used to specify one or more files or directories\n# that contain example code fragments that are included (see the \\include\n# command).\n\nEXAMPLE_PATH           =\n\n# If the value of the EXAMPLE_PATH tag contains directories, you can use the\n# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp and\n# *.h) to filter out the source-files in the directories. If left blank all\n# files are included.\n\nEXAMPLE_PATTERNS       = *\n\n# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be\n# searched for input files to be used with the \\include or \\dontinclude commands\n# irrespective of the value of the RECURSIVE tag.\n# The default value is: NO.\n\nEXAMPLE_RECURSIVE      = NO\n\n# The IMAGE_PATH tag can be used to specify one or more files or directories\n# that contain images that are to be included in the documentation (see the\n# \\image command).\n\nIMAGE_PATH             =\n\n# The INPUT_FILTER tag can be used to specify a program that doxygen should\n# invoke to filter for each input file. Doxygen will invoke the filter program\n# by executing (via popen()) the command:\n#\n# <filter> <input-file>\n#\n# where <filter> is the value of the INPUT_FILTER tag, and <input-file> is the\n# name of an input file. Doxygen will then use the output that the filter\n# program writes to standard output. If FILTER_PATTERNS is specified, this tag\n# will be ignored.\n#\n# Note that the filter must not add or remove lines; it is applied before the\n# code is scanned, but not when the output code is generated. If lines are added\n# or removed, the anchors will not be placed correctly.\n#\n# Note that for custom extensions or not directly supported extensions you also\n# need to set EXTENSION_MAPPING for the extension otherwise the files are not\n# properly processed by doxygen.\n\nINPUT_FILTER           =\n\n# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern\n# basis. Doxygen will compare the file name with each pattern and apply the\n# filter if there is a match. The filters are a list of the form: pattern=filter\n# (like *.cpp=my_cpp_filter). See INPUT_FILTER for further information on how\n# filters are used. If the FILTER_PATTERNS tag is empty or if none of the\n# patterns match the file name, INPUT_FILTER is applied.\n#\n# Note that for custom extensions or not directly supported extensions you also\n# need to set EXTENSION_MAPPING for the extension otherwise the files are not\n# properly processed by doxygen.\n\nFILTER_PATTERNS        =\n\n# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using\n# INPUT_FILTER) will also be used to filter the input files that are used for\n# producing the source files to browse (i.e. when SOURCE_BROWSER is set to YES).\n# The default value is: NO.\n\nFILTER_SOURCE_FILES    = NO\n\n# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file\n# pattern. A pattern will override the setting for FILTER_PATTERN (if any) and\n# it is also possible to disable source filtering for a specific pattern using\n# *.ext= (so without naming a filter).\n# This tag requires that the tag FILTER_SOURCE_FILES is set to YES.\n\nFILTER_SOURCE_PATTERNS =\n\n# If the USE_MDFILE_AS_MAINPAGE tag refers to the name of a markdown file that\n# is part of the input, its contents will be placed on the main page\n# (index.html). This can be useful if you have a project on for instance GitHub\n# and want to reuse the introduction page also for the doxygen output.\n\nUSE_MDFILE_AS_MAINPAGE = doc/basics_doxygen.md\n\n#---------------------------------------------------------------------------\n# Configuration options related to source browsing\n#---------------------------------------------------------------------------\n\n# If the SOURCE_BROWSER tag is set to YES then a list of source files will be\n# generated. Documented entities will be cross-referenced with these sources.\n#\n# Note: To get rid of all source code in the generated output, make sure that\n# also VERBATIM_HEADERS is set to NO.\n# The default value is: NO.\n\nSOURCE_BROWSER         = YES\n\n# Setting the INLINE_SOURCES tag to YES will include the body of functions,\n# classes and enums directly into the documentation.\n# The default value is: NO.\n\nINLINE_SOURCES         = NO\n\n# Setting the STRIP_CODE_COMMENTS tag to YES will instruct doxygen to hide any\n# special comment blocks from generated source code fragments. Normal C, C++ and\n# Fortran comments will always remain visible.\n# The default value is: YES.\n\nSTRIP_CODE_COMMENTS    = YES\n\n# If the REFERENCED_BY_RELATION tag is set to YES then for each documented\n# entity all documented functions referencing it will be listed.\n# The default value is: NO.\n\nREFERENCED_BY_RELATION = NO\n\n# If the REFERENCES_RELATION tag is set to YES then for each documented function\n# all documented entities called/used by that function will be listed.\n# The default value is: NO.\n\nREFERENCES_RELATION    = NO\n\n# If the REFERENCES_LINK_SOURCE tag is set to YES and SOURCE_BROWSER tag is set\n# to YES then the hyperlinks from functions in REFERENCES_RELATION and\n# REFERENCED_BY_RELATION lists will link to the source code. Otherwise they will\n# link to the documentation.\n# The default value is: YES.\n\nREFERENCES_LINK_SOURCE = YES\n\n# If SOURCE_TOOLTIPS is enabled (the default) then hovering a hyperlink in the\n# source code will show a tooltip with additional information such as prototype,\n# brief description and links to the definition and documentation. Since this\n# will make the HTML file larger and loading of large files a bit slower, you\n# can opt to disable this feature.\n# The default value is: YES.\n# This tag requires that the tag SOURCE_BROWSER is set to YES.\n\nSOURCE_TOOLTIPS        = YES\n\n# If the USE_HTAGS tag is set to YES then the references to source code will\n# point to the HTML generated by the htags(1) tool instead of doxygen built-in\n# source browser. The htags tool is part of GNU's global source tagging system\n# (see https://www.gnu.org/software/global/global.html). You will need version\n# 4.8.6 or higher.\n#\n# To use it do the following:\n# - Install the latest version of global\n# - Enable SOURCE_BROWSER and USE_HTAGS in the configuration file\n# - Make sure the INPUT points to the root of the source tree\n# - Run doxygen as normal\n#\n# Doxygen will invoke htags (and that will in turn invoke gtags), so these\n# tools must be available from the command line (i.e. in the search path).\n#\n# The result: instead of the source browser generated by doxygen, the links to\n# source code will now point to the output of htags.\n# The default value is: NO.\n# This tag requires that the tag SOURCE_BROWSER is set to YES.\n\nUSE_HTAGS              = NO\n\n# If the VERBATIM_HEADERS tag is set the YES then doxygen will generate a\n# verbatim copy of the header file for each class for which an include is\n# specified. Set to NO to disable this.\n# See also: Section \\class.\n# The default value is: YES.\n\nVERBATIM_HEADERS       = YES\n\n# If the CLANG_ASSISTED_PARSING tag is set to YES then doxygen will use the\n# clang parser (see: http://clang.llvm.org/) for more accurate parsing at the\n# cost of reduced performance. This can be particularly helpful with template\n# rich C++ code for which doxygen's built-in parser lacks the necessary type\n# information.\n# Note: The availability of this option depends on whether or not doxygen was\n# generated with the -Duse_libclang=ON option for CMake.\n# The default value is: NO.\n\nCLANG_ASSISTED_PARSING = NO\n\n# If clang assisted parsing is enabled you can provide the compiler with command\n# line options that you would normally use when invoking the compiler. Note that\n# the include paths will already be set by doxygen for the files and directories\n# specified with INPUT and INCLUDE_PATH.\n# This tag requires that the tag CLANG_ASSISTED_PARSING is set to YES.\n\nCLANG_OPTIONS          =\n\n# If clang assisted parsing is enabled you can provide the clang parser with the\n# path to the compilation database (see:\n# http://clang.llvm.org/docs/HowToSetupToolingForLLVM.html) used when the files\n# were built. This is equivalent to specifying the \"-p\" option to a clang tool,\n# such as clang-check. These options will then be passed to the parser.\n# Note: The availability of this option depends on whether or not doxygen was\n# generated with the -Duse_libclang=ON option for CMake.\n\nCLANG_DATABASE_PATH    =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the alphabetical class index\n#---------------------------------------------------------------------------\n\n# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index of all\n# compounds will be generated. Enable this if the project contains a lot of\n# classes, structs, unions or interfaces.\n# The default value is: YES.\n\nALPHABETICAL_INDEX     = YES\n\n# The COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns in\n# which the alphabetical index list will be split.\n# Minimum value: 1, maximum value: 20, default value: 5.\n# This tag requires that the tag ALPHABETICAL_INDEX is set to YES.\n\nCOLS_IN_ALPHA_INDEX    = 5\n\n# In case all classes in a project start with a common prefix, all classes will\n# be put under the same header in the alphabetical index. The IGNORE_PREFIX tag\n# can be used to specify a prefix (or a list of prefixes) that should be ignored\n# while generating the index headers.\n# This tag requires that the tag ALPHABETICAL_INDEX is set to YES.\n\nIGNORE_PREFIX          =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the HTML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_HTML tag is set to YES, doxygen will generate HTML output\n# The default value is: YES.\n\nGENERATE_HTML          = YES\n\n# The HTML_OUTPUT tag is used to specify where the HTML docs will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: html.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_OUTPUT            = html\n\n# The HTML_FILE_EXTENSION tag can be used to specify the file extension for each\n# generated HTML page (for example: .htm, .php, .asp).\n# The default value is: .html.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_FILE_EXTENSION    = .html\n\n# The HTML_HEADER tag can be used to specify a user-defined HTML header file for\n# each generated HTML page. If the tag is left blank doxygen will generate a\n# standard header.\n#\n# To get valid HTML the header file that includes any scripts and style sheets\n# that doxygen needs, which is dependent on the configuration options used (e.g.\n# the setting GENERATE_TREEVIEW). It is highly recommended to start with a\n# default header using\n# doxygen -w html new_header.html new_footer.html new_stylesheet.css\n# YourConfigFile\n# and then modify the file new_header.html. See also section \"Doxygen usage\"\n# for information on how to generate the default header that doxygen normally\n# uses.\n# Note: The header is subject to change so you typically have to regenerate the\n# default header when upgrading to a newer version of doxygen. For a description\n# of the possible markers and block names see the documentation.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_HEADER            =\n\n# The HTML_FOOTER tag can be used to specify a user-defined HTML footer for each\n# generated HTML page. If the tag is left blank doxygen will generate a standard\n# footer. See HTML_HEADER for more information on how to generate a default\n# footer and what special commands can be used inside the footer. See also\n# section \"Doxygen usage\" for information on how to generate the default footer\n# that doxygen normally uses.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_FOOTER            =\n\n# The HTML_STYLESHEET tag can be used to specify a user-defined cascading style\n# sheet that is used by each HTML page. It can be used to fine-tune the look of\n# the HTML output. If left blank doxygen will generate a default style sheet.\n# See also section \"Doxygen usage\" for information on how to generate the style\n# sheet that doxygen normally uses.\n# Note: It is recommended to use HTML_EXTRA_STYLESHEET instead of this tag, as\n# it is more robust and this tag (HTML_STYLESHEET) will in the future become\n# obsolete.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_STYLESHEET        =\n\n# The HTML_EXTRA_STYLESHEET tag can be used to specify additional user-defined\n# cascading style sheets that are included after the standard style sheets\n# created by doxygen. Using this option one can overrule certain style aspects.\n# This is preferred over using HTML_STYLESHEET since it does not replace the\n# standard style sheet and is therefore more robust against future updates.\n# Doxygen will copy the style sheet files to the output directory.\n# Note: The order of the extra style sheet files is of importance (e.g. the last\n# style sheet in the list overrules the setting of the previous ones in the\n# list). For an example see the documentation.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\n\nHTML_EXTRA_STYLESHEET  = theme/doxygen-awesome.css \\\n                         theme/doxygen-awesome-sidebar-only.css \\\n                         theme/doxygen-awesome-sidebar-only-darkmode-toggle.css\n\n# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or\n# other source files which should be copied to the HTML output directory. Note\n# that these files will be copied to the base HTML output directory. Use the\n# $relpath^ marker in the HTML_HEADER and/or HTML_FOOTER files to load these\n# files. In the HTML_STYLESHEET file, use the file name only. Also note that the\n# files will be copied as-is; there are no commands or markers available.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_EXTRA_FILES       = theme/doxygen-awesome-darkmode-toggle.js \\\n                         theme/doxygen-awesome-interactive-toc.js \\\n                         theme/doxygen-awesome-fragment-copy-button.js \\\n                         theme/doxygen-awesome-paragraph-link.js\n\n# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output. Doxygen\n# will adjust the colors in the style sheet and background images according to\n# this color. Hue is specified as an angle on a colorwheel, see\n# https://en.wikipedia.org/wiki/Hue for more information. For instance the value\n# 0 represents red, 60 is yellow, 120 is green, 180 is cyan, 240 is blue, 300\n# purple, and 360 is red again.\n# Minimum value: 0, maximum value: 359, default value: 220.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_COLORSTYLE_HUE    = 220\n\n# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of the colors\n# in the HTML output. For a value of 0 the output will use grayscales only. A\n# value of 255 will produce the most vivid colors.\n# Minimum value: 0, maximum value: 255, default value: 100.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_COLORSTYLE_SAT    = 100\n\n# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to the\n# luminance component of the colors in the HTML output. Values below 100\n# gradually make the output lighter, whereas values above 100 make the output\n# darker. The value divided by 100 is the actual gamma applied, so 80 represents\n# a gamma of 0.8, The value 220 represents a gamma of 2.2, and 100 does not\n# change the gamma.\n# Minimum value: 40, maximum value: 240, default value: 80.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_COLORSTYLE_GAMMA  = 80\n\n# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML\n# page will contain the date and time when the page was generated. Setting this\n# to YES can help to show when doxygen was last run and thus if the\n# documentation is up to date.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_TIMESTAMP         = NO\n\n# If the HTML_DYNAMIC_MENUS tag is set to YES then the generated HTML\n# documentation will contain a main index with vertical navigation menus that\n# are dynamically created via JavaScript. If disabled, the navigation index will\n# consists of multiple levels of tabs that are statically embedded in every HTML\n# page. Disable this option to support browsers that do not have JavaScript,\n# like the Qt help browser.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_DYNAMIC_MENUS     = YES\n\n# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML\n# documentation will contain sections that can be hidden and shown after the\n# page has loaded.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_DYNAMIC_SECTIONS  = NO\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n# representing an infinite number of entries and will result in a full expanded\n# tree by default.\n# Minimum value: 0, maximum value: 9999, default value: 100.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_INDEX_NUM_ENTRIES = 100\n\n# If the GENERATE_DOCSET tag is set to YES, additional index files will be\n# generated that can be used as input for Apple's Xcode 3 integrated development\n# environment (see: https://developer.apple.com/xcode/), introduced with OSX\n# 10.5 (Leopard). To create a documentation set, doxygen will generate a\n# Makefile in the HTML output directory. Running make will produce the docset in\n# that directory and running make install will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find it at\n# startup. See https://developer.apple.com/library/archive/featuredarticles/Doxy\n# genXcode/_index.html for more information.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_DOCSET        = NO\n\n# This tag determines the name of the docset feed. A documentation feed provides\n# an umbrella under which multiple documentation sets from a single provider\n# (such as a company or product suite) can be grouped.\n# The default value is: Doxygen generated docs.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_FEEDNAME        = \"Doxygen generated docs\"\n\n# This tag specifies a string that should uniquely identify the documentation\n# set bundle. This should be a reverse domain-name style string, e.g.\n# com.mycompany.MyDocSet. Doxygen will append .docset to the name.\n# The default value is: org.doxygen.Project.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_BUNDLE_ID       = org.doxygen.Project\n\n# The DOCSET_PUBLISHER_ID tag specifies a string that should uniquely identify\n# the documentation publisher. This should be a reverse domain-name style\n# string, e.g. com.mycompany.MyDocSet.documentation.\n# The default value is: org.doxygen.Publisher.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_PUBLISHER_ID    = org.doxygen.Publisher\n\n# The DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.\n# The default value is: Publisher.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_PUBLISHER_NAME  = Publisher\n\n# If the GENERATE_HTMLHELP tag is set to YES then doxygen generates three\n# additional HTML index files: index.hhp, index.hhc, and index.hhk. The\n# index.hhp is a project file that can be read by Microsoft's HTML Help Workshop\n# (see: https://www.microsoft.com/en-us/download/details.aspx?id=21138) on\n# Windows.\n#\n# The HTML Help Workshop contains a compiler that can convert all HTML output\n# generated by doxygen into a single compiled HTML file (.chm). Compiled HTML\n# files are now used as the Windows 98 help format, and will replace the old\n# Windows help format (.hlp) on all Windows platforms in the future. Compressed\n# HTML files also contain an index, a table of contents, and you can search for\n# words in the documentation. The HTML workshop also contains a viewer for\n# compressed HTML files.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_HTMLHELP      = NO\n\n# The CHM_FILE tag can be used to specify the file name of the resulting .chm\n# file. You can add a path in front of the file if the result should not be\n# written to the html output directory.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nCHM_FILE               =\n\n# The HHC_LOCATION tag can be used to specify the location (absolute path\n# including file name) of the HTML help compiler (hhc.exe). If non-empty,\n# doxygen will try to run the HTML help compiler on the generated index.hhp.\n# The file has to be specified with full path.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nHHC_LOCATION           =\n\n# The GENERATE_CHI flag controls if a separate .chi index file is generated\n# (YES) or that it should be included in the master .chm file (NO).\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nGENERATE_CHI           = NO\n\n# The CHM_INDEX_ENCODING is used to encode HtmlHelp index (hhk), content (hhc)\n# and project file content.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nCHM_INDEX_ENCODING     =\n\n# The BINARY_TOC flag controls whether a binary table of contents is generated\n# (YES) or a normal table of contents (NO) in the .chm file. Furthermore it\n# enables the Previous and Next buttons.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nBINARY_TOC             = NO\n\n# The TOC_EXPAND flag can be set to YES to add extra items for group members to\n# the table of contents of the HTML help documentation and to the tree view.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nTOC_EXPAND             = NO\n\n# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and\n# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated that\n# can be used as input for Qt's qhelpgenerator to generate a Qt Compressed Help\n# (.qch) of the generated HTML documentation.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_QHP           = NO\n\n# If the QHG_LOCATION tag is specified, the QCH_FILE tag can be used to specify\n# the file name of the resulting .qch file. The path specified is relative to\n# the HTML output folder.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQCH_FILE               =\n\n# The QHP_NAMESPACE tag specifies the namespace to use when generating Qt Help\n# Project output. For more information please see Qt Help Project / Namespace\n# (see: https://doc.qt.io/archives/qt-4.8/qthelpproject.html#namespace).\n# The default value is: org.doxygen.Project.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_NAMESPACE          = org.doxygen.Project\n\n# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating Qt\n# Help Project output. For more information please see Qt Help Project / Virtual\n# Folders (see: https://doc.qt.io/archives/qt-4.8/qthelpproject.html#virtual-\n# folders).\n# The default value is: doc.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_VIRTUAL_FOLDER     = doc\n\n# If the QHP_CUST_FILTER_NAME tag is set, it specifies the name of a custom\n# filter to add. For more information please see Qt Help Project / Custom\n# Filters (see: https://doc.qt.io/archives/qt-4.8/qthelpproject.html#custom-\n# filters).\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_CUST_FILTER_NAME   =\n\n# The QHP_CUST_FILTER_ATTRS tag specifies the list of the attributes of the\n# custom filter to add. For more information please see Qt Help Project / Custom\n# Filters (see: https://doc.qt.io/archives/qt-4.8/qthelpproject.html#custom-\n# filters).\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_CUST_FILTER_ATTRS  =\n\n# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this\n# project's filter section matches. Qt Help Project / Filter Attributes (see:\n# https://doc.qt.io/archives/qt-4.8/qthelpproject.html#filter-attributes).\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_SECT_FILTER_ATTRS  =\n\n# The QHG_LOCATION tag can be used to specify the location of Qt's\n# qhelpgenerator. If non-empty doxygen will try to run qhelpgenerator on the\n# generated .qhp file.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHG_LOCATION           =\n\n# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files will be\n# generated, together with the HTML files, they form an Eclipse help plugin. To\n# install this plugin and make it available under the help contents menu in\n# Eclipse, the contents of the directory containing the HTML and XML files needs\n# to be copied into the plugins directory of eclipse. The name of the directory\n# within the plugins directory should be the same as the ECLIPSE_DOC_ID value.\n# After copying Eclipse needs to be restarted before the help appears.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_ECLIPSEHELP   = NO\n\n# A unique identifier for the Eclipse help plugin. When installing the plugin\n# the directory name containing the HTML and XML files should also have this\n# name. Each documentation set should have its own identifier.\n# The default value is: org.doxygen.Project.\n# This tag requires that the tag GENERATE_ECLIPSEHELP is set to YES.\n\nECLIPSE_DOC_ID         = org.doxygen.Project\n\n# If you want full control over the layout of the generated HTML pages it might\n# be necessary to disable the index and replace it with your own. The\n# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top\n# of each HTML page. A value of NO enables the index and the value YES disables\n# it. Since the tabs in the index contain the same information as the navigation\n# tree, you can set this option to YES if you also set GENERATE_TREEVIEW to YES.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nDISABLE_INDEX          = NO\n\n# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index\n# structure should be generated to display hierarchical information. If the tag\n# value is set to YES, a side panel will be generated containing a tree-like\n# index structure (just like the one that is generated for HTML Help). For this\n# to work a browser that supports JavaScript, DHTML, CSS and frames is required\n# (i.e. any modern browser). Windows users are probably better off using the\n# HTML help feature. Via custom style sheets (see HTML_EXTRA_STYLESHEET) one can\n# further fine-tune the look of the index. As an example, the default style\n# sheet generated by doxygen has an example that shows how to put an image at\n# the root of the tree instead of the PROJECT_NAME. Since the tree basically has\n# the same information as the tab index, you could consider setting\n# DISABLE_INDEX to YES when enabling this option.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_TREEVIEW      = YES\n\n# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values that\n# doxygen will group on one line in the generated HTML documentation.\n#\n# Note that a value of 0 will completely suppress the enum values from appearing\n# in the overview section.\n# Minimum value: 0, maximum value: 20, default value: 4.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nENUM_VALUES_PER_LINE   = 4\n\n# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be used\n# to set the initial width (in pixels) of the frame in which the tree is shown.\n# Minimum value: 0, maximum value: 1500, default value: 250.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nTREEVIEW_WIDTH         = 250\n\n# If the EXT_LINKS_IN_WINDOW option is set to YES, doxygen will open links to\n# external symbols imported via tag files in a separate window.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nEXT_LINKS_IN_WINDOW    = NO\n\n# Use this tag to change the font size of LaTeX formulas included as images in\n# the HTML documentation. When you change the font size after a successful\n# doxygen run you need to manually remove any form_*.png images from the HTML\n# output directory to force them to be regenerated.\n# Minimum value: 8, maximum value: 50, default value: 10.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nFORMULA_FONTSIZE       = 10\n\n# Use the FORMULA_TRANSPARENT tag to determine whether or not the images\n# generated for formulas are transparent PNGs. Transparent PNGs are not\n# supported properly for IE 6.0, but are supported on all modern browsers.\n#\n# Note that when changing this option you need to delete any form_*.png files in\n# the HTML output directory before the changes have effect.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nFORMULA_TRANSPARENT    = YES\n\n# The FORMULA_MACROFILE can contain LaTeX \\newcommand and \\renewcommand commands\n# to create new LaTeX commands to be used in formulas as building blocks. See\n# the section \"Including formulas\" for details.\n\nFORMULA_MACROFILE      =\n\n# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax (see\n# https://www.mathjax.org) which uses client side JavaScript for the rendering\n# instead of using pre-rendered bitmaps. Use this if you do not have LaTeX\n# installed or if you want to formulas look prettier in the HTML output. When\n# enabled you may also need to install MathJax separately and configure the path\n# to it using the MATHJAX_RELPATH option.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nUSE_MATHJAX            = NO\n\n# When MathJax is enabled you can set the default output format to be used for\n# the MathJax output. See the MathJax site (see:\n# http://docs.mathjax.org/en/latest/output.html) for more details.\n# Possible values are: HTML-CSS (which is slower, but has the best\n# compatibility), NativeMML (i.e. MathML) and SVG.\n# The default value is: HTML-CSS.\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_FORMAT         = HTML-CSS\n\n# When MathJax is enabled you need to specify the location relative to the HTML\n# output directory using the MATHJAX_RELPATH option. The destination directory\n# should contain the MathJax.js script. For instance, if the mathjax directory\n# is located at the same level as the HTML output directory, then\n# MATHJAX_RELPATH should be ../mathjax. The default value points to the MathJax\n# Content Delivery Network so you can quickly see the result without installing\n# MathJax. However, it is strongly recommended to install a local copy of\n# MathJax from https://www.mathjax.org before deployment.\n# The default value is: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/.\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_RELPATH        = https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/\n\n# The MATHJAX_EXTENSIONS tag can be used to specify one or more MathJax\n# extension names that should be enabled during MathJax rendering. For example\n# MATHJAX_EXTENSIONS = TeX/AMSmath TeX/AMSsymbols\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_EXTENSIONS     =\n\n# The MATHJAX_CODEFILE tag can be used to specify a file with javascript pieces\n# of code that will be used on startup of the MathJax code. See the MathJax site\n# (see: http://docs.mathjax.org/en/latest/output.html) for more details. For an\n# example see the documentation.\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_CODEFILE       =\n\n# When the SEARCHENGINE tag is enabled doxygen will generate a search box for\n# the HTML output. The underlying search engine uses javascript and DHTML and\n# should work on any modern browser. Note that when using HTML help\n# (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets (GENERATE_DOCSET)\n# there is already a search function so this one should typically be disabled.\n# For large projects the javascript based search engine can be slow, then\n# enabling SERVER_BASED_SEARCH may provide a better solution. It is possible to\n# search using the keyboard; to jump to the search box use <access key> + S\n# (what the <access key> is depends on the OS and browser, but it is typically\n# <CTRL>, <ALT>/<option>, or both). Inside the search box use the <cursor down\n# key> to jump into the search results window, the results can be navigated\n# using the <cursor keys>. Press <Enter> to select an item or <escape> to cancel\n# the search. The filter options can be selected when the cursor is inside the\n# search box by pressing <Shift>+<cursor down>. Also here use the <cursor keys>\n# to select a filter and <Enter> or <escape> to activate or cancel the filter\n# option.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nSEARCHENGINE           = YES\n\n# When the SERVER_BASED_SEARCH tag is enabled the search engine will be\n# implemented using a web server instead of a web client using JavaScript. There\n# are two flavors of web server based searching depending on the EXTERNAL_SEARCH\n# setting. When disabled, doxygen will generate a PHP script for searching and\n# an index file used by the script. When EXTERNAL_SEARCH is enabled the indexing\n# and searching needs to be provided by external tools. See the section\n# \"External Indexing and Searching\" for details.\n# The default value is: NO.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nSERVER_BASED_SEARCH    = NO\n\n# When EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP\n# script for searching. Instead the search results are written to an XML file\n# which needs to be processed by an external indexer. Doxygen will invoke an\n# external search engine pointed to by the SEARCHENGINE_URL option to obtain the\n# search results.\n#\n# Doxygen ships with an example indexer (doxyindexer) and search engine\n# (doxysearch.cgi) which are based on the open source search engine library\n# Xapian (see: https://xapian.org/).\n#\n# See the section \"External Indexing and Searching\" for details.\n# The default value is: NO.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nEXTERNAL_SEARCH        = NO\n\n# The SEARCHENGINE_URL should point to a search engine hosted by a web server\n# which will return the search results when EXTERNAL_SEARCH is enabled.\n#\n# Doxygen ships with an example indexer (doxyindexer) and search engine\n# (doxysearch.cgi) which are based on the open source search engine library\n# Xapian (see: https://xapian.org/). See the section \"External Indexing and\n# Searching\" for details.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nSEARCHENGINE_URL       =\n\n# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the unindexed\n# search data is written to a file for indexing by an external tool. With the\n# SEARCHDATA_FILE tag the name of this file can be specified.\n# The default file is: searchdata.xml.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nSEARCHDATA_FILE        = searchdata.xml\n\n# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the\n# EXTERNAL_SEARCH_ID tag can be used as an identifier for the project. This is\n# useful in combination with EXTRA_SEARCH_MAPPINGS to search through multiple\n# projects and redirect the results back to the right project.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nEXTERNAL_SEARCH_ID     =\n\n# The EXTRA_SEARCH_MAPPINGS tag can be used to enable searching through doxygen\n# projects other than the one defined by this configuration file, but that are\n# all added to the same external search index. Each project needs to have a\n# unique id set via EXTERNAL_SEARCH_ID. The search mapping then maps the id of\n# to a relative location where the documentation can be found. The format is:\n# EXTRA_SEARCH_MAPPINGS = tagname1=loc1 tagname2=loc2 ...\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nEXTRA_SEARCH_MAPPINGS  =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the LaTeX output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_LATEX tag is set to YES, doxygen will generate LaTeX output.\n# The default value is: YES.\n\nGENERATE_LATEX         = YES\n\n# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: latex.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_OUTPUT           = latex\n\n# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be\n# invoked.\n#\n# Note that when not enabling USE_PDFLATEX the default is latex when enabling\n# USE_PDFLATEX the default is pdflatex and when in the later case latex is\n# chosen this is overwritten by pdflatex. For specific output languages the\n# default can have been set differently, this depends on the implementation of\n# the output language.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_CMD_NAME         =\n\n# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to generate\n# index for LaTeX.\n# Note: This tag is used in the Makefile / make.bat.\n# See also: LATEX_MAKEINDEX_CMD for the part in the generated output file\n# (.tex).\n# The default file is: makeindex.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nMAKEINDEX_CMD_NAME     = makeindex\n\n# The LATEX_MAKEINDEX_CMD tag can be used to specify the command name to\n# generate index for LaTeX. In case there is no backslash (\\) as first character\n# it will be automatically added in the LaTeX code.\n# Note: This tag is used in the generated output file (.tex).\n# See also: MAKEINDEX_CMD_NAME for the part in the Makefile / make.bat.\n# The default value is: makeindex.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_MAKEINDEX_CMD    = makeindex\n\n# If the COMPACT_LATEX tag is set to YES, doxygen generates more compact LaTeX\n# documents. This may be useful for small projects and may help to save some\n# trees in general.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nCOMPACT_LATEX          = NO\n\n# The PAPER_TYPE tag can be used to set the paper type that is used by the\n# printer.\n# Possible values are: a4 (210 x 297 mm), letter (8.5 x 11 inches), legal (8.5 x\n# 14 inches) and executive (7.25 x 10.5 inches).\n# The default value is: a4.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nPAPER_TYPE             = a4\n\n# The EXTRA_PACKAGES tag can be used to specify one or more LaTeX package names\n# that should be included in the LaTeX output. The package can be specified just\n# by its name or with the correct syntax as to be used with the LaTeX\n# \\usepackage command. To get the times font for instance you can specify :\n# EXTRA_PACKAGES=times or EXTRA_PACKAGES={times}\n# To use the option intlimits with the amsmath package you can specify:\n# EXTRA_PACKAGES=[intlimits]{amsmath}\n# If left blank no extra packages will be included.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nEXTRA_PACKAGES         =\n\n# The LATEX_HEADER tag can be used to specify a personal LaTeX header for the\n# generated LaTeX document. The header should contain everything until the first\n# chapter. If it is left blank doxygen will generate a standard header. See\n# section \"Doxygen usage\" for information on how to let doxygen write the\n# default header to a separate file.\n#\n# Note: Only use a user-defined header if you know what you are doing! The\n# following commands have a special meaning inside the header: $title,\n# $datetime, $date, $doxygenversion, $projectname, $projectnumber,\n# $projectbrief, $projectlogo. Doxygen will replace $title with the empty\n# string, for the replacement values of the other commands the user is referred\n# to HTML_HEADER.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_HEADER           =\n\n# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for the\n# generated LaTeX document. The footer should contain everything after the last\n# chapter. If it is left blank doxygen will generate a standard footer. See\n# LATEX_HEADER for more information on how to generate a default footer and what\n# special commands can be used inside the footer.\n#\n# Note: Only use a user-defined footer if you know what you are doing!\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_FOOTER           =\n\n# The LATEX_EXTRA_STYLESHEET tag can be used to specify additional user-defined\n# LaTeX style sheets that are included after the standard style sheets created\n# by doxygen. Using this option one can overrule certain style aspects. Doxygen\n# will copy the style sheet files to the output directory.\n# Note: The order of the extra style sheet files is of importance (e.g. the last\n# style sheet in the list overrules the setting of the previous ones in the\n# list).\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_EXTRA_STYLESHEET =\n\n# The LATEX_EXTRA_FILES tag can be used to specify one or more extra images or\n# other source files which should be copied to the LATEX_OUTPUT output\n# directory. Note that the files will be copied as-is; there are no commands or\n# markers available.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_EXTRA_FILES      =\n\n# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated is\n# prepared for conversion to PDF (using ps2pdf or pdflatex). The PDF file will\n# contain links (just like the HTML output) instead of page references. This\n# makes the output suitable for online browsing using a PDF viewer.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nPDF_HYPERLINKS         = YES\n\n# If the USE_PDFLATEX tag is set to YES, doxygen will use pdflatex to generate\n# the PDF file directly from the LaTeX files. Set this option to YES, to get a\n# higher quality PDF documentation.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nUSE_PDFLATEX           = YES\n\n# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode\n# command to the generated LaTeX files. This will instruct LaTeX to keep running\n# if errors occur, instead of asking the user for help. This option is also used\n# when generating formulas in HTML.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_BATCHMODE        = NO\n\n# If the LATEX_HIDE_INDICES tag is set to YES then doxygen will not include the\n# index chapters (such as File Index, Compound Index, etc.) in the output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_HIDE_INDICES     = NO\n\n# If the LATEX_SOURCE_CODE tag is set to YES then doxygen will include source\n# code with syntax highlighting in the LaTeX output.\n#\n# Note that which sources are shown also depends on other settings such as\n# SOURCE_BROWSER.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_SOURCE_CODE      = NO\n\n# The LATEX_BIB_STYLE tag can be used to specify the style to use for the\n# bibliography, e.g. plainnat, or ieeetr. See\n# https://en.wikipedia.org/wiki/BibTeX and \\cite for more info.\n# The default value is: plain.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_BIB_STYLE        = plain\n\n# If the LATEX_TIMESTAMP tag is set to YES then the footer of each generated\n# page will contain the date and time when the page was generated. Setting this\n# to NO can help when comparing the output of multiple runs.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_TIMESTAMP        = NO\n\n# The LATEX_EMOJI_DIRECTORY tag is used to specify the (relative or absolute)\n# path from which the emoji images will be read. If a relative path is entered,\n# it will be relative to the LATEX_OUTPUT directory. If left blank the\n# LATEX_OUTPUT directory will be used.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_EMOJI_DIRECTORY  =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the RTF output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_RTF tag is set to YES, doxygen will generate RTF output. The\n# RTF output is optimized for Word 97 and may not look too pretty with other RTF\n# readers/editors.\n# The default value is: NO.\n\nGENERATE_RTF           = NO\n\n# The RTF_OUTPUT tag is used to specify where the RTF docs will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: rtf.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_OUTPUT             = rtf\n\n# If the COMPACT_RTF tag is set to YES, doxygen generates more compact RTF\n# documents. This may be useful for small projects and may help to save some\n# trees in general.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nCOMPACT_RTF            = NO\n\n# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated will\n# contain hyperlink fields. The RTF file will contain links (just like the HTML\n# output) instead of page references. This makes the output suitable for online\n# browsing using Word or some other Word compatible readers that support those\n# fields.\n#\n# Note: WordPad (write) and others do not support links.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_HYPERLINKS         = NO\n\n# Load stylesheet definitions from file. Syntax is similar to doxygen's\n# configuration file, i.e. a series of assignments. You only have to provide\n# replacements, missing definitions are set to their default value.\n#\n# See also section \"Doxygen usage\" for information on how to generate the\n# default style sheet that doxygen normally uses.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_STYLESHEET_FILE    =\n\n# Set optional variables used in the generation of an RTF document. Syntax is\n# similar to doxygen's configuration file. A template extensions file can be\n# generated using doxygen -e rtf extensionFile.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_EXTENSIONS_FILE    =\n\n# If the RTF_SOURCE_CODE tag is set to YES then doxygen will include source code\n# with syntax highlighting in the RTF output.\n#\n# Note that which sources are shown also depends on other settings such as\n# SOURCE_BROWSER.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_SOURCE_CODE        = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the man page output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_MAN tag is set to YES, doxygen will generate man pages for\n# classes and files.\n# The default value is: NO.\n\nGENERATE_MAN           = NO\n\n# The MAN_OUTPUT tag is used to specify where the man pages will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it. A directory man3 will be created inside the directory specified by\n# MAN_OUTPUT.\n# The default directory is: man.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_OUTPUT             = man\n\n# The MAN_EXTENSION tag determines the extension that is added to the generated\n# man pages. In case the manual section does not start with a number, the number\n# 3 is prepended. The dot (.) at the beginning of the MAN_EXTENSION tag is\n# optional.\n# The default value is: .3.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_EXTENSION          = .3\n\n# The MAN_SUBDIR tag determines the name of the directory created within\n# MAN_OUTPUT in which the man pages are placed. If defaults to man followed by\n# MAN_EXTENSION with the initial . removed.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_SUBDIR             =\n\n# If the MAN_LINKS tag is set to YES and doxygen generates man output, then it\n# will generate one additional man file for each entity documented in the real\n# man page(s). These additional files only source the real man page, but without\n# them the man command would be unable to find the correct page.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_LINKS              = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the XML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_XML tag is set to YES, doxygen will generate an XML file that\n# captures the structure of the code including all documentation.\n# The default value is: NO.\n\nGENERATE_XML           = NO\n\n# The XML_OUTPUT tag is used to specify where the XML pages will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: xml.\n# This tag requires that the tag GENERATE_XML is set to YES.\n\nXML_OUTPUT             = xml\n\n# If the XML_PROGRAMLISTING tag is set to YES, doxygen will dump the program\n# listings (including syntax highlighting and cross-referencing information) to\n# the XML output. Note that enabling this will significantly increase the size\n# of the XML output.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_XML is set to YES.\n\nXML_PROGRAMLISTING     = YES\n\n# If the XML_NS_MEMB_FILE_SCOPE tag is set to YES, doxygen will include\n# namespace members in file scope as well, matching the HTML output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_XML is set to YES.\n\nXML_NS_MEMB_FILE_SCOPE = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the DOCBOOK output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_DOCBOOK tag is set to YES, doxygen will generate Docbook files\n# that can be used to generate PDF.\n# The default value is: NO.\n\nGENERATE_DOCBOOK       = NO\n\n# The DOCBOOK_OUTPUT tag is used to specify where the Docbook pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be put in\n# front of it.\n# The default directory is: docbook.\n# This tag requires that the tag GENERATE_DOCBOOK is set to YES.\n\nDOCBOOK_OUTPUT         = docbook\n\n# If the DOCBOOK_PROGRAMLISTING tag is set to YES, doxygen will include the\n# program listings (including syntax highlighting and cross-referencing\n# information) to the DOCBOOK output. Note that enabling this will significantly\n# increase the size of the DOCBOOK output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_DOCBOOK is set to YES.\n\nDOCBOOK_PROGRAMLISTING = NO\n\n#---------------------------------------------------------------------------\n# Configuration options for the AutoGen Definitions output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_AUTOGEN_DEF tag is set to YES, doxygen will generate an\n# AutoGen Definitions (see http://autogen.sourceforge.net/) file that captures\n# the structure of the code including all documentation. Note that this feature\n# is still experimental and incomplete at the moment.\n# The default value is: NO.\n\nGENERATE_AUTOGEN_DEF   = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module\n# file that captures the structure of the code including all documentation.\n#\n# Note that this feature is still experimental and incomplete at the moment.\n# The default value is: NO.\n\nGENERATE_PERLMOD       = NO\n\n# If the PERLMOD_LATEX tag is set to YES, doxygen will generate the necessary\n# Makefile rules, Perl scripts and LaTeX code to be able to generate PDF and DVI\n# output from the Perl module output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\nPERLMOD_LATEX          = NO\n\n# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely\n# formatted so it can be parsed by a human reader. This is useful if you want to\n# understand what is going on. On the other hand, if this tag is set to NO, the\n# size of the Perl module output will be much smaller and Perl will parse it\n# just the same.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\nPERLMOD_PRETTY         = YES\n\n# The names of the make variables in the generated doxyrules.make file are\n# prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. This is useful\n# so different doxyrules.make files included by the same Makefile don't\n# overwrite each other's variables.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\nPERLMOD_MAKEVAR_PREFIX =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the preprocessor\n#---------------------------------------------------------------------------\n\n# If the ENABLE_PREPROCESSING tag is set to YES, doxygen will evaluate all\n# C-preprocessor directives found in the sources and include files.\n# The default value is: YES.\n\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES, doxygen will expand all macro names\n# in the source code. If set to NO, only conditional compilation will be\n# performed. Macro expansion can be done in a controlled way by setting\n# EXPAND_ONLY_PREDEF to YES.\n# The default value is: NO.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nMACRO_EXPANSION        = NO\n\n# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES then\n# the macro expansion is limited to the macros specified with the PREDEFINED and\n# EXPAND_AS_DEFINED tags.\n# The default value is: NO.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nEXPAND_ONLY_PREDEF     = NO\n\n# If the SEARCH_INCLUDES tag is set to YES, the include files in the\n# INCLUDE_PATH will be searched if a #include is found.\n# The default value is: YES.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nSEARCH_INCLUDES        = YES\n\n# The INCLUDE_PATH tag can be used to specify one or more directories that\n# contain include files that are not input files but should be processed by the\n# preprocessor.\n# This tag requires that the tag SEARCH_INCLUDES is set to YES.\n\nINCLUDE_PATH           =\n\n# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard\n# patterns (like *.h and *.hpp) to filter out the header-files in the\n# directories. If left blank, the patterns specified with FILE_PATTERNS will be\n# used.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nINCLUDE_FILE_PATTERNS  =\n\n# The PREDEFINED tag can be used to specify one or more macro names that are\n# defined before the preprocessor is started (similar to the -D option of e.g.\n# gcc). The argument of the tag is a list of macros of the form: name or\n# name=definition (no spaces). If the definition and the \"=\" are omitted, \"=1\"\n# is assumed. To prevent a macro definition from being undefined via #undef or\n# recursively expanded use the := operator instead of the = operator.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nPREDEFINED             = SIMDJSON_EXCEPTIONS=1\n\n# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n# tag can be used to specify a list of macro names that should be expanded. The\n# macro definition that is found in the sources will be used. Use the PREDEFINED\n# tag if you want to use a different macro definition that overrules the\n# definition found in the source code.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nEXPAND_AS_DEFINED      =\n\n# If the SKIP_FUNCTION_MACROS tag is set to YES then doxygen's preprocessor will\n# remove all references to function-like macros that are alone on a line, have\n# an all uppercase name, and do not end with a semicolon. Such function macros\n# are typically used for boiler-plate code, and will confuse the parser if not\n# removed.\n# The default value is: YES.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nSKIP_FUNCTION_MACROS   = YES\n\n#---------------------------------------------------------------------------\n# Configuration options related to external references\n#---------------------------------------------------------------------------\n\n# The TAGFILES tag can be used to specify one or more tag files. For each tag\n# file the location of the external documentation should be added. The format of\n# a tag file without this location is as follows:\n# TAGFILES = file1 file2 ...\n# Adding location for the tag files is done as follows:\n# TAGFILES = file1=loc1 \"file2 = loc2\" ...\n# where loc1 and loc2 can be relative or absolute paths or URLs. See the\n# section \"Linking to external documentation\" for more information about the use\n# of tag files.\n# Note: Each tag file must have a unique name (where the name does NOT include\n# the path). If a tag file is not located in the directory in which doxygen is\n# run, you must also specify the path to the tagfile here.\n\nTAGFILES               =\n\n# When a file name is specified after GENERATE_TAGFILE, doxygen will create a\n# tag file that is based on the input files it reads. See section \"Linking to\n# external documentation\" for more information about the usage of tag files.\n\nGENERATE_TAGFILE       =\n\n# If the ALLEXTERNALS tag is set to YES, all external class will be listed in\n# the class index. If set to NO, only the inherited external classes will be\n# listed.\n# The default value is: NO.\n\nALLEXTERNALS           = NO\n\n# If the EXTERNAL_GROUPS tag is set to YES, all external groups will be listed\n# in the modules index. If set to NO, only the current project's groups will be\n# listed.\n# The default value is: YES.\n\nEXTERNAL_GROUPS        = YES\n\n# If the EXTERNAL_PAGES tag is set to YES, all external pages will be listed in\n# the related pages index. If set to NO, only the current project's pages will\n# be listed.\n# The default value is: YES.\n\nEXTERNAL_PAGES         = YES\n\n#---------------------------------------------------------------------------\n# Configuration options related to the dot tool\n#---------------------------------------------------------------------------\n\n# If the CLASS_DIAGRAMS tag is set to YES, doxygen will generate a class diagram\n# (in HTML and LaTeX) for classes with base or super classes. Setting the tag to\n# NO turns the diagrams off. Note that this option also works with HAVE_DOT\n# disabled, but it is recommended to install and use dot, since it yields more\n# powerful graphs.\n# The default value is: YES.\n\nCLASS_DIAGRAMS         = YES\n\n# You can include diagrams made with dia in doxygen documentation. Doxygen will\n# then run dia to produce the diagram and insert it in the documentation. The\n# DIA_PATH tag allows you to specify the directory where the dia binary resides.\n# If left empty dia is assumed to be found in the default search path.\n\nDIA_PATH               =\n\n# If set to YES the inheritance and collaboration graphs will hide inheritance\n# and usage relations if the target is undocumented or is not a class.\n# The default value is: YES.\n\nHIDE_UNDOC_RELATIONS   = YES\n\n# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is\n# available from the path. This tool is part of Graphviz (see:\n# http://www.graphviz.org/), a graph visualization toolkit from AT&T and Lucent\n# Bell Labs. The other options in this section have no effect if this option is\n# set to NO\n# The default value is: NO.\n\nHAVE_DOT               = NO\n\n# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is allowed\n# to run in parallel. When set to 0 doxygen will base this on the number of\n# processors available in the system. You can set it explicitly to a value\n# larger than 0 to get control over the balance between CPU load and processing\n# speed.\n# Minimum value: 0, maximum value: 32, default value: 0.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_NUM_THREADS        = 0\n\n# When you want a differently looking font in the dot files that doxygen\n# generates you can specify the font name using DOT_FONTNAME. You need to make\n# sure dot is able to find the font, which can be done by putting it in a\n# standard location or by setting the DOTFONTPATH environment variable or by\n# setting DOT_FONTPATH to the directory containing the font.\n# The default value is: Helvetica.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_FONTNAME           = Helvetica\n\n# The DOT_FONTSIZE tag can be used to set the size (in points) of the font of\n# dot graphs.\n# Minimum value: 4, maximum value: 24, default value: 10.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_FONTSIZE           = 10\n\n# By default doxygen will tell dot to use the default font as specified with\n# DOT_FONTNAME. If you specify a different font using DOT_FONTNAME you can set\n# the path where dot can find it using this tag.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_FONTPATH           =\n\n# If the CLASS_GRAPH tag is set to YES then doxygen will generate a graph for\n# each documented class showing the direct and indirect inheritance relations.\n# Setting this tag to YES will force the CLASS_DIAGRAMS tag to NO.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCLASS_GRAPH            = YES\n\n# If the COLLABORATION_GRAPH tag is set to YES then doxygen will generate a\n# graph for each documented class showing the direct and indirect implementation\n# dependencies (inheritance, containment, and class references variables) of the\n# class with other documented classes.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCOLLABORATION_GRAPH    = YES\n\n# If the GROUP_GRAPHS tag is set to YES then doxygen will generate a graph for\n# groups, showing the direct groups dependencies.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nGROUP_GRAPHS           = YES\n\n# If the UML_LOOK tag is set to YES, doxygen will generate inheritance and\n# collaboration diagrams in a style similar to the OMG's Unified Modeling\n# Language.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nUML_LOOK               = NO\n\n# If the UML_LOOK tag is enabled, the fields and methods are shown inside the\n# class node. If there are many fields or methods and many nodes the graph may\n# become too big to be useful. The UML_LIMIT_NUM_FIELDS threshold limits the\n# number of items for each type to make the size more manageable. Set this to 0\n# for no limit. Note that the threshold may be exceeded by 50% before the limit\n# is enforced. So when you set the threshold to 10, up to 15 fields may appear,\n# but if the number exceeds 15, the total amount of fields shown is limited to\n# 10.\n# Minimum value: 0, maximum value: 100, default value: 10.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nUML_LIMIT_NUM_FIELDS   = 10\n\n# If the TEMPLATE_RELATIONS tag is set to YES then the inheritance and\n# collaboration graphs will show the relations between templates and their\n# instances.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nTEMPLATE_RELATIONS     = NO\n\n# If the INCLUDE_GRAPH, ENABLE_PREPROCESSING and SEARCH_INCLUDES tags are set to\n# YES then doxygen will generate a graph for each documented file showing the\n# direct and indirect include dependencies of the file with other documented\n# files.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nINCLUDE_GRAPH          = YES\n\n# If the INCLUDED_BY_GRAPH, ENABLE_PREPROCESSING and SEARCH_INCLUDES tags are\n# set to YES then doxygen will generate a graph for each documented file showing\n# the direct and indirect include dependencies of the file with other documented\n# files.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nINCLUDED_BY_GRAPH      = YES\n\n# If the CALL_GRAPH tag is set to YES then doxygen will generate a call\n# dependency graph for every global function or class method.\n#\n# Note that enabling this option will significantly increase the time of a run.\n# So in most cases it will be better to enable call graphs for selected\n# functions only using the \\callgraph command. Disabling a call graph can be\n# accomplished by means of the command \\hidecallgraph.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCALL_GRAPH             = NO\n\n# If the CALLER_GRAPH tag is set to YES then doxygen will generate a caller\n# dependency graph for every global function or class method.\n#\n# Note that enabling this option will significantly increase the time of a run.\n# So in most cases it will be better to enable caller graphs for selected\n# functions only using the \\callergraph command. Disabling a caller graph can be\n# accomplished by means of the command \\hidecallergraph.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCALLER_GRAPH           = NO\n\n# If the GRAPHICAL_HIERARCHY tag is set to YES then doxygen will graphical\n# hierarchy of all classes instead of a textual one.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nGRAPHICAL_HIERARCHY    = YES\n\n# If the DIRECTORY_GRAPH tag is set to YES then doxygen will show the\n# dependencies a directory has on other directories in a graphical way. The\n# dependency relations are determined by the #include relations between the\n# files in the directories.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDIRECTORY_GRAPH        = YES\n\n# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images\n# generated by dot. For an explanation of the image formats see the section\n# output formats in the documentation of the dot tool (Graphviz (see:\n# http://www.graphviz.org/)).\n# Note: If you choose svg you need to set HTML_FILE_EXTENSION to xhtml in order\n# to make the SVG files visible in IE 9+ (other browsers do not have this\n# requirement).\n# Possible values are: png, jpg, gif, svg, png:gd, png:gd:gd, png:cairo,\n# png:cairo:gd, png:cairo:cairo, png:cairo:gdiplus, png:gdiplus and\n# png:gdiplus:gdiplus.\n# The default value is: png.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_IMAGE_FORMAT       = png\n\n# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to\n# enable generation of interactive SVG images that allow zooming and panning.\n#\n# Note that this requires a modern browser other than Internet Explorer. Tested\n# and working are Firefox, Chrome, Safari, and Opera.\n# Note: For IE 9+ you need to set HTML_FILE_EXTENSION to xhtml in order to make\n# the SVG files visible. Older versions of IE do not have SVG support.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nINTERACTIVE_SVG        = NO\n\n# The DOT_PATH tag can be used to specify the path where the dot tool can be\n# found. If left blank, it is assumed the dot tool can be found in the path.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_PATH               =\n\n# The DOTFILE_DIRS tag can be used to specify one or more directories that\n# contain dot files that are included in the documentation (see the \\dotfile\n# command).\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOTFILE_DIRS           =\n\n# The MSCFILE_DIRS tag can be used to specify one or more directories that\n# contain msc files that are included in the documentation (see the \\mscfile\n# command).\n\nMSCFILE_DIRS           =\n\n# The DIAFILE_DIRS tag can be used to specify one or more directories that\n# contain dia files that are included in the documentation (see the \\diafile\n# command).\n\nDIAFILE_DIRS           =\n\n# When using plantuml, the PLANTUML_JAR_PATH tag should be used to specify the\n# path where java can find the plantuml.jar file. If left blank, it is assumed\n# PlantUML is not used or called during a preprocessing step. Doxygen will\n# generate a warning when it encounters a \\startuml command in this case and\n# will not generate output for the diagram.\n\nPLANTUML_JAR_PATH      =\n\n# When using plantuml, the PLANTUML_CFG_FILE tag can be used to specify a\n# configuration file for plantuml.\n\nPLANTUML_CFG_FILE      =\n\n# When using plantuml, the specified paths are searched for files specified by\n# the !include statement in a plantuml block.\n\nPLANTUML_INCLUDE_PATH  =\n\n# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of nodes\n# that will be shown in the graph. If the number of nodes in a graph becomes\n# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n# Minimum value: 0, maximum value: 10000, default value: 50.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_GRAPH_MAX_NODES    = 50\n\n# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the graphs\n# generated by dot. A depth value of 3 means that only nodes reachable from the\n# root by following a path via at most 3 edges will be shown. Nodes that lay\n# further from the root node will be omitted. Note that setting this option to 1\n# or 2 may greatly reduce the computation time needed for large code bases. Also\n# note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n# Minimum value: 0, maximum value: 1000, default value: 0.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nMAX_DOT_GRAPH_DEPTH    = 0\n\n# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent\n# background. This is disabled by default, because dot on Windows does not seem\n# to support this out of the box.\n#\n# Warning: Depending on the platform used, enabling this option may lead to\n# badly anti-aliased labels on the edges of a graph (i.e. they become hard to\n# read).\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_TRANSPARENT        = NO\n\n# Set the DOT_MULTI_TARGETS tag to YES to allow dot to generate multiple output\n# files in one run (i.e. multiple -o and -T options on the command line). This\n# makes dot run faster, but since only newer versions of dot (>1.8.10) support\n# this, this feature is disabled by default.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_MULTI_TARGETS      = NO\n\n# If the GENERATE_LEGEND tag is set to YES doxygen will generate a legend page\n# explaining the meaning of the various boxes and arrows in the dot generated\n# graphs.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nGENERATE_LEGEND        = YES\n\n# If the DOT_CLEANUP tag is set to YES, doxygen will remove the intermediate dot\n# files that are used to generate the various graphs.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_CLEANUP            = YES\n\n"
        },
        {
          "name": "HACKING.md",
          "type": "blob",
          "size": 19.9580078125,
          "content": "\nHacking simdjson\n================\n\nHere is wisdom about how to build, test and run simdjson from within the repository. This is mostly useful for people who plan to contribute simdjson, or maybe study the design.\n\nIf you plan to contribute to simdjson, please read our [CONTRIBUTING](https://github.com/simdjson/simdjson/blob/master/CONTRIBUTING.md) guide.\n\n- [Hacking simdjson](#hacking-simdjson)\n  - [Build Quickstart](#build-quickstart)\n  - [Design notes](#design-notes)\n  - [Developer mode](#developer-mode)\n  - [Directory Structure and Source](#directory-structure-and-source)\n  - [Runtime Dispatching](#runtime-dispatching)\n  - [Regenerating Single-Header Files](#regenerating-single-header-files)\n  - [Usage (CMake on 64-bit platforms like Linux, FreeBSD or macOS)](#usage-cmake-on-64-bit-platforms-like-linux-freebsd-or-macos)\n  - [Usage (CMake on 64-bit Windows using Visual Studio 2019 or better)](#usage-cmake-on-64-bit-windows-using-visual-studio-2019-or-better)\n  - [Various References](#various-references)\n\nBuild Quickstart\n------------------------------\n\n```bash\nmkdir build\ncd build\ncmake -D SIMDJSON_DEVELOPER_MODE=ON ..\ncmake --build .\n```\n\nDesign notes\n------------------------------\n\nThe parser works in two stages:\n\n- Stage 1. (Find marks) Identifies quickly structure elements, strings, and so forth. We validate UTF-8 encoding at that stage.\n- Stage 2. (Structure building) Involves constructing a \"tree\" of sort (materialized as a tape) to navigate through the data. Strings and numbers are parsed at this stage.\n\n\nThe role of stage 1 is to identify pseudo-structural characters as quickly as possible. A character is pseudo-structural if and only if:\n\n1. Not enclosed in quotes, AND\n2. Is a non-whitespace character, AND\n3. Its preceding character is either:\n   (a) a structural character, OR\n   (b) whitespace OR\n   (c) the final quote in a string.\n\nThis helps as we redefine some new characters as pseudo-structural such as the characters 1, G, n in the following:\n\n> { \"foo\" : 1.5, \"bar\" : 1.5 GEOFF_IS_A_DUMMY bla bla , \"baz\", null }\n\nStage 1 also does unicode validation.\n\nStage 2 handles all of the rest: number parsings, recognizing atoms like true, false, null, and so forth.\n\nDeveloper mode\n--------------\n\nBuild system targets that are only useful for developers of the simdjson\nlibrary are behind the `SIMDJSON_DEVELOPER_MODE` option. Enabling this option\nmakes tests, examples, benchmarks and other developer targets available. Not\nenabling this option means that you are a consumer of simdjson and thus you\nonly get the library targets and options.\n\nDeveloper mode is forced to be on when the `CI` environment variable is set to\na value that CMake recognizes as \"on\", which is set to `true` in all of the CI\nworkflows used by simdjson.\n\nDirectory Structure and Source\n------------------------------\n\nsimdjson's source structure, from the top level, looks like this:\n\n* **CMakeLists.txt:** The main build system.\n* **include:** User-facing declarations and inline definitions (most user-facing functions are inlined).\n  * simdjson.h: the `simdjson` namespace. A \"main include\" that includes files from include/simdjson/. This is equivalent to\n    the distributed simdjson.h.\n    * simdjson/*.h: Declarations for public simdjson classes and functions.\n    * simdjson/*-inl.h: Definitions for public simdjson classes and functions.\n    * simdjson/internal/*.h: the `simdjson::internal` namespace. Private classes and functions used by the rest of simdjson.\n  * simdjson/dom.h: the `simdjson::dom` namespace. Includes all public DOM classes.\n    * simdjson/dom/*.h: Declarations/definitions for individual DOM classes.\n  * simdjson/arm64|fallback|haswell|icelake|ppc64|westmere.h: `simdjson::<implementation>` namespace. Common implementation-specific tools like number and string parsing, as well as minification.\n    * simdjson/arm64|fallback|haswell|icelake|ppc64|westmere/*.h: implementation-specific functions such as , etc.\n    * simdjson/generic/*.h: the bulk of the actual code, written generically and compiled for each implementation, using functions defined in the implementation's .h files.\n      * simdjson/generic/dependencies.h: dependencies on common, non-implementation-specific simdjson classes. This will be included before including amalgamated.h.\n      * simdjson/generic/amalgamated.h: all generic ondemand classes for an implementation.\n  * simdjson/ondemand.h: the `simdjson::ondemand` namespace. Includes all public ondemand classes.\n    * simdjson/builtin.h: the `simdjson::builtin` namespace. Aliased to the most universal implementation available.\n    * simdjson/builtin/ondemand.h: the `simdjson::builtin::ondemand` namespace.\n    * simdjson/arm64|fallback|haswell|icelake|ppc64|westmere/ondemand.h: the `simdjson::<implementation>::ondemand` namespace. On-Demand compiled for the specific implementation.\n    * simdjson/generic/ondemand/*.h: individual On-Demand classes, generically written.\n      * simdjson/generic/ondemand/dependencies.h: dependencies on common, non-implementation-specific simdjson classes. This will be included before including amalgamated.h.\n      * simdjson/generic/ondemand/amalgamated.h: all generic ondemand classes for an implementation.\n* **src:** The source files for non-inlined functionality (e.g. the architecture-specific parser\n  implementations).\n  * simdjson.cpp: A \"main source\" that includes all implementation files from src/. This is\n    equivalent to the distributed simdjson.cpp.\n  * *.cpp: other misc. implementations, such as `simdjson::implementation` and the minifier.\n  * arm64|fallback|haswell|icelake|ppc64|westmere.cpp: Architecture-specific parser implementations.\n    * generic/*.h: `simdjson::<implementation>` namespace. Generic implementation of the parser, particularly the `dom_parser_implementation`.\n    * generic/stage1/*.h: `simdjson::<implementation>::stage1` namespace. Generic implementation of the simd-heavy tokenizer/indexer pass of the simdjson parser. Used for the On-Demand interface\n    * generic/stage2/*.h: `simdjson::<implementation>::stage2` namespace. Generic implementation of the tape creator, which consumes the index from stage 1 and actually parses numbers and string and such. Used for the DOM interface.\n\nOther important files and directories:\n* **.drone.yml:** Definitions for Drone CI.\n* **.appveyor.yml:** Definitions for Appveyor CI (Windows).\n* **.circleci:** Definitions for Circle CI.\n* **.github/workflows:** Definitions for GitHub Actions (CI).\n* **singleheader:** Contains generated `simdjson.h` and `simdjson.cpp` that we release. The files `singleheader/simdjson.h` and `singleheader/simdjson.cpp` should never be edited by hand.\n* **singleheader/amalgamate.py:** Generates `singleheader/simdjson.h` and `singleheader/simdjson.cpp` for release (python script).\n* **benchmark:** This is where we do benchmarking. Benchmarking is core to every change we make; the\n  cardinal rule is don't regress performance without knowing exactly why, and what you're trading\n  for it. Many of our benchmarks are microbenchmarks. We are effectively doing controlled scientific experiments for the purpose of understanding what affects our performance. So we simplify as much as possible. We try to avoid irrelevant factors such as page faults, interrupts, unnecessary system calls. We recommend checking the performance as follows:\n  ```bash\n  mkdir build\n  cd build\n  cmake -D SIMDJSON_DEVELOPER_MODE=ON ..\n  cmake --build . --config Release\n  benchmark/dom/parse ../jsonexamples/twitter.json\n  ```\n  The last line becomes `./benchmark/Release/parse.exe ../jsonexample/twitter.json` under Windows. You may also use Google Benchmark:\n  ```bash\n  mkdir build\n  cd build\n  cmake -D SIMDJSON_DEVELOPER_MODE=ON ..\n  cmake --build . --target bench_parse_call --config Release\n  ./benchmark/bench_parse_call\n  ```\n  The last line becomes `./benchmark/Release/bench_parse_call.exe` under Windows. Under Windows, you can also build with the clang compiler by adding `-T ClangCL` to the call to `cmake ..`: `cmake -T ClangCL ..`.\n* **fuzz:** The source for fuzz testing. This lets us explore important edge and middle cases\n* **fuzz:** The source for fuzz testing. This lets us explore important edge and middle cases\n  automatically, and is run in CI.\n* **jsonchecker:** A set of JSON files used to check different functionality of the parser.\n  * **pass*.json:** Files that should pass validation.\n  * **fail*.json:** Files that should fail validation.\n  * **jsonchecker/minefield/y_*.json:** Files that should pass validation.\n  * **jsonchecker/minefield/n_*.json:** Files that should fail validation.\n* **jsonexamples:** A wide spread of useful, real-world JSON files with different characteristics\n  and sizes.\n* **test:** The tests are here. basictests.cpp and errortests.cpp are the primary ones.\n* **tools:** Source for executables that can be distributed with simdjson. Some examples:\n  * `json2json mydoc.json` parses the document, constructs a model and then dumps back the result to standard output.\n  * `json2json -d mydoc.json` parses the document, constructs a model and then dumps model (as a tape) to standard output. The tape format is described in the accompanying file `tape.md`.\n  * `minify mydoc.json` minifies the JSON document, outputting the result to standard output. Minifying means to remove the unneeded white space characters.\n  * `jsonpointer mydoc.json <jsonpath> <jsonpath> ... <jsonpath>` parses the document, constructs a model and then processes a series of [JSON Pointer paths](https://tools.ietf.org/html/rfc6901). The result is itself a JSON document.\n\n\n> **Don't modify the files in singleheader/ directly; these are automatically generated.**\n\n\nWhile simdjson distributes just two files from the singleheader/ directory, we *maintain* the code in\nmultiple files under include/ and src/. The files include/simdjson.h and src/simdjson.cpp are the \"spine\" for\nthese, and you can include them as if they were the corresponding singleheader/ files.\n\n\n\nRuntime Dispatching\n--------------------\n\nA key feature of simdjson is the ability to compile different processing kernels, optimized for specific instruction sets, and to select\nthe most appropriate kernel at runtime. This ensures that users get the very best performance while still enabling simdjson to run everywhere.\nThis technique is frequently called runtime dispatching. The simdjson achieves runtime dispatching entirely in C++: we do not assume\nthat the user is building the code using CMake, for example.\n\nTo make runtime dispatching work, it is critical that the code be compiled for the lowest supported processor. In particular, you should\nnot use flags such as -mavx2, /arch:AVX2 and so forth while compiling simdjson. When you do so, you allow the compiler to use advanced\ninstructions. In turn, these advanced instructions present in the code may cause a runtime failure if the runtime processor does not\nsupport them. Even a simple loop, compiled with these flags, might generate binary code that only run on advanced processors.\n\nSo we compile simdjson for a generic processor. Our users should do the same if they want simdjson's runtime dispatch to work. It is important\nto understand that if runtime dispatching does not work, then simdjson will cause crashes on older processors. Of course, if a user chooses\nto compile their code for a specific instruction set (e.g., AVX2), they are responsible for the failures if they later run their code\non a processor that does not support AVX2. Yet, if we were to entice these users to do so, we would share the blame: thus we carefully instruct\nusers to compile their code in a generic way without doing anything to enable advanced instructions.\n\n\nWe only use runtime dispatching on x64 (AMD/Intel) platforms, at the moment. On ARM processors, we would need a standard way to query, at runtime,\nthe processor for its supported features. We do not know how to do so on ARM systems in general. Thankfully it is not yet a concern: 64-bit ARM\nprocessors are fairly uniform as far as the instruction sets they support.\n\n\nIn all cases, simdjson uses advanced instructions by relying on  \"intrinsic functions\": we do not write assembly code. The intrinsic functions\nare special functions that the compiler might recognize and translate into fast code. To make runtime dispatching work, we rely on the fact that\nthe header providing these instructions\n(intrin.h under Visual Studio, x86intrin.h elsewhere) defines all of the intrinsic functions, including those that are not supported\nprocessor.\n\nAt this point, we are require to use one of two main strategies.\n\n1. On POSIX systems, the main compilers (LLVM clang, GNU gcc) allow us to use any intrinsic function after including the header, but they fail to inline the resulting instruction if the target processor does not support them. Because we compile for a generic processor, we would not be able to use most intrinsic functions. Thankfully, more recent versions of these compilers allow us to flag a region of code with a specific target, so that we can compile only some of the code with support for advanced instructions. Thus in our C++, one might notice macros like `TARGET_HASWELL`. It is then our responsibility, at runtime, to only run the regions of code (that we call kernels) matching the properties of the runtime processor. The benefit of this approach is that the compiler not only let us use intrinsic functions, but it can also optimize the rest of the code in the kernel with advanced instructions we enabled.\n\n2. Under Visual Studio, the problem is somewhat simpler. Visual Studio will not only provide the intrinsic functions, but it will also allow us to use them. They will compile just fine. It is at runtime that they may cause a crash. So we do not need to mark regions of code for compilation toward advanced processors (e.g., with  `TARGET_HASWELL` macros). The downside of the Visual Studio approach is that the compiler is not allowed to use advanced instructions others than those we specify. In principle, this means that Visual Studio has weaker optimization opportunities.\n\n\n\nWe also handle the special case where a user is compiling using LLVM clang under Windows, [using the Visual Studio toolchain](https://devblogs.microsoft.com/cppblog/clang-llvm-support-in-visual-studio/). If you compile with LLVM clang under Visual Studio, then the header files (intrin.h or x86intrin.h) no longer provides the intrinsic functions that are unsupported by the processor. This appears to be deliberate on the part of the LLVM engineers. With a few lines of code, we handle this scenario just like LLVM clang under a POSIX system, but forcing the inclusion of the specific headers, and rolling our own intrinsic function as needed.\n\n\n\n\n\nRegenerating Single-Header Files\n---------------------------------------\n\nThe simdjson.h and simdjson.cpp files in the singleheader directory are not always up-to-date with the rest of the code; they are only ever\nsystematically regenerated on releases. To ensure you have the latest code, you can regenerate them by running this at the top level:\n\n```bash\nmkdir build\ncd build\ncmake -D SIMDJSON_DEVELOPER_MODE=ON ..\ncmake --build . # needed, because currently dependencies do not work fully for the amalgamate target\ncmake --build . --target amalgamate\n```\n\nYou need to have python3 installed on your system.\n\nThe amalgamator script `amalgamate.py` generates singleheader/simdjson.h by\nreading through include/simdjson.h, copy/pasting each header file into the amalgamated file at the\npoint it gets included (but only once per header). singleheader/simdjson.cpp is generated from\nsrc/simdjson.cpp the same way, except files under generic/ may be included and copy/pasted multiple\ntimes.\n\n## Usage (CMake on 64-bit platforms like Linux, FreeBSD or macOS)\n\nRequirements: In addition to git, we require a recent version of CMake as well as bash.\n\n1. On macOS, the easiest way to install cmake might be to use [brew](https://brew.sh) and then type\n```\nbrew install cmake\n```\n2. Under Linux, you might be able to install CMake as follows:\n```\napt-get update -qq\napt-get install -y cmake\n```\n3. On FreeBSD, you might be able to install bash and CMake as follows:\n```\npkg update -f\npkg install bash\npkg install cmake\n```\n\nYou need a recent compiler like clang or gcc. We recommend at least GNU GCC/G++ 7 or LLVM clang 6.\n\n\nBuilding: While in the project repository, do the following:\n\n```\nmkdir build\ncd build\ncmake -D SIMDJSON_DEVELOPER_MODE=ON ..\ncmake --build .\nctest\n```\n\nCMake will build a library. By default, it builds a static library (e.g., libsimdjson.a on Linux).\n\nYou can build a shared library:\n\n```\nmkdir buildshared\ncd buildshared\ncmake -D BUILD_SHARED_LIBS=ON -D SIMDJSON_DEVELOPER_MODE=ON ..\ncmake --build .\nctest\n```\n\nIn some cases, you may want to specify your compiler, especially if the default compiler on your system is too old.  You need to tell cmake which compiler you wish to use by setting the CC and CXX variables. Under bash, you can do so with commands such as `export CC=gcc-7` and `export CXX=g++-7`. You can also do it as part of the `cmake` command: `cmake -DCMAKE_CXX_COMPILER=g++ ..`.  You may proceed as follows:\n\n```\nbrew install gcc@8\nmkdir build\ncd build\nexport CXX=g++-8 CC=gcc-8\ncmake -D SIMDJSON_DEVELOPER_MODE=ON ..\ncmake --build .\nctest\n```\n\nIf your compiler does not default on C++11 support or better you may get failing tests. If so, you may be able to exclude the failing  tests by replacing `ctest` with `ctest  -E \"^quickstart$\"`.\n\nNote that the name of directory (`build`) is arbitrary, you can name it as you want (e.g., `buildgcc`) and you can have as many different such directories as you would like (one per configuration).\n\n## Usage (CMake on 64-bit Windows using Visual Studio 2019 or better)\n\nRecent versions of Visual Studio support CMake natively, [please refer to the Visual Studio documentation](https://learn.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio?view=msvc-170).\n\nWe assume you have a common 64-bit Windows PC with at least Visual Studio 2019.\n\n- Grab the simdjson code from GitHub, e.g., by cloning it using [GitHub Desktop](https://desktop.github.com/).\n- Install [CMake](https://cmake.org/download/). When you install it, make sure to ask that `cmake` be made available from the command line. Please choose a recent version of cmake.\n- Create a subdirectory within simdjson, such as `build`.\n- Using a shell, go to this newly created directory. You can start a shell directly from GitHub Desktop (Repository > Open in Command Prompt).\n- Type `cmake  ..` in the shell while in the `build` repository.\n- This last command (`cmake ...`) created a Visual Studio solution file in the newly created directory (e.g., `simdjson.sln`). Open this file in Visual Studio. You should now be able to build the project and run the tests. For example, in the `Solution Explorer` window (available from the `View` menu), right-click `ALL_BUILD` and select `Build`. To test the code, still in the `Solution Explorer` window, select `RUN_TESTS` and select `Build`.\n\n\nThough having Visual Studio installed is necessary, one can build simdjson using only cmake commands:\n\n- `mkdir build`\n- `cd build`\n- `cmake ..`\n- `cmake --build . --config Release`\n\n\nFurthermore, if you have installed LLVM clang on Windows, for example as a component of Visual Studio 2019, you can configure and build simdjson using LLVM clang on Windows using cmake:\n\n- `mkdir build`\n- `cd build`\n- `cmake -T ClangCL ..`\n- `cmake --build . --config Release`\n\n## Various References\n\n- [How to implement atoi using SIMD?](https://stackoverflow.com/questions/35127060/how-to-implement-atoi-using-simd)\n- [Parsing JSON is a Minefield 💣](http://seriot.ch/parsing_json.php)\n- https://tools.ietf.org/html/rfc7159\n- http://rapidjson.org/md_doc_sax.html\n- https://github.com/Geal/parser_benchmarks/tree/master/json\n- Gron: A command line tool that makes JSON greppable https://news.ycombinator.com/item?id=16727665\n- GoogleGson https://github.com/google/gson\n- Jackson https://github.com/FasterXML/jackson\n- https://www.yelp.com/dataset_challenge\n- RapidJSON. http://rapidjson.org/\n\nInspiring links:\n\n- https://auth0.com/blog/beating-json-performance-with-protobuf/\n- https://gist.github.com/shijuvar/25ad7de9505232c87034b8359543404a\n- https://github.com/frankmcsherry/blog/blob/master/posts/2018-02-11.md\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0888671875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2018-2023 The simdjson authors\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.0341796875,
          "content": "\n[![Ubuntu 20.04 CI](https://github.com/simdjson/simdjson/workflows/Ubuntu%2020.04%20CI%20(GCC%209)/badge.svg)](https://simdjson.org/plots.html)\n[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/simdjson.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:simdjson)\n[![][license img]][license]\n\n[![Doxygen Documentation](https://img.shields.io/badge/docs-doxygen-green.svg)](https://simdjson.github.io/simdjson/)\n\nsimdjson : Parsing gigabytes of JSON per second\n===============================================\n\n<img src=\"images/logo.png\" width=\"10%\" style=\"float: right\">\nJSON is everywhere on the Internet. Servers spend a *lot* of time parsing it. We need a fresh\napproach. The simdjson library uses commonly available SIMD instructions and microparallel algorithms\nto parse JSON 4x  faster than RapidJSON and 25x faster than JSON for Modern C++.\n\n* **Fast:** Over 4x faster than commonly used production-grade JSON parsers.\n* **Record Breaking Features:** Minify JSON  at 6 GB/s, validate UTF-8  at 13 GB/s,  NDJSON at 3.5 GB/s.\n* **Easy:** First-class, easy to use and carefully documented APIs.\n* **Strict:** Full JSON and UTF-8 validation, lossless parsing. Performance with no compromises.\n* **Automatic:** Selects a CPU-tailored parser at runtime. No configuration needed.\n* **Reliable:** From memory allocation to error handling, simdjson's design avoids surprises.\n* **Peer Reviewed:** Our research appears in venues like VLDB Journal, Software: Practice and Experience.\n\nThis library is part of the [Awesome Modern C++](https://awesomecpp.com) list.\n\nTable of Contents\n-----------------\n\n* [Real-world usage](#real-world-usage)\n* [Quick Start](#quick-start)\n* [Documentation](#documentation)\n* [Godbolt](#godbolt)\n* [Performance results](#performance-results)\n* [Packages](#packages)\n* [Bindings and Ports of simdjson](#bindings-and-ports-of-simdjson)\n* [About simdjson](#about-simdjson)\n* [Funding](#funding)\n* [Contributing to simdjson](#contributing-to-simdjson)\n* [License](#license)\n\n\nReal-world usage\n----------------\n\n- [Node.js](https://nodejs.org/)\n- [ClickHouse](https://github.com/ClickHouse/ClickHouse)\n- [Meta Velox](https://velox-lib.io)\n- [Google Pax](https://github.com/google/paxml)\n- [milvus](https://github.com/milvus-io/milvus)\n- [QuestDB](https://questdb.io/blog/questdb-release-8-0-3/)\n- [Clang Build Analyzer](https://github.com/aras-p/ClangBuildAnalyzer)\n- [Shopify HeapProfiler](https://github.com/Shopify/heap-profiler)\n- [StarRocks](https://github.com/StarRocks/starrocks)\n- [Microsoft FishStore](https://github.com/microsoft/FishStore)\n- [Intel PCM](https://github.com/intel/pcm)\n- [WatermelonDB](https://github.com/Nozbe/WatermelonDB)\n- [Apache Doris](https://github.com/apache/doris)\n- [Dgraph](https://github.com/dgraph-io/dgraph)\n- [UJRPC](https://github.com/unum-cloud/ujrpc)\n- [fastgltf](https://github.com/spnda/fastgltf)\n- [vast](https://github.com/tenzir/vast)\n- [ada-url](https://github.com/ada-url/ada)\n- [fastgron](https://github.com/adamritter/fastgron)\n- [WasmEdge](https://wasmedge.org)\n\nIf you are planning to use simdjson in a product, please work from one of our releases.\n\nQuick Start\n-----------\n\nThe simdjson library is easily consumable with a single .h and .cpp file.\n\n0. Prerequisites: `g++` (version 7 or better) or `clang++` (version 6 or better), and a 64-bit\n   system with a command-line shell (e.g., Linux, macOS, freeBSD). We also support programming\n   environments like Visual Studio and Xcode, but different steps are needed. Users of clang++ may need to specify the C++ version (e.g., `c++ -std=c++17`) since clang++ tends to default on C++98.\n1. Pull [simdjson.h](singleheader/simdjson.h) and [simdjson.cpp](singleheader/simdjson.cpp) into a\n   directory, along with the sample file [twitter.json](jsonexamples/twitter.json). You can download them with the `wget` utility:\n\n   ```\n   wget https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.h https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.cpp https://raw.githubusercontent.com/simdjson/simdjson/master/jsonexamples/twitter.json\n   ```\n2. Create `quickstart.cpp`:\n\n```c++\n#include <iostream>\n#include \"simdjson.h\"\nusing namespace simdjson;\nint main(void) {\n    ondemand::parser parser;\n    padded_string json = padded_string::load(\"twitter.json\");\n    ondemand::document tweets = parser.iterate(json);\n    std::cout << uint64_t(tweets[\"search_metadata\"][\"count\"]) << \" results.\" << std::endl;\n}\n```\n3. `c++ -o quickstart quickstart.cpp simdjson.cpp`\n4. `./quickstart`\n\n  ```\n   100 results.\n  ```\n\n\nDocumentation\n-------------\n\nUsage documentation is available:\n\n* [Basics](doc/basics.md) is an overview of how to use simdjson and its APIs.\n* [Performance](doc/performance.md) shows some more advanced scenarios and how to tune for them.\n* [Implementation Selection](doc/implementation-selection.md) describes runtime CPU detection and\n  how you can work with it.\n* [API](https://simdjson.github.io/simdjson/) contains the automatically generated API documentation.\n\nGodbolt\n-------------\n\nSome users may want to browse code along with the compiled assembly. You want to check out the following lists of examples:\n* [simdjson examples with errors handled through exceptions](https://godbolt.org/z/7G5qE4sr9)\n* [simdjson examples with errors without exceptions](https://godbolt.org/z/e9dWb9E4v)\n\nPerformance results\n-------------------\n\nThe simdjson library uses three-quarters less instructions than state-of-the-art parser [RapidJSON](https://rapidjson.org). To our knowledge, simdjson is the first fully-validating JSON parser\nto run at [gigabytes per second](https://en.wikipedia.org/wiki/Gigabyte) (GB/s) on commodity processors. It can parse millions of JSON documents per second on a single core.\n\nThe following figure represents parsing speed in GB/s for parsing various files\non an Intel Skylake processor (3.4 GHz) using the GNU GCC 10 compiler (with the -O3 flag).\nWe compare against the best and fastest C++ libraries on benchmarks that load and process the data.\nThe simdjson library offers full unicode ([UTF-8](https://en.wikipedia.org/wiki/UTF-8)) validation and exact\nnumber parsing.\n\n<img src=\"doc/rome.png\" width=\"60%\">\n\nThe simdjson library offers high speed whether it processes tiny files (e.g., 300 bytes)\nor larger files (e.g., 3MB). The following plot presents parsing\nspeed for [synthetic files over various sizes generated with a script](https://github.com/simdjson/simdjson_experiments_vldb2019/blob/master/experiments/growing/gen.py) on a 3.4 GHz Skylake processor (GNU GCC 9, -O3).\n\n<img src=\"doc/growing.png\" width=\"60%\">\n\n[All our experiments are reproducible](https://github.com/simdjson/simdjson_experiments_vldb2019).\n\n\nFor NDJSON files, we can exceed 3 GB/s with [our  multithreaded parsing functions](https://github.com/simdjson/simdjson/blob/master/doc/parse_many.md).\n\n\nPackages\n------------------------------\n[![Packaging status](https://repology.org/badge/vertical-allrepos/simdjson.svg)](https://repology.org/project/simdjson/versions)\n\n\nBindings and Ports of simdjson\n------------------------------\n\nWe distinguish between \"bindings\" (which just wrap the C++ code) and a port to another programming language (which reimplements everything).\n\n- [ZippyJSON](https://github.com/michaeleisel/zippyjson): Swift bindings for the simdjson project.\n- [libpy_simdjson](https://github.com/gerrymanoim/libpy_simdjson/): high-speed Python bindings for simdjson using [libpy](https://github.com/quantopian/libpy).\n- [pysimdjson](https://github.com/TkTech/pysimdjson): Python bindings for the simdjson project.\n- [cysimdjson](https://github.com/TeskaLabs/cysimdjson): high-speed Python bindings for the simdjson project.\n- [simdjson-rs](https://github.com/simd-lite): Rust port.\n- [simdjson-rust](https://github.com/SunDoge/simdjson-rust): Rust wrapper (bindings).\n- [SimdJsonSharp](https://github.com/EgorBo/SimdJsonSharp): C# version for .NET Core (bindings and full port).\n- [simdjson_nodejs](https://github.com/luizperes/simdjson_nodejs): Node.js bindings for the simdjson project.\n- [simdjson_php](https://github.com/crazyxman/simdjson_php): PHP bindings for the simdjson project.\n- [simdjson_ruby](https://github.com/saka1/simdjson_ruby): Ruby bindings for the simdjson project.\n- [fast_jsonparser](https://github.com/anilmaurya/fast_jsonparser): Ruby bindings for the simdjson project.\n- [simdjson-go](https://github.com/minio/simdjson-go): Go port using Golang assembly.\n- [rcppsimdjson](https://github.com/eddelbuettel/rcppsimdjson): R bindings.\n- [simdjson_erlang](https://github.com/ChomperT/simdjson_erlang): erlang bindings.\n- [simdjsone](https://github.com/saleyn/simdjsone): erlang bindings.\n- [lua-simdjson](https://github.com/FourierTransformer/lua-simdjson): lua bindings.\n- [hermes-json](https://hackage.haskell.org/package/hermes-json): haskell bindings.\n- [simdjzon](https://github.com/travisstaloch/simdjzon): zig port.\n- [JSON-Simd](https://github.com/rawleyfowler/JSON-simd): Raku bindings.\n- [JSON::SIMD](https://metacpan.org/pod/JSON::SIMD): Perl bindings; fully-featured JSON module that uses simdjson for decoding.\n- [gemmaJSON](https://github.com/sainttttt/gemmaJSON): Nim JSON parser based on simdjson bindings.\n- [simdjson-java](https://github.com/simdjson/simdjson-java): Java port.\n\nAbout simdjson\n--------------\n\nThe simdjson library takes advantage of modern microarchitectures, parallelizing with SIMD vector\ninstructions, reducing branch misprediction, and reducing data dependency to take advantage of each\nCPU's multiple execution cores.\n\nOur default front-end is called On-Demand, and we wrote a paper about it:\n\n- John Keiser, Daniel Lemire, [On-Demand JSON: A Better Way to Parse Documents?](http://arxiv.org/abs/2312.17149), Software: Practice and Experience 54 (6), 2024.\n\nSome people [enjoy reading the first (2019) simdjson paper](https://arxiv.org/abs/1902.08318): A description of the design\nand implementation of simdjson is in our research article:\n- Geoff Langdale, Daniel Lemire, [Parsing Gigabytes of JSON per Second](https://arxiv.org/abs/1902.08318), VLDB Journal 28 (6), 2019.\n\nWe have an in-depth paper focused on the UTF-8 validation:\n\n- John Keiser, Daniel Lemire, [Validating UTF-8 In Less Than One Instruction Per Byte](https://arxiv.org/abs/2010.03090), Software: Practice & Experience 51 (5), 2021.\n\nWe also have an informal [blog post providing some background and context](https://branchfree.org/2019/02/25/paper-parsing-gigabytes-of-json-per-second/).\n\nFor the video inclined, <br />\n[![simdjson at QCon San Francisco 2019](http://img.youtube.com/vi/wlvKAT7SZIQ/0.jpg)](http://www.youtube.com/watch?v=wlvKAT7SZIQ)<br />\n(It was the best voted talk, we're kinda proud of it.)\n\nFunding\n-------\n\nThe work is supported by the Natural Sciences and Engineering Research Council of Canada under grants\nRGPIN-2017-03910 and RGPIN-2024-03787.\n\n[license]: LICENSE\n[license img]: https://img.shields.io/badge/License-Apache%202-blue.svg\n\nContributing to simdjson\n------------------------\n\nHead over to [CONTRIBUTING.md](CONTRIBUTING.md) for information on contributing to simdjson, and\n[HACKING.md](HACKING.md) for information on source, building, and architecture/design.\n\nLicense\n-------\n\nThis code is made available under the [Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0.html).\n\nUnder Windows, we build some tools using the windows/dirent_portable.h file (which is outside our library code): it is under the liberal (business-friendly) MIT license.\n\nFor compilers that do not support [C++17](https://en.wikipedia.org/wiki/C%2B%2B17), we bundle the string-view library which is published under the [Boost license](http://www.boost.org/LICENSE_1_0.txt). Like the Apache license, the Boost license is a permissive license allowing commercial redistribution.\n\nFor efficient number serialization, we bundle Florian Loitsch's implementation of the Grisu2 algorithm for binary to decimal floating-point numbers. The implementation was slightly modified by JSON for Modern C++ library. Both Florian Loitsch's implementation and JSON for Modern C++ are provided under the MIT license.\n\nFor runtime dispatching, we use some code from the PyTorch project licensed under 3-clause BSD.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.185546875,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nPlease use the following contact information for reporting a vulnerability:\n\n- [Daniel Lemire](https://github.com/lemire) - daniel@lemire.me\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "dependencies",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "jsonexamples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "simdjson.pc.in",
          "type": "blob",
          "size": 0.2978515625,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nincludedir=@PKGCONFIG_INCLUDEDIR@\nlibdir=@PKGCONFIG_LIBDIR@\n\nName: @PROJECT_NAME@\nDescription: @PROJECT_DESCRIPTION@\nURL: @PROJECT_HOMEPAGE_URL@\nVersion: @PROJECT_VERSION@\nCflags: -I${includedir} @PKGCONFIG_CFLAGS@\nLibs: -L${libdir} -l@PROJECT_NAME@\n@PKGCONFIG_LIBS_PRIVATE@\n"
        },
        {
          "name": "singleheader",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "style",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "windows",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}