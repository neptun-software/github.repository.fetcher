{
  "metadata": {
    "timestamp": 1736566359274,
    "page": 119,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "carla-simulator/carla",
      "stars": 11842,
      "defaultBranch": "ue5-dev",
      "files": [
        {
          "name": ".clangd.in",
          "type": "blob",
          "size": 0.064453125,
          "content": "CompileFlags:\n  CompilationDatabase: \"@CMAKE_CURRENT_BINARY_DIR@\"\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.107421875,
          "content": ".vs/\n.vscode/\n.cache/\n__pycache__/\n\nBuild/\nInstall/\nDoxygen/\nDist/\nout/\n\nCMakeSettings.json\n\n.clangd\n\nHelp.md\n"
        },
        {
          "name": ".pep8",
          "type": "blob",
          "size": 0.0283203125,
          "content": "[pep8]\nmax-line-length = 120\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.4287109375,
          "content": "# Read the Docs configuration file for MkDocs projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n# Required\n\nversion: 2\n\n# Set the version of Python and other tools you might need\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.7\"\n\nmkdocs:\n  configuration: mkdocs.yml\n\n# Optionally declare the Python requirements required to build your docs\n\npython:\n  install:\n  - requirements: Docs/requirements.txt\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.0048828125,
          "content": "language: cpp\ncompiler: clang\n\nos: linux\ndist: xenial\nsudo: false\n\nmatrix:\n  include:\n\n    - env: TEST=\"Unit Tests\"\n      addons:\n        apt:\n          sources:\n            - ubuntu-toolchain-r-test\n            - llvm-toolchain-xenial-8\n          packages:\n            - g++-7 # we need this one for the libstdc++.\n            - clang-8\n            - ninja-build\n            - python\n            - python-pip\n            - python3\n            - python3-pip\n            - libboost-python-dev\n            - libtiff5-dev\n            - libjpeg-dev\n      install:\n        - pip2 install -q --user setuptools\n        - pip2 install -q --user -r PythonAPI/test/requirements.txt\n        - pip2 install -q --user -r PythonAPI/carla/requirements.txt\n        - pip3 install -q --user setuptools\n        - pip3 install -q --user -r PythonAPI/test/requirements.txt\n        - pip3 install -q --user -r PythonAPI/carla/requirements.txt\n      script:\n        - while sleep 2m; do echo \"still building...\"; done &\n        - make setup >> build.log 2>&1\n        - make LibCarla >> build.log 2>&1\n        - make PythonAPI >> build.log 2>&1\n        - make examples >> build.log 2>&1\n        - kill %1\n        - make check ARGS=\"--all --gtest_args=--gtest_filter=-*_mt\"\n      after_failure:\n        - tail --lines=2000 build.log\n\n    - env: TEST=\"Pylint 2\"\n      addons:\n        apt:\n          packages:\n            - python\n            - python-pip\n      install:\n        - pip2 install -q --user pylint\n        - pip2 install -q --user -r PythonAPI/carla/requirements.txt\n        - pip2 install -q --user -r PythonAPI/examples/requirements.txt\n        - pip2 install -q --user -r PythonAPI/test/requirements.txt\n        - pip2 install -q --user -r PythonAPI/util/requirements.txt\n      script:\n        - shopt -s globstar\n        - pylint --disable=R,C --rcfile=PythonAPI/.pylintrc PythonAPI/**/*.py Util/BuildTools/*.py\n\n    - env: TEST=\"Pylint 3\"\n      addons:\n        apt:\n          packages:\n            - python3\n            - python3-pip\n      install:\n        - pip3 install -q --user setuptools\n        - pip3 install -q astroid==2.2.5 pylint==2.3.1\n        - pip3 install -q --user -r PythonAPI/carla/requirements.txt\n        - pip3 install -q --user -r PythonAPI/examples/requirements.txt\n        - pip3 install -q --user -r PythonAPI/test/requirements.txt\n        - pip3 install -q --user -r PythonAPI/util/requirements.txt\n        - pip3 install -q --user -r Util/Docker/requirements.txt\n      script:\n        - shopt -s globstar\n        - pylint --disable=R,C --rcfile=PythonAPI/.pylintrc PythonAPI/**/*.py Util/Docker/*.py Util/BuildTools/*.py\n\n    - env: TEST=\"MkDocs\"\n      install:\n        - pip install -q --user -r PythonAPI/docs/requirements.txt\n        - pip install -q --user mkdocs\n      script:\n        - make PythonAPI.docs\n        - git diff --quiet HEAD --; if [ ! $? -eq 0 ]; then echo \"Python API reference changed, forgot to run \\\"make PythonAPI.docs\\\"?\"; exit 1; fi\n        - mkdocs build --verbose --clean --strict --site-dir _site\n\nnotifications:\n  email: false\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.9970703125,
          "content": "## CARLA 0.10.0\n\n* Unreal Engine migration from version 4.26 to version 5.5\n    - Nanite enabled for entire Town 10\n    - Lumen powers new realistic illumination\n    - Improved lighting with new post-process configuration\n    - Physics migrated from PhysX to Chaos\n* Remodeled Town 10:\n    - New buildings\n    - Road topology includes uneven surface, potholes, speed bumps\n* Remodeled 13 vehicles with more detail:\n    - Nissan Patrol\n    - Dodge Charger\n    - Dodge Charger Police\n    - Ford Crown Taxi\n    - Lincoln MKZ\n    - Mini Cooper\n    - Firetruck\n    - CarlaCola\n    - Ambulance\n    - Mercedes Sprinter\n    - Mitsubishi Fusorosa bus\n    - Mining earth mover (provided by Synkrotron)\n* Rework of build system to use cmake\n* Native server support for ROS2 (without CARLA-ROS bridge)\n* Refactor of semantic segmentation and instance segmentation sensors\n    - Semantic segmentation can now be visualized in UE editor for debugging\n    - Only supports meshes with Nanite enabled\n* Included support to data-driven realistic traffic generation powered by InvertedAI\n* Updated Python API scripts with extra examples in the PythonAPI folder:\n    - examples/invertedai_traffic.py\n    - examples/interpolate_camera.py\n    - examples/vehicle_doors_demo.py\n    - examples/vehicle_lights_demo.py\n    - examples/visualize_radar.py\n    - examples/ros2_native.py\n    - util/tools/generate_video_from_frames.py\n    - util/apply_texture.py\n    - util/change_map_layer.py\n    - util/manage_environment_objects.py\n    - util/manage_traffic_light.py\n    - util/recorder_comparer.py\n    - util/show_crosswalks.py\n    - util/show_junctions.py\n    - util/show_topology.py\n    - util/spectator_transform.py\n* Motion blur disabled below 1080p resolution to avoid artefacts\n* Python API now supports Python 3.8, 3.9, 3.10, 3.11 and 3.12\n* Python API support dropped for Python versions 3.7 and lower\n* Added support for Scenic 3.0\n* RSS functionality removed from docs\n* Removed Light Manager from API and docs\n* Added Mine01 off-road mining map from Synkrotron\n\n"
        },
        {
          "name": "CHANGELOG_UE4.md",
          "type": "blob",
          "size": 67.7841796875,
          "content": "## Latest Changes\n  * Prevent from segfault on failing SignalReference identification when loading OpenDrive files\n  * Added vehicle doors to the recorder\n  * Creating SensorSpawnerActor to spawn custom sensors in the editor.\n\n## CARLA 0.9.15\n\n  * Added Digital Twins feature version 0.1. Now you can create your own map based on OpenStreetMaps\n  * Added compatibility with SymReady Assets, using NVIDIA Omniverse\n  * Added new maps: Town13 (is a large map) and Town15\n  * The spectator will be used to load tiles and actor in Large Maps when no other actors with the rolename 'ego_vehicle' or 'hero' are present. Added the `spectator_as_ego` to the `carla.WorldSettings()` to allow users to disable this behavior.\n  * Add keyword arguments for `carla.TrafficManager` Python API functions\n  * Added build support for VS2022 and Ninja for LibCarla and osm2odr on Windows\n  * Added empty actor\n  * Restored gamma value to 2.2 instead of 2.4\n  * CarlaExporter tool now exports the box collider and convex collider of the object if it has one, otherwise the mesh\n  * Pedestrians with AI or in replayer are now faster around 10x. They have collisions disabled until they hit a vehicle.\n  * Added API function to avoid replaying the spectator\n    * `Client.set_replayer_ignore_spectator(bool)`\n    * `start_replaying.py` using flag `--move-spectator`\n  * Surface non-unity build mode by passing ARGS=--no-unity to make; allows IWYU-type errors to be unmasked and fixed.\n  * Added maps, vehicles, pedestrians and props catalogues to the documentation\n  * Collisions detected by the CollisionSensor no longer generate more than one event per frame.\n  * Added API function to load a map only if it is different from the current one.\n  * Fixed a bug in the TrafficManager causing vehicles that reached an ending lane to have abnormal behavior while lane changing.\n  * Fixed bug causing the TM's unstuck logic to incorrectly remove the vehicles in some situations.\n  * Fixed the extra data in Directx textures, so we need to copy row by row on Windows to remove extra bytes on images\n  * Fixed vertices of big meshes (more than 65k vertices) in CarlaExporter\n  * Fixed sensors to check for the stream to be ready (race condition)\n  * Fixed bug causing the `FPixelReader::SavePixelsToDisk(PixelData, FilePath)` function to crash due to pixel array not set correctly.\n  * Fixed segfaults in Python API due to incorrect GIL locking under Python 3.10.\n  * Fixed the import script, where could use any other TilesInfo.txt if the destination folder has many\n\n## CARLA 0.9.14\n\n  * Fixed tutorial for adding a sensor to CARLA.\n  * Fixed bug in FrictionTrigger causing sometimes server segfault\n  * Added attachment type \"SpringArmGhost\" for cinematic cameras but without doing the collision test.\n  * Improved algorithm to move signals out of the road by computing the desired displacement direction.\n  * Added `TrafficManager.vehicle_lane_offset(actor, offset)` and `TrafficManager.global_lane_offset(offset)` methods.\n  * Some of the warnings shown when building a map will now only be showing when debugging.\n  * The ids for semantic segmentation has been modified to be the same as cityscapes (labels, ids and colors)\n  * Fixed bug causing traffic signals at the end points of a road to sometimes create malformed waypoints.\n  * Fixed pedestrian skeleton frame, where sometimes it was draw displaced from the body\n  * Fixed decals when importing maps. It was using other .json files found in other packages.\n  * In multi-GPU mode some sensors now are forced to be created on the primary server always (ex. collision sensor)\n  * Added the speed limits for 100, 110 and 120 Km/h.\n  * Fixing sensor destruction, now the stream and socket is succesfully destroyed.\n  * Fixed bug at `Vehicle.get_traffic_light_state()` and `Vehicle.is_at_traffic_light()` causing vehicles to temporarily not lose the information of a traffic light if they moved away from it before it turned green.\n  * Changed the height of the automatic spawn points, from 3m to only 0.5m\n  * Added pedestrian skeleton to the recorder, as additional data. They will replay with the exact pose.\n  * Added multi-GPU feature. Now several servers (with dedicated GPU) can render sensors for the same simulation.\n  * Fixed bug causing the `Vehicle.get_traffic_light_state()` function not notify about the green to yellow and yellow to red light state changes.\n  * Fixed bug causing the `Vehicle.is_at_traffic_light()` function to return *false* if the traffic light was green.\n  * Fixed bug causing the scene lights to return an incorrect location at large maps.\n  * Fixed bug causing the `world.ground_projection()` function to return an incorrect location at large maps.\n  * Added failure state to vehicles, which can be retrieved by using `Vehicle.get_failure_state()`. Only Rollover failure state is currently supported.\n  * Fixed bug causing the TM to block the simulation when a vehicle with no physics was teleported.\n  * Fixed bug causing the TM to block the simulation when travelling through a short roads that looped on themselves.\n  * Improved the TM's handling of non signalized junctions, resulting in a more fluid overall behavior.\n  * Added check to avoid adding procedural trigger boxes inside intersections.\n  * Python agents now accept a carla.Map and GlobalRoutePlanner instances as inputs, avoiding the need to recompute them.\n  * Python agents now have a function to lane change.\n  * Python agents now detect vehicle in adjacent lanes if invaded due to the offset.\n  * Python agents now have the offset exposed.\n  * Fixed bug causing the python agents to sometimes not detect a blocking actor if there were severral actors around it.\n  * Improved Python agents performance for large maps.\n  * Fix a bug at `Map.get_topology()`, causing lanes with no successors to not be part of it.\n  * Added new ConstantVelocityAgent\n  * Added new parameter to the TrafficManager, `set_desired_speed`, to set a vehicle's speed.\n  * Added 4 new attributes to all vehicles:\n    - `base_type` can be use as a vehicle classification. The possible values are  *car*, *truck*, *van*, *motorcycle* and *bycicle*.\n    - `special_type` provides more information about the vehicle. It is currently restricted to *electric*, *emergency* and *taxi*, and not all vehicles have this attribute filled.\n    - `has_dynamics_doors` can either be *true* or *false* depending on whether or not the vehicle has doors that can be opened using the API.\n    - `has_lights` works in the same way as *has_dynamic_doors*, but differentiates between vehicles with lights, and those that don't.\n  * Added native ackermann controller:\n    - `apply_ackermann_control`:  to apply an ackermann control command to a vehicle\n    - `get_ackermann_controller_settings`: to get the last ackermann controller settings applied\n    - `apply_ackermann_controller_settings`: to apply new ackermann controller settings\n  * Fixed bug causing the Traffic Manager to not be deterministic when using hybrid mode\n  * Added `NormalsSensor`, a new sensor with normals information\n  * Added support for N wheeled vehicles\n  * Added support for new batch commands ConsoleCommand, ApplyLocation (to actor), SetTrafficLightState\n  * Added new API function: `set_day_night_cycle` at the LightManager, to (de)activate the automatic switch of the lights when the simulation changes from day to night mode, and viceversa.\n  * Switch to boost::variant2 for rpc::Command as that allows more than 20 RPC commands\n  * Added post process effects for rainy and dusty weathers.\n  * Switched data type of the dust storm weather parameter from bool to float.\n  * Check for the version of the installed Clang compiler during build.\n  * Added API function to get direct access to the GBuffer textures of a sensor:\n    - `listen_to_gbuffer`: to set a callback for a specific GBuffer texture\n\n## CARLA 0.9.13\n\n  * Added new **instance aware semantic segmentation** sensor `sensor.camera.instance_segmentation`\n  * Added new API classes: `MaterialParameter`, `TextureColor` and  `TextureFloatColor` to encode texture data and field (normal map, diffuse, etc)\n  * Added new API functions: `apply_color_texture_to_object`, `apply_float_color_texture_to_object` and `apply_textures_to_object` to paint objects in **runtime**\n  * Added the option for users to set a **route** using RoadOption elements to a vehicle controlled by the Traffic Manager.\n  * **Cache** now has an extra folder with current version of CARLA (so different cache per version)\n  * Added **set_percentage_random_left_lanechange** and **set_percentage_random_right_lanechange**.\n  * Improved handling of **collisions** in Traffic Manager when driving at **very high speeds**.\n  * Added physical simulation to **vehicle doors**, capable of opening and closing\n  * Added **open/close doors** feature for vehicles.\n  * Added API functions to **3D vectors**: `squared_length`, `length`, `make_unit_vector`, `dot`, `dot_2d`, `distance`, `distance_2d`, `distance_squared`, `distance_squared_2d`, `get_vector_angle`\n  * Added API functions to **2D vectors**: `squared_length`, `length`, `make_unit_vector`\n  * Added a **seed** for better reproducibility of pedestrians\n    - New API function `set_pedestrians_seed`\n    - New parameter **--seedw** in generate_traffic.py script\n  * Added missing dependency `libomp5` to **Release.Dockerfile**\n  * Added API functions to interact with **pedestrian bones**:\n    - `get_bones / set_bones`:  to get/set the bones of a pedestrian\n    - `blend_pose`:  to blend a custom pose with current animation\n    - `show_pose / hide_pose`:  to show or hide the custom pose\n    - `get_pose_from_animation`:  to set the custom pose with the animation current frame\n  * Added a new script in **PythonAPI/examples/draw_skeleton.py** to draw the bones of a pedestrian from client side\n  * Improved **collision** detection of the Python agents\n  * Added the new **VehicleLightStage** to the Traffic Manager to dynamically update the vehicle lights.\n  * Added two new examples to **PythonAPI/util**: Conversion of OpenStreetMaps to OpenDRIVE maps `osm_to_xodr.py` and Extraction of map spawn points `extract_spawn_points.py`\n  * Fixed the **import of props** without any map\n  * Fixed **global route planner** crash when being used at maps without lane markings\n  * Fixed bug causing the server to **sigsegv** when a vehicle collides an environment object in recording mode.\n  * Fixed **RSSSensor**: made client side calculations threaded\n  * Fixed **keep_right_rule** parameter.\n\n## CARLA 0.9.12\n\n  * Changed the resolution of the cached map in Traffic Manager from 0.1 to 5 meters\n  * Fixed import sumo_integration module from other scripts\n  * CARLA now is built with Visual Studio 2019 in Windows\n  * Fixed bug causing the RoadOptions at the BehaviorAgent to not work as intended\n  * Upgrading to Unreal Engine 4.26\n  * Added generation attribute to vehicles and pedestrians\n  * Added Lincoln 2020 vehicle dimensions for CarSim integration\n  * Enabling the **no_delay** option to RPC and stream sockets\n  * The special nomenclature to define roads (ROAD_ROAD), sidewalks (ROAD_SIDEWALK)... can be at any position of the asset name\n  * Improved performance bencharmark script: sync, map and sensor selection, ...\n  * Improved performance, destroyed PhysX state for vehicles when physics are disable\n  * Improved parallelism of raycast sensors in system with large number of cores\n  * Added 'visualize_multiple_sensors' example\n  * Added 'check_lidar_bb' util script\n  * Added optional flag to `client.replay_file()` `replay_sensors` to enable or disable the replaying the sensors\n  * Improved manual_control: now cameras are set in relation with car size\n  * Client required files are sent from the server to a local cache (OpenDRIVE, Traffic Manager...)\n  * Added CHRONO library for vehicle dynamics simulation (https://projectchrono.org/)\n    - Supported JSON vehicle definition\n    - Unsupported collision dynamics\n  * Added performance benchmarking section to documentation\n  * Added API functions to traffic light actor `get_effect_waypoints()`, `get_light_boxes()` and `get_opendrive_id()`\n  * Added API functions to world `get_traffic_lights_from_waypoint()`, `get_traffic_lights_in_junction` and `get_traffic_light_from_opendrive_id`\n  * Added API parameters to `WorldSettings`: `tile_stream_distance` and `actor_active_distance`\n  * Added API parameters and functions to `Osm2OdrSettings`: `proj_string`, `center_map`, `generate_traffic_lights`, `all_junctions_with_traffic_lights`, `set_osm_way_types`, and `set_traffic_light_excluded_way_types`\n  * Added API function to enable car telemetry\n  * CARLA is compatible with the last RoadRunner nomenclature for road assets\n  * Fixed a bug when importing a FBX map with some **_** in the FBX name\n  * Extended make import process for applying road painter materials (carla art tool)\n  * Added Large Map feature to CARLA, alowing to import large maps divided in square tiles (at most 2kmx2km per tile). Only section of a Large Map can be loaded at a time which introduces a sleep state for actors that are far away from the hero vehicle\n  * Added creation of custom JSON file for applying decals to imported roads\n  * Added ApplyVehiclePhysicsControl to commands\n  * Added flush in the sublevel loading to increase carla's determinism in Opt maps\n  * Fix bug in carla.Transform.get_up_vector()\n  * Fix bug in lidar channel point count\n  * Fix imu: some weird cases were given nan values\n  * Fix bugs in apply_physics_control and friction trigger\n  * Exposed tire parameters for longitudinal and lateral stiffness in the PhysicsControl.\n  * When setting a global plan at the LocalPlanner, it is now optional to stop the automatic fill of the waypoint buffer\n  * Improved agent's vehicle detection to also take into account the actor bounding boxes\n  * Added Optical Flow camera\n  * API extensions:\n  - Added `set_wheel_steer_direction()` function to change the bone angle of each wheel of a vehicle\n  - Added `get_wheel_steer_angle()` function to get the steer angle of a vehicle wheel\n  - Added `scattering_intensity` , `mie_scattering_scale` , `rayleigh_scattering_scale` to PythonAPI for changing weather attributes\n  - Improved the python agents API. Old behaviors have been improved and new ones have also been added, improving the functionalities of the agents. Several bugs have also been fixed\n\n## CARLA 0.9.11\n\n  * Improved the documentation for use with pandoc tool by converting html tags to their markdown equivalent\n  * Refactored FAQ section of docs to use minimal html and fix broken layout\n  * Extended the local planner with a lateral `offset`\n  * Upgraded to DirectX 12 on Windows\n  * Added the new core pipeline for the simulator\n  * Added parameter to carla settings to control culling\n  * Added fully deterministic option for Traffic Manager, sorting vehicles by ID and avoiding race conditions\n  * Added the option to sweep the wheel shape for collision. This requires to patch the engine\n  * Added the possibility of changing physics substepping options from client\n  * Added 'noise_seed' to sensors to initialize the random generators\n  * API extensions:\n    - Added `actor.set_enable_gravity()` function to enable/disable the gravity affecting the actor\n    - Added `load_map_layer` and `unload_map_layer` to control map layers on new maps that support subleveling\n    - Added `get_environment_objects`call to get all the placed objects in the level\n    - Added `enable_environment_objects`call to enable/disable objects of the level\n    - Added `horizontal_fov` parameter to lidar sensor to allow for restriction of its field of view\n    - Added `WorldSettings.deterministic_ragdolls` to enable deterministic or physically based ragdolls\n  * Fixed RSSSensor python3 build and import of open drive maps by updating to ad-rss v4.2.0 and ad-map-access v2.3.0. Python import of dependent 'ad' python modules reflects now the namespaces of the C++ interface and follow doxygen documentation\n  * Fixed sensor transformations and sensor data transformations mismatch in IMU and camera-based sensors\n  * Fixed random dead-lock on synchronous mode at high frame rate\n  * Fixed bug on Windows causing sun reflection artifacts\n  * Fixed bug in `waypoint.get_landmarks()` causing some landmarks to be missed when s = 0\n  * Fixed the `actor.set_simulate_physics()` for pedestrians and vehicles\n  * Fixed bug causing camera-based sensors to stop sending data\n  * Fixed the lack of determinism on the output of raycast sensors\n  * Fixed missing `laneChange` record in converted OSM maps\n  * Fixed bug in the actor's id returned by the semantic lidar\n  * Fixed error when using `--config` parameter in `make package`\n  * Fixed dependency of library **Xerces-c** on package\n  * Fixed minor typo in the simulation data section of the documentation\n  * Fixed the `config.py` to read the `.osm ` files in proper `utf-8` encoding\n\n## CARLA 0.9.10\n\n  * Added retrieval of bounding boxes for all the elements of the level\n  * Added deterministic mode for Traffic Manager\n  * Added support in Traffic Manager for dead-end roads\n  * Upgraded CARLA Docker image to Ubuntu 18.04\n  * Upgraded to AD RSS v4.1.0 supporting unstructured scenes and pedestrians, and fixed spdlog to v1.7.0\n  * Changed frozen behavior for traffic lights. It now affects to all traffic lights at the same time\n  * Added new pedestrian models\n  * API changes:\n    - Renamed `actor.set_velocity()` to `actor.set_target_velocity()`\n    - Renamed `actor.set_angular_velocity()` to `actor.set_target_velocity()`\n    - RGB cameras `exposure_mode` is now set to `histogram` by default\n  * API extensions:\n    - Added `carla.Osm2Odr.convert()` function and `carla.Osm2OdrSettings` class to support Open Street Maps to OpenDRIVE conversion\n    - Added `world.freeze_all_traffic_lights()` and `traffic_light.reset_group()`\n    - Added `client.stop_replayer()` to stop the replayer\n    - Added `world.get_vehicles_light_states()` to get all the car light states at once\n    - Added constant velocity mode (`actor.enable_constant_velocity()` / `actor.disable_constant_velocity()`)\n    - Added function `actor.add_angular_impulse()` to add angular impulse to any actor\n    - Added `actor.add_force()` and `actor.add_torque()`\n    - Added functions `transform.get_right_vector()` and `transform.get_up_vector()`\n    - Added command to set multiple car light states at once\n    - Added 4-matrix form of transformations\n  * Added new semantic segmentation tags: `RailTrack`, `GuardRail`, `TrafficLight`, `Static`, `Dynamic`, `Water` and `Terrain`\n  * Added fixed ids for street and building lights\n  * Added vehicle light and street light data to the recorder\n  * Improved the colliders and physics for all vehicles\n  * All sensors are now multi-stream, the same sensor can be listened from different clients\n  * New semantic LiDAR sensor (`lidar.ray_cast_semantic`)\n  * Added `open3D_lidar.py`, a more friendly LiDAR visualizer\n  * Added make command to download contributions as plugins (`make plugins`)\n  * Added a warning when using SpringArm exactly in the 'z' axis of the attached actor\n  * Improved performance of raycast-based sensors through parallelization\n  * Added an approximation of the intensity of each point of the cloud in the LiDAR sensor\n  * Added Dynamic Vision Sensor (DVS) camera based on ESIM simulation http://rpg.ifi.uzh.ch/esim.html\n  * Improved LiDAR and radar to better match the shape of the vehicles\n  * Added support for additional TraCI clients in Sumo co-simulation\n  * Added script example to synchronize the gathering of sensor data in client\n  * Added default values and a warning message for lanes missing the width parameter in OpenDRIVE\n  * Added parameter to enable/disable pedestrian navigation in standalone mode\n  * Improved mesh partition in standalone mode\n  * Added Renderdoc plugin to the Unreal project\n  * Added configurable noise to LiDAR sensor\n  * Replace deprecated `platform.dist()` with recommended `distro.linux_distribution()`\n  * Improved the performance of capture sensors\n  * Fixed the center of mass for vehicles\n  * Fixed a number of OpenDRIVE parsing bugs\n  * Fixed vehicles' bounding boxes, now they are automatic\n  * Fixed a map change error when Traffic Manager is in synchronous mode\n  * Fixes add entry issue for applying parameters more than once in Traffic Manager\n  * Fixes std::numeric_limits<float>::epsilon error in Traffic Manager\n  * Fixed memory leak on `manual_control.py` scripts (sensor listening was not stopped before destroying)\n  * Fixed a bug in `spawn_npc_sumo.py` script computing not allowed routes for a given vehicle class\n  * Fixed a bug where `get_traffic_light()` would always return `None`\n  * Fixed recorder determinism problems\n  * Fixed several untagged and mistagged objects\n  * Fixed rain drop spawn issues when spawning camera sensors\n  * Fixed semantic tags in the asset import pipeline\n  * Fixed `Update.sh` from failing when the root folder contains a space on it\n  * Fixed dynamic meshes not moving to the initial position when replaying\n  * Fixed colors of lane markings when importing a map, they were reversed (white and yellow)\n  * Fixed missing include directive in file `WheelPhysicsControl.h`\n  * Fixed gravity measurement bug from IMU sensor\n  * Fixed LiDAR’s point cloud reference frame\n  * Fixed light intensity and camera parameters to match\n  * Fixed and improved auto-exposure camera (`histogram` exposure mode)\n  * Fixed delay in the TCP communication from server to the client in synchronous mode for Linux\n  * Fixed large RAM usage when loading polynomial geometry from OpenDRIVE\n  * Fixed collision issues when `debug.draw_line()` is called\n  * Fixed gyroscope sensor to properly give angular velocity readings in the local frame\n  * Fixed minor typo in the introduction section of the documentation\n  * Fixed a bug at the local planner when changing the route, causing it to maintain the first part of the previous one. This was only relevant when using very large buffer sizes\n\n## CARLA 0.9.9\n\n  * Introduced hybrid mode for Traffic Manager\n  * Upgraded to Unreal Engine 4.24\n  * Fixed autonomous agents' incorrect detection of red traffic lights affecting them\n  * Improved manual_control by adding realistic throttle and brake\n  * Added walkable pedestrian crosswalks in OpenDRIVE standalone mode\n  * Improved mesh generation with a chunk system for better performance and bigger maps in the future\n  * Added security features to the standalone OpenDRIVE mode aiming to prevent cars from falling down from the road\n  * Added junction smoothing algorithm to prevent roads from blocking other roads with level differences\n  * Added new Behavior agent\n  * Added automatic generation of traffic lights, stop signal and yield signal from OpenDRIVE file\n  * Upgraded to AD RSS v3.0.0 supporting complex road layouts and i.e. intersections\n  * Added examples of sumo co-simulation for Town01, Town04 and Town05\n  * Added ptv vissim and carla co-simulation\n  * Fixed `GetLeftLaneMarking()` from a possible runtime error\n  * API extensions:\n    - Added new methods to `Map`: `get_all_landmarks`, `get_all_landmarks_from_id` and `get_all_landmarks_of_type`\n  * Added synchronization of traffic lights in sumo co-simulation\n  * Added light manager to control the lights of the map\n\n## CARLA 0.9.8\n\n  * Added beta version sumo-carla co-simulation\n  * Traffic Manager:\n    - Added benchmark\n    - Added synchronous mode\n    - Fixed change map error\n    - Added multiclient architecture\n    - Added multi Traffic Manager architecture\n    - Fixed linkage between waypoints\n    - Implemented intersection anticipation\n    - Implemented vehicle destruction when stuck\n    - Implemented tunable parameters\n    - Revamped lane changes\n  * Added landmark class for signal-related queries\n  * Added support to parse OpenDRIVE signals\n  * Added junction class as queryable object from waypoint\n  * Added timeout to World Tick\n  * Added simple physical map generation from standalone OpenDRIVE data\n  * Added support for generating walker navigation on server-side\n  * Added support for new geometry: `spiral`, `poly3`, and `paramPoly3`\n  * Improved `get_waypoint(location)` performance\n  * New weather system: night time, fog, rain ripples, and now wind affects vegetation and rain (not car physics)\n  * Fixed Low/Epic quality settings transition\n  * Enabled Mesh distance fields\n  * API extensions:\n    - Added new methods to `BoundingBox`: `contains()`, `get_local_vertices()` and `get_world_vertices(transform)`\n    - Added new function to get a waypoint specifying parameters from the OpenDRIVE: `map.get_waypoint_xodr(road_id, lane_id, s)`\n    - Added 3 new parameters for the `carla.Weather`: `fog_density`, `fog_distance`, and (ground) `wetness`\n    - Added `carla.client.generate_opendrive_world(opendrive)` that loads a map with custom OpenDRIVE basic physical topology\n  * New python clients:\n    - `weather.py`: allows weather changes using the new weather parameters\n  * Fixed docker build of `.BIN` for pedestrian navigation\n  * Fixed `local_planner.py`: agent will now stop when it reaches the desired destination\n  * Fixed crash when missing elevation profile and lane offset in OpenDRIVE\n  * Fixed typos\n  * Fixed agent failures due to API changes in `is_within_distance_ahead()`\n  * Fixed assertion bug when using LibCarla\n  * Fixed incorrect doppler velocity for RADAR sensor\n  * Fixed documentation links\n  * Upgraded Boost to 1.72.0\n  * Recorder feature:\n    - Added an option `-i` to `start_replaying.py` to replay a session ignoreing the hero vehicles\n  * Fixed import pipeline bugs:\n    - Crash when no pedestrian navmesh is present\n    - Automatically imported static meshes not properly tagged\n  * Fixed PID controller's sensitivity to time discretization\n\n## CARLA 0.9.7\n\n  * Upgraded parameters of Unreal/CarlaUnreal/Config/DefaultInput.ini to prevent mouse freeze\n  * Add build variant with AD RSS library integration with RSS sensor and result visualisation\n  * Support for OpenGL and Vulkan in docker + headless mode\n  * Added new sensor: Inertial measurement unit (IMU)\n  * Added new sensor: Radar\n  * Exposed rgb camera attributes: exposure, depth of field, tonemapper, color correction, and chromatic aberration\n  * Now all the camera-based sensors are provided with an additional parametrized lens distortion shader\n  * Added Traffic Manager to replace autopilot in managing the NPC vehicles\n  * Improved pedestrians navigation\n  * API changes:\n    - Lidar: `range` is now set in meters, not in centimeters\n    - Lidar: `horizontal_angle` is now received in radians, not in degrees\n    - GNSS: `carla.GnssEvent` renamed to `carla.GnssMeasurement`\n  * API extensions:\n    - Added `carla.IMUMeasurement`\n    - Added `carla.RadarMeasurement` and `carla.RadarDetection`\n    - GNSS data can now be obtained with noise\n    - IMU data can now be obtained with noise\n  * Moved GNSS sensor from client to server side\n  * Added exporter plugin for UE4 to allow export meshes ready for Recast calculation\n  * The 'make import' process now rename the assets accordingly and set complex collision as simple\n  * New Python API function added (map.get_crosswalks()) that returns a list with all points that define the crosswalk zones from OpenDRIVE file\n  * Updated `manual_control.py` with a lens disortion effect example\n  * Updated `manual_control.py` with IMU and Radar realtime visualization\n  * Fixed pylint for python3 in travis\n  * Fixed PointCloudIO `cout` that interfiered with other python modules\n  * Better steering in manual control\n  * Added Doxygen documentation online with automatic updates through Jenkins pipeline\n  * Fixed an error in `automatic_control.py` failing because the `Num Lock` key\n  * Fixed client_bounding_boxes.py example script\n  * Fixed materials and semantic segmentation issues regarding importing assets\n  * Fixed ObstacleSensor to return HitDistance instead of HitRadius\n\n## CARLA 0.9.6\n\n  * Upgraded to Unreal Engine 4.22\n  * Added Vulkan support, if installed, CARLA will use Vulkan, use `-opengl` flag to launch with OpenGL\n  * The simulator is now compiled in \"Shipping\" mode, faster but it accepts less command-line arguments\n  * Pedestrians are back:\n    - Spawn pedestrians that will roam randomly on sidewalks\n    - The script 'spawn_npc.py' spawns now pedestrians, adjust the number with the flag `-w`\n    - Added navigation meshes for each maps for pedestrian navigation\n  * Allow adding custom props (FBX) to CARLA Blueprint library so they are spawnable\n  * Simplified pipeline for importing and packaging maps and custom props\n  * Vehicle physics:\n    - Added access to vehicle transmission details\n    - Added access to vehicle physics brake values\n    - Added tire friction trigger boxes for simulating slippery surfaces\n  * Added camera gamma correction as command-line argument to manual_control.py\n  * Added ability to set motion blur settings for RGB camera in sensor python blueprint\n  * Added C++ client example using LibCarla\n  * Added PythonAPI documentation generator, we documented in detail all the Python reference\n  * Added a new Python script config.py that allows the user to configure the simulator from the command-line\n  * New recorder features:\n    - Documented recorded system and binary file\n    - Added optional parameter to show more details about a recorder file (related to `show_recorder_file_info.py`)\n    - Added playback speed (slow/fast motion) to the replayer\n    - Allow custom paths for saving the recorded files\n    - More data is now recorded to replay animations:\n      + Wheels of vehicles are animated (steering, throttle, handbrake), also bikes and motorbikes\n      + Walker animations are simulated (through speed of walker)\n  * New high quality pedestrians: female, girl and boy; improved meshes and textures\n  * More color and texture variations for each pedestrian\n  * New vehicle Audi Etron: 25.000 tris and LODs\n  * New material for Mustang, new system that will allow us to improve all the vehicle materials\n  * Improved vehicle Tesla\n  * New high-quality \"Default\" weather tailor-made for each map\n  * Improved the rest of weather profiles too\n  * RGB camera improvements:\n    - Enabled temporal antialiasing and motion blur\n    - Added gamma value and motion blur as a blueprint attributes\n    - Enabled texture streaming for scene captures\n  * API changes:\n    - Renamed `frame_count` and `frame_number` as `frame`, old members are kept as deprecated\n    - `world.wait_for_tick()` now returns a `carla.WorldSnapshot`\n    - The callback of `world.on_tick(callback)` now receives a `carla.WorldSnapshot`\n    - Deprecated waypoint's `is_intersection`, use `is_junction` instead\n  * API extensions:\n    - Added attachment type \"SpringArm\" for cinematic cameras\n    - Added waypoint's `junction_id` that returns de OpenDrive identifier of the current junction\n    - Added `world.get_actor(id)` to find a single actor by id\n    - Added `carla.WeatherParameters.Default` for the default (tailor-made for each town) weather profile\n    - Added `WorldSnapshot` that contains a list of `ActorSnapshot`, allows capturings a \"still image\" of the world at a single frame\n    - Added `world.tick()` now synchronizes with the simulator and returns the id of the newly started frame\n    - Added `world.apply_settings(settings)` now synchronizes with the simulator and returns the id of the frame when the settings took effect\n    - Added `world.remove_on_tick(id)` to allow removing on tick callbacks\n    - Added allow setting fixed frame-rate from client-side, now is part of `carla.WorldSettings`\n    - Added `is_invincible` to walkers\n  * Several optimizations to the RPC server, now supports a bigger load of async messages\n  * Updated DebugHelper to render on Shipping packages, it has also better performance\n  * Updated OpenDriveActor to use the new Waypoint API\n  * Removed deprecated code and content\n  * Exposed waypoints and OpenDrive map to UE4 Blueprints\n  * Change the weight of cars. All cars have been compared with the real to have a feedback more real\n  * Recorder fixes:\n    - When a recorded session finish replaying, all vehicles will continue in autopilot, and all pedestrians will stop\n    - Fixed a possible crash if an actor is respawned before the episode is ready when a new map is loaded automatically\n    - Actors at start of playback could interpolate positions from its current position instead than the recorded position\n    - Camera following in playback was not working if a new map was needed to load\n    - API function 'show_recorder_file_info' was showing the wrong parent id\n    - Script 'start_recording.py' now properly saves destruction of actors at stop\n    - Problem when vehicles enable autopilot after a replayer, now it works better\n  * Fixed dead-lock when loading a new map in synchronous mode\n  * Fixed get_actors may produce actors without parent\n  * Fixed std::bad_cast when importing other libraries, like tensorflow, before carla\n  * Fixed latitude in WGS84 reprojection code such that Latitudes increase as one move north in CARLA worlds\n  * Fixed walking animations, the animations now go at the same speed as the game\n  * Fixed loading and reloading world not using the timeout\n  * Fixed XODR files can be found now anywhere in content\n  * Fixed bug related with Pygame error of surface too large, added sidewalks and improved lane markings in `no_rendering_mode.py`\n  * Fixed Lidar effectiveness bug in manual_control.py\n  * Fixed wrong units in VehiclePhysicsControl's center of mass\n  * Fixed semantic segmentation of bike riders\n  * Fixed inconsistent streetlights in Town03\n  * Fixed incorrect vehicle bounds\n\n## CARLA 0.9.5\n\n  * Added `client_bounding_boxes.py` to show bounding boxes client-side\n  * New Town07, rural environment with narrow roads\n  * Reworked OpenDRIVE parser and waypoints API\n    - Fixed several situations in which the XODR was incorrectly parsed\n    - Exposed more information: lane marking, lane type, lane section id, s\n    - API change: waypoint's `lane_type` is now an enum, `carla.LaneType`\n    - API change: `carla.LaneMarking` is not an enum anymore, extended with color, type, lane change, and width\n    - API extension: `map.get_waypoint` accepts an extra optional flag argument `lane_type` for filtering lane types\n    - API extension: `carla.Map` can be constructed off-line out of XODR files, `carla.Map(town_name, xodr_content)`\n    - API extension: `id` property to waypoints, uniquely identifying waypoints up to half centimetre precision\n  * API change: Renamed \"lane_invasion\" to \"lane_detector\", added too its server-side sensor to be visible to other clients\n  * API extension: new carla.command.SpawnActor to spawn actors in batch\n  * API extension: `map.transform_to_geolocation` to transform Location to GNSS GeoLocation\n  * API extension: added timestamp (elapsed simulation seconds) to SensorData\n  * API extension: method `client.apply_batch_sync` that sends commands in batch and waits for server response\n  * API extension: optional argument \"actor_ids\" to world.get_actors to request only the actors with the ids provided\n  * Migrated Content to AWS\n  * Updated `spawn_npc.py` to spawn vehicles in batch\n  * Added --rolename to \"manual_control.py\"\n  * Added options to \"no_rendering_mode.py\" to draw extra road information\n  * Added \"scene_layout.py\" to retrieve the whole information in the scene as Python dict\n  * Basic agent integrated with global router\n  * Allow usage of hostname for carla::Client and resolve them to IP addresses\n  * Added new pack of assets\n    - Windmill, different farm houses, silo\n    - Plants corn, dandelion, poppy, and grass\n    - Yield traffic sign\n  * Added modular buildings New York style\n  * Added marking lanes in Town03\n  * Added command-line arguments to simulator to disable rendering and set the server timeout\n  * Improved performance in Town01 and Town02\n  * Changed yellow marking lane from Town01 and Town02 to dashed yellow marking lane\n  * Improved lane cross detection to use the new Waypoint API\n  * Enhanced stop triggers options\n  * Fixed semantic segmentation tags in Town04, Town05, Town06\n  * Fixed tree collision in Town01\n  * Fixed VehicleSpawnPoint out of the road in Town01\n  * Fixed geo-reference of Town01 and Town07\n  * Fixed floating pillars in Town04\n  * Fixed floating building in Town03\n  * Fixed vehicles missing the route if autopilot enabled too late\n  * Fixed division by zero in is_within_distance_ahead()\n  * Fixed local planner to avoid premature route pruning at path overlaps\n  * Fixed global router behavior to be consistent with new Waypoint API\n  * Fixed clean up of local_planner when used by other modules\n  * Fixed python client DLL error on Windows\n  * Fixed wrong type returned by `ActorList.Filter(...)`\n  * Fixed wheel's tire friction affecting all vehicles from physics control parameters\n  * Fixed obstacle detector not working\n  * Fixed small float bug in misc.py\n\n\n## CARLA 0.9.4\n\n  * Added recording and playback functionality\n  * Added synchronous mode, simulator waits until a client sends a \"tick\" cue, `client.tick()`\n  * Allow changing map from client-side, added `client.load_world(name)`, `client.reload_world()`, and `client.get_available_maps()`\n  * Added scripts and tools to import maps directly from .fbx and .xodr files into the simulator\n  * Exposed minimum physics control parameters for vehicles' engine and wheels\n  * Allow controlling multiple actors in \"batch mode\"\n  * New Town06, featuring a \"Michigan left\" intersection including:\n    - Connection ramp between two highways\n    - Incorporation to a highway requiring changing several lanes to take another exit\n    - Junctions supporting different scenarios\n  * New traffic signs assets: one-way, no-turn, more speed limits, do not enter, arrow floors, Michigan left, and lane end\n  * New pedestrian texture to add more variations\n  * New road PBR material\n  * Extended the waypoint API with `lane_change`, `lane_type`, `get_right_lane()` and `get_left_lane()`\n  * Added world settings for changing no-rendering mode and synchronous mode at run-time\n  * Added methods to acquire a traffic light's pole index and all traffic lights in it's group\n  * Added performance benchmark script to measure the simulator's rendering performance\n  * Added `manual_control_steeringwheel.py` to control agents using Logitech G29 steering wheels (and maybe others)\n  * Added movable props present in the map (e.g. chairs and tables) as actors so they can be controlled from Python\n  * Added recording and playback bindings to `manual_control.py` script\n  * Removed `world.map_name` from API, use `world.get_map().name` instead\n  * Refactored `no_rendering_mode.py` to improve performance and interface\n  * Several improvements to the build system for Windows\n  * Expose traffic sign's trigger volumes on Python API\n  * Improved export/import map tools\n  * Simplify Dockerfile halving Carla Docker image size\n  * Episodes have now a random unique id to avoid collisions between runs\n  * Reduced overhead of many RPC calls by sending only actor IDs (instead of serializing all the actor attributes every time)\n  * Added priority system for vehicle control input (internal, not exposed in API)\n  * Removed \"Example.CarlaSettings.ini\", you can still use it, but it's no longer necessary\n  * Improved time-out related error messages\n  * Fixed Town01 placed 38 meters above the zero\n  * Fixed parsing of OpenDrive geo-reference exported by RoadRunner\n  * Fixed issue of retrieving an empty list when calling `world.get_actors()` right after creating the world\n  * Fixed a few synchronization issues related to changing the world at runtime\n  * Fixed traffic light when it gets illuminated by the hero vehicle in `no_rendering_mode.py`\n  * Fixed `manual_control.py` and `no_rendering_mode.py` to prevent crashes when used in \"no rendering mode\"\n  * Fixed traffic signs having the trigger box rotated\n  * Fixed female walk animation\n  * Fixed BP_MultipleFloor, tweaked offset in BaseFloor to adjust meshes between them\n  * Fixed static objects present in the map were marked as \"movable\"\n\n## CARLA 0.9.3\n\n  * Upgraded to Unreal Engine 4.21\n  * Upgraded Boost to 1.69.0\n  * New Town04 (biggest so far), includes a freeway, new bridge and road barrier, a nicer landscape based on height-map, and new street props\n  * New Town05, adding more variety of intersections for the scenario runner\n  * Redesigned pedestrian models and animations (walk and idle) for male and female characters\n  * Added sensor for detecting obstacles (ray-cast based)\n  * Added sensor GNSS (GPS)\n  * Basic agent integrated with global router\n  * Added a few methods to manage an actor:\n    - set_velocity: for setting the linear velocity\n    - set_angular_velocity: for setting the angular velocity\n    - get_angular_velocity: for getting the angular velocity\n    - add_impulse: for applying an impulse (in world axis)\n  * Renamed vehicle.get_vehicle_control() to vehicle.get_control() to be consistent with walkers\n  * Added new mesh for traffic lights\n  * Added new pine tree assets, with their LODs finely tuned for performance\n  * Added point transformation functionality for LibCarla and PythonAPI\n  * Added \"sensor_tick\" attribute to sensors (cameras and lidars) to specify the capture rate in seconds\n  * Added Export/Import map tools\n  * Added \"get_forward_vector()\" to rotation and transform, retrieves the unit vector on the rotation's X-axis\n  * Added support for Deepin in PythonAPI's setup.py\n  * Added support for spawning and controlling walkers (pedestrians)\n  * Updated BasicAgent to allow setting target_speed and handle US-style traffic lights properly\n  * OpenDriveActor has been rewritten using the Waypoint API, this has fixed some bugs\n  * Remove crash reporter from packaged build\n  * Improved simulator fatal error handling, now uses UE4 fatal error system\n  * LibCarla server pipeline now compiles with exceptions disabled for better performance and compatibility with UE4\n  * Fixed TCP accept error, too many open files while creating and destroying a lot of sensors\n  * Fixed lost error messages in client-side, now when a request fails it reports the reason\n  * Fixed global route planner to handle round about turns and made the code consistent with local planner\n  * Fixed local planner to avoid premature route pruning at path overlaps\n  * Fixed autopilot direction not properly initialized that interfered with the initial raycast direction\n  * Fixed crash when an actor was destroyed but not de-registered, e.g. falling out of world bounds\n\n## CARLA 0.9.2\n\n  * Updated ROS bridge for CARLA 0.9.X (moved to its own repository)\n  * Added Python API \"agents\" extension, includes\n    - Global route planner based on the Waypoints API (compatible with OpenDrive)\n    - BasicAgent: new client agent that can drive to a given coordinate of the map using the waypoint API and PID controllers, attending to other vehicles and traffic lights\n    - RoamingAgent: new client agent that can drive at different speeds following waypoints based on PID controllers, attending to other vehicles and traffic lights\n    - LocalPlanner functionality to navigate waypoints using PID controllers\n    - LateralControl and LongitudinalControl PIDs\n  * Added support for manual gear shifting\n  * Added \"role_name\" attribute to actors to easily identify the \"hero\" vehicle\n  * Changed traffic lights in Town03 to American style\n  * Added new junction types with only stop signs\n  * Updates to documentation and tutorials\n  * Simulator now starts by default in windowed mode\n  * CMake version required downgraded to 3.5 for better compatibility\n  * Fixed waypoints height were all placed at zero height\n  * Fixed actors in world.get_actors() missing parent actor\n  * Fixed some vehicles losing their wheels after calling set_simulate_physics\n  * Fixed bounding box of Lincoln MkZ\n  * Several fixes and improvements to OpenDriveActor\n\n## CARLA 0.9.1\n\n  * New town: Town03\n    - Created with Vector Zero's RoadRunner (including OpenDrive information of the road layout)\n    - Bigger and more diverse\n    - More road variety: multiple lanes and lane markings, curves at different angles, roundabout, elevation, tunnel\n  * Lots of improvements to the Python API\n    - Support for Python 3\n    - Support for retrieving and changing lighting and weather conditions\n    - Migrated Lidar sensor\n    - Migrated image converter methods: Depth, LogarithmicDepth, and CityScapesPalette\n    - Migrated IO methods for sensor data, \"save_to_disk\" available for PNG, JPEG, TIFF, and PLY\n    - Added support for requesting the list of all the actors alive in the current world, `world.get_actors()`\n    - `world.get_actors()` returns an `ActorList` object with `filter` functionality and lazy initialization of actors\n    - Added collision event sensor, \"sensor.other.collision\", that triggers a callback on each collision to the actor it is attached to\n    - Added lane detector sensor, \"sensor.other.lane_detector\", that detects lane invasion events\n    - Added `carla.Map` and `carla.Waypoint` classes for querying info about the road layout\n      - Added methods for converting and saving the map as OpenDrive format\n      - Added `map.get_spawn_points()` to retrieve the recommended spawn points for vehicles\n      - Added `map.get_waypoint(location)` to query the nearest waypoint\n      - Added `map.generate_waypoints(distance)` to generate waypoints all over the map at an approximated distance\n      - Added `map.get_topology()` for getting a list the tuples of waypoints that define the edges of the road graph\n      - Added `waypoint.next(distance)` to retrieve the list of the waypoints at a distance that can be driven from this waypoint\n    - Added `parent` attributes to actors, not None if the actor is attached to another actor\n    - Added `semantic_tags` to actors containing the list of tags of all of its components\n    - Added methods for retrieving velocity and acceleration of actors\n    - Added function to enable/disable simulating physics on an actor, `actor.set_simulate_physics(enabled=True)`\n    - Added bounding boxes to vehicles, `vehicle.bounding_box` property\n    - Exposed last control applied to vehicles, `vehicle.get_vehicle_control()`\n    - Added a \"tick\" message containing info of all the actors in the scene\n      - Executed in the background and cached\n      - Added `world.wait_for_tick()` for blocking the current thread until a \"tick\" message is received\n      - Added `world.on_tick(callback)` for executing a callback asynchronously each time a \"tick\" message is received\n      - These methods return/pass a `carla.Timestamp` object containing, frame count, delta time of last tick, global simulation time, and OS timestamp\n      - Methods retrieving actor's info, e.g. `actor.get_transform()`, don't need to connect with the simulator, which makes these calls quite cheap\n    - Allow drawing debug shapes from Python: points, lines, arrows, boxes, and strings (`world.debug.draw_*`)\n    - Added id (id of current episode) and map name to `carla.World`\n    - Exposed traffic lights and signs as actors. Traffic lights have a specialized actor class that has the traffic light state (red, green, yellow) as property\n    - Added methods for accessing and modifying individual items in `carla.Image` (pixels) and `carla.LidarMeasurement` (locations)\n    - Added `carla.Vector3D` for (x, y, z) objects that are not a `carla.Location`\n    - Removed `client.ping()`, `client.get_server_version()` accomplishes the same\n    - Renamed `contains_X()` methods to `has_X()`\n    - Changed `client.set_timeout(seconds)` to use seconds (float) instead of milliseconds\n    - Allow iterating attributes of an Actor's Blueprint\n    - Fixed wildcard filtering issues, now \"vehicle.*\" or \"*bmw*\" patterns work too\n    - Fixed `actor.set_transform()` broken for attached actors\n  * More Python example scripts and improved the present ones\n    - Now all the scripts use the list of recommended spawn points for each map\n    - Renamed \"example.py\" to \"tutorial.py\", and updated it with latest changes in API\n    - Added timeout to the examples\n    - \"manual_control.py\" performance has been improved while having more measurements\n    - \"manual_control.py\" now has options to change camera type and position\n    - \"manual_control.py\" now has options to iterate weather presets\n    - \"manual_control.py\" now has a fancier HUD with lots of info, and F1 key binding to remove it\n    - Added \"dynamic_weather.py\" to change the weather in real-time (the one used in the video)\n    - Added \"spawn_npc.py\" to quickly add a lot of NPC vehicles to the simulator\n    - Added \"spawn_npc.py --safe\" to only add non-problematic vehicles\n    - \"vehicle_gallery.py\" also got some small fixes\n  * Asset and content improvements\n    - New vehicle: Lincoln MKZ 2017\n    - Refactored weather system, parametrized to make it easier to use\n    - Improved control of bikes and motorbikes, still not perfect but causes less accidents\n    - Added building block generator system\n    - Misc city assets: New building, tunnel columns, rail-road bridges, new textures, new urban props\n    - Adjusted vehicle physics and center of mass\n    - Adjusted the maximum distance culling for foliage\n    - Adjusted pedestrian animations and scale issues (not yet available with new API though)\n    - Improved map building blueprints, spline based asset repeaters, and wall building tools\n    - Replaced uses of Unreal's Foliage system with standard static meshes to work around a visual bug in Linux systems\n    - Fixed filenames too long when packing the project on Windows\n    - Fixed \"SplineMeshRepeater\" loses its collider mesh from time to time\n    - Standardized asset nomenclature\n  * New system for road information based on OpenDrive format\n    - Added new map classes for querying info about the road layout and topology\n    - Added methods for finding closest point on the road\n    - Added methods for generating and iterating waypoints based on the road layout\n    - Added OpenDrive parser to convert OpenDrive files to our map data structures\n  * Other miscellaneous improvements and fixes\n    - Fixed single channel Lidar crash (by @cwecht)\n    - Fixed command-line argument `-carla-settings` fails to load absolute paths (by @harlowja)\n    - Added an option to command-line to change quality level when launching the simulator, `-quality-level=Low`\n    - Added ROS bridge odometry message (by @ShepelIlya)\n    - New lens distortion shader, sadly not yet integrated with our cameras :(\n    - New Docker tutorial\n    - Disabled texture streaming to avoid issue of textures not loading in scene captures\n    - Adjusted scene capture camera gamma to 2.4\n    - Fixed leaking objects in simulation when despawning a vehicle. Now Pawn's controller is destroyed too if necessary when destroying an Actor\n    - Fixed overflow on platform time-stamp, now it uses `double`\n    - Upgraded @rpclib to fix crash when client exits too fast (rpclib/PR#167)\n    - Moved \"PythonClient\" inside deprecated folder to avoid confusion\n    - Refactored sensor related code\n      - New plugin system for sensors that simplifies adding sensors, mini-tutorial at #830\n      - Compile-time dispatcher for sensors and serializers\n  * Improvements to the streaming library\n    - Added multi-streams for streaming simultaneously to multiple clients (used by the \"tick\" message)\n    - Messages re-use allocated memory when possible\n    - Allows unsubscribing from a stream\n    - Fixed client receives interleaved sensor messages, some messages can be discarded if connection is too slow though\n    - Fixed streaming client fails to connect in Windows\n    - Fixed streaming client keeps trying to reconnect after destroying a sensor\n  * Refactored client C++ API\n    - Python GIL is released whenever possible to avoid blocking\n    - Fixed deadlock when closing the simulator while a client is connected\n    - Fixed crash on simulator shutdown if a client has connected at some point\n    - Set methods are now sent async which greatly improves performance in the client-side\n    - Vehicle control is cached and not sent if haven't changed\n    - Suppressed exceptions in destructors\n  * Other development improvements\n    - Improved Linux Makefile, fine-grained targets to reduce compilation times in development\n    - Workaround for \"setup.py\" to link against \"libcarla_client.a\" again (Linux only)\n    - Added support for \".gtest\" file, each line of this file is passed to GTest executables as arguments when running `make check` targets\n    - Python eggs are also archived on Jenkins to easily get them without downloading the full package\n    - Added uncrustify config file for formatting UE4 C++ code\n\n## CARLA 0.9.0\n\n  * Upgraded to Unreal Engine 4.19\n  * Redesign of the networking architecture\n    - Allows any number of clients to connect simultaneously\n    - Now is possible to add and remove at any time any vehicle or camera\n    - Now is possible to control any vehicle or camera\n    - Now is possible to place cameras anywhere\n    - Reduced to two ports instead of three\n    - First port uses an RPC protocol based on [rpclib](http://rpclib.net/)\n    - Second port is for the streaming of the sensor data\n  * Redesign of the Python API\n    - Actors and sensors are now exposed in the API and can be independently controlled\n    - The Python module is built in C++, with significant performance gain in some operations\n    - Many functionality haven't been ported yet, so expect a lot of things missing\n  * Redesign of the build system to accommodate the changes in dependencies\n    - Everything can be done now with the Makefile\n    - For the moment only Linux is supported, sorry\n  * Massive clean up of all unused assets\n  * Some aesthetic fixes to the vehicles\n\n## CARLA 0.8.4\n\n  * Community contribution: ROS bridge by @laurent-george\n  * New vehicle: Tesla Model 3\n  * Added an option to _\"CarlaSettings.ini\"_ to disable bikes and motorbikes\n  * Fixed missing collision of vehicles introduced in 0.8.3\n  * Improved stability of bikes and motorbikes\n  * Improved autopilot turning behaviour at intersections, now using front wheels positions as reference\n  * Temporarily removed Kawasaki Ninja motorbikes because the model was having some stability issues\n\n## CARLA 0.8.3\n\n  * Added two-wheeled vehicles, 3 bicycles and 4 motorbikes\n  * Several art optimizations (CARLA is now about 10% faster)\n    - Improved the performance of vegetation assets, adjusted LOD and culling distance, set billboards where possible\n    - Drastically reduced the number of polygons of the landscape while keeping the original shape\n    - Removed some high-cost unnecessary assets\n    - Remodelled Mustang and NissanMicra, now with less polygons and materials, better textures and LOD\n    - Remodelled building SM_TerracedHouse_01, now with more polygons but less materials and better textures\n  * CARLA releases include now a Dockerfile for building docker images\n  * Change in HUD: replace \"FPS\" by \"Simulation Step\"\n  * The current map name is now included in the scene description message sent to the client\n  * Adapted \"manual_control.py\" and \"view_start_positions.py\" to use the map name sent by the simulator\n  * Improved the vehicle spawning algorithm, now it tries to spawn as much cars as possible even if there are not enough spawn points\n  * \"Setup.sh\" is now faster and accepts an argument to run multiple jobs in parallel\n  * Fixed foliage distance culling using wrong distance in \"Low Mode\"\n  * Fixed NissanMicra slightly turning left when driving straight\n\n## CARLA 0.8.2\n\n  * Revamped driving benchmark\n    - Changed name from benchmark to driving benchmark\n    - Fully Redesigned the architecture of the module\n    - Added a lot more documentation\n    - Now you can stop and resume the benchmarks you run\n  * Rolled back vehicle's location to the pivot of the mesh instead of the center of the bounding box\n  * Added relative transform of the vehicle's bounding box to the measurements, player and non-players\n  * Added \"frame number\" to each sensor measurement so it is possible to sync all the measurements based on the frame they are produced\n  * Improved vehicle spawner to better handle spawning failures\n  * Walkers use now a closer angle to detect vehicles, so they don't stop moving if a car passes nearby\n  * Fixed lighting artefact causing the road to change its brightness depending on the distance to the camera\n  * Fixed captured images overexposed in Low mode\n  * Fixed illegal character in asset name\n  * Fixed editing sun azimuth angle in CarlaWeadther.ini had no effect\n  * Fixed crash when using a non-standard image size in DirectX (Windows)\n  * Fixed issue with using multiple \"SceneCaptureToDiskCamera\"\n\n## CARLA 0.8.1\n\n  * New Python example for visualizing the player start positions\n  * Fixed box extent of non-player agents was sent in centimeters instead of meters\n  * Fixed speed limits were sent in km/h instead of m/s\n  * Fixed issue in Volkswagen T2 wheels causing it to overturn\n\n## CARLA 0.8.0\n\n  * Upgraded to Unreal Engine 4.18\n  * Created our own pedestrian 3D models free to use and distribute\n  * Removed Epic's Automotive Materials dependencies\n  * 360 Lidars support (similar to Velodyne HDL-32E or VLP-16) thanks to Anton Pechenko (Yandex)\n    - Ray-cast based\n    - Configurable settings\n    - Added methods to save points to disk as PLY file\n  * Added quality level settings\n    - Low: low quality graphics, about 3 times faster with one camera\n    - Epic: best quality (as before)\n  * Measurements now use SI units\n    - Locations:    m\n    - Speed:        m/s\n    - Acceleration: m/s^2\n    - Collisions:   kg*m/s\n    - Angles:       degrees\n  * Added API methods to convert depth images to a point cloud\n    - New method \"image_converter.depth_to_local_point_cloud\"\n    - A supplementary image can be passed to attach colors to the points\n    - New client example generates a point cloud in world coordinates\n    - Added Transform class to Python API\n  * Performance optimizations\n    - Significant speed improvements in both Epic and Low modes\n    - Fixed materials and improved shaders for roads, architecture, sidewalks, foliage, landscapes, cars, walkers, reflections, water\n    - Execution of a set of Project and Engine parameters to improve performance (quality, vsync, AO, occlusion)\n    - Generation of the road pieces using static meshes and actors instead of a single actor with instanced meshes\n      - Improved performance since now is able to apply occlusion and draw distance\n    - Images are captured asynchronously in the render thread\n      - In asynchronous mode, images may arrive up to two frames later\n      - In synchronous mode, game thread is blocked until images are ready\n    - Blueprint code optimizations for vehicles, walkers, and splines\n    - Added a way to configure different quality levels with culling distance and materials configuration\n  * Refactored sensor related code to ease adding new sensors in the future\n  * Added vehicle box extent to player measurements\n  * Removed the player from the list of non-player agents\n  * Adjusted bounding boxes to vehicles' height\n  * Changed vehicles' center to match bounding box\n  * Added autopilot mode to manual_control.py\n  * Added quality level options to manual_control.py and client_example.py\n  * Replaced background landscape and trees by a matte painting\n  * Fixed road map generated some meshes twice\n  * Small improvements to Windows support\n    - Fixed issues with the Makefile\n    - Fixed asset names too long or containing special characters\n\n## CARLA 0.7.1\n\n  * New Python API module: Benchmark\n    - Defines a set of tasks and conditions to test a certain agent\n    - Contains a starting benchmark, CoRL2017\n    - Contains Agent Class: Interface for benchmarking AIs\n  * New Python API module: Basic Planner (Temporary Hack)\n    - Provide routes for the agent\n    - Contains AStar module to find the shortest route\n  * Other Python API improvements\n    - Converter class to convert between Unreal world and map units\n    - Metrics module to summarize benchmark results\n  * Send vehicle's roll, pitch, and yaw to client (orientation is now deprecated)\n  * New RoutePlanner class for assigning fixed routes to autopilot (IntersectionEntrance has been removed)\n  * Create a random engine for each vehicle, which greatly improves repeatability\n  * Add option to skip content download in Setup.sh\n  * Few small fixes to the city assets\n\n## CARLA 0.7.0\n\n  * New Python client API\n    - Cleaner and more robust\n    - Compatible with Python 2 and 3\n    - Improved exception handling\n    - Improved examples\n    - Included methods for parsing the images\n    - Better documentation\n    - Protocol: renamed \"ai_control\" to \"autopilot_control\"\n    - Merged testing client\n    - Added the maps for both cities, the client can now access the car position within the lane\n  * Make CARLA start without client by default\n  * Added wind effect to some trees and plants\n  * Improvements to the existing weather presets\n  * Build script: skip content download if up-to-date\n\n## CARLA 0.6.0\n\n  * Included Unreal project and reorganised folders\n  * Enabled semantic segmentation by default\n  * Added Felipe's Python client\n  * New build system (Linux only)\n  * Few fixes to city assets\n\n## CARLA 0.5.4\n\n  * Added command-line parameter -carla-no-hud\n  * Remove override gamma from weather settings\n  * Fixed issue road map generation hangs cooking command\n  * Organise Python client and make sample script\n  * Rename maps\n    - CARLA_ORIGIN_0 --> Town02\n    - CARLA_ORIGIN_1 --> Town01\n  * Fixed Carla-Cola machine falling at begin play\n\n## CARLA 0.5.3\n\n  * Fixed issues with weather\n  * Fixed missing building\n\n## CARLA 0.5.2\n\n  * Autopilot mode has been removed, now server sends AI control together with measurements every frame\n  * State and position of traffic lights and signs are now included in the measurements too\n  * Added a python console client\n  * Fixed crash when client sends an invalid player start\n  * Fixed some issues with the dynamic weather not looking as it used to do\n  * Fixed some collision boxes missing\n\n## CARLA 0.5.1\n\n  * Fixed issue server was destroyed on every reset, closing the connection\n  * Fixed issue agent servers connect too late\n  * Improvements to the python client\n  * Added python client test suite for testing the release\n  * Added image converter\n  * Fixed missing floor on CARLA_ORIGIN_0\n  * Changed sidewalk texture\n  * Improvements on the physics of some vehicles\n  * More props and decals added to the cities\n\n## CARLA 0.5.0\n\n  * Upgraded to Unreal Engine 4.17\n    - Fixes memory leaks\n    - Fixes crashes with C++ std classes\n  * Redesigned CarlaServer\n    - Faster, avoids unnecessary copies\n    - Sends images as raw data (no compression)\n    - Supports synchronous and asynchronous mode\n    - Networking operation have a time-out\n    - Synchronous methods have a time-out\n    - Pure C interface for better compatibility\n    - Unit tests with GoogleTest\n  * New server-client protocol\n    - Upgraded to proto3\n    - Supports repeated fields\n    - Optionally send information about all dynamic agents in the scene\n    - Now sends transforms instead of locations only\n    - Autopilot mode added to control\n  * New build system to avoid linkage issues\n  * Added autopilot mode\n  * Added an on-board camera to the car\n  * Added traffic lights and speed limit to player state\n  * Added player pawn selection to config file\n  * Improved blueprint interface of the C++ classes\n  * Some performance improvements to vehicle controllers\n  * Fix issues with depth material in Windows\n  * Fix issues with random engine not being available for vehicles\n  * Fixed issue that compiling a release hang when saving the road map\n  * Added more content; 7 vehicles, 30 pedestrians, many decals and props\n  * Randomized pedestrian clothing\n  * Many improvements and fixes to the city levels and assets\n  * Added sub-surface scattering to vegetation\n  * Added key binding to change weather during play\n  * Added key binding to toggle autopilot mode\n  * Added a second camera to the player\n\n## CARLA 0.4.6\n\n  * Add weather presets specific for each level\n  * Some map fixes, adjust weather presets specific for each level\n  * Fixed regression that some walkers may go at extremely slow and fast speeds\n\n## CARLA 0.4.5\n\n  * Add random seeds to config file\n  * Improve logging\n  * Removed rotation of map CARLA_ORIGIN_1\n\n## CARLA 0.4.4\n\n  * Fixed regression walkers despawning when stopping after seeing a car\n  * Changed, collision is only registered if player moves faster than 1 km/h\n  * Fixed issue walkers resume movement after sensing nothing, but the car is still there sometimes\n  * Few improvements to the city assets\n\n## CARLA 0.4.3\n\n  * Fixed issue with reward, intersect other lane wasn't sent to the client\n  * Improvements to the AI of other vehicles, and how they detect pedestrians\n  * Improvements to the AI of the pedestrians, trying to avoid slightly better the cars\n  * Made roads collision channel WorldStatic\n  * Tune several vehicles' physics and engine\n  * Fixed issue with vehicles bouncing back after hitting a pedestrian\n  * Add bigger box to pedestrians to avoid accidents\n  * Make vehicles spawn in order instead of randomly\n\n## CARLA 0.4.2\n\n  * Fixed issues with the server-client protocol\n  * More improvements to the AI of other vehicles, now they barely crash\n  * Improved the physics of some vehicles\n  * Tweak the city for better AI of other vehicles\n\n## CARLA 0.4.1\n\n  * Improved AI of other vehicles, still needs some adjustment, but now they crash much less\n  * Fixed wrong semantic segmentation label of the poles of traffic lights and signs\n  * Added randomized vehicle license plates\n  * Few improvements to the city assets\n\n## CARLA 0.4.0\n\n  * Made vehicle input more realistic, now reverse and brake use different input\n  * Changed server-client protocol\n    - CarlaSettings.ini is sent for every new episode\n    - Control is extended with brake, reverse and handbrake\n  * Set a clearer hierarchy for loading settings files\n  * Made camera post-process settings able to change depending on the weather\n  * Added basic functionality for NPC vehicles\n  * Some improvements to the walker spawner\n  * Generate road map metadata on save\n  * Added command-line switch -carla-no-networking\n  * Improved verbosity control of CarlaServer\n  * Fixed issue with server that two threads used 100% CPU\n  * Fixed issue with the attachment of the main camera to the player\n  * Fixed issues with CarlaServer interface with Unreal, does not use STL containers anymore\n  * Fixed issue with server not running below 30 fps at fixed frame rate, added physics sub-stepping\n  * Fixed issues with some weather settings\n  * Added randomized pedestrians with their AI and animations\n  * Added other vehicles with their AI and physics\n  * Added traffic lights and signs\n  * Tweaked capture image to look similar to main camera\n  * Changed car input to match settings in plugin\n  * General improvements to levels and assets\n\n## CARLA 0.3.0\n\n  * Added basic dynamic weather functionality\n    - Weather and sun light can be changed during game\n    - Presets stored in config file CarlaWeather.ini\n    - Added some presets for dynamic weather\n  * Add basic functionality to spawn pedestrians\n  * Split road meshes for intersections and turns for better precission of the road map\n  * Better debug for road map\n  * Implemented collision count for other cars and pedestrians\n  * Command line argument -carla-settings now accepts relative paths\n  * Improved performance when semantic segmentation is disabled\n  * Improved tagger system\n  * Implemented nav-mesh and spawn points for pedestrians\n  * Added new cars\n  * Added dynamic street lights\n  * General improvements to levels and assets\n  * Make the car jump\n\n## CARLA 0.2.4\n\n  * Fixed serialization of road map resulting in a huge map size\n  * Some optimizations in the vegetation\n  * Implemented more LODS\n\n## CARLA 0.2.3\n\n  * Fixed rounding errors in HUD (100% was shown as 99%, 30 FPS as 29 FPS)\n  * Fixed crash when player goes out of road map\n  * Fixed several issues related to the transform of the road map (wasn't working in CARLA_ORIGIN_1)\n  * Make custom depth pass disable by default (semantic segmentation won't work by default)\n  * Fixed road width in T-intersections\n  * Implement road LOD\n  * Fixed missing assets\n\n## CARLA 0.2.2\n\n  * Implemented signals for off-road and opposite lane invasion\n  * Fixed linking issues (use Unreal's libpng)\n  * Fixed memory leak in PNG compression\n  * Added boundaries to the map\n  * Several fixes in the map content\n\n## CARLA 0.2.1\n\n  * Fixed the memory leak related to protobuf issues\n  * Fixed color shift in semantic segmentation and depth\n  * Added in-game timestamp (now sending both OS and in-game)\n\n## CARLA 0.2.0\n\n  * Fixed Depth issues\n  * Fixed random crash due to an invalid player start position\n  * Added semantic segmentation\n  * Changed codification to PNG\n  * Camera configuration through config INI file\n\n## CARLA 0.1.1\n\n  * Added build system for Windows and Linux\n  * Added more content\n\n## CARLA 0.1.0\n\n  * Added basic functionality\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.6318359375,
          "content": "#[[\n\n  Copyright (c) 2024 Computer Vision Center (CVC) at the Universitat Autonoma\n  de Barcelona (UAB).\n  \n  This work is licensed under the terms of the MIT license.\n  For a copy, see <https://opensource.org/licenses/MIT>.\n\n]]\n\nset (\n  CARLA_CMAKE_MINIMUM_REQUIRED_VERSION\n  3.27.2\n)\n\ncmake_minimum_required (\n  VERSION\n  ${CARLA_CMAKE_MINIMUM_REQUIRED_VERSION}\n)\n\ncmake_policy (SET CMP0097 NEW)\ncmake_policy (SET CMP0091 NEW)\ncmake_policy (SET CMP0074 NEW)\ncmake_policy (SET CMP0077 NEW)\ncmake_policy (SET CMP0117 NEW)\n\nif (${CMAKE_MINOR_VERSION} GREATER_EQUAL 24)\n  cmake_policy (SET CMP0135 NEW)\nendif ()\n\nset (CARLA_VERSION_MAJOR 0)\nset (CARLA_VERSION_MINOR 10)\nset (CARLA_VERSION_PATCH 0)\n\nset (\n  CARLA_VERSION \n  ${CARLA_VERSION_MAJOR}.${CARLA_VERSION_MINOR}.${CARLA_VERSION_PATCH}\n)\n\nproject (\n  CARLA\n  VERSION\n    ${CARLA_VERSION}\n  LANGUAGES\n    C\n    CXX\n    ASM\n  DESCRIPTION\n    \"Open-source simulator for autonomous driving research.\"\n  HOMEPAGE_URL\n    https://carla.org\n)\n\nset (\n  CARLA_WORKSPACE_PATH\n  ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\nset (\n  CARLA_BUILD_PATH\n  ${CMAKE_BINARY_DIR}\n)\n\nset (\n  CARLA_PACKAGE_PATH\n  ${CARLA_BUILD_PATH}/Package\n)\n\nset (\n  CARLA_UNREAL_PLUGINS_PATH\n  ${CARLA_WORKSPACE_PATH}/Unreal/CarlaUnreal/Plugins\n)\n\nset (\n  CARLA_LICENSE_FILE_PATH\n  ${CARLA_WORKSPACE_PATH}/LICENSE\n)\n\ninclude (CheckCCompilerFlag)\ninclude (CheckCXXCompilerFlag)\ninclude (CheckLinkerFlag)\ninclude (${CARLA_WORKSPACE_PATH}/CMake/Util.cmake)\ninclude (${CARLA_WORKSPACE_PATH}/CMake/Options.cmake)\ninclude (${CARLA_WORKSPACE_PATH}/CMake/Common.cmake)\ninclude (${CARLA_WORKSPACE_PATH}/CMake/Dependencies.cmake)\n\nif (BUILD_CARLA_CLIENT OR BUILD_CARLA_SERVER)\n  add_subdirectory (LibCarla)\nendif ()\n\nif (BUILD_OSM_WORLD_RENDERER)\n  add_subdirectory (osm-world-renderer)\nendif ()\n\nif (ENABLE_ROS2)\n  add_subdirectory (Ros2Native)\nendif()\n\nif (BUILD_PYTHON_API)\n  add_subdirectory (PythonAPI)\nendif ()\n\nif (BUILD_CARLA_UNREAL)\n  add_subdirectory (Unreal)\nendif ()\n\nif (BUILD_EXAMPLES)\n  add_subdirectory (Examples)\nendif ()\n\ncarla_add_custom_target (\n  carla-help\n  \"Display this message.\"\n  COMMAND ${CMAKE_COMMAND} -E cat \"${CMAKE_CURRENT_BINARY_DIR}/Help.md\"\n)\n\ncarla_get_option_docs (CARLA_OPTION_DOCS)\ncarla_get_target_docs (CARLA_TARGET_DOCS)\nset (CARLA_CMAKE_HELP_MESSAGE)\nstring (\n  APPEND \n  CARLA_CMAKE_HELP_MESSAGE\n  \"# CARLA - CMake Help\\n\"\n  \"## CMake Targets\\n\"\n  \"${CARLA_TARGET_DOCS}\\n\"\n  \"## CMake Options\\n\"\n  \"${CARLA_OPTION_DOCS}\\n\"\n)\n\nfile (\n  WRITE\n  ${CMAKE_CURRENT_BINARY_DIR}/Help.md\n  ${CARLA_CMAKE_HELP_MESSAGE}\n)\n\nif (CMAKE_EXPORT_COMPILE_COMMANDS)\n  configure_file (\n    ${CARLA_WORKSPACE_PATH}/.clangd.in\n    ${CARLA_WORKSPACE_PATH}/.clangd\n  )\nendif ()\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 1.44140625,
          "content": "{\n  \"version\": 4,\n  \"cmakeMinimumRequired\":\n  {\n    \"major\": 3,\n    \"minor\": 27,\n    \"patch\": 2\n  },\n  \"configurePresets\":\n  [\n    {\n      \"name\": \"Common\",\n      \"generator\": \"Ninja\",\n      \"binaryDir\": \"${sourceDir}/Build/${presetName}\",\n      \"installDir\": \"${sourceDir}/Install/${presetName}\",\n      \"hidden\": true\n    },\n    {\n      \"name\": \"Linux-Common\",\n      \"inherits\": \"Common\",\n      \"cacheVariables\":\n      {\n        \"CMAKE_TOOLCHAIN_FILE\": \"${sourceDir}/CMake/LinuxToolchain.cmake\"\n      },\n      \"hidden\": true\n    },\n    {\n      \"name\": \"Windows-Debug\",\n      \"inherits\": \"Common\",\n      \"cacheVariables\":\n      {\n        \"CMAKE_BUILD_TYPE\": \"Debug\"\n      }\n    },\n    {\n      \"name\": \"Windows-Development\",\n      \"inherits\": \"Common\",\n      \"cacheVariables\":\n      {\n        \"CMAKE_BUILD_TYPE\": \"RelWithDebInfo\"\n      }\n    },\n    {\n      \"name\": \"Windows-Release\",\n      \"inherits\": \"Common\",\n      \"cacheVariables\":\n      {\n        \"CMAKE_BUILD_TYPE\": \"Release\"\n      }\n    },\n    {\n      \"name\": \"Linux-Debug\",\n      \"inherits\": \"Linux-Common\",\n      \"cacheVariables\":\n      {\n        \"CMAKE_BUILD_TYPE\": \"Debug\"\n      }\n    },\n    {\n      \"name\": \"Linux-Development\",\n      \"inherits\": \"Linux-Common\",\n      \"cacheVariables\":\n      {\n        \"CMAKE_BUILD_TYPE\": \"RelWithDebInfo\"\n      }\n    },\n    {\n      \"name\": \"Linux-Release\",\n      \"inherits\": \"Linux-Common\",\n      \"cacheVariables\":\n      {\n        \"CMAKE_BUILD_TYPE\": \"Release\"\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": "CarlaSetup.bat",
          "type": "blob",
          "size": 4.37890625,
          "content": "SETLOCAL EnableDelayedExpansion\n\necho Starting Content Download...\nif not exist \"Unreal\\CarlaUnreal\\Content\" mkdir Unreal\\CarlaUnreal\\Content\nstart cmd /c git -C Unreal/CarlaUnreal/Content clone -b ue5-dev https://bitbucket.org/carla-simulator/carla-content.git Carla\n\n\necho Installing Visual Studio 2022...\ncurl -L -O https://aka.ms/vs/17/release/vs_community.exe || exit /b\nrem See: https://learn.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-community?view=vs-2022&preserve-view=true\nvs_Community.exe --add ^\n  Microsoft.VisualStudio.Workload.NativeDesktop ^\n  Microsoft.VisualStudio.Workload.NativeGame ^\n  Microsoft.VisualStudio.Workload.ManagedDesktop ^\n  Microsoft.VisualStudio.Component.Windows10SDK.18362 ^\n  Microsoft.VisualStudio.Component.VC.CMake.Project ^\n  Microsoft.Net.ComponentGroup.4.8.1.DeveloperTools ^\n  Microsoft.VisualStudio.Component.VC.Llvm.Clang ^\n  Microsoft.VisualStudio.Component.VC.Llvm.ClangToolset ^\n  Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Llvm.Clang ^\n  Microsoft.VisualStudio.Component.VC.14.36.17.6.x86.x64 ^\n  --removeProductLang Es-es ^\n  --addProductLang En-us ^\n  --installWhileDownloading ^\n  --passive ^\n  --wait\ndel vs_community.exe\necho Visual Studion 2022 Installed!!!\n\n\nninja --version 2>NUL\nif errorlevel 1 (\n    echo Found Ninja - FAIL\n    echo Installing Ninja 1.11.1...\n    echo Installing Ninja...\n    curl -L -o %USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps\\ninja-win.zip https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip || exit /b\n    powershell -command \"Expand-Archive $env:USERPROFILE\\AppData\\Local\\Microsoft\\WindowsApps\\ninja-win.zip $env:USERPROFILE\\AppData\\Local\\Microsoft\\WindowsApps\\ninja-win\" || exit /b\n    move %USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps\\ninja-win\\ninja.exe %USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps\\ninja.exe || exit /b\n    rmdir /s /q %USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps\\ninja-win\n    del /f %USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps\\ninja-win.zip\n    echo Ninja Installed!!!\n) else (\n    echo Found Ninja - OK\n    ninja --version\n)\n\n\npython --version 2>NUL\nif errorlevel 1 (\n    echo Found Python - FAIL\n    echo Installing Python 3.8.10...\n    curl -L -O https://www.python.org/ftp/python/3.8.10/python-3.8.10-amd64.exe || exit /b\n    python-3.8.10-amd64.exe /passive PrependPath=1  || exit /b\n    del python-3.8.10-amd64.exe\n    set \"PATH=%LocalAppData%\\Programs\\Python\\Python38\\Scripts\\;%LocalAppData%\\Programs\\Python\\Python38\\;%PATH%\"\n    echo Python 3.8.10 installed!!!\n) else (\n    echo Found Python - OK\n    python --version\n)\n\n\necho Installing Python Packages...\npython -m pip install --upgrade pip || exit /b\npython -m pip install -r requirements.txt || exit /b\necho Python Packages Installed...\n\n\necho Switching to x64 Native Tools Command Prompt for VS 2022 command line...\ncall \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n\n\nif exist \"%CARLA_UNREAL_ENGINE_PATH%\" (\n    echo Found UnrealEngine5 %CARLA_UNREAL_ENGINE_PATH% - OK\n) else if exist ..\\UnrealEngine5_carla (\n    echo Found UnrealEngine5 ..\\UnrealEngine5_carla - OK\n    pushd ..\n    pushd UnrealEngine5_carla\n    set CARLA_UNREAL_ENGINE_PATH=!cd!\n    setx CARLA_UNREAL_ENGINE_PATH !cd!\n    popd\n    popd\n) else (\n    echo Found UnrealEngine5 $CARLA_UNREAL_ENGINE_PATH - FAIL\n    pushd ..\n    echo Cloning CARLA Unreal Engine 5...\n    git clone -b ue5-dev-carla https://github.com/CarlaUnreal/UnrealEngine.git UnrealEngine5_carla || exit /b\n    pushd UnrealEngine5_carla\n    set CARLA_UNREAL_ENGINE_PATH=!cd!\n    setx CARLA_UNREAL_ENGINE_PATH !cd!\n    popd\n    popd\n)\npushd ..\npushd %CARLA_UNREAL_ENGINE_PATH%\necho Setup CARLA Unreal Engine 5...\ncall Setup.bat || exit /b\necho GenerateProjectFiles CARLA Unreal Engine 5...\ncall GenerateProjectFiles.bat || exit /b\necho Opening Visual Studio 2022...\nmsbuild Engine\\Intermediate\\ProjectFiles\\UE5.vcxproj /property:Configuration=\"Development_Editor\" /property:Platform=\"x64\" || exit /b\npopd\npopd\n\necho Configuring CARLA...\ncall cmake -G Ninja -S . -B Build -DCMAKE_BUILD_TYPE=Release -DBUILD_CARLA_UNREAL=ON -DCARLA_UNREAL_ENGINE_PATH=%CARLA_UNREAL_ENGINE_PATH% || exit /b\n\necho Buiding CARLA...\ncall cmake --build Build || exit /b\n\necho Installing PythonAPI...\ncmake --build Build --target carla-python-api-install\n\necho Build Succesfull :)\necho Launching Unreal Editor with CARLA...\ncall cmake --build Build --target launch || exit /b\n"
        },
        {
          "name": "CarlaSetup.sh",
          "type": "blob",
          "size": 3.333984375,
          "content": "#! /bin/bash\n\nset -e\n\ninteractive=0\nskip_prerequisites=0\nlaunch=0\n\noptions=$(getopt -o \"i,p,l\" --long \"interactive,skip-prerequisites,launch\" -n 'CarlaSetup.sh' -- \"$@\")\neval set -- \"$options\"\nwhile true; do\n    case \"$1\" in\n        -i | --interactive)\n            interactive=1\n            shift\n            ;;\n        -p | --skip-prerequisites)\n            skip_prerequisites=1\n            shift\n            ;;\n        -l | --launch)\n            launch=1\n            shift\n            ;;\n        --)\n            shift\n            break\n            ;;\n        *)\n            ;;\n    esac\ndone\n\n# Check for root privileges:\nif [ -z \"$EUID\" ]; then\n    EUID=$(id -u)\nfi\nif [ \"$EUID\" -ne 0 ]; then\n    if [ $interactive -eq 0 ]; then\n        if [ $skip_prerequisites -eq 0 ]; then\n            echo \"Please run this script as root. Otherwise pass --interactive to be prompted whenever root privileges or Git credentials are needed.\"\n            exit 1\n        fi\n    fi\nfi\n\n# Check for Git credentials:\nif [ -z \"$GIT_LOCAL_CREDENTIALS\" ]; then\n    if [ $interactive -eq 1 ]; then\n        echo \"Warning: git credentials are not set. You may be required to manually enter them later.\"\n    else\n        echo \"Git credentials are not set, can not continue setup in unattended mode.\"\n        exit 1\n    fi\nelse\n    echo \"Found git credentials.\"\nfi\n\nif [ $skip_prerequisites -eq 0 ]; then\n    echo \"Installing prerequisites...\"\n    sudo -E bash -x Util/SetupUtils/InstallPrerequisites.sh\nelse\n    echo \"Skipping prerequisites install step.\"\nfi\n\nif [ ! -z $CARLA_UNREAL_ENGINE_PATH ] && [ -d $CARLA_UNREAL_ENGINE_PATH ]; then\n    echo \"Found CARLA Unreal Engine at $CARLA_UNREAL_ENGINE_PATH\"\nelif [ -d ../UnrealEngine5_carla ]; then\n    pushd ..\n    pushd UnrealEngine5_carla\n    echo \"Found CARLA Unreal Engine at ../UnrealEngine5_carla\"\n    export CARLA_UNREAL_ENGINE_PATH=$PWD\n    echo -e '\\n#CARLA UnrealEngine5\\nexport CARLA_UNREAL_ENGINE_PATH='$CARLA_UNREAL_ENGINE_PATH >> ~/.bashrc\n    popd\n    popd\nelse\n    echo \"Could not find CARLA Unreal Engine, downloading...\"\n    pushd ..\n    if [ -z \"$GIT_LOCAL_CREDENTIALS\" ]\n    then\n        UE5_URL=https://github.com/CarlaUnreal/UnrealEngine.git\n    else\n        GIT_CREDENTIALS_INFO=(${GIT_LOCAL_CREDENTIALS//@/ })\n        GIT_LOCAL_USER=${GIT_CREDENTIALS_INFO[0]}\n        GIT_LOCAL_TOKEN=${GIT_CREDENTIALS_INFO[1]}\n        UE5_URL=https://$GIT_LOCAL_USER:$GIT_LOCAL_TOKEN@github.com/CarlaUnreal/UnrealEngine.git\n    fi\n    git clone -b ue5-dev-carla $UE5_URL UnrealEngine5_carla\n    pushd UnrealEngine5_carla\n    echo -e '\\n#CARLA UnrealEngine5\\nexport CARLA_UNREAL_ENGINE_PATH='$PWD >> ~/.bashrc\n    export CARLA_UNREAL_ENGINE_PATH=$PWD\n    popd\n    popd\n    echo \"Installed CARLA Unreal Engine...\"\nfi\n\necho \"Configuring CARLA...\"\ncmake -G Ninja -S . -B Build \\\n    --toolchain=$PWD/CMake/LinuxToolchain.cmake \\\n    -DLAUNCH_ARGS=\"-prefernvidia\" \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DENABLE_ROS2=ON \\\n    -DBUILD_CARLA_UNREAL=ON \\\n    -DCARLA_UNREAL_ENGINE_PATH=$CARLA_UNREAL_ENGINE_PATH\necho \"Building CARLA...\"\ncmake --build Build\necho \"Building + installing Python API...\"\ncmake --build Build --target carla-python-api-install\necho \"Waiting for Content to finish downloading...\"\nwait #Waitting for content\necho \"Installation and build successful.\"\nif [ $launch -eq 1 ]; then\n    echo \"Launching Carla - Unreal Editor...\"\n    cmake --build Build --target launch\nfi"
        },
        {
          "name": "Docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "Doxyfile",
          "type": "blob",
          "size": 1.3955078125,
          "content": "PROJECT_NAME            =  CARLA\nOUTPUT_DIRECTORY        =  Doxygen\nCREATE_SUBDIRS          =  YES\nFULL_PATH_NAMES         =  NO\nJAVADOC_AUTOBRIEF       =  YES\nLOOKUP_CACHE_SIZE       =  3\nEXTRACT_ALL             =  YES\nEXTRACT_PRIVATE         =  YES\nEXTRACT_STATIC          =  YES\nCASE_SENSE_NAMES        =  YES\nSORT_BRIEF_DOCS         =  YES\nWARN_IF_UNDOCUMENTED    =  NO\nWARN_LOGFILE            =  Doxygen/warnings.log\nINPUT                   =  Unreal/CarlaUnreal/Source Unreal/CarlaUnreal/Plugins/Carla/Source LibCarla/source\nFILE_PATTERNS           =  *.cpp *.h *.hpp *.cc\nEXCLUDE                 =  LibCarla/source/carla/Version.h\nRECURSIVE               =  YES\nSOURCE_BROWSER          =  YES\nSTRIP_CODE_COMMENTS     =  NO\nREFERENCED_BY_RELATION  =  YES\nREFERENCES_RELATION     =  YES\nALPHABETICAL_INDEX      =  NO\nHTML_DYNAMIC_SECTIONS   =  YES\nDISABLE_INDEX           =  YES\nGENERATE_TREEVIEW       =  NO\nFORMULA_FONTSIZE        =  12\nGENERATE_LATEX          =  NO\nMACRO_EXPANSION         =  YES\nEXPAND_ONLY_PREDEF      =  YES\nINCLUDE_PATH            =  Unreal/CarlaUnreal/Source Unreal/CarlaUnreal/Plugins/Carla/Source LibCarla/source\nINCLUDE_FILE_PATTERNS   =  *.h *.hpp\nHIDE_UNDOC_RELATIONS    =  NO\nHAVE_DOT                =  YES\nTEMPLATE_RELATIONS      =  YES\nCALL_GRAPH              =  YES\nCALLER_GRAPH            =  YES\nDOT_IMAGE_FORMAT        =  svg\nINTERACTIVE_SVG         =  YES\nDOT_MULTI_TARGETS       =  YES\n"
        },
        {
          "name": "Examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "Import",
          "type": "tree",
          "content": null
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 1.0771484375,
          "content": "pipeline\n{\n    stages\n    {\n        stage('Ubuntu')\n        {\n            agent { label \"ubuntu_22_04\" }\n            stages {\n                stage('Configure')\n                {\n                    steps {\n                        sh \"cmake -G Ninja -S . -B Build --toolchain=$PWD/CMake/LinuxToolchain.cmake -DLAUNCH_ARGS=-prefernvidia -DCMAKE_BUILD_TYPE=Release -DENABLE_ROS2=ON -DBUILD_CARLA_UNREAL=ON -DCARLA_UNREAL_ENGINE_PATH=$CARLA_UNREAL_ENGINE_PATH\"\n                    }\n                }\n                stage('Build Python API')\n                {\n                    steps {\n                        sh \"cmake --build Build --target package\"\n                    }\n                }\n                stage('Build CARLA')\n                {\n                    steps {\n                        sh \"cmake --build Build --target carla-unreal\"\n                    }\n                }\n                stage('Package')\n                {\n                    steps {\n                        sh \"cmake --build Build --target package\"\n                    }\n                }\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1064453125,
          "content": "MIT License\n\nCopyright (c) 2024 Computer Vision Center (CVC) at the Universitat Autonoma de\nBarcelona (UAB).\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LibCarla",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.263671875,
          "content": "launch PythonAPI LibCarla CarlaUnrealEditor CarlaUnrealEditor launch-only:\n\t@echo \"MakeFile build is currently disabled.\"\n\n# include Util/BuildTools/Vars.mk\n# ifeq ($(OS),Windows_NT)\n# include Util/BuildTools/Windows.mk\n# else\n# include Util/BuildTools/Linux.mk\n# endif\n"
        },
        {
          "name": "PythonAPI",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.564453125,
          "content": "CARLA Simulator\n===============\n\n[![Documentation](https://readthedocs.org/projects/carla/badge/?version=latest)](https://carla-ue5.readthedocs.io)\n\n[![carla.org](Docs/img/btn/web.png)](http://carla.org)\n[![download](Docs/img/btn/download.png)](https://github.com/carla-simulator/carla/releases)\n[![documentation](Docs/img/btn/docs.png)](https://carla-ue5.readthedocs.io)\n[![forum](Docs/img/btn/forum.png)](https://github.com/carla-simulator/carla/discussions)\n[![discord](Docs/img/btn/chat.png)](https://discord.gg/8kqACuC)\n\nCARLA is an open-source simulator for autonomous driving research. CARLA has been developed from the ground up to support development, training, and\nvalidation of autonomous driving systems. In addition to open-source code and protocols, CARLA provides open digital assets (urban layouts, buildings,\nvehicles) that were created for this purpose and can be used freely. The simulation platform supports flexible specification of sensor suites and\nenvironmental conditions.\n\n[![CARLA Video](Docs/img/carla_ue5_readme_img.webp)](https://www.youtube.com/watch?v=q4V9GYjA1pE)\n\n>[!NOTE]\n> This is the development branch `ue5-dev` for the **Unreal Engine 5.5 version of CARLA**. This branch exists in parallel with the Unreal Engine 4.26 version of CARLA, in the `ue4-dev` branch. Please be sure that this version of CARLA is suitable for your needs as there are significant differences between the UE 5.5 and UE 4.26 versions of CARLA. \n\n### Recommended system\n\n* Intel i7 gen 9th - 11th / Intel i9 gen 9th - 11th / AMD Ryzen 7 / AMD Ryzen 9\n* +32 Gb RAM memory \n* NVIDIA RTX 3070/3080/3090 / NVIDIA RTX 4090 or better\n* 16 Gb or more VRAM\n* Ubuntu 22.04 or Windows 11\n\n >[!NOTE]\n> Ubuntu version 22.04 and Windows version 11 are required, the Unreal Engine 5.5 version of CARLA will not work on Ubuntu 20.04 or Windows 10 or lower. \n\n## Documentation\n\nThe [CARLA documentation](https://carla-ue5.readthedocs.io/en/latest/) is hosted on ReadTheDocs. Please see the following key links:\n\n- [Building on Linux](https://carla-ue5.readthedocs.io/en/latest/build_linux_ue5/)\n- [Building on Windows](https://carla-ue5.readthedocs.io/en/latest/build_windows_ue5/)\n- [First steps](https://carla-ue5.readthedocs.io/en/latest/tuto_first_steps/)\n- [CARLA asset catalogue](https://carla-ue5.readthedocs.io/en/latest/catalogue/)\n- [Python API reference](https://carla-ue5.readthedocs.io/en/latest/python_api/)\n- [Blueprint library](https://carla-ue5.readthedocs.io/en/latest/bp_library/)\n\n## CARLA Ecosystem\nRepositories associated with the CARLA simulation platform:\n\n* [**CARLA Autonomous Driving leaderboard**](https://leaderboard.carla.org/): Automatic platform to validate Autonomous Driving stacks\n* [**Scenario_Runner**](https://github.com/carla-simulator/scenario_runner): Engine to execute traffic scenarios in CARLA 0.9.X\n* [**ROS-bridge**](https://github.com/carla-simulator/ros-bridge): Interface to connect CARLA 0.9.X to ROS\n* [**Driving-benchmarks**](https://github.com/carla-simulator/driving-benchmarks): Benchmark tools for Autonomous Driving tasks\n* [**Conditional Imitation-Learning**](https://github.com/felipecode/coiltraine): Training and testing Conditional Imitation Learning models in CARLA\n* [**AutoWare AV stack**](https://github.com/carla-simulator/carla-autoware): Bridge to connect AutoWare AV stack to CARLA\n* [**Reinforcement-Learning**](https://github.com/carla-simulator/reinforcement-learning): Code for running Conditional Reinforcement Learning models in CARLA\n* [**RoadRunner**](https://www.mathworks.com/products/roadrunner.html): MATLAB GUI based application to create road networks in OpenDrive format \n* [**Map Editor**](https://github.com/carla-simulator/carla-map-editor): Standalone GUI application to enhance RoadRunner maps with traffic lights and traffic signs information\n\n\n**Like what you see? Star us on GitHub to support the project!**\n\nPaper\n-----\n\nIf you use CARLA, please cite our CoRL’17 paper.\n\n_CARLA: An Open Urban Driving Simulator_<br>Alexey Dosovitskiy, German Ros,\nFelipe Codevilla, Antonio Lopez, Vladlen Koltun; PMLR 78:1-16\n[[PDF](http://proceedings.mlr.press/v78/dosovitskiy17a/dosovitskiy17a.pdf)]\n[[talk](https://www.youtube.com/watch?v=xfyK03MEZ9Q&feature=youtu.be&t=2h44m30s)]\n\n\n```\n@inproceedings{Dosovitskiy17,\n  title = {{CARLA}: {An} Open Urban Driving Simulator},\n  author = {Alexey Dosovitskiy and German Ros and Felipe Codevilla and Antonio Lopez and Vladlen Koltun},\n  booktitle = {Proceedings of the 1st Annual Conference on Robot Learning},\n  pages = {1--16},\n  year = {2017}\n}\n```\n\n## Building CARLA with Unreal Engine 5.5\n--------------\n\nClone this repository locally from GitHub, specifying the *ue5-dev* branch:\n\n```sh\ngit clone -b ue5-dev https://github.com/carla-simulator/carla.git CarlaUE5\n```\n\nIn order to build CARLA, you need acces to the CARLA fork of Unreal Engine 5.5. In order to access this repository, you must first link your GitHub account to Epic Games by following [this guide](https://www.unrealengine.com/en-US/ue-on-github). You then also need to use your git credentials to authorise the download of the Unreal Engine 5.5 repository. \n\n__Building in Linux__:\n\nRun the setup script from a terminal open in the CARLA root directory:\n\n```sh\ncd CarlaUE5\n./CarlaSetup.sh --interactive\n```\n\nThe setup script will prompt you for your sudo password, in order to install the prerequisites. It will then prompt you for your GitHub credentials in order to authorise the download of the Unreal Engine repository. \n\n__Building in Linux unattended__:\n\nIf you want to run the setup script unattended, your git credentials need to be stored in an environment variable. Add your github credentials to your `.bashrc` file:\n\n```sh\nexport GIT_LOCAL_CREDENTIALS=username@github_token\n```\n\nThen run the setup script using the following command:\n\n```sh\ncd CarlaUE5\nsudo -E ./CarlaSetup.sh\n```\n\nThis will download and install Unreal Engine 5.5, install the prerequisites and build CARLA. It may take some time to complete and use a significant amount of disk space.\n\nIf you prefer to add the git credentials in the terminal, use the following command:\n\n```sh\ncd CarlaUE5\nsudo -E env GIT_LOCAL_CREDENTIALS=github_username@github_token ./CarlaSetup.sh \n```\n\n__Building in Windows__:\n\nTo build in Windows, run the batch script:\n\n```sh\ncd CarlaUE5\nCarlaSetup.bat\n```\n\nUnattended mode is currently unavailable in Windows, you will need to enter GitHub credentials or administrator privileges when prompted.\n\n## Rebuilding CARLA\n\nOnce the setup is complete, you can execute subsequent builds with the following commands in a terminal open in the CARLA root directory. In Linux, run these commands in a standard terminal. In Windows, open the x64 Native Tools Command Prompt for Visual Studio 2022.\n\n__Configure__:\n\nLinux:\n\n```sh\ncmake -G Ninja -S . -B Build --toolchain=$PWD/CMake/LinuxToolchain.cmake \\\n-DLAUNCH_ARGS=\"-prefernvidia\" -DCMAKE_BUILD_TYPE=Release -DENABLE_ROS2=ON\n```\n\nWindows:\n\n```sh\ncmake -G Ninja -S . -B Build -DCMAKE_BUILD_TYPE=Release\n```\n\n__Build__:\n\nLinux and Windows:\n\n```sh\ncmake --build Build\n```\n\n__Build and install the Python API__:\n\n\nLinux and windows:\n\n```sh\ncmake --build Build --target carla-python-api-install\n```\n\n__Launch the editor__:\n\n```sh\ncmake --build Build --target launch\n```\n\nFor more instructions on building CARLA UE5, please consult the build documentation for [Linux](https://carla-ue5.readthedocs.io/en/latest/build_linux_ue5/) or [Windows](https://carla-ue5.readthedocs.io/en/latest/build_windows_ue5/).\n\nContributing\n------------\n\nPlease take a look at our [Contribution guidelines][contriblink].\n\n[contriblink]: https://carla-ue5.readthedocs.io/en/latest/cont_contribution_guidelines/\n\nLicenses\n-------\n\n## CARLA licenses\n\nCARLA specific code is distributed under the MIT License.\n\nCARLA specific assets are distributed under the CC-BY License.\n\n## CARLA Dependency and Integration licenses\n\nUnreal Engine 5 follows its [own license terms](https://www.unrealengine.com/en-US/faq).\n\nCARLA uses some dependencies related to 3rd party integrations:\n- [PROJ](https://proj.org/), a generic coordinate transformation software which uses the [X/MIT open source license](https://proj.org/about.html#license).\n- [SQLite](https://www.sqlite.org), part of the PROJ dependencies, which is [in the public domain](https://www.sqlite.org/purchase/license).\n- [Xerces-C](https://xerces.apache.org/xerces-c/), a validating XML parser, which is made available under the [Apache Software License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html).\n- [Eigen](https://eigen.tuxfamily.org/index.php?title=Main_Page), a C++ template library for linear algebra which uses the [MPL2 license](https://www.mozilla.org/en-US/MPL/2.0/).\n\nCARLA uses the Autodesk FBX SDK for converting FBX to OBJ in the import process of maps. This step is optional, and the SDK is located [here](https://www.autodesk.com/developer-network/platform-technologies/fbx-sdk-2020-0)\n\nThis software contains Autodesk® FBX® code developed by Autodesk, Inc. Copyright 2020 Autodesk, Inc. All rights, reserved. Such code is provided \"as is\" and Autodesk, Inc. disclaims any and all warranties, whether express or implied, including without limitation the implied warranties of merchantability, fitness for a particular purpose or non-infringement of third party rights. In no event shall Autodesk, Inc. be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of such code.\"\n"
        },
        {
          "name": "Ros2Native",
          "type": "tree",
          "content": null
        },
        {
          "name": "UE5_BUILD_README.md",
          "type": "blob",
          "size": 6.966796875,
          "content": "> [!IMPORTANT]\n> This is a work in progress!! This version of CARLA is not considered a stable release. Over the following months many significant changes may be made to this branch which could break any modifications you make. We advise you to treat this branch as experimental.\n\n# Building CARLA in Linux with Unreal Engine 5.3\n\n> [!NOTE]\n> This build process is implemented and tested for Ubuntu 22.04. CARLA UE5 will not be supported for Ubuntu 20.04.\n\n## Set up the environment\n\nThis guide details how to build CARLA from source on Linux with Unreal Engine 5.3. \n\nClone the `ue5-dev` branch of CARLA on your local machine:\n\n```sh\ngit clone -b ue5-dev https://github.com/carla-simulator/carla.git CarlaUE5\n```\n\nRun the setup script with your GitHub credentials:\n> [!NOTE]\n> * This version of CARLA requires the **CARLA fork of Unreal Engine 5.3**. You need to link your GitHub account to Epic Games in order to gain permission to clone the UE repository. If you have not already linked your accounts, follow [this guide](https://www.unrealengine.com/en-US/ue4-on-github)\n\n```sh\ncd CarlaUE5\nenv GIT_LOCAL_CREDENTIALS=your_user@your_token bash -x CarlaSetup.sh\n```\n\nThe Setup.sh script installs all the required packages, including Cmake, debian packages, Python packages and Unreal Engine 5.3. It also downloads the CARLA content and builds CARLA. This script can therefore take a long time to complete. \n\n> [!NOTE]\n> * This version of CARLA requires the **CARLA fork of Unreal Engine 5.3**. You need to link your GitHub account to Epic Games in order to gain permission to clone the UE repository. If you have not already linked your accounts, follow [this guide](https://www.unrealengine.com/en-US/ue4-on-github)\n> * For using CARLA Unreal Engine 5 previous builds, **ensure CARLA_UNREAL_ENGINE_PATH environment variable is defined** pointing to the CARLA Unreal Engine 5.3 absolute path. If this variable is not defined, the Setup.sh script will download and build CARLA Unreal Engine 5 and **this takes more than 1 extra hour of build and 225Gb of disk space**.\n> * The Setup.sh script checks if there is any Python installed at the top of the PATH variable, and installs Python otherwise. **To use your own version of Python, ensure that the PATH variable is properly set for Python before running the script**.\n> * CARLA cannot be built on an external disk, Ubuntu is not giving the required read/write/execution permissions for builds.\n\n\n## Build and Run CARLA UE5\n\nThe setup script launches the following commands itself, you will need to use the following commands once you modify the code and wish to relaunch:\n\n* Configure:\n\n```sh\ncmake -G Ninja -S . -B Build --toolchain=$PWD/CMake/LinuxToolchain.cmake \\\n-DLAUNCH_ARGS=\"-prefernvidia\" -DCMAKE_BUILD_TYPE=Release -DENABLE_ROS2=ON \\\n-DBUILD_CARLA_UNREAL=ON -DCARLA_UNREAL_ENGINE_PATH=$CARLA_UNREAL_ENGINE_PATH\n```\n\n* Build CARLA:\n\n```sh\ncmake --build Build\n```\n\n* Build and install the Python API:\n\n```sh\ncmake --build Build --target carla-python-api-install\n```\n\n* Launch the editor:\n\n```sh\ncmake --build Build --target launch\n```\n\n## Build a package with CARLA UE5\n\n```sh\ncmake --build Build --target package\n```\n\nThe package will be generated in the directory `$CARLA_PATH/Build/Package`\n\n## Run the package\n\nRun the package with the following command.\n\n```sh\n./CarlaUnreal.sh\n```\n\nIf you want to run the native ROS2 interface, add the `--ros2` argument\n\n```sh\n./CarlaUnreal.sh --ros2\n```\n\nIf you want to install the Python API corresponding to the package you have built:\n\n```sh\npip3 install PythonAPI/carla/dist/carla-*.whl\n```\n\n# Building CARLA in Windowswith Unreal Engine 5.3\n\n## Set up the environment\n\nThis guide details how to build CARLA from source on Windows with Unreal Engine 5.3. \n\nClone the `ue5-dev` branch of CARLA on your local machine:\n\n```sh\ngit clone -b ue5-dev https://github.com/carla-simulator/carla.git CarlaUE5\n```\n\nRun the setup script:\n\n```sh\ncd CarlaUE5\nCarlaSetup.bat\n```\n\nThe Setup.bat script installs all the required packages, including Visual Studio 2022, Cmake, Python packages and Unreal Engine 5. It also downloads the CARLA content and builds CARLA. This batch file can therefore take a long time to complete. \n\n> [!NOTE]\n> * This version of CARLA requires the **CARLA fork of Unreal Engine 5.3**. You need to link your GitHub account to Epic Games in order to gain permission to clone the UE repository. If you have not already linked your accounts, follow [this guide](https://www.unrealengine.com/en-US/ue4-on-github)\n> * For using CARLA Unreal Engine 5 previous builds, ensure CARLA_UNREAL_ENGINE_PATH environment variable is defined pointing to the CARLA Unreal Engine 5 absolute path. If this variable is not defined, Setup.bat script will download and build CARLA Unreal Engine 5 and **this takes more than 1 extra hour of build and a 225Gb of disk space**.\n> * Setup.bat script checks if there is any Python version installed at the top of the PATH variable, and installs Python otherwise. **To use your own version of Python, ensure that the PATH variable is properly set for Python before running the script**.\n> * **Windows Developer Mode should be active**, otherwise build will fail. Please see [here](https://learn.microsoft.com/en-us/gaming/game-bar/guide/developer-mode) for instructions on how to activate Developer Mode.\n> * **CARLA cannot be built on an external disk**, Windows does not give the required read/write/execution permissions for builds.\n\n\n## Build and Run CARLA UE5\n\nThe Setup.bat file launches the following commands itself, you will need to use the following commands once you modify the code and wish to relaunch:\n\n> [!IMPORTANT]\n> Ensure CARLA_UNREAL_ENGINE_PATH environment variable is defined pointing to the CARLA Unreal Engine 5.3 absolute path. Setup.bat sets this variable, but I may not be set if another approach was followed to install the requirements. \n\n* **Configure**. Open x64 Native Tools Command Prompt for VS 2022 at the CarlaUE5 folder and runn the following command:\n\n```sh\ncmake -G Ninja -S . -B Build -DCMAKE_BUILD_TYPE=Release -DBUILD_CARLA_UNREAL=ON -DCARLA_UNREAL_ENGINE_PATH=%CARLA_UNREAL_ENGINE_PATH%\n```\n\n* **Build CARLA**. Open the x64 Native Tools Command Prompt for VS 2022 at the CarlaUE5 folder and run the following command:\n\n```sh\ncmake --build Build\n```\n\n* **Build and install the Python API**. Open the x64 Native Tools Command Prompt for VS 2022 at the CarlaUE5 folder and run the following command::\n\n```sh\ncmake --build Build --target carla-python-api-install\n```\n\n* **Launch the editor**. Open the x64 Native Tools Command Prompt for VS 2022 at the CarlaUE5 folder and run the following command:\n\n```sh\ncmake --build Build --target launch\n```\n\n## Build a package with CARLA UE5\n\n> [!IMPORTANT]\n> The package build for Carla UE5 is not yet fully tested for Windows.\n\nOpen the x64 Native Tools Command Prompt for VS 2022 at the CarlaUE5 folder and run the following command:\n\n```sh\ncmake --build Build --target package\n```\n\nThe package will be generated in the directory `Build/Package`\n\n## Run the package\n\nThe package build is not yet tested for Windows"
        },
        {
          "name": "Unreal",
          "type": "tree",
          "content": null
        },
        {
          "name": "Util",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 1.6318359375,
          "content": "site_name: CARLA Simulator UE5\nrepo_url: https://github.com/carla-simulator/carla\ndocs_dir: Docs\nedit_uri: 'edit/master/Docs/'\nextra_css: [extra.css]\nextra_javascript: [extra.js]\ntheme: readthedocs\n  \n\nnav:\n- Home: 'index.md'\n- Getting started:\n  - 'Introduction': 'start_introduction.md'\n  - 'Quick start package installation': 'start_quickstart.md'\n  - 'First steps' : 'tuto_first_steps.md'\n  - 'Building CARLA' : 'build_carla.md'\n\n- Next steps:\n  #- 'Content authoring - maps': 'tuto_content_authoring_maps.md'  \n  - 'Content authoring - vehicles': 'tuto_content_authoring_vehicles.md'  \n\n- CARLA topics:\n  - 'Foundations': 'foundations.md'\n  - 'Actors': 'core_actors.md'\n  - 'Maps': 'core_map.md'\n  - 'Sensors and data': 'core_sensors.md'\n  - 'Traffic' : 'ts_traffic_simulation_overview.md'\n\n- Resources:\n  - 'Python API': 'python_api.md'\n  - 'Catalogue': 'catalogue.md'  \n  - 'C++ reference': 'ref_cpp.md'\n  - 'Blueprint library': 'bp_library.md'  \n  - 'Tutorials': 'tutorials.md'\n  #- 'Extended documentation': 'ext_docs.md'\n\n- CARLA Ecosystem:\n  - 'MathWorks': 'large_map_roadrunner.md'\n  # - 'ASAM OpenDRIVE': 'adv_opendrive.md'\n  - 'ROS2': 'ros2_native.md'\n  - 'Scenic': 'tuto_G_scenic.md'\n  - 'SYNKROTRON': 'ecosys_synkrotron.md'\n  - 'InvertedAI': 'inverted_ai.md'\n\n- Contributing:\n  - 'Guidelines': 'cont_contribution_guidelines.md' \n  - 'Coding standards': 'cont_coding_standard.md'\n  - 'Documentation standard': 'cont_doc_standard.md'\n  - '': ''\n \nmarkdown_extensions:\n  - admonition \n\ntheme:\n  name: 'readthedocs'\n  logo: img/logos/carla_ue5_logo.png\n  palette:\n        # Dark mode\n    - scheme: slate\n      primary: blue\n      accent: blue\n      toggle:\n \n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0888671875,
          "content": "psutil\nrequests\nscikit-build-core\nwheel\nnumpy<2.0,>=1.24.4\nsetuptools>=47.3.1\nbuild\npygame\n"
        },
        {
          "name": "wheel_config.ini",
          "type": "blob",
          "size": 0.0849609375,
          "content": "[G29 Racing Wheel]\nsteering_wheel = 0\nthrottle = 2\nbrake = 3\nreverse = 5\nhandbrake = 4\n"
        }
      ]
    }
  ]
}