{
  "metadata": {
    "timestamp": 1736566387439,
    "page": 148,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Z3Prover/z3",
      "stars": 10557,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0380859375,
          "content": "**/*.swp\n**/*.pyc\n.git\n**/*.Dockerfile\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.134765625,
          "content": "# Set default behaviour, in case users don't have core.autocrlf set.\n* text=auto\n\nsrc/api/dotnet/Properties/AssemblyInfo.cs text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.7412109375,
          "content": "*~\nrebase.cmd\n*.pyc\n*.pyo\n# Ignore callgrind files\ncallgrind.out.*\n# .hpp files are automatically generated\n*.hpp\n.env\n.z3-trace\n.env\n.genaiscript\npackage-lock.json\npackage.json\nnode_modules\n# OCaml generated files\n*.a\n*.o\n*.cma\n*.cmo\n*.cmi\n*.cmx\n*.byte\n*.cmxa\nocamlz3\n# Java generated files\n*.class\n*.jar\n# Emacs temp files\n\\#*\\#\n# Directories with generated code and documentation\nnode_modules/*\n.genaiscript/*\nrelease/*\nbuild/*\ntrace/*\nbuild-dist/*\ndist/*\nsrc/out/*\ndoc/html/*\n# GTAGS generated files\nsrc/GPATH\nsrc/GRTAGS\nsrc/GSYMS\nsrc/GTAGS\nsrc/HTML/*\n# CSCOPE files\nsrc/cscope.in.out\nsrc/cscope.out\nsrc/cscope.po.out\nncscope.out\n# CEDET files\n.cproject\n.project\n# Commonly used directories for code\nbld_dbg/*\nbld_rel/*\nbld_dbg_x64/*\nbld_rel_x64/*\n.vscode\n*build*/**\n# Auto generated files.\nconfig.log\nconfig.status\ninstall_tactic.cpp\nmem_initializer.cpp\ngparams_register_modules.cpp\nscripts/config-debug.mk\nscripts/config-release.mk\nsrc/api/api_commands.cpp\nsrc/api/api_log_macros.h\nsrc/api/api_log_macros.cpp\nsrc/api/dll/api_dll.def\nsrc/api/dotnet/Enumerations.cs\nsrc/api/dotnet/Native.cs\nsrc/api/dotnet/Properties/AssemblyInfo.cs\nsrc/api/dotnet/Microsoft.Z3.xml\nsrc/api/python/z3/z3consts.py\nsrc/api/python/z3/z3core.py\nsrc/ast/pattern/database.h\nsrc/util/version.h\nsrc/util/z3_version.h\nsrc/api/java/Native.cpp\nsrc/api/java/Native.java\nsrc/api/java/enumerations/*.java\nsrc/api/ml/z3native_stubs.c\nsrc/api/ml/z3native.ml\nsrc/api/ml/z3enums.ml\nsrc/api/ml/z3native.mli\nsrc/api/ml/z3enums.mli\nsrc/api/ml/z3.mllib\nsrc/api/js/node_modules/\nsrc/api/js/build/\nsrc/api/js/**/*.__GENERATED__.*\ndebug/*\nexamples/python/z3\nexamples/python/libz3.dll\n\nout/**\n*.bak\ndoc/api\ndoc/code\n.vs\nexamples/**/obj\nCMakeSettings.json\n# Editor temp files\n*.swp\n.DS_Store\ndbg/**\n*.wsp\nCppProperties.json\n"
        },
        {
          "name": ".gitignore.genai",
          "type": "blob",
          "size": 0.052734375,
          "content": "**/genaiscript.d.ts\n**/package-lock.json\n**/yarn.lock\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 25.322265625,
          "content": "# Enforce some CMake policies\ncmake_minimum_required(VERSION 3.16)\n\nset(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/cxx_compiler_flags_overrides.cmake\")\nproject(Z3 VERSION 4.13.4.0 LANGUAGES CXX)\n\n################################################################################\n# Project version\n################################################################################\nset(Z3_FULL_VERSION_STR \"${Z3_VERSION}\") # Note this might be modified\nmessage(STATUS \"Z3 version ${Z3_VERSION}\")\n\n################################################################################\n# Message for polluted source tree sanity checks\n################################################################################\nset(z3_polluted_tree_msg\n  \" should not exist and is polluting the source tree.\"\n  \" It is likely that this file came from the Python build system which\"\n  \" generates files inside the source tree. This is bad practice and the CMake\"\n  \" build system is setup to make sure that the source tree is clean during\"\n  \" its configure step. If you are using git you can remove all untracked files\"\n  \" using ``git clean -fx``. Be careful when doing this. You should probably use\"\n  \" this with ``-n`` first to check which file(s) would be removed.\"\n)\n\n################################################################################\n# Sanity check - Disallow building in source\n################################################################################\nif (PROJECT_SOURCE_DIR STREQUAL PROJECT_BINARY_DIR)\n  message(FATAL_ERROR \"In source builds are not allowed. You should invoke \"\n          \"CMake from a different directory.\")\nendif()\n\n################################################################################\n# Add our CMake module directory to the list of module search directories\n################################################################################\nlist(APPEND CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake/modules\")\n\n################################################################################\n# Handle git hash and description\n################################################################################\ninclude(${PROJECT_SOURCE_DIR}/cmake/git_utils.cmake)\nmacro(disable_git_describe)\n  if(Z3_INCLUDE_GIT_DESCRIBE)\n    message(WARNING \"Disabling Z3_INCLUDE_GIT_DESCRIBE\")\n    set(Z3_INCLUDE_GIT_DESCRIBE OFF CACHE BOOL \"Include git describe output in version output\" FORCE)\n  endif()\nendmacro()\nmacro(disable_git_hash)\n  if(Z3_INCLUDE_GIT_HASH)\n    message(WARNING \"Disabling Z3_INCLUDE_GIT_HASH\")\n    set(Z3_INCLUDE_GIT_HASH OFF CACHE BOOL \"Include git hash in version output\" FORCE)\n  endif()\nendmacro()\noption(Z3_INCLUDE_GIT_HASH \"Include git hash in version output\" ON)\noption(Z3_INCLUDE_GIT_DESCRIBE \"Include git describe output in version output\" ON)\n\nset(GIT_DIR \"${PROJECT_SOURCE_DIR}/.git\")\nif ((Z3_INCLUDE_GIT_HASH OR Z3_INCLUDE_GIT_HASH) AND EXISTS \"${GIT_DIR}\")\n  # Try to make CMake configure depend on the current git HEAD so that\n  # a re-configure is triggered when the HEAD changes.\n  add_git_dir_dependency(\"${GIT_DIR}\" ADD_GIT_DEP_SUCCESS)\n  if (ADD_GIT_DEP_SUCCESS)\n    if (Z3_INCLUDE_GIT_HASH)\n      get_git_head_hash(\"${GIT_DIR}\" Z3GITHASH)\n      if (NOT Z3GITHASH)\n        message(WARNING \"Failed to get Git hash\")\n        disable_git_hash()\n      else()\n        message(STATUS \"Using Git hash in version output: ${Z3GITHASH}\")\n        # This mimics the behaviour of the old build system.\n        set(Z3_FULL_VERSION_STR \"${Z3_FULL_VERSION_STR} ${Z3GITHASH}\")\n      endif()\n    else()\n      message(STATUS \"Not using Git hash in version output\")\n    endif()\n    if (Z3_INCLUDE_GIT_DESCRIBE)\n      get_git_head_describe(\"${GIT_DIR}\" Z3_GIT_DESCRIPTION)\n      if (NOT Z3_GIT_DESCRIPTION)\n        message(WARNING \"Failed to get Git description\")\n        disable_git_describe()\n      endif()\n      message(STATUS \"Using Git description in version output: ${Z3_GIT_DESCRIPTION}\")\n      # This mimics the behaviour of the old build system.\n      set(Z3_FULL_VERSION_STR \"${Z3_FULL_VERSION_STR} ${Z3_GIT_DESCRIPTION}\")\n    else()\n      message(STATUS \"Not including git description in version\")\n    endif()\n  else()\n    message(WARNING \"Failed to add git dependency.\")\n    disable_git_describe()\n    disable_git_hash()\n  endif()\nelse()\n  message(STATUS \"Failed to find git directory.\")\n  disable_git_describe()\n  disable_git_hash()\nendif()\nif(NOT Z3_INCLUDE_GIT_HASH)\n  unset(Z3GITHASH) # Used in configure_file()\nendif()\n\n################################################################################\n# Useful CMake functions/Macros\n################################################################################\ninclude(CheckCXXSourceCompiles)\ninclude(CMakeDependentOption)\n\n################################################################################\n# Compiler flags for Z3 components.\n# Subsequent commands will append to this\n################################################################################\nset(Z3_COMPONENT_CXX_DEFINES \"\")\nset(Z3_COMPONENT_CXX_FLAGS \"\")\nset(Z3_COMPONENT_EXTRA_INCLUDE_DIRS \"\")\nset(Z3_DEPENDENT_LIBS \"\")\nset(Z3_DEPENDENT_EXTRA_CXX_LINK_FLAGS \"\")\n\n################################################################################\n# Build type\n################################################################################\nmessage(STATUS \"CMake generator: ${CMAKE_GENERATOR}\")\nset(available_build_types Debug Release RelWithDebInfo MinSizeRel)\nif (DEFINED CMAKE_CONFIGURATION_TYPES)\n  # Multi-configuration build (e.g. Visual Studio and Xcode). Here\n  # CMAKE_BUILD_TYPE doesn't matter\n  message(STATUS \"Available configurations: ${CMAKE_CONFIGURATION_TYPES}\")\nelse()\n  # Single configuration generator (e.g. Unix Makefiles, Ninja)\n  if(NOT CMAKE_BUILD_TYPE)\n    message(STATUS \"CMAKE_BUILD_TYPE is not set. Setting default\")\n    message(STATUS \"The available build types are: ${available_build_types}\")\n    set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING\n        \"Options are ${available_build_types}\"\n        FORCE)\n    # Provide drop down menu options in cmake-gui\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${available_build_types})\n  endif()\n  message(STATUS \"Build type: ${CMAKE_BUILD_TYPE}\")\n\n  # Check the selected build type is valid\n  list(FIND available_build_types \"${CMAKE_BUILD_TYPE}\" _build_type_index)\n  if (\"${_build_type_index}\" EQUAL \"-1\")\n    message(FATAL_ERROR \"\\\"${CMAKE_BUILD_TYPE}\\\" is an invalid build type.\\n\"\n      \"Use one of the following build types ${available_build_types}\")\n  endif()\nendif()\n\n# CMAKE_BUILD_TYPE has no meaning for multi-configuration generators\n# (e.g. Visual Studio) so use generator expressions instead to add\n# the right definitions when doing a particular build type.\n#\n# Note for some reason we have to leave off ``-D`` here otherwise\n# we get ``-D-DZ3DEBUG`` passed to the compiler\nlist(APPEND Z3_COMPONENT_CXX_DEFINES $<$<CONFIG:Debug>:Z3DEBUG>)\nlist(APPEND Z3_COMPONENT_CXX_DEFINES $<$<CONFIG:Release>:_EXTERNAL_RELEASE>)\nlist(APPEND Z3_COMPONENT_CXX_DEFINES $<$<CONFIG:RelWithDebInfo>:_EXTERNAL_RELEASE>)\n\n################################################################################\n# Find Python\n################################################################################\nfind_package(Python3 REQUIRED COMPONENTS Interpreter)\nmessage(STATUS \"Python3_EXECUTABLE: ${Python3_EXECUTABLE}\")\n\n################################################################################\n# Target architecture detection\n################################################################################\ninclude(${PROJECT_SOURCE_DIR}/cmake/target_arch_detect.cmake)\ndetect_target_architecture(TARGET_ARCHITECTURE)\nmessage(STATUS \"Detected target architecture: ${TARGET_ARCHITECTURE}\")\n\n\n################################################################################\n# Function for detecting C++ compiler flag support\n################################################################################\ninclude(${PROJECT_SOURCE_DIR}/cmake/z3_add_cxx_flag.cmake)\n\n################################################################################\n# C++ language version\n################################################################################\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n################################################################################\n# Platform detection\n################################################################################\nif (CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  if (TARGET_ARCHITECTURE STREQUAL \"arm64\")\n    set(CMAKE_OSX_ARCHITECTURES \"arm64\")\n  endif()\nelseif (WIN32)\n  message(STATUS \"Platform: Windows\")\n  list(APPEND Z3_COMPONENT_CXX_DEFINES \"-D_WINDOWS\")\n  # workaround for #7420\n  list(APPEND Z3_COMPONENT_CXX_DEFINES \"-D_DISABLE_CONSTEXPR_MUTEX_CONSTRUCTOR\")  \nelseif (EMSCRIPTEN)\n  message(STATUS \"Platform: Emscripten\")\n  list(APPEND Z3_DEPENDENT_EXTRA_CXX_LINK_FLAGS\n    \"-Os\"\n    \"-s ALLOW_MEMORY_GROWTH=1\"\n    \"-s ASSERTIONS=0\"\n    \"-s DISABLE_EXCEPTION_CATCHING=0\"\n    \"-s ERROR_ON_UNDEFINED_SYMBOLS=1\"\n  )\nendif()\n\nlist(APPEND Z3_COMPONENT_EXTRA_INCLUDE_DIRS\n  \"${PROJECT_BINARY_DIR}/src\"\n  \"${PROJECT_SOURCE_DIR}/src\"\n)\n\n################################################################################\n# GNU multiple precision library support\n################################################################################\noption(Z3_USE_LIB_GMP \"Use GNU Multiple Precision Library\" OFF)\nif (Z3_USE_LIB_GMP)\n  # Because this is off by default we will make the configure fail if libgmp\n  # can't be found\n  find_package(GMP REQUIRED)\n  message(STATUS \"Using libgmp\")\n  list(APPEND Z3_DEPENDENT_LIBS GMP::GMP)\n  list(APPEND Z3_COMPONENT_CXX_DEFINES \"-D_MP_GMP\")\nelse()\n  list(APPEND Z3_COMPONENT_CXX_DEFINES \"-D_MP_INTERNAL\")\n  message(STATUS \"Not using libgmp\")\nendif()\n\n\n################################################################################\n# API Log sync\n################################################################################\noption(Z3_API_LOG_SYNC\n  \"Use locking when logging Z3 API calls (experimental)\"\n  OFF\n)\nif (Z3_API_LOG_SYNC)\n  list(APPEND Z3_COMPONENT_CXX_DEFINES \"-DZ3_LOG_SYNC\")\n  message(STATUS \"Using Z3_API_LOG_SYNC\")\nelse()\n  message(STATUS \"Not using Z3_API_LOG_SYNC\")\nendif()\n\n################################################################################\n# Thread safe or not?\n################################################################################\noption(Z3_SINGLE_THREADED\n  \"Non-thread-safe build\"\n  OFF\n)\nif (Z3_SINGLE_THREADED)\n  list(APPEND Z3_COMPONENT_CXX_DEFINES \"-DSINGLE_THREAD\")\n  message(STATUS \"Non-thread-safe build\")\nelse()\n  message(STATUS \"Thread-safe build\")\nendif()\n\n\n################################################################################\n# Use polling based timeout. This avoids spawning threads for timer tasks\n################################################################################\noption(Z3_POLLING_TIMER\n  \"Use polling based timeout checks\"\n  OFF\n)\nif (Z3_POLLING_TIMER)\n  list(APPEND Z3_COMPONENT_CXX_DEFINES \"-DPOLLING_TIMER\")\n  message(STATUS \"Polling based timer\")\nendif()\n\n\n\n################################################################################\n# FP math\n################################################################################\n# FIXME: Support ARM \"-mfpu=vfp -mfloat-abi=hard\"\nif ((TARGET_ARCHITECTURE STREQUAL \"x86_64\") OR (TARGET_ARCHITECTURE STREQUAL \"i686\"))\n  if ((CMAKE_CXX_COMPILER_ID MATCHES \"GNU\") OR (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\") OR (CMAKE_CXX_COMPILER_ID MATCHES \"Intel\"))\n    set(SSE_FLAGS \"-mfpmath=sse\" \"-msse\" \"-msse2\")\n  elseif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    set(SSE_FLAGS \"/arch:SSE2\")\n  else()\n    message(FATAL_ERROR \"Unknown compiler ${CMAKE_CXX_COMPILER_ID}\")\n  endif()\n  CHECK_CXX_COMPILER_FLAG(\"${SSE_FLAGS}\" HAS_SSE2)\n  if (HAS_SSE2)\n    list(APPEND Z3_COMPONENT_CXX_FLAGS ${SSE_FLAGS})\n  endif()\n  unset(SSE_FLAGS)\nendif()\n\n################################################################################\n# Threading support\n################################################################################\nset(THREADS_PREFER_PTHREAD_FLAG TRUE)\nfind_package(Threads)\nlist(APPEND Z3_DEPENDENT_LIBS Threads::Threads)\n\n################################################################################\n# Compiler warnings\n################################################################################\ninclude(${PROJECT_SOURCE_DIR}/cmake/compiler_warnings.cmake)\n\n################################################################################\n# Save Clang optimization records\n################################################################################\noption(Z3_SAVE_CLANG_OPTIMIZATION_RECORDS \"Enable saving Clang optimization records.\" OFF)\n\nif (Z3_SAVE_CLANG_OPTIMIZATION_RECORDS)\n  z3_add_cxx_flag(\"-fsave-optimization-record\" REQUIRED)\nendif()\n\n################################################################################\n# If using Ninja, force color output for Clang (and gcc, disabled to check build).\n################################################################################\nif (UNIX AND CMAKE_GENERATOR STREQUAL \"Ninja\")\n  if (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fcolor-diagnostics\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fcolor-diagnostics\")\n  endif()\n#  if (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n#    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fdiagnostics-color\")\n#    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fdiagnostics-color\")\n#  endif()\nendif()\n\n################################################################################\n# Option to control what type of library we build\n################################################################################\noption(Z3_BUILD_LIBZ3_SHARED \"Build libz3 as a shared library if true, otherwise build a static library\" ON)\noption(Z3_BUILD_LIBZ3_MSVC_STATIC \"Build libz3 as a statically-linked runtime library\"                   OFF)\n\n\n################################################################################\n# Tracing\n################################################################################\noption(Z3_ENABLE_TRACING_FOR_NON_DEBUG \"Enable tracing in non-debug builds.\" OFF)\nif (Z3_ENABLE_TRACING_FOR_NON_DEBUG)\n  list(APPEND Z3_COMPONENT_CXX_DEFINES \"-D_TRACE\")\nelse()\n  # Tracing is always enabled in debug builds\n  list(APPEND Z3_COMPONENT_CXX_DEFINES $<$<CONFIG:Debug>:_TRACE>)\nendif()\n\n################################################################################\n# Link time optimization\n################################################################################\ninclude(${PROJECT_SOURCE_DIR}/cmake/compiler_lto.cmake)\n\n################################################################################\n# Control flow integrity\n################################################################################\noption(Z3_ENABLE_CFI \"Enable control flow integrity checking\" OFF)\nif (Z3_ENABLE_CFI)\n  set(build_types_with_cfi \"RELEASE\" \"RELWITHDEBINFO\")\n  if (NOT Z3_LINK_TIME_OPTIMIZATION)\n    message(FATAL_ERROR \"Cannot enable control flow integrity checking without link-time optimization.\"\n      \"You should set Z3_LINK_TIME_OPTIMIZATION to ON or Z3_ENABLE_CFI to OFF.\")\n  endif()\n  if (DEFINED CMAKE_CONFIGURATION_TYPES)\n    # Multi configuration generator\n    message(STATUS \"Note CFI is only enabled for the following configurations: ${build_types_with_cfi}\")\n    # No need for else because this is the same as the set that LTO requires.\n  endif()\n  if (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n    z3_add_cxx_flag(\"-fsanitize=cfi\" REQUIRED)\n    z3_add_cxx_flag(\"-fsanitize-cfi-cross-dso\" REQUIRED)\n  elseif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    z3_add_cxx_flag(\"/guard:cf\" REQUIRED)\n    message(STATUS \"Enabling CFI for MSVC\")\n    foreach (_build_type ${build_types_with_cfi})\n      message(STATUS \"Enabling CFI for MSVC\")\n      string(APPEND CMAKE_EXE_LINKER_FLAGS_${_build_type} \" /GUARD:CF\")\n      string(APPEND CMAKE_SHARED_LINKER_FLAGS_${_build_type} \" /GUARD:CF\")\n    endforeach()\n  else()\n    message(FATAL_ERROR \"Can't enable control flow integrity for compiler \\\"${CMAKE_CXX_COMPILER_ID}\\\".\"\n      \"You should set Z3_ENABLE_CFI to OFF or use Clang or MSVC to compile.\")\n  endif()\nendif()\n\n################################################################################\n# MSVC specific flags inherited from old build system\n################################################################################\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n  include(${PROJECT_SOURCE_DIR}/cmake/msvc_legacy_quirks.cmake)\nendif()\n\n################################################################################\n# Pass /RELEASE to the linker so that checksums in PE files are calculated.\n################################################################################\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n  string(APPEND CMAKE_EXE_LINKER_FLAGS \" /RELEASE\")\n  string(APPEND CMAKE_SHARED_LINKER_FLAGS \" /RELEASE\")\nendif()\n\n################################################################################\n# Check atomic linking as needed\n################################################################################\ninclude(${PROJECT_SOURCE_DIR}/cmake/check_link_atomic.cmake)\n\n################################################################################\n# Report default CMake flags\n################################################################################\n# This is mainly for debugging.\nmessage(STATUS \"CMAKE_CXX_FLAGS: \\\"${CMAKE_CXX_FLAGS}\\\"\")\nmessage(STATUS \"CMAKE_EXE_LINKER_FLAGS: \\\"${CMAKE_EXE_LINKER_FLAGS}\\\"\")\nmessage(STATUS \"CMAKE_STATIC_LINKER_FLAGS: \\\"${CMAKE_STATIC_LINKER_FLAGS}\\\"\")\nmessage(STATUS \"CMAKE_SHARED_LINKER_FLAGS: \\\"${CMAKE_SHARED_LINKER_FLAGS}\\\"\")\nif (DEFINED CMAKE_CONFIGURATION_TYPES)\n  # Multi configuration generator\n  string(TOUPPER \"${available_build_types}\" build_types_to_report)\nelse()\n  # Single configuration generator\n  string(TOUPPER \"${CMAKE_BUILD_TYPE}\" build_types_to_report)\nendif()\nforeach (_build_type ${build_types_to_report})\n  message(STATUS \"CMAKE_CXX_FLAGS_${_build_type}: \\\"${CMAKE_CXX_FLAGS_${_build_type}}\\\"\")\n  message(STATUS \"CMAKE_EXE_LINKER_FLAGS_${_build_type}: \\\"${CMAKE_EXE_LINKER_FLAGS_${_build_type}}\\\"\")\n  message(STATUS \"CMAKE_SHARED_LINKER_FLAGS_${_build_type}: \\\"${CMAKE_SHARED_LINKER_FLAGS_${_build_type}}\\\"\")\n  message(STATUS \"CMAKE_STATIC_LINKER_FLAGS_${_build_type}: \\\"${CMAKE_STATIC_LINKER_FLAGS_${_build_type}}\\\"\")\nendforeach()\n\n################################################################################\n# Report Z3_COMPONENT flags\n################################################################################\nmessage(STATUS \"Z3_COMPONENT_CXX_DEFINES: ${Z3_COMPONENT_CXX_DEFINES}\")\nmessage(STATUS \"Z3_COMPONENT_CXX_FLAGS: ${Z3_COMPONENT_CXX_FLAGS}\")\nmessage(STATUS \"Z3_DEPENDENT_LIBS: ${Z3_DEPENDENT_LIBS}\")\nmessage(STATUS \"Z3_COMPONENT_EXTRA_INCLUDE_DIRS: ${Z3_COMPONENT_EXTRA_INCLUDE_DIRS}\")\nmessage(STATUS \"Z3_DEPENDENT_EXTRA_CXX_LINK_FLAGS: ${Z3_DEPENDENT_EXTRA_CXX_LINK_FLAGS}\")\n\n################################################################################\n# Z3 installation locations\n################################################################################\ninclude(GNUInstallDirs)\nset(CMAKE_INSTALL_PKGCONFIGDIR\n  \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\"\n  CACHE\n  PATH\n  \"Directory to install pkgconfig files\"\n)\n\nset(CMAKE_INSTALL_Z3_CMAKE_PACKAGE_DIR\n  \"${CMAKE_INSTALL_LIBDIR}/cmake/z3\"\n  CACHE\n  PATH\n  \"Directory to install Z3 CMake package files\"\n)\nmessage(STATUS \"CMAKE_INSTALL_LIBDIR: \\\"${CMAKE_INSTALL_LIBDIR}\\\"\")\nmessage(STATUS \"CMAKE_INSTALL_BINDIR: \\\"${CMAKE_INSTALL_BINDIR}\\\"\")\nmessage(STATUS \"CMAKE_INSTALL_INCLUDEDIR: \\\"${CMAKE_INSTALL_INCLUDEDIR}\\\"\")\nmessage(STATUS \"CMAKE_INSTALL_PKGCONFIGDIR: \\\"${CMAKE_INSTALL_PKGCONFIGDIR}\\\"\")\nmessage(STATUS \"CMAKE_INSTALL_Z3_CMAKE_PACKAGE_DIR: \\\"${CMAKE_INSTALL_Z3_CMAKE_PACKAGE_DIR}\\\"\")\n\n################################################################################\n# Uninstall rule\n################################################################################\nconfigure_file(\n  \"${PROJECT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"\n  @ONLY\n)\n\n# Target needs to be declared before the components so that they can add\n# dependencies to this target so they can run their own custom uninstall rules.\nadd_custom_target(uninstall\n  COMMAND\n  \"${CMAKE_COMMAND}\" -P \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"\n  COMMENT \"Uninstalling...\"\n  USES_TERMINAL\n  VERBATIM\n)\n\n################################################################################\n# CMake build file locations\n################################################################################\n# To mimic the python build system output these into the root of the build\n# directory\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}\")\n\n################################################################################\n# Extra dependencies for build rules that use the Python infrastructure to\n# generate files used for Z3's build. Changes to these files will trigger\n# a rebuild of all the generated files.\n################################################################################\n# Note: ``update_api.py`` is deliberately not here because it is not used\n# to generate every generated file. The targets that need it list it explicitly.\nset(Z3_GENERATED_FILE_EXTRA_DEPENDENCIES\n  \"${PROJECT_SOURCE_DIR}/scripts/mk_genfile_common.py\"\n)\n\n################################################################################\n# Z3 components, library and executables\n################################################################################\ninclude(${PROJECT_SOURCE_DIR}/cmake/z3_add_component.cmake)\ninclude(${PROJECT_SOURCE_DIR}/cmake/z3_append_linker_flag_list_to_target.cmake)\nadd_subdirectory(src)\n\n################################################################################\n# Create `Z3Config.cmake` and related files for the build tree so clients can\n# use Z3 via CMake.\n################################################################################\ninclude(CMakePackageConfigHelpers)\nexport(EXPORT Z3_EXPORTED_TARGETS\n   NAMESPACE z3::\n   FILE \"${PROJECT_BINARY_DIR}/Z3Targets.cmake\"\n)\nset(Z3_FIRST_PACKAGE_INCLUDE_DIR \"${PROJECT_BINARY_DIR}/src/api\")\nset(Z3_SECOND_PACKAGE_INCLUDE_DIR \"${PROJECT_SOURCE_DIR}/src/api\")\nset(Z3_CXX_PACKAGE_INCLUDE_DIR \"${PROJECT_SOURCE_DIR}/src/api/c++\")\nset(AUTO_GEN_MSG \"Automatically generated. DO NOT EDIT\")\nset(CONFIG_FILE_TYPE \"build tree\")\nconfigure_package_config_file(\"${PROJECT_SOURCE_DIR}/cmake/Z3Config.cmake.in\"\n  \"Z3Config.cmake\"\n  INSTALL_DESTINATION \"${PROJECT_BINARY_DIR}\"\n  PATH_VARS\n    Z3_FIRST_PACKAGE_INCLUDE_DIR\n    Z3_SECOND_PACKAGE_INCLUDE_DIR\n    Z3_CXX_PACKAGE_INCLUDE_DIR\n)\nunset(Z3_FIRST_PACKAGE_INCLUDE_DIR)\nunset(Z3_SECOND_PACKAGE_INCLUDE_DIR)\nunset(Z3_CXX_PACKAGE_INCLUDE_DIR)\nunset(AUTO_GEN_MSG)\nunset(CONFIG_FILE_TYPE)\n\nwrite_basic_package_version_file(\"${PROJECT_BINARY_DIR}/Z3ConfigVersion.cmake\"\n  COMPATIBILITY SameMajorVersion\n)\n\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/z3.pc.cmake.in\"\n\t\"${CMAKE_CURRENT_BINARY_DIR}/z3.pc\" @ONLY)\n\n################################################################################\n# Create `Z3Config.cmake` and related files for install tree so clients can use\n# Z3 via CMake.\n################################################################################\ninstall(EXPORT\n  Z3_EXPORTED_TARGETS\n  FILE \"Z3Targets.cmake\"\n  NAMESPACE z3::\n  DESTINATION \"${CMAKE_INSTALL_Z3_CMAKE_PACKAGE_DIR}\"\n)\nset(Z3_INSTALL_TREE_CMAKE_CONFIG_FILE \"${PROJECT_BINARY_DIR}/cmake/Z3Config.cmake\")\nset(Z3_FIRST_PACKAGE_INCLUDE_DIR \"${CMAKE_INSTALL_INCLUDEDIR}\")\nset(Z3_SECOND_INCLUDE_DIR \"\")\nset(Z3_CXX_PACKAGE_INCLUDE_DIR \"\")\nset(AUTO_GEN_MSG \"Automatically generated. DO NOT EDIT\")\nset(CONFIG_FILE_TYPE \"install tree\")\n# We use `configure_package_config_file()` to try and create CMake files\n# that are re-locatable so that it doesn't matter if the files aren't placed\n# in the original install prefix.\nconfigure_package_config_file(\"${PROJECT_SOURCE_DIR}/cmake/Z3Config.cmake.in\"\n  \"${Z3_INSTALL_TREE_CMAKE_CONFIG_FILE}\"\n  INSTALL_DESTINATION \"${CMAKE_INSTALL_Z3_CMAKE_PACKAGE_DIR}\"\n  PATH_VARS Z3_FIRST_PACKAGE_INCLUDE_DIR\n)\nunset(Z3_FIRST_PACKAGE_INCLUDE_DIR)\nunset(Z3_SECOND_PACKAGE_INCLUDE_DIR)\nunset(Z3_CXX_PACKAGE_INCLUDE_DIR)\nunset(AUTO_GEN_MSG)\nunset(CONFIG_FILE_TYPE)\n\n# Add install rule to install ${Z3_INSTALL_TREE_CMAKE_CONFIG_FILE}\ninstall(\n  FILES \"${Z3_INSTALL_TREE_CMAKE_CONFIG_FILE}\"\n  DESTINATION \"${CMAKE_INSTALL_Z3_CMAKE_PACKAGE_DIR}\"\n)\n\n# Add install rule to install ${PROJECT_BINARY_DIR}/Z3ConfigVersion.cmake\ninstall(\n  FILES \"${PROJECT_BINARY_DIR}/Z3ConfigVersion.cmake\"\n  DESTINATION \"${CMAKE_INSTALL_Z3_CMAKE_PACKAGE_DIR}\"\n)\n\n# Add install rule to install ${PROJECT_BINARY_DIR}/z3.pc\ninstall(\n  FILES \"${PROJECT_BINARY_DIR}/z3.pc\"\n  DESTINATION \"${CMAKE_INSTALL_PKGCONFIGDIR}\"\n)\n\n################################################################################\n# Examples\n################################################################################\ncmake_dependent_option(Z3_ENABLE_EXAMPLE_TARGETS\n    \"Build Z3 api examples\" ON\n    \"CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR\" OFF)\nif (Z3_ENABLE_EXAMPLE_TARGETS)\n  add_subdirectory(examples)\nendif()\n\n################################################################################\n# Documentation\n################################################################################\noption(Z3_BUILD_DOCUMENTATION \"Build API documentation\" OFF)\nif (Z3_BUILD_DOCUMENTATION)\n  message(STATUS \"Building documentation enabled\")\n  add_subdirectory(doc)\nelse()\n  message(STATUS \"Building documentation disabled\")\nendif()\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0703125,
          "content": "Z3\nCopyright (c) Microsoft Corporation\nAll rights reserved. \nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README-CMake.md",
          "type": "blob",
          "size": 19.1796875,
          "content": "# Z3's CMake build system\n\n[CMake](https://cmake.org/) is a \"meta build system\" that reads a description\nof the project written in the ``CMakeLists.txt`` files and emits a build\nsystem for that project of your choice using one of CMake's \"generators\".\nThis allows CMake to support many different platforms and build tools.\nYou can run ``cmake --help`` to see the list of supported \"generators\"\non your platform. Example generators include \"UNIX Makefiles\" and \"Visual Studio\n12 2013\".\n\n## Getting started\n\n### Fixing a polluted source tree\n\nIf you have never used the python build system you can skip this step.\n\nThe existing Python build system creates generated source files in\nthe source tree. The CMake build system will refuse to work if it\ndetects this so you need to clean your source tree first.\n\nTo do this run the following in the root of the repository\n\n```\ngit clean -nx src\n```\n\nThis will list everything that will be removed. If you are happy\nwith this then run.\n\n```\ngit clean -fx src\n```\n\nwhich will remove the generated source files.\n\n### Unix Makefiles\n\nRun the following in the top level directory of the Z3 repository.\n\n```\nmkdir build\ncd build\ncmake -G \"Unix Makefiles\" ../\nmake -j4 # Replace 4 with an appropriate number\n```\n\nNote that on some platforms \"Unix Makefiles\" is the default generator so on those\nplatforms you don't need to pass ``-G \"Unix Makefiles\"`` command line option to\n``cmake``.\n\nNote there is nothing special about the ``build`` directory name here. You can call\nit whatever you like.\n\nNote the \"Unix Makefile\" generator is a \"single\" configuration generator which\nmeans you pick the build type (e.g. ``Debug``, ``Release``) when you invoke CMake.\nYou can set the build type by passing it to the ``cmake`` invocation like so:\n\n```\ncmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release ../\n```\n\nSee the section on \"Build Types\" for the different CMake build types.\n\nIf you wish to use a different compiler set the CXX and CC environment variables\npassed to cmake. This must be done at the very first invocation to ``cmake``\nin the build directory because once configuration has happened the compiler\nis fixed. If you want to use a different compiler to the one you have already\nconfigured you either need to make a new build directory or delete the contents\nof the current build directory and start again.\n\nFor example to use clang the ``cmake `` line would be\n\n```\nCC=clang CXX=clang++ cmake ../\n```\n\nNote that CMake build will detect the target architecture that compiler is set up\nto build for and the generated build system will build for that architecture.\nIf there is a way to tell your compiler to build for a different architecture via\ncompiler flags then you can set the ``CFLAGS`` and ``CXXFLAGS`` environment variables\nto have the build target that architecture.\n\nFor example if you are on a x86_64 machine and you want to do a 32-bit build and have\na multilib version of GCC you can run ``cmake`` like this\n\n```\nCFLAGS=\"-m32\" CXXFLAGS=\"-m32\" CC=gcc CXX=g++ cmake ../\n```\n\nNote like with the ``CC`` and ``CXX`` flags this must be done on the very first invocation\nto CMake in the build directory.\n\n### Adding Z3 as a dependency to a CMAKE Project\n\nCMake's [FetchContent](https://cmake.org/cmake/help/latest/module/FetchContent.html) allows\nthe fetching and populating of an external project. This is useful when a certain version\nof z3 is required that may not match with the system version. With the following code in the \ncmake file of your project, z3 version 4.12.1 is downloaded to the build directory and the\ncmake targets are added to the project:\n\n```\nFetchContent_Declare(z3\n        GIT_REPOSITORY https://github.com/Z3Prover/z3\n        GIT_TAG        z3-4.12.1\n)\nFetchContent_MakeAvailable(z3)\n```\n\nThe header files can be added to the included directories as follows:\n\n```\ninclude_directories( ${z3_SOURCE_DIR}/src/api )\n```\n\nFinally, the z3 library can be linked to a `yourTarget` using\n\n```\ntarget_link_libraries(yourTarget libz3)\n```\nNote that this is `libz3` not `z3` (`libz3` refers to the library target from `src/CMakeLists.txt`).\n\n\n\n### Ninja\n\n[Ninja](https://ninja-build.org/) is a simple build system that is built for speed.\nIt can be significantly faster than \"UNIX Makefile\"s because it is not a recursive\nbuild system and thus doesn't create a new process every time it traverses into a directory.\nNinja is particularly appropriate if you want fast incremental building.\n\nBasic usage is as follows:\n\n```\nmkdir build\ncd build\ncmake -G \"Ninja\" ../\nninja\n```\n\nNote the discussion of the ``CC``, ``CXX``, ``CFLAGS`` and ``CXXFLAGS`` for \"Unix Makefiles\"\nalso applies here.\n\nNote also that like the \"Unix Makefiles\" generator, the \"Ninja\" generator is a single configuration\ngenerator so you pick the build type when you invoke ``cmake`` by passing ``CMAKE_BUILD_TYPE=<build_type>``\nto ``cmake``. See the section on \"Build Types\".\n\nNote that Ninja runs in parallel by default. Use the ``-j`` flag to change this.\n\nNote that Ninja also runs on Windows. You just need to run ``cmake`` in an\nenvironment where the compiler can be found. If you have Visual Studio\ninstalled it typically ships with a \"Developer Command Prompt Window\" that you\ncan use which has the environment variables setup for you.\n\n### NMake\n\nNMake is a build system that ships with Visual Studio. You are advised to use\nNinja instead which is significantly faster due to supporting concurrent\nbuilds. However CMake does support NMake if you wish to use it. Note that\nNMake is a single configuration generator so you must set ``CMAKE_BUILD_TYPE``\nto set the build type.\n\nBasic usage:\n\n1. Launch the \"Developer Command Prompt Windows\"\n2. Change to the root of the Z3 repository\n\n```\nmkdir build\ncd build\ncmake -G \"NMake Makefiles\" ../\nnmake\n```\n\n### Visual Studio\n\nVisual Studio 19 comes with integrated support for CMake.\nIt suffices to open the (z3) folder where this file and the Z3 project CMakeLists.txt resides, \nand Visual Studio does the rest.\n\nFor legacy versions of Visual Studio a process is as follows:\nFor the Visual Studio generators you need to know which version of \nVisual Studio you wish to use and also what architecture you want to build for.\n\nWe'll use the ``cmake-gui`` here as it is easier to pick the right generator but this can\nbe scripted if need be.\n\nHere are the basic steps:\n\n1. Create an empty build directory\n2. Start the cmake-gui program\n3. Set \"where is the source code\" to the root of the Z3 project repository. You can do this by pressing\n   the \"Browse Source...\" button and picking the directory.\n4. Set \"where to build the binaries\" to the empty build directory you just created. You can do this\n   by pressing the \"Browse build...\" button and picking the directory.\n5. Press the \"Configure\" button\n6. A window will appear asking you to pick the generator to use. Pick the\n   generator that matches the version of Visual Studio you are using. Note also\n   that some of the generator names contain ``Win64`` (e.g. ``Visual Studio 12\n   2013 Win64``) this indicates a x86 64-bit build. Generator names without\n   this (e.g. ``Visual Studio 12 2013``) are x86 32-bit build.\n7. Press the \"Finish\" button and wait for CMake to finish it's first configure.\n8. A set of configuration options will appear which will affect various aspects of the build.\n   Change them as you desire. If you change a set of options press the \"Configure\"\n   again. Additional options may appear when you do this.\n9. When you have finished changing configuration options press the \"Generate\" button.\n10. When generation is done close cmake-gui.\n11. In the build directory open the generated ``Z3.sln`` solution file created by CMake with\n    Visual Studio.\n12. In Visual Studio pick the build type (e.g. ``Debug``, ``Release``) you want.\n13. Click \"BUILD > Build Solution\".\n\nNote that unlike the \"Unix Makefile\" and \"Ninja\" generators the Visual Studio generators\nare multi-configuration generators which means you don't set the build type when invoking\nCMake. Instead you set the build type inside Visual Studio. See the \"Build Type\" section\nfor more information.\n\n### General workflow\n\nThe general workflow when using CMake is the following\n\n1. Create a new build directory\n2. Configure the project\n3. Generate the build system\n4. Invoke the build system to build the project\n\nTo perform steps 2 and 3 you can choose from three different tools\n\n* cmake\n* ccmake\n* cmake-gui\n\n``cmake`` is a command line tool and is what you should use if you are\nwriting a script to build Z3. This tool performs steps 1 and 2 in one\ngo without user interaction. The ``ccmake`` and ``cmake-gui`` tools are\nmore interactive and allow you to change various options. In both these\ntools the basic steps to follow are:\n\n1. Configure.\n2. Change any options you wish. Every time you change a set of options\n   You should configure again. This may cause new options to appear\n3. Generate.\n\nFor information see https://cmake.org/runningcmake/\n\nNote when invoking CMake you give it the path to the source directory.\nThis is the top-level directory in the Z3 repository containing a\n``CMakeLists.txt``. That file should contain the line ``project(Z3 C CXX)``.\nIf you give it a path deeper into the Z3 repository (e.g. the ``src`` directory)\nthe configure step will fail.\n\n## Build Types\n\nSeveral build types are supported.\n\n* Release\n* Debug\n* RelWithDebInfo\n* MinSizeRel\n\nFor the single configuration generators (e.g. \"Unix Makefile\" and \"Ninja\") you set the\nbuild type when invoking ``cmake`` by passing ``-DCMAKE_BUILD_TYPE=<build_type>`` where\n``<build_type>`` is one of the build types specified above.\n\nFor multi-configuration generators (e.g. Visual Studio) you don't set the build type\nwhen invoking CMake and instead set the build type within Visual Studio itself.\n\n## Useful options\n\nThe following useful options can be passed to CMake whilst configuring.\n\n* ``CMAKE_BUILD_TYPE`` - STRING. The build type to use. Only relevant for single configuration generators (e.g. \"Unix Makefile\" and \"Ninja\").\n* ``CMAKE_INSTALL_BINDIR`` - STRING. The path to install z3 binaries (relative to ``CMAKE_INSTALL_PREFIX``), e.g. ``bin``.\n* ``CMAKE_INSTALL_INCLUDEDIR`` - STRING. The path to install z3 include files (relative to ``CMAKE_INSTALL_PREFIX``), e.g. ``include``.\n* ``CMAKE_INSTALL_LIBDIR`` - STRING. The path to install z3 libraries (relative to ``CMAKE_INSTALL_PREFIX``), e.g. ``lib``.\n* ``CMAKE_INSTALL_PREFIX`` - STRING. The install prefix to use (e.g. ``/usr/local/``).\n* ``CMAKE_INSTALL_PKGCONFIGDIR`` - STRING. The path to install pkgconfig files.\n* ``CMAKE_INSTALL_PYTHON_PKG_DIR`` - STRING. The path to install the z3 python bindings. This can be relative (to ``CMAKE_INSTALL_PREFIX``) or absolute.\n* ``CMAKE_INSTALL_Z3_CMAKE_PACKAGE_DIR`` - STRING. The path to install CMake package files (e.g. ``/usr/lib/cmake/z3``).\n* ``CMAKE_INSTALL_API_BINDINGS_DOC`` - STRING. The path to install documentation for API bindings.\n* ``Python3_EXECUTABLE`` - STRING. The python executable to use during the build.\n* ``Z3_ENABLE_TRACING_FOR_NON_DEBUG`` - BOOL. If set to ``TRUE`` enable tracing in non-debug builds, if set to ``FALSE`` disable tracing in non-debug builds. Note in debug builds tracing is always enabled.\n* ``Z3_BUILD_LIBZ3_SHARED`` - BOOL. If set to ``TRUE`` build libz3 as a shared library otherwise build as a static library.\n* ``Z3_ENABLE_EXAMPLE_TARGETS`` - BOOL. If set to ``TRUE`` add the build targets for building the API examples.\n* ``Z3_USE_LIB_GMP`` - BOOL. If set to ``TRUE`` use the GNU multiple precision library. If set to ``FALSE`` use an internal implementation.\n* ``Z3_BUILD_PYTHON_BINDINGS`` - BOOL. If set to ``TRUE`` then Z3's python bindings will be built.\n* ``Z3_INSTALL_PYTHON_BINDINGS`` - BOOL. If set to ``TRUE`` and ``Z3_BUILD_PYTHON_BINDINGS`` is ``TRUE`` then running the ``install`` target will install Z3's Python bindings.\n* ``Z3_BUILD_DOTNET_BINDINGS`` - BOOL. If set to ``TRUE`` then Z3's .NET bindings will be built.\n* ``Z3_INSTALL_DOTNET_BINDINGS`` - BOOL. If set to ``TRUE`` and ``Z3_BUILD_DOTNET_BINDINGS`` is ``TRUE`` then running the ``install`` target will install Z3's .NET bindings.\n* ``Z3_DOTNET_CSC_EXECUTABLE`` - STRING. The path to the C# compiler to use. Only relevant if ``Z3_BUILD_DOTNET_BINDINGS`` is set to ``TRUE``.\n* ``Z3_DOTNET_GACUTIL_EXECUTABLE`` - STRING. The path to the gacutil program to use. Only relevant if ``BUILD_DOTNET_BINDINGS`` is set to ``TRUE``.\n* ``Z3_BUILD_JAVA_BINDINGS`` - BOOL. If set to ``TRUE`` then Z3's Java bindings will be built.\n* ``Z3_INSTALL_JAVA_BINDINGS`` - BOOL. If set to ``TRUE`` and ``Z3_BUILD_JAVA_BINDINGS`` is ``TRUE`` then running the ``install`` target will install Z3's Java bindings.\n* ``Z3_JAVA_JAR_INSTALLDIR`` - STRING. The path to directory to install the Z3 Java ``.jar`` file. This path should be relative to ``CMAKE_INSTALL_PREFIX``.\n* ``Z3_JAVA_JNI_LIB_INSTALLDIRR`` - STRING. The path to directory to install the Z3 Java JNI bridge library. This path should be relative to ``CMAKE_INSTALL_PREFIX``.\n* ``Z3_INCLUDE_GIT_DESCRIBE`` - BOOL. If set to ``TRUE`` and the source tree of Z3 is a git repository then the output of ``git describe`` will be included in the build.\n* ``Z3_INCLUDE_GIT_HASH`` - BOOL. If set to ``TRUE`` and the source tree of Z3 is a git repository then the git hash will be included in the build.\n* ``Z3_BUILD_DOCUMENTATION`` - BOOL. If set to ``TRUE`` then documentation for the API bindings can be built by invoking the ``api_docs`` target.\n* ``Z3_INSTALL_API_BINDINGS_DOCUMENTATION`` - BOOL. If set to ``TRUE`` and ``Z3_BUILD_DOCUMENTATION` is ``TRUE`` then documentation for API bindings will be installed\n    when running the ``install`` target.\n* ``Z3_ALWAYS_BUILD_DOCS`` - BOOL. If set to ``TRUE`` and ``Z3_BUILD_DOCUMENTATION`` is ``TRUE`` then documentation for API bindings will always be built.\n    Disabling this is useful for faster incremental builds. The documentation can be manually built by invoking the ``api_docs`` target.\n* ``Z3_LINK_TIME_OPTIMIZATION`` - BOOL. If set to ``TRUE`` link time optimization will be enabled.\n* ``Z3_ENABLE_CFI`` - BOOL. If set to ``TRUE`` will enable Control Flow Integrity security checks. This is only supported by MSVC and Clang and will\n    fail on other compilers. This requires Z3_LINK_TIME_OPTIMIZATION to also be enabled.\n* ``Z3_API_LOG_SYNC`` - BOOL. If set to ``TRUE`` will enable experimental API log sync feature.\n* ``WARNINGS_AS_ERRORS`` - STRING. If set to ``ON`` compiler warnings will be treated as errors. If set to ``OFF`` compiler warnings will not be treated as errors.\n    If set to ``SERIOUS_ONLY`` a subset of compiler warnings will be treated as errors.\n* ``Z3_C_EXAMPLES_FORCE_CXX_LINKER`` - BOOL. If set to ``TRUE`` the C API examples will request that the C++ linker is used rather than the C linker.\n* ``Z3_BUILD_EXECUTABLE`` - BOOL. If set to ``TRUE`` build the z3 executable. Defaults to ``TRUE`` unless z3 is being built as a submodule in which case it defaults to ``FALSE``.\n* ``Z3_BUILD_TEST_EXECUTABLES`` - BOOL. If set to ``TRUE`` build the z3 test executables. Defaults to ``TRUE`` unless z3 is being built as a submodule in which case it defaults to ``FALSE``.\n* ``Z3_SAVE_CLANG_OPTIMIZATION_RECORDS`` - BOOL. If set to ``TRUE`` saves Clang optimization records by setting the compiler flag ``-fsave-optimization-record``.\n* ``Z3_SINGLE_THREADED`` - BOOL. If set to ``TRUE`` compiles Z3 for single threaded mode.\n* ``Z3_POLLING_TIMER`` - BOOL. If set to ``TRUE`` compiles Z3 to use polling based timer instead of requiring a thread. This is useful for wasm builds and avoids spawning threads that interfere with how WASM is run.\n\n\nOn the command line these can be passed to ``cmake`` using the ``-D`` option. In ``ccmake`` and ``cmake-gui`` these can be set in the user interface.\n\nExample\n\n```\ncmake -DCMAKE_BUILD_TYPE=Release -DZ3_ENABLE_TRACING_FOR_NON_DEBUG=FALSE ../\n\n```\n\n## Z3 API Bindings\n\nZ3 exposes various language bindings for its API. Below are some notes on building\nand/or installing these bindings when building Z3 with CMake.\n\n### Java bindings\n\nThe CMake build uses the ``FindJava`` and ``FindJNI`` cmake modules to detect the\ninstallation of Java. If CMake fails to find your installation of Java set the\n``JAVA_HOME`` environment variable when invoking CMake so that it points at the\ncorrect location. For example\n\n```\nJAVA_HOME=/usr/lib/jvm/default cmake -DZ3_BUILD_JAVA_BINDINGS=ON ../\n```\nNote that the built ``.jar`` file is named ``com.microsoft.z3-VERSION.jar``\nwhere ``VERSION`` is the Z3 version. Under non Windows systems a\nsymbolic link named ``com.microsoft.z3.jar`` is provided. This symbolic\nlink is not created when building under Windows.\n\n## Developer/packager notes\n\nThese notes are help developers and packagers of Z3.\n\n### Install/Uninstall\n\nInstall and uninstall targets are supported. Use ``CMAKE_INSTALL_PREFIX`` to\nset the install prefix. If you also need to control which directories are\nused for install set the documented ``CMAKE_INSTALL_*`` options.\n\nTo install run\n\n```\nmake install\n```\n\nTo uninstall run\n\n```\nmake uninstall\n```\n\nNote that ``DESTDIR`` is supported for [staged installs](https://www.gnu.org/prep/standards/html_node/DESTDIR.html).\n\nTo install\n\n```\nmkdir staged\nmake install DESTDIR=/full/path/to/staged/\n```\n\nto uninstall\n\n```\nmake uninstall DESTDIR=/full/path/to/staged\n```\n\nThe above also works for Ninja but ``DESTDIR`` must be an environment variable instead.\n\n### Examining invoked commands\n\nIf you are using the \"UNIX Makefiles\" generator and want to see exactly the commands that are\nbeing run you can pass ``VERBOSE=1`` to make.\n\n```\nmake VERBOSE=1\n```\n\nIf you are using Ninja you can use the ``-v`` flag.\n\n### Additional targets\n\nTo see the list of targets run\n\n```\nmake help\n```\n\nThere are a few special targets:\n\n* ``clean`` all the built targets in the current directory and below\n* ``edit_cache`` will invoke one of the CMake tools (depending on which is available) to let you change configuration options.\n* ``rebuild_cache`` will reinvoke ``cmake`` for the project.\n* ``api_docs`` will build the documentation for the API bindings.\n\n### Setting build type specific flags\n\nThe build system supports single configuration and multi-configuration generators. This means\nit is not possible to know the build type at configure time and therefore ``${CMAKE_BUILD_TYPE}``\nshould not be conditionally used to set compiler flags or definitions. Instead you should use Generator expressions which are evaluated by the generator.\n\nFor example\n\n```\n$<$<CONFIG:Debug>:Z3DEBUG>\n```\n\nIf the build type at build time is ``Debug`` this evaluates to ``Z3DEBUG`` but evaluates to nothing for all other configurations. You can see examples of this in the ``CMakeLists.txt`` files.\n\n### File-globbing\n\nIt is tempting use file-globbing in ``CMakeLists.txt`` to find a set for files matching a pattern and\nuse them as the sources to build a target. This however is a bad idea because it prevents CMake from knowing when it needs to rerun itself. This is why source file names are explicitly listed in the ``CMakeLists.txt`` so that when changes are made the source files used to build a target automatically triggers a rerun of CMake.\n\nLong story short. Don't use file globbing.\n\n### Serious warning flags\n\nBy default the `WARNINGS_AS_ERRORS` flag is set to `SERIOUS_ONLY` which means\nsome warnings will be treated as errors. These warnings are controlled by the\nrelevant `*_WARNINGS_AS_ERRORS` list defined in\n`cmake/compiler_warnings.cmake`.\n\nAdditional warnings should only be added here if the warnings has no false\npositives.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.61328125,
          "content": "# Z3\n\nZ3 is a theorem prover from Microsoft Research. \nIt is licensed under the [MIT license](LICENSE.txt).\n\nIf you are not familiar with Z3, you can start [here](https://github.com/Z3Prover/z3/wiki#background).\n\nPre-built binaries for stable and nightly releases are available [here](https://github.com/Z3Prover/z3/releases).\n\nZ3 can be built using [Visual Studio][1], a [Makefile][2] or using [CMake][3]. It provides\n[bindings for several programming languages][4]. \n\nSee the [release notes](RELEASE_NOTES.md) for notes on various stable releases of Z3.\n\n[![Try the online Z3 Guide](z3guide.jpeg)](https://microsoft.github.io/z3guide/)\n\n## Build status\n\n| Azure Pipelines |  Open Bugs | Android Build | WASM Build | Windows Build | Pyodide Build |\n| --------------- | -----------|---------------|------------|---------------|---------------|\n| [![Build Status](https://dev.azure.com/Z3Public/Z3/_apis/build/status/Z3Prover.z3?branchName=master)](https://dev.azure.com/Z3Public/Z3/_build/latest?definitionId=1&branchName=master) |  [![Open Issues](https://github.com/Z3Prover/z3/actions/workflows/wip.yml/badge.svg)](https://github.com/Z3Prover/z3/actions/workflows/wip.yml) |[![Android Build](https://github.com/Z3Prover/z3/actions/workflows/android-build.yml/badge.svg)](https://github.com/Z3Prover/z3/actions/workflows/android-build.yml) | [![WASM Build](https://github.com/Z3Prover/z3/actions/workflows/wasm.yml/badge.svg)](https://github.com/Z3Prover/z3/actions/workflows/wasm.yml) | [![Windows](https://github.com/Z3Prover/z3/actions/workflows/Windows.yml/badge.svg)](https://github.com/Z3Prover/z3/actions/workflows/Windows.yml) | [![Pyodide Build](https://github.com/Z3Prover/z3/actions/workflows/pyodide.yml/badge.svg)](https://github.com/Z3Prover/z3/actions/workflows/pyodide.yml)\n\n<a href=\"https://github.com/z3prover/z3/pkgs/container/z3\">Docker image</a>.\n\n[1]: #building-z3-on-windows-using-visual-studio-command-prompt\n[2]: #building-z3-using-make-and-gccclang\n[3]: #building-z3-using-cmake\n[4]: #z3-bindings\n\n## Building Z3 on Windows using Visual Studio Command Prompt\n\nFor 32-bit builds, start with:\n\n```bash\npython scripts/mk_make.py\n```\n\nor instead, for a 64-bit build:\n\n```bash\npython scripts/mk_make.py -x\n```\n\nthen run:\n\n```bash\ncd build\nnmake\n```\n\nZ3 uses C++20. The recommended version of Visual Studio is therefore VS2019 or later. \n\n## Building Z3 using make and GCC/Clang\n\nExecute:\n\n```bash\npython scripts/mk_make.py\ncd build\nmake\nsudo make install\n```\n\nNote by default ``g++`` is used as C++ compiler if it is available. If you\nprefer to use Clang, change the ``mk_make.py`` invocation to:\n\n```bash\nCXX=clang++ CC=clang python scripts/mk_make.py\n```\n\nNote that Clang < 3.7 does not support OpenMP.\n\nYou can also build Z3 for Windows using Cygwin and the Mingw-w64 cross-compiler.\nIn that case, make sure to use Cygwin's own Python and not some Windows installation of Python.\n\nFor a 64-bit build (from Cygwin64), configure Z3's sources with\n```bash\nCXX=x86_64-w64-mingw32-g++ CC=x86_64-w64-mingw32-gcc AR=x86_64-w64-mingw32-ar python scripts/mk_make.py\n```\nA 32-bit build should work similarly (but is untested); the same is true for 32/64 bit builds from within Cygwin32.\n\nBy default, it will install z3 executables at ``PREFIX/bin``, libraries at\n``PREFIX/lib``, and include files at ``PREFIX/include``, where the ``PREFIX``\ninstallation prefix is inferred by the ``mk_make.py`` script. It is usually\n``/usr`` for most Linux distros, and ``/usr/local`` for FreeBSD and macOS. Use\nthe ``--prefix=`` command-line option to change the install prefix. For example:\n\n```bash\npython scripts/mk_make.py --prefix=/home/leo\ncd build\nmake\nmake install\n```\n\nTo uninstall Z3, use\n\n```bash\nsudo make uninstall\n```\n\nTo clean Z3, you can delete the build directory and run the ``mk_make.py`` script again.\n\n## Building Z3 using CMake\n\nZ3 has a build system using CMake. Read the [README-CMake.md](README-CMake.md)\nfile for details. It is recommended for most build tasks, \nexcept for building OCaml bindings.\n\n## Building Z3 using vcpkg\n\nvcpkg is a full platform package manager. To install Z3 with vcpkg, execute:\n\n```bash\ngit clone https://github.com/microsoft/vcpkg.git\n./bootstrap-vcpkg.bat # For powershell\n./bootstrap-vcpkg.sh # For bash\n./vcpkg install z3\n```\n\n## Dependencies\n\nZ3 itself has only few dependencies. It uses C++ runtime libraries, including pthreads for multi-threading.\nIt is optionally possible to use GMP for multi-precision integers, but Z3 contains its own self-contained \nmulti-precision functionality. Python is required to build Z3. Building Java, .NET, OCaml and \nJulia APIs requires installing relevant toolchains.\n\n## Z3 bindings\n\nZ3 has bindings for various programming languages.\n\n### ``.NET``\n\nYou can install a NuGet package for the latest release Z3 from [nuget.org](https://www.nuget.org/packages/Microsoft.Z3/).\n\nUse the ``--dotnet`` command line flag with ``mk_make.py`` to enable building these.\n\nSee [``examples/dotnet``](examples/dotnet) for examples.\n\n### ``C``\n\nThese are always enabled.\n\nSee [``examples/c``](examples/c) for examples.\n\n### ``C++``\n\nThese are always enabled.\n\nSee [``examples/c++``](examples/c++) for examples.\n\n### ``Java``\n\nUse the ``--java`` command line flag with ``mk_make.py`` to enable building these.\n\nSee [``examples/java``](examples/java) for examples.\n\n### ``OCaml``\n\nUse the ``--ml`` command line flag with ``mk_make.py`` to enable building these.\n\nSee [``examples/ml``](examples/ml) for examples.\n\n### ``Python``\n\nYou can install the Python wrapper for Z3 for the latest release from pypi using the command:\n\n```bash\n   pip install z3-solver\n```\n\nUse the ``--python`` command line flag with ``mk_make.py`` to enable building these.\n\nNote that it is required on certain platforms that the Python package directory\n(``site-packages`` on most distributions and ``dist-packages`` on Debian-based\ndistributions) live under the install prefix. If you use a non-standard prefix\nyou can use the ``--pypkgdir`` option to change the Python package directory\nused for installation. For example:\n\n```bash\npython scripts/mk_make.py --prefix=/home/leo --python --pypkgdir=/home/leo/lib/python-2.7/site-packages\n```\n\nIf you do need to install to a non-standard prefix, a better approach is to use\na [Python virtual environment](https://virtualenv.readthedocs.org/en/latest/)\nand install Z3 there. Python packages also work for Python3.\nUnder Windows, recall to build inside the Visual C++ native command build environment.\nNote that the ``build/python/z3`` directory should be accessible from where Python is used with Z3 \nand it requires ``libz3.dll`` to be in the path.\n\n```bash\nvirtualenv venv\nsource venv/bin/activate\npython scripts/mk_make.py --python\ncd build\nmake\nmake install\n# You will find Z3 and the Python bindings installed in the virtual environment\nvenv/bin/z3 -h\n...\npython -c 'import z3; print(z3.get_version_string())'\n...\n```\n\nSee [``examples/python``](examples/python) for examples.\n\n### ``Julia``\n\nThe Julia package [Z3.jl](https://github.com/ahumenberger/Z3.jl) wraps the C API of Z3. A previous version of it wrapped the C++ API: Information about updating and building the Julia bindings can be found in [src/api/julia](src/api/julia).\n\n### ``WebAssembly`` / ``TypeScript`` / ``JavaScript``\n\nA WebAssembly build with associated TypeScript typings is published on npm as [z3-solver](https://www.npmjs.com/package/z3-solver). Information about building these bindings can be found in [src/api/js](src/api/js).\n\n### Smalltalk (``Pharo`` / ``Smalltalk/X``)\n\nProject [MachineArithmetic](https://github.com/shingarov/MachineArithmetic) provides a Smalltalk interface\nto Z3's C API. For more information, see [MachineArithmetic/README.md](https://github.com/shingarov/MachineArithmetic/blob/pure-z3/MachineArithmetic/README.md).\n\n## System Overview\n\n![System Diagram](https://github.com/Z3Prover/doc/blob/master/programmingz3/images/Z3Overall.jpg)\n\n## Interfaces\n\n* Default input format is [SMTLIB2](http://smtlib.cs.uiowa.edu)\n\n* Other native foreign function interfaces:\n* [C++ API](https://z3prover.github.io/api/html/namespacez3.html)\n* [.NET API](https://z3prover.github.io/api/html/namespace_microsoft_1_1_z3.html)\n* [Java API](https://z3prover.github.io/api/html/namespacecom_1_1microsoft_1_1z3.html)\n* [Python API](https://z3prover.github.io/api/html/namespacez3py.html) (also available in [pydoc format](https://z3prover.github.io/api/html/z3.html))\n* [Rust](https://github.com/prove-rs/z3.rs)\n* C\n* OCaml\n* [Julia](https://github.com/ahumenberger/Z3.jl)\n* [Smalltalk](https://github.com/shingarov/MachineArithmetic/blob/pure-z3/MachineArithmetic/README.md) (supports Pharo and Smalltalk/X)\n\n## Power Tools\n* The [Axiom Profiler](https://github.com/viperproject/axiom-profiler-2) currently developed by ETH Zurich\n\n\n"
        },
        {
          "name": "RELEASE_NOTES.md",
          "type": "blob",
          "size": 66.4169921875,
          "content": "RELEASE NOTES\n\nVersion 4.next\n================\n- Planned features\n  - sat.euf \n    - a new CDCL core for SMT queries. It extends the SAT engine with theory solver plugins.\n      the current state is unstable. It lacks efficient ematching.\n  - polysat\n    - native word level bit-vector solving.\n  - introduction of simple induction lemmas to handle a limited repertoire of induction proofs.\n\nVersion 4.13.4\n==============\n- several updates to emscripten including #7473\n- add preliminary pyodie build\n- address issues with Java bindings\n- Include start of sls-smt functionality SLS modulo theories as co-processor to SMT core and stand-alone tactic.\n\nVersion 4.13.3\n==============\n- Fixes, including #7363\n- Fix paths to Java binaries in release\n- Remove internal build names from pypi wheels\n\nVersion 4.13.2\n==============\n- Performance regression fix. #7404\n\nVersion 4.13.1\n==============\n- single-sample cell projection in nlsat was designed by Haokun Li and Bican Xia. \n- using simple-checker together with and variable ordering supported by qfnra_tactic was developed by Mengyu Zhao (Linxi) and Shaowei Cai.\n\n   The projection is described in paper by Haokun Li and Bican Xia,   [Solving Satisfiability of Polynomial Formulas By Sample - Cell Projection](https://arxiv.org/abs/2003.00409). The code ported from https://github.com/hybridSMT/hybridSMT.git\n\n- Add API for providing hints for the solver/optimize contexts for which initial values to attempt to use for variables.\n The new API function are Z3_solver_set_initial_value and Z3_optimize_set_initial_value, respectively. Supply these functions with a Boolean or numeric variable, and a value. The solver will then attempt to use these values in the initial phase of search. The feature is aimed at resolving nearly similar problems, or problems with a predicted model and the intent is that restarting the solver based on a near solution can avoid prune the space of constraints that are initially infeasible.\n The SMTLIB front-end contains the new command (set-initial-value var value). For example,\n (declare-const x Int)\n (set-initial-value x 10)\n (push)\n (assert (> x 0))\n (check-sat)\n (get-model)\n produces a model where x = 10. We use (push) to ensure that z3 doesn't run a\n specialized pre-processor that eliminates x, which renders the initialization\n without effect.\n \n\nVersion 4.13.0\n==============\n- add ARM64 wheels for Python, thanks to Steven Moy, smoy\n\nVersion 4.12.6\n==============\n- remove expensive rewrite that coalesces adjacent stores\n- improved Java use of reference queues thanks to Thomas Haas #7131\n- fixes to conditional import of python library thanks to Cal Jacobson #7116\n- include universe for constants that get removed during pre-processing #7121\n- code improvements, Bruce Mitchener #7119\n- fix nested callback handling for user propagators\n- include ARM64 binaries in distribution\n- added Julia API, Thanks to Yisu Remy Yang #7108\n\nVersion 4.12.5\n==============\n- Fixes to pypi setup and build for MacOS distributions\n- A new theory solver \"int-blast\" enabled by using:\n  - sat.smt=true smt.bv.solver=2\n  - It solves a few bit-vector problems not handled by bit-blasting, especially if the bit-widths are large.\n  - It is based on encoding bit-vector constraints to non-linear integer arithmetic.\n- Optimizations to the arithmetic solver. Description: https://github.com/Z3Prover/doc/tree/master/arithmetic\n\nVersion 4.12.4\n==============\n- Re-release fixing a few issues with 4.12:\n  - Python dependency on importlib.resources vs importlib_resources break automatic pypi installations. Supposedly fixed by conditioning dependency on Python 3.9 where the feature is built-in.\n  - Missing release of arm64 for Ubuntu.\n  - Futile attempt to streamline adding readme.md file as part of Nuget distribution. Nuget.org now requires a readme file. I was able to integrate the readme with the cmake build, but the cross-platform repackage in scripts/mk_nuget_task.py does not ingest a similar readme file with the CI pipelines.\n\nVersion 4.12.3\n==============\n- Alpha support for polymorphism.\n  - SMTLIB3-ish, C, Python\n  It adds the new command `(declare-type-var A)` that declares a symbol (in this case `A`) globally as a polymorphic type variable.\n  The C API contains a new function `Z3_mk_type_variable` and a new enumeration case `Z3_TYPE_VAR` as a kind associated with sorts.\n  All occurrences of `A` are treated as type variables. A function declaration whose signature uses `A` is treated as a shorthand\n  for declarations of all functions that use instances of `A`.\n  Assertions that use type variables are shorthands for assertions covering all instantiations.\n- Various (ongoing) performance fixes and improvements to smt.arith.solver=6\n- A working version of solver.proof.trim=true option. Proofs logs created when using sat.smt=true may be trimmed by running z3\n  on the generated proof log using the option solver.proof.trim=true. \n- Optimizations LIA and NIA (linear integer arithmetic and non-linear integer (and real) arithmetic reasoning).\n  smt.arith.solver=6 is the default for most use cases. It trails smt.arith.solver=2 in some scenarios and the gap has been either removed or reduced.\n  smt.arith.solver=6 is complete for integrations of non-linear real arithmetic and theories, smt.arith.solver=2 is not. \n- qel: Light quantifier elimination based on term graphs (egraphs), and corresponding Model Based Projection for arrays and ADTs. Used by Spacer and QSAT.\n- added real-closed fields features to C API, exposed more RCF over OCaml API\n- fixes to FP\n\nVersion 4.12.2\n==============\n- remove MSF (Microsoft Solver Foundation) plugin\n- updated propagate-ineqs tactic and implementing it as a simplifier, bound_simplifier.\n  It now eliminates occurrences of \"mod\" operators when bounds information\n  implies that the modulus is redundant. This tactic is useful for\n  benchmarks created by converting bit-vector semantics to integer \n  reasoning.\n- add API function Z3_mk_real_int64 to take two int64 as arguments. The Z3_mk_real function takes integers.\n- Add _simplifiers_ as optional incremental pre-processing to solvers.\n  They are exposed over the SMTLIB API using the command [`set-simplifier`](https://microsoft.github.io/z3guide/docs/strategies/simplifiers).\n  Simplifiers are similar to tactics, but they operate on solver state that can be incrementally updated. \n  The exposed simplifiers cover all the pre-processing techniques used internally with some additional simplifiers, such as `solve-eqs`\n  and `elim-predicates` that go beyond incremental pre-processing used internally. The advantage of using `solve-eqs` during pre-processing\n  can be significant. Incremental pre-processing simplification using `solve-eqs` and other simplifiers that change interpretations \n  was not possible before.\n- Optimize added to JS API, thanks to gbagan\n- SMTLIB2 proposal for bit-vector overflow predicates added, thanks to aehyvari \n- bug fixes, thanks to Clemens Eisenhofer, hgvk94, Lev Nachmanson, and others\n\n\nVersion 4.12.1\n==============\n- change macos build to use explicit reference to Macos version 11. Hosted builds are migrating to macos-12 and it broke a user Issue #6539.\n\nVersion 4.12.0\n==============\n- add clause logging API.\n  - The purpose of logging API and self-checking is to enable an array of use cases.\n    - proof mining (what instantiations did Z3 use)? \n      - A refresh of the AxiomProfiler could use the logging API. \n        The (brittle) trace feature should be deprecated.\n    - debugging\n      - a built-in self certifier implements a custom proof checker for \n        the format used by the new solver (sat.euf=true).\n    - other potential options:\n      - integration into certified tool chains      \n      - interpolation \n  - Z3_register_on_clause (also exposed over C++, Python and .Net)\n  - it applies to z3's main CDCL(T) core and a new CDCL(T) core (sat.euf=true).\n  - The added API function allows to register a callback for when clauses \n    are inferred. More precisely, when clauses are assumed (as part of input), \n    deleted, or deduced.\n    Clauses that are deduced by the CDCL SAT engine using standard \n    inferences are marked as 'rup'.\n    Clauses that are deduced by theories are marked by default \n    by 'smt', and when more detailed information\n    is available with proof hints or proof objects. \n    Instantiations are considered useful to track so they\n    are logged using terms of the form \n\n         (inst (not (forall (x) body)) body[t/x] (bind t)), where\n\n    'inst' is a name of a function that produces a proof term representing \n    the instantiation.\n- add options for proof logging, trimming, and checking for the new core.\n  - sat.smt.proof (symbol) add SMT proof to file (default: )\n  - sat.smt.proof.check (bool) check SMT proof while it is created (default: false)\n    - it applies a custom self-validator. The self-validator comprises of \n      several small checkers and represent a best-effort validation mechanism. \n      If there are no custom validators associated with inferences, or the custom \n      validators fail to certify inferences, the self-validator falls back to \n      invoking z3 (SMT) solving on the lemma.\n      - euf - propagations and conflicts from congruence closure \n              (theory of equality and uninterpreted functions) are checked\n              based on a proof format that tracks uses of congruence closure and \n              equalities. It only performs union find operations.\n      - tseitin - clausification steps are checked for Boolean operators.\n      - farkas, bound, implies_eq - arithmetic inferences that can be justified using \n              a combination of Farkas lemma and cuts are checked.\n              Note: the arithmetic solver may produce proof hints that the proof \n              checker cannot check. It is mainly a limitation\n              of the arithmetic solver not pulling relevant information. \n              Ensuring a tight coupling with proof hints and the validator\n              capabilities is open ended future work and good material for theses. \n      - bit-vector inferences - are treated as trusted \n        (there is no validation, it always blindly succeeds)\n      - arrays, datatypes - there is no custom validation for \n        other theories at present. Lemmas are validated using SMT.\n  - sat.smt.proof.check_rup (bool) apply forward RUP proof checking (default: true)\n    - this option can incur significant runtime overhead. \n      Effective proof checking relies on first trimming proofs into a \n      format where dependencies are tracked and then checking relevant inferences. \n      Turn this option off if you just want to check theory inferences.                         \n- add options to validate proofs offline. It applies to proofs \n  saved when sat.smt.proof is set to a valid file name.\n  - solver.proof.check (bool) check proof logs (default: true)\n    - the option sat.smt.proof_check_rup can be used to control what is checked\n  - solver.proof.save (bool) save proof log into a proof object \n      that can be extracted using (get-proof) (default: false)\n    - experimental: saves a proof log into a term\n  - solver.proof.trim (bool) trim the offline proof and print the trimmed proof to the console\n    - experimental: performs DRUP trimming to reduce the set of hypotheses \n      and inferences relevant to derive the empty clause.\n- JS support for Arrays, thanks to Walden Yan\n- More portable memory allocation, thanks to Nuno Lopes \n  (avoid custom handling to calculate memory usage)\n\n- clause logging and proofs: many open-ended directions.\n  Many directions and functionality features remain in an open-ended state, \n  subject to fixes, improvements, and contributions.\n  We list a few of them here:\n  - comprehensive efficient self-validators for arithmetic, and other theories\n  - an efficient proof checker when several theory solvers cooperate in a propagation or \n    conflict. The theory combination case is currently delegated to the smt solver. \n    The proper setup for integrating theory lemmas is in principle not complicated, \n    but the implementation requires some changes.\n  - external efficient proof validators (based on certified tool chains) \n    can be integrated over the API.\n  - dampening repeated clauses: A side-effect of conflict resolution is to \n    log theory lemmas. It often happens that the theory lemma becomes\n    the conflict clause, that is then logged as rup. Thus, two clauses are \n    logged.\n  - support for online trim so that proofs generated using clause logging can be used for SPACER\n    - SPACER also would benefit from more robust proof hints for arithmetic \n      lemmas (bounds and implied equalities are sometimes not logged correctly)\n  - integration into axiom profiling through online and/or offline interfaces.\n    - an online interface attaches a callback with a running solver. This is available.\n    - an offline interface saves a clause proof to a file (currently just \n      supported for sat.euf) and then reads the file in a separate process\n      The separate process attaches a callback on inferred clauses. \n      This is currently not available but a relatively small feature.\n  - more detailed proof hints for the legacy solver clause logger. \n    Other than quantifier instantiations, no detailed information is retained for \n    theory clauses. \n  - integration of pre-processing proofs with logging proofs. There is \n    currently no supported bridge to create a end-to-end proof objects.\n- experimental API for accessing E-graphs. Exposed over Python. This API should be considered temporary\nand subject to be changed depending on use cases or removed. The functions are `Z3_solver_congruence_root`, `Z3_solver_congruence_next`.\n\n\nVersion 4.11.2\n==============\n- add error handling to fromString method in JavaScript\n- fix regression in default parameters for CDCL, thanks to Nuno Lopes\n- fix model evaluation bugs for as-array nested under functions (data-type constructors)\n- add rewrite simplifications for datatypes with a single constructor\n- add \"Global Guidance\" capability to SPACER, thanks to Arie Gurfinkel and Hari Gorvind.\n  The commit logs related to Global Guidance contain detailed information.\n- change proof logging format for the new core to use SMTLIB commands.\n  The format was so far an extension of DRAT used by SAT solvers, but not well compatible\n  with SMT format that is extensible. The resulting format is a mild extension of SMTLIB with\n  three extra commands assume, learn, del. They track input clauses, generated clauses and deleted clauses.\n  They are optionally augmented by proof hints. Two proof hints are used in the current version: \"rup\" and \"farkas\".\n  \"rup\" is used when the generated clause can be justified by reverse unit propagation. \"farkas\" is used when\n  the clause can be justified by a combination of Farkas cutting planes. There is a built-in proof checker for the\n  format. Quantifier instantiations are also tracked as proof hints.\n  Other proof hints are to be added as the feature set is tested and developed. The fallback, built-in,\n  self-checker uses z3 to check that the generated clause is a consequence. Note that this is generally\n  insufficient as generated clauses are in principle required to only be satisfiability preserving.\n  Proof checking and transformation operations is overall open ended.\n  The log for the first commit introducing this change contains further information on the format.\n- fix to re-entrancy bug in user propagator (thanks to Clemens Eisenhofer).\n- handle _toExpr for quantified formulas in JS bindings\n\nVersion 4.11.1\n==============\n- skipped\n\nVersion 4.11.0\n==============\n- remove `Z3_bool`, `Z3_TRUE`, `Z3_FALSE` from the API. Use `bool`, `true`, `false` instead.\n- z3++.h no longer includes `<sstream>` as it did not use it.\n- add solver.axioms2files\n  - prints negated theory axioms to files. Each file should be unsat\n- add solver.lemmas2console\n  - prints lemmas to the console.\n- remove option smt.arith.dump_lemmas. It is replaced by solver.axioms2files\n- add option smt.bv.reduce_size. \n  - it allows to apply incremental pre-processing of bit-vectors by identifying ranges that are known to be constant.\n    This rewrite is beneficial, for instance, when bit-vectors are constrained to have many high-level bits set to 0.\n- add feature to model-based projection for arithmetic to handle integer division.\n- add fromString method to JavaScript solver object.\n\nVersion 4.10.2\n==============\n- fix regression #6194. It broke mod/rem/div reasoning.\n- fix user propagator scope management for equality callbacks.\n\nVersion 4.10.1\n==============\n- fix implementation of mk_fresh in user propagator for Python API\n\nVersion 4.10.0\n==============\n- Added API Z3_enable_concurrent_dec_ref to be set by interfaces that\n  use concurrent GC to manage reference counts. This feature is integrated\n  with the OCaml bindings and fixes a regression introduced when OCaml\n  transitioned to concurrent GC. Use of this feature for .Net and Java\n  bindings is not integrated for this release. They use external queues\n  that are unnecessarily complicated.\n- Added pre-declared abstract datatype declarations to the context so\n  that Z3_eval_smtlib2_string works with List examples.\n- Fixed Java linking for MacOS Arm64.\n- Added missing callback handlers in tactics for user-propagator,\n  Thanks to Clemens Eisenhofer\n- Tuning to Grobner arithmetic reasoning for smt.arith.solver=6\n  (currently the default in most cases). The check for consistency\n  modulo multiplication was updated in the following way:\n  - polynomial equalities are extracted from Simplex tableau rows using\n    a cone of influence algorithm. Rows where the basic variables were\n    unbounded were previously included. Following the legacy implementation\n    such rows are not included when building polynomial equations.\n  - equations are pre-solved if they are linear and can be split\n    into two groups one containing a single variable that has a\n    lower (upper) bound, the other with more than two variables\n    with upper (lower) bounds. This avoids losing bounds information\n    during completion.\n  - After (partial) completion, perform constant propagation for equalities\n    of the form x = 0\n  - After (partial) completion, perform factorization for factors of the\n    form x*y*p = 0 where x, are variables, p is linear.\n- Added support for declaring algebraic datatypes from the C++ interface.\n    \n\nVersion 4.9.1\n=============\n- Bugfix release to ensure npm package works\n\nVersion 4.9.0\n=============\n- Native M1 (Mac ARM64) binaries and pypi distribution.\n  - thanks to Isabel Garcia Contreras and Arie Gurfinkel for testing and fixes\n- API for incremental parsing of assertions.\n  A description of the feature is given by example here: https://github.com/Z3Prover/z3/commit/815518dc026e900392bf0d08ed859e5ec42d1e43\n  It also allows incrementality at the level of adding assertions to the \n  solver object. \n- Fold/map for sequences:\n  https://microsoft.github.io/z3guide/docs/guide/Sequences#map-and-fold\n  At this point these functions are only exposed over the SMTLIB2 interface (and not programmatic API)\n  maxdiff/mindiff on arrays are more likely to be deprecated\n- User Propagator: \n  - Add functions and callbacks for external control over branching thanks to Clemens Eisenhofer\n  - A functioning dotnet API for the User Propagator \n    https://github.com/Z3Prover/z3/blob/master/src/api/dotnet/UserPropagator.cs\n- Java Script API\n  - higher level object wrappers are available thanks to Kevin Gibbons and Olaf Tomalka\n- Totalizers and RC2\n  - The MaxSAT engine now allows to run RC2 with totalizer encoding.\n    Totalizers are on by default as preliminary tests suggest this solves already 10% more problems on\n    standard benchmarks. The option opt.rc2.totalizer (which by default is true) is used to control whether to use\n    totalizer encoding or built-in cardinality constraints.\n    The default engine is still maxres, so you have to set opt.maxsat_engine=rc2 to\n    enable the rc2 option at this point. The engines maxres-bin and rc2bin are experimental should not be used\n    (they are inferior to default options).\n- Incremental constraints during optimization set option opt.incremental = true\n  - The interface `Z3_optimize_register_model_eh` allows to monitor incremental results during optimization.\n    It is now possible to also add constraints to the optimization context during search.\n    You have to set the option opt.incremental=true to be able to add constraints. The option\n    disables some pre-processing functionality that removes variables from the constraints. \n\nVersion 4.8.17\n==============\n - fix breaking bug in python interface for user propagator pop\n - integrate fixes to z3str3\n - initial support for nested algebraic datatypes with sequences\n - initiate map/fold operators on sequences - full integration for next releases\n - initiate maxdiff/mindiff on arrays - full integration for next releases\n\nExamples:\n\n```\n(declare-sort Expr)\n(declare-sort Var)\n(declare-datatypes ((Stmt 0)) \n  (((Assignment (lval Var) (rval Expr)) \n    (If (cond Expr) (th Stmt) (el Stmt)) \n    (Seq (stmts (Seq Stmt))))))\n\n(declare-const s Stmt)\n(declare-const t Stmt)\n\n(assert ((_ is Seq) t))\n(assert ((_ is Seq) s))\n(assert (= s (seq.nth (stmts t) 2)))\n(assert (>= (seq.len (stmts s)) 5))\n(check-sat)\n(get-model)\n(assert (= s (Seq (seq.unit s))))\n(check-sat)\n```\n \nVersion 4.8.16\n==============\n - initial support for Darwin Arm64 (for M1, M2, .. users) thanks to zwimer and Anja Petkovi'c\n   Komel for updates.\n   Java is not yet supported, pypi native arm64 distributions are not yet supported.\n   cmake dependency added to enable users to build for not-yet-supported platforms directly;\n   specifically M1 seems to come up.\n - added functionality to user propagator decisions. Thanks to Clemens Eisenhofer.\n - added options for rc2 and maxres-bin to maxsat (note that there was no real difference measured\n   from maxres on MaxSAT unweighted so default option is unchanged)\n - improved search for mutex constraints (at-most-1 constraints) among soft\n   constraints for maxsat derived from approach used in rc2 sample.\n - multiple merges\n\nVersion 4.8.15\n==============\n - elaborate user propagator API. Change id based scheme to expressions\n - includes a Web Assembly ffi API thanks to Kevin Gibbons\n\nVersion 4.8.14\n==============\n - fixes Antimirov derivatives for intersections and unions required\n   required for solving non-emptiness constraints.\n - includes x86 dll in nuget package for Windows.\n - exposes additional user propagator functionality \n\nVersion 4.8.13\n==============\nThe release integrates various bug fixes and tuning.\n\nVersion 4.8.12\n==============\nRelease provided to fix git tag discrepancy issues with 4.8.11  \n\n\nVersion 4.8.11\n==============\n  - self-contained character theory, direct support for UTF8, Unicode character sets.\n    Characters are by default unicode with an 18 bit range.\n  - support for incremental any-time MaxSAT using the option opt.enable_lns. The API\n    allows registering a callback function that is invoked on each incremental improvement\n    to objectives. \n\nVersion 4.8.10\n==============\n  - rewritten arithmetic solver replacing legacy arithmetic solver and on by default\n\nVersion 4.8.9\n=============\n- New features\n  - significant improvements to regular expression solving\n  - expose user theory plugin. It is a leaner user theory plugin that was once available.\n    It allows for registering callbacks that react to when bit-vector and Boolean variables\n    receive fixed values.\n- Bug fixes\n  - many\n- Notes\n  - the new arithmetic theory is turned on by default. It _does_ introduce regressions on \n    several scenarios, but has its own advantages. Users can turn on the old solver by setting smt.arith.solver=2.\n    Depending on feedback, we may turn toggle this default setting again back to smt.arith.solver=2.\n\nVersion 4.8.8\n=============\n- New features\n  - rewritten NIA (non-linear integer arithmetic) core solver \n    It is enabled in selected theories as default. \n    The legacy arithmetic solver remains the overall default in this release\n    as the rewritten solver shows regressions (on mainly NRA problems).\n  - recursive function representation without hoisting ite expressions. Issue #2601\n  - model-based interpolation for quantifier-free UF, arithmetic \n  - Julia bindings over the C++ API, thanks to ahumenberger \n- Bug fixes\n  - numerous, many based on extensive fuzz testing. \n    Thanks to 5hadowblad3, muchang, numairmansur, rainoftime, wintered\n- Notes\n  - recursive functions are unfolded with separate increments based on unsat core\n    analysis of blocking literals that are separate for different recursive functions.   \n  - the seq (string) solver has been revised in several ways and likely shows some \n    regressions in this release.\n\nVersion 4.8.7\n=============\n- New features\n  - setting parameter on solver over the API by\n    solver.smtlib2_log=<filename>\n    enables tracing calls into the solver as SMTLIB2 commands.\n    It traces, assert, push, pop, check_sat, get_consequences.\n- Notes\n  - various bug fixes\n  - remove model_compress. Use model.compact\n  - print weights with quantifiers when weight is != 1\n  \n\nVersion 4.8.6\n=============\n- Notes\n  - various bug fixes\n  - built in support for PIP, thanks to Audrey Dutcher\n  - VS compilation mode including misc flags for managed packages\n\nVersion 4.8.5\n=============\n- Notes\n  - various bug fixes\n\nVersion 4.8.4\n=============\n\n- Notes\n  - fixes bugs\n  - a substantial update to how the seq theory solver handles regular\n    expressions. Other performance improvements to the seq solver.\n  - Managed .NET DLLs include dotnet standard 1.4 on supported platforms.\n  - Windows Managed DLLs are strong signed in the released binaries.\n\nVersion 4.8.3\n=============\n- New features\n  - Native handling of recursive function definitions, thanks to Simon Cruanes\n  - PB rounding based option for conflict resolution when reasoning about PB constraints.\n  - Access to numeral constants as a double from the native API.\n\n- Notes\n  - fixes several bugs discovered since the 4.8.1 release.\n\nVersion 4.8.2\n=============\n- Post-Release. \n\nVersion 4.8.1\n=============\n- Release. Bug-fix for 4.8.0\n\nVersion 4.8.0\n=============\n\n- New requirements:\n  - A breaking change to the API is that parsers for SMT-LIB2 formulas return a vector of \n    formulas as opposed to a conjunction of formulas. The vector of formulas correspond to \n    the set of \"assert\" instructions in the SMT-LIB input.\n\n- New features\n   - A parallel mode is available for select theories, including QF_BV. \n     By setting parallel.enable=true Z3 will spawn a number of worker threads proportional to the \n     number of available CPU cores to apply cube and conquer solving on the goal.\n   - The SAT solver by default handle cardinality and PB constraints using a custom plugin \n     that operates directly on cardinality and PB constraints.\n   - A \"cube\" interface is exposed over the solver API. \n   - Model conversion is first class over the textual API, such that subgoals created from running a \n     solver can be passed in text files and a model for the original formula can be recreated from the result.\n   - This has also led to changes in how models are tracked over tactic subgoals. The API for \n     extracting models from apply_result have been replaced.\n   - An optional mode handles xor constraints using a custom xor propagator. \n     It is off by default and its value not demonstrated.\n   - The SAT solver includes new inprocessing techniques that are available during simplification.\n     It performs asymmetric tautology elimination by default, and one can turn on more powerful inprocessing techniques \n     (known as ACCE, ABCE, CCE). Asymmetric branching also uses features introduced in Lingeling by exploiting binary implication graphs.\n     Use sat.acce=true to enable the full repertoire of inprocessing methods. By default, clauses that are \"eliminated\" by acce are tagged\n     as lemmas (redundant) and are garbage collected if their glue level is high.\n   - Substantial overhaul of the spacer horn clause engine.\n   - Added basic features to support Lambda bindings.\n   - Added model compression to eliminate local function definitions in models when\n     inlining them does not incur substantial overhead. The old behavior, where models are left\n     uncompressed can be replayed by setting the top-level parameter model_compress=false.\n   - Integration of a new solver for linear integer arithmetic and mixed linear integer arithmetic by Lev Nachmanson.\n     It incorporates several improvements to QF_LIA solving based on\n     . using a better LP engine, which is already the foundation for QF_LRA\n     . including cuts based on Hermite Normal Form (thanks to approaches described \n       in \"cuts from proofs\" and \"cutting the mix\").\n     . extracting integer solutions from LP solutions by tightening bounds selectively.\n       We use a generalization of Bromberger and Weidenbach that allows avoiding selected\n       bounds tightenings (https://easychair.org/publications/paper/qGfG).\n     It solves significantly more problems in the QF_LIA category and may at this point also \n     be the best solver for your problem as well.\n     The new solver is enabled only for select SMT-LIB logics. These include QF_LIA, QF_IDL, and QF_UFLIA.\n     Other theories (still) use the legacy solver for arithmetic. You can enable the new solver by setting\n     the parameter smt.arith.solver=6 to give it a spin.\n\n\n- Removed features:\n  - interpolation API\n  - duality engine for constrained Horn clauses.\n  - pdr engine for constrained Horn clauses. The engine's functionality has been \n    folded into spacer as one of optional strategies.\n  - long deprecated API functions have been removed from z3_api.h\n  \n  \n\nVersion 4.7.1\n=============\n\n- New requirements:\n  - uses stdbool and stdint as part of z3.\n\n- New features:\n  - none\n\n- Removed features:\n  - none\n\n- Notes:\n   This is a minor release prior to a set of planned major updates.\n   It uses minor version 7 to indicate that the use of stdbool and\n   stdint are breaking changes to consumers of the C-based API.\n\nVersion 4.6.0\n=============\n\n- New requirements:\n  - C++11 capable compiler to build Z3.\n  - C++ API now requires C++11 or newer.\n\n- New features (including):\n  - A new string solver from University of Waterloo\n  - A new linear real arithmetic solver\n  - Changed behavior for optimization commands from the SMT2 command-line interface.\n    Objective values are no longer printed by default. They can be retrieved by\n    issuing the command (get-objectives). Pareto front objectives are accessed by\n    issuing multiple (check-sat) calls until it returns unsat.\n\n- Removed features:\n  - Removed support for SMT-LIB 1.x\n\n\nVersion 4.5.0\n=============\n\n- New features:\n  - New theories of strings and sequences.\n  - Consequence finding API \"get-consequences\" to compute\n    set of consequences modulo hard constraints and set of\n    assumptions. Optimized implementations provided for finite\n    domains (QF_FD) and for most SMT logics. \n  - CMake build system (thanks @delcypher).\n  - New API functions, including accessing assertions, parsing SMT-LIB benchmarks.\n  - Updated and improved OCaml API (thanks @martin-neuhaeusser).\n  - Updated and improved Java API (thanks @cheshire).\n  - New resource limit facilities to avoid non-deterministic timeout behaviour.\n    You can enable it from the command-line using the switch rlimit=<numeral>.\n  - New bit-vector simplification and ackermannization \n    tactics (thanks @MikolasJanota, @nunoplopes).\n  - QSAT: a new solver for satisfiability of quantified arithmetic formulas. \n    See: Bjorner, Janota: Playing with Quantified Satisfaction, LPAR 2016.\n    This is the new default solver for logics LIA, LRA, NRA. It furthermore\n    can be applied as a tactic on quantified formulas using algebraic \n    data-types (but excluding selector sub-terms because Z3 does not\n    specify the semantics of applying a selector to a non-matching \n    constructor term). \n  - A specialized logic QF_FD and associated incremental solver \n    (that supports push/pop). \n    The QF_FD domain comprises of bit-vectors, enumeration data-types \n    used only in equalities, and bounded integers: Integers used in \n    QF_FD problems have to be constrained by a finite bound. \n  - Queries in the fixedpoint engine are now function symbols and not \n    formulas with free variables. This makes the association of\n    free variables in the answers unambiguous. To emulate queries \n    over compound formulas, introduce a fresh predicate whose \n    arguments are the relevant free variables in the formula and add a rule\n    that uses the fresh predicate in the head and formula in the body.\n  - Minimization of unsat cores is available as an option for the SAT and SMT cores.\n    By setting smt.core.minimize=true resp. sat.core.minimize=true\n    cores produced by these modules are minimized.    \n\n- A multitude of bugs has been fixed.\n\n\nVersion 4.4.1\n=============\n\n- This release marks the transition to the new GitHub fork & pull model; the unstable and contrib branches will be retired with all new contributions going into the master branch directly.\n\n- A multitude of bugs has been fixed.\n\n- New Feature: Support for optimization queries. The SMT-LIB2 command language\n  is augmented by three commands (maximize <expr>), (minimize <expr) \n  and (assert-soft <expr> [:weight <numeral>] [:id <identifier>]). \n  The programmatic API also contains a dedicated context for solving \n  optimization queries. The TACAS 2015 tool paper by Bjorner, Dung and \n  Fleckenstein describes additional details and the online tutorial on \n  http://rise4fun.com/z3opt illustrates some uses.\n\n\nVersion 4.4.0\n=============\n\n- New feature: Support for the theory of floating-point numbers. This comes in the form of logics (QF_FP and QF_FPBV), tactics (qffp and qffpbv), as well as a theory plugin that allows theory combinations. Z3 supports the official SMT theory definition of FP (see http://smtlib.cs.uiowa.edu/theories/FloatingPoint.smt2) in SMT2 files, as well as all APIs.\n\n- New feature: Stochastic local search engine for bit-vector formulas (see the qfbv-sls tactic).\n  See also: Froehlich, Biere, Wintersteiger, Hamadi: Stochastic Local Search \n  for Satisfiability Modulo Theories, AAAI 2015.\n\n- Upgrade: This release includes a brand new OCaml/ML API that is much better integrated with the build system, and hopefully also easier to use than the previous one.\n\n- Fixed various bugs reported by Marc Brockschmidt, Venkatesh-Prasad Ranganath, Enric Carbonell, Morgan Deters, Tom Ball, Malte Schwerhoff, Amir Ebrahimi, Codeplex users rsas, clockish, Heizmann, susmitj, steimann, and Stackoverflow users user297886.\n\n\nVersion 4.3.2\n=============\n\n- Added preliminary support for the theory of floating point numbers (tactics qffpa, qffpabv, and logics QF_FPA, QF_FPABV).\n\n- Added the interpolation features of iZ3, which are now integrated into Z3. \n\n- Fixed a multitude of bugs and inconsistencies that were reported to us either in person, by email, or on Codeplex. Of those that we do have records of, we would like to express our gratitude to:\n    Vladimir Klebanov, Konrad Jamrozik, Nuno Lopes, Carsten Ruetz, Esteban Pavese, Tomer Weiss, Ilya Mironov, Gabriele Paganelli, Levent Erkok, Fabian Emmes, David Cok, Etienne Kneuss, Arlen Cox, Matt Lewis, Carsten Otto, Paul Jackson, David Monniaux, Markus Rabe, Martin Pluecker, Jasmin Blanchette, Jules Villard, Andrew Gacek, George Karpenkov, Joerg Pfaehler, and Pablo Aledo\n    as well as the following Codeplex users that either reported bugs or took part in discussions:\nxor88, parno, gario, Bauna, GManNickG, hanwentao, dinu09, fhowar, Cici, chinissai, barak_cohen, tvalentyn, krikunts, sukyoung, daramos, snedunuri, rajtendulkar, sonertari, nick8325, dvitek, amdragon, Beatgodes, dmonniaux, nickolai, DameNingen, mangpo, ttsiodras, blurium, sbrickey, pcodemod, indranilsaha, apanda, hougaardj, yoff, EfForEffort, Ansotegui, scottgw, viorelpreoteasa, idudka, c2855337, gario, jnfoster, omarmrivas, switicus, vosandi, foens, yzwwf, Heizmann, znajem, ilyagri, hougaardj, cliguda, rgrig, 92c849c1ccc707173, edmcman, cipher1024, MichaelvW, hellok, n00b42, ic3guy, Adorf, tvcsantos, zilongwang, Elarnon, immspw, jbridge99, danliew, zverlov, petross, jmh93, dradorf, fniksic, Heyji, cxcfan, henningg, wxlfrank, rvprasad, MovGP0, jackie1015, cowang, ffaghih, sanpra1989, gzchenyin, baitman, xjtulixiangyang, andreis, trucnguyenlam, erizzi, hanhchi, qsp, windypan, vadave, gradanne, SamWot, gsingh93, manjeetdahiya, zverlov, RaLa, and regehr.\n\n- New parameter setting infrastructure. Now, it is possible to set parameter for Z3 internal modules. Several parameter names changed. Execute `z3 -p` for the new parameter list.\n\n- Added get_version() and get_version_string() to Z3Py\n\n- Added support for FreeBSD. Z3 can be compiled on FreeBSD using g++. \n\n- Added support for Python 3.x.\n\n- Reverted to `(set-option :global-decls false)` as the default. In Z3 4.3.0 and Z3 4.3.1, this option was set to true.\n  Thanks to Julien Henry for reporting this problem.\n\n- Added `doc` directory and scripts for automatically generating the API documentation.\n\n- Removed 'autoconf' dependency. We do not need to execute 'autoconf' and './configure' anymore to build Z3.\n\n- Fixed incorrect result returned by Z3_solver_get_num_scopes. (Thanks to Herman Venter). This bug was introduced in Z3 4.3.0\n\n- Java bindings. To enable them, we must use the option `--java` when executing the `mk_make.py` script. Example: `python scripts/mk_make.py --java`\n\n- Fixed crash when parsing incorrect formulas. The crash was introduced when support for \"arithmetic coercions\" was added in Z3 4.3.0.\n\n- Added new option to mk_make to allow users to specify where python bindings (Z3Py) will be installed. (Thanks to Dejan Jovanovic for reporting the problem).\n\n- Fixed crash reported at http://z3.codeplex.com/workitem/10\n\n- Removed auxiliary constants created by the nnf tactic from Z3 models.\n  \n- Fixed problem in the pretty printer. It was not introducing quotes for attribute names such as |foo:10|.\n\n- Fixed bug when using assumptions (Thanks to Philippe Suter and Etienne Kneuss)\n  Consider the following example:\n      (assert F)\n      (check-sat a)\n      (check-sat)\n  If 'F' is unsatisfiable independently of the assumption 'a', and \n  the inconsistency can be detected by just performing propagation,\n  Then, version <= 4.3.1 may return\n      unsat\n      sat\n  instead of\n      unsat\n      unsat\n  We say may because 'F' may have other unsatisfiable cores.\n\n- Fixed bug reported at http://stackoverflow.com/questions/13923316/unprintable-solver-model\n\n- Fixed timers on Linux and FreeBSD.\n\n- Fixed crash reported at http://z3.codeplex.com/workitem/11.\n\n- Fixed bug reported at http://stackoverflow.com/questions/14307692/unknown-when-using-defs\n\n- Relax check_logic procedure. Now, it accepts coercions (to_real) automatically introduced by Z3. (Thanks to Paul Jackson). This is a fix for http://z3.codeplex.com/workitem/19.\n\n- Fixed http://stackoverflow.com/questions/14524316/z3-4-3-get-complete-model.\n\n- Fixed bugs in the C++ API (Thanks to Andrey Kupriyanov).\n\n- Fixed bug reported at http://z3.codeplex.com/workitem/23 (Thanks to Paul Jackson).\n\n- Fixed bug reported at http://stackoverflow.com/questions/15226944/segmentation-fault-in-z3 (Thanks to Tianhai Liu).\n\nVersion 4.3.1\n=============\n\n- Added support for compiling Z3 using clang++ on Linux and OSX\n\n- Added missing compilation option (-D _EXTERNAL_RELEASE) in release mode.\n\nVersion 4.3.0\n=============\n\n- Fixed bug during model construction reported by Heizmann (http://z3.codeplex.com/workitem/5)\n\n- Remark: We skipped version 4.2 due to a mistake when releasing 4.1.2. Version 4.1.2 was accidentally tagged as 4.2. \n  Thanks to Claude Marche for reporting this issue.\n  From now on, we are also officially moving to a 3 number naming convention for version numbers. \n  The idea is to have more frequent releases containing bug fixes. \n\n- The Z3 codebase was reorganized, we also have a new build system.\n  In all platforms, we need Python 2.7.x installed.\n  On Windows, you can build using Visual Studio Command Prompt.\n  On Linux, OSX, Cygwin, you can build using g++. See README\n  for compilation instructions.\n\n- Removed tactic mip. It was based on code that was deleted during the code reorganization. \n     \n- Fixed compilation problems with clang/llvm. Many thanks to Xi Wang for finding the problem, and suggesting the fix. \n\n- Now, Z3 automatically adds arithmetic coercions: to_real and to_int.\n  Option (set-option :int-real-coercions false) disables this feature.\n  If SMTLIB2_COMPLIANT=true in the command line, then :int-real-coercions is also set to false.\n\n- SMTLIB2_COMPLIANT is false by default. Use command line option SMTLIB2_COMPLIANT=true to enable it back.\n\n- Added \"make install\" and \"make uninstall\" to Makefile.in.\n  \n- Added \"make install-z3py\" and \"make uninstall-z3py\" to Makefile.in.\n\n- Fixed crash/bug in the simplifier. The crash occurred when option \":sort-sums true\" was used.\n\n- Added \"--with-python=<path>\" option to configure script.\n\n- Cleaned c++, maxsat, test_mapi examples.\n\n- Move RELEASE_NOTES files to source code distribution.\n\n- Removed unnecessary files from source code distribution.\n\n- Removed unnecessary compilation modes from z3-prover.sln.\n\n- Added Xor procedure to Z3Py.\n\n- Z3 by default switches to an incremental solver when a Solver object is used to solve many queries.\n  In the this version, we switch back to the tactic framework if the incremental solver returns \"unknown\".\n\n- Allow negative numerals in the SMT 2.0 frontend. That is, Z3 SMT 2.0 parser now accepts numerals such as \"-2\". It is not needed to encode them as \"(- 2)\" anymore.\n  The parser still accepts -foo as a symbol. That is, it is *not* a shorthand for (- foo).\n  This feature is disabled when SMTLIB2_COMPLIANT=true is set in the command line.\n\n- Now, Z3 can be compiled inside cygwin using gcc.\n\n- Fixed bug in the unsat core generation.\n\nFirst source code release (October 2, 2012)\n===========================================\n\n- Fixed bug in Z3Py. The method that builds Z3 applications could crash if one of the arguments have to be \"casted\" into the correct sort (Thanks to Dennis Yurichev).\n\n- Fixed bug in datatype theory (Thanks to Ayrat).\n\n- Fixed bug in the definition of MkEmptySet and MkFullSet in the .Net API.\n\n- Display warning message and ignore option CASE_SPLIT=3,4 or 5 when auto configuration is enabled (AUTO_CONFIG=true) (Thanks Tobias from StackOverflow). \n\n- Made the predicates <, <=, > and >= chainable as defined in the SMT 2.0 standard (Thanks to Matthias Weiler). \n\n- Added missing Z3_decl_kind's for datatypes: Z3_OP_DT_CONSTRUCTOR, Z3_OP_DT_ACCESSOR, Z3_OP_DT_RECOGNISER.\n\n- Added support for numbers in scientific notation at Z3_ast Z3_mk_numeral(__in Z3_context c, __in Z3_string numeral, __in Z3_sort ty).\n\n- New builtin symbols in the arithmetic theory: pi, euler, sin, cos, tan, asin, acos, atan, sinh, cosh, tanh, asinh, acosh, atanh. The first two are constants, and the others are unary functions. These symbols are not available if a SMT 2.0 logic is specified (e.g., QF_LRA, QF_NRA, QF_LIA, etc) because these symbols are not defined in these logics. That is, the new symbols are only available if the logic is not specified.\n\nVersion 4.1\n===========\n\n- New OCAML API (Many thanks to Josh Berdine)\n\n- CodeContracts in the .NET API (Many thanks to Francesco Logozzo).\n  Users can now check whether they are using the .NET API correctly\n  using <a href=\"http://msdn.microsoft.com/en-us/devlabs/dd491992\">Clousot</a>.\n\n- Added option :error-behavior. The default value is\n  continued-execution. Now, users can force the Z3 SMT 2.0 frontend to\n  exit whenever an error is reported.  They just have to use the\n  command (set-option :error-behavior immediate-exit).\n\n- Fixed bug in term-if-then-else elimination (Thanks to Artur Niewiadomski).  \n\n- Fixed bug in difference logic detection code (Thanks to Dejan Jovanovic).\n      \n- Fixed bug in the pseudo-boolean preprocessor (Thanks to Adrien Champion).\n\n- Fixed bug in bvsmod preprocessing rules (Thanks to Dejan Jovanovic).\n\n- Fixed bug in Tactic tseitin-cnf (Thanks to Georg Hofferek).\n\n- Added missing simplification step in nlsat. \n\n- Fixed bug in model construction for linear real arithmetic (Thanks to Marcello Bersani).\n\n- Fixed bug in preprocessor that eliminated rational powers (e.g., (^ x (/ 1.0 2.0))), the bug affected only problems where the denominator was even (Thanks to Johannes Eriksson).\n\n- Fixed bug in the k-th root operation in the algebraic number package. The result was correct, but the resulting polynomial could be incorrectly tagged as minimal and trigger nontermination on comparison operations. (Thanks to Johannes Eriksson).\n  \n- Fixed bug affecting problems containing patterns with n-ary arithmetic terms such as (p (+ x y 2)). This bug was introduced in Z3 4.0. (Thanks to Paul Jackson). \n\n- Fixed crash when running out of memory.\n\n- Fixed crash reported by Alex Summers. The crash was happening on scripts that contain quantifiers, and use boolean formulas inside terms.\n\n- Fixed crash in the MBQI module (Thanks to Stephan Falke).     \n\n- Fixed bug in the E-matching engine. It was missing instances of multi-patterns (Thanks Alex Summers). \n      \n- Fixed bug in Z3Py pretty printer.\n\n- The pattern inference module does not generate warning messages by default anymore. This module was responsible for producing messages such as: \"WARNING: failed to find a pattern for quantifier (quantifier id: k!199)\". The option PI_WARNINGS=true can be used to enable these warning messages.\n\n- Added missing return statements in z3++.h (Thanks to Daniel Neider).\n\n- Removed support for TPTP5 and Simplify input formats. \n\n- Removed support for Z3 (low-level) input format. It is still available in the API.\n\n- Removed support for \"SMT 1.5\" input format (aka .smtc files). This was a hybrid input format that was implemented while the SMT 2.0 standard was being designed. Users should move to SMT 2.0 format. Note that SMT 1.0 format is still available.\n\n- Made tseitin-cnf tactic more \"user friendly\". It automatically applies required transformations needed to eliminate operators such as: and, distinct, etc.\n\n- Implemented new PSC (principal subresultant coefficient) algorithm. This was one of the bottlenecks in the new nlsat solver/tactic.\n\nVersion 4.0\n===========\n\nZ3 4.0 is a major release. The main new features are:\n- New C API, and it is backwards compatible, but several methods are marked as deprecated.\n  In the new API, many solvers can be created in the same context. It also includes support\n  for user defined strategies using Tactics. It also exposes a new interface for browsing models.\n\n- A thin C++ layer around the C API that illustrates how to \n  leverage reference counting of ast objects.\n  Several examples can be found in the directory 'examples/c++'.\n\n- New .NET API together with updated version of the legacy .NET API. \n  The new .NET API supports the new features, Tactics, Solvers, Goals, \n  and integration of  with reference counting. Terms and sorts life-times \n  no longer requires a scoping discipline.\n\n- <a class=\"el\" href=\"http://rise4fun.com/Z3Py/tutorial/guide\">Z3Py: Python interface for Z3</a>. \n  It covers all main features in the Z3 API.\n\n- <a class=\"el\" href=\"http://research.microsoft.com/apps/pubs/default.aspx?id=159549\">NLSAT solver</a> for nonlinear arithmetic.  \n       \n- The PDR algorithm in muZ. \n   \n- iZ3: an interpolating theorem prover built on top of Z3 (\\ref iz3documentation). iZ3 is only available for Windows and Linux. \n\n- New logging infrastructure. Z3 logs are used to record every Z3 API call performed by your application.\n  If you find a bug, just the log need to be sent to the Z3 team.\n  The following APIs were removed: Z3_trace_to_file, Z3_trace_to_stderr, Z3_trace_to_stdout, Z3_trace_off. \n  The APIs: Z3_open_log, Z3_append_log and Z3_close_log do not receive a Z3_context anymore.\n  When creating a log, you must invoke Z3_open_log before any other Z3 function call.\n  The new logs are much more precise. \n  However, they still have two limitations. They are not useful for logging applications that use callbacks (e.g., theory plugins) \n  because the log interpreter does not have access to these callbacks.\n  They are not precise for applications that are using multiple threads for processing multiple Z3 contexts.\n        \n- Z3 (for Linux and OSX) does not depend on GMP anymore.\n\n- Z3 1.x backwards compatibility macros are defined in z3_v1.h. If you still use them, you have to explicitly include this file.\n      \n- Fixed all bugs reported at Stackoverflow.\n\nTemporarily disabled features:\n\n- User theories cannot be used with the new Solver API yet. Users may still use them with the deprecated solver API.\n\n- Parallel Z3 is also disabled in this release. However, we have parallel combinators for creating strategies (See <a href=\"http://rise4fun.com/Z3/tutorial/strategies\"> tutorial</a>).\n      \nThe two features above will return in future releases. \n\nHere is a list of all <a class=\"el\" href=\"deprecated.html\">deprecated functions</a>.\n\nVersion 3.2\n===========\n\nThis is a bug-fix refresh that fixes reported problems with 3.1.\n        \n- Added support for chainable and right associative attributes. \n\n- Fixed model generation for QBVF (aka UFBV) logic. Now, Z3 officially supports the logics BV and UFBV. \n  These are essentially QF_BV and QF_UFBV with quantifiers.\n\n- Fixed bug in eval and get-value commands. Thanks to Levent Erkok.\n\n- Fixed performance bug that was affecting VCC and Slayer. Thanks to Michal Moskal.\n\n- Fixed time measurement on Linux. Thanks to Ayrat Khalimov.\n\n- Fixed bug in destructive equality resolution (DER=true).\n        \n- Fixed bug in map operator in the theory of arrays. Thanks to Shaz Quadeer.\n        \n- Improved OCaml build scripts for Windows. Thanks to Josh Berdine.\n        \n- Fixed crash in MBQI (when Real variables were used). \n\n- Fixed bugs in quantifier elimination. Thanks to Josh Berdine.\n\n- Fixed crash when an invalid datatype declaration is used.\n        \n- Fixed bug in the SMT2 parser.        \n\n- Fixed crash in quick checker for quantified formulas. Thanks to Swen Jacobs.\n\n- Fixed bug in the bvsmod simplifier. Thanks to Trevor Hansen.\n\n- New APIs: \\c Z3_substitute and \\c Z3_substitute_vars.\n\n- Fixed crash in MBQI. Thanks to Dejan Jovanovic.\n\nVersion 3.1\n===========\n\nThis is a bug-fix refresh that fixes reported problems with 3.0.\n\n- Fixed a bug in model generation. Thanks to Arlen Cox and Gordon Fraser.\n        \n- Fixed a bug in Z3_check_assumptions that prevented it from being used between satisfiable instances. Thanks to Krystof Hoder.\n\n- Fixed two bugs in quantifier elimination. Thanks to Josh Berdine.        \n\n- Fixed bugs in the preprocessor.\n\n- Fixed performance bug in MBQI. Thanks to Kathryn Stolee.\n\n- Improved strategy for QBVF (aka UFBV) logic.\n\n- Added support for negative assumptions in the check-sat command.\n\nVersion 3.0\n===========\n\n- Fully compliant SMT-LIB 2.0 (SMT2) front-end. The old front-end is still available (command line option -smtc).\n  The <a class=\"el\" href=\"http://rise4fun.com/z3/tutorial/guide\">Z3 Guide</a> describes the new front-end.\n\n- Parametric inductive datatypes, and parametric user defined types.\n\n- New SAT solver. Z3 can also read dimacs input formulas.\n\n- New Bitvector (QF_BV) solver. The new solver is only available when using the new SMT2 front-end.\n\n- Major performance improvements.\n\n- New preprocessing stack.\n\n- Performance improvements for linear and nonlinear arithmetic. The improvements are only available when using the SMT2 front-end.\n\n- Added API for parsing SMT2 files.\n\n- Fixed bug in AUTO_CONFIG=true. Thanks to Alberto Griggio.\n\n- Fixed bug in the Z3 simplifier cache. It was not being reset during backtracking. Thanks to Alberto Griggio.\n\n- Fixed many other bugs reported by users.\n\n- Improved model-based quantifier instantiation (MBQI).\n\n- New solver for Quantified Bitvector Logic (QBVF). \n\n- Z3 checks the user specified logic.\n        \n- <a href=\"http://www.cs.miami.edu/~tptp/\">TPTP</a> 5 front-end.\n\nVersion 2.19\n============\n\n- In the SMT-LIB 1.0 frontend, Z3 will only display the model when requested by the user (MODEL=true).\n\n- Fixed bug in the variable elimination preprocessor. Thanks to Alberto Griggio.\n        \n- Fixed bug in the expression strong simplifier. Thanks to Marko.\n\n- Fixed bug in the Z3 auto configuration mode. Thanks to Vladimir Klebanov.\n\n- Fixed bug when model generation is used in the context of user-defined-theories. Thanks to Philippe Suter.\n\n- Fixed bug in quantifier elimination procedure. Thanks to Mikkel Larsen Pedersen.\n        \n- Improved speed of Z3 lexer for SMT-LIB frontend.\n\n- Added a sample under examples/fixedpoints to illustrate using\n\t  the API for pluggable relations.\n\n- Added an API method \\c Z3_get_param_value for retrieving a \n  configuration value given a configuration parameter name.\n\nVersion 2.18\n============\n\n- Z3 has a new mode for solving fixed-point queries.\n  It allows formulating Datalogish queries combined with constraints.\n  <a class=\"el\" href=\"http://rise4fun.com/z3py/tutorial/fixedpoints\">Try it online</a>.\n\n- Fixed bug that affects the array theory over the API using\n  RELEVANCY=0. Thanks to Josh Berdine.\n\nVersion 2.17\n============\n      \n- Z3 has new model finding capabilities for Quantified SMT formulas.\n  The new features are enabled with <tt>MBQI=true</tt>.\n  (Model Based Quantifier Instantiation). MBQI implements a\n  counter-example based refinement loop, where candidate models are\n  built and checked. When the model checking step fails, it creates new\n  quantifier instantiations. The models are returned as simple\n  functional programs. The new feature is also a decision procedure for\n  many known decidable fragments such as: EPR (Effectively\n  Propositional), Bradley&Manna&Sipma's Array Property Fragment (VMCAI'06), Almost\n  Uninterpreted Fragment (Complete instantiation for quantified SMT formulas, CAV'09),\n  McPeak&Necula's list fragment (CAV'05), QBVF (Quantified Bit-Vector Formulas FMCAD'10), \n  to cite a few. \n  MBQI is useful for checking the consistency of background axiomatizations,\n  synthesizing functions, and building real counterexamples for\n  verification tools. Users can constrain the search space by\n  providing templates for function symbols, and constraints\n  on the size of the universe and range of functions.\n          \n- Fixed bug in the command <tt>(simplify [expr])</tt> SMT-LIB 2.0 frontend.\n        \n- New model pretty printer. The old style is still available (option <tt>MODEL_V2=true</tt>).\n  Z3 1.x style is also available (option <tt>MODEL_V1=true</tt>). \n\n- Removed \\c ARRAY_PROPERTY option. It is subsumed by <tt>MBQI=true</tt>.\n\n- Z3 uses the <tt>(set-logic [name])</tt> to configure itself.\n  \n- Assumptions can be provided to the \\c check-sat command.\n  The command <tt>(check-sat [assumptions])</tt> checks the satisfiability of the logical context modulo\n  the given set of assumptions. The assumptions must be Boolean constants or\n  the negation of Boolean constants. When the logical context is\n  unsatisfiable modulo the given assumptions, Z3 will display a subset\n  of the \\c assumptions that contributed to the conflict. Lemmas\n  learned during the execution of \\c check-sat are preserved.\n\n- Added command <tt>(echo [string])</tt> to the SMT-LIB 2.0 frontend.\n\n- Z3 models explicitly include an interpretation for uninterpreted sorts.\n  The interpretation is presented using the \\c define-sort primitive.\n  For example, \n  \\code\n      (define-sort S e_1 ... e_n)          \n  \\endcode\n  states that the interpretation of the uninterpreted sort S is finite, and\n  its universe is composed by values \\c e_1, ..., \\c e_n.\n\n- Options \\c WARNING and \\c VERBOSE can be set in the SMT-LIB 2.0 frontend using\n  the commands <tt>(set-option WARNING <flag>)</tt> <tt>(set-option VERBOSE <flag>)</tt>.\n        \n- Fixed unintentional side-effects in the Z3 pretty printer. Thanks to Swen Jacobs.\n\n- Added interpreted constants of the form <tt>as-array[f]</tt>. The constants\n  are used in models produced by Z3 to encode the interpretation of arrays. \n  The following axiom scheme axiomatizes the new constants:\n  \\code\n     (forall (x1 S1) ... (xn Sn) (= (select as-array[f] x1 ... xn) (f x1 ... xn)))\n  \\endcode\n        \n- Fixed bug in the option MACRO_FINDER=true.\n\n- Fixed bug in the <tt>(eval [expr])</tt> command in the SMT-LIB 2.0 frontend.\n\n- Soundness bug in solver for array property fragment. Thanks to Trevor Hansen.\n\nVersion 2.16\n============\n\nThe following bugs are fixed in this release:\n\n- Bugs in quantifier elimination. Thanks to Mikkel Larsen Pedersen.\n\n- Crash in non-linear arithmetic. Thanks to Trevor Hansen.\n\n- Unsoundness in mixed integer-linear version using to_real. Thanks to Hirai.\n\n- A crash and bugs in check_assumptions feature. Thanks to Akash Lal and Shaz Qadeer.\n\nVersion 2.15\n============\n\nThe following bugs are fixed in this release:\n\n- A bug in the quantifier elimination that affects nested\n  alternating quantifiers that cannot be fully eliminated.\n\n- A crash in proof generation. Thanks to Sascha Boehme.\n\nVersion 2.14\n============\n\nThe following bugs are fixed in this release:\n\n- A crash in arithmetic simplification. Thanks to Trevor Hansen.\n\n- An unsoundness bug in the quantifier elimination. \n  It affects the equivalence of answers that are computed \n  in some cases.\n\n- Incorrect printing of parameters and other values\n  in SMT-LIB2 mode.\n  Thanks to Tjark Weber.\n\nVersion 2.13\n============\n\nThe following bugs are fixed in this release:\n\n- Soundness bug in solver for array property fragment. Thanks to Trevor Hansen.\n\n- Soundness bug introduced in macro expansion utilities. Thanks to Wintersteiger.\n\n- Incorrect handling of QF_NRA. Thanks to Trevor Hansen.\n\n- Mixup between SMT2 and SMT1 pretty printing formats. Thanks to Alvin Cheung and Tjark Weber.\t\n\nVersion 2.12\n============\n\nNews:\n\t\n- Philippe Suter made a JNI binding available.\n  There is also an existing Python binding by Sascha Boehme.\n  See \\ref contrib.\n\nThe following features are added in this release:\n\n- Enable check_assumptions without enclosing push/pop.\n  This resolves the limitation described \n  in \\ref sub_release_limitations_2_0.\n\n- Expose coefficients used in arithmetical proofs.\n\n- Allow quantified theory axioms.\n\nThe following bugs are fixed in this release:\n\n- Fixes to the SMT-LIB 2.0 pretty printing mode.\n\n- Detect miss-annotated SMT-LIB benchmarks to avoid crashes when \n  using the wrong solvers. Thanks to Trevor Hansen.\n\n- A digression in the managed API from 2.10 \n  when passing null parameters.\n\n- Crash/incorrect handling of inequalities over the reals\n  during quantifier elimination.\n  Thanks to Mikkel Larsen Pedersen.\n\n- Bug in destructive equality resolution.\n  Thanks to Sascha Boehme.\n\n- Bug in initialization for x64_mt executable on SMT benchmarks.\n  Thanks to Alvin Cheung.\n\t\n\nVersion 2.11\n============\n\nThe following features are added in this release:\n\n- SMT-LIB 2.0 parsing support for (! ..) in quantifiers and (_ ..).\n\n- Allow passing strings to function and sort declarations in the .NET Theory builders.\n\n- Add a parameter to the proof construct for theory lemmas to indicate which theory\n  provided the lemma.\n\t\n- More detailed proof production in rewrite steps.\n  \nThe following bugs are fixed in this release:\n\n- A bug in BV propagation. Thanks to Trevor Hansen.\n\n\nVersion 2.10\n============\n\nThe following bugs are fixed in this release:\n\n- Inconsistent printing of integer and real types from \n  the low level and SMT-LIB pretty printers. \n  Thanks to Sascha Boehme.\n\n- Missing relevancy propagation and memory smash in\n  user-theory plugins.\n  Thanks to Stan Rosenberg.\n\nVersion 2.9\n===========\n\nThe following bugs are fixed in this release:\n\n- Incorrect constant folding of extraction for large bit-vectors.\n  Thanks to Alvin.\n\t\n- Z3 crashed when using patterns that are variables.\n  Thanks to Michael Emmi.\n\n- Unsound array property fragment handling of non-integer types.\n  Thanks to Juergen Christ.\n\n- The quantifier elimination procedure for data-types has\n  been replaced.\n  Thanks to Josh Berdine.\n\n- Refresh 2.9.1: Add missing AssumeEq to the .NET managed API. \n  Thanks to Stan Rosenberg.\n\nVersion 2.8\n===========\n\nThe following features have been added:\n\n- User theories: The user can add theory solvers that\n  get invoked by Z3's core during search.\n  See also \\ref theory_plugin_ex.\n\n- SMT2 features: parse smt2 let bindings.\n    \nThe following bugs are fixed in this release:\n\t\n- Incorrect semantics of constant folding for (bvsmod 0 x), where\n  x is positive, incorrect constant folding for bvsdiv, incorrect\n  simplification of bvnor, bvnand, incorrect compilation of\n  bvshl when using a shift amount that evaluates to the length\n  of the bit-vector. Thanks to Trevor Hansen and Robert Brummayer. \n\n- Incorrect NNF conversion in linear quantifier elimination routines.\n  Thanks to Josh Berdine.\n\n- Missing constant folding of extraction for large bit-vectors.\n  Thanks to Alvin.\n\n- Missing APIs for bvredand and bvredor. \n\nVersion 2.7\n===========\n\nThe following features have been added:\n\t\n- Partial support for SMT-LIB 2.0 format:\n  Added declare-fun, define-fun, declare-sort, define-sort, get-value\n\n- Added coercion function to_int and testing function is_int. \n  To coerce from reals to integers and to test whether a real is an integer.\n  The function to_real was already supported.\n\n- Added Z3_repeat to create the repetition of bit-vectors.\n\nThe following bugs are fixed in this release:\n\t\n- Incorrect semantics of constant folding for bvsmod. \n\n- Incorrect semantics of constant folding for div/mod.\n  Thanks to Sascha Boehme.\t  \n\n- Non-termination problem associated with option LOOKAHEAD=true.\n  It gets set for QF_UF in auto-configuration mode.\n  Thanks to Pierre-Christophe Bué.\n\n- Incorrect axioms created for injective functions.\n  Thanks to Sascha Boehme.\n\n- Stack overflow during simplification of large nested\n  bit-vector terms. Thanks to David Molnar.\n\n- Crash in unsat-core generation when enabling SOLVER=true.\n  Thanks to Lucas Cordeiro.\n\n- Unlimited cache growth while simplifying bit-vectors.\n  Thanks to Eric Landers.\n\n- Crash when solving array property formulas using non-standard\n  array operators. \n  Thanks to Sascha Boehme.\n\nVersion 2.6\n===========\n\nThis release fixes a few bugs.\nThanks to Marko Kääramees for reporting a bug in the strong context simplifier and\nto Josh Berdine. \n\nThis release also introduces some new preprocessing features:\n\n- More efficient destructive equality resolution DER=true.\n        \n- DISTRIBUTE_FORALL=true (distributes universal quantifiers over conjunctions, this transformation may affect pattern inference).\n\n- Rewriter that uses universally quantified equations PRE_DEMODULATOR=true (yes, the option name is not good, we will change it in a future release).\n\n- REDUCE_ARGS=true (this transformation is essentially a partial ackermannization for functions where a particular argument is always an interpreted value).\n\n- Better support for macro detection (a macro is a universally quantified formula of the form Forall X. F(X) = T[X]). We also change the option name, now it is called MACRO_FINDER=true.\n\n- ELIM_QUANTIFIERS=true enables quantifier elimination methods. Previous variants called QUANT_ARITH are deprecated.\n\nVersion 2.5\n===========\n\nThis release introduces the following features:\n\n- STRONG_CONTEXT_SIMPLIFIER=true allows simplifying sub-formulas\n  to true/false depending on context-dependent information.\n  The approach that we use is described on\n  the <a href=\"http://community.research.microsoft.com/forums/p/4493/8140.aspx\">\n  Microsoft Z3 forum</a>.\n\n- Some parameter values can be updated over the API. This functionality is called\n  <tt>Z3_update_param_value</tt> in the C API. This is particularly useful\n  for turning the strong context simplifier on and off.  \n \nIt also fixes bugs reported by Enric Rodríguez Carbonell, \nNuno Lopes, Josh Berdine, Ethan Jackson, Rob Quigley and \nLucas Cordeiro.\n\nVersion 2.4\n===========\n        \nThis release introduces the following features:\n\n- Labeled literals for the SMT-LIB format. \n  The Simplify format has supported labeled formulas \n  to simplify displaying counter-examples. \n  Section \\ref smtlib_labels explains how labels are now\n  supported in the SMT-LIB format.\n\n- Preliminary support for SMT-LIB2\n\nIt fixes the following bugs:\n\n- Bug in non-linear arithmetic routines.\n\n- Crash observed a class of modular integer arithmetic formulas.\n\n- Incomplete saturation leading to incorrectly sat labeling.\n\n- Crash in the bit-vector procedure when using int2bv and bv2int.\n\nThanks to Michal Moskal, Sascha Boehme and Ethan Jackson.\n\nVersion 2.3\n===========\n\nThis release introduces the following features:\n\n- F# Quotation utilities. The release contains a new directory 'utils'. \n  It contains utilities built on top of Z3. The main one is support for\n  translating F# quoted expressions into Z3 formulas.\n\n- QUANT_ARITH configuration. \n  Complete quantifier-elimination simplification for linear real and linear integer\n  arithmetic. QUANT_ARITH=1 uses Ferrante/Rackhoff for reals and Cooper's method for integers.\n  QUANT_ARITH=2 uses Fourier-Motzkin for reals and the Omega test for integers.\n\nIt fixes the following bugs:\n\n- Incorrect simplification of map over store in the extended array theory. Reported by Catalin Hritcu.\n\n- Incomplete handling of equality propagation with constant arrays. Reported by Catalin Hritcu.\n\n- Crash in bit-vector theory.\n \n- Incorrectness in proof reconstruction for quantifier manipulation.\n\nThanks to Catalin Hritcu, Nikolai Tillmann and Sascha Boehme.\n\nVersion 2.2\n===========\n\nThis release fixes minor bugs. \nIt introduces some additional features in the SMT-LIB front-end \nto make it easier to parse new operators in the theory of arrays.\nThese are described in \\ref smtlibext. \n\nVersion 2.1\n===========\n\nThis is a bug fix release.\nMany thanks to Robert Brummayer, Carine Pascal, François Remy, \nRajesh K Karmani, Roberto Lublinerman and numerous others for their \nfeedback and bug reports.\n\nVersion 2.0\n===========\n\n- <a href=\"http://research.microsoft.com/en-us/um/people/leonardo/parallel_z3.pdf\">Parallel Z3</a>. \n  Thanks to Christoph Wintersteiger there is a binary \n  supporting running multiple instances of Z3 from different threads,\n  but more interestingly, also making use of multiple cores for \n  a single formula. \n\n- Check Assumptions.\n  The binary API exposes a new call #Z3_check_assumptions, which\n  allows passing in additional assumptions while checking for \n  consistency of the already asserted formulas.\n  The API function returns a subset of the assumptions that were\n  used in an unsatisfiable core. It also returns an optional\n  proof object.\n\n- Proof Objects.\n  The #Z3_check_assumptions returns a proof object if\n  the configuration flag PROOF_MODE is set to 1 or 2.\n\n- Partial support for non-linear arithmetic. \n  The support uses support for computing Groebner bases.\n  It allows solving some, but far from all, formulas using \n  polynomials over the reals. Uses should be aware that the \n  support for non-linear arithmetic (over the reals) is not complete in Z3.\n       \n- Recursive data-types.\n  The theory of well-founded recursive data-types is supported\n  over the binary APIs. It supports ground satisfiability checking\n  for tuples, enumeration types (scalars), \n  lists and mutually recursive data-types.\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 10.1630859375,
          "content": "\nvariables:\n  cmakeJulia: '-DZ3_BUILD_JULIA_BINDINGS=True'\n  cmakeJava: '-DZ3_BUILD_JAVA_BINDINGS=True'\n  cmakeNet: '-DZ3_BUILD_DOTNET_BINDINGS=True'\n  cmakePy:  '-DZ3_BUILD_PYTHON_BINDINGS=True'\n  cmakeStdArgs: '-DZ3_BUILD_DOTNET_BINDINGS=True -DZ3_BUILD_JAVA_BINDINGS=True -DZ3_BUILD_PYTHON_BINDINGS=True -G \"Ninja\" ../'\n  asanEnv: 'CXXFLAGS=\"${CXXFLAGS} -fsanitize=address -fno-omit-frame-pointer\" CFLAGS=\"${CFLAGS} -fsanitize=address -fno-omit-frame-pointer\"'\n  ubsanEnv: 'CXXFLAGS=\"${CXXFLAGS} -fsanitize=undefined\" CFLAGS=\"${CFLAGS} -fsanitize=undefined\"'\n  msanEnv: 'CC=clang LDFLAGS=\"-L../libcxx/libcxx_msan/lib -lc++abi -Wl,-rpath=../libcxx/libcxx_msan/lib\" CXX=clang++ CXXFLAGS=\"${CXXFLAGS} -stdlib=libc++ -fsanitize-memory-track-origins -fsanitize=memory -fPIE -fno-omit-frame-pointer -g -O2\" CFLAGS=\"${CFLAGS} -stdlib=libc -fsanitize=memory -fsanitize-memory-track-origins -fno-omit-frame-pointer -g -O2\"'\n\n\n# TBD: \n#   test python bindings\n#   build documentation\n#   Asan, ubsan, msan\n# Disabled pending clang dependencies for std::unordered_map\n\njobs:\n\n- job: \"LinuxPythonDebug\"\n  displayName: \"Ubuntu build - python make - debug\"\n  pool:\n    vmImage: \"ubuntu-latest\"\n  strategy:\n    matrix:\n      MT:\n        cmdLine: 'python scripts/mk_make.py -d --java --dotnet'\n        runRegressions: 'True'\n      ST:\n        cmdLine: './configure --single-threaded'\n        runRegressions: 'False'\n  steps:\n    - script: $(cmdLine)\n    - script: |\n        set -e\n        cd build\n        make -j3\n        make -j3 examples\n        make -j3 test-z3\n        cd ..\n    - template: scripts/test-z3.yml\n    - ${{if eq(variables['runRegressions'], 'True')}}:\n      - template: scripts/test-regressions.yml\n\n- job: \"ManylinuxPythonBuildAmd64\"\n  displayName: \"Python bindings (manylinux Centos AMD64) build\"\n  pool:\n    vmImage: \"ubuntu-latest\"\n  container: \"quay.io/pypa/manylinux2014_x86_64:latest\"\n  steps:\n  - script: \"/opt/python/cp38-cp38/bin/python -m venv $PWD/env\"\n  - script: 'echo \"##vso[task.prependpath]$PWD/env/bin\"'\n  - script: \"pip install build git+https://github.com/rhelmot/auditwheel\"\n  - script: \"cd src/api/python && python -m build && AUDITWHEEL_PLAT= auditwheel repair --best-plat dist/*.whl && cd ../../..\"\n  - script: \"pip install ./src/api/python/wheelhouse/*.whl && python - <src/api/python/z3test.py z3 && python - <src/api/python/z3test.py z3num\"\n\n- job: ManyLinuxPythonBuildArm64\n  displayName: \"Python bindings (manylinux Centos ARM64 cross) build\"\n  variables:\n    name: ManyLinux\n    python: \"/opt/python/cp37-cp37m/bin/python\"\n  pool:\n    vmImage: \"ubuntu-latest\"\n  container: \"quay.io/pypa/manylinux2014_x86_64:latest\"\n  steps:\n  - script: curl -L -o /tmp/arm-toolchain.tar.xz 'https://developer.arm.com/-/media/Files/downloads/gnu/11.2-2022.02/binrel/gcc-arm-11.2-2022.02-x86_64-aarch64-none-linux-gnu.tar.xz?rev=33c6e30e5ac64e6dba8f0431f2c35f1b&hash=9918A05BF47621B632C7A5C8D2BB438FB80A4480'\n  - script: mkdir -p /tmp/arm-toolchain/\n  - script: tar xf /tmp/arm-toolchain.tar.xz -C /tmp/arm-toolchain/ --strip-components=1\n  - script: \"/opt/python/cp38-cp38/bin/python -m venv $PWD/env\"\n  - script: 'echo \"##vso[task.prependpath]$PWD/env/bin\"'\n  - script: echo '##vso[task.prependpath]/tmp/arm-toolchain/bin'\n  - script: echo '##vso[task.prependpath]/tmp/arm-toolchain/aarch64-none-linux-gnu/libc/usr/bin'\n  - script: echo $PATH\n  - script: \"stat `which aarch64-none-linux-gnu-gcc`\"\n  - script: \"pip install build git+https://github.com/rhelmot/auditwheel\"\n  - script: \"cd src/api/python && CC=aarch64-none-linux-gnu-gcc CXX=aarch64-none-linux-gnu-g++ AR=aarch64-none-linux-gnu-ar LD=aarch64-none-linux-gnu-ld python -m build && AUDITWHEEL_PLAT= auditwheel repair --best-plat dist/*.whl && cd ../../..\"\n\n- job: \"UbuntuOCaml\"\n  displayName: \"Ubuntu with OCaml\"\n  pool:\n    vmImage: \"Ubuntu-latest\"\n  steps:\n    - script: sudo apt-get install ocaml opam libgmp-dev\n    - script: opam init -y\n    - script: eval `opam config env`; opam install zarith ocamlfind -y\n    - script: eval `opam config env`; python scripts/mk_make.py --ml\n    - script: |\n        set -e\n        cd build\n        eval `opam config env`\n        make -j3\n        make -j3 examples\n        make -j3 test-z3\n        cd ..\n    - script: eval `opam config env`; ocamlfind install z3 build/api/ml/* -dll build/libz3.*\n    - template: scripts/test-z3.yml\n    - template: scripts/test-regressions.yml\n    - template: scripts/generate-doc.yml\n\n\n- job: \"UbuntuOCamlStatic\"\n  displayName: \"Ubuntu with OCaml on z3-static\"\n  pool:\n    vmImage: \"Ubuntu-latest\"\n  steps:\n    - script: sudo apt-get install ocaml opam libgmp-dev\n    - script: opam init -y\n    - script: eval `opam config env`; opam install zarith ocamlfind -y\n    - script: eval `opam config env`; python scripts/mk_make.py --ml --staticlib\n    - script: |\n        set -e\n        cd build\n        eval `opam config env`\n        make -j3\n        make -j3 examples\n        make -j3 test-z3\n        cd ..\n    - script: eval `opam config env`; ocamlfind install z3-static build/api/ml/* build/libz3-static.a\n    - script: |\n        set -e\n        cd build\n        eval `opam config env`\n        make -j3\n        make -j3 _ex_ml_example_post_install\n        ./ml_example_static.byte\n        ./ml_example_static_custom.byte\n        ./ml_example_static\n        cd ..\n    - template: scripts/test-z3.yml\n    - template: scripts/test-regressions.yml\n    - template: scripts/generate-doc.yml\n\n- job: \"LinuxMSan\"\n  displayName: \"Ubuntu build - cmake\"\n  condition: eq(0,1) \n  pool:\n    vmImage: \"ubuntu-latest\"\n  strategy:\n    matrix:\n      msanClang:\n        cmdLine: '$(msanEnv) cmake $(cmakeStdArgs)'\n        runUnitTest: 'True'\n        runExample: 'False' # Examples don't seem to build with MSAN\n  steps:\n    - script: sudo apt-get install ninja-build libc++-dev libc++abi-dev\n    - script: ./scripts/build_libcxx_msan.sh\n    - script: |\n        set -e\n        mkdir build\n        cd build\n        $(cmdLine)\n        ninja\n        ninja test-z3\n        cd ..\n    - script: |\n         cd build\n         export MSAN_SYMBOLIZER_PATH=/usr/lib/llvm-6.0/bin/llvm-symbolizer\n         ./test-z3 -a\n         cd ..\n      condition: eq(variables['runUnitTest'], 'True')\n    - ${{if eq(variables['runExample'], 'True')}}:\n      - template: scripts/test-examples-cmake.yml\n#   - template: scripts/test-jupyter.yml\n#   - template: scripts/test-java-cmake.yml\n#   - template: scripts/test-regressions.yml\n  \n- job: \"UbuntuCMake\"\n  displayName: \"Ubuntu build - cmake\"\n  pool:\n    vmImage: \"ubuntu-latest\"\n  strategy:\n    matrix:\n      releaseClang:\n        setupCmd1: ''\n        setupCmd2: ''\n        buildCmd: 'CC=clang CXX=clang++ cmake -DCMAKE_BUILD_TYPE=Release $(cmakeStdArgs)'\n        runTests: 'True'\n      debugClang:\n        setupCmd1: 'julia -e \"using Pkg; Pkg.add(PackageSpec(name=\\\"libcxxwrap_julia_jll\\\"))\"'\n        setupCmd2: 'JlCxxDir=$(julia -e \"using libcxxwrap_julia_jll; print(dirname(libcxxwrap_julia_jll.libcxxwrap_julia_path))\")'\n        buildCmd: 'CC=clang CXX=clang++ cmake -DJlCxx_DIR=$JlCxxDir/cmake/JlCxx $(cmakeJulia) $(cmakeStdArgs)'\n        runTests: 'True'\n      debugGcc:\n        setupCmd1: ''\n        setupCmd2: ''\n        buildCmd: 'CC=gcc CXX=g++ cmake $(cmakeStdArgs)'\n        runTests: 'True'\n      releaseSTGcc:\n        setupCmd1: ''\n        setupCmd2: ''\n        buildCmd: 'CC=gcc CXX=g++ cmake -DCMAKE_BUILD_TYPE=Release -DZ3_SINGLE_THREADED=ON $(cmakeStdArgs)'\n        runTests: 'True'        \n  steps:\n    - script: sudo apt-get install ninja-build \n    - script: |\n        set -e\n        mkdir build\n        cd build\n        $(setupCmd1)\n        $(setupCmd2)\n        $(buildCmd)\n        ninja\n        ninja test-z3\n        cd ..\n    - script: |\n         cd build\n         ./test-z3 -a\n         cd ..\n      condition: eq(variables['runTests'], 'True')\n    - ${{if eq(variables['runTests'], 'True')}}:\n      - template: scripts/test-examples-cmake.yml\n#   - template: scripts/test-jupyter.yml\n#   - template: scripts/test-java-cmake.yml\n    - ${{if eq(variables['runTests'], 'True')}}:\n      - template: scripts/test-regressions.yml\n         \n\n\n         \n- job: \"MacOSPython\"\n  displayName: \"MacOS build\"\n  pool:\n    vmImage: \"macOS-latest\"\n  steps:\n    - script: python scripts/mk_make.py -d --java --dotnet\n    - script: |\n        set -e\n        cd build\n        make -j3\n        make -j3 examples\n        make -j3 test-z3\n        ./cpp_example\n        ./c_example\n        # java -cp api/java/classes; JavaExample\n        cd ..\n# Skip as dead-slow in debug mode:\n#  - template: scripts/test-z3.yml\n    - template: scripts/test-regressions.yml\n\n\n- job: \"MacOSCMake\"\n  displayName: \"MacOS build with CMake\"\n  pool:\n    vmImage: \"macOS-latest\"\n  steps:\n    - script: brew install ninja\n    - script: brew install --cask julia\n    - script: |\n        julia -e \"using Pkg; Pkg.add(PackageSpec(name=\\\"libcxxwrap_julia_jll\\\"))\"\n        JlCxxDir=$(julia -e \"using libcxxwrap_julia_jll; println(joinpath(dirname(libcxxwrap_julia_jll.libcxxwrap_julia_path), \\\"cmake\\\", \\\"JlCxx\\\"))\")\n        set -e\n        mkdir build\n        cd build\n        cmake -DJlCxx_DIR=$JlCxxDir $(cmakeJulia) $(cmakeJava) $(cmakePy) -DZ3_BUILD_DOTNET_BINDINGS=False -G \"Ninja\" ../\n        ninja\n        ninja test-z3\n        cd ..\n    - template: scripts/test-z3.yml\n#   - template: scripts/test-examples-cmake.yml\n    - template: scripts/test-regressions.yml\n#   - template: scripts/test-java-cmake.yml\n\n\n- job: \"MacOSOCaml\"\n  displayName: \"MacOS build with OCaml\"\n  condition: eq(0,1) \n  pool:\n    vmImage: \"macOS-latest\"\n  steps:\n    - script: brew install opam\n    - script: opam init -y\n    - script: eval `opam config env`; opam install zarith ocamlfind -y\n    - script: eval `opam config env`; python scripts/mk_make.py --ml\n    - script: |\n        set -e\n        cd build\n        eval `opam config env`\n        make -j3\n        make -j3 examples\n        make -j3 test-z3\n        cd ..\n    - script: eval `opam config env`; ocamlfind install z3 build/api/ml/* -dll build/libz3.*\n    - script: |\n        set -e\n        cd build\n        eval `opam config env`\n        make -j3\n        make -j3 _ex_ml_example_post_install\n        # ./ml_example_shared.byte\n        # ./ml_example_shared_custom.byte\n        # ./ml_example_shared\n        cd ..\n# Skip as dead-slow in debug mode:\n#  - template: scripts/test-z3.yml\n    - template: scripts/test-regressions.yml\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 0.408203125,
          "content": "#!/bin/sh\nif test -z $PYTHON; then\n   PYTHON=python\nfi\n\nif ! which $PYTHON > /dev/null; then\n   echo \"'$PYTHON' not found. Try to set the environment variable PYTHON.\"\n   exit 1\nfi\n\n\nif ! $PYTHON -c \"print('testing')\" > /dev/null ; then\n   echo \"'$PYTHON' failed to execute basic test script. Try to set the environment variable PYTHON with a working Python interpreter.\"\n   exit 1\nfi\n\n$PYTHON scripts/mk_make.py \"$@\"\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "genaisrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "noarch",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "z3.pc.cmake.in",
          "type": "blob",
          "size": 0.34375,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=@CMAKE_INSTALL_PREFIX@\nlibdir=${exec_prefix}/@CMAKE_INSTALL_LIBDIR@\nsharedlibdir=${exec_prefix}/@CMAKE_INSTALL_LIBDIR@\nincludedir=${prefix}/@CMAKE_INSTALL_INCLUDEDIR@\n\nName: z3\nDescription: The Z3 Theorem Prover\nVersion: @Z3_VERSION@\n\nRequires:\nLibs: -L${libdir} -L${sharedlibdir} -lz3\nCflags: -I${includedir}\n"
        },
        {
          "name": "z3guide.jpeg",
          "type": "blob",
          "size": 123.0546875,
          "content": null
        }
      ]
    }
  ]
}