{
  "metadata": {
    "timestamp": 1736566404648,
    "page": 163,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjE2NA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebook/hermes",
      "stars": 10029,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.4814453125,
          "content": "---\nAccessModifierOffset: -1\nAlignAfterOpenBracket: AlwaysBreak\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlinesLeft: true\nAlignOperands:   false\nAlignTrailingComments: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: false\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nForEachMacros:   [ FOR_EACH_RANGE, FOR_EACH, ]\nIncludeCategories:\n  - Regex:           '^<.*\\.h(pp)?>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIndentCaseLabels: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Right\nReflowComments:  true\nSortIncludes:    true\nSpaceAfterCStyleCast: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        8\nUseTab:          Never\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.0478515625,
          "content": "Checks: >\n  modernize-use-nullptr,\n  readability-braces-around-statements,\n  readability-identifier-naming,\n  readability-inconsistent-declaration-parameter-name,\n  readability-static-accessed-through-instance,\n  -facebook-hte-MissingBraces,\nFormatStyle: file\nInheritParentConfig: true\nHeaderFilterRegex: include/hermes/.*\nCheckOptions:\n  - { key: readability-identifier-naming.ClassCase, value: CamelCase }\n  - { key: readability-identifier-naming.StructCase, value: CamelCase }\n  - { key: readability-identifier-naming.ClassMemberCase, value: camelBack }\n  - { key: readability-identifier-naming.ClassMemberSuffix, value: '_' }\n  - { key: readability-identifier-naming.MethodCase, value: camelBack }\n  - { key: readability-identifier-naming.MemberCase, value: camelBack }\n  - { key: readability-identifier-naming.MemberSuffix, value: '_' }\n  - { key: readability-identifier-naming.PublicMemberCase, value: camelBack }\n  - { key: readability-identifier-naming.PublicMemberSuffix, value: '' }\n  - { key: readability-braces-around-statements.ShortStatementLines, value: 3 }\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0966796875,
          "content": "# Avoid modifying the line endings for lit tests since they change the output.\ntest/** text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5087890625,
          "content": "*~\n*#\nTAGS\n\n# Howtoeven\n.howtoeven\n\n# buck\nbuck-out\n.buckd\n.buckconfig.local\n\n# Python\n*.pyc\n\n# Mac\n.DS_Store\n\n# CocoaPods testing\nbuild\nbuild_*\ndestroot\ntest/ApplePlatformsIntegrationTestApp/Podfile.lock\ntest/ApplePlatformsIntegrationTestApp/Pods\ntest/ApplePlatformsIntegrationTestApp/**/xcuserdata\ntest/ApplePlatformsIntegrationTestApp/ApplePlatformsIntegrationTestApp.xcworkspace\n\n# Intl testing\nandroid/intltest/java/com/facebook/hermes/test/assets/**\n\n# VS Code and Visual Studio\n.vs\n.vscode\n\n# clangd cache\n.cache/\n"
        },
        {
          "name": "API",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 26.12890625,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\ncmake_minimum_required(VERSION 3.13.0)\n\n# Set the VERSION variables based on the project command\nif (POLICY CMP0048)\n  cmake_policy(SET CMP0048 NEW)\nendif()\n\n# find_package uses <PackageName>_ROOT variables.\nif (POLICY CMP0074)\n  cmake_policy(SET CMP0074 NEW)\nendif()\n# Include file check macros honor CMAKE_REQUIRED_LIBRARIES.\nif (POLICY CMP0075)\n  cmake_policy(SET CMP0075 NEW)\nendif()\n\n# Only interpret if() arguments as variables or keywords when unquoted.\n# CMake emits a warning if this is not set.\nif (POLICY CMP0054)\n  cmake_policy(SET CMP0054 NEW)\nendif()\n\n# Pick up a workaround for a CMake problem from LLVM r282552.\nif(POLICY CMP0057)\n  cmake_policy(SET CMP0057 NEW)\nendif()\n\n# Enable transitive library dependencies\nif(POLICY CMP0022)\n  cmake_policy(SET CMP0022 NEW)\nendif()\n\n# Allow reading the LOCATION property of a target to determine the eventual\n# location of build targets. This is needed when building the debugging symbols\n# bundles for Apple platforms.\nif (POLICY CMP0026)\n  cmake_policy(SET CMP0026 OLD)\nendif()\n\n# Has to be set before `project` as per documentation\n# https://cmake.org/cmake/help/latest/variable/CMAKE_OSX_SYSROOT.html\nset(CMAKE_OSX_SYSROOT ${HERMES_APPLE_TARGET_PLATFORM})\n\nif(HERMES_APPLE_TARGET_PLATFORM MATCHES \"catalyst\")\n  set(CMAKE_OSX_SYSROOT \"macosx\")\n  set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} \"-target x86_64-arm64-apple-ios14.0-macabi -isystem ${CMAKE_OSX_SYSROOT}/System/iOSSupport/usr/include\")\n  set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} \"-target x86_64-arm64-apple-ios14.0-macabi -isystem ${CMAKE_OSX_SYSROOT}/System/iOSSupport/usr/include\")\n  set(CMAKE_THREAD_LIBS_INIT \"-lpthread\")\n  set(CMAKE_HAVE_THREADS_LIBRARY 1)\n  set(CMAKE_USE_WIN32_THREADS_INIT 0)\n  set(CMAKE_USE_PTHREADS_INIT 1)\n  set(THREADS_PREFER_PTHREAD_FLAG ON)\nendif()\n\n# This must be consistent with the release_version in:\n# - android/build.gradle\n# - npm/package.json\n# - hermes-engine.podspec\nproject(Hermes\n        VERSION 0.12.0\n        LANGUAGES C CXX)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/\")\n\nset(LLVH_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/llvh)\n\ninclude(Hermes)\ninclude(Lit)\n\n# This is not a cache variable so that it is recomputed when the project\n# version is updated.\nif(NOT DEFINED HERMES_RELEASE_VERSION)\n  set(HERMES_RELEASE_VERSION ${PROJECT_VERSION})\nendif()\n\nfind_package(Python COMPONENTS Interpreter)\nif (NOT Python_Interpreter_FOUND)\n  message(FATAL_ERROR \"Unable to find Python interpreter, required for builds and testing.\nPlease install Python or specify the PYTHON_EXECUTABLE CMake variable.\")\nendif()\n\n# Project options.\n\nset(HERMES_IS_ANDROID OFF CACHE BOOL\n  \"Building for Android\")\n\nset(HERMES_IS_MOBILE_BUILD ${HERMES_IS_ANDROID} CACHE BOOL\n  \"Building for a mobile device\")\n\nset(HERMESVM_GCKIND HADES\n  CACHE STRING\n  \"HermesVM GC type: either MALLOC or HADES\")\n\n# Hermes VM opcode stats profiling\nset(HERMESVM_PROFILER_OPCODE OFF CACHE BOOL\n  \"Enable opcode stats profiling in hermes VM\")\n\n# Hermes VM basic block profiling\nset(HERMESVM_PROFILER_BB OFF CACHE BOOL\n  \"Enable basic block profiling in hermes VM\")\n\n# Hermes VM JS Function profiling\nset(HERMESVM_PROFILER_JSFUNCTION OFF CACHE BOOL\n  \"Enable JS Function profiling in hermes VM\")\n\n# Hermes VM native call profiling\nset(HERMESVM_PROFILER_NATIVECALL OFF CACHE BOOL\n  \"Enable native call profiling in hermes VM\")\n\nCHECK_CXX_SOURCE_COMPILES(\n        \"int main() { void *p = &&label; goto *p; label: return 0; }\"\n        HAVE_COMPUTED_GOTO)\nif(HAVE_COMPUTED_GOTO)\n    set(DEFAULT_INTERPRETER_THREADING ON)\nelse()\n    set(DEFAULT_INTERPRETER_THREADING OFF)\nendif()\n\nset(HERMESVM_INDIRECT_THREADING ${DEFAULT_INTERPRETER_THREADING} CACHE BOOL\n  \"Enable the indirect threaded interpreter\")\n\nset(HERMESVM_ALLOW_COMPRESSED_POINTERS ON CACHE BOOL\n  \"Enable compressed pointers. If this is on and the target is a 64-bit build, compressed pointers will be used.\")\n\nif(APPLE)\n    set(DEFAULT_CONTIGUOUS_HEAP OFF)\nelse()\n    set(DEFAULT_CONTIGUOUS_HEAP ON)\nendif()\n\nset(HERMESVM_ALLOW_CONTIGUOUS_HEAP ${DEFAULT_CONTIGUOUS_HEAP} CACHE BOOL\n  \"If this is on and compressed pointers are used, the heap will be allocated in a contiguous 4GB region.\")\n\nset(HERMESVM_ALLOW_HUGE_PAGES OFF CACHE BOOL\n        \"Enable huge pages to back the GC managed heap. Only useful on Linux.\")\n\n# Note that smaller heap segments will lower the maximum number of properties\n# that can be stored in an object.\nset(HERMESVM_HEAP_SEGMENT_SIZE_KB 4096\n        CACHE STRING\n        \"Size of segments in the GC managed heap in KB. Must be a power of 2.\")\n\nset(HERMESVM_ALLOW_CONCURRENT_GC ON CACHE BOOL\n        \"Enable concurrency in the GC for 64-bit builds.\")\n\nset(HERMESVM_ALLOW_INLINE_ASM ON CACHE BOOL\n        \"Allow the use of inline assembly in VM code.\")\n\nset(HERMESVM_API_TRACE_ANDROID_REPLAY OFF CACHE BOOL\n  \"Simulate Android config on Linux in API tracing.\")\n\n# Hermes VM Handle sanitization (moving the heap after every alloc)\nset(HERMESVM_SANITIZE_HANDLES OFF CACHE BOOL\n  \"Enable Handle sanitization\")\n\nset(HERMESVM_CRASH_TRACE OFF CACHE BOOL\n  \"Enable recording of instructions for crash debugging depending on VMExperiments\")\n\n# Enable Address Sanitizer\nset(HERMES_ENABLE_ADDRESS_SANITIZER OFF CACHE BOOL\n  \"Enable -fsanitize=address\")\n\n# Enable Undefined Behavior Sanitizer\nset(HERMES_ENABLE_UNDEFINED_BEHAVIOR_SANITIZER OFF CACHE BOOL\n  \"Enable -fsanitize=undefined\")\n\n# Enable Thread Sanitizer\nset(HERMES_ENABLE_THREAD_SANITIZER OFF CACHE BOOL\n  \"Enable -fsanitize=thread\")\n\n# Enable Trace PC Guard\nset(HERMES_ENABLE_TRACE_PC_GUARD OFF CACHE BOOL\n  \"Enable -fsanitize-coverage=trace-pc-guard\")\n\nset(HERMES_ENABLE_CODE_COVERAGE OFF CACHE BOOL\n  \"Enables code coverage to be collected from binaries. Coverage output will be placed in a subdirectory called \\\"coverage\\\" of the build directory.\")\n\nset(HERMES_ENABLE_LIBFUZZER OFF CACHE BOOL\n  \"Enable libfuzzer\")\n\nset(HERMES_ENABLE_FUZZILLI OFF CACHE BOOL\n  \"Enable fuzzilli\")\n\nset(HERMES_ENABLE_TOOLS ON CACHE BOOL\n  \"Enable CLI tools\")\n\n# Enable bitcode\nset(HERMES_ENABLE_BITCODE OFF CACHE BOOL\n  \"Include bitcode with the framework\")\n\n# Set linker flag for building the fuzzer\nset(HERMES_FUZZING_FLAG \"-fsanitize=fuzzer\" CACHE STRING\n  \"Linker argument to link fuzz targets against a given fuzzer.\")\n\n# Build with -DHERMES_SLOW_DEBUG for debug builds\n# This does not affect release builds\nset(HERMES_SLOW_DEBUG ON CACHE BOOL\n  \"Enable slow checks in Debug builds\")\n\n# Build with -DHERMES_HARDENED for hardened builds\nset(HERMES_HARDENED OFF CACHE BOOL\n  \"Enable compile-time security mitigations\")\n\n# On CentOS:\n#   sudo yum install zlib-static glibc-static ncurses-static readline-static\nset(HERMES_STATIC_LINK OFF CACHE BOOL\n  \"Link Hermes statically. May only work on GNU/Linux.\")\n\nset(HERMES_USE_STATIC_ICU OFF CACHE BOOL\n  \"Force static linking of ICU. May only work on GNU/Linux.\")\n\nset(HERMES_UNICODE_LITE OFF CACHE BOOL\n  \"Enable to use internal no-op unicode functionality instead of relying on underlying system libraries\")\n\nif(WIN32)\n  set(DEFAULT_HERMES_CHECK_NATIVE_STACK OFF)\nelse()\n  set(DEFAULT_HERMES_CHECK_NATIVE_STACK ON)\nendif()\n\nset(HERMES_CHECK_NATIVE_STACK ${DEFAULT_HERMES_CHECK_NATIVE_STACK} CACHE BOOL\n  \"Check the native stack for stack overflow\")\n\nset(HERMES_ENABLE_DEBUGGER ON CACHE BOOL\n  \"Build with debugger support\")\n\nset(HERMES_MEMORY_INSTRUMENTATION ${HERMES_ENABLE_DEBUGGER} CACHE BOOL\n  \"Build with memory instrumentation support\")\n\nset(HERMES_ENABLE_IR_INSTRUMENTATION OFF CACHE BOOL\n    \"Build IR instrumentation support\")\n\nset(HERMES_FACEBOOK_BUILD OFF CACHE BOOL\n    \"Build Facebook (rather than open-source) version of Hermes\")\n\nset(HERMESVM_EXCEPTION_ON_OOM OFF CACHE BOOL\n    \"GC Out-of-memory raises an exception, rather than causing a crash\")\n\nset(HERMESVM_PLATFORM_LOGGING OFF CACHE BOOL\n    \"hermesLog(...) is enabled, using the platform's logging mechanism\")\n\nset(HERMES_RUN_WASM OFF CACHE BOOL\n    \"Emit Asm.js/Wasm unsafe compiler intrinsics\")\n\nset(HERMES_USE_FLOWPARSER OFF CACHE BOOL\n  \"Use libflowparser for parsing es6\")\n\nset(HERMES_ENABLE_WERROR OFF CACHE BOOL\n  \"Whether the build should have -Werror enabled\")\n\nset(HERMES_THREAD_SAFETY_ANALYSIS ON CACHE BOOL\n  \"Whether to compile with clang's -Wthread-safety\")\n\nset(HERMES_ENABLE_WIN10_ICU_FALLBACK ON CACHE BOOL\n  \"Whether to allow falling back on Win10 ICU\")\n\nset(HERMES_GITHUB_RESOURCE_DIR \"\" CACHE STRING\n  \"A directory with additional files to bundle in the GitHub release\")\n\nset(ANDROID_LINUX_PERF_PATH \"\"\n  CACHE STRING\n  \"If buildling for Android, full path to <linux/perf_events.h>\")\n\nset(HERMES_MSVC_MP ON CACHE STRING\n  \"Enable /MP in MSVC for parallel builds\")\n\nset(EMSCRIPTEN_FASTCOMP OFF CACHE BOOL\n  \"Emscripten is using the fastcomp backend instead of the LLVM one\")\n\nset(HERMES_ENABLE_INTL OFF CACHE BOOL\n  \"Enable JS Intl support (WIP)\")\n\nset(HERMES_ENABLE_UNICODE_REGEXP_PROPERTY_ESCAPES ON CACHE BOOL\n  \"Enable RegExp Unicode Property Escapes support\")\n\nset(HERMES_ENABLE_TEST_SUITE ON CACHE BOOL\n  \"Enable the test suite\")\n\nset(HERMES_BUILD_APPLE_FRAMEWORK ON CACHE BOOL\n  \"Whether to build the libhermes target as a framework bundle or dylib on Apple platforms\")\n\nset(HERMES_BUILD_APPLE_DSYM OFF CACHE BOOL\n  \"Whether to build a DWARF debugging symbols bundle\")\n\nset(IMPORT_HERMESC \"\" CACHE FILEPATH\n  \"Import the hermesc compiler from another build using the given CMake file.\")\n\nset(HERMES_BUILD_NODE_HERMES OFF CACHE BOOL \"Whether to build node-hermes\")\n\n# On Windows, produce static libraries by default so that tests and tools work\n# without needing to move DLLs around.\n# On Emscripten, there is no concept of a shared library.\nif(WIN32 OR EMSCRIPTEN)\n  set(DEFAULT_BUILD_SHARED_LIBS OFF)\nelse()\n  set(DEFAULT_BUILD_SHARED_LIBS ON)\nendif()\n\nset(HERMES_BUILD_SHARED_JSI ${DEFAULT_BUILD_SHARED_LIBS} CACHE BOOL \"Build JSI as a shared library.\")\n\nset(BUILD_SHARED_LIBS ${DEFAULT_BUILD_SHARED_LIBS} CACHE BOOL \"Prefer producing shared libraries.\")\n\nif (HERMES_IS_ANDROID)\n  add_definitions(-DHERMES_PLATFORM_UNICODE=HERMES_PLATFORM_UNICODE_JAVA)\nendif()\n\nif(HERMES_CHECK_NATIVE_STACK)\n  if (WIN32)\n    message(\n      FATAL_ERROR\n      \"Native stack checking not supported on Windows\"\n    )\n  endif()\n  add_definitions(-DHERMES_CHECK_NATIVE_STACK)\nendif()\n\nif(HERMES_BUILD_APPLE_DSYM)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -gdwarf\")\nendif()\n\nif (HERMES_IS_MOBILE_BUILD)\n  add_definitions(-DHERMES_IS_MOBILE_BUILD)\nendif()\n\n# Enable debug mode by default\nif ((NOT GENERATOR_IS_MULTI_CONFIG) AND CMAKE_BUILD_TYPE STREQUAL \"\")\n    set(CMAKE_BUILD_TYPE Debug)\nendif()\n\nif (HERMES_STATIC_LINK)\n  append(\"-static\" CMAKE_EXE_LINKER_FLAGS)\n  set(HERMES_USE_STATIC_ICU ON)\n  set(CMAKE_FIND_LIBRARY_SUFFIXES \"${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n  set(HERMES_BUILD_SHARED_JSI OFF)\n  set(BUILD_SHARED_LIBS OFF)\nendif()\n\n# Check if the linker supports deleting unused sections and ICF.\n# We can't simply CHECK_CXX_COMPILER_FLAG(\"-Wl,--gc-sections\" ..) because CMake\n# will compile and link separately and only passes the flag during compilation.\n# TODO: Use check_linker_flag once we have CMake 3.18.\nset(OLD_CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS}\")\nset(CMAKE_EXE_LINKER_FLAGS \"${OLD_CMAKE_EXE_LINKER_FLAGS} -Wl,--gc-sections\")\nCHECK_CXX_COMPILER_FLAG(\"\" HAVE_GC_SECTIONS)\n\n# Only check for -dead_strip on Apple because some linkers may interpret it\n# as \"-d -e ad_strip\".\nif(APPLE)\n  set(CMAKE_EXE_LINKER_FLAGS \"${OLD_CMAKE_EXE_LINKER_FLAGS} -Wl,-dead_strip\")\n  CHECK_CXX_COMPILER_FLAG(\"\" HAVE_DEAD_STRIP)\nendif()\n\nset(CMAKE_EXE_LINKER_FLAGS \"${OLD_CMAKE_EXE_LINKER_FLAGS} -Wl,--icf=safe\")\nCHECK_CXX_COMPILER_FLAG(\"\" HAVE_ICF)\nset(CMAKE_EXE_LINKER_FLAGS \"${OLD_CMAKE_EXE_LINKER_FLAGS}\")\n\nif(HAVE_GC_SECTIONS)\n  add_flag_if_supported(\"-ffunction-sections\" FUNCTION_SECTIONS)\n  add_flag_if_supported(\"-fdata-sections\" DATA_SECTIONS)\n  list(APPEND HERMES_EXTRA_LINKER_FLAGS \"LINKER:--gc-sections\")\nelseif(HAVE_DEAD_STRIP)\n  # This is similar to the above, but for macOS.\n  list(APPEND HERMES_EXTRA_LINKER_FLAGS \"LINKER:-dead_strip\")\nendif()\n\nif(HAVE_ICF)\n  add_flag_if_supported(\"-faddrsig\" ADDRSIG)\n  list(APPEND HERMES_EXTRA_LINKER_FLAGS \"LINKER:--icf=safe\")\nendif()\n\n# Make the HERMES_RELEASE_VERSION accessible for version printing in C++.\nif(HERMES_RELEASE_VERSION)\n    add_definitions(-DHERMES_RELEASE_VERSION=\"${HERMES_RELEASE_VERSION}\")\nendif()\n\nif(HERMES_ENABLE_IR_INSTRUMENTATION)\n    add_definitions(-DHERMES_ENABLE_IR_INSTRUMENTATION)\nendif()\n\nadd_definitions(-DHERMESVM_GC_${HERMESVM_GCKIND})\n\nset(HERMES_PROFILER_MODE_IN_LIT_TEST \"NONE\")\nif(HERMESVM_PROFILER_OPCODE)\n    add_definitions(-DHERMESVM_PROFILER_OPCODE)\n    set(HERMES_PROFILER_MODE_IN_LIT_TEST \"OPCODE\")\nendif()\nif(HERMESVM_PROFILER_BB)\n    add_definitions(-DHERMESVM_PROFILER_BB)\n    set(HERMES_PROFILER_MODE_IN_LIT_TEST \"BB\")\nendif()\nif(HERMESVM_PROFILER_JSFUNCTION)\n    add_definitions(-DHERMESVM_PROFILER_JSFUNCTION)\n    set(HERMES_PROFILER_MODE_IN_LIT_TEST \"SAMPLING\")\nendif()\nif(HERMESVM_PROFILER_NATIVECALL)\n    add_definitions(-DHERMESVM_PROFILER_NATIVECALL)\n    set(HERMES_PROFILER_MODE_IN_LIT_TEST \"EXTERN\")\nendif()\nif(HERMESVM_INDIRECT_THREADING)\n    add_definitions(-DHERMESVM_INDIRECT_THREADING)\nendif()\nif(HERMESVM_ALLOW_COMPRESSED_POINTERS)\n    add_definitions(-DHERMESVM_ALLOW_COMPRESSED_POINTERS)\nendif()\nif(HERMESVM_ALLOW_CONTIGUOUS_HEAP)\n    add_definitions(-DHERMESVM_ALLOW_CONTIGUOUS_HEAP)\nendif()\nif(HERMESVM_ALLOW_HUGE_PAGES)\n    add_definitions(-DHERMESVM_ALLOW_HUGE_PAGES)\nendif()\nadd_definitions(-DHERMESVM_HEAP_SEGMENT_SIZE_KB=${HERMESVM_HEAP_SEGMENT_SIZE_KB})\nif(HERMESVM_ALLOW_CONCURRENT_GC)\n    add_definitions(-DHERMESVM_ALLOW_CONCURRENT_GC)\nendif()\nif(HERMESVM_ALLOW_INLINE_ASM)\n    add_definitions(-DHERMESVM_ALLOW_INLINE_ASM)\nendif()\nif(HERMESVM_API_TRACE_ANDROID_REPLAY)\n    add_definitions(-DHERMESVM_API_TRACE_ANDROID_REPLAY)\nendif()\nif(HERMESVM_SANITIZE_HANDLES)\n    add_definitions(-DHERMESVM_SANITIZE_HANDLES)\nendif()\nif(HERMESVM_CRASH_TRACE)\n    add_definitions(-DHERMESVM_CRASH_TRACE=1)\nendif()\nif (HERMES_ENABLE_ADDRESS_SANITIZER)\n    append(\"-fsanitize=address\" CMAKE_CXX_FLAGS CMAKE_C_FLAGS CMAKE_EXE_LINKER_FLAGS)\n    # GCC does not automatically link libpthread when using ASAN\n    append(\"-lpthread\" CMAKE_EXE_LINKER_FLAGS)\nendif()\nif (HERMES_ENABLE_UNDEFINED_BEHAVIOR_SANITIZER)\n    add_definitions(-DHERMES_UBSAN)\n    # Do not enable the vptr sanitizer, as it requires RTTI.\n    append(\"-fsanitize=undefined -fno-sanitize=vptr -fno-sanitize-recover=undefined\" CMAKE_CXX_FLAGS CMAKE_C_FLAGS CMAKE_EXE_LINKER_FLAGS)\nendif()\nif (HERMES_ENABLE_THREAD_SANITIZER)\n    append(\"-fsanitize=thread\" CMAKE_CXX_FLAGS CMAKE_C_FLAGS CMAKE_EXE_LINKER_FLAGS)\nendif()\nif (HERMES_ENABLE_TRACE_PC_GUARD)\n    append(\"-fsanitize-coverage=trace-pc-guard\" CMAKE_CXX_FLAGS CMAKE_C_FLAGS CMAKE_EXE_LINKER_FLAGS)\nendif()\nif (HERMES_ENABLE_CODE_COVERAGE)\n    if(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n        append(\"-fprofile-instr-generate -fcoverage-mapping\" CMAKE_CXX_FLAGS CMAKE_C_FLAGS)\n    else()\n        message(FATAL_ERROR \"Code coverage flags not defined for this compiler: ${CMAKE_CXX_COMPILER_ID}\")\n    endif()\nendif()\nif(HERMES_FACEBOOK_BUILD)\n    add_definitions(-DHERMES_FACEBOOK_BUILD)\nendif()\nif(HERMESVM_EXCEPTION_ON_OOM)\n    set(HERMES_ENABLE_EH_RTTI ON)\n    add_definitions(-DHERMESVM_EXCEPTION_ON_OOM)\nendif()\nif(HERMESVM_PLATFORM_LOGGING)\n    add_definitions(-DHERMESVM_PLATFORM_LOGGING)\nendif()\nif(HERMES_RUN_WASM)\n    add_definitions(-DHERMES_RUN_WASM)\nendif()\nif (NOT (ANDROID_LINUX_PERF_PATH STREQUAL \"\"))\n  add_definitions(-DANDROID_LINUX_PERF_PATH=\"${ANDROID_LINUX_PERF_PATH}\")\nendif()\n\nif (HERMES_ENABLE_INTL)\n  add_definitions(-DHERMES_ENABLE_INTL)\nendif()\n\nif (HERMES_ENABLE_UNICODE_REGEXP_PROPERTY_ESCAPES)\n  add_definitions(-DHERMES_ENABLE_UNICODE_REGEXP_PROPERTY_ESCAPES)\nendif()\n\nif (HERMES_ENABLE_WERROR)\n  # Turn all warnings into errors on GCC-compatible compilers.\n  if (GCC_COMPATIBLE)\n    append(\"-Werror\" CMAKE_CXX_FLAGS CMAKE_C_FLAGS)\n  endif()\nendif()\n\n# Collect all header files and add them to the IDE.\nfile(GLOB_RECURSE ALL_HEADER_FILES \"*.h\")\n\nif(HERMES_SLOW_DEBUG)\n  # Enable HERMES_SLOW_DEBUG in Debug mode\n  set_property(DIRECTORY APPEND PROPERTY\n      COMPILE_DEFINITIONS $<$<CONFIG:Debug>:HERMES_SLOW_DEBUG>)\nendif()\n\nif (HERMES_HARDENED)\n  add_definitions(-DHERMES_HARDENED)\nendif()\n\nif (GCC_COMPATIBLE)\n  # Don't export symbols unless we explicitly say so\n  append(\"-fvisibility=hidden\" CMAKE_CXX_FLAGS CMAKE_C_FLAGS)\nelseif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"MSVC\")\n  # C4068 unknown pragma\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -wd4068\")\n  # C4200 nonstandard extension used: zero-sized array in struct/union\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -wd4200\")\n  # C4201 nonstandard extension used: nameless struct/union\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -wd4201\")\n  # C4530 C++ exception handler used, but unwind semantics are not enabled\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -wd4530\")\n  # Parallelize build\n  if (HERMES_MSVC_MP)\n    add_definitions( /MP )\n  endif()\nendif()\n\n# Export a JSON file with the compilation commands that external tools can use\n# to analyze the source code of the project.\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\n# Attempt to use system ICU first, if none specified.\n# Don't need ICU on Apple, Emscripten, and Android.\nif (APPLE OR EMSCRIPTEN OR HERMES_IS_ANDROID)\n  set(ICU_FOUND 1)\nendif()\n\nif (NOT ICU_FOUND)\n  if (NOT ICU_ROOT)\n    set(FB_ICU_ROOT_A \"/mnt/gvfs/third-party2/icu/4e8f3e00e1c7d7315fd006903a9ff7f073dfc02b/53.1/gcc-5-glibc-2.23/9bc6787\")\n    set(FB_ICU_ROOT_B \"/mnt/gvfs/third-party2/icu/4e8f3e00e1c7d7315fd006903a9ff7f073dfc02b/53.1/gcc-4.8.1-glibc-2.17/c3f970a/\")\n    if(EXISTS ${FB_ICU_ROOT_A})\n      set(ICU_ROOT ${FB_ICU_ROOT_A})\n    elseif(EXISTS ${FB_ICU_ROOT_B})\n      set(ICU_ROOT ${FB_ICU_ROOT_B})\n    endif()\n  endif()\n  set(CMAKE_FIND_LIBRARY_SUFFIXES_OLD \"${CMAKE_FIND_LIBRARY_SUFFIXES}\")\n  if (HERMES_USE_STATIC_ICU)\n    add_definitions(-DU_STATIC_IMPLEMENTATION)\n    set(CMAKE_FIND_LIBRARY_SUFFIXES \"${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n  endif()\n\n  # FindICU uses ICU_ROOT variable as a hint\n  # Include 'uc' twice for static libraries that depend on each other.\n  find_global_package(ICU 52 COMPONENTS uc i18n data uc)\n\n  set(CMAKE_FIND_LIBRARY_SUFFIXES \"${CMAKE_FIND_LIBRARY_SUFFIXES_OLD}\")\n\n  if (ICU_FOUND)\n    foreach(LIB_FILE ${ICU_LIBRARIES})\n      get_filename_component(LIB_DIR ${LIB_FILE} DIRECTORY)\n      list(APPEND ICU_RPATH ${LIB_DIR})\n    endforeach(LIB_FILE)\n    list(REMOVE_DUPLICATES ICU_RPATH)\n    message(\"icu dir: ${ICU_RPATH}\")\n    include_directories(${ICU_INCLUDE_DIRS})\n  endif()\nendif()\n\n# ICU is available on Windows, but only since Windows 10 v1703.\n# Therefore, use it only as fallback.\nif (NOT ICU_FOUND AND HERMES_ENABLE_WIN10_ICU_FALLBACK AND\n    WIN32 AND # Windows 32 or 64 bit\n    # At least Windows 10 version 1703 (aka Creators Update)\n    NOT ${CMAKE_SYSTEM_VERSION} VERSION_LESS \"10.0.15063\")\n  add_definitions(-DUSE_WIN10_ICU)\n  set(ICU_FOUND 1)\n  set(ICU_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/external/icu_decls)\n  set(ICU_LIBRARIES\n    icuuc icuin\n  )\n  include_directories(${ICU_INCLUDE_DIRS})\n  message(\"Using Windows 10 built-in ICU\")\nendif()\n\n# If we have no ICU, then error out.\nif (NOT ICU_FOUND)\n  message(FATAL_ERROR \"Unable to find ICU.\")\nendif()\n\n# Declare a function that links ICU for the given target.\n# This adds the correct -rpath link flag as necessary.\nfunction(hermes_link_icu target_name)\n  get_target_property(target_type ${target_name} TYPE)\n  target_link_libraries(${target_name} ${ICU_LIBRARIES})\n\n  if (HERMES_USE_STATIC_ICU)\n    if ((NOT EMSCRIPTEN) AND target_type MATCHES \"EXECUTABLE|STATIC_LIBRARY\")\n      target_link_libraries(${target_name} dl pthread)\n    elseif(target_type MATCHES \"MODULE_LIBRARY|SHARED_LIBRARY\")\n      message(WARNING \"ICU cannot be statically linked against shared library target ${target_name}\")\n    endif()\n  endif()\n\n  if (ICU_RPATH)\n    set_property(TARGET ${target_name} APPEND PROPERTY\n                  INSTALL_RPATH ${ICU_RPATH})\n    set_property(TARGET ${target_name} PROPERTY\n                  BUILD_WITH_INSTALL_RPATH TRUE)\n  endif()\nendfunction()\n\nif (APPLE)\n  find_library(CORE_FOUNDATION CoreFoundation)\n  find_library(FOUNDATION Foundation)\nelse()\n  set(CORE_FOUNDATION \"\")\n  set(FOUNDATION \"\")\nendif()\n\nif (HERMES_USE_FLOWPARSER)\n  if (CMAKE_SYSTEM_NAME STREQUAL Darwin AND NOT HERMES_BUILD_32_BITS)\n    set(LIBFLOWPARSER ${CMAKE_CURRENT_SOURCE_DIR}/external/flowparser/libflowparser-mac.a)\n  elseif (CMAKE_SYSTEM_NAME STREQUAL Linux AND NOT HERMES_BUILD_32_BITS)\n    set(LIBFLOWPARSER ${CMAKE_CURRENT_SOURCE_DIR}/external/flowparser/libflowparser-linux.a)\n  else()\n    set(LIBFLOWPARSER \"\")\n    set(HERMES_USE_FLOWPARSER OFF)\n  endif()\nendif()\n\nif (HERMES_USE_FLOWPARSER)\n  add_definitions(-DHERMES_USE_FLOWPARSER)\nendif()\n\nif (HERMES_ENABLE_DEBUGGER)\n  add_definitions(-DHERMES_ENABLE_DEBUGGER)\nendif()\n\nif (HERMES_MEMORY_INSTRUMENTATION)\n  add_definitions(-DHERMES_MEMORY_INSTRUMENTATION)\nendif()\n\n# Disables the GCC 64-to-32 bit truncation diagnostic if the compiler supports\n# -Wshorten-64-to-32.\ncheck_cxx_compiler_flag(\"-Wshorten-64-to-32\" CXX_SUPPORTS_SHORTEN_64_TO_32)\nif (${CXX_SUPPORTS_SHORTEN_64_TO_32})\n  add_definitions(-DHERMES_COMPILER_SUPPORTS_WSHORTEN_64_TO_32)\nendif()\n\nset(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD \"c++17\")\n\n# JSI_DIR has always priority over other folders.\n# It's used by React Native when building Hermes from source so\n# the copy of JSI inside `react-native/ReactCommon/jsi` can be used.\nif(JSI_DIR)\n  if(EXISTS ${JSI_DIR})\n    set(HERMES_JSI_DIR ${JSI_DIR})\n  else()\n    message(FATAL_ERROR \"You specified a JSI directory with -DJSI_DIR but JSI can't be found there.\")\n  endif()\nelseif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/API/jsi)\n  set(HERMES_JSI_DIR ${CMAKE_CURRENT_SOURCE_DIR}/API/jsi)\nelseif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../jsi)\n  set(HERMES_JSI_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../jsi)\nelse()\n  message(FATAL_ERROR \"Unable to find jsi.\")\nendif()\n\ninclude_directories(\n  external/llvh/include\n  external/llvh/gen/include\n  ${CMAKE_CURRENT_BINARY_DIR}/external/llvh/include\n)\n\ninclude_directories(BEFORE\n  ${CMAKE_CURRENT_BINARY_DIR}/include\n  ${CMAKE_CURRENT_SOURCE_DIR}/include\n  ${CMAKE_CURRENT_SOURCE_DIR}/external/flowparser/include\n  ${CMAKE_CURRENT_SOURCE_DIR}/external\n  )\n\nif(HERMES_IS_ANDROID)\n  find_package(fbjni REQUIRED CONFIG)\nendif()\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nadd_subdirectory(external/llvh)\nadd_subdirectory(utils/hermes-lit)\nadd_subdirectory(lib)\nadd_subdirectory(public)\nadd_subdirectory(external)\nadd_subdirectory(API)\nadd_subdirectory(android/intltest/java/com/facebook/hermes/test)\nadd_subdirectory(unsupported)\n\nif(HERMES_ENABLE_TOOLS)\n  add_subdirectory(tools)\nendif()\n\n# Make sure JSI is compiled with PIC\nset(save_CMAKE_POSITION_INDEPENDENT_CODE ${CMAKE_POSITION_INDEPENDENT_CODE})\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\nset(save_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})\nset(BUILD_SHARED_LIBS ${HERMES_BUILD_SHARED_JSI})\nadd_subdirectory(${HERMES_JSI_DIR}/jsi ${CMAKE_CURRENT_BINARY_DIR}/jsi)\nset(BUILD_SHARED_LIBS ${save_BUILD_SHARED_LIBS})\nset(CMAKE_POSITION_INDEPENDENT_CODE ${save_CMAKE_POSITION_INDEPENDENT_CODE})\n\nif (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/facebook)\n    add_subdirectory(facebook)\nendif()\n\n# Configure the test suites\n#\nif(HERMES_ENABLE_TEST_SUITE)\n  if(NOT HERMES_ENABLE_TOOLS)\n    message(FATAL_ERROR, \"Running the test-suite requires the CLI tools to be built.\")\n  endif()\n\n  add_subdirectory(unittests)\n\n  list(APPEND HERMES_TEST_DEPS\n    HermesUnitTests\n    hermes\n    hermesc\n    hvm\n    interp-dispatch-bench\n    hdb\n    hbcdump\n    hbc-attribute\n    hbc-deltaprep\n    hbc-diff\n    dependency-extractor\n    )\n\n  if(HERMES_BUILD_NODE_HERMES)\n    list(APPEND HERMES_TEST_DEPS node-hermes)\n  endif()\n\n  set(coverage_directory \"\")\n  if (HERMES_ENABLE_CODE_COVERAGE)\n    set(coverage_directory ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/coverage)\n  endif()\n\n  set(HERMES_LIT_TEST_PARAMS_BASE\n    test_exec_root=${CMAKE_CURRENT_BINARY_DIR}/test\n    unittests_dir=${CMAKE_CURRENT_BINARY_DIR}/unittests\n    debugger_enabled=${HERMES_ENABLE_DEBUGGER}\n    intl_enabled=${HERMES_ENABLE_INTL}\n    regexp_unicode_properties_enabled=${HERMES_ENABLE_UNICODE_REGEXP_PROPERTY_ESCAPES}\n    use_flowparser=${HERMES_USE_FLOWPARSER}\n    hbc_deltaprep=${HERMES_TOOLS_OUTPUT_DIR}/hbc-deltaprep\n    dependency_extractor=${HERMES_TOOLS_OUTPUT_DIR}/dependency-extractor\n    FileCheck=${HERMES_TOOLS_OUTPUT_DIR}/FileCheck\n    hermes=${HERMES_TOOLS_OUTPUT_DIR}/hermes\n    hermesc=${HERMES_TOOLS_OUTPUT_DIR}/hermesc\n    hdb=${HERMES_TOOLS_OUTPUT_DIR}/hdb\n    hbcdump=${HERMES_TOOLS_OUTPUT_DIR}/hbcdump\n    hbc-deltaprep=${HERMES_TOOLS_OUTPUT_DIR}/hbc-deltaprep\n    hbc_diff=${HERMES_TOOLS_OUTPUT_DIR}/hbc-diff\n    build_mode=\"$<IF:$<CONFIG:Debug>,dbg,opt>\"\n    exception_on_oom_enabled=${HERMESVM_EXCEPTION_ON_OOM}\n    node_hermes_enabled_flag=${HERMES_BUILD_NODE_HERMES}\n    node-hermes=${HERMES_TOOLS_OUTPUT_DIR}/node-hermes\n    profiler=${HERMES_PROFILER_MODE_IN_LIT_TEST}\n    gc=${HERMESVM_GCKIND}\n    ubsan=${HERMES_ENABLE_UNDEFINED_BEHAVIOR_SANITIZER}\n    coverage=${coverage_directory}\n    check_native_stack=${HERMES_CHECK_NATIVE_STACK}\n    )\n\n  set(HERMES_LIT_TEST_PARAMS\n    ${HERMES_LIT_TEST_PARAMS_BASE}\n    FileCheckOrRegen=${HERMES_TOOLS_OUTPUT_DIR}/FileCheck\n    )\n\n  set(HERMES_LIT_UPDATE_PARAMS\n    ${HERMES_LIT_TEST_PARAMS_BASE}\n    \"FileCheckOrRegen=${Python_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/utils/lit-expect-gen/generate.py\"\n    )\n\n  set(LLVH_LIT_ARGS \"-sv\")\n\n  add_lit_testsuite(check-hermes \"Running the Hermes regression tests\"\n    ${CMAKE_CURRENT_SOURCE_DIR}/test\n    ${CMAKE_CURRENT_SOURCE_DIR}/unittests\n    PARAMS ${HERMES_LIT_TEST_PARAMS}\n    DEPENDS ${HERMES_TEST_DEPS}\n    ARGS ${HERMES_TEST_EXTRA_ARGS}\n    )\n  set_target_properties(check-hermes PROPERTIES FOLDER \"Hermes regression tests\")\n\n  # update-lit will regenerate the expectations for all tests that are verified with FileCheckOrRegen.\n  # All other tests are run normally.\n  add_lit_testsuite(update-lit \"Running the Hermes regression tests, and updating auto-generated expectations.\"\n    ${CMAKE_CURRENT_SOURCE_DIR}/test\n    ${CMAKE_CURRENT_SOURCE_DIR}/unittests\n    PARAMS ${HERMES_LIT_UPDATE_PARAMS}\n    DEPENDS ${HERMES_TEST_DEPS}\n    ARGS ${HERMES_TEST_EXTRA_ARGS}\n    )\n  set_target_properties(update-lit PROPERTIES FOLDER \"Hermes regression tests\")\nendif()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.23828125,
          "content": "# Code of Conduct\n\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to.\nPlease read the [full text](https://code.fb.com/codeofconduct/)\nso that you can understand what actions will and will not be tolerated.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.65625,
          "content": "# Contributing to Hermes\nWe want to make contributing to this project simple and convenient.\n\nThis document provides a high level overview of the contribution process,\nplease also review our [Coding Standards](doc/CodingStandards.md).\n\n## Code of Conduct\nFacebook has adopted a Code of Conduct that we expect project participants to\nadhere to. Please [read the full text](https://code.fb.com/codeofconduct/) so\nthat you can understand what actions will and will not be tolerated.\n\n## Our Development Process\nFacebook's internal repository remains the source of truth. It is\nautomatically synchronized with GitHub. Contributions can be made through\nregular GitHub pull requests.\n\n## Pull Requests\nWe actively welcome your pull requests. If you are planning on doing a larger\nchunk of work or want to change an external facing API, make sure to file an\nissue first to get feedback on your idea.\n\n1. Fork the repo and create your branch from `main`.\n2. If you've added code that should be tested, add tests.\n3. Ensure the test suite passes and your code lints.\n4. Consider squashing your commits (`git rebase -i`). One intent alongside one\n   commit makes it clearer for people to review and easier to understand your\n   intention.\n5. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Copyright Notice for files\nCopy and paste this to the top of your new file(s):\n\n```\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n```\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the\nsafe disclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## Coding Style\n* The Hermes coding style is generally based on the\n  [LLVM Coding Standards](https://llvm.org/docs/CodingStandards.html).\n* Match the style you see used in the rest of the project. This includes\n  formatting, naming things in code, naming things in documentation.\n* Run `clang-format`, using the provided `.clang-format` configuration.\n\n## License\nBy contributing to Hermes, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0625,
          "content": "MIT License\n\nCopyright (c) Meta Platforms, Inc. and affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.5361328125,
          "content": "# Hermes JS Engine\n[![MIT license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebook/hermes/blob/HEAD/LICENSE)\n[![npm version](https://img.shields.io/npm/v/hermes-engine.svg?style=flat)](https://www.npmjs.com/package/hermes-engine)\n[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/hermes.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:hermes)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/facebook/hermes/blob/HEAD/CONTRIBUTING.md)\n<img src=\"./doc/img/logo.svg\" alt=\"Hermes logo - large H with wings\" align=\"right\" width=\"20%\"/>\n\nHermes is a JavaScript engine optimized for fast start-up of [React Native](https://reactnative.dev/) apps. It features ahead-of-time static optimization and compact bytecode.\n\nIf you're only interested in using pre-built Hermes in a new or existing React Native app, you do not need to follow this guide or have direct access to the Hermes source. Instead, just follow [these instructions to enable Hermes](https://reactnative.dev/docs/hermes).\n\n> Noted that each Hermes release is aimed at a specific RN version. The rule of thumb is to always follow [Hermes releases](https://github.com/facebook/hermes/releases) strictly. Version mismatch can result in instant crash of your apps in the worst case scenario.\n\nIf you want to know how to build and hack on Hermes directly, and/or integrate Hermes built from source into a React Native app then read on.\n\nThe instructions here very briefly cover steps to build the Hermes CLI. They assume you have typical native development tools setup for your OS, and support for cmake and Ninja. For more details of required dependencies, building Hermes with different options, etc. follow these links instead:\n\n* [Building and Running Hermes](doc/BuildingAndRunning.md)\n* [Using a custom Hermes build in a React Native app](doc/ReactNativeIntegration.md#using-a-custom-hermes-build-in-a-react-native-app)\n\nTo build a local debug version of the Hermes CLI tools the following steps should get you started on macOS/Linux:\n\n```shell\nmkdir hermes_workingdir\ncd hermes_workingdir\ngit clone https://github.com/facebook/hermes.git\ncmake -S hermes -B build -G Ninja\ncmake --build ./build\n```\n\nOr if you're using Windows, the following should get you going in a Git Bash shell:\n\n```shell\nmkdir hermes_workingdir\ncd hermes_workingdir\ngit -c core.autocrlf=false clone https://github.com/facebook/hermes.git\ncmake -S hermes -B build -G 'Visual Studio 16 2019' -A x64\ncmake --build ./build\n```\n\nYou will now be in a directory with the output of building Hermes into CLI tools. From here you can run a piece of JavaScript as follows:\n\n```shell\necho \"'use strict'; function hello() { print('Hello World'); } hello();\" | ./bin/hermes\n```\n\n## Contributing\n\nThe main purpose of this repository is to continue to evolve Hermes, making it faster and more efficient. We are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving Hermes.\n\n### Code of Conduct\n\nFacebook has adopted a [Code of Conduct](./CODE_OF_CONDUCT.md) that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.\n\n### Contributing Guide\n\nRead our [contributing guide](CONTRIBUTING.md) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to Hermes.\n\n### License\n\nHermes is [MIT licensed](./LICENSE).\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "git-revision",
          "type": "blob",
          "size": 0.0400390625,
          "content": "158fc46cc9be17940595a8b1de97eaaa308b3f32\n"
        },
        {
          "name": "hermes-engine.podspec",
          "type": "blob",
          "size": 2.541015625,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\nmodule HermesHelper\n  # BUILD_TYPE = :debug\n  BUILD_TYPE = :release\nend\n\nPod::Spec.new do |spec|\n  spec.name        = \"hermes-engine\"\n  # This must be consistent with the release_version in:\n  # - android/build.gradle\n  # - npm/package.json\n  # - CMakeLists.txt\n  spec.version     = \"0.12.0\"\n  spec.summary     = \"Hermes is a small and lightweight JavaScript engine optimized for running React Native.\"\n  spec.description = \"Hermes is a JavaScript engine optimized for fast start-up of React Native apps. It features ahead-of-time static optimization and compact bytecode.\"\n  spec.homepage    = \"https://hermesengine.dev\"\n  spec.license     = { type: \"MIT\", file: \"LICENSE\" }\n  spec.author      = \"Facebook\"\n  # This env var should be supplied with a CDN URL of the \"hermes-runtime-darwin.tgz\" on the Github releases before pod push.\n  # The podspec would be serialized to JSON and people will download prebuilt binaries instead of the source.\n  # TODO(use the hash field as a validation mechanism when the process is stable)\n  spec.source      = ENV['hermes-artifact-url'] ? { http: ENV['hermes-artifact-url'] } : { git: \"https://github.com/facebook/hermes.git\", tag: \"v#{spec.version}\" }\n  spec.platforms   = { :osx => \"10.13\", :ios => \"12.0\", :visionos => \"1.0\", :tvos => \"12.0\" }\n\n  spec.preserve_paths      = [\"destroot/bin/*\"].concat(HermesHelper::BUILD_TYPE == :debug ? [\"**/*.{h,c,cpp}\"] : [])\n  spec.source_files        = \"destroot/include/**/*.h\"\n  spec.header_mappings_dir = \"destroot/include\"\n\n  spec.ios.vendored_frameworks = \"destroot/Library/Frameworks/universal/hermes.xcframework\"\n  spec.visionos.vendored_frameworks = \"destroot/Library/Frameworks/universal/hermes.xcframework\"\n  spec.tvos.vendored_frameworks = \"destroot/Library/Frameworks/universal/hermes.xcframework\"\n  spec.osx.vendored_frameworks = \"destroot/Library/Frameworks/macosx/hermes.framework\"\n\n  spec.xcconfig            = { \"CLANG_CXX_LANGUAGE_STANDARD\" => \"c++17\", \"CLANG_CXX_LIBRARY\" => \"compiler-default\", \"GCC_PREPROCESSOR_DEFINITIONS\" => \"HERMES_ENABLE_DEBUGGER=1\" }\n\n  unless ENV['hermes-artifact-url']\n    spec.prepare_command = <<-EOS\n      # When true, debug build will be used.\n      # See `build-apple-framework.sh` for details\n      DEBUG=#{HermesHelper::BUILD_TYPE == :debug}\n\n      # Build iOS framework\n      ./utils/build-ios-framework.sh\n\n      # Build Mac framework\n      ./utils/build-mac-framework.sh\n    EOS\n  end\nend\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "lldb",
          "type": "tree",
          "content": null
        },
        {
          "name": "npm",
          "type": "tree",
          "content": null
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "unittests",
          "type": "tree",
          "content": null
        },
        {
          "name": "unsupported",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}