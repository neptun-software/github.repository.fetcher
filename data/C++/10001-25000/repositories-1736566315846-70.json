{
  "metadata": {
    "timestamp": 1736566315846,
    "page": 70,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dogecoin/dogecoin",
      "stars": 14833,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0341796875,
          "content": "src/clientversion.cpp export-subst\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.560546875,
          "content": "*.tar.gz\n\n*.exe\nsrc/dogecoin\nsrc/dogecoind\nsrc/dogecoin-cli\nsrc/dogecoin-tx\nsrc/test/test_dogecoin\nsrc/test/test_dogecoin_fuzzy\nsrc/qt/test/test_dogecoin-qt\nsrc/bench/bench_dogecoin\n\n# autoreconf\nMakefile.in\naclocal.m4\nautom4te.cache/\nbuild-aux/config.guess\nbuild-aux/config.sub\nbuild-aux/depcomp\nbuild-aux/install-sh\nbuild-aux/ltmain.sh\nbuild-aux/m4/libtool.m4\nbuild-aux/m4/lt~obsolete.m4\nbuild-aux/m4/ltoptions.m4\nbuild-aux/m4/ltsugar.m4\nbuild-aux/m4/ltversion.m4\nbuild-aux/missing\nbuild-aux/compile\nbuild-aux/test-driver\nconfig.log\nconfig.status\nconfigure\nlibtool\nsrc/config/bitcoin-config.h\nsrc/config/bitcoin-config.h.in\nsrc/config/stamp-h1\nshare/setup.nsi\nshare/qt/Info.plist\n\nsrc/univalue/gen\n\nsrc/qt/*.moc\nsrc/qt/moc_*.cpp\nsrc/qt/forms/ui_*.h\n\nsrc/qt/test/moc*.cpp\n\n.deps\n.dirstamp\n.libs\n.*.swp\n*.*~*\n*.bak\n*.rej\n*.orig\n*.pyc\n*.o\n*.o-*\n*.a\n*.pb.cc\n*.pb.h\n\n*.log\n*.trs\n*.dmg\n\n*.json.h\n*.raw.h\n\n#libtool object files\n*.lo\n*.la\n\n# ignore only unwanted patches\n*.patch\n!depends/patches/**/*.patch\n\n# Compilation and Qt preprocessor part\n*.qm\nMakefile\ndogecoin-qt\nBitcoin-Qt.app\n\n# Unit-tests\nMakefile.test\ndogecoin-qt_test\nsrc/test/buildenv.py\n\n# Resources cpp\nqrc_*.cpp\n\n# Mac specific\n.DS_Store\nbuild\n\n#lcov\n*.gcno\n*.gcda\n/*.info\ntest_bitcoin.coverage/\ntotal.coverage/\ncoverage_percent.txt\n\n#build tests\nlinux-coverage-build\nlinux-build\nwin32-build\nqa/pull-tester/tests_config.py\nqa/cache/*\n\n!src/leveldb*/Makefile\n\n/doc/doxygen/\n\nlibbitcoinconsensus.pc\ncontrib/devtools/split-debug.sh\n\n.idea/\n.vscode/*\n\n# Snapcraft\nparts/\nprime/\nstage/\n*.snap\n\n### IntelliJ IDEA ###\n.idea\n*.iws\n*.iml\n*.ipr\n"
        },
        {
          "name": ".tx",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.201171875,
          "content": "# Contributing to Dogecoin Core\n\nDogecoin Core is open source software, and we would welcome contributions\nwhich improve the state of the software. For those wanting to discuss changes,\nor look for work that needs doing, please see:\n\n* [Help requests](https://github.com/dogecoin/dogecoin/labels/help%20wanted)\n* [Projects](https://github.com/dogecoin/dogecoin/projects)\n* [Dogecoindev on reddit](https://www.reddit.com/r/dogecoindev/)\n\n## Branch Strategy\n\nDogecoin Core's default branch is intentionally a stable release, so that anyone\ndownloading the code and compiling it gets a stable release. Active development\noccurs on branches named after the version they are targeting, for example the\n1.14.4 branch is named `1.14.4-dev`. When raising PRs, please raise against the\nrelevant development branch and **not** against the `master` branch.\n\n## Contributor Workflow\n\nThe codebase is maintained using the \"contributor workflow\" where everyone\nwithout exception contributes patch proposals using \"pull requests\". This\nfacilitates social contribution, easy testing and peer review.\n\nTo contribute a patch, the workflow is as follows:\n\n  - Fork the repository in GitHub, and clone it your development machine.\n  - Create a topic branch from the relevant development branch.\n  - Commit changes to the branch.\n  - Test your changes, which **must** include the unit and RPC tests passing.\n  - Push topic branch to your copy of the repository.\n  - Raise a Pull Request via GitHub.\n\nThe coding conventions in the [developer notes](doc/developer-notes.md) must be\nadhered to.\n\nIn general [commits should be atomic](https://en.wikipedia.org/wiki/Atomic_commit#Atomic_commit_convention)\nand diffs should be easy to read. For this reason do not mix any formatting\nfixes or code moves with actual code changes.\n\nCommit messages should be verbose by default consisting of a short subject line\n(50 chars max), a blank line and detailed explanatory text as separate\nparagraph(s); unless the title alone is self-explanatory (like \"Corrected typo\nin init.cpp\") then a single title line is sufficient. Commit messages should be\nhelpful to people reading your code in the future, so explain the reasoning for\nyour decisions. Further explanation [here](http://chris.beams.io/posts/git-commit/).\n\nPlease refer to the [Git manual](https://git-scm.com/doc) for more information\nabout Git.\n\nThe body of the pull request should contain enough description about what the\npatch does together with any justification/reasoning. You should include\nreferences to any discussions (for example other tickets or mailing list\ndiscussions). At this stage one should expect comments and review from other\ncontributors. You can add more commits to your pull request by committing them\nlocally and pushing to your fork until you have satisfied feedback.\n\n\n## Squashing Commits\n\nIf your pull request is accepted for merging, you may be asked by a maintainer\nto squash and or [rebase](https://git-scm.com/docs/git-rebase) your commits\nbefore it will be merged. The basic squashing workflow is shown below.\n\n    git checkout your_branch_name\n    git rebase -i HEAD~n\n    # n is normally the number of commits in the pull\n    # set commits from 'pick' to 'squash', save and quit\n    # on the next screen, edit/refine commit messages\n    # save and quit\n    git push -f # (force push to GitHub)\n\nIf you have problems with squashing (or other workflows with `git`), you can\nalternatively enable \"Allow edits from maintainers\" in the right GitHub\nsidebar and ask for help in the pull request.\n\nPlease refrain from creating several pull requests for the same change.\nUse the pull request that is already open (or was created earlier) to amend\nchanges. This preserves the discussion and review that happened earlier for\nthe respective change set.\n\nThe length of time required for peer review is unpredictable and will vary\nbetween pull requests.\n\n\n## Pull Request Philosophy\n\nPull Requests should always be focused. For example, a pull request could add a\nfeature, fix a bug, or refactor code; but not a mixture. Please avoid submitting\npull requests that attempt to do too much, are overly large, or overly complex\nas this makes review difficult.\n\n\n### Features\n\nWhen adding a new feature, thought must be given to the long term technical debt\nand maintenance that feature may require after inclusion. Before proposing a new\nfeature that will require maintenance, please consider if you are willing to\nmaintain it (including bug fixing). If features get orphaned with no maintainer\nin the future, they may be removed.\n\n\n### Refactoring\n\nDogecoin Core is a direct fork of Bitcoin Core and therefore benefits from as\nlittle refactoring as possible on code that is created upstream. If you see any\nstructural issues with upstream code, please propose these fixes for\n[bitcoin/bitcoin](https://github.com/bitcoin/bitcoin) and future Dogecoin Core\nreleases will automatically benefit from these.\n\nWhen refactoring Dogecoin-specific code, please keep refactoring requests short,\nlow complexity and easy to verify.\n\n### Experimental features and optimizations\n\nIn some cases where a pull request introduces a new feature or optimization,\nreviewers or maintainers can request the feature to be introduced as an\nexperimental-only feature, meaning that the feature will not be released in\nprovided binaries but will be available for self-compilation for those who\nwish to test it. Experimental features are still expected to be complete and\nthe process to be followed for all contribution guidelines as outlined in this\ndocument.\n\nFor more information, see the\n[experimental feature documentation](./doc/experiments.md)\n\n\n## \"Decision Making\" Process\n\nThe following applies to code changes to Dogecoin Core, and is not to be\nconfused with overall Dogecoin Network Protocol consensus changes. All consensus\nchanges **must** be ratified by miners; a proposal to implement protocol changes\ndoes not guarantee activation on the mainnet, not even when a binary gets\nreleased by maintainers.\n\nWhether a pull request is merged into Dogecoin Core rests with the repository\nmaintainers.\n\nMaintainers will take into consideration if a patch is in line with the general\nprinciples of Dogecoin; meets the minimum standards for inclusion; and will\ntake into account the consensus among frequent contributors.\n\nIn general, all pull requests must:\n\n  - have a clear use case, fix a demonstrable bug or serve the greater good of\n    Dogecoin;\n  - be peer reviewed;\n  - have unit tests and functional tests;\n  - follow code style guidelines;\n  - not break the existing test suite;\n  - where bugs are fixed, where possible, there should be unit tests\n    demonstrating the bug and also proving the fix. This helps prevent\n    regressions.\n\nThe following patch types are expected to have significant discussion before\napproval and merge:\n\n- Consensus rule changes (through softfork or otherwise)\n- Policy changes\n- Maturing experimental features into production\n\nWhile each case will be different, one should be prepared to expend more time\nand effort than for other kinds of patches because of increased peer review\nand consensus building requirements.\n\n\n### Peer Review\n\nAnyone may participate in peer review which is expressed by comments in the pull\nrequest. Typically, reviewers will review the code for obvious errors, as well as\ntest out the patch set and opine on the technical merits of the patch.\nRepository maintainers take into account the peer review when determining if\nthere is consensus to merge a pull request.\n\nMaintainers reserve the right to weigh the opinions of peer reviewers\nusing common sense judgement and also may weight based on meritocracy: Those\nthat have demonstrated a deeper commitment and understanding towards Dogecoin\n(over time) or have clear domain expertise may naturally have more weight, as\none would expect in all walks of life.\n\nWhere a patch set proposes to change the Dogecoin consensus, it must have been\ndiscussed extensively, be accompanied by widely discussed documentation and have\na generally widely perceived technical consensus of being a worthwhile change,\nbased on the judgement of the maintainers.\n\n\n### Merging pull requests\n\nMaintainers can only merge pull requests after any maintainer, other than the\nauthor of a pull request, has approved the code according to the decision\nmaking process outlined above.\n\nMaintainers must keep pull requests open for at least 24 hours after approval\nto merge is given, to allow anyone to voice a concern that may have been missed\nin review, or request more time to investigate a suspected issue. If a situation\narises where more time has been requested but cannot be granted, at maintainer\ndiscretion, a new issue or pull request should be opened to address the defect\nor discuss improved alternatives. Requests for time and maintainer decision\nmaking are expected to be clearly documented on the pull request discussion on\nGithub.\n\nMaintenance tasks and time-critical patches can be exempted from this rule if\nthese are clearly marked as such, at maintainer discretion.\n\n## Copyright\n\nBy contributing to this repository, you agree to license your work under the \nMIT license unless specified otherwise in `contrib/debian/copyright` or at \nthe top of the file itself. Any work contributed where you are not the original \nauthor must contain its license header with the original author(s) and source.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2009-2024 The Bitcoin Core developers\nCopyright (c) 2013-2024 The Dogecoin Core developers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 4.041015625,
          "content": "# Installing Dogecoin Core\n\n### Pre-compiled binaries\n\nThe easiest way to install the latest version of the Dogecoin Core software is\nby to download the latest precompiled binaries for your platform from the\n[release page](https://github.com/dogecoin/dogecoin/releases). Currently,\nbinaries are released for the following platforms:\n\n- Windows, 64-bit and 32-bit\n- Linux, 64-bit and 32-bit\n- MacOS, Intel 64-bit\n- ARM, 64-bit and 32-bit Linux\n\nThese binaries are created and verified by multiple independent people, to\nensure honest and malware-free releases. See\n[the gitian building documentation](doc/gitian-building.md) for more information\nregarding that process.\n\n#### Minimum Operating System versions\n\nThe following versions have been verified to be supported for pre-compiled\nbinaries:\n\n| OS/Distro (arch)  | Minimum version      |\n| :---------------- | :------------------- |\n| Windows (x86)     | Vista                |\n| MacOS (x86)       | Mountain Lion (10.8) |\n| Ubuntu (x86)      | Trusty (16.04)       |\n| Ubuntu (ARM)      | Focal (20.04)        |\n| Debian (x86)      | Jessie (8)           |\n| Debian (ARM)      | Stretch (9)          |\n| CentOS (x86)      | 7                    |\n| Fedora (x86)      | 28                   |\n\nIt is possible to run Dogecoin Core on other systems and lower versions when\ncompiling from source, see the chapters below for more information.\n\n### Compiling using packaged dependencies\n\nIt is possible to build your own copy of Dogecoin Core with the exact, tested,\ndependencies, as used for the binary releases, by using the\n[depends system](depends/description.md). Please refer to the\n[depends README](depends/README.md) for instructions to build Dogecoin using\nthese dependencies.\n\n### Compiling using system-provided libraries\n\n  The following are developer notes on how to build Dogecoin on your native\n  platform, using the dependencies as provided by your system's package manager.\n  Before starting, ensure your system is updated and has the latest security patches.\n  Outdated libraries can render the entire system, including Dogecoin Core, vulnerable.\n  They are not complete guides, but include notes on the necessary libraries,\n  compile flags, etc.\n\n  - [Unix Build Notes](doc/build-unix.md)\n  - [Windows Build Notes](doc/build-windows.md)\n  - [macOS Build Notes](doc/build-macos.md)\n\n### Testing\n\nUnit tests can be compiled and ran with `make check`. Further details on running\nand extending unit tests can be found in [/src/test/README.md](/src/test/README.md).\n\nThere are also [regression and integration tests](/qa) written in Python, that\nare run automatically on the build server. These tests can be run (if the\n[test dependencies](/qa) are installed) with: `qa/pull-tester/rpc-tests.py`\n\n### Tips and tricks\n\n**compiling for debugging**\n\nRun `configure` with the `--enable-debug` option, then `make`. Or run `configure` with\n`CXXFLAGS=\"-g -ggdb -O0\"` or whatever debug flags you need.\n\n**debug.log**\n\nIf the code is behaving strangely, take a look in the debug.log file in the data directory;\nerror and debugging messages are written there.\n\nThe `-debug=...` command-line option controls debugging; running with just `-debug` will turn\non all categories (and give you a very large debug.log file).\n\nThe Qt code routes `qDebug()` output to debug.log under category \"qt\": run with `-debug=qt`\nto see it.\n\n**testnet and regtest modes**\n\nRun with the `-testnet` option to run with \"play dogecoins\" on the test network, if you\nare testing multi-machine code that needs to operate across the internet.\n\nIf you are testing something that can run on one machine, run with the `-regtest` option.\nIn regression test mode, blocks can be created on-demand; see qa/rpc-tests/ for tests\nthat run in `-regtest` mode.\n\n**DEBUG_LOCKORDER**\n\nDogecoin Core is a multithreaded application, and deadlocks or other multithreading bugs\ncan be very difficult to track down. Compiling with `-DDEBUG_LOCKORDER` (`configure\nCXXFLAGS=\"-DDEBUG_LOCKORDER -g\"`) inserts run-time checks to keep track of which locks\nare held, and adds warnings to the debug.log file if inconsistencies are detected.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 8.6728515625,
          "content": "# Copyright (c) 2013-2016 The Bitcoin Core developers\n# Distributed under the MIT software license, see the accompanying\n# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n\nACLOCAL_AMFLAGS = -I build-aux/m4\nSUBDIRS = src\nif ENABLE_MAN\nSUBDIRS += doc/man\nendif\n.PHONY: deploy FORCE\n\nexport PYTHONPATH\n\nif BUILD_BITCOIN_LIBS\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = libbitcoinconsensus.pc\nendif\n\nBITCOIND_BIN=$(top_builddir)/src/$(BITCOIN_DAEMON_NAME)$(EXEEXT)\nBITCOIN_QT_BIN=$(top_builddir)/src/qt/$(BITCOIN_GUI_NAME)$(EXEEXT)\nBITCOIN_CLI_BIN=$(top_builddir)/src/$(BITCOIN_CLI_NAME)$(EXEEXT)\nBITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win$(WINDOWS_BITS)-setup$(EXEEXT)\n\nempty :=\nspace := $(empty) $(empty)\n\nOSX_APP=Dogecoin-Qt.app\nOSX_VOLNAME = $(subst $(space),-,$(PACKAGE_NAME))\nOSX_DMG = $(OSX_VOLNAME).dmg\nOSX_BACKGROUND_SVG=background.svg\nOSX_BACKGROUND_IMAGE=background.tiff\nOSX_BACKGROUND_IMAGE_DPIS=36 72\nOSX_DSSTORE_GEN=$(top_srcdir)/contrib/macdeploy/custom_dsstore.py\nOSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\nOSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\nOSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/dogecoin.icns\nOSX_PLIST=$(top_builddir)/share/qt/Info.plist #not installed\nOSX_QT_TRANSLATIONS = da,de,es,hu,ru,uk,zh_CN,zh_TW\n\nDIST_DOCS = $(wildcard doc/*.md) $(wildcard doc/release-notes/*.md)\nDIST_CONTRIB = $(top_srcdir)/contrib/dogecoin-cli.bash-completion \\\n\t       $(top_srcdir)/contrib/dogecoin-tx.bash-completion \\\n\t       $(top_srcdir)/contrib/dogecoind.bash-completion \\\n\t       $(top_srcdir)/contrib/init \\\n\t       $(top_srcdir)/contrib/rpm\n\nBIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n           $(top_srcdir)/contrib/devtools/security-check.py\n\nWINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/dogecoin.ico \\\n  $(top_srcdir)/share/pixmaps/nsis-header.bmp \\\n  $(top_srcdir)/share/pixmaps/nsis-wizard.bmp \\\n  $(top_srcdir)/doc/README_windows.txt\n\nOSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n  $(top_srcdir)/contrib/macdeploy/$(OSX_BACKGROUND_SVG) \\\n  $(OSX_DSSTORE_GEN) \\\n  $(top_srcdir)/contrib/macdeploy/detached-sig-apply.sh \\\n  $(top_srcdir)/contrib/macdeploy/detached-sig-create.sh\n\nCOVERAGE_INFO = baseline_filtered_combined.info baseline.info \\\n  leveldb_baseline.info test_bitcoin_filtered.info total_coverage.info \\\n  baseline_filtered.info rpc_test.info rpc_test_filtered.info \\\n  leveldb_baseline_filtered.info test_bitcoin_coverage.info test_bitcoin.info\n\ndist-hook:\n\t-$(GIT) archive --format=tar HEAD -- src/clientversion.cpp | $(AMTAR) -C $(top_distdir) -xf -\n\n$(BITCOIN_WIN_INSTALLER): all-recursive\n\t$(MKDIR_P) $(top_builddir)/release\n\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIND_BIN) $(top_builddir)/release\n\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_QT_BIN) $(top_builddir)/release\n\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_CLI_BIN) $(top_builddir)/release\n\t@test -f $(MAKENSIS) && $(MAKENSIS) -V2 $(top_builddir)/share/setup.nsi || \\\n\t  echo error: could not build $@\n\t@echo built $@\n\n$(OSX_APP)/Contents/PkgInfo:\n\t$(MKDIR_P) $(@D)\n\t@echo \"APPL????\" > $@\n\n$(OSX_APP)/Contents/Resources/empty.lproj:\n\t$(MKDIR_P) $(@D)\n\t@touch $@\n\n$(OSX_APP)/Contents/Info.plist: $(OSX_PLIST)\n\t$(MKDIR_P) $(@D)\n\t$(INSTALL_DATA) $< $@\n\n$(OSX_APP)/Contents/Resources/dogecoin.icns: $(OSX_INSTALLER_ICONS)\n\t$(MKDIR_P) $(@D)\n\t$(INSTALL_DATA) $< $@\n\n$(OSX_APP)/Contents/MacOS/Dogecoin-Qt: $(BITCOIN_QT_BIN)\n\t$(MKDIR_P) $(@D)\n\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM)  $< $@\n\n$(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings:\n\t$(MKDIR_P) $(@D)\n\techo '{\tCFBundleDisplayName = \"$(PACKAGE_NAME)\"; CFBundleName = \"$(PACKAGE_NAME)\"; }' > $@\n\nOSX_APP_BUILT=$(OSX_APP)/Contents/PkgInfo $(OSX_APP)/Contents/Resources/empty.lproj \\\n  $(OSX_APP)/Contents/Resources/dogecoin.icns $(OSX_APP)/Contents/Info.plist \\\n  $(OSX_APP)/Contents/MacOS/Dogecoin-Qt $(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings\n\nosx_volname:\n\techo $(OSX_VOLNAME) >$@\n\nif BUILD_DARWIN\n$(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING) $(OSX_BACKGROUND_IMAGE)\n\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -add-qt-tr $(OSX_QT_TRANSLATIONS) -translations-dir=$(QT_TRANSLATION_DIR) -dmg -fancy $(OSX_FANCY_PLIST) -verbose 2 -volname $(OSX_VOLNAME)\n\n$(OSX_BACKGROUND_IMAGE).png: contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n\tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d 36 -p 36 -o $@\n$(OSX_BACKGROUND_IMAGE)@2x.png: contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n\tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d 72 -p 72 -o $@\n$(OSX_BACKGROUND_IMAGE): $(OSX_BACKGROUND_IMAGE).png $(OSX_BACKGROUND_IMAGE)@2x.png\n\ttiffutil -cathidpicheck $^ -out $@\n\ndeploydir: $(OSX_DMG)\nelse\nAPP_DIST_DIR=$(top_builddir)/dist\nAPP_DIST_EXTRAS=$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE) $(APP_DIST_DIR)/.DS_Store $(APP_DIST_DIR)/Applications\n\n$(APP_DIST_DIR)/Applications:\n\t@rm -f $@\n\t@cd $(@D); $(LN_S) /Applications $(@F)\n\n$(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Dogecoin-Qt\n\n$(OSX_DMG): $(APP_DIST_EXTRAS)\n\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"$(OSX_VOLNAME)\" -no-pad -r -dir-mode 0755 -apple -o $@ dist\n\ndpi%.$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n\tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d $* -p $* | $(IMAGEMAGICK_CONVERT) - $@\nOSX_BACKGROUND_IMAGE_DPIFILES := $(foreach dpi,$(OSX_BACKGROUND_IMAGE_DPIS),dpi$(dpi).$(OSX_BACKGROUND_IMAGE))\n$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): $(OSX_BACKGROUND_IMAGE_DPIFILES)\n\t$(MKDIR_P) $(@D)\n\t$(TIFFCP) -c none $(OSX_BACKGROUND_IMAGE_DPIFILES) $@\n\n$(APP_DIST_DIR)/.DS_Store: $(OSX_DSSTORE_GEN)\n\t$(PYTHON) $< \"$@\" \"$(OSX_VOLNAME)\"\n\n$(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Dogecoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n\tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -add-qt-tr $(OSX_QT_TRANSLATIONS) -verbose 2\n\ndeploydir: $(APP_DIST_EXTRAS)\nendif\n\nif TARGET_DARWIN\nappbundle: $(OSX_APP_BUILT)\ndeploy: $(OSX_DMG)\nendif\nif TARGET_WINDOWS\ndeploy: $(BITCOIN_WIN_INSTALLER)\nendif\n\n$(BITCOIN_QT_BIN): FORCE\n\t$(MAKE) -C src qt/$(@F)\n\n$(BITCOIND_BIN): FORCE\n\t$(MAKE) -C src $(@F)\n\n$(BITCOIN_CLI_BIN): FORCE\n\t$(MAKE) -C src $(@F)\n\nif USE_LCOV\n\nbaseline.info:\n\t$(LCOV) -c -i -d $(abs_builddir)/src -o $@\n\nbaseline_filtered.info: baseline.info\n\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n\nleveldb_baseline.info: baseline_filtered.info\n\t$(LCOV) -c -i -d $(abs_builddir)/src/leveldb -b $(abs_builddir)/src/leveldb -o $@\n\nleveldb_baseline_filtered.info: leveldb_baseline.info\n\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n\nbaseline_filtered_combined.info: leveldb_baseline_filtered.info baseline_filtered.info\n\t$(LCOV) -a leveldb_baseline_filtered.info -a baseline_filtered.info -o $@\n\ntest_bitcoin.info: baseline_filtered_combined.info\n\t$(MAKE) -C src/ check\n\t$(LCOV) -c -d $(abs_builddir)/src -t test_bitcoin -o $@\n\t$(LCOV) -z -d $(abs_builddir)/src\n\t$(LCOV) -z -d $(abs_builddir)/src/leveldb\n\ntest_bitcoin_filtered.info: test_bitcoin.info\n\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n\nrpc_test.info: test_bitcoin_filtered.info\n\t-@TIMEOUT=15 python qa/pull-tester/rpc-tests.py $(EXTENDED_RPC_TESTS)\n\t$(LCOV) -c -d $(abs_builddir)/src --t rpc-tests -o $@\n\t$(LCOV) -z -d $(abs_builddir)/src\n\t$(LCOV) -z -d $(abs_builddir)/src/leveldb\n\nrpc_test_filtered.info: rpc_test.info\n\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n\ntest_bitcoin_coverage.info: baseline_filtered_combined.info test_bitcoin_filtered.info\n\t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -o $@\n\ntotal_coverage.info: baseline_filtered_combined.info test_bitcoin_filtered.info rpc_test_filtered.info\n\t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -a rpc_test_filtered.info -o $@ | $(GREP) \"\\%\" | $(AWK) '{ print substr($$3,2,50) \"/\" $$5 }' > coverage_percent.txt\n\ntest_bitcoin.coverage/.dirstamp:  test_bitcoin_coverage.info\n\t$(GENHTML) -s $< -o $(@D)\n\t@touch $@\n\ntotal.coverage/.dirstamp: total_coverage.info\n\t$(GENHTML) -s $< -o $(@D)\n\t@touch $@\n\ncov: test_bitcoin.coverage/.dirstamp total.coverage/.dirstamp\n\nendif\n\ndist_noinst_SCRIPTS = autogen.sh\n\nEXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/rpc-tests $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n\nCLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n\n# This file is problematic for out-of-tree builds if it exists.\nDISTCLEANFILES = qa/pull-tester/tests_config.pyc\n\n.INTERMEDIATE: $(COVERAGE_INFO)\n\nDISTCHECK_CONFIGURE_FLAGS = --enable-man\n\nclean-local:\n\trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ qa/tmp/ cache/ $(OSX_APP)\n\trm -rf qa/pull-tester/__pycache__\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.0986328125,
          "content": "<h1 align=\"center\">\n<img src=\"https://raw.githubusercontent.com/dogecoin/dogecoin/master/share/pixmaps/dogecoin256.svg\" alt=\"Dogecoin\" width=\"256\"/>\n<br/><br/>\nDogecoin Core [DOGE, Ð]  \n</h1>\n\n**IMPORTANT: Starting August 2024, the `master` branch has become the primary\nintegration branch and has become unstable. Please check out a tagged version\nbefore compiling production binaries.**\n\nFor internationalized documentation, see the index at [doc/intl](doc/intl/README.md).\n\nDogecoin is a community-driven cryptocurrency that was inspired by a Shiba Inu meme. The Dogecoin Core software allows anyone to operate a node in the Dogecoin blockchain networks and uses the Scrypt hashing method for Proof of Work. It is adapted from Bitcoin Core and other cryptocurrencies.\n\nFor information about the default fees used on the Dogecoin network, please\nrefer to the [fee recommendation](doc/fee-recommendation.md).\n\n## Usage 💻\n\nTo start your journey with Dogecoin Core, see the [installation guide](INSTALL.md) and the [getting started](doc/getting-started.md) tutorial.\n\nThe JSON-RPC API provided by Dogecoin Core is self-documenting and can be browsed with `dogecoin-cli help`, while detailed information for each command can be viewed with `dogecoin-cli help <command>`.\n\n### Such ports\n\nDogecoin Core by default uses port `22556` for peer-to-peer communication that\nis needed to synchronize the \"mainnet\" blockchain and stay informed of new\ntransactions and blocks. Additionally, a JSONRPC port can be opened, which\ndefaults to port `22555` for mainnet nodes. It is strongly recommended to not\nexpose RPC ports to the public internet.\n\n| Function | mainnet | testnet | regtest |\n| :------- | ------: | ------: | ------: |\n| P2P      |   22556 |   44556 |   18444 |\n| RPC      |   22555 |   44555 |   18332 |\n\n## Ongoing development - Moon plan 🌒\n\nDogecoin Core is an open source and community driven software. The development\nprocess is open and publicly visible; anyone can see, discuss and work on the\nsoftware.\n\nMain development resources:\n\n* [GitHub Projects](https://github.com/dogecoin/dogecoin/projects) is used to\n  follow planned and in-progress work for upcoming releases.\n* [GitHub Discussions](https://github.com/dogecoin/dogecoin/discussions) is used\n  to discuss features, planned and unplanned, related to both the development of\n  the Dogecoin Core software, the underlying protocols and the DOGE asset.\n\n### Version strategy\nVersion numbers are following ```major.minor.patch``` semantics.\n\n### Branches\nThere are 4 types of branches in this repository:\n\n- **master:** Unstable, contains the latest code under development.\n- **maintenance:** Stable, contains the latest version of previous releases,\n  which are still under active maintenance. Format: ```<version>-maint```\n- **development:** Unstable, contains new code for upcoming releases. Format: ```<version>-dev```\n- **archive:** Stable, immutable branches for old versions that no longer change\n  because they are no longer maintained.\n\n***Submit your pull requests against `master`***\n\n*Maintenance branches are exclusively mutable by release. When a release is*\n*planned, a development branch will be created and commits from master will*\n*be cherry-picked into these by maintainers.*\n\n## Contributing 🤝\n\nIf you find a bug or experience issues with this software, please report it\nusing the [issue system](https://github.com/dogecoin/dogecoin/issues/new?assignees=&labels=bug&template=bug_report.md&title=%5Bbug%5D+).\n\nPlease see [the contribution guide](CONTRIBUTING.md) to see how you can\nparticipate in the development of Dogecoin Core. There are often\n[topics seeking help](https://github.com/dogecoin/dogecoin/labels/help%20wanted)\nwhere your contributions will have high impact and get very appreciation. wow.\n\n## Very Much Frequently Asked Questions ❓\n\nDo you have a question regarding Dogecoin? An answer is perhaps already in the\n[FAQ](doc/FAQ.md) or the\n[Q&A section](https://github.com/dogecoin/dogecoin/discussions/categories/q-a)\nof the discussion board!\n\n## License - Much license ⚖️\nDogecoin Core is released under the terms of the MIT license. See\n[COPYING](COPYING) for more information.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.7216796875,
          "content": "# Security Policy\n\n## Supported versions\n\nCurrently, version 1.14.7 is supported on this repository.\n\n## Reporting a Vulnerability\n\nTo report security issues, please send pgp encrypted email to the following\ndevelopers:\n\n\n| Name           | E-mail                  | PGP key fingerprint\n| :------------- | :---------------------- | :-------------------\n| Chromatic      | chromatic@wgz.org       | E343 7979 A840 E43F 7BB5 A579 2C48 E041 36C2 B580\n| Michi Lumin    | michi@luskwood.org      | 6DB4 66B1 7BD2 60F4 4950 F6AF 520B 53AE 29E9 8861\n| Patrick Lodder | patricklodder@proton.me | E324 9D4E E7F3 7C7F 8B30 676F 603E F476 B796 1EA7\n\nKeys can be imported by running the following command:\n\n```bash\ngpg --recv-keys \"<fingerprint>\"\n```\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.5146484375,
          "content": "#!/bin/sh\n# Copyright (c) 2013-2016 The Bitcoin Core developers\n# Distributed under the MIT software license, see the accompanying\n# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n\nset -e\nsrcdir=\"$(dirname $0)\"\ncd \"$srcdir\"\nif [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"`which glibtoolize 2>/dev/null`\"; then\n  LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n  export LIBTOOLIZE\nfi\nwhich autoreconf >/dev/null || \\\n  (echo \"configuration failed, please install autoconf first\" && exit 1)\nautoreconf --install --force --warnings=all\n"
        },
        {
          "name": "build-aux",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 47.1171875,
          "content": "dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\nAC_PREREQ([2.60])\ndefine(_CLIENT_VERSION_MAJOR, 1)\ndefine(_CLIENT_VERSION_MINOR, 14)\ndefine(_CLIENT_VERSION_REVISION, 99)\ndefine(_CLIENT_VERSION_BUILD, 0)\ndefine(_CLIENT_VERSION_IS_RELEASE, false)\ndefine(_COPYRIGHT_YEAR, 2024)\ndefine(_COPYRIGHT_HOLDERS,[The %s developers])\ndefine(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Core and Dogecoin Core]])\ndefine(_CURRENT_RELEASE_DATE,[[2024-08-03]])\ndefine(_EXPECTED_DAYS_TO_NEXT_RELEASE,[270])\nAC_INIT([Dogecoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/dogecoin/dogecoin/issues],[dogecoin],[https://dogecoin.com/])\nAC_CONFIG_SRCDIR([src/validation.cpp])\nAC_CONFIG_HEADERS([src/config/bitcoin-config.h])\nAC_CONFIG_AUX_DIR([build-aux])\nAC_CONFIG_MACRO_DIR([build-aux/m4])\n\nBITCOIN_DAEMON_NAME=dogecoind\nBITCOIN_GUI_NAME=dogecoin-qt\nBITCOIN_CLI_NAME=dogecoin-cli\nBITCOIN_TX_NAME=dogecoin-tx\n\nAC_CANONICAL_HOST\n\nAH_TOP([#ifndef BITCOIN_CONFIG_H])\nAH_TOP([#define BITCOIN_CONFIG_H])\nAH_BOTTOM([#endif //BITCOIN_CONFIG_H])\n\ndnl faketime breaks configure and is only needed for make. Disable it here.\nunset FAKETIME\n\ndnl Automake init set-up and checks\nAM_INIT_AUTOMAKE([no-define subdir-objects foreign])\n\ndnl faketime messes with timestamps and causes configure to be re-run.\ndnl --disable-maintainer-mode can be used to bypass this.\nAM_MAINTAINER_MODE([enable])\n\ndnl make the compilation flags quiet unless V=1 is used\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\ndnl Compiler checks (here before libtool).\nif test \"x${CXXFLAGS+set}\" = \"xset\"; then\n  CXXFLAGS_overridden=yes\nelse\n  CXXFLAGS_overridden=no\nfi\nAC_PROG_CXX\n\ndnl By default, libtool for mingw refuses to link static libs into a dll for\ndnl fear of mixing pic/non-pic objects, and import/export complications. Since\ndnl we have those under control, re-enable that functionality.\ncase $host in\n  *mingw*)\n     lt_cv_deplibs_check_method=\"pass_all\"\n  ;;\nesac\n\nAC_ARG_ENABLE([c++14],\n  [AS_HELP_STRING([--enable-c++14],\n  [enable compilation in c++14 mode (disabled by default)])],\n  [use_cxx14=$enableval],\n  [use_cxx14=no])\n\nAC_ARG_ENABLE([c++17],\n  [AS_HELP_STRING([--enable-c++17],\n  [enable compilation in c++17 mode (disabled by default)])],\n  [use_cxx17=$enableval],\n  [use_cxx17=no])\n\ndnl Require either of C++ 17, 14 or 11 (default) compiler (no GNU extensions)\nif test \"x$use_cxx17\" = xyes; then\n  if test \"x$use_cxx14\" = xyes; then\n    AC_MSG_ERROR(\"Both c++17 and c++14 are configured. Please configure only one standard\")\n  fi\n  AX_CXX_COMPILE_STDCXX([17], [noext], [mandatory], [nodefault])\nelif test \"x$use_cxx14\" = xyes; then\n  AX_CXX_COMPILE_STDCXX([14], [noext], [mandatory], [nodefault])\nelse\n  AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [nodefault])\nfi\n\n\ndnl Check if -latomic is required for <std::atomic>\nCHECK_ATOMIC\n\ndnl Unless the user specified OBJCXX, force it to be the same as CXX. This ensures\ndnl that we get the same -std flags for both.\nm4_ifdef([AC_PROG_OBJCXX],[\nif test \"x${OBJCXX+set}\" = \"x\"; then\n  OBJCXX=\"${CXX}\"\nfi\nAC_PROG_OBJCXX\n])\n\ndnl Libtool init checks.\nLT_INIT([pic-only])\n\ndnl Check/return PATH for base programs.\nAC_PATH_TOOL(AR, ar)\nAC_PATH_TOOL(RANLIB, ranlib)\nAC_PATH_TOOL(STRIP, strip)\nAC_PATH_TOOL(GCOV, gcov)\nAC_PATH_PROG(LCOV, lcov)\ndnl Python 3.x is supported from 3.4 on (see https://github.com/bitcoin/bitcoin/issues/7893)\nAC_PATH_PROGS([PYTHON], [python3.6 python3.5 python3.4 python3 python2.7 python2 python])\nAC_PATH_PROG(GENHTML, genhtml)\nAC_PATH_PROG([GIT], [git])\nAC_PATH_PROG(CCACHE,ccache)\nAC_PATH_PROG(XGETTEXT,xgettext)\nAC_PATH_PROG(HEXDUMP,hexdump)\nAC_PATH_TOOL(OBJCOPY, objcopy)\n\nAC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)\n\n# Enable wallet\nAC_ARG_ENABLE([wallet],\n  [AS_HELP_STRING([--disable-wallet],\n  [disable wallet (enabled by default)])],\n  [enable_wallet=$enableval],\n  [enable_wallet=yes])\n\nAC_ARG_WITH([miniupnpc],\n  [AS_HELP_STRING([--with-miniupnpc],\n  [enable UPNP (default is yes if libminiupnpc is found)])],\n  [use_upnp=$withval],\n  [use_upnp=auto])\n\nAC_ARG_ENABLE([upnp-default],\n  [AS_HELP_STRING([--enable-upnp-default],\n  [if UPNP is enabled, turn it on at startup (default is no)])],\n  [use_upnp_default=$enableval],\n  [use_upnp_default=no])\n\nAC_ARG_ENABLE(tests,\n    AS_HELP_STRING([--disable-tests],[do not compile tests (default is to compile)]),\n    [use_tests=$enableval],\n    [use_tests=yes])\n\nAC_ARG_ENABLE(gui-tests,\n    AS_HELP_STRING([--disable-gui-tests],[do not compile GUI tests (default is to compile if GUI and tests enabled)]),\n    [use_gui_tests=$enableval],\n    [use_gui_tests=$use_tests])\n\nAC_ARG_ENABLE(bench,\n    AS_HELP_STRING([--disable-bench],[do not compile benchmarks (default is to compile)]),\n    [use_bench=$enableval],\n    [use_bench=yes])\n\nAC_ARG_ENABLE([extended-rpc-tests],\n    AS_HELP_STRING([--enable-extended-rpc-tests],[enable expensive RPC tests when using lcov (default no)]),\n    [use_extended_rpc_tests=$enableval],\n    [use_extended_rpc_tests=no])\n\nAC_ARG_WITH([qrencode],\n  [AS_HELP_STRING([--with-qrencode],\n  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n  [use_qr=$withval],\n  [use_qr=auto])\n\nAC_ARG_ENABLE([hardening],\n  [AS_HELP_STRING([--disable-hardening],\n  [do not attempt to harden the resulting executables (default is to harden)])],\n  [use_hardening=$enableval],\n  [use_hardening=yes])\n\nAC_ARG_ENABLE([reduce-exports],\n  [AS_HELP_STRING([--enable-reduce-exports],\n  [attempt to reduce exported symbols in the resulting executables (default is no)])],\n  [use_reduce_exports=$enableval],\n  [use_reduce_exports=no])\n\nAC_ARG_ENABLE([ccache],\n  [AS_HELP_STRING([--disable-ccache],\n  [do not use ccache for building (default is to use if found)])],\n  [use_ccache=$enableval],\n  [use_ccache=auto])\n\nAC_ARG_ENABLE([lcov],\n  [AS_HELP_STRING([--enable-lcov],\n  [enable lcov testing (default is no)])],\n  [use_lcov=yes],\n  [use_lcov=no])\n\nAC_ARG_ENABLE([glibc-back-compat],\n  [AS_HELP_STRING([--enable-glibc-back-compat],\n  [enable backwards compatibility with glibc])],\n  [use_glibc_compat=$enableval],\n  [use_glibc_compat=no])\n\nAC_ARG_WITH([system-univalue],\n  [AS_HELP_STRING([--with-system-univalue],\n  [Build with system UniValue (default is no)])],\n  [system_univalue=$withval],\n  [system_univalue=no]\n)\nAC_ARG_ENABLE([zmq],\n  [AS_HELP_STRING([--disable-zmq],\n  [disable ZMQ notifications])],\n  [use_zmq=$enableval],\n  [use_zmq=yes])\n\nAC_ARG_ENABLE([experimental],\n  [AS_HELP_STRING([--enable-experimental],\n  [Allow experimental features to be configured (default is no)])],\n  [allow_experimental=$enableval],\n  [allow_experimental=no])\n\nAC_ARG_ENABLE([scrypt-sse2],\n  [AS_HELP_STRING([--enable-scrypt-sse2],\n  [Build with scrypt sse2 implementation (default is no)])],\n  [use_scrypt_sse2=$enableval],\n  [use_scrypt_sse2=no])\n\nAC_ARG_WITH([intel-avx2],\n  [AS_HELP_STRING([--with-intel-avx2],\n  [Build with intel avx2 (default is no)])],\n  [intel_avx2=$withval],\n  [intel_avx2=no])\n\nAC_ARG_WITH([armv8-crypto],\n  [AS_HELP_STRING([--with-armv8-crypto],\n  [Build with armv8 crypto (default is no)])],\n  [armv8_crypto=$withval],\n  [armv8_crypto=no])\n\nAC_ARG_WITH([armv82-crypto],\n  [AS_HELP_STRING([--with-armv82-crypto],\n  [Build with armv8.2 crypto sha512 (default is no)])],\n  [armv82_crypto=$withval],\n  [armv82_crypto=no])\n\nAC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n\nAC_ARG_ENABLE(man,\n    [AS_HELP_STRING([--disable-man],\n                    [do not install man pages (default is to install)])],,\n    enable_man=yes)\nAM_CONDITIONAL(ENABLE_MAN, test \"$enable_man\" != no)\n\n# Enable debug\nAC_ARG_ENABLE([debug],\n    [AS_HELP_STRING([--enable-debug],\n                    [use debug compiler flags and macros (default is no)])],\n    [enable_debug=$enableval],\n    [enable_debug=no])\n\n# Turn warnings into errors\nAC_ARG_ENABLE([werror],\n    [AS_HELP_STRING([--enable-werror],\n                    [Treat certain compiler warnings as errors (default is no)])],\n    [enable_werror=$enableval],\n    [enable_werror=no])\n\nAC_LANG_PUSH([C++])\nAX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR=\"-Werror\"],[CXXFLAG_WERROR=\"\"])\n\nif test \"x$enable_debug\" = xyes; then\n    CPPFLAGS=\"$CPPFLAGS -DDEBUG -DDEBUG_LOCKORDER\"\n    if test \"x$GCC\" = xyes; then\n        CFLAGS=\"$CFLAGS -g3 -O0\"\n    fi\n\n    if test \"x$GXX\" = xyes; then\n        CXXFLAGS=\"$CXXFLAGS -g3 -O0\"\n    fi\nfi\n\nERROR_CXXFLAGS=\nif test \"x$enable_werror\" = \"xyes\"; then\n  if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n    AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n  fi\n  AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\nfi\n\nif test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n  AX_CHECK_COMPILE_FLAG([-Wall],[CXXFLAGS=\"$CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wextra],[CXXFLAGS=\"$CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wformat],[CXXFLAGS=\"$CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wvla],[CXXFLAGS=\"$CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wformat-security],[CXXFLAGS=\"$CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n\n  ## Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n  ## unknown options if any other warning is produced. Test the -Wfoo case, and\n  ## set the -Wno-foo case if it works.\n  AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[CXXFLAGS=\"$CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wself-assign],[CXXFLAGS=\"$CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[CXXFLAGS=\"$CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n  AX_CHECK_COMPILE_FLAG([-Wdeprecated-register],[CXXFLAGS=\"$CXXFLAGS -Wno-deprecated-register\"],,[[$CXXFLAG_WERROR]])\nfi\nCPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n\nAC_ARG_WITH([utils],\n  [AS_HELP_STRING([--with-utils],\n  [build bitcoin-cli bitcoin-tx (default=yes)])],\n  [build_bitcoin_utils=$withval],\n  [build_bitcoin_utils=yes])\n\nAC_ARG_WITH([libs],\n  [AS_HELP_STRING([--with-libs],\n  [build libraries (default=yes)])],\n  [build_bitcoin_libs=$withval],\n  [build_bitcoin_libs=yes])\n\nAC_ARG_WITH([daemon],\n  [AS_HELP_STRING([--with-daemon],\n  [build bitcoind daemon (default=yes)])],\n  [build_bitcoind=$withval],\n  [build_bitcoind=yes])\n\nuse_pkgconfig=yes\ncase $host in\n  *mingw*)\n\n     #pkgconfig does more harm than good with MinGW\n     use_pkgconfig=no\n\n     TARGET_OS=windows\n     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))\n     AC_CHECK_LIB([crypt32],      [main],, AC_MSG_ERROR(lib missing))\n\n     # -static is interpreted by libtool, where it has a different meaning.\n     # In libtool-speak, it's -all-static.\n     AX_CHECK_LINK_FLAG([[-static]],[LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"])\n\n     AC_PATH_PROG([MAKENSIS], [makensis], none)\n     if test x$MAKENSIS = xnone; then\n       AC_MSG_WARN(\"makensis not found. Cannot create installer.\")\n     fi\n\n     AC_PATH_TOOL(WINDRES, windres, none)\n     if test x$WINDRES = xnone; then\n       AC_MSG_ERROR(\"windres not found\")\n     fi\n\n     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n     if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n       CXXFLAGS=\"$CXXFLAGS -w\"\n     fi\n     case $host in\n       i?86-*) WINDOWS_BITS=32 ;;\n       x86_64-*) WINDOWS_BITS=64 ;;\n       *) AC_MSG_ERROR(\"Could not determine win32/win64 for installer\") ;;\n     esac\n     AC_SUBST(WINDOWS_BITS)\n\n     dnl libtool insists upon adding -nostdlib and a list of objects/libs to link against.\n     dnl That breaks our ability to build dll's with static libgcc/libstdc++/libssp. Override\n     dnl its command here, with the predeps/postdeps removed, and -static inserted. Postdeps are\n     dnl also overridden to prevent their insertion later.\n     dnl This should only affect dll's.\n     archive_cmds_CXX=\"\\$CC -shared \\$libobjs \\$deplibs \\$compiler_flags -static -o \\$output_objdir/\\$soname \\${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker \\$lib\"\n     postdeps_CXX=\n\n     ;;\n  *darwin*)\n     TARGET_OS=darwin\n     if  test x$cross_compiling != xyes; then\n       BUILD_OS=darwin\n       AC_CHECK_PROG([PORT],port, port)\n       if test x$PORT = xport; then\n         dnl add default macports paths\n         CPPFLAGS=\"$CPPFLAGS -isystem /opt/local/include\"\n         LIBS=\"$LIBS -L/opt/local/lib\"\n         if test -d /opt/local/include/db48; then\n           CPPFLAGS=\"$CPPFLAGS -I/opt/local/include/db48\"\n           LIBS=\"$LIBS -L/opt/local/lib/db48\"\n         fi\n       fi\n\n       AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg],rsvg-convert)\n       AC_CHECK_PROG([BREW],brew, brew)\n       if test x$BREW = xbrew; then\n         dnl These Homebrew packages may be keg-only, meaning that they won't be found\n         dnl in expected paths because they may conflict with system files. Ask\n         dnl Homebrew where each one is located, then adjust paths accordingly.\n         dnl It's safe to add these paths even if the functionality is disabled by\n         dnl the user (--without-wallet or --without-gui for example).\n\n         openssl_prefix=`$BREW --prefix openssl 2>/dev/null`\n         qt5_prefix=`$BREW --prefix qt5 2>/dev/null`\n         if test x$openssl_prefix != x; then\n           PKG_CONFIG_PATH=\"$openssl_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n           export PKG_CONFIG_PATH\n         fi\n\n         dnl test brew installed bdb if no BDB_CFLAGS or BDB_LIBS was given.\n         dnl currently tests, in order, for 5.x, 4.x and the default version\n         if test x$BDB_CFLAGS = x && test x$BDB_LIBS = x; then\n           for brew_bdb_version in '@5' '@4' ''; do\n             bdb_prefix=`$BREW --prefix berkeley-db${brew_bdb_version} 2>/dev/null`\n             if test x$bdb_prefix != x && test -d $bdb_prefix; then\n               BDB_CFLAGS=\"-I$bdb_prefix/include\"\n               BDB_LIBS=\"-L$bdb_prefix/lib -ldb_cxx\"\n               break\n             fi\n           done\n         fi\n\n         if test x$qt5_prefix != x; then\n           PKG_CONFIG_PATH=\"$qt5_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n           export PKG_CONFIG_PATH\n         fi\n       fi\n     else\n       case $build_os in\n         *darwin*)\n           BUILD_OS=darwin\n           ;;\n         *)\n           AC_PATH_TOOL([INSTALLNAMETOOL], [install_name_tool], install_name_tool)\n           AC_PATH_TOOL([OTOOL], [otool], otool)\n           AC_PATH_PROGS([GENISOIMAGE], [genisoimage mkisofs],genisoimage)\n           AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg],rsvg-convert)\n           AC_PATH_PROGS([IMAGEMAGICK_CONVERT], [convert],convert)\n           AC_PATH_PROGS([TIFFCP], [tiffcp],tiffcp)\n\n           dnl libtool will try to strip the static lib, which is a problem for\n           dnl cross-builds because strip attempts to call a hard-coded ld,\n           dnl which may not exist in the path. Stripping the .a is not\n           dnl necessary, so just disable it.\n           old_striplib=\n           ;;\n       esac\n     fi\n\n     AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"])\n     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0\"\n     OBJCXXFLAGS=\"$CXXFLAGS\"\n     ;;\n   *linux*)\n     TARGET_OS=linux\n     ;;\nesac\n\nif test x$use_pkgconfig = xyes; then\n  m4_ifndef([PKG_PROG_PKG_CONFIG], [AC_MSG_ERROR(PKG_PROG_PKG_CONFIG macro not found. Please install pkg-config and re-run autogen.sh.)])\n  m4_ifdef([PKG_PROG_PKG_CONFIG], [\n  PKG_PROG_PKG_CONFIG\n  if test x\"$PKG_CONFIG\" = \"x\"; then\n    AC_MSG_ERROR(pkg-config not found.)\n  fi\n  ])\nfi\n\nif test x$use_extended_rpc_tests != xno; then\n  AC_SUBST(EXTENDED_RPC_TESTS, -extended)\nfi\n\nif test x$use_lcov = xyes; then\n  if test x$LCOV = x; then\n    AC_MSG_ERROR(\"lcov testing requested but lcov not found\")\n  fi\n  if test x$GCOV = x; then\n    AC_MSG_ERROR(\"lcov testing requested but gcov not found\")\n  fi\n  if test x$PYTHON = x; then\n    AC_MSG_ERROR(\"lcov testing requested but python not found\")\n  fi\n  if test x$GENHTML = x; then\n    AC_MSG_ERROR(\"lcov testing requested but genhtml not found\")\n  fi\n  LCOV=\"$LCOV --gcov-tool=$GCOV\"\n  AX_CHECK_LINK_FLAG([[--coverage]], [LDFLAGS=\"$LDFLAGS --coverage\"],\n    [AC_MSG_ERROR(\"lcov testing requested but --coverage linker flag does not work\")])\n  AX_CHECK_COMPILE_FLAG([--coverage],[CXXFLAGS=\"$CXXFLAGS --coverage\"],\n    [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\nfi\n\ndnl Check for endianness\nAC_C_BIGENDIAN\n\ndnl Check for pthread compile/link requirements\nAX_PTHREAD\n\n# The following macro will add the necessary defines to bitcoin-config.h, but\n# they also need to be passed down to any subprojects. Pull the results out of\n# the cache and add them to CPPFLAGS.\nAC_SYS_LARGEFILE\n# detect POSIX or GNU variant of strerror_r\nAC_FUNC_STRERROR_R\n\nif test x$ac_cv_sys_file_offset_bits != x &&\n   test x$ac_cv_sys_file_offset_bits != xno &&\n   test x$ac_cv_sys_file_offset_bits != xunknown; then\n  CPPFLAGS=\"$CPPFLAGS -D_FILE_OFFSET_BITS=$ac_cv_sys_file_offset_bits\"\nfi\n\nif test x$ac_cv_sys_large_files != x &&\n   test x$ac_cv_sys_large_files != xno &&\n   test x$ac_cv_sys_large_files != xunknown; then\n  CPPFLAGS=\"$CPPFLAGS -D_LARGE_FILES=$ac_cv_sys_large_files\"\nfi\n\nAX_CHECK_LINK_FLAG([[-Wl,--large-address-aware]], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])\n\nAX_GCC_FUNC_ATTRIBUTE([visibility])\nAX_GCC_FUNC_ATTRIBUTE([dllexport])\nAX_GCC_FUNC_ATTRIBUTE([dllimport])\n\nif test x$use_glibc_compat != xno; then\n\n  #glibc absorbed clock_gettime in 2.17. librt (its previous location) is safe to link\n  #in anyway for back-compat. Since gcc-9, we need to explicitly add lrt outside the\n  #scope of \"as-needed\" packages, so we disable it, add librt, and re-enable.\n  AX_CHECK_LINK_FLAG([[-Wl,-no-as-needed -Wl,-lrt -Wl,-as-needed]],\n         [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,-no-as-needed -Wl,-lrt -Wl,-as-needed\"])\n\n  #__fdelt_chk's params and return type have changed from long unsigned int to long int.\n  # See which one is present here.\n  AC_MSG_CHECKING(__fdelt_chk type)\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef _FORTIFY_SOURCE\n                    #undef _FORTIFY_SOURCE\n                  #endif\n                  #define _FORTIFY_SOURCE 2\n                  #include <sys/select.h>\n     extern \"C\" long unsigned int __fdelt_warn(long unsigned int);]],[[]])],\n    [ fdelt_type=\"long unsigned int\"],\n    [ fdelt_type=\"long int\"])\n  AC_MSG_RESULT($fdelt_type)\n  AC_DEFINE_UNQUOTED(FDELT_TYPE, $fdelt_type,[parameter and return value type for __fdelt_chk])\n  AX_CHECK_LINK_FLAG([[-Wl,--wrap=clock_gettime]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=clock_gettime\"])\n  AX_CHECK_LINK_FLAG([[-Wl,--wrap=__divmoddi4]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=__divmoddi4\"])\n  AX_CHECK_LINK_FLAG([[-Wl,--wrap=exp]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=exp\"])\n  AX_CHECK_LINK_FLAG([[-Wl,--wrap=log]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=log\"])\n  AX_CHECK_LINK_FLAG([[-Wl,--wrap=log2f]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=log2f\"])\n  AX_CHECK_LINK_FLAG([[-Wl,--wrap=pow]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=pow\"])\n\n  dnl only wrap fcntl and fctnl64 for 32-bit linux\n  case $host in\n    i?86*linux* | arm*linux*)\n      AX_CHECK_LINK_FLAG([[-Wl,--wrap=fcntl]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=fcntl\"])\n      AX_CHECK_LINK_FLAG([[-Wl,--wrap=fcntl64]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=fcntl64\"])\n      ;;\n    esac\nelse\n  AC_SEARCH_LIBS([clock_gettime],[rt])\nfi\n\nif test x$TARGET_OS != xwindows; then\n  # All windows code is PIC, forcing it on just adds useless compile warnings\n  AX_CHECK_COMPILE_FLAG([-fPIC],[PIC_FLAGS=\"-fPIC\"])\nfi\n\nif test x$use_hardening != xno; then\n  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n  AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n\n  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[\n    AX_CHECK_PREPROC_FLAG([-U_FORTIFY_SOURCE],[\n      HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -U_FORTIFY_SOURCE\"\n    ])\n    HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"\n  ])\n\n  AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n  AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n  AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"])\n  AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"])\n  AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"])\n\n  if test x$TARGET_OS != xwindows; then\n    AX_CHECK_COMPILE_FLAG([-fPIE],[PIE_FLAGS=\"-fPIE\"])\n    AX_CHECK_LINK_FLAG([[-pie]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])\n  fi\n\n  case $host in\n    *mingw*)\n       AC_CHECK_LIB([ssp],      [main],, AC_MSG_ERROR(lib missing))\n    ;;\n  esac\nfi\n\ndnl this flag screws up non-darwin gcc even when the check fails. special-case it.\nif test x$TARGET_OS = xdarwin; then\n  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\nfi\n\nAC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n\nAC_CHECK_DECLS([strnlen])\n\n# Check for daemon(3), unrelated to --with-daemon (although used by it)\nAC_CHECK_DECLS([daemon])\n\nAC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n\t\t[#if HAVE_ENDIAN_H\n                 #include <endian.h>\n                 #elif HAVE_SYS_ENDIAN_H\n                 #include <sys/endian.h>\n                 #endif])\n\nAC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n\t\t[#if HAVE_BYTESWAP_H\n                 #include <byteswap.h>\n                 #endif])\n\nAC_CHECK_DECLS([__builtin_clz, __builtin_clzl, __builtin_clzll])\n\ndnl Check for MSG_NOSIGNAL\nAC_MSG_CHECKING(for MSG_NOSIGNAL)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],\n [[ int f = MSG_NOSIGNAL; ]])],\n [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n [ AC_MSG_RESULT(no)]\n)\n\ndnl Check for mallopt(M_ARENA_MAX) (to set glibc arenas)\nAC_MSG_CHECKING(for mallopt M_ARENA_MAX)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n [[ mallopt(M_ARENA_MAX, 1); ]])],\n [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MALLOPT_ARENA_MAX, 1,[Define this symbol if you have mallopt with M_ARENA_MAX]) ],\n [ AC_MSG_RESULT(no)]\n)\n\nAC_MSG_CHECKING([for visibility attribute])\nAC_LINK_IFELSE([AC_LANG_SOURCE([\n  int foo_def( void ) __attribute__((visibility(\"default\")));\n  int main(){}\n  ])],\n  [\n    AC_DEFINE(HAVE_VISIBILITY_ATTRIBUTE,1,[Define if the visibility attribute is supported.])\n    AC_MSG_RESULT(yes)\n  ],\n  [\n    AC_MSG_RESULT(no)\n    if test x$use_reduce_exports = xyes; then\n      AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduce-exports.])\n    fi\n  ]\n)\n\n# Check for different ways of gathering OS randomness\nAC_MSG_CHECKING(for Linux getrandom syscall)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n  #include <sys/syscall.h>\n  #include <linux/random.h>]],\n [[ syscall(SYS_getrandom, nullptr, 32, 0); ]])],\n [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYS_GETRANDOM, 1,[Define this symbol if the Linux getrandom system call is available]) ],\n [ AC_MSG_RESULT(no)]\n)\n\nAC_MSG_CHECKING(for getentropy)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]],\n [[ getentropy(nullptr, 32) ]])],\n [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_GETENTROPY, 1,[Define this symbol if the BSD getentropy system call is available]) ],\n [ AC_MSG_RESULT(no)]\n)\n\nAC_MSG_CHECKING([for getentropy via sys/random.h])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n #include <sys/random.h>]],\n [[ getentropy(nullptr, 32) ]])],\n [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_GETENTROPY_RAND, 1,[Define this symbol if the BSD getentropy system call is available with sys/random.h]) ],\n [ AC_MSG_RESULT(no)]\n)\n\nAC_MSG_CHECKING(for sysctl KERN_ARND)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n  #include <sys/sysctl.h>]],\n [[ static const int name[2] = {CTL_KERN, KERN_ARND};\n    sysctl(name, 2, nullptr, nullptr, nullptr, 0); ]])],\n [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYSCTL_ARND, 1,[Define this symbol if the BSD sysctl(KERN_ARND) is available]) ],\n [ AC_MSG_RESULT(no)]\n)\n\n# Check for reduced exports\nif test x$use_reduce_exports = xyes; then\n  AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])\nfi\n\nLEVELDB_CPPFLAGS=\nLIBLEVELDB=\nLIBMEMENV=\nAM_CONDITIONAL([EMBEDDED_LEVELDB],[true])\nAC_SUBST(LEVELDB_CPPFLAGS)\nAC_SUBST(LIBLEVELDB)\nAC_SUBST(LIBMEMENV)\n\nif test x$enable_wallet != xno; then\n    dnl Check for libdb_cxx only if wallet enabled\n    BITCOIN_FIND_BDB53\nfi\n\ndnl Check for libminiupnpc (optional)\nif test x$use_upnp != xno; then\n  AC_CHECK_HEADERS(\n    [miniupnpc/miniwget.h miniupnpc/miniupnpc.h miniupnpc/upnpcommands.h miniupnpc/upnperrors.h],\n    [AC_CHECK_LIB([miniupnpc], [main],[MINIUPNPC_LIBS=-lminiupnpc], [have_miniupnpc=no])],\n    [have_miniupnpc=no]\n  )\nfi\n\nBITCOIN_QT_INIT\n\ndnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\nBITCOIN_QT_CONFIGURE([$use_pkgconfig], [qt5])\n\nif test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononono; then\n    use_boost=no\nelse\n    use_boost=yes\nfi\n\nif test x$use_boost = xyes; then\n\ndnl Minimum required Boost version\ndefine(MINIMUM_REQUIRED_BOOST, 1.60.0)\n\ndnl Check for boost libs\nAX_BOOST_BASE([MINIMUM_REQUIRED_BOOST], AC_MSG_RESULT(ok), AC_MSG_ERROR(Need at least boost 1.60.0))\nAX_BOOST_SYSTEM\nAX_BOOST_FILESYSTEM\nAX_BOOST_PROGRAM_OPTIONS\nAX_BOOST_THREAD\nAX_BOOST_CHRONO\n\ndnl LevelDB platform checks\nAC_MSG_CHECKING(for fdatasync)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]],\n [[ fdatasync(0); ]])],\n [ AC_MSG_RESULT(yes); HAVE_FDATASYNC=1 ],\n [ AC_MSG_RESULT(no); HAVE_FDATASYNC=0 ]\n)\n\nAC_MSG_CHECKING(for F_FULLFSYNC)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <fcntl.h>]],\n [[ fcntl(0, F_FULLFSYNC, 0); ]])],\n [ AC_MSG_RESULT(yes); HAVE_FULLFSYNC=1 ],\n [ AC_MSG_RESULT(no); HAVE_FULLFSYNC=0 ]\n)\n\nAC_MSG_CHECKING(for O_CLOEXEC)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <fcntl.h>]],\n [[ open(\"\", O_CLOEXEC); ]])],\n [ AC_MSG_RESULT(yes); HAVE_O_CLOEXEC=1 ],\n [ AC_MSG_RESULT(no); HAVE_O_CLOEXEC=0 ]\n)\n\nif test x$use_reduce_exports = xyes; then\n  AC_MSG_CHECKING([for working boost reduced exports])\n  TEMP_CPPFLAGS=\"$CPPFLAGS\"\n  CPPFLAGS=\"$BOOST_CPPFLAGS $CPPFLAGS\"\n  AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[\n      @%:@include <boost/version.hpp>\n    ]], [[\n      #if BOOST_VERSION >= 104900\n      // Everything is okay\n      #else\n      #  error Boost version is too old\n      #endif\n    ]])],[\n      AC_MSG_RESULT(yes)\n    ],[\n    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduce-exports.])\n  ])\n  CPPFLAGS=\"$TEMP_CPPFLAGS\"\nfi\nfi\n\nif test x$use_reduce_exports = xyes; then\n    CXXFLAGS=\"$CXXFLAGS $RE_CXXFLAGS\"\n    AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"])\nfi\n\nif test x$use_tests = xyes; then\n\n  if test x$HEXDUMP = x; then\n    AC_MSG_ERROR(hexdump is required for tests)\n  fi\n\n\n  if test x$use_boost = xyes; then\n\n  AX_BOOST_UNIT_TEST_FRAMEWORK\n\n  dnl Determine if -DBOOST_TEST_DYN_LINK is needed\n  AC_MSG_CHECKING([for dynamic linked boost test])\n  TEMP_LIBS=\"$LIBS\"\n  LIBS=\"$LIBS $BOOST_LDFLAGS $BOOST_UNIT_TEST_FRAMEWORK_LIB\"\n  TEMP_CPPFLAGS=\"$CPPFLAGS\"\n  CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n  AC_LINK_IFELSE([AC_LANG_SOURCE([\n       #define BOOST_TEST_DYN_LINK\n       #define BOOST_TEST_MAIN\n        #include <boost/test/unit_test.hpp>\n\n       ])],\n    [AC_MSG_RESULT(yes)]\n    [TESTDEFS=\"$TESTDEFS -DBOOST_TEST_DYN_LINK\"],\n    [AC_MSG_RESULT(no)])\n  LIBS=\"$TEMP_LIBS\"\n  CPPFLAGS=\"$TEMP_CPPFLAGS\"\n\n  fi\nfi\n\nif test x$use_boost = xyes; then\n\nBOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB $BOOST_CHRONO_LIB\"\n\nfi\n\n# Configure experimental for compile-time asserts\nif test x$allow_experimental = xyes; then\n  AC_DEFINE(ALLOW_DOGECOIN_EXPERIMENTAL, 1, [Define this symbol if experimental features are allowed])\nfi\n\n# Configure Scrypt SSE2\nif test x$use_scrypt_sse2 = xyes; then\n  DOGECOIN_REQUIRE_EXPERIMENTAL\n  AC_DEFINE(USE_SSE2, 1, [Define this symbol if SSE2 works])\nfi\n\nif test x$armv8_crypto = xyes; then\n  DOGECOIN_REQUIRE_EXPERIMENTAL\n  AC_MSG_CHECKING([whether to build with armv8 crypto])\n  AC_MSG_RESULT(yes)\n  AC_DEFINE(USE_ARMV8, 1, [Define this symbol if armv8 crypto works])\n  CXXFLAGS=\"$CXXFLAGS -march=armv8-a+crypto\"\nfi\n\nif test x$armv82_crypto = xyes; then\n  DOGECOIN_REQUIRE_EXPERIMENTAL\n  AC_CHECK_DECLS([vsha512su0q_u64],\n     [AC_DEFINE(USE_ARMV82, 1, [Define this symbol if armv8.2 crypto works])\n     CXXFLAGS=\"$CXXFLAGS -march=armv8.2-a+crypto+sha3\"], AC_MSG_ERROR(sha512 missing), [#include <arm_neon.h>])\nfi\n\nif test x$use_pkgconfig = xyes; then\n  : dnl\n  m4_ifdef(\n    [PKG_CHECK_MODULES],\n    [\n      PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl  not found.)])\n      PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto  not found.)])\n      BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL(libprotobuf not found)])])\n      if test x$use_qr != xno; then\n        BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n      fi\n      if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n        PKG_CHECK_MODULES([EVENT], [libevent],, [AC_MSG_ERROR(libevent not found.)])\n        if test x$TARGET_OS != xwindows; then\n          PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads],, [AC_MSG_ERROR(libevent_pthreads not found.)])\n        fi\n      fi\n\n      if test \"x$use_zmq\" = \"xyes\"; then\n        PKG_CHECK_MODULES([ZMQ],[libzmq >= 4],\n          [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n          [AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n           AC_MSG_WARN([libzmq version 4.x or greater not found, disabling])\n           use_zmq=no])\n      else\n          AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n      fi\n    ]\n  )\nelse\n  AC_CHECK_HEADER([openssl/crypto.h],,AC_MSG_ERROR(libcrypto headers missing))\n  AC_CHECK_LIB([crypto],      [main],CRYPTO_LIBS=-lcrypto, AC_MSG_ERROR(libcrypto missing))\n\n  AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR(libssl headers missing),)\n  AC_CHECK_LIB([ssl],         [main],SSL_LIBS=-lssl, AC_MSG_ERROR(libssl missing))\n\n  if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n    AC_CHECK_HEADER([event2/event.h],, AC_MSG_ERROR(libevent headers missing),)\n    AC_CHECK_LIB([event],[main],EVENT_LIBS=-levent,AC_MSG_ERROR(libevent missing))\n    if test x$TARGET_OS != xwindows; then\n      AC_CHECK_LIB([event_pthreads],[main],EVENT_PTHREADS_LIBS=-levent_pthreads,AC_MSG_ERROR(libevent_pthreads missing))\n    fi\n  fi\n\n  if test \"x$use_zmq\" = \"xyes\"; then\n     AC_CHECK_HEADER([zmq.h],\n       [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n       [AC_MSG_WARN([zmq.h not found, disabling zmq support])\n        use_zmq=no\n        AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])])\n     AC_CHECK_LIB([zmq],[zmq_ctx_shutdown],ZMQ_LIBS=-lzmq,\n       [AC_MSG_WARN([libzmq >= 4.0 not found, disabling zmq support])\n        use_zmq=no\n        AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])])\n  else\n    AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n  fi\n\n  if test \"x$use_zmq\" = \"xyes\"; then\n    dnl Assume libzmq was built for static linking\n    case $host in\n      *mingw*)\n        ZMQ_CFLAGS=\"$ZMQ_CFLAGS -DZMQ_STATIC\"\n      ;;\n    esac\n  fi\n\n  BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n  if test x$use_qr != xno; then\n    BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])\n    BITCOIN_QT_CHECK([AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)])\n  fi\nfi\n\nif test x$intel_avx2 = xyes; then\n  DOGECOIN_REQUIRE_EXPERIMENTAL\n  case $host in\n     x86_64-*-linux*)\n    AC_CHECK_LIB([IPSec_MB],[sha1_one_block_avx2],LIBS=-lIPSec_MB, AC_MSG_ERROR(IPSec_MB missing))\n    AC_CHECK_LIB([IPSec_MB],[sha256_one_block_avx2],LIBS=-lIPSec_MB, AC_MSG_ERROR(IPSec_MB missing))\n    AC_CHECK_LIB([IPSec_MB],[sha512_one_block_avx2],LIBS=-lIPSec_MB, AC_MSG_ERROR(IPSec_MB missing))\n    AC_DEFINE(USE_AVX2, 1, [Define this symbol if intel axv2 works])\n;;\n    *mingw*)\n    AC_CHECK_LIB([IPSec_MB],[sha1_one_block_avx2],LIBS=-lIPSec_MB, AC_MSG_ERROR(IPSec_MB missing))\n    AC_CHECK_LIB([IPSec_MB],[sha256_one_block_avx2],LIBS=-lIPSec_MB, AC_MSG_ERROR(IPSec_MB missing))\n    AC_CHECK_LIB([IPSec_MB],[sha512_one_block_avx2],LIBS=-lIPSec_MB, AC_MSG_ERROR(IPSec_MB missing))\n    AC_CHECK_LIB([mingwthrd],         [main],LIBS+=\" -lmingwthrd\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([kernel32],          [main],LIBS+=\" -lkernel32\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([user32],            [main],LIBS+=\" -luser32\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([gdi32],             [main],LIBS+=\" -lgdi32\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([comdlg32],          [main],LIBS+=\" -lcomdlg32\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([winspool],          [main],LIBS+=\" -lwinspool\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([winmm],             [main],LIBS+=\" -lwinmm\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([shell32],           [main],LIBS+=\" -lshell32\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([comctl32],          [main],LIBS+=\" -lcomctl32\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([ole32],             [main],LIBS+=\" -lole32\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([oleaut32],          [main],LIBS+=\" -loleaut32\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([uuid],              [main],LIBS+=\" -luuid\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([rpcrt4],            [main],LIBS+=\" -lrpcrt4\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([advapi32],          [main],LIBS+=\" -ladvapi32\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([ws2_32],            [main],LIBS+=\" -lws2_32\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([mswsock],           [main],LIBS+=\" -lmswsock\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([shlwapi],           [main],LIBS+=\" -lshlwapi\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([iphlpapi],          [main],LIBS+=\" -liphlpapi\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([crypt32],           [main],LIBS+=\" -lcrypt32\", AC_MSG_ERROR(lib missing))\n    AC_CHECK_LIB([ssp],               [main],LIBS+=\" -lssp\", AC_MSG_ERROR(lib missing))\n\n    dnl only check for Qt5 if we're actually building Qt\n    if test x$bitcoin_enable_qt != xno; then\n      AC_CHECK_LIB([Qt5PlatformSupport],[main],LIBS+=\" -lQt5PlatformSupport\", AC_MSG_ERROR(lib missing))\n    fi\n\n    AC_DEFINE(USE_AVX2, 1, [Define this symbol if intel axv2 works])\nesac\nfi\n\nsave_CXXFLAGS=\"${CXXFLAGS}\"\nCXXFLAGS=\"${CXXFLAGS} ${CRYPTO_CFLAGS} ${SSL_CFLAGS}\"\nAC_CHECK_DECLS([EVP_MD_CTX_new],,,[AC_INCLUDES_DEFAULT\n#include <openssl/x509_vfy.h>\n])\nCXXFLAGS=\"${save_CXXFLAGS}\"\n\ndnl univalue check\n\nneed_bundled_univalue=yes\n\nif test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononono; then\n  need_bundled_univalue=no\nelse\n\nif test x$system_univalue != xno ; then\n  found_univalue=no\n  if test x$use_pkgconfig = xyes; then\n    : #NOP\n    m4_ifdef(\n      [PKG_CHECK_MODULES],\n      [\n        PKG_CHECK_MODULES([UNIVALUE],[libunivalue],[found_univalue=yes],[true])\n      ]\n    )\n  else\n    AC_CHECK_HEADER([univalue.h],[\n      AC_CHECK_LIB([univalue],  [main],[\n        UNIVALUE_LIBS=-lunivalue\n        found_univalue=yes\n      ],[true])\n    ],[true])\n  fi\n\n  if test x$found_univalue = xyes ; then\n    system_univalue=yes\n    need_bundled_univalue=no\n  elif test x$system_univalue = xyes ; then\n    AC_MSG_ERROR([univalue not found])\n  else\n    system_univalue=no\n  fi\nfi\n\nif test x$need_bundled_univalue = xyes ; then\n  UNIVALUE_CFLAGS='-I$(srcdir)/univalue/include'\n  UNIVALUE_LIBS='univalue/libunivalue.la'\nfi\n\nfi\n\nAM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$need_bundled_univalue = xyes])\nAC_SUBST(UNIVALUE_CFLAGS)\nAC_SUBST(UNIVALUE_LIBS)\n\nBITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n\nAC_MSG_CHECKING([whether to build dogecoind])\nAM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\nAC_MSG_RESULT($build_bitcoind)\n\nAC_MSG_CHECKING([whether to build utils (dogecoin-cli dogecoin-tx)])\nAM_CONDITIONAL([BUILD_BITCOIN_UTILS], [test x$build_bitcoin_utils = xyes])\nAC_MSG_RESULT($build_bitcoin_utils)\n\nAC_MSG_CHECKING([whether to build libraries])\nAM_CONDITIONAL([BUILD_BITCOIN_LIBS], [test x$build_bitcoin_libs = xyes])\nif test x$build_bitcoin_libs = xyes; then\n  AC_DEFINE(HAVE_CONSENSUS_LIB, 1, [Define this symbol if the consensus lib has been built])\n  AC_CONFIG_FILES([libbitcoinconsensus.pc:libbitcoinconsensus.pc.in])\nfi\nAC_MSG_RESULT($build_bitcoin_libs)\n\nAC_LANG_POP\n\nif test \"x$use_ccache\" != \"xno\"; then\n  AC_MSG_CHECKING(if ccache should be used)\n  if test x$CCACHE = x; then\n    if test \"x$use_ccache\" = \"xyes\"; then\n      AC_MSG_ERROR([ccache not found.]);\n    else\n      use_ccache=no\n    fi\n  else\n    use_ccache=yes\n    CC=\"$ac_cv_path_CCACHE $CC\"\n    CXX=\"$ac_cv_path_CCACHE $CXX\"\n  fi\n  AC_MSG_RESULT($use_ccache)\nfi\nif test \"x$use_ccache\" = \"xyes\"; then\n    AX_CHECK_PREPROC_FLAG([-Qunused-arguments],[CPPFLAGS=\"-Qunused-arguments $CPPFLAGS\"])\nfi\n\ndnl enable wallet\nAC_MSG_CHECKING([if wallet should be enabled])\nif test x$enable_wallet != xno; then\n  AC_MSG_RESULT(yes)\n  AC_DEFINE_UNQUOTED([ENABLE_WALLET],[1],[Define to 1 to enable wallet functions])\n\nelse\n  AC_MSG_RESULT(no)\nfi\n\ndnl enable upnp support\nAC_MSG_CHECKING([whether to build with support for UPnP])\nif test x$have_miniupnpc = xno; then\n  if test x$use_upnp = xyes; then\n     AC_MSG_ERROR(\"UPnP requested but cannot be built. use --without-miniupnpc\")\n  fi\n  AC_MSG_RESULT(no)\nelse\n  if test x$use_upnp != xno; then\n    AC_MSG_RESULT(yes)\n    AC_MSG_CHECKING([whether to build with UPnP enabled by default])\n    use_upnp=yes\n    upnp_setting=0\n    if test x$use_upnp_default != xno; then\n      use_upnp_default=yes\n      upnp_setting=1\n    fi\n    AC_MSG_RESULT($use_upnp_default)\n    AC_DEFINE_UNQUOTED([USE_UPNP],[$upnp_setting],[UPnP support not compiled if undefined, otherwise value (0 or 1) determines default state])\n    if test x$TARGET_OS = xwindows; then\n      MINIUPNPC_CPPFLAGS=\"-DSTATICLIB -DMINIUPNP_STATICLIB\"\n    fi\n  else\n    AC_MSG_RESULT(no)\n  fi\nfi\n\ndnl these are only used when qt is enabled\nBUILD_TEST_QT=\"\"\nif test x$bitcoin_enable_qt != xno; then\n  dnl enable dbus support\n  AC_MSG_CHECKING([whether to build GUI with support for D-Bus])\n  if test x$bitcoin_enable_qt_dbus != xno; then\n    AC_DEFINE([USE_DBUS],[1],[Define if dbus support should be compiled in])\n  fi\n  AC_MSG_RESULT($bitcoin_enable_qt_dbus)\n\n  dnl enable qr support\n  AC_MSG_CHECKING([whether to build GUI with support for QR codes])\n  if test x$have_qrencode = xno; then\n    if test x$use_qr = xyes; then\n     AC_MSG_ERROR(\"QR support requested but cannot be built. use --without-qrencode\")\n    fi\n    AC_MSG_RESULT(no)\n  else\n    if test x$use_qr != xno; then\n      AC_MSG_RESULT(yes)\n      AC_DEFINE([USE_QRCODE],[1],[Define if QR support should be compiled in])\n      use_qr=yes\n    else\n      AC_MSG_RESULT(no)\n    fi\n  fi\n\n  if test x$XGETTEXT = x; then\n    AC_MSG_WARN(\"xgettext is required to update qt translations\")\n  fi\n\n  AC_MSG_CHECKING([whether to build test_dogecoin-qt])\n  if test x$use_gui_tests$bitcoin_enable_qt_test = xyesyes; then\n    AC_MSG_RESULT([yes])\n    BUILD_TEST_QT=\"yes\"\n  else\n    AC_MSG_RESULT([no])\n  fi\nfi\n\nAM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n\nAC_MSG_CHECKING([whether to build test_dogecoin])\nif test x$use_tests = xyes; then\n  AC_MSG_RESULT([yes])\n  BUILD_TEST=\"yes\"\nelse\n  AC_MSG_RESULT([no])\n  BUILD_TEST=\"\"\nfi\n\nAC_MSG_CHECKING([whether to reduce exports])\nif test x$use_reduce_exports = xyes; then\n  AC_MSG_RESULT([yes])\nelse\n  AC_MSG_RESULT([no])\nfi\n\nif test x$build_bitcoin_utils$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_bench$use_tests = xnononononono; then\n  AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui --enable-bench or --enable-tests])\nfi\n\nAM_CONDITIONAL([TARGET_DARWIN], [test x$TARGET_OS = xdarwin])\nAM_CONDITIONAL([BUILD_DARWIN], [test x$BUILD_OS = xdarwin])\nAM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\nAM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\nAM_CONDITIONAL([ENABLE_TESTS],[test x$BUILD_TEST = xyes])\nAM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\nAM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])\nAM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\nAM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\nAM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\nAM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\nAM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\nAM_CONDITIONAL([WORDS_BIGENDIAN],[test x$ac_cv_c_bigendian = xyes])\nAM_CONDITIONAL([USE_SCRYPT_SSE2], [test x$use_scrypt_sse2 = xyes])\n\nAC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\nAC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])\nAC_DEFINE(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION, [Build revision])\nAC_DEFINE(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD, [Version Build])\nAC_DEFINE(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE, [Version is release])\nAC_DEFINE(COPYRIGHT_YEAR, _COPYRIGHT_YEAR, [Copyright year])\nAC_DEFINE(COPYRIGHT_HOLDERS, \"_COPYRIGHT_HOLDERS\", [Copyright holder(s) before %s replacement])\nAC_DEFINE(COPYRIGHT_HOLDERS_SUBSTITUTION, \"_COPYRIGHT_HOLDERS_SUBSTITUTION\", [Replacement for %s in copyright holders string])\ndefine(_COPYRIGHT_HOLDERS_FINAL, [patsubst(_COPYRIGHT_HOLDERS, [%s], [_COPYRIGHT_HOLDERS_SUBSTITUTION])])\nAC_DEFINE(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\", [Copyright holder(s)])\nAC_DEFINE(CURRENT_RELEASE_DATE, \"_CURRENT_RELEASE_DATE\", [Date of the current release])\nAC_DEFINE(EXPECTED_DAYS_TO_NEXT_RELEASE, _EXPECTED_DAYS_TO_NEXT_RELEASE,[Days until the next release is definitely released])\nAC_SUBST(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR)\nAC_SUBST(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR)\nAC_SUBST(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION)\nAC_SUBST(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD)\nAC_SUBST(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE)\nAC_SUBST(COPYRIGHT_YEAR, _COPYRIGHT_YEAR)\nAC_SUBST(COPYRIGHT_HOLDERS, \"_COPYRIGHT_HOLDERS\")\nAC_SUBST(COPYRIGHT_HOLDERS_SUBSTITUTION, \"_COPYRIGHT_HOLDERS_SUBSTITUTION\")\nAC_SUBST(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\")\nAC_SUBST(CURRENT_RELEASE_DATE, \"_CURRENT_RELEASE_DATE\")\nAC_SUBST(EXPECTED_DAYS_TO_NEXT_RELEASE, _EXPECTED_DAYS_TO_NEXT_RELEASE)\nAC_SUBST(BITCOIN_DAEMON_NAME)\nAC_SUBST(BITCOIN_GUI_NAME)\nAC_SUBST(BITCOIN_CLI_NAME)\nAC_SUBST(BITCOIN_TX_NAME)\n\nAC_SUBST(RELDFLAGS)\nAC_SUBST(COMPAT_LDFLAGS)\nAC_SUBST(ERROR_CXXFLAGS)\nAC_SUBST(HARDENED_CXXFLAGS)\nAC_SUBST(HARDENED_CPPFLAGS)\nAC_SUBST(HARDENED_LDFLAGS)\nAC_SUBST(PIC_FLAGS)\nAC_SUBST(PIE_FLAGS)\nAC_SUBST(LIBTOOL_APP_LDFLAGS)\nAC_SUBST(USE_UPNP)\nAC_SUBST(USE_QRCODE)\nAC_SUBST(BOOST_LIBS)\nAC_SUBST(TESTDEFS)\nAC_SUBST(MINIUPNPC_CPPFLAGS)\nAC_SUBST(MINIUPNPC_LIBS)\nAC_SUBST(CRYPTO_LIBS)\nAC_SUBST(SSL_LIBS)\nAC_SUBST(EVENT_LIBS)\nAC_SUBST(EVENT_PTHREADS_LIBS)\nAC_SUBST(ZMQ_LIBS)\nAC_SUBST(PROTOBUF_LIBS)\nAC_SUBST(QR_LIBS)\nAC_SUBST(HAVE_FDATASYNC)\nAC_SUBST(HAVE_FULLFSYNC)\nAC_SUBST(HAVE_O_CLOEXEC)\nAC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\nAC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])\nAC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\nAC_CONFIG_LINKS([qa/pull-tester/rpc-tests.py:qa/pull-tester/rpc-tests.py])\n\ndnl boost's m4 checks do something really nasty: they export these vars. As a\ndnl result, they leak into secp256k1's configure and crazy things happen.\ndnl Until this is fixed upstream and we've synced, we'll just un-export them.\nCPPFLAGS_TEMP=\"$CPPFLAGS\"\nunset CPPFLAGS\nCPPFLAGS=\"$CPPFLAGS_TEMP\"\n\nLDFLAGS_TEMP=\"$LDFLAGS\"\nunset LDFLAGS\nLDFLAGS=\"$LDFLAGS_TEMP\"\n\nLIBS_TEMP=\"$LIBS\"\nunset LIBS\nLIBS=\"$LIBS_TEMP\"\n\nPKGCONFIG_PATH_TEMP=\"$PKG_CONFIG_PATH\"\nunset PKG_CONFIG_PATH\nPKG_CONFIG_PATH=\"$PKGCONFIG_PATH_TEMP\"\n\nPKGCONFIG_LIBDIR_TEMP=\"$PKG_CONFIG_LIBDIR\"\nunset PKG_CONFIG_LIBDIR\nPKG_CONFIG_LIBDIR=\"$PKGCONFIG_LIBDIR_TEMP\"\n\nif test x$need_bundled_univalue = xyes; then\n  AC_CONFIG_SUBDIRS([src/univalue])\nfi\n\nac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --with-bignum=no --enable-module-recovery\"\nAC_CONFIG_SUBDIRS([src/secp256k1])\n\nAC_OUTPUT\n\ndnl Taken from https://wiki.debian.org/RpathIssue\ncase $host in\n   *-*-linux-gnu)\n     AC_MSG_RESULT([Fixing libtool for -rpath problems.])\n     sed < libtool > libtool-2 \\\n     's/^hardcode_libdir_flag_spec.*$'/'hardcode_libdir_flag_spec=\" -D__LIBTOOL_IS_A_FOOL__ \"/'\n     mv libtool-2 libtool\n     chmod 755 libtool\n   ;;\nesac\n\ndnl Replace the BUILDDIR path with the correct Windows path if compiling on Native Windows\ncase ${OS} in\n   *Windows*)\n     sed  's/BUILDDIR=\"\\/\\([[a-z]]\\)/BUILDDIR=\"\\1:/'  qa/pull-tester/tests_config.py > qa/pull-tester/tests_config-2.py\n     mv qa/pull-tester/tests_config-2.py qa/pull-tester/tests_config.py\n   ;;\nesac\n\necho\necho \"Options used to compile and link:\"\necho \"  with wallet   = $enable_wallet\"\necho \"  with gui / qt = $bitcoin_enable_qt\"\nif test x$bitcoin_enable_qt != xno; then\n    echo \"    qt version  = $bitcoin_qt_got_major_vers\"\n    echo \"    with qr     = $use_qr\"\nfi\necho \"  with zmq      = $use_zmq\"\necho \"  with test     = $use_tests\"\necho \"  with bench    = $use_bench\"\necho \"  with upnp     = $use_upnp\"\necho \"  debug enabled = $enable_debug\"\necho \"  werror        = $enable_werror\"\necho\necho \"  experimental  = $allow_experimental\"\nif test x$allow_experimental = xyes; then\n    echo \"    SSE2 Scrypt   = $use_scrypt_sse2\"\n    echo \"    AVX2 crypto   = $intel_avx2\"\n    echo \"    ARMv8 crypto  = $armv8_crypto\"\n    echo \"    ARMv82 crypto = $armv82_crypto\"\nfi\necho\necho \"  target os     = $TARGET_OS\"\necho \"  build os      = $BUILD_OS\"\necho\necho \"  CC            = $CC\"\necho \"  CFLAGS        = $CFLAGS\"\necho \"  CPPFLAGS      = $CPPFLAGS\"\necho \"  CXX           = $CXX\"\necho \"  CXXFLAGS      = $CXXFLAGS\"\necho \"  LDFLAGS       = $LDFLAGS\"\necho\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "depends",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "libbitcoinconsensus.pc.in",
          "type": "blob",
          "size": 0.2880859375,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: @PACKAGE_NAME@ consensus library\nDescription: Library for the Bitcoin consensus protocol.\nVersion: @PACKAGE_VERSION@\nLibs: -L${libdir} -lbitcoinconsensus\nCflags: -I${includedir}\nRequires.private: libcrypto\n"
        },
        {
          "name": "qa",
          "type": "tree",
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}