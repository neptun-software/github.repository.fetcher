{
  "metadata": {
    "timestamp": 1736566343640,
    "page": 97,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spotify/annoy",
      "stars": 13403,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.125,
          "content": "*.egg-info/\n*.egg/\n*.so\n*.o\nbuild/\ndist/\n.vscode/\n*.pdb\n\nMANIFEST\n*.py[cod]\n*.idea\n\n# testing\n*.ann\n*.tree\n*.annoy\n*.idx\n*.hdf5\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.8955078125,
          "content": "cmake_minimum_required(VERSION 3.15...3.25 FATAL_ERROR)\n\nproject(Annoy\n  DESCRIPTION \"Approximate Nearest Neighbors Oh Yeah\"\n  VERSION 1.17.1\n  LANGUAGES CXX)\n\nadd_library(Annoy INTERFACE)\nadd_library(Annoy::Annoy ALIAS Annoy)\n\nforeach (HEADER annoylib.h kissrandom.h mman.h)\n  configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/${HEADER}\" \"${CMAKE_CURRENT_BINARY_DIR}/include/annoy/${HEADER}\" COPYONLY)\nendforeach ()\n\ntarget_include_directories(Annoy INTERFACE\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>\n  $<INSTALL_INTERFACE:include>)\n\n# Install\ninclude(GNUInstallDirs)\n\ninstall(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\ninstall(TARGETS Annoy\n  EXPORT AnnoyTargets)\n\ninstall(EXPORT AnnoyTargets\n  FILE AnnoyConfig.cmake\n  NAMESPACE Annoy::\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/annoy)\n\nexport(TARGETS Annoy NAMESPACE Annoy:: FILE AnnoyConfig.cmake)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.095703125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2021 (c) Spotify and its affiliates.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.099609375,
          "content": "include README.rst LICENSE ann.png\ninclude src/annoylib.h\ninclude src/kissrandom.h\ninclude src/mman.h\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 12.1865234375,
          "content": "Annoy\n-----\n\n\n\n.. figure:: https://raw.github.com/spotify/annoy/master/ann.png\n   :alt: Annoy example\n   :align: center\n\n.. image:: https://github.com/spotify/annoy/actions/workflows/ci.yml/badge.svg\n    :target: https://github.com/spotify/annoy/actions\n\nAnnoy (`Approximate Nearest Neighbors <http://en.wikipedia.org/wiki/Nearest_neighbor_search#Approximate_nearest_neighbor>`__ Oh Yeah) is a C++ library with Python bindings to search for points in space that are close to a given query point. It also creates large read-only file-based data structures that are `mmapped <https://en.wikipedia.org/wiki/Mmap>`__ into memory so that many processes may share the same data.\n\nInstall\n-------\n\nTo install, simply do ``pip install --user annoy`` to pull down the latest version from `PyPI <https://pypi.python.org/pypi/annoy>`_.\n\nFor the C++ version, just clone the repo and ``#include \"annoylib.h\"``.\n\nBackground\n----------\n\nThere are some other libraries to do nearest neighbor search. Annoy is almost as fast as the fastest libraries, (see below), but there is actually another feature that really sets Annoy apart: it has the ability to **use static files as indexes**. In particular, this means you can **share index across processes**. Annoy also decouples creating indexes from loading them, so you can pass around indexes as files and map them into memory quickly. Another nice thing of Annoy is that it tries to minimize memory footprint so the indexes are quite small.\n\nWhy is this useful? If you want to find nearest neighbors and you have many CPU's, you only need to build the index once. You can also pass around and distribute static files to use in production environment, in Hadoop jobs, etc. Any process will be able to load (mmap) the index into memory and will be able to do lookups immediately.\n\nWe use it at `Spotify <http://www.spotify.com/>`__ for music recommendations. After running matrix factorization algorithms, every user/item can be represented as a vector in f-dimensional space. This library helps us search for similar users/items. We have many millions of tracks in a high-dimensional space, so memory usage is a prime concern.\n\nAnnoy was built by `Erik Bernhardsson <http://www.erikbern.com>`__ in a couple of afternoons during `Hack Week <http://labs.spotify.com/2013/02/15/organizing-a-hack-week/>`__.\n\nSummary of features\n-------------------\n\n* `Euclidean distance <https://en.wikipedia.org/wiki/Euclidean_distance>`__, `Manhattan distance <https://en.wikipedia.org/wiki/Taxicab_geometry>`__, `cosine distance <https://en.wikipedia.org/wiki/Cosine_similarity>`__, `Hamming distance <https://en.wikipedia.org/wiki/Hamming_distance>`__, or `Dot (Inner) Product distance <https://en.wikipedia.org/wiki/Dot_product>`__\n* Cosine distance is equivalent to Euclidean distance of normalized vectors = sqrt(2-2*cos(u, v))\n* Works better if you don't have too many dimensions (like <100) but seems to perform surprisingly well even up to 1,000 dimensions\n* Small memory usage\n* Lets you share memory between multiple processes\n* Index creation is separate from lookup (in particular you can not add more items once the tree has been created)\n* Native Python support, tested with 2.7, 3.6, and 3.7.\n* Build index on disk to enable indexing big datasets that won't fit into memory (contributed by `Rene Hollander <https://github.com/ReneHollander>`__)\n\nPython code example\n-------------------\n\n.. code-block:: python\n\n  from annoy import AnnoyIndex\n  import random\n\n  f = 40  # Length of item vector that will be indexed\n\n  t = AnnoyIndex(f, 'angular')\n  for i in range(1000):\n      v = [random.gauss(0, 1) for z in range(f)]\n      t.add_item(i, v)\n\n  t.build(10) # 10 trees\n  t.save('test.ann')\n\n  # ...\n\n  u = AnnoyIndex(f, 'angular')\n  u.load('test.ann') # super fast, will just mmap the file\n  print(u.get_nns_by_item(0, 1000)) # will find the 1000 nearest neighbors\n\nRight now it only accepts integers as identifiers for items. Note that it will allocate memory for max(id)+1 items because it assumes your items are numbered 0 … n-1. If you need other id's, you will have to keep track of a map yourself.\n\nFull Python API\n---------------\n\n* ``AnnoyIndex(f, metric)`` returns a new index that's read-write and stores vector of ``f`` dimensions. Metric can be ``\"angular\"``, ``\"euclidean\"``, ``\"manhattan\"``, ``\"hamming\"``, or ``\"dot\"``.\n* ``a.add_item(i, v)`` adds item ``i`` (any nonnegative integer) with vector ``v``. Note that it will allocate memory for ``max(i)+1`` items.\n* ``a.build(n_trees, n_jobs=-1)`` builds a forest of ``n_trees`` trees. More trees gives higher precision when querying. After calling ``build``, no more items can be added. ``n_jobs`` specifies the number of threads used to build the trees. ``n_jobs=-1`` uses all available CPU cores.\n* ``a.save(fn, prefault=False)`` saves the index to disk and loads it (see next function). After saving, no more items can be added.\n* ``a.load(fn, prefault=False)`` loads (mmaps) an index from disk. If `prefault` is set to `True`, it will pre-read the entire file into memory (using mmap with `MAP_POPULATE`). Default is `False`.\n* ``a.unload()`` unloads.\n* ``a.get_nns_by_item(i, n, search_k=-1, include_distances=False)`` returns the ``n`` closest items. During the query it will inspect up to ``search_k`` nodes which defaults to ``n_trees * n`` if not provided. ``search_k`` gives you a run-time tradeoff between better accuracy and speed. If you set ``include_distances`` to ``True``, it will return a 2 element tuple with two lists in it: the second one containing all corresponding distances.\n* ``a.get_nns_by_vector(v, n, search_k=-1, include_distances=False)`` same but query by vector ``v``.\n* ``a.get_item_vector(i)`` returns the vector for item ``i`` that was previously added.\n* ``a.get_distance(i, j)`` returns the distance between items ``i`` and ``j``. NOTE: this used to return the *squared* distance, but has been changed as of Aug 2016.\n* ``a.get_n_items()`` returns the number of items in the index.\n* ``a.get_n_trees()`` returns the number of trees in the index.\n* ``a.on_disk_build(fn)`` prepares annoy to build the index in the specified file instead of RAM (execute before adding items, no need to save after build)\n* ``a.set_seed(seed)`` will initialize the random number generator with the given seed.  Only used for building up the tree, i. e. only necessary to pass this before adding the items.  Will have no effect after calling `a.build(n_trees)` or `a.load(fn)`.\n\nNotes:\n\n* There's no bounds checking performed on the values so be careful.\n* Annoy uses Euclidean distance of normalized vectors for its angular distance, which for two vectors u,v is equal to ``sqrt(2(1-cos(u,v)))``\n\n\nThe C++ API is very similar: just ``#include \"annoylib.h\"`` to get access to it.\n\nTradeoffs\n---------\n\nThere are just two main parameters needed to tune Annoy: the number of trees ``n_trees`` and the number of nodes to inspect during searching ``search_k``.\n\n* ``n_trees`` is provided during build time and affects the build time and the index size. A larger value will give more accurate results, but larger indexes.\n* ``search_k`` is provided in runtime and affects the search performance. A larger value will give more accurate results, but will take longer time to return.\n\nIf ``search_k`` is not provided, it will default to ``n * n_trees`` where ``n`` is the number of approximate nearest neighbors. Otherwise, ``search_k`` and ``n_trees`` are roughly independent, i.e. the value of ``n_trees`` will not affect search time if ``search_k`` is held constant and vice versa. Basically it's recommended to set ``n_trees`` as large as possible given the amount of memory you can afford, and it's recommended to set ``search_k`` as large as possible given the time constraints you have for the queries.\n\nYou can also accept slower search times in favour of reduced loading times, memory usage, and disk IO. On supported platforms the index is prefaulted during ``load`` and ``save``, causing the file to be pre-emptively read from disk into memory. If you set ``prefault`` to ``False``, pages of the mmapped index are instead read from disk and cached in memory on-demand, as necessary for a search to complete. This can significantly increase early search times but may be better suited for systems with low memory compared to index size, when few queries are executed against a loaded index, and/or when large areas of the index are unlikely to be relevant to search queries.\n\n\nHow does it work\n----------------\n\nUsing `random projections <http://en.wikipedia.org/wiki/Locality-sensitive_hashing#Random_projection>`__ and by building up a tree. At every intermediate node in the tree, a random hyperplane is chosen, which divides the space into two subspaces. This hyperplane is chosen by sampling two points from the subset and taking the hyperplane equidistant from them.\n\nWe do this k times so that we get a forest of trees. k has to be tuned to your need, by looking at what tradeoff you have between precision and performance.\n\nHamming distance (contributed by `Martin Aumüller <https://github.com/maumueller>`__) packs the data into 64-bit integers under the hood and uses built-in bit count primitives so it could be quite fast. All splits are axis-aligned.\n\nDot Product distance (contributed by `Peter Sobot <https://github.com/psobot>`__ and `Pavel Korobov <https://github.com/pkorobov>`__) reduces the provided vectors from dot (or \"inner-product\") space to a more query-friendly cosine space using `a method by Bachrach et al., at Microsoft Research, published in 2014 <https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/XboxInnerProduct.pdf>`__.\n\n\n\nMore info\n---------\n\n* `Dirk Eddelbuettel <https://github.com/eddelbuettel>`__ provides an `R version of Annoy <http://dirk.eddelbuettel.com/code/rcpp.annoy.html>`__.\n* `Andy Sloane <https://github.com/a1k0n>`__ provides a `Java version of Annoy <https://github.com/spotify/annoy-java>`__ although currently limited to cosine and read-only.\n* `Pishen Tsai <https://github.com/pishen>`__ provides a `Scala wrapper of Annoy <https://github.com/pishen/annoy4s>`__ which uses JNA to call the C++ library of Annoy.\n* `Atsushi Tatsuma <https://github.com/yoshoku>`__ provides `Ruby bindings for Annoy <https://github.com/yoshoku/annoy.rb>`__.\n* There is `experimental support for Go <https://github.com/spotify/annoy/blob/master/README_GO.rst>`__ provided by `Taneli Leppä <https://github.com/rosmo>`__.\n* `Boris Nagaev <https://github.com/starius>`__ wrote `Lua bindings <https://github.com/spotify/annoy/blob/master/README_Lua.md>`__.\n* During part of Spotify Hack Week 2016 (and a bit afterward), `Jim Kang <https://github.com/jimkang>`__ wrote `Node bindings <https://github.com/jimkang/annoy-node>`__ for Annoy.\n* `Min-Seok Kim <https://github.com/mskimm>`__ built a `Scala version <https://github.com/mskimm/ann4s>`__ of Annoy.\n* `hanabi1224 <https://github.com/hanabi1224>`__ built a read-only `Rust version <https://github.com/hanabi1224/RuAnnoy>`__ of Annoy, together with **dotnet, jvm and dart** read-only bindings.\n* `Presentation from New York Machine Learning meetup <http://www.slideshare.net/erikbern/approximate-nearest-neighbor-methods-and-vector-models-nyc-ml-meetup>`__ about Annoy\n* Annoy is available as a `conda package <https://anaconda.org/conda-forge/python-annoy>`__ on Linux, OS X, and Windows.\n* `ann-benchmarks <https://github.com/erikbern/ann-benchmarks>`__ is a benchmark for several approximate nearest neighbor libraries. Annoy seems to be fairly competitive, especially at higher precisions:\n\n.. figure:: https://github.com/erikbern/ann-benchmarks/raw/master/results/glove-100-angular.png\n   :alt: ANN benchmarks\n   :align: center\n   :target: https://github.com/erikbern/ann-benchmarks\n\nSource code\n-----------\n\nIt's all written in C++ with a handful of ugly optimizations for performance and memory usage. You have been warned :)\n\nThe code should support Windows, thanks to `Qiang Kou <https://github.com/thirdwing>`__ and `Timothy Riley <https://github.com/tjrileywisc>`__.\n\nTo run the tests, execute `python setup.py nosetests`. The test suite includes a big real world dataset that is downloaded from the internet, so it will take a few minutes to execute.\n\nDiscuss\n-------\n\nFeel free to post any questions or comments to the `annoy-user <https://groups.google.com/group/annoy-user>`__ group. I'm `@fulhack <https://twitter.com/fulhack>`__ on Twitter.\n"
        },
        {
          "name": "README_GO.rst",
          "type": "blob",
          "size": 1.9833984375,
          "content": "Install\n-------\n\nTo install, you'll need Swig (tested with Swig 4.2.1 on Ubuntu 24.04), and then just::\n\n  swig -go -intgosize 64 -cgo -c++ src/annoygomodule.i\n  mkdir -p $(go env GOPATH)/src/annoy\n  cp src/annoygomodule_wrap.cxx src/annoy.go src/annoygomodule.h src/annoylib.h src/kissrandom.h test/annoy_test.go $(go env GOPATH)/src/annoy\n  cd $(go env GOPATH)/src/annoy\n  go mod init github.com/spotify/annoy\n  go mod tidy\n  go test\n\nBackground\n----------\n\nSee the main README.\n\nGo code example\n-------------------\n\n.. code-block:: go\n\n  package main\n  \n  import (\n         \"fmt\"\n         \"math/rand\"\n\n         \"github.com/spotify/annoy\"\n  )\n  \n  func main() {\n       f := 40\n       t := annoy.NewAnnoyIndexAngular(f)\n       for i := 0; i < 1000; i++ {\n       \t item := make([]float32, 0, f)\n       \t for x:= 0; x < f; x++ {\n  \t     item = append(item, rand.Float32())\n  \t }\n  \t t.AddItem(i, item)\n       }\n       t.Build(10)\n       t.Save(\"test.ann\")\n  \n       annoy.DeleteAnnoyIndexAngular(t)\n       \n       t = annoy.NewAnnoyIndexAngular(f)\n       t.Load(\"test.ann\")\n       \n       result := annoyindex.NewAnnoyVectorInt()\n       defer result.Free()\n       t.GetNnsByItem(0, 1000, -1, result)\n       fmt.Printf(\"%v\\n\", result.ToSlice())\n  \n  }\n  \nRight now it only accepts integers as identifiers for items. Note that it will allocate memory for max(id)+1 items because it assumes your items are numbered 0 … n-1. If you need other id's, you will have to keep track of a map yourself.\n\nFull Go API\n---------------\n\nSee annoygomodule.h. Generally the same as Python API except some arguments are not optional. Go binding does not support multithreaded build.\n\nTests\n-------\nA simple test is supplied in test/annoy_test.go.\n\nDiscuss\n-------\n\nMemroy leak in the previous versions has been fixed thanks to https://github.com/swig/swig/issues/2292. (memory leak fix is implemented in https://github.com/Rikanishu/annoy-go)\n\nGo glue written by Taneli Leppä (@rosmo). You can contact me via email (see https://github.com/rosmo).\n"
        },
        {
          "name": "README_Lua.md",
          "type": "blob",
          "size": 2.099609375,
          "content": "Install\n-------\n\nTo install, you'll need Lua (binary + library) and LuaRocks.\n\nIf you have Python and Pip, you can get Lua and LuaRocks\nusing [hererocks](https://github.com/mpeterv/hererocks/),\nwritten by Peter Melnichenko.\n\n```\n  pip install hererocks\n  hererocks here --lua 5.1 --luarocks 2.2\n```\n\nThis command installs Lua and LuaRocks locally to directory `here`.\nTo activate it, add `here/bin` to `PATH`:\n\n```\n  export PATH=\"$(pwd)/here/bin/:$PATH\"\n```\n\nThen you can use commands `lua`, `luarocks`,\nand tools installed by `luarocks`.\n\nTo build and install `annoy`, type:\n\n```\n  luarocks make\n```\n\nBackground\n----------\n\nSee the main README.\n\nLua code example\n----------------\n\n```lua\nlocal annoy = require \"annoy\"\n\nlocal f = 3\nlocal t = annoy.AnnoyIndex(f) -- Length of item vector that will be indexed\nfor i = 0, 999 do\n  local v = {math.random(), math.random(), math.random()}\n  t:add_item(i, v)\nend\n\nt:build(10) -- 10 trees\nt:save('test.ann')\n\n-- ...\n\nlocal u = annoy.AnnoyIndex(f)\nu:load('test.ann') -- super fast, will just mmap the file\n\n-- find the 10 nearest neighbors\nlocal neighbors = u:get_nns_by_item(0, 10)\nfor rank, i in ipairs(neighbors) do\n  print(\"neighbor\", rank, \"is\", i)\nend\n```\n\nFull Lua API\n------------\n\nLua API closely resembles Python API, see main README. Lua binding does not support multithreaded build.\n\n\nTests\n-------\n\nFile `test/annoy_test.lua` is the literal translation of\n`test/annoy_test.py` from Python+Nosetests to Lua+Busted.\n\nTo run tests, you need [Busted](http://olivinelabs.com/busted/),\nElegant Lua unit testing. To install it, type:\n\n```\n  luarocks install busted\n```\n\nTo run tests, type:\n\n```\n  busted test/annoy_test.lua\n```\n\nIt will take few minutes to execute.\n\nDiscuss\n-------\n\nThere might be some memory leaks if inputs are incorrect.\nSome functions allocate stack objects calling Lua functions throwing\nLua errors (e.g., `luaL_checkinteger`). A Lua error may omit calling\nC++ destructors when unwinding the stack. (If it does, depends on\nthe Lua implementation and platform being in use.)\n\nLua binding was written by Boris Nagaev.\nYou can contact me via email (see https://github.com/starius).\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 0.5048828125,
          "content": "How to release\n--------------\n\n1. Make sure you're on master. `git checkout master && git fetch && git reset --hard origin/master`\n1. Update `setup.py` to the newest version, `git add setup.py && git commit -m \"version 1.2.3\"`\n1. `python setup.py sdist bdist_wheel`\n1. `git tag -a v1.2.3 -m \"version 1.2.3\"`\n1. `git push --tags origin master` to push the last version to Github\n1. Go to https://github.com/spotify/annoy/releases and click \"Draft a new release\"\n1. `twine upload dist/annoy-1.2.3*`\n\nTODO\n----\n\n* Wheel\n"
        },
        {
          "name": "ann.png",
          "type": "blob",
          "size": 594.734375,
          "content": null
        },
        {
          "name": "annoy-dev-1.rockspec",
          "type": "blob",
          "size": 1.671875,
          "content": "-- Copyright (c) 2016 Boris Nagaev\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n-- use this file except in compliance with the License. You may obtain a copy of\n-- the License at\n--\n-- http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n-- License for the specific language governing permissions and limitations under\n-- the License.\n\npackage = \"annoy\"\nversion = \"dev-1\"\nsource = {\n    url = \"git://github.com/spotify/annoy.git\",\n}\ndescription = {\n    summary = \"Approximate Nearest Neighbors Oh Yeah\",\n    homepage = \"https://github.com/spotify/annoy\",\n    license = \"Apache\",\n    detailed = [[\nAnnoy (Approximate Nearest Neighbors Oh Yeah) is a C++ library with Python\nGo and Lua bindings to search for points in space that are close to a given\nquery point. It also creates large read-only file-based data structures\nthat are mmapped into memory so that many processes may share the same data.\n]],\n}\ndependencies = {\n    \"lua >= 5.1\",\n}\nbuild = {\n    type = \"builtin\",\n    modules = {\n        ['annoy'] = {\n            sources = {\n                \"src/annoyluamodule.cc\",\n            },\n        },\n    },\n    platforms = {\n        unix = {\n            modules = {\n                ['annoy'] = {\n                    libraries = {\"stdc++\"},\n                },\n            },\n        },\n        mingw32 = {\n            modules = {\n                ['annoy'] = {\n                    libraries = {\"stdc++\"},\n                },\n            },\n        },\n    },\n}\n"
        },
        {
          "name": "annoy",
          "type": "tree",
          "content": null
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.03515625,
          "content": "[nosetests]\nattr=!slow\nnocapture=1\n\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.91796875,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2013 Spotify AB\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n# use this file except in compliance with the License. You may obtain a copy of\n# the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations under\n# the License.\n\nfrom setuptools import setup, Extension\nimport codecs\nimport os\nimport platform\nimport sys\n\nreadme_note = \"\"\"\\\n.. note::\n\n   For the latest source, discussion, etc, please visit the\n   `GitHub repository <https://github.com/spotify/annoy>`_\\n\\n\n\n.. image:: https://img.shields.io/github/stars/spotify/annoy.svg\n    :target: https://github.com/spotify/annoy\n\n\"\"\"\n\nwith codecs.open('README.rst', encoding='utf-8') as fobj:\n    long_description = readme_note + fobj.read()\n\n# Various platform-dependent extras\nextra_compile_args = ['-D_CRT_SECURE_NO_WARNINGS', '-fpermissive']\nextra_link_args = []\nif platform.machine() == 'ppc64le':\n    extra_compile_args += ['-mcpu=native',]\n\nif platform.machine() == 'x86_64':\n    # do not apply march on Intel Darwin\n    if platform.system() != 'Darwin':\n        # Not all CPUs have march as a tuning parameter\n        extra_compile_args += ['-march=native',]\n\nif os.name != 'nt':\n    extra_compile_args += ['-O3', '-ffast-math', '-fno-associative-math']\n\n# Add multithreaded build flag for all platforms using Python 3 and\n# for non-Windows Python 2 platforms\npython_major_version = sys.version_info[0]\nif python_major_version == 3 or (python_major_version == 2 and os.name != 'nt'):\n    extra_compile_args += ['-DANNOYLIB_MULTITHREADED_BUILD']\n\n    if os.name != 'nt':\n        extra_compile_args += ['-std=c++14']\n\n# #349: something with OS X Mojave causes libstd not to be found\nif platform.system() == 'Darwin':\n    extra_compile_args += ['-mmacosx-version-min=10.12']\n    extra_link_args += ['-stdlib=libc++', '-mmacosx-version-min=10.12']\n\n# Manual configuration, you're on your own here.\nmanual_compiler_args = os.environ.get('ANNOY_COMPILER_ARGS', None)\nif manual_compiler_args:\n    extra_compile_args = manual_compiler_args.split(',')\nmanual_linker_args = os.environ.get('ANNOY_LINKER_ARGS', None)\nif manual_linker_args:\n    extra_link_args = manual_linker_args.split(',')\n\nsetup(name='annoy',\n      version='1.17.3',\n      description='Approximate Nearest Neighbors in C++/Python optimized for memory usage and loading/saving to disk.',\n      packages=['annoy'],\n      package_data={'annoy': ['__init__.pyi', 'py.typed']},\n      ext_modules=[\n          Extension(\n              'annoy.annoylib', ['src/annoymodule.cc'],\n              depends=['src/annoylib.h', 'src/kissrandom.h', 'src/mman.h'],\n              extra_compile_args=extra_compile_args,\n              extra_link_args=extra_link_args,\n          )\n      ],\n      long_description=long_description,\n      author='Erik Bernhardsson',\n      author_email='mail@erikbern.com',\n      url='https://github.com/spotify/annoy',\n      license='Apache License 2.0',\n      classifiers=[\n          'Development Status :: 5 - Production/Stable',\n          'Programming Language :: Python',\n          'Programming Language :: Python :: 2.6',\n          'Programming Language :: Python :: 2.7',\n          'Programming Language :: Python :: 3.3',\n          'Programming Language :: Python :: 3.4',\n          'Programming Language :: Python :: 3.5',\n          'Programming Language :: Python :: 3.6',\n          'Programming Language :: Python :: 3.7',\n          'Programming Language :: Python :: 3.8',\n          'Programming Language :: Python :: 3.9',\n      ],\n      keywords='nns, approximate nearest neighbor search',\n      setup_requires=['nose>=1.0'],\n      tests_require=['numpy', 'h5py']\n      )\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.072265625,
          "content": "[tox]\nenvlist=py{26,27,33,34,35,36,37}, go, lua\n\n[testenv]\nsetenv =\n  TRAVIS = {env:TRAVIS:}\ncommands =\n  pip install numpy h5py\n  pip install .\n  python setup.py nosetests --verbosity=3\n\n[testenv:go]\nsetenv =\n  GOPATH = {env:HOME:}/gopath\n  GOROOT = /usr/local/go\nwhitelist_externals=*\ncommands =\n  mkdir -p {env:GOPATH:}/src/annoyindex\n  wget https://storage.googleapis.com/golang/go1.5.linux-amd64.tar.gz\n  sudo tar -C /usr/local -xzf go1.5.linux-amd64.tar.gz\n  sudo add-apt-repository -y ppa:timsc/swig-3.0.12\n  sudo apt-get update -qq\n  sudo apt-get install -y swig3.0\n  swig3.0 -go -intgosize 64 -cgo -c++ src/annoygomodule.i\n  cp src/annoygomodule_wrap.cxx src/annoyindex.go src/annoygomodule.h src/annoylib.h src/kissrandom.h {env:GOPATH:}/src/annoyindex\n  {env:GOROOT}/bin/go build annoyindex\n\n[testenv:lua]\nsetenv =\n  HOME = {env:HOME}\nwhitelist_externals=*\ncommands =\n  pip install hererocks\n  hererocks {toxworkdir}/here --{env:LUA:} --luarocks 2.2\n  {toxworkdir}/here/bin/luarocks make\n  {toxworkdir}/here/bin/luarocks install busted\n  {toxworkdir}/here/bin/busted test/annoy_test.lua\n"
        }
      ]
    }
  ]
}