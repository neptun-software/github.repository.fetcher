{
  "metadata": {
    "timestamp": 1736566335250,
    "page": 87,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "doitsujin/dxvk",
      "stars": 13779,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.498046875,
          "content": "[submodule \"include/native/directx\"]\n\tpath = include/native/directx\n\turl = https://github.com/Joshua-Ashton/mingw-directx-headers\n[submodule \"include/vulkan\"]\n\tpath = include/vulkan\n\turl = https://github.com/KhronosGroup/Vulkan-Headers\n[submodule \"include/spirv\"]\n\tpath = include/spirv\n\turl = https://github.com/KhronosGroup/SPIRV-Headers.git\n[submodule \"subprojects/libdisplay-info\"]\n\tpath = subprojects/libdisplay-info\n\turl = https://gitlab.freedesktop.org/JoshuaAshton/libdisplay-info.git\n\tbranch = windows\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "                  Copyright (c) 2017 Philip Rebohle\n                  Copyright (c) 2019 Joshua Ashton\n                  Copyright (c) 2019 Robin Kertels\n                  Copyright (c) 2023 Jeffrey Ellison\n\n                          zlib/libpng license\n\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n– The origin of this software must not be misrepresented; you must not\n  claim that you wrote the original software. If you use this software\n  in a product, an acknowledgment in the product documentation would be\n  appreciated but is not required.\n\n– Altered source versions must be plainly marked as such, and must not\n  be misrepresented as being the original software.\n\n– This notice may not be removed or altered from any source distribution.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.208984375,
          "content": "# DXVK\n\nA Vulkan-based translation layer for Direct3D 8/9/10/11 which allows running 3D applications on Linux using Wine.\n\nFor the current status of the project, please refer to the [project wiki](https://github.com/doitsujin/dxvk/wiki).\n\nThe most recent development builds can be found [here](https://github.com/doitsujin/dxvk/actions/workflows/artifacts.yml?query=branch%3Amaster).\n\nRelease builds can be found [here](https://github.com/doitsujin/dxvk/releases).\n\n## How to use\nIn order to install a DXVK package obtained from the [release](https://github.com/doitsujin/dxvk/releases) page into a given wine prefix, copy or symlink the DLLs into the following directories as follows, then open `winecfg` and manually add `native` DLL overrides for `d3d8`, `d3d9`, `d3d10core`, `d3d11` and `dxgi` under the Libraries tab.\n\nIn a default Wine prefix that would be as follows:\n```\nexport WINEPREFIX=/path/to/wineprefix\ncp x64/*.dll $WINEPREFIX/drive_c/windows/system32\ncp x32/*.dll $WINEPREFIX/drive_c/windows/syswow64\nwinecfg\n```\n\nFor a pure 32-bit Wine prefix (non default) the 32-bit DLLs instead go to the `system32` directory:\n```\nexport WINEPREFIX=/path/to/wineprefix\ncp x32/*.dll $WINEPREFIX/drive_c/windows/system32\nwinecfg\n```\n\nVerify that your application uses DXVK instead of wined3d by enabling the HUD (see notes below).\n\nIn order to remove DXVK from a prefix, remove the DLLs and DLL overrides, and run `wineboot -u` to restore the original DLL files.\n\nTools such as Steam Play, Lutris, Bottles, Heroic Launcher, etc will automatically handle setup of dxvk on their own when enabled.\n\n#### DLL dependencies \nListed below are the DLL requirements for using DXVK with any single API.\n\n- d3d8: `d3d8.dll` and `d3d9.dll`\n- d3d9: `d3d9.dll`\n- d3d10: `d3d10core.dll`, `d3d11.dll` and `dxgi.dll`\n- d3d11: `d3d11.dll` and `dxgi.dll`\n\n### Notes on Vulkan drivers\nBefore reporting an issue, please check the [Wiki](https://github.com/doitsujin/dxvk/wiki/Driver-support) page on the current driver status and make sure you run a recent enough driver version for your hardware.\n\n### Online multi-player games\nManipulation of Direct3D libraries in multi-player games may be considered cheating and can get your account **banned**. This may also apply to single-player games with an embedded or dedicated multiplayer portion. **Use at your own risk.**\n\n### HUD\nThe `DXVK_HUD` environment variable controls a HUD which can display the framerate and some stat counters. It accepts a comma-separated list of the following options:\n- `devinfo`: Displays the name of the GPU and the driver version.\n- `fps`: Shows the current frame rate.\n- `frametimes`: Shows a frame time graph.\n- `submissions`: Shows the number of command buffers submitted per frame.\n- `drawcalls`: Shows the number of draw calls and render passes per frame.\n- `pipelines`: Shows the total number of graphics and compute pipelines.\n- `descriptors`: Shows the number of descriptor pools and descriptor sets.\n- `memory`: Shows the amount of device memory allocated and used.\n- `allocations`: Shows detailed memory chunk suballocation info.\n- `gpuload`: Shows estimated GPU load. May be inaccurate.\n- `version`: Shows DXVK version.\n- `api`: Shows the D3D feature level used by the application.\n- `cs`: Shows worker thread statistics.\n- `compiler`: Shows shader compiler activity\n- `samplers`: Shows the current number of sampler pairs used *[D3D9 Only]*\n- `ffshaders`: Shows the current number of shaders generated from fixed function state *[D3D9 Only]*\n- `swvp`: Shows whether or not the device is running in software vertex processing mode *[D3D9 Only]*\n- `scale=x`: Scales the HUD by a factor of `x` (e.g. `1.5`)\n- `opacity=y`: Adjusts the HUD opacity by a factor of `y` (e.g. `0.5`, `1.0` being fully opaque).\n\nAdditionally, `DXVK_HUD=1` has the same effect as `DXVK_HUD=devinfo,fps`, and `DXVK_HUD=full` enables all available HUD elements.\n\n### Logs\nWhen used with Wine, DXVK will print log messages to `stderr`. Additionally, standalone log files can optionally be generated by setting the `DXVK_LOG_PATH` variable, where log files in the given directory will be called `app_d3d11.log`, `app_dxgi.log` etc., where `app` is the name of the game executable.\n\nOn Windows, log files will be created in the game's working directory by default, which is usually next to the game executable.\n\n### Frame rate limit\nThe `DXVK_FRAME_RATE` environment variable can be used to limit the frame rate. A value of `0` uncaps the frame rate, while any positive value will limit rendering to the given number of frames per second. Alternatively, the configuration file can be used.\n\n### Device filter\nSome applications do not provide a method to select a different GPU. In that case, DXVK can be forced to use a given device:\n- `DXVK_FILTER_DEVICE_NAME=\"Device Name\"` Selects devices with a matching Vulkan device name, which can be retrieved with tools such as `vulkaninfo`. Matches on substrings, so \"VEGA\" or \"AMD RADV VEGA10\" is supported if the full device name is \"AMD RADV VEGA10 (LLVM 9.0.0)\", for example. If the substring matches more than one device, the first device matched will be used.\n\n**Note:** If the device filter is configured incorrectly, it may filter out all devices and applications will be unable to create a D3D device.\n\n### Debugging\nThe following environment variables can be used for **debugging** purposes.\n- `VK_INSTANCE_LAYERS=VK_LAYER_KHRONOS_validation` Enables Vulkan debug layers. Highly recommended for troubleshooting rendering issues and driver crashes. Requires the Vulkan SDK to be installed on the host system.\n- `DXVK_LOG_LEVEL=none|error|warn|info|debug` Controls message logging.\n- `DXVK_LOG_PATH=/some/directory` Changes path where log files are stored. Set to `none` to disable log file creation entirely, without disabling logging.\n- `DXVK_DEBUG=markers|validation` Enables use of the `VK_EXT_debug_utils` extension for translating performance event markers, or to enable Vulkan validation, respecticely.\n- `DXVK_CONFIG_FILE=/xxx/dxvk.conf` Sets path to the configuration file.\n- `DXVK_CONFIG=\"dxgi.hideAmdGpu = True; dxgi.syncInterval = 0\"` Can be used to set config variables through the environment instead of a configuration file using the same syntax. `;` is used as a seperator.\n\n### Graphics Pipeline Library\nOn drivers which support `VK_EXT_graphics_pipeline_library` Vulkan shaders will be compiled at the time the game loads its D3D shaders, rather than at draw time. This reduces or eliminates shader compile stutter in many games when compared to the previous system.\n\nIn games that load their shaders during loading screens or in the menu, this can lead to prolonged periods of very high CPU utilization, especially on weaker CPUs. For affected games it is recommended to wait for shader compilation to finish before starting the game to avoid stutter and low performance. Shader compiler activity can be monitored with `DXVK_HUD=compiler`.\n\nThis feature largely replaces the state cache.\n\n**Note:** Games which only load their D3D shaders at draw time (e.g. most Unreal Engine games) will still exhibit some stutter, although it should still be less severe than without this feature.\n\n### State cache\nDXVK caches pipeline state by default, so that shaders can be recompiled ahead of time on subsequent runs of an application, even if the driver's own shader cache got invalidated in the meantime. This cache is enabled by default, and generally reduces stuttering.\n\nThe following environment variables can be used to control the cache:\n- `DXVK_STATE_CACHE`: Controls the state cache. The following values are supported:\n  - `disable`: Disables the cache entirely.\n  - `reset`: Clears the cache file.\n- `DXVK_STATE_CACHE_PATH=/some/directory` Specifies a directory where to put the cache files. Defaults to the current working directory of the application.\n\nThis feature is mostly only relevant on systems without support for `VK_EXT_graphics_pipeline_library`\n\n## Build instructions\n\nIn order to pull in all submodules that are needed for building, clone the repository using the following command:\n```\ngit clone --recursive https://github.com/doitsujin/dxvk.git\n```\n\n### Requirements:\n- [wine 7.1](https://www.winehq.org/) or newer\n- [Meson](https://mesonbuild.com/) build system (at least version 0.58)\n- [Mingw-w64](https://www.mingw-w64.org) compiler and headers (at least version 10.0)\n- [glslang](https://github.com/KhronosGroup/glslang) compiler\n\n### Building DLLs\n\n#### The simple way\nInside the DXVK directory, run:\n```\n./package-release.sh master /your/target/directory --no-package\n```\n\nThis will create a folder `dxvk-master` in `/your/target/directory`, which contains both 32-bit and 64-bit versions of DXVK, which can be set up in the same way as the release versions as noted above.\n\nIn order to preserve the build directories for development, pass `--dev-build` to the script. This option implies `--no-package`. After making changes to the source code, you can then do the following to rebuild DXVK:\n```\n# change to build.32 for 32-bit\ncd /your/target/directory/build.64\nninja install\n```\n\n#### Compiling manually\n```\n# 64-bit build. For 32-bit builds, replace\n# build-win64.txt with build-win32.txt\nmeson setup --cross-file build-win64.txt --buildtype release --prefix /your/dxvk/directory build.w64\ncd build.w64\nninja install\n```\n\nThe D3D8, D3D9, D3D10, D3D11 and DXGI DLLs will be located in `/your/dxvk/directory/bin`.\n\n### Build troubleshooting\nDXVK requires threading support from your mingw-w64 build environment. If you\nare missing this, you may see \"error: ‘std::cv_status’ has not been declared\"\nor similar threading related errors.\n\nOn Debian and Ubuntu, this can be resolved by using the posix alternate, which\nsupports threading. For example, choose the posix alternate from these\ncommands:\n```\nupdate-alternatives --config x86_64-w64-mingw32-gcc\nupdate-alternatives --config x86_64-w64-mingw32-g++\nupdate-alternatives --config i686-w64-mingw32-gcc\nupdate-alternatives --config i686-w64-mingw32-g++\n```\nFor non debian based distros, make sure that your mingw-w64-gcc cross compiler \ndoes have `--enable-threads=posix` enabled during configure. If your distro does\nship its mingw-w64-gcc binary with `--enable-threads=win32` you might have to\nrecompile locally or open a bug at your distro's bugtracker to ask for it. \n\n# DXVK Native\n\nDXVK Native is a version of DXVK which allows it to be used natively without Wine.\n\nThis is primarily useful for game and application ports to either avoid having to write another rendering backend, or to help with port bringup during development.\n\n[Release builds](https://github.com/doitsujin/dxvk/releases) are built using the Steam Runtime.\n\n### How does it work?\n\nDXVK Native replaces certain Windows-isms with a platform and framework-agnostic replacement, for example, `HWND`s can become `SDL_Window*`s, etc.\nAll it takes to do that is to add another WSI backend.\n\n**Note:** DXVK Native requires a backend to be explicitly set via the `DXVK_WSI_DRIVER` environment variable. The current built-in options are `SDL3`, `SDL2`, and `GLFW`.\n\nDXVK Native comes with a slim set of Windows header definitions required for D3D9/11 and the MinGW headers for D3D9/11.\nIn most cases, it will end up being plug and play with your renderer, but there may be certain teething issues such as:\n- `__uuidof(type)` is supported, but `__uuidof(variable)` is not supported. Use `__uuidof_var(variable)` instead.\n"
        },
        {
          "name": "RELEASE",
          "type": "blob",
          "size": 0.005859375,
          "content": "2.5.2\n"
        },
        {
          "name": "VP_DXVK_requirements.json",
          "type": "blob",
          "size": 15.2412109375,
          "content": "{\n    \"$schema\": \"https://schema.khronos.org/vulkan/profiles-0.8.1-224.json#\",\n    \"capabilities\": {\n        \"vulkan10requirements\": {\n            \"features\": {\n                \"VkPhysicalDeviceFeatures\": {\n                    \"robustBufferAccess\": true\n                }\n            }\n        },\n        \"vulkan11requirements\": {\n            \"features\": {\n                \"VkPhysicalDeviceVulkan11Features\": {\n                    \"multiview\": true\n                }\n            },\n            \"properties\": {\n                \"VkPhysicalDeviceVulkan11Properties\": {\n                    \"maxMultiviewViewCount\": 6,\n                    \"maxMultiviewInstanceIndex\": 134217727\n                }\n            }\n        },\n        \"vulkan12requirements\": {\n            \"features\": {\n                \"VkPhysicalDeviceVulkan12Features\": {\n                    \"uniformBufferStandardLayout\": true,\n                    \"subgroupBroadcastDynamicId\": true,\n                    \"imagelessFramebuffer\": true,\n                    \"separateDepthStencilLayouts\": true,\n                    \"hostQueryReset\": true,\n                    \"timelineSemaphore\": true,\n                    \"shaderSubgroupExtendedTypes\": true\n                }\n            },\n            \"properties\": {\n                \"VkPhysicalDeviceVulkan12Properties\": {\n                    \"maxTimelineSemaphoreValueDifference\": 2147483647\n                }\n            }\n        },\n        \"vulkan13requirements\": {\n            \"features\": {\n                \"VkPhysicalDeviceVulkan12Features\": {\n                    \"vulkanMemoryModel\": true,\n                    \"vulkanMemoryModelDeviceScope\": true,\n                    \"bufferDeviceAddress\": true\n                },\n                \"VkPhysicalDeviceVulkan13Features\": {\n                    \"robustImageAccess\": true,\n                    \"shaderTerminateInvocation\": true,\n                    \"shaderZeroInitializeWorkgroupMemory\": true,\n                    \"synchronization2\": true,\n                    \"shaderIntegerDotProduct\": true,\n                    \"maintenance4\": true,\n                    \"pipelineCreationCacheControl\": true,\n                    \"subgroupSizeControl\": true,\n                    \"computeFullSubgroups\": true,\n                    \"shaderDemoteToHelperInvocation\": true,\n                    \"inlineUniformBlock\": true,\n                    \"dynamicRendering\": true\n                }\n            },\n            \"properties\": {\n                \"VkPhysicalDeviceVulkan13Properties\": {\n                    \"maxBufferSize\": 1073741824,\n                    \"maxInlineUniformBlockSize\": 256,\n                    \"maxPerStageDescriptorInlineUniformBlocks\": 4,\n                    \"maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks\": 4,\n                    \"maxDescriptorSetInlineUniformBlocks\": 4,\n                    \"maxDescriptorSetUpdateAfterBindInlineUniformBlocks\": 4,\n                    \"maxInlineUniformTotalSize\": 4\n                }\n            }\n        },\n        \"d3d9_baseline\": {\n            \"extensions\": {\n                \"VK_EXT_robustness2\": 1\n            },\n            \"features\": {\n                \"VkPhysicalDeviceFeatures\": {\n                    \"geometryShader\": true,\n                    \"imageCubeArray\": true,\n                    \"depthClamp\": true,\n                    \"depthBiasClamp\": true,\n                    \"fillModeNonSolid\": true,\n                    \"sampleRateShading\": true,\n                    \"shaderClipDistance\": true,\n                    \"shaderCullDistance\": true,\n                    \"textureCompressionBC\": true,\n                    \"occlusionQueryPrecise\": true,\n                    \"independentBlend\": true,\n                    \"fullDrawIndexUint32\": true,\n\n                    \"shaderImageGatherExtended\": true\n                },\n                \"VkPhysicalDeviceVulkan12Features\": {\n                    \"samplerMirrorClampToEdge\": true\n                },\n                \"VkPhysicalDeviceRobustness2FeaturesEXT\": {\n                    \"nullDescriptor\": true,\n                    \"robustBufferAccess2\": true\n                }\n            }\n        },\n        \"d3d9_optional\": {\n            \"extensions\": {\n                \"VK_EXT_memory_priority\": 1,\n                \"VK_EXT_vertex_attribute_divisor\": 1,\n                \"VK_EXT_depth_clip_enable\": 1,\n                \"VK_EXT_custom_border_color\": 1,\n                \"VK_EXT_attachment_feedback_loop_layout\": 1,\n                \"VK_EXT_non_seamless_cube_map\": 1\n            },\n            \"features\": {\n                \"VkPhysicalDeviceFeatures\": {\n                    \"depthBounds\": true,\n                    \"vertexPipelineStoresAndAtomics\": true,\n                    \"pipelineStatisticsQuery\": true,\n                    \"samplerAnisotropy\": true\n                },\n                \"VkPhysicalDeviceMemoryPriorityFeaturesEXT\": {\n                    \"memoryPriority\": true\n                },\n                \"VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT\": {\n                    \"vertexAttributeInstanceRateDivisor\": true,\n                    \"vertexAttributeInstanceRateZeroDivisor\": true\n                },\n                \"VkPhysicalDeviceDepthClipEnableFeaturesEXT\": {\n                    \"depthClipEnable\": true\n                },\n                \"VkPhysicalDeviceCustomBorderColorFeaturesEXT\": {\n                    \"customBorderColors\": true,\n                    \"customBorderColorWithoutFormat\": true\n                },\n                \"VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT\": {\n                    \"attachmentFeedbackLoopLayout\": true\n                },\n                \"VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT\": {\n                    \"nonSeamlessCubeMap\": true\n                }\n            }\n        },\n        \"d3d11_baseline\": {\n            \"extensions\": {\n                \"VK_EXT_robustness2\": 1,\n                \"VK_EXT_transform_feedback\": 1\n            },\n            \"features\": {\n                \"VkPhysicalDeviceFeatures\": {\n                    \"depthBiasClamp\": true,\n                    \"depthClamp\": true,\n                    \"dualSrcBlend\": true,\n                    \"fillModeNonSolid\": true,\n                    \"fullDrawIndexUint32\": true,\n                    \"geometryShader\": true,\n                    \"imageCubeArray\": true,\n                    \"independentBlend\": true,\n                    \"multiViewport\": true,\n                    \"occlusionQueryPrecise\": true,\n                    \"sampleRateShading\": true,\n                    \"shaderClipDistance\": true,\n                    \"shaderCullDistance\": true,\n                    \"shaderImageGatherExtended\": true,\n                    \"textureCompressionBC\": true\n                },\n                \"VkPhysicalDeviceVulkan11Features\": {\n                    \"shaderDrawParameters\": true\n                },\n                \"VkPhysicalDeviceVulkan12Features\": {\n                    \"samplerMirrorClampToEdge\": true\n                },\n                \"VkPhysicalDeviceRobustness2FeaturesEXT\": {\n                    \"nullDescriptor\": true,\n                    \"robustBufferAccess2\": true\n                },\n                \"VkPhysicalDeviceTransformFeedbackFeaturesEXT\": {\n                    \"transformFeedback\": true,\n                    \"geometryStreams\": true\n                }\n            }\n        },\n        \"d3d11_baseline_optional\":{\n            \"extensions\": {\n                \"VK_EXT_memory_priority\": 1,\n                \"VK_EXT_vertex_attribute_divisor\": 1,\n                \"VK_EXT_custom_border_color\": 1,\n                \"VK_EXT_depth_clip_enable\": 1,\n                \"VK_EXT_swapchain_colorspace\": 1,\n                \"VK_EXT_hdr_metadata\": 1\n            },\n            \"features\": {\n                \"VkPhysicalDeviceFeatures\": {\n                    \"depthBounds\": true,\n                    \"pipelineStatisticsQuery\": true,\n                    \"logicOp\": true,\n                    \"samplerAnisotropy\": true\n                },\n                \"VkPhysicalDeviceMemoryPriorityFeaturesEXT\": {\n                    \"memoryPriority\": true\n                },\n                \"VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT\": {\n                    \"vertexAttributeInstanceRateDivisor\": true,\n                    \"vertexAttributeInstanceRateZeroDivisor\": true\n                },\n                \"VkPhysicalDeviceCustomBorderColorFeaturesEXT\": {\n                    \"customBorderColors\": true,\n                    \"customBorderColorWithoutFormat\": true\n                },\n                \"VkPhysicalDeviceDepthClipEnableFeaturesEXT\": {\n                    \"depthClipEnable\": true\n                }\n            }\n        },\n        \"d3d11_level11_0\": {\n            \"features\": {\n                \"VkPhysicalDeviceFeatures\": {\n                    \"drawIndirectFirstInstance\": true,\n                    \"fragmentStoresAndAtomics\": true,\n                    \"multiDrawIndirect\": true,\n                    \"tessellationShader\": true\n                }\n            }\n        },\n        \"d3d11_level11_0_optional\": {\n            \"features\": {\n                \"VkPhysicalDeviceFeatures\": {\n                    \"shaderFloat64\": true,\n                    \"shaderInt64\": true\n                }\n            }\n        },\n        \"d3d11_level11_1\": {\n            \"features\": {\n                \"VkPhysicalDeviceFeatures\": {\n                    \"logicOp\": true,\n                    \"vertexPipelineStoresAndAtomics\": true\n                }\n            }\n        },\n        \"d3d11_level12_0\": {\n            \"features\": {\n                \"VkPhysicalDeviceFeatures\": {\n                    \"shaderResourceResidency\": true,\n                    \"shaderResourceMinLod\": true,\n                    \"sparseBinding\": true,\n                    \"sparseResidencyBuffer\": true,\n                    \"sparseResidencyAliased\": true,\n                    \"sparseResidencyImage2D\": true\n                },\n                \"VkPhysicalDeviceVulkan12Features\": {\n                    \"samplerFilterMinmax\": true\n                }\n            },\n            \"properties\": {\n                \"VkPhysicalDeviceProperties\": {\n                    \"sparseProperties\": {\n                        \"residencyStandard2DBlockShape\": true,\n                        \"residencyAlignedMipSize\": false,\n                        \"residencyNonResidentStrict\": true\n                    }\n                }\n            }\n        }\n    },\n    \"profiles\": {\n        \"VP_DXVK_d3d9_baseline\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"DXVK D3D9 Baseline profile\",\n            \"description\": \"DXVK for D3D9 minimum requirements\",\n            \"capabilities\": [\n                \"vulkan10requirements\",\n                \"vulkan11requirements\",\n                \"vulkan12requirements\",\n                \"vulkan13requirements\",\n                \"d3d9_baseline\"\n            ]\n        },\n        \"VP_DXVK_d3d9_optimal\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.224\",\n            \"label\": \"DXVK D3D9 Optimal profile\",\n            \"description\": \"DXVK for D3D9 including optional capabilities\",\n            \"capabilities\": [\n                \"vulkan10requirements\",\n                \"vulkan11requirements\",\n                \"vulkan12requirements\",\n                \"vulkan13requirements\",\n                \"d3d9_baseline\",\n                \"d3d9_optional\"\n            ]\n        },\n        \"VP_DXVK_d3d10_level_10_1_baseline\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"DXVK D3D10 Level 10.1 Baseline profile\",\n            \"description\": \"DXVK for D3D10 Feature Level 10.1 minimum requirements\",\n            \"capabilities\": [\n                \"vulkan10requirements\",\n                \"vulkan11requirements\",\n                \"vulkan12requirements\",\n                \"vulkan13requirements\",\n                \"d3d11_baseline\"\n            ]\n        },\n        \"VP_DXVK_d3d11_level_11_0_baseline\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"DXVK D3D11 Level 11.0 Baseline profile\",\n            \"description\": \"DXVK for D3D11 Feature Level 11.0 minimum requirements\",\n            \"capabilities\": [\n                \"vulkan10requirements\",\n                \"vulkan11requirements\",\n                \"vulkan12requirements\",\n                \"vulkan13requirements\",\n                \"d3d11_baseline\",\n                \"d3d11_level11_0\"\n            ]\n        },\n        \"VP_DXVK_d3d11_level_11_1_baseline\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"DXVK D3D11 Level 11.1 Baseline profile\",\n            \"description\": \"DXVK for D3D11 Feature Level 11.1 minimum requirements\",\n            \"capabilities\": [\n                \"vulkan10requirements\",\n                \"vulkan11requirements\",\n                \"vulkan12requirements\",\n                \"vulkan13requirements\",\n                \"d3d11_baseline\",\n                \"d3d11_level11_0\",\n                \"d3d11_level11_1\"\n            ]\n        },\n        \"VP_DXVK_d3d11_level_11_1_optimal\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"DXVK D3D11 Level 11.1 Optimal profile\",\n            \"description\": \"DXVK for D3D11 Feature Level 11.1 including optional capabilities\",\n            \"capabilities\": [\n                \"vulkan10requirements\",\n                \"vulkan11requirements\",\n                \"vulkan12requirements\",\n                \"vulkan13requirements\",\n                \"d3d11_baseline\",\n                \"d3d11_baseline_optional\",\n                \"d3d11_level11_0\",\n                \"d3d11_level11_0_optional\",\n                \"d3d11_level11_1\"\n            ]\n        },\n        \"VP_DXVK_d3d11_level_12_0_optimal\": {\n            \"version\": 1,\n            \"api-version\": \"1.3.204\",\n            \"label\": \"DXVK D3D11 Level 12.0 Optimal profile\",\n            \"description\": \"DXVK for D3D11 Feature Level 12.0 including optional capabilities\",\n            \"capabilities\": [\n                \"vulkan10requirements\",\n                \"vulkan11requirements\",\n                \"vulkan12requirements\",\n                \"vulkan13requirements\",\n                \"d3d11_baseline\",\n                \"d3d11_baseline_optional\",\n                \"d3d11_level11_0\",\n                \"d3d11_level11_0_optional\",\n                \"d3d11_level11_1\",\n                \"d3d11_level12_0\"\n            ]\n        }\n    },\n    \"contributors\": {\n        \"Philip Rebohle\": {\n            \"company\": \"Valve\"\n        },\n        \"Joshua Ashton\": {\n            \"company\": \"Valve\"\n        },\n        \"Pierre-Loup A. Griffais\": {\n            \"company\": \"Valve\"\n        },\n        \"Georg Lehmann\": {\n            \"company\": \"DXVK\"\n        },\n        \"Christophe Riccio\": {\n            \"company\": \"LunarG\"\n        }\n    },\n    \"history\": [\n        {\n            \"revision\": 4,\n            \"date\": \"2022-12-18\",\n            \"author\": \"Joshua Ashton\",\n            \"comment\": \"Add VK_EXT_swapchain_colorspace and VK_EXT_hdr_metadata to d3d11_baseline_optional\"\n        },\n        {\n            \"revision\": 3,\n            \"date\": \"2022-10-13\",\n            \"author\": \"Christophe Riccio\",\n            \"comment\": \"Factorize history and contributors sections using schema 0.8.1\"\n        },\n        {\n            \"revision\": 2,\n            \"date\": \"2022-08-30\",\n            \"author\": \"Philip Rebohle\",\n            \"comment\": \"Add VP_DXVK_d3d11_level_12_0_optimal profile\"\n        },\n        {\n            \"revision\": 1,\n            \"date\": \"2022-08-22\",\n            \"author\": \"Christophe Riccio\",\n            \"comment\": \"Initial revision\"\n        }\n    ]\n}\n"
        },
        {
          "name": "build-win32.txt",
          "type": "blob",
          "size": 0.2802734375,
          "content": "[binaries]\nc = 'i686-w64-mingw32-gcc'\ncpp = 'i686-w64-mingw32-g++'\nar = 'i686-w64-mingw32-ar'\nstrip = 'i686-w64-mingw32-strip'\nwindres = 'i686-w64-mingw32-windres'\n\n[properties]\nneeds_exe_wrapper = true\n\n[host_machine]\nsystem = 'windows'\ncpu_family = 'x86'\ncpu = 'x86'\nendian = 'little'\n"
        },
        {
          "name": "build-win64.txt",
          "type": "blob",
          "size": 0.2958984375,
          "content": "[binaries]\nc = 'x86_64-w64-mingw32-gcc'\ncpp = 'x86_64-w64-mingw32-g++'\nar = 'x86_64-w64-mingw32-ar'\nstrip = 'x86_64-w64-mingw32-strip'\nwindres = 'x86_64-w64-mingw32-windres'\n\n[properties]\nneeds_exe_wrapper = true\n\n[host_machine]\nsystem = 'windows'\ncpu_family = 'x86_64'\ncpu = 'x86_64'\nendian = 'little'\n"
        },
        {
          "name": "buildenv.h.in",
          "type": "blob",
          "size": 0.146484375,
          "content": "#pragma once\n\n#define DXVK_TARGET \"@BUILD_TARGET@\"\n#define DXVK_COMPILER \"@BUILD_COMPILER@\"\n#define DXVK_COMPILER_VERSION \"@BUILD_COMPILER_VERSION@\"\n\n"
        },
        {
          "name": "dxvk.conf",
          "type": "blob",
          "size": 18.9765625,
          "content": "# Device filter. Only exposes devices whose Vulkan device name contains\n# the given string. May be useful to force an application to run on a\n# specific GPU, but not applications launched by that application.\n\n# dxvk.deviceFilter = \"\"\n\n\n# Expose the HDR10 ColorSpace (DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020)\n# to the application by default.\n# This shows to the game that the global Windows 'HDR Mode' is enabled.\n# Many (broken) games will need this to be set to consider exposing HDR output\n# as determine it based on the DXGIOutput's current ColorSpace instead of\n# using CheckColorSpaceSupport.\n# This defaults to the value of the DXVK_HDR environment variable.\n# \n# Supported values: True, False\n\n# dxgi.enableHDR = True\n\n\n# Allows the Vulkan driver to opt-in to exclusive full-screen mode on\n# Windows. Certain features, such as variable refresh rate or HDR, will\n# not work without this setting, however enabling it will break certain\n# games that use additional GDI windows, and it will also break alt+tab.\n#\n# This setting has no effect on non-Windows platforms.\n#\n# Supported values: True, False\n\n# dxvk.allowFse = False\n\n\n# Enables Unreal Engine 4 HDR workarounds for games that do not follow\n# the standard -Win64-Shipping.exe naming scheme. May be needed to avoid\n# crashes in D3D11 games on HDR-enabled systems due to statically linked\n# AMDAGS.\n# \n# Supported values: True, False\n\n# dxgi.enableUe4Workarounds = False\n\n\n# Create the VkSurface on the first call to IDXGISwapChain::Present,\n# rather than when creating the swap chain. Some games that start\n# rendering with a different graphics API may require this option,\n# or otherwise the window may stay black.\n# \n# Supported values: True, False\n\n# dxgi.deferSurfaceCreation = False\n# d3d9.deferSurfaceCreation = False\n\n\n# Enforce a stricter maximum frame latency. Overrides the application\n# setting specified by calling IDXGIDevice::SetMaximumFrameLatency.\n# Setting this to 0 will have no effect.\n# \n# Supported values : 0 - 16\n\n# dxgi.maxFrameLatency = 0\n# d3d9.maxFrameLatency = 0\n\n\n# Enables frame rate limiter. The main purpose of this is to work around\n# bugs in games that have physics or other simulation tied to their frame\n# rate, but do not provide their own limiter.\n#\n# Supported values\n# -1: Always disables the limiter\n#  0: Default behaviour. Limits the frame rate to the selected display\n#     refresh rate when vertical synchronization is enabled if the\n#     actual display mode does not match the game's one.\n#  n: Limit to n frames per second.\n\n# dxgi.maxFrameRate = 0\n# d3d9.maxFrameRate = 0\n\n\n# Override PCI vendor and device IDs reported to the application. Can\n# cause the app to adjust behaviour depending on the selected values.\n#\n# Supported values: Any four-digit hex number.\n\n# dxgi.customDeviceId = 0000\n# dxgi.customVendorId = 0000\n\n# d3d9.customDeviceId = 0000\n# d3d9.customVendorId = 0000\n\n\n# Override the reported device description\n#\n# Supported values: Any string.\n\n# dxgi.customDeviceDesc = \"\"\n# d3d9.customDeviceDesc = \"\"\n\n\n# Report Nvidia GPUs as AMD GPUs. Unless NVAPI support is explicitly\n# enabled through Proton, this is done by default in order to work\n# around crashes or low performance with Nvidia-speciic code paths\n# in games, especially Unreal Engine.\n#\n# Supported values: Auto, True, False\n\n# dxgi.hideNvidiaGpu = Auto\n\n\n# Report Nvidia GPUs running on NVK as AMD GPUs.\n#\n# Supported values: Auto, True, False\n\n# dxgi.hideNvkGpu = Auto\n\n\n# Report AMD GPUs as Nvidia GPUs. This is only done for games that are\n# known to have issues with AMDAGS or other AMD-specific code paths.\n#\n# Supported values: Auto, True, False\n\n# dxgi.hideAmdGpu = Auto\n\n\n# Report Intel GPUs as AMD GPUs. This is only done for games that are\n# known to have issues with Intel-specific libraries such as XESS.\n#\n# Supported values: Auto, True, False\n\n# dxgi.hideIntelGpu = Auto\n\n\n# Override maximum amount of device memory and shared system memory\n# reported to the application. This may fix texture streaming issues\n# in games that do not support cards with large amounts of VRAM.\n# This is not a hard cap and applications can choose to ignore it.\n#\n# Supported values: Any number in Megabytes.\n\n# dxgi.maxDeviceMemory = 0\n# dxgi.maxSharedMemory = 0\n\n\n# Override back buffer count for the Vulkan swap chain.\n# Setting this to 0 or less will have no effect.\n#\n# Supported values: Any number greater than or equal to 2.\n\n# dxgi.numBackBuffers = 0\n# d3d9.numBackBuffers = 0\n\n\n# Overrides synchronization interval (Vsync) for presentation.\n# Setting this to 0 disables vertical synchronization entirely.\n# A positive value 'n' will enable Vsync and repeat the same\n# image n times, and a negative value will have no effect.\n#\n# Supported values: Any non-negative number\n\n# dxgi.syncInterval = -1\n# d3d9.presentInterval = -1\n\n\n# True enables the mailbox present mode in case regular Vsync is disabled.\n# This should avoid tearing, but may be unsupported on some systems\n# or require setting dxgi.numBackBuffers to a higher value in order\n# to work properly. \n#\n# False enables the relaxed fifo present mode in case regular Vsync is enabled.\n# This should result in tearing but reduce stutter if FPS are too low,\n# but may be unsupported on some systems.\n#\n# Please do not report issues with this option.\n#\n# Supported values: Auto, True, False\n\n# dxvk.tearFree = Auto\n\n\n# Assume that command lists created from deferred contexts are only used\n# once. This is extremely common and may improve performance while reducing\n# the amount of memory wasted if games keep their command list objects alive\n# for too long, but may also lead to rendering issues if command lists are\n# submitted multiple times.\n#\n# Supported values: True, False\n\n# d3d11.dcSingleUseMode = True\n\n\n# Override the maximum feature level that a D3D11 device can be created\n# with. Setting this to a higher value may allow some applications to run\n# that would otherwise fail to create a D3D11 device.\n#\n# Supported values: 9_1, 9_2, 9_3, 10_0, 10_1, 11_0, 11_1, 12_0, 12_1\n\n# d3d11.maxFeatureLevel = 12_1\n\n\n# Overrides the maximum allowed tessellation factor. This can be used to\n# improve performance in titles which overuse tessellation.\n# \n# Supported values: Any number between 8 and 64\n\n# d3d11.maxTessFactor = 0\n\n\n# Enables relaxed pipeline barriers around UAV writes.\n# \n# This may improve performance in some games, but may also introduce\n# rendering issues. Please don't report bugs with the option enabled.\n#\n# Supported values: True, False\n\n# d3d11.relaxedBarriers = False\n\n\n# Ignores barriers around UAV writes from fragment shaders.\n#\n# This may improve performance in some games, but may also introduce\n# rendering issues. Please don't report bugs with the option enabled.\n#\n# Supported values: True, False\n\n# d3d11.ignoreGraphicsBarriers = False\n\n\n# Overrides anisotropic filtering for all samplers. Set this to a positive\n# value to enable AF for all samplers in the game, or to 0 in order to\n# disable AF entirely. Negative values will have no effect.\n# \n# Supported values: Any number between 0 and 16\n\n# d3d11.samplerAnisotropy = -1\n# d3d9.samplerAnisotropy = -1\n\n\n# Changes the mipmap LOD bias for all samplers. The given number will be\n# added to the LOD bias provided by the application, rather than replacing\n# it entirely. Positive values will reduce texture detail, while negative\n# values may increase sharpness at the cost of shimmer.\n#\n# Supported values: Any number between -2.0 and 1.0\n\n# d3d11.samplerLodBias = 0.0\n# d3d9.samplerLodBias = 0.0\n\n\n# Clamps any negative LOD bias to 0. Applies after samplerLodBias has been\n# applied. May help with games that use a high negative LOD bias by default.\n#\n# Supported values: True, False\n\n# d3d11.clampNegativeLodBias = False\n# d3d9.clampNegativeLodBias = False\n\n\n# Declares vertex positions as invariant in order to solve\n# potential Z-fighting issues at a small performance cost.\n#\n# Supported values: True, False\n\n# d3d11.invariantPosition = True\n# d3d9.invariantPosition = True\n\n\n# Forces per-sample rate shading when MSAA is enabled, rather than per-pixel\n# shading. May improve visual clarity at a significant performance cost, but\n# may also introduce visual issues in some games.\n#\n# Supported values: True, False\n\n# d3d11.forceSampleRateShading = False\n# d3d9.forceSampleRateShading = False\n\n\n# Forces the sample count of all textures to 1, and performs\n# the needed fixups in resolve operations and shaders.\n#\n# Supported values: True, False\n\n# d3d11.disableMsaa = False\n\n\n# Clears workgroup memory in compute shaders to zero. Some games don't do\n# this and rely on undefined behaviour. Enabling may reduce performance.\n#\n# Supported values: True, False\n\n# d3d11.zeroWorkgroupMemory = False\n\n\n# Clears mapped memory to zero when suballocated memory is freed. This will\n# drastically increase CPU overhead and should only be used as a last resort\n# if a game does not properly initialize mapped buffers on its own.\n#\n# Supported values: True, False\n\n# dxvk.zeroMappedMemory = False\n\n\n# Allocates dynamic resources with the given set of bind flags in\n# cached system memory rather than uncached memory or host-visible\n# VRAM, in order to allow fast readback from the CPU. This is only\n# useful for buggy applications, and may reduce GPU-bound performance.\n#\n# Supported values: Any combination of the following:\n# - v: Vertex buffers\n# - i: Index buffers\n# - c: Constant buffers\n# - r: Shader resources\n# - a: All dynamic resources\n\n# d3d11.cachedDynamicResources = \"\"\n\n\n# Force-enables the D3D11 context lock via the ID3D10Multithread\n# interface. This may be useful to debug race conditions.\n#\n# Supported values: True, False\n\n# d3d11.enableContextLock = False\n\n\n# Exposes or hides support for driver command lists\n#\n# Some games use the feature flag to decide whether to use deferred\n# contexts or not. We enable this by default, but in some situations\n# this can lead to issues if games detect an AMD GPU where command\n# lists are not natively supported on Windows.\n#\n# Supported values: True, False\n\n# d3d11.exposeDriverCommandLists = True\n\n\n# Reproducible Command Stream\n#\n# Ensure that for the same D3D commands the output VK commands\n# don't change between runs. Useful for comparative benchmarking,\n# can negatively affect performance and can break some games\n# that don't use queries correctly.\n#\n# Supported values:\n# - True/False\n\n# d3d11.reproducibleCommandStream = False\n# d3d9.reproducibleCommandStream = False\n\n\n# Sets number of pipeline compiler threads.\n# \n# If the graphics pipeline library feature is enabled, the given\n# number of threads will be used for shader compilation. Some of\n# these threads will be reserved for high-priority work.\n#\n# Supported values:\n# - 0 to use all available CPU cores\n# - any positive number to enforce the thread count\n\n# dxvk.numCompilerThreads = 0\n\n\n# Toggles raw SSBO usage.\n# \n# Uses storage buffers to implement raw and structured buffer\n# views. Enabled by default on hardware which has a storage\n# buffer offset alignment requirement of 4 Bytes (e.g. AMD).\n# Enabling this may improve performance, but is not safe on\n# hardware with higher alignment requirements.\n# \n# Supported values:\n# - Auto: Don't change the default\n# - True, False: Always enable / disable\n\n# dxvk.useRawSsbo = Auto\n\n\n# Controls graphics pipeline library behaviour\n#\n# Can be used to change VK_EXT_graphics_pipeline_library usage for\n# debugging purpose. Doing so will likely result in increased stutter\n# or degraded performance.\n#\n# Supported values:\n# - Auto: Enable if supported, and compile optimized pipelines in the background\n# - True: Enable if supported, but do not compile optimized pipelines\n# - False: Always disable the feature\n\n# dxvk.enableGraphicsPipelineLibrary = Auto\n\n\n# Controls pipeline lifetime tracking\n#\n# If enabled, pipeline libraries will be freed aggressively in order\n# save memory and address space. Has no effect if graphics pipeline\n# libraries are not supported or disabled.\n#\n# Supported values:\n# - Auto: Enable tracking for 32-bit applications only\n# - True: Always enable tracking\n# - False: Always disable tracking\n\n# dxvk.trackPipelineLifetime = Auto\n\n\n# Controls memory defragmentation\n#\n# By default, DXVK will try to defragment video memory if there is a\n# significant amount of memory wasted, or if the allocation budget of\n# the application is exceeded. This option is provided solely for\n# debug purposes.\n#\n# Supported values:\n# - True: Enable defragmentation\n# - Auto: Enable defragmentation, except on blocked drivers\n# - False: Disable defragmentation\n\n# dxvk.enableMemoryDefrag = Auto\n\n\n# Sets enabled HUD elements\n# \n# Behaves like the DXVK_HUD environment variable if the\n# environment variable is not set, otherwise it will be\n# ignored. The syntax is identical.\n\n# dxvk.hud = \n\n\n# Reported shader model\n#\n# The shader model to state that we support in the device\n# capabilities that the applicatation queries.\n# \n# Supported values:\n# - 1: Shader Model 1\n# - 2: Shader Model 2\n# - 3: Shader Model 3\n\n# d3d9.shaderModel = 3\n\n\n# DPI Awareness\n# \n# Decides whether we should call SetProcessDPIAware on device\n# creation. Helps avoid upscaling blur in modern Windows on\n# Hi-DPI screens/devices.\n#\n# Supported values:\n# - True, False: Always enable / disable\n\n# d3d9.dpiAware = True\n\n\n# Strict Constant Copies\n# \n# Decides whether we should always copy defined constants to\n# the UBO when relative addressing is used, or only when the\n# relative addressing starts a defined constant.\n#\n# Supported values:\n# - True, False: Always enable / disable\n\n# d3d9.strictConstantCopies = False\n\n\n# Strict Pow\n# \n# Decides whether we have an opSelect for handling pow(0,0) = 0\n# otherwise it becomes undefined.\n#\n# Supported values:\n# - True, False: Always enable / disable\n\n# d3d9.strictPow = True\n\n\n# Lenient Clear\n#\n# Decides whether or not we fastpath clear anyway if we are close enough to\n# clearing a full render target.\n#\n# Supported values:\n# - True, False: Always enable / disable\n\n# d3d9.lenientClear = False\n\n\n# Max available memory\n#\n# Changes the max initial value used in tracking and GetAvailableTextureMem\n# Value in Megabytes\n#\n# Supported values:\n# - Max Available Memory: Any int32_t\n# - Memory Tracking Testing: True, False\n\n# d3d9.maxAvailableMemory = 4096\n# d3d9.memoryTrackTest = False\n\n\n# Force enable/disable floating point quirk emulation\n#\n# Force toggle anything * 0 emulation\n# Setting it to True will use a faster but less accurate approach that works for most games.\n# Supported values:\n# - True: Use a faster but less accurate approach. Good enough for most games\n# - False: Disable float emulation completely\n# - Strict: Use a slower but more correct approach. Necessary for some games\n# - Auto: DXVK will pick automatically\n\n# d3d9.floatEmulation = Auto\n\n\n# Overrides the application's MSAA level on the swapchain\n# \n# Supported values: -1 (application) and 0 to 16 (user override)\n\n# d3d9.forceSwapchainMSAA = -1\n\n\n# Device Local Constant Buffers\n#\n# Enables using device local, host accessible memory for constant buffers in D3D9.\n# This tends to actually be slower for some reason on AMD,\n# and the exact same performance on NVIDIA.\n#\n# Supported values:\n# - True/False\n\n# d3d9.deviceLocalConstantBuffers = False\n\n# Support DF formats\n#\n# Support the vendor extension DF floating point depth formats on AMD and Intel.\n# Note that this config is ignored and disabled by default on Nvidia, or when\n# spoofing a Nvidia GPU, as it does not support these formats natively.\n#\n# Supported values:\n# - True/False\n\n# d3d9.supportDFFormats = True\n\n# Use D32f for D24\n#\n# Useful for reproducing AMD issues on other hw.\n#\n# Supported values:\n# - True/False\n\n# d3d9.useD32forD24 = False\n\n# Support X4R4G4B4\n#\n# Support the X4R4G4B4 format.\n# The Sims 2 is a very broken game.\n#\n# Supported values:\n# - True/False\n\n# d3d9.supportX4R4G4B4 = True\n\n# Support D16_LOCKABLE\n#\n# Support the D16_LOCKABLE format.\n# Always enabled on AMD, or when spoofing an AMD GPU\n# via customVendorId, disabled by default on Nvidia and Intel.\n#\n# Supported values:\n# - True/False\n\n# d3d9.supportD16Lockable = False\n\n# Disable A8 as a Render Target\n#\n# Disable support for A8 format render targets\n# Once again, The Sims 2 is a very broken game.\n#\n# Supported values:\n# - True/False\n\n# d3d9.disableA8RT = False\n\n# Support for VCache Query\n#\n# Support for the vcache query\n# Not very important as a user config.\n# Used internally.\n#\n# Supported values:\n# - True/False\n\n# Defaults to True if vendorId == 0x10de\n# d3d9.supportVCache = True\n\n# Force Sampler Type Spec Constants\n#\n# Useful if games use the wrong image and sampler\n# type combo like Halo: CE or Spellforce.\n# Can fix rendering in older, broken games in some instances.\n#\n# Supported values:\n# - True/False\n\n# d3d9.forceSamplerTypeSpecConstants = False\n\n# Force Aspect Ratio\n#\n# Only exposes modes with a given aspect ratio.\n# Useful for titles that break if they see ultra-wide.\n#\n# Supported values:\n# - Any ratio, ie. \"16:9\", \"4:3\"\n\n# d3d9.forceAspectRatio = \"\"\n\n# Enumerate by Displays\n#\n# Whether we should enumerate D3D9 adapters by display (windows behaviour)\n# or by physical adapter.\n# May be useful in PRIME setups.\n#\n# Supported values:\n# - True/False\n\n# d3d9.enumerateByDisplays = True\n\n# Cached Dynamic Buffers\n#\n# Allocates dynamic resources in D3DPOOL_DEFAULT in\n# cached system memory rather than uncached memory or host-visible\n# VRAM, in order to allow fast readback from the CPU. This is only\n# useful for buggy applications, and may reduce GPU-bound performance.\n#\n# Supported values:\n# - True/False\n\n# d3d9.cachedDynamicBuffers = False\n\n# Seamless Cubes\n#\n# Don't use non seamless cube maps even if they are supported.\n# Non seamless cubes are correct d3d9 behavior, but can produce worse looking edges.\n#\n# Supported values:\n# - True/False\n\n# d3d9.seamlessCubes = False\n\n# Debug Utils\n#\n# Enables debug utils as this is off by default, this enables user annotations like BeginEvent()/EndEvent().\n# Alternatively could be enabled with DXVK_DEBUG=markers environment variable.\n#\n# Supported values:\n# - True/False\n\n# dxvk.enableDebugUtils = False\n\n# Memory limit for locked D3D9 textures\n#\n# How much virtual memory will be used for textures (in MB).\n# 0 to disable the limit.\n# THIS DOES NOT IMPACT ACTUAL MEMORY CONSUMPTION OR TEXTURE QUALITY.\n# DO NOT CHANGE THIS UNLESS YOU HAVE A VERY GOOD REASON.\n\n# d3d9.textureMemory = 100\n\n# Hide integrated graphics from applications\n#\n# Only has an effect when dedicated GPUs are present on the system. It is\n# not recommended to use this option at all unless absolutely necessary for\n# a game to work; prefer using DXVK_FILTER_DEVICE_NAME whenever possible.\n#\n# Supported values:\n# - True/False\n\n# dxvk.hideIntegratedGraphics = False\n\n# Trigger DEVICELOST when losing focus\n#\n# D3D9 requires the application to call Device::Reset after\n# it loses focus in fullscreen.\n# Some games rely on observing a D3DERR_DEVICELOST or D3DERR_NOTRESET.\n# Others don't handle it correctly.\n#\n# Supported values:\n# - True/False\n\n# d3d9.deviceLossOnFocusLoss = False\n\n# Reject Device::Reset if any losable resource is still alive\n#\n# D3D9 rejects Device::Reset if there's still any alive resources of specific types.\n# (State blocks, additional swapchains, D3DPOOL_DEFAULT resources)\n# Some games leak resources leading to a hang.\n#\n# Supported values:\n# - True/False\n\n# d3d9.countLosableResources = True\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 5.5517578125,
          "content": "project('dxvk', ['c', 'cpp'], version : 'v2.5.2', meson_version : '>= 0.58', default_options : [ 'cpp_std=c++17', 'b_vscrt=static_from_buildtype', 'warning_level=2' ])\n\npkg = import('pkgconfig')\ncpu_family = target_machine.cpu_family()\nplatform   = target_machine.system()\nfs = import('fs')\n\ncpp = meson.get_compiler('cpp')\ncc = meson.get_compiler('c')\ndxvk_is_msvc = cpp.get_argument_syntax() == 'msvc'\n\ncompiler_args = [\n  '-msse',\n  '-msse2',\n  '-msse3',\n  '-mfpmath=sse',\n  '-Wimplicit-fallthrough',\n  # gcc\n  '-Wno-missing-field-initializers',\n  '-Wno-unused-parameter',\n  '-Wno-misleading-indentation',\n  '-Wno-cast-function-type', # Needed for GetProcAddress.\n  # clang\n  '-Wno-unused-private-field',\n  '-Wno-microsoft-exception-spec',\n  '-Wno-extern-c-compat',\n  '-Wno-unused-const-variable',\n  '-Wno-missing-braces',\n]\n\nlink_args = []\n\nif get_option('build_id')\n  link_args += [\n    '-Wl,--build-id',\n  ]\nendif\n\ndxvk_include_dirs = ['./include']\nif fs.is_dir('./include/vulkan/include')\n  dxvk_include_dirs += ['./include/vulkan/include']\nelif not cpp.check_header('vulkan/vulkan.h')\n  error('Missing Vulkan-Headers')\nendif\nif fs.is_dir('./include/spirv/include')\n  dxvk_include_dirs += ['./include/spirv/include']\nelif not cpp.check_header('spirv/unified1/spirv.hpp')\n  error('Missing SPIRV-Headers')\nendif\n\ndep_displayinfo = dependency(\n  'libdisplay-info',\n  version: ['>= 0.0.0', '< 0.2.0'],\n  fallback: ['libdisplay-info', 'di_dep'],\n  default_options: ['default_library=static'],\n)\n\nif platform == 'windows'\n  dxvk_so_version = {'name_prefix': ''}\n\n  compiler_args += [\n    '-DNOMINMAX',\n    '-D_WIN32_WINNT=0xa00',\n  ]\n\n  if not dxvk_is_msvc\n    link_args += [\n      '-static',\n      '-static-libgcc',\n      '-static-libstdc++',\n      # We need to set the section alignment for debug symbols to\n      # work properly as well as avoiding a memcpy from the Wine loader.\n      '-Wl,--file-alignment=4096',\n    ]\n\n    # Wine's built-in back traces only work with dwarf4 symbols\n    if get_option('debug')\n      compiler_args += [\n        '-gdwarf-4',\n      ]\n    endif\n\n    # Enable stdcall fixup on 32-bit\n    if cpu_family == 'x86'\n      link_args += [\n        '-Wl,--enable-stdcall-fixup',\n        '-Wl,--kill-at',\n      ]\n    endif\n  else\n    # setup file alignment + enable PDB output for MSVC builds\n    # PDBs are useful for Windows consumers of DXVK \n    compiler_args += [\n      '/Z7'\n    ]\n    link_args += [\n      '/FILEALIGN:4096',\n      '/DEBUG:FULL'\n    ]\n  endif\n\n  lib_d3d9    = cpp.find_library('d3d9')\n  lib_d3d11   = cpp.find_library('d3d11')\n  lib_dxgi    = cpp.find_library('dxgi')\n\n  if dxvk_is_msvc\n    res_ext = '.res'\n    wrc = find_program('rc')\n    wrc_generator = generator(wrc,\n      output    : [ '@BASENAME@' + res_ext ],\n      arguments : [ '/fo', '@OUTPUT@', '@INPUT@' ],\n    )\n  else\n    res_ext = '.o'\n    wrc = find_program('windres')\n    wrc_generator = generator(wrc,\n      output    : [ '@BASENAME@' + res_ext ],\n      arguments : [ '-i', '@INPUT@', '-o', '@OUTPUT@' ],\n    )\n  endif\n\n  dxvk_name_prefix = ''\n  compiler_args += ['-DDXVK_WSI_WIN32']\nelse\n  dxvk_abi_version = '0'\n  dxvk_version_raw = meson.project_version().strip('v').split('.')\n  dxvk_version = [ dxvk_version_raw[0] ]\n  foreach i : [ 1, 2 ]\n    padded = dxvk_version_raw[i]\n    if padded.to_int() < 10\n      padded = '0' + padded\n    endif\n    dxvk_version += [ padded ]\n  endforeach\n  dxvk_so_version = {'version': dxvk_abi_version + '.' + dxvk_version[0] + dxvk_version[1] + dxvk_version[2]}\n\n  wrc           = find_program('touch')\n  wrc_generator = generator(wrc, output : [ '@BASENAME@_ignored.h' ], arguments : [ '@OUTPUT@' ] )\n\n  dxvk_include_dirs += [\n    './include/native',\n    './include/native/windows',\n    './include/native/directx'\n  ]\n\n  lib_sdl3 = dependency('SDL3', required: false)\n  lib_sdl2 = dependency('SDL2', required: false)\n  lib_glfw = dependency('glfw', required: false)\n  if lib_sdl3.found()\n    compiler_args += ['-DDXVK_WSI_SDL3']\n  endif\n  if lib_sdl2.found()\n    compiler_args += ['-DDXVK_WSI_SDL2']\n  endif\n  if lib_glfw.found()\n    compiler_args += ['-DDXVK_WSI_GLFW']\n  endif\n  if (not lib_sdl3.found() and not lib_sdl2.found() and not lib_glfw.found())\n    error('SDL3, SDL2, or GLFW are required to build dxvk-native')\n  endif\n  \n  dxvk_name_prefix = 'dxvk_'\n  dxvk_pkg_prefix = 'dxvk-'\n\n  link_args += [\n    '-static-libgcc',\n    '-static-libstdc++',\n  ]\nendif\n\ndxvk_include_path = include_directories(dxvk_include_dirs)\n\nadd_project_arguments(cpp.get_supported_arguments(compiler_args), language: 'cpp')\nadd_project_arguments(cc.get_supported_arguments(compiler_args), language: 'c')\nadd_project_link_arguments(cpp.get_supported_link_arguments(link_args), language: 'cpp')\nadd_project_link_arguments(cc.get_supported_link_arguments(link_args), language: 'c')\n\nexe_ext = ''\ndef_spec_ext = '.def'\n\nglsl_compiler = find_program('glslang', 'glslangValidator')\nglsl_args = [\n  '--quiet',\n  '--target-env', 'vulkan1.3',\n  '--vn', '@BASENAME@',\n  '--depfile', '@DEPFILE@',\n  '@INPUT@',\n  '-o', '@OUTPUT@',\n]\nglsl_generator = generator(\n  glsl_compiler,\n  output    : [ '@BASENAME@.h' ],\n  depfile   : '@BASENAME@.h.d',\n  arguments : glsl_args,\n)\n\ndxvk_version = vcs_tag(\n  command: ['git', 'describe', '--dirty=+'],\n  input:  'version.h.in',\n  output: 'version.h',\n)\n\nconf_data = configuration_data()\nconf_data.set('BUILD_COMPILER', cpp.get_id())\nconf_data.set('BUILD_COMPILER_VERSION', cpp.version())\nconf_data.set('BUILD_TARGET', cpu_family)\ndxvk_buildenv = configure_file(\n  configuration : conf_data,\n  input:  'buildenv.h.in',\n  output: 'buildenv.h',\n)\n\nif platform != 'windows'\n  subdir('include/native')\nendif\n\nsubdir('src')\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.572265625,
          "content": "option('enable_dxgi',  type : 'boolean', value : true, description: 'Build DXGI')\noption('enable_d3d8',  type : 'boolean', value : true, description: 'Build D3D8')\noption('enable_d3d9',  type : 'boolean', value : true, description: 'Build D3D9')\noption('enable_d3d10', type : 'boolean', value : true, description: 'Build D3D10')\noption('enable_d3d11', type : 'boolean', value : true, description: 'Build D3D11')\noption('build_id',     type : 'boolean', value : false)\n\noption('dxvk_native_wsi',   type : 'string',  value : 'sdl2', description: 'WSI system to use if building natively.')"
        },
        {
          "name": "package-native.sh",
          "type": "blob",
          "size": 1.8603515625,
          "content": "#!/usr/bin/env bash\n\nset -e\n\nshopt -s extglob\n\nif [ -z \"$1\" ] || [ -z \"$2\" ]; then\n  echo \"Usage: $0 version destdir [--no-package] [--dev-build]\"\n  exit 1\nfi\n\nDXVK_VERSION=\"$1\"\nDXVK_SRC_DIR=$(readlink -f \"$0\")\nDXVK_SRC_DIR=$(dirname \"$DXVK_SRC_DIR\")\nDXVK_BUILD_DIR=$(realpath \"$2\")\"/dxvk-native-$DXVK_VERSION\"\nDXVK_ARCHIVE_PATH=$(realpath \"$2\")\"/dxvk-native-$DXVK_VERSION.tar.gz\"\n\nif [ -e \"$DXVK_BUILD_DIR\" ]; then\n  echo \"Build directory $DXVK_BUILD_DIR already exists\"\n  exit 1\nfi\n\nshift 2\n\nopt_nopackage=0\nopt_devbuild=0\nopt_buildid=false\nopt_64_only=0\nopt_32_only=0\n\nCC=${CC:=\"gcc\"}\nCXX=${CXX:=\"g++\"}\n\nwhile [ $# -gt 0 ]; do\n  case \"$1\" in\n  \"--no-package\")\n    opt_nopackage=1\n    ;;\n  \"--dev-build\")\n    opt_nopackage=1\n    opt_devbuild=1\n    ;;\n  \"--build-id\")\n    opt_buildid=true\n    ;;\n  \"--64-only\")\n    opt_64_only=1\n    ;;\n  \"--32-only\")\n    opt_32_only=1\n    ;;\n  *)\n    echo \"Unrecognized option: $1\" >&2\n    exit 1\n  esac\n  shift\ndone\n\nfunction build_arch {  \n  cd \"$DXVK_SRC_DIR\"\n\n  opt_strip=\n  if [ $opt_devbuild -eq 0 ]; then\n    opt_strip=--strip\n  fi\n\n  CC=\"$CC -m$1\" CXX=\"$CXX -m$1\" meson setup  \\\n        --buildtype \"release\"                \\\n        --prefix \"$DXVK_BUILD_DIR/usr\"       \\\n        $opt_strip                           \\\n        --bindir \"$2\"                        \\\n        --libdir \"$2\"                        \\\n        -Dbuild_id=$opt_buildid              \\\n        --force-fallback-for=libdisplay-info \\\n        \"$DXVK_BUILD_DIR/build.$1\"\n\n  cd \"$DXVK_BUILD_DIR/build.$1\"\n  ninja install\n\n  if [ $opt_devbuild -eq 0 ]; then\n    rm -r \"$DXVK_BUILD_DIR/build.$1\"\n  fi\n}\n\nfunction package {\n  cd \"$DXVK_BUILD_DIR\"\n  tar -czf \"$DXVK_ARCHIVE_PATH\" \"usr\"\n  cd \"..\"\n  rm -R \"dxvk-native-$DXVK_VERSION\"\n}\n\nif [ $opt_32_only -eq 0 ]; then\n  build_arch 64 lib\nfi\nif [ $opt_64_only -eq 0 ]; then\n  build_arch 32 lib32\nfi\n\nif [ $opt_nopackage -eq 0 ]; then\n  package\nfi\n"
        },
        {
          "name": "package-release.sh",
          "type": "blob",
          "size": 2.08984375,
          "content": "#!/usr/bin/env bash\n\nset -e\n\nshopt -s extglob\n\nif [ -z \"$1\" ] || [ -z \"$2\" ]; then\n  echo \"Usage: $0 version destdir [--no-package] [--dev-build]\"\n  exit 1\nfi\n\nDXVK_VERSION=\"$1\"\nDXVK_SRC_DIR=$(readlink -f \"$0\")\nDXVK_SRC_DIR=$(dirname \"$DXVK_SRC_DIR\")\nDXVK_BUILD_DIR=$(realpath \"$2\")\"/dxvk-$DXVK_VERSION\"\nDXVK_ARCHIVE_PATH=$(realpath \"$2\")\"/dxvk-$DXVK_VERSION.tar.gz\"\n\nif [ -e \"$DXVK_BUILD_DIR\" ]; then\n  echo \"Build directory $DXVK_BUILD_DIR already exists\"\n  exit 1\nfi\n\nshift 2\n\nopt_nopackage=0\nopt_devbuild=0\nopt_buildid=false\nopt_64_only=0\nopt_32_only=0\n\ncrossfile=\"build-win\"\n\nwhile [ $# -gt 0 ]; do\n  case \"$1\" in\n  \"--no-package\")\n    opt_nopackage=1\n    ;;\n  \"--dev-build\")\n    opt_nopackage=1\n    opt_devbuild=1\n    ;;\n  \"--build-id\")\n    opt_buildid=true\n    ;;\n  \"--64-only\")\n    opt_64_only=1\n    ;;\n  \"--32-only\")\n    opt_32_only=1\n    ;;\n  *)\n    echo \"Unrecognized option: $1\" >&2\n    exit 1\n  esac\n  shift\ndone\n\nfunction build_arch {\n  export WINEARCH=\"win$1\"\n  export WINEPREFIX=\"$DXVK_BUILD_DIR/wine.$1\"\n  \n  cd \"$DXVK_SRC_DIR\"\n\n  opt_strip=\n  if [ $opt_devbuild -eq 0 ]; then\n    opt_strip=--strip\n  fi\n\n  meson setup --cross-file \"$DXVK_SRC_DIR/$crossfile$1.txt\" \\\n        --buildtype \"release\"                               \\\n        --prefix \"$DXVK_BUILD_DIR\"                          \\\n        $opt_strip                                          \\\n        --bindir \"x$1\"                                      \\\n        --libdir \"x$1\"                                      \\\n        -Db_ndebug=if-release                               \\\n        -Dbuild_id=$opt_buildid                             \\\n        \"$DXVK_BUILD_DIR/build.$1\"\n\n  cd \"$DXVK_BUILD_DIR/build.$1\"\n  ninja install\n\n  if [ $opt_devbuild -eq 0 ]; then\n    # get rid of some useless .a files\n    rm \"$DXVK_BUILD_DIR/x$1/\"*.!(dll)\n    rm -R \"$DXVK_BUILD_DIR/build.$1\"\n  fi\n}\n\nfunction package {\n  cd \"$DXVK_BUILD_DIR/..\"\n  tar -czf \"$DXVK_ARCHIVE_PATH\" \"dxvk-$DXVK_VERSION\"\n  rm -R \"dxvk-$DXVK_VERSION\"\n}\n\nif [ $opt_32_only -eq 0 ]; then\n  build_arch 64\nfi\nif [ $opt_64_only -eq 0 ]; then\n  build_arch 32\nfi\n\nif [ $opt_nopackage -eq 0 ]; then\n  package\nfi\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.h.in",
          "type": "blob",
          "size": 0.0458984375,
          "content": "#pragma once\n\n#define DXVK_VERSION \"@VCS_TAG@\"\n"
        }
      ]
    }
  ]
}