{
  "metadata": {
    "timestamp": 1736566304751,
    "page": 56,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pybind/pybind11",
      "stars": 16035,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 1.2412109375,
          "content": "version: 1.0.{build}\nimage:\n- Visual Studio 2017\ntest: off\nskip_branch_with_pr: true\nbuild:\n  parallel: true\nplatform:\n- x86\nenvironment:\n  matrix:\n  - PYTHON: 38\n    CONFIG: Debug\ninstall:\n- ps: |\n    $env:CMAKE_GENERATOR = \"Visual Studio 15 2017\"\n    if ($env:PLATFORM -eq \"x64\") { $env:PYTHON = \"$env:PYTHON-x64\" }\n    $env:PATH = \"C:\\Python$env:PYTHON\\;C:\\Python$env:PYTHON\\Scripts\\;$env:PATH\"\n    python -W ignore -m pip install --upgrade pip wheel\n    python -W ignore -m pip install pytest numpy --no-warn-script-location pytest-timeout\n- ps: |\n    Start-FileDownload 'https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.zip'\n    7z x eigen-3.3.7.zip -y > $null\n    $env:CMAKE_INCLUDE_PATH = \"eigen-3.3.7;$env:CMAKE_INCLUDE_PATH\"\nbuild_script:\n- cmake -G \"%CMAKE_GENERATOR%\" -A \"%CMAKE_ARCH%\"\n    -DCMAKE_CXX_STANDARD=14\n    -DPYBIND11_WERROR=ON\n    -DDOWNLOAD_CATCH=ON\n    -DCMAKE_SUPPRESS_REGENERATION=1\n    .\n- set MSBuildLogger=\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\"\n- cmake --build . --config %CONFIG% --target pytest -- /m /v:m /logger:%MSBuildLogger%\n- cmake --build . --config %CONFIG% --target cpptest -- /m /v:m /logger:%MSBuildLogger%\non_failure: if exist \"tests\\test_cmake_build\" type tests\\test_cmake_build\\*.log*\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.97265625,
          "content": "---\n# See all possible options and defaults with:\n# clang-format --style=llvm --dump-config\nBasedOnStyle: LLVM\nAccessModifierOffset: -4\nAllowShortLambdasOnASingleLine: true\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: false\nBinPackParameters: false\nBreakBeforeBinaryOperators: All\nBreakConstructorInitializers: BeforeColon\nColumnLimit: 99\nCommentPragmas: 'NOLINT:.*|^ IWYU pragma:'\nIncludeBlocks: Regroup\nIndentCaseLabels: true\nIndentPPDirectives: AfterHash\nIndentWidth: 4\nLanguage: Cpp\nSpaceAfterCStyleCast: true\nStandard: Cpp11\nStatementMacros: ['PyObject_HEAD']\nTabWidth: 4\nIncludeCategories:\n  - Regex:           '<pybind11/.*'\n    Priority:        -1\n  - Regex:           'pybind11.h\"$'\n    Priority:        1\n  - Regex:           '^\".*/?detail/'\n    Priority:        1\n    SortPriority:    2\n  - Regex:           '^\"'\n    Priority:        1\n    SortPriority:    3\n  - Regex:           '<[[:alnum:]._]+>'\n    Priority:        4\n  - Regex:           '.*'\n    Priority:        5\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.6005859375,
          "content": "FormatStyle: file\n\nChecks: |\n  *bugprone*,\n  *performance*,\n  clang-analyzer-optin.cplusplus.VirtualCall,\n  clang-analyzer-optin.performance.Padding,\n  cppcoreguidelines-init-variables,\n  cppcoreguidelines-prefer-member-initializer,\n  cppcoreguidelines-pro-type-static-cast-downcast,\n  cppcoreguidelines-slicing,\n  google-explicit-constructor,\n  llvm-namespace-comment,\n  misc-definitions-in-headers,\n  misc-misplaced-const,\n  misc-non-copyable-objects,\n  misc-static-assert,\n  misc-throw-by-value-catch-by-reference,\n  misc-uniqueptr-reset-release,\n  misc-unused-parameters,\n  modernize-avoid-bind,\n  modernize-loop-convert,\n  modernize-make-shared,\n  modernize-redundant-void-arg,\n  modernize-replace-auto-ptr,\n  modernize-replace-disallow-copy-and-assign-macro,\n  modernize-replace-random-shuffle,\n  modernize-shrink-to-fit,\n  modernize-use-auto,\n  modernize-use-bool-literals,\n  modernize-use-default-member-init,\n  modernize-use-emplace,\n  modernize-use-equals-default,\n  modernize-use-equals-delete,\n  modernize-use-noexcept,\n  modernize-use-nullptr,\n  modernize-use-override,\n  modernize-use-using,\n  readability-avoid-const-params-in-decls,\n  readability-braces-around-statements,\n  readability-const-return-type,\n  readability-container-size-empty,\n  readability-delete-null-pointer,\n  readability-else-after-return,\n  readability-implicit-bool-conversion,\n  readability-inconsistent-declaration-parameter-name,\n  readability-make-member-function-const,\n  readability-misplaced-array-index,\n  readability-non-const-parameter,\n  readability-qualified-auto,\n  readability-redundant-function-ptr-dereference,\n  readability-redundant-smartptr-get,\n  readability-redundant-string-cstr,\n  readability-simplify-subscript-expr,\n  readability-static-accessed-through-instance,\n  readability-static-definition-in-anonymous-namespace,\n  readability-string-compare,\n  readability-suspicious-call-argument,\n  readability-uniqueptr-delete-release,\n  -bugprone-chained-comparison,\n  -bugprone-easily-swappable-parameters,\n  -bugprone-exception-escape,\n  -bugprone-reserved-identifier,\n  -bugprone-unused-raii,\n  -performance-enum-size,\n\nCheckOptions:\n- key:             modernize-use-equals-default.IgnoreMacros\n  value:           false\n- key:             performance-for-range-copy.WarnOnAllAutoCopies\n  value:           true\n- key:             performance-inefficient-string-concatenation.StrictMode\n  value:           true\n- key:             performance-unnecessary-value-param.AllowedTypes\n  value:           'exception_ptr$;'\n- key:             readability-implicit-bool-conversion.AllowPointerConditions\n  value:           true\n\nHeaderFilterRegex: 'pybind11/.*h'\n"
        },
        {
          "name": ".cmake-format.yaml",
          "type": "blob",
          "size": 2.14453125,
          "content": "parse:\n  additional_commands:\n    pybind11_add_module:\n      flags:\n        - THIN_LTO\n        - MODULE\n        - SHARED\n        - NO_EXTRAS\n        - EXCLUDE_FROM_ALL\n        - SYSTEM\n\nformat:\n  line_width: 99\n  tab_size: 2\n\n  # If an argument group contains more than this many sub-groups\n  # (parg or kwarg groups) then force it to a vertical layout.\n  max_subgroups_hwrap: 2\n\n  # If a positional argument group contains more than this many\n  # arguments, then force it to a vertical layout.\n  max_pargs_hwrap: 6\n\n  # If a cmdline positional group consumes more than this many\n  # lines without nesting, then invalidate the layout (and nest)\n  max_rows_cmdline: 2\n  separate_ctrl_name_with_space: false\n  separate_fn_name_with_space: false\n  dangle_parens: false\n\n  # If the trailing parenthesis must be 'dangled' on its on\n  # 'line, then align it to this reference: `prefix`: the start'\n  # 'of the statement,  `prefix-indent`: the start of the'\n  # 'statement, plus one indentation  level, `child`: align to'\n  # the column of the arguments\n  dangle_align: prefix\n  # If the statement spelling length (including space and\n  # parenthesis) is smaller than this amount, then force reject\n  # nested layouts.\n  min_prefix_chars: 4\n\n  # If the statement spelling length (including space and\n  # parenthesis) is larger than the tab width by more than this\n  # amount, then force reject un-nested layouts.\n  max_prefix_chars: 10\n\n  # If a candidate layout is wrapped horizontally but it exceeds\n  # this many lines, then reject the layout.\n  max_lines_hwrap: 2\n\n  line_ending: unix\n\n  # Format command names consistently as 'lower' or 'upper' case\n  command_case: canonical\n\n  # Format keywords consistently as 'lower' or 'upper' case\n  # unchanged is valid too\n  keyword_case: 'upper'\n\n  # A list of command names which should always be wrapped\n  always_wrap: []\n\n  # If true, the argument lists which are known to be sortable\n  # will be sorted lexicographically\n  enable_sort: true\n\n  # If true, the parsers may infer whether or not an argument\n  # list is sortable (without annotation).\n  autosort: false\n\n# Causes a few issues - can be solved later, possibly.\nmarkup:\n  enable_markup: false\n"
        },
        {
          "name": ".codespell-ignore-lines",
          "type": "blob",
          "size": 1.27734375,
          "content": "template <op_id id, op_type ot, typename L = undefined_t, typename R = undefined_t>\n    template <typename ThisT>\n        auto &this_ = static_cast<ThisT &>(*this);\n                if (load_impl<ThisT>(temp, false)) {\n        ssize_t nd = 0;\n        auto trivial = broadcast(buffers, nd, shape);\n        auto ndim = (size_t) nd;\n    int nd;\n    ssize_t ndim() const { return detail::array_proxy(m_ptr)->nd; }\n        using op = op_impl<id, ot, Base, L_type, R_type>;\ntemplate <op_id id, op_type ot, typename L, typename R>\n    template <detail::op_id id, detail::op_type ot, typename L, typename R, typename... Extra>\n    class_ &def(const detail::op_<id, ot, L, R> &op, const Extra &...extra) {\n    class_ &def_cast(const detail::op_<id, ot, L, R> &op, const Extra &...extra) {\n@pytest.mark.parametrize(\"access\", [\"ro\", \"rw\", \"static_ro\", \"static_rw\"])\nstruct IntStruct {\n    explicit IntStruct(int v) : value(v){};\n    ~IntStruct() { value = -value; }\n    IntStruct(const IntStruct &) = default;\n    IntStruct &operator=(const IntStruct &) = default;\n    py::class_<IntStruct>(m, \"IntStruct\").def(py::init([](const int i) { return IntStruct(i); }));\n    py::implicitly_convertible<int, IntStruct>();\n    m.def(\"test\", [](int expected, const IntStruct &in) {\n        [](int expected, const IntStruct &in) {\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.017578125,
          "content": "docs/*.svg binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.490234375,
          "content": "CMakeCache.txt\nCMakeFiles\nMakefile\ncmake_install.cmake\ncmake_uninstall.cmake\n.DS_Store\n*.so\n*.pyd\n*.dll\n*.sln\n*.sdf\n*.opensdf\n*.vcxproj\n*.vcxproj.user\n*.filters\nexample.dir\nWin32\nx64\nRelease\nDebug\n.vs\nCTestTestfile.cmake\nTesting\nautogen\nMANIFEST\n/.ninja_*\n/*.ninja\n/docs/.build\n*.py[co]\n*.egg-info\n*~\n.*.swp\n.DS_Store\n/dist\n/*build*\n.cache/\nsosize-*.txt\npybind11Config*.cmake\npybind11Targets.cmake\n/*env*\n/.vscode\n/pybind11/include/*\n/pybind11/share/*\n/docs/_build/*\n.ipynb_checkpoints/\ntests/main.cpp\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 3.615234375,
          "content": "# To use:\n#\n#     pre-commit run -a\n#\n# Or:\n#\n#     pre-commit install  # (runs every time you commit in git)\n#\n# To update this file:\n#\n#     pre-commit autoupdate\n#\n# See https://github.com/pre-commit/pre-commit\n\n\nci:\n  autoupdate_commit_msg: \"chore(deps): update pre-commit hooks\"\n  autofix_commit_msg: \"style: pre-commit fixes\"\n  autoupdate_schedule: monthly\n\n# third-party content\nexclude: ^tools/JoinPaths.cmake$\n\nrepos:\n\n# Clang format the codebase automatically\n- repo: https://github.com/pre-commit/mirrors-clang-format\n  rev: \"v19.1.6\"\n  hooks:\n  - id: clang-format\n    types_or: [c++, c, cuda]\n\n# Ruff, the Python auto-correcting linter/formatter written in Rust\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  rev: v0.8.6\n  hooks:\n  - id: ruff\n    args: [\"--fix\", \"--show-fixes\"]\n  - id: ruff-format\n\n# Check static types with mypy\n- repo: https://github.com/pre-commit/mirrors-mypy\n  rev: \"v1.14.1\"\n  hooks:\n  - id: mypy\n    args: []\n    exclude: ^(tests|docs)/\n    additional_dependencies:\n    - markdown-it-py\n    - nox\n    - rich\n    - types-setuptools\n\n# CMake formatting\n- repo: https://github.com/cheshirekow/cmake-format-precommit\n  rev: \"v0.6.13\"\n  hooks:\n  - id: cmake-format\n    additional_dependencies: [pyyaml]\n    types: [file]\n    files: (\\.cmake|CMakeLists.txt)(.in)?$\n\n# Standard hooks\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: \"v5.0.0\"\n  hooks:\n  - id: check-added-large-files\n  - id: check-case-conflict\n  - id: check-docstring-first\n  - id: check-merge-conflict\n  - id: check-symlinks\n  - id: check-toml\n  - id: check-yaml\n  - id: debug-statements\n  - id: end-of-file-fixer\n  - id: mixed-line-ending\n  - id: requirements-txt-fixer\n  - id: trailing-whitespace\n\n# Also code format the docs\n- repo: https://github.com/adamchainz/blacken-docs\n  rev: \"1.19.1\"\n  hooks:\n  - id: blacken-docs\n    additional_dependencies:\n    - black==23.*\n\n# Changes tabs to spaces\n- repo: https://github.com/Lucas-C/pre-commit-hooks\n  rev: \"v1.5.5\"\n  hooks:\n  - id: remove-tabs\n\n# Avoid directional quotes\n- repo: https://github.com/sirosen/texthooks\n  rev: \"0.6.8\"\n  hooks:\n  - id: fix-ligatures\n  - id: fix-smartquotes\n\n# Checking for common mistakes\n- repo: https://github.com/pre-commit/pygrep-hooks\n  rev: \"v1.10.0\"\n  hooks:\n  - id: rst-backticks\n  - id: rst-directive-colons\n  - id: rst-inline-touching-normal\n\n# Checks the manifest for missing files (native support)\n- repo: https://github.com/mgedmin/check-manifest\n  rev: \"0.50\"\n  hooks:\n  - id: check-manifest\n    # This is a slow hook, so only run this if --hook-stage manual is passed\n    stages: [manual]\n    additional_dependencies: [cmake, ninja]\n\n# Check for spelling\n# Use tools/codespell_ignore_lines_from_errors.py\n# to rebuild .codespell-ignore-lines\n- repo: https://github.com/codespell-project/codespell\n  rev: \"v2.3.0\"\n  hooks:\n  - id: codespell\n    exclude: \".supp$\"\n    args: [\"-x.codespell-ignore-lines\", \"-Lccompiler,intstruct\"]\n\n# Check for common shell mistakes\n- repo: https://github.com/shellcheck-py/shellcheck-py\n  rev: \"v0.10.0.1\"\n  hooks:\n  - id: shellcheck\n\n# Disallow some common capitalization mistakes\n- repo: local\n  hooks:\n  - id: disallow-caps\n    name: Disallow improper capitalization\n    language: pygrep\n    entry: PyBind|\\bNumpy\\b|Cmake|CCache|PyTest\n    exclude: ^\\.pre-commit-config.yaml$\n\n# PyLint has native support - not always usable, but works for us\n- repo: https://github.com/PyCQA/pylint\n  rev: \"v3.3.3\"\n  hooks:\n  - id: pylint\n    files: ^pybind11\n\n# Check schemas on some of our YAML files\n- repo: https://github.com/python-jsonschema/check-jsonschema\n  rev: 0.30.0\n  hooks:\n  - id: check-readthedocs\n  - id: check-github-workflows\n  - id: check-dependabot\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.26953125,
          "content": "# https://blog.readthedocs.com/migrate-configuration-v2/\n\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  apt_packages:\n    - librsvg2-bin\n  tools:\n    python: \"3.11\"\n\nsphinx:\n  configuration: docs/conf.py\n\npython:\n  install:\n  - requirements: docs/requirements.txt\n\nformats:\n  - pdf\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 12.609375,
          "content": "# CMakeLists.txt -- Build system for the pybind11 modules\n#\n# Copyright (c) 2015 Wenzel Jakob <wenzel@inf.ethz.ch>\n#\n# All rights reserved. Use of this source code is governed by a\n# BSD-style license that can be found in the LICENSE file.\n\n# Propagate this policy (FindPythonInterp removal) so it can be detected later\nif(NOT CMAKE_VERSION VERSION_LESS \"3.27\")\n  cmake_policy(GET CMP0148 _pybind11_cmp0148)\nendif()\n\ncmake_minimum_required(VERSION 3.15...3.30)\n\nif(_pybind11_cmp0148)\n  cmake_policy(SET CMP0148 ${_pybind11_cmp0148})\n  unset(_pybind11_cmp0148)\nendif()\n\n# Avoid infinite recursion if tests include this as a subdirectory\ninclude_guard(GLOBAL)\n\n# Extract project version from source\nfile(STRINGS \"${CMAKE_CURRENT_SOURCE_DIR}/include/pybind11/detail/common.h\"\n     pybind11_version_defines REGEX \"#define PYBIND11_VERSION_(MAJOR|MINOR|PATCH) \")\n\nforeach(ver ${pybind11_version_defines})\n  if(ver MATCHES [[#define PYBIND11_VERSION_(MAJOR|MINOR|PATCH) +([^ ]+)$]])\n    set(PYBIND11_VERSION_${CMAKE_MATCH_1} \"${CMAKE_MATCH_2}\")\n  endif()\nendforeach()\n\nif(PYBIND11_VERSION_PATCH MATCHES [[\\.([a-zA-Z0-9]+)$]])\n  set(pybind11_VERSION_TYPE \"${CMAKE_MATCH_1}\")\nendif()\nstring(REGEX MATCH \"^[0-9]+\" PYBIND11_VERSION_PATCH \"${PYBIND11_VERSION_PATCH}\")\n\nproject(\n  pybind11\n  LANGUAGES CXX\n  VERSION \"${PYBIND11_VERSION_MAJOR}.${PYBIND11_VERSION_MINOR}.${PYBIND11_VERSION_PATCH}\")\n\n# Standard includes\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\ninclude(CMakeDependentOption)\n\nif(NOT pybind11_FIND_QUIETLY)\n  message(STATUS \"pybind11 v${pybind11_VERSION} ${pybind11_VERSION_TYPE}\")\nendif()\n\n# Check if pybind11 is being used directly or via add_subdirectory\nif(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)\n  ### Warn if not an out-of-source builds\n  if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)\n    set(lines\n        \"You are building in-place. If that is not what you intended to \"\n        \"do, you can clean the source directory with:\\n\"\n        \"rm -r CMakeCache.txt CMakeFiles/ cmake_uninstall.cmake pybind11Config.cmake \"\n        \"pybind11ConfigVersion.cmake tests/CMakeFiles/\\n\")\n    message(AUTHOR_WARNING ${lines})\n  endif()\n\n  set(PYBIND11_MASTER_PROJECT ON)\n\n  message(STATUS \"CMake ${CMAKE_VERSION}\")\n\n  if(CMAKE_CXX_STANDARD)\n    set(CMAKE_CXX_EXTENSIONS OFF)\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\n  endif()\n\n  set(pybind11_system \"\")\n\n  set_property(GLOBAL PROPERTY USE_FOLDERS ON)\n  if(CMAKE_VERSION VERSION_LESS \"3.18\")\n    set(_pybind11_findpython_default OFF)\n  else()\n    set(_pybind11_findpython_default ON)\n  endif()\nelse()\n  set(PYBIND11_MASTER_PROJECT OFF)\n  set(pybind11_system SYSTEM)\n  set(_pybind11_findpython_default OFF)\nendif()\n\n# Options\noption(PYBIND11_INSTALL \"Install pybind11 header files?\" ${PYBIND11_MASTER_PROJECT})\noption(PYBIND11_TEST \"Build pybind11 test suite?\" ${PYBIND11_MASTER_PROJECT})\noption(PYBIND11_NOPYTHON \"Disable search for Python\" OFF)\noption(PYBIND11_DISABLE_HANDLE_TYPE_NAME_DEFAULT_IMPLEMENTATION\n       \"To enforce that a handle_type_name<> specialization exists\" OFF)\noption(PYBIND11_SIMPLE_GIL_MANAGEMENT\n       \"Use simpler GIL management logic that does not support disassociation\" OFF)\noption(PYBIND11_NUMPY_1_ONLY\n       \"Disable NumPy 2 support to avoid changes to previous pybind11 versions.\" OFF)\nset(PYBIND11_INTERNALS_VERSION\n    \"\"\n    CACHE STRING \"Override the ABI version, may be used to enable the unstable ABI.\")\noption(PYBIND11_USE_CROSSCOMPILING \"Respect CMAKE_CROSSCOMPILING\" OFF)\n\nif(PYBIND11_DISABLE_HANDLE_TYPE_NAME_DEFAULT_IMPLEMENTATION)\n  add_compile_definitions(PYBIND11_DISABLE_HANDLE_TYPE_NAME_DEFAULT_IMPLEMENTATION)\nendif()\nif(PYBIND11_SIMPLE_GIL_MANAGEMENT)\n  add_compile_definitions(PYBIND11_SIMPLE_GIL_MANAGEMENT)\nendif()\nif(PYBIND11_NUMPY_1_ONLY)\n  add_compile_definitions(PYBIND11_NUMPY_1_ONLY)\nendif()\n\ncmake_dependent_option(\n  USE_PYTHON_INCLUDE_DIR\n  \"Install pybind11 headers in Python include directory instead of default installation prefix\"\n  OFF \"PYBIND11_INSTALL\" OFF)\n\noption(PYBIND11_FINDPYTHON \"Force new FindPython\" ${_pybind11_findpython_default})\n\n# Allow PYTHON_EXECUTABLE if in FINDPYTHON mode and building pybind11's tests\n# (makes transition easier while we support both modes).\nif(PYBIND11_MASTER_PROJECT\n   AND PYBIND11_FINDPYTHON\n   AND DEFINED PYTHON_EXECUTABLE\n   AND NOT DEFINED Python_EXECUTABLE)\n  set(Python_EXECUTABLE \"${PYTHON_EXECUTABLE}\")\nendif()\n\n# NB: when adding a header don't forget to also add it to setup.py\nset(PYBIND11_HEADERS\n    include/pybind11/detail/class.h\n    include/pybind11/detail/common.h\n    include/pybind11/detail/cpp_conduit.h\n    include/pybind11/detail/descr.h\n    include/pybind11/detail/init.h\n    include/pybind11/detail/internals.h\n    include/pybind11/detail/type_caster_base.h\n    include/pybind11/detail/typeid.h\n    include/pybind11/detail/value_and_holder.h\n    include/pybind11/detail/exception_translation.h\n    include/pybind11/attr.h\n    include/pybind11/buffer_info.h\n    include/pybind11/cast.h\n    include/pybind11/chrono.h\n    include/pybind11/common.h\n    include/pybind11/complex.h\n    include/pybind11/conduit/pybind11_conduit_v1.h\n    include/pybind11/conduit/pybind11_platform_abi_id.h\n    include/pybind11/conduit/wrap_include_python_h.h\n    include/pybind11/options.h\n    include/pybind11/eigen.h\n    include/pybind11/eigen/common.h\n    include/pybind11/eigen/matrix.h\n    include/pybind11/eigen/tensor.h\n    include/pybind11/embed.h\n    include/pybind11/eval.h\n    include/pybind11/gil.h\n    include/pybind11/gil_safe_call_once.h\n    include/pybind11/iostream.h\n    include/pybind11/functional.h\n    include/pybind11/numpy.h\n    include/pybind11/operators.h\n    include/pybind11/pybind11.h\n    include/pybind11/pytypes.h\n    include/pybind11/stl.h\n    include/pybind11/stl_bind.h\n    include/pybind11/stl/filesystem.h\n    include/pybind11/type_caster_pyobject_ptr.h\n    include/pybind11/typing.h\n    include/pybind11/warnings.h)\n\n# Compare with grep and warn if mismatched\nif(PYBIND11_MASTER_PROJECT)\n  file(\n    GLOB_RECURSE _pybind11_header_check\n    LIST_DIRECTORIES false\n    RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\"\n    CONFIGURE_DEPENDS \"include/pybind11/*.h\")\n  set(_pybind11_here_only ${PYBIND11_HEADERS})\n  set(_pybind11_disk_only ${_pybind11_header_check})\n  list(REMOVE_ITEM _pybind11_here_only ${_pybind11_header_check})\n  list(REMOVE_ITEM _pybind11_disk_only ${PYBIND11_HEADERS})\n  if(_pybind11_here_only)\n    message(AUTHOR_WARNING \"PYBIND11_HEADERS has extra files:\" ${_pybind11_here_only})\n  endif()\n  if(_pybind11_disk_only)\n    message(AUTHOR_WARNING \"PYBIND11_HEADERS is missing files:\" ${_pybind11_disk_only})\n  endif()\nendif()\n\nlist(TRANSFORM PYBIND11_HEADERS PREPEND \"${CMAKE_CURRENT_SOURCE_DIR}/\")\n\n# Cache variable so this can be used in parent projects\nset(pybind11_INCLUDE_DIR\n    \"${CMAKE_CURRENT_LIST_DIR}/include\"\n    CACHE INTERNAL \"Directory where pybind11 headers are located\")\n\n# Backward compatible variable for add_subdirectory mode\nif(NOT PYBIND11_MASTER_PROJECT)\n  set(PYBIND11_INCLUDE_DIR\n      \"${pybind11_INCLUDE_DIR}\"\n      CACHE INTERNAL \"\")\nendif()\n\n# Note: when creating targets, you cannot use if statements at configure time -\n# you need generator expressions, because those will be placed in the target file.\n# You can also place ifs *in* the Config.in, but not here.\n\n# This section builds targets, but does *not* touch Python\n# Non-IMPORT targets cannot be defined twice\nif(NOT TARGET pybind11_headers)\n  # Build the headers-only target (no Python included):\n  # (long name used here to keep this from clashing in subdirectory mode)\n  add_library(pybind11_headers INTERFACE)\n  add_library(pybind11::pybind11_headers ALIAS pybind11_headers) # to match exported target\n  add_library(pybind11::headers ALIAS pybind11_headers) # easier to use/remember\n\n  target_include_directories(\n    pybind11_headers ${pybind11_system} INTERFACE $<BUILD_INTERFACE:${pybind11_INCLUDE_DIR}>\n                                                  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)\n\n  target_compile_features(pybind11_headers INTERFACE cxx_inheriting_constructors cxx_user_literals\n                                                     cxx_right_angle_brackets)\n  if(NOT \"${PYBIND11_INTERNALS_VERSION}\" STREQUAL \"\")\n    target_compile_definitions(\n      pybind11_headers INTERFACE \"PYBIND11_INTERNALS_VERSION=${PYBIND11_INTERNALS_VERSION}\")\n  endif()\nelse()\n  # It is invalid to install a target twice, too.\n  set(PYBIND11_INSTALL OFF)\nendif()\n\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/pybind11Common.cmake\")\n# https://github.com/jtojnar/cmake-snips/#concatenating-paths-when-building-pkg-config-files\n# TODO: cmake 3.20 adds the cmake_path() function, which obsoletes this snippet\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/JoinPaths.cmake\")\n\n# Relative directory setting\nif(USE_PYTHON_INCLUDE_DIR AND DEFINED Python_INCLUDE_DIRS)\n  file(RELATIVE_PATH CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX} ${Python_INCLUDE_DIRS})\nelseif(USE_PYTHON_INCLUDE_DIR AND DEFINED PYTHON_INCLUDE_DIR)\n  file(RELATIVE_PATH CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX} ${PYTHON_INCLUDE_DIRS})\nendif()\n\nif(PYBIND11_INSTALL)\n  install(DIRECTORY ${pybind11_INCLUDE_DIR}/pybind11 DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n  set(PYBIND11_CMAKECONFIG_INSTALL_DIR\n      \"${CMAKE_INSTALL_DATAROOTDIR}/cmake/${PROJECT_NAME}\"\n      CACHE STRING \"install path for pybind11Config.cmake\")\n\n  if(IS_ABSOLUTE \"${CMAKE_INSTALL_INCLUDEDIR}\")\n    set(pybind11_INCLUDEDIR \"${CMAKE_INSTALL_FULL_INCLUDEDIR}\")\n  else()\n    set(pybind11_INCLUDEDIR \"\\$\\{PACKAGE_PREFIX_DIR\\}/${CMAKE_INSTALL_INCLUDEDIR}\")\n  endif()\n\n  configure_package_config_file(\n    tools/${PROJECT_NAME}Config.cmake.in \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n    INSTALL_DESTINATION ${PYBIND11_CMAKECONFIG_INSTALL_DIR})\n\n  # CMake natively supports header-only libraries\n  write_basic_package_version_file(\n    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n    VERSION ${PROJECT_VERSION}\n    COMPATIBILITY AnyNewerVersion ARCH_INDEPENDENT)\n\n  install(\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\n          ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n          tools/FindPythonLibsNew.cmake\n          tools/pybind11Common.cmake\n          tools/pybind11Tools.cmake\n          tools/pybind11NewTools.cmake\n          tools/pybind11GuessPythonExtSuffix.cmake\n    DESTINATION ${PYBIND11_CMAKECONFIG_INSTALL_DIR})\n\n  if(NOT PYBIND11_EXPORT_NAME)\n    set(PYBIND11_EXPORT_NAME \"${PROJECT_NAME}Targets\")\n  endif()\n\n  install(TARGETS pybind11_headers EXPORT \"${PYBIND11_EXPORT_NAME}\")\n\n  install(\n    EXPORT \"${PYBIND11_EXPORT_NAME}\"\n    NAMESPACE \"pybind11::\"\n    DESTINATION ${PYBIND11_CMAKECONFIG_INSTALL_DIR})\n\n  # pkg-config support\n  if(NOT prefix_for_pc_file)\n    if(IS_ABSOLUTE \"${CMAKE_INSTALL_DATAROOTDIR}\")\n      set(prefix_for_pc_file \"${CMAKE_INSTALL_PREFIX}\")\n    else()\n      set(pc_datarootdir \"${CMAKE_INSTALL_DATAROOTDIR}\")\n      if(CMAKE_VERSION VERSION_LESS 3.20)\n        set(prefix_for_pc_file \"\\${pcfiledir}/..\")\n        while(pc_datarootdir)\n          get_filename_component(pc_datarootdir \"${pc_datarootdir}\" DIRECTORY)\n          string(APPEND prefix_for_pc_file \"/..\")\n        endwhile()\n      else()\n        cmake_path(RELATIVE_PATH CMAKE_INSTALL_PREFIX BASE_DIRECTORY CMAKE_INSTALL_DATAROOTDIR\n                   OUTPUT_VARIABLE prefix_for_pc_file)\n      endif()\n    endif()\n  endif()\n  join_paths(includedir_for_pc_file \"\\${prefix}\" \"${CMAKE_INSTALL_INCLUDEDIR}\")\n  configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/pybind11.pc.in\"\n                 \"${CMAKE_CURRENT_BINARY_DIR}/pybind11.pc\" @ONLY)\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/pybind11.pc\"\n          DESTINATION \"${CMAKE_INSTALL_DATAROOTDIR}/pkgconfig/\")\n\n  # Uninstall target\n  if(PYBIND11_MASTER_PROJECT)\n    configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/cmake_uninstall.cmake.in\"\n                   \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\" IMMEDIATE @ONLY)\n\n    add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P\n                                        ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)\n  endif()\nendif()\n\n# BUILD_TESTING takes priority, but only if this is the master project\nif(PYBIND11_MASTER_PROJECT AND DEFINED BUILD_TESTING)\n  if(BUILD_TESTING)\n    if(_pybind11_nopython)\n      message(FATAL_ERROR \"Cannot activate tests in NOPYTHON mode\")\n    else()\n      add_subdirectory(tests)\n    endif()\n  endif()\nelse()\n  if(PYBIND11_TEST)\n    if(_pybind11_nopython)\n      message(FATAL_ERROR \"Cannot activate tests in NOPYTHON mode\")\n    else()\n      add_subdirectory(tests)\n    endif()\n  endif()\nendif()\n\n# Better symmetry with find_package(pybind11 CONFIG) mode.\nif(NOT PYBIND11_MASTER_PROJECT)\n  set(pybind11_FOUND\n      TRUE\n      CACHE INTERNAL \"True if pybind11 and all required components found on the system\")\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.64453125,
          "content": "Copyright (c) 2016 Wenzel Jakob <wenzel.jakob@epfl.ch>, All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nPlease also refer to the file .github/CONTRIBUTING.md, which clarifies licensing of\nexternal contributions to this project including patches, pull requests, etc.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2412109375,
          "content": "prune tests\nrecursive-include pybind11/include/pybind11 *.h\nrecursive-include pybind11 *.py\nrecursive-include pybind11 py.typed\ninclude pybind11/share/cmake/pybind11/*.cmake\ninclude LICENSE README.rst SECURITY.md pyproject.toml setup.py setup.cfg\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 7.5556640625,
          "content": ".. figure:: https://github.com/pybind/pybind11/raw/master/docs/pybind11-logo.png\n   :alt: pybind11 logo\n\n**pybind11 — Seamless operability between C++11 and Python**\n\n|Latest Documentation Status| |Stable Documentation Status| |Gitter chat| |GitHub Discussions| |CI| |Build status|\n\n|Repology| |PyPI package| |Conda-forge| |Python Versions|\n\n`Setuptools example <https://github.com/pybind/python_example>`_\n• `Scikit-build example <https://github.com/pybind/scikit_build_example>`_\n• `CMake example <https://github.com/pybind/cmake_example>`_\n\n.. start\n\n\n**pybind11** is a lightweight header-only library that exposes C++ types\nin Python and vice versa, mainly to create Python bindings of existing\nC++ code. Its goals and syntax are similar to the excellent\n`Boost.Python <http://www.boost.org/doc/libs/1_58_0/libs/python/doc/>`_\nlibrary by David Abrahams: to minimize boilerplate code in traditional\nextension modules by inferring type information using compile-time\nintrospection.\n\nThe main issue with Boost.Python—and the reason for creating such a\nsimilar project—is Boost. Boost is an enormously large and complex suite\nof utility libraries that works with almost every C++ compiler in\nexistence. This compatibility has its cost: arcane template tricks and\nworkarounds are necessary to support the oldest and buggiest of compiler\nspecimens. Now that C++11-compatible compilers are widely available,\nthis heavy machinery has become an excessively large and unnecessary\ndependency.\n\nThink of this library as a tiny self-contained version of Boost.Python\nwith everything stripped away that isn't relevant for binding\ngeneration. Without comments, the core header files only require ~4K\nlines of code and depend on Python (3.8+, or PyPy) and the C++\nstandard library. This compact implementation was possible thanks to\nsome C++11 language features (specifically: tuples, lambda functions and\nvariadic templates). Since its creation, this library has grown beyond\nBoost.Python in many ways, leading to dramatically simpler binding code in many\ncommon situations.\n\nTutorial and reference documentation is provided at\n`pybind11.readthedocs.io <https://pybind11.readthedocs.io/en/latest>`_.\nA PDF version of the manual is available\n`here <https://pybind11.readthedocs.io/_/downloads/en/latest/pdf/>`_.\nAnd the source code is always available at\n`github.com/pybind/pybind11 <https://github.com/pybind/pybind11>`_.\n\n\nCore features\n-------------\n\n\npybind11 can map the following core C++ features to Python:\n\n- Functions accepting and returning custom data structures per value,\n  reference, or pointer\n- Instance methods and static methods\n- Overloaded functions\n- Instance attributes and static attributes\n- Arbitrary exception types\n- Enumerations\n- Callbacks\n- Iterators and ranges\n- Custom operators\n- Single and multiple inheritance\n- STL data structures\n- Smart pointers with reference counting like ``std::shared_ptr``\n- Internal references with correct reference counting\n- C++ classes with virtual (and pure virtual) methods can be extended\n  in Python\n- Integrated NumPy support (NumPy 2 requires pybind11 2.12+)\n\nGoodies\n-------\n\nIn addition to the core functionality, pybind11 provides some extra\ngoodies:\n\n- Python 3.8+, and PyPy3 7.3 are supported with an implementation-agnostic\n  interface (pybind11 2.9 was the last version to support Python 2 and 3.5).\n\n- It is possible to bind C++11 lambda functions with captured\n  variables. The lambda capture data is stored inside the resulting\n  Python function object.\n\n- pybind11 uses C++11 move constructors and move assignment operators\n  whenever possible to efficiently transfer custom data types.\n\n- It's easy to expose the internal storage of custom data types through\n  Pythons' buffer protocols. This is handy e.g. for fast conversion\n  between C++ matrix classes like Eigen and NumPy without expensive\n  copy operations.\n\n- pybind11 can automatically vectorize functions so that they are\n  transparently applied to all entries of one or more NumPy array\n  arguments.\n\n- Python's slice-based access and assignment operations can be\n  supported with just a few lines of code.\n\n- Everything is contained in just a few header files; there is no need\n  to link against any additional libraries.\n\n- Binaries are generally smaller by a factor of at least 2 compared to\n  equivalent bindings generated by Boost.Python. A recent pybind11\n  conversion of PyRosetta, an enormous Boost.Python binding project,\n  `reported <https://graylab.jhu.edu/Sergey/2016.RosettaCon/PyRosetta-4.pdf>`_\n  a binary size reduction of **5.4x** and compile time reduction by\n  **5.8x**.\n\n- Function signatures are precomputed at compile time (using\n  ``constexpr``), leading to smaller binaries.\n\n- With little extra effort, C++ types can be pickled and unpickled\n  similar to regular Python objects.\n\nSupported compilers\n-------------------\n\n1. Clang/LLVM 3.3 or newer (for Apple Xcode's clang, this is 5.0.0 or\n   newer)\n2. GCC 4.8 or newer\n3. Microsoft Visual Studio 2017 or newer\n4. Intel classic C++ compiler 18 or newer (ICC 20.2 tested in CI)\n5. Cygwin/GCC (previously tested on 2.5.1)\n6. NVCC (CUDA 11.0 tested in CI)\n7. NVIDIA PGI (20.9 tested in CI)\n\nAbout\n-----\n\nThis project was created by `Wenzel\nJakob <http://rgl.epfl.ch/people/wjakob>`_. Significant features and/or\nimprovements to the code were contributed by Jonas Adler, Lori A. Burns,\nSylvain Corlay, Eric Cousineau, Aaron Gokaslan, Ralf Grosse-Kunstleve, Trent Houliston, Axel\nHuebl, @hulucc, Yannick Jadoul, Sergey Lyskov, Johan Mabille, Tomasz Miąsko,\nDean Moldovan, Ben Pritchard, Jason Rhinelander, Boris Schäling, Pim\nSchellart, Henry Schreiner, Ivan Smirnov, Boris Staletic, and Patrick Stewart.\n\nWe thank Google for a generous financial contribution to the continuous\nintegration infrastructure used by this project.\n\n\nContributing\n~~~~~~~~~~~~\n\nSee the `contributing\nguide <https://github.com/pybind/pybind11/blob/master/.github/CONTRIBUTING.md>`_\nfor information on building and contributing to pybind11.\n\nLicense\n~~~~~~~\n\npybind11 is provided under a BSD-style license that can be found in the\n`LICENSE <https://github.com/pybind/pybind11/blob/master/LICENSE>`_\nfile. By using, distributing, or contributing to this project, you agree\nto the terms and conditions of this license.\n\n.. |Latest Documentation Status| image:: https://readthedocs.org/projects/pybind11/badge?version=latest\n   :target: http://pybind11.readthedocs.org/en/latest\n.. |Stable Documentation Status| image:: https://img.shields.io/badge/docs-stable-blue.svg\n   :target: http://pybind11.readthedocs.org/en/stable\n.. |Gitter chat| image:: https://img.shields.io/gitter/room/gitterHQ/gitter.svg\n   :target: https://gitter.im/pybind/Lobby\n.. |CI| image:: https://github.com/pybind/pybind11/workflows/CI/badge.svg\n   :target: https://github.com/pybind/pybind11/actions\n.. |Build status| image:: https://ci.appveyor.com/api/projects/status/riaj54pn4h08xy40?svg=true\n   :target: https://ci.appveyor.com/project/wjakob/pybind11\n.. |PyPI package| image:: https://img.shields.io/pypi/v/pybind11.svg\n   :target: https://pypi.org/project/pybind11/\n.. |Conda-forge| image:: https://img.shields.io/conda/vn/conda-forge/pybind11.svg\n   :target: https://github.com/conda-forge/pybind11-feedstock\n.. |Repology| image:: https://repology.org/badge/latest-versions/python:pybind11.svg\n   :target: https://repology.org/project/python:pybind11/versions\n.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/pybind11.svg\n   :target: https://pypi.org/project/pybind11/\n.. |GitHub Discussions| image:: https://img.shields.io/static/v1?label=Discussions&message=Ask&color=blue&logo=github\n   :target: https://github.com/pybind/pybind11/discussions\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.671875,
          "content": "# Security Policy\n\n## Supported Versions\n\nSecurity updates are applied only to the latest release.\n\n## Reporting a Vulnerability\n\nIf you have discovered a security vulnerability in this project, please report it privately. **Do not disclose it as a public issue.** This gives us time to work with you to fix the issue before public exposure, reducing the chance that the exploit will be used before a patch is released.\n\nPlease disclose it at [security advisory](https://github.com/pybind/pybind11/security/advisories/new).\n\nThis project is maintained by a team of volunteers on a reasonable-effort basis. As such, please give us at least 90 days to work on a fix before public exposure.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "noxfile.py",
          "type": "blob",
          "size": 2.8291015625,
          "content": "from __future__ import annotations\n\nimport argparse\n\nimport nox\n\nnox.needs_version = \">=2024.3.2\"\nnox.options.sessions = [\"lint\", \"tests\", \"tests_packaging\"]\nnox.options.default_venv_backend = \"uv|virtualenv\"\n\n\n@nox.session(reuse_venv=True)\ndef lint(session: nox.Session) -> None:\n    \"\"\"\n    Lint the codebase (except for clang-format/tidy).\n    \"\"\"\n    session.install(\"pre-commit\")\n    session.run(\"pre-commit\", \"run\", \"-a\", *session.posargs)\n\n\n@nox.session\ndef tests(session: nox.Session) -> None:\n    \"\"\"\n    Run the tests (requires a compiler).\n    \"\"\"\n    tmpdir = session.create_tmp()\n    session.install(\"cmake\")\n    session.install(\"-r\", \"tests/requirements.txt\")\n    session.run(\n        \"cmake\",\n        \"-S.\",\n        f\"-B{tmpdir}\",\n        \"-DPYBIND11_WERROR=ON\",\n        \"-DDOWNLOAD_CATCH=ON\",\n        \"-DDOWNLOAD_EIGEN=ON\",\n        *session.posargs,\n    )\n    session.run(\"cmake\", \"--build\", tmpdir)\n    session.run(\"cmake\", \"--build\", tmpdir, \"--config=Release\", \"--target\", \"check\")\n\n\n@nox.session\ndef tests_packaging(session: nox.Session) -> None:\n    \"\"\"\n    Run the packaging tests.\n    \"\"\"\n\n    session.install(\"-r\", \"tests/requirements.txt\", \"pip\")\n    session.run(\"pytest\", \"tests/extra_python_package\", *session.posargs)\n\n\n@nox.session(reuse_venv=True)\ndef docs(session: nox.Session) -> None:\n    \"\"\"\n    Build the docs. Pass --non-interactive to avoid serving.\n    \"\"\"\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"-b\", dest=\"builder\", default=\"html\", help=\"Build target (default: html)\"\n    )\n    args, posargs = parser.parse_known_args(session.posargs)\n    serve = args.builder == \"html\" and session.interactive\n\n    extra_installs = [\"sphinx-autobuild\"] if serve else []\n    session.install(\"-r\", \"docs/requirements.txt\", *extra_installs)\n    session.chdir(\"docs\")\n\n    shared_args = (\n        \"-n\",  # nitpicky mode\n        \"-T\",  # full tracebacks\n        f\"-b={args.builder}\",\n        \".\",\n        f\"_build/{args.builder}\",\n        *posargs,\n    )\n\n    if serve:\n        session.run(\n            \"sphinx-autobuild\", \"--open-browser\", \"--ignore=.build\", *shared_args\n        )\n    else:\n        session.run(\"sphinx-build\", \"--keep-going\", *shared_args)\n\n\n@nox.session(reuse_venv=True)\ndef make_changelog(session: nox.Session) -> None:\n    \"\"\"\n    Inspect the closed issues and make entries for a changelog.\n    \"\"\"\n    session.install(\"ghapi\", \"rich\")\n    session.run(\"python\", \"tools/make_changelog.py\")\n\n\n@nox.session(reuse_venv=True)\ndef build(session: nox.Session) -> None:\n    \"\"\"\n    Build SDists and wheels.\n    \"\"\"\n\n    session.install(\"build\")\n    session.log(\"Building normal files\")\n    session.run(\"python\", \"-m\", \"build\", *session.posargs)\n    session.log(\"Building pybind11-global files (PYBIND11_GLOBAL_SDIST=1)\")\n    session.run(\n        \"python\", \"-m\", \"build\", *session.posargs, env={\"PYBIND11_GLOBAL_SDIST\": \"1\"}\n    )\n"
        },
        {
          "name": "pybind11",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.955078125,
          "content": "[build-system]\nrequires = [\"setuptools>=42\", \"cmake>=3.18\", \"ninja\"]\nbuild-backend = \"setuptools.build_meta\"\n\n\n[tool.check-manifest]\nignore = [\n    \"tests/**\",\n    \"docs/**\",\n    \"tools/**\",\n    \"include/**\",\n    \".*\",\n    \"pybind11/include/**\",\n    \"pybind11/share/**\",\n    \"CMakeLists.txt\",\n    \"noxfile.py\",\n]\n\n\n[tool.mypy]\nfiles = [\"pybind11\"]\npython_version = \"3.8\"\nstrict = true\nenable_error_code = [\"ignore-without-code\", \"redundant-expr\", \"truthy-bool\"]\nwarn_unreachable = true\n\n[[tool.mypy.overrides]]\nmodule = [\"ghapi.*\"]\nignore_missing_imports = true\n\n\n[tool.pylint]\nmaster.py-version = \"3.8\"\nreports.output-format = \"colorized\"\nmessages_control.disable = [\n  \"design\",\n  \"fixme\",\n  \"imports\",\n  \"line-too-long\",\n  \"imports\",\n  \"invalid-name\",\n  \"protected-access\",\n  \"missing-module-docstring\",\n  \"unused-argument\",  # covered by Ruff ARG\n]\n\n[tool.ruff]\ntarget-version = \"py38\"\nsrc = [\"src\"]\n\n[tool.ruff.lint]\nextend-select = [\n  \"B\",           # flake8-bugbear\n  \"I\",           # isort\n  \"N\",           # pep8-naming\n  \"ARG\",         # flake8-unused-arguments\n  \"C4\",          # flake8-comprehensions\n  \"EM\",          # flake8-errmsg\n  \"ICN\",         # flake8-import-conventions\n  \"PGH\",         # pygrep-hooks\n  \"PIE\",         # flake8-pie\n  \"PL\",          # pylint\n  \"PT\",          # flake8-pytest-style\n  \"RET\",         # flake8-return\n  \"RUF100\",      # Ruff-specific\n  \"SIM\",         # flake8-simplify\n  \"UP\",          # pyupgrade\n  \"YTT\",         # flake8-2020\n]\nignore = [\n  \"PLR\",    # Design related pylint\n  \"E501\",   # Line too long (Black is enough)\n  \"PT011\",  # Too broad with raises in pytest\n  \"SIM118\", # iter(x) is not always the same as iter(x.keys())\n]\nunfixable = [\"T20\"]\nisort.known-first-party = [\"env\", \"pybind11_cross_module_tests\", \"pybind11_tests\"]\nisort.required-imports = [\"from __future__ import annotations\"]\n\n\n[tool.ruff.lint.per-file-ignores]\n\"tests/**\" = [\"EM\", \"N\", \"E721\"]\n\"tests/test_call_policies.py\" = [\"PLC1901\"]\n\n[tool.repo-review]\nignore = [\"PP\"]\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.419921875,
          "content": "[metadata]\nlong_description = file: README.rst\nlong_description_content_type = text/x-rst\ndescription = Seamless operability between C++11 and Python\nauthor = Wenzel Jakob\nauthor_email = wenzel.jakob@epfl.ch\nurl = https://github.com/pybind/pybind11\nlicense = BSD\n\nclassifiers =\n    Development Status :: 5 - Production/Stable\n    Intended Audience :: Developers\n    Topic :: Software Development :: Libraries :: Python Modules\n    Topic :: Utilities\n    Programming Language :: C++\n    Programming Language :: Python :: 3 :: Only\n    Programming Language :: Python :: 3.8\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: 3.11\n    Programming Language :: Python :: 3.12\n    Programming Language :: Python :: 3.13\n    License :: OSI Approved :: BSD License\n    Programming Language :: Python :: Implementation :: PyPy\n    Programming Language :: Python :: Implementation :: CPython\n    Programming Language :: C++\n    Topic :: Software Development :: Libraries :: Python Modules\n\nkeywords =\n    C++11\n    Python bindings\n\nproject_urls =\n    Documentation = https://pybind11.readthedocs.io/\n    Bug Tracker = https://github.com/pybind/pybind11/issues\n    Discussions = https://github.com/pybind/pybind11/discussions\n    Changelog = https://pybind11.readthedocs.io/en/latest/changelog.html\n    Chat = https://gitter.im/pybind/Lobby\n\n[options]\npython_requires = >=3.8\nzip_safe = False\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.767578125,
          "content": "#!/usr/bin/env python3\n\n# Setup script for PyPI; use CMakeFile.txt to build extension modules\nfrom __future__ import annotations\n\nimport contextlib\nimport os\nimport re\nimport shutil\nimport string\nimport subprocess\nimport sys\nfrom collections.abc import Generator\nfrom pathlib import Path\nfrom tempfile import TemporaryDirectory\n\nimport setuptools.command.sdist\n\nDIR = Path(__file__).parent.absolute()\nVERSION_REGEX = re.compile(\n    r\"^\\s*#\\s*define\\s+PYBIND11_VERSION_([A-Z]+)\\s+(.*)$\", re.MULTILINE\n)\nVERSION_FILE = Path(\"pybind11/_version.py\")\nCOMMON_FILE = Path(\"include/pybind11/detail/common.h\")\n\n\ndef build_expected_version_hex(matches: dict[str, str]) -> str:\n    patch_level_serial = matches[\"PATCH\"]\n    serial = None\n    major = int(matches[\"MAJOR\"])\n    minor = int(matches[\"MINOR\"])\n    flds = patch_level_serial.split(\".\")\n    if flds:\n        patch = int(flds[0])\n        if len(flds) == 1:\n            level = \"0\"\n            serial = 0\n        elif len(flds) == 2:\n            level_serial = flds[1]\n            for level in (\"a\", \"b\", \"c\", \"dev\"):\n                if level_serial.startswith(level):\n                    serial = int(level_serial[len(level) :])\n                    break\n    if serial is None:\n        msg = f'Invalid PYBIND11_VERSION_PATCH: \"{patch_level_serial}\"'\n        raise RuntimeError(msg)\n    version_hex_str = f\"{major:02x}{minor:02x}{patch:02x}{level[:1]}{serial:x}\"\n    return f\"0x{version_hex_str.upper()}\"\n\n\n# PYBIND11_GLOBAL_SDIST will build a different sdist, with the python-headers\n# files, and the sys.prefix files (CMake and headers).\n\nglobal_sdist = os.environ.get(\"PYBIND11_GLOBAL_SDIST\", False)\n\nsetup_py = Path(\n    \"tools/setup_global.py.in\" if global_sdist else \"tools/setup_main.py.in\"\n)\nextra_cmd = 'cmdclass[\"sdist\"] = SDist\\n'\n\nto_src = (\n    (Path(\"pyproject.toml\"), Path(\"tools/pyproject.toml\")),\n    (Path(\"setup.py\"), setup_py),\n)\n\n\n# Read the listed version\nloc: dict[str, str] = {}\ncode = compile(VERSION_FILE.read_text(encoding=\"utf-8\"), \"pybind11/_version.py\", \"exec\")\nexec(code, loc)\nversion = loc[\"__version__\"]\n\n# Verify that the version matches the one in C++\nmatches = dict(VERSION_REGEX.findall(COMMON_FILE.read_text(encoding=\"utf8\")))\ncpp_version = \"{MAJOR}.{MINOR}.{PATCH}\".format(**matches)\nif version != cpp_version:\n    msg = f\"Python version {version} does not match C++ version {cpp_version}!\"\n    raise RuntimeError(msg)\n\nversion_hex = matches.get(\"HEX\", \"MISSING\")\nexp_version_hex = build_expected_version_hex(matches)\nif version_hex != exp_version_hex:\n    msg = f\"PYBIND11_VERSION_HEX {version_hex} does not match expected value {exp_version_hex}!\"\n    raise RuntimeError(msg)\n\n\n# TODO: use literals & overload (typing extensions or Python 3.8)\ndef get_and_replace(filename: Path, binary: bool = False, **opts: str) -> bytes | str:\n    if binary:\n        contents = filename.read_bytes()\n        return string.Template(contents.decode()).substitute(opts).encode()\n\n    return string.Template(filename.read_text()).substitute(opts)\n\n\n# Use our input files instead when making the SDist (and anything that depends\n# on it, like a wheel)\nclass SDist(setuptools.command.sdist.sdist):\n    def make_release_tree(self, base_dir: str, files: list[str]) -> None:\n        super().make_release_tree(base_dir, files)\n\n        for to, src in to_src:\n            txt = get_and_replace(src, binary=True, version=version, extra_cmd=\"\")\n\n            dest = Path(base_dir) / to\n\n            # This is normally linked, so unlink before writing!\n            dest.unlink()\n            dest.write_bytes(txt)  # type: ignore[arg-type]\n\n\n# Remove the CMake install directory when done\n@contextlib.contextmanager\ndef remove_output(*sources: str) -> Generator[None, None, None]:\n    try:\n        yield\n    finally:\n        for src in sources:\n            shutil.rmtree(src)\n\n\nwith remove_output(\"pybind11/include\", \"pybind11/share\"):\n    # Generate the files if they are not present.\n    with TemporaryDirectory() as tmpdir:\n        cmd = [\"cmake\", \"-S\", \".\", \"-B\", tmpdir] + [\n            \"-DCMAKE_INSTALL_PREFIX=pybind11\",\n            \"-DBUILD_TESTING=OFF\",\n            \"-DPYBIND11_NOPYTHON=ON\",\n            \"-Dprefix_for_pc_file=${pcfiledir}/../../\",\n        ]\n        if \"CMAKE_ARGS\" in os.environ:\n            fcommand = [\n                c\n                for c in os.environ[\"CMAKE_ARGS\"].split()\n                if \"DCMAKE_INSTALL_PREFIX\" not in c\n            ]\n            cmd += fcommand\n        subprocess.run(cmd, check=True, cwd=DIR, stdout=sys.stdout, stderr=sys.stderr)\n        subprocess.run(\n            [\"cmake\", \"--install\", tmpdir],\n            check=True,\n            cwd=DIR,\n            stdout=sys.stdout,\n            stderr=sys.stderr,\n        )\n\n    txt = get_and_replace(setup_py, version=version, extra_cmd=extra_cmd)\n    code = compile(txt, setup_py, \"exec\")\n    exec(code, {\"SDist\": SDist})\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}