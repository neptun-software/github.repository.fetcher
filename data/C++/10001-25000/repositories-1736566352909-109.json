{
  "metadata": {
    "timestamp": 1736566352909,
    "page": 109,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "transmission/transmission",
      "stars": 12515,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.9296875,
          "content": "---\nAlignAfterOpenBracket: AlwaysBreak\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignConsecutiveMacros: false\nAlignEscapedNewlines: DontAlign\nAlignOperands: false\nAlignTrailingComments: false\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLambdasOnASingleLine: Inline\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakBeforeMultilineStrings: true\nBinPackArguments: false\nBinPackParameters: false\nBreakBeforeBraces: Allman\nBreakBeforeTernaryOperators: false\nBreakStringLiterals: false\nColumnLimit: 128\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nExperimentalAutoDetectBinPacking: false\nIndentCaseBlocks: true\nIndentPPDirectives: None\nIndentWidth: 4\nMaxEmptyLinesToKeep: 1\nPenaltyBreakAssignment: 1000\nPenaltyBreakBeforeFirstCallParameter: 0\nPenaltyReturnTypeOnItsOwnLine: 1000\nPointerAlignment: Left\nReflowComments: false\nSortIncludes: Never\nSpaceAfterCStyleCast: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: Never\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nTabWidth: 4\nUseTab: Never\n---\nLanguage: Cpp\nStandard: c++17\n\nAccessModifierOffset: -4\nPackConstructorInitializers: Never\nAlwaysBreakAfterReturnType: None\nAlwaysBreakTemplateDeclarations: Yes\nBreakConstructorInitializers: BeforeComma\nBreakInheritanceList: BeforeComma\nConstructorInitializerIndentWidth: 4\nFixNamespaceComments: true\nIndentGotoLabels: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nQualifierAlignment: Right\nSortUsingDeclarations: true # Since clang-format 16, the equivalent value is LexicographicNumeric\nSpaceAfterTemplateKeyword: false\n---\nLanguage: ObjC\n\nKeepEmptyLinesAtTheStartOfBlocks: false\nObjCBlockIndentWidth: 4\nObjCBreakBeforeNestedBlockParam: false\nObjCSpaceBeforeProtocolList: false\nPenaltyExcessCharacter: 1\nQualifierAlignment: Right\n"
        },
        {
          "name": ".clang-format-ignore",
          "type": "blob",
          "size": 0.3154296875,
          "content": "# Skipped files must be justified as untracked or third-party maintained\n\n# untracked files\n.*/*\nbuild/*\ncmake-build-*/*\nlibtransmission/version.h\nweb/node_modules/*\n\n# android\nandroid/*\n\n# third-party maintained projects\nthird-party/*\n\n# maintained at https://github.com/sparkle-project/Sparkle\nmacosx/Sparkle.framework/*\n"
        },
        {
          "name": ".clang-format-include",
          "type": "blob",
          "size": 0.021484375,
          "content": "*.c\n*.cc\n*.h\n*.m\n*.mm\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6630859375,
          "content": ".idea\n.vscode\n.DS_Store\n\n/beta\n/build\nTransmission.xcodeproj/*.xcworkspace\nTransmission.xcodeproj/xcuserdata\n/cli/transmissioncli\n/daemon/transmission-daemon\n/daemon/transmission-proxy\n/daemon/transmission-remote\n/gtk/defines.h\n/gtk/transmission-gtk\n/libtransmission/*.a\n/libtransmission/version.h\n/macosx/Info.plist\n/macosx/**/*~.nib\nnode_modules/\n/po/*.mo\n/REVISION\n/tests/**/*.out\n/third-party/miniupnp/miniupnpcstrings.h\n/third-party/suffixes_dafsa.h\n/web/public_html/transmission-app.js.map\n/android/.cxx\n/android/.gradle\n/android/build\n\n# clangd compile commands\ncompile_commands.json\n\n# CLion IDE build directory\n/cmake-build-*/\n\n# CMake user presets\nCMakeUserPresets.json"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 2.548828125,
          "content": "[submodule \"third-party/dht\"]\n\tpath = third-party/dht\n\turl = https://github.com/transmission/dht.git\n\tbranch = post-0.27-transmission\n[submodule \"third-party/libb64\"]\n\tpath = third-party/libb64\n\turl = https://github.com/transmission/libb64.git\n\tbranch = post-1.2.1-transmission\n[submodule \"third-party/libevent\"]\n\tpath = third-party/libevent\n\turl = https://github.com/transmission/libevent.git\n\tbranch = post-2.0.22-transmission\n[submodule \"third-party/libnatpmp\"]\n\tpath = third-party/libnatpmp\n\turl = https://github.com/transmission/libnatpmp.git\n\tbranch = post-20151025-transmission\n[submodule \"third-party/libutp\"]\n\tpath = third-party/libutp\n\turl = https://github.com/transmission/libutp.git\n\tbranch = post-3.4-transmission\n[submodule \"third-party/miniupnp\"]\n\tpath = third-party/miniupnp\n\t# synced with https://github.com/miniupnp/miniupnp.git\n\turl = https://github.com/transmission/miniupnp.git\n[submodule \"third-party/googletest\"]\n\tpath = third-party/googletest\n\turl = https://github.com/google/googletest.git\n[submodule \"third-party/utfcpp\"]\n\tpath = third-party/utfcpp\n\t# synced with https://github.com/nemtrif/utfcpp.git\n\turl = https://github.com/transmission/utfcpp.git\n[submodule \"third-party/libdeflate\"]\n\tpath = third-party/libdeflate\n\t# synced with https://github.com/ebiggers/libdeflate.git\n\turl = https://github.com/transmission/libdeflate.git\n[submodule \"third-party/libpsl\"]\n\tpath = third-party/libpsl\n\turl = https://github.com/transmission/libpsl.git\n\tbranch = post-3.0.0-transmission\n[submodule \"third-party/fmt\"]\n\tpath = third-party/fmt\n\t# synced with https://github.com/fmtlib/fmt.git\n\turl = https://github.com/transmission/fmt.git\n[submodule \"third-party/fast_float\"]\n\tpath = third-party/fast_float\n\t# synced with https://github.com/fastfloat/fast_float.git\n\turl = https://github.com/transmission/fast_float.git\n[submodule \"third-party/wide-integer\"]\n\tpath = third-party/wide-integer\n\t# synced with https://github.com/ckormanyos/wide-integer.git\n\turl = https://github.com/transmission/wide-integer.git\n[submodule \"third-party/small\"]\n\tpath = third-party/small\n\t# synced with https://github.com/alandefreitas/small.git\n\turl = https://github.com/transmission/small.git\n[submodule \"third-party/rapidjson\"]\n\tpath = third-party/rapidjson\n\t# synced with https://github.com/Tencent/rapidjson.git\n\turl = https://github.com/transmission/rapidjson.git\n\tfetchRecurseSubmodules = false\n[submodule \"third-party/rpavlik-cmake-modules\"]\n\tpath = third-party/rpavlik-cmake-modules\n\t# synced with https://github.com/rpavlik/cmake-modules.git\n\turl = https://github.com/transmission/rpavlik-cmake-modules.git\n"
        },
        {
          "name": ".tx",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 3.26171875,
          "content": "The Transmission Project\nhttps://transmissionbt.com/\n\nMaintainers\n  Charles Kerr (@ckerr) (libtransmission, Qt client, utils)\n  Mike Gelfand (@mikedld) (GTK client, scripts & tooling)\n  Mitchell Livingston (@livings124) (macOS client)\n\nContributor Team\n  Derek Reiff (@dareiff) (Web client)\n  Dmitry Serov (@DevilDimon) (macOS client)\n  Dzmitry Neviadomski (@nevack) (macOS client)\n  FX Coudert (@fxcoudert) (macOS client)\n  John Clay (@JohnClay)\n  SweetP Pro (@sweetppro) (macOS client)\n  Yat Ho (@tearfur) (libtransmission)\n\nHall of Fame\n  Eric Petit (@titer) (Project originator)\n  Josh Elsasser (Daemon, Backend, GTK client)\n  Juliusz Chroboczek (DHT, network code)\n  Bryan Varner (BeOS client)\n  Malcolm Jarvis (Web client)\n  Kendall Hopkins <SoftwareElves@gmail.com> (Web client)\n  Kevin Glowacz <kjg@transmissionbt.com> (Web client)\n\nStarting with Transmission 4.0.0, contributors are credited in each\nrelease's notes so that repeat contributions receive repeat shout-outs.\nPlease see news/ for these credits!\n\nThese people contributed to the project before Transmission 4:\n\n  Aleksej Lebedev, Alexander Futekov, Alexandre Jouandin, Andreas Nilsson,\n  Balázs Meskó, Bernard Spil, Bogdan Vasiliev, Bruno Bierbaumer,\n  Bryan Varner, Carles Pastor Badosa, Carl Michael Skog, Charles Kerr,\n  Christian Muehlhaeuser, Chris Young, Chuan Zhang, Clément Fauchereau,\n  Cœur, Colin B, Craig Andrews, C.W. Betts, Daniel Kamil Kozar, Daniel Lee,\n  Daniil Subbotin, Dan Walters, David Beinder, David Miguel Susano Pinto,\n  Dean Ostetto, Derek Reiff, Dhiru Kholia, Diego Jiménez, Dinesh Manajipet,\n  Dmitry Antipov, Dmitry Serov, Dmytro Lytovchenko, Duncan Beevers,\n  Dzmitry Neviadomski, Edward Betts, Erick Turnquist, Eric Petit, Esa Varemo,\n  Federico Bond, Federico Scodelaro, Frank Aurich, FX Coudert, Gary Elshaw,\n  Greg Hazel, Guido Cella, Guido Vranken, Hakjoon Sim, Han Shen,\n  Herman Semenov, Hugo van Heuven, Ilkka Kallioniemi, Ilya Chirkov,\n  Isabella Skořepová, Jakub Steiner, James \"Kibo\" Parry, Jan Weiß,\n  Jelle van der Waa, John Clay, Jonas Malaco, Jonas Rask, Josh Elsasser,\n  Juliusz Chroboczek, Kendall Hopkins, Kevin Glowacz, Kevin Stubbings,\n  Kirill Ovchinnikov, Lucas Clemente Vella, Luukas Pörtfors,\n  Maarten Van Coile, Maciej Wolny, Malcolm Jarvis, Mark Deepwell,\n  Markus Amalthea Magnuson, Matan Ziv-Av, Matt Joiner, Max Zettlmeißl,\n  Michael Lopez, Michael Skree, Michal Kubiak, Mike Gelfand, Mike Gilbert,\n  Mingye Wang, Mitch Livingston, Mukund Sivaraman, Nathan Benichou,\n  Nicholas Guriev, Niklas Haas, Norbert Papke, Oleg Chashko, Pavel Borzenkov,\n  Pavel Shlyak, Pedro Scarapicchia Junior, Peter Bailey, Peter Dave Hello,\n  Pierre Carru, Piotr Drąg, Rahim Nathwani, Rashid Eissing, Reed Morrison,\n  Rick Patrick, Robert Palmer, Robert Vehse, Robin Seth Ekman, Rodger Werner,\n  Rosen Penev, Sam Marcus, Sam Thursfield, Sander van Kasteel,\n  Sebastiaan Lokhorst, Sebastian Andrzej Siewior, Sebastian Jensen,\n  Sergey Fedoseev, Simon Wells, Stefan Talpalaru, Ștefan Talpalaru,\n  Sven Depondt, Szepesi Tibor, Tavis Ormandy, Thomas Hines, Tomas Carnecky,\n  Tomáš Kelemen, Tom Forbes, Tom Richards, Viacheslav Chimishuk,\n  Vincent Vinel, Vitaly Potyarkin, Waldemar Brodkorb, Will Thompson,\n  Yaron Shahrabani, Yuze Jiang, and Zachary J. Slater.\n\nIf anyone is missing from this list, please let us know!\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 27.8955078125,
          "content": "cmake_minimum_required(VERSION 3.12 FATAL_ERROR)\n\nif(POLICY CMP0092)\n    cmake_policy(SET CMP0092 NEW)\nendif()\nif(POLICY CMP0114)\n    cmake_policy(SET CMP0114 NEW)\nendif()\n\n# Value should follow latest stable Xcode's RECOMMENDED_MACOSX_DEPLOYMENT_TARGET\nset(MACOS_SUPPORT_MINIMUM 11.0)\n\n# The value of this variable should be set prior to the first project() command invocation.\n# See: https://cmake.org/cmake/help/latest/variable/CMAKE_OSX_DEPLOYMENT_TARGET.html\nif(NOT CMAKE_OSX_DEPLOYMENT_TARGET)\n    set(CMAKE_OSX_DEPLOYMENT_TARGET ${MACOS_SUPPORT_MINIMUM}\n        CACHE STRING \"Minimum macOS version to target for deployment\"\n        FORCE)\nendif()\n\nif(VCPKG_TARGET_ANDROID)\n    include(cmake/VcpkgAndroid.cmake)\nendif()\n\nproject(transmission)\n\nset(TR_THIRD_PARTY_DIR_NAME third-party)\nset(TR_THIRD_PARTY_SOURCE_DIR ${PROJECT_SOURCE_DIR}/${TR_THIRD_PARTY_DIR_NAME})\nset(TR_THIRD_PARTY_BINARY_DIR ${PROJECT_BINARY_DIR}/${TR_THIRD_PARTY_DIR_NAME})\n\nlist(APPEND CMAKE_MODULE_PATH\n    \"${PROJECT_SOURCE_DIR}/cmake\"\n    \"${TR_THIRD_PARTY_SOURCE_DIR}/rpavlik-cmake-modules\")\n\nset(CMAKE_MACOSX_RPATH ON)\n\ninclude(CheckIncludeFile)\ninclude(CheckIncludeFiles)\ninclude(CheckFunctionExists)\ninclude(CheckLibraryExists)\ninclude(ExternalProject)\ninclude(GNUInstallDirs)\ninclude(TrMacros)\n\nset(CURL_MINIMUM 7.28.0)\nset(WOLFSSL_MINIMUM 3.4)\nset(DEFLATE_MINIMUM 1.7)\nset(EVENT2_MINIMUM 2.1.0)\nset(GIOMM_MINIMUM 2.26.0)\nset(GLIBMM_MINIMUM 2.60.0)\nset(GTKMM3_MINIMUM 3.24.0)\nset(GTKMM4_MINIMUM 4.11.1)\nset(OPENSSL_MINIMUM 1.1.0)\nset(MBEDTLS_MINIMUM 1.3)\nset(NPM_MINIMUM 8.1.307) # Node.js 14\nset(PSL_MINIMUM 0.21.1)\nset(QT_MINIMUM 5.6)\n\noption(ENABLE_DAEMON \"Build daemon\" ON)\ntr_auto_option(ENABLE_GTK \"Build GTK client\" AUTO)\ntr_auto_option(ENABLE_QT \"Build Qt client\" AUTO)\ntr_auto_option(ENABLE_MAC \"Build Mac client\" AUTO)\ntr_auto_option(REBUILD_WEB \"Rebuild the web client's generated assets. Requires Node.js and network access.\" OFF)\noption(INSTALL_WEB \"Install the web client's generated assets.\" ON)\noption(ENABLE_UTILS \"Build utils (create, edit, show)\" ON)\noption(ENABLE_CLI \"Build command-line client\" OFF)\noption(ENABLE_TESTS \"Build unit tests\" ON)\noption(ENABLE_UTP \"Build µTP support\" ON)\noption(ENABLE_WERROR \"Treat warnings as errors\" OFF)\noption(ENABLE_NLS \"Enable native language support\" ON)\noption(INSTALL_DOC \"Build/install documentation\" ON)\noption(INSTALL_LIB \"Install the library\" OFF)\ntr_auto_option(ENABLE_DEPRECATED \"Allow deprecated API use of upstream packages, e.g. GTK\" AUTO)\ntr_auto_option(RUN_CLANG_TIDY \"Run clang-tidy on the code\" AUTO)\ntr_auto_option(USE_SYSTEM_EVENT2 \"Use system event2 library\" AUTO)\ntr_auto_option(USE_SYSTEM_DEFLATE \"Use system deflate library\" AUTO)\ntr_auto_option(USE_SYSTEM_DHT \"Use system dht library\" AUTO)\ntr_auto_option(USE_SYSTEM_MINIUPNPC \"Use system miniupnpc library\" AUTO)\ntr_auto_option(USE_SYSTEM_NATPMP \"Use system natpmp library\" AUTO)\ntr_auto_option(USE_SYSTEM_UTP \"Use system utp library\" AUTO)\ntr_auto_option(USE_SYSTEM_B64 \"Use system b64 library\" AUTO)\ntr_auto_option(USE_SYSTEM_PSL \"Use system psl library\" AUTO)\ntr_list_option(USE_GTK_VERSION \"Use specific GTK version\" AUTO 3 4)\ntr_list_option(USE_QT_VERSION \"Use specific Qt version\" AUTO 5 6)\ntr_list_option(WITH_CRYPTO \"Use specified crypto library\" AUTO ccrypto mbedtls openssl wolfssl)\ntr_auto_option(WITH_INOTIFY \"Enable inotify support (on systems that support it)\" AUTO)\ntr_auto_option(WITH_KQUEUE \"Enable kqueue support (on systems that support it)\" AUTO)\ntr_auto_option(WITH_APPINDICATOR \"Use appindicator for system tray icon in GTK client (GTK+ 3 only)\" AUTO)\ntr_auto_option(WITH_SYSTEMD \"Add support for systemd startup notification (on systems that support it)\" AUTO)\n\nset(TR_NAME ${PROJECT_NAME})\n\n# major.minor.patch[-[beta.N.]dev]+commit_hash\n# dev builds come between releases, e.g. autobuilds from CI\n\n# these should be the only five lines you need to change\nset(TR_VERSION_MAJOR \"4\")\nset(TR_VERSION_MINOR \"1\")\nset(TR_VERSION_PATCH \"0\")\nset(TR_VERSION_BETA_NUMBER \"1\") # empty string for not beta\nset(TR_VERSION_DEV FALSE)\n\n# derived from above: release type\nif(TR_VERSION_DEV)\n    set(TR_NIGHTLY_RELEASE 1)\nelseif(NOT \"${TR_VERSION_BETA_NUMBER}\" STREQUAL \"\")\n    set(TR_BETA_RELEASE 1)\nelse()\n    set(TR_STABLE_RELEASE 1)\nendif()\n\n# derived from above: CFBundleVersion\n# note: CFBundleVersion only honors 3 numbers, so third number has to hold both patch and beta info.\n# 5.0.1-dev     -> 14719.0.100\n# 5.0.1-beta.1  -> 14719.0.101\n# 5.0.1         -> 14719.0.199\nmath(EXPR CFBUNDLE_1 \"${TR_VERSION_MAJOR} + 14714\")\nmath(EXPR CFBUNDLE_2 \"${TR_VERSION_MINOR}\")\nmath(EXPR CFBUNDLE_3 \"${TR_VERSION_PATCH} * 100 + 0${TR_STABLE_RELEASE} * 99 + 0${TR_VERSION_BETA_NUMBER}\")\nset(CFBUNDLE_VERSION \"${CFBUNDLE_1}.${CFBUNDLE_2}.${CFBUNDLE_3}\")\nunset(CFBUNDLE_1)\nunset(CFBUNDLE_2)\nunset(CFBUNDLE_3)\n\n# derived from above: semver version string. https://semver.org/\n# '4.0.0-beta.1'\n# '4.0.0-beta.1.dev' (a dev release between beta 1 and 2)\n# '4.0.0-beta.2'\n# '4.0.0'\nset(TR_SEMVER \"${TR_VERSION_MAJOR}.${TR_VERSION_MINOR}.${TR_VERSION_PATCH}\")\nif(TR_VERSION_DEV OR NOT \"${TR_VERSION_BETA_NUMBER}\" STREQUAL \"\")\n    string(APPEND TR_SEMVER \"-\")\n    if(NOT \"${TR_VERSION_BETA_NUMBER}\" STREQUAL \"\")\n        string(APPEND TR_SEMVER \"beta.${TR_VERSION_BETA_NUMBER}\")\n    endif()\n    if(TR_VERSION_DEV AND NOT \"${TR_VERSION_BETA_NUMBER}\" STREQUAL \"\")\n        string(APPEND TR_SEMVER \".\")\n    endif()\n    if(TR_VERSION_DEV)\n        string(APPEND TR_SEMVER \"dev\")\n    endif()\nendif()\nset(TR_USER_AGENT_PREFIX \"${TR_SEMVER}\")\n\n# derived from above: peer-id prefix. https://www.bittorrent.org/beps/bep_0020.html\n# chars 4, 5, 6 are major, minor, patch in https://en.wikipedia.org/wiki/Base62\n# char 7 is '0' for a stable release, 'B' for a beta release, or 'Z' for a dev build\n# '-TR400B-' (4.0.0 Beta)\n# '-TR400Z-' (4.0.0 Dev)\n# '-TR4000-' (4.0.0)\nset(TR_PEER_ID_PREFIX \"-TR\")\nset(BASE62 \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\")\nstring(SUBSTRING \"${BASE62}\" \"${TR_VERSION_MAJOR}\" 1 TMPSTR)\nstring(APPEND TR_PEER_ID_PREFIX \"${TMPSTR}\")\nstring(SUBSTRING \"${BASE62}\" \"${TR_VERSION_MINOR}\" 1 TMPSTR)\nstring(APPEND TR_PEER_ID_PREFIX \"${TMPSTR}\")\nstring(SUBSTRING \"${BASE62}\" \"${TR_VERSION_PATCH}\" 1 TMPSTR)\nstring(APPEND TR_PEER_ID_PREFIX \"${TMPSTR}\")\nif(TR_VERSION_DEV)\n    string(APPEND TR_PEER_ID_PREFIX \"Z\")\nelseif(NOT \"${TR_VERSION_BETA_NUMBER}\" STREQUAL \"\")\n    string(APPEND TR_PEER_ID_PREFIX \"B\")\nelse()\n    string(APPEND TR_PEER_ID_PREFIX \"0\")\nendif()\nstring(APPEND TR_PEER_ID_PREFIX \"-\")\n\nset(TR_VCS_REVISION_FILE \"${PROJECT_SOURCE_DIR}/REVISION\")\n\n## Compiler standard version\n\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_C_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nif(EXISTS ${PROJECT_SOURCE_DIR}/.git)\n    find_package(Git)\nendif()\n\nif(NOT \"$ENV{JENKINS_URL}\" STREQUAL \"\" AND NOT \"$ENV{GIT_COMMIT}\" STREQUAL \"\")\n    set(TR_VCS_REVISION \"$ENV{GIT_COMMIT}\")\nelseif(NOT \"$ENV{TEAMCITY_PROJECT_NAME}\" STREQUAL \"\" AND NOT \"$ENV{BUILD_VCS_NUMBER}\" STREQUAL \"\")\n    set(TR_VCS_REVISION \"$ENV{BUILD_VCS_NUMBER}\")\nelseif(GIT_FOUND)\n    include(GetGitRevisionDescription)\n    get_git_head_revision(TR_REFSPEC TR_VCS_REVISION)\n    unset(TR_REFSPEC)\nendif()\n\nif(\"${TR_VCS_REVISION}\" STREQUAL \"\" AND EXISTS \"${TR_VCS_REVISION_FILE}\")\n    file(READ \"${TR_VCS_REVISION_FILE}\" TR_VCS_REVISION)\nendif()\n\nstring(STRIP \"${TR_VCS_REVISION}\" TR_VCS_REVISION)\n\nif(NOT \"${TR_VCS_REVISION}\" STREQUAL \"\")\n    file(WRITE \"${TR_VCS_REVISION_FILE}\" \"${TR_VCS_REVISION}\\n\")\nelse()\n    set(TR_VCS_REVISION 0)\n    file(REMOVE \"${TR_VCS_REVISION_FILE}\")\nendif()\n\nstring(SUBSTRING \"${TR_VCS_REVISION}\" 0 10 TR_VCS_REVISION)\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\nif(WIN32)\n    foreach(L C CXX)\n        set(CMAKE_${L}_FLAGS \"${CMAKE_${L}_FLAGS} -DWIN32\")\n        # Target version (Vista and up)\n        set(CMAKE_${L}_FLAGS \"${CMAKE_${L}_FLAGS} -DWINVER=0x0600 -D_WIN32_WINNT=0x0600\")\n        # Use Unicode API (although we always use W or A names explicitly)\n        set(CMAKE_${L}_FLAGS \"${CMAKE_${L}_FLAGS} -DUNICODE -D_UNICODE\")\n        # Ignore various deprecation and security warnings (at least for now)\n        set(CMAKE_${L}_FLAGS \"${CMAKE_${L}_FLAGS} -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -D_SCL_SECURE_NO_WARNINGS -D_WINSOCK_DEPRECATED_NO_WARNINGS\")\n        if(MSVC)\n            # Set source file encoding and execution charset to UTF-8\n            set(CMAKE_${L}_FLAGS \"${CMAKE_${L}_FLAGS} /utf-8\")\n            # Reduce noise (at least for now)\n            set(CMAKE_${L}_FLAGS \"${CMAKE_${L}_FLAGS} /wd4244 /wd4267\")\n            # Make caching-friendly (store debug info inside object files)\n            foreach(T IN ITEMS ${CMAKE_CONFIGURATION_TYPES} ${CMAKE_BUILD_TYPE})\n                string(TOUPPER \"${T}\" T)\n                string(REGEX REPLACE \"[-/]Z[iI]\" \"-Z7\" CMAKE_${L}_FLAGS_${T} \"${CMAKE_${L}_FLAGS_${T}}\")\n            endforeach()\n        endif()\n\n        if(MINGW)\n            set(CMAKE_${L}_FLAGS \"${CMAKE_${L}_FLAGS} -D__USE_MINGW_ANSI_STDIO=1\")\n        endif()\n    endforeach()\nendif()\n\nset(CMAKE_FOLDER \"${TR_THIRD_PARTY_DIR_NAME}\")\n\nset(SOURCE_ICONS_DIR \"${PROJECT_SOURCE_DIR}/icons\")\n\nfind_package(FastFloat)\nfind_package(Fmt)\nfind_package(RapidJSON)\nfind_package(Small)\nfind_package(UtfCpp)\nfind_package(WideInteger)\n\nfind_package(Threads)\nfind_package(PkgConfig QUIET)\n\nfind_package(CURL ${CURL_MINIMUM} REQUIRED)\n\nif(ENABLE_DEPRECATED STREQUAL \"AUTO\")\n    if(DEFINED ENV{CI})\n        set(ENABLE_DEPRECATED OFF)\n    else()\n        set(ENABLE_DEPRECATED ON)\n    endif()\nendif()\n\nset(CRYPTO_PKG \"\")\nif(WITH_CRYPTO STREQUAL \"AUTO\" OR WITH_CRYPTO STREQUAL \"ccrypto\")\n    tr_get_required_flag(WITH_CRYPTO CCRYPTO_IS_REQUIRED)\n    find_path(CCRYPTO_INCLUDE_DIR\n        NAMES CommonCrypto/CommonCrypto.h\n        ${CCRYPTO_IS_REQUIRED})\n    mark_as_advanced(CCRYPTO_INCLUDE_DIR)\n    tr_fixup_list_option(WITH_CRYPTO \"ccrypto\" CCRYPTO_INCLUDE_DIR \"AUTO\" CCRYPTO_IS_REQUIRED)\n    if(WITH_CRYPTO STREQUAL \"ccrypto\")\n        set(CRYPTO_PKG \"ccrypto\")\n        set(CRYPTO_INCLUDE_DIRS)\n        set(CRYPTO_LIBRARIES)\n    endif()\nendif()\nif(WITH_CRYPTO STREQUAL \"AUTO\" OR WITH_CRYPTO STREQUAL \"openssl\")\n    tr_get_required_flag(WITH_CRYPTO OPENSSL_IS_REQUIRED)\n    find_package(OpenSSL ${OPENSSL_MINIMUM} ${OPENSSL_IS_REQUIRED})\n    tr_fixup_list_option(WITH_CRYPTO \"openssl\" OPENSSL_FOUND \"AUTO\" OPENSSL_IS_REQUIRED)\n    if(WITH_CRYPTO STREQUAL \"openssl\")\n        set(CRYPTO_PKG \"openssl\")\n        set(CRYPTO_INCLUDE_DIRS ${OPENSSL_INCLUDE_DIR})\n        set(CRYPTO_LIBRARIES ${OPENSSL_LIBRARIES})\n    endif()\nendif()\nif(WITH_CRYPTO STREQUAL \"AUTO\" OR WITH_CRYPTO STREQUAL \"wolfssl\")\n    tr_get_required_flag(WITH_CRYPTO WOLFSSL_IS_REQUIRED)\n    find_package(WolfSSL ${WOLFSSL_MINIMUM} ${WOLFSSL_IS_REQUIRED})\n    tr_fixup_list_option(WITH_CRYPTO \"wolfssl\" WOLFSSL_FOUND \"AUTO\" WOLFSSL_IS_REQUIRED)\n    if(WITH_CRYPTO STREQUAL \"wolfssl\")\n        set(CRYPTO_PKG \"wolfssl\")\n        set(CRYPTO_INCLUDE_DIRS ${WOLFSSL_INCLUDE_DIRS})\n        set(CRYPTO_LIBRARIES ${WOLFSSL_LIBRARIES})\n    endif()\nendif()\nif(WITH_CRYPTO STREQUAL \"AUTO\" OR WITH_CRYPTO STREQUAL \"mbedtls\")\n    tr_get_required_flag(WITH_CRYPTO MBEDTLS_IS_REQUIRED)\n    find_package(MbedTLS ${MBEDTLS_MINIMUM} ${MBEDTLS_IS_REQUIRED})\n    tr_fixup_list_option(WITH_CRYPTO \"mbedtls\" MBEDTLS_FOUND \"AUTO\" MBEDTLS_IS_REQUIRED)\n    if(WITH_CRYPTO STREQUAL \"mbedtls\")\n        set(CRYPTO_PKG \"mbedtls\")\n        set(CRYPTO_INCLUDE_DIRS ${MBEDTLS_INCLUDE_DIRS})\n        set(CRYPTO_LIBRARIES ${MBEDTLS_LIBRARIES})\n    endif()\nendif()\n\n# We should have found the library by now\nif(CRYPTO_PKG STREQUAL \"\")\n    if(WITH_CRYPTO STREQUAL \"AUTO\")\n        message(FATAL_ERROR \"Unable to find any supported crypto library.\")\n    else()\n        message(FATAL_ERROR \"Requested crypto library '${WITH_CRYPTO}' is not supported.\")\n    endif()\nelse()\n    add_library(transmission::crypto_impl INTERFACE IMPORTED)\n\n    target_include_directories(transmission::crypto_impl\n        INTERFACE\n            ${CRYPTO_INCLUDE_DIRS})\n\n    target_link_libraries(transmission::crypto_impl\n        INTERFACE\n            ${CRYPTO_LIBRARIES})\nendif()\n\nif(ENABLE_GTK)\n    tr_get_required_flag(ENABLE_GTK GTK_IS_REQUIRED)\n\n    if(USE_GTK_VERSION STREQUAL \"AUTO\" OR USE_GTK_VERSION EQUAL 4)\n        pkg_check_modules(GTK4\n            gtkmm-4.0>=${GTKMM4_MINIMUM}\n            glibmm-2.68>=${GLIBMM_MINIMUM}\n            giomm-2.68>=${GIOMM_MINIMUM})\n        set(GTK_VERSION 4)\n        set(GTK_FOUND ${GTK4_FOUND})\n    endif()\n\n    if(NOT GTK_FOUND AND (USE_GTK_VERSION STREQUAL \"AUTO\" OR USE_GTK_VERSION EQUAL 3))\n        pkg_check_modules(GTK3\n            gtkmm-3.0>=${GTKMM3_MINIMUM}\n            glibmm-2.4>=${GLIBMM_MINIMUM}\n            giomm-2.4>=${GIOMM_MINIMUM})\n        set(GTK_VERSION 3)\n        set(GTK_FOUND ${GTK3_FOUND})\n    endif()\n\n    if(GTK_IS_REQUIRED AND NOT GTK_FOUND)\n        message(FATAL_ERROR \"GTK is required but wasn't found\")\n    endif()\n\n    tr_fixup_auto_option(ENABLE_GTK GTK_FOUND GTK_IS_REQUIRED)\n\n    if(ENABLE_GTK AND WITH_APPINDICATOR AND GTK_VERSION EQUAL 3)\n        tr_get_required_flag(WITH_APPINDICATOR APPINDICATOR_IS_REQUIRED)\n        find_package(APPINDICATOR ${APPINDICATOR_IS_REQUIRED})\n        tr_fixup_auto_option(WITH_APPINDICATOR APPINDICATOR_FOUND APPINDICATOR_IS_REQUIRED)\n    else()\n        set(WITH_APPINDICATOR OFF)\n    endif()\nelse()\n    set(WITH_APPINDICATOR OFF)\nendif()\n\nif(GTK_FOUND)\n    add_library(transmission::gtk_impl INTERFACE IMPORTED)\n\n    target_compile_options(transmission::gtk_impl\n        INTERFACE\n            ${GTK${GTK_VERSION}_CFLAGS_OTHER})\n\n    target_include_directories(transmission::gtk_impl\n        INTERFACE\n            ${GTK${GTK_VERSION}_INCLUDE_DIRS})\n\n    target_link_directories(transmission::gtk_impl\n        INTERFACE\n            ${GTK${GTK_VERSION}_LIBRARY_DIRS})\n\n    target_link_libraries(transmission::gtk_impl\n        INTERFACE\n            ${GTK${GTK_VERSION}_LIBRARIES})\nendif()\n\nif(ENABLE_QT)\n    tr_get_required_flag(ENABLE_QT QT_IS_REQUIRED)\n\n    if(POLICY CMP0020)\n        cmake_policy(SET CMP0020 NEW)\n    endif()\n\n    set(QT_TARGETS)\n    set(ENABLE_QT_COM_INTEROP OFF)\n    set(ENABLE_QT_DBUS_INTEROP OFF)\n\n    set(QT_REQUIRED_MODULES\n        Core\n        Gui\n        Widgets\n        Network\n        Svg\n        LinguistTools)\n    set(QT_OPTIONAL_MODULES\n        DBus\n        AxContainer\n        AxServer)\n    set(MISSING_QT_MODULE)\n\n    set(Qt_NAMES Qt6 Qt5)\n    if(NOT USE_QT_VERSION STREQUAL \"AUTO\")\n        set(Qt_NAMES Qt${USE_QT_VERSION})\n    endif()\n\n    find_package(Qt NAMES ${Qt_NAMES} ${QT_MINIMUM} QUIET)\n    if(Qt_FOUND)\n        if(WIN32 AND Qt_VERSION_MAJOR EQUAL 5)\n            list(APPEND QT_REQUIRED_MODULES WinExtras)\n        endif()\n\n        foreach(M ${QT_REQUIRED_MODULES})\n            find_package(Qt${Qt_VERSION_MAJOR}${M} ${QT_MINIMUM} QUIET)\n            if(Qt${Qt_VERSION_MAJOR}${M}_FOUND)\n                if(NOT M STREQUAL \"LinguistTools\")\n                    list(APPEND QT_TARGETS Qt${Qt_VERSION_MAJOR}::${M})\n                endif()\n            else()\n                set(QT_TARGETS)\n                set(MISSING_QT_MODULE \"${M}\")\n                break()\n            endif()\n        endforeach()\n    endif()\n\n    if(QT_TARGETS)\n        foreach(M ${QT_OPTIONAL_MODULES})\n            find_package(Qt${Qt_VERSION_MAJOR}${M} ${QT_MINIMUM} QUIET)\n            if(Qt${Qt_VERSION_MAJOR}${M}_FOUND)\n                list(APPEND QT_TARGETS Qt${Qt_VERSION_MAJOR}::${M})\n            endif()\n        endforeach()\n\n        if(Qt${Qt_VERSION_MAJOR}AxContainer_FOUND AND Qt${Qt_VERSION_MAJOR}AxServer_FOUND)\n            set(ENABLE_QT_COM_INTEROP ON)\n\n            find_program(MIDL_EXECUTABLE midl)\n            if(NOT MIDL_EXECUTABLE)\n                set(ENABLE_QT_COM_INTEROP OFF)\n            endif()\n        endif()\n\n        if(Qt${Qt_VERSION_MAJOR}DBus_FOUND)\n            set(ENABLE_QT_DBUS_INTEROP ON)\n        endif()\n    endif()\n\n    set(QT_FOUND ON)\n    if(NOT QT_TARGETS OR NOT (ENABLE_QT_COM_INTEROP OR ENABLE_QT_DBUS_INTEROP))\n        if(QT_IS_REQUIRED)\n            message(FATAL_ERROR \"Unable to find required Qt libraries (Qt${Qt_VERSION_MAJOR}${MISSING_QT_MODULE})\")\n        endif()\n        set(QT_FOUND OFF)\n    endif()\n\n    tr_fixup_auto_option(ENABLE_QT QT_FOUND QT_IS_REQUIRED)\nendif()\n\nif(QT_FOUND)\n    add_library(transmission::qt_impl INTERFACE IMPORTED)\n\n    target_link_libraries(transmission::qt_impl\n        INTERFACE\n            ${QT_TARGETS})\nendif()\n\nif(ENABLE_MAC)\n    tr_get_required_flag(ENABLE_MAC MAC_IS_REQUIRED)\n\n    if(APPLE)\n        set(MAC_FOUND ON)\n    else()\n        set(MAC_FOUND OFF)\n        if(MAC_IS_REQUIRED)\n            message(SEND_ERROR \"Mac build is impossible on non-Mac system.\")\n        endif()\n    endif()\n\n    tr_fixup_auto_option(ENABLE_MAC MAC_FOUND MAC_IS_REQUIRED)\nendif()\n\nif(WIN32 AND NOT MINGW)\n    set(DEFLATE_LIB_NAME deflatestatic)\nelse()\n    set(DEFLATE_LIB_NAME deflate)\nendif()\ntr_add_external_auto_library(DEFLATE libdeflate ${DEFLATE_LIB_NAME}\n    TARGET deflate::deflate\n    CMAKE_ARGS\n        -DLIBDEFLATE_BUILD_SHARED_LIB=OFF\n        -DLIBDEFLATE_BUILD_GZIP=OFF)\n\ntr_add_external_auto_library(EVENT2 libevent event\n    TARGET libevent::event\n    CMAKE_ARGS\n        -DEVENT__DISABLE_OPENSSL:BOOL=ON\n        -DEVENT__DISABLE_BENCHMARK:BOOL=ON\n        -DEVENT__DISABLE_TESTS:BOOL=ON\n        -DEVENT__DISABLE_REGRESS:BOOL=ON\n        -DEVENT__DISABLE_SAMPLES:BOOL=ON\n        -DEVENT__LIBRARY_TYPE:STRING=STATIC)\n\ntr_add_external_auto_library(NATPMP libnatpmp natpmp\n    TARGET natpmp::natpmp)\nif(NOT USE_SYSTEM_NATPMP)\n    target_compile_definitions(natpmp::natpmp\n        INTERFACE\n            NATPMP_STATICLIB)\nendif()\n\nif(WIN32)\n    # https://github.com/miniupnp/miniupnp/pull/304\n    set(TR_MINIUPNPC_LIBNAME libminiupnpc)\nelse()\n    set(TR_MINIUPNPC_LIBNAME miniupnpc)\nendif()\ntr_add_external_auto_library(MINIUPNPC miniupnp/miniupnpc ${TR_MINIUPNPC_LIBNAME}\n    TARGET miniupnpc::libminiupnpc\n    CMAKE_ARGS\n        -DUPNPC_BUILD_STATIC=ON\n        -DUPNPC_BUILD_SHARED=OFF\n        -DUPNPC_BUILD_TESTS=OFF)\nif(NOT USE_SYSTEM_MINIUPNPC)\n    target_compile_definitions(miniupnpc::libminiupnpc\n        INTERFACE\n            MINIUPNP_STATICLIB)\nendif()\nunset(TR_MINIUPNPC_LIBNAME)\n\nadd_subdirectory(${TR_THIRD_PARTY_SOURCE_DIR}/wildmat)\n\ntr_add_external_auto_library(DHT dht dht\n    TARGET dht::dht)\n\ntr_add_external_auto_library(PSL libpsl psl\n    TARGET psl::psl)\n\nif(ENABLE_UTP)\n    tr_add_external_auto_library(UTP libutp utp\n        SUBPROJECT\n        TARGET libutp::libutp\n        CMAKE_ARGS\n            -DLIBUTP_SHARED:BOOL=OFF)\nendif()\n\ntr_add_external_auto_library(B64 libb64 b64\n    SUBPROJECT\n    TARGET libb64::libb64\n    CMAKE_ARGS\n        -DLIBB64_SHARED:BOOL=OFF)\n\nset(TR_WEB_ASSETS ${PROJECT_SOURCE_DIR}/web/public_html)\nif(REBUILD_WEB)\n    tr_get_required_flag(REBUILD_WEB NPM_IS_REQUIRED)\n\n    if(WIN32)\n        find_program(NPM npm.cmd)\n    else()\n        find_program(NPM npm)\n    endif()\n\n    if (\"${NPM}\" STREQUAL \"NPM-NOTFOUND\")\n        set(NPM_FOUND OFF)\n        if(NPM_IS_REQUIRED)\n            message(FATAL_ERROR \"Could NOT find NPM, minimum required is \\\"${NPM_MINIMUM}\\\"\")\n        endif()\n    else()\n        execute_process(COMMAND \"${NPM}\" --version\n            OUTPUT_STRIP_TRAILING_WHITESPACE\n            OUTPUT_VARIABLE NPM_VERSION_STRING)\n        if(\"${NPM_VERSION_STRING}\" VERSION_GREATER_EQUAL \"${NPM_MINIMUM}\")\n            message(STATUS \"Found NPM: ${NPM} (found suitable version \\\"${NPM_VERSION_STRING}\\\", minimum required is \\\"${NPM_MINIMUM}\\\")\")\n            set(NPM_FOUND ON)\n        elseif(NPM_IS_REQUIRED)\n            message(FATAL_ERROR \"Found NPM: ${NPM} Found unsuitable version \\\"${NPM_VERSION_STRING}\\\", but required is at least \\\"${NPM_MINIMUM}\\\"\")\n        else()\n            message(STATUS \"Found NPM: ${NPM} Found unsuitable version \\\"${NPM_VERSION_STRING}\\\", but required is at least \\\"${NPM_MINIMUM}\\\"\")\n            set(NPM_FOUND OFF)\n        endif()\n    endif()\n\n    tr_fixup_auto_option(REBUILD_WEB NPM_FOUND NPM_IS_REQUIRED)\nendif()\n\nif(REBUILD_WEB)\n    add_subdirectory(web)\nendif()\n\nif(WITH_INOTIFY)\n    tr_get_required_flag(WITH_INOTIFY INOTIFY_IS_REQUIRED)\n\n    set(INOTIFY_FOUND OFF)\n    check_include_file(sys/inotify.h HAVE_SYS_INOTIFY_H)\n    check_function_exists(inotify_init HAVE_INOTIFY_INIT)\n    if(HAVE_SYS_INOTIFY_H AND HAVE_INOTIFY_INIT)\n        set(INOTIFY_FOUND ON)\n    endif()\n\n    tr_fixup_auto_option(WITH_INOTIFY INOTIFY_FOUND INOTIFY_IS_REQUIRED)\nendif()\n\nif(WITH_KQUEUE)\n    tr_get_required_flag(WITH_KQUEUE KQUEUE_IS_REQUIRED)\n\n    set(KQUEUE_FOUND OFF)\n    check_include_files(\"sys/types.h;sys/event.h\" HAVE_SYS_EVENT_H)\n    check_function_exists(kqueue HAVE_KQUEUE)\n    if(HAVE_SYS_EVENT_H AND HAVE_KQUEUE)\n        set(KQUEUE_FOUND ON)\n    endif()\n\n    tr_fixup_auto_option(WITH_KQUEUE KQUEUE_FOUND KQUEUE_IS_REQUIRED)\nendif()\n\nif(WITH_SYSTEMD)\n    tr_get_required_flag(WITH_SYSTEMD SYSTEMD_IS_REQUIRED)\n    find_package(SYSTEMD)\n    tr_fixup_auto_option(WITH_SYSTEMD SYSTEMD_FOUND SYSTEMD_IS_REQUIRED)\nendif()\n\nif(WIN32)\n    foreach(L C CXX)\n        # Filter out needless definitions\n        set(CMAKE_${L}_FLAGS \"${CMAKE_${L}_FLAGS} -DWIN32_LEAN_AND_MEAN -DNOMINMAX\")\n    endforeach()\nendif()\n\nunset(CMAKE_FOLDER)\n\n### Compiler Warnings\n\nset(C_WARNING_FLAGS)\nset(CXX_WARNING_FLAGS)\n\ninclude(CheckCCompilerFlag)\ninclude(CheckCXXCompilerFlag)\n\nif(MSVC)\n    set(WARNING_CANDIDATES /W4)\n\n    foreach(FLAG ${WARNING_CANDIDATES})\n        list(APPEND C_WARNING_FLAGS ${FLAG})\n        list(APPEND CXX_WARNING_FLAGS ${FLAG})\n    endforeach()\nelse()\n    set(WARNING_CANDIDATES\n        -W\n        -Wall\n        -Wextra\n        -Wcast-align\n        -Wduplicated-cond\n        -Wextra-semi\n        -Wextra-semi-stmt\n        -Wextra-tokens\n        -Wfloat-equal\n        -Wgnu\n        -Winit-self\n        -Wint-in-bool-context\n        -Wlogical-op\n        -Wmissing-format-attribute\n        -Wnull-dereference\n        -Wpointer-arith\n        -Wredundant-decls\n        -Wredundant-move\n        -Wreorder-ctor\n        -Wrestrict\n        -Wreturn-std-move\n        -Wself-assign\n        -Wself-move\n        -Wsemicolon-before-method-body\n        -Wsentinel\n        -Wshadow\n        -Wsign-compare\n        -Wsometimes-uninitialized\n        -Wstring-conversion\n        -Wsuggest-destructor-override\n        -Wsuggest-override\n        -Wuninitialized\n        -Wunreachable-code\n        -Wunused\n        -Wunused-const-variable\n        -Wunused-parameter\n        -Wunused-result\n        -Wwrite-strings)\n\n    if(MINGW)\n        # Disable excessive warnings since we're using __USE_MINGW_ANSI_STDIO\n        # Hopefully, any potential issues will be spotted on other platforms\n        list(APPEND WARNING_CANDIDATES -Wno-format)\n    else()\n        list(APPEND WARNING_CANDIDATES -Wformat-security)\n    endif()\n\n    set(CMAKE_REQUIRED_FLAGS)\n\n    foreach(FLAG -Werror /WX)\n        tr_make_id(\"${FLAG}\" FLAG_ID)\n        set(CACHE_ID \"${CMAKE_C_COMPILER_ID}_C_HAS${FLAG_ID}\")\n        string(TOLOWER \"${CACHE_ID}\" CACHE_ID)\n        check_c_compiler_flag(${FLAG} ${CACHE_ID})\n        if(${CACHE_ID})\n            # Make sure the next loop only adds flags that are relevant for a particular language\n            set(CMAKE_REQUIRED_FLAGS ${FLAG})\n            break()\n        endif()\n    endforeach()\n\n    foreach(FLAG ${WARNING_CANDIDATES})\n        tr_make_id(\"${FLAG}\" FLAG_ID)\n\n        # if available, add to C warnings\n        set(CACHE_ID \"${CMAKE_C_COMPILER_ID}_C_HAS${FLAG_ID}\")\n        string(TOLOWER \"${CACHE_ID}\" CACHE_ID)\n        check_c_compiler_flag(${FLAG} ${CACHE_ID})\n        if(${CACHE_ID})\n            list(APPEND C_WARNING_FLAGS ${FLAG})\n        endif()\n\n        # if available, add to CXX warnings\n        set(CACHE_ID \"${CMAKE_CXX_COMPILER_ID}_CXX_HAS${FLAG_ID}\")\n        string(TOLOWER \"${CACHE_ID}\" CACHE_ID)\n        check_cxx_compiler_flag(${FLAG} ${CACHE_ID})\n        if(${CACHE_ID})\n            list(APPEND CXX_WARNING_FLAGS ${FLAG})\n        endif()\n\n        unset(CACHE_ID)\n        unset(FLAG_ID)\n    endforeach()\n\n    unset(CMAKE_REQUIRED_FLAGS)\nendif()\n\nstring(REPLACE \";\" \"$<SEMICOLON>\" C_WARNING_FLAGS_GENEX \"${C_WARNING_FLAGS}\")\nstring(REPLACE \";\" \"$<SEMICOLON>\" CXX_WARNING_FLAGS_GENEX \"${CXX_WARNING_FLAGS}\")\nadd_compile_options(\n    $<$<COMPILE_LANGUAGE:C>:${C_WARNING_FLAGS_GENEX}>\n    $<$<COMPILE_LANGUAGE:CXX>:${CXX_WARNING_FLAGS_GENEX}>)\n\n###\n\ninclude(LargeFileSupport)\n\ncheck_library_exists(m sqrt \"\" HAVE_LIBM)\nif(HAVE_LIBM)\n    set(LIBM_LIBRARY m)\nendif()\n\ncheck_library_exists(quota quotacursor_skipidtype \"\" HAVE_LIBQUOTA)\nif(HAVE_LIBQUOTA)\n    set(LIBQUOTA_LIBRARY quota)\nendif()\n\nset(TR_NETWORK_LIBRARIES)\nif(WIN32)\n    list(APPEND TR_NETWORK_LIBRARIES iphlpapi ws2_32)\nelse()\n    tr_select_library(\"c;socket;net\" socket \"\" LIB)\n    if(NOT LIB MATCHES \"^(|c)$\")\n        list(APPEND TR_NETWORK_LIBRARIES ${LIB})\n    endif()\n\n    tr_select_library(\"c;nsl;bind\" gethostbyname \"\" LIB)\n    if(NOT LIB MATCHES \"^(|c)$\")\n        list(APPEND TR_NETWORK_LIBRARIES ${LIB})\n    endif()\nendif()\n\nif(RUN_CLANG_TIDY STREQUAL \"AUTO\" AND (DEFINED ENV{LGTM_SRC} OR DEFINED ENV{APPVEYOR})) # skip clang-tidy on LGTM/appveyor\n    set(RUN_CLANG_TIDY OFF)\nendif()\n\nif(RUN_CLANG_TIDY)\n    tr_get_required_flag(RUN_CLANG_TIDY CLANG_TIDY_IS_REQUIRED)\n\n    message(STATUS \"Looking for clang-tidy\")\n    find_program(CLANG_TIDY clang-tidy)\n    if(CLANG_TIDY STREQUAL \"CLANG_TIDY-NOTFOUND\")\n        message(STATUS \"Looking for clang-tidy - not found\")\n        if(CLANG_TIDY_IS_REQUIRED)\n            message(FATAL_ERROR \"clang-tidy is required but wasn't found\")\n        endif()\n    else()\n        message(STATUS \"Looking for clang-tidy - found\")\n        set(CMAKE_CXX_CLANG_TIDY \"${CLANG_TIDY}\")\n    endif()\nendif()\n\nif(ENABLE_TESTS)\n    enable_testing()\n    add_subdirectory(tests)\nendif()\n\nfunction(tr_install_web DST_DIR)\n    if(INSTALL_WEB)\n        install(\n            DIRECTORY ${TR_WEB_ASSETS}\n            DESTINATION ${DST_DIR})\n    endif()\nendfunction()\n\nadd_subdirectory(libtransmission)\n\nset(MAC_PROJECT_DIR macosx)\n\nif(ENABLE_GTK AND ENABLE_NLS)\n    find_package(Gettext 0.19.7 REQUIRED)\n    add_subdirectory(po)\nendif()\n\nforeach(P cli daemon gtk mac qt utils)\n    string(TOUPPER \"${P}\" P_ID)\n    if(ENABLE_${P_ID})\n        if(DEFINED ${P_ID}_PROJECT_DIR)\n            set(P ${${P_ID}_PROJECT_DIR})\n        endif()\n        add_subdirectory(${P})\n    endif()\nendforeach()\n\nif(ENABLE_DAEMON OR ENABLE_GTK OR ENABLE_QT)\n    tr_install_web(${CMAKE_INSTALL_DATAROOTDIR}/${TR_NAME})\nendif()\n\nif(INSTALL_DOC)\n    install(\n        FILES\n            AUTHORS\n            COPYING\n            README.md\n            docs/rpc-spec.md\n            extras/send-email-when-torrent-done.sh\n        DESTINATION ${CMAKE_INSTALL_DOCDIR})\n    install(\n        DIRECTORY news\n        DESTINATION ${CMAKE_INSTALL_DOCDIR})\nendif()\n\nif(MSVC AND ENABLE_DAEMON AND ENABLE_QT AND ENABLE_UTILS AND WITH_CRYPTO STREQUAL \"openssl\" AND INSTALL_WEB)\n    add_subdirectory(dist/msi)\nendif()\n\nset(CPACK_SOURCE_GENERATOR TXZ)\nset(CPACK_SOURCE_PACKAGE_FILE_NAME \"${TR_NAME}-${TR_SEMVER}\")\nif(NOT TR_STABLE_RELEASE AND NOT \"${TR_VCS_REVISION}\" STREQUAL \"\")\n    # https://semver.org/#spec-item-11\n    # Build metadata MAY be denoted by appending a plus sign and a series of dot\n    # separated identifiers immediately following the patch or pre-release version.\n    # Identifiers MUST comprise only ASCII alphanumerics and hyphens [0-9A-Za-z-].\n    # Identifiers MUST NOT be empty.\n    string(APPEND CPACK_SOURCE_PACKAGE_FILE_NAME \"+r${TR_VCS_REVISION}\")\nendif()\nlist(APPEND CPACK_SOURCE_IGNORE_FILES\n    \"${PROJECT_BINARY_DIR}\"\n    \"[.]git\"\n    \"node_modules\")\n\n## Code Formatting\n\nif(GIT_FOUND)\n    execute_process(\n        COMMAND \"${GIT_EXECUTABLE}\" rev-parse --show-toplevel\n        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n        OUTPUT_VARIABLE TR_GIT_ROOT\n        OUTPUT_STRIP_TRAILING_WHITESPACE)\n    if(TR_GIT_ROOT AND IS_DIRECTORY \"${TR_GIT_ROOT}/.git\")\n        configure_file(\"${PROJECT_SOURCE_DIR}/extras/pre-commit\" \"${TR_GIT_ROOT}/.git/hooks/pre-commit\" COPYONLY)\n        add_custom_target(check-format\n            COMMAND \"${PROJECT_SOURCE_DIR}/code_style.sh\" --check\n            WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\")\n        add_custom_target(format\n            COMMAND \"${PROJECT_SOURCE_DIR}/code_style.sh\"\n            WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\")\n        set_property(\n            TARGET check-format format\n            PROPERTY FOLDER \"utility\")\n    endif()\n    unset(TR_GIT_ROOT)\nendif()\n\ninclude(CPack)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.322265625,
          "content": "# Contributing to Transmission\n\nThanks for reading this and thinking about contributing! :tada:\n\nThis page is a list of suggestions and guidelines for contributing. They're not rules, just guidelines. Use your best judgment and feel free to propose changes to this document in a pull request.\n\n# If you've got a change in mind\n\nNew people usually start volunteering because they have an itch they want to scratch. If you already know what you want to work on first, please comment in an existing issue, or [file a new issue](https://github.com/transmission/transmission/issues/new/choose) or [start a new discussion](https://github.com/transmission/transmission/discussions/new)! The maintainers will try to get you the information you need.\n\n# If you're looking for ideas\n\nIf not, there are three labels in the issues tracker that can help:\n\n- [`help wanted`](https://github.com/transmission/transmission/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22) indicates that the issue is stuck and needs an outside developer. This is usually because some domain expertise is needed, e.g. for a specific platform or external API.\n- [`good first issue`](https://github.com/transmission/transmission/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22) is a `pr-welcome` issue that is probably on the easier side to code.\n- [`pr welcome`](https://github.com/transmission/transmission/issues?q=is%3Aissue+is%3Aopen+label%3A%22pr+welcome%22) is for features that have been requested and which that the project doesn't have resources to implement, but would consider adding if a good PR was submitted.\n\nThe project also welcomes changes that:\n\n- improve Transmission's compliance with [accepted BEPs](https://www.bittorrent.org/beps/bep_0000.html)\n- improve transfer speeds or peer communication\n- reduce the app's footprint in CPU or memory use\n- improve testing\n- simplify / shrink the existing codebase\n- remove deprecated macOS API use in the macOS client\n- remove deprecated GTK API use in the GTK client\n- reduce feature disparity between the different Transmission apps\n\n# Mechanics\n\n## Getting Started\n\nOn macOS, Transmission is usually built with Xcode. Everywhere else, it's CMake + the development environment of your choice. If you need to add source files but don't have Xcode, a maintainer can help you to update the Xcode project file. See [README.md](README.md) for information on building Transmission from source.\n\n## Style\n\n- Try to follow the [C++ core guidelines](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines).\n- Prefer memory-managed objects over raw pointers\n- Prefer `constexpr` over `#define`\n- Prefer `enum class` over `enum`\n- Prefer new-style headers, e.g. `<cstring>` over `<string.h>`\n- Fix any warnings in new code before merging\n- Run `./code_style.sh` on your code to ensure the whole codebase has consistent indentation.\n\nNote that Transmission existed in C for over a decade and those idioms don't change overnight. \"Follow the C++ core guidelines\" can be difficult when working with older code, and the maintainers will understand that when reviewing your PRs. :smiley:\n\n## Considerations\n\n- Prefer commonly-used tools over bespoke ones, e.g. use `std::list` instead of rolling your own list. This simplifies the code and makes it easier for other contributors to work with.\n- Please keep new code reasonably decoupled from the rest of the codebase for testability, either with DI or other methods. Be aware that much of the codebase was not written  with testability in mind. See peer-mgr-wishlist for one example of adding new, tested code into an existing untested module.\n- When adding advanced features, consider exposing them only in the config file instead of the UI.\n  - Transmission has a native macOS app, a native GTK app, and a Qt app. This is a strength in that each client can tightly integrate with its target environment, but it comes at the cost of making GUI changes very time-consuming. So consider, does this feature _need_ to be in the GUI?\n- New features must be reachable via the C API and the RPC/JSON API.\n  - The macOS and GTK clients still use the C API. Everything else, including a large number of 3rd party applications, use the RPC/JSON API. New features need to be usable via both of these.\n- KISS. Transmission is a _huge_ codebase so if you're trying to decide between to approaches to implement something, try the simpler one first.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.6943359375,
          "content": "Copyright 2005-2025. All code is copyrighted by the respective authors.\n\nTransmission can be redistributed and/or modified under the terms of\nthe GNU GPLv2 (http://www.gnu.org/licenses/license-list.html#GPLv2),\nthe GNU GPLv3 (http://www.gnu.org/licenses/license-list.html#GNUGPLv3),\nor any future license endorsed by Mnemosyne LLC.\n\nIn addition, linking to and/or using OpenSSL is allowed.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nSome of Transmission's source files have more permissive licenses.\nThose files may, of course, be used on their own under their own terms.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.92578125,
          "content": "## About\n\nTransmission is a fast, easy, and free BitTorrent client. It comes in several flavors:\n  * A native macOS GUI application\n  * GTK+ and Qt GUI applications for Linux, BSD, etc.\n  * A Qt-based Windows-compatible GUI application\n  * A headless daemon for servers and routers\n  * A web UI for remote controlling any of the above\n  \nVisit https://transmissionbt.com/ for more information.\n\n## Documentation\n\n[Transmission's documentation](docs/README.md) is currently out-of-date, but the team has recently begun a new project to update it and is looking for volunteers. If you're interested, please feel free to submit pull requests!\n\n## Command line interface notes\n\nTransmission is fully supported in transmission-remote, the preferred cli client.\n\nThree standalone tools to examine, create, and edit .torrent files exist: transmission-show, transmission-create, and transmission-edit, respectively.\n\nPrior to development of transmission-remote, the standalone client transmission-cli was created. Limited to a single torrent at a time, transmission-cli is deprecated and exists primarily to support older hardware dependent upon it. In almost all instances, transmission-remote should be used instead.\n\nDifferent distributions may choose to package any or all of these tools in one or more separate packages.\n\n## Building\n\nTransmission has an Xcode project file (Transmission.xcodeproj) for building in Xcode.\n\nFor a more detailed description, and dependencies, visit [How to Build Transmission](docs/Building-Transmission.md) in docs\n\n### Building a Transmission release from the command line\n\n```bash\n$ tar xf transmission-4.0.6.tar.xz\n$ cd transmission-4.0.6\n# Use -DCMAKE_BUILD_TYPE=RelWithDebInfo to build optimized binary with debug information. (preferred)\n# Use -DCMAKE_BUILD_TYPE=Release to build full optimized binary.\n$ cmake -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo\n$ cd build\n$ cmake --build .\n$ sudo cmake --install .\n```\n\n### Building Transmission from the nightly builds\n\nDownload a tarball from https://build.transmissionbt.com/job/trunk-linux/ and follow the steps from the previous section.\n\nIf you're new to building programs from source code, this is typically easier than building from Git.\n\n### Building Transmission from Git (first time)\n\n```bash\n$ git clone --recurse-submodules https://github.com/transmission/transmission Transmission\n$ cd Transmission\n# Use -DCMAKE_BUILD_TYPE=RelWithDebInfo to build optimized binary with debug information. (preferred)\n# Use -DCMAKE_BUILD_TYPE=Release to build full optimized binary.\n$ cmake -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo\n$ cd build\n$ cmake --build .\n$ sudo cmake --install .\n```\n\n### Building Transmission from Git (updating)\n\n```bash\n$ cd Transmission/build\n$ cmake --build . -t clean\n$ git submodule foreach --recursive git clean -xfd\n$ git pull --rebase --prune\n$ git submodule update --init --recursive\n$ cmake --build .\n$ sudo cmake --install .\n```\n\n## Contributing\n\n### Code Style\n\nYou would want to setup your editor to make use of the .clang-format file located in the root of this repository and the eslint/prettier rules in web/package.json.\n\nIf for some reason you are unwilling or unable to do so, there is a shell script which you can use: `./code_style.sh`\n\n### Translations\n\nSee [language translations](docs/Translating.md).\n\n## Sponsors\n\n<table>\n <tbody>\n  <tr>\n   <td align=\"center\"><img alt=\"[MacStadium]\" src=\"https://uploads-ssl.webflow.com/5ac3c046c82724970fc60918/5c019d917bba312af7553b49_MacStadium-developerlogo.png\" height=\"30\"/></td>\n   <td>macOS CI builds are running on a M1 Mac Mini provided by <a href=\"https://www.macstadium.com/company/opensource\">MacStadium</a></td>\n  </tr>\n  <tr>\n   <td align=\"center\"><img alt=\"[SignPath]\" src=\"https://avatars.githubusercontent.com/u/34448643\" height=\"30\"/></td>\n   <td>Free code signing on Windows provided by <a href=\"https://signpath.io/\">SignPath.io</a>, certificate by <a href=\"https://signpath.org/\">SignPath Foundation</a></td>\n  </tr>\n </tbody>\n</table>\n"
        },
        {
          "name": "Transmission.xcodeproj",
          "type": "tree",
          "content": null
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 3.5380859375,
          "content": "version: '{build}'\n\nenvironment:\n  AWS_ACCESS_KEY_ID:\n    secure: WQRc7y9bDiWiLpjm9lXdw9Q7n4extWau3W1ztQdqMgU=\n  AWS_SECRET_ACCESS_KEY:\n    secure: pP+D6ZtfXLDcEnl8pk/n3KApaV1fdGns4VkSyebs0zHzCutlvWj7ee16PalCcnBY\n  AWS_S3_BUCKET_NAME:\n    secure: Bf3x1Iruxg+l3tp+an+g9oE36EHxvyWrE8GTJzZh4Ss=\n\n  matrix:\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n    TR_ARCH: x86\n    QT_VERSION: '5'\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n    TR_ARCH: x86\n    QT_VERSION: '6'\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n    TR_ARCH: x64\n    QT_VERSION: '5'\n  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n    TR_ARCH: x64\n    QT_VERSION: '6'\n\nbranches:\n  only:\n  - main\n  - /^\\d+\\.\\d+.*/\n\nfor:\n-\n  matrix:\n    only:\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n\n  clone_folder: '%SystemDrive%\\%TR_ARCH%-project'\n\n  cache:\n  - '%SystemDrive%\\%TR_ARCH%-ccache'\n\n  init:\n  - pwsh: |\n      $Env:APPVEYOR_SAVE_CACHE_ON_ERROR = 'true'\n\n  install:\n  - pwsh: |\n      $Version = git describe --tags --abbrev=10 --always\n      if ($Version -ne $Env:APPVEYOR_REPO_BRANCH) {\n          $Version += \"-${Env:APPVEYOR_REPO_BRANCH}\"\n      }\n\n      $BuildIndex = 0\n      appveyor UpdateBuild -Version $Version\n      while ($LastExitCode -ne 0) {\n          $BuildIndex += 1\n          appveyor UpdateBuild -Version \"${Version}+${BuildIndex}\"\n      }\n\n      git submodule update --init --recursive\n\n      choco install python3 --pre\n      choco install nasm\n      choco install jom\n      choco install wixtoolset --version 3.14.0\n      choco install ccache --version 4.8.3\n\n      Remove-Item -Path (Join-Path $Env:SystemDrive OpenSSL-Win32) -Recurse\n      Remove-Item -Path (Join-Path $Env:SystemDrive OpenSSL-Win64) -Recurse\n\n      Install-Module -Name SignPath\n\n  build_script:\n  - pwsh: |\n      $Env:PATH = @(\n          (Join-Path $Env:SystemDrive Strawberry perl bin)\n          (Join-Path $Env:ProgramFiles NASM)\n          (Join-Path (Get-Item -Path \"${Env:ProgramFiles(x86)}\\WiX Toolset v3.*\")[0].FullName bin)\n          $Env:PATH\n      ) -join [System.IO.Path]::PathSeparator\n\n      $Env:CCACHE_DIR = \"${Env:SystemDrive}\\${Env:TR_ARCH}-ccache\"\n      $Env:CCACHE_MAXSIZE = '500Mi'\n\n      Set-ExecutionPolicy -Scope Process Bypass\n\n      try {\n          & (Join-Path $Env:APPVEYOR_BUILD_FOLDER release windows main.ps1) `\n              -Mode Build `\n              -BuildArch $env:TR_ARCH `\n              -CCachePart App `\n              -UseQtVersion $Env:QT_VERSION `\n              -PackDebugSyms:$($Env:APPVEYOR_REPO_BRANCH -eq \"main\" -or $Env:APPVEYOR_REPO_TAG -eq \"true\")\n      } catch {\n          Write-Error (\"{1}{0}{2}{0}{3}\" -f [Environment]::NewLine, $_.ToString(), $_.InvocationInfo.PositionMessage, $_.ScriptStackTrace) -ErrorAction Continue\n          exit 1\n      }\n\n  test_script:\n  - pwsh: |\n      Set-ExecutionPolicy -Scope Process Bypass\n\n      try {\n          & (Join-Path $Env:APPVEYOR_BUILD_FOLDER release windows main.ps1) `\n              -Mode Test `\n              -BuildArch $env:TR_ARCH\n      } catch {\n          Write-Error (\"{1}{0}{2}{0}{3}\" -f [Environment]::NewLine, $_.ToString(), $_.InvocationInfo.PositionMessage, $_.ScriptStackTrace) -ErrorAction Continue\n          exit 1\n      }\n\n  artifacts:\n  - path: '*.msi'\n  - path: '*-pdb.7z'\n\n  deploy:\n  - provider: Webhook\n    url: https://app.signpath.io/API/v1/8c96c8c9-a72c-4b46-a53c-80aad617f6bc/Integrations/AppVeyor?ProjectKey=transmission&SigningPolicyKey=release-signing\n    authorization:\n       secure: PrvcykaHmPgJ0ENht1q58tCfjRcmybiOeHYrvtQtAGsfahWvniAfP66DqHxv872acpyf3FpJn2ETCeszoVuFGA==\n    on:\n      APPVEYOR_REPO_TAG: true\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "code_style.sh",
          "type": "blob",
          "size": 2.51953125,
          "content": "#!/usr/bin/env bash\n\n# Usage: ./code_style.sh\n# Usage: ./code_style.sh --check\n\nset -o noglob\n\n# PATH workaround for SourceTree\n# for Intel Mac\nPATH=\"${PATH}:/usr/local/bin\"\n# for Apple Silicon Mac\nPATH=\"${PATH}:/opt/homebrew/bin\"\n\nif [[ \"x$1\" == *\"check\"* ]]; then\n  echo \"checking code format\"\nelse\n  fix=1\nfi\n\nroot=\"$(dirname \"$0\")\"\nroot=\"$(cd \"${root}\" && pwd)\"\ncd \"${root}\" || exit 1\n\ntrim_comments() {\n  # 1. remove comments, ignoring backslash-escaped characters\n  # 2. trim spaces\n  # 3. remove empty lines\n  # note: GNU extensions like +?| aren't supported on macOS\n  sed 's/^\\(\\(\\(\\\\.\\)*[^\\\\#]*\\)*\\)#.*/\\1/;s/^[[:blank:]]*//;s/[[:blank:]]*$//;/^$/d' \"$@\"\n}\n\nget_find_path_args() {\n  local args=$(printf \" -o -path ./%s\" \"$@\")\n  echo \"${args:4}\"\n}\n\nfind_cfiles() {\n  # We use the same files as Meson: https://mesonbuild.com/Code-formatting.html\n  find . \\( $(get_find_path_args $(trim_comments .clang-format-include)) \\)\\\n       ! \\( $(get_find_path_args $(trim_comments .clang-format-ignore)) \\) \"$@\"\n}\n\n# We're targeting clang-format version 17 and other versions give slightly\n# different results, so prefer `clang-format-17` if it's installed.\nclang_format_exe_names=(\n  'clang-format-17'\n  'clang-format'\n)\nfor name in ${clang_format_exe_names[@]}; do\n  clang_format_exe=$(command -v \"${name}\")\n  if [ \"$?\" -eq 0 ]; then\n    clang_format_exe=\"${name}\"\n    break\n  fi\ndone\nif [ -z \"${clang_format_exe}\" ]; then\n  echo \"error: clang-format not found\";\n  exit 1;\nfi\n\n# format C/C++\nclang_format_args=\"$([ -n \"$fix\" ] && echo '-i' || echo '--dry-run --Werror')\"\nif ! find_cfiles -exec \"${clang_format_exe}\" $clang_format_args '{}' '+'; then\n  [ -n \"$fix\" ] || echo 'C/C++ code needs formatting'\n  exitcode=1\nfi\n\n# format Xcodeproj\nif ! grep -q 'objectVersion = 51' Transmission.xcodeproj/project.pbxproj; then\n  echo 'project.pbxproj needs objectVersion = 51 for compatibility with Xcode 11'\n  exitcode=1\nfi\nif ! grep -q 'BuildIndependentTargetsInParallel = YES' Transmission.xcodeproj/project.pbxproj; then\n  echo 'please keep BuildIndependentTargetsInParallel in project.pbxproj'\n  exitcode=1\nfi\n\n# format JS\n# but only if js has changed\ngit diff --cached --quiet -- \"web/**\" && exit $exitcode\ncd \"${root}/web\" || exit 1\nnpm_lint_args=\"$([ -n \"$fix\" ] && echo 'lint:fix' || echo 'lint')\"\nif ! npm ci --no-audit --no-fund --no-progress &>/dev/null; then\n  [ -n \"$fix\" ] || echo 'JS code could not be checked -- \"npm ci\" failed'\n  exitcode=1\nelif ! npm run --silent $npm_lint_args; then\n  [ -n \"$fix\" ] || echo 'JS code needs formatting'\n  exitcode=1\nfi\n\nexit $exitcode\n"
        },
        {
          "name": "daemon",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "gtk",
          "type": "tree",
          "content": null
        },
        {
          "name": "icon.png",
          "type": "blob",
          "size": 3.333984375,
          "content": null
        },
        {
          "name": "icons",
          "type": "tree",
          "content": null
        },
        {
          "name": "libtransmission",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "macosx",
          "type": "tree",
          "content": null
        },
        {
          "name": "news",
          "type": "tree",
          "content": null
        },
        {
          "name": "po",
          "type": "tree",
          "content": null
        },
        {
          "name": "qt",
          "type": "tree",
          "content": null
        },
        {
          "name": "release",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third-party",
          "type": "tree",
          "content": null
        },
        {
          "name": "update-version-h.sh",
          "type": "blob",
          "size": 3.8173828125,
          "content": "#!/bin/bash\n\n# Generate files to be included: only overwrite them if changed so make\n# won't rebuild everything unless necessary\nreplace_if_differs() {\n  if cmp \"$1\" \"$2\" > /dev/null 2>&1; then\n    rm -f \"$1\"\n  else\n    mv -f \"$1\" \"$2\"\n  fi\n}\n\necho \"creating libtransmission/version.h\"\n\nmajor_version=$(grep 'set[(]TR_VERSION_MAJOR' CMakeLists.txt | cut -d \\\" -f 2)\nminor_version=$(grep 'set[(]TR_VERSION_MINOR' CMakeLists.txt | cut -d \\\" -f 2)\npatch_version=$(grep 'set[(]TR_VERSION_PATCH' CMakeLists.txt | cut -d \\\" -f 2)\nbeta_number=$(grep 'set[(]TR_VERSION_BETA_NUMBER' CMakeLists.txt | cut -d \\\" -f 2)\nif grep -q 'set[(]TR_VERSION_DEV TRUE)' CMakeLists.txt; then\n  is_dev=true\nelse\n  is_dev=false\nfi\nif [ \"$is_dev\" != true ] && [ -z \"${beta_number}\" ]; then\n  release_number=1\nfi\n\n# derived from above: semver version string. https://semver.org/\n# '4.0.0-beta.1'\n# '4.0.0-beta.1.dev' (a dev release between beta 1 and 2)\n# '4.0.0-beta.2'\n# '4.0.0'\nuser_agent_prefix=\"${major_version}.${minor_version}.${patch_version}\"\nif [ \"$is_dev\" = true ] || [ -n \"${beta_number}\" ]; then\n  user_agent_prefix=\"${user_agent_prefix}-\"\n  if [ -n \"${beta_number}\" ]; then\n    user_agent_prefix=\"${user_agent_prefix}beta.${beta_number}\"\n  fi\n  if [ \"$is_dev\" = true ] && [ -n \"${beta_number}\" ]; then\n    user_agent_prefix=\"${user_agent_prefix}.\"\n  fi\n  if [ \"$is_dev\" = true ]; then\n    user_agent_prefix=\"${user_agent_prefix}dev\";\n  fi\nfi\n\n# derived from above: peer-id prefix. https://www.bittorrent.org/beps/bep_0020.html\n# chars 4, 5, 6 are major, minor, patch in https://en.wikipedia.org/wiki/Base62\n# char 7 is '0' for a stable release, 'B' for a beta release, or 'Z' for a dev build\n# '-TR400B-' (4.0.0 Beta)\n# '-TR400Z-' (4.0.0 Dev)\n# '-TR4000-' (4.0.0)\nBASE62=($(echo {0..9} {A..Z} {a..z}))\npeer_id_prefix=\"-TR${BASE62[$(( 10#$major_version ))]}${BASE62[$(( 10#$minor_version ))]}${BASE62[$(( 10#$patch_version ))]}\"\nif [ \"$is_dev\" = true ]; then\n  peer_id_prefix=\"${peer_id_prefix}Z\"\nelif [ -n \"${beta_number}\" ]; then\n  peer_id_prefix=\"${peer_id_prefix}B\"\nelse\n  peer_id_prefix=\"${peer_id_prefix}0\"\nfi\npeer_id_prefix=\"${peer_id_prefix}-\"\n\nvcs_revision=\nvcs_revision_file=REVISION\n\nif [ -n \"$JENKINS_URL\" ] && [ -n \"$GIT_COMMIT\" ]; then\n  vcs_revision=$GIT_COMMIT\nelif [ -n \"$TEAMCITY_PROJECT_NAME\" ] && [ -n \"$BUILD_VCS_NUMBER\" ]; then\n  vcs_revision=$BUILD_VCS_NUMBER\nelif [ -e \".git\" ] && type git > /dev/null 2>&1; then\n  vcs_revision=$(git rev-list --max-count=1 HEAD)\nelif [ -f \"$vcs_revision_file\" ]; then\n  vcs_revision=$(cat \"$vcs_revision_file\")\nfi\n\nif [ -n \"$vcs_revision\" ]; then\n  [ -f \"$vcs_revision_file\" ] && [ \"$(cat \"$vcs_revision_file\")\" = \"$vcs_revision\" ] || echo \"$vcs_revision\" > \"$vcs_revision_file\"\nelse\n  vcs_revision=0\n  rm -f \"$vcs_revision_file\"\nfi\n\nvcs_revision=$(echo $vcs_revision | head -c10)\n\ncat > libtransmission/version.h.new << EOF\n#pragma once\n\n#define PEERID_PREFIX             \"${peer_id_prefix}\"\n#define USERAGENT_PREFIX          \"${user_agent_prefix}\"\n#define VCS_REVISION              \"${vcs_revision}\"\n#define VCS_REVISION_NUM          ${vcs_revision}\n#define SHORT_VERSION_STRING      \"${user_agent_prefix}\"\n#define LONG_VERSION_STRING       \"${user_agent_prefix} (${vcs_revision})\"\n#define VERSION_STRING_INFOPLIST  ${user_agent_prefix}\n#define BUILD_STRING_INFOPLIST    $((major_version + 14714)).${minor_version}.$((patch_version * 100 + release_number * 99 + beta_number))\n#define MAJOR_VERSION             ${major_version}\n#define MINOR_VERSION             ${minor_version}\n#define PATCH_VERSION             ${patch_version}\nEOF\n\n# Add a release definition\ncase \"${peer_id_prefix}\" in\n  *X-) echo '#define TR_BETA_RELEASE           1' ;;\n  *Z-) echo '#define TR_NIGHTLY_RELEASE        1' ;;\n  *)   echo '#define TR_STABLE_RELEASE         1' ;;\nesac >> \"libtransmission/version.h.new\"\n\nreplace_if_differs libtransmission/version.h.new libtransmission/version.h\n"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}