{
  "metadata": {
    "timestamp": 1736566389249,
    "page": 150,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SFML/SFML",
      "stars": 10509,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 4.392578125,
          "content": "---\n# Project\nStandard: c++17\nColumnLimit: 120\n\n# Indentation\nAccessModifierOffset: -4\nBitFieldColonSpacing: Both\nContinuationIndentWidth: 4\nIndentCaseLabels: true\nIndentCaseBlocks: false\nIndentExternBlock: Indent\nIndentPPDirectives: None\nIndentRequires: true\nIndentWidth: 4\nIndentWrappedFunctionNames: true\nTabWidth: 4\nUseTab: Never\n\n# Alignment\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: Consecutive\nAlignConsecutiveBitFields: Consecutive\nAlignConsecutiveDeclarations: Consecutive\nAlignConsecutiveMacros: Consecutive\nAlignEscapedNewlines: Left\nAlignOperands: Align\nAlignTrailingComments: true\n\n# Allow\nAllowAllArgumentsOnNextLine: false\nAllowAllConstructorInitializersOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortEnumsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAllowShortLambdasOnASingleLine: All\n\n# Break\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: Yes\nBreakBeforeConceptDeclarations: true\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializers: AfterColon\nBreakBeforeBinaryOperators: None\nBreakInheritanceList: AfterColon\nBreakStringLiterals: true\n\n# Initializers & arguments\nBinPackArguments: false\nBinPackParameters: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 0\nCpp11BracedListStyle: true\n\n# Braces\nBreakBeforeBraces: Custom\nBraceWrapping:\n    AfterCaseLabel: true\n    AfterClass: true\n    AfterControlStatement: Always\n    AfterEnum: true\n    AfterFunction: true\n    AfterNamespace: true\n    AfterStruct: true\n    AfterUnion: true\n    AfterExternBlock: true\n    BeforeCatch: false\n    BeforeElse: true\n    BeforeLambdaBody: true\n    BeforeWhile: false\n    IndentBraces: false\n    SplitEmptyFunction: true\n    SplitEmptyRecord: true\n    SplitEmptyNamespace: true\n\n# Namespaces\nCompactNamespaces: false\nFixNamespaceComments: true\nNamespaceIndentation: None\n\n# Derive\nDeriveLineEnding: false\nDerivePointerAlignment: false\n\n# Empty lines\nEmptyLineBeforeAccessModifier: Always\nKeepEmptyLinesAtTheStartOfBlocks: true\nMaxEmptyLinesToKeep: 2\n\n# Sorting\nIncludeBlocks: Regroup\nIncludeCategories:\n  - Priority: 1\n    Regex: '^\\\"(.+)\\\"$'\n  - Priority: 2\n    Regex: '^<SFML\\/Config.hpp>$'\n  - Priority: 3\n    Regex: '^<SFML\\/(.+)\\/Export.hpp>$'\n  - Priority: 4\n    Regex: '^<SFML\\/Graphics'\n  - Priority: 5\n    Regex: '^<SFML\\/Audio'\n  - Priority: 6\n    Regex: '^<SFML\\/Network'\n  - Priority: 7\n    Regex: '^<SFML\\/Window'\n  - Priority: 8\n    Regex: '^<SFML\\/System'\n  - Priority: 9\n    Regex: '^<(glad|gl|X11|jni|android|stb_|GLES2|vorbis|miniaudio|catch2)'\n  - Priority: 10\n    Regex: '^<([^c](.+)|coroutine|charconv|chrono|complex|concepts|condition_variable)>$'\n  - Priority: 11\n    Regex: '^<c(.+)>$'\nSortIncludes: true\nSortUsingDeclarations: true\n\n# Penalties\nPenaltyBreakAssignment: 1000\nPenaltyBreakBeforeFirstCallParameter: 1000\nPenaltyBreakComment: 200\nPenaltyBreakFirstLessLess: 100\nPenaltyBreakString: 1\nPenaltyBreakTemplateDeclaration: 0\nPenaltyExcessCharacter: 5\nPenaltyIndentedWhitespace: 1\nPenaltyReturnTypeOnItsOwnLine: 500\n\n# Pointer alignment\nPointerAlignment: Left\n\n# Comments\nReflowComments: false\n\n# Spaces\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles: false\nSpacesInCStyleCastParentheses: false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\n\n# Line endings\nUseCRLF: false\n\n# Qualifiers (const, volatile, static, etc)\nQualifierAlignment: Custom\nQualifierOrder: ['static', 'inline', 'constexpr', 'const', 'volatile', 'type']\n\n---\nLanguage: ObjC\nIndentWidth: 4\nBreakBeforeBraces: Custom\nBraceWrapping:\n    AfterObjCDeclaration: true\n\nObjCBinPackProtocolList: Never\nObjCBlockIndentWidth: 4\nObjCBreakBeforeNestedBlockParam: true\nObjCSpaceAfterProperty: true\nObjCSpaceBeforeProtocolList: false\n\n...\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 3.4052734375,
          "content": "Checks: >\n  bugprone-*,\n  clang-analyzer-*,\n  cppcoreguidelines-*,\n  misc-*,\n  modernize-*,\n  objc-*,\n  performance-*,\n  portability-*,\n  readability-*,\n  -bugprone-assignment-in-if-condition,\n  -bugprone-branch-clone,\n  -bugprone-casting-through-void,\n  -bugprone-easily-swappable-parameters,\n  -bugprone-exception-escape,\n  -bugprone-implicit-widening-of-multiplication-result,\n  -bugprone-integer-division,\n  -bugprone-misplaced-widening-cast,\n  -bugprone-narrowing-conversions,\n  -bugprone-signed-char-misuse,\n  -bugprone-string-integer-assignment,\n  -bugprone-suspicious-stringview-data-usage,\n  -bugprone-switch-missing-default-case,\n  -bugprone-unchecked-optional-access,\n  -clang-analyzer-nullability.NullablePassedToNonnull,\n  -clang-analyzer-optin.core.EnumCastOutOfRange,\n  -clang-analyzer-optin.cplusplus.VirtualCall,\n  -clang-analyzer-optin.osx.*,\n  -clang-analyzer-osx.*,\n  -clang-analyzer-unix.Malloc,\n  -clang-analyzer-unix.StdCLibraryFunctions,\n  -cppcoreguidelines-avoid-const-or-ref-data-members,\n  -cppcoreguidelines-avoid-do-while,\n  -cppcoreguidelines-avoid-magic-numbers,\n  -cppcoreguidelines-avoid-non-const-global-variables,\n  -cppcoreguidelines-macro-to-enum,\n  -cppcoreguidelines-macro-usage,\n  -cppcoreguidelines-narrowing-conversions,\n  -cppcoreguidelines-non-private-member-variables-in-classes,\n  -cppcoreguidelines-owning-memory,\n  -cppcoreguidelines-prefer-member-initializer,\n  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,\n  -cppcoreguidelines-pro-bounds-constant-array-index,\n  -cppcoreguidelines-pro-bounds-pointer-arithmetic,\n  -cppcoreguidelines-pro-type-const-cast,\n  -cppcoreguidelines-pro-type-reinterpret-cast,\n  -cppcoreguidelines-pro-type-static-cast-downcast,\n  -cppcoreguidelines-pro-type-union-access,\n  -cppcoreguidelines-pro-type-vararg,\n  -cppcoreguidelines-rvalue-reference-param-not-moved,\n  -cppcoreguidelines-special-member-functions,\n  -misc-include-cleaner,\n  -misc-misplaced-const,\n  -misc-no-recursion,\n  -misc-non-private-member-variables-in-classes,\n  -modernize-macro-to-enum,\n  -modernize-use-trailing-return-type,\n  -performance-avoid-endl,\n  -performance-enum-size,\n  -performance-inefficient-string-concatenation,\n  -performance-no-int-to-ptr,\n  -readability-avoid-nested-conditional-operator,\n  -readability-braces-around-statements,\n  -readability-convert-member-functions-to-static,\n  -readability-enum-initial-value,\n  -readability-function-cognitive-complexity,\n  -readability-function-size,\n  -readability-identifier-length,\n  -readability-implicit-bool-conversion,\n  -readability-magic-numbers,\n  -readability-math-missing-parentheses,\n  -readability-named-parameter,\n  -readability-redundant-casting,\n  -readability-uppercase-literal-suffix,\nCheckOptions:\n  - { key: readability-identifier-naming.ClassCase,           value: CamelCase }\n  - { key: readability-identifier-naming.FunctionCase,        value: camelBack }\n  - { key: readability-identifier-naming.VariableCase,        value: camelBack }\n  - { key: readability-identifier-naming.ParameterCase,       value: camelBack }\n  - { key: readability-identifier-naming.MemberCase,          value: camelBack }\n  - { key: readability-identifier-naming.PrivateMemberCase,   value: camelBack }\n  - { key: readability-identifier-naming.ProtectedMemberPrefix, value: m_ }\n  - { key: readability-identifier-naming.PrivateMemberPrefix,   value: m_ }\nHeaderFilterRegex: '((.*/(src|include)/SFML/.*)|(.*/(test|examples)/.*))'\nWarningsAsErrors: '*'\nUseColor: true\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5087890625,
          "content": "# Configuration file for EditorConfig\n# More information is available under http://EditorConfig.org\n\n# Ignore any other files further up in the file system\nroot = true\n\n# Configuration for all files\n[*]\n# Enforce Unix style line endings (\\n only)\nend_of_line = lf\n# Always end files with a blank line\ninsert_final_newline = true\n# Force space characters for indentation\nindent_style = space\n# Always indent by 4 characters\nindent_size = 4\n# Remove whitespace characters at the end of line\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1962890625,
          "content": "* text=auto eol=lf\n\nextlibs/**/* -text -eol linguist-vendored\n\n*.png -text -eol\n*.jpg -text -eol\n*.wav -text -eol\n*.ogg -text -eol\n*.flac -text -eol\n*.ttf -text -eol\n*.icns -text -eol\n*.rtf -text -eol\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0712890625,
          "content": ".cache/\n.idea/\n.vs/\n.vscode/\nbuild/\ncmake-build-*/\nCMakeUserPresets.json\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 18.87890625,
          "content": "if(CMAKE_HOST_WIN32)\n    # We require a CMake version greater than or equal to 3.24 on Windows in order to\n    # support specifying target_include_directories with SYSTEM for Visual Studio Generators\n    # see: https://cmake.org/cmake/help/latest/release/3.24.html#generators\n    cmake_minimum_required(VERSION 3.24)\nelse()\n    # For all other systems, 3.22 will suffice\n    cmake_minimum_required(VERSION 3.22)\nendif()\n\n# define a macro that helps defining an option\nmacro(sfml_set_option var default type docstring)\n    if(NOT DEFINED ${var})\n        set(${var} ${default})\n    endif()\n    set(${var} ${${var}} CACHE ${type} ${docstring} FORCE)\nendmacro()\n\n# these options have to be set before CMake detects/configures the toolchain\n\n# use new MSVC debug information format specification mechanism if available\n# we use this mechanism to embed debug information into the object file to allow ccache to cache it\nif(POLICY CMP0141)\n    cmake_policy(SET CMP0141 NEW)\nendif()\n\n# determine whether to create a debug or release build\nsfml_set_option(CMAKE_BUILD_TYPE Release STRING \"Choose the type of build (Debug or Release)\")\nsfml_set_option(CMAKE_OSX_DEPLOYMENT_TARGET \"13.0\" STRING \"The minimal iOS version that will be able to run the built binaries. Cannot be lower than 13.0\")\n\n# project name\nproject(SFML VERSION 3.1.0)\n\nset(VERSION_IS_RELEASE OFF)\n\n# include the configuration file\ninclude(cmake/Config.cmake)\n\n# we use the paths from the cmake GNUInstallDirs module as defaults\n# you can override these if you like\n# https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html\ninclude(GNUInstallDirs)\n\n# disable static libraries on Android\nif(SFML_OS_ANDROID)\n    set(BUILD_SHARED_LIBS ON)\nendif()\n\n# add options to select which modules to build\nsfml_set_option(SFML_BUILD_WINDOW ON BOOL \"ON to build SFML's Window module. This setting is ignored, if the graphics module is built.\")\nsfml_set_option(SFML_BUILD_GRAPHICS ON BOOL \"ON to build SFML's Graphics module.\")\nsfml_set_option(SFML_BUILD_AUDIO ON BOOL \"ON to build SFML's Audio module.\")\nsfml_set_option(SFML_BUILD_NETWORK ON BOOL \"ON to build SFML's Network module.\")\n\nif(SFML_BUILD_WINDOW)\n    # add an option for choosing the OpenGL implementation\n    sfml_set_option(SFML_OPENGL_ES ${OPENGL_ES} BOOL \"ON to use an OpenGL ES implementation, OFF to use a desktop OpenGL implementation\")\n\n    # add an option for choosing whether to use the DRM windowing backend\n    if(SFML_OS_LINUX)\n        sfml_set_option(SFML_USE_DRM OFF BOOL \"ON to use DRM windowing backend\")\n    endif()\nendif()\n\n# macOS specific options\nif(SFML_OS_MACOS OR SFML_OS_IOS)\n    # add an option to build frameworks instead of dylibs (release only)\n    sfml_set_option(SFML_BUILD_FRAMEWORKS OFF BOOL \"ON to build SFML as frameworks libraries (release only), OFF to build according to BUILD_SHARED_LIBS\")\n\n    # add an option to automatically install Xcode templates\n    sfml_set_option(SFML_INSTALL_XCODE_TEMPLATES OFF BOOL \"ON to automatically install the Xcode templates, OFF to do nothing about it. The templates are compatible with Xcode 4 and 5.\")\nendif()\n\n# Android options\nif(SFML_OS_ANDROID)\n    sfml_set_option(SFML_ANDROID_USE_SUSPEND_AWARE_CLOCK OFF BOOL \"ON to use an sf::Clock implementation which takes system sleep time into account (keeps advancing during suspension), OFF to default to another available monotonic clock\")\n    if(SFML_ANDROID_USE_SUSPEND_AWARE_CLOCK)\n        add_definitions(-DSFML_ANDROID_USE_SUSPEND_AWARE_CLOCK)\n    endif()\n\n    # avoid missing libraries when building SFML for Android with NDK r19c and later\n    list(PREPEND CMAKE_FIND_ROOT_PATH \"${PROJECT_SOURCE_DIR}\")\n\n    # install everything in $NDK/sources/ because this path is appended by the NDK (convenient)\n    set(CMAKE_INSTALL_PREFIX ${CMAKE_ANDROID_NDK}/sources/third_party/sfml)\n\n    # we install libs in a subdirectory named after the ABI\n    set(CMAKE_INSTALL_LIBDIR \"${CMAKE_INSTALL_LIBDIR}/${CMAKE_ANDROID_ARCH_ABI}\")\nendif()\n\n# Install directories\n# For miscellaneous files\nif(SFML_OS_WINDOWS OR SFML_OS_IOS)\n    set(DEFAULT_INSTALL_MISC_DIR .)\nelseif(SFML_OS_LINUX OR SFML_OS_FREEBSD OR SFML_OS_OPENBSD OR SFML_OS_NETBSD)\n    set(DEFAULT_INSTALL_MISC_DIR share/SFML)\nelseif(SFML_OS_MACOS)\n    set(DEFAULT_INSTALL_MISC_DIR /usr/local/share/SFML)\nelseif(SFML_OS_ANDROID)\n    set(DEFAULT_INSTALL_MISC_DIR ${CMAKE_ANDROID_NDK}/sources/third_party/sfml)\nendif()\n\n# force building sfml-window, if sfml-graphics module is built\nif(SFML_BUILD_GRAPHICS AND NOT SFML_BUILD_WINDOW)\n    message(WARNING \"You're trying to build SFML's Graphics module without the Window module. Forcing building of the Window module as a dependency.\")\n    set(SFML_BUILD_WINDOW ON)\nendif()\n\n# use bundled dependencies by default on these systems and system dependencies by default on all others (maintains old behavior)\nif(SFML_OS_WINDOWS OR SFML_OS_MACOS OR SFML_OS_IOS OR SFML_OS_ANDROID)\n    set(SFML_USE_SYSTEM_DEPS_DEFAULT OFF)\nelse()\n    set(SFML_USE_SYSTEM_DEPS_DEFAULT ON)\nendif()\n\nsfml_set_option(SFML_USE_SYSTEM_DEPS ${SFML_USE_SYSTEM_DEPS_DEFAULT} BOOL \"ON to use system dependencies, OFF to use the bundled ones.\")\nif(SFML_USE_SYSTEM_DEPS AND SFML_INSTALL_XCODE_TEMPLATES)\n    message(FATAL_ERROR \"XCode templates installation cannot be used with the SFML_USE_SYSTEM_DEPS option (the bundled frameworks are required.)\")\nendif()\n\nif(SFML_COMPILER_MSVC)\n    # add an option to choose whether PDB debug symbols should be generated (defaults to true when possible)\n    sfml_set_option(SFML_GENERATE_PDB ON BOOL \"True to generate PDB debug symbols, OFF otherwise.\")\n\n    # if building using a compiler launcher, embed the MSVC debugging information to allow for caching\n    if(CMAKE_CXX_COMPILER_LAUNCHER)\n        set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT \"$<$<CONFIG:Debug,RelWithDebInfo>:Embedded>\")\n    endif()\nendif()\n\n# define SFML_OPENGL_ES if needed\nif(SFML_OPENGL_ES)\n    add_definitions(-DSFML_OPENGL_ES)\n    add_definitions(-DGL_GLEXT_PROTOTYPES)\nendif()\n\n# define an option for choosing between static and dynamic C runtime (Windows only)\nif(SFML_OS_WINDOWS)\n    sfml_set_option(SFML_USE_STATIC_STD_LIBS OFF BOOL \"ON to statically link to the standard libraries, OFF to use them as DLLs\")\n\n    # the following combination of flags is not valid\n    if(BUILD_SHARED_LIBS AND SFML_USE_STATIC_STD_LIBS)\n        message(FATAL_ERROR \"BUILD_SHARED_LIBS and SFML_USE_STATIC_STD_LIBS cannot be used together\")\n    endif()\n\n    sfml_set_option(SFML_USE_MESA3D OFF BOOL \"ON to use the Mesa 3D graphics library for rendering, OFF to use the system provided library for rendering\")\n\n    include(cmake/Mesa3D.cmake)\nendif()\n\n# setup macOS stuff\nif(SFML_OS_MACOS)\n    # SFML_BUILD_FRAMEWORKS needs two things:\n    # first, it's available only for release\n    #    (because cmake currently doesn't allow specifying a custom framework name so XXX-d is not possible)\n    # secondly, it works only with BUILD_SHARED_LIBS enabled\n    if(SFML_BUILD_FRAMEWORKS)\n        # requirement #1\n        if(NOT CMAKE_BUILD_TYPE STREQUAL \"Release\")\n            message(FATAL_ERROR \"CMAKE_BUILD_TYPE should be \\\"Release\\\" when SFML_BUILD_FRAMEWORKS is ON\")\n            return()\n        endif()\n\n        # requirement #2\n        if(NOT BUILD_SHARED_LIBS)\n            message(FATAL_ERROR \"BUILD_SHARED_LIBS should be ON when SFML_BUILD_FRAMEWORKS is ON\")\n            return()\n        endif()\n    endif()\n\n    # configure Xcode templates\n    set(XCODE_TEMPLATES_ARCH \"\\$(NATIVE_ARCH_ACTUAL)\")\n\n    if(NOT SFML_COMPILER_CLANG)\n        message(FATAL_ERROR \"Clang is the only supported compiler on macOS\")\n    endif()\nendif()\n\noption(SFML_ENABLE_SANITIZERS \"Enable sanitizers\" OFF)\nif(SFML_ENABLE_SANITIZERS)\n    string(APPEND CMAKE_CXX_FLAGS \" -fno-omit-frame-pointer -fno-sanitize-recover=all -fsanitize=undefined\")\nendif()\n\noption(SFML_ENABLE_STDLIB_ASSERTIONS \"Enable standard library assertions\" OFF)\nif(SFML_ENABLE_STDLIB_ASSERTIONS)\n    # intentionally using `add_definitions` here to propagate defines to subdirectories\n    add_definitions(-D_GLIBCXX_ASSERTIONS=1)                                   # see https://gcc.gnu.org/wiki/LibstdcxxDebugMode\n    add_definitions(-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE) # see https://libcxx.llvm.org/Hardening.html\nendif()\n\n# set the output directory for SFML DLLs and executables\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)\n\n# enable project folders\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\nset_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER \"CMake\")\n\n# add the subdirectories\nadd_subdirectory(src/SFML)\n\n# on Linux and BSD-like OS, install pkg-config files by default\nset(SFML_INSTALL_PKGCONFIG_DEFAULT OFF)\n\nif(SFML_OS_LINUX OR SFML_OS_FREEBSD OR SFML_OS_OPENBSD OR SFML_OS_NETBSD)\n    set(SFML_INSTALL_PKGCONFIG_DEFAULT ON)\nendif()\n\nsfml_set_option(SFML_INSTALL_PKGCONFIG_FILES ${SFML_INSTALL_PKGCONFIG_DEFAULT} BOOL \"ON to automatically install pkg-config files so other projects can find SFML\")\n\nif(SFML_INSTALL_PKGCONFIG_FILES)\n    # account for CMAKE_INSTALL_LIBDIR potentially being an absolute path\n    file(RELATIVE_PATH SFML_RELATIVE_INSTALL_LIBDIR ${CMAKE_INSTALL_PREFIX} ${CMAKE_INSTALL_FULL_LIBDIR})\n\n    # set pkgconfig install directory\n    # this could be e.g. macports on mac or msys2 on windows etc.\n    set(SFML_PKGCONFIG_DIR \"${SFML_RELATIVE_INSTALL_LIBDIR}/pkgconfig\")\n\n    if(SFML_OS_FREEBSD OR SFML_OS_OPENBSD OR SFML_OS_NETBSD)\n        set(SFML_PKGCONFIG_DIR \"libdata/pkgconfig\")\n    endif()\n\n    sfml_set_option(SFML_PKGCONFIG_INSTALL_DIR \"${SFML_PKGCONFIG_DIR}\" PATH \"Install directory for SFML's pkg-config .pc files\")\n\n    foreach(sfml_module IN ITEMS all system window graphics audio network)\n        configure_file(\n            \"tools/pkg-config/sfml-${sfml_module}.pc.in\"\n            \"tools/pkg-config/sfml-${sfml_module}.pc\"\n            @ONLY)\n        install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/tools/pkg-config/sfml-${sfml_module}.pc\"\n            DESTINATION \"${SFML_PKGCONFIG_INSTALL_DIR}\")\n    endforeach()\nendif()\n\n# option to enable precompiled headers\nsfml_set_option(SFML_ENABLE_PCH OFF BOOL \"ON to enable precompiled headers for SFML builds -- only supported on Windows/Linux and for static library builds\")\n\nif(SFML_ENABLE_PCH AND BUILD_SHARED_LIBS)\n    message(FATAL_ERROR \"Precompiled headers are currently not supported for shared library builds\")\nendif()\n\nif(SFML_ENABLE_PCH AND SFML_OS_MACOS)\n    message(FATAL_ERROR \"Precompiled headers are currently not supported in macOS builds\")\nendif()\n\n# setup the install rules\nif(NOT SFML_BUILD_FRAMEWORKS)\n    install(DIRECTORY include/\n            DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n            COMPONENT devel\n            FILES_MATCHING PATTERN \"*.hpp\" PATTERN \"*.inl\")\n    install(DIRECTORY cmake/Modules/\n            DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/SFML\n            COMPONENT devel)\n\n    if(SFML_GENERATE_PDB)\n        install(DIRECTORY ${PROJECT_BINARY_DIR}/lib/\n                DESTINATION ${CMAKE_INSTALL_LIBDIR}\n                COMPONENT devel\n                FILES_MATCHING PATTERN \"*.pdb\")\n    endif()\nelse()\n    # find only \"root\" headers\n    file(GLOB SFML_HEADERS RELATIVE ${PROJECT_SOURCE_DIR} \"include/SFML/*\")\n\n    # Because we use generator expressions in the post build scripts we need to\n    # suppress the generation of \"EFFECTIVE_PLATFORM_NAME\" as it will fail\n    set_property(GLOBAL PROPERTY XCODE_EMIT_EFFECTIVE_PLATFORM_NAME OFF)\n\n    # in fact we have to fool cmake to copy all the headers in subdirectories\n    # to do that we have to add the \"root\" headers to the PUBLIC_HEADER\n    # then we can run a post script to copy the remaining headers\n\n    # we need a dummy file in order to compile the framework\n    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/dummy.cpp\n                       COMMAND touch ${CMAKE_CURRENT_BINARY_DIR}/dummy.cpp\n                       VERBATIM)\n\n    set(SFML_SOURCES ${SFML_HEADERS})\n    list(APPEND SFML_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/dummy.cpp)\n\n    # create SFML.framework\n    add_library(SFML ${SFML_SOURCES})\n\n    # enable C++17 support\n    target_compile_features(SFML PUBLIC cxx_std_17)\n\n    # set the target flags to use the appropriate C++ standard library\n    sfml_set_stdlib(SFML)\n\n    # edit target properties\n    set_target_properties(SFML PROPERTIES\n                          FRAMEWORK ON\n                          FRAMEWORK_VERSION ${PROJECT_VERSION}\n                          MACOSX_FRAMEWORK_IDENTIFIER org.sfml-dev.SFML\n                          MACOSX_FRAMEWORK_SHORT_VERSION_STRING ${PROJECT_VERSION}\n                          MACOSX_FRAMEWORK_BUNDLE_VERSION ${PROJECT_VERSION}\n                          PUBLIC_HEADER \"${SFML_HEADERS}\")\n\n    # add the non-optional SFML headers\n    add_custom_command(TARGET SFML POST_BUILD COMMAND cp -r\n                       ${PROJECT_SOURCE_DIR}/include/SFML/Config.hpp\n                       ${PROJECT_SOURCE_DIR}/include/SFML/OpenGL.hpp\n                       ${PROJECT_SOURCE_DIR}/include/SFML/GpuPreference.hpp\n                       ${PROJECT_SOURCE_DIR}/include/SFML/System.hpp\n                       ${PROJECT_SOURCE_DIR}/include/SFML/Main.hpp\n                       ${PROJECT_SOURCE_DIR}/include/SFML/System\n                       $<TARGET_FILE_DIR:SFML>/Headers\n                       VERBATIM)\n\n    # add window module headers if enabled\n    if(SFML_BUILD_WINDOW)\n        add_custom_command(TARGET SFML POST_BUILD COMMAND cp -r\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Window.hpp\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Window\n                           $<TARGET_FILE_DIR:SFML>/Headers\n                           VERBATIM)\n    endif()\n\n    # add network module headers if enabled\n    if(SFML_BUILD_NETWORK)\n        add_custom_command(TARGET SFML POST_BUILD COMMAND cp -r\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Network.hpp\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Network\n                           $<TARGET_FILE_DIR:SFML>/Headers\n                           VERBATIM)\n    endif()\n\n     # add graphics module headers if enabled\n    if(SFML_BUILD_GRAPHICS)\n        add_custom_command(TARGET SFML POST_BUILD COMMAND cp -r\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Graphics.hpp\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Graphics\n                           $<TARGET_FILE_DIR:SFML>/Headers\n                           VERBATIM)\n    endif()\n\n     # add audio module headers if enabled\n    if(SFML_BUILD_AUDIO)\n        add_custom_command(TARGET SFML POST_BUILD COMMAND cp -r\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Audio.hpp\n                           ${PROJECT_SOURCE_DIR}/include/SFML/Audio\n                           $<TARGET_FILE_DIR:SFML>/Headers\n                           VERBATIM)\n    endif()\n\n    # adapt install directory to allow distributing dylibs/frameworks in user's frameworks/application bundle\n    # NOTE: it's not required to link against SFML.framework\n    set_target_properties(SFML PROPERTIES INSTALL_NAME_DIR \"@rpath\")\n    if(NOT CMAKE_SKIP_BUILD_RPATH)\n        set_target_properties(SFML PROPERTIES BUILD_WITH_INSTALL_NAME_DIR ON)\n    endif()\n\n    # install rule\n    install(TARGETS SFML\n            FRAMEWORK DESTINATION \".\"\n            COMPONENT devel)\nendif()\n\ninstall(FILES license.md DESTINATION ${CMAKE_INSTALL_DOCDIR})\ninstall(FILES readme.md DESTINATION ${CMAKE_INSTALL_DOCDIR})\n\n# install the Xcode templates if requested\nif(SFML_INSTALL_XCODE_TEMPLATES)\n    # configure the templates plist files\n    foreach(TEMPLATE \"SFML Compiler\" \"SFML App\")\n        configure_file(\n                    \"tools/xcode/templates/SFML/${TEMPLATE}.xctemplate/TemplateInfo.plist.in\"\n                    \"${CMAKE_CURRENT_BINARY_DIR}/tools/xcode/templates/SFML/${TEMPLATE}.xctemplate/TemplateInfo.plist\"\n                    @ONLY)\n    endforeach()\n    install(DIRECTORY \"tools/xcode/templates/SFML\" \"${CMAKE_CURRENT_BINARY_DIR}/tools/xcode/templates/SFML\"\n            DESTINATION /Library/Developer/Xcode/Templates\n            PATTERN \"*.in\" EXCLUDE\n            PATTERN \".DS_Store\" EXCLUDE)\nendif()\n\nsfml_export_targets()\n\n# configure extras by default when building SFML directly, otherwise hide them\nsfml_set_option(SFML_CONFIGURE_EXTRAS ${PROJECT_IS_TOP_LEVEL} BOOL \"ON to configure extras, OFF to ignore them\")\n\nif(NOT SFML_CONFIGURE_EXTRAS)\n    return()\nendif()\n\nset(CPACK_PACKAGE_NAME_SUMMARY \"Simple and Fast Multimedia Library\")\nset(CPACK_PACKAGE_VENDOR \"SFML Team\")\nset(CPACK_PACKAGE_FILE_NAME \"SFML-${PROJECT_VERSION}-${CMAKE_CXX_COMPILER_ID}-${CMAKE_CXX_COMPILER_VERSION}-${CMAKE_BUILD_TYPE}\")\nset(CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_SOURCE_DIR}/readme.md\")\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/license.md\")\nset(CPACK_PACKAGE_VERSION_MAJOR \"${PROJECT_VERSION_MAJOR}\")\nset(CPACK_PACKAGE_VERSION_MINOR \"${PROJECT_VERSION_MINOR}\")\nset(CPACK_PACKAGE_VERSION_PATCH \"${PROJECT_VERSION_PATCH}\")\nset(CPACK_PACKAGE_INSTALL_DIRECTORY \"SFML ${PROJECT_VERSION}\")\nset(CPACK_MONOLITHIC_INSTALL ON)\n\n# NSIS configurations\nset(CPACK_NSIS_DISPLAY_NAME \"SFML ${PROJECT_VERSION} (${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION})\")\nset(CPACK_NSIS_CONTACT \"team@sfml-dev.org\")\nset(NSIS_IMAGE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/tools/nsis/\")\nstring(REGEX REPLACE \"/\" \"\\\\\\\\\\\\\\\\\" NSIS_IMAGE_PATH ${NSIS_IMAGE_PATH})\nset(CPACK_NSIS_INSTALLER_MUI_ICON_CODE \"!define MUI_WELCOMEFINISHPAGE_BITMAP \\\\\\\"${NSIS_IMAGE_PATH}sidebar.bmp\\\\\\\"\\n!define MUI_HEADERIMAGE_BITMAP \\\\\\\"${NSIS_IMAGE_PATH}header.bmp\\\\\\\"\\n!define MUI_ICON \\\\\\\"${NSIS_IMAGE_PATH}sfml.ico\\\\\\\"\")\n\ninclude(CPack)\n\n# add an option for building the API documentation\nsfml_set_option(SFML_BUILD_DOC OFF BOOL \"ON to generate the API documentation, OFF to ignore it\")\nif(SFML_BUILD_DOC)\n    add_subdirectory(doc)\nendif()\n\n# add an option for building the examples\nsfml_set_option(SFML_BUILD_EXAMPLES OFF BOOL \"ON to build the SFML examples, OFF to ignore them\")\nif(SFML_BUILD_EXAMPLES AND NOT SFML_OS_ANDROID)\n    add_subdirectory(examples)\nendif()\n\n# add an option for building the test suite\nsfml_set_option(SFML_BUILD_TEST_SUITE OFF BOOL \"ON to build the SFML test suite, OFF to ignore it\")\n\n# add an option for enabling coverage reporting\nsfml_set_option(SFML_ENABLE_COVERAGE OFF BOOL \"ON to enable coverage reporting, OFF to ignore it\")\n\nif(SFML_BUILD_TEST_SUITE)\n    if(SFML_BUILD_WINDOW AND SFML_BUILD_GRAPHICS AND SFML_BUILD_NETWORK AND SFML_BUILD_AUDIO)\n        enable_testing()\n        add_subdirectory(test)\n    else()\n        message(WARNING \"Cannot build unit testing unless all modules are enabled\")\n    endif()\nendif()\n\nsfml_set_option(CLANG_FORMAT_EXECUTABLE clang-format STRING \"Override clang-format executable, requires version 17\")\nadd_custom_target(format\n    COMMAND ${CMAKE_COMMAND} -DCLANG_FORMAT_EXECUTABLE=${CLANG_FORMAT_EXECUTABLE} -P ./cmake/Format.cmake\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} VERBATIM)\n\nsfml_set_option(CLANG_TIDY_EXECUTABLE clang-tidy STRING \"Override clang-tidy executable, requires minimum version 14\")\nadd_custom_target(tidy\n    COMMAND ${CMAKE_COMMAND} -DCLANG_TIDY_EXECUTABLE=${CLANG_TIDY_EXECUTABLE} -DPROJECT_BINARY_DIR=${PROJECT_BINARY_DIR} -P ./cmake/Tidy.cmake\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} VERBATIM)\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 0.4306640625,
          "content": "{\n  \"version\": 3,\n  \"configurePresets\":[\n    {\n      \"name\": \"dev\",\n      \"binaryDir\": \"build\",\n      \"installDir\": \"${sourceDir}/build/install\",\n      \"cacheVariables\": {\n        \"CMAKE_CXX_EXTENSIONS\": \"OFF\",\n        \"CMAKE_EXPORT_COMPILE_COMMANDS\": \"ON\",\n        \"SFML_BUILD_EXAMPLES\": \"ON\",\n        \"SFML_BUILD_TEST_SUITE\": \"ON\",\n        \"SFML_ENABLE_STDLIB_ASSERTIONS\": \"ON\",\n        \"SFML_WARNINGS_AS_ERRORS\": \"ON\"\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.6767578125,
          "content": "# Contribution Guidelines\n\nYou would like to see a feature implemented or a bug fixed in SFML? Great!  Contributions to SFML are highly appreciated, be it in the form of general ideas, concrete suggestions or code patches.\n\n[A few guiding rules have been set up on the SFML website](https://www.sfml-dev.org/contribute.php) that you should be aware of before opening an Issue or Pull Request. They will help you focus on the important stuff and prevent you from losing (y)our time with requests that are out of SFML's scope, known issues, and so on.\n\nThose rules cover the general scope defined for this project, a coding style, and a precise procedure to report bugs or suggest new features.\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 44.291015625,
          "content": "# Changelog\n\n## SFML 3.0.0\n\nFor a closer look at breaking changes and how to migrate from SFML 2, check out the [migration guide](migration.md).\n\n### General\n\n-   Raised C++ requirement to C++17 (#1855)\n-   Modernized internals to the full extent allowed by C++17\n-   Upgraded to CMake 3.22 (#2543)\n-   Added many unit tests with >50% code coverage\n-   Added many new CI jobs for a huge variety of platforms and configurations\n-   Added clang-tidy config\n-   Added clang-format config\n-   Removed OpenAL shared library requirement (#2749)\n-   Used `[[nodiscard]]` (#1891, #1889, #1888, #1887, #1890, #1887, #2010, #3137, #3138)\n-   Made many APIs `constexpr`-capable (#1903, #1909, #1904, #1910, #1934, #1937, #1999, #2000, #2377)\n-   Changed many `(x, y)` APIs to instead use `sf::Vector2<T>` (#1902, #1942, #1948, #2055, #2972)\n-   Removed deprecated APIs (#1881, #1886)\n-   Added `SFML::` namespace to CMake targets (#1947)\n-   Added support for PCH builds via `SFML_ENABLE_PCH` CMake option (#1895)\n-   Added CMake preset to do developer builds (#2642)\n-   Added move semantics to many types (#1932, #2014, #2016, #2273, #2276, #2277, #2329, #2487, #2658, #2656, #2805, #3142)\n-   Added debug assertions to catch common bugs (#2404, #2586, #2595, #2682, #2725, #3122, #3211)\n-   Changed default library type from shared to static (#2646)\n-   Converted some types to aggregates (#2590, #2898, #3034)\n-   Converted APIs to use `std::string_view` over C-style string parameters (#3039, #3040)\n-   Converted structs to namespaces (#2320)\n-   Used `std::filesystem::path` in function parameters (#1964, #2599)\n-   Converted C-style enumerations to scoped enumerations (#2131, #2286, #2374, #2822, #2850, #2891, #2962)\n-   Improved error messages (#2043, #2636, #2689)\n-   Removed custom fixed width integer aliases (#2192, #2196, #2199, #2200)\n-   Improved object lifetime safety (#2332, #2336, #3126)\n-   Used `std::optional` to express nullable parameters and return values (#1952, #2449, #2756, #2803, #2963, #2964, #3106)\n-   [Android] Removed sfml-activity (#2783)\n-   Consistently used `getNativeHandle` function name (#2669)\n-   [Windows] Added support for UCRT MinGW (#3115)\n-   [Windows] Added support for Windows ARM64 (#3111)\n-   Added throwing constructors (#3152)\n-   Fixed `OPTIONAL_COMPONENTS` when finding SFML via `find_package` (#2052)\n-   [Nix] Fixed pkg-config support on Nix (#2835)\n\n### System\n\n**Features**\n\n-   Replaced multithreading primitives with standard C++ ones (#1863)\n-   Replaced `sf::NonCopyable` with `= delete` (#1901)\n-   Added `sf::Angle` (#1969)\n-   Added extension methods for `sf::Vector2<T>` (#1979)\n-   Made `sf::Clock` pausable (#2004)\n-   Added polar coordinate `sf::Vector2<T>` constructor (#2085)\n-   Added extension methods for `sf::Vector3<T>` (#2086)\n-   Improved `sf::Time` interoperability with `<chrono>` (#2133)\n-   Removed `sf::MemoryInputStream` default constructor (#3085)\n-   Disallowed constructing `sf::String` from `nullptr` (#3144)\n\n**Bugfixes**\n\n-   Fixed condition for trailing bytes count in UTF-8 decoder (#2435)\n\n### Window\n\n**Features**\n\n-   Added `sf::WindowBase::set{Min|Max}imumSize()` (#2519)\n-   Optimized WGL context creation performance on some systems (#2616)\n-   Rewrote `sf::Event` API to improve type safety (#2766)\n-   Added `sf::State` for specifying fullscreen or floating windows (#2818)\n-   Renamed `XButton1` and `XButton2` to `Extra1` and `Extra2` (#2838)\n-   Added raw mouse input support (#3057)\n-   Added `timeout` parameter to `waitEvent` (#3094)\n\n**Bugfixes**\n\n-   [Windows] Fixed OpenGL entry point loading on Windows (#2478)\n-   Fixed `wglGetProcAddress` not providing OpenGL 1.1 functions when the context is provided by an Nvidia ICD (#2498)\n-   [macOS] Fixed macOS window resizing bug (#2538)\n-   [macOS] Fixed macOS window height bug (#2631)\n-   Fixed `sf::Context::setActive` bug (#2816)\n-   [Windows] Fixed F13-F24 and consumer key names not being returned on Windows (#2873)\n-   [Windows] Changed `sf::Context::getFunction` to return `nullptr` when called on Windows without an active context (#2925)\n-   [Linux] Fixed broken joystick axis mappings under Linux (#3167)\n-   [macOS] Fixed how macOS fullscreen video modes are detected (#3151, #3348)\n-   [macOS] Avoided unnecessary permission request prompts (#3232)\n-   [Linux] Fixed DRM mode setting to use SFML window dimensions (#3310)\n\n### Graphics\n\n**Features**\n\n-   Added support for stencil testing (#1453)\n-   Added texture coordinate type to `sf::RenderStates` (#1807)\n-   Added `bool` return value to `sf::Image::copy` to signal success/failure (#2137)\n-   Reduced `sf::Transformable` object size (#2288)\n-   Allowed setting window icon with `sf::Image` (#2417)\n-   Removed `sf::Text` default constructor (#2486)\n-   Removed `sf::Sprite` default constructor (#2494)\n-   Added `sf::Shape::getGeometricCenter()` (#2537)\n-   Changed pointer return type to reference (#2637)\n-   Added `sf::Rect<T>::getCenter()` (#2776)\n-   Removed `sf::View::reset` in favor of assignment operations (#2942)\n-   Implemented `sf::Rect<T>` as position and size vectors (#2972)\n-   Ensured a new font page in `sf::Font::loadPage` is created only when needed (#3099)\n-   Renamed `sf::Font::loadFromFile` to `sf::Font::openFromFile` (#3129)\n\n**Bugfixes**\n\n-   Fixed EGL pixel format selection and OpenGL version parsing (#2438)\n-   [Android] Fixed texture being upside down on Android when copying the texture of an `sf::RenderTexture` (#2719)\n-   Fixed FBO `sf::RenderTarget` tracking (#2726)\n-   Fixed shader loading check for empty streams (#2869)\n-   Added sanity checks for OpenGL extensions to make sure the required entry points are actually available (#3052)\n-   Fixed cache state not correctly being ignored when switching between `sf::RenderTarget`s within a single context (#3114)\n-   Correctly drained OpenGL errors in [E]GLCheck (#3247)\n\n### Audio\n\n**Features**\n\n-   Removed `sf::Sound` default constructor (#2640)\n-   Replaced audio backend with miniaudio (#2749)\n-   Added support for user defined sound effect implementations (#2973)\n-   Added support for changing the audio playback device during runtime (#3029)\n-   Renamed `getLoop()` to `isLooping()` and `setLoop()` to `setLooping()` (#3187)\n\n**Bugfixes**\n\n-   Fixed `sf::SoundStream::play` bug (#2037)\n-   Fixed poor `sf::SoundStream::setPlayingOffset` precision (#3101)\n-   Fixed a bug when reading Ogg files on big endian systems (#3340)\n\n### Network\n\n**Bugfixes**\n\n-   Removed invalid internal state from `sf::IpAddress` (#2145)\n-   Fixed sockets not closing before being moved into (#2758)\n-   Fixed how `sf::IpAddress`'s internal representation is stored on big endian systems (#3339)\n\n## SFML 2.6.2\n\n### General\n\n-   Ensure GNUInstallDirs cache vars are included before first used (#2778, #2779)\n-   [macOS] Fix incorrect variable expansion (#2780)\n-   Replace deprecated CMake command `exec_program` (#2888)\n-   Fix Doxygen Generation (#2986, #2812, #2813)\n-   [iOS] Use built-in iOS support for CMake (#3113)\n-   [Windows] Fix `SFML_USE_STATIC_STD_LIBS` behavior (#3131)\n-   [Windows] Add support for UCRT MinGW (#2289, #2821, #3054, #3115)\n-   [Windows] Add support for Windows ARM64 (#3111, #3176)\n-   Fix Nix pkg-config support (#2835)\n\n### Window\n\n**Bugfixes**\n\n-   Fix joystickButton being used for Joystick(Dis)Connected event (#2957)\n-   [Windows] Close the clipboard if we fail to empty it (#3043)\n-   [Android] Removed use of deprecated `ALooper_pollAll` (#3181, #3189)\n-   [macOS] Fix how macOS fullscreen video modes are detected (#2300, #3151)\n-   [macOS] Prevent unnecessary macOS input monitoring permission prompts (#2843, #3235)\n-   [Linux] Fix DRM mode setting to use SFML window dimensions (#3136)\n-   [Android] Fix wrong fullscreen resolution (#1349, #1559, #2396)\n\n### Graphics\n\n**Bugfixes**\n\n-   [Windows] Fix MSVC warning about uninitialized `sf::Glyph` members (#2929)\n-   Prevent crash when setting empty uniform array (#3185, #3186)\n\n### Audio\n\n**Bugfixes**\n\n-   Abort looping in SoundStream::streamData if an OpenAL error occurs (#1831, #2781)\n\n## SFML 2.6.1\n\nAlso available on the website: https://www.sfml-dev.org/changelog.php#sfml-2.6.1\n\n### General\n\n-   Stop overwriting CMAKE_MODULE_PATH (#2577)\n-   Loosen restrictions on unknown compilers (#2585)\n-   Fix CI deprecation warnings (#2624)\n-   Fix unused compiler flag error in Clang (#2625)\n-   Disable warnings as errors by default (#2680)\n\n### Window\n\n**Bugfixes**\n\n-   [macOS] Fix macOS resize event bug (#2618)\n-   [Linux] Skip ClientMessage events with other window ID unless it is for IM (#2651)\n\n### Graphics\n\n**Bugfixes**\n\n-   Ensure OpenGL extensions are loaded before querying maximum texture size (#2603)\n-   [Android] Fixed RenderTexture being upside down on Android (#2730)\n-   [Linux] Fix warnings in Linux OpenGL ES codepaths (#2747)\n\n### Audio\n\n**Bugfixes**\n\n-   Remove use of C++11 header (#2591)\n\n## SFML 2.6.0\n\nAlso available on the website: https://www.sfml-dev.org/changelog.php#sfml-2.6.0\n\n### General\n\n-   Various CMake enhancements (#1477, #1509, #1561, #1563, #1576, #1624, #1739, #1960)\n-   Small documentation changes (#1519, #1608, #1628, #1657, #1658, #1652, #1665, #1697, #1774, #1776, #1853, #2038, #2083, #2271)\n-   Various casting fixes (#1499, #1553, #2040, #2222, #2297, #2298, #2323, #2576)\n-   Add unit testing foundation to SFML (#623, #1475)\n-   Changed Doxygen single-line comment format (#1622, #1623)\n-   Add support for GitHub Actions (#1716, #1751, #2058, #2114)\n-   Add support for NetBSD (#1535, #1723)\n-   Slight increase performance and code refactor (#1732)\n-   Use public domain resources for examples (#1627, #1718)\n-   Add support for CPack and NSIS with CPack (#1114)\n-   Enable support for unity builds (#1787, #1788)\n-   Various clean ups (#1848, #1849, #2219, #2220, #2221, #2241)\n-   Enable and enforce a large set of warnings (#1785, #1791, #1846, #1906, #1908, #2048, #2066, #2073, #2094, #2100, #2106, #2142, #2217, #2218)\n-   Enable search box for the Doxygen documentation (#1841, #1940, #2173, #2477)\n-   Enhancements of the CI pipeline (#2046, #2263, #2294)\n-   Fix header include paths in Doxygen documentation (#2512)\n-   Fix compilation for GCC 13.1.1 (#2553)\n-   [macOS] Add support for arm64 on macOS (#1749, #1750, #1761, #1843, #1868)\n-   [iOS] Build examples for iOS as well (#1418, #1520, #1522)\n-   [Windows] Properly support Clang on Windows (#1612, #1720, #1784, #1795)\n-   [Windows] Link legacy stdio definitions on newer Visual Studio versions (#1712)\n-   [Windows] Provide additional metadata through resource files (#1419, #1779)\n-   [Android] Add 64-bits libraries for Android (#1648, #2165)\n-   [Android] Adjust NDK search path to support newer NDKs (#1575)\n-   [macOS] Copy logo.png to Resources in Cocoa example (#1818)\n-   [Windows] Add support for Visual Studio 2022 (#1819)\n-   [Android] Build sfml-main with position-independent code (#2393, #2397)\n\n### System\n\n**Features**\n\n-   [Android] Simplify management of ActivityStates (#1845)\n\n**Bugfixes**\n\n-   [Windows] Fix overflow when using `sf::Clock` for long time (#1765, #1771)\n\n### Window\n\n**Features**\n\n-   Allow creation of a window without an OpenGL context (#1484)\n-   Dynamically load EGL and GLES extensions as is done for desktop GL (#1539, #1577, #1603, #2157, #2160)\n-   Add support for creating Vulkan window surfaces (#1557)\n-   Scancode support (#1235, #1400, #1596, #2009, #2096, #2148, #2243)\n-   [Linux] Add support for colored cursors in Unix implementation (#1693, #1694)\n-   [Linux] Added support for directional arrow resize cursors on Linux (#1688)\n-   [Linux] Add support for X Input Method (#1840, #1850, #2191, #2242)\n-   [Linux] Add support for Direct Rendering Mode (DRM) / Kernel Mode Setting (KMS) (#2029, #2146, #2246, #2259, #2400)\n-   [Windows] Use monitor aware DPI scaling on Windows (#2268)\n\n**Bugfixes**\n\n-   Fix `sf::Context::getActiveContext` to stop returning inactive contexts (#1794)\n-   [Linux] Fixed crash with X11 when `$DISPLAY` is not `0.0` (#724, #1504)\n-   [Android] Ensure `setActive(false)` is called before the surface is destroyed in EglContext (#1530, #1531)\n-   [Android] Fixed EGL incorrectly being passed the anti-aliasing level as `EGL_SAMPLE_BUFFERS` instead of `EGL_SAMPLES` (#1533, #1534)\n-   [Linux] Fix OpenGL extensions not loading in a specific Linux VM configuration (#1495, #1543)\n-   [Windows] Fixed potential buffer overrun in Win32 OpenGL error handling (#1245, #1246)\n-   [Windows] Fix no longer hides cursor when hovering title bar (#1569, #1570)\n-   [macOS] Initialize `m_context` correctly in `SFContext` constructors (#1582, #1610)\n-   [Android] Fixed navigation bar not being entirely hidden on Android (#1538, #1554)\n-   [Windows] Make the process to set a DirectInput device's axis mode more conservative (#1634)\n-   [Linux] Fix an issue where the cursor wasn't changed instantaneously (#1686)\n-   [Windows] Fix issue where joystick/controller POV values were not set correctly for DirectInput devices (#1719)\n-   [Android] Fix warning: control may reach end of non-void function (#1713)\n-   [Windows] Fixed Win32 requestFocus in multi-threaded environment (#1600)\n-   [Android] Fix issue where `EGL_DEFAULT_DISPLAY` is `NULL` (#1639, #1740)\n-   [macOS] When initializing an OpenGL view with an existing window, call `finishInit` (#1759, #1760)\n-   [macOS] Fix potential crash when changing cursor (#1721, #1736)\n-   [Android] Fixed `SIGSEGV` after pressing back button on Android (#531, #1580)\n-   [Android] Fix issue with `waitEvent` and an OpenGL Context (#1532, #1790)\n-   [iOS] Fix issue where OpenGL ES libraries couldn't be located (#1687, #1804)\n-   [macOS] Fix issue where window wouldn't be closing because of events still being processed (#1581, #1814)\n-   [Windows] Preserve the drop shadow for system cursors on Windows (#1731)\n-   [Windows] Use GetWindowLongPtr for better overall compatibility (#1806)\n-   [macOS] Ensure proper nesting of autorelease pools on OS X (#1549, #1820)\n-   [Linux] Fix typo in window construction (#1951, #1953)\n-   [Linux] Prevent crash in Unix JoystickImpl with too many file descriptors (#1900, #1941)\n\n### Graphics\n\n**Features**\n\n-   Allow re-creation of the shared context as a core context if the user requests a core profile context (#1434, #1443)\n-   Added `getPosition()` and `getSize()` to `sf::Rect` (#1047)\n-   Added `Font::hasGlyph` field (#1644)\n-   Implemented saveToMemory and saveImageToMemory (#988, #1597, #1669)\n-   Implement smoothing for fonts (#1690, #2064, #2072)\n-   Add Min and Max blend modes (#1710, #1756)\n-   Support geometry shaders when a OpenGL 3.2+ context is available (#1768, #1769, #1786, #1789)\n-   Align encodings for new line characters (#2107)\n-   Update stb_image to 2.28, thus adding support for more image formats (#1712, #2322, #2464)\n-   [macOS] Improve high DPI handling on macOS (#1817)\n\n**Bugfixes**\n\n-   Fixed missing checks for empty vertex arrays when updating the vertex buffers in `sf::Text` (#1558, #1560)\n-   Remove unnecessary `glFlush()` in `sf::Texture` (#1609)\n-   Fixed text rendering artifacts on Radeon cards (#1568)\n-   Force OpenGL states to be reset when RenderTarget detects that a new context has to be tracked (#1625, #1630)\n-   Don't set default Texture Rect of a `sf::Sprite` before the user provided one (#1725)\n-   Added auto hinting compensation to fix too wide gaps between small glyphs (#1745, #1746)\n-   Fix support for sRGB color space in `sf::RenderTexture` (#1092, #1757)\n-   Fix incorrect glyph rect for text outline (#1826, #1827, #1836)\n-   Fix alpha value calculation for semi-transparent pixels on fully transparent pixels with `sf::Image::copy()` (#1993)\n-   Fix getLocalBounds inconsistency for `sf::Text` (#2129, #2132)\n-   [iOS] Ensure the proper default framebuffer is bound when activating a RenderWindow (#1471, #1487)\n\n### Audio\n\n**Features**\n\n-   Allow explicitly closing `sf::InputSoundFile` (#1516)\n-   Replace use of auto_ptr for future-proofing (#1546)\n-   Adjustable processing interval in `sf::SoundStream` (#1517, #1666)\n-   Fix `sf::Music` sometimes failing to loop after seeking (#1707)\n-   Add MP3 decoding support (#1232, #1796, #1851)\n\n**Bugfixes**\n\n-   Rename FindVorbis -> FindVORBIS, for consistency with exported variables (#1626, #1629)\n-   Fix naming of VORBIS in `SFMLConfigDependencies.cmake.in` (#1636, #1637)\n-   Fixed copy assign operator in `sf::Sound` so it checks for self-assignment (#1744)\n-   Fix SoundStream::play to restart the sound if it was played before (#2175)\n\n### Networking\n\n**Features**\n\n-   Added method to get the current read position of `sf::Packet` (#1382, #1641)\n\n**Bugfixes**\n\n-   Fixed sometimes failing to read floats and doubles from Packet on Android (#1565, #1578)\n\n## SFML 2.5.1\n\nAlso available on the website: https://www.sfml-dev.org/changelog.php#sfml-2.5.1\n\n### General\n\n-   Various CMake fixes (#1414, #1416, #1436, #1439, #1467, #1470)\n-   Fixed the installation of pkg-config files (#1466)\n-   Fixed two conversion warnings (#1454)\n-   [Android] Fixes all symbols in sfml-main are hidden (#1457, #1460)\n-   [Android] Fixed some `#define` flag problem (#1458)\n-   [Android] Fix deadlock in main cleanup (#1265)\n-   [iOS] Modernized toolchain file (#1411)\n-   [iOS] Check that `<SFML/Main.hpp>` is used (#1412)\n-   [macOS] Add `-ObjC` flag to fix static linking on macOS (#1485)\n\n### Window\n\n**Bugfixes**\n\n-   [iOS] Use default supported rotations when none are specified (#1417)\n-   [iOS] Fixed autocomplete window overlaps keyboard (#1473, #1482)\n-   [Linux] Fixed dual monitor issue (#1226, #1238)\n-   [Linux] Fixed issue where fullscreen window didn't go over task bars on top and left on in Ubuntu (#1224)\n-   [Linux] Fixed the Unix clipboard implementation causing an abort due to internal data races in Xlib (#1437)\n-   [macOS] Added additional system cursors (#1401, #1413, #1425)\n-   [Windows] Fixed swapped colors for custom cursors (#1464, #1465, #1491)\n\n### Graphics\n\n**Bugfixes**\n\n-   Fixed a bug in which a `sf::RenderTexture` would not be re-activated after being re-created (#1438)\n-   Fixed `sf::RenderTextureImplFBO`'s destructor incorrectly triggering deletion of other `sf::RenderTextureImplFBO`'s active FBOs (#1440)\n-   Fix `sf::RenderWindow::setActive` incorrectly trying to unbind an FBO during deactivation (#1442)\n-   Fixed `sf::RenderTexture::display()` dereferencing a NULL pointer when being called before `sf::RenderTexture::create()` (#1446)\n-   Fixed bug in `sf::Text` when applying an outline color/thickness (#1176)\n-   Squash duplicated `sf::Font` glyphs to single chars (#1461)\n-   Fixed two issues with glyph sub-pixel positioning (#1452)\n-   Reduced context locking & unlocking while creating textures (#1459)\n-   Fixed the error message when the wrong bitmap font size is selected (#1456, #1474, #1492)\n\n### Audio\n\n**Bugfixes**\n\n-   Fixed performance issue with reading WAV files (#1450)\n\n## SFML 2.5.0\n\nAlso available on the website: https://www.sfml-dev.org/changelog.php#sfml-2.5.0\n\n### General\n\n-   Replaced FindSFML.cmake with SFMLConfig.cmake (#1335)\n-   Markdown'd and updated readme, changelog, contributing and license files (#1196, #1368, #1317)\n-   Improve packaging support (#1173)\n-   Added Tagfile generation and search (#1327)\n-   Added CMake variables to select the modules to be built (#798, #800)\n-   Do not install extlibs if `SFML_USE_SYSTEM_DEPS` is true (#1236, #1237)\n-   Fixed various type conversion/comparison warnings (#1325)\n-   [Android] Increased minimum API version to 14 (#1362)\n-   [Android] Removed custom toolchain and added support for the newest NDK version and Gradle (#1350, #1393)\n-   [iOS] Updated the binary libs from exlibs/libs-ios (#1207, #1209)\n-   [iOS] Use a CMake toolchain file for iOS build (#1268, #1269)\n-   [iOS] Install extlibs if needed (#1348)\n-   [iOS] Drop 32 bit support (#1374)\n-   [iOS] Force correct iOS architecture for cmake (#1373, #1377)\n-   [iOS] Added iOS example (#1378)\n-   [macOS] Fixed launch of cocoa examples (#1334)\n-   [macOS] Improved application signing process (#1020, #1036, #1194)\n-   [macOS] Improved CMake script (#1215, #1371)\n-   [macOS] Use `-stdlib=libc++` (#1361)\n-   [OpenBSD] Added support for OpenBSD (#1330)\n\n### System\n\n**Bugfixes**\n\n-   Added protected destructor to `sf::NonCopyable` to prevent possible resource leaks (#1125, #1161)\n-   Fixed crash when `sf::Clock` is constructed in a global scope (#1258)\n\n### Window\n\n**Features**\n\n-   Implemented Cursor API (#269, #784, #827)\n-   Implemented Clipboard API (#715, #1204, #1221)\n-   Renamed a few key codes (#1395)\n-   Added joystick example (#1363)\n-   [Windows] Added support for interfacing with joysticks via DirectInput when it is available (#1251, #1326)\n-   [Windows] Fix discrete GPU preference symbols being exported from the wrong place (#1192, #1406)\n\n**Bugfixes**\n\n-   [Android] Return correct key code for delete/backspace (#1309, #1362)\n-   [iOS] Don't need to find vorbisfile or vorbisenc (#1347)\n-   [Linux] Fixed `sf::Window::getPosition()` returning incorrect position because of differences in window managers (#1228, #1266)\n-   [Linux] Fix X11 key repeat handling not filtering out events from other windows (#1223, #1230, #1291)\n-   [Linux] Restore fullscreen of a non-visible window (#1339)\n-   [macOS] Fixed window menu not working (#1091, #1180, #1193)\n-   [macOS] Fixed crash with application messing hardware detection e.g. TeamViewer (#1323)\n-   [macOS] Added support for (some) Hat/POV axis (#1248)\n-   [Windows] Prevent uninitialized read by zeroing memory (#1264)\n-   [Windows] Fixed modifier keys handling (#1357)\n\n### Graphics\n\n**Features**\n\n-   Implemented additional line spacing and letter spacing in `sf::Text` (#928, #1366)\n-   Added `sf::VertexBuffer` class (#1308)\n-   Added GPU local texture copying support, allowing performance optimizations and texture swapping (#1119, #1319, #1320)\n-   Optimize performance by skipping `glTexCoordPointer()` call if not needed (#1015)\n-   Generate shape outline vertices only if necessary (#925, #1356)\n-   Removed dependency to libjpeg, stb_image_write now supports writing JPEG files (#1278, #1279)\n-   Enable comparing `sf::Transform` and optimize resetting OpenGL back to the identity matrix (#1298)\n-   Added missing `setActive()` virtual method to `sf::RenderTarget` (#1157)\n-   Updated stb_image to v2.16 and stb_image_write to v1.07 (#1270)\n-   Added `sf::RenderTexture` stencil and multisampling support (#1274, #1285)\n-   Added example demonstrating `sf::VertexBuffer`, `sf::Shader` and `sf::Thread` usage (#1352)\n-   Optimized `sf::RenderTexture` performance (#1379)\n\n**Bugfixes**\n\n-   Properly free memory in `sf::Font::cleanup()` (#1119)\n-   Fixed memory leak in `sf::Font` (#1216)\n-   Fix OpenGL texture coordinate pointer not being updated correctly under certain conditions (#1297)\n-   Fix for broken text when the font is reloaded (#1345)\n-   Fix memory leak in `sf::Text` (#1233, #1360)\n-   Fixed strict aliasing punning warning when generating the key of a glyph in Font.cpp (#1187, #1396)\n-   Fixed OpenGL version string being parsed incorrectly on some platforms (#1249, #1390)\n-   [macOS] Worked around render target bug (#1132, #1342)\n-   [Windows] Replaced time-based joystick poll with a hardware event handler (#1179, #1195, #1198, #1199, #1421)\n\n### Audio\n\n**Features**\n\n-   Added loop point support to `sf::Music` (#177, #629)\n-   Added support for the extensible PCM wave file format (#1296)\n-   [iOS] Enable audio module (#1338)\n\n**Bugfixes**\n\n-   Fixed inconsistent seek behavior in `sf::SoundStream` (#1118)\n-   Fixed stack overflow in `sf::SoundStream::fillAndPushBuffer()` (#1154)\n-   Fixed seeking quirks in the FLAC reader (#966, #1162)\n-   Allow polymorphism with `sf::SoundSource` (#1185)\n-   Fixed WAV file writer writing wrong header values (#1280, #1281)\n-   Small bugfix to argument of `alcCaptureOpenDevice()` (#1304, #1305)\n-   [iOS] Find OpenAL correctly (#1263, #1376)\n-   [Windows] Updated OpenAL Soft to 1.18.1 fixing crashes (#1247, #1260)\n\n### Network\n\n**Features**\n\n-   Add append/overwrite parameter to Ftp::upload (#1072, #1399)\n\n**Bugfixes**\n\n-   Fixed wrong condition for building network support (#1253)\n-   Changed TCP listen backlog from 0 to SOMAXCONN (#1369, #1407)\n-   Fixed socket reuse not conforming to documentation (#1346, #1408)\n\n## SFML 2.4.2\n\nAlso available on the website: https://www.sfml-dev.org/changelog.php#sfml-2.4.2\n\n### System\n\n**Bugfixes**\n\n-   [Windows] Removed thread affinity changes in sf::Clock (#1107)\n\n### Window\n\n**Bugfixes**\n\n-   Fixed bug where TransientContextLock would hang (#1165, #1172)\n-   [Linux] Fixed GLX extensions being loaded too late (#1183)\n-   [Linux] Fix wrong types passed to XChangeProperty (#1168, #1171)\n-   [Windows] Make context disabling via wglMakeCurrent more tolerant of broken drivers (#1186)\n\n### Graphics\n\n**Bugfixes**\n\n-   Optimized sf::Image::create and made it more exception safe (#1166)\n\n## SFML 2.4.1\n\nAlso available on the website: https://www.sfml-dev.org/changelog.php#sfml-2.4.1\n\n### General\n\n-   [kFreeBSD] Define SFML_OS_FREEBSD when compiling for kFreeBSD (#1129)\n-   [Windows] Added some simple messaging when trying to build under Cygwin (#1153)\n\n### Window\n\n**Bugfixes**\n\n-   Fixed stack overflow on GlContext creation with multiple threads (#989, #1002)\n-   Adjusted mouse cursor grab documentation (#1133)\n-   [iOS] Fixed orientation change not rescaling window size properly (#1049, #1050)\n-   [Linux] Fixed fullscreen issue (#921, #1138)\n-   [Linux] Switched from XCB back to Xlib for windowing (#1138)\n-   [Linux] Fixed window icon not showing up on some distros (#1087, #1088)\n-   [Linux] Fixed an issue where GNOME flags window unresponsive (#1089, #1138)\n-   [Linux] Fixed leak of XVisualInfo objects during GlxContext creation (#1135)\n-   [Linux] Fixed possible hang when setting visibility if external window sources (#1136)\n-   [macOS] Fixed inconsistency between doc and impl on macOS for the grab feature (#1133, #1148, #1150)\n-   [Windows] Fixed context memory leaks (#1143, #1002)\n\n### Graphics\n\n**Bugfixes**\n\n-   Adjusted uniform error message (#1131)\n-   Clarify documentation on Rect::contains function bounds (#1151)\n\n### Network\n\n**Bugfixes**\n\n-   Fixed a typo in comment for void unbind() (#1121)\n\n## SFML 2.4.0\n\nAlso available on the website: https://www.sfml-dev.org/changelog.php#sfml-2.4.0\n\n### General\n\n-   Added deprecation macro (#969)\n-   Fixed issues reported by Coverity Scan static analysis (#1064)\n-   Fixed some initialization issues reported by Cppcheck (#1008)\n-   Changed comment chars in FindSFML.cmake to # (#1090)\n-   Fixed some typos (#1098, #993, #1099, #956, #963, #979)\n-   Updated/fixed string comparisons in Config.cmake (#1102)\n-   Added the missing -s postfix for the RelWithDebInfo config (#1014)\n-   [Android] Fixed current Android compilation issues (#1116, #1111, #1079)\n-   [macOS] Update Xcode template material (#976, #968)\n-   [Windows] Added support for VS 2015 (#972)\n-   [Windows] Create and install PDB debug symbols alongside binaries (#1037)\n\n### Deprecated API\n\n-   sf::RenderWindow::capture(): Use a sf::Texture and its sf::Texture::update(const Window&) function and copy its contents into an sf::Image instead.\n-   sf::Shader::setParameter(): Use setUniform() instead.\n-   sf::Text::getColor(): There is now fill and outline colors instead of a single global color. Use getFillColor() or getOutlineColor() instead.\n-   sf::Text::setColor(): There is now fill and outline colors instead of a single global color. Use setFillColor() or setOutlineColor() instead.\n-   sf::LinesStrip: Use LineStrip instead.\n-   sf::TrianglesFan: Use TriangleFan instead.\n-   sf::TrianglesStrip: Use TriangleStrip instead.\n\n### System\n\n**Features**\n\n-   [Android] Added sf::getNativeActivity() (#1005, #680)\n\n**Bugfixes**\n\n-   Added missing <iterator> include in String.hpp (#1069, #1068)\n-   Fixed encoding of UTF-16 (#997)\n-   [Android] Fixed crash when trying to load a non-existing font file (#1058)\n\n### Window\n\n**Features**\n\n-   Added ability to grab cursor (#614, #394, #1107)\n-   Added Multi-GPU preference (#869, #867)\n-   Added support for sRGB capable framebuffers (#981, #175)\n-   [Linux, Windows] Improved OpenGL context creation (#884)\n-   [Linux, Windows] Added support for pbuffers on Windows and Unix (#885, #434)\n\n**Bugfixes**\n\n-   Updated platform-specific handle documentation (#961)\n-   [Android] Accept touch events from \"multiple\" devices (#954, #953)\n-   [Android] Copy the selected EGL context's settings to SFML (#1039)\n-   [Linux] Fixed modifiers causing sf::Keyboard::Unknown being returned (#1022, #1012)\n-   [macOS] Improved memory management on macOS (#962, #790)\n-   [macOS] Fixed crash when resizing a window to a zero-height/width size (#986, #984)\n-   [macOS] Use the mouse button constant instead of 0 to avoid a compiler error on macOS (#1035)\n-   [macOS] macOS improvement: warnings + bugfix + refactoring, the lot! (#1042)\n\n### Graphics\n\n**Features**\n\n-   Added support for outlined text (#840)\n-   Add support for geometry shaders (#886, #428)\n-   Feature/blend mode reverse subtract (#945, #944)\n-   Implemented support for mipmap generation (#973, #498, #123)\n-   Added new API to set shader uniforms (#983, #538)\n-   Rewrite RenderWindow::capture (#1001)\n\n**Bugfixes**\n\n-   Exporting some Glsl utility functions due to linking issues (#1044, #1046)\n-   Fixed missing initialisation of Font::m_stroker (#1059)\n-   Changed primitive types to be grammatically correct (#1095, #939)\n\n### Audio\n\n**Features**\n\n-   Implemented stereo audio recording (#1010)\n\n**Bugfixes**\n\n-   Added an assignment operator to SoundSource (#864)\n-   [macOS] Updates OpenAL-soft for macOS to version 1.17.2 (#1057, #900, #1000)\n-   Fixed a bug where vorbis can't handle large buffers (#1067)\n-   Added support for 24-bit .wav files (#958, #955)\n-   Fixed threading issue in sf::SoundRecorder (#1011)\n-   Made WAV file reader no longer assume that data chunk goes till end of file to prevent reading trailing metadata as samples (#1018)\n-   Fixed seeking in multi channel FLAC files (#1041, #1040)\n\n### Network\n\n**Features**\n\n-   Added optional argument on which address to bind (socket). (#850, #678)\n\n**Bugfixes**\n\n-   Fixed FTP directory listing blocking forever (#1086, #1025)\n\n## SFML 2.3.2\n\nAlso available on the website: https://www.sfml-dev.org/changelog.php#sfml-2.3.2\n\n### General\n\n-   Fixed an issue where FindSFML.cmake couldn't find older versions of SFML (#903)\n-   Robust alCheck and glCheck macros (#917)\n-   Fixed FindSFML.cmake to use the uppercase FLAC name (#923)\n-   Added a CONTRIBUTING file so GitHub shows a message when creating a new issue (#932)\n\n### Window\n\n**Bugfixes**\n\n-   [Linux] Fixed an issue where the keypad's key weren't being detected (#910)\n-   [Linux] Revert to Xlib event handling (#934)\n-   [Linux] Fixed `XK_*` inconsistency in InpuImpl.cpp (#947)\n-   [Linux] Fix `_NET_WM_PING` messages not being replied to properly (#947)\n\n### Graphics\n\n**Bugfixes**\n\n-   Fixed clear bug on RenderTextures (#915)\n-   Fixed image file extension detection (#929, #930, #931)\n-   Secure function against random data return (#935, #942)\n\n## SFML 2.3.1\n\nAlso available on the website: https://www.sfml-dev.org/changelog.php#sfml-2.3.1\n\n### Window\n\n**Bugfixes**\n\n-   [Android] Make sure a window still exists before trying to access its dimensions (#854)\n-   [Android] Added Android API level checks (#856)\n-   [Android] Updated the JNI/event handling code (#906)\n-   [Linux] Resized events are only spawned when the window size actually changes (#878, #893)\n-   [Linux] Whitelisted X SHAPE events (#879, #883)\n-   [Linux] Remap Unix keyboard when user changes layout (#895, #897)\n-   [Linux] Fix undefined behavior in ewmhSupported() (#892, #901)\n\n### Graphics\n\n**Bugfixes**\n\n-   Added support for GL_EXT_texture_edge_clamp for systems that don't expose GL_SGIS_texture_edge_clamp (#880, #882)\n\n### Audio\n\n**Bugfixes**\n\n-   [Android] Fixed audio files not loading (and possibly crashing) (#855, #887)\n\n## SFML 2.3\n\nAlso available on the website: https://www.sfml-dev.org/changelog.php#sfml-2.3\n\n### General\n\n-   Examples only link against sfml-main in release mode (#610, #766)\n-   Replaced unsigned int with std::size_t for array indices and sizes (#739)\n-   Fixed some issues with the Doxygen documentation (#750)\n-   Added support for EditorConfig (#751)\n-   Hide success message for CMake in quiet mode (#753)\n-   Improved documentation for statuses with sf::Ftp (#763)\n-   Moved stb_image into the extlibs directory (#795)\n-   Changed the SOVERSION to major.minor (#812)\n-   Fixed warnings about switch-statements (#863)\n-   Added missing includes in the general headers (#851)\n-   [Android] Updated toolchain file and dependencies (#791)\n-   [Linux] Fixed missing pthread dependency (#794)\n-   [macOS] Relaxed CMake installation rules regarding framework dependencies (#767)\n\n### Deprecated API\n\n-   sf::Event::MouseWheelEvent: This event is deprecated and potentially inaccurate. Use MouseWheelScrollEvent instead.\n\n### Window\n\n**Features**\n\n-   Added new events for handling high-precision scrolling (#95, #810, #837)\n-   Switched from Xlib to XCB (#200, #319, #694, #780, #813, #825)\n-   Added support for OpenGL 3 core context creation (#654, #779)\n\n**Bugfixes**\n\n-   Fixed glXSwapIntervalSGI being broken for some driver implementations (#727, #779)\n-   Fixed simultaneous context operations causing crashes on some AMD hardware (#778, #779)\n-   Fixed joystick identification (#809, #811)\n-   [iOS] Fixed various issues including stencil bits, device orientation and retina support (#748)\n-   [iOS] Fixed inconsistency between sf::Touch::getPosition and touch events (#875)\n-   [Linux] Fixed Alt+F4 not getting triggered in window mode (#274)\n-   [Linux] Fixed Unix joystick stuff (#838)\n-   [macOS] Fixed typo in JoystickImpl.cpp to prevent a crash (#762, #765)\n-   [macOS] Fixed an issue in InputImpl::getSFOpenGLViewFromSFMLWindow (#782, #792)\n\n### Graphics\n\n**Features**\n\n-   Replaced GLEW with loader generated by glLoadGen (#779)\n-   Added a new constructor to sf::Color that takes an sf::Uint32 (#722)\n-   Updated stb_image to v2.02 (#777)\n-   Updated FreeType to v2.5.5 (#799, #804)\n-   Added checks for software OpenGL (#870)\n\n**Bugfixes**\n\n-   Fixed GL_ARB_compatibility not being detected (#859)\n-   Fixed pixel format selection (#862)\n-   Bumped back the OpenGL version requirement to 1.1 (#858)\n\n### Audio\n\n**Features**\n\n-   Dropped libsndfile and started using Vorbis, FLAC and OGG directly (#604, #757)\n-   Added a FLAC file to the sound example (#815)\n\n**Bugfixes**\n\n-   Fixed access violation error in the destructor of sf::AudioDevice (#30, #602)\n-   [macOS] Fixed threading issue with sf::SoundStream and OpenAL (#541, #831)\n\n### Network\n\n**Bugfixes**\n\n-   Fixed sf::TcpSocket not handling partial sends properly (#749, #796)\n\n## SFML 2.2\n\nAlso available on the website: https://www.sfml-dev.org/changelog.php#sfml-2.2\n\n### General\n\n-   Support for iOS and Android platform (#410, #440)\n-   Various documentation corrections (#438, #496, #497, #714)\n-   Fixed support for compilers on Debian FreeBSD (#380, #578)\n-   Added support for Visual Studio 2013 and proper support for the TDM builds (#482)\n-   Fixed CMake problems related to FindSFML and cached variables (#637, #684)\n-   Switched and enforced LF line endings (#708, #712)\n-   Updated OpenAL to version 1.15.1 (d077210)\n-   Made compiler and OS variable names much clearer in CMake files (9b0ed30)\n-   Re-enabled RPATH feature (e157e7a)\n-   Slight adjustments to the examples (#737)\n-   [FreeBSD] Various configuration fixes (#577, #578)\n-   [Linux] Updated FindSFML.cmake to add UDev to SFML's dependencies (#728, #729, #734, #736)\n-   [macOS] Fixed incorrect symlink in freetype.framework (#519)\n-   [macOS] CMake module for correct dependencies (#548)\n-   [macOS] Fixed SFML target for Xcode (#595, #596)\n-   [macOS] Updated implementation, mainly reverting to non-ARC (#601)\n-   [macOS] Fixed memory leaks and dead store (#615)\n-   [macOS] Improved event handling and performance (#617)\n-   [macOS] Reduced memory usage (#672, #698)\n-   [macOS] macOS 10.10 support (#691, #699)\n-   [macOS] Improve flexibility of dependencies' locations (#713)\n-   [Windows] Removed the hack that copied external libraries into SFML static libraries (dbf01a7)\n\n### System\n\n**Features**\n\n-   Added substring and replace functions to sf::String (#21, #355)\n-   Added toUtfX to sf::String (#501)\n-   Added fromUtfX functions to set the internal data to a string by converting from another string in a fixed encoding (#196)\n-   Added modulo operator for sf::Time (#429, #430)\n-   Added division operator for sf::Time (#453)\n\n**Bugfixes**\n\n-   Ensured a high resolution for sf::sleep (#439, #475)\n-   [Windows] Fixed stack unalignment by two internal functions (#412)\n\n### Window\n\n**Features**\n\n-   Added window methods to request and to check focus (#518, #525, #613, #723, #735)\n-   Provide name, manufacturer ID and product ID via sf::Joystick (#152, #528)\n-   [FreeBSD] Joystick support (#477)\n-   [macOS] Improved integration with menus and dock actions (#11)\n-   [macOS] Support for OpenGL 3.2 (#84)\n-   [macOS] Improved fullscreen support (#343)\n-   [macOS] Added support for retina displays (#353, #388)\n-   [Windows] Removed support for Windows 9x (#469)\n-   [Windows] Fixed typo in Windows keyboard implementation (#516)\n\n**Bugfixes**\n\n-   sf::Window::create() now also resets framerate limit (#371)\n-   Fixed OpenGL context leak (#635, #705)\n-   Fixed various joystick problems (memory leak, accelerometer detected, code refactoring) (#660, #686, #742, #743)\n-   Optimized sf::Window::waitEvent a bit, no sleep if events are available at first try (ff555d6)\n-   [Linux] Output error message when XOpenDisplay() fails (#508, #616)\n-   [Linux] Resize window with setSize when sf::Style::Resize is set (#466)\n-   [Linux] Fixed broken key repeat on window recreation (#564, #567)\n-   [macOS] Fixed KeyReleased not being fired in fullscreen mode (#465)\n-   [macOS] Fixed an issue where disconnecting the keyboard would cause a crash (#467)\n-   [macOS] Fixed unexpected resizing behavior (#468)\n-   [macOS] Improved resizing windows (#474)\n-   [macOS] Fixed memory leak with sf::Window::create() (#484)\n-   [macOS] Fixed menu shortcuts in fullscreen on macOS (#527)\n-   [macOS] Improved cursor hiding (#703)\n-   [macOS] Fixed right click not detected with trackpads (#716, #730)\n-   [Windows] Fixed joystick POV values (ef1d29b)\n-   [Windows] Fixed Unicode inconsistency (#635)\n-   [Windows] Fixed Alt+F4 and mouse clicks issues (#437, #457)\n-   [Windows] Send MouseButtonReleased event when the mouse is outside of the window (#455, #457)\n-   [Windows] Fixed sf::Joystick wrong registry usage (#701, #702, #706)\n\n### Graphics\n\n**Features**\n\n-   Provide more information about the loaded font in sf::Font (#164)\n-   Implemented a more flexible blending system (#298)\n-   Added strikethrough text style (#243, #362, #682)\n-   Slight optimization for sf::Text::setString (#413)\n-   Added subtraction operator for sf::Color (#114, #145)\n-   Optimized sf::Image::flipVertically/flipHorizontally (#555)\n-   Changed sf::Font measurements from int to float to allow better underline drawing (#693)\n\n**Bugfixes**\n\n-   Improved text quality for small and pixelated fonts (#228)\n-   Yet another fix for Intel GPUs with sf::RenderTexture (#418)\n-   Removed VTab since it causes issues and doesn't have a use nowadays (#442, #445, #460, #588)\n-   Fixed broken BDF and PCF font formats (#448)\n-   Fixed compilation issue with newer versions of GCC for sf::Rect (#458)\n-   Fixed resetGLStates() not explicitly setting the default polygon mode (#480)\n-   Fixed division-by-zero in sf::RectangleShape (#499)\n-   Fixed potential memory leak in sf::Font (#509)\n-   Updated glext and removed glxext (#511, #583)\n-   Make sure texture unit 0 is active when resetting sf::RenderTarget states (#523, #591)\n-   Fixed texture rect computation in fonts (#669)\n-   Improved rendering of underlined text (#593)\n-   Avoided repeated output of error messages (#566)\n-   Fixed text rendered with vertical offset on ascent and font size mismatch (#576)\n-   Fixed rounding problem for viewports (#598)\n-   Fixed sf::Shader::isAvailable() possibly breaking context management (#211, #603, #608, #603)\n-   Fixed sf::Texture::getMaximumSize() possibly breaking context management (#666)\n-   Fixed various sf::Text rendering issues (#692, #699)\n-   The texture matrix is now reset in sf::Texture::bind(NULL) (7c4b058)\n-   [Windows] Fixed DPI scaling causing strange window behavior (#679, #681, #688)\n\n### Audio\n\n**Features**\n\n-   Added support for selecting the audio capture device (#220, #470)\n-   Make sf::SoundRecorder processing frequency configurable (#333)\n-   Added up vector to sf::Listener (#545)\n\n**Bugfixes**\n\n-   Prevented sf::SoundStream::setPlayingOffset() from restarting playing even when paused (#203, #592)\n-   Fixed sf::SoundBuffer contents not being able to be updated when still attached to sounds (#354, 367, #390, #589)\n-   Catch audio format error and prevent division by zero (#529)\n-   Fixed sf::SoundBuffer returning wrong duration for sounds containing more than ~4.3 million samples (2ff58ed)\n-   Optimized sf::Listener with a cache (d97e524)\n\n### Network\n\n**Features**\n\n-   Added support for PUT and DELETE in sf::Http (#257, #312, #607)\n-   Added support for chunked HTTP transfers (#296, #337)\n-   Added support for 64-bit integers in sf::Packet (#710)\n-   Made sf::Ftp::sendCommand() public (2c5cab5)\n\n**Bugfixes**\n\n-   Checked socket descriptor limit (#153, #628, #683)\n-   Fixed sf::TcpSocket::connect()'s switching from blocking to non-blocking mode on immediate connection success (#221)\n-   Fixed FTP download and upload file sizes being limited by available RAM (#565, #590)\n-   Fixed C++11 compiler warnings for sf::Uint8 (#731, #732)\n\n## SFML 2.1\n\nAlso available on the website: https://www.sfml-dev.org/changelog.php#sfml-2.1\n\n### General\n\n-   Updated the Window and OpenGL examples (got rid of GLU and immediate mode)\n\n### Window\n\n**Features**\n\n-   Now using inotify on Linux to avoid constantly polling joystick connections (#96)\n-   Add keypad return, equal and period keys support for macOS\n-   Improved mouse events on macOS regarding fullscreen mode\n-   Improved mouse events on macOS (#213, #277)\n-   Improved reactivity of setMousePosition on macOS (#290)\n-   Added support for right control key on macOS\n-   Improved TextEntered for macOS (#377)\n-   Improved the performances of Window::getSize() (the size is now cached)\n-   Added the WM_CLASS property to SFML windows on Linux\n-   Fake resize events are no longer sent when the window is moved, on Linux\n-   Pressing ALT or F10 on Windows no longer steals the focus\n\n**Bugfixes**\n\n-   Fixed MouseMove event sometimes not generated when holding left button on Windows (#225)\n-   Fixed ContextSettings ignored when creating a 3.x/4.x OpenGL context on Linux (#258)\n-   Fixed ContextSettings ignored on Linux when creating a window (#35)\n-   Fixed windows bigger than the desktop not appearing on Windows (#215)\n-   Fixed KeyRelease events sometimes not reported on Linux (#404)\n-   Fixed mouse moved event on macOS when dragging the cursor (#277)\n-   Fixed KeyRelease event with CMD key pressed (#381)\n-   Fixed taskbar bugs on Windows (#328, #69)\n-   Fixed Window::getPosition() on Linux (#346)\n-   Unicode characters outside the BMP (> 0xFFFF) are now correctly handled on Windows (#366)\n\n### Graphics\n\n**Features**\n\n-   Checking errors in RenderTarget::pushGLStates() to avoid generating false error messages when user leaves unchecked OpenGL errors (#340)\n-   Optimized Shader::setParameter functions, by using a cache internally (#316, #358)\n\n**Bugfixes**\n\n-   Fixed bounding rect of sf::Text ignoring whitespaces (#216)\n-   Solved graphics resources not updated or corrupted when loaded in a thread (#411)\n-   Fixed white pixel showing on first character of sf::Text (#414)\n-   sf::Rect::contains and sf::Rect::intersects now handle rectangles with negative dimensions correctly (#219)\n-   Fixed Shape::setTextureRect not working when called before setTexture\n\n### Audio\n\n**Features**\n\n-   loadFromStream functions now explicitly reset the stream (seek(0)) before starting to read (#349)\n\n**Bugfixes**\n\n-   Added a workaround for a bug in the macOS implementation of OpenAL (unsupported channel count no properly detected) (#201)\n-   Fixed SoundBuffer::loadFromStream reading past the end of the stream (#214)\n\n### Network\n\n**Features**\n\n-   Replaced the deprecated gethostbyname with getaddrinfo (#47)\n-   Minor improvements to sf::Packet operators (now using strlen and wcslen instead of explicit loops) (#118)\n\n**Bugfixes**\n\n-   Fixed non-blocking connection with a sf::TcpSocket on Windows\n-   Fixed TCP packet data corruption in non-blocking mode (#402, #119)\n-   On Unix systems, a socket disconnection no longer stops the program with signal SIGPIPE (#72)\n\n## SFML 2.0\n\nAlso available on the website: https://www.sfml-dev.org/changelog.php#sfml-2.0\n\nNo changelog available. _Everything changed._\n\n## Older Releases\n\nSee the website for changelogs of older releases: https://www.sfml-dev.org/changelog.php\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extlibs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.md",
          "type": "blob",
          "size": 0.85546875,
          "content": "Copyright (C) 2007-2024 Laurent Gomila - laurent@sfml-dev.org\n\nThis software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software.  If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n"
        },
        {
          "name": "migration.md",
          "type": "blob",
          "size": 21.0869140625,
          "content": "# Migration Guide\n\nWelcome to SFML 3!\nThe SFML Team has put a lot of effort into delivering a library that is both familiar to existing users while also making significant improvements.\nThis document will walk you through how to upgrade your SFML 2 application to SFML 3.\n\nOne of the headline changes in SFML 3 is raising the C++ standard to C++17 thus bringing SFML into the world of modern C++!\nThis change has enabled a vast number of internal improvements as well as new opportunities for improving the API that will be discussed in this document.\n\n## Compiler Requirements\n\nAlong with the upgrade from C++03 to C++17 you may need to upgrade your compiler.\nC++17 support has been widespread in all major compiler implementations for years prior to SFML 3's release so in all likelihood the compiler you're already using will work.\nIn case you do need to upgrade, here are the minimum compiler versions.\n\n| Compiler   | Version      |\n| ---------- | ------------ |\n| MSVC       | 16 (VS 2019) |\n| GCC        | 9            |\n| Clang      | 9            |\n| AppleClang | 12           |\n\n## CMake Targets\n\nSFML 3 uses modern CMake convention for library targets which entails having a namespace in front of the target name.\nThese namespaces tell CMake \"this is a target\" whereas something like `sfml-graphics` might be a target or might be a precompiled library on disk like `libsfml-graphics.so`.\nFixing this ambiguity leads to more useful error messages when a given target can't be found due to, for example, forgetting a `find_package` call.\nThe component names used when calling `find_package` were also changed to capitalize the first letter.\n\n| v2 Target       | v3 Target        |\n| --------------- | ---------------- |\n| `sfml-system`   | `SFML::System`   |\n| `sfml-window`   | `SFML::Window`   |\n| `sfml-graphics` | `SFML::Graphics` |\n| `sfml-network`  | `SFML::Network`  |\n| `sfml-audio`    | `SFML::Audio`    |\n| `sfml-main`     | `SFML::Main`     |\n\n| v2 Component | v3 Component |\n| ------------ | ------------ |\n| `system`     | `System`     |\n| `window`     | `Window`     |\n| `graphics`   | `Graphics`   |\n| `network`    | `Network`    |\n| `audio`      | `Audio`      |\n| `main`       | `Main`       |\n\n\nv2:\n```cmake\nfind_package(SFML 2 REQUIRED COMPONENTS graphics audio network)\n...\ntarget_link_libraries(my_app PRIVATE sfml-graphics sfml-audio sfml-network)\n```\n\nv3:\n```cmake\nfind_package(SFML 3 REQUIRED COMPONENTS Graphics Audio Network)\n...\ntarget_link_libraries(my_app PRIVATE SFML::Graphics SFML::Audio SFML::Network)\n```\n\n## Linux Dependencies\n\nWhen using X11 as the backend on Linux, as opposed to DRM, `libxi-dev` is a newly required dependency.\nThis was introduces with the [raw mouse input support](https://www.sfml-dev.org/documentation/3.0.0/structsf_1_1Event_1_1MouseMovedRaw.html).\n\n## `sf::Vector2<T>` Parameters\n\nA common pattern in SFML 2 was to use pairs of scalar parameters to represent concepts like sizes or positions.\nTake `sf::Transformable::setPosition(float, float)` for example.\nThe two parameters combine to represent a position in world space.\n\nSFML 3 takes all of the APIs with pairs of parameters like `(float, float)` or `(unsigned int, unsigned int)` and converts them to their corresponding `sf::Vector2<T>` type like `sf::Vector2f` or `sf::Vector2u` to make the interface more expressive and composable.\nThis transition is often as simple as wrapping the two adjacent parameters with braces to construct the vector.\n\nv2:\n```cpp\nsf::VideoMode videoMode(480, 640, 24);\nsf::CircleShape circle(10);\ncircle.setPosition(10, 20);\nsf::IntRect rect(250, 400, 50, 100);\n```\n\nv3:\n```cpp\nsf::VideoMode videoMode({480, 640}, 24);\nsf::CircleShape circle(10);\ncircle.setPosition({10, 20});\nsf::IntRect rect({250, 400}, {50, 100});\n```\n\n## Fixed Width Integers\n\nSFML 2 contained various typedefs for fixed width integers.\nThose are now replaced with the fixed width integers provided in the `<cstdint>` header from the standard library.\n\n| v2           | v3              |\n| ------------ | --------------- |\n| `sf::Int8`   | `std::int8_t`   |\n| `sf::Uint8`  | `std::uint8_t`  |\n| `sf::Int16`  | `std::int16_t`  |\n| `sf::Uint16` | `std::uint16_t` |\n| `sf::Int32`  | `std::int32_t`  |\n| `sf::Uint32` | `std::uint32_t` |\n| `sf::Int64`  | `std::int64_t`  |\n| `sf::Uint64` | `std::uint64_t` |\n\n## `sf::Event`\n\nSFML 3 uses `std::variant` under the hood to implement a totally new, type-safe API for events.\nThere are two main ways to use this new API.\nCheck out the new EventHandling example program to see these methods in practice.\n\n### `sf::Event::getIf<T>`\n\nThe first option is based around `sf::Event::getIf<T>` and `sf::Event::is<T>`.\n`getIf<T>` works by providing a template parameter which must be an event subtype.\nEvent subtypes are types like `sf::Event::Resized` or `sf::Event::MouseMoved`.\nIf the template argument matches the active event subtype then a pointer to the data is returned.\nIf that template argument is not the active event subtype then `nullptr` is returned.\n`sf::Event::is<T>` more simply returns `true` if `T` matches the active event subtype.\n`is<T>` is often used for subtypes like `sf::Event::Closed` which contain no data.\nHere's what that looks like:\n\n```cpp\nwhile (window.isOpen())\n{\n    while (const std::optional event = window.pollEvent())\n    {\n        if (event->is<sf::Event::Closed>())\n        {\n            window.close();\n        }\n        else if (const auto* keyPressed = event->getIf<sf::Event::KeyPressed>())\n        {\n            if (keyPressed->scancode == sf::Keyboard::Scancode::Escape)\n                window.close();\n        }\n    }\n\n    // Remainder of main loop\n}\n```\n\nNote how the API for getting events has changed slightly.\n`sf::WindowBase::pollEvent` and `sf::WindowBase::waitEvent` now return a `std::optional<sf::Event>`.\nThese two functions _might_ return an event but they might not.\nC++ lets you deduce the template parameter which is why you can write `const std::optional event` instead of `const std::optional<sf::Event> event`.\n`const auto event` is another valid choice if you prefer a more terse expression.\n\n### `sf::WindowBase::handleEvents`\n\nThe second option for processing events is via the new `sf::WindowBase::handleEvents` function.\nThis functions performs event visitation.\nWhat this means is that you can provide callbacks which take different event subtypes as arguments.\nAlternatively you may provide an object (or objects) with `operator()` implementations which handle the event subtypes you want to process.\nNotably you do not have to provide callbacks for all possible event subtypes.\nDepending on the current active event subtype, the corresponding callback is called.\nHere's what that looks like:\n\n```cpp\nconst auto onClose = [&window](const sf::Event::Closed&)\n{\n    window.close();\n};\n\nconst auto onKeyPressed = [&window](const sf::Event::KeyPressed& keyPressed)\n{\n    if (keyPressed.scancode == sf::Keyboard::Scancode::Escape)\n        window.close();\n};\n\nwhile (window.isOpen())\n{\n    window.handleEvents(onClose, onKeyPressed);\n\n    // Remainder of main loop\n}\n```\n\n## Window Styles and States\n\nA new `sf::State` enumeration was added for specifying the state of the window which means whether the window is floating or fullscreen.\nHere's a before-and-after showing how this affects constructing a window.\n\nv2:\n```cpp\nsf::RenderWindow window(sf::VideoMode::getFullscreenModes().at(0), \"Title\", sf::Style::Fullscreen);\n```\n\nv3:\n```cpp\nsf::RenderWindow window(sf::VideoMode::getFullscreenModes().at(0), \"Title\", sf::State::Fullscreen);\n```\n\n## Scoped Enumerations\n\nSFML 3 converts all old style unscoped enumerations to scoped enumerations.\nThis improves the type safety of the interface.\nThis means that the name of the enumeration is now part of the namespace required to access values of that enumeration.\n\nFor example, take the enumeration `sf::Keyboard::Key`.\n`sf::Keyboard::A` becomes `sf::Keyboard::Key::A`.\nThe name of the enumeration now appears as a nested namespace when accessing one of the enumeration's values.\n\nHere is a complete list of all enumerations which have undergone this change:\n\n* `sf::BlendMode::Equation`\n* `sf::BlendMode::Factor`\n* `sf::Cursor::Type`\n* `sf::Ftp::Response::Status`\n* `sf::Ftp::TransferMode`\n* `sf::Http::Request::Method`\n* `sf::Http::Response::Status`\n* `sf::Joystick::Axis`\n* `sf::Keyboard::Key`\n* `sf::Keyboard::Scan`\n* `sf::Mouse::Button`\n* `sf::Mouse::Wheel`\n* `sf::PrimitiveType`\n* `sf::Sensor::Type`\n* `sf::Shader::Type`\n* `sf::Socket::Status`\n* `sf::Socket::Type`\n* `sf::SoundSource::Status`\n* `sf::VertexBuffer::Usage`\n\n## `sf::Rect<T>`\n\n`sf::Rect<T>` has been refactored from the four scalar values `top`, `left`, `width`, and `height` into two `sf::Vector2<T>`s named `position` and `size`.\nThis means that `sf::Rect<T>::getPosition()` and `sf::Rect<T>::getSize()` have been removed in favor of directly accessing the `position` and `size` data members.\nThe 4-parameter constructor was also removed in favor of the constructor which takes two `sf::Vector2<T>`s.\n\nv2:\n```cpp\nsf::FloatRect rect(10, 20, 30, 40);\nsf::Vector2f position = rect.getPosition();\nsf::Vector2f size = rect.getSize();\n```\n\nv3:\n```cpp\nsf::FloatRect rect({10, 20}, {30, 40});\nsf::Vector2f position = rect.position;\nsf::Vectro2f size = rect.size;\n```\n\nThe two overloads of `sf::Rect<T>::intersects` have been replaced with one unified function called `sf::Rect<T>::findIntersection` which returns a `std::optional<Rect<T>>`.\nThis optional contains the overlapping area if the rectangles overlap.\nOtherwise the optional is empty.\n\n```cpp\nsf::IntRect rect1({0, 0}, {200, 200});\nsf::IntRect rect2({100, 100}, {200, 200});\nstd::optional<sf::IntRect> intersection = rect1.findIntersection(rect2);\n// position={100, 100} size={100, 100}\n```\n\n## `sf::Angle`\n\nAll angles are now represented with a strong type named `sf::Angle`.\nThis type provides two functions for creating angles called `sf::degrees(float)` and `sf::radians(float)` which construct an angle from either some value of degrees or radians.\nOperators (`+`, `-`, etc.) are provided to perform mathematical operations with angles.\nIf you need access to the raw angle as a `float` then you can use either `sf::Angle::asDegrees()` or `sf::Angle::asRadians()`.\n\nv2:\n```cpp\nsf::RectangleShape shape(sf::Vector2f(50, 50));\nshape.setRotation(90);\nstd::cout << \"Rotation: \" << shape.getRotation() << '\\n';\n```\n\nv3:\n```cpp\nsf::RectangleShape shape({50, 50});\nshape.setRotation(sf::degrees(90));\nstd::cout << \"Rotation: \" << shape.getRotation().asDegrees() << '\\n';\n```\n\n## Renamed Functions\n\nA number of functions have new names but otherwise have not changed their semantics.\n\n| v2                                | v3                                |\n| --------------------------------- | --------------------------------- |\n| `sf::Font::loadFromFile`          | `sf::Font::openFromFile`          |\n| `sf::Socket::getHandle`           | `sf::Socket::getNativeHandle`     |\n| `sf::WindowBase::getSystemHandle` | `sf::WindowBase::getNativeHandle` |\n| `sf::Texture::create`             | `sf::Texture::resize`             |\n| `sf::RenderTexture::create`       | `sf::RenderTexture::resize`       |\n| `sf::Image::create`               | `sf::Image::resize`               |\n| `sf::Sound::getLoop`              | `sf::Sound::isLooping`            |\n| `sf::Sound::setLoop`              | `sf::Sound::setLooping`           |\n| `sf::SoundStream::getLoop`        | `sf::SoundStream::isLooping`      |\n| `sf::SoundStream::setLoop`        | `sf::SoundStream::setLooping`     |\n\n## Removal of Default Constructors\n\nThe default constructors `sf::Sound::Sound()`, `sf::Text::Text()`, and `sf::Sprite::Sprite()` were removed.\nThey can be replaced by the corresponding constructors which accept a resource type.\n\n| v2                     | v3                                         |\n| ---------------------- | ------------------------------------------ |\n| `sf::Sound::Sound()`   | `sf::Sound::Sound(const sf::SoundBuffer&)` |\n| `sf::Text::Text()`     | `sf::Text::Text(const sf::Font&)`          |\n| `sf::Sprite::Sprite()` | `sf::Sprite::Sprite(const sf::Texture&)`   |\n\nNow that these classes are guaranteed to be holding a reference to their corresponding resource type, the functions used to access to those resources can return a reference instead of a pointer.\nThese functions are `sf::Sound::getBuffer()`, `sf::Text::getFont()`, and `sf::Sprite::getTexture()`.\n\nv2:\n```cpp\nconst sf::SoundBuffer soundBuffer(\"sound.flac\");\nsf::Sound sound;\nsound.setBuffer(soundBuffer);\n```\n\nv3:\n```cpp\nconst sf::SoundBuffer soundBuffer(\"sound.flac\");\nsf::Sound sound(soundBuffer);\n```\n\n## `std::optional` Usage\n\nSFML 3 makes liberal use of `std::optional` to express when a given function may not return a value.\nSome of these usages have already been mentioned like `sf::WindowBase::pollEvent`.\nHere are some more places where SFML 3 makes use of `std::optional`.\n\n* `sf::IpAddress` uses `std::optional` to express how resolving an address from a string may not yield a usable IP address.\n* `sf::Image::saveToMemory` returns a `std::optional` because the `sf::Image` may be empty or the underlying implementation may fail.\n* `sf::SoundFileReader::open` returns a `std::optional` because the stream being opened may not be valid.\n* `sf::Music::onLoop` and `sf::SoundStream::onLoop` returns a `std::optional` because if the objects are not in a looping state then there is nothing to return.\n* `sf::InputStream` uses `std::optional` in various places.\nInstead of returning `-1` to signal an error, `std::nullopt` can be returned.\n\nLearnCpp.com is a great place to learn more about using `std::optional`.\nRead more about that [here](https://www.learncpp.com/cpp-tutorial/stdoptional/).\n\n## New Constructors for Loading Resources\n\nThe following classes gained constructors that allow for loading/opening resources in a single expression.\nUpon failure they throw an `sf::Exception`.\n\n* `sf::InputSoundFile`\n* `sf::OutputSoundFile`\n* `sf::Music`\n* `sf::SoundBuffer`\n* `sf::Font`\n* `sf::Image`\n* `sf::RenderTexture`\n* `sf::Shader`\n* `sf::Texture`\n* `sf::FileInputStream`\n* `sf::Cursor`\n\nSFML 3 still supports the SFML 2 style of error handling in addition to these new constructors.\n\nv2:\n```cpp\nsf::SoundBuffer soundBuffer;\nif (!soundBuffer.loadFromFile(\"sound.wav\"))\n{\n    // Handle error\n}\n```\n\nv3:\n```cpp\nsf::SoundBuffer soundBuffer;\nif (!soundBuffer.loadFromFile(\"sound.wav\"))\n{\n    // Handle error\n}\n\n// OR\n\nconst sf::SoundBuffer soundBuffer(\"sound.wav\");\n```\n\n## `sf::Vector2<T>` and `sf::Vector3<T>` Utility Functions\n\n`sf::Vector2<T>` and `sf::Vector3<T>` gained a number of new functions for performing common mathematic operations on vectors.\n\n| `sf::Vector2<T>` Function       | Description                              |\n| ------------------------------- | ---------------------------------------- |\n| `Vector2(T, sf::Angle)`         | Construct from polar coordinates         |\n| `length()`                      | Get length                               |\n| `lengthSquared()`               | Get length squared                       |\n| `normalized()`                  | Get vector normalized to unit circle     |\n| `angleTo(sf::Vector2)`          | Get angle to another vector              |\n| `angle()`                       | Get angle from X axis                    |\n| `rotatedBy(sf::Angle)`          | Get vector rotated by a given angle      |\n| `projectedOnto(sf::Vector2)`    | Get vector projected onto another vector |\n| `perpendicular()`               | Get perpendicular vector                 |\n| `dot(sf::Vector2)`              | Get dot product                          |\n| `cross(sf::Vector2)`            | Get Z component of cross product         |\n| `componentWiseMul(sf::Vector2)` | Get component-wise multiple              |\n| `componentWiseDiv(sf::Vector2)` | Get component-wise divisor               |\n\n| `sf::Vector3<T>` Function       | Description                           |\n| ------------------------------- | ------------------------------------- |\n| `length()`                      | Get length                            |\n| `lengthSquared()`               | Get length squared                    |\n| `normalized()`                  | Get vector normalized to unit circle  |\n| `dot(sf::Vector3)`              | Get dot product                       |\n| `cross(sf::Vector3)`            | Get cross product                     |\n| `componentWiseMul(sf::Vector3)` | Get component-wise multiple           |\n| `componentWiseDiv(sf::Vector3)` | Get component-wise divisor            |\n\n## Threading Primitives\n\n`sf::Lock`, `sf::Mutex`, `sf::Thread`, `sf::ThreadLocal`, and `sf::ThreadLocalPtr` were removed and replaced with their equivalents from the standard library.\nThe standard library provides multiple options for threads, locks, and mutexes among other threading primitives.\n\n| v2                   | v3                                               |\n| -------------------- | ------------------------------------------------ |\n| `sf::Lock `          | `std::lock_guard` or `std::unique_lock`          |\n| `sf::Mutex`          | `std::mutex` or `std::recursive_mutex`           |\n| `sf::Thread`         | `std::thread` or `std::jthread` (requires C++20) |\n| `sf::ThreadLocal`    | `thread_local`                                   |\n| `sf::ThreadLocalPtr` | `thread_local`                                   |\n\n## Sound Samples and Channel Map\n\nSFML 3 introduces the concept of a Channel Map which defines the mapping of the position in sample frame to the sound channel.\nFor example, if you have a sound frame with six different samples for a 5.1 sound system, the Channel Map defines how each of those samples map to which speaker channel.\n\nSFML 2 always assumed the order as specified by OpenAL.\n\n```cpp\nauto samples = std::vector<std::int16_t>();\n// ...\n\nauto channelMap = std::vector<sf::SoundChannel>{\n    sf::SoundChannel::FrontLeft,\n    sf::SoundChannel::FrontCenter,\n    sf::SoundChannel::FrontRight,\n    sf::SoundChannel::BackRight,\n    sf::SoundChannel::BackLeft,\n    sf::SoundChannel::LowFrequencyEffects\n};\nauto soundBuffer = sf::SoundBuffer(samples.data(), samples.size(), channelMap.size(), 44100, channelMap);\nauto sound = sf::Sound(soundBuffer);\n```\n\nThis a breaking change for the following APIs:\n\n- `bool sf::SoundBuffer::loadFromSamples(...)`\n- `bool sf::SoundBuffer::update(...)`\n- `void sf::SoundStream::initialize(...)`\n- `bool sf::OutputSoundFile::openFromFile(...)`\n- `bool sf::SoundFileWriter::open(...)`\n\n## Deprecated APIs\n\nSFML 3 removes all of the deprecated APIs in SFML 2.\n\n| Deprecated API                      | Replacement                        |\n| ----------------------------------- | ---------------------------------- |\n| `sf::Event::MouseWheelEvent`        | `sf::Event::MouseWheelScrolled`    |\n| `sf::RenderWindow::capture`         | See 1                              |\n| `sf::RenderTexture::create`         | `sf::RenderTexture::resize`        |\n| `sf::Shader::setParameter`          | `sf::Shader::setUniform`           |\n| `sf::Text::setColor`                | `sf::Text::setFillColor`           |\n| `sf::Text::getColor`                | `sf::Text::getFillColor`           |\n| `sf::PrimitiveType::LinesStrip`     | `sf::PrimitiveType::LineStrip`     |\n| `sf::PrimitiveType::TrianglesStrip` | `sf::PrimitiveType::TriangleStrip` |\n| `sf::PrimitiveType::TrianglesFan`   | `sf::PrimitiveType::TriangleFan`   |\n| `sf::PrimitiveType::Quads`          | See 2                              |\n\n1. `sf::RenderWindow::capture` can be recreated by using an `sf::Texture` and its `sf::Texture::update(const Window&)` function to copy its contents into an `sf::Image` instead.\n2. `sf::PrimitiveType::Quads` can be replaced by another primitive type.\nThis is not a drop-in replacement but rather will require refactoring your code to work with a new geometry.\nOne viable option is to use `sf::PrimitiveType::Triangles` where two adjacent triangles join to form what was previously one quad.\n\n## Anti-Aliasing Renamed\n\nSFML 3 capitalizes the `A` of `aliasing` for all the APIs.\n\n* `sf::RenderTexture::getMaximumAntialiasingLevel()` becomes `sf::RenderTexture::getMaximumAntiAliasingLevel()`\n* `sf::ContextSettings::antialiasingLevel` becomes `sf::ContextSettings::antiAliasingLevel`\n\n## Other Minor Changes\n\nSFML 3 includes various smaller changes that ought to be mentioned.\n\n* Changed the parameter order of the `sf::Text` constructor, so that the provided font is always the first parameter\n* Reverted to default value of CMake's `BUILD_SHARED_LIBS` which means SFML now builds static libraries by default\n* Changed `sf::String` interface to use `std::u16string` and `std::u32string`\n* Removed `sf::ContextSettings` constructor in favor of aggregate initialization\n* Removed `sf::View::reset` in favor of assigning from a new `sf::View` object\n* Added new `sf::CoordinateType` enumeration to `sf::RenderStates::RenderStates`\n* Removed `sf::Vertex` constructors in favor of aggregate initialization\n* Renamed `sf::Mouse::Button::XButton1` and `sf::Mouse::Button::XButton2` enumerators to `sf::Mouse::Button::Extra1` and `sf::Mouse::Button::Extra2`\n* Removed NonCopyable.hpp header in favor of using built-in language features for disabling copy operators\n* Converted the following classes to namespaces: `sf::Clipboard`, `sf::Keyboard`, `sf::Joystick`, `sf::Listener`, `sf::Mouse`, `sf::Sensor`, `sf::Touch`, `sf::Vulkan`\n* Removed `sf::SoundStream::setProcessingInterval` as miniaudio matches the internal processing rate to the underlying backend\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 4.1552734375,
          "content": "[![SFML logo](https://www.sfml-dev.org/images/logo.png)](https://www.sfml-dev.org)\n\n# SFML — Simple and Fast Multimedia Library\n\nSFML is a simple, fast, cross-platform and object-oriented multimedia API. It provides access to windowing, graphics, audio and network. It is written in C++, and has bindings for various languages such as C, .Net, Ruby, Python.\n\n## State of Development\n\nDevelopment is focused on version 3 in the `master` branch.\nNo more features are planned for the 2.x release series.\n\n## CMake Template\n\nThe easiest way to get started with SFML is our [CMake-based project template](https://github.com/SFML/cmake-sfml-project/blob/master/README.md).\nThis template will automatically download and build SFML alongside your own application.\nRead the README for full instructions on how to use it.\n\n## Download\n\n-   You can get the latest official release on [SFML's website](https://www.sfml-dev.org/download.php).\n-   You can also get the source code of the current development version from the [Git repository](https://github.com/SFML/SFML).\n-   Alternatively, you can get the latest snapshot / artifact builds from the [artifacts storage](https://artifacts.sfml-dev.org/by-branch/master/).\n\n## Install\n\nFollow the instructions of the [tutorials](https://www.sfml-dev.org/tutorials/), there is one for each platform/compiler that SFML supports.\n\n## Learn\n\nThere are several places to learn SFML:\n\n-   The [official tutorials](https://www.sfml-dev.org/tutorials/)\n-   The [online API documentation](https://www.sfml-dev.org/documentation/)\n-   The [community wiki](https://github.com/SFML/SFML/wiki/)\n\n## Community\n\nHere are some useful community links:\n\n-   [Discord](https://discord.gg/nr4X7Fh)\n-   [Twitter](https://twitter.com/sfmldev)\n-   [Forum](https://en.sfml-dev.org/forums/) ([French](https://fr.sfml-dev.org/forums/))\n\n## Contribute\n\nSFML is an open-source project, and it needs your help to go on growing and improving. If you want to get involved and suggest some additional features, file a bug report or submit a patch, please have a look at the [contribution guidelines](https://www.sfml-dev.org/contribute.php).\n\n## Authors\n\n-   Laurent Gomila (laurent@sfml-dev.org)\n-   Marco Antognini (hiura@sfml-dev.org)\n-   binary1248 (binary1248@hotmail.com)\n-   Lukas Dürrenberger (eXpl0it3r@sfml-dev.org)\n-   Jonathan De Wachter (dewachter.jonathan@gmail.com)\n-   Jan Haller (bromeon@sfml-dev.org)\n-   Mario Liebisch (mario@sfml-dev.org)\n-   Stefan Schindler (tank@sfml-dev.org)\n-   Artur Moreira (artturmoreira@gmail.com)\n-   Vittorio Romeo (vittorioromeo@sfml-dev.org)\n-   Chris Thrasher (thrasher@sfml-dev.org)\n-   And many other members of the SFML community\n\n## License\n\nThe SFML libraries and source code are distributed under the [zlib/libpng license](https://opensource.org/licenses/Zlib). See [license.md](license.md). External libraries used by SFML are distributed under their own licenses.\n\nIn short, SFML is free for any use (commercial or personal, proprietary or open-source). You can use SFML in your project without any restriction. You can even omit to mention that you use SFML -- although it would be appreciated.\n\n## External libraries used by SFML\n\n-   [_stb_image_ and _stb_image_write_](https://github.com/nothings/stb) are [public domain](https://github.com/nothings/stb/blob/master/LICENSE)\n-   [_freetype_](https://gitlab.freedesktop.org/freetype/freetype) is under the [FreeType license or the GPL license](https://gitlab.freedesktop.org/freetype/freetype/-/blob/master/LICENSE.TXT)\n-   [_libogg_](https://gitlab.xiph.org/xiph/ogg) is under the [BSD license](https://gitlab.xiph.org/xiph/ogg/-/blob/master/COPYING)\n-   [_libvorbis_](https://gitlab.xiph.org/xiph/vorbis) is under the [BSD license](https://gitlab.xiph.org/xiph/vorbis/-/blob/master/COPYING)\n-   [_libflac_](https://gitlab.xiph.org/xiph/flac) is under the [BSD license](https://gitlab.xiph.org/xiph/flac/-/blob/master/COPYING.Xiph)\n-   [_minimp3_](https://github.com/lieff/minimp3) is under the [CC0 license](https://github.com/lieff/minimp3/blob/master/LICENSE)\n-   [_miniaudio_](https://github.com/mackron/miniaudio) is [public domain or under the MIT No Attribution license](https://github.com/mackron/miniaudio/blob/master/LICENSE)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}