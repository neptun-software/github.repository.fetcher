{
  "metadata": {
    "timestamp": 1736566287072,
    "page": 35,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ml-explore/mlx",
      "stars": 18247,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.4921875,
          "content": "---\nAccessModifierOffset: -1\nAlignAfterOpenBracket: AlwaysBreak\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlinesLeft: true\nAlignOperands:   false\nAlignTrailingComments: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: true\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: false\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nForEachMacros:   [ FOR_EACH, FOR_EACH_R, FOR_EACH_RANGE, ]\nIncludeCategories:\n  - Regex:           '^<.*\\.h(pp)?>'\n    Priority:        1\n  - Regex:           '^<.*'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        3\nIndentCaseLabels: true\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: false\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nReflowComments:  true\nSortIncludes:    true\nSpaceAfterCStyleCast: false\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        8\nUseTab:          Never\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7744140625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# tensor files\n*.safe\n*.safetensors\n\n# Metal libraries\n*.metallib\nvenv/\n\n# Distribution / packaging\npython/mlx/core\npython/mlx/share\npython/mlx/include\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# vim\n*.swp\n\n# Ignore build dir\nbuild/\n\n# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Debug symbols\n*.pdb\n\n# VSCode \n.vscode/\n.DS_Store\n\n# Jetbrains\n.cache\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.5341796875,
          "content": "repos:\n-   repo: https://github.com/pre-commit/mirrors-clang-format\n    rev: v19.1.4\n    hooks:\n    -   id: clang-format\n# Using this mirror lets us use mypyc-compiled black, which is about 2x faster\n-   repo: https://github.com/psf/black-pre-commit-mirror\n    rev: 24.10.0\n    hooks:\n    -   id: black\n    \n-   repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n    -   id: isort\n        args:\n            - --profile=black\n- repo: https://github.com/cheshirekow/cmake-format-precommit\n  rev: v0.6.13\n  hooks:\n    - id: cmake-format\n"
        },
        {
          "name": "ACKNOWLEDGMENTS.md",
          "type": "blob",
          "size": 13.9365234375,
          "content": "# Individual Contributors\n\nIf you wish to be acknowledged for your contributions, please list your name\nwith a short description of your contribution(s) below. For example:\n\n- Jane Smith: Added the `foo` and `bar` ops.\n\nMLX was developed with contributions from the following individuals:\n\n- Nripesh Niketan: Added `softsign`, `softmax`, `hardswish`, `logsoftmax` activation functions. Added `dropout3d` ops. Added `LogicalAnd` and `LogicalOR` ops. Added `clip_grad_norm` along with `tree_reduce`. Added `cross`.\n- Juarez Bochi: Fixed bug in cross attention.\n- Justin Deschenaux: Sine, Cosine, arange, randint, truncated normal, bernoulli, lion optimizer, Dropout2d, linear and logistic regression python example.\n- Diogo Da Cruz: Added `tri`, `tril`, `triu`, `tensordot`, `inner`, `outer`, `tile`, `StreamContext`, `stream`, safetensors support, `einsum`, and `einsum_path`.\n- Gabrijel Boduljak: Added `mlx.core.linalg`, implemented `norm` method and `InstanceNorm` layer. Implemented pooling layers and ``Upsample``.\n- Hinrik Snær Guðmundsson: Added `atleast_1d`, `atleast_2d`, `atleast_3d` ops.\n- Luca Arnaboldi: Added `Ceil` and `Floor` ops; implemented pickling, copy and deepcopy for mlx arrays.\n- Brian Keene & Atila Orhon, with Argmax Inc.: Added `fast.scaled_dot_product_attention`\n- AmirHossein Razlighi: Added chaining support for some of the ops in `nn.Module`. Comparison works for non array objects in `mlx.core.array`. Exception handling for invalid operations in `mlx.core.array`.\n- Gleb Pobudzey: Added the `where` primitive, and groups in 1D and 2D convolutions.\n- Paul Paczuski: Improved stability of BCE loss calculation\n- Max-Heinrich Laves: Added `conv_transpose1d`, `conv_transpose2d`, and `conv_transpose3d` ops.\n\n<a href=\"https://github.com/ml-explore/mlx/graphs/contributors\">\n  <img class=\"dark-light\" src=\"https://contrib.rocks/image?repo=ml-explore/mlx&anon=0&columns=20&max=100&r=true\" />\n</a>\n\n# Third-Party Software\n\nMLX leverages several third-party software, listed here together with\ntheir license copied verbatim.\n\n## PocketFFT\n\nCopyright (C) 2010-2018 Max-Planck-Society\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n* Neither the name of the copyright holder nor the names of its contributors may\n  be used to endorse or promote products derived from this software without\n  specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n## metal-cpp\n\n                              Apache License\n                        Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n  \"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.\n\n  \"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.\n\n  \"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.\n\n  \"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.\n\n  \"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.\n\n  \"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.\n\n  \"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).\n\n  \"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.\n\n  \"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"\n\n  \"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n  this License, each Contributor hereby grants to You a perpetual,\n  worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n  copyright license to reproduce, prepare Derivative Works of,\n  publicly display, publicly perform, sublicense, and distribute the\n  Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n  this License, each Contributor hereby grants to You a perpetual,\n  worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n  (except as stated in this section) patent license to make, have made,\n  use, offer to sell, sell, import, and otherwise transfer the Work,\n  where such license applies only to those patent claims licensable\n  by such Contributor that are necessarily infringed by their\n  Contribution(s) alone or by combination of their Contribution(s)\n  with the Work to which such Contribution(s) was submitted. If You\n  institute patent litigation against any entity (including a\n  cross-claim or counterclaim in a lawsuit) alleging that the Work\n  or a Contribution incorporated within the Work constitutes direct\n  or contributory patent infringement, then any patent licenses\n  granted to You under this License for that Work shall terminate\n  as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n  Work or Derivative Works thereof in any medium, with or without\n  modifications, and in Source or Object form, provided that You\n  meet the following conditions:\n\n  (a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and\n\n  (b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and\n\n  (c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and\n\n  (d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.\n\n  You may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n  any Contribution intentionally submitted for inclusion in the Work\n  by You to the Licensor shall be under the terms and conditions of\n  this License, without any additional terms or conditions.\n  Notwithstanding the above, nothing herein shall supersede or modify\n  the terms of any separate license agreement you may have executed\n  with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n  names, trademarks, service marks, or product names of the Licensor,\n  except as required for reasonable and customary use in describing the\n  origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n  agreed to in writing, Licensor provides the Work (and each\n  Contributor provides its Contributions) on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n  implied, including, without limitation, any warranties or conditions\n  of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n  PARTICULAR PURPOSE. You are solely responsible for determining the\n  appropriateness of using or redistributing the Work and assume any\n  risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n  whether in tort (including negligence), contract, or otherwise,\n  unless required by applicable law (such as deliberate and grossly\n  negligent acts) or agreed to in writing, shall any Contributor be\n  liable to You for damages, including any direct, indirect, special,\n  incidental, or consequential damages of any character arising as a\n  result of this License or out of the use or inability to use the\n  Work (including but not limited to damages for loss of goodwill,\n  work stoppage, computer failure or malfunction, or any and all\n  other commercial damages or losses), even if such Contributor\n  has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n  the Work or Derivative Works thereof, You may choose to offer,\n  and charge a fee for, acceptance of support, warranty, indemnity,\n  or other liability obligations and/or rights consistent with this\n  License. However, in accepting such obligations, You may act only\n  on Your own behalf and on Your sole responsibility, not on behalf\n  of any other Contributor, and only if You agree to indemnify,\n  defend, and hold each Contributor harmless for any liability\n  incurred by, or claims asserted against, such Contributor by reason\n  of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n\nCopyright © 2023 Apple Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.5693359375,
          "content": "cff-version: 1.2.0\ntitle: mlx\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntype: software\nauthors:\n  - given-names: Awni\n    family-names: Hannun\n    affiliation: Apple\n  - given-names: Jagrit\n    family-names: Digani\n    affiliation: Apple\n  - given-names: Angelos\n    family-names: Katharopoulos\n    affiliation: Apple\n  - given-names: Ronan\n    family-names: Collobert\n    affiliation: Apple\nrepository-code: 'https://github.com/ml-explore'\nabstract: >-\n  MLX: efficient and flexible machine learning on Apple\n  silicon\nlicense: MIT\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.3466796875,
          "content": "cmake_minimum_required(VERSION 3.25)\n\nproject(mlx LANGUAGES C CXX)\n\n# ----------------------------- Setup -----------------------------\nset(CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake\")\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\nset(CMAKE_INSTALL_MESSAGE NEVER)\n\n# ----------------------------- Configuration -----------------------------\noption(MLX_BUILD_TESTS \"Build tests for mlx\" ON)\noption(MLX_BUILD_EXAMPLES \"Build examples for mlx\" ON)\noption(MLX_BUILD_BENCHMARKS \"Build benchmarks for mlx\" OFF)\noption(MLX_BUILD_PYTHON_BINDINGS \"Build python bindings for mlx\" OFF)\noption(MLX_BUILD_METAL \"Build metal backend\" ON)\noption(MLX_BUILD_CPU \"Build cpu backend\" ON)\noption(MLX_METAL_DEBUG \"Enhance metal debug workflow\" OFF)\noption(MLX_ENABLE_X64_MAC \"Enable building for x64 macOS\" OFF)\noption(MLX_BUILD_GGUF \"Include support for GGUF format\" ON)\noption(MLX_BUILD_SAFETENSORS \"Include support for safetensors format\" ON)\noption(MLX_BUILD_BLAS_FROM_SOURCE \"Build OpenBLAS from source code\" OFF)\noption(MLX_METAL_JIT \"Use JIT compilation for Metal kernels\" OFF)\noption(BUILD_SHARED_LIBS \"Build mlx as a shared library\" OFF)\n\nif(NOT MLX_VERSION)\n  set(MLX_VERSION 0.22.0)\nendif()\nadd_compile_definitions(\"MLX_VERSION=${MLX_VERSION}\")\n\n# --------------------- Processor tests -------------------------\n\nmessage(\n  STATUS\n    \"Building MLX for ${CMAKE_SYSTEM_PROCESSOR} processor on ${CMAKE_SYSTEM_NAME}\"\n)\n\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n  if(${CMAKE_SYSTEM_PROCESSOR} MATCHES \"x86_64\")\n    if(NOT MLX_ENABLE_X64_MAC)\n      message(\n        FATAL_ERROR\n          \"Building for x86_64 on macOS is not supported.\"\n          \" If you are on an Apple silicon system, check the build\"\n          \" documentation for possible fixes: \"\n          \"https://ml-explore.github.io/mlx/build/html/install.html#build-from-source\"\n      )\n    else()\n      set(MLX_BUILD_METAL OFF)\n      message(WARNING \"Building for x86_64 arch is not officially supported.\")\n    endif()\n  endif()\n\nelse()\n  set(MLX_BUILD_METAL OFF)\n  message(WARNING \"MLX is prioritised for Apple silicon systems using macOS.\")\nendif()\n\n# ----------------------------- Lib -----------------------------\n\ninclude(FetchContent)\n# Avoid warning about DOWNLOAD_EXTRACT_TIMESTAMP in CMake 3.24:\ncmake_policy(SET CMP0135 NEW)\n\nadd_library(mlx)\n\nif(MLX_BUILD_METAL)\n  set(METAL_LIB \"-framework Metal\")\n  set(FOUNDATION_LIB \"-framework Foundation\")\n  set(QUARTZ_LIB \"-framework QuartzCore\")\nendif()\n\nif(MLX_BUILD_METAL AND NOT METAL_LIB)\n  message(STATUS \"Metal not found. Unable to build GPU\")\n  set(MLX_BUILD_METAL OFF)\n  set(MLX_METAL_DEBUG OFF)\nelseif(MLX_BUILD_METAL)\n  message(STATUS \"Building METAL sources\")\n\n  if(MLX_METAL_DEBUG)\n    add_compile_definitions(MLX_METAL_DEBUG)\n  endif()\n\n  # Throw an error if xcrun not found\n  execute_process(\n    COMMAND zsh \"-c\" \"/usr/bin/xcrun -sdk macosx --show-sdk-version\"\n    OUTPUT_VARIABLE MACOS_SDK_VERSION COMMAND_ERROR_IS_FATAL ANY)\n\n  if(${MACOS_SDK_VERSION} LESS 14.0)\n    message(\n      FATAL_ERROR\n        \"MLX requires macOS SDK >= 14.0 to be built with MLX_BUILD_METAL=ON\")\n  endif()\n  message(STATUS \"Building with macOS SDK version ${MACOS_SDK_VERSION}\")\n\n  set(METAL_CPP_URL\n      https://developer.apple.com/metal/cpp/files/metal-cpp_macOS15_iOS18.zip)\n\n  if(NOT CMAKE_OSX_DEPLOYMENT_TARGET STREQUAL \"\")\n    set(XCRUN_FLAGS \"-mmacosx-version-min=${CMAKE_OSX_DEPLOYMENT_TARGET}\")\n  endif()\n  execute_process(\n    COMMAND\n      zsh \"-c\"\n      \"echo \\\"__METAL_VERSION__\\\" | xcrun -sdk macosx metal ${XCRUN_FLAGS} -E -x metal -P - | tail -1 | tr -d '\\n'\"\n    OUTPUT_VARIABLE MLX_METAL_VERSION COMMAND_ERROR_IS_FATAL ANY)\n  FetchContent_Declare(metal_cpp URL ${METAL_CPP_URL})\n\n  FetchContent_MakeAvailable(metal_cpp)\n  target_include_directories(\n    mlx PUBLIC $<BUILD_INTERFACE:${metal_cpp_SOURCE_DIR}>\n               $<INSTALL_INTERFACE:include/metal_cpp>)\n  target_link_libraries(mlx PUBLIC ${METAL_LIB} ${FOUNDATION_LIB} ${QUARTZ_LIB})\nendif()\n\nif(WIN32)\n  if(MSVC)\n    # GGUF does not build with MSVC.\n    set(MLX_BUILD_GGUF OFF)\n    # There is no prebuilt OpenBLAS distribution for MSVC.\n    set(MLX_BUILD_BLAS_FROM_SOURCE ON)\n  endif()\n  # Windows implementation of dlfcn.h APIs.\n  FetchContent_Declare(\n    dlfcn-win32\n    GIT_REPOSITORY https://github.com/dlfcn-win32/dlfcn-win32.git\n    GIT_TAG v1.4.1\n    EXCLUDE_FROM_ALL)\n  block()\n  set(BUILD_SHARED_LIBS OFF)\n  FetchContent_MakeAvailable(dlfcn-win32)\n  endblock()\n  target_include_directories(mlx PRIVATE \"${dlfcn-win32_SOURCE_DIR}/src\")\n  target_link_libraries(mlx PRIVATE dl)\nendif()\n\nif(MLX_BUILD_CPU)\n  find_library(ACCELERATE_LIBRARY Accelerate)\n  if(ACCELERATE_LIBRARY)\n    message(STATUS \"Accelerate found ${ACCELERATE_LIBRARY}\")\n    set(MLX_BUILD_ACCELERATE ON)\n  else()\n    message(STATUS \"Accelerate or arm neon not found, using default backend.\")\n    set(MLX_BUILD_ACCELERATE OFF)\n  endif()\n\n  if(MLX_BUILD_ACCELERATE)\n    target_link_libraries(mlx PUBLIC ${ACCELERATE_LIBRARY})\n    add_compile_definitions(ACCELERATE_NEW_LAPACK)\n  elseif(MLX_BUILD_BLAS_FROM_SOURCE)\n    # Download and build OpenBLAS from source code.\n    FetchContent_Declare(\n      openblas\n      GIT_REPOSITORY https://github.com/OpenMathLib/OpenBLAS.git\n      GIT_TAG v0.3.28\n      EXCLUDE_FROM_ALL)\n    set(BUILD_STATIC_LIBS ON) # link statically\n    set(NOFORTRAN ON) # msvc has no fortran compiler\n    FetchContent_MakeAvailable(openblas)\n    target_link_libraries(mlx PRIVATE openblas)\n    target_include_directories(\n      mlx PRIVATE \"${openblas_SOURCE_DIR}/lapack-netlib/LAPACKE/include\"\n                  \"${CMAKE_BINARY_DIR}/generated\" \"${CMAKE_BINARY_DIR}\")\n  else()\n    if(${CMAKE_HOST_APPLE})\n      # The blas shipped in macOS SDK is not supported, search homebrew for\n      # openblas instead.\n      set(BLA_VENDOR OpenBLAS)\n      set(LAPACK_ROOT\n          \"${LAPACK_ROOT};$ENV{LAPACK_ROOT};/usr/local/opt/openblas\")\n    endif()\n    # Search and link with lapack.\n    find_package(LAPACK REQUIRED)\n    if(NOT LAPACK_FOUND)\n      message(FATAL_ERROR \"Must have LAPACK installed\")\n    endif()\n    find_path(LAPACK_INCLUDE_DIRS lapacke.h /usr/include /usr/local/include\n              /usr/local/opt/openblas/include)\n    message(STATUS \"Lapack lib \" ${LAPACK_LIBRARIES})\n    message(STATUS \"Lapack include \" ${LAPACK_INCLUDE_DIRS})\n    target_include_directories(mlx PRIVATE ${LAPACK_INCLUDE_DIRS})\n    target_link_libraries(mlx PRIVATE ${LAPACK_LIBRARIES})\n    # List blas after lapack otherwise we may accidentally incldue an old\n    # version of lapack.h from the include dirs of blas.\n    find_package(BLAS REQUIRED)\n    if(NOT BLAS_FOUND)\n      message(FATAL_ERROR \"Must have BLAS installed\")\n    endif()\n    # TODO find a cleaner way to do this\n    find_path(BLAS_INCLUDE_DIRS cblas.h /usr/include /usr/local/include\n              $ENV{BLAS_HOME}/include)\n    message(STATUS \"Blas lib \" ${BLAS_LIBRARIES})\n    message(STATUS \"Blas include \" ${BLAS_INCLUDE_DIRS})\n    target_include_directories(mlx PRIVATE ${BLAS_INCLUDE_DIRS})\n    target_link_libraries(mlx PRIVATE ${BLAS_LIBRARIES})\n  endif()\nelse()\n  set(MLX_BUILD_ACCELERATE OFF)\nendif()\n\nfind_package(MPI)\nif(MPI_FOUND)\n  execute_process(\n    COMMAND zsh \"-c\" \"mpirun --version\"\n    OUTPUT_VARIABLE MPI_VERSION\n    ERROR_QUIET)\n  if(${MPI_VERSION} MATCHES \".*Open MPI.*\")\n    target_include_directories(mlx PRIVATE ${MPI_INCLUDE_PATH})\n  elseif(MPI_VERSION STREQUAL \"\")\n    set(MPI_FOUND FALSE)\n    message(\n      WARNING \"MPI found but mpirun is not available. Building without MPI.\")\n  else()\n    set(MPI_FOUND FALSE)\n    message(WARNING \"MPI which is not OpenMPI found. Building without MPI.\")\n  endif()\nendif()\n\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}/mlx)\n\ntarget_include_directories(\n  mlx PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}>\n             $<INSTALL_INTERFACE:include>)\n\nFetchContent_Declare(\n  fmt\n  GIT_REPOSITORY https://github.com/fmtlib/fmt.git\n  GIT_TAG 10.2.1\n  EXCLUDE_FROM_ALL)\nFetchContent_MakeAvailable(fmt)\ntarget_link_libraries(mlx PRIVATE $<BUILD_INTERFACE:fmt::fmt-header-only>)\n\nif(MLX_BUILD_PYTHON_BINDINGS)\n  message(STATUS \"Building Python bindings.\")\n  find_package(\n    Python 3.8\n    COMPONENTS Interpreter Development.Module\n    REQUIRED)\n  execute_process(\n    COMMAND \"${Python_EXECUTABLE}\" -m nanobind --cmake_dir\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    OUTPUT_VARIABLE nanobind_ROOT)\n  find_package(nanobind CONFIG REQUIRED)\n  add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/python/src)\nendif()\n\nif(MLX_BUILD_TESTS)\n  include(CTest)\n  add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/tests)\nendif()\n\nif(MLX_BUILD_EXAMPLES)\n  add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/examples/cpp)\nendif()\n\nif(MLX_BUILD_BENCHMARKS)\n  add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/benchmarks/cpp)\nendif()\n\n# ----------------------------- Installation -----------------------------\ninclude(GNUInstallDirs)\n\n# Install library\ninstall(\n  TARGETS mlx\n  EXPORT MLXTargets\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n  INCLUDES\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\n# Install headers\ninstall(\n  DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/mlx\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n  COMPONENT headers\n  FILES_MATCHING\n  PATTERN \"*.h\"\n  PATTERN \"backend/metal/kernels.h\" EXCLUDE)\n\n# Install metal dependencies\nif(MLX_BUILD_METAL)\n\n  # Install metal cpp\n  install(\n    DIRECTORY ${metal_cpp_SOURCE_DIR}/\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/metal_cpp\n    COMPONENT metal_cpp_source)\n\nendif()\n\n# Install cmake config\nset(MLX_CMAKE_BUILD_CONFIG ${CMAKE_BINARY_DIR}/MLXConfig.cmake)\nset(MLX_CMAKE_BUILD_VERSION_CONFIG ${CMAKE_BINARY_DIR}/MLXConfigVersion.cmake)\nset(MLX_CMAKE_INSTALL_MODULE_DIR share/cmake/MLX)\n\ninstall(\n  EXPORT MLXTargets\n  FILE MLXTargets.cmake\n  DESTINATION ${MLX_CMAKE_INSTALL_MODULE_DIR})\n\ninclude(CMakePackageConfigHelpers)\n\nwrite_basic_package_version_file(\n  ${MLX_CMAKE_BUILD_VERSION_CONFIG}\n  COMPATIBILITY SameMajorVersion\n  VERSION ${MLX_VERSION})\n\nconfigure_package_config_file(\n  ${CMAKE_CURRENT_LIST_DIR}/mlx.pc.in ${MLX_CMAKE_BUILD_CONFIG}\n  INSTALL_DESTINATION ${MLX_CMAKE_INSTALL_MODULE_DIR}\n  NO_CHECK_REQUIRED_COMPONENTS_MACRO\n  PATH_VARS CMAKE_INSTALL_LIBDIR CMAKE_INSTALL_INCLUDEDIR\n            MLX_CMAKE_INSTALL_MODULE_DIR)\n\ninstall(FILES ${MLX_CMAKE_BUILD_CONFIG} ${MLX_CMAKE_BUILD_VERSION_CONFIG}\n        DESTINATION ${MLX_CMAKE_INSTALL_MODULE_DIR})\n\ninstall(DIRECTORY ${CMAKE_MODULE_PATH}/\n        DESTINATION ${MLX_CMAKE_INSTALL_MODULE_DIR})\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.4140625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n[opensource-conduct@group.apple.com](mailto:opensource-conduct@group.apple.com).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.26171875,
          "content": "# Contributing to MLX\n\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Pull Requests\n\n1. Fork and submit pull requests to the repo. \n2. If you've added code that should be tested, add tests.\n3. If a change is likely to impact efficiency, run some of the benchmarks before\n   and after the change. Examples of benchmarks can be found in `benchmarks/python/`.\n4. If you've changed APIs, update the documentation.\n5. Every PR should have passing tests and at least one review. \n6. For code formatting install `pre-commit` using something like `pip install pre-commit` and run `pre-commit install`.\n   This should install hooks for running `black` and `clang-format` to ensure\n   consistent style for C++ and python code.\n \n   You can also run the formatters manually as follows:\n \n     ```\n     clang-format -i file.cpp\n     ```\n \n     ```\n     black file.py\n     ```\n \n   or run `pre-commit run --all-files` to check all files in the repo.\n\n## Issues\n\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\n## License\n\nBy contributing to MLX, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright © 2023 Apple Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.130859375,
          "content": "include CMakeLists.txt\nrecursive-include mlx/ *\ninclude python/src/*\ninclude python/mlx/py.typed # support type hinting as in PEP-561\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.4267578125,
          "content": "# MLX\n\n[**Quickstart**](#quickstart) | [**Installation**](#installation) |\n[**Documentation**](https://ml-explore.github.io/mlx/build/html/index.html) |\n[**Examples**](#examples) \n\n[![CircleCI](https://circleci.com/gh/ml-explore/mlx.svg?style=svg)](https://circleci.com/gh/ml-explore/mlx)\n\nMLX is an array framework for machine learning on Apple silicon,\nbrought to you by Apple machine learning research.\n\nSome key features of MLX include:\n\n - **Familiar APIs**: MLX has a Python API that closely follows NumPy.  MLX\n   also has fully featured C++, [C](https://github.com/ml-explore/mlx-c), and\n   [Swift](https://github.com/ml-explore/mlx-swift/) APIs, which closely mirror\n   the Python API.  MLX has higher-level packages like `mlx.nn` and\n   `mlx.optimizers` with APIs that closely follow PyTorch to simplify building\n   more complex models.\n\n - **Composable function transformations**: MLX supports composable function\n   transformations for automatic differentiation, automatic vectorization,\n   and computation graph optimization.\n\n - **Lazy computation**: Computations in MLX are lazy. Arrays are only\n   materialized when needed.\n\n - **Dynamic graph construction**: Computation graphs in MLX are constructed\n   dynamically. Changing the shapes of function arguments does not trigger\n   slow compilations, and debugging is simple and intuitive.\n\n - **Multi-device**: Operations can run on any of the supported devices\n   (currently the CPU and the GPU).\n\n - **Unified memory**: A notable difference from MLX and other frameworks\n   is the *unified memory model*. Arrays in MLX live in shared memory.\n   Operations on MLX arrays can be performed on any of the supported\n   device types without transferring data.\n\nMLX is designed by machine learning researchers for machine learning\nresearchers. The framework is intended to be user-friendly, but still efficient\nto train and deploy models. The design of the framework itself is also\nconceptually simple. We intend to make it easy for researchers to extend and\nimprove MLX with the goal of quickly exploring new ideas. \n\nThe design of MLX is inspired by frameworks like\n[NumPy](https://numpy.org/doc/stable/index.html),\n[PyTorch](https://pytorch.org/), [Jax](https://github.com/google/jax), and\n[ArrayFire](https://arrayfire.org/).\n\n## Examples\n\nThe [MLX examples repo](https://github.com/ml-explore/mlx-examples) has a\nvariety of examples, including:\n\n- [Transformer language model](https://github.com/ml-explore/mlx-examples/tree/main/transformer_lm) training.\n- Large-scale text generation with\n  [LLaMA](https://github.com/ml-explore/mlx-examples/tree/main/llms/llama) and\n  finetuning with [LoRA](https://github.com/ml-explore/mlx-examples/tree/main/lora).\n- Generating images with [Stable Diffusion](https://github.com/ml-explore/mlx-examples/tree/main/stable_diffusion).\n- Speech recognition with [OpenAI's Whisper](https://github.com/ml-explore/mlx-examples/tree/main/whisper).\n\n## Quickstart\n\nSee the [quick start\nguide](https://ml-explore.github.io/mlx/build/html/usage/quick_start.html)\nin the documentation.\n\n## Installation\n\nMLX is available on [PyPI](https://pypi.org/project/mlx/). To install the Python API, run:\n\n**With `pip`**:\n\n```\npip install mlx\n```\n\n**With `conda`**:\n\n```\nconda install -c conda-forge mlx\n```\n\nCheckout the\n[documentation](https://ml-explore.github.io/mlx/build/html/install.html#)\nfor more information on building the C++ and Python APIs from source.\n\n## Contributing \n\nCheck out the [contribution guidelines](https://github.com/ml-explore/mlx/tree/main/CONTRIBUTING.md) for more information\non contributing to MLX. See the\n[docs](https://ml-explore.github.io/mlx/build/html/install.html) for more\ninformation on building from source, and running tests.\n\nWe are grateful for all of [our\ncontributors](https://github.com/ml-explore/mlx/tree/main/ACKNOWLEDGMENTS.md#Individual-Contributors). If you contribute\nto MLX and wish to be acknowledged, please add your name to the list in your\npull request.\n\n## Citing MLX\n\nThe MLX software suite was initially developed with equal contribution by Awni\nHannun, Jagrit Digani, Angelos Katharopoulos, and Ronan Collobert. If you find\nMLX useful in your research and wish to cite it, please use the following\nBibTex entry:\n\n```\n@software{mlx2023,\n  author = {Awni Hannun and Jagrit Digani and Angelos Katharopoulos and Ronan Collobert},\n  title = {{MLX}: Efficient and flexible machine learning on Apple silicon},\n  url = {https://github.com/ml-explore},\n  version = {0.0},\n  year = {2023},\n}\n```\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "mlx.pc.in",
          "type": "blob",
          "size": 1.662109375,
          "content": "# Find MLX\n#\n# Defines the following variables:\n#\n#   MLX_FOUND            : True if MLX is found\n#   MLX_INCLUDE_DIRS     : Include directory\n#   MLX_LIBRARIES        : Libraries to link against\n#   MLX_CXX_FLAGS        : Additional compiler flags\n#   MLX_BUILD_ACCELERATE : True if MLX was built with accelerate \n#   MLX_BUILD_METAL      : True if MLX was built with metal \n\n@PACKAGE_INIT@\n\ninclude(@PACKAGE_MLX_CMAKE_INSTALL_MODULE_DIR@/MLXTargets.cmake)\ninclude(@PACKAGE_MLX_CMAKE_INSTALL_MODULE_DIR@/extension.cmake)\n\nset_and_check(MLX_LIBRARY_DIRS @PACKAGE_CMAKE_INSTALL_LIBDIR@)\nset_and_check(MLX_INCLUDE_DIRS @PACKAGE_CMAKE_INSTALL_INCLUDEDIR@)\nset(MLX_LIBRARIES mlx)\n\nfind_library(MLX_LIBRARY mlx PATHS ${MLX_LIBRARY_DIRS})\n\nif (@MLX_BUILD_ACCELERATE@)\n    set(MLX_BUILD_ACCELERATE @MLX_BUILD_ACCELERATE@)\n    set(MLX_CXX_FLAGS ${MLX_CXX_FLAGS} -DACCELERATE_NEW_LAPACK)\nendif()\n\nif (@MLX_BUILD_METAL@)\n    set(MLX_BUILD_METAL @MLX_BUILD_METAL@)\n    set(MLX_CXX_FLAGS ${MLX_CXX_FLAGS} -D_METAL_)\n    set(MLX_INCLUDE_DIRS \n        \"${MLX_INCLUDE_DIRS};\"\n        @PACKAGE_CMAKE_INSTALL_INCLUDEDIR@/metal_cpp\n    )\n    if(@MLX_METAL_VERSION@ GREATER_EQUAL 310)\n      set(MLX_INCLUDE_DIRS\n        \"${MLX_INCLUDE_DIRS};\"\n        @PACKAGE_CMAKE_INSTALL_INCLUDEDIR@/mlx/backend/metal/kernels/metal_3_1)\n    else()\n      set(MLX_INCLUDE_DIRS\n        \"${MLX_INCLUDE_DIRS};\"\n        @PACKAGE_CMAKE_INSTALL_INCLUDEDIR@/mlx/backend/metal/kernels/metal_3_0)\n    endif()\nendif()\n\nset_target_properties(mlx PROPERTIES\n    CXX_STANDARD 17\n    INTERFACE_COMPILE_OPTIONS \"${MLX_CXX_FLAGS}\"\n)\n\ninclude(FindPackageHandleStandardArgs)\nfind_package_handle_standard_args(MLX DEFAULT_MSG MLX_LIBRARY MLX_INCLUDE_DIRS)\n"
        },
        {
          "name": "mlx",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.125,
          "content": "[build-system]\nrequires = [\n  \"setuptools>=42\",\n  \"nanobind==2.4.0\",\n  \"cmake>=3.25\",\n]\nbuild-backend = \"setuptools.build_meta\"\n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 7.2578125,
          "content": "# Copyright © 2023 Apple Inc.\n\nimport datetime\nimport os\nimport platform\nimport re\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom subprocess import run\n\nfrom setuptools import Command, Extension, find_namespace_packages, setup\nfrom setuptools.command.build_ext import build_ext\n\n\ndef get_version(version):\n    if \"PYPI_RELEASE\" not in os.environ:\n        today = datetime.date.today()\n        version = f\"{version}.dev{today.year}{today.month:02d}{today.day:02d}\"\n\n        if \"DEV_RELEASE\" not in os.environ:\n            git_hash = (\n                run(\n                    \"git rev-parse --short HEAD\".split(),\n                    capture_output=True,\n                    check=True,\n                )\n                .stdout.strip()\n                .decode()\n            )\n            version = f\"{version}+{git_hash}\"\n\n    return version\n\n\n# A CMakeExtension needs a sourcedir instead of a file list.\n# The name must be the _single_ output extension from the CMake build.\n# If you need multiple extensions, see scikit-build.\nclass CMakeExtension(Extension):\n    def __init__(self, name: str, sourcedir: str = \"\") -> None:\n        super().__init__(name, sources=[])\n        self.sourcedir = os.fspath(Path(sourcedir).resolve())\n\n\nclass CMakeBuild(build_ext):\n    def build_extension(self, ext: CMakeExtension) -> None:\n        # Must be in this form due to bug in .resolve() only fixed in Python 3.10+\n        ext_fullpath = Path.cwd() / self.get_ext_fullpath(ext.name)  # type: ignore[no-untyped-call]\n        extdir = ext_fullpath.parent.resolve()\n\n        debug = int(os.environ.get(\"DEBUG\", 0)) if self.debug is None else self.debug\n        cfg = \"Debug\" if debug else \"Release\"\n\n        # CMake lets you override the generator - we need to check this.\n        # Can be set with Conda-Build, for example.\n        cmake_generator = os.environ.get(\"CMAKE_GENERATOR\", \"\")\n\n        # Set Python_EXECUTABLE instead if you use PYBIND11_FINDPYTHON\n        # EXAMPLE_VERSION_INFO shows you how to pass a value into the C++ code\n        # from Python.\n        cmake_args = [\n            f\"-DCMAKE_INSTALL_PREFIX={extdir}{os.sep}\",\n            f\"-DCMAKE_BUILD_TYPE={cfg}\",\n            \"-DMLX_BUILD_PYTHON_BINDINGS=ON\",\n            \"-DMLX_BUILD_TESTS=OFF\",\n            \"-DMLX_BUILD_BENCHMARKS=OFF\",\n            \"-DMLX_BUILD_EXAMPLES=OFF\",\n            f\"-DMLX_PYTHON_BINDINGS_OUTPUT_DIRECTORY={extdir}{os.sep}\",\n        ]\n        # Some generators require explcitly passing config when building.\n        build_args = [\"--config\", cfg]\n        # Adding CMake arguments set as environment variable\n        # (needed e.g. to build for ARM OSx on conda-forge)\n        if \"CMAKE_ARGS\" in os.environ:\n            cmake_args += [item for item in os.environ[\"CMAKE_ARGS\"].split(\" \") if item]\n\n        # Pass version to C++\n        cmake_args += [f\"-DMLX_VERSION={self.distribution.get_version()}\"]  # type: ignore[attr-defined]\n\n        if platform.system() == \"Darwin\":\n            # Cross-compile support for macOS - respect ARCHFLAGS if set\n            archs = re.findall(r\"-arch (\\S+)\", os.environ.get(\"ARCHFLAGS\", \"\"))\n            if archs:\n                cmake_args += [\"-DCMAKE_OSX_ARCHITECTURES={}\".format(\";\".join(archs))]\n        if platform.system() == \"Windows\":\n            # On Windows DLLs must be put in the same dir with the extension\n            # while cmake puts mlx.dll into the \"bin\" sub-dir. Link with mlx\n            # statically to work around it.\n            cmake_args += [\"-DBUILD_SHARED_LIBS=OFF\"]\n        else:\n            cmake_args += [\"-DBUILD_SHARED_LIBS=ON\"]\n\n        # Set CMAKE_BUILD_PARALLEL_LEVEL to control the parallel build level\n        # across all generators.\n        if \"CMAKE_BUILD_PARALLEL_LEVEL\" not in os.environ:\n            # self.parallel is a Python 3 only way to set parallel jobs by hand\n            # using -j in the build_ext call, not supported by pip or PyPA-build.\n            if hasattr(self, \"parallel\") and self.parallel:\n                # CMake 3.12+ only.\n                build_args += [f\"-j{self.parallel}\"]\n\n        build_temp = Path(self.build_temp) / ext.name\n        if not build_temp.exists():\n            build_temp.mkdir(parents=True)\n\n        subprocess.run(\n            [\"cmake\", ext.sourcedir, *cmake_args], cwd=build_temp, check=True\n        )\n        subprocess.run(\n            [\"cmake\", \"--build\", \".\", \"--target\", \"install\", *build_args],\n            cwd=build_temp,\n            check=True,\n        )\n\n    # Make sure to copy mlx.metallib for inplace builds\n    def run(self):\n        super().run()\n\n        # Based on https://github.com/pypa/setuptools/blob/main/setuptools/command/build_ext.py#L102\n        if self.inplace:\n            for ext in self.extensions:\n                if ext.name == \"mlx.core\":\n                    # Resolve inplace package dir\n                    build_py = self.get_finalized_command(\"build_py\")\n                    inplace_file, regular_file = self._get_inplace_equivalent(\n                        build_py, ext\n                    )\n\n                    inplace_dir = str(Path(inplace_file).parent.resolve())\n                    regular_dir = str(Path(regular_file).parent.resolve())\n\n                    self.copy_tree(regular_dir, inplace_dir)\n\n\nclass GenerateStubs(Command):\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self) -> None:\n        out_path = \"python/mlx/core\"\n        stub_cmd = [\n            \"python\",\n            \"-m\",\n            \"nanobind.stubgen\",\n            \"-m\",\n            \"mlx.core\",\n            \"-p\",\n            \"python/mlx/_stub_patterns.txt\",\n        ]\n        subprocess.run(stub_cmd + [\"-r\", \"-O\", out_path])\n        # Run again without recursive to specify output file name\n        subprocess.run([\"rm\", f\"{out_path}/mlx.pyi\"])\n        subprocess.run(stub_cmd + [\"-o\", f\"{out_path}/__init__.pyi\"])\n\n\n# Read the content of README.md\nwith open(Path(__file__).parent / \"README.md\", encoding=\"utf-8\") as f:\n    long_description = f.read()\n\n# The information here can also be placed in setup.cfg - better separation of\n# logic and declaration, and simpler if you include description/version in a file.\nif __name__ == \"__main__\":\n    packages = find_namespace_packages(\n        where=\"python\", exclude=[\"src\", \"tests\", \"tests.*\"]\n    )\n    package_dir = {\"\": \"python\"}\n    package_data = {\"mlx\": [\"lib/*\", \"include/*\", \"share/*\"], \"mlx.core\": [\"*.pyi\"]}\n\n    setup(\n        name=\"mlx\",\n        version=get_version(\"0.22.0\"),\n        author=\"MLX Contributors\",\n        author_email=\"mlx@group.apple.com\",\n        description=\"A framework for machine learning on Apple silicon.\",\n        long_description=long_description,\n        long_description_content_type=\"text/markdown\",\n        url=\"https://github.com/ml-explore/mlx\",\n        packages=packages,\n        package_dir=package_dir,\n        package_data=package_data,\n        include_package_data=True,\n        extras_require={\n            \"dev\": [\n                \"nanobind==2.4.0\",\n                \"numpy\",\n                \"pre-commit\",\n                \"setuptools>=42\",\n                \"torch\",\n                \"typing_extensions\",\n            ],\n        },\n        ext_modules=[CMakeExtension(\"mlx.core\")],\n        cmdclass={\"build_ext\": CMakeBuild, \"generate_stubs\": GenerateStubs},\n        zip_safe=False,\n        python_requires=\">=3.9\",\n    )\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}