{
  "metadata": {
    "timestamp": 1736566317478,
    "page": 71,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zerotier/ZeroTierOne",
      "stars": 14831,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.0439453125,
          "content": "ï»¿---\nBasedOnStyle: LLVM\nBreakBeforeBraces: Stroustrup\nIndentWidth: 4\nTabWidth: 4\nAlignAfterOpenBracket: AlwaysBreak\nAlignConsecutiveMacros: 'true'\nAlignConsecutiveAssignments: 'false'\nAlignConsecutiveDeclarations: 'false'\nAlignEscapedNewlines: Right\nAlignOperands: 'true'\nAlignTrailingComments: 'true'\nAllowAllArgumentsOnNextLine: 'false'\nAllowAllConstructorInitializersOnNextLine: 'false'\nAllowAllParametersOfDeclarationOnNextLine: 'false'\nAllowShortBlocksOnASingleLine: 'true'\nAllowShortCaseLabelsOnASingleLine: 'false'\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: Never\nAlwaysBreakAfterReturnType: None\nBinPackArguments: 'false'\nBinPackParameters: 'false'\nBreakBeforeBinaryOperators: NonAssignment\nBreakBeforeTernaryOperators: 'true'\nBreakConstructorInitializers: BeforeComma\nBreakInheritanceList: BeforeComma\nCompactNamespaces: 'false'\nConstructorInitializerAllOnOneLineOrOnePerLine: 'true'\nConstructorInitializerIndentWidth: '4'\nContinuationIndentWidth: '4'\nCpp11BracedListStyle: 'false'\nFixNamespaceComments: 'true'\nIncludeBlocks: Regroup\nIndentCaseLabels: 'true'\nIndentPPDirectives: None\nIndentWrappedFunctionNames: 'false'\nKeepEmptyLinesAtTheStartOfBlocks: 'false'\nMaxEmptyLinesToKeep: '1'\nNamespaceIndentation: None\nPointerAlignment: Left\nReflowComments: 'true'\nSortIncludes: 'true'\nSortUsingDeclarations: 'true'\nSpaceAfterCStyleCast: 'false'\nSpaceAfterLogicalNot: 'true'\nSpaceAfterTemplateKeyword: 'true'\nSpaceBeforeAssignmentOperators: 'true'\nSpaceBeforeCpp11BracedList: 'true'\nSpaceBeforeCtorInitializerColon: 'true'\nSpaceBeforeInheritanceColon: 'true'\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: 'true'\nSpaceInEmptyParentheses: 'false'\nSpacesBeforeTrailingComments: '3'\nSpacesInAngles: 'false'\nSpacesInCStyleCastParentheses: 'false'\nSpacesInContainerLiterals: 'true'\nSpacesInParentheses: 'false'\nSpacesInSquareBrackets: 'false'\nUseTab: 'Always'\n\n---\nLanguage: Cpp\nStandard: Cpp03\nColumnLimit: '240'\n---\nLanguage: ObjC\nColumnLimit: '240'\n---\nLanguage: Java\nColumnLimit: '240'\n---\nLanguage: CSharp\nColumnLimit: '240'\n...\n"
        },
        {
          "name": ".clangd",
          "type": "blob",
          "size": 0.166015625,
          "content": "CompileFlags:\n  Add:\n    - \"-std=c++17\"\n    - \"-I../ext\"\n    - \"-I../ext/prometheus-cpp-lite-1.0/core/include\"\n    - \"-I../ext/prometheus-cpp-lite-1.0/simpleapi/include\"\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": ".git/\nworkspace/\n"
        },
        {
          "name": ".drone.jsonnet",
          "type": "blob",
          "size": 14.025390625,
          "content": "//\n// tweakables\n//\n\nlocal registry = \"084037375216.dkr.ecr.us-east-2.amazonaws.com\";\nlocal build_channel = \"zerotier-builds\";\nlocal release_channel = \"zerotier-releases\";\n\nlocal targets = [\n    { \"os\": \"linux\", distro: \"redhat\", \"name\": \"el9\",      \"isas\": [                 \"amd64\", \"arm64\", \"ppc64le\", \"s390x\" ],                        \"events\": [ \"tag\", \"custom\" ] },\n    { \"os\": \"linux\", distro: \"redhat\", \"name\": \"el8\",      \"isas\": [                 \"amd64\", \"arm64\", \"ppc64le\", \"s390x\" ],                        \"events\": [ \"tag\" ] },\n    { \"os\": \"linux\", distro: \"redhat\", \"name\": \"el7\",      \"isas\": [ \"386\",          \"amd64\",          \"ppc64le\"],                                  \"events\": [ \"tag\" ] },\n    { \"os\": \"linux\", distro: \"amazon\", \"name\": \"amzn2\",    \"isas\": [                 \"amd64\", \"arm64\" ],                                            \"events\": [ \"tag\" ] },\n    { \"os\": \"linux\", distro: \"amazon\", \"name\": \"amzn2022\", \"isas\": [                 \"amd64\", \"arm64\" ],                                            \"events\": [ \"tag\" ] },\n    { \"os\": \"linux\", distro: \"fedora\", \"name\": \"fc38\",     \"isas\": [                 \"amd64\", \"arm64\", \"ppc64le\", \"s390x\" ],                        \"events\": [ \"tag\" ] },\n    { \"os\": \"linux\", distro: \"fedora\", \"name\": \"fc37\",     \"isas\": [                 \"amd64\", \"arm64\", \"ppc64le\", \"s390x\" ],                        \"events\": [ \"tag\" ] },\n    { \"os\": \"linux\", distro: \"fedora\", \"name\": \"fc36\",     \"isas\": [                 \"amd64\", \"arm64\", \"ppc64le\", \"s390x\" ],                        \"events\": [ \"tag\" ] },\n    { \"os\": \"linux\", distro: \"ubuntu\", \"name\": \"jammy\",    \"isas\": [        \"armv7\", \"amd64\", \"arm64\", \"ppc64le\", \"s390x\", \"riscv64\" ],             \"events\": [ \"tag\" ] },\n    { \"os\": \"linux\", distro: \"ubuntu\", \"name\": \"focal\",    \"isas\": [        \"armv7\", \"amd64\", \"arm64\", \"ppc64le\", \"s390x\", \"riscv64\" ],             \"events\": [ \"tag\" ] },\n    { \"os\": \"linux\", distro: \"ubuntu\", \"name\": \"bionic\",   \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\", \"ppc64le\", \"s390x\" ],                        \"events\": [ \"tag\" ] },\n    { \"os\": \"linux\", distro: \"ubuntu\", \"name\": \"xenial\",   \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\", \"ppc64le\", \"s390x\" ],                        \"events\": [ \"tag\" ] },\n    { \"os\": \"linux\", distro: \"ubuntu\", \"name\": \"trusty\",   \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\" ],                                            \"events\": [ \"tag\" ] },\n    { \"os\": \"linux\", distro: \"debian\", \"name\": \"bookworm\", \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\", \"mips64le\", \"ppc64le\", \"s390x\" ],            \"events\": [ \"tag\"] },\n    { \"os\": \"linux\", distro: \"debian\", \"name\": \"bullseye\", \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\", \"mips64le\", \"ppc64le\", \"s390x\" ],            \"events\": [ \"push\", \"tag\", \"custom\" ] },\n    { \"os\": \"linux\", distro: \"debian\", \"name\": \"buster\",   \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\" ],                                            \"events\": [ \"tag\" ] },\n    { \"os\": \"linux\", distro: \"debian\", \"name\": \"stretch\",  \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\" ],                                            \"events\": [ \"tag\" ] },\n    { \"os\": \"linux\", distro: \"debian\", \"name\": \"jessie\",   \"isas\": [ \"386\", \"armv7\", \"amd64\" ],                                                     \"events\": [ \"tag\" ] },\n\n//   { \"os\": \"windows\", distro: \"windows\", \"name\": \"windows\",  \"isas\": [ \"amd64\" ], \"events\": [ \"push\", \"tag\", \"custom\" ] },\n//   { \"os\": \"darwin\", distro: \"darwin\", \"name\": \"darwin\",  \"isas\": [ \"amd64\" ], \"events\": [ \"push\", \"tag\", \"custom\" ] },\n\n];\n\nlocal less_targets = [\n      { \"os\": \"linux\", distro: \"redhat\", \"name\": \"el9\",      \"isas\": [                 \"amd64\", \"arm64\" ],                        \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"redhat\", \"name\": \"el8\",      \"isas\": [                 \"amd64\", \"arm64\" ],                        \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"ubuntu\", \"name\": \"jammy\",    \"isas\": [        \"armv7\", \"amd64\", \"arm64\" ],             \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"ubuntu\", \"name\": \"focal\",    \"isas\": [        \"armv7\", \"amd64\", \"arm64\" ],             \"events\": [ \"push\", \"tag\", \"custom\" ] },\n];\n\n\nlocal native_targets = [\n      { \"os\": \"linux\", distro: \"debian\", \"name\": \"bullseye\", \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\" ],            \"events\": [ \"push\", \"tag\", \"custom\" ] },\n];    \n\nlocal master_targets = [\n      //\n      // copypasta from here\n      //\n      { \"os\": \"linux\", distro: \"redhat\", \"name\": \"el9\",      \"isas\": [                 \"amd64\", \"arm64\", \"ppc64le\", \"s390x\" ],                        \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"redhat\", \"name\": \"el8\",      \"isas\": [                 \"amd64\", \"arm64\", \"ppc64le\", \"s390x\" ],                        \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"redhat\", \"name\": \"el7\",      \"isas\": [ \"386\", \"amd64\",          \"ppc64le\"],                                  \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"amazon\", \"name\": \"amzn2\",    \"isas\": [                 \"amd64\", \"arm64\" ],                                            \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"amazon\", \"name\": \"amzn2022\", \"isas\": [                 \"amd64\", \"arm64\" ],                                            \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"fedora\", \"name\": \"fc38\",     \"isas\": [                 \"amd64\", \"arm64\", \"ppc64le\", \"s390x\" ],                        \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"fedora\", \"name\": \"fc37\",     \"isas\": [                 \"amd64\", \"arm64\", \"ppc64le\", \"s390x\" ],                        \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"fedora\", \"name\": \"fc36\",     \"isas\": [                 \"amd64\", \"arm64\", \"ppc64le\", \"s390x\" ],                        \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"ubuntu\", \"name\": \"jammy\",    \"isas\": [        \"armv7\", \"amd64\", \"arm64\", \"ppc64le\", \"s390x\", \"riscv64\" ],             \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"ubuntu\", \"name\": \"focal\",    \"isas\": [        \"armv7\", \"amd64\", \"arm64\", \"ppc64le\", \"s390x\", \"riscv64\" ],             \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"ubuntu\", \"name\": \"bionic\",   \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\", \"ppc64le\", \"s390x\" ],                        \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"ubuntu\", \"name\": \"xenial\",   \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\", \"ppc64le\", \"s390x\" ],                        \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"ubuntu\", \"name\": \"trusty\",   \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\" ],                                            \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"debian\", \"name\": \"sid\",      \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\", \"mips64le\", \"ppc64le\", \"s390x\", \"riscv64\" ], \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"debian\", \"name\": \"bookworm\", \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\", \"mips64le\", \"ppc64le\", \"s390x\" ],            \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"debian\", \"name\": \"bullseye\", \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\", \"mips64le\", \"ppc64le\", \"s390x\" ],            \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"debian\", \"name\": \"buster\",   \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\" ],                                            \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"debian\", \"name\": \"stretch\",  \"isas\": [ \"386\", \"armv7\", \"amd64\", \"arm64\" ],                                            \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"linux\", distro: \"debian\", \"name\": \"jessie\",   \"isas\": [ \"386\", \"armv7\", \"amd64\" ],                                                     \"events\": [ \"push\", \"tag\", \"custom\" ] },\n      { \"os\": \"windows\", distro: \"windows\", \"name\": \"win2k22\", \"isas\": [ \"amd64\" ],                                                                     \"events\": [ \"push\", \"tag\", \"custom\" ] }\n];\n\n//\n// functions\n//\n\nlocal pipeline_type(os)  = if os == \"darwin\" then \"exec\" else \"docker\";\nlocal builder_image(os)  = if os == \"linux\" then registry + \"/honda-builder\" else registry + \"/windows-builder\";\nlocal tester_image(os)   = if os == \"linux\" then registry + \"/honda-builder\" else registry + \"/windows-tester\";\nlocal build_step_volumes(os) = if os == \"linux\" then [ { name: \"zerotier-builds\", path: \"/zerotier-builds\" } ] else [];\nlocal release_step_volumes(os) = if os == \"linux\" then [ { name: \"zerotier-releases\", path: \"/zerotier-releases\" } ] else [];\nlocal host_volumes(os)   = if os == \"linux\" then [\n  { name: \"zerotier-builds\", host: { path: \"/zerotier-builds\" } },\n  { name: \"zerotier-releases\", host: { path: \"/zerotier-releases\" } },\n] else [];\n\nlocal index_image(distro) =\n      if distro == \"debian\" || distro == \"ubuntu\" then\n          registry + \"/apt-builder\"\n      else if distro == \"redhat\" || distro == \"fedora\" || distro == \"amazon\" then\n          registry + \"/dnf-builder\"\n      else if distro == \"windows\" then\n          registry + \"/msi-builder\"\n;          \n\nlocal copy_commands(os, distro, name, isa, version) =\n  if os == \"linux\" then [\n      std.join(\" \", [ \"./ci/scripts/publish.sh\", name, distro, isa, version, \"${DRONE_BUILD_EVENT}\" ])\n    ]\n    else if os == \"windows\" then [  \n      \"C:\\\\scripts\\\\fix-ec2-metadata.ps1\",\n      \"Get-ChildItem windows\",\n      // \"aws s3 cp windows\\\\bytey-SetupFiles\\\\bytey.msi s3://zerotier-builds/windows/\" + version + \"/bytey.msi\",\n    ] else if os == \"darwin\" then [\n        \"echo hello\"\n      ]\n;\n\nlocal index_commands(os, channel, distro, name, isas) =\n      if os == \"linux\" then\n        [ \"/usr/local/bin/index \" + channel + \" \" + distro + \" \" + name  + \" \" + std.join(\" \", isas) ]\n      else if os == \"windows\" then\n        [ \"Get-ChildItem -Recurse windows\" ]\n;\n\nlocal build_commands(os, distro, name, isa, version) =\n      if os == \"linux\" then\n        [ std.join(\" \", [ \"./ci/scripts/build.sh\", name, distro, isa, version, \"${DRONE_BUILD_EVENT}\" ]) ]\n      else\n        if os == \"windows\" then\n           [ \"windows/build.ps1\", \"windows/package.ps1\" ]\n      else\n        if os == \"darwin\" then\n           [ \"whoami\" ]\n;\n\nlocal test_commands(os, distro, name, isa, version) =\n  if os == \"linux\" then\n    [ std.join(\" \", [ \"./ci/scripts/test.sh\", name, distro, isa, version, \"${DRONE_BUILD_EVENT}\" ]) ]\n  else\n    if os == \"windows\" then\n      [ \"windows/testpackage.ps1 \" + version ]\n;\n\n//\n// render\n//\n\nlocal Build(os, distro, name, isa, events) = {\n  \"kind\": \"pipeline\",\n  \"type\": pipeline_type(os),\n  \"name\": std.join(\" \", [ name, isa, \"build\" ]),\n  \"pull\": \"always\",\n  \"clone\": { \"depth\": 1, [ if os == \"darwin\" then \"disable\" ]: true },\n  \"steps\": [\n    {\n      \"name\": \"build\",\n      \"image\": builder_image(os),\n      \"commands\": build_commands(os, distro, name, isa, \"100.0.0+${DRONE_COMMIT_SHA:0:8}\"),\n      \"when\": { \"event\": [ \"push\" ]},\n    },\n    {\n      \"name\": \"release\",\n      \"image\": builder_image(os),\n      \"commands\": build_commands(os, distro, name, isa, \"${DRONE_TAG}\"),\n      \"when\": { \"event\": [ \"tag\" ]},\n    },    \n    {\n      \"name\": \"copy build\",\n      \"image\": builder_image(os),\n      \"commands\": copy_commands(os, distro, name, isa, \"100.0.0+${DRONE_COMMIT_SHA:0:8}\"),\n      \"volumes\": build_step_volumes(os),\n      \"when\": { \"event\": [ \"push\" ]},\n    },\n    {\n      \"name\": \"copy relase\",\n      \"image\": builder_image(os),\n      \"commands\": copy_commands(os, distro, name, isa, \"${DRONE_TAG}\"),\n      \"volumes\": release_step_volumes(os),\n      \"when\": { \"event\": [ \"tag\" ]},      \n    },    \n  ],\n  \"volumes\": host_volumes(os),\n  \"platform\": { \"os\": os, [ if isa == \"arm64\" || isa == \"armv7\" then \"arch\" ]: \"arm64\" },\n  \"trigger\": { \"event\": events }\n};\n\nlocal Test(os, distro, name, isa, events) = {\n  \"kind\": \"pipeline\",\n  \"type\": pipeline_type(os),\n  \"name\": std.join(\" \", [ name, isa, \"test\"]),\n  \"pull\": \"always\",\n  \"clone\": { \"depth\": 1 },\n  \"steps\": [\n    {\n      \"name\": \"test build\",\n      \"image\": tester_image(os),\n      \"volumes\": build_step_volumes(os),\n      \"commands\": test_commands(os, distro, name, isa, \"100.0.0+${DRONE_COMMIT_SHA:0:8}\"),\n      \"when\": { \"event\": [ \"push\" ]},\n    },\n    {\n      \"name\": \"test release\",\n      \"image\": tester_image(os),\n      \"volumes\": release_step_volumes(os),\n      \"commands\": test_commands(os, distro, name, isa, \"${DRONE_TAG}\"),\n      \"when\": { \"event\": [ \"tag\" ]},\n    },    \n  ],\n  \"volumes\": host_volumes(os),\n  \"platform\": { \"os\": os, [ if isa == \"arm64\" || isa == \"armv7\" then \"arch\" ]: \"arm64\" },\n  \"depends_on\": [ std.join(\" \", [ name, \"index\" ]) ],\n  \"trigger\": { \"event\": events }\n};\n\nlocal Index(p) = {\n  \"kind\": \"pipeline\",\n  \"type\": pipeline_type(p.os),\n  \"name\": std.join(\" \", [ p.name, \"index\" ]),\n  \"pull\": \"always\",\n  \"clone\": { \"depth\": 1 },\n  \"steps\": [\n    {\n      \"name\": \"index build\",\n      \"image\": index_image(p.distro),\n      \"commands\": index_commands(p.os, \"zerotier-builds\", p.distro, p.name, p.isas),\n      \"volumes\": build_step_volumes(p.os),\n      \"environment\":{ \"GPG_PRIVATE_KEY\": { from_secret: \"gpg-private-key\" }},\n      \"when\": { \"event\": [ \"push\" ]},\n    },\n    {\n      \"name\": \"index release\",\n      \"image\": index_image(p.distro),\n      \"commands\": index_commands(p.os, \"zerotier-releases\", p.distro, p.name, p.isas),\n      \"volumes\": release_step_volumes(p.os),\n      \"environment\":{ \"GPG_PRIVATE_KEY\": { from_secret: \"gpg-private-key\" }},\n      \"when\": { \"event\": [ \"tag\" ]},  \n    },    \n  ],\n  \"volumes\": host_volumes(p.os),\n  \"platform\": { \"os\": p.os },\n  depends_on: std.flattenArrays([ [ std.join(\" \", [ p.name, isa, \"build\" ]) ] for isa in p.isas ]),\n  \"trigger\": { \"event\": p.events }\n};\n\n//\n// print\n//\n\nstd.flattenArrays([\n    [\n      Build(p.os, p.distro, p.name, isa, p.events)\n        for isa in p.isas\n    ] +\n    [\n      Index(p)\n    ]\n    for p in native_targets\n ]) +\n std.flattenArrays([\n     [\n        Test(p.os, p.distro, p.name, isa, p.events)\n         for isa in p.isas\n     ]\n     for p in native_targets\n ])\n "
        },
        {
          "name": ".drone.yml",
          "type": "blob",
          "size": 9.7998046875,
          "content": "---\nclone:\n  depth: 1\nkind: pipeline\nname: bullseye 386 build\nplatform:\n  os: linux\npull: always\nsteps:\n- commands:\n  - ./ci/scripts/build.sh bullseye debian 386 100.0.0+${DRONE_COMMIT_SHA:0:8} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: build\n  when:\n    event:\n    - push\n- commands:\n  - ./ci/scripts/build.sh bullseye debian 386 ${DRONE_TAG} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: release\n  when:\n    event:\n    - tag\n- commands:\n  - ./ci/scripts/publish.sh bullseye debian 386 100.0.0+${DRONE_COMMIT_SHA:0:8} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: copy build\n  volumes:\n  - name: zerotier-builds\n    path: /zerotier-builds\n  when:\n    event:\n    - push\n- commands:\n  - ./ci/scripts/publish.sh bullseye debian 386 ${DRONE_TAG} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: copy relase\n  volumes:\n  - name: zerotier-releases\n    path: /zerotier-releases\n  when:\n    event:\n    - tag\ntrigger:\n  event:\n  - push\n  - tag\n  - custom\ntype: docker\nvolumes:\n- host:\n    path: /zerotier-builds\n  name: zerotier-builds\n- host:\n    path: /zerotier-releases\n  name: zerotier-releases\n---\nclone:\n  depth: 1\nkind: pipeline\nname: bullseye armv7 build\nplatform:\n  arch: arm64\n  os: linux\npull: always\nsteps:\n- commands:\n  - ./ci/scripts/build.sh bullseye debian armv7 100.0.0+${DRONE_COMMIT_SHA:0:8} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: build\n  when:\n    event:\n    - push\n- commands:\n  - ./ci/scripts/build.sh bullseye debian armv7 ${DRONE_TAG} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: release\n  when:\n    event:\n    - tag\n- commands:\n  - ./ci/scripts/publish.sh bullseye debian armv7 100.0.0+${DRONE_COMMIT_SHA:0:8}\n    ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: copy build\n  volumes:\n  - name: zerotier-builds\n    path: /zerotier-builds\n  when:\n    event:\n    - push\n- commands:\n  - ./ci/scripts/publish.sh bullseye debian armv7 ${DRONE_TAG} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: copy relase\n  volumes:\n  - name: zerotier-releases\n    path: /zerotier-releases\n  when:\n    event:\n    - tag\ntrigger:\n  event:\n  - push\n  - tag\n  - custom\ntype: docker\nvolumes:\n- host:\n    path: /zerotier-builds\n  name: zerotier-builds\n- host:\n    path: /zerotier-releases\n  name: zerotier-releases\n---\nclone:\n  depth: 1\nkind: pipeline\nname: bullseye amd64 build\nplatform:\n  os: linux\npull: always\nsteps:\n- commands:\n  - ./ci/scripts/build.sh bullseye debian amd64 100.0.0+${DRONE_COMMIT_SHA:0:8} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: build\n  when:\n    event:\n    - push\n- commands:\n  - ./ci/scripts/build.sh bullseye debian amd64 ${DRONE_TAG} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: release\n  when:\n    event:\n    - tag\n- commands:\n  - ./ci/scripts/publish.sh bullseye debian amd64 100.0.0+${DRONE_COMMIT_SHA:0:8}\n    ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: copy build\n  volumes:\n  - name: zerotier-builds\n    path: /zerotier-builds\n  when:\n    event:\n    - push\n- commands:\n  - ./ci/scripts/publish.sh bullseye debian amd64 ${DRONE_TAG} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: copy relase\n  volumes:\n  - name: zerotier-releases\n    path: /zerotier-releases\n  when:\n    event:\n    - tag\ntrigger:\n  event:\n  - push\n  - tag\n  - custom\ntype: docker\nvolumes:\n- host:\n    path: /zerotier-builds\n  name: zerotier-builds\n- host:\n    path: /zerotier-releases\n  name: zerotier-releases\n---\nclone:\n  depth: 1\nkind: pipeline\nname: bullseye arm64 build\nplatform:\n  arch: arm64\n  os: linux\npull: always\nsteps:\n- commands:\n  - ./ci/scripts/build.sh bullseye debian arm64 100.0.0+${DRONE_COMMIT_SHA:0:8} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: build\n  when:\n    event:\n    - push\n- commands:\n  - ./ci/scripts/build.sh bullseye debian arm64 ${DRONE_TAG} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: release\n  when:\n    event:\n    - tag\n- commands:\n  - ./ci/scripts/publish.sh bullseye debian arm64 100.0.0+${DRONE_COMMIT_SHA:0:8}\n    ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: copy build\n  volumes:\n  - name: zerotier-builds\n    path: /zerotier-builds\n  when:\n    event:\n    - push\n- commands:\n  - ./ci/scripts/publish.sh bullseye debian arm64 ${DRONE_TAG} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: copy relase\n  volumes:\n  - name: zerotier-releases\n    path: /zerotier-releases\n  when:\n    event:\n    - tag\ntrigger:\n  event:\n  - push\n  - tag\n  - custom\ntype: docker\nvolumes:\n- host:\n    path: /zerotier-builds\n  name: zerotier-builds\n- host:\n    path: /zerotier-releases\n  name: zerotier-releases\n---\nclone:\n  depth: 1\ndepends_on:\n- bullseye 386 build\n- bullseye armv7 build\n- bullseye amd64 build\n- bullseye arm64 build\nkind: pipeline\nname: bullseye index\nplatform:\n  os: linux\npull: always\nsteps:\n- commands:\n  - /usr/local/bin/index zerotier-builds debian bullseye 386 armv7 amd64 arm64\n  environment:\n    GPG_PRIVATE_KEY:\n      from_secret: gpg-private-key\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/apt-builder\n  name: index build\n  volumes:\n  - name: zerotier-builds\n    path: /zerotier-builds\n  when:\n    event:\n    - push\n- commands:\n  - /usr/local/bin/index zerotier-releases debian bullseye 386 armv7 amd64 arm64\n  environment:\n    GPG_PRIVATE_KEY:\n      from_secret: gpg-private-key\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/apt-builder\n  name: index release\n  volumes:\n  - name: zerotier-releases\n    path: /zerotier-releases\n  when:\n    event:\n    - tag\ntrigger:\n  event:\n  - push\n  - tag\n  - custom\ntype: docker\nvolumes:\n- host:\n    path: /zerotier-builds\n  name: zerotier-builds\n- host:\n    path: /zerotier-releases\n  name: zerotier-releases\n---\nclone:\n  depth: 1\ndepends_on:\n- bullseye index\nkind: pipeline\nname: bullseye 386 test\nplatform:\n  os: linux\npull: always\nsteps:\n- commands:\n  - ./ci/scripts/test.sh bullseye debian 386 100.0.0+${DRONE_COMMIT_SHA:0:8} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: test build\n  volumes:\n  - name: zerotier-builds\n    path: /zerotier-builds\n  when:\n    event:\n    - push\n- commands:\n  - ./ci/scripts/test.sh bullseye debian 386 ${DRONE_TAG} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: test release\n  volumes:\n  - name: zerotier-releases\n    path: /zerotier-releases\n  when:\n    event:\n    - tag\ntrigger:\n  event:\n  - push\n  - tag\n  - custom\ntype: docker\nvolumes:\n- host:\n    path: /zerotier-builds\n  name: zerotier-builds\n- host:\n    path: /zerotier-releases\n  name: zerotier-releases\n---\nclone:\n  depth: 1\ndepends_on:\n- bullseye index\nkind: pipeline\nname: bullseye armv7 test\nplatform:\n  arch: arm64\n  os: linux\npull: always\nsteps:\n- commands:\n  - ./ci/scripts/test.sh bullseye debian armv7 100.0.0+${DRONE_COMMIT_SHA:0:8} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: test build\n  volumes:\n  - name: zerotier-builds\n    path: /zerotier-builds\n  when:\n    event:\n    - push\n- commands:\n  - ./ci/scripts/test.sh bullseye debian armv7 ${DRONE_TAG} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: test release\n  volumes:\n  - name: zerotier-releases\n    path: /zerotier-releases\n  when:\n    event:\n    - tag\ntrigger:\n  event:\n  - push\n  - tag\n  - custom\ntype: docker\nvolumes:\n- host:\n    path: /zerotier-builds\n  name: zerotier-builds\n- host:\n    path: /zerotier-releases\n  name: zerotier-releases\n---\nclone:\n  depth: 1\ndepends_on:\n- bullseye index\nkind: pipeline\nname: bullseye amd64 test\nplatform:\n  os: linux\npull: always\nsteps:\n- commands:\n  - ./ci/scripts/test.sh bullseye debian amd64 100.0.0+${DRONE_COMMIT_SHA:0:8} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: test build\n  volumes:\n  - name: zerotier-builds\n    path: /zerotier-builds\n  when:\n    event:\n    - push\n- commands:\n  - ./ci/scripts/test.sh bullseye debian amd64 ${DRONE_TAG} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: test release\n  volumes:\n  - name: zerotier-releases\n    path: /zerotier-releases\n  when:\n    event:\n    - tag\ntrigger:\n  event:\n  - push\n  - tag\n  - custom\ntype: docker\nvolumes:\n- host:\n    path: /zerotier-builds\n  name: zerotier-builds\n- host:\n    path: /zerotier-releases\n  name: zerotier-releases\n---\nclone:\n  depth: 1\ndepends_on:\n- bullseye index\nkind: pipeline\nname: bullseye arm64 test\nplatform:\n  arch: arm64\n  os: linux\npull: always\nsteps:\n- commands:\n  - ./ci/scripts/test.sh bullseye debian arm64 100.0.0+${DRONE_COMMIT_SHA:0:8} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: test build\n  volumes:\n  - name: zerotier-builds\n    path: /zerotier-builds\n  when:\n    event:\n    - push\n- commands:\n  - ./ci/scripts/test.sh bullseye debian arm64 ${DRONE_TAG} ${DRONE_BUILD_EVENT}\n  image: 084037375216.dkr.ecr.us-east-2.amazonaws.com/honda-builder\n  name: test release\n  volumes:\n  - name: zerotier-releases\n    path: /zerotier-releases\n  when:\n    event:\n    - tag\ntrigger:\n  event:\n  - push\n  - tag\n  - custom\ntype: docker\nvolumes:\n- host:\n    path: /zerotier-builds\n  name: zerotier-builds\n- host:\n    path: /zerotier-releases\n  name: zerotier-releases\n---\nkind: signature\nhmac: 887a3ef78d3fe8f0149911e1e4876401dd7dd313b36eb893e791fa42f45d7768\n\n...\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1962890625,
          "content": "ext/bin/tap-windows-ndis6/x64/zttap300.inf eol=crlf\next/bin/tap-windows-ndis6/x64.old/zttap300.inf eol=crlf\next/bin/tap-windows-ndis6/x86/zttap300.inf eol=crlf\nwindows/TapDriver6/zttap300.inf eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.1220703125,
          "content": "# Main binaries created in *nix builds\n/zerotier-one\n/zerotier-idtool\n/zerotier-cli\n/zerotier-selftest\n/zerotier\n/nltest\n\n# IDE stuff\n/.idea\n/.nova\n/compile_commands.json\n\n# OS-created garbage files from various platforms\n.DS_Store\n.Apple*\nThumbs.db\n@eaDir\n._*\n\n# Windows build droppings\n/windows/ZeroTierOne.sdf\n/windows/ZeroTierOne.v11.suo\n/windows/x64\n/windows/Win32\n/windows/*/x64\n/windows/*/Win32\n/windows/ZeroTierOne/Release\n/windows/ZeroTierOneService/obj\n/windows/ZeroTierOneService/bin\n/windows/Build\n/windows/Debug\n/windows/Release\n/windows/WebUIWrapper/bin\n/windows/WebUIWrapper/obj\n/windows/lib\n/ext/installfiles/windows/ZeroTier One-SetupFiles\n/ext/installfiles/windows/*-cache\n/ZeroTier One.msi\n*.vcxproj.backup\n/windows/TapDriver6/Win7Debug\n/windows/TapDriver6/win7Release\n/windows/*.db\n/windows/*.opendb\nenc_temp_folder\n/windows/copyutil/bin\n/windows/copyutil/obj\n.vs/\n\n# *nix/Mac build droppings\n/build-*\n/ZeroTierOneInstaller-*\n/examples/docker/zerotier-one\n/examples/docker/test-*.env\n/world/mkworld\n/world/*.c25519\nzt1-src.tar.gz\n/MacEthernetTapAgent\n\n# Miscellaneous temporaries, build files, etc.\n*.log\n*.opensdf\n*.user\n*.cache\n*.tlog\n*.pid\n*.pkg\n*.o\n/*.a\n*.dylib\n*.so\n*.so.*\n*.o-*\n*.core\n*.deb\n*.rpm\n*.autosave\n*.tmp\n.depend\nnode_modules\nzt1_update_*\ndebian/files\ndebian/zerotier-one\ndebian/zerotier-one*.debhelper\ndebian/*.log\ndebian/zerotier-one.substvars\nroot-watcher/config.json\n\n# Java/Android/JNI build droppings\njava/obj/\njava/libs/\njava/bin/\njava/classes/\njava/doc/\njava/build_win64/\njava/build_win32/\n/java/mac32_64/\nwindows/WinUI/obj/\nwindows/WinUI/bin/\nwindows/ZeroTierOne/Debug/\n/ext/installfiles/windows/chocolatey/zerotier-one/*.nupkg\n\n# Miscellaneous mac/Xcode droppings\n.DS_Store\n.Trashes\n*.swp\n*~.nib\nDerivedData/\n*.pbxuser\n*.mode1v3\n*.mode2v3\n*.perspectivev3\n!default.pbxuser\n!default.mode1v3\n!default.mode2v3\n!default.perspectivev3\n*.xccheckout\nxcuserdata/\n.vscode\n__pycache__\n*~\nattic/world/*.c25519\nattic/world/mkworld\nworkspace/\nworkspace2/\nzeroidc/target/\ntcp-proxy/target\n\n#snapcraft specifics\n/parts/\n/stage/\n/prime/\n\n*.snap\n\n.snapcraft\n__pycache__\n*.pyc\n*_source.tar.bz2\nsnap/.snapcraft\ntcp-proxy/tcp-proxy\nrustybits/target\n"
        },
        {
          "name": ".kick",
          "type": "blob",
          "size": 0.068359375,
          "content": "kick\nkick\nkick\nkick\nkick\nkick\nkick\nkick\nkick\nkick\nkick\nkick\nkick\nkick\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 2.7275390625,
          "content": "# Authors and Third Party Code Licensing Information\n\n## Primary Authors\n\n * ZeroTier Core and ZeroTier One virtual networking service<br>\n   Adam Ierymenko / adam.ierymenko@zerotier.com\n   Joseph Henry / joseph.henry@zerotier.com (QoS and multipath)\n\n * Java JNI Interface to enable Android application development, and Android app itself (code for that is elsewhere)<br>\n   Grant Limberg / glimberg@gmail.com\n\n * ZeroTier SDK (formerly known as Network Containers)<br>\n   Joseph Henry / joseph.henry@zerotier.com\n\n## Third Party Contributors\n\n * A number of fixes and improvements to the new controller, other stuff.<br>\n   Kees Bos / https://github.com/keesbos/\n\n * Debugging and testing, OpenWRT support fixes.<br>\n   Moritz Warning / moritzwarning@web.de\n\n * Debian GNU/Linux packaging, manual pages, and license compliance edits.<br>\n   Ben Finney <ben+zerotier@benfinney.id.au>\n\n * Several others made smaller contributions, which GitHub tracks here:<br>\n   https://github.com/zerotier/ZeroTierOne/graphs/contributors/\n\n## Third-Party Code\n\nZeroTier includes the following third party code, either in ext/ or incorporated into the ZeroTier core. This third party code remains licensed under its original license and is not subject to ZeroTier's BSL license.\n\n * LZ4 compression algorithm by Yann Collet\n\n   * Files: node/Packet.cpp (bundled within anonymous namespace)\n   * Home page: http://code.google.com/p/lz4/\n   * License grant: BSD 2-clause\n\n * http-parser by Joyent, Inc. (many authors)\n\n   * Files: ext/http-parser/*\n   * Home page: https://github.com/joyent/http-parser/\n   * License grant: MIT/Expat\n\n * C++11 json (nlohmann/json) by Niels Lohmann\n\n   * Files: ext/json/*\n   * Home page: https://github.com/nlohmann/json\n   * License grant: MIT\n\n * tap-windows6 by the OpenVPN project\n\n   * Files: windows/TapDriver6/*\n   * Home page: https://github.com/OpenVPN/tap-windows6/\n   * License grant: GNU GPL v2\n   * ZeroTier Modifications: change name of driver to ZeroTier, add ioctl() to get L2 multicast memberships (source is in ext/ and modifications inherit GPL)\n\n * Salsa20 stream cipher, Curve25519 elliptic curve cipher, Ed25519 digital signature algorithm, and Poly1305 MAC algorithm, all by Daniel J. Bernstein\n\n   * Files: node/Salsa20.* node/C25519.* node/Poly1305.*\n   * Home page: http://cr.yp.to/\n   * License grant: public domain\n   * ZeroTier Modifications: slight cryptographically-irrelevant modifications for inclusion into ZeroTier core\n\n * MiniUPNPC and libnatpmp by Thomas Bernard\n\n   * Files: ext/libnatpmp/* ext/miniupnpc/*\n   * Home page: http://miniupnp.free.fr/\n   * License grant: BSD attribution no-endorsement\n\n * cpp-httplib by yhirose\n\n   * Files: ext/cpp-httplib/*\n   * Home page: https://github.com/yhirose/cpp-httplib\n   * License grant: MIT\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.3154296875,
          "content": "# CMake build script for libzerotiercore.a\n\ncmake_minimum_required (VERSION 2.8)\nproject (zerotiercore)\n\nset (PROJ_DIR ${PROJECT_SOURCE_DIR})\nset (ZT_DEFS -std=c++11)\n\nfile(GLOB core_src_glob ${PROJ_DIR}/node/*.cpp)\nadd_library(zerotiercore STATIC ${core_src_glob})\n\ntarget_compile_options(zerotiercore PRIVATE ${ZT_DEFS})\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.31640625,
          "content": "ZeroTier One, an endpoint server for the ZeroTier virtual network layer.\nCopyright Â© 2011â2019 ZeroTier, Inc.\n\nZeroTier is released under the terms of the BSL version 1.1. See the\nfile LICENSE.txt for details.\n\n..\n    Local variables:\n    coding: utf-8\n    mode: text\n    End:\n    vim: fileencoding=utf-8 filetype=text :\n"
        },
        {
          "name": "Dockerfile.ci",
          "type": "blob",
          "size": 0.6396484375,
          "content": "# vim: ft=dockerfile\n\nFROM ubuntu:21.04 as stage\n\nRUN apt-get update -qq && apt-get -qq install make clang\nCOPY . .\nRUN /usr/bin/make\nRUN echo $PWD\nRUN cp zerotier-one /usr/sbin\n\nFROM ubuntu:21.04\n\nCOPY --from=stage /zerotier-one /usr/sbin\nRUN ln -sf /usr/sbin/zerotier-one /usr/sbin/zerotier-idtool\nRUN ln -sf /usr/sbin/zerotier-one /usr/sbin/zerotier-cli\n\nRUN echo \"${VERSION}\" > /etc/zerotier-version\nRUN rm -rf /var/lib/zerotier-one\n\n\nRUN apt-get -qq update\nRUN apt-get -qq install iproute2 net-tools fping 2ping iputils-ping iputils-arping\n\nCOPY entrypoint.sh.release /entrypoint.sh\nRUN chmod 755 /entrypoint.sh\n\nCMD []\nENTRYPOINT [\"/entrypoint.sh\"]\n"
        },
        {
          "name": "Dockerfile.release",
          "type": "blob",
          "size": 0.8662109375,
          "content": "# vim: ft=dockerfile\n\nFROM debian:bookworm\n\nARG VERSION\n\nRUN apt-get update -qq && apt-get install curl gpg -y\nRUN mkdir -p /usr/share/zerotier && \\\n    curl -o /usr/share/zerotier/tmp.asc \"https://download.zerotier.com/contact%40zerotier.com.gpg\" && \\\n    gpg --no-default-keyring --keyring /usr/share/zerotier/zerotier.gpg --import /usr/share/zerotier/tmp.asc && \\\n    rm -f /usr/share/zerotier/tmp.asc && \\\n    echo \"deb [signed-by=/usr/share/zerotier/zerotier.gpg] http://download.zerotier.com/debian/bookworm bookworm main\" > /etc/apt/sources.list.d/zerotier.list\n\nRUN apt-get update -qq && apt-get install zerotier-one=${VERSION} curl iproute2 net-tools iputils-ping openssl libssl3 -y\nRUN rm -rf /var/lib/zerotier-one\n\nCOPY entrypoint.sh.release /entrypoint.sh\nRUN chmod 755 /entrypoint.sh\n\nHEALTHCHECK --interval=1s CMD bash /healthcheck.sh\n\nCMD []\nENTRYPOINT [\"/entrypoint.sh\"]\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 6.8056640625,
          "content": "-----------------------------------------------------------------------------\n\nBusiness Source License 1.1\n\nLicense text copyright (c) 2017 MariaDB Corporation Ab, All Rights Reserved.\n\"Business Source License\" is a trademark of MariaDB Corporation Ab.\n\n-----------------------------------------------------------------------------\n\nParameters\n\nLicensor:             ZeroTier, Inc.\nLicensed Work:        ZeroTier Network Virtualization Engine 1.4.4\n                      The Licensed Work is (c)2019 ZeroTier, Inc.\nAdditional Use Grant: You may make use of the Licensed Work, provided you\n                      do not use it in any of the following ways:\n\n                      * Sell hosted ZeroTier services as a \"SaaS\" Product\n\n                      (1) Operate or sell access to ZeroTier root servers,\n                      network controllers, or authorization key or certificate\n                      generation components of the Licensed Work as a\n                      for-profit service, regardless of whether the use of\n                      these components is sold alone or is bundled with other\n                      services. Note that this does not apply to the use of\n                      ZeroTier behind the scenes to operate a service not\n                      related to ZeroTier network administration.\n\n                      * Create Non-Open-Source Commercial Derivative Works\n\n                      (2) Link or directly include the Licensed Work in a\n                      commercial or for-profit application or other product\n                      not distributed under an Open Source Initiative (OSI)\n                      compliant license. See: https://opensource.org/licenses\n\n                      (3) Remove the name, logo, copyright, or other branding\n                      material from the Licensed Work to create a \"rebranded\"\n                      or \"white labeled\" version to distribute as part of\n                      any commercial or for-profit product or service.\n\n                      * Certain Government Uses\n\n                      (4) Use or deploy the Licensed Work in a government\n                      setting in support of any active government function\n                      or operation with the exception of the following:\n                      physical or mental health care, family and social\n                      services, social welfare, senior care, child care, and\n                      the care of persons with disabilities.\n\nChange Date:          2026-01-01\n\nChange License:       Apache License version 2.0 as published by the Apache\n                      Software Foundation\n\t\t\t\t\t\t\t\t\t\t\thttps://www.apache.org/licenses/\n\nAlternative Licensing\n\nIf you would like to use the Licensed Work in any way that conflicts with\nthe stipulations of the Additional Use Grant, contact ZeroTier, Inc. to\nobtain an alternative commercial license.\n\nVisit us on the web at: https://www.zerotier.com/\n\nNotice\n\nThe Business Source License (this document, or the \"License\") is not an Open\nSource license. However, the Licensed Work will eventually be made available\nunder an Open Source License, as stated in this License.\n\nFor more information on the use of the Business Source License for ZeroTier\nproducts, please visit our pricing page which contains license details and\nand license FAQ: https://zerotier.com/pricing\n\nFor more information on the use of the Business Source License generally,\nplease visit the Adopting and Developing Business Source License FAQ at\nhttps://mariadb.com/bsl-faq-adopting.\n\n-----------------------------------------------------------------------------\n\nBusiness Source License 1.1\n\nTerms\n\nThe Licensor hereby grants you the right to copy, modify, create derivative\nworks, redistribute, and make non-production use of the Licensed Work. The\nLicensor may make an Additional Use Grant, above, permitting limited\nproduction use.\n\nEffective on the Change Date, or the fourth anniversary of the first publicly\navailable distribution of a specific version of the Licensed Work under this\nLicense, whichever comes first, the Licensor hereby grants you rights under\nthe terms of the Change License, and the rights granted in the paragraph\nabove terminate.\n\nIf your use of the Licensed Work does not comply with the requirements\ncurrently in effect as described in this License, you must purchase a\ncommercial license from the Licensor, its affiliated entities, or authorized\nresellers, or you must refrain from using the Licensed Work.\n\nAll copies of the original and modified Licensed Work, and derivative works\nof the Licensed Work, are subject to this License. This License applies\nseparately for each version of the Licensed Work and the Change Date may vary\nfor each version of the Licensed Work released by Licensor.\n\nYou must conspicuously display this License on each original or modified copy\nof the Licensed Work. If you receive the Licensed Work in original or\nmodified form from a third party, the terms and conditions set forth in this\nLicense apply to your use of that work.\n\nAny use of the Licensed Work in violation of this License will automatically\nterminate your rights under this License for the current and all other\nversions of the Licensed Work.\n\nThis License does not grant you any right in any trademark or logo of\nLicensor or its affiliates (provided that you may use a trademark or logo of\nLicensor as expressly required by this License).\n\nTO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON\nAN \"AS IS\" BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,\nEXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND\nTITLE.\n\n-----------------------------------------------------------------------------\n\nMariaDB hereby grants you permission to use this Licenseâs text to license\nyour works, and to refer to it using the trademark \"Business Source License\",\nas long as you comply with the Covenants of Licensor below.\n\nCovenants of Licensor\n\nIn consideration of the right to use this Licenseâs text and the \"Business\nSource License\" name and trademark, Licensor covenants to MariaDB, and to all\nother recipients of the licensed work to be provided by Licensor:\n\n1. To specify as the Change License the GPL Version 2.0 or any later version,\n   or a license that is compatible with GPL Version 2.0 or a later version,\n   where \"compatible\" means that software provided under the Change License can\n   be included in a program with software provided under GPL Version 2.0 or a\n   later version. Licensor may specify additional Change Licenses without\n   limitation.\n\n2. To either: (a) specify an additional grant of rights to use that does not\n   impose any additional restriction on the right granted in this License, as\n   the Additional Use Grant; or (b) insert the text \"None\".\n\n3. To specify a Change Date.\n\n4. Not to modify this License in any other way.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.5537109375,
          "content": "# Common makefile -- loads make rules for each platform\n\nOSTYPE=$(shell uname -s)\n\nifeq ($(OSTYPE),Darwin)\n\tinclude make-mac.mk\nendif\n\nifeq ($(OSTYPE),Linux)\n\tinclude make-linux.mk\nendif\n\nifeq ($(OSTYPE),FreeBSD)\n\tCC=clang\n\tCXX=clang++\n\tZT_BUILD_PLATFORM=7\n\tinclude make-bsd.mk\nendif\nifeq ($(OSTYPE),OpenBSD)\n\tCC=clang\n\tCXX=clang++\n\tZT_BUILD_PLATFORM=9\n\tinclude make-bsd.mk\nendif\n\nifeq ($(OSTYPE),NetBSD)\n\tinclude make-netbsd.mk\nendif\n\ndrone:\n\t@echo \"rendering .drone.yaml from .drone.jsonnet\"\n\tdrone jsonnet --format --stream\n\tdrone sign zerotier/ZeroTierOne --save\n"
        },
        {
          "name": "OFFICIAL-RELEASE-STEPS.md",
          "type": "blob",
          "size": 1.5810546875,
          "content": "ZeroTier Official Release Steps\n======\n\nThis is mostly for ZeroTier internal use, but others who want to do builds might find it helpful.\n\nNote: Many of these steps will require GPG and other signing keys that are kept in cold storage and must be mounted.\n\n# Bumping the Version and Preparing Installers\n\nThe version must be incremented in all of the following files:\n\n    /version.h\n    /zerotier-one.spec\n    /debian/changelog\n    /ext/installfiles/mac/ZeroTier One.pkgproj\n    /ext/installfiles/windows/ZeroTier One.aip\n  ../DesktopUI/mac-app-template/ZeroTier.app/Contents/Info.plist\n\nThe final .AIP file can only be edited on Windows with [Advanced Installer Enterprise](http://www.advancedinstaller.com/). In addition to incrementing the version be sure that a new product code is generated. (The \"upgrade code\" GUID on the other hand must never change.)\n\n# Building for Supported Platforms\n\n## Macintosh\n\nMac's easy. Just type:\n\n    make official\n\nYou will need [Packages](http://s.sudre.free.fr/Software/Packages/about.html) and our release signing key in the keychain.\n\n## Windows\n\nFirst load the Visual Studio solution and rebuild the UI and ZeroTier One in both x64 and i386 `Release` mode. Then load [Advanced Installer Enterprise](http://www.advancedinstaller.com/), check that the version is correct, and build. The build will fail if any build artifacts are missing, and Windows must have our product singing key (from DigiCert) available to sign the resulting MSI file. The MSI must then be tested on at least a few different CLEAN Windows VMs to ensure that the installer is valid and properly signed.\n"
        },
        {
          "name": "README.docker.md",
          "type": "blob",
          "size": 5.63671875,
          "content": "# ZeroTier One in a container!\n\n**NOTE:** _Most of this information pertains to the docker image only. For more information about ZeroTier, check out the repository_: [here](https://github.com/zerotier/ZeroTierOne) or the [commercial website](https://www.zerotier.com).\n\n[ZeroTier](https://www.zerotier.com) is a smart programmable Ethernet switch for planet Earth. It allows all networked devices, VMs, containers, and applications to communicate as if they all reside in the same physical data center or cloud region.\n\nThis is accomplished by combining a cryptographically addressed and secure peer to peer network (termed VL1) with an Ethernet emulation layer somewhat similar to VXLAN (termed VL2). Our VL2 Ethernet virtualization layer includes advanced enterprise SDN features like fine grained access control rules for network micro-segmentation and security monitoring.\n\nAll ZeroTier traffic is encrypted end-to-end using secret keys that only you control. Most traffic flows peer to peer, though we offer free (but slow) relaying for users who cannot establish peer to peer connections.\n\nThe goals and design principles of ZeroTier are inspired by among other things the original [Google BeyondCorp](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43231.pdf) paper and the [Jericho Forum](https://en.wikipedia.org/wiki/Jericho_Forum) with its notion of \"deperimeterization.\"\n\nVisit [ZeroTier's site](https://www.zerotier.com/) for more information and [pre-built binary packages](https://www.zerotier.com/download/). Apps for Android and iOS are available for free in the Google Play and Apple app stores.\n\nZeroTier is licensed under the [BSL version 1.1](https://mariadb.com/bsl11/). See [LICENSE.txt](https://github.com/zerotier/ZeroTierOne/blob/master/LICENSE.txt) and the [ZeroTier pricing page](https://www.zerotier.com/pricing) for details. ZeroTier is free to use internally in businesses and academic institutions and for non-commercial purposes. Certain types of commercial use such as building closed-source apps and devices based on ZeroTier or offering ZeroTier network controllers and network management as a SaaS service require a commercial license.\n\nA small amount of third party code is also included in ZeroTier and is not subject to our BSL license. See [AUTHORS.md](https://github.com/zerotier/ZeroTierOne/blob/master/AUTHORS.md) for a list of third party code, where it is included, and the licenses that apply to it. All of the third party code in ZeroTier is liberally licensed (MIT, BSD, Apache, public domain, etc.).\n\n## Building the docker image\n\nDue to the network being a substrate for most applications and not an application unto itself, it makes sense that many people would want to build their own image based on our formula.\n\nThe image is based on `debian:buster`.\n\nThe `Dockerfile.release` file contains build instructions for building the described image in the rest of the README. The build is multi-arch and multi-release capable.\n\nThese build arguments power the build:\n\n- `PACKAGE_BASEURL`: The base URL of the package repository to fetch from. (default: `https://download.zerotier.com/debian/buster/pool/main/z/zerotier-one/`)\n- `ARCH`: The architecture of the package, in debian format. Must match your image arch. (default: `amd64`)\n- `VERSION`: **REQUIRED** the version of ZeroTier to fetch.\n\nYou can build this image like so:\n\n```\ndocker build -f Dockerfile.release -t mybuild --build-arg VERSION=1.6.5 .\n```\n\n## Using the docker image\n\nThe `entrypoint.sh` in the docker image is a little different; zerotier will be spawned in the background and the \"main process\" is actually just a sleeping shell script. This allows `zerotier-one` to gracefully terminate in some situations largely unique to docker.\n\nThe `zerotier/zerotier` image requires the `CAP_NET_ADMIN` capability and the `/dev/net/tun` device must be forwarded to it.\n\nTo join a network, simply supply it on the command-line; you can supply multiple networks.\n\n```\ndocker run --name myzerotier --rm --cap-add NET_ADMIN --device /dev/net/tun zerotier/zerotier:latest abcdefdeadbeef00\n```\n\nOnce joining all the networks you have provided, it will sleep until terminated. Note that in ZeroTier, joining a network does not necessarily mean you have an IP or can do anything, really. You will want to probe the control socket:\n\n```\ndocker exec myzerotier zerotier-cli listnetworks\n```\n\nTo ensure you have a network available before trying to listen on it. Without pre-configuring the identity, this usually means going to the central admin panel and clicking the checkmark against your zerotier identity.\n\n### Environment Variables\n\nYou can control a few settings including the identity used and the authtoken used to interact with the control socket (which you can forward and access through `localhost:9993`).\n\n- `ZEROTIER_JOIN_NETWORKS`: additional way to set networks to join.\n- `ZEROTIER_API_SECRET`: replaces the `authtoken.secret` before booting and allows you to manage the control socket's authentication key.\n- `ZEROTIER_IDENTITY_PUBLIC`: the `identity.public` file for zerotier-one. Use `zerotier-idtool` to generate one of these for you.\n- `ZEROTIER_IDENTITY_SECRET`: the `identity.secret` file for zerotier-one. Use `zerotier-idtool` to generate one of these for you.\n\n### Tips\n\n- Forwarding port `<dockerip>:9993` to somewhere outside is probably a good idea for highly trafficked services.\n- Forwarding `localhost:9993` to a control network where you can drive it remotely might be a good idea, just be sure to set your authtoken properly through environment variables.\n- Pre-generating your identities could be much simpler to do via our [terraform plugin](https://github.com/zerotier/terraform-provider-zerotier)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.09375,
          "content": "ZeroTier - Global Area Networking\n======\n\n*This document is written for a software developer audience. For information on using ZeroTier, see the: [Website](https://www.zerotier.com), [Documentation Site](https://docs.zerotier.com), and [Discussion Forum](https://discuss.zerotier.com).*\n\nZeroTier is a smart programmable Ethernet switch for planet Earth. It allows all networked devices, VMs, containers, and applications to communicate as if they all reside in the same physical data center or cloud region.\n\nThis is accomplished by combining a cryptographically addressed and secure peer to peer network (termed VL1) with an Ethernet emulation layer somewhat similar to VXLAN (termed VL2). Our VL2 Ethernet virtualization layer includes advanced enterprise SDN features like fine grained access control rules for network micro-segmentation and security monitoring.\n\nAll ZeroTier traffic is encrypted end-to-end using secret keys that only you control. Most traffic flows peer to peer, though we offer free (but slow) relaying for users who cannot establish peer to peer connections.\n\nThe goals and design principles of ZeroTier are inspired by among other things the original [Google BeyondCorp](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43231.pdf) paper and the [Jericho Forum](https://en.wikipedia.org/wiki/Jericho_Forum) with its notion of \"deperimeterization.\"\n\nVisit [ZeroTier's site](https://www.zerotier.com/) for more information and [pre-built binary packages](https://www.zerotier.com/download/). Apps for Android and iOS are available for free in the Google Play and Apple app stores.\n\nZeroTier is licensed under the [BSL version 1.1](https://mariadb.com/bsl11/). See [LICENSE.txt](LICENSE.txt) and the [ZeroTier pricing page](https://www.zerotier.com/pricing) for details. ZeroTier is free to use internally in businesses and academic institutions and for non-commercial purposes. Certain types of commercial use such as building closed-source apps and devices based on ZeroTier or offering ZeroTier network controllers and network management as a SaaS service require a commercial license.\n\nA small amount of third party code is also included in ZeroTier and is not subject to our BSL license. See [AUTHORS.md](AUTHORS.md) for a list of third party code, where it is included, and the licenses that apply to it. All of the third party code in ZeroTier is liberally licensed (MIT, BSD, Apache, public domain, etc.).\n\n### Getting Started\n\nEverything in the ZeroTier world is controlled by two types of identifier: 40-bit/10-digit *ZeroTier addresses* and 64-bit/16-digit *network IDs*. These identifiers are easily distinguished by their length. A ZeroTier address identifies a node or \"device\" (laptop, phone, server, VM, app, etc.) while a network ID identifies a virtual Ethernet network that can be joined by devices.\n\nZeroTier addresses can be thought of as port numbers on an enormous planet-wide enterprise Ethernet smart switch supporting VLANs. Network IDs are VLAN IDs to which these ports may be assigned. A single port can be assigned to more than one VLAN.\n\nA ZeroTier address looks like `8056c2e21c` and a network ID looks like `8056c2e21c000001`. Network IDs are composed of the ZeroTier address of that network's primary controller and an arbitrary 24-bit ID that identifies the network on this controller. Network controllers are roughly analogous to SDN controllers in SDN protocols like [OpenFlow](https://en.wikipedia.org/wiki/OpenFlow), though as with the analogy between VXLAN and VL2 this should not be read to imply that the protocols or design are the same. You can use our convenient and inexpensive SaaS hosted controllers at [my.zerotier.com](https://my.zerotier.com/) or [run your own controller](controller/) if you don't mind messing around with JSON configuration files or writing scripts to do so.\n\n### Project Layout\n\nThe base path contains the ZeroTier One service main entry point (`one.cpp`), self test code, makefiles, etc.\n\n - `artwork/`: icons, logos, etc.\n - `attic/`: old stuff and experimental code that we want to keep around for reference.\n - `controller/`: the reference network controller implementation, which is built and included by default on desktop and server build targets.\n - `debian/`: files for building Debian packages on Linux.\n - `doc/`: manual pages and other documentation.\n - `ext/`: third party libraries, binaries that we ship for convenience on some platforms (Mac and Windows), and installation support files.\n - `include/`: include files for the ZeroTier core.\n - `java/`: a JNI wrapper used with our Android mobile app. (The whole Android app is not open source but may be made so in the future.)\n - `node/`: the ZeroTier virtual Ethernet switch core, which is designed to be entirely separate from the rest of the code and able to be built as a stand-alone OS-independent library. Note to developers: do not use C++11 features in here, since we want this to build on old embedded platforms that lack C++11 support. C++11 can be used elsewhere.\n - `osdep/`: code to support and integrate with OSes, including platform-specific stuff only built for certain targets.\n - `rule-compiler/`: JavaScript rules language compiler for defining network-level rules.\n - `service/`: the ZeroTier One service, which wraps the ZeroTier core and provides VPN-like connectivity to virtual networks for desktops, laptops, servers, VMs, and containers.\n - `windows/`: Visual Studio solution files, Windows service code, and the Windows task bar app UI.\n - `zeroidc/`: OIDC implementation used by ZeroTier service to log into SSO-enabled networks. (This part is written in Rust, and more Rust will be appearing in this repository in the future.)\n\n### Contributing\n\nPlease do pull requests off of the `dev` branch.\n\nReleases are done by merging `dev` into `main` and then tagging and doing builds. \n\n### Build and Platform Notes\n\nTo build on Mac and Linux just type `make`. On FreeBSD and OpenBSD `gmake` (GNU make) is required and can be installed from packages or ports. For Windows there is a Visual Studio solution in `windows/`.\n\n - **Mac**\n   - Xcode command line tools for macOS 10.13 or newer are required.\n   - Rust for x86_64 and ARM64 targets *if SSO is enabled in the build*.\n - **Linux**\n   - The minimum compiler versions required are GCC/G++ 8.x or CLANG/CLANG++ 5.x.\n   - Linux makefiles automatically detect and prefer clang/clang++ if present as it produces smaller and slightly faster binaries in most cases. You can override by supplying CC and CXX variables on the make command line.\n   - Rust for x86_64 and ARM64 targets *if SSO is enabled in the build*.\n - **Windows**\n   - Visual Studio 2022 on Windows 10 or newer.\n   - Rust for x86_64 and ARM64 targets *if SSO is enabled in the build*.\n - **FreeBSD**\n   - GNU make is required. Type `gmake` to build.\n   - `binutils` is required.  Type `pkg install binutils` to install.\n   - Rust for x86_64 and ARM64 targets *if SSO is enabled in the build*.\n - **OpenBSD**\n   - There is a limit of four network memberships on OpenBSD as there are only four tap devices (`/dev/tap0` through `/dev/tap3`).\n   - GNU make is required. Type `gmake` to build.\n   - Rust for x86_64 and ARM64 targets *if SSO is enabled in the build*.\n\nTyping `make selftest` will build a *zerotier-selftest* binary which unit tests various internals and reports on a few aspects of the build environment. It's a good idea to try this on novel platforms or architectures.\n\n### Running\n\nRunning *zerotier-one* with `-h` option will show help.\n\nOn Linux and BSD, if you built from source, you can start the service with:\n\n    sudo ./zerotier-one -d\n\nOn most distributions, macOS, and Windows, the installer will start the service and set it up to start on boot.\n\nA home folder for your system will automatically be created.\n\nThe service is controlled via the JSON API, which by default is available at `127.0.0.1:9993`. It also listens on `0.0.0.0:9993` which is only usable if `allowManagementFrom` is properly configured in `local.conf`. We include a *zerotier-cli* command line utility to make API calls for standard things like joining and leaving networks. The *authtoken.secret* file in the home folder contains the secret token for accessing this API. See [service/README.md](service/README.md) for API documentation.\n\nHere's where home folders live (by default) on each OS:\n\n * **Linux**: `/var/lib/zerotier-one`\n * **FreeBSD** / **OpenBSD**: `/var/db/zerotier-one`\n * **Mac**: `/Library/Application Support/ZeroTier/One`\n * **Windows**: `\\ProgramData\\ZeroTier\\One` (That's the default. The base 'shared app data' folder might be different if Windows is installed with a non-standard drive letter assignment or layout.)\n\n### Basic Troubleshooting\n\nFor most users, it just works.\n\nIf you are running a local system firewall, we recommend adding a rules permitting zerotier. If you installed binaries for Windows this should be done automatically. Other platforms might require manual editing of local firewall rules depending on your configuration.\n\nSee the [documentation site](https://docs.zerotier.com/zerotier/troubleshooting) for more information.\n\nThe Mac firewall can be found under \"Security\" in System Preferences. Linux has a variety of firewall configuration systems and tools.\n\nOn CentOS check `/etc/sysconfig/iptables` for IPTables rules. For other distributions consult your distribution's documentation. You'll also have to check the UIs or documentation for commercial third party firewall applications like Little Snitch (Mac), McAfee Firewall Enterprise (Windows), etc. if you are running any of those. Some corporate environments might have centrally managed firewall software, so you might also have to contact IT.\n\nZeroTier One peers will automatically locate each other and communicate directly over a local wired LAN *if UDP port 9993 inbound is open*. If that port is filtered, they won't be able to see each others' LAN announcement packets. If you're experiencing poor performance between devices on the same physical network, check their firewall settings. Without LAN auto-location peers must attempt \"loopback\" NAT traversal, which sometimes fails and in any case requires that every packet traverse your external router twice.\n\nUsers behind certain types of firewalls and \"symmetric\" NAT devices may not be able to connect to external peers directly at all. ZeroTier has limited support for port prediction and will *attempt* to traverse symmetric NATs, but this doesn't always work. If P2P connectivity fails you'll be bouncing UDP packets off our relay servers resulting in slower performance. Some NAT router(s) have a configurable NAT mode, and setting this to \"full cone\" will eliminate this problem. If you do this you may also see a magical improvement for things like VoIP phones, Skype, BitTorrent, WebRTC, certain games, etc., since all of these use NAT traversal techniques similar to ours.\n\nIf a firewall between you and the Internet blocks ZeroTier's UDP traffic, you will fall back to last-resort TCP tunneling to rootservers over port 443 (https impersonation). This will work almost anywhere but is *very slow* compared to UDP or direct peer to peer connectivity.\n\nAdditional help can be found in our [knowledge base](https://zerotier.atlassian.net/wiki/spaces/SD/overview).\n\n### Prometheus Metrics\n\nPrometheus Metrics are available at the `/metrics` API endpoint.  This endpoint is protected by an API key stored in `metricstoken.secret` to prevent unwanted information leakage.  Information that could be gleaned from the metrics include joined networks and peers your instance is talking to. \n\nAccess control is via the ZeroTier control interface itself and `metricstoken.secret`. This can be sent as a bearer auth token, via the `X-ZT1-Auth` HTTP header field, or appended to the URL as `?auth=<token>`. You can see the current metrics via `cURL` with the following command:\n\n    // Linux\n    curl -H \"X-ZT1-Auth: $(sudo cat /var/lib/zerotier-one/metricstoken.secret)\" http://localhost:9993/metrics\n\n    // macOS\n    curl -H \"X-ZT1-Auth: $(sudo cat /Library/Application\\ Support/ZeroTier/One/metricstoken.secret)\" http://localhost:9993/metrics\n\n    // Windows PowerShell (Admin)\n    Invoke-RestMethod -Headers @{'X-ZT1-Auth' = \"$(Get-Content C:\\ProgramData\\ZeroTier\\One\\metricstoken.secret)\"; } -Uri http://localhost:9993/metrics\n\nTo configure a scrape job in Prometheus on the machine ZeroTier is running on, add this to your Prometheus `scrape_config`:\n\n    - job_name: zerotier-one\n      honor_labels: true\n      scrape_interval: 15s\n      metrics_path: /metrics\n      static_configs:\n      - targets:\n        - 127.0.0.1:9993\n        labels:\n          group: zerotier-one\n          node_id: $YOUR_10_CHARACTER_NODE_ID\n      authorization:\n        credentials: $YOUR_METRICS_TOKEN_SECRET\n\nIf neither of these methods are desirable, it is probably possible to distribute metrics via [Prometheus Proxy](https://github.com/pambrose/prometheus-proxy) or some other tool.  Note: We have not tested this internally, but will probably work with the correct configuration.\n\nMetrics are also available on disk in ZeroTier's working directory:\n\n   // Linux\n   /var/lib/zerotier-one/metrics.prom\n\n   // macOS\n   /Library/Application\\ Support/ZeroTier/One/metrics.prom\n\n   //Windows\n   C:\\ProgramData\\ZeroTier\\One\\metrics.prom\n\n#### Available Metrics\n\n| Metric Name | Labels | Metric Type | Description |\n| ---         | ---    | ---         | ---         |\n| zt_packet | packet_type, direction | Counter | ZeroTier packet type counts |\n| zt_packet_error | error_type, direction | Counter | ZeroTier packet errors|\n| zt_data | protocol, direction | Counter | number of bytes ZeroTier has transmitted or received |\n| zt_num_networks | | Gauge | number of networks this instance is joined to |\n| zt_network_multicast_groups_subscribed | network_id | Gauge | number of multicast groups networks are subscribed to |\n| zt_network_packets | network_id, direction | Counter | number of incoming/outgoing packets per network |\n| zt_peer_latency | node_id | Histogram | peer latency (ms) |\n| zt_peer_path_count | node_id, status | Gauge | number of paths to peer |\n| zt_peer_packets | node_id, direction | Counter | number of packets to/from a peer |\n| zt_peer_packet_errors | node_id | Counter | number of incoming packet errors from a peer |\n\nIf there are other metrics you'd like to see tracked, ask us in an Issue or send us a Pull Request!\n\n### HTTP / App server\n\nThere is a static http file server suitable for hosting Single Page Apps at http://localhost:9993/app/<app-path>\n\nUse `zerotier-cli info -j` to find your zerotier-one service's homeDir\n\n``` sh\ncd $ZT_HOME\nsudo mkdir -p app/app1\nsudo mkdir -p app/appB\necho '<html><meta charset=utf-8><title>appA</title><body><h1>hello world A' | sudo tee app/appA/index.html \necho '<html><meta charset=utf-8><title>app2</title><body><h1>hello world 2' | sudo tee app/app2/index.html \ncurl -sL http://localhost:9993/app/appA http://localhost:9993/app/app2 \n```\n\nThen visit [http://localhost:9993/app/app1/](http://localhost:9993/app/app1/) and [http://localhost:9993/app/appB/](http://localhost:9993/app/appB/)\n\nRequests to paths don't exist return the app root index.html, as is customary for SPAs. \nIf you want, you can write some javascript that talks to the service or controller [api](https://docs.zerotier.com/service/v1).\n"
        },
        {
          "name": "RELEASE-NOTES.md",
          "type": "blob",
          "size": 34.189453125,
          "content": "ZeroTier Release Notes\n======\n\n# 2024-10-23 -- Version 1.14.2\n\n  * Fix for missing entitlement on macOS Sequoia.\n  * Fix for a problem correctly parsing local.conf to enable low bandwidth mode.\n  * Increment versions of some dependent libraries.\n  * Other fixes.\n\n# 2024-09-12 -- Version 1.14.1\n\n  * Multithreaded packet I/O support! Currently this is just for Linux and must\n    be enabled in local.conf. It will likely make the largest difference on small\n    multi-core devices where CPU is a bottleneck and high throughput is desired.\n    It may be enabled by default in the future but we want it to be thoroughly\n    tested. It's a little harder than it seems at first glance due to the need\n    to keep packets in sequence and balance load.\n  * Several multipath bug fixes.\n  * Updated the versions on a number of libraries related to OIDC support and HTTP.\n  * MacOS .app now shows the correct version in its Info.plist manifest.\n  * Sanitize MAC addresses in JSON format rules parser.\n  * Some basic information about the platform (OS, CPU architecture) is now reported\n    to network controllers when networks are joined so it can be displayed to\n    network admins and in the future used in policy checking and inventory operations.\n\n# 2024-05-02 -- Version 1.14.0\n\n  * Linux I/O performance improvements under heavy load\n  * Improvements to multipath\n  * Fix for port rebinding \"coma\" bug after periods offline (some laptop users)\n  * Fixed a rules engine quirk/ambiguity (GitHub Issue #2200)\n  * Controller API enhancements: node names and other node meta-data\n  * Other bug fixes\n\n# 2023-09-12 -- Version 1.12.2\n\n  * More improvements to macOS full tunnel mode.\n  * Faster recovery after changes to physical network settings.\n\n# 2023-08-25 -- Version 1.12.1\n\n  * Minor release to fix a port binding issue in Linux.\n  * Update Debian dependencies.\n  * No changes for other platforms.\n\n# 2023-08-23 -- Version 1.12.0\n\n  * Experimental Windows ARM64 support\n  * Fix numerous sleep/wake issues on macOS and other platforms\n  * Faster recovery after changes to physical network settings\n  * Prometheus compatible metrics support!\n  * Fix full tunnel mode on recent macOS versions\n  * Numerous macOS DNS fixes\n  * 10-30% speed improvement on Linux\n\n# 2023-03-23 -- Version 1.10.6\n\n  * Prevent binding temporary ipv6 addresses on macos (#1910)\n  * Prevent path-learning loops (#1914)\n  * Prevent infinite loop of UAC prompts in tray app\n\n# 2023-03-10 -- Version 1.10.5\n\n * Fix for high CPU usage bug on Windows\n\n# 2023-03-07 -- Version 1.10.4\n\n * SECURITY FIX (Windows): this version fixes a file permission problem on\n   Windows that could allow non-privileged users on a Windows system to read\n   privileged files in the ZeroTier service's working directory. This could\n   allow an unprivileged local Windows user to administrate the local ZeroTier\n   instance without appropriate local permissions. This issue is not remotely\n   exploitable unless a remote user can read arbitrary local files, and does\n   not impact other operating systems.\n\n * Fix a bug in the handling of multiple IP address assignments to virtual\n   interfaces on macOS.\n\n# 2023-02-15 -- Version 1.10.3\n\n * Fix for duplicate paths in client. Could cause connectivity issues. Affects all platforms.\n * Fix for Ethernet Tap MTU setting, would not properly apply on Linux.\n * Fix default route bugs (macOS.)\n * Enable Ping automatically for ZeroTier Adapters (Windows.)\n * SSO updates and minor bugfixes.\n * Add low-bandwidth mode.\n * Add forceTcpRelay mode (optionally enabled.)\n * Fix bug that prevented setting of custom TCP relay address.\n * Build script improvements and bug fixes.\n\n# 2022-11-01 -- Version 1.10.2\n\n * Fix another SSO \"stuck client\" issue in zeroidc.\n * Expose root-reported external IP/port information via the local JSON API for better diagnostics.\n * Multipath: CLI output improvement for inspecting bonds\n * Multipath: balance-aware mode\n * Multipath: Custom policies\n * Multipath: Link quality measurement improvements\n\nNote that releases are coming few and far between because most of our dev effort is going into version 2.\n\n# 2022-06-27 -- Version 1.10.1\n\n * Fix an issue that could cause SSO clients to get \"stuck\" on stale auth URLs.\n * A few other SSO related bug fixes.\n\n# 2022-06-07 -- Version 1.10.0\n\n * Fix formatting problem in `zerotier-cli` when using SSO networks.\n * Fix a few other minor bugs in SSO signin to prepare for general availability.\n * Remove requirement for webview in desktop UI and instead just make everything available via the tray pulldown/menu. Use [libui-ng](https://github.com/libui-ng/libui-ng) for minor prompt dialogs. Saves space and eliminates installation headaches on Windows.\n * Fix SSO \"spam\" bug in desktop UI.\n * Use system default browser for SSO login so all your plugins, MFA devices, password managers, etc. will work as you have them configured.\n * Minor fix for bonding/multipath.\n\n# 2022-05-10 -- Version 1.8.10\n\n * Fixed a bug preventing SSO sign-on on Windows.\n\n# 2022-04-25 -- Version 1.8.9\n\n * Fixed a long-standing and strange bug that was causing sporadic \"phantom\" packet authentication failures. Not a security problem but could be behind sporadic reports of link failures under some conditions.\n * Fixed a memory leak in SSO/OIDC support.\n * Fixed SSO/OIDC display error on CLI.\n * Fixed a bug causing nodes to sometimes fail to push certs to each other (primarily affects SSO/OIDC use cases).\n * Fixed a deadlock bug on leaving SSO/OIDC managed networks.\n * Added some new Linux distributions to the build subsystem.\n\n# 2022-04-11 -- Version 1.8.8\n\n * Fix a local privilege escalation bug in the Windows installer.\n * Dependency fix for some Ubuntu versions.\n * No changes for other platforms. Windows upgrade recommended, everyone else optional.\n\n# 2022-03-30 -- Version 1.8.7\n\n * Fix for dependency installations in Windows MSI package.\n * Fix for desktop UI setup when run by a non-super-user.\n * Bug fix in local OIDC / SSO support for auth0 and other providers.\n * Other minor fixes for e.g. old Linux distributions.\n\n# 2022-03-04 -- Version 1.8.6\n\n * Fixed an issue that could cause the UI to be non-responsive if not joined to any networks.\n * Fix dependency issues in Debian and RedHat packages for some distributions (Fedora, Mint).\n * Bumped the peer cache serialization version to prevent \"coma\" issues on upgrade due to changes in path logic behaving badly with old values.\n\n# 2022-02-22 -- Version 1.8.5\n\n * Plumbing under the hood for endpoint device SSO support.\n * Fix in LinuxEthernetTap to tap device support on very old (2.6) Linux kernels.\n * Fix an issue that could cause self-hosted roots (\"moons\") to fail to assist peers in making direct links. (GitHub issue #1512)\n * Merge a series of changes by Joseph Henry (of ZeroTier) that should fix some edge cases where ZeroTier would \"forget\" valid paths.\n * Minor multipath improvements for automatic path negotiation.\n\n# 2021-11-30 -- Version 1.8.4\n\n * Fixed an ugly font problem on some older macOS versions.\n * Fixed a bug that could cause the desktop tray app control panel to stop opening after a while on Windows.\n * Fixed a possible double \"release\" in macOS tray app code that crashed on older macOS versions.\n * Fixed installation on 32-bit Windows 10.\n * Fixed a build flags issue that could cause ZeroTier to crash on older ARM32 CPUs.\n\n# 2021-11-15 -- Version 1.8.3\n\n * Remove problematic spinlock, which was only used on x86_64 anyway. Just use pthread always.\n * Fix fd leak on MacOS that caused non-responsiveness after some time.\n * Fix Debian install scripts to set /usr/sbin/nologin as shell on service user.\n * Fix regression that could prevent managed routes from being deleted.\n * DesktopUI: Remove NSDate:now() call, now works on MacOS 10.13 or newer!\n\n# 2021-11-08 -- Version 1.8.2\n\n * Fix multicast on linux.\n * Fix a bug that could cause the tap adapter to have the wrong MAC on Linux.\n * Update build flags to possibly support MacOS older than 10.14, but more work needs to be done. It may not work yet.\n * Fix path variable setting on Windows.\n\n# 2021-10-28 -- Version 1.8.1\n\n * Fix numerous UI issues from 1.8.0 (never fully released).\n * Remove support for REALLY ancient 1.1.6 or earlier network controllers.\n * MacOS IPv6 no longer binds to temporary addresses as these can cause interruptions if they expire.\n * Added additional hardening against address impersonation on networks (also in 1.6.6).\n * Fix an issue that could cause clobbering of MacOS IP route settings on restart.\n\n * NOTE: Windows 7 is no longer supported! Windows 7 users will have to use version 1.6.5 or earlier.\n\n# 2021-09-15 -- Version 1.8.0 (preview release only)\n\n * A *completely* rewritten desktop UI for Mac and Windows!\n * Implement a workaround for one potential source of a \"coma\" bug, which can occur if buggy NATs/routers stop allowing the service to communicate on a given port. ZeroTier now reassigns a new secondary port if it's offline for a while unless a secondary port is manually specified in local.conf. Working around crummy buggy routers is an ongoing effort.\n * Fix for MacOS MTU capping issue on feth devices\n * Fix for mistakenly using v6 source addresses for v4 routes on some platforms\n * Stop binding to temporary IPv6 addresses\n * Set MAC address before bringing up Linux TAP link\n * Check if DNS servers need to be applied on macOS\n * Upgrade json.hpp dependency to version 3.10.2\n\n# 2021-09-21 -- Version 1.6.6\n\n * Backport COM hash check mitigation against network member impersonation.\n\n# 2021-04-13 -- Version 1.6.5\n\n * Fix a bug in potential network path filtering that could in some circumstances lead to \"software laser\" effects.\n * Fix a printf overflow in zerotier-cli (not exploitable or a security risk)\n * Windows now looks up the name of ZeroTier devices instead of relying on them having \"ZeroTier\" in them.\n\n# 2021-02-15 -- Version 1.6.4\n\n * The groundhog saw his shadow, which meant that the \"connection coma\" bug still wasn't gone. We think we found it this time.\n\n# 2021-02-02 -- Version 1.6.3\n\n * Likely fix for GitHub issue #1334, an issue that could cause ZeroTier to\n   go into a \"coma\" on some networks.\n * Also groundhog day\n\n# 2020-11-30 -- Version 1.6.2\n\n * Fix an ARM hardware AES crypto issue (not an exploitable vulnerability).\n * Fix a Linux network leave hang due to a mutex deadlock.\n\n# 2020-11-24 -- Version 1.6.1\n\nThis release fixes some minor bugs and other issues in 1.6.0.\n\n * Fixed a bug that caused IP addresses in the 203.0.0.0/8 block to be miscategorized as not being in global scope.\n * Changed Linux builds to (hopefully) fix LXC and SELinux issues.\n * Fixed unaligned memory access that caused crash on FreeBSD systems on the ARM architecture.\n * Merged CLI options for controlling bonded devices into the beta multipath code.\n * Updated Windows driver with Microsoft cross-signing to fix issues on some Windows systems.\n\n# 2020-11-19 -- Version 1.6.0\n\nVersion 1.6.0 is a major release that incorporates back-ported features from the 2.0 branch, which is still under development. It also fixes a number of issues.\n\nNew features and improvements (including those listed under 1.5.0):\n\n * **Apple Silicon** (MacOS ARM64) native support via universal binary. ZeroTier now requires the very latest Xcode to build.\n * **Linux performance improvements** for up to 25% faster tun/tap I/O performance on multi-core systems.\n * **Multipath support** with modes modeled after the Linux kernel's bonding driver. This includes active-passive and active-active modes with fast failover and load balancing. See section 2.1.5 of the manual.\n * **DNS configuration** push from network controllers to end nodes, with locally configurable permissions for whether or not push is allowed.\n * **AES-GMAC-SIV** encryption mode, which is both somewhat more secure and significantly faster than the old Salsa20/12-Poly1305 mode on hardware that supports AES acceleration. This includes virtually all X86-64 chips and most ARM64. This mode is based on AES-SIV and has been audited by Trail of Bits to ensure that it is equivalent security-wise.\n\nBug fixes:\n\n * **Managed route assignment fixes** to eliminate missing routes on Linux and what we believe to be the source of sporadic high CPU usage on MacOS.\n * **Hang on shutdown** issues should be fixed.\n * **Sporadic multicast outages** should be fixed.\n\nKnown remaining issues:\n\n * AES hardware acceleration is not yet supported on 32-bit ARM, PowerPC (32 or 64), or MIPS (32 or 64) systems. Currently supported are X86-64 and ARM64/AARCH64 with crypto extensions.\n\n# 2020-10-05 -- Version 1.5.0 (actually 1.6.0-beta1)\n\nVersion 1.6.0 (1.5.0 is a beta!) is a significant release that incorporates a number of back-ported fixes and features from the ZeroTier 2.0 tree.\n\nMajor new features are:\n\n * **Multipath support** with modes modeled after the Linux kernel's bonding driver. This includes active-passive and active-active modes with fast failover and load balancing. See section 2.1.5 of the manual.\n * **DNS configuration** push from network controllers to end nodes, with locally configurable permissions for whether or not push is allowed.\n * **AES-GMAC-SIV** encryption mode, which is both somewhat more secure and significantly faster than the old Salsa20/12-Poly1305 mode on hardware that supports AES acceleration. This includes virtually all X86-64 chips and most ARM64. This mode is based on AES-SIV and has been audited by Trail of Bits to ensure that it is equivalent security-wise.\n\nKnown issues that are not yet fixed in this beta:\n\n * Some Mac users have reported periods of 100% CPU in kernel_task and connection instability after leaving networks that have been joined for a period of time, or needing to kill ZeroTier and restart it to finish leaving a network. This doesn't appear to affect all users and we haven't diagnosed the root cause yet.\n * The service sometimes hangs on shutdown requiring a kill -9. This also does not affect all systems or users.\n * AES hardware acceleration is not yet supported on 32-bit ARM, PowerPC (32 or 64), or MIPS (32 or 64) systems. Currently supported are X86-64 and ARM64/AARCH64 with crypto extensions.\n * Some users have reported multicast/broadcast outages on networks lasting up to 30 seconds. Still investigating.\n\nWe're trying to fix all these issues before the 1.6.0 release. Stay tuned.\n\n# 2019-08-30 -- Version 1.4.6\n\n * Update default root list to latest\n * ARM32 platform build and flag fixes\n * Add a clarification line to LICENSE.txt\n * Fix license message in CLI\n * Windows service now looks for service command line arguments\n * Fixed a bug that could cause excessive queued multicasts\n\n# 2019-08-23 -- Version 1.4.4\n\n * Change license from GPL3 to BSL 1.1, see LICENSE.txt\n * Fix an issue with the \"ipauth\" rule and auto-generated unforgeable IPv6 addresses\n * Fix socket/bind errors setting IPs and routes on Linux\n\n# 2019-08-12 -- Version 1.4.2\n\n * Fix high CPU use bug on some platforms\n * Fix issues with PostgreSQL controller DB (only affects Central)\n * Restore backward compatibility with MacOS versions prior to 10.13\n\n# 2019-07-29 -- Version 1.4.0\n\n### Major Changes\n\n * Mac version no longer requires a kernel extension, instead making use of the [feth interfaces](https://apple.stackexchange.com/questions/337715/fake-ethernet-interfaces-feth-if-fake-anyone-ever-seen-this).\n * Added support for concurrent multipath (multiple paths at once) with traffic weighting by link quality and faster recovery from lost links.\n * Added under-the-hood support for QoS (not yet exposed) that will eventually be configurable via our rules engine.\n\n### Minor Changes and Bug Fixes\n\n * Experimental controller DB driver for [LF](https://github.com/zerotier/lf) to store network controller data (LFDB.cpp / LFDB.hpp).\n * Modified credential push and direct path push timings and algorithms to somewhat reduce \"chattiness\" of the protocol when idle. More radical background overhead reductions will have to wait for the 2.x line.\n * Removed our beta/half-baked integration of Central with the Windows UI. We're going to do a whole new UI of some kind in the future at least for Windows and Mac.\n * Fixed stack overflow issues on Linux versions using musl libc.\n * Fixed some alignment problems reported on ARM and ARM64, but some reports we could not reproduce so please report any issues with exact chip, OS/distro, and ZeroTier version in use.\n * Fixed numerous other small issues and bugs such as ARM alignment issues causing crashes on some devices.\n * Windows now sets the adapter name such that it is consistent in both the Windows UI and command line utilities.\n\n# 2018-07-27 -- Version 1.2.12\n\n * Fixed a bug that caused exits to take a long time on Mac due to huge numbers of redundant attempts to delete managed routes.\n * Fixed a socket limit problem on Windows that caused the ZeroTier service to run out of sockets, causing the UI and CLI to be unable to access the API.\n * Fixed a threading bug in the ZeroTier Core, albeit one that never manifested on the regular ZeroTier One service/client.\n * Fixed a bug that could cause the service to crash if an authorized local client accessed an invalid URL via the control API. (Not exploitable since you needed admin access anyway.)\n\n# 2018-05-08 -- Version 1.2.10\n\n * Fix bug loading `moons.d/` files for federated root operation.\n * Fix compile problem with ZT_DEBUG on some versions of `clang`\n * Fix slow network startup bug related to loading of `networks.d/` cache files\n\n# 2018-04-27 -- Version 1.2.8\n\n * Linux version once again builds with PIE (position independent executable) flags\n * Fixed bug in zerotier-idtool file sign and verify\n * Fixed minor OSX app typo\n * Merged alpha NetBSD support (mostly untested, so YMMV)\n * Merged several minor typo and one-liner bug fixes\n\n# 2018-04-17 -- Version 1.2.6\n\n * Features and Core Improvements\n    * Path selection has been overhauled to improve path stability, simplify code, and prepare for multi-path and trunking in the next major release.\n    * This version introduces remote tracing for remote diagnostics. Network controllers can set a node (usually the controller itself) to receive remote tracing events from all members of the network or from select members. Events are only sent if they pertain to a given network for security reasons.\n    * Multicast replication can now be done by designated multicast replicators on a network (flagged as such at the controller) rather than by the sender. Most users won't want this, but it's useful for specialized use cases on hub-and-spoke networks and for low-power devices.\n    * Cryptographic performance improvements on several platforms.\n    * Multithreaded performance improvements throughout the code base, including the use of an inline lightweight spinlock for low-contention resources.\n * Bugs fixed\n    * Disappearing routes on Mac (GitHub issue #600)\n    * Route flapping and path instability in some dual-stack V4/V6 networks\n    * Blacklist (in local.conf) doesn't work reliably (GitHub issue #656)\n    * Connection instabilities due to unsigned integer overflows in timing comparisons (use int64_t instead of uint64_t)\n    * Binaries don't run on some older or lower-end 32-bit ARM chips (build problem)\n    * ARM NEON crypto code crashes (build problem)\n    * Fixed some lock ordering issues revealed by \"valgrind\" tool\n    * The \"zerotier-idtool\" command could not be accessed from \"zerotier-one\" via command line switch\n    * Leaking sockets on some platforms when uPnP/NAT-PMP is enabled\n    * Fixed two very rare multithreading issues that were only observed on certain systems\n * Platform-Specific Changes\n    * MacOS\n        * Installer now loads the kernel extension right away so that High Sierra users will see the prompt to authorize it. This is done in the \"Security & Privacy\" preference pane and must be done directly on the console (not via remote desktop). On High Sierra and newer kexts must be authorized at the console via security settings system preferences pane.\n    * Windows\n        * The Windows installer should now install the driver without requiring a special prompt in most cases. This should make it easier for our packages to be accepted into and updated in the Chocolatey repository and should make it easier to perform remote installs across groups of machines using IT management and provisioning tools.\n        * The Windows official packages are now signed with an EV certificate (with hardware key).\n        * The Windows UI can now log into ZeroTier Central and join networks via the Central API.\n        * The `zerotier-idtool` command should now work on Windows without ugly hacks.\n        * Upgraded the installer version.\n        * Made a few changes to hopefully fix sporadic \"will not uninstall\" problems, though we cannot duplicate these issues ourselves.\n    * Linux\n        * Device names are now generated deterministically based on network IDs for all newly joined networks.\n    * Android\n        * Multicast now works on Android in most cases! Android apps can send and receive multicast and subscribe to multicast group IPs. Note that in some cases the app must bind to the specific correct interface for this to work.\n        * IPv6 can be disabled in UI for cases where it causes problems.\n\n# 2017-04-20 -- Version 1.2.4\n\n * Managed routes are now only bifurcated for the default route. This is a change in behavior, though few people will probably notice. Bifurcating all managed routes was causing more trouble than it was worth for most users.\n * Up to 2X crypto speedup on x86-64 (except Windows, which will take some porting) and 32-bit ARM platforms due to integration of fast assembly language implementations of Salsa20/12 from the [supercop](http://bench.cr.yp.to/supercop.html) code base. These were written by Daniel J. Bernstein and are in the public domain. My MacBook Pro (Core i5 2.8ghz) now does almost 1.5GiB/sec Salsa20/12 per core and a Raspberry Pi got a 2X boost. 64-bit ARM support and Windows support will take some work but should not be too hard.\n * Refactored code that manages credentials to greatly reduce memory use in most cases. This may also result in a small performance improvement.\n * Reworked and simplified path selection and priority logic to fix path instability and dead path persistence edge cases. There have been some sporadic reports of persistent path instabilities and dead paths hanging around that take minutes to resolve. These have proven difficult to reproduce in house, but hopefully this will fix them. In any case it seems to speed up path establishment in our tests and it makes the code simpler and more readable.\n * Eliminated some unused cruft from the code around path management and in the peer class.\n * Fixed an issue causing build problems on some MIPS architecture systems.\n * Fixed Windows forgetting routes on sleep/wake or in some other circumstances. (GitHub issue #465)\n\n# 2017-03-17 -- Version 1.2.2\n\n * A bug causing unreliable multicast propagation (GitHub issue #461).\n * A crash in ARM binaries due to a build chain and flags problem.\n * A bug in the network controller preventing members from being listed (GitHub issue #460).\n\n# 2017-03-14 -- Version 1.2.0\n\nVersion 1.2.0 is a major milestone release representing almost nine months of work. It includes our rules engine for distributed network packet filtering and security monitoring, federated roots, and many other architectural and UI improvements and bug fixes.\n\n## New Features in 1.2.0\n\n### The ZeroTier Rules Engine\n\nThe largest new feature in 1.2.0, and the product of many months of work, is our advanced network rules engine. With this release we achieve traffic control, security monitoring, and micro-segmentation capability on par with many enterprise SDN solutions designed for use in advanced data centers and corporate networks.\n\nRules allow you to filter packets on your network and vector traffic to security observers. Security observation can be performed in-band using REDIRECT or out of band using TEE.\n\nTags and capabilities provide advanced methods for implementing fine grained permission structures and micro-segmentation schemes without bloating the size and complexity of your rules table.\n\nSee the [rules engine announcement blog post](https://www.zerotier.com/blog/?p=927) for an in-depth discussion of theory and implementation. The [manual](https://www.zerotier.com/manual.shtml) contains detailed information on rule, tag, and capability use, and the `rule-compiler/` subfolder of the ZeroTier source tree contains a JavaScript function to compile rules in our human-readable rule definition language into rules suitable for import into a network controller. (ZeroTier Central uses this same script to compile rules on [my.zerotier.com](https://my.zerotier.com/).)\n\n### Root Server Federation\n\nIt's now possible to create your own root servers and add them to the root server pool on your nodes. This is done by creating what's called a \"moon,\" which is a signed enumeration of root servers and their stable points on the network. Refer to the [manual](https://www.zerotier.com/manual.shtml) for instructions.\n\nFederated roots achieve a number of things:\n\n * You can deploy your own infrastructure to reduce dependency on ours.\n * You can deploy roots *inside your LAN* to ensure that network connectivity inside your facility still works if the Internet goes down. This is the first step toward making ZeroTier viable as an in-house SDN solution.\n * Roots can be deployed inside national boundaries for countries with data residency laws or \"great firewalls.\" (As of 1.2.0 there is still no way to force all traffic to use these roots, but that will be easy to do in a later version.)\n * Last but not least this makes ZeroTier somewhat less centralized by eliminating any hard dependency on ZeroTier, Inc.'s infrastructure.\n\nOur roots will of course remain and continue to provide zero-configuration instant-on deployment, a secure global authority for identities, and free traffic relaying for those who can't establish peer to peer connections.\n\n### Local Configuration\n\nAn element of our design philosophy is \"features are bugs.\" This isn't an absolute dogma but more of a guiding principle. We try as hard as we can to avoid adding features, especially \"knobs\" that must be tweaked by a user.\n\nAs of 1.2.0 we've decided that certain knobs are unavoidable, and so there is now a `local.conf` file that can be used to configure them. See the ZeroTier One documentation for these. They include:\n\n * Blacklisting interfaces you want to make sure ZeroTier doesn't use for network traffic, such as VPNs, slow links, or backplanes designated for only certain kinds of traffic.\n * Turning uPnP/NAT-PMP on or off.\n * Configuring software updates on Windows and Mac platforms.\n * Defining trusted paths (the old trusted paths file is now deprecated)\n * Setting the ZeroTier main port so it doesn't have to be changed on the command line, which is very inconvenient in many cases.\n\n### Improved In-Band Software Updates\n\nA good software update system for Windows and Mac clients has been a missing feature in previous versions. It does exist but we've been shy about using it so far due to its fragility in some environments.\n\nWe've greatly improved this mechanism in 1.2.0. Not only does it now do a better job of actually invoking the update, but it also transfers updates in-band using the ZeroTier protocol. This means it can work in environments that do not allows http/https traffic or that force it through proxies. There's also now an update channel setting: `beta` or `release` (the default).\n\nSoftware updates are authenticated three ways:\n\n 1. ZeroTier's own signing key is used to sign all updates and this signature is checked prior to installation. ZeroTier, Inc.'s signatures are performed on an air-gapped machine.\n\n 2. Updates for Mac and Windows are signed using Apple and Microsoft (DigiCert EV) keys and will not install unless these signatures are also valid.\n\n 3. The new in-band update mechanism also authenticates the source of the update via ZeroTier's built-in security features. This provides transport security, while 1 and 2 provide security of the update at rest.\n\nUpdates are now configurable via `local.conf`. There are three options: `disable`, `download`, and `apply`. The third (apply) is the default for official builds on Windows and Mac, making updates happen silently and automatically as they do for popular browsers like Chrome and Firefox. Updates are disabled by default on Linux and other Unix-type systems as these are typically updated through package managers.\n\n### Path Link Quality Awareness\n\nVersion 1.2.0 is now aware of the link quality of direct paths with other 1.2.0 nodes. This information isn't used yet but is visible through the JSON API. (Quality always shows as 100% with pre-1.2.0 nodes.) Quality is measured passively with no additional overhead using a counter based packet loss detection algorithm.\n\nThis information is visible from the command line via `listpeers`:\n\n    200 listpeers XXXXXXXXXX 199.XXX.XXX.XXX/9993;10574;15250;1.00 48 1.2.0 LEAF\n    200 listpeers XXXXXXXXXX 195.XXX.XXX.XXX/45584;467;7608;0.44 290 1.2.0 LEAF\n\nThe first peer's path is at 100% (1.00), while the second peer's path is suffering quite a bit of packet loss (0.44).\n\nLink quality awareness is a precursor to intelligent multi-path and QoS support, which will in future versions bring us to feature parity with SD-WAN products like Cisco iWAN.\n\n### Security Improvements\n\nVersion 1.2.0 adds anti-DOS (denial of service) rate limits and other hardening for improved resiliency against a number of denial of service attack scenarios.\n\nIt also adds a mechanism for instantaneous credential revocation. This can be used to revoke certificates of membership instantly to kick a node off a network (for private networks) and also to revoke capabilities and tags. The new controller sends revocations by default when a peer is de-authorized.\n\nRevocations propagate using a \"rumor mill\" peer to peer algorithm. This means that a controller need only successfully send a revocation to at least one member of a network with connections to other active members. At this point the revocation will flood through the network peer to peer very quickly. This helps make revocations more robust in the face of poor connectivity with the controller or attempts to incapacitate the controller with denial of service attacks, as well as making revocations faster on huge networks.\n\n### Windows and Macintosh UI Improvements (ZeroTier One)\n\nThe Mac has a whole new UI built natively in Objective-C. It provides a pulldown similar in appearance and operation to the Mac WiFi task bar menu.\n\nThe Windows UI has also been improved and now provides a task bar icon that can be right-clicked to manage networks. Both now expose managed route and IP permissions, allowing nodes to easily opt in to full tunnel operation if you have a router configured on your network.\n\n### Ad-Hoc Networks\n\nA special kind of public network called an ad-hoc network may be accessed by joining a network ID with the format:\n\n    ffSSSSEEEE000000\n    | |   |   |\n    | |   |   Reserved for future use, must be 0\n    | |   End of port range (hex)\n    | Start of port range (hex)\n    Reserved ZeroTier address prefix indicating a controller-less network\n\nAd-hoc networks are public (no access control) networks that have no network controller. Instead their configuration and other credentials are generated locally. Ad-hoc networks permit only IPv6 UDP and TCP unicast traffic (no multicast or broadcast) using 6plane format NDP-emulated IPv6 addresses. In addition an ad-hoc network ID encodes an IP port range. UDP packets and TCP SYN (connection open) packets are only allowed to destination ports within the encoded range.\n\nFor example `ff00160016000000` is an ad-hoc network allowing only SSH, while `ff0000ffff000000` is an ad-hoc network allowing any UDP or TCP port.\n\nKeep in mind that these networks are public and anyone in the entire world can join them. Care must be taken to avoid exposing vulnerable services or sharing unwanted files or other resources.\n\n### Network Controller (Partial) Rewrite\n\nThe network controller has been largely rewritten to use a simple in-filesystem JSON data store in place of SQLite, and it is now included by default in all Windows, Mac, Linux, and BSD builds. This means any desktop or server node running ZeroTier One can now be a controller with no recompilation needed.\n\nIf you have data in an old SQLite3 controller we've included a NodeJS script in `controller/migrate-sqlite` to migrate data to the new format. If you don't migrate, members will start getting `NOT_FOUND` when they attempt to query for updates.\n\n## Major Bug Fixes in 1.2.0\n\n * **The Windows HyperV 100% CPU bug is FINALLY DEAD**: This long-running problem turns out to have been an issue with Windows itself, but one we were triggering by placing invalid data into the Windows registry. Microsoft is aware of the issue but we've also fixed the triggering problem on our side. ZeroTier should now co-exist quite well with HyperV and should now be able to be bridged with a HyperV virtual switch.\n * **Segmentation faults on musl-libc based Linux systems**: Alpine Linux and some embedded Linux systems that use musl libc (a minimal libc) experienced segmentation faults. These were due to a smaller default stack size. A work-around that sets the stack size for new threads has been added.\n * **Windows firewall blocks local JSON API**: On some Windows systems the firewall likes to block 127.0.0.1:9993 for mysterious reasons. This is now fixed in the installer via the addition of another firewall exemption rule.\n * **UI crash on embedded Windows due to missing fonts**: The MSI installer now ships fonts and will install them if they are not present, so this should be fixed.\n\n## Other Improvements in 1.2.0\n\n * **Improved dead path detection**: ZeroTier is now more aggressive about expiring paths that do not seem to be active. If a path seems marginal it is re-confirmed before re-use.\n * **Minor performance improvements**: We've reduced unnecessary memcpy's and made a few other performance improvements in the core.\n * **Linux static binaries**: For our official packages (the ones in the download.zerotier.com apt and yum repositories) we now build Linux binaries with static linking. Hopefully this will stop all the bug reports relating to library inconsistencies, as well as allowing our deb packages to run on a wider variety of Debian-based distributions. (There are far too many of these to support officially!) The overhead for this is very small, especially since we built our static versions against musl-libc. Distribution maintainers are of course free to build dynamically linked versions for inclusion into distributions; this only affects our official binaries.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 4.427734375,
          "content": "# Security\n\nZeroTier takes the security of our software products and services seriously, which \nincludes all source code repositories managed through our GitHub organization.\n\n## Supported Versions\n\nThe following versions of ZeroTier One receive security updates\n\n| Version  | Supported          |\n| -------- | ------------------ |\n| 1.14.x   | :white_check_mark: |\n| 1.12.x   | :white_check_mark: |\n| < 1.12.0 | :x:                |\n\n## Reporting a Vulnerability\n\n**Please do not report security issues through public GitHub issues**\n\nInstead, please report vulnerabilities via email to security@zerotier.com. If possible,\nplease encrypt with our PGP key (see below).\n\nPlease include the following information, or as much as you can provide to help us \nunderstand the nature and scope of the issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## security@zerotier.com PGP key\n\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBGQGOVIBEACalXTnNqaiSOVLFEiqHpDMg8N/OI5D5850Xy1ZEvx3B3rz7cbn\nk30ozHtJKbh+vqpyItE7DjyQAuF19gP5Q64Yh0Y+MmLHq60q/GwOwAYz7cI+UzA3\n5x8YqcmTp32LAM1xJn+iMlMLBuAmJl4kULKmOXPlpqPiyTFs5saizvm7fgRmfgJJ\nHpsnIrTkaDFJhAR+jvMJohVYwmhuydeI0DsHu7KGpG1ddcHDrUjOPNqXnnAPSPwx\nllw4yfKlQb8GYErsv/G5QVyzd5+SxEuiI4MARRnrk8LlMQ33CR6pzIQ/Bk5AAmye\nmHqfEAknkiOf++urYhRs9BL3Kz3MdV0cg92zr9EFOg0u56jxf5OnAiTOhGUUA0hn\ndS7peVGl46R9Oy2JYIazNDGi+4NIsYDFXsnsss9xOQVygPyeQd71zFHfix0jct9w\nj3o/kj7Egsnm9nc13354bYT6bbalqXiRWwGH1eAFpjueNWiVFwZS6NZUP3WeNDiY\nBlPo1LodvolbXiJcTILTCyEkERJPCK2zoE2nTdVfvTLWsuehw1M6Yd2/q74TVYy/\nRY+KjHkrChEBQ9PqXsXRHj6opKbT8JLfZkvU5k+3IiqqxOpB+QXFI/whj493CxWW\nso7QAmzOCyJq8GDVPxzkwUac22YIkXdiOmb8i/HWq+kLY/HjQE259Gx6KwARAQAB\ntClaZXJvVGllciBTZWN1cml0eSA8c2VjdXJpdHlAemVyb3RpZXIuY29tPokCTAQT\nAQoANhYhBH1HQGb+4jzl6mnFqf09m6uqADkABQJkBjlSAhsDBAsJCAcEFQoJCAUW\nAgMBAAIeAQIXgAAKCRD9PZurqgA5ACqPD/sFt6SG6Tu0HwTY2ofJtYsa2GBLL0pf\ndYlX4cWSs1PVB5+m5Oj18y+GB2umA9GnsVtmvaSfp3XEngt2zNWX27uUsVfL35b2\n/5TVVe8RjzOedqMN+lQWMvO+f/C1zmWYXjjpC+iGjgMMaRRrofkkn+7uL4N9y6gY\nrcXtpACT1rYFC+i1AKnZfUO8Vr5ji7odq0f7bDkN/N38rB0kRRwEmO8wqdpQK6gK\nnxf9vgJl5ggimDk5Xtz1sfd3y28bf5N4hdOCkXUbd10nUFY3wDNTM4VxozxTGJeG\nimdcc19Wuw/1fGUZ5SIjgPanCdPLGYwSTr+M6Fuern9uTtlC1GOby3BUtmVGP6EU\n1pSAJSRpmoBPHKKOYtSMwV8PCboXru9P1ab8y8STKM3SKyghUJrl17gdc0LaksZa\nE54pJudGPIQMFRqZjMdV6jgMuaLTozjZ4mW8EThf4mkX4xDkO8l7cOn0225ZYJZC\nlZKpdnwzk9owkJA80u4KBNJxTtB4ZAPzjBsD5hFzCZQTLNQp/psU3EjZsau28eXT\nE/C1QjEQHgy4ohkgQlCm1H1+clKssCWcdmsVGXuS1u8gh4K6X9b0Z6LeCGRaQvH2\n+DB8oTAdqp9nUZv9rP4pbo+sR4fF67CFLriVuxjedAiFkbM4uHMFcL4tc/X9+DRo\nYN5X7oEkZvO507kCDQRkBjlSARAAz58UMF7K1qKyQjzKTcutaYZ5SaIGky9lCLZn\n/2vjpFCoBogkxS/6IKQcwZk8b4S9QstaaQZDFEkxqNeKC0GiFTAMAb6SmYcK495h\nEZnHl0NA5Nc2dBlZk5E/ENzTCz2bXaxCcVESc2z+xCzu07brbhGrqvliKiwOUzt9\nJzqEsar6I95OutBcZvkFCs44/Uf9bS1qf1w4klE8w3vdMtGH23umrET4tFZ+sh6o\nZFtQx0u2eKjsRdn/RMtsxLNaJlcE1DdIAqBpQrcmuwMC8v5wUGfCGZjhClzmyQlq\nakUkayir7UtbHbFT/mgO+YI77YGXWk5QrwPscqqT2l8KB/YMujNDmaWa/0KV1lIY\nzr5s4dzVeiwqFLR9ANFIhzFwzf3JLi6XSx123Qix0TxZoYPZCHl7yoi9qi6qybz5\n0Od2LSz3jbApeKYymZ+zjE+YV5y9DI6Wzy1j2M1FogNvTO9fMk+6dLt4HhTdSNvH\ncKya462YCcy+tnZTkhmh+FTebbJlV6D4wG7skE5KCdBhjm53xLwp6XW9L6n2CrkL\nW1IDBcCz0oPd1sMkXbO3wnxdXprV2XurCfsg/R2nszSNzvdJ8/xj3cr9hpoJ714R\nqqyoEDRZ1Ss9kGL166o5MpN5qb/EewdkqGgWP7YFXbhsdHQiW7Z7dAqzjoaybD4O\nnakkwyUAEQEAAYkCNgQYAQoAIBYhBH1HQGb+4jzl6mnFqf09m6uqADkABQJkBjlS\nAhsMAAoJEP09m6uqADkAax0P/Rh8EZYRqW6dPYTl1YQusAK10rAcRNq3ekjofXGk\noXK1S7HWGoFgl5++5nfSfNgFJ5VLcgIM56wtIf49zFjWe5oC6fw8k+ghh4d2chMP\nhdDILx6e0c30Iq1+EvovGR9hWa0wJ4cKTdzlwhY9ZC09q0ia+bl2mwpie1JQDR0c\nzXCjt+PldLeeK9z1/XT0Q7KowYC+U18oR+KFm+EaRV4QT85JVequnIeGkmaHJrHB\nlH4T5A5ib7y8edon1c0Zx3GsaxJUojkEJ0SX7ffVDu6ztUZfkHfCVpMW4VzUeGA/\nm+CtFO9ciLRGZEkRa+zhIGoBvwEXU0GiwiF4nZ0F2C8UioeW0YIEV9zl3nXJctYE\nZKc2whSENQRTGgaYHVoVZhznt71LKWgFLshwBo81UCXVkzwAjMW1ActDnmPw5M7q\nxR5Qp5G49Z1GmfSozazha0HVFPKNV5i3RlTzs4yLUnZyH0yC9IvtOefMHcLjG96L\nN5miEV97gvJJjrn8rhRvpUwAWgmT/9IuYjBNQTtNN40arto5HxezR76WCjdKYxdL\np3dM1iiBDShHNm7LdyZlLFhTOMU0tNBxJJ7B09ar5gakeZjD+2aB1ODX9VuFtozL\nonBjI2gIkry0UIkuznHfFw05lZAZAiqHEVgVi/WTk4C/bklDZNgE0lx+IWzEz2iS\nL455\n=lheL\n-----END PGP PUBLIC KEY BLOCK-----\n```\n"
        },
        {
          "name": "artwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "attic",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "controller",
          "type": "tree",
          "content": null
        },
        {
          "name": "cycle_controllers.sh",
          "type": "blob",
          "size": 0.1708984375,
          "content": "#!/usr/bin/env bash\n\nCONTROLLERS=`kubectl get pods -o=name | grep controller | sed \"s/^.\\{4\\}//\"`\n\nfor c in ${CONTROLLERS[@]}\ndo\n    kubectl delete pod ${c}\n    sleep 30\ndone\n"
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "entrypoint.sh.release",
          "type": "blob",
          "size": 2.23046875,
          "content": "#!/bin/sh\n\ngrepzt() {\n  [ -f /var/lib/zerotier-one/zerotier-one.pid -a -n \"$(cat /var/lib/zerotier-one/zerotier-one.pid 2>/dev/null)\" -a -d \"/proc/$(cat /var/lib/zerotier-one/zerotier-one.pid 2>/dev/null)\" ]\n  return $?\n}\n\nmkztfile() {\n  file=$1\n  mode=$2\n  content=$3\n\n  mkdir -p /var/lib/zerotier-one\n  echo \"$content\" > \"/var/lib/zerotier-one/$file\"\n  chmod \"$mode\" \"/var/lib/zerotier-one/$file\"\n}\n\nif [ \"x$ZEROTIER_API_SECRET\" != \"x\" ]\nthen\n  mkztfile authtoken.secret 0600 \"$ZEROTIER_API_SECRET\"\nfi\n\nif [ \"x$ZEROTIER_IDENTITY_PUBLIC\" != \"x\" ]\nthen\n  mkztfile identity.public 0644 \"$ZEROTIER_IDENTITY_PUBLIC\"\nfi\n\nif [ \"x$ZEROTIER_IDENTITY_SECRET\" != \"x\" ]\nthen\n  mkztfile identity.secret 0600 \"$ZEROTIER_IDENTITY_SECRET\"\nfi\n\nmkztfile zerotier-one.port 0600 \"9993\"\n\nkillzerotier() {\n  log \"Killing zerotier\"\n  kill $(cat /var/lib/zerotier-one/zerotier-one.pid 2>/dev/null)\n  exit 0\n}\n\nlog_header() {\n  echo -n \"\\r=>\"\n}\n\nlog_detail_header() {\n  echo -n \"\\r===>\"\n}\n\nlog() {\n  echo \"$(log_header)\" \"$@\"\n}\n\nlog_params() {\n  title=$1\n  shift\n  log \"$title\" \"[$@]\"\n}\n\nlog_detail() {\n  echo \"$(log_detail_header)\" \"$@\"\n}\n\nlog_detail_params() {\n  title=$1\n  shift\n  log_detail \"$title\" \"[$@]\"\n}\n\ntrap killzerotier INT TERM\n\nlog \"Configuring networks to join\"\nmkdir -p /var/lib/zerotier-one/networks.d\n\nlog_params \"Joining networks from command line:\" $@\nfor i in \"$@\"\ndo\n  log_detail_params \"Configuring join:\" \"$i\"\n  touch \"/var/lib/zerotier-one/networks.d/${i}.conf\"\ndone\n\nif [ \"x$ZEROTIER_JOIN_NETWORKS\" != \"x\" ]\nthen\n  log_params \"Joining networks from environment:\" $ZEROTIER_JOIN_NETWORKS\n  for i in $ZEROTIER_JOIN_NETWORKS\n  do\n    log_detail_params \"Configuring join:\" \"$i\"\n    touch \"/var/lib/zerotier-one/networks.d/${i}.conf\"\n  done\nfi\n\nlog \"Starting ZeroTier\"\nnohup /usr/sbin/zerotier-one &\n\nwhile ! grepzt\ndo\n  log_detail \"ZeroTier hasn't started, waiting a second\"\n\n  if [ -f nohup.out ]\n  then\n    tail -n 10 nohup.out\n  fi\n\n  sleep 1\ndone\n\nlog_params \"Writing healthcheck for networks:\" $@\n\ncat >/healthcheck.sh <<EOF\n#!/bin/bash\nfor i in $@ $ZEROTIER_JOIN_NETWORKS\ndo\n  [ \"\\$(zerotier-cli get \\$i status)\" = \"OK\" ] || exit 1\ndone\nEOF\n\nchmod +x /healthcheck.sh\n\nlog_params \"zerotier-cli info:\" \"$(zerotier-cli info)\"\n\nlog \"Sleeping infinitely\"\nwhile true\ndo\n  sleep 1\ndone\n"
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "java",
          "type": "tree",
          "content": null
        },
        {
          "name": "make-bsd.mk",
          "type": "blob",
          "size": 6.27734375,
          "content": "# This requires GNU make, which is typically \"gmake\" on BSD systems\n\nINCLUDES=-isystem ext -Iext/prometheus-cpp-lite-1.0/core/include -Iext/prometheus-cpp-lite-1.0/simpleapi/include\nDEFS=\nLIBS=\n\ninclude objects.mk\nONE_OBJS+=osdep/BSDEthernetTap.o ext/http-parser/http_parser.o\n\nifeq ($(OSTYPE),FreeBSD)\n\t# Auto-detect miniupnpc and nat-pmp as well and use ports libs if present,\n\t# otherwise build into binary as done on Mac and Windows.\n\tINCLUDES+=-I/usr/local/include\n\tLIBS+=-L/usr/local/lib\n\tONE_OBJS+=osdep/PortMapper.o\n\toverride DEFS+=-DZT_USE_MINIUPNPC\n\tMINIUPNPC_IS_NEW_ENOUGH=$(shell grep -sqr '.*define.*MINIUPNPC_VERSION.*\"2..*\"' /usr/local/include/miniupnpc/miniupnpc.h && echo 1)\n\tifeq ($(MINIUPNPC_IS_NEW_ENOUGH),1)\n\t\tLIBS+=-lminiupnpc\n\t\toverride DEFS+=-DZT_USE_SYSTEM_MINIUPNPC\n\telse\n\t\toverride DEFS+=-DMINIUPNP_STATICLIB -DMINIUPNPC_SET_SOCKET_TIMEOUT -DMINIUPNPC_GET_SRC_ADDR -D_BSD_SOURCE -D_DEFAULT_SOURCE -DOS_STRING=\\\"FreeBSD/$(shell uname -r)\\\" -DMINIUPNPC_VERSION_STRING=\\\"2.0\\\" -DUPNP_VERSION_STRING=\\\"UPnP/1.1\\\" -DENABLE_STRNATPMPERR\n\t\tONE_OBJS+=ext/miniupnpc/connecthostport.o ext/miniupnpc/igd_desc_parse.o ext/miniupnpc/minisoap.o ext/miniupnpc/minissdpc.o ext/miniupnpc/miniupnpc.o ext/miniupnpc/miniwget.o ext/miniupnpc/minixml.o ext/miniupnpc/portlistingparse.o ext/miniupnpc/receivedata.o ext/miniupnpc/upnpcommands.o ext/miniupnpc/upnpdev.o ext/miniupnpc/upnperrors.o ext/miniupnpc/upnpreplyparse.o\n\tendif\n\tifeq ($(wildcard /usr/local/include/natpmp.h),)\n\t\tONE_OBJS+=ext/libnatpmp/natpmp.o ext/libnatpmp/getgateway.o\n\telse\n\t\tLIBS+=-lnatpmp\n\t\toverride DEFS+=-DZT_USE_SYSTEM_NATPMP\n\tendif\nendif\n\n# Build with address sanitization library for advanced debugging (clang)\nifeq ($(ZT_SANITIZE),1)\n\tSANFLAGS+=-fsanitize=address -DASAN_OPTIONS=symbolize=1\nendif\n# \"make debug\" is a shortcut for this\nifeq ($(ZT_DEBUG),1)\n\tCFLAGS+=-Wall -g -pthread $(INCLUDES) $(DEFS)\n\tLDFLAGS+=\n\tSTRIP=echo\n\tZT_TRACE=1\n\t# The following line enables optimization for the crypto code, since\n\t# C25519 in particular is almost UNUSABLE in heavy testing without it.\nnode/Salsa20.o node/SHA512.o node/C25519.o node/Poly1305.o: CFLAGS = -Wall -O2 -g -pthread $(INCLUDES) $(DEFS)\nelse\n\tCFLAGS?=-O3 -fstack-protector\n\tCFLAGS+=-Wall -fPIE -fvisibility=hidden -fstack-protector -pthread $(INCLUDES) -DNDEBUG $(DEFS)\n\tLDFLAGS+=-pie -Wl,-z,relro,-z,now\n\tSTRIP=strip --strip-all\nendif\n\nifeq ($(ZT_TRACE),1)\n\tDEFS+=-DZT_TRACE\nendif\n\n# Determine system build architecture from compiler target\nCC_MACH=$(shell $(CC) -dumpmachine | cut -d '-' -f 1)\nZT_ARCHITECTURE=999\nifeq ($(CC_MACH),x86_64)\n\tZT_ARCHITECTURE=2\n\tZT_USE_X64_ASM_SALSA2012=1\nendif\nifeq ($(CC_MACH),amd64)\n\tZT_ARCHITECTURE=2\n\tZT_USE_X64_ASM_SALSA2012=1\nendif\nifeq ($(CC_MACH),i386)\n\tZT_ARCHITECTURE=1\nendif\nifeq ($(CC_MACH),i686)\n\tZT_ARCHITECTURE=1\nendif\nifeq ($(CC_MACH),arm)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_SALSA2012=1\nendif\nifeq ($(CC_MACH),armel)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_SALSA2012=1\nendif\nifeq ($(CC_MACH),armhf)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_SALSA2012=1\nendif\nifeq ($(CC_MACH),armv6)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING -DZT_NO_UNALIGNED_ACCESS\n\tZT_USE_ARM32_NEON_ASM_SALSA2012=1\nendif\nifeq ($(CC_MACH),armv6zk)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_SALSA2012=1\nendif\nifeq ($(CC_MACH),armv6kz)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_SALSA2012=1\nendif\nifeq ($(CC_MACH),armv7)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING -DZT_AES_NO_ACCEL -DZT_NO_UNALIGNED_ACCESS\n\tZT_USE_ARM32_NEON_ASM_SALSA2012=1\nendif\nifeq ($(CC_MACH),arm64)\n\tZT_ARCHITECTURE=4\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING -march=armv8-a+crypto\nendif\nifeq ($(CC_MACH),aarch64)\n\tZT_ARCHITECTURE=4\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING -march=armv8-a+crypto\nendif\nifeq ($(CC_MACH),mipsel)\n\tZT_ARCHITECTURE=5\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\nendif\nifeq ($(CC_MACH),mips)\n\tZT_ARCHITECTURE=5\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\nendif\nifeq ($(CC_MACH),mips64)\n\tZT_ARCHITECTURE=6\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\nendif\nifeq ($(CC_MACH),mips64el)\n\tZT_ARCHITECTURE=6\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\nendif\n\n# Fail if system architecture could not be determined\nifeq ($(ZT_ARCHITECTURE),999)\nERR=$(error FATAL: architecture could not be determined from $(CC) -dumpmachine: $(CC_MACH))\n.PHONY: err\nerr: ; $(ERR)\nendif\n\n# Build faster crypto on some targets\nifeq ($(ZT_USE_X64_ASM_SALSA2012),1)\n\toverride DEFS+=-DZT_USE_X64_ASM_SALSA2012\n\toverride CORE_OBJS+=ext/x64-salsa2012-asm/salsa2012.o\nendif\nifeq ($(ZT_USE_ARM32_NEON_ASM_SALSA2012),1)\n\toverride DEFS+=-DZT_USE_ARM32_NEON_ASM_SALSA2012\n\toverride CORE_OBJS+=ext/arm32-neon-salsa2012-asm/salsa2012.o\n\toverride ASFLAGS+=-meabi=5\n\toverride LDFLAGS+=-Wl,-z,notext\nendif\n\noverride DEFS+=-DZT_BUILD_PLATFORM=$(ZT_BUILD_PLATFORM) -DZT_BUILD_ARCHITECTURE=$(ZT_ARCHITECTURE) -DZT_SOFTWARE_UPDATE_DEFAULT=\"\\\"disable\\\"\"\n\nCXXFLAGS+=$(CFLAGS) -std=c++17 #-D_GLIBCXX_USE_C99 -D_GLIBCXX_USE_C99_MATH -D_GLIBCXX_USE_C99_MATH_TR1\n\nall:\tone\n\none:\t$(CORE_OBJS) $(ONE_OBJS) one.o\n\t$(CXX) $(CXXFLAGS) $(LDFLAGS) -o zerotier-one $(CORE_OBJS) $(ONE_OBJS) one.o $(LIBS)\n\t$(STRIP) zerotier-one\n\tln -sf zerotier-one zerotier-idtool\n\tln -sf zerotier-one zerotier-cli\n\nzerotier-one: one\n\nzerotier-idtool: one\n\nzerotier-cli: one\n\nlibzerotiercore.a:\t$(CORE_OBJS)\n\tar rcs libzerotiercore.a $(CORE_OBJS)\n\tranlib libzerotiercore.a\n\ncore: libzerotiercore.a\n\nselftest:\t$(CORE_OBJS) $(ONE_OBJS) selftest.o\n\t$(CXX) $(CXXFLAGS) $(LDFLAGS) -o zerotier-selftest selftest.o $(CORE_OBJS) $(ONE_OBJS) $(LIBS)\n\t$(STRIP) zerotier-selftest\n\nzerotier-selftest: selftest\n\nclean:\n\trm -rf *.a *.o node/*.o controller/*.o osdep/*.o service/*.o ext/http-parser/*.o build-* zerotier-one zerotier-idtool zerotier-selftest zerotier-cli $(ONE_OBJS) $(CORE_OBJS)\n\ndebug:\tFORCE\n\t$(MAKE) -j ZT_DEBUG=1\n\ninstall:\tone\n\trm -f /usr/local/sbin/zerotier-one\n\tcp zerotier-one /usr/local/sbin\n\tln -sf /usr/local/sbin/zerotier-one /usr/local/sbin/zerotier-cli\n\tln -sf /usr/local/sbin/zerotier-one /usr/local/bin/zerotier-idtool\n\nuninstall:\tFORCE\n\trm -rf /usr/local/sbin/zerotier-one /usr/local/sbin/zerotier-cli /usr/local/bin/zerotier-idtool /var/db/zerotier-one/zerotier-one.port /var/db/zerotier-one/zerotier-one.pid /var/db/zerotier-one/iddb.d\n\nFORCE:\n"
        },
        {
          "name": "make-linux.mk",
          "type": "blob",
          "size": 20.607421875,
          "content": "# Automagically pick CLANG or RH/CentOS newer GCC if present\n# This is only done if we have not overridden these with an environment or CLI variable\nifeq ($(origin CC),default)\n\tCC:=$(shell if [ -e /usr/bin/clang ]; then echo clang; else echo gcc; fi)\n\tCC:=$(shell if [ -e /opt/rh/devtoolset-8/root/usr/bin/gcc ]; then echo /opt/rh/devtoolset-8/root/usr/bin/gcc; else echo $(CC); fi)\nendif\nifeq ($(origin CXX),default)\n\tCXX:=$(shell if [ -e /usr/bin/clang++ ]; then echo clang++; else echo g++; fi)\n\tCXX:=$(shell if [ -e /opt/rh/devtoolset-8/root/usr/bin/g++ ]; then echo /opt/rh/devtoolset-8/root/usr/bin/g++; else echo $(CXX); fi)\nendif\n\nINCLUDES?=-Irustybits/target -isystem ext -Iext/prometheus-cpp-lite-1.0/core/include -Iext-prometheus-cpp-lite-1.0/3rdparty/http-client-lite/include -Iext/prometheus-cpp-lite-1.0/simpleapi/include\nDEFS?=\nLDLIBS?=\nDESTDIR?=\nEXTRA_DEPS?=\n\ninclude objects.mk\nONE_OBJS+=osdep/LinuxEthernetTap.o\nONE_OBJS+=osdep/LinuxNetLink.o\n\n# for central controller buildsk\nTIMESTAMP=$(shell date +\"%Y%m%d%H%M\")\n\n# Auto-detect miniupnpc and nat-pmp as well and use system libs if present,\n# otherwise build into binary as done on Mac and Windows.\nONE_OBJS+=osdep/PortMapper.o\noverride DEFS+=-DZT_USE_MINIUPNPC\nMINIUPNPC_IS_NEW_ENOUGH=$(shell grep -sqr '.*define.*MINIUPNPC_VERSION.*\"2..*\"' /usr/include/miniupnpc/miniupnpc.h && echo 1)\n#MINIUPNPC_IS_NEW_ENOUGH=$(shell grep -sqr '.*define.*MINIUPNPC_VERSION.*\"2..\"' /usr/include/miniupnpc/miniupnpc.h && echo 1)\nifeq ($(MINIUPNPC_IS_NEW_ENOUGH),1)\n\toverride DEFS+=-DZT_USE_SYSTEM_MINIUPNPC\n\tLDLIBS+=-lminiupnpc\nelse\n\toverride DEFS+=-DMINIUPNP_STATICLIB -DMINIUPNPC_SET_SOCKET_TIMEOUT -DMINIUPNPC_GET_SRC_ADDR -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -DOS_STRING=\"\\\"Linux\\\"\" -DMINIUPNPC_VERSION_STRING=\"\\\"2.0\\\"\" -DUPNP_VERSION_STRING=\"\\\"UPnP/1.1\\\"\" -DENABLE_STRNATPMPERR\n\tONE_OBJS+=ext/miniupnpc/connecthostport.o ext/miniupnpc/igd_desc_parse.o ext/miniupnpc/minisoap.o ext/miniupnpc/minissdpc.o ext/miniupnpc/miniupnpc.o ext/miniupnpc/miniwget.o ext/miniupnpc/minixml.o ext/miniupnpc/portlistingparse.o ext/miniupnpc/receivedata.o ext/miniupnpc/upnpcommands.o ext/miniupnpc/upnpdev.o ext/miniupnpc/upnperrors.o ext/miniupnpc/upnpreplyparse.o\nendif\nifeq ($(wildcard /usr/include/natpmp.h),)\n\tONE_OBJS+=ext/libnatpmp/natpmp.o ext/libnatpmp/getgateway.o\nelse\n\tLDLIBS+=-lnatpmp\n\toverride DEFS+=-DZT_USE_SYSTEM_NATPMP\nendif\n\n# Use bundled http-parser since distribution versions are NOT API-stable or compatible!\n# Trying to use dynamically linked libhttp-parser causes tons of compatibility problems.\nONE_OBJS+=ext/http-parser/http_parser.o\n\nifeq ($(ZT_RULES_ENGINE_DEBUGGING),1)\n\toverride DEFS+=-DZT_RULES_ENGINE_DEBUGGING\nendif\n\nifeq ($(ZT_DEBUG_TRACE),1)\n\tDEFS+=-DZT_DEBUG_TRACE\nendif\n\n# Build with address sanitization library for advanced debugging (clang)\nifeq ($(ZT_SANITIZE),1)\n\toverride DEFS+=-fsanitize=address -DASAN_OPTIONS=symbolize=1\nendif\nifeq ($(ZT_DEBUG),1)\n\toverride CFLAGS+=-Wall -Wno-deprecated -g -O -pthread $(INCLUDES) $(DEFS)\n\toverride CXXFLAGS+=-Wall -Wno-deprecated -g -O -std=c++17 -pthread $(INCLUDES) $(DEFS)\n\tZT_TRACE=1\n\tZT_CARGO_FLAGS=\n\t# The following line enables optimization for the crypto code, since\n\t# C25519 in particular is almost UNUSABLE in -O0 even on a 3ghz box!\nnode/Salsa20.o node/SHA512.o node/C25519.o node/Poly1305.o: CXXFLAGS=-Wall -O2 -g -pthread $(INCLUDES) $(DEFS)\nelse\n\tCFLAGS?=-O3 -fstack-protector\n\toverride CFLAGS+=-Wall -Wno-deprecated -pthread $(INCLUDES) -DNDEBUG $(DEFS)\n\tCXXFLAGS?=-O3 -fstack-protector\n\toverride CXXFLAGS+=-Wall -Wno-deprecated -std=c++17 -pthread $(INCLUDES) -DNDEBUG $(DEFS)\n\tLDFLAGS?=-pie -Wl,-z,relro,-z,now\n\tZT_CARGO_FLAGS=--release\nendif\n\nifeq ($(ZT_QNAP), 1)\n\toverride DEFS+=-D__QNAP__\n\tZT_EMBEDDED=1\nendif\nifeq ($(ZT_UBIQUITI), 1)\n\toverride DEFS+=-D__UBIQUITI__\n\tZT_EMBEDDED=1\nendif\n\nifeq ($(ZT_SYNOLOGY), 1)\n\toverride DEFS+=-D__SYNOLOGY__\n\tZT_EMBEDDED=1\nendif\n\nifeq ($(ZT_DISABLE_COMPRESSION), 1)\n\toverride DEFS+=-DZT_DISABLE_COMPRESSION\nendif\n\nifeq ($(ZT_TRACE),1)\n\toverride DEFS+=-DZT_TRACE\nendif\n\nifeq ($(ZT_DEBUG),1)\n\toverride DEFS+=-DZT_DEBUG\nendif\n\nifeq ($(ZT_USE_TEST_TAP),1)\n\toverride DEFS+=-DZT_USE_TEST_TAP\nendif\n\nifeq ($(ZT_VAULT_SUPPORT),1)\n\toverride DEFS+=-DZT_VAULT_SUPPORT=1\n\toverride LDLIBS+=-lcurl\nendif\n\n# Determine system build architecture from compiler target\nCC_MACH=$(shell $(CC) -dumpmachine | cut -d '-' -f 1)\nZT_ARCHITECTURE=999\nifeq ($(CC_MACH),x86_64)\n\tZT_ARCHITECTURE=2\n\tZT_USE_X64_ASM_SALSA=1\n\tZT_USE_X64_ASM_ED25519=1\n\toverride CFLAGS+=-msse -msse2\n\toverride CXXFLAGS+=-msse -msse2\n\tZT_SSO_SUPPORTED=1\n\tifeq ($(ZT_CONTROLLER),1)\n\t\tEXT_ARCH=amd64\n\tendif\nendif\nifeq ($(CC_MACH),amd64)\n\tZT_ARCHITECTURE=2\n\tZT_USE_X64_ASM_SALSA=1\n\tZT_USE_X64_ASM_ED25519=1\n\toverride CFLAGS+=-msse -msse2\n\toverride CXXFLAGS+=-msse -msse2\n\tZT_SSO_SUPPORTED=1\n\tifeq ($(ZT_CONTROLLER),1)\n\t\tEXT_ARCH=amd64\n\tendif\nendif\nifeq ($(CC_MACH),powerpc64le)\n\tZT_ARCHITECTURE=8\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\nendif\nifeq ($(CC_MACH),powerpc)\n\tZT_ARCHITECTURE=8\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\toverride DEFS+=-DZT_NO_CAPABILITIES\nendif\nifeq ($(CC_MACH),ppc64le)\n\tZT_ARCHITECTURE=8\nendif\nifeq ($(CC_MACH),ppc64el)\n\tZT_ARCHITECTURE=8\nendif\nifeq ($(CC_MACH),e2k)\n\tZT_ARCHITECTURE=2\nendif\nifeq ($(CC_MACH),e2k64)\n\tZT_ARCHITECTURE=2\nendif\nifeq ($(CC_MACH),i386)\n\tZT_ARCHITECTURE=1\n\tZT_SSO_SUPPORTED=1\nendif\nifeq ($(CC_MACH),i486)\n\tZT_ARCHITECTURE=1\n\tZT_SSO_SUPPORTED=1\nendif\nifeq ($(CC_MACH),i586)\n\tZT_ARCHITECTURE=1\n\tZT_SSO_SUPPORTED=1\nendif\nifeq ($(CC_MACH),i686)\n\tZT_ARCHITECTURE=1\n\tZT_SSO_SUPPORTED=1\nendif\nifeq ($(CC_MACH),arm)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_CRYPTO=1\nendif\nifeq ($(CC_MACH),armel)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_CRYPTO=1\nendif\nifeq ($(CC_MACH),armhf)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_CRYPTO=1\n\tZT_SSO_SUPPORTED=1\nendif\nifeq ($(CC_MACH),armv6)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_CRYPTO=1\nendif\nifeq ($(CC_MACH),armv6l)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_CRYPTO=1\nendif\nifeq ($(CC_MACH),armv6zk)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_CRYPTO=1\nendif\nifeq ($(CC_MACH),armv6kz)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_CRYPTO=1\nendif\nifeq ($(CC_MACH),armv6k)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_CRYPTO=1\nendif\nifeq ($(CC_MACH),armv7)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_CRYPTO=1\nendif\nifeq ($(CC_MACH),armv7l)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_CRYPTO=1\nendif\nifeq ($(CC_MACH),armv7hl)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_CRYPTO=1\nendif\nifeq ($(CC_MACH),armv7ve)\n\tZT_ARCHITECTURE=3\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\n\tZT_USE_ARM32_NEON_ASM_CRYPTO=1\nendif\nifeq ($(CC_MACH),arm64)\n\tZT_ARCHITECTURE=4\n\tZT_SSO_SUPPORTED=1\n\tZT_USE_X64_ASM_ED25519=0\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING -DZT_ARCH_ARM_HAS_NEON -march=armv8-a+crypto -mtune=generic -mstrict-align\nendif\nifeq ($(CC_MACH),aarch64)\n\tZT_ARCHITECTURE=4\n\tZT_SSO_SUPPORTED=1\n\tZT_USE_X64_ASM_ED25519=0\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING -DZT_ARCH_ARM_HAS_NEON -march=armv8-a+crypto -mtune=generic -mstrict-align\n\tifeq ($(ZT_CONTROLLER),1)\n\t\tEXT_ARCH=arm64\n\tendif\nendif\nifeq ($(CC_MACH),mipsel)\n\tZT_ARCHITECTURE=5\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\nendif\nifeq ($(CC_MACH),mips)\n\tZT_ARCHITECTURE=5\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\nendif\nifeq ($(CC_MACH),mips64)\n\tZT_ARCHITECTURE=6\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\nendif\nifeq ($(CC_MACH),mips64el)\n\tZT_ARCHITECTURE=6\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\nendif\nifeq ($(CC_MACH),s390x)\n\tZT_ARCHITECTURE=16\nendif\nifeq ($(CC_MACH),riscv64)\n\tZT_ARCHITECTURE=0\nendif\nifeq ($(CC_MACH),loongarch64)\n\tZT_ARCHITECTURE=17\n\toverride DEFS+=-DZT_NO_TYPE_PUNNING\nendif\n\n# Fail if system architecture could not be determined\nifeq ($(ZT_ARCHITECTURE),999)\nERR=$(error FATAL: architecture could not be determined from $(CC) -dumpmachine: $(CC_MACH))\n.PHONY: err\nerr: ; $(ERR)\nendif\n\n# Flag for Intel 32-bit processors since some machine images are incorrectly marked as i386\nifeq ($(ZT_IA32),1)\n\toverride LDFLAGS+=-m32\n\toverride CFLAGS+=-m32\n\toverride CXXFLAGS+=-m32\n\t# Prevent the use of X64 crypto\n\tZT_USE_X64_ASM_SALSA=0\n\tZT_USE_X64_ASM_ED25519=0\nendif\n\nifeq ($(ZT_SSO_SUPPORTED), 1)\n\tifeq ($(ZT_EMBEDDED),)\n\t\toverride DEFS+=-DZT_SSO_SUPPORTED=1\n\t\tifeq ($(ZT_DEBUG),1)\n\t\t\tLDLIBS+=rustybits/target/debug/libzeroidc.a -ldl -lssl -lcrypto\n\t\telse\n\t\t\tLDLIBS+=rustybits/target/release/libzeroidc.a -ldl -lssl -lcrypto\n\t\tendif\n\tendif\nendif\n\n# Disable software updates by default on Linux since that is normally done with package management\noverride DEFS+=-DZT_BUILD_PLATFORM=1 -DZT_BUILD_ARCHITECTURE=$(ZT_ARCHITECTURE) -DZT_SOFTWARE_UPDATE_DEFAULT=\"\\\"disable\\\"\"\n\n# This forces libstdc++ not to include these abominations, especially mt and pool\noverride DEFS+=-D_MT_ALLOCATOR_H -D_POOL_ALLOCATOR_H -D_EXTPTR_ALLOCATOR_H -D_DEBUG_ALLOCATOR_H\n\n# Static builds, which are currently done for a number of Linux targets\nifeq ($(ZT_STATIC),1)\n\toverride LDFLAGS+=-static\nendif\n\n# For building an official semi-static binary on CentOS 7\nifeq ($(ZT_OFFICIAL),1)\n\tCORE_OBJS+=ext/misc/linux-old-glibc-compat.o\n\toverride LDFLAGS+=-Wl,--wrap=memcpy -static-libstdc++\nendif\n\nifeq ($(ZT_CONTROLLER),1)\n\toverride CXXFLAGS+=-Wall -Wno-deprecated -std=c++17 -pthread $(INCLUDES) -DNDEBUG $(DEFS)\n\toverride LDLIBS+=-Lext/libpqxx-7.7.3/install/ubuntu22.04/$(EXT_ARCH)/lib -lpqxx -lpq ext/hiredis-1.0.2/lib/ubuntu22.04/$(EXT_ARCH)/libhiredis.a ext/redis-plus-plus-1.3.3/install/ubuntu22.04/$(EXT_ARCH)/lib/libredis++.a -lssl -lcrypto\n\toverride DEFS+=-DZT_CONTROLLER_USE_LIBPQ -DZT_NO_PEER_METRICS\n\toverride INCLUDES+=-I/usr/include/postgresql -Iext/libpqxx-7.7.3/install/ubuntu22.04/$(EXT_ARCH)/include -Iext/hiredis-1.0.2/include/ -Iext/redis-plus-plus-1.3.3/install/ubuntu22.04/$(EXT_ARCH)/include/sw/\n\tifeq ($(ZT_DEBUG),1)\n\t\toverride LDLIBS+=rustybits/target/debug/libsmeeclient.a\n\telse\n\t\toverride LDLIBS+=rustybits/target/release/libsmeeclient.a\n\tendif\nendif\n\n# ARM32 hell -- use conservative CFLAGS\nifeq ($(ZT_ARCHITECTURE),3)\n\tifeq ($(shell if [ -e /usr/bin/dpkg ]; then dpkg --print-architecture; fi),armel)\n\t\toverride CFLAGS+=-march=armv5t -mfloat-abi=soft -msoft-float -mno-unaligned-access -marm\n\t\toverride CXXFLAGS+=-march=armv5t -mfloat-abi=soft -msoft-float -mno-unaligned-access -marm\n\t\tZT_USE_ARM32_NEON_ASM_CRYPTO=0\n\telse\n\t\toverride CFLAGS+=-mfloat-abi=hard -march=armv6zk -marm -mfpu=vfp -mno-unaligned-access -mtp=cp15 -mcpu=arm1176jzf-s\n\t\toverride CXXFLAGS+=-mfloat-abi=hard -march=armv6zk -marm -mfpu=vfp -fexceptions -mno-unaligned-access -mtp=cp15 -mcpu=arm1176jzf-s\n\t\tZT_USE_ARM32_NEON_ASM_CRYPTO=0\n\tendif\nendif\n\n# Build faster crypto on some targets\nifeq ($(ZT_USE_X64_ASM_SALSA),1)\n\toverride DEFS+=-DZT_USE_X64_ASM_SALSA2012\n\toverride CORE_OBJS+=ext/x64-salsa2012-asm/salsa2012.o\nendif\nifeq ($(ZT_USE_X64_ASM_ED25519),1)\n\toverride DEFS+=-DZT_USE_FAST_X64_ED25519\n\toverride CORE_OBJS+=ext/ed25519-amd64-asm/choose_t.o ext/ed25519-amd64-asm/consts.o ext/ed25519-amd64-asm/fe25519_add.o ext/ed25519-amd64-asm/fe25519_freeze.o ext/ed25519-amd64-asm/fe25519_mul.o ext/ed25519-amd64-asm/fe25519_square.o ext/ed25519-amd64-asm/fe25519_sub.o ext/ed25519-amd64-asm/ge25519_add_p1p1.o ext/ed25519-amd64-asm/ge25519_dbl_p1p1.o ext/ed25519-amd64-asm/ge25519_nielsadd2.o ext/ed25519-amd64-asm/ge25519_nielsadd_p1p1.o ext/ed25519-amd64-asm/ge25519_p1p1_to_p2.o ext/ed25519-amd64-asm/ge25519_p1p1_to_p3.o ext/ed25519-amd64-asm/ge25519_pnielsadd_p1p1.o ext/ed25519-amd64-asm/heap_rootreplaced.o ext/ed25519-amd64-asm/heap_rootreplaced_1limb.o ext/ed25519-amd64-asm/heap_rootreplaced_2limbs.o ext/ed25519-amd64-asm/heap_rootreplaced_3limbs.o ext/ed25519-amd64-asm/sc25519_add.o ext/ed25519-amd64-asm/sc25519_barrett.o ext/ed25519-amd64-asm/sc25519_lt.o ext/ed25519-amd64-asm/sc25519_sub_nored.o ext/ed25519-amd64-asm/ull4_mul.o ext/ed25519-amd64-asm/fe25519_getparity.o ext/ed25519-amd64-asm/fe25519_invert.o ext/ed25519-amd64-asm/fe25519_iseq.o ext/ed25519-amd64-asm/fe25519_iszero.o ext/ed25519-amd64-asm/fe25519_neg.o ext/ed25519-amd64-asm/fe25519_pack.o ext/ed25519-amd64-asm/fe25519_pow2523.o ext/ed25519-amd64-asm/fe25519_setint.o ext/ed25519-amd64-asm/fe25519_unpack.o ext/ed25519-amd64-asm/ge25519_add.o ext/ed25519-amd64-asm/ge25519_base.o ext/ed25519-amd64-asm/ge25519_double.o ext/ed25519-amd64-asm/ge25519_double_scalarmult.o ext/ed25519-amd64-asm/ge25519_isneutral.o ext/ed25519-amd64-asm/ge25519_multi_scalarmult.o ext/ed25519-amd64-asm/ge25519_pack.o ext/ed25519-amd64-asm/ge25519_scalarmult_base.o ext/ed25519-amd64-asm/ge25519_unpackneg.o ext/ed25519-amd64-asm/hram.o ext/ed25519-amd64-asm/index_heap.o ext/ed25519-amd64-asm/sc25519_from32bytes.o ext/ed25519-amd64-asm/sc25519_from64bytes.o ext/ed25519-amd64-asm/sc25519_from_shortsc.o ext/ed25519-amd64-asm/sc25519_iszero.o ext/ed25519-amd64-asm/sc25519_mul.o ext/ed25519-amd64-asm/sc25519_mul_shortsc.o ext/ed25519-amd64-asm/sc25519_slide.o ext/ed25519-amd64-asm/sc25519_to32bytes.o ext/ed25519-amd64-asm/sc25519_window4.o ext/ed25519-amd64-asm/sign.o\nendif\nifeq ($(ZT_USE_ARM32_NEON_ASM_CRYPTO),1)\n\toverride DEFS+=-DZT_USE_ARM32_NEON_ASM_SALSA2012\n\toverride CORE_OBJS+=ext/arm32-neon-salsa2012-asm/salsa2012.o\nendif\n\n# Position Independence\noverride CFLAGS+=-fPIC -fPIE\noverride CXXFLAGS+=-fPIC -fPIE\n\n# Non-executable stack\noverride LDFLAGS+=-Wl,-z,noexecstack\n\n.PHONY: all\nall:\tone\n\n.PHONY: one\none: zerotier-one zerotier-idtool zerotier-cli\n\nfrom_builder:\tFORCE\n\tln -sf zerotier-one zerotier-idtool\n\tln -sf zerotier-one zerotier-cli\n\nzerotier-one: $(CORE_OBJS) $(ONE_OBJS) one.o\n\t$(CXX) $(CXXFLAGS) $(LDFLAGS) -o zerotier-one $(CORE_OBJS) $(ONE_OBJS) one.o $(LDLIBS)\n\nzerotier-idtool: zerotier-one\n\tln -sf zerotier-one zerotier-idtool\n\nzerotier-cli: zerotier-one\n\tln -sf zerotier-one zerotier-cli\n\n$(ONE_OBJS): zeroidc smeeclient\n\nlibzerotiercore.a:\tFORCE\n\tmake CFLAGS=\"-O3 -fstack-protector -fPIC\" CXXFLAGS=\"-O3 -std=c++17 -fstack-protector -fPIC\" $(CORE_OBJS)\n\tar rcs libzerotiercore.a $(CORE_OBJS)\n\tranlib libzerotiercore.a\n\ncore: libzerotiercore.a\n\nselftest:\t$(CORE_OBJS) $(ONE_OBJS) selftest.o\n\t$(CXX) $(CXXFLAGS) $(LDFLAGS) -o zerotier-selftest selftest.o $(CORE_OBJS) $(ONE_OBJS) $(LDLIBS)\n\nzerotier-selftest: selftest\n\nmanpages:\tFORCE\n\tcd doc ; ./build.sh\n\ndoc:\tmanpages\n\nclean: FORCE\n\trm -rf *.a *.so *.o node/*.o controller/*.o osdep/*.o service/*.o ext/http-parser/*.o ext/miniupnpc/*.o ext/libnatpmp/*.o $(CORE_OBJS) $(ONE_OBJS) zerotier-one zerotier-idtool zerotier-cli zerotier-selftest build-* ZeroTierOneInstaller-* *.deb *.rpm .depend debian/files debian/zerotier-one*.debhelper debian/zerotier-one.substvars debian/*.log debian/zerotier-one doc/node_modules ext/misc/*.o debian/.debhelper debian/debhelper-build-stamp docker/zerotier-one rustybits/target\n\ndistclean:\tclean\n\nrealclean:\tdistclean\n\nofficial:\tFORCE\n\tmake -j`nproc` ZT_OFFICIAL=1 all\n\ndocker:\tFORCE\n\tdocker build --no-cache -f ext/installfiles/linux/zerotier-containerized/Dockerfile -t zerotier-containerized .\n\n_buildx:\n\t@echo \"docker buildx create\"\n\t# docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n\tdocker run --privileged --rm tonistiigi/binfmt --install all\n\t@echo docker buildx create --name multiarch --driver docker-container --use\n\t@echo docker buildx inspect --bootstrap\n\ncentral-controller:\tFORCE\n\tmake -j4 ZT_CONTROLLER=1 one\n\ncentral-controller-docker: _buildx FORCE\n\tdocker buildx build --platform linux/amd64,linux/arm64 --no-cache -t registry.zerotier.com/zerotier-central/ztcentral-controller:${TIMESTAMP} -f ext/central-controller-docker/Dockerfile --build-arg git_branch=`git name-rev --name-only HEAD` . --push\n\t@echo Image: registry.zerotier.com/zerotier-central/ztcentral-controller:${TIMESTAMP}\n\ndebug:\tFORCE\n\tmake ZT_DEBUG=1 one\n\tmake ZT_DEBUG=1 selftest\n\nifeq ($(ZT_SSO_SUPPORTED), 1)\nifeq ($(ZT_EMBEDDED),)\nzeroidc:\tFORCE\n\texport PATH=/${HOME}/.cargo/bin:$$PATH; cd rustybits && cargo build $(ZT_CARGO_FLAGS) -p zeroidc\nendif\nelse\nzeroidc:\nendif\n\nifeq ($(ZT_CONTROLLER), 1)\nsmeeclient:\tFORCE\n\texport PATH=/${HOME}/.cargo/bin:$$PATH; cd rustybits && cargo build $(ZT_CARGO_FLAGS) -p smeeclient\nelse\nsmeeclient:\nendif\n\n# Note: keep the symlinks in /var/lib/zerotier-one to the binaries since these\n# provide backward compatibility with old releases where the binaries actually\n# lived here. Folks got scripts.\n\ninstall:\tFORCE\n\tmkdir -p $(DESTDIR)/usr/sbin\n\trm -f $(DESTDIR)/usr/sbin/zerotier-one\n\tcp -f zerotier-one $(DESTDIR)/usr/sbin/zerotier-one\n\trm -f $(DESTDIR)/usr/sbin/zerotier-cli\n\trm -f $(DESTDIR)/usr/sbin/zerotier-idtool\n\tln -s zerotier-one $(DESTDIR)/usr/sbin/zerotier-cli\n\tln -s zerotier-one $(DESTDIR)/usr/sbin/zerotier-idtool\n\tmkdir -p $(DESTDIR)/var/lib/zerotier-one\n\trm -f $(DESTDIR)/var/lib/zerotier-one/zerotier-one\n\trm -f $(DESTDIR)/var/lib/zerotier-one/zerotier-cli\n\trm -f $(DESTDIR)/var/lib/zerotier-one/zerotier-idtool\n\tln -s ../../../usr/sbin/zerotier-one $(DESTDIR)/var/lib/zerotier-one/zerotier-one\n\tln -s ../../../usr/sbin/zerotier-one $(DESTDIR)/var/lib/zerotier-one/zerotier-cli\n\tln -s ../../../usr/sbin/zerotier-one $(DESTDIR)/var/lib/zerotier-one/zerotier-idtool\n\tmkdir -p $(DESTDIR)/usr/share/man/man8\n\trm -f $(DESTDIR)/usr/share/man/man8/zerotier-one.8.gz\n\tcat doc/zerotier-one.8 | gzip -9 >$(DESTDIR)/usr/share/man/man8/zerotier-one.8.gz\n\tmkdir -p $(DESTDIR)/usr/share/man/man1\n\trm -f $(DESTDIR)/usr/share/man/man1/zerotier-idtool.1.gz\n\trm -f $(DESTDIR)/usr/share/man/man1/zerotier-cli.1.gz\n\tcat doc/zerotier-cli.1 | gzip -9 >$(DESTDIR)/usr/share/man/man1/zerotier-cli.1.gz\n\tcat doc/zerotier-idtool.1 | gzip -9 >$(DESTDIR)/usr/share/man/man1/zerotier-idtool.1.gz\n\tcp ext/installfiles/linux/zerotier-one.te $(DESTDIR)/var/lib/zerotier-one/zerotier-one.te\n\n# Uninstall preserves identity.public and identity.secret since the user might\n# want to save these. These are your ZeroTier address.\n\nuninstall:\tFORCE\n\trm -f $(DESTDIR)/var/lib/zerotier-one/zerotier-one\n\trm -f $(DESTDIR)/var/lib/zerotier-one/zerotier-cli\n\trm -f $(DESTDIR)/var/lib/zerotier-one/zerotier-idtool\n\trm -f $(DESTDIR)/usr/sbin/zerotier-cli\n\trm -f $(DESTDIR)/usr/sbin/zerotier-idtool\n\trm -f $(DESTDIR)/usr/sbin/zerotier-one\n\trm -rf $(DESTDIR)/var/lib/zerotier-one/iddb.d\n\trm -rf $(DESTDIR)/var/lib/zerotier-one/updates.d\n\trm -rf $(DESTDIR)/var/lib/zerotier-one/networks.d\n\trm -f $(DESTDIR)/var/lib/zerotier-one/zerotier-one.port\n\trm -f $(DESTDIR)/usr/share/man/man8/zerotier-one.8.gz\n\trm -f $(DESTDIR)/usr/share/man/man1/zerotier-idtool.1.gz\n\trm -f $(DESTDIR)/usr/share/man/man1/zerotier-cli.1.gz\n\n# These are just for convenience for building Linux packages\n\necho_flags:\n\t@echo \"=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~\"\n\t@echo \"echo_flags :: CC=$(CC)\"\n\t@echo \"echo_flags :: CXX=$(CXX)\"\n\t@echo \"echo_flags :: CFLAGS=$(CFLAGS)\"\n\t@echo \"echo_flags :: CXXFLAGS=$(CXXFLAGS)\"\n\t@echo \"echo_flags :: LDFLAGS=$(LDFLAGS)\"\n\t@echo \"echo_flags :: RUSTFLAGS=$(RUSTFLAGS)\"\n\t@echo \"=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~\"\n\ndebian: echo_flags\n\t@echo \"building deb package\"\n\tdebuild --no-lintian -I -i -us -uc -nc -b\n\t# debuild --no-lintian -b -uc -us\n\n# debian:\tFORCE\n# \tdebuild --no-lintian -I -i -us -uc -nc -b\n\ndebian-clean: FORCE\n\trm -rf debian/files debian/zerotier-one*.debhelper debian/zerotier-one.substvars debian/*.log debian/zerotier-one debian/.debhelper debian/debhelper-build-stamp\n\nredhat:\n\t@echo \"building rpm package\"\n\trpmbuild --target `rpm -q bash --qf \"%{arch}\"` -ba zerotier-one.spec\n\n# This installs the packages needed to build ZT locally on CentOS 7 and\n# is here largely for documentation purposes.\ncentos-7-setup: FORCE\n\tyum install -y gcc gcc-c++ make epel-release git\n\tyum install -y centos-release-scl\n\tyum install -y devtoolset-8-gcc devtoolset-8-gcc-c++\n\nsnap-build-local: FORCE\n\tsnapcraft\n\nsnap-install: FORCE\n\tsnap install zerotier_`git describe --tags --abbrev=0`_${SNAP_ARCH}.snap --dangerous\n\nsnap-uninstall: FORCE\n\tsnap remove zerotier\n\nsnap-build-remote: FORCE\n\tcd pkg && snapcraft remote-build --build-for=amd64,arm64,s390x,ppc64el,armhf,i386\n\nsnap-upload: ./pkg/*.snap\n\tfor file in $^ ; do \\\n\t\tsnapcraft upload --release=beta,edge,candidate $${file} ; \\\n\tdone\n\nsynology-pkg: FORCE\n\tcd pkg/synology ; ./build.sh build\n\nsynology-docker: FORCE\n\tcd pkg/synology/dsm7-docker/; ./build.sh build-and-push\n\nmunge_rpm:\n\t@:$(call check_defined, VERSION)\n\t@echo \"Updating rpm spec to $(VERSION)\"\n\tci/scripts/munge_rpm_spec.sh zerotier-one.spec $(VERSION) \"Adam Ierymenko <adam.ierymenko@zerotier.com>\" \"see https://github.com/zerotier/ZeroTierOne for release notes\"\n\nmunge_deb:\n\t@:$(call check_defined, VERSION)\n\t@echo \"Updating debian/changelog to $(VERSION)\"\n\tci/scripts/munge_debian_changelog.sh debian/changelog $(VERSION) \"Adam Ierymenko <adam.ierymenko@zerotier.com>\" \"see https://github.com/zerotier/ZeroTierOne for release notes\"\n\nFORCE:\n"
        },
        {
          "name": "make-mac.mk",
          "type": "blob",
          "size": 9.3359375,
          "content": "CC=clang\nCXX=clang++\nTOPDIR=$(shell pwd)\n\nINCLUDES=-I$(shell pwd)/rustybits/target -isystem $(TOPDIR)/ext  -I$(TOPDIR)/ext/prometheus-cpp-lite-1.0/core/include -I$(TOPDIR)/ext-prometheus-cpp-lite-1.0/3rdparty/http-client-lite/include -I$(TOPDIR)/ext/prometheus-cpp-lite-1.0/simpleapi/include\nDEFS=\nLIBS=\nARCH_FLAGS=-arch x86_64 -arch arm64 \n\nCODESIGN=echo\nPRODUCTSIGN=echo\nCODESIGN_APP_CERT=\nCODESIGN_INSTALLER_CERT=\nNOTARIZE=echo\nNOTARIZE_APPLE_ID=null\nNOTARIZE_TEAM_ID=null\n\nZT_BUILD_PLATFORM=3\nZT_BUILD_ARCHITECTURE=2\nZT_VERSION_MAJOR=$(shell cat version.h | grep -F VERSION_MAJOR | cut -d ' ' -f 3)\nZT_VERSION_MINOR=$(shell cat version.h | grep -F VERSION_MINOR | cut -d ' ' -f 3)\nZT_VERSION_REV=$(shell cat version.h | grep -F VERSION_REVISION | cut -d ' ' -f 3)\nZT_VERSION_BUILD=$(shell cat version.h | grep -F VERSION_BUILD | cut -d ' ' -f 3)\n\n# for central controller builds\nTIMESTAMP=$(shell date +\"%Y%m%d%H%M\")\n\nDEFS+=-DZT_BUILD_PLATFORM=$(ZT_BUILD_PLATFORM) -DZT_BUILD_ARCHITECTURE=$(ZT_BUILD_ARCHITECTURE)\n\ninclude objects.mk\nONE_OBJS+=osdep/MacEthernetTap.o osdep/MacKextEthernetTap.o osdep/MacDNSHelper.o ext/http-parser/http_parser.o\nLIBS+=-framework CoreServices -framework SystemConfiguration -framework CoreFoundation -framework Security\n\n# Official releases are signed with our Apple cert and apply software updates by default\nifeq ($(ZT_OFFICIAL_RELEASE),1)\n\tDEFS+=-DZT_SOFTWARE_UPDATE_DEFAULT=\"\\\"apply\\\"\"\n\tZT_USE_MINIUPNPC=1\n\tCODESIGN=codesign\n\tPRODUCTSIGN=productsign\n\tCODESIGN_APP_CERT=\"Developer ID Application: ZeroTier, Inc (8ZD9JUCZ4V)\"\n\tCODESIGN_INSTALLER_CERT=\"Developer ID Installer: ZeroTier, Inc (8ZD9JUCZ4V)\"\n\tNOTARIZE=xcrun notarytool\n\tNOTARIZE_APPLE_ID=\"adam.ierymenko@gmail.com\"\n\tNOTARIZE_TEAM_ID=\"8ZD9JUCZ4V\"\nelse\n\tDEFS+=-DZT_SOFTWARE_UPDATE_DEFAULT=\"\\\"download\\\"\"\nendif\n\n# Use fast ASM Salsa20/12 for x64 processors\nDEFS+=-DZT_USE_X64_ASM_SALSA2012\nCORE_OBJS+=ext/x64-salsa2012-asm/salsa2012.o\nCXXFLAGS=$(CFLAGS) -std=c++17 -stdlib=libc++\n\n# Build miniupnpc and nat-pmp as included libraries -- extra defs are required for these sources\nDEFS+=-DMACOSX -DZT_SSO_SUPPORTED -DZT_USE_MINIUPNPC -DMINIUPNP_STATICLIB -D_DARWIN_C_SOURCE -DMINIUPNPC_SET_SOCKET_TIMEOUT -DMINIUPNPC_GET_SRC_ADDR -D_BSD_SOURCE -D_DEFAULT_SOURCE -DOS_STRING=\\\"Darwin/15.0.0\\\" -DMINIUPNPC_VERSION_STRING=\\\"2.0\\\" -DUPNP_VERSION_STRING=\\\"UPnP/1.1\\\" -DENABLE_STRNATPMPERR\nONE_OBJS+=ext/libnatpmp/natpmp.o ext/libnatpmp/getgateway.o ext/miniupnpc/connecthostport.o ext/miniupnpc/igd_desc_parse.o ext/miniupnpc/minisoap.o ext/miniupnpc/minissdpc.o ext/miniupnpc/miniupnpc.o ext/miniupnpc/miniwget.o ext/miniupnpc/minixml.o ext/miniupnpc/portlistingparse.o ext/miniupnpc/receivedata.o ext/miniupnpc/upnpcommands.o ext/miniupnpc/upnpdev.o ext/miniupnpc/upnperrors.o ext/miniupnpc/upnpreplyparse.o osdep/PortMapper.o\nifeq ($(ZT_CONTROLLER),1)\n\tMACOS_VERSION_MIN=10.15\n\toverride CXXFLAGS=$(CFLAGS) -std=c++17 -stdlib=libc++\n\tLIBS+=-L/usr/local/opt/libpqxx/lib -L/usr/local/opt/libpq/lib -L/usr/local/opt/openssl/lib/ -lpqxx -lpq -lssl -lcrypto -lgssapi_krb5 ext/redis-plus-plus-1.1.1/install/macos/lib/libredis++.a ext/hiredis-0.14.1/lib/macos/libhiredis.a\n\tDEFS+=-DZT_CONTROLLER_USE_LIBPQ -DZT_CONTROLLER_USE_REDIS -DZT_CONTROLLER \n\tINCLUDES+=-I/usr/local/opt/libpq/include -I/usr/local/opt/libpqxx/include -Iext/hiredis-0.14.1/include/ -Iext/redis-plus-plus-1.1.1/install/macos/include/sw/\nelse\n\tMACOS_VERSION_MIN=10.13\nendif\n\n# Build with address sanitization library for advanced debugging (clang)\nifeq ($(ZT_SANITIZE),1)\n\tDEFS+=-fsanitize=address -DASAN_OPTIONS=symbolize=1\nendif\nifeq ($(ZT_DEBUG_TRACE),1)\n\tDEFS+=-DZT_DEBUG_TRACE\nendif\n# Debug mode -- dump trace output, build binary with -g\nifeq ($(ZT_DEBUG),1)\n\tZT_TRACE=1\n\tARCH_FLAGS=\n\tCFLAGS+=-Wall -g $(INCLUDES) $(DEFS) $(ARCH_FLAGS)\n\tSTRIP=echo\n\tEXTRA_CARGO_FLAGS=\n\tRUST_VARIANT=debug\n\t# The following line enables optimization for the crypto code, since\n\t# C25519 in particular is almost UNUSABLE in heavy testing without it.\nnode/Salsa20.o node/SHA512.o node/C25519.o node/Poly1305.o: CFLAGS = -Wall -O2 -g $(INCLUDES) $(DEFS)\nelse\n\tCFLAGS?=-Ofast -fstack-protector-strong\n\tCFLAGS+=$(ARCH_FLAGS) -Wall -flto -fPIE -mmacosx-version-min=$(MACOS_VERSION_MIN) -DNDEBUG -Wno-unused-private-field $(INCLUDES) $(DEFS)\n\tSTRIP=strip\n\tEXTRA_CARGO_FLAGS=--release\n\tRUST_VARIANT=release\nendif\n\nifeq ($(ZT_TRACE),1)\n\tDEFS+=-DZT_TRACE\nendif\n\nifeq ($(ZT_DEBUG),1)\n\tDEFS+=-DZT_DEBUG\nendif\n\nifeq ($(ZT_VAULT_SUPPORT),1)\n\tDEFS+=-DZT_VAULT_SUPPORT=1\n\tLIBS+=-lcurl\nendif\n\nall: one\n\next/x64-salsa2012-asm/salsa2012.o:\n\tas -arch x86_64 -mmacosx-version-min=$(MACOS_VERSION_MIN) -o ext/x64-salsa2012-asm/salsa2012.o ext/x64-salsa2012-asm/salsa2012.s\n\nmac-agent: FORCE\n\t$(CC) -Ofast $(ARCH_FLAGS) -mmacosx-version-min=$(MACOS_VERSION_MIN) -o MacEthernetTapAgent osdep/MacEthernetTapAgent.c\n\t$(CODESIGN) -f --options=runtime -s $(CODESIGN_APP_CERT) MacEthernetTapAgent\n\nosdep/MacDNSHelper.o: osdep/MacDNSHelper.mm\n\t$(CXX) $(CXXFLAGS) -c osdep/MacDNSHelper.mm -o osdep/MacDNSHelper.o \n\none:\tzeroidc $(CORE_OBJS) $(ONE_OBJS) one.o mac-agent \n\t$(CXX) $(CXXFLAGS) -o zerotier-one $(CORE_OBJS) $(ONE_OBJS) one.o $(LIBS) rustybits/target/libzeroidc.a\n\t# $(STRIP) zerotier-one\n\tln -sf zerotier-one zerotier-idtool\n\tln -sf zerotier-one zerotier-cli\n\t$(CODESIGN) -f --options=runtime -s $(CODESIGN_APP_CERT) zerotier-one\n\nzerotier-one: one\n\nzeroidc: rustybits/target/libzeroidc.a\n\nrustybits/target/libzeroidc.a:\tFORCE\n\tcd rustybits && MACOSX_DEPLOYMENT_TARGET=$(MACOS_VERSION_MIN) cargo build -p zeroidc --target=x86_64-apple-darwin $(EXTRA_CARGO_FLAGS)\n\tcd rustybits && MACOSX_DEPLOYMENT_TARGET=$(MACOS_VERSION_MIN) cargo build -p zeroidc --target=aarch64-apple-darwin $(EXTRA_CARGO_FLAGS)\n\tcd rustybits && lipo -create target/x86_64-apple-darwin/$(RUST_VARIANT)/libzeroidc.a target/aarch64-apple-darwin/$(RUST_VARIANT)/libzeroidc.a -output target/libzeroidc.a\n\ncentral-controller:\n\tmake ARCH_FLAGS=\"-arch x86_64\" ZT_CONTROLLER=1 one\n\nzerotier-idtool: one\n\nzerotier-cli: one\n\n$(ONE_OBJS): zeroidc\n\nlibzerotiercore.a:\t$(CORE_OBJS)\n\tar rcs libzerotiercore.a $(CORE_OBJS)\n\tranlib libzerotiercore.a\n\ncore: libzerotiercore.a\n\n#cli:\tFORCE\n#\t$(CXX) $(CXXFLAGS) -o zerotier cli/zerotier.cpp osdep/OSUtils.cpp node/InetAddress.cpp node/Utils.cpp node/Salsa20.cpp node/Identity.cpp node/SHA512.cpp node/C25519.cpp -lcurl\n#\t$(STRIP) zerotier\n\nselftest: $(CORE_OBJS) $(ONE_OBJS) selftest.o\n\t$(CXX) $(CXXFLAGS) -o zerotier-selftest selftest.o $(CORE_OBJS) $(ONE_OBJS) $(LIBS) rustybits/target/libzeroidc.a\n\t$(STRIP) zerotier-selftest\n\nzerotier-selftest: selftest\n\n# Make compile_commands.json for clangd editor extensions. Probably works on Linux too.\ncompile_commands: FORCE\n\tcompiledb make ZT_DEBUG=1\n\n# Requires Packages: http://s.sudre.free.fr/Software/Packages/about.html\nmac-dist-pkg: FORCE\n\tpackagesbuild \"ext/installfiles/mac/ZeroTier One.pkgproj\"\n\trm -f \"ZeroTier One Signed.pkg\"\n\t$(PRODUCTSIGN) --sign $(CODESIGN_INSTALLER_CERT) \"ZeroTier One.pkg\" \"ZeroTier One Signed.pkg\"\n\tif [ -f \"ZeroTier One Signed.pkg\" ]; then mv -f \"ZeroTier One Signed.pkg\" \"ZeroTier One.pkg\"; fi\n\trm -f zt1_update_$(ZT_BUILD_PLATFORM)_$(ZT_BUILD_ARCHITECTURE)_*\n\tcat ext/installfiles/mac-update/updater.tmpl.sh \"ZeroTier One.pkg\" >zt1_update_$(ZT_BUILD_PLATFORM)_$(ZT_BUILD_ARCHITECTURE)_$(ZT_VERSION_MAJOR).$(ZT_VERSION_MINOR).$(ZT_VERSION_REV)_$(ZT_VERSION_BUILD).exe\n\t$(NOTARIZE) submit --apple-id \"adam.ierymenko@gmail.com\" --team-id \"8ZD9JUCZ4V\" --wait \"ZeroTier One.pkg\"\n\techo '*** When Apple notifies that the app is notarized, run: xcrun stapler staple \"ZeroTier One.pkg\"'\n\n# For ZeroTier, Inc. to build official signed packages\nofficial: FORCE\n\tcd ../DesktopUI ; make ZT_OFFICIAL_RELEASE=1\n\tmake clean\n\tmake ZT_OFFICIAL_RELEASE=1 -j 8 one\n\tmake ZT_OFFICIAL_RELEASE=1 mac-dist-pkg\n\n_buildx:\n\t@echo \"docker buildx create\"\n\t# docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n\tdocker run --privileged --rm tonistiigi/binfmt --install all\n\t@echo docker buildx create --name multiarch --driver docker-container --use\n\t@echo docker buildx inspect --bootstrap\n\ncontroller-builder: _buildx FORCE\n\tdocker buildx build --platform linux/arm64,linux/amd64 --no-cache -t registry.zerotier.com/zerotier/ctlbuild:latest -f ext/central-controller-docker/Dockerfile.builder . --push\n\ncontroller-run: _buildx FORCE\n\tdocker buildx build --platform linux/arm64,linux/amd64 --no-cache -t registry.zerotier.com/zerotier-central/ctlrun:latest -f ext/central-controller-docker/Dockerfile.run_base . --push\n\ncentral-controller-docker: _buildx FORCE\n\tdocker buildx build --platform linux/arm64,linux/amd64 --no-cache -t registry.zerotier.com/zerotier-central/ztcentral-controller:${TIMESTAMP} -f ext/central-controller-docker/Dockerfile --build-arg git_branch=$(shell git name-rev --name-only HEAD) . --push\n\t@echo Image: registry.zerotier.com/zerotier-central/ztcentral-controller:${TIMESTAMP}\n\ndocker-release:\t_buildx\n\tdocker buildx build --platform linux/386,linux/amd64,linux/arm/v7,linux/arm64,linux/mips64le,linux/ppc64le,linux/s390x -t zerotier/zerotier:${RELEASE_DOCKER_TAG} -t zerotier/zerotier:latest --build-arg VERSION=${RELEASE_VERSION} -f Dockerfile.release . --push\n\t\nclean:\n\trm -rf MacEthernetTapAgent *.dSYM build-* *.a *.pkg *.dmg *.o node/*.o controller/*.o service/*.o osdep/*.o ext/http-parser/*.o $(CORE_OBJS) $(ONE_OBJS) zerotier-one zerotier-idtool zerotier-selftest zerotier-cli zerotier doc/node_modules zt1_update_$(ZT_BUILD_PLATFORM)_$(ZT_BUILD_ARCHITECTURE)_* rustybits/target/\n\ndistclean:\tclean\n\nrealclean:\tclean\n\nFORCE:\n"
        },
        {
          "name": "make-netbsd.mk",
          "type": "blob",
          "size": 1.77734375,
          "content": "CC=gcc\nCXX=g++\n\nINCLUDES=\nDEFS=\nLIBS=\n\ninclude objects.mk\nOBJS+=osdep/NetBSDEthernetTap.o ext/lz4/lz4.o ext/json-parser/json.o ext/http-parser/http_parser.o\n\n# \"make official\" is a shortcut for this\nifeq ($(ZT_OFFICIAL_RELEASE),1)\n\tDEFS+=-DZT_OFFICIAL_RELEASE\nendif\n\n# Build with ZT_ENABLE_CLUSTER=1 to build with cluster support\nifeq ($(ZT_ENABLE_CLUSTER),1)\n\tDEFS+=-DZT_ENABLE_CLUSTER\nendif\n\n# \"make debug\" is a shortcut for this\nifeq ($(ZT_DEBUG),1)\n\tDEFS+=-DZT_TRACE\n\tCFLAGS+=-Wall -g -pthread $(INCLUDES) $(DEFS)\n\tLDFLAGS+=\n\tSTRIP=echo\n\t# The following line enables optimization for the crypto code, since\n\t# C25519 in particular is almost UNUSABLE in heavy testing without it.\next/lz4/lz4.o node/Salsa20.o node/SHA512.o node/C25519.o node/Poly1305.o: CFLAGS = -Wall -O2 -g -pthread $(INCLUDES) $(DEFS)\nelse\n\tCFLAGS?=-O3 -fstack-protector\n\tCFLAGS+=-fPIE -fvisibility=hidden -fstack-protector -pthread $(INCLUDES) -DNDEBUG $(DEFS)\n\tLDFLAGS+=-pie -Wl,-z,relro,-z,now\n\tSTRIP=strip --strip-all\nendif\n\nCXXFLAGS+=$(CFLAGS) -fno-rtti -fpermissive\n\nall:\tone\n\none:\t$(OBJS) service/OneService.o one.o\n\t$(CXX) $(CXXFLAGS) $(LDFLAGS)  -o zerotier-one $(OBJS) service/OneService.o one.o $(LIBS)\n\t$(STRIP) zerotier-one\n\tln -sf zerotier-one zerotier-idtool\n\tln -sf zerotier-one zerotier-cli\n\nselftest:\t$(OBJS) selftest.o\n\t$(CXX) $(CXXFLAGS) $(LDFLAGS) -o zerotier-selftest selftest.o $(OBJS) $(LIBS)\n\t$(STRIP) zerotier-selftest\n\n# No installer on FreeBSD yet\n#installer: one FORCE\n#\t./buildinstaller.sh\n\nclean:\n\trm -rf *.o node/*.o controller/*.o osdep/*.o service/*.o ext/http-parser/*.o ext/lz4/*.o ext/json-parser/*.o build-* zerotier-one zerotier-idtool zerotier-selftest zerotier-cli ZeroTierOneInstaller-*\n\ndebug:\tFORCE\n\tmake -j 4 ZT_DEBUG=1\n\n#official: FORCE\n#\tmake -j 4 ZT_OFFICIAL_RELEASE=1\n#\t./buildinstaller.sh\n\nFORCE:\n"
        },
        {
          "name": "node",
          "type": "tree",
          "content": null
        },
        {
          "name": "objects.mk",
          "type": "blob",
          "size": 0.939453125,
          "content": "CORE_OBJS=\\\n\tnode/AES.o \\\n\tnode/AES_aesni.o \\\n\tnode/AES_armcrypto.o \\\n\tnode/C25519.o \\\n\tnode/Capability.o \\\n\tnode/CertificateOfMembership.o \\\n\tnode/CertificateOfOwnership.o \\\n\tnode/Identity.o \\\n\tnode/IncomingPacket.o \\\n\tnode/InetAddress.o \\\n\tnode/Membership.o \\\n\tnode/Metrics.o \\\n\tnode/Multicaster.o \\\n\tnode/Network.o \\\n\tnode/NetworkConfig.o \\\n\tnode/Node.o \\\n\tnode/OutboundMulticast.o \\\n\tnode/Packet.o \\\n\tnode/Path.o \\\n\tnode/Peer.o \\\n\tnode/Poly1305.o \\\n\tnode/Revocation.o \\\n\tnode/Salsa20.o \\\n\tnode/SelfAwareness.o \\\n\tnode/SHA512.o \\\n\tnode/Switch.o \\\n\tnode/Tag.o \\\n\tnode/Topology.o \\\n\tnode/Trace.o \\\n\tnode/Utils.o \\\n\tnode/Bond.o \\\n\tnode/PacketMultiplexer.o \\\n\tosdep/OSUtils.o\n\nONE_OBJS=\\\n\tcontroller/EmbeddedNetworkController.o \\\n\tcontroller/DBMirrorSet.o \\\n\tcontroller/DB.o \\\n\tcontroller/FileDB.o \\\n\tcontroller/LFDB.o \\\n\tcontroller/PostgreSQL.o \\\n\tosdep/EthernetTap.o \\\n\tosdep/ManagedRoute.o \\\n\tosdep/Http.o \\\n\tservice/SoftwareUpdater.o \\\n\tservice/OneService.o\n\n"
        },
        {
          "name": "one.cpp",
          "type": "blob",
          "size": 75.41796875,
          "content": "/*\n * Copyright (c)2020 ZeroTier, Inc.\n *\n * Use of this software is governed by the Business Source License included\n * in the LICENSE.TXT file in the project's root directory.\n *\n * Change Date: 2026-01-01\n *\n * On the date above, in accordance with the Business Source License, use\n * of this software will be governed by version 2.0 of the Apache License.\n */\n/****/\n\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <time.h>\n#include <errno.h>\n\n#include \"node/Constants.hpp\"\n\n#ifdef __WINDOWS__\n#include <winsock2.h>\n#include <windows.h>\n#include <tchar.h>\n#include <wchar.h>\n#include <lmcons.h>\n#include <newdev.h>\n#include <atlbase.h>\n#include <iphlpapi.h>\n#include <iomanip>\n#include <shlobj.h>\n#include \"osdep/WindowsEthernetTap.hpp\"\n#include \"windows/ZeroTierOne/ServiceInstaller.h\"\n#include \"windows/ZeroTierOne/ServiceBase.h\"\n#include \"windows/ZeroTierOne/ZeroTierOneService.h\"\n#else\n#include <unistd.h>\n#include <pwd.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <sys/uio.h>\n#include <dirent.h>\n#include <signal.h>\n#ifdef __LINUX__\n#include <sys/prctl.h>\n#include <sys/syscall.h>\n#include <sys/wait.h>\n#include <net/if.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <ifaddrs.h>\n#include <sys/ioctl.h>\n#ifndef ZT_NO_CAPABILITIES\n#include <linux/capability.h>\n#include <linux/securebits.h>\n#endif\n#endif\n#endif\n\n#include <string>\n#include <stdexcept>\n#include <iostream>\n#include <sstream>\n#include <algorithm>\n\n#include \"version.h\"\n#include \"include/ZeroTierOne.h\"\n\n#include \"node/Identity.hpp\"\n#include \"node/CertificateOfMembership.hpp\"\n#include \"node/Utils.hpp\"\n#include \"node/NetworkController.hpp\"\n#include \"node/Buffer.hpp\"\n#include \"node/World.hpp\"\n\n#include \"osdep/OSUtils.hpp\"\n#include \"osdep/Http.hpp\"\n#include \"osdep/Thread.hpp\"\n\n#include \"node/Bond.hpp\"\n\n#include \"service/OneService.hpp\"\n\n#include <nlohmann/json.hpp>\n\n#ifdef __APPLE__\n#include <SystemConfiguration/SystemConfiguration.h>\n#include <CoreServices/CoreServices.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <ifaddrs.h>\n#endif\n\n#define ZT_PID_PATH \"zerotier-one.pid\"\n\nusing namespace ZeroTier;\n\nstatic OneService *volatile zt1Service = (OneService *)0;\n\n#define PROGRAM_NAME \"ZeroTier One\"\n#define COPYRIGHT_NOTICE \"Copyright (c) 2020 ZeroTier, Inc.\"\n#define LICENSE_GRANT \"Licensed under the ZeroTier BSL 1.1 (see LICENSE.txt)\"\n\n/****************************************************************************/\n/* zerotier-cli personality                                                 */\n/****************************************************************************/\n\n// This is getting deprecated soon in favor of the stuff in cli/\n\nstatic void cliPrintHelp(const char *pn,FILE *out)\n{\n\tfprintf(out,\n\t\t\"%s version %d.%d.%d build %d (platform %d arch %d)\" ZT_EOL_S,\n\t\tPROGRAM_NAME,\n\t\tZEROTIER_ONE_VERSION_MAJOR, ZEROTIER_ONE_VERSION_MINOR, ZEROTIER_ONE_VERSION_REVISION, ZEROTIER_ONE_VERSION_BUILD,\n\t\tZT_BUILD_PLATFORM, ZT_BUILD_ARCHITECTURE);\n\tfprintf(out,\n\t\tCOPYRIGHT_NOTICE ZT_EOL_S\n\t\tLICENSE_GRANT ZT_EOL_S);\n\tfprintf(out,\"Usage: %s [-switches] <command/path> [<args>]\" ZT_EOL_S\"\" ZT_EOL_S,pn);\n\tfprintf(out,\"Available switches:\" ZT_EOL_S);\n\tfprintf(out,\"  -h                      - Display this help\" ZT_EOL_S);\n\tfprintf(out,\"  -v                      - Show version\" ZT_EOL_S);\n\tfprintf(out,\"  -j                      - Display full raw JSON output\" ZT_EOL_S);\n\tfprintf(out,\"  -D<path>                - ZeroTier home path for parameter auto-detect\" ZT_EOL_S);\n\tfprintf(out,\"  -p<port>                - HTTP port (default: auto)\" ZT_EOL_S);\n\tfprintf(out,\"  -T<token>               - Authentication token (default: auto)\" ZT_EOL_S);\n\tfprintf(out,ZT_EOL_S\"Available commands:\" ZT_EOL_S);\n\tfprintf(out,\"  info                    - Display status info\" ZT_EOL_S);\n\tfprintf(out,\"  listpeers               - List all peers\" ZT_EOL_S);\n\tfprintf(out,\"  peers                   - List all peers (prettier)\" ZT_EOL_S);\n\tfprintf(out,\"  listnetworks            - List all networks\" ZT_EOL_S);\n\tfprintf(out,\"  join <network ID>          - Join a network\" ZT_EOL_S);\n\tfprintf(out,\"  leave <network ID>         - Leave a network\" ZT_EOL_S);\n\tfprintf(out,\"  set <network ID> <setting> - Set a network setting\" ZT_EOL_S);\n\tfprintf(out,\"  get <network ID> <setting> - Get a network setting\" ZT_EOL_S);\n\tfprintf(out,\"  listmoons               - List moons (federated root sets)\" ZT_EOL_S);\n\tfprintf(out,\"  orbit <world ID> <seed> - Join a moon via any member root\" ZT_EOL_S);\n\tfprintf(out,\"  deorbit <world ID>      - Leave a moon\" ZT_EOL_S);\n\tfprintf(out,\"  dump                    - Debug settings dump for support\" ZT_EOL_S);\n\tfprintf(out,ZT_EOL_S\"Available settings:\" ZT_EOL_S);\n\tfprintf(out,\"  Settings to use with [get/set] may include property names from \" ZT_EOL_S);\n\tfprintf(out,\"  the JSON output of \\\"zerotier-cli -j listnetworks\\\". Additionally, \" ZT_EOL_S);\n\tfprintf(out,\"  (ip, ip4, ip6, ip6plane, and ip6prefix can be used). For instance:\" ZT_EOL_S);\n\tfprintf(out,\"  zerotier-cli get <network ID> ip6plane will return the 6PLANE address\" ZT_EOL_S);\n\tfprintf(out,\"  assigned to this node.\" ZT_EOL_S);\n}\n\nstatic std::string cliFixJsonCRs(const std::string &s)\n{\n\tstd::string r;\n\tfor(std::string::const_iterator c(s.begin());c!=s.end();++c) {\n\t\tif (*c == '\\n')\n\t\t\tr.append(ZT_EOL_S);\n\t\telse r.push_back(*c);\n\t}\n\treturn r;\n}\n\n#ifdef __WINDOWS__\nstatic int cli(int argc, _TCHAR* argv[])\n#else\nstatic int cli(int argc,char **argv)\n#endif\n{\n\tunsigned int port = 0;\n\tstd::string homeDir,command,arg1,arg2,arg3,arg4,authToken;\n\tstd::string ip(\"127.0.0.1\");\n\tbool json = false;\n\tfor(int i=1;i<argc;++i) {\n\t\tif (argv[i][0] == '-') {\n\t\t\tswitch(argv[i][1]) {\n\n\t\t\t\tcase 'q': // ignore -q used to invoke this personality\n\t\t\t\t\tif (argv[i][2]) {\n\t\t\t\t\t\tcliPrintHelp(argv[0],stdout);\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'j':\n\t\t\t\t\tif (argv[i][2]) {\n\t\t\t\t\t\tcliPrintHelp(argv[0],stdout);\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tjson = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'p':\n\t\t\t\t\tport = Utils::strToUInt(argv[i] + 2);\n\t\t\t\t\tif ((port > 0xffff)||(port == 0)) {\n\t\t\t\t\t\tcliPrintHelp(argv[0],stdout);\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'D':\n\t\t\t\t\tif (argv[i][2]) {\n\t\t\t\t\t\thomeDir = argv[i] + 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcliPrintHelp(argv[0],stdout);\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'H':\n\t\t\t\t\tif (argv[i][2]) {\n\t\t\t\t\t\tip = argv[i] + 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcliPrintHelp(argv[0],stdout);\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'T':\n\t\t\t\t\tif (argv[i][2]) {\n\t\t\t\t\t\tauthToken = argv[i] + 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcliPrintHelp(argv[0],stdout);\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'v':\n\t\t\t\t\tif (argv[i][2]) {\n\t\t\t\t\t\tcliPrintHelp(argv[0],stdout);\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tprintf(\"%d.%d.%d\" ZT_EOL_S,ZEROTIER_ONE_VERSION_MAJOR,ZEROTIER_ONE_VERSION_MINOR,ZEROTIER_ONE_VERSION_REVISION);\n\t\t\t\t\treturn 0;\n\n\t\t\t\tcase 'h':\n\t\t\t\tcase '?':\n\t\t\t\tdefault:\n\t\t\t\t\tcliPrintHelp(argv[0],stdout);\n\t\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arg1.length())\n\t\t\t\targ2 = argv[i];\n\t\t\telse if (command.length())\n\t\t\t\targ1 = argv[i];\n\t\t\telse command = argv[i];\n\t\t}\n\t}\n\tif (!homeDir.length())\n\t\thomeDir = OneService::platformDefaultHomePath();\n\n\t// TODO: cleanup this logic\n\tif ((!port)||(!authToken.length())) {\n\t\tif (!homeDir.length()) {\n\t\t\tfprintf(stderr,\"%s: missing port or authentication token and no home directory specified to auto-detect\" ZT_EOL_S,argv[0]);\n\t\t\treturn 2;\n\t\t}\n\n\t\tif (!port) {\n\t\t\tstd::string portStr;\n\t\t\tOSUtils::readFile((homeDir + ZT_PATH_SEPARATOR_S + \"zerotier-one.port\").c_str(),portStr);\n\t\t\tport = Utils::strToUInt(portStr.c_str());\n\t\t\tif ((port == 0)||(port > 0xffff)) {\n\t\t\t\tfprintf(stderr,\"%s: missing port and zerotier-one.port not found in %s\" ZT_EOL_S,argv[0],homeDir.c_str());\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t}\n\n\t\tif (!authToken.length()) {\n\t\t\tOSUtils::readFile((homeDir + ZT_PATH_SEPARATOR_S + \"authtoken.secret\").c_str(),authToken);\n#ifdef __UNIX_LIKE__\n\t\t\tif (!authToken.length()) {\n\t\t\t\tconst char *hd = getenv(\"HOME\");\n\t\t\t\tif (hd) {\n\t\t\t\t\tchar p[4096];\n#ifdef __APPLE__\n\t\t\t\t\tOSUtils::ztsnprintf(p,sizeof(p),\"%s/Library/Application Support/ZeroTier/One/authtoken.secret\",hd);\n#else\n\t\t\t\t\tOSUtils::ztsnprintf(p,sizeof(p),\"%s/.zeroTierOneAuthToken\",hd);\n#endif\n\t\t\t\t\tOSUtils::readFile(p,authToken);\n\t\t\t\t}\n\t\t\t}\n#endif\n\t\t\tif (!authToken.length()) {\n\t\t\t\tfprintf(stderr,\"%s: authtoken.secret not found or readable in %s (try again as root)\" ZT_EOL_S,argv[0],homeDir.c_str());\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t}\n\t}\n\n\tInetAddress addr;\n\t{\n\t\tchar addrtmp[256];\n\t\tOSUtils::ztsnprintf(addrtmp,sizeof(addrtmp),\"%s/%u\",ip.c_str(),port);\n\t\taddr = InetAddress(addrtmp);\n\t}\n\n\tstd::map<std::string,std::string> requestHeaders;\n\tstd::map<std::string,std::string> responseHeaders;\n\tstd::string responseBody;\n\n\trequestHeaders[\"X-ZT1-Auth\"] = authToken;\n\n\tif ((command.length() > 0)&&(command[0] == '/')) {\n\t\tunsigned int scode = Http::GET(\n\t\t\t1024 * 1024 * 16,\n\t\t\t60000,\n\t\t\t(const struct sockaddr *)&addr,\n\t\t\tcommand.c_str(),\n\t\t\trequestHeaders,\n\t\t\tresponseHeaders,\n\t\t\tresponseBody);\n\t\tif (scode == 200) {\n\t\t\tprintf(\"%s\", cliFixJsonCRs(responseBody).c_str());\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t} else if ((command == \"info\")||(command == \"status\")) {\n\t\tconst unsigned int scode = Http::GET(1024 * 1024 * 16,60000,(const struct sockaddr *)&addr,\"/status\",requestHeaders,responseHeaders,responseBody);\n\n\t\tif (scode == 0) {\n\t\t\tprintf(\"Error connecting to the ZeroTier service: %s\\n\\nPlease check that the service is running and that TCP port 9993 can be contacted via 127.0.0.1.\" ZT_EOL_S, responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\n\t\tnlohmann::json j;\n\t\ttry {\n\t\t\tj = OSUtils::jsonParse(responseBody);\n\t\t} catch (std::exception &exc) {\n\t\t\tprintf(\"%u %s invalid JSON response (%s)\" ZT_EOL_S,scode,command.c_str(),exc.what());\n\t\t\treturn 1;\n\t\t} catch ( ... ) {\n\t\t\tprintf(\"%u %s invalid JSON response (unknown exception)\" ZT_EOL_S,scode,command.c_str());\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (scode == 200) {\n\t\t\tif (json) {\n\t\t\t\tprintf(\"%s\" ZT_EOL_S,OSUtils::jsonDump(j).c_str());\n\t\t\t} else {\n\t\t\t\tif (j.is_object()) {\n\t\t\t\t\tprintf(\"200 info %s %s %s\" ZT_EOL_S,\n\t\t\t\t\t\tOSUtils::jsonString(j[\"address\"],\"-\").c_str(),\n\t\t\t\t\t\tOSUtils::jsonString(j[\"version\"],\"-\").c_str(),\n\t\t\t\t\t\t((j[\"tcpFallbackActive\"]) ? \"TUNNELED\" : ((j[\"online\"]) ? \"ONLINE\" : \"OFFLINE\")));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t} else if (command == \"listpeers\") {\n\t\tconst unsigned int scode = Http::GET(1024 * 1024 * 16,60000,(const struct sockaddr *)&addr,\"/peer\",requestHeaders,responseHeaders,responseBody);\n\n\t\tif (scode == 0) {\n\t\t\tprintf(\"Error connecting to the ZeroTier service: %s\\n\\nPlease check that the service is running and that TCP port 9993 can be contacted via 127.0.0.1.\" ZT_EOL_S, responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\n\t\tnlohmann::json j;\n\t\ttry {\n\t\t\tj = OSUtils::jsonParse(responseBody);\n\t\t} catch (std::exception &exc) {\n\t\t\tprintf(\"%u %s invalid JSON response (%s)\" ZT_EOL_S,scode,command.c_str(),exc.what());\n\t\t\treturn 1;\n\t\t} catch ( ... ) {\n\t\t\tprintf(\"%u %s invalid JSON response (unknown exception)\" ZT_EOL_S,scode,command.c_str());\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (scode == 200) {\n\t\t\tif (json) {\n\t\t\t\tprintf(\"%s\" ZT_EOL_S,OSUtils::jsonDump(j).c_str());\n\t\t\t} else {\n\t\t\t\tprintf(\"200 listpeers <ztaddr> <path> <latency> <version> <role>\" ZT_EOL_S);\n\t\t\t\tif (j.is_array()) {\n\t\t\t\t\tfor(unsigned long k=0;k<j.size();++k) {\n\t\t\t\t\t\tnlohmann::json &p = j[k];\n\t\t\t\t\t\tstd::string bestPath;\n\t\t\t\t\t\tnlohmann::json &paths = p[\"paths\"];\n\t\t\t\t\t\tif (paths.is_array()) {\n\t\t\t\t\t\t\tfor(unsigned long i=0;i<paths.size();++i) {\n\t\t\t\t\t\t\t\tnlohmann::json &path = paths[i];\n\t\t\t\t\t\t\t\tif (path[\"preferred\"]) {\n\t\t\t\t\t\t\t\t\tchar tmp[256];\n\t\t\t\t\t\t\t\t\tstd::string addr = path[\"address\"];\n\t\t\t\t\t\t\t\t\tconst int64_t now = OSUtils::now();\n\t\t\t\t\t\t\t\t\tint64_t lastSendDiff = (uint64_t)path[\"lastSend\"] ? now - (uint64_t)path[\"lastSend\"] : -1;\n\t\t\t\t\t\t\t\t\tint64_t lastReceiveDiff = (uint64_t)path[\"lastReceive\"] ? now - (uint64_t)path[\"lastReceive\"] : -1;\n\t\t\t\t\t\t\t\t\tOSUtils::ztsnprintf(tmp,sizeof(tmp),\"%s;%lld;%lld\",addr.c_str(),lastSendDiff,lastReceiveDiff);\n\t\t\t\t\t\t\t\t\tbestPath = tmp;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (bestPath.length() == 0) bestPath = \"-\";\n\t\t\t\t\t\tchar ver[128];\n\t\t\t\t\t\tint64_t vmaj = p[\"versionMajor\"];\n\t\t\t\t\t\tint64_t vmin = p[\"versionMinor\"];\n\t\t\t\t\t\tint64_t vrev = p[\"versionRev\"];\n\t\t\t\t\t\tif (vmaj >= 0) {\n\t\t\t\t\t\t\tOSUtils::ztsnprintf(ver,sizeof(ver),\"%lld.%lld.%lld\",vmaj,vmin,vrev);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tver[0] = '-';\n\t\t\t\t\t\t\tver[1] = (char)0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprintf(\"200 listpeers %s %s %d %s %s\" ZT_EOL_S,\n\t\t\t\t\t\t\tOSUtils::jsonString(p[\"address\"],\"-\").c_str(),\n\t\t\t\t\t\t\tbestPath.c_str(),\n\t\t\t\t\t\t\t(int)OSUtils::jsonInt(p[\"latency\"],0),\n\t\t\t\t\t\t\tver,\n\t\t\t\t\t\t\tOSUtils::jsonString(p[\"role\"],\"-\").c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t} else if (command == \"peers\") {\n\t\tconst unsigned int scode = Http::GET(1024 * 1024 * 16,60000,(const struct sockaddr *)&addr,\"/peer\",requestHeaders,responseHeaders,responseBody);\n\n\t\tif (scode == 0) {\n\t\t\tprintf(\"Error connecting to the ZeroTier service: %s\\n\\nPlease check that the service is running and that TCP port 9993 can be contacted via 127.0.0.1.\" ZT_EOL_S, responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\n\t\tnlohmann::json j;\n\t\ttry {\n\t\t\tj = OSUtils::jsonParse(responseBody);\n\t\t} catch (std::exception &exc) {\n\t\t\tprintf(\"%u %s invalid JSON response (%s)\" ZT_EOL_S,scode,command.c_str(),exc.what());\n\t\t\treturn 1;\n\t\t} catch ( ... ) {\n\t\t\tprintf(\"%u %s invalid JSON response (unknown exception)\" ZT_EOL_S,scode,command.c_str());\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (scode == 200) {\n\t\t\tif (json) {\n\t\t\t\tprintf(\"%s\" ZT_EOL_S,OSUtils::jsonDump(j).c_str());\n\t\t\t} else {\n\t\t\t\tbool anyTunneled = false;\n\t\t\t\tprintf(\"200 peers\\n<ztaddr>   <ver>  <role> <lat> <link>   <lastTX> <lastRX> <path>\" ZT_EOL_S);\n\t\t\t\tif (j.is_array()) {\n\t\t\t\t\tfor(unsigned long k=0;k<j.size();++k) {\n\t\t\t\t\t\tnlohmann::json &p = j[k];\n\t\t\t\t\t\tstd::string bestPath;\n\t\t\t\t\t\tnlohmann::json &paths = p[\"paths\"];\n\t\t\t\t\t\tif (p[\"tunneled\"]) {\n\t\t\t\t\t\t\tanyTunneled = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (paths.is_array()) {\n\t\t\t\t\t\t\tfor(unsigned long i=0;i<paths.size();++i) {\n\t\t\t\t\t\t\t\tnlohmann::json &path = paths[i];\n\t\t\t\t\t\t\t\tif (path[\"preferred\"]) {\n\t\t\t\t\t\t\t\t\tchar tmp[256];\n\t\t\t\t\t\t\t\t\tstd::string addr = path[\"address\"];\n\t\t\t\t\t\t\t\t\tconst int64_t now = OSUtils::now();\n\t\t\t\t\t\t\t\t\tint64_t lastSendDiff = (uint64_t)path[\"lastSend\"] ? now - (uint64_t)path[\"lastSend\"] : -1;\n\t\t\t\t\t\t\t\t\tint64_t lastReceiveDiff = (uint64_t)path[\"lastReceive\"] ? now - (uint64_t)path[\"lastReceive\"] : -1;\n\t\t\t\t\t\t\t\t\tOSUtils::ztsnprintf(tmp,sizeof(tmp),\"%-8lld %-8lld %s\",lastSendDiff,lastReceiveDiff,addr.c_str());\n\t\t\t\t\t\t\t\t\tif (p[\"tunneled\"]) {\n\t\t\t\t\t\t\t\t\t\tbestPath = std::string(\"RELAY \") + tmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\tbestPath = std::string(\"DIRECT   \") + tmp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (bestPath.length() == 0) {\n\t\t\t\t\t\t\tbestPath = \"RELAY\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchar ver[128];\n\t\t\t\t\t\tint64_t vmaj = p[\"versionMajor\"];\n\t\t\t\t\t\tint64_t vmin = p[\"versionMinor\"];\n\t\t\t\t\t\tint64_t vrev = p[\"versionRev\"];\n\t\t\t\t\t\tif (vmaj >= 0) {\n\t\t\t\t\t\t\tOSUtils::ztsnprintf(ver,sizeof(ver),\"%lld.%lld.%lld\",vmaj,vmin,vrev);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tver[0] = '-';\n\t\t\t\t\t\t\tver[1] = (char)0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprintf(\"%s %-6s %-6s %5d %s\" ZT_EOL_S,\n\t\t\t\t\t\t\tOSUtils::jsonString(p[\"address\"],\"-\").c_str(),\n\t\t\t\t\t\t\tver,\n\t\t\t\t\t\t\tOSUtils::jsonString(p[\"role\"],\"-\").c_str(),\n\t\t\t\t\t\t\t(int)OSUtils::jsonInt(p[\"latency\"],0),\n\t\t\t\t\t\t\tbestPath.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (anyTunneled) {\n\t\t\t\t\tprintf(\"NOTE: Currently tunneling through a TCP relay. Ensure that UDP is not blocked.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t} else if (command == \"bond\") {\n\t\t/* zerotier-cli bond <cmd> */\n\t\tif (arg1.empty()) {\n\t\t\tprintf(\"(bond) command is missing required arguments\" ZT_EOL_S);\n\t\t\treturn 2;\n\t\t}\n\t\t/* zerotier-cli bond list */\n\t\tif (arg1 == \"list\") {\n\t\t\tconst unsigned int scode = Http::GET(1024 * 1024 * 16,60000,(const struct sockaddr *)&addr,\"/peer\",requestHeaders,responseHeaders,responseBody);\n\t\t\tif (scode == 0) {\n\t\t\t\tprintf(\"Error connecting to the ZeroTier service: %s\\n\\nPlease check that the service is running and that TCP port 9993 can be contacted via 127.0.0.1.\" ZT_EOL_S, responseBody.c_str());\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tnlohmann::json j;\n\t\t\ttry {\n\t\t\t\tj = OSUtils::jsonParse(responseBody);\n\t\t\t} catch (std::exception &exc) {\n\t\t\t\tprintf(\"%u %s invalid JSON response (%s)\" ZT_EOL_S,scode,command.c_str(),exc.what());\n\t\t\t\treturn 1;\n\t\t\t} catch ( ... ) {\n\t\t\t\tprintf(\"%u %s invalid JSON response (unknown exception)\" ZT_EOL_S,scode,command.c_str());\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (scode == 200) {\n\t\t\t\tif (json) {\n\t\t\t\t\tprintf(\"%s\" ZT_EOL_S,OSUtils::jsonDump(j).c_str());\n\t\t\t\t} else {\n\t\t\t\t\tbool bFoundBond = false;\n\t\t\t\t\tprintf(\"    <peer>                        <bondtype>     <links>\" ZT_EOL_S);\n\t\t\t\t\tif (j.is_array()) {\n\t\t\t\t\t\tfor(unsigned long k=0;k<j.size();++k) {\n\t\t\t\t\t\t\tnlohmann::json &p = j[k];\n\t\t\t\t\t\t\tbool isBonded = p[\"isBonded\"];\n\t\t\t\t\t\t\tif (isBonded) {\n\t\t\t\t\t\t\t\tint8_t bondingPolicyCode = p[\"bondingPolicyCode\"];\n\t\t\t\t\t\t\t\tint8_t numAliveLinks = p[\"numAliveLinks\"];\n\t\t\t\t\t\t\t\tint8_t numTotalLinks = p[\"numTotalLinks\"];\n\t\t\t\t\t\t\t\tbFoundBond = true;\n\t\t\t\t\t\t\t\tstd::string policyStr = \"none\";\n\t\t\t\t\t\t\t\tif (bondingPolicyCode >= ZT_BOND_POLICY_NONE && bondingPolicyCode <= ZT_BOND_POLICY_BALANCE_AWARE) {\n\t\t\t\t\t\t\t\t\tpolicyStr = Bond::getPolicyStrByCode(bondingPolicyCode);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tprintf(\"%10s  %32s         %d/%d\" ZT_EOL_S,\n\t\t\t\t\t\t\t\t\tOSUtils::jsonString(p [\"address\"],\"-\").c_str(),\n\t\t\t\t\t\t\t\t\tpolicyStr.c_str(),\n\t\t\t\t\t\t\t\t\tnumAliveLinks,\n\t\t\t\t\t\t\t\t\tnumTotalLinks);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!bFoundBond) {\n\t\t\t\t\t\tprintf(\"      NONE\\t\\t\\t\\tNONE\\t    NONE       NONE\" ZT_EOL_S);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\telse if (arg1 == \"setmtu\") { /* zerotier-cli bond setmtu <mtu> <iface> <ip> */\n\t\t\trequestHeaders[\"Content-Type\"] = \"application/json\";\n\t\t\trequestHeaders[\"Content-Length\"] = \"2\";\n\t\t\tif (argc == 8) {\n\t\t\t\targ2 = argv[5];\n\t\t\t\targ3 = argv[6];\n\t\t\t\targ4 = argv[7];\n\t\t\t}\n\t\t\tunsigned int scode = Http::POST(\n\t\t\t\t1024 * 1024 * 16,\n\t\t\t\t60000,\n\t\t\t\t(const struct sockaddr *)&addr,\n\t\t\t\t(std::string(\"/bond/\") + arg1 + \"/\" + arg2 + \"/\" + arg3 + \"/\" + arg4).c_str(),\n\t\t\t\trequestHeaders,\n\t\t\t\t\"{}\",\n\t\t\t\t2,\n\t\t\t\tresponseHeaders,\n\t\t\t\tresponseBody);\n\t\t\tif (scode == 200) {\n\t\t\t\tprintf(\"200 setmtu OK\" ZT_EOL_S);\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\tprintf(\"%d Failed to set MTU: %s\" ZT_EOL_S, scode, responseBody.c_str());\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\telse if (arg1.length() == 10) {\n\t\t\tif (arg2 == \"rotate\") { /* zerotier-cli bond <peerId> rotate */\n\t\t\t\trequestHeaders[\"Content-Type\"] = \"application/json\";\n\t\t\t\trequestHeaders[\"Content-Length\"] = \"2\";\n\t\t\t\tunsigned int scode = Http::POST(\n\t\t\t\t\t1024 * 1024 * 16,\n\t\t\t\t\t60000,\n\t\t\t\t\t(const struct sockaddr *)&addr,\n\t\t\t\t\t(std::string(\"/bond/\") + arg2 + \"/\" + arg1).c_str(),\n\t\t\t\t\trequestHeaders,\n\t\t\t\t\t\"{}\",\n\t\t\t\t\t2,\n\t\t\t\t\tresponseHeaders,\n\t\t\t\t\tresponseBody);\n\t\t\t\tif (scode == 200) {\n\t\t\t\t\tif (json) {\n\t\t\t\t\t\tprintf(\"%s\",cliFixJsonCRs(responseBody).c_str());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprintf(\"200 rotate OK\" ZT_EOL_S);\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t} else {\n\t\t\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (arg2 == \"show\") {\n\t\t\t\t//fprintf(stderr, \"zerotier-cli bond <peerId> show\\n\");\n\t\t\t\tconst unsigned int scode = Http::GET(\n\t\t\t\t\t1024 * 1024 * 16,60000,\n\t\t\t\t\t(const struct sockaddr *)&addr,(std::string(\"/bond/\") + arg2 + \"/\" + arg1).c_str(),\n\t\t\t\t\trequestHeaders,\n\t\t\t\t\tresponseHeaders,\n\t\t\t\t\tresponseBody);\n\t\t\t\tif (scode == 0) {\n\t\t\t\t\tprintf(\"Error connecting to the ZeroTier service: %s\\n\\nPlease check that the service is running and that TCP port 9993 can be contacted via 127.0.0.1.\" ZT_EOL_S, responseBody.c_str());\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tnlohmann::json j;\n\t\t\t\ttry {\n\t\t\t\t\tj = OSUtils::jsonParse(responseBody);\n\t\t\t\t} catch (std::exception &exc) {\n\t\t\t\t\tprintf(\"%u %s invalid JSON response (%s)\" ZT_EOL_S,scode,command.c_str(),exc.what());\n\t\t\t\t\treturn 1;\n\t\t\t\t} catch ( ... ) {\n\t\t\t\t\tprintf(\"%u %s invalid JSON response (unknown exception)\" ZT_EOL_S,scode,command.c_str());\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (scode == 200) {\n\t\t\t\t\tif (json) {\n\t\t\t\t\t\tprintf(\"%s\" ZT_EOL_S,OSUtils::jsonDump(j).c_str());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tint numAliveLinks = OSUtils::jsonInt(j[\"numAliveLinks\"],0);\n\t\t\t\t\t\tint numTotalLinks = OSUtils::jsonInt(j[\"numTotalLinks\"],0);\n\t\t\t\t\t\tprintf(\"Peer                   : %s\\n\", arg1.c_str());\n\t\t\t\t\t\tprintf(\"Bond                   : %s\\n\", OSUtils::jsonString(j[\"bondingPolicyStr\"],\"-\").c_str());\n\t\t\t\t\t\tprintf(\"Link Select Method     : %d\\n\", (int)OSUtils::jsonInt(j[\"linkSelectMethod\"],0));\n\t\t\t\t\t\tprintf(\"Links                  : %d/%d\\n\", numAliveLinks, numTotalLinks);\n\t\t\t\t\t\tprintf(\"Failover Interval (ms) : %d\\n\", (int)OSUtils::jsonInt(j[\"failoverInterval\"],0));\n\t\t\t\t\t\tprintf(\"Up Delay (ms)          : %d\\n\", (int)OSUtils::jsonInt(j[\"upDelay\"],0));\n\t\t\t\t\t\tprintf(\"Down Delay (ms)        : %d\\n\", (int)OSUtils::jsonInt(j[\"downDelay\"],0));\n\t\t\t\t\t\tprintf(\"Packets Per Link       : %d\\n\", (int)OSUtils::jsonInt(j[\"packetsPerLink\"],0));\n\t\t\t\t\t\tnlohmann::json &p = j[\"paths\"];\n\t\t\t\t\t\tif (p.is_array()) {\n\t\t\t\t\t\t\tprintf(\"\\nidx\"\n\t\t\t\t\t\t\t\"                  interface\"\n\t\t\t\t\t\t\t\"                                  \"\n\t\t\t\t\t\t\t\"path               socket             local port\\n\");\n\t\t\t\t\t\t\tfor(int i=0; i<120; i++) { printf(\"-\"); }\n\t\t\t\t\t\t\tprintf(\"\\n\");\n\t\t\t\t\t\t\tfor (int i=0; i<p.size(); i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprintf(\"%2d: %26s %51s %.16llx %12d\\n\",\n\t\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\t\tOSUtils::jsonString(p[i][\"ifname\"],\"-\").c_str(),\n\t\t\t\t\t\t\t\t\tOSUtils::jsonString(p[i][\"address\"],\"-\").c_str(),\n\t\t\t\t\t\t\t\t\t(unsigned long long)OSUtils::jsonInt(p[i][\"localSocket\"],0),\n\t\t\t\t\t\t\t\t\t(uint16_t)OSUtils::jsonInt(p[i][\"localPort\"],0)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprintf(\"\\nidx     lat      pdv    \"\n\t\t\t\t\t\t\t\"capacity    qual      \"\n\t\t\t\t\t\t\t\"rx_age      tx_age  eligible  bonded   flows\\n\");\n\t\t\t\t\t\t\tfor(int i=0; i<120; i++) { printf(\"-\"); }\n\t\t\t\t\t\t\tprintf(\"\\n\");\n\t\t\t\t\t\t\tfor (int i=0; i<p.size(); i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprintf(\"%2d: %8.2f %8.2f %10d %7.4f %11d %11d %9d %7d %7d\\n\",\n\t\t\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\t\t\tOSUtils::jsonDouble(p[i][\"latencyMean\"], 0),\n\t\t\t\t\t\t\t\t\tOSUtils::jsonDouble(p[i][\"latencyVariance\"], 0),\n\t\t\t\t\t\t\t\t\t(int)OSUtils::jsonInt(p[i][\"givenLinkSpeed\"], 0),\n\t\t\t\t\t\t\t\t\tOSUtils::jsonDouble(p[i][\"relativeQuality\"], 0),\n\t\t\t\t\t\t\t\t\t(int)OSUtils::jsonInt(p[i][\"lastInAge\"], 0),\n\t\t\t\t\t\t\t\t\t(int)OSUtils::jsonInt(p[i][\"lastOutAge\"], 0),\n\t\t\t\t\t\t\t\t\t(int)OSUtils::jsonInt(p[i][\"eligible\"],0),\n\t\t\t\t\t\t\t\t\t(int)OSUtils::jsonInt(p[i][\"bonded\"],0),\n\t\t\t\t\t\t\t\t\t(int)OSUtils::jsonInt(p[i][\"assignedFlowCount\"],0));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t} else {\n\t\t\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 2;\n\t\t\t}\n\t\t}\n\n\t\t/* zerotier-cli bond command was malformed in some way */\n\t\tprintf(\"(bond) command is missing required arguments\" ZT_EOL_S);\n\t\treturn 2;\n\t} else if (command == \"listbonds\") {\n\t\tconst unsigned int scode = Http::GET(1024 * 1024 * 16,60000,(const struct sockaddr *)&addr,\"/peer\",requestHeaders,responseHeaders,responseBody);\n\n\t\tif (scode == 0) {\n\t\t\tprintf(\"Error connecting to the ZeroTier service: %s\\n\\nPlease check that the service is running and that TCP port 9993 can be contacted via 127.0.0.1.\" ZT_EOL_S, responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\n\t\tnlohmann::json j;\n\t\ttry {\n\t\t\tj = OSUtils::jsonParse(responseBody);\n\t\t} catch (std::exception &exc) {\n\t\t\tprintf(\"%u %s invalid JSON response (%s)\" ZT_EOL_S,scode,command.c_str(),exc.what());\n\t\t\treturn 1;\n\t\t} catch ( ... ) {\n\t\t\tprintf(\"%u %s invalid JSON response (unknown exception)\" ZT_EOL_S,scode,command.c_str());\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (scode == 200) {\n\t\t\tif (json) {\n\t\t\t\tprintf(\"%s\" ZT_EOL_S,OSUtils::jsonDump(j).c_str());\n\t\t\t} else {\n\t\t\t\tbool bFoundBond = false;\n\t\t\t\tprintf(\"    <peer>                        <bondtype>     <links>\" ZT_EOL_S);\n\t\t\t\tif (j.is_array()) {\n\t\t\t\t\tfor(unsigned long k=0;k<j.size();++k) {\n\t\t\t\t\t\tnlohmann::json &p = j[k];\n\t\t\t\t\t\tbool isBonded = p[\"isBonded\"];\n\t\t\t\t\t\tif (isBonded) {\n\t\t\t\t\t\t\tint8_t bondingPolicyCode = p[\"bondingPolicyCode\"];\n\t\t\t\t\t\t\tint8_t numAliveLinks = p[\"numAliveLinks\"];\n\t\t\t\t\t\t\tint8_t numTotalLinks = p[\"numTotalLinks\"];\n\t\t\t\t\t\t\tbFoundBond = true;\n\t\t\t\t\t\t\tstd::string policyStr = \"none\";\n\t\t\t\t\t\t\tif (bondingPolicyCode >= ZT_BOND_POLICY_NONE && bondingPolicyCode <= ZT_BOND_POLICY_BALANCE_AWARE) {\n\t\t\t\t\t\t\t\tpolicyStr = Bond::getPolicyStrByCode(bondingPolicyCode);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprintf(\"%10s  %32s         %d/%d\" ZT_EOL_S,\n\t\t\t\t\t\t\t\tOSUtils::jsonString(p[\"address\"],\"-\").c_str(),\n\t\t\t\t\t\t\t\tpolicyStr.c_str(),\n\t\t\t\t\t\t\t\tnumAliveLinks,\n\t\t\t\t\t\t\t\tnumTotalLinks);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!bFoundBond) {\n\t\t\t\t\tprintf(\"      NONE\\t\\t\\t\\tNONE\\t    NONE       NONE\" ZT_EOL_S);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t} else if (command == \"listnetworks\") {\n\t\tconst unsigned int scode = Http::GET(1024 * 1024 * 16,60000,(const struct sockaddr *)&addr,\"/network\",requestHeaders,responseHeaders,responseBody);\n\n\t\tif (scode == 0) {\n\t\t\tprintf(\"Error connecting to the ZeroTier service: %s\\n\\nPlease check that the service is running and that TCP port 9993 can be contacted via 127.0.0.1.\" ZT_EOL_S, responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\n\t\tnlohmann::json j;\n\t\ttry {\n\t\t\tj = OSUtils::jsonParse(responseBody);\n\t\t} catch (std::exception &exc) {\n\t\t\tprintf(\"%u %s invalid JSON response (%s)\" ZT_EOL_S,scode,command.c_str(),exc.what());\n\t\t\treturn 1;\n\t\t} catch ( ... ) {\n\t\t\tprintf(\"%u %s invalid JSON response (unknown exception)\" ZT_EOL_S,scode,command.c_str());\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (scode == 200) {\n\t\t\tif (json) {\n\t\t\t\tprintf(\"%s\" ZT_EOL_S,OSUtils::jsonDump(j).c_str());\n\t\t\t} else {\n\t\t\t\tprintf(\"200 listnetworks <nwid> <name> <mac> <status> <type> <dev> <ZT assigned ips>\" ZT_EOL_S);\n\t\t\t\tif (j.is_array()) {\n\t\t\t\t\tfor(unsigned long i=0;i<j.size();++i) {\n\t\t\t\t\t\tnlohmann::json &n = j[i];\n\t\t\t\t\t\tif (n.is_object()) {\n\t\t\t\t\t\t\tstd::string aa;\n\t\t\t\t\t\t\tnlohmann::json &assignedAddresses = n[\"assignedAddresses\"];\n\t\t\t\t\t\t\tif (assignedAddresses.is_array()) {\n\t\t\t\t\t\t\t\tfor(unsigned long j=0;j<assignedAddresses.size();++j) {\n\t\t\t\t\t\t\t\t\tnlohmann::json &addr = assignedAddresses[j];\n\t\t\t\t\t\t\t\t\tif (addr.is_string()) {\n\t\t\t\t\t\t\t\t\t\tif (aa.length() > 0) aa.push_back(',');\n\t\t\t\t\t\t\t\t\t\taa.append(addr.get<std::string>());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (aa.length() == 0) aa = \"-\";\n\t\t\t\t\t\t\tconst std::string status = OSUtils::jsonString(n[\"status\"],\"-\");\n\t\t\t\t\t\t\tprintf(\"200 listnetworks %s %s %s %s %s %s %s\" ZT_EOL_S,\n\t\t\t\t\t\t\t\tOSUtils::jsonString(n[\"nwid\"],\"-\").c_str(),\n\t\t\t\t\t\t\t\tOSUtils::jsonString(n[\"name\"],\"-\").c_str(),\n\t\t\t\t\t\t\t\tOSUtils::jsonString(n[\"mac\"],\"-\").c_str(),\n\t\t\t\t\t\t\t\tstatus.c_str(),\n\t\t\t\t\t\t\t\tOSUtils::jsonString(n[\"type\"],\"-\").c_str(),\n\t\t\t\t\t\t\t\tOSUtils::jsonString(n[\"portDeviceName\"],\"-\").c_str(),\n\t\t\t\t\t\t\t\taa.c_str());\n\t\t\t\t\t\t\tif (OSUtils::jsonBool(n[\"ssoEnabled\"], false)) {\n\t\t\t\t\t\t\t\tuint64_t authenticationExpiryTime = n[\"authenticationExpiryTime\"];\n\t\t\t\t\t\t\t\tif (status == \"AUTHENTICATION_REQUIRED\") {\n\t\t\t\t\t\t\t\t\tprintf(\"    AUTH EXPIRED, URL: %s\" ZT_EOL_S, OSUtils::jsonString(n[\"authenticationURL\"], \"(null)\").c_str());\n\t\t\t\t\t\t\t\t} else if (status == \"OK\") {\n\t\t\t\t\t\t\t\t\tint64_t expiresIn = ((int64_t)authenticationExpiryTime - OSUtils::now()) / 1000LL;\n\t\t\t\t\t\t\t\t\tif (expiresIn >= 0) {\n\t\t\t\t\t\t\t\t\t\tprintf(\"    AUTH OK, expires in: %lld seconds\" ZT_EOL_S, expiresIn);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t} else if (command == \"join\") {\n\t\tif (arg1.length() != 16) {\n\t\t\tprintf(\"invalid network id\" ZT_EOL_S);\n\t\t\treturn 2;\n\t\t}\n\t\trequestHeaders[\"Content-Type\"] = \"application/json\";\n\t\trequestHeaders[\"Content-Length\"] = \"2\";\n\t\tunsigned int scode = Http::POST(\n\t\t\t1024 * 1024 * 16,\n\t\t\t60000,\n\t\t\t(const struct sockaddr *)&addr,\n\t\t\t(std::string(\"/network/\") + arg1).c_str(),\n\t\t\trequestHeaders,\n\t\t\t\"{}\",\n\t\t\t2,\n\t\t\tresponseHeaders,\n\t\t\tresponseBody);\n\t\tif (scode == 200) {\n\t\t\tif (json) {\n\t\t\t\tprintf(\"%s\",cliFixJsonCRs(responseBody).c_str());\n\t\t\t} else {\n\t\t\t\tprintf(\"200 join OK\" ZT_EOL_S);\n\t\t\t}\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t} else if (command == \"leave\") {\n\t\tif (arg1.length() != 16) {\n\t\t\tprintf(\"invalid network id\" ZT_EOL_S);\n\t\t\treturn 2;\n\t\t}\n\t\tunsigned int scode = Http::DEL(\n\t\t\t1024 * 1024 * 16,\n\t\t\t60000,\n\t\t\t(const struct sockaddr *)&addr,\n\t\t\t(std::string(\"/network/\") + arg1).c_str(),\n\t\t\trequestHeaders,\n\t\t\tresponseHeaders,\n\t\t\tresponseBody);\n\t\tif (scode == 200) {\n\t\t\tif (json) {\n\t\t\t\tprintf(\"%s\",cliFixJsonCRs(responseBody).c_str());\n\t\t\t} else {\n\t\t\t\tprintf(\"200 leave OK\" ZT_EOL_S);\n\t\t\t}\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t} else if (command == \"listmoons\") {\n\t\tconst unsigned int scode = Http::GET(1024 * 1024 * 16,60000,(const struct sockaddr *)&addr,\"/moon\",requestHeaders,responseHeaders,responseBody);\n\n\t\tif (scode == 0) {\n\t\t\tprintf(\"Error connecting to the ZeroTier service: %s\\n\\nPlease check that the service is running and that TCP port 9993 can be contacted via 127.0.0.1.\" ZT_EOL_S, responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\n\t\tnlohmann::json j;\n\t\ttry {\n\t\t\tj = OSUtils::jsonParse(responseBody);\n\t\t} catch (std::exception &exc) {\n\t\t\tprintf(\"%u %s invalid JSON response (%s)\" ZT_EOL_S,scode,command.c_str(),exc.what());\n\t\t\treturn 1;\n\t\t} catch ( ... ) {\n\t\t\tprintf(\"%u %s invalid JSON response (unknown exception)\" ZT_EOL_S,scode,command.c_str());\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (scode == 200) {\n\t\t\tprintf(\"%s\" ZT_EOL_S,OSUtils::jsonDump(j).c_str());\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t} else if (command == \"orbit\") {\n\t\tconst uint64_t worldId = Utils::hexStrToU64(arg1.c_str());\n\t\tconst uint64_t seed = Utils::hexStrToU64(arg2.c_str());\n\t\tif ((worldId)&&(seed)) {\n\t\t\tchar jsons[1024];\n\t\t\tOSUtils::ztsnprintf(jsons,sizeof(jsons),\"{\\\"seed\\\":\\\"%s\\\"}\",arg2.c_str());\n\t\t\tchar cl[128];\n\t\t\tOSUtils::ztsnprintf(cl,sizeof(cl),\"%u\",(unsigned int)strlen(jsons));\n\t\t\trequestHeaders[\"Content-Type\"] = \"application/json\";\n\t\t\trequestHeaders[\"Content-Length\"] = cl;\n\t\t\tunsigned int scode = Http::POST(\n\t\t\t\t1024 * 1024 * 16,\n\t\t\t\t60000,\n\t\t\t\t(const struct sockaddr *)&addr,\n\t\t\t\t(std::string(\"/moon/\") + arg1).c_str(),\n\t\t\t\trequestHeaders,\n\t\t\t\tjsons,\n\t\t\t\t(unsigned long)strlen(jsons),\n\t\t\t\tresponseHeaders,\n\t\t\t\tresponseBody);\n\t\t\tif (scode == 200) {\n\t\t\t\tprintf(\"200 orbit OK\" ZT_EOL_S);\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t} else if (command == \"deorbit\") {\n\t\tunsigned int scode = Http::DEL(\n\t\t\t1024 * 1024 * 16,\n\t\t\t60000,\n\t\t\t(const struct sockaddr *)&addr,\n\t\t\t(std::string(\"/moon/\") + arg1).c_str(),\n\t\t\trequestHeaders,\n\t\t\tresponseHeaders,\n\t\t\tresponseBody);\n\t\tif (scode == 200) {\n\t\t\tif (json) {\n\t\t\t\tprintf(\"%s\",cliFixJsonCRs(responseBody).c_str());\n\t\t\t} else {\n\t\t\t\tprintf(\"200 deorbit OK\" ZT_EOL_S);\n\t\t\t}\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t} else if (command == \"set\") {\n\t\tif (arg1.length() != 16) {\n\t\t\tfprintf(stderr,\"invalid format: must be a 16-digit (network) ID\\n\");\n\t\t\treturn 2;\n\t\t}\n\t\tif (!arg2.length()) {\n\t\t\tfprintf(stderr,\"invalid format: include a property name to set\\n\");\n\t\t\treturn 2;\n\t\t}\n\t\tstd::size_t eqidx = arg2.find('=');\n\t\tif (eqidx != std::string::npos) {\n\t\t\tif ((arg2.substr(0,eqidx) == \"allowManaged\")||(arg2.substr(0,eqidx) == \"allowGlobal\")||(arg2.substr(0,eqidx) == \"allowDefault\")||(arg2.substr(0,eqidx) == \"allowDNS\")) {\n\t\t\t\tchar jsons[1024];\n\t\t\t\tOSUtils::ztsnprintf(jsons,sizeof(jsons),\"{\\\"%s\\\":%s}\",\n\t\t\t\t\targ2.substr(0,eqidx).c_str(),\n\t\t\t\t\t(((arg2.substr(eqidx,2) == \"=t\")||(arg2.substr(eqidx,2) == \"=1\")) ? \"true\" : \"false\"));\n\t\t\t\tchar cl[128];\n\t\t\t\tOSUtils::ztsnprintf(cl,sizeof(cl),\"%u\",(unsigned int)strlen(jsons));\n\t\t\t\trequestHeaders[\"Content-Type\"] = \"application/json\";\n\t\t\t\trequestHeaders[\"Content-Length\"] = cl;\n\t\t\t\tunsigned int scode = Http::POST(\n\t\t\t\t\t1024 * 1024 * 16,\n\t\t\t\t\t60000,\n\t\t\t\t\t(const struct sockaddr *)&addr,\n\t\t\t\t\t(std::string(\"/network/\") + arg1).c_str(),\n\t\t\t\t\trequestHeaders,\n\t\t\t\t\tjsons,\n\t\t\t\t\t(unsigned long)strlen(jsons),\n\t\t\t\t\tresponseHeaders,\n\t\t\t\t\tresponseBody);\n\t\t\t\tif (scode == 200) {\n\t\t\t\t\tprintf(\"%s\",cliFixJsonCRs(responseBody).c_str());\n\t\t\t\t\treturn 0;\n\t\t\t\t} else {\n\t\t\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tcliPrintHelp(argv[0],stderr);\n\t\t\treturn 2;\n\t\t}\n\t} else if (command == \"get\") {\n\t\tif (arg1.length() != 16) {\n\t\t\tfprintf(stderr,\"invalid format: must be a 16-digit (network) ID\\n\");\n\t\t\treturn 2;\n\t\t}\n\t\tif (!arg2.length()) {\n\t\t\tfprintf(stderr,\"invalid format: include a property name to get\\n\");\n\t\t\treturn 2;\n\t\t}\n\t\tconst unsigned int scode = Http::GET(1024 * 1024 * 16,60000,(const struct sockaddr *)&addr,\"/network\",requestHeaders,responseHeaders,responseBody);\n\t\tif (scode == 0) {\n\t\t\tprintf(\"Error connecting to the ZeroTier service: %s\\n\\nPlease check that the service is running and that TCP port 9993 can be contacted via 127.0.0.1.\" ZT_EOL_S, responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t\tnlohmann::json j;\n\t\ttry {\n\t\t\tj = OSUtils::jsonParse(responseBody);\n\t\t} catch (std::exception &exc) {\n\t\t\tprintf(\"%u %s invalid JSON response (%s)\" ZT_EOL_S,scode,command.c_str(),exc.what());\n\t\t\treturn 1;\n\t\t} catch ( ... ) {\n\t\t\tprintf(\"%u %s invalid JSON response (unknown exception)\" ZT_EOL_S,scode,command.c_str());\n\t\t\treturn 1;\n\t\t}\n\t\tbool bNetworkFound = false;\n\t\tif (j.is_array()) {\n\t\t\tfor(unsigned long i=0;i<j.size();++i) {\n\t\t\t\tnlohmann::json &n = j[i];\n\t\t\t\tif (n.is_object()) {\n\t\t\t\t\tif (n[\"id\"] == arg1) {\n\t\t\t\t\t\tbNetworkFound = true;\n\t\t\t\t\t\tstd::string aa;\n\t\t\t\t\t\tif (arg2 != \"ip\" && arg2 != \"ip4\" && arg2 != \"ip6\" && arg2 != \"ip6plane\" && arg2 != \"ip6prefix\") {\n\t\t\t\t\t\t\taa.append(OSUtils::jsonString(n[arg2],\"-\")); // Standard network property field\n\t\t\t\t\t\t\tif (aa == \"-\") {\n\t\t\t\t\t\t\t\tprintf(\"error, unknown property name\\n\");\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprintf(\"%s\\n\",aa.c_str());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnlohmann::json &assignedAddresses = n[\"assignedAddresses\"];\n\t\t\t\t\t\tif (assignedAddresses.is_array()) {\n\t\t\t\t\t\t\tint matchingIdxs[ZT_MAX_ZT_ASSIGNED_ADDRESSES];\n\t\t\t\t\t\t\tint addressCountOfType = 0;\n\t\t\t\t\t\t\tfor (int k = 0; k<std::min(ZT_MAX_ZT_ASSIGNED_ADDRESSES, (int)assignedAddresses.size());++k) {\n\t\t\t\t\t\t\t\tnlohmann::json &addr = assignedAddresses[k];\n\t\t\t\t\t\t\t\tif ((arg2 == \"ip4\" && addr.get<std::string>().find('.') != std::string::npos)\n\t\t\t\t\t\t\t\t\t|| ((arg2.find(\"ip6\") == 0) && addr.get<std::string>().find(\":\") != std::string::npos)\n\t\t\t\t\t\t\t\t\t|| (arg2 == \"ip\")\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tmatchingIdxs[addressCountOfType++] = k;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (int k=0; k<addressCountOfType; k++) {\n\t\t\t\t\t\t\t\tnlohmann::json &addr = assignedAddresses[matchingIdxs[k]];\n\t\t\t\t\t\t\t\tif (!addr.is_string()) {\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (arg2.find(\"ip6p\") == 0) {\n\t\t\t\t\t\t\t\t\tif (arg2 == \"ip6plane\") {\n\t\t\t\t\t\t\t\t\t\tif (addr.get<std::string>().find(\"fc\") == 0) {\n\t\t\t\t\t\t\t\t\t\t\taa.append(addr.get<std::string>().substr(0,addr.get<std::string>().find('/')));\n\t\t\t\t\t\t\t\t\t\t\tif (k < addressCountOfType-1) aa.append(\"\\n\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (arg2 == \"ip6prefix\") {\n\t\t\t\t\t\t\t\t\t\tif (addr.get<std::string>().find(\"fc\") == 0) {\n\t\t\t\t\t\t\t\t\t\t\taa.append(addr.get<std::string>().substr(0,addr.get<std::string>().find('/')).substr(0,24));\n\t\t\t\t\t\t\t\t\t\t\tif (k < addressCountOfType-1) aa.append(\"\\n\");\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\taa.append(addr.get<std::string>().substr(0,addr.get<std::string>().find('/')));\n\t\t\t\t\t\t\t\t\tif (k < addressCountOfType-1) aa.append(\"\\n\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprintf(\"%s\\n\",aa.c_str());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!bNetworkFound) {\n\t\t\tfprintf(stderr,\"unknown network ID, check that you are a member of the network\\n\");\n\t\t}\n\t\tif (scode == 200) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tprintf(\"%u %s %s\" ZT_EOL_S,scode,command.c_str(),responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t} else if (command == \"dump\") {\n\t\tstd::stringstream dump;\n\t\tdump << \"platform: \";\n#ifdef __APPLE__\n\t\tdump << \"macOS\" << ZT_EOL_S;\n#elif defined(_WIN32)\n\t\tdump << \"Windows\" << ZT_EOL_S;\n#elif defined(__LINUX__)\n\t\tdump << \"Linux\" << ZT_EOL_S;\n#else\n\t\tdump << \"other unix based OS\" << ZT_EOL_S;\n#endif\n\t\tdump << \"zerotier version: \" << ZEROTIER_ONE_VERSION_MAJOR << \".\"\n\t\t\t<< ZEROTIER_ONE_VERSION_MINOR << \".\" << ZEROTIER_ONE_VERSION_REVISION << ZT_EOL_S << ZT_EOL_S;\n\n\t\t// grab status\n\t\tdump << \"status\" << ZT_EOL_S << \"------\" << ZT_EOL_S;\n\t\tunsigned int scode = Http::GET(1024 * 1024 * 16,60000,(const struct sockaddr *)&addr,\"/status\",requestHeaders,responseHeaders,responseBody);\n\t\tif (scode != 200) {\n\t\t\tprintf(\"Error connecting to the ZeroTier service: %s\\n\\nPlease check that the service is running and that TCP port 9993 can be contacted via 127.0.0.1.\" ZT_EOL_S, responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t\tdump << responseBody << ZT_EOL_S;\n\n\t\tresponseHeaders.clear();\n\t\tresponseBody = \"\";\n\n\t\t// grab network list\n\t\tdump << ZT_EOL_S << \"networks\" << ZT_EOL_S << \"--------\" << ZT_EOL_S;\n\t\tscode = Http::GET(1024 * 1024 * 16,60000,(const struct sockaddr *)&addr,\"/network\",requestHeaders,responseHeaders,responseBody);\n\t\tif (scode != 200) {\n\t\t\tprintf(\"Error connecting to the ZeroTier service: %s\\n\\nPlease check that the service is running and that TCP port 9993 can be contacted via 127.0.0.1.\" ZT_EOL_S, responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t\tdump << responseBody << ZT_EOL_S;\n\n\t\tresponseHeaders.clear();\n\t\tresponseBody = \"\";\n\n\t\t// list peers\n\t\tdump << ZT_EOL_S << \"peers\" << ZT_EOL_S << \"-----\" << ZT_EOL_S;\n\t\tscode = Http::GET(1024 * 1024 * 16,60000,(const struct sockaddr *)&addr,\"/peer\",requestHeaders,responseHeaders,responseBody);\n\t\tif (scode != 200) {\n\t\t\tprintf(\"Error connecting to the ZeroTier service: %s\\n\\nPlease check that the service is running and that TCP port 9993 can be contacted via 127.0.0.1.\" ZT_EOL_S, responseBody.c_str());\n\t\t\treturn 1;\n\t\t}\n\t\tdump << responseBody << ZT_EOL_S;\n\n\t\t// Bonds don't need to be queried separately since their data originates from \"/peer\" responses anyway\n\n\t\tresponseHeaders.clear();\n\t\tresponseBody = \"\";\n\n\t\tdump << ZT_EOL_S << \"local.conf\" << ZT_EOL_S << \"----------\" << ZT_EOL_S;\n\t\tstd::string localConf;\n\t\tOSUtils::readFile((homeDir + ZT_PATH_SEPARATOR_S + \"local.conf\").c_str(), localConf);\n\t\tif (localConf.empty()) {\n\t\t\tdump << \"None Present\" << ZT_EOL_S;\n\t\t}\n\t\telse {\n\t\t\tdump << localConf << ZT_EOL_S;\n\t\t}\n\n\t\tdump << ZT_EOL_S << \"Network Interfaces\" << ZT_EOL_S << \"------------------\" << ZT_EOL_S << ZT_EOL_S;\n#ifdef __APPLE__\n\t\tCFArrayRef interfaces = SCNetworkInterfaceCopyAll();\n\t\tCFIndex size = CFArrayGetCount(interfaces);\n\t\tfor(CFIndex i = 0; i < size; ++i) {\n\t\t\tSCNetworkInterfaceRef iface = (SCNetworkInterfaceRef)CFArrayGetValueAtIndex(interfaces, i);\n\n\t\t\tdump << \"Interface \" << i << ZT_EOL_S << \"-----------\" << ZT_EOL_S;\n\t\t\tCFStringRef tmp = SCNetworkInterfaceGetBSDName(iface);\n\t\t\tchar stringBuffer[512] = {};\n\t\t\tCFStringGetCString(tmp,stringBuffer, sizeof(stringBuffer), kCFStringEncodingUTF8);\n\t\t\tdump << \"Name: \" << stringBuffer << ZT_EOL_S;\n\t\t\tstd::string ifName(stringBuffer);\n\t\t\tint mtuCur, mtuMin, mtuMax;\n\t\t\tSCNetworkInterfaceCopyMTU(iface, &mtuCur, &mtuMin, &mtuMax);\n\t\t\tdump << \"MTU: \" << mtuCur << ZT_EOL_S;\n\t\t\ttmp = SCNetworkInterfaceGetHardwareAddressString(iface);\n\t\t\tCFStringGetCString(tmp, stringBuffer, sizeof(stringBuffer), kCFStringEncodingUTF8);\n\t\t\tdump << \"MAC: \" << stringBuffer << ZT_EOL_S;\n\t\t\ttmp = SCNetworkInterfaceGetInterfaceType(iface);\n\t\t\tCFStringGetCString(tmp, stringBuffer, sizeof(stringBuffer), kCFStringEncodingUTF8);\n\t\t\tdump << \"Type: \" << stringBuffer << ZT_EOL_S;\n\t\t\tdump << \"Addresses:\" << ZT_EOL_S;\n\n\t\t\tstruct ifaddrs *ifap, *ifa;\n\t\t\tvoid *addr;\n\t\t\tgetifaddrs(&ifap);\n\t\t\tfor (ifa = ifap; ifa; ifa = ifa->ifa_next) {\n\t\t\t\tif (strcmp(ifName.c_str(), ifa->ifa_name) == 0) {\n\t\t\t\t\tif (ifa->ifa_addr->sa_family == AF_INET) {\n\t\t\t\t\t\tstruct sockaddr_in *ipv4 = (struct sockaddr_in*)ifa->ifa_addr;\n\t\t\t\t\t\taddr = &ipv4->sin_addr;\n\t\t\t\t\t} else if (ifa->ifa_addr->sa_family == AF_INET6) {\n\t\t\t\t\t\tstruct sockaddr_in6 *ipv6 = (struct sockaddr_in6*)ifa->ifa_addr;\n\t\t\t\t\t\taddr = &ipv6->sin6_addr;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tinet_ntop(ifa->ifa_addr->sa_family, addr, stringBuffer, sizeof(stringBuffer));\n\t\t\t\t\tdump << stringBuffer << ZT_EOL_S;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdump << ZT_EOL_S;\n\t\t}\n\n\n\t\tFSRef fsref;\n\t\tUInt8 path[PATH_MAX];\n\t\tif (FSFindFolder(kUserDomain, kDesktopFolderType, kDontCreateFolder, &fsref) == noErr &&\n\t\t\t\tFSRefMakePath(&fsref, path, sizeof(path)) == noErr) {\n\n\t\t} else if (getenv(\"SUDO_USER\")) {\n\t\t\tsprintf((char*)path, \"/Users/%s/Desktop\", getenv(\"SUDO_USER\"));\n\t\t} else {\n\t\t\tfprintf(stdout, \"%s\", dump.str().c_str());\n\t\t\treturn 0;\n\t\t}\n\n\t\tsprintf((char*)path, \"%s%szerotier_dump.txt\", (char*)path, ZT_PATH_SEPARATOR_S);\n\n\t\tfprintf(stdout, \"Writing dump to: %s\\n\", path);\n\t\tint fd = open((char*)path, O_CREAT|O_RDWR,0664);\n\t\tif (fd == -1) {\n\t\t\tfprintf(stderr, \"Error creating file.\\n\");\n\t\t\treturn 1;\n\t\t}\n\t\twrite(fd, dump.str().c_str(), dump.str().size());\n\t\tclose(fd);\n#elif defined(_WIN32)\n\t\tULONG buffLen = 16384;\n\t\tPIP_ADAPTER_ADDRESSES addresses;\n\n\t\tULONG ret = 0;\n\t\tdo {\n\t\t\taddresses = (PIP_ADAPTER_ADDRESSES)malloc(buffLen);\n\n\t\t\tret = GetAdaptersAddresses(AF_UNSPEC, 0, NULL, addresses, &buffLen);\n\t\t\tif (ret == ERROR_BUFFER_OVERFLOW) {\n\t\t\t\tfree(addresses);\n\t\t\t\taddresses = NULL;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (ret == ERROR_BUFFER_OVERFLOW);\n\n\t\tint i = 0;\n\t\tif (ret == NO_ERROR) {\n\t\t\tPIP_ADAPTER_ADDRESSES curAddr = addresses;\n\t\t\twhile (curAddr) {\n\t\t\t\tdump << \"Interface \" << i << ZT_EOL_S << \"-----------\" << ZT_EOL_S;\n\t\t\t\tdump << \"Name: \" << curAddr->AdapterName << ZT_EOL_S;\n\t\t\t\tdump << \"MTU: \" << curAddr->Mtu << ZT_EOL_S;\n\t\t\t\tdump << \"MAC: \";\n\t\t\t\tchar macBuffer[64] = {};\n\t\t\t\tsprintf(macBuffer, \"%02x:%02x:%02x:%02x:%02x:%02x\",\n\t\t\t\t\tcurAddr->PhysicalAddress[0],\n\t\t\t\t\tcurAddr->PhysicalAddress[1],\n\t\t\t\t\tcurAddr->PhysicalAddress[2],\n\t\t\t\t\tcurAddr->PhysicalAddress[3],\n\t\t\t\t\tcurAddr->PhysicalAddress[4],\n\t\t\t\t\tcurAddr->PhysicalAddress[5]);\n\t\t\t\tdump << macBuffer << ZT_EOL_S;\n\t\t\t\tdump << \"Type: \" << curAddr->IfType << ZT_EOL_S;\n\t\t\t\tdump << \"Addresses:\" << ZT_EOL_S;\n\t\t\t\tPIP_ADAPTER_UNICAST_ADDRESS pUnicast = NULL;\n\t\t\t\tpUnicast = curAddr->FirstUnicastAddress;\n\t\t\t\tif (pUnicast) {\n\t\t\t\t\tfor (int j = 0; pUnicast != NULL; ++j) {\n\t\t\t\t\t\tchar buf[128] = {};\n\t\t\t\t\t\tDWORD bufLen = 128;\n\t\t\t\t\t\tLPSOCKADDR a = pUnicast->Address.lpSockaddr;\n\t\t\t\t\t\tWSAAddressToStringA(\n\t\t\t\t\t\t\tpUnicast->Address.lpSockaddr,\n\t\t\t\t\t\t\tpUnicast->Address.iSockaddrLength,\n\t\t\t\t\t\t\tNULL,\n\t\t\t\t\t\t\tbuf,\n\t\t\t\t\t\t\t&bufLen\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdump << buf << ZT_EOL_S;\n\t\t\t\t\t\tpUnicast = pUnicast->Next;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcurAddr = curAddr->Next;\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t\tif (addresses) {\n\t\t\tfree(addresses);\n\t\t\taddresses = NULL;\n\t\t}\n\n\t\tchar path[MAX_PATH + 1] = {};\n\t\tif (SHGetFolderPathA(NULL, CSIDL_DESKTOP, NULL, 0, path) == S_OK) {\n\t\t\tsprintf(path, \"%s%szerotier_dump.txt\", path, ZT_PATH_SEPARATOR_S);\n\t\t\tfprintf(stdout, \"Writing dump to: %s\\n\", path);\n\t\t\tHANDLE file = CreateFileA(\n\t\t\t\tpath,\n\t\t\t\tGENERIC_WRITE,\n\t\t\t\t0,\n\t\t\t\tNULL,\n\t\t\t\tCREATE_ALWAYS,\n\t\t\t\tFILE_ATTRIBUTE_NORMAL,\n\t\t\t\tNULL\n\t\t\t);\n\t\t\tif (file == INVALID_HANDLE_VALUE) {\n\t\t\t\tfprintf(stdout, \"%s\", dump.str().c_str());\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tBOOL err = WriteFile(\n\t\t\t\tfile,\n\t\t\t\tdump.str().c_str(),\n\t\t\t\tdump.str().size(),\n\t\t\t\tNULL,\n\t\t\t\tNULL\n\t\t\t);\n\t\t\tif (err = FALSE) {\n\t\t\t\tfprintf(stderr, \"Error writing file\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tCloseHandle(file);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stdout, \"%s\", dump.str().c_str());\n\t\t}\n#elif defined(__LINUX__)\n\t\tstruct ifreq ifr;\n\t\tstruct ifconf ifc;\n\t\tchar buf[1024];\n\t\tchar stringBuffer[128];\n\n\t\tint sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_IP);\n\n\t\tifc.ifc_len = sizeof(buf);\n\t\tifc.ifc_buf = buf;\n\t\tioctl(sock, SIOCGIFCONF, &ifc);\n\n\t\tstruct ifreq *it = ifc.ifc_req;\n\t\tconst struct ifreq * const end = it + (ifc.ifc_len / sizeof(struct ifreq));\n\t\tint count = 0;\n\t\tfor(; it != end; ++it) {\n\t\t\tstrcpy(ifr.ifr_name, it->ifr_name);\n\t\t\tif(ioctl(sock, SIOCGIFFLAGS, &ifr) == 0) {\n\t\t\t\tif (!(ifr.ifr_flags & IFF_LOOPBACK)) { // skip loopback\n\t\t\t\t\tdump << \"Interface \" << count++ << ZT_EOL_S << \"-----------\" << ZT_EOL_S;\n\t\t\t\t\tdump << \"Name: \" << ifr.ifr_name << ZT_EOL_S;\n\t\t\t\t\tif (ioctl(sock, SIOCGIFMTU, &ifr) == 0) {\n\t\t\t\t\t\tdump << \"MTU: \" << ifr.ifr_mtu << ZT_EOL_S;\n\t\t\t\t\t}\n\t\t\t\t\tif (ioctl(sock, SIOCGIFHWADDR, &ifr) == 0) {\n\t\t\t\t\t\tunsigned char mac_addr[6];\n\t\t\t\t\t\tmemcpy(mac_addr, ifr.ifr_hwaddr.sa_data, 6);\n\t\t\t\t\t\tchar macStr[18];\n\t\t\t\t\t\tsprintf(macStr, \"%02x:%02x:%02x:%02x:%02x:%02x\",\n\t\t\t\t\t\t\t\tmac_addr[0],\n\t\t\t\t\t\t\t\tmac_addr[1],\n\t\t\t\t\t\t\t\tmac_addr[2],\n\t\t\t\t\t\t\t\tmac_addr[3],\n\t\t\t\t\t\t\t\tmac_addr[4],\n\t\t\t\t\t\t\t\tmac_addr[5]);\n\t\t\t\t\t\tdump << \"MAC: \" << macStr << ZT_EOL_S;\n\t\t\t\t\t}\n\n\t\t\t\t\tdump << \"Addresses: \" << ZT_EOL_S;\n\t\t\t\t\tstruct ifaddrs *ifap, *ifa;\n\t\t\t\t\tvoid *addr;\n\t\t\t\t\tgetifaddrs(&ifap);\n\t\t\t\t\tfor(ifa = ifap; ifa; ifa = ifa->ifa_next) {\n\t\t\t\t\t\tif(strcmp(ifr.ifr_name, ifa->ifa_name) == 0 && ifa->ifa_addr != NULL) {\n\t\t\t\t\t\t\tif(ifa->ifa_addr->sa_family == AF_INET) {\n\t\t\t\t\t\t\t\tstruct sockaddr_in *ipv4 = (struct sockaddr_in*)ifa->ifa_addr;\n\t\t\t\t\t\t\t\taddr = &ipv4->sin_addr;\n\t\t\t\t\t\t\t} else if (ifa->ifa_addr->sa_family == AF_INET6) {\n\t\t\t\t\t\t\t\tstruct sockaddr_in6 *ipv6 = (struct sockaddr_in6*)ifa->ifa_addr;\n\t\t\t\t\t\t\t\taddr = &ipv6->sin6_addr;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinet_ntop(ifa->ifa_addr->sa_family, addr, stringBuffer, sizeof(stringBuffer));\n\t\t\t\t\t\t\tdump << stringBuffer << ZT_EOL_S;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tclose(sock);\n\t\tchar cwd[16384];\n\t\tgetcwd(cwd, sizeof(cwd));\n\t\tsprintf(cwd, \"%s%szerotier_dump.txt\", cwd, ZT_PATH_SEPARATOR_S);\n\t\tfprintf(stdout, \"Writing dump to: %s\\n\", cwd);\n\t\tint fd = open(cwd, O_CREAT|O_RDWR,0664);\n\t\tif (fd == -1) {\n\t\t\tfprintf(stderr, \"Error creating file.\\n\");\n\t\t\treturn 1;\n\t\t}\n\t\twrite(fd, dump.str().c_str(), dump.str().size());\n\t\tclose(fd);\n#else\n\tfprintf(stderr, \"%s\", dump.str().c_str());\n#endif\n\n\t\t// fprintf(stderr, \"%s\\n\", dump.str().c_str());\n\n\t} else {\n\t\tcliPrintHelp(argv[0],stderr);\n\t\treturn 0;\n\t}\n\n\treturn 0;\n}\n\n/****************************************************************************/\n/* zerotier-idtool personality                                              */\n/****************************************************************************/\n\nstatic void idtoolPrintHelp(FILE *out,const char *pn)\n{\n\tfprintf(out,\n\t\t\"%s version %d.%d.%d\" ZT_EOL_S,\n\t\tPROGRAM_NAME,\n\t\tZEROTIER_ONE_VERSION_MAJOR, ZEROTIER_ONE_VERSION_MINOR, ZEROTIER_ONE_VERSION_REVISION);\n\tfprintf(out,\n\t\tCOPYRIGHT_NOTICE ZT_EOL_S\n\t\tLICENSE_GRANT ZT_EOL_S);\n\tfprintf(out,\"Usage: %s <command> [<args>]\" ZT_EOL_S\"\" ZT_EOL_S\"Commands:\" ZT_EOL_S,pn);\n\tfprintf(out,\"  generate [<identity.secret>] [<identity.public>] [<vanity>]\" ZT_EOL_S);\n\tfprintf(out,\"  validate <identity.secret/public>\" ZT_EOL_S);\n\tfprintf(out,\"  getpublic <identity.secret>\" ZT_EOL_S);\n\tfprintf(out,\"  sign <identity.secret> <file>\" ZT_EOL_S);\n\tfprintf(out,\"  verify <identity.secret/public> <file> <signature>\" ZT_EOL_S);\n\tfprintf(out,\"  initmoon <identity.public of first seed>\" ZT_EOL_S);\n\tfprintf(out,\"  genmoon <moon json>\" ZT_EOL_S);\n}\n\nstatic Identity getIdFromArg(char *arg)\n{\n\tIdentity id;\n\tif ((strlen(arg) > 32)&&(arg[10] == ':')) { // identity is a literal on the command line\n\t\tif (id.fromString(arg))\n\t\t\treturn id;\n\t} else { // identity is to be read from a file\n\t\tstd::string idser;\n\t\tif (OSUtils::readFile(arg,idser)) {\n\t\t\tif (id.fromString(idser.c_str()))\n\t\t\t\treturn id;\n\t\t}\n\t}\n\treturn Identity();\n}\n\n#ifdef __WINDOWS__\nstatic int idtool(int argc, _TCHAR* argv[])\n#else\nstatic int idtool(int argc,char **argv)\n#endif\n{\n\tif (argc < 2) {\n\t\tidtoolPrintHelp(stdout,argv[0]);\n\t\treturn 1;\n\t}\n\n\tif (!strcmp(argv[1],\"generate\")) {\n\t\tuint64_t vanity = 0;\n\t\tint vanityBits = 0;\n\t\tif (argc >= 5) {\n\t\t\tvanity = Utils::hexStrToU64(argv[4]) & 0xffffffffffULL;\n\t\t\tvanityBits = 4 * (int)strlen(argv[4]);\n\t\t\tif (vanityBits > 40)\n\t\t\t\tvanityBits = 40;\n\t\t}\n\n\t\tIdentity id;\n\t\tfor(;;) {\n\t\t\tid.generate();\n\t\t\tif ((id.address().toInt() >> (40 - vanityBits)) == vanity) {\n\t\t\t\tif (vanityBits > 0) {\n\t\t\t\t\tfprintf(stderr,\"vanity address: found %.10llx !\\n\",(unsigned long long)id.address().toInt());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tfprintf(stderr,\"vanity address: tried %.10llx looking for first %d bits of %.10llx\\n\",(unsigned long long)id.address().toInt(),vanityBits,(unsigned long long)(vanity << (40 - vanityBits)));\n\t\t\t}\n\t\t}\n\n\t\tchar idtmp[1024];\n\t\tstd::string idser = id.toString(true,idtmp);\n\t\tif (argc >= 3) {\n\t\t\tif (!OSUtils::writeFile(argv[2],idser)) {\n\t\t\t\tfprintf(stderr,\"Error writing to %s\" ZT_EOL_S,argv[2]);\n\t\t\t\treturn 1;\n\t\t\t} else printf(\"%s written\" ZT_EOL_S,argv[2]);\n\t\t\tif (argc >= 4) {\n\t\t\t\tidser = id.toString(false,idtmp);\n\t\t\t\tif (!OSUtils::writeFile(argv[3],idser)) {\n\t\t\t\t\tfprintf(stderr,\"Error writing to %s\" ZT_EOL_S,argv[3]);\n\t\t\t\t\treturn 1;\n\t\t\t\t} else printf(\"%s written\" ZT_EOL_S,argv[3]);\n\t\t\t}\n\t\t} else printf(\"%s\",idser.c_str());\n\t} else if (!strcmp(argv[1],\"validate\")) {\n\t\tif (argc < 3) {\n\t\t\tidtoolPrintHelp(stdout,argv[0]);\n\t\t\treturn 1;\n\t\t}\n\n\t\tIdentity id = getIdFromArg(argv[2]);\n\t\tif (!id) {\n\t\t\tfprintf(stderr,\"Identity argument invalid or file unreadable: %s\" ZT_EOL_S,argv[2]);\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (!id.locallyValidate()) {\n\t\t\tfprintf(stderr,\"%s FAILED validation.\" ZT_EOL_S,argv[2]);\n\t\t\treturn 1;\n\t\t} else printf(\"%s is a valid identity\" ZT_EOL_S,argv[2]);\n\t} else if (!strcmp(argv[1],\"getpublic\")) {\n\t\tif (argc < 3) {\n\t\t\tidtoolPrintHelp(stdout,argv[0]);\n\t\t\treturn 1;\n\t\t}\n\n\t\tIdentity id = getIdFromArg(argv[2]);\n\t\tif (!id) {\n\t\t\tfprintf(stderr,\"Identity argument invalid or file unreadable: %s\" ZT_EOL_S,argv[2]);\n\t\t\treturn 1;\n\t\t}\n\n\t\tchar idtmp[1024];\n\t\tprintf(\"%s\",id.toString(false,idtmp));\n\t} else if (!strcmp(argv[1],\"sign\")) {\n\t\tif (argc < 4) {\n\t\t\tidtoolPrintHelp(stdout,argv[0]);\n\t\t\treturn 1;\n\t\t}\n\n\t\tIdentity id = getIdFromArg(argv[2]);\n\t\tif (!id) {\n\t\t\tfprintf(stderr,\"Identity argument invalid or file unreadable: %s\" ZT_EOL_S,argv[2]);\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (!id.hasPrivate()) {\n\t\t\tfprintf(stderr,\"%s does not contain a private key (must use private to sign)\" ZT_EOL_S,argv[2]);\n\t\t\treturn 1;\n\t\t}\n\n\t\tstd::string inf;\n\t\tif (!OSUtils::readFile(argv[3],inf)) {\n\t\t\tfprintf(stderr,\"%s is not readable\" ZT_EOL_S,argv[3]);\n\t\t\treturn 1;\n\t\t}\n\t\tC25519::Signature signature = id.sign(inf.data(),(unsigned int)inf.length());\n\t\tchar hexbuf[1024];\n\t\tprintf(\"%s\",Utils::hex(signature.data,ZT_C25519_SIGNATURE_LEN,hexbuf));\n\t} else if (!strcmp(argv[1],\"verify\")) {\n\t\tif (argc < 5) {\n\t\t\tidtoolPrintHelp(stdout,argv[0]);\n\t\t\treturn 1;\n\t\t}\n\n\t\tIdentity id = getIdFromArg(argv[2]);\n\t\tif (!id) {\n\t\t\tfprintf(stderr,\"Identity argument invalid or file unreadable: %s\" ZT_EOL_S,argv[2]);\n\t\t\treturn 1;\n\t\t}\n\n\t\tstd::string inf;\n\t\tif (!OSUtils::readFile(argv[3],inf)) {\n\t\t\tfprintf(stderr,\"%s is not readable\" ZT_EOL_S,argv[3]);\n\t\t\treturn 1;\n\t\t}\n\n\t\tchar buf[4096];\n\t\tstd::string signature(buf,Utils::unhex(argv[4],buf,(unsigned int)sizeof(buf)));\n\t\tif ((signature.length() > ZT_ADDRESS_LENGTH)&&(id.verify(inf.data(),(unsigned int)inf.length(),signature.data(),(unsigned int)signature.length()))) {\n\t\t\tprintf(\"%s signature valid\" ZT_EOL_S,argv[3]);\n\t\t} else {\n\t\t\tsignature.clear();\n\t\t\tif (OSUtils::readFile(argv[4],signature)) {\n\t\t\t\tsignature.assign(buf,Utils::unhex(signature.c_str(),buf,(unsigned int)sizeof(buf)));\n\t\t\t\tif ((signature.length() > ZT_ADDRESS_LENGTH)&&(id.verify(inf.data(),(unsigned int)inf.length(),signature.data(),(unsigned int)signature.length()))) {\n\t\t\t\t\tprintf(\"%s signature valid\" ZT_EOL_S,argv[3]);\n\t\t\t\t} else {\n\t\t\t\t\tfprintf(stderr,\"%s signature check FAILED\" ZT_EOL_S,argv[3]);\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfprintf(stderr,\"%s signature check FAILED\" ZT_EOL_S,argv[3]);\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t} else if (!strcmp(argv[1],\"initmoon\")) {\n\t\tif (argc < 3) {\n\t\t\tidtoolPrintHelp(stdout,argv[0]);\n\t\t} else {\n\t\t\tconst Identity id = getIdFromArg(argv[2]);\n\t\t\tif (!id) {\n\t\t\t\tfprintf(stderr,\"%s is not a valid identity\" ZT_EOL_S,argv[2]);\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tC25519::Pair kp(C25519::generate());\n\n\t\t\tchar idtmp[4096];\n\t\t\tnlohmann::json mj;\n\t\t\tmj[\"objtype\"] = \"world\";\n\t\t\tmj[\"worldType\"] = \"moon\";\n\t\t\tmj[\"updatesMustBeSignedBy\"] = mj[\"signingKey\"] = Utils::hex(kp.pub.data,ZT_C25519_PUBLIC_KEY_LEN,idtmp);\n\t\t\tmj[\"signingKey_SECRET\"] = Utils::hex(kp.priv.data,ZT_C25519_PRIVATE_KEY_LEN,idtmp);\n\t\t\tmj[\"id\"] = id.address().toString(idtmp);\n\t\t\tnlohmann::json seedj;\n\t\t\tseedj[\"identity\"] = id.toString(false,idtmp);\n\t\t\tseedj[\"stableEndpoints\"] = nlohmann::json::array();\n\t\t\t(mj[\"roots\"] = nlohmann::json::array()).push_back(seedj);\n\t\t\tstd::string mjd(OSUtils::jsonDump(mj));\n\n\t\t\tprintf(\"%s\" ZT_EOL_S,mjd.c_str());\n\t\t}\n\t} else if (!strcmp(argv[1],\"genmoon\")) {\n\t\tif (argc < 3) {\n\t\t\tidtoolPrintHelp(stdout,argv[0]);\n\t\t} else {\n\t\t\tstd::string buf;\n\t\t\tif (!OSUtils::readFile(argv[2],buf)) {\n\t\t\t\tfprintf(stderr,\"cannot read %s\" ZT_EOL_S,argv[2]);\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tnlohmann::json mj(OSUtils::jsonParse(buf));\n\n\t\t\tconst uint64_t id = Utils::hexStrToU64(OSUtils::jsonString(mj[\"id\"],\"0\").c_str());\n\t\t\tif (!id) {\n\t\t\t\tfprintf(stderr,\"ID in %s is invalid\" ZT_EOL_S,argv[2]);\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tWorld::Type t;\n\t\t\tif (mj[\"worldType\"] == \"moon\") {\n\t\t\t\tt = World::TYPE_MOON;\n\t\t\t} else if (mj[\"worldType\"] == \"planet\") {\n\t\t\t\tt = World::TYPE_PLANET;\n\t\t\t} else {\n\t\t\t\tfprintf(stderr,\"invalid worldType\" ZT_EOL_S);\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tC25519::Pair signingKey;\n\t\t\tC25519::Public updatesMustBeSignedBy;\n\t\t\tUtils::unhex(OSUtils::jsonString(mj[\"signingKey\"],\"\").c_str(),signingKey.pub.data,ZT_C25519_PUBLIC_KEY_LEN);\n\t\t\tUtils::unhex(OSUtils::jsonString(mj[\"signingKey_SECRET\"],\"\").c_str(),signingKey.priv.data,ZT_C25519_PRIVATE_KEY_LEN);\n\t\t\tUtils::unhex(OSUtils::jsonString(mj[\"updatesMustBeSignedBy\"],\"\").c_str(),updatesMustBeSignedBy.data,ZT_C25519_PUBLIC_KEY_LEN);\n\n\t\t\tstd::vector<World::Root> roots;\n\t\t\tnlohmann::json &rootsj = mj[\"roots\"];\n\t\t\tif (rootsj.is_array()) {\n\t\t\t\tfor(unsigned long i=0;i<(unsigned long)rootsj.size();++i) {\n\t\t\t\t\tnlohmann::json &r = rootsj[i];\n\t\t\t\t\tif (r.is_object()) {\n\t\t\t\t\t\troots.push_back(World::Root());\n\t\t\t\t\t\troots.back().identity = Identity(OSUtils::jsonString(r[\"identity\"],\"\").c_str());\n\t\t\t\t\t\tnlohmann::json &stableEndpointsj = r[\"stableEndpoints\"];\n\t\t\t\t\t\tif (stableEndpointsj.is_array()) {\n\t\t\t\t\t\t\tfor(unsigned long k=0;k<(unsigned long)stableEndpointsj.size();++k)\n\t\t\t\t\t\t\t\troots.back().stableEndpoints.push_back(InetAddress(OSUtils::jsonString(stableEndpointsj[k],\"\").c_str()));\n\t\t\t\t\t\t\tstd::sort(roots.back().stableEndpoints.begin(),roots.back().stableEndpoints.end());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tstd::sort(roots.begin(),roots.end());\n\n\t\t\tconst int64_t now = OSUtils::now();\n\t\t\tWorld w(World::make(t,id,now,updatesMustBeSignedBy,roots,signingKey));\n\t\t\tBuffer<ZT_WORLD_MAX_SERIALIZED_LENGTH> wbuf;\n\t\t\tw.serialize(wbuf);\n\t\t\tchar fn[128];\n\t\t\tOSUtils::ztsnprintf(fn,sizeof(fn),\"%.16llx.moon\",w.id());\n\t\t\tOSUtils::writeFile(fn,wbuf.data(),wbuf.size());\n\t\t\tprintf(\"wrote %s (signed world with timestamp %llu)\" ZT_EOL_S,fn,(unsigned long long)now);\n\t\t}\n\t} else {\n\t\tidtoolPrintHelp(stdout,argv[0]);\n\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n\n/****************************************************************************/\n/* Unix helper functions and signal handlers                                */\n/****************************************************************************/\n\n#ifdef __UNIX_LIKE__\nstatic void _sighandlerHup(int sig)\n{\n}\nstatic void _sighandlerReallyQuit(int sig)\n{\n\texit(0);\n}\nstatic void _sighandlerQuit(int sig)\n{\n\talarm(5); // force exit after 5s\n\tOneService *s = zt1Service;\n\tif (s)\n\t\ts->terminate();\n\telse exit(0);\n}\n#endif\n\n// Drop privileges on Linux, if supported by libc etc. and \"zerotier-one\" user exists on system\n#if defined(__LINUX__) && !defined(ZT_NO_CAPABILITIES)\n#ifndef PR_CAP_AMBIENT\n#define PR_CAP_AMBIENT 47\n#define PR_CAP_AMBIENT_IS_SET 1\n#define PR_CAP_AMBIENT_RAISE 2\n#define PR_CAP_AMBIENT_LOWER 3\n#define PR_CAP_AMBIENT_CLEAR_ALL 4\n#endif\n#define ZT_LINUX_USER \"zerotier-one\"\n#define ZT_HAVE_DROP_PRIVILEGES 1\nnamespace {\n\n// libc doesn't export capset, it is instead located in libcap\n// We ignore libcap and call it manually.\nstruct cap_header_struct {\n\t__u32 version;\n\tint pid;\n};\nstruct cap_data_struct {\n\t__u32 effective;\n\t__u32 permitted;\n\t__u32 inheritable;\n};\nstatic inline int _zt_capset(cap_header_struct* hdrp, cap_data_struct* datap) { return syscall(SYS_capset, hdrp, datap); }\n\nstatic void _notDropping(const char *procName,const std::string &homeDir)\n{\n\tstruct stat buf;\n\tif (lstat(homeDir.c_str(),&buf) < 0) {\n\t\tif (buf.st_uid != 0 || buf.st_gid != 0) {\n\t\t\tfprintf(stderr, \"%s: FATAL: failed to drop privileges and can't run as root since privileges were previously dropped (home directory not owned by root)\" ZT_EOL_S,procName);\n\t\t\texit(1);\n\t\t}\n\t}\n\tfprintf(stderr, \"%s: WARNING: failed to drop privileges (kernel may not support required prctl features), running as root\" ZT_EOL_S,procName);\n}\n\nstatic int _setCapabilities(int flags)\n{\n\tcap_header_struct capheader = {_LINUX_CAPABILITY_VERSION_1, 0};\n\tcap_data_struct capdata;\n\tcapdata.inheritable = capdata.permitted = capdata.effective = flags;\n\treturn _zt_capset(&capheader, &capdata);\n}\n\nstatic void _recursiveChown(const char *path,uid_t uid,gid_t gid)\n{\n\tstruct dirent de;\n\tstruct dirent *dptr;\n\tlchown(path,uid,gid);\n\tDIR *d = opendir(path);\n\tif (!d)\n\t\treturn;\n\tdptr = (struct dirent *)0;\n\tfor(;;) {\n\t\tif (readdir_r(d,&de,&dptr) != 0)\n\t\t\tbreak;\n\t\tif (!dptr)\n\t\t\tbreak;\n\t\tif ((strcmp(dptr->d_name,\".\") != 0)&&(strcmp(dptr->d_name,\"..\") != 0)&&(strlen(dptr->d_name) > 0)) {\n\t\t\tstd::string p(path);\n\t\t\tp.push_back(ZT_PATH_SEPARATOR);\n\t\t\tp.append(dptr->d_name);\n\t\t\t_recursiveChown(p.c_str(),uid,gid); // will just fail and return on regular files\n\t\t}\n\t}\n\tclosedir(d);\n}\n\nstatic void dropPrivileges(const char *procName,const std::string &homeDir)\n{\n\tif (getuid() != 0)\n\t\treturn;\n\n\t// dropPrivileges switches to zerotier-one user while retaining CAP_NET_ADMIN\n\t// and CAP_NET_RAW capabilities.\n\tstruct passwd *targetUser = getpwnam(ZT_LINUX_USER);\n\tif (!targetUser)\n\t\treturn;\n\n\tif (prctl(PR_CAP_AMBIENT, PR_CAP_AMBIENT_IS_SET, CAP_NET_RAW, 0, 0) < 0) {\n\t\t// Kernel has no support for ambient capabilities.\n\t\t_notDropping(procName,homeDir);\n\t\treturn;\n\t}\n\tif (prctl(PR_SET_SECUREBITS, SECBIT_KEEP_CAPS | SECBIT_NOROOT) < 0) {\n\t\t_notDropping(procName,homeDir);\n\t\treturn;\n\t}\n\n\t// Change ownership of our home directory if everything looks good (does nothing if already chown'd)\n\t_recursiveChown(homeDir.c_str(),targetUser->pw_uid,targetUser->pw_gid);\n\n\tif (_setCapabilities((1 << CAP_NET_ADMIN) | (1 << CAP_NET_RAW) | (1 << CAP_SETUID) | (1 << CAP_SETGID) | (1 << CAP_NET_BIND_SERVICE)) < 0) {\n\t\t_notDropping(procName,homeDir);\n\t\treturn;\n\t}\n\n\tint oldDumpable = prctl(PR_GET_DUMPABLE);\n\tif (prctl(PR_SET_DUMPABLE, 0) < 0) {\n\t\t// Disable ptracing. Otherwise there is a small window when previous\n\t\t// compromised ZeroTier process could ptrace us, when we still have CAP_SETUID.\n\t\t// (this is mitigated anyway on most distros by ptrace_scope=1)\n\t\tfprintf(stderr,\"%s: FATAL: prctl(PR_SET_DUMPABLE) failed while attempting to relinquish root permissions\" ZT_EOL_S,procName);\n\t\texit(1);\n\t}\n\n\t// Relinquish root\n\tif (setgid(targetUser->pw_gid) < 0) {\n\t\tperror(\"setgid\");\n\t\texit(1);\n\t}\n\tif (setuid(targetUser->pw_uid) < 0) {\n\t\tperror(\"setuid\");\n\t\texit(1);\n\t}\n\n\tif (_setCapabilities((1 << CAP_NET_ADMIN) | (1 << CAP_NET_RAW) | (1 << CAP_NET_BIND_SERVICE)) < 0) {\n\t\tfprintf(stderr,\"%s: FATAL: unable to drop capabilities after relinquishing root\" ZT_EOL_S,procName);\n\t\texit(1);\n\t}\n\n\tif (prctl(PR_SET_DUMPABLE, oldDumpable) < 0) {\n\t\tfprintf(stderr,\"%s: FATAL: prctl(PR_SET_DUMPABLE) failed while attempting to relinquish root permissions\" ZT_EOL_S,procName);\n\t\texit(1);\n\t}\n\n\tif (prctl(PR_CAP_AMBIENT, PR_CAP_AMBIENT_RAISE, CAP_NET_ADMIN, 0, 0) < 0) {\n\t\tfprintf(stderr,\"%s: FATAL: prctl(PR_CAP_AMBIENT,PR_CAP_AMBIENT_RAISE,CAP_NET_ADMIN) failed while attempting to relinquish root permissions\" ZT_EOL_S,procName);\n\t\texit(1);\n\t}\n\tif (prctl(PR_CAP_AMBIENT, PR_CAP_AMBIENT_RAISE, CAP_NET_RAW, 0, 0) < 0) {\n\t\tfprintf(stderr,\"%s: FATAL: prctl(PR_CAP_AMBIENT,PR_CAP_AMBIENT_RAISE,CAP_NET_RAW) failed while attempting to relinquish root permissions\" ZT_EOL_S,procName);\n\t\texit(1);\n\t}\n}\n\n} // anonymous namespace\n#endif // __LINUX__\n\n/****************************************************************************/\n/* Windows helper functions and signal handlers                             */\n/****************************************************************************/\n\n#ifdef __WINDOWS__\n// Console signal handler routine to allow CTRL+C to work, mostly for testing\nstatic BOOL WINAPI _winConsoleCtrlHandler(DWORD dwCtrlType)\n{\n\tswitch(dwCtrlType) {\n\t\tcase CTRL_C_EVENT:\n\t\tcase CTRL_BREAK_EVENT:\n\t\tcase CTRL_CLOSE_EVENT:\n\t\tcase CTRL_SHUTDOWN_EVENT:\n\t\t\tOneService *s = zt1Service;\n\t\t\tif (s)\n\t\t\t\ts->terminate();\n\t\t\treturn TRUE;\n\t}\n\treturn FALSE;\n}\n\n// TODO: revisit this with https://support.microsoft.com/en-us/help/947709/how-to-use-the-netsh-advfirewall-firewall-context-instead-of-the-netsh\nstatic void _winPokeAHole()\n{\n\tchar myPath[MAX_PATH];\n\tDWORD ps = GetModuleFileNameA(NULL,myPath,sizeof(myPath));\n\tif ((ps > 0)&&(ps < (DWORD)sizeof(myPath))) {\n\t\tSTARTUPINFOA startupInfo;\n\t\tPROCESS_INFORMATION processInfo;\n\n\t\tstartupInfo.cb = sizeof(startupInfo);\n\t\tmemset(&startupInfo,0,sizeof(STARTUPINFOA));\n\t\tmemset(&processInfo,0,sizeof(PROCESS_INFORMATION));\n\t\tif (CreateProcessA(NULL,(LPSTR)(std::string(\"C:\\\\Windows\\\\System32\\\\netsh.exe advfirewall firewall delete rule name=\\\"ZeroTier One\\\" program=\\\"\") + myPath + \"\\\"\").c_str(),NULL,NULL,FALSE,CREATE_NO_WINDOW,NULL,NULL,&startupInfo,&processInfo)) {\n\t\t\tWaitForSingleObject(processInfo.hProcess,INFINITE);\n\t\t\tCloseHandle(processInfo.hProcess);\n\t\t\tCloseHandle(processInfo.hThread);\n\t\t}\n\n\t\tstartupInfo.cb = sizeof(startupInfo);\n\t\tmemset(&startupInfo,0,sizeof(STARTUPINFOA));\n\t\tmemset(&processInfo,0,sizeof(PROCESS_INFORMATION));\n\t\tif (CreateProcessA(NULL,(LPSTR)(std::string(\"C:\\\\Windows\\\\System32\\\\netsh.exe advfirewall firewall add rule name=\\\"ZeroTier One\\\" dir=in action=allow program=\\\"\") + myPath + \"\\\" enable=yes\").c_str(),NULL,NULL,FALSE,CREATE_NO_WINDOW,NULL,NULL,&startupInfo,&processInfo)) {\n\t\t\tWaitForSingleObject(processInfo.hProcess,INFINITE);\n\t\t\tCloseHandle(processInfo.hProcess);\n\t\t\tCloseHandle(processInfo.hThread);\n\t\t}\n\n\t\tstartupInfo.cb = sizeof(startupInfo);\n\t\tmemset(&startupInfo,0,sizeof(STARTUPINFOA));\n\t\tmemset(&processInfo,0,sizeof(PROCESS_INFORMATION));\n\t\tif (CreateProcessA(NULL,(LPSTR)(std::string(\"C:\\\\Windows\\\\System32\\\\netsh.exe advfirewall firewall add rule name=\\\"ZeroTier One\\\" dir=out action=allow program=\\\"\") + myPath + \"\\\" enable=yes\").c_str(),NULL,NULL,FALSE,CREATE_NO_WINDOW,NULL,NULL,&startupInfo,&processInfo)) {\n\t\t\tWaitForSingleObject(processInfo.hProcess,INFINITE);\n\t\t\tCloseHandle(processInfo.hProcess);\n\t\t\tCloseHandle(processInfo.hThread);\n\t\t}\n\t}\n}\n\n// Returns true if this is running as the local administrator\nstatic BOOL IsCurrentUserLocalAdministrator(void)\n{\n\tBOOL   fReturn         = FALSE;\n\tDWORD  dwStatus;\n\tDWORD  dwAccessMask;\n\tDWORD  dwAccessDesired;\n\tDWORD  dwACLSize;\n\tDWORD  dwStructureSize = sizeof(PRIVILEGE_SET);\n\tPACL   pACL            = NULL;\n\tPSID   psidAdmin       = NULL;\n\n\tHANDLE hToken              = NULL;\n\tHANDLE hImpersonationToken = NULL;\n\n\tPRIVILEGE_SET   ps;\n\tGENERIC_MAPPING GenericMapping;\n\n\tPSECURITY_DESCRIPTOR     psdAdmin           = NULL;\n\tSID_IDENTIFIER_AUTHORITY SystemSidAuthority = SECURITY_NT_AUTHORITY;\n\n\tconst DWORD ACCESS_READ  = 1;\n\tconst DWORD ACCESS_WRITE = 2;\n\n\t__try\n\t{\n\t\tif (!OpenThreadToken(GetCurrentThread(), TOKEN_DUPLICATE|TOKEN_QUERY,TRUE,&hToken))\n\t\t{\n\t\t\tif (GetLastError() != ERROR_NO_TOKEN)\n\t\t\t\t__leave;\n\t\t\tif (!OpenProcessToken(GetCurrentProcess(),TOKEN_DUPLICATE|TOKEN_QUERY, &hToken))\n\t\t\t\t__leave;\n\t\t}\n\t\tif (!DuplicateToken (hToken, SecurityImpersonation,&hImpersonationToken))\n\t\t\t__leave;\n\t\tif (!AllocateAndInitializeSid(&SystemSidAuthority, 2,\n\t\t\tSECURITY_BUILTIN_DOMAIN_RID,\n\t\t\tDOMAIN_ALIAS_RID_ADMINS,\n\t\t\t0, 0, 0, 0, 0, 0, &psidAdmin))\n\t\t\t__leave;\n\t\tpsdAdmin = LocalAlloc(LPTR, SECURITY_DESCRIPTOR_MIN_LENGTH);\n\t\tif (psdAdmin == NULL)\n\t\t\t__leave;\n\t\tif (!InitializeSecurityDescriptor(psdAdmin,SECURITY_DESCRIPTOR_REVISION))\n\t\t\t__leave;\n\t\tdwACLSize = sizeof(ACL) + sizeof(ACCESS_ALLOWED_ACE) + GetLengthSid(psidAdmin) - sizeof(DWORD);\n\t\tpACL = (PACL)LocalAlloc(LPTR, dwACLSize);\n\t\tif (pACL == NULL)\n\t\t\t__leave;\n\t\tif (!InitializeAcl(pACL, dwACLSize, ACL_REVISION2))\n\t\t\t__leave;\n\t\tdwAccessMask= ACCESS_READ | ACCESS_WRITE;\n\t\tif (!AddAccessAllowedAce(pACL, ACL_REVISION2, dwAccessMask, psidAdmin))\n\t\t\t__leave;\n\t\tif (!SetSecurityDescriptorDacl(psdAdmin, TRUE, pACL, FALSE))\n\t\t\t__leave;\n\n\t\tSetSecurityDescriptorGroup(psdAdmin, psidAdmin, FALSE);\n\t\tSetSecurityDescriptorOwner(psdAdmin, psidAdmin, FALSE);\n\n\t\tif (!IsValidSecurityDescriptor(psdAdmin))\n\t\t\t__leave;\n\t\tdwAccessDesired = ACCESS_READ;\n\n\t\tGenericMapping.GenericRead    = ACCESS_READ;\n\t\tGenericMapping.GenericWrite   = ACCESS_WRITE;\n\t\tGenericMapping.GenericExecute = 0;\n\t\tGenericMapping.GenericAll     = ACCESS_READ | ACCESS_WRITE;\n\n\t\tif (!AccessCheck(psdAdmin, hImpersonationToken, dwAccessDesired,\n\t\t\t&GenericMapping, &ps, &dwStructureSize, &dwStatus,\n\t\t\t&fReturn))\n\t\t{\n\t\t\tfReturn = FALSE;\n\t\t\t__leave;\n\t\t}\n\t}\n\t__finally\n\t{\n\t\t// Clean up.\n\t\tif (pACL) LocalFree(pACL);\n\t\tif (psdAdmin) LocalFree(psdAdmin);\n\t\tif (psidAdmin) FreeSid(psidAdmin);\n\t\tif (hImpersonationToken) CloseHandle (hImpersonationToken);\n\t\tif (hToken) CloseHandle (hToken);\n\t}\n\n\treturn fReturn;\n}\n#endif // __WINDOWS__\n\n/****************************************************************************/\n/* main() and friends                                                       */\n/****************************************************************************/\n\nstatic void printHelp(const char *cn,FILE *out)\n{\n\tfprintf(out,\n\t\t\"%s version %d.%d.%d\" ZT_EOL_S,\n\t\tPROGRAM_NAME,\n\t\tZEROTIER_ONE_VERSION_MAJOR, ZEROTIER_ONE_VERSION_MINOR, ZEROTIER_ONE_VERSION_REVISION);\n\tfprintf(out,\n\t\tCOPYRIGHT_NOTICE ZT_EOL_S\n\t\tLICENSE_GRANT ZT_EOL_S);\n\tfprintf(out,\"Usage: %s [-switches] [home directory]\" ZT_EOL_S\"\" ZT_EOL_S,cn);\n\tfprintf(out,\"Available switches:\" ZT_EOL_S);\n\tfprintf(out,\"  -h                - Display this help\" ZT_EOL_S);\n\tfprintf(out,\"  -v                - Show version\" ZT_EOL_S);\n\tfprintf(out,\"  -U                - Skip privilege check and do not attempt to drop privileges\" ZT_EOL_S);\n\tfprintf(out,\"  -p<port>          - Port for UDP and TCP/HTTP (default: 9993, 0 for random)\" ZT_EOL_S);\n\n#ifdef __UNIX_LIKE__\n\tfprintf(out,\"  -d                - Fork and run as daemon (Unix-ish OSes)\" ZT_EOL_S);\n#endif // __UNIX_LIKE__\n\n#ifdef __WINDOWS__\n\tfprintf(out,\"  -C                - Run from command line instead of as service (Windows)\" ZT_EOL_S);\n\tfprintf(out,\"  -I                - Install Windows service (Windows)\" ZT_EOL_S);\n\tfprintf(out,\"  -R                - Uninstall Windows service (Windows)\" ZT_EOL_S);\n\tfprintf(out,\"  -D                - Remove all instances of Windows tap device (Windows)\" ZT_EOL_S);\n#endif // __WINDOWS__\n\n\tfprintf(out,\"  -i                - Generate and manage identities (zerotier-idtool)\" ZT_EOL_S);\n\tfprintf(out,\"  -q                - Query API (zerotier-cli)\" ZT_EOL_S);\n}\n\nclass _OneServiceRunner\n{\npublic:\n\t_OneServiceRunner(const char *pn,const std::string &hd,unsigned int p) : progname(pn),returnValue(0),port(p),homeDir(hd) {}\n\tvoid threadMain()\n\t\tthrow()\n\t{\n\t\ttry {\n\t\t\tfor(;;) {\n\t\t\t\tzt1Service = OneService::newInstance(homeDir.c_str(),port);\n\t\t\t\tswitch(zt1Service->run()) {\n\t\t\t\t\tcase OneService::ONE_STILL_RUNNING: // shouldn't happen, run() won't return until done\n\t\t\t\t\tcase OneService::ONE_NORMAL_TERMINATION:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OneService::ONE_UNRECOVERABLE_ERROR:\n\t\t\t\t\t\tfprintf(stderr,\"%s: fatal error: %s\" ZT_EOL_S,progname,zt1Service->fatalErrorMessage().c_str());\n\t\t\t\t\t\treturnValue = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase OneService::ONE_IDENTITY_COLLISION: {\n\t\t\t\t\t\tdelete zt1Service;\n\t\t\t\t\t\tzt1Service = (OneService *)0;\n\t\t\t\t\t\tstd::string oldid;\n\t\t\t\t\t\tOSUtils::readFile((homeDir + ZT_PATH_SEPARATOR_S + \"identity.secret\").c_str(),oldid);\n\t\t\t\t\t\tif (oldid.length()) {\n\t\t\t\t\t\t\tOSUtils::writeFile((homeDir + ZT_PATH_SEPARATOR_S + \"identity.secret.saved_after_collision\").c_str(),oldid);\n\t\t\t\t\t\t\tOSUtils::rm((homeDir + ZT_PATH_SEPARATOR_S + \"identity.secret\").c_str());\n\t\t\t\t\t\t\tOSUtils::rm((homeDir + ZT_PATH_SEPARATOR_S + \"identity.public\").c_str());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\tcontinue; // restart!\n\t\t\t\t}\n\t\t\t\tbreak; // terminate loop -- normally we don't keep restarting\n\t\t\t}\n\n\t\t\tdelete zt1Service;\n\t\t\tzt1Service = (OneService *)0;\n\t\t} catch ( ... ) {\n\t\t\tfprintf(stderr,\"%s: unexpected exception starting main OneService instance\" ZT_EOL_S,progname);\n\t\t\treturnValue = 1;\n\t\t}\n\t}\n\tconst char *progname;\n\tunsigned int returnValue;\n\tunsigned int port;\n\tconst std::string &homeDir;\n};\n\n#ifdef __WINDOWS__\nint __cdecl _tmain(int argc, _TCHAR* argv[])\n#else\nint main(int argc,char **argv)\n#endif\n{\n#if defined(__LINUX__) && ( (!defined(__GLIBC__)) || ((__GLIBC__ >= 2) && (__GLIBC_MINOR__ >= 18)) )\n\t// This corrects for systems with abnormally small defaults (musl) and also\n\t// shrinks the stack on systems with large defaults to save a bit of memory.\n\tpthread_attr_t tattr;\n\tpthread_attr_init(&tattr);\n\tpthread_attr_setstacksize(&tattr,1048576);\n\tpthread_setattr_default_np(&tattr);\n\tpthread_attr_destroy(&tattr);\n#endif\n\n#ifdef __UNIX_LIKE__\n\tsignal(SIGHUP,&_sighandlerHup);\n\tsignal(SIGPIPE,SIG_IGN);\n\tsignal(SIGIO,SIG_IGN);\n\tsignal(SIGUSR1,SIG_IGN);\n\tsignal(SIGUSR2,SIG_IGN);\n\tsignal(SIGALRM,&_sighandlerReallyQuit);\n\tsignal(SIGINT,&_sighandlerQuit);\n\tsignal(SIGTERM,&_sighandlerQuit);\n\tsignal(SIGQUIT,&_sighandlerQuit);\n\tsignal(SIGINT,&_sighandlerQuit);\n\n\t/* Ensure that there are no inherited file descriptors open from a previous\n\t * incarnation. This is a hack to ensure that GitHub issue #61 or variants\n\t * of it do not return, and should not do anything otherwise bad. */\n\t{\n\t\tint mfd = STDIN_FILENO;\n\t\tif (STDOUT_FILENO > mfd) mfd = STDOUT_FILENO;\n\t\tif (STDERR_FILENO > mfd) mfd = STDERR_FILENO;\n\t\tfor(int f=mfd+1;f<1024;++f)\n\t\t\t::close(f);\n\t}\n\n\tbool runAsDaemon = false;\n#endif // __UNIX_LIKE__\n\n#ifdef __WINDOWS__\n\t{\n\t\tWSADATA wsaData;\n\t\tWSAStartup(MAKEWORD(2,2),&wsaData);\n\t}\n\n#ifdef ZT_WIN_RUN_IN_CONSOLE\n\tbool winRunFromCommandLine = true;\n#else\n\tbool winRunFromCommandLine = false;\n#endif\n#endif // __WINDOWS__\n\n\tif ((strstr(argv[0],\"zerotier-idtool\"))||(strstr(argv[0],\"ZEROTIER-IDTOOL\")))\n\t\treturn idtool(argc,argv);\n\tif ((strstr(argv[0],\"zerotier-cli\"))||(strstr(argv[0],\"ZEROTIER-CLI\")))\n\t\treturn cli(argc,argv);\n\n\tstd::string homeDir;\n\tunsigned int port = ZT_DEFAULT_PORT;\n\tbool skipRootCheck = false;\n\n\tfor(int i=1;i<argc;++i) {\n\t\tif (argv[i][0] == '-') {\n\t\t\tswitch(argv[i][1]) {\n\n\t\t\t\tcase 'p': // port -- for both UDP and TCP, packets and control plane\n\t\t\t\t\tport = Utils::strToUInt(argv[i] + 2);\n\t\t\t\t\tif (port > 0xffff) {\n\t\t\t\t\t\tprintHelp(argv[0],stdout);\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n#ifdef __UNIX_LIKE__\n\t\t\t\tcase 'd': // Run in background as daemon\n\t\t\t\t\trunAsDaemon = true;\n\t\t\t\t\tbreak;\n#endif // __UNIX_LIKE__\n\n\t\t\t\tcase 'U':\n\t\t\t\t\tskipRootCheck = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'v': // Display version\n\t\t\t\t\tprintf(\"%d.%d.%d\" ZT_EOL_S,ZEROTIER_ONE_VERSION_MAJOR,ZEROTIER_ONE_VERSION_MINOR,ZEROTIER_ONE_VERSION_REVISION);\n\t\t\t\t\treturn 0;\n\n\t\t\t\tcase 'i': // Invoke idtool personality\n\t\t\t\t\tif (argv[i][2]) {\n\t\t\t\t\t\tprintHelp(argv[0],stdout);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t} else return idtool(argc-1,argv+1);\n\n\t\t\t\tcase 'q': // Invoke cli personality\n\t\t\t\t\tif (argv[i][2]) {\n\t\t\t\t\t\tprintHelp(argv[0],stdout);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t} else return cli(argc,argv);\n\n#ifdef __WINDOWS__\n\t\t\t\tcase 'C': // Run from command line instead of as Windows service\n\t\t\t\t\twinRunFromCommandLine = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'I': { // Install this binary as a Windows service\n\t\t\t\t\t\tif (IsCurrentUserLocalAdministrator() != TRUE) {\n\t\t\t\t\t\t\tfprintf(stderr,\"%s: must be run as a local administrator.\" ZT_EOL_S,argv[0]);\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstd::string ret(InstallService(ZT_SERVICE_NAME,ZT_SERVICE_DISPLAY_NAME,ZT_SERVICE_START_TYPE,ZT_SERVICE_DEPENDENCIES,ZT_SERVICE_ACCOUNT,ZT_SERVICE_PASSWORD));\n\t\t\t\t\t\tif (ret.length()) {\n\t\t\t\t\t\t\tfprintf(stderr,\"%s: unable to install service: %s\" ZT_EOL_S,argv[0],ret.c_str());\n\t\t\t\t\t\t\treturn 3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t} break;\n\n\t\t\t\tcase 'R': { // Uninstall this binary as Windows service\n\t\t\t\t\t\tif (IsCurrentUserLocalAdministrator() != TRUE) {\n\t\t\t\t\t\t\tfprintf(stderr,\"%s: must be run as a local administrator.\" ZT_EOL_S,argv[0]);\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstd::string ret(UninstallService(ZT_SERVICE_NAME));\n\t\t\t\t\t\tif (ret.length()) {\n\t\t\t\t\t\t\tfprintf(stderr,\"%s: unable to uninstall service: %s\" ZT_EOL_S,argv[0],ret.c_str());\n\t\t\t\t\t\t\treturn 3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t} break;\n\n\t\t\t\tcase 'D': {\n\t\t\t\t\t\tstd::string err = WindowsEthernetTap::destroyAllPersistentTapDevices();\n\t\t\t\t\t\tif (err.length() > 0) {\n\t\t\t\t\t\t\tfprintf(stderr,\"%s: unable to uninstall one or more persistent tap devices: %s\" ZT_EOL_S,argv[0],err.c_str());\n\t\t\t\t\t\t\treturn 3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t} break;\n#endif // __WINDOWS__\n\n\t\t\t\tcase 'h':\n\t\t\t\tcase '?':\n\t\t\t\tdefault:\n\t\t\t\t\tprintHelp(argv[0],stdout);\n\t\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\tif (homeDir.length()) {\n\t\t\t\tprintHelp(argv[0],stdout);\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\thomeDir = argv[i];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!homeDir.length())\n\t\thomeDir = OneService::platformDefaultHomePath();\n\tif (!homeDir.length()) {\n\t\tfprintf(stderr,\"%s: no home path specified and no platform default available\" ZT_EOL_S,argv[0]);\n\t\treturn 1;\n\t} else {\n\t\tstd::vector<std::string> hpsp(OSUtils::split(homeDir.c_str(),ZT_PATH_SEPARATOR_S,\"\",\"\"));\n\t\tstd::string ptmp;\n\t\tif (homeDir[0] == ZT_PATH_SEPARATOR)\n\t\t\tptmp.push_back(ZT_PATH_SEPARATOR);\n\t\tfor(std::vector<std::string>::iterator pi(hpsp.begin());pi!=hpsp.end();++pi) {\n\t\t\tif (ptmp.length() > 0)\n\t\t\t\tptmp.push_back(ZT_PATH_SEPARATOR);\n\t\t\tptmp.append(*pi);\n\t\t\tif ((*pi != \".\")&&(*pi != \"..\")) {\n\t\t\t\tif (!OSUtils::mkdir(ptmp))\n\t\t\t\t\tthrow std::runtime_error(\"home path does not exist, and could not create. Please verify local system permissions.\");\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check and fix permissions on critical files at startup\n\ttry {\n\t\tchar p[4096];\n\t\tOSUtils::ztsnprintf(p, sizeof(p), \"%s\" ZT_PATH_SEPARATOR_S \"identity.secret\", homeDir.c_str());\n\t\tif (OSUtils::fileExists(p)) {\n\t\t\tOSUtils::lockDownFile(p, false);\n\t\t}\n\t}\n\tcatch (...) {\n\t}\n\n\ttry {\n\t\tchar p[4096];\n\t\tOSUtils::ztsnprintf(p, sizeof(p), \"%s\" ZT_PATH_SEPARATOR_S \"authtoken.secret\", homeDir.c_str());\n\t\tif (OSUtils::fileExists(p)) {\n\t\t\tOSUtils::lockDownFile(p, false);\n\t\t}\n\t}\n\tcatch (...) {\n\t}\n\n\t// This can be removed once the new controller code has been around for many versions\n\tif (OSUtils::fileExists((homeDir + ZT_PATH_SEPARATOR_S + \"controller.db\").c_str(),true)) {\n\t\tfprintf(stderr,\"%s: FATAL: an old controller.db exists in %s -- see instructions in controller/README.md for how to migrate!\" ZT_EOL_S,argv[0],homeDir.c_str());\n\t\treturn 1;\n\t}\n\n#ifdef __UNIX_LIKE__\n#ifndef ZT_ONE_NO_ROOT_CHECK\n\tif ((!skipRootCheck)&&(getuid() != 0)) {\n\t\tfprintf(stderr,\"%s: must be run as root (uid 0)\" ZT_EOL_S,argv[0]);\n\t\treturn 1;\n\t}\n#endif // !ZT_ONE_NO_ROOT_CHECK\n\tif (runAsDaemon) {\n\t\tlong p = (long)fork();\n\t\tif (p < 0) {\n\t\t\tfprintf(stderr,\"%s: could not fork\" ZT_EOL_S,argv[0]);\n\t\t\treturn 1;\n\t\t} else if (p > 0)\n\t\t\treturn 0; // forked\n\t\t// else p == 0, so we are daemonized\n\t}\n#endif // __UNIX_LIKE__\n\n#ifdef __WINDOWS__\n\t// Uninstall legacy tap devices. New devices will automatically be installed and configured\n\t// when tap instances are created.\n\tWindowsEthernetTap::destroyAllLegacyPersistentTapDevices();\n\n\tif (winRunFromCommandLine) {\n\t\t// Running in \"interactive\" mode (mostly for debugging)\n\t\tif (IsCurrentUserLocalAdministrator() != TRUE) {\n\t\t\tif (!skipRootCheck) {\n\t\t\t\tfprintf(stderr,\"%s: must be run as a local administrator.\" ZT_EOL_S,argv[0]);\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t} else {\n\t\t\t_winPokeAHole();\n\t\t}\n\t\tSetConsoleCtrlHandler(&_winConsoleCtrlHandler,TRUE);\n\t\t// continues on to ordinary command line execution code below...\n\t} else {\n\t\t// Running from service manager\n\t\t_winPokeAHole();\n\t\tZeroTierOneService zt1WindowsService;\n\t\tif (CServiceBase::Run(zt1WindowsService) == TRUE) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tfprintf(stderr,\"%s: unable to start service (try -h for help)\" ZT_EOL_S,argv[0]);\n\t\t\treturn 1;\n\t\t}\n\t}\n#endif // __WINDOWS__\n\n#ifdef __UNIX_LIKE__\n#ifdef ZT_HAVE_DROP_PRIVILEGES\n\tif (!skipRootCheck)\n\t\tdropPrivileges(argv[0],homeDir);\n#endif\n\n\tstd::string pidPath(homeDir + ZT_PATH_SEPARATOR_S + ZT_PID_PATH);\n\t{\n\t\t// Write .pid file to home folder\n\t\tFILE *pf = fopen(pidPath.c_str(),\"w\");\n\t\tif (pf) {\n\t\t\tfprintf(pf,\"%ld\",(long)getpid());\n\t\t\tfclose(pf);\n\t\t}\n\t}\n#endif // __UNIX_LIKE__\n\n\t_OneServiceRunner thr(argv[0],homeDir,port);\n\tthr.threadMain();\n\t//Thread::join(Thread::start(&thr));\n\n#ifdef __UNIX_LIKE__\n\tOSUtils::rm(pidPath.c_str());\n#endif\n\n\treturn thr.returnValue;\n}\n"
        },
        {
          "name": "osdep",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "rule-compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustybits",
          "type": "tree",
          "content": null
        },
        {
          "name": "selftest.cpp",
          "type": "blob",
          "size": 116.9892578125,
          "content": "/*\n * Copyright (c)2019 ZeroTier, Inc.\n *\n * Use of this software is governed by the Business Source License included\n * in the LICENSE.TXT file in the project's root directory.\n *\n * Change Date: 2026-01-01\n *\n * On the date above, in accordance with the Business Source License, use\n * of this software will be governed by version 2.0 of the Apache License.\n */\n/****/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n#include <stdexcept>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <thread>\n\n#include \"node/Constants.hpp\"\n#include \"node/Hashtable.hpp\"\n#include \"node/RuntimeEnvironment.hpp\"\n#include \"node/InetAddress.hpp\"\n#include \"node/Utils.hpp\"\n#include \"node/Identity.hpp\"\n#include \"node/Buffer.hpp\"\n#include \"node/Packet.hpp\"\n#include \"node/Salsa20.hpp\"\n#include \"node/MAC.hpp\"\n#include \"node/NetworkConfig.hpp\"\n#include \"node/Peer.hpp\"\n#include \"node/Dictionary.hpp\"\n#include \"node/SHA512.hpp\"\n#include \"node/C25519.hpp\"\n#include \"node/Poly1305.hpp\"\n#include \"node/CertificateOfMembership.hpp\"\n#include \"node/Node.hpp\"\n#include \"node/IncomingPacket.hpp\"\n\n#include \"osdep/OSUtils.hpp\"\n#include \"osdep/Phy.hpp\"\n#include \"osdep/PortMapper.hpp\"\n#include \"osdep/Thread.hpp\"\n\n#if defined(ZT_USE_X64_ASM_SALSA2012) && defined(ZT_ARCH_X64)\n#include \"ext/x64-salsa2012-asm/salsa2012.h\"\n#endif\n#ifdef ZT_USE_ARM32_NEON_ASM_SALSA2012\n#include \"ext/arm32-neon-salsa2012-asm/salsa2012.h\"\n#endif\n\n#ifdef __WINDOWS__\n#include <tchar.h>\n#endif\n\nusing namespace ZeroTier;\n\n//////////////////////////////////////////////////////////////////////////////\n\n#define KNOWN_GOOD_IDENTITY \"8e4df28b72:0:ac3d46abe0c21f3cfe7a6c8d6a85cfcffcb82fbd55af6a4d6350657c68200843fa2e16f9418bbd9702cae365f2af5fb4c420908b803a681d4daef6114d78a2d7:bd8dd6e4ce7022d2f812797a80c6ee8ad180dc4ebf301dec8b06d1be08832bddd63a2f1cfa7b2c504474c75bdc8898ba476ef92e8e2d0509f8441985171ff16e\"\n#define KNOWN_BAD_IDENTITY \"9e4df28b72:0:ac3d46abe0c21f3cfe7a6c8d6a85cfcffcb82fbd55af6a4d6350657c68200843fa2e16f9418bbd9702cae365f2af5fb4c420908b803a681d4daef6114d78a2d7:bd8dd6e4ce7022d2f812797a80c6ee8ad180dc4ebf301dec8b06d1be08832bddd63a2f1cfa7b2c504474c75bdc8898ba476ef92e8e2d0509f8441985171ff16e\"\n\nstatic const unsigned char s20TV0Key[32] = { 0x0f,0x62,0xb5,0x08,0x5b,0xae,0x01,0x54,0xa7,0xfa,0x4d,0xa0,0xf3,0x46,0x99,0xec,0x3f,0x92,0xe5,0x38,0x8b,0xde,0x31,0x84,0xd7,0x2a,0x7d,0xd0,0x23,0x76,0xc9,0x1c };\nstatic const unsigned char s20TV0Iv[8] = { 0x28,0x8f,0xf6,0x5d,0xc4,0x2b,0x92,0xf9 };\nstatic const unsigned char s20TV0Ks[64] = { 0x5e,0x5e,0x71,0xf9,0x01,0x99,0x34,0x03,0x04,0xab,0xb2,0x2a,0x37,0xb6,0x62,0x5b,0xf8,0x83,0xfb,0x89,0xce,0x3b,0x21,0xf5,0x4a,0x10,0xb8,0x10,0x66,0xef,0x87,0xda,0x30,0xb7,0x76,0x99,0xaa,0x73,0x79,0xda,0x59,0x5c,0x77,0xdd,0x59,0x54,0x2d,0xa2,0x08,0xe5,0x95,0x4f,0x89,0xe4,0x0e,0xb7,0xaa,0x80,0xa8,0x4a,0x61,0x76,0x66,0x3f };\n\nstatic const unsigned char s2012TV0Key[32] = { 0x0f,0x62,0xb5,0x08,0x5b,0xae,0x01,0x54,0xa7,0xfa,0x4d,0xa0,0xf3,0x46,0x99,0xec,0x3f,0x92,0xe5,0x38,0x8b,0xde,0x31,0x84,0xd7,0x2a,0x7d,0xd0,0x23,0x76,0xc9,0x1c };\nstatic const unsigned char s2012TV0Iv[8] = { 0x28,0x8f,0xf6,0x5d,0xc4,0x2b,0x92,0xf9 };\nstatic const unsigned char s2012TV0Ks[64] = { 0x99,0xDB,0x33,0xAD,0x11,0xCE,0x0C,0xCB,0x3B,0xFD,0xBF,0x8D,0x0C,0x18,0x16,0x04,0x52,0xD0,0x14,0xCD,0xE9,0x89,0xB4,0xC4,0x11,0xA5,0x59,0xFF,0x7C,0x20,0xA1,0x69,0xE6,0xDC,0x99,0x09,0xD8,0x16,0xBE,0xCE,0xDC,0x40,0x63,0xCE,0x07,0xCE,0xA8,0x28,0xF4,0x4B,0xF9,0xB6,0xC9,0xA0,0xA0,0xB2,0x00,0xE1,0xB5,0x2A,0xF4,0x18,0x59,0xC5 };\n\nstatic const unsigned char poly1305TV0Input[32] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };\nstatic const unsigned char poly1305TV0Key[32] = { 0x74,0x68,0x69,0x73,0x20,0x69,0x73,0x20,0x33,0x32,0x2d,0x62,0x79,0x74,0x65,0x20,0x6b,0x65,0x79,0x20,0x66,0x6f,0x72,0x20,0x50,0x6f,0x6c,0x79,0x31,0x33,0x30,0x35 };\nstatic const unsigned char poly1305TV0Tag[16] = { 0x49,0xec,0x78,0x09,0x0e,0x48,0x1e,0xc6,0xc2,0x6b,0x33,0xb9,0x1c,0xcc,0x03,0x07 };\n\nstatic const unsigned char poly1305TV1Input[12] = { 0x48,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x21 };\nstatic const unsigned char poly1305TV1Key[32] = { 0x74,0x68,0x69,0x73,0x20,0x69,0x73,0x20,0x33,0x32,0x2d,0x62,0x79,0x74,0x65,0x20,0x6b,0x65,0x79,0x20,0x66,0x6f,0x72,0x20,0x50,0x6f,0x6c,0x79,0x31,0x33,0x30,0x35 };\nstatic const unsigned char poly1305TV1Tag[16] = { 0xa6,0xf7,0x45,0x00,0x8f,0x81,0xc9,0x16,0xa2,0x0d,0xcc,0x74,0xee,0xf2,0xb2,0xf0 };\n\nstatic const char *sha512TV0Input = \"supercalifragilisticexpealidocious\";\nstatic const unsigned char sha512TV0Digest[64] = { 0x18,0x2a,0x85,0x59,0x69,0xe5,0xd3,0xe6,0xcb,0xf6,0x05,0x24,0xad,0xf2,0x88,0xd1,0xbb,0xf2,0x52,0x92,0x81,0x24,0x31,0xf6,0xd2,0x52,0xf1,0xdb,0xc1,0xcb,0x44,0xdf,0x21,0x57,0x3d,0xe1,0xb0,0x6b,0x68,0x75,0x95,0x9f,0x3b,0x6f,0x87,0xb1,0x13,0x81,0xd0,0xbc,0x79,0x2c,0x43,0x3a,0x13,0x55,0x3c,0xe0,0x84,0xc2,0x92,0x55,0x31,0x1c };\n\nstruct C25519TestVector\n{\n\tunsigned char pub1[64];\n\tunsigned char priv1[64];\n\tunsigned char pub2[64];\n\tunsigned char priv2[64];\n\tunsigned char agreement[64];\n\tunsigned char agreementSignedBy1[96];\n\tunsigned char agreementSignedBy2[96];\n};\n\n#define ZT_NUM_C25519_TEST_VECTORS 32\n\nstatic const C25519TestVector C25519_TEST_VECTORS[ZT_NUM_C25519_TEST_VECTORS] = {\n\t{{0xa1,0xfc,0x7a,0xb4,0x6d,0xdf,0x7d,0xcf,0xe7,0xec,0x75,0xe5,0xfa,0xdd,0x11,0xcb,0xcc,0x37,0xf8,0x84,0x5d,0x1c,0x92,0x4e,0x09,0x89,0x65,0xfc,0xd8,0xe9,0x5a,0x30,0xda,0xe4,0x86,0xa3,0x35,0xb4,0x19,0x0c,0xbc,0x7b,0xcb,0x3e,0xb9,0x4c,0xbd,0x16,0xe8,0x3d,0x13,0x2b,0xc9,0xc3,0x39,0xea,0xf1,0x42,0xe7,0x6f,0x69,0x78,0x9a,0xb7},{0xe5,0xf3,0x7b,0xd4,0x0e,0xc9,0xdc,0x77,0x50,0x86,0xdc,0xf4,0x2e,0xbc,0xdb,0x27,0xf0,0x73,0xd4,0x58,0x73,0xc4,0x4b,0x71,0x8b,0x3c,0xc5,0x4f,0xa8,0x7c,0xa4,0x84,0xd9,0x96,0x23,0x73,0xb4,0x03,0x16,0xbf,0x1e,0xa1,0x2d,0xd8,0xc4,0x8a,0xe7,0x82,0x10,0xda,0xc9,0xe5,0x45,0x9b,0x01,0xdc,0x73,0xa6,0xc9,0x17,0xa8,0x15,0x31,0x6d},{0x3e,0x49,0xa4,0x0e,0x3a,0xaf,0xa3,0x07,0x3d,0xf7,0x2a,0xec,0x43,0xb1,0xd4,0x09,0x1a,0xcb,0x8e,0x92,0xf9,0x65,0x95,0x04,0x6d,0x2d,0x9b,0x34,0xa3,0xbf,0x51,0x00,0xe2,0xee,0x23,0xf5,0x28,0x0a,0xa9,0xb1,0x57,0x0b,0x96,0x56,0x62,0xba,0x12,0x94,0xaf,0xc6,0x5f,0xb5,0x61,0x43,0x0f,0xde,0x0b,0xab,0xfa,0x4f,0xfe,0xc5,0xe7,0x18},{0x00,0x4d,0x41,0x8d,0xe4,0x69,0x23,0xae,0x98,0xc4,0x3e,0x77,0x0f,0x1d,0x94,0x5d,0x29,0x3e,0x94,0x5a,0x38,0x39,0x20,0x0f,0xd3,0x6f,0x76,0xa2,0x29,0x02,0x03,0xcb,0x0b,0x7f,0x4f,0x1a,0x29,0x51,0x13,0x33,0x7c,0x99,0xb3,0x81,0x82,0x39,0x44,0x05,0x97,0xfb,0x0d,0xf2,0x93,0xa2,0x40,0x94,0xf4,0xff,0x5d,0x09,0x61,0xe4,0x5f,0x76},{0xab,0xce,0xd2,0x24,0xe8,0x93,0xb0,0xe7,0x72,0x14,0xdc,0xbb,0x7d,0x0f,0xd8,0x94,0x16,0x9e,0xb5,0x7f,0xd7,0x19,0x5f,0x3e,0x2d,0x45,0xd5,0xf7,0x90,0x0b,0x3e,0x05,0x18,0x2e,0x2b,0xf4,0xfa,0xd4,0xec,0x62,0x4a,0x4f,0x48,0x50,0xaf,0x1c,0xe8,0x9f,0x1a,0xe1,0x3d,0x70,0x49,0x00,0xa7,0xe3,0x5b,0x1e,0xa1,0x9b,0x68,0x1e,0xa1,0x73},{0xed,0xb6,0xd0,0xf0,0x06,0x6e,0x33,0x9c,0x86,0xfb,0xe8,0xc3,0x6c,0x8d,0xde,0xdd,0xa6,0xa0,0x2d,0xb9,0x07,0x29,0xa3,0x13,0xbb,0xa4,0xba,0xec,0x48,0xc8,0xf4,0x56,0x82,0x79,0xe2,0xb1,0xd3,0x3d,0x83,0x9f,0x10,0xe8,0x52,0xe6,0x8b,0x1c,0x33,0x9e,0x2b,0xd2,0xdb,0x62,0x1c,0x56,0xfd,0x50,0x40,0x77,0x81,0xab,0x21,0x67,0x3e,0x09,0x4f,0xf2,0x51,0xac,0x7d,0xe7,0xd1,0x5d,0x4b,0xe2,0x08,0xc6,0x3f,0x6a,0x4d,0xc8,0x5d,0x74,0xf6,0x3b,0xec,0x8e,0xc6,0x0c,0x32,0x27,0x2f,0x9c,0x09,0x48,0x59,0x10},{0x23,0x0f,0xa3,0xe2,0x69,0xce,0xb9,0xb9,0xd1,0x1c,0x4e,0xab,0x63,0xc9,0x2e,0x1e,0x7e,0xa2,0xa2,0xa0,0x49,0x2e,0x78,0xe4,0x8a,0x02,0x3b,0xa7,0xab,0x1f,0xd4,0xce,0x05,0xe2,0x80,0x09,0x09,0x3c,0x61,0xc7,0x10,0x3a,0x9c,0xf4,0x95,0xac,0x89,0x6f,0x23,0xb3,0x09,0xe2,0x24,0x3f,0xf6,0x96,0x02,0x36,0x41,0x16,0x32,0xe1,0x66,0x05,0x4f,0xf2,0x51,0xac,0x7d,0xe7,0xd1,0x5d,0x4b,0xe2,0x08,0xc6,0x3f,0x6a,0x4d,0xc8,0x5d,0x74,0xf6,0x3b,0xec,0x8e,0xc6,0x0c,0x32,0x27,0x2f,0x9c,0x09,0x48,0x59,0x10}},\n\t{{0xfd,0x81,0x14,0xf1,0x67,0x07,0x44,0xbb,0x93,0x84,0xa2,0xdc,0x36,0xdc,0xcc,0xb3,0x9e,0x82,0xd4,0x8b,0x42,0x56,0xfb,0xf2,0x6e,0x83,0x3b,0x16,0x2c,0x29,0xfb,0x39,0x29,0x48,0x85,0xe3,0xe3,0xf7,0xe7,0x80,0x49,0xd3,0x01,0x30,0x5a,0x2c,0x3f,0x4c,0xea,0x13,0xeb,0xda,0xf4,0x56,0x75,0x8d,0x50,0x1e,0x19,0x2d,0x29,0x2b,0xfb,0xdb},{0x85,0x34,0x4d,0xf7,0x39,0xbf,0x98,0x79,0x8c,0x98,0xeb,0x8d,0x61,0x27,0xec,0x87,0x56,0xcd,0xd0,0xa6,0x55,0x77,0xee,0xf0,0x20,0xd0,0x59,0x39,0x95,0xab,0x29,0x82,0x8e,0x61,0xf8,0xad,0xed,0xb6,0x27,0xc3,0xd8,0x16,0xce,0x67,0x78,0xe2,0x04,0x4b,0x0c,0x2d,0x2f,0xc3,0x24,0x72,0xbc,0x53,0xbd,0xfe,0x39,0x23,0xd4,0xaf,0x27,0x84},{0x11,0xbe,0x5f,0x5a,0x73,0xe7,0x42,0xef,0xff,0x3c,0x47,0x6a,0x0e,0x6b,0x9e,0x96,0x21,0xa3,0xdf,0x49,0xe9,0x3f,0x40,0xfc,0xab,0xb3,0x66,0xd3,0x3d,0xfa,0x02,0x29,0xf3,0x43,0x45,0x3c,0x70,0xa3,0x5d,0x39,0xf7,0xc0,0x6a,0xcd,0xfa,0x1d,0xbe,0x3b,0x91,0x41,0xe4,0xb0,0x60,0xc0,0x22,0xf7,0x2c,0x11,0x2b,0x1c,0x5f,0x24,0xef,0x53},{0xfd,0x3f,0x09,0x06,0xc9,0x39,0x8d,0x48,0xfa,0x6b,0xc9,0x80,0xbf,0xf6,0xd6,0x76,0xb3,0x62,0x70,0x88,0x4f,0xde,0xde,0xb9,0xb4,0xf0,0xce,0xf3,0x74,0x0d,0xea,0x00,0x9e,0x9c,0x29,0xe1,0xa2,0x1b,0xbd,0xb5,0x83,0xcc,0x12,0xd8,0x48,0x08,0x5b,0xe5,0xd6,0xf9,0x11,0x5c,0xe0,0xd9,0xc3,0x3c,0x26,0xbd,0x69,0x9f,0x5c,0x6f,0x0c,0x6f},{0xca,0xd4,0x76,0x32,0x8b,0xbe,0x0c,0x65,0x75,0x43,0x73,0xc2,0xf2,0xfd,0x7f,0xeb,0xe4,0x62,0xc5,0x0d,0x0f,0xf9,0x01,0xc8,0xb9,0xfa,0xca,0xb4,0x12,0x1c,0xb4,0xac,0x0e,0x5f,0x18,0xfc,0x0c,0x7f,0x2a,0x55,0xc5,0xfd,0x4d,0x83,0xb2,0x02,0x31,0x6a,0x3f,0x14,0xee,0x9d,0x11,0xa8,0x06,0xad,0xeb,0x93,0x19,0x79,0xb1,0xf2,0x78,0x05},{0x85,0xe6,0xe2,0xf2,0x96,0xe7,0xa2,0x8b,0x7e,0x36,0xbd,0x7b,0xf4,0x28,0x6a,0xd7,0xbc,0x2a,0x6a,0x59,0xfd,0xc0,0xc8,0x3d,0x50,0x0f,0x0c,0x2b,0x12,0x3a,0x75,0xc7,0x56,0xbb,0x7f,0x7d,0x4e,0xd4,0x03,0xb8,0x7b,0xde,0xde,0x99,0x65,0x9e,0xc4,0xa6,0x6e,0xfe,0x00,0x88,0xeb,0x9d,0xa4,0xa9,0x9d,0x37,0xc9,0x4a,0xcf,0x69,0xc4,0x01,0xba,0xa8,0xce,0xeb,0x72,0xcb,0x64,0x8b,0x9f,0xc1,0x1f,0x9a,0x9e,0x99,0xcc,0x39,0xec,0xd9,0xbb,0xd9,0xce,0xc2,0x74,0x6f,0xd0,0x2a,0xb9,0xc6,0xe3,0xf5,0xe7,0xf4},{0xb1,0x39,0x50,0xb1,0x1a,0x08,0x42,0x2b,0xdd,0x6d,0x20,0x9f,0x0f,0x37,0xba,0x69,0x97,0x21,0x30,0x7a,0x71,0x2f,0xce,0x98,0x09,0x04,0xa2,0x98,0x6a,0xed,0x02,0x1d,0x5d,0x30,0x8f,0x03,0x47,0x6b,0x89,0xfd,0xf7,0x1a,0xca,0x46,0x6f,0x51,0x69,0x9a,0x2b,0x18,0x77,0xe4,0xad,0x0d,0x7a,0x66,0xd2,0x2c,0x28,0xa0,0xd3,0x0a,0x99,0x0d,0xba,0xa8,0xce,0xeb,0x72,0xcb,0x64,0x8b,0x9f,0xc1,0x1f,0x9a,0x9e,0x99,0xcc,0x39,0xec,0xd9,0xbb,0xd9,0xce,0xc2,0x74,0x6f,0xd0,0x2a,0xb9,0xc6,0xe3,0xf5,0xe7,0xf4}},\n\t{{0x02,0x3a,0x7e,0x0c,0x6d,0x96,0x3c,0x5d,0x44,0x56,0x5d,0xc1,0x49,0x94,0x35,0x12,0x9d,0xff,0x8a,0x5d,0x91,0x74,0xa8,0x15,0xee,0x5d,0x1e,0x72,0xbe,0x86,0x15,0x68,0xe7,0x36,0xa2,0x4a,0xb8,0xa2,0xa4,0x4c,0xd8,0x95,0xe3,0xc7,0xbb,0x32,0x21,0x90,0x64,0x52,0x32,0xeb,0x26,0xd3,0x4f,0xf0,0x8e,0x27,0x40,0xea,0xed,0xdb,0xf5,0xc4},{0x76,0x99,0x64,0x70,0xf4,0x50,0xc8,0xcc,0x4a,0x5a,0xa5,0x0f,0xeb,0x2d,0xc7,0x0e,0x73,0xd0,0x65,0x7d,0xc3,0xce,0x73,0x03,0x20,0x2f,0xad,0x65,0xfd,0x12,0xe4,0x7f,0xfd,0x45,0x3a,0x6e,0xc5,0x9a,0x06,0x67,0x0e,0xa6,0x7b,0x21,0x49,0x2d,0x01,0x1b,0x8e,0x03,0x6e,0x10,0x08,0x0c,0x68,0xd9,0x60,0x47,0xa4,0xe2,0x52,0xfd,0x3c,0xf4},{0xa3,0xe2,0x5f,0x16,0x39,0x78,0x96,0xf7,0x47,0x6f,0x93,0x5d,0x27,0x7b,0x58,0xe0,0xc5,0xdb,0x71,0x7d,0xa9,0x6f,0xf8,0x8b,0x69,0xdd,0x50,0xea,0x91,0x0d,0x66,0x77,0xaf,0x8f,0xd5,0x9f,0x8a,0x26,0x69,0x4c,0x64,0x37,0x62,0x81,0x6f,0x05,0x9a,0x08,0x0d,0xe1,0x69,0x24,0x77,0x3f,0x50,0xb2,0x49,0x4d,0x93,0xef,0x2e,0x87,0xff,0xde},{0xb3,0x32,0xe2,0x67,0x79,0x32,0x5f,0x64,0x47,0x49,0x1c,0xd3,0x8f,0x95,0x44,0xfd,0x4c,0x7e,0xbf,0x6b,0xb7,0xaf,0x2c,0xdd,0x8f,0xa5,0xd8,0x2f,0xbf,0xa0,0x8a,0x6b,0x58,0x25,0xc9,0x12,0x23,0x6f,0xe6,0x05,0xa8,0xd0,0x68,0x6e,0x0c,0xee,0x70,0xe4,0xa3,0x86,0x51,0x04,0x6d,0xca,0xd5,0xed,0xcf,0x74,0x1d,0x60,0x9e,0x86,0x2d,0x05},{0x91,0xf4,0x5f,0x4a,0xcb,0xd8,0xfd,0x5f,0xb9,0x3d,0x04,0xb8,0xec,0x35,0x85,0x4f,0x58,0x20,0xd1,0x1f,0x47,0xc4,0xf4,0xcb,0x21,0x4e,0x9a,0xf1,0x6e,0xbf,0xe3,0xd3,0x62,0xe3,0x82,0xf6,0xba,0xa8,0xdf,0x92,0xe2,0x3c,0xe5,0xf0,0x16,0x8a,0xeb,0xa4,0xbb,0xc7,0x81,0xaf,0x15,0x19,0x87,0x5f,0xb7,0xe0,0x4c,0x12,0xff,0x2c,0xa9,0xc8},{0xaf,0x85,0xe0,0x36,0x43,0xdf,0x41,0x17,0xda,0xde,0x5e,0xb6,0x33,0xd0,0xce,0x62,0x70,0x5f,0x85,0x24,0x6c,0x3e,0x1b,0xe1,0x52,0xc1,0x9b,0x1c,0xcd,0x61,0x80,0x9c,0xa0,0xe8,0x18,0xee,0x40,0x91,0x93,0x82,0xdb,0x33,0x44,0xff,0xd4,0xf6,0x6f,0x5d,0xf0,0x0e,0x92,0x92,0x81,0x55,0x46,0x06,0xac,0x58,0x81,0x3b,0x04,0xc7,0xf7,0x0d,0xd2,0x0c,0x08,0x6d,0x46,0xdb,0x43,0x28,0x31,0xd8,0xcd,0x87,0x50,0xbb,0xd3,0x07,0xf5,0x72,0x0b,0x15,0x7c,0x16,0xab,0x03,0xd9,0x4b,0x07,0x38,0x97,0xe8,0xd6,0xb5},{0x93,0xff,0x6d,0xc3,0x62,0xf7,0xcc,0x20,0x95,0xc2,0x2f,0x7d,0x1d,0x9b,0xd1,0x63,0xfc,0x61,0x47,0xb3,0x22,0x0f,0xca,0xb0,0x16,0xcf,0x29,0x53,0x46,0x97,0xb1,0x36,0x46,0xac,0x48,0x13,0x92,0xe4,0x46,0x68,0xcf,0x09,0x4e,0xfa,0x59,0x45,0x24,0x08,0xdb,0xb4,0x6f,0x20,0x55,0x12,0xd9,0x75,0x9d,0x8e,0x0b,0xf8,0x63,0xe0,0xf9,0x01,0xd2,0x0c,0x08,0x6d,0x46,0xdb,0x43,0x28,0x31,0xd8,0xcd,0x87,0x50,0xbb,0xd3,0x07,0xf5,0x72,0x0b,0x15,0x7c,0x16,0xab,0x03,0xd9,0x4b,0x07,0x38,0x97,0xe8,0xd6,0xb5}},\n\t{{0x14,0x35,0xa6,0x7d,0xc1,0xb5,0x71,0xca,0x42,0x50,0x90,0xa7,0x72,0x85,0xbe,0x78,0x7a,0x5f,0x83,0x1e,0xbe,0xef,0x6a,0xbe,0x48,0xc5,0x68,0x14,0x0c,0xf7,0x44,0x5c,0x2e,0xfd,0x1b,0xcc,0xee,0x09,0x23,0x82,0x31,0xad,0xaf,0x4b,0x73,0x9c,0xf2,0x88,0x3c,0xf3,0xb5,0x43,0x8b,0x53,0xf9,0xac,0x17,0x86,0x1c,0xc2,0x53,0x43,0xec,0x03},{0x7b,0x36,0x6c,0xcc,0xb5,0xb2,0x23,0x3d,0x7c,0xe5,0xe7,0xcf,0x06,0xe2,0x32,0x0b,0xc5,0x3b,0x7f,0x86,0x40,0xfc,0xaf,0xba,0x94,0xe0,0x88,0x58,0x5b,0xac,0xe8,0xc3,0xe8,0xc3,0xdf,0xc4,0x45,0x29,0xe8,0xf0,0x1c,0x10,0x0d,0x50,0x81,0x29,0x30,0xa8,0x27,0xb5,0x3e,0xb8,0x25,0xf1,0x17,0x30,0xc6,0x05,0xe3,0x3e,0x45,0x38,0xa8,0x3c},{0xce,0xd9,0x45,0x28,0xb0,0xce,0xa5,0x47,0xa8,0x29,0x32,0x76,0x99,0x73,0x8d,0x74,0xf9,0xed,0x0a,0xd0,0xf1,0xd8,0x7e,0x44,0x63,0x9e,0x9a,0xcf,0x7c,0x35,0x8a,0x29,0xbb,0x71,0x66,0x8d,0xa7,0xfc,0x05,0x3d,0xd4,0x4b,0x65,0x20,0xf5,0xa4,0x64,0xd8,0x9d,0x16,0x80,0x9c,0xb2,0x3c,0x3e,0xd4,0x9d,0x09,0x88,0x8e,0xbb,0x58,0xf8,0x77},{0xe1,0x29,0xb3,0x16,0xe6,0xa0,0xdb,0x64,0x08,0x36,0xdc,0x33,0xad,0x8b,0x30,0x26,0x17,0x56,0xd7,0x34,0x17,0xd1,0xdd,0x23,0x38,0x58,0x25,0x01,0x42,0x5a,0x9d,0x18,0x3e,0xac,0x31,0xfa,0x43,0x28,0xc4,0x65,0xfb,0x30,0x2f,0x8c,0x16,0x52,0x32,0x1b,0x19,0xb7,0x31,0xf6,0x67,0xa7,0xd8,0xed,0x9a,0xa3,0x95,0x01,0xd7,0xb9,0xe7,0xcc},{0x81,0x2d,0x11,0xa9,0x11,0xf1,0x22,0xe2,0x67,0x70,0xc4,0xba,0x34,0xa1,0x75,0x8c,0xf6,0x0c,0x63,0xe7,0x01,0x3c,0x64,0x6c,0xe8,0xd0,0xf8,0x8e,0x88,0xdf,0x5c,0x61,0x68,0x5d,0x1f,0xeb,0x83,0x1f,0x40,0xb8,0xa8,0x56,0x57,0x26,0x81,0x2c,0xa3,0x0e,0x48,0x4c,0x45,0x4d,0x0d,0x3d,0x6e,0x99,0x52,0xbd,0x0b,0xd8,0x05,0xc5,0xf9,0x61},{0x92,0x45,0xbe,0xe6,0xb4,0x7a,0xfa,0x28,0xd4,0x5b,0x6b,0x17,0xc6,0x13,0x61,0x5d,0x5f,0xd7,0x90,0xbb,0x89,0x35,0x7a,0x02,0x50,0x57,0x56,0x5f,0x19,0xb5,0xb6,0xc5,0x77,0x1e,0x1b,0xc0,0xd7,0x7a,0x29,0xbd,0xe7,0x24,0x01,0x2d,0x37,0xc0,0x38,0x6f,0xc8,0x35,0xa1,0x1b,0xe0,0xea,0x16,0xad,0xbc,0xdc,0xd4,0x8d,0x4e,0x71,0xdb,0x05,0x9e,0xb5,0x53,0x6b,0x5c,0xf1,0x7d,0x15,0x8b,0xd7,0xc7,0x8b,0x89,0x9d,0xfd,0x28,0x7c,0xa1,0x31,0xe2,0xf0,0x2c,0x3a,0x8d,0x0e,0x23,0x85,0x4e,0xf0,0xd1,0xc0,0x83},{0x7b,0x88,0xeb,0x45,0x1c,0x7f,0xfd,0xbe,0xba,0xac,0x53,0x28,0x59,0xe8,0xad,0x28,0xf1,0x97,0x2d,0x6c,0x31,0xa6,0xae,0x47,0x10,0x69,0x68,0x55,0xa6,0x9c,0x03,0x62,0xb7,0x2f,0x31,0x46,0x2a,0x2b,0x98,0xdd,0xe9,0xf9,0xfe,0x77,0x71,0x41,0x54,0xf8,0x59,0x02,0x7a,0xe3,0x45,0x67,0xb6,0xf7,0x94,0x31,0x3e,0x62,0x62,0x2a,0xf9,0x0a,0x9e,0xb5,0x53,0x6b,0x5c,0xf1,0x7d,0x15,0x8b,0xd7,0xc7,0x8b,0x89,0x9d,0xfd,0x28,0x7c,0xa1,0x31,0xe2,0xf0,0x2c,0x3a,0x8d,0x0e,0x23,0x85,0x4e,0xf0,0xd1,0xc0,0x83}},\n\t{{0x27,0x4d,0x84,0x08,0x95,0x84,0xc8,0xeb,0x1c,0x9a,0x0f,0xca,0x09,0x6f,0x48,0x8b,0x2b,0x06,0xa0,0xae,0xf2,0xe3,0x8a,0xfe,0xd7,0x52,0x4b,0xf2,0xc6,0x7c,0xc1,0x55,0x87,0x2e,0x5a,0xb4,0xc2,0x43,0x0a,0x0d,0xd0,0x00,0xa8,0xe1,0x46,0x68,0x79,0xd8,0x8c,0x01,0x36,0xb7,0x5a,0x61,0x04,0xe9,0x7e,0xbb,0xc9,0xee,0xaa,0x12,0x13,0xda},{0x78,0x66,0xd0,0xa2,0x50,0x82,0x8d,0xb0,0xa0,0x20,0xac,0xa4,0xb6,0xa0,0x31,0xf7,0x7d,0x93,0x37,0x67,0xbb,0x60,0xa2,0x1e,0x36,0xce,0x3d,0x48,0x1d,0x79,0x99,0xa5,0x19,0xd8,0x89,0x1b,0xcb,0x14,0x87,0xb7,0x62,0xfd,0xd2,0xef,0xbb,0x13,0x41,0x4d,0xf1,0x77,0x5c,0x7f,0x6c,0x3b,0x94,0x7d,0xb4,0xba,0x87,0x3e,0xc8,0xe1,0x3c,0x0a},{0xd9,0x9e,0x14,0x89,0xd6,0xf8,0x49,0xa2,0xe2,0x19,0xfe,0x94,0xaa,0xf7,0x35,0xf9,0x4a,0xf8,0xf3,0x18,0x68,0x96,0x47,0xc6,0x23,0x7c,0xb0,0x53,0xcb,0xd8,0x90,0x31,0xb7,0x50,0x0e,0x06,0xc3,0x84,0x75,0xf1,0xac,0x16,0x4d,0xc1,0xbe,0xf1,0x80,0x33,0x47,0x56,0x6f,0x33,0x94,0x5c,0x81,0x03,0x4c,0x2f,0x6d,0xac,0x73,0xba,0x91,0x3c},{0x2f,0xa9,0xb6,0xe8,0x73,0xe2,0xef,0x6d,0x6d,0xd7,0x2e,0xa0,0x51,0x61,0x24,0x81,0x8c,0xa8,0x47,0x40,0xe1,0xc7,0x75,0x79,0xc8,0xec,0xb2,0x23,0x41,0xad,0x61,0x3b,0xea,0x8a,0xdf,0x63,0xed,0xe1,0x8e,0x50,0x70,0x6e,0x86,0xed,0xb0,0xba,0x27,0x48,0x8e,0xb9,0x63,0x39,0x78,0x58,0x4f,0x1e,0xbc,0x45,0xf3,0xf2,0x3a,0x73,0x9b,0x8c},{0xad,0x42,0xc5,0x84,0xca,0xe1,0xe1,0x23,0x2a,0x73,0x15,0x3c,0x9a,0xfe,0x85,0x8d,0xa3,0x2c,0xcf,0x46,0x8d,0x7f,0x1c,0x61,0xd7,0x0e,0xb1,0xa6,0xb4,0xae,0xab,0x63,0xc4,0x0e,0xf2,0xa0,0x5d,0xa6,0xf3,0x5d,0x35,0x41,0xea,0x03,0x91,0xb1,0x3a,0x07,0xe6,0xed,0x6c,0x8c,0xcb,0x75,0x27,0xf1,0x26,0x58,0xf0,0x62,0x57,0xe4,0x33,0x00},{0x1f,0xed,0x53,0xc6,0xef,0x38,0x26,0xa4,0x18,0x88,0x8f,0x5c,0x49,0x1c,0x15,0x7d,0x77,0x90,0x06,0x39,0xe0,0x7c,0x25,0xed,0x79,0x05,0x66,0xe0,0x5e,0x94,0xe3,0x46,0x6f,0x96,0xd8,0xc1,0x11,0xa4,0x11,0x6f,0x78,0x42,0x8e,0x89,0xc7,0xc3,0xed,0xd2,0x9e,0x68,0x47,0x79,0x89,0x23,0x70,0x14,0x21,0x60,0x2d,0xfe,0x37,0x4b,0xc8,0x0a,0x16,0x73,0x7c,0xc4,0x55,0x3f,0x25,0x04,0x08,0x75,0x74,0x68,0xbc,0xe4,0x3a,0xae,0x4c,0x0e,0xd2,0x85,0xa1,0xbc,0x81,0xc0,0xc9,0xfe,0x9a,0x44,0x7b,0x83,0xdf,0xc7},{0x27,0x77,0x97,0x84,0x0f,0x2d,0x8d,0x33,0xb8,0x4e,0xdb,0x8b,0xea,0x58,0x52,0x88,0x95,0x88,0x55,0x5f,0xb8,0xc4,0xc9,0xd6,0x1f,0x1e,0xee,0x60,0xb5,0xeb,0x78,0x72,0xb5,0xe5,0x22,0x2b,0x7f,0x5e,0xc7,0x9b,0x29,0x55,0x8e,0x2a,0xfc,0x65,0x55,0x4a,0x02,0xad,0x64,0x06,0xd4,0x25,0xe1,0x96,0x6f,0xee,0x96,0xcd,0x29,0xc6,0x64,0x00,0x16,0x73,0x7c,0xc4,0x55,0x3f,0x25,0x04,0x08,0x75,0x74,0x68,0xbc,0xe4,0x3a,0xae,0x4c,0x0e,0xd2,0x85,0xa1,0xbc,0x81,0xc0,0xc9,0xfe,0x9a,0x44,0x7b,0x83,0xdf,0xc7}},\n\t{{0x5e,0xc5,0x5b,0x9c,0xdb,0x14,0x05,0x18,0x6b,0xe2,0x1d,0x16,0x77,0x22,0x0e,0xd2,0xe4,0x57,0x82,0x6e,0x5b,0xc5,0x6a,0xb9,0x34,0x20,0xdb,0x72,0xe2,0xe1,0xeb,0x1b,0x34,0x00,0x04,0xbf,0x83,0xf6,0x4f,0x12,0x45,0x08,0xf0,0x95,0x2a,0xdc,0x3a,0x14,0xb3,0x29,0x0b,0x99,0xcd,0x73,0x31,0xbd,0x04,0xbb,0x49,0x1c,0xde,0xcf,0x09,0x9e},{0x15,0x80,0x3e,0x2a,0xfb,0xc0,0x8d,0x62,0x19,0x27,0x83,0x04,0xcc,0xf5,0xd1,0xbb,0x40,0x41,0xbe,0x93,0x59,0x6e,0x27,0x6d,0x95,0x24,0x0a,0x07,0x27,0x86,0x10,0x75,0xf7,0x0a,0x11,0xfc,0x53,0xd0,0x4c,0x15,0xf8,0x6e,0x22,0x3f,0xeb,0x12,0x97,0x8a,0x3d,0x69,0xd8,0x96,0xc9,0x53,0x10,0x9c,0x02,0x95,0xe4,0xd3,0x1a,0xd5,0x43,0x82},{0x40,0x09,0x2c,0x17,0x7e,0xba,0xce,0x1f,0xfc,0xc1,0x8e,0xc3,0x1c,0xa2,0x34,0x52,0x78,0x16,0x23,0x71,0x82,0x40,0xf8,0x6d,0x67,0x65,0x67,0x50,0x53,0xd9,0xc8,0x5e,0x7e,0x8a,0x98,0xa3,0xc6,0x2a,0x4d,0x27,0xf3,0xb9,0xbb,0xae,0x43,0x29,0x6e,0x02,0x1c,0xe9,0x01,0xd6,0xcd,0xd8,0x91,0x44,0x95,0x2b,0x9e,0xa5,0x4f,0xd0,0x00,0xb9},{0x3a,0xe8,0x3d,0xb3,0x32,0xdc,0xc2,0xc8,0xe3,0x36,0x2f,0xc9,0x30,0x3a,0xc0,0x76,0x56,0xd3,0x0b,0x06,0xbe,0x8f,0xe7,0xf1,0x66,0x61,0x25,0x42,0x28,0xdc,0x08,0x81,0x84,0x3a,0x57,0x96,0x27,0xa6,0xcf,0xd6,0x8f,0x35,0xa2,0xc3,0x76,0x86,0x4f,0xcf,0x5f,0xa1,0x85,0x28,0x4f,0x4a,0x3a,0xbb,0x5c,0x25,0x4b,0xcc,0x46,0xfe,0xf2,0x04},{0x62,0xc8,0xa2,0x0a,0x59,0xb8,0x97,0xd2,0x68,0x94,0x00,0x3b,0x01,0xac,0x91,0x6e,0x97,0x8e,0x08,0xe3,0xfe,0x9f,0x9e,0x9f,0x4b,0xcc,0x5d,0x1d,0xb9,0xbf,0x07,0x83,0xfe,0x51,0x2a,0xdf,0x79,0x2e,0x07,0xc9,0x98,0x9b,0xbe,0xb6,0xe4,0x0a,0x20,0x44,0x86,0xea,0xb1,0x61,0x58,0x11,0x32,0x8e,0x7b,0xb9,0x67,0x2d,0xf0,0x78,0xb2,0x93},{0x1a,0x65,0xb3,0x6f,0xa2,0x45,0x29,0x53,0xd7,0x23,0x4d,0xff,0x8e,0xe9,0xb9,0xef,0x16,0xa0,0xdd,0x48,0xdf,0x70,0xd2,0xe1,0x56,0xca,0xd1,0xd0,0x4a,0x9d,0x63,0x92,0x2b,0xfd,0x7b,0x87,0x39,0x3c,0x12,0xc7,0xe5,0x91,0x31,0x95,0x78,0xc4,0x58,0x95,0x89,0x6e,0x2c,0x90,0xb4,0x0b,0xb2,0xfe,0x52,0xc0,0x86,0xc4,0x2e,0x56,0x97,0x0c,0x20,0xf2,0xbc,0x6a,0x9b,0x89,0xfb,0xe9,0x85,0x95,0xd6,0x22,0x5e,0x4d,0x6d,0x83,0x9d,0xf4,0xbe,0x66,0x05,0x32,0xb6,0xe2,0xf1,0x96,0x42,0xa4,0xc8,0x8c,0x1b,0xec},{0x43,0x85,0xff,0xb9,0xcf,0x04,0x83,0x40,0x70,0x3a,0x9c,0x48,0xb4,0xc2,0x99,0x3b,0xa0,0x39,0xf1,0x39,0x58,0x7f,0xd2,0x49,0x94,0x3c,0xc3,0xe1,0xb6,0x56,0x38,0x55,0x6f,0xb5,0x1a,0x90,0xa2,0x04,0x2f,0x19,0xf8,0xb1,0x65,0x5a,0xad,0xcd,0x1c,0x56,0x42,0x38,0xc2,0x52,0x09,0xd6,0x41,0x98,0x5d,0x5f,0xa5,0xe7,0xc2,0x55,0xa1,0x09,0x20,0xf2,0xbc,0x6a,0x9b,0x89,0xfb,0xe9,0x85,0x95,0xd6,0x22,0x5e,0x4d,0x6d,0x83,0x9d,0xf4,0xbe,0x66,0x05,0x32,0xb6,0xe2,0xf1,0x96,0x42,0xa4,0xc8,0x8c,0x1b,0xec}},\n\t{{0xf2,0x4a,0x96,0x57,0xc3,0x2f,0xe6,0x9f,0xed,0x7f,0xcc,0xe9,0xea,0xbe,0xd2,0x23,0x4e,0x47,0x13,0xd9,0x53,0x19,0x31,0x14,0x0a,0xd3,0x9b,0x95,0xa7,0x9c,0x88,0x5e,0x08,0xb2,0x16,0xda,0x45,0x61,0x1d,0x6b,0xdf,0xb1,0x14,0x0c,0x66,0xfd,0x3a,0xbe,0x25,0xdc,0xfd,0xcd,0xcc,0x5e,0x28,0x77,0x5a,0xa9,0x8b,0x84,0x77,0x26,0x9d,0xa6},{0xea,0xde,0x4d,0xab,0x09,0x02,0xbf,0x90,0xf8,0xae,0x8b,0x50,0x01,0xb2,0x9d,0x7c,0x0a,0x3b,0x60,0xda,0x34,0xa9,0xbb,0x4d,0xa5,0x53,0x18,0x65,0xec,0xaa,0xc9,0x29,0xb2,0xf7,0x74,0x14,0x63,0x5f,0x88,0xcf,0x4e,0x70,0x1b,0x11,0x64,0x73,0x15,0x6b,0x5a,0x8c,0xb8,0x4e,0x0f,0x83,0xae,0x4b,0x5c,0x52,0x1c,0x6a,0x0f,0x54,0x77,0xc8},{0xae,0xff,0x55,0xbf,0x78,0xb5,0xde,0x33,0xeb,0x87,0xea,0x13,0x7d,0x36,0x22,0x06,0x32,0xc4,0x7e,0xca,0x65,0x37,0xcc,0x83,0x0e,0xda,0x54,0xb3,0xd2,0xe6,0xe7,0x7f,0xe1,0x90,0x11,0x25,0x16,0x83,0x25,0x43,0xb4,0x38,0x06,0xbb,0x6c,0x62,0x7d,0x84,0x1f,0xf3,0x7b,0xeb,0xae,0x50,0xd8,0xfb,0xb9,0xf2,0xf9,0xc3,0x6f,0x59,0xb7,0xb0},{0x95,0x15,0x83,0x19,0x56,0x9c,0x11,0xd8,0x31,0x87,0x1d,0xe3,0x3f,0x07,0x89,0xb2,0xcb,0x81,0xf0,0xeb,0x0b,0x1e,0x74,0x08,0xa2,0x4a,0x0e,0x82,0xc6,0x45,0x8c,0x32,0xb4,0x8f,0xfd,0x76,0xeb,0x5e,0xc7,0x62,0xdc,0xcb,0xee,0xad,0xcf,0xcf,0xea,0x33,0x9d,0xb0,0x02,0x64,0x66,0x77,0x14,0x97,0x0c,0x6e,0x79,0xe8,0x58,0x32,0x0f,0xe6},{0xcb,0x2f,0xaf,0x53,0xd8,0x41,0x48,0x41,0x6f,0x36,0x78,0x80,0x83,0x5c,0x0d,0x4c,0x1b,0xf4,0x39,0xe0,0x34,0x4f,0xc2,0xb2,0x4e,0xf0,0xac,0xc2,0xf8,0x15,0x7a,0x81,0x9f,0x46,0x2b,0xe3,0xb9,0x39,0x05,0x89,0xa2,0xda,0x1a,0x63,0x51,0xb4,0x78,0x0f,0xfe,0x2f,0x9d,0xce,0x99,0x38,0xa9,0x7e,0xcb,0x80,0x57,0x9f,0xa2,0x28,0x0f,0x6a},{0x1b,0xec,0x67,0x50,0xd1,0x28,0x65,0x55,0xb8,0xde,0x3b,0x2e,0x1e,0x33,0xd8,0x1b,0xba,0x2e,0x78,0x6a,0xb8,0x0b,0x8c,0xa0,0x55,0x34,0x25,0x90,0x9a,0xe2,0xf5,0xaa,0x95,0x0c,0x6f,0x2a,0xb0,0x92,0x1d,0x48,0x5b,0x56,0x8c,0x82,0x8f,0xa7,0x15,0x75,0x26,0x61,0x85,0xc8,0x7d,0xda,0xf5,0x2a,0xf3,0x3c,0x34,0xc1,0x20,0x67,0xbb,0x04,0xec,0x7c,0xe2,0xcb,0x31,0xcf,0x23,0xda,0x5d,0x8a,0x05,0x00,0x9b,0x23,0x34,0xd0,0xed,0x56,0x10,0x0a,0x90,0x6b,0x73,0x26,0x6b,0xf0,0xd7,0xbc,0xd8,0xc7,0x89,0xc8},{0x90,0x43,0x54,0x87,0x44,0x00,0x07,0xca,0xa8,0x2b,0xec,0x55,0xa0,0xd2,0x8c,0x07,0x03,0xaa,0x61,0x1a,0x7d,0x0f,0x90,0x13,0x67,0x99,0x46,0x20,0xcd,0x70,0xcb,0xa7,0x96,0xdf,0x0c,0x13,0xc4,0x41,0x11,0xd6,0xc3,0x33,0x02,0x96,0x4f,0x1d,0xbd,0x06,0xa9,0xa1,0x31,0x0a,0xc3,0xdf,0x6d,0x52,0x6c,0xc6,0xbe,0xc5,0xb6,0x2a,0xb1,0x0f,0xec,0x7c,0xe2,0xcb,0x31,0xcf,0x23,0xda,0x5d,0x8a,0x05,0x00,0x9b,0x23,0x34,0xd0,0xed,0x56,0x10,0x0a,0x90,0x6b,0x73,0x26,0x6b,0xf0,0xd7,0xbc,0xd8,0xc7,0x89,0xc8}},\n\t{{0x4f,0x3a,0xdd,0x0f,0xcf,0x7f,0x27,0xda,0x27,0xc4,0xa6,0x2b,0x6b,0xd1,0x9f,0x59,0x73,0x5f,0xd4,0xb7,0xf0,0x86,0x16,0xc9,0xdd,0xa6,0xf9,0x9b,0x17,0xb2,0xb9,0x71,0xe7,0x4c,0xa1,0x17,0x79,0xe0,0xcc,0xae,0x10,0xec,0x28,0x3a,0x09,0xf2,0x8b,0x34,0x9c,0xac,0x16,0x2a,0xa9,0x21,0xe8,0xa7,0x18,0xc0,0xc4,0x9f,0x30,0xa0,0x25,0x62},{0x23,0x4c,0xd4,0xae,0x52,0x30,0xf6,0x64,0xb9,0xe1,0x47,0xca,0xf8,0xf3,0x3a,0x6b,0x8b,0xf3,0x29,0xe2,0x9b,0x5d,0xbb,0x0a,0x60,0x52,0x03,0x40,0x53,0x5c,0x9e,0x35,0x03,0xd4,0xec,0xd7,0x67,0xf4,0x92,0xd2,0x98,0x96,0xf2,0xa7,0xf4,0x25,0x6a,0x80,0x9c,0x75,0xc6,0xf2,0x1f,0x67,0x11,0x00,0x0d,0xda,0x1e,0xb2,0x58,0xa7,0x8c,0x39},{0x55,0x1b,0x80,0xbb,0xf3,0xc5,0x1a,0x84,0x34,0xf5,0x0a,0x8a,0x8a,0xe1,0x8c,0xea,0xa6,0xfb,0xd0,0x26,0xc9,0xa2,0x30,0x37,0x3e,0xba,0x98,0xfe,0x81,0x8a,0x52,0x37,0x0b,0x74,0x4e,0x3d,0x26,0x8f,0x82,0x4b,0xc0,0x6a,0x01,0x10,0x91,0x8f,0x89,0xb5,0x62,0x3f,0x1e,0x70,0xcc,0x25,0x77,0x39,0x74,0x88,0xdd,0xbc,0xbe,0x72,0x08,0x63},{0xe2,0x9a,0x46,0xd2,0x74,0xdc,0x0f,0x8a,0xa3,0xbd,0x20,0xb7,0xc7,0xd9,0x83,0x4b,0x58,0xa6,0xe3,0xbd,0xc5,0x00,0xb6,0x18,0x04,0x25,0x81,0xbd,0x99,0xb3,0xb1,0x2a,0x7a,0x68,0x6d,0xe1,0x3e,0x23,0x8d,0x29,0x9e,0x7a,0x30,0x56,0x4c,0x22,0xb6,0xf4,0x7d,0x7d,0x4f,0xfd,0x76,0xa5,0x9d,0x05,0x41,0x7c,0x7a,0x2d,0x7b,0xbe,0xcf,0x73},{0x7b,0xae,0x11,0x86,0x8a,0x38,0xbd,0x56,0x3c,0xf3,0x3c,0x9c,0x49,0xa4,0x68,0x0f,0x2b,0xdf,0xf2,0xa1,0xbc,0xc2,0xed,0x08,0x09,0x96,0xd0,0x7e,0x9b,0xe3,0x0a,0x72,0x13,0x03,0xd4,0x35,0x0a,0x94,0x60,0x09,0x4a,0xaa,0xca,0x35,0x8e,0xed,0x12,0xdd,0x26,0x8f,0xf8,0xa9,0xa2,0x8a,0x7f,0xac,0xf3,0x09,0xc7,0x22,0xc5,0x73,0xec,0xa0},{0xe9,0xc5,0x57,0x0d,0x85,0xbf,0x10,0xe2,0xd1,0xf5,0xd7,0x22,0xe9,0x6a,0x67,0x8d,0xd3,0x9f,0x1a,0xef,0x7f,0xc0,0x2b,0xe1,0xfd,0x2c,0xc2,0x5f,0x39,0xf9,0x34,0xd0,0x87,0x94,0x41,0x8a,0x65,0xa5,0x20,0x48,0xa4,0x20,0x5f,0x7a,0xc7,0x37,0x00,0x60,0x59,0x84,0x2a,0x1d,0xff,0x02,0xc3,0xe8,0x20,0xaa,0x39,0x13,0xac,0xf3,0xd7,0x05,0xbd,0xef,0x11,0x66,0x71,0xb8,0x9f,0x1e,0xe5,0xee,0x2e,0x37,0xfb,0x34,0xed,0xc5,0xa4,0x40,0x6e,0x38,0x31,0x0a,0x1c,0xaf,0x0d,0xd3,0x98,0xac,0x12,0x40,0xea,0x9c},{0xc6,0xcd,0x7a,0xbd,0x14,0xdb,0xe4,0xed,0xbf,0x46,0x70,0x23,0xbd,0xdb,0xc3,0xce,0x60,0xd5,0x6b,0x17,0x4c,0x23,0xfa,0x78,0x05,0xcc,0x18,0xed,0x42,0x03,0xa5,0xb7,0xdf,0x28,0x0e,0xd4,0x5d,0x31,0xd8,0xb9,0xdc,0xe9,0xf6,0x26,0xc5,0xe1,0xb3,0x80,0x0d,0x62,0xaf,0x2d,0xbd,0xd6,0xe4,0xbb,0x16,0x82,0xc8,0x13,0x2a,0x6f,0xb9,0x06,0xbd,0xef,0x11,0x66,0x71,0xb8,0x9f,0x1e,0xe5,0xee,0x2e,0x37,0xfb,0x34,0xed,0xc5,0xa4,0x40,0x6e,0x38,0x31,0x0a,0x1c,0xaf,0x0d,0xd3,0x98,0xac,0x12,0x40,0xea,0x9c}},\n\t{{0x6f,0x46,0xcd,0x96,0xc4,0x13,0xf4,0x11,0x62,0x49,0x8c,0x5c,0x78,0x27,0xef,0xc8,0xb9,0xe2,0x7d,0xf1,0x0d,0x37,0xf2,0xfe,0x85,0x35,0x82,0x60,0x23,0xb6,0x7b,0x17,0xd2,0x91,0xef,0x01,0x9e,0x99,0x35,0xab,0xc7,0xfb,0xa1,0xa3,0x13,0x44,0x3f,0x3c,0x16,0xcb,0xd8,0xf0,0xbf,0x9e,0x65,0x4d,0x07,0xe0,0xfd,0x8e,0x32,0x61,0x95,0xd5},{0xb7,0x81,0x16,0x2f,0xcb,0xa4,0x30,0x4e,0x6d,0xf5,0xf0,0x3f,0xfe,0xd9,0x81,0x20,0xa6,0x0e,0x2b,0xa8,0xc5,0xed,0x0d,0x9a,0x28,0x9c,0xe3,0xa9,0xb7,0xbf,0x87,0x0f,0xa5,0xf9,0x33,0xe7,0xa6,0x7f,0x9b,0xac,0xb6,0xcc,0xaf,0xfc,0xa7,0x4a,0x4d,0x36,0x39,0xa9,0xb6,0xf5,0x09,0xde,0x8d,0x37,0x11,0x07,0xd1,0x8a,0xf5,0x7b,0x66,0xe1},{0xcc,0xe0,0x07,0x62,0xbe,0x10,0x8c,0x3a,0xa2,0x96,0x5d,0x11,0xc7,0xd5,0x50,0xc3,0xbb,0x55,0x21,0xc5,0x40,0x27,0x7d,0xdb,0xad,0xd2,0x61,0x2a,0x42,0x5f,0x94,0x23,0x77,0x83,0x3a,0x99,0xe8,0xda,0x79,0x8c,0x1e,0xa8,0x44,0x04,0xec,0xf5,0xd1,0x55,0x1e,0x58,0xf1,0x6e,0x4d,0x27,0xa4,0x91,0xec,0x59,0xc8,0x17,0x36,0x58,0x2a,0x1f},{0x6d,0xf8,0x73,0xa3,0x38,0x61,0x1d,0x95,0x09,0xde,0xe5,0x26,0x1b,0x15,0x16,0xfb,0xf5,0x16,0xa8,0xf3,0x9e,0x3a,0x6b,0xb5,0x8c,0xee,0xa8,0x66,0x79,0xc3,0x9e,0xb4,0xe1,0xc2,0x85,0x0e,0x86,0x10,0x5a,0x4e,0x8b,0x4c,0x0a,0x7a,0xd8,0x8a,0x48,0xf4,0xa0,0x79,0x37,0xe3,0xa5,0x90,0x05,0x5e,0xbd,0xa1,0xf6,0x09,0x58,0x9c,0x6f,0x09},{0x66,0x47,0x6d,0x60,0x06,0x2d,0x90,0x8f,0xae,0x6c,0x01,0xe9,0xb0,0xf9,0x6b,0xa5,0x4a,0xe1,0xdb,0xd3,0x64,0x42,0x37,0x5c,0x11,0x40,0x7a,0xce,0x4e,0x83,0xc3,0x2c,0x2e,0xd2,0x67,0x76,0xfb,0x8c,0x5d,0xab,0xe8,0xb8,0xd6,0x2b,0xf8,0x86,0xff,0x96,0xf3,0xa8,0x0e,0x2b,0x1a,0x68,0xf5,0xe4,0xee,0x49,0xa6,0x8c,0x41,0x1f,0x97,0xbf},{0x81,0x92,0x4e,0xc6,0xab,0x00,0xdd,0xf9,0xf9,0xb7,0xe0,0x0a,0xa9,0x3f,0x0a,0xf9,0x32,0x73,0xf6,0x22,0xec,0x95,0xd9,0x20,0x8a,0x3f,0xeb,0x0d,0xc7,0x79,0x6f,0xb3,0x85,0xf4,0xe1,0x11,0xe1,0xcc,0xaa,0x1b,0xfd,0xf3,0x43,0xff,0x66,0x73,0x0f,0x09,0xcc,0xa4,0x6c,0xb8,0x2a,0x0f,0x53,0x58,0x63,0x32,0x06,0xd9,0x6b,0x1a,0x14,0x04,0x85,0x3f,0x2f,0x2b,0x05,0xfb,0xed,0xe9,0x08,0x0d,0x21,0x49,0xc9,0x79,0xdf,0x6f,0x77,0x89,0xd7,0x74,0x09,0x57,0x1a,0xd2,0xa7,0x43,0xbf,0x08,0x8e,0x98,0xbc,0x2f},{0xe3,0xb1,0xc4,0x81,0xe6,0xec,0x07,0x58,0xa4,0xcb,0x7e,0xd5,0xae,0x9d,0x43,0xf1,0xb7,0xe2,0x0a,0x1f,0xd5,0xe8,0x14,0xba,0x22,0xff,0xb7,0x20,0x76,0x08,0xdc,0x9a,0x44,0x4c,0x1c,0xcd,0x38,0x4d,0xb5,0xd8,0xa9,0x1b,0x9d,0xbb,0x13,0x5a,0x6c,0xe9,0x5d,0xa4,0x42,0x0e,0xde,0x9a,0x47,0x8a,0x2a,0x97,0x42,0x86,0x87,0x98,0x3f,0x04,0x85,0x3f,0x2f,0x2b,0x05,0xfb,0xed,0xe9,0x08,0x0d,0x21,0x49,0xc9,0x79,0xdf,0x6f,0x77,0x89,0xd7,0x74,0x09,0x57,0x1a,0xd2,0xa7,0x43,0xbf,0x08,0x8e,0x98,0xbc,0x2f}},\n\t{{0xff,0xe3,0x69,0x7b,0x62,0x45,0x40,0x5f,0x1c,0x49,0x65,0xd6,0xae,0x24,0x16,0x84,0xfa,0x69,0x6c,0x1f,0x6c,0x65,0xee,0x52,0xe9,0x6c,0x54,0xc7,0x31,0x9b,0xc2,0x74,0x4f,0xc0,0x16,0xb8,0xf8,0x75,0x5f,0x45,0xb5,0xf3,0xa0,0xd9,0xbe,0x25,0x82,0xbd,0x3c,0x03,0xe0,0x14,0x15,0x6a,0xd5,0x64,0x08,0x65,0x13,0x33,0xc2,0xab,0xe0,0x45},{0x6f,0x5a,0x90,0x80,0x25,0x13,0xc2,0xa7,0xfe,0x1c,0xa1,0x07,0x81,0x4b,0x09,0xd3,0xbd,0xda,0x55,0xa8,0xaa,0x62,0x19,0x03,0xe9,0x9f,0x77,0xef,0xff,0xd4,0x5e,0x53,0xbc,0x9d,0x71,0xb8,0xc4,0xc2,0x85,0xb9,0xb4,0x3d,0x95,0xb8,0xfd,0x44,0xb7,0xc8,0x6f,0x93,0x15,0x04,0x16,0x7e,0x01,0xf2,0x09,0x23,0x96,0x69,0xe5,0x65,0x52,0x34},{0xaf,0xfe,0x4f,0x34,0x4e,0xfe,0x51,0xa5,0xb2,0xd8,0x31,0x74,0x7b,0xae,0xfb,0xb9,0x33,0xc1,0xdc,0x66,0xe6,0x95,0x9e,0xce,0x77,0x7d,0x55,0x3c,0xa6,0x6c,0x09,0x23,0x5a,0x1a,0x5e,0x1a,0x41,0xd3,0xad,0x5f,0x86,0xd0,0x14,0xf5,0xe0,0xda,0xf1,0xce,0x19,0x90,0x45,0x0c,0x4c,0xb1,0xd3,0xc8,0x4c,0xdb,0x7e,0x49,0xf5,0xac,0xde,0xff},{0x1b,0x9b,0x6b,0x30,0xd3,0x19,0x37,0x83,0xad,0x05,0xca,0xba,0x22,0x85,0x33,0x7f,0x55,0x60,0xe3,0x14,0x8c,0x39,0x87,0xd1,0x4c,0x21,0x27,0xa0,0xae,0x4a,0x56,0x15,0x50,0x6c,0x99,0xca,0xff,0xde,0x10,0xc6,0x9f,0x6c,0x70,0xd1,0x66,0xb4,0x87,0xd8,0xfc,0x46,0xf2,0xcf,0x0c,0xd8,0xc3,0x14,0x5d,0x27,0xbd,0xed,0x32,0x36,0x7c,0xed},{0x64,0x6b,0x74,0xc7,0x60,0x36,0xc5,0xe4,0xb6,0xde,0x02,0x1a,0x09,0xaf,0x65,0xb1,0x94,0xa3,0xf4,0x95,0xf5,0xb0,0xef,0x86,0xb5,0x13,0x26,0x0b,0xe8,0xc5,0x5c,0x77,0xf5,0xe6,0xb6,0x10,0x36,0x87,0xa3,0xd2,0x7c,0x17,0x2c,0xb9,0xb0,0x90,0x9e,0x8c,0x0a,0x7d,0x73,0xb2,0x29,0xeb,0xa7,0x85,0xd7,0x04,0x14,0xf9,0x77,0xb7,0xf4,0x89},{0x7f,0x1c,0x5a,0x57,0x14,0xf6,0x30,0x07,0xf9,0xfe,0x42,0x98,0xcb,0x3d,0xac,0x04,0x30,0x0d,0xc6,0xd0,0x4f,0x8a,0xbc,0xdd,0x3e,0xc3,0xb7,0x74,0xc8,0x3b,0x1a,0xcc,0x6a,0x54,0x9e,0xb9,0xbe,0xf0,0x7c,0x35,0x35,0x1a,0x50,0x4c,0xc2,0x38,0x41,0x46,0xc8,0xc4,0x81,0x2b,0x26,0x56,0x6f,0x8a,0x9f,0x74,0x87,0xe0,0x01,0x82,0xe2,0x09,0xf3,0x9a,0xc5,0x33,0x5a,0x7d,0xb6,0xbb,0xff,0x20,0x4d,0xc1,0x99,0x3d,0xcc,0x5a,0xc7,0xd1,0xbe,0x4c,0xcf,0xc8,0x09,0x79,0x15,0x5e,0x0c,0xc6,0x26,0x36,0xe6,0xd9},{0x4d,0x2f,0x08,0x84,0x32,0xcf,0xe0,0x3b,0xa8,0x3e,0xa5,0xf8,0x3a,0xe8,0xa9,0x04,0x5a,0x74,0x67,0xcb,0x41,0x22,0xc5,0xc4,0x9a,0xa5,0xc1,0xa7,0x94,0x8b,0xa5,0x35,0x00,0x00,0x1a,0xaf,0xfb,0xed,0x40,0xb8,0x2b,0x28,0xf1,0xb1,0x02,0xd3,0x8b,0xc0,0x32,0x4a,0xa5,0x0a,0xa4,0xc3,0xbf,0xb3,0xf5,0xb7,0x65,0x8e,0x88,0xdf,0xd0,0x0e,0xf3,0x9a,0xc5,0x33,0x5a,0x7d,0xb6,0xbb,0xff,0x20,0x4d,0xc1,0x99,0x3d,0xcc,0x5a,0xc7,0xd1,0xbe,0x4c,0xcf,0xc8,0x09,0x79,0x15,0x5e,0x0c,0xc6,0x26,0x36,0xe6,0xd9}},\n\t{{0xc8,0x8e,0x1c,0xea,0x02,0x6a,0xfd,0x88,0x8b,0xa9,0x9d,0xdd,0xba,0xea,0x77,0x30,0x88,0x1a,0x93,0x49,0xda,0x05,0x18,0xbb,0x4a,0x6a,0x11,0xc4,0x48,0x72,0x77,0x1f,0x6e,0x2b,0x9a,0xe3,0x27,0xbe,0xe1,0x75,0x32,0x30,0xa6,0x12,0x26,0x44,0xbf,0xb2,0xa5,0x51,0x0b,0x48,0x3a,0xea,0xc5,0xd4,0x24,0x3f,0x4e,0xe8,0xe5,0xc3,0xfb,0xc2},{0xcb,0x56,0x3c,0x00,0x28,0x15,0x72,0x16,0x23,0x4e,0x2e,0x2c,0x8c,0xe8,0x7c,0x44,0x82,0x2a,0xe0,0x57,0xa3,0x0a,0xc4,0x42,0xb5,0x07,0xe1,0x1b,0x78,0x8b,0x3d,0x4d,0xcb,0xe4,0x56,0x72,0x0b,0x85,0x52,0xd8,0x55,0xe2,0xcd,0x38,0xd2,0x83,0xb6,0x05,0xd2,0x9f,0x63,0x9e,0x7f,0xca,0xe5,0x95,0x36,0x61,0x9b,0xca,0x09,0x27,0x53,0x82},{0x24,0x67,0x10,0xd6,0x8a,0x1a,0x8e,0xb8,0x53,0xef,0xb7,0x67,0x2a,0xfd,0xb8,0xd6,0xe3,0xf7,0x41,0x95,0x8c,0x50,0xca,0x1d,0x21,0x21,0x41,0xd1,0xef,0x2d,0x9b,0x53,0xa9,0x42,0xcd,0xda,0x6d,0x12,0x1b,0xbd,0x0a,0xe1,0x4d,0x95,0xc6,0xaa,0x40,0xfd,0x98,0xfb,0x26,0x21,0x5e,0xaf,0x8e,0x6b,0xc9,0x36,0x2c,0x66,0x31,0x24,0x45,0x87},{0x5e,0xf9,0x1d,0x10,0xb5,0x79,0x1f,0x80,0x85,0x90,0xc3,0x7f,0x2b,0x73,0xbf,0x83,0x0b,0x5d,0x46,0xae,0x79,0xef,0x09,0x71,0x29,0xfb,0x83,0xde,0x1f,0xe2,0xdb,0x1b,0xa2,0x22,0xee,0x50,0x21,0x9d,0x9c,0x35,0x14,0x48,0x13,0xa5,0xd1,0x68,0xf4,0x61,0x1f,0xd7,0xe2,0xd6,0x42,0x1c,0xdc,0x58,0xec,0x8b,0x03,0x6b,0xdf,0x64,0x06,0x30},{0xf9,0xa6,0x88,0x74,0x07,0x19,0x15,0x38,0xaf,0xac,0x07,0x10,0xe0,0xd9,0x22,0xf3,0x78,0xb0,0xbf,0x60,0xa3,0x0f,0xea,0x0f,0xa8,0x64,0xa9,0xa3,0x82,0xe1,0x4c,0x29,0x36,0x22,0x6d,0x43,0x9c,0xde,0x22,0xbf,0xc6,0x85,0xf7,0xe9,0xe0,0x79,0x80,0xfe,0x9d,0xd6,0x24,0xbd,0x29,0xa4,0x8c,0x35,0x21,0x87,0x45,0x7f,0x88,0xd9,0x9a,0x9d},{0x49,0x43,0x19,0x14,0xcc,0x4a,0x11,0x01,0x05,0xd1,0x4e,0x39,0x6d,0xb0,0x22,0x65,0x32,0x6e,0x67,0x04,0x50,0x85,0x53,0x42,0x90,0x2c,0xc0,0x63,0x2f,0xbd,0x15,0x90,0x1b,0x3f,0x03,0x90,0x16,0x7f,0x7b,0x49,0x74,0xd0,0x3d,0x81,0x80,0x1e,0x9e,0x2e,0xa9,0x13,0x6a,0x10,0x14,0xc1,0xfd,0xf9,0x25,0x3a,0x1d,0x52,0x93,0x0a,0x77,0x03,0xa2,0xdd,0xce,0x9f,0x2a,0x35,0xc9,0x93,0x7c,0xa2,0x2c,0xf6,0x38,0x73,0xb3,0xab,0x7f,0x55,0xb6,0x62,0xa2,0x8d,0x6a,0x3e,0x88,0x04,0x9b,0xa2,0x19,0x64,0x55,0x01},{0x22,0x03,0x49,0x58,0x76,0x3c,0x85,0x45,0x5e,0x73,0x78,0x8f,0x65,0xc9,0x50,0xf8,0xd7,0x16,0x92,0xa4,0xd1,0x79,0xce,0xf3,0x00,0x34,0x38,0xb8,0xcc,0x96,0x9f,0xa6,0x87,0x28,0xcb,0x19,0x28,0xad,0x83,0xb5,0x09,0x96,0x54,0xe8,0x2a,0xb9,0x9b,0xff,0x60,0x85,0x31,0x28,0x62,0x36,0xd2,0x0e,0xad,0x2a,0xe1,0x84,0x80,0xeb,0x6f,0x00,0xa2,0xdd,0xce,0x9f,0x2a,0x35,0xc9,0x93,0x7c,0xa2,0x2c,0xf6,0x38,0x73,0xb3,0xab,0x7f,0x55,0xb6,0x62,0xa2,0x8d,0x6a,0x3e,0x88,0x04,0x9b,0xa2,0x19,0x64,0x55,0x01}},\n\t{{0xeb,0x18,0x95,0x94,0x5f,0x15,0x8c,0xb8,0x4d,0x6e,0x7d,0xc0,0x96,0x6c,0x52,0xa2,0x5f,0x43,0x67,0xc2,0x3a,0x10,0x5b,0xf1,0x8f,0x21,0x89,0x06,0x77,0xe9,0xab,0x2e,0xcd,0x17,0x9c,0x9a,0xd7,0x89,0x7e,0x53,0x58,0x60,0x9b,0xce,0x90,0xd9,0x13,0x2d,0x78,0xc4,0x2c,0x1c,0x4c,0xe8,0x23,0x70,0xff,0xa0,0x42,0x98,0x25,0x40,0xd6,0xd8},{0xb6,0xfb,0xdd,0x5d,0x35,0xf2,0x2b,0x89,0xda,0x8e,0x90,0xee,0x03,0x4e,0x75,0xdb,0x4c,0x45,0xc8,0x00,0xde,0x06,0x27,0xde,0x44,0xb5,0x5b,0xc7,0x56,0xc3,0xf5,0xbb,0xee,0xa6,0x21,0xd4,0xd9,0xb9,0x24,0x9c,0x4c,0xbc,0x23,0xe5,0xeb,0x05,0xb6,0xd0,0xd0,0xbf,0x49,0x95,0x01,0xb4,0x97,0xad,0xb5,0x71,0x8d,0x4b,0x32,0xd0,0xdd,0x1a},{0xfd,0x11,0xd7,0xe4,0x46,0xcd,0xd8,0x44,0x89,0x0a,0xe7,0x44,0x59,0xe9,0xcf,0x9f,0xd6,0xf1,0x74,0x56,0x04,0x78,0xfa,0x29,0x46,0x8a,0x8d,0x1b,0xbe,0x41,0x92,0x1c,0x8d,0x74,0x01,0x1b,0xc1,0xf8,0x26,0xf4,0xc2,0x68,0xc3,0x23,0x8c,0x68,0x7c,0x0a,0xad,0xdd,0x50,0x10,0xcf,0xdb,0x78,0xc5,0x79,0x28,0x37,0x63,0x92,0x1a,0x1d,0xea},{0xd2,0x2a,0xf0,0x66,0x15,0x8b,0xcb,0x83,0xcf,0x34,0xa1,0x33,0x6b,0xd5,0xa8,0x98,0x3b,0xd7,0x09,0x0d,0x70,0xa5,0x8a,0xc0,0x73,0xcf,0xde,0x59,0xd5,0x13,0x41,0xd2,0x43,0x8b,0xb4,0xc3,0x5b,0x6f,0xf1,0xed,0x47,0x76,0xe6,0x5e,0xb8,0x2a,0x7e,0x20,0x91,0xa0,0x9d,0xc1,0xa2,0x0a,0x6d,0x97,0x7d,0xeb,0xe3,0x64,0x5f,0x86,0xff,0x3e},{0x45,0xd8,0xdc,0xe4,0x3a,0x3a,0x44,0xdc,0x7f,0xa8,0x92,0x11,0x1b,0x4f,0xfa,0xcf,0x21,0xff,0xfb,0x20,0xb0,0x02,0x6d,0x0e,0x1c,0xde,0xe8,0x51,0xd8,0x2c,0x72,0x0e,0xbf,0xf6,0x9a,0xd3,0xd3,0xfe,0xfa,0x98,0x4e,0xc2,0xf0,0x16,0xda,0x39,0x93,0xc4,0xe0,0x33,0x9a,0x43,0xe8,0x7a,0xc5,0x0f,0x0b,0xa4,0x45,0xf0,0x5e,0x7a,0xa9,0x42},{0xdb,0x4e,0x17,0x76,0x8b,0x3c,0x98,0x7f,0x58,0x76,0x97,0xc9,0x3f,0x99,0x01,0x05,0x42,0x7e,0xfd,0x83,0x99,0xaa,0x19,0xb5,0x72,0x4c,0x69,0xed,0x6e,0x21,0x79,0x6e,0x3b,0x71,0xe5,0xab,0x23,0x84,0xe7,0xfe,0x58,0x2b,0x0d,0x1e,0x75,0x7c,0x29,0xb3,0x2d,0x66,0xc2,0x45,0x88,0xac,0x86,0x29,0xe4,0xaa,0x9e,0x71,0xa1,0x88,0xf9,0x06,0xda,0xa3,0xdd,0x7b,0x6c,0xd9,0xc9,0x73,0xe9,0x56,0xd1,0xee,0x5b,0xf9,0xae,0xc0,0x29,0xbe,0x20,0x6c,0xc7,0xf9,0xc5,0x2d,0x6d,0xad,0x8f,0x49,0xf8,0x17,0xdb,0x7a},{0xb8,0xb7,0xec,0xeb,0x3e,0x40,0x77,0x6c,0xab,0x10,0xfe,0x9f,0xd1,0x40,0xfe,0xd2,0x88,0x8e,0xb0,0x55,0xae,0x75,0xb1,0xcc,0x9d,0x6c,0x11,0x28,0x95,0x38,0x9f,0xb9,0x59,0xe2,0x29,0xc3,0xbc,0x09,0x16,0x1f,0x17,0x9e,0x15,0x78,0x09,0x61,0x07,0x9e,0xad,0x67,0x98,0xa9,0x24,0xff,0xf9,0x4b,0xa2,0x76,0x09,0xa0,0xd7,0x1b,0xed,0x05,0xda,0xa3,0xdd,0x7b,0x6c,0xd9,0xc9,0x73,0xe9,0x56,0xd1,0xee,0x5b,0xf9,0xae,0xc0,0x29,0xbe,0x20,0x6c,0xc7,0xf9,0xc5,0x2d,0x6d,0xad,0x8f,0x49,0xf8,0x17,0xdb,0x7a}},\n\t{{0xc3,0x92,0x4d,0x01,0x9c,0xea,0x5a,0x8d,0xbd,0x5c,0x12,0x58,0x6d,0x03,0x26,0xbf,0xa4,0xdd,0xf7,0x26,0xa4,0x0d,0x22,0xe0,0xbd,0xcc,0x6f,0x30,0x9e,0xf9,0x4c,0x1f,0x03,0x52,0xab,0x38,0xe9,0x9c,0x08,0x9c,0x09,0xe5,0x87,0x5c,0x24,0x1a,0xe2,0x75,0xcb,0x18,0x8a,0x63,0x50,0xd1,0x23,0x45,0x49,0x93,0x40,0x2c,0x09,0xd4,0xac,0x39},{0xd4,0xe7,0xb7,0x05,0xfd,0xd6,0xf3,0x57,0xfb,0xc2,0x2f,0x2c,0x71,0x80,0xf5,0xc3,0xa6,0x0a,0x23,0x9d,0x1d,0xa8,0x68,0x10,0x8a,0xfa,0x68,0x9d,0x2b,0xcf,0x96,0xa9,0xe6,0x0e,0x07,0x32,0x23,0x09,0x87,0x16,0xc5,0xbb,0x76,0x22,0xfc,0xb4,0x59,0x6d,0x67,0xfd,0x29,0x51,0x95,0x4c,0xe2,0x8c,0x18,0xab,0xda,0x84,0xc3,0x62,0x80,0x14},{0xc9,0xa1,0xfe,0xc3,0x48,0x0d,0xee,0x54,0x44,0xff,0x9c,0x46,0x04,0x0e,0x74,0xda,0xa4,0x6a,0x56,0x02,0x5f,0x76,0x0e,0xb5,0xc1,0xc9,0xe9,0xb2,0x6e,0x07,0x49,0x0c,0xf7,0x4b,0xee,0xd6,0x0a,0xad,0x94,0x03,0x58,0x2d,0x60,0x95,0xf8,0x16,0x7b,0x49,0x0b,0x01,0x66,0x3e,0x17,0x01,0xe5,0x54,0x7d,0xd7,0xbb,0x10,0xd1,0xad,0xad,0x79},{0xb2,0xd8,0x10,0x29,0xeb,0xb8,0x4e,0x2b,0x39,0x85,0x5c,0xb3,0xdc,0xf5,0x87,0xca,0xca,0x9c,0x7a,0x8c,0x2b,0x08,0xe8,0x25,0xe2,0xcf,0x70,0xe2,0xe6,0xfb,0xdb,0x0c,0xc3,0x0d,0x71,0x11,0x83,0x65,0xf2,0x71,0x08,0x1b,0x32,0x6e,0x6c,0x51,0x50,0xf1,0xf6,0x4b,0x54,0x63,0x16,0x7f,0xfd,0x80,0x05,0x61,0x63,0xf1,0x80,0x6a,0x0b,0xfd},{0xa7,0x4b,0x75,0x38,0x90,0x64,0x96,0x7b,0xda,0x5e,0x08,0x9b,0x80,0xc4,0x72,0x3f,0x73,0xb2,0xdb,0xd3,0x4a,0xed,0xa4,0xdc,0x5c,0x79,0xe5,0x0f,0x7a,0xd3,0x0c,0xac,0xf9,0x99,0x5c,0x1a,0x0f,0xb3,0x1a,0x0f,0x5c,0xc3,0x9e,0x1a,0x2b,0xfa,0xc3,0xf0,0x40,0xe5,0x5f,0x36,0xd2,0x98,0x31,0xa1,0xaf,0x18,0x5f,0xae,0x92,0xf3,0x9e,0xc0},{0xf9,0xbf,0x52,0xe6,0xd3,0xe1,0x5d,0xd3,0x30,0xf3,0xa1,0x0c,0xc8,0x5a,0x97,0x55,0xab,0x67,0x67,0xd0,0x00,0x62,0x7b,0x80,0x70,0xbf,0x24,0xd0,0x09,0x8b,0x07,0x77,0xeb,0x3e,0xf0,0x5d,0xdf,0x7b,0xa9,0x7d,0xa4,0x6a,0x0d,0xf1,0xac,0x83,0x7d,0x64,0xb5,0xf4,0xc6,0xc4,0x12,0x0c,0x55,0x9f,0x67,0xbb,0xd5,0xe3,0xd3,0xdb,0x17,0x0f,0x90,0x2f,0x8f,0xc9,0xfd,0x4e,0x6c,0x8b,0xe6,0x99,0xfa,0xda,0x8f,0x1f,0xe6,0xc3,0xeb,0xd8,0x14,0x20,0xcc,0x3c,0x1c,0x23,0x77,0x28,0x9b,0x22,0x9a,0x5a,0x0c,0x43},{0xa2,0x78,0x37,0xc9,0x63,0xe1,0x31,0x36,0xc2,0x58,0xac,0xca,0xbb,0xa2,0x84,0xaa,0xb3,0x82,0xe2,0x19,0xb7,0x14,0x96,0x27,0x77,0xfa,0xa1,0x02,0xaa,0xff,0x55,0x82,0xba,0xc0,0x38,0x1a,0x69,0x35,0x48,0x87,0xc2,0xeb,0x48,0x08,0xea,0xc5,0x6b,0xfc,0x84,0x60,0x4e,0xce,0xd7,0xd2,0x86,0x8b,0x76,0xf3,0x46,0xe1,0x87,0x1f,0xff,0x09,0x90,0x2f,0x8f,0xc9,0xfd,0x4e,0x6c,0x8b,0xe6,0x99,0xfa,0xda,0x8f,0x1f,0xe6,0xc3,0xeb,0xd8,0x14,0x20,0xcc,0x3c,0x1c,0x23,0x77,0x28,0x9b,0x22,0x9a,0x5a,0x0c,0x43}},\n\t{{0x0e,0xa6,0x0c,0xef,0x12,0xd6,0x7d,0x71,0xd4,0x88,0x73,0x86,0x9a,0x88,0x8f,0x5b,0xd1,0xb6,0x12,0xc4,0x93,0x8b,0x5f,0xee,0xdd,0x9c,0x2a,0x7f,0x4d,0xfd,0xba,0x00,0x09,0x45,0x77,0xd2,0xcf,0xcd,0x3a,0x6f,0x27,0x44,0xe2,0x55,0x3e,0x79,0x88,0x4d,0x5f,0x38,0x34,0xe8,0xe7,0xc6,0x3a,0xde,0xef,0x99,0x15,0xea,0x88,0x79,0xd7,0xca},{0xa0,0x9a,0x0a,0x3a,0x42,0x35,0x54,0x78,0xb9,0x82,0x52,0xb4,0xc8,0x5c,0x4a,0x03,0xa1,0xb9,0x27,0xcc,0x99,0xec,0x03,0xdf,0xdd,0x6e,0xde,0xef,0x8f,0x7f,0xdc,0x5a,0xc3,0xcb,0x0e,0xa2,0x7e,0x93,0xe6,0xdd,0xbd,0xf1,0x1b,0x03,0x29,0x63,0x72,0x11,0x72,0x3d,0x24,0x6f,0xdf,0x8e,0xed,0xa4,0xe2,0x2a,0x4c,0x00,0xe2,0xc4,0x55,0x1b},{0xb2,0xf1,0xff,0xf6,0x3a,0x26,0xe1,0x74,0x52,0xba,0xee,0x28,0xb6,0x56,0x90,0x59,0xde,0x92,0x5f,0x84,0xd1,0x87,0xe2,0x64,0xce,0xdc,0x94,0x3c,0xb4,0xf8,0x01,0x0a,0x86,0x2f,0xfe,0x79,0x03,0x72,0xfc,0x26,0x21,0xc3,0x1e,0xec,0x63,0x29,0x64,0xcb,0x5f,0xcc,0xb6,0x78,0xf7,0xc8,0xd1,0xf8,0x5c,0xc4,0x4b,0xc0,0xc3,0x75,0x3e,0x46},{0x03,0x4b,0xb9,0xd1,0x50,0xa3,0x79,0xbe,0x74,0xa3,0xb5,0xd8,0x28,0x1b,0x6d,0x72,0x68,0x0a,0x9b,0x19,0xc9,0x13,0xc4,0x04,0x94,0x0a,0xcb,0x72,0xff,0x7d,0xb6,0x9a,0x1c,0xfd,0xe4,0xa3,0x75,0x13,0x57,0x36,0xfe,0x4a,0xf6,0xbc,0xca,0xd9,0x34,0x9b,0xef,0x90,0x02,0xd9,0xbd,0xdd,0x6f,0x22,0x54,0x36,0xb2,0x3f,0x22,0x65,0xef,0xe7},{0x04,0xd4,0x43,0xe8,0x8c,0xc4,0xfb,0xe5,0x55,0xd0,0xa4,0xea,0x20,0xf8,0xe1,0x8f,0xc2,0xbc,0x1f,0x55,0xf1,0x8d,0xda,0xc0,0x85,0xa4,0xef,0x36,0x97,0x22,0x8b,0x8e,0x77,0x4c,0x1a,0xa4,0xa0,0x6f,0xe1,0xdc,0x32,0x47,0xc4,0x3a,0xd8,0x8a,0xbd,0x19,0x30,0x1c,0x96,0x7a,0xb2,0x23,0x7c,0x16,0x03,0xa7,0x4f,0xfd,0xa6,0x50,0xd9,0xf7},{0xdf,0xc2,0x59,0xd2,0xa9,0x9b,0x1e,0xca,0xf0,0x39,0x2f,0xf8,0xc2,0xf3,0x91,0x55,0x1b,0xba,0x81,0x3a,0x67,0x1a,0xd4,0xf4,0xb0,0x9f,0xb6,0x18,0x38,0x65,0x3e,0x67,0xa0,0x37,0xc2,0x9a,0xc7,0xee,0x72,0x8e,0x13,0x64,0xd1,0x0a,0xda,0xbd,0x8d,0xa4,0x28,0x55,0x3a,0x2c,0x78,0x41,0xc6,0xfc,0x1c,0x0f,0xf8,0xd7,0x5f,0xe6,0xde,0x0b,0xd5,0xc0,0xaa,0x2c,0x5c,0xac,0x46,0xeb,0xa4,0x35,0x2a,0xab,0x00,0x2e,0xc0,0x8b,0x42,0x65,0x2f,0x2f,0x13,0x84,0x60,0x15,0xa3,0x69,0xee,0xab,0x0e,0x50,0xbf,0x5f},{0xc1,0xb0,0xac,0x4c,0xfa,0x62,0x52,0x22,0xae,0x8c,0x94,0x38,0xd9,0x6e,0x10,0x94,0xe7,0xaa,0xc0,0x92,0x93,0x06,0x55,0xf9,0x2e,0xd9,0x10,0x4d,0xcb,0x82,0x19,0x1f,0x27,0x16,0x81,0xdd,0xea,0x7a,0xa8,0xce,0x5a,0xdd,0x37,0x77,0x24,0x57,0xfb,0x40,0x3d,0x1b,0x48,0x88,0xda,0xce,0xe8,0xd2,0xed,0xe0,0x6e,0x29,0xeb,0xdb,0x95,0x09,0xd5,0xc0,0xaa,0x2c,0x5c,0xac,0x46,0xeb,0xa4,0x35,0x2a,0xab,0x00,0x2e,0xc0,0x8b,0x42,0x65,0x2f,0x2f,0x13,0x84,0x60,0x15,0xa3,0x69,0xee,0xab,0x0e,0x50,0xbf,0x5f}},\n\t{{0x3a,0x79,0x39,0x60,0xe9,0x93,0xad,0x78,0xf9,0x0b,0x99,0x64,0x71,0x76,0xad,0xdc,0x63,0xa3,0x38,0xbf,0x0a,0x36,0x22,0xcf,0x4f,0x84,0x3e,0x34,0xaf,0x0b,0xd4,0x5c,0xc0,0xa4,0x01,0x7c,0x07,0xc3,0xb4,0xcb,0xdb,0x39,0xdd,0x39,0xc7,0x5c,0xbd,0xcf,0x61,0x8b,0x72,0x74,0xd6,0x85,0xdc,0x5c,0x08,0x93,0x6d,0xe6,0xf1,0xeb,0xb9,0x7c},{0x71,0x12,0x20,0xbb,0x37,0xa6,0xd8,0x71,0xf7,0x58,0xaa,0xbd,0x30,0xfb,0xac,0x94,0x62,0x45,0xf0,0x1a,0xc3,0x4a,0x07,0x78,0x6d,0x17,0xf5,0x8d,0x69,0x3d,0x2e,0x15,0x96,0x48,0x1a,0xb0,0x7e,0xdd,0xf5,0x2d,0xe1,0x56,0xfc,0xe9,0x26,0x91,0x51,0xfe,0x5e,0x2a,0xdc,0x23,0x89,0x09,0x14,0xe6,0x17,0xa9,0x14,0x8c,0x8c,0xe8,0xe3,0x71},{0xe4,0xd0,0xa7,0x5a,0xce,0x93,0x1d,0x55,0xa2,0x3d,0xdd,0x7e,0x10,0x66,0x6d,0xc6,0x5c,0x87,0x9f,0x7a,0x52,0x5e,0x76,0x3f,0x09,0x9e,0xe5,0x8e,0x60,0x39,0x5e,0x3c,0x28,0x31,0xa4,0x12,0x39,0xfd,0xba,0xda,0xc8,0x59,0xdd,0x5b,0x26,0x78,0x8f,0x33,0xd2,0xc8,0x22,0x77,0x49,0xcf,0x34,0x61,0xbe,0x7a,0xa6,0x31,0xbe,0xe5,0xab,0xc2},{0x60,0xf5,0x52,0xbd,0xb1,0x9e,0x06,0xa3,0x94,0xad,0xe0,0x82,0x33,0x7c,0x41,0x17,0x5b,0x8a,0xbc,0x7c,0xce,0xd1,0x7e,0xfd,0x39,0x17,0xfd,0x90,0x5a,0x53,0x89,0x27,0x9f,0x27,0x7a,0x08,0xb2,0x66,0xda,0xb5,0xbf,0x3b,0x80,0xe2,0x1a,0x30,0x80,0x45,0x13,0xf3,0x4b,0x0c,0x4a,0xe9,0x0a,0x6e,0xf2,0x3e,0xa3,0x70,0x3d,0x89,0xd3,0xb2},{0x23,0x41,0x08,0x8d,0xa8,0x0b,0x6a,0xe0,0x65,0xb1,0x42,0x50,0x49,0xdd,0xd3,0xe8,0x89,0x13,0x7a,0x04,0xf0,0xd6,0x2f,0x6e,0x73,0xcd,0xdc,0x10,0xbb,0x02,0x6b,0xa2,0x25,0x58,0xa3,0x08,0x37,0x7c,0x8b,0x1f,0x4a,0x81,0x38,0x88,0xbd,0xf4,0x4f,0x24,0xe8,0xd6,0x9f,0x2f,0x13,0xeb,0x79,0x60,0x80,0x90,0x52,0x6b,0x8e,0xed,0xcb,0x77},{0x5b,0x88,0x63,0xaf,0xf9,0xe2,0x44,0x23,0xc8,0x02,0xe0,0x22,0x15,0x3d,0x2a,0xb7,0x40,0x76,0xe8,0x95,0xfd,0xa9,0xe3,0x85,0x94,0xa3,0xbb,0xce,0x61,0x19,0x0d,0xe2,0x95,0xdf,0x81,0x11,0x53,0x77,0xcd,0xf2,0xd8,0x4f,0xbf,0x19,0x6a,0x3d,0x4b,0xda,0xa4,0x56,0xa4,0xcd,0x9d,0x4f,0x52,0x53,0x7d,0xd8,0xac,0xe0,0xfb,0x9a,0x71,0x0c,0x59,0xf9,0x0b,0x03,0xf1,0x7b,0xaf,0x33,0xc3,0xe5,0x1e,0x8d,0x4f,0xbe,0x21,0xed,0x6b,0x15,0xdd,0xd2,0xeb,0x7c,0xe4,0x59,0x6c,0xf9,0x91,0xc1,0x3a,0x3a,0xb6,0x2b},{0x5e,0x54,0xe5,0x1b,0x3d,0x2c,0x00,0x80,0xdd,0xe4,0x10,0x50,0x98,0xb6,0x0e,0x3a,0xf7,0xde,0x67,0x2c,0x8e,0x7b,0xb4,0x73,0x0b,0xc7,0x12,0xb0,0x66,0x6b,0x3b,0x99,0xd9,0x33,0x78,0x5f,0x45,0xe5,0xec,0x15,0x02,0xfa,0x8b,0x86,0xfd,0xe0,0xb7,0x84,0x72,0xf2,0x68,0x5c,0xd6,0x2e,0x37,0xe9,0x49,0x32,0x2f,0xcd,0xcd,0x1e,0x99,0x0f,0x59,0xf9,0x0b,0x03,0xf1,0x7b,0xaf,0x33,0xc3,0xe5,0x1e,0x8d,0x4f,0xbe,0x21,0xed,0x6b,0x15,0xdd,0xd2,0xeb,0x7c,0xe4,0x59,0x6c,0xf9,0x91,0xc1,0x3a,0x3a,0xb6,0x2b}},\n\t{{0xfc,0xb9,0x4e,0x4e,0x11,0xfe,0xe1,0xc5,0xc7,0x49,0x54,0xd2,0x2f,0x13,0x34,0x7c,0x91,0x7d,0x98,0x43,0xe4,0xb7,0x48,0xea,0xe8,0x26,0xcb,0x26,0x1f,0xe4,0x99,0x10,0xb9,0x34,0xc2,0xac,0xa3,0x2c,0xbd,0x9e,0x80,0xd4,0x12,0x3b,0xb3,0xf0,0x01,0xae,0x91,0x9f,0xba,0x77,0x32,0x4d,0x9d,0xac,0x1f,0x8d,0xad,0xa7,0x46,0x44,0x85,0xfb},{0x65,0x05,0x0b,0xd2,0x41,0xd3,0x58,0x2a,0x14,0xbc,0x7b,0x15,0x4a,0x6a,0x6a,0x18,0x71,0x09,0x25,0x33,0xac,0x73,0x53,0xab,0xd9,0x0d,0x8d,0xdf,0x95,0x59,0x7e,0x02,0x4c,0x03,0x11,0x5c,0xdc,0x80,0x19,0xd5,0x13,0x66,0x7f,0xf7,0xd7,0x23,0x18,0x40,0x84,0x16,0x6b,0x52,0x82,0x96,0x05,0x1b,0xfa,0xcb,0x4b,0x77,0x00,0x12,0xa0,0x28},{0x13,0xe0,0x16,0x1e,0x24,0x24,0xe9,0xde,0x9c,0x86,0xa9,0xcf,0x02,0x96,0xdf,0x8c,0x64,0xcb,0x3d,0x7d,0x8a,0x2a,0x73,0x18,0x20,0xc8,0xb0,0xac,0x10,0xa0,0x52,0x0c,0x6c,0x17,0xd9,0xbd,0x3c,0x3e,0xe5,0x0c,0x4a,0xdb,0x59,0xcc,0x59,0x15,0x08,0x1e,0xfe,0xaa,0xe3,0xd6,0xa1,0x37,0xd6,0xd5,0x6d,0x8e,0xcd,0x57,0xa9,0x81,0xb3,0x43},{0x46,0x28,0x2b,0xa0,0xe5,0xe3,0xf0,0x72,0xa7,0xbc,0x8d,0xec,0x45,0x31,0x6e,0xdb,0xb2,0x4b,0x20,0xbf,0x64,0x74,0x26,0x70,0x9b,0xd6,0xd3,0x7f,0x9f,0xc1,0x59,0x03,0x2d,0xda,0x6f,0xaa,0x7c,0x92,0xc6,0xe0,0xe8,0xaa,0x1e,0x26,0xf0,0x1e,0xcc,0xef,0x6d,0x87,0x04,0x3c,0xed,0x52,0x15,0xb3,0x9f,0x01,0x4e,0xe3,0x3c,0xb6,0xbb,0xac},{0x86,0x1a,0x25,0x8e,0x41,0x85,0xf9,0xba,0x98,0x15,0xb1,0xec,0x50,0xb4,0xd0,0xab,0x55,0x54,0xbb,0x3b,0x61,0xfc,0x54,0xf3,0x09,0xea,0xaa,0x6e,0xbf,0x03,0xc3,0x58,0x1d,0x24,0xb5,0xd5,0x45,0x5a,0x7a,0x14,0xc3,0x6a,0xa9,0xd8,0x6f,0x41,0xc3,0xb4,0x9a,0x05,0x71,0xbc,0x23,0x67,0xc2,0xa8,0xf5,0x7b,0x69,0xa5,0xe1,0x7a,0x35,0x1d},{0x3b,0xf5,0xa8,0xc0,0x2a,0x7d,0x85,0x88,0xd4,0xf4,0x26,0xd3,0xf4,0xe3,0x52,0x35,0x37,0x06,0x1e,0x71,0xc2,0x3b,0x7b,0xeb,0xf0,0x07,0x30,0x6b,0x37,0x31,0xb9,0x27,0xd8,0x0b,0x17,0xae,0xff,0xd4,0x7c,0x59,0xd7,0x2d,0xea,0xcb,0x92,0x2f,0x93,0xc7,0xd7,0xc3,0xaf,0x75,0x73,0x6a,0x3f,0x89,0xe5,0x13,0x0c,0x28,0x47,0xf4,0xa4,0x07,0xfb,0xd9,0x77,0xb4,0x1e,0xb2,0x70,0xca,0x85,0x22,0x58,0xc6,0x0b,0x19,0xc2,0xa5,0xba,0xc3,0xc9,0xb6,0x4a,0xdb,0x7d,0x4d,0x66,0xde,0xeb,0x8c,0x1a,0x23,0xb8,0x4c},{0x8c,0x57,0x0e,0x9f,0x0a,0xb2,0xf4,0x07,0xdd,0x7b,0x46,0xf8,0xa0,0xb1,0x33,0x4c,0x2b,0x1e,0x1a,0xe0,0x28,0x17,0x14,0xba,0x14,0x06,0x40,0x1f,0x30,0x0a,0x19,0xcd,0xe7,0xca,0xfb,0xdb,0xb9,0x76,0xf8,0x8a,0x81,0x3d,0x03,0x86,0x7e,0x66,0x75,0x1d,0xec,0xff,0x6b,0xa7,0xea,0x4c,0x8c,0x60,0xd2,0x1f,0x72,0x11,0x4c,0x5d,0xeb,0x01,0xfb,0xd9,0x77,0xb4,0x1e,0xb2,0x70,0xca,0x85,0x22,0x58,0xc6,0x0b,0x19,0xc2,0xa5,0xba,0xc3,0xc9,0xb6,0x4a,0xdb,0x7d,0x4d,0x66,0xde,0xeb,0x8c,0x1a,0x23,0xb8,0x4c}},\n\t{{0x05,0x64,0x16,0x53,0xbb,0xb2,0x6e,0x81,0xfc,0xe6,0xec,0xc8,0x0c,0xc1,0x75,0x59,0x23,0xe2,0x4b,0xd8,0x6a,0x70,0x34,0x50,0x37,0xc6,0xc2,0xbd,0x27,0xfd,0xad,0x4c,0xee,0xe4,0xf7,0xfc,0x91,0x05,0x48,0x3c,0xd4,0x09,0x78,0x00,0xce,0x15,0x37,0xdc,0xe7,0xce,0x48,0x09,0x3e,0x7f,0x01,0x9b,0x03,0xc8,0x2f,0x9b,0xe6,0x42,0xe1,0x71},{0x64,0xbf,0x63,0x91,0xe5,0x3e,0x90,0x89,0x96,0xea,0x59,0x51,0x60,0x7b,0x5f,0xfe,0x0f,0x76,0x86,0x19,0x45,0x82,0xd9,0x5e,0x1a,0xd1,0xf6,0x04,0xc6,0xaa,0x71,0xda,0x80,0xed,0x75,0x51,0xc8,0x9a,0x27,0x09,0xc3,0x50,0xe4,0x14,0xa1,0xc3,0xf8,0x3a,0x6c,0x84,0xff,0x87,0xd5,0xf0,0xb0,0x3c,0x5a,0x57,0x14,0x90,0xc7,0x31,0xf8,0x47},{0x88,0x7d,0xcc,0x81,0x2b,0xbb,0x7e,0x96,0xbe,0x78,0xe1,0xb1,0xf2,0xed,0x6f,0xd8,0xff,0xbd,0x7f,0x8e,0xe5,0xeb,0x7f,0x7b,0xca,0xaf,0x9b,0x08,0x1a,0x77,0x69,0x1d,0xc2,0xa4,0x7c,0x4d,0xa6,0x74,0x8e,0x33,0x24,0xff,0x43,0xe1,0x8c,0x59,0xae,0x5f,0x95,0xa4,0x35,0x9e,0x61,0xb8,0xcc,0x4c,0x87,0xb9,0x76,0x53,0x20,0xa3,0xf3,0xf5},{0x13,0x2a,0xcc,0x07,0xb1,0x5f,0xc7,0xf1,0x08,0x0e,0x7d,0x7e,0x26,0x56,0xd8,0x16,0x9c,0xae,0xac,0xc4,0xf5,0x9c,0x15,0x67,0xae,0xc4,0xcc,0x3f,0xc0,0xaf,0x53,0x28,0x1f,0x65,0x14,0xe5,0x7f,0x0c,0xf5,0x7a,0xe3,0x93,0xc1,0xa3,0xd1,0x4a,0x09,0x7d,0x24,0xab,0x22,0xc4,0xc4,0xce,0x85,0x37,0x86,0xa8,0x9c,0x39,0x33,0xba,0x1b,0x83},{0x6d,0x3e,0x92,0x5a,0xa8,0xfa,0xe6,0x71,0x98,0xa8,0x82,0x38,0xcc,0xed,0xd6,0x92,0x7e,0x3e,0xcb,0xb2,0x82,0x92,0x7a,0x56,0x9e,0xd6,0x29,0x45,0x42,0x04,0x76,0x82,0xa5,0xfc,0xd9,0x0c,0x12,0x4c,0x98,0x04,0x2a,0x3a,0x98,0x01,0xb8,0x62,0xe8,0xe6,0x7c,0x51,0xe3,0x7d,0x97,0xf5,0x45,0xb4,0x13,0xdf,0x15,0x68,0xc3,0x00,0x75,0x40},{0x7e,0x89,0x3d,0x7c,0x78,0x36,0x3c,0x85,0xda,0xb6,0x9b,0x6d,0xbc,0x52,0x7d,0xc6,0xaa,0xfd,0x90,0x62,0xe4,0xc4,0x1a,0x5a,0x2e,0xa1,0x57,0xd7,0xda,0x57,0xf4,0x58,0xc5,0x23,0x61,0x21,0xe1,0x93,0xfa,0x06,0x22,0xed,0x41,0x66,0x24,0x47,0xb9,0xed,0xc8,0x84,0x25,0x28,0x39,0xec,0xfb,0x29,0xa1,0xcd,0xe1,0x9d,0x02,0x48,0x6f,0x0a,0xe2,0x9f,0x98,0xfd,0x3d,0x18,0xa1,0x24,0x9c,0xc6,0x75,0xb8,0x99,0x76,0x2a,0xa4,0x9e,0xb1,0x97,0x2d,0x1c,0x99,0x65,0x5f,0x1f,0xda,0x14,0x4f,0x10,0x49,0xf1,0x7a},{0x2c,0xec,0x27,0x63,0xd2,0x77,0x14,0x2d,0x01,0x18,0x10,0xe0,0x23,0x1b,0xa2,0x25,0x61,0xd4,0x52,0xd9,0x90,0xde,0x97,0x7e,0xb8,0xfa,0x38,0x25,0xf2,0x91,0x07,0x3e,0xc4,0xa9,0x3e,0xb5,0x67,0x02,0x28,0x94,0x5c,0x34,0xa1,0x0a,0x5c,0x54,0x53,0xd9,0xb4,0xc4,0x5a,0x8e,0x57,0x18,0xc3,0x35,0xea,0x47,0x75,0xe0,0x44,0x01,0x71,0x09,0xe2,0x9f,0x98,0xfd,0x3d,0x18,0xa1,0x24,0x9c,0xc6,0x75,0xb8,0x99,0x76,0x2a,0xa4,0x9e,0xb1,0x97,0x2d,0x1c,0x99,0x65,0x5f,0x1f,0xda,0x14,0x4f,0x10,0x49,0xf1,0x7a}},\n\t{{0x41,0x10,0xd9,0x7f,0xb8,0x83,0x9e,0x42,0x43,0x7a,0xb0,0x6d,0xa6,0xcf,0xa5,0x7a,0x50,0x93,0x2d,0x13,0x94,0x37,0xa8,0x92,0x26,0x1f,0xad,0xe0,0x25,0x19,0x91,0x62,0x28,0xfb,0x18,0xbf,0x89,0xb0,0x42,0x80,0x14,0xcd,0xd2,0x72,0x84,0x1c,0xfd,0xe5,0xc3,0x71,0x3c,0x3f,0x12,0x5e,0xdd,0x53,0x39,0xf6,0x4b,0x9f,0xb3,0x5c,0xe3,0x15},{0xd0,0xc7,0x18,0x4d,0x68,0x9f,0xdd,0xec,0x81,0xf8,0xc6,0x0e,0x83,0x43,0x23,0x3d,0xfc,0xf3,0x66,0x55,0xa8,0x65,0x8b,0xd7,0x9b,0x3c,0x74,0x23,0xcd,0xae,0x60,0xe7,0x61,0xed,0x2c,0x7e,0xe7,0xa7,0x63,0x7d,0x72,0x47,0x6a,0x33,0x1c,0xaa,0x81,0xba,0x6f,0xd4,0x00,0xe7,0xa9,0x58,0xb2,0xad,0xee,0x3f,0x9c,0x70,0xff,0x2f,0x13,0x6f},{0x56,0x7b,0x19,0x66,0x42,0x9a,0x99,0x51,0x23,0x4f,0xb6,0xe7,0xcf,0x98,0xff,0x20,0x5a,0xc3,0x0e,0x36,0xc9,0xc6,0x20,0x25,0x0c,0x56,0x98,0xfb,0xbd,0xd6,0x66,0x4f,0x6f,0x94,0x85,0x8a,0x35,0xf3,0x50,0xad,0x87,0xde,0x95,0x9e,0xae,0x2a,0xd8,0xdd,0x78,0x87,0x96,0x2b,0xe0,0x12,0x95,0xd9,0x3b,0xb2,0x2a,0x06,0xe2,0xf0,0x06,0xd4},{0x42,0x24,0xdd,0x0a,0xd1,0x11,0x31,0x7e,0x56,0x45,0xb0,0x0e,0x86,0xc1,0x5d,0x8c,0x03,0x01,0xb8,0x33,0x20,0xbd,0x08,0x10,0xe5,0x70,0x92,0x2b,0x5b,0x86,0xd3,0x50,0x4c,0x1e,0xe3,0xd1,0x2a,0x4e,0x40,0x02,0x19,0x0b,0xf6,0x91,0xd9,0x9e,0xaa,0x54,0x7c,0x3d,0xba,0xc5,0x5a,0x9e,0xb2,0xbb,0x4e,0x0d,0x5b,0xdd,0x90,0xc9,0x7b,0xc2},{0x54,0x95,0xd5,0xdc,0x7e,0x7e,0xec,0xd4,0x67,0x08,0xdc,0x58,0xa9,0x80,0x8a,0x03,0x6a,0xf8,0x40,0xca,0x0d,0x5b,0x6c,0xe4,0xc9,0x71,0xa5,0xaf,0x2a,0xaa,0xe8,0x95,0x45,0xe7,0xe2,0xc3,0x47,0x84,0xc6,0xbe,0xe5,0x65,0xaf,0xcd,0x7c,0x20,0x5f,0x8b,0x19,0x61,0xe4,0xc9,0xc1,0x86,0xa5,0x6f,0x96,0xf3,0x9c,0x13,0x28,0x1b,0xcf,0x07},{0xc4,0x7f,0xf2,0x6f,0xcc,0x4a,0xf8,0xa4,0x1f,0x1d,0x6e,0x5e,0x30,0xb2,0x99,0x8f,0x5d,0x7c,0x26,0x1c,0x52,0x6f,0xd0,0x33,0xa7,0xf8,0xca,0x2a,0xc3,0x8c,0xa8,0xd1,0x50,0x4f,0xa7,0xe8,0xf2,0x10,0x4c,0xcd,0x8a,0x31,0x03,0xc8,0x93,0x2c,0xd7,0xe4,0x21,0xdb,0xa2,0x62,0x7b,0x1f,0x28,0x14,0x69,0x7e,0x87,0xac,0xf9,0xb4,0x97,0x00,0x62,0x86,0x14,0xd7,0xe4,0x65,0xdd,0x9e,0x1c,0x64,0x5f,0x3e,0xef,0xfe,0xa6,0x60,0x68,0x91,0x94,0x8a,0x1c,0x89,0xae,0xe4,0xcf,0x3a,0xdd,0xc0,0xb4,0x47,0xe8,0x8f},{0x12,0x80,0x00,0xda,0xce,0xc4,0x80,0x8f,0xa9,0xa1,0x5d,0x98,0x7d,0x2c,0xb2,0x9c,0x71,0xde,0x62,0x89,0x6a,0xe1,0x92,0xd7,0x96,0xdc,0xcd,0xc8,0x08,0x0e,0x48,0xbf,0x2a,0x53,0x72,0x90,0x31,0x71,0x49,0x02,0xda,0x4e,0x19,0x05,0x10,0xcb,0x41,0x97,0x44,0xdc,0x2d,0x1e,0x48,0xe5,0x0e,0x41,0x9d,0x7d,0x03,0xa3,0xe2,0x65,0xd4,0x01,0x62,0x86,0x14,0xd7,0xe4,0x65,0xdd,0x9e,0x1c,0x64,0x5f,0x3e,0xef,0xfe,0xa6,0x60,0x68,0x91,0x94,0x8a,0x1c,0x89,0xae,0xe4,0xcf,0x3a,0xdd,0xc0,0xb4,0x47,0xe8,0x8f}},\n\t{{0x00,0x4b,0x0b,0xf5,0x1f,0x07,0x1e,0x23,0xe3,0x93,0x7b,0x31,0x41,0x2a,0x0a,0x50,0x35,0xe2,0xbb,0xfe,0x51,0x77,0x6c,0xc9,0xc5,0x13,0xb9,0x87,0x79,0x65,0x68,0x20,0xcc,0x09,0x90,0xa9,0xe4,0xef,0x9f,0x1a,0xe1,0x69,0x76,0x14,0x82,0x42,0x88,0x4b,0xdc,0xe0,0x10,0x22,0xe2,0xd6,0x36,0x7c,0x0b,0xd9,0x08,0xea,0xfa,0xe4,0xfd,0x45},{0x57,0x5c,0x1e,0x20,0xb4,0xae,0x9e,0x9d,0x04,0xfb,0x1a,0xd7,0x23,0xd8,0x8a,0x6b,0x1b,0xb2,0xef,0xa9,0x06,0x38,0xbb,0x9b,0x43,0x2e,0xf1,0x81,0x0b,0x76,0xec,0x20,0x46,0x1b,0xc4,0x71,0x19,0x3e,0x79,0xe8,0xcf,0xea,0xdc,0x4b,0x3f,0x0b,0xeb,0x05,0x13,0x1a,0x2c,0xfe,0x16,0xe9,0xf0,0xc4,0x9c,0x41,0xab,0x45,0x1b,0xba,0x05,0xec},{0x06,0x0b,0x73,0xec,0x30,0x74,0x0d,0x8d,0x13,0x4b,0xef,0xac,0x3b,0x05,0xb6,0xed,0x2b,0x05,0xd1,0xa7,0x65,0xb0,0xcb,0x69,0x00,0xeb,0x47,0xe3,0x1c,0x07,0x8b,0x15,0xbf,0x69,0xff,0x27,0xb4,0xdb,0x77,0xaf,0xe9,0x9a,0xfb,0xb2,0x28,0xa4,0xf9,0x05,0xe4,0x3c,0x66,0x56,0x00,0x1a,0x2c,0x41,0xf2,0xe1,0x11,0x09,0xfa,0xe1,0x50,0x49},{0xbc,0x4d,0x6f,0x75,0x79,0x77,0x64,0x6b,0xec,0xac,0x1a,0x26,0x73,0x9c,0xf3,0xf1,0x4d,0x79,0xbe,0x6f,0x0c,0x07,0x22,0xd1,0xa1,0x31,0x75,0xa8,0x9c,0xb6,0x00,0x63,0x0d,0x40,0x17,0xec,0x83,0xda,0x82,0x2c,0x3b,0xfd,0x90,0xe3,0xbc,0xc2,0x2c,0xf5,0x3e,0x41,0xe9,0x98,0x57,0xa2,0xb7,0xce,0x5f,0x31,0xbb,0x0b,0x05,0x61,0x0f,0x55},{0xb7,0xab,0xb2,0x84,0xf1,0x67,0x24,0x16,0x61,0xe9,0x20,0x33,0x0b,0xff,0x22,0x61,0x70,0xa0,0x5d,0xf6,0xa8,0x33,0xc9,0x30,0x73,0xe5,0x89,0x36,0x59,0xea,0xa8,0xe7,0x03,0xf6,0x14,0xc1,0x79,0xb6,0x42,0xa5,0xc8,0x6c,0xb8,0x94,0x29,0x24,0x00,0x09,0xb5,0x54,0x3f,0xe1,0x6b,0xfb,0x4d,0x2d,0xa9,0x9a,0x02,0xa1,0xa5,0x09,0xf4,0xcb},{0x92,0xfa,0x18,0x84,0x3e,0xdb,0xdf,0x7d,0x87,0xd6,0x2d,0x07,0x05,0x2c,0xba,0xe4,0x30,0x76,0xa2,0xe8,0x71,0x3b,0x1b,0x93,0x5b,0xce,0x2e,0xec,0x50,0x6e,0x4a,0x0b,0x2d,0xbe,0xa3,0x76,0x92,0xf8,0xc8,0x4a,0x71,0x66,0xec,0xfa,0x36,0xc5,0xdb,0xab,0x99,0x9c,0xbf,0x99,0x07,0xe8,0xfe,0xf4,0x2f,0x90,0x16,0x5d,0xdc,0xbe,0xfa,0x08,0x93,0xde,0x13,0xf5,0x32,0x45,0x9a,0xde,0xa2,0x5d,0xb9,0xe0,0x38,0x4c,0x6a,0xcc,0x13,0x46,0x27,0x28,0xbf,0xf8,0x7a,0x9c,0x2e,0xde,0x6f,0xfe,0xe1,0x86,0x41,0x79},{0xa7,0x32,0x52,0x76,0x4f,0x3e,0x1b,0xab,0x82,0x18,0x14,0xe7,0x42,0x32,0xb8,0xa4,0x98,0xde,0xa4,0xd7,0xae,0x42,0x84,0xda,0x71,0xf7,0x78,0x40,0x56,0x94,0x64,0x49,0x34,0x37,0xeb,0xe3,0x05,0x4c,0xb9,0xbb,0xce,0xb2,0x72,0xc0,0x75,0x1c,0xc4,0xd5,0x1e,0x3a,0xc1,0x43,0xda,0xd1,0x81,0x82,0xa9,0xd5,0x0e,0x0a,0x5e,0xc2,0xd7,0x04,0x93,0xde,0x13,0xf5,0x32,0x45,0x9a,0xde,0xa2,0x5d,0xb9,0xe0,0x38,0x4c,0x6a,0xcc,0x13,0x46,0x27,0x28,0xbf,0xf8,0x7a,0x9c,0x2e,0xde,0x6f,0xfe,0xe1,0x86,0x41,0x79}},\n\t{{0xa3,0xdf,0x4a,0xfd,0xe6,0x74,0xb8,0xeb,0xed,0xe7,0x7e,0xd2,0xae,0xf8,0x40,0x80,0x3a,0x55,0x58,0x1d,0x6b,0xa4,0x32,0x6c,0x15,0xbb,0x67,0xdf,0x9e,0xb5,0x70,0x4b,0x7f,0x4d,0xfe,0x34,0x42,0x0c,0x4d,0xe3,0x97,0x87,0x6d,0x08,0xe8,0x4d,0x8a,0xa9,0xbc,0xbf,0x1b,0xb7,0x66,0x32,0xf4,0x7f,0x93,0xca,0xa4,0xd2,0x8f,0x02,0x7b,0xfa},{0xea,0xac,0xdf,0x25,0x39,0xf3,0x28,0xb6,0xbe,0xa8,0x4a,0x32,0x59,0x4b,0x4f,0xb5,0xd2,0xf7,0xf5,0x75,0x43,0x8b,0xb3,0x6a,0x98,0x8c,0x14,0xc9,0x3f,0x7e,0x5c,0x05,0xf0,0xeb,0x1d,0xc5,0xe6,0x1b,0x5d,0x7f,0x38,0x5d,0x9a,0xbe,0xc8,0x97,0x09,0x65,0x62,0x88,0x99,0xda,0x95,0x13,0x93,0xd9,0xa3,0x19,0x0a,0xa7,0x4a,0xb2,0x81,0xa4},{0x6e,0x70,0x65,0xaa,0x1b,0x16,0xcb,0xc1,0x59,0x6b,0xc9,0x4d,0xd1,0x0a,0x9d,0x8c,0x76,0x70,0x3c,0xc1,0xc1,0x66,0xa6,0x9f,0xfc,0xca,0xb0,0x3f,0x0e,0xe9,0xa9,0x36,0x09,0x4f,0x94,0xf3,0x32,0x25,0x34,0xf6,0xe4,0xf9,0x0b,0x0c,0xe6,0xe0,0x6d,0x9e,0xa5,0x52,0x82,0x9c,0xd4,0x43,0xa4,0xd1,0xd1,0x63,0x20,0xce,0xbc,0x4f,0x43,0xdc},{0x35,0xd6,0xc1,0x68,0xa6,0xd7,0xd3,0x36,0x82,0x2a,0x0f,0x29,0x3e,0xd6,0x15,0x29,0x19,0x73,0x14,0x78,0x87,0x86,0xca,0x9f,0x6e,0x17,0xea,0xaf,0x24,0x37,0xd6,0xb4,0xb0,0xee,0x84,0x90,0x2d,0x18,0xbd,0x26,0xc3,0xd4,0x39,0x4f,0x45,0xfa,0x2f,0x70,0xf2,0xe2,0x2a,0x2a,0x5c,0x65,0x15,0xcb,0xaf,0x92,0x9a,0xfc,0x06,0xe0,0x8a,0x1b},{0x5d,0xfa,0xc0,0x2b,0xc3,0x94,0x19,0xb4,0xd6,0x13,0xe3,0xcf,0x91,0xad,0x8c,0xe1,0x97,0x46,0xfe,0xea,0x74,0xe0,0x0c,0x03,0xf7,0x2e,0x51,0xa7,0xf2,0xbc,0xce,0xe8,0x6b,0xfd,0x2f,0x54,0x52,0x12,0x00,0x8d,0x95,0x91,0xc3,0xf6,0x25,0xf8,0x65,0x6a,0x9c,0x79,0x6b,0x71,0xc0,0x0c,0x29,0xfb,0xe7,0x14,0x9f,0x2f,0x1a,0x07,0x53,0x50},{0xe9,0xd4,0x46,0x0b,0x51,0x3f,0xf1,0xbe,0x0a,0x23,0xa5,0x38,0xa0,0xe3,0x70,0x14,0x63,0xf0,0x94,0xbb,0x1c,0x4f,0x23,0x05,0x1b,0x62,0x40,0x9b,0xf9,0x52,0x1b,0x41,0x51,0x57,0x2a,0x99,0x73,0xda,0xe1,0xcf,0xc5,0x4c,0x65,0x3a,0xc2,0x9d,0x73,0xda,0xc9,0x59,0xf1,0xdf,0xab,0x2b,0x27,0xe1,0x59,0x8b,0xa7,0x48,0xf9,0x36,0xcb,0x08,0xe3,0x5e,0x1d,0xdd,0xf9,0x20,0x4f,0x64,0xa9,0x26,0x74,0x97,0xf2,0x2d,0x31,0xac,0x8c,0x20,0x77,0x09,0xa9,0x8f,0xed,0x23,0x77,0x7e,0xd7,0x34,0x93,0x84,0xe7,0xaa},{0xaa,0xf7,0x64,0xdf,0x34,0x59,0x1c,0x2c,0xbc,0x47,0x08,0x6a,0x25,0xbf,0x9d,0x48,0x54,0xcf,0xa0,0x6c,0xfc,0xd4,0x10,0x39,0x9f,0x64,0x46,0xce,0xd9,0x95,0x28,0x89,0xdf,0x94,0x5e,0x74,0x0b,0x55,0x46,0x82,0xd9,0x3d,0x82,0x97,0x7d,0xd0,0x3e,0xd7,0xf6,0x6f,0xaa,0x97,0x3e,0xdf,0xa7,0xde,0xe3,0xc5,0xaf,0xd3,0xa0,0x5a,0x30,0x0d,0xe3,0x5e,0x1d,0xdd,0xf9,0x20,0x4f,0x64,0xa9,0x26,0x74,0x97,0xf2,0x2d,0x31,0xac,0x8c,0x20,0x77,0x09,0xa9,0x8f,0xed,0x23,0x77,0x7e,0xd7,0x34,0x93,0x84,0xe7,0xaa}},\n\t{{0x96,0x4e,0xf2,0x1e,0x3a,0xe5,0x77,0xbf,0xa7,0x1c,0x3d,0x66,0x08,0x06,0xca,0x55,0x43,0x7a,0x08,0xf8,0xff,0x55,0xb3,0xbc,0x9a,0x83,0x9a,0x2e,0xe6,0x97,0x14,0x32,0x36,0x57,0x5c,0xa4,0x04,0x78,0xb1,0x92,0xf4,0x23,0x94,0xe6,0x2a,0xef,0xd4,0xe7,0xc4,0x02,0x9f,0xa9,0x79,0x77,0x61,0x90,0xd6,0xdb,0x6e,0x28,0x7e,0xc0,0x1d,0x70},{0xc5,0xd1,0x5c,0x34,0x15,0xa9,0x1e,0x42,0x2a,0x1b,0x0d,0xf0,0x56,0x83,0x10,0xc3,0xc9,0x21,0xfd,0x05,0xfa,0x51,0x0e,0x11,0x28,0xcc,0x84,0xac,0x35,0xb5,0xd8,0xc8,0x5c,0x80,0x11,0x1f,0x60,0x1c,0x72,0x25,0x82,0x45,0xb5,0x4f,0x66,0x6b,0x52,0xb1,0xf7,0x28,0x0f,0x80,0x76,0x44,0xdc,0x15,0x70,0x39,0xe9,0xaf,0xc7,0x0a,0xa0,0x43},{0xff,0x20,0x5e,0x3b,0x75,0xe9,0x38,0x7c,0xa3,0x5c,0x8b,0x1a,0xec,0x17,0x8d,0xf0,0xef,0xb3,0x53,0x9b,0x16,0xa9,0x44,0xf9,0x34,0x45,0x13,0x66,0x80,0x24,0xdc,0x22,0x0e,0x51,0x94,0xed,0xe6,0x83,0x36,0x32,0x63,0x23,0x1b,0xf8,0x78,0xb4,0x04,0x7f,0x5a,0x50,0x54,0x12,0x19,0x04,0x61,0xdd,0x25,0xf0,0x48,0x29,0x04,0xc1,0x44,0xe2},{0x46,0x32,0x2d,0xc7,0xbc,0x05,0x2a,0xd3,0xb5,0xce,0x7d,0x47,0x5e,0xfc,0x90,0x38,0xef,0xfa,0x6f,0x42,0xf0,0x66,0x05,0x89,0x7c,0x9a,0xc1,0xfd,0xa2,0xe8,0xa7,0x38,0x18,0x6d,0x7f,0x9e,0xfb,0xbd,0x06,0x0c,0x70,0xd7,0x29,0x10,0x88,0x04,0x9f,0x24,0x28,0x9d,0xc7,0x84,0xdf,0xb6,0xec,0xb2,0xc7,0x1b,0xd1,0xc1,0x9d,0x56,0xb0,0x83},{0xda,0xd7,0x34,0xee,0x62,0x13,0x8f,0x47,0xad,0xb4,0x9c,0x98,0xe4,0xc5,0xb3,0x29,0x31,0x11,0x64,0xad,0xf5,0x0b,0x60,0xe1,0x0e,0x18,0x28,0x30,0x3c,0xa2,0xe3,0x29,0x89,0x0a,0x7e,0x18,0xba,0x30,0x9e,0x7d,0x53,0xf1,0x82,0xd5,0x27,0xe5,0xf3,0xab,0x15,0xcd,0x62,0x7e,0xdf,0xf0,0x0e,0x42,0xfa,0x6b,0x7b,0x54,0xd2,0x74,0x19,0x8f},{0x29,0x4d,0x28,0x80,0x62,0xb5,0x77,0xbb,0x69,0x70,0xb0,0xb7,0x10,0x2e,0xed,0xfc,0x13,0x34,0x93,0x7f,0xd8,0xfc,0xb5,0x7b,0xfe,0x34,0x0a,0xa3,0x95,0x5b,0xb1,0xa7,0xc6,0xab,0x82,0x79,0x25,0x23,0x94,0x12,0xa4,0x34,0xec,0x23,0xca,0xcb,0xd0,0xa3,0xf9,0x31,0x32,0xce,0x50,0x31,0x73,0x23,0x98,0x94,0xe3,0x08,0xd9,0x1e,0xc3,0x0b,0x39,0xe3,0x3b,0xf2,0xe8,0xb7,0x26,0x28,0x9d,0xb3,0x12,0x8d,0x16,0xca,0x89,0x26,0xa9,0x1c,0xa3,0x1f,0x36,0x10,0x60,0x6a,0x29,0x85,0xe7,0x2c,0xee,0xc1,0xb6,0xae},{0x68,0xed,0x3c,0x64,0xe6,0x87,0xf0,0x14,0x64,0xfc,0x38,0x3a,0x0f,0xd9,0x7a,0x5b,0x52,0x32,0x10,0xca,0xc6,0x83,0x0b,0xae,0x17,0x0e,0xfe,0x77,0xe0,0xe7,0x83,0xa1,0x2c,0x78,0x62,0x9c,0x79,0x08,0x2b,0xd4,0x85,0x72,0x27,0x8d,0x97,0x78,0x62,0x33,0x34,0xeb,0x5c,0xde,0x5d,0xaa,0x4d,0xfa,0xd1,0x67,0xa4,0xea,0x45,0xad,0xf9,0x06,0x39,0xe3,0x3b,0xf2,0xe8,0xb7,0x26,0x28,0x9d,0xb3,0x12,0x8d,0x16,0xca,0x89,0x26,0xa9,0x1c,0xa3,0x1f,0x36,0x10,0x60,0x6a,0x29,0x85,0xe7,0x2c,0xee,0xc1,0xb6,0xae}},\n\t{{0xd9,0x64,0xb2,0xe1,0x9f,0x0a,0x35,0xfc,0x9f,0xc3,0xa5,0x2a,0xa3,0x84,0xb4,0xf3,0x23,0xc4,0xf3,0x5a,0x9d,0xf8,0x7f,0x35,0xa9,0xf5,0x5b,0x68,0xfc,0x19,0x69,0x63,0x6a,0x13,0x19,0x32,0xcc,0x9d,0x0c,0x3c,0x7d,0xdd,0x85,0x16,0xa8,0xd9,0x2b,0x75,0x08,0x4b,0x9a,0xa5,0x6e,0xf3,0xe9,0xeb,0xed,0x5d,0x2e,0xfd,0x2e,0x0c,0x60,0xa2},{0x0f,0xf6,0x8c,0x3f,0x6e,0xee,0x56,0x4f,0x43,0x6f,0x54,0xbd,0x7a,0xe4,0xbe,0xa8,0x77,0x05,0x99,0xe7,0x9e,0x59,0x22,0x85,0x9b,0xc6,0xe4,0x2a,0x61,0x9c,0x19,0xb1,0x5a,0xeb,0x7a,0xf8,0x41,0x4e,0xe5,0x2a,0xd0,0xf7,0x44,0xf0,0x16,0xea,0x0c,0x04,0x19,0x6c,0xb6,0x30,0x3c,0x6e,0x2d,0x79,0x9a,0x8f,0x08,0x90,0x11,0xf1,0xc0,0x4d},{0x68,0xe7,0x1d,0x40,0xf1,0x07,0xc0,0xc6,0xb2,0x87,0x9c,0xa2,0x19,0x43,0x7a,0xdf,0x8a,0x5a,0x0f,0xe2,0x24,0x97,0xa0,0x38,0x79,0x20,0x38,0xa9,0x9c,0x77,0xc4,0x37,0xa6,0x02,0xe0,0x93,0x47,0xa4,0x55,0x21,0xc2,0x69,0xbe,0x09,0x05,0xaa,0x87,0x28,0xf1,0x95,0x2f,0xdb,0xf0,0xbf,0xd2,0x9e,0x5e,0x3a,0xfa,0xc6,0x2f,0x13,0x09,0xaf},{0xe1,0x9e,0xc8,0x4f,0xc9,0xdd,0x61,0x60,0x94,0xbc,0xd3,0xd6,0xde,0x11,0x6e,0xec,0x84,0xc4,0xdd,0xbe,0x20,0x46,0x6c,0xef,0xf6,0x9d,0x37,0x07,0x53,0x72,0x57,0xf9,0x02,0xb5,0x64,0x1f,0xe2,0x56,0xa4,0x38,0x6d,0xa4,0xed,0x23,0x9e,0xa3,0xf4,0x4d,0x77,0x52,0xdc,0x8c,0x51,0xfc,0x88,0x18,0xbc,0x83,0x2a,0xac,0xc1,0x1d,0x3d,0x59},{0x08,0x4f,0x78,0x21,0xfd,0x4b,0x85,0x86,0x4e,0x25,0xdd,0x47,0x60,0x7f,0x7e,0xc6,0xd3,0xa1,0xab,0x91,0x3f,0xeb,0xf6,0x40,0x7e,0x1b,0xbd,0x99,0x9c,0x7c,0x2f,0x4f,0xca,0x68,0xa5,0xf6,0x8c,0x1e,0xcb,0xb8,0x76,0xe2,0x87,0x5b,0x49,0x68,0x97,0x2c,0x21,0x5c,0x7c,0x93,0x79,0x9a,0x95,0xa1,0x3a,0x49,0xc9,0x6d,0x34,0x6b,0xa1,0x98},{0xb9,0x88,0x25,0x9a,0x3b,0x53,0x56,0xa1,0x48,0x0f,0xf0,0x92,0xde,0x4e,0x3e,0x3a,0xcf,0x02,0xdc,0x5c,0xc2,0xc3,0x78,0xad,0x8a,0x0c,0x3c,0xc7,0xdd,0xdd,0x71,0x6e,0x3f,0xd9,0x3a,0x57,0x2a,0x19,0xa5,0x3b,0x5c,0x46,0x7b,0xc9,0x0f,0x16,0xb3,0x58,0xa6,0x85,0xfa,0x91,0x2c,0x9a,0x9c,0x12,0xb6,0xd6,0x7d,0x9a,0xf0,0x9d,0xe9,0x02,0xad,0x12,0x87,0xda,0x85,0x58,0x6b,0xff,0x68,0x96,0x05,0x33,0xba,0x7f,0x08,0xf9,0xa9,0xa2,0xa9,0x46,0x43,0xe5,0x03,0x12,0xe4,0xbe,0x74,0xaa,0x46,0x4e,0x51,0xb3},{0x61,0x70,0x17,0x50,0x26,0xfa,0x51,0x83,0xe0,0xca,0xa9,0xb1,0xc3,0xc4,0x83,0xa9,0xb6,0x43,0x6b,0x7a,0x5b,0xe4,0x21,0x5a,0x6b,0xd4,0x34,0xf8,0xee,0x95,0x86,0x2d,0x03,0xbf,0xca,0xd0,0xfa,0x68,0x53,0xb2,0x97,0x50,0xad,0x89,0x2f,0x99,0x63,0x67,0x18,0x57,0x1f,0x57,0x41,0xbc,0xb7,0xc0,0x18,0xe7,0xb6,0xf3,0x0f,0xc4,0x49,0x0d,0xad,0x12,0x87,0xda,0x85,0x58,0x6b,0xff,0x68,0x96,0x05,0x33,0xba,0x7f,0x08,0xf9,0xa9,0xa2,0xa9,0x46,0x43,0xe5,0x03,0x12,0xe4,0xbe,0x74,0xaa,0x46,0x4e,0x51,0xb3}},\n\t{{0xc5,0xdf,0x86,0x8f,0xf1,0xa7,0xad,0x57,0xfd,0xb4,0x53,0xc3,0x92,0x1b,0x9e,0x2e,0xdd,0xc5,0xa4,0x3b,0x72,0xa6,0x9b,0x4a,0x15,0xca,0x35,0xed,0x3c,0x1a,0x3b,0x38,0x36,0xd6,0xf2,0x03,0xb6,0x97,0x1f,0xcb,0x40,0x5d,0x3c,0x25,0xfc,0xe7,0xff,0xc6,0xbe,0x61,0xe1,0x98,0x31,0x13,0xa9,0xbe,0x05,0x86,0xfe,0x5c,0xf6,0xcc,0xaa,0xf5},{0xd2,0x57,0x19,0x98,0xf8,0x74,0x90,0xb7,0x69,0x6e,0xdd,0x44,0xf1,0x8b,0xb1,0x9c,0xfd,0x5b,0x6b,0xc0,0x45,0xf2,0x49,0xa5,0x4b,0xff,0x8b,0x7f,0x87,0xe3,0xf9,0x71,0xab,0xfa,0xc8,0x17,0xed,0xeb,0x19,0xc6,0x3c,0xee,0x78,0xba,0x89,0x97,0x49,0x85,0x39,0x68,0x29,0x88,0x0b,0x1c,0xd1,0x42,0x8b,0xe8,0x1a,0x3b,0xeb,0x4d,0xef,0x3b},{0xea,0xfb,0xec,0x27,0xc3,0x92,0xc3,0x68,0x0d,0x3c,0x5b,0x20,0x20,0x9c,0x96,0xa7,0x39,0xfa,0x80,0x91,0xef,0x86,0x7d,0xa8,0x87,0xf6,0xef,0x14,0x01,0x46,0xf0,0x68,0x0a,0x8b,0xae,0x83,0x91,0x7e,0xa0,0x14,0x14,0xde,0xf9,0xa8,0xfd,0x67,0x57,0x17,0x20,0x46,0x43,0x49,0x07,0xf0,0x3e,0xc8,0xbe,0x66,0xaf,0x58,0x3a,0xbd,0xd8,0x00},{0x35,0xf5,0xc8,0x2c,0x0e,0x4b,0x56,0xe0,0xef,0x08,0x34,0x38,0x57,0xe9,0xde,0xdb,0x1d,0xe1,0x28,0x05,0x01,0xed,0x62,0x3d,0xa9,0x6e,0xea,0x5b,0x95,0x09,0xe0,0x04,0x46,0xff,0xdc,0x34,0xf6,0xf7,0x63,0xb1,0x76,0xb8,0x3c,0x03,0xef,0x36,0x0f,0x82,0x1b,0x5b,0x6f,0xe2,0x86,0xd9,0x10,0x01,0xe6,0x73,0x75,0x0d,0x50,0x30,0x11,0x68},{0x27,0xb6,0x3b,0x78,0x79,0xf3,0x22,0x78,0x8f,0x0c,0x14,0x8b,0x3f,0x68,0xc2,0xab,0x9f,0x9f,0x05,0x70,0x7e,0xee,0x4b,0x1b,0x6b,0xfc,0x04,0x72,0xca,0xf1,0x9a,0xba,0xe3,0x65,0x9d,0xdb,0x01,0x33,0xc5,0xdb,0xf6,0x87,0xe4,0x73,0x5a,0x0f,0x94,0xa9,0x2e,0xfe,0x8f,0x3e,0xd1,0x0a,0x6d,0xa1,0x21,0x2a,0x92,0x8c,0x4b,0x43,0x13,0x2f},{0xa3,0xa8,0x3b,0xb4,0x4f,0x8a,0xac,0xab,0x8a,0x4c,0x39,0x7e,0xb8,0x2f,0xb1,0x01,0x2e,0xbe,0x0e,0x7d,0x28,0x8a,0x18,0x4a,0xda,0x58,0x1a,0xfb,0x95,0x97,0xf3,0x63,0x58,0xbe,0x8c,0x30,0x13,0x9b,0xba,0x9f,0x4e,0xac,0x8d,0x95,0xf2,0x07,0xbb,0x85,0xa1,0x41,0x4c,0x33,0xe3,0x58,0x8e,0x5c,0xa1,0x05,0x45,0xab,0x5c,0x0c,0xe4,0x02,0xc3,0xa0,0xa0,0x72,0xdb,0x9a,0x9d,0xbf,0x13,0x29,0x94,0x70,0x8b,0xe4,0xe8,0xdb,0x0e,0x0b,0xd0,0xa0,0x25,0xad,0x71,0xa0,0x27,0x9c,0x1d,0x77,0xb0,0x98,0xa8,0x03},{0xe1,0x84,0xa5,0xea,0xa5,0xd8,0x1b,0x29,0xce,0xd7,0xa3,0x72,0xa7,0xc9,0xa5,0xea,0xf1,0x02,0xf3,0x0c,0xb0,0x65,0x12,0xbc,0xa4,0xf2,0x5d,0x69,0x00,0xa4,0x7f,0x5a,0x52,0x09,0xb6,0x7b,0x30,0xf2,0x99,0x03,0x39,0x9d,0xee,0x6f,0xb5,0xf7,0x9e,0x7a,0x97,0x8b,0x81,0x03,0x8c,0xdd,0x35,0xfc,0x1f,0x0a,0xc6,0xa4,0x60,0x7b,0xc8,0x0a,0xc3,0xa0,0xa0,0x72,0xdb,0x9a,0x9d,0xbf,0x13,0x29,0x94,0x70,0x8b,0xe4,0xe8,0xdb,0x0e,0x0b,0xd0,0xa0,0x25,0xad,0x71,0xa0,0x27,0x9c,0x1d,0x77,0xb0,0x98,0xa8,0x03}},\n\t{{0x67,0xe9,0x62,0x76,0x3a,0x90,0x9b,0x6b,0x19,0x1d,0x65,0xb2,0x2a,0x2f,0xf7,0x50,0xaa,0x54,0xa5,0xbb,0x53,0xb5,0xf9,0xee,0x0c,0x04,0x3a,0x3c,0x29,0x4b,0x66,0x3e,0x7b,0xb6,0xaa,0xd2,0x10,0x89,0xcc,0x89,0x2c,0x47,0xbe,0x23,0xd6,0x52,0x81,0x5d,0xc8,0xbc,0x49,0xd6,0x6a,0xcd,0x62,0x99,0x30,0xff,0x16,0xa5,0x50,0x44,0xd8,0x7a},{0xd6,0xcd,0xfe,0xd4,0x44,0x4a,0x9e,0x90,0x44,0x73,0x8a,0xff,0xbb,0x82,0x08,0xb6,0x7f,0xf2,0x87,0xcb,0xa5,0x0b,0x56,0xd3,0x9e,0x91,0xb8,0x52,0x6b,0x25,0xa6,0x5d,0x50,0xaf,0x9b,0xd5,0xfb,0x9f,0x7e,0x2d,0x57,0xdf,0x30,0x78,0x8d,0x1a,0xc3,0xac,0x9c,0x5a,0xbf,0xab,0x5a,0x0d,0xc9,0xb6,0x4b,0x18,0xd4,0xe7,0x55,0x40,0xde,0x7e},{0xc2,0xa9,0x7e,0x5c,0x26,0xf4,0x7d,0xce,0x9e,0x73,0xae,0x50,0xde,0xe7,0xa6,0xf9,0x8b,0x57,0xf9,0x7a,0x4c,0x38,0x82,0xf6,0x30,0x80,0x12,0xf7,0xf6,0x66,0x80,0x46,0x4d,0x41,0x53,0x63,0xd9,0x65,0x90,0xe7,0xee,0x24,0x07,0xb0,0x4f,0xeb,0x3e,0x8e,0x83,0x21,0xa3,0x40,0x03,0xc0,0x64,0x52,0xc6,0xb2,0x12,0x9d,0x8d,0x86,0xdd,0x19},{0xe2,0xd5,0x49,0x5e,0x2a,0x6e,0x4e,0xd9,0x31,0x26,0x53,0x13,0x98,0x5e,0x2f,0x23,0xea,0xa0,0x30,0xee,0xef,0x62,0x2b,0xdc,0x93,0x65,0x90,0xad,0x9a,0xf1,0x74,0x12,0xf5,0x24,0x33,0xcc,0xc3,0xda,0x42,0x54,0xa6,0x6c,0x86,0x99,0xb9,0xb5,0xf7,0x07,0x90,0xd8,0x85,0x7f,0x69,0xfb,0x19,0x2a,0x2c,0xc0,0x11,0x81,0x64,0x37,0x38,0x07},{0xc7,0xb3,0xf5,0xe4,0x4b,0x55,0xcf,0xd8,0x2b,0x72,0xde,0x62,0xfc,0x66,0xea,0x82,0xee,0x2e,0xe5,0x4f,0x66,0xba,0x19,0x63,0x01,0x0b,0x2d,0x89,0xb4,0xaa,0x76,0xb3,0x7e,0xc5,0xbe,0xdd,0x57,0x90,0x5e,0xff,0x5b,0x9a,0x71,0xe1,0x47,0xf9,0xec,0xe5,0xf0,0x19,0x89,0x17,0x65,0x3e,0x56,0x4a,0x98,0xb2,0x3c,0x3b,0xf0,0x14,0x13,0x1b},{0xc0,0x72,0x26,0x96,0x6b,0xf5,0x50,0xa1,0x65,0xcd,0xfe,0x92,0xa5,0x5a,0xb3,0x56,0x27,0x5b,0x2f,0x4a,0x8f,0x67,0xaa,0xf4,0xa1,0x6e,0x3c,0x66,0xcc,0xb7,0x71,0x70,0xff,0x70,0x1f,0x9e,0x09,0xae,0x31,0xcb,0x2a,0xd5,0x8a,0x38,0xa9,0xaf,0xbc,0x94,0xa2,0xa8,0xe9,0x77,0x1c,0xc3,0xfa,0xd1,0x45,0xd2,0xe2,0xff,0x7d,0xf2,0x44,0x00,0xa0,0xc3,0xc1,0xdd,0xa0,0x4c,0xfb,0xed,0x1a,0xbd,0x0c,0x05,0x3b,0xa9,0xc8,0x98,0xb0,0x7d,0x6a,0x77,0xcb,0x08,0x70,0x64,0x31,0x9d,0x9c,0x7b,0x40,0x9e,0xbb,0xf4},{0xbc,0x88,0x9d,0x36,0xae,0xbc,0x92,0x47,0x63,0x85,0x41,0xe3,0x1e,0x1c,0x39,0xf5,0xd3,0xc2,0x0a,0x7d,0x18,0x7a,0x8f,0xd3,0x0c,0x37,0x50,0x28,0x35,0x93,0x77,0x4b,0xcb,0xba,0x35,0x4e,0x94,0x48,0xe4,0x0c,0xa7,0x36,0x4f,0x74,0x2b,0xf9,0xb5,0xb5,0xeb,0x91,0x50,0x3c,0x67,0x9b,0x4d,0x25,0xd4,0x0e,0x0d,0xb9,0x5b,0x77,0xf3,0x0e,0xa0,0xc3,0xc1,0xdd,0xa0,0x4c,0xfb,0xed,0x1a,0xbd,0x0c,0x05,0x3b,0xa9,0xc8,0x98,0xb0,0x7d,0x6a,0x77,0xcb,0x08,0x70,0x64,0x31,0x9d,0x9c,0x7b,0x40,0x9e,0xbb,0xf4}},\n\t{{0x44,0xdd,0x62,0x9e,0x0f,0xee,0x20,0x11,0x37,0xfc,0xd0,0x5c,0xe4,0xe1,0x0a,0xb8,0xc2,0xe0,0x9c,0x2c,0x3e,0x1b,0x31,0x1c,0xdb,0xa3,0x84,0x9a,0xb7,0x4e,0x40,0x74,0x21,0xfd,0xfc,0x65,0xbd,0x38,0x8a,0x55,0x6f,0x1e,0xc3,0x14,0xfc,0x66,0x04,0x7b,0xc4,0x61,0xb0,0xcb,0xfa,0xdd,0x50,0x45,0x4b,0x2e,0xf0,0x6d,0x0f,0x26,0x6d,0xbf},{0xe6,0xbc,0x35,0x73,0xb3,0x11,0x38,0xc6,0x31,0x82,0x96,0x80,0x1d,0xa9,0xd9,0x17,0x85,0x4e,0xad,0x0f,0x5c,0xb7,0xe8,0x78,0x62,0x2f,0x3c,0x10,0x0e,0xdc,0xf2,0x7e,0xf5,0x02,0x6d,0x1a,0x50,0xc2,0x50,0x7d,0x0d,0x14,0x77,0x77,0xfc,0xbe,0x23,0x02,0x81,0x0a,0xdc,0xa3,0x16,0xfd,0xab,0xb9,0x7c,0xb6,0x7e,0x8a,0xde,0x1f,0x22,0xeb},{0xab,0xf3,0xea,0x63,0xc0,0x25,0xa2,0xc7,0x6a,0xfe,0x91,0x4a,0x0a,0x91,0xdd,0x6d,0x6f,0x8c,0xf9,0xa8,0x1c,0x9f,0xb5,0xe5,0xd2,0xac,0xe6,0x51,0x9a,0xd3,0x87,0x17,0x82,0x12,0x0a,0x58,0x99,0x7f,0x81,0x2d,0x8d,0x27,0x2d,0x1b,0xb0,0x02,0x7e,0x0d,0xd6,0x18,0x89,0x5e,0x0c,0x2b,0x57,0xa6,0x56,0x35,0xff,0x71,0x4e,0xb0,0x49,0x38},{0x36,0xdf,0x1d,0x1c,0xf6,0xa7,0x4d,0x87,0x7e,0x2c,0x3f,0xb4,0xda,0xd7,0x80,0x71,0x0b,0xf3,0x2a,0x47,0x20,0xe6,0x9a,0x3d,0x17,0x9a,0x97,0xc9,0x4e,0x53,0xa6,0xe2,0x23,0xea,0x94,0x4d,0xf9,0xeb,0x2c,0x03,0x2c,0x88,0xa2,0xe6,0xc5,0x94,0xa5,0x6f,0xc3,0x98,0xa9,0x8b,0xa7,0x41,0x7d,0xd3,0x82,0x01,0x13,0xb6,0x0f,0x39,0x1e,0xd2},{0x08,0x28,0xc3,0x1c,0xec,0x21,0x3a,0xb4,0x4c,0xb1,0xfa,0xb9,0x0c,0xfe,0xc2,0x50,0xc5,0x99,0x62,0xa0,0x11,0x74,0xcf,0x05,0x1e,0x2b,0xdf,0x6d,0x22,0x8e,0x6e,0x55,0x19,0x21,0x9c,0xa1,0x98,0x56,0x45,0x90,0x40,0x3a,0x8e,0xad,0x76,0x4d,0xd3,0x95,0x27,0x67,0x4e,0x02,0x16,0xc3,0xfe,0x5a,0x79,0x4e,0x2d,0x6f,0xd0,0xe4,0x4f,0x62},{0x40,0x14,0xe1,0x88,0x3d,0xcc,0x51,0xcb,0x98,0x86,0x06,0x4d,0xe4,0x52,0x71,0xe2,0x2e,0x2b,0x80,0xfd,0x81,0x65,0xaf,0x93,0x31,0x87,0xe0,0xff,0x31,0xab,0xff,0x53,0x0e,0x2d,0xb1,0x47,0xe6,0x44,0xb7,0x29,0xab,0x0f,0x51,0x3a,0x53,0x84,0x36,0x58,0x8c,0x5f,0x7b,0x65,0x6a,0xb7,0x6f,0xdc,0xad,0xc1,0xa3,0xe4,0x21,0xfc,0x22,0x0e,0xc1,0x10,0xd1,0x7d,0x9f,0xd3,0x1e,0x33,0xb4,0xca,0xb9,0xff,0xd8,0x27,0xb8,0xca,0xde,0x49,0x6f,0xdc,0xf0,0xe8,0x70,0x36,0xdb,0x90,0x00,0x07,0x9e,0x77,0x39,0xfe},{0xc9,0x93,0x4b,0xe6,0x47,0x7e,0x1d,0x86,0x15,0x46,0xe8,0x27,0xf5,0x84,0x67,0x4e,0x42,0xe3,0x2b,0x8a,0x4e,0x90,0x7b,0x87,0xcc,0xdf,0xaa,0x04,0x06,0x05,0xe6,0x72,0xff,0x6f,0x44,0x1b,0x08,0xad,0x79,0x3e,0xb7,0xdd,0xd7,0x2c,0x73,0xf0,0xf0,0xc4,0x6e,0xb7,0x37,0xe1,0x02,0xf5,0x42,0xe7,0xef,0xa1,0xdd,0x50,0x9a,0xc5,0x8d,0x00,0xc1,0x10,0xd1,0x7d,0x9f,0xd3,0x1e,0x33,0xb4,0xca,0xb9,0xff,0xd8,0x27,0xb8,0xca,0xde,0x49,0x6f,0xdc,0xf0,0xe8,0x70,0x36,0xdb,0x90,0x00,0x07,0x9e,0x77,0x39,0xfe}},\n\t{{0x3e,0x0c,0x21,0xc4,0x3d,0x64,0x61,0xc1,0x9d,0xa1,0x83,0x10,0x74,0x1d,0x56,0x12,0xaf,0x29,0x5c,0x6c,0x12,0x48,0x0a,0xc7,0xe5,0x12,0xb6,0x42,0x6b,0x54,0xf4,0x42,0x0c,0x43,0x42,0x2e,0x78,0xc2,0xe7,0x26,0x09,0x41,0x4a,0x2f,0xa1,0xb0,0x1f,0xcd,0x63,0x76,0x1e,0xa1,0x6f,0xf6,0xe2,0xc2,0x08,0x89,0x0d,0x28,0xbf,0x1b,0x56,0x5b},{0x3e,0x2e,0xf2,0xcc,0x81,0xca,0xa7,0x5d,0x01,0xd2,0x82,0xfd,0x45,0xee,0xc0,0xf5,0x49,0x3b,0xe2,0xa4,0x2a,0x4d,0x5f,0x40,0x0d,0xbc,0xb9,0x3d,0x6e,0xda,0xe2,0x86,0xe1,0x23,0x8b,0x5f,0x0d,0xa2,0x35,0x15,0x1d,0x22,0x23,0xa5,0x69,0x56,0x34,0x78,0xb3,0xb3,0x55,0xef,0x63,0x8a,0x17,0x63,0xda,0xf0,0x64,0x99,0x8a,0x8a,0xba,0xd6},{0x68,0x79,0x36,0xa7,0x6b,0xe3,0x76,0x1c,0xe3,0x38,0x0b,0xa3,0x91,0xb6,0xb0,0x82,0x37,0xfa,0x52,0x74,0xf1,0xb5,0xd5,0xd9,0x07,0x06,0x9e,0xda,0x87,0x6b,0x0f,0x24,0x4f,0xbe,0xc9,0xff,0x03,0x41,0xaf,0x77,0x68,0xed,0xe7,0x71,0xba,0x2d,0xde,0x27,0xa1,0xbf,0xa8,0xa7,0x30,0x7c,0xcb,0x79,0x72,0x89,0x1a,0xdc,0xc1,0xe4,0xb2,0x9d},{0x94,0xa3,0x11,0xf4,0x44,0x80,0xd0,0xa3,0x47,0x93,0x36,0xe2,0xbd,0x04,0xe4,0x74,0x3d,0x00,0x60,0xad,0xd0,0x2d,0x86,0x66,0xa1,0x72,0x1a,0xb9,0x1c,0x14,0xa2,0x9b,0x4b,0x04,0x7d,0x5b,0xcd,0xf8,0x01,0x33,0xde,0x34,0x10,0x29,0xc4,0x72,0x56,0xff,0x11,0xcd,0xd8,0x61,0x2c,0xb6,0xb7,0xf4,0x24,0x8b,0x44,0xb4,0xe7,0x34,0x50,0xb8},{0x72,0xf6,0xd4,0xa3,0x24,0xf9,0xef,0xf4,0x55,0x8d,0x3c,0x07,0xca,0x10,0xdd,0x54,0x87,0x13,0x32,0x78,0x5c,0x64,0x10,0x08,0x62,0x7e,0xf4,0x34,0x0f,0x1c,0xcd,0xcc,0x3b,0x42,0xfe,0x60,0x41,0x70,0x2c,0x6b,0xd4,0x6c,0xf7,0xb8,0x24,0xf6,0xd7,0x07,0xb3,0x46,0xb0,0x7d,0x14,0x24,0x9b,0x72,0x79,0xf4,0x23,0x2a,0xec,0x02,0xe7,0x69},{0xe5,0xbe,0x84,0xc3,0x92,0x47,0x15,0xd3,0xac,0x06,0x44,0x72,0x41,0xeb,0xb6,0x5a,0x17,0x06,0x90,0xd9,0x55,0x3d,0xe4,0x87,0x7d,0x5a,0x11,0x9f,0x02,0x6d,0xd3,0x4e,0x71,0xd1,0x5e,0x16,0x9f,0xb2,0xc0,0x7f,0xcb,0x78,0x8b,0x89,0x11,0xae,0x43,0xe8,0x85,0xb7,0xf9,0xc8,0x48,0x5a,0xb2,0x96,0xaf,0x8f,0xab,0x71,0x84,0x9d,0x40,0x09,0x30,0xd4,0x32,0x6e,0xa2,0x77,0x97,0x71,0x37,0xce,0x22,0x6b,0xca,0xc9,0x79,0xef,0xc0,0xb2,0xb4,0x3d,0x30,0xbf,0x77,0xe9,0xc3,0x8d,0xec,0x15,0x04,0x08,0xfa,0x15},{0x4b,0xf3,0x7f,0xb2,0x78,0x75,0x45,0xd4,0xce,0x5e,0x3d,0xaf,0x92,0x63,0x3d,0x90,0xc0,0xa7,0x23,0x62,0x7f,0x37,0x58,0x8d,0x12,0xe0,0xb8,0x6c,0x46,0x38,0xaa,0xf7,0xe1,0x03,0x9e,0x1f,0x31,0xf9,0x5a,0xa4,0x59,0x0d,0xec,0xc5,0x1f,0x17,0x88,0x25,0xcc,0xed,0x69,0x2b,0x91,0x73,0x6a,0x3f,0xcb,0xe5,0x9c,0x1e,0x26,0x3e,0xec,0x0b,0x30,0xd4,0x32,0x6e,0xa2,0x77,0x97,0x71,0x37,0xce,0x22,0x6b,0xca,0xc9,0x79,0xef,0xc0,0xb2,0xb4,0x3d,0x30,0xbf,0x77,0xe9,0xc3,0x8d,0xec,0x15,0x04,0x08,0xfa,0x15}},\n\t{{0xc5,0x1d,0xcd,0x70,0xb2,0x9e,0x53,0x29,0x05,0x78,0x83,0x5d,0x56,0x30,0x89,0xee,0x02,0xd7,0xac,0x57,0x0a,0xd2,0xa0,0x9c,0x96,0x0c,0xbf,0xf2,0x30,0xbf,0x1a,0x2b,0xee,0x0e,0x9f,0x1e,0x1c,0x65,0x7d,0xb5,0x48,0xad,0x6f,0x51,0xa0,0x91,0x61,0xe4,0xe6,0x83,0x9f,0x58,0x7c,0x76,0x2b,0x52,0x94,0x87,0x3c,0x8d,0x36,0x4c,0x37,0x3c},{0x59,0x3b,0x0d,0x38,0xab,0x93,0xca,0xfb,0x67,0x44,0x30,0x96,0xec,0xbd,0x00,0x1d,0x93,0xd0,0xb3,0x3d,0x3c,0xd4,0x4e,0x3d,0xd8,0x29,0x93,0xb2,0xb3,0x77,0xfc,0x57,0x31,0x20,0xe3,0x90,0x0d,0xf4,0x91,0x2f,0x8b,0x43,0xce,0xfe,0x99,0x03,0x03,0xa2,0x90,0x8d,0xcf,0xa8,0xc0,0x21,0x00,0xca,0xcc,0xcb,0x4b,0x2f,0xa5,0x39,0xa8,0x0b},{0xca,0xf6,0xf9,0xbb,0x53,0xcb,0x97,0x76,0xb6,0x9c,0x2c,0x18,0x21,0x43,0x13,0x48,0x13,0xc9,0x0e,0xeb,0x40,0xea,0xce,0x1f,0x3a,0xe9,0xd2,0x9e,0x29,0xdb,0xe2,0x79,0xe2,0x1a,0x9f,0x84,0x9d,0xe4,0x55,0x82,0x17,0xeb,0x87,0xf6,0xc3,0xef,0xcd,0x54,0x14,0xee,0xc8,0x5b,0xd7,0x67,0x05,0xe2,0x34,0xa2,0x7e,0x81,0x83,0x21,0x7a,0x02},{0xc5,0x03,0xd9,0x75,0xdf,0x17,0x15,0xe3,0x5b,0x7b,0x4f,0x66,0x9c,0x15,0x4e,0x01,0xdf,0x3d,0x16,0xb6,0x52,0xcc,0xcf,0x28,0x40,0xdb,0x20,0xee,0x8b,0x69,0xb1,0x2b,0xc0,0x6e,0xe4,0xd2,0xf5,0xd1,0x49,0x3f,0xf3,0x0a,0x12,0xcd,0x13,0xbd,0x9d,0x3d,0x5b,0x28,0x5c,0xb0,0x0d,0x0e,0xb6,0xed,0xec,0x65,0xeb,0x25,0x28,0x2e,0x65,0x2f},{0xed,0xa7,0x05,0xc1,0xa6,0x81,0xf2,0x7a,0x69,0x68,0x17,0x8e,0xf7,0xc9,0x14,0x80,0x9f,0x81,0xfe,0x16,0xfd,0x81,0x93,0xb4,0x0b,0x05,0x5b,0x4e,0xef,0x6e,0x7a,0x67,0x9d,0x99,0x4c,0x17,0xcd,0x1c,0x16,0xfd,0x31,0x35,0xd5,0x3e,0xa3,0x00,0xbf,0xbe,0xda,0xd6,0xe2,0x37,0x9b,0x13,0x1b,0xca,0x29,0x90,0x4b,0xf2,0x09,0x57,0x2f,0xe9},{0xd7,0xba,0x23,0xd3,0xa0,0x6e,0x14,0x6a,0xf0,0x77,0xb7,0xe6,0xe3,0xc9,0x3b,0x38,0xbb,0xe7,0xbe,0x54,0x75,0xf8,0xb7,0x42,0x29,0xe2,0x83,0xde,0x20,0x22,0x41,0xcf,0x5f,0x6f,0x80,0x60,0xf3,0x44,0x04,0x21,0xd5,0x03,0x68,0x42,0xde,0x81,0xea,0xe8,0x7e,0x5b,0x80,0x0f,0x1b,0x2d,0x06,0xc7,0xce,0xe9,0x46,0xc7,0xf7,0xb3,0xa2,0x02,0x21,0xb5,0x4d,0xc2,0x36,0xea,0xe6,0x7b,0xb3,0x61,0xe6,0x18,0x40,0x5b,0xce,0x5b,0xc2,0xee,0xa5,0xde,0xe9,0xe6,0xe0,0xa8,0x58,0x58,0x03,0x34,0x26,0x27,0x65,0x2a},{0xfa,0x43,0xa6,0xc4,0x32,0xa1,0x2f,0xb6,0x37,0x05,0xf4,0xa4,0xa7,0x36,0xdd,0x1c,0x45,0x10,0x95,0x83,0x67,0x89,0x79,0x18,0x34,0xad,0xe7,0x57,0x7f,0x0d,0x48,0x9b,0x14,0xdf,0x5f,0xc8,0xd7,0x0f,0x78,0x47,0x88,0x20,0xff,0x7f,0xb1,0x21,0x27,0x14,0x58,0x32,0x12,0xfb,0x97,0xe0,0x81,0x0e,0x92,0xf4,0x5c,0x0e,0x44,0x48,0x4e,0x01,0x21,0xb5,0x4d,0xc2,0x36,0xea,0xe6,0x7b,0xb3,0x61,0xe6,0x18,0x40,0x5b,0xce,0x5b,0xc2,0xee,0xa5,0xde,0xe9,0xe6,0xe0,0xa8,0x58,0x58,0x03,0x34,0x26,0x27,0x65,0x2a}},\n\t{{0x1e,0x89,0x12,0xe8,0xab,0xca,0xeb,0x96,0x78,0x43,0x89,0x79,0x26,0x61,0x86,0x2e,0x37,0xd7,0x94,0xb5,0xb9,0xf7,0xc9,0xe7,0x04,0x6c,0x96,0x1c,0x54,0x0d,0xb0,0x6c,0xd3,0x68,0x9b,0x53,0xa7,0x56,0x34,0x1b,0x65,0xff,0xf9,0xee,0xf1,0xc6,0xfd,0x7e,0xa8,0x42,0x59,0x60,0x06,0x5f,0xc2,0x89,0x8b,0xfc,0xf8,0x6c,0x9a,0x0d,0xb1,0x36},{0x52,0x3d,0x83,0x25,0x0f,0x57,0x81,0x76,0x7b,0x21,0xf7,0x96,0xd6,0x1f,0xfe,0xd7,0x7c,0xc1,0x32,0xb5,0xbc,0x05,0x46,0xdb,0x6f,0x25,0xd8,0x7a,0x68,0xe2,0x01,0x81,0xf8,0x9a,0xc5,0x29,0x78,0x1c,0x01,0xc5,0x4d,0x61,0x4e,0x75,0xdf,0x9f,0xc3,0x22,0x96,0x7c,0xf9,0xa7,0xed,0x41,0x6f,0x64,0xfd,0xd4,0x61,0x58,0x0d,0x49,0xc9,0xa4},{0x4a,0xf7,0xda,0xef,0xe0,0x3b,0x33,0x19,0x79,0x02,0x7a,0xbb,0xd3,0x53,0xf4,0x8c,0x8a,0x16,0xfb,0xbd,0x35,0xd9,0x70,0xb2,0x0a,0x06,0x05,0x14,0xd0,0x9e,0xf6,0x13,0x44,0xbb,0xb7,0x93,0x86,0x1b,0x3c,0xb0,0x54,0xa7,0x48,0xc2,0xa7,0x10,0xda,0x65,0xb2,0xdb,0x0f,0x85,0x23,0x57,0x77,0x44,0x23,0x20,0x6d,0x2e,0xde,0x20,0x01,0xed},{0x9c,0xb8,0x68,0xeb,0xbb,0x8b,0xaf,0x81,0x9c,0x2f,0x90,0x4c,0xc2,0x62,0x17,0xfc,0xf2,0xa5,0xab,0x4c,0x2e,0x69,0xcb,0x82,0x5f,0x4c,0x3c,0x82,0xcd,0x6a,0xcb,0x15,0xa2,0xfc,0x50,0x54,0x5e,0x2e,0x83,0x52,0x48,0x29,0x51,0xcc,0x50,0xaa,0x27,0xa3,0xf3,0x71,0xdb,0x2c,0x1c,0xa9,0x8a,0xa5,0x95,0xab,0x3e,0x6f,0xcd,0xba,0x22,0x7c},{0xf7,0x5d,0xb5,0x20,0x65,0xfe,0xa9,0xe7,0x1f,0x8e,0xd6,0xc0,0xf2,0x3f,0x1b,0x8c,0x7a,0x02,0x54,0xd8,0xa7,0x0e,0x6f,0x68,0x94,0x81,0xff,0x30,0x0e,0x6d,0x1a,0x96,0x1b,0x86,0x07,0xaa,0xbf,0x37,0xc5,0x5e,0x26,0xa2,0xdf,0x0b,0xd0,0x7f,0x94,0x35,0x30,0xa4,0x9e,0x47,0xaf,0xad,0x9c,0xc9,0x02,0x21,0x55,0x94,0x04,0x13,0xff,0x64},{0x9c,0x8d,0x18,0x63,0x83,0xad,0x01,0xcc,0xbb,0xe6,0x00,0xda,0x15,0xce,0xc6,0x6e,0x7a,0x37,0x6a,0x81,0x44,0xb3,0xfc,0xb7,0xcd,0x05,0xee,0x4a,0x6f,0x29,0xe4,0x79,0x63,0x52,0x7e,0x14,0xc9,0x14,0x77,0xa8,0x19,0x94,0x03,0xc6,0x51,0x57,0xf1,0xcc,0x11,0x29,0xde,0x86,0x08,0xfe,0x41,0x02,0x71,0xb7,0xbf,0xd7,0xe7,0x83,0x3e,0x0c,0x9a,0x59,0x7e,0xe8,0x61,0x36,0x56,0x9a,0xbf,0x64,0xfd,0xf3,0xb7,0xb9,0x2f,0x9e,0x56,0x1f,0x57,0x45,0x2e,0x19,0x0f,0x6f,0x70,0x01,0xc2,0x48,0x05,0x23,0x9b,0x2f},{0xb5,0x4e,0xe7,0xcc,0x7b,0x66,0x7a,0xf8,0xec,0xcd,0x1b,0x0c,0x0f,0xec,0x04,0x27,0xa0,0x61,0xfd,0x12,0x2d,0xab,0xc9,0xc5,0x8e,0xee,0x36,0xc2,0xef,0x67,0xd5,0x87,0x95,0x6c,0x12,0xb7,0x12,0x81,0x55,0xe0,0x7b,0xdb,0x8f,0x67,0xea,0x04,0x55,0x91,0x9b,0x50,0x65,0x05,0xc1,0xf1,0x0b,0x04,0x91,0x66,0x3c,0x32,0x53,0x72,0x01,0x04,0x9a,0x59,0x7e,0xe8,0x61,0x36,0x56,0x9a,0xbf,0x64,0xfd,0xf3,0xb7,0xb9,0x2f,0x9e,0x56,0x1f,0x57,0x45,0x2e,0x19,0x0f,0x6f,0x70,0x01,0xc2,0x48,0x05,0x23,0x9b,0x2f}},\n\t{{0xc8,0x37,0x10,0xdc,0xdb,0xfc,0x51,0x91,0xae,0x37,0xa4,0xe0,0xcf,0xbb,0xdd,0x92,0x93,0x5f,0x6b,0xd6,0x81,0xbf,0x9b,0x24,0x5e,0x0d,0xf1,0xe4,0x04,0x89,0xd1,0x1b,0xb2,0x68,0x56,0x3a,0xdc,0x59,0xd0,0x8a,0x93,0x37,0x5d,0xa5,0x40,0x5e,0xfe,0xc9,0x41,0x0b,0x8a,0x50,0xd2,0xa0,0x94,0x86,0xf7,0x46,0x3b,0x7e,0x1d,0xea,0x2b,0xa8},{0x1b,0xe2,0xe6,0x48,0x86,0xa8,0x65,0xfd,0x2b,0xae,0xc7,0x7d,0x41,0xee,0xb2,0x80,0x33,0x1c,0x0a,0xdc,0x42,0xea,0x99,0xd0,0x1f,0x6d,0xc8,0x80,0x51,0x70,0xd4,0x19,0xae,0xfc,0x66,0x16,0xa2,0x53,0x27,0x19,0x7a,0xf2,0x9a,0x25,0x0c,0x39,0x8c,0xbf,0xe7,0xa3,0x7a,0xd6,0xa3,0x43,0x62,0xd2,0x4a,0xc2,0xf1,0x96,0x7e,0xe3,0x83,0x13},{0xf5,0xb1,0x2a,0xc5,0x4d,0xcc,0xdf,0x56,0xde,0x92,0x96,0x46,0x03,0x11,0xfc,0xa0,0xbc,0xa2,0x22,0xf7,0x25,0x74,0x2a,0x1f,0x27,0x34,0x18,0xe8,0x06,0xa4,0x77,0x26,0x1a,0x51,0x5e,0xfb,0x77,0xbc,0x55,0xb1,0xf8,0xa5,0x19,0x23,0x00,0x97,0xf7,0xbb,0xe4,0xcd,0x41,0x9e,0xd9,0x5e,0x0c,0x6b,0x1b,0x8a,0xba,0x52,0x93,0xbe,0x2c,0xf3},{0xb3,0x02,0xeb,0x44,0x3c,0x05,0xae,0x9c,0x94,0xa9,0x1f,0x72,0x41,0xbc,0x81,0x66,0x5f,0x50,0xc0,0x57,0xb4,0x44,0xf0,0xe1,0x2a,0xa9,0x88,0x69,0xa6,0x1c,0x05,0x85,0xda,0xc7,0xb2,0xe1,0x8c,0x2f,0x7c,0x49,0x37,0xa2,0xf2,0x56,0xab,0x12,0x9f,0x12,0x4b,0x1b,0x73,0x75,0x3f,0x30,0x0f,0x40,0xf1,0xf9,0x1d,0xa7,0x2c,0x98,0x8c,0x91},{0xcb,0xd3,0x39,0x60,0x56,0xe3,0xbd,0x65,0x86,0x1a,0x58,0x40,0xc0,0xa4,0xc4,0x8b,0xe5,0xf7,0x49,0x0a,0xf2,0x09,0x51,0x32,0x6e,0x06,0x5a,0x27,0x19,0x78,0x2e,0x3a,0x04,0xf9,0x34,0x80,0x49,0x39,0x93,0xcd,0x89,0x67,0x7b,0xc0,0x8d,0x9d,0x8d,0x4c,0x83,0x20,0x80,0xfc,0x00,0xf2,0x8a,0x8f,0xa4,0x4d,0x8e,0x8f,0x58,0x51,0x5b,0x71},{0x71,0x3f,0x90,0x41,0xb8,0x74,0xbc,0x7a,0x85,0xf5,0xab,0xca,0x7e,0xf2,0x70,0x41,0xbc,0x36,0xb5,0xc3,0x4e,0xf1,0x2b,0x17,0x35,0x40,0xdb,0x3c,0xdb,0xd2,0xec,0x0b,0x99,0xc1,0x43,0x17,0xad,0x38,0x45,0x2d,0x07,0x31,0xd7,0xb6,0x95,0x1c,0x89,0x25,0xe4,0x89,0x97,0xd3,0xcf,0x11,0x2f,0x63,0x31,0x51,0xa2,0x18,0xfc,0x12,0x04,0x0a,0xb0,0x33,0xce,0x0b,0x57,0xc0,0x8c,0x58,0x25,0xf8,0x9b,0x50,0x22,0x1c,0x5c,0x7b,0x02,0xc7,0xed,0xfc,0x98,0x8b,0xbd,0xd2,0x4e,0xfc,0x78,0x91,0x7f,0x4c,0x99,0x24},{0xfc,0x46,0xe4,0x85,0x0c,0x52,0x14,0xf8,0x8a,0xa4,0x97,0x17,0x10,0xb2,0x93,0xef,0xa0,0x66,0x3c,0xfd,0x61,0x42,0x24,0x30,0x70,0x4b,0xfd,0x0b,0x86,0xc8,0x97,0xd7,0x04,0xc2,0xa6,0x61,0x41,0xaf,0xcc,0x1d,0x52,0xc9,0xf3,0xca,0xe1,0x90,0x7c,0xbd,0xce,0xaf,0x30,0xc4,0xb4,0x7d,0x81,0x7e,0xbd,0xe2,0x09,0x70,0x1e,0x6b,0xb9,0x03,0xb0,0x33,0xce,0x0b,0x57,0xc0,0x8c,0x58,0x25,0xf8,0x9b,0x50,0x22,0x1c,0x5c,0x7b,0x02,0xc7,0xed,0xfc,0x98,0x8b,0xbd,0xd2,0x4e,0xfc,0x78,0x91,0x7f,0x4c,0x99,0x24}},\n\t{{0x5f,0x01,0x6d,0xec,0x82,0x02,0x96,0x47,0x74,0xd9,0x73,0x2e,0x2e,0x17,0x00,0xb6,0xe0,0xa4,0x13,0x17,0xae,0x7f,0x85,0xcb,0xff,0xe7,0x96,0x99,0xdb,0x9f,0xad,0x21,0x60,0xd9,0x12,0xdc,0x41,0x01,0x33,0x66,0x4c,0x24,0x8b,0x25,0x17,0xd7,0x22,0x14,0x12,0x4d,0xad,0x82,0x9a,0x85,0x69,0x5e,0x35,0x10,0xe0,0xd7,0x1a,0x82,0x88,0x14},{0xab,0x5f,0x2c,0x7d,0xa2,0xe5,0x67,0x5f,0xe4,0x92,0x03,0x93,0xd7,0x13,0xa1,0xfa,0x4a,0xb7,0x18,0x4a,0x8e,0x8c,0x78,0x9a,0x0c,0x60,0x02,0xe8,0x2d,0x50,0x05,0x0f,0x92,0xee,0x9f,0x81,0xde,0x6b,0x20,0xe4,0x9b,0x17,0x2e,0x99,0x0f,0x01,0x31,0xa7,0xc5,0xc4,0x53,0x70,0xda,0x03,0xc6,0xf7,0x22,0x87,0x98,0x87,0x19,0x36,0xa6,0x49},{0x93,0xab,0x22,0xc4,0x39,0x6c,0x97,0x80,0xd2,0xe2,0x36,0xfa,0x31,0x74,0x67,0xcc,0x50,0x1b,0x95,0xbe,0x77,0xe0,0xd1,0x00,0x74,0x04,0xe1,0x4d,0xca,0x44,0x35,0x72,0x74,0x69,0x82,0x23,0x56,0x9b,0xcc,0x34,0x5a,0xcb,0xa2,0xa3,0x31,0x12,0x4a,0x84,0x4c,0xe9,0x37,0x3a,0x58,0xf8,0x79,0x65,0x4a,0x66,0x79,0x82,0xf4,0x5d,0x75,0xc3},{0x2d,0x5d,0xac,0x4f,0xb5,0x00,0x68,0x3b,0x5f,0x2e,0xdd,0xcb,0x14,0x4a,0x7f,0xad,0x12,0x45,0x91,0xd1,0x84,0xd8,0x14,0xff,0xcb,0x64,0x43,0x6d,0x65,0xe7,0x19,0x68,0x2b,0x5e,0x53,0x05,0x74,0x66,0xed,0xac,0x2f,0x5a,0x8f,0x70,0x96,0xab,0x29,0xf3,0x9a,0x59,0xa2,0xe2,0xef,0xd3,0xc9,0xd7,0x53,0xf8,0xf5,0xa3,0xd6,0xf4,0x34,0xf8},{0x1d,0x14,0xf3,0xfd,0xb0,0x66,0x20,0xff,0xfc,0x79,0x47,0xc7,0x4c,0xe9,0x45,0x67,0xf5,0x97,0x14,0xea,0x7c,0x63,0xc5,0x3f,0x0b,0x46,0xe0,0x88,0xd6,0x9b,0x67,0x71,0xba,0xa6,0x15,0x28,0x94,0x54,0x83,0x68,0x00,0x3a,0x33,0xa6,0x1a,0x05,0x6a,0x68,0x72,0x98,0x48,0x71,0xea,0x5b,0x47,0xf5,0x80,0x46,0xa9,0x57,0x84,0xec,0xad,0xfc},{0xa3,0x1d,0x87,0xd3,0x28,0x62,0xc6,0xf7,0xdb,0xfb,0xfa,0xfc,0xf3,0x27,0x5c,0x31,0xd3,0x32,0x26,0x0e,0x0f,0x41,0x49,0xec,0x05,0x16,0xf7,0xa5,0x63,0xb3,0xbc,0xe5,0x0d,0x1e,0x6f,0x97,0x4f,0x68,0x40,0xc0,0xd4,0x6c,0x4f,0x9e,0x25,0xd0,0xab,0x8d,0x2a,0xb9,0x3e,0x06,0x4d,0x9d,0x3d,0x2d,0x79,0x8d,0x93,0xdc,0xfc,0x6f,0x0b,0x04,0x48,0x7c,0x19,0x5c,0xa9,0xc8,0x44,0xe5,0xf6,0x4f,0x51,0xd8,0x72,0x63,0x41,0xda,0x62,0xac,0x78,0x73,0xb3,0x3e,0xc8,0xb2,0xf1,0x3f,0x89,0xf2,0x0e,0x95,0xdf,0xed},{0xfd,0x69,0xb1,0x9a,0xdb,0xae,0x95,0x87,0xe2,0xc6,0x8a,0x97,0x0c,0xee,0xc4,0x22,0x60,0x4e,0x96,0xa9,0x72,0xb9,0x6f,0x86,0x97,0xa8,0xdf,0x83,0xc5,0x18,0x18,0x6e,0xc9,0x43,0x30,0x7e,0x5b,0xcf,0x37,0x0f,0xc1,0xd7,0xe5,0xab,0xb1,0x31,0xe0,0x97,0xc7,0x53,0xb7,0xfd,0xd7,0xdf,0x00,0x43,0x0e,0x41,0x62,0x80,0x0b,0xe3,0xe0,0x06,0x48,0x7c,0x19,0x5c,0xa9,0xc8,0x44,0xe5,0xf6,0x4f,0x51,0xd8,0x72,0x63,0x41,0xda,0x62,0xac,0x78,0x73,0xb3,0x3e,0xc8,0xb2,0xf1,0x3f,0x89,0xf2,0x0e,0x95,0xdf,0xed}},\n\t{{0x98,0x29,0xf7,0x57,0xfd,0xbd,0x44,0x3f,0xd9,0x90,0x98,0x19,0x97,0xf2,0x60,0x27,0xfd,0x08,0xfc,0x8a,0xc6,0xaf,0x87,0x22,0x7f,0x74,0x4a,0x80,0xaf,0x72,0x00,0x01,0x70,0x9b,0x47,0x2a,0xd2,0x8e,0x41,0x0a,0xea,0x6a,0xdf,0xb7,0x61,0x54,0x89,0x5e,0x01,0x9f,0x76,0x64,0x29,0xee,0x8d,0x85,0x20,0xff,0x30,0x58,0xc2,0xa3,0x2a,0x56},{0xea,0x69,0x8e,0x6b,0x8e,0xdd,0x55,0x22,0x45,0x61,0xd4,0x92,0x66,0x8e,0x96,0xaf,0x7e,0x40,0x28,0x72,0xc4,0x46,0xe7,0x88,0xd4,0x6c,0x74,0xb7,0x48,0x7f,0xe8,0xe1,0x5e,0xa5,0x85,0x62,0x8f,0xd6,0xfc,0x27,0x0a,0xb2,0x4b,0x38,0x94,0x59,0x52,0x0d,0x6a,0x4d,0xe5,0x61,0xce,0x0d,0x44,0x03,0xa6,0x2a,0xc2,0xd4,0xd4,0xe2,0x71,0xe3},{0x40,0xf0,0x82,0xf0,0x8d,0xaa,0xad,0xa9,0x9f,0x9b,0x85,0x02,0xcf,0x57,0x15,0x41,0x13,0x59,0xf2,0xba,0xdd,0xbf,0x93,0xe5,0x40,0x2e,0xaf,0xdd,0x43,0x52,0xc8,0x7f,0x40,0xad,0x91,0x5b,0x58,0xd1,0xa1,0xe8,0x6f,0x77,0xc3,0x41,0x35,0x5e,0xf7,0x03,0xba,0xe4,0xed,0x2c,0x28,0x59,0xd6,0x48,0xfe,0x50,0xcc,0xf9,0x80,0xd1,0x49,0xd1},{0xd7,0xa5,0xd9,0x13,0xdf,0x7d,0xf6,0xc6,0x25,0x0f,0x52,0xc2,0x57,0x61,0x20,0xf2,0xf0,0xdb,0x47,0x49,0x56,0xaf,0x89,0x11,0xa7,0x8d,0x09,0x3a,0xfe,0x45,0x43,0xef,0x9f,0x0c,0x42,0xaf,0xa8,0xcc,0x60,0x48,0xc0,0x1c,0x7c,0xbe,0x01,0xe2,0x88,0xcc,0x6c,0x3e,0x97,0x91,0xf3,0xd9,0xb2,0xb2,0x09,0x7e,0x35,0xb1,0x78,0xb4,0x03,0xf6},{0x08,0xc4,0x1a,0x3a,0xc3,0xe3,0x26,0xbd,0x8d,0xee,0x5d,0xf0,0xba,0xb6,0x65,0xff,0x77,0xc0,0x99,0xd1,0xca,0xdc,0xf5,0x4b,0x50,0x50,0x0a,0x9e,0x13,0x33,0x76,0x86,0x9b,0x39,0x79,0x78,0x73,0x5c,0x2f,0x69,0xa9,0x9e,0x0b,0xeb,0x11,0x1e,0x12,0xaa,0xc1,0x09,0x83,0x0f,0xca,0xcb,0x95,0x10,0xde,0x85,0xe3,0x75,0x62,0x4a,0xc2,0x4c},{0x68,0x78,0x6c,0xce,0x2f,0x72,0x80,0xfe,0x83,0x88,0x63,0x37,0xa7,0xa1,0x5a,0x0b,0x84,0x8a,0xda,0x28,0x84,0xf1,0x6a,0x63,0x24,0x1c,0x72,0xda,0x84,0xee,0x1d,0xe0,0x77,0xf0,0xf6,0xce,0x7e,0x79,0x0a,0x55,0x03,0x01,0x13,0x0f,0xf7,0x6b,0x45,0xe7,0xcb,0xfd,0xb0,0x37,0x93,0x4b,0x40,0x69,0xe0,0x77,0x67,0x72,0x65,0xee,0x35,0x08,0x00,0xc0,0x07,0x10,0xd8,0x6e,0x55,0x83,0x5a,0xbc,0xfa,0x67,0x80,0x8f,0xfa,0x21,0x3e,0x56,0x53,0x5b,0xbc,0x9d,0xff,0x16,0xd9,0x57,0xcf,0x2b,0x78,0x06,0x5a,0x89},{0xdf,0x32,0x1a,0x01,0x84,0xe5,0xb8,0x2c,0x70,0x6c,0xeb,0xd1,0xf0,0xb4,0x9b,0x32,0xc8,0xd0,0x81,0xc4,0xea,0xb2,0x7c,0x32,0x1a,0x02,0x61,0xf2,0xd9,0x4d,0xe5,0x85,0xad,0xfc,0xc6,0x70,0xee,0x85,0x77,0x07,0x9b,0x5d,0x5f,0x88,0xef,0xb6,0xd8,0xdf,0x2b,0xa2,0x4d,0x90,0x11,0x2d,0x38,0x3f,0xa8,0x84,0xf0,0x76,0xdd,0x31,0xd0,0x09,0x00,0xc0,0x07,0x10,0xd8,0x6e,0x55,0x83,0x5a,0xbc,0xfa,0x67,0x80,0x8f,0xfa,0x21,0x3e,0x56,0x53,0x5b,0xbc,0x9d,0xff,0x16,0xd9,0x57,0xcf,0x2b,0x78,0x06,0x5a,0x89}},\n\t{{0x25,0x87,0x1e,0x6f,0xe8,0xd0,0xde,0x1d,0xd5,0xf2,0xd3,0x5b,0xff,0x9e,0x67,0x99,0x60,0xb4,0x0e,0xb7,0x98,0x1b,0x2a,0x3a,0x9c,0xec,0xc1,0xe1,0x2e,0x2b,0xc0,0x3e,0x3c,0xfb,0x64,0x91,0x72,0xc6,0x7e,0x57,0x47,0x00,0x97,0xbf,0x8e,0x0e,0xbf,0xad,0xd9,0x28,0x86,0x7c,0xfd,0x41,0x91,0xae,0x2d,0xee,0xc0,0xb2,0x32,0x7d,0x99,0x7d},{0x63,0xc1,0xf9,0x61,0x9c,0x9e,0x1a,0xd7,0xca,0xa3,0x71,0xd6,0x34,0x3d,0xa7,0x08,0x36,0x0c,0xec,0x37,0x35,0x94,0x1a,0x45,0xa9,0xfa,0xf2,0xb5,0x25,0x92,0xbf,0xd1,0x1e,0xca,0xdd,0x5a,0x23,0xad,0x9e,0x45,0xc3,0x66,0xcb,0x8f,0xda,0xa3,0xd1,0xe6,0x27,0x38,0x11,0x54,0x67,0x31,0x03,0x64,0x35,0xe0,0x68,0x0b,0x93,0xee,0x81,0x17},{0x8b,0x01,0xe9,0x99,0x54,0x54,0x73,0x15,0x0b,0xac,0x38,0x7b,0xe9,0xe3,0x17,0x4f,0x02,0x3e,0xe3,0x8e,0xda,0x41,0xa0,0x9d,0x10,0xe0,0xda,0x11,0xfe,0xec,0x2f,0x42,0xe7,0xc8,0xb3,0xde,0x2f,0x7b,0xfd,0xdf,0x7c,0x34,0x3b,0x5e,0xac,0x22,0x8c,0x99,0x3d,0xa1,0xa9,0xd9,0x81,0xb6,0x51,0xc8,0xaf,0x3e,0x75,0xed,0x45,0xcf,0xf7,0xb9},{0xaf,0xe9,0x9c,0x16,0x4a,0x8f,0x3b,0x0f,0xef,0x71,0x2f,0xaa,0x8d,0x7d,0xce,0xed,0xea,0x31,0x93,0xaf,0x2c,0x75,0xc6,0xfa,0xda,0x3e,0xa6,0xea,0x2a,0x3e,0x7b,0x72,0xb6,0xf8,0xd7,0x9a,0x88,0xcb,0x0b,0x81,0x97,0x24,0x29,0x3b,0x11,0x23,0x69,0xc2,0xff,0x98,0x39,0x25,0x99,0xae,0xe1,0x07,0x3e,0x97,0xde,0x10,0x21,0x23,0x7a,0x2d},{0xbe,0x2f,0xb9,0x4c,0x41,0x5a,0x9a,0xf6,0xfb,0xf8,0x26,0x9d,0x81,0x7f,0x39,0x91,0xaf,0x5b,0xf1,0xd7,0x93,0x0a,0xdf,0x18,0x19,0x4a,0x80,0x74,0x14,0x98,0x2b,0xf2,0x3b,0x25,0xc5,0xe8,0xfc,0x07,0x3f,0x5d,0xa1,0x39,0x27,0x4e,0x1c,0xd2,0x7a,0xfe,0x3e,0x7b,0x03,0x35,0x15,0x9e,0x35,0x2b,0xd0,0xbe,0x67,0x48,0x42,0xdd,0xa4,0xdd},{0xbd,0xcd,0xd7,0xbf,0xb1,0x0a,0xdb,0x9f,0x85,0x42,0xba,0xf4,0xc8,0xff,0xb0,0xe1,0x9a,0x18,0x6d,0x1a,0xe0,0x37,0xc1,0xa2,0xe1,0x1c,0x38,0x55,0x14,0xbf,0x64,0x67,0x84,0x47,0xb6,0x0a,0xf6,0x93,0xf1,0x10,0xab,0x09,0xf0,0x60,0x84,0xe2,0x4e,0x4b,0x5e,0xa2,0xd2,0xd1,0x19,0x22,0xd7,0xc4,0x85,0x13,0x23,0xa3,0x6a,0xb6,0x75,0x0f,0x43,0xe6,0xde,0x7b,0x67,0x2a,0x73,0x77,0x9e,0xb4,0x94,0x6c,0xc3,0x9a,0x67,0x51,0xcf,0xe9,0x47,0x46,0x0e,0x3a,0x12,0x7d,0x7c,0x66,0x73,0x6c,0xd5,0x4a,0x21,0x4d},{0x89,0x7e,0xd0,0xbf,0x2e,0x9f,0x0c,0xff,0x6e,0x56,0x25,0x9b,0x79,0x99,0x52,0x27,0xc2,0x3a,0xaa,0xf0,0x47,0x6d,0xed,0x05,0xa1,0xeb,0x9c,0x92,0x28,0x7f,0x1b,0xc8,0x1c,0x57,0x76,0xab,0x05,0xe3,0xd3,0xb7,0xa3,0xf5,0xac,0xa8,0x21,0x33,0x7c,0xb7,0xe7,0xc2,0xd0,0x25,0x6f,0xdf,0x34,0xd1,0xb0,0x34,0x41,0x46,0x30,0x9c,0x76,0x07,0x43,0xe6,0xde,0x7b,0x67,0x2a,0x73,0x77,0x9e,0xb4,0x94,0x6c,0xc3,0x9a,0x67,0x51,0xcf,0xe9,0x47,0x46,0x0e,0x3a,0x12,0x7d,0x7c,0x66,0x73,0x6c,0xd5,0x4a,0x21,0x4d}}\n};\n\n//////////////////////////////////////////////////////////////////////////////\n\nstatic int testCrypto()\n{\n\tstatic unsigned char buf1[16384];\n\tstatic unsigned char buf2[sizeof(buf1)],buf3[sizeof(buf1)];\n\tstatic char hexbuf[1024];\n\n\tfor(int i=0;i<3;++i) {\n\t\tUtils::getSecureRandom(buf1,64);\n\t\tstd::cout << \"[crypto] getSecureRandom: \" << Utils::hex(buf1,64,hexbuf) << std::endl;\n\t}\n\n\tstd::cout << \"[crypto] Testing Salsa20... \"; std::cout.flush();\n\tfor(unsigned int i=0;i<4;++i) {\n\t\tfor(unsigned int k=0;k<sizeof(buf1);++k)\n\t\t\tbuf1[k] = (unsigned char)rand();\n\t\tmemset(buf2,0,sizeof(buf2));\n\t\tmemset(buf3,0,sizeof(buf3));\n\t\tSalsa20 s20;\n\t\ts20.init(\"12345678123456781234567812345678\",\"12345678\");\n\t\ts20.crypt20(buf1,buf2,sizeof(buf1));\n\t\ts20.init(\"12345678123456781234567812345678\",\"12345678\");\n\t\ts20.crypt20(buf2,buf3,sizeof(buf2));\n\t\tif (memcmp(buf1,buf3,sizeof(buf1))) {\n\t\t\tstd::cout << \"FAIL (encrypt/decrypt test)\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t}\n\tSalsa20 s20(s20TV0Key,s20TV0Iv);\n\tmemset(buf1,0,sizeof(buf1));\n\tmemset(buf2,0,sizeof(buf2));\n\ts20.crypt20(buf1,buf2,64);\n\tif (memcmp(buf2,s20TV0Ks,64)) {\n\t\tstd::cout << \"FAIL (test vector 0)\" << std::endl;\n\t\treturn -1;\n\t}\n\ts20.init(s2012TV0Key,s2012TV0Iv);\n\tmemset(buf1,0,sizeof(buf1));\n\tmemset(buf2,0,sizeof(buf2));\n\ts20.crypt12(buf1,buf2,64);\n\tif (memcmp(buf2,s2012TV0Ks,64)) {\n\t\tstd::cout << \"FAIL (test vector 1)\" << std::endl;\n\t\treturn -1;\n\t}\n\tstd::cout << \"PASS\" << std::endl;\n\n#ifdef ZT_SALSA20_SSE\n\tstd::cout << \"[crypto] Salsa20 SSE: ENABLED\" << std::endl;\n#else\n\tstd::cout << \"[crypto] Salsa20 SSE: DISABLED\" << std::endl;\n#endif\n\n\tstd::cout << \"[crypto] Benchmarking Salsa20/12... \"; std::cout.flush();\n\t{\n\t\tunsigned char *bb = (unsigned char *)::malloc(1234567);\n\t\tfor(unsigned int i=0;i<1234567;++i)\n\t\t\tbb[i] = (unsigned char)i;\n\t\tSalsa20 s20(s20TV0Key,s20TV0Iv);\n\t\tlong double bytes = 0.0;\n\t\tuint64_t start = OSUtils::now();\n\t\tfor(unsigned int i=0;i<200;++i) {\n\t\t\ts20.crypt12(bb,bb,1234567);\n\t\t\tbytes += 1234567.0;\n\t\t}\n\t\tuint64_t end = OSUtils::now();\n\t\tSHA512(buf1,bb,1234567);\n\t\tstd::cout << ((bytes / 1048576.0) / ((long double)(end - start) / 1024.0)) << \" MiB/second (\" << Utils::hex(buf1,16,hexbuf) << ')' << std::endl;\n\t\t::free((void *)bb);\n\t}\n\n#if defined(ZT_USE_X64_ASM_SALSA2012) && defined(ZT_ARCH_X64)\n\tstd::cout << \"[crypto] Benchmarking Salsa20/12 fast x64 ASM... \"; std::cout.flush();\n\t{\n\t\tunsigned char *bb = (unsigned char *)::malloc(1234567);\n\t\tdouble bytes = 0.0;\n\t\tuint64_t start = OSUtils::now();\n\t\tfor(unsigned int i=0;i<200;++i) {\n\t\t\tzt_salsa2012_amd64_xmm6(bb,1234567,s20TV0Iv,s20TV0Key);\n\t\t\tbytes += 1234567.0;\n\t\t}\n\t\tuint64_t end = OSUtils::now();\n\t\tstd::cout << ((bytes / 1048576.0) / ((double)(end - start) / 1024.0)) << \" MiB/second\" << std::endl;\n\t\t::free((void *)bb);\n\t}\n#endif\n\n#ifdef ZT_USE_ARM32_NEON_ASM_SALSA2012\n\tif (zt_arm_has_neon()) {\n\t\tstd::cout << \"[crypto] Benchmarking Salsa20/12 fast arm32/neon ASM... \"; std::cout.flush();\n\t\t{\n\t\t\tunsigned char *bb = (unsigned char *)::malloc(1234567);\n\t\t\tdouble bytes = 0.0;\n\t\t\tuint64_t start = OSUtils::now();\n\t\t\tfor(unsigned int i=0;i<200;++i) {\n\t\t\t\tzt_salsa2012_armneon3_xor(bb,(const unsigned char *)0,1234567,s20TV0Iv,s20TV0Key);\n\t\t\t\tbytes += 1234567.0;\n\t\t\t}\n\t\t\tuint64_t end = OSUtils::now();\n\t\t\tstd::cout << ((bytes / 1048576.0) / ((double)(end - start) / 1024.0)) << \" MiB/second\" << std::endl;\n\t\t\t::free((void *)bb);\n\t\t}\n\t}\n#endif\n\n\tstd::cout << \"[crypto] Benchmarking Salsa20/20... \"; std::cout.flush();\n\t{\n\t\tunsigned char *bb = (unsigned char *)::malloc(1234567);\n\t\tfor(unsigned int i=0;i<1234567;++i)\n\t\t\tbb[i] = (unsigned char)i;\n\t\tSalsa20 s20(s20TV0Key,s20TV0Iv);\n\t\tlong double bytes = 0.0;\n\t\tuint64_t start = OSUtils::now();\n\t\tfor(unsigned int i=0;i<200;++i) {\n\t\t\ts20.crypt20(bb,bb,1234567);\n\t\t\tbytes += 1234567.0;\n\t\t}\n\t\tuint64_t end = OSUtils::now();\n\t\tSHA512(buf1,bb,1234567);\n\t\tstd::cout << ((bytes / 1048576.0) / ((long double)(end - start) / 1024.0)) << \" MiB/second (\" << Utils::hex(buf1,16,hexbuf) << ')' << std::endl;\n\t\t::free((void *)bb);\n\t}\n\n\t/*\n\t{\n\t\tAES k0,k1;\n\t\tk0.init(\"00000000000000000000000000000000\");\n\t\tk1.init(\"11111111111111111111111111111111\");\n\t\tuint8_t test_pt[65536];\n\t\tuint8_t test_ct[65536];\n\t\tuint8_t test_aad[65536];\n\t\tuint8_t ct_hash[48];\n\t\tchar hex_tmp[128];\n\t\tfor(unsigned int i=0;i<65536;++i) {\n\t\t\ttest_pt[i] = (uint8_t)i;\n\t\t\ttest_aad[i] = (uint8_t)i;\n\t\t}\n\t\tAES::GMACSIVEncryptor enc(k0,k1);\n\t\tfor(unsigned int test_length=0;test_length<65536;test_length+=777) {\n\t\t\tmemset(test_ct, 0, test_length);\n\t\t\tenc.init((uint64_t)test_length, test_ct);\n\t\t\tenc.aad(test_aad, test_length);\n\t\t\tenc.update1(test_pt, test_length);\n\t\t\tenc.finish1();\n\t\t\tenc.update2(test_pt, test_length);\n\t\t\tconst void *tag = enc.finish2();\n\t\t\tSHA384(ct_hash, test_ct, test_length);\n\t\t\tstd::cout << \"(\" << test_length << \", \\\"\" << Utils::hex(ct_hash, 48, hex_tmp) << \"\\\", \\\"\" << Utils::hex(tag, 16, hex_tmp) << \"\\\"),\" <<std::endl;\n\t\t}\n\t}\n\t*/\n\n\tstd::cout << \"[crypto] Benchmarking AES-GMAC-SIV... \"; std::cout.flush();\n\t{\n\t\tuint64_t end,start = OSUtils::now();\n\t\tuint64_t bytes = 0;\n\t\tAES k0,k1;\n\t\tk0.init(buf1);\n\t\tk1.init(buf2);\n\t\tAES::GMACSIVEncryptor enc(k0,k1);\n\t\tfor (;;) {\n\t\t\tfor(unsigned int i=0;i<10000;++i) {\n\t\t\t\tenc.init(i,buf2);\n\t\t\t\tenc.update1(buf1,sizeof(buf1));\n\t\t\t\tenc.finish1();\n\t\t\t\tenc.update2(buf1,sizeof(buf1));\n\t\t\t\tenc.finish2();\n\t\t\t\tbuf1[0] = buf2[0];\n\t\t\t\tbytes += sizeof(buf1);\n\t\t\t}\n\t\t\tend = OSUtils::now();\n\t\t\tif ((end - start) >= 5000)\n\t\t\t\tbreak;\n\t\t}\n\t\tstd::cout << (((double)bytes / 1048576.0) / ((double)(end - start) / 1024.0)) << \" MiB/second\" << std::endl;\n\t}\n\n\tstd::cout << \"[crypto] Testing SHA-512... \"; std::cout.flush();\n\tSHA512(buf1,sha512TV0Input,(unsigned int)strlen(sha512TV0Input));\n\tif (memcmp(buf1,sha512TV0Digest,64)) {\n\t\tstd::cout << \"FAIL\" << std::endl;\n\t\treturn -1;\n\t}\n\tstd::cout << \"PASS\" << std::endl;\n\n\tstd::cout << \"[crypto] Testing Poly1305... \"; std::cout.flush();\n\tPoly1305::compute(buf1,poly1305TV0Input,sizeof(poly1305TV0Input),poly1305TV0Key);\n\tif (memcmp(buf1,poly1305TV0Tag,16)) {\n\t\tstd::cout << \"FAIL (1)\" << std::endl;\n\t\treturn -1;\n\t}\n\tPoly1305::compute(buf1,poly1305TV1Input,sizeof(poly1305TV1Input),poly1305TV1Key);\n\tif (memcmp(buf1,poly1305TV1Tag,16)) {\n\t\tstd::cout << \"FAIL (2)\" << std::endl;\n\t\treturn -1;\n\t}\n\tstd::cout << \"PASS\" << std::endl;\n\n\tstd::cout << \"[crypto] Benchmarking Poly1305... \"; std::cout.flush();\n\t{\n\t\tunsigned char *bb = (unsigned char *)::malloc(1234567);\n\t\tfor(unsigned int i=0;i<1234567;++i)\n\t\t\tbb[i] = (unsigned char)i;\n\t\tlong double bytes = 0.0;\n\t\tuint64_t start = OSUtils::now();\n\t\tfor(unsigned int i=0;i<200;++i) {\n\t\t\tPoly1305::compute(buf1,bb,1234567,poly1305TV0Key);\n\t\t\tbytes += 1234567.0;\n\t\t}\n\t\tuint64_t end = OSUtils::now();\n\t\tstd::cout << ((bytes / 1048576.0) / ((long double)(end - start) / 1000.0)) << \" MiB/second\" << std::endl;\n\t\t::free((void *)bb);\n\t}\n\n\t/*\n\tfor(unsigned int d=8;d<=10;++d) {\n\t\tfor(int k=0;k<8;++k) {\n\t\t\tstd::cout << \"[crypto] computeSalsa2012Sha512ProofOfWork(\" << d << \",\\\"foobarbaz\\\",9) == \"; std::cout.flush();\n\t\t\tunsigned char result[16];\n\t\t\tuint64_t start = OSUtils::now();\n\t\t\tIncomingPacket::computeSalsa2012Sha512ProofOfWork(d,\"foobarbaz\",9,result);\n\t\t\tuint64_t end = OSUtils::now();\n\t\t\tstd::cout << Utils::hex(result,16) << \" -- valid: \" << IncomingPacket::testSalsa2012Sha512ProofOfWorkResult(d,\"foobarbaz\",9,result) << \", \" << (end - start) << \"ms\" << std::endl;\n\t\t}\n\t}\n\t*/\n\n\tstd::cout << \"[crypto] Testing C25519 and Ed25519 against test vectors... \"; std::cout.flush();\n\tfor(int k=0;k<ZT_NUM_C25519_TEST_VECTORS;++k) {\n\t\tC25519::Pair p1,p2;\n\t\tmemcpy(p1.pub.data,C25519_TEST_VECTORS[k].pub1,ZT_C25519_PUBLIC_KEY_LEN);\n\t\tmemcpy(p1.priv.data,C25519_TEST_VECTORS[k].priv1,ZT_C25519_PRIVATE_KEY_LEN);\n\t\tmemcpy(p2.pub.data,C25519_TEST_VECTORS[k].pub2,ZT_C25519_PUBLIC_KEY_LEN);\n\t\tmemcpy(p2.priv.data,C25519_TEST_VECTORS[k].priv2,ZT_C25519_PRIVATE_KEY_LEN);\n\t\tC25519::agree(p1,p2.pub,buf1,64);\n\t\tC25519::agree(p2,p1.pub,buf2,64);\n\t\tif (memcmp(buf1,buf2,64)) {\n\t\t\tstd::cout << \"FAIL (1)\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t\tif (memcmp(buf1,C25519_TEST_VECTORS[k].agreement,64)) {\n\t\t\tstd::cout << \"FAIL (2)\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t\tC25519::Signature sig1 = C25519::sign(p1,buf1,64);\n\t\tif (memcmp(sig1.data,C25519_TEST_VECTORS[k].agreementSignedBy1,64)) {\n\t\t\tstd::cout << \"FAIL (3)\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t\tC25519::Signature sig2 = C25519::sign(p2,buf1,64);\n\t\tif (memcmp(sig2.data,C25519_TEST_VECTORS[k].agreementSignedBy2,64)) {\n\t\t\tstd::cout << \"FAIL (4)\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t}\n\tstd::cout << \"PASS\" << std::endl;\n\n\tstd::cout << \"[crypto] Testing C25519 ECC key agreement... \"; std::cout.flush();\n\tfor(unsigned int i=0;i<100;++i) {\n\t\tmemset(buf1,64,sizeof(buf1));\n\t\tmemset(buf2,64,sizeof(buf2));\n\t\tmemset(buf3,64,sizeof(buf3));\n\t\tC25519::Pair p1 = C25519::generate();\n\t\tC25519::Pair p2 = C25519::generate();\n\t\tC25519::Pair p3 = C25519::generate();\n\t\tC25519::agree(p1,p2.pub,buf1,64);\n\t\tC25519::agree(p2,p1.pub,buf2,64);\n\t\tC25519::agree(p3,p1.pub,buf3,64);\n\t\t// p1<>p2 should equal p2<>p1\n\t\tif (memcmp(buf1,buf2,64)) {\n\t\t\tstd::cout << \"FAIL (1)\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t\t// p2<>p1 should not equal p3<>p1\n\t\tif (!memcmp(buf2,buf3,64)) {\n\t\t\tstd::cout << \"FAIL (2)\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t}\n\tstd::cout << \"PASS\" << std::endl;\n\n\tstd::cout << \"[crypto] Benchmarking C25519 ECC key agreement... \"; std::cout.flush();\n\tC25519::Pair bp[8];\n\tfor(int k=0;k<8;++k)\n\t\tbp[k] = C25519::generate();\n\tuint64_t st = OSUtils::now();\n\tfor(unsigned int k=0;k<50;++k) {\n\t\tC25519::agree(bp[~k & 7],bp[k & 7].pub,buf1,64);\n\t}\n\tuint64_t et = OSUtils::now();\n\tstd::cout << ((double)(et - st) / 50.0) << \"ms per agreement.\" << std::endl;\n\n\tstd::cout << \"[crypto] Testing Ed25519 ECC signatures... \"; std::cout.flush();\n\tC25519::Pair didntSign = C25519::generate();\n\tfor(unsigned int i=0;i<10;++i) {\n\t\tC25519::Pair p1 = C25519::generate();\n\t\tfor(unsigned int k=0;k<sizeof(buf1);++k)\n\t\t\tbuf1[k] = (unsigned char)rand();\n\t\tC25519::Signature sig = C25519::sign(p1,buf1,sizeof(buf1));\n\t\tif (!C25519::verify(p1.pub,buf1,sizeof(buf1),sig)) {\n\t\t\tstd::cout << \"FAIL (1)\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t\t++buf1[17];\n\t\tif (C25519::verify(p1.pub,buf1,sizeof(buf1),sig)) {\n\t\t\tstd::cout << \"FAIL (2)\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t\t--buf1[17];\n\t\tif (!C25519::verify(p1.pub,buf1,sizeof(buf1),sig)) {\n\t\t\tstd::cout << \"FAIL (3)\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t\tif (C25519::verify(didntSign.pub,buf1,sizeof(buf1),sig)) {\n\t\t\tstd::cout << \"FAIL (2)\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t\tfor(unsigned int k=0;k<64;++k) {\n\t\t\tC25519::Signature sig2(sig);\n\t\t\tsig2.data[rand() % ZT_C25519_SIGNATURE_LEN] ^= (unsigned char)(1 << (rand() & 7));\n\t\t\tif (C25519::verify(p1.pub,buf1,sizeof(buf1),sig2)) {\n\t\t\t\tstd::cout << \"FAIL (5)\" << std::endl;\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\tstd::cout << \"PASS\" << std::endl;\n\n\tstd::cout << \"[crypto] Benchmarking Ed25519 ECC signatures... \"; std::cout.flush();\n\tst = OSUtils::now();\n\tfor(int k=0;k<1000;++k) {\n\t\tC25519::Signature sig;\n\t\tC25519::sign(didntSign.priv,didntSign.pub,buf1,sizeof(buf1),sig.data);\n\t}\n\tet = OSUtils::now();\n\tstd::cout << ((double)(et - st) / 50.0) << \"ms per signature.\" << std::endl;\n\n\treturn 0;\n}\n\nstatic int testIdentity()\n{\n\tIdentity id;\n\tBuffer<512> buf;\n\tchar buf2[1024];\n\n\tstd::cout << \"[identity] Validate known-good identity... \"; std::cout.flush();\n\tif (!id.fromString(KNOWN_GOOD_IDENTITY)) {\n\t\tstd::cout << \"FAIL (1)\" << std::endl;\n\t\treturn -1;\n\t}\n\tconst uint64_t vst = OSUtils::now();\n\tfor(int k=0;k<10;++k) {\n\t\tif (!id.locallyValidate()) {\n\t\t\tstd::cout << \"FAIL (2)\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t}\n\tconst uint64_t vet = OSUtils::now();\n\tstd::cout << \"PASS (\" << ((double)(vet - vst) / 10.0) << \"ms per validation)\" << std::endl;\n\n\tstd::cout << \"[identity] Validate known-bad identity... \"; std::cout.flush();\n\tif (!id.fromString(KNOWN_BAD_IDENTITY)) {\n\t\tstd::cout << \"FAIL (1)\" << std::endl;\n\t\treturn -1;\n\t}\n\tif (id.locallyValidate()) {\n\t\tstd::cout << \"FAIL (2)\" << std::endl;\n\t\treturn -1;\n\t}\n\tstd::cout << \"PASS (i.e. it failed)\" << std::endl;\n\n\tfor(unsigned int k=0;k<4;++k) {\n\t\tstd::cout << \"[identity] Generate identity... \"; std::cout.flush();\n\t\tuint64_t genstart = OSUtils::now();\n\t\tid.generate();\n\t\tuint64_t genend = OSUtils::now();\n\t\tstd::cout << \"(took \" << (genend - genstart) << \"ms): \" << id.toString(true,buf2) << std::endl;\n\t\tstd::cout << \"[identity] Locally validate identity: \";\n\t\tif (id.locallyValidate()) {\n\t\t\tstd::cout << \"PASS\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \"FAIL\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t{\n\t\tIdentity id2;\n\t\tbuf.clear();\n\t\tid.serialize(buf,true);\n\t\tid2.deserialize(buf);\n\t\tstd::cout << \"[identity] Serialize and deserialize (w/private): \";\n\t\tif ((id == id2)&&(id2.locallyValidate())) {\n\t\t\tstd::cout << \"PASS\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \"FAIL\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t{\n\t\tIdentity id2;\n\t\tbuf.clear();\n\t\tid.serialize(buf,false);\n\t\tid2.deserialize(buf);\n\t\tstd::cout << \"[identity] Serialize and deserialize (no private): \";\n\t\tif ((id == id2)&&(id2.locallyValidate())) {\n\t\t\tstd::cout << \"PASS\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \"FAIL\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t{\n\t\tIdentity id2;\n\t\tid2.fromString(id.toString(true,buf2));\n\t\tstd::cout << \"[identity] Serialize and deserialize (ASCII w/private): \";\n\t\tif ((id == id2)&&(id2.locallyValidate())) {\n\t\t\tstd::cout << \"PASS\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \"FAIL\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t{\n\t\tIdentity id2;\n\t\tid2.fromString(id.toString(false,buf2));\n\t\tstd::cout << \"[identity] Serialize and deserialize (ASCII no private): \";\n\t\tif ((id == id2)&&(id2.locallyValidate())) {\n\t\t\tstd::cout << \"PASS\" << std::endl;\n\t\t} else {\n\t\t\tstd::cout << \"FAIL\" << std::endl;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nstatic int testCertificate()\n{\n\tchar buf[4096];\n\n\tIdentity authority;\n\tstd::cout << \"[certificate] Generating identity to act as authority... \"; std::cout.flush();\n\tauthority.generate();\n\tstd::cout << authority.address().toString(buf) << std::endl;\n\n\tIdentity idA,idB;\n\tstd::cout << \"[certificate] Generating identities A and B... \"; std::cout.flush();\n\tidA.generate();\n\tidB.generate();\n\tstd::cout << idA.address().toString(buf) << \", \" << idB.address().toString(buf) << std::endl;\n\n\tstd::cout << \"[certificate] Generating certificates A and B...\";\n\tCertificateOfMembership cA(10000,100,1,idA);\n\tCertificateOfMembership cB(10099,100,1,idB);\n\tstd::cout << std::endl;\n\n\tstd::cout << \"[certificate] Signing certificates A and B with authority...\";\n\tcA.sign(authority);\n\tcB.sign(authority);\n\tstd::cout << std::endl;\n\n\t//std::cout << \"[certificate] A: \" << cA.toString() << std::endl;\n\t//std::cout << \"[certificate] B: \" << cB.toString() << std::endl;\n\n\tstd::cout << \"[certificate] A agrees with B and B with A... \";\n\tif (cA.agreesWith(cB, idB))\n\t\tstd::cout << \"yes, \";\n\telse {\n\t\tstd::cout << \"FAIL\" << std::endl;\n\t\treturn -1;\n\t}\n\tif (cB.agreesWith(cA, idA))\n\t\tstd::cout << \"yes.\" << std::endl;\n\telse {\n\t\tstd::cout << \"FAIL\" << std::endl;\n\t\treturn -1;\n\t}\n\n\tstd::cout << \"[certificate] Generating two certificates that should not agree...\";\n\tcA = CertificateOfMembership(10000,100,1,idA);\n\tcB = CertificateOfMembership(10101,100,1,idB);\n\tstd::cout << std::endl;\n\n\tstd::cout << \"[certificate] A agrees with B and B with A... \";\n\tif (!cA.agreesWith(cB, idB))\n\t\tstd::cout << \"no, \";\n\telse {\n\t\tstd::cout << \"FAIL\" << std::endl;\n\t\treturn -1;\n\t}\n\tif (!cB.agreesWith(cA, idA))\n\t\tstd::cout << \"no.\" << std::endl;\n\telse {\n\t\tstd::cout << \"FAIL\" << std::endl;\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n\nstatic int testPacket()\n{\n\tunsigned char salsaKey[32];\n\tPacket a,b;\n\n\ta.burn();\n\tb.burn();\n\n\tfor(unsigned int i=0;i<32;++i)\n\t\tsalsaKey[i] = (unsigned char)rand();\n\n\tstd::cout << \"[packet] Testing Packet encoder/decoder... \";\n\n\ta.reset(Address(),Address(),Packet::VERB_HELLO);\n\tfor(int i=0;i<32;++i)\n\t\ta.append(\"supercalifragilisticexpealidocious\",(unsigned int)strlen(\"supercalifragilisticexpealidocious\"));\n\n\tb = a;\n\tif (a != b) {\n\t\tstd::cout << \"FAIL (assign)\" << std::endl;\n\t\treturn -1;\n\t}\n\n\ta.compress();\n\tunsigned int complen = a.size();\n\ta.uncompress();\n\n\tstd::cout << \"(compressed: \" << complen << \", decompressed: \" << a.size() << \") \";\n\tif (a != b) {\n\t\tstd::cout << \"FAIL (compression)\" << std::endl;\n\t\treturn -1;\n\t}\n\n\ta.armor(salsaKey,true,nullptr);\n\tif (!a.dearmor(salsaKey,nullptr)) {\n\t\tstd::cout << \"FAIL (encrypt-decrypt/verify)\" << std::endl;\n\t\treturn -1;\n\t}\n\n\tstd::cout << \"PASS\" << std::endl;\n\treturn 0;\n}\n\nstatic int testOther()\n{\n\tchar buf[1024];\n\tchar buf2[4096];\n\tchar buf3[1024];\n\n\tstd::cout << \"[other] Testing hex/unhex... \"; std::cout.flush();\n\tUtils::getSecureRandom(buf,(unsigned int)sizeof(buf));\n\tUtils::hex(buf,(unsigned int)sizeof(buf),buf2);\n\tUtils::unhex(buf2,buf3,(unsigned int)sizeof(buf3));\n\tif (memcmp(buf,buf3,sizeof(buf)) == 0) {\n\t\tstd::cout << \"PASS\" << std::endl;\n\t} else {\n\t\tstd::cout << \"FAIL!\" << std::endl;\n\t\tbuf2[78] = 0;\n\t\tstd::cout << buf2 << std::endl;\n\t\tUtils::hex(buf3,(unsigned int)sizeof(buf3),buf2);\n\t\tbuf2[78] = 0;\n\t\tstd::cout << buf2 << std::endl;\n\t\treturn -1;\n\t}\n\n\tstd::cout << \"[other] Testing InetAddress encode/decode...\"; std::cout.flush();\n\tstd::cout << \" \" << InetAddress(\"127.0.0.1/9993\").toString(buf);\n\tstd::cout << \" \" << InetAddress(\"feed:dead:babe:dead:beef:f00d:1234:5678/12345\").toString(buf);\n\tstd::cout << \" \" << InetAddress(\"0/9993\").toString(buf);\n\tstd::cout << \" \" << InetAddress(\"\").toString(buf);\n\tstd::cout << std::endl;\n\n#if 0\n\tstd::cout << \"[other] Testing Hashtable... \"; std::cout.flush();\n\t{\n\t\tHashtable<uint64_t,std::string> ht;\n\t\tstd::map<uint64_t,std::string> ref; // assume std::map works correctly :)\n\t\tfor(int x=0;x<2;++x) {\n\t\t\tfor(int i=0;i<77777;++i) {\n\t\t\t\tuint64_t k = rand();\n\t\t\t\twhile ((k == 0)||(ref.count(k) > 0))\n\t\t\t\t\t++k;\n\t\t\t\tstd::string v(\"!\");\n\t\t\t\tfor(int j=0;j<(int)(k % 64);++j)\n\t\t\t\t\tv.push_back(\"0123456789\"[rand() % 10]);\n\t\t\t\tref[k] = v;\n\t\t\t\tht.set(0xffffffffffffffffULL,v);\n\t\t\t\tstd::string &vref = ht[k];\n\t\t\t\tvref = v;\n\t\t\t\tht.erase(0xffffffffffffffffULL);\n\t\t\t}\n\t\t\tif (ht.size() != ref.size()) {\n\t\t\t\tstd::cout << \"FAILED! (size mismatch, original)\" << std::endl;\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t{\n\t\t\t\tHashtable<uint64_t,std::string>::Iterator i(ht);\n\t\t\t\tuint64_t *k = (uint64_t *)0;\n\t\t\t\tstd::string *v = (std::string *)0;\n\t\t\t\twhile(i.next(k,v)) {\n\t\t\t\t\tif (ref.find(*k)->second != *v) {\n\t\t\t\t\t\tstd::cout << \"FAILED! (data mismatch!)\" << std::endl;\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(std::map<uint64_t,std::string>::const_iterator i(ref.begin());i!=ref.end();++i) {\n\t\t\t\tif (ht[i->first] != i->second) {\n\t\t\t\t\tstd::cout << \"FAILED! (data mismatch!)\" << std::endl;\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tHashtable<uint64_t,std::string> ht2;\n\t\t\tht2 = ht;\n\t\t\tHashtable<uint64_t,std::string> ht3(ht2);\n\t\t\tif (ht2.size() != ref.size()) {\n\t\t\t\tstd::cout << \"FAILED! (size mismatch, assigned)\" << std::endl;\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (ht3.size() != ref.size()) {\n\t\t\t\tstd::cout << \"FAILED! (size mismatch, copied)\" << std::endl;\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tfor(std::map<uint64_t,std::string>::iterator i(ref.begin());i!=ref.end();++i) {\n\t\t\t\tstd::string *v = ht.get(i->first);\n\t\t\t\tif (!v) {\n\t\t\t\t\tstd::cout << \"FAILED! (key \" << i->first << \" not found, original)\" << std::endl;\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (*v != i->second) {\n\t\t\t\t\tstd::cout << \"FAILED! (key \" << i->first << \"  not equal, original)\" << std::endl;\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tv = ht2.get(i->first);\n\t\t\t\tif (!v) {\n\t\t\t\t\tstd::cout << \"FAILED! (key \" << i->first << \"  not found, assigned)\" << std::endl;\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (*v != i->second) {\n\t\t\t\t\tstd::cout << \"FAILED! (key \" << i->first << \"  not equal, assigned)\" << std::endl;\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tv = ht3.get(i->first);\n\t\t\t\tif (!v) {\n\t\t\t\t\tstd::cout << \"FAILED! (key \" << i->first << \"  not found, copied)\" << std::endl;\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (*v != i->second) {\n\t\t\t\t\tstd::cout << \"FAILED! (key \" << i->first << \"  not equal, copied)\" << std::endl;\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t{\n\t\t\t\tuint64_t *k;\n\t\t\t\tstd::string *v;\n\t\t\t\tHashtable<uint64_t,std::string>::Iterator i(ht);\n\t\t\t\tunsigned long ic = 0;\n\t\t\t\twhile (i.next(k,v)) {\n\t\t\t\t\tif (ref[*k] != *v) {\n\t\t\t\t\t\tstd::cout << \"FAILED! (iterate)\" << std::endl;\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\t++ic;\n\t\t\t\t}\n\t\t\t\tif (ic != ht.size()) {\n\t\t\t\t\tstd::cout << \"FAILED! (iterate coverage)\" << std::endl;\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(std::map<uint64_t,std::string>::iterator i(ref.begin());i!=ref.end();) {\n\t\t\t\tif (!ht.get(i->first)) {\n\t\t\t\t\tstd::cout << \"FAILED! (erase, check if exists)\" << std::endl;\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tht.erase(i->first);\n\t\t\t\tif (ht.get(i->first)) {\n\t\t\t\t\tstd::cout << \"FAILED! (erase, check if erased)\" << std::endl;\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tref.erase(i++);\n\t\t\t\tif (ht.size() != ref.size()) {\n\t\t\t\t\tstd::cout << \"FAILED! (erase, size)\" << std::endl;\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!ht.empty()) {\n\t\t\t\tstd::cout << \"FAILED! (erase, empty)\" << std::endl;\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tfor(int i=0;i<10000;++i) {\n\t\t\t\tuint64_t k = rand();\n\t\t\t\twhile ((k == 0)||(ref.count(k) > 0))\n\t\t\t\t\t++k;\n\t\t\t\tstd::string v;\n\t\t\t\tfor(int j=0;j<(int)(k % 64);++j)\n\t\t\t\t\tv.push_back(\"0123456789\"[rand() % 10]);\n\t\t\t\tht.set(k,v);\n\t\t\t\tref[k] = v;\n\t\t\t}\n\t\t\tif (ht.size() != ref.size()) {\n\t\t\t\tstd::cout << \"FAILED! (second populate)\" << std::endl;\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tht.clear();\n\t\t\tref.clear();\n\t\t\tif (ht.size() != ref.size()) {\n\t\t\t\tstd::cout << \"FAILED! (clear)\" << std::endl;\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tfor(int i=0;i<10000;++i) {\n\t\t\t\tuint64_t k = rand();\n\t\t\t\twhile ((k == 0)||(ref.count(k) > 0))\n\t\t\t\t\t++k;\n\t\t\t\tstd::string v;\n\t\t\t\tfor(int j=0;j<(int)(k % 64);++j)\n\t\t\t\t\tv.push_back(\"0123456789\"[rand() % 10]);\n\t\t\t\tht.set(k,v);\n\t\t\t\tref[k] = v;\n\t\t\t}\n\t\t\t{\n\t\t\t\tHashtable<uint64_t,std::string>::Iterator i(ht);\n\t\t\t\tuint64_t *k;\n\t\t\t\tstd::string *v;\n\t\t\t\twhile (i.next(k,v))\n\t\t\t\t\tht.erase(*k);\n\t\t\t}\n\t\t\tref.clear();\n\t\t\tif (ht.size() != ref.size()) {\n\t\t\t\tstd::cout << \"FAILED! (clear by iterate, \" << ht.size() << \")\" << std::endl;\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\tstd::cout << \"PASS\" << std::endl;\n#endif\n\n\tstd::cout << \"[other] Testing/fuzzing Dictionary... \"; std::cout.flush();\n\tfor(int k=0;k<1000;++k) {\n\t\tDictionary<8194> *test = new Dictionary<8194>();\n\t\tchar key[32][16];\n\t\tchar value[32][128];\n\t\tmemset(key, 0, sizeof(key));\n\t\tmemset(value, 0, sizeof(value));\n\t\tfor(unsigned int q=0;q<32;++q) {\n\t\t\tUtils::hex((uint32_t)((rand() % 1000) + (q * 1000)),key[q]);\n\t\t\tint r = rand() % 128;\n\t\t\tfor(int x=0;x<r;++x)\n\t\t\t\tvalue[q][x] = (\"0123456789\\0\\t\\r\\n= \")[rand() % 16];\n\t\t\tvalue[q][r] = (char)0;\n\t\t\ttest->add(key[q],value[q],r);\n\t\t}\n\t\tfor(unsigned int q=0;q<1024;++q) {\n\t\t\tint r = rand() % 32;\n\t\t\tchar tmp[128];\n\t\t\tif (test->get(key[r],tmp,sizeof(tmp)) >= 0) {\n\t\t\t\tif (strcmp(value[r],tmp)) {\n\t\t\t\t\tstd::cout << \"FAILED (invalid value '\" << value[r] << \"' != '\" << tmp << \"')!\" << std::endl;\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstd::cout << \"FAILED (can't find key '\" << key[r] << \"')!\" << std::endl;\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\tdelete test;\n\t}\n\tint foo = 0;\n\tvolatile int *volatile bar = &foo; // force compiler not to optimize out test.get() below\n\tfor(int k=0;k<200;++k) {\n\t\tint r = rand() % 8194;\n\t\tunsigned char *tmp = new unsigned char[8194];\n\t\tfor(int q=0;q<r;++q)\n\t\t\ttmp[q] = (unsigned char)((rand() % 254) + 1); // don't put nulls since those will always just terminate scan\n\t\ttmp[r] = (r % 32) ? (char)(rand() & 0xff) : (char)0; // every 32nd iteration don't terminate the string maybe...\n\t\tDictionary<8194> *test = new Dictionary<8194>((const char *)tmp);\n\t\tfor(unsigned int q=0;q<100;++q) {\n\t\t\tchar tmp[128];\n\t\t\tfor(unsigned int x=0;x<128;++x)\n\t\t\t\ttmp[x] = (char)(rand() & 0xff);\n\t\t\ttmp[127] = (char)0;\n\t\t\tchar value[8194];\n\t\t\t*bar += test->get(tmp,value,sizeof(value));\n\t\t}\n\t\tdelete test;\n\t\tdelete[] tmp;\n\t}\n\tstd::cout << \"PASS (junk value to prevent optimization-out of test: \" << foo << \")\" << std::endl;\n\n\treturn 0;\n}\n\n#define ZT_TEST_PHY_NUM_UDP_PACKETS 10000\n#define ZT_TEST_PHY_UDP_PACKET_SIZE 1000\n#define ZT_TEST_PHY_NUM_VALID_TCP_CONNECTS 10\n#define ZT_TEST_PHY_NUM_INVALID_TCP_CONNECTS 2\n#define ZT_TEST_PHY_TCP_MESSAGE_SIZE 1000000\n#define ZT_TEST_PHY_TIMEOUT_MS 20000\nstatic unsigned long phyTestUdpPacketCount = 0;\nstatic unsigned long phyTestTcpByteCount = 0;\nstatic unsigned long phyTestTcpConnectSuccessCount = 0;\nstatic unsigned long phyTestTcpConnectFailCount = 0;\nstatic unsigned long phyTestTcpAcceptCount = 0;\nstruct TestPhyHandlers;\nstatic Phy<TestPhyHandlers *> *testPhyInstance = (Phy<TestPhyHandlers *> *)0;\nstruct TestPhyHandlers\n{\n\tinline void phyOnDatagram(PhySocket *sock,void **uptr,const struct sockaddr *localAddr,const struct sockaddr *from,void *data,unsigned long len)\n\t{\n\t\t++phyTestUdpPacketCount;\n\t}\n\n\tinline void phyOnTcpConnect(PhySocket *sock,void **uptr,bool success)\n\t{\n\t\tif (success) {\n\t\t\t++phyTestTcpConnectSuccessCount;\n\t\t} else {\n\t\t\t++phyTestTcpConnectFailCount;\n\t\t}\n\t}\n\n\tinline void phyOnTcpAccept(PhySocket *sockL,PhySocket *sockN,void **uptrL,void **uptrN,const struct sockaddr *from)\n\t{\n\t\t++phyTestTcpAcceptCount;\n\t\t*uptrN = new std::string(ZT_TEST_PHY_TCP_MESSAGE_SIZE,(char)0xff);\n\t\ttestPhyInstance->setNotifyWritable(sockN,true);\n\t}\n\n\tinline void phyOnTcpClose(PhySocket *sock,void **uptr)\n\t{\n\t\tdelete (std::string *)*uptr; // delete testMessage if any\n\t}\n\n\tinline void phyOnTcpData(PhySocket *sock,void **uptr,void *data,unsigned long len)\n\t{\n\t\tphyTestTcpByteCount += len;\n\t}\n\n\tinline void phyOnTcpWritable(PhySocket *sock,void **uptr)\n\t{\n\t\tstd::string *testMessage = (std::string *)*uptr;\n\t\tif ((testMessage)&&(testMessage->length() > 0)) {\n\t\t\tlong sent = testPhyInstance->streamSend(sock,(const void *)testMessage->data(),(unsigned long)testMessage->length(),true);\n\t\t\tif (sent > 0)\n\t\t\t\ttestMessage->erase(0,sent);\n\t\t}\n\t\tif ((!testMessage)||(!testMessage->length())) {\n\t\t\ttestPhyInstance->close(sock,true);\n\t\t}\n\t}\n\n#ifdef __UNIX_LIKE__\n\tinline void phyOnUnixAccept(PhySocket *sockL,PhySocket *sockN,void **uptrL,void **uptrN) {}\n\tinline void phyOnUnixClose(PhySocket *sock,void **uptr) {}\n\tinline void phyOnUnixData(PhySocket *sock,void **uptr,void *data,unsigned long len) {}\n\tinline void phyOnUnixWritable(PhySocket *sock,void **uptr) {}\n#endif // __UNIX_LIKE__\n\n\tinline void phyOnFileDescriptorActivity(PhySocket *sock,void **uptr,bool readable,bool writable) {}\n};\nstatic int testPhy()\n{\n\tchar udpTestPayload[ZT_TEST_PHY_UDP_PACKET_SIZE];\n\tmemset(udpTestPayload,0xff,sizeof(udpTestPayload));\n\n\tstruct sockaddr_in bindaddr;\n\tmemset(&bindaddr,0,sizeof(bindaddr));\n\tbindaddr.sin_family = AF_INET;\n\tbindaddr.sin_port = Utils::hton((uint16_t)60002);\n\tbindaddr.sin_addr.s_addr = Utils::hton((uint32_t)0x7f000001);\n\tstruct sockaddr_in invalidAddr;\n\tmemset(&bindaddr,0,sizeof(bindaddr));\n\tbindaddr.sin_family = AF_INET;\n\tbindaddr.sin_port = Utils::hton((uint16_t)60004);\n\tbindaddr.sin_addr.s_addr = Utils::hton((uint32_t)0x7f000001);\n\n\tstd::cout << \"[phy] Creating phy endpoint...\" << std::endl;\n\tTestPhyHandlers testPhyHandlers;\n\ttestPhyInstance = new Phy<TestPhyHandlers *>(&testPhyHandlers,false,true);\n\n\tstd::cout << \"[phy] Binding UDP listen socket to 127.0.0.1/60002... \";\n\tPhySocket *udpListenSock = testPhyInstance->udpBind((const struct sockaddr *)&bindaddr);\n\tif (!udpListenSock) {\n\t\tstd::cout << \"FAILED.\" << std::endl;\n\t\treturn -1;\n\t}\n\tstd::cout << \"OK\" << std::endl;\n\n\tstd::cout << \"[phy] Binding TCP listen socket to 127.0.0.1/60002... \";\n\tPhySocket *tcpListenSock = testPhyInstance->tcpListen((const struct sockaddr *)&bindaddr);\n\tif (!tcpListenSock) {\n\t\tstd::cout << \"FAILED.\" << std::endl;\n\t\treturn -1;\n\t}\n\tstd::cout << \"OK\" << std::endl;\n\n\tunsigned long phyTestUdpPacketsSent = 0;\n\tunsigned long phyTestTcpValidConnectionsAttempted = 0;\n\tunsigned long phyTestTcpInvalidConnectionsAttempted = 0;\n\n\tstd::cout << \"[phy] Testing UDP send/receive... \"; std::cout.flush();\n\tuint64_t timeoutAt = OSUtils::now() + ZT_TEST_PHY_TIMEOUT_MS;\n\twhile ((OSUtils::now() < timeoutAt)&&(phyTestUdpPacketCount < ZT_TEST_PHY_NUM_UDP_PACKETS)) {\n\t\tif (phyTestUdpPacketsSent < ZT_TEST_PHY_NUM_UDP_PACKETS) {\n\t\t\tif (!testPhyInstance->udpSend(udpListenSock,(const struct sockaddr *)&bindaddr,udpTestPayload,sizeof(udpTestPayload))) {\n\t\t\t\tstd::cout << \"FAILED.\" << std::endl;\n\t\t\t\treturn -1;\n\t\t\t} else ++phyTestUdpPacketsSent;\n\t\t}\n\t\ttestPhyInstance->poll(100);\n\t}\n\tstd::cout << \"got \" << phyTestUdpPacketCount << \" packets, OK\" << std::endl;\n\n\tstd::cout << \"[phy] Testing TCP... \"; std::cout.flush();\n\ttimeoutAt = OSUtils::now() + ZT_TEST_PHY_TIMEOUT_MS;\n\twhile ((OSUtils::now() < timeoutAt)&&(phyTestTcpByteCount < (ZT_TEST_PHY_NUM_VALID_TCP_CONNECTS * ZT_TEST_PHY_TCP_MESSAGE_SIZE))) {\n\t\tif (phyTestTcpValidConnectionsAttempted < ZT_TEST_PHY_NUM_VALID_TCP_CONNECTS) {\n\t\t\t++phyTestTcpValidConnectionsAttempted;\n\t\t\tbool connected = false;\n\t\t\tif (!testPhyInstance->tcpConnect((const struct sockaddr *)&bindaddr,connected,(void *)0,true))\n\t\t\t\t++phyTestTcpConnectFailCount;\n\t\t}\n\t\tif (phyTestTcpInvalidConnectionsAttempted < ZT_TEST_PHY_NUM_INVALID_TCP_CONNECTS) {\n\t\t\t++phyTestTcpInvalidConnectionsAttempted;\n\t\t\tbool connected = false;\n\t\t\tif (!testPhyInstance->tcpConnect((const struct sockaddr *)&invalidAddr,connected,(void *)0,true))\n\t\t\t\t++phyTestTcpConnectFailCount;\n\t\t}\n\t\ttestPhyInstance->poll(100);\n\t}\n\tif (phyTestTcpByteCount < (ZT_TEST_PHY_NUM_VALID_TCP_CONNECTS * ZT_TEST_PHY_TCP_MESSAGE_SIZE)) {\n\t\tstd::cout << \"got \" << phyTestTcpConnectSuccessCount << \" connect successes, \" << phyTestTcpConnectFailCount << \" failures, and \" << phyTestTcpByteCount << \" bytes, FAILED.\" << std::endl;\n\t\treturn -1;\n\t} else {\n\t\tstd::cout << \"got \" << phyTestTcpConnectSuccessCount << \" connect successes, \" << phyTestTcpConnectFailCount << \" failures, and \" << phyTestTcpByteCount << \" bytes, OK\" << std::endl;\n\t}\n\n\treturn 0;\n}\n\n#ifdef __WINDOWS__\nint __cdecl _tmain(int argc, _TCHAR* argv[])\n#else\nint main(int argc,char **argv)\n#endif\n{\n\tint r = 0;\n\n#ifdef __WINDOWS__\n\tWSADATA wsaData;\n\tWSAStartup(MAKEWORD(2,2),&wsaData);\n#endif\n\n\t// Code to generate the C25519 test vectors -- did this once and then\n\t// put these up top so that we can ensure that every platform produces\n\t// the same result.\n\t/*\n\tfor(int k=0;k<32;++k) {\n\t\tC25519::Pair p1 = C25519::generate();\n\t\tC25519::Pair p2 = C25519::generate();\n\t\tunsigned char agg[64];\n\t\tC25519::agree(p1,p2.pub,agg,64);\n\t\tC25519::Signature sig1 = C25519::sign(p1,agg,64);\n\t\tC25519::Signature sig2 = C25519::sign(p2,agg,64);\n\t\tprintf(\"{{\");\n\t\tfor(int i=0;i<64;++i)\n\t\t\tprintf(\"%s0x%.2x\",((i > 0) ? \",\" : \"\"),(unsigned int)p1.pub.data[i]);\n\t\tprintf(\"},{\");\n\t\tfor(int i=0;i<64;++i)\n\t\t\tprintf(\"%s0x%.2x\",((i > 0) ? \",\" : \"\"),(unsigned int)p1.priv.data[i]);\n\t\tprintf(\"},{\");\n\t\tfor(int i=0;i<64;++i)\n\t\t\tprintf(\"%s0x%.2x\",((i > 0) ? \",\" : \"\"),(unsigned int)p2.pub.data[i]);\n\t\tprintf(\"},{\");\n\t\tfor(int i=0;i<64;++i)\n\t\t\tprintf(\"%s0x%.2x\",((i > 0) ? \",\" : \"\"),(unsigned int)p2.priv.data[i]);\n\t\tprintf(\"},{\");\n\t\tfor(int i=0;i<64;++i)\n\t\t\tprintf(\"%s0x%.2x\",((i > 0) ? \",\" : \"\"),(unsigned int)agg[i]);\n\t\tprintf(\"},{\");\n\t\tfor(int i=0;i<96;++i)\n\t\t\tprintf(\"%s0x%.2x\",((i > 0) ? \",\" : \"\"),(unsigned int)sig1.data[i]);\n\t\tprintf(\"},{\");\n\t\tfor(int i=0;i<96;++i)\n\t\t\tprintf(\"%s0x%.2x\",((i > 0) ? \",\" : \"\"),(unsigned int)sig2.data[i]);\n\t\tprintf(\"}}\\n\");\n\t}\n\texit(0);\n\t*/\n\n\tstd::cout << \"[info] sizeof(void *) == \" << sizeof(void *) << std::endl;\n\tstd::cout << \"[info] OSUtils::now() == \" << OSUtils::now() << std::endl;\n\tstd::cout << \"[info] hardware concurrency == \" << std::thread::hardware_concurrency() << std::endl;\n\tstd::cout << \"[info] sizeof(NetworkConfig) == \" << sizeof(ZeroTier::NetworkConfig) << std::endl;\n\n\tsrand((unsigned int)time(0));\n\n\t///*\n\tr |= testOther();\n\tr |= testCrypto();\n\tr |= testPacket();\n\tr |= testIdentity();\n\tr |= testCertificate();\n\tr |= testPhy();\n\t//*/\n\n\tif (r)\n\t\tstd::cout << std::endl << \"SOMETHING FAILED!\" << std::endl;\n\n\t/*\n#ifdef ZT_USE_MINIUPNPC\n\tstd::cout << std::endl;\n\tstd::cout << \"[portmapper] Starting port mapper and waiting forever... use CTRL+C to exit. (enable ZT_PORTMAPPER_TRACE in PortMapper.cpp for output)\" << std::endl;\n\tPortMapper mapper(12345,\"ZeroTier/__selftest\");\n\tThread::sleep(0xffffffff);\n#endif\n\t*/\n\n\treturn r;\n}\n"
        },
        {
          "name": "service",
          "type": "tree",
          "content": null
        },
        {
          "name": "tcp-proxy",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_controllers.sh",
          "type": "blob",
          "size": 0.59375,
          "content": "#!/usr/bin/env bash\n\nif [ -z \"$1\" ]\nthen\n    echo \"Usage: $0 <docker_tag> <k8s_namespace>\"\n    echo \"    k8s_namesapce is set to default if not specified\"\n    exit 1\nfi\n\nif [ -z \"$2\" ]\nthen\n    NAMESPACE=default\nelse\n    NAMESPACE=$2\nfi\n\nTAG=$1\n\nCONTROLLERS=`kubectl get pods -o=name --namespace=${NAMESPACE} | grep controller | sed \"s/^.\\{4\\}//\" | cut -d '-' -f 2`\n\nfor c in ${CONTROLLERS[@]}\ndo\n    kubectl set image deployment --namespace=${NAMESPACE} controller-${c} ztcentral-controller=docker.zerotier.com/zerotier-central/ztcentral-controller:${TAG}\n    echo \"Sleeping for 1 minute\"\n    sleep 60\ndone\n"
        },
        {
          "name": "version.h",
          "type": "blob",
          "size": 0.982421875,
          "content": "/*\n * Copyright (c)2019 ZeroTier, Inc.\n *\n * Use of this software is governed by the Business Source License included\n * in the LICENSE.TXT file in the project's root directory.\n *\n * Change Date: 2026-01-01\n *\n * On the date above, in accordance with the Business Source License, use\n * of this software will be governed by version 2.0 of the Apache License.\n */\n/****/\n\n#ifndef _ZT_VERSION_H\n#define _ZT_VERSION_H\n\n/**\n * Major version\n */\n#define ZEROTIER_ONE_VERSION_MAJOR 1\n\n/**\n * Minor version\n */\n#define ZEROTIER_ONE_VERSION_MINOR 14\n\n/**\n * Revision\n */\n#define ZEROTIER_ONE_VERSION_REVISION 2\n\n/**\n * Build version\n *\n * This starts at 0 for each major.minor.rev tuple and can be incremented\n * to force a minor update without an actual version number change. It's\n * not part of the actual release version number.\n */\n#define ZEROTIER_ONE_VERSION_BUILD 0\n\n#ifndef ZT_BUILD_ARCHITECTURE\n#define ZT_BUILD_ARCHITECTURE 0\n#endif\n#ifndef ZT_BUILD_PLATFORM\n#define ZT_BUILD_PLATFORM 0\n#endif\n\n#endif\n"
        },
        {
          "name": "windows-clean.bat",
          "type": "blob",
          "size": 0.33203125,
          "content": "DEL \"ZeroTier One.msi\"\nDEL zt1_update*.exe\nRMDIR /Q /S windows\\Build\nRMDIR /Q /S windows\\x64\nRMDIR /Q /S windows\\ARM64\nRMDIR /Q /S windows\\Release\nRMDIR /Q /S windows\\copyutil\\bin\nRMDIR /Q /S windows\\copyutil\\obj\nRMDIR /Q /S windows\\ZeroTierOne\\Release\nRMDIR /Q /S windows\\ZeroTierOne\\x64\nRMDIR /Q /S zeroidc\\x64\nRMDIR /Q /S zeroidc\\target\n"
        },
        {
          "name": "windows",
          "type": "tree",
          "content": null
        },
        {
          "name": "zerotier-cli-completion.bash",
          "type": "blob",
          "size": 1.35546875,
          "content": "#compdef zerotier-cli\n#autoload\n\n\n_get_network_ids ()\n{\n    if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n        COMPREPLY=($(compgen -W \"$(ls -1 /Library/Application\\ Support/ZeroTier/One/networks.d | cut -c 1-16)\" -- ${cur}))\n    else\n        COMPREPLY=($(compgen -W \"$(ls -1 /var/lib/zerotier-one/networks.d | cut -c 1-16)\" -- ${cur}))\n    fi\n}\n\n_get_network_ids_from_history ()\n{\n    COMPREPLY=($(compgen -W \"$(fc -l -1000 -1 | sed -n 's/.*\\([[:xdigit:]]\\{16\\}\\).*/\\1/p')\" -- ${cur}))\n}\n\n_zerotier-cli_completions()\n{\n    local cur prev\n\n    cur=${COMP_WORDS[COMP_CWORD]}\n    prev=${COMP_WORDS[COMP_CWORD-1]}\n\n    case ${COMP_CWORD} in\n        1)\n            COMPREPLY=($(compgen -W \"info listpeers peers listnetworks join leave set get listmoons orbit deorbit\" -- ${cur}))\n            ;;\n        2)\n            case ${prev} in\n                leave)\n                    _get_network_ids\n                    ;;\n                join)\n                    _get_network_ids_from_history\n                    ;;\n                set)\n                    _get_network_ids\n                    ;;\n                get)\n                    _get_network_ids\n                    ;;\n                *)\n                    COMPREPLY=()\n                    ;;\n            esac\n            ;;\n        *)\n            COMPREPLY=()\n            ;;\n    esac\n}\n\ncomplete -F _zerotier-cli_completions zerotier-cli\n\n\n"
        },
        {
          "name": "zerotier-one.spec",
          "type": "blob",
          "size": 9.5498046875,
          "content": "Name:           zerotier-one\nVersion:        1.14.2\nRelease:        1%{?dist}\nSummary:        ZeroTier network virtualization service\n\nLicense:        ZeroTier BUSL 1.1\nURL:            https://www.zerotier.com\n\n# Fedora\n\n%if \"%{?dist}\" == \".fc35\"\nBuildRequires: systemd clang openssl openssl-devel\nRequires:      systemd openssl\nRequires(pre): /usr/sbin/useradd, /usr/bin/getent\n%endif\n\n%if \"%{?dist}\" == \".fc36\"\nBuildRequires: systemd clang openssl openssl-devel\nRequires:      systemd openssl\nRequires(pre): /usr/sbin/useradd, /usr/bin/getent\n%endif\n\n%if \"%{?dist}\" == \".fc37\"\nBuildRequires: systemd clang openssl openssl-devel\nRequires:      systemd openssl\nRequires(pre): /usr/sbin/useradd, /usr/bin/getent\n%endif\n\n%if \"%{?dist}\" == \".fc38\"\nBuildRequires: systemd clang openssl openssl-devel\nRequires:      systemd openssl\nRequires(pre): /usr/sbin/useradd, /usr/bin/getent\n%endif\n\n%if \"%{?dist}\" == \".fc39\"\nBuildRequires: systemd clang openssl openssl-devel\nRequires:      systemd openssl\nRequires(pre): /usr/sbin/useradd, /usr/bin/getent\n%endif\n\n%if \"%{?dist}\" == \".fc40\"\nBuildRequires: systemd clang openssl openssl-devel\nRequires:      systemd openssl\nRequires(pre): /usr/sbin/useradd, /usr/bin/getent\n%endif\n\n# RHEL\n\n%if \"%{?dist}\" == \".el6\"\nRequires: chkconfig\nRequires(pre): /usr/sbin/useradd, /usr/bin/getent\n%endif\n\n%if \"%{?dist}\" == \".el7\"\nBuildRequires: systemd openssl-devel\nRequires:      systemd openssl\nRequires(pre): /usr/sbin/useradd, /usr/bin/getent\n%endif\n\n%if \"%{?dist}\" == \".el8\"\nBuildRequires: systemd openssl-devel\nRequires:      systemd openssl\nRequires(pre): /usr/sbin/useradd, /usr/bin/getent\n%endif\n\n%if \"%{?dist}\" == \".el9\"\nBuildRequires: systemd openssl-devel\nRequires:      systemd openssl\nRequires(pre): /usr/sbin/useradd, /usr/bin/getent\n%endif\n\n# Amazon\n\n%if \"%{?dist}\" == \".amzn2\"\nBuildRequires:  systemd openssl-devel\nRequires:       systemd openssl\nRequires(pre): /usr/sbin/useradd, /usr/bin/getent\n%endif\n\n%if \"%{?dist}\" == \".amzn2022\"\nBuildRequires:  systemd openssl-devel\nRequires:       systemd openssl\nRequires(pre): /usr/sbin/useradd, /usr/bin/getent\n%endif\n\n%description\nZeroTier is a software defined networking layer for Earth.\n\nIt can be used for on-premise network virtualization, as a peer to peer VPN\nfor mobile teams, for hybrid or multi-data-center cloud deployments, or just\nabout anywhere else secure software defined virtual networking is useful.\n\nThis is our OS-level client service. It allows Mac, Linux, Windows,\nFreeBSD, and soon other types of clients to join ZeroTier virtual networks\nlike conventional VPNs or VLANs. It can run on native systems, VMs, or\ncontainers (Docker, OpenVZ, etc.).\n\n%prep\n%if \"%{?dist}\" != \".el6\"\nrm -rf BUILD BUILDROOT RPMS SRPMS SOURCES\nln -s %{getenv:PWD} %{name}-%{version}\nmkdir -p SOURCES\ntar --exclude=%{name}-%{version}/.git --exclude=%{name}-%{version}/%{name}-%{version} -czf SOURCES/%{name}-%{version}.tar.gz %{name}-%{version}/*\nrm -f %{name}-%{version}\n# cp -a %{getenv:PWD}/* .\n%endif\n\n%build\n%if \"%{?dist}\" != \".el6\"\nmake ZT_USE_MINIUPNPC=1 %{?_smp_mflags} one\n%endif\n\n%pre\n/usr/bin/getent passwd zerotier-one || /usr/sbin/useradd -r -d /var/lib/zerotier-one -s /sbin/nologin zerotier-one\n\n%install\n%if \"%{?dist}\" != \".el6\"\nmake install DESTDIR=$RPM_BUILD_ROOT\nmkdir -p $RPM_BUILD_ROOT%{_unitdir}\ncp %{getenv:PWD}/debian/zerotier-one.service $RPM_BUILD_ROOT%{_unitdir}/%{name}.service\n%else\nrm -rf $RPM_BUILD_ROOT\npushd %{getenv:PWD}\nmake install DESTDIR=$RPM_BUILD_ROOT\npopd\nmkdir -p $RPM_BUILD_ROOT/etc/init.d\ncp %{getenv:PWD}/ext/installfiles/linux/zerotier-one.init.rhel6 $RPM_BUILD_ROOT/etc/init.d/zerotier-one\nchmod 0755 $RPM_BUILD_ROOT/etc/init.d/zerotier-one\n%endif\n\n%files\n%{_sbindir}/*\n%{_mandir}/*\n%{_localstatedir}/*\n\n%if 0%{?rhel} && 0%{?rhel} <= 6\n/etc/init.d/zerotier-one\n%else\n%{_unitdir}/%{name}.service\n%endif\n\n%post\n%if ! 0%{?rhel} && 0%{?rhel} <= 6\n%systemd_post zerotier-one.service\n%endif\n\n%preun\n%if ! 0%{?rhel} && 0%{?rhel} <= 6\n%systemd_preun zerotier-one.service\n%endif\n\n%postun\n%if ! 0%{?rhel} && 0%{?rhel} <= 6\n%systemd_postun_with_restart zerotier-one.service\n%endif\n\n%changelog\n* Wed Oct 23 2024 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.14.2\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Tue Mar 19 2024 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.14.0\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Tue Sep 12 2023 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.12.2\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Fri Aug 25 2023 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.12.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Thu Aug 17 2023 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.12.0\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Tue Mar 21 2023 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.10.6\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Fri Mar 10 2023 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.10.5\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Mon Mar 06 2023 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.10.4\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Sat Jan 21 2023 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.10.3\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Thu Oct 13 2022 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.10.2\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Mon Jun 27 2022 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.10.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Fri Jun 03 2022 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.10.0\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Tue May 10 2022 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.8.10\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Mon Apr 25 2022 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.8.9\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Mon Apr 11 2022 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.8.8\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Mon Mar 21 2022 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.8.7\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Mon Mar 07 2022 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.8.6\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Fri Dec 17 2021 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.8.5\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Tue Nov 23 2021 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.8.4\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Mon Nov 15 2021 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.8.3\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Mon Nov 08 2021 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.8.2\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Wed Oct 20 2021 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.8.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Wed Sep 15 2021 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.8.0\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Tue Apr 13 2021 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.6.5\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Mon Feb 15 2021 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.6.4\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Mon Nov 30 2020 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.6.2-0.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Tue Nov 24 2020 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.6.1-0.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Thu Nov 19 2020 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.6.0-0.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Mon Oct 05 2020 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.6.0-beta1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Fri Aug 23 2019 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.4.4-0.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Mon Jul 29 2019 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.4.0-0.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Tue May 08 2018 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.2.10-0.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Thu May 03 2018 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.2.8-0.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Mon Apr 24 2017 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.2.2-0.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Fri Mar 17 2017 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.2.2-0.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Tue Mar 14 2017 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.2.0-0.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Tue Jul 12 2016 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.1.10-0.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Fri Jul 08 2016 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.1.8-0.1\n- see https://github.com/zerotier/ZeroTierOne for release notes\n\n* Sat Jun 25 2016 Adam Ierymenko <adam.ierymenko@zerotier.com> - 1.1.6-0.1\n- now builds on CentOS 6 as well as newer distros, and some cleanup\n\n* Wed Jun 08 2016 FranÃ§ois Kooman <fkooman@tuxed.net> - 1.1.5-0.3\n- include systemd unit file\n\n* Wed Jun 08 2016 FranÃ§ois Kooman <fkooman@tuxed.net> - 1.1.5-0.2\n- add libnatpmp as (build)dependency\n\n* Wed Jun 08 2016 FranÃ§ois Kooman <fkooman@tuxed.net> - 1.1.5-0.1\n- initial package\n"
        }
      ]
    }
  ]
}