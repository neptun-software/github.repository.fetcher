{
  "metadata": {
    "timestamp": 1736566388480,
    "page": 149,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wolfpld/tracy",
      "stars": 10533,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.556640625,
          "content": "# Empirical format config, based on observed style guide\n# Use this only as an help to fit the surrounding code style - don't reformat whole files at once\n---\nBasedOnStyle: LLVM\nAllowShortIfStatementsOnASingleLine: WithoutElse\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakTemplateDeclarations: Yes\nBreakBeforeBraces: Allman\nBreakConstructorInitializers: BeforeComma\nBreakStringLiterals: false\nColumnLimit: 120\nFixNamespaceComments: false\nIndentPPDirectives: AfterHash\nIndentWidth: 4\nPointerAlignment: Left\nSpaceBeforeParens: Never\nSpacesInParentheses: true\nTabWidth: 4\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 3.916015625,
          "content": "---\nChecks:\n'\n\tclang-diagnostic-*,\n\tclang-analyzer-*,\n\tbugprone-*,\n\tgoogle-*,\n\tmisc-*,\n\tmodernize-*,\n\tperformance-*,\n\treadability-*,\n\t-bugprone-easily-swappable-parameters,\n\t-bugprone-implicit-widening-of-multiplication-result,\n\t-bugprone-narrowing-conversions,\n\t-bugprone-reserved-identifier,\n\t-google-readability-braces-around-statements,\n\t-google-readability-casting,\n\t-google-readability-function-size,\n\t-google-readability-todo,\n\t-google-readability-namespace-comments,\n\t-misc-confusable-identifiers,\n\t-misc-no-recursion,\n\t-modernize-avoid-c-arrays,\n\t-modernize-deprecated-headers,\n\t-modernize-use-default-member-init,\n\t-modernize-use-trailing-return-type,\n\t-performance-no-int-to-ptr,\n\t-readability-braces-around-statements,\n\t-readability-else-after-return,\n\t-readability-function-cognitive-complexity,\n\t-readability-identifier-length,\n\t-readability-implicit-bool-conversion,\n\t-readability-isolate-declaration,\n\t-readability-magic-numbers,\n\t-readability-qualified-auto,\n\t-readability-uppercase-literal-suffix\n'\nWarningsAsErrors: ''\nHeaderFilterRegex: ''\nFormatStyle:     none\nCheckOptions:\n  llvm-else-after-return.WarnOnConditionVariables: 'false'\n  modernize-loop-convert.MinConfidence: reasonable\n  modernize-replace-auto-ptr.IncludeStyle: llvm\n  modernize-pass-by-value.IncludeStyle: llvm\n  google-readability-namespace-comments.ShortNamespaceLines: '10'\n  google-readability-namespace-comments.SpacesBeforeComments: '2'\n  cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic: 'true'\n  google-readability-braces-around-statements.ShortStatementLines: '1'\n  cert-err33-c.CheckedFunctions: '::aligned_alloc;::asctime_s;::at_quick_exit;::atexit;::bsearch;::bsearch_s;::btowc;::c16rtomb;::c32rtomb;::calloc;::clock;::cnd_broadcast;::cnd_init;::cnd_signal;::cnd_timedwait;::cnd_wait;::ctime_s;::fclose;::fflush;::fgetc;::fgetpos;::fgets;::fgetwc;::fopen;::fopen_s;::fprintf;::fprintf_s;::fputc;::fputs;::fputwc;::fputws;::fread;::freopen;::freopen_s;::fscanf;::fscanf_s;::fseek;::fsetpos;::ftell;::fwprintf;::fwprintf_s;::fwrite;::fwscanf;::fwscanf_s;::getc;::getchar;::getenv;::getenv_s;::gets_s;::getwc;::getwchar;::gmtime;::gmtime_s;::localtime;::localtime_s;::malloc;::mbrtoc16;::mbrtoc32;::mbsrtowcs;::mbsrtowcs_s;::mbstowcs;::mbstowcs_s;::memchr;::mktime;::mtx_init;::mtx_lock;::mtx_timedlock;::mtx_trylock;::mtx_unlock;::printf_s;::putc;::putwc;::raise;::realloc;::remove;::rename;::scanf;::scanf_s;::setlocale;::setvbuf;::signal;::snprintf;::snprintf_s;::sprintf;::sprintf_s;::sscanf;::sscanf_s;::strchr;::strerror_s;::strftime;::strpbrk;::strrchr;::strstr;::strtod;::strtof;::strtoimax;::strtok;::strtok_s;::strtol;::strtold;::strtoll;::strtoul;::strtoull;::strtoumax;::strxfrm;::swprintf;::swprintf_s;::swscanf;::swscanf_s;::thrd_create;::thrd_detach;::thrd_join;::thrd_sleep;::time;::timespec_get;::tmpfile;::tmpfile_s;::tmpnam;::tmpnam_s;::tss_create;::tss_get;::tss_set;::ungetc;::ungetwc;::vfprintf;::vfprintf_s;::vfscanf;::vfscanf_s;::vfwprintf;::vfwprintf_s;::vfwscanf;::vfwscanf_s;::vprintf_s;::vscanf;::vscanf_s;::vsnprintf;::vsnprintf_s;::vsprintf;::vsprintf_s;::vsscanf;::vsscanf_s;::vswprintf;::vswprintf_s;::vswscanf;::vswscanf_s;::vwprintf_s;::vwscanf;::vwscanf_s;::wcrtomb;::wcschr;::wcsftime;::wcspbrk;::wcsrchr;::wcsrtombs;::wcsrtombs_s;::wcsstr;::wcstod;::wcstof;::wcstoimax;::wcstok;::wcstok_s;::wcstol;::wcstold;::wcstoll;::wcstombs;::wcstombs_s;::wcstoul;::wcstoull;::wcstoumax;::wcsxfrm;::wctob;::wctrans;::wctype;::wmemchr;::wprintf_s;::wscanf;::wscanf_s;'\n  modernize-loop-convert.MaxCopySize: '16'\n  cert-dcl16-c.NewSuffixes: 'L;LL;LU;LLU'\n  cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField: 'false'\n  cert-str34-c.DiagnoseSignedUnsignedCharComparisons: 'false'\n  modernize-use-nullptr.NullMacros: 'NULL'\n  llvm-qualified-auto.AddConstToQualified: 'false'\n  modernize-loop-convert.NamingStyle: CamelCase\n  llvm-else-after-return.WarnOnUnfixable: 'false'\n  google-readability-function-size.StatementThreshold: '800'\n...\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5302734375,
          "content": ".vs\n_build\n_compiler\ntools/*\n*.d\n*.o\n*.so\n*.swp\n*.obj\nimgui.ini\ntest/tracy_test\ntest/tracy_test.exe\n*/build/unix/*-*\nmanual/t*.aux\nmanual/t*.log\nmanual/t*.out\nmanual/t*.pdf\nmanual/t*.synctex.gz\nmanual/t*.toc\nmanual/t*.bbl\nmanual/t*.blg\nmanual/t*.fdb_latexmk\nmanual/t*.fls\nprofiler/build/win32/packages\nprofiler/build/win32/Tracy.aps\n.deps/\n.dirstamp\n/_*/**\n/**/__pycache__/**\nextra/vswhere.exe\nextra/tracy-build\n.cache\ncompile_commands.json\nprofiler/build/wasm/Tracy-release.*\nprofiler/build/wasm/Tracy-debug.*\nprofiler/build/wasm/embed.tracy\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.083984375,
          "content": "<wolf@nereid.pl> <wolf.pld@gmail.com>\n<wolf@nereid.pl> <bartosz.taudul@game-lion.com>\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.033203125,
          "content": "cmake_minimum_required(VERSION 3.10)\n\n# Run version helper script\ninclude(cmake/version.cmake)\n\nproject(Tracy LANGUAGES CXX VERSION ${TRACY_VERSION_STRING})\n\nfile(GENERATE OUTPUT .gitignore CONTENT \"*\")\n\nif(${BUILD_SHARED_LIBS})\n\tset(DEFAULT_STATIC OFF)\nelse()\n\tset(DEFAULT_STATIC ON)\nendif()\n\noption(TRACY_STATIC \"Whether to build Tracy as a static library\" ${DEFAULT_STATIC})\noption(TRACY_Fortran \"Build Fortran bindings\" OFF)\n\nif(TRACY_Fortran)\n  enable_language(Fortran)\n  set(CMAKE_Fortran_VERSION 2003)\nendif()\n\nfind_package(Threads REQUIRED)\n\nset(TRACY_PUBLIC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/public)\n\nif(TRACY_STATIC)\n\tset(TRACY_VISIBILITY \"STATIC\")\nelse()\n\tset(TRACY_VISIBILITY \"SHARED\")\nendif()\n\nadd_library(TracyClient ${TRACY_VISIBILITY} \"${TRACY_PUBLIC_DIR}/TracyClient.cpp\")\ntarget_compile_features(TracyClient PUBLIC cxx_std_11)\ntarget_include_directories(TracyClient SYSTEM PUBLIC\n    $<BUILD_INTERFACE:${TRACY_PUBLIC_DIR}>\n    $<INSTALL_INTERFACE:include>)\ntarget_link_libraries(\n    TracyClient\n    PUBLIC\n        Threads::Threads\n        ${CMAKE_DL_LIBS}\n)\n\nif(TRACY_Fortran)\n    add_library(TracyClientF90 ${TRACY_VISIBILITY} \"${TRACY_PUBLIC_DIR}/TracyClient.F90\")\n    target_include_directories(TracyClientF90 PUBLIC\n        $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>\n        $<INSTALL_INTERFACE:include>)\n    target_link_libraries(\n        TracyClientF90\n        PUBLIC\n            TracyClient\n    )\n    set_target_properties(TracyClientF90 PROPERTIES Fortran_MODULE_DIRECTORY ${PROJECT_BINARY_DIR})\nendif()\n\n# Public dependency on some libraries required when using Mingw\nif(WIN32 AND ${CMAKE_CXX_COMPILER_ID} MATCHES \"GNU|Clang\")\n    target_link_libraries(TracyClient PUBLIC ws2_32 dbghelp)\nendif()\n\nif(CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")\n    find_library(EXECINFO_LIBRARY NAMES execinfo REQUIRED)\n    target_link_libraries(TracyClient PUBLIC ${EXECINFO_LIBRARY})\nendif()\n\nif(TRACY_LIBUNWIND_BACKTRACE)\n    include(FindPkgConfig)\n    pkg_check_modules(unwind REQUIRED libunwind)\n    target_include_directories(TracyClient INTERFACE ${unwind_INCLUDE_DIRS})\n    target_link_libraries(TracyClient INTERFACE ${unwind_LINK_LIBRARIES})\nendif()\n\nif(TRACY_DEBUGINFOD)\n    include(FindPkgConfig)\n    pkg_check_modules(debuginfod REQUIRED libdebuginfod)\n    target_include_directories(TracyClient INTERFACE ${debuginfod_INCLUDE_DIRS})\n    target_link_libraries(TracyClient INTERFACE ${debuginfod_LINK_LIBRARIES})\nendif()\n\nadd_library(Tracy::TracyClient ALIAS TracyClient)\nif(TRACY_Fortran)\n    add_library(Tracy::TracyClient_Fortran ALIAS TracyClientF90)\nendif()\n\nmacro(set_option option help value)\n    option(${option} ${help} ${value})\n    if(${option})\n        message(STATUS \"${option}: ON\")\n        target_compile_definitions(TracyClient PUBLIC ${option})\n    else()\n        message(STATUS \"${option}: OFF\")\n    endif()\nendmacro()\n\nset_option(TRACY_ENABLE \"Enable profiling\" ON)\nset_option(TRACY_ON_DEMAND \"On-demand profiling\" OFF)\nset_option(TRACY_CALLSTACK \"Enforce callstack collection for tracy regions\" OFF)\nset_option(TRACY_NO_CALLSTACK \"Disable all callstack related functionality\" OFF)\nset_option(TRACY_NO_CALLSTACK_INLINES \"Disables the inline functions in callstacks\" OFF)\nset_option(TRACY_ONLY_LOCALHOST \"Only listen on the localhost interface\" OFF)\nset_option(TRACY_NO_BROADCAST \"Disable client discovery by broadcast to local network\" OFF)\nset_option(TRACY_ONLY_IPV4 \"Tracy will only accept connections on IPv4 addresses (disable IPv6)\" OFF)\nset_option(TRACY_NO_CODE_TRANSFER \"Disable collection of source code\" OFF)\nset_option(TRACY_NO_CONTEXT_SWITCH \"Disable capture of context switches\" OFF)\nset_option(TRACY_NO_EXIT \"Client executable does not exit until all profile data is sent to server\" OFF)\nset_option(TRACY_NO_SAMPLING \"Disable call stack sampling\" OFF)\nset_option(TRACY_NO_VERIFY \"Disable zone validation for C API\" OFF)\nset_option(TRACY_NO_VSYNC_CAPTURE \"Disable capture of hardware Vsync events\" OFF)\nset_option(TRACY_NO_FRAME_IMAGE  \"Disable the frame image support and its thread\" OFF)\nset_option(TRACY_NO_SYSTEM_TRACING  \"Disable systrace sampling\" OFF)\nset_option(TRACY_PATCHABLE_NOPSLEDS  \"Enable nopsleds for efficient patching by system-level tools (e.g. rr)\" OFF)\nset_option(TRACY_DELAYED_INIT \"Enable delayed initialization of the library (init on first call)\" OFF)\nset_option(TRACY_MANUAL_LIFETIME \"Enable the manual lifetime management of the profile\" OFF)\nset_option(TRACY_FIBERS \"Enable fibers support\" OFF)\nset_option(TRACY_NO_CRASH_HANDLER \"Disable crash handling\" OFF)\nset_option(TRACY_TIMER_FALLBACK \"Use lower resolution timers\" OFF)\nset_option(TRACY_LIBUNWIND_BACKTRACE \"Use libunwind backtracing where supported\" OFF)\nset_option(TRACY_SYMBOL_OFFLINE_RESOLVE \"Instead of full runtime symbol resolution, only resolve the image path and offset to enable offline symbol resolution\" OFF)\nset_option(TRACY_LIBBACKTRACE_ELF_DYNLOAD_SUPPORT \"Enable libbacktrace to support dynamically loaded elfs in symbol resolution resolution after the first symbol resolve operation\" OFF)\nset_option(TRACY_DEBUGINFOD \"Enable debuginfod support\" OFF)\n\n# advanced\nset_option(TRACY_VERBOSE \"[advanced] Verbose output from the profiler\" OFF)\nmark_as_advanced(TRACY_VERBOSE)\nset_option(TRACY_DEMANGLE \"[advanced] Don't use default demangling function - You'll need to provide your own\" OFF)\nmark_as_advanced(TRACY_DEMANGLE)\n\n# handle incompatible combinations\nif(TRACY_MANUAL_LIFETIME AND NOT TRACY_DELAYED_INIT)\n    message(FATAL_ERROR \"TRACY_MANUAL_LIFETIME can not be activated with disabled TRACY_DELAYED_INIT\")\nendif()\n\nif(NOT TRACY_STATIC)\n    target_compile_definitions(TracyClient PRIVATE TRACY_EXPORTS)\n    target_compile_definitions(TracyClient PUBLIC TRACY_IMPORTS)\nendif()\n\ninclude(CMakePackageConfigHelpers)\ninclude(GNUInstallDirs)\n\nset_target_properties(TracyClient PROPERTIES VERSION ${PROJECT_VERSION})\nif(TRACY_Fortran)\n    set_target_properties(TracyClientF90 PROPERTIES VERSION ${PROJECT_VERSION})\nendif()\n\nset(tracy_includes\n    ${TRACY_PUBLIC_DIR}/tracy/TracyC.h\n    ${TRACY_PUBLIC_DIR}/tracy/Tracy.hpp\n    ${TRACY_PUBLIC_DIR}/tracy/TracyD3D11.hpp\n    ${TRACY_PUBLIC_DIR}/tracy/TracyD3D12.hpp\n    ${TRACY_PUBLIC_DIR}/tracy/TracyLua.hpp\n    ${TRACY_PUBLIC_DIR}/tracy/TracyOpenCL.hpp\n    ${TRACY_PUBLIC_DIR}/tracy/TracyOpenGL.hpp\n    ${TRACY_PUBLIC_DIR}/tracy/TracyVulkan.hpp)\n\nset(client_includes\n    ${TRACY_PUBLIC_DIR}/client/tracy_concurrentqueue.h\n    ${TRACY_PUBLIC_DIR}/client/tracy_rpmalloc.hpp\n    ${TRACY_PUBLIC_DIR}/client/tracy_SPSCQueue.h\n    ${TRACY_PUBLIC_DIR}/client/TracyKCore.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracyArmCpuTable.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracyCallstack.h\n    ${TRACY_PUBLIC_DIR}/client/TracyCallstack.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracyCpuid.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracyDebug.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracyDxt1.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracyFastVector.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracyLock.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracyProfiler.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracyRingBuffer.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracyScoped.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracyStringHelpers.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracySysPower.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracySysTime.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracySysTrace.hpp\n    ${TRACY_PUBLIC_DIR}/client/TracyThread.hpp)\n\nset(common_includes\n    ${TRACY_PUBLIC_DIR}/common/tracy_lz4.hpp\n    ${TRACY_PUBLIC_DIR}/common/tracy_lz4hc.hpp\n    ${TRACY_PUBLIC_DIR}/common/TracyAlign.hpp\n    ${TRACY_PUBLIC_DIR}/common/TracyAlloc.hpp\n    ${TRACY_PUBLIC_DIR}/common/TracyApi.h\n    ${TRACY_PUBLIC_DIR}/common/TracyColor.hpp\n    ${TRACY_PUBLIC_DIR}/common/TracyForceInline.hpp\n    ${TRACY_PUBLIC_DIR}/common/TracyMutex.hpp\n    ${TRACY_PUBLIC_DIR}/common/TracyProtocol.hpp\n    ${TRACY_PUBLIC_DIR}/common/TracyQueue.hpp\n    ${TRACY_PUBLIC_DIR}/common/TracySocket.hpp\n    ${TRACY_PUBLIC_DIR}/common/TracyStackFrames.hpp\n    ${TRACY_PUBLIC_DIR}/common/TracySystem.hpp\n    ${TRACY_PUBLIC_DIR}/common/TracyUwp.hpp\n    ${TRACY_PUBLIC_DIR}/common/TracyYield.hpp)\n\ninstall(TARGETS TracyClient\n        EXPORT TracyConfig\n        RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR}\n        LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        COMPONENT lib)\nif(TRACY_Fortran)\n    install(TARGETS TracyClientF90\n            EXPORT TracyConfig\n            RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR}\n            LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}\n            ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}\n            COMPONENT lib)\nendif()\n# Export targets to build tree root\nexport(TARGETS TracyClient\n       NAMESPACE Tracy::\n       FILE ${CMAKE_BINARY_DIR}/TracyTargets.cmake)\nif(TRACY_Fortran)\n    export(TARGETS TracyClientF90\n           NAMESPACE Tracy::\n           APPEND\n           FILE ${CMAKE_BINARY_DIR}/TracyTargets.cmake)\nendif()\ninstall(FILES ${tracy_includes}\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tracy)\ninstall(FILES ${client_includes}\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tracy/client)\ninstall(FILES ${common_includes}\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tracy/common)\nif(TRACY_Fortran)\n    if(${CMAKE_Fortran_COMPILER_ID} MATCHES \"Cray\")\n        install(FILES ${PROJECT_BINARY_DIR}/TRACY.mod\n                DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tracy)\n    else()\n        install(FILES ${PROJECT_BINARY_DIR}/tracy.mod\n                DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tracy)\n    endif()\nendif()\ninstall(EXPORT TracyConfig\n        NAMESPACE Tracy::\n        FILE TracyTargets.cmake\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in\n        \"${CMAKE_CURRENT_BINARY_DIR}/TracyConfig.cmake\"\n        INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/TracyConfig.cmake\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\n\noption(TRACY_CLIENT_PYTHON \"Whether to build Tracy python client library\" OFF)\n\nif(TRACY_CLIENT_PYTHON)\n    if(TRACY_STATIC)\n        message(FATAL_ERROR \"Python-bindings require a shared client library\")\n    endif()\n\n    add_subdirectory(python)\nendif()\n"
        },
        {
          "name": "Config.cmake.in",
          "type": "blob",
          "size": 0.13671875,
          "content": "@PACKAGE_INIT@\n\ninclude(CMakeFindDependencyMacro)\nfind_dependency(Threads REQUIRED)\n\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/TracyTargets.cmake\")"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.580078125,
          "content": "Tracy Profiler (https://github.com/wolfpld/tracy) is licensed under the\n3-clause BSD license.\n\nCopyright (c) 2017-2025, Bartosz Taudul <wolf@nereid.pl>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the <organization> nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 63.3388671875,
          "content": "Note: There is no guarantee that version mismatched client and server will\nbe able to talk with each other. Network protocol breakages won't be listed\nhere.\n\nvx.xx.x (xxxx-xx-xx)\n--------------------\n\n- Enabled workaround for MSVC runtime library SNAFU, which manifested with\n  the profiler executables crashing at startup inside mutex code.\n- CPU topology data now includes CPU die information.\n- Clients running under Wine will now report that in the trace info.\n- Added flame graph.\n- The Git ref information for the build is now included in the about dialog.\n- Added support for clipboard copy and paste on Wayland.\n- The welcome dialog client address entry field will now trim the entered\n  address, so that stray spaces at the start and the end are removed. This\n  should reduce the amount of user precision required when copy pasting the\n  address from somewhere else.\n- Metal GPU profiling is now available.\n- Profiling zones can now optionally inherit their parent color.\n- It is no longer needed to have up-to-date copy of wayland-protocols\n  installed. CMake will download the required version from GitHub.\n- Added option to show the top inline in symbol statistics list in stead of\n  the symbol name.\n- Parallel sorting is now performed with PPQSort (which removes potential\n  dependency on TBB).\n- Added CMake option TRACY_DEBUGINFOD to enable use of libdebuginfod to\n  retrieve symbols on Linux clients.\n- Added a \"custom\" label as an option to select for GPU context type.\n- Symbol code retrieval is now protected against reading no longer available\n  memory.\n- Clicking on a symbol in the symbol statistics list will now open a popup\n  with two options. This change intends to make the useful but quite hidden\n  disassembly view more discoverable.\n  - \"View symbol\" shows the symbol code disassembly. It was previously\n    available by right-click on the source file name.\n  - \"Sample entry call stacks\" shows the list window that was previously\n    opened when the symbol entry was clicked.\n- Plots are now extended to the end of the trace, instead of ending at the\n  last data point.\n- Added TracyMemoryDiscard macros to mark that all allocations made in a\n  certain memory pool were freed. This enables better support for arena\n  allocators.\n- It is now possible to fine-tune horizontal and vertical mouse wheel scroll\n  sensitivity.\n- Added p75 and p90 percentiles in the Find zone window.\n- Zone info window will now display (approximate) wall-clock time of when\n  the zone appeared, in addition to the previously displayed time from the\n  start of the program.\n- Zone values passed via ZoneValue macro will be now also displayed in hex.\n- The csvexport utility can now export plots.\n- Fortran integration is now available.\n\n\nv0.11.1 (2024-08-22)\n--------------------\n\n- Utilities import-chrome and import-fuchsia now live together in the import\n  directory.\n- Added TRACY_VERBOSE to available CMake options.\n- It is now possible to set TRACY_SAMPLING_HZ via a environment variable.\n- Thread group hints can be now used to group threads together in the\n  profiler UI.\n- Limit Lua file names to 255 characters, as the source string can contain\n  the whole script, if loaded with loadstring().\n\n\nv0.11.0 (2024-07-16)\n--------------------\n\n- Support for pre-0.9 traces has been dropped.\n- The old server-side build system has been replaced by CMake. The client\n  integration is not affected. Refer to the manual for details.\n  - Most importantly, a known version of the capstone library is now\n    downloaded from GitHub. You will need to have git installed for this\n    to work (there is a CMake option to use the capstone installed on the\n    system, as was done previously).\n- Various Meson fixes.\n- Proper way of loading Vulkan calibrated timestamps extension.\n- Fixed C API support for GPU tracing when on demand mode is enabled.\n- Added a way to resynchronize CPU and GPU timestamps.\n  - Using calibrated contexts should always be preferred.\n  - Each synchronization event requires a sync of CPU and GPU, which is\n    something you always want to avoid.\n  - This is not exposed as an easy-to-use API available through the GPU\n    wrappers.\n- Added TracyIsStarted macro to check if the profiler has been started.\n  Using this functionality only makes sense in the manual lifetime mode,\n  and will always return true in any other mode of operation.\n- Added basic QNX support.\n- Zmmword is now recognized as an assemble size directive.\n- Libunwind can be used for call stack capture on Linux if you build with\n  the TRACY_LIBUNWIND_BACKTRACE define.\n- Preloading symbols for all modules on Windows, which is always performed\n  on program init, and which can be quite slow, may now be omitted through\n  the TRACY_NO_DBGHELP_INIT_LOAD define. In this mode, symbols will be\n  loaded as needed.\n- Validation of discontinuous frames has been disabled in on-demand mode.\n  It's quite likely to connect in the middle of a discontinuous frame,\n  which resulted in frame end event for a frame that hasn't been started.\n- Symbols can be now resolved offline on Windows and Linux.\n  - Enabled with the TRACY_SYMBOL_OFFLINE_RESOLVE define or env variable.\n  - The update utility has two additional options:\n    - -r, which enables resolving symbol and patching stack frames in the\n      trace.\n    - -p, which you can use to modify the paths used for symbol resolution.\n  - Some functionality will be missing if this mode is used. For example,\n    symbol statistics are unavailable.\n- Resolving symbol names on Linux will now use image cache to reduce the\n  number of dladdr() calls.\n- Compiling with the TRACY_LIBBACKTRACE_ELF_DYNLOAD_SUPPORT define will\n  enable support for run-time updating of known elf ranges in libbacktrace\n  on Linux. Previously, shared objects dlopened() after libbacktrace init\n  would not be visible during symbol resolution.\n- Zone group count in the Find zone window is now explicitly displayed.\n- Instrumentation statistics now display in how many threads each source\n  location has appeared in.\n- Added import tool for fuchsia traces.\n  - https://fuchsia.dev/fuchsia-src/reference/tracing/trace-format\n- Added checks for overflow of source locations.\n  - As a reminder, Tracy only allows to have 64K unique source locations,\n    split in half between static and dynamic locations.\n  - Runtime checks are active during capture and will stop a trace that\n    goes beyond the limit.\n  - Load-time checks will stop any broken trace file from loading.\n- Opening the source code view that has no associated address in code\n  (i.e., from the list of instrumented zones, or from the find zone\n  window) will now search the list of symbols for a function name match.\n  - In many cases this will result in displaying the full disassembly view\n    where previously you would only see the source code.\n  - Matching is performed by string comparisons, which in rare cases may\n    result in showing false data.\n  - Press ctrl key while opening source view to keep the old behavior.\n  - If more than one matching symbol is found (e.g., if two classes have\n    methods with the same name, or if a template is instantiated in multiple\n    places in code), it is not possible to tell which of the code locations\n    the source location corresponds to and only the source code will be\n    displayed.\n- Added TracyNoop macro, which inserts a reference to Tracy's object file\n  into your application. Use it if you want to use Tracy in sampling mode,\n  without any manual instrumentation (so no references of your own exist)\n  and link Tracy as a static library. Linkers will only include library code\n  if code references it, and this doesn't work as intended with Tracy, as it\n  ignores global constructors that have side effects.\n- ZoneText and ZoneName macros now have a printf-like variant, denoted with\n  a 'F' postfix.\n- The 'tracy_shared_libs' Meson option was removed. Use interface provided\n  by Meson to set the library type instead.\n- Dropped the 'tracy_' prefix from Meson options. The `tracy_enable` option\n  remains as it was, as it can be inherited from parent projects.\n- Fixed display of active / inactive allocations in memory call tree.\n- Instrumentation statistics can be now sorted by source location.\n- Added option to hide external code frames in call stack view.\n- There's now a copy to clipboard button in the statistics view. It copies\n  the visible rows of either the instrumentation or GPU statistics view to\n  a CSV string matching a subset of the csvexport format.\n- Source file contents can be copied to the clipboard.\n- Added key binding for immediate reconnect: Ctrl+Shift+Alt+R.\n- Lock markup is now available through the C API.\n- Symbol statistics window now allows aggregation of inlined functions in\n  symbols.\n- Cost measurements of inlined functions in the symbol statistics window\n  can be now relative to the base symbol instead of total program run time.\n- ScopedZone and AllocSourceLocation now accept color parameter. Impact on\n  existing code should be minimal.\n  - AllocSourceLocation has a new parameter with a default value.\n  - __tracy_alloc_srcloc and __tracy_alloc_srcloc_name break the existing\n    API. This can be easily fixed by setting the last parameter to zero.\n- To build the profiler GUI with Wayland you now need wayland-scanner and\n  wayland-protocols to be installed. A reasonably recent release of the\n  protocols is required, which, as always, is not available on Ubuntu.\n  Seriously, stop trying to build modern software with that broken distro.\n- Fractional DPI scaling is now properly supported on Wayland.\n- Added Python bindings.\n- The per-line sampling statistics are now also displayed as a percentage\n  of total program run time.\n- The out-of-focus render frame rate reduction can be now disabled in\n  global settings.\n- It is now possible to load source files that are newer than the trace.\n  The default setting is still to reject such files.\n- Memory limit for a capture can be now set, both in the GUI profiler and\n  in the capture utility.\n- Thread list can be now sorted alphabetically.\n- It is now possible to adjust plot height.\n- Trace comparison statistics were expanded and made more clear.\n- Implemented retrieval of kernel symbol code on Linux.\n- Added support for multiple compression streams in trace files. This\n  effectively parallelizes both load and save operations.\n  - The default save setup is now set to Zstd level 3 with 4 compression\n    streams. This gives both faster compression time and smaller file size.\n- New users will be now eased into the profiler with a set of tutorial\n  achievements.\n- You can now set the timeline options default values in global settings.\n- Added a check for program memory being available before symbol retrieval\n  on Windows.\n\n\nv0.10.0 (2023-10-16)\n--------------------\n\n- Missed frames region of on-demand captures will be now ignored when\n  calculating trace time span, zone percentages, etc.\n  - Due to technicalities information about locks, frame statistics in trace\n    information window and csvexport utility still include the missed frames\n    time.\n- When source location dynamic zone coloring mode is enabled, collapsed\n  zones will be now gray-colored. Previously such regions falled back to\n  showing thread colors, which may have been confusing to users.\n- Vulkan contexts can now use VK_EXT_host_query_reset extension.\n- System power usage is now reported on x86 Linux.\n- Program name displayed in broadcast messages can be now changed with the\n  TracySetProgramName() macro.\n- Zone error markers (red regions and error bars) have been removed for\n  consistency with how all other profiling events are displayed.\n- It is now possible to export messages in the csvexport utility.\n- Major overhaul of how timeline items are processed in GUI.\n  - The process of figuring out what needs to be drawn on the timeline has\n    been heavily parallelized.\n  - The impact is especially visible with traces containing large amounts\n    of data. The framerate improvement in such cases can be ~30x.\n  - Consequently, the profiler GUI will now produce multi-core spikes when\n    rendering frames. This may have impact on the profiled application's\n    performance, if both the application and the profiler GUI are running\n    on the same machine. If this is a problem, you may consider the capture\n    utility instead, which is not affected by these changes. Alternatively,\n    you may disable parallelization in the options menu.\n  - Most of the timeline item logic has been written from scratch, which\n    may have taken care of some elusive bugs.\n- Added global configuration settings dialog. You can find it in the\n  profiler's about menu (the wrench icon in the welcome dialog).\n- List of found zones in the Find zone menu can be filtered by user text.\n- Fixed div-by-zero in cvsexport utility when there was only one zone of\n  a kind.\n- Fixed compatibility problems with FreeBSD.\n- Added support for dynamically loaded Vulkan symbols.\n- Trace description or filename is now displayed on the window title bar.\n- The csvexport utility will now export thread id data.\n- Improved compatibility with MSVC projects not defining NOMINMAX.\n- Improved compatibility with Linux setups targeting musl as libc.\n- Thread safety of Vulkan instrumentation has been reviewed.\n- D3D11 and D3D12 instrumentation was rewritten.\n- Added support for efficient profiling when running under rr, the record-\n  replaying debugger. This is enabled with TRACY_PATCHABLE_NOPSLEDS define.\n- History of viewed symbols is now preserved and you can go back to\n  previously displayed entries.\n\n\nv0.9.1 (2023-02-26)\n-------------------\n\n- Support for pre-0.8 traces has been dropped.\n- Profiled programs will ignore dlclose() calls.\n- Added warning when the profiler interface is run with privilege elevation.\n  Advice is given to instead run the client with admin rights.\n- Switched to official ZEN4 uarch data.\n- Handle cases when thread name is set, but not through Tracy facilities.\n- Allow customization of source location data through the following macros:\n  - TracyFunction - defaults to __FUNCTION__\n  - TracyFile - defaults to __FILE__\n  - TracyLine - defaults to __LINE__\n- Tracy on Linux now targets and requires Wayland by default.\n  - Please don't ask about window decorations on Gnome. Current behavior is\n    the intended behavior. Gnome does not want windows to have decorations,\n    and Tracy respects this choice. If you find this problematic, use a\n    desktop environment that actually listens to its users.\n  - Pass LEGACY=1 parameter to make, if you want to instead rely on the GLFW\n    library, like before.\n  - Other platforms still use GLFW.\n- Compare traces menu can now display source code differences between two\n  traces.\n- Assembly listings saved to files have been improved.\n  - Listings are now annotated with source line information.\n  - To improve compatibility with external tools comments are now prefixed\n    with '#' instead of ';'.\n- Histogram tooltip will now also show left/right counts.\n- Tracy now actively manages timeline vertical scroll offset in order to keep\n  the thread under the mouse cursor in the same place on screen.\n- Removed support for AT&T assembly syntax.\n- Tracy will not display notification if the file selector can't be used.\n  Possible reasons for failure include lack of xdg-desktop-portal.\n- Using the TRACY_NO_CRASH_HANDLER define will disable handling of\n  application crashes by the profiler.\n- Tracy will now query jump and call target addresses. This enables discovery\n  of target function names, even if such function has no samples and is not\n  present in any call stack.\n\n\nv0.9.0 (2022-10-26)\n-------------------\n\n- Attention! All the header and source files used for integrating Tracy with\n  applications were moved to the public/ directory. This will break your\n  integration!\n  - To fix this, update the source and include directories lists to point to\n    the new location.\n  - Tracy include files directly referenced by the client were moved to\n    tracy/ subdirectory, to facilitate setups which previously had Tracy\n    checkout parent directory in the include paths list (i.e. when you\n    included \"tracy/Tracy.hpp\").\n  - Previously, if you have included the Tracy checkout directory in your\n    project include directories list (i.e. you could include \"Tracy.hpp\"),\n    this could result in third-party library conflicts, e.g. with ImGui.\n    Such scenarios are no longer the case.\n- Tracy macros now require to be terminated with a semicolon.\n- The undocumented ___tracy_demangle() function API has been changed. Please\n  refer to the source code for further instructions.\n- The parameter callback and its registration macro have been extended to\n  include user data pointer. You will need to update your code accordingly.\n- Plots visualization has been improved.\n  - Each plot now has its own color, which can also be defined by the user.\n  - The area below the plot is now optionally filled with a color.\n  - Plots can now also be configured to be staircase instead of smooth. This\n    new setting is appropriate for many inputs where only discrete values\n    make sense, e.g. the memory allocation plot.\n  - The API for TracyPlotConfig() macro has been changed. Please refer to\n    the manual to see how you can fix this.\n- Some text labels in the user interface are now more easy to read.\n- The profiler will now instruct the user in the UI on what can be done, if\n  the send queue is slow to process (typically due to symbol resolution).\n- If a client with an incompatible protocol is discovered, Tracy will now\n  try to show which versions can be used to handle the connection.\n- Messages list in zone info window can now show messages exclusive to the\n  zone, filtering out the messages emitted from child zones.\n- Added capture of vertical synchronization timings on Linux.\n- The range of frame bar colors in the frames overview on top of the screen\n  can be now controlled with the \"Target FPS\" entry box in the options menu.\n  - The \"Draw frame targets\" option does not need to be selected.\n  - Previously the hardcoded FPS target thresholds were: 30, 60, 144 FPS.\n  - Currently the FPS target threshold is: half of target, target, twice the\n    target.\n- Reworked the way zone names are shortened.\n  - Previously shortening supported only namespace removal, in a way that\n    didn't consider function parameters or template arguments.\n    - Shortening to one-letter namespace chains is no longer available.\n  - The new shortening rules first perform normalization of the function name.\n    - The function const qualifier is removed.\n    - Common return types are removed.\n    - All function parameters and all template arguments are removed.\n  - The next steps consist of repeated removal of namespaces, starting with\n    the most outermost one.\n    - While the old process was all or nothing, the new implementation by\n      default will dynamically adjust to the space available, trying to show\n      the most context possible.\n  - It is also possible to completely disable shortening, or require that it\n    is always performed in full.\n  - Function name normalization is enabled by default, even if there is space\n    to show full function name. This can be changed in options.\n  - Previously shortening was only applied to the zone names displayed on the\n    timeline. Currently this process will also apply to all other places in\n    the UI where function names are displayed. However, in these cases the\n    function names will only be normalized.\n    - Full function names are still available as tooltips, or in fine print if\n      the normalized name is already displayed in a tooltip.\n    - This functionality is disabled if zone name shortening is disabled.\n- Added context menu for timeline labels. Currently the only option is to hide\n  the selected thread, plot, etc.\n- You can now provide custom source file contents through a profiler callback.\n- Exposed Tracy version to client applications (available through the\n  common/TracyVersion.hpp header file).\n- D3D12 instrumentation is now thread-safe.\n- Timeline can be now navigated with WASD keys.\n- Symbol file paths are now normalized on libbacktrace systems. For example,\n  instead of \"/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/12.2.0/../../../../\n  include/c++/12.2.0/bits/std_mutex.h\" Tracy will now report such file as\n  \"/usr/include/c++/12.2.0/bits/std_mutex.h\".\n- The import-chrome utility interprets Instant (`i`/`I`) events where the\n  `name` field contains the word `frame` as a frame event. The `name` is the\n  frame set name.\n- Frame data won't be displayed if there was no frame instrumentation in the\n  profiling session.\n  - Note that some automated functionality (e.g. vertical synchronization\n    capture) may automatically generate frame data, which will force frames to\n    be displayed.\n- Tracy threads will now be collapsed by default on the timeline.\n- Clicking on a local thread in the CPU data view will make the thread visible\n  and uncollapsed on the timeline.\n- Assembly view is now in color.\n- The profiler UI will no longer unnecessarily redraw the screen if nothing\n  was changed. This should have a profound impact on power usage.\n- Added microarchitecture data for Zen 4.\n- Implemented optional propagation of inline cost down the local call stack.\n  - This feature may be useful when trying to get a general outlook of the\n    cost at the top-level function in the symbol.\n  - It is possible to get nonsense data when this is enabled, for example\n    total cost exceeding 100%. This is by design.\n  - Assembly line costs are not affected.\n- Available clients now also broadcast their PID.\n- Reversed mouse button assignments for jumping to source / assembly line in\n  symbol view. The left mouse button will now focus the target line.\n- Assembly lines tooltip will now display local call stack of inline functions\n  (within the symbol).\n  - Right-clicking the source location entry in assembly line will show the\n    local call stack, along with source code preview of each entry and ability\n    to navigate to any selected inline function.\n- The profiler UI will now indicate that it needs attention if the window is\n  not focused and something interesting happens. For example when a connection\n  is established, or when a saved trace finishes loading, etc. How the\n  attention request is indicated depends on the operating system.\n- Clicking on the red microarchitecture icon in the symbol view assembly pane\n  will switch the selected microarchitecture to one the profiled application\n  was running on.\n- Removed option to display instruction latencies in a graphical form. Latency\n  data is still available in instruction tooltip.\n\n\nv0.8.2 (2022-06-28)\n-------------------\n\n- Added support for debuginfod debug information services. Note that\n  since this depends on proper system configuration, vendors providing\n  the debug information, and network retrieval, it is disabled by\n  default. To enable, compile the profiled application with the\n  TRACY_DEBUGINFOD define and link with libdebuginfod.\n- When Tracy server-side utilities are build with MSVC, the required\n  libraries will be now automatically retrieved and built with vcpkg.\n- Added microarchitecture data for: Bonnell, Airmont, Goldmont, Goldmont\n  Plus, Tremont.\n- Recognize additional CPUIDs of Zen 3, Alder Lake, Ice Lake\n  microarchitectures.\n- Assembly line width will be now extended, if needed. Previously the line\n  width was calculated for the initial layout and changing amount of\n  displayed data (especially listing the read/written registers) didn't\n  affect this, which may have made some lines partially unreadable.\n- Added ability to filter call stacks in memory tab by inactive allocations.\n  Filtering by inactive allocations helps to pinpoint wasteful allocations\n  in the program.\n- Plot graph will no longer display min/max values interpolated for\n  animation, but rather true values.\n- The CPU topology tree structure was replaced by a CPU schematic showing\n  the same thing in a more concise way.\n\n\nv0.8.1 (2022-04-21)\n-------------------\n\n- Support for pre-0.7 traces has been dropped.\n- Update utility can now scan for source files missing in the trace cache,\n  if the '-c' parameter is given. Found files will be added to the cache.\n- Added high-priority queue for fast queries to bypass slow symbol queries.\n- Fixed Android documentation to show how to enable context switch tracing.\n- Workaround MSVC 2015 stupidity which prevented compilation as C++11.\n- Added support for showing branch cost data for CPUs that don't report\n  branch retirement events (but do report branch misses).\n- The right-click context menu available for jump arrows in the symbol view\n  window will now additionally display jump context, i.e. jump sources and\n  jump target source code fragments.\n- Added freedesktop.org compliant desktop entry and MIME type definition.\n- The call stack column in list of messages will now be only displayed when\n  at least one message on the list has call stack data.\n- File dialogs on Unix will be now native to the desktop environment you are\n  using. Note that this relies on xdg-desktop-portal and dbus.\n\n\nv0.8.0 (2022-03-28)\n-------------------\n\n- Support for Cygwin has been dropped. It was not working for a very long\n  time and nobody had complained about it.\n- Mingw is deprecated due to lack of interest.\n- Added TRACY_NO_CALLSTACK_INLINES macro to disable inline functions\n  resolution in call stacks on Windows.\n- Improved function matching algorithm in compare traces view.\n- Added CMake integration.\n- Reworked rpmalloc initialization.\n- Fixed display of messages with newlines on messages list.\n- Excluded some uninteresting wrapper functions from call stacks (for\n  example SIMD pass-through intrinsics to the compiler built-ins).\n- Adjusted coloring of instruction hotness in symbol view.\n- Properly handle rare cases when sampling on Linux is momentary not able to\n  resolve time stamps.\n- Added Rocket Lake microarchitectural data.\n- Updated CPU identifier lists.\n- Implemented GPU timer overflow handling heuristics.\n- Assembly instructions are now assigned to inline symbols.\n  - You can not only see the assembly source file and line, but also the\n    originating function.\n  - If symbol view is restricted to a single inline function, all assembly\n    instructions not in this context will be dimmed out.\n  - Likewise, the navigation in assembly code will be limited just to the\n    inline context, if a single function is selected.\n- Kernel call stacks will be now properly captured and displayed in the\n  profiler. Kernel functions are marked with the red color.\n- The CPU hardware performance counters can be now sampled on Linux.\n  - Three inferred statistics are displayed for lines in both source and\n    assembly code in the symbol view window:\n    - Instructions executed per cycle.\n    - Branch miss rate.\n    - Cache miss rate.\n  - Instruction cost estimation method is no longer tied to software call\n    stack sampling.\n- The image name filter entry field is now providing a list of available\n  images.\n- Reentrant function calls may be now excluded from calculations in the\n  statistics view.\n- Crash handler is now properly removed during profiler destruction.\n- Repeatedly right-clicking on the same source line in the symbol view\n  window will now cycle through assembly blocks associated with this source\n  line.\n- Vulkan headers must be now explicitly included before including\n  TracyVulkan.hpp.\n- The capture utility may now limit capture time to a specified number of\n  seconds.\n- Fixed message thread assignment in the import-chrome utility.\n- Sampling data can be now also found in the find zone menu.\n- Instrumentation failures may now display their context, e.g. the zone text\n  that was to be set.\n- A warning is now displayed when sampling data is out-of-order.\n- Average value for plots can be now viewed.\n- Moved symbol resolution to a separate thread. Profiling will no longer be\n  stuck when there is a large number of symbols to resolve. This not only\n  improves user experience, but also prevents buildup of data (and memory\n  consumption) on the client side.\n- Android device name will be now reported.\n- Added support for capturing fibers.\n  - Fibers require additional processing, which has to be enabled by adding\n    the TRACY_FIBERS define on the client side.\n  - Client code requires additional instrumentation using the new macros\n    TracyFiberEnter and TracyFiberLeave (or the corresponding C API\n    variants).\n  - Fibers are represented in traces as separate threads, and are\n    distinguished by green color. Faux context switch regions are used to\n    indicate when a fiber is being run by the worker thread.\n- Continuous frame marks no longer need to be issued from a single thread.\n- Context switch call stacks are now captured on Windows and Linux.\n  - Hovering the context switch wait region will now display wait stack,\n    which may provide additional insight into why the switch happened.\n  - Wait stacks inspection can be performed in a new view.\n    - Stacks can be limited to certain threads and to a selected time range.\n    - Stacks are presented either as a sorted list, or as a bottom-up and\n      top-down trees.\n- Entry call stacks can be now also viewed as a bottom-up and top-down\n  trees.\n- Updated project build files to MSVC 2022.\n- Call stack tooltips now also show the executable image name.\n- Playback frames can be now changed by interacting with the frame image\n  slider using the mouse wheel.\n- Signal used to handle crashes on Linux can be now redefined.\n- Various DPI scaling improvements.\n- User interface can be now scaled in run time.\n- Symbol code retrieval now also supports kernel on Windows.\n- Added low-level C API interface for GPU zones.\n- Symbol child calls can be now listed.\n- Replaced \"restrict time\" in memory window with a proper time range limit.\n- Added Alder Lake microarchitectural data.\n- Added GPU zone statistics.\n- Universal Windows Platform support.\n- All call stack related functionality can be now disabled with the\n  TRACY_NO_CALLSTACK macro.\n- Added ability to add full-view annotations from the annotations list\n  window.\n\n\nv0.7.8 (2021-05-19)\n-------------------\n\n- Updated Zen 3 and added Tiger Lake microarchitectural data.\n- Manually disconnecting from the server will no longer display erroneous\n  warning message.\n- Added ability to display sample time spent in child function calls.\n- Fixed issue which may have prevented sampling on ARM64.\n- Added TRACY_NO_FRAME_IMAGE macro to disable frame image compression\n  thread.\n- Ctrl and shift keys will now modify mouse wheel zoom speed.\n- Improved user experience in the symbol view window.\n- Added support for Direct3D 11 instrumentation.\n- Vulkan contexts can be now calibrated on Linux.\n- Support loading zstd-compressed chrome traces.\n- Chrome traces with multiple PID entries (and possibly conflicting TIDs)\n  can be now imported.\n- Added support for custom source location tag (\"loc\") in chrome traces.\n- Sampling frequency can be now controlled using TRACY_SAMPLING_HZ macro.\n- Trace compression can be now selected when saving a trace.\n- If a trace cannot be saved, a failure dialog will be displayed.\n- Run-time memory usage of frame images can be reduced by calculating\n  a compression dictionary. This can be only performed when a trace is saved\n  or through the update utility.\n\n\nv0.7.7 (2021-04-01)\n-------------------\n\n- Linux crash handler will now also catch SIGABRT.\n- Fixed invalid name assignment to source files discovered client-side.\n- Added ability to check if a zone is active (which may be used to avoid\n  preparing zone text, etc., as it wouldn't be used anyway).\n- Improved sorting behavior of internal vectors.\n  - Some data will now be always properly displayed during live capture.\n    This was not particularly visible before, as it mainly concerns edge\n    cases.\n  - Sorting is performed only as needed.\n    - In case of plots the performance during live capture may be decreased,\n      as these were sorted with at least 0.25 second intervals before. Now\n      the sorting is performed every frame.\n    - Some other data, which previously was not sorted, is sorted now.\n    - In headless capture mode sorting will be only performed when the trace\n      is saved to disk.\n- Fixed some typos in macros.\n- Fixed handling of non-ANSI file names on Windows. You can now name your\n  traces 'ęśąćż.tracy' and it should work as intended. This is supported on\n  Windows 10 release 1903 and newer.\n- Fixed sending GPU context name in on-demand mode.\n- Fixed color channel order in ZoneColor() macro.\n- Handle failure state when a memory pointer allocation is reported twice,\n  without an intermediate free.\n- Renamed \"call stack parents\" to \"entry call stacks\".\n- Display number of entry call stacks in assembly line sample count tooltip.\n- Added tooltips with preview of source code in various places in the UI.\n\n\nv0.7.6 (2021-02-06)\n-------------------\n\n- Various fixes in build scripts.\n- Fixed a faulty rpmalloc initialization path when the first thing the\n  thread did was sending a message with call stack.\n- Added fallback timer define for various virtualized environments, which\n  may not be able to access the hardware timer registers. This will result\n  in usage of timer provided by the standard library, with reduced\n  resolution.\n- Further OpenCL improvements.\n- Updated libbacktrace.\n  - Adds Mach-O 64-bit FAT support.\n  - Fixes memory corruption when processing Mach-O data.\n  - Fixes missing matching entries during binary search.\n  - Adds support for MiniDebugInfo.\n  - Adds fallback to ELF symbol table if no debug info is available.\n  - Various other fixes.\n- Store build time of profiled program in captures.\n- GPU contexts can be now named.\n- Implemented client -> server source code transfer.\n\n\nv0.7.5 (2021-01-23)\n-------------------\n\n- More robust handling of system tracing on Android.\n- Added warning dialog when the connection is lost before all needed data\n  can be retrieved.\n- Fixed handling of NaN plot entries (by skipping them).\n- Dynamic zone colors are now supported through the ZoneColor() macro.\n- Fixed Arm machine code printout to match the one printed by objdump.\n- Fixed client memory corruption when using colored messages.\n- Switched to the next-gen ImGui table UI.\n  - Table columns can have their order rearranged, can be hidden, can be\n    sorted both in ascending and descending order (where appropriate).\n  - Table columns state is now preserved between runs.\n- Various fixes related to restricting listening to localhost.\n- Improved compatibility of ETW tracing with non-MSVC compilers.\n- Fixed Vulkan call stack transfer.\n- Added support for transient GPU zones (OpenGL, Vulkan, Direct3D 12).\n- OpenCL fixes for assert-less builds and non-active zones.\n- Added support for thread names and title bar description in traces\n  imported from chrome tracing format.\n\n\nv0.7.4 (2020-11-15)\n-------------------\n\n- Added support for user-provided locks to keep dbghelp calls thread-safe.\n- Call stacks can be now copied to clipboard.\n- Allow more control over which automated captures are performed.\n- Added textual descriptions for some assembly instructions.\n- Profiler memory usage is now also displayed as a percentage of available\n  physical memory.\n- Microarchitecture mismatch is now clearly displayed in the source view\n  window.\n- Added Zen 3 and Cascade Lake microarchitectural data.\n- Ghost zones are now supporting all zone coloring modes and namespace\n  shortening.\n- Extend C API to support memory pools.\n- Frame rate targets can be now visually represented on the timeline view.\n\n\nv0.7.3 (2020-10-06)\n-------------------\n\n- Properly support DPI scaling on Linux (requires GLFW 3.3).\n- Added early checks for output file validity in the capture utility.\n- Improvements to presence broadcast handling.\n- Custom zone colors can be optionally ignored.\n- Added support for tracking multiple memory pools.\n- Memory free failure dialog can now show call stack pointing to the failure\n  location.\n- Added support for Wayland on Linux.\n- If during the first 5 seconds of the trace there are no frames being\n  reported, the profiler will switch to following last 5 seconds of the\n  trace, instead of displaying three last frames.\n\n\nv0.7.2 (2020-09-14)\n-------------------\n\n- Note: the bitbucket repository is obsolete and will soon stop receiving\n  updates. Migrate to https://github.com/wolfpld/tracy, if you haven't\n  already.\n- The \"waiting for connection\" dialog no longer has \"cancel\" button. To\n  abort connection attempt just use the \"close window\" button.\n- Added update notification.\n- The most recent traced events can be now viewed regardless of timeline\n  zoom level.\n- Fixed going-to-line in source view (again).\n- Crash handling on client is now not performed, if there is no active\n  connection.\n- Added ability to listen only on IPv4 interfaces.\n\n\nv0.7.1 (2020-08-24)\n-------------------\n\n- Dropped support for pre-v0.6 traces.\n- Fixed regression on non-AVX2 CPUs.\n- Fixed incorrect calculation of some ghost zones.\n- Added list of cached source files.\n- Added import of plot data.\n- Secure versions of alloc/free macros.\n- Automated tracing of vertical synchronization on Windows.\n- Fixed attachment of postponed frame images.\n- Source location data can be now copied to clipboard from zone info window.\n- Zones in find zones menu can be now grouped by zone name.\n- Vulkan and D3D12 GPU contexts can be now calibrated.\n- Added CSV export utility.\n- \"Go to frame\" popup no longer has a dedicated button. To show it, click on\n  the frame counter.\n- Added macro for checking if profiler is connected.\n- Implemented optional data removal from traces in the update utility.\n- Allow manual management of profiler lifetime.\n- Adjusted priority of ETW threads to time critical.\n- Annotations can be now freely adjusted on the timeline.\n- Limiting time range for find zone functionality has been significantly\n  improved.\n- Added time range limits for statistics and symbol view.\n- Implemented call stack sampling on Linux (including Android).\n- Exact time from start of profiling session can be now viewed by hovering\n  the mouse over the time scale.\n- Code transfer can be now compiled-out.\n- Added support for zone markup in unloadable modules.\n- Added image name filter to sampling statistics results window.\n\n\nv0.7 (2020-06-11)\n-----------------\n\nThis is the last release which will be able to load pre-v0.6 traces. Use the\nupdate utility to convert your old traces now!\n\n- chrome:tracing importer now imports zone metadata from \"args\" key.\n- Added display of statistical mode to find zone menu.\n- Automatic stack sampling is now available on windows.\n- Properly handle tracing on long-running systems.\n- Message list entries can now show associated frame image.\n- Call stack window will now display module names.\n- Symbol location in call stack window may now also display symbol address.\n- Statistics menu can now be used to display call stack sampling data or\n  list available symbols.\n- All call paths leading to the sampled instruction in a call stack can be\n  now displayed.\n- Frame image compression ratio (lossless in-memory compression, not taking\n  into account DXT compression) is displayed in playback window.\n- Allow reconnection straight from the discard data dialog.\n- Added ability to set custom names for locks.\n- Improved handling of network ports.\n- Added time percentage display to instrumentation statistics.\n- Display of ghost zones (generated from automated call stack sampling).\n- Notify when empty labels display is enabled.\n- Small fragments of executable code will be now sent from client to server.\n- Added notification about query backlog.\n- Fixed performance problem with query backlog.\n- Display number of in-flight queries, in addition to query backlog.\n- Improved failure reports.\n- The capture utility will connect to localhost by default.\n- Added optional support for QPC timer on windows.\n- Complete rewrite of source file viewer. It is now 100% reliable when going\n  to a source location.\n- Symbol source view was added.\n  - Extension of source file viewer.\n  - Can display source file, assembly view, or both at the same time.\n  - May include display of statistical profiling data.\n  - Ability to switch between source files which were used to build the\n    symbol.\n  - Ability to switch between inlined functions which are incorporated into\n    the symbol.\n  - Graphical representation of control flow in program.\n  - Display of micro-architectural data for each assembly instruction.\n  - Tracking register dependencies between assembly instructions.\n  - Disassembly may be saved to a file, in order to be processed by external\n    tools.\n- If the default listening port is occupied, profiler will now try listening\n  on other ports.\n- Added possibility to perform source file names substitution.\n- Profiler windows can be now docked.\n- CPU usage tooltip now displays a list of running threads.\n- Added possibility to filter discovered clients list.\n- Source files are now cached during capture.\n- Profiler will now display a popup when application crashes.\n- Added ability to send simple integral values as extra payload for zones.\n- Per-frame zone times on the frames plot can now display self time.\n- Ability to bind only on localhost interface.\n- OpenCL profiling.\n- Direct3D 12 profiling.\n\n\nv0.6.3 (2020-02-13)\n-------------------\n\n- Fixed performance issues with loading saved traces on Ryzen CPUs.\n- Profiler window contents are now properly updated during window resize.\n- Improved tid to pid mapping on windows.\n- Zero length and unfinished zones are no longer taken into account for\n  statistics.\n- Build files for shared library are now available (experimental).\n- GPU zones now also have \"active\" parameter.\n- Further reduction of memory usage and on-disk trace size.\n- Replaced ska::flat_hash_map with robin-hood-hashing.\n- Speed-up rendering of long lists of items.\n- Exact event time is displayed in some places in the UI.\n- Memory allocation lists can now be sorted.\n- Added display of trace file compression ratio.\n- Optional Zstd compression of trace files.\n- Frame images are now internally compressed using Zstd (instead of LZ4).\n- Fix display of continuous frame set tooltips.\n\n\nv0.6.2 (2019-12-30)\n-------------------\n\n- Improved call stack decoding on OSX.\n- Collection of CPU topology data.\n- C API now supports allocated source locations.\n- Added chrome:tracing importer.\n- Allow merging of ZoneText() strings.\n- Time distribution can now show both exclusive and inclusive times.\n- Display proper value of selection time in find zone menu.\n- Implemented limiting find zone search to a specified time range.\n- Highlight hovered zone from find zone menu zone list on the histogram.\n- Allow copying user data directory location to the clipboard.\n\n\nv0.6.1 (2019-11-28)\n-------------------\n\n- Dropped support for pre-v0.5 traces.\n- Improve BSD support.\n- GPU zone CPU thread highlight will now highlight whole thread, not only\n  the thread name.\n- Added CPU thread highlight for CPU data items.\n- Client parameters may be now set from the server.\n- Minor UI fixes.\n\n\nv0.6 (2019-11-17)\n-----------------\n\nThis is the last release which will be able to load pre-v0.5 traces. Use the\nupdate utility to convert your old traces now!\n\n- Dropped support for pre-v0.4 traces.\n- Major memory usage decrease.\n- Significant network bandwidth decrease.\n- Implemented context switch capture on selected platforms.\n  - Zone timings in various UI places can now take into account only the\n    time when the thread was executing.\n  - Zone information window can now display regions in which thread was\n    suspended by the operating system.\n  - CPUs on which the zone was running are enumerated.\n  - Thread activity regions can be graphed on the timeline.\n- API breakage: SetThreadName() now only works on current thread.\n- Fixed thread name retrieval after thread is destroyed.\n- Added number of CPU cores to host info.\n- Limited number of possible source locations to 64K.\n- Limited supported capture length to 1.6 days.\n- CPU cores are now displayed on the timeline.\n  - Thread execution workload is displayed, including threads from external\n    programs.\n  - Thread migrations across CPU cores can be graphed.\n  - System-wide workload distribution is now plotted on the timeline.\n- Added \"CPU data\" window showing programs competing for CPU during the\n  capture.\n- Switched to using native thread identifiers (relatively small numbers), as\n  opposed to pthreads identifiers, which in reality were pointers.\n- Improved thread name discovery if context switch capture is enabled.\n- Per-trace state is now preserved between profiling sessions:\n  - Timeline view position.\n  - Item categories draw/hide settings.\n- Timeline zones will be highlighted using a different color, when a\n  matching time range is selected on histogram.\n- Per-frame zone times are now displayed on the frames plot when a zone is\n  selected in the find zone menu.\n- Zone color is now displayed in zone information window.\n- Zone colors can now be determined basing on depth and thread or source\n  location.\n- Thread colors are displayed across the profiler application.\n- Frame times can be now compared.\n- Expose more lock handling functionality.\n- Network port can be now specified by the user.\n- Proper handling of multithreaded Vulkan code.\n- Added extreme compression level in update utility.\n- Added time distribution data in the zone information window.\n- Trace file name is now displayed in trace information window.\n- Annotations can be now added to the timeline.\n- Server now performs network data retrieval and decompression on a dedicated\n  thread.\n- Added examples of Tracy integration.\n- Allow grouping of zones in the find zone menu by zone parent or with no\n  grouping.\n- Zone list in the statistics window can be now filtered.\n- Implemented configuration of plots.\n- Messages can now collect call stacks.\n\n\nv0.5 (2019-08-10)\n-----------------\n\nThis is the last release which will be able to load pre-v0.4 traces. Use the\nupdate utility to convert your old traces now!\n\n- Major decrease of trace dump file size.\n- Major optimizations across the board.\n- Vcpkg is now used for library management on Windows.\n- Display dump file size change in the update utility.\n- Added notification area.\n  - Display trace loading time.\n  - Display background processing tasks after trace is loaded.\n  - Display trace save notification.\n  - Show crash icon, if there was a crash.\n- Added C API.\n- Profiling session may now gracefully terminate, due to incorrect\n  instrumentation. A popup with termination reason will be displayed.\n- Call stack improvements.\n  - Call stack frames now have a proper source file and file line\n    information on Linux.\n  - Single call stack frame may now have multiple entries, representing\n    inlined function calls.\n  - Call stack grouping in the find zone menu now has a special display\n    mode.\n  - Call stack memory allocations tree improvements:\n    - Add top-down variant to complement the previously available bottom-up\n      one.\n    - Add ability to group tree nodes by function name.\n    - Allow restricting tree to display only active allocations.\n  - Added support for Lua call stack capture.\n- Self time of zones may be now displayed in the find zone menu.\n- Added ability to disconnect from a client.\n- Find zone groups can now be sorted by mean time per call.\n- Zones displayed in the find zone menu can be now grouped by order of\n  appearance, execution time or name.\n- Time is now displayed without trailing fractional zeros (e.g. \"2.5 ms\"\n  instead of \"2.50 ms\").\n- Child zones displayed in zone info window can be now grouped by source\n  location.\n- Selected or hovered lock is now highlighted on the timeline.\n- Locks are now grouped into single and multithreaded (contended and\n  uncontended) in the options menu locks list.\n- On broken platforms the profiler can now be initialized as needed (and\n  possible), taking a performance and functionality hit.\n- User experience improvements in the graphical profiler.\n  - Thread position and height is now animated, to eliminate flickering that\n    was happening when depth of displayed zones was changing.\n  - Zooming in/out using the mouse wheel is now animated.\n  - Plot range adjustment is now animated.\n  - Various other UI improvements.\n- System CPU usage is now being monitored.\n- Threads that have nothing to display in the current view are now hidden by\n  default.\n- Dimmed-out the timeline outside the profiling area.\n- Source file view can now be opened also from statistics menu.\n- Display standard deviation in find zone and compare traces menus.\n- Display zone messages in zone information window.\n- Display order of threads can be changed in the options menu.\n- Prevent deadlocks by querying socket send buffer size.\n- Frame set statistics can be now limited to frames visible on the screen.\n- Messages can be now colored.\n- Zone selection in compare traces menu can be now linked to the other\n  trace.\n- Added support for frame image (screen shot) storage.\n- Implemented ability to cut off outliers on histograms.\n- Zone or frame that is currently hovered by the mouse cursor will be\n  highlighted on the histogram.\n- Server now displays available clients in the local network.\n- Source code whitespace visibility can now be enabled or disabled.\n- Profiler will now check if proper timer readings can be performed on\n  x86/x64.\n- Application can now log app-specific information, similarly to how the\n  host info reports system information.\n- Message list will automatically scroll down to the most recent message.\n  - Feature will disable when the list is scrolled by user.\n  - To re-enable, scroll to the bottom of the list.\n- Message list can be now filtered.\n- A notification popup will be displayed during trace cleanup.\n- Source file view won't be available if a source file is newer than the\n  capture.\n- Added ability to set custom trace descriptions.\n- Added frame time target lines.\n- FPS counts are now displayed next to frame times.\n- GPU drift value can be now automatically measured.\n- Connection window is now a popup hidden under a dedicated button.\n\n\nv0.4.1 (2018-12-30)\n-------------------\n\n- Active frame set can be now switched by clicking on a frame set on the\n  timeline.\n- Add ability to go to a specified frame.\n- Most commonly used addresses can be now selected from the drop-down menu.\n- Fixed corner case problem with profiler initialization on Windows.\n- Added third state (stopped) to the pause/resume button. It will be used\n  after the connection to the client is terminated.\n- Active trace can be discarded.\n- Call stack capture may be forced through TRACY_CALLSTACK define.\n- Lock info window has been added.\n- Time of lock creation and termination is now being tracked.\n- Menu bar buttons are now toggles that can also close their corresponding\n  windows.\n- Find zone and compare menu improvements.\n  - Ability to ignore case during search.\n  - Pressing enter key will now start search, just like pressing the \"find\"\n    button.\n  - Using the ^F keyboard shortcut will open the find zone menu and focus\n    the input box.\n- Added ability to automatically connect to an IP address in the graphical\n  profiler application (use \"-a address\" argument to enable).\n- Pressing enter key after entering client address in the welcome dialog\n  will now automatically begin connection process.\n\n\nv0.4 (2018-10-09)\n-----------------\n\n- Renamed \"standalone\" utility to \"profiler\".\n- Added trace update utility, which will convert files saved in previous\n  versions of tracy to be up-to-date.\n  - Optional high compression (--hc) mode is available that will increase\n    the compression level, at the cost of considerably longer compression\n    time.\n- Fix regression causing varying size of profiler window for different\n  captures.\n- Added support for on-demand tracing.\n  - If a client application is compiled with the TRACY_ON_DEMAND macro\n    defined, tracing will not begin until a connection to server is\n    established.\n  - Since data is not fully captured in this mode, the resulting trace will\n    be less precise, until application state is appropriately reset. For\n    example, locks need to be fully released, zone stacks need to be\n    flushed. This is an automatic process.\n  - All tracing macros are able to work in the on-demand mode.\n- Improved compatibility with various system setups.\n- Aside from using TRACY_NO_EXIT define you can also set the same-named\n  environmental variable to 1 to get the same effect.\n- Added ability to show/hide all threads and plots.\n- Performance improvements.\n- Improvements to memory data presentation.\n  - Added memory allocation info window.\n  - Selecting memory allocation on a plot will draw time range of the\n    allocation.\n  - Middle clicking on an memory allocation address (or on a button in\n    memory allocation info window) will zoom the view to the allocation\n    range.\n- Find zone menu improvements:\n  - Zones can be now also grouped by call stacks.\n  - Zone groups can be now also sorted by time spend in each zone.\n  - Zone groups list now displays group times.\n  - Average and median zone times are now displayed on the histogram.\n  - Selected zones will be highlighted on the timeline view.\n- Added named versions of tracing macros that allow specifying scoped\n  variable name.\n- The main profiler window is now kept at the bottom of windows stack.\n- The \"profiler\" utility will now use a custom embedded font.\n- Microseconds are now displayed using correct symbol ('μ' instead of 'u').\n- Unix builds of the \"profiler\" utility will now ask for a file name when\n  saving a trace.\n- Progress popup is now displayed when a trace file is loading.\n- Zones that share source location with a zone that is hovered over are now\n  highlighted.\n- Added ability to zoom-in to a selection range made using middle mouse\n  button.\n  - Holding the ctrl key will switch to zoom-out mode.\n- The \"profiler\" utility will use less resources when its window is\n  out-of-focus or minimized.\n- Added support for cross-DLL profiling.\n- Items in options menu (locks, threads, etc.) are now described with number\n  of events.\n  - Source location of lock declaration is also provided.\n- Created an extensive user manual for the profiler.\n- Added ability to capture multiple frame sets.\n  - Viewer will display multiple frame ranges at once.\n  - Only one frame set can be active at once. The selected one is used for\n    the frame navigation graph, frame navigation buttons and drawing frame\n    separators.\n  - The active frame set will be highlighted, and the rest will be dimmed\n    out.\n  - Frames can now also be discontinuous.\n- Frames and zones too small to be displayed will be marked with a zig-zag\n  pattern.\n- General improvements to message list and message markers.\n  - Hovering over message on a list will highlight its marker (previously it\n    only worked the other way).\n  - Left clicking on a message marker will focus the message list on the\n    selected message.\n  - Middle clicking on a message marker will center it on screen.\n- Added trace information window.\n  - This includes frame time statistics and histogram.\n- Displayed memory sizes are now properly formatted.\n- Added call stack tree for memory allocations.\n  - You can display allocations list for each call stack tree entry.\n- The source code of the profiled application may now be viewed in the\n  profiler.\n  - BIG FAT WARNING: The actual profiled program source code is not known to\n    the profiler. It only checks if there is a file on your disk that\n    matches the file name of the captured source location. Even if the file\n    is displayed, it may be out of date.\n  - CPU and GPU zones will have \"Source\" button, if source file can be\n    opened.\n  - Source files for call stack traces can be opened by right-clicking on\n    the file name. Since in this case there is no button that can be hidden,\n    a small animation will be played to notify user if the source cannot be\n    opened.\n- The main profiler view will now occupy the whole window. Previous behavior\n  is still available for embedded use cases.\n- Many button labels are now accompanied by icons.\n- Fonts should now be less blurry.\n- \"Go to parent\" button in zone info window won't be displayed if there is\n  no parent to go to.\n- Improvements to the compare traces menu.\n  - There are now colored markers to make it easier to distinguish \"this\" and\n    \"external\" traces.\n  - The amount of saved time is now displayed (a difference between total\n    run times of both traces).\n- Tracy will now collect host information, like CPU name, amount of system\n  memory, etc.\n- Windows builds of the \"profiler\" utility will perform a check of supported\n  CPU instruction set and match it against the one required by the binary\n  (by default AVX2 is used). If the program cannot be executed on the\n  processor, a message dialog with workaround instructions will be\n  displayed.\n- Tracy can intercept crashes and finish sending data from a dying process.\n  - Currently this is only implemented on Windows, Linux and Android.\n- Call stack window may now display addresses of the frames, instead of\n  source file locations.\n- Memory events will now properly register their thread.\n- Profiler settings are now stored in a persistent location.\n  - On Windows settings are stored in %APPDATA%/tracy.\n  - On other platforms settings are stored in $XDG_CONFIG_HOME/tracy or\n    $HOME/.config/tracy, if the variable is not set.\n  - The main profiler window position, size and maximized state are saved\n    and restored.\n  - The size and position of internal windows now doesn't depend on the\n    runtime directory of the profiler executable.\n- Added connection handshake.\n  - Server won't be able to connect to client if there's a protocol version\n    mismatch.\n  - Client not in on-demand mode will refuse connections after the first\n    connection was made and the initial event buffers were cleared.\n- A single server will no longer try to connect to multiple clients.\n- The capture utility will now display time span of the ongoing capture.\n\n\nv0.3 (2018-07-03)\n-----------------\n\n- Breaking change: the format of trace files has changed.\n  - Previous tracy version will crash when trying to open new traces.\n  - Loading of traces saved by previous version is supported.\n  - Tracy will no longer crash when trying to load traces saved by future\n    versions. Instead, a dialog advising to update will be displayed.\n  - Tracy will no longer crash in most cases when trying to open files that\n    are not traces. Some crashes are still possible, due to support of old,\n    header-less traces.\n- Ability to track every memory allocation in profiled program.\n  - Allocation event queuing must be done in order, which requires exclusive\n    access to the serialized queue on the client side. This has no effect on\n    the rest of events, which are stored in a concurrent queue, as before.\n  - You can search for a memory address and see where it was allocated, for\n    how long, etc. This lists all matching allocations since the program was\n    started.\n  - All active (non-freed) allocations may be listed. This shows the current\n    memory state by default, but can go back to any point in time.\n  - Graphical representation of process memory map may be displayed. New\n    allocations/frees are displayed in a bright color and fade out with\n    time. This feature also can look back in time.\n  - Memory usage plot is automatically generated.\n  - Basic allocation information is displayed in memory plot tooltips.\n  - A summary of memory events within a zone (and its children) is now\n    printed in zone info window.\n- Support loading profile dumps with no memory allocation data (generated by\n  v0.2).\n- Added ability to display global statistics of a selected zone from the\n  zone info window.\n- Fixed regression with lock announce processing that appeared during\n  worker/viewer split.\n- Allow selecting/unselecting all locks for display.\n- Performance improvements.\n- Don't save unneeded lock information in trace file.\n- Don't save thrash in message list data.\n- Allow expanding view span up to one hour, instead of one minute.\n- Added trace comparison window.\n  - An external trace has to be loaded first.\n  - Zone query in both traces (current and external).\n  - Both results are overlaid on the same histogram.\n  - Graphs can be adjusted as-if there was the same number of zones\n    collected.\n- Read time directly from a hardware register on ARM/ARM64, if possible.\n  - User-space access to the timer needs to be enabled in the kernel, so\n    tracy will perform run-time checks and fallback to the old method if the\n    check fails.\n- Prevent connections in a TIME-WAIT state from blocking new listen\n  connections.\n- Display y-range of plots.\n- Added ability to unload traces loaded from files. To do so close the main\n  profiler window. You will return to the connect/open selection dialog.\n  Live captures cannot be terminated this way.\n- Zones previously displayed in zone info window are remembered and you can\n  go back to them. Closing the zone info window or switching between CPU and\n  GPU zones will clear the memory.\n- Improved message list window.\n  - Messages are now displayed in columns.\n  - Originating thread of each message is now included in the list.\n  - Messages can be filtered by the originating thread.\n- You can now navigate to next and previous frame.\n- Zone statistics can be now displayed using only self times.\n- Support for tracing GPU events using Vulkan.\n- Timeline will now display \"OpenGL context\" or \"Vulkan context\" instead of\n  \"GPU context\".\n- Fixed regression causing invalid display of GPU context appearance time.\n- Fixed regression causing invalid reporting of an active CPU in zone end\n  events, if MSVC rdtscp optimization was not enabled.\n- Ability to collect true call stacks.\n  - Supported on Windows, Linux, Android.\n  - The following events can collect call stacks:\n    - Memory alloc/free.\n    - Zone begin.\n    - GPU zone begin.\n  - Zone stack trace now also displays frames from a real call trace.\n  - On Linux call stack frame name resolution requires a call to dladdr,\n    which in turn requires linking with libdl.\n- Allow manual entry of GPU time drift value.\n- Unix build system no longer shares object files between different build\n  units.\n  - Fixes inability to build debug and release versions of a single utility\n    without \"make clean\".\n  - Fixes incompatibility between \"standalone\" and \"capture\" utilities due\n    to different set of used feature flags.\n- On Windows \"standalone\" utility now adapts to system DPI setting.\n- Optional per-call zone naming.\n\n\nv0.2 (2018-04-05)\n-----------------\n\n- Fixed broken TRACY_NO_EXIT behavior.\n- Visual refresh (new color scheme).\n- Added optional support for live in-depth zone analysis.\n  - Ability to search for zones matching a query.\n  - Histogram of zone time spans.\n  - List occurrences of a zone, grouped by thread, or by user text.\n  - Zone groups can be selected and highlighted on histogram graph.\n  - Support for linear and logarithmic display of time and values.\n  - Histogram bins can show zone counts or total execution time.\n  - Listed zones can be narrowed down by data range selection on histogram.\n- Separation of server data handling code from the visualisation.\n- Implementation of a command line capture utility.\n- Support libraries have been updated.\n- Fixed an issue that prevented de-duplication of source location payloads.\n- Fixed an issue that prevented the ability to disable threads in settings\n  menu, if two threads had the same name.\n- Performance optimizations.\n- Visual clean up of the settings menu.\n- Zone info windows improvements.\n  - Visual improvements to zone info window child list.\n  - Zone info windows now show zone thread.\n  - Display zone stack trace.\n- Hide pause/resume button if there's no data connection (i.e. trace was\n  loaded from file).\n- Source location statistics view has been added.\n- Fixed crash when a saved trace was opened, but no trace capture session\n  was performed before.\n- Standalone server will now open trace files passed as an argument to the\n  executable.\n- Fix possible crash in SetThreadName, that could happen if TLS init was\n  delayed until first use of thread local variable.\n- Store full thread name if pthreads (with 15 character name limit) are\n  used.\n- Properly handle unaligned memory access (no performance impact).\n- Fixed broken lock identifiers in try_lock().\n\n\nv0.1 (2017-12-18)\n-----------------\n\n- Initial release.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.958984375,
          "content": "# Tracy Profiler\n\n[![Sponsor](.github/sponsor.png)](https://github.com/sponsors/wolfpld/)\n\n### A real time, nanosecond resolution, remote telemetry, hybrid frame and sampling profiler for games and other applications.\n\nTracy supports profiling CPU (Direct support is provided for C, C++, Lua, Python and Fortran integration. At the same time, third-party bindings to many other languages exist on the internet, such as [Rust](https://github.com/nagisa/rust_tracy_client), [Zig](https://github.com/nektro/zig-tracy), [C#](https://github.com/clibequilibrium/Tracy-CSharp), [OCaml](https://github.com/imandra-ai/ocaml-tracy), [Odin](https://github.com/oskarnp/odin-tracy), etc.), GPU (All major graphic APIs: OpenGL, Vulkan, Direct3D 11/12, Metal, OpenCL.), memory allocations, locks, context switches, automatically attribute screenshots to captured frames, and much more.\n\n- [Documentation](https://github.com/wolfpld/tracy/releases/latest/download/tracy.pdf) for usage and build process instructions\n- [Releases](https://github.com/wolfpld/tracy/releases) containing the documentation (`tracy.pdf`) and compiled Windows x64 binaries (`Tracy-<version>.7z`) as assets\n- [Changelog](NEWS)\n- [Interactive demo](https://tracy.nereid.pl/)\n\n![](doc/profiler.png)\n\n![](doc/profiler2.png)\n\n![](doc/profiler3.png)\n\n[An Introduction to Tracy Profiler in C++ - Marcos Slomp - CppCon 2023](https://youtu.be/ghXk3Bk5F2U?t=37)\n\n[Introduction to Tracy Profiler v0.2](https://www.youtube.com/watch?v=fB5B46lbapc)  \n[New features in Tracy Profiler v0.3](https://www.youtube.com/watch?v=3SXpDpDh2Uo)  \n[New features in Tracy Profiler v0.4](https://www.youtube.com/watch?v=eAkgkaO8B9o)  \n[New features in Tracy Profiler v0.5](https://www.youtube.com/watch?v=P6E7qLMmzTQ)  \n[New features in Tracy Profiler v0.6](https://www.youtube.com/watch?v=uJkrFgriuOo)  \n[New features in Tracy Profiler v0.7](https://www.youtube.com/watch?v=_hU7vw00MZ4)  \n[New features in Tracy Profiler v0.8](https://www.youtube.com/watch?v=30wpRpHTTag)\n"
        },
        {
          "name": "capture",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "csvexport",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "dtl",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "getopt",
          "type": "tree",
          "content": null
        },
        {
          "name": "icon",
          "type": "tree",
          "content": null
        },
        {
          "name": "import",
          "type": "tree",
          "content": null
        },
        {
          "name": "manual",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 5.958984375,
          "content": "project('tracy', ['cpp'], version: '0.11.1', meson_version: '>=1.3.0', default_options : ['cpp_std=c++11'])\n\n# internal compiler flags\ntracy_compile_args = []\n\n# compiler flags shared between the capture library itself and the code using it\ntracy_common_args = []\n\n# dependencies that will be propagated to the users of the capture library\ntracy_public_deps = []\n\nif get_option('tracy_enable')\n  tracy_common_args += ['-DTRACY_ENABLE']\nendif\n\nif get_option('on_demand')\n  tracy_common_args += ['-DTRACY_ON_DEMAND']\nendif\n\nif get_option('callstack')\n  tracy_common_args += ['-DTRACY_CALLSTACK']\nendif\n\nif get_option('no_callstack')\n  tracy_common_args += ['-DTRACY_NO_CALLSTACK']\nendif\n\nif get_option('no_callstack_inlines')\n  tracy_common_args += ['-DTRACY_NO_CALLSTACK_INLINES']\nendif\n\nif get_option('only_localhost')\n  tracy_common_args += ['-DTRACY_ONLY_LOCALHOST']\nendif\n\nif get_option('no_broadcast')\n  tracy_common_args += ['-DTRACY_NO_BROADCAST']\nendif\n\nif get_option('only_ipv4')\n  tracy_common_args += ['-DTRACY_ONLY_IPV4']\nendif\n\nif get_option('no_code_transfer')\n  tracy_common_args += ['-DTRACY_NO_CODE_TRANSFER']\nendif\n\nif get_option('no_context_switch')\n  tracy_common_args += ['-DTRACY_NO_CONTEXT_SWITCH']\nendif\n\nif get_option('no_exit')\n  tracy_common_args += ['-DTRACY_NO_EXIT']\nendif\n\nif get_option('no_sampling')\n  tracy_common_args += ['-DTRACY_NO_SAMPLING']\nendif\n\nif get_option('no_verify')\n  tracy_common_args += ['-DTRACY_NO_VERIFY']\nendif\n\nif get_option('no_vsync_capture')\n  tracy_common_args += ['-DTRACY_NO_VSYNC_CAPTURE']\nendif\n\nif get_option('no_frame_image')\n  tracy_common_args += ['-DTRACY_NO_FRAME_IMAGE']\nendif\n\nif get_option('no_system_tracing')\n  tracy_common_args += ['-DTRACY_NO_SYSTEM_TRACING']\nendif\n\nif get_option('patchable_nopsleds')\n  tracy_common_args += ['-DTRACY_PATCHABLE_NOPSLEDS']\nendif\n\nif get_option('delayed_init')\n  tracy_common_args += ['-DTRACY_DELAYED_INIT']\nendif\n\nif get_option('manual_lifetime')\n  tracy_common_args += ['-DTRACY_MANUAL_LIFETIME']\nendif\n\nif get_option('fibers')\n  tracy_common_args += ['-DTRACY_FIBERS']\nendif\n\nif get_option('timer_fallback')\n  tracy_common_args += ['-DTRACY_TIMER_FALLBACK']\nendif\n\nif get_option('no_crash_handler')\n  tracy_common_args += ['-DTRACY_NO_CRASH_HANDLER']\nendif\n\nif get_option('libunwind_backtrace')\n  tracy_common_args += ['-DTRACY_LIBUNWIND_BACKTRACE']\n  tracy_public_deps += dependency('libunwind')\nendif\n\nif get_option('symbol_offline_resolve')\n  tracy_compile_args += ['-DTRACY_SYMBOL_OFFLINE_RESOLVE']\nendif\n\nif get_option('libbacktrace_elf_dynload_support')\n  tracy_compile_args += ['-DTRACY_LIBBACKTRACE_ELF_DYNLOAD_SUPPORT']\nendif\n\nif get_option('verbose')\n  tracy_common_args += ['-DTRACY_VERBOSE']\nendif\n\nif get_option('debuginfod')\n  tracy_common_args += ['-DTRACY_DEBUGINFOD']\n  tracy_public_deps += dependency('libdebuginfod')\nendif\n\ntracy_shared_libs = get_option('default_library') == 'shared'\n\nif tracy_shared_libs\n  tracy_compile_args += ['-DTRACY_EXPORTS']\nendif\n\nif host_machine.system() == 'windows'\n  tracy_compile_args += ['-DWINVER=0x0601', '-D_WIN32_WINNT=0x0601']\nendif\n\nincludes = [\n    'public/tracy/TracyC.h',\n    'public/tracy/Tracy.hpp',\n    'public/tracy/TracyD3D11.hpp',\n    'public/tracy/TracyD3D12.hpp',\n    'public/tracy/TracyLua.hpp',\n    'public/tracy/TracyOpenCL.hpp',\n    'public/tracy/TracyOpenGL.hpp',\n    'public/tracy/TracyVulkan.hpp'\n]\n\nclient_includes = [\n    'public/client/tracy_concurrentqueue.h',\n    'public/client/tracy_rpmalloc.hpp',\n    'public/client/tracy_SPSCQueue.h',\n    'public/client/TracyArmCpuTable.hpp',\n    'public/client/TracyCallstack.h',\n    'public/client/TracyCallstack.hpp',\n    'public/client/TracyDebug.hpp',\n    'public/client/TracyDxt1.hpp',\n    'public/client/TracyFastVector.hpp',\n    'public/client/TracyLock.hpp',\n    'public/client/TracyProfiler.hpp',\n    'public/client/TracyRingBuffer.hpp',\n    'public/client/TracyScoped.hpp',\n    'public/client/TracyStringHelpers.hpp',\n    'public/client/TracySysPower.hpp',\n    'public/client/TracySysTime.hpp',\n    'public/client/TracySysTrace.hpp',\n    'public/client/TracyThread.hpp'\n]\n\ncommon_includes = [\n    'public/common/tracy_lz4.hpp',\n    'public/common/tracy_lz4hc.hpp',\n    'public/common/TracyAlign.hpp',\n    'public/common/TracyAlloc.hpp',\n    'public/common/TracyApi.h',\n    'public/common/TracyColor.hpp',\n    'public/common/TracyForceInline.hpp',\n    'public/common/TracyMutex.hpp',\n    'public/common/TracyProtocol.hpp',\n    'public/common/TracyQueue.hpp',\n    'public/common/TracySocket.hpp',\n    'public/common/TracyStackFrames.hpp',\n    'public/common/TracySystem.hpp',\n    'public/common/TracyUwp.hpp',\n    'public/common/TracyYield.hpp'\n]\n\ntracy_header_files = common_includes + client_includes + includes\n\ntracy_src = [\n    'public/TracyClient.cpp'\n]\n\ntracy_public_include_dirs = include_directories('public')\n\ncompiler = meson.get_compiler('cpp')\noverride_options = []\n# MSVC c++ lib does not work properly with C++11 and compilation may fail\nif compiler.has_define('_MSC_VER') and get_option('cpp_std') == 'c++11'\n  override_options += 'cpp_std=c++14'\nendif\n\ntracy_compile_args += tracy_common_args\n\ntracy_deps = [dependency('threads')] + tracy_public_deps\n\ntracy = library('tracy', tracy_src, tracy_header_files,\n    dependencies        : tracy_deps,\n    include_directories : tracy_public_include_dirs,\n    cpp_args            : tracy_compile_args,\n    override_options    : override_options,\n    install             : true)\n\ninstall_headers(includes, subdir : 'tracy')\ninstall_headers(common_includes, subdir : 'tracy/common')\ninstall_headers(client_includes, subdir : 'tracy/client')\n\ntracy_dep_compile_args = tracy_common_args\n\nif tracy_shared_libs\n  tracy_dep_compile_args += [ '-DTRACY_IMPORTS' ]\nendif\n\npkg = import('pkgconfig')\npkg.generate(tracy,\n  extra_cflags : tracy_dep_compile_args,\n  requires     : tracy_public_deps)\n\ntracy_dep = declare_dependency(\n    compile_args        : tracy_dep_compile_args,\n    link_with           : tracy,\n    include_directories : tracy_public_include_dirs)\n\nmeson.override_dependency('tracy', tracy_dep)\n"
        },
        {
          "name": "meson.options",
          "type": "blob",
          "size": 3.2080078125,
          "content": "option('tracy_enable', type : 'boolean', value : true, description : 'Enable profiling', yield: true)\noption('on_demand', type : 'boolean', value : false, description : 'On-demand profiling')\noption('callstack', type : 'boolean', value : false, description : 'Enfore callstack collection for tracy regions')\noption('no_callstack', type : 'boolean', value : false, description : 'Disable all callstack related functionality')\noption('no_callstack_inlines', type : 'boolean', value : false, description : 'Disables the inline functions in callstacks')\noption('only_localhost', type : 'boolean', value : false, description : 'Only listen on the localhost interface')\noption('no_broadcast', type : 'boolean', value : false, description : 'Disable client discovery by broadcast to local network')\noption('only_ipv4', type : 'boolean', value : false, description : 'Tracy will only accept connections on IPv4 addresses (disable IPv6)')\noption('no_code_transfer', type : 'boolean', value : false, description : 'Disable collection of source code')\noption('no_context_switch', type : 'boolean', value : false, description : 'Disable capture of context switches')\noption('no_exit', type : 'boolean', value : false, description : 'Client executable does not exit until all profile data is sent to server')\noption('no_sampling', type : 'boolean', value : false, description : 'Disable call stack sampling')\noption('no_verify', type : 'boolean', value : false, description : 'Disable zone validation for C API')\noption('no_vsync_capture', type : 'boolean', value : false, description : 'Disable capture of hardware Vsync events')\noption('no_frame_image', type : 'boolean', value : false, description : 'Disable the frame image support and its thread')\noption('no_system_tracing', type : 'boolean', value : false, description : 'Disable systrace sampling')\noption('patchable_nopsleds', type : 'boolean', value : false, description : 'Enable nopsleds for efficient patching by system-level tools (e.g. rr)')\noption('timer_fallback', type : 'boolean', value : false, description : 'Use lower resolution timers')\noption('libunwind_backtrace', type : 'boolean', value : false, description : 'Use libunwind backtracing where supported')\noption('symbol_offline_resolve', type : 'boolean', value : false, description : 'Instead of full runtime symbol resolution, only resolve the image path and offset to enable offline symbol resolution')\noption('libbacktrace_elf_dynload_support', type : 'boolean', value : false, description : 'Enable libbacktrace to support dynamically loaded elfs in symbol resolution resolution after the first symbol resolve operation')\noption('delayed_init', type : 'boolean', value : false, description : 'Enable delayed initialization of the library (init on first call)')\noption('manual_lifetime', type : 'boolean', value : false, description : 'Enable the manual lifetime management of the profile')\noption('fibers', type : 'boolean', value : false, description : 'Enable fibers support')\noption('no_crash_handler', type : 'boolean', value : false, description : 'Disable crash handling')\noption('verbose', type : 'boolean', value : false, description : 'Enable verbose logging')\noption('debuginfod', type : 'boolean', value : false, description : 'Enable debuginfod support')"
        },
        {
          "name": "nfd",
          "type": "tree",
          "content": null
        },
        {
          "name": "profiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "update",
          "type": "tree",
          "content": null
        },
        {
          "name": "zstd",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}