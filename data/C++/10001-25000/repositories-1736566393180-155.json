{
  "metadata": {
    "timestamp": 1736566393180,
    "page": 155,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/wslg",
      "stars": 10367,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.04296875,
          "content": ".git\n.github\n.gitlab\n.gitlab-ci\n.vs\nout\ntmp\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.208984375,
          "content": ".vscode/*\nvendor/*\n!vendor/.preserve\nout\ntmp\n*.nupkg\n*.tar\n*.vhd\nWSLGd/*.d\nWSLGd/*.o\nWSLGd/WSLGd\nWSLDVCPlugin/.vs\nWSLDVCPlugin/x64\nWSLDVCPlugin/ARM64/Debug/\nWSLDVCPlugin/ARM64/Release/\nWSLDVCPlugin/WSLDVCPlugin.aps"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 10.2294921875,
          "content": "# Contributing\r\n\r\nThis project welcomes contributions and suggestions. Most contributions require you to\r\nagree to a Contributor License Agreement (CLA) declaring that you have the right to,\r\nand actually do, grant us the rights to use your contribution. For details, visit\r\nhttps://cla.microsoft.com.\r\n\r\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need\r\nto provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the\r\ninstructions provided by the bot. You will only need to do this once across all repositories using our CLA.\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\r\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\r\nor contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\r\n\r\n# Building the WSLg System Distro\r\n\r\nThe heart of WSLg is what we call the WSL system distro. This is where the Weston compositor, XWayland and the PulseAudio server are running. The system distro runs these components and projects their communication sockets into the user distro. Every user distro is paired with a unique instance of the system distro. There is a single version of the system distro on disk which is instantiated in memory when a user distro is launched.\r\n\r\nThe system distro is essentially a Linux container packaged and distributed as a vhd. The system distro is accessible to the user, but is mounted read-only. Any changes made by the user to the system distro while it is running are discarded when WSL is restarted. Although a user can log into the system distro, it is not meant to be used as a general purpose user distro. The reason behind this choice is due to the way we service WSLg. When updating WSLg we simply replace the existing system distro with a new one. If the user had data embedded into the system distro vhd, this data would be lost.\r\n\r\nFor folks who want to tinker with or customize their system distro, we give the ability to run a private version of the system distro. When running a private version of WSLg, Windows will load and run your private and ignore the Microsoft published one. If you update your WSL setup (`wsl --update`), the Microsoft published WSLg vhd will be updated, but you will continue to be running your private. You can switch between the Microsoft pulished WSLg system distro and a private one at any time although it does require restarting WSL (`wsl --shutdown`).\r\n\r\nThe WSLg system distro is built using docker build. We essentially start from a [CBL-Mariner](https://github.com/microsoft/CBL-MarinerDemo) base image, install various packages, then build and install version of Weston, FreeRDP and PulseAudio from our mirror repo. This repository contains a Dockerfile and supporting tools to build the WSLg container and convert the container into an ext4 vhd that Windows will load as the system distro.\r\n\r\n## Build instructions\r\n\r\n0. Install and start Docker in a Linux or WSL 2 environment.\r\n\r\n```\r\n    sudo apt-get update\r\n    sudo apt install docker.io golang-go\r\n    sudo dockerd\r\n```\r\n\r\n1. Clone the WSLg project:\r\n\r\n```\r\n    git clone https://github.com/microsoft/wslg wslg\r\n```\r\n\r\n2. Clone the FreeRDP, Weston and PulseAudio mirror. These need to be located in a **vendor** sub-directory where you clone the wslg project (e.g. wslg/vendor), this is where our docker build script expects to find the source code. Make sure to checkout the **working** branch from each of these projects, the **main** branch references the upstream code.\r\n\r\n    ```bash\r\n    git clone https://github.com/microsoft/FreeRDP-mirror wslg/vendor/FreeRDP -b working\r\n    git clone https://github.com/microsoft/weston-mirror wslg/vendor/weston -b working\r\n    git clone https://github.com/microsoft/PulseAudio-mirror wslg/vendor/pulseaudio -b working\r\n    git clone https://github.com/microsoft/DirectX-Headers.git wslg/vendor/DirectX-Headers-1.0 -b v1.608.0\r\n    git clone https://gitlab.freedesktop.org/mesa/mesa.git wslg/vendor/mesa -b mesa-23.1.0\r\n    ```\r\n\r\n2. Create the VHD:\r\n\r\n    2.1 From the parent directory where you cloned `wslg` clone `hcsshim` which contains `tar2ext4` and will be used to create the system distro vhd\r\n    ```\r\n    git clone --branch v0.8.9 --single-branch https://github.com/microsoft/hcsshim.git\r\n    ```\r\n    \r\n    2.2 From the parent directory build and export the docker image:\r\n    ```\r\n    sudo docker build -t system-distro-x64  ./wslg  --build-arg SYSTEMDISTRO_VERSION=`git --git-dir=wslg/.git rev-parse --verify HEAD` --build-arg SYSTEMDISTRO_ARCH=x86_64\r\n    sudo docker export `sudo docker create system-distro-x64` > system_x64.tar\r\n    ```\r\n    \r\n    2.3 Create the system distro vhd using `tar2ext4`\r\n    \r\n    ```bash\r\n    cd hcsshim/cmd/tar2ext4\r\n    go run tar2ext4.go -vhd -i ../../../system_x64.tar -o ../../../system.vhd\r\n    ```\r\n    \r\n    This will create system distro image `system.vhd`\r\n\r\n## Installing a private version of the WSLg system distro\r\n\r\nYou can tell WSL to load a private version of WSLg by adding the following option in your `.wslconfig` file (located in `C:\\Users\\MyUser\\.wslconfig`).\r\n\r\n```\r\n    [wsl2]\r\n    systemDistro=C:\\\\Files\\\\system.vhd\r\n```    \r\n    \r\nYou need to restart WSL for this change to take effect. From an elevated command prompt execute `wsl --shutdown`. When WSL is launched again, Windows will load your private vhd as the system distro. \r\n    \r\n## Inspecting the WSLg system distro at runtime\r\n\r\nIf the system distro isn't working correctly or you need to inspect what is running inside the system distro you can get a terminal into the system distro by running the following command from an elevated command prompt.\r\n\r\n```\r\n    wsl --system -d [DistroName]\r\n```\r\nThere is an instance of the system distro running for every user distro running. `DistroName` refers to the name of the user distro for which you want the paired system distro. If you omit `DistroName`, you will get a terminal into the system distro paired with your default WSL user distro.\r\n\r\nPlease keep in mind that the system distro is loaded read-only from it's backing VHD. For example, if you need to install tools (say a debugger or an editor) in the system distro, you want to do this in the Dockerfile that builds the system distro so it gets into the private vhd that you are running. You can dynamically install new packages once your have a terminal into the system distro, but any changes you make will be discarded when WSL is restarted.\r\n\r\n## Building a debug version\r\n\r\nTo build a debug version of the system distro, the docker build argument SYSTEMDISTRO_DEBUG_BUILD needs to be set and passed the value of \"true\". The following command would substitute the docker build command in step 3.2.2 of the \"Build Instructions\" section.\r\n\r\n```\r\n    sudo docker build -t system-distro-x64  ./wslg  --build-arg SYSTEMDISTRO_VERSION=`git --git-dir=wslg/.git rev-parse --verify HEAD` --build-arg SYSTEMDISTRO_ARCH=x86_64 --build-arg SYSTEMDISTRO_DEBUG_BUILD=true\r\n```\r\nThe resulting system distro VHD will have useful development packages installed like gdb and will have compiled all runtime dependencies with the \"debug\" buildtype for Meson, rather than \"release\".\r\n\r\n# mstsc plugin\r\n\r\nOn the Windows side of the world, WSLg leverages the native `mstsc.exe` RDP client and a plugin for that client which handles WSLg integration into the start menu. The source code for this plugin is available as open source as part of the WSLg repo [here](https://github.com/microsoft/wslg/tree/main/WSLDVCPlugin).\r\n\r\nIt was important for us building WSLg to ensure that all protocols between Linux and Windows be fully documented and available to everyone to reuse. While almost all of the communication over RDP between Linux/Weston and Windows goes through standard and officially documented [Windows Protocols](https://docs.microsoft.com/en-us/openspecs/windows_protocols/MS-WINPROTLP/92b33e19-6fff-496b-86c3-d168206f9845) associated with the RDP standard, we needed just a bit of custom communication between Linux and Windows to handle integration into the start menu. We thought about adding some official RDP protocol for this, but this was too specific to WSLg and not broadly applicable to arbitrary RDP based solution.\r\n\r\nSo instead we opted to use a custom RDP channel between the WSLg RDP Server running inside of Weston and the WSLg RDP plugin hosted by mstsc. Such custom dynamic channel are part of the RDP specification, but requires that both the RDP server and RDP client support that channel for it to be used. This is the path we took for WSLg where Weston exposes a custom RDP channel for WSLg integration. In the spirit of fully documenting all channels of communication between Linux and Windows, we're making the source code for plugin which handles the Windows side of this custom RDP channel available as part of the WSLg project.\r\n\r\nThis custom channel and associated plugin are quite small and simple. In a nutshell, Weston enumerates all installed applications inside of the user Linux distro (i.e. application which have an explicit [desktop file](https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html)) and exposes this list of applications, along with command line to launch them and icon to represent them, over this custom RDP channel. The mstsc plugin processes that list and creates links in the Windows Start Menu for these applications so they can be launch directly from it.\r\n\r\n## Building the mstsc plugin\r\n\r\nThe [source code](https://github.com/microsoft/wslg/tree/main/WSLDVCPlugin) for the plugin has a visual studio project file that can be use to build it. You can download and install the free [Visual Studio Community Edition](https://visualstudio.microsoft.com/vs/community/) to build it.\r\n\r\n## Registering a private mstsc plugin\r\n\r\nThe plugin is registered with mstsc through the registry. By default this is set to load the plugin that ships as part of the official WSLg package. If you need to run a private, you'll nee to modify this registry key to reference your privately built plugin, for example using a registry file like below.\r\n\r\n```\r\nWindows Registry Editor Version 5.00\r\n\r\n[HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\\AddIns\\WSLDVCPlugin]\r\n\"Name\"=\"C:\\\\users\\\\MyUser\\\\Privates\\\\WSLDVCPlugin.dll\"\r\n```\r\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 12.845703125,
          "content": "# Create a builder image with the compilers, etc. needed\nFROM mcr.microsoft.com/cbl-mariner/base/core:2.0.20240829 AS build-env\n\n# Install all the required packages for building. This list is probably\n# longer than necessary.\nRUN echo \"== Install Git/CA certificates ==\" && \\\n    tdnf install -y \\\n        git \\\n        ca-certificates\n\nRUN echo \"== Install Core dependencies ==\" && \\\n    tdnf install -y \\\n        alsa-lib \\\n        alsa-lib-devel  \\\n        autoconf  \\\n        automake  \\\n        binutils  \\\n        bison  \\\n        build-essential  \\\n        cairo \\\n        cairo-devel \\\n        clang  \\\n        clang-devel  \\\n        cmake  \\\n        dbus  \\\n        dbus-devel  \\\n        dbus-glib  \\\n        dbus-glib-devel  \\\n        diffutils  \\\n        elfutils-devel  \\\n        file-libs  \\\n        flex  \\\n        fontconfig-devel  \\\n        gawk  \\\n        gcc  \\\n        gettext  \\\n        glibc-devel  \\\n        glib-schemas \\\n        gobject-introspection  \\\n        gobject-introspection-devel  \\\n        harfbuzz  \\\n        harfbuzz-devel  \\\n        kernel-headers  \\\n        intltool \\\n        libatomic_ops  \\\n        libcap-devel  \\\n        libffi  \\\n        libffi-devel  \\\n        libgudev  \\\n        libgudev-devel  \\\n        libjpeg-turbo  \\\n        libjpeg-turbo-devel  \\\n        libltdl  \\\n        libltdl-devel  \\\n        libpng-devel  \\\n        librsvg2-devel \\\n        libtiff  \\\n        libtiff-devel  \\\n        libusb  \\\n        libusb-devel  \\\n        libwebp  \\\n        libwebp-devel  \\\n        libxml2 \\\n        libxml2-devel  \\\n        make  \\\n        meson  \\\n        newt  \\\n        nss  \\\n        nss-libs  \\\n        openldap  \\\n        openssl-devel  \\\n        pam-devel  \\\n        pango  \\\n        pango-devel  \\\n        patch  \\\n        perl-XML-Parser \\\n        polkit-devel  \\\n        python3-devel \\\n        python3-mako  \\\n        python3-markupsafe \\\n        sed \\\n        sqlite-devel \\\n        systemd-devel  \\\n        tar \\\n        unzip  \\\n        vala  \\\n        vala-devel  \\\n        vala-tools\n\nRUN echo \"== Install UI dependencies ==\" && \\\n    tdnf    install -y \\\n            libdrm-devel \\\n            libepoxy-devel \\\n            libevdev \\\n            libevdev-devel \\\n            libinput \\\n            libinput-devel \\\n            libpciaccess-devel \\\n            libSM-devel \\\n            libsndfile \\\n            libsndfile-devel \\\n            libXcursor \\\n            libXcursor-devel \\\n            libXdamage-devel \\\n            libXfont2-devel \\\n            libXi \\\n            libXi-devel \\\n            libxkbcommon-devel \\\n            libxkbfile-devel \\\n            libXrandr-devel \\\n            libxshmfence-devel \\\n            libXtst \\\n            libXtst-devel \\\n            libXxf86vm-devel \\\n            wayland-devel \\\n            wayland-protocols-devel \\\n            xkbcomp \\\n            xkeyboard-config \\\n            xorg-x11-server-devel \\\n            xorg-x11-util-macros\n\n# Create an image with builds of FreeRDP and Weston\nFROM build-env AS dev\n\nARG WSLG_VERSION=\"<current>\"\nARG WSLG_ARCH=\"x86_64\"\nARG SYSTEMDISTRO_DEBUG_BUILD\nARG FREERDP_VERSION=2\n\nWORKDIR /work\nRUN echo \"WSLg (\" ${WSLG_ARCH} \"):\" ${WSLG_VERSION} > /work/versions.txt\nRUN echo \"Built at:\" `date --utc` >> /work/versions.txt\n\nRUN echo \"Mariner:\" `cat /etc/os-release | head -2 | tail -1` >> /work/versions.txt\n\n#\n# Build runtime dependencies.\n#\n\nENV BUILDTYPE=${SYSTEMDISTRO_DEBUG_BUILD:+debug}\nENV BUILDTYPE=${BUILDTYPE:-debugoptimized}\nRUN echo \"== System distro build type:\" ${BUILDTYPE} \" ==\"\n\nENV BUILDTYPE_NODEBUGSTRIP=${SYSTEMDISTRO_DEBUG_BUILD:+debug}\nENV BUILDTYPE_NODEBUGSTRIP=${BUILDTYPE_NODEBUGSTRIP:-release}\nRUN echo \"== System distro build type (no debug strip):\" ${BUILDTYPE_NODEBUGSTRIP} \" ==\"\n\n# FreeRDP is always built with RelWithDebInfo\nENV BUILDTYPE_FREERDP=${BUILDTYPE_FREERDP:-RelWithDebInfo}\nRUN echo \"== System distro build type (FreeRDP):\" ${BUILDTYPE_FREERDP} \" ==\"\n\nENV WITH_DEBUG_FREERDP=${SYSTEMDISTRO_DEBUG_BUILD:+ON}\nENV WITH_DEBUG_FREERDP=${WITH_DEBUG_FREERDP:-OFF}\nRUN echo \"== System distro build type (FreeRDP Debug Options):\" ${WITH_DEBUG_FREERDP} \" ==\"\n\nENV DESTDIR=/work/build\nENV PREFIX=/usr\nENV PKG_CONFIG_PATH=${DESTDIR}${PREFIX}/lib/pkgconfig:${DESTDIR}${PREFIX}/lib/${WSLG_ARCH}-linux-gnu/pkgconfig:${DESTDIR}${PREFIX}/share/pkgconfig\nENV C_INCLUDE_PATH=${DESTDIR}${PREFIX}/include/freerdp${FREERDP_VERSION}:${DESTDIR}${PREFIX}/include/winpr${FREERDP_VERSION}:${DESTDIR}${PREFIX}/include/wsl/stubs:${DESTDIR}${PREFIX}/include\nENV CPLUS_INCLUDE_PATH=${C_INCLUDE_PATH}\nENV LIBRARY_PATH=${DESTDIR}${PREFIX}/lib\nENV LD_LIBRARY_PATH=${LIBRARY_PATH}\nENV CC=/usr/bin/gcc\nENV CXX=/usr/bin/g++\n\n# Setup DebugInfo folder\nCOPY debuginfo /work/debuginfo\nRUN chmod +x /work/debuginfo/gen_debuginfo.sh\n\n# Build DirectX-Headers\nCOPY vendor/DirectX-Headers-1.0 /work/vendor/DirectX-Headers-1.0\nWORKDIR /work/vendor/DirectX-Headers-1.0\nRUN /usr/bin/meson --prefix=${PREFIX} build \\\n        --buildtype=${BUILDTYPE_NODEBUGSTRIP} \\\n        -Dbuild-test=false && \\\n    ninja -C build -j8 install && \\\n    echo 'DirectX-Headers:' `git --git-dir=/work/vendor/DirectX-Headers-1.0/.git rev-parse --verify HEAD` >> /work/versions.txt\n\n# Build mesa with the minimal options we need.\nCOPY vendor/mesa /work/vendor/mesa\nWORKDIR /work/vendor/mesa\nRUN /usr/bin/meson --prefix=${PREFIX} build \\\n        --buildtype=${BUILDTYPE_NODEBUGSTRIP} \\\n        -Dgallium-drivers=swrast,d3d12 \\\n        -Dvulkan-drivers= \\\n        -Dllvm=disabled && \\\n    ninja -C build -j8 install && \\\n    echo 'mesa:' `git --git-dir=/work/vendor/mesa/.git rev-parse --verify HEAD` >> /work/versions.txt\n\n# Build PulseAudio\nCOPY vendor/pulseaudio /work/vendor/pulseaudio\nWORKDIR /work/vendor/pulseaudio\nRUN /usr/bin/meson --prefix=${PREFIX} build \\\n        --buildtype=${BUILDTYPE_NODEBUGSTRIP} \\\n        -Ddatabase=simple \\\n        -Ddoxygen=false \\\n        -Dgsettings=disabled \\\n        -Dtests=false && \\\n    ninja -C build -j8 install && \\\n    echo 'pulseaudio:' `git --git-dir=/work/vendor/pulseaudio/.git rev-parse --verify HEAD` >> /work/versions.txt\n\n# Build FreeRDP\nCOPY vendor/FreeRDP /work/vendor/FreeRDP\nWORKDIR /work/vendor/FreeRDP\nRUN cmake -G Ninja \\\n        -B build \\\n        -DCMAKE_INSTALL_PREFIX=${PREFIX} \\\n        -DCMAKE_INSTALL_LIBDIR=${PREFIX}/lib \\\n        -DCMAKE_BUILD_TYPE=${BUILDTYPE_FREERDP} \\\n        -DWITH_DEBUG_ALL=${WITH_DEBUG_FREERDP} \\\n        -DWITH_ICU=ON \\\n        -DWITH_SERVER=ON \\\n        -DWITH_CHANNEL_GFXREDIR=ON \\\n        -DWITH_CHANNEL_RDPAPPLIST=ON \\\n        -DWITH_CLIENT=OFF \\\n        -DWITH_CLIENT_COMMON=OFF \\\n        -DWITH_CLIENT_CHANNELS=OFF \\\n        -DWITH_CLIENT_INTERFACE=OFF \\\n        -DWITH_PROXY=OFF \\\n        -DWITH_SHADOW=OFF \\\n        -DWITH_SAMPLE=OFF && \\\n    ninja -C build -j8 install && \\\n    echo 'FreeRDP:' `git --git-dir=/work/vendor/FreeRDP/.git rev-parse --verify HEAD` >> /work/versions.txt\n\nWORKDIR /work/debuginfo\nRUN if [ -z \"$SYSTEMDISTRO_DEBUG_BUILD\" ] ; then \\\n        echo \"== Strip debug info: FreeRDP ==\" && \\\n        /work/debuginfo/gen_debuginfo.sh /work/debuginfo/FreeRDP${FREERDP_VERSION}.list /work/build; \\\n    fi\n\n# Build rdpapplist RDP virtual channel plugin\nCOPY rdpapplist /work/rdpapplist\nWORKDIR /work/rdpapplist\nRUN /usr/bin/meson --prefix=${PREFIX} build \\\n        --buildtype=${BUILDTYPE} && \\\n    ninja -C build -j8 install\n\nWORKDIR /work/debuginfo\nRUN if [ -z \"$SYSTEMDISTRO_DEBUG_BUILD\" ] ; then \\\n        echo \"== Strip debug info: rdpapplist ==\" && \\\n        /work/debuginfo/gen_debuginfo.sh /work/debuginfo/rdpapplist.list /work/build; \\\n    fi\n\n# Build Weston\nCOPY vendor/weston /work/vendor/weston\nWORKDIR /work/vendor/weston\nRUN /usr/bin/meson --prefix=${PREFIX} build \\\n        --buildtype=${BUILDTYPE} \\\n        -Dbackend-default=rdp \\\n        -Dbackend-drm=false \\\n        -Dbackend-drm-screencast-vaapi=false \\\n        -Dbackend-headless=false \\\n        -Dbackend-wayland=false \\\n        -Dbackend-x11=false \\\n        -Dbackend-fbdev=false \\\n        -Dcolor-management-colord=false \\\n        -Dscreenshare=false \\\n        -Dsystemd=false \\\n        -Dwslgd=true \\\n        -Dremoting=false \\\n        -Dpipewire=false \\\n        -Dshell-fullscreen=false \\\n        -Dcolor-management-lcms=false \\\n        -Dshell-ivi=false \\\n        -Dshell-kiosk=false \\\n        -Ddemo-clients=false \\\n        -Dsimple-clients=[] \\\n        -Dtools=[] \\\n        -Dresize-pool=false \\\n        -Dwcap-decode=false \\\n        -Dtest-junit-xml=false && \\\n    ninja -C build -j8 install && \\\n    echo 'weston:' `git --git-dir=/work/vendor/weston/.git rev-parse --verify HEAD` >> /work/versions.txt\n\nWORKDIR /work/debuginfo\nRUN if [ -z \"$SYSTEMDISTRO_DEBUG_BUILD\" ] ; then \\\n        echo \"== Strip debug info: weston ==\" && \\\n        /work/debuginfo/gen_debuginfo.sh /work/debuginfo/weston.list /work/build; \\\n    fi\n\n# Build WSLGd Daemon\nENV CC=/usr/bin/clang\nENV CXX=/usr/bin/clang++\n\nCOPY WSLGd /work/WSLGd\nWORKDIR /work/WSLGd\nRUN /usr/bin/meson --prefix=${PREFIX} build \\\n        --buildtype=${BUILDTYPE} && \\\n    ninja -C build -j8 install\n\nWORKDIR /work/debuginfo\nRUN if [ -z \"$SYSTEMDISTRO_DEBUG_BUILD\" ] ; then \\\n        echo \"== Strip debug info: WSLGd ==\" && \\\n        /work/debuginfo/gen_debuginfo.sh /work/debuginfo/WSLGd.list /work/build; \\\n    fi\n\n# Gather debuginfo to a tar file\nWORKDIR /work/debuginfo\nRUN if [ -z \"$SYSTEMDISTRO_DEBUG_BUILD\" ] ; then \\\n        echo \"== Compress debug info: /work/debuginfo/system-debuginfo.tar.gz ==\" && \\\n        tar -C /work/build/debuginfo -czf system-debuginfo.tar.gz ./ ; \\\n    fi\n\n########################################################################\n########################################################################\n\n## Create the distro image with just what's needed at runtime\n\nFROM mcr.microsoft.com/cbl-mariner/base/core:2.0.20240829 AS runtime\n\nRUN echo \"== Install Core/UI Runtime Dependencies ==\" && \\\n    tdnf    install -y \\\n            cairo \\\n            chrony \\\n            dbus \\\n            dbus-glib \\\n            dhcp-client \\\n            e2fsprogs \\\n            freefont \\\n            libinput \\\n            libjpeg-turbo \\\n            libltdl \\\n            libpng \\\n            librsvg2 \\\n            libsndfile \\\n            libwayland-client \\\n            libwayland-server \\\n            libwayland-cursor \\\n            libwebp \\\n            libXcursor \\\n            libxkbcommon \\\n            libXrandr \\\n            iproute \\\n            nftables \\\n            pango \\\n            procps-ng \\\n            rpm \\\n            sed \\\n            tzdata \\\n            wayland-protocols-devel \\\n            xcursor-themes \\\n            xorg-x11-server-Xwayland \\\n            xorg-x11-server-utils \\\n            xorg-x11-xtrans-devel\n\n# Install packages to aid in development, if not remove some packages. \nARG SYSTEMDISTRO_DEBUG_BUILD\nRUN if [ -z \"$SYSTEMDISTRO_DEBUG_BUILD\" ] ; then \\\n        rpm -e --nodeps curl                     \\\n        rpm -e --nodeps python3                  \\\n        rpm -e --nodeps python3-libs;            \\\n    else                                         \\\n        echo \"== Install development aid packages ==\" && \\\n        tdnf install -y                          \\\n             gdb                                 \\\n             mariner-repos-debug                 \\\n             nano                                \\\n             vim                              && \\\n        tdnf install -y                          \\\n             wayland-debuginfo                   \\\n             xorg-x11-server-debuginfo;          \\\n    fi\n\n# Clear the tdnf cache to make the image smaller\nRUN tdnf clean all\n\n# Remove extra doc\nRUN rm -rf /usr/lib/python3.7 /usr/share/gtk-doc\n\n# Create wslg user.\nRUN useradd -u 1000 --create-home wslg && \\\n    mkdir /home/wslg/.config && \\\n    chown wslg /home/wslg/.config\n\n# Copy config files.\nCOPY config/wsl.conf /etc/wsl.conf\nCOPY config/weston.ini /home/wslg/.config/weston.ini\nCOPY config/local.conf /etc/fonts/local.conf\n\n# Copy default icon file.\nCOPY resources/linux.png /usr/share/icons/wsl/linux.png\n\n# Copy the built artifacts from the build stage.\nCOPY --from=dev /work/build/usr/ /usr/\nCOPY --from=dev /work/build/etc/ /etc/\n\n# Append WSLg setttings to pulseaudio.\nCOPY config/default_wslg.pa /etc/pulse/default_wslg.pa\nRUN cat /etc/pulse/default_wslg.pa >> /etc/pulse/default.pa\nRUN rm /etc/pulse/default_wslg.pa\n\n# Copy the licensing information for PulseAudio\nCOPY --from=dev /work/vendor/pulseaudio/GPL \\\n                /work/vendor/pulseaudio/LGPL \\\n                /work/vendor/pulseaudio/LICENSE \\\n                /work/vendor/pulseaudio/NEWS \\\n                /work/vendor/pulseaudio/README /usr/share/doc/pulseaudio/\n\n# Copy the licensing information for Weston\nCOPY --from=dev /work/vendor/weston/COPYING /usr/share/doc/weston/COPYING\n\n# Copy the licensing information for FreeRDP\nCOPY --from=dev /work/vendor/FreeRDP/LICENSE /usr/share/doc/FreeRDP/LICENSE\n\n# copy the documentation and licensing information for mesa\nCOPY --from=dev /work/vendor/mesa/docs /usr/share/doc/mesa/\n\nCOPY --from=dev /work/versions.txt /etc/versions.txt\n\nCMD /usr/bin/WSLGd\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1142578125,
          "content": "    MIT License\n\n    Copyright (c) Microsoft Corporation.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n"
        },
        {
          "name": "Microsoft.WSLg.nuspec",
          "type": "blob",
          "size": 1.9287109375,
          "content": "<?xml version=\"1.0\"?>\r\n<!--\r\n***********************************************************************************************\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n***********************************************************************************************\r\n-->\r\n<package>\r\n  <metadata>\r\n    <id>Microsoft.WSLg</id>\r\n    <version>0.2.12</version>\r\n    <authors>Microsoft</authors>\r\n    <owners>Microsoft, WSL Team</owners>\r\n    <projectUrl>https://github.com/microsoft/wslg/</projectUrl>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>WSLg support package.</description>\r\n    <summary>Enabling the Windows Subsystem for Linux to include support for Wayland and X server related scenarios.</summary>\r\n    <releaseNotes>ebad9c1</releaseNotes>\r\n    <copyright>Copyright © Microsoft Corporation 2021</copyright>\r\n    <tags>native</tags>\r\n  </metadata>\r\n  <files>\r\n    <file src=\"Microsoft.WSLg.targets\" target=\"build/Microsoft.WSLg.targets\" />\r\n    <file src=\"package/system_x64.vhd\" target=\"build/native/bin/x64/system.vhd\" />\r\n    <file src=\"package/system-debuginfo_x64.tar.gz\" target=\"build/native/bin/x64/system-debuginfo.tar.gz\" />\r\n    <file src=\"package/WSLDVCPlugin_x64.dll\" target=\"build/native/bin/x64/WSLDVCPlugin.dll\" />\r\n    <file src=\"package/WSLDVCPlugin_x64.pdb\" target=\"build/native/bin/x64/WSLDVCPlugin.pdb\" />\r\n    <file src=\"package/system_ARM64.vhd\" target=\"build/native/bin/arm64/system.vhd\" />\r\n    <file src=\"package/system-debuginfo_ARM64.tar.gz\" target=\"build/native/bin/arm64/system-debuginfo.tar.gz\" />\r\n    <file src=\"package/WSLDVCPlugin_ARM64.dll\" target=\"build/native/bin/arm64/WSLDVCPlugin.dll\" />\r\n    <file src=\"package/WSLDVCPlugin_ARM64.pdb\" target=\"build/native/bin/arm64/WSLDVCPlugin.pdb\" />\r\n\r\n    <file src=\"package/wslg.rdp\" target=\"build/native/bin/wslg.rdp\" />\r\n    <file src=\"package/wslg_desktop.rdp\" target=\"build/native/bin/wslg_desktop.rdp\" />\r\n  </files>\r\n</package>\r\n"
        },
        {
          "name": "Microsoft.WSLg.targets",
          "type": "blob",
          "size": 1.1884765625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!--\r\n***********************************************************************************************\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n***********************************************************************************************\r\n-->\r\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <None Include=\"$(MSBuildThisFileDirectory)native\\bin\\$(Platform)\\system.vhd\">\r\n      <Link>system.vhd</Link>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n    <None Include=\"$(MSBuildThisFileDirectory)native\\bin\\$(Platform)\\WSLDVCPlugin.dll\">\r\n      <Link>WSLDVCPlugin.dll</Link>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n    <None Include=\"$(MSBuildThisFileDirectory)native\\bin\\wslg.rdp\">\r\n      <Link>wslg.rdp</Link>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n    <None Include=\"$(MSBuildThisFileDirectory)native\\bin\\wslg_desktop.rdp\">\r\n      <Link>wslg_desktop.rdp</Link>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n  </ItemGroup>\r\n</Project>\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.7265625,
          "content": "# Welcome to WSLg\r\nWSLg is short for *Windows Subsystem for Linux GUI* and the purpose of the project is to enable support for running Linux GUI applications (X11 and Wayland) on Windows in a fully integrated desktop experience. \r\n\r\nWSLg provides an integrated experience for developers, scientists or enthusiasts that prefer or need to run Windows on their PC but also need the ability to run tools or applications which work best, or exclusively, in a Linux environment. While users can accomplish this today using a multiple system setup, with individual PC dedicated to Windows and Linux, virtual machine hosting either Windows or Linux, or an XServer running on Windows and projected into WSL, WSLg provides a more integrated, user friendly and productive alternative.\r\n\r\nWSLg strives to make Linux GUI applications feel native and natural to use on Windows. From integration into the Start Menu for launch to appearing in the task bar, alt-tab experience to enabling cut/paste across Windows and Linux applications, WSLg enables a seamless desktop experience and workflow leveraging Windows and Linux applications.\r\n\r\n![WSLg Integrated Desktop](/docs/WSLg_IntegratedDesktop.png)\r\n\r\n# Installing WSLg\r\n\r\n## Pre-requisites\r\n\r\n- WSLg is supported on both Windows 11 and Windows 10. Windows 10 users must ensure their Windows 10 installation is fully up to date by visiting Windows Update and installing all available updates.\r\n\r\n- WSLg is available both as part of the Windows 11 WSL inbox support as well as through the  [Windows Subsystem for Linux from the Microsoft Store](https://aka.ms/wslstorepage). It is highly recommended to use the Microsoft Store version of WSL, which supports both Windows 10 and Windows 11, and contains the most up to date version of WSL and WSLg.\r\n\r\n- Make sure to update your graphics driver to the latest driver available from your GPU manufacturer's website to benefit from GPU acceleration in your WSL environment.\r\n     \r\n   \r\n## Install instructions (Fresh Install - no prior WSL installation)\r\n\r\nFrom a command prompt with administrator privileges, run the command `wsl --install -d Ubuntu`, then reboot if prompted.\r\n\r\nAfter reboot the installation will continue. You'll be asked to enter a username and password. These will be your Linux credentials, they can be anything you want and don't have to match your Windows credentials.\r\n\r\nVoilà! WSL and WSLg are installed and ready to be used!\r\n\r\n## Install instructions (Existing WSL install)\r\n\r\nIf you have an existing WSL installation without WSLg and want to update to the latest version of WSL which includes WSLg, run the command `wsl --update` from an elevated command prompt. \r\n\r\nPlease note that WSLg is only compatible with WSL 2 and will not work for WSL distribution configured to work in WSL 1 mode. Verify that your Linux distro is configured for running in WSL 2 mode, if not switch to WSL 2. While you can continue to run Linux distro in WSL 1 mode after installing WSLg if you so desired, a distro configured to run in WSL 1 mode will not be able to communicate with WSLg and will not be able to run GUI applications.\r\n\r\nYou can list your currently installed distro and the version of WSL they are configured for using the following command from an elevated command prompt.\r\n\r\n```powershell\r\n   wsl --list -v\r\n```\r\nIf running in version 1 mode, switch to version 2. This can take a while.\r\n\r\n```powershell\r\n   wsl --set-version _distro_name_ 2\r\n```\r\n\r\nRestart WSL by running this command from an elevated command prompt, make sure to save any pending work first:\r\n\r\n```powershell\r\n    wsl --shutdown\r\n```\r\n\r\n## Updating WSL + WSLg\r\n\r\nTo update to the latest version of WSL and WSLg released for preview, simply run `wsl --update` from an elevated command prompt or powershell. \r\n\r\nYou'll need to restart WSL for the changes to take effect. You can restart WSL by running `wsl --shutdown` from an elevated command prompt. If WSL was currently running, it will shutdown, make sure to first save any in progress work! WSL will be automatically restarted the next time you launch a WSL application or terminal.\r\n\r\n## First Launch\r\n\r\nIf you have installed the `Ubuntu` Linux distro per these instructions, you'll find an `Ubuntu` icon in your start menu, launch it. This will launch the WSL 2 VM, launch the Ubuntu WSL distro in that VM and give you a terminal to interact with it. Voilà! You're running Linux on Windows! \r\n\r\nIf you would like to explore additional Linux distributions built for WSL, you can use the `wsl --list --online` command from an elevated command prompt to enumerate the list of available distributions for your system. You can have multiple Linux distributions installed within WSL and they will happily coexist side-by-side, so don't be scared to experiment and try things out.\r\n\r\nCongrats you are done and ready to use GUI apps! \r\n\r\n## Install and run GUI apps\r\n\r\nIf you want to get started with some GUI apps, you can run the following commands from your Linux terminal to download and install some popular applications. If you are using a different distribution than Ubuntu, it may be using a different package manager. \r\n\r\n```powershell\r\n\r\n## Update list of available packages\r\nsudo apt update\r\n\r\n## Gedit\r\nsudo apt install gedit -y\r\n\r\n## GIMP\r\nsudo apt install gimp -y\r\n\r\n## Nautilus\r\nsudo apt install nautilus -y\r\n\r\n## VLC\r\nsudo apt install vlc -y\r\n\r\n## X11 apps\r\nsudo apt install x11-apps -y\r\n\r\n## Google Chrome\r\ncd /tmp\r\nsudo wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\r\nsudo dpkg -i google-chrome-stable_current_amd64.deb \r\nsudo apt install --fix-broken -y\r\nsudo dpkg -i google-chrome-stable_current_amd64.deb\r\n\r\n## Microsoft Teams\r\ncd /tmp\r\nsudo curl -L -o \"./teams.deb\" \"https://teams.microsoft.com/downloads/desktopurl?env=production&plat=linux&arch=x64&download=true&linuxArchiveType=deb\"\r\nsudo apt install ./teams.deb -y\r\n\r\n## Microsoft Edge Dev Browser\r\nsudo curl https://packages.microsoft.com/repos/edge/pool/main/m/microsoft-edge-dev/microsoft-edge-dev_118.0.2060.1-1_amd64.deb -o /tmp/edge.deb\r\nsudo apt install /tmp/edge.deb -y\r\n```\r\n\r\nOnce these applications are installed, you'll find them in your start menu under the distro name. For example `Ubuntu -> Microsoft Edge`. You can also launch these from your terminal window using the commands:\r\n\r\n* `xcalc`, `xclock`, `xeyes` \r\n* `gimp`\r\n* `gedit ~/.bashrc` \r\n* `nautilus`\r\n* `vlc`\r\n* `google-chrome`\r\n* `teams`\r\n* `microsoft-edge`\r\n\r\n# WSLg Architecture Overview\r\n\r\n![WSLg Architecture Overview](/docs/WSLg_ArchitectureOverview.png)\r\n\r\n## User Distro\r\nThe user distro is essentially the WSL distribution you are using for your Linux work. You can use the command `wsl --list --online` from an elevated Windows command prompt to list the WSL distributions available on your system. You can run multiple user distros side-by-side and they will peacefully coexist, so don't be afraid of trying out new distro. Each user distro will be paired with a unique instance of the system distro, but you can still interact across GUI applications running in different user distro seamlessly, such as cut/paste between them. The underlying containerization of the various userspace should be invisible to you.\r\n\r\nAll user and system distros for a particular Windows user run within the same WSL virtual machine against a single instance of the Linux kernel. Different Windows users on a PC have their own VM and instance of WSL. Your Linux environment is guaranteed to always be your own and not shared with other Windows users on the same PC.\r\n\r\n## WSLg System Distro\r\nThe system distro is where all of the magic happens. The system distro is a containerized Linux environment where the WSLg XServer, Wayland server and Pulse Audio server are running. Communication socket for each of these servers are projected into the user distro so client applications can connect to them. We preconfigure the user distro environment variables DISPLAY, WAYLAND_DISPLAY and PULSE_SERVER to refer these servers by default so WSLg lights up out of the box.\r\n\r\nUsers wanting to use different servers than the one provided by WSLg can change these environment variables. User can also choose to turn off the system distro entirely by adding the following entry in their `.wslconfig` file (located at `c:\\users\\MyUser\\.wslconfig`). This will turn off support for GUI applications in WSL.\r\n\r\n```\r\n[wsl2]\r\nguiApplications=false\r\n```\r\n\r\nThe system distro is based on the Microsoft [CBL-Mariner Linux](https://github.com/microsoft/CBL-Mariner). This is a minimal Linux environment, just enough to run the various pieces of WSLg. For details on how to build and deploy a private system distro please see our [build instructions](CONTRIBUTING.md).\r\n\r\nEvery WSL 2 user distro is paired with its own instance of the system distro. The system distro runs partially isolated from the user distro to which it is paired, in its own NS/PID/UTS namespace but shares other namespaces such as IPC, to allow for shared memory optimization across the boundary. \r\n\r\nWhile a user can get a terminal into the system distro, the system distro is not meant to be used directly by users. Every instance of the system distro is loaded read-only from its backing VHD. Any modifications, made to the in-memory instance of the system distro (such as installing new packages or creating a new file), are effectively discarded when WSL is restarted. The reason we do this is to enable a servicing model for the system distro where we replace the old one with the new one without having to worry about migrating any user data contained within. We use a read-only mapping such that the user gets a well known discard behavior on any changes, every time WSL is restarted, instead of getting a surprise when WSL is serviced. \r\n\r\nAlthough the Microsoft published WSLg system distro as read-only, we do want to encourage folks to tinker with it and experiment. Although we expect very few folks to actually need or want to do that, we've shared detailed instruction on our [contributing](CONTRIBUTING.md) page on how to both build and deploy a private version of the system distro. Most users who just want to use GUI applications in WSL don't need to worry about those details.\r\n\r\n## WSLGd\r\n**WSLGd** is the first process to launch after **init**. **WSLGd** launches **Weston** (with XWayland), **PulseAudio** and establishes the RDP connection by launching **mstsc.exe** on the host in silent mode. The RDP connection will remain active and ready to show a new GUI applications being launch on a moment's notice, without any connection establishment delays. **WSLGd** then monitors these processes and if they exit by error (say as a result of a crash), it automatically restarts them.\r\n\r\n## Weston\r\nWeston is the Wayland project reference compositor and the heart of WSLg. For WSLg, we've extended the existing RDP backend of libweston to teach it how to remote applications rather than monitor/desktop. We've also added various functionality to it, such as support for multi-monitor, cut/paste, audio in/out, etc...\r\n\r\nThe application integration is achieved through an RDP technology called RAIL (Remote Application Integrated Locally) and VAIL (Virtualized Application Integrated Locally). The main difference between RAIL and VAIL is how pixels are transported across from the RDP server to the RDP client. In RAIL, it is assumed that the Server and Client are running on different physical systems communicating over the network and thus pixels need to be copied over the RDP transport. In VAIL, it is understood that the Server and Client are on the same physical system and can share memory across the Guest/Host VM boundary. We've added support for both RAIL and VAIL to the libweston RDP backend, although for WSLg only the VAIL support is effectively used. While building WSLg, we first implemented RAIL while the necessary pieces enabling the switch to VAIL were being developed in parallel. We decided to keep that support in as it could reuse in other interesting scenarios outside of WSLg, for example for remoting application from a Pi running Linux. To share memory between the Linux guest and Windows host we use virtio-fs.\r\n\r\n### RAIL-Shell\r\nWeston is modular and has various shells today, such as the desktop shell, fullscreen shell (aka kiosk), and automative shell. For WSLg we introduced a new shell called the RAIL Shell. The purpose of the RAIL Shell is to help with the remoting of individual windows from Linux to Windows, as such the shell is very simplistic and doesn't involve any actual widgets or shell owned pixels.\r\n\r\n## FreeRDP\r\nWeston leverages FreeRDP to implement its backend RDP Server. FreeRDP is used to encode all communications going from the RDP Server (in Weston) to the RDP Client (mstsc on Windows) according to the RDP protocol specifications. It is also used to decode all traffic coming from the RDP Client into the RDP server.\r\n\r\n## Pulse Audio Plugin\r\nFor audio in (microphone) and out (speakers/headphone) WSLg runs a PulseAudio server. WSLg uses a [sink plugin](https://github.com/microsoft/pulseaudio-mirror/blob/working/src/modules/rdp/module-rdp-sink.c) for audio out, and a [source plugin](https://github.com/microsoft/pulseaudio-mirror/blob/working/src/modules/rdp/module-rdp-source.c) for audio in. These plugins effectively transfer audio samples between the PulseServer and the Weston RDP Server. The audio streams are merged by the Weston RDP Server onto the RDP transport, effectively enabling audio in/out in the Weston RDP backend across all scenarios (Desktop/RAIL/VAIL style remoting), including WSLg.\r\n\r\n## WSL Dynamic Virtual Channel Plugin (WSLDVCPlugin)\r\nWSLg makes use of a custom RDP virtual channel between the Weston RDP Server and the mstsc RDP Client running on the Windows host. This channel is used by Weston to enumerate all Linux GUI applications (i.e. applications which have a desktop file entry of type gui) along with their launch command line and icon. The open source [WSLDVCPlugin](https://github.com/microsoft/wslg/tree/main/WSLDVCPlugin) processes the list of Linux GUI applications sent over this channel and creates links for them in the Windows start menu.\r\n\r\n# OpenGL accelerated rendering in WSLg\r\n\r\nWhile WSLg works with or without virtual GPU support, if you intend to run graphics intensive applications such as Blender or Gazebo, it is best to be running on a system with a GPU and driver that can support WSL. An overview of our vGPU architecture and how we make it possible for Linux applications to access the GPU in WSL is available at our [DirectX blog](https://devblogs.microsoft.com/directx/directx-heart-linux/).\r\n\r\nSupport for OpenGL accelerated rendering is made possible through the work our D3D team has done with Collabora and the Mesa community on creating a [d3d12 Gallium driver](https://devblogs.microsoft.com/directx/in-the-works-opencl-and-opengl-mapping-layers-to-directx/). \r\n\r\nSupport for Linux, including support for WSLg, has been upstream and part of the Mesa 21.0 release. To take advantage of this acceleration, you'll need to update the version of Mesa installed in your user distro. It also requires that your distro vendor chose to build and publish the new d3d12 Gallium driver to their package repository. We're working with the various WSL distro publishers to inform them of these changes.\r\n\r\nPlease note that for the first release of WSLg, vGPU interops with the Weston compositor through system memory. If running on a discrete GPU, this effectively means that the rendered data is copied from VRAM to system memory before being presented to the compositor within WSLg, and uploaded onto the GPU again on the Windows side. As a result, there is a performance penalty proportionate to the presentation rate. At very high frame rates such as 600fps on a discrete GPU, that overhead can be as high as 50%. At lower frame rate or on integrated GPU, performance much closer to native can be achieved depending on the workload. Using a vGPU still provides a very significant performance and experience improvement over using a software renderer despite this v1 limitation.\r\n\r\n# WSLg Code Flow\r\nWSLg builds on the great work of the Linux community and makes use of a large number of open source projects. Most components are used as-is from their upstream version and didn't require any changes to light up in WSLg. Some components at the heart of WSLg, in particular Weston, FreeRDP and PulseAudio, required changes to enable the rich WSLg integration. These changes aren't yet upstream. Microsoft is working with the community to share these contributions back with each project such that, over time, WSLg can be built from upstream component directly, without the need for any WSLg specific modifications.\r\n\r\nAll of these in-flight contributions are kept in Microsoft mirror repos. We keep these mirrors up to date with upstream releases and stage our WSLg changes in those repos. WSLg pulls and builds code from these mirror repos as part of our Insider WSLg Preview releases. These mirrors are public and accessible to everyone. Curious developers can take a peek at early stages of our contribution by looking at code in those mirrors, keeping in mind that the final version of the code will likely look different once the contribution reaches the upstream project and is adapted based on the feedback receives by the various project owners. All of our mirrors follow the same model. There is a **main** branch which correspond to the upstream branch at our last synchronization point. We update the **main** branch from time to time to pick update from the upstream project. There is also a **working** branch that contains all of our in-flight changes. WSLg is built using the **working** branch from each of the mirror projects.\r\n\r\nThe projects that WSLg maintains mirrors for will change over time as in-flight contributions evolve. Once some contributions are upstream, it may no longer be necessary to maintain a mirror, at which point it will be removed and WSLg will start to leverage the upstream version of the component directly. As we light up new functionality in WSLg, new mirrors may be introduced to stage contributions to new components. As such, expect the list of mirrors to change overtime.\r\n\r\nAt this point in time, we have the following project mirrors for currently in-flight contributions.\r\n\r\n| Project | Upstream Repo | WSLg Mirror |\r\n|---|---|---|\r\n| Weston | https://github.com/wayland-project/weston | https://github.com/microsoft/Weston-mirror|\r\n| FreeRDP | https://github.com/FreeRDP/FreeRDP | https://github.com/microsoft/FreeRDP-mirror |\r\n| PulseAudio | https://github.com/pulseaudio/pulseaudio | https://github.com/microsoft/PulseAudio-mirror |\r\n\r\nThe following is a high level overview of the currently in-flight contributions to each project contained within these mirrors.\r\n\r\n## Weston\r\nWSLg leverages Weston as the Wayland compositor bridging the Linux and Windows worlds using RDP technology to remote application content between them. Weston already had an RDP backend, but it was limited to single-monitor-desktop remoting. We've greatly enhanced that RDP backend to include advanced functionality, such as multi-monitor support, clipboard integration for copy/paste, and audio in/out. We've enabled new remoting modes called RAIL (Remote Application Integrated Locally) and VAIL (Virtualized Application Integrated Locally), where individual applications, rather than desktops/monitors, are remoted. These changes are not specific to WSLg; they add functionality to the existing RDP backend and are reusable in other scenarios as well (i.e. using the new Weston RDP backend to remote application running on a Raspberry Pi to another device running an RDP client).\r\n\r\n\r\nTo enable rich integration in WSLg, we've also added a small plugin to the RDP backend specific to WSLg. In Weston, the plugin is responsible for attaching to the user distro and searching for installed applications (aka the desktop file). The plugin sends the Windows host a list of all applications found along with their launch commands and icons. On the Windows host, an open source [mstsc plugin](https://github.com/microsoft/wslg/tree/main/WSLDVCPlugin) part of the WSLg project uses that information to create shortcuts for these Linux applications to the Windows Start Menu.\r\n\r\nWe've also fixed several bugs impacting various applications. Generally, these were problems that impacted Weston in all modes and were not specific to WSLg.\r\n\r\n## FreeRDP\r\nWeston currently uses FreeRDP for its RDP Backend. WSLg continues to leverage FreeRDP and we have added support for a new RDP Protocol/Channel to enable VAIL optimized scenario as well as support for the WSLg plugin. We've also fixed various bugs that were impacting interops with mstsc or causing instability.\r\n\r\n## PulseAudio\r\nFor PulseAudio, our contributions focused on a sink and a source plugin that shuffle audio data between PulseAudio and the Weston RDP backend such that the audio data can be integrated over the RDP connection back to the host. There are no changes to the core of PulseAudio outside of adding these new plugins.\r\n\r\n# Contributing\r\n\r\nIf you would like to tinker with or contribute to WSLg, please see our [CONTRIBUTING](CONTRIBUTING.md) page for details, including how to build and run private a version of WSLg.\r\n\r\n# Reporting a non-security issues\r\n\r\nFor non-security related issues, such as reporting a bug or making a suggestion for a new feature, please use this project's [issues tracker](https://github.com/microsoft/wslg/issues).\r\n\r\n# Reporting security issues\r\n\r\nTo report security issues with WSLg or any other Microsoft products, please follow the instructions detailed [here](SECURITY.md).\r\n\r\n# Trademarks\r\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft's Trademark & Brand Guidelines. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.\r\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.638671875,
          "content": "## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets Microsoft's [Microsoft's definition of a security vulnerability](https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc751383(v=technet.10)), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://msrc.microsoft.com/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the the [Microsoft Security Response Center PGP Key page](https://www.microsoft.com/en-us/msrc/pgp-key-msrc).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc).\n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://microsoft.com/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://www.microsoft.com/en-us/msrc/cvd)."
        },
        {
          "name": "WSLDVCPlugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "WSLGd",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 14.35546875,
          "content": "resources:\n  repositories:\n  - repository: FreeRDP\n    type: github\n    endpoint: GitHub connection 1\n    name: microsoft/FreeRDP-mirror\n    ref: working\n  - repository: weston\n    type: github\n    endpoint: GitHub connection 1\n    name: microsoft/weston-mirror\n    ref: working\n  - repository: pulseaudio\n    type: github\n    endpoint: GitHub connection 1\n    name: microsoft/pulseaudio-mirror\n    ref: working\n\ntrigger:\n  - main\n\nstages:\n- stage: Build_SystemDistro\n  displayName: \"Build System Distro (x64 and ARM64)\"\n  jobs:\n  - job: 'Build_Ubuntu_x64'\n    displayName: 'Build x64 system distro'\n    timeoutInMinutes: 200\n\n    pool:\n      vmImage: 'ubuntu-latest'\n      \n    steps:\n      - checkout: FreeRDP\n      - checkout: weston\n      - checkout: pulseaudio\n      - checkout: self\n\n      - template: devops/common-linux.yml\n\n      - script: wget https://cblmarinerstorage.blob.core.windows.net/sources/core/mesa-23.1.0.tar.xz &&\n                tar -xvf mesa-23.1.0.tar.xz\n        displayName: 'Download Mesa from CBL Mariner'\n\n      - script: wget https://github.com/microsoft/DirectX-Headers/archive/refs/tags/v1.608.0.tar.gz &&\n                tar -xvf v1.608.0.tar.gz\n        displayName: 'Download DirectX-Headers from GitHub'\n\n      - script: mv FreeRDP-mirror/ wslg/vendor/FreeRDP &&\n                mv weston-mirror/ wslg/vendor/weston &&\n                mv pulseaudio-mirror/ wslg/vendor/pulseaudio &&\n                mv mesa-23.1.0/ wslg/vendor/mesa &&\n                mv DirectX-Headers-1.608.0/ wslg/vendor/DirectX-Headers-1.0\n        displayName: 'Move sub projects (FreeRDP, Weston, PulseAudio, Mesa, DirectX-Headers)'\n\n      - script: docker build -f ./wslg/Dockerfile -t system-distro-x64 \n                ./wslg \n                --build-arg WSLG_VERSION=`gitversion /targetpath ./wslg /showvariable InformationalVersion`\n                --build-arg WSLG_ARCH=x86_64\n        displayName: 'Create System Distro Docker image Mariner-x64'\n\n      - script: docker export `docker create system-distro-x64` > $(Agent.BuildDirectory)/system_x64.tar\n        displayName: 'Create system_x64.tar'\n\n      - script: docker build -f ./wslg/Dockerfile -t system-distro-dev-x64 \n                ./wslg \n                --build-arg WSLG_VERSION=`gitversion /targetpath ./wslg /showvariable InformationalVersion`\n                --build-arg WSLG_ARCH=x86_64\n                --target dev\n        displayName: 'Create System Distro Dev Docker image Mariner-x64'\n\n      - script: docker cp `docker create system-distro-dev-x64 /bin/bash`:/work/debuginfo/system-debuginfo.tar.gz $(Agent.BuildDirectory)/system-debuginfo_x64.tar.gz\n        displayName: 'Copy system-debuginfo_x64.tar.gz'\n\n      - task: Go@0\n        inputs:\n          command: 'custom'\n          customCommand: 'run'\n          arguments: 'tar2ext4.go -vhd -i $(Agent.BuildDirectory)/system_x64.tar -o $(Agent.BuildDirectory)/system_x64.vhd'\n          workingDirectory: 'hcsshim/cmd/tar2ext4'\n        displayName: 'Create system_x64.vhd'\n\n      - task: PublishPipelineArtifact@1\n        displayName: 'Publish system_x64.vhd artifact'\n        inputs:\n          targetPath: $(Agent.BuildDirectory)/system_x64.vhd\n          artifact: 'system_x64.vhd'\n          publishLocation: 'pipeline'\n\n      - task: PublishPipelineArtifact@1\n        displayName: 'Publish system-debuginfo_x64.tar.gz artifact'\n        inputs:\n          targetPath: $(Agent.BuildDirectory)/system-debuginfo_x64.tar.gz\n          artifact: 'system-debuginfo_x64.tar.gz'\n          publishLocation: 'pipeline'\n          \n  - job: 'Build_Windows_x64'\n    dependsOn: 'Build_Ubuntu_x64'\n    displayName: 'Build WSLDCV (x64) Plugin'\n    \n    pool:\n      vmImage: 'windows-2019'\n      demands:\n      - msbuild\n      - visualstudio\n\n    steps:\n    - checkout: self\n\n    - template: devops/common-win.yml\n\n    - task: PowerShell@2\n      displayName: 'Update WSLDVCPlugin version'\n      inputs:\n        targetType: filePath\n        workingDirectory: './WSLDVCPlugin'\n        filePath: .\\WSLDVCPlugin\\UpdateRCVersion.ps1\n        pwsh: true\n\n    - task: MSBuild@1\n      displayName: 'Build RDP Plugin (x64)'\n      inputs:\n        solution: './WSLDVCPlugin/WSLDVCPlugin.sln'\n        platform: 'x64'\n        configuration: 'Release'\n        \n    - task: PublishSymbols@2\n      displayName: Publish symbols\n      inputs:\n        SymbolServerType: 'TeamServices'\n        TreatNotIndexedAsWarning: true\n        SymbolsProduct: wslg\n        SearchPattern: |\n          WSLDVCPlugin/x64/Release/*.pdb\n          WSLDVCPlugin/x64/Release/*.dll\n\n    - script: 'MOVE WSLDVCPlugin\\x64\\Release\\WSLDVCPlugin.pdb package\\WSLDVCPlugin_x64.pdb'\n      displayName: 'Move plugin PDB to package (x64)'\n\n    - task: PublishPipelineArtifact@1\n      displayName: 'Publish WSLDVCPlugin PDB (x64)'\n      inputs:\n        targetPath: package\\WSLDVCPlugin_x64.pdb\n        artifact: 'WSLDVCPlugin.x64.pdb'\n        publishLocation: 'pipeline'\n\n    - script: 'MOVE WSLDVCPlugin\\x64\\Release\\WSLDVCPlugin.dll package\\WSLDVCPlugin_x64.dll'\n      displayName: 'Move plugin DLL to package (x64)'\n\n    - task: PublishPipelineArtifact@1\n      displayName: 'Publish WSLDVCPlugin DLL (x64)'\n      inputs:\n        targetPath: package\\WSLDVCPlugin_x64.dll\n        artifact: 'WSLDVCPlugin.x64.dll'\n        publishLocation: 'pipeline'\n\n  - job: 'Build_Ubuntu_ARM64'\n    displayName: 'Build ARM64 system distro'\n    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')\n    timeoutInMinutes: 200\n\n    pool:\n      vmImage: 'ubuntu-latest'\n      \n    steps:\n      - checkout: FreeRDP\n      - checkout: weston\n      - checkout: pulseaudio\n      - checkout: self\n\n      - template: devops/common-linux.yml\n\n      - bash: |\n              curl -L -o ~/.docker/cli-plugins/docker-buildx --create-dirs ${BUILDX_URL}\n              chmod a+x ~/.docker/cli-plugins/docker-buildx\n              docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n              ~/.docker/cli-plugins/docker-buildx create --use\n              ~/.docker/cli-plugins/docker-buildx inspect --bootstrap\n        displayName: Prepare buildx\n        condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')\n        env:\n          BUILDX_URL: https://github.com/docker/buildx/releases/download/v0.5.1/buildx-v0.5.1.linux-amd64\n\n      - script: |\n                echo '{ \"experimental\": true }' | sudo tee /etc/docker/daemon.json\n                sudo service docker restart\n        displayName: 'Enable Docker Engine experimental '\n\n      - script: wget https://cblmarinerstorage.blob.core.windows.net/sources/core/mesa-23.1.0.tar.xz &&\n                tar -xvf mesa-23.1.0.tar.xz\n        displayName: 'Download Mesa from CBL Mariner'\n\n      - script: wget https://github.com/microsoft/DirectX-Headers/archive/refs/tags/v1.608.0.tar.gz &&\n                tar -xvf v1.608.0.tar.gz\n        displayName: 'Download DirectX-Headers from GitHub'\n\n      - script: mv FreeRDP-mirror/ wslg/vendor/FreeRDP &&\n                mv weston-mirror/ wslg/vendor/weston &&\n                mv pulseaudio-mirror/ wslg/vendor/pulseaudio &&\n                mv mesa-23.1.0/ wslg/vendor/mesa &&\n                mv DirectX-Headers-1.608.0/ wslg/vendor/DirectX-Headers-1.0\n        displayName: 'Move sub projects (FreeRDP, Weston, PulseAudio, Mesa, DirectX-Headers)'\n\n      - script: ~/.docker/cli-plugins/docker-buildx build -f ./wslg/Dockerfile\n                --output type=tar,dest=$(Agent.BuildDirectory)/system_arm64.tar \n                --platform=linux/arm64 \n                ./wslg \n                --build-arg WSLG_VERSION=`gitversion /targetpath ./wslg /showvariable InformationalVersion` \n                --build-arg WSLG_ARCH=aarch64\n        displayName: 'Create system_arm64.tar'\n\n      - task: Go@0\n        inputs:\n          command: 'custom'\n          customCommand: 'run'\n          arguments: 'tar2ext4.go -vhd -i $(Agent.BuildDirectory)/system_arm64.tar -o $(Agent.BuildDirectory)/system_arm64.vhd'\n          workingDirectory: 'hcsshim/cmd/tar2ext4'\n        displayName: 'Create system_arm64.vhd'\n\n      - task: PublishPipelineArtifact@1\n        displayName: 'Publish system_arm64.vhd artifact'\n        condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')\n        inputs:\n          targetPath: $(Agent.BuildDirectory)/system_arm64.vhd\n          artifact: 'system_arm64.vhd'\n          publishLocation: 'pipeline'\n\n      - script: mkdir ./dev &&\n                ~/.docker/cli-plugins/docker-buildx build -f ./wslg/Dockerfile\n                --output type=tar,dest=./dev/dev_build.tar \n                --target=dev  \n                --platform=linux/arm64  \n                ./wslg  \n                --build-arg WSLG_VERSION=`gitversion /targetpath ./wslg /showvariable InformationalVersion` \n                --build-arg WSLG_ARCH=aarch64 &&\n                tar -xvf ./dev/dev_build.tar -C ./dev/ &&\n                mv ./dev/work/debuginfo/system-debuginfo.tar.gz $(Agent.BuildDirectory)/system-debuginfo_arm64.tar.gz\n        displayName: 'Copy system-debuginfo_arm64.tar.gz'\n\n      - task: PublishPipelineArtifact@1\n        displayName: 'Publish system-debuginfo_arm64.tar.gz artifact'\n        inputs:\n          targetPath: $(Agent.BuildDirectory)/system-debuginfo_arm64.tar.gz\n          artifact: 'system-debuginfo_arm64.tar.gz'\n          publishLocation: 'pipeline'\n\n  - job: 'Build_Windows_ARM64'\n    dependsOn: 'Build_Ubuntu_ARM64'\n    displayName: 'Build WSLDCV (ARM64) Plugin'\n    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')\n    \n    pool:\n      vmImage: 'windows-2019'\n      demands:\n      - msbuild\n      - visualstudio\n\n    steps:\n    - checkout: self\n\n    - template: devops/common-win.yml\n\n    - task: PowerShell@2\n      displayName: 'Update WSLDVCPlugin version'\n      inputs:\n        targetType: filePath\n        workingDirectory: './WSLDVCPlugin'\n        filePath: .\\WSLDVCPlugin\\UpdateRCVersion.ps1\n        pwsh: true\n\n    - task: MSBuild@1\n      displayName: 'Build RDP Plugin (ARM64)'\n      inputs:\n        solution: './WSLDVCPlugin/WSLDVCPlugin.sln'\n        platform: 'ARM64'\n        configuration: 'Release'\n        \n    - task: PublishSymbols@2\n      displayName: Publish symbols\n      inputs:\n        SymbolServerType: 'TeamServices'\n        TreatNotIndexedAsWarning: true\n        SymbolsProduct: wslg\n        SearchPattern: |\n          WSLDVCPlugin/arm64/Release/*.pdb\n          WSLDVCPlugin/arm64/Release/*.dll\n\n    - script: 'MOVE WSLDVCPlugin\\ARM64\\Release\\WSLDVCPlugin.pdb package\\WSLDVCPlugin_ARM64.pdb'\n      displayName: 'Move plugin PDB to package (ARM64)'\n\n    - task: PublishPipelineArtifact@1\n      displayName: 'Publish WSLDVCPlugin PDB (ARM64)'\n      inputs:\n        targetPath: package\\WSLDVCPlugin_ARM64.pdb\n        artifact: 'WSLDVCPlugin.ARM64.pdb'\n        publishLocation: 'pipeline'\n\n    - script: 'MOVE WSLDVCPlugin\\ARM64\\Release\\WSLDVCPlugin.dll package\\WSLDVCPlugin_ARM64.dll'\n      displayName: 'Move plugin to package (ARM64)'\n\n    - task: PublishPipelineArtifact@1\n      displayName: 'Publish WSLDVCPlugin DLL (ARM64)'\n      inputs:\n        targetPath: package\\WSLDVCPlugin_ARM64.dll\n        artifact: 'WSLDVCPlugin.ARM64.dll'\n        publishLocation: 'pipeline'\n\n- stage: PublishPackage\n  displayName: \"Publish WSLg NuGet Package\"\n  jobs:\n  - job: 'Publish_UniversalPackage'\n    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')\n    displayName: 'Download artifact and push NuGet package'\n\n    pool:\n      vmImage: 'windows-2019'\n\n    steps:\n\n      - task: DownloadPipelineArtifact@2\n        displayName: 'Download system_x64.vhd'\n        inputs:\n          buildType: 'current'\n          artifactName: 'system_x64.vhd'\n          targetPath: 'package/'\n\n      - task: DownloadPipelineArtifact@2\n        displayName: 'Download system-debuginfo_x64.tar.gz'\n        inputs:\n          buildType: 'current'\n          artifactName: 'system-debuginfo_x64.tar.gz'\n          targetPath: 'package/'\n          \n      - task: DownloadPipelineArtifact@2\n        displayName: 'Download WSLDVCPlugin DLL (x64)'\n        inputs:\n          buildType: 'current'\n          artifactName: 'WSLDVCPlugin.x64.dll'\n          targetPath: 'package/'\n\n      - task: DownloadPipelineArtifact@2\n        displayName: 'Download WSLDVCPlugin PDB (x64)'\n        inputs:\n          buildType: 'current'\n          artifactName: 'WSLDVCPlugin.x64.pdb'\n          targetPath: 'package/'\n\n      - task: DownloadPipelineArtifact@2\n        displayName: 'Download system_arm64.vhd'\n        inputs:\n          buildType: 'current'\n          artifactName: 'system_arm64.vhd'\n          targetPath: 'package/'\n\n      - task: DownloadPipelineArtifact@2\n        displayName: 'Download system-debuginfo_arm64.tar.gz'\n        inputs:\n          buildType: 'current'\n          artifactName: 'system-debuginfo_arm64.tar.gz'\n          targetPath: 'package/'\n\n      - task: DownloadPipelineArtifact@2\n        displayName: 'Download WSLDVCPlugin DLL (ARM64)'\n        inputs:\n          buildType: 'current'\n          artifactName: 'WSLDVCPlugin.ARM64.dll'\n          targetPath: 'package/'\n\n      - task: DownloadPipelineArtifact@2\n        displayName: 'Download WSLDVCPlugin PDB (ARM64)'\n        inputs:\n          buildType: 'current'\n          artifactName: 'WSLDVCPlugin.ARM64.pdb'\n          targetPath: 'package/'\n\n      - task: PowerShell@2\n        displayName: 'Update Microsoft.WSLg.nuspec version'\n        inputs:\n          targetType: filePath\n          filePath: .\\devops\\updateversion.ps1 \n          arguments: .\\Microsoft.WSLg.nuspec \"package.metadata.version\" \"\" \"-beta\"\n          pwsh: true\n\n      - task: PowerShell@2\n        displayName: 'Update Microsoft.WSLg.nuspec release notes'\n        inputs:\n          targetType: filePath\n          filePath: .\\devops\\updateversion.ps1 \n          arguments: .\\Microsoft.WSLg.nuspec \"package.metadata.releaseNotes\" \"\" \"-beta\" \"hash\"\n          pwsh: true\n\n      - script: 'nuget pack .\\Microsoft.WSLg.nuspec'\n        displayName: 'Package NuGet'\n\n      - script: 'rename *.nupkg Microsoft.WSLg.nupkg'\n        displayName: 'Rename Nuget Package'\n\n      - task: PublishPipelineArtifact@1\n        displayName: 'Save Microsoft.WSLg.nupkg artifact'\n        inputs:\n          targetPath: Microsoft.WSLg.nupkg\n          artifact: 'Microsoft.WSLg.nupkg'\n          publishLocation: 'pipeline'\n\n      - task: '333b11bd-d341-40d9-afcf-b32d5ce6f23b@2'\n        condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')\n        inputs:\n          command: 'push'\n          packagesToPush: 'Microsoft.WSLg.nupkg'\n          nuGetFeedType: 'internal'\n          publishVstsFeed: 'wsl'\n          allowPackageConflicts: true\n          verbosityPush: 'Normal'\n"
        },
        {
          "name": "cgmanifest.json",
          "type": "blob",
          "size": 1.359375,
          "content": "{\n    \"Registrations\": [ \n        {\n            \"Component\": { \n                \"Type\": \"git\", \n                \"Git\": {\n                    \"RepositoryUrl\": \"https://github.com/pulseaudio/pulseaudio\", \n                    \"CommitHash\": \"0e691b96640919b1c7ed91ae9240761c5775deeb\"\n                }\n            },\n            \"DevelopmentDependency\": false\n        },\n        {\n            \"Component\": { \n                \"Type\": \"git\", \n                \"Git\": {\n                    \"RepositoryUrl\": \"https://github.com/wayland-project/weston\", \n                    \"CommitHash\": \"04d3ae265d8d8f84352c8dac21ec40b2fe07e7d2\"\n                }\n            },\n            \"DevelopmentDependency\": false\n        },\n        {\n            \"Component\": { \n                \"Type\": \"git\", \n                \"Git\": {\n                    \"RepositoryUrl\": \"https://github.com/FreeRDP/FreeRDP\", \n                    \"CommitHash\": \"39f56443f2dc50e0dcfa52d4f8f15008d5b8ed8e\"\n                }\n            },\n            \"DevelopmentDependency\": false\n        },        \n        {\n            \"Component\": { \n                \"Type\": \"mesa\", \n                \"Git\": {\n                    \"RepositoryUrl\": \"https://github.com/mesa3d/mesa\", \n                    \"CommitHash\": \"731ea06758663a2de3a2bd1f12eb8809d4c136fd\"\n                }\n            },\n            \"DevelopmentDependency\": false\n        },\n    ]\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "debuginfo",
          "type": "tree",
          "content": null
        },
        {
          "name": "devops",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "msi",
          "type": "tree",
          "content": null
        },
        {
          "name": "package",
          "type": "tree",
          "content": null
        },
        {
          "name": "rdpapplist",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}