{
  "metadata": {
    "timestamp": 1736566277418,
    "page": 24,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chromium/chromium",
      "stars": 19605,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.99609375,
          "content": "# Defines the Chromium style for automatic reformatting.\n# http://clang.llvm.org/docs/ClangFormatStyleOptions.html\nBasedOnStyle: Chromium\n# This defaults to 'Auto'. Explicitly set it for a while, so that\n# 'vector<vector<int> >' in existing files gets formatted to\n# 'vector<vector<int>>'. ('Auto' means that clang-format will only use\n# 'int>>' if the file already contains at least one such instance.)\nStandard: Cpp11\n\n# TODO(crbug.com/1392808): Remove when InsertBraces has been upstreamed into\n# the Chromium style (is implied by BasedOnStyle: Chromium).\nInsertBraces: true\nInsertNewlineAtEOF: true\n\n# Sort #includes by following\n# https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes\n#\n# ref: https://clang.llvm.org/docs/ClangFormatStyleOptions.html#includeblocks\nIncludeBlocks: Regroup\n# ref: https://clang.llvm.org/docs/ClangFormatStyleOptions.html#includecategories\nIncludeCategories:\n  # The win32 api has all sorts of implicit include order dependencies :-/\n  # Give a few headers special priorities that make sure they appear before\n  # all other headers.\n  # Sync this with SerializeIncludes in tools/add_header.py.\n  # TODO(crbug.com/329138753): remove include sorting from tools/add_header.py\n  # after confirming clang-format sort works well.\n  # LINT.IfChange(winheader)\n  - Regex:           '^<objbase\\.h>' # This has to be before initguid.h.\n    Priority:        1\n  - Regex:           '^<(atlbase|initguid|mmdeviceapi|ocidl|ole2|shobjidl|tchar|unknwn|windows|winsock2|winternl|ws2tcpip)\\.h>'\n    Priority:        2\n  # LINT.ThenChange(/tools/add_header.py:winheader)\n  # UIAutomation*.h needs to be after base/win/atl.h.\n  # Note the low priority number.\n  - Regex:           '^<UIAutomation.*\\.h>'\n    Priority:        6\n  # Other C system headers.\n  - Regex:           '^<.*\\.h>'\n    Priority:        3\n  # C++ standard library headers.\n  - Regex:           '^<.*>'\n    Priority:        4\n  # windows_h_disallowed.h should appear last. Note the low priority number.\n  - Regex:           '\"(.*/)?windows_h_disallowed\\.h\"'\n    Priority:        7\n  # Other libraries.\n  - Regex:           '.*'\n    Priority:        5\n# ref: https://clang.llvm.org/docs/ClangFormatStyleOptions.html#includeismainregex\nIncludeIsMainRegex: \"\\\n(_(32|64|android|apple|chromeos|freebsd|fuchsia|fuzzer|ios|linux|mac|nacl|openbsd|posix|stubs?|win))?\\\n(_(unit|browser|perf)?tests?)?$\"\n\n# Make sure code like:\n# IPC_BEGIN_MESSAGE_MAP()\n#   IPC_MESSAGE_HANDLER(WidgetHostViewHost_Update, OnUpdate)\n# IPC_END_MESSAGE_MAP()\n# gets correctly indented.\nMacroBlockBegin: \"^\\\nBEGIN_MSG_MAP|\\\nBEGIN_MSG_MAP_EX|\\\nBEGIN_SAFE_MSG_MAP_EX|\\\nCR_BEGIN_MSG_MAP_EX|\\\nIPC_BEGIN_MESSAGE_MAP|\\\nIPC_BEGIN_MESSAGE_MAP_WITH_PARAM|\\\nIPC_PROTOBUF_MESSAGE_TRAITS_BEGIN|\\\nIPC_STRUCT_BEGIN|\\\nIPC_STRUCT_BEGIN_WITH_PARENT|\\\nIPC_STRUCT_TRAITS_BEGIN|\\\nPOLPARAMS_BEGIN|\\\nPPAPI_BEGIN_MESSAGE_MAP$\"\nMacroBlockEnd: \"^\\\nCR_END_MSG_MAP|\\\nEND_MSG_MAP|\\\nIPC_END_MESSAGE_MAP|\\\nIPC_PROTOBUF_MESSAGE_TRAITS_END|\\\nIPC_STRUCT_END|\\\nIPC_STRUCT_TRAITS_END|\\\nPOLPARAMS_END|\\\nPPAPI_END_MESSAGE_MAP$\"\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 3.9453125,
          "content": "---\n  # TODO(crbug.com/1282228): reenable google-readability-casting once it no\n  # longer has as many false-positives.\n  Checks:          '-*,\n                    bugprone-argument-comment,\n                    bugprone-assert-side-effect,\n                    bugprone-bool-pointer-implicit-conversion,\n                    bugprone-dangling-handle,\n                    bugprone-forward-declaration-namespace,\n                    bugprone-inaccurate-erase,\n                    bugprone-string-constructor,\n                    bugprone-string-integer-assignment,\n                    bugprone-undefined-memory-manipulation,\n                    bugprone-unique-ptr-array-mismatch,\n                    bugprone-unused-raii,\n                    bugprone-use-after-move,\n                    bugprone-virtual-near-miss,\n                    google-build-explicit-make-pair,\n                    google-default-arguments,\n                    google-explicit-constructor,\n                    google-objc-avoid-nsobject-new,\n                    google-upgrade-googletest-case,\n                    misc-misleading-identifier,\n                    misc-homoglyph,\n                    modernize-avoid-bind,\n                    modernize-concat-nested-namespaces,\n                    modernize-loop-convert,\n                    modernize-make-shared,\n                    modernize-make-unique,\n                    modernize-redundant-void-arg,\n                    modernize-replace-random-shuffle,\n                    modernize-shrink-to-fit,\n                    modernize-use-bool-literals,\n                    modernize-use-default-member-init,\n                    modernize-use-emplace,\n                    modernize-use-equals-default,\n                    modernize-use-equals-delete,\n                    modernize-use-noexcept,\n                    modernize-use-nullptr,\n                    modernize-use-override,\n                    modernize-use-transparent-functors,\n                    readability-redundant-member-init'\n  CheckOptions:\n    - key:          bugprone-assert-side-effect.AssertMacros\n      value:        assert,DCHECK\n    - key:          bugprone-dangling-handle.HandleClasses\n      value:        ::std::basic_string_view;::std::span;::absl::string_view;::base::BasicStringPiece;::base::span\n    - key:          bugprone-string-constructor.StringNames\n      value:        ::std::basic_string;::std::basic_string_view;::base::BasicStringPiece;::absl::string_view\n    - key:          modernize-use-default-member-init.UseAssignment\n      value:        1\n    # crbug.com/1342136, crbug.com/1343915: At times, this check makes\n    # suggestions that break builds. Safe mode allows us to sidestep that.\n    - key:          modernize-use-transparent-functors.SafeMode\n      value:        1\n    # This relaxes modernize-use-emplace in some cases; we might want to make it\n    # more aggressive in the future. See discussion on\n    # https://groups.google.com/a/chromium.org/g/cxx/c/noMMTNYiM0w .\n    - key:          modernize-use-emplace.IgnoreImplicitConstructors\n      value:        1\n    # Use of `std::ranges::reverse_view` is inconsistent with\n    # Chromium style. Recommend `base::Reversed` instead.\n    - key:          modernize-loop-convert.MakeReverseRangeFunction\n      value:        base::Reversed\n    - key:          modernize-loop-convert.MakeReverseRangeHeader\n      value:        base/containers/adapters.h\n    # Exclude some third_party headers from modification as file paths are not\n    # starting from repository root in replacement suggestion.\n    # 'build/linux/debian' excludes system headers as they don't have\n    # appropriate IWYU pragmas.\n    # https://clang.llvm.org/extra/clang-tidy/checks/misc/include-cleaner.html\n    - key: misc-include-cleaner.IgnoreHeaders\n      value:        (gmock/gmock|gtest/gtest|third_party|build/linux/debian).*\n\n  ExtraArgs:\n    # b/382774818: disable unknown pragma warnings until we can figure out why\n    # unknown pragmas are being warned about.\n    - -Wno-unknown-pragmas\n...\n"
        },
        {
          "name": ".clangd",
          "type": "blob",
          "size": 0.2578125,
          "content": "# Disable include-cleaner checks, as Chromium doesn't enforce them and they\n# just create noise when working with clangd.\nDiagnostics:\n  UnusedIncludes: None\n  MissingIncludes: None\nCompileFlags:\n  Remove: [-cfg=*, -exec_root=*, -inputs=*, -DUNSAFE_BUFFERS_BUILD]\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 30.0732421875,
          "content": "# git hyper-blame master ignore list.\n#\n# This file contains a list of git hashes of revisions to be ignored by git\n# hyper-blame (in depot_tools). These revisions are considered \"unimportant\" in\n# that they are unlikely to be what you are interested in when blaming.\n#\n# Instructions:\n# - Only large (generally automated) reformatting or renaming CLs should be\n#   added to this list. Do not put things here just because you feel they are\n#   trivial or unimportant. If in doubt, do not put it on this list.\n# - Precede each revision with a comment containing the first line of its log.\n#   For bulk work over many commits, place all commits in a block with a single\n#   comment at the top describing the work done in those commits.\n# - Only put full 40-character hashes on this list (not short hashes or any\n#   other revision reference).\n# - Append to the bottom of the file (revisions should be in chronological order\n#   from oldest to newest).\n# - Because you must use a hash, you need to append to this list in a follow-up\n#   CL to the actual reformatting CL that you are trying to ignore.\n\n# Mechanically rename scoped_ptr -> std::unique_ptr and\n# make_scoped_ptr -> base::WrapUnique.\n08daa0770adc348a5e3852200352b2cd7f620d21\nc6378bdd46cb9fbeb4e7a0fbb37d820f8b82232d\nc862da8ac734722d6928b64ae87564bf2ee0d2ae\nea64f7caeafef5b77b656d03b4b8c4ec8edab4c0\n03c6cc125a0f63fcf549db5caa525ad5941fffd8\necb4a22b939cdcd3e022ee2c452dd7f866d1dfb5\nd1b5b043fcf499cf46d059f5bb72a6ab07f04d88\nc3d183bef609f3c4dab124572281ba13257d37a6\n1795070c67cd08f5c5437b4e0d3ae6e5d3e5fd13\n1aaf50682f5b06bea8db36316dcddde48444b54e\n093de9b30c0ba6ded896506a297314e5ed818b89\nf1bc82901463a76329b480e1ce55638d105f4616\nd521b63cb0fe3d78ed64bbba2c4cfacfeb7ebfd3\n0765c49ae6fb26c49c98bf9205d690174de3c0e4\n1b185c49a6f2e9eea0bac36132f79b8ce50f529a\nced9224fbb7866e6ea7e9da221c0b2570008bd55\na37bedae9c23a82bf8b2f9011d06c9933e0048db\ne0d99834d5d8f817c55828c1f53b4d0946b2d6df\n942f39d75745824a53ef6ce896bb2462010476bb\nabbf4465acfdb9c8d6223c680b634f1fd506813e\nc3df9bafc8db94bd613fbd76c61abe5057f7a82d\naeceb05e862d97596a0e005a17a4f7d61183b818\n24002d093cd0d2b540b0b1895d0044d44a30450d\nc3e80570c413b058d8f855a695610b38072d6519\n6e25ed32b8e7dca8352af477dbc82b67ac836736\nc963c714c99f34bd80b392d9896ca9cecd66fb6d\n9603ab9714083051fc19942aa171d88af2cd379c\n3c3c93d549f8685459c9d938e81f1e68c888ad6c\na9454747427889f70d14df4646f7f599d00df02d\n566c3c55ebc5fa4600c3e6259938c3f9e1baf483\nf064cccace7bf4d940a494042754760f07e8164f\n0a6e80cc6b045cb1217a59ad3c9e764c36fb0260\na500b69aa06c2bc084a3b1867b9824f4218014de\nd1a1847163c0038284a7053b41ba0dedfad9b7b7\n2a193281aac690b3fdfba1246d6b36877553a9be\nc16dc809e7c8026d8fad7d9169f324df7ab6b1ce\n67e2c0a015fb2d2d2584a44b96da1620d2678bf5\nfd6a38135a1dd716d0f00a86900a03a931a697db\n3b4fe476046af664ea30dcfffb10956eeaba3b9e\n40ce7b38f09de969a106da37e4dec11464da18c6\nc864f52514c7e8cf9992a524e0294b1cc32c1db5\nb4e18e45c933153b06833a33bf6352c5da38125a\nf6c40587bc9ee68ef8102992ea5c52cc8e0c6933\n60bc3bcfa8b7141986c5e4b3c357c7e03393f230\n9bfa516692718597507a3339a33dafdc7c2f00ba\ncedca561f373a9f2d102e7bd896712b504b445db\n86be9c00e6a13acad1851ddc64182a94347c9420\n92ae1414e686f8f8ba9c5c663b34552362641feb\n531cca917021e753d5215ddb194200be075944ac\n4ac58c7a6c73f0972e73ce420749f886a8aec18c\n5971627d34ab2cca303e4a4552fecf2f019f61c6\n6003e0b1ac1acb0a3973abbca62881d2b6acc0b1\n08c9d69b0c0d625d2ce38e3d8402f36e1226f0fc\nae4a290306d308cd6c7187df85c1825edf3354db\nacd68a2e07af43fa67def3830555f294eff2ac8e\nb743cc6790dd88fd5b53e4a21f089a38b40a53f8\nb587f9a457ee20bfc4e3055f3b79ad7b522c8682\nd82cd995ba83303302900ebe7704a9fab405ef93\n7bacc0eaa9eb6edb22c9e2734e0e57e64e8b4125\nfabb28482dce40e1ac570beb5b9eef5832f9a9b1\n1007a4af51fee305fd95933d9bdcd83c89f9df29\n6cb57924b37070a844c7626bc2ab8850c7cf17dd\nf427502355334e64faa24798a34f7db9f3bf7871\nf624e47486f525e6d266b99f90bcb81ad8f57295\n8b51c0ab6c7b58cfa186691dcc973527371b2309\n25c52c3f3c407fd9f5678c0079c877ccef34c090\nfecbe3fea62c512555c2f9c63b936331c9915619\n79ce717c93677da7d3db074bad0349995980ce93\n5197113e6864b0530dd8b489615c089facd06e70\n532924d626b6538b547fd00793f0373bb5271df2\nba06265360528b619b4e6df792b0fb06350a2602\n5ea05e40ab4ad7a6f6dbd4fabd2ffe061d9e15f2\nb8eac3a8edbd7864438f5e326893fa52da75c16f\nf5d315cecedf2bc83f7499d9c4311215db51ecc6\nf402ab9f3f02d00d87c840fe79863f4ac0609ba1\nbf70795c3d53b4c087b4276069bc8798048497da\n4e7c042ce7fda2baafe59dd88481b2de67644170\n4d0d72efb14b4746ff054fd1867058dc6997cafd\n71f677162f1b860b005e20fc9c2f2417bdfb7030\n1edb03a4943e4e3de4116adcc031e2dfabbb7805\nb11f7ae342eeba3a126b8270171ab3c6981e0bf7\n0569a0ed6347980265b437c61b5849ee2ca2c529\n08cfe9ba9528151087b93894baaf4390a4ad75d0\n878bd271da9444eba2a823fe30f0c316656b0d0d\n8522a25bece204fd7281ec764af1e0c8e36329d6\naee3e1ec72a9985aa20be4ccf514774373737705\n655b66c64362dbea1b7e27207545234f7b908106\n9c5cab5a712d0762319d115a30f5baed1d07416c\nad1777e9c39dc1c7c4d4fb6293a01ca470595134\nd04b92dd6de3bbe80c94955ac3347523e891f93d\n42edb859e1917c96b988fa2f4e204de63aeb18ae\n22f90e716ad8674d122781cda62ab739ecb7271c\n49964c23cbba511c110cfb642f5685694a895d49\n8a98ca292bd722516ad23b2d85fdb5663a33dab3\n3a4770da8b56e8f4c0ef1a85f5786afe35f5401e\n1fd259a0929d9c8ee68923e29ec1bd60d88f5690\n7f767e658961d89959af3bd143e7719fcaca8445\na9850e17ec8a7e5e754d2b804ea1a93ff2352310\n4af48586364b625a8bfce51b10aa4a76109a9108\nc0e39d57d0c16684ff7c99632fba9a49d4d2431e\n6682b1c4aac00aee61b09ba8f6084f1790429315\nf6f806674c4f6ebbb8b20197ae5b6c7a40bba08f\na3451b74e1aac0c538d7d6824bd714553eb0141e\n39fafebd8ff93ca8aac361926e6b3ef840302328\nccfc5401e32e24f29847cd91f643d03ed651b19a\n2f01269f405de0dfd12cb1dc56459c4492d65b8b\nc314381373dc794d3875428994ec7a74edda77e4\n31759da04512d5815aff6c30134e33856638889d\nf5d2410841791e8c32739a4418159489e1dde324\nb21a1b10f9a753d3b66e448ca8fa74ac83d5c2cb\n18e946f9ab6250614430fd09cccb849005ca7aeb\na77e28eb3b14d816f2c880d3185af8522c04f6bc\nd99c42a1a3c4566d5cdbac0bbbed5c266d09cfeb\n8a9783e4c8d986f835f8cc2760267d6c1c7b0b57\nacd3f5279c9bc0c73f25976e1cdfa72f43309dba\nd967d950d071094d70cb480dc3158a48949a7167\n7036d1e571ea31ea7ae35c9cc71890cef2fa90d7\nfe3745e624cc39bca68defa70d92390baf897c8a\n00dfa74c4fe33466816c58d175b60c3a5d4683b4\n259570ccaf98009037d611aac72e9d809d4d438f\n40c732a8f3bb63cc6a16a200819f9d01da3e6039\n254c536ce14380dc8009240cfff27117a1d52897\nc51ac9e88916cb09ed5f0c4ea7d00d835f4223c7\nb8259a16dea373e71505b1f8d9a02b96612161df\n04a35cd4ca655ce8092705d501678ba9edfd005a\nc0d9887721c7d00ad99a7df09ebae75720503a6a\nd0fc6aa9a949b8093d5e836e3d6443e869495c6a\nb94ac84f0dc33dcba4d27424777a14fadbb659ef\n24f43a5e9841b7177688291a625a373c3b8ba365\n5f043bc0ea7c069e3ef5e6ef903b98f4e84ec4cb\nb707c5c8bed8656c800f613b46967b916e1a7f44\n3076abbf53ffb74830a097f1c4f7dd232f246fad\n154b22210617a1f3f58d0a19d8b30ea9409b98e4\n7c2ca35e78f7ba433da3eef399753148fe30f127\ne399ff07e13116e446b1ee904c1f6c970eb5bc3b\n477cae30f89224646d3135ae03cdf93d4901dd78\nd4593e75ceb64dbf966fc77530f4bd38cdcb687c\nfc1ac3074134f30e46543f5d9ca97d5d2a6d0282\n6430b2ca82390ebcecedc6c0dbf54008af8322ca\n4d55af59cf486412be6e5e458417f6a423abd7da\n501f801f0aa603ae08f213091de67f23476eb40e\n396f876cf9e02a21687bb78364c2e3c930287e9e\nef0ef5d8d5ac805e400ed5826a8b9ca57aececbe\n5b9c7ed6b732c9b65c851413d0fa5612edc95b85\n91cdd51340b8f6a0cc13ec9f5199defbea6cd49c\n4a7e93b6b2a43ecf9476695bb9046d59a39629dc\nbb7e2b70c8aace67356a53230d104738ebc92693\n45f93419065eb07f861fe59e3f969e2b3255b2ed\nb753c6fb8b539a9c5febe08f6b159f01b98ecfa8\n7089de047f9845b19afd5b671ace13aa1aa3ad42\n03de39b2f64eb2e9fbe69947be3d10042f30469e\n3f767dc3724b2e3f36c17ee760007475de7e63cc\n82beb4ff418b0dcb40bd6b860d2e9793a0193118\n6aaed6a40bc23a872e14f19a39ff2d7998c803d0\na0ee5fb8a4dbf546b8da197a055dd3997f3dc475\n4d43bc26cc5d105edb1e976582803ea931e572e1\n84c358e7a3b1658bf396d39716fb0fffbb0aa018\n\n# Move code in ui/gl/* from gfx:: to gl::\n7a4638457b6cb7ba351c57b98f1871209604cb81\n\n# Remove OwnPtr from Blink.\nf5f08765522594f41a1c032754e4fbc30e90c134\n\n# clang-format all of //ash\nb8dcef526018a47e7cd985cef724c464d0d958a6\n\n# Re-write many calls to WrapUnique() with MakeUnique()\nf7a5d36f502f953bdceaeb9a4c31ab621f89be08\n2b385fe1ca886bbfbc38648f1498a154ac85925a\nc4bfd81cdab01a081b08d362b864df0dcac4740a\nd689a77f1fcbd63909fc6eebf3df553715fef9bf\ned4d66a321cf2f053ce0c3c81e8ad51a453d75ec\n7344d1ab4a98fedab5e75070a8b03aa894ff3b74\nc5ddf366ba98d052497b5dc56187704f914ec8f6\n6c0773df4a2c301b1d109c9a1ce50b2181fceb50\na40b2de1242abca45b546dc13114d1a5aaa41134\nc9462d4d25114bbdfa25f6e1ca28eca3303e8286\n799a1fd2f3dcb409f751b950f767db427664cbd1\neb5cdbe2b1cb6dedbb51c544b0cc94b20984eadf\n68860bd0684a7cfdc2bf07ff768bd540a60a6e9e\n5e27337b381e1ee8c487f4b4cab71a9a0e6d1b0f\n04dff7f22bbbbfe8b696e7f0dba2c11fdb6f38ed\n85bddde312d17e38e859de39f861711d504732b6\n6affa5574c8085dfc255f13ff49cb19edbc96ad9\nfccaf874e0338cd3a27c0ef71c635399d2197de2\ndf0a9da0c9e6b7ceed46e057ea5ad87a97932b9c\n08e66e6f17755de8d0082593183f7d67ce13cb57\nda4bffb6ef5cb7c8894c64d4666ac6a5da4d80fb\n8133ff702313ecbb52f3903838418cf5de676ab5\nebb92b4123f784b2fc950a2e762b0ef2c8342764\n46ad5f4fc0f8d35f71c890431e8e4518d228f2e3\n1f0ae4df06a2a8c764c3659679525a201d7a20e7\nb6983d553d1cd861d8f7c42a07ee209da696e1d5\n0c937aa64f5309be50d077dd0d29014cf2d0e9b3\nbb40326f4ba96cb2691e33855d07a75cbb9c57b7\nedb3f078970c02c48cb0eccc07170e9463f63eda\n3cdd7ebe8bd324d3174e8ec3253190908e717a36\n175211e0e340c1e0a01286b96aca51e700294b5b\nbc3c05e020ebed67cf32ff9648e7ed2b0e9f82c3\n91d6fc12ddbd78adc66ca00d54a9c318b4e3b6b7\n8fcde24af7919904a7f2f9b9d452da8c575095db\n29649b991045c05394dc42641068934b9d494e80\n85ec579564402fad9b6f0d593decf686846fb61f\n34f9699d9be6dd32931c9e694f61b3022346f4e5\n55d8215215c10a413f227b8bcf0e3a826e7b5b2a\n641bb021db42cdfd711a97bdc16077c64bb87aea\n9b4b8464d50e235b25ceb2872d44d09a258837f2\nd4fe03704abb4c3628cddff5c7aa8f82b86b2b21\n2deef68d60652155b338b88b1acc1f4be1c51ee3\nec7c3997e21fc154ab89a26779d00220c48324f4\n86fa1dd92331ce969c55ade017aab9950e0c5156\na63ce1fb29a4c1aa568d916aaba717986d515b86\n\n# Mechanically update auto to auto* where a raw pointer would be deduced.\ne8f87e7cc93e47aeea704006fe1ebdf273ddaba9\nea7a7551eb59fb06ae5a488ee20faf91b2695d7d\n5170bf98eb5ad7c6ebbdad175ecd478c3e48ead0\n6f21f24e143e691e3635c06e906b1f8917d33dbd\neb900a1e034e1abddcaf7fdd7bb05c0d75cf0b62\n63daf7ca9ccff9c04a584cb97237ee0eb6c13fa7\n1ee03c4c04b838817fd89a9c384facf40a289dae\n2f37e9e61a72d10f5c9be9d5021445eacec42ad0\n238f0a029f813ddc3c5a3438d8896a01cf1c5aaf\nf4cde239e090fbb84afc4cd8315d22f92e6fb3e3\n981aa5a100145aee038661b81db780edbb257a09\n2de366b533c783f31c6233f4034a8fa070b29db9\n038b95619952006436c8feeb058e4ff45f510697\n4058ac6be8672005d3113d49b945d9874e01f37c\n10e0d5f672745230042c700577feb7fc66f00f15\n0b93e11fe659a7d3e68bdc318f4d0ec1eef69ad4\nae72b08137e2ca7af8b3fef367af33be0866ef64\n668a5386d4e352fccf29893b848797d2993fa8b2\nc5999f9e1035f7a7f32c416c080afaa8cb0837f7\n6bcf17c7e6c8a5968a63a9d761d2dda7ecfbbe39\n7c035fee8e8c3c0667923a161253a13594ed021c\ne825f6a8e8ab12b450409be005d41a7849f0d6ab\n8dd57e1b56672be11e9539d9223ffa583cd8625f\n6b86f80e5578519fcf5b3a19767bd53e86112f15\n922b0234f015fe1cb46d40a4cca119efadd5bee5\nf1172137682cec61334b4822f862c782ccbd9167\n4ee88f9978720b2d7f7d683f933c4d6bccb23413\ncb7343e6af785c9b194f7d9aaa713df94facdcab\nbd00db280f3c20df00d5f178c518370a920c2648\n3af234130c64de89299201845b46dcbd11eae4b1\nb62fb540edd2d4fceaf6693a51d691cb195e9047\n3986a102dcd2e16aacb98b19b743a94e86f3aa20\n3d26e74634a9470e3ac06911ee899ce0ffc06339\nb0e145b14f1ae5821f187e2297e538ac56c763dc\ndaead0ee14bf28ce22e7603a685fe1c12ae31607\n952ffe1735f2c5b41a8eab6851f6d6a2fb673152\n19df8256c07f1c044cb3638849ea8bc928493b2e\nd11ed91e72f49c6ec0d9cd2a3d5ae7bfe451b618\nfabf492cd95ecc8450cef4f46da08652d694c206\n4e388dd146895127c51b881fdbbdcf524e2a90f9\nae7d4b87b676f061748707109b20ab4814953a41\ne1fee825d91a55d177dcad13ea8e59f0a6b7bb4c\n89f7240e789d4e077b87c14a6094adf7be61daae\nf1af449e6d087f4542485401ea5fab3a63b1d68b\nb20a6b27f2c4a845973b4d8cc828ef3c2f51f050\n418dc6a24457bcb6c2c8ffdd95f5993c7e3e05de\n0168cdbec15153330d9a7f6528316176b02282c3\nbb89de9c690710b8e43e60f421b9e2c3462638ea\ne122d0f1cd07bb86382804d973b097185e75dc6e\n5d70c084a742a5e4ef37c8a40e4b31e11306f8c7\n87fe42802477a954f8a60ebda917f6cfc8244f7f\n04706fdd21f2dbcb9444d55048412878fffe0888\n142de3b623ab5cafdc8fbedbea7474790878c2e6\na5be776a37c46f6a8792756cec52973d4390a845\n587cf8faa9a3914d98abb0330cffcc80f284c998\n291fde65aa2a5ee3a1036fe90cc063243e1dc51f\n6f27af2b5c060be8ccfeb7b11be15414144c2879\n437438d084b2ce1227a2860f8ee5698797b8835c\nfe45a535ea84cba23a9b1355d36525db0d408280\n49740b50472837cc4b4a3ed8402ac56802338464\n747f5543ff5e4c201bcba0182bfd24e5e6896d28\n\n# clang-format blink.\n1c8e1a7719e9d223cc84e838c9a31a0210f5878b\n\n# Reflow blink comments.\n4e1cadabbfa289b8e565114fe51a32980c996d93\n22a064d580892d6032977eff027a25abe132cfa8\n4013d22a7d6569f5761b437d88b9cf716909f223\n3b2d0607127d98646c789531defd953801fd3ddb\n52a0d0922dcdbab46f18c241fff034ac8d139d60\n5d6fc8b5a83846ca93f906584e0350855b194bdb\nda71ffa5eba20d97df583821ef5bc20778847a86\n35c6377052771b615c563e1306141d1082c25e71\nf053eba0ad183c9d098f18e55d14216f5deb1c0a\n570d5892c1f86881947b5f237e1b705dd569d241\na6508ca00c122034df41b20985aee9b6b892ddd2\na2041d07dcc0d3f799675c8971f6b5dc588c37d9\n3c13b6e7f8eccc79baf7cdd1e05234119bab2b44\nab33ca94648d4717acf5f2628d3e2613bc21610b\nfa6ea29dbd5323d2138abf686074f75b14919be7\n515bb3084e26e5ffba3a7ffa6cae6d06063b911e\n9a8271ba3b27f738c01986f3033fc61725b39f72\nb236186c2c23bec4ca49a5ec3f20050c9271e22a\n7e74e9d1d86dd7d4e109e6757b6e623536359083\nd9019bdca3200c4bab868422c6d374175555bcc4\nc95a15bde2f28ffc43f9e704897cd350d307ea3f\nbc70ee84f5dc0a2d791c4f650314cb3fd8d7bd26\n3ef2412e118b0018ccb7291358391131894c4e23\n566600aa3bb9d95b58e8824c50abd5a3c1657dd2\nebaaed67656c010067bd52ace76c1391302eaa05\n16c0fd8db8d05c48e4f4972a494d49c84917276d\n9968503c3e2d1b3003af061d1c47f017bfdd5cc9\n56d5d7aa7ad96ad3c853cc128a769404f6e0294c\n0632d8e8fd2d3b985563b3f9fd0291236d8f96b7\n7362281c877e7f5be41e542de3913c900941090b\n4215d1e8125bc3d8084c3a72da49e9b985ed04b8\nb873e02f086898e946c374f628fdc7b1cb47ce37\n11b4bbce08c2497a1c476db867496d4e194f8f89\n9b328b83181b5cf25115b39efe1325f121f9adb3\n576dc3cfcba01528ddf5739342a7f6f6109816d2\n6e2439b1e0164bfc9cde2afe00e46e078d0159c6\n66c9f33db7aa115b6385ca256979f5cd6bd90ad7\n634b8c3ca1ca0d719e3771a384b2e4ccc06dfffa\n55e6683f5fad4e9ee67af77ffc2300cf4198c195\n29c29f18164bd942cc66b6ffbe78b2901b9a3753\n2ca4e6adc710c7ca833a91abf1eac7cc10c20034\nffd9957533d6ee9facb544a2968f3a7b6a2186ae\n119f976164031b951476a52270160b926d804490\nd9dd690e6b182eb3201891b2cfe3a08a9c7945d8\n7e11f64c25bf4667b30360e6a0e359588c6a1878\n7d42a66f228745c4b437b77ab92cfef81a399465\nb261e056bd1d62f8fc25767966ea5e2668462cc9\n743d7ca4ac81e162cdbc92e982e611fda92b10e3\n81e196d0bcbcdf404c52a2173cd78cac8848cee3\n032a07551461da50acc287ab6cd6a8957ba2418e\nbb8dc4d8ad52c3ee404fa1a0bb1f770e6a0dbd03\n78993c760eb6ea63a6e04fe164c488367bbea24c\nbdb1f4d6e4c48f96807ca2e20ae1edf1edffa071\n4f0cd5c718bd720be986c43d923778a13e9ee89c\n0ce7ace48ceee1ce97b6a2ef3e1fdcc8f295309b\ndbd833d6588194e9117ac7494839d7b6651a1a57\n4a8a7ad6155544b087fdedff4bcb4e4a5a35bbd1\na66ca9569860c72763c89146704a4a8c68efaffc\n9a90cae3a6ce67acc981fa87f48d99374a00d78b\n100fff395562319824e96af9328b847bb14043f2\nd2a38acd7c8f91971cd83a4dae1343ddb7a21496\nb68f48701966427c18cbb63e3a15e7dda4fa19a4\n26e2733660998f34f0998a56516c317fcaaa9359\n7f9ede63f194fa5e4cf1c62e2b72dbc9f1ee0471\nd0909e12aaaf66534aee43edff36ed08e746e0cb\ndc08ba6bb0d6141914698b87f83fbefda6481d15\n69b89efbfc2bbb21182ed1407b1cf467f5add3df\n0d94cbad339ccf1050c30718d99665306352d99b\n16f372650f9fcc6fd309216f3e077560fee89c36\n18252f6e125994521e04495b2111ac36ad6a9703\n19588751197923c2c7604dd71c361713f9c1a07f\n1c6f256b3c2193bab840b5658bb1d115e383428c\n32f8e4f892d2f2a887b33dc3eb3fe78a2a70dc4e\n3704c018a0c4f287daa5aa0ce6fdbdf6444fcd49\n5502b5a19ee85fb3d150dd20ce386f1699d45c01\n6664f8e0a2e420d96444ba04b3c723341c1c17be\n742cd0347b9999467d82e6f8a28a7d3b5673c19d\n83ae2a267ea1f53212780c2d4eb9129b308388ec\n94615e6fbd1d730ed5446979b57c417b0d241179\n980f63ea8f6c7b647e6cdd7e773903fc536ec1a5\na5d709a0105ad9fc825ec40edf0d28abaded87d6\na729edf941b224161ce6d9510dfdf272c0132518\na72b163a4b9ba97742a7cb442e4c566ec9c6c909\na97502df26f798c413dda0ca9107fec5f3ecd86c\nab02cff195528182f60268891250537a6cf2f163\nb31a822146111d8965d7c4c4884e9b9f71bccb80\nb664f182f72117ad97d2e83206d35edac90bb55e\nbd1a920e6b9db5852c3248798723a70edfbf52e6\nc71eacb21bfaa2f7fe6580b3e17f57819142ef3e\nd3e0e6655a412956248d217baa397c5f6af2bbd3\ndddb09f2c1400de9a69966a1a697604cbae0bfdb\ne32a7e3865d11aa1e3742f9438ddb9fd0ca79cf5\ne462f7cce1b45cc62a96abc33fe9961504c756d8\ne9cd023a911baa558b1fe8291a001af54e24e6cc\nee42b66bf9a0c37018e03a5eb53fba6f37dfc0c0\nf06ae6a557327aa7d10755d65ea7f02673431054\nfe06ac8eac8940be169f918a7e5845e0a0e51c6a\n\n# clang-format NTP.\ne8969bcc1d3a7841c604f451798492b5e2172013\n\n# The Blink Rename\n1c4d759e44259650dfb2c426a7f997d2d0bc73dc\n\n# DEPS sorting.\nf5e7996a0cffea847bb2c14bd8c49a1d9ea3749e\n\n# The Great Blink mv\na30d423812ad0d766e93b0f3a53523807b50b17b\n0aee4434a4dba42a42abaea9bfbc0cd196a63bc1\n\n# Spelling fixes.\ndaf569b53e1b679e2073bce7189de74e59c34a6c\n\n# http://crbug.com/1030028 - ObjC Ivar Underscore Trailing to Leading\n446dbd735597a1f78bfdb1477dc093799fd5ceda\n60f733e746a0ffa57a045eb3cb422536f251db67\nb641dca7bce43ec553a621ecdbc587e6811ee411\n6cabc3d3f9003f177906fef105eaa203bb8826b0\ncf8da83ed613ed96b3f557b48a658daa96aacf23\n4d29a92a58e973bf00e311220fa22cb613b3b38a\nef56bb7ef83e692f73bc71676912172073ea9d07\n999801389a223d8f1e7635ef0ce7c11edcb1eef1\n44d3ef13208474f04a2af87ad83862a9f96802ed\n61b892921372a934c5135e6b8a4ed78e8922d809\n611b5c153ab8ad38688f78ef2360a03f55b1d62e\n\n# MSE: Rename media and modules MediaSource classes\n0be1f30b1774cbff11ea8943dd8db93a9130fd59\n\n# https://crbug.com/1311955 - Change pipes to backticks in comments.\n6679e085ca02f71685d4ae58514b20937954163e\n7a4c6769cc8f9e12e0ee6e37c8197b229552a06e\n7e1e91b2af0a79f874294b1ca4eac64d9b6b35ad\n691c6d7d9450e520cc9a2682db424bb9f398eb99\nf32fecd5662b96eafe2591fe89f93c53de8f1fdd\n6e7cefaac9ee7af4830fcd543f4609e904821d8a\n2d491b9d606187749ce033faa59db28bde560219\n5e0c6cc27facfbd3e4609fe2355092413745040e\n9d1274a2756fb42d755086888adccf1cc48b7c05\nf36aec8794736a1e66e23289c87a38bd257c16d6\n949bd192581b6607d639a77702fa328594303078\n13c71a7dd73da5c77e53ab279f3dec89403668b8\n73e14c030ad12240592b765c071b17592309e18d\n926b6ac8cdc7a4c37cfad81d69ada2b89efe4285\n7216cdbbe39ab24dfcadb721247458bdb04ca019\n29e063061b852021816445778a63f725d53e5736\n8bad276c88079931078eef44f1f4397bc4a6c873\n41b08bdd50458bff48874f1e9b0b89c96a2edbee\n58517a88cbfbfdb5b0f37cadb95ef3891d9244bc\n26af32e41db0143dc5c05c14f2c67bb91c570f89\nfb9109f6007ae894e00c06b92c4e1e02f5f759a3\nd5ac28527473701c52763641f5cf95fe52f2a9df\nd421bd291bb534d9db364480ef5c6f67dcbe9d9b\n087c6f527f17ccb5222c2b8a6e8f396c6aaebb86\ne7f16d4724ab44b8ca5294bd4b7013c3def779ec\nf4bea7268d88a0193e2118803c67c2fe11e5a30b\ncad4c2e615abadd143aab9729269fccb73e34dfb\nfc4d5e3f5e3fc7635266d662fd53b328c3e832a1\n036f2c8970a63517a949d44571c8bea486aa14c2\n7e53908c1f65061457e7d1ce152a3b4c5ade9c84\n3191dcf8a69c7a7bec735a318ff901b273495e45\ne31f4f13e75ce046c5ffe1cc6df498b58ca30548\nc0f0ccbdac19cc4e616fa57627fc2313ff1f910d\n3668de34576141cd19cd8beca16690459edb0d1d\n555e3733395f8bd581a0869c29feff6d5ee99bc8\ne97ec0aa75a6c653a49a8b6f04d48e7720e708c1\n0ceb14b361997fcef0b7c8e3f4be7071fac972ee\n4a69273590b61c19ce168209f0e746816ee85f15\n7d06bce17d02df02ab183ba1807f97882d40b562\n7fe21824b6ce080179c4f415d9153c7ff324e55f\n62b083244d15f8c71ff4c6e333846b2c0037fece\n22ca176ab548f5270a2e22f80efa98ebb3194846\ne225d7049f1a2f87cc3364bcca615bb0fd491d26\n5260d60cbd3f4b545f0be122809c9bbe3807c9fd\n8fe777a29c2431314d4eb2bd00bae8c15950cafd\n5ff85790545b03e7abeda61126c7b1dceac57668\n8721c19b76affc952dbf5b88d5503513b6b360e5\n77bea9ca6cd238e0155c2086db941f0fbcbc89f6\naf5a3057fb2b630e4597b8a1e8524eab24ae6313\n00655c3ff1f9ab6df0398348bf62ad80598f8dd6\n3acf1d7520da5f949ebda29b1ba239e99de02a41\n316e21d9cd6c46d042b6c7c01f8a24381639943a\n5dc13a14a5fb75b3178b8daec8b6c3bb0df6bf0a\n91c382d1419d803d0904dd87cd7df08fad69031c\n6edf7e67129aa095076deaf1a2241cf03d184167\nd89d08f16c9096549cef9c9f354dc003d5a351fa\n40cc73dce8957b656fcb8a371f1263baaa7c9ce3\n0135ca1a1e058e3d2d6fa89d07f4dd1981f5d516\n8b8d99c32f67ff4e3fbdd155434ef9bda6209dfe\na272453322f76e1bd50c40351a6b43e29e084fb2\n334253537f8383c5ba70720341c5b966951f3b54\n5bad5df2da73428b9deca476e4c3060aadba5500\nd4b5f0987ea40070551216cc38d4551b25a23217\n8864cc7e72d6ae3a66825e8e698e51bcf3320f8a\n0085fad9d8e91044bd11142fe1c3b1a24b90a443\n58bf42baf6d129fe5a957e08e34b42a34cbc05d5\n730e26d2ca70df23d52d8067b4643867b9c4c2df\n039612ff8761f9a20bc2fe6663f929f799769cf9\n54f0e088491feb1e80441c4060ad8c3b7446570d\n7066a012142f61ad72081485833016f69905ae1d\n91d17165cb0d440943ab287a42ada2573edc44a7\ncc72994faf7a7162f024c353e8df9da1c4774bf9\n17021fafe574da70a59e2f1113a32d8862a453bf\ne5c29001ec5ab2a65d30748748e6572dd0fbee20\n0b2ecde7fda0de8f38412c1e3926bce253826538\n2fbcb6f75d5d3f8cb1cb58fd079558c8ba31cd67\n2e5cc44bc261e04aec7849d006a481a9d198010b\ncc9669aa48e662ed634b86cbc66039aa74013ae5\ncea74e0144568c63837e16c1dd8e3d746eb3a844\n11a66f50cf0f071e8b5b97f113f36484a3ff0b93\n94646fe0f5cc9eaae2e428006c09836a08129a12\ne4b508acce6ff50a87a59c8f1baf472eb6afda5b\n5a7272dfa815c5162333bdb804bcca89b8faffff\n3b0b16322c8c9f873975fa6b7fdef03a796a96ad\n83730ee7aeb9c9904fcca2c342442919626aaf47\n02dbf021e1a1ac07cd839a47bc414c49b18b49b0\nc2af30ec5e09dbc4c7b4b6189f72478a7aad7da6\n1242f783afcb1e01854bc853c4510dc881ca8976\n35440f70f09c74296da8881821b5d72c90392527\nd01da959a970664280011e282fbf0760ed9416c2\na1c2f04801b3de37d7f7ac2b5fa892c3e4cfeeb7\ne1b4daf2a3e758c45fc4b585cdd15feb62b8418d\n66ada4a69d7bd4f24ccc6fbed6ddf017c46da3cc\n7cc34c08f1530c189a00c79192ffa456008aaeb8\n6a8928078b0c9b46bcd5ba27dc9cdfb299766397\nbc2f09f202c9bd3252f702879233394da59b765a\n7ff314795b42bbd8450bcea9fb4f112e06ea7157\ncfc7ecce7739976465355cc6f016501b2efe2145\n5c8acc5b99ee1cd6723fad1f84533796a11af481\n5231903947ef38222dba971af36dc9e62af4f7bf\nc8769352bd44a867a7fe042ebff87bea19676070\n001c2d304c1b67fc1904f329c6d1059aede5e339\na8c8ff67acb819b244c17bb3e4ae74e10d182a36\na0e8d508e7dd2bf8ce75703d941060e0d851d2ad\nb1b4eb7b5e0bbf5ab3da27120015bdcadbc74396\n8c6a8abc06ca049e052adb59afb4d35151e3df57\nc7d332619ef6daeb7b4b77c78e8910c9514ea3a2\nb99ee5d7a327fd5125b51525da28080771106c64\n694bb48d4cc5fcc20935ce66fa835079566680e4\n9c0eed0626ce32581b9ca460d9be6467f6b1bd9c\n0365cf277214c9cc6f747b80bbeb2216f2a65fa1\n9585ff0ca24fcb0e23f07d6d9017d3102eae8540\n522fb0913ba8266042d5e7a9e298a2d891a2e9fc\n1e3cb2e7534ab1b98ec6c477185fb6aa14993de9\n38550824d990747d44428c1f4526e8d788c5dfb1\n70986dd59eb16139eb0a7109c59309973544fdaf\n064d830c3b6b0e02dd84d9f6f2b7501fb05b6532\n8dad0733eea6d6f5c63183b809fd257a0e2e68d9\n890b2974b0626a82b7131ae3c22503528c954208\n51a6a5d8f81e30d307252027f32ac03b2cf242a0\n788e03c51d8b61d59907a7a783fb1de38cc2920d\n202d0e88fb27eb2fdf269ba07093d0ad9892818e\nebb9b2ff202e0993d13d861a109e9abff7a5a4fe\n75c2e8f3266d115d2eb598ed5ea03ae6e848a33d\nceae85c075490fc452afe4216d48249594b744c8\nc2c79937507564e90055d02f2afef5649f769ca6\n58424c4b97af7c346224d2f55ac6304d0fdeaedc\n9c9ff72ba887ec8a1cb2c24c77d10731700766a9\n94564e5b8f8118da83bb1e57669e85ca2f2f924f\na5cf104256a980574d55652e27f9764daa7f6717\na5a78267507c8e0b647f1c785e3dfc6c4fb43929\n664018562814d8c460f644cfb7c8392d5d07f10f\nea52d8d3d3845da3859cfc93395acdf4b541b6d5\n02cd6050589e00cd072e34b4c4bc887cc94f2bb8\nd7a4a29877fc5773172de0244c3b9d1ff222a5d2\n64cdcfb86154ead765a4c5ecf3db14938ccfb846\n3a8723b4b3ab125532da46078cdf47fe15bc827c\n672076aa7a9f68c187ddd3a5bc4de25c09ec41f4\n74d7a85a00a5bddff6b06ffd84b82867d05b74a7\n15fbec2e823eec1eb39384d26c828a8cae945c34\n05e99243e7c7bf4113a6fabb454e0c5620e8d130\n6a501160a9cb6200d420c1a671795851a38dc85f\n4124d38b6a7292644e2f0d1929dc447050bc8ea1\n543b382046c84817b37ed9919f9d9f122beb9be1\n8e5d9d808d3b70eecb0dac03f10174a9576b3a0f\na2cd90d5f9752fcc49164f207e67b9cba15d971b\n0d86bc2426a49d1fae43791c09d43c7cbe9e7f2e\n3aab744696109cab57935f0883fc04f228879815\n8805f5c5bf728ad4058bd8eff8f5cc2fb6e607ea\nba7db55edb45be1b3a8a40bcdd0602d2e261b8e1\ndf3bd9f43755c015fd292944315b3d618c59c9e5\nc70c4083ad797dbdeb788579a35f9c3fc9355a15\nacb7833834f1bf5b97f558ff0abe65303ff7c8a8\n99acf61dd0494fb67328f6660877c17fea69f491\n963c59c6b8ea9145fca03fdecc565a9fd22164ea\n4d1bb9bb8e9a288c79192a9b1f5676170f1603ed\n63a9c852e628a10303030bdc67edac6533861767\ne05ff64e4f8642fffe3c9cefbaa43f124ad319cd\nf05156797980a7bfb3dc44bf12d7d3c207fbbb87\n86f2d45e187e3c8434621e25ac315fc826520c98\n707d7f25b587b8fe3e8a591919ced0e934ff747e\n326576406940f7feeb9b56a2b97dd651f04c3794\nadcc1a59da1690e2c96b3fb8da2adc8dd5031172\n9a5eedd8c993953a2fb19e943790f0894c75ad05\n0fe050f7b8e9bfb544484192ee484c78cbdab85a\n05d1f88f65e5d3ca3e5c0d8614458b6b19da2b7e\ndea42179130cca432a1347c8989fac60bca4bf06\n0ef085813d00426d3ab3a5dfd549135ee178e596\nb1d3c20f18e65fe870c7f6d7aa69aa0565bae66a\na3b4d6986ca7d1bf0bcde865b39a0a6b98f13fcb\nd0c45494484484e766d928516e9f2e351ccd0f9c\nb42becaaf0d57ce7ae9dc1450646a555ab75ce52\nb2810c8391eef3bea6b11916cc3ebe129da7efcf\n7d53b2010d7134ea4f876840a284a6ccf44198bb\n8cad951d8cbcbc29f4954db09b3388644f52ad6e\n0f7373bc919b029e062a8c6d77a237bfc86dc878\n2334ab0ce98bce0f329a12f441900c4471eab351\n7f4c19ebf61e5cbf770622941dc5633bbbd11cb0\n158b380d3bb4cd602665a876daa9ef394472db0d\nb136c97cde14936fbbbbeffe0e9877d9edb12c80\n95e6c33d4eae2093e221b45fba1fe3e85c8511f6\n317abbe4fa7db35f38b8a957f66b67ef9b6f3d1c\naf12ea88c18d577992e545f2e832ea184627e145\n0ba68575f33e97fe8754bca44a65ead6028c990c\nb13016c0d230b1dd7dc5d96e0a118a7fd4b99da4\ncdf25190f9e1edabf57edac19a1827c3008ea043\nb5ab3095d8066efa73aa1dada7550f712728d5a7\n9c8739bacb58c2a56c76b8cf2c723a95c7a43d10\nde97b1eabc6ee61cf93976c9632bd3b1554a128a\nc303a864acce9048b1bab5b42a6e25a439789a06\n48fce5db5a64a5072576f56bf09684a4031d18ac\n0374494372187bfabc8cabba9d37bfdf29c9ed89\n51d5382afa0b81739192b387e3c2248d600686b6\nbd9a58d63afc5c6970907abeb3fa55ab4491fa13\nb2b4f087d6096b34d90a57352d14f5a76bb64788\n2b36c8baee1a2b7109cb8db09f01d5fbebe53046\n75f187d96c74c5b6719c282be355ad82f3901069\nbed62bd9e242e3e4742fbd3fd09c96d2ce009113\n\n# Replace includes by imports.\n999088c03b4721b1508bfa4c1e2b00423a3f5fae\n\n# Move android_affiliation and site_affiliation into the same folder.\n5910c68207058a5eebd3cac9e107777d01d50bf3\n\n# Reformat .java code with google-java-format. Tagged with Bug: 1491626 (part 1)\ne0260713f2172adb5e15adf4eba6a9e12eb34d3b\nd9fcc1f503517a01adb9defd5d533c978a626aca\naa618470bafde071d7d729160fcd34cd7d33c5a7\n0ea2e4c51844a352619860243c04de1f257c4a0e\n8f2989895bb0dcfa3512566d1b95ac5fd1fdfe89\n5f0a305c1a15003322c07cd0d06d17e644f439ee\n92c06a0574637bc4dce5190e2fc7cbd615999478\n1d98bce65ff73f46fc1e6e501d81d5787e8ffa9b\n1f2771e52be443e13e7f823af807a312cb60cb9a\n059a3e7090b8bede5efb3272a8c4f3a79daec09c\ne54a2819a1ffa1ee12f293684e0e0cab4b37cf85\n63bf19cab172b95268739e867c9045c2017b576f\n16ba46a714c0595b172ee0962c97b52cbaeebb3b\n828998133047a73d606810c7462aeb6113d5712f\n6df557b3ec649069479bdc0652797afbc847940a\n2cd4afbc78330a60b553a5d053a467c5e7d5250e\n54e115d50c6a0e1ab081225d18ebf818c22545d4\nac1325bf4f1dac784b2b83c2a20d264bad406adc\n8a0bb051183c9a410b3126112dd3b0bd214c5fe9\n\n# Move partition_alloc into a \"partition_alloc\" dir\n0bcc023b8cdbc073aa5c48db373810db3f765c87\n\n# Rename {absl => std}::optional\n59ac8227c5dd59754331b3f7f9f85e1a947f1242\nca067f2604f9bf0ff2fa070eafeed664698d819a\n0b20ccad48bc63b0e6bf07b8511b32b8e3d963b1\na98e4438c6229a95ecd8c5f0acebc6c95f9028b4\n74f09f8a69f0b27fda9581de477896071917256a\nc686e8f4fd379312469fe018f5c390e9c8f20d0d\nb263d258c9e4899afaa24036bde76d7e9e1d537c\n8c3a4c4fd8ddc5c8c3384f29e48932f81a38a462\n69fa1c8ea7b8b207343b91ca8db5e3e7d372b1c7\nfe132eeb21687c455d695d6af346f15454828d01\n14af2a9cdbfb78e7244d0a861babaf4388944ff1\nc571efbef3ecfe66613d524ff39c58e25d18548c\n618111ac68d8ed2e3a84eee9cae1cf61ce9ba236\n581b9e8403fdba9f33cc315c56180f841407c86b\ne795a58002fc09c3417489cf419798c8d8ab0ba3\nd2b5c17eff35da6ebff8ba20c99688b87e1bc752\n9021f6eff4a13c7c43ef3c544b7ba5ae9953dab6\n4787fce6c51383f5631643ac3d14cc512d656de6\n3eb9fd518875bee685ad2e8c2b699822a8dfd5d9\ne5fff99cbb0380ea7f44c60ee15554b6b56320fb\n\n# Reformat .java code with google-java-format. Tagged with Bug: 1491626 (part 2)\nc89f6078b3d03a07e8859e4e2be5dc9baaf1d5f0\na46fbc6634d0ac2fcdf88f35fa743fa5fd072575\n54443fc172332d6c7053d0d028405e396aa283e2\n71407b649204c49a6f6f73ce9eba4a1d269d2ecd\n2d27957fccc6f90cdae9429cc1db9444828ce96b\ncf573f2ef2ac45673c7033d559c8953282e94781\n692118410481affde547c276fdcdc4313688a7c4\nd50d7d806a7673395af57a1610bd76e019f2db39\nfeff2176e905c3a859893fd7922f1cca496f1baa\nf96971d6a2869bd124d87baa06c1aa2b0a0cc20c\n93b668928055e7793e86697b0e6a08be849ee04d\ne9d875d2a48171575671a969462d7e0be03bc6b9\na84b517c2f386039805c199c7121a101bd9a002f\n4d8cc895f86b96f958d5d84fb9004df48579c68e\n# Additional reformatting of .java code with google-java-format.\n8d0ce88014a84664b91bb4a0f62aa766f6e033b7\nf70362cf57dfdc99e2696ffd7c98a36792af6e27\n54f78eafc8259c10b394c9b6b05c098fb4d85ddb\n8ec2c27cc79c7de24665c2fa8ab0421e49caf88d\n9a8b38dfe178fbac3ba72ba1e112cea3be0f3dce\n9bcbb5dfac26b322b7a24e9fd947420a66c5ade2\nfcf47db6b8caaff2877f4d81af29eaab7cdc65e4\n\n# Migrate crbug IDs in TODOs b/321899722\n965f905d1aa4a1ca84bc9ebb8c4be6b4a521a639\n9130192d1870b21fed41ab5edf38a60d60998d38\n0767a76e38bc7f543ac596f0a67fc589a2f5c144\nb8be952f6cd08d311fd10d4de475fdac151e33f0\n9f64b0ccdc659a11a5906ad55748e5599fa771f6\nc5ea1859abfe643b42f52650bbbb532b33e00ac7\n8a799765646ace566a49bdbb579959802ec9b3c8\n7da1bd79aa9b0a136b377bcdb732474b61899039\naed2f60917e3aa3cc3da98a3c443edce5933b07a\n079e6e95e7898ea44fb118b615eb05be2d24f8f1\nf54f71679bfe9b9ef10c785369112fb2d0661750\nd937b7282c2750c0986e1c676e62b50d1b5a1d5d\nc1a65bcd1dfe95dd0a6ecd0b2ed401dffd99c0ce\n47d1537de78d69eb441b4cad8c441f0291faca9a\n59c007a7ad2f034baeffab754f3f5bf109b69cda\n53c77f6b626a22f37ff0e60dfa5017734e326bdb\nd94ce4fa456812822f73e54c3e2ed3db3d1fe513\n81f4f2c7936cc451e4071b9b7b25d86040d869c7\n923a33e9d5e24f4fb64f40dd2ffc182b2de93b0f\nf83a91ab5d585762e80b589ed95abcce2cc1425f\nc4b25e4117ed709d8161952aad331f7309458329\n9c9683f0bd1449306a792b278a6c4c3f822bf730\n3ad3e81ede02744af1cce0d73637b8003577a7f1\neec0877acaf0a3e0d9319453b7cdae154a2554fe\n711657b22940f7939a1468a684b50c3c7b7b07a8\n47d501bbfaffc5a3748427c7f8c0c92accd03981\n45c4058fd01d05e82e7bc6ced568f028d9b3b104\n24a80999fbc083276e0fbef7f9e2eec36429f6a8\n3f4203f7dca2f7e804f30cfa783e24f90acd9059\n4d9c23185ad9f590658e36154ac3e53f0f4f158b\nd965ba0faffffaa1a3fccf2f92e983ee7b79db4a\n71bd8f1596b301a842247d3488f901d7ae3dfad2\n770f3fce3719ee18c102ad0b1a347d82147fbb1a\n3a3959162be6995ac2202ac30d23ce1b2c2ef8b9\n\n# [cleanup] clang-format cast code.\nf9e5dcb3a7008a1ffb4cc33f1ab9fc6b556824c0\n\n# clang-format a bunch of dirs.\n134ef9afcaff9644ce859d61752d3ef51b924eb6\n5be92b051c6ec7533c9cc001611d1c7b009485ac\n4020c78e3f11938478699ff65e29101f44e7c2a5\na319d229e5d293a0941bfaf36065acc1bc4f6e61\n42b20de82773c7737a09fd4af1407300f0d71c8a\na48632411d7e7263e8fd4d273d24a80f668b73ec\nfa68830d06c2b4c5fe531fd64062d5d7075cdf71\n827e98aa0c92475f4c3b39a95e71b4b53b5a5dfe\nde196f3f114ce4a3973acaa8a83ff53960dbf7a8\ned044e8cda76db3ac6f40e024ae9835d52fbd610\nc1913b51e9c29f5b50603f16b009824c43a21c6e\n38d4196db0af149d802543d027d15102728e5bc2\nf1d1b3f3bbd9344a9f58239fb87b623048ffe9c6\n0937cb6714963e796b1d8b6256f4d8d191755934\n47d904702010d2ee65faf7e82c2498e1e54c7528\nba09f2bcae2bbab315c45476397e8714cad6360c\n7f02ef31690fe6d8680974ad47c264822a267277\n"
        },
        {
          "name": ".gitallowed",
          "type": "blob",
          "size": 0.2744140625,
          "content": "# This file contains patterns which are excluded from git-secrets matching.\n# Only add patterns where this is extremely likely to be a false positive.\n\n# This directory contains publicly available keys and is updated frequently.\n^([^:]*/)?components/certificate_transparency/data/\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.3349609375,
          "content": "# Stop Windows python license check presubmit errors by forcing LF checkout.\n*.py  text eol=lf\n\n# Force LF checkout of the pins files to avoid transport_security_state_generator errors.\n/net/http/*.pins  text eol=lf\n\n# Force LF checkout for all source files\n*.bin binary\n*.c text eol=lf\n*.cc text eol=lf\n*.cpp text eol=lf\n*.csv text eol=lf\n*.grd   text eol=lf\n*.grdp   text eol=lf\n*.gn text eol=lf\n*.gni text eol=lf\n*.h text eol=lf\n*.html   text eol=lf\n*.idl text eol=lf\n*.in   text eol=lf\n*.inc   text eol=lf\n*.java   text eol=lf\n*.js   text eol=lf\n*.json   text eol=lf\n*.json5 text eol=lf\n*.md text eol=lf\n*.mm text eol=lf\n*.mojom text eol=lf\n*.pdf -diff\n*.proto text eol=lf\n*.rs text eol=lf\n*.sh text eol=lf\n*.spec text eol=lf\n*.sql   text eol=lf\n*.toml  text eol=lf\n*.txt   text eol=lf\n*.xml   text eol=lf\n*.xslt   text eol=lf\n.clang-format   text eol=lf\n.eslintrc.js   text eol=lf\n.git-blame-ignore-revs   text eol=lf\n.gitattributes   text eol=lf\n.gitignore   text eol=lf\n.vpython   text eol=lf\ncodereview.settings   text eol=lf\nDEPS   text eol=lf\nATL_OWNERS   text eol=lf\nLICENSE text eol=lf\nLICENSE.* text eol=lf\nMAJOR_BRANCH_DATE   text eol=lf\nOWNERS   text eol=lf\nREADME   text eol=lf\nREADME.*   text eol=lf\nWATCHLISTS   text eol=lf\nVERSION   text eol=lf\nDIR_METADATA   text eol=lf\n\n# Skip Tricium by default on files in third_party.\nthird_party/** -tricium\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 9.1083984375,
          "content": "/client-py/\n*.bak\n*.code-workspace\n*.gstmp\n*.mk\n*.ncb\n*.opensdf\n*.orig\n*.pdb\n*.props\n*.pyc\n*.pyproj\n*.rules\n*.sdf\n*.sln\n*.sublime-project\n*.sublime-workspace\n*.suo\n*.targets\n*.user\n*.vc.opendb\n*.vcproj\n*.vcxproj\n*.vcxproj.filters\n*.vpj\n*.vpw\n*.vpwhistu\n*.vtg\n*.xcodeproj\n*.xcworkspace\n*.VC.db\n*_proto.xml\n*_proto_cpp.xml\n*~\n!Android.mk\n.*.sw?\n.DS_Store\n.android\n.ccls-cache\n.cipd\n.classpath\n.code-coverage\n.coverage\n.cproject\n.dir-locals.el\n.emulator_sdk\n.gdb_history\n.gdbinit\n.landmines\n.metadata\n.project\n.projectile\n.pydevproject\n.checkstyle\n*.class\ncompile_commands.json\ncscope.*\nchild_pool-0.profraw\nchild_pool-1.profraw\nchild_pool-2.profraw\nchild_pool-3.profraw\ndefault.profraw\nGPATH\nGRTAGS\nGSYMS\nGTAGS\nSession.vim\ntags\nTAGS\nThumbs.db\nrust-project.json\nv8.log\nvs-chromium-project.txt\n# Store android emulator artifacts, used by //tools/android/avd/avd.py\n/.android_emulator/\n/.clangd/\n/.clangd-index/\n# Settings directories for eclipse\n/.externalToolBuilders/\n/.settings/\n/.vs/\n# Visual Studio Code\n# No trailing slash to also ignore symlinks, which is useful in conjunction with\n# gclient-new-workdir.\n.vscode\n.vscode-server\n# VS Code Bazel Extension\n/MODULE.bazel\n/MODULE.bazel.lock\n\n/_out\n/android_emulator_sdk\n/ash/ash_unittests_run.xml\n/ash/webui/boca_ui/resources/prod\n/ash/webui/eche_app_ui/resources/app\n/ash/webui/eche_app_ui/resources/prod\n/ash/webui/file_manager/resources/tsconfig.json\n/ash/webui/help_app_ui/resources/prod\n/ash/webui/media_app_ui/resources/prod\n/ash/webui/media_app_ui/resources/app\n/ash/webui/media_app_ui/resources/pkg\n/ash/webui/projector_app/resources/prod\n/base/base_unittests_run.xml\n/base/tracing/test/data/*\n!/base/tracing/test/data/*.sha256\n# See build/.gitignore for entries covering src/build.\n\n# The Chrome OS build creates a /c and /c_icu symlink due to http://crbug.com/54866.\n/c\n/c_icu\n/cdm\n/ceee/internal/\n/chrome/android/profiles/afdo.prof\n/chrome/android/profiles/afdo.prof.new.xz\n/chrome/android/profiles/arm.afdo.prof\n/chrome/android/profiles/arm.afdo.prof.new.xz\n/chrome/android/profiles/arm.local.txt\n/chrome/android/profiles/local.txt\n/chrome/angle_unittests_run.xml\n/chrome/build/pgo_profiles/\n/chrome/gl_tests_run.xml\n/chrome/gles2_conform_test_run.xml\n/chrome/tab_capture_performance_tests_run.xml\n/chrome/telemetry_gpu_test_run.xml\n/chrome/browser/chromeos/arc/voice_interaction/internal\n/chrome/browser/chromeos/assistant/internal\n/chrome/browser/extensions/api/ledger/\n/chrome/browser/extensions/default_extensions/chromeos\n/chrome/browser/performance_monitor/performance_monitor.xml\n/chrome/browser/protector/internal\n/chrome/browser/resources/chromeos/mako/resources/\n/chrome/browser/resources/chromeos/seal/resources/\n/chrome/browser/resources/downloads/internal/\n/chrome/browser/resources/pdf/html_office\n/chrome/browser/resources/media_router/extension/src/\n/chrome/browser/resources/preinstalled_web_apps/internal/\n/chrome/browser/resources/media_router_internal/\n/chrome/browser/resources/settings/internal/\n/chrome/browser/resources/software_rendering_list\n# Asset files downloaded by gclient runhooks.\n/chrome/browser/resources/vr/assets/google_chrome/*.png\n/chrome/browser/resources/vr/assets/google_chrome/*.wav\n/chrome/browser/sharing/internal\n/chrome/browser/ui/media_router/internal\n/chrome/browser_tests_run.xml\n/chrome/chrome_run.xml\n/chrome/chrome_user32_delay_imports.xml\n/chrome/chrome_version_resources.xml\n/chrome/common/extensions/api/api.xml\n/chrome/common/extensions/api/ledger/\n/chrome/installer/linux/internal\n/chrome/installer/mini_installer.xml\n/chrome/installer/mini_installer/mini_installer.aps\n/chrome/installer/mini_installer/support\n/chrome/installer/mini_installer_tests_run.xml\n/chrome/installer_util_strings.xml\n/chrome/interactive_ui_tests_run.xml\n/chrome/services/soda/internal\n/chrome/setup.xml\n/chrome/setup_unittests.xml\n/chrome/sync_integration_tests_run.xml\n/chrome/test/android/telemetry_tests/browser_tests/*.wpr\n/chrome/test/chromedriver/third_party/\n/chrome/test/chromeos/autotest/files/client/deps/chrome_test/test_src/\n/chrome/test/chromeos/autotest/files/client/deps/page_cycler_dep/test_src/\n/chrome/test/chromeos/autotest/files/client/deps/perf_data_dep/test_src/\n/chrome/test/chromeos/autotest/files/client/deps/pyauto_dep/test_src/\n/chrome/test/chromeos/autotest/files/client/deps/telemetry_dep/test_src/\n/chrome/test/data/extensions/api_test/permissions/nacl_enabled/bin\n/chrome/test/data/firefox2_profile/searchplugins\n/chrome/test/data/firefox2_searchplugins\n/chrome/test/data/gpu/vectortown_endurance/\n/chrome/test/data/gpu/vt/\n/chrome/test/data/layout_tests\n/chrome/test/data/perf/private/\n/chrome/test/data/perf/third_party/\n/chrome/test/data/plugin/\n/chrome/test/data/vr/\n/chrome/test/data/webrtc/resources\n/chrome/test/data/xr/ar_playback_datasets/*.mp4\n/chrome/test/data/xr/webvr_info/\n/chrome/test/python_tests/\n/chrome/tools/test/reference_build\n/chrome/unit_tests_run.xml\n/chrome/web_ui_mojo_bindings.xml\n/chromecast/internal\n/chromeos/components/help_app_ui/resources/app\n/chromeos/components/help_app_ui/resources/prod\n/chromeos/profiles/chromeos.arm.orderfile.txt\n/chromeos/profiles/chromeos.orderfile.txt\n/chromeos/profiles/*.local.txt\n/chromeos/profiles/*.afdo.prof\n/chromeos/profiles/*.afdo.prof.new.xz\n/cipd_cache/\n/components/chrome_settings_proto_generated_compile.xml\n/components/cloud_policy_proto_generated_compile.xml\n/components/gcm_driver.xml\n/components/history_clusters/internal\n/components/leveldb_proto_test_support.xml\n/components/search_engines/prepopulated_engines.xml\n/components/suggestions.xml\n/components/variations.xml\n/components/vector_icons/google_chrome/\n/content/browser/service_worker/proto.xml\n/content/content_browsertests_run.xml\n/content/content_common_mojo_bindings.xml\n/content/content_unittests_run.xml\n/content/test/data/gpu/generated/\n/content/test/data/gpu/gpu_reference/\n/content/test/data/gpu/mediapipe/\n/content/test/data/gpu/mediapipe_zip/mediapipe_chromium_tests.zip\n/content/test/data/layout_tests/\n/content/test/data/plugin/\n/content/test/gpu/.webgpu_typescript/\n/content/web_ui_test_mojo_bindings.xml\n/data\n/delegate_execute\n/device/serial/device_serial_mojo.xml\n/google_apis/gcm/gcm.xml\n/googleurl\n/gpu/gles2_conform_test\n/infra/.recipe_deps\n/ios/third_party/earl_grey/src\n/libassistant\n/libinteraction\n/llvm\n/media/cast/logging/cast_logging_proto_lib.xml\n/media/media_mojo_bindings.xml\n/media/test/data/internal\n/metro_driver\n/mojo/internal\n/net/Debug\n/net/net_derived_sources.xml\n/net/net_unittests_run.xml\n/net/Release\n/net/testserver.log\n/orderfiles\n/out*/\n/ppapi/native_client/nacl_irt.xml\n/ppapi/native_client/ppapi_lib.xml\n/remoting/android/internal/\n/remoting/appengine/\n/remoting/host/installer/chrome-remote-desktop_*.buildinfo\n/remoting/host/installer/linux/internal/\n/remoting/ios/internal/\n/remoting/internal/\n/remoting/proto/chromotocol_proto_lib.xml\n/remoting/remoting_core_resources.xml\n/remoting/remoting_elevated_controller.xml\n/remoting/remoting_host.xml\n/remoting/remoting_host_event_logger.xml\n/remoting/remoting_host_installation.xml\n/remoting/remoting_host_messages.xml\n/remoting/remoting_infoplist_strings.xml\n/remoting/remoting_lib_idl.xml\n/remoting/remoting_lib_rc.xml\n/remoting/remoting_me2me_host.xml\n/remoting/remoting_native_messaging_manifests.xml\n/remoting/remoting_version_resources.xml\n/remoting/remoting_windows_resources.xml\n/remoting/test/internal/\n/remoting/tools/internal/\n/remoting/webapp/app_remoting/internal/\n/sandbox/linux/seccomp-legacy/\n/seccompsandbox\n/skia/tools/clusterfuzz-data/\n/sql/sql_unittests_run.xml\n/sync/sync.xml\n/testing/libfuzzer/fuzzer_corpus_for_bots/\n/testing/location_tags.json\n/testing/rts/\n/testserver.log\n/tools/bisect/.bisect-builds-cache.json\n/tools/bisect/catapult_bisect_dep/\n# See third_party/.gitignore for entries covering src/third_party.\n/tools/.bisect-builds-cache.json\n/tools/cygprofile/*.wprgo\n/tools/distcc\n/tools/gn/bin/linux\n/tools/gn/bin/mac\n/tools/gn/bin/win\n/tools/histograms\n/tools/json_schema_compiler/test/json_schema_compiler_tests.xml\n/tools/metrics/actions/actions.old.xml\n/tools/metrics/histograms/histograms.before.pretty-print.xml\n/tools/metrics/histograms/metadata/*.before.pretty-print.xml\n/tools/metrics/histograms/metadata/*/*.before.pretty-print.xml\n/tools/metrics/histograms/enums.before.pretty-print.xml\n/tools/bluetooth\n/tools/reclient\n/tools/skia_goldctl/\n/tools/tryserver\n/tools/win/link_limiter/build\n/ui/file_manager/tsconfig.json\n/ui/file_manager/integration_tests/tsconfig.json\n/ui/keyboard/keyboard_mojom_bindings.xml\n/ui/gl/resources/angle-metal\n/ui/surface/surface.xml\n/ui/surface/surface_gpu_tests.xml\n/webkit/data\n/webpagereplay_logs/\n/x86-generic_out/\n/xcodebuild\n\n# Ignore any Android RenderTest goldens\n**/render_tests/*.png\n\n# Ignore any WPR archive files\n**/wpr_tests/*.wprgo\n\n# Ignore IntelliJ files.\n.idea/\n\n# Ignore cache folder created by clangd\n.cache\n\n# Ignore the default results output directory for tools/run-swarmed.py\n/results\n\n# ignore rust build files\nthird_party/rust/target/\n\n# b/328065301: This file is temporarily used as a migration toggle between\n# GCS hooks and first class deps.\n**/*_is_first_class_gcs\n# These files are created by first class GCS deps.\n**/*_hash\n**/*_content_names\n\n# Buckup files that are generated by //tools/metrics/histograms/pretty_print.py in presubmit.\n/*.before.pretty-print.xml\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 45.125,
          "content": "[submodule \"third_party/clang-format/script\"]\n\tpath = third_party/clang-format/script\n\turl = https://chromium.googlesource.com/external/github.com/llvm/llvm-project/clang/tools/clang-format\n[submodule \"chrome/browser/resources/preinstalled_web_apps/internal\"]\n\tpath = chrome/browser/resources/preinstalled_web_apps/internal\n\turl = https://chrome-internal.googlesource.com/chrome/components/default_apps\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/installer/mac/third_party/xz/xz\"]\n\tpath = chrome/installer/mac/third_party/xz/xz\n\turl = https://chromium.googlesource.com/chromium/deps/xz\n\tgclient-condition = checkout_mac\n[submodule \"chrome/release_scripts\"]\n\tpath = chrome/release_scripts\n\turl = https://chrome-internal.googlesource.com/chrome/tools/release/scripts\n\tgclient-condition = checkout_chrome_release_scripts\n[submodule \"third_party/libc++/src\"]\n\tpath = third_party/libc++/src\n\turl = https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx\n[submodule \"third_party/libc++abi/src\"]\n\tpath = third_party/libc++abi/src\n\turl = https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi\n[submodule \"third_party/libunwind/src\"]\n\tpath = third_party/libunwind/src\n\turl = https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind\n[submodule \"third_party/llvm-libc/src\"]\n\tpath = third_party/llvm-libc/src\n\turl = https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libc\n[submodule \"chrome/test/data/autofill/captured_sites/artifacts\"]\n\tpath = chrome/test/data/autofill/captured_sites/artifacts\n\turl = https://chrome-internal.googlesource.com/chrome/test/captured_sites/autofill\n\tgclient-condition = checkout_chromium_autofill_test_dependencies\n[submodule \"chrome/test/data/password/captured_sites/artifacts\"]\n\tpath = chrome/test/data/password/captured_sites/artifacts\n\turl = https://chrome-internal.googlesource.com/chrome/test/captured_sites/password\n\tgclient-condition = checkout_chromium_password_manager_test_dependencies\n[submodule \"chrome/test/data/perf/canvas_bench\"]\n\tpath = chrome/test/data/perf/canvas_bench\n\turl = https://chromium.googlesource.com/chromium/canvas_bench\n[submodule \"chrome/test/data/perf/frame_rate/content\"]\n\tpath = chrome/test/data/perf/frame_rate/content\n\turl = https://chromium.googlesource.com/chromium/frame_rate/content\n[submodule \"chrome/test/data/xr/webvr_info\"]\n\tpath = chrome/test/data/xr/webvr_info\n\turl = https://chromium.googlesource.com/external/github.com/toji/webvr.info\n[submodule \"clank\"]\n\tpath = clank\n\turl = https://chrome-internal.googlesource.com/clank/internal/apps\n\tgclient-condition = checkout_android and checkout_src_internal\n[submodule \"docs/website\"]\n\tpath = docs/website\n\turl = https://chromium.googlesource.com/website\n[submodule \"ios/third_party/earl_grey2/src\"]\n\tpath = ios/third_party/earl_grey2/src\n\turl = https://chromium.googlesource.com/external/github.com/google/EarlGrey\n\tgclient-condition = checkout_ios\n[submodule \"ios/third_party/edo/src\"]\n\tpath = ios/third_party/edo/src\n\turl = https://chromium.googlesource.com/external/github.com/google/eDistantObject\n\tgclient-condition = checkout_ios\n[submodule \"ios/third_party/gtx/src\"]\n\tpath = ios/third_party/gtx/src\n\turl = https://chromium.googlesource.com/external/github.com/google/GTXiLib\n\tgclient-condition = checkout_ios\n[submodule \"ios/third_party/lottie/src\"]\n\tpath = ios/third_party/lottie/src\n\turl = https://chromium.googlesource.com/external/github.com/airbnb/lottie-ios\n\tgclient-condition = checkout_ios\n[submodule \"ios/third_party/material_components_ios/src\"]\n\tpath = ios/third_party/material_components_ios/src\n\turl = https://chromium.googlesource.com/external/github.com/material-components/material-components-ios\n\tgclient-condition = checkout_ios\n[submodule \"ios/third_party/material_font_disk_loader_ios/src\"]\n\tpath = ios/third_party/material_font_disk_loader_ios/src\n\turl = https://chromium.googlesource.com/external/github.com/material-foundation/material-font-disk-loader-ios\n\tgclient-condition = checkout_ios\n[submodule \"ios/third_party/material_internationalization_ios/src\"]\n\tpath = ios/third_party/material_internationalization_ios/src\n\turl = https://chromium.googlesource.com/external/github.com/material-foundation/material-internationalization-ios\n\tgclient-condition = checkout_ios\n[submodule \"ios/third_party/material_roboto_font_loader_ios/src\"]\n\tpath = ios/third_party/material_roboto_font_loader_ios/src\n\turl = https://chromium.googlesource.com/external/github.com/material-foundation/material-roboto-font-loader-ios\n\tgclient-condition = checkout_ios\n[submodule \"ios/third_party/material_sprited_animation_view_ios/src\"]\n\tpath = ios/third_party/material_sprited_animation_view_ios/src\n\turl = https://chromium.googlesource.com/external/github.com/material-foundation/material-sprited-animation-view-ios\n\tgclient-condition = checkout_ios\n[submodule \"ios/third_party/material_text_accessibility_ios/src\"]\n\tpath = ios/third_party/material_text_accessibility_ios/src\n\turl = https://chromium.googlesource.com/external/github.com/material-foundation/material-text-accessibility-ios\n\tgclient-condition = checkout_ios\n[submodule \"ios/third_party/motion_interchange_objc/src\"]\n\tpath = ios/third_party/motion_interchange_objc/src\n\turl = https://chromium.googlesource.com/external/github.com/material-motion/motion-interchange-objc\n\tgclient-condition = checkout_ios\n[submodule \"ios/third_party/motion_animator_objc/src\"]\n\tpath = ios/third_party/motion_animator_objc/src\n\turl = https://chromium.googlesource.com/external/github.com/material-motion/motion-animator-objc\n\tgclient-condition = checkout_ios\n[submodule \"ios/third_party/motion_transitioning_objc/src\"]\n\tpath = ios/third_party/motion_transitioning_objc/src\n\turl = https://chromium.googlesource.com/external/github.com/material-motion/motion-transitioning-objc\n\tgclient-condition = checkout_ios\n[submodule \"ios/third_party/ochamcrest/src\"]\n\tpath = ios/third_party/ochamcrest/src\n\turl = https://chromium.googlesource.com/external/github.com/hamcrest/OCHamcrest\n\tgclient-condition = checkout_ios\n[submodule \"ios/third_party/webkit/src\"]\n\tpath = ios/third_party/webkit/src\n\turl = https://chromium.googlesource.com/external/github.com/WebKit/webkit\n\tgclient-condition = checkout_ios and checkout_ios_webkit\n[submodule \"media/cdm/api\"]\n\tpath = media/cdm/api\n\turl = https://chromium.googlesource.com/chromium/cdm\n[submodule \"native_client\"]\n\tpath = native_client\n\turl = https://chromium.googlesource.com/native_client/src/native_client\n\tgclient-condition = checkout_nacl\n[submodule \"net/third_party/quiche/src\"]\n\tpath = net/third_party/quiche/src\n\turl = https://quiche.googlesource.com/quiche\n[submodule \"testing/libfuzzer/fuzzers/wasm_corpus\"]\n\tpath = testing/libfuzzer/fuzzers/wasm_corpus\n\turl = https://chromium.googlesource.com/v8/fuzzer_wasm_corpus\n[submodule \"third_party/accessibility_test_framework/src\"]\n\tpath = third_party/accessibility_test_framework/src\n\turl = https://chromium.googlesource.com/external/github.com/google/Accessibility-Test-Framework-for-Android\n[submodule \"third_party/androidx_javascriptengine/src\"]\n\tpath = third_party/androidx_javascriptengine/src\n\turl = https://chromium.googlesource.com/aosp/platform/frameworks/support/javascriptengine/javascriptengine/src\n\tgclient-condition = checkout_android\n[submodule \"third_party/angle\"]\n\tpath = third_party/angle\n\turl = https://chromium.googlesource.com/angle/angle\n[submodule \"third_party/anonymous_tokens/src\"]\n\tpath = third_party/anonymous_tokens/src\n\turl = https://chromium.googlesource.com/external/github.com/google/anonymous-tokens\n[submodule \"third_party/content_analysis_sdk/src\"]\n\tpath = third_party/content_analysis_sdk/src\n\turl = https://chromium.googlesource.com/external/github.com/chromium/content_analysis_sdk\n[submodule \"third_party/dav1d/libdav1d\"]\n\tpath = third_party/dav1d/libdav1d\n\turl = https://chromium.googlesource.com/external/github.com/videolan/dav1d\n[submodule \"third_party/dawn\"]\n\tpath = third_party/dawn\n\turl = https://dawn.googlesource.com/dawn\n[submodule \"third_party/highway/src\"]\n\tpath = third_party/highway/src\n\turl = https://chromium.googlesource.com/external/github.com/google/highway\n[submodule \"third_party/apache-portable-runtime/src\"]\n\tpath = third_party/apache-portable-runtime/src\n\turl = https://chromium.googlesource.com/external/apache-portable-runtime\n\tgclient-condition = checkout_android\n[submodule \"third_party/barhopper\"]\n\tpath = third_party/barhopper\n\turl = https://chrome-internal.googlesource.com/chrome/deps/barhopper\n\tgclient-condition = checkout_src_internal and checkout_chromeos\n[submodule \"third_party/google_benchmark/src\"]\n\tpath = third_party/google_benchmark/src\n\turl = https://chromium.googlesource.com/external/github.com/google/benchmark\n[submodule \"third_party/boringssl/src\"]\n\tpath = third_party/boringssl/src\n\turl = https://boringssl.googlesource.com/boringssl\n[submodule \"third_party/breakpad/breakpad\"]\n\tpath = third_party/breakpad/breakpad\n\turl = https://chromium.googlesource.com/breakpad/breakpad\n[submodule \"third_party/cast_core/public/src\"]\n\tpath = third_party/cast_core/public/src\n\turl = https://chromium.googlesource.com/cast_core/public\n[submodule \"third_party/catapult\"]\n\tpath = third_party/catapult\n\turl = https://chromium.googlesource.com/catapult\n[submodule \"third_party/ced/src\"]\n\tpath = third_party/ced/src\n\turl = https://chromium.googlesource.com/external/github.com/google/compact_enc_det\n[submodule \"third_party/chromium-variations\"]\n\tpath = third_party/chromium-variations\n\turl = https://chromium.googlesource.com/chromium-variations\n[submodule \"third_party/chromevox/third_party/sre/src\"]\n\tpath = third_party/chromevox/third_party/sre/src\n\turl = https://chromium.googlesource.com/external/github.com/zorkow/speech-rule-engine\n\tgclient-condition = checkout_chromeos\n[submodule \"third_party/chromite\"]\n\tpath = third_party/chromite\n\turl = https://chromium.googlesource.com/chromiumos/chromite\n\tgclient-condition = checkout_chromeos\n[submodule \"third_party/cld_3/src\"]\n\tpath = third_party/cld_3/src\n\turl = https://chromium.googlesource.com/external/github.com/google/cld_3\n[submodule \"third_party/colorama/src\"]\n\tpath = third_party/colorama/src\n\turl = https://chromium.googlesource.com/external/colorama\n[submodule \"third_party/cpu_features/src\"]\n\tpath = third_party/cpu_features/src\n\turl = https://chromium.googlesource.com/external/github.com/google/cpu_features\n[submodule \"third_party/cpuinfo/src\"]\n\tpath = third_party/cpuinfo/src\n\turl = https://chromium.googlesource.com/external/github.com/pytorch/cpuinfo\n[submodule \"third_party/crc32c/src\"]\n\tpath = third_party/crc32c/src\n\turl = https://chromium.googlesource.com/external/github.com/google/crc32c\n[submodule \"third_party/cros_system_api\"]\n\tpath = third_party/cros_system_api\n\turl = https://chromium.googlesource.com/chromiumos/platform2/system_api\n\tgclient-condition = checkout_linux or checkout_chromeos\n[submodule \"third_party/crossbench\"]\n\tpath = third_party/crossbench\n\turl = https://chromium.googlesource.com/crossbench\n[submodule \"third_party/depot_tools\"]\n\tpath = third_party/depot_tools\n\turl = https://chromium.googlesource.com/chromium/tools/depot_tools\n[submodule \"third_party/devtools-frontend/src\"]\n\tpath = third_party/devtools-frontend/src\n\turl = https://chromium.googlesource.com/devtools/devtools-frontend\n[submodule \"third_party/dom_distiller_js/dist\"]\n\tpath = third_party/dom_distiller_js/dist\n\turl = https://chromium.googlesource.com/chromium/dom-distiller/dist\n[submodule \"third_party/eigen3/src\"]\n\tpath = third_party/eigen3/src\n\turl = https://chromium.googlesource.com/external/gitlab.com/libeigen/eigen\n[submodule \"third_party/emoji-metadata/src\"]\n\tpath = third_party/emoji-metadata/src\n\turl = https://chromium.googlesource.com/external/github.com/googlefonts/emoji-metadata\n\tgclient-condition = checkout_chromeos\n[submodule \"third_party/farmhash/src\"]\n\tpath = third_party/farmhash/src\n\turl = https://chromium.googlesource.com/external/github.com/google/farmhash\n[submodule \"third_party/fast_float/src\"]\n\tpath = third_party/fast_float/src\n\turl = https://chromium.googlesource.com/external/github.com/fastfloat/fast_float\n[submodule \"third_party/ffmpeg\"]\n\tpath = third_party/ffmpeg\n\turl = https://chromium.googlesource.com/chromium/third_party/ffmpeg\n[submodule \"third_party/flac\"]\n\tpath = third_party/flac\n\turl = https://chromium.googlesource.com/chromium/deps/flac\n[submodule \"third_party/flatbuffers/src\"]\n\tpath = third_party/flatbuffers/src\n\turl = https://chromium.googlesource.com/external/github.com/google/flatbuffers\n[submodule \"third_party/fontconfig/src\"]\n\tpath = third_party/fontconfig/src\n\turl = https://chromium.googlesource.com/external/fontconfig\n\tgclient-condition = checkout_linux\n[submodule \"third_party/fp16/src\"]\n\tpath = third_party/fp16/src\n\turl = https://chromium.googlesource.com/external/github.com/Maratyszcza/FP16\n[submodule \"third_party/gemmlowp/src\"]\n\tpath = third_party/gemmlowp/src\n\turl = https://chromium.googlesource.com/external/github.com/google/gemmlowp\n[submodule \"third_party/grpc/src\"]\n\tpath = third_party/grpc/src\n\turl = https://chromium.googlesource.com/external/github.com/grpc/grpc\n[submodule \"third_party/freetype/src\"]\n\tpath = third_party/freetype/src\n\turl = https://chromium.googlesource.com/chromium/src/third_party/freetype2\n[submodule \"third_party/freetype-testing/src\"]\n\tpath = third_party/freetype-testing/src\n\turl = https://chromium.googlesource.com/external/github.com/freetype/freetype2-testing\n[submodule \"third_party/fxdiv/src\"]\n\tpath = third_party/fxdiv/src\n\turl = https://chromium.googlesource.com/external/github.com/Maratyszcza/FXdiv\n[submodule \"third_party/harfbuzz-ng/src\"]\n\tpath = third_party/harfbuzz-ng/src\n\turl = https://chromium.googlesource.com/external/github.com/harfbuzz/harfbuzz\n[submodule \"third_party/ink/src\"]\n\tpath = third_party/ink/src\n\turl = https://chromium.googlesource.com/external/github.com/google/ink\n[submodule \"third_party/ink_stroke_modeler/src\"]\n\tpath = third_party/ink_stroke_modeler/src\n\turl = https://chromium.googlesource.com/external/github.com/google/ink-stroke-modeler\n[submodule \"third_party/instrumented_libs\"]\n\tpath = third_party/instrumented_libs\n\turl = https://chromium.googlesource.com/chromium/third_party/instrumented_libraries\n\tgclient-condition = checkout_instrumented_libraries\n[submodule \"third_party/jszip/src\"]\n\tpath = third_party/jszip/src\n\turl = https://chromium.googlesource.com/external/github.com/Stuk/jszip\n\tgclient-condition = checkout_ios\n[submodule \"third_party/emoji-segmenter/src\"]\n\tpath = third_party/emoji-segmenter/src\n\turl = https://chromium.googlesource.com/external/github.com/google/emoji-segmenter\n[submodule \"third_party/ots/src\"]\n\tpath = third_party/ots/src\n\turl = https://chromium.googlesource.com/external/github.com/khaledhosny/ots\n[submodule \"third_party/libgav1/src\"]\n\tpath = third_party/libgav1/src\n\turl = https://chromium.googlesource.com/codecs/libgav1\n[submodule \"third_party/google_toolbox_for_mac/src\"]\n\tpath = third_party/google_toolbox_for_mac/src\n\turl = https://chromium.googlesource.com/external/github.com/google/google-toolbox-for-mac\n\tgclient-condition = checkout_ios or checkout_mac\n[submodule \"third_party/google-truth/src\"]\n\tpath = third_party/google-truth/src\n\turl = https://chromium.googlesource.com/external/github.com/google/truth\n\tgclient-condition = checkout_android\n[submodule \"third_party/googletest/src\"]\n\tpath = third_party/googletest/src\n\turl = https://chromium.googlesource.com/external/github.com/google/googletest\n[submodule \"third_party/gperf\"]\n\tpath = third_party/gperf\n\turl = https://chromium.googlesource.com/chromium/deps/gperf\n\tgclient-condition = checkout_win\n[submodule \"third_party/cardboard/src\"]\n\tpath = third_party/cardboard/src\n\turl = https://chromium.googlesource.com/external/github.com/googlevr/cardboard\n\tgclient-condition = checkout_android\n[submodule \"third_party/arcore-android-sdk/src\"]\n\tpath = third_party/arcore-android-sdk/src\n\turl = https://chromium.googlesource.com/external/github.com/google-ar/arcore-android-sdk\n\tgclient-condition = checkout_android\n[submodule \"third_party/hunspell_dictionaries\"]\n\tpath = third_party/hunspell_dictionaries\n\turl = https://chromium.googlesource.com/chromium/deps/hunspell_dictionaries\n[submodule \"third_party/icu\"]\n\tpath = third_party/icu\n\turl = https://chromium.googlesource.com/chromium/deps/icu\n[submodule \"third_party/javalang/src\"]\n\tpath = third_party/javalang/src\n\turl = https://chromium.googlesource.com/external/github.com/c2nes/javalang\n\tgclient-condition = checkout_android\n[submodule \"third_party/jsoncpp/source\"]\n\tpath = third_party/jsoncpp/source\n\turl = https://chromium.googlesource.com/external/github.com/open-source-parsers/jsoncpp\n[submodule \"third_party/junit/src\"]\n\tpath = third_party/junit/src\n\turl = https://chromium.googlesource.com/external/junit\n\tgclient-condition = checkout_android\n[submodule \"third_party/leveldatabase/src\"]\n\tpath = third_party/leveldatabase/src\n\turl = https://chromium.googlesource.com/external/leveldb\n[submodule \"third_party/libFuzzer/src\"]\n\tpath = third_party/libFuzzer/src\n\turl = https://chromium.googlesource.com/external/github.com/llvm/llvm-project/compiler-rt/lib/fuzzer\n[submodule \"third_party/fuzztest/src\"]\n\tpath = third_party/fuzztest/src\n\turl = https://chromium.googlesource.com/external/github.com/google/fuzztest\n[submodule \"third_party/domato/src\"]\n\tpath = third_party/domato/src\n\turl = https://chromium.googlesource.com/external/github.com/googleprojectzero/domato\n[submodule \"third_party/libaddressinput/src\"]\n\tpath = third_party/libaddressinput/src\n\turl = https://chromium.googlesource.com/external/libaddressinput\n[submodule \"third_party/libaom/source/libaom\"]\n\tpath = third_party/libaom/source/libaom\n\turl = https://aomedia.googlesource.com/aom\n[submodule \"third_party/libavif/src\"]\n\tpath = third_party/libavif/src\n\turl = https://chromium.googlesource.com/external/github.com/AOMediaCodec/libavif\n[submodule \"third_party/crabbyavif/src\"]\n\tpath = third_party/crabbyavif/src\n\turl = https://chromium.googlesource.com/external/github.com/webmproject/CrabbyAvif\n[submodule \"third_party/nearby/src\"]\n\tpath = third_party/nearby/src\n\turl = https://chromium.googlesource.com/external/github.com/google/nearby-connections\n[submodule \"third_party/beto-core/src\"]\n\tpath = third_party/beto-core/src\n\turl = https://beto-core.googlesource.com/beto-core\n[submodule \"third_party/securemessage/src\"]\n\tpath = third_party/securemessage/src\n\turl = https://chromium.googlesource.com/external/github.com/google/securemessage\n[submodule \"third_party/speedometer/main\"]\n\tpath = third_party/speedometer/main\n\turl = https://chromium.googlesource.com/external/github.com/WebKit/Speedometer\n[submodule \"third_party/speedometer/v3.0\"]\n\tpath = third_party/speedometer/v3.0\n\turl = https://chromium.googlesource.com/external/github.com/WebKit/Speedometer\n[submodule \"third_party/speedometer/v2.0\"]\n\tpath = third_party/speedometer/v2.0\n\turl = https://chromium.googlesource.com/external/github.com/WebKit/Speedometer\n[submodule \"third_party/speedometer/v2.1\"]\n\tpath = third_party/speedometer/v2.1\n\turl = https://chromium.googlesource.com/external/github.com/WebKit/Speedometer\n[submodule \"third_party/ukey2/src\"]\n\tpath = third_party/ukey2/src\n\turl = https://chromium.googlesource.com/external/github.com/google/ukey2\n[submodule \"third_party/cros-components/src\"]\n\tpath = third_party/cros-components/src\n\turl = https://chromium.googlesource.com/external/google3/cros_components\n[submodule \"third_party/libdrm/src\"]\n\tpath = third_party/libdrm/src\n\turl = https://chromium.googlesource.com/chromiumos/third_party/libdrm\n\tgclient-condition = checkout_linux\n[submodule \"third_party/expat/src\"]\n\tpath = third_party/expat/src\n\turl = https://chromium.googlesource.com/external/github.com/libexpat/libexpat\n[submodule \"third_party/libipp/libipp\"]\n\tpath = third_party/libipp/libipp\n\turl = https://chromium.googlesource.com/chromiumos/platform2/libipp\n\tgclient-condition = checkout_linux\n[submodule \"third_party/libjpeg_turbo\"]\n\tpath = third_party/libjpeg_turbo\n\turl = https://chromium.googlesource.com/chromium/deps/libjpeg_turbo\n[submodule \"third_party/liblouis/src\"]\n\tpath = third_party/liblouis/src\n\turl = https://chromium.googlesource.com/external/liblouis-github\n\tgclient-condition = checkout_linux\n[submodule \"third_party/libphonenumber/dist\"]\n\tpath = third_party/libphonenumber/dist\n\turl = https://chromium.googlesource.com/external/libphonenumber\n[submodule \"third_party/libprotobuf-mutator/src\"]\n\tpath = third_party/libprotobuf-mutator/src\n\turl = https://chromium.googlesource.com/external/github.com/google/libprotobuf-mutator\n[submodule \"third_party/libsrtp\"]\n\tpath = third_party/libsrtp\n\turl = https://chromium.googlesource.com/chromium/deps/libsrtp\n[submodule \"third_party/libsync/src\"]\n\tpath = third_party/libsync/src\n\turl = https://chromium.googlesource.com/aosp/platform/system/core/libsync\n\tgclient-condition = checkout_linux or checkout_android\n[submodule \"third_party/libunwindstack\"]\n\tpath = third_party/libunwindstack\n\turl = https://chromium.googlesource.com/chromium/src/third_party/libunwindstack\n\tgclient-condition = checkout_android\n[submodule \"third_party/libva-fake-driver/src\"]\n\tpath = third_party/libva-fake-driver/src\n\turl = https://chromium.googlesource.com/chromiumos/platform/libva-fake-driver\n[submodule \"third_party/libvpx/source/libvpx\"]\n\tpath = third_party/libvpx/source/libvpx\n\turl = https://chromium.googlesource.com/webm/libvpx\n[submodule \"third_party/libwebm/source\"]\n\tpath = third_party/libwebm/source\n\turl = https://chromium.googlesource.com/webm/libwebm\n[submodule \"third_party/libwebp/src\"]\n\tpath = third_party/libwebp/src\n\turl = https://chromium.googlesource.com/webm/libwebp\n[submodule \"third_party/libyuv\"]\n\tpath = third_party/libyuv\n\turl = https://chromium.googlesource.com/libyuv/libyuv\n[submodule \"third_party/lighttpd\"]\n\tpath = third_party/lighttpd\n\turl = https://chromium.googlesource.com/chromium/deps/lighttpd\n\tgclient-condition = checkout_mac or checkout_win\n[submodule \"third_party/lss\"]\n\tpath = third_party/lss\n\turl = https://chromium.googlesource.com/linux-syscall-support\n\tgclient-condition = checkout_android or checkout_linux\n[submodule \"third_party/material_color_utilities/src\"]\n\tpath = third_party/material_color_utilities/src\n\turl = https://chromium.googlesource.com/external/github.com/material-foundation/material-color-utilities\n[submodule \"third_party/material_design_icons/src\"]\n\tpath = third_party/material_design_icons/src\n\turl = https://chromium.googlesource.com/external/github.com/google/material-design-icons\n\tgclient-condition = checkout_ios\n[submodule \"third_party/microsoft_dxheaders/src\"]\n\tpath = third_party/microsoft_dxheaders/src\n\turl = https://chromium.googlesource.com/external/github.com/microsoft/DirectX-Headers\n\tgclient-condition = checkout_win\n[submodule \"third_party/minigbm/src\"]\n\tpath = third_party/minigbm/src\n\turl = https://chromium.googlesource.com/chromiumos/platform/minigbm\n\tgclient-condition = checkout_linux\n[submodule \"third_party/nasm\"]\n\tpath = third_party/nasm\n\turl = https://chromium.googlesource.com/chromium/deps/nasm\n[submodule \"third_party/neon_2_sse/src\"]\n\tpath = third_party/neon_2_sse/src\n\turl = https://chromium.googlesource.com/external/github.com/intel/ARM_NEON_2_x86_SSE\n[submodule \"third_party/netty-tcnative/src\"]\n\tpath = third_party/netty-tcnative/src\n\turl = https://chromium.googlesource.com/external/netty-tcnative\n\tgclient-condition = checkout_android\n[submodule \"third_party/netty4/src\"]\n\tpath = third_party/netty4/src\n\turl = https://chromium.googlesource.com/external/netty4\n\tgclient-condition = checkout_android\n[submodule \"third_party/openh264/src\"]\n\tpath = third_party/openh264/src\n\turl = https://chromium.googlesource.com/external/github.com/cisco/openh264\n[submodule \"third_party/openscreen/src\"]\n\tpath = third_party/openscreen/src\n\turl = https://chromium.googlesource.com/openscreen\n[submodule \"third_party/openxr/src\"]\n\tpath = third_party/openxr/src\n\turl = https://chromium.googlesource.com/external/github.com/KhronosGroup/OpenXR-SDK\n\tgclient-condition = checkout_openxr\n[submodule \"third_party/pdfium\"]\n\tpath = third_party/pdfium\n\turl = https://pdfium.googlesource.com/pdfium\n[submodule \"third_party/perfetto\"]\n\tpath = third_party/perfetto\n\turl = https://android.googlesource.com/platform/external/perfetto\n[submodule \"third_party/perl\"]\n\tpath = third_party/perl\n\turl = https://chromium.googlesource.com/chromium/deps/perl\n\tgclient-condition = checkout_win\n[submodule \"third_party/protobuf-javascript/src\"]\n\tpath = third_party/protobuf-javascript/src\n\turl = https://chromium.googlesource.com/external/github.com/protocolbuffers/protobuf-javascript\n[submodule \"third_party/pthreadpool/src\"]\n\tpath = third_party/pthreadpool/src\n\turl = https://chromium.googlesource.com/external/github.com/Maratyszcza/pthreadpool\n[submodule \"third_party/pyelftools\"]\n\tpath = third_party/pyelftools\n\turl = https://chromium.googlesource.com/chromiumos/third_party/pyelftools\n\tgclient-condition = checkout_linux\n[submodule \"third_party/quic_trace/src\"]\n\tpath = third_party/quic_trace/src\n\turl = https://chromium.googlesource.com/external/github.com/google/quic-trace\n[submodule \"third_party/pywebsocket3/src\"]\n\tpath = third_party/pywebsocket3/src\n\turl = https://chromium.googlesource.com/external/github.com/GoogleChromeLabs/pywebsocket3\n[submodule \"third_party/re2/src\"]\n\tpath = third_party/re2/src\n\turl = https://chromium.googlesource.com/external/github.com/google/re2\n[submodule \"third_party/requests/src\"]\n\tpath = third_party/requests/src\n\turl = https://chromium.googlesource.com/external/github.com/kennethreitz/requests\n\tgclient-condition = checkout_android\n[submodule \"third_party/ruy/src\"]\n\tpath = third_party/ruy/src\n\turl = https://chromium.googlesource.com/external/github.com/google/ruy\n[submodule \"third_party/skia\"]\n\tpath = third_party/skia\n\turl = https://skia.googlesource.com/skia\n[submodule \"third_party/smhasher/src\"]\n\tpath = third_party/smhasher/src\n\turl = https://chromium.googlesource.com/external/smhasher\n[submodule \"third_party/snappy/src\"]\n\tpath = third_party/snappy/src\n\turl = https://chromium.googlesource.com/external/github.com/google/snappy\n[submodule \"third_party/sqlite/src\"]\n\tpath = third_party/sqlite/src\n\turl = https://chromium.googlesource.com/chromium/deps/sqlite\n[submodule \"third_party/swiftshader\"]\n\tpath = third_party/swiftshader\n\turl = https://swiftshader.googlesource.com/SwiftShader\n[submodule \"third_party/text-fragments-polyfill/src\"]\n\tpath = third_party/text-fragments-polyfill/src\n\turl = https://chromium.googlesource.com/external/github.com/GoogleChromeLabs/text-fragments-polyfill\n[submodule \"third_party/tflite/src\"]\n\tpath = third_party/tflite/src\n\turl = https://chromium.googlesource.com/external/github.com/tensorflow/tensorflow\n[submodule \"third_party/vulkan-deps\"]\n\tpath = third_party/vulkan-deps\n\turl = https://chromium.googlesource.com/vulkan-deps\n[submodule \"third_party/glslang/src\"]\n\tpath = third_party/glslang/src\n\turl = https://chromium.googlesource.com/external/github.com/KhronosGroup/glslang\n[submodule \"third_party/spirv-cross/src\"]\n\tpath = third_party/spirv-cross/src\n\turl = https://chromium.googlesource.com/external/github.com/KhronosGroup/SPIRV-Cross\n[submodule \"third_party/spirv-headers/src\"]\n\tpath = third_party/spirv-headers/src\n\turl = https://chromium.googlesource.com/external/github.com/KhronosGroup/SPIRV-Headers\n[submodule \"third_party/spirv-tools/src\"]\n\tpath = third_party/spirv-tools/src\n\turl = https://chromium.googlesource.com/external/github.com/KhronosGroup/SPIRV-Tools\n[submodule \"third_party/vulkan-headers/src\"]\n\tpath = third_party/vulkan-headers/src\n\turl = https://chromium.googlesource.com/external/github.com/KhronosGroup/Vulkan-Headers\n[submodule \"third_party/vulkan-loader/src\"]\n\tpath = third_party/vulkan-loader/src\n\turl = https://chromium.googlesource.com/external/github.com/KhronosGroup/Vulkan-Loader\n[submodule \"third_party/vulkan-tools/src\"]\n\tpath = third_party/vulkan-tools/src\n\turl = https://chromium.googlesource.com/external/github.com/KhronosGroup/Vulkan-Tools\n[submodule \"third_party/vulkan-utility-libraries/src\"]\n\tpath = third_party/vulkan-utility-libraries/src\n\turl = https://chromium.googlesource.com/external/github.com/KhronosGroup/Vulkan-Utility-Libraries\n[submodule \"third_party/vulkan-validation-layers/src\"]\n\tpath = third_party/vulkan-validation-layers/src\n\turl = https://chromium.googlesource.com/external/github.com/KhronosGroup/Vulkan-ValidationLayers\n[submodule \"third_party/vulkan_memory_allocator\"]\n\tpath = third_party/vulkan_memory_allocator\n\turl = https://chromium.googlesource.com/external/github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator\n[submodule \"third_party/wasm_tts_engine/src\"]\n\tpath = third_party/wasm_tts_engine/src\n\turl = https://chromium.googlesource.com/chromium/wasm-tts-engine\n[submodule \"third_party/wayland/src\"]\n\tpath = third_party/wayland/src\n\turl = https://chromium.googlesource.com/external/anongit.freedesktop.org/git/wayland/wayland\n\tgclient-condition = checkout_linux\n[submodule \"third_party/wayland-protocols/src\"]\n\tpath = third_party/wayland-protocols/src\n\turl = https://chromium.googlesource.com/external/anongit.freedesktop.org/git/wayland/wayland-protocols\n\tgclient-condition = checkout_linux\n[submodule \"third_party/wayland-protocols/kde\"]\n\tpath = third_party/wayland-protocols/kde\n\turl = https://chromium.googlesource.com/external/github.com/KDE/plasma-wayland-protocols\n\tgclient-condition = checkout_linux\n[submodule \"third_party/wayland-protocols/gtk\"]\n\tpath = third_party/wayland-protocols/gtk\n\turl = https://chromium.googlesource.com/external/github.com/GNOME/gtk\n\tgclient-condition = checkout_linux\n[submodule \"third_party/webdriver/pylib\"]\n\tpath = third_party/webdriver/pylib\n\turl = https://chromium.googlesource.com/external/github.com/SeleniumHQ/selenium/py\n[submodule \"third_party/webgl/src\"]\n\tpath = third_party/webgl/src\n\turl = https://chromium.googlesource.com/external/khronosgroup/webgl\n[submodule \"third_party/webgpu-cts/src\"]\n\tpath = third_party/webgpu-cts/src\n\turl = https://chromium.googlesource.com/external/github.com/gpuweb/cts\n[submodule \"third_party/webpagereplay\"]\n\tpath = third_party/webpagereplay\n\turl = https://chromium.googlesource.com/webpagereplay\n[submodule \"third_party/webrtc\"]\n\tpath = third_party/webrtc\n\turl = https://webrtc.googlesource.com/src\n[submodule \"third_party/wuffs/src\"]\n\tpath = third_party/wuffs/src\n\turl = https://skia.googlesource.com/external/github.com/google/wuffs-mirror-release-c\n[submodule \"third_party/weston/src\"]\n\tpath = third_party/weston/src\n\turl = https://chromium.googlesource.com/external/anongit.freedesktop.org/git/wayland/weston\n\tgclient-condition = checkout_linux\n[submodule \"third_party/wlcs/src\"]\n\tpath = third_party/wlcs/src\n\turl = https://chromium.googlesource.com/external/github.com/MirServer/wlcs\n\tgclient-condition = checkout_chromeos\n[submodule \"third_party/xdg-utils\"]\n\tpath = third_party/xdg-utils\n\turl = https://chromium.googlesource.com/chromium/deps/xdg-utils\n\tgclient-condition = checkout_linux\n[submodule \"third_party/xnnpack/src\"]\n\tpath = third_party/xnnpack/src\n\turl = https://chromium.googlesource.com/external/github.com/google/XNNPACK\n[submodule \"third_party/zstd/src\"]\n\tpath = third_party/zstd/src\n\turl = https://chromium.googlesource.com/external/github.com/facebook/zstd\n[submodule \"v8\"]\n\tpath = v8\n\turl = https://chromium.googlesource.com/v8/v8\n[submodule \"internal\"]\n\tpath = internal\n\turl = https://chrome-internal.googlesource.com/chrome/src-internal\n\tgclient-condition = checkout_src_internal\n[submodule \"third_party/android_prebuilts/build_tools\"]\n\tpath = third_party/android_prebuilts/build_tools\n\turl = https://android.googlesource.com/platform/prebuilts/build-tools\n\tgclient-condition = checkout_android_prebuilts_build_tools\n[submodule \"chromeos/ash/resources/internal\"]\n\tpath = chromeos/ash/resources/internal\n\turl = https://chrome-internal.googlesource.com/chrome/chromeos/ash/resources/internal\n\tgclient-condition = checkout_src_internal and checkout_chromeos\n[submodule \"chromeos/assistant/internal\"]\n\tpath = chromeos/assistant/internal\n\turl = https://chrome-internal.googlesource.com/chrome/assistant\n\tgclient-condition = checkout_src_internal and checkout_chromeos\n[submodule \"build/fuchsia/internal\"]\n\tpath = build/fuchsia/internal\n\turl = https://chrome-internal.googlesource.com/fuchsia/build\n\tgclient-condition = checkout_fuchsia_internal and checkout_src_internal\n[submodule \"chrome/app/theme/default_100_percent/google_chrome\"]\n\tpath = chrome/app/theme/default_100_percent/google_chrome\n\turl = https://chrome-internal.googlesource.com/chrome/theme/default_100_percent/google_chrome\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/app/theme/default_200_percent/google_chrome\"]\n\tpath = chrome/app/theme/default_200_percent/google_chrome\n\turl = https://chrome-internal.googlesource.com/chrome/theme/default_200_percent/google_chrome\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/app/theme/google_chrome\"]\n\tpath = chrome/app/theme/google_chrome\n\turl = https://chrome-internal.googlesource.com/chrome/theme/google_chrome\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/browser/enterprise/connectors/internal\"]\n\tpath = chrome/browser/enterprise/connectors/internal\n\turl = https://chrome-internal.googlesource.com/chrome/browser/enterprise/connectors/internal\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/browser/google/linkdoctor_internal\"]\n\tpath = chrome/browser/google/linkdoctor_internal\n\turl = https://chrome-internal.googlesource.com/chrome/linkdoctor\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/browser/internal\"]\n\tpath = chrome/browser/internal\n\turl = https://chrome-internal.googlesource.com/chrome/browser_internal\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/browser/media/engagement_internal\"]\n\tpath = chrome/browser/media/engagement_internal\n\turl = https://chrome-internal.googlesource.com/chrome/browser/media/engagement_internal\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/browser/nearby_sharing/internal\"]\n\tpath = chrome/browser/nearby_sharing/internal\n\turl = https://chrome-internal.googlesource.com/chrome/browser/nearby_sharing/internal\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/browser/platform_experience/win\"]\n\tpath = chrome/browser/platform_experience/win\n\turl = https://chrome-internal.googlesource.com/chrome/browser/platform_experience/win\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/browser/request_header_integrity/internal\"]\n\tpath = chrome/browser/request_header_integrity/internal\n\turl = https://chrome-internal.googlesource.com/chrome/browser/request_header_integrity/internal\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/browser/resources/downloads/internal\"]\n\tpath = chrome/browser/resources/downloads/internal\n\turl = https://chrome-internal.googlesource.com/chrome/browser/resources/downloads_internal\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/browser/resources/settings/internal\"]\n\tpath = chrome/browser/resources/settings/internal\n\turl = https://chrome-internal.googlesource.com/chrome/browser/resources/settings_internal\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/browser/spellchecker/internal\"]\n\tpath = chrome/browser/spellchecker/internal\n\turl = https://chrome-internal.googlesource.com/chrome/spellchecker/internal\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/elevation_service/internal\"]\n\tpath = chrome/elevation_service/internal\n\turl = https://chrome-internal.googlesource.com/chrome/elevation_service/internal\n\tgclient-condition = checkout_src_internal and checkout_win\n[submodule \"chrome/installer/mac/internal\"]\n\tpath = chrome/installer/mac/internal\n\turl = https://chrome-internal.googlesource.com/chrome/installer/mac/internal\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/test/data/firefox3_profile/searchplugins\"]\n\tpath = chrome/test/data/firefox3_profile/searchplugins\n\turl = https://chrome-internal.googlesource.com/chrome/data/osdd/firefox3_profile_searchplugins\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/test/data/firefox3_searchplugins\"]\n\tpath = chrome/test/data/firefox3_searchplugins\n\turl = https://chrome-internal.googlesource.com/chrome/data/osdd/firefox3_searchplugins\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/test/data/gpu/vt\"]\n\tpath = chrome/test/data/gpu/vt\n\turl = https://chrome-internal.googlesource.com/chrome/data/vectortown_endurance/vectortownstatic-20121022\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/test/data/perf/frame_rate/private\"]\n\tpath = chrome/test/data/perf/frame_rate/private\n\turl = https://chrome-internal.googlesource.com/chrome/data/frame_rate_tests\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/test/data/perf/private\"]\n\tpath = chrome/test/data/perf/private\n\turl = https://chrome-internal.googlesource.com/chrome/data/perf_tests\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/test/data/pdf_private\"]\n\tpath = chrome/test/data/pdf_private\n\turl = https://chrome-internal.googlesource.com/chrome/data/pdf_private\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/test/media_router/internal\"]\n\tpath = chrome/test/media_router/internal\n\turl = https://chrome-internal.googlesource.com/chrome/test/media_router/internal\n\tgclient-condition = checkout_src_internal\n[submodule \"chrome/tools/memory\"]\n\tpath = chrome/tools/memory\n\turl = https://chrome-internal.googlesource.com/chrome/tools/memory\n\tgclient-condition = checkout_win and checkout_src_internal\n[submodule \"chrome/services/speech/internal\"]\n\tpath = chrome/services/speech/internal\n\turl = https://chrome-internal.googlesource.com/chromeos/speech\n\tgclient-condition = checkout_chromeos and checkout_src_internal\n[submodule \"chrome/updater/internal\"]\n\tpath = chrome/updater/internal\n\turl = https://chrome-internal.googlesource.com/chrome/updater/internal\n\tgclient-condition = checkout_src_internal\n[submodule \"components/accessibility/internal\"]\n\tpath = components/accessibility/internal\n\turl = https://chrome-internal.googlesource.com/chrome-accessibility\n\tgclient-condition = checkout_src_internal\n[submodule \"components/autofill/core/browser/form_parsing/internal_resources\"]\n\tpath = components/autofill/core/browser/form_parsing/internal_resources\n\turl = https://chrome-internal.googlesource.com/chrome/components/autofill_regex_patterns\n\tgclient-condition = checkout_src_internal\n[submodule \"components/crash/core/app/internal\"]\n\tpath = components/crash/core/app/internal\n\turl = https://chrome-internal.googlesource.com/chrome/components/crash\n\tgclient-condition = checkout_src_internal\n[submodule \"components/metrics/internal\"]\n\tpath = components/metrics/internal\n\turl = https://chrome-internal.googlesource.com/chrome/components/metrics/internal\n\tgclient-condition = checkout_src_internal\n[submodule \"components/ntp_tiles/resources/internal\"]\n\tpath = components/ntp_tiles/resources/internal\n\turl = https://chrome-internal.googlesource.com/chrome/components/ntp_tiles/resources\n\tgclient-condition = checkout_src_internal\n[submodule \"components/optimization_guide/internal\"]\n\tpath = components/optimization_guide/internal\n\turl = https://chrome-internal.googlesource.com/chrome/components/optimization_guide\n\tgclient-condition = checkout_src_internal\n[submodule \"components/plus_addresses/resources/internal\"]\n\tpath = components/plus_addresses/resources/internal\n\turl = https://chrome-internal.googlesource.com/chrome/components/plus_addresses/resources\n\tgclient-condition = checkout_src_internal\n[submodule \"components/resources/default_100_percent/google_chrome\"]\n\tpath = components/resources/default_100_percent/google_chrome\n\turl = https://chrome-internal.googlesource.com/chrome/components/default_100_percent/google_chrome\n\tgclient-condition = checkout_src_internal\n[submodule \"components/resources/default_200_percent/google_chrome\"]\n\tpath = components/resources/default_200_percent/google_chrome\n\turl = https://chrome-internal.googlesource.com/chrome/components/default_200_percent/google_chrome\n\tgclient-condition = checkout_src_internal\n[submodule \"components/resources/default_300_percent/google_chrome\"]\n\tpath = components/resources/default_300_percent/google_chrome\n\turl = https://chrome-internal.googlesource.com/chrome/components/default_300_percent/google_chrome\n\tgclient-condition = checkout_src_internal\n[submodule \"components/site_isolation/internal\"]\n\tpath = components/site_isolation/internal\n\turl = https://chrome-internal.googlesource.com/chrome/components/site_isolation\n\tgclient-condition = checkout_src_internal\n[submodule \"components/test/data/autofill/heuristics-json/internal\"]\n\tpath = components/test/data/autofill/heuristics-json/internal\n\turl = https://chrome-internal.googlesource.com/chrome/test/autofill/structured_forms\n\tgclient-condition = checkout_chromium_autofill_test_dependencies\n[submodule \"components/test/data/autofill/label-doms/internal\"]\n\tpath = components/test/data/autofill/label-doms/internal\n\turl = https://chrome-internal.googlesource.com/chrome/test/autofill/field_labels\n\tgclient-condition = checkout_chromium_autofill_test_dependencies\n[submodule \"components/vector_icons/google_chrome\"]\n\tpath = components/vector_icons/google_chrome\n\turl = https://chrome-internal.googlesource.com/chrome/vector_icons/google_chrome\n\tgclient-condition = checkout_src_internal\n[submodule \"content/test/data/plugin\"]\n\tpath = content/test/data/plugin\n\turl = https://chrome-internal.googlesource.com/chrome/data/chrome_plugin_tests\n\tgclient-condition = checkout_src_internal\n[submodule \"google_apis/internal\"]\n\tpath = google_apis/internal\n\turl = https://chrome-internal.googlesource.com/chrome/google_apis/internal\n\tgclient-condition = checkout_src_internal\n[submodule \"ios_internal\"]\n\tpath = ios_internal\n\turl = https://chrome-internal.googlesource.com/chrome/ios_internal\n\tgclient-condition = checkout_ios and checkout_src_internal\n[submodule \"remoting/host/installer/linux/internal\"]\n\tpath = remoting/host/installer/linux/internal\n\turl = https://chrome-internal.googlesource.com/chrome/remoting/host/installer/linux/internal\n\tgclient-condition = checkout_linux and checkout_src_internal\n[submodule \"remoting/internal\"]\n\tpath = remoting/internal\n\turl = https://chrome-internal.googlesource.com/chrome/remoting/internal\n\tgclient-condition = checkout_src_internal\n[submodule \"remoting/test/internal\"]\n\tpath = remoting/test/internal\n\turl = https://chrome-internal.googlesource.com/chrome/remoting/test/internal\n\tgclient-condition = checkout_src_internal\n[submodule \"remoting/tools/internal\"]\n\tpath = remoting/tools/internal\n\turl = https://chrome-internal.googlesource.com/chrome/remoting/tools/internal\n\tgclient-condition = checkout_src_internal\n[submodule \"signing_keys\"]\n\tpath = signing_keys\n\turl = https://chrome-internal.googlesource.com/clank/apptestkey\n\tgclient-condition = checkout_android and checkout_google_internal and checkout_src_internal\n[submodule \"skia/tools/clusterfuzz-data\"]\n\tpath = skia/tools/clusterfuzz-data\n\turl = https://chrome-internal.googlesource.com/chrome/tools/clusterfuzz-data\n\tgclient-condition = checkout_clusterfuzz_data and checkout_src_internal\n[submodule \"third_party/android_tools_internal\"]\n\tpath = third_party/android_tools_internal\n\turl = https://chrome-internal.googlesource.com/clank/third_party/android_tools\n\tgclient-condition = checkout_android and checkout_src_internal\n[submodule \"third_party/widevine/cdm/chromeos\"]\n\tpath = third_party/widevine/cdm/chromeos\n\turl = https://chrome-internal.googlesource.com/chrome/deps/widevine/cdm/chromeos\n\tgclient-condition = (checkout_chromeos or checkout_linux) and checkout_src_internal\n[submodule \"third_party/widevine/cdm/linux\"]\n\tpath = third_party/widevine/cdm/linux\n\turl = https://chrome-internal.googlesource.com/chrome/deps/widevine/cdm/linux\n\tgclient-condition = checkout_linux and checkout_src_internal\n[submodule \"third_party/widevine/cdm/mac\"]\n\tpath = third_party/widevine/cdm/mac\n\turl = https://chrome-internal.googlesource.com/chrome/deps/widevine/cdm/mac\n\tgclient-condition = checkout_mac and checkout_src_internal\n[submodule \"third_party/widevine/cdm/win\"]\n\tpath = third_party/widevine/cdm/win\n\turl = https://chrome-internal.googlesource.com/chrome/deps/widevine/cdm/win\n\tgclient-condition = checkout_win and checkout_src_internal\n[submodule \"third_party/widevine/scripts\"]\n\tpath = third_party/widevine/scripts\n\turl = https://chrome-internal.googlesource.com/chrome/deps/widevine/scripts\n\tgclient-condition = checkout_src_internal\n[submodule \"third_party/widevine/test/license_server\"]\n\tpath = third_party/widevine/test/license_server\n\turl = https://chrome-internal.googlesource.com/chrome/deps/widevine/test/license_server\n\tgclient-condition = checkout_linux and checkout_src_internal\n[submodule \"third_party/wix\"]\n\tpath = third_party/wix\n\turl = https://chrome-internal.googlesource.com/chrome/deps/wix/v3_5_2519\n\tgclient-condition = checkout_win and checkout_src_internal\n[submodule \"tools/perf/data\"]\n\tpath = tools/perf/data\n\turl = https://chrome-internal.googlesource.com/chrome/tools/perf/data\n\tgclient-condition = checkout_src_internal\n[submodule \"ui/file_manager/internal\"]\n\tpath = ui/file_manager/internal\n\turl = https://chrome-internal.googlesource.com/chrome/file_manager\n\tgclient-condition = (checkout_chromeos or checkout_linux) and checkout_src_internal\n[submodule \"ui/webui/internal\"]\n\tpath = ui/webui/internal\n\turl = https://chrome-internal.googlesource.com/chrome/ui-webui-internal\n\tgclient-condition = checkout_chromeos and checkout_src_internal\n[submodule \"webkit/data/bmp_decoder\"]\n\tpath = webkit/data/bmp_decoder\n\turl = https://chrome-internal.googlesource.com/chrome/data/bmp_decoder\n\tgclient-condition = checkout_src_internal\n[submodule \"webkit/data/ico_decoder\"]\n\tpath = webkit/data/ico_decoder\n\turl = https://chrome-internal.googlesource.com/chrome/data/ico_decoder\n\tgclient-condition = checkout_src_internal\n[submodule \"webkit/data/test_shell/plugins\"]\n\tpath = webkit/data/test_shell/plugins\n\turl = https://chrome-internal.googlesource.com/chrome/data/webkit_plugin_tests\n\tgclient-condition = checkout_src_internal\n"
        },
        {
          "name": ".gn",
          "type": "blob",
          "size": 7.802734375,
          "content": "# This file is used by the GN meta build system to find the root of the source\n# tree and to set startup options. For documentation on the values set in this\n# file, run \"gn help dotfile\" at the command line.\n\nimport(\"//build/dotfile_settings.gni\")\nimport(\"//third_party/angle/dotfile_settings.gni\")\n\n# The location of the build configuration file.\nbuildconfig = \"//build/config/BUILDCONFIG.gn\"\n\n# The python interpreter to use by default. On Windows, this will look\n# for python3.exe and python3.bat.\nscript_executable = \"python3\"\n\n# These arguments override the default values for items in a declare_args\n# block. \"gn args\" in turn can override these.\n#\n# In general the value for a build arg in the declare_args block should be the\n# default. In some cases, a DEPS-ed in project will want different defaults for\n# being built as part of Chrome vs. being built standalone. In this case, the\n# Chrome defaults should go here. There should be no overrides here for\n# values declared in the main Chrome repository.\n#\n# Important note for defining defaults: This file is executed before the\n# BUILDCONFIG.gn file. That file sets up the global variables like \"is_ios\".\n# This means that the default_args can not depend on the platform,\n# architecture, or other build parameters. If you really need that, the other\n# repo should define a flag that toggles on a behavior that implements the\n# additional logic required by Chrome to set the variables.\ndefault_args = {\n  # TODO(brettw) bug 684096: Chrome on iOS does not build v8, so \"gn gen\" prints\n  # a warning that \"Build argument has no effect\". When adding a v8 variable, it\n  # also needs to be defined to src/ios/BUILD.gn (respectively removed from both\n  # location when it is removed).\n\n  v8_enable_gdbjit = false\n  v8_imminent_deprecation_warnings = false\n\n  # Don't include webrtc's builtin task queue implementation.\n  rtc_link_task_queue_impl = false\n\n  # When building with Chromium, `webrtc::Location` is replaced by\n  # `base::Location`. Since WebRTC doesn't use `public_deps` (webrtc:8603), it\n  # would fail to propagate the dependency internally. Instead WebRTC let its\n  # embedders to define it globally for all of its targets.\n  rtc_common_public_deps = [ \"//base\" ]\n\n  # Don't include the iLBC audio codec.\n  # TODO(bugs.webrtc.org/8396): Once WebRTC gets rid of its internal\n  # deps on codecs, we can remove this.\n  rtc_include_ilbc = false\n\n  # Changes some setup for the Crashpad build to set them to build against\n  # Chromium's zlib, base, etc.\n  crashpad_dependencies = \"chromium\"\n\n  # Override ANGLE's Vulkan dependencies.\n  angle_vulkan_headers_dir = \"//third_party/vulkan-headers/src\"\n  angle_vulkan_loader_dir = \"//third_party/vulkan-loader/src\"\n  angle_vulkan_tools_dir = \"//third_party/vulkan-tools/src\"\n  angle_vulkan_validation_layers_dir =\n      \"//third_party/vulkan-validation-layers/src\"\n\n  # Override VMA's Vulkan dependencies.\n  vma_vulkan_headers_dir = \"//third_party/vulkan-headers/src\"\n\n  # Overwrite default args declared in the Fuchsia sdk\n  fuchsia_sdk_readelf_exec =\n      \"//third_party/llvm-build/Release+Asserts/bin/llvm-readelf\"\n\n  # Overwrite default args declared in the pdfium library\n  pdf_partition_alloc_dir = \"//base/allocator/partition_allocator\"\n\n  devtools_visibility = [ \"*\" ]\n\n  clang_unsafe_buffers_paths = \"//build/config/unsafe_buffers_paths.txt\"\n}\n\n# These are the targets to skip header checking by default. The files in targets\n# matching these patterns (see \"gn help label_pattern\" for format) will not have\n# their includes checked for proper dependencies when you run either\n# \"gn check\" or \"gn gen --check\".\nno_check_targets = [\n  # //v8, https://crbug.com/v8/7330\n  \"//v8/src/inspector:inspector\",  # 20 errors\n  \"//v8/test/cctest:cctest_sources\",  # 15 errors\n  \"//v8/test/unittests:inspector_unittests_sources\",  # 2 errors\n  \"//v8:cppgc_base\",  # 1 error\n  \"//v8:v8_internal_headers\",  # 11 errors\n  \"//v8:v8_libplatform\",  # 2 errors\n]\n\n# These are the list of GN files that run exec_script. This whitelist exists\n# to force additional review for new uses of exec_script, which is strongly\n# discouraged.\n#\n# PLEASE READ\n#\n# You should almost never need to add new exec_script calls. exec_script is\n# slow, especially on Windows, and can cause confusing effects. Although\n# individually each call isn't slow or necessarily very confusing, at the scale\n# of our repo things get out of hand quickly. By strongly pushing back on all\n# additions, we keep the build fast and clean. If you think you need to add a\n# new call, please consider:\n#\n# - Do not use a script to check for the existence of a file or directory to\n#   enable a different mode. Instead, use GN build args to enable or disable\n#   functionality and set options. An example is checking for a file in the\n#   src-internal repo to see if the corresponding src-internal feature should\n#   be enabled. There are several things that can go wrong with this:\n#\n#    - It's mysterious what causes some things to happen. Although in many cases\n#      such behavior can be conveniently automatic, GN optimizes for explicit\n#      and obvious behavior so people can more easily diagnose problems.\n#\n#    - The user can't enable a mode for one build and not another. With GN build\n#      args, the user can choose the exact configuration of multiple builds\n#      using one checkout. But implicitly basing flags on the state of the\n#      checkout, this functionality is broken.\n#\n#    - It's easy to get stale files. If for example the user edits the gclient\n#      to stop checking out src-internal (or any other optional thing), it's\n#      easy to end up with stale files still mysteriously triggering build\n#      conditions that are no longer appropriate (yes, this happens in real\n#      life).\n#\n# - Do not use a script to iterate files in a directory (glob):\n#\n#    - This has the same \"stale file\" problem as the above discussion. Various\n#      operations can leave untracked files in the source tree which can cause\n#      surprising effects.\n#\n#    - It becomes impossible to use \"git grep\" to find where a certain file is\n#      referenced. This operation is very common and people really do get\n#      confused when things aren't listed.\n#\n#    - It's easy to screw up. One common case is a build-time script that packs\n#      up a directory. The author notices that the script isn't re-run when the\n#      directory is updated, so adds a glob so all the files are listed as\n#      inputs. This seems to work great... until a file is deleted. When a\n#      file is deleted, all the inputs the glob lists will still be up to date\n#      and no command-lines will have been changed. The action will not be\n#      re-run and the build will be broken. It is possible to get this correct\n#      using glob, and it's possible to mess it up without glob, but globs make\n#      this situation much easier to create. if the build always lists the\n#      files and passes them to a script, it will always be correct.\n\nexec_script_whitelist =\n    build_dotfile_settings.exec_script_whitelist +\n    angle_dotfile_settings.exec_script_whitelist +\n    [\n      # Whitelist entries for //build should go into\n      # //build/dotfile_settings.gni instead, so that they can be shared\n      # with other repos. The entries in this list should be only for files\n      # in the Chromium repo outside of //build.\n      \"//build_overrides/build.gni\",\n\n      \"//chrome/android/webapk/shell_apk/prepare_upload_dir/BUILD.gn\",\n      \"//chrome/version.gni\",\n\n      # TODO(dgn): Layer violation but breaks the build otherwise, see\n      # https://crbug.com/474506.\n      \"//clank/java/BUILD.gn\",\n      \"//clank/native/BUILD.gn\",\n\n      \"//google_apis/BUILD.gn\",\n      \"//printing/BUILD.gn\",\n\n      \"//remoting/host/installer/linux/BUILD.gn\",\n      \"//remoting/remoting_version.gni\",\n      \"//remoting/host/installer/win/generate_clsids.gni\",\n\n      \"//tools/grit/grit_rule.gni\",\n      \"//tools/gritsettings/BUILD.gn\",\n    ]\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.4951171875,
          "content": "# Copyright 2021 The Chromium Authors\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n# People change their names or email addresses for many reasons. This\n# list makes sure people’s preferences are respected when using Git\n# commands such as `git log` or `git blame`.\n#\n# See https://git-scm.com/docs/gitmailmap for more information.\n#\n# Please keep the list sorted.\n\nClemens Backes <clemensb@chromium.org> Clemens Hammacher <clemensh@chromium.org>\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.7392578125,
          "content": "# This file defines the Rust style for automatic reformatting.\n# See also https://rust-lang.github.io/rustfmt\n\n# Rust language edition to be used by the parser.\nedition = \"2021\"\n\n# Version of the formatting rules to use.\nstyle_edition = \"2021\"\n\n# Line endings will be converted to \\n.\nnewline_style = \"Unix\"\n\nwrap_comments = true\n\n# The \"Default\" setting has a heuristic which splits lines too aggresively.\n# We are willing to revisit this setting in future versions of rustfmt.\n# Bugs:\n# * https://github.com/rust-lang/rustfmt/issues/3119\n# * https://github.com/rust-lang/rustfmt/issues/3120\nuse_small_heuristics = \"Max\"\n\n# Third party code is formatted upstream.\nignore = [\n  \"third_party/rust/**/crate\",\n  \"third_party/rust/chromium_crates_io/vendor\",\n]\n"
        },
        {
          "name": ".vpython3",
          "type": "blob",
          "size": 16.03515625,
          "content": "# This is a vpython \"spec\" file.\n#\n# It describes patterns for python wheel dependencies of the python scripts in\n# the chromium repo, particularly for dependencies that have compiled components\n# (since pure-python dependencies can be easily vendored into third_party).\n#\n# When vpython is invoked, it finds this file and builds a python VirtualEnv,\n# containing all of the dependencies described in this file, fetching them from\n# CIPD (the \"Chrome Infrastructure Package Deployer\" service). Unlike `pip`,\n# this never requires the end-user machine to have a working python extension\n# compilation environment. All of these packages are built using:\n#   https://chromium.googlesource.com/infra/infra/+/main/infra/tools/dockerbuild/\n#\n# All python scripts in the repo share this same spec, to avoid dependency\n# fragmentation.\n#\n# If you have depot_tools installed in your $PATH, you can invoke python scripts\n# in this repo by running them as you normally would run them, except\n# substituting `vpython` instead of `python` on the command line, e.g.:\n#   vpython path/to/script.py some --arguments\n#\n# Read more about `vpython` and how to modify this file here:\n#   https://chromium.googlesource.com/infra/infra/+/main/doc/users/vpython.md\n\npython_version: \"3.8\"\n\n# The default set of platforms vpython checks does not yet include mac-arm64.\n# Setting `verify_pep425_tag` to the list of platforms we explicitly must support\n# allows us to ensure that vpython specs stay mac-arm64-friendly\nverify_pep425_tag: [\n    {python: \"cp38\", abi: \"cp38\", platform: \"manylinux1_x86_64\"},\n    {python: \"cp38\", abi: \"cp38\", platform: \"linux_arm64\"},\n\n    {python: \"cp38\", abi: \"cp38\", platform: \"macosx_10_10_intel\"},\n    {python: \"cp38\", abi: \"cp38\", platform: \"macosx_11_0_arm64\"},\n\n    {python: \"cp38\", abi: \"cp38\", platform: \"win32\"},\n    {python: \"cp38\", abi: \"cp38\", platform: \"win_amd64\"}\n]\n\n# Used by:\n#   //build/android/pylib/local/emulator/avd.py\n#   //tools/perf/crossbench\nwheel: <\n  name: \"infra/python/wheels/protobuf-py3\"\n  version: \"version:4.25.1\"\n>\n\n# TODO(https://crbug.com/898348): Add in necessary wheels as Python3 versions\n# become available.\nwheel: <\n  name: \"infra/python/wheels/six-py2_py3\"\n  version: \"version:1.15.0\"\n>\n\n# These wheels are necessary to run pytype, i.e. enforce Python 3 type hinting.\n# We currently use 2021.11.2 instead of the 2022.5.5 available in CIPD because\n# 2022.5.5 seems to have issues when analyzing code that imports the asyncio\n# module. 2021.11.2 only has Linux wheels available, so restrict to that\n# platform.\nwheel: <\n  name: \"infra/python/wheels/pytype/${vpython_platform}\"\n  version: \"version:2024.1.24\"\n  match_tag: <\n    platform: \"manylinux1_x86_64\"\n  >\n>\nwheel: <\n  name: \"infra/python/wheels/importlab-py3\"\n  version: \"version:0.8\"\n  match_tag: <\n    platform: \"manylinux1_x86_64\"\n  >\n>\nwheel: <\n  name: \"infra/python/wheels/networkx-py3\"\n  version: \"version:2.5\"\n  match_tag: <\n    platform: \"manylinux1_x86_64\"\n  >\n>\nwheel: <\n  name: \"infra/python/wheels/decorator-py3\"\n  version: \"version:5.0.9\"\n  match_tag: <\n    platform: \"manylinux1_x86_64\"\n  >\n>\nwheel: <\n  name: \"infra/python/wheels/libcst/${vpython_platform}\"\n  version: \"version:1.1.0\"\n  # No 32-bit Windows wheel available for a dependency (google-cloud-pubsub).\n  not_match_tag: <\n    platform: \"win32\"\n  >\n>\nwheel: <\n  name: \"infra/python/wheels/typing-inspect-py3\"\n  version: \"version:0.7.1\"\n  match_tag: <\n    platform: \"manylinux1_x86_64\"\n  >\n>\nwheel: <\n  name: \"infra/python/wheels/typing-extensions-py3\"\n  version: \"version:4.3.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/tabulate-py3\"\n  version: \"version:0.8.10\"\n>\nwheel: <\n  name: \"infra/python/wheels/ninja/${vpython_platform}\"\n  version: \"version:1.10.0.post2\"\n  match_tag: <\n    platform: \"manylinux1_x86_64\"\n  >\n>\nwheel: <\n  name: \"infra/python/wheels/mypy-extensions-py3\"\n  version: \"version:0.4.3\"\n>\n\n# Common utilities.\n# Use the same versions specified by //third_party/catapult/.vpython3 so that\n# Chromium tests using Telemetry function properly.\nwheel: <\n  name: \"infra/python/wheels/numpy/${vpython_platform}\"\n  version: \"version:1.23.5.chromium.4\"\n>\nwheel: <\n  name: \"infra/python/wheels/pexpect/${vpython_platform}\"\n  version: \"version:4.8.0.chromium.1\"\n>\nwheel: <\n  name: \"infra/python/wheels/psutil/${vpython_platform}\"\n  version: \"version:5.8.0.chromium.3\"\n>\nwheel: <\n  name: \"infra/python/wheels/requests-py3\"\n  version: \"version:2.31.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/pillow/${vpython_platform}\"\n  version: \"version:10.4.0\"\n  # There is currently no Linux arm/arm64 version in CIPD.\n  not_match_tag: <\n    platform: \"linux_arm64\"\n  >\n>\nwheel: <\n  name: \"infra/python/wheels/opencv_python/${vpython_platform}\"\n  version: \"version:4.5.3.56.chromium.4\"\n  # There is currently no Linux arm/arm64 version in CIPD.\n  not_match_tag: <\n    platform: \"linux_arm64\"\n  >\n>\n# `pyyaml` is shared between `//third_party/wpt_tools/wpt/wpt` and `pytype`.\nwheel: <\n  name: \"infra/python/wheels/pyyaml/${vpython_platform}\"\n  version: \"version:5.4.1.chromium.1\"\n>\n\n# Used by various python unit tests.\nwheel: <\n  name: \"infra/python/wheels/mock-py2_py3\"\n  version: \"version:2.0.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/parameterized-py2_py3\"\n  version: \"version:0.7.1\"\n>\nwheel: <\n  name: \"infra/python/wheels/pbr-py2_py3\"\n  version: \"version:3.0.0\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/pyfakefs-py2_py3\"\n  version: \"version:3.7.2\"\n>\n\n# Used by:\n#   //build/chromeos/test_runner.py\nwheel: <\n  name: \"infra/python/wheels/jsonlines-py2_py3\"\n  version: \"version:1.2.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/python-dateutil-py2_py3\"\n  version: \"version:2.7.3\"\n>\n\n# Used by WPT importer\nwheel: <\n  name: \"infra/python/wheels/charset_normalizer-py3\"\n  version: \"version:2.0.4\"\n>\nwheel: <\n  name: \"infra/python/wheels/pyasn1-py2_py3\"\n  version: \"version:0.4.5\"\n>\nwheel: <\n  name: \"infra/python/wheels/pyasn1_modules-py2_py3\"\n  version: \"version:0.2.4\"\n>\nwheel: <\n  name: \"infra/python/wheels/rsa-py2_py3\"\n  version: \"version:3.4.2\"\n>\nwheel: <\n  name: \"infra/python/wheels/cachetools-py2_py3\"\n  version: \"version:2.0.1\"\n>\nwheel: <\n  name: \"infra/python/wheels/uritemplate-py3\"\n  version: \"version:4.1.1\"\n>\nwheel: <\n  name: \"infra/python/wheels/google-auth-py3\"\n  version: \"version:2.16.2\"\n>\nwheel: <\n  name: \"infra/python/wheels/googleapis-common-protos-py2_py3\"\n  version: \"version:1.61.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/google-api-core-py3\"\n  version: \"version:2.14.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/google-auth-httplib2-py2_py3\"\n  version: \"version:0.1.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/google-api-python-client-py3\"\n  version: \"version:2.111.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/google-cloud-core-py3\"\n  version: \"version:2.3.3\"\n>\nwheel: <\n  name: \"infra/python/wheels/grpcio-status-py3\"\n  version: \"version:1.57.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/oauth2client-py2_py3\"\n  version: \"version:3.0.0\"\n>\n\n# Used by:\n# //third_party/blink/tools/wpt_upload.py\n# //third_party/chromite/bin/cros chrome-sdk\nwheel: <\n  name: \"infra/python/wheels/crcmod/${vpython_platform}\"\n  version: \"version:1.7.chromium.3\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/grpcio/${vpython_platform}\"\n  version: \"version:1.57.0\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/grpc-google-iam-v1-py3\"\n  version: \"version:0.12.3\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/proto-plus-py3\"\n  version: \"version:1.22.3\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/google-cloud-kms-py3\"\n  version: \"version:2.11.1\"\n>\nwheel: <\n  name: \"infra/python/wheels/google-cloud-pubsub-py3\"\n  version: \"version:2.9.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/typing-inspect-py3\"\n  version: \"version:0.7.1\"\n>\n\n# Used by Web Platform Tests (WPT) codebase in\n#   //third_party/wpt_tools\nwheel: <\n  name: \"infra/python/wheels/html5lib-py2_py3\"\n  version: \"version:1.0.1\"\n>\nwheel: <\n  name: \"infra/python/wheels/mozdebug-py3\"\n  version: \"version:0.3.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/mozinfo-py2_py3\"\n  version: \"version:1.2.2\"\n>\nwheel: <\n  name: \"infra/python/wheels/blessed-py2_py3\"\n  version: \"version:1.20.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/wcwidth-py2_py3\"\n  version: \"version:0.2.5\"\n>\nwheel: <\n  name: \"infra/python/wheels/jinxed-py2_py3\"\n  version: \"version:1.2.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/ansicon-py2_py3\"\n  version: \"version:1.89.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/mozlog-py2_py3\"\n  version: \"version:8.0.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/mozprocess-py3\"\n  version: \"version:1.3.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/urllib3-py2_py3\"\n  version: \"version:1.26.6\"\n>\nwheel: <\n  name: \"infra/python/wheels/blessings-py2_py3\"\n  version: \"version:1.7\"\n>\nwheel: <\n  name: \"infra/python/wheels/mozfile-py2_py3\"\n  version: \"version:2.0.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/mozterm-py2_py3\"\n  version: \"version:1.0.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/webencodings-py2_py3\"\n  version: \"version:0.5.1\"\n>\nwheel: <\n  name: \"infra/python/wheels/certifi-py2_py3\"\n  version: \"version:2020.11.8\"\n>\nwheel: <\n  name: \"infra/python/wheels/chardet-py2_py3\"\n  version: \"version:3.0.4\"\n>\nwheel: <\n  name: \"infra/python/wheels/idna-py2_py3\"\n  version: \"version:2.8\"\n>\nwheel: <\n  name: \"infra/python/wheels/distro-py2_py3\"\n  version: \"version:1.4.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/aioquic/${vpython_platform}\"\n  version: \"version:0.9.20.chromium.1\"\n>\nwheel: <\n  name: \"infra/python/wheels/pylsqpack/${vpython_platform}\"\n  version: \"version:0.3.12\"\n>\nwheel: <\n  name: \"infra/python/wheels/cryptography/${vpython_platform}\"\n  version: \"version:3.3.1.chromium.1\"\n>\nwheel: <\n  name: \"infra/python/wheels/cffi/${vpython_platform}\"\n  version: \"version:1.14.5.chromium.7\"\n>\nwheel: <\n  name: \"infra/python/wheels/pycparser-py2_py3\"\n  version: \"version:2.19\"\n>\nwheel: <\n  name: \"infra/python/wheels/ecdsa-py2_py3\"\n  version: \"version:0.17.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/brotli/${vpython_platform}\"\n  version: \"version:1.0.9\"\n>\n\n# Used by:\n#   //chrome/test/chromedriver/test/run_webdriver_tests.py\nwheel: <\n  name: \"infra/python/wheels/iniconfig-py3\"\n  version: \"version:1.1.1\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/packaging-py3\"\n  version: \"version:21.3\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/pyparsing-py2_py3\"\n  version: \"version:2.4.7\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/toml-py3\"\n  version: \"version:0.10.2\"\n>\n\n# Used by: pytest-py3:7.3.1\nwheel: <\n  name: \"infra/python/wheels/exceptiongroup-py3\"\n  version: \"version:1.1.2\"\n>\n\n# Used by: pytest-py3:7.3.1\nwheel: <\n  name: \"infra/python/wheels/tomli-py3\"\n  version: \"version:2.0.1\"\n>\n\nwheel <\n  name: \"infra/python/wheels/pytest-py3\"\n  version: \"version:7.3.1\"\n>\n\nwheel <\n  name: \"infra/python/wheels/pytest-asyncio-py3\"\n  version: \"version:0.19.0\"\n>\n\nwheel <\n  name: \"infra/python/wheels/attrs-py2_py3\"\n  version: \"version:21.4.0\"\n>\n\nwheel <\n  name: \"infra/python/wheels/more-itertools-py2_py3\"\n  version: \"version:4.1.0\"\n>\n\nwheel <\n  name: \"infra/python/wheels/pluggy-py3\"\n  version: \"version:0.13.1\"\n>\n\nwheel <\n  name: \"infra/python/wheels/py-py2_py3\"\n  version: \"version:1.10.0\"\n>\n\nwheel <\n  name: \"infra/python/wheels/funcsigs-py2_py3\"\n  version: \"version:1.0.2\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/atomicwrites-py2_py3\"\n  version: \"version:1.3.0\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/colorama-py2_py3\"\n  version: \"version:0.4.1\"\n>\n\n# Used by:\n#   //testing/buildbot/generate_buildbot_json_coveragetest.py\nwheel: <\n  name: \"infra/python/wheels/coverage/${vpython_platform}\"\n  version: \"version:5.5.chromium.3\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/websockets-py3\"\n  version: \"version:11.0.3\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/beautifulsoup4-py3\"\n  version: \"version:4.9.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/soupsieve-py3\"\n  version: \"version:1.9.5\"\n>\n\n# Used by:\n#   //tools/infra/find_bad_builds.py\n#   //tools/perf/crossbench\nwheel: <\n  name: \"infra/python/wheels/pytz-py2_py3\"\n  version: \"version:2018.4\"\n>\n\n# Used by:\n#   //third_party/blink/tools/blinkpy/web_tests/port/server_process.py\nwheel: <\n  name: \"infra/python/wheels/pywin32/${vpython_platform}\"\n  version: \"version:306\"\n  match_tag: <\n    platform: \"win32\"\n  >\n  match_tag: <\n    platform: \"win_amd64\"\n  >\n>\n\n# Used by:\n#   //content/test/gpu/gpu_tests/color_profile_manager_mac.py\nwheel: <\n  name: \"infra/python/wheels/pyobjc/${vpython_platform}\"\n  version: \"version:7.3.chromium.1\"\n  match_tag: <\n    platform: \"macosx_10_10_intel\"\n  >\n  match_tag: <\n    platform: \"macosx_11_0_arm64\"\n  >\n>\n\n# Used by:\n#   //tools/perf/core/results_dashboard.py\nwheel: <\n  name: \"infra/python/wheels/httplib2-py3\"\n  version: \"version:0.19.1\"\n>\n\n# Used by:\n#   //tools/perf/flakiness_cli\n#   //tools/perf/crossbench\nwheel: <\n  name: \"infra/python/wheels/pandas/${vpython_platform}\"\n  version: \"version:1.3.2.chromium.1\"\n  not_match_tag: <\n    platform: \"linux_arm64\"\n  >\n>\n\n# Used by:\n#   //tools/perf/crossbench\nwheel: <\n  name: \"infra/python/wheels/hjson-py2_py3\"\n  version: \"version:3.1.0\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/frozendict-py3\"\n  version: \"version:2.0.6\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/ordered-set-py3\"\n  version: \"version:4.1.0\"\n>\n\nwheel: <\n  name: \"infra/python/wheels/perfetto-py3\"\n  version: \"version:0.11.0\"\n>\n\n# Used by:\n#   chrome/test/mini_installer/test_chrome_with_chromedriver.py\n#   testing/script/run_variations_smoke_tests.py\n#   //tools/perf/crossbench\n# Keep this to the same revision as third_party/webdriver/pylib, which is pulled\n# in via DEPS.\nwheel: <\n  name: \"infra/python/wheels/selenium-py3\"\n  version: \"version:4.1.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/trio-py3\"\n  version: \"version:0.20.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/trio-websocket-py3\"\n  version: \"version:0.9.2\"\n>\nwheel: <\n  name: \"infra/python/wheels/outcome-py3\"\n  version: \"version:1.1.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/sniffio-py3\"\n  version: \"version:1.2.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/async-generator-py3\"\n  version: \"version:1.10\"\n>\nwheel: <\n  name: \"infra/python/wheels/wsproto-py3\"\n  version: \"version:1.1.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/h11-py3\"\n  version: \"version:0.13.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/sortedcontainers-py3\"\n  version: \"version:2.4.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/pyopenssl-py2_py3\"\n  version: \"version:20.0.0\"\n>\n\n# Used by //tools/md_browser to render Markdown.\nwheel: <\n  name: \"infra/python/wheels/markdown-py3\"\n  version: \"version:3.3.4\"\n>\nwheel: <\n  name: \"infra/python/wheels/importlib-metadata-py3\"\n  version: \"version:1.6.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/zipp-py3\"\n  version: \"version:3.1.0\"\n>\n\n# Used by //components/optimization_guide/internal/testing/run_model_validation_test.py\nwheel: <\n  name: \"infra/python/wheels/google-cloud-secret-manager-py2_py3\"\n  version: \"version:2.10.0\"\n>\n\n# Used by:\n#   //tools/perf/crossbench\nwheel: <\n  name: \"infra/python/wheels/immutabledict-py3\"\n  version: \"version:4.1.0\"\n>\n\n# Used by:\n#   //testing/unexpected_passes_common\nwheel: <\n  name: \"infra/python/wheels/db-dtypes-py2_py3\"\n  version: \"version:1.2.0\"\n  # No 32-bit Windows wheel available for a dependency (pyarrow)\n  not_match_tag: <\n    platform: \"win32\"\n  >\n>\nwheel: <\n  name: \"infra/python/wheels/google-cloud-bigquery-py3\"\n  version: \"version:3.23.1\"\n>\nwheel: <\n  name: \"infra/python/wheels/google-cloud-bigquery-storage-py3\"\n  version: \"version:2.25.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/google-crc32c/${vpython_platform}\"\n  version: \"version:1.5.0.chromium.1\"\n>\nwheel: <\n  name: \"infra/python/wheels/google-resumable-media-py3\"\n  version: \"version:2.3.0\"\n>\nwheel: <\n  name: \"infra/python/wheels/pyarrow/${vpython_platform}\"\n  # Likely cannot be upgraded past 15.0.2 until Mac 11 is no longer tested due\n  # to https://github.com/apache/arrow/issues/41696. The bug indicates that\n  # 16.0.0 should work, but that still seems to segfault on Chromium's Mac 11\n  # machines.\n  version: \"version:15.0.2\"\n  # No 32-bit Windows wheel available.\n  not_match_tag: <\n    platform: \"win32\"\n  >\n>\n\n# Needed by pytype\nwheel: <\n  name: \"infra/python/wheels/jinja2-py3\"\n  version: \"version:3.1.2\"\n>\n\n# Needed by pytype\nwheel: <\n  name: \"infra/python/wheels/pycnite-py3\"\n  version: \"version:2023.10.11\"\n>\n\n# Needed by pytype\nwheel: <\n  name: \"infra/python/wheels/pydot-py2_py3\"\n  version: \"version:1.4.2\"\n>\n\n# Needed by jinja2\nwheel: <\n  name: \"infra/python/wheels/markupsafe/${vpython_platform}\"\n  version: \"version:2.0.1\"\n>\n\n"
        },
        {
          "name": ".yapfignore",
          "type": "blob",
          "size": 0.19140625,
          "content": "# Generated protobuf code.\n*_pb2.py\n\n# Third-party code.\nthird_party/blink/tools/blinkpy/third_party/*\nthird_party/blink/web_tests/external/wpt/*\ntools/valgrind/asan/third_party/asan_symbolize.py\n"
        },
        {
          "name": "ATL_OWNERS",
          "type": "blob",
          "size": 0.4326171875,
          "content": "# Current list of Chrome Area Tech Leads (ATLs) mostly for the purpose of\n# reviewing addings of top-level and third-party directories.\n\n# NOTE: keep this in sync with lsc-owners-override@chromium.org owners\n# by emailing lsc-policy@chromium.org when this list changes.\nrbyers@chromium.org\nthakis@chromium.org\n# NOTE: keep this in sync with lsc-owners-override@chromium.org owners\n# by emailing lsc-policy@chromium.org when this list changes.\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 64.3173828125,
          "content": "# Names should be added to this file with this pattern:\n#\n# For individuals:\n#   Name <email address>\n#\n# For organizations:\n#   Organization <fnmatch pattern>\n#\n# See python fnmatch module documentation for more information.\n#\n# Please keep the list sorted.\n\n# BEGIN individuals section.\nAaron Boushley <boushley@gmail.com>\nAaron Dewes <aarondewes@gmail.com>\nAaron Jacobs <samusaaron3@gmail.com>\nAaron Leventhal <aaronlevbugs@gmail.com>\nAaron Randolph <aaron.randolph@gmail.com>\nAaryaman Vasishta <jem456.vasishta@gmail.com>\nAbdAlRahman Gad <abdobngad@gmail.com>\nAbdu Ameen <abdu.ameen000@gmail.com>\nAbdullah Abu Tasneem <a.tasneem@samsung.com>\nAbhijeet Kandalkar <abhijeet.k@samsung.com>\nAbhinav Vij <abhinav.vij@samsung.com>\nAbhishek Agarwal <abhishek.a21@samsung.com>\nAbhishek Kanike <abhishek.ka@samsung.com>\nAbhishek Singh <abhi.rathore@samsung.com>\nAbin K Paul <abin.paul1@gmail.com>\nAbul Hasan Md Osama <ahm.osama@samsung.com>\nAdam Bonner <abonner-chromium@solscope.com>\nAdam Bujalski <abujalski@gmail.com>\nAdam Kallai <kadam@inf.u-szeged.hu>\nAdam Labuda <a.labuda@samsung.com>\nAnguluri Aravind Kumar <ar.kumar@samsung.com>\nAdam Roben <adam@github.com>\nAdam Treat <adam.treat@samsung.com>\nAdam Yi <i@adamyi.com>\nAddanki Gandhi Kishor <kishor.ag@samsung.com>\nAdenilson Cavalcanti <a.cavalcanti@samsung.com>\nAdesh Attavar <adesh.attavar@gmail.com>\nAditi Singh <a20.singh@samsung.com>\nAditya Agarwal <ad.agarwal@samsung.com>\nAditya Bhargava <heuristicist@gmail.com>\nAditya Sharma <a2.sharma@samsung.com>\nAdrian Belgun <adrian.belgun@intel.com>\nAdrian Ratiu <adrian.ratiu@collabora.corp-partner.google.com>\nAdrià Vilanova Martínez <me@avm99963.com>\nAhmed Elwasefi <a.m.elwasefi@gmail.com>\nAhmet Emir Ercin <ahmetemiremir@gmail.com>\nAidarbek Suleimenov <suleimenov.aidarbek@gmail.com>\nAiden Grossman <aidengrossmanpso@gmail.com>\nAiring Deng <airingdeng@gmail.com>\nAjay Berwal <a.berwal@samsung.com>\nAjay Berwal <ajay.berwal@samsung.com>\nAjay Sharma <ajay.sh@samsung.com>\nAjith Kumar V <ajith.v@samsung.com>\nAkash Yadav <akash1.yadav@samsung.com>\nAkihiko Odaki <akihiko.odaki@gmail.com>\nAkos Kiss <akiss@inf.u-szeged.hu>\nAkpokwaye Mudiaga <mudiaga.akpokwaye@gitstart.dev>\nAku Kotkavuo <a.kotkavuo@partner.samsung.com>\nAldo Culquicondor <alculquicondor@gmail.com>\nAlec Petridis <alecthechop@gmail.com>\nAleksandar Stojiljkovic <aleksandar.stojiljkovic@intel.com>\nAleksei Gurianov <gurianov@gmail.com>\nAlesandro Ortiz <alesandro@alesandroortiz.com>\nAlessandro Astone <ales.astone@gmail.com>\nAlex Chronopoulos <achronop@gmail.com>\nAlex Gabriel <minilogo@gmail.com>\nAlex Gartrell <agartrell@cmu.edu>\nAlex Gaynor <alex.gaynor@gmail.com>\nAlex Henrie <alexhenrie24@gmail.com>\nAlex Scheele <alexscheele@gmail.com>\nAlexander Douglas <agdoug@amazon.com>\nAlexander Forrence <alex.forrence@gmail.com>\nAlexander Frick <alex313031@gmail.com>\nAlexander Guettler <alexander@guettler.io>\nAlexander Rezepkin <etu@vivaldi.net>\nAlexander Shalamov <alexander.shalamov@intel.com>\nAlexander Sulfrian <alexander@sulfrian.net>\nAlexander Zhirov <ciberst@gmail.com>\nAlexandre Abreu <wiss1976@gmail.com>\nAlexandru Chiculita <achicu@adobe.com>\nAlexey Knyazev <lexa.knyazev@gmail.com>\nAlexey Korepanov <alexkorep@gmail.com>\nAlexey Kuts <kruntuid@gmail.com>\nAlexey Kuzmin <alex.s.kuzmin@gmail.com>\nAlexey Kuznetsov <saturas2000@gmail.com>\nAlexey Terentiev <alexeyter@gmail.com>\nAlexia Bojian <bojianalexia4@gmail.com>\nAlexis Brenon <brenon.alexis@gmail.com>\nAlexis La Goutte <alexis.lagoutte@gmail.com>\nAlexis Menard <alexis.menard@intel.com>\nAlfredo Hernandez <ahernandez.miralles@gmail.com>\nAli Vathi <ali.akbar@gmail.com>\nAllan Sandfeld Jensen <allan.jensen@qt.io>\nAlper Çakan <alpercakan98@gmail.com>\nAlvaro Silva <alvaro.fagner@gmail.com>\nAmbareesh Balaji <ambareeshbalaji@gmail.com>\nAmbarish Rapte <ambarish.r@samsung.com>\nAmey Jahagirdar <jahagird@amazon.com>\nAmit Paul <a.paul@samsung.com>\nAmit Sarkar <amit.srkr@samsung.com>\nAmogh Bihani <amogh.bihani@samsung.com>\nAmos Lim <amoseui@gmail.com>\nAmos Lim <eui-sang.lim@samsung.com>\nAmruth Raj <amruthraj@motorola.com>\nAmruth Raj <ckqr36@motorola.com>\nAnand Ratn <anand.ratn@samsung.com>\nAnant Jain <anant90@gmail.com>\nAnastasios Cassiotis <tom.cassiotis@gmail.com>\nanatoly techtonik <techtonik@gmail.com>\nAncil George <ancilgeorge@samsung.com>\nAndra Paraschiv <andra.paraschiv@intel.com>\nAndras Tokodi <a.tokodi@eyeo.com>\nAndreas Nazlidis <andreas221b@gmail.com>\nAndreas Papacharalampous <andreas@apap04.com>\nAndrei Borza <andrei.borza@gmail.com>\nAndrei Parvu <andrei.prv@gmail.com>\nAndrei Parvu <parvu@adobe.com>\nAndres Salomon <dilinger@queued.net>\nAndreu Botella <andreu@andreubotella.com>\nAndrew Boyarshin <andrew.boyarshin@gmail.com>\nAndrew Brampton <me@bramp.net>\nAndrew Brindamour <abrindamour@bluejeans.com>\nAndrew Hung <andrhung@amazon.com>\nAndrew Jorgensen <ajorgens@amazon.com>\nAndrew MacPherson <andrew.macpherson@soundtrap.com>\nAndrew Nicols <andrewrn@gmail.com>\nAndrew Tulloch <andrew@tullo.ch>\nAndriy Rysin <arysin@gmail.com>\nAnish Patankar <anish.p@samsung.com>\nAnkit Kiran <sahuankit453@gmail.com>\nAnkit Kumar <ankit2.kumar@samsung.com>\nAnkur Verma <ankur1.verma@samsung.com>\nAnna Henningsen <anna@addaleax.net>\nAnne Kao <annekao94@gmail.com>\nAnsh Mishra <mishra.ansh6@gmail.com>\nAnshul Jain <anshul.jain@samsung.com>\nAnssi Hannula <anssi.hannula@iki.fi>\nAnthony Halliday <anth.halliday12@gmail.com>\nAnton Bershanskyi <bershanskyi@gmail.com>\nAnton Obzhirov <a.obzhirov@samsung.com>\nAntonin Hildebrand <antonin.hildebrand@gmail.com>\nAntonio Gomes <a1.gomes@sisa.samsung.com>\nAnuj Kumar Sharma <anujk.sharma@samsung.com>\nAnukul Chand <anukul.chand@samsung.com>\nAnže Lešnik <anze@lesnik.cc>\nAo Hui <aohui.wan@gmail.com>\nAo Sun <ntusunao@gmail.com>\nAo Wang <wangao.james@bytedance.com>\nAquibuzzaman Md. Sayem <md.sayem@samsung.com>\nArjun Karthik <arjunkar@amazon.com>\nArman Ghotb <armanghotb@gmail.com>\nArmin Burgmeier <aburgmeier@bloomberg.net>\nArnaud Coomans <hello@acoomans.com>\nArnaud Mandy <arnaud.mandy@intel.com>\nArnaud Renevier <a.renevier@samsung.com>\nArnaud Renevier <arnaud@switchboard.app>\nArpita Bahuguna <a.bah@samsung.com>\nArthur Lussos <developer0420@gmail.com>\nArtin Lindqvist <artin.lindqvist.chromium@gmail.com>\nArtur Akerberg <artur.aker@gmail.com>\nArun Kulkarni <kulkarni.a@samsung.com>\nArun Kumar <arun87.kumar@samsung.com>\nArun Mankuzhi <arun.m@samsung.com>\nArunoday Sarkar <a.sarkar.arun@gmail.com>\nArunprasad Rajkumar <ararunprasad@gmail.com>\nArunprasad Rajkumar <arurajku@cisco.com>\nArup Barua <arup.barua@samsung.com>\nAryan Kaushik <aryankaushik2023@gmail.com>\nAsami Doi <d0iasm.pub@gmail.com>\nAshish Kumar Gupta <guptaag@amazon.com>\nAshlin Joseph <ashlin.j@samsung.com>\nAshutosh  <codingtosh@gmail.com>\nAsish Singh <asish.singh@samsung.com>\nAttila Dusnoki <dati91@gmail.com>\nAvi Mathur <avi.mathur009@gmail.com>\nAvinaash Doreswamy <avi.nitk@samsung.com>\nAxel Chong <haxatron1@gmail.com>\nAyush Dubey <dubeyaayush07@gmail.com>\nAyush Khandelwal <k.ayush@samsung.com>\nAzhar Shaikh <azhar.shaikh@intel.com>\nBalazs Kelemen <b.kelemen@samsung.com>\nBaul Eun <baul.eun@samsung.com>\nBehara Mani Shyam Patro <behara.ms@samsung.com>\nBem Jones-Bey <bemajaniman@gmail.com>\nBem Jones-Bey <bjonesbe@adobe.com>\nBen Coe <bencoe@gmail.com>\nBen Fiola <benfiola@gmail.com>\nBen Karel <eschew@gmail.com>\nBen Noordhuis <ben@strongloop.com>\nBenedek Heilig <benecene@gmail.com>\nBenjamin Dupont <bedupont@cisco.com>\nBenjamin Jemlich <pcgod99@gmail.com>\nBeomsik Min <beomsikm@gmail.com>\nBernard Cafarelli <voyageur@gentoo.org>\nBernhard M. Wiedemann <bwiedemann@suse.de>\nBert Belder <bertbelder@gmail.com>\nBhagirathi Satpathy <bhagirathi.s@samsung.com>\nBhanukrushana Rout <b.rout@samsung.com>\nBiljith Jayan <billy.jayan@samsung.com>\nBin Liao <bin.liao@intel.com>\nBin Miao <bin.miao@intel.com>\nBinoy Kumar Sutradhar <binoy.s@samsung.com>\nBoaz Sender <boaz@bocoup.com>\nBobby Powers <bobbypowers@gmail.com>\nBradley Needham <bradley.needham@sony.com>\nBranden Archer <bma4@zips.uakron.edu>\nBrendan Kirby <brendan.kirby@imgtec.com>\nBrendan Long <self@brendanlong.com>\nBrendon Tiszka <btiszka@gmail.com>\nBrett Lewis <brettlewis@brettlewis.us>\nBrian Dunn <brian@theophil.us>\nBrian G. Merrell <bgmerrell@gmail.com>\nBrian Konzman, SJ <b.g.konzman@gmail.com>\nBrian Luft <brian@electroly.com>\nBrian Merrell, Novell Inc. <bgmerrell@gmail.com>\nBrian Salomon <briansalomon@gmail.com>\nBrian Yip <itsbriany@gmail.com>\nBrook Hong <hzgmaxwell@gmail.com>\nBruce Dai <feng.dai@intel.com>\nBruno Calvignac <bruno@flock.com>\nBruno de Oliveira Abinader <brunoabinader@gmail.com>\nBruno Pitrus <brunopitrus@hotmail.com>\nBruno Roy <brusi_roy@hotmail.com>\nBryan Donlan <bdonlan@gmail.com>\nBryce Thomas <bryct@amazon.com>\nBurton <burton@typewritten.net>\nByounghoon Yoon <bill.2714@kakaocorp.com>\nByoungkwon Ko <codeimpl@gmail.com>\nByungwoo Lee <bw80.lee@samsung.com>\nCaesar Wang <wxt@rock-chips.com>\nCaio Marcelo de Oliveira Filho <caio.de.oliveira.filho@intel.com>\nCaitlin Potter <caitpotter88@gmail.com>\nCalvin Mei <calvimei@amazon.com>\nCalvin Watford <watfordcalvin@gmail.com>\nCameron Gutman <aicommander@gmail.com>\nCamille Viot <viot.camille@outlook.com>\nCan Liu <peter.can.liu@gmail.com>\nCarlos Santa <carlos.santa@intel.com>\nCasey Primozic <me@ameo.link>\nCatalin Badea <badea@adobe.com>\nCathie Chen <cathiechen@tencent.com>\nCem Kocagil <cem.kocagil@gmail.com>\nCezary Kułakowski <cezary.kulakowski@gmail.com>\nCGQAQ <m.jason.liu@gmail.com>\nChakshu Ahuja <chakshu.a@samsung.com>\nChakshu Pragya <pragya.c1@samsung.com>\nChamal De Silva <chamalsl@yahoo.com>\nChandan Padhi <c.padhi@samsung.com>\nChandra Shekar Vallala <brk376@motorola.com>\nChandramouli Sanchi <cm.sanchi@samsung.com>\nChang Shu <c.shu@samsung.com>\nChangbin Shao <changbin.shao@intel.com>\nChangjun Yang <changjun.yang@intel.com>\nChangSeok Lee <charlie.lee921@gmail.com>\nChangSeok Oh <changseok.oh@bytedance.com>\nChangSeok Oh <shivamidow@gmail.com>\nChangwan Hong <changwan.hong@navercorp.com>\nChangyeon Kim <cyzero.kim@samsung.com>\nChanho Park <parkch98@gmail.com>\nChansik Yun <chansik.yun@gmail.com>\nChany Arpin-Plante <chany.arpin@gmail.com>\nChanyong Moon <dev.chanyongmoon@gmail.com>\nChaobin Zhang <zhchbin@gmail.com>\nCharles Vaughn <cvaughn@gmail.com>\nCheng Zhao <zcbenz@gmail.com>\nCheng Yu <yuzichengcode@gmail.com>\nChenguang Shao <chenguangshao1@gmail.com>\nChengzhong Wu <legendecas@gmail.com>\nChoongwoo Han <cwhan.tunz@gmail.com>\nChoudhury M. Shamsujjoha <choudhury.s@samsung.com>\nChris Dalton <chris@rive.app>\nChris Greene <cwgreene@amazon.com>\nChris Harrelson <chrishtr@gmail.com>\nChris Nardi <hichris123@gmail.com>\nChris Szurgot <szurgotc@amazon.com>\nChris Tserng <tserng@amazon.com>\nChris Vasselli <clindsay@gmail.com>\nChris Ye <hawkoyates@gmail.com>\nChristian Liebel <christianliebel@gmail.com>\nChristoph Staengle <christoph142@gmx.com>\nChristophe Dumez <ch.dumez@samsung.com>\nChristopher Dale <chrelad@gmail.com>\nChunbo Hua <chunbo.hua@intel.com>\nClaudio DeSouza <claudiomdsjr@gmail.com>\nClemens Fruhwirth <clemens@endorphin.org>\nClement Scheelfeldt Skau <clementskau@gmail.com>\nClinton Staley <clintstaley@gmail.com>\nCong Zuo <zckevinzc@gmail.com>\nConnor Pearson <cjp822@gmail.com>\nConrad Irwin <conrad.irwin@gmail.com>\nCraig Schlenter <craig.schlenter@gmail.com>\nCsaba Osztrogonác <ossy.szeged@gmail.com>\nCynthia Revström <me@cynthia.re>\nDaegyu Lee <na7jun8gi@gmail.com>\nDai Chunyang <chunyang.dai@intel.com>\nDaiwei Li <daiweili@suitabletech.com>\nDamien Marié <damien@dam.io>\nDan McCombs <overridex@gmail.com>\nDaniel Adams <msub2official@gmail.com>\nDaniel Bertalan <dani@danielbertalan.dev>\nDaniel Bevenius <daniel.bevenius@gmail.com>\nDaniel Bomar <dbdaniel42@gmail.com>\nDaniel Carvalho Liedke <dliedke@gmail.com>\nDaniel Charles <daniel.charles@intel.com>\nDaniel Imms <daniimms@amazon.com>\nDaniel Izquierdo <daniel.izquierdo@gmail.com>\nDaniel Johnson <danielj41@gmail.com>\nDaniel Lockyer <thisisdaniellockyer@gmail.com>\nDaniel Nishi <dhnishi@gmail.com>\nDaniel Platz <daplatz@googlemail.com>\nDaniel Playfair Cal <daniel.playfair.cal@gmail.com>\nDaniel Shaulov <dshaulov@ptc.com>\nDaniel Trebbien <dtrebbien@gmail.com>\nDaniel Waxweiler <daniel.waxweiler@gmail.com>\nDaniel Zhao <zhaodani@amazon.com>\nDániel Bátyai <dbatyai@inf.u-szeged.hu>\nDániel Vince <vinced@inf.u-szeged.hu>\nDaniil Suvorov <severecloud@gmail.com>\nDanny Weiss <danny.weiss.fr@gmail.com>\nDanylo Boiko <danielboyko02@gmail.com>\nDaoming Qiu <daoming.qiu@intel.com>\nDarik Harter <darik.harter@gmail.com>\nDarryl Pogue <darryl@dpogue.ca>\nDarshan Sen <raisinten@gmail.com>\nDarshini KN <kn.darshini@samsung.com>\nDave Vandyke <kzar@kzar.co.uk>\nDavid Benjamin <davidben@mit.edu>\nDavid Brown <develop.david.brown@gmail.com>\nDavid Davidovic <david@davidovic.io>\nDavid Erceg <erceg.david@gmail.com>\nDavid Faden <dfaden@gmail.com>\nDavid Fox <david@davidjfox.com>\nDavid Futcher <david.mike.futcher@gmail.com>\nDavid Jin <davidjin@amazon.com>\nDavid Lechner <david@pybricks.com>\nDavid Leen <davileen@amazon.com>\nDavid Manouchehri <david@davidmanouchehri.com>\nDavid McAllister <mcdavid@amazon.com>\nDavid Michael Barr <david.barr@samsung.com>\nDavid Redondo <kde@david-redondo.de>\nDavid Sanders <dsanders11@ucsbalum.com>\nDavid Spellman <dspell@amazon.com>\nDavid Valachovic <adenflorian@gmail.com>\nDax Kelson <dkelson@gurulabs.com>\nDean Leitersdorf <dean.leitersdorf@gmail.com>\nDebadree Chatterjee <debadree333@gmail.com>\nDebashish Samantaray <d.samantaray@samsung.com>\nDebug Wang <debugwang@tencent.com>\nDeep Shah <deep.shah@samsung.com>\nDeepak Dilip Borade <deepak.db@samsung.com>\nDeepak Mittal <deepak.m1@samsung.com>\nDeepak Mohan <hop2deep@gmail.com>\nDeepak Sharma <deepak.sharma@amd.com>\nDeepak Singla <deepak.s@samsung.com>\nDeniz Eren Evrendilek <devrendilek@gmail.com>\nDeokjin Kim <deokjin81.kim@samsung.com>\nDeomid rojer Ryabkov <rojer9@gmail.com>\nDerek Halman <d.halman@gmail.com>\nDevlin Cronin <rdevlin.cronin@gmail.com>\nDheeraj Kumar <dh.kumar@samsung.com>\nDhi Aurrahman <dio@rockybars.com>\nDi Wu <meetwudi@gmail.com>\nDiana Suvorova <diana.suvorova@gmail.com>\nDiego Fernández Santos <agujaydedal@gmail.com>\nDiego Ferreiro Val <elfogris@gmail.com>\nDillon Sellars <dill.sellars@gmail.com>\nDingming Liu <liudingming@bytedance.com>\nDivya Bansal <divya.bansal@samsung.com>\nDmitry Shachnev <mitya57@gmail.com>\nDmitry Sokolov <dimanne@gmail.com>\nDominic Elm <elmdominic@gmx.net>\nDominic Farolino <domfarolino@gmail.com>\nDominic Jodoin <dominic.jodoin@gmail.com>\nDominik Röttsches <dominik.rottsches@intel.com>\nDominik Schütz <do.sch.dev@gmail.com>\nDon Woodward <woodward@adobe.com>\nDonghee Na <corona10@gmail.com>\nDong-hee Na <donghee.na92@gmail.com>\nDongie Agnir <dongie.agnir@gmail.com>\nDongjun Kim <deejay.kim@navercorp.com>\nDongjun Kim <djmix.kim@samsung.com>\nDongseong Hwang <dongseong.hwang@intel.com>\nDongwoo Joshua Im <dw.im@samsung.com>\nDongyu Lin <l2d4y3@gmail.com>\nDonna Wu <donna.wu@intel.com>\nDouglas Browne <douglas.browne123@gmail.com>\nDouglas F. Turner <doug.turner@gmail.com>\nDrew Blaisdell <drew.blaisdell@gmail.com>\nDushyant Kant Sharma <dush.sharma@samsung.com>\nDustin Doloff <doloffd@amazon.com>\nEbrahim Byagowi <ebrahim@gnu.org>\nEbrahim Byagowi <ebraminio@gmail.com>\nEden Wang <nedenwang@tencent.com>\nEduardo Lima (Etrunko) <eblima@gmail.com>\nEduardo Lima (Etrunko) <eduardo.lima@intel.com>\nEdward Baker <edward.baker@intel.com>\nEdward Crossman <tedoc2000@gmail.com>\nEdward Trist <edwardtrist@gmail.com>\nEero Häkkinen <e.hakkinen@samsung.com>\nEero Häkkinen <eero.hakkinen@intel.com>\nEgor Starkov <egor.starkov@samsung.com>\nEhsan Akhgari <ehsan.akhgari@gmail.com>\nEhsan Akhgari <ehsan@mightyapp.com>\nElan Ruusamäe <elan.ruusamae@gmail.com>\nEldar Rello <eldar.rello@gmail.com>\nEly Ronnen <elyronnen@gmail.com>\nEmil Suleymanov <emil@esnx.xyz>\nErgun Erdogmus <erdogmusergun@gmail.com>\nEric Ahn <byungwook.ahn@gmail.com>\nEric Huang <ele828@gmail.com>\nEric Long <i@hack3r.moe>\nEric Rescorla <ekr@rtfm.com>\nErik Hill <erikghill@gmail.com>\nErik Kurzinger <ekurzinger@gmail.com>\nErik Sjölund <erik.sjolund@gmail.com>\nEriq Augustine <eriq.augustine@gmail.com>\nErnesto Mudu <ernesto.mudu@gmail.com>\nEthan Chen <randomgamingdev@gmail.com>\nEthan Wong <bunnnywong@gmail.com>\nEtienne Laurin <etienne@atnnn.com>\nEugene Kim <eugene70kim@gmail.com>\nEugene Sudin <eugene@sudin.pro>\nEunseok Oh <fivesilverstone@gmail.com>\nEvan Peterson <evan.peterson.ep@gmail.com>\nEvan Wallace <evan.exe@gmail.com>\nEvangelos Foutras <evangelos@foutrelis.com>\nEvgeniy Dushistov <dushistov@gmail.com>\nEvgeny Agafonchikov <evgeny.agafonchikov@akvelon.com>\nFabian Henneke <fabian.henneke@gmail.com>\nFabien Tassin <fta@sofaraway.org>\nFan Wen <fan.wen.dev@gmail.com>\nFauzia Haque <fauzia.haque@samsung.com>\nFeifei Wang <alexswang@tencent.com>\nFelipe Erias Morandeira <felipeerias@gmail.com>\nFelix H. Dahlke <fhd@ubercode.de>\nFelix Weilbach <feweilbach@gmail.com>\nFeng Shengyuan <fengshengyuan@agora.io>\nFeng Yu <f3n67u@gmail.com>\nFengrong Fang <fr.fang@samsung.com>\nFernando Jiménez Moreno <ferjmoreno@gmail.com>\nFinbar Crago <finbar.crago@gmail.com>\nFrançois Beaufort <beaufort.francois@gmail.com>\nFrançois Devatine <devatine@verizonmedia.com>\nFrancois Kritzinger <francoisk777@gmail.com>\nFrancois Rauch <leopardb@gmail.com>\nFrankie Dintino <fdintino@theatlantic.com>\nFranklin Ta <fta2012@gmail.com>\nFred Ranking <luliang14@huawei.com>\nFrédéric Jacob <frederic.jacob.78@gmail.com>\nFrédéric Wang <fred.wang@free.fr>\nFu Junwei <junwei.fu@intel.com>\nGabriel Campana <gabriel.campana@ledger.fr>\nGabriel “gabldotink” <gabl@gabl.ink>\nGabor Rapcsanyi <g.rapcsanyi@samsung.com>\nGaetano Mendola <mendola@gmail.com>\nGajendra N <gajendra.n@samsung.com>\nGajendra Singh <wxjg68@motorola.com>\nGanesh Borle <ganesh.borle@samsung.com>\nGao Chun <chun.gao@intel.com>\nGao Chun <gaochun.dev@gmail.com>\nGao Sheng <gaosheng08@meituan.com>\nGao Yu <wanggao@tencent.com>\nGaurav Dhol <gaurav.dhol@einfochips.com>\nGautham Banasandra <gautham.bangalore@gmail.com>\nGeorge Adams <geoada@amazon.com>\nGeorge Joseph <kottackal.george@gmail.com>\nGeorge Liaskos <geo.liaskos@gmail.com>\nGeorgy Buranov <gburanov@gmail.com>\nGergely Nagy <ngg@ngg.hu>\nGetulio Sánchez <valentin2507@gmail.com>\nGideon Pyzer <gjpyzer@gmail.com>\nGiovanni Panaro <tsrwebgl@gmail.com>\nGirish Kumar M <mck.giri@samsung.com>\nGitanshu Mehndiratta <g.mehndiratt@samsung.com>\nGiuseppe Iuculano <giuseppe@iuculano.it>\nGloam <gaoqingguang@kuaishou.com>\nGnanasekar Somanathan <gnanasekar.s@samsung.com>\nGordana Cmiljanovic <gordana.cmiljanovic@imgtec.com>\nGoutham Jagannatha <wrm364@motorola.com>\nGraham Sturmy <gsturmychromium@gmail.com>\nGraham Yoakum <gyoakum@skobalt.com>\nGrandhi Sri Nikhil <g1.nikhil@samsung.com>\nGreg Visser <gregvis@gmail.com>\nGregory Davis <gpdavis.chromium@gmail.com>\nGrzegorz Czajkowski <g.czajkowski@samsung.com>\nGuangzhen Li <guangzhen.li@intel.com>\nGuobin Wu <wuguobin.1229@bytedance.com>\nGurpreet Kaur <k.gurpreet@samsung.com>\nGustav Tiger <gustav.tiger@sonymobile.com>\nGyuyoung Kim <gyuyoung.kim@navercorp.com>\nGzob Qq <gzobqq@gmail.com>\nHabib Virji <habib.virji@samsung.com>\nHaeun Kim <ggrace.kim93@gmail.com>\nHaeun Kim <haeungun@gmail.com>\nHaitao Feng <haitao.feng@intel.com>\nHalley Zhao <halley.zhao@intel.com>\nHalton Huo <halton.huo@gmail.com>\nHalton Huo <halton.huo@intel.com>\nHans Hillen <hans.hillen@gmail.com>\nHansel Lee <mr.hansel.lee@gmail.com>\nHanwen Zheng <eserinc.z@gmail.com>\nHao Li <hao.x.li@intel.com>\nHaojian Wu <hokein.wu@gmail.com>\nHaoran Tang <haoran.tang.personal@gmail.com>\nHaoxuan Zhang <zhanghaoxuan.59@bytedance.com>\nHari Singh <hari.singh1@samsung.com>\nHarpreet Singh Khurana <harpreet.sk@samsung.com>\nHarshal Gupta <gupta.h@samsung.com>\nHarshikesh Kumar <harshikeshnobug@gmail.com>\nHarshit Pal <harshitp12345@gmail.com>\nHassan Salehe Matar <hassansalehe@gmail.com>\nHautio Kari <khautio@gmail.com>\nHe Qi <heqi899@gmail.com>\nHeejin R. Chung <heejin.r.chung@samsung.com>\nHeeyoun Lee <heeyoun.lee@samsung.com>\nHelmut Januschka <helmut@januschka.com>\nHenrique de Carvalho <decarv.henrique@gmail.com>\nHenrique Limas <henrique.ramos.limas@gmail.com>\nHenry Lim <henry@limhenry.xyz>\nHikari Fujimoto <hikari.p.fujimoto@gmail.com>\nHimadri Agrawal <h2.agrawal@samsung.com>\nHimanshu Joshi <h.joshi@samsung.com>\nHimanshu Nayak <himanshu.nayak@amd.corp-partner.google.com>\nHiroki Oshima <hiroki.oshima@gmail.com>\nHiroyuki Matsuda <gsittyz@gmail.com>\nHodol Han <bab6ting@gmail.com>\nHolger Kraus <kraush@amazon.com>\nHong Zheng <hong.zheng@intel.com>\nHongbo Min <hongbo.min@intel.com>\nHoria Olaru <horia.olaru@gmail.com>\nHoria Olaru <olaru@adobe.com>\nHosung You <hosung.you@samsung.com>\nHuai Wang <gkvjwa@gmail.com>\nHuapeng Li <huapengl@amazon.com>\nHuayong Xu <huayong.xu@samsung.com>\nHung Ngo <ngotienhung195@gmail.com>\nHugo Holgersson <hugo.holgersson@sonymobile.com>\nHui Wang <wanghui07050707@gmail.com>\nHui Wang <wanghui210@huawei.com>\nHuiwon Jo <jhwon0415@gmail.com>\nHunseop Jeong <hs85jeong@gmail.com>\nHuy Duong <huy.duongdinh@gmail.com>\nHwanseung Lee <hs1217.lee@gmail.com>\nHwanseung Lee <hs1217.lee@samsung.com>\nHyemi Shin <hyemi.sin@samsung.com>\nHyeockJin Kim <kherootz@gmail.com>\nHyojeong Kim <42.4.hyojekim@gmail.com>\nHyomin Kim <ajtwlsalsdl0@gmail.com>\nHyomin Kim <hyoputer.kim@samsung.com>\nHyungchan Kim <inlinechan@gmail.com>\nHyungun Kim <khw3754@gmail.com>\nHyungwook Lee <hyungwook.lee@navercorp.com>\nHyungwook Lee <withlhw@gmail.com>\nHyunJi Kim <hjkim3323@gmail.com>\nHyunjun Shin <hyunjun.shin2@navercorp.com>\nHyunjun Shin <shjj1504@gmail.com>\nHyunjune Kim <hyunjune.kim@navercorp.com>\nHyunjune Kim <hyunjune.kim@samsung.com>\nHyunki Baik <hyunki.baik@samsung.com>\nIan Cullinan <cullinan@amazon.com>\nIan Scott <ian.scott@arteris.com>\nIbrar Ahmed <ibrar.ahmad@gmail.com>\nIlia Demianenko <ilia.demianenko@gmail.com>\nIlia K <ki.stfu@gmail.com>\nIlwoo Lee <ilwoo905.lee@samsung.com>\nIlya Konstantinov <ilya.konstantinov@gmail.com>\nImam Mohammad Bokhary <imam.bokhary@samsung.com>\nImranur Rahman <i.rahman@samsung.com>\nImranur Rahman <ir.shimul@gmail.com>\nIon Rosca <rosca@adobe.com>\nIrmak Kavasoglu <irmakkavasoglu@gmail.com>\nIsaac Murchie <murchieisaac@gmail.com>\nIsaac Reilly <reillyi@amazon.com>\nIvan Naydonov <samogot@gmail.com>\nIvan Pavlotskiy <ivan.pavlotskiy@lgepartner.com>\nIvan Sham <ivansham@amazon.com>\nIvan Sidorov <ivansid@gmail.com>\nJacek Fedoryński <jfedor@gmail.com>\nJack Bates <jack@nottheoilrig.com>\nJack Shi <flystone2020@gmail.com>\nJackson Loeffler <j@jloeffler.com>\nJacky Hu <flameddd@gmail.com>\nJacob Clark <jacob.jh.clark@googlemail.com>\nJacob Mandelson <jacob@mandelson.org>\nJaehun Lim <ljaehun.lim@samsung.com>\nJaehyun Chung <jaehyun.chung@amd.com>\nJaehyun Ko <jaehyun.dev@gmail.com>\nJaehyun Lee <j-hyun.lee@samsung.com>\nJaekyeom Kim <btapiz@gmail.com>\nJaemin Seo <jaemin86.seo@samsung.com>\nJaemo Koo <jaemok@amazon.com>\nJaemo Koo <koo2434@gmail.com>\nJaeseok Yoon <yjaeseok@gmail.com>\nJaewon Choi <jaewon.james.choi@gmail.com>\nJaewon Jung <jw.jung@navercorp.com>\nJaeyong Bae <jdragon.bae@gmail.com>\nJagadesh P <jagadeshjai1999@gmail.com>\nJagdish Chourasia <jagdish.c@samsung.com>\nJagdish Chourasia <jagdish.jnu08@gmail.com>\nJaime Soriano Pastor <jsorianopastor@gmail.com>\nJake Helfert <jake@helfert.us>\nJake Hendy <me@jakehendy.com>\nJakob Weigert <jakob.j.w@googlemail.com>\nJakub Machacek <xtreit@gmail.com>\nJames Burton <jb@0.me.uk>\nJames Choi <jchoi42@pha.jhu.edu>\nJames Crosby <crosby.james@gmail.com>\nJames Raphael Tiovalen <jamestiotio@gmail.com>\nJames Stanley <james@apphaus.co.uk>\nJames Vega <vega.james@gmail.com>\nJames Wei <james.wei@intel.com>\nJames Willcox <jwillcox@litl.com>\nJan Grulich <grulja@gmail.com>\nJan Keitel <jan.keitel@gmail.com>\nJan Rucka <ruckajan10@gmail.com>\nJan Sauer <jan@jansauer.de>\nJan-Michael Brummer <jan.brummer@tabos.org>\nJanusz Majnert <jmajnert@gmail.com>\nJanwar Dinata <j.dinata@gmail.com>\nJared Shumway <jaredshumway94@gmail.com>\nJared Sohn <jared.sohn@gmail.com>\nJared Wein <weinjared@gmail.com>\nJari Karppanen <jkarp@amazon.com>\nJason Gronn <jasontopia03@gmail.com>\nJavayhu <javayhu@gmail.com>\nJay Kapadia <jaykapadia389@gmail.com>\nJay Oster <jay@kodewerx.org>\nJay Soffian <jaysoffian@gmail.com>\nJay Yang <sjyang1126@gmail.com>\nJeado Ko <haibane84@gmail.com>\nJeffrey C <jeffreyca16@gmail.com>\nJeffrey Yeung <jeffrey.yeung@poly.com>\nJelle Bleyaert <jellebley@gmail.com>\nJeong A Shin <jeonga@khu.ac.kr>\nJeongeun Kim <je_julie.kim@samsung.com>\nJeongmin Kim <kimwjdalsl@gmail.com>\nJeongwoo Park <jwoo.park@navercorp.com>\nJeongwoo Park <skeksk91@gmail.com>\nJeremy Noring <jnoring@hirevue.com>\nJeremy Spiegel <jeremysspiegel@gmail.com>\nJeroen Van den Berghe <vandenberghe.jeroen@gmail.com>\nJerry Lin <wahahab11@gmail.com>\nJerry Zhang <zhj8407@gmail.com>\nJesper Storm Bache <jsbache@gmail.com>\nJesper van den Ende <jespertheend@gmail.com>\nJesse Miller <jesse@jmiller.biz>\nJesus Sanchez-Palencia <jesus.sanchez-palencia.fernandez.fil@intel.com>\nJia Yu <yujia.1019@bytedance.com>\nJiadong Chen <chenjiadong@huawei.com>\nJiadong Zhu <jiadong.zhu@linaro.org>\nJiahao Lu <lujjjh@gmail.com>\nJiahe Zhang <jiahe.zhang@intel.com>\nJiajia Qin <jiajia.qin@intel.com>\nJiajie Hu <jiajie.hu@intel.com>\nJianfeng Liu <liujianfeng1994@gmail.com>\nJiangzhen Hou <houjiangzhen@360.cn>\nJianjun Zhu <jianjun.zhu@intel.com>\nJianneng Zhong <muzuiget@gmail.com>\nJiawei Shao <jiawei.shao@intel.com>\nJiawei Chen <jiawei.chen@dolby.com>\nJiawei Wang <hellojw513@gmail.com>\nJiaxun Wei <leuisken@gmail.com>\nJiaxun Yang <jiaxun.yang@flygoat.com>\nJiayi Yao <zhexi.yjy@antgroup.com>\nJidong Qin <qinjidong@qianxin.com>\nJie Chen <jie.a.chen@intel.com>\nJihan Chao <jihan@bluejeans.com>\nJihoon Chung <j.c@navercorp.com>\nJihoon Chung <jihoon@gmail.com>\nJihun Brent Kim <devgrapher@gmail.com>\nJihwan Marc Kim <bluewhale.marc@gmail.com>\nJin Yang <jin.a.yang@intel.com>\nJincheol Jo <jincheol.jo@navercorp.com>\nJinfeng Ma <majinfeng1@xiaomi.com>\nJing Zhao <zhaojing7@xiaomi.com>\nJinglong Zuo <zuojinglong@xiaomi.com>\nJingqi Sun <jingqi.sun@hotmail.com>\nJingqi Sun <sunjingqi47@gmail.com>\nJingwei Liu <kingweiliu@gmail.com>\nJingyi Wei <wjywbs@gmail.com>\nJinho Bang <jinho.bang@samsung.com>\nJinsong Fan <fanjinsong@sogou-inc.com>\nJinsong Fan <jinsong.van@gmail.com>\nJinwoo Song <jinwoo7.song@samsung.com>\nJinyoung Hur <hur.ims@navercorp.com>\nJinyoung Hur <hurims@gmail.com>\nJitendra Kumar Sahoo <jitendra.ks@samsung.com>\nJitesh Pareek <j1.pareek@samsung.com>\nJoachim Bauch <jbauch@webrtc.org>\nJoachim Bauch <mail@joachim-bauch.de>\nJoanmarie Diggs <joanmarie.diggs@gmail.com>\nJoe Knoll <joe.knoll@workday.com>\nJoe Thomas <mhx348@motorola.com>\nJoel Stanley <joel@jms.id.au>\nJoey Jiao <joeyjiao0810@gmail.com>\nJoey Mou <joeymou@amazon.com>\nJohann <johann@duck.com>\nJohannes Rudolph <johannes.rudolph@googlemail.com>\nJohn Ingve Olsen <johningveolsen@gmail.com>\nJohn Kleinschmidt <kleinschmidtorama@gmail.com>\nJohn Yani <vanuan@gmail.com>\nJohn Yoo <nearbyh13@gmail.com>\nJohnson Lin <johnson.lin@intel.com>\nJojo R <rjiejie@gmail.com>\nJon Jensen <jonj@netflix.com>\nJonathan Frazer <listedegarde@gmail.com>\nJonathan Garbee <jonathan@garbee.me>\nJonathan Hacker <jhacker@arcanefour.com>\nJonathan Johnson <johnsonjonathan593@gmail.com>\nJonathan Kingston <kingstonmailbox@gmail.com>\nJonathan Shimonovich <jonathans@talon-sec.com>\nJongdeok Kim <jongdeok.kim@navercorp.com>\nJongheon Kim <sapzape@gmail.com>\nJongKwon Lee <jongkwon.lee@navercorp.com>\nJongmok Kim <jongmok.kim@navercorp.com>\nJongmok Kim <johny.kimc@gmail.com>\nJongsoo Lee <leejongsoo@gmail.com>\nJoonas Halinen <joonashalinen@outlook.com>\nJoone Hur <joone.hur@intel.com>\nJoonghun Park <pjh0718@gmail.com>\nJorge Villatoro <jorge@tomatocannon.com>\nJorrit Jongma <jorrit@jongma.org>\nJoseph Gentle <josephg@gmail.com>\nJoseph Lolak <joseph.lolak@samsung.com>\nJosh Triplett <josh.triplett@intel.com>\nJosh Triplett <josh@joshtriplett.org>\nJoshua Lock <joshua.lock@intel.com>\nJoshua Olaoye <joshuaolaoye46@gmail.com>\nJoshua Roesslein <jroesslein@gmail.com>\nJosué Ratelle <jorat1346@gmail.com>\nJosyula Venkat Narasimham <venkat.nj@samsung.com>\nJoy Roy <joy.roy.nil76@gmail.com>\nJoyer Huang <collger@gmail.com>\nJuan Cruz Viotti <jv@jviotti.com>\nJuan Jose Lopez Jaimez <jj.lopezjaimez@gmail.com>\nJuba Borgohain <chromiumjuba@gmail.com>\nJuhui Lee <juhui24.lee@samsung.com>\nJulian Geppert <spctstr@gmail.com>\nJulien Brianceau <jbriance@cisco.com>\nJulien Isorce <j.isorce@samsung.com>\nJulien Racle <jracle@logitech.com>\nJun Fang <jun_fang@foxitsoftware.com>\nJun Jiang <jun.a.jiang@intel.com>\nJunbong Eom <jb.eom@samsung.com>\nJungchang Park <valley84265@gmail.com>\nJunchao Han <junchao.han@intel.com>\nJunghoon Lee <sjh836@gmail.com>\nJunghyuk Yoo <wjdgurdl272@gmail.com>\nJungJik Lee <jungjik.lee@samsung.com>\nJungkee Song <jungkee.song@samsung.com>\nJunmin Zhu <junmin.zhu@intel.com>\nJunsang Mo <mojunsang26@gmail.com>\nJunsong Li <ljs.darkfish@gmail.com>\nJun Wang <wangjuna@uniontech.com>\nJun Xu <jun1.xu@intel.com>\nJun Zeng <hjunzeng6@gmail.com>\nJustin Okamoto <justmoto@amazon.com>\nJustin Ribeiro <justin@justinribeiro.com>\nJüri Valdmann <juri.valdmann@qt.io>\nJuyoung Kim <chattank05@gmail.com>\nJingge Yu <jinggeyu423@gmail.com>\nJing Peiyang <jingpeiyang@eswincomputing.com>\nJinli Wu <wujinli@bytedance.com>\nK. M. Merajul Arefin <m.arefin@samsung.com>\nKai Jiang <jiangkai@gmail.com>\nKai Köhne <kai.koehne@qt.io>\nKai Uwe Broulik <kde@privat.broulik.de>\nKal Conley <kcconley@gmail.com>\nKalyan Kondapally <kalyan.kondapally@intel.com>\nKamil Jiwa <kamil.jiwa@gmail.com>\nKamil Rytarowski <krytarowski@gmail.com>\nKanaru Sato <i.am.kanaru.sato@gmail.com>\nKangil Han <kangil.han@samsung.com>\nKangyuan Shu <kangyuan.shu@intel.com>\nKaran Thakkar <karanjthakkar@gmail.com>\nKarel Král <kralkareliv@gmail.com>\nKarl <karlpolicechromium@gmail.com>\nKarl Piper <karl4piper@gmail.com>\nKartikey Bhatt <kartikey@amazon.com>\nKaspar Brand <googlecontrib@velox.ch>\nKaushalendra Mishra <k.mishra@samsung.com>\nKaustubh Atrawalkar <kaustubh.a@samsung.com>\nKaustubh Atrawalkar <kaustubh.ra@gmail.com>\nKe He <ke.he@intel.com>\nKe Yu <kekely5692@gmail.com>\nKeeley Hammond <vertedinde@electronjs.org>\nKeeling <liqining.keeling@bytedance.com>\nKeene Pan <keenepan@linpus.com>\nKeiichiro Nagashima <n4ag3a2sh1i@gmail.com>\nKeita Suzuki <keitasuzuki.park@gmail.com>\nKeita Yoshimoto <y073k3@gmail.com>\nKeith Chen <keitchen@amazon.com>\nKeith Cirkel <chromium@keithcirkel.co.uk>\nKelsen Liu <kelsenliu21@gmail.com>\nKenneth Rohde Christiansen <kenneth.r.christiansen@intel.com>\nKenneth Strickland <ken.strickland@gmail.com>\nKenneth Zhou <knthzh@gmail.com>\nKenny Levinsen <kl@kl.wtf>\nKeonho Kim <keonho07.kim@samsung.com>\nKetan Atri <ketan.atri@samsung.com>\nKetan Goyal <ketan.goyal@samsung.com>\nKevin Gibbons <bakkot@gmail.com>\nKevin Lee Helpingstine <sig11@reprehensible.net>\nKevin M. McCormick <mckev@amazon.com>\nKexy Biscuit <kexybiscuit@aosc.io>\nKexy Biscuit <kexybiscuit@gmail.com>\nKeyou <qqkillyou@gmail.com>\nKhasim Syed Mohammed <khasim.mohammed@linaro.org>\nKhem Raj <raj.khem@gmail.com>\nKihong Kwon <kihong.kwon@samsung.com>\nKihoon Ko <rhrlgns777@gmail.com>\nKihwang Kim <pwangkk@gmail.com>\nKim Christensen <kimworking@gmail.com>\nKimberly Hunter <kimberhu@amazon.com>\nKingshuk Jana <kingshuk.j@samsung.com>\nKirill Bobyrev <kirillbobyrev@gmail.com>\nKirill Ovchinnikov <kirill.ovchinn@gmail.com>\nKlemen Forstnerič <klemen.forstneric@gmail.com>\nKodam Nagaraju <k2.nagaraju@samsung.com>\nKonrad Dzwinel <kdzwinel@gmail.com>\nKousuke Takaki <yoseio@brainoid.dev>\nKovacs Zeteny <brightbulbapp@gmail.com>\nKrishna Chaitanya <krish.botta@samsung.com>\nKristof Kosztyo <kkosztyo.u-szeged@partner.samsung.com>\nKrzysztof Czech <k.czech@samsung.com>\nKrzysztof Wolanski <k.wolanski@samsung.com>\nKui Tan <tk1061178@gmail.com>\nKunal Thakar <kunalt@gmail.com>\nKushal Pisavadia <kushi.p@gmail.com>\nKwanghee Lee <ekwange@gmail.com>\nKwangho Shin <k_h.shin@samsung.com>\nKyle Nahrgang <kpn24@drexel.edu>\nKyle Plumadore <kyle.plumadore@amd.com>\nKyounga Ra <kyounga.ra@gmail.com>\nKyoungdeok Kwon <kkd927@gmail.com>\nKyung Yeol Kim <chitacan@gmail.com>\nKyungsun Lee <kyungsuny.lee@gmail.com>\nKyungtae Kim <ktf.kim@samsung.com>\nKyungyoung Heo <bbvch13531@gmail.com>\nKyutae Lee <gorisanson@gmail.com>\nLalit Chandivade <lalit.chandivade@einfochips.com>\nLalit Rana <lalitrn44@gmail.com>\nLam Lu <lamlu@amazon.com>\nLaszlo Gombos <l.gombos@samsung.com>\nLaszlo Radanyi <bekkra@gmail.com>\nlauren n. liberda <lauren@selfisekai.rocks>\nLauren Yeun Kim <lauren.yeun.kim@gmail.com>\nLauri Oherd <lauri.oherd@gmail.com>\nLavar Askew <open.hyperion@gmail.com>\nLe Hoang Quyen <le.hoang.q@gmail.com>\nLeena Kaushik <l1.kaushik@samsung.com>\nLegend Lee <guanxian.li@intel.com>\nLeith Bade <leith@leithalweapon.geek.nz>\nLei Gao <leigao@huawei.com>\nLei Li <lli.kernel.kvm@gmail.com>\nLenny Khazan <lenny.khazan@gmail.com>\nLeo Wolf <jclw@ymail.com>\nLeon Han <leon.han@intel.com>\nLeung Wing Chung <lwchkg@gmail.com>\nLevi Zim <rsworktech@outlook.com>\nLi Yanbo <liyanbo.monster@bytedance.com>\nLi Yin <li.yin@intel.com>\nLian Ruilong <lianrl@dingdao.com>\nLian Ruilong <lianruilong1108@gmail.com>\nLidwine Genevet <lgenevet@cisco.com>\nLin Guo <sinyu890807@gmail.com>\nLin Sun <lin.sun@intel.com>\nLin Peng <penglin220@gmail.com>\nLin Peng <penglin22@huawei.com>\nLingqi Chi <someway.bit@gmail.com>\nLingyun Cai <lingyun.cai@intel.com>\nLinnan Li <lilinnan0903@gmail.com>\nLionel Landwerlin <lionel.g.landwerlin@intel.com>\nLisha Guo <lisha.guo@intel.com>\nLizhi Fan <lizhi.fan@samsung.com>\nLoo Rong Jie <loorongjie@gmail.com>\nLorenzo Stoakes <lstoakes@gmail.com>\nLu Guanqun <guanqun.lu@gmail.com>\nLuc Shi <lei.a.shi@intel.com>\nLuca Casonato <luccasonato@gmail.com>\nLuca Di Domenico <luca94dd@gmail.com>\nLucie Brozkova <lucinka.brozkova@gmail.com>\nLuiz Von Dentz <luiz.von.dentz@intel.com>\nLuka Dojcilovic <l.dojcilovic@gmail.com>\nLukas Lihotzki <lukas@lihotzki.de>\nLukasz Krakowiak <lukasz.krakowiak@mobica.com>\nLuke Inman-Semerau <luke.semerau@gmail.com>\nLuke Gu <gulukesh@gmail.com>\nLuke Warlow <lukewarlow156@gmail.com>\nLuke Warlow <luke@warlow.dev>\nLuke Zarko <lukezarko@gmail.com>\nLuoxi Pan <l.panpax@gmail.com>\nLu Yahan <yahan@iscas.ac.cn>\nLyra Rebane <rebane2001@gmail.com>\nMa Aiguo <imaiguo@gmail.com>\nMaarten Lankhorst <m.b.lankhorst@gmail.com>\nMaciej Pawlowski <m.pawlowski@eyeo.com>\nMagnus Danielsson <fuzzac@gmail.com>\nMahesh Kulkarni <mahesh.kk@samsung.com>\nMahesh Machavolu <mahesh.ma@samsung.com>\nMahmoud Ahmed <mahmoudaahmedd@gmail.com>\nMaksim Kolesin <mkolesin@gmail.com>\nMaksim Sisov <maksim.sisov@intel.com>\nMalcolm Wang <malcolm.2.wang@gmail.com>\nMallikarjuna Rao V <vm.arjun@samsung.com>\nManish Chhajer <chhajer.m@samsung.com>\nManish Jethani <m.jethani@eyeo.com>\nManjunath Babu <10manju@gmail.com>\nManojkumar Bhosale <manojkumar.bhosale@imgtec.com>\nManuel Braun <thembrown@gmail.com>\nManuel Lagana <manuel.lagana.dev@gmail.com>\nManuel Palenzuela Merino <manuelpalenzuelamerino@gmail.com>\nMao Yujie <maojie0924@gmail.com>\nMao Yujie <yujie.mao@intel.com>\nMarc des Garets <marc.desgarets@googlemail.com>\nMarcello Balduccini <marcello.balduccini@gmail.com>\nMarcio Caroso <msscaroso@gmail.com>\nMarcin Wiacek <marcin@mwiacek.com>\nMarco Monaco <marco.monaco@ocado.com>\nMarco Rodrigues <gothicx@gmail.com>\nMarcos Caceres <marcos@marcosc.com>\nMarek Behún <kabel@kernel.org>\nMariam Ali <alimariam@noogler.google.com>\nMario Pistrich <m.pistrich@gmail.com>\nMario Sanchez Prada <mario.prada@samsung.com>\nMariusz Mlynski <marius.mlynski@gmail.com>\nMark Hahnenberg <mhahnenb@andrew.cmu.edu>\nMark Seaborn <mrs@mythic-beasts.com>\nMark Winter <wintermarkedward@gmail.com>\nMarten Richter <marten.richter@tu-berlin.de>\nMartijn Croonen <martijn@martijnc.be>\nMartin Aberer <mail@martin-aberer.at>\nMartin Bednorz <m.s.bednorz@gmail.com>\nMartin Persson <mnpn03@gmail.com>\nMartin Rogalla <martin@martinrogalla.com>\nMartina Kollarova <martina.kollarova@intel.com>\nMartino Fontana <tinozzo123@gmail.com>\nMasahiro Yado <yado.masa@gmail.com>\nMasaru Nishida <msr.i386@gmail.com>\nMasayuki Wakizaka <mwakizaka0108@gmail.com>\nMatej Knopp <matej.knopp@gmail.com>\nMatheus Bratfisch <matheusbrat@gmail.com>\nMathias Bynens <mathias@qiwi.be>\nMathieu Meisser <mmeisser@logitech.com>\nMatt Arpidone <mma.public@gmail.com>\nMatt Fysh <mattfysh@gmail.com>\nMatt Harding <majaharding@gmail.com>\nMatt Jolly <kangie@gentoo.org>\nMatt Strum <mstrum@amazon.com>\nMatt Zeunert <matt@mostlystatic.com>\nMatthew \"strager\" Glazar <strager.nds@gmail.com>\nMatthew Bauer <mjbauer95@gmail.com>\nMatthew Demarest <demarem@amazon.com>\nMatthew Robertson <matthewrobertson03@gmail.com>\nMatthew Turk <matthewturk@gmail.com>\nMatthew Webb <mwebbmwebb@gmail.com>\nMatthew Willis <appamatto@gmail.com>\nMatthias Reitinger <reimarvin@gmail.com>\nMatthieu Rigolot <matthieu.rigolot@gmail.com>\nMatthieu Vlad Hauglustaine <matt.hauglustaine@gmail.com>\nMattias Buelens <mattias.buelens@gmail.com>\nMax Coplan <mchcopl@gmail.com>\nMax Perepelitsyn <pph34r@gmail.com>\nMax Schmitt <max@schmitt.mx>\nMax Vujovic <mvujovic@adobe.com>\nMayank Gupta <mayank.g1@samsung.com>\nMayur Kankanwadi <mayurk.vk@samsung.com>\nMc Zeng <zengmcong@gmail.com>\nMd Abdullah Al Alamin <a.alamin.cse@gmail.com>\nMd. Hasanur Rashid <hasanur.r@samsung.com>\nMd Hasibul Hasan <hasibulhasan873@gmail.com>\nMd Hasibul Hasan <hasibul.h@samsung.com>\nMd Jobed Hossain <jobed.h@samsung.com>\nMd Raiyan bin Sayeed <mrbsayee@uwaterloo.ca>\nMd. Sadiqul Amin <sadiqul.amin@samsung.com>\nMd Sami Uddin <md.sami@samsung.com>\nMerajul Arefin <merajularefin@gmail.com>\nMicha Hanselmann <micha.hanselmann@gmail.com>\nMichael Cirone <mikecirone@gmail.com>\nMichael Constant <mconst@gmail.com>\nMichael Forney <mforney@mforney.org>\nMichael Gilbert <floppymaster@gmail.com>\nMichael Herrmann <michael@herrmann.io>\nMichael Kolomeytsev <michael.kolomeytsev@gmail.com>\nMichael Lopez <lopes92290@gmail.com>\nMichael Morrison <codebythepound@gmail.com>\nMichael Müller <michael@fds-team.de>\nMichael Schechter <mike.schechter@gmail.com>\nMichael Smith <sideshowbarker@gmail.com>\nMichael Weiss <dev.primeos@gmail.com>\nMichaël Zasso <mic.besace@gmail.com>\nMichael Zugelder <michael@zugelder.org>\nMichel Promonet <michel.promonet.1@gmail.com>\nMihai Maerean <mmaerean@adobe.com>\nMihai Tica <mihai.o.tica@gmail.com>\nMihai Tica <mitica@adobe.com>\nMike Pennisi <mike@mikepennisi.com>\nMike Tilburg <mtilburg@adobe.com>\nMikhail Pozdnyakov <mikhail.pozdnyakov@intel.com>\nMilko Leporis <milko.leporis@imgtec.com>\nMilton Chiang <milton.chiang@mediatek.com>\nMilutin Smiljanic <msmiljanic.gm@gmail.com>\nMinchul Kang <tegongkang@gmail.com>\nMing Lei <minggeorgelei@gmail.com>\nMingeun Park <mindal99546@gmail.com>\nMinggang Wang <minggang.wang@intel.com>\nMingmin Xie <melvinxie@gmail.com>\nMingming Xu <mingming1.xu@intel.com>\nMingyue Ji <myandyji@gmail.com>\nMinjeong Kim <deoxyribonucleicacid150@gmail.com>\nMinjeong Lee <apenr1234@gmail.com>\nMinseok Koo <kei98301@gmail.com>\nMinsoo Max Koo <msu.koo@samsung.com>\nMiran Karic <miran.karic@imgtec.com>\nMirela Budaes <mbudaes@adobe.com>\nMirela Budaes <mbudaes@gmail.com>\nMitchell Cohen <mitchell@agilebits.com>\nMiyoung Shin <myid.shin@navercorp.com>\nMohamed I. Hammad <ibraaaa@gmail.com>\nMohamed Mansour <m0.interactive@gmail.com>\nMohamed Hany Youns <mohamedhyouns@gmail.com>\nMohammad Azam <m.azam@samsung.com>\nMohammadSabri <mohammad.kh.sabri@exalt.ps>\nMohammed Wajahat Ali Siddiqui <wajahat.s@samsung.com>\nMohan Reddy <mohan.reddy@samsung.com>\nMohit Bhalla <bhallam@amazon.com>\nMohraiel Matta <mohraielmatta@gmail.com>\nMoiseanu Rares-Marian <moiseanurares@gmail.com>\nMomoka Yamamoto <momoka.my6@gmail.com>\nMomoko Hattori <momohatt10@gmail.com>\nMostafa Sedaghat joo <mostafa.sedaghat@gmail.com>\nMrunal Kapade <mrunal.kapade@intel.com>\nMuhammad Mahad <mahadtxt@gmail.com>\nMunira Tursunova <moonira@google.com>\nMyeongjin Cho <myeongjin.cho@navercorp.com>\nMyles C. Maxfield <mymax@amazon.com>\nMyung-jong Kim <mjkim610@gmail.com>\nMyunghoon Kim <asdvfrqwe@gmail.com>\nNagarajan Narayanan <nagarajan.n@samsung.com>\nNagarjuna Atluri <nagarjuna.a@samsung.com>\nNaiem Shaik <naiem.shaik@gmail.com>\nNakuru Wubni <nakuru.wubni@gitstart.dev>\nNaman Kumar Narula <namankumarnarula@gmail.com>\nNaman Yadav <naman.yadav@samsung.com>\nNancy Tillery <hedonistsmith@gmail.com>\nNaoki Takano <takano.naoki@gmail.com>\nNaoto Ono <onoto1998@gmail.com>\nNaresh Pratap Singh <naresh.singh@samsung.com>\nNathan Mitchell <nathaniel.v.mitchell@gmail.com>\nNaveen Bobbili <naveenbobbili@motorola.com>\nNaveen Bobbili <qghc36@motorola.com>\nNaveen Kumar Devaraj <devarajn@amazon.com>\nNaveen Kumar S G <naveensg@samsung.com>\nNayan Kumar K <qtc746@motorola.com>\nNayeem Hasan <nayeemhasan.nh01@gmail.com>\nNayeon Kim <skdus3373@gmail.com>\nNeal Gompa <ngompa13@gmail.com>\nNed Williamson <nedwilliamson@gmail.com>\nNedeljko Babic <nedeljko.babic@imgtec.com>\nNeehit Goyal <neehit.goyal@samsung.com>\nNidhi Jaju <nidhijaju127@gmail.com>\nNiek van der Maas <mail@niekvandermaas.nl>\nNik Pavlov <nikita.pavlov.dev@gmail.com>\nNikhil Bansal <n.bansal@samsung.com>\nNikhil Meena <iakhilmeena@gmail.com>\nNikhil Sahni <nikhil.sahni@samsung.com>\nNikita Ofitserov <himikof@gmail.com>\nNiklas Hambüchen <mail@nh2.me>\nNiklas Schulze <me@jns.io>\nNikola Kovacs <nikola.kovacs@gmail.com>\nNils Schneider <nils.schneider@gmail.com>\nNils Schneider <nils@nilsschneider.net>\nNingxin Hu <ningxin.hu@intel.com>\nNitish Mehrotra <nitish.m@samsung.com>\nNivedan Sharma <ni.sharma@samsung.com>\nNoam Rosenthal <noam.j.rosenthal@gmail.com>\nNoj Vek <nojvek@gmail.com>\nNolan Cao <nolan.robin.cao@gmail.com>\nNourhan Hasan <nourhan.m.hasan@gmail.com>\nOleksii Kadurin <ovkadurin@gmail.com>\nOliver Dunk <oliver@oliverdunk.com>\nOlivier Tilloy <olivier+chromium@tilloy.net>\nOlli Raula (Old name Olli Syrjälä) <olli.raula@intel.com>\nOmar Sandoval <osandov@osandov.com>\nOmar Shawky <omarmshawky11@gmail.com>\nOrko Garai <orko.garai@gmail.com>\nOwen Shaw <owenpshaw@gmail.com>\nOwen Yuwono <owenyuwono@gmail.com>\nPalash Verma <palashverma47@gmail.com>\nPan Deng <pan.deng@intel.com>\nParag Radke <nrqv63@motorola.com>\nParas Awasthi <awasthiparas6@gmail.com>\nParitosh Kumar <paritosh.in@samsung.com>\nPasquale Riello <pas.riello@gmail.com>\nPatrasciuc Sorin Cristian <cristian.patrasciuc@gmail.com>\nPatricija Cerkaite <cer.patricija@gmail.com>\nPatrick Chan <chanpatorikku@gmail.com>\nPatrick Kettner <patrickkettner@gmail.com>\nPatrick Riordan <patrickriordan177@gmail.com>\nPatrick Stein <patrickwonders@gmail.com>\nPatrik Ackland <patrikackland@gmail.com>\nPaul Adolph <padolph@netflix.com>\nPaul Kehrer <paul.l.kehrer@gmail.com>\nPaul Lind <paul.lind@imgtec.com>\nPaul Nettleship <pnettleship@gmail.com>\nPaul Robinson <paulrobinson85@googlemail.com>\nPaul Roskell <blurrech@gmail.com>\nPaul Sapunaru <paul.sapunaru@intel.com>\nPaul Wicks <pwicks86@gmail.com>\nPavan Kumar Emani <pavan.e@samsung.com>\nPavel Golikov <paullo612@ya.ru>\nPavel Ivanov <paivanof@gmail.com>\nPawan Udassi <pawanudassi@hotmail.com>\nPawel Forysiuk <p.forysiuk@samsung.com>\nPaweł Hajdan jr <phajdan.jr@gmail.com>\nPaweł Stanek <pawel@gener8ads.com>\nPiotr Zarycki <piotr.zarycki@gmail.com>\nPayal Pandey <payal.pandey@samsung.com>\nPedro Tôrres <t0rr3s.p3dr0@gmail.com>\nPeng Hu <penghu@tencent.com>\nPeng Jiang <leiyi.jp@gmail.com>\nPeng Xinchao <pxinchao@gmail.com>\nPeng Zhou <zhoupeng.1996@bytedance.com>\nPeng-Yu Chen <pengyu@libstarrify.so>\nPei Wang <wangpei@uniontech.com>\nPeter Bright <drpizza@quiscalusmexicanus.org>\nPeter Brophy <pbrophy@adobe.com>\nPeter Collingbourne <peter@pcc.me.uk>\nPeter Gal <pgal.u-szeged@partner.samsung.com>\nPeter Griffin <peter.griffin@linaro.org>\nPeter Molnar <pmolnar.u-szeged@partner.samsung.com>\nPeter Snyder <snyderp@gmail.com>\nPeter Varga <pvarga@inf.u-szeged.hu>\nPeter Wong <peter.wm.wong@gmail.com>\nPhan Quang Minh <phanquangminh217@gmail.com>\nPhilip Hanson <philip.hanson@intel.com>\nPhilipp Hancke <fippo@andyet.net>\nPhilipp Hancke <philipp.hancke@googlemail.com>\nPhilippe Beauchamp <philippe.beauchamp@gmail.com>\nPhilippe Beaudoin <philippe.beaudoin@gmail.com>\nPhistucK <phistuck@gmail.com>\nPierre Neter <pierreneter@gmail.com>\nPierre-Antoine LaFayette <pierre.lafayette@gmail.com>\nPo-Chun Chang <pochang0403@gmail.com>\nPrakhar Shrivastav <p.shri@samsung.com>\nPramod Begur Srinath <pramod.bs@samsung.com>\nPranay Kumar <pranay.kumar@samsung.com>\nPrashant Hiremath <prashhir@cisco.com>\nPrashant Nevase <prashant.n@samsung.com>\nPrashant Patil <prashant.patil@imgtec.com>\nPratham <prathamIN@proton.me>\nPraveen Akkiraju <praveen.anp@samsung.com>\nPreeti Nayak <preeti.nayak@samsung.com>\nPritam Nikam <pritam.nikam@samsung.com>\nPsychpsyo <psychpsyo@gmail.com>\nPuttaraju R <puttaraju.r@samsung.com>\nPunith Nayak <npunith125@gmail.com>\nQi Tiezheng <qitiezheng@360.cn>\nQi Yang <qi1988.yang@samsung.com>\nQiang Zeng <zengqiang1@huawei.com>\nQiankun Miao <qiankun.miao@intel.com>\nQing Zhang <qing.zhang@intel.com>\nQingmei Li <qingmei.li@vivo.com>\nQiyao Yuan <qiyaoyuan@tencent.com>\nRadu Stavila <stavila@adobe.com>\nRadu Velea <radu.velea@intel.com>\nRafael Antognolli <rafael.antognolli@intel.com>\nRaghavendra Ghatage <r.ghatage@samsung.com>\nRaghu Ram Nagaraj <r.nagaraj@samsung.com>\nRahul Gupta <rahul.g@samsung.com>\nRahul Yadav <rahul.yadav@samsung.com>\nRajesh Mahindra <rmahindra@uber.com>\nRajneesh Rana <rajneesh.r@samsung.com>\nRaman Tenneti <raman.tenneti@gmail.com>\nRamkumar Gokarnesan <ramkumar.gokarnesan@gmail.com>\nRamkumar Ramachandra <artagnon@gmail.com>\nRamya Vadlamudi <ramya.v@samsung.com>\nRandy Posynick <randy.posynick@gmail.com>\nRaphael Kubo da Costa <raphael.kubo.da.costa@intel.com>\nRaul Tambre <raul@tambre.ee>\nRastislav Vašička <rastislav.vasicka@codetech.cc>\nRaveendra Karu <r.karu@samsung.com>\nRavi Nanjundappa <nravi.n@samsung.com>\nRavi Phaneendra Kasibhatla <r.kasibhatla@samsung.com>\nRavi Phaneendra Kasibhatla <ravi.kasibhatla@motorola.com>\nRavindra Kumar <ravindra.k2@samsung.com>\nRaviraj Sitaram <raviraj.p.sitaram@intel.com>\nRebecca Chang Swee Fun <rebecca.chang@starfivetech.com>\nReda Tawfik <redatawfik@noogler.google.com>\nRéda Housni Alaoui <alaoui.rda@gmail.com>\nRefael Ackermann <refack@gmail.com>\nRémi Arnaud <jsremi@gmail.com>\nRenata Hodovan <hodovan.renata@gmail.com>\nRene Bolldorf <rb@radix.io>\nRene Ladan <r.c.ladan@gmail.com>\nRichard Baranyi <lordprotector@gmail.com>\nRichard Li <richard.li@intel.com>\nRichard Smith <happyercat@gmail.com>\nRijubrata Bhaumik <rijubrata.bhaumik@intel.com>\nRiku Voipio <riku.voipio@linaro.org>\nRitesh Saharan <r.saharan@samsung.com>\nRob Buis <rob.buis@samsung.com>\nRob Wu <rob@robwu.nl>\nRobert Bear Travis <bear.travis@gmail.com>\nRobert Bear Travis <betravis@adobe.com>\nRobert Bradford <robert.bradford@intel.com>\nRobert Goldberg <goldberg@adobe.com>\nRobert Günzler <r@gnzler.io>\nRobert Hogan <robhogan@gmail.com>\nRobert O'Callahan <rocallahan@gmail.com>\nRobert Nagy <robert.nagy@gmail.com>\nRobert Sesek <rsesek@bluestatic.org>\nRoee Kasher <roee91@gmail.com>\nRoger Sanders <sanders_roger@hotmail.com>\nRoger Sanders <sanders.rogerj@gmail.com>\nRoger Zanoni <rogerzanoni@gmail.com>\nRoland Takacs <rtakacs.u-szeged@partner.samsung.com>\nRomain Pokrzywka <romain.pokrzywka@gmail.com>\nRosen Dash <nqk836@motorola.com>\nRosen Dash <rosen.dash@gmail.com>\nRoss Kirsling <rkirsling@gmail.com>\nRoss Wollman <ross.wollman@gmail.com>\nRoy Le <royle0502@gmail.com>\nRoy Le <royle@tencent.com>\nRuan Beihong <ruanbeihong@gmail.com>\nruben <chromium@hybridsource.org>\nRuben Bridgewater <ruben@bridgewater.de>\nRuben Terrazas <rubentopo@gmail.com>\nRufus Hamade <rufus.hamade@imgtec.com>\nRuiyi Luo <luoruiyi2008@gmail.com>\nRulong Chen <rulong.crl@alibaba-inc.com>\nRussell Davis <russell.davis@gmail.com>\nRyan Ackley <ryanackley@gmail.com>\nRyan Gonzalez <rymg19@gmail.com>\nRyan Manuel <rfmanuel@gmail.com>\nRyan Norton <rnorton10@gmail.com>\nRyan Sleevi <ryan-chromium-dev@sleevi.com>\nRyan Yoakum <ryoakum@skobalt.com>\nRyan Huen <ryanhuenprivate@gmail.com>\nRye Zhang <ryezhang@tencent.com>\nRyo Ogawa <negibokken@gmail.com>\nRyuan Choi <ryuan.choi@samsung.com>\nSaikrishna Arcot <saiarcot895@gmail.com>\nSajal Khandelwal <skhandelwa22@bloomberg.net>\nSajeesh Sidharthan <sajeesh.sidharthan@amd.corp-partner.google.com>\nSakib Shabir <s1.tantray@samsung.com>\nSaksham Mittal <gotlouemail@gmail.com>\nSalvatore Iovene <salvatore.iovene@intel.com>\nSam James <sam@gentoo.org>\nSam Larison <qufighter@gmail.com>\nSam McDonald <sam@sammcd.com>\nSamuel Attard <samuel.r.attard@gmail.com>\nSamuel Maddock <samuelmaddock@electronjs.org>\nSanfeng Liao <sanfengliao@gmail.com>\nSanggi Hong <sanggi.hong11@gmail.com>\nSanghee Lee <sanghee.lee1992@gmail.com>\nSangheon Kim <sangheon77.kim@samsung.com>\nSanghyun Park <sh919.park@samsung.com>\nSanghyup Lee <sh53.lee@samsung.com>\nSangjoon Je <htamop@gmail.com>\nSangseok Jang <sangseok.jang@gmail.com>\nSangseok Jang <sangseok.jang@navercorp.com>\nSangwoo Ko <sangwoo.ko@navercorp.com>\nSangwoo Ko <sangwoo108@gmail.com>\nSanjoy Pal <ncj674@motorola.com>\nSanjoy Pal <sanjoy.pal@samsung.com>\nSanne Wouda <sanne.wouda@gmail.com>\nSantosh Mahto <samahto@cisco.com>\nSarah Jochum <smjochum@gmail.com>\nSarath Singapati <s.singapati@gmail.com>\nSarath Singapati <s.singapati@samsung.com>\nSarath Singapati <sarath.singapati@huawei.com>\nSaravanan KR <sramajay@cisco.com>\nSathish Kuppuswamy <sathish.kuppuswamy@intel.com>\nSatoshi Matsuzaki <satoshi.matsuzaki@gmail.com>\nSatyajit Sahu <satyajit.sahu@amd.com>\nSayan Nayak <sayan.nayak@samsung.com>\nSayan Sivakumaran <sivakusayan@gmail.com>\nScott D Phillips <scott.d.phillips@intel.com>\nSean Bryant <sean@cyberwang.net>\nSean DuBois <seaduboi@amazon.com>\nSebastian Amend <sebastian.amend@googlemail.com>\nSebastian Krzyszkowiak <dos@dosowisko.net>\nSebastian Markbåge <sebastian@calyptus.eu>\nSebastjan Raspor <sebastjan.raspor1@gmail.com>\nSeo Sanghyeon <sanxiyn@gmail.com>\nSeokju Kwon <seokju.kwon@gmail.com>\nSeokho Song <0xdevssh@gmail.com>\nSeongTae Jeong <ferendevelop.gl@gmail.com>\nSergei Poletaev <spylogsster@gmail.com>\nSergei Romanov <rsv.981@gmail.com>\nSergey Romanov <svromanov@sberdevices.ru>\nSergey Kipet <sergey.kipet@gmail.com>\nSergey Markelov <sergionso@gmail.com>\nSergey Putilin <p.sergey@samsung.com>\nSergey Shekyan <shekyan@gmail.com>\nSergey Talantov <sergey.talantov@gmail.com>\nSergio Carlos Morales Angeles <carloschilazo@gmail.com>\nSergio Garcia Murillo <sergio.garcia.murillo@gmail.com>\nSergiy Belozorov <rryk.ua@gmail.com>\nSerhii Matrunchyk <sergiy.matrunchyk@gmail.com>\nSeshadri Mahalingam <seshadri.mahalingam@gmail.com>\nSeungkyu Lee <zx6658@gmail.com>\nSevan Janiyan <venture37@geeklan.co.uk>\nShahriar Rostami <shahriar.rostami@gmail.com>\nShail Singhal <shail.s@samsung.com>\nShane Hansen <shanemhansen@gmail.com>\nShankarGanesh K <blr.bmlab@gmail.com>\nShanmuga Pandi M <shanmuga.m@samsung.com>\nShanxing Mei <shanxing.mei@intel.com>\nShaobo Yan <shaobo.yan@intel.com>\nShaotang Zhu <zhushaotang@uniontech.com>\nShashi Kumar <sk.kumar@samsung.com>\nShawn Anastasio <shawnanastasio@gmail.com>\nShelley Vohr <shelley.vohr@gmail.com>\nShen Yu <shenyu.tcv@gmail.com>\nSherry Mou <wenjinm@amazon.com>\nShez Baig <sbaig1@bloomberg.net>\nShi Chunlong <shicl@dingdao.com>\nShi Chunlong <shichunlong@gmail.com>\nShigeki Ohtsu <shigeki.ohtsu@gmail.com>\nShicheng Wang <wangshicheng@xiaomi.com>\nShiliu Wang <aofdwsl@gmail.com>\nShiliu Wang <shiliu.wang@intel.com>\nShilpa Shri <shilpa.shri@samsung.com>\nShirish S <shirish.s@amd.com>\nShiva Kumar <shiva.k1@samsung.com>\nShivakumar JM <shiva.jm@samsung.com>\nShiyi Zou <shiyi.zou@intel.com>\nShobhit Goel <shobhit.goel@samsung.com>\nShouqun Liu <liushouqun@xiaomi.com>\nShouqun Liu <shouqun.liu@intel.com>\nShreeram Kushwaha <shreeram.k@samsung.com>\nShrey Patel <shrey1patel2@gmail.com>\nShreyas Gopal <shreyas.g@samsung.com>\nShreyas VA <v.a.shreyas@gmail.com>\nShubham Agrawal <shubag@amazon.com>\nShubham Gupta <shubh.gupta@samsung.com>\nSiba Samal <siba.samal@samsung.com>\nSida Zhu <zhusida@bytedance.com>\nSiddharth Bagai <b.siddharth@samsung.com>\nSiddharth Shankar <funkysidd@gmail.com>\nSiddhartha Barman Joy <siddhartha.j@samsung.com>\nSimeon Kuran <simeon.kuran@gmail.com>\nSimon Arlott <simon.arlott@gmail.com>\nSimon Cadman <simon@cadman.uk>\nSimon Jackson <simon.jackson@sonocent.com>\nSimon La Macchia <smacchia@amazon.com>\nSiva Kumar Gunturi <siva.gunturi@samsung.com>\nSlava Aseev <nullptrnine@gmail.com>\nSmriti Singh <s01.singh@samsung.com>\nSohom Datta <sohom.datta@learner.manipal.edu>\nSohom Datta <dattasohom1@gmail.com>\nSong Fangzhen <songfangzhen@bytedance.com>\nSong Qinglin <songql@dingdao.com>\nSong Qinglin <songqinglin@gmail.com>\nSong YeWen <ffmpeg@gmail.com>\nSooho Park <sooho1000@gmail.com>\nSoojung Choi <crystal2840@gmail.com>\nSoorya R <soorya.r@samsung.com>\nSoren Dreijer <dreijerbit@gmail.com>\nSpencer Wilson <spencer@spencerwilson.org>\nSreerenj Balachandran <sreerenj.balachandran@intel.com>\nSrirama Chandra Sekhar Mogali <srirama.m@samsung.com>\nStacy Kim <stacy.kim@ucla.edu>\nStaphany Park <stapark008@gmail.com>\nStephan Hartmann <stha09@googlemail.com>\nStephen Searles <stephen.searles@gmail.com>\nStephen Sigwart <ssigwart@gmail.com>\nSteve Sanders <steve@zanderz.com>\nSteven Cohen <peragwin@gmail.com>\nSteven Pennington <spenn@engr.uvic.ca>\nSteven Roussey <sroussey@gmail.com>\nSubrahmanya Praveen Munukutla <sataya.m@samsung.com>\nSucheta Saraf <suchetasaraf95@gmail.com>\nSuchit Agrawal <a.suchit@samsung.com>\nSudarsana Babu Nagineni <sudarsana.nagineni@intel.com>\nSudarshan Parthasarathy <sudarshan.p@samsung.com>\nSujae Jo <sujae33.jo@gmail.com>\nSujith S S <sujiths.s@samsung.com>\nSumaid Syed <sumaidsyed@gmail.com>\nSunchang Li <johnstonli@tencent.com>\nSundoo Kim <nerdooit@gmail.com>\nSundoo Kim <0xd00d00b@gmail.com>\nSuneel Kota <suneel.kota@samsung.com>\nSung Lee <sung.lee@amd.com>\nSungguk Lim <limasdf@gmail.com>\nSunghyeok Kang <sh0528.kang@samsung.com>\nSungmann Cho <sungmann.cho@gmail.com>\nSungmann Cho <sungmann.cho@navercorp.com>\nSunil Ratnu <sunil.ratnu@samsung.com>\nSunitha Srivatsa <srivats@amazon.com>\nSunwoo Nam <jegalzz88@gmail.com>\nSuresh Guttula <suresh.guttula@amd.corp-partner.google.com>\nSurya K M <suryagowda590@gmail.com>\nSushma Venkatesh Reddy <sushma.venkatesh.reddy@intel.com>\nSuvanjan Mukherjee <suvanjanmukherjee@gmail.com>\nSuyambulingam R M <suyambu.rm@samsung.com>\nSuyash Nayan <suyashnyn1@gmail.com>\nSuyash Sengar <suyash.s@samsung.com>\nSwarali Raut <swarali.sr@samsung.com>\nSwati Jaiswal <swa.jaiswal@samsung.com>\nSyed Wajid <syed.wajid@samsung.com>\nSylvain Zimmer <sylvinus@gmail.com>\nSylvestre Ledru <sylvestre.ledru@gmail.com>\nSynthia Islam <synthia.is@samsung.com>\nSzabolcs David <davidsz@inf.u-szeged.hu>\nSzilard Szaloki <szilardszaloki@gmail.com>\nSzymon Piechowicz <szymonpiechowicz@o2.pl>\nTaeheon Kim <skyrabbits1@gmail.com>\nTaeho Nam <thn7440@gmail.com>\nTaehoon Lee <taylor.hoon@gmail.com>\nTaeseong Yu <yugeeklab@gmail.com>\nTaeyeon Kim <ssg9732@gmail.com>\nTae Shin <taeshindev@gmail.com>\nTaher Ali <taher.dasten@gmail.com>\nTakaaki Suzuki <takaakisuzuki.14@gmail.com>\nTakahiro Aoyagi <hogehoge@gachapin.jp>\nTakashi Fujita <tgfjt.mail@gmail.com>\nTakashi Mima <tks.m1205@gmail.com>\nTakeshi Kurosawa <taken.spc@gmail.com>\nTakuya Kurimoto <takuya004869@gmail.com>\nTanay Chowdhury <tanay.c@samsung.com>\nTanvir Rizvi <tanvir.rizvi@samsung.com>\nTao Wang <tao.wang.2261@gmail.com>\nTao Xiong <taox4@illinois.edu>\nTapu Kumar Ghose <ghose.tapu@gmail.com>\nTaylor Price <trprice@gmail.com>\nTed Kim <neot0000@gmail.com>\nTed Vessenes <tedvessenes@gmail.com>\nTeodora Novkovic <teodora.petrovic@gmail.com>\nThiago Farina <thiago.farina@gmail.com>\nThiago Marcos P. Santos <thiago.santos@intel.com>\nThirumurugan <thiruak1024@gmail.com>\nThomas Butter <tbutter@gmail.com>\nThomas Conti <tomc@amazon.com>\nThomas Nguyen <haitung.nguyen@avast.com>\nThomas Phillips <tphillips@snapchat.com>\nThomas White <im.toms.inbox@gmail.com>\nTiago Vignatti <tiago.vignatti@intel.com>\nTianyi Zhang <me@1stprinciple.org>\nTibor Dusnoki <tibor.dusnoki.91@gmail.com>\nTibor Dusnoki <tdusnoki@inf.u-szeged.hu>\nTien Hock Loh <tienhock.loh@starfivetech.com>\nTim Ansell <mithro@mithis.com>\nTim Barry <oregongraperoot@gmail.com>\nTim Niederhausen <tim@rnc-ag.de>\nTim Steiner <twsteiner@gmail.com>\nTimo Gurr <timo.gurr@gmail.com>\nTimo Reimann <ttr314@googlemail.com>\nTimo Witte <timo.witte@gmail.com>\nTimothy Pearson <tpearson@raptorcs.com>\nTing Shao <ting.shao@intel.com>\nTobias Lippert <tobias.lippert@fastmail.com>\nTobias Soppa <tobias@soppa.me>\nTobias Soppa <tobias.soppa@code.berlin>\nTom Callaway <tcallawa@redhat.com>\nTom Harwood <tfh@skip.org>\nTomas Popela <tomas.popela@gmail.com>\nTomasz Edward Posłuszny <tom@devpeer.net>\nTony Shen <legendmastertony@gmail.com>\nTorsten Kurbad <google@tk-webart.de>\nToshihito Kikuchi <leamovret@gmail.com>\nToshiaki Tanaka <zokutyou2@gmail.com>\nTravis Leithead <travis.leithead@gmail.com>\nTrent Willis <trentmwillis@gmail.com>\nTrevor Perrin <unsafe@trevp.net>\nTripta Gupta <triptagupta19@gmail.com>\nTripta Gupta <tripta.g@samsung.com>\nTristan Fraipont <tristan.fraipont@gmail.com>\nTudor Brindus <me@tbrindus.ca>\nTushar Singh <tusharsinghnx@gmail.com>\nTuukka Toivonen <tuukka.toivonen@intel.com>\nTyler Jones <tylerjdev@github.com>\nU. Artie Eoff <ullysses.a.eoff@intel.com>\nUmar Hansa <umar.hansa@gmail.com>\nUpendra Gowda <upendrag.gowda@gmail.com>\nUtzcoz <utzcoz@gmail.com>\nUwU UwU <uwu7586@gmail.com>\nUzair Jaleel <uzair.jaleel@samsung.com>\nUzochukwu Ochogu <uzochukwu.ochogu@gitstart.dev>\nVadim Gorbachev <bmsdave@gmail.com>\nVaibhav Agrawal <vaibhav1.a@samsung.com>\nValentin Ilie <valentin.ilie@intel.com>\nVamshikrishna Yellenki <vamshi@motorola.com>\nVani Hegde <vani.hegde@samsung.com>\nVartul Katiyar <vartul.k@samsung.com>\nVarun Chowdhary Paturi <v.paturi@samsung.com>\nVarun Varada <varuncvarada@gmail.com>\nVedran Šajatović <vedran.sajatovic@gmail.com>\nVernon Tang <vt@foilhead.net>\nViatcheslav Ostapenko <sl.ostapenko@samsung.com>\nVictor Costan <costan@gmail.com>\nVictor Solonsky <victor.solonsky@gmail.com>\nViet-Trung Luu <viettrungluu@gmail.com>\nVikas Mundra <vikas.mundra@samsung.com>\nVinay Anantharaman <vinaya@adobe.com>\nVinoth Chandar <vinoth@uber.com>\nVipul Bhasin <vipul.bhasin@gmail.com>\nVisa Putkinen <v.putkinen@partner.samsung.com>\nVishal Bhatnagar <vishal.b@samsung.com>\nVishal Lingam <vishal.reddy@samsung.com>\nVitaliy Kharin <kvserr@gmail.com>\nVivek Galatage <vivek.vg@samsung.com>\nVlad Zahorodnii <vlad.zahorodnii@kde.org>\nVolker Sorge <volker.sorge@gmail.com>\nWaihung Fu <fufranci@amazon.com>\nwafuwafu13 <mariobaske@i.softbank.jp>\nWojciech Bielawski <wojciech.bielawski@gmail.com>\nWang Chen <wangchen20@iscas.ac.cn>\nWang Chen <unicornxw@gmail.com>\nWang Weiwei <wangww@dingdao.com>\nWangyang Dai <jludwy@gmail.com>\nWanming Lin <wanming.lin@intel.com>\nWei Li <wei.c.li@intel.com>\nWeicong Yu <yuweicong666@gmail.com>\nWen Fan <fanwen1@huawei.com>\nWenxiang Qian <leonwxqian@gmail.com>\nWenSheng He <wensheng.he@samsung.com>\nWesley Lancel <wesleylancel@gmail.com>\nWei Wang <wei4.wang@intel.com>\nWei Wen <wenwei.wenwei@bytedance.com>\nWeidong Liu <liuwd8@gmail.com>\nWesley Wigham <wwigham@gmail.com>\nWill Cohen <wwcohen@gmail.com>\nWill Hirsch <chromium@willhirsch.co.uk>\nWill Shackleton <w.shackleton@gmail.com>\nWill Watts <willwatts.ww@googlemail.com>\nWilliam Xie <william.xie@intel.com>\nWinston Chen <winston.c1@samsung.com>\nXialei Qin <qinxialei@uniontech.com>\nXiang Long <xiang.long@intel.com>\nXiangYang <yangxiang12@huawei.com>\nXiangze Zhang <xiangze.zhang@intel.com>\nXiaobing Yang <yangxiaobing@qianxin.com>\nXiaofeng Zhang <xiaofeng.zhang@intel.com>\nXiaolei Yu <dreifachstein@gmail.com>\nXiaoshu Zhang <xiaoshu@amazon.com>\nXiaoyin Liu <xiaoyin.l@outlook.com>\nXinchao He <hexinchao@gmail.com>\nXinchao Tian <tianxinchao@360.cn>\nXing Zhang <xzhang@adobe.com>\nXinghua Cao <xinghua.cao@intel.com>\nXu Samuel <samuel.xu@intel.com>\nXu Xing <xing.xu@intel.com>\nXuefei Ren <xrenishere@gmail.com>\nXuefu Zhang <xuefu.sh@gmail.com>\nXuehui Xie <xuehui.xxh@alibaba-inc.com>\nXueqing Huang <huangxueqing@xiaomi.com>\nXun Sun <xun.sun@intel.com>\nXunran Ding <xunran.ding@samsung.com>\nXunran Ding <dingxunran@gmail.com>\nYael Aharon <yael.aharon@intel.com>\nYan Wang <yan0422.wang@samsung.com>\nYang Gu <yang.gu@intel.com>\nYang Liu <jd9668954@gmail.com>\nYang Liu <yangliu.leo@bytedance.com>\nYannay Hammer <yannayha@gmail.com>\nYannic Bonenberger <yannic.bonenberger@gmail.com>\nYarin Kaul <yarin.kaul@gmail.com>\nYash Joshi <yashjoshimail@gmail.com>\nYash Vempati <vempatiy@amazon.com>\nYash Vinayak <yash.vinayak@samsung.com>\nYe Liu <cbakgly@gmail.com>\nYeol Park <peary2@gmail.com>\nYeonwoo Jo <yeonwoo.jo.92@gmail.com>\nYi Shen <yi.shen@samsung.com>\nYi Sun <ratsunny@gmail.com>\nYichen Jiang <jiangyichen123@gmail.com>\nYifei Yu <yuyifei@xiaomi.com>\nYi Zhang <yi.y.zhang@intel.com>\nYizhou Jiang <yizhou.jiang@intel.com>\nYoav Weiss <yoav@yoav.ws>\nYoav Zilberberg <yoav.zilberberg@gmail.com>\nYogesh <yogesh.dabas@samsung.com>\nYoichiro Hibara <hibarayoichiro871@gmail.com>\nYong Ling <yongling@tencent.com>\nYong Shin <sy3620@gmail.com>\nYong Wang <ccyongwang@tencent.com>\nYonggang Luo <luoyonggang@gmail.com>\nYongha Lee <yongha78.lee@samsung.com>\nYongsang Park <yongsangpark980813@gmail.com>\nYongseok Choi <yongseok.choi@navercorp.com>\nYongsheng Zhu <yongsheng.zhu@intel.com>\nYoonjae Cho <yoonjae.cho92@gmail.com>\nYoshinori Sano <yoshinori.sano@gmail.com>\nYoshiya Hinosawa <stibium121@gmail.com>\nYoung Min Kim <y@ylem.kim>\nYoungho Seo <hazivoo@gmail.com>\nYoungjin Choi <cyjin9.yc@gmail.com>\nYoungKi Hong <simon.hong81@gmail.com>\nYoungmin Yoo <youngmin.yoo@samsung.com>\nYoungmin Hong <mjdal0523@gmail.com>\nYoungsoo Choi <kenshin.choi@samsung.com>\nYoungsun Suh <zard17@gmail.com>\nYuan-Pin Yu <yjames@uber.com>\nYuhong Sha <yuhong.sha@samsung.com>\nYuJiang Zhou <zhouyujiang.zyj@alibaba-inc.com>\nYuki Osaki <yuki.osaki7@gmail.com>\nYuki Tsuchiya <Yuki.Tsuchiya@sony.com>\nYuma Takai <tara20070827@gmail.com>\nYumikiyo Osanai <yumios.art@gmail.com>\nYumin Su <yuminsu.hi@gmail.com>\nYunchao He <yunchao.he@intel.com>\nYupei Lin <yplam@yplam.com>\nYupei Wang <perryuwang@tencent.com>\nYuqing Cao <caoyuqing@huawei.com>\nYura Yaroshevich <yura.yaroshevich@gmail.com>\nYuri Gorobets <yuri.gorobets@gmail.com>\nYuriy Taraday <yorik.sar@gmail.com>\nYuta Kasai <kasai.yuta0810@gmail.com>\nYuvanesh Natarajan <yuvanesh.n1@samsung.com>\nZach Bjornson <zbbjornson@gmail.com>\nZachary Capalbo <zach.geek@gmail.com>\nZehan Li <synclzhhans@gmail.com>\nZeno Albisser <zeno.albisser@digia.com>\nZeqin Chen <talonchen@tencent.com>\nZhanbang He <hezhanbang@gmail.com>\nZhang Hao <zhanghao.m@bytedance.com>\nZhang Hao <15686357310a@gmail.com>\nZhao Qin <qzmiss@gmail.com>\nZhaoming Jiang <zhaoming.jiang@intel.com>\nZhaoze Zhou <zhaoze.zhou@partner.samsung.com>\nZheda Chen <zheda.chen@intel.com>\nZheng Chuang <zhengchuangscu@gmail.com>\nZheng Xu <zxu@kobo.com>\nZhengkun Li <zhengkli@amazon.com>\nZhenyu Liang <zhenyu.liang@intel.com>\nZhenyu Shan <zhenyu.shan@intel.com>\nZhibo Wang <zhibo1.wang@intel.com>\nZhifei Fang <facetothefate@gmail.com>\nZhiyuan Ye <zhiyuanye@tencent.com>\nZhongwei Wang <carolwolfking@gmail.com>\nZhou Jun <zhoujun@uniontech.com>\nZhuoyu Qian <zhuoyu.qian@samsung.com>\nZiran Sun <ziran.sun@samsung.com>\nZoltan Czirkos <czirkos.zoltan@gmail.com>\nZoltan Herczeg <zherczeg.u-szeged@partner.samsung.com>\nZoltan Kuscsik <zoltan.kuscsik@linaro.org>\nZoru Lee <donzoru@gmail.com>\nZuckjet <zuckjet@gmail.com>\nZsolt Borbely <zsborbely.u-szeged@partner.samsung.com>\n方觉 (Fang Jue) <fangjue23303@gmail.com>\n迷渡 <justjavac@gmail.com>\n郑苏波 (Super Zheng) <superzheng@tencent.com>\n一丝 (Yisi) <yiorsi@gmail.com>\n# Please DO NOT APPEND here. See comments at the top of the file.\n# END individuals section.\n\n# BEGIN organizations section.\nAccenture <*@accenture.com>\nACCESS CO., LTD. <*@access-company.com>\nAda Logics Ltd. <*@adalogics.com>\nAkamai Inc. <*@akamai.com>\nARM Holdings <*@arm.com>\nBlackBerry Limited <*@blackberry.com>\nBocoup <*@bocoup.com>\nBrave Software Inc. <*@brave.com>\nCanonical Limited <*@canonical.com>\nCloudflare, Inc. <*@cloudflare.com>\nCloudMosa, Inc. <*@cloudmosa.com>\nCode Aurora Forum <*@codeaurora.org>\nCodeWeavers, Inc. <*@codeweavers.com>\nCollabora Limited <*@collabora.com>\nComodo CA Limited CoSMo Software pvt ltd <*@cosmosoftware.io>\nCosium <*@cosium.com>\nDell Technologies Inc. <*@dell.corp-partner.google.com>\nDing (Beijing) Intelligent Technology Co. Ltd <*@dingdao.com>\nDropbox, Inc. <*@dropbox.com>\nDuck Duck Go, Inc. <*@duckduckgo.com>\nEndless Mobile, Inc. <*@endlessm.com>\nEngFlow, Inc. <*@engflow.com>\nEstimote, Inc. <*@estimote.com>\nGoogle Inc. <*@google.com>\nGrammarly, Inc. <*@grammarly.com>\nHere Inc. <*@here.io>\nHewlett-Packard Development Company, L.P. <*@hp.com>\nHyperConnect Inc. <*@hpcnt.com>\nIBM Inc. <*@*.ibm.com>\nIBM Inc. <*@ibm.com>\nIgalia S.L. <*@igalia.com>\nImagination Technologies Limited <*@imagination.corp-partner.google.com>\nImpossible Dreams Network <*@impossibledreams.net>\nIntel Corporation <*@intel.com>\nIsland Technology, Inc. <*@island.io>\nLG Electronics, Inc. <*@lge.com>\nLoongson Technology Corporation Limited. <*@loongson.cn>\nMacadamian <*@macadamian.com>\nMail.ru Group <*@corp.mail.ru>\nMake Positive Provar Limited <*@provartesting.com>\nMediatek <*@mediatek.com>\nMeta Platforms, Inc. <*@fb.com>\nMeta Platforms, Inc. <*@meta.com>\nMeta Platforms, Inc. <*@oculus.com>\nMicrosoft <*@microsoft.com>\nMIPS Technologies, Inc. <*@mips.com>\nMobica Limited <*@mobica.com>\nMozilla Corporation <*@mozilla.com>\nNeverware Inc. <*@neverware.com>\nNIKE, Inc. <*@nike.com>\nNutanix Inc. <*nutanix.com>\nNVIDIA Corporation <*@nvidia.com>\nOpenFin Inc. <*@openfin.co>\nOpera Software ASA <*@opera.com>\nOptical Tone Ltd <*@opticaltone.com>\nPalo Alto Networks, Inc. <*@paloaltonetworks.com>\nPengutronix e.K. <*@pengutronix.de>\nQuality First Software GmbH <*@qf-software.com>\nRakuten Kobo Inc. <*@kobo.com>\nRakuten Kobo Inc. <*@rakuten.com>\nRed Hat Inc. <*@redhat.com>\nSemihalf <*@semihalf.com>\nS57 ApS <*@s57.io>\nSeznam.cz, a.s. <*@firma.seznam.cz>\nSlack Technologies Inc. <*@slack-corp.com>\nSpotify AB <*@spotify.com>\nSynaptics <*@synaptics.com>\nTableau Software <*@tableau.com>\nTalon Cyber Security Ltd. <*@talon-sec.com>\nTeamSpeak Systems GmbH <*@teamspeak.com>\nThe Browser Company <*@thebrowser.company>\nThe Chromium Authors <*@chromium.org>\nThe MathWorks, Inc. <binod.pant@mathworks.com>\nTHEO Technologies <*@theoplayer.com>\nTorchmobile Inc. Upwork <*@cloud.upwork.com>\nVenture 3 Systems LLC <*@venture3systems.com>\nVewd Software AS <*@vewd.com>\nVivaldi Technologies AS <*@vivaldi.com>\nWacom <*@wacom.com>\nWhist Technologies <*@whist.com>\nXperi Corporation <*@xperi.com>\nYandex LLC <*@yandex-team.ru>\nZoho Corporation <*@zohocorp.com>\n# Please DO NOT APPEND here. See comments at the top of the file.\n# END organizations section.\n"
        },
        {
          "name": "BUILD.gn",
          "type": "blob",
          "size": 61.5458984375,
          "content": "# Copyright 2013 The Chromium Authors\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n# This is the root build file for GN. GN will start processing by loading this\n# file, and recursively load all dependencies until all dependencies are either\n# resolved or known not to exist (which will cause the build to fail). So if\n# you add a new build file, there must be some path of dependencies from this\n# file to your new one or GN won't know about it.\n\nimport(\"//build/config/cast.gni\")\nimport(\"//build/config/chromeos/ui_mode.gni\")\nimport(\"//build/config/compiler/compiler.gni\")\nimport(\"//build/config/cronet/config.gni\")\nimport(\"//build/config/dcheck_always_on.gni\")\nimport(\"//build/config/features.gni\")\nimport(\"//build/config/rust.gni\")\nimport(\"//build/config/sanitizers/sanitizers.gni\")\nimport(\"//build/config/ui.gni\")\nimport(\"//build/gn_logs.gni\")\nimport(\"//build/util/generate_wrapper.gni\")\nimport(\"//chrome/enterprise_companion/buildflags.gni\")\nimport(\"//components/enterprise/buildflags/buildflags.gni\")\nimport(\"//components/nacl/features.gni\")\nimport(\"//device/vr/buildflags/buildflags.gni\")\nimport(\"//extensions/buildflags/buildflags.gni\")\nimport(\"//gpu/vulkan/features.gni\")\nimport(\"//media/gpu/args.gni\")\nimport(\"//media/media_options.gni\")\nimport(\"//mojo/public/rust/rust.gni\")\nimport(\"//pdf/features.gni\")\nimport(\"//ppapi/buildflags/buildflags.gni\")\nimport(\"//printing/buildflags/buildflags.gni\")\nimport(\"//remoting/remoting_enable.gni\")\nimport(\"//services/on_device_model/on_device_model.gni\")\nimport(\"//skia/skia.gni\")\nimport(\"//third_party/closure_compiler/compile_js.gni\")\nimport(\"//tools/ipc_fuzzer/ipc_fuzzer.gni\")\nimport(\"//ui/base/ui_features.gni\")\nimport(\"//ui/gl/features.gni\")\nimport(\"//v8/gni/v8.gni\")\n\nif (is_android) {\n  import(\"//build/config/android/config.gni\")\n}\n\nif (is_fuchsia) {\n  import(\"//build/config/fuchsia/generate_runner_scripts.gni\")\n  import(\"//third_party/fuchsia-gn-sdk/src/component.gni\")\n  import(\"//third_party/fuchsia-gn-sdk/src/package.gni\")\n} else {\n  import(\"//chrome/browser/buildflags.gni\")\n}\n\nif (is_ios) {\n  import(\"//build/config/apple/mobile_config.gni\")\n}\n\nif (is_linux) {\n  import(\"build/config/linux/gtk/gtk.gni\")\n}\n\nif (use_blink) {\n  import(\"//v8/gni/snapshot_toolchain.gni\")\n}\n\ndeclare_args() {\n  # A list of extra dependencies to add to the root target. This allows a\n  # checkout to add additional targets without explicitly changing any checked-\n  # in files.\n  root_extra_deps = []\n}\n\nif (is_official_build) {\n  # An official (maximally optimized!) component (optimized for build times)\n  # build doesn't make sense and usually doesn't work.\n  assert(!is_component_build)\n}\n\n# The `gn_all` target is used to list all of the main targets in the build, so\n# that we can figure out which BUILD.gn files to process, following the process\n# described at the top of this file.\n#\n# Because of the way GN works (again, as described above), there may be targets\n# built by `all` that aren't built by `gn_all`. We always want `all` to build,\n# so there's really never a reason you'd want to build `gn_all` instead of\n# `all`, and no tooling should depend directly on this target. Tools should\n# should depend on either an explicit list of targets, or `all`.\n\ngroup(\"gn_all\") {\n  testonly = true\n\n  if (is_cronet_build) {\n    if (is_android) {\n      deps = [ \"//components/cronet/android:cronet_package_android\" ]\n    } else {\n      deps = []\n    }\n  } else {\n    deps = [\n      \"//base:base_perftests\",\n      \"//base:base_unittests\",\n      \"//codelabs\",\n      \"//components:components_unittests\",\n      \"//components/gwp_asan:gwp_asan_unittests\",\n      \"//infra/orchestrator:orchestrator_all\",\n      \"//net:net_unittests\",\n      \"//sandbox:sandbox_unittests\",\n      \"//services:services_unittests\",\n      \"//services/service_manager/public/cpp\",\n      \"//skia:skia_unittests\",\n      \"//sql:sql_unittests\",\n      \"//testing/libfuzzer/tests\",\n      \"//third_party/angle/src/tests:angle_end2end_tests\",\n      \"//third_party/angle/src/tests:angle_unittests\",\n      \"//third_party/angle/src/tests:angle_white_box_tests\",\n      \"//third_party/distributed_point_functions/shim:distributed_point_functions_shim_unittests\",\n      \"//third_party/flatbuffers:flatbuffers_unittests\",\n      \"//third_party/highway:highway_tests\",\n      \"//third_party/liburlpattern:liburlpattern_unittests\",\n      \"//third_party/rapidhash:rapidhash_fuzztests\",\n      \"//tools/binary_size:binary_size_trybot_py\",\n      \"//tools/ipc_fuzzer:ipc_fuzzer_all\",\n      \"//tools/metrics:metrics_metadata\",\n      \"//ui/base:ui_base_unittests\",\n      \"//ui/gfx:gfx_unittests\",\n      \"//ui/tests:ui_unittests\",\n      \"//url:url_unittests\",\n    ]\n\n    if (current_cpu == \"arm64\" && is_android && host_os == \"linux\") {\n      deps += [\n        \"//components/allocation_recorder/tools:dump_allocation_recorder_data\",\n      ]\n    }\n\n    if (!is_component_build) {\n      deps += [ \"//third_party/abseil-cpp:absl_tests\" ]\n    }\n\n    if (is_chromeos_ash && enable_js_type_check) {\n      deps += [ \":webui_closure_compile\" ]\n    }\n\n    if (!is_android && !is_castos) {\n      deps += [\n        \"//crypto:crypto_unittests\",\n        \"//google_apis/gcm:gcm_unit_tests\",\n      ]\n    }\n\n    if (!is_ios && !is_android && !is_castos) {\n      if (!is_fuchsia) {\n        deps += [\n          \"//chrome\",\n          \"//chrome/browser/ui/actions:dump_actions\",\n          \"//chrome/browser/ui/color:dump_colors\",\n          \"//chrome/test:browser_tests\",\n        ]\n      }\n      deps += [\n        \"//components/subresource_filter/tools:subresource_filter_tools\",\n        \"//components/zucchini:zucchini\",\n        \"//net:hpack_example_generator\",\n        \"//third_party/spirv-tools/src:SPIRV-Tools\",\n        \"//tools/aggregation_service:aggregation_service_tool\",\n        \"//tools/perf/clear_system_cache\",\n        \"//tools/polymer:polymer_tools_python_unittests\",\n        \"//tools/privacy_budget:privacy_budget_tools\",\n        \"//ui/accessibility/extensions:extensions\",\n      ]\n    }\n\n    if (!is_castos && !is_fuchsia) {\n      deps += [ \"//chrome/installer\" ]\n    }\n\n    if (!is_fuchsia && enable_updater) {\n      deps += [ \"//chrome/updater\" ]\n    }\n\n    if (enable_enterprise_companion) {\n      deps += [ \"//chrome/enterprise_companion\" ]\n    }\n\n    if (enable_ppapi) {\n      deps += [\n        \"//ppapi:ppapi_unittests\",\n        \"//ppapi/examples\",\n      ]\n    }\n\n    if (!is_ios && !is_castos) {\n      if (!is_fuchsia) {\n        deps += [ \"//chrome/test:unit_tests\" ]\n      }\n      deps += [ \"//ui/accessibility:accessibility_unittests\" ]\n    }\n\n    if (use_blink) {\n      deps += [\n        \"//cc:cc_unittests\",\n        \"//components/policy:policy_templates\",\n        \"//components/url_formatter/tools:format_url\",\n        \"//components/viz:viz_perftests\",\n        \"//components/viz:viz_unittests\",\n        \"//content/browser/interest_group/tools:adjustable_auction\",\n        \"//content/shell:content_shell\",\n        \"//content/test:content_browsertests\",\n        \"//content/test:content_unittests\",\n        \"//device:device_unittests\",\n        \"//gpu:gpu_benchmark\",\n        \"//gpu:gpu_unittests\",\n        \"//media:media_unittests\",\n        \"//media/capture:capture_unittests\",\n        \"//media/cast:cast_unittests\",\n        \"//media/midi:midi_unittests\",\n        \"//media/mojo:media_mojo_unittests\",\n        \"//mojo\",\n        \"//mojo:mojo_unittests\",\n        \"//storage:storage_unittests\",\n        \"//third_party/blink/common:blink_common_unittests\",\n        \"//third_party/blink/renderer/controller:blink_unittests\",\n        \"//third_party/blink/renderer/platform:blink_platform_unittests\",\n        \"//third_party/blink/renderer/platform/heap:blink_heap_unittests\",\n        \"//third_party/blink/renderer/platform/wtf:wtf_unittests\",\n        \"//third_party/libjingle_xmpp:libjingle_xmpp_unittests\",\n        \"//tools/imagediff\",\n        \"//tools/memory:all\",\n        \"//ui/display:display_unittests\",\n        \"//ui/gl:gl_unittests\",\n        \"//ui/latency:latency_unittests\",\n        \"//ui/native_theme:native_theme_unittests\",\n        \"//ui/touch_selection:ui_touch_selection_unittests\",\n        \"//v8:gn_all\",\n      ]\n\n      if (!v8_use_external_startup_data) {\n        deps += [ \"//v8:v8_snapshot\" ]\n      }\n    }\n\n    if (!is_ios) {\n      deps += [\n        \":chromedriver_group\",\n        \"//components:components_browsertests\",\n        \"//ipc:ipc_tests\",\n        \"//net:net_perftests\",\n        \"//ui/events:events_unittests\",\n        \"//url/ipc:url_ipc_unittests\",\n      ]\n    }\n\n    if (!is_ios && !is_android) {\n      deps += [ \"//components/viz/demo:viz_demo\" ]\n    }\n\n    if (!is_ios) {\n      deps += [\n        \"//google_apis/gcm:mcs_probe\",\n        \"//third_party/catapult/telemetry:bitmaptools($host_toolchain)\",\n      ]\n      if (!is_android) {\n        if (!is_castos && !is_fuchsia) {\n          deps += [ \"//chrome/test:telemetry_perf_unittests\" ]\n        }\n      } else {\n        import(\"//tools/perf/chrome_telemetry_build/android_browser_types.gni\")\n        foreach(_target_suffix, telemetry_android_browser_target_suffixes) {\n          deps += [ \"//chrome/test:telemetry_perf_unittests${_target_suffix}\" ]\n        }\n      }\n    } else {\n      deps += [\n        \"//ios:all\",\n        \"//third_party/crashpad/crashpad:crashpad_tests\",\n      ]\n    }\n\n    if (is_fuchsia) {\n      # Add targets that only exist on Fuchsia.\n      deps += [\n        \":d8_fuchsia\",\n        \"//build/fuchsia/cipd\",\n        \"//fuchsia_web:gn_all\",\n        \"//tools/fuchsia/size_tests:fuchsia_sizes\",\n\n        # Ensure this target continues to build.\n        \"//chromecast/bindings:bindings_manager_fuchsia\",\n      ]\n    }\n\n    deps += root_extra_deps\n\n    if (enable_printing || enable_printing_tests) {\n      deps += [ \"//printing:printing_unittests\" ]\n    }\n\n    if (enable_extensions) {\n      deps += [\n        \"//extensions:extensions_browsertests\",\n        \"//extensions:extensions_unittests\",\n        \"//extensions/browser/api/declarative_net_request/filter_list_converter\",\n        \"//extensions/shell:app_shell_unittests\",\n      ]\n    }\n\n    if (enable_ml_internal) {\n      deps +=\n          [ \"//components/optimization_guide/internal:ondevice_model_example\" ]\n    }\n\n    if (enable_pdf) {\n      deps += [\n        \"//pdf/pdfium/fuzzers\",\n        \"//third_party/pdfium/testing:pdfium_test\",\n      ]\n    }\n\n    if (enable_remoting) {\n      deps += [ \"//remoting:remoting_all\" ]\n    }\n\n    if (toolkit_views) {\n      deps += [\n        \"//ui/views:views_unittests\",\n        \"//ui/views/examples:views_examples\",\n        \"//ui/views/examples:views_examples_unittests\",\n        \"//ui/views/examples:views_examples_with_content\",\n      ]\n    }\n\n    if (enterprise_watermark) {\n      deps += [ \"//chrome/browser/enterprise/watermark:watermark_app\" ]\n    }\n\n    if (use_aura) {\n      deps += [\n        \"//ui/aura:aura_demo\",\n        \"//ui/aura:aura_unittests\",\n        \"//ui/wm:wm_unittests\",\n      ]\n    }\n\n    if (use_aura || is_mac) {\n      deps += [ \"//ui/webui/examples:webui_examples\" ]\n    }\n\n    if (use_ozone) {\n      deps += [\n        \"//ui/ozone\",\n        \"//ui/ozone:unittests\",\n      ]\n      if (!is_fuchsia) {\n        deps += [ \"//ui/ozone/demo\" ]\n      }\n    }\n\n    if (is_win) {\n      deps += [\n        \"//chrome/credential_provider\",\n        \"//chrome/credential_provider/test:gcp_unittests\",\n      ]\n\n      if (enable_platform_experience) {\n        deps += [\n          \"//chrome/browser/platform_experience/win:platform_experience_helper\",\n        ]\n      }\n    }\n\n    if (is_mac) {\n      deps += [\n        \"//chrome/installer/gcapi_mac:gcapi_example\",\n        \"//tools/mac\",\n      ]\n    }\n\n    # Allow building md5sum tool for other OSes (android is added below).\n    # For Windows, see: crbug.com/1090428.\n    # TODO(cavalcantii): move it out of 'android' folder.\n    if (!is_win) {\n      deps += [ \"//tools/android/md5sum\" ]\n    }\n\n    if (is_android) {\n      deps += [\n        \"//base:base_junit_tests\",\n        \"//base/android/linker:chromium_android_linker\",\n        \"//build/android/gyp/test:hello_world\",\n        \"//build/android/stacktrace:java_deobfuscate\",\n        \"//build/config/android/test/proto:test_build_protos\",\n        \"//build/private_code_test:private_paths\",\n        \"//chrome/android/monochrome:monochrome_public_apk_checker\",\n        \"//chrome/android/webapk/shell_apk:webapk\",\n        \"//chrome/android/webapk/shell_apk/prepare_upload_dir:prepare_webapk_shell_upload_dir\",\n        \"//chrome/test:android_browsertests\",\n        \"//components:components_junit_tests\",\n        \"//content/public/android:content_junit_tests\",\n        \"//content/shell/android:content_shell_apk\",\n        \"//device:device_junit_tests\",\n        \"//media/gpu:video_decode_accelerator_unittest\",\n        \"//net/android:net_junit_tests\",\n        \"//services:services_junit_tests\",\n        \"//testing/android/junit:junit_unit_tests\",\n        \"//third_party/android_build_tools/lint:custom_lint_java\",\n        \"//third_party/androidx_javascriptengine\",\n        \"//third_party/catapult/devil\",\n        \"//third_party/jni_zero:jni_zero_tests\",\n        \"//third_party/r8:custom_d8_java\",\n        \"//tools/android:android_tools\",\n        \"//tools/android:memconsumer\",\n        \"//tools/android:push_apps_to_background\",\n        \"//tools/android/audio_focus_grabber:audio_focus_grabber_apk\",\n        \"//tools/android/customtabs_benchmark:customtabs_benchmark_apk\",\n        \"//tools/android/kerberos/SpnegoAuthenticator:spnego_authenticator_apk\",\n        \"//tools/pgo:generate_profile_android_trichrome_chrome_bundle\",\n        \"//ui:ui_junit_tests\",\n      ]\n      deps -= [\n        \"//net:net_perftests\",\n        \"//url:url_unittests\",\n      ]\n\n      if (!is_cast_android) {\n        deps += [\n          \"//android_webview:empty_group\",\n          \"//android_webview/test\",\n          \"//android_webview/tools/automated_ui_tests:webview_ui_test_app_test_apk\",\n          \"//android_webview/tools/captured_sites_tests:captured_sites_test_app\",\n          \"//android_webview/tools/sdk_sandbox\",\n          \"//android_webview/tools/system_webview_shell\",\n          \"//chrome/android:chrome_junit_tests\",\n          \"//chrome/android:chrome_public_apk\",\n          \"//chrome/android:chrome_public_test_apk\",\n          \"//chrome/android:chrome_public_unit_test_apk\",\n          \"//chrome/browser/android/examples/custom_tabs_client:custom_tabs_client_example_apk\",\n          \"//chrome/browser/android/examples/partner_browser_customizations_provider:partner_browser_customizations_example_apk\",\n          \"//content/shell/android:content_shell_test_apk\",\n        ]\n      }\n\n      if (enable_chrome_android_internal) {\n        deps += [ \"//clank\" ]\n      }\n    }\n\n    if (is_linux || is_chromeos || is_android) {\n      deps += [\n        \"//third_party/breakpad:breakpad_unittests\",\n        \"//third_party/breakpad:core-2-minidump\",\n        \"//third_party/breakpad:generate_test_dump\",\n        \"//third_party/breakpad:minidump-2-core\",\n        \"//tools/dump_process_memory:dump_process\",\n      ]\n    }\n\n    if (is_chromeos_ash) {\n      deps += [\n        \"//ash:ash_unittests\",\n        \"//ash/components:ash_components_unittests\",\n        \"//ash/keyboard/ui:keyboard_unittests\",\n        \"//ash/webui:ash_webui_unittests\",\n        \"//chrome/browser/ash/child_accounts/time_limit_consistency_test:usage_time_limit_unittests\",\n        \"//chrome/browser/metrics/perf:profile_provider_unittest\",\n        \"//chromeos/ash/components/proximity_auth:proximity_auth_unittests\",\n        \"//chromeos/components:chromeos_components_unittests\",\n        \"//components/exo/wayland:wayland_client_compatibility_tests\",\n        \"//components/session_manager/core\",\n        \"//third_party/shell-encryption:shell_encryption_unittests\",\n        \"//ui/chromeos:ui_chromeos_unittests\",\n      ]\n    }\n\n    if (is_chromeos) {\n      deps += [ \"//chromeos:chromeos_unittests\" ]\n    }\n\n    if (is_chromeos_ash || is_mac || is_win) {\n      deps += [\n        \"//rlz:rlz_id\",\n        \"//rlz:rlz_lib\",\n        \"//rlz:rlz_unittests\",\n      ]\n    }\n\n    if (is_linux || is_chromeos) {\n      # The following are definitely linux-only.\n      deps += [\n        \"//net:disk_cache_memory_test\",\n        \"//net:quic_client\",\n        \"//net:quic_server\",\n        \"//sandbox/linux:chrome_sandbox\",\n        \"//sandbox/linux:sandbox_linux_unittests\",\n      ]\n      if (!is_clang) {\n        deps += [ \"//testing:empty_main\" ]\n      }\n\n      if (!is_castos) {\n        deps += [ \"//chrome:xdg_mime\" ]\n      }\n\n      if (use_dbus) {\n        deps += [\n          \"//dbus:dbus_test_server\",\n          \"//dbus:dbus_unittests\",\n        ]\n      }\n\n      if (is_chrome_branded && is_official_build) {\n        # TODO(dpranke): add the linux_dump_symbols flag?\n        deps += [ \"//chrome:linux_symbols\" ]\n      }\n    }\n\n    if (is_ios || is_win || is_linux || is_chromeos_lacros || is_fuchsia) {\n      deps += [\n        \"//base:base_i18n_perftests\",\n        \"//google_apis:google_apis_unittests\",\n      ]\n    }\n\n    if ((is_win || is_mac || is_linux || is_chromeos || is_fuchsia) &&\n        (target_cpu == \"x86\" || target_cpu == \"x64\")) {\n      deps += [\n        \"//third_party/swiftshader/src/Vulkan:icd_file\",\n        \"//third_party/swiftshader/src/Vulkan:swiftshader_libvulkan\",\n      ]\n    }\n\n    # TODO(GYP): Figure out which of these should (and can) build\n    # for Chrome OS and iOS (without blink).\n    if (!is_chromeos_ash && use_blink) {\n      deps += [\n        \"//cc:cc_perftests\",\n        \"//device:device_unittests\",\n        \"//gin:gin_shell\",\n        \"//gin:gin_unittests\",\n        \"//gpu:command_buffer_perftests\",\n        \"//gpu:gl_tests\",\n        \"//gpu:gpu_perftests\",\n        \"//media:media_perftests\",\n        \"//third_party/libphonenumber:libphonenumber_unittests\",\n        \"//ui/compositor:compositor_unittests\",\n      ]\n\n      if (!is_ios) {\n        deps += [\n          \"//base:build_utf8_validator_tables\",\n          \"//base:check_example\",\n          \"//components:components_perftests\",\n          \"//ipc:ipc_perftests\",\n          \"//net:dump_cache\",\n        ]\n      }\n\n      if (!is_android && !is_castos && !is_ios && !is_fuchsia) {\n        deps += [\n          \"//chrome/test:load_library_perf_tests\",\n          \"//chrome/test:sync_performance_tests\",\n        ]\n      }\n\n      if (!is_android && !is_ios) {\n        deps += [\n          \"//net:crash_cache\",\n          \"//net:net_watcher\",  # TODO(GYP): This should be conditional on\n                                # use_v8_in_net\n          \"//net:run_testserver\",\n          \"//net:stress_cache\",\n          \"//net:tld_cleanup\",\n          \"//third_party/leveldatabase:env_chromium_unittests\",\n          \"//third_party/libaddressinput:libaddressinput_unittests\",\n        ]\n      }\n\n      if (enable_extensions) {\n        deps += [ \"//extensions/shell:app_shell\" ]\n      }\n\n      # TODO(https://crbug.com/1299021): These dependencies might be\n      # redundant given that we were able to disable them, apparently without\n      # negative consequences, for the ARM32-NaCl-on-ARM64 case.\n      if (enable_nacl) {\n        if (target_cpu != \"arm64\") {\n          deps += [ \"//components/nacl/loader:nacl_loader_unittests\" ]\n        }\n\n        if (is_linux || is_chromeos) {\n          # TODO(dpranke): Figure out what platforms should actually have this.\n          deps += [ \"//components/nacl/loader:nacl_helper\" ]\n        }\n      }\n\n      if (media_use_ffmpeg && !is_android) {\n        deps += [ \"//media:ffmpeg_regression_tests\" ]\n      }\n    }\n\n    if (enable_ppapi) {\n      deps += [\n        \"//ppapi:pepper_hash_for_uma\",\n        \"//ppapi:ppapi_perftests\",\n      ]\n    }\n\n    if (is_android || is_linux || is_chromeos_lacros) {\n      deps += [\n        \"//components/network_hints/browser\",\n        \"//content/public/app\",\n        \"//mojo:mojo_perftests\",\n        \"//services/service_manager/public/cpp\",\n        \"//testing/gmock:gmock_main\",\n        \"//third_party/breakpad:dump_syms($host_system_allocator_toolchain)\",\n        \"//third_party/breakpad:microdump_stackwalk($host_system_allocator_toolchain)\",\n        \"//third_party/breakpad:minidump_dump($host_system_allocator_toolchain)\",\n        \"//third_party/breakpad:minidump_stackwalk($host_system_allocator_toolchain)\",\n      ]\n    }\n\n    if (is_linux || is_chromeos_lacros) {\n      deps += [\n        \"//skia:filter_fuzz_stub\",\n        \"//skia:image_operations_bench\",\n        \"//ui/snapshot:snapshot_unittests\",\n      ]\n\n      if (!is_castos) {\n        deps += [ \"//chrome/test:chrome_app_unittests\" ]\n      }\n\n      if (!is_debug && !is_component_build && !is_castos) {\n        deps += [ \"//chrome/tools/service_discovery_sniffer\" ]\n      }\n    }\n\n    if (is_mac) {\n      deps += [\n        \"//third_party/breakpad:dump_syms($host_system_allocator_toolchain)\",\n\n        # The following are accessibility API tools.\n        \"//tools/accessibility/inspect:ax_dump_events\",\n        \"//tools/accessibility/inspect:ax_dump_tree\",\n      ]\n      deps -= [\n        # Mojo in GN contains some things which are never compiled in GYP on Mac,\n        # so compilation fails on Mac. They need porting.\n        \"//mojo\",\n      ]\n    }\n\n    if (is_win) {\n      deps += [\n        \"//base:pe_image_test\",\n        \"//chrome/chrome_elf:chrome_elf_unittests\",\n        \"//chrome/chrome_elf:dll_hash_main\",\n        \"//chrome/elevation_service:elevation_service_unittests\",\n        \"//chrome/install_static:install_static_unittests\",\n        \"//chrome/installer/gcapi\",\n        \"//chrome/installer/setup:setup_unittests\",\n        \"//chrome/notification_helper:notification_helper_unittests\",\n        \"//chrome/test:delayloads_unittests\",\n        \"//components/wifi:wifi_test\",\n        \"//components/zucchini\",\n        \"//net:quic_client\",\n        \"//net:quic_server\",\n        \"//sandbox/win:sbox_integration_tests\",\n        \"//sandbox/win:sbox_unittests\",\n        \"//sandbox/win:sbox_validation_tests\",\n        \"//testing/gtest:gtest_main\",\n\n        # The following two are accessibility API debugging tools.\n        \"//tools/accessibility/inspect:ax_dump_events\",\n        \"//tools/accessibility/inspect:ax_dump_tree\",\n        \"//tools/win/chromeexts:chromeexts\",\n      ]\n\n      # TODO(thakis): Enable this in cross builds, https://crbug.com/799827\n      if (!(is_component_build && is_debug && target_cpu == \"x86\") &&\n          host_os == \"win\") {\n        deps += [ \"//chrome/test/mini_installer:mini_installer_tests\" ]\n      }\n    }\n\n    if (!is_fuchsia) {\n      # The official builders use this binary from the default toolchain's\n      # output directory after building in order to upload the symbols of that\n      # binary. They build the binary like `ninja symupload` which requires the\n      # target to be a dependency in the default_toolchain from `gn_all` for the\n      # name to resolve.\n      deps += [ \"//third_party/breakpad:symupload\" ]\n    }\n    if (is_mac && host_cpu == \"arm64\") {\n      # TODO(crbug.com/349268750): This alias exists because the official Mac\n      # arm64 builders (which cross-build the x64 binaries) use the hardcoded\n      # path of the `$host_toolchain/symupload` to build and run the symupload\n      # binary. And the same recipes are used on all branches!! So we would break\n      # the stable branch builders by changing the recipe to build and run the\n      # binary from the root_build_dir.\n      #\n      # Once this code is in stable, we can land the following CLs to change how\n      # symupload is built and run on Mac arm64 official builders, and then this\n      # alias can be removed.\n      # Build: https://chrome-internal-review.googlesource.com/c/chrome/src-internal/+/7430844\n      # Run: https://chrome-internal-review.googlesource.com/c/chrome/tools/release/scripts/+/7430843\n      deps += [ \"//third_party/breakpad:symupload($host_toolchain)\" ]\n    }\n\n    if (is_cast_android || is_castos || (is_fuchsia && enable_cast_receiver)) {\n      deps += [ \"//chromecast:cast_test_lists\" ]\n    }\n\n    if (is_cast_android || is_castos) {\n      deps += [\n        \"//chromecast:cast_shell\",\n        \"//chromecast/cast_core:core_runtime_simple\",\n      ]\n    }\n\n    if (is_mac || is_win || is_android || is_linux || is_chromeos) {\n      deps += [\n        \"//third_party/crashpad/crashpad:crashpad_tests\",\n        \"//third_party/crashpad/crashpad/handler:crashpad_handler\",\n        \"//third_party/crashpad/crashpad/tools:crashpad_database_util\",\n      ]\n    }\n\n    if (enable_message_center) {\n      deps += [ \"//ui/message_center:message_center_unittests\" ]\n    }\n\n    if (!is_android && !is_ios) {\n      deps += [ \"//content/browser/bluetooth/tools:bluetooth_metrics_hash\" ]\n    }\n\n    if (is_win || is_linux || is_chromeos) {\n      deps += [ \"//mojo\" ]\n    }\n\n    if (is_mac || is_linux || is_chromeos || is_android || is_fuchsia) {\n      deps += [ \"//third_party/perfetto:all\" ]\n    }\n\n    if (is_win || is_mac || is_linux || is_chromeos) {\n      deps += [ \"//third_party/sqlite:sqlite_shell\" ]\n    }\n\n    if ((is_linux && !is_castos) || is_chromeos_lacros || is_fuchsia) {\n      # TODO(https://crbug.com/1329673): Figure out if this should be in gn_all\n      # and how cross-platform this is.\n      deps +=\n          [ \"//components/services/filesystem:filesystem_service_unittests\" ]\n    }\n\n    if ((is_linux && !is_castos) || is_chromeos_lacros) {\n      # TODO(https://crbug.com/1329673): Figure out if any of these should be in\n      # gn_all and figure out how cross-platform they are.\n      deps += [\n        \"//chrome/installer/util:strings\",\n        \"//chrome/tools/convert_dict\",\n        \"//components/constrained_window:unit_tests\",\n        \"//components/metrics:serialization\",\n        \"//components/sessions:unit_tests\",\n        \"//storage/browser:dump_file_system\",\n        \"//third_party/angle:libANGLE\",\n        \"//third_party/angle:libEGL\",\n        \"//third_party/angle:libGLESv2\",\n        \"//third_party/leveldatabase:leveldb_test_targets\",\n        \"//third_party/libjpeg_turbo:simd\",\n        \"//third_party/opus:opus_compare\",\n        \"//third_party/opus:opus_demo\",\n        \"//third_party/opus:test_opus_api\",\n        \"//third_party/opus:test_opus_decode\",\n        \"//third_party/opus:test_opus_encode\",\n        \"//third_party/opus:test_opus_padding\",\n        \"//ui/display/types\",\n        \"//ui/shell_dialogs:shell_dialogs_unittests\",\n      ]\n\n      if (target_cpu == \"x86\" || target_cpu == \"x64\") {\n        if (!is_android) {\n          deps += [ \"//chrome/test:load_library_perf_tests\" ]\n        }\n        deps += [ \"//third_party/libjpeg_turbo:simd_asm\" ]\n      }\n      if ((is_linux || is_chromeos) && current_toolchain == host_toolchain) {\n        deps += [ \"//v8:v8_shell\" ]\n      }\n    }\n\n    if ((is_linux && !is_castos) || is_chromeos ||\n        ((is_win || is_mac) && use_fuzzing_engine)) {\n      deps += [\n        \"//testing/libfuzzer/fuzzers\",\n        \"//testing/libfuzzer/research\",\n        \"//third_party/freetype-testing:fuzzers\",\n        \"//third_party/grpc:fuzzers\",\n        \"//third_party/icu/fuzzers\",\n        \"//third_party/ukey2/fuzzers\",\n        \"//third_party/zlib/contrib/tests/fuzzers\",\n      ]\n\n      if (is_chromeos_ash) {\n        deps += [ \"//chrome/services/ipp_parser/public/cpp:fuzzers\" ]\n      }\n    }\n\n    # TODO(https://crbug.com/1299021): Remove the special case for arm64.\n    if (enable_nacl && target_cpu != \"arm64\") {\n      deps += [ \"//native_client_sdk/src:nacl_core_sdk\" ]\n    }\n\n    if (((is_linux || is_chromeos) && use_ozone) || is_fuchsia) {\n      deps += [\n        \"//headless:headless_non_renderer\",\n        \"//headless:headless_tests\",\n      ]\n    }\n\n    if (enable_vr) {\n      deps += [\n        \"//chrome/browser/vr:vr_common_perftests\",\n        \"//chrome/browser/vr:vr_common_unittests\",\n      ]\n      if (!is_android) {\n        deps += [ \"//tools/perf/contrib/vr_benchmarks:vr_perf_tests\" ]\n      } else {\n        deps += [ \"//chrome/browser/android/vr:vr_android_unittests\" ]\n        import(\"//tools/perf/chrome_telemetry_build/android_browser_types.gni\")\n        foreach(_target_suffix, telemetry_android_browser_target_suffixes) {\n          deps += [\n            \"//tools/perf/contrib/vr_benchmarks:vr_perf_tests${_target_suffix}\",\n          ]\n        }\n      }\n    }\n\n    if (use_atk) {\n      deps += [\n        \"//tools/accessibility/inspect:ax_dump_events\",\n        \"//tools/accessibility/inspect:ax_dump_tree\",\n      ]\n    }\n\n    if (build_dawn_tests) {\n      deps += [\n        \"//third_party/dawn/src/dawn/fuzzers:fuzzers\",\n        \"//third_party/dawn/src/dawn/tests:dawn_end2end_tests\",\n        \"//third_party/dawn/src/dawn/tests:dawn_unittests\",\n        \"//third_party/dawn/src/tint:fuzzers\",\n        \"//third_party/dawn/src/tint:tests\",\n      ]\n    }\n\n    # PFFFT.\n    deps += [\n      \"//third_party/pffft:fuzzers\",\n      \"//third_party/pffft:pffft_benchmark\",\n      \"//third_party/pffft:pffft_unittest\",\n    ]\n\n    # Rust build targets.\n    if (enable_rust) {\n      deps += [ \":all_rust\" ]\n    }\n\n    if (!is_android && !is_ios) {\n      deps += [ \"//components/cronet:cronet_tests\" ]\n    }\n  }\n\n  if (is_chrome_for_testing) {\n    deps += [ \"//chrome/browser/chrome_for_testing:chrome_for_testing\" ]\n  }\n\n  if (checkout_src_internal) {\n    deps += [ \"//internal:all\" ]\n  }\n}\n\n# All Rust targets. This is provided for convenience while developing Rust to\n# e.g. test build config or toolchain changes.\ngroup(\"all_rust\") {\n  testonly = true\n\n  deps = [\n    \":rust_build_tests\",\n    \"//base:base_unittests\",  # There is rust stuff in here.\n    \"//testing/rust_gtest_interop:rust_gtest_interop_unittests\",\n    \"//third_party/cloud_authenticator/processor\",\n  ]\n\n  if (enable_rust_mojo) {\n    deps += [\n      \"//mojo/public/rust:mojo_rust\",\n      \"//mojo/public/rust:mojo_rust_integration_unittests\",\n      \"//mojo/public/rust:mojo_rust_unittests\",\n    ]\n  }\n  if (enable_rust_png && !is_cronet_build) {\n    deps += [ \"//skia\" ]\n  }\n}\n\n# This group exists to give targets for the waterfall to refer to.\ngroup(\"rust_build_tests\") {\n  testonly = true\n  deps = [ \"//build/rust/tests\" ]\n}\n\n# TODO(https://crbug.com/1112776): ensure remoting is functional on Linux builds with\n# other than X11 Ozone backends.\nif (enable_remoting && ((is_linux && ozone_platform_x11) ||\n                        ((is_chromeos || is_win) && !use_ozone))) {\n  # On CQ, run the Traffic Annotation Auditor when a change affects one of these\n  # targets.\n  group(\"traffic_annotation_auditor_dependencies\") {\n    deps = [\n      \"//chrome:chrome\",\n      \"//remoting/host:host\",\n      \"//tools/traffic_annotation:annotations_xml\",\n    ]\n    if (enable_enterprise_companion) {\n      deps += [ \"//chrome/enterprise_companion\" ]\n    }\n  }\n}\n\nif (is_chromeos_ash) {\n  group(\"traffic_annotation_auditor_dependencies\") {\n    deps = [\n      \"//chrome\",\n      \"//chromeos\",\n      \"//tools/traffic_annotation:annotations_xml\",\n    ]\n  }\n}\n\nif (is_android && !is_cronet_build) {\n  # On CQ, run the Traffic Annotation Auditor when a change affects one of these\n  # targets.\n  group(\"traffic_annotation_auditor_dependencies\") {\n    deps = [\n      \"//chrome/android:chrome_public_apk\",\n      \"//tools/traffic_annotation:annotations_xml\",\n    ]\n  }\n}\n\nif (is_fuchsia) {\n  # TODO(https://crbug.com/731217): This can't practically be in //v8 without\n  # duplicating all the Fuchsia running infrastructure there.\n  fuchsia_component(\"d8_component\") {\n    testonly = true\n    manifest = \"//v8/gni/v8.cml\"\n    data_deps = [ \"//v8:d8\" ]\n  }\n  fuchsia_package(\"d8_pkg\") {\n    testonly = true\n    package_name = \"d8\"\n    deps = [ \":d8_component\" ]\n  }\n  fuchsia_package_installer(\"d8_fuchsia\") {\n    testonly = true\n    package = \":d8_pkg\"\n    package_name = \"d8\"\n  }\n}\n\n# TODO(GYP_GONE): Figure out if we really need this target or if there's\n# some better way to specify things.\nif (is_win) {\n  group(\"chrome_official_builder_no_unittests\") {\n    deps = [\n      \"//chrome/common/win:eventlog_provider\",\n      \"//chrome/credential_provider\",\n      \"//chrome/enterprise_companion:enterprise_companion_zip\",\n      \"//chrome/installer/gcapi\",\n      \"//chrome/installer/mini_installer\",\n      \"//chrome/updater/win:updater_zip\",\n      \"//components/policy:pack_policy_templates\",\n      \"//components/zucchini\",\n      \"//components/zucchini:zucchini64\",\n      \"//third_party/hyphenation-patterns\",\n      \"//tools/metrics:metrics_metadata\",\n    ]\n\n    if (is_chrome_branded) {\n      deps += [ \"//remoting/host:remoting_host_installation\" ]\n    }\n    if (enable_platform_experience) {\n      deps += [\n        \"//chrome/browser/platform_experience/win:platform_experience_helper\",\n      ]\n    }\n  }\n\n  group(\"chrome_official_builder\") {\n    testonly = true\n\n    deps = [\n      \":blink_wpt_tests\",\n      \":chrome_official_builder_no_unittests\",\n      \"//base:base_unittests\",\n      \"//chrome/test:browser_tests\",\n      \"//chrome/test:interactive_ui_tests\",\n      \"//ipc:ipc_tests\",\n      \"//media:media_unittests\",\n      \"//media/midi:midi_unittests\",\n      \"//net:net_unittests\",\n      \"//sql:sql_unittests\",\n      \"//third_party/breakpad:symupload\",\n      \"//ui/base:ui_base_unittests\",\n      \"//ui/gfx:gfx_unittests\",\n      \"//ui/touch_selection:ui_touch_selection_unittests\",\n      \"//ui/views:views_unittests\",\n      \"//url:url_unittests\",\n    ]\n\n    if (enable_printing || enable_printing_tests) {\n      deps += [ \"//printing:printing_unittests\" ]\n    }\n  }\n}\n\nif (is_chromeos_ash) {\n  # This group is used to collect all targets used when verifying a new version\n  # of Chrome for Chrome OS.\n  group(\"chromiumos_preflight\") {\n    testonly = true\n    data_deps = [\n      \"//chrome\",\n      \"//chrome/test/chromedriver:chromedriver_server\",\n      \"//components/chromeos_camera:jpeg_decode_accelerator_unittest\",\n      \"//components/exo/wayland:wayland_client_integration_tests\",\n      \"//components/exo/wayland:wayland_client_perftests\",\n      \"//components/exo/wayland:wayland_client_tests\",\n      \"//components/exo/wayland:wayland_hdr_client\",\n      \"//components/policy/test_support:fake_dmserver\",\n      \"//media:media_unittests\",\n      \"//media/capture:capture_unittests\",\n      \"//sandbox/linux:chrome_sandbox\",\n      \"//sandbox/linux:sandbox_linux_unittests\",\n      \"//services/screen_ai:screen_ai_ocr_perf_test\",\n      \"//third_party/breakpad:minidump_stackwalk($host_system_allocator_toolchain)\",\n      \"//third_party/dawn/src/dawn/tests:dawn_end2end_tests\",\n      \"//third_party/dawn/src/dawn/tests:dawn_unittests\",\n      \"//ui/ozone:ozone_integration_tests\",\n\n      # Blocked on https://github.com/catapult-project/catapult/issues/2297\n      #\"//third_party/catapult/telemetry:bitmaptools\",\n      \"//tools/perf/clear_system_cache\",\n      \"//ui/ozone/gl:ozone_gl_unittests\",\n    ]\n\n    if (enable_ppapi) {\n      data_deps += [ \"//ppapi/examples/video_decode\" ]\n    }\n\n    if (use_v4l2_codec || use_vaapi) {\n      data_deps += [\n        \"//components/chromeos_camera:jpeg_encode_accelerator_unittest\",\n        \"//media/gpu/chromeos:image_processor_test\",\n        \"//media/gpu/test/:video_decode_accelerator_perf_tests\",\n        \"//media/gpu/test/:video_decode_accelerator_tests\",\n        \"//media/gpu/test/:video_encode_accelerator_perf_tests\",\n        \"//media/gpu/test/:video_encode_accelerator_tests\",\n      ]\n      if (use_vaapi) {\n        data_deps += [\n          \"//media/gpu/vaapi:decode_test\",\n          \"//media/gpu/vaapi:vaapi_unittest\",\n          \"//media/gpu/vaapi/test/fake_libva_driver:fake_libva_driver_unittest\",\n        ]\n      }\n      if (use_v4l2_codec) {\n        data_deps += [\n          \"//media/gpu/chromeos:image_processor_perf_test\",\n          \"//media/gpu/v4l2:v4l2_stateless_decoder\",\n          \"//media/gpu/v4l2:v4l2_unittest\",\n        ]\n      }\n    }\n  }\n}\n\nif (use_blink && !is_cronet_build) {\n  group(\"chromedriver_group\") {\n    testonly = true\n\n    if (is_fuchsia || is_android) {\n      # On Fuchsia and non-Cast Android, ChromeDriver runs on the host, not the\n      # device.\n      if (!is_cast_android) {\n        deps = [\n          \"//chrome/test/chromedriver:chromedriver_server($host_toolchain)\",\n        ]\n      }\n      if (is_android && !is_cast_android) {\n        deps += [ \"//chrome/test/chromedriver/test/webview_shell:chromedriver_webview_shell_apk\" ]\n      }\n    } else if (!is_castos && !is_ios) {\n      deps = [\n        \"//chrome/test/chromedriver:chromedriver_server\",\n        \"//chrome/test/chromedriver:chromedriver_unittests\",\n        \"//chrome/test/chromedriver:copy_license\",\n        \"//chrome/test/chromedriver:generate_chromedriver_notices\",\n      ]\n    }\n  }\n\n  # This group includes all of the targets needed to build and test Blink,\n  # including running web tests (see below). This target is defined here because\n  # previously //third_party/WebKit, now //third_party/blink, couldn't depend on\n  # //content/shell. This might not longer be true, see\n  # https://crbug.com/1018659.\n  group(\"blink_tests\") {\n    testonly = true\n\n    deps = [\n      \":blink_web_tests\",\n      \":blink_wpt_tests\",\n      \"//third_party/blink/public:all_blink\",\n    ]\n\n    if (!is_chromeos_ash && !is_ios && !is_fuchsia && !is_android &&\n        !is_castos) {\n      deps += [\n        \":chrome_wpt_tests\",\n        \":headless_shell_wpt\",\n      ]\n    }\n  }\n\n  # Options shared by all script test targets that call `run_web_tests.py` or\n  # `run_wpt_tests.py`.\n  _common_web_test_options = [\n    \"--no-show-results\",\n    \"--zero-tests-executed-ok\",\n    \"--build-directory\",\n    \"@WrappedPath(.)\",\n  ]\n  if (is_debug) {\n    _common_web_test_options += [ \"--debug\" ]\n  } else {\n    _common_web_test_options += [ \"--release\" ]\n  }\n  if (is_asan) {\n    _common_web_test_options += [\n      \"--enable-sanitizer\",\n      \"--additional-expectations\",\n      \"@WrappedPath(\" +\n          rebase_path(\"//third_party/blink/web_tests/ASANExpectations\",\n                      root_out_dir) + \")\",\n    ]\n  }\n  if (is_chrome_for_testing) {\n    _common_web_test_options += [\n      \"--additional-expectations\",\n      \"@WrappedPath(\" +\n          rebase_path(\"//third_party/blink/web_tests/CfTTestExpecations\",\n                      root_out_dir) + \")\",\n    ]\n  }\n  if (is_msan) {\n    _common_web_test_options += [\n      \"--enable-sanitizer\",\n      \"--additional-expectations\",\n      \"@WrappedPath(\" +\n          rebase_path(\"//third_party/blink/web_tests/MSANExpectations\",\n                      root_out_dir) + \")\",\n    ]\n  }\n  if (is_fuchsia) {\n    _common_web_test_options += [\n      \"--out-dir\",\n      \"@WrappedPath(.)\",\n    ]\n  }\n\n  if (!is_chromeos_ash && !is_ios && !is_fuchsia && !is_android && !is_castos) {\n    # https://chromium.googlesource.com/chromium/src/+/HEAD/docs/testing/run_web_platform_tests.md\n    script_test(\"chrome_wpt_tests\") {\n      script = \"//third_party/blink/tools/run_wpt_tests.py\"\n      args = _common_web_test_options + [ \"--product=chrome\" ]\n      if (dcheck_always_on) {\n        args += [ \"--timeout-multiplier=2\" ]\n      } else {\n        args += [ \"--timeout-multiplier=1\" ]\n      }\n      if (is_chrome_branded) {\n        args += [\n          \"--driver-name\",\n          \"Google Chrome\",\n        ]\n      }\n      data_deps = [\n        \":blink_web_tests_expectations\",\n        \":blink_web_tests_support_data\",\n        \"//chrome:chrome\",\n        \"//chrome/test/chromedriver:chromedriver_server\",\n        \"//third_party/blink/tools:wpt_tests_isolate\",\n      ]\n    }\n\n    # https://chromium.googlesource.com/chromium/src/+/HEAD/docs/testing/run_web_platform_tests.md\n    script_test(\"headless_shell_wpt\") {\n      script = \"//third_party/blink/tools/run_wpt_tests.py\"\n      args = _common_web_test_options + [\n               \"--product=headless_shell\",\n               \"--no-wpt-internal\",\n             ]\n      data_deps = [\n        \":blink_web_tests_expectations\",\n        \":blink_web_tests_support_data\",\n        \"//chrome/test/chromedriver:chromedriver_server\",\n        \"//headless:headless_shell\",\n        \"//third_party/blink/tools:wpt_tests_isolate\",\n      ]\n      if (is_mac || is_linux) {\n        data_deps += [ \"//third_party/hyphenation-patterns:bundle_hyphen_data\" ]\n      }\n    }\n  }\n\n  group(\"blink_web_tests_support_data\") {\n    testonly = true\n    data_deps = [\n      \":layout_test_data_mojo_bindings\",\n      \":layout_test_data_mojo_bindings_lite\",\n      \"//content/shell:content_shell\",\n      \"//content/test:mojo_bindings_web_test_mojom_js_data_deps\",\n      \"//content/test:mojo_web_test_bindings_js_data_deps\",\n      \"//device/bluetooth/public/mojom:fake_bluetooth_interfaces_js_data_deps\",\n      \"//device/vr/public/mojom:vr_service_js_data_deps\",\n      \"//media/capture/mojom:image_capture_js_data_deps\",\n      \"//media/midi:mojo_js_data_deps\",\n      \"//media/mojo/mojom:web_speech_recognition_js_data_deps\",\n      \"//mojo/public/interfaces/bindings/tests:test_data_deps\",\n      \"//mojo/public/js/ts/bindings/tests:test_interfaces_js_data_deps\",\n      \"//mojo/public/mojom/base:base_js_data_deps\",\n      \"//services/device/public/mojom:generic_sensor_js_data_deps\",\n      \"//services/device/public/mojom:mojom_js_data_deps\",\n      \"//services/device/public/mojom:usb_js_data_deps\",\n      \"//services/shape_detection/public/mojom:mojom_js_data_deps\",\n      \"//skia/public/mojom:mojom_js_data_deps\",\n      \"//testing/buildbot/filters:blink_web_tests_filter\",\n      \"//third_party/angle:includes\",\n      \"//third_party/blink/public:blink_devtools_frontend_resources_files\",\n      \"//third_party/blink/public:blink_devtools_inspector_resources\",\n      \"//third_party/blink/public/mojom:mojom_platform_js_data_deps\",\n      \"//third_party/blink/renderer/core:gen_files_for_web_tests\",\n      \"//third_party/catapult/third_party/typ\",\n      \"//third_party/hyphenation-patterns:test_data\",\n      \"//tools/imagediff\",\n      \"//ui/base:goldctl\",\n    ]\n\n    if (is_android) {\n      data_deps += [\n        \"//third_party/breakpad:breakpad_unittests\",\n        \"//tools/android/forwarder2\",\n\n        # Using the target toolchain for this tool, as it's run during tests not\n        # during the build. This places a symlink in the root_build_dir for\n        # scrips to use.\n        \"//third_party/breakpad:dump_syms\",\n        \"//third_party/breakpad:microdump_stackwalk\",\n        \"//third_party/breakpad:minidump_dump\",\n        \"//third_party/breakpad:minidump_stackwalk\",\n        \"//third_party/breakpad:symupload\",\n      ]\n    } else {\n      data_deps += [ \"//content/web_test:web_test_common_mojom_js_data_deps\" ]\n    }\n\n    if (!is_win && !is_android) {\n      # Using the default toolchain for this tool, as it's run during tests not\n      # during the build. This places a symlink in the root_build_dir for scrips\n      # to use.\n      data_deps += [ \"//third_party/breakpad:minidump_stackwalk\" ]\n    }\n\n    if (is_mac) {\n      # Using the default toolchain for this tool, as it's run during tests not\n      # during the build, and on Mac we support cross-building from a different\n      # architecture.\n      data_deps += [ \"//third_party/breakpad:dump_syms\" ]\n    }\n\n    if (is_linux || is_chromeos) {\n      # Using the default toolchain for this tool, as it's run during tests not\n      # during the build. This places a symlink in the root_build_dir for scrips\n      # to use.\n      data_deps += [ \"//third_party/breakpad:dump_syms\" ]\n    }\n\n    if (is_fuchsia) {\n      data_deps += [\n        \"//build/config/fuchsia:deployment_resources\",\n        \"//content/shell:content_shell_fuchsia\",\n        \"//content/shell:content_shell_pkg__archive-manifest\",\n        \"//content/shell:content_shell_pkg__archive-metadata\",\n      ]\n    }\n\n    data = [\n      \"//build/skia_gold_common/\",\n      \"//testing/scripts/common.py\",\n      \"//testing/scripts/run_isolated_script_test.py\",\n      \"//testing/xvfb.py\",\n      \"//third_party/blink/tools/\",\n      \"//third_party/blink/web_tests/external/wpt/.config.json\",\n      \"//third_party/blink/web_tests/resources/\",\n      \"//third_party/blink/web_tests/TestLists/\",\n      \"//third_party/pywebsocket3/src/mod_pywebsocket/\",\n      \"//third_party/test_fonts/test_fonts/\",\n      \"//third_party/wpt_tools/\",\n    ]\n\n    if (is_win) {\n      data += [\n        \"//third_party/apache-win32/\",\n        \"//third_party/apache-windows-arm64/\",\n        \"//third_party/perl/perl/\",\n      ]\n      data_deps += [ \"//build/win:copy_cdb_to_output\" ]\n    }\n\n    if (is_mac || (is_ios && target_environment == \"simulator\")) {\n      data += [\n        \"//third_party/apache-mac/\",\n        \"//third_party/apache-mac-arm64/\",\n      ]\n    }\n\n    if (is_linux || is_chromeos || is_fuchsia) {\n      data += [ \"//third_party/apache-linux/\" ]\n    }\n\n    if (is_android) {\n      data += [\n        \"//third_party/catapult/\",\n        \"//build/android/\",\n      ]\n    }\n  }\n\n  _common_web_test_script = \"//testing/scripts/run_isolated_script_test.py\"\n\n  if (is_fuchsia) {\n    _common_web_test_args = [\n      \"@WrappedPath(\" +\n          rebase_path(\"//build/fuchsia/test/run_test.py\", root_build_dir) + \")\",\n      \"blink\",\n      \"--platform\",\n      \"fuchsia\",\n      \"--jobs\",\n      \"1\",\n    ]\n  } else {\n    _common_web_test_args = [ \"@WrappedPath(\" + rebase_path(\n                                  \"//third_party/blink/tools/run_web_tests.py\",\n                                  root_build_dir) + \")\" ]\n  }\n  _common_web_test_args += _common_web_test_options\n\n  if (!is_debug) {\n    if (dcheck_always_on) {\n      _common_web_test_args += [ \"--timeout-ms=12000\" ]\n    } else if (v8_enable_debugging_features) {\n      # In a pure release build with a debug V8, tests run slower.\n      _common_web_test_args += [ \"--timeout-ms=30000\" ]\n    }\n  }\n\n  if (is_chrome_branded) {\n    _common_web_test_args += [ \"--chrome-branded\" ]\n  }\n\n  if (is_android) {\n    _common_web_test_args += [\n      \"--platform\",\n      \"android\",\n    ]\n  }\n\n  _common_web_test_args += [\n    \"--seed\",\n    \"4\",\n    \"--debug-rwt-logging\",\n    \"--clobber-old-results\",\n    \"--build-directory\",\n    \"@WrappedPath(.)\",\n  ]\n\n  # https://chromium.googlesource.com/chromium/src/+/main/docs/testing/web_tests.md\n  script_test(\"blink_web_tests\") {\n    script = _common_web_test_script\n\n    args = _common_web_test_args\n\n    data_deps = [\n      \":blink_web_tests_expectations\",\n      \":blink_web_tests_support_data\",\n    ]\n    data = [\n      \"//third_party/blink/perf_tests/\",\n      \"//third_party/blink/web_tests/VirtualTestSuites\",\n\n      # === List Test Cases folders here ===\n      \"//third_party/blink/web_tests/accessibility/\",\n      \"//third_party/blink/web_tests/android/\",\n      \"//third_party/blink/web_tests/animations/\",\n      \"//third_party/blink/web_tests/app_banner/\",\n      \"//third_party/blink/web_tests/bindings/\",\n      \"//third_party/blink/web_tests/clipboard/\",\n      \"//third_party/blink/web_tests/compositing/\",\n      \"//third_party/blink/web_tests/crypto/\",\n      \"//third_party/blink/web_tests/css-parser/\",\n      \"//third_party/blink/web_tests/css1/\",\n      \"//third_party/blink/web_tests/css2.1/\",\n      \"//third_party/blink/web_tests/css3/\",\n      \"//third_party/blink/web_tests/cssom/\",\n      \"//third_party/blink/web_tests/custom-elements/\",\n      \"//third_party/blink/web_tests/custom-properties/\",\n      \"//third_party/blink/web_tests/dark-mode/\",\n      \"//third_party/blink/web_tests/dom/\",\n      \"//third_party/blink/web_tests/editing/\",\n      \"//third_party/blink/web_tests/fast/\",\n      \"//third_party/blink/web_tests/fonts/\",\n      \"//third_party/blink/web_tests/fragmentation/\",\n      \"//third_party/blink/web_tests/fullscreen/\",\n      \"//third_party/blink/web_tests/gamepad/\",\n      \"//third_party/blink/web_tests/harness-tests/\",\n      \"//third_party/blink/web_tests/hittesting/\",\n      \"//third_party/blink/web_tests/html/\",\n      \"//third_party/blink/web_tests/html5lib/\",\n      \"//third_party/blink/web_tests/http/\",\n      \"//third_party/blink/web_tests/idle-callback/\",\n      \"//third_party/blink/web_tests/ietestcenter/\",\n      \"//third_party/blink/web_tests/images/\",\n      \"//third_party/blink/web_tests/inspector-protocol/\",\n      \"//third_party/blink/web_tests/intersection-observer/\",\n      \"//third_party/blink/web_tests/jquery/\",\n      \"//third_party/blink/web_tests/js/\",\n      \"//third_party/blink/web_tests/loader/\",\n      \"//third_party/blink/web_tests/media/\",\n      \"//third_party/blink/web_tests/media_capabilities/\",\n      \"//third_party/blink/web_tests/mhtml/\",\n      \"//third_party/blink/web_tests/navigator_language/\",\n      \"//third_party/blink/web_tests/navigator_webdriver/\",\n      \"//third_party/blink/web_tests/netinfo/\",\n      \"//third_party/blink/web_tests/overflow/\",\n      \"//third_party/blink/web_tests/paint/\",\n      \"//third_party/blink/web_tests/payments/\",\n      \"//third_party/blink/web_tests/performance_timeline/\",\n      \"//third_party/blink/web_tests/permissionclient/\",\n      \"//third_party/blink/web_tests/plugins/\",\n      \"//third_party/blink/web_tests/pointer-lock/\",\n      \"//third_party/blink/web_tests/ppapi/\",\n      \"//third_party/blink/web_tests/print_testharness/\",\n      \"//third_party/blink/web_tests/printing/\",\n      \"//third_party/blink/web_tests/register-protocol-handler/\",\n      \"//third_party/blink/web_tests/regress/\",\n      \"//third_party/blink/web_tests/resize-observer/\",\n      \"//third_party/blink/web_tests/resources/\",\n      \"//third_party/blink/web_tests/rootscroller/\",\n      \"//third_party/blink/web_tests/screen_orientation/\",\n      \"//third_party/blink/web_tests/scrollbars/\",\n      \"//third_party/blink/web_tests/security/\",\n      \"//third_party/blink/web_tests/handwriting/\",\n      \"//third_party/blink/web_tests/shadow-dom/\",\n      \"//third_party/blink/web_tests/storage/\",\n      \"//third_party/blink/web_tests/svg/\",\n      \"//third_party/blink/web_tests/synthetic_gestures/\",\n      \"//third_party/blink/web_tests/tables/\",\n      \"//third_party/blink/web_tests/test_runner/\",\n      \"//third_party/blink/web_tests/third_party/\",\n      \"//third_party/blink/web_tests/timezonechange/\",\n      \"//third_party/blink/web_tests/touchadjustment/\",\n      \"//third_party/blink/web_tests/transforms/\",\n      \"//third_party/blink/web_tests/transitions/\",\n      \"//third_party/blink/web_tests/traversal/\",\n      \"//third_party/blink/web_tests/typedcssom/\",\n      \"//third_party/blink/web_tests/vibration/\",\n      \"//third_party/blink/web_tests/view-transition/\",\n      \"//third_party/blink/web_tests/virtual/\",\n      \"//third_party/blink/web_tests/virtualkeyboard/\",\n      \"//third_party/blink/web_tests/wasm/\",\n      \"//third_party/blink/web_tests/webaudio/\",\n      \"//third_party/blink/web_tests/webexposed/\",\n      \"//third_party/blink/web_tests/webgpu/\",\n      \"//third_party/blink/web_tests/xmlviewer/\",\n\n      # === Test Case Folders Ends ===\n    ]\n  }\n\n  group(\"blink_web_tests_expectations\") {\n    testonly = true\n\n    data = [\n      # Include virtual baselines.\n      \"//third_party/blink/web_tests/virtual/\",\n\n      # List all test expectations here\n      \"//third_party/blink/web_tests/LeakExpectations\",\n      \"//third_party/blink/web_tests/NeverFixTests\",\n      \"//third_party/blink/web_tests/SlowTests\",\n      \"//third_party/blink/web_tests/StaleTestExpectations\",\n      \"//third_party/blink/web_tests/TestExpectations\",\n    ]\n\n    if (is_asan) {\n      data += [ \"//third_party/blink/web_tests/ASANExpectations\" ]\n    }\n    if (is_chrome_for_testing) {\n      data += [ \"//third_party/blink/web_tests/CfTTestExpecations\" ]\n    }\n    if (is_msan) {\n      data += [ \"//third_party/blink/web_tests/MSANExpectations\" ]\n    }\n\n    if (is_win || is_linux || is_fuchsia) {\n      data += [\n        \"//third_party/blink/web_tests/platform/win/\",\n        \"//third_party/blink/web_tests/platform/win10/\",\n        \"//third_party/blink/web_tests/platform/win11-arm64/\",\n      ]\n      if (is_linux || is_fuchsia) {\n        data += [ \"//third_party/blink/web_tests/platform/linux/\" ]\n      }\n      if (is_fuchsia) {\n        data += [\n          \"//third_party/blink/web_tests/platform/fuchsia/\",\n          \"$root_gen_dir/package_metadata/content_shell.meta\",\n        ]\n      }\n    } else if (is_mac) {\n      data += [\n        \"//third_party/blink/web_tests/platform/mac/\",\n        \"//third_party/blink/web_tests/platform/mac-mac11/\",\n        \"//third_party/blink/web_tests/platform/mac-mac11-arm64/\",\n        \"//third_party/blink/web_tests/platform/mac-mac12/\",\n        \"//third_party/blink/web_tests/platform/mac-mac12-arm64/\",\n        \"//third_party/blink/web_tests/platform/mac-mac13/\",\n        \"//third_party/blink/web_tests/platform/mac-mac13-arm64/\",\n        \"//third_party/blink/web_tests/platform/mac-mac14/\",\n        \"//third_party/blink/web_tests/platform/mac-mac14-arm64/\",\n        \"//third_party/blink/web_tests/platform/mac-mac15-arm64/\",\n      ]\n    }\n\n    # flag-specific tests only runs on linux & mac as of now\n    if (is_linux || is_mac) {\n      data += [\n        \"//third_party/blink/web_tests/FlagSpecificConfig\",\n        \"//third_party/blink/web_tests/FlagExpectations/\",\n        \"//third_party/blink/web_tests/flag-specific/\",\n      ]\n    }\n  }\n\n  # https://chromium.googlesource.com/chromium/src/+/HEAD/docs/testing/web_tests.md\n  script_test(\"blink_wpt_tests\") {\n    script = _common_web_test_script\n\n    args = _common_web_test_args\n\n    # Use --wpt-only to skip tests under web_tests/virtual/\n    args += [\n      \"--wpt-only\",\n      \"--inverted-test-launcher-filter-file\",\n      \"@WrappedPath(\" +\n          rebase_path(\"//third_party/blink/web_tests/TestLists/chrome.filter\",\n                      root_out_dir) + \")\",\n      \"--test-launcher-filter-file\",\n      \"@WrappedPath(\" + rebase_path(\n              \"//third_party/blink/web_tests/TestLists/content_shell.filter\",\n              root_out_dir) + \")\",\n    ]\n\n    data_deps = [\n      \":blink_web_tests_expectations\",\n      \":blink_web_tests_support_data\",\n    ]\n    data = [\n      \"//third_party/blink/perf_tests/\",\n      \"//third_party/blink/web_tests/VirtualTestSuites\",\n\n      # === List Test Cases folders here ===\n      \"//third_party/blink/web_tests/external/\",\n      \"//third_party/blink/web_tests/wpt_internal/\",\n\n      # === Test Case Folders Ends ===\n    ]\n  }\n\n  script_test(\"devtools_web_tests\") {\n    # This target differs from :blink_web_tests in that it uses the\n    # same test harness but runs an entirely different set of tests\n    # and doesn't have a dependency on the web_test directory at all.\n    script = _common_web_test_script\n\n    args = _common_web_test_args + [\n             \"--layout-tests-directory=@WrappedPath(\" + rebase_path(\n                     \"//third_party/devtools-frontend/src/test/webtests\",\n                     root_out_dir) + \")\",\n             \"http/tests/devtools\",\n           ]\n\n    data_deps = [ \":blink_web_tests_support_data\" ]\n    data = [ \"//third_party/devtools-frontend/src/test/webtests/\" ]\n  }\n\n  script_test(\"webgpu_blink_web_tests\") {\n    # This target differs from :blink_web_tests in that it uses the same\n    # test harness and a few additional flags but, more importantly, only runs\n    # the web_tests/wpt_internal/webgpu tests, so it doesn't have a data\n    # dependency on the whole web_test directory.\n    script = _common_web_test_script\n\n    args = _common_web_test_args\n    if (is_asan) {\n      args += [ \"--timeout-ms=30000\" ]\n    }\n    args += [\n      \"--ignore-default-expectations\",\n      \"--additional-expectations\",\n      \"@WrappedPath(../../third_party/blink/web_tests/WebGPUExpectations)\",\n      \"--isolated-script-test-filter=wpt_internal/webgpu/*\",\n    ]\n\n    data_deps = [\n      \":blink_web_tests_support_data\",\n      \"//third_party/webgpu-cts\",\n    ]\n    data = [\n      \"//third_party/blink/web_tests/external/wpt/common/\",\n      \"//third_party/blink/web_tests/external/wpt/resources/\",\n      \"//third_party/blink/web_tests/FlagSpecificConfig\",\n      \"//third_party/blink/web_tests/VirtualTestSuites\",\n      \"//third_party/blink/web_tests/WebGPUExpectations\",\n      \"//third_party/blink/web_tests/wpt_internal/\",\n      \"//third_party/webgpu-cts/scripts/\",\n    ]\n  }\n\n  copy(\"layout_test_data_mojo_bindings\") {\n    testonly = true\n\n    sources = [ \"$root_gen_dir/mojo/public/js/mojo_bindings.js\" ]\n\n    outputs =\n        [ \"$root_gen_dir/layout_test_data/mojo/public/js/mojo_bindings.js\" ]\n\n    deps = [ \"//mojo/public/js:bindings\" ]\n  }\n\n  copy(\"layout_test_data_mojo_bindings_lite\") {\n    testonly = true\n\n    sources = [ \"$root_gen_dir/mojo/public/js/mojo_bindings_lite.js\" ]\n\n    outputs = [\n      \"$root_gen_dir/layout_test_data/mojo/public/js/mojo_bindings_lite.js\",\n    ]\n\n    deps = [ \"//mojo/public/js:bindings_lite\" ]\n  }\n\n  script_test(\"blink_python_tests\") {\n    script = \"//testing/scripts/run_isolated_script_test.py\"\n    args = [\n      \"@WrappedPath(\" +\n          rebase_path(\"//third_party/blink/tools/run_blinkpy_tests.py\",\n                      root_build_dir) + \")\",\n      \"-v\",\n      \"-t\",\n    ]\n\n    data = [\n      # These tests use //build/android/devil_chromium.py even when !is_android,\n      # so cannot use the helpers in //build/android (they assert(is_android)).\n      \"//build/android/\",\n      \"//build/gn_helpers.py\",\n      \"//build/config/gclient_args.gni\",\n      \"//build/skia_gold_common/\",\n      \"//components/crash/content/tools/generate_breakpad_symbols.py\",\n      \"//testing/unexpected_passes_common/\",\n      \"//testing/flake_suppressor_common/\",\n      \"//third_party/blink/renderer/bindings/scripts/\",\n      \"//third_party/blink/renderer/build/scripts/\",\n      \"//third_party/blink/tools/\",\n      \"//third_party/blink/web_tests/ASANExpectations\",\n      \"//third_party/blink/web_tests/CfTTestExpecations\",\n      \"//third_party/blink/web_tests/FlagExpectations/\",\n      \"//third_party/blink/web_tests/LeakExpectations\",\n      \"//third_party/blink/web_tests/MSANExpectations\",\n      \"//third_party/blink/web_tests/NeverFixTests\",\n      \"//third_party/blink/web_tests/SlowTests\",\n      \"//third_party/blink/web_tests/StaleTestExpectations\",\n      \"//third_party/blink/web_tests/TestExpectations\",\n      \"//third_party/blink/web_tests/VirtualTestSuites\",\n      \"//third_party/blink/web_tests/W3CImportExpectations\",\n      \"//third_party/blink/web_tests/paint/invalidation/repaint-overlay/\",\n      \"//third_party/catapult/common/py_utils/\",\n      \"//third_party/catapult/devil/\",\n      \"//third_party/catapult/dependency_manager/\",\n      \"//third_party/catapult/third_party/typ/\",\n      \"//third_party/depot_tools/pylint-2.7\",\n      \"//third_party/depot_tools/pylint_main.py\",\n      \"//third_party/depot_tools/pylintrc\",\n      \"//third_party/ply/\",\n      \"//third_party/pyjson5/\",\n      \"//third_party/wpt_tools/\",\n      \"//tools/idl_parser/\",\n    ]\n\n    if (is_ios) {\n      data += [ \"//third_party/blink/web_tests/IOSTestExpectations\" ]\n    }\n\n    data_deps = [ \"//ui/base:goldctl\" ]\n  }\n}\n\n# TODO(cassew): Add more OS's that don't support x86.\nis_valid_x86_target =\n    target_os != \"ios\" && target_os != \"mac\" &&\n    (target_os != \"linux\" || use_libfuzzer || !build_with_chromium)\n\n# Note: v8_target_cpu == arm allows using the V8 arm simulator on x86 for fuzzing.\nassert(\n    is_valid_x86_target || target_cpu != \"x86\" || v8_target_cpu == \"arm\",\n    \"'target_cpu=x86' is not supported for 'target_os=$target_os'. Consider omitting 'target_cpu' (default) or using 'target_cpu=x64' instead.\")\n\ngroup(\"chromium_builder_perf\") {\n  testonly = true\n\n  if (!is_ios && !is_android && !is_castos && !is_cronet_build) {\n    data_deps = [\n      \"//components/tracing:tracing_perftests\",\n      \"//gpu:command_buffer_perftests\",\n      \"//gpu:gpu_perftests\",\n      \"//media:media_perftests\",\n      \"//tools/perf/chrome_telemetry_build:telemetry_chrome_test\",\n    ]\n\n    if (!is_fuchsia) {\n      data_deps += [\n        \"//chrome/test:load_library_perf_tests\",\n        \"//chrome/test:performance_test_suite\",\n      ]\n    }\n\n    if (!is_chromeos_ash && !is_fuchsia) {\n      data_deps += [ \"//chrome/test:performance_browser_tests\" ]\n    }\n\n    if (!is_win) {\n      data_deps += [ \"//third_party/breakpad:minidump_stackwalk($host_system_allocator_toolchain)\" ]\n    }\n  }\n\n  if ((is_linux && !is_castos) || is_chromeos_lacros) {\n    if (is_official_build) {\n      # In GN builds, this is controlled by the 'linux_dump_symbols'\n      # flag, which defaults to 1 for official builds. For now,\n      # we skip the separate flag and just key off of is_official_build.\n      data_deps += [ \"//chrome:linux_symbols\" ]\n    }\n\n    data_deps += [ \"//tools/perf/clear_system_cache\" ]\n  }\n\n  if (is_win) {\n    data_deps += [\n      \"//chrome/installer/mini_installer:mini_installer\",\n      \"//components:components_perftests\",\n      \"//third_party/angle/src/tests:angle_perftests\",\n    ]\n  }\n}\n\nif (!is_ios && !is_android && !is_castos && !is_cronet_build) {\n  group(\"chromium_builder_asan\") {\n    testonly = true\n\n    deps = [\n      \"//content/shell:content_shell\",\n      \"//third_party/blink/public/mojom:mojom_modules_js\",\n      \"//v8:d8\",\n    ]\n    if (!is_fuchsia) {\n      deps += [ \"//chrome:chrome\" ]\n    }\n    if (!is_win) {\n      deps += [ \"//skia:filter_fuzz_stub\" ]\n    }\n    if (enable_ipc_fuzzer && !is_component_build) {\n      deps += [ \"//tools/ipc_fuzzer:ipc_fuzzer_all\" ]\n    }\n    if (!is_chromeos_ash) {\n      deps += [ \"//v8:v8_shell($v8_snapshot_toolchain)\" ]\n      if (enable_pdf) {\n        deps += [ \"//third_party/pdfium/testing:pdfium_test\" ]\n      }\n    }\n\n    if (!is_component_build) {\n      # See https://bugs.chromium.org/p/chromium/issues/detail?id=942546#c11.\n      deps += [\n        \"//third_party/webrtc/rtc_tools:rtp_generator\",\n        \"//third_party/webrtc/rtc_tools:video_replay\",\n      ]\n    }\n\n    if (build_dawn_tests) {\n      deps += [ \"//third_party/dawn/src/tint:fuzzers\" ]\n    }\n  }\n}\n\nif (is_android && !is_cronet_build) {\n  group(\"optimize_gn_gen\") {\n    deps = [\n      # These run expensive scripts in non-default toolchains. Generally, host\n      # toolchain targets are loaded in the later part of the run, and the\n      # result is they push out the end of generation. By preloading these, the\n      # scripts can be parallelized with the rest of the load.\n      \"//build/config/linux(//build/toolchain/linux:clang_x64)\",\n      \"//build/config/posix(//build/toolchain/linux:clang_x64)\",\n\n      # Include x86 toolchains as well since V8 uses them for 32-bit snapshot\n      # generation.\n      \"//build/config/linux(//build/toolchain/linux:clang_x86)\",\n      \"//build/config/posix(//build/toolchain/linux:clang_x86)\",\n    ]\n  }\n}\n\nif (is_chromeos_ash && enable_js_type_check) {\n  group(\"webui_closure_compile\") {\n    testonly = true\n    data_deps = [\n      \"ash/webui:closure_compile\",\n      \"chrome/browser/resources:closure_compile\",\n      \"chrome/test/data/webui:closure_compile\",\n      \"mojo/public/tools/bindings/generators/js_templates/lite/test:closure_compile\",\n      \"mojo/public/tools/bindings/generators/js_templates/lite/test:closure_compile_modules\",\n    ]\n  }\n}\n\n# Write debug logs to gn_logs.txt.\n_lines = [\n           \"Generated during 'gn gen' by //BUILD.gn.\",\n           \"\",\n         ] + build_gn_logs\n\n# GN evaluates each .gn file once per toolchain, so restricting to default\n# toolchain will ensure write_file() is called only once.\nassert(current_toolchain == default_toolchain)\n\nwrite_file(\"$root_build_dir/gn_logs.txt\", _lines)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.8505859375,
          "content": "# Chromium Code of Conduct\n\nGoogle and the Chromium team are committed to preserving and fostering a\ndiverse, welcoming community. Below is our community code of conduct, which\napplies to our repos and organizations, issue trackers, mailing lists,\nblog content, and any other Chromium-supported communication group, as\nwell as any private communication initiated in the context of these\nspaces. This code of conduct must be followed by everyone contributing to\nthe Chromium project, regardless of affiliation or position.\n\nSimply put, community discussions should be\n\n * respectful and kind;\n * about Chromium;\n * about features and code, not the individuals involved.\n\n## Be respectful and constructive.\n\nTreat everyone with respect. Build on each other's ideas. Each of us has the\nright to enjoy our experience and participate without fear of harassment,\ndiscrimination, or condescension, whether blatant or subtle. Remember that\nChromium is a geographically distributed team and that you may not be\ncommunicating with someone in their primary language. We all get frustrated\nwhen working on hard problems, but we cannot allow that frustration to turn\ninto personal attacks.\n\n## Speak up if you see or hear something.\n\nYou are empowered to politely engage when you feel that you or others are\ndisrespected. The person making you feel uncomfortable may not be aware of what\nthey are doing - politely bringing their behavior to their attention is\nencouraged.\n\nIf you are uncomfortable speaking up, or feel that your concerns are not being\nduly considered, you can email community@chromium.org to request involvement\nfrom a community manager. All concerns shared with community managers will be\nkept confidential, but you may also submit an anonymous report [here](https://docs.google.com/a/google.com/forms/d/e/1FAIpQLSe-LDjW9eIJ-TpI2poZxnGtU-SvUWkFZc8x0aiKGY1s7NKPdA/viewform?c=0&w=1).\nPlease note that without a way to contact you, an anonymous report may be\ndifficult to act on. You may also create a throwaway account to report. In\ncases where a public response is deemed necessary, the identities of victims\nand reporters will remain confidential unless those individuals instruct us\notherwise.\n\nWhile all reports will be taken seriously, the Chromium community managers may\nnot act on complaints that they feel are not violations of this code of\nconduct.\n\n## We will not tolerate harassment of any kind, including but not limited to:\n\n * Harassing comments\n * Intimidation\n * Encouraging a person to engage in self-harm.\n * Sustained disruption or derailing of threads, channels, lists, etc.\n * Offensive or violent comments, jokes or otherwise\n * Inappropriate sexual content\n * Unwelcome sexual or otherwise aggressive attention\n * Continued one-on-one communication after requests to cease\n * Distribution or threat of distribution of people's personally identifying\n   information, AKA “doxing”\n\n## Consequences for failing to comply with this policy\n\nConsequences for failing to comply with this policy may include, at the sole\ndiscretion of the Chromium community managers:\n\n * a request for an apology;\n * a private or public warning or reprimand;\n * a temporary ban from the mailing list, blog, Chromium repository or\n   organization, or other Chromium-supported communication group, including\n   loss of committer status;\n * a permanent ban from any of the above, or from all current and future\n   Chromium-supported or Google-supported communities, including loss of\n   committer status.\n\nParticipants warned to stop any harassing behavior are expected to comply\nimmediately; failure to do so will result in an escalation of consequences.\n\n## Acknowledgements\n\nThis Code of Conduct is based on the Geek Feminism Code of Conduct, the Django\nCode of Conduct and the Geek Feminism Wiki \"Effective codes of conduct\" guide.\n\n## License\n\nThis Code of Conduct is available for reuse under the Creative Commons Zero\n(CC0) license.\n"
        },
        {
          "name": "CPPLINT.cfg",
          "type": "blob",
          "size": 0.3330078125,
          "content": "# Copyright 2024 The Chromium Authors\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n# See https://source.chromium.org/chromium/chromium/tools/depot_tools/+/main:cpplint.py\n# about this configuration file.\n\n# Include order should be caught by clang-format.\nfilter=-build/include_order\n"
        },
        {
          "name": "CRYPTO_OWNERS",
          "type": "blob",
          "size": 0.3916015625,
          "content": "# People listed in this file are responsible for making decisions about\n# cryptography use in Chromium. If you are adding new cryptographic code, or\n# adding complex uses of existing cryptographic code, please consult one of\n# these people.\n\nagl@chromium.org\nbbe@chromium.org\ndavidben@chromium.org\nellyjones@chromium.org\nestark@chromium.org\nmattm@chromium.org\nsvaldez@chromium.org\ntsepez@chromium.org\n"
        },
        {
          "name": "DEPS",
          "type": "blob",
          "size": 209.3505859375,
          "content": "# This file is used to manage the dependencies of the Chromium src repo. It is\n# used by gclient to determine what version of each dependency to check out, and\n# where.\n#\n# For more information, please refer to the official documentation:\n#   https://sites.google.com/a/chromium.org/dev/developers/how-tos/get-the-code\n#\n# When adding a new dependency, please update the top-level .gitignore file\n# to list the dependency's destination directory.\n#\n# -----------------------------------------------------------------------------\n# Rolling deps\n# -----------------------------------------------------------------------------\n# All repositories in this file are git-based, using Chromium git mirrors where\n# necessary (e.g., a git mirror is used when the source project is SVN-based).\n# To update the revision that Chromium pulls for a given dependency:\n#\n#  # Create and switch to a new branch\n#  git new-branch depsroll\n#  # Run roll-dep (provided by depot_tools) giving the dep's path and optionally\n#  # a regex that will match the line in this file that contains the current\n#  # revision. The script ALWAYS rolls the dependency to the latest revision\n#  # in origin/master. The path for the dep should start with src/.\n#  roll-dep src/third_party/foo_package/src foo_package.git\n#  # You should now have a modified DEPS file; commit and upload as normal\n#  git commit -aspv_he\n#  git cl upload\n#\n# For more on the syntax and semantics of this file, see:\n#   https://bit.ly/chromium-gclient-conditionals\n#\n# which is a bit incomplete but the best documentation we have at the\n# moment.\n\n# We expect all git dependencies specified in this file to be in sync with git\n# submodules (gitlinks).\ngit_dependencies = 'SYNC'\n\ngclient_gn_args_file = 'src/build/config/gclient_args.gni'\ngclient_gn_args = [\n  'build_with_chromium',\n  'checkout_android',\n  'checkout_android_prebuilts_build_tools',\n  'checkout_clang_coverage_tools',\n  'checkout_copybara',\n  'checkout_ios_webkit',\n  'checkout_nacl',\n  'checkout_openxr',\n  'checkout_src_internal',\n  'cros_boards',\n  'cros_boards_with_qemu_images',\n  'generate_location_tags',\n]\n\n\nvars = {\n  # Variable that can be used to support multiple build scenarios, like having\n  # Chromium specific targets in a client project's GN file or sync dependencies\n  # conditionally etc.\n  'build_with_chromium': True,\n\n  # By default, we should check out everything needed to run on the main\n  # chromium waterfalls. This var can be also be set to \"small\", in order\n  # to skip things are not strictly needed to build chromium for development\n  # purposes, by adding the following line to src.git's .gclient entry:\n  #      \"custom_vars\": { \"checkout_configuration\": \"small\" },\n  'checkout_configuration': 'default',\n\n  # By default, don't check out android. Will be overridden by gclient\n  # variables.\n  # TODO(crbug.com/875037): Remove this once the problem in gclient is fixed.\n  'checkout_android': False,\n\n  # By default, don't check out Fuchsia. Will be overridden by gclient\n  # variables.\n  # TODO(crbug.com/875037): Remove this once the problem in gclient is fixed.\n  'checkout_fuchsia': False,\n\n  # For code related to internal Fuchsia images.\n  'checkout_fuchsia_internal': False,\n\n  # Fetches the internal Fuchsia SDK boot images, with the images in a\n  # comma-separated list.\n  'checkout_fuchsia_internal_images': '',\n\n  # Used for downloading the Fuchsia SDK without running hooks.\n  'checkout_fuchsia_no_hooks': False,\n\n  # Pull in Android prebuilts build tools so we can create Java xrefs\n  'checkout_android_prebuilts_build_tools': False,\n\n  # By default, do not check out Cast3P.\n  'checkout_cast3p': False,\n\n  # By default, do not check out Chromium autofill captured sites test\n  # dependencies. These dependencies include very large numbers of very\n  # large web capture files. Captured sites test dependencies are also\n  # restricted to Googlers only.\n  'checkout_chromium_autofill_test_dependencies': False,\n\n  # By default, do not check out Chromium password manager captured sites test\n  # dependencies. These dependencies include very large numbers of very\n  # large web capture files. Captured sites test dependencies are also\n  # restricted to Googlers only.\n  'checkout_chromium_password_manager_test_dependencies': False,\n\n  # Checkout fuzz archive. Should not need in builders.\n  'checkout_clusterfuzz_data': False,\n\n  # By default, checkout JavaScript coverage node modules. These packages\n  # are used to post-process raw v8 coverage reports into IstanbulJS compliant\n  # output.\n  'checkout_js_coverage_modules': True,\n\n  # Check out and download nacl for ChromeOS only.\n  # This can be disabled e.g. with custom_vars.\n  'checkout_nacl': 'checkout_chromeos',\n\n  # By default, do not check out src-internal. This can be overridden e.g. with\n  # custom_vars.\n  'checkout_src_internal': False,\n\n  # Condition used by a subset of official Chrome release builders.\n  # By default, do not check out release_scripts.\n  'checkout_chrome_release_scripts': False,\n\n  # Checkout legacy src_internal. This variable is ignored if\n  # checkout_src_internal is set as false.\n  'checkout_legacy_src_internal': True,\n\n  # For super-internal deps. Set by the official builders.\n  'checkout_google_internal': False,\n\n  # Checkout SODA (Speech On-Device API go/chrome-live-caption)\n  'checkout_soda': False,\n\n  # Fetch the additional packages and files needed to run all of the\n  # telemetry tests. This is false by default as some stuff is only\n  # privately accessible.\n  'checkout_telemetry_dependencies': False,\n\n  # Bots that don't consume WPR archives can skip downloading\n  # them.\n  'skip_wpr_archives_download': False,\n\n  # Fetch the prebuilt binaries for llvm-cov and llvm-profdata. Needed to\n  # process the raw profiles produced by instrumented targets (built with\n  # the gn arg 'use_clang_coverage').\n  'checkout_clang_coverage_tools': False,\n\n  # Fetch the pgo profiles to optimize official builds.\n  'checkout_pgo_profiles': False,\n\n  # Fetch clang-tidy into the same bin/ directory as our clang binary.\n  'checkout_clang_tidy': False,\n\n  # Fetch clangd into the same bin/ directory as our clang binary.\n  'checkout_clangd': False,\n\n  # By default checkout the OpenXR loader library only on Windows and Android.\n  # The OpenXR backend for VR in Chromium is currently only supported for these\n  # platforms, but support for other platforms may be added in the future.\n  'checkout_openxr' : 'checkout_win or checkout_android',\n\n  'checkout_instrumented_libraries': 'checkout_linux and checkout_configuration != \"small\"',\n\n  # By default bot checkouts the WPR archive files only when this\n  # flag is set True.\n  'checkout_wpr_archives': False,\n\n  # By default, do not check out WebKit for iOS, as it is not needed unless\n  # running against ToT WebKit rather than system WebKit. This can be overridden\n  # e.g. with custom_vars.\n  'checkout_ios_webkit': False,\n\n  # Fetches only the SDK boot images that match at least one of the\n  # entries in a comma-separated list.\n  #\n  # Available images:\n  #   Emulation:\n  #   - core.x64-dfv2\n  #   - terminal.x64\n  #   - terminal.qemu-arm64\n  #   - workstation.qemu-x64\n  #   Hardware:\n  #   - workstation_eng.chromebook-x64\n  #   - workstation_eng.chromebook-x64-dfv2\n  #\n  # Since the images are hundreds of MB, default to only downloading the image\n  # most commonly useful for developers. Bots and developers that need to use\n  # other images can override this with additional images.\n  'checkout_fuchsia_boot_images': \"terminal.x64\",\n  'checkout_fuchsia_product_bundles': '\"{checkout_fuchsia_boot_images}\" != \"\"',\n\n  # By default, do not check out files required to run fuchsia tests in\n  # qemu on linux-arm64 machines.\n  'checkout_fuchsia_for_arm64_host': False,\n\n  # By default, download the fuchsia sdk from the public sdk directory.\n  'fuchsia_sdk_cipd_prefix': 'fuchsia/sdk/core/',\n\n  # By default, download the fuchsia images from the fuchsia GCS bucket.\n  'fuchsia_images_bucket': 'fuchsia',\n\n  # Default to the empty board. Desktop Chrome OS builds don't need cros SDK\n  # dependencies. Other Chrome OS builds should always define this explicitly.\n  'cros_boards': Str(''),\n  'cros_boards_with_qemu_images': Str(''),\n  # Building for CrOS is only supported on linux currently.\n  'checkout_simplechrome': '\"{cros_boards}\" != \"\"',\n  'checkout_simplechrome_with_vms': '\"{cros_boards_with_qemu_images}\" != \"\"',\n\n  # Generate location tag metadata to include in tests result data uploaded\n  # to ResultDB. This isn't needed on some configs and the tool that generates\n  # the data may not run on them, so we make it possible for this to be\n  # turned off. Note that you also generate the metadata but not include it\n  # via a GN build arg (tests_have_location_tags).\n  'generate_location_tags': True,\n\n  # By default, do not check out Copybara 3pp dependency that is specifically\n  # needed by Cronet gn2bp CI builder.\n  'checkout_copybara': False,\n\n  # luci-go CIPD package version.\n  # Make sure the revision is uploaded by infra-packagers builder.\n  # https://ci.chromium.org/p/infra-internal/g/infra-packagers/console\n  'luci_go': 'git_revision:320a8df0f7934159fda7721f3b507e707531d284',\n\n  # This can be overridden, e.g. with custom_vars, to build clang from HEAD\n  # instead of downloading the prebuilt pinned revision.\n  'llvm_force_head_revision': False,\n\n  # Make Dawn skip its standalone dependencies\n  'dawn_standalone': False,\n\n  # Fetch configuration files required for the 'use_remoteexec' gn arg\n  'download_remoteexec_cfg': False,\n  # RBE instance to use for running remote builds\n  'rbe_instance': Str('projects/rbe-chrome-untrusted/instances/default_instance'),\n  # RBE project to download rewrapper config files for. Only needed if\n  # different from the project used in 'rbe_instance'\n  'rewrapper_cfg_project': Str(''),\n  # reclient CIPD package\n  'reclient_package': 'infra/rbe/client/',\n  # reclient CIPD package version\n  'reclient_version': 're_client_version:0.172.0.3cf60ba5-gomaip',\n\n  # screen-ai CIPD packages\n  'screen_ai_linux': 'version:127.9',\n  'screen_ai_macos_amd64': 'version:127.9',\n  'screen_ai_macos_arm64': 'version:127.9',\n  'screen_ai_windows_amd64': 'version:127.9',\n  'screen_ai_windows_386': 'version:127.9',\n\n  # siso CIPD package version.\n  'siso_version': 'git_revision:f9bfa081826a4ffb6f2a96b640d009cef900e69f',\n\n  # download libaom test data\n  'download_libaom_testdata': False,\n\n  # download libvpx test data\n  'download_libvpx_testdata': False,\n\n  'android_git': 'https://android.googlesource.com',\n  'aomedia_git': 'https://aomedia.googlesource.com',\n  'boringssl_git': 'https://boringssl.googlesource.com',\n  'chrome_git': 'https://chrome-internal.googlesource.com',\n  'chromium_git': 'https://chromium.googlesource.com',\n  'dawn_git': 'https://dawn.googlesource.com',\n  'pdfium_git': 'https://pdfium.googlesource.com',\n  'quiche_git': 'https://quiche.googlesource.com',\n  'skia_git': 'https://skia.googlesource.com',\n  'swiftshader_git': 'https://swiftshader.googlesource.com',\n  'webrtc_git': 'https://webrtc.googlesource.com',\n  'betocore_git': 'https://beto-core.googlesource.com',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling V8\n  # and whatever else without interference from each other.\n  'src_internal_revision': '3ce4702c33df16bb3cc2619173d8f80639872707',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling Skia\n  # and whatever else without interference from each other.\n  'skia_revision': '1398cbd6b7f9af9eca3b0b5277fece4cb33a45ff',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling V8\n  # and whatever else without interference from each other.\n  'v8_revision': '083f3ab01f8de699e3300350e6c45be0d0488484',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling ANGLE\n  # and whatever else without interference from each other.\n  'angle_revision': 'c289b30f332d55bf0156d7122dac00f1aebe56e0',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling SwiftShader\n  # and whatever else without interference from each other.\n  'swiftshader_revision': 'f6ad529e86e441bad3210b0b714dca7faa99b0f8',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling PDFium\n  # and whatever else without interference from each other.\n  'pdfium_revision': '20b8b48e460b742e34075cf5dd682e25dfea4dc3',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling BoringSSL\n  # and whatever else without interference from each other.\n  'boringssl_revision': 'e4b6d4f754ba9ec2f1b40a4a091d3f6ad01ea084',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling Fuchsia sdk\n  # and whatever else without interference from each other.\n  'fuchsia_version': 'version:26.20250110.4.1',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling google-toolbox-for-mac\n  # and whatever else without interference from each other.\n  'google_toolbox_for_mac_revision': '42b12f10cd8342f5cb41a1e3e3a2f13fd9943b0d',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling googletest\n  # and whatever else without interference from each other.\n  'googletest_revision': '504ea69cf7e9947be54f808a09b7b08988e84b5f',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling lighttpd\n  # and whatever else without interference from each other.\n  'lighttpd_revision': '9dfa55d15937a688a92cbf2b7a8621b0927d06eb',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling lss\n  # and whatever else without interference from each other.\n  'lss_revision': 'ce877209e11aa69dcfffbd53ef90ea1d07136521',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling NaCl\n  # and whatever else without interference from each other.\n  'nacl_revision': '6944e6b79dbd1b9776681c025bd4f4c281bb4791',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling freetype\n  # and whatever else without interference from each other.\n  'freetype_revision': '1400b20ae8683315f53f00b6c3707fc64faeaa7b',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling freetype\n  # and whatever else without interference from each other.\n  'freetype_testing_revision': '04fa94191645af39750f5eff0a66c49c5cb2c2cc',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling HarfBuzz\n  # and whatever else without interference from each other.\n  'harfbuzz_revision': '1c249be96e27eafd15eb86d832b67fbc3751634b',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling Emoji Segmenter\n  # and whatever else without interference from each other.\n  'emoji_segmenter_revision': '955936be8b391e00835257059607d7c5b72ce744',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling OTS\n  # and whatever else without interference from each other.\n  'ots_revision': '46bea9879127d0ff1c6601b078e2ce98e83fcd33',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling catapult\n  # and whatever else without interference from each other.\n  'catapult_revision': 'c4c972c5f0bebc45d077172aa42d7ba98f3abbbb',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling chromium_variations\n  # and whatever else without interference from each other.\n  'chromium_variations_revision': '7b74300faa5f3675b06c4f10bfaef33c760918e9',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling CrossBench\n  # and whatever else without interference from each other.\n  'crossbench_revision': '0d3512c78fe49298db80e80cf0d1d608ae13dd15',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling libFuzzer\n  # and whatever else without interference from each other.\n  'libfuzzer_revision': 'e31b99917861f891308269c36a32363b120126bb',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling fuzztest\n  # and whatever else without interference from each other.\n  'fuzztest_revision': 'c99c121225fcc175bdc084d83c30f3c806b75afd',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling domato\n  # and whatever else without interference from each other.\n  'domato_revision': '053714bccbda79cf76dac3fee48ab2b27f21925e',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling devtools-frontend\n  # and whatever else without interference from each other.\n  'devtools_frontend_revision': '8245ed152847c99e3313079a696637bca1d5bdd7',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling libprotobuf-mutator\n  # and whatever else without interference from each other.\n  'libprotobuf-mutator': 'a304ec48dcf15d942607032151f7e9ee504b5dcf',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling android_sdk_build-tools_version\n  # and whatever else without interference from each other.\n  'android_sdk_build-tools_version': 'DxwAZ3hD551Neu6ycuW5CPnXFrdleRBd93oX1eB_m9YC',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling android_sdk_emulator_version\n  # and whatever else without interference from each other.\n  'android_sdk_emulator_version': '9lGp8nTUCRRWGMnI_96HcKfzjnxEJKUcfvfwmA3wXNkC',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling android_sdk_platform-tools_version\n  # and whatever else without interference from each other.\n  'android_sdk_platform-tools_version': 'WihaseZR6cojZbkzIqwGhpTp92ztaGfqq8njBU8eTXYC',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling android_sdk_platforms_version\n  # and whatever else without interference from each other.\n  'android_sdk_platforms_version': 'kIXA-9XuCfOESodXEdOBkW5f1ytrGWdbp3HFp1I8A_0C',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling feed\n  # and whatever else without interference from each other.\n  'dawn_revision': 'ab9f198d52730b69f4a208c5afd39abb0236f76a',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling feed\n  # and whatever else without interference from each other.\n  'quiche_revision': '981c424462d9e5210dc843e92b325c93d3bee4e9',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling ink\n  # and whatever else without interference from each other.\n  'ink_revision': 'e5673a4ff2d82f29b22f7bec114161cbc1ff8cf8',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling ink_stroke_modeler\n  # and whatever else without interference from each other.\n  'ink_stroke_modeler_revision': '0999e4cf816b42c770d07916698bce943b873048',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling ios_webkit\n  # and whatever else without interference from each other.\n  'ios_webkit_revision': 'f8c0fe750d94b7db23d193c0b1f31858c2537620',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling libexpat\n  # and whatever else without interference from each other.\n  'libexpat_revision': '624da0f593bb8d7e146b9f42b06d8e6c80d032a3',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling wuffs\n  # and whatever else without interference from each other.\n  'wuffs_revision': 'e3f919ccfe3ef542cfc983a82146070258fb57f8',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling libavif\n  # and whatever else without interference from each other.\n  'libavif_revision': 'e7b34a1f5e9f7024d08311c7bae156061b889882',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling crabbyavif\n  # and whatever else without interference from each other.\n  'crabbyavif_revision': '879ca873d6648a01de65e4cb0b86336b581aa513',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling Speedometer v3.0\n  # and whatever else without interference from each other.\n  'speedometer_main_revision': 'd6b5ffea959ad31e231c203d7446bf8b39e987ce',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling Speedometer v3.0\n  # and whatever else without interference from each other.\n  'speedometer_3.0_revision': '8d67f28d0281ac4330f283495b7f48286654ad7d',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling Speedometer v2.0\n  # and whatever else without interference from each other.\n  'speedometer_2.0_revision': '732af0dfe867f8815e662ac637357e55f285dbbb',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling Speedometer v2.1\n  # and whatever else without interference from each other.\n  'speedometer_2.1_revision': '8bf7946e39e47c875c00767177197aea5727e84a',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling nearby\n  # and whatever else without interference from each other.\n  'nearby_revision': '1864b0b55506bfc1eafc3785502f085f41aa0921',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling securemessage\n  # and whatever else without interference from each other.\n  'securemessage_revision': 'fa07beb12babc3b25e0c5b1f38c16aa8cb6b8f84',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling ukey2\n  # and whatever else without interference from each other.\n  'ukey2_revision': '0275885d8e6038c39b8a8ca55e75d1d4d1727f47',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling feed\n  # and whatever else without interference from each other.\n  'cros_components_revision': '59dd6e3d06e111c6a3d323a92e6478b9bbf15915',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling feed\n  # and whatever else without interference from each other.\n  'resultdb_version': 'git_revision:ebc74d10fa0d64057daa6f128e89f3672eeeec95',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling feed\n  # and whatever else without interference from each other.\n  'libcxxabi_revision':    '7681005c6233e8a21b97e24c1a3c5c6979927d5a',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling feed\n  # and whatever else without interference from each other.\n  'libunwind_revision':    'd1e95b102f113ded38974cf06a65fe0457b6004b',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling feed\n  # and whatever else without interference from each other.\n  'clang_format_revision':    '37f6e68a107df43b7d7e044fd36a13cbae3413f2',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling feed\n  # and whatever else without interference from each other.\n  'highway_revision': '00fe003dac355b979f36157f9407c7c46448958e',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling ffmpeg\n  # and whatever else without interference from each other.\n  'ffmpeg_revision': 'd10a0f8bf5ddcce572df95105152bc74041cae0c',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling beto-core\n  # and whatever else without interference from each other.\n  'betocore_revision': '89563fec14c756482afa08b016eeba9087c8d1e3',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling tsproxy\n  # and whatever else without interference from each other.\n  'webpagereplay_revision': 'd812e180206934eb3b7ae411d82d61bc21c22f70',\n  # Three lines of non-changing comments so that\n  # the commit queue can handle CLs rolling llvm-libc\n  # and whatever else without interference from each other.\n  'llvm_libc_revision':    'cf32ae379c8968df8be7b8b9b1d69115402bccc4',\n\n  # If you change this, also update the libc++ revision in\n  # //buildtools/deps_revisions.gni.\n  'libcxx_revision':       '74dd760826063f15ce4d373b31bc34d1c65e41c2',\n\n  # GN CIPD package version.\n  'gn_version': 'git_revision:c97a86a72105f3328a540f5a5ab17d11989ab7dd',\n\n  # ninja CIPD package.\n  'ninja_package': 'infra/3pp/tools/ninja/',\n\n  # ninja CIPD package version.\n  # https://chrome-infra-packages.appspot.com/p/infra/3pp/tools/ninja\n  'ninja_version': 'version:3@1.12.1.chromium.4',\n\n  # 'magic' variable to tell depot_tools that git submodules should be accepted\n  # but parity with DEPS file is expected.\n  'SUBMODULE_MIGRATION': 'True',\n\n  # condition to allowlist deps to be synced in Cider. Allowlisting is needed\n  # because not all deps are compatible with Cider. Once we migrate everything\n  # to be compatible we can get rid of this allowlisting mecahnism and remove\n  # this condition. Tracking bug for removing this condition: b/349365433\n  'non_git_source': 'True',\n}\n\n# Only these hosts are allowed for dependencies in this DEPS file.\n# If you need to add a new host, contact chrome infrastracture team.\nallowed_hosts = [\n  'android.googlesource.com',\n  'aomedia.googlesource.com',\n  'beto-core.googlesource.com',\n  'boringssl.googlesource.com',\n  'chrome-infra-packages.appspot.com',\n  'chrome-internal.googlesource.com',\n  'chromium.googlesource.com',\n  'dawn.googlesource.com',\n  'pdfium.googlesource.com',\n  'quiche.googlesource.com',\n  'skia.googlesource.com',\n  'swiftshader.googlesource.com',\n  'webrtc.googlesource.com',\n\n   # TODO(337061377): Move into a separate allowed gcs bucket list.\n  'chromium-ads-detection',\n  'chromium-browser-clang',\n  'chromium-clang-format',\n  'chromium-doclava',\n  'chromium-nodejs',\n  'chrome-linux-sysroot',\n  'chromium-fonts',\n  'chromium-style-perftest',\n  'chromium-telemetry',\n  'chromium-webrtc-resources',\n  'perfetto',\n]\n\ndeps = {\n  # NPM dependencies for JavaScript code coverage.\n  'src/third_party/js_code_coverage/node_modules': {\n    'dep_type': 'gcs',\n    'bucket': 'chromium-nodejs',\n    'objects': [\n      {\n        'object_name': 'js_code_coverage/90d7a8ecae092222e585481b64e9928bcf4a689e723a0af4b94922280cd55a48',\n        'sha256sum': '90d7a8ecae092222e585481b64e9928bcf4a689e723a0af4b94922280cd55a48',\n        'size_bytes': 1472459,\n        'generation': 1716929997740855\n      }\n    ]\n\n  },\n  'src/build/linux/debian_bullseye_amd64-sysroot': {\n    'bucket': 'chrome-linux-sysroot',\n    'condition': 'checkout_linux and checkout_x64 and non_git_source',\n    'dep_type': 'gcs',\n    'objects': [\n      {\n        'generation': 1714590045814759,\n        'object_name': 'dec7a3a0fc5b83b909cba1b6d119077e0429a138eadef6bf5a0f2e03b1904631',\n        'sha256sum': 'dec7a3a0fc5b83b909cba1b6d119077e0429a138eadef6bf5a0f2e03b1904631',\n        'size_bytes': 129948576,\n      },\n    ],\n  },\n  'src/build/linux/debian_bullseye_arm64-sysroot': {\n    'bucket': 'chrome-linux-sysroot',\n    'condition': 'checkout_linux and checkout_arm64 and non_git_source',\n    'dep_type': 'gcs',\n    'objects': [\n      {\n        'generation': 1714589974958986,\n        'object_name': '308e23faba3174bd01accfe358467b8a40fad4db4c49ef629da30219f65a275f',\n        'sha256sum': '308e23faba3174bd01accfe358467b8a40fad4db4c49ef629da30219f65a275f',\n        'size_bytes': 108470444,\n      },\n    ],\n  },\n  'src/build/linux/debian_bullseye_armhf-sysroot': {\n    'bucket': 'chrome-linux-sysroot',\n    'condition': 'checkout_linux and checkout_arm and non_git_source',\n    'dep_type': 'gcs',\n    'objects': [\n      {\n        'generation': 1714589870087834,\n        'object_name': 'fe81e7114b97440262bce004caf02c1514732e2fa7f99693b2836932ad1c4626',\n        'sha256sum': 'fe81e7114b97440262bce004caf02c1514732e2fa7f99693b2836932ad1c4626',\n        'size_bytes': 99265992,\n      },\n    ],\n  },\n  'src/build/linux/debian_bullseye_i386-sysroot': {\n    'bucket': 'chrome-linux-sysroot',\n    'condition': 'checkout_linux and (checkout_x86 or checkout_x64) and non_git_source',\n    'dep_type': 'gcs',\n    'objects': [\n      {\n        'generation': 1714589989387491,\n        'object_name': 'b53933120bb08ffc38140a817e3f0f99782254a6bf9622271574fa004e8783a4',\n        'sha256sum': 'b53933120bb08ffc38140a817e3f0f99782254a6bf9622271574fa004e8783a4',\n        'size_bytes': 122047968,\n      },\n    ],\n  },\n  'src/build/linux/debian_bullseye_mips64el-sysroot': {\n    'bucket': 'chrome-linux-sysroot',\n    'condition': 'checkout_linux and checkout_mips64 and non_git_source',\n    'dep_type': 'gcs',\n    'objects': [\n      {\n        'generation': 1714590006168779,\n        'object_name': '783cb79f26736c69e8125788d95ffb65a28172349009d75188838a004280a92b',\n        'sha256sum': '783cb79f26736c69e8125788d95ffb65a28172349009d75188838a004280a92b',\n        'size_bytes': 103362108,\n      },\n    ],\n  },\n  'src/build/linux/debian_bullseye_mipsel-sysroot': {\n    'bucket': 'chrome-linux-sysroot',\n    'condition': 'checkout_linux and checkout_mips and non_git_source',\n    'dep_type': 'gcs',\n    'objects': [\n      {\n        'generation': 1714589936675352,\n        'object_name': 'fcf8c3931476dd097c58f2f5d44621c7090b135e85ab56885aa4b44f4bd6cdb5',\n        'sha256sum': 'fcf8c3931476dd097c58f2f5d44621c7090b135e85ab56885aa4b44f4bd6cdb5',\n        'size_bytes': 96161964,\n      },\n    ],\n  },\n  'src/buildtools/win-format': {\n    'bucket': 'chromium-clang-format',\n    'condition': 'host_os == \"win\" and non_git_source',\n    'dep_type': 'gcs',\n    'objects': [\n      {\n        'object_name': '49458d4c1e884a38308f8dc6a2c7eb55fc478755',\n        'sha256sum': '2f964ea355762d28005568a1cf888114d13b18631c618543586fb40589a22224',\n        'size_bytes': 3214848,\n        'generation': 1699478813805380,\n        'output_file': 'clang-format.exe',\n      },\n    ],\n  },\n  'src/buildtools/mac-format': {\n    'bucket': 'chromium-clang-format',\n    'condition': 'host_os == \"mac\" and host_cpu == \"x64\" and non_git_source',\n    'dep_type': 'gcs',\n    'objects': [\n      {\n        'object_name': '0b4bd257a1f4cd27d27d6919b0f9e52ecdfa8f1e',\n        'sha256sum': '0f3c38a6af0a04fd4161f1948f02e83a8827727e77242d3b5b61ae4f009a270a',\n        'size_bytes': 2869976,\n        'generation': 1699478821342910,\n        'output_file': 'clang-format',\n      },\n    ],\n  },\n  'src/buildtools/mac_arm64-format': {\n    'bucket': 'chromium-clang-format',\n    'condition': 'host_os == \"mac\" and host_cpu == \"arm64\" and non_git_source',\n    'dep_type': 'gcs',\n    'objects': [\n      {\n        'object_name': '96c34e77259c4cc1fc7bdf067fc058bfd341ab85',\n        'sha256sum': '66c5243cd530702defcbe18dffdbed0da9a3d1474b158a949580f6d269fbac17',\n        'size_bytes': 2847744,\n        'generation': 1699478828600976,\n        'output_file': 'clang-format',\n      },\n    ],\n  },\n  'src/buildtools/linux64-format': {\n    'bucket': 'chromium-clang-format',\n    'condition': 'host_os == \"linux\" and non_git_source',\n    'dep_type': 'gcs',\n    'objects': [\n      {\n        'object_name': 'b42097ca924d1f1736a5a7806068fed9d7345eb4',\n        'sha256sum': '82df59a7d4390892c3eeaf0c8bf626e2869f1138a6ad3eb90dd51da0011ba630',\n        'size_bytes': 3539912,\n        'generation': 1699478806427152,\n        'output_file': 'clang-format',\n      },\n    ],\n  },\n  'src/third_party/data_sharing_sdk': {\n      'packages': [\n          {\n              'package': 'chrome_internal/third_party/google3/data_sharing_sdk',\n              'version': 'auu6Zggy4Soot7tUJT28qMhahwQ0zuXEmd1b3EGcpeEC',\n          },\n      ],\n      'condition': 'checkout_src_internal and non_git_source',\n      'dep_type': 'cipd',\n  },\n  # Pull down Node binaries for WebUI toolchain.\n  # The Linux binary is always downloaded regardless of host os and architecture\n  # since remote node actions run on Linux worker.\n  # See also //third_party/node/node.gni\n  'src/third_party/node/linux': {\n      'dep_type': 'gcs',\n      'condition': 'non_git_source',\n      'bucket': 'chromium-nodejs',\n      'objects': [\n          {\n              'object_name': 'fa98c6432de572206bc5519f85e9c96bd518b039',\n              'sha256sum': 'fb563633b5bfe2d4307075c54c6bb54664a3b5ec6bc811f5b15742720549007a',\n              'size_bytes': 50288755,\n              'generation': 1730835522207929,\n              'output_file': 'node-linux-x64.tar.gz',\n          },\n      ],\n  },\n  # The Mac x64/arm64 binaries are downloaded regardless of host architecture\n  # since it's possible to cross-compile for the other architecture. This can\n  # cause problems for tests that use node if the test device architecture does\n  # not match the architecture of the compile machine.\n  'src/third_party/node/mac': {\n      'dep_type': 'gcs',\n      'condition': 'host_os == \"mac\" and non_git_source',\n      'bucket': 'chromium-nodejs',\n      'objects': [\n          {\n              'object_name': '4c8952a65a1ce7a2e4cff6db68f9b7454c46349f',\n              'sha256sum': 'fadb4530fbe6e35ed298848c66102a0aa7d92974789e6222c4eadee26a381e7e',\n              'size_bytes': 45672893,\n              'generation': 1730835514382259,\n              'output_file': 'node-darwin-x64.tar.gz',\n          },\n      ],\n  },\n  'src/third_party/node/mac_arm64': {\n      'dep_type': 'gcs',\n      'condition': 'host_os == \"mac\" and non_git_source',\n      'bucket': 'chromium-nodejs',\n      'objects': [\n          {\n              'object_name': '0886aa6a146cb5c213cb09b59ed1075982e4cb57',\n              'sha256sum': 'd39e2d44d58bb89740b9aca1073959fc92edbdbbe810a5e48448e331cf72c196',\n              'size_bytes': 44929037,\n              'generation': 1730835518292126,\n              'output_file': 'node-darwin-arm64.tar.gz',\n          },\n      ],\n  },\n  'src/third_party/node/win': {\n      'dep_type': 'gcs',\n      'condition': 'host_os == \"win\" and non_git_source',\n      'bucket': 'chromium-nodejs',\n      'objects': [\n          {\n              'object_name': '907d7e104e7389dc74cec7d32527c1db704b7f96',\n              'sha256sum': '7447c4ece014aa41fb2ff866c993c708e5a8213a00913cc2ac5049ea3ffc230d',\n              'size_bytes': 80511640,\n              'generation': 1730835526374028,\n              'output_file': 'node.exe',\n          },\n      ],\n  },\n  # Pull down NPM dependencies for WebUI toolchain.\n  'src/third_party/node/node_modules': {\n    'bucket': 'chromium-nodejs',\n    'dep_type': 'gcs',\n    'condition': 'non_git_source',\n    'objects': [\n      {\n        'object_name': '59332695e189485e2e2b06e60e4d49d3d54b8e92',\n        'sha256sum': 'a40ca106fa4d6b25cd0a3bb1c74991666ae91e9b5335799f1243da41f6d782ab',\n        'size_bytes': 9100683,\n        'generation': 1736178718186041,\n        'output_file': 'node_modules.tar.gz',\n      },\n    ],\n  },\n  'src/third_party/llvm-build/Release+Asserts': {\n    'dep_type': 'gcs',\n    'bucket': 'chromium-browser-clang',\n    'condition': 'not llvm_force_head_revision',\n    'objects': [\n      {\n        # The Android libclang_rt.builtins libraries are currently only included in the Linux clang package.\n        'object_name': 'Linux_x64/clang-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': 'e649b5ae7db215ede1d17d63e60f187c9773bc3bb465e4ff25148f58783c0588',\n        'size_bytes': 54177680,\n        'generation': 1736382900858370,\n        'condition': '(host_os == \"linux\" or checkout_android) and non_git_source',\n      },\n      {\n        'object_name': 'Linux_x64/clang-tidy-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': '98aeee7a6ea7b555868c16d009f0232c421ef88cb5a6a60c38b78255dd4faced',\n        'size_bytes': 13149440,\n        'generation': 1736382900905802,\n        'condition': 'host_os == \"linux\" and checkout_clang_tidy and non_git_source',\n      },\n      {\n        'object_name': 'Linux_x64/clangd-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': '767ad010ec7d99a62a2c6535cca8f3bc55c4866b2619462fb303e0bc9a5f1977',\n        'size_bytes': 27687240,\n        'generation': 1736382900911727,\n        'condition': 'host_os == \"linux\" and checkout_clangd and non_git_source',\n      },\n      {\n        'object_name': 'Linux_x64/llvm-code-coverage-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': 'b61cee4a240859bab2b541721a5afd8333c0fc4eea2e568a63cf71529efefa76',\n        'size_bytes': 2289668,\n        'generation': 1736382900990620,\n        'condition': 'host_os == \"linux\" and checkout_clang_coverage_tools and non_git_source',\n      },\n      {\n        'object_name': 'Linux_x64/llvmobjdump-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': 'a2eb777a2013c9d647c957b9cbb3d3937b66c6443ed9118d8a1eeb3fea6250d3',\n        'size_bytes': 5348020,\n        'generation': 1736382900960786,\n        'condition': '(checkout_linux or checkout_mac or checkout_android and host_os != \"mac\") and non_git_source',\n      },\n      {\n        'object_name': 'Mac/clang-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': '40b2964db638f50f62c410202a0e150809b521eab8d764344dfcc82ce2fedda1',\n        'size_bytes': 49122796,\n        'generation': 1736382902685415,\n        'condition': 'host_os == \"mac\" and host_cpu == \"x64\"',\n      },\n      {\n        'object_name': 'Mac/clang-mac-runtime-library-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': '6dd34f8c8b70a1bf1453a74204c62669abe84e8e7f9625cbc16327b3fab8b943',\n        'size_bytes': 972748,\n        'generation': 1736382909396308,\n        'condition': 'checkout_mac and not host_os == \"mac\"',\n      },\n      {\n        'object_name': 'Mac/clang-tidy-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': '194df82314e98d9c2b8c3d0810706bdedcdd60997b622eea07a1628ab94f28c3',\n        'size_bytes': 12765652,\n        'generation': 1736382902742379,\n        'condition': 'host_os == \"mac\" and host_cpu == \"x64\" and checkout_clang_tidy',\n      },\n      {\n        'object_name': 'Mac/clangd-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': 'a151f0d3958c8f469339c57f60e336cbf066fa94c5c841ac6b8e05cd09077890',\n        'size_bytes': 26561888,\n        'generation': 1736382902744981,\n        'condition': 'host_os == \"mac\" and host_cpu == \"x64\" and checkout_clangd',\n      },\n      {\n        'object_name': 'Mac/llvm-code-coverage-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': 'e14e803b4841a7a392f960278e7225b61453f1cca3086e7cdfb1c3cee813a85d',\n        'size_bytes': 2250480,\n        'generation': 1736382902843064,\n        'condition': 'host_os == \"mac\" and host_cpu == \"x64\" and checkout_clang_coverage_tools',\n      },\n      {\n        'object_name': 'Mac_arm64/clang-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': '11238b743b1c3157b64f261118ee0884f5b7f5f9afc235d4c47c1afc52556b1b',\n        'size_bytes': 43127752,\n        'generation': 1736382911237265,\n        'condition': 'host_os == \"mac\" and host_cpu == \"arm64\"',\n      },\n      {\n        'object_name': 'Mac_arm64/clang-tidy-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': '00a42f1c03272d8f9e0c9531712110422936fb9365c66206becdc7dfa27500d8',\n        'size_bytes': 11362620,\n        'generation': 1736382911277357,\n        'condition': 'host_os == \"mac\" and host_cpu == \"arm64\" and checkout_clang_tidy',\n      },\n      {\n        'object_name': 'Mac_arm64/clangd-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': 'eb2c179811101e49a6156b55624a6292688c0a4ef1e79d0b05ef03f2a17f405f',\n        'size_bytes': 22998836,\n        'generation': 1736382911247931,\n        'condition': 'host_os == \"mac\" and host_cpu == \"arm64\" and checkout_clangd',\n      },\n      {\n        'object_name': 'Mac_arm64/llvm-code-coverage-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': '9c06d812bf98fc1ca1de9afaf031efa2334b3c1039969ee90689a810726db83c',\n        'size_bytes': 1977132,\n        'generation': 1736382911314127,\n        'condition': 'host_os == \"mac\" and host_cpu == \"arm64\" and checkout_clang_coverage_tools',\n      },\n      {\n        'object_name': 'Win/clang-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': '554d4d0b22b7c682dd05bb912b9f2c1a13248d38660f3f1e15444ef0970fb0e5',\n        'size_bytes': 46344548,\n        'generation': 1736382920155077,\n        'condition': 'host_os == \"win\"',\n      },\n      {\n        'object_name': 'Win/clang-tidy-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': 'fbb40ae15b7c2fc408d8329eb6274d3422c6fb4110f27655adb8cd642d7b62b5',\n        'size_bytes': 12970212,\n        'generation': 1736382920246226,\n        'condition': 'host_os == \"win\" and checkout_clang_tidy',\n      },\n      {\n        'object_name': 'Win/clang-win-runtime-library-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': '98a76f1ec725bbf112fe91ba007bc39ca1efe1f1923d1c5a7cf2812e8c34b218',\n        'size_bytes': 2458356,\n        'generation': 1736382926959753,\n        'condition': 'checkout_win and not host_os == \"win\"',\n      },\n      {\n        'object_name': 'Win/clangd-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': 'f766b3623240184b7d668b8e4e9c6070f6c56ee676cfed9a98375653922ccda8',\n        'size_bytes': 25602964,\n        'generation': 1736382920261395,\n       'condition': 'host_os == \"win\" and checkout_clangd',\n      },\n      {\n        'object_name': 'Win/llvm-code-coverage-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': '7f23a02c44dac5fb1139cc5943fc764b7c49bab152c76a416785f1413cfbaf0d',\n        'size_bytes': 2361572,\n        'generation': 1736382920285247,\n        'condition': 'host_os == \"win\" and checkout_clang_coverage_tools',\n      },\n      {\n        'object_name': 'Win/llvmobjdump-llvmorg-20-init-17108-g29ed6000-1.tar.xz',\n        'sha256sum': '8884520329694e6f35ab9790f65a474e04bafc541d6d40592f43356f44ee0d40',\n        'size_bytes': 5439908,\n        'generation': 1736382920291826,\n        'condition': 'checkout_linux or checkout_mac or checkout_android and host_os == \"win\"',\n      },\n    ]\n  },\n  # Update prebuilt Rust toolchain.\n  'src/third_party/rust-toolchain': {\n    'dep_type': 'gcs',\n    'bucket': 'chromium-browser-clang',\n    'objects': [\n      {\n        'object_name': 'Linux_x64/rust-toolchain-ad211ced81509462cdfe4c29ed10f97279a0acae-1-llvmorg-20-init-17108-g29ed6000.tar.xz',\n        'sha256sum': '1363529d7285ca8623c6408d49419921d459bbc461fa26ae57f5b5a620a57cc2',\n        'size_bytes': 124591376,\n        'generation': 1736456746490086,\n        'condition': 'host_os == \"linux\" and non_git_source',\n      },\n      {\n        'object_name': 'Mac/rust-toolchain-ad211ced81509462cdfe4c29ed10f97279a0acae-1-llvmorg-20-init-17108-g29ed6000.tar.xz',\n        'sha256sum': 'bc2446c14bf6316ab2a5797b65daf229aecb65e1fa25184ec740137196ec111e',\n        'size_bytes': 117535632,\n        'generation': 1736456748324065,\n        'condition': 'host_os == \"mac\" and host_cpu == \"x64\"',\n      },\n      {\n        'object_name': 'Mac_arm64/rust-toolchain-ad211ced81509462cdfe4c29ed10f97279a0acae-1-llvmorg-20-init-17108-g29ed6000.tar.xz',\n        'sha256sum': '879947f21091c62096297c34c3e0a3f2e1f79260fb9b3c3c40091d62c65fb04e',\n        'size_bytes': 102626588,\n        'generation': 1736456750286270,\n        'condition': 'host_os == \"mac\" and host_cpu == \"arm64\"',\n      },\n      {\n        'object_name': 'Win/rust-toolchain-ad211ced81509462cdfe4c29ed10f97279a0acae-1-llvmorg-20-init-17108-g29ed6000.tar.xz',\n        'sha256sum': '294a0a338bc46626b38d0d243f6f9a308dc2517cbf8961e2dc0edbf51b8d0ae9',\n        'size_bytes': 176895424,\n        'generation': 1736456752082017,\n        'condition': 'host_os == \"win\"',\n      },\n    ],\n  },\n  'src/third_party/clang-format/script':\n    Var('chromium_git') +\n    '/external/github.com/llvm/llvm-project/clang/tools/clang-format.git@' +\n    Var('clang_format_revision'),\n  'src/buildtools/linux64': {\n    'packages': [\n      {\n        'package': 'gn/gn/linux-${{arch}}',\n        'version': Var('gn_version'),\n      }\n    ],\n    'dep_type': 'cipd',\n    'condition': 'host_os == \"linux\" and non_git_source',\n  },\n  'src/buildtools/mac': {\n    'packages': [\n      {\n        'package': 'gn/gn/mac-${{arch}}',\n        'version': Var('gn_version'),\n      }\n    ],\n    'dep_type': 'cipd',\n    'condition': 'host_os == \"mac\"',\n  },\n  'src/buildtools/win': {\n    'packages': [\n      {\n        'package': 'gn/gn/windows-amd64',\n        'version': Var('gn_version'),\n      }\n    ],\n    'dep_type': 'cipd',\n    'condition': 'host_os == \"win\"',\n  },\n  'src/buildtools/reclient': {\n    'packages': [\n      {\n        'package': Var('reclient_package') + '${{platform}}',\n        'version': Var('reclient_version'),\n      }\n    ],\n    'condition': 'non_git_source',\n    'dep_type': 'cipd',\n  },\n\n  # We don't know target_cpu at deps time. At least until there's a universal\n  # binary of httpd-php, pull both intel and arm versions in DEPS and then pick\n  # the right one at runtime.\n  'src/third_party/apache-mac': {\n    'packages': [\n      {\n        'package': 'infra/3pp/tools/httpd-php/mac-amd64',\n        'version': 'version:2@httpd2.4.38.php7.3.31.chromium.3',\n      },\n    ],\n    'dep_type': 'cipd',\n    'condition': 'checkout_mac or checkout_ios',\n  },\n  'src/third_party/apache-mac-arm64': {\n    'packages': [\n      {\n        'package': 'infra/3pp/tools/httpd-php/mac-arm64',\n        'version': 'version:2@httpd2.4.38.php7.3.31.chromium.3',\n      },\n    ],\n    'dep_type': 'cipd',\n    'condition': 'checkout_mac or checkout_ios',\n  },\n\n  'src/third_party/apache-linux': {\n    'packages': [\n      {\n        'package': 'infra/3pp/tools/httpd-php/linux-amd64',\n        'version': 'version:2@httpd2.4.38.php7.3.31.chromium.3',\n      },\n    ],\n    'dep_type': 'cipd',\n    'condition': '(host_os == \"linux\") and non_git_source',\n  },\n\n  'src/third_party/apache-windows-arm64': {\n    'packages': [\n        {\n            'package': 'infra/3pp/tools/httpd-php/windows-arm64',\n            'version': 'version:3@httpd2.4.55-php8.2.5.chromium.6',\n        }\n    ],\n    'dep_type': 'cipd',\n    'condition': 'checkout_win'\n  },\n\n  'src/third_party/aosp_dalvik/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/aosp_dalvik/linux-amd64',\n              'version': 'version:2@13.0.0_r24.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/cronet_android_mainline_clang/linux-amd64': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/cronet_android_mainline_clang/linux-amd64',\n              'version': 'V0dPF9Cc6TYEaE6vsPyJoFO6xD2_NglmR7Gbqrp7d-sC',\n          },\n      ],\n      'condition': 'checkout_android and host_os == \"linux\"',\n      'dep_type': 'cipd',\n  },\n\n  'src/android_webview/tools/cts_archive/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/android_webview/tools/cts_archive',\n              'version': 'UYQZhJpB3MWpJIAcesI-M1bqRoTghiKCYr_SD9tPDewC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/chrome/browser/resources/preinstalled_web_apps/internal': {\n    'url': Var('chrome_git') + '/chrome/components/default_apps.git' + '@' + 'ef722130bdfed458eb5380f10585b880ae5dff4e',\n    'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/installer/mac/third_party/xz/xz': {\n      'url': Var('chromium_git') + '/chromium/deps/xz.git' + '@' + '10d236393a338a55830db628356f022a91978b61',\n      'condition': 'checkout_mac',\n  },\n\n  'src/chrome/release_scripts': {\n      'url': Var('chrome_git') + '/chrome/tools/release/scripts' + '@' + '2d23cdc03824f73a4fce61d34cbbe9828e56b962',\n      'condition': 'checkout_chrome_release_scripts',\n  },\n\n  'src/third_party/libc++/src':\n    Var('chromium_git') +\n    '/external/github.com/llvm/llvm-project/libcxx.git' + '@' +\n    Var('libcxx_revision'),\n  'src/third_party/libc++abi/src':\n    Var('chromium_git') +\n    '/external/github.com/llvm/llvm-project/libcxxabi.git' + '@' +\n    Var('libcxxabi_revision'),\n  'src/third_party/libunwind/src':\n    Var('chromium_git') +\n    '/external/github.com/llvm/llvm-project/libunwind.git' + '@' +\n    Var('libunwind_revision'),\n  'src/third_party/llvm-libc/src':\n    Var('chromium_git') +\n    '/external/github.com/llvm/llvm-project/libc.git' + '@' +\n    Var('llvm_libc_revision'),\n\n  'src/third_party/updater/chrome_linux64/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_linux and non_git_source',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chrome_linux64',\n          'version': 'ytJ0UbU9gMLUMLRQlmqQpGpOy1dYswI3rOJ0ILnIFbUC',\n        },\n      ],\n  },\n\n  'src/third_party/updater/chrome_mac_universal/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_mac',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chrome_mac_universal',\n          'version': 'gzutuY-G7u8n5746jgmishm8uWjUR070TXdFc23Ea7YC',\n        },\n      ],\n  },\n\n  'src/third_party/updater/chrome_mac_universal_prod/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_mac',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chrome_mac_universal_prod',\n          # 129.0.6651.0\n          'version': 'IrAigaqukp1GbaksroZcR3Jo0oOYKg9kzatjzNNbXKQC',\n        },\n      ],\n  },\n\n  # version:2@132.0.6833.0\n  'src/third_party/updater/chrome_win_arm64/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_win',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chrome_win_arm64',\n          'version': 'OoGMyCUHah7D_AOVm4RpVoPOdkGqjFHuSMcoKTZ0rlsC',\n        },\n      ],\n  },\n\n  # version:2@132.0.6833.0\n  'src/third_party/updater/chrome_win_x86/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_win',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chrome_win_x86',\n          'version': 'gqhcrVQFtXAKUu7yEISTlbrBpPaBUnQZ6FdOo5E4HLQC',\n        },\n      ],\n  },\n\n  # version:2@132.0.6833.0\n  'src/third_party/updater/chrome_win_x86_64/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_win',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chrome_win_x86_64',\n          'version': 'koo1i4cAVdOK2-re2VGbx-crCcbTz9h0qumUk1hyEt0C',\n        },\n      ],\n  },\n\n  # Branded builds for testing previous interface without `install_id` support.\n  'src/third_party/updater/chrome_linux64_sans_iid/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_linux and non_git_source',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chrome_linux64',\n          'version': 'ytJ0UbU9gMLUMLRQlmqQpGpOy1dYswI3rOJ0ILnIFbUC',\n        },\n      ],\n  },\n\n  'src/third_party/updater/chrome_mac_universal_sans_iid/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_mac',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chrome_mac_universal',\n          'version': 'gzutuY-G7u8n5746jgmishm8uWjUR070TXdFc23Ea7YC',\n        },\n      ],\n  },\n\n  'src/third_party/updater/chrome_mac_universal_prod_sans_iid/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_mac',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chrome_mac_universal_prod',\n          # 129.0.6651.0\n          'version': 'IrAigaqukp1GbaksroZcR3Jo0oOYKg9kzatjzNNbXKQC',\n        },\n      ],\n  },\n\n  'src/third_party/updater/chrome_win_arm64_sans_iid/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_win',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chrome_win_arm64',\n          'version': 'OoGMyCUHah7D_AOVm4RpVoPOdkGqjFHuSMcoKTZ0rlsC',\n        },\n      ],\n  },\n\n  'src/third_party/updater/chrome_win_x86_sans_iid/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_win',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chrome_win_x86',\n          'version': 'gqhcrVQFtXAKUu7yEISTlbrBpPaBUnQZ6FdOo5E4HLQC',\n        },\n      ],\n  },\n\n  'src/third_party/updater/chrome_win_x86_64_sans_iid/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_win',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chrome_win_x86_64',\n          'version': 'koo1i4cAVdOK2-re2VGbx-crCcbTz9h0qumUk1hyEt0C',\n        },\n      ],\n  },\n\n  'src/third_party/updater/chromium_linux64/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_linux and non_git_source',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chromium_linux64',\n          'version': 'OLbfeePAbqPnFqcPmkFtR-GK8dN3T3NeH2AChZwBHjgC',\n        },\n      ],\n  },\n\n  # A somewhat recent Chromium-branded updater build. (x86_64)\n  'src/third_party/updater/chromium_mac_amd64/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_mac',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chromium_mac_amd64',\n          'version': 'zVv93X5XSClxTR1YejkQuBdSpye7JfPS_h6GcH1N4i4C',\n        },\n      ],\n  },\n\n  # A somewhat recent Chromium-branded updater build. (ARM64)\n  'src/third_party/updater/chromium_mac_arm64/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_mac',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chromium_mac_arm64',\n          'version': 'Va20qxSst3lq4WfEZlWiwzXCpSo5XbhhuqJXyqzvhF8C',\n        },\n      ],\n  },\n\n  # r1372006\n  'src/third_party/updater/chromium_win_arm64/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_win',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chromium_win_arm64',\n          'version': 'ksRzLnqewvz7P-YMX2e8mxZuDI1hgPtLNCuAXIisXhoC',\n        },\n      ],\n  },\n\n  # r1372046\n  'src/third_party/updater/chromium_win_x86/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_win',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chromium_win_x86',\n          'version': 'tcFWGGE3wmwKDhT_s-9mzPiQVYxMOI1U9sRAhm1_5QcC',\n        },\n      ],\n  },\n\n  # r1372030\n  'src/third_party/updater/chromium_win_x86_64/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_win',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chromium_win_x86_64',\n          'version': 'iXamEEmbStVBV_c-vEG4Xtrda8tTqSRCZ-tmE7VRHb0C',\n        },\n      ],\n  },\n\n  # Chromium builds for testing previous interface without `install_id` support.\n  'src/third_party/updater/chromium_linux64_sans_iid/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_linux and non_git_source',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chromium_linux64',\n          'version': 'OLbfeePAbqPnFqcPmkFtR-GK8dN3T3NeH2AChZwBHjgC',\n        },\n      ],\n  },\n\n  'src/third_party/updater/chromium_mac_amd64_sans_iid/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_mac',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chromium_mac_amd64',\n          'version': 'zVv93X5XSClxTR1YejkQuBdSpye7JfPS_h6GcH1N4i4C',\n        },\n      ],\n  },\n\n  'src/third_party/updater/chromium_mac_arm64_sans_iid/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_mac',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chromium_mac_arm64',\n          'version': 'Va20qxSst3lq4WfEZlWiwzXCpSo5XbhhuqJXyqzvhF8C',\n        },\n      ],\n  },\n\n  'src/third_party/updater/chromium_win_arm64_sans_iid/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_win',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chromium_win_arm64',\n          'version': 'ksRzLnqewvz7P-YMX2e8mxZuDI1hgPtLNCuAXIisXhoC',\n        },\n      ],\n  },\n\n  'src/third_party/updater/chromium_win_x86_sans_iid/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_win',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chromium_win_x86',\n          'version': 'tcFWGGE3wmwKDhT_s-9mzPiQVYxMOI1U9sRAhm1_5QcC',\n        },\n      ],\n  },\n\n  'src/third_party/updater/chromium_win_x86_64_sans_iid/cipd': {\n      'dep_type': 'cipd',\n      'condition': 'checkout_win',\n      'packages': [\n        {\n          'package': 'chromium/third_party/updater/chromium_win_x86_64',\n          'version': 'iXamEEmbStVBV_c-vEG4Xtrda8tTqSRCZ-tmE7VRHb0C',\n        },\n      ],\n  },\n\n  'src/chrome/test/data/autofill/captured_sites/artifacts': {\n    'url': Var('chrome_git') + '/chrome/test/captured_sites/autofill.git' + '@' + '8c66a34eccf070d66903db5db487bc1de597e7c6',\n    'condition': 'checkout_chromium_autofill_test_dependencies',\n  },\n\n  'src/chrome/test/data/password/captured_sites/artifacts': {\n    'url': Var('chrome_git') + '/chrome/test/captured_sites/password.git' + '@' + '61b62cfe23abcdb7e86e3aa6b0690bd457d04604',\n    'condition': 'checkout_chromium_password_manager_test_dependencies',\n  },\n\n  'src/chrome/test/data/perf/canvas_bench':\n    Var('chromium_git') + '/chromium/canvas_bench.git' + '@' + 'a7b40ea5ae0239517d78845a5fc9b12976bfc732',\n\n  'src/chrome/test/data/perf/frame_rate/content':\n    Var('chromium_git') + '/chromium/frame_rate/content.git' + '@' + 'c10272c88463efeef6bb19c9ec07c42bc8fe22b9',\n\n  'src/chrome/test/data/safe_browsing/dmg': {\n    'packages': [\n      {\n        'package': 'chromium/chrome/test/data/safe_browsing/dmg',\n        'version': '03TLfNQgc59nHmyWtYWJfFaUrEW8QDJJzXwm-672m-QC',\n      },\n    ],\n    'condition': 'checkout_mac',\n    'dep_type': 'cipd',\n  },\n\n  'src/chrome/test/data/xr/webvr_info':\n    Var('chromium_git') + '/external/github.com/toji/webvr.info.git' + '@' + 'c58ae99b9ff9e2aa4c524633519570bf33536248',\n\n  'src/clank': {\n    'url': Var('chrome_git') + '/clank/internal/apps.git' + '@' +\n    'dbee4805fa8597c96cfcf0e4f44e77ae9f50901c',\n    'condition': 'checkout_android and checkout_src_internal',\n  },\n\n  'src/docs/website': {\n    'url': Var('chromium_git') + '/website.git' + '@' + '939010115caac895e1879c5af408c4550a547db6',\n  },\n\n  'src/ios/third_party/earl_grey2/src': {\n      'url': Var('chromium_git') + '/external/github.com/google/EarlGrey.git' + '@' + '7bf6fffe602a0149a6a028a923484819352ed796',\n      'condition': 'checkout_ios',\n  },\n\n  'src/ios/third_party/edo/src': {\n      'url': Var('chromium_git') + '/external/github.com/google/eDistantObject.git' + '@' + '8c825efc8ba6ca9147a148445449470a66b9dc54',\n      'condition': 'checkout_ios',\n  },\n\n  'src/ios/third_party/gtx/src': {\n      'url': Var('chromium_git') + '/external/github.com/google/GTXiLib.git' + '@' + '0e6d6628c5b4d733dfc8f605ab576dcbb72aeeb9',\n      'condition': 'checkout_ios',\n  },\n\n  'src/ios/third_party/lottie/src': {\n      'url': Var('chromium_git') + '/external/github.com/airbnb/lottie-ios.git' + '@' + '4a4367659c0b8576d4a106669ff2ba129026085f',\n      'condition': 'checkout_ios',\n  },\n\n  'src/ios/third_party/material_components_ios/src': {\n      'url': Var('chromium_git') + '/external/github.com/material-components/material-components-ios.git' + '@' + '5c9ba055eef03a043b7cf5191de54e1197fee86a',\n      'condition': 'checkout_ios',\n  },\n\n  'src/ios/third_party/material_font_disk_loader_ios/src': {\n      'url': Var('chromium_git') + '/external/github.com/material-foundation/material-font-disk-loader-ios.git' + '@' + '93acc021e3034898716028822cb802a3a816be7e',\n      'condition': 'checkout_ios',\n  },\n\n  'src/ios/third_party/material_internationalization_ios/src': {\n      'url': Var('chromium_git') + '/external/github.com/material-foundation/material-internationalization-ios.git' + '@' + '305aa8d276f5137c98c5c1c888efc22e02251ee7',\n      'condition': 'checkout_ios',\n  },\n\n  'src/ios/third_party/material_roboto_font_loader_ios/src': {\n      'url': Var('chromium_git') + '/external/github.com/material-foundation/material-roboto-font-loader-ios.git' + '@' + '4be05d4676645febc453a6cde7f5adfb1b785dc1',\n      'condition': 'checkout_ios',\n  },\n\n  'src/ios/third_party/material_sprited_animation_view_ios/src': {\n      'url': Var('chromium_git') + '/external/github.com/material-foundation/material-sprited-animation-view-ios.git' + '@' + '8af9adaa182044cf2920dfb620b863669e1aeb7c',\n      'condition': 'checkout_ios',\n  },\n\n  'src/ios/third_party/material_text_accessibility_ios/src': {\n      'url': Var('chromium_git') + '/external/github.com/material-foundation/material-text-accessibility-ios.git' + '@' + '8cd910c1c8bbae261ae0d7e873ed96c69a386448',\n      'condition': 'checkout_ios',\n  },\n\n  'src/ios/third_party/motion_interchange_objc/src': {\n      'url': Var('chromium_git') + '/external/github.com/material-motion/motion-interchange-objc.git' + '@' + '2f8b548f74c52f71d4c2160715a4ba9c887321dd',\n      'condition': 'checkout_ios',\n  },\n\n  'src/ios/third_party/motion_animator_objc/src': {\n      'url': Var('chromium_git') + '/external/github.com/material-motion/motion-animator-objc.git' + '@' + '296f529321dd7c59c6284c7ccd85dec978c225cc',\n      'condition': 'checkout_ios',\n  },\n\n  'src/ios/third_party/motion_transitioning_objc/src': {\n      'url': Var('chromium_git') + '/external/github.com/material-motion/motion-transitioning-objc.git' + '@' + '1fe4a9d81433c1d43e54b118f29642e9b233907b',\n      'condition': 'checkout_ios',\n  },\n\n  'src/ios/third_party/ochamcrest/src': {\n      'url': Var('chromium_git') + '/external/github.com/hamcrest/OCHamcrest.git' + '@' + '92d9c14d13bb864255e65c09383564653896916b',\n      'condition': 'checkout_ios',\n  },\n\n  'src/ios/third_party/webkit/src': {\n      'url': Var('chromium_git') + '/external/github.com/WebKit/webkit.git' +\n             '@' + Var('ios_webkit_revision'),\n      'condition': 'checkout_ios and checkout_ios_webkit'\n  },\n\n  'src/media/cdm/api':\n    Var('chromium_git') + '/chromium/cdm.git' + '@' + '06395a2863cb1ebdb47617a995b73f95c14fe120',\n\n  'src/native_client': {\n      'url': Var('chromium_git') + '/native_client/src/native_client.git' + '@' + Var('nacl_revision'),\n      'condition': 'checkout_nacl',\n  },\n\n  'src/net/third_party/quiche/src':\n    Var('quiche_git') + '/quiche.git' + '@' +  Var('quiche_revision'),\n\n  'src/testing/libfuzzer/fuzzers/wasm_corpus':\n    Var('chromium_git') + '/v8/fuzzer_wasm_corpus.git' + '@' +  '1df5e50a45db9518a56ebb42cb020a94a090258b',\n\n  'src/tools/copybara': {\n      'packages' : [\n          {\n              'package': 'infra/3pp/tools/copybara',\n              'version': 'IGfMEXgS5ZJsyZqZ8RRICpBymRDCShc1fYuAvRggdnMC',\n          },\n      ],\n      'condition': 'host_os == \"linux\" and checkout_copybara',\n      'dep_type': 'cipd',\n  },\n\n  'src/tools/luci-go': {\n      'packages': [\n        {\n          'package': 'infra/tools/luci/cas/${{platform}}',\n          'version': Var('luci_go'),\n        },\n        # TODO(crbug.com/382506663): Remove after investigation/deprecation\n        {\n          'package': 'infra/tools/luci/isolate/${{platform}}',\n          'version': Var('luci_go'),\n        },\n        {\n          'package': 'infra/tools/luci/swarming/${{platform}}',\n          'version': Var('luci_go'),\n        },\n      ],\n      'condition': 'non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/accessibility_test_framework/src': {\n      'url': Var('chromium_git') + '/external/github.com/google/Accessibility-Test-Framework-for-Android.git' + '@' + '4a764c690353ea136c82f1a696a70bf38d1ef5fe',\n  },\n\n  'src/third_party/android_build_tools/protoc/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_build_tools/protoc',\n              'version': 'ivH_8voaWaRDbk7bDHj8n5YR2IH7sFuenkqy0bVOb2cC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_toolchain/ndk': {\n      'packages': [\n            {\n                'package': 'chromium/third_party/android_toolchain/android_toolchain',\n                'version': 'Idl-vYnWGnM8K3XJhM3h6zjYVDXlnljVz3FE00V9IM8C',\n            },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/androidx/cipd': {\n    'packages': [\n      {\n          'package': 'chromium/third_party/androidx',\n          'version': 'SgrqBlWCI5LkTzOF-U0o3PpLs27z1EHeYf15q-exbVEC',\n      },\n    ],\n    'condition': 'checkout_android and non_git_source',\n    'dep_type': 'cipd',\n  },\n\n  'src/third_party/androidx_javascriptengine/src': {\n      'url': Var('chromium_git') + '/aosp/platform/frameworks/support/javascriptengine/javascriptengine/src.git' + '@' + 'e3b6fc680728040f97442dc29d978ce5df6e76f4',\n      'condition': 'checkout_android',\n  },\n\n  'src/third_party/android_system_sdk/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_system_sdk/public',\n              'version': 'XzzECzCzGLrccJS1U-HdmM5VMh9BotgQ_mWhFQ464PwC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_build_tools/aapt2/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_build_tools/aapt2',\n              'version': '_lNsOL_GGlXLOIMGtrbMOqNd7TQHabaP1q8SlvUpFbMC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_build_tools/apkanalyzer/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_build_tools/apkanalyzer',\n              'version': 'O8Lyta0y6jpvFD1rbPp7trvcM2rdny3ngyhyeYAWXK4C',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_build_tools/bundletool/cipd': {\n      'packages': [\n          {\n               'package': 'chromium/third_party/android_build_tools/bundletool',\n               'version': 'Q-7KJYcc15Cn9iVy-7bk0tPH9-oUrhqHis6HmUzck80C',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_build_tools/dagger_compiler/cipd': {\n      'packages': [\n          {\n               'package': 'chromium/third_party/android_build_tools/dagger_compiler',\n               'version': 'AC0DoTEXQf40KFt7hyCNSEJPrT9Rprw9zsZxNKdw7BQC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_build_tools/error_prone/cipd': {\n      'packages': [\n          {\n               'package': 'chromium/third_party/android_build_tools/error_prone',\n               'version': 'a-wq097LhH9krgIuF0T5waFnHU4KilRItqhJPGFZxtwC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_build_tools/error_prone_javac/cipd': {\n      'packages': [\n          {\n               'package': 'chromium/third_party/android_build_tools/error_prone_javac',\n               'version': '7EcHxlEXEaLRWEyHIAxf0ouPjkmN1Od6jkutuo0sfBIC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_build_tools/lint/cipd': {\n      'packages': [\n          {\n               'package': 'chromium/third_party/android_build_tools/lint',\n               'version': 'Q2AdRKMr8eMrKgLZ9CwGTRx4BwGOL2wc6Ad942McdDUC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_build_tools/manifest_merger/cipd': {\n      'packages': [\n          {\n               'package': 'chromium/third_party/android_build_tools/manifest_merger',\n               'version': 'UGF3GC1qR9jeALurBm6PNVfQT1TNc-yqDjT4pEpuiYsC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_build_tools/nullaway/cipd': {\n      'packages': [\n          {\n               'package': 'chromium/third_party/android_build_tools/nullaway',\n               'version': '65WJkoinJEXvtu9xwdDNDb3QCbqBAl8FKDpgnXr3iiEC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_sdk/public': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_sdk/public/build-tools/35.0.0',\n              'version': Var('android_sdk_build-tools_version'),\n          },\n          {\n              'package': 'chromium/third_party/android_sdk/public/emulator',\n              'version': Var('android_sdk_emulator_version'),\n          },\n          {\n              'package': 'chromium/third_party/android_sdk/public/platform-tools',\n              'version': Var('android_sdk_platform-tools_version'),\n          },\n          {\n              'package': 'chromium/third_party/android_sdk/public/platforms/android-35',\n              'version': Var('android_sdk_platforms_version'),\n          },\n          {\n              'package': 'chromium/third_party/android_sdk/public/cmdline-tools',\n              'version': 'OCGHZKTdjXjIELVI6FMAgcDkfnd_1ybB0_MtljPtz-8C',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/angle':\n    Var('chromium_git') + '/angle/angle.git' + '@' +  Var('angle_revision'),\n\n  'src/third_party/anonymous_tokens/src':\n    Var('chromium_git') + '/external/github.com/google/anonymous-tokens.git' + '@' + '6ea6ec78f9e4998d0a7a5677b2aec08f0ac858f8',\n\n    'src/third_party/blink/renderer/core/css/perftest_data': {\n      'dep_type': 'gcs',\n      'condition': 'non_git_source',\n      'bucket': 'chromium-style-perftest',\n      'objects': [\n          {\n              'object_name': 'e9ce994346c62f8c9fd6d0cecb2b2b0b93b4c2d8',\n              'sha256sum': '519019df16c628c6c0893df18928faeaa3150a9d8f26a787a16ce7c6b2cec2ad',\n              'size_bytes': 601672,\n              'generation': 1664794185950162,\n              'output_file': 'ecommerce.json',\n          },\n          {\n              'object_name': '756068da5e551516b23b0ba133e55c144f623d38',\n              'sha256sum': '84ef87a8163335a95111d9709306596f96742539da0b34fbe7397f799946a168',\n              'size_bytes': 2156935,\n              'generation': 1664794188995509,\n              'output_file': 'encyclopedia.json',\n          },\n          {\n              'object_name': '314e4e0d5e89ea9e9e9a234c617b4413adf48aa9',\n              'sha256sum': 'a721ada40011a286631baae6d76878f2023ff000151792228c83b1958ea8a197',\n              'size_bytes': 608840,\n              'generation': 1664794191929032,\n              'output_file': 'extension.json',\n          },\n          {\n              'object_name': '3a19b42a7c46257b716d55d6733f070c87180b1e',\n              'sha256sum': 'f203ff9e8c8a6a3b714f0a26db38cc940544a907435c62c79b21f4bd3f8bee8e',\n              'size_bytes': 1750837,\n              'generation': 1664794194891567,\n              'output_file': 'news.json',\n          },\n          {\n              'object_name': 'fdc43ee18cbd65487249441849f58aa13484aaef',\n              'sha256sum': '0e92de92f49abc9a521f7175106c80744196f8cefc0263bc0f4a6b4f724a7d10',\n              'size_bytes': 1310798,\n              'generation': 1664794197855470,\n              'output_file': 'search.json',\n          },\n          {\n              'object_name': '7fc9338af75b7d9d185c91ddf262a356def5623d',\n              'sha256sum': '34e92acae8aade2a186abe79ed1f379c266f04f72f1eb54bd3a912e889bc5cc0',\n              'size_bytes': 2280846,\n              'generation': 1664794200867034,\n              'output_file': 'social1.json',\n          },\n          {\n              'object_name': 'c2d7e9ce67522dad138c7feb0a6911b828bfb130',\n              'sha256sum': '95c6b148577b891310c024b2daa5d68faf644a37707ac0cb21501eefe8a399a3',\n              'size_bytes': 411708,\n              'generation': 1664794203829582,\n              'output_file': 'social2.json',\n          },\n          {\n              'object_name': '031d5599c8a21118754e30dbea141be66104f556',\n              'sha256sum': '8e7b765d72bb8e7742f5bf955f4bf64d5469f61197dad8b632304095a52322d7',\n              'size_bytes': 3203922,\n              'generation': 1664794206824773,\n              'output_file': 'sports.json',\n          },\n          {\n              'object_name': '8aac3db2a8c9e44babec81e539a3d60aeab4985c',\n              'sha256sum': '6aeb0036dfafaf5e905abdb0ffe515a3952ffe35a7c59afb0fc8b233b27c6ce4',\n              'size_bytes': 5902660,\n              'generation': 1664794209886788,\n              'output_file': 'video.json',\n          },\n      ],\n  },\n\n  'src/third_party/content_analysis_sdk/src':\n    Var('chromium_git') + '/external/github.com/chromium/content_analysis_sdk.git' + '@' + '9a408736204513e0e95dd2ab3c08de0d95963efc',\n\n  'src/third_party/dav1d/libdav1d':\n    Var('chromium_git') + '/external/github.com/videolan/dav1d.git' + '@' + 'edb16889d16f5e13161b6e8f7a839cd82d7d655d',\n\n  'src/third_party/dawn':\n    Var('dawn_git') + '/dawn.git' + '@' +  Var('dawn_revision'),\n\n  'src/third_party/highway/src':\n    Var('chromium_git') + '/external/github.com/google/highway.git' + '@' + Var('highway_revision'),\n\n  'src/third_party/apache-portable-runtime/src': {\n      'url': Var('chromium_git') + '/external/apache-portable-runtime.git' + '@' + 'c3f11fcd86b42922834cae91103cf068246c6bb6',\n      'condition': 'checkout_android',\n  },\n\n  'src/third_party/barhopper': {\n      'url': Var('chrome_git') + '/chrome/deps/barhopper.git' + '@' + '865bd06ef4a839b0a15d17e38e25f8911e4cdf9f',\n      'condition': 'checkout_src_internal and checkout_chromeos',\n  },\n\n  'src/third_party/google_benchmark/src':\n    Var('chromium_git') + '/external/github.com/google/benchmark.git' + '@' + '761305ec3b33abf30e08d50eb829e19a802581cc',\n\n  # Download test data for Maps telemetry_gpu_integration_test.\n  'src/tools/perf/page_sets/maps_perf_test/dataset': {\n      'dep_type': 'gcs',\n      'condition': 'non_git_source',\n      'bucket': 'chromium-telemetry',\n      'objects': [\n          {\n              'object_name': 'e6bf26977c2fd80c18789d1f279d474096a7b0d1',\n              'sha256sum': 'f5f7fe360ad2b9c3d9dda2612f17336c0541bac15b4e4992f2c167e059a190fa',\n              'size_bytes': 3285237,\n              'generation': 1513305740113238,\n              'output_file': 'load_dataset',\n          },\n      ],\n  },\n\n  'src/third_party/boringssl/src':\n    Var('boringssl_git') + '/boringssl.git' + '@' +  Var('boringssl_revision'),\n\n  'src/third_party/breakpad/breakpad':\n    Var('chromium_git') + '/breakpad/breakpad.git' + '@' + '0dfd77492fdb0dcd06027c5842095e2e908adc90',\n\n  'src/third_party/cast_core/public/src':\n    Var('chromium_git') + '/cast_core/public' + '@' + 'fbc5e98031e1271a0a566fcd4d9092b2d3275d05',\n\n  'src/third_party/catapult':\n    Var('chromium_git') + '/catapult.git' + '@' + Var('catapult_revision'),\n\n  'src/third_party/ced/src':\n    Var('chromium_git') + '/external/github.com/google/compact_enc_det.git' + '@' + 'ba412eaaacd3186085babcd901679a48863c7dd5',\n\n  'src/third_party/checkstyle/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/checkstyle',\n              'version': 'vnbLn0H_kr5nVeziAzIlGqjH1LhxEslL7O0w-UKTHh4C',\n          },\n      ],\n      # Needed on Linux for use on chromium_presubmit.\n      'condition': '(checkout_android or checkout_linux) and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/chromium-variations':\n    Var('chromium_git') + '/chromium-variations.git' + '@' + Var('chromium_variations_revision'),\n\n  # Dependency for ChromeVox.\n  'src/third_party/chromevox/third_party/sre/src': {\n      'url': Var('chromium_git') + '/external/github.com/zorkow/speech-rule-engine.git' + '@' + '5a56d4d33d67dc7c692da032d2ebbdefd7de780e',\n      'condition': 'checkout_chromeos',\n  },\n\n  # Tools used when building Chrome for Chrome OS. This affects both the Simple\n  # Chrome workflow, as well as the chromeos-chrome ebuild.\n  'src/third_party/chromite': {\n      'url': Var('chromium_git') + '/chromiumos/chromite.git' + '@' + 'a9fdaf06401860211c818d7000208547d9de4b1b',\n      'condition': 'checkout_chromeos',\n  },\n\n  'src/third_party/cld_3/src':\n    Var('chromium_git') + '/external/github.com/google/cld_3.git' + '@' + 'b48dc46512566f5a2d41118c8c1116c4f96dc661',\n\n  'src/third_party/colorama/src':\n    Var('chromium_git') + '/external/colorama.git' + '@' + '3de9f013df4b470069d03d250224062e8cf15c49',\n\n  'src/third_party/cpu_features/src':\n    Var('chromium_git') + '/external/github.com/google/cpu_features.git' + '@' + '936b9ab5515dead115606559502e3864958f7f6e',\n\n  'src/third_party/cpuinfo/src':\n    Var('chromium_git') + '/external/github.com/pytorch/cpuinfo.git' + '@' + 'ca156f7bc9109c552973414a63d310f76ef0cbf8',\n\n  'src/third_party/crc32c/src':\n    Var('chromium_git') + '/external/github.com/google/crc32c.git' + '@' + 'd3d60ac6e0f16780bcfcc825385e1d338801a558',\n\n  # For Linux and Chromium OS.\n  'src/third_party/cros_system_api': {\n      'url': Var('chromium_git') + '/chromiumos/platform2/system_api.git' + '@' + '497b90c6e283745f976d783ed2beaafeef42b1bf',\n      'condition': 'checkout_linux or checkout_chromeos',\n  },\n\n  'src/third_party/crossbench':\n    Var('chromium_git') + '/crossbench.git' + '@' + Var('crossbench_revision'),\n\n\n  'src/third_party/depot_tools':\n    Var('chromium_git') + '/chromium/tools/depot_tools.git' + '@' + '423f1e1914ab4aa7b2bdf804e216d4c097853ba2',\n\n  'src/third_party/devtools-frontend/src':\n    Var('chromium_git') + '/devtools/devtools-frontend' + '@' + Var('devtools_frontend_revision'),\n\n  'src/third_party/dom_distiller_js/dist':\n    Var('chromium_git') + '/chromium/dom-distiller/dist.git' + '@' + '199de96b345ada7c6e7e6ba3d2fa7a6911b8767d',\n\n  'src/third_party/eigen3/src':\n    Var('chromium_git') + '/external/gitlab.com/libeigen/eigen.git' + '@' + '24e0c2a125d2b37b35719124d1f758777c150ca8',\n\n  'src/third_party/emoji-metadata/src': {\n    'url': Var('chromium_git') + '/external/github.com/googlefonts/emoji-metadata' + '@' + '045f146fca682a836e01cd265171312bfb300e06',\n    'condition': 'checkout_chromeos',\n  },\n\n  'src/third_party/espresso': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/espresso',\n              'version': '5LoBT0j383h_4dXbnap7gnNQMtMjpbMJD1JaGIYNj-IC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/farmhash/src':\n    Var('chromium_git') + '/external/github.com/google/farmhash.git' + '@' + '816a4ae622e964763ca0862d9dbd19324a1eaf45',\n\n  'src/third_party/fast_float/src':\n    Var('chromium_git') + '/external/github.com/fastfloat/fast_float.git' + '@' + '3e57d8dcfb0a04b5a8a26b486b54490a2e9b310f',\n\n  'src/third_party/ffmpeg':\n    Var('chromium_git') + '/chromium/third_party/ffmpeg.git' + '@' + Var('ffmpeg_revision'),\n\n  'src/third_party/flac':\n    Var('chromium_git') + '/chromium/deps/flac.git' + '@' + '689da3a7ed50af7448c3f1961d1791c7c1d9c85c',\n\n  'src/third_party/flatbuffers/src':\n    Var('chromium_git') + '/external/github.com/google/flatbuffers.git' + '@' + '8db59321d9f02cdffa30126654059c7d02f70c32',\n\n  # Used for embedded builds. CrOS & Linux use the system version.\n  'src/third_party/fontconfig/src': {\n      'url': Var('chromium_git') + '/external/fontconfig.git' + '@' + '14d466b30a8ab4a9d789977ed94f2c30e7209267',\n      'condition': 'checkout_linux',\n  },\n\n  'src/third_party/fp16/src':\n    Var('chromium_git') + '/external/github.com/Maratyszcza/FP16.git' + '@' + '0a92994d729ff76a58f692d3028ca1b64b145d91',\n\n  'src/third_party/gemmlowp/src':\n    Var('chromium_git') + '/external/github.com/google/gemmlowp.git' + '@' + '13d57703abca3005d97b19df1f2db731607a7dc2',\n\n  'src/third_party/grpc/src': {\n      'url': Var('chromium_git') + '/external/github.com/grpc/grpc.git' + '@' + 'a363b6c001139b9c8ffb7cd63f60a72f15349c3b',\n  },\n\n  'src/third_party/freetype/src':\n    Var('chromium_git') + '/chromium/src/third_party/freetype2.git' + '@' + Var('freetype_revision'),\n\n  'src/third_party/freetype-testing/src':\n    Var('chromium_git') + '/external/github.com/freetype/freetype2-testing.git' + '@' + Var('freetype_testing_revision'),\n\n  'src/third_party/fxdiv/src':\n    Var('chromium_git') + '/external/github.com/Maratyszcza/FXdiv.git' + '@' + '63058eff77e11aa15bf531df5dd34395ec3017c8',\n\n  'src/third_party/harfbuzz-ng/src':\n    Var('chromium_git') + '/external/github.com/harfbuzz/harfbuzz.git' + '@' + Var('harfbuzz_revision'),\n\n  'src/third_party/ink/src':\n    Var('chromium_git') + '/external/github.com/google/ink.git' + '@' + Var('ink_revision'),\n\n  'src/third_party/ink_stroke_modeler/src':\n    Var('chromium_git') + '/external/github.com/google/ink-stroke-modeler.git' + '@' + Var('ink_stroke_modeler_revision'),\n\n  'src/third_party/instrumented_libs': {\n    'url': Var('chromium_git') + '/chromium/third_party/instrumented_libraries.git' + '@' + '3cc43119a29158bcde39d288a8def4b8ec49baf8',\n    'condition': 'checkout_instrumented_libraries',\n  },\n\n  'src/third_party/jszip/src': {\n    'url': Var('chromium_git') + '/external/github.com/Stuk/jszip.git' + '@' + '2ceb998e29d4171b4f3f2ecab1a2195c696543c0',\n    'condition': 'checkout_ios',\n  },\n\n  'src/third_party/emoji-segmenter/src':\n    Var('chromium_git') + '/external/github.com/google/emoji-segmenter.git' + '@' + Var('emoji_segmenter_revision'),\n\n  'src/third_party/ots/src':\n    Var('chromium_git') + '/external/github.com/khaledhosny/ots.git' + '@' + Var('ots_revision'),\n\n  'src/third_party/libgav1/src':\n    Var('chromium_git') + '/codecs/libgav1.git' + '@' + 'a2f139e9123bdb5edf7707ac6f1b73b3aa5038dd',\n\n  'src/third_party/google_toolbox_for_mac/src': {\n      'url': Var('chromium_git') + '/external/github.com/google/google-toolbox-for-mac.git' + '@' + Var('google_toolbox_for_mac_revision'),\n      'condition': 'checkout_ios or checkout_mac',\n  },\n\n  'src/third_party/google-truth/src': {\n      'url': Var('chromium_git') + '/external/github.com/google/truth.git' + '@' + '33387149b465f82712a817e6744847fe136949b3',\n      'condition': 'checkout_android',\n  },\n\n  'src/third_party/googletest/src':\n    Var('chromium_git') + '/external/github.com/google/googletest.git' + '@' + Var('googletest_revision'),\n\n  'src/third_party/gperf': {\n      'url': Var('chromium_git') + '/chromium/deps/gperf.git' + '@' + 'd892d79f64f9449770443fb06da49b5a1e5d33c1',\n      'condition': 'checkout_win',\n  },\n\n  'src/third_party/cardboard/src' : {\n      'url': Var('chromium_git') + '/external/github.com/googlevr/cardboard/' + '@' + '596352df971aacede278a50f55ff1fecc4e81afc',\n      'condition': 'checkout_android',\n  },\n\n  'src/third_party/arcore-android-sdk/src': {\n      'url': Var('chromium_git') + '/external/github.com/google-ar/arcore-android-sdk.git' + '@' + '80036a515b38deca1ad080b7c436856b454358f5',\n      'condition': 'checkout_android',\n  },\n\n  'src/third_party/arcore-android-sdk-client/cipd': {\n      'packages': [\n        {\n          'package': 'chromium/third_party/arcore-android-sdk-client',\n          'version': 'gHDxvBRNpM868XTWU9SdfMqtVYTFSvK2tLRAKq4V37wC',\n        },\n      ],\n\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  # Exists for rolling the Fuchsia SDK. Check out of the SDK should always\n  # rely on the hook running |update_sdk.py| script below.\n  'src/third_party/fuchsia-sdk/sdk': {\n      'packages': [\n          {\n              'package': Var('fuchsia_sdk_cipd_prefix') + '${{platform}}',\n              'version': Var('fuchsia_version'),\n          },\n      ],\n      'condition': 'checkout_fuchsia_no_hooks',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/google-java-format/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/google-java-format',\n              'version': 'AQn4F5NfPAs_GKX-z3OW_Q7-yJ9N6tPrDnmnDScjkTEC',\n          },\n      ],\n      # Needed on Linux for use on chromium_presubmit.\n      'condition': '(checkout_android or checkout_linux) and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/hamcrest/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/hamcrest',\n              'version': 'dBioOAmFJjqAr_DY7dipbXdVfAxUQwjOBNibMPtX8lQC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/hunspell_dictionaries':\n    Var('chromium_git') + '/chromium/deps/hunspell_dictionaries.git' + '@' + '41cdffd71c9948f63c7ad36e1fb0ff519aa7a37e',\n\n  'src/third_party/icu':\n    Var('chromium_git') + '/chromium/deps/icu.git' + '@' + 'bbccc2f6efc1b825de5f2c903c48be685cd0cf22',\n\n  'src/third_party/icu4j/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/icu4j',\n              'version': '8dV7WRVX0tTaNNqkLEnCA_dMofr2MJXFK400E7gOFygC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/jacoco/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/jacoco',\n              'version': 'DWx1sUw2_F3SN9e21bI3W5vGT08eR3HQpXLZy6f-AnwC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/javalang/src': {\n      'url': Var('chromium_git') + '/external/github.com/c2nes/javalang.git' + '@' + '0664afb7f4d40254312693f2e833c1ed4ac551c7',\n      'condition': 'checkout_android',\n  },\n\n  'src/third_party/jdk/current': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/jdk',\n              'version': 'G-WIGWdFIBTPPhv2xPK_lTfI5N7WmfCBh0oTKqX-c5sC',\n          },\n      ],\n      # Needed on Linux for use on chromium_presubmit (for checkstyle).\n      'condition': '(checkout_android or checkout_linux) and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  # Deprecated - only use for tools which are broken our real JDK.\n  'src/third_party/jdk11': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/jdk',\n              # Do not update this hash - any newer hash will point to JDK17+.\n              'version': 'egbcSHbmF1XZQbKxp_PQiGLFWlQK65krTGqQE-Bj4j8C',\n          },\n      ],\n      'condition': 'checkout_android',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/jsoncpp/source':\n    Var('chromium_git') + '/external/github.com/open-source-parsers/jsoncpp.git'\n      + '@' + '42e892d96e47b1f6e29844cc705e148ec4856448', # release 1.9.4\n\n  'src/third_party/junit/src': {\n      'url': Var('chromium_git') + '/external/junit.git' + '@' + '0eb5ce72848d730da5bd6d42902fdd6a8a42055d',\n      'condition': 'checkout_android',\n  },\n\n  'src/third_party/kotlin_stdlib/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/kotlin_stdlib',\n              'version': 'uguVAY3NvbfV4KgHrjjwvtTioMwPwSijfAgBPpbaYk0C',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/kotlinc/current': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/kotlinc',\n              'version': 'VgYl1YO2AM2qu-RYvdko61h4YtNnJeZlGWWppX7vJq8C',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/leveldatabase/src':\n    Var('chromium_git') + '/external/leveldb.git' + '@' + '578eeb702ec0fbb6b9780f3d4147b1076630d633',\n\n  'src/third_party/libFuzzer/src':\n    Var('chromium_git') + '/external/github.com/llvm/llvm-project/compiler-rt/lib/fuzzer.git' + '@' +  Var('libfuzzer_revision'),\n\n  'src/third_party/fuzztest/src':\n    Var('chromium_git') + '/external/github.com/google/fuzztest.git' + '@' + Var('fuzztest_revision'),\n\n  'src/third_party/domato/src':\n    Var('chromium_git') + '/external/github.com/googleprojectzero/domato.git' + '@' + Var('domato_revision'),\n\n  'src/third_party/libaddressinput/src':\n    Var('chromium_git') + '/external/libaddressinput.git' + '@' + 'e8712e415627f22d0b00ebee8db99547077f39bd',\n\n  'src/third_party/libaom/source/libaom':\n    Var('aomedia_git') + '/aom.git' + '@' +  '0c13a5d54053f82bf8500b421b5cdefb1cc1b3ed',\n\n  'src/third_party/libavif/src':\n    Var('chromium_git') + '/external/github.com/AOMediaCodec/libavif.git' + '@' + Var('libavif_revision'),\n\n  'src/third_party/crabbyavif/src':\n    Var('chromium_git') + '/external/github.com/webmproject/CrabbyAvif.git' + '@' + Var('crabbyavif_revision'),\n\n  'src/third_party/nearby/src':\n    Var('chromium_git') + '/external/github.com/google/nearby-connections.git' + '@' + Var('nearby_revision'),\n\n  'src/third_party/beto-core/src':\n    Var('betocore_git') + '/beto-core.git' + '@' + Var('betocore_revision'),\n\n  'src/third_party/securemessage/src':\n    Var('chromium_git') + '/external/github.com/google/securemessage.git' + '@' + Var('securemessage_revision'),\n\n  'src/third_party/speedometer/main':\n    Var('chromium_git') + '/external/github.com/WebKit/Speedometer.git' + '@' + Var('speedometer_main_revision'),\n\n  'src/third_party/speedometer/v3.0':\n    Var('chromium_git') + '/external/github.com/WebKit/Speedometer.git' + '@' + Var('speedometer_3.0_revision'),\n\n  'src/third_party/speedometer/v2.0':\n    Var('chromium_git') + '/external/github.com/WebKit/Speedometer.git' + '@' + Var('speedometer_2.0_revision'),\n\n  'src/third_party/speedometer/v2.1':\n    Var('chromium_git') + '/external/github.com/WebKit/Speedometer.git' + '@' + Var('speedometer_2.1_revision'),\n\n  'src/third_party/ukey2/src':\n    Var('chromium_git') + '/external/github.com/google/ukey2.git' + '@' + Var('ukey2_revision'),\n\n  'src/third_party/cros-components/src':\n    Var('chromium_git') + '/external/google3/cros_components.git' + '@' + Var('cros_components_revision'),\n\n  # Userspace interface to kernel DRM services.\n  'src/third_party/libdrm/src': {\n      'url': Var('chromium_git') + '/chromiumos/third_party/libdrm.git' + '@' + 'ad78bb591d02162d3b90890aa4d0a238b2a37cde',\n      'condition': 'checkout_linux',\n  },\n\n  'src/third_party/expat/src':\n    Var('chromium_git') + '/external/github.com/libexpat/libexpat.git' + '@' + Var('libexpat_revision'),\n\n  # The library for IPP protocol (Chrome OS).\n  'src/third_party/libipp/libipp': {\n      'url': Var('chromium_git') + '/chromiumos/platform2/libipp.git' + '@' + '2209bb84a8e122dab7c02fe66cc61a7b42873d7f',\n      'condition': 'checkout_linux',\n  },\n\n  'src/third_party/libjpeg_turbo':\n    Var('chromium_git') + '/chromium/deps/libjpeg_turbo.git' + '@' + '927aabfcd26897abb9776ecf2a6c38ea5bb52ab6',\n\n  'src/third_party/liblouis/src': {\n      'url': Var('chromium_git') + '/external/liblouis-github.git' + '@' + '9700847afb92cb35969bdfcbbfbbb74b9c7b3376',\n      'condition': 'checkout_linux',\n  },\n\n  'src/third_party/libphonenumber/dist':\n    Var('chromium_git') + '/external/libphonenumber.git' + '@' + '9d46308f313f2bf8dbce1dfd4f364633ca869ca7',\n\n  'src/third_party/libprotobuf-mutator/src':\n    Var('chromium_git') + '/external/github.com/google/libprotobuf-mutator.git' + '@' +  Var('libprotobuf-mutator'),\n\n  'src/third_party/libsrtp':\n    Var('chromium_git') + '/chromium/deps/libsrtp.git' + '@' + 'a52756acb1c5e133089c798736dd171567df11f5',\n\n  # Android Explicit Synchronization.\n  'src/third_party/libsync/src': {\n      'url': Var('chromium_git') + '/aosp/platform/system/core/libsync.git' + '@' + 'f4f4387b6bf2387efbcfd1453af4892e8982faf6',\n      'condition': 'checkout_linux or checkout_android',\n  },\n\n  'src/third_party/libunwindstack': {\n      'url': Var('chromium_git') + '/chromium/src/third_party/libunwindstack.git' + '@' + 'e5061bbda4c2ba6438020669ed06b122032433dd',\n      'condition': 'checkout_android',\n  },\n\n  'src/third_party/libva-fake-driver/src':\n    Var('chromium_git') + '/chromiumos/platform/libva-fake-driver.git' + '@' + 'a9bcab9cd6b15d4e3634ca44d5e5f7652c612194',\n\n  'src/third_party/libvpx/source/libvpx':\n    Var('chromium_git') + '/webm/libvpx.git' + '@' +  '7a65480684b1b28bb9defae164bf0dc78b32653e',\n\n  'src/third_party/libwebm/source':\n    Var('chromium_git') + '/webm/libwebm.git' + '@' + '26d9f667170dc75e8d759a997bb61c64dec42dda',\n\n  'src/third_party/libwebp/src':\n    Var('chromium_git') + '/webm/libwebp.git' + '@' +  '2af6c034ac871c967e04c8c9f8bf2dbc2e271b18',\n\n  'src/third_party/libyuv':\n    Var('chromium_git') + '/libyuv/libyuv.git' + '@' + '47ddac2996378c34aab9318f0d218303b1d282e7',\n\n  'src/third_party/lighttpd': {\n      'url': Var('chromium_git') + '/chromium/deps/lighttpd.git' + '@' + Var('lighttpd_revision'),\n      'condition': 'checkout_mac or checkout_win',\n  },\n\n  'src/third_party/lss': {\n      'url': Var('chromium_git') + '/linux-syscall-support.git' + '@' + Var('lss_revision'),\n      'condition': 'checkout_android or checkout_linux',\n  },\n\n  'src/third_party/lzma_sdk/bin/host_platform': {\n      'packages': [\n          {\n              'package': 'infra/3pp/tools/7z/${{platform}}',\n              'version': 'version:3@24.09',\n          },\n      ],\n      'condition': 'checkout_win',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/lzma_sdk/bin/win64': {\n      'packages': [\n          {\n              'package': 'infra/3pp/tools/7z/windows-amd64',\n              'version': 'version:3@24.09',\n          },\n      ],\n      'condition': 'checkout_win',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/material_color_utilities/src': {\n      'url': Var('chromium_git') + '/external/github.com/material-foundation/material-color-utilities.git' + '@' + '13434b50dcb64a482cc91191f8cf6151d90f5465',\n  },\n\n  'src/third_party/material_design_icons/src': {\n      'url': Var('chromium_git') + '/external/github.com/google/material-design-icons.git' + '@' +\n          '5ab428852e35dc177a8c37a2df9dc9ccf768c65a',\n      'condition': 'checkout_ios',\n  },\n\n  'src/third_party/microsoft_dxheaders/src': {\n    'url': Var('chromium_git') + '/external/github.com/microsoft/DirectX-Headers.git' + '@' + 'd9020edfc69b789653e04fa2d8d10ee3317ffa56',\n    'condition': 'checkout_win',\n  },\n\n  'src/third_party/mig/bin': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/mig/${{platform}}',\n              'version': '4wxov_ILjFdgBumBqgUgOgIcr4kcMh7i4b4oJi_cLjcC',\n          },\n      ],\n      'condition': 'host_os == \"linux\" and checkout_mac',\n      'dep_type': 'cipd',\n  },\n\n  # Graphics buffer allocator for Chrome OS.\n  'src/third_party/minigbm/src': {\n      'url': Var('chromium_git') + '/chromiumos/platform/minigbm.git' + '@' + '3018207f4d89395cc271278fb9a6558b660885f5',\n      'condition': 'checkout_linux',\n  },\n\n  'src/third_party/nasm': {\n      'url': Var('chromium_git') + '/chromium/deps/nasm.git' + '@' +\n      'f477acb1049f5e043904b87b825c5915084a9a29'\n  },\n\n  'src/third_party/neon_2_sse/src':\n    Var('chromium_git') + '/external/github.com/intel/ARM_NEON_2_x86_SSE.git' + '@' + 'eb8b80b28f956275e291ea04a7beb5ed8289e872',\n\n  'src/third_party/netty-tcnative/src': {\n      'url': Var('chromium_git') + '/external/netty-tcnative.git' + '@' + '035726f76293d142ec3c4464be0703605feb4d02',\n      'condition': 'checkout_android',\n  },\n\n  'src/third_party/netty4/src': {\n      'url': Var('chromium_git') + '/external/netty4.git' + '@' + 'cc4420b13bb4eeea5b1cf4f93b2755644cd3b120',\n      'condition': 'checkout_android',\n  },\n\n  'src/third_party/ninja': {\n    'packages': [\n      {\n        'package': Var('ninja_package') + '${{platform}}',\n        'version': Var('ninja_version'),\n      }\n    ],\n    'condition': 'non_git_source',\n    'dep_type': 'cipd',\n  },\n  'src/third_party/siso/cipd': {\n    'packages': [\n      {\n        'package': 'infra/build/siso/${{platform}}',\n        'version': Var('siso_version'),\n      }\n    ],\n    'condition': 'non_git_source',\n    'dep_type': 'cipd',\n  },\n\n  'src/third_party/openh264/src':\n    Var('chromium_git') + '/external/github.com/cisco/openh264' + '@' + '478e5ab3eca30e600006d5a0a08b176fd34d3bd1',\n\n  'src/third_party/openscreen/src':\n    Var('chromium_git') + '/openscreen' + '@' + '0d00500ef556027d2fe03d4fe2bf76f26bce4887',\n\n  'src/third_party/openxr/src': {\n    'url': Var('chromium_git') + '/external/github.com/KhronosGroup/OpenXR-SDK' + '@' + '781f2eab3698d653c804ecbd11e0aed47eaad1c6',\n    'condition': 'checkout_openxr',\n  },\n\n  'src/third_party/opus/tests/resources': {\n      'dep_type': 'gcs',\n      'condition': 'non_git_source',\n      'bucket': 'chromium-webrtc-resources',\n      'objects': [\n          {\n              'object_name': '009a3ee778767c2402b1d2c920bc2449265f5a2c',\n              'sha256sum': '34de3161f242895a682d9cdcbbf4ad50246742b6db46873386104cfde8a24332',\n              'size_bytes': 26889600,\n              'generation': 1392811661954000,\n              'output_file': 'speech_mono_32_48kHz.pcm',\n          },\n      ],\n  },\n\n  'src/third_party/pdfium':\n    Var('pdfium_git') + '/pdfium.git' + '@' +  Var('pdfium_revision'),\n\n  'src/third_party/perfetto':\n    Var('android_git') + '/platform/external/perfetto.git' + '@' + 'e324242074e2e64a65e90a2933afd3ca4413554f',\n\n  'src/base/tracing/test/data': {\n    'bucket': 'perfetto',\n    'objects': [\n      {\n        'object_name': 'test_data/chrome_fcp_lcp_navigations.pftrace-ae01d849fbd75a98be1b7ddd5a8873217c377b393a1d5bbd788ed3364f7fefc3',\n        'sha256sum': 'ae01d849fbd75a98be1b7ddd5a8873217c377b393a1d5bbd788ed3364f7fefc3',\n        'size_bytes': 2398645,\n        'generation': 1697714434866488,\n        'output_file': 'chrome_fcp_lcp_navigations.pftrace'\n      },\n      {\n        'object_name': 'test_data/chrome_input_with_frame_view.pftrace-a93548822e481508c728ccc5da3ad34afcd0aec02ca7a7a4dad84ff340ee5975',\n        'sha256sum': 'a93548822e481508c728ccc5da3ad34afcd0aec02ca7a7a4dad84ff340ee5975',\n        'size_bytes': 6392331,\n        'generation': 1711402389089075,\n        'output_file': 'chrome_input_with_frame_view.pftrace'\n      },\n      {\n        'object_name': 'test_data/scroll_offsets_trace_2.pftrace-2ddd9f78d91d51e39c72c520bb54fdc9dbf1333ae722e87633fc345159296289',\n        'sha256sum': '2ddd9f78d91d51e39c72c520bb54fdc9dbf1333ae722e87633fc345159296289',\n        'size_bytes': 1496388,\n        'generation': 1712592637141461,\n        'output_file': 'scroll_offsets_trace_2.pftrace'\n      },\n      {\n        'object_name': 'test_data/top_level_java_choreographer_slices-8001e73b2458e94f65a606bb558a645ba5bca553b57fe416001f6c2175675a8a',\n        'sha256sum': '8001e73b2458e94f65a606bb558a645ba5bca553b57fe416001f6c2175675a8a',\n        'size_bytes': 5323017,\n        'generation': 1671708979893186,\n        'output_file': 'top_level_java_choreographer_slices'\n      },\n      {\n        'object_name': 'test_data/chrome_page_load_all_categories_not_extended.pftrace.gz-6586e9e2bbc0c996caddb321a0374328654983733e6ffd7f4635ac07db32a493',\n        'sha256sum': '6586e9e2bbc0c996caddb321a0374328654983733e6ffd7f4635ac07db32a493',\n        'size_bytes': 1277750,\n        'generation': 1652442088902445,\n        'output_file': 'chrome_page_load_all_categories_not_extended.pftrace.gz'\n      },\n      {\n        'object_name': 'test_data/speedometer_21.perfetto_trace.gz-8a159b354d74a3ca0d38ce9cd071ef47de322db4261ee266bfafe04d70310529',\n        'sha256sum': '8a159b354d74a3ca0d38ce9cd071ef47de322db4261ee266bfafe04d70310529',\n        'size_bytes': 891088,\n        'generation': 1716566741068306,\n        'output_file': 'speedometer_21.perfetto_trace.gz'\n      },\n      {\n       'object_name': 'test_data/speedometer_3.perfetto_trace.gz-b2c77fbe2c17363432a1ad0c05c1c1c20d3ebc62bda92c041d39918011af6f02',\n        'sha256sum': 'b2c77fbe2c17363432a1ad0c05c1c1c20d3ebc62bda92c041d39918011af6f02',\n        'size_bytes': 1301036,\n        'generation': 1716566914245446,\n        'output_file': 'speedometer_3.perfetto_trace.gz'\n      },\n      {\n        'object_name': 'test_data/scroll_jank_with_pinch.pftrace-8587d2016fdb5d39b5f852704b6e3925e9e6527af01696396be767bed04d4a45',\n        'sha256sum': '8587d2016fdb5d39b5f852704b6e3925e9e6527af01696396be767bed04d4a45',\n        'size_bytes': 3914720,\n        'generation': 1717497788778335,\n        'output_file': 'scroll_jank_with_pinch.pftrace'\n      },\n      {\n        'object_name': 'test_data/cpu_powerups_1.pb-70f5511ba0cd6ce1359e3cadb4d1d9301fb6e26be85158e3384b06f41418d386',\n        'sha256sum': '70f5511ba0cd6ce1359e3cadb4d1d9301fb6e26be85158e3384b06f41418d386',\n        'size_bytes': 2033064,\n        'generation': 1669652389509708,\n        'output_file': 'cpu_powerups_1.pb'\n      },\n      {\n        'object_name': 'test_data/chrome_5672_histograms.pftrace.gz-a09bd44078ac71bcfbc901b0544750e8344d0d0f6f96e220f700a5a53fa932ee',\n        'sha256sum': 'a09bd44078ac71bcfbc901b0544750e8344d0d0f6f96e220f700a5a53fa932ee',\n        'size_bytes': 1127472,\n        'generation': 1684946598804577,\n        'output_file': 'chrome_5672_histograms.pftrace.gz'\n      },\n      {\n        'object_name': 'test_data/chrome_custom_navigation_trace.gz-ff68279e3cec94076b69259d756eed181a63eaf834d8b956a7f4ba665fabf939',\n        'sha256sum': 'ff68279e3cec94076b69259d756eed181a63eaf834d8b956a7f4ba665fabf939',\n        'size_bytes': 7572484,\n        'generation': 1666713705258900,\n        'output_file': 'chrome_custom_navigation_trace.gz'\n      },\n      {\n        'object_name': 'test_data/scroll_offsets.pftrace-62101edb5204fec8bea30124f65d4e49bda0808d7b036e95f89445aaad6d8d98',\n        'sha256sum': '62101edb5204fec8bea30124f65d4e49bda0808d7b036e95f89445aaad6d8d98',\n        'size_bytes': 769741,\n        'generation': 1693402148909129,\n        'output_file': 'scroll_offsets.pftrace'\n      },\n      {\n        'object_name': 'test_data/chrome_input_with_frame_view_new.pftrace-e901ad9577088e62c921dd8bfcb43d652ecf49fa69b5b57f81bb3d27dbe94e12',\n        'sha256sum': 'e901ad9577088e62c921dd8bfcb43d652ecf49fa69b5b57f81bb3d27dbe94e12',\n        'size_bytes': 1967821,\n        'generation': 1719520814352733,\n        'output_file': 'chrome_input_with_frame_view_new.pftrace'\n      },\n      {\n        'object_name': 'test_data/scroll_m131.pftrace-14171c9e502a65a454f39fe14fce8b313c7012a2c14394bed496fc93b1644b0d',\n        'sha256sum': '14171c9e502a65a454f39fe14fce8b313c7012a2c14394bed496fc93b1644b0d',\n        'size_bytes': 1247290,\n        'generation': 1729619115836875,\n        'output_file': 'scroll_m131.pftrace'\n      },\n      {\n        'object_name': 'test_data/scroll_m132.pftrace-779e1fa6cab1abc0ab2dcafa4bbbf826ea8fc052878886ab168c783ca32f3bbe',\n        'sha256sum': '779e1fa6cab1abc0ab2dcafa4bbbf826ea8fc052878886ab168c783ca32f3bbe',\n        'size_bytes': 1854184,\n        'generation': 1732117381568969,\n        'output_file': 'scroll_m132.pftrace'\n      },\n      {\n        'object_name': 'test_data/scroll_m132_with_atrace.pftrace-b1fe189738a4a714cef7dd13b12318c89d6c4345fbe65096b4680ffa79f2872a',\n        'sha256sum': 'b1fe189738a4a714cef7dd13b12318c89d6c4345fbe65096b4680ffa79f2872a',\n        'size_bytes': 18887098,\n        'generation': 1730148514067154,\n        'output_file': 'scroll_m132_with_atrace.pftrace'\n      },\n      {\n        'object_name': 'test_data/scroll_with_input_not_forwarded_to_renderer.pftrace-ceb2ff3cb64c99ddb28a29867bc82f1491c4b413bfacd8638551b80936240faf',\n        'sha256sum': 'ceb2ff3cb64c99ddb28a29867bc82f1491c4b413bfacd8638551b80936240faf',\n        'size_bytes': 729606,\n        'generation': 1732902685002882,\n        'output_file': 'scroll_with_input_not_forwarded_to_renderer.pftrace'\n      },\n    ],\n    'dep_type': 'gcs'\n  },\n\n  'src/third_party/perl': {\n      'url': Var('chromium_git') + '/chromium/deps/perl.git' + '@' + '8ef97ff3b7332e38e61b347a2fbed425a4617151',\n      'condition': 'checkout_win',\n  },\n\n  'src/third_party/protobuf-javascript/src':\n    Var('chromium_git') + '/external/github.com/protocolbuffers/protobuf-javascript' + '@' + 'e34549db516f8712f678fcd4bc411613b5cc5295',\n\n  'src/third_party/pthreadpool/src':\n    Var('chromium_git') + '/external/github.com/Maratyszcza/pthreadpool.git' + '@' + '560c60d342a76076f0557a3946924c6478470044',\n\n  # Dependency of skia.\n  'src/third_party/pyelftools': {\n      'url': Var('chromium_git') + '/chromiumos/third_party/pyelftools.git' + '@' + '19b3e610c86fcadb837d252c794cb5e8008826ae',\n      'condition': 'checkout_linux',\n  },\n\n  'src/third_party/quic_trace/src':\n    Var('chromium_git') + '/external/github.com/google/quic-trace.git' + '@' + '413da873d93a03d3662f24b881ea459a79f9c589',\n\n  'src/third_party/pywebsocket3/src':\n    Var('chromium_git') + '/external/github.com/GoogleChromeLabs/pywebsocket3.git' + '@' + '50602a14f1b6da17e0b619833a13addc6ea78bc2',\n\n  'src/third_party/qemu-linux-arm64': {\n      'packages': [\n          {\n              'package': 'fuchsia/third_party/qemu/linux-arm64',\n              'version': 'hOpuGIMj1FAtBWGDlXARkCm2srxY4enn8iI3AgrDna4C'\n          },\n      ],\n      # TODO(b/351926334): Do not add `non_git_source` to this condition until the bug is fixed.\n      'condition': 'host_os == \"linux\" and checkout_fuchsia and checkout_fuchsia_for_arm64_host',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/edk2': {\n      'packages': [\n          {\n              'package': 'fuchsia/third_party/edk2',\n              'version': 'TfGjbhGrxzU0x2fYk8elEgwMTrvwe-3DSPTQe4gb0tMC'\n          },\n      ],\n      # TODO(b/351926334): Do not add `non_git_source` to this condition until the bug is fixed.\n      'condition': 'host_os == \"linux\" and checkout_fuchsia and checkout_fuchsia_for_arm64_host',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/re2/src':\n    Var('chromium_git') + '/external/github.com/google/re2.git' + '@' + '6dcd83d60f7944926bfd308cc13979fc53dd69ca',\n\n  'src/third_party/r8/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/r8',\n              'version': 'Svnec92rP2SGDEMI8UVD0AmkIf9jmUxTleJt8OS82t0C',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  # This duplication is intentional, so we avoid updating the r8.jar used by\n  # dexing unless necessary, since each update invalidates all incremental\n  # dexing and unnecessarily slows down all bots.\n  'src/third_party/r8/d8/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/r8',\n              'version': 'U3Jf_ewWOZyxa6vyO3wjNIgm8XIz1yFk-4k3-wqDL44C',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/requests/src': {\n      'url': Var('chromium_git') + '/external/github.com/kennethreitz/requests.git' + '@' + 'c7e0fc087ceeadb8b4c84a0953a422c474093d6d',\n      'condition': 'checkout_android',\n  },\n\n  'src/third_party/robolectric/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/robolectric',\n              'version': 'G3VkWqTv1YWDvC6zCrL34iQREzrzdBmSL4GMboAIiAEC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/ruy/src':\n    Var('chromium_git') + '/external/github.com/google/ruy.git' + '@' + '95484c3e02206f73309c08ee5ee23d2304ca092b',\n\n  'src/third_party/skia':\n    Var('skia_git') + '/skia.git' + '@' +  Var('skia_revision'),\n\n  'src/third_party/smhasher/src':\n    Var('chromium_git') + '/external/smhasher.git' + '@' + '0ff96f7835817a27d0487325b6c16033e2992eb5',\n\n  'src/third_party/snappy/src':\n    Var('chromium_git') + '/external/github.com/google/snappy.git' + '@' + '32ded457c0b1fe78ceb8397632c416568d6714a0',\n\n  'src/third_party/sqlite/src':\n    Var('chromium_git') + '/chromium/deps/sqlite.git' + '@' + '567495a62a62dc013888500526e82837d727fe01',\n\n  'src/third_party/sqlite4java/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/sqlite4java',\n              'version': 'LofjKH9dgXIAJhRYCPQlMFywSwxYimrfDeBmaHc-Z5EC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/subresource-filter-ruleset/data': {\n      'dep_type': 'gcs',\n      'condition': 'non_git_source',\n      'bucket': 'chromium-ads-detection',\n      'objects': [\n          {\n              'object_name': 'fd3ade759bd847f845fe201167de1f53e53a2275631303952f1ac4d7ab5b19dc',\n              'sha256sum': 'fd3ade759bd847f845fe201167de1f53e53a2275631303952f1ac4d7ab5b19dc',\n              'size_bytes': 75385,\n              'generation': 1736370299437547,\n              'output_file': 'UnindexedRules',\n          },\n      ],\n  },\n\n  'src/third_party/swift-format': {\n      'packages': [\n          {\n              'package': 'infra/3pp/tools/swift-format/mac-${{arch}}',\n              'version': 'version:2@505.chromium.1',\n          },\n      ],\n      'condition': 'host_os == mac',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/swiftshader':\n    Var('swiftshader_git') + '/SwiftShader.git' + '@' +  Var('swiftshader_revision'),\n\n  'src/third_party/swift-toolchain': {\n      'packages': [\n          {\n              'package': 'chromium/tools/swift-toolchain/mac-amd64',\n              'version': 'version:2@5.8-release',\n          },\n      ],\n      'condition': 'host_os == mac',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/test_fonts/test_fonts': {\n      'dep_type': 'gcs',\n      'condition': 'non_git_source',\n      'bucket': 'chromium-fonts',\n      'objects': [\n          {\n              'object_name': 'f26f29c9d3bfae588207bbc9762de8d142e58935c62a86f67332819b15203b35',\n              'sha256sum': 'f26f29c9d3bfae588207bbc9762de8d142e58935c62a86f67332819b15203b35',\n              'size_bytes': 32750602,\n              'generation': 1717109450425063,\n          },\n      ],\n  },\n\n  'src/third_party/text-fragments-polyfill/src':\n    Var('chromium_git') + '/external/github.com/GoogleChromeLabs/text-fragments-polyfill.git' + '@' + 'c036420683f672d685e27415de0a5f5e85bdc23f',\n\n  'src/third_party/tflite/src':\n    Var('chromium_git') + '/external/github.com/tensorflow/tensorflow.git' + '@' + 'b25df276c8e912c22f57263ffcae6ca8f4c64342',\n\n  'src/third_party/turbine/cipd': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/turbine',\n              'version': 'dz8pRLjwNlToJ0tS14T-TDQJNikmFXEDByMo-OzBbl0C',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/vulkan-deps': '{chromium_git}/vulkan-deps@d1d57f6cb6e17dc06bd99789bc033cfc2757facc',\n  'src/third_party/glslang/src': '{chromium_git}/external/github.com/KhronosGroup/glslang@e43514866f7e0f8265c677039d2fe773c892d44b',\n  'src/third_party/spirv-cross/src': '{chromium_git}/external/github.com/KhronosGroup/SPIRV-Cross@b8fcf307f1f347089e3c46eb4451d27f32ebc8d3',\n  'src/third_party/spirv-headers/src': '{chromium_git}/external/github.com/KhronosGroup/SPIRV-Headers@a380cd25433092dbce9a455a3feb1242138febee',\n  'src/third_party/spirv-tools/src': '{chromium_git}/external/github.com/KhronosGroup/SPIRV-Tools@31c154a2a68a2efad82d372b957b42c6b51c1585',\n  'src/third_party/vulkan-headers/src': '{chromium_git}/external/github.com/KhronosGroup/Vulkan-Headers@d4a196d8c84e032d27f999adcea3075517c1c97f',\n  'src/third_party/vulkan-loader/src': '{chromium_git}/external/github.com/KhronosGroup/Vulkan-Loader@369f59ad598b60d6ed9f553af651c5cccd20234c',\n  'src/third_party/vulkan-tools/src': '{chromium_git}/external/github.com/KhronosGroup/Vulkan-Tools@315964ad5aabd5b148a484e5fbea8a365c8d1eb3',\n  'src/third_party/vulkan-utility-libraries/src': '{chromium_git}/external/github.com/KhronosGroup/Vulkan-Utility-Libraries@5a88b6042edb8f03eefc8de73bd73a899989373f',\n  'src/third_party/vulkan-validation-layers/src': '{chromium_git}/external/github.com/KhronosGroup/Vulkan-ValidationLayers@51e39dacb8b2bed309ae1b4f1638624c0125c805',\n\n  'src/third_party/vulkan_memory_allocator':\n    Var('chromium_git') + '/external/github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git' + '@' + '56300b29fbfcc693ee6609ddad3fdd5b7a449a21',\n\n  'src/third_party/wasm_tts_engine/src': Var('chromium_git') + '/chromium/wasm-tts-engine' + '@' + '6d5bc87a28e49361dac2964015957698b04a0df8',\n\n  # Display server protocol for Linux.\n  'src/third_party/wayland/src': {\n      'url': Var('chromium_git') + '/external/anongit.freedesktop.org/git/wayland/wayland.git' + '@' + 'a156431ea66fe67d69c9fbba8a8ad34dabbab81c',\n      'condition': 'checkout_linux',\n  },\n\n  # Wayland protocols that add functionality not available in the core protocol.\n  'src/third_party/wayland-protocols/src': {\n      'url': Var('chromium_git') + '/external/anongit.freedesktop.org/git/wayland/wayland-protocols.git' + '@' + '7d5a3a8b494ae44cd9651f9505e88a250082765e',\n      'condition': 'checkout_linux',\n  },\n\n  # Additional Wayland protocols specific for KDE Plasma desktop environment.\n  'src/third_party/wayland-protocols/kde': {\n      'url': Var('chromium_git') + '/external/github.com/KDE/plasma-wayland-protocols.git' + '@' + '0b07950714b3a36c9b9f71fc025fc7783e82926e',\n      'condition': 'checkout_linux',\n  },\n\n  # Additional Wayland protocols specific for GNOME desktop environment.\n  'src/third_party/wayland-protocols/gtk': {\n      'url': Var('chromium_git') + '/external/github.com/GNOME/gtk.git' + '@' + '40ebed3a03aef096addc0af09fec4ec529d882a0',\n      'condition': 'checkout_linux',\n  },\n\n  # Keep this to the same revision as the one .vpython3.\n  'src/third_party/webdriver/pylib':\n    Var('chromium_git') + '/external/github.com/SeleniumHQ/selenium/py.git' + '@' + 'fc5e7e70c098bfb189a9a74746809ad3c5c34e04',\n\n  'src/third_party/webgl/src':\n    Var('chromium_git') + '/external/khronosgroup/webgl.git' + '@' + '450cceb587613ac1469c5a131fac15935c99e0e7',\n\n  'src/third_party/webgpu-cts/src':\n    Var('chromium_git') + '/external/github.com/gpuweb/cts.git' + '@' + '973068171048a6ab4c9d0762d5efdae8c2c1c8c4',\n\n  'src/third_party/webpagereplay':\n    Var('chromium_git') + '/webpagereplay.git' + '@' + Var('webpagereplay_revision'),\n\n  'src/third_party/webrtc':\n    Var('webrtc_git') + '/src.git' + '@' + '35b67572f28b865e81bdddfc370214c329e2f285',\n\n  # Wuffs' canonical repository is at github.com/google/wuffs, but we use\n  # Skia's mirror of Wuffs, the same as in upstream Skia's DEPS file.\n  #\n  # The local directory is called \"third_party/wuffs\" (matching upstream Skia\n  # and other non-Chromium, Skia-using projects) even though the git repo we\n  # clone is called \"wuffs-mirror-release-c\". The reasons for using w-m-r-c are\n  # listed in the https://crrev.com/c/3086053 commit message. One reason is\n  # that the w-m-r-c subset is much smaller and changes much less frequently.\n  'src/third_party/wuffs/src':\n    Var('skia_git') + '/external/github.com/google/wuffs-mirror-release-c.git' + '@' +  Var('wuffs_revision'),\n\n  'src/third_party/weston/src': {\n      'url': Var('chromium_git') + '/external/anongit.freedesktop.org/git/wayland/weston.git' + '@' + 'ccf29cb237c3ed09c5f370f35239c93d07abfdd7',\n      'condition': 'checkout_linux',\n  },\n\n  # A conformance-suite developed by canonical for the mir wayland server.\n  # Required to compile exo_wlcs on chromeos checkouts.\n  'src/third_party/wlcs/src': {\n      'url': Var('chromium_git') + '/external/github.com/MirServer/wlcs.git' + '@' + '2930ad4b5ca602446ad211b49fb1827303ce9f4b',\n      'condition': 'checkout_chromeos',\n  },\n\n  'src/third_party/xdg-utils': {\n      'url': Var('chromium_git') + '/chromium/deps/xdg-utils.git' + '@' + 'cb54d9db2e535ee4ef13cc91b65a1e2741a94a44',\n      'condition': 'checkout_linux',\n  },\n\n  'src/third_party/xnnpack/src':\n    Var('chromium_git') + '/external/github.com/google/XNNPACK.git' + '@' + '7440eee88f66c4b81d4e7d31f6ae07af66e059ea',\n\n  'src/third_party/libei/cipd': {\n\n    'packages': [\n      {\n        'package': 'chromium/third_party/libei/linux-amd64',\n        'version': '7V4n9OUxAo8k8zayCwZ47Bc5Mqr7Br1NXrxeMKXYBNQC',\n      },\n    ],\n\n    'condition': 'checkout_linux and non_git_source',\n    'dep_type': 'cipd',\n  },\n\n  'src/third_party/zstd/src':\n    Var('chromium_git') + '/external/github.com/facebook/zstd.git' + '@' + 'b0a179d469680276adbd4007435989a6b7fd8b4f',\n\n  'src/tools/skia_goldctl/linux': {\n      'packages': [\n        {\n          'package': 'skia/tools/goldctl/linux-amd64',\n          'version': 'y4kowbHdyv_7-p0-MB1QlTWy5YWYDclmStirH1GbuCkC',\n        },\n      ],\n      'dep_type': 'cipd',\n      'condition': 'checkout_linux and non_git_source',\n  },\n  'src/tools/skia_goldctl/win': {\n      'packages': [\n        {\n          'package': 'skia/tools/goldctl/windows-amd64',\n          'version': 'skMt2xgfOuITCmlSoLbBGHtrtM3geW4ejGVKFtFxTvsC',\n        },\n      ],\n      'dep_type': 'cipd',\n      'condition': 'checkout_win',\n  },\n\n  'src/tools/skia_goldctl/mac_amd64': {\n      'packages': [\n        {\n          'package': 'skia/tools/goldctl/mac-amd64',\n          'version': 'tGIX6p4MvgbXFQWrWBCJ-xjSTLxHwW3ShJXRnLQCUdYC',\n        },\n      ],\n      'dep_type': 'cipd',\n      'condition': 'checkout_mac',\n  },\n\n  'src/tools/skia_goldctl/mac_arm64': {\n      'packages': [\n        {\n          'package': 'skia/tools/goldctl/mac-arm64',\n          'version': '7m6yrdw10Gle5GlaI-jY2YVIqXxO_8MgLIVhKt9tPzYC',\n        },\n      ],\n      'dep_type': 'cipd',\n      'condition': 'checkout_mac',\n  },\n\n  'src/v8':\n    Var('chromium_git') + '/v8/v8.git' + '@' +  Var('v8_revision'),\n\n  'src/internal': {\n    'url': Var('chrome_git') + '/chrome/src-internal.git' + '@' + Var('src_internal_revision'),\n    'condition': 'checkout_src_internal',\n  },\n\n  'src/ash/ambient/resources': {\n    'packages': [\n      {\n        'package': 'chromeos_internal/assistant/ambient',\n        'version': 'version:feel_the_breeze_with_frame_rate_markers',\n      },\n    ],\n    'condition': 'checkout_chromeos and checkout_src_internal',\n    'dep_type': 'cipd',\n  },\n\n  'src/ash/webui/eche_app_ui/resources/prod': {\n    'packages': [\n      {\n        'package': 'chromeos_internal/apps/eche_app/app',\n        'version': 'Kdms-EK9XVmquV6I0yPrHsDBj38kBX6ZhyDByrWC1KMC',\n      },\n    ],\n    'condition': 'checkout_chromeos and checkout_src_internal',\n    'dep_type': 'cipd',\n  },\n\n  'src/ash/webui/boca_ui/resources/prod': {\n    'packages': [\n      {\n        'package': 'chromeos_internal/apps/boca_app/app',\n        'version': 'YC4dgSYat6PKt8GbLN03fAsr7U_QVLqKphFeoJQMitQC',\n      },\n    ],\n    'condition': 'checkout_chromeos and checkout_src_internal',\n    'dep_type': 'cipd',\n  },\n\n  'src/ash/webui/help_app_ui/resources/prod': {\n    'packages': [\n      {\n        'package': 'chromeos_internal/apps/help_app/app',\n        'version': 'U-e0ZakbgdWyK3PfOkyY2LjFMKErlhNfhXoPyZkCtfAC',\n      },\n    ],\n    'condition': 'checkout_chromeos and checkout_src_internal',\n    'dep_type': 'cipd',\n  },\n\n  'src/ash/webui/media_app_ui/resources/prod': {\n    'packages': [\n      {\n        'package': 'chromeos_internal/apps/media_app/app',\n        'version': 'PtlyC_RQp-DTGJStt6rFF9j9VKN78T7iRML3szOQ_EUC',\n      },\n    ],\n    'condition': 'checkout_chromeos and checkout_src_internal',\n    'dep_type': 'cipd',\n  },\n\n  'src/ash/webui/personalization_app/resources': {\n    'packages': [\n      {\n        'package': 'chromeos_internal/assistant/time_of_day',\n        'version': '7okw0Y1HdRp76vhM8AGsWOloCQ83hwMd7Y1k2sDYMJcC',\n      },\n    ],\n    'condition': 'checkout_chromeos and checkout_src_internal',\n    'dep_type': 'cipd',\n  },\n\n  'src/ash/webui/shimless_rma/resources': {\n    'packages': [\n      {\n        'package': 'chromeos_internal/ash/peripherals-and-serviceability/shimless-rma-project-simon-strings',\n        'version': '-uRXiZeA4Yl-Nv-6jP69DyDs5cGroZgGsa1NHnVySQwC',\n      },\n    ],\n    'condition': 'checkout_chromeos and checkout_src_internal',\n    'dep_type': 'cipd',\n  },\n\n  'src/ash/webui/projector_app/resources/prod': {\n    'packages': [\n      {\n        'package': 'chromeos_internal/apps/projector_app/app',\n        'version': '1Wm90lTOedwidv20UgmC9eDt8AE0kddREgiRFg9xGlsC',\n      },\n    ],\n    'condition': 'checkout_chromeos and checkout_src_internal',\n    'dep_type': 'cipd',\n  },\n\n  'src/third_party/webpagereplay/cipd': {\n      'packages' : [\n          {\n              'package': 'infra/tools/wpr/linux_x86_64',\n              'version': 'y28SfbEF6nHSkZ1eHysM1t711zpOCmtk7jUdxZB-QSMC',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_prebuilts/build_tools': {\n      'url': Var('android_git') + '/platform/prebuilts/build-tools.git' + '@' + '3fbcdf38727f967badc13f9537bda0b4392c1f74',\n      'condition': 'checkout_android_prebuilts_build_tools',\n  },\n\n  # === ANDROID_DEPS Generated Code Start ===\n  # Generated by //third_party/android_deps/fetch_all.py\n  'src/third_party/android_deps/cipd/libs/com_android_support_support_annotations': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_android_support_support_annotations',\n              'version': 'version:2@28.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_android_tools_common': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_android_tools_common',\n              'version': 'version:2@30.2.0-beta01.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_android_tools_layoutlib_layoutlib_api': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_android_tools_layoutlib_layoutlib_api',\n              'version': 'version:2@30.2.0-beta01.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_android_tools_sdk_common': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_android_tools_sdk_common',\n              'version': 'version:2@30.2.0-beta01.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_annotations': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_annotations',\n              'version': 'version:2@4.1.1.4.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_apps_common_testing_accessibility_framework_accessibility_test_framework': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_apps_common_testing_accessibility_framework_accessibility_test_framework',\n              'version': 'version:2@4.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_datatransport_transport_api': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_datatransport_transport_api',\n              'version': 'version:2@2.2.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_auth': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_auth',\n              'version': 'version:2@21.1.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_auth_api_phone': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_auth_api_phone',\n              'version': 'version:2@18.0.2.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_auth_base': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_auth_base',\n              'version': 'version:2@18.0.10.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_auth_blockstore': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_auth_blockstore',\n              'version': 'version:2@16.4.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_base': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_base',\n              'version': 'version:2@18.5.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_basement': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_basement',\n              'version': 'version:2@18.4.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_cast': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_cast',\n              'version': 'version:2@17.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_cast_framework': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_cast_framework',\n              'version': 'version:2@17.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_clearcut': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_clearcut',\n              'version': 'version:2@17.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_cloud_messaging': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_cloud_messaging',\n              'version': 'version:2@16.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_fido': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_fido',\n              'version': 'version:2@21.1.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_flags': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_flags',\n              'version': 'version:2@17.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_gcm': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_gcm',\n              'version': 'version:2@17.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_identity_credentials': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_identity_credentials',\n              'version': 'version:2@16.0.0-alpha02.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_iid': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_iid',\n              'version': 'version:2@17.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_instantapps': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_instantapps',\n              'version': 'version:2@18.0.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_location': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_location',\n              'version': 'version:2@21.0.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_phenotype': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_phenotype',\n              'version': 'version:2@17.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_stats': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_stats',\n              'version': 'version:2@17.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_tasks': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_tasks',\n              'version': 'version:2@18.2.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_vision': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_vision',\n              'version': 'version:2@20.1.3.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_gms_play_services_vision_common': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_gms_play_services_vision_common',\n              'version': 'version:2@19.1.3.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_libraries_identity_googleid_googleid': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_libraries_identity_googleid_googleid',\n              'version': 'version:2@1.1.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_material_material': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_material_material',\n              'version': 'version:2@1.13.0-alpha05.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_play_core_common': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_play_core_common',\n              'version': 'version:2@2.0.2.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_android_play_feature_delivery': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_android_play_feature_delivery',\n              'version': 'version:2@2.0.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_auto_service_auto_service_annotations': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_auto_service_auto_service_annotations',\n              'version': 'version:2@1.0-rc6.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_auto_value_auto_value_annotations': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_auto_value_auto_value_annotations',\n              'version': 'version:2@1.11.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_code_findbugs_jsr305': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_code_findbugs_jsr305',\n              'version': 'version:2@3.0.2.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_code_gson_gson': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_code_gson_gson',\n              'version': 'version:2@2.9.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_dagger_dagger': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_dagger_dagger',\n              'version': 'version:2@2.52.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_dagger_hilt_core': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_dagger_hilt_core',\n              'version': 'version:2@2.52.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_errorprone_error_prone_annotations': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_errorprone_error_prone_annotations',\n              'version': 'version:2@2.30.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_firebase_firebase_annotations': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_firebase_firebase_annotations',\n              'version': 'version:2@16.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_firebase_firebase_common': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_firebase_firebase_common',\n              'version': 'version:2@19.5.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_firebase_firebase_components': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_firebase_firebase_components',\n              'version': 'version:2@16.1.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_firebase_firebase_encoders': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_firebase_firebase_encoders',\n              'version': 'version:2@16.1.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_firebase_firebase_encoders_json': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_firebase_firebase_encoders_json',\n              'version': 'version:2@17.1.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_firebase_firebase_iid': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_firebase_firebase_iid',\n              'version': 'version:2@21.0.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_firebase_firebase_iid_interop': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_firebase_firebase_iid_interop',\n              'version': 'version:2@17.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_firebase_firebase_installations': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_firebase_firebase_installations',\n              'version': 'version:2@16.3.5.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_firebase_firebase_installations_interop': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_firebase_firebase_installations_interop',\n              'version': 'version:2@16.0.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_firebase_firebase_measurement_connector': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_firebase_firebase_measurement_connector',\n              'version': 'version:2@18.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_firebase_firebase_messaging': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_firebase_firebase_messaging',\n              'version': 'version:2@21.0.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_guava_failureaccess': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_guava_failureaccess',\n              'version': 'version:2@1.0.2.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_guava_guava': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_guava_guava',\n              'version': 'version:2@33.3.1-jre.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_guava_guava_android': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_guava_guava_android',\n              'version': 'version:2@33.3.1-android.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_j2objc_j2objc_annotations': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_j2objc_j2objc_annotations',\n              'version': 'version:2@3.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_protobuf_protobuf_javalite': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_protobuf_protobuf_javalite',\n              'version': 'version:2@4.28.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_google_testparameterinjector_test_parameter_injector': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_google_testparameterinjector_test_parameter_injector',\n              'version': 'version:2@1.18.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_googlecode_java_diff_utils_diffutils': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_googlecode_java_diff_utils_diffutils',\n              'version': 'version:2@1.3.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_squareup_javapoet': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_squareup_javapoet',\n              'version': 'version:2@1.13.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_squareup_javawriter': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_squareup_javawriter',\n              'version': 'version:2@2.1.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_squareup_moshi_moshi': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_squareup_moshi_moshi',\n              'version': 'version:2@1.15.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_squareup_moshi_moshi_adapters': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_squareup_moshi_moshi_adapters',\n              'version': 'version:2@1.15.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_squareup_okio_okio_jvm': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_squareup_okio_okio_jvm',\n              'version': 'version:2@3.9.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/com_squareup_wire_wire_runtime_jvm': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/com_squareup_wire_wire_runtime_jvm',\n              'version': 'version:2@5.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/io_grpc_grpc_api': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/io_grpc_grpc_api',\n              'version': 'version:2@1.49.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/io_grpc_grpc_binder': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/io_grpc_grpc_binder',\n              'version': 'version:2@1.49.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/io_grpc_grpc_context': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/io_grpc_grpc_context',\n              'version': 'version:2@1.49.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/io_grpc_grpc_core': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/io_grpc_grpc_core',\n              'version': 'version:2@1.49.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/io_grpc_grpc_protobuf_lite': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/io_grpc_grpc_protobuf_lite',\n              'version': 'version:2@1.49.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/io_grpc_grpc_stub': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/io_grpc_grpc_stub',\n              'version': 'version:2@1.49.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/io_perfmark_perfmark_api': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/io_perfmark_perfmark_api',\n              'version': 'version:2@0.25.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/jakarta_inject_jakarta_inject_api': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/jakarta_inject_jakarta_inject_api',\n              'version': 'version:2@2.0.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/javax_annotation_javax_annotation_api': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/javax_annotation_javax_annotation_api',\n              'version': 'version:2@1.3.2.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/javax_annotation_jsr250_api': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/javax_annotation_jsr250_api',\n              'version': 'version:2@1.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/javax_inject_javax_inject': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/javax_inject_javax_inject',\n              'version': 'version:2@1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/net_bytebuddy_byte_buddy': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/net_bytebuddy_byte_buddy',\n              'version': 'version:2@1.14.12.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/net_bytebuddy_byte_buddy_agent': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/net_bytebuddy_byte_buddy_agent',\n              'version': 'version:2@1.14.12.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_bouncycastle_bcprov_jdk18on': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_bouncycastle_bcprov_jdk18on',\n              'version': 'version:2@1.78.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_ccil_cowan_tagsoup_tagsoup': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_ccil_cowan_tagsoup_tagsoup',\n              'version': 'version:2@1.2.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_checkerframework_checker_compat_qual': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_checkerframework_checker_compat_qual',\n              'version': 'version:2@2.5.5.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_checkerframework_checker_qual': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_checkerframework_checker_qual',\n              'version': 'version:2@3.43.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_checkerframework_checker_util': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_checkerframework_checker_util',\n              'version': 'version:2@3.25.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_codehaus_mojo_animal_sniffer_annotations': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_codehaus_mojo_animal_sniffer_annotations',\n              'version': 'version:2@1.21.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_conscrypt_conscrypt_openjdk_uber': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_conscrypt_conscrypt_openjdk_uber',\n              'version': 'version:2@2.5.2.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_hamcrest_hamcrest': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_hamcrest_hamcrest',\n              'version': 'version:2@2.2.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_jetbrains_kotlin_kotlin_android_extensions_runtime': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_jetbrains_kotlin_kotlin_android_extensions_runtime',\n              'version': 'version:2@1.9.22.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_jetbrains_kotlin_kotlin_parcelize_runtime': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_jetbrains_kotlin_kotlin_parcelize_runtime',\n              'version': 'version:2@1.9.22.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_jetbrains_kotlinx_atomicfu_jvm': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_jetbrains_kotlinx_atomicfu_jvm',\n              'version': 'version:2@0.23.2.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_jetbrains_kotlinx_kotlinx_coroutines_android': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_jetbrains_kotlinx_kotlinx_coroutines_android',\n              'version': 'version:2@1.8.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_jetbrains_kotlinx_kotlinx_coroutines_core_jvm': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_jetbrains_kotlinx_kotlinx_coroutines_core_jvm',\n              'version': 'version:2@1.8.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_jetbrains_kotlinx_kotlinx_coroutines_guava': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_jetbrains_kotlinx_kotlinx_coroutines_guava',\n              'version': 'version:2@1.8.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_jetbrains_kotlinx_kotlinx_coroutines_test_jvm': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_jetbrains_kotlinx_kotlinx_coroutines_test_jvm',\n              'version': 'version:2@1.7.3.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_jetbrains_kotlinx_kotlinx_serialization_core_jvm': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_jetbrains_kotlinx_kotlinx_serialization_core_jvm',\n              'version': 'version:2@1.7.2.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_jsoup_jsoup': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_jsoup_jsoup',\n              'version': 'version:2@1.15.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_jspecify_jspecify': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_jspecify_jspecify',\n              'version': 'version:2@1.0.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_mockito_mockito_android': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_mockito_mockito_android',\n              'version': 'version:2@5.11.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_mockito_mockito_core': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_mockito_mockito_core',\n              'version': 'version:2@5.11.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_mockito_mockito_subclass': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_mockito_mockito_subclass',\n              'version': 'version:2@5.11.0.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_objenesis_objenesis': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_objenesis_objenesis',\n              'version': 'version:2@3.3.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_ow2_asm_asm': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_ow2_asm_asm',\n              'version': 'version:2@9.7.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_ow2_asm_asm_analysis': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_ow2_asm_asm_analysis',\n              'version': 'version:2@9.7.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_ow2_asm_asm_commons': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_ow2_asm_asm_commons',\n              'version': 'version:2@9.7.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_ow2_asm_asm_tree': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_ow2_asm_asm_tree',\n              'version': 'version:2@9.7.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_ow2_asm_asm_util': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_ow2_asm_asm_util',\n              'version': 'version:2@9.7.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_robolectric_annotations': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_robolectric_annotations',\n              'version': 'version:2@4.14.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_robolectric_junit': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_robolectric_junit',\n              'version': 'version:2@4.14.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_robolectric_nativeruntime': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_robolectric_nativeruntime',\n              'version': 'version:2@4.14.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_robolectric_nativeruntime_dist_compat': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_robolectric_nativeruntime_dist_compat',\n              'version': 'version:2@1.0.16.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_robolectric_pluginapi': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_robolectric_pluginapi',\n              'version': 'version:2@4.14.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_robolectric_plugins_maven_dependency_resolver': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_robolectric_plugins_maven_dependency_resolver',\n              'version': 'version:2@4.14.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_robolectric_resources': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_robolectric_resources',\n              'version': 'version:2@4.14.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_robolectric_robolectric': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_robolectric_robolectric',\n              'version': 'version:2@4.14.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_robolectric_sandbox': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_robolectric_sandbox',\n              'version': 'version:2@4.14.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_robolectric_shadowapi': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_robolectric_shadowapi',\n              'version': 'version:2@4.14.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_robolectric_shadows_framework': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_robolectric_shadows_framework',\n              'version': 'version:2@4.14.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_robolectric_utils': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_robolectric_utils',\n              'version': 'version:2@4.14.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_robolectric_utils_reflector': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_robolectric_utils_reflector',\n              'version': 'version:2@4.14.1.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/android_deps/cipd/libs/org_yaml_snakeyaml': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/android_deps/libs/org_yaml_snakeyaml',\n              'version': 'version:2@2.3.cr1',\n          },\n      ],\n      'condition': 'checkout_android and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  # === ANDROID_DEPS Generated Code End ===\n\n  'src/tools/resultdb': {\n      'packages': [\n        {\n          'package': 'infra/tools/result_adapter/${{platform}}',\n          'version': Var('resultdb_version'),\n        },\n      ],\n      'condition': 'non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  # Dependencies from src_internal\n  'src/chromeos/ash/resources/internal': {\n      'url': Var('chrome_git') + '/chrome/chromeos/ash/resources/internal.git' + '@' +\n        'dd3d2b0c1e780a13f6716cdbd20b2489811f0218',\n      'condition': 'checkout_src_internal and checkout_chromeos',\n  },\n\n  'src/chromeos/assistant/internal': {\n      'url': Var('chrome_git') + '/chrome/assistant.git' + '@' +\n        '366dc486f8f18d097f22acb469b8eab41b14c9ad',\n      'condition': 'checkout_src_internal and checkout_chromeos',\n    },\n\n  'src/ui/gl/resources/angle-metal': {\n    'packages': [{\n       'package': 'chromium/gpu/angle-metal-shader-libraries',\n       'version': 'S0FPOVKrgaiqyuR20SSHiPorLgYez29bfwEdKBobUMMC',\n    }],\n    'dep_type': 'cipd',\n    'condition': 'checkout_mac or checkout_ios',\n  },\n  'src/buildtools/android/doclava': {\n    'dep_type': 'gcs',\n    'bucket': 'chromium-doclava',\n    'condition': 'checkout_android and non_git_source',\n    'objects': [\n      {\n      'object_name': '1931becb8a8e21685f39c62854e9e814d64ccf1a',\n      'sha256sum': '935a602c0dda7f769fc48fc777697ea23ccead170fbc70d2d41af5713ef50bbf',\n      'size_bytes': 3517760,\n      'generation': 1516199210583319,\n      },\n    ],\n  },\n  # Repositories from src_internal\n  'src/build/fuchsia/internal': {\n      'url': Var('chrome_git') + '/fuchsia/build.git' + '@' +\n        '16da074bda38d989dbcbee0c7c75e2aa83783bb2',\n      'condition': 'checkout_fuchsia_internal and checkout_src_internal',\n  },\n\n  'src/chrome/app/theme/default_100_percent/google_chrome': {\n      'url': Var('chrome_git') + '/chrome/theme/default_100_percent/google_chrome.git' + '@' +\n        'c5fa2fa6eebebdd7a8f6886cff6968b59b63284f',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/app/theme/default_200_percent/google_chrome': {\n      'url': Var('chrome_git') + '/chrome/theme/default_200_percent/google_chrome.git' + '@' +\n        '323e8f4ce9be0212708cce6b765a632a1a9d824c',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/app/theme/google_chrome': {\n      'url': Var('chrome_git') + '/chrome/theme/google_chrome.git' + '@' +\n        '1d807d1b5ffc29e13e3c05260ce8a44401e3582d',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/browser/enterprise/connectors/internal': {\n      'url': Var('chrome_git') + '/chrome/browser/enterprise/connectors/internal.git' + '@' +\n        '7fd7c8dd496740724d0024408ae7a96298e34aa2',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/browser/google/linkdoctor_internal': {\n      'url': Var('chrome_git') + '/chrome/linkdoctor.git' + '@' +\n        'fe28a8f90c5471f20f8fee9ff7f6c6f8b8d02bed', # from svn revision 32577\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/browser/internal': {\n      'url': Var('chrome_git') + '/chrome/browser_internal.git' + '@' +\n        '5649dd0237ac7f75c2779ff757e8666bdb9d2674',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/browser/media/engagement_internal': {\n      'url': Var('chrome_git') + '/chrome/browser/media/engagement_internal.git' + '@' +\n        '14b00ddbb904612ec8805f00718ae3f95c02a076',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/browser/nearby_sharing/internal': {\n      'url': Var('chrome_git') + '/chrome/browser/nearby_sharing/internal.git' + '@' +\n        '5fe4183de2df3467add81f4610f79ea1dde41a48',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/browser/platform_experience/win': {\n      'url': Var('chrome_git') + '/chrome/browser/platform_experience/win.git' + '@' +\n        '4d37f316b79229e3ec9e021f6e7590f190dd0134',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/browser/request_header_integrity/internal': {\n      'url': Var('chrome_git') + '/chrome/browser/request_header_integrity/internal.git' + '@' +\n        '1592aa7ba598a048f918f54735bcf056556532c3',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/browser/resources/downloads/internal': {\n      'url': Var('chrome_git') + '/chrome/browser/resources/downloads_internal.git' + '@' +\n        '4fefb8a24ae6c421f640b9ef028e4b4ca75df729',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/browser/resources/settings/internal': {\n      'url': Var('chrome_git') + '/chrome/browser/resources/settings_internal.git' + '@' +\n        'bc502cc43fa3999514c63c96aa75239c9d1acf91', # from svn revision 41419\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/browser/spellchecker/internal': {\n      'url': Var('chrome_git') + '/chrome/spellchecker/internal.git' + '@' +\n        'a22002a5b3cf7c6b872b25712af97a5664a350e2', # from svn revision 24388\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/browser/resources/chromeos/mako/resources': {\n    'packages' : [\n      {\n        'package': 'chromeos_internal/inputs/orca',\n        'version': 'Wzh-xjWvzQ4sxJ83qNnnr0RIF5dy95fqpG-is0Y_aRQC'\n      }\n    ],\n    'condition': 'checkout_chromeos and checkout_src_internal',\n    'dep_type': 'cipd',\n  },\n\n  'src/chrome/browser/resources/chromeos/seal/resources': {\n    'packages' : [\n      {\n        'package': 'chromeos_internal/inputs/seal',\n        'version': '11AdGL1RBEo2LflLT5Vc8Q3vBfjsHQAuH5jAhUBxL9QC'\n      }\n    ],\n    'condition': 'checkout_chromeos and checkout_src_internal',\n    'dep_type': 'cipd',\n  },\n\n  'src/chrome/elevation_service/internal': {\n    'url': Var('chrome_git') + '/chrome/elevation_service/internal.git' + '@' +\n        'c13ff6fa7c879977a9c92e1d753164f4119e41e1',\n    'condition': 'checkout_src_internal and checkout_win',\n  },\n\n  # Installer bits used only by Mac, but mapped for all OSes to ease source\n  # grepping.\n  'src/chrome/installer/mac/internal': {\n      'url': Var('chrome_git') + '/chrome/installer/mac/internal.git' + '@' +\n        '85c282fe6f2763822964028cb89be7b808b07169',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/test/data/firefox3_profile/searchplugins': {\n      'url': Var('chrome_git') + '/chrome/data/osdd/firefox3_profile_searchplugins.git' + '@' +\n        '6cf09b86fb9d058453e7d05978ff8e91b5e8e749',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/test/data/firefox3_searchplugins': {\n      'url': Var('chrome_git') + '/chrome/data/osdd/firefox3_searchplugins.git' + '@' +\n        '490580801915834d72dd8a1e943924c35df45673',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/test/data/gpu/vt': {\n      'url': Var('chrome_git') + '/chrome/data/vectortown_endurance/vectortownstatic-20121022.git' + '@' +\n        'c34f30f909a414d378a1678eba921e58940708c4',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/test/data/perf/frame_rate/private': {\n      'url': Var('chrome_git') + '/chrome/data/frame_rate_tests.git' + '@' +\n        '6394c925a272b92a4e9e16d929af049b7aa6e4f8',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/test/data/perf/private': {\n      'url': Var('chrome_git') + '/chrome/data/perf_tests.git' + '@' +\n        '6f3e320b1fa10910eb1dcbad36afdd1ad00b2c5a',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/test/data/pdf_private': {\n      'url': Var('chrome_git') + '/chrome/data/pdf_private.git' + '@' +\n        '23b64c03647779d193ee8ccb3f2a1a5560da9c94',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/test/media_router/internal': {\n      'url': Var('chrome_git') + '/chrome/test/media_router/internal.git' + '@' +\n        '99937b3180700d9fb63eace8c762c7a5977a301f',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/chrome/tools/memory': {\n      'url': Var('chrome_git') + '/chrome/tools/memory.git' + '@' +\n        '3c9359382236f6d57c91505234a2bc7fd635ba6c',\n      'condition': 'checkout_win and checkout_src_internal',\n  },\n\n  'src/chrome/services/speech/internal': {\n      'url': Var('chrome_git') + '/chromeos/speech.git' + '@' + '917c83b7c79126906c5d19668256b9d9139a0e71',\n      'condition': 'checkout_chromeos and checkout_src_internal',\n   },\n\n  'src/chrome/updater/internal': {\n    'url': Var('chrome_git') + '/chrome/updater/internal.git' + '@' +\n        'e8e0e06cc5b990d06b4583886f0f8946241fb221',\n    'condition': 'checkout_src_internal',\n  },\n\n  'src/components/accessibility/internal': {\n      'url': Var('chrome_git') + '/chrome-accessibility.git' + '@' +\n        '2e6c405fd5f09ad9d8933bc531af8c5dd24f348c',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/components/autofill/core/browser/form_parsing/internal_resources': {\n      'url': Var('chrome_git') + '/chrome/components/autofill_regex_patterns.git' + '@' +\n        '6672b4874e193fd6790f6c9ce6c78a1c2195208b',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/components/crash/core/app/internal': {\n    'url': Var('chrome_git') + '/chrome/components/crash.git' + '@' + '977755983e64eb91813875407050afcc7c1b6683',\n    'condition': 'checkout_src_internal',\n  },\n\n  'src/components/metrics/internal': {\n      'url': Var('chrome_git') + '/chrome/components/metrics/internal.git' + '@' +\n        'b142ab0612763d64d3ec3b79cd71c6dc9bcbe20b',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/components/ntp_tiles/resources/internal': {\n      'url': Var('chrome_git') + '/chrome/components/ntp_tiles/resources.git' + '@' +\n        '48c257ae331a9c642af38b8f62cb2c789e2a7da6',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/components/optimization_guide/internal': {\n      'url': Var('chrome_git') + '/chrome/components/optimization_guide.git' + '@' +\n        '3fb238e186ff3656f53f274ca50e41e00a2adb64',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/components/plus_addresses/resources/internal': {\n      'url': Var('chrome_git') + '/chrome/components/plus_addresses/resources.git' + '@' +\n        'e73efc6aae32e7a580170cf34cbbea6bf1a6b7ce',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/components/resources/default_100_percent/google_chrome': {\n      'url': Var('chrome_git') + '/chrome/components/default_100_percent/google_chrome.git' + '@' +\n        'e147db95eb4f7baa20207a513485e019af0e18bb',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/components/resources/default_200_percent/google_chrome': {\n      'url': Var('chrome_git') + '/chrome/components/default_200_percent/google_chrome.git' + '@' +\n        '22f067172eb11f6b7191aa1ec1aec38b0045839b',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/components/resources/default_300_percent/google_chrome': {\n      'url': Var('chrome_git') + '/chrome/components/default_300_percent/google_chrome.git' + '@' +\n        'd01fae2b485ce5571b9d2e9d766cbbda687c21ad',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/components/site_isolation/internal': {\n      'url': Var('chrome_git') + '/chrome/components/site_isolation.git' + '@' +\n        'e0d8a7769c1daabb974bf0d229970534a0aede77',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/components/test/data/autofill/heuristics-json/internal': {\n      'url': Var('chrome_git') + '/chrome/test/autofill/structured_forms.git' + '@' +\n        'd00d0a2480ff55cda6d6cc41bcecc615328860a7',\n      'condition': 'checkout_chromium_autofill_test_dependencies',\n  },\n\n  'src/components/test/data/autofill/label-doms/internal': {\n      'url': Var('chrome_git') + '/chrome/test/autofill/field_labels.git' + '@' +\n        'c67083dbb39d4bd87d86c083fecbe35aa562c777',\n      'condition': 'checkout_chromium_autofill_test_dependencies',\n  },\n\n  'src/components/vector_icons/google_chrome': {\n      'url': Var('chrome_git') + '/chrome/vector_icons/google_chrome.git' + '@' +\n        'ecad7931572c1f673bf582b785838daadbaadfab',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/content/test/data/plugin': {\n      'url': Var('chrome_git') + '/chrome/data/chrome_plugin_tests.git' + '@' +\n        '3e80d4d08f5421d6bc9340964834ebc903a318aa',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/google_apis/internal': {\n      'url': Var('chrome_git') + '/chrome/google_apis/internal.git' + '@' +\n        '7a37593e294ec4baa40e12505722a792940399ff',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/ios_internal':  {\n      'url': Var('chrome_git') + '/chrome/ios_internal.git' + '@' +\n        '5d2fd8e76328068efba5dcac5421f3390b7aa9e7',\n      'condition': 'checkout_ios and checkout_src_internal',\n  },\n\n  'src/remoting/host/installer/linux/internal': {\n      'url': Var('chrome_git') + '/chrome/remoting/host/installer/linux/internal.git' + '@' +\n        'e190816de75b14897f1af785eb37d237750460e2',\n      'condition': 'checkout_linux and checkout_src_internal',\n  },\n\n  'src/remoting/internal': {\n      'url': Var('chrome_git') + '/chrome/remoting/internal.git' + '@' +\n        'bc8e5dbe2ea801d77d77ed8400e752f631f352a8',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/remoting/test/internal': {\n      'url': Var('chrome_git') + '/chrome/remoting/test/internal.git' + '@' +\n        '34ff3657e2176fc48a57fad555b076a50a409de6',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/remoting/tools/internal': {\n      'url': Var('chrome_git') + '/chrome/remoting/tools/internal.git' + '@' +\n        'acfed9c3a363694f37aadfb5cda4c31109661eb8',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/signing_keys': {\n      'url': Var('chrome_git') + '/clank/apptestkey.git' + '@' +\n        '5138e684915721cbccbb487ec0764ed05650fcd0',\n      'condition': 'checkout_android and checkout_google_internal and checkout_src_internal',\n  },\n\n  'src/skia/tools/clusterfuzz-data':{\n      'url': Var('chrome_git') + '/chrome/tools/clusterfuzz-data.git' + '@' +\n        'fa1fc4acacddd8d655cfca0bcadef5f7e2259bed',\n      'condition': 'checkout_clusterfuzz_data and checkout_src_internal',\n  },\n\n  'src/third_party/android_tools_internal': {\n      'url': Var('chrome_git') + '/clank/third_party/android_tools.git' + '@' +\n        'ab59dfd133386420a319a194c9ac6f5cae802471',\n      'condition': 'checkout_android and checkout_src_internal',\n  },\n\n  'src/third_party/libassistant/x64': {\n    'packages': [\n        {\n            'package': 'chromeos_internal/assistant/libassistant/libassistant_cros_device/x86_64/internal',\n            'version': 'CmuG4T_84hgqYyVPLppHO_cYpXPoYIFpJNT5wC5iGZgC',\n        },\n    ],\n    'condition': 'checkout_src_internal and checkout_chromeos',\n    'dep_type': 'cipd',\n  },\n\n 'src/third_party/libassistant/arm64': {\n    'packages': [\n        {\n            'package': 'chromeos_internal/assistant/libassistant/libassistant_cros_device/arm64/internal',\n            'version': '0gwaQvw-4Jne1dvCdVsGRVHcADdvSLBy172ar-FFyIoC',\n        },\n    ],\n    'condition': 'checkout_src_internal and checkout_chromeos',\n    'dep_type': 'cipd',\n  },\n\n 'src/third_party/libassistant/arm': {\n    'packages': [\n        {\n            'package': 'chromeos_internal/assistant/libassistant/libassistant_cros_device/arm/internal',\n            'version': 'bLW45XE7O8kCndjxEYtqdupr0tV4mgB7xKkcETBOsskC',\n        },\n    ],\n    'condition': 'checkout_src_internal and checkout_chromeos',\n    'dep_type': 'cipd',\n  },\n\n 'src/third_party/libassistant/glinux': {\n    'packages': [\n        {\n            'package': 'chromeos_internal/assistant/libassistant/libassistant_cros_glinux/x64/internal',\n            'version': '3Opw5sw239P8B6hdZCofFV_16gGsW5nJbuoA93doiAkC',\n        },\n    ],\n    'condition': 'checkout_src_internal and checkout_chromeos',\n    'dep_type': 'cipd',\n  },\n\n 'src/third_party/libassistant/fake_s3_server': {\n    'packages': [\n        {\n            'package': 'chromeos_internal/assistant/libassistant/fake_s3_server_cros_glinux/x64/internal',\n            'version': '7BVkGvAvW0XDvbHj3P4-e6TAxssx6_PC2L0eQBLWyP8C',\n        },\n    ],\n    'condition': 'checkout_src_internal and checkout_chromeos',\n    'dep_type': 'cipd',\n  },\n\n  'src/third_party/screen-ai/linux': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/screen-ai/linux',\n              'version': Var('screen_ai_linux'),\n          },\n      ],\n      'condition': 'checkout_linux and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/screen-ai/macos_amd64': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/screen-ai/mac-amd64',\n              'version': Var('screen_ai_macos_amd64'),\n          },\n      ],\n      'condition': 'checkout_mac',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/screen-ai/macos_arm64': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/screen-ai/mac-arm64',\n              'version': Var('screen_ai_macos_arm64'),\n          },\n      ],\n      'condition': 'checkout_mac',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/screen-ai/windows_amd64': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/screen-ai/windows-amd64',\n              'version': Var('screen_ai_windows_amd64'),\n          },\n      ],\n      'condition': 'checkout_win',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/screen-ai/windows_386': {\n      'packages': [\n          {\n              'package': 'chromium/third_party/screen-ai/windows-386',\n              'version': Var('screen_ai_windows_386'),\n          },\n      ],\n      'condition': 'checkout_win',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/soda': {\n      'packages': [\n          {\n              'package': 'chrome_internal/third_party/soda',\n              'version': 'StdK8khsivYZXVo2wZuVMnDN_xrVO2a8HV8kvfJ3emwC',\n          },\n      ],\n      'condition': 'checkout_linux and checkout_soda and checkout_src_internal and non_git_source',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/soda-mac64': {\n      'packages': [\n          {\n              'package': 'chrome_internal/third_party/soda-mac64',\n              'version': 'bJ-qwdYVguWT0V24YjNZ7Nw_toipv0YnVuadeX5xozEC',\n          },\n      ],\n      'condition': 'checkout_mac and checkout_soda and checkout_src_internal',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/soda-win32': {\n      'packages': [\n          {\n              'package': 'chrome_internal/third_party/soda-win32',\n              'version': '977qxBGTKbe2kY9aQch9OkNJ3YE8Nt2mVjetdpWeM0IC',\n          },\n      ],\n      'condition': 'checkout_win and checkout_soda and checkout_src_internal',\n      'dep_type': 'cipd',\n  },\n\n  'src/third_party/soda-win64': {\n      'packages': [\n          {\n              'package': 'chrome_internal/third_party/soda-win64',\n              'version': '1elz1jfCAzy5tZUNBr8FsovjgFxmtu8jdyA8ay9Ta8UC',\n          },\n      ],\n      'condition': 'checkout_win and checkout_soda and checkout_src_internal',\n      'dep_type': 'cipd',\n    },\n\n  'src/third_party/widevine/cdm/chromeos': {\n      'url': Var('chrome_git') + '/chrome/deps/widevine/cdm/chromeos.git' + '@' +\n        'b3c0f132204e9732422075787138ce2cb60faa4a',\n      'condition': '(checkout_chromeos or checkout_linux) and checkout_src_internal',\n  },\n\n  'src/third_party/widevine/cdm/linux': {\n      'url': Var('chrome_git') + '/chrome/deps/widevine/cdm/linux.git' + '@' +\n        '91eaf08b6d45a593d8fa9a3aaff2ff0f6a97b422',\n      'condition': 'checkout_linux and checkout_src_internal',\n  },\n\n  'src/third_party/widevine/cdm/mac': {\n      'url': Var('chrome_git') + '/chrome/deps/widevine/cdm/mac.git' + '@' +\n        'a0b43dc94b6519a2f0e4163801748e234fdfdaff',\n      'condition': 'checkout_mac and checkout_src_internal',\n    },\n\n  'src/third_party/widevine/cdm/win': {\n      'url': Var('chrome_git') + '/chrome/deps/widevine/cdm/win.git' + '@' +\n        '7c1534e91a8bfdc4af28f8b7d6900343a845a8af',\n      'condition': 'checkout_win and checkout_src_internal',\n  },\n\n  'src/third_party/widevine/scripts': {\n      'url': Var('chrome_git') + '/chrome/deps/widevine/scripts.git' + '@' +\n        '6ae793a606aeed0d0f1c6f688117653710137744',\n      'condition': 'checkout_src_internal',\n  },\n\n  # Only Linux test license server is available.\n  'src/third_party/widevine/test/license_server': {\n      'url': Var('chrome_git') + '/chrome/deps/widevine/test/license_server.git' + '@' +\n        '8b195ed15e73e2ecc9861afb05e6af0b4bdf7413',\n      'condition': 'checkout_linux and checkout_src_internal',\n  },\n\n  'src/third_party/wix': {\n      'url': Var('chrome_git') + '/chrome/deps/wix/v3_5_2519.git' + '@' +\n        '1cda03778b09bee24389da73daef3de862da37fc',\n      'condition': 'checkout_win and checkout_src_internal',\n  },\n\n  'src/tools/perf/data': {\n      'url': Var('chrome_git') + '/chrome/tools/perf/data.git' + '@' +\n        'c7eaf497f690ee69e832b1530e19877602e65b18',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/ui/file_manager/internal': {\n      'url': Var('chrome_git') + '/chrome/file_manager.git' + '@' +\n        'a84801be1d5ef906cc03db7eeadd25ce0245ce44',\n      'condition': '(checkout_chromeos or checkout_linux) and checkout_src_internal',\n  },\n\n  'src/ui/webui/internal': {\n      'url': Var('chrome_git') + '/chrome/ui-webui-internal.git' + '@' +\n        '4afc450a9363ab44f45c3639d0661daa7dbe5bda',\n      'condition': 'checkout_chromeos and checkout_src_internal',\n  },\n\n  'src/webkit/data/bmp_decoder': {\n      'url': Var('chrome_git') + '/chrome/data/bmp_decoder.git' + '@' +\n        '5a3232a478b8afd0e8403fb8c668baf8c9e25ea3',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/webkit/data/ico_decoder': {\n      'url': Var('chrome_git') + '/chrome/data/ico_decoder.git' + '@' +\n        'aba38604e037bdbeedca9c2780c94502a8a6034d',\n      'condition': 'checkout_src_internal',\n  },\n\n  'src/webkit/data/test_shell/plugins': {\n      'url': Var('chrome_git') + '/chrome/data/webkit_plugin_tests.git' + '@' +\n        'e4bd19f95afa6483a54906c2a3e5d329d2d81690',\n      'condition': 'checkout_src_internal',\n  },\n}\n\n\ninclude_rules = [\n  # Everybody can use some things.\n  # NOTE: THIS HAS TO STAY IN SYNC WITH third_party/DEPS which disallows these.\n  '+base',\n  '+build',\n  '+ipc',\n  # perfetto is base's public dependency.\n  '+third_party/perfetto/include/perfetto/tracing',\n  '+third_party/perfetto/include/perfetto/test',\n\n  # PartitionAlloc is located at `base/allocator/partition_allocator` but\n  # prefers its own include path:\n  # `#include \"partition_alloc/...\"` is prefered to\n  # `#include \"base/allocator/partition_allocator/src/partition_alloc/...\"`.\n  \"+partition_alloc\",\n  \"-base/allocator/partition_allocator\",\n\n  # Everybody can use headers generated by tools/generate_library_loader.\n  '+library_loaders',\n\n  '+testing',\n  '+third_party/google_benchmark/src/include/benchmark/benchmark.h',\n  '+third_party/icu/source/common/unicode',\n  '+third_party/icu/source/i18n/unicode',\n  '+url',\n\n  # Abseil is allowed by default, but some features are banned. See\n  # //styleguide/c++/c++-features.md.\n  '+third_party/abseil-cpp',\n  '-third_party/abseil-cpp/absl/algorithm/container.h',\n  '-third_party/abseil-cpp/absl/base/attributes.h',\n  '-third_party/abseil-cpp/absl/base/no_destructor.h',\n  '-third_party/abseil-cpp/absl/base/nullability.h',\n  '-third_party/abseil-cpp/absl/container',\n  '+third_party/abseil-cpp/absl/container/inlined_vector.h',\n  '-third_party/abseil-cpp/absl/crc',\n  '-third_party/abseil-cpp/absl/flags',\n  '-third_party/abseil-cpp/absl/functional/any_invocable.h',\n  '-third_party/abseil-cpp/absl/functional/bind_front.h',\n  '-third_party/abseil-cpp/absl/functional/function_ref.h',\n  '-third_party/abseil-cpp/absl/functional/overload.h',\n  '-third_party/abseil-cpp/absl/hash',\n  '-third_party/abseil-cpp/absl/log',\n  '-third_party/abseil-cpp/absl/random',\n  '-third_party/abseil-cpp/absl/status/statusor.h',\n  '-third_party/abseil-cpp/absl/strings',\n  '+third_party/abseil-cpp/absl/strings/ascii.h',\n  '+third_party/abseil-cpp/absl/strings/cord.h',\n  '+third_party/abseil-cpp/absl/strings/str_format.h',\n  '-third_party/abseil-cpp/absl/synchronization',\n  '-third_party/abseil-cpp/absl/time',\n  '-third_party/abseil-cpp/absl/types/any.h',\n  '-third_party/abseil-cpp/absl/types/optional.h',\n  '-third_party/abseil-cpp/absl/types/span.h',\n]\n\n\n# checkdeps.py shouldn't check include paths for files in these dirs:\nskip_child_includes = [\n  'native_client_sdk',\n  'out',\n  'skia',\n  'testing',\n  'third_party/abseil-cpp',\n  'v8',\n]\n\n\nhooks = [\n  # Download and initialize \"vpython\" VirtualEnv environment packages for\n  # Python3. We do this before running any other hooks so that any other\n  # hooks that might use vpython don't trip over unexpected issues and\n  # don't run slower than they might otherwise need to.\n  {\n    'name': 'vpython3_common',\n    'pattern': '.',\n    'action': [ 'vpython3',\n                '-vpython-spec', 'src/.vpython3',\n                '-vpython-tool', 'install',\n    ],\n  },\n  {\n    # This clobbers when necessary (based on get_landmines.py). This should\n    # run as early as possible so that other things that get/generate into the\n    # output directory will not subsequently be clobbered.\n    'name': 'landmines',\n    'pattern': '.',\n    'action': [\n        'python3',\n        'src/build/landmines.py',\n    ],\n  },\n  {\n    # This clobbers when necessary (based on the internal ios version of\n    # get_landmines.py). This should run as early as possible so that\n    # other things that get/generate into the output directory will not\n    # subsequently be clobbered. This script is only run# for iOS build\n    # with src_internal.\n    'name': 'landmines_ios_internal',\n    'pattern': '.',\n    'condition': 'checkout_ios and checkout_src_internal',\n    'action': [\n        'python3',\n        'src/build/landmines.py',\n        '--landmine-scripts',\n        'src/ios_internal/build/get_landmines.py',\n        '--landmines-path',\n        'src/ios_internal/.landmines',\n    ],\n  },\n  {\n    # Ensure that the DEPS'd \"depot_tools\" has its self-update capability\n    # disabled.\n    'name': 'disable_depot_tools_selfupdate',\n    'pattern': '.',\n    'action': [\n        'python3',\n        'src/third_party/depot_tools/update_depot_tools_toggle.py',\n        '--disable',\n    ],\n  },\n  {\n    # Ensure we remove any file from disk that is no longer needed (e.g. after\n    # hooks to native GCS deps migration).\n    'name': 'remove_stale_files',\n    'pattern': '.',\n    'action': [\n        'python3',\n        'src/tools/remove_stale_files.py',\n        'src/third_party/test_fonts/test_fonts.tar.gz', # Remove after 20240901\n        'src/third_party/node/node_modules.tar.gz', # TODO: Remove after 20241201, see https://crbug.com/351092787\n        'src/third_party/tfhub_models', # TODO: Remove after 20241211\n    ],\n  },\n  {\n    # Ensure that we don't accidentally reference any .pyc files whose\n    # corresponding .py files have since been deleted.\n    # We could actually try to avoid generating .pyc files, crbug.com/500078.\n    'name': 'remove_stale_pyc_files',\n    'pattern': '.',\n    'action': [\n        'python3',\n        'src/tools/remove_stale_pyc_files.py',\n        'src/android_webview/tools',\n        'src/build/android',\n        'src/gpu/gles2_conform_support',\n        'src/infra',\n        'src/ppapi',\n        'src/printing',\n        'src/third_party/blink/renderer/build/scripts',\n        'src/third_party/blink/tools',  # See http://crbug.com/625877.\n        'src/third_party/catapult',\n        'src/third_party/mako', # Some failures triggered by crrev.com/c/3686969\n        'src/tools',\n    ],\n  },\n  {\n    # This downloads binaries for Native Client's newlib toolchain.\n    # Done in lieu of building the toolchain from scratch as it can take\n    # anywhere from 30 minutes to 4 hours depending on platform to build.\n    'name': 'nacltools',\n    'pattern': '.',\n    'condition': 'checkout_nacl',\n    'action': [\n        'python3',\n        'src/build/download_nacl_toolchains.py',\n        '--mode', 'nacl_core_sdk',\n        'sync', '--extract',\n    ],\n  },\n  {\n    # Case-insensitivity for the Win SDK. Must run before win_toolchain below.\n    'name': 'ciopfs_linux',\n    'pattern': '.',\n    'condition': 'checkout_win and host_os == \"linux\"',\n    'action': [ 'python3',\n                'src/third_party/depot_tools/download_from_google_storage.py',\n                '--no_resume',\n                '--no_auth',\n                '--bucket', 'chromium-browser-clang/ciopfs',\n                '-s', 'src/build/ciopfs.sha1',\n    ]\n  },\n  {\n    # Update the Windows toolchain if necessary.  Must run before 'clang' below.\n    'name': 'win_toolchain',\n    'pattern': '.',\n    'condition': 'checkout_win',\n    'action': ['python3', 'src/build/vs_toolchain.py', 'update', '--force'],\n  },\n  {\n    # Update the Mac toolchain if necessary.\n    'name': 'mac_toolchain',\n    'pattern': '.',\n    'condition': 'checkout_mac or checkout_ios',\n    'action': ['python3', 'src/build/mac_toolchain.py'],\n  },\n  {\n    # Build the clang toolchain from tip-of-tree.\n    # Note: On Win, this should run after win_toolchain, as it may use it.\n    'name': 'clang_tot',\n    'pattern': '.',\n    'condition': 'llvm_force_head_revision',\n    'action': ['vpython3', 'src/tools/clang/scripts/build.py',\n               '--llvm-force-head-revision',\n               '--with-android={checkout_android}',\n               '--with-fuchsia={checkout_fuchsia}'],\n  },\n  {\n    # Update LASTCHANGE.\n    'name': 'lastchange',\n    'pattern': '.',\n    'action': ['python3', 'src/build/util/lastchange.py',\n               '-o', 'src/build/util/LASTCHANGE'],\n  },\n  {\n    # Update GPU lists version string (for gpu/config).\n    'name': 'gpu_lists_version',\n    'pattern': '.',\n    'action': ['python3', 'src/build/util/lastchange.py',\n               '-m', 'GPU_LISTS_VERSION',\n               '--revision-id-only',\n               '--header', 'src/gpu/config/gpu_lists_version.h'],\n  },\n  {\n    # Update skia_commit_hash.h.\n    'name': 'lastchange_skia',\n    'pattern': '.',\n    'action': ['python3', 'src/build/util/lastchange.py',\n               '-m', 'SKIA_COMMIT_HASH',\n               '-s', 'src/third_party/skia',\n               '--header', 'src/skia/ext/skia_commit_hash.h'],\n  },\n  {\n    # Update dawn_version.h.\n    'name': 'lastchange_dawn',\n    'pattern': '.',\n    'action': ['python3', 'src/build/util/lastchange.py',\n               '-s', 'src/third_party/dawn',\n               '--revision', 'src/gpu/webgpu/DAWN_VERSION'],\n  },\n  # Pull dsymutil binaries using checked-in hashes.\n  {\n    'name': 'dsymutil_mac_arm64',\n    'pattern': '.',\n    'condition': 'host_os == \"mac\" and host_cpu == \"arm64\"',\n    'action': [ 'python3',\n                'src/third_party/depot_tools/download_from_google_storage.py',\n                '--no_resume',\n                '--no_auth',\n                '--bucket', 'chromium-browser-clang',\n                '-s', 'src/tools/clang/dsymutil/bin/dsymutil.arm64.sha1',\n                '-o', 'src/tools/clang/dsymutil/bin/dsymutil',\n    ],\n  },\n  {\n    'name': 'dsymutil_mac_x64',\n    'pattern': '.',\n    'condition': 'host_os == \"mac\" and host_cpu == \"x64\"',\n    'action': [ 'python3',\n                'src/third_party/depot_tools/download_from_google_storage.py',\n                '--no_resume',\n                '--no_auth',\n                '--bucket', 'chromium-browser-clang',\n                '-s', 'src/tools/clang/dsymutil/bin/dsymutil.x64.sha1',\n                '-o', 'src/tools/clang/dsymutil/bin/dsymutil',\n    ],\n  },\n\n  # Pull rc binaries using checked-in hashes.\n  {\n    'name': 'rc_win',\n    'pattern': '.',\n    'condition': 'checkout_win and host_os == \"win\"',\n    'action': [ 'python3',\n                'src/third_party/depot_tools/download_from_google_storage.py',\n                '--no_resume',\n                '--no_auth',\n                '--bucket', 'chromium-browser-clang/rc',\n                '-s', 'src/build/toolchain/win/rc/win/rc.exe.sha1',\n    ],\n  },\n  {\n    'name': 'rc_mac',\n    'pattern': '.',\n    'condition': 'checkout_win and host_os == \"mac\"',\n    'action': [ 'python3',\n                'src/third_party/depot_tools/download_from_google_storage.py',\n                '--no_resume',\n                '--no_auth',\n                '--bucket', 'chromium-browser-clang/rc',\n                '-s', 'src/build/toolchain/win/rc/mac/rc.sha1',\n    ],\n  },\n  {\n    'name': 'rc_linux',\n    'pattern': '.',\n    'condition': 'checkout_win and host_os == \"linux\"',\n    'action': [ 'python3',\n                'src/third_party/depot_tools/download_from_google_storage.py',\n                '--no_resume',\n                '--no_auth',\n                '--bucket', 'chromium-browser-clang/rc',\n                '-s', 'src/build/toolchain/win/rc/linux64/rc.sha1',\n    ]\n  },\n  {\n    'name': 'apache_win32',\n    'pattern': '\\\\.sha1',\n    'condition': 'checkout_win',\n    'action': [ 'python3',\n                'src/third_party/depot_tools/download_from_google_storage.py',\n                '--no_resume',\n                '--directory',\n                '--recursive',\n                '--no_auth',\n                '--num_threads=16',\n                '--bucket', 'chromium-apache-win32',\n                'src/third_party/apache-win32',\n    ],\n  },\n\n  # Download Telemetry's binary dependencies via conditionals\n  {\n    'name': 'checkout_telemetry_binary_dependencies',\n    'condition': 'checkout_telemetry_dependencies',\n    'pattern': '.',\n    'action': [ 'vpython3',\n                'src/third_party/catapult/telemetry/bin/fetch_telemetry_binary_dependencies',\n    ],\n  },\n\n  # Download Telemetry's benchmark binary dependencies via conditionals\n  {\n    'name': 'checkout_telemetry_benchmark_deps',\n    'condition': 'checkout_telemetry_dependencies and checkout_linux and not checkout_android and not skip_wpr_archives_download',\n    'pattern': '.',\n    'action': [ 'vpython3',\n                'src/tools/perf/fetch_benchmark_deps.py',\n                '-f',\n                '-p',\n                'linux'\n    ],\n  },\n  {\n    'name': 'checkout_telemetry_benchmark_deps',\n    'condition': 'checkout_telemetry_dependencies and checkout_win and not skip_wpr_archives_download',\n    'pattern': '.',\n    'action': [ 'vpython3',\n                'src/tools/perf/fetch_benchmark_deps.py',\n                '-f',\n                '-p',\n                'win'\n    ],\n  },\n  {\n    'name': 'checkout_telemetry_benchmark_deps',\n    'condition': 'checkout_telemetry_dependencies and checkout_mac and not skip_wpr_archives_download',\n    'pattern': '.',\n    'action': [ 'vpython3',\n                'src/tools/perf/fetch_benchmark_deps.py',\n                '-f',\n                '-p',\n                'mac'\n    ],\n  },\n  {\n    'name': 'checkout_telemetry_benchmark_deps',\n    'condition': 'checkout_telemetry_dependencies and checkout_android and not skip_wpr_archives_download',\n    'pattern': '.',\n    'action': [ 'vpython3',\n                'src/tools/perf/fetch_benchmark_deps.py',\n                '-f',\n                '-p',\n                'android'\n    ],\n  },\n\n  # Pull down WPR Archive files\n  {\n    'name': 'Fetch WPR archive files',\n    'pattern': '.',\n    'condition': 'checkout_android and checkout_wpr_archives',\n    'action': [ 'python3',\n                'src/chrome/test/data/android/manage_wpr_archives.py',\n                'download',\n    ],\n  },\n  # Download only WPR binary dependencies from Telemetry via conditionals\n  {\n    'name': 'checkout_wpr_binary_dependencies',\n    'condition': 'checkout_chromium_autofill_test_dependencies or checkout_chromium_password_manager_test_dependencies',\n    'pattern': '.',\n    'action': [ 'vpython3',\n                'src/third_party/catapult/telemetry/bin/fetch_wpr_binary_dependencies',\n    ],\n  },\n  {\n    'name': 'Fetch Android AFDO profile',\n    'pattern': '.',\n    'condition': 'checkout_android and checkout_pgo_profiles',\n    'action': [ 'python3',\n                'src/tools/download_optimization_profile.py',\n                '--newest_state=src/chrome/android/profiles/newest.txt',\n                '--local_state=src/chrome/android/profiles/local.txt',\n                '--output_name=src/chrome/android/profiles/afdo.prof',\n                '--gs_url_base=chromeos-prebuilt/afdo-job/llvm',\n    ],\n  },\n  {\n    'name': 'Fetch Android Arm AFDO profile',\n    'pattern': '.',\n    'condition': 'checkout_android and checkout_pgo_profiles',\n    'action': [ 'python3',\n                'src/tools/download_optimization_profile.py',\n                '--newest_state=src/chrome/android/profiles/arm.newest.txt',\n                '--local_state=src/chrome/android/profiles/arm.local.txt',\n                '--output_name=src/chrome/android/profiles/arm.afdo.prof',\n                '--gs_url_base=chromeos-prebuilt/afdo-job/llvm',\n    ],\n  },\n  # DOWNLOAD AR test APKs only if the environment variable is set\n  {\n    'name': 'ar_test_apks',\n    'pattern': '.',\n    'condition': 'checkout_android',\n    'action': [ 'python3',\n                'src/third_party/arcore-android-sdk/test-apks/update.py',\n    ],\n  },\n  # Download AFDO profiles for ChromeOS for each architecture.\n  {\n    'name': 'Fetch ChromeOS AFDO profiles (from Intel Atom cores)',\n    'pattern': '.',\n    'condition': 'checkout_chromeos or checkout_simplechrome',\n    'action': [ 'python3',\n                'src/tools/download_optimization_profile.py',\n                '--newest_state=src/chromeos/profiles/atom.afdo.newest.txt',\n                '--local_state=src/chromeos/profiles/atom.afdo.local.txt',\n                '--output_name=src/chromeos/profiles/atom.afdo.prof',\n                '--gs_url_base=chromeos-prebuilt/afdo-job/vetted/release',\n    ],\n  },\n  {\n    'name': 'Fetch ChromeOS AFDO profiles (from Intel Big cores)',\n    'pattern': '.',\n    'condition': 'checkout_chromeos or checkout_simplechrome',\n    'action': [ 'python3',\n                'src/tools/download_optimization_profile.py',\n                '--newest_state=src/chromeos/profiles/bigcore.afdo.newest.txt',\n                '--local_state=src/chromeos/profiles/bigcore.afdo.local.txt',\n                '--output_name=src/chromeos/profiles/bigcore.afdo.prof',\n                '--gs_url_base=chromeos-prebuilt/afdo-job/vetted/release',\n    ],\n  },\n  {\n    'name': 'Fetch ChromeOS AFDO profiles (from Arm)',\n    'pattern': '.',\n    'condition': 'checkout_chromeos or checkout_simplechrome',\n    'action': [ 'python3',\n                'src/tools/download_optimization_profile.py',\n                '--newest_state=src/chromeos/profiles/arm.afdo.newest.txt',\n                '--local_state=src/chromeos/profiles/arm.afdo.local.txt',\n                '--output_name=src/chromeos/profiles/arm.afdo.prof',\n                '--gs_url_base=chromeos-prebuilt/afdo-job/vetted/release',\n    ],\n  },\n  {\n    'name': 'Download Fuchsia SDK',\n    'pattern': '.',\n    'condition': 'checkout_fuchsia and not checkout_fuchsia_no_hooks',\n    'action': [\n      'python3',\n      'src/build/fuchsia/update_sdk.py',\n      '--cipd-prefix={fuchsia_sdk_cipd_prefix}',\n      '--version={fuchsia_version}',\n    ],\n  },\n\n  {\n    'name': 'Download Fuchsia system images',\n    'pattern': '.',\n    'condition': 'checkout_fuchsia and checkout_fuchsia_product_bundles',\n    'action': [\n      'python3',\n      'src/build/fuchsia/update_product_bundles.py',\n      '{checkout_fuchsia_boot_images}',\n    ],\n  },\n\n  {\n    'name': 'Download Fuchsia internal system images',\n    'pattern': '.',\n    'condition': 'checkout_fuchsia_internal and checkout_src_internal',\n    'action': ['python3',\n               'src/build/fuchsia/update_product_bundles.py',\n               '{checkout_fuchsia_internal_images}',\n               '--internal'],\n  },\n\n  {\n    'name': 'Create Fuchsia GN sdk build rules when not running update_sdk.py',\n    'pattern': '.',\n    'condition': 'checkout_fuchsia_no_hooks',\n    'action': [\n      'python3',\n      'src/build/fuchsia/gen_build_defs.py',\n    ],\n  },\n\n  {\n    'name': 'cros_simplechrome_artifacts_with_vm',\n    'pattern': '.',\n    'condition': 'checkout_simplechrome_with_vms and not checkout_src_internal',\n    'action': [\n      'vpython3',\n      'src/third_party/chromite/bin/cros',\n      'chrome-sdk',\n      '--fallback-versions=20',\n      '--no-use-remoteexec',\n      '--nogn-gen',\n      '--no-shell',\n      '--log-level=warning',\n      '--cache-dir=src/build/cros_cache/',\n      '--use-external-config',\n      '--boards={cros_boards_with_qemu_images}',\n      '--download-vm',\n    ],\n  },\n  {\n    'name': 'cros_simplechrome_artifacts_with_no_vm',\n    'pattern': '.',\n    'condition': 'checkout_simplechrome and not checkout_src_internal',\n    'action': [\n      'vpython3',\n      'src/third_party/chromite/bin/cros',\n      'chrome-sdk',\n      '--fallback-versions=20',\n      '--no-use-remoteexec',\n      '--nogn-gen',\n      '--no-shell',\n      '--log-level=warning',\n      '--cache-dir=src/build/cros_cache/',\n      '--use-external-config',\n      '--boards={cros_boards}',\n    ],\n  },\n  {\n    'name': 'cros_simplechrome_artifacts_with_no_vm_internal',\n    'pattern': '.',\n    'condition': 'checkout_simplechrome and checkout_src_internal',\n    'action': [\n      'vpython3',\n      'src/third_party/chromite/bin/cros',\n      'chrome-sdk',\n      '--fallback-versions=20',\n      '--no-use-remoteexec',\n      '--nogn-gen',\n      '--no-shell',\n      '--log-level=warning',\n      '--cache-dir=src/build/cros_cache/',\n      '--boards={cros_boards}',\n    ],\n  },\n  {\n    'name': 'cros_simplechrome_artifacts_with_vm_internal',\n    'pattern': '.',\n    'condition': 'checkout_simplechrome_with_vms and checkout_src_internal',\n    'action': [\n      'vpython3',\n      'src/third_party/chromite/bin/cros',\n      'chrome-sdk',\n      '--fallback-versions=20',\n      '--no-use-remoteexec',\n      '--nogn-gen',\n      '--no-shell',\n      '--log-level=warning',\n      '--cache-dir=src/build/cros_cache/',\n      '--boards={cros_boards_with_qemu_images}',\n      '--download-vm',\n    ],\n  },\n\n  # Download PGO profiles.\n  {\n    'name': 'Fetch PGO profiles for win-arm64',\n    'pattern': '.',\n    'condition': 'checkout_pgo_profiles and checkout_win',\n    'action': [ 'python3',\n                'src/tools/update_pgo_profiles.py',\n                '--target=win-arm64',\n                'update',\n                '--gs-url-base=chromium-optimization-profiles/pgo_profiles',\n    ],\n  },\n  {\n    'name': 'Fetch PGO profiles for win32',\n    'pattern': '.',\n    'condition': 'checkout_pgo_profiles and checkout_win',\n    'action': [ 'python3',\n                'src/tools/update_pgo_profiles.py',\n                '--target=win32',\n                'update',\n                '--gs-url-base=chromium-optimization-profiles/pgo_profiles',\n    ],\n  },\n  {\n    'name': 'Fetch PGO profiles for win64',\n    'pattern': '.',\n    'condition': 'checkout_pgo_profiles and checkout_win',\n    'action': [ 'python3',\n                'src/tools/update_pgo_profiles.py',\n                '--target=win64',\n                'update',\n                '--gs-url-base=chromium-optimization-profiles/pgo_profiles',\n    ],\n  },\n  {\n    'name': 'Fetch PGO profiles for mac',\n    'pattern': '.',\n    'condition': 'checkout_pgo_profiles and (checkout_mac or checkout_fuchsia)',\n    'action': [ 'python3',\n                'src/tools/update_pgo_profiles.py',\n                '--target=mac',\n                'update',\n                '--gs-url-base=chromium-optimization-profiles/pgo_profiles',\n    ],\n  },\n  {\n    'name': 'Fetch PGO profiles for mac arm',\n    'pattern': '.',\n    'condition': 'checkout_pgo_profiles and (checkout_mac or checkout_android or checkout_fuchsia or checkout_ios)',\n    'action': [ 'python3',\n                'src/tools/update_pgo_profiles.py',\n                '--target=mac-arm',\n                'update',\n                '--gs-url-base=chromium-optimization-profiles/pgo_profiles',\n    ],\n  },\n  {\n    'name': 'Fetch PGO profiles for linux',\n    'pattern': '.',\n    'condition': 'checkout_pgo_profiles and checkout_linux',\n    'action': [ 'python3',\n                'src/tools/update_pgo_profiles.py',\n                '--target=linux',\n                'update',\n                '--gs-url-base=chromium-optimization-profiles/pgo_profiles',\n    ],\n  },\n  {\n    'name': 'Fetch PGO profiles for android arm32',\n    'pattern': '.',\n    'condition': 'checkout_pgo_profiles and checkout_android',\n    'action': [ 'python3',\n                'src/tools/update_pgo_profiles.py',\n                '--target=android-arm32',\n                'update',\n                '--gs-url-base=chromium-optimization-profiles/pgo_profiles',\n    ],\n  },\n  {\n    'name': 'Fetch PGO profiles for android arm64',\n    'pattern': '.',\n    'condition': 'checkout_pgo_profiles and checkout_android',\n    'action': [ 'python3',\n                'src/tools/update_pgo_profiles.py',\n                '--target=android-arm64',\n                'update',\n                '--gs-url-base=chromium-optimization-profiles/pgo_profiles',\n    ],\n  },\n  {\n    'name': 'Fetch PGO profiles for V8 builtins',\n    'pattern': '.',\n    # Always download profiles on Android builds. The GN arg `is_official_build`\n    # is required to consider the profiles during build time.\n    'condition': 'checkout_pgo_profiles',\n    'action': [ 'python3',\n                'src/v8/tools/builtins-pgo/download_profiles.py',\n                'download',\n                '--depot-tools',\n                'src/third_party/depot_tools',\n                '--check-v8-revision',\n                '--quiet',\n    ],\n  },\n\n  # Download Cast3p Binaries\n  {\n    'name': 'cast3p_binaries',\n    'pattern': '.',\n    'action': [\n      'python3',\n      'src/tools/cast3p/update_binaries.py',\n    ],\n    'condition': 'checkout_cast3p',\n  },\n\n  {\n    'name': 'Generate location tags for tests',\n    'pattern': '.',\n    'action': [\n      'python3',\n      'src/testing/generate_location_tags.py',\n      '--out',\n      'src/testing/location_tags.json',\n    ],\n    'condition': 'generate_location_tags',\n  },\n\n  # Configure remote exec cfg files\n  {\n    # Use luci_auth if on windows and using chrome-untrusted project\n    'name': 'download_and_configure_reclient_cfgs',\n    'pattern': '.',\n    'condition': 'download_remoteexec_cfg and host_os == \"win\"',\n    'action': ['python3',\n               'src/buildtools/reclient_cfgs/configure_reclient_cfgs.py',\n               '--rbe_instance',\n               Var('rbe_instance'),\n               '--reproxy_cfg_template',\n               'reproxy.cfg.template',\n               '--rewrapper_cfg_project',\n               Var('rewrapper_cfg_project'),\n               '--use_luci_auth_credshelper',\n               '--quiet',\n               ],\n  },  {\n    'name': 'download_and_configure_reclient_cfgs',\n    'pattern': '.',\n    'condition': 'download_remoteexec_cfg and not host_os == \"win\"',\n    'action': ['python3',\n               'src/buildtools/reclient_cfgs/configure_reclient_cfgs.py',\n               '--rbe_instance',\n               Var('rbe_instance'),\n               '--reproxy_cfg_template',\n               'reproxy.cfg.template',\n               '--rewrapper_cfg_project',\n               Var('rewrapper_cfg_project'),\n               '--quiet',\n               ],\n  },\n  {\n    'name': 'configure_reclient_cfgs',\n    'pattern': '.',\n    'condition': 'not download_remoteexec_cfg',\n    'action': ['python3',\n               'src/buildtools/reclient_cfgs/configure_reclient_cfgs.py',\n               '--rbe_instance',\n               Var('rbe_instance'),\n               '--reproxy_cfg_template',\n               'reproxy.cfg.template',\n               '--rewrapper_cfg_project',\n               Var('rewrapper_cfg_project'),\n               '--skip_remoteexec_cfg_fetch',\n               '--quiet',\n               ],\n  },\n  # Configure Siso for developer builds.\n  {\n    'name': 'configure_siso',\n    'pattern': '.',\n    'action': ['python3',\n               'src/build/config/siso/configure_siso.py',\n               '--rbe_instance',\n               Var('rbe_instance'),\n               ],\n  },\n  {\n    'name': 'libaom_testdata',\n    'pattern': '.',\n    'condition': 'download_libaom_testdata',\n    'action': ['python3',\n               'src/third_party/depot_tools/gsutil.py',\n               '-q',\n               '-m',\n               'rsync',\n               'gs://aom-test-data',\n               'src/third_party/libaom/testdata']\n  },\n  {\n    'name': 'libvpx_testdata',\n    'pattern': '.',\n    'condition': 'download_libvpx_testdata',\n    'action': ['python3',\n               'src/third_party/depot_tools/gsutil.py',\n               '-q',\n               '-m',\n               'rsync',\n               'gs://downloads.webmproject.org/test_data/libvpx',\n               'src/third_party/libvpx/testdata'],\n  },\n]\n\n# Add any corresponding DEPS files from this list to chromium.exclusions in\n# //testing/buildbot/trybot_analyze_config.json\n# ctx: https://crbug.com/1201994\nrecursedeps = [\n  # ANGLE manages DEPS that it also owns the build files for, such as dEQP.\n  'src/third_party/angle',\n  # Dawn manages DEPS for its copy of the WebGPU CTS as well as GLFW for which\n  # it has build files.\n  'src/third_party/dawn',\n  'src/third_party/instrumented_libs',\n  'src/third_party/openscreen/src',\n  'src/third_party/devtools-frontend/src',\n  # clank has its own DEPS file, does not need to be in trybot_analyze_config\n  # since the roller does not run tests.\n  'src/clank',\n  'src/components/optimization_guide/internal',\n  'src/ios_internal',\n]\n"
        },
        {
          "name": "DIR_METADATA",
          "type": "blob",
          "size": 0.552734375,
          "content": "# Metadata for this directory.\n#\n# DIR_METADATA files allow code owners to point users to additional bits of\n# information about the code, like where to file bugs and how to contact the\n# team that works on the code.\n#\n# For more information on DIR_METADATA files, see:\n#   https://source.chromium.org/chromium/infra/infra/+/main:go/src/infra/tools/dirmd/README.md\n#\n# For the schema of this file, see Metadata message:\n#   https://source.chromium.org/chromium/infra/infra/+/main:go/src/infra/tools/dirmd/proto/dir_metadata.proto\n\nmonorail {\n  project: \"chromium\"\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5,
          "content": "// Copyright 2015 The Chromium Authors\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//    * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//    * Neither the name of Google LLC nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "LICENSE.chromium_os",
          "type": "blob",
          "size": 1.5068359375,
          "content": "// Copyright 2006-2009 The ChromiumOS Authors\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//    * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//    * Neither the name of Google LLC nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "OWNERS",
          "type": "blob",
          "size": 9.265625,
          "content": "# OWNERS_STATUS = build/OWNERS.status\n\n# Chrome ATLs. Please reach out before adding new top-level directories.\n# Note: this list is not for rubber-stamping mechanical changes that span the\n# code base. Please reach out to owners of top-level directories instead.\nfile://ATL_OWNERS\n\nper-file .clang-format=thakis@chromium.org\nper-file .clang-tidy=file://styleguide/c++/OWNERS\nper-file .clangd=file://styleguide/c++/OWNERS\nper-file .gitattributes=*\nper-file .gitignore=*\nper-file .gitmodules=*\nper-file .git-blame-ignore-revs=thakis@chromium.org\nper-file .gn=ddorwin@chromium.org  # For fuchsia_target_api_level changes.\nper-file .gn=estaab@chromium.org\nper-file .gn=sergeyu@chromium.org  # For fuchsia_target_api_level changes.\nper-file .gn=file://build/OWNERS\nper-file .mailmap=*\nper-file .rustfmt.toml=file://styleguide/rust/OWNERS\nper-file .vpython3=bpastene@chromium.org\nper-file .vpython3=dpranke@google.com\nper-file .vpython3=tikuta@chromium.org\nper-file .yapfignore=*\nper-file AUTHORS=*\nper-file BUILD.gn=file://build/OWNERS\nper-file CODE_OF_CONDUCT.md=dpranke@google.com\nper-file CODE_OF_CONDUCT.md=ellyjones@chromium.org\nper-file CPPLINT.cfg=file://styleguide/c++/OWNERS\nper-file DEPS=*\nper-file PRESUBMIT*.py=agrieve@chromium.org  # For .pydeps changes\nper-file PRESUBMIT*.py=dcheng@chromium.org\nper-file PRESUBMIT*.py=dpranke@google.com\nper-file PRESUBMIT*.py=battre@chromium.org\nper-file PRESUBMIT*.py=wnwen@chromium.org  # For .pydeps changes\nper-file README.md=*\nper-file WATCHLISTS=*\n\n# git submodules\nper-file build/fuchsia/internal=*\nper-file chromeos/ash/resources/internal=*\nper-file chromeos/assistant/internal=*\nper-file clank=*\nper-file content/test/data/plugin=*\nper-file chrome/release_scripts=*\nper-file docs/website=*\nper-file google_apis/internal=*\nper-file internal=*\nper-file ios/third_party/earl_grey2/src=*\nper-file ios/third_party/edo/src=*\nper-file ios/third_party/gtx/src=*\nper-file ios/third_party/lottie/src=*\nper-file ios/third_party/material_components_ios/src=*\nper-file ios/third_party/material_font_disk_loader_ios/src=*\nper-file ios/third_party/material_internationalization_ios/src=*\nper-file ios/third_party/material_roboto_font_loader_ios/src=*\nper-file ios/third_party/material_sprited_animation_view_ios/src=*\nper-file ios/third_party/material_text_accessibility_ios/src=*\nper-file ios/third_party/motion_animator_objc/src=*\nper-file ios/third_party/motion_interchange_objc/src=*\nper-file ios/third_party/motion_transitioning_objc/src=*\nper-file ios/third_party/ochamcrest/src=*\nper-file ios/third_party/webkit/src=*\nper-file ios_internal=*\nper-file media/cdm/api=*\nper-file native_client=*\nper-file net/third_party/quiche/src=*\nper-file remoting/android/internal=*\nper-file remoting/host/installer/linux/internal=*\nper-file remoting/internal=*\nper-file remoting/test/internal=*\nper-file remoting/tools/internal=*\nper-file remoting/webapp/app_remoting/internal=*\nper-file signing_keys=*\nper-file skia/tools/clusterfuzz-data=*\nper-file third_party/android_prebuilts/build_tools=*\nper-file third_party/android_protobuf/src=*\nper-file third_party/android_tools_internal=*\nper-file third_party/androidx_javascriptengine/src=*\nper-file third_party/angle=*\nper-file third_party/anonymous_tokens/src=*\nper-file third_party/apache-portable-runtime/src=*\nper-file third_party/arcore-android-sdk/src=*\nper-file third_party/barhopper=*\nper-file third_party/beto-core/src=*\nper-file third_party/boringssl/src=*\nper-file third_party/breakpad/breakpad=*\nper-file third_party/cardboard/src=*\nper-file third_party/cast_core/public/src=*\nper-file third_party/catapult=*\nper-file third_party/ced/src=*\nper-file third_party/chromevox/third_party/sre/src=*\nper-file third_party/chromite=*\nper-file third_party/chromium-variations=*\nper-file third_party/clang-format/script=*\nper-file third_party/cld_3/src=*\nper-file third_party/colorama/src=*\nper-file third_party/content_analysis_sdk/src=*\nper-file third_party/cpu_features/src=*\nper-file third_party/cpuinfo/src=*\nper-file third_party/crc32c/src=*\nper-file third_party/cros-components/src=*\nper-file third_party/cros_system_api=*\nper-file third_party/crossbench=*\nper-file third_party/crubit/src=*\nper-file third_party/dav1d/libdav1d=*\nper-file third_party/dawn=*\nper-file third_party/depot_tools=*\nper-file third_party/devtools-frontend-internal=*\nper-file third_party/devtools-frontend/src=*\nper-file third_party/dom_distiller_js/dist=*\nper-file third_party/eigen3/src=*\nper-file third_party/emoji-metadata/src=*\nper-file third_party/emoji-segmenter/src=*\nper-file third_party/expat/src=*\nper-file third_party/farmhash/src=*\nper-file third_party/ffmpeg=*\nper-file third_party/flac=*\nper-file third_party/flatbuffers/src=*\nper-file third_party/fontconfig/src=*\nper-file third_party/fp16/src=*\nper-file third_party/freetype-testing/src=*\nper-file third_party/freetype/src=*\nper-file third_party/fuzztest/src=*\nper-file third_party/fxdiv/src=*\nper-file third_party/gemmlowp/src=*\nper-file third_party/gles2_conform=*\nper-file third_party/glslang/src=*\nper-file third_party/gnu_binutils=*\nper-file third_party/google_benchmark/src=*\nper-file third_party/google_toolbox_for_mac/src=*\nper-file third_party/googlemac=*\nper-file third_party/googletest/src=*\nper-file third_party/gperf=*\nper-file third_party/grpc/src=*\nper-file third_party/gvr-android-sdk/src=*\nper-file third_party/harfbuzz-ng/src=*\nper-file third_party/highway/src=*\nper-file third_party/hunspell_dictionaries=*\nper-file third_party/icu=*\nper-file third_party/instrumented_libs=*\nper-file third_party/javalang/src=*\nper-file third_party/jsoncpp/source=*\nper-file third_party/junit/src=*\nper-file third_party/khronos_glcts=*\nper-file third_party/leveldatabase/src=*\nper-file third_party/libaddressinput/src=*\nper-file third_party/libaom/source/libaom=*\nper-file third_party/libavif/src=*\nper-file third_party/crabbyavif/src=*\nper-file third_party/libc++/src=*\nper-file third_party/libc++abi/src=*\nper-file third_party/libdrm/src=*\nper-file third_party/libFuzzer/src=*\nper-file third_party/libgav1/src=*\nper-file third_party/libipp/libipp=*\nper-file third_party/libjpeg_turbo=*\nper-file third_party/liblouis/src=*\nper-file third_party/libphonenumber/dist=*\nper-file third_party/libprotobuf-mutator/src=*\nper-file third_party/libsrtp=*\nper-file third_party/libsync/src=*\nper-file third_party/libunwind/src=*\nper-file third_party/libunwindstack=*\nper-file third_party/libvpx/source/libvpx=*\nper-file third_party/libwebm/source=*\nper-file third_party/libwebp/src=*\nper-file third_party/libyuv=*\nper-file third_party/lighttpd=*\nper-file third_party/llvm-libc/src=*\nper-file third_party/lss=*\nper-file third_party/material_color_utilities/src=*\nper-file third_party/material_design_icons/src=*\nper-file third_party/mingw-w64/mingw/bin=*\nper-file third_party/minigbm/src=*\nper-file third_party/ml=*\nper-file third_party/nacl_sdk_binaries=*\nper-file third_party/nasm=*\nper-file third_party/nearby/src=*\nper-file third_party/neon_2_sse/src=*\nper-file third_party/netty-tcnative/src=*\nper-file third_party/netty4/src=*\nper-file third_party/openh264/src=*\nper-file third_party/openscreen/src=*\nper-file third_party/openxr/src=*\nper-file third_party/ots/src=*\nper-file third_party/pdfium=*\nper-file third_party/perfetto=*\nper-file third_party/perl=*\nper-file third_party/pthreadpool/src=*\nper-file third_party/pyelftools=*\nper-file third_party/pywebsocket3/src=*\nper-file third_party/quic_trace/src=*\nper-file third_party/re2/src=*\nper-file third_party/requests/src=*\nper-file third_party/ruy/src=*\nper-file third_party/securemessage/src=*\nper-file third_party/skia=*\nper-file third_party/smhasher/src=*\nper-file third_party/snappy/src=*\nper-file third_party/speedometer/v3.0=*\nper-file third_party/speedometer/v2.0=*\nper-file third_party/speedometer/v2.1=*\nper-file third_party/spirv-cross/src=*\nper-file third_party/spirv-headers/src=*\nper-file third_party/spirv-tools/src=*\nper-file third_party/sqlite/src=*\nper-file third_party/swiftshader=*\nper-file third_party/text-fragments-polyfill/src=*\nper-file third_party/tflite/src=*\nper-file third_party/ukey2/src=*\nper-file third_party/vulkan-deps=*\nper-file third_party/vulkan-headers/src=*\nper-file third_party/vulkan-loader/src=*\nper-file third_party/vulkan-tools/src=*\nper-file third_party/vulkan-utility-libraries/src=*\nper-file third_party/vulkan-validation-layers/src=*\nper-file third_party/vulkan_memory_allocator=*\nper-file third_party/wayland-protocols/gtk=*\nper-file third_party/wayland-protocols/kde=*\nper-file third_party/wayland-protocols/src=*\nper-file third_party/wayland/src=*\nper-file third_party/webdriver/pylib=*\nper-file third_party/webgl/src=*\nper-file third_party/webgpu-cts/src=*\nper-file third_party/webpagereplay=*\nper-file third_party/webrtc=*\nper-file third_party/weston/src=*\nper-file third_party/widevine/cdm/chromeos=*\nper-file third_party/widevine/cdm/linux=*\nper-file third_party/widevine/cdm/mac=*\nper-file third_party/widevine/cdm/win=*\nper-file third_party/widevine/scripts=*\nper-file third_party/widevine/test/license_server=*\nper-file third_party/wix=*\nper-file third_party/wlcs/src=*\nper-file third_party/wuffs/src=*\nper-file third_party/xdg-utils=*\nper-file third_party/xnnpack/src=*\nper-file third_party/zstd/src=*\nper-file tools/page_cycler/acid3=*\nper-file tools/perf/data=*\nper-file ui/file_manager/internal=*\nper-file ui/webui/internal=*\nper-file v8=*\nper-file webkit/data/bmp_decoder=*\nper-file webkit/data/ico_decoder=*\nper-file webkit/data/test_shell/plugins=*\n"
        },
        {
          "name": "PRESUBMIT.py",
          "type": "blob",
          "size": 308.1591796875,
          "content": "# Copyright 2012 The Chromium Authors\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n\"\"\"Top-level presubmit script for Chromium.\n\nSee https://www.chromium.org/developers/how-tos/depottools/presubmit-scripts/\nfor more details about the presubmit API built into depot_tools.\n\"\"\"\n\nfrom typing import Callable\nfrom typing import Optional\nfrom typing import Sequence\nfrom typing import Tuple\nfrom dataclasses import dataclass\n\nPRESUBMIT_VERSION = '2.0.0'\n\n\n_EXCLUDED_PATHS = (\n    # Generated file\n    (r\"chrome/android/webapk/shell_apk/src/org/chromium\"\n     r\"/webapk/lib/runtime_library/IWebApkApi.java\"),\n    # File needs to write to stdout to emulate a tool it's replacing.\n    r\"chrome/updater/mac/keystone/ksadmin.mm\",\n    # Generated file.\n    (r\"^components/variations/proto/devtools/\"\n     r\"client_variations.js\"),\n    # These are video files, not typescript.\n    r\"^media/test/data/.*.ts\",\n    r\"^native_client_sdksrc/build_tools/make_rules.py\",\n    r\"^native_client_sdk/src/build_tools/make_simple.py\",\n    r\"^native_client_sdk/src/tools/.*.mk\",\n    r\"^net/tools/spdyshark/.*\",\n    r\"^skia/.*\",\n    r\"^third_party/blink/.*\",\n    r\"^third_party/breakpad/.*\",\n    # sqlite is an imported third party dependency.\n    r\"^third_party/sqlite/.*\",\n    r\"^v8/.*\",\n    r\".*MakeFile$\",\n    r\".+_autogen\\.h$\",\n    r\".+_pb2(_grpc)?\\.py$\",\n    r\".+/pnacl_shim\\.c$\",\n    r\"^gpu/config/.*_list_json\\.cc$\",\n    r\"tools/md_browser/.*\\.css$\",\n    # Test pages for Maps telemetry tests.\n    r\"tools/perf/page_sets/maps_perf_test.*\",\n    # Test pages for WebRTC telemetry tests.\n    r\"tools/perf/page_sets/webrtc_cases.*\",\n    # Test file compared with generated output.\n    r\"tools/polymer/tests/html_to_wrapper/.*.html.ts$\",\n    # Third-party dependency frozen at a fixed version.\n    r\"chrome/test/data/webui/chromeos/chai_v4.js$\",\n)\n\n_EXCLUDED_SET_NO_PARENT_PATHS = (\n    # It's for historical reasons that blink isn't a top level directory, where\n    # it would be allowed to have \"set noparent\" to avoid top level owners\n    # accidentally +1ing changes.\n    'third_party/blink/OWNERS',\n)\n\n\n# Fragment of a regular expression that matches C++ and Objective-C++\n# implementation files.\n_IMPLEMENTATION_EXTENSIONS = r'\\.(cc|cpp|cxx|mm)$'\n\n\n# Fragment of a regular expression that matches C++ and Objective-C++\n# header files.\n_HEADER_EXTENSIONS = r'\\.(h|hpp|hxx)$'\n\n\n# Paths with sources that don't use //base.\n_NON_BASE_DEPENDENT_PATHS = (\n    r\"^chrome/browser/browser_switcher/bho/\",\n    r\"^tools/win/\",\n)\n\n\n# Regular expression that matches code only used for test binaries\n# (best effort).\n_TEST_CODE_EXCLUDED_PATHS = (\n    r'.*/(fake_|test_|mock_).+%s' % _IMPLEMENTATION_EXTENSIONS,\n    # Test support files, like:\n    # foo_test_support.cc\n    # bar_test_util_linux.cc (suffix)\n    # baz_test_base.cc\n    r'.+_test_(base|support|util)(_[a-z]+)?%s' % _IMPLEMENTATION_EXTENSIONS,\n    # Test suite files, like:\n    # foo_browsertest.cc\n    # bar_unittest_mac.cc (suffix)\n    # baz_unittests.cc (plural)\n    r'.+_(api|browser|eg|int|perf|pixel|unit|ui)?test(s)?(_[a-z]+)?%s' %\n        _IMPLEMENTATION_EXTENSIONS,\n    r'.+_(fuzz|fuzzer)(_[a-z]+)?%s' % _IMPLEMENTATION_EXTENSIONS,\n    r'.+sync_service_impl_harness%s' % _IMPLEMENTATION_EXTENSIONS,\n    r'.*/(test|tool(s)?)/.*',\n    # content_shell is used for running content_browsertests.\n    r'content/shell/.*',\n    # Web test harness.\n    r'content/web_test/.*',\n    # Non-production example code.\n    r'mojo/examples/.*',\n    # Launcher for running iOS tests on the simulator.\n    r'testing/iossim/iossim\\.mm$',\n    # EarlGrey app side code for tests.\n    r'ios/.*_app_interface\\.mm$',\n    # Views Examples code\n    r'ui/views/examples/.*',\n    # Chromium Codelab\n    r'codelabs/*'\n)\n\n_THIRD_PARTY_EXCEPT_BLINK = 'third_party/(?!blink/)'\n\n_TEST_ONLY_WARNING = (\n    'You might be calling functions intended only for testing from\\n'\n    'production code.  If you are doing this from inside another method\\n'\n    'named as *ForTesting(), then consider exposing things to have tests\\n'\n    'make that same call directly.\\n'\n    'If that is not possible, you may put a comment on the same line with\\n'\n    '  // IN-TEST \\n'\n    'to tell the PRESUBMIT script that the code is inside a *ForTesting()\\n'\n    'method and can be ignored. Do not do this inside production code.\\n'\n    'The android-binary-size trybot will block if the method exists in the\\n'\n    'release apk.\\n'\n    'Note: this warning might be a false positive (crbug.com/1196548).')\n\n\n@dataclass\nclass BanRule:\n    # String pattern. If the pattern begins with a slash, the pattern will be\n    # treated as a regular expression instead.\n    pattern: str\n    # Explanation as a sequence of strings. Each string in the sequence will be\n    # printed on its own line.\n    explanation: Tuple[str, ...]\n    # Whether or not to treat this ban as a fatal error. If unspecified,\n    # defaults to true.\n    treat_as_error: Optional[bool] = None\n    # Paths that should be excluded from the ban check. Each string is a regular\n    # expression that will be matched against the path of the file being checked\n    # relative to the root of the source tree.\n    excluded_paths: Optional[Sequence[str]] = None\n\n\n_BANNED_JAVA_IMPORTS : Sequence[BanRule] = (\n    BanRule(\n      'import java.net.URI;',\n      (\n       'Use org.chromium.url.GURL instead of java.net.URI, where possible.',\n      ),\n      excluded_paths=(\n        (r'net/android/javatests/src/org/chromium/net/'\n         'AndroidProxySelectorTest\\.java'),\n        r'components/cronet/',\n        r'third_party/robolectric/local/',\n      ),\n    ),\n    BanRule(\n      'import android.annotation.TargetApi;',\n      (\n       'Do not use TargetApi, use @androidx.annotation.RequiresApi instead. '\n       'RequiresApi ensures that any calls are guarded by the appropriate '\n       'SDK_INT check. See https://crbug.com/1116486.',\n      ),\n    ),\n    BanRule(\n      'import androidx.test.rule.ActivityTestRule;',\n      (\n       'Do not use ActivityTestRule, use '\n       'org.chromium.base.test.BaseActivityTestRule instead.',\n      ),\n      excluded_paths=(\n        'components/cronet/',\n      ),\n    ),\n    BanRule(\n      'import androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;',\n      (\n       'Do not use VectorDrawableCompat, use getResources().getDrawable() to '\n       'avoid extra indirections. Please also add trace event as the call '\n       'might take more than 20 ms to complete.',\n      ),\n    ),\n)\n\n_BANNED_JAVA_FUNCTIONS : Sequence[BanRule] = (\n    BanRule(\n      'StrictMode.allowThreadDiskReads()',\n      (\n       'Prefer using StrictModeContext.allowDiskReads() to using StrictMode '\n       'directly.',\n      ),\n      False,\n    ),\n    BanRule(\n      'StrictMode.allowThreadDiskWrites()',\n      (\n       'Prefer using StrictModeContext.allowDiskWrites() to using StrictMode '\n       'directly.',\n      ),\n      False,\n    ),\n    BanRule(\n      '.waitForIdleSync()',\n      (\n       'Do not use waitForIdleSync as it masks underlying issues. There is '\n       'almost always something else you should wait on instead.',\n      ),\n      False,\n    ),\n    BanRule(\n      r'/(?<!\\bsuper\\.)(?<!\\bIntent )\\bregisterReceiver\\(',\n      (\n       'Do not call android.content.Context.registerReceiver (or an override) '\n       'directly. Use one of the wrapper methods defined in '\n       'org.chromium.base.ContextUtils, such as '\n       'registerProtectedBroadcastReceiver, '\n       'registerExportedBroadcastReceiver, or '\n       'registerNonExportedBroadcastReceiver. See their documentation for '\n       'which one to use.',\n      ),\n      True,\n      excluded_paths=(\n          r'.*Test[^a-z]',\n          r'third_party/',\n          'base/android/java/src/org/chromium/base/ContextUtils.java',\n          'chromecast/browser/android/apk/src/org/chromium/chromecast/shell/BroadcastReceiverScope.java',\n      ),\n    ),\n    BanRule(\n      r'/(?:extends|new)\\s*(?:android.util.)?Property<[A-Za-z.]+,\\s*(?:Integer|Float)>',\n      (\n       'Do not use Property<..., Integer|Float>, but use FloatProperty or '\n       'IntProperty because it will avoid unnecessary autoboxing of '\n       'primitives.',\n      ),\n    ),\n    BanRule(\n      'requestLayout()',\n      (\n          'Layouts can be expensive. Prefer using ViewUtils.requestLayout(), '\n          'which emits a trace event with additional information to help with '\n          'scroll jank investigations. See http://crbug.com/1354176.',\n      ),\n      False,\n      excluded_paths=(\n          'ui/android/java/src/org/chromium/ui/base/ViewUtils.java',\n      ),\n    ),\n    BanRule(\n      'ProfileManager.getLastUsedRegularProfile()',\n      (\n       'Prefer passing in the Profile reference instead of relying on the '\n       'static getLastUsedRegularProfile() call. Only top level entry points '\n       '(e.g. Activities) should call this method. Otherwise, the Profile '\n       'should either be passed in explicitly or retreived from an existing '\n       'entity with a reference to the Profile (e.g. WebContents).',\n      ),\n      False,\n      excluded_paths=(\n        r'.*Test[A-Z]?.*\\.java',\n      ),\n    ),\n    BanRule(\n      r'/(ResourcesCompat|getResources\\(\\))\\.getDrawable\\(\\)',\n      (\n       'getDrawable() can be expensive. If you have a lot of calls to '\n       'GetDrawable() or your code may introduce janks, please put your calls '\n       'inside a trace().',\n      ),\n      False,\n      excluded_paths=(\n        r'.*Test[A-Z]?.*\\.java',\n      ),\n    ),\n    BanRule(\n      r'/RecordHistogram\\.getHistogram(ValueCount|TotalCount|Samples)ForTesting\\(',\n      (\n       'Raw histogram counts are easy to misuse; for example they don\\'t reset '\n       'between batched tests. Use HistogramWatcher to check histogram records '\n       'instead.',\n      ),\n      False,\n      excluded_paths=(\n        'base/android/javatests/src/org/chromium/base/metrics/RecordHistogramTest.java',\n        'base/test/android/javatests/src/org/chromium/base/test/util/HistogramWatcher.java',\n      ),\n    ),\n)\n\n_BANNED_JAVASCRIPT_FUNCTIONS : Sequence [BanRule] = (\n    BanRule(\n      r'/\\bchrome\\.send\\b',\n      (\n       'The use of chrome.send is disallowed in Chrome (context: https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/security/handling-messages-from-web-content.md).',\n       'Please use mojo instead for new webuis. https://docs.google.com/document/d/1RF-GSUoveYa37eoyZ9EhwMtaIwoW7Z88pIgNZ9YzQi4/edit#heading=h.gkk22wgk6wff',\n      ),\n      True,\n      (\n          r'^(?!ash\\/webui).+',\n          # TODO(crbug.com/1385601): pre-existing violations still need to be\n          # cleaned up.\n          'ash/webui/common/resources/cr.m.js',\n          'ash/webui/common/resources/multidevice_setup/multidevice_setup_browser_proxy.js',\n          'ash/webui/common/resources/quick_unlock/lock_screen_constants.ts',\n          'ash/webui/common/resources/smb_shares/smb_browser_proxy.js',\n          'ash/webui/connectivity_diagnostics/resources/connectivity_diagnostics.ts',\n          'ash/webui/diagnostics_ui/resources/diagnostics_browser_proxy.ts',\n          'ash/webui/multidevice_debug/resources/logs.js',\n          'ash/webui/multidevice_debug/resources/webui.js',\n          'ash/webui/projector_app/resources/annotator/trusted/annotator_browser_proxy.js',\n          'ash/webui/projector_app/resources/app/trusted/projector_browser_proxy.js',\n          # TODO(b/301634378): Remove violation exception once Scanning App\n          # migrated off usage of `chrome.send`.\n          'ash/webui/scanning/resources/scanning_browser_proxy.ts',\n      ),\n    ),\n)\n\n_BANNED_OBJC_FUNCTIONS : Sequence[BanRule] = (\n    BanRule(\n      'addTrackingRect:',\n      (\n       'The use of -[NSView addTrackingRect:owner:userData:assumeInside:] is'\n       'prohibited. Please use CrTrackingArea instead.',\n       'http://dev.chromium.org/developers/coding-style/cocoa-dos-and-donts',\n      ),\n      False,\n    ),\n    BanRule(\n      r'/NSTrackingArea\\W',\n      (\n       'The use of NSTrackingAreas is prohibited. Please use CrTrackingArea',\n       'instead.',\n       'http://dev.chromium.org/developers/coding-style/cocoa-dos-and-donts',\n      ),\n      False,\n    ),\n    BanRule(\n      'convertPointFromBase:',\n      (\n       'The use of -[NSView convertPointFromBase:] is almost certainly wrong.',\n       'Please use |convertPoint:(point) fromView:nil| instead.',\n       'http://dev.chromium.org/developers/coding-style/cocoa-dos-and-donts',\n      ),\n      True,\n    ),\n    BanRule(\n      'convertPointToBase:',\n      (\n       'The use of -[NSView convertPointToBase:] is almost certainly wrong.',\n       'Please use |convertPoint:(point) toView:nil| instead.',\n       'http://dev.chromium.org/developers/coding-style/cocoa-dos-and-donts',\n      ),\n      True,\n    ),\n    BanRule(\n      'convertRectFromBase:',\n      (\n       'The use of -[NSView convertRectFromBase:] is almost certainly wrong.',\n       'Please use |convertRect:(point) fromView:nil| instead.',\n       'http://dev.chromium.org/developers/coding-style/cocoa-dos-and-donts',\n      ),\n      True,\n    ),\n    BanRule(\n      'convertRectToBase:',\n      (\n       'The use of -[NSView convertRectToBase:] is almost certainly wrong.',\n       'Please use |convertRect:(point) toView:nil| instead.',\n       'http://dev.chromium.org/developers/coding-style/cocoa-dos-and-donts',\n      ),\n      True,\n    ),\n    BanRule(\n      'convertSizeFromBase:',\n      (\n       'The use of -[NSView convertSizeFromBase:] is almost certainly wrong.',\n       'Please use |convertSize:(point) fromView:nil| instead.',\n       'http://dev.chromium.org/developers/coding-style/cocoa-dos-and-donts',\n      ),\n      True,\n    ),\n    BanRule(\n      'convertSizeToBase:',\n      (\n       'The use of -[NSView convertSizeToBase:] is almost certainly wrong.',\n       'Please use |convertSize:(point) toView:nil| instead.',\n       'http://dev.chromium.org/developers/coding-style/cocoa-dos-and-donts',\n      ),\n      True,\n    ),\n    BanRule(\n      r\"/\\s+UTF8String\\s*]\",\n      (\n       'The use of -[NSString UTF8String] is dangerous as it can return null',\n       'even if |canBeConvertedToEncoding:NSUTF8StringEncoding| returns YES.',\n       'Please use |SysNSStringToUTF8| instead.',\n      ),\n      True,\n      excluded_paths = (\n        '^third_party/ocmock/OCMock/',\n      ),\n    ),\n    BanRule(\n      r'__unsafe_unretained',\n      (\n        'The use of __unsafe_unretained is almost certainly wrong, unless',\n        'when interacting with NSFastEnumeration or NSInvocation.',\n        'Please use __weak in files build with ARC, nothing otherwise.',\n      ),\n      False,\n    ),\n    BanRule(\n      'freeWhenDone:NO',\n      (\n        'The use of \"freeWhenDone:NO\" with the NoCopy creation of ',\n        'Foundation types is prohibited.',\n      ),\n      True,\n    ),\n    BanRule(\n      'This file requires ARC support.',\n      (\n        'ARC compilation is default in Chromium; do not add boilerplate to ',\n        'files that require ARC.',\n      ),\n      True,\n    ),\n)\n\n_BANNED_IOS_OBJC_FUNCTIONS = (\n    BanRule(\n      r'/\\bTEST[(]',\n      (\n        'TEST() macro should not be used in Objective-C++ code as it does not ',\n        'drain the autorelease pool at the end of the test. Use TEST_F() ',\n        'macro instead with a fixture inheriting from PlatformTest (or a ',\n        'typedef).'\n      ),\n      True,\n    ),\n    BanRule(\n      r'/\\btesting::Test\\b',\n      (\n        'testing::Test should not be used in Objective-C++ code as it does ',\n        'not drain the autorelease pool at the end of the test. Use ',\n        'PlatformTest instead.'\n      ),\n      True,\n    ),\n    BanRule(\n    ' systemImageNamed:',\n      (\n        '+[UIImage systemImageNamed:] should not be used to create symbols.',\n        'Instead use a wrapper defined in:',\n        'ios/chrome/browser/shared/ui/symbols/symbol_helpers.h'\n      ),\n      True,\n      excluded_paths=(\n        'ios/chrome/browser/shared/ui/symbols/symbol_helpers.mm',\n        'ios/chrome/common',\n        # App extensions have restricted dependencies and thus can't use the\n        # wrappers.\n        '^ios/chrome/\\w+_extension/',\n      ),\n    ),\n    BanRule(\n      r'public (RefCounted)?BrowserStateKeyedServiceFactory',\n      (\n        'KeyedService factories in //ios/chrome/browser should inherit from',\n        '(Refcounted)?ProfileKeyedServieFactoryIOS, not directory from',\n        '(Refcounted)?BrowserStateKeyedServiceFactory.'\n      ),\n      treat_as_error=True,\n      excluded_paths=(\n        'ios/components',\n        'ios/web_view',\n      ),\n    ),\n)\n\n_BANNED_IOS_EGTEST_FUNCTIONS : Sequence[BanRule] = (\n    BanRule(\n      r'/\\bEXPECT_OCMOCK_VERIFY\\b',\n      (\n        'EXPECT_OCMOCK_VERIFY should not be used in EarlGrey tests because ',\n        'it is meant for GTests. Use [mock verify] instead.'\n      ),\n      True,\n    ),\n)\n\n_BANNED_CPP_FUNCTIONS: Sequence[BanRule] = (\n    BanRule(\n        '%#0',\n        (\n            'Zero-padded values that use \"#\" to add prefixes don\\'t exhibit ',\n            'consistent behavior, since the prefix is not prepended for zero ',\n            'values. Use \"0x%0...\" instead.',\n        ),\n        False,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Don't warn in third_party folders.\n    ),\n    BanRule(\n        r'/\\busing namespace ',\n        (\n            'Using directives (\"using namespace x\") are banned by the Google Style',\n            'Guide ( http://google.github.io/styleguide/cppguide.html#Namespaces ).',\n            'Explicitly qualify symbols or use using declarations (\"using x::foo\").',\n        ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Don't warn in third_party folders.\n    ),\n    # Make sure that gtest's FRIEND_TEST() macro is not used; the\n    # FRIEND_TEST_ALL_PREFIXES() macro from base/gtest_prod_util.h should be\n    # used instead since that allows for FLAKY_ and DISABLED_ prefixes.\n    BanRule(\n        'FRIEND_TEST(',\n        (\n            'Chromium code should not use gtest\\'s FRIEND_TEST() macro. Include',\n            'base/gtest_prod_util.h and use FRIEND_TEST_ALL_PREFIXES() instead.',\n        ),\n        False,\n        excluded_paths=(\n            \"base/gtest_prod_util.h\",\n            \"base/allocator/partition_allocator/src/partition_alloc/partition_alloc_base/gtest_prod_util.h\",\n        ),\n    ),\n    BanRule(\n        'setMatrixClip',\n        (\n            'Overriding setMatrixClip() is prohibited; ',\n            'the base function is deprecated. ',\n        ),\n        True,\n        (),\n    ),\n    BanRule(\n        'SkRefPtr',\n        ('The use of SkRefPtr is prohibited. ', 'Please use sk_sp<> instead.'),\n        True,\n        (),\n    ),\n    BanRule(\n        'SkAutoRef',\n        ('The indirect use of SkRefPtr via SkAutoRef is prohibited. ',\n         'Please use sk_sp<> instead.'),\n        True,\n        (),\n    ),\n    BanRule(\n        'SkAutoTUnref',\n        ('The use of SkAutoTUnref is dangerous because it implicitly ',\n         'converts to a raw pointer. Please use sk_sp<> instead.'),\n        True,\n        (),\n    ),\n    BanRule(\n        'SkAutoUnref',\n        ('The indirect use of SkAutoTUnref through SkAutoUnref is dangerous ',\n         'because it implicitly converts to a raw pointer. ',\n         'Please use sk_sp<> instead.'),\n        True,\n        (),\n    ),\n    BanRule(\n        r'/HANDLE_EINTR\\(.*close',\n        ('HANDLE_EINTR(close) is invalid. If close fails with EINTR, the file',\n         'descriptor will be closed, and it is incorrect to retry the close.',\n         'Either call close directly and ignore its return value, or wrap close',\n         'in IGNORE_EINTR to use its return value. See http://crbug.com/269623'\n         ),\n        True,\n        (),\n    ),\n    BanRule(\n        r'/IGNORE_EINTR\\((?!.*close)',\n        (\n            'IGNORE_EINTR is only valid when wrapping close. To wrap other system',\n            'calls, use HANDLE_EINTR. See http://crbug.com/269623',\n        ),\n        True,\n        (\n            # Files that #define IGNORE_EINTR.\n            r'^base/posix/eintr_wrapper\\.h$',\n            r'^ppapi/tests/test_broker\\.cc$',\n        ),\n    ),\n    BanRule(\n        r'/v8::Extension\\(',\n        (\n            'Do not introduce new v8::Extensions into the code base, use',\n            'gin::Wrappable instead. See http://crbug.com/334679',\n        ),\n        True,\n        (r'extensions/renderer/safe_builtins\\.*', ),\n    ),\n    BanRule(\n        '#pragma comment(lib,',\n        ('Specify libraries to link with in build files and not in the source.',\n         ),\n        True,\n        (\n            r'^base/third_party/symbolize/.*',\n            r'^third_party/abseil-cpp/.*',\n        ),\n    ),\n    BanRule(\n        r'/base::SequenceChecker\\b',\n        ('Consider using SEQUENCE_CHECKER macros instead of the class directly.',\n         ),\n        False,\n        (),\n    ),\n    BanRule(\n        r'/base::ThreadChecker\\b',\n        ('Consider using THREAD_CHECKER macros instead of the class directly.',\n         ),\n        False,\n        (),\n    ),\n    BanRule(\n        r'/\\b(?!(Sequenced|SingleThread))\\w*TaskRunner::(GetCurrentDefault|CurrentDefaultHandle)',\n        (\n            'It is not allowed to call these methods from the subclasses ',\n            'of Sequenced or SingleThread task runners.',\n        ),\n        True,\n        (),\n    ),\n    BanRule(\n        r'/(Time(|Delta|Ticks)|ThreadTicks)::FromInternalValue|ToInternalValue',\n        (\n            'base::TimeXXX::FromInternalValue() and ToInternalValue() are',\n            'deprecated (http://crbug.com/634507). Please avoid converting away',\n            'from the Time types in Chromium code, especially if any math is',\n            'being done on time values. For interfacing with platform/library',\n            'APIs, use base::Time::(From,To)DeltaSinceWindowsEpoch() or',\n            'base::{TimeDelta::In}Microseconds(), or one of the other type',\n            'converter methods instead. For faking TimeXXX values (for unit',\n            'testing only), use TimeXXX() + Microseconds(N). For',\n            'other use cases, please contact base/time/OWNERS.',\n        ),\n        False,\n        excluded_paths=(\n            \"base/time/time.h\",\n            \"base/allocator/partition_allocator/src/partition_alloc/partition_alloc_base/time/time.h\",\n        ),\n    ),\n    BanRule(\n        'CallJavascriptFunctionUnsafe',\n        (\n            \"Don't use CallJavascriptFunctionUnsafe() in new code. Instead, use\",\n            'AllowJavascript(), OnJavascriptAllowed()/OnJavascriptDisallowed(),',\n            'and CallJavascriptFunction(). See https://goo.gl/qivavq.',\n        ),\n        False,\n        (\n            r'^content/browser/webui/web_ui_impl\\.(cc|h)$',\n            r'^content/public/browser/web_ui\\.h$',\n            r'^content/public/test/test_web_ui\\.(cc|h)$',\n        ),\n    ),\n    BanRule(\n        'leveldb::DB::Open',\n        (\n            'Instead of leveldb::DB::Open() use leveldb_env::OpenDB() from',\n            'third_party/leveldatabase/env_chromium.h. It exposes databases to',\n            \"Chrome's tracing, making their memory usage visible.\",\n        ),\n        True,\n        (r'^third_party/leveldatabase/.*\\.(cc|h)$', ),\n    ),\n    BanRule(\n        'leveldb::NewMemEnv',\n        (\n            'Instead of leveldb::NewMemEnv() use leveldb_chrome::NewMemEnv() from',\n            'third_party/leveldatabase/leveldb_chrome.h. It exposes environments',\n            \"to Chrome's tracing, making their memory usage visible.\",\n        ),\n        True,\n        (r'^third_party/leveldatabase/.*\\.(cc|h)$', ),\n    ),\n    BanRule(\n        'RunLoop::QuitCurrent',\n        (\n            'Please migrate away from RunLoop::QuitCurrent*() methods. Use member',\n            'methods of a specific RunLoop instance instead.',\n        ),\n        False,\n        (),\n    ),\n    BanRule(\n        'base::ScopedMockTimeMessageLoopTaskRunner',\n        (\n            'ScopedMockTimeMessageLoopTaskRunner is deprecated. Prefer',\n            'TaskEnvironment::TimeSource::MOCK_TIME. There are still a',\n            'few cases that may require a ScopedMockTimeMessageLoopTaskRunner',\n            '(i.e. mocking the main MessageLoopForUI in browser_tests), but check',\n            'with gab@ first if you think you need it)',\n        ),\n        False,\n        (),\n    ),\n    BanRule(\n        'std::regex',\n        (\n            'Using std::regex adds unnecessary binary size to Chrome. Please use',\n            're2::RE2 instead (crbug.com/755321)',\n        ),\n        True,\n        [\n            # Abseil's benchmarks never linked into chrome.\n            'third_party/abseil-cpp/.*_benchmark.cc',\n        ],\n    ),\n    BanRule(\n        r'/\\bstd::sto(i|l|ul|ll|ull)\\b',\n        (\n            'std::sto{i,l,ul,ll,ull}() use exceptions to communicate results. ',\n            'Use base::StringTo[U]Int[64]() instead.',\n        ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Don't warn in third_party folders.\n    ),\n    BanRule(\n        r'/\\bstd::sto(f|d|ld)\\b',\n        (\n            'std::sto{f,d,ld}() use exceptions to communicate results. ',\n            'For locale-independent values, e.g. reading numbers from disk',\n            'profiles, use base::StringToDouble().',\n            'For user-visible values, parse using ICU.',\n        ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Don't warn in third_party folders.\n    ),\n    BanRule(\n        r'/\\bstd::to_string\\b',\n        (\n            'std::to_string() is locale dependent and slower than alternatives.',\n            'For locale-independent strings, e.g. writing numbers to disk',\n            'profiles, use base::NumberToString().',\n            'For user-visible strings, use base::FormatNumber() and',\n            'the related functions in base/i18n/number_formatting.h.',\n        ),\n        True,\n        [\n            # TODO(crbug.com/335672557): Please do not add to this list. Existing\n            # uses should removed.\n            \"third_party/blink/renderer/core/css/parser/css_proto_converter.cc\",\n            \"third_party/blink/renderer/core/editing/ime/edit_context.cc\",\n            \"third_party/blink/renderer/platform/graphics/bitmap_image_test.cc\",\n            \"tools/binary_size/libsupersize/viewer/caspian/diff_test.cc\",\n            \"tools/binary_size/libsupersize/viewer/caspian/tree_builder_test.cc\",\n            _THIRD_PARTY_EXCEPT_BLINK\n        ],\n    ),\n    BanRule(\n        r'/#include <(cctype|ctype\\.h|cwctype|wctype.h)>',\n        (\n            '<cctype>/<ctype.h>/<cwctype>/<wctype.h> are banned. Use',\n            '\"third_party/abseil-cpp/absl/strings/ascii.h\" instead.',\n        ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        r'/\\bstd::shared_ptr\\b',\n        ('std::shared_ptr is banned. Use scoped_refptr instead.', ),\n        True,\n        [\n            # Needed for interop with third-party library.\n            '^third_party/blink/renderer/core/typed_arrays/array_buffer/' +\n            'array_buffer_contents\\.(cc|h)',\n            '^third_party/blink/renderer/core/typed_arrays/dom_array_buffer\\.cc',\n            '^third_party/blink/renderer/bindings/core/v8/' +\n            'v8_wasm_response_extensions.cc',\n            '^gin/array_buffer\\.(cc|h)',\n            '^gin/per_isolate_data\\.(cc|h)',\n            '^chrome/services/sharing/nearby/',\n            # Needed for interop with third-party library libunwindstack.\n            '^base/profiler/libunwindstack_unwinder_android\\.(cc|h)',\n            '^base/profiler/native_unwinder_android_memory_regions_map_impl.(cc|h)',\n            # Needed for interop with third-party boringssl cert verifier\n            '^third_party/boringssl/',\n            '^net/cert/',\n            '^net/tools/cert_verify_tool/',\n            '^services/cert_verifier/',\n            '^components/certificate_transparency/',\n            '^components/media_router/common/providers/cast/certificate/',\n            # gRPC provides some C++ libraries that use std::shared_ptr<>.\n            '^chromeos/ash/services/libassistant/grpc/',\n            '^chromecast/cast_core/grpc',\n            '^chromecast/cast_core/runtime/browser',\n            '^ios/chrome/test/earl_grey/chrome_egtest_plugin_client\\.(mm|h)',\n            # Fuchsia provides C++ libraries that use std::shared_ptr<>.\n            '^base/fuchsia/.*\\.(cc|h)',\n            '.*fuchsia.*test\\.(cc|h)',\n            # Clang plugins have different build config.\n            '^tools/clang/plugins/',\n            _THIRD_PARTY_EXCEPT_BLINK\n        ],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        r'/\\bstd::weak_ptr\\b',\n        ('std::weak_ptr is banned. Use base::WeakPtr instead.', ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        r'/\\blong long\\b',\n        ('long long is banned. Use [u]int64_t instead.', ),\n        False,  # Only a warning since it is already used.\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Don't warn in third_party folders.\n    ),\n    BanRule(\n        r'/\\b(absl|std)::any\\b',\n        (\n            '{absl,std}::any are banned due to incompatibility with the component ',\n            'build.',\n        ),\n        True,\n        # Not an error in third party folders, though it probably should be :)\n        [_THIRD_PARTY_EXCEPT_BLINK],\n    ),\n    BanRule(\n        r'/\\bstd::bind\\b',\n        (\n            'std::bind() is banned because of lifetime risks. Use ',\n            'base::Bind{Once,Repeating}() instead.',\n        ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        (r'/\\bstd::(?:'\n         r'linear_congruential_engine|mersenne_twister_engine|'\n         r'subtract_with_carry_engine|discard_block_engine|'\n         r'independent_bits_engine|shuffle_order_engine|'\n         r'minstd_rand0?|mt19937(_64)?|ranlux(24|48)(_base)?|knuth_b|'\n         r'default_random_engine|'\n         r'random_device|'\n         r'seed_seq'\n         r')\\b'),\n        (\n            'STL random number engines and generators are banned. Use the ',\n            'helpers in base/rand_util.h instead, e.g. base::RandBytes() or ',\n            'base::RandomBitGenerator.'\n            '',\n            'Please reach out to cxx@chromium.org if the base APIs are ',\n            'insufficient for your needs.',\n        ),\n        True,\n        [\n            # Not an error in third_party folders.\n            _THIRD_PARTY_EXCEPT_BLINK,\n            # Various tools which build outside of Chrome.\n            r'testing/libfuzzer',\n            r'testing/perf/confidence',\n            r'tools/android/io_benchmark/',\n            # Fuzzers are allowed to use standard library random number generators\n            # since fuzzing speed + reproducibility is important.\n            r'tools/ipc_fuzzer/',\n            r'.+_fuzzer\\.cc$',\n            r'.+_fuzzertest\\.cc$',\n            # TODO(https://crbug.com/1380528): These are all unsanctioned uses of\n            # the standard library's random number generators, and should be\n            # migrated to the //base equivalent.\n            r'ash/ambient/model/ambient_topic_queue\\.cc',\n            r'base/allocator/partition_allocator/src/partition_alloc/partition_alloc_unittest\\.cc',\n            r'base/ranges/algorithm_unittest\\.cc',\n            r'base/test/launcher/test_launcher\\.cc',\n            r'cc/metrics/video_playback_roughness_reporter_unittest\\.cc',\n            r'chrome/browser/apps/app_service/metrics/website_metrics\\.cc',\n            r'chrome/browser/ash/power/auto_screen_brightness/monotone_cubic_spline_unittest\\.cc',\n            r'chrome/browser/ash/printing/zeroconf_printer_detector_unittest\\.cc',\n            r'chrome/browser/nearby_sharing/contacts/nearby_share_contact_manager_impl_unittest\\.cc',\n            r'chrome/browser/nearby_sharing/contacts/nearby_share_contacts_sorter_unittest\\.cc',\n            r'chrome/browser/privacy_budget/mesa_distribution_unittest\\.cc',\n            r'chrome/browser/web_applications/test/web_app_test_utils\\.cc',\n            r'chrome/browser/web_applications/test/web_app_test_utils\\.cc',\n            r'chrome/browser/win/conflicts/module_blocklist_cache_util_unittest\\.cc',\n            r'chromeos/ash/components/memory/userspace_swap/swap_storage_unittest\\.cc',\n            r'chromeos/ash/components/memory/userspace_swap/userspace_swap\\.cc',\n            r'components/metrics/metrics_state_manager\\.cc',\n            r'components/omnibox/browser/history_quick_provider_performance_unittest\\.cc',\n            r'components/zucchini/disassembler_elf_unittest\\.cc',\n            r'content/browser/webid/federated_auth_request_impl\\.cc',\n            r'content/browser/webid/federated_auth_request_impl\\.cc',\n            r'media/cast/test/utility/udp_proxy\\.h',\n            r'sql/recover_module/module_unittest\\.cc',\n            r'components/search_engines/template_url_prepopulate_data.cc',\n            # Do not add new entries to this list. If you have a use case which is\n            # not satisfied by the current APIs (i.e. you need an explicitly-seeded\n            # sequence, or stability of some sort is required), please contact\n            # cxx@chromium.org.\n        ],\n    ),\n    BanRule(\n        r'/\\b(absl,std)::bind_front\\b',\n        ('{absl,std}::bind_front() are banned. Use base::Bind{Once,Repeating}() '\n         'instead.', ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        r'/\\bABSL_FLAG\\b',\n        ('ABSL_FLAG is banned. Use base::CommandLine instead.', ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        r'/\\babsl::c_',\n        (\n            'Abseil container utilities are banned. Use base/ranges/algorithm.h ',\n            'instead.',\n        ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        r'/\\babsl::FixedArray\\b',\n        ('absl::FixedArray is banned. Use base::FixedArray instead.', ),\n        True,\n        [\n            # base::FixedArray provides canonical access.\n            r'^base/types/fixed_array.h',\n            # Not an error in third_party folders.\n            _THIRD_PARTY_EXCEPT_BLINK,\n        ],\n    ),\n    BanRule(\n        r'/\\babsl::FunctionRef\\b',\n        ('absl::FunctionRef is banned. Use base::FunctionRef instead.', ),\n        True,\n        [\n            # base::Bind{Once,Repeating} references absl::FunctionRef to disallow\n            # interoperability.\n            r'^base/functional/bind_internal\\.h',\n            # base::FunctionRef is implemented on top of absl::FunctionRef.\n            r'^base/functional/function_ref.*\\..+',\n            # Not an error in third_party folders.\n            _THIRD_PARTY_EXCEPT_BLINK,\n        ],\n    ),\n    BanRule(\n        r'/\\babsl::(Insecure)?BitGen\\b',\n        ('absl random number generators are banned. Use the helpers in '\n         'base/rand_util.h instead, e.g. base::RandBytes() or ',\n         'base::RandomBitGenerator.'),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        pattern=\n        r'/\\babsl::(optional|nullopt|make_optional)\\b',\n        explanation=('absl::optional is banned. Use std::optional instead.', ),\n        treat_as_error=True,\n        excluded_paths=[\n            _THIRD_PARTY_EXCEPT_BLINK,\n        ]),\n    BanRule(\n        r'/(\\babsl::Span\\b|#include <span>|\\bstd::span\\b)',\n        (\n            'absl::Span and std::span are banned. Use base::span instead.',\n        ),\n        True,\n        [\n            # Included for conversions between base and std.\n            r'base/containers/span.h',\n            # Test base::span<> compatibility against std::span<>.\n            r'base/containers/span_unittest.cc',\n            # //base/numerics can't use base or absl. So it uses std.\n            r'base/numerics/.*'\n\n            # Needed to use QUICHE API.\n            r'android_webview/browser/ip_protection/.*',\n            r'chrome/browser/ip_protection/.*',\n            r'components/ip_protection/.*',\n            r'net/third_party/quiche/overrides/quiche_platform_impl/quiche_stack_trace_impl\\.*',\n            r'services/network/web_transport\\.cc',\n\n            # Not an error in third_party folders.\n            _THIRD_PARTY_EXCEPT_BLINK,\n        ],\n    ),\n    BanRule(\n        r'/\\babsl::StatusOr\\b',\n        ('absl::StatusOr is banned. Use base::expected instead.', ),\n        True,\n        [\n            # Needed to use liburlpattern API.\n            r'components/url_pattern/.*',\n            r'services/network/shared_dictionary/simple_url_pattern_matcher\\.cc',\n            r'third_party/blink/renderer/core/url_pattern/.*',\n            r'third_party/blink/renderer/modules/manifest/manifest_parser\\.cc',\n\n            # Needed to use QUICHE API.\n            r'android_webview/browser/ip_protection/.*',\n            r'chrome/browser/ip_protection/.*',\n            r'components/ip_protection/.*',\n\n            # Needed to use MediaPipe API.\n            r'components/media_effects/.*\\.cc',\n            # Not an error in third_party folders.\n            _THIRD_PARTY_EXCEPT_BLINK\n        ],\n    ),\n    BanRule(\n        r'/\\babsl::(StrSplit|StrJoin|StrCat|StrAppend|Substitute|StrContains)\\b',\n        ('Abseil string utilities are banned. Use base/strings instead.', ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        r'/\\babsl::(Mutex|CondVar|Notification|Barrier|BlockingCounter)\\b',\n        (\n            'Abseil synchronization primitives are banned. Use',\n            'base/synchronization instead.',\n        ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        r'/\\babsl::(Duration|Time|TimeZone|CivilDay)\\b',\n        ('Abseil\\'s time library is banned. Use base/time instead.', ),\n        True,\n        [\n            # Needed to use QUICHE API.\n            r'android_webview/browser/ip_protection/.*',\n            r'chrome/browser/ip_protection/.*',\n            r'components/ip_protection/.*',\n\n            # Needed to integrate with //third_party/nearby\n            r'components/cross_device/nearby/system_clock.cc',\n            _THIRD_PARTY_EXCEPT_BLINK  # Not an error in third_party folders.\n        ],\n    ),\n    BanRule(\n        r'/#include <chrono>',\n        ('<chrono> is banned. Use base/time instead.', ),\n        True,\n        [\n            # Not an error in third_party folders:\n            _THIRD_PARTY_EXCEPT_BLINK,\n            # This uses openscreen API depending on std::chrono.\n            \"components/openscreen_platform/task_runner.cc\",\n        ]),\n    BanRule(\n        r'/#include <exception>',\n        ('Exceptions are banned and disabled in Chromium.', ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        r'/\\bstd::function\\b',\n        ('std::function is banned. Use base::{Once,Repeating}Callback instead.',\n         ),\n        True,\n        [\n            # Has tests that template trait helpers don't unintentionally match\n            # std::function.\n            r'base/functional/callback_helpers_unittest\\.cc',\n            # Required to implement interfaces from the third-party perfetto\n            # library.\n            r'base/tracing/perfetto_task_runner\\.cc',\n            r'base/tracing/perfetto_task_runner\\.h',\n            # Needed for interop with the third-party nearby library type\n            # location::nearby::connections::ResultCallback.\n            'chrome/services/sharing/nearby/nearby_connections_conversions\\.cc'\n            # Needed for interop with the internal libassistant library.\n            'chromeos/ash/services/libassistant/callback_utils\\.h',\n            # Needed for interop with Fuchsia fidl APIs.\n            'fuchsia_web/webengine/browser/context_impl_browsertest\\.cc',\n            'fuchsia_web/webengine/browser/cookie_manager_impl_unittest\\.cc',\n            'fuchsia_web/webengine/browser/media_player_impl_unittest\\.cc',\n            # Required to interop with interfaces from the third-party ChromeML\n            # library API.\n            'services/on_device_model/ml/chrome_ml_api\\.h',\n            'services/on_device_model/ml/on_device_model_executor\\.cc',\n            'services/on_device_model/ml/on_device_model_executor\\.h',\n            # Required to interop with interfaces from the third-party perfetto\n            # library.\n            'components/tracing/common/etw_consumer_win_unittest\\.cc',\n            'services/tracing/public/cpp/perfetto/custom_event_recorder\\.cc',\n            'services/tracing/public/cpp/perfetto/perfetto_traced_process\\.cc',\n            'services/tracing/public/cpp/perfetto/perfetto_traced_process\\.h',\n            'services/tracing/public/cpp/perfetto/perfetto_tracing_backend\\.cc',\n            'services/tracing/public/cpp/perfetto/producer_client\\.cc',\n            'services/tracing/public/cpp/perfetto/producer_client\\.h',\n            'services/tracing/public/cpp/perfetto/producer_test_utils\\.cc',\n            'services/tracing/public/cpp/perfetto/producer_test_utils\\.h',\n            # Required for interop with the third-party webrtc library.\n            'third_party/blink/renderer/modules/peerconnection/mock_peer_connection_impl\\.cc',\n            'third_party/blink/renderer/modules/peerconnection/mock_peer_connection_impl\\.h',\n            # TODO(https://crbug.com/1364577): Various uses that should be\n            # migrated to something else.\n            # Should use base::OnceCallback or base::RepeatingCallback.\n            'base/allocator/dispatcher/initializer_unittest\\.cc',\n            'chrome/browser/ash/accessibility/speech_monitor\\.cc',\n            'chrome/browser/ash/accessibility/speech_monitor\\.h',\n            'chrome/browser/ash/login/ash_hud_login_browsertest\\.cc',\n            'chromecast/base/observer_unittest\\.cc',\n            'chromecast/browser/cast_web_view\\.h',\n            'chromecast/public/cast_media_shlib\\.h',\n            'device/bluetooth/floss/exported_callback_manager\\.h',\n            'device/bluetooth/floss/floss_dbus_client\\.h',\n            'device/fido/cable/v2_handshake_unittest\\.cc',\n            'device/fido/pin\\.cc',\n            'services/tracing/perfetto/test_utils\\.h',\n            # Should use base::FunctionRef.\n            'chrome/browser/media/webrtc/test_stats_dictionary\\.cc',\n            'chrome/browser/media/webrtc/test_stats_dictionary\\.h',\n            'chromeos/ash/services/libassistant/device_settings_controller\\.cc',\n            'components/browser_ui/client_certificate/android/ssl_client_certificate_request\\.cc',\n            'components/gwp_asan/client/sampling_malloc_shims_unittest\\.cc',\n            'content/browser/font_unique_name_lookup/font_unique_name_lookup_unittest\\.cc',\n            # Does not need std::function at all.\n            'components/omnibox/browser/autocomplete_result\\.cc',\n            'device/fido/win/webauthn_api\\.cc',\n            'media/audio/alsa/alsa_util\\.cc',\n            'media/remoting/stream_provider\\.h',\n            'sql/vfs_wrapper\\.cc',\n            # TODO(https://crbug.com/1364585): Remove usage and exception list\n            # entries.\n            'extensions/renderer/api/automation/automation_internal_custom_bindings\\.cc',\n            'extensions/renderer/api/automation/automation_internal_custom_bindings\\.h',\n            # TODO(https://crbug.com/1364579): Remove usage and exception list\n            # entry.\n            'ui/views/controls/focus_ring\\.h',\n\n            # Various pre-existing uses in //tools that is low-priority to fix.\n            'tools/binary_size/libsupersize/viewer/caspian/diff\\.cc',\n            'tools/binary_size/libsupersize/viewer/caspian/model\\.cc',\n            'tools/binary_size/libsupersize/viewer/caspian/model\\.h',\n            'tools/binary_size/libsupersize/viewer/caspian/tree_builder\\.h',\n            'tools/clang/base_bind_rewriters/BaseBindRewriters\\.cpp',\n\n            # Not an error in third_party folders.\n            _THIRD_PARTY_EXCEPT_BLINK\n        ],\n    ),\n    BanRule(\n        r'/#include <X11/',\n        ('Do not use Xlib. Use xproto (from //ui/gfx/x:xproto) instead.', ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        r'/\\bstd::ratio\\b',\n        ('std::ratio is banned by the Google Style Guide.', ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        r'/\\bstd::aligned_alloc\\b',\n        (\n            'std::aligned_alloc() is not yet allowed (crbug.com/1412818). Use ',\n            'base::AlignedAlloc() instead.',\n        ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Don't warn in third_party folders.\n    ),\n    BanRule(\n        r'/#include <(barrier|latch|semaphore|stop_token)>',\n        ('The thread support library is banned. Use base/synchronization '\n         'instead.', ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Don't warn in third_party folders.\n    ),\n    BanRule(\n        r'/\\bstd::execution::(par|seq)\\b',\n        ('std::execution::(par|seq) is banned; they do not fit into '\n         ' Chrome\\'s threading model, and libc++ doesn\\'t have full '\n         'support.', ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],\n    ),\n    BanRule(\n        r'/\\bstd::bit_cast\\b',\n        ('std::bit_cast is banned; use base::bit_cast instead for values and '\n         'standard C++ casting when pointers are involved.', ),\n        True,\n        [\n            # Don't warn in third_party folders.\n            _THIRD_PARTY_EXCEPT_BLINK,\n            # //base/numerics can't use base or absl.\n            r'base/numerics/.*'\n        ],\n    ),\n    BanRule(\n        r'/\\bstd::(c8rtomb|mbrtoc8)\\b',\n        ('std::c8rtomb() and std::mbrtoc8() are banned.', ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Don't warn in third_party folders.\n    ),\n    BanRule(\n        r'/\\bchar8_t|std::u8string\\b',\n        (\n            'char8_t and std::u8string are not yet allowed. Can you use [unsigned]',\n            ' char and std::string instead?',\n        ),\n        True,\n        [\n            # The demangler does not use this type but needs to know about it.\n            'base/third_party/symbolize/demangle\\.cc',\n            # Don't warn in third_party folders.\n            _THIRD_PARTY_EXCEPT_BLINK\n        ],\n    ),\n    BanRule(\n        r'/(\\b(co_await|co_return|co_yield)\\b|#include <coroutine>)',\n        ('Coroutines are not yet allowed (https://crbug.com/1403840).', ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Don't warn in third_party folders.\n    ),\n    BanRule(\n        r'/^\\s*(export\\s|import\\s+[\"<:\\w]|module(;|\\s+[:\\w]))',\n        ('Modules are disallowed for now due to lack of toolchain support.', ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Don't warn in third_party folders.\n    ),\n    BanRule(\n        r'/\\[\\[(\\w*::)?no_unique_address\\]\\]',\n        (\n            '[[no_unique_address]] does not work as expected on Windows ',\n            '(https://crbug.com/1414621). Use NO_UNIQUE_ADDRESS instead.',\n        ),\n        True,\n        [\n            # NO_UNIQUE_ADDRESS / PA_NO_UNIQUE_ADDRESS provide canonical access.\n            r'^base/compiler_specific\\.h',\n            r'^base/allocator/partition_allocator/src/partition_alloc/partition_alloc_base/compiler_specific\\.h',\n            # Not an error in third_party folders.\n            _THIRD_PARTY_EXCEPT_BLINK,\n        ],\n    ),\n    BanRule(\n        r'/#include <format>',\n        ('<format> is not yet allowed. Use base::StringPrintf() instead.', ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Don't warn in third_party folders.\n    ),\n    BanRule(\n        pattern='std::views',\n        explanation=(\n            'Use of std::views is banned in Chrome. If you need this '\n            'functionality, please contact cxx@chromium.org.',\n        ),\n        treat_as_error=True,\n        excluded_paths=[\n            # Don't warn in third_party folders.\n            _THIRD_PARTY_EXCEPT_BLINK\n        ],\n    ),\n    BanRule(\n        # Ban everything except specifically allowlisted constructs.\n        pattern=r'/std::ranges::(?!' + '|'.join((\n            # From https://en.cppreference.com/w/cpp/ranges:\n            # Range access\n            'begin',\n            'end',\n            'cbegin',\n            'cend',\n            'rbegin',\n            'rend',\n            'crbegin',\n            'crend',\n            'size',\n            'ssize',\n            'empty',\n            'data',\n            'cdata',\n            # Range primitives\n            'iterator_t',\n            'const_iterator_t',\n            'sentinel_t',\n            'const_sentinel_t',\n            'range_difference_t',\n            'range_size_t',\n            'range_value_t',\n            'range_reference_t',\n            'range_const_reference_t',\n            'range_rvalue_reference_t',\n            'range_common_reference_t',\n            # Dangling iterator handling\n            'dangling',\n            'borrowed_iterator_t',\n            # Banned: borrowed_subrange_t\n            # Range concepts\n            'range',\n            'borrowed_range',\n            'sized_range',\n            'view',\n            'input_range',\n            'output_range',\n            'forward_range',\n            'bidirectional_range',\n            'random_access_range',\n            'contiguous_range',\n            'common_range',\n            'viewable_range',\n            'constant_range',\n            # Banned: Views\n            # Banned: Range factories\n            # Banned: Range adaptors\n            # Incidentally listed on\n            # https://en.cppreference.com/w/cpp/header/ranges:\n            'enable_borrowed_range',\n            'enable_view',\n            # From https://en.cppreference.com/w/cpp/algorithm/ranges:\n            # Constrained algorithms: non-modifying sequence operations\n            'all_of',\n            'any_of',\n            'none_of',\n            'for_each',\n            'for_each_n',\n            'count',\n            'count_if',\n            'mismatch',\n            'equal',\n            'lexicographical_compare',\n            'find',\n            'find_if',\n            'find_if_not',\n            'find_end',\n            'find_first_of',\n            'adjacent_find',\n            'search',\n            'search_n',\n            # Constrained algorithms: modifying sequence operations\n            'copy',\n            'copy_if',\n            'copy_n',\n            'copy_backward',\n            'move',\n            'move_backward',\n            'fill',\n            'fill_n',\n            'transform',\n            'generate',\n            'generate_n',\n            'remove',\n            'remove_if',\n            'remove_copy',\n            'remove_copy_if',\n            'replace',\n            'replace_if',\n            'replace_copy',\n            'replace_copy_if',\n            'swap_ranges',\n            'reverse',\n            'reverse_copy',\n            'rotate',\n            'rotate_copy',\n            'shuffle',\n            'sample',\n            'unique',\n            'unique_copy',\n            # Constrained algorithms: partitioning operations\n            'is_partitioned',\n            'partition',\n            'partition_copy',\n            'stable_partition',\n            'partition_point',\n            # Constrained algorithms: sorting operations\n            'is_sorted',\n            'is_sorted_until',\n            'sort',\n            'partial_sort',\n            'partial_sort_copy',\n            'stable_sort',\n            'nth_element',\n            # Constrained algorithms: binary search operations (on sorted ranges)\n            'lower_bound',\n            'upper_bound',\n            'binary_search',\n            'equal_range',\n            # Constrained algorithms: set operations (on sorted ranges)\n            'merge',\n            'inplace_merge',\n            'includes',\n            'set_difference',\n            'set_intersection',\n            'set_symmetric_difference',\n            'set_union',\n            # Constrained algorithms: heap operations\n            'is_heap',\n            'is_heap_until',\n            'make_heap',\n            'push_heap',\n            'pop_heap',\n            'sort_heap',\n            # Constrained algorithms: minimum/maximum operations\n            'max',\n            'max_element',\n            'min',\n            'min_element',\n            'minmax',\n            'minmax_element',\n            'clamp',\n            # Constrained algorithms: permutation operations\n            'is_permutation',\n            'next_permutation',\n            'prev_premutation',\n            # Constrained uninitialized memory algorithms\n            'uninitialized_copy',\n            'uninitialized_copy_n',\n            'uninitialized_fill',\n            'uninitialized_fill_n',\n            'uninitialized_move',\n            'uninitialized_move_n',\n            'uninitialized_default_construct',\n            'uninitialized_default_construct_n',\n            'uninitialized_value_construct',\n            'uninitialized_value_construct_n',\n            'destroy',\n            'destroy_n',\n            'destroy_at',\n            'construct_at',\n            # Return types\n            'in_fun_result',\n            'in_in_result',\n            'in_out_result',\n            'in_in_out_result',\n            'in_out_out_result',\n            'min_max_result',\n            'in_found_result',\n            # From https://en.cppreference.com/w/cpp/iterator\n            'advance',\n            'distance',\n            'next',\n            'prev',\n        )) + r')\\w+',\n        explanation=(\n            'Use of range views and associated helpers is banned in Chrome. '\n            'If you need this functionality, please contact cxx@chromium.org.',\n        ),\n        treat_as_error=True,\n        excluded_paths=[\n            # Don't warn in third_party folders.\n            _THIRD_PARTY_EXCEPT_BLINK\n        ],\n    ),\n    BanRule(\n        r'/#include <regex>',\n        ('<regex> is not allowed. Use third_party/re2 instead.',\n         ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Don't warn in third_party folders.\n    ),\n    BanRule(\n        r'/#include <source_location>',\n        ('<source_location> is not yet allowed. Use base/location.h instead.',\n         ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Don't warn in third_party folders.\n    ),\n    BanRule(\n        r'/\\bstd::to_address\\b',\n        (\n            'std::to_address is banned because it is not guaranteed to be',\n            'SFINAE-compatible. Use base::to_address from base/types/to_address.h',\n            'instead.',\n        ),\n        True,\n        [\n            # Needed in base::to_address implementation.\n            r'base/types/to_address.h',\n            _THIRD_PARTY_EXCEPT_BLINK\n        ],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        r'/#include <syncstream>',\n        ('<syncstream> is banned.', ),\n        True,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Don't warn in third_party folders.\n    ),\n    BanRule(\n        r'/\\bRunMessageLoop\\b',\n        ('RunMessageLoop is deprecated, use RunLoop instead.', ),\n        False,\n        (),\n    ),\n    BanRule(\n        'RunAllPendingInMessageLoop()',\n        (\n            \"Prefer RunLoop over RunAllPendingInMessageLoop, please contact gab@\",\n            \"if you're convinced you need this.\",\n        ),\n        False,\n        (),\n    ),\n    BanRule(\n        'RunAllPendingInMessageLoop(BrowserThread',\n        (\n            'RunAllPendingInMessageLoop is deprecated. Use RunLoop for',\n            'BrowserThread::UI, BrowserTaskEnvironment::RunIOThreadUntilIdle',\n            'for BrowserThread::IO, and prefer RunLoop::QuitClosure to observe',\n            'async events instead of flushing threads.',\n        ),\n        False,\n        (),\n    ),\n    BanRule(\n        r'MessageLoopRunner',\n        ('MessageLoopRunner is deprecated, use RunLoop instead.', ),\n        False,\n        (),\n    ),\n    BanRule(\n        'GetDeferredQuitTaskForRunLoop',\n        (\n            \"GetDeferredQuitTaskForRunLoop shouldn't be needed, please contact\",\n            \"gab@ if you found a use case where this is the only solution.\",\n        ),\n        False,\n        (),\n    ),\n    BanRule(\n        'sqlite3_initialize(',\n        (\n            'Instead of calling sqlite3_initialize(), depend on //sql, ',\n            '#include \"sql/initialize.h\" and use sql::EnsureSqliteInitialized().',\n        ),\n        True,\n        (\n            r'^sql/initialization\\.(cc|h)$',\n            r'^third_party/sqlite/.*\\.(c|cc|h)$',\n        ),\n    ),\n    BanRule(\n        'CREATE VIEW',\n        (\n            'SQL views are disabled in Chromium feature code',\n            'https://chromium.googlesource.com/chromium/src/+/HEAD/sql#no-views',\n        ),\n        True,\n        (\n            _THIRD_PARTY_EXCEPT_BLINK,\n            # sql/ itself uses views when using memory-mapped IO.\n            r'^sql/.*',\n            # Various performance tools that do not build as part of Chrome.\n            r'^infra/.*',\n            r'^tools/perf.*',\n            r'.*perfetto.*',\n        ),\n    ),\n    BanRule(\n        'CREATE VIRTUAL TABLE',\n        (\n            'SQL virtual tables are disabled in Chromium feature code',\n            'https://chromium.googlesource.com/chromium/src/+/HEAD/sql#no-virtual-tables',\n        ),\n        True,\n        (\n            _THIRD_PARTY_EXCEPT_BLINK,\n            # sql/ itself uses virtual tables in the recovery module and tests.\n            r'^sql/.*',\n            # TODO(https://crbug.com/695592): Remove once WebSQL is deprecated.\n            r'third_party/blink/web_tests/storage/websql/.*'\n            # Various performance tools that do not build as part of Chrome.\n            r'^tools/perf.*',\n            r'.*perfetto.*',\n        ),\n    ),\n    BanRule(\n        'std::random_shuffle',\n        ('std::random_shuffle is deprecated in C++14, and removed in C++17. Use',\n         'base::RandomShuffle instead.'),\n        True,\n        (),\n    ),\n    BanRule(\n        'ios/web/public/test/http_server',\n        ('web::HTTPserver is deprecated use net::EmbeddedTestServer instead.',\n         ),\n        False,\n        (),\n    ),\n    BanRule(\n        'GetAddressOf',\n        ('Improper use of Microsoft::WRL::ComPtr<T>::GetAddressOf() has been ',\n         'implicated in a few leaks. ReleaseAndGetAddressOf() is safe but ',\n         'operator& is generally recommended. So always use operator& instead. ',\n         'See http://crbug.com/914910 for more conversion guidance.'),\n        True,\n        (),\n    ),\n    BanRule(\n        'SHFileOperation',\n        ('SHFileOperation was deprecated in Windows Vista, and there are less ',\n         'complex functions to achieve the same goals. Use IFileOperation for ',\n         'any esoteric actions instead.'),\n        True,\n        (),\n    ),\n    BanRule(\n        'StringFromGUID2',\n        ('StringFromGUID2 introduces an unnecessary dependency on ole32.dll.',\n         'Use base::win::WStringFromGUID instead.'),\n        True,\n        (r'/base/win/win_util_unittest.cc', ),\n    ),\n    BanRule(\n        'StringFromCLSID',\n        ('StringFromCLSID introduces an unnecessary dependency on ole32.dll.',\n         'Use base::win::WStringFromGUID instead.'),\n        True,\n        (r'/base/win/win_util_unittest.cc', ),\n    ),\n    BanRule(\n        'kCFAllocatorNull',\n        (\n            'The use of kCFAllocatorNull with the NoCopy creation of ',\n            'CoreFoundation types is prohibited.',\n        ),\n        True,\n        (),\n    ),\n    BanRule(\n        'mojo::ConvertTo',\n        ('mojo::ConvertTo and TypeConverter are deprecated. Please consider',\n         'StructTraits / UnionTraits / EnumTraits / ArrayTraits / MapTraits /',\n         'StringTraits if you would like to convert between custom types and',\n         'the wire format of mojom types.'),\n        False,\n        (\n            r'^fuchsia_web/webengine/browser/url_request_rewrite_rules_manager\\.cc$',\n            r'^fuchsia_web/webengine/url_request_rewrite_type_converters\\.cc$',\n            r'^third_party/blink/.*\\.(cc|h)$',\n            r'^content/renderer/.*\\.(cc|h)$',\n        ),\n    ),\n    BanRule(\n        'GetInterfaceProvider',\n        ('InterfaceProvider is deprecated.',\n         'Please use ExecutionContext::GetBrowserInterfaceBroker and overrides',\n         'or Platform::GetBrowserInterfaceBroker.'),\n        False,\n        (),\n    ),\n    BanRule(\n        'CComPtr',\n        ('New code should use Microsoft::WRL::ComPtr from wrl/client.h as a ',\n         'replacement for CComPtr from ATL. See http://crbug.com/5027 for more ',\n         'details.'),\n        False,\n        (),\n    ),\n    BanRule(\n        r'/\\b(IFACE|STD)METHOD_?\\(',\n        ('IFACEMETHOD() and STDMETHOD() make code harder to format and read.',\n         'Instead, always use IFACEMETHODIMP in the declaration.'),\n        False,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.\n    ),\n    BanRule(\n        'set_owned_by_client',\n        ('set_owned_by_client is deprecated.',\n         'views::View already owns the child views by default. This introduces ',\n         'a competing ownership model which makes the code difficult to reason ',\n         'about. See http://crbug.com/1044687 for more details.'),\n        False,\n        (),\n    ),\n    BanRule(\n        'RemoveAllChildViewsWithoutDeleting',\n        ('RemoveAllChildViewsWithoutDeleting is deprecated.',\n         'This method is deemed dangerous as, unless raw pointers are re-added,',\n         'calls to this method introduce memory leaks.'),\n        False,\n        (),\n    ),\n    BanRule(\n        r'/\\bTRACE_EVENT_ASYNC_',\n        (\n            'Please use TRACE_EVENT_NESTABLE_ASYNC_.. macros instead',\n            'of TRACE_EVENT_ASYNC_.. (crbug.com/1038710).',\n        ),\n        False,\n        (\n            r'^base/trace_event/.*',\n            r'^base/tracing/.*',\n        ),\n    ),\n    BanRule(\n        r'/\\bbase::debug::DumpWithoutCrashingUnthrottled[(][)]',\n        (\n            'base::debug::DumpWithoutCrashingUnthrottled() does not throttle',\n            'dumps and may spam crash reports. Consider if the throttled',\n            'variants suffice instead.',\n        ),\n        False,\n        (),\n    ),\n    BanRule(\n        'RoInitialize',\n        ('Improper use of [base::win]::RoInitialize() has been implicated in a ',\n         'few COM initialization leaks. Use base::win::ScopedWinrtInitializer ',\n         'instead. See http://crbug.com/1197722 for more information.'),\n        True,\n        (\n            r'^base/win/scoped_winrt_initializer\\.cc$',\n            r'^third_party/abseil-cpp/absl/.*',\n        ),\n    ),\n    BanRule(\n        r'base::Watchdog',\n        (\n            'base::Watchdog is deprecated because it creates its own thread.',\n            'Instead, manually start a timer on a SequencedTaskRunner.',\n        ),\n        False,\n        (),\n    ),\n    BanRule(\n        'base::Passed',\n        ('Do not use base::Passed. It is a legacy helper for capturing ',\n         'move-only types with base::BindRepeating, but invoking the ',\n         'resulting RepeatingCallback moves the captured value out of ',\n         'the callback storage, and subsequent invocations may pass the ',\n         'value in a valid but undefined state. Prefer base::BindOnce().',\n         'See http://crbug.com/1326449 for context.'),\n        False,\n        (\n            # False positive, but it is also fine to let bind internals reference\n            # base::Passed.\n            r'^base[\\\\/]functional[\\\\/]bind\\.h',\n            r'^base[\\\\/]functional[\\\\/]bind_internal\\.h',\n        ),\n    ),\n    BanRule(\n        r'base::Feature k',\n        ('Please use BASE_DECLARE_FEATURE() or BASE_FEATURE() instead of ',\n         'directly declaring/defining features.'),\n        True,\n        [\n            # Implements BASE_DECLARE_FEATURE().\n            r'^base/feature_list\\.h',\n        ],\n    ),\n    BanRule(\n        r'/\\bchartorune\\b',\n        ('chartorune is not memory-safe, unless you can guarantee the input ',\n         'string is always null-terminated. Otherwise, please use charntorune ',\n         'from libphonenumber instead.'),\n        True,\n        [\n            _THIRD_PARTY_EXCEPT_BLINK,\n            # Exceptions to this rule should have a fuzzer.\n        ],\n    ),\n    BanRule(\n        r'/\\b#include \"base/atomicops\\.h\"\\b',\n        ('Do not use base::subtle atomics, but std::atomic, which are simpler '\n         'to use, have better understood, clearer and richer semantics, and are '\n         'harder to mis-use. See details in base/atomicops.h.', ),\n        False,\n        [_THIRD_PARTY_EXCEPT_BLINK],  # Not an error in third_party folders.\n    ),\n    BanRule(r'CrossThreadPersistent<', (\n        'Do not use blink::CrossThreadPersistent, but '\n        'blink::CrossThreadHandle. It is harder to mis-use.', 'More info: '\n        'https://docs.google.com/document/d/1GIT0ysdQ84sGhIo1r9EscF_fFt93lmNVM_q4vvHj2FQ/edit#heading=h.3e4d6y61tgs',\n        'Please contact platform-architecture-dev@ before adding new instances.'\n    ), False, []),\n    BanRule(r'CrossThreadWeakPersistent<', (\n        'Do not use blink::CrossThreadWeakPersistent, but '\n        'blink::CrossThreadWeakHandle. It is harder to mis-use.', 'More info: '\n        'https://docs.google.com/document/d/1GIT0ysdQ84sGhIo1r9EscF_fFt93lmNVM_q4vvHj2FQ/edit#heading=h.3e4d6y61tgs',\n        'Please contact platform-architecture-dev@ before adding new instances.'\n    ), False, []),\n    BanRule(r'objc/objc.h', (\n        'Do not include <objc/objc.h>. It defines away ARC lifetime '\n        'annotations, and is thus dangerous.',\n        'Please use the pimpl pattern; search for `ObjCStorage` for examples.',\n        'For further reading on how to safely mix C++ and Obj-C, see',\n        'https://chromium.googlesource.com/chromium/src/+/main/docs/mac/mixing_cpp_and_objc.md'\n    ), True, []),\n    BanRule(\n        r'/#include <filesystem>',\n        ('libc++ <filesystem> is banned per the Google C++ styleguide.', ),\n        True,\n        # This fuzzing framework is a standalone open source project and\n        # cannot rely on Chromium base.\n        (r'third_party/centipede'),\n    ),\n    BanRule(\n        r'TopDocument()',\n        ('TopDocument() does not work correctly with out-of-process iframes. '\n         'Please do not introduce new uses.', ),\n        True,\n        (\n            # TODO(crbug.com/617677): Remove all remaining uses.\n            r'^third_party/blink/renderer/core/dom/document\\.cc',\n            r'^third_party/blink/renderer/core/dom/document\\.h',\n            r'^third_party/blink/renderer/core/dom/element\\.cc',\n            r'^third_party/blink/renderer/core/exported/web_disallow_transition_scope_test\\.cc',\n            r'^third_party/blink/renderer/core/exported/web_document_test\\.cc',\n            r'^third_party/blink/renderer/core/html/html_anchor_element\\.cc',\n            r'^third_party/blink/renderer/core/html/html_dialog_element\\.cc',\n            r'^third_party/blink/renderer/core/html/html_element\\.cc',\n            r'^third_party/blink/renderer/core/html/html_frame_owner_element\\.cc',\n            r'^third_party/blink/renderer/core/html/media/video_wake_lock\\.cc',\n            r'^third_party/blink/renderer/core/loader/anchor_element_interaction_tracker\\.cc',\n            r'^third_party/blink/renderer/core/page/scrolling/root_scroller_controller\\.cc',\n            r'^third_party/blink/renderer/core/page/scrolling/top_document_root_scroller_controller\\.cc',\n            r'^third_party/blink/renderer/core/page/scrolling/top_document_root_scroller_controller\\.h',\n            r'^third_party/blink/renderer/core/script/classic_pending_script\\.cc',\n            r'^third_party/blink/renderer/core/script/script_loader\\.cc',\n        ),\n    ),\n    BanRule(\n        pattern=r'base::raw_ptr<',\n        explanation=('Do not use base::raw_ptr, use raw_ptr.', ),\n        treat_as_error=True,\n        excluded_paths=(\n            '^base/',\n            '^tools/',\n        ),\n    ),\n    BanRule(\n        pattern=r'base:raw_ref<',\n        explanation=('Do not use base::raw_ref, use raw_ref.', ),\n        treat_as_error=True,\n        excluded_paths=(\n            '^base/',\n            '^tools/',\n        ),\n    ),\n    BanRule(\n        pattern=r'/raw_ptr<[^;}]*\\w{};',\n        explanation=(\n            'Do not use {} for raw_ptr initialization, use = nullptr instead.',\n        ),\n        treat_as_error=True,\n        excluded_paths=(\n            '^base/',\n            '^tools/',\n        ),\n    ),\n    BanRule(\n        pattern=r'/#include \"base/allocator/.*/raw_'\n        r'(ptr|ptr_cast|ptr_exclusion|ref).h\"',\n        explanation=(\n            'Please include the corresponding facade headers:',\n            '- #include \"base/memory/raw_ptr.h\"',\n            '- #include \"base/memory/raw_ptr_cast.h\"',\n            '- #include \"base/memory/raw_ptr_exclusion.h\"',\n            '- #include \"base/memory/raw_ref.h\"',\n        ),\n        treat_as_error=True,\n        excluded_paths=(\n            '^base/',\n            '^tools/',\n        ),\n    ),\n    BanRule(\n        pattern=r'ContentSettingsType::COOKIES',\n        explanation=\n        ('Do not use ContentSettingsType::COOKIES to check whether cookies are '\n         'supported in the provided context. Instead rely on the '\n         'content_settings::CookieSettings API. If you are using '\n         'ContentSettingsType::COOKIES to check the user preference setting '\n         'specifically, disregard this warning.', ),\n        treat_as_error=False,\n        excluded_paths=(\n            '^chrome/browser/ui/content_settings/',\n            '^components/content_settings/',\n            '^services/network/cookie_settings.cc',\n            '.*test.cc',\n        ),\n    ),\n    BanRule(\n        pattern=r'ContentSettingsType::TRACKING_PROTECTION',\n        explanation=\n        ('Do not directly use ContentSettingsType::TRACKING_PROTECTION to check '\n         'for tracking protection exceptions. Instead rely on the '\n         'privacy_sandbox::TrackingProtectionSettings API.', ),\n        treat_as_error=False,\n        excluded_paths=(\n            '^chrome/browser/ui/content_settings/',\n            '^components/content_settings/',\n            '^components/privacy_sandbox/tracking_protection_settings.cc',\n            '.*test.cc',\n        ),\n    ),\n    BanRule(\n        pattern=r'/\\bg_signal_connect',\n        explanation=('Use ScopedGSignal instead of g_signal_connect*()', ),\n        treat_as_error=True,\n        excluded_paths=('^ui/base/glib/scoped_gsignal.h', ),\n    ),\n    BanRule(\n        pattern=r'features::kIsolatedWebApps',\n        explanation=(\n            'Do not use `features::kIsolatedWebApps` directly to guard Isolated ',\n            'Web App code. ',\n            'Use `content::IsolatedWebAppsPolicy::AreIsolatedWebAppsEnabled()` in ',\n            'the browser process or check the `kEnableIsolatedWebAppsInRenderer` ',\n            'command line flag in the renderer process.',\n        ),\n        treat_as_error=True,\n        excluded_paths=_TEST_CODE_EXCLUDED_PATHS +\n        ('^chrome/browser/about_flags.cc',\n         '^chrome/browser/web_applications/isolated_web_apps/chrome_content_browser_client_isolated_web_apps_part.cc',\n         '^chrome/browser/ui/startup/bad_flags_prompt.cc',\n         '^content/shell/browser/shell_content_browser_client.cc')),\n    BanRule(\n        pattern=r'features::kIsolatedWebAppDevMode',\n        explanation=(\n            'Do not use `features::kIsolatedWebAppDevMode` directly to guard code ',\n            'related to Isolated Web App Developer Mode. ',\n            'Use `web_app::IsIwaDevModeEnabled()` instead.',\n        ),\n        treat_as_error=True,\n        excluded_paths=_TEST_CODE_EXCLUDED_PATHS + (\n            '^chrome/browser/about_flags.cc',\n            '^chrome/browser/web_applications/isolated_web_apps/isolated_web_app_features.cc',\n            '^chrome/browser/ui/startup/bad_flags_prompt.cc',\n        )),\n    BanRule(\n        pattern=r'features::kIsolatedWebAppUnmanagedInstall',\n        explanation=(\n            'Do not use `features::kIsolatedWebAppUnmanagedInstall` directly to ',\n            'guard code related to unmanaged install flow for Isolated Web Apps. ',\n            'Use `web_app::IsIwaUnmanagedInstallEnabled()` instead.',\n        ),\n        treat_as_error=True,\n        excluded_paths=_TEST_CODE_EXCLUDED_PATHS + (\n            '^chrome/browser/about_flags.cc',\n            '^chrome/browser/web_applications/isolated_web_apps/isolated_web_app_features.cc',\n        )),\n    BanRule(\n        pattern='/(CUIAutomation|AccessibleObjectFromWindow)',\n        explanation=\n        ('Direct usage of UIAutomation or IAccessible2 in client code is '\n         'discouraged in Chromium, as it is not an assistive technology and '\n         'should not rely on accessibility APIs directly. These APIs can '\n         'introduce significant performance overhead. However, if you believe '\n         'your use case warrants an exception, please discuss it with an '\n         'accessibility owner before proceeding. For more information on the '\n         'performance implications, see https://docs.google.com/document/d/1jN4itpCe_bDXF0BhFaYwv4xVLsCWkL9eULdzjmLzkuk/edit#heading=h.pwth3nbwdub0.',\n         ),\n        treat_as_error=False,\n    ),\n    BanRule(\n        pattern=r'/WIDGET_OWNS_NATIVE_WIDGET|'\n        r'NATIVE_WIDGET_OWNS_WIDGET',\n        explanation=\n        ('WIDGET_OWNS_NATIVE_WIDGET and NATIVE_WIDGET_OWNS_WIDGET are in the '\n         'process of being deprecated. Consider using the new '\n         'CLIENT_OWNS_WIDGET ownership model. Eventually, this will be the only '\n         'available ownership model available and the associated enumeration'\n         'will be removed.', ),\n        treat_as_error=False,\n    ),\n    BanRule(\n        pattern='ProfileManager::GetLastUsedProfile',\n        explanation=\n        ('Most code should already be scoped to a Profile. Pass in a Profile* '\n         'or retreive from an existing entity with a reference to the Profile '\n         '(e.g. WebContents).', ),\n        treat_as_error=False,\n    ),\n    BanRule(\n        pattern=(r'/FindBrowserWithUiElementContext|'\n                 r'FindBrowserWithTab|'\n                 r'FindBrowserWithGroup|'\n                 r'FindTabbedBrowser|'\n                 r'FindAnyBrowser|'\n                 r'FindBrowserWithProfile|'\n                 r'FindLastActive|'\n                 r'FindBrowserWithActiveWindow'),\n        explanation=\n        ('Most code should already be scoped to a Browser. Pass in a Browser* '\n         'or retreive from an existing entity with a reference to the Browser.',\n         ),\n        treat_as_error=False,\n    ),\n    BanRule(\n        pattern='BrowserUserData',\n        explanation=\n        ('Do not use BrowserUserData to store state on a Browser instance. '\n         'Instead use BrowserWindowFeatures. BrowserWindowFeatures is '\n         'functionally identical but has two benefits: it does not force a '\n         'dependency onto class Browser, and lifetime semantics are explicit '\n         'rather than implicit. See BrowserUserData header file for more '\n         'details.', ),\n        treat_as_error=False,\n        excluded_paths=(\n          # Exclude iOS as the iOS implementation of BrowserUserData is separate\n          # and still in use.\n          '^ios/',\n        ),\n    ),\n    BanRule(\n        pattern=r'UNSAFE_TODO(',\n        explanation=\n        ('Do not use UNSAFE_TODO() to write new unsafe code. Use only when '\n         'removing a pre-existing file-wide allow_unsafe_buffers pragma, or '\n         'when incrementally converting code off of unsafe interfaces',\n        ),\n        treat_as_error=False,\n    ),\n    BanRule(\n        pattern=r'UNSAFE_BUFFERS(',\n        explanation=\n        ('Try to avoid using UNSAFE_BUFFERS() if at all possible. Otherwise, '\n         'be sure to justify in a // SAFETY comment why other options are not '\n         'available, and why the code is safe.',\n        ),\n        treat_as_error=False,\n    ),\n    BanRule(\n        pattern='BrowserWithTestWindowTest',\n        explanation=\n        ('Do not use BrowserWithTestWindowTest. By instantiating an instance '\n         'of class Browser, the test is no longer a unit test but is instead a '\n         'browser test. The class BrowserWithTestWindowTest forces production '\n         'logic to take on test-only conditionals, which is an anti-pattern. '\n         'Features should be performing dependency injection rather than '\n         'directly using class Browser. See '\n         'docs/chrome_browser_design_principles.md for more details.',\n        ),\n        treat_as_error=False,\n    ),\n    BanRule(\n        pattern='TestWithBrowserView',\n        explanation=\n         ('Do not use TestWithBrowserView. See '\n          'docs/chrome_browser_design_principles.md for details. If you want '\n          'to write a test that has both a Browser and a BrowserView, create '\n          'a browser_test. If you want to write a unit_test, your code must '\n          'not reference Browser*.',\n         ),\n        treat_as_error=False,\n    ),\n    BanRule(\n        pattern='RunUntilIdle',\n        explanation=\n        ('Do not RunUntilIdle. If possible, explicitly quit the run loop using '\n         'run_loop.Quit() or run_loop.QuitClosure() if completion can be '\n         'observed using a lambda or callback. Otherwise, wait for the '\n         'condition to be true via base::test::RunUntil().',\n        ),\n        treat_as_error=False,\n    ),\n    BanRule(\n        pattern=r'/\\bstd::(literals|string_literals|string_view_literals)\\b',\n        explanation = (\n            'User-defined literals are banned by the Google C++ style guide. '\n            'Exceptions are provided in Chrome for string and string_view '\n            'literals that embed \\\\0.',\n        ),\n        treat_as_error=True,\n        excluded_paths=(\n            # Various tests or test helpers that embed NUL in strings or\n            # string_views.\n            r'^ash/components/arc/session/serial_number_util_unittest\\.cc',\n            r'^base/strings/string_util_unittest\\.cc',\n            r'^base/strings/utf_string_conversions_unittest\\.cc',\n            r'^chrome/browser/ash/crosapi/browser_data_back_migrator_unittest\\.cc',\n            r'^chrome/browser/ash/crosapi/browser_data_migrator_util_unittest\\.cc',\n            r'^chrome/browser/ash/crosapi/move_migrator_unittest\\.cc',\n            r'^components/history/core/browser/visit_annotations_database\\.cc',\n            r'^components/history/core/browser/visit_annotations_database_unittest\\.cc',\n            r'^components/os_crypt/sync/os_crypt_unittest\\.cc',\n            r'^components/password_manager/core/browser/credentials_cleaner_unittest\\.cc',\n            r'^content/browser/file_system_access/file_system_access_file_writer_impl_unittest\\.cc',\n            r'^net/cookies/parsed_cookie_unittest\\.cc',\n            r'^third_party/blink/renderer/modules/webcodecs/test_helpers\\.cc',\n            r'^third_party/blink/renderer/modules/websockets/websocket_channel_impl_test\\.cc',\n        ),\n    ),\n    BanRule(\n        pattern='BUILDFLAG(GOOGLE_CHROME_BRANDING)',\n        explanation=\n        ('Code gated by GOOGLE_CHROME_BRANDING is effectively untested. This '\n         'is typically wrong. Valid use cases are glue for private modules '\n         'shipped alongside Chrome, and installation-related logic.',\n        ),\n        treat_as_error=False,\n    ),\n    BanRule(\n        pattern='defined(OFFICIAL_BUILD)',\n        explanation=\n        ('Code gated by OFFICIAL_BUILD is effectively untested. This '\n         'is typically wrong. One valid use case is low-level code that '\n         'handles subtleties related to high-levels of optimizations that come '\n         'with OFFICIAL_BUILD.',\n        ),\n        treat_as_error=False,\n    ),\n    BanRule(\n        pattern='WebContentsDestroyed',\n        explanation=\n        ('Do not use this method. It is invoked half-way through the '\n         'destructor of WebContentsImpl and using it often results in crashes '\n         'or surprising behavior. Conceptually, this is only necessary by '\n         'objects that depend on, but outlive the WebContents. These objects '\n         'should instead coordinate with the owner of the WebContents which is '\n         'responsible for destroying the WebContents.',\n        ),\n        treat_as_error=False,\n    ),\n    BanRule(\n        pattern=(r'/IS_CHROMEOS_ASH|'\n                 r'IS_CHROMEOS_LACROS'),\n        explanation=\n        ('Lacros is deprecated. Please do not use IS_CHROMEOS_ASH and '\n         'IS_CHROMEOS_LACROS anymore. Prefer IS_CHROMEOS instead.',\n        ),\n        treat_as_error=False,\n    ),\n)\n\n_DEPRECATED_SYNC_CONSENT_FUNCTION_WARNING = (\n  'Used a predicate related to signin::ConsentLevel::kSync which will always '\n  'return false in the future (crbug.com/40066949). Prefer using a predicate '\n  'that also supports signin::ConsentLevel::kSignin when appropriate. It is '\n  'safe to ignore this warning if you are just moving an existing call, or if '\n  'you want special handling for users in the legacy state. In doubt, reach '\n  'out to //components/sync/OWNERS.',\n)\n\n# C++ functions related to signin::ConsentLevel::kSync which are deprecated.\n_DEPRECATED_SYNC_CONSENT_CPP_FUNCTIONS : Sequence[BanRule] = (\n    BanRule(\n      'HasSyncConsent',\n      _DEPRECATED_SYNC_CONSENT_FUNCTION_WARNING,\n      False,\n    ),\n    BanRule(\n      'CanSyncFeatureStart',\n      _DEPRECATED_SYNC_CONSENT_FUNCTION_WARNING,\n      False,\n    ),\n    BanRule(\n      'IsSyncFeatureEnabled',\n      _DEPRECATED_SYNC_CONSENT_FUNCTION_WARNING,\n      False,\n    ),\n    BanRule(\n      'IsSyncFeatureActive',\n      _DEPRECATED_SYNC_CONSENT_FUNCTION_WARNING,\n      False,\n    ),\n)\n\n# Java functions related to signin::ConsentLevel::kSync which are deprecated.\n_DEPRECATED_SYNC_CONSENT_JAVA_FUNCTIONS : Sequence[BanRule] = (\n    BanRule(\n      'hasSyncConsent',\n      _DEPRECATED_SYNC_CONSENT_FUNCTION_WARNING,\n      False,\n    ),\n    BanRule(\n      'canSyncFeatureStart',\n      _DEPRECATED_SYNC_CONSENT_FUNCTION_WARNING,\n      False,\n    ),\n    BanRule(\n      'isSyncFeatureEnabled',\n      _DEPRECATED_SYNC_CONSENT_FUNCTION_WARNING,\n      False,\n    ),\n    BanRule(\n      'isSyncFeatureActive',\n      _DEPRECATED_SYNC_CONSENT_FUNCTION_WARNING,\n      False,\n    ),\n)\n\n_BANNED_MOJOM_PATTERNS : Sequence[BanRule] = (\n    BanRule(\n        'handle<shared_buffer>',\n        (\n         'Please use one of the more specific shared memory types instead:',\n         '  mojo_base.mojom.ReadOnlySharedMemoryRegion',\n         '  mojo_base.mojom.WritableSharedMemoryRegion',\n         '  mojo_base.mojom.UnsafeSharedMemoryRegion',\n        ),\n        True,\n    ),\n)\n\n_IPC_ENUM_TRAITS_DEPRECATED = (\n    'You are using IPC_ENUM_TRAITS() in your code. It has been deprecated.\\n'\n    'See http://www.chromium.org/Home/chromium-security/education/'\n    'security-tips-for-ipc')\n\n_LONG_PATH_ERROR = (\n    'Some files included in this CL have file names that are too long (> 200'\n    ' characters). If committed, these files will cause issues on Windows. See'\n    ' https://crbug.com/612667 for more details.'\n)\n\n_JAVA_MULTIPLE_DEFINITION_EXCLUDED_PATHS = [\n    r\".*/BuildHooksAndroidImpl\\.java\",\n    r\".*/LicenseContentProvider\\.java\",\n    r\".*/PlatformServiceBridgeImpl.java\",\n    r\".*chrome/android/feed/dummy/.*\\.java\",\n]\n\n# List of image extensions that are used as resources in chromium.\n_IMAGE_EXTENSIONS = ['.svg', '.png', '.webp']\n\n# These paths contain test data and other known invalid JSON files.\n_KNOWN_TEST_DATA_AND_INVALID_JSON_FILE_PATTERNS = [\n    r'test/data/',\n    r'testing/buildbot/',\n    r'^components/policy/resources/policy_templates\\.json$',\n    r'^third_party/protobuf/',\n    r'^third_party/blink/perf_tests/speedometer.*/resources/todomvc/learn\\.json',\n    r'^third_party/blink/renderer/devtools/protocol\\.json$',\n    r'^third_party/blink/web_tests/external/wpt/',\n    r'^tools/perf/',\n    r'^tools/traceline/svgui/startup-release.json',\n    # vscode configuration files allow comments\n    r'^tools/vscode/',\n]\n\n# These are not checked on the public chromium-presubmit trybot.\n# Add files here that rely on .py files that exists only for target_os=\"android\"\n# checkouts.\n_ANDROID_SPECIFIC_PYDEPS_FILES = [\n    'chrome/android/features/create_stripped_java_factory.pydeps',\n]\n\n\n_GENERIC_PYDEPS_FILES = [\n    'android_webview/tools/run_cts.pydeps',\n    'build/android/apk_operations.pydeps',\n    'build/android/devil_chromium.pydeps',\n    'build/android/gyp/aar.pydeps',\n    'build/android/gyp/aidl.pydeps',\n    'build/android/gyp/apkbuilder.pydeps',\n    'build/android/gyp/assert_static_initializers.pydeps',\n    'build/android/gyp/binary_baseline_profile.pydeps',\n    'build/android/gyp/bytecode_rewriter.pydeps',\n    'build/android/gyp/check_flag_expectations.pydeps',\n    'build/android/gyp/check_for_missing_direct_deps.pydeps',\n    'build/android/gyp/compile_java.pydeps',\n    'build/android/gyp/compile_kt.pydeps',\n    'build/android/gyp/compile_resources.pydeps',\n    'build/android/gyp/copy_ex.pydeps',\n    'build/android/gyp/create_apk_operations_script.pydeps',\n    'build/android/gyp/create_app_bundle.pydeps',\n    'build/android/gyp/create_app_bundle_apks.pydeps',\n    'build/android/gyp/create_bundle_wrapper_script.pydeps',\n    'build/android/gyp/create_java_binary_script.pydeps',\n    'build/android/gyp/create_r_java.pydeps',\n    'build/android/gyp/create_r_txt.pydeps',\n    'build/android/gyp/create_size_info_files.pydeps',\n    'build/android/gyp/create_test_apk_wrapper_script.pydeps',\n    'build/android/gyp/create_ui_locale_resources.pydeps',\n    'build/android/gyp/dex.pydeps',\n    'build/android/gyp/dist_aar.pydeps',\n    'build/android/gyp/filter_zip.pydeps',\n    'build/android/gyp/flatc_java.pydeps',\n    'build/android/gyp/gcc_preprocess.pydeps',\n    'build/android/gyp/generate_linker_version_script.pydeps',\n    'build/android/gyp/ijar.pydeps',\n    'build/android/gyp/jacoco_instr.pydeps',\n    'build/android/gyp/java_cpp_enum.pydeps',\n    'build/android/gyp/java_cpp_features.pydeps',\n    'build/android/gyp/java_cpp_strings.pydeps',\n    'build/android/gyp/java_google_api_keys.pydeps',\n    'build/android/gyp/jinja_template.pydeps',\n    'build/android/gyp/lint.pydeps',\n    'build/android/gyp/merge_manifest.pydeps',\n    'build/android/gyp/optimize_resources.pydeps',\n    'build/android/gyp/prepare_resources.pydeps',\n    'build/android/gyp/process_native_prebuilt.pydeps',\n    'build/android/gyp/proguard.pydeps',\n    'build/android/gyp/rename_java_classes.pydeps',\n    'build/android/gyp/system_image_apks.pydeps',\n    'build/android/gyp/trace_event_bytecode_rewriter.pydeps',\n    'build/android/gyp/turbine.pydeps',\n    'build/android/gyp/unused_resources.pydeps',\n    'build/android/gyp/validate_static_library_dex_references.pydeps',\n    'build/android/gyp/write_build_config.pydeps',\n    'build/android/gyp/write_native_libraries_java.pydeps',\n    'build/android/gyp/zip.pydeps',\n    'build/android/incremental_install/generate_android_manifest.pydeps',\n    'build/android/incremental_install/write_installer_json.pydeps',\n    'build/android/pylib/results/presentation/test_results_presentation.pydeps',\n    'build/android/resource_sizes.pydeps',\n    'build/android/test_runner.pydeps',\n    'build/android/test_wrapper/logdog_wrapper.pydeps',\n    'build/protoc_java.pydeps',\n    'chrome/android/monochrome/scripts/monochrome_python_tests.pydeps',\n    'chrome/test/chromedriver/log_replay/client_replay_unittest.pydeps',\n    'chrome/test/chromedriver/test/run_py_tests.pydeps',\n    'chromecast/resource_sizes/chromecast_resource_sizes.pydeps',\n    'components/cronet/tools/check_combined_proguard_file.pydeps',\n    'components/cronet/tools/generate_proguard_file.pydeps',\n    'components/cronet/tools/jar_src.pydeps',\n    'components/module_installer/android/module_desc_java.pydeps',\n    'content/public/android/generate_child_service.pydeps',\n    'fuchsia_web/av_testing/av_sync_tests.pydeps',\n    'net/tools/testserver/testserver.pydeps',\n    'testing/scripts/run_isolated_script_test.pydeps',\n    'testing/merge_scripts/standard_isolated_script_merge.pydeps',\n    'testing/merge_scripts/standard_gtest_merge.pydeps',\n    'testing/merge_scripts/code_coverage/merge_results.pydeps',\n    'testing/merge_scripts/code_coverage/merge_steps.pydeps',\n    'third_party/android_platform/development/scripts/stack.pydeps',\n    'third_party/blink/renderer/bindings/scripts/build_web_idl_database.pydeps',\n    'third_party/blink/renderer/bindings/scripts/check_generated_file_list.pydeps',\n    'third_party/blink/renderer/bindings/scripts/collect_idl_files.pydeps',\n    'third_party/blink/renderer/bindings/scripts/generate_bindings.pydeps',\n    'third_party/blink/renderer/bindings/scripts/generate_event_interface_names.pydeps',\n    'third_party/blink/renderer/bindings/scripts/validate_web_idl.pydeps',\n    'third_party/blink/tools/blinkpy/web_tests/merge_results.pydeps',\n    'third_party/blink/tools/merge_web_test_results.pydeps',\n    'tools/binary_size/sizes.pydeps',\n    'tools/binary_size/supersize.pydeps',\n    'tools/perf/process_perf_results.pydeps',\n    'tools/pgo/generate_profile.pydeps',\n]\n\n\n_ALL_PYDEPS_FILES = _ANDROID_SPECIFIC_PYDEPS_FILES + _GENERIC_PYDEPS_FILES\n\n\n# Bypass the AUTHORS check for these accounts.\n_KNOWN_ROBOTS = set(\n  ) | set('%s@appspot.gserviceaccount.com' % s for s in ('findit-for-me', 'luci-bisection')\n  ) | set('%s@developer.gserviceaccount.com' % s for s in ('3su6n15k.default',)\n  ) | set('%s@chops-service-accounts.iam.gserviceaccount.com' % s\n          for s in ('bling-autoroll-builder', 'v8-ci-autoroll-builder',\n                    'wpt-autoroller', 'chrome-weblayer-builder',\n                    'lacros-version-skew-roller', 'skylab-test-cros-roller',\n                    'infra-try-recipes-tester', 'lacros-tracking-roller',\n                    'lacros-sdk-version-roller', 'chrome-automated-expectation',\n                    'chromium-automated-expectation', 'chrome-branch-day',\n                    'chromium-autosharder')\n  ) | set('%s@skia-public.iam.gserviceaccount.com' % s\n          for s in ('chromium-autoroll', 'chromium-release-autoroll')\n  ) | set('%s@skia-corp.google.com.iam.gserviceaccount.com' % s\n          for s in ('chromium-internal-autoroll',)\n  ) | set('%s@system.gserviceaccount.com' % s\n          for s in ('chrome-screen-ai-releaser',)\n  ) | set('%s@owners-cleanup-prod.google.com.iam.gserviceaccount.com' % s\n          for s in ('swarming-tasks',)\n  ) | set('%s@fuchsia-infra.iam.gserviceaccount.com' % s\n          for s in ('global-integration-try-builder',\n                    'global-integration-ci-builder')\n  ) | set('%s@prod.google.com' % s\n          for s in ('chops-security-borg',\n                    'chops-security-cronjobs-cpesuggest'))\n\n_INVALID_GRD_FILE_LINE = [\n        (r'<file lang=.* path=.*', 'Path should come before lang in GRD files.')\n]\n\ndef _IsCPlusPlusFile(input_api, file_path):\n    \"\"\"Returns True if this file contains C++-like code (and not Python,\n    Go, Java, MarkDown, ...)\"\"\"\n\n    ext = input_api.os_path.splitext(file_path)[1]\n    # This list is compatible with CppChecker.IsCppFile but we should\n    # consider adding \".c\" to it. If we do that we can use this function\n    # at more places in the code.\n    return ext in (\n        '.h',\n        '.cc',\n        '.cpp',\n        '.m',\n        '.mm',\n    )\n\n\ndef _IsCPlusPlusHeaderFile(input_api, file_path):\n    return input_api.os_path.splitext(file_path)[1] == \".h\"\n\n\ndef _IsJavaFile(input_api, file_path):\n    return input_api.os_path.splitext(file_path)[1] == \".java\"\n\n\ndef _IsProtoFile(input_api, file_path):\n    return input_api.os_path.splitext(file_path)[1] == \".proto\"\n\n\ndef _IsXmlOrGrdFile(input_api, file_path):\n    ext = input_api.os_path.splitext(file_path)[1]\n    return ext in ('.grd', '.xml')\n\n\ndef _IsMojomFile(input_api, file_path):\n    return input_api.os_path.splitext(file_path)[1] == \".mojom\"\n\n\ndef CheckNoUpstreamDepsOnClank(input_api, output_api):\n    \"\"\"Prevent additions of dependencies from the upstream repo on //clank.\"\"\"\n    # clank can depend on clank\n    if input_api.change.RepositoryRoot().endswith('clank'):\n        return []\n    build_file_patterns = [\n        r'(.+/)?BUILD\\.gn',\n        r'.+\\.gni',\n    ]\n    excluded_files = [r'build[/\\\\]config[/\\\\]android[/\\\\]config\\.gni']\n    bad_pattern = input_api.re.compile(r'^[^#]*//clank')\n\n    error_message = 'Disallowed import on //clank in an upstream build file:'\n\n    def FilterFile(affected_file):\n        return input_api.FilterSourceFile(affected_file,\n                                          files_to_check=build_file_patterns,\n                                          files_to_skip=excluded_files)\n\n    problems = []\n    for f in input_api.AffectedSourceFiles(FilterFile):\n        local_path = f.LocalPath()\n        for line_number, line in f.ChangedContents():\n            if (bad_pattern.search(line)):\n                problems.append('%s:%d\\n    %s' %\n                                (local_path, line_number, line.strip()))\n    if problems:\n        return [output_api.PresubmitPromptOrNotify(error_message, problems)]\n    else:\n        return []\n\n\ndef CheckNoProductionCodeUsingTestOnlyFunctions(input_api, output_api):\n    \"\"\"Attempts to prevent use of functions intended only for testing in\n    non-testing code. For now this is just a best-effort implementation\n    that ignores header files and may have some false positives. A\n    better implementation would probably need a proper C++ parser.\n    \"\"\"\n    # We only scan .cc files and the like, as the declaration of\n    # for-testing functions in header files are hard to distinguish from\n    # calls to such functions without a proper C++ parser.\n    file_inclusion_pattern = [r'.+%s' % _IMPLEMENTATION_EXTENSIONS]\n\n    base_function_pattern = r'[ :]test::[^\\s]+|ForTest(s|ing)?|for_test(s|ing)?'\n    inclusion_pattern = input_api.re.compile(r'(%s)\\s*\\(' %\n                                             base_function_pattern)\n    comment_pattern = input_api.re.compile(r'//.*(%s)' % base_function_pattern)\n    allowlist_pattern = input_api.re.compile(r'// IN-TEST$')\n    exclusion_pattern = input_api.re.compile(\n        r'::[A-Za-z0-9_]+(%s)|(%s)[^;]+\\{' %\n        (base_function_pattern, base_function_pattern))\n    # Avoid a false positive in this case, where the method name, the ::, and\n    # the closing { are all on different lines due to line wrapping.\n    # HelperClassForTesting::\n    #   HelperClassForTesting(\n    #       args)\n    #     : member(0) {}\n    method_defn_pattern = input_api.re.compile(r'[A-Za-z0-9_]+::$')\n\n    def FilterFile(affected_file):\n        files_to_skip = (_EXCLUDED_PATHS + _TEST_CODE_EXCLUDED_PATHS +\n                         input_api.DEFAULT_FILES_TO_SKIP)\n        return input_api.FilterSourceFile(\n            affected_file,\n            files_to_check=file_inclusion_pattern,\n            files_to_skip=files_to_skip)\n\n    problems = []\n    for f in input_api.AffectedSourceFiles(FilterFile):\n        local_path = f.LocalPath()\n        in_method_defn = False\n        for line_number, line in f.ChangedContents():\n            if (inclusion_pattern.search(line)\n                    and not comment_pattern.search(line)\n                    and not exclusion_pattern.search(line)\n                    and not allowlist_pattern.search(line)\n                    and not in_method_defn):\n                problems.append('%s:%d\\n    %s' %\n                                (local_path, line_number, line.strip()))\n            in_method_defn = method_defn_pattern.search(line)\n\n    if problems:\n        return [\n            output_api.PresubmitPromptOrNotify(_TEST_ONLY_WARNING, problems)\n        ]\n    else:\n        return []\n\n\ndef CheckNoProductionCodeUsingTestOnlyFunctionsJava(input_api, output_api):\n    \"\"\"This is a simplified version of\n    CheckNoProductionCodeUsingTestOnlyFunctions for Java files.\n    \"\"\"\n    javadoc_start_re = input_api.re.compile(r'^\\s*/\\*\\*')\n    javadoc_end_re = input_api.re.compile(r'^\\s*\\*/')\n    name_pattern = r'ForTest(s|ing)?'\n    # Describes an occurrence of \"ForTest*\" inside a // comment.\n    comment_re = input_api.re.compile(r'//.*%s' % name_pattern)\n    # Describes @VisibleForTesting(otherwise = VisibleForTesting.PROTECTED)\n    annotation_re = input_api.re.compile(r'@VisibleForTesting\\(')\n    # Catch calls.\n    inclusion_re = input_api.re.compile(r'(%s)\\s*\\(' % name_pattern)\n    # Ignore definitions. (Comments are ignored separately.)\n    exclusion_re = input_api.re.compile(r'(%s)[^;]+\\{' % name_pattern)\n    allowlist_re = input_api.re.compile(r'// IN-TEST$')\n\n    problems = []\n    sources = lambda x: input_api.FilterSourceFile(\n        x,\n        files_to_skip=(('(?i).*test', r'.*\\/junit\\/') + input_api.\n                       DEFAULT_FILES_TO_SKIP),\n        files_to_check=[r'.*\\.java$'])\n    for f in input_api.AffectedFiles(include_deletes=False,\n                                     file_filter=sources):\n        local_path = f.LocalPath()\n        is_inside_javadoc = False\n        for line_number, line in f.ChangedContents():\n            if is_inside_javadoc and javadoc_end_re.search(line):\n                is_inside_javadoc = False\n            if not is_inside_javadoc and javadoc_start_re.search(line):\n                is_inside_javadoc = True\n            if is_inside_javadoc:\n                continue\n            if (inclusion_re.search(line) and not comment_re.search(line)\n                    and not annotation_re.search(line)\n                    and not allowlist_re.search(line)\n                    and not exclusion_re.search(line)):\n                problems.append('%s:%d\\n    %s' %\n                                (local_path, line_number, line.strip()))\n\n    if problems:\n        return [\n            output_api.PresubmitPromptOrNotify(_TEST_ONLY_WARNING, problems)\n        ]\n    else:\n        return []\n\n\ndef CheckNoIOStreamInHeaders(input_api, output_api):\n    \"\"\"Checks to make sure no .h files include <iostream>.\"\"\"\n    files = []\n    pattern = input_api.re.compile(r'^#include\\s*<iostream>',\n                                   input_api.re.MULTILINE)\n    for f in input_api.AffectedSourceFiles(input_api.FilterSourceFile):\n        if not f.LocalPath().endswith('.h'):\n            continue\n        contents = input_api.ReadFile(f)\n        if pattern.search(contents):\n            files.append(f)\n\n    if len(files):\n        return [\n            output_api.PresubmitError(\n                'Do not #include <iostream> in header files, since it inserts static '\n                'initialization into every file including the header. Instead, '\n                '#include <ostream>. See http://crbug.com/94794', files)\n        ]\n    return []\n\n\ndef CheckNoStrCatRedefines(input_api, output_api):\n    \"\"\"Checks no windows headers with StrCat redefined are included directly.\"\"\"\n    files = []\n    files_to_check = (r'.+%s' % _HEADER_EXTENSIONS,\n                      r'.+%s' % _IMPLEMENTATION_EXTENSIONS)\n    files_to_skip = (input_api.DEFAULT_FILES_TO_SKIP +\n                     _NON_BASE_DEPENDENT_PATHS)\n    sources_filter = lambda f: input_api.FilterSourceFile(\n        f, files_to_check=files_to_check, files_to_skip=files_to_skip)\n\n    pattern_deny = input_api.re.compile(\n        r'^#include\\s*[<\"](shlwapi|atlbase|propvarutil|sphelper).h[\">]',\n        input_api.re.MULTILINE)\n    pattern_allow = input_api.re.compile(\n        r'^#include\\s\"base/win/windows_defines.inc\"', input_api.re.MULTILINE)\n    for f in input_api.AffectedSourceFiles(sources_filter):\n        contents = input_api.ReadFile(f)\n        if pattern_deny.search(\n                contents) and not pattern_allow.search(contents):\n            files.append(f.LocalPath())\n\n    if len(files):\n        return [\n            output_api.PresubmitError(\n                'Do not #include shlwapi.h, atlbase.h, propvarutil.h or sphelper.h '\n                'directly since they pollute code with StrCat macro. Instead, '\n                'include matching header from base/win. See http://crbug.com/856536',\n                files)\n        ]\n    return []\n\n\ndef _CheckNoUNIT_TESTInSourceFiles(input_api, f):\n    problems = []\n\n    unit_test_macro = input_api.re.compile(\n        '^\\s*#.*(?:ifn?def\\s+UNIT_TEST|defined\\s*\\(?\\s*UNIT_TEST\\s*\\)?)(?:$|\\s+)')\n    for line_num, line in f.ChangedContents():\n        if unit_test_macro.match(line):\n            problems.append('    %s:%d' % (f.LocalPath(), line_num))\n\n    return problems\n\n\ndef CheckNoUNIT_TESTInSourceFiles(input_api, output_api):\n    \"\"\"Checks to make sure no source files use UNIT_TEST.\"\"\"\n    problems = []\n    for f in input_api.AffectedFiles():\n        if (not f.LocalPath().endswith(('.cc', '.mm'))):\n            continue\n        problems.extend(\n            _CheckNoUNIT_TESTInSourceFiles(input_api, f))\n\n    if not problems:\n        return []\n    return [\n        output_api.PresubmitPromptWarning('UNIT_TEST is only for headers.\\n' +\n                                          '\\n'.join(problems))\n    ]\n\n\ndef CheckNoDISABLETypoInTests(input_api, output_api):\n    \"\"\"Checks to prevent attempts to disable tests with DISABLE_ prefix.\n\n    This test warns if somebody tries to disable a test with the DISABLE_ prefix\n    instead of DISABLED_. To filter false positives, reports are only generated\n    if a corresponding MAYBE_ line exists.\n    \"\"\"\n    problems = []\n\n    # The following two patterns are looked for in tandem - is a test labeled\n    # as MAYBE_ followed by a DISABLE_ (instead of the correct DISABLED)\n    maybe_pattern = input_api.re.compile(r'MAYBE_([a-zA-Z0-9_]+)')\n    disable_pattern = input_api.re.compile(r'DISABLE_([a-zA-Z0-9_]+)')\n\n    # This is for the case that a test is disabled on all platforms.\n    full_disable_pattern = input_api.re.compile(\n        r'^\\s*TEST[^(]*\\([a-zA-Z0-9_]+,\\s*DISABLE_[a-zA-Z0-9_]+\\)',\n        input_api.re.MULTILINE)\n\n    for f in input_api.AffectedFiles(include_deletes=False):\n        if not 'test' in f.LocalPath() or not f.LocalPath().endswith('.cc'):\n            continue\n\n        # Search for MAYBE_, DISABLE_ pairs.\n        disable_lines = {}  # Maps of test name to line number.\n        maybe_lines = {}\n        for line_num, line in f.ChangedContents():\n            disable_match = disable_pattern.search(line)\n            if disable_match:\n                disable_lines[disable_match.group(1)] = line_num\n            maybe_match = maybe_pattern.search(line)\n            if maybe_match:\n                maybe_lines[maybe_match.group(1)] = line_num\n\n        # Search for DISABLE_ occurrences within a TEST() macro.\n        disable_tests = set(disable_lines.keys())\n        maybe_tests = set(maybe_lines.keys())\n        for test in disable_tests.intersection(maybe_tests):\n            problems.append('    %s:%d' % (f.LocalPath(), disable_lines[test]))\n\n        contents = input_api.ReadFile(f)\n        full_disable_match = full_disable_pattern.search(contents)\n        if full_disable_match:\n            problems.append('    %s' % f.LocalPath())\n\n    if not problems:\n        return []\n    return [\n        output_api.PresubmitPromptWarning(\n            'Attempt to disable a test with DISABLE_ instead of DISABLED_?\\n' +\n            '\\n'.join(problems))\n    ]\n\n\ndef CheckForgettingMAYBEInTests(input_api, output_api):\n    \"\"\"Checks to make sure tests disabled conditionally are not missing a\n    corresponding MAYBE_ prefix.\n    \"\"\"\n    # Expect at least a lowercase character in the test name. This helps rule out\n    # false positives with macros wrapping the actual tests name.\n    define_maybe_pattern = input_api.re.compile(\n        r'^\\#define MAYBE_(?P<test_name>\\w*[a-z]\\w*)')\n    # The test_maybe_pattern needs to handle all of these forms. The standard:\n    #   IN_PROC_TEST_F(SyncTest, MAYBE_Start) {\n    # With a wrapper macro around the test name:\n    #   IN_PROC_TEST_F(SyncTest, E2E_ENABLED(MAYBE_Start)) {\n    # And the odd-ball NACL_BROWSER_TEST_f format:\n    #    NACL_BROWSER_TEST_F(NaClBrowserTest, SimpleLoad, {\n    # The optional E2E_ENABLED-style is handled with (\\w*\\()?\n    # The NACL_BROWSER_TEST_F pattern is handled by allowing a trailing comma or\n    # trailing ')'.\n    test_maybe_pattern = (\n        r'^\\s*\\w*TEST[^(]*\\(\\s*\\w+,\\s*(\\w*\\()?MAYBE_{test_name}[\\),]')\n    suite_maybe_pattern = r'^\\s*\\w*TEST[^(]*\\(\\s*MAYBE_{test_name}[\\),]'\n    warnings = []\n\n    # Read the entire files. We can't just read the affected lines, forgetting to\n    # add MAYBE_ on a change would not show up otherwise.\n    for f in input_api.AffectedFiles(include_deletes=False):\n        if not 'test' in f.LocalPath() or not f.LocalPath().endswith('.cc'):\n            continue\n        contents = input_api.ReadFile(f)\n        lines = contents.splitlines(True)\n        current_position = 0\n        warning_test_names = set()\n        for line_num, line in enumerate(lines, start=1):\n            current_position += len(line)\n            maybe_match = define_maybe_pattern.search(line)\n            if maybe_match:\n                test_name = maybe_match.group('test_name')\n                # Do not warn twice for the same test.\n                if (test_name in warning_test_names):\n                    continue\n                warning_test_names.add(test_name)\n\n                # Attempt to find the corresponding MAYBE_ test or suite, starting from\n                # the current position.\n                test_match = input_api.re.compile(\n                    test_maybe_pattern.format(test_name=test_name),\n                    input_api.re.MULTILINE).search(contents, current_position)\n                suite_match = input_api.re.compile(\n                    suite_maybe_pattern.format(test_name=test_name),\n                    input_api.re.MULTILINE).search(contents, current_position)\n                if not test_match and not suite_match:\n                    warnings.append(\n                        output_api.PresubmitPromptWarning(\n                            '%s:%d found MAYBE_ defined without corresponding test %s'\n                            % (f.LocalPath(), line_num, test_name)))\n    return warnings\n\n\ndef CheckDCHECK_IS_ONHasBraces(input_api, output_api):\n    \"\"\"Checks to make sure DCHECK_IS_ON() does not skip the parentheses.\"\"\"\n    errors = []\n    pattern = input_api.re.compile(r'\\bDCHECK_IS_ON\\b(?!\\(\\))',\n                                   input_api.re.MULTILINE)\n    for f in input_api.AffectedSourceFiles(input_api.FilterSourceFile):\n        if (not f.LocalPath().endswith(('.cc', '.mm', '.h'))):\n            continue\n        for lnum, line in f.ChangedContents():\n            if input_api.re.search(pattern, line):\n                errors.append(\n                    output_api.PresubmitError((\n                        '%s:%d: Use of DCHECK_IS_ON() must be written as \"#if '\n                        + 'DCHECK_IS_ON()\", not forgetting the parentheses.') %\n                                              (f.LocalPath(), lnum)))\n    return errors\n\n\n# TODO(crbug/1138055): Reimplement CheckUmaHistogramChangesOnUpload check in a\n# more reliable way. See\n# https://chromium-review.googlesource.com/c/chromium/src/+/2500269\n\n\ndef CheckFlakyTestUsage(input_api, output_api):\n    \"\"\"Check that FlakyTest annotation is our own instead of the android one\"\"\"\n    pattern = input_api.re.compile(r'import android.test.FlakyTest;')\n    files = []\n    for f in input_api.AffectedSourceFiles(input_api.FilterSourceFile):\n        if f.LocalPath().endswith('Test.java'):\n            if pattern.search(input_api.ReadFile(f)):\n                files.append(f)\n    if len(files):\n        return [\n            output_api.PresubmitError(\n                'Use org.chromium.base.test.util.FlakyTest instead of '\n                'android.test.FlakyTest', files)\n        ]\n    return []\n\n\ndef CheckNoDEPSGIT(input_api, output_api):\n    \"\"\"Make sure .DEPS.git is never modified manually.\"\"\"\n    if any(f.LocalPath().endswith('.DEPS.git')\n           for f in input_api.AffectedFiles()):\n        return [\n            output_api.PresubmitError(\n                'Never commit changes to .DEPS.git. This file is maintained by an\\n'\n                'automated system based on what\\'s in DEPS and your changes will be\\n'\n                'overwritten.\\n'\n                'See https://sites.google.com/a/chromium.org/dev/developers/how-tos/'\n                'get-the-code#Rolling_DEPS\\n'\n                'for more information')\n        ]\n    return []\n\n\ndef CheckCrosApiNeedBrowserTest(input_api, output_api):\n    \"\"\"Check new crosapi should add browser test.\"\"\"\n    has_new_crosapi = False\n    has_browser_test = False\n    for f in input_api.AffectedFiles():\n        path = f.LocalPath()\n        if (path.startswith('chromeos/crosapi/mojom') and\n            _IsMojomFile(input_api, path) and f.Action() == 'A'):\n            has_new_crosapi = True\n        if path.endswith('browsertest.cc') or path.endswith('browser_test.cc'):\n            has_browser_test = True\n    if has_new_crosapi and not has_browser_test:\n        return [\n            output_api.PresubmitPromptWarning(\n                'You are adding a new crosapi, but there is no file ends with '\n                'browsertest.cc file being added or modified. It is important '\n                'to add crosapi browser test coverage to avoid version '\n                ' skew issues.\\n'\n                'Check //docs/lacros/test_instructions.md for more information.'\n                )\n        ]\n    return []\n\n\ndef CheckValidHostsInDEPSOnUpload(input_api, output_api):\n    \"\"\"Checks that DEPS file deps are from allowed_hosts.\"\"\"\n    # Run only if DEPS file has been modified to annoy fewer bystanders.\n    if all(f.LocalPath() != 'DEPS' for f in input_api.AffectedFiles()):\n        return []\n    # Outsource work to gclient verify\n    try:\n        gclient_path = input_api.os_path.join(input_api.PresubmitLocalPath(),\n                                              'third_party', 'depot_tools',\n                                              'gclient.py')\n        input_api.subprocess.check_output(\n            [input_api.python3_executable, gclient_path, 'verify'],\n            stderr=input_api.subprocess.STDOUT)\n        return []\n    except input_api.subprocess.CalledProcessError as error:\n        return [\n            output_api.PresubmitError(\n                'DEPS file must have only git dependencies.',\n                long_text=error.output)\n        ]\n\n\ndef _GetMessageForMatchingType(input_api, affected_file, line_number, line,\n                               ban_rule):\n    \"\"\"Helper method for checking for banned constructs.\n\n    Returns an string composed of the name of the file, the line number where the\n    match has been found and the additional text passed as |message| in case the\n    target type name matches the text inside the line passed as parameter.\n    \"\"\"\n    result = []\n\n    # Ignore comments about banned types.\n    if input_api.re.search(r\"^ *//\", line):\n        return result\n    # A // nocheck comment will bypass this error.\n    if line.endswith(\" nocheck\"):\n        return result\n\n    matched = False\n    if ban_rule.pattern[0:1] == '/':\n        regex = ban_rule.pattern[1:]\n        if input_api.re.search(regex, line):\n            matched = True\n    elif ban_rule.pattern in line:\n        matched = True\n\n    if matched:\n        result.append('    %s:%d:' % (affected_file.LocalPath(), line_number))\n        for line in ban_rule.explanation:\n            result.append('      %s' % line)\n\n    return result\n\n\ndef CheckNoBannedFunctions(input_api, output_api):\n    \"\"\"Make sure that banned functions are not used.\"\"\"\n    warnings = []\n    errors = []\n\n    def IsExcludedFile(affected_file, excluded_paths):\n        if not excluded_paths:\n            return False\n\n        local_path = affected_file.LocalPath()\n        # Consistently use / as path separator to simplify the writing of regex\n        # expressions.\n        local_path = local_path.replace(input_api.os_path.sep, '/')\n        for item in excluded_paths:\n            if input_api.re.match(item, local_path):\n                return True\n        return False\n\n    def IsIosObjcFile(affected_file):\n        local_path = affected_file.LocalPath()\n        if input_api.os_path.splitext(local_path)[-1] not in ('.mm', '.m',\n                                                              '.h'):\n            return False\n        basename = input_api.os_path.basename(local_path)\n        if 'ios' in basename.split('_'):\n            return True\n        for sep in (input_api.os_path.sep, input_api.os_path.altsep):\n            if sep and 'ios' in local_path.split(sep):\n                return True\n        return False\n\n    def CheckForMatch(affected_file, line_num: int, line: str,\n                      ban_rule: BanRule):\n        if IsExcludedFile(affected_file, ban_rule.excluded_paths):\n            return\n\n        problems = _GetMessageForMatchingType(input_api, f, line_num, line,\n                                              ban_rule)\n        if problems:\n            if ban_rule.treat_as_error is not None and ban_rule.treat_as_error:\n                errors.extend(problems)\n            else:\n                warnings.extend(problems)\n\n    file_filter = lambda f: f.LocalPath().endswith(('.java'))\n    for f in input_api.AffectedFiles(file_filter=file_filter):\n        for line_num, line in f.ChangedContents():\n            for ban_rule in _BANNED_JAVA_FUNCTIONS:\n                CheckForMatch(f, line_num, line, ban_rule)\n\n    file_filter = lambda f: f.LocalPath().endswith(('.js', '.ts'))\n    for f in input_api.AffectedFiles(file_filter=file_filter):\n        for line_num, line in f.ChangedContents():\n            for ban_rule in _BANNED_JAVASCRIPT_FUNCTIONS:\n                CheckForMatch(f, line_num, line, ban_rule)\n\n    file_filter = lambda f: f.LocalPath().endswith(('.mm', '.m', '.h'))\n    for f in input_api.AffectedFiles(file_filter=file_filter):\n        for line_num, line in f.ChangedContents():\n            for ban_rule in _BANNED_OBJC_FUNCTIONS:\n                CheckForMatch(f, line_num, line, ban_rule)\n\n    for f in input_api.AffectedFiles(file_filter=IsIosObjcFile):\n        for line_num, line in f.ChangedContents():\n            for ban_rule in _BANNED_IOS_OBJC_FUNCTIONS:\n                CheckForMatch(f, line_num, line, ban_rule)\n\n    egtest_filter = lambda f: f.LocalPath().endswith(('_egtest.mm'))\n    for f in input_api.AffectedFiles(file_filter=egtest_filter):\n        for line_num, line in f.ChangedContents():\n            for ban_rule in _BANNED_IOS_EGTEST_FUNCTIONS:\n                CheckForMatch(f, line_num, line, ban_rule)\n\n    file_filter = lambda f: f.LocalPath().endswith(('.cc', '.mm', '.h'))\n    for f in input_api.AffectedFiles(file_filter=file_filter):\n        for line_num, line in f.ChangedContents():\n            for ban_rule in _BANNED_CPP_FUNCTIONS:\n                CheckForMatch(f, line_num, line, ban_rule)\n\n    # As of 05/2024, iOS fully migrated ConsentLevel::kSync to kSignin, and\n    # Android is in the process of preventing new users from entering kSync.\n    # So the warning is restricted to those platforms.\n    ios_pattern = input_api.re.compile('(^|[\\W_])ios[\\W_]')\n    file_filter = lambda f: (f.LocalPath().endswith(('.cc', '.mm', '.h')) and\n                             ('android' in f.LocalPath() or\n                             # Simply checking for an 'ios' substring would\n                             # catch unrelated cases, use a regex.\n                              ios_pattern.search(f.LocalPath())))\n    for f in input_api.AffectedFiles(file_filter=file_filter):\n        for line_num, line in f.ChangedContents():\n            for ban_rule in _DEPRECATED_SYNC_CONSENT_CPP_FUNCTIONS:\n                CheckForMatch(f, line_num, line, ban_rule)\n\n    file_filter = lambda f: f.LocalPath().endswith(('.java'))\n    for f in input_api.AffectedFiles(file_filter=file_filter):\n        for line_num, line in f.ChangedContents():\n            for ban_rule in _DEPRECATED_SYNC_CONSENT_JAVA_FUNCTIONS:\n                CheckForMatch(f, line_num, line, ban_rule)\n\n    file_filter = lambda f: f.LocalPath().endswith(('.mojom'))\n    for f in input_api.AffectedFiles(file_filter=file_filter):\n        for line_num, line in f.ChangedContents():\n            for ban_rule in _BANNED_MOJOM_PATTERNS:\n                CheckForMatch(f, line_num, line, ban_rule)\n\n\n    result = []\n    if (warnings):\n        result.append(\n            output_api.PresubmitPromptWarning('Banned functions were used.\\n' +\n                                              '\\n'.join(warnings)))\n    if (errors):\n        result.append(\n            output_api.PresubmitError('Banned functions were used.\\n' +\n                                      '\\n'.join(errors)))\n    return result\n\ndef _CheckAndroidNoBannedImports(input_api, output_api):\n    \"\"\"Make sure that banned java imports are not used.\"\"\"\n    errors = []\n\n    file_filter = lambda f: f.LocalPath().endswith(('.java'))\n    for f in input_api.AffectedFiles(file_filter=file_filter):\n        for line_num, line in f.ChangedContents():\n            for ban_rule in _BANNED_JAVA_IMPORTS:\n                # Consider merging this into the above function. There is no\n                # real difference anymore other than helping with a little\n                # bit of boilerplate text. Doing so means things like\n                # `treat_as_error` will also be uniformly handled.\n                problems = _GetMessageForMatchingType(input_api, f, line_num,\n                                                      line, ban_rule)\n                if problems:\n                    errors.extend(problems)\n    result = []\n    if (errors):\n        result.append(\n            output_api.PresubmitError('Banned imports were used.\\n' +\n                                      '\\n'.join(errors)))\n    return result\n\n\ndef CheckNoPragmaOnce(input_api, output_api):\n    \"\"\"Make sure that banned functions are not used.\"\"\"\n    files = []\n    pattern = input_api.re.compile(r'^#pragma\\s+once', input_api.re.MULTILINE)\n    for f in input_api.AffectedSourceFiles(input_api.FilterSourceFile):\n        if not f.LocalPath().endswith('.h'):\n            continue\n        if f.LocalPath().endswith('com_imported_mstscax.h'):\n            continue\n        contents = input_api.ReadFile(f)\n        if pattern.search(contents):\n            files.append(f)\n\n    if files:\n        return [\n            output_api.PresubmitError(\n                'Do not use #pragma once in header files.\\n'\n                'See http://www.chromium.org/developers/coding-style#TOC-File-headers',\n                files)\n        ]\n    return []\n\n\ndef CheckNoTrinaryTrueFalse(input_api, output_api):\n    \"\"\"Checks to make sure we don't introduce use of foo ? true : false.\"\"\"\n    problems = []\n    pattern = input_api.re.compile(r'\\?\\s*(true|false)\\s*:\\s*(true|false)')\n    for f in input_api.AffectedFiles():\n        if not f.LocalPath().endswith(('.cc', '.h', '.inl', '.m', '.mm')):\n            continue\n\n        for line_num, line in f.ChangedContents():\n            if pattern.match(line):\n                problems.append('    %s:%d' % (f.LocalPath(), line_num))\n\n    if not problems:\n        return []\n    return [\n        output_api.PresubmitPromptWarning(\n            'Please consider avoiding the \"? true : false\" pattern if possible.\\n'\n            + '\\n'.join(problems))\n    ]\n\n\ndef CheckUnwantedDependencies(input_api, output_api):\n    \"\"\"Runs checkdeps on #include and import statements added in this\n    change. Breaking - rules is an error, breaking ! rules is a\n    warning.\n    \"\"\"\n    # Return early if no relevant file types were modified.\n    for f in input_api.AffectedFiles():\n        path = f.LocalPath()\n        if (_IsCPlusPlusFile(input_api, path) or _IsProtoFile(input_api, path)\n                or _IsJavaFile(input_api, path)):\n            break\n    else:\n        return []\n\n    import sys\n    # We need to wait until we have an input_api object and use this\n    # roundabout construct to import checkdeps because this file is\n    # eval-ed and thus doesn't have __file__.\n    original_sys_path = sys.path\n    try:\n        sys.path = sys.path + [\n            input_api.os_path.join(input_api.PresubmitLocalPath(),\n                                   'buildtools', 'checkdeps')\n        ]\n        import checkdeps\n        from rules import Rule\n    finally:\n        # Restore sys.path to what it was before.\n        sys.path = original_sys_path\n\n    added_includes = []\n    added_imports = []\n    added_java_imports = []\n    for f in input_api.AffectedFiles():\n        if _IsCPlusPlusFile(input_api, f.LocalPath()):\n            changed_lines = [line for _, line in f.ChangedContents()]\n            added_includes.append([f.AbsoluteLocalPath(), changed_lines])\n        elif _IsProtoFile(input_api, f.LocalPath()):\n            changed_lines = [line for _, line in f.ChangedContents()]\n            added_imports.append([f.AbsoluteLocalPath(), changed_lines])\n        elif _IsJavaFile(input_api, f.LocalPath()):\n            changed_lines = [line for _, line in f.ChangedContents()]\n            added_java_imports.append([f.AbsoluteLocalPath(), changed_lines])\n\n    deps_checker = checkdeps.DepsChecker(input_api.PresubmitLocalPath())\n\n    error_descriptions = []\n    warning_descriptions = []\n    error_subjects = set()\n    warning_subjects = set()\n\n    for path, rule_type, rule_description in deps_checker.CheckAddedCppIncludes(\n            added_includes):\n        path = input_api.os_path.relpath(path, input_api.PresubmitLocalPath())\n        description_with_path = '%s\\n    %s' % (path, rule_description)\n        if rule_type == Rule.DISALLOW:\n            error_descriptions.append(description_with_path)\n            error_subjects.add(\"#includes\")\n        else:\n            warning_descriptions.append(description_with_path)\n            warning_subjects.add(\"#includes\")\n\n    for path, rule_type, rule_description in deps_checker.CheckAddedProtoImports(\n            added_imports):\n        path = input_api.os_path.relpath(path, input_api.PresubmitLocalPath())\n        description_with_path = '%s\\n    %s' % (path, rule_description)\n        if rule_type == Rule.DISALLOW:\n            error_descriptions.append(description_with_path)\n            error_subjects.add(\"imports\")\n        else:\n            warning_descriptions.append(description_with_path)\n            warning_subjects.add(\"imports\")\n\n    for path, rule_type, rule_description in deps_checker.CheckAddedJavaImports(\n            added_java_imports, _JAVA_MULTIPLE_DEFINITION_EXCLUDED_PATHS):\n        path = input_api.os_path.relpath(path, input_api.PresubmitLocalPath())\n        description_with_path = '%s\\n    %s' % (path, rule_description)\n        if rule_type == Rule.DISALLOW:\n            error_descriptions.append(description_with_path)\n            error_subjects.add(\"imports\")\n        else:\n            warning_descriptions.append(description_with_path)\n            warning_subjects.add(\"imports\")\n\n    results = []\n    if error_descriptions:\n        results.append(\n            output_api.PresubmitError(\n                'You added one or more %s that violate checkdeps rules.' %\n                \" and \".join(error_subjects), error_descriptions))\n    if warning_descriptions:\n        results.append(\n            output_api.PresubmitPromptOrNotify(\n                'You added one or more %s of files that are temporarily\\n'\n                'allowed but being removed. Can you avoid introducing the\\n'\n                '%s? See relevant DEPS file(s) for details and contacts.' %\n                (\" and \".join(warning_subjects), \"/\".join(warning_subjects)),\n                warning_descriptions))\n    return results\n\n\ndef CheckFilePermissions(input_api, output_api):\n    \"\"\"Check that all files have their permissions properly set.\"\"\"\n    if input_api.platform == 'win32':\n        return []\n    checkperms_tool = input_api.os_path.join(input_api.PresubmitLocalPath(),\n                                             'tools', 'checkperms',\n                                             'checkperms.py')\n    args = [\n        input_api.python3_executable, checkperms_tool, '--root',\n        input_api.change.RepositoryRoot()\n    ]\n    with input_api.CreateTemporaryFile() as file_list:\n        for f in input_api.AffectedFiles():\n            # checkperms.py file/directory arguments must be relative to the\n            # repository.\n            file_list.write((f.LocalPath() + '\\n').encode('utf8'))\n        file_list.close()\n        args += ['--file-list', file_list.name]\n        try:\n            input_api.subprocess.check_output(args)\n            return []\n        except input_api.subprocess.CalledProcessError as error:\n            return [\n                output_api.PresubmitError('checkperms.py failed:',\n                                          long_text=error.output.decode(\n                                              'utf-8', 'ignore'))\n            ]\n\n\ndef CheckNoAuraWindowPropertyHInHeaders(input_api, output_api):\n    \"\"\"Makes sure we don't include ui/aura/window_property.h\n    in header files.\n    \"\"\"\n    pattern = input_api.re.compile(r'^#include\\s*\"ui/aura/window_property.h\"')\n    errors = []\n    for f in input_api.AffectedFiles():\n        if not f.LocalPath().endswith('.h'):\n            continue\n        for line_num, line in f.ChangedContents():\n            if pattern.match(line):\n                errors.append('    %s:%d' % (f.LocalPath(), line_num))\n\n    results = []\n    if errors:\n        results.append(\n            output_api.PresubmitError(\n                'Header files should not include ui/aura/window_property.h',\n                errors))\n    return results\n\n\ndef CheckNoInternalHeapIncludes(input_api, output_api):\n    \"\"\"Makes sure we don't include any headers from\n    third_party/blink/renderer/platform/heap/impl or\n    third_party/blink/renderer/platform/heap/v8_wrapper from files outside of\n    third_party/blink/renderer/platform/heap\n    \"\"\"\n    impl_pattern = input_api.re.compile(\n        r'^\\s*#include\\s*\"third_party/blink/renderer/platform/heap/impl/.*\"')\n    v8_wrapper_pattern = input_api.re.compile(\n        r'^\\s*#include\\s*\"third_party/blink/renderer/platform/heap/v8_wrapper/.*\"'\n    )\n    # Consistently use / as path separator to simplify the writing of regex\n    # expressions.\n    file_filter = lambda f: not input_api.re.match(\n        r\"^third_party/blink/renderer/platform/heap/.*\",\n        f.LocalPath().replace(input_api.os_path.sep, '/'))\n    errors = []\n\n    for f in input_api.AffectedFiles(file_filter=file_filter):\n        for line_num, line in f.ChangedContents():\n            if impl_pattern.match(line) or v8_wrapper_pattern.match(line):\n                errors.append('    %s:%d' % (f.LocalPath(), line_num))\n\n    results = []\n    if errors:\n        results.append(\n            output_api.PresubmitError(\n                'Do not include files from third_party/blink/renderer/platform/heap/impl'\n                ' or third_party/blink/renderer/platform/heap/v8_wrapper. Use the '\n                'relevant counterparts from third_party/blink/renderer/platform/heap',\n                errors))\n    return results\n\n\ndef _CheckForVersionControlConflictsInFile(input_api, f):\n    pattern = input_api.re.compile('^(?:<<<<<<<|>>>>>>>) |^=======$')\n    errors = []\n    for line_num, line in f.ChangedContents():\n        if f.LocalPath().endswith(('.md', '.rst', '.txt')):\n            # First-level headers in markdown look a lot like version control\n            # conflict markers. http://daringfireball.net/projects/markdown/basics\n            continue\n        if pattern.match(line):\n            errors.append('    %s:%d %s' % (f.LocalPath(), line_num, line))\n    return errors\n\n\ndef CheckForVersionControlConflicts(input_api, output_api):\n    \"\"\"Usually this is not intentional and will cause a compile failure.\"\"\"\n    errors = []\n    for f in input_api.AffectedFiles():\n        errors.extend(_CheckForVersionControlConflictsInFile(input_api, f))\n\n    results = []\n    if errors:\n        results.append(\n            output_api.PresubmitError(\n                'Version control conflict markers found, please resolve.',\n                errors))\n    return results\n\n\ndef CheckGoogleSupportAnswerUrlOnUpload(input_api, output_api):\n    pattern = input_api.re.compile('support\\.google\\.com\\/chrome.*/answer')\n    errors = []\n    for f in input_api.AffectedFiles():\n        for line_num, line in f.ChangedContents():\n            if pattern.search(line):\n                errors.append('    %s:%d %s' % (f.LocalPath(), line_num, line))\n\n    results = []\n    if errors:\n        results.append(\n            output_api.PresubmitPromptWarning(\n                'Found Google support URL addressed by answer number. Please replace '\n                'with a p= identifier instead. See crbug.com/679462\\n',\n                errors))\n    return results\n\n\ndef CheckHardcodedGoogleHostsInLowerLayers(input_api, output_api):\n    def FilterFile(affected_file):\n        \"\"\"Filter function for use with input_api.AffectedSourceFiles,\n        below.  This filters out everything except non-test files from\n        top-level directories that generally speaking should not hard-code\n        service URLs (e.g. src/android_webview/, src/content/ and others).\n        \"\"\"\n        return input_api.FilterSourceFile(\n            affected_file,\n            files_to_check=[r'^(android_webview|base|content|net)/.*'],\n            files_to_skip=(_EXCLUDED_PATHS + _TEST_CODE_EXCLUDED_PATHS +\n                           input_api.DEFAULT_FILES_TO_SKIP))\n\n    base_pattern = ('\"[^\"]*(google|googleapis|googlezip|googledrive|appspot)'\n                    '\\.(com|net)[^\"]*\"')\n    comment_pattern = input_api.re.compile('//.*%s' % base_pattern)\n    pattern = input_api.re.compile(base_pattern)\n    problems = []  # items are (filename, line_number, line)\n    for f in input_api.AffectedSourceFiles(FilterFile):\n        for line_num, line in f.ChangedContents():\n            if not comment_pattern.search(line) and pattern.search(line):\n                problems.append((f.LocalPath(), line_num, line))\n\n    if problems:\n        return [\n            output_api.PresubmitPromptOrNotify(\n                'Most layers below src/chrome/ should not hardcode service URLs.\\n'\n                'Are you sure this is correct?', [\n                    '  %s:%d:  %s' % (problem[0], problem[1], problem[2])\n                    for problem in problems\n                ])\n        ]\n    else:\n        return []\n\n\ndef CheckChromeOsSyncedPrefRegistration(input_api, output_api):\n    \"\"\"Warns if Chrome OS C++ files register syncable prefs as browser prefs.\"\"\"\n\n    def FileFilter(affected_file):\n        \"\"\"Includes directories known to be Chrome OS only.\"\"\"\n        return input_api.FilterSourceFile(\n            affected_file,\n            files_to_check=(\n                '^ash/',\n                '^chromeos/',  # Top-level src/chromeos.\n                '.*/chromeos/',  # Any path component.\n                '^components/arc',\n                '^components/exo'),\n            files_to_skip=(input_api.DEFAULT_FILES_TO_SKIP))\n\n    prefs = []\n    priority_prefs = []\n    for f in input_api.AffectedFiles(file_filter=FileFilter):\n        for line_num, line in f.ChangedContents():\n            if input_api.re.search('PrefRegistrySyncable::SYNCABLE_PREF',\n                                   line):\n                prefs.append('    %s:%d:' % (f.LocalPath(), line_num))\n                prefs.append('      %s' % line)\n            if input_api.re.search(\n                    'PrefRegistrySyncable::SYNCABLE_PRIORITY_PREF', line):\n                priority_prefs.append('    %s:%d' % (f.LocalPath(), line_num))\n                priority_prefs.append('      %s' % line)\n\n    results = []\n    if (prefs):\n        results.append(\n            output_api.PresubmitPromptWarning(\n                'Preferences were registered as SYNCABLE_PREF and will be controlled '\n                'by browser sync settings. If these prefs should be controlled by OS '\n                'sync settings use SYNCABLE_OS_PREF instead.\\n' +\n                '\\n'.join(prefs)))\n    if (priority_prefs):\n        results.append(\n            output_api.PresubmitPromptWarning(\n                'Preferences were registered as SYNCABLE_PRIORITY_PREF and will be '\n                'controlled by browser sync settings. If these prefs should be '\n                'controlled by OS sync settings use SYNCABLE_OS_PRIORITY_PREF '\n                'instead.\\n' + '\\n'.join(prefs)))\n    return results\n\n\ndef CheckNoAbbreviationInPngFileName(input_api, output_api):\n    \"\"\"Makes sure there are no abbreviations in the name of PNG files.\n    The native_client_sdk directory is excluded because it has auto-generated PNG\n    files for documentation.\n    \"\"\"\n    errors = []\n    files_to_check = [r'.*\\.png$']\n    files_to_skip = [r'^native_client_sdk/',\n                     r'^services/test/',\n                     r'^third_party/blink/web_tests/',\n                    ]\n    file_filter = lambda f: input_api.FilterSourceFile(\n        f, files_to_check=files_to_check, files_to_skip=files_to_skip)\n    abbreviation = input_api.re.compile('.+_[a-z]\\.png|.+_[a-z]_.*\\.png')\n    for f in input_api.AffectedFiles(include_deletes=False,\n                                     file_filter=file_filter):\n        file_name = input_api.os_path.split(f.LocalPath())[1]\n        if abbreviation.search(file_name):\n            errors.append('    %s' % f.LocalPath())\n\n    results = []\n    if errors:\n        results.append(\n            output_api.PresubmitError(\n                'The name of PNG files should not have abbreviations. \\n'\n                'Use _hover.png, _center.png, instead of _h.png, _c.png.\\n'\n                'Contact oshima@chromium.org if you have questions.', errors))\n    return results\n\ndef CheckNoProductIconsAddedToPublicRepo(input_api, output_api):\n    \"\"\"Heuristically identifies product icons based on their file name and reminds\n    contributors not to add them to the Chromium repository.\n    \"\"\"\n    errors = []\n    files_to_check = [r'.*google.*\\.png$|.*google.*\\.svg$|.*google.*\\.icon$']\n    file_filter = lambda f: input_api.FilterSourceFile(\n        f, files_to_check=files_to_check)\n    for f in input_api.AffectedFiles(include_deletes=False,\n                                     file_filter=file_filter):\n        errors.append('    %s' % f.LocalPath())\n\n    results = []\n    if errors:\n        # Give warnings instead of errors on presubmit --all and presubmit\n        # --files.\n        message_type = (output_api.PresubmitNotifyResult if input_api.no_diffs\n                        else output_api.PresubmitError)\n        results.append(\n            message_type(\n                'Trademarked images should not be added to the public repo. '\n                'See crbug.com/944754', errors))\n    return results\n\n\ndef _ExtractAddRulesFromParsedDeps(parsed_deps):\n    \"\"\"Extract the rules that add dependencies from a parsed DEPS file.\n\n    Args:\n      parsed_deps: the locals dictionary from evaluating the DEPS file.\"\"\"\n    add_rules = set()\n    add_rules.update([\n        rule[1:] for rule in parsed_deps.get('include_rules', [])\n        if rule.startswith('+') or rule.startswith('!')\n    ])\n    for _, rules in parsed_deps.get('specific_include_rules', {}).items():\n        add_rules.update([\n            rule[1:] for rule in rules\n            if rule.startswith('+') or rule.startswith('!')\n        ])\n    return add_rules\n\n\ndef _ParseDeps(contents):\n    \"\"\"Simple helper for parsing DEPS files.\"\"\"\n\n    # Stubs for handling special syntax in the root DEPS file.\n    class _VarImpl:\n        def __init__(self, local_scope):\n            self._local_scope = local_scope\n\n        def Lookup(self, var_name):\n            \"\"\"Implements the Var syntax.\"\"\"\n            try:\n                return self._local_scope['vars'][var_name]\n            except KeyError:\n                raise Exception('Var is not defined: %s' % var_name)\n\n    local_scope = {}\n    global_scope = {\n        'Var': _VarImpl(local_scope).Lookup,\n        'Str': str,\n    }\n\n    exec(contents, global_scope, local_scope)\n    return local_scope\n\n\ndef _FindAllDepsFilesForSubpath(input_api, subpath):\n    ret = []\n    while subpath:\n        cur = input_api.os_path.join(input_api.change.RepositoryRoot(), subpath, 'DEPS')\n        if input_api.os_path.isfile(cur):\n            ret.append(cur)\n        subpath = input_api.os_path.dirname(subpath)\n    return ret\n\n\ndef _FindAddedDepsThatRequireReview(input_api, depended_on_paths):\n    \"\"\"Filters to those whose DEPS set new_usages_require_review=True\"\"\"\n    ret = set()\n    cache = {}\n    for target_path in depended_on_paths:\n        for subpath in _FindAllDepsFilesForSubpath(input_api, target_path):\n            config = cache.get(subpath)\n            if config is None:\n                config = _ParseDeps(input_api.ReadFile(subpath))\n                cache[subpath] = config\n            if config.get('new_usages_require_review'):\n                ret.add(target_path)\n                break\n    return ret\n\n\ndef _CalculateAddedDeps(os_path, old_contents, new_contents):\n    \"\"\"Helper method for CheckAddedDepsHaveTargetApprovals. Returns\n    a set of DEPS entries that we should look up.\n\n    For a directory (rather than a specific filename) we fake a path to\n    a specific filename by adding /DEPS. This is chosen as a file that\n    will seldom or never be subject to per-file include_rules.\n    \"\"\"\n    # We ignore deps entries on auto-generated directories.\n    AUTO_GENERATED_DIRS = ['grit', 'jni']\n\n    old_deps = _ExtractAddRulesFromParsedDeps(_ParseDeps(old_contents))\n    new_deps = _ExtractAddRulesFromParsedDeps(_ParseDeps(new_contents))\n\n    added_deps = new_deps.difference(old_deps)\n\n    results = set()\n    for added_dep in added_deps:\n        if added_dep.split('/')[0] in AUTO_GENERATED_DIRS:\n            continue\n        # Assume that a rule that ends in .h is a rule for a specific file.\n        if added_dep.endswith('.h'):\n            results.add(added_dep)\n        else:\n            results.add(os_path.join(added_dep, 'DEPS'))\n    return results\n\ndef CheckForNewDEPSDownloadFromGoogleStorageHooks(input_api, output_api):\n    \"\"\"Checks that there are no new download_from_google_storage hooks\"\"\"\n    for f in input_api.AffectedFiles(include_deletes=False):\n        if f.LocalPath() == 'DEPS':\n            old_hooks = _ParseDeps('\\n'.join(f.OldContents()))['hooks']\n            new_hooks = _ParseDeps('\\n'.join(f.NewContents()))['hooks']\n            old_name_to_hook = {hook['name']: hook for hook in old_hooks}\n            new_name_to_hook = {hook['name']: hook for hook in new_hooks}\n            added_hook_names = set(new_name_to_hook.keys()) - set(\n                old_name_to_hook.keys())\n            if not added_hook_names:\n                return []\n            new_download_from_google_storage_hooks = []\n            for new_hook in added_hook_names:\n                hook = new_name_to_hook[new_hook]\n                action_cmd = hook['action']\n                if any('download_from_google_storage' in arg\n                        for arg in action_cmd):\n                    new_download_from_google_storage_hooks.append(new_hook)\n            if new_download_from_google_storage_hooks:\n                return [\n                    output_api.PresubmitError(\n                        'Please do not add new download_from_google_storage '\n                        'hooks. Instead, add a `gcs` dep_type entry to `deps`. '\n                        'See https://chromium.googlesource.com/chromium/src.git'\n                        '/+/refs/heads/main/docs/gcs_dependencies.md for more '\n                        'info. Added hooks:',\n                        items=new_download_from_google_storage_hooks)\n                ]\n    return []\n\n\ndef CheckEachPerfettoTestDataFileHasDepsEntry(input_api, output_api):\n    test_data_filter = lambda f: input_api.FilterSourceFile(\n        f, files_to_check=[r'^base/tracing/test/data_sha256/.*\\.sha256'])\n    if not any(input_api.AffectedFiles(file_filter=test_data_filter)):\n        return []\n\n    # Find DEPS entry\n    deps_entry = []\n    old_deps_entry = []\n    for f in input_api.AffectedFiles(include_deletes=False):\n        if f.LocalPath() == 'DEPS':\n            new_deps = _ParseDeps('\\n'.join(f.NewContents()))['deps']\n            deps_entry = new_deps['src/base/tracing/test/data']\n            old_deps = _ParseDeps('\\n'.join(f.OldContents()))['deps']\n            old_deps_entry = old_deps['src/base/tracing/test/data']\n    if not deps_entry:\n        # TODO(312895063):Add back error when .sha256 files have been moved.\n        return [output_api.PresubmitError(\n            'You must update the DEPS file when you update a '\n            '.sha256 file in base/tracing/test/data_sha256'\n        )]\n\n    output = []\n    for f in input_api.AffectedFiles(file_filter=test_data_filter):\n        objects = deps_entry['objects']\n        if not f.NewContents():\n            # Deleted file so check that DEPS entry removed\n            sha256_from_file = f.OldContents()[0]\n            object_entry = next(\n                (item for item in objects if item[\"sha256sum\"] == sha256_from_file),\n                None)\n            old_entry = next(\n                (item for item in old_deps_entry['objects'] if item[\"sha256sum\"] == sha256_from_file),\n                None)\n            if object_entry:\n                # Allow renaming of objects with the same hash\n                if object_entry['object_name'] != old_entry['object_name']:\n                    continue\n                output.append(output_api.PresubmitError(\n                    'You deleted %s so you must also remove the corresponding DEPS entry.'\n                    % f.LocalPath()\n                ))\n            continue\n\n        sha256_from_file = f.NewContents()[0]\n        object_entry = next(\n            (item for item in objects if item[\"sha256sum\"] == sha256_from_file),\n            None)\n        if not object_entry:\n            output.append(output_api.PresubmitError(\n                'No corresponding DEPS entry found for %s. '\n                'Run `base/tracing/test/test_data.py get_deps --filepath %s` '\n                'to generate the DEPS entry.'\n                % (f.LocalPath(), f.LocalPath())\n            ))\n\n    if output:\n        output.append(output_api.PresubmitError(\n            'The DEPS entry for `src/base/tracing/test/data` in the DEPS file has not been '\n            'updated properly. Run `base/tracing/test/test_data.py get_all_deps` to see what '\n            'the DEPS entry should look like.'\n        ))\n    return output\n\n\ndef CheckAddedDepsHaveTargetApprovals(input_api, output_api):\n    \"\"\"When a dependency prefixed with + is added to a DEPS file, we\n    want to make sure that the change is reviewed by an OWNER of the\n    target file or directory, to avoid layering violations from being\n    introduced. This check verifies that this happens.\n    \"\"\"\n    # We rely on Gerrit's code-owners to check approvals.\n    # input_api.gerrit is always set for Chromium, but other projects\n    # might not use Gerrit.\n    if not input_api.gerrit or input_api.no_diffs:\n        return []\n    if 'PRESUBMIT_SKIP_NETWORK' in input_api.environ:\n        return []\n    try:\n        if (input_api.change.issue and\n                input_api.gerrit.IsOwnersOverrideApproved(\n                input_api.change.issue)):\n            # Skip OWNERS check when Owners-Override label is approved. This is\n            # intended for global owners, trusted bots, and on-call sheriffs.\n            # Review is still required for these changes.\n            return []\n    except Exception as e:\n        return [output_api.PresubmitPromptWarning(\n                'Failed to retrieve owner override status - %s' % str(e))]\n\n    # A set of paths (that might not exist) that are being added as DEPS\n    # (via lines like \"+foo/bar/baz\").\n    depended_on_paths = set()\n\n    # Consistently use / as path separator to simplify the writing of regex\n    # expressions.\n    file_filter = lambda f: not input_api.re.match(\n        r\"^third_party/blink/.*\",\n        f.LocalPath().replace(input_api.os_path.sep, '/'))\n    for f in input_api.AffectedFiles(include_deletes=False,\n                                     file_filter=file_filter):\n        filename = input_api.os_path.basename(f.LocalPath())\n        if filename == 'DEPS':\n            depended_on_paths.update(\n                _CalculateAddedDeps(input_api.os_path,\n                                    '\\n'.join(f.OldContents()),\n                                    '\\n'.join(f.NewContents())))\n\n    # Requiring reviews is opt-in as of https://crbug.com/365797506\n    depended_on_paths = _FindAddedDepsThatRequireReview(input_api, depended_on_paths)\n    if not depended_on_paths:\n        return []\n\n    if input_api.is_committing:\n        if input_api.tbr:\n            return [\n                output_api.PresubmitNotifyResult(\n                    '--tbr was specified, skipping OWNERS check for DEPS additions'\n                )\n            ]\n        # TODO(dcheng): Make this generate an error on dry runs if the reviewer\n        # is not added, to prevent review serialization.\n        if input_api.dry_run:\n            return [\n                output_api.PresubmitNotifyResult(\n                    'This is a dry run, skipping OWNERS check for DEPS additions'\n                )\n            ]\n        if not input_api.change.issue:\n            return [\n                output_api.PresubmitError(\n                    \"DEPS approval by OWNERS check failed: this change has \"\n                    \"no change number, so we can't check it for approvals.\")\n            ]\n        output = output_api.PresubmitError\n    else:\n        output = output_api.PresubmitNotifyResult\n\n    owner_email, reviewers = (\n        input_api.canned_checks.GetCodereviewOwnerAndReviewers(\n            input_api, None, approval_needed=input_api.is_committing))\n\n    owner_email = owner_email or input_api.change.author_email\n\n    approval_status = input_api.owners_client.GetFilesApprovalStatus(\n        depended_on_paths, reviewers.union([owner_email]), [])\n    missing_files = [\n        p for p in depended_on_paths\n        if approval_status[p] != input_api.owners_client.APPROVED\n    ]\n\n    # We strip the /DEPS part that was added by\n    # _FilesToCheckForIncomingDeps to fake a path to a file in a\n    # directory.\n    def StripDeps(path):\n        start_deps = path.rfind('/DEPS')\n        if start_deps != -1:\n            return path[:start_deps]\n        else:\n            return path\n\n    submodule_paths = set(input_api.ListSubmodules())\n    def is_from_submodules(path, submodule_paths):\n        path = input_api.os_path.normpath(path)\n        while path:\n            if path in submodule_paths:\n                return True\n\n            # All deps should be a relative path from the checkout.\n            # i.e., shouldn't start with \"/\" or \"c:\\\", for example.\n            #\n            # That said, this is to prevent an infinite loop, just in case\n            # an input dep path starts with \"/\", because\n            # os.path.dirname(\"/\") => \"/\"\n            parent = input_api.os_path.dirname(path)\n            if parent == path:\n                break\n            path = parent\n\n        return False\n\n    unapproved_dependencies = [\n        \"'+%s',\" % StripDeps(path) for path in missing_files\n        # if a newly added dep is from a submodule, it becomes trickier\n        # to get suggested owners, especially it is from a different host.\n        #\n        # skip the review enforcement for cross-repo deps.\n        if not is_from_submodules(path, submodule_paths)\n    ]\n\n    if unapproved_dependencies:\n        output_list = [\n            output(\n                'You need LGTM from owners of depends-on paths in DEPS that were '\n                'modified in this CL:\\n    %s' %\n                '\\n    '.join(sorted(unapproved_dependencies)))\n        ]\n        suggested_owners = input_api.owners_client.SuggestOwners(\n            missing_files, exclude=[owner_email])\n        output_list.append(\n            output('Suggested missing target path OWNERS:\\n    %s' %\n                   '\\n    '.join(suggested_owners or [])))\n        return output_list\n\n    return []\n\n\n# TODO: add unit tests.\ndef CheckSpamLogging(input_api, output_api):\n    file_inclusion_pattern = [r'.+%s' % _IMPLEMENTATION_EXTENSIONS]\n    files_to_skip = (\n        _EXCLUDED_PATHS + _TEST_CODE_EXCLUDED_PATHS +\n        input_api.DEFAULT_FILES_TO_SKIP + (\n            r\"^base/fuchsia/scoped_fx_logger\\.cc$\",\n            r\"^base/logging\\.h$\",\n            r\"^base/logging\\.cc$\",\n            r\"^base/task/thread_pool/task_tracker\\.cc$\",\n            r\"^chrome/app/chrome_main_delegate\\.cc$\",\n            r\"^chrome/browser/ash/arc/enterprise/cert_store/arc_cert_installer\\.cc$\",\n            r\"^chrome/browser/ash/policy/remote_commands/user_command_arc_job\\.cc$\",\n            r\"^chrome/browser/chrome_browser_main\\.cc$\",\n            r\"^chrome/browser/ui/startup/startup_browser_creator\\.cc$\",\n            r\"^chrome/browser/browser_switcher/bho/.*\",\n            r\"^chrome/browser/diagnostics/diagnostics_writer\\.cc$\",\n            r\"^chrome/chrome_elf/dll_hash/dll_hash_main\\.cc$\",\n            r\"^chrome/installer/setup/.*\",\n            # crdmg runs as a separate binary which intentionally does\n            # not depend on base logging.\n            r\"^chrome/utility/safe_browsing/mac/crdmg\\.cc$\",\n            r\"^chromecast/\",\n            r\"^components/cast\",\n            r\"^components/media_control/renderer/media_playback_options\\.cc$\",\n            r\"^components/policy/core/common/policy_logger\\.cc$\",\n            r\"^components/viz/service/display/\"\n            r\"overlay_strategy_underlay_cast\\.cc$\",\n            r\"^components/zucchini/.*\",\n            # TODO(peter): Remove exception. https://crbug.com/534537\n            r\"^content/browser/notifications/\"\n            r\"notification_event_dispatcher_impl\\.cc$\",\n            r\"^content/common/gpu/client/gl_helper_benchmark\\.cc$\",\n            r\"^courgette/courgette_minimal_tool\\.cc$\",\n            r\"^courgette/courgette_tool\\.cc$\",\n            r\"^extensions/renderer/logging_native_handler\\.cc$\",\n            r\"^fuchsia_web/common/init_logging\\.cc$\",\n            r\"^fuchsia_web/runners/common/web_component\\.cc$\",\n            r\"^fuchsia_web/shell/.*\\.cc$\",\n            r\"^headless/app/headless_shell\\.cc$\",\n            r\"^ipc/ipc_logging\\.cc$\",\n            r\"^native_client_sdk/\",\n            r\"^remoting/base/logging\\.h$\",\n            r\"^remoting/host/.*\",\n            r\"^sandbox/linux/.*\",\n            r\"^services/webnn/tflite/graph_impl_tflite\\.cc$\",\n            r\"^services/webnn/coreml/graph_impl_coreml\\.mm$\",\n            r\"^storage/browser/file_system/dump_file_system\\.cc$\",\n            r\"^testing/perf/\",\n            r\"^tools/\",\n            r\"^ui/base/resource/data_pack\\.cc$\",\n            r\"^ui/aura/bench/bench_main\\.cc$\",\n            r\"^ui/ozone/platform/cast/\",\n            r\"^ui/base/x/xwmstartupcheck/\"\n            r\"xwmstartupcheck\\.cc$\"))\n    source_file_filter = lambda x: input_api.FilterSourceFile(\n        x, files_to_check=file_inclusion_pattern, files_to_skip=files_to_skip)\n\n    log_info = set([])\n    printf = set([])\n\n    for f in input_api.AffectedSourceFiles(source_file_filter):\n        for _, line in f.ChangedContents():\n            if input_api.re.search(r\"\\bD?LOG\\s*\\(\\s*INFO\\s*\\)\", line):\n                log_info.add(f.LocalPath())\n            elif input_api.re.search(r\"\\bD?LOG_IF\\s*\\(\\s*INFO\\s*,\", line):\n                log_info.add(f.LocalPath())\n\n            if input_api.re.search(r\"\\bprintf\\(\", line):\n                printf.add(f.LocalPath())\n            elif input_api.re.search(r\"\\bfprintf\\((stdout|stderr)\", line):\n                printf.add(f.LocalPath())\n\n    if log_info:\n        return [\n            output_api.PresubmitError(\n                'These files spam the console log with LOG(INFO):',\n                items=log_info)\n        ]\n    if printf:\n        return [\n            output_api.PresubmitError(\n                'These files spam the console log with printf/fprintf:',\n                items=printf)\n        ]\n    return []\n\n\ndef CheckForAnonymousVariables(input_api, output_api):\n    \"\"\"These types are all expected to hold locks while in scope and\n    so should never be anonymous (which causes them to be immediately\n    destroyed).\"\"\"\n    they_who_must_be_named = [\n        'base::AutoLock',\n        'base::AutoReset',\n        'base::AutoUnlock',\n        'SkAutoAlphaRestore',\n        'SkAutoBitmapShaderInstall',\n        'SkAutoBlitterChoose',\n        'SkAutoBounderCommit',\n        'SkAutoCallProc',\n        'SkAutoCanvasRestore',\n        'SkAutoCommentBlock',\n        'SkAutoDescriptor',\n        'SkAutoDisableDirectionCheck',\n        'SkAutoDisableOvalCheck',\n        'SkAutoFree',\n        'SkAutoGlyphCache',\n        'SkAutoHDC',\n        'SkAutoLockColors',\n        'SkAutoLockPixels',\n        'SkAutoMalloc',\n        'SkAutoMaskFreeImage',\n        'SkAutoMutexAcquire',\n        'SkAutoPathBoundsUpdate',\n        'SkAutoPDFRelease',\n        'SkAutoRasterClipValidate',\n        'SkAutoRef',\n        'SkAutoTime',\n        'SkAutoTrace',\n        'SkAutoUnref',\n    ]\n    anonymous = r'(%s)\\s*[({]' % '|'.join(they_who_must_be_named)\n    # bad: base::AutoLock(lock.get());\n    # not bad: base::AutoLock lock(lock.get());\n    bad_pattern = input_api.re.compile(anonymous)\n    # good: new base::AutoLock(lock.get())\n    good_pattern = input_api.re.compile(r'\\bnew\\s*' + anonymous)\n    errors = []\n\n    for f in input_api.AffectedFiles():\n        if not f.LocalPath().endswith(('.cc', '.h', '.inl', '.m', '.mm')):\n            continue\n        for linenum, line in f.ChangedContents():\n            if bad_pattern.search(line) and not good_pattern.search(line):\n                errors.append('%s:%d' % (f.LocalPath(), linenum))\n\n    if errors:\n        return [\n            output_api.PresubmitError(\n                'These lines create anonymous variables that need to be named:',\n                items=errors)\n        ]\n    return []\n\n\ndef CheckUniquePtrOnUpload(input_api, output_api):\n    # Returns whether |template_str| is of the form <T, U...> for some types T\n    # and U, or is invalid due to mismatched angle bracket pairs. Assumes that\n    # |template_str| is already in the form <...>.\n    def HasMoreThanOneArgOrInvalid(template_str):\n        # Level of <...> nesting.\n        nesting = 0\n        for c in template_str:\n            if c == '<':\n                nesting += 1\n            elif c == '>':\n                nesting -= 1\n            elif c == ',' and nesting == 1:\n                return True\n        if nesting != 0:\n            # Invalid.\n            return True\n        return False\n\n    file_inclusion_pattern = [r'.+%s' % _IMPLEMENTATION_EXTENSIONS]\n    sources = lambda affected_file: input_api.FilterSourceFile(\n        affected_file,\n        files_to_skip=(_EXCLUDED_PATHS + _TEST_CODE_EXCLUDED_PATHS + input_api.\n                       DEFAULT_FILES_TO_SKIP),\n        files_to_check=file_inclusion_pattern)\n\n    # Pattern to capture a single \"<...>\" block of template arguments. It can\n    # handle linearly nested blocks, such as \"<std::vector<std::set<T>>>\", but\n    # cannot handle branching structures, such as \"<pair<set<T>,set<U>>\". The\n    # latter would likely require counting that < and > match, which is not\n    # expressible in regular languages. Should the need arise, one can introduce\n    # limited counting (matching up to a total number of nesting depth), which\n    # should cover all practical cases for already a low nesting limit.\n    template_arg_pattern = (\n        r'<[^>]*'  # Opening block of <.\n        r'>([^<]*>)?')  # Closing block of >.\n    # Prefix expressing that whatever follows is not already inside a <...>\n    # block.\n    not_inside_template_arg_pattern = r'(^|[^<,\\s]\\s*)'\n    null_construct_pattern = input_api.re.compile(\n        not_inside_template_arg_pattern + r'\\bstd::unique_ptr' +\n        template_arg_pattern + r'\\(\\)')\n\n    # Same as template_arg_pattern, but excluding type arrays, e.g., <T[]>.\n    template_arg_no_array_pattern = (\n        r'<[^>]*[^]]'  # Opening block of <.\n        r'>([^(<]*[^]]>)?')  # Closing block of >.\n    # Prefix saying that what follows is the start of an expression.\n    start_of_expr_pattern = r'(=|\\breturn|^)\\s*'\n    # Suffix saying that what follows are call parentheses with a non-empty list\n    # of arguments.\n    nonempty_arg_list_pattern = r'\\(([^)]|$)'\n    # Put the template argument into a capture group for deeper examination later.\n    return_construct_pattern = input_api.re.compile(\n        start_of_expr_pattern + r'std::unique_ptr' + '(?P<template_arg>' +\n        template_arg_no_array_pattern + ')' + nonempty_arg_list_pattern)\n\n    problems_constructor = []\n    problems_nullptr = []\n    for f in input_api.AffectedSourceFiles(sources):\n        for line_number, line in f.ChangedContents():\n            # Disallow:\n            # return std::unique_ptr<T>(foo);\n            # bar = std::unique_ptr<T>(foo);\n            # But allow:\n            # return std::unique_ptr<T[]>(foo);\n            # bar = std::unique_ptr<T[]>(foo);\n            # And also allow cases when the second template argument is present. Those\n            # cases cannot be handled by std::make_unique:\n            # return std::unique_ptr<T, U>(foo);\n            # bar = std::unique_ptr<T, U>(foo);\n            local_path = f.LocalPath()\n            return_construct_result = return_construct_pattern.search(line)\n            if return_construct_result and not HasMoreThanOneArgOrInvalid(\n                    return_construct_result.group('template_arg')):\n                problems_constructor.append(\n                    '%s:%d\\n    %s' % (local_path, line_number, line.strip()))\n            # Disallow:\n            # std::unique_ptr<T>()\n            if null_construct_pattern.search(line):\n                problems_nullptr.append(\n                    '%s:%d\\n    %s' % (local_path, line_number, line.strip()))\n\n    errors = []\n    if problems_nullptr:\n        errors.append(\n            output_api.PresubmitPromptWarning(\n                'The following files use std::unique_ptr<T>(). Use nullptr instead.',\n                problems_nullptr))\n    if problems_constructor:\n        errors.append(\n            output_api.PresubmitError(\n                'The following files use explicit std::unique_ptr constructor. '\n                'Use std::make_unique<T>() instead, or use base::WrapUnique if '\n                'std::make_unique is not an option.', problems_constructor))\n    return errors\n\n\ndef CheckUserActionUpdate(input_api, output_api):\n    \"\"\"Checks if any new user action has been added.\"\"\"\n    if any('actions.xml' == input_api.os_path.basename(f)\n           for f in input_api.LocalPaths()):\n        # If actions.xml is already included in the changelist, the PRESUBMIT\n        # for actions.xml will do a more complete presubmit check.\n        return []\n\n    file_inclusion_pattern = [r'.*\\.(cc|mm)$']\n    files_to_skip = (_EXCLUDED_PATHS + _TEST_CODE_EXCLUDED_PATHS +\n                     input_api.DEFAULT_FILES_TO_SKIP)\n    file_filter = lambda f: input_api.FilterSourceFile(\n        f, files_to_check=file_inclusion_pattern, files_to_skip=files_to_skip)\n\n    action_re = r'[^a-zA-Z]UserMetricsAction\\(\"([^\"]*)'\n    current_actions = None\n    for f in input_api.AffectedFiles(file_filter=file_filter):\n        for line_num, line in f.ChangedContents():\n            match = input_api.re.search(action_re, line)\n            if match:\n                # Loads contents in tools/metrics/actions/actions.xml to memory. It's\n                # loaded only once.\n                if not current_actions:\n                    with open('tools/metrics/actions/actions.xml',\n                              encoding='utf-8') as actions_f:\n                        current_actions = actions_f.read()\n                # Search for the matched user action name in |current_actions|.\n                for action_name in match.groups():\n                    action = 'name=\"{0}\"'.format(action_name)\n                    if action not in current_actions:\n                        return [\n                            output_api.PresubmitPromptWarning(\n                                'File %s line %d: %s is missing in '\n                                'tools/metrics/actions/actions.xml. Please run '\n                                'tools/metrics/actions/extract_actions.py to update.'\n                                % (f.LocalPath(), line_num, action_name))\n                        ]\n    return []\n\n\ndef _ImportJSONCommentEater(input_api):\n    import sys\n    sys.path = sys.path + [\n        input_api.os_path.join(input_api.PresubmitLocalPath(), 'tools',\n                               'json_comment_eater')\n    ]\n    import json_comment_eater\n    return json_comment_eater\n\n\ndef _GetJSONParseError(input_api, filename, eat_comments=True):\n    try:\n        contents = input_api.ReadFile(filename)\n        if eat_comments:\n            json_comment_eater = _ImportJSONCommentEater(input_api)\n            contents = json_comment_eater.Nom(contents)\n\n        input_api.json.loads(contents)\n    except ValueError as e:\n        return e\n    return None\n\n\ndef _GetIDLParseError(input_api, filename):\n    try:\n        contents = input_api.ReadFile(filename)\n        for i, char in enumerate(contents):\n            if not char.isascii():\n                return (\n                    'Non-ascii character \"%s\" (ord %d) found at offset %d.' %\n                    (char, ord(char), i))\n        idl_schema = input_api.os_path.join(input_api.PresubmitLocalPath(),\n                                            'tools', 'json_schema_compiler',\n                                            'idl_schema.py')\n        process = input_api.subprocess.Popen(\n            [input_api.python3_executable, idl_schema],\n            stdin=input_api.subprocess.PIPE,\n            stdout=input_api.subprocess.PIPE,\n            stderr=input_api.subprocess.PIPE,\n            universal_newlines=True)\n        (_, error) = process.communicate(input=contents)\n        return error or None\n    except ValueError as e:\n        return e\n\n\ndef CheckParseErrors(input_api, output_api):\n    \"\"\"Check that IDL and JSON files do not contain syntax errors.\"\"\"\n    actions = {\n        '.idl': _GetIDLParseError,\n        '.json': _GetJSONParseError,\n    }\n    # Most JSON files are preprocessed and support comments, but these do not.\n    json_no_comments_patterns = [\n        r'^testing/',\n    ]\n    # Only run IDL checker on files in these directories.\n    idl_included_patterns = [\n        r'^chrome/common/extensions/api/',\n        r'^extensions/common/api/',\n    ]\n\n    def get_action(affected_file):\n        filename = affected_file.LocalPath()\n        return actions.get(input_api.os_path.splitext(filename)[1])\n\n    def FilterFile(affected_file):\n        action = get_action(affected_file)\n        if not action:\n            return False\n        path = affected_file.LocalPath()\n\n        if _MatchesFile(input_api,\n                        _KNOWN_TEST_DATA_AND_INVALID_JSON_FILE_PATTERNS, path):\n            return False\n\n        if (action == _GetIDLParseError\n                and not _MatchesFile(input_api, idl_included_patterns, path)):\n            return False\n        return True\n\n    results = []\n    for affected_file in input_api.AffectedFiles(file_filter=FilterFile,\n                                                 include_deletes=False):\n        action = get_action(affected_file)\n        kwargs = {}\n        if (action == _GetJSONParseError\n                and _MatchesFile(input_api, json_no_comments_patterns,\n                                 affected_file.LocalPath())):\n            kwargs['eat_comments'] = False\n        parse_error = action(input_api, affected_file.AbsoluteLocalPath(),\n                             **kwargs)\n        if parse_error:\n            results.append(\n                output_api.PresubmitError(\n                    '%s could not be parsed: %s' %\n                    (affected_file.LocalPath(), parse_error)))\n    return results\n\n\ndef CheckJavaStyle(input_api, output_api):\n    \"\"\"Runs checkstyle on changed java files and returns errors if any exist.\"\"\"\n\n    # Return early if no java files were modified.\n    if not any(\n            _IsJavaFile(input_api, f.LocalPath())\n            for f in input_api.AffectedFiles()):\n        return []\n\n    import sys\n    original_sys_path = sys.path\n    try:\n        sys.path = sys.path + [\n            input_api.os_path.join(input_api.PresubmitLocalPath(), 'tools',\n                                   'android', 'checkstyle')\n        ]\n        import checkstyle\n    finally:\n        # Restore sys.path to what it was before.\n        sys.path = original_sys_path\n\n    return checkstyle.run_presubmit(\n        input_api,\n        output_api,\n        files_to_skip=_EXCLUDED_PATHS + input_api.DEFAULT_FILES_TO_SKIP)\n\n\ndef CheckPythonDevilInit(input_api, output_api):\n    \"\"\"Checks to make sure devil is initialized correctly in python scripts.\"\"\"\n    script_common_initialize_pattern = input_api.re.compile(\n        r'script_common\\.InitializeEnvironment\\(')\n    devil_env_config_initialize = input_api.re.compile(\n        r'devil_env\\.config\\.Initialize\\(')\n\n    errors = []\n\n    sources = lambda affected_file: input_api.FilterSourceFile(\n        affected_file,\n        files_to_skip=(_EXCLUDED_PATHS + input_api.DEFAULT_FILES_TO_SKIP + (\n            r'^build/android/devil_chromium\\.py',\n            r'^tools/bisect-builds\\.py',\n            r'^third_party/.*',\n        )),\n        files_to_check=[r'.*\\.py$'])\n\n    for f in input_api.AffectedSourceFiles(sources):\n        for line_num, line in f.ChangedContents():\n            if (script_common_initialize_pattern.search(line)\n                    or devil_env_config_initialize.search(line)):\n                errors.append(\"%s:%d\" % (f.LocalPath(), line_num))\n\n    results = []\n\n    if errors:\n        results.append(\n            output_api.PresubmitError(\n                'Devil initialization should always be done using '\n                'devil_chromium.Initialize() in the chromium project, to use better '\n                'defaults for dependencies (ex. up-to-date version of adb).',\n                errors))\n\n    return results\n\n\ndef _MatchesFile(input_api, patterns, path):\n    # Consistently use / as path separator to simplify the writing of regex\n    # expressions.\n    path = path.replace(input_api.os_path.sep, '/')\n    for pattern in patterns:\n        if input_api.re.search(pattern, path):\n            return True\n    return False\n\n\ndef _ChangeHasSecurityReviewer(input_api, owners_file):\n    \"\"\"Returns True iff the CL has a reviewer from SECURITY_OWNERS.\n\n    Args:\n        input_api: The presubmit input API.\n        owners_file: OWNERS file with required reviewers. Typically, this is\n        something like ipc/SECURITY_OWNERS.\n\n    Note: if the presubmit is running for commit rather than for upload, this\n    only returns True if a security reviewer has also approved the CL.\n    \"\"\"\n    # Owners-Override should bypass all additional OWNERS enforcement checks.\n    # A CR+1 vote will still be required to land this change.\n    if (input_api.change.issue and input_api.gerrit.IsOwnersOverrideApproved(\n            input_api.change.issue)):\n        return True\n\n    owner_email, reviewers = (\n        input_api.canned_checks.GetCodereviewOwnerAndReviewers(\n            input_api,\n            None,\n            approval_needed=input_api.is_committing and not input_api.dry_run))\n\n    security_owners = input_api.owners_client.ListOwners(owners_file)\n    return any(owner in reviewers for owner in security_owners)\n\n\n@dataclass\nclass _SecurityProblemWithItems:\n    problem: str\n    items: Sequence[str]\n\n\n@dataclass\nclass _MissingSecurityOwnersResult:\n    owners_file_problems: Sequence[_SecurityProblemWithItems]\n    has_security_sensitive_files: bool\n    missing_reviewer_problem: Optional[_SecurityProblemWithItems]\n\n\ndef _FindMissingSecurityOwners(input_api,\n                               output_api,\n                               file_patterns: Sequence[str],\n                               excluded_patterns: Sequence[str],\n                               required_owners_file: str,\n                               custom_rule_function: Optional[Callable] = None\n                               ) -> _MissingSecurityOwnersResult:\n    \"\"\"Find OWNERS files missing per-file rules for security-sensitive files.\n\n    Args:\n        input_api: the PRESUBMIT input API object.\n        output_api: the PRESUBMIT output API object.\n        file_patterns: basename patterns that require a corresponding per-file\n            security restriction.\n        excluded_patterns: path patterns that should be exempted from\n            requiring a security restriction.\n        required_owners_file: path to the required OWNERS file, e.g.\n            ipc/SECURITY_OWNERS\n        cc_alias: If not None, email that will be CCed automatically if the\n            change contains security-sensitive files, as determined by\n            `file_patterns` and `excluded_patterns`.\n        custom_rule_function: If not None, will be called with `input_api` and\n            the current file under consideration. Returning True will add an\n            exact match per-file rule check for the current file.\n    \"\"\"\n\n    # `to_check` is a mapping of an OWNERS file path to Patterns.\n    #\n    # Patterns is a dictionary mapping glob patterns (suitable for use in\n    # per-file rules) to a PatternEntry.\n    #\n    # PatternEntry is a dictionary with two keys:\n    # - 'files': the files that are matched by this pattern\n    # - 'rules': the per-file rules needed for this pattern\n    #\n    # For example, if we expect OWNERS file to contain rules for *.mojom and\n    # *_struct_traits*.*, Patterns might look like this:\n    # {\n    #   '*.mojom': {\n    #     'files': ...,\n    #     'rules': [\n    #       'per-file *.mojom=set noparent',\n    #       'per-file *.mojom=file://ipc/SECURITY_OWNERS',\n    #     ],\n    #   },\n    #   '*_struct_traits*.*': {\n    #     'files': ...,\n    #     'rules': [\n    #       'per-file *_struct_traits*.*=set noparent',\n    #       'per-file *_struct_traits*.*=file://ipc/SECURITY_OWNERS',\n    #     ],\n    #   },\n    # }\n    to_check = {}\n    files_to_review = []\n\n    def AddPatternToCheck(file, pattern):\n        owners_file = input_api.os_path.join(\n            input_api.os_path.dirname(file.LocalPath()), 'OWNERS')\n        if owners_file not in to_check:\n            to_check[owners_file] = {}\n        if pattern not in to_check[owners_file]:\n            to_check[owners_file][pattern] = {\n                'files': [],\n                'rules': [\n                    f'per-file {pattern}=set noparent',\n                    f'per-file {pattern}=file://{required_owners_file}',\n                ]\n            }\n        to_check[owners_file][pattern]['files'].append(file.LocalPath())\n        files_to_review.append(file.LocalPath())\n\n    # Only enforce security OWNERS rules for a directory if that directory has a\n    # file that matches `file_patterns`. For example, if a directory only\n    # contains *.mojom files and no *_messages*.h files, the check should only\n    # ensure that rules for *.mojom files are present.\n    for file in input_api.AffectedFiles(include_deletes=False):\n        file_basename = input_api.os_path.basename(file.LocalPath())\n        if custom_rule_function is not None and custom_rule_function(\n                input_api, file):\n            AddPatternToCheck(file, file_basename)\n            continue\n\n        if any(\n                input_api.fnmatch.fnmatch(file.LocalPath(), pattern)\n                for pattern in excluded_patterns):\n            continue\n\n        for pattern in file_patterns:\n            # Unlike `excluded_patterns`, `file_patterns` is checked only against the\n            # file's basename.\n            if input_api.fnmatch.fnmatch(file_basename, pattern):\n                AddPatternToCheck(file, pattern)\n                break\n\n    has_security_sensitive_files = bool(to_check)\n\n    # Check if any newly added lines in OWNERS files intersect with required\n    # per-file OWNERS lines. If so, ensure that a security reviewer is included.\n    # This is a hack, but is needed because the OWNERS check (by design) ignores\n    # new OWNERS entries; otherwise, a non-owner could add someone as a new\n    # OWNER and have that newly-added OWNER self-approve their own addition.\n    newly_covered_files = []\n    for file in input_api.AffectedFiles(include_deletes=False):\n        if not file.LocalPath() in to_check:\n            continue\n        for _, line in file.ChangedContents():\n            for _, entry in to_check[file.LocalPath()].items():\n                if line in entry['rules']:\n                    newly_covered_files.extend(entry['files'])\n\n    missing_reviewer_problems = None\n    if newly_covered_files and not _ChangeHasSecurityReviewer(\n            input_api, required_owners_file):\n        missing_reviewer_problems = _SecurityProblemWithItems(\n            f'Review from an owner in {required_owners_file} is required for '\n            'the following newly-added files:',\n            [f'{file}' for file in sorted(set(newly_covered_files))])\n\n    # Go through the OWNERS files to check, filtering out rules that are already\n    # present in that OWNERS file.\n    for owners_file, patterns in to_check.items():\n        try:\n            lines = set(\n                input_api.ReadFile(\n                    input_api.os_path.join(input_api.change.RepositoryRoot(),\n                                           owners_file)).splitlines())\n            for entry in patterns.values():\n                entry['rules'] = [\n                    rule for rule in entry['rules'] if rule not in lines\n                ]\n        except IOError:\n            # No OWNERS file, so all the rules are definitely missing.\n            continue\n\n    # All the remaining lines weren't found in OWNERS files, so emit an error.\n    owners_file_problems = []\n\n    for owners_file, patterns in to_check.items():\n        missing_lines = []\n        files = []\n        for _, entry in patterns.items():\n            files.extend(entry['files'])\n            missing_lines.extend(entry['rules'])\n        if missing_lines:\n            joined_missing_lines = '\\n'.join(line for line in missing_lines)\n            owners_file_problems.append(\n                _SecurityProblemWithItems(\n                    'Found missing OWNERS lines for security-sensitive files. '\n                    f'Please add the following lines to {owners_file}:\\n'\n                    f'{joined_missing_lines}\\n\\nTo ensure security review for:',\n                    files))\n\n    return _MissingSecurityOwnersResult(owners_file_problems,\n                                        has_security_sensitive_files,\n                                        missing_reviewer_problems)\n\n\ndef _CheckChangeForIpcSecurityOwners(input_api, output_api):\n    # Whether or not a file affects IPC is (mostly) determined by a simple list\n    # of filename patterns.\n    file_patterns = [\n        # Legacy IPC:\n        '*_messages.cc',\n        '*_messages*.h',\n        '*_param_traits*.*',\n        # Mojo IPC:\n        '*.mojom',\n        '*_mojom_traits*.*',\n        '*_type_converter*.*',\n        # Android native IPC:\n        '*.aidl',\n    ]\n\n    excluded_patterns = [\n        # These third_party directories do not contain IPCs, but contain files\n        # matching the above patterns, which trigger false positives.\n        'third_party/crashpad/*',\n        'third_party/blink/renderer/platform/bindings/*',\n        'third_party/protobuf/benchmarks/python/*',\n        'third_party/win_build_output/*',\n        # Enum-only mojoms used for web metrics, so no security review needed.\n        'third_party/blink/public/mojom/use_counter/metrics/*',\n        # These files are just used to communicate between class loaders running\n        # in the same process.\n        'weblayer/browser/java/org/chromium/weblayer_private/interfaces/*',\n        'weblayer/browser/java/org/chromium/weblayer_private/test_interfaces/*',\n    ]\n\n    def IsMojoServiceManifestFile(input_api, file):\n        manifest_pattern = input_api.re.compile('manifests?\\.(cc|h)$')\n        test_manifest_pattern = input_api.re.compile('test_manifests?\\.(cc|h)')\n        if not manifest_pattern.search(file.LocalPath()):\n            return False\n\n        if test_manifest_pattern.search(file.LocalPath()):\n            return False\n\n        # All actual service manifest files should contain at least one\n        # qualified reference to service_manager::Manifest.\n        return any('service_manager::Manifest' in line\n                   for line in file.NewContents())\n\n    return _FindMissingSecurityOwners(\n        input_api,\n        output_api,\n        file_patterns,\n        excluded_patterns,\n        'ipc/SECURITY_OWNERS',\n        custom_rule_function=IsMojoServiceManifestFile)\n\n\ndef _CheckChangeForFuchsiaSecurityOwners(input_api, output_api):\n    file_patterns = [\n        # Component specifications.\n        '*.cml',  # Component Framework v2.\n        '*.cmx',  # Component Framework v1.\n\n        # Fuchsia IDL protocol specifications.\n        '*.fidl',\n    ]\n\n    # Don't check for owners files for changes in these directories.\n    excluded_patterns = [\n        'third_party/crashpad/*',\n    ]\n\n    return _FindMissingSecurityOwners(input_api, output_api, file_patterns,\n                                      excluded_patterns,\n                                      'build/fuchsia/SECURITY_OWNERS')\n\n\ndef CheckSecurityOwners(input_api, output_api):\n    \"\"\"Checks that various security-sensitive files have an IPC OWNERS rule.\"\"\"\n    ipc_results = _CheckChangeForIpcSecurityOwners(input_api, output_api)\n    fuchsia_results = _CheckChangeForFuchsiaSecurityOwners(\n        input_api, output_api)\n\n    if ipc_results.has_security_sensitive_files:\n        output_api.AppendCC('ipc-security-reviews@chromium.org')\n\n    results = []\n\n    missing_reviewer_problems = []\n    if ipc_results.missing_reviewer_problem:\n        missing_reviewer_problems.append(ipc_results.missing_reviewer_problem)\n    if fuchsia_results.missing_reviewer_problem:\n        missing_reviewer_problems.append(\n            fuchsia_results.missing_reviewer_problem)\n\n    # Missing reviewers are an error unless there's no issue number\n    # associated with this branch; in that case, the presubmit is being run\n    # with --all or --files.\n    #\n    # Note that upload should never be an error; otherwise, it would be\n    # impossible to upload changes at all.\n    if input_api.is_committing and input_api.change.issue:\n        make_presubmit_message = output_api.PresubmitError\n    else:\n        make_presubmit_message = output_api.PresubmitNotifyResult\n    for problem in missing_reviewer_problems:\n        results.append(\n            make_presubmit_message(problem.problem, items=problem.items))\n\n    owners_file_problems = []\n    owners_file_problems.extend(ipc_results.owners_file_problems)\n    owners_file_problems.extend(fuchsia_results.owners_file_problems)\n\n    for problem in owners_file_problems:\n        # Missing per-file rules are always an error. While swarming and caching\n        # means that uploading a patchset with updated OWNERS files and sending\n        # it to the CQ again should not have a large incremental cost, it is\n        # still frustrating to discover the error only after the change has\n        # already been uploaded.\n        results.append(\n            output_api.PresubmitError(problem.problem, items=problem.items))\n\n    return results\n\n\ndef _GetFilesUsingSecurityCriticalFunctions(input_api):\n    \"\"\"Checks affected files for changes to security-critical calls. This\n    function checks the full change diff, to catch both additions/changes\n    and removals.\n\n    Returns a dict keyed by file name, and the value is a set of detected\n    functions.\n    \"\"\"\n    # Map of function pretty name (displayed in an error) to the pattern to\n    # match it with.\n    _PATTERNS_TO_CHECK = {\n        'content::GetServiceSandboxType<>()': 'GetServiceSandboxType\\\\<'\n    }\n    _PATTERNS_TO_CHECK = {\n        k: input_api.re.compile(v)\n        for k, v in _PATTERNS_TO_CHECK.items()\n    }\n\n    # We don't want to trigger on strings within this file.\n    def presubmit_file_filter(f):\n        return 'PRESUBMIT.py' != input_api.os_path.split(f.LocalPath())[1]\n\n    # Scan all affected files for changes touching _FUNCTIONS_TO_CHECK.\n    files_to_functions = {}\n    for f in input_api.AffectedFiles(file_filter=presubmit_file_filter):\n        diff = f.GenerateScmDiff()\n        for line in diff.split('\\n'):\n            # Not using just RightHandSideLines() because removing a\n            # call to a security-critical function can be just as important\n            # as adding or changing the arguments.\n            if line.startswith('-') or (line.startswith('+')\n                                        and not line.startswith('++')):\n                for name, pattern in _PATTERNS_TO_CHECK.items():\n                    if pattern.search(line):\n                        path = f.LocalPath()\n                        if not path in files_to_functions:\n                            files_to_functions[path] = set()\n                        files_to_functions[path].add(name)\n    return files_to_functions\n\n\ndef CheckSecurityChanges(input_api, output_api):\n    \"\"\"Checks that changes involving security-critical functions are reviewed\n    by the security team.\n    \"\"\"\n    files_to_functions = _GetFilesUsingSecurityCriticalFunctions(input_api)\n    if not len(files_to_functions):\n        return []\n\n    owners_file = 'ipc/SECURITY_OWNERS'\n    if _ChangeHasSecurityReviewer(input_api, owners_file):\n        return []\n\n    msg = 'The following files change calls to security-sensitive functions\\n' \\\n        'that need to be reviewed by {}.\\n'.format(owners_file)\n    for path, names in files_to_functions.items():\n        msg += '  {}\\n'.format(path)\n        for name in names:\n            msg += '    {}\\n'.format(name)\n        msg += '\\n'\n\n    if input_api.is_committing:\n        output = output_api.PresubmitError\n    else:\n        output = output_api.PresubmitNotifyResult\n    return [output(msg)]\n\n\ndef CheckSetNoParent(input_api, output_api):\n    \"\"\"Checks that set noparent is only used together with an OWNERS file in\n       //build/OWNERS.setnoparent (see also\n       //docs/code_reviews.md#owners-files-details)\n    \"\"\"\n    # Return early if no OWNERS files were modified.\n    if not any(f.LocalPath().endswith('OWNERS')\n               for f in input_api.AffectedFiles(include_deletes=False)):\n        return []\n\n    errors = []\n\n    allowed_owners_files_file = 'build/OWNERS.setnoparent'\n    allowed_owners_files = set()\n    with open(allowed_owners_files_file, 'r', encoding='utf-8') as f:\n        for line in f:\n            line = line.strip()\n            if not line or line.startswith('#'):\n                continue\n            allowed_owners_files.add(line)\n\n    per_file_pattern = input_api.re.compile('per-file (.+)=(.+)')\n\n    for f in input_api.AffectedFiles(include_deletes=False):\n        if not f.LocalPath().endswith('OWNERS'):\n            continue\n\n        found_owners_files = set()\n        found_set_noparent_lines = dict()\n\n        # Parse the OWNERS file.\n        for lineno, line in enumerate(f.NewContents(), 1):\n            line = line.strip()\n            if line.startswith('set noparent'):\n                found_set_noparent_lines[''] = lineno\n            if line.startswith('file://'):\n                if line in allowed_owners_files:\n                    found_owners_files.add('')\n            if line.startswith('per-file'):\n                match = per_file_pattern.match(line)\n                if match:\n                    glob = match.group(1).strip()\n                    directive = match.group(2).strip()\n                    if directive == 'set noparent':\n                        found_set_noparent_lines[glob] = lineno\n                    if directive.startswith('file://'):\n                        if directive in allowed_owners_files:\n                            found_owners_files.add(glob)\n\n        # Check that every set noparent line has a corresponding file:// line\n        # listed in build/OWNERS.setnoparent. An exception is made for top level\n        # directories since src/OWNERS shouldn't review them.\n        linux_path = f.LocalPath().replace(input_api.os_path.sep, '/')\n        if (linux_path.count('/') != 1\n                and (not linux_path in _EXCLUDED_SET_NO_PARENT_PATHS)):\n            for set_noparent_line in found_set_noparent_lines:\n                if set_noparent_line in found_owners_files:\n                    continue\n                errors.append('  %s:%d' %\n                              (linux_path,\n                               found_set_noparent_lines[set_noparent_line]))\n\n    results = []\n    if errors:\n        if input_api.is_committing:\n            output = output_api.PresubmitError\n        else:\n            output = output_api.PresubmitPromptWarning\n        results.append(\n            output(\n                'Found the following \"set noparent\" restrictions in OWNERS files that '\n                'do not include owners from build/OWNERS.setnoparent:',\n                long_text='\\n\\n'.join(errors)))\n    return results\n\n\ndef CheckUselessForwardDeclarations(input_api, output_api):\n    \"\"\"Checks that added or removed lines in non third party affected\n       header files do not lead to new useless class or struct forward\n       declaration.\n    \"\"\"\n    results = []\n    class_pattern = input_api.re.compile(r'^class\\s+(\\w+);$',\n                                         input_api.re.MULTILINE)\n    struct_pattern = input_api.re.compile(r'^struct\\s+(\\w+);$',\n                                          input_api.re.MULTILINE)\n    for f in input_api.AffectedFiles(include_deletes=False):\n        if (f.LocalPath().startswith('third_party')\n                and not f.LocalPath().startswith('third_party/blink')\n                and not f.LocalPath().startswith('third_party\\\\blink')):\n            continue\n\n        if not f.LocalPath().endswith('.h'):\n            continue\n\n        contents = input_api.ReadFile(f)\n        fwd_decls = input_api.re.findall(class_pattern, contents)\n        fwd_decls.extend(input_api.re.findall(struct_pattern, contents))\n\n        useless_fwd_decls = []\n        for decl in fwd_decls:\n            count = sum(1 for _ in input_api.re.finditer(\n                r'\\b%s\\b' % input_api.re.escape(decl), contents))\n            if count == 1:\n                useless_fwd_decls.append(decl)\n\n        if not useless_fwd_decls:\n            continue\n\n        for line in f.GenerateScmDiff().splitlines():\n            if (line.startswith('-') and not line.startswith('--')\n                    or line.startswith('+') and not line.startswith('++')):\n                for decl in useless_fwd_decls:\n                    if input_api.re.search(r'\\b%s\\b' % decl, line[1:]):\n                        results.append(\n                            output_api.PresubmitPromptWarning(\n                                '%s: %s forward declaration is no longer needed'\n                                % (f.LocalPath(), decl)))\n                        useless_fwd_decls.remove(decl)\n\n    return results\n\n\ndef _CheckAndroidDebuggableBuild(input_api, output_api):\n    \"\"\"Checks that code uses BuildInfo.isDebugAndroid() instead of\n       Build.TYPE.equals('') or ''.equals(Build.TYPE) to check if\n       this is a debuggable build of Android.\n    \"\"\"\n    build_type_check_pattern = input_api.re.compile(\n        r'\\bBuild\\.TYPE\\.equals\\(|\\.equals\\(\\s*\\bBuild\\.TYPE\\)')\n\n    errors = []\n\n    sources = lambda affected_file: input_api.FilterSourceFile(\n        affected_file,\n        files_to_skip=(\n            _EXCLUDED_PATHS + _TEST_CODE_EXCLUDED_PATHS + input_api.\n            DEFAULT_FILES_TO_SKIP + (\n                r\"^android_webview/support_library/boundary_interfaces/\",\n                r\"^chrome/android/webapk/.*\",\n                r'^third_party/.*',\n                r\"tools/android/customtabs_benchmark/.*\",\n                r\"webview/chromium/License.*\",\n            )),\n        files_to_check=[r'.*\\.java$'])\n\n    for f in input_api.AffectedSourceFiles(sources):\n        for line_num, line in f.ChangedContents():\n            if build_type_check_pattern.search(line):\n                errors.append(\"%s:%d\" % (f.LocalPath(), line_num))\n\n    results = []\n\n    if errors:\n        results.append(\n            output_api.PresubmitPromptWarning(\n                'Build.TYPE.equals or .equals(Build.TYPE) usage is detected.'\n                ' Please use BuildInfo.isDebugAndroid() instead.', errors))\n\n    return results\n\n# TODO: add unit tests\ndef _CheckAndroidToastUsage(input_api, output_api):\n    \"\"\"Checks that code uses org.chromium.ui.widget.Toast instead of\n       android.widget.Toast (Chromium Toast doesn't force hardware\n       acceleration on low-end devices, saving memory).\n    \"\"\"\n    toast_import_pattern = input_api.re.compile(\n        r'^import android\\.widget\\.Toast;$')\n\n    errors = []\n\n    sources = lambda affected_file: input_api.FilterSourceFile(\n        affected_file,\n        files_to_skip=(_EXCLUDED_PATHS + _TEST_CODE_EXCLUDED_PATHS + input_api.\n                       DEFAULT_FILES_TO_SKIP + (r'^chromecast/.*',\n                                                r'^remoting/.*')),\n        files_to_check=[r'.*\\.java$'])\n\n    for f in input_api.AffectedSourceFiles(sources):\n        for line_num, line in f.ChangedContents():\n            if toast_import_pattern.search(line):\n                errors.append(\"%s:%d\" % (f.LocalPath(), line_num))\n\n    results = []\n\n    if errors:\n        results.append(\n            output_api.PresubmitError(\n                'android.widget.Toast usage is detected. Android toasts use hardware'\n                ' acceleration, and can be\\ncostly on low-end devices. Please use'\n                ' org.chromium.ui.widget.Toast instead.\\n'\n                'Contact dskiba@chromium.org if you have any questions.',\n                errors))\n\n    return results\n\n\ndef _CheckAndroidCrLogUsage(input_api, output_api):\n    \"\"\"Checks that new logs using org.chromium.base.Log:\n      - Are using 'TAG' as variable name for the tags (warn)\n      - Are using a tag that is shorter than 20 characters (error)\n    \"\"\"\n\n    # Do not check format of logs in the given files\n    cr_log_check_excluded_paths = [\n        # //chrome/android/webapk cannot depend on //base\n        r\"^chrome/android/webapk/.*\",\n        # WebView license viewer code cannot depend on //base; used in stub APK.\n        r\"^android_webview/glue/java/src/com/android/\"\n        r\"webview/chromium/License.*\",\n        # The customtabs_benchmark is a small app that does not depend on Chromium\n        # java pieces.\n        r\"tools/android/customtabs_benchmark/.*\",\n    ]\n\n    cr_log_import_pattern = input_api.re.compile(\n        r'^import org\\.chromium\\.base\\.Log;$', input_api.re.MULTILINE)\n    class_in_base_pattern = input_api.re.compile(\n        r'^package org\\.chromium\\.base;$', input_api.re.MULTILINE)\n    has_some_log_import_pattern = input_api.re.compile(r'^import .*\\.Log;$',\n                                                       input_api.re.MULTILINE)\n    # Extract the tag from lines like `Log.d(TAG, \"*\");` or `Log.d(\"TAG\", \"*\");`\n    log_call_pattern = input_api.re.compile(r'\\bLog\\.\\w\\((?P<tag>\\\"?\\w+)')\n    log_decl_pattern = input_api.re.compile(\n        r'static final String TAG = \"(?P<name>(.*))\"')\n    rough_log_decl_pattern = input_api.re.compile(r'\\bString TAG\\s*=')\n\n    REF_MSG = ('See docs/android_logging.md for more info.')\n    sources = lambda x: input_api.FilterSourceFile(\n        x,\n        files_to_check=[r'.*\\.java$'],\n        files_to_skip=cr_log_check_excluded_paths)\n\n    tag_decl_errors = []\n    tag_length_errors = []\n    tag_errors = []\n    tag_with_dot_errors = []\n    util_log_errors = []\n\n    for f in input_api.AffectedSourceFiles(sources):\n        file_content = input_api.ReadFile(f)\n        has_modified_logs = False\n        # Per line checks\n        if (cr_log_import_pattern.search(file_content)\n                or (class_in_base_pattern.search(file_content)\n                    and not has_some_log_import_pattern.search(file_content))):\n            # Checks to run for files using cr log\n            for line_num, line in f.ChangedContents():\n                if rough_log_decl_pattern.search(line):\n                    has_modified_logs = True\n\n                # Check if the new line is doing some logging\n                match = log_call_pattern.search(line)\n                if match:\n                    has_modified_logs = True\n\n                    # Make sure it uses \"TAG\"\n                    if not match.group('tag') == 'TAG':\n                        tag_errors.append(\"%s:%d\" % (f.LocalPath(), line_num))\n        else:\n            # Report non cr Log function calls in changed lines\n            for line_num, line in f.ChangedContents():\n                if log_call_pattern.search(line):\n                    util_log_errors.append(\"%s:%d\" % (f.LocalPath(), line_num))\n\n        # Per file checks\n        if has_modified_logs:\n            # Make sure the tag is using the \"cr\" prefix and is not too long\n            match = log_decl_pattern.search(file_content)\n            tag_name = match.group('name') if match else None\n            if not tag_name:\n                tag_decl_errors.append(f.LocalPath())\n            elif len(tag_name) > 20:\n                tag_length_errors.append(f.LocalPath())\n            elif '.' in tag_name:\n                tag_with_dot_errors.append(f.LocalPath())\n\n    results = []\n    if tag_decl_errors:\n        results.append(\n            output_api.PresubmitPromptWarning(\n                'Please define your tags using the suggested format: .\\n'\n                '\"private static final String TAG = \"<package tag>\".\\n'\n                'They will be prepended with \"cr_\" automatically.\\n' + REF_MSG,\n                tag_decl_errors))\n\n    if tag_length_errors:\n        results.append(\n            output_api.PresubmitError(\n                'The tag length is restricted by the system to be at most '\n                '20 characters.\\n' + REF_MSG, tag_length_errors))\n\n    if tag_errors:\n        results.append(\n            output_api.PresubmitPromptWarning(\n                'Please use a variable named \"TAG\" for your log tags.\\n' +\n                REF_MSG, tag_errors))\n\n    if util_log_errors:\n        results.append(\n            output_api.PresubmitPromptWarning(\n                'Please use org.chromium.base.Log for new logs.\\n' + REF_MSG,\n                util_log_errors))\n\n    if tag_with_dot_errors:\n        results.append(\n            output_api.PresubmitPromptWarning(\n                'Dot in log tags cause them to be elided in crash reports.\\n' +\n                REF_MSG, tag_with_dot_errors))\n\n    return results\n\n\ndef _CheckAndroidTestAnnotationUsage(input_api, output_api):\n    \"\"\"Checks that android.test.suitebuilder.annotation.* is no longer used.\"\"\"\n    deprecated_annotation_import_pattern = input_api.re.compile(\n        r'^import android\\.test\\.suitebuilder\\.annotation\\..*;',\n        input_api.re.MULTILINE)\n    sources = lambda x: input_api.FilterSourceFile(\n        x, files_to_check=[r'.*\\.java$'], files_to_skip=None)\n    errors = []\n    for f in input_api.AffectedFiles(file_filter=sources):\n        for line_num, line in f.ChangedContents():\n            if deprecated_annotation_import_pattern.search(line):\n                errors.append(\"%s:%d\" % (f.LocalPath(), line_num))\n\n    results = []\n    if errors:\n        results.append(\n            output_api.PresubmitError(\n                'Annotations in android.test.suitebuilder.annotation have been'\n                ' deprecated since API level 24. Please use androidx.test.filters'\n                ' from //third_party/androidx:androidx_test_runner_java instead.'\n                ' Contact yolandyan@chromium.org if you have any questions.',\n                errors))\n    return results\n\n\ndef _CheckAndroidNewMdpiAssetLocation(input_api, output_api):\n    \"\"\"Checks if MDPI assets are placed in a correct directory.\"\"\"\n    file_filter = lambda f: (f.LocalPath().endswith(\n        '.png') and ('/res/drawable/'.replace('/', input_api.os_path.sep) in f.\n                     LocalPath() or '/res/drawable-ldrtl/'.replace(\n                         '/', input_api.os_path.sep) in f.LocalPath()))\n    errors = []\n    for f in input_api.AffectedFiles(include_deletes=False,\n                                     file_filter=file_filter):\n        errors.append('    %s' % f.LocalPath())\n\n    results = []\n    if errors:\n        results.append(\n            output_api.PresubmitError(\n                'MDPI assets should be placed in /res/drawable-mdpi/ or '\n                '/res/drawable-ldrtl-mdpi/\\ninstead of /res/drawable/ and'\n                '/res/drawable-ldrtl/.\\n'\n                'Contact newt@chromium.org if you have questions.', errors))\n    return results\n\n\ndef _CheckAndroidWebkitImports(input_api, output_api):\n    \"\"\"Checks that code uses org.chromium.base.Callback instead of\n       android.webview.ValueCallback except in the WebView glue layer\n       and WebLayer.\n    \"\"\"\n    valuecallback_import_pattern = input_api.re.compile(\n        r'^import android\\.webkit\\.ValueCallback;$')\n\n    errors = []\n\n    sources = lambda affected_file: input_api.FilterSourceFile(\n        affected_file,\n        files_to_skip=(_EXCLUDED_PATHS + _TEST_CODE_EXCLUDED_PATHS + input_api.\n                       DEFAULT_FILES_TO_SKIP + (\n                           r'^android_webview/glue/.*',\n                           r'^android_webview/support_library/.*',\n                           r'^weblayer/.*',\n                       )),\n        files_to_check=[r'.*\\.java$'])\n\n    for f in input_api.AffectedSourceFiles(sources):\n        for line_num, line in f.ChangedContents():\n            if valuecallback_import_pattern.search(line):\n                errors.append(\"%s:%d\" % (f.LocalPath(), line_num))\n\n    results = []\n\n    if errors:\n        results.append(\n            output_api.PresubmitError(\n                'android.webkit.ValueCallback usage is detected outside of the glue'\n                ' layer. To stay compatible with the support library, android.webkit.*'\n                ' classes should only be used inside the glue layer and'\n                ' org.chromium.base.Callback should be used instead.', errors))\n\n    return results\n\n\ndef _CheckAndroidXmlStyle(input_api, output_api, is_check_on_upload):\n    \"\"\"Checks Android XML styles \"\"\"\n\n    # Return early if no relevant files were modified.\n    if not any(\n            _IsXmlOrGrdFile(input_api, f.LocalPath())\n            for f in input_api.AffectedFiles(include_deletes=False)):\n        return []\n\n    import sys\n    original_sys_path = sys.path\n    try:\n        sys.path = sys.path + [\n            input_api.os_path.join(input_api.PresubmitLocalPath(), 'tools',\n                                   'android', 'checkxmlstyle')\n        ]\n        import checkxmlstyle\n    finally:\n        # Restore sys.path to what it was before.\n        sys.path = original_sys_path\n\n    if is_check_on_upload:\n        return checkxmlstyle.CheckStyleOnUpload(input_api, output_api)\n    else:\n        return checkxmlstyle.CheckStyleOnCommit(input_api, output_api)\n\n\ndef _CheckAndroidInfoBarDeprecation(input_api, output_api):\n    \"\"\"Checks Android Infobar Deprecation \"\"\"\n\n    import sys\n    original_sys_path = sys.path\n    try:\n        sys.path = sys.path + [\n            input_api.os_path.join(input_api.PresubmitLocalPath(), 'tools',\n                                   'android', 'infobar_deprecation')\n        ]\n        import infobar_deprecation\n    finally:\n        # Restore sys.path to what it was before.\n        sys.path = original_sys_path\n\n    return infobar_deprecation.CheckDeprecationOnUpload(input_api, output_api)\n\n\nclass _PydepsCheckerResult:\n    def __init__(self, cmd, pydeps_path, process, old_contents):\n        self._cmd = cmd\n        self._pydeps_path = pydeps_path\n        self._process = process\n        self._old_contents = old_contents\n\n    def GetError(self):\n        \"\"\"Returns an error message, or None.\"\"\"\n        import difflib\n        new_contents = self._process.stdout.read().splitlines()[2:]\n        if self._process.wait() != 0:\n            # STDERR should already be printed.\n            return 'Command failed: ' + self._cmd\n        if self._old_contents != new_contents:\n            diff = '\\n'.join(\n                difflib.context_diff(self._old_contents, new_contents))\n            return ('File is stale: {}\\n'\n                    'Diff (apply to fix):\\n'\n                    '{}\\n'\n                    'To regenerate, run:\\n\\n'\n                    '    {}').format(self._pydeps_path, diff, self._cmd)\n        return None\n\n\nclass PydepsChecker:\n    def __init__(self, input_api, pydeps_files):\n        self._file_cache = {}\n        self._input_api = input_api\n        self._pydeps_files = pydeps_files\n\n    def _LoadFile(self, path):\n        \"\"\"Returns the list of paths within a .pydeps file relative to //.\"\"\"\n        if path not in self._file_cache:\n            with open(path, encoding='utf-8') as f:\n                self._file_cache[path] = f.read()\n        return self._file_cache[path]\n\n    def _ComputeNormalizedPydepsEntries(self, pydeps_path):\n        \"\"\"Returns an iterable of paths within the .pydep, relativized to //.\"\"\"\n        pydeps_data = self._LoadFile(pydeps_path)\n        uses_gn_paths = '--gn-paths' in pydeps_data\n        entries = (l for l in pydeps_data.splitlines()\n                   if not l.startswith('#'))\n        if uses_gn_paths:\n            # Paths look like: //foo/bar/baz\n            return (e[2:] for e in entries)\n        else:\n            # Paths look like: path/relative/to/file.pydeps\n            os_path = self._input_api.os_path\n            pydeps_dir = os_path.dirname(pydeps_path)\n            return (os_path.normpath(os_path.join(pydeps_dir, e))\n                    for e in entries)\n\n    def _CreateFilesToPydepsMap(self):\n        \"\"\"Returns a map of local_path -> list_of_pydeps.\"\"\"\n        ret = {}\n        for pydep_local_path in self._pydeps_files:\n            for path in self._ComputeNormalizedPydepsEntries(pydep_local_path):\n                ret.setdefault(path, []).append(pydep_local_path)\n        return ret\n\n    def ComputeAffectedPydeps(self):\n        \"\"\"Returns an iterable of .pydeps files that might need regenerating.\"\"\"\n        affected_pydeps = set()\n        file_to_pydeps_map = None\n        for f in self._input_api.AffectedFiles(include_deletes=True):\n            local_path = f.LocalPath()\n            # Changes to DEPS can lead to .pydeps changes if any .py files are in\n            # subrepositories. We can't figure out which files change, so re-check\n            # all files.\n            # Changes to print_python_deps.py affect all .pydeps.\n            if local_path in ('DEPS', 'PRESUBMIT.py'\n                              ) or local_path.endswith('print_python_deps.py'):\n                return self._pydeps_files\n            elif local_path.endswith('.pydeps'):\n                if local_path in self._pydeps_files:\n                    affected_pydeps.add(local_path)\n            elif local_path.endswith('.py'):\n                if file_to_pydeps_map is None:\n                    file_to_pydeps_map = self._CreateFilesToPydepsMap()\n                affected_pydeps.update(file_to_pydeps_map.get(local_path, ()))\n        return affected_pydeps\n\n    def DetermineIfStaleAsync(self, pydeps_path):\n        \"\"\"Runs print_python_deps.py to see if the files is stale.\"\"\"\n        import os\n\n        old_pydeps_data = self._LoadFile(pydeps_path).splitlines()\n        if old_pydeps_data:\n            cmd = old_pydeps_data[1][1:].strip()\n            if '--output' not in cmd:\n                cmd += ' --output ' + pydeps_path\n            old_contents = old_pydeps_data[2:]\n        else:\n            # A default cmd that should work in most cases (as long as pydeps filename\n            # matches the script name) so that PRESUBMIT.py does not crash if pydeps\n            # file is empty/new.\n            cmd = 'build/print_python_deps.py {} --root={} --output={}'.format(\n                pydeps_path[:-4], os.path.dirname(pydeps_path), pydeps_path)\n            old_contents = []\n        env = dict(os.environ)\n        env['PYTHONDONTWRITEBYTECODE'] = '1'\n        process = self._input_api.subprocess.Popen(\n            cmd + ' --output \"\"',\n            shell=True,\n            env=env,\n            stdout=self._input_api.subprocess.PIPE,\n            encoding='utf-8')\n        return _PydepsCheckerResult(cmd, pydeps_path, process, old_contents)\n\n\ndef _ParseGclientArgs():\n    args = {}\n    with open('build/config/gclient_args.gni', 'r') as f:\n        for line in f:\n            line = line.strip()\n            if not line or line.startswith('#'):\n                continue\n            attribute, value = line.split('=')\n            args[attribute.strip()] = value.strip()\n    return args\n\n\ndef CheckPydepsNeedsUpdating(input_api, output_api, checker_for_tests=None):\n    \"\"\"Checks if a .pydeps file needs to be regenerated.\"\"\"\n    # This check is for Python dependency lists (.pydeps files), and involves\n    # paths not only in the PRESUBMIT.py, but also in the .pydeps files. It\n    # doesn't work on Windows and Mac, so skip it on other platforms.\n    if not input_api.platform.startswith('linux'):\n        return []\n\n    results = []\n    # First, check for new / deleted .pydeps.\n    for f in input_api.AffectedFiles(include_deletes=True):\n        # Check whether we are running the presubmit check for a file in src.\n        if f.LocalPath().endswith('.pydeps'):\n            # f.LocalPath is relative to repo (src, or internal repo).\n            # os_path.exists is relative to src repo.\n            # Therefore if os_path.exists is true, it means f.LocalPath is relative\n            # to src and we can conclude that the pydeps is in src.\n            exists = input_api.os_path.exists(f.LocalPath())\n            if f.Action() == 'D' and f.LocalPath() in _ALL_PYDEPS_FILES:\n                results.append(\n                    output_api.PresubmitError(\n                        'Please update _ALL_PYDEPS_FILES within //PRESUBMIT.py to '\n                        'remove %s' % f.LocalPath()))\n            elif (f.Action() != 'D' and exists\n                  and f.LocalPath() not in _ALL_PYDEPS_FILES):\n                results.append(\n                    output_api.PresubmitError(\n                        'Please update _ALL_PYDEPS_FILES within //PRESUBMIT.py to '\n                        'include %s' % f.LocalPath()))\n\n    if results:\n        return results\n\n    try:\n        parsed_args = _ParseGclientArgs()\n    except FileNotFoundError:\n        message = (\n            'build/config/gclient_args.gni not found. Please make sure your '\n            'workspace has been initialized with gclient sync.'\n        )\n        import sys\n        original_sys_path = sys.path\n        try:\n            sys.path = sys.path + [\n                input_api.os_path.join(input_api.PresubmitLocalPath(),\n                                    'third_party', 'depot_tools')\n            ]\n            import gclient_utils\n            if gclient_utils.IsEnvCog():\n                # Users will always hit this when they run presubmits before cog\n                # workspace initialization finishes. The check shouldn't fail in\n                # this case. This is an unavoidable workaround that's needed for\n                # good presubmit UX for cog.\n                results.append(output_api.PresubmitPromptWarning(message))\n            else:\n                results.append(output_api.PresubmitError(message))\n            return results\n        finally:\n            # Restore sys.path to what it was before.\n            sys.path = original_sys_path\n\n    is_android = parsed_args.get('checkout_android', 'false') == 'true'\n    checker = checker_for_tests or PydepsChecker(input_api, _ALL_PYDEPS_FILES)\n    affected_pydeps = set(checker.ComputeAffectedPydeps())\n    affected_android_pydeps = affected_pydeps.intersection(\n        set(_ANDROID_SPECIFIC_PYDEPS_FILES))\n    if affected_android_pydeps and not is_android:\n        results.append(\n            output_api.PresubmitPromptOrNotify(\n                'You have changed python files that may affect pydeps for android\\n'\n                'specific scripts. However, the relevant presubmit check cannot be\\n'\n                'run because you are not using an Android checkout. To validate that\\n'\n                'the .pydeps are correct, re-run presubmit in an Android checkout, or\\n'\n                'use the android-internal-presubmit optional trybot.\\n'\n                'Possibly stale pydeps files:\\n{}'.format(\n                    '\\n'.join(affected_android_pydeps))))\n\n    all_pydeps = _ALL_PYDEPS_FILES if is_android else _GENERIC_PYDEPS_FILES\n    pydeps_to_check = affected_pydeps.intersection(all_pydeps)\n    # Process these concurrently, as each one takes 1-2 seconds.\n    pydep_results = [checker.DetermineIfStaleAsync(p) for p in pydeps_to_check]\n    for result in pydep_results:\n        error_msg = result.GetError()\n        if error_msg:\n            results.append(output_api.PresubmitError(error_msg))\n\n    return results\n\n\ndef CheckSingletonInHeaders(input_api, output_api):\n    \"\"\"Checks to make sure no header files have |Singleton<|.\"\"\"\n\n    def FileFilter(affected_file):\n        # It's ok for base/memory/singleton.h to have |Singleton<|.\n        files_to_skip = (_EXCLUDED_PATHS + input_api.DEFAULT_FILES_TO_SKIP +\n                         (r\"^base/memory/singleton\\.h$\",\n                          r\"^net/quic/platform/impl/quic_singleton_impl\\.h$\"))\n        return input_api.FilterSourceFile(affected_file,\n                                          files_to_skip=files_to_skip)\n\n    pattern = input_api.re.compile(r'(?<!class\\sbase::)Singleton\\s*<')\n    files = []\n    for f in input_api.AffectedSourceFiles(FileFilter):\n        if (f.LocalPath().endswith('.h') or f.LocalPath().endswith('.hxx')\n                or f.LocalPath().endswith('.hpp')\n                or f.LocalPath().endswith('.inl')):\n            contents = input_api.ReadFile(f)\n            for line in contents.splitlines(False):\n                if (not line.lstrip().startswith('//')\n                        and  # Strip C++ comment.\n                        pattern.search(line)):\n                    files.append(f)\n                    break\n\n    if files:\n        return [\n            output_api.PresubmitError(\n                'Found base::Singleton<T> in the following header files.\\n' +\n                'Please move them to an appropriate source file so that the ' +\n                'template gets instantiated in a single compilation unit.',\n                files)\n        ]\n    return []\n\n\n_DEPRECATED_CSS = [\n  # Values\n  ( \"-webkit-box\", \"flex\" ),\n  ( \"-webkit-inline-box\", \"inline-flex\" ),\n  ( \"-webkit-flex\", \"flex\" ),\n  ( \"-webkit-inline-flex\", \"inline-flex\" ),\n  ( \"-webkit-min-content\", \"min-content\" ),\n  ( \"-webkit-max-content\", \"max-content\" ),\n\n  # Properties\n  ( \"-webkit-background-clip\", \"background-clip\" ),\n  ( \"-webkit-background-origin\", \"background-origin\" ),\n  ( \"-webkit-background-size\", \"background-size\" ),\n  ( \"-webkit-box-shadow\", \"box-shadow\" ),\n  ( \"-webkit-user-select\", \"user-select\" ),\n\n  # Functions\n  ( \"-webkit-gradient\", \"gradient\" ),\n  ( \"-webkit-repeating-gradient\", \"repeating-gradient\" ),\n  ( \"-webkit-linear-gradient\", \"linear-gradient\" ),\n  ( \"-webkit-repeating-linear-gradient\", \"repeating-linear-gradient\" ),\n  ( \"-webkit-radial-gradient\", \"radial-gradient\" ),\n  ( \"-webkit-repeating-radial-gradient\", \"repeating-radial-gradient\" ),\n]\n\n\n# TODO: add unit tests\ndef CheckNoDeprecatedCss(input_api, output_api):\n    \"\"\" Make sure that we don't use deprecated CSS\n        properties, functions or values. Our external\n        documentation and iOS CSS for dom distiller\n        (reader mode) are ignored by the hooks as it\n        needs to be consumed by WebKit. \"\"\"\n    results = []\n    file_inclusion_pattern = [r\".+\\.css$\"]\n    files_to_skip = (_EXCLUDED_PATHS + _TEST_CODE_EXCLUDED_PATHS +\n                     input_api.DEFAULT_FILES_TO_SKIP +\n                     (# Legacy CSS file using deprecated CSS.\n                      r\"^chrome/browser/resources/chromeos/arc_support/cr_overlay.css$\",\n                      r\"^chrome/common/extensions/docs\", r\"^chrome/docs\",\n                      r\"^native_client_sdk\",\n                      # The NTP team prefers reserving -webkit-line-clamp for\n                      # ellipsis effect which can only be used with -webkit-box.\n                      r\"ui/webui/resources/cr_components/most_visited/.*\\.css$\"))\n    file_filter = lambda f: input_api.FilterSourceFile(\n        f, files_to_check=file_inclusion_pattern, files_to_skip=files_to_skip)\n    for fpath in input_api.AffectedFiles(file_filter=file_filter):\n        for line_num, line in fpath.ChangedContents():\n            for (deprecated_value, value) in _DEPRECATED_CSS:\n                if deprecated_value in line:\n                    results.append(\n                        output_api.PresubmitError(\n                            \"%s:%d: Use of deprecated CSS %s, use %s instead\" %\n                            (fpath.LocalPath(), line_num, deprecated_value,\n                             value)))\n    return results\n\n\ndef CheckForRelativeIncludes(input_api, output_api):\n    bad_files = {}\n    for f in input_api.AffectedFiles(include_deletes=False):\n        if (f.LocalPath().startswith('third_party')\n                and not f.LocalPath().startswith('third_party/blink')\n                and not f.LocalPath().startswith('third_party\\\\blink')):\n            continue\n\n        if not _IsCPlusPlusFile(input_api, f.LocalPath()):\n            continue\n\n        relative_includes = [\n            line for _, line in f.ChangedContents()\n            if \"#include\" in line and \"../\" in line\n        ]\n        if not relative_includes:\n            continue\n        bad_files[f.LocalPath()] = relative_includes\n\n    if not bad_files:\n        return []\n\n    error_descriptions = []\n    for file_path, bad_lines in bad_files.items():\n        error_description = file_path\n        for line in bad_lines:\n            error_description += '\\n    ' + line\n        error_descriptions.append(error_description)\n\n    results = []\n    results.append(\n        output_api.PresubmitError(\n            'You added one or more relative #include paths (including \"../\").\\n'\n            'These shouldn\\'t be used because they can be used to include headers\\n'\n            'from code that\\'s not correctly specified as a dependency in the\\n'\n            'relevant BUILD.gn file(s).', error_descriptions))\n\n    return results\n\n\ndef CheckForCcIncludes(input_api, output_api):\n    \"\"\"Check that nobody tries to include a cc file. It's a relatively\n    common error which results in duplicate symbols in object\n    files. This may not always break the build until someone later gets\n    very confusing linking errors.\"\"\"\n    results = []\n    for f in input_api.AffectedFiles(include_deletes=False):\n        # We let third_party code do whatever it wants\n        if (f.LocalPath().startswith('third_party')\n                and not f.LocalPath().startswith('third_party/blink')\n                and not f.LocalPath().startswith('third_party\\\\blink')):\n            continue\n\n        if not _IsCPlusPlusFile(input_api, f.LocalPath()):\n            continue\n\n        for _, line in f.ChangedContents():\n            if line.startswith('#include \"'):\n                included_file = line.split('\"')[1]\n                if _IsCPlusPlusFile(input_api, included_file):\n                    # The most common naming for external files with C++ code,\n                    # apart from standard headers, is to call them foo.inc, but\n                    # Chromium sometimes uses foo-inc.cc so allow that as well.\n                    if not included_file.endswith(('.h', '-inc.cc')):\n                        results.append(\n                            output_api.PresubmitError(\n                                'Only header files or .inc files should be included in other\\n'\n                                'C++ files. Compiling the contents of a cc file more than once\\n'\n                                'will cause duplicate information in the build which may later\\n'\n                                'result in strange link_errors.\\n' +\n                                f.LocalPath() + ':\\n    ' + line))\n\n    return results\n\n\ndef _CheckWatchlistDefinitionsEntrySyntax(key, value, ast):\n    if not isinstance(key, ast.Str):\n        return 'Key at line %d must be a string literal' % key.lineno\n    if not isinstance(value, ast.Dict):\n        return 'Value at line %d must be a dict' % value.lineno\n    if len(value.keys) != 1:\n        return 'Dict at line %d must have single entry' % value.lineno\n    if not isinstance(value.keys[0], ast.Str) or value.keys[0].s != 'filepath':\n        return (\n            'Entry at line %d must have a string literal \\'filepath\\' as key' %\n            value.lineno)\n    return None\n\n\ndef _CheckWatchlistsEntrySyntax(key, value, ast, email_regex):\n    if not isinstance(key, ast.Str):\n        return 'Key at line %d must be a string literal' % key.lineno\n    if not isinstance(value, ast.List):\n        return 'Value at line %d must be a list' % value.lineno\n    for element in value.elts:\n        if not isinstance(element, ast.Str):\n            return 'Watchlist elements on line %d is not a string' % key.lineno\n        if not email_regex.match(element.s):\n            return ('Watchlist element on line %d doesn\\'t look like a valid '\n                    + 'email: %s') % (key.lineno, element.s)\n    return None\n\n\ndef _CheckWATCHLISTSEntries(wd_dict, w_dict, input_api):\n    mismatch_template = (\n        'Mismatch between WATCHLIST_DEFINITIONS entry (%s) and WATCHLISTS '\n        'entry (%s)')\n\n    email_regex = input_api.re.compile(\n        r\"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]+$\")\n\n    ast = input_api.ast\n    i = 0\n    last_key = ''\n    while True:\n        if i >= len(wd_dict.keys):\n            if i >= len(w_dict.keys):\n                return None\n            return mismatch_template % ('missing',\n                                        'line %d' % w_dict.keys[i].lineno)\n        elif i >= len(w_dict.keys):\n            return (mismatch_template %\n                    ('line %d' % wd_dict.keys[i].lineno, 'missing'))\n\n        wd_key = wd_dict.keys[i]\n        w_key = w_dict.keys[i]\n\n        result = _CheckWatchlistDefinitionsEntrySyntax(wd_key,\n                                                       wd_dict.values[i], ast)\n        if result is not None:\n            return 'Bad entry in WATCHLIST_DEFINITIONS dict: %s' % result\n\n        result = _CheckWatchlistsEntrySyntax(w_key, w_dict.values[i], ast,\n                                             email_regex)\n        if result is not None:\n            return 'Bad entry in WATCHLISTS dict: %s' % result\n\n        if wd_key.s != w_key.s:\n            return mismatch_template % ('%s at line %d' %\n                                        (wd_key.s, wd_key.lineno),\n                                        '%s at line %d' %\n                                        (w_key.s, w_key.lineno))\n\n        if wd_key.s < last_key:\n            return (\n                'WATCHLISTS dict is not sorted lexicographically at line %d and %d'\n                % (wd_key.lineno, w_key.lineno))\n        last_key = wd_key.s\n\n        i = i + 1\n\n\ndef _CheckWATCHLISTSSyntax(expression, input_api):\n    ast = input_api.ast\n    if not isinstance(expression, ast.Expression):\n        return 'WATCHLISTS file must contain a valid expression'\n    dictionary = expression.body\n    if not isinstance(dictionary, ast.Dict) or len(dictionary.keys) != 2:\n        return 'WATCHLISTS file must have single dict with exactly two entries'\n\n    first_key = dictionary.keys[0]\n    first_value = dictionary.values[0]\n    second_key = dictionary.keys[1]\n    second_value = dictionary.values[1]\n\n    if (not isinstance(first_key, ast.Str)\n            or first_key.s != 'WATCHLIST_DEFINITIONS'\n            or not isinstance(first_value, ast.Dict)):\n        return ('The first entry of the dict in WATCHLISTS file must be '\n                'WATCHLIST_DEFINITIONS dict')\n\n    if (not isinstance(second_key, ast.Str) or second_key.s != 'WATCHLISTS'\n            or not isinstance(second_value, ast.Dict)):\n        return ('The second entry of the dict in WATCHLISTS file must be '\n                'WATCHLISTS dict')\n\n    return _CheckWATCHLISTSEntries(first_value, second_value, input_api)\n\n\ndef CheckWATCHLISTS(input_api, output_api):\n    for f in input_api.AffectedFiles(include_deletes=False):\n        if f.LocalPath() == 'WATCHLISTS':\n            contents = input_api.ReadFile(f, 'r')\n\n            try:\n                # First, make sure that it can be evaluated.\n                input_api.ast.literal_eval(contents)\n                # Get an AST tree for it and scan the tree for detailed style checking.\n                expression = input_api.ast.parse(contents,\n                                                 filename='WATCHLISTS',\n                                                 mode='eval')\n            except ValueError as e:\n                return [\n                    output_api.PresubmitError('Cannot parse WATCHLISTS file',\n                                              long_text=repr(e))\n                ]\n            except SyntaxError as e:\n                return [\n                    output_api.PresubmitError('Cannot parse WATCHLISTS file',\n                                              long_text=repr(e))\n                ]\n            except TypeError as e:\n                return [\n                    output_api.PresubmitError('Cannot parse WATCHLISTS file',\n                                              long_text=repr(e))\n                ]\n\n            result = _CheckWATCHLISTSSyntax(expression, input_api)\n            if result is not None:\n                return [output_api.PresubmitError(result)]\n            break\n\n    return []\n\ndef CheckGnRebasePath(input_api, output_api):\n    \"\"\"Checks that target_gen_dir is not used wtih \"//\" in rebase_path().\n\n    Developers should use root_build_dir instead of \"//\" when using target_gen_dir because\n    Chromium is sometimes built outside of the source tree.\n    \"\"\"\n\n    def gn_files(f):\n        return input_api.FilterSourceFile(f, files_to_check=(r'.+\\.gn', ))\n\n    rebase_path_regex = input_api.re.compile(r'rebase_path\\((\"\\$target_gen_dir\"|target_gen_dir), (\"/\"|\"//\")\\)')\n    problems = []\n    for f in input_api.AffectedSourceFiles(gn_files):\n        for line_num, line in f.ChangedContents():\n            if rebase_path_regex.search(line):\n                problems.append(\n                    'Absolute path in rebase_path() in %s:%d' %\n                    (f.LocalPath(), line_num))\n\n    if problems:\n        return [\n            output_api.PresubmitPromptWarning(\n                'Using an absolute path in rebase_path()',\n                items=sorted(problems),\n                long_text=(\n                    'rebase_path() should use root_build_dir instead of \"/\" ',\n                    'since builds can be initiated from outside of the source ',\n                    'root.'))\n        ]\n    return []\n\ndef CheckGnGlobForward(input_api, output_api):\n    \"\"\"Checks that forward_variables_from(invoker, \"*\") follows best practices.\n\n    As documented at //build/docs/writing_gn_templates.md\n    \"\"\"\n\n    def gn_files(f):\n        return input_api.FilterSourceFile(f, files_to_check=(r'.+\\.gni', ))\n\n    problems = []\n    for f in input_api.AffectedSourceFiles(gn_files):\n        for line_num, line in f.ChangedContents():\n            if 'forward_variables_from(invoker, \"*\")' in line:\n                problems.append(\n                    'Bare forward_variables_from(invoker, \"*\") in %s:%d' %\n                    (f.LocalPath(), line_num))\n\n    if problems:\n        return [\n            output_api.PresubmitPromptWarning(\n                'forward_variables_from(\"*\") without exclusions',\n                items=sorted(problems),\n                long_text=(\n                    'The variables \"visibility\" and \"test_only\" should be '\n                    'explicitly listed in forward_variables_from(). For more '\n                    'details, see:\\n'\n                    'https://chromium.googlesource.com/chromium/src/+/HEAD/'\n                    'build/docs/writing_gn_templates.md'\n                    '#Using-forward_variables_from'))\n        ]\n    return []\n\ndef CheckNewHeaderWithoutGnChangeOnUpload(input_api, output_api):\n    \"\"\"Checks that newly added header files have corresponding GN changes.\n    Note that this is only a heuristic. To be precise, run script:\n    build/check_gn_headers.py.\n    \"\"\"\n\n    def headers(f):\n        return input_api.FilterSourceFile(\n            f, files_to_check=(r'.+%s' % _HEADER_EXTENSIONS, ))\n\n    new_headers = []\n    for f in input_api.AffectedSourceFiles(headers):\n        if f.Action() != 'A':\n            continue\n        new_headers.append(f.LocalPath())\n\n    def gn_files(f):\n        return input_api.FilterSourceFile(f, files_to_check=(r'.+\\.gn', ))\n\n    all_gn_changed_contents = ''\n    for f in input_api.AffectedSourceFiles(gn_files):\n        for _, line in f.ChangedContents():\n            all_gn_changed_contents += line\n\n    problems = []\n    for header in new_headers:\n        basename = input_api.os_path.basename(header)\n        if basename not in all_gn_changed_contents:\n            problems.append(header)\n\n    if problems:\n        return [\n            output_api.PresubmitPromptWarning(\n                'Missing GN changes for new header files',\n                items=sorted(problems),\n                long_text=\n                'Please double check whether newly added header files need '\n                'corresponding changes in gn or gni files.\\nThis checking is only a '\n                'heuristic. Run build/check_gn_headers.py to be precise.\\n'\n                'Read https://crbug.com/661774 for more info.')\n        ]\n    return []\n\n\ndef CheckCorrectProductNameInMessages(input_api, output_api):\n    \"\"\"Check that Chromium-branded strings don't include \"Chrome\" or vice versa.\n\n    This assumes we won't intentionally reference one product from the other\n    product.\n    \"\"\"\n    all_problems = []\n    test_cases = [{\n        \"filename_postfix\": \"google_chrome_strings.grd\",\n        \"correct_name\": \"Chrome\",\n        \"incorrect_name\": \"Chromium\",\n    }, {\n        \"filename_postfix\": \"google_chrome_strings.grd\",\n        \"correct_name\": \"Chrome\",\n        \"incorrect_name\": \"Chrome for Testing\",\n    }, {\n        \"filename_postfix\": \"chromium_strings.grd\",\n        \"correct_name\": \"Chromium\",\n        \"incorrect_name\": \"Chrome\",\n    }]\n\n    for test_case in test_cases:\n        problems = []\n        filename_filter = lambda x: x.LocalPath().endswith(test_case[\n            \"filename_postfix\"])\n\n        # Check each new line. Can yield false positives in multiline comments, but\n        # easier than trying to parse the XML because messages can have nested\n        # children, and associating message elements with affected lines is hard.\n        for f in input_api.AffectedSourceFiles(filename_filter):\n            for line_num, line in f.ChangedContents():\n                if \"<message\" in line or \"<!--\" in line or \"-->\" in line:\n                    continue\n                if test_case[\"incorrect_name\"] in line:\n                    # Chrome for Testing is a special edge case: https://goo.gle/chrome-for-testing#bookmark=id.n1rat320av91\n                    if (test_case[\"correct_name\"] == \"Chromium\" and line.count(\"Chrome\") == line.count(\"Chrome for Testing\")):\n                        continue\n                    problems.append(\"Incorrect product name in %s:%d\" %\n                                    (f.LocalPath(), line_num))\n\n        if problems:\n            message = (\n                \"Strings in %s-branded string files should reference \\\"%s\\\", not \\\"%s\\\"\"\n                % (test_case[\"correct_name\"], test_case[\"correct_name\"],\n                   test_case[\"incorrect_name\"]))\n            all_problems.append(\n                output_api.PresubmitPromptWarning(message, items=problems))\n\n    return all_problems\n\n\ndef CheckForTooLargeFiles(input_api, output_api):\n    \"\"\"Avoid large files, especially binary files, in the repository since\n    git doesn't scale well for those. They will be in everyone's repo\n    clones forever, forever making Chromium slower to clone and work\n    with.\"\"\"\n\n    # Uploading files to cloud storage is not trivial so we don't want\n    # to set the limit too low, but the upper limit for \"normal\" large\n    # files seems to be 1-2 MB, with a handful around 5-8 MB, so\n    # anything over 20 MB is exceptional.\n    TOO_LARGE_FILE_SIZE_LIMIT = 20 * 1024 * 1024\n\n    too_large_files = []\n    for f in input_api.AffectedFiles():\n        # Check both added and modified files (but not deleted files).\n        if f.Action() in ('A', 'M'):\n            size = input_api.os_path.getsize(f.AbsoluteLocalPath())\n            if size > TOO_LARGE_FILE_SIZE_LIMIT:\n                too_large_files.append(\"%s: %d bytes\" % (f.LocalPath(), size))\n\n    if too_large_files:\n        message = (\n            'Do not commit large files to git since git scales badly for those.\\n'\n            +\n            'Instead put the large files in cloud storage and use DEPS to\\n' +\n            'fetch them.\\n' + '\\n'.join(too_large_files))\n        return [\n            output_api.PresubmitError('Too large files found in commit',\n                                      long_text=message + '\\n')\n        ]\n    else:\n        return []\n\n\ndef CheckFuzzTargetsOnUpload(input_api, output_api):\n    \"\"\"Checks specific for fuzz target sources.\"\"\"\n    EXPORTED_SYMBOLS = [\n        'LLVMFuzzerInitialize',\n        'LLVMFuzzerCustomMutator',\n        'LLVMFuzzerCustomCrossOver',\n        'LLVMFuzzerMutate',\n    ]\n\n    REQUIRED_HEADER = '#include \"testing/libfuzzer/libfuzzer_exports.h\"'\n\n    def FilterFile(affected_file):\n        \"\"\"Ignore libFuzzer source code.\"\"\"\n        files_to_check = r'.*fuzz.*\\.(h|hpp|hcc|cc|cpp|cxx)$'\n        files_to_skip = r\"^third_party/libFuzzer\"\n\n        return input_api.FilterSourceFile(affected_file,\n                                          files_to_check=[files_to_check],\n                                          files_to_skip=[files_to_skip])\n\n    files_with_missing_header = []\n    for f in input_api.AffectedSourceFiles(FilterFile):\n        contents = input_api.ReadFile(f, 'r')\n        if REQUIRED_HEADER in contents:\n            continue\n\n        if any(symbol in contents for symbol in EXPORTED_SYMBOLS):\n            files_with_missing_header.append(f.LocalPath())\n\n    if not files_with_missing_header:\n        return []\n\n    long_text = (\n        'If you define any of the libFuzzer optional functions (%s), it is '\n        'recommended to add \\'%s\\' directive. Otherwise, the fuzz target may '\n        'work incorrectly on Mac (crbug.com/687076).\\nNote that '\n        'LLVMFuzzerInitialize should not be used, unless your fuzz target needs '\n        'to access command line arguments passed to the fuzzer. Instead, prefer '\n        'static initialization and shared resources as documented in '\n        'https://chromium.googlesource.com/chromium/src/+/main/testing/'\n        'libfuzzer/efficient_fuzzing.md#simplifying-initialization_cleanup.\\n'\n        % (', '.join(EXPORTED_SYMBOLS), REQUIRED_HEADER))\n\n    return [\n        output_api.PresubmitPromptWarning(message=\"Missing '%s' in:\" %\n                                          REQUIRED_HEADER,\n                                          items=files_with_missing_header,\n                                          long_text=long_text)\n    ]\n\n\ndef _CheckNewImagesWarning(input_api, output_api):\n    \"\"\"\n    Warns authors who add images into the repo to make sure their images are\n    optimized before committing.\n    \"\"\"\n    images_added = False\n    image_paths = []\n    errors = []\n    filter_lambda = lambda x: input_api.FilterSourceFile(\n        x,\n        files_to_skip=(('(?i).*test', r'.*\\/junit\\/') + input_api.\n                       DEFAULT_FILES_TO_SKIP),\n        files_to_check=[r'.*\\/(drawable|mipmap)'])\n    for f in input_api.AffectedFiles(include_deletes=False,\n                                     file_filter=filter_lambda):\n        local_path = f.LocalPath().lower()\n        if any(\n                local_path.endswith(extension)\n                for extension in _IMAGE_EXTENSIONS):\n            images_added = True\n            image_paths.append(f)\n    if images_added:\n        errors.append(\n            output_api.PresubmitPromptWarning(\n                'It looks like you are trying to commit some images. If these are '\n                'non-test-only images, please make sure to read and apply the tips in '\n                'https://chromium.googlesource.com/chromium/src/+/HEAD/docs/speed/'\n                'binary_size/optimization_advice.md#optimizing-images\\nThis check is '\n                'FYI only and will not block your CL on the CQ.', image_paths))\n    return errors\n\n\ndef ChecksAndroidSpecificOnUpload(input_api, output_api):\n    \"\"\"Groups upload checks that target android code.\"\"\"\n    results = []\n    results.extend(_CheckAndroidCrLogUsage(input_api, output_api))\n    results.extend(_CheckAndroidDebuggableBuild(input_api, output_api))\n    results.extend(_CheckAndroidNewMdpiAssetLocation(input_api, output_api))\n    results.extend(_CheckAndroidToastUsage(input_api, output_api))\n    results.extend(_CheckAndroidTestAnnotationUsage(input_api, output_api))\n    results.extend(_CheckAndroidWebkitImports(input_api, output_api))\n    results.extend(_CheckAndroidXmlStyle(input_api, output_api, True))\n    results.extend(_CheckNewImagesWarning(input_api, output_api))\n    results.extend(_CheckAndroidNoBannedImports(input_api, output_api))\n    results.extend(_CheckAndroidInfoBarDeprecation(input_api, output_api))\n    return results\n\n\ndef ChecksAndroidSpecificOnCommit(input_api, output_api):\n    \"\"\"Groups commit checks that target android code.\"\"\"\n    results = []\n    results.extend(_CheckAndroidXmlStyle(input_api, output_api, False))\n    return results\n\n# TODO(chrishall): could we additionally match on any path owned by\n#                  ui/accessibility/OWNERS ?\n_ACCESSIBILITY_PATHS = (\n    r\"^chrome/browser.*/accessibility/\",\n    r\"^chrome/browser/extensions/api/automation.*/\",\n    r\"^chrome/renderer/extensions/accessibility_.*\",\n    r\"^chrome/tests/data/accessibility/\",\n    r\"^content/browser/accessibility/\",\n    r\"^content/renderer/accessibility/\",\n    r\"^content/tests/data/accessibility/\",\n    r\"^extensions/renderer/api/automation/\",\n    r\"^services/accessibility/\",\n    r\"^services/screen_ai/\",\n    r\"^ui/accessibility/\",\n    r\"^ui/views/accessibility/\",\n)\n\ndef CheckAccessibilityRelnotesField(input_api, output_api):\n    \"\"\"Checks that commits to accessibility code contain an AX-Relnotes field in\n    their commit message.\"\"\"\n\n    def FileFilter(affected_file):\n        paths = _ACCESSIBILITY_PATHS\n        return input_api.FilterSourceFile(affected_file, files_to_check=paths)\n\n    # Only consider changes affecting accessibility paths.\n    if not any(input_api.AffectedFiles(file_filter=FileFilter)):\n        return []\n\n    # AX-Relnotes can appear in either the description or the footer.\n    # When searching the description, require 'AX-Relnotes:' to appear at the\n    # beginning of a line.\n    ax_regex = input_api.re.compile('ax-relnotes[:=]')\n    description_has_relnotes = any(\n        ax_regex.match(line)\n        for line in input_api.change.DescriptionText().lower().splitlines())\n\n    footer_relnotes = input_api.change.GitFootersFromDescription().get(\n        'AX-Relnotes', [])\n    if description_has_relnotes or footer_relnotes:\n        return []\n\n    # TODO(chrishall): link to Relnotes documentation in message.\n    message = (\n        \"Missing 'AX-Relnotes:' field required for accessibility changes\"\n        \"\\n  please add 'AX-Relnotes: [release notes].' to describe any \"\n        \"user-facing changes\"\n        \"\\n  otherwise add 'AX-Relnotes: n/a.' if this change has no \"\n        \"user-facing effects\"\n        \"\\n  if this is confusing or annoying then please contact members \"\n        \"of ui/accessibility/OWNERS.\")\n\n    return [output_api.PresubmitNotifyResult(message)]\n\n\n_ACCESSIBILITY_ARIA_METHOD_CANDIDATES_PATTERNS = r'(\\-\\>|\\.)(get|has|FastGet|FastHas)Attribute\\('\n\n_ACCESSIBILITY_ARIA_BAD_PARAMS_PATTERNS = (\n    r\"\\(html_names::kAria(.*)Attr\\)\",\n    r\"\\(html_names::kRoleAttr\\)\"\n)\n\n_ACCESSIBILITY_ARIA_FILE_CANDIDATES_PATTERNS = (\n    r\".*/accessibility/.*.(cc|h)\",\n    r\".*/ax_.*.(cc|h)\"\n)\n\ndef CheckAccessibilityAriaElementAttributeGetters(input_api, output_api):\n    \"\"\"Checks that the blink accessibility code follows the defined patterns\n    for checking aria attributes, so that ElementInternals is not bypassed.\"\"\"\n\n    # Limit to accessibility-related files.\n    def FileFilter(affected_file):\n        paths = _ACCESSIBILITY_ARIA_FILE_CANDIDATES_PATTERNS\n        return input_api.FilterSourceFile(affected_file, files_to_check=paths)\n\n    aria_method_regex = input_api.re.compile(_ACCESSIBILITY_ARIA_METHOD_CANDIDATES_PATTERNS)\n    aria_bad_params_regex = input_api.re.compile(\n        \"|\".join(_ACCESSIBILITY_ARIA_BAD_PARAMS_PATTERNS)\n    )\n    problems = []\n\n    for f in input_api.AffectedSourceFiles(FileFilter):\n        for line_num, line in f.ChangedContents():\n            if aria_method_regex.search(line) and aria_bad_params_regex.search(line):\n                problems.append(f\"{f.LocalPath()}:{line_num}\\n    {line.strip()}\")\n\n    if problems:\n        return [\n            output_api.PresubmitPromptWarning(\n                \"Accessibility code should not use element methods to get or check\"\n                \"\\nthe presence of aria attributes\"\n                \"\\nPlease use ARIA-specific attribute access, e.g. HasAriaAttribute(),\"\n                \"\\nAriaTokenAttribute(), AriaBoolAttribute(), AriaBooleanAttribute(),\"\n                \"\\nAriaFloatAttribute().\",\n                problems,\n            )\n        ]\n    return []\n\n# string pattern, sequence of strings to show when pattern matches,\n# error flag. True if match is a presubmit error, otherwise it's a warning.\n_NON_INCLUSIVE_TERMS = (\n    (\n        # Note that \\b pattern in python re is pretty particular. In this\n        # regexp, 'class WhiteList ...' will match, but 'class FooWhiteList\n        # ...' will not. This may require some tweaking to catch these cases\n        # without triggering a lot of false positives. Leaving it naive and\n        # less matchy for now.\n        r'/(?i)\\b((black|white)list|master|slave)\\b',  # nocheck\n        (\n            'Please don\\'t use blacklist, whitelist, '  # nocheck\n            'or slave in your',  # nocheck\n            'code and make every effort to use other terms. Using \"// nocheck\"',\n            '\"# nocheck\" or \"<!-- nocheck -->\"',\n            'at the end of the offending line will bypass this PRESUBMIT error',\n            'but avoid using this whenever possible. Reach out to',\n            'community@chromium.org if you have questions'),\n        True),)\n\ndef ChecksCommon(input_api, output_api):\n    \"\"\"Checks common to both upload and commit.\"\"\"\n    results = []\n    results.extend(\n        input_api.canned_checks.PanProjectChecks(\n            input_api, output_api, excluded_paths=_EXCLUDED_PATHS))\n\n    author = input_api.change.author_email\n    if author and author not in _KNOWN_ROBOTS:\n        results.extend(\n            input_api.canned_checks.CheckAuthorizedAuthor(\n                input_api, output_api))\n\n    results.extend(\n        input_api.canned_checks.CheckChangeHasNoTabs(\n            input_api,\n            output_api,\n            source_file_filter=lambda x: x.LocalPath().endswith('.grd')))\n    results.extend(\n        input_api.RunTests(\n            input_api.canned_checks.CheckVPythonSpec(input_api, output_api)))\n\n    dirmd = 'dirmd.bat' if input_api.is_windows else 'dirmd'\n    dirmd_bin = input_api.os_path.join(input_api.PresubmitLocalPath(),\n                                       'third_party', 'depot_tools', dirmd)\n    results.extend(\n        input_api.RunTests(\n            input_api.canned_checks.CheckDirMetadataFormat(\n                input_api, output_api, dirmd_bin)))\n    results.extend(\n        input_api.canned_checks.CheckOwnersDirMetadataExclusive(\n            input_api, output_api))\n    results.extend(\n        input_api.canned_checks.CheckNoNewMetadataInOwners(\n            input_api, output_api))\n    results.extend(\n        input_api.canned_checks.CheckInclusiveLanguage(\n            input_api,\n            output_api,\n            excluded_directories_relative_path=[\n                'infra', 'inclusive_language_presubmit_exempt_dirs.txt'\n            ],\n            non_inclusive_terms=_NON_INCLUSIVE_TERMS))\n\n    presubmit_py_filter = lambda f: input_api.FilterSourceFile(\n        f, files_to_check=[r'.*PRESUBMIT\\.py$'])\n    for f in input_api.AffectedFiles(include_deletes=False,\n                                     file_filter=presubmit_py_filter):\n        full_path = input_api.os_path.dirname(f.AbsoluteLocalPath())\n        test_file = input_api.os_path.join(full_path, 'PRESUBMIT_test.py')\n        # The PRESUBMIT.py file (and the directory containing it) might have\n        # been affected by being moved or removed, so only try to run the tests\n        # if they still exist.\n        if not input_api.os_path.exists(test_file):\n            continue\n\n        results.extend(\n            input_api.canned_checks.RunUnitTestsInDirectory(\n                input_api,\n                output_api,\n                full_path,\n                files_to_check=[r'^PRESUBMIT_test\\.py$']))\n    return results\n\n\ndef CheckPatchFiles(input_api, output_api):\n    problems = [\n        f.LocalPath() for f in input_api.AffectedFiles()\n        if f.LocalPath().endswith(('.orig', '.rej'))\n    ]\n    # Cargo.toml.orig files are part of third-party crates downloaded from\n    # crates.io and should be included.\n    problems = [f for f in problems if not f.endswith('Cargo.toml.orig')]\n    if problems:\n        return [\n            output_api.PresubmitError(\"Don't commit .rej and .orig files.\",\n                                      problems)\n        ]\n    else:\n        return []\n\n\ndef CheckBuildConfigMacrosWithoutInclude(input_api, output_api):\n    # Excludes OS_CHROMEOS, which is not defined in build_config.h.\n    macro_re = input_api.re.compile(\n        r'^\\s*#(el)?if.*\\bdefined\\(((COMPILER_|ARCH_CPU_|WCHAR_T_IS_)[^)]*)')\n    include_re = input_api.re.compile(r'^#include\\s+\"build/build_config.h\"',\n                                      input_api.re.MULTILINE)\n    extension_re = input_api.re.compile(r'\\.[a-z]+$')\n    errors = []\n    config_h_file = input_api.os_path.join('build', 'build_config.h')\n    for f in input_api.AffectedFiles(include_deletes=False):\n        # The build-config macros are allowed to be used in build_config.h\n        # without including itself.\n        if f.LocalPath() == config_h_file:\n            continue\n        if not f.LocalPath().endswith(\n            ('.h', '.c', '.cc', '.cpp', '.m', '.mm')):\n            continue\n\n        found_line_number = None\n        found_macro = None\n        all_lines = input_api.ReadFile(f, 'r').splitlines()\n        for line_num, line in enumerate(all_lines):\n            match = macro_re.search(line)\n            if match:\n                found_line_number = line_num\n                found_macro = match.group(2)\n                break\n        if not found_line_number:\n            continue\n\n        found_include_line = -1\n        for line_num, line in enumerate(all_lines):\n            if include_re.search(line):\n                found_include_line = line_num\n                break\n        if found_include_line >= 0 and found_include_line < found_line_number:\n            continue\n\n        if not f.LocalPath().endswith('.h'):\n            primary_header_path = extension_re.sub('.h', f.AbsoluteLocalPath())\n            try:\n                content = input_api.ReadFile(primary_header_path, 'r')\n                if include_re.search(content):\n                    continue\n            except IOError:\n                pass\n        errors.append('%s:%d %s macro is used without first including build/'\n                      'build_config.h.' %\n                      (f.LocalPath(), found_line_number, found_macro))\n    if errors:\n        return [output_api.PresubmitPromptWarning('\\n'.join(errors))]\n    return []\n\n\ndef CheckForSuperfluousStlIncludesInHeaders(input_api, output_api):\n    stl_include_re = input_api.re.compile(r'^#include\\s+<('\n                                          r'algorithm|'\n                                          r'array|'\n                                          r'limits|'\n                                          r'list|'\n                                          r'map|'\n                                          r'memory|'\n                                          r'queue|'\n                                          r'set|'\n                                          r'string|'\n                                          r'unordered_map|'\n                                          r'unordered_set|'\n                                          r'utility|'\n                                          r'vector)>')\n    std_namespace_re = input_api.re.compile(r'std::')\n    errors = []\n    for f in input_api.AffectedFiles():\n        if not _IsCPlusPlusHeaderFile(input_api, f.LocalPath()):\n            continue\n\n        uses_std_namespace = False\n        has_stl_include = False\n        for line in f.NewContents():\n            if has_stl_include and uses_std_namespace:\n                break\n\n            if not has_stl_include and stl_include_re.search(line):\n                has_stl_include = True\n                continue\n\n            if not uses_std_namespace and (std_namespace_re.search(line)\n                    or 'no-std-usage-because-pch-file' in line):\n                uses_std_namespace = True\n                continue\n\n        if has_stl_include and not uses_std_namespace:\n            errors.append(\n                '%s: Includes STL header(s) but does not reference std::' %\n                f.LocalPath())\n    if errors:\n        return [output_api.PresubmitPromptWarning('\\n'.join(errors))]\n    return []\n\n\ndef _CheckForDeprecatedOSMacrosInFile(input_api, f):\n    \"\"\"Check for sensible looking, totally invalid OS macros.\"\"\"\n    preprocessor_statement = input_api.re.compile(r'^\\s*#')\n    os_macro = input_api.re.compile(r'defined\\(OS_([^)]+)\\)')\n    results = []\n    for lnum, line in f.ChangedContents():\n        if preprocessor_statement.search(line):\n            for match in os_macro.finditer(line):\n                results.append(\n                    '  %s:%d: %s' %\n                    (f.LocalPath(), lnum, 'defined(OS_' + match.group(1) +\n                     ') -> BUILDFLAG(IS_' + match.group(1) + ')'))\n    return results\n\n\ndef CheckForDeprecatedOSMacros(input_api, output_api):\n    \"\"\"Check all affected files for invalid OS macros.\"\"\"\n    bad_macros = []\n    # The OS_ macros are allowed to be used in build/build_config.h.\n    config_h_file = input_api.os_path.join('build', 'build_config.h')\n    for f in input_api.AffectedSourceFiles(None):\n        if not f.LocalPath().endswith(('.py', '.js', '.html', '.css', '.md')) \\\n                and f.LocalPath() != config_h_file:\n            bad_macros.extend(_CheckForDeprecatedOSMacrosInFile(input_api, f))\n\n    if not bad_macros:\n        return []\n\n    return [\n        output_api.PresubmitError(\n            'OS macros have been deprecated. Please use BUILDFLAGs instead (still '\n            'defined in build_config.h):', bad_macros)\n    ]\n\n\ndef _CheckForInvalidIfDefinedMacrosInFile(input_api, f):\n    \"\"\"Check all affected files for invalid \"if defined\" macros.\"\"\"\n    ALWAYS_DEFINED_MACROS = (\n        \"TARGET_CPU_PPC\",\n        \"TARGET_CPU_PPC64\",\n        \"TARGET_CPU_68K\",\n        \"TARGET_CPU_X86\",\n        \"TARGET_CPU_ARM\",\n        \"TARGET_CPU_MIPS\",\n        \"TARGET_CPU_SPARC\",\n        \"TARGET_CPU_ALPHA\",\n        \"TARGET_IPHONE_SIMULATOR\",\n        \"TARGET_OS_EMBEDDED\",\n        \"TARGET_OS_IPHONE\",\n        \"TARGET_OS_MAC\",\n        \"TARGET_OS_UNIX\",\n        \"TARGET_OS_WIN32\",\n    )\n    ifdef_macro = input_api.re.compile(\n        r'^\\s*#.*(?:ifdef\\s|defined\\()([^\\s\\)]+)')\n    results = []\n    for lnum, line in f.ChangedContents():\n        for match in ifdef_macro.finditer(line):\n            if match.group(1) in ALWAYS_DEFINED_MACROS:\n                always_defined = ' %s is always defined. ' % match.group(1)\n                did_you_mean = 'Did you mean \\'#if %s\\'?' % match.group(1)\n                results.append(\n                    '    %s:%d %s\\n\\t%s' %\n                    (f.LocalPath(), lnum, always_defined, did_you_mean))\n    return results\n\n\ndef CheckForInvalidIfDefinedMacros(input_api, output_api):\n    \"\"\"Check all affected files for invalid \"if defined\" macros.\"\"\"\n    SKIPPED_PATHS = [\n        'base/allocator/partition_allocator/src/partition_alloc/build_config.h',\n        'build/build_config.h',\n        'third_party/abseil-cpp/',\n        'third_party/sqlite/',\n    ]\n    def affected_files_filter(f):\n        # Normalize the local path to Linux-style path separators so that the\n        # path comparisons work on Windows as well.\n        path = f.LocalPath().replace('\\\\', '/')\n\n        for skipped_path in SKIPPED_PATHS:\n            if path.startswith(skipped_path):\n                return False\n\n        return path.endswith(('.h', '.c', '.cc', '.m', '.mm'))\n\n    bad_macros = []\n    for f in input_api.AffectedSourceFiles(affected_files_filter):\n        bad_macros.extend(_CheckForInvalidIfDefinedMacrosInFile(input_api, f))\n\n    if not bad_macros:\n        return []\n\n    return [\n        output_api.PresubmitError(\n            'Found ifdef check on always-defined macro[s]. Please fix your code\\n'\n            'or check the list of ALWAYS_DEFINED_MACROS in src/PRESUBMIT.py.',\n            bad_macros)\n    ]\n\ndef CheckForIPCRules(input_api, output_api):\n    \"\"\"Check for same IPC rules described in\n    http://www.chromium.org/Home/chromium-security/education/security-tips-for-ipc\n    \"\"\"\n    base_pattern = r'IPC_ENUM_TRAITS\\('\n    inclusion_pattern = input_api.re.compile(r'(%s)' % base_pattern)\n    comment_pattern = input_api.re.compile(r'//.*(%s)' % base_pattern)\n\n    problems = []\n    for f in input_api.AffectedSourceFiles(None):\n        local_path = f.LocalPath()\n        if not local_path.endswith('.h'):\n            continue\n        for line_number, line in f.ChangedContents():\n            if inclusion_pattern.search(\n                    line) and not comment_pattern.search(line):\n                problems.append('%s:%d\\n    %s' %\n                                (local_path, line_number, line.strip()))\n\n    if problems:\n        return [\n            output_api.PresubmitPromptWarning(_IPC_ENUM_TRAITS_DEPRECATED,\n                                              problems)\n        ]\n    else:\n        return []\n\n\ndef CheckForLongPathnames(input_api, output_api):\n    \"\"\"Check to make sure no files being submitted have long paths.\n    This causes issues on Windows.\n    \"\"\"\n    problems = []\n    for f in input_api.AffectedTestableFiles():\n        local_path = f.LocalPath()\n        # Windows has a path limit of 260 characters. Limit path length to 200 so\n        # that we have some extra for the prefix on dev machines and the bots.\n        if (local_path.startswith('third_party/blink/web_tests/platform/') and\n            not local_path.startswith('third_party/blink/web_tests/platform/win')):\n            # Do not check length of the path for files not used by Windows\n            continue\n        if len(local_path) > 200:\n            problems.append(local_path)\n\n    if problems:\n        return [output_api.PresubmitError(_LONG_PATH_ERROR, problems)]\n    else:\n        return []\n\n\ndef CheckForIncludeGuards(input_api, output_api):\n    \"\"\"Check that header files have proper guards against multiple inclusion.\n    If a file should not have such guards (and it probably should) then it\n    should include the string \"no-include-guard-because-multiply-included\" or\n    \"no-include-guard-because-pch-file\".\n    \"\"\"\n\n    def is_chromium_header_file(f):\n        # We only check header files under the control of the Chromium\n        # project. This excludes:\n        # - third_party/*, except blink.\n        # - base/allocator/partition_allocator/: PartitionAlloc is a standalone\n        #   library used outside of Chrome. Includes are referenced from its\n        #   own base directory. It has its own `CheckForIncludeGuards`\n        #   PRESUBMIT.py check.\n        # - *_message_generator.h: They use include guards in a special,\n        #   non-typical way.\n        file_with_path = input_api.os_path.normpath(f.LocalPath())\n        return (file_with_path.endswith('.h')\n                and not file_with_path.endswith('_message_generator.h')\n                and not file_with_path.endswith('com_imported_mstscax.h')\n                and not file_with_path.startswith(\n                    input_api.os_path.join('base', 'allocator',\n                                           'partition_allocator'))\n                and (not file_with_path.startswith('third_party')\n                     or file_with_path.startswith(\n                         input_api.os_path.join('third_party', 'blink'))))\n\n    def replace_special_with_underscore(string):\n        return input_api.re.sub(r'[+\\\\/.-]', '_', string)\n\n    errors = []\n\n    for f in input_api.AffectedSourceFiles(is_chromium_header_file):\n        guard_name = None\n        guard_line_number = None\n        seen_guard_end = False\n        bypass_checks_at_end_of_file = False\n\n        file_with_path = input_api.os_path.normpath(f.LocalPath())\n        base_file_name = input_api.os_path.splitext(\n            input_api.os_path.basename(file_with_path))[0]\n        upper_base_file_name = base_file_name.upper()\n\n        expected_guard = replace_special_with_underscore(\n            file_with_path.upper() + '_')\n\n        # For \"path/elem/file_name.h\" we should really only accept\n        # PATH_ELEM_FILE_NAME_H_ per coding style.  Unfortunately there\n        # are too many (1000+) files with slight deviations from the\n        # coding style. The most important part is that the include guard\n        # is there, and that it's unique, not the name so this check is\n        # forgiving for existing files.\n        #\n        # As code becomes more uniform, this could be made stricter.\n\n        guard_name_pattern_list = [\n            # Anything with the right suffix (maybe with an extra _).\n            r'\\w+_H__?',\n\n            # To cover include guards with old Blink style.\n            r'\\w+_h',\n\n            # Anything including the uppercase name of the file.\n            r'\\w*' + input_api.re.escape(\n                replace_special_with_underscore(upper_base_file_name)) +\n            r'\\w*',\n        ]\n        guard_name_pattern = '|'.join(guard_name_pattern_list)\n        guard_pattern = input_api.re.compile(r'#ifndef\\s+(' +\n                                             guard_name_pattern + ')')\n\n        for line_number, line in enumerate(f.NewContents()):\n            if ('no-include-guard-because-multiply-included' in line\n                    or 'no-include-guard-because-pch-file' in line):\n                bypass_checks_at_end_of_file = True\n                break\n\n            if guard_name is None:\n                match = guard_pattern.match(line)\n                if match:\n                    guard_name = match.group(1)\n                    guard_line_number = line_number\n\n                    # We allow existing files to use include guards whose names\n                    # don't match the chromium style guide, but new files should\n                    # get it right.\n                    if guard_name != expected_guard:\n                        if f.Action() == 'A':  # If file was just 'A'dded\n                            errors.append(\n                                output_api.PresubmitPromptWarning(\n                                    'Header using the wrong include guard name %s'\n                                    % guard_name, [\n                                        '%s:%d' %\n                                        (f.LocalPath(), line_number + 1)\n                                    ], 'Expected: %r\\nFound:    %r' %\n                                    (expected_guard, guard_name)))\n            else:\n                # The line after #ifndef should have a #define of the same name.\n                if line_number == guard_line_number + 1:\n                    expected_line = '#define %s' % guard_name\n                    if line != expected_line:\n                        errors.append(\n                            output_api.PresubmitPromptWarning(\n                                'Missing \"%s\" for include guard' %\n                                expected_line,\n                                ['%s:%d' % (f.LocalPath(), line_number + 1)],\n                                'Expected: %r\\nGot: %r' %\n                                (expected_line, line)))\n\n                if not seen_guard_end and line == '#endif  // %s' % guard_name:\n                    seen_guard_end = True\n                elif seen_guard_end:\n                    if line.strip() != '':\n                        errors.append(\n                            output_api.PresubmitPromptWarning(\n                                'Include guard %s not covering the whole file'\n                                % (guard_name), [f.LocalPath()]))\n                        break  # Nothing else to check and enough to warn once.\n\n        if bypass_checks_at_end_of_file:\n            continue\n\n        if guard_name is None:\n            errors.append(\n                output_api.PresubmitPromptWarning(\n                    'Missing include guard in %s\\n'\n                    'Recommended name: %s\\n'\n                    'This check can be disabled by having the string\\n'\n                    '\"no-include-guard-because-multiply-included\" or\\n'\n                    '\"no-include-guard-because-pch-file\" in the header.'\n                    % (f.LocalPath(), expected_guard)))\n        elif not seen_guard_end:\n            errors.append(\n                output_api.PresubmitPromptWarning(\n                    'Incorrect or missing include guard #endif in %s\\n'\n                    'Recommended #endif comment: // %s'\n                    % (f.LocalPath(), expected_guard)))\n\n    return errors\n\n\ndef CheckForWindowsLineEndings(input_api, output_api):\n    \"\"\"Check source code and known ascii text files for Windows style line\n    endings.\n    \"\"\"\n    known_text_files = r'.*\\.(txt|html|htm|py|gyp|gypi|gn|isolate|icon)$'\n\n    file_inclusion_pattern = (known_text_files,\n                              r'.+%s' % _IMPLEMENTATION_EXTENSIONS,\n                              r'.+%s' % _HEADER_EXTENSIONS)\n\n    problems = []\n    source_file_filter = lambda f: input_api.FilterSourceFile(\n        f, files_to_check=file_inclusion_pattern, files_to_skip=None)\n    for f in input_api.AffectedSourceFiles(source_file_filter):\n        # Ignore test files that contain crlf intentionally.\n        if f.LocalPath().endswith('crlf.txt'):\n            continue\n        include_file = False\n        for line in input_api.ReadFile(f, 'r').splitlines(True):\n            if line.endswith('\\r\\n'):\n                include_file = True\n        if include_file:\n            problems.append(f.LocalPath())\n\n    if problems:\n        return [\n            output_api.PresubmitPromptWarning(\n                'Are you sure that you want '\n                'these files to contain Windows style line endings?\\n' +\n                '\\n'.join(problems))\n        ]\n\n    return []\n\n\ndef CheckIconFilesForLicenseHeaders(input_api, output_api):\n    \"\"\"Check that .icon files (which are fragments of C++) have license headers.\n    \"\"\"\n\n    icon_files = (r'.*\\.icon$', )\n\n    icons = lambda x: input_api.FilterSourceFile(x, files_to_check=icon_files)\n    return input_api.canned_checks.CheckLicense(input_api,\n                                                output_api,\n                                                source_file_filter=icons)\n\n\ndef CheckForUseOfChromeAppsDeprecations(input_api, output_api):\n    \"\"\"Check source code for use of Chrome App technologies being\n    deprecated.\n    \"\"\"\n\n    def _CheckForDeprecatedTech(input_api,\n                                output_api,\n                                detection_list,\n                                files_to_check=None,\n                                files_to_skip=None):\n\n        if (files_to_check or files_to_skip):\n            source_file_filter = lambda f: input_api.FilterSourceFile(\n                f, files_to_check=files_to_check, files_to_skip=files_to_skip)\n        else:\n            source_file_filter = None\n\n        problems = []\n\n        for f in input_api.AffectedSourceFiles(source_file_filter):\n            if f.Action() == 'D':\n                continue\n            for _, line in f.ChangedContents():\n                if any(detect in line for detect in detection_list):\n                    problems.append(f.LocalPath())\n\n        return problems\n\n    # to avoid this presubmit script triggering warnings\n    files_to_skip = ['PRESUBMIT.py', 'PRESUBMIT_test.py']\n\n    problems = []\n\n    # NMF: any files with extensions .nmf or NMF\n    _NMF_FILES = r'\\.(nmf|NMF)$'\n    problems += _CheckForDeprecatedTech(\n        input_api,\n        output_api,\n        detection_list=[''],  # any change to the file will trigger warning\n        files_to_check=[r'.+%s' % _NMF_FILES])\n\n    # MANIFEST: any manifest.json that in its diff includes \"app\":\n    _MANIFEST_FILES = r'(manifest\\.json)$'\n    problems += _CheckForDeprecatedTech(\n        input_api,\n        output_api,\n        detection_list=['\"app\":'],\n        files_to_check=[r'.*%s' % _MANIFEST_FILES])\n\n    # NaCl / PNaCl: any file that in its diff contains the strings in the list\n    problems += _CheckForDeprecatedTech(\n        input_api,\n        output_api,\n        detection_list=['config=nacl', 'enable-nacl', 'cpu=pnacl', 'nacl_io'],\n        files_to_skip=files_to_skip + [r\"^native_client_sdk/\"])\n\n    # PPAPI: any C/C++ file that in its diff includes a ppapi library\n    problems += _CheckForDeprecatedTech(\n        input_api,\n        output_api,\n        detection_list=['#include \"ppapi', '#include <ppapi'],\n        files_to_check=(r'.+%s' % _HEADER_EXTENSIONS,\n                        r'.+%s' % _IMPLEMENTATION_EXTENSIONS),\n        files_to_skip=[r\"^ppapi/\"])\n\n    if problems:\n        return [\n            output_api.PresubmitPromptWarning(\n                'You are adding/modifying code'\n                'related to technologies which will soon be deprecated (Chrome Apps, NaCl,'\n                ' PNaCl, PPAPI). See this blog post for more details:\\n'\n                'https://blog.chromium.org/2020/08/changes-to-chrome-app-support-timeline.html\\n'\n                'and this documentation for options to replace these technologies:\\n'\n                'https://developer.chrome.com/docs/apps/migration/\\n' +\n                '\\n'.join(problems))\n        ]\n\n    return []\n\n\ndef CheckSyslogUseWarningOnUpload(input_api, output_api, src_file_filter=None):\n    \"\"\"Checks that all source files use SYSLOG properly.\"\"\"\n    syslog_files = []\n    for f in input_api.AffectedSourceFiles(src_file_filter):\n        for line_number, line in f.ChangedContents():\n            if 'SYSLOG' in line:\n                syslog_files.append(f.LocalPath() + ':' + str(line_number))\n\n    if syslog_files:\n        return [\n            output_api.PresubmitPromptWarning(\n                'Please make sure there are no privacy sensitive bits of data in SYSLOG'\n                ' calls.\\nFiles to check:\\n',\n                items=syslog_files)\n        ]\n    return []\n\n\ndef CheckChangeOnUpload(input_api, output_api):\n    if input_api.version < [2, 0, 0]:\n        return [\n            output_api.PresubmitError(\n                \"Your depot_tools is out of date. \"\n                \"This PRESUBMIT.py requires at least presubmit_support version 2.0.0, \"\n                \"but your version is %d.%d.%d\" % tuple(input_api.version))\n        ]\n    results = []\n    results.extend(\n        input_api.canned_checks.CheckPatchFormatted(input_api, output_api))\n    return results\n\n\ndef CheckChangeOnCommit(input_api, output_api):\n    if input_api.version < [2, 0, 0]:\n        return [\n            output_api.PresubmitError(\n                \"Your depot_tools is out of date. \"\n                \"This PRESUBMIT.py requires at least presubmit_support version 2.0.0, \"\n                \"but your version is %d.%d.%d\" % tuple(input_api.version))\n        ]\n\n    results = []\n    # Make sure the tree is 'open'.\n    results.extend(\n        input_api.canned_checks.CheckTreeIsOpen(\n            input_api,\n            output_api,\n            json_url='http://chromium-status.appspot.com/current?format=json'))\n\n    results.extend(\n        input_api.canned_checks.CheckPatchFormatted(input_api, output_api))\n    results.extend(\n        input_api.canned_checks.CheckChangeHasBugField(input_api, output_api))\n    results.extend(\n        input_api.canned_checks.CheckChangeHasNoUnwantedTags(\n            input_api, output_api))\n    return results\n\n\ndef CheckStrings(input_api, output_api):\n    \"\"\"Check string ICU syntax validity and if translation screenshots exist.\"\"\"\n    # Skip translation screenshots check if a SkipTranslationScreenshotsCheck\n    # footer is set to true.\n    git_footers = input_api.change.GitFootersFromDescription()\n    skip_screenshot_check_footer = [\n        footer.lower() for footer in git_footers.get(\n            u'Skip-Translation-Screenshots-Check', [])\n    ]\n    run_screenshot_check = u'true' not in skip_screenshot_check_footer\n\n    import os\n    import re\n    import sys\n    from io import StringIO\n\n    new_or_added_paths = set(f.LocalPath() for f in input_api.AffectedFiles()\n                             if (f.Action() == 'A' or f.Action() == 'M'))\n    removed_paths = set(f.LocalPath()\n                        for f in input_api.AffectedFiles(include_deletes=True)\n                        if f.Action() == 'D')\n\n    affected_grds = [\n        f for f in input_api.AffectedFiles()\n        if f.LocalPath().endswith(('.grd', '.grdp'))\n    ]\n    affected_grds = [\n        f for f in affected_grds if not 'testdata' in f.LocalPath()\n    ]\n    if not affected_grds:\n        return []\n\n    affected_png_paths = [\n        f.LocalPath() for f in input_api.AffectedFiles()\n        if f.LocalPath().endswith('.png')\n    ]\n\n    # Check for screenshots. Developers can upload screenshots using\n    # tools/translation/upload_screenshots.py which finds and uploads\n    # images associated with .grd files (e.g. test_grd/IDS_STRING.png for the\n    # message named IDS_STRING in test.grd) and produces a .sha1 file (e.g.\n    # test_grd/IDS_STRING.png.sha1) for each png when the upload is successful.\n    #\n    # The logic here is as follows:\n    #\n    # - If the CL has a .png file under the screenshots directory for a grd\n    #   file, warn the developer. Actual images should never be checked into the\n    #   Chrome repo.\n    #\n    # - If the CL contains modified or new messages in grd files and doesn't\n    #   contain the corresponding .sha1 files, warn the developer to add images\n    #   and upload them via tools/translation/upload_screenshots.py.\n    #\n    # - If the CL contains modified or new messages in grd files and the\n    #   corresponding .sha1 files, everything looks good.\n    #\n    # - If the CL contains removed messages in grd files but the corresponding\n    #   .sha1 files aren't removed, warn the developer to remove them.\n    unnecessary_screenshots = []\n    invalid_sha1 = []\n    missing_sha1 = []\n    missing_sha1_modified = []\n    unnecessary_sha1_files = []\n\n    # This checks verifies that the ICU syntax of messages this CL touched is\n    # valid, and reports any found syntax errors.\n    # Without this presubmit check, ICU syntax errors in Chromium strings can land\n    # without developers being aware of them. Later on, such ICU syntax errors\n    # break message extraction for translation, hence would block Chromium\n    # translations until they are fixed.\n    icu_syntax_errors = []\n    sha1_pattern = input_api.re.compile(r'^[a-fA-F0-9]{40}$',\n                                        input_api.re.MULTILINE)\n\n    def _CheckScreenshotAdded(screenshots_dir, message_id):\n        sha1_path = input_api.os_path.join(screenshots_dir,\n                                           message_id + '.png.sha1')\n        if sha1_path not in new_or_added_paths:\n            missing_sha1.append(sha1_path)\n        elif not _CheckValidSha1(sha1_path):\n            invalid_sha1.append(sha1_path)\n\n    def _CheckScreenshotModified(screenshots_dir, message_id):\n        sha1_path = input_api.os_path.join(screenshots_dir,\n                                           message_id + '.png.sha1')\n        if sha1_path not in new_or_added_paths:\n            missing_sha1_modified.append(sha1_path)\n        elif not _CheckValidSha1(sha1_path):\n            invalid_sha1.append(sha1_path)\n\n    def _CheckValidSha1(sha1_path):\n        return sha1_pattern.search(\n            next(\"\\n\".join(f.NewContents()) for f in input_api.AffectedFiles()\n                 if f.LocalPath() == sha1_path))\n\n    def _CheckScreenshotRemoved(screenshots_dir, message_id):\n        sha1_path = input_api.os_path.join(screenshots_dir,\n                                           message_id + '.png.sha1')\n        if input_api.os_path.exists(\n                sha1_path) and sha1_path not in removed_paths:\n            unnecessary_sha1_files.append(sha1_path)\n\n    def _ValidateIcuSyntax(text, level, signatures):\n        \"\"\"Validates ICU syntax of a text string.\n\n        Check if text looks similar to ICU and checks for ICU syntax correctness\n        in this case. Reports various issues with ICU syntax and values of\n        variants. Supports checking of nested messages. Accumulate information of\n        each ICU messages found in the text for further checking.\n\n        Args:\n          text: a string to check.\n          level: a number of current nesting level.\n          signatures: an accumulator, a list of tuple of (level, variable,\n            kind, variants).\n\n        Returns:\n          None if a string is not ICU or no issue detected.\n          A tuple of (message, start index, end index) if an issue detected.\n        \"\"\"\n        valid_types = {\n            'plural': (frozenset(\n                ['=0', '=1', '=2', '=3', 'zero', 'one', 'two', 'few', 'many',\n                 'other']), frozenset(['=1', 'other'])),\n            'selectordinal': (frozenset(\n                ['=0', '=1', '=2', '=3', 'zero', 'one', 'two', 'few', 'many',\n                 'other']), frozenset(['one', 'other'])),\n            'select': (frozenset(), frozenset(['other'])),\n        }\n\n        # Check if the message looks like an attempt to use ICU\n        # plural. If yes - check if its syntax strictly matches ICU format.\n        like = re.match(r'^[^{]*\\{[^{]*\\b(plural|selectordinal|select)\\b',\n                        text)\n        if not like:\n            signatures.append((level, None, None, None))\n            return\n\n        # Check for valid prefix and suffix\n        m = re.match(\n            r'^([^{]*\\{)([a-zA-Z0-9_]+),\\s*'\n            r'(plural|selectordinal|select),\\s*'\n            r'(?:offset:\\d+)?\\s*(.*)', text, re.DOTALL)\n        if not m:\n            return (('This message looks like an ICU plural, '\n                     'but does not follow ICU syntax.'), like.start(),\n                    like.end())\n        starting, variable, kind, variant_pairs = m.groups()\n        variants, depth, last_pos = _ParseIcuVariants(variant_pairs,\n                                                      m.start(4))\n        if depth:\n            return ('Invalid ICU format. Unbalanced opening bracket', last_pos,\n                    len(text))\n        first = text[0]\n        ending = text[last_pos:]\n        if not starting:\n            return ('Invalid ICU format. No initial opening bracket',\n                    last_pos - 1, last_pos)\n        if not ending or '}' not in ending:\n            return ('Invalid ICU format. No final closing bracket',\n                    last_pos - 1, last_pos)\n        elif first != '{':\n            return ((\n                'Invalid ICU format. Extra characters at the start of a complex '\n                'message (go/icu-message-migration): \"%s\"') % starting, 0,\n                    len(starting))\n        elif ending != '}':\n            return ((\n                'Invalid ICU format. Extra characters at the end of a complex '\n                'message (go/icu-message-migration): \"%s\"') % ending,\n                    last_pos - 1, len(text) - 1)\n        if kind not in valid_types:\n            return (('Unknown ICU message type %s. '\n                     'Valid types are: plural, select, selectordinal') % kind,\n                    0, 0)\n        known, required = valid_types[kind]\n        defined_variants = set()\n        for variant, variant_range, value, value_range in variants:\n            start, end = variant_range\n            if variant in defined_variants:\n                return ('Variant \"%s\" is defined more than once' % variant,\n                        start, end)\n            elif known and variant not in known:\n                return ('Variant \"%s\" is not valid for %s message' %\n                        (variant, kind), start, end)\n            defined_variants.add(variant)\n            # Check for nested structure\n            res = _ValidateIcuSyntax(value[1:-1], level + 1, signatures)\n            if res:\n                return (res[0], res[1] + value_range[0] + 1,\n                        res[2] + value_range[0] + 1)\n        missing = required - defined_variants\n        if missing:\n            return ('Required variants missing: %s' % ', '.join(missing), 0,\n                    len(text))\n        signatures.append((level, variable, kind, defined_variants))\n\n    def _ParseIcuVariants(text, offset=0):\n        \"\"\"Parse variants part of ICU complex message.\n\n        Builds a tuple of variant names and values, as well as\n        their offsets in the input string.\n\n        Args:\n          text: a string to parse\n          offset: additional offset to add to positions in the text to get correct\n            position in the complete ICU string.\n\n        Returns:\n          List of tuples, each tuple consist of four fields: variant name,\n          variant name span (tuple of two integers), variant value, value\n          span (tuple of two integers).\n        \"\"\"\n        depth, start, end = 0, -1, -1\n        variants = []\n        key = None\n        for idx, char in enumerate(text):\n            if char == '{':\n                if not depth:\n                    start = idx\n                    chunk = text[end + 1:start]\n                    key = chunk.strip()\n                    pos = offset + end + 1 + chunk.find(key)\n                    span = (pos, pos + len(key))\n                depth += 1\n            elif char == '}':\n                if not depth:\n                    return variants, depth, offset + idx\n                depth -= 1\n                if not depth:\n                    end = idx\n                    variants.append((key, span, text[start:end + 1],\n                                     (offset + start, offset + end + 1)))\n        return variants, depth, offset + end + 1\n\n    try:\n        old_sys_path = sys.path\n        sys.path = sys.path + [\n            input_api.os_path.join(input_api.PresubmitLocalPath(), 'tools',\n                                   'translation')\n        ]\n        from helper import grd_helper\n    finally:\n        sys.path = old_sys_path\n\n    for f in affected_grds:\n        file_path = f.LocalPath()\n        old_id_to_msg_map = {}\n        new_id_to_msg_map = {}\n        # Note that this code doesn't check if the file has been deleted. This is\n        # OK because it only uses the old and new file contents and doesn't load\n        # the file via its path.\n        # It's also possible that a file's content refers to a renamed or deleted\n        # file via a <part> tag, such as <part file=\"now-deleted-file.grdp\">. This\n        # is OK as well, because grd_helper ignores <part> tags when loading .grd or\n        # .grdp files.\n        if file_path.endswith('.grdp'):\n            if f.OldContents():\n                old_id_to_msg_map = grd_helper.GetGrdpMessagesFromString(\n                    '\\n'.join(f.OldContents()))\n            if f.NewContents():\n                new_id_to_msg_map = grd_helper.GetGrdpMessagesFromString(\n                    '\\n'.join(f.NewContents()))\n        else:\n            file_dir = input_api.os_path.dirname(file_path) or '.'\n            if f.OldContents():\n                old_id_to_msg_map = grd_helper.GetGrdMessages(\n                    StringIO('\\n'.join(f.OldContents())), file_dir)\n            if f.NewContents():\n                new_id_to_msg_map = grd_helper.GetGrdMessages(\n                    StringIO('\\n'.join(f.NewContents())), file_dir)\n\n        grd_name, ext = input_api.os_path.splitext(\n            input_api.os_path.basename(file_path))\n        screenshots_dir = input_api.os_path.join(\n            input_api.os_path.dirname(file_path),\n            grd_name + ext.replace('.', '_'))\n\n        # Compute added, removed and modified message IDs.\n        old_ids = set(old_id_to_msg_map)\n        new_ids = set(new_id_to_msg_map)\n        added_ids = new_ids - old_ids\n        removed_ids = old_ids - new_ids\n        modified_ids = set([])\n        for key in old_ids.intersection(new_ids):\n            if (old_id_to_msg_map[key].ContentsAsXml('', True) !=\n                    new_id_to_msg_map[key].ContentsAsXml('', True)):\n                # The message content itself changed. Require an updated screenshot.\n                modified_ids.add(key)\n            elif old_id_to_msg_map[key].attrs['meaning'] != \\\n                new_id_to_msg_map[key].attrs['meaning']:\n                # The message meaning changed. We later check for a screenshot.\n                modified_ids.add(key)\n\n        if run_screenshot_check:\n            # Check the screenshot directory for .png files. Warn if there is any.\n            for png_path in affected_png_paths:\n                if png_path.startswith(screenshots_dir):\n                    unnecessary_screenshots.append(png_path)\n\n            for added_id in added_ids:\n                _CheckScreenshotAdded(screenshots_dir, added_id)\n\n            for modified_id in modified_ids:\n                _CheckScreenshotModified(screenshots_dir, modified_id)\n\n            for removed_id in removed_ids:\n                _CheckScreenshotRemoved(screenshots_dir, removed_id)\n\n        # Check new and changed strings for ICU syntax errors.\n        for key in added_ids.union(modified_ids):\n            msg = new_id_to_msg_map[key].ContentsAsXml('', True)\n            err = _ValidateIcuSyntax(msg, 0, [])\n            if err is not None:\n                icu_syntax_errors.append(str(key) + ': ' + str(err[0]))\n\n    results = []\n    if run_screenshot_check:\n        if unnecessary_screenshots:\n            results.append(\n                output_api.PresubmitError(\n                    'Do not include actual screenshots in the changelist. Run '\n                    'tools/translate/upload_screenshots.py to upload them instead:',\n                    sorted(unnecessary_screenshots)))\n\n        if missing_sha1:\n            results.append(\n                output_api.PresubmitError(\n                    'You are adding UI strings.\\n'\n                    'To ensure the best translations, take screenshots of the relevant UI '\n                    '(https://g.co/chrome/translation) and add these files to your '\n                    'changelist:', sorted(missing_sha1)))\n\n        if invalid_sha1:\n            results.append(\n                output_api.PresubmitError(\n                    'The following files do not seem to contain valid sha1 hashes. '\n                    'Make sure they contain hashes created by '\n                    'tools/translate/upload_screenshots.py:', sorted(invalid_sha1)))\n\n        if missing_sha1_modified:\n            results.append(\n                output_api.PresubmitError(\n                    'You are modifying UI strings or their meanings.\\n'\n                    'To ensure the best translations, take screenshots of the relevant UI '\n                    '(https://g.co/chrome/translation) and add these files to your '\n                    'changelist:', sorted(missing_sha1_modified)))\n\n        if unnecessary_sha1_files:\n            results.append(\n                output_api.PresubmitError(\n                    'You removed strings associated with these files. Remove:',\n                    sorted(unnecessary_sha1_files)))\n    else:\n        results.append(\n            output_api.PresubmitPromptOrNotify('Skipping translation '\n                                               'screenshots check.'))\n\n    if icu_syntax_errors:\n        results.append(\n            output_api.PresubmitPromptWarning(\n                'ICU syntax errors were found in the following strings (problems or '\n                'feedback? Contact rainhard@chromium.org):',\n                items=icu_syntax_errors))\n\n    return results\n\n\ndef CheckTranslationExpectations(input_api, output_api,\n                                  repo_root=None,\n                                  translation_expectations_path=None,\n                                  grd_files=None):\n    import sys\n    affected_grds = [\n        f for f in input_api.AffectedFiles()\n        if (f.LocalPath().endswith('.grd') or f.LocalPath().endswith('.grdp'))\n    ]\n    if not affected_grds:\n        return []\n\n    try:\n        old_sys_path = sys.path\n        sys.path = sys.path + [\n            input_api.os_path.join(input_api.PresubmitLocalPath(), 'tools',\n                                   'translation')\n        ]\n        from helper import git_helper\n        from helper import translation_helper\n    finally:\n        sys.path = old_sys_path\n\n    # Check that translation expectations can be parsed and we can get a list of\n    # translatable grd files. |repo_root| and |translation_expectations_path| are\n    # only passed by tests.\n    if not repo_root:\n        repo_root = input_api.PresubmitLocalPath()\n    if not translation_expectations_path:\n        translation_expectations_path = input_api.os_path.join(\n            repo_root, 'tools', 'gritsettings', 'translation_expectations.pyl')\n    if not grd_files:\n        grd_files = git_helper.list_grds_in_repository(repo_root)\n\n    # Ignore bogus grd files used only for testing\n    # ui/webui/resources/tools/generate_grd.py.\n    ignore_path = input_api.os_path.join('ui', 'webui', 'resources', 'tools',\n                                         'tests')\n    grd_files = [p for p in grd_files if ignore_path not in p]\n\n    try:\n        translation_helper.get_translatable_grds(\n            repo_root, grd_files, translation_expectations_path)\n    except Exception as e:\n        return [\n            output_api.PresubmitNotifyResult(\n                'Failed to get a list of translatable grd files. This happens when:\\n'\n                ' - One of the modified grd or grdp files cannot be parsed or\\n'\n                ' - %s is not updated.\\n'\n                'Stack:\\n%s' % (translation_expectations_path, str(e)))\n        ]\n    return []\n\n\ndef CheckStableMojomChanges(input_api, output_api):\n    \"\"\"Changes to [Stable] mojom types must preserve backward-compatibility.\"\"\"\n    changed_mojoms = input_api.AffectedFiles(\n        include_deletes=True,\n        file_filter=lambda f: f.LocalPath().endswith(('.mojom')))\n\n    if not changed_mojoms or input_api.no_diffs:\n        return []\n\n    delta = []\n    for mojom in changed_mojoms:\n        delta.append({\n            'filename': mojom.LocalPath(),\n            'old': '\\n'.join(mojom.OldContents()) or None,\n            'new': '\\n'.join(mojom.NewContents()) or None,\n        })\n\n    process = input_api.subprocess.Popen([\n        input_api.python3_executable,\n        input_api.os_path.join(\n            input_api.PresubmitLocalPath(), 'mojo', 'public', 'tools', 'mojom',\n            'check_stable_mojom_compatibility.py'), '--src-root',\n        input_api.PresubmitLocalPath()\n    ],\n                                         stdin=input_api.subprocess.PIPE,\n                                         stdout=input_api.subprocess.PIPE,\n                                         stderr=input_api.subprocess.PIPE,\n                                         universal_newlines=True)\n    (x, error) = process.communicate(input=input_api.json.dumps(delta))\n    if process.returncode:\n        return [\n            output_api.PresubmitError(\n                'One or more [Stable] mojom definitions appears to have been changed '\n                'in a way that is not backward-compatible. See '\n                'https://chromium.googlesource.com/chromium/src/+/HEAD/mojo/public/tools/bindings/README.md#versioning'\n                ' for details.',\n                long_text=error)\n        ]\n    return []\n\ndef CheckDeprecationOfPreferences(input_api, output_api):\n    \"\"\"Removing a preference should come with a deprecation.\"\"\"\n\n    def FilterFile(affected_file):\n        \"\"\"Accept only .cc files and the like.\"\"\"\n        file_inclusion_pattern = [r'.+%s' % _IMPLEMENTATION_EXTENSIONS]\n        files_to_skip = (_EXCLUDED_PATHS + _TEST_CODE_EXCLUDED_PATHS +\n                         input_api.DEFAULT_FILES_TO_SKIP)\n        return input_api.FilterSourceFile(\n            affected_file,\n            files_to_check=file_inclusion_pattern,\n            files_to_skip=files_to_skip)\n\n    def ModifiedLines(affected_file):\n        \"\"\"Returns a list of tuples (line number, line text) of added and removed\n        lines.\n\n        Deleted lines share the same line number as the previous line.\n\n        This relies on the scm diff output describing each changed code section\n        with a line of the form\n\n        ^@@ <old line num>,<old size> <new line num>,<new size> @@$\n        \"\"\"\n        line_num = 0\n        modified_lines = []\n        for line in affected_file.GenerateScmDiff().splitlines():\n            # Extract <new line num> of the patch fragment (see format above).\n            m = input_api.re.match(r'^@@ [0-9\\,\\+\\-]+ \\+([0-9]+)\\,[0-9]+ @@',\n                                   line)\n            if m:\n                line_num = int(m.groups(1)[0])\n                continue\n            if ((line.startswith('+') and not line.startswith('++'))\n                    or (line.startswith('-') and not line.startswith('--'))):\n                modified_lines.append((line_num, line))\n\n            if not line.startswith('-'):\n                line_num += 1\n        return modified_lines\n\n    def FindLineWith(lines, needle):\n        \"\"\"Returns the line number (i.e. index + 1) in `lines` containing `needle`.\n\n        If 0 or >1 lines contain `needle`, -1 is returned.\n        \"\"\"\n        matching_line_numbers = [\n            # + 1 for 1-based counting of line numbers.\n            i + 1 for i, line in enumerate(lines) if needle in line\n        ]\n        return matching_line_numbers[0] if len(\n            matching_line_numbers) == 1 else -1\n\n    def ModifiedPrefMigration(affected_file):\n        \"\"\"Returns whether the MigrateObsolete.*Pref functions were modified.\"\"\"\n        # Determine first and last lines of MigrateObsolete.*Pref functions.\n        new_contents = affected_file.NewContents()\n        range_1 = (FindLineWith(new_contents,\n                                'BEGIN_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS'),\n                   FindLineWith(new_contents,\n                                'END_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS'))\n        range_2 = (FindLineWith(new_contents,\n                                'BEGIN_MIGRATE_OBSOLETE_PROFILE_PREFS'),\n                   FindLineWith(new_contents,\n                                'END_MIGRATE_OBSOLETE_PROFILE_PREFS'))\n        if (-1 in range_1 + range_2):\n            raise Exception(\n                'Broken .*MIGRATE_OBSOLETE_.*_PREFS markers in browser_prefs.cc.'\n            )\n\n        # Check whether any of the modified lines are part of the\n        # MigrateObsolete.*Pref functions.\n        for line_nr, line in ModifiedLines(affected_file):\n            if (range_1[0] <= line_nr <= range_1[1]\n                    or range_2[0] <= line_nr <= range_2[1]):\n                return True\n        return False\n\n    register_pref_pattern = input_api.re.compile(r'Register.+Pref')\n    browser_prefs_file_pattern = input_api.re.compile(\n        r'chrome/browser/prefs/browser_prefs.cc')\n\n    changes = input_api.AffectedFiles(include_deletes=True,\n                                      file_filter=FilterFile)\n    potential_problems = []\n    for f in changes:\n        for line in f.GenerateScmDiff().splitlines():\n            # Check deleted lines for pref registrations.\n            if (line.startswith('-') and not line.startswith('--')\n                    and register_pref_pattern.search(line)):\n                potential_problems.append('%s: %s' % (f.LocalPath(), line))\n\n        if browser_prefs_file_pattern.search(f.LocalPath()):\n            # If the developer modified the MigrateObsolete.*Prefs() functions, we\n            # assume that they knew that they have to deprecate preferences and don't\n            # warn.\n            try:\n                if ModifiedPrefMigration(f):\n                    return []\n            except Exception as e:\n                return [output_api.PresubmitError(str(e))]\n\n    if potential_problems:\n        return [\n            output_api.PresubmitPromptWarning(\n                'Discovered possible removal of preference registrations.\\n\\n'\n                'Please make sure to properly deprecate preferences by clearing their\\n'\n                'value for a couple of milestones before finally removing the code.\\n'\n                'Otherwise data may stay in the preferences files forever. See\\n'\n                'Migrate*Prefs() in chrome/browser/prefs/browser_prefs.cc and\\n'\n                'chrome/browser/prefs/README.md for examples.\\n'\n                'This may be a false positive warning (e.g. if you move preference\\n'\n                'registrations to a different place).\\n', potential_problems)\n        ]\n    return []\n\n\ndef CheckConsistentGrdChanges(input_api, output_api):\n    \"\"\"Changes to GRD files must be consistent for tools to read them.\"\"\"\n    changed_grds = input_api.AffectedFiles(\n        include_deletes=False,\n        file_filter=lambda f: f.LocalPath().endswith(('.grd')))\n    errors = []\n    invalid_file_regexes = [(input_api.re.compile(matcher), msg)\n                            for matcher, msg in _INVALID_GRD_FILE_LINE]\n    for grd in changed_grds:\n        for i, line in enumerate(grd.NewContents()):\n            for matcher, msg in invalid_file_regexes:\n                if matcher.search(line):\n                    errors.append(\n                        output_api.PresubmitError(\n                            'Problem on {grd}:{i} - {msg}'.format(\n                                grd=grd.LocalPath(), i=i + 1, msg=msg)))\n    return errors\n\n\ndef CheckAssertAshOnlyCode(input_api, output_api):\n    \"\"\"Errors if a BUILD.gn file in an ash/ directory doesn't include\n    assert(is_chromeos).\n    For a transition period, assert(is_chromeos_ash) is also accepted.\n    \"\"\"\n\n    def FileFilter(affected_file):\n        \"\"\"Includes directories known to be Ash only.\"\"\"\n        return input_api.FilterSourceFile(\n            affected_file,\n            files_to_check=(\n                r'^ash/.*BUILD\\.gn',  # Top-level src/ash/.\n                r'.*/ash/.*BUILD\\.gn'),  # Any path component.\n            files_to_skip=(input_api.DEFAULT_FILES_TO_SKIP))\n\n    errors = []\n    pattern = input_api.re.compile(r'assert\\(is_chromeos(_ash)?\\b')\n    for f in input_api.AffectedFiles(include_deletes=False,\n                                     file_filter=FileFilter):\n        if (not pattern.search(input_api.ReadFile(f))):\n            errors.append(\n                output_api.PresubmitError(\n                    'Please add assert(is_chromeos) to %s. If that\\'s not '\n                    'possible, please create an issue and add a comment such '\n                    'as:\\n  # TODO(crbug.com/XXX): add '\n                    'assert(is_chromeos) when ...' % f.LocalPath()))\n    return errors\n\n\ndef _IsMiraclePtrDisallowed(input_api, affected_file):\n    path = affected_file.LocalPath()\n    if not _IsCPlusPlusFile(input_api, path):\n        return False\n\n    # Renderer-only code is generally allowed to use MiraclePtr. These\n    # directories, however, are specifically disallowed, for perf reasons.\n    if (\"third_party/blink/renderer/core/\" in path\n            or \"third_party/blink/renderer/platform/heap/\" in path\n            or \"third_party/blink/renderer/platform/wtf/\" in path\n            or \"third_party/blink/renderer/platform/fonts/\" in path):\n        return True\n\n    # The below paths are an explicitly listed subset of Renderer-only code,\n    # because the plan is to Oilpanize it.\n    # TODO(crbug.com/330759291): Remove once Oilpanization is completed or\n    # abandoned.\n    if (\"third_party/blink/renderer/core/paint/\" in path\n            or \"third_party/blink/renderer/platform/graphics/compositing/\" in path\n            or \"third_party/blink/renderer/platform/graphics/paint/\" in path):\n        return True\n\n    # We assume that everything else may be used outside of Renderer processes.\n    return False\n\n# TODO(crbug.com/40206238): Remove these checks, once they are replaced\n# by the Chromium Clang Plugin (which will be preferable because it will\n# 1) report errors earlier - at compile-time and 2) cover more rules).\ndef CheckRawPtrUsage(input_api, output_api):\n    \"\"\"Rough checks that raw_ptr<T> usage guidelines are followed.\"\"\"\n    errors = []\n    # The regex below matches \"raw_ptr<\" following a word boundary, but not in a\n    # C++ comment.\n    raw_ptr_matcher = input_api.re.compile(r'^((?!//).)*\\braw_ptr<')\n    file_filter = lambda f: _IsMiraclePtrDisallowed(input_api, f)\n    for f, line_num, line in input_api.RightHandSideLines(file_filter):\n        if raw_ptr_matcher.search(line):\n            errors.append(\n                output_api.PresubmitError(\n                    'Problem on {path}:{line} - '\\\n                    'raw_ptr<T> should not be used in this renderer code '\\\n                    '(as documented in the \"Pointers to unprotected memory\" '\\\n                    'section in //base/memory/raw_ptr.md)'.format(\n                        path=f.LocalPath(), line=line_num)))\n    return errors\n\ndef CheckAdvancedMemorySafetyChecksUsage(input_api, output_api):\n    \"\"\"Checks that ADVANCED_MEMORY_SAFETY_CHECKS() macro is neither added nor\n    removed as it is managed by the memory safety team internally.\n    Do not add / remove it manually.\"\"\"\n    paths = set([])\n    # The regex below matches \"ADVANCED_MEMORY_SAFETY_CHECKS(\" following a word\n    # boundary, but not in a C++ comment.\n    macro_matcher = input_api.re.compile(\n        r'^((?!//).)*\\bADVANCED_MEMORY_SAFETY_CHECKS\\(', input_api.re.MULTILINE)\n    for f in input_api.AffectedFiles():\n        if not _IsCPlusPlusFile(input_api, f.LocalPath()):\n            continue\n        if macro_matcher.search(f.GenerateScmDiff()):\n            paths.add(f.LocalPath())\n    if not paths:\n        return []\n    return [output_api.PresubmitPromptWarning(\n              'ADVANCED_MEMORY_SAFETY_CHECKS() macro is managed by ' \\\n              'the memory safety team (chrome-memory-safety@). ' \\\n              'Please contact us to add/delete the uses of the macro.',\n              paths)]\n\ndef CheckPythonShebang(input_api, output_api):\n    \"\"\"Checks that python scripts use #!/usr/bin/env instead of hardcoding a\n    system-wide python.\n    \"\"\"\n    errors = []\n    sources = lambda affected_file: input_api.FilterSourceFile(\n        affected_file,\n        files_to_skip=((_THIRD_PARTY_EXCEPT_BLINK,\n                        r'third_party/blink/web_tests/external/') + input_api.\n                       DEFAULT_FILES_TO_SKIP),\n        files_to_check=[r'.*\\.py$'])\n    for f in input_api.AffectedSourceFiles(sources):\n        for line_num, line in f.ChangedContents():\n            if line_num == 1 and line.startswith('#!/usr/bin/python'):\n                errors.append(f.LocalPath())\n            break\n\n    result = []\n    for file in errors:\n        result.append(\n            output_api.PresubmitError(\n                \"Please use '#!/usr/bin/env python/2/3' as the shebang of %s\" %\n                file))\n    return result\n\n\ndef CheckAndroidTestAnnotations(input_api, output_api):\n    \"\"\"Checks that tests have either @Batch or @DoNotBatch annotation. If this\n    is not an instrumentation test, disregard.\"\"\"\n\n    batch_annotation = input_api.re.compile(r'^\\s*@Batch')\n    do_not_batch_annotation = input_api.re.compile(r'^\\s*@DoNotBatch')\n    robolectric_test = input_api.re.compile(r'@RunWith\\((.*?)RobolectricTestRunner')\n    test_class_declaration = input_api.re.compile(r'^\\s*public\\sclass.*Test')\n    uiautomator_test = input_api.re.compile(r'[uU]i[aA]utomator')\n    test_annotation_declaration = input_api.re.compile(r'^\\s*public\\s@interface\\s.*{')\n\n    missing_annotation_errors = []\n    extra_annotation_errors = []\n    wrong_robolectric_test_runner_errors = []\n\n    def _FilterFile(affected_file):\n        return input_api.FilterSourceFile(\n            affected_file,\n            files_to_skip=input_api.DEFAULT_FILES_TO_SKIP,\n            files_to_check=[r'.*Test\\.java$'])\n\n    for f in input_api.AffectedSourceFiles(_FilterFile):\n        batch_matched = None\n        do_not_batch_matched = None\n        is_instrumentation_test = True\n        test_annotation_declaration_matched = None\n        has_base_robolectric_rule = False\n        for line in f.NewContents():\n            if 'BaseRobolectricTestRule' in line:\n                has_base_robolectric_rule = True\n                continue\n            if m := robolectric_test.search(line):\n                is_instrumentation_test = False\n                if m.group(1) == '' and not has_base_robolectric_rule:\n                  path = str(f.LocalPath())\n                  # These two spots cannot use it.\n                  if 'webapk' not in path and 'build' not in path:\n                    wrong_robolectric_test_runner_errors.append(path)\n                break\n            if uiautomator_test.search(line):\n                is_instrumentation_test = False\n                break\n            if not batch_matched:\n                batch_matched = batch_annotation.search(line)\n            if not do_not_batch_matched:\n                do_not_batch_matched = do_not_batch_annotation.search(line)\n            test_class_declaration_matched = test_class_declaration.search(\n                line)\n            test_annotation_declaration_matched = test_annotation_declaration.search(line)\n            if test_class_declaration_matched or test_annotation_declaration_matched:\n                break\n        if test_annotation_declaration_matched:\n            continue\n        if (is_instrumentation_test and\n            not batch_matched and\n            not do_not_batch_matched):\n            missing_annotation_errors.append(str(f.LocalPath()))\n        if (not is_instrumentation_test and\n            (batch_matched or\n             do_not_batch_matched)):\n            extra_annotation_errors.append(str(f.LocalPath()))\n\n    results = []\n\n    if missing_annotation_errors:\n        results.append(\n            output_api.PresubmitPromptWarning(\n                \"\"\"\nA change was made to an on-device test that has neither been annotated with\n@Batch nor @DoNotBatch. If this is a new test, please add the annotation. If\nthis is an existing test, please consider adding it if you are sufficiently\nfamiliar with the test (but do so as a separate change).\n\nSee https://source.chromium.org/chromium/chromium/src/+/main:docs/testing/batching_instrumentation_tests.md\n\"\"\", missing_annotation_errors))\n    if extra_annotation_errors:\n        results.append(\n            output_api.PresubmitPromptWarning(\n                \"\"\"\nRobolectric tests do not need a @Batch or @DoNotBatch annotations.\n\"\"\", extra_annotation_errors))\n    if wrong_robolectric_test_runner_errors:\n        results.append(\n            output_api.PresubmitPromptWarning(\n                \"\"\"\nRobolectric tests should use either @RunWith(BaseRobolectricTestRunner.class) (or\na subclass of it), or use \"@Rule BaseRobolectricTestRule\".\n\"\"\", wrong_robolectric_test_runner_errors))\n\n    return results\n\n\ndef CheckMockAnnotation(input_api, output_api):\n    \"\"\"Checks that we have annotated all Mockito.mock()-ed or Mockito.spy()-ed\n    classes with @Mock or @Spy. If this is not an instrumentation test,\n    disregard.\"\"\"\n\n    # This is just trying to be approximately correct. We are not writing a\n    # Java parser, so special cases like statically importing mock() then\n    # calling an unrelated non-mockito spy() function will cause a false\n    # positive.\n    package_name = input_api.re.compile(r'^package\\s+(\\w+(?:\\.\\w+)+);')\n    mock_static_import = input_api.re.compile(\n        r'^import\\s+static\\s+org.mockito.Mockito.(?:mock|spy);')\n    import_class = input_api.re.compile(r'import\\s+((?:\\w+\\.)+)(\\w+);')\n    mock_annotation = input_api.re.compile(r'^\\s*@(?:Mock|Spy)')\n    field_type = input_api.re.compile(r'(\\w+)(?:<\\w+>)?\\s+\\w+\\s*(?:;|=)')\n    mock_or_spy_function_call = r'(?:mock|spy)\\(\\s*(?:new\\s*)?(\\w+)(?:\\.class|\\()'\n    fully_qualified_mock_function = input_api.re.compile(\n        r'Mockito\\.' + mock_or_spy_function_call)\n    statically_imported_mock_function = input_api.re.compile(\n        r'\\W' + mock_or_spy_function_call)\n    robolectric_test = input_api.re.compile(r'[rR]obolectric')\n    uiautomator_test = input_api.re.compile(r'[uU]i[aA]utomator')\n\n    def _DoClassLookup(class_name, class_name_map, package):\n        found = class_name_map.get(class_name)\n        if found is not None:\n            return found\n        else:\n            return package + '.' + class_name\n\n    def _FilterFile(affected_file):\n        return input_api.FilterSourceFile(\n            affected_file,\n            files_to_skip=input_api.DEFAULT_FILES_TO_SKIP,\n            files_to_check=[r'.*Test\\.java$'])\n\n    mocked_by_function_classes = set()\n    mocked_by_annotation_classes = set()\n    class_to_filename = {}\n    for f in input_api.AffectedSourceFiles(_FilterFile):\n        mock_function_regex = fully_qualified_mock_function\n        next_line_is_annotated = False\n        fully_qualified_class_map = {}\n        package = None\n\n        for line in f.NewContents():\n            if robolectric_test.search(line) or uiautomator_test.search(line):\n                # Skip Robolectric and UiAutomator tests.\n                break\n\n            m = package_name.search(line)\n            if m:\n                package = m.group(1)\n                continue\n\n            if mock_static_import.search(line):\n                mock_function_regex = statically_imported_mock_function\n                continue\n\n            m = import_class.search(line)\n            if m:\n                fully_qualified_class_map[m.group(2)] = m.group(1) + m.group(2)\n                continue\n\n            if next_line_is_annotated:\n                next_line_is_annotated = False\n                fully_qualified_class = _DoClassLookup(\n                    field_type.search(line).group(1), fully_qualified_class_map,\n                    package)\n                mocked_by_annotation_classes.add(fully_qualified_class)\n                continue\n\n            if mock_annotation.search(line):\n                field_type_search = field_type.search(line)\n                if field_type_search:\n                    fully_qualified_class = _DoClassLookup(\n                        field_type_search.group(1), fully_qualified_class_map,\n                        package)\n                    mocked_by_annotation_classes.add(fully_qualified_class)\n                else:\n                    next_line_is_annotated = True\n                continue\n\n            m = mock_function_regex.search(line)\n            if m:\n                fully_qualified_class = _DoClassLookup(m.group(1),\n                    fully_qualified_class_map, package)\n                # Skipping builtin classes, since they don't get optimized.\n                if fully_qualified_class.startswith(\n                        'android.') or fully_qualified_class.startswith(\n                            'java.'):\n                    continue\n                class_to_filename[fully_qualified_class] = str(f.LocalPath())\n                mocked_by_function_classes.add(fully_qualified_class)\n\n    results = []\n    missed_classes = mocked_by_function_classes - mocked_by_annotation_classes\n    if missed_classes:\n        error_locations = []\n        for c in missed_classes:\n            error_locations.append(c + ' in ' + class_to_filename[c])\n        results.append(\n            output_api.PresubmitPromptWarning(\n                \"\"\"\nMockito.mock()/spy() cause issues with our Java optimizer. You have 3 options:\n1) If the mocked variable can be a class member, annotate the member with\n   @Mock/@Spy.\n2) If the mocked variable cannot be a class member, create a dummy member\n   variable of that type, annotated with @Mock/@Spy. This dummy does not need\n   to be used or initialized in any way.\n3) If the mocked type is definitely not going to be optimized, whether it's a\n   builtin type which we don't ship, or a class you know R8 will treat\n   specially, you can ignore this warning.\n\"\"\", error_locations))\n\n    return results\n\ndef CheckNoJsInIos(input_api, output_api):\n    \"\"\"Checks to make sure that JavaScript files are not used on iOS.\"\"\"\n\n    def _FilterFile(affected_file):\n        return input_api.FilterSourceFile(\n            affected_file,\n            files_to_skip=input_api.DEFAULT_FILES_TO_SKIP +\n                (r'^ios/third_party/*', r'^ios/tools/*', r'^third_party/*',\n                r'^components/autofill/ios/form_util/resources/*'),\n            files_to_check=[r'^ios/.*\\.js$', r'.*/ios/.*\\.js$'])\n\n    deleted_files = []\n\n    # Collect filenames of all removed JS files.\n    for f in input_api.AffectedFiles(file_filter=_FilterFile):\n        local_path = f.LocalPath()\n\n        if input_api.os_path.splitext(local_path)[1] == '.js' and f.Action() == 'D':\n            deleted_files.append(input_api.os_path.basename(local_path))\n\n    error_paths = []\n    moved_paths = []\n    warning_paths = []\n\n    for f in input_api.AffectedSourceFiles(_FilterFile):\n        local_path = f.LocalPath()\n\n        if input_api.os_path.splitext(local_path)[1] == '.js':\n            if f.Action() == 'A':\n                if input_api.os_path.basename(local_path) in deleted_files:\n                    # This script was probably moved rather than newly created.\n                    # Present a warning instead of an error for these cases.\n                    moved_paths.append(local_path)\n                else:\n                    error_paths.append(local_path)\n            elif f.Action() != 'D':\n                warning_paths.append(local_path)\n\n    results = []\n\n    if warning_paths:\n        results.append(output_api.PresubmitPromptWarning(\n            'TypeScript is now fully supported for iOS feature scripts. '\n            'Consider converting JavaScript files to TypeScript. See '\n            '//ios/web/public/js_messaging/README.md for more details.',\n            warning_paths))\n\n    if moved_paths:\n        results.append(output_api.PresubmitPromptWarning(\n            'Do not use JavaScript on iOS for new files as TypeScript is '\n            'fully supported. (If this is a moved file, you may leave the '\n            'script unconverted.) See //ios/web/public/js_messaging/README.md '\n            'for help using scripts on iOS.', moved_paths))\n\n    if error_paths:\n        results.append(output_api.PresubmitError(\n            'Do not use JavaScript on iOS as TypeScript is fully supported. '\n            'See //ios/web/public/js_messaging/README.md for help using '\n            'scripts on iOS.', error_paths))\n\n    return results\n\ndef CheckLibcxxRevisionsMatch(input_api, output_api):\n    \"\"\"Check to make sure the libc++ version matches across deps files.\"\"\"\n    # Disable check for changes to sub-repositories.\n    if input_api.PresubmitLocalPath() != input_api.change.RepositoryRoot():\n        return []\n\n    DEPS_FILES = [ 'DEPS', 'buildtools/deps_revisions.gni' ]\n\n    file_filter = lambda f: f.LocalPath().replace(\n            input_api.os_path.sep, '/') in DEPS_FILES\n    changed_deps_files = input_api.AffectedFiles(file_filter=file_filter)\n    if not changed_deps_files:\n        return []\n\n    def LibcxxRevision(file):\n        file = input_api.os_path.join(input_api.PresubmitLocalPath(),\n                                      *file.split('/'))\n        return input_api.re.search(\n                r'libcxx_revision.*[:=].*[\\'\"](\\w+)[\\'\"]',\n                input_api.ReadFile(file)).group(1)\n\n    if len(set([LibcxxRevision(f) for f in DEPS_FILES])) == 1:\n        return []\n\n    return [output_api.PresubmitError(\n        'libcxx_revision not equal across %s' % ', '.join(DEPS_FILES),\n        changed_deps_files)]\n\n\ndef CheckDanglingUntriaged(input_api, output_api):\n    \"\"\"Warn developers adding DanglingUntriaged raw_ptr.\"\"\"\n\n    # Ignore during git presubmit --all.\n    #\n    # This would be too costly, because this would check every lines of every\n    # C++ files. Check from _BANNED_CPP_FUNCTIONS are also reading the whole\n    # source code, but only once to apply every checks. It seems the bots like\n    # `win-presubmit` are particularly sensitive to reading the files. Adding\n    # this check caused the bot to run 2x longer. See https://crbug.com/1486612.\n    if input_api.no_diffs:\n        return []\n\n    def FilterFile(file):\n        return input_api.FilterSourceFile(\n            file,\n            files_to_check=[r\".*\\.(h|cc|cpp|cxx|m|mm)$\"],\n            files_to_skip=[r\"^base/allocator.*\"],\n        )\n\n    count = 0\n    for f in input_api.AffectedFiles(file_filter=FilterFile):\n        count -= sum([l.count(\"DanglingUntriaged\") for l in f.OldContents()])\n        count += sum([l.count(\"DanglingUntriaged\") for l in f.NewContents()])\n\n    # Most likely, nothing changed:\n    if count == 0:\n        return []\n\n    # Congrats developers for improving it:\n    if count < 0:\n        message = f\"DanglingUntriaged pointers removed: {-count}\\nThank you!\"\n        return [output_api.PresubmitNotifyResult(message)]\n\n    # Check for 'DanglingUntriaged-notes' in the description:\n    notes_regex = input_api.re.compile(\"DanglingUntriaged-notes[:=]\")\n    if any(\n            notes_regex.match(line)\n            for line in input_api.change.DescriptionText().splitlines()):\n        return []\n\n    # Check for DanglingUntriaged-notes in the git footer:\n    if input_api.change.GitFootersFromDescription().get(\n            \"DanglingUntriaged-notes\", []):\n        return []\n\n    message = (\n        \"Unexpected new occurrences of `DanglingUntriaged` detected. Please\\n\" +\n        \"avoid adding new ones\\n\" +\n        \"\\n\" +\n        \"See documentation:\\n\" +\n        \"https://chromium.googlesource.com/chromium/src/+/main/docs/dangling_ptr.md\\n\" +\n        \"\\n\" +\n        \"See also the guide to fix dangling pointers:\\n\" +\n        \"https://chromium.googlesource.com/chromium/src/+/main/docs/dangling_ptr_guide.md\\n\" +\n        \"\\n\" +\n        \"To disable this warning, please add in the commit description:\\n\" +\n        \"DanglingUntriaged-notes: <rationale for new untriaged dangling \" +\n        \"pointers>\"\n    )\n    return [output_api.PresubmitPromptWarning(message)]\n\ndef CheckInlineConstexprDefinitionsInHeaders(input_api, output_api):\n    \"\"\"Checks that non-static constexpr definitions in headers are inline.\"\"\"\n    # In a properly formatted file, constexpr definitions inside classes or\n    # structs will have additional whitespace at the beginning of the line.\n    # The pattern looks for variables initialized as constexpr kVar = ...; or\n    # constexpr kVar{...};\n    # The pattern does not match expressions that have braces in kVar to avoid\n    # matching constexpr functions.\n    pattern = input_api.re.compile(r'^constexpr (?!inline )[^\\(\\)]*[={]')\n    attribute_pattern = input_api.re.compile(r'(\\[\\[[a-zA-Z_:]+\\]\\]|[A-Z]+[A-Z_]+) ')\n    problems = []\n    for f in input_api.AffectedFiles():\n        if not _IsCPlusPlusHeaderFile(input_api, f.LocalPath()):\n            continue\n\n        for line_number, line in f.ChangedContents():\n            line = attribute_pattern.sub('', line)\n            if pattern.search(line):\n                problems.append(\n                    f\"{f.LocalPath()}: {line_number}\\n    {line}\")\n\n    if problems:\n        return [\n            output_api.PresubmitPromptWarning(\n                'Consider inlining constexpr variable definitions in headers '\n                'outside of classes to avoid unnecessary copies of the '\n                'constant. See https://abseil.io/tips/168 for more details.',\n                problems)\n        ]\n    else:\n        return []\n\ndef CheckTodoBugReferences(input_api, output_api):\n    \"\"\"Checks that bugs in TODOs use updated issue tracker IDs.\"\"\"\n\n    files_to_skip = ['PRESUBMIT_test.py']\n\n    def _FilterFile(affected_file):\n        return input_api.FilterSourceFile(\n            affected_file,\n            files_to_skip=files_to_skip)\n\n    # Monorail bug IDs are all less than or equal to 1524553 so check that all\n    # bugs in TODOs are greater than that value.\n    pattern = input_api.re.compile(r'.*TODO\\([^\\)0-9]*([0-9]+)\\).*')\n    problems = []\n    for f in input_api.AffectedSourceFiles(_FilterFile):\n        for line_number, line in f.ChangedContents():\n            match = pattern.match(line)\n            if match and int(match.group(1)) <= 1524553:\n                problems.append(\n                    f\"{f.LocalPath()}: {line_number}\\n    {line}\")\n\n    if problems:\n        return [\n            output_api.PresubmitPromptWarning(\n                'TODOs should use the new Chromium Issue Tracker IDs which can '\n                'be found by navigating to the bug. See '\n                'https://crbug.com/336778624 for more details.',\n                problems)\n        ]\n    else:\n        return []\n"
        },
        {
          "name": "PRESUBMIT_test.py",
          "type": "blob",
          "size": 236.5390625,
          "content": "#!/usr/bin/env python3\n# Copyright 2012 The Chromium Authors\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\nimport io\nimport os.path\nimport subprocess\nimport textwrap\nimport unittest\n\nimport PRESUBMIT\n\nfrom PRESUBMIT_test_mocks import MockFile, MockAffectedFile\nfrom PRESUBMIT_test_mocks import MockInputApi, MockOutputApi\n\n\n_TEST_DATA_DIR = 'base/test/data/presubmit'\n\n\nclass VersionControlConflictsTest(unittest.TestCase):\n\n    def testTypicalConflict(self):\n        lines = [\n            '<<<<<<< HEAD', '  base::ScopedTempDir temp_dir_;', '=======',\n            '  ScopedTempDir temp_dir_;', '>>>>>>> master'\n        ]\n        errors = PRESUBMIT._CheckForVersionControlConflictsInFile(\n            MockInputApi(), MockFile('some/path/foo_platform.cc', lines))\n        self.assertEqual(3, len(errors))\n        self.assertTrue('1' in errors[0])\n        self.assertTrue('3' in errors[1])\n        self.assertTrue('5' in errors[2])\n\n    def testIgnoresReadmes(self):\n        lines = [\n            'A First Level Header', '====================', '',\n            'A Second Level Header', '---------------------'\n        ]\n        errors = PRESUBMIT._CheckForVersionControlConflictsInFile(\n            MockInputApi(), MockFile('some/polymer/README.md', lines))\n        self.assertEqual(0, len(errors))\n\n\nclass BadExtensionsTest(unittest.TestCase):\n\n    def testBadRejFile(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('some/path/foo.cc', ''),\n            MockFile('some/path/foo.cc.rej', ''),\n            MockFile('some/path2/bar.h.rej', ''),\n        ]\n\n        results = PRESUBMIT.CheckPatchFiles(mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertEqual(2, len(results[0].items))\n        self.assertTrue('foo.cc.rej' in results[0].items[0])\n        self.assertTrue('bar.h.rej' in results[0].items[1])\n\n    def testBadOrigFile(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('other/path/qux.h.orig', ''),\n            MockFile('other/path/qux.h', ''),\n            MockFile('other/path/qux.cc', ''),\n        ]\n\n        results = PRESUBMIT.CheckPatchFiles(mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertEqual(1, len(results[0].items))\n        self.assertTrue('qux.h.orig' in results[0].items[0])\n\n    def testGoodFiles(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('other/path/qux.h', ''),\n            MockFile('other/path/qux.cc', ''),\n        ]\n        results = PRESUBMIT.CheckPatchFiles(mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(results))\n\n\nclass CheckForSuperfluousStlIncludesInHeadersTest(unittest.TestCase):\n\n    def testGoodFiles(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            # The check is not smart enough to figure out which definitions correspond\n            # to which header.\n            MockFile('other/path/foo.h', ['#include <string>', 'std::vector']),\n            # The check is not smart enough to do IWYU.\n            MockFile('other/path/bar.h',\n                     ['#include \"base/check.h\"', 'std::vector']),\n            MockFile('other/path/qux.h',\n                     ['#include \"base/stl_util.h\"', 'foobar']),\n            MockFile('other/path/baz.h',\n                     ['#include \"set/vector.h\"', 'bazzab']),\n            # The check is only for header files.\n            MockFile('other/path/not_checked.cc',\n                     ['#include <vector>', 'bazbaz']),\n        ]\n        results = PRESUBMIT.CheckForSuperfluousStlIncludesInHeaders(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(results))\n\n    def testBadFiles(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('other/path/foo.h', ['#include <vector>', 'vector']),\n            MockFile(\n                'other/path/bar.h',\n                ['#include <limits>', '#include <set>', 'no_std_namespace']),\n        ]\n        results = PRESUBMIT.CheckForSuperfluousStlIncludesInHeaders(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertTrue('foo.h: Includes STL' in results[0].message)\n        self.assertTrue('bar.h: Includes STL' in results[0].message)\n\n\nclass CheckSingletonInHeadersTest(unittest.TestCase):\n\n    def testSingletonInArbitraryHeader(self):\n        diff_singleton_h = [\n            'base::subtle::AtomicWord '\n            'base::Singleton<Type, Traits, DifferentiatingType>::'\n        ]\n        diff_foo_h = [\n            '// base::Singleton<Foo> in comment.',\n            'friend class base::Singleton<Foo>'\n        ]\n        diff_foo2_h = ['  //Foo* bar = base::Singleton<Foo>::get();']\n        diff_bad_h = ['Foo* foo = base::Singleton<Foo>::get();']\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('base/memory/singleton.h', diff_singleton_h),\n            MockAffectedFile('foo.h', diff_foo_h),\n            MockAffectedFile('foo2.h', diff_foo2_h),\n            MockAffectedFile('bad.h', diff_bad_h)\n        ]\n        warnings = PRESUBMIT.CheckSingletonInHeaders(mock_input_api,\n                                                     MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertEqual(1, len(warnings[0].items))\n        self.assertEqual('error', warnings[0].type)\n        self.assertTrue('Found base::Singleton<T>' in warnings[0].message)\n\n    def testSingletonInCC(self):\n        diff_cc = ['Foo* foo = base::Singleton<Foo>::get();']\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [MockAffectedFile('some/path/foo.cc', diff_cc)]\n        warnings = PRESUBMIT.CheckSingletonInHeaders(mock_input_api,\n                                                     MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n\nclass DeprecatedOSMacroNamesTest(unittest.TestCase):\n\n    def testDeprecatedOSMacroNames(self):\n        lines = [\n            '#if defined(OS_WIN)', ' #elif defined(OS_WINDOW)',\n            ' # if defined(OS_MAC) || defined(OS_CHROME)'\n        ]\n        errors = PRESUBMIT._CheckForDeprecatedOSMacrosInFile(\n            MockInputApi(), MockFile('some/path/foo_platform.cc', lines))\n        self.assertEqual(len(lines) + 1, len(errors))\n        self.assertTrue(\n            ':1: defined(OS_WIN) -> BUILDFLAG(IS_WIN)' in errors[0])\n\n\nclass InvalidIfDefinedMacroNamesTest(unittest.TestCase):\n\n    def testInvalidIfDefinedMacroNames(self):\n        lines = [\n            '#if defined(TARGET_IPHONE_SIMULATOR)',\n            '#if !defined(TARGET_IPHONE_SIMULATOR)',\n            '#elif defined(TARGET_IPHONE_SIMULATOR)',\n            '#ifdef TARGET_IPHONE_SIMULATOR',\n            ' # ifdef TARGET_IPHONE_SIMULATOR',\n            '# if defined(VALID) || defined(TARGET_IPHONE_SIMULATOR)',\n            '# else  // defined(TARGET_IPHONE_SIMULATOR)',\n            '#endif  // defined(TARGET_IPHONE_SIMULATOR)'\n        ]\n        errors = PRESUBMIT._CheckForInvalidIfDefinedMacrosInFile(\n            MockInputApi(), MockFile('some/path/source.mm', lines))\n        self.assertEqual(len(lines), len(errors))\n\n    def testValidIfDefinedMacroNames(self):\n        lines = [\n            '#if defined(FOO)', '#ifdef BAR', '#if TARGET_IPHONE_SIMULATOR'\n        ]\n        errors = PRESUBMIT._CheckForInvalidIfDefinedMacrosInFile(\n            MockInputApi(), MockFile('some/path/source.cc', lines))\n        self.assertEqual(0, len(errors))\n\n\nclass CheckNoUNIT_TESTInSourceFilesTest(unittest.TestCase):\n\n    def testUnitTestMacros(self):\n        lines = [\n            '#if defined(UNIT_TEST)', '#if defined UNIT_TEST',\n            '#if !defined(UNIT_TEST)', '#elif defined(UNIT_TEST)',\n            '#ifdef UNIT_TEST', ' # ifdef UNIT_TEST', '#ifndef UNIT_TEST',\n            '# if defined(VALID) || defined(UNIT_TEST)',\n            '# if defined(UNIT_TEST) && defined(VALID)',\n            '# else  // defined(UNIT_TEST)', '#endif  // defined(UNIT_TEST)'\n        ]\n        errors = PRESUBMIT._CheckNoUNIT_TESTInSourceFiles(\n            MockInputApi(), MockFile('some/path/source.cc', lines))\n        self.assertEqual(len(lines), len(errors))\n\n    def testNotUnitTestMacros(self):\n        lines = [\n            '// Comment about \"#if defined(UNIT_TEST)\"',\n            '/* Comment about #if defined(UNIT_TEST)\" */',\n            '#ifndef UNIT_TEST_H', '#define UNIT_TEST_H',\n            '#ifndef TEST_UNIT_TEST', '#define TEST_UNIT_TEST',\n            '#if defined(_UNIT_TEST)', '#if defined(UNIT_TEST_)',\n            '#ifdef _UNIT_TEST', '#ifdef UNIT_TEST_', '#ifndef _UNIT_TEST',\n            '#ifndef UNIT_TEST_'\n        ]\n        errors = PRESUBMIT._CheckNoUNIT_TESTInSourceFiles(\n            MockInputApi(), MockFile('some/path/source.cc', lines))\n        self.assertEqual(0, len(errors))\n\n\nclass CheckEachPerfettoTestDataFileHasDepsEntry(unittest.TestCase):\n\n    def testNewSha256FileNoDEPS(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('base/tracing/test/data_sha256/new.pftrace.sha256', []),\n        ]\n        results = PRESUBMIT.CheckEachPerfettoTestDataFileHasDepsEntry(\n            input_api, MockOutputApi())\n        self.assertEqual(\n            ('You must update the DEPS file when you update a .sha256 file '\n             'in base/tracing/test/data_sha256'), results[0].message)\n\n    def testNewSha256FileSuccess(self):\n        input_api = MockInputApi()\n        new_deps = \"\"\"deps = {\n                    'src/base/tracing/test/data': {\n                      'bucket': 'perfetto',\n                      'objects': [\n                        {\n                          'object_name': 'test_data/new.pftrace-a1b2c3f4',\n                          'sha256sum': 'a1b2c3f4',\n                          'size_bytes': 1,\n                          'generation': 1,\n                          'output_file': 'new.pftrace'\n                        },\n                      ],\n                      'dep_type': 'gcs'\n                    },\n                  }\"\"\".splitlines()\n        input_api.files = [\n            MockFile('base/tracing/test/data_sha256/new.pftrace.sha256',\n                     ['a1b2c3f4']),\n            MockFile('DEPS', new_deps,\n                     [\"deps={'src/base/tracing/test/data':{}}\"]),\n        ]\n        results = PRESUBMIT.CheckEachPerfettoTestDataFileHasDepsEntry(\n            input_api, MockOutputApi())\n        self.assertEqual(0, len(results))\n\n    def testNewSha256FileWrongSha256(self):\n        input_api = MockInputApi()\n        new_deps = \"\"\"deps = {\n                    'src/base/tracing/test/data': {\n                      'bucket': 'perfetto',\n                      'objects': [\n                        {\n                          'object_name': 'test_data/new.pftrace-a1b2c3f4',\n                          'sha256sum': 'wrong_hash',\n                          'size_bytes': 1,\n                          'generation': 1,\n                          'output_file': 'new.pftrace'\n                        },\n                      ],\n                      'dep_type': 'gcs'\n                    },\n                  }\"\"\".splitlines()\n        f = MockFile('base/tracing/test/data_sha256/new.pftrace.sha256',\n                     ['a1b2c3f4'])\n        input_api.files = [\n            f,\n            MockFile('DEPS', new_deps,\n                     [\"deps={'src/base/tracing/test/data':{}}\"]),\n        ]\n        results = PRESUBMIT.CheckEachPerfettoTestDataFileHasDepsEntry(\n            input_api, MockOutputApi())\n        self.assertEqual(\n            ('No corresponding DEPS entry found for %s. '\n             'Run `base/tracing/test/test_data.py get_deps --filepath %s` '\n             'to generate the DEPS entry.' % (f.LocalPath(), f.LocalPath())),\n            results[0].message)\n\n    def testDeleteSha256File(self):\n        input_api = MockInputApi()\n        old_deps = \"\"\"deps = {\n                    'src/base/tracing/test/data': {\n                      'bucket': 'perfetto',\n                      'objects': [\n                        {\n                          'object_name': 'test_data/new.pftrace-a1b2c3f4',\n                          'sha256sum': 'a1b2c3f4',\n                          'size_bytes': 1,\n                          'generation': 1,\n                          'output_file': 'new.pftrace'\n                        },\n                      ],\n                      'dep_type': 'gcs'\n                    },\n                  }\"\"\".splitlines()\n        f = MockFile('base/tracing/test/data_sha256/new.pftrace.sha256', [],\n                     ['a1b2c3f4'],\n                     action='D')\n        input_api.files = [\n            f,\n            MockFile('DEPS', old_deps, old_deps),\n        ]\n        results = PRESUBMIT.CheckEachPerfettoTestDataFileHasDepsEntry(\n            input_api, MockOutputApi())\n        self.assertEqual((\n            'You deleted %s so you must also remove the corresponding DEPS entry.'\n            % f.LocalPath()), results[0].message)\n\n    def testDeleteSha256Success(self):\n        input_api = MockInputApi()\n        new_deps = \"\"\"deps = {\n                    'src/base/tracing/test/data': {\n                      'bucket': 'perfetto',\n                      'objects': [],\n                      'dep_type': 'gcs'\n                    },\n                  }\"\"\".splitlines()\n        old_deps = \"\"\"deps = {\n                    'src/base/tracing/test/data': {\n                      'bucket': 'perfetto',\n                      'objects': [\n                        {\n                          'object_name': 'test_data/new.pftrace-a1b2c3f4',\n                          'sha256sum': 'a1b2c3f4',\n                          'size_bytes': 1,\n                          'generation': 1,\n                          'output_file': 'new.pftrace'\n                        },\n                      ],\n                      'dep_type': 'gcs'\n                    },\n                  }\"\"\".splitlines()\n        f = MockFile('base/tracing/test/data_sha256/new.pftrace.sha256', [],\n                     ['a1b2c3f4'],\n                     action='D')\n        input_api.files = [\n            f,\n            MockFile('DEPS', new_deps, old_deps),\n        ]\n        results = PRESUBMIT.CheckEachPerfettoTestDataFileHasDepsEntry(\n            input_api, MockOutputApi())\n        self.assertEqual(0, len(results))\n\n\nclass CheckAddedDepsHaveTestApprovalsTest(unittest.TestCase):\n\n    def setUp(self):\n        self.input_api = input_api = MockInputApi()\n        input_api.environ = {}\n        input_api.owners_client = self.FakeOwnersClient()\n        input_api.gerrit = self.fakeGerrit()\n        input_api.change.issue = 123\n        self.mockOwnersAndReviewers(\"owner\", set([\"reviewer\"]))\n        self.mockListSubmodules([])\n\n    def calculate(self, old_include_rules, old_specific_include_rules,\n                  new_include_rules, new_specific_include_rules):\n        return PRESUBMIT._CalculateAddedDeps(\n            os.path, 'include_rules = %r\\nspecific_include_rules = %r' %\n            (old_include_rules, old_specific_include_rules),\n            'include_rules = %r\\nspecific_include_rules = %r' %\n            (new_include_rules, new_specific_include_rules))\n\n    def testCalculateAddedDeps(self):\n        old_include_rules = [\n            '+base',\n            '-chrome',\n            '+content',\n            '-grit',\n            '-grit/\",',\n            '+jni/fooblat.h',\n            '!sandbox',\n        ]\n        old_specific_include_rules = {\n            'compositor\\.*': {\n                '+cc',\n            },\n        }\n\n        new_include_rules = [\n            '-ash',\n            '+base',\n            '+chrome',\n            '+components',\n            '+content',\n            '+grit',\n            '+grit/generated_resources.h\",',\n            '+grit/\",',\n            '+jni/fooblat.h',\n            '+policy',\n            '+' + os.path.join('third_party', 'WebKit'),\n        ]\n        new_specific_include_rules = {\n            'compositor\\.*': {\n                '+cc',\n            },\n            'widget\\.*': {\n                '+gpu',\n            },\n        }\n\n        expected = set([\n            os.path.join('chrome', 'DEPS'),\n            os.path.join('gpu', 'DEPS'),\n            os.path.join('components', 'DEPS'),\n            os.path.join('policy', 'DEPS'),\n            os.path.join('third_party', 'WebKit', 'DEPS'),\n        ])\n        self.assertEqual(\n            expected,\n            self.calculate(old_include_rules, old_specific_include_rules,\n                           new_include_rules, new_specific_include_rules))\n\n    def testCalculateAddedDepsIgnoresPermutations(self):\n        old_include_rules = [\n            '+base',\n            '+chrome',\n        ]\n        new_include_rules = [\n            '+chrome',\n            '+base',\n        ]\n        self.assertEqual(\n            set(), self.calculate(old_include_rules, {}, new_include_rules,\n                                  {}))\n\n    def testFindAddedDepsThatRequireReview(self):\n        caring = ['new_usages_require_review = True']\n        self.input_api.InitFiles([\n            MockAffectedFile('cares/DEPS', caring),\n            MockAffectedFile('cares/inherits/DEPS', []),\n            MockAffectedFile('willynilly/DEPS', []),\n            MockAffectedFile('willynilly/butactually/DEPS', caring),\n        ])\n\n        expected = {\n            'cares': True,\n            'cares/sub/sub': True,\n            'cares/inherits': True,\n            'cares/inherits/sub': True,\n            'willynilly': False,\n            'willynilly/butactually': True,\n            'willynilly/butactually/sub': True,\n        }\n        results = PRESUBMIT._FindAddedDepsThatRequireReview(\n            self.input_api, set(expected))\n        actual = {k: k in results for k in expected}\n        self.assertEqual(expected, actual)\n\n    class FakeOwnersClient(object):\n        APPROVED = \"APPROVED\"\n        PENDING = \"PENDING\"\n        returns = {}\n\n        def ListOwners(self, *args, **kwargs):\n            return self.returns.get(self.ListOwners.__name__, \"\")\n\n        def mockListOwners(self, owners):\n            self.returns[self.ListOwners.__name__] = owners\n\n        def GetFilesApprovalStatus(self, *args, **kwargs):\n            return self.returns.get(self.GetFilesApprovalStatus.__name__, {})\n\n        def mockGetFilesApprovalStatus(self, status):\n            self.returns[self.GetFilesApprovalStatus.__name__] = status\n\n        def SuggestOwners(self, *args, **kwargs):\n            return [\"eng1\", \"eng2\", \"eng3\"]\n\n    class fakeGerrit(object):\n\n        def IsOwnersOverrideApproved(self, issue):\n            return False\n\n    def mockOwnersAndReviewers(self, owner, reviewers):\n\n        def mock(*args, **kwargs):\n            return [owner, reviewers]\n\n        self.input_api.canned_checks.GetCodereviewOwnerAndReviewers = mock\n\n    def mockListSubmodules(self, paths):\n\n        def mock(*args, **kwargs):\n            return paths\n\n        self.input_api.ListSubmodules = mock\n\n    def testApprovedAdditionalDep(self):\n        self.input_api.InitFiles([\n            MockAffectedFile('pdf/DEPS',\n                             ['include_rules=[\"+v8/123\", \"+foo/bar\"]']),\n            MockAffectedFile('v8/DEPS', ['new_usages_require_review=True']),\n            # Check that we ignore \"DEPS\" directories. Note there are real cases\n            # of directories named \"deps/\" and, especially for case-insensitive file\n            # systems we should prevent these from being considered.\n            MockAffectedFile('foo/bar/DEPS/boofar', ['boofar file contents']),\n        ])\n\n        # mark the additional dep as approved.\n        os_path = self.input_api.os_path\n        self.input_api.owners_client.mockGetFilesApprovalStatus(\n            {os_path.join('v8/123', 'DEPS'): self.FakeOwnersClient.APPROVED})\n        results = PRESUBMIT.CheckAddedDepsHaveTargetApprovals(\n            self.input_api, MockOutputApi())\n        # Then, the check should pass.\n        self.assertEqual([], results)\n\n    def testUnapprovedAdditionalDep(self):\n        self.input_api.InitFiles([\n            MockAffectedFile('pdf/DEPS', ['include_rules=[\"+v8/123\"]']),\n            MockAffectedFile('v8/DEPS', ['new_usages_require_review=True']),\n        ])\n\n        # pending.\n        os_path = self.input_api.os_path\n        self.input_api.owners_client.mockGetFilesApprovalStatus(\n            {os_path.join('v8/123', 'DEPS'): self.FakeOwnersClient.PENDING})\n        results = PRESUBMIT.CheckAddedDepsHaveTargetApprovals(\n            self.input_api, MockOutputApi())\n        # the check should fail\n        self.assertIn('You need LGTM', results[0].message)\n        self.assertIn('+v8/123', results[0].message)\n\n        # unless the added dep is from a submodule.\n        self.mockListSubmodules(['v8'])\n        results = PRESUBMIT.CheckAddedDepsHaveTargetApprovals(\n            self.input_api, MockOutputApi())\n        self.assertEqual([], results)\n\n\nclass JSONParsingTest(unittest.TestCase):\n\n    def testSuccess(self):\n        input_api = MockInputApi()\n        filename = 'valid_json.json'\n        contents = [\n            '// This is a comment.', '{', '  \"key1\": [\"value1\", \"value2\"],',\n            '  \"key2\": 3  // This is an inline comment.', '}'\n        ]\n        input_api.files = [MockFile(filename, contents)]\n        self.assertEqual(None,\n                         PRESUBMIT._GetJSONParseError(input_api, filename))\n\n    def testFailure(self):\n        input_api = MockInputApi()\n        test_data = [\n            ('invalid_json_1.json', ['{ x }'], 'Expecting property name'),\n            ('invalid_json_2.json', ['// Hello world!', '{ \"hello\": \"world }'],\n             'Unterminated string starting at:'),\n            ('invalid_json_3.json', ['{ \"a\": \"b\", \"c\": \"d\", }'],\n             'Expecting property name'),\n            ('invalid_json_4.json', ['{ \"a\": \"b\" \"c\": \"d\" }'],\n             \"Expecting ',' delimiter:\"),\n        ]\n\n        input_api.files = [\n            MockFile(filename, contents)\n            for (filename, contents, _) in test_data\n        ]\n\n        for (filename, _, expected_error) in test_data:\n            actual_error = PRESUBMIT._GetJSONParseError(input_api, filename)\n            self.assertTrue(\n                expected_error in str(actual_error),\n                \"'%s' not found in '%s'\" % (expected_error, actual_error))\n\n    def testNoEatComments(self):\n        input_api = MockInputApi()\n        file_with_comments = 'file_with_comments.json'\n        contents_with_comments = [\n            '// This is a comment.', '{', '  \"key1\": [\"value1\", \"value2\"],',\n            '  \"key2\": 3  // This is an inline comment.', '}'\n        ]\n        file_without_comments = 'file_without_comments.json'\n        contents_without_comments = [\n            '{', '  \"key1\": [\"value1\", \"value2\"],', '  \"key2\": 3', '}'\n        ]\n        input_api.files = [\n            MockFile(file_with_comments, contents_with_comments),\n            MockFile(file_without_comments, contents_without_comments)\n        ]\n\n        self.assertNotEqual(\n            None,\n            str(\n                PRESUBMIT._GetJSONParseError(input_api,\n                                             file_with_comments,\n                                             eat_comments=False)))\n        self.assertEqual(\n            None,\n            PRESUBMIT._GetJSONParseError(input_api,\n                                         file_without_comments,\n                                         eat_comments=False))\n\n\nclass IDLParsingTest(unittest.TestCase):\n\n    def testSuccess(self):\n        input_api = MockInputApi()\n        filename = 'valid_idl_basics.idl'\n        contents = [\n            '// Tests a valid IDL file.', 'namespace idl_basics {',\n            '  enum EnumType {', '    name1,', '    name2', '  };', '',\n            '  dictionary MyType1 {', '    DOMString a;', '  };', '',\n            '  callback Callback1 = void();',\n            '  callback Callback2 = void(long x);',\n            '  callback Callback3 = void(MyType1 arg);',\n            '  callback Callback4 = void(EnumType type);', '',\n            '  interface Functions {', '    static void function1();',\n            '    static void function2(long x);',\n            '    static void function3(MyType1 arg);',\n            '    static void function4(Callback1 cb);',\n            '    static void function5(Callback2 cb);',\n            '    static void function6(Callback3 cb);',\n            '    static void function7(Callback4 cb);', '  };', '',\n            '  interface Events {', '    static void onFoo1();',\n            '    static void onFoo2(long x);',\n            '    static void onFoo2(MyType1 arg);',\n            '    static void onFoo3(EnumType type);', '  };', '};'\n        ]\n        input_api.files = [MockFile(filename, contents)]\n        self.assertEqual(None,\n                         PRESUBMIT._GetIDLParseError(input_api, filename))\n\n    def testFailure(self):\n        input_api = MockInputApi()\n        test_data = [\n            ('invalid_idl_1.idl', [\n                '//', 'namespace test {', '  dictionary {', '    DOMString s;',\n                '  };', '};'\n            ], 'Unexpected \"{\" after keyword \"dictionary\".\\n'),\n            # TODO(yoz): Disabled because it causes the IDL parser to hang.\n            # See crbug.com/363830.\n            # ('invalid_idl_2.idl',\n            #  (['namespace test {',\n            #    '  dictionary MissingSemicolon {',\n            #    '    DOMString a',\n            #    '    DOMString b;',\n            #    '  };',\n            #    '};'],\n            #   'Unexpected symbol DOMString after symbol a.'),\n            ('invalid_idl_3.idl', [\n                '//', 'namespace test {', '  enum MissingComma {', '    name1',\n                '    name2', '  };', '};'\n            ], 'Unexpected symbol name2 after symbol name1.'),\n            ('invalid_idl_4.idl', [\n                '//', 'namespace test {', '  enum TrailingComma {',\n                '    name1,', '    name2,', '  };', '};'\n            ], 'Trailing comma in block.'),\n            ('invalid_idl_5.idl',\n             ['//', 'namespace test {', '  callback Callback1 = void(;',\n              '};'], 'Unexpected \";\" after \"(\".'),\n            ('invalid_idl_6.idl', [\n                '//', 'namespace test {',\n                '  callback Callback1 = void(long );', '};'\n            ], 'Unexpected \")\" after symbol long.'),\n            ('invalid_idl_7.idl', [\n                '//', 'namespace test {', '  interace Events {',\n                '    static void onFoo1();', '  };', '};'\n            ], 'Unexpected symbol Events after symbol interace.'),\n            ('invalid_idl_8.idl', [\n                '//', 'namespace test {', '  interface NotEvent {',\n                '    static void onFoo1();', '  };', '};'\n            ], 'Did not process Interface Interface(NotEvent)'),\n            ('invalid_idl_9.idl', [\n                '//', 'namespace test {', '  interface {',\n                '    static void function1();', '  };', '};'\n            ], 'Interface missing name.'),\n        ]\n\n        input_api.files = [\n            MockFile(filename, contents)\n            for (filename, contents, _) in test_data\n        ]\n\n        for (filename, _, expected_error) in test_data:\n            actual_error = PRESUBMIT._GetIDLParseError(input_api, filename)\n            self.assertTrue(\n                expected_error in str(actual_error),\n                \"'%s' not found in '%s'\" % (expected_error, actual_error))\n\n\nclass UserMetricsActionTest(unittest.TestCase):\n\n    def testUserMetricsActionInActions(self):\n        input_api = MockInputApi()\n        file_with_user_action = 'file_with_user_action.cc'\n        contents_with_user_action = ['base::UserMetricsAction(\"AboutChrome\")']\n\n        input_api.files = [\n            MockFile(file_with_user_action, contents_with_user_action)\n        ]\n\n        self.assertEqual([],\n                         PRESUBMIT.CheckUserActionUpdate(\n                             input_api, MockOutputApi()))\n\n    def testUserMetricsActionNotAddedToActions(self):\n        input_api = MockInputApi()\n        file_with_user_action = 'file_with_user_action.cc'\n        contents_with_user_action = [\n            'base::UserMetricsAction(\"NotInActionsXml\")'\n        ]\n\n        input_api.files = [\n            MockFile(file_with_user_action, contents_with_user_action)\n        ]\n\n        output = PRESUBMIT.CheckUserActionUpdate(input_api, MockOutputApi())\n        self.assertEqual(\n            ('File %s line %d: %s is missing in '\n             'tools/metrics/actions/actions.xml. Please run '\n             'tools/metrics/actions/extract_actions.py to update.' %\n             (file_with_user_action, 1, 'NotInActionsXml')), output[0].message)\n\n    def testUserMetricsActionInTestFile(self):\n        input_api = MockInputApi()\n        file_with_user_action = 'file_with_user_action_unittest.cc'\n        contents_with_user_action = [\n            'base::UserMetricsAction(\"NotInActionsXml\")'\n        ]\n\n        input_api.files = [\n            MockFile(file_with_user_action, contents_with_user_action)\n        ]\n\n        self.assertEqual([],\n                         PRESUBMIT.CheckUserActionUpdate(\n                             input_api, MockOutputApi()))\n\n\nclass PydepsNeedsUpdatingTest(unittest.TestCase):\n\n    class MockPopen:\n\n        def __init__(self, stdout):\n            self.stdout = io.StringIO(stdout)\n\n        def wait(self):\n            return 0\n\n    class MockSubprocess:\n        CalledProcessError = subprocess.CalledProcessError\n        PIPE = 0\n\n        def __init__(self):\n            self._popen_func = None\n\n        def SetPopenCallback(self, func):\n            self._popen_func = func\n\n        def Popen(self, cmd, *args, **kwargs):\n            return PydepsNeedsUpdatingTest.MockPopen(self._popen_func(cmd))\n\n    def _MockParseGclientArgs(self, is_android=True):\n        return lambda: {'checkout_android': 'true' if is_android else 'false'}\n\n    def setUp(self):\n        mock_all_pydeps = ['A.pydeps', 'B.pydeps', 'D.pydeps']\n        self.old_ALL_PYDEPS_FILES = PRESUBMIT._ALL_PYDEPS_FILES\n        PRESUBMIT._ALL_PYDEPS_FILES = mock_all_pydeps\n        mock_android_pydeps = ['D.pydeps']\n        self.old_ANDROID_SPECIFIC_PYDEPS_FILES = (\n            PRESUBMIT._ANDROID_SPECIFIC_PYDEPS_FILES)\n        PRESUBMIT._ANDROID_SPECIFIC_PYDEPS_FILES = mock_android_pydeps\n        self.old_ParseGclientArgs = PRESUBMIT._ParseGclientArgs\n        PRESUBMIT._ParseGclientArgs = self._MockParseGclientArgs()\n        self.mock_input_api = MockInputApi()\n        self.mock_output_api = MockOutputApi()\n        self.mock_input_api.subprocess = PydepsNeedsUpdatingTest.MockSubprocess(\n        )\n        self.checker = PRESUBMIT.PydepsChecker(self.mock_input_api,\n                                               mock_all_pydeps)\n        self.checker._file_cache = {\n            'A.pydeps':\n            '# Generated by:\\n# CMD --output A.pydeps A\\nA.py\\nC.py\\n',\n            'B.pydeps':\n            '# Generated by:\\n# CMD --output B.pydeps B\\nB.py\\nC.py\\n',\n            'D.pydeps': '# Generated by:\\n# CMD --output D.pydeps D\\nD.py\\n',\n        }\n\n    def tearDown(self):\n        PRESUBMIT._ALL_PYDEPS_FILES = self.old_ALL_PYDEPS_FILES\n        PRESUBMIT._ANDROID_SPECIFIC_PYDEPS_FILES = (\n            self.old_ANDROID_SPECIFIC_PYDEPS_FILES)\n        PRESUBMIT._ParseGclientArgs = self.old_ParseGclientArgs\n\n    def _RunCheck(self):\n        return PRESUBMIT.CheckPydepsNeedsUpdating(\n            self.mock_input_api,\n            self.mock_output_api,\n            checker_for_tests=self.checker)\n\n    def testAddedPydep(self):\n        # PRESUBMIT.CheckPydepsNeedsUpdating is only implemented for Linux.\n        if not self.mock_input_api.platform.startswith('linux'):\n            return []\n\n        self.mock_input_api.InitFiles([\n            MockAffectedFile('new.pydeps', [], action='A'),\n        ])\n\n        results = self._RunCheck()\n        self.assertEqual(1, len(results))\n        self.assertIn('PYDEPS_FILES', str(results[0]))\n\n    def testPydepNotInSrc(self):\n        self.mock_input_api.InitFiles([\n            MockAffectedFile('new.pydeps', [], action='A'),\n        ])\n        self.mock_input_api.os_path.exists = lambda x: False\n        results = self._RunCheck()\n        self.assertEqual(0, len(results))\n\n    def testRemovedPydep(self):\n        # PRESUBMIT.CheckPydepsNeedsUpdating is only implemented for Linux.\n        if not self.mock_input_api.platform.startswith('linux'):\n            return []\n\n        self.mock_input_api.InitFiles([\n            MockAffectedFile(PRESUBMIT._ALL_PYDEPS_FILES[0], [], action='D'),\n        ])\n        results = self._RunCheck()\n        self.assertEqual(1, len(results))\n        self.assertIn('PYDEPS_FILES', str(results[0]))\n\n    def testRandomPyIgnored(self):\n        # PRESUBMIT.CheckPydepsNeedsUpdating is only implemented for Linux.\n        if not self.mock_input_api.platform.startswith('linux'):\n            return []\n\n        self.mock_input_api.files = [\n            MockAffectedFile('random.py', []),\n        ]\n\n        results = self._RunCheck()\n        self.assertEqual(0, len(results), 'Unexpected results: %r' % results)\n\n    def testRelevantPyNoChange(self):\n        # PRESUBMIT.CheckPydepsNeedsUpdating is only implemented for Linux.\n        if not self.mock_input_api.platform.startswith('linux'):\n            return []\n\n        self.mock_input_api.files = [\n            MockAffectedFile('A.py', []),\n        ]\n\n        def popen_callback(cmd):\n            self.assertEqual('CMD --output A.pydeps A --output \"\"', cmd)\n            return self.checker._file_cache['A.pydeps']\n\n        self.mock_input_api.subprocess.SetPopenCallback(popen_callback)\n\n        results = self._RunCheck()\n        self.assertEqual(0, len(results), 'Unexpected results: %r' % results)\n\n    def testRelevantPyOneChange(self):\n        # PRESUBMIT.CheckPydepsNeedsUpdating is only implemented for Linux.\n        if not self.mock_input_api.platform.startswith('linux'):\n            return []\n\n        self.mock_input_api.files = [\n            MockAffectedFile('A.py', []),\n        ]\n\n        def popen_callback(cmd):\n            self.assertEqual('CMD --output A.pydeps A --output \"\"', cmd)\n            return 'changed data'\n\n        self.mock_input_api.subprocess.SetPopenCallback(popen_callback)\n\n        results = self._RunCheck()\n        self.assertEqual(1, len(results))\n        # Check that --output \"\" is not included.\n        self.assertNotIn('\"\"', str(results[0]))\n        self.assertIn('File is stale', str(results[0]))\n\n    def testRelevantPyTwoChanges(self):\n        # PRESUBMIT.CheckPydepsNeedsUpdating is only implemented for Linux.\n        if not self.mock_input_api.platform.startswith('linux'):\n            return []\n\n        self.mock_input_api.files = [\n            MockAffectedFile('C.py', []),\n        ]\n\n        def popen_callback(cmd):\n            return 'changed data'\n\n        self.mock_input_api.subprocess.SetPopenCallback(popen_callback)\n\n        results = self._RunCheck()\n        self.assertEqual(2, len(results))\n        self.assertIn('File is stale', str(results[0]))\n        self.assertIn('File is stale', str(results[1]))\n\n    def testRelevantAndroidPyInNonAndroidCheckout(self):\n        # PRESUBMIT.CheckPydepsNeedsUpdating is only implemented for Linux.\n        if not self.mock_input_api.platform.startswith('linux'):\n            return []\n\n        self.mock_input_api.files = [\n            MockAffectedFile('D.py', []),\n        ]\n\n        def popen_callback(cmd):\n            self.assertEqual('CMD --output D.pydeps D --output \"\"', cmd)\n            return 'changed data'\n\n        self.mock_input_api.subprocess.SetPopenCallback(popen_callback)\n        PRESUBMIT._ParseGclientArgs = self._MockParseGclientArgs(\n            is_android=False)\n\n        results = self._RunCheck()\n        self.assertEqual(1, len(results))\n        self.assertIn('Android', str(results[0]))\n        self.assertIn('D.pydeps', str(results[0]))\n\n    def testGnPathsAndMissingOutputFlag(self):\n        # PRESUBMIT.CheckPydepsNeedsUpdating is only implemented for Linux.\n        if not self.mock_input_api.platform.startswith('linux'):\n            return []\n\n        self.checker._file_cache = {\n            'A.pydeps':\n            '# Generated by:\\n# CMD --gn-paths A\\n//A.py\\n//C.py\\n',\n            'B.pydeps':\n            '# Generated by:\\n# CMD --gn-paths B\\n//B.py\\n//C.py\\n',\n            'D.pydeps': '# Generated by:\\n# CMD --gn-paths D\\n//D.py\\n',\n        }\n\n        self.mock_input_api.files = [\n            MockAffectedFile('A.py', []),\n        ]\n\n        def popen_callback(cmd):\n            self.assertEqual('CMD --gn-paths A --output A.pydeps --output \"\"',\n                             cmd)\n            return 'changed data'\n\n        self.mock_input_api.subprocess.SetPopenCallback(popen_callback)\n\n        results = self._RunCheck()\n        self.assertEqual(1, len(results))\n        self.assertIn('File is stale', str(results[0]))\n\n\nclass IncludeGuardTest(unittest.TestCase):\n\n    def testIncludeGuardChecks(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n        mock_input_api.files = [\n            MockAffectedFile('content/browser/thing/foo.h', [\n                '// Comment',\n                '#ifndef CONTENT_BROWSER_THING_FOO_H_',\n                '#define CONTENT_BROWSER_THING_FOO_H_',\n                'struct McBoatFace;',\n                '#endif  // CONTENT_BROWSER_THING_FOO_H_',\n            ]),\n            MockAffectedFile('content/browser/thing/bar.h', [\n                '#ifndef CONTENT_BROWSER_THING_BAR_H_',\n                '#define CONTENT_BROWSER_THING_BAR_H_',\n                'namespace content {',\n                '#endif  // CONTENT_BROWSER_THING_BAR_H_',\n                '}  // namespace content',\n            ]),\n            MockAffectedFile('content/browser/test1.h', [\n                'namespace content {',\n                '}  // namespace content',\n            ]),\n            MockAffectedFile('content\\\\browser\\\\win.h', [\n                '#ifndef CONTENT_BROWSER_WIN_H_',\n                '#define CONTENT_BROWSER_WIN_H_',\n                'struct McBoatFace;',\n                '#endif  // CONTENT_BROWSER_WIN_H_',\n            ]),\n            MockAffectedFile('content/browser/test2.h', [\n                '// Comment',\n                '#ifndef CONTENT_BROWSER_TEST2_H_',\n                'struct McBoatFace;',\n                '#endif  // CONTENT_BROWSER_TEST2_H_',\n            ]),\n            MockAffectedFile('content/browser/internal.h', [\n                '// Comment',\n                '#ifndef CONTENT_BROWSER_INTERNAL_H_',\n                '#define CONTENT_BROWSER_INTERNAL_H_',\n                '// Comment',\n                '#ifndef INTERNAL_CONTENT_BROWSER_INTERNAL_H_',\n                '#define INTERNAL_CONTENT_BROWSER_INTERNAL_H_',\n                'namespace internal {',\n                '}  // namespace internal',\n                '#endif  // INTERNAL_CONTENT_BROWSER_THING_BAR_H_',\n                'namespace content {',\n                '}  // namespace content',\n                '#endif  // CONTENT_BROWSER_THING_BAR_H_',\n            ]),\n            MockAffectedFile('content/browser/thing/foo.cc', [\n                '// This is a non-header.',\n            ]),\n            MockAffectedFile('content/browser/disabled.h', [\n                '// no-include-guard-because-multiply-included',\n                'struct McBoatFace;',\n            ]),\n            # New files don't allow misspelled include guards.\n            MockAffectedFile('content/browser/spleling.h', [\n                '#ifndef CONTENT_BROWSER_SPLLEING_H_',\n                '#define CONTENT_BROWSER_SPLLEING_H_',\n                'struct McBoatFace;',\n                '#endif  // CONTENT_BROWSER_SPLLEING_H_',\n            ]),\n            # New files don't allow + in include guards.\n            MockAffectedFile('content/browser/foo+bar.h', [\n                '#ifndef CONTENT_BROWSER_FOO+BAR_H_',\n                '#define CONTENT_BROWSER_FOO+BAR_H_',\n                'struct McBoatFace;',\n                '#endif  // CONTENT_BROWSER_FOO+BAR_H_',\n            ]),\n            # Old files allow misspelled include guards (for now).\n            MockAffectedFile('chrome/old.h', [\n                '// New contents',\n                '#ifndef CHROME_ODL_H_',\n                '#define CHROME_ODL_H_',\n                '#endif  // CHROME_ODL_H_',\n            ], [\n                '// Old contents',\n                '#ifndef CHROME_ODL_H_',\n                '#define CHROME_ODL_H_',\n                '#endif  // CHROME_ODL_H_',\n            ],\n                             action='M'),\n            # Using a Blink style include guard outside Blink is wrong.\n            MockAffectedFile('content/NotInBlink.h', [\n                '#ifndef NotInBlink_h',\n                '#define NotInBlink_h',\n                'struct McBoatFace;',\n                '#endif  // NotInBlink_h',\n            ]),\n            # Using a Blink style include guard in Blink is no longer ok.\n            MockAffectedFile('third_party/blink/InBlink.h', [\n                '#ifndef InBlink_h',\n                '#define InBlink_h',\n                'struct McBoatFace;',\n                '#endif  // InBlink_h',\n            ]),\n            # Using a bad include guard in Blink is not ok.\n            MockAffectedFile('third_party/blink/AlsoInBlink.h', [\n                '#ifndef WrongInBlink_h',\n                '#define WrongInBlink_h',\n                'struct McBoatFace;',\n                '#endif  // WrongInBlink_h',\n            ]),\n            # Using a bad include guard in Blink is not supposed to be accepted even\n            # if it's an old file. However the current presubmit has accepted this\n            # for a while.\n            MockAffectedFile('third_party/blink/StillInBlink.h', [\n                '// New contents',\n                '#ifndef AcceptedInBlink_h',\n                '#define AcceptedInBlink_h',\n                'struct McBoatFace;',\n                '#endif  // AcceptedInBlink_h',\n            ], [\n                '// Old contents',\n                '#ifndef AcceptedInBlink_h',\n                '#define AcceptedInBlink_h',\n                'struct McBoatFace;',\n                '#endif  // AcceptedInBlink_h',\n            ],\n                             action='M'),\n            # Using a non-Chromium include guard in third_party\n            # (outside blink) is accepted.\n            MockAffectedFile('third_party/foo/some_file.h', [\n                '#ifndef REQUIRED_RPCNDR_H_',\n                '#define REQUIRED_RPCNDR_H_',\n                'struct SomeFileFoo;',\n                '#endif  // REQUIRED_RPCNDR_H_',\n            ]),\n            # Not having proper include guard in *_message_generator.h\n            # for old IPC messages is allowed.\n            MockAffectedFile('content/common/content_message_generator.h', [\n                '#undef CONTENT_COMMON_FOO_MESSAGES_H_',\n                '#include \"content/common/foo_messages.h\"',\n                '#ifndef CONTENT_COMMON_FOO_MESSAGES_H_',\n                '#error \"Failed to include content/common/foo_messages.h\"',\n                '#endif',\n            ]),\n            MockAffectedFile('chrome/renderer/thing/qux.h', [\n                '// Comment',\n                '#ifndef CHROME_RENDERER_THING_QUX_H_',\n                '#define CHROME_RENDERER_THING_QUX_H_',\n                'struct Boaty;',\n                '#endif',\n            ]),\n        ]\n        msgs = PRESUBMIT.CheckForIncludeGuards(mock_input_api, mock_output_api)\n        expected_fail_count = 10\n        self.assertEqual(\n            expected_fail_count, len(msgs), 'Expected %d items, found %d: %s' %\n            (expected_fail_count, len(msgs), msgs))\n        self.assertEqual(msgs[0].items, ['content/browser/thing/bar.h'])\n        self.assertEqual(\n            msgs[0].message, 'Include guard CONTENT_BROWSER_THING_BAR_H_ '\n            'not covering the whole file')\n\n        self.assertIn('content/browser/test1.h', msgs[1].message)\n        self.assertIn('Recommended name: CONTENT_BROWSER_TEST1_H_',\n                      msgs[1].message)\n\n        self.assertEqual(msgs[2].items, ['content/browser/test2.h:3'])\n        self.assertEqual(\n            msgs[2].message, 'Missing \"#define CONTENT_BROWSER_TEST2_H_\" for '\n            'include guard')\n\n        self.assertIn('content/browser/internal.h', msgs[3].message)\n        self.assertIn(\n            'Recommended #endif comment: // CONTENT_BROWSER_INTERNAL_H_',\n            msgs[3].message)\n\n        self.assertEqual(msgs[4].items, ['content/browser/spleling.h:1'])\n        self.assertEqual(\n            msgs[4].message, 'Header using the wrong include guard name '\n            'CONTENT_BROWSER_SPLLEING_H_')\n\n        self.assertIn('content/browser/foo+bar.h', msgs[5].message)\n        self.assertIn('Recommended name: CONTENT_BROWSER_FOO_BAR_H_',\n                      msgs[5].message)\n\n        self.assertEqual(msgs[6].items, ['content/NotInBlink.h:1'])\n        self.assertEqual(\n            msgs[6].message, 'Header using the wrong include guard name '\n            'NotInBlink_h')\n\n        self.assertEqual(msgs[7].items, ['third_party/blink/InBlink.h:1'])\n        self.assertEqual(\n            msgs[7].message, 'Header using the wrong include guard name '\n            'InBlink_h')\n\n        self.assertEqual(msgs[8].items, ['third_party/blink/AlsoInBlink.h:1'])\n        self.assertEqual(\n            msgs[8].message, 'Header using the wrong include guard name '\n            'WrongInBlink_h')\n\n        self.assertIn('chrome/renderer/thing/qux.h', msgs[9].message)\n        self.assertIn(\n            'Recommended #endif comment: // CHROME_RENDERER_THING_QUX_H_',\n            msgs[9].message)\n\n\nclass AccessibilityRelnotesFieldTest(unittest.TestCase):\n\n    def testRelnotesPresent(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile('ui/accessibility/foo.bar', [''])\n        ]\n        mock_input_api.change.DescriptionText = lambda: 'Commit description'\n        mock_input_api.change.footers['AX-Relnotes'] = [\n            'Important user facing change'\n        ]\n\n        msgs = PRESUBMIT.CheckAccessibilityRelnotesField(\n            mock_input_api, mock_output_api)\n        self.assertEqual(\n            0, len(msgs),\n            'Expected %d messages, found %d: %s' % (0, len(msgs), msgs))\n\n    def testRelnotesMissingFromAccessibilityChange(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile('some/file', ['']),\n            MockAffectedFile('ui/accessibility/foo.bar', ['']),\n            MockAffectedFile('some/other/file', [''])\n        ]\n        mock_input_api.change.DescriptionText = lambda: 'Commit description'\n\n        msgs = PRESUBMIT.CheckAccessibilityRelnotesField(\n            mock_input_api, mock_output_api)\n        self.assertEqual(\n            1, len(msgs),\n            'Expected %d messages, found %d: %s' % (1, len(msgs), msgs))\n        self.assertTrue(\n            \"Missing 'AX-Relnotes:' field\" in msgs[0].message,\n            'Missing AX-Relnotes field message not found in errors')\n\n    # The relnotes footer is not required for changes which do not touch any\n    # accessibility directories.\n    def testIgnoresNonAccessibilityCode(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile('some/file', ['']),\n            MockAffectedFile('some/other/file', [''])\n        ]\n        mock_input_api.change.DescriptionText = lambda: 'Commit description'\n\n        msgs = PRESUBMIT.CheckAccessibilityRelnotesField(\n            mock_input_api, mock_output_api)\n        self.assertEqual(\n            0, len(msgs),\n            'Expected %d messages, found %d: %s' % (0, len(msgs), msgs))\n\n    # Test that our presubmit correctly raises an error for a set of known paths.\n    def testExpectedPaths(self):\n        filesToTest = [\n            \"chrome/browser/accessibility/foo.py\",\n            \"chrome/browser/ash/arc/accessibility/foo.cc\",\n            \"chrome/browser/ui/views/accessibility/foo.h\",\n            \"chrome/browser/extensions/api/automation/foo.h\",\n            \"chrome/browser/extensions/api/automation_internal/foo.cc\",\n            \"chrome/renderer/extensions/accessibility_foo.h\",\n            \"chrome/tests/data/accessibility/foo.html\",\n            \"content/browser/accessibility/foo.cc\",\n            \"content/renderer/accessibility/foo.h\",\n            \"content/tests/data/accessibility/foo.cc\",\n            \"extensions/renderer/api/automation/foo.h\",\n            \"ui/accessibility/foo/bar/baz.cc\",\n            \"ui/views/accessibility/foo/bar/baz.h\",\n        ]\n\n        for testFile in filesToTest:\n            mock_input_api = MockInputApi()\n            mock_output_api = MockOutputApi()\n\n            mock_input_api.files = [MockAffectedFile(testFile, [''])]\n            mock_input_api.change.DescriptionText = lambda: 'Commit description'\n\n            msgs = PRESUBMIT.CheckAccessibilityRelnotesField(\n                mock_input_api, mock_output_api)\n            self.assertEqual(\n                1, len(msgs),\n                'Expected %d messages, found %d: %s, for file %s' %\n                (1, len(msgs), msgs, testFile))\n            self.assertTrue(\n                \"Missing 'AX-Relnotes:' field\" in msgs[0].message,\n                ('Missing AX-Relnotes field message not found in errors '\n                 ' for file %s' % (testFile)))\n\n    # Test that AX-Relnotes field can appear in the commit description (as long\n    # as it appears at the beginning of a line).\n    def testRelnotesInCommitDescription(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile('ui/accessibility/foo.bar', ['']),\n        ]\n        mock_input_api.change.DescriptionText = lambda: (\n            'Description:\\n' +\n            'AX-Relnotes: solves all accessibility issues forever')\n\n        msgs = PRESUBMIT.CheckAccessibilityRelnotesField(\n            mock_input_api, mock_output_api)\n        self.assertEqual(\n            0, len(msgs),\n            'Expected %d messages, found %d: %s' % (0, len(msgs), msgs))\n\n    # Test that we don't match AX-Relnotes if it appears in the middle of a line.\n    def testRelnotesMustAppearAtBeginningOfLine(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile('ui/accessibility/foo.bar', ['']),\n        ]\n        mock_input_api.change.DescriptionText = lambda: (\n            'Description:\\n' +\n            'This change has no AX-Relnotes: we should print a warning')\n\n        msgs = PRESUBMIT.CheckAccessibilityRelnotesField(\n            mock_input_api, mock_output_api)\n        self.assertTrue(\n            \"Missing 'AX-Relnotes:' field\" in msgs[0].message,\n            'Missing AX-Relnotes field message not found in errors')\n\n    # Tests that the AX-Relnotes field can be lowercase and use a '=' in place\n    # of a ':'.\n    def testRelnotesLowercaseWithEqualSign(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile('ui/accessibility/foo.bar', ['']),\n        ]\n        mock_input_api.change.DescriptionText = lambda: (\n            'Description:\\n' +\n            'ax-relnotes= this is a valid format for accessibility relnotes')\n\n        msgs = PRESUBMIT.CheckAccessibilityRelnotesField(\n            mock_input_api, mock_output_api)\n        self.assertEqual(\n            0, len(msgs),\n            'Expected %d messages, found %d: %s' % (0, len(msgs), msgs))\n\n\nclass AccessibilityAriaElementAttributeGettersTest(unittest.TestCase):\n\n    # Test warning is surfaced for various possible uses of bad methods.\n    def testMatchingLines(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile(\n                \"third_party/blink/renderer/core/accessibility/ax_object.h\",\n                [\n                    \"->getAttribute(html_names::kAriaCheckedAttr)\",\n                    \"node->hasAttribute(html_names::kRoleAttr)\",\n                    \"->FastHasAttribute(html_names::kAriaLabelAttr)\",\n                    \"        .FastGetAttribute(html_names::kAriaCurrentAttr);\",\n\n                ],\n                action='M'\n            ),\n            MockFile(\n                \"third_party/blink/renderer/core/accessibility/ax_table.cc\",\n                [\n                    \"bool result = node->hasAttribute(html_names::kFooAttr);\",\n                    \"foo->getAttribute(html_names::kAriaInvalidValueAttr)\",\n                    \"foo->GetAriaCurrentState(html_names::kAriaCurrentStateAttr)\",\n                ],\n                action='M'\n            ),\n        ]\n\n        results = PRESUBMIT.CheckAccessibilityAriaElementAttributeGetters(mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertEqual(5, len(results[0].items))\n        self.assertIn(\"ax_object.h:1\", results[0].items[0])\n        self.assertIn(\"ax_object.h:2\", results[0].items[1])\n        self.assertIn(\"ax_object.h:3\", results[0].items[2])\n        self.assertIn(\"ax_object.h:4\", results[0].items[3])\n        self.assertIn(\"ax_table.cc:2\", results[0].items[4])\n        self.assertIn(\"Please use ARIA-specific attribute access\", results[0].message)\n\n    # Test no warnings for files that are not accessibility related.\n    def testNonMatchingFiles(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile(\n                \"content/browser/foobar/foo.cc\",\n                [\"->getAttribute(html_names::kAriaCheckedAttr)\"],\n                action='M'),\n            MockFile(\n                \"third_party/blink/renderer/core/foo.cc\",\n                [\"node->hasAttribute(html_names::kRoleAttr)\"],\n                action='M'),\n        ]\n        results = PRESUBMIT.CheckAccessibilityAriaElementAttributeGetters(mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(results))\n\n    # Test no warning when methods are used with different attribute params.\n    def testNoBadParam(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile(\n                \"third_party/blink/renderer/core/accessibility/ax_object.h\",\n                [\n                    \"->getAttribute(html_names::kCheckedAttr)\",\n                    \"->hasAttribute(html_names::kIdAttr)\",\n                ],\n                action='M'\n            )\n        ]\n\n        results = PRESUBMIT.CheckAccessibilityAriaElementAttributeGetters(mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(results))\n\n    # Test no warning when attribute params are used for different methods.\n    def testNoMethod(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile(\n                \"third_party/blink/renderer/core/accessibility/ax_object.cc\",\n                [\n                    \"foo(html_names::kAriaCheckedAttr)\",\n                    \"bar(html_names::kRoleAttr)\"\n                ],\n                action='M'\n            )\n        ]\n\n        results = PRESUBMIT.CheckAccessibilityAriaElementAttributeGetters(mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(results))\n\n\nclass AndroidDeprecatedTestAnnotationTest(unittest.TestCase):\n\n    def testCheckAndroidTestAnnotationUsage(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile('LalaLand.java', ['random stuff']),\n            MockAffectedFile('CorrectUsage.java', [\n                'import androidx.test.filters.LargeTest;',\n                'import androidx.test.filters.MediumTest;',\n                'import androidx.test.filters.SmallTest;',\n            ]),\n            MockAffectedFile('UsedDeprecatedLargeTestAnnotation.java', [\n                'import android.test.suitebuilder.annotation.LargeTest;',\n            ]),\n            MockAffectedFile('UsedDeprecatedMediumTestAnnotation.java', [\n                'import android.test.suitebuilder.annotation.MediumTest;',\n            ]),\n            MockAffectedFile('UsedDeprecatedSmallTestAnnotation.java', [\n                'import android.test.suitebuilder.annotation.SmallTest;',\n            ]),\n            MockAffectedFile('UsedDeprecatedSmokeAnnotation.java', [\n                'import android.test.suitebuilder.annotation.Smoke;',\n            ])\n        ]\n        msgs = PRESUBMIT._CheckAndroidTestAnnotationUsage(\n            mock_input_api, mock_output_api)\n        self.assertEqual(\n            1, len(msgs),\n            'Expected %d items, found %d: %s' % (1, len(msgs), msgs))\n        self.assertEqual(\n            4, len(msgs[0].items), 'Expected %d items, found %d: %s' %\n            (4, len(msgs[0].items), msgs[0].items))\n        self.assertTrue(\n            'UsedDeprecatedLargeTestAnnotation.java:1' in msgs[0].items,\n            'UsedDeprecatedLargeTestAnnotation not found in errors')\n        self.assertTrue(\n            'UsedDeprecatedMediumTestAnnotation.java:1' in msgs[0].items,\n            'UsedDeprecatedMediumTestAnnotation not found in errors')\n        self.assertTrue(\n            'UsedDeprecatedSmallTestAnnotation.java:1' in msgs[0].items,\n            'UsedDeprecatedSmallTestAnnotation not found in errors')\n        self.assertTrue(\n            'UsedDeprecatedSmokeAnnotation.java:1' in msgs[0].items,\n            'UsedDeprecatedSmokeAnnotation not found in errors')\n\n\nclass AndroidBannedImportTest(unittest.TestCase):\n\n    def testCheckAndroidNoBannedImports(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        test_files = [\n            MockAffectedFile('RandomStufff.java', ['random stuff']),\n            MockAffectedFile('NoBannedImports.java', [\n                'import androidx.test.filters.LargeTest;',\n                'import androidx.test.filters.MediumTest;',\n                'import androidx.test.filters.SmallTest;',\n            ]),\n            MockAffectedFile('BannedUri.java', [\n                'import java.net.URI;',\n            ]),\n            MockAffectedFile('BannedTargetApi.java', [\n                'import android.annotation.TargetApi;',\n            ]),\n            MockAffectedFile('BannedActivityTestRule.java', [\n                'import androidx.test.rule.ActivityTestRule;',\n            ]),\n            MockAffectedFile('BannedVectorDrawableCompat.java', [\n                'import androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;',\n            ])\n        ]\n        msgs = []\n        for file in test_files:\n            mock_input_api.files = [file]\n            msgs.append(\n                PRESUBMIT._CheckAndroidNoBannedImports(mock_input_api,\n                                                       mock_output_api))\n        self.assertEqual(0, len(msgs[0]))\n        self.assertEqual(0, len(msgs[1]))\n        self.assertTrue(msgs[2][0].message.startswith(\n            textwrap.dedent(\"\"\"\\\n      Banned imports were used.\n          BannedUri.java:1:\"\"\")))\n        self.assertTrue(msgs[3][0].message.startswith(\n            textwrap.dedent(\"\"\"\\\n      Banned imports were used.\n          BannedTargetApi.java:1:\"\"\")))\n        self.assertTrue(msgs[4][0].message.startswith(\n            textwrap.dedent(\"\"\"\\\n      Banned imports were used.\n          BannedActivityTestRule.java:1:\"\"\")))\n        self.assertTrue(msgs[5][0].message.startswith(\n            textwrap.dedent(\"\"\"\\\n      Banned imports were used.\n          BannedVectorDrawableCompat.java:1:\"\"\")))\n\n\nclass CheckNoDownstreamDepsTest(unittest.TestCase):\n\n    def testInvalidDepFromUpstream(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile('BUILD.gn',\n                             ['deps = [', '   \"//clank/target:test\",', ']']),\n            MockAffectedFile('chrome/android/BUILD.gn',\n                             ['deps = [ \"//clank/target:test\" ]']),\n            MockAffectedFile(\n                'chrome/chrome_java_deps.gni',\n                ['java_deps = [', '   \"//clank/target:test\",', ']']),\n        ]\n        mock_input_api.change.RepositoryRoot = lambda: 'chromium/src'\n        msgs = PRESUBMIT.CheckNoUpstreamDepsOnClank(mock_input_api,\n                                                    mock_output_api)\n        self.assertEqual(\n            1, len(msgs),\n            'Expected %d items, found %d: %s' % (1, len(msgs), msgs))\n        self.assertEqual(\n            3, len(msgs[0].items), 'Expected %d items, found %d: %s' %\n            (3, len(msgs[0].items), msgs[0].items))\n        self.assertTrue(any('BUILD.gn:2' in item for item in msgs[0].items),\n                        'BUILD.gn not found in errors')\n        self.assertTrue(\n            any('chrome/android/BUILD.gn:1' in item for item in msgs[0].items),\n            'chrome/android/BUILD.gn:1 not found in errors')\n        self.assertTrue(\n            any('chrome/chrome_java_deps.gni:2' in item\n                for item in msgs[0].items),\n            'chrome/chrome_java_deps.gni:2 not found in errors')\n\n    def testAllowsComments(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile('BUILD.gn', [\n                '# real implementation in //clank/target:test',\n            ]),\n        ]\n        mock_input_api.change.RepositoryRoot = lambda: 'chromium/src'\n        msgs = PRESUBMIT.CheckNoUpstreamDepsOnClank(mock_input_api,\n                                                    mock_output_api)\n        self.assertEqual(\n            0, len(msgs),\n            'Expected %d items, found %d: %s' % (0, len(msgs), msgs))\n\n    def testOnlyChecksBuildFiles(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile('README.md',\n                             ['DEPS = [ \"//clank/target:test\" ]']),\n            MockAffectedFile('chrome/android/java/file.java',\n                             ['//clank/ only function']),\n        ]\n        mock_input_api.change.RepositoryRoot = lambda: 'chromium/src'\n        msgs = PRESUBMIT.CheckNoUpstreamDepsOnClank(mock_input_api,\n                                                    mock_output_api)\n        self.assertEqual(\n            0, len(msgs),\n            'Expected %d items, found %d: %s' % (0, len(msgs), msgs))\n\n    def testValidDepFromDownstream(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile('BUILD.gn',\n                             ['DEPS = [', '   \"//clank/target:test\",', ']']),\n            MockAffectedFile('java/BUILD.gn',\n                             ['DEPS = [ \"//clank/target:test\" ]']),\n        ]\n        mock_input_api.change.RepositoryRoot = lambda: 'chromium/src/clank'\n        msgs = PRESUBMIT.CheckNoUpstreamDepsOnClank(mock_input_api,\n                                                    mock_output_api)\n        self.assertEqual(\n            0, len(msgs),\n            'Expected %d items, found %d: %s' % (0, len(msgs), msgs))\n\n\nclass AndroidDebuggableBuildTest(unittest.TestCase):\n\n    def testCheckAndroidDebuggableBuild(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile('RandomStuff.java', ['random stuff']),\n            MockAffectedFile('CorrectUsage.java', [\n                'import org.chromium.base.BuildInfo;',\n                'some random stuff',\n                'boolean isOsDebuggable = BuildInfo.isDebugAndroid();',\n            ]),\n            MockAffectedFile('JustCheckUserdebugBuild.java', [\n                'import android.os.Build;',\n                'some random stuff',\n                'boolean isOsDebuggable = Build.TYPE.equals(\"userdebug\")',\n            ]),\n            MockAffectedFile('JustCheckEngineeringBuild.java', [\n                'import android.os.Build;',\n                'some random stuff',\n                'boolean isOsDebuggable = \"eng\".equals(Build.TYPE)',\n            ]),\n            MockAffectedFile('UsedBuildType.java', [\n                'import android.os.Build;',\n                'some random stuff',\n                'boolean isOsDebuggable = Build.TYPE.equals(\"userdebug\")'\n                '|| \"eng\".equals(Build.TYPE)',\n            ]),\n            MockAffectedFile('UsedExplicitBuildType.java', [\n                'some random stuff',\n                'boolean isOsDebuggable = android.os.Build.TYPE.equals(\"userdebug\")'\n                '|| \"eng\".equals(android.os.Build.TYPE)',\n            ]),\n        ]\n\n        msgs = PRESUBMIT._CheckAndroidDebuggableBuild(mock_input_api,\n                                                      mock_output_api)\n        self.assertEqual(\n            1, len(msgs),\n            'Expected %d items, found %d: %s' % (1, len(msgs), msgs))\n        self.assertEqual(\n            4, len(msgs[0].items), 'Expected %d items, found %d: %s' %\n            (4, len(msgs[0].items), msgs[0].items))\n        self.assertTrue('JustCheckUserdebugBuild.java:3' in msgs[0].items)\n        self.assertTrue('JustCheckEngineeringBuild.java:3' in msgs[0].items)\n        self.assertTrue('UsedBuildType.java:3' in msgs[0].items)\n        self.assertTrue('UsedExplicitBuildType.java:2' in msgs[0].items)\n\n\nclass LogUsageTest(unittest.TestCase):\n\n    def testCheckAndroidCrLogUsage(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile('RandomStuff.java', ['random stuff']),\n            MockAffectedFile('HasAndroidLog.java', [\n                'import android.util.Log;',\n                'some random stuff',\n                'Log.d(\"TAG\", \"foo\");',\n            ]),\n            MockAffectedFile('HasExplicitUtilLog.java', [\n                'some random stuff',\n                'android.util.Log.d(\"TAG\", \"foo\");',\n            ]),\n            MockAffectedFile('IsInBasePackage.java', [\n                'package org.chromium.base;',\n                'private static final String TAG = \"cr_Foo\";',\n                'Log.d(TAG, \"foo\");',\n            ]),\n            MockAffectedFile('IsInBasePackageButImportsLog.java', [\n                'package org.chromium.base;',\n                'import android.util.Log;',\n                'private static final String TAG = \"cr_Foo\";',\n                'Log.d(TAG, \"foo\");',\n            ]),\n            MockAffectedFile('HasBothLog.java', [\n                'import org.chromium.base.Log;',\n                'some random stuff',\n                'private static final String TAG = \"cr_Foo\";',\n                'Log.d(TAG, \"foo\");',\n                'android.util.Log.d(\"TAG\", \"foo\");',\n            ]),\n            MockAffectedFile('HasCorrectTag.java', [\n                'import org.chromium.base.Log;',\n                'some random stuff',\n                'private static final String TAG = \"cr_Foo\";',\n                'Log.d(TAG, \"foo\");',\n            ]),\n            MockAffectedFile('HasOldTag.java', [\n                'import org.chromium.base.Log;',\n                'some random stuff',\n                'private static final String TAG = \"cr.Foo\";',\n                'Log.d(TAG, \"foo\");',\n            ]),\n            MockAffectedFile('HasDottedTag.java', [\n                'import org.chromium.base.Log;',\n                'some random stuff',\n                'private static final String TAG = \"cr_foo.bar\";',\n                'Log.d(TAG, \"foo\");',\n            ]),\n            MockAffectedFile('HasDottedTagPublic.java', [\n                'import org.chromium.base.Log;',\n                'some random stuff',\n                'public static final String TAG = \"cr_foo.bar\";',\n                'Log.d(TAG, \"foo\");',\n            ]),\n            MockAffectedFile('HasNoTagDecl.java', [\n                'import org.chromium.base.Log;',\n                'some random stuff',\n                'Log.d(TAG, \"foo\");',\n            ]),\n            MockAffectedFile('HasIncorrectTagDecl.java', [\n                'import org.chromium.base.Log;',\n                'private static final String TAHG = \"cr_Foo\";',\n                'some random stuff',\n                'Log.d(TAG, \"foo\");',\n            ]),\n            MockAffectedFile('HasInlineTag.java', [\n                'import org.chromium.base.Log;',\n                'some random stuff',\n                'private static final String TAG = \"cr_Foo\";',\n                'Log.d(\"TAG\", \"foo\");',\n            ]),\n            MockAffectedFile('HasInlineTagWithSpace.java', [\n                'import org.chromium.base.Log;',\n                'some random stuff',\n                'private static final String TAG = \"cr_Foo\";',\n                'Log.d(\"log message\", \"foo\");',\n            ]),\n            MockAffectedFile('HasUnprefixedTag.java', [\n                'import org.chromium.base.Log;',\n                'some random stuff',\n                'private static final String TAG = \"rubbish\";',\n                'Log.d(TAG, \"foo\");',\n            ]),\n            MockAffectedFile('HasTooLongTag.java', [\n                'import org.chromium.base.Log;',\n                'some random stuff',\n                'private static final String TAG = \"21_characters_long___\";',\n                'Log.d(TAG, \"foo\");',\n            ]),\n            MockAffectedFile('HasTooLongTagWithNoLogCallsInDiff.java', [\n                'import org.chromium.base.Log;',\n                'some random stuff',\n                'private static final String TAG = \"21_characters_long___\";',\n            ]),\n        ]\n\n        msgs = PRESUBMIT._CheckAndroidCrLogUsage(mock_input_api,\n                                                 mock_output_api)\n\n        self.assertEqual(\n            5, len(msgs),\n            'Expected %d items, found %d: %s' % (5, len(msgs), msgs))\n\n        # Declaration format\n        nb = len(msgs[0].items)\n        self.assertEqual(\n            2, nb, 'Expected %d items, found %d: %s' % (2, nb, msgs[0].items))\n        self.assertTrue('HasNoTagDecl.java' in msgs[0].items)\n        self.assertTrue('HasIncorrectTagDecl.java' in msgs[0].items)\n\n        # Tag length\n        nb = len(msgs[1].items)\n        self.assertEqual(\n            2, nb, 'Expected %d items, found %d: %s' % (2, nb, msgs[1].items))\n        self.assertTrue('HasTooLongTag.java' in msgs[1].items)\n        self.assertTrue(\n            'HasTooLongTagWithNoLogCallsInDiff.java' in msgs[1].items)\n\n        # Tag must be a variable named TAG\n        nb = len(msgs[2].items)\n        self.assertEqual(\n            3, nb, 'Expected %d items, found %d: %s' % (3, nb, msgs[2].items))\n        self.assertTrue('HasBothLog.java:5' in msgs[2].items)\n        self.assertTrue('HasInlineTag.java:4' in msgs[2].items)\n        self.assertTrue('HasInlineTagWithSpace.java:4' in msgs[2].items)\n\n        # Util Log usage\n        nb = len(msgs[3].items)\n        self.assertEqual(\n            3, nb, 'Expected %d items, found %d: %s' % (3, nb, msgs[3].items))\n        self.assertTrue('HasAndroidLog.java:3' in msgs[3].items)\n        self.assertTrue('HasExplicitUtilLog.java:2' in msgs[3].items)\n        self.assertTrue('IsInBasePackageButImportsLog.java:4' in msgs[3].items)\n\n        # Tag must not contain\n        nb = len(msgs[4].items)\n        self.assertEqual(\n            3, nb, 'Expected %d items, found %d: %s' % (2, nb, msgs[4].items))\n        self.assertTrue('HasDottedTag.java' in msgs[4].items)\n        self.assertTrue('HasDottedTagPublic.java' in msgs[4].items)\n        self.assertTrue('HasOldTag.java' in msgs[4].items)\n\n\nclass GoogleAnswerUrlFormatTest(unittest.TestCase):\n\n    def testCatchAnswerUrlId(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('somewhere/file.cc', [\n                'char* host = '\n                '  \"https://support.google.com/chrome/answer/123456\";'\n            ]),\n            MockFile('somewhere_else/file.cc', [\n                'char* host = '\n                '  \"https://support.google.com/chrome/a/answer/123456\";'\n            ]),\n        ]\n\n        warnings = PRESUBMIT.CheckGoogleSupportAnswerUrlOnUpload(\n            input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertEqual(2, len(warnings[0].items))\n\n    def testAllowAnswerUrlParam(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('somewhere/file.cc', [\n                'char* host = '\n                '  \"https://support.google.com/chrome/?p=cpn_crash_reports\";'\n            ]),\n        ]\n\n        warnings = PRESUBMIT.CheckGoogleSupportAnswerUrlOnUpload(\n            input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n\nclass HardcodedGoogleHostsTest(unittest.TestCase):\n\n    def testWarnOnAssignedLiterals(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('content/file.cc',\n                     ['char* host = \"https://www.google.com\";']),\n            MockFile('content/file.cc',\n                     ['char* host = \"https://www.googleapis.com\";']),\n            MockFile('content/file.cc',\n                     ['char* host = \"https://clients1.google.com\";']),\n        ]\n\n        warnings = PRESUBMIT.CheckHardcodedGoogleHostsInLowerLayers(\n            input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertEqual(3, len(warnings[0].items))\n\n    def testAllowInComment(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('content/file.cc',\n                     ['char* host = \"https://www.aol.com\"; // google.com'])\n        ]\n\n        warnings = PRESUBMIT.CheckHardcodedGoogleHostsInLowerLayers(\n            input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n\nclass ChromeOsSyncedPrefRegistrationTest(unittest.TestCase):\n\n    def testWarnsOnChromeOsDirectories(self):\n        files = [\n            MockFile('ash/file.cc', ['PrefRegistrySyncable::SYNCABLE_PREF']),\n            MockFile('chrome/browser/chromeos/file.cc',\n                     ['PrefRegistrySyncable::SYNCABLE_PREF']),\n            MockFile('chromeos/file.cc',\n                     ['PrefRegistrySyncable::SYNCABLE_PREF']),\n            MockFile('components/arc/file.cc',\n                     ['PrefRegistrySyncable::SYNCABLE_PREF']),\n            MockFile('components/exo/file.cc',\n                     ['PrefRegistrySyncable::SYNCABLE_PREF']),\n        ]\n        input_api = MockInputApi()\n        for file in files:\n            input_api.files = [file]\n            warnings = PRESUBMIT.CheckChromeOsSyncedPrefRegistration(\n                input_api, MockOutputApi())\n            self.assertEqual(1, len(warnings))\n\n    def testDoesNotWarnOnSyncOsPref(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('chromeos/file.cc',\n                     ['PrefRegistrySyncable::SYNCABLE_OS_PREF']),\n        ]\n        warnings = PRESUBMIT.CheckChromeOsSyncedPrefRegistration(\n            input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testDoesNotWarnOnOtherDirectories(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('chrome/browser/ui/file.cc',\n                     ['PrefRegistrySyncable::SYNCABLE_PREF']),\n            MockFile('components/sync/file.cc',\n                     ['PrefRegistrySyncable::SYNCABLE_PREF']),\n            MockFile('content/browser/file.cc',\n                     ['PrefRegistrySyncable::SYNCABLE_PREF']),\n            MockFile('a/notchromeos/file.cc',\n                     ['PrefRegistrySyncable::SYNCABLE_PREF']),\n        ]\n        warnings = PRESUBMIT.CheckChromeOsSyncedPrefRegistration(\n            input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testSeparateWarningForPriorityPrefs(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('chromeos/file.cc', [\n                'PrefRegistrySyncable::SYNCABLE_PREF',\n                'PrefRegistrySyncable::SYNCABLE_PRIORITY_PREF'\n            ]),\n        ]\n        warnings = PRESUBMIT.CheckChromeOsSyncedPrefRegistration(\n            input_api, MockOutputApi())\n        self.assertEqual(2, len(warnings))\n\n\nclass ForwardDeclarationTest(unittest.TestCase):\n\n    def testCheckHeadersOnlyOutsideThirdParty(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('somewhere/file.cc', ['class DummyClass;']),\n            MockAffectedFile('third_party/header.h', ['class DummyClass;'])\n        ]\n        warnings = PRESUBMIT.CheckUselessForwardDeclarations(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testNoNestedDeclaration(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('somewhere/header.h', [\n                'class SomeClass {', ' protected:', '  class NotAMatch;', '};'\n            ])\n        ]\n        warnings = PRESUBMIT.CheckUselessForwardDeclarations(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testSubStrings(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('somewhere/header.h', [\n                'class NotUsefulClass;', 'struct SomeStruct;',\n                'UsefulClass *p1;', 'SomeStructPtr *p2;'\n            ])\n        ]\n        warnings = PRESUBMIT.CheckUselessForwardDeclarations(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(2, len(warnings))\n\n    def testUselessForwardDeclaration(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('somewhere/header.h', [\n                'class DummyClass;', 'struct DummyStruct;',\n                'class UsefulClass;', 'std::unique_ptr<UsefulClass> p;'\n            ])\n        ]\n        warnings = PRESUBMIT.CheckUselessForwardDeclarations(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(2, len(warnings))\n\n    def testBlinkHeaders(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('third_party/blink/header.h', [\n                'class DummyClass;',\n                'struct DummyStruct;',\n            ]),\n            MockAffectedFile('third_party\\\\blink\\\\header.h', [\n                'class DummyClass;',\n                'struct DummyStruct;',\n            ])\n        ]\n        warnings = PRESUBMIT.CheckUselessForwardDeclarations(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(4, len(warnings))\n\n\nclass RelativeIncludesTest(unittest.TestCase):\n\n    def testThirdPartyNotWebKitIgnored(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('third_party/test.cpp', '#include \"../header.h\"'),\n            MockAffectedFile('third_party/test/test.cpp',\n                             '#include \"../header.h\"'),\n        ]\n\n        mock_output_api = MockOutputApi()\n\n        errors = PRESUBMIT.CheckForRelativeIncludes(mock_input_api,\n                                                    mock_output_api)\n        self.assertEqual(0, len(errors))\n\n    def testNonCppFileIgnored(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('test.py', '#include \"../header.h\"'),\n        ]\n\n        mock_output_api = MockOutputApi()\n\n        errors = PRESUBMIT.CheckForRelativeIncludes(mock_input_api,\n                                                    mock_output_api)\n        self.assertEqual(0, len(errors))\n\n    def testInnocuousChangesAllowed(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('test.cpp', '#include \"header.h\"'),\n            MockAffectedFile('test2.cpp', '../'),\n        ]\n\n        mock_output_api = MockOutputApi()\n\n        errors = PRESUBMIT.CheckForRelativeIncludes(mock_input_api,\n                                                    mock_output_api)\n        self.assertEqual(0, len(errors))\n\n    def testRelativeIncludeNonWebKitProducesError(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('test.cpp', ['#include \"../header.h\"']),\n        ]\n\n        mock_output_api = MockOutputApi()\n\n        errors = PRESUBMIT.CheckForRelativeIncludes(mock_input_api,\n                                                    mock_output_api)\n        self.assertEqual(1, len(errors))\n\n    def testRelativeIncludeWebKitProducesError(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('third_party/blink/test.cpp',\n                             ['#include \"../header.h']),\n        ]\n\n        mock_output_api = MockOutputApi()\n\n        errors = PRESUBMIT.CheckForRelativeIncludes(mock_input_api,\n                                                    mock_output_api)\n        self.assertEqual(1, len(errors))\n\n\nclass CCIncludeTest(unittest.TestCase):\n\n    def testThirdPartyNotBlinkIgnored(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('third_party/test.cpp', '#include \"file.cc\"'),\n        ]\n\n        mock_output_api = MockOutputApi()\n\n        errors = PRESUBMIT.CheckForCcIncludes(mock_input_api, mock_output_api)\n        self.assertEqual(0, len(errors))\n\n    def testPythonFileIgnored(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('test.py', '#include \"file.cc\"'),\n        ]\n\n        mock_output_api = MockOutputApi()\n\n        errors = PRESUBMIT.CheckForCcIncludes(mock_input_api, mock_output_api)\n        self.assertEqual(0, len(errors))\n\n    def testIncFilesAccepted(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('test.py', '#include \"file.inc\"'),\n        ]\n\n        mock_output_api = MockOutputApi()\n\n        errors = PRESUBMIT.CheckForCcIncludes(mock_input_api, mock_output_api)\n        self.assertEqual(0, len(errors))\n\n    def testInnocuousChangesAllowed(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('test.cpp', '#include \"header.h\"'),\n            MockAffectedFile('test2.cpp', 'Something \"file.cc\"'),\n        ]\n\n        mock_output_api = MockOutputApi()\n\n        errors = PRESUBMIT.CheckForCcIncludes(mock_input_api, mock_output_api)\n        self.assertEqual(0, len(errors))\n\n    def testCcIncludeNonBlinkProducesError(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('test.cpp', ['#include \"file.cc\"']),\n        ]\n\n        mock_output_api = MockOutputApi()\n\n        errors = PRESUBMIT.CheckForCcIncludes(mock_input_api, mock_output_api)\n        self.assertEqual(1, len(errors))\n\n    def testCppIncludeBlinkProducesError(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('third_party/blink/test.cpp',\n                             ['#include \"foo/file.cpp\"']),\n        ]\n\n        mock_output_api = MockOutputApi()\n\n        errors = PRESUBMIT.CheckForCcIncludes(mock_input_api, mock_output_api)\n        self.assertEqual(1, len(errors))\n\n\nclass GnGlobForwardTest(unittest.TestCase):\n\n    def testAddBareGlobs(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('base/stuff.gni',\n                             ['forward_variables_from(invoker, \"*\")']),\n            MockAffectedFile('base/BUILD.gn',\n                             ['forward_variables_from(invoker, \"*\")']),\n        ]\n        warnings = PRESUBMIT.CheckGnGlobForward(mock_input_api,\n                                                MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        msg = '\\n'.join(warnings[0].items)\n        self.assertIn('base/stuff.gni', msg)\n        # Should not check .gn files. Local templates don't need to care about\n        # visibility / testonly.\n        self.assertNotIn('base/BUILD.gn', msg)\n\n    def testValidUses(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('base/stuff.gni',\n                             ['forward_variables_from(invoker, \"*\", [])']),\n            MockAffectedFile('base/stuff2.gni', [\n                'forward_variables_from(invoker, \"*\", TESTONLY_AND_VISIBILITY)'\n            ]),\n            MockAffectedFile(\n                'base/stuff3.gni',\n                ['forward_variables_from(invoker, [ \"testonly\" ])']),\n        ]\n        warnings = PRESUBMIT.CheckGnGlobForward(mock_input_api,\n                                                MockOutputApi())\n        self.assertEqual([], warnings)\n\n\nclass GnRebasePathTest(unittest.TestCase):\n\n    def testAddAbsolutePath(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('base/BUILD.gn',\n                             ['rebase_path(\"$target_gen_dir\", \"//\")']),\n            MockAffectedFile('base/root/BUILD.gn',\n                             ['rebase_path(\"$target_gen_dir\", \"/\")']),\n            MockAffectedFile('base/variable/BUILD.gn',\n                             ['rebase_path(target_gen_dir, \"/\")']),\n        ]\n        warnings = PRESUBMIT.CheckGnRebasePath(mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        msg = '\\n'.join(warnings[0].items)\n        self.assertIn('base/BUILD.gn', msg)\n        self.assertIn('base/root/BUILD.gn', msg)\n        self.assertIn('base/variable/BUILD.gn', msg)\n        self.assertEqual(3, len(warnings[0].items))\n\n    def testValidUses(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile(\n                'base/foo/BUILD.gn',\n                ['rebase_path(\"$target_gen_dir\", root_build_dir)']),\n            MockAffectedFile(\n                'base/bar/BUILD.gn',\n                ['rebase_path(\"$target_gen_dir\", root_build_dir, \"/\")']),\n            MockAffectedFile('base/baz/BUILD.gn',\n                             ['rebase_path(target_gen_dir, root_build_dir)']),\n            MockAffectedFile(\n                'base/baz/BUILD.gn',\n                ['rebase_path(target_gen_dir, \"//some/arbitrary/path\")']),\n            MockAffectedFile('base/okay_slash/BUILD.gn',\n                             ['rebase_path(\".\", \"//\")']),\n        ]\n        warnings = PRESUBMIT.CheckGnRebasePath(mock_input_api, MockOutputApi())\n        self.assertEqual([], warnings)\n\n\nclass NewHeaderWithoutGnChangeTest(unittest.TestCase):\n\n    def testAddHeaderWithoutGn(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('base/stuff.h', ''),\n        ]\n        warnings = PRESUBMIT.CheckNewHeaderWithoutGnChangeOnUpload(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertTrue('base/stuff.h' in warnings[0].items)\n\n    def testModifyHeader(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('base/stuff.h', '', action='M'),\n        ]\n        warnings = PRESUBMIT.CheckNewHeaderWithoutGnChangeOnUpload(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testDeleteHeader(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('base/stuff.h', '', action='D'),\n        ]\n        warnings = PRESUBMIT.CheckNewHeaderWithoutGnChangeOnUpload(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testAddHeaderWithGn(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('base/stuff.h', ''),\n            MockAffectedFile('base/BUILD.gn', 'stuff.h'),\n        ]\n        warnings = PRESUBMIT.CheckNewHeaderWithoutGnChangeOnUpload(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testAddHeaderWithGni(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('base/stuff.h', ''),\n            MockAffectedFile('base/files.gni', 'stuff.h'),\n        ]\n        warnings = PRESUBMIT.CheckNewHeaderWithoutGnChangeOnUpload(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testAddHeaderWithOther(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('base/stuff.h', ''),\n            MockAffectedFile('base/stuff.cc', 'stuff.h'),\n        ]\n        warnings = PRESUBMIT.CheckNewHeaderWithoutGnChangeOnUpload(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n\n    def testAddHeaderWithWrongGn(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('base/stuff.h', ''),\n            MockAffectedFile('base/BUILD.gn', 'stuff_h'),\n        ]\n        warnings = PRESUBMIT.CheckNewHeaderWithoutGnChangeOnUpload(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n\n    def testAddHeadersWithGn(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('base/stuff.h', ''),\n            MockAffectedFile('base/another.h', ''),\n            MockAffectedFile('base/BUILD.gn', 'another.h\\nstuff.h'),\n        ]\n        warnings = PRESUBMIT.CheckNewHeaderWithoutGnChangeOnUpload(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testAddHeadersWithWrongGn(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('base/stuff.h', ''),\n            MockAffectedFile('base/another.h', ''),\n            MockAffectedFile('base/BUILD.gn', 'another_h\\nstuff.h'),\n        ]\n        warnings = PRESUBMIT.CheckNewHeaderWithoutGnChangeOnUpload(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertFalse('base/stuff.h' in warnings[0].items)\n        self.assertTrue('base/another.h' in warnings[0].items)\n\n    def testAddHeadersWithWrongGn2(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('base/stuff.h', ''),\n            MockAffectedFile('base/another.h', ''),\n            MockAffectedFile('base/BUILD.gn', 'another_h\\nstuff_h'),\n        ]\n        warnings = PRESUBMIT.CheckNewHeaderWithoutGnChangeOnUpload(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertTrue('base/stuff.h' in warnings[0].items)\n        self.assertTrue('base/another.h' in warnings[0].items)\n\n\nclass CorrectProductNameInMessagesTest(unittest.TestCase):\n\n    def testProductNameInDesc(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('chrome/app/google_chrome_strings.grd', [\n                '<message name=\"Foo\" desc=\"Welcome to Chrome\">',\n                '  Welcome to Chrome!',\n                '</message>',\n            ]),\n            MockAffectedFile('chrome/app/chromium_strings.grd', [\n                '<message name=\"Bar\" desc=\"Welcome to Chrome\">',\n                '  Welcome to Chromium!',\n                '</message>',\n            ]),\n        ]\n        warnings = PRESUBMIT.CheckCorrectProductNameInMessages(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testChromeInChromium(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('chrome/app/google_chrome_strings.grd', [\n                '<message name=\"Foo\" desc=\"Welcome to Chrome\">',\n                '  Welcome to Chrome!',\n                '</message>',\n            ]),\n            MockAffectedFile('chrome/app/chromium_strings.grd', [\n                '<message name=\"Bar\" desc=\"Welcome to Chrome\">',\n                '  Welcome to Chrome!',\n                '</message>',\n            ]),\n        ]\n        warnings = PRESUBMIT.CheckCorrectProductNameInMessages(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertTrue(\n            'chrome/app/chromium_strings.grd' in warnings[0].items[0])\n\n    def testChromiumInChrome(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('chrome/app/google_chrome_strings.grd', [\n                '<message name=\"Foo\" desc=\"Welcome to Chrome\">',\n                '  Welcome to Chromium!',\n                '</message>',\n            ]),\n            MockAffectedFile('chrome/app/chromium_strings.grd', [\n                '<message name=\"Bar\" desc=\"Welcome to Chrome\">',\n                '  Welcome to Chromium!',\n                '</message>',\n            ]),\n        ]\n        warnings = PRESUBMIT.CheckCorrectProductNameInMessages(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertTrue(\n            'chrome/app/google_chrome_strings.grd:2' in warnings[0].items[0])\n\n    def testChromeForTestingInChromium(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('chrome/app/chromium_strings.grd', [\n                '<message name=\"Bar\" desc=\"Welcome to Chrome\">',\n                '  Welcome to Chrome for Testing!',\n                '</message>',\n            ]),\n        ]\n        warnings = PRESUBMIT.CheckCorrectProductNameInMessages(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testChromeForTestingInChrome(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('chrome/app/google_chrome_strings.grd', [\n                '<message name=\"Bar\" desc=\"Welcome to Chrome\">',\n                '  Welcome to Chrome for Testing!',\n                '</message>',\n            ]),\n        ]\n        warnings = PRESUBMIT.CheckCorrectProductNameInMessages(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertTrue(\n            'chrome/app/google_chrome_strings.grd:2' in warnings[0].items[0])\n\n    def testMultipleInstances(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('chrome/app/chromium_strings.grd', [\n                '<message name=\"Bar\" desc=\"Welcome to Chrome\">',\n                '  Welcome to Chrome!',\n                '</message>',\n                '<message name=\"Baz\" desc=\"A correct message\">',\n                '  Chromium is the software you are using.',\n                '</message>',\n                '<message name=\"Bat\" desc=\"An incorrect message\">',\n                '  Google Chrome is the software you are using.',\n                '</message>',\n            ]),\n        ]\n        warnings = PRESUBMIT.CheckCorrectProductNameInMessages(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertTrue(\n            'chrome/app/chromium_strings.grd:2' in warnings[0].items[0])\n        self.assertTrue(\n            'chrome/app/chromium_strings.grd:8' in warnings[0].items[1])\n\n    def testMultipleWarnings(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('chrome/app/chromium_strings.grd', [\n                '<message name=\"Bar\" desc=\"Welcome to Chrome\">',\n                '  Welcome to Chrome!',\n                '</message>',\n                '<message name=\"Baz\" desc=\"A correct message\">',\n                '  Chromium is the software you are using.',\n                '</message>',\n                '<message name=\"Bat\" desc=\"An incorrect message\">',\n                '  Google Chrome is the software you are using.',\n                '</message>',\n            ]),\n            MockAffectedFile(\n                'components/components_google_chrome_strings.grd', [\n                    '<message name=\"Bar\" desc=\"Welcome to Chrome\">',\n                    '  Welcome to Chrome!',\n                    '</message>',\n                    '<message name=\"Baz\" desc=\"A correct message\">',\n                    '  Chromium is the software you are using.',\n                    '</message>',\n                    '<message name=\"Bat\" desc=\"An incorrect message\">',\n                    '  Google Chrome is the software you are using.',\n                    '</message>',\n                ]),\n        ]\n        warnings = PRESUBMIT.CheckCorrectProductNameInMessages(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(2, len(warnings))\n        self.assertTrue('components/components_google_chrome_strings.grd:5' in\n                        warnings[0].items[0])\n        self.assertTrue(\n            'chrome/app/chromium_strings.grd:2' in warnings[1].items[0])\n        self.assertTrue(\n            'chrome/app/chromium_strings.grd:8' in warnings[1].items[1])\n\n\nclass _SecurityOwnersTestCase(unittest.TestCase):\n\n    def _createMockInputApi(self):\n        mock_input_api = MockInputApi()\n\n        def FakeRepositoryRoot():\n            return mock_input_api.os_path.join('chromium', 'src')\n\n        mock_input_api.change.RepositoryRoot = FakeRepositoryRoot\n        self._injectFakeOwnersClient(\n            mock_input_api, ['apple@chromium.org', 'orange@chromium.org'])\n        return mock_input_api\n\n    def _setupFakeChange(self, input_api):\n\n        class FakeGerrit(object):\n\n            def IsOwnersOverrideApproved(self, issue):\n                return False\n\n        input_api.change.issue = 123\n        input_api.gerrit = FakeGerrit()\n\n    def _injectFakeOwnersClient(self, input_api, owners):\n\n        class FakeOwnersClient(object):\n\n            def ListOwners(self, f):\n                return owners\n\n        input_api.owners_client = FakeOwnersClient()\n\n    def _injectFakeChangeOwnerAndReviewers(self, input_api, owner, reviewers):\n\n        def MockOwnerAndReviewers(input_api,\n                                  email_regexp,\n                                  approval_needed=False):\n            return [owner, reviewers]\n\n        input_api.canned_checks.GetCodereviewOwnerAndReviewers = \\\n            MockOwnerAndReviewers\n\n\nclass IpcSecurityOwnerTest(_SecurityOwnersTestCase):\n    _test_cases = [\n        ('*_messages.cc', 'scary_messages.cc'),\n        ('*_messages*.h', 'scary_messages.h'),\n        ('*_messages*.h', 'scary_messages_android.h'),\n        ('*_param_traits*.*', 'scary_param_traits.h'),\n        ('*_param_traits*.*', 'scary_param_traits_win.h'),\n        ('*.mojom', 'scary.mojom'),\n        ('*_mojom_traits*.*', 'scary_mojom_traits.h'),\n        ('*_mojom_traits*.*', 'scary_mojom_traits_mac.h'),\n        ('*_type_converter*.*', 'scary_type_converter.h'),\n        ('*_type_converter*.*', 'scary_type_converter_nacl.h'),\n        ('*.aidl', 'scary.aidl'),\n    ]\n\n    def testHasCorrectPerFileRulesAndSecurityReviewer(self):\n        mock_input_api = self._createMockInputApi()\n        new_owners_file_path = mock_input_api.os_path.join(\n            'services', 'goat', 'public', 'OWNERS')\n        new_owners_file = [\n            'per-file *.mojom=set noparent',\n            'per-file *.mojom=file://ipc/SECURITY_OWNERS'\n        ]\n\n        def FakeReadFile(filename):\n            self.assertEqual(\n                mock_input_api.os_path.join('chromium', 'src',\n                                            new_owners_file_path), filename)\n            return '\\n'.join(new_owners_file)\n\n        mock_input_api.ReadFile = FakeReadFile\n        mock_input_api.files = [\n            MockAffectedFile(new_owners_file_path, new_owners_file),\n            MockAffectedFile(\n                mock_input_api.os_path.join('services', 'goat', 'public',\n                                            'goat.mojom'),\n                ['// Scary contents.'])\n        ]\n        self._setupFakeChange(mock_input_api)\n        self._injectFakeChangeOwnerAndReviewers(mock_input_api,\n                                                'owner@chromium.org',\n                                                ['orange@chromium.org'])\n        mock_input_api.is_committing = True\n        mock_input_api.dry_run = False\n        mock_output_api = MockOutputApi()\n        results = PRESUBMIT.CheckSecurityOwners(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual(0, len(results))\n\n    def testMissingSecurityReviewerAtUpload(self):\n        mock_input_api = self._createMockInputApi()\n        new_owners_file_path = mock_input_api.os_path.join(\n            'services', 'goat', 'public', 'OWNERS')\n        new_owners_file = [\n            'per-file *.mojom=set noparent',\n            'per-file *.mojom=file://ipc/SECURITY_OWNERS'\n        ]\n\n        def FakeReadFile(filename):\n            self.assertEqual(\n                mock_input_api.os_path.join('chromium', 'src',\n                                            new_owners_file_path), filename)\n            return '\\n'.join(new_owners_file)\n\n        mock_input_api.ReadFile = FakeReadFile\n        mock_input_api.files = [\n            MockAffectedFile(new_owners_file_path, new_owners_file),\n            MockAffectedFile(\n                mock_input_api.os_path.join('services', 'goat', 'public',\n                                            'goat.mojom'),\n                ['// Scary contents.'])\n        ]\n        self._setupFakeChange(mock_input_api)\n        self._injectFakeChangeOwnerAndReviewers(mock_input_api,\n                                                'owner@chromium.org',\n                                                ['banana@chromium.org'])\n        mock_input_api.is_committing = False\n        mock_input_api.dry_run = False\n        mock_output_api = MockOutputApi()\n        results = PRESUBMIT.CheckSecurityOwners(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual(1, len(results))\n        self.assertEqual('notify', results[0].type)\n        self.assertEqual(\n            'Review from an owner in ipc/SECURITY_OWNERS is required for the '\n            'following newly-added files:', results[0].message)\n\n    def testMissingSecurityReviewerAtDryRunCommit(self):\n        mock_input_api = self._createMockInputApi()\n        new_owners_file_path = mock_input_api.os_path.join(\n            'services', 'goat', 'public', 'OWNERS')\n        new_owners_file = [\n            'per-file *.mojom=set noparent',\n            'per-file *.mojom=file://ipc/SECURITY_OWNERS'\n        ]\n\n        def FakeReadFile(filename):\n            self.assertEqual(\n                mock_input_api.os_path.join('chromium', 'src',\n                                            new_owners_file_path), filename)\n            return '\\n'.join(new_owners_file)\n\n        mock_input_api.ReadFile = FakeReadFile\n        mock_input_api.files = [\n            MockAffectedFile(new_owners_file_path, new_owners_file),\n            MockAffectedFile(\n                mock_input_api.os_path.join('services', 'goat', 'public',\n                                            'goat.mojom'),\n                ['// Scary contents.'])\n        ]\n        self._setupFakeChange(mock_input_api)\n        self._injectFakeChangeOwnerAndReviewers(mock_input_api,\n                                                'owner@chromium.org',\n                                                ['banana@chromium.org'])\n        mock_input_api.is_committing = True\n        mock_input_api.dry_run = True\n        mock_output_api = MockOutputApi()\n        results = PRESUBMIT.CheckSecurityOwners(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual(1, len(results))\n        self.assertEqual('error', results[0].type)\n        self.assertEqual(\n            'Review from an owner in ipc/SECURITY_OWNERS is required for the '\n            'following newly-added files:', results[0].message)\n\n    def testMissingSecurityApprovalAtRealCommit(self):\n        mock_input_api = self._createMockInputApi()\n        new_owners_file_path = mock_input_api.os_path.join(\n            'services', 'goat', 'public', 'OWNERS')\n        new_owners_file = [\n            'per-file *.mojom=set noparent',\n            'per-file *.mojom=file://ipc/SECURITY_OWNERS'\n        ]\n\n        def FakeReadFile(filename):\n            self.assertEqual(\n                mock_input_api.os_path.join('chromium', 'src',\n                                            new_owners_file_path), filename)\n            return '\\n'.join(new_owners_file)\n\n        mock_input_api.ReadFile = FakeReadFile\n        mock_input_api.files = [\n            MockAffectedFile(new_owners_file_path, new_owners_file),\n            MockAffectedFile(\n                mock_input_api.os_path.join('services', 'goat', 'public',\n                                            'goat.mojom'),\n                ['// Scary contents.'])\n        ]\n        self._setupFakeChange(mock_input_api)\n        self._injectFakeChangeOwnerAndReviewers(mock_input_api,\n                                                'owner@chromium.org',\n                                                ['banana@chromium.org'])\n        mock_input_api.is_committing = True\n        mock_input_api.dry_run = False\n        mock_output_api = MockOutputApi()\n        results = PRESUBMIT.CheckSecurityOwners(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual('error', results[0].type)\n        self.assertEqual(\n            'Review from an owner in ipc/SECURITY_OWNERS is required for the '\n            'following newly-added files:', results[0].message)\n\n    def testIpcChangeNeedsSecurityOwner(self):\n        for is_committing in [True, False]:\n            for pattern, filename in self._test_cases:\n                with self.subTest(\n                        line=\n                        f'is_committing={is_committing}, filename={filename}'):\n                    mock_input_api = self._createMockInputApi()\n                    mock_input_api.files = [\n                        MockAffectedFile(\n                            mock_input_api.os_path.join(\n                                'services', 'goat', 'public', filename),\n                            ['// Scary contents.'])\n                    ]\n                    self._setupFakeChange(mock_input_api)\n                    self._injectFakeChangeOwnerAndReviewers(\n                        mock_input_api, 'owner@chromium.org',\n                        ['banana@chromium.org'])\n                    mock_input_api.is_committing = is_committing\n                    mock_input_api.dry_run = False\n                    mock_output_api = MockOutputApi()\n                    results = PRESUBMIT.CheckSecurityOwners(\n                        mock_input_api, mock_output_api)\n                    self.assertEqual(1, len(results))\n                    self.assertEqual('error', results[0].type)\n                    self.assertTrue(results[0].message.replace(\n                        '\\\\', '/'\n                    ).startswith(\n                        'Found missing OWNERS lines for security-sensitive files. '\n                        'Please add the following lines to services/goat/public/OWNERS:'\n                    ))\n                    self.assertEqual(['ipc-security-reviews@chromium.org'],\n                                     mock_output_api.more_cc)\n\n    def testServiceManifestChangeNeedsSecurityOwner(self):\n        mock_input_api = self._createMockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile(\n                mock_input_api.os_path.join('services', 'goat', 'public',\n                                            'cpp', 'manifest.cc'),\n                [\n                    '#include \"services/goat/public/cpp/manifest.h\"',\n                    'const service_manager::Manifest& GetManifest() {}',\n                ])\n        ]\n        self._setupFakeChange(mock_input_api)\n        self._injectFakeChangeOwnerAndReviewers(mock_input_api,\n                                                'owner@chromium.org',\n                                                ['banana@chromium.org'])\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckSecurityOwners(mock_input_api, mock_output_api)\n        self.assertEqual(1, len(errors))\n        self.assertTrue(errors[0].message.replace('\\\\', '/').startswith(\n            'Found missing OWNERS lines for security-sensitive files. '\n            'Please add the following lines to services/goat/public/cpp/OWNERS:'\n        ))\n        self.assertEqual(['ipc-security-reviews@chromium.org'],\n                         mock_output_api.more_cc)\n\n    def testNonServiceManifestSourceChangesDoNotRequireSecurityOwner(self):\n        mock_input_api = self._createMockInputApi()\n        self._injectFakeChangeOwnerAndReviewers(mock_input_api,\n                                                'owner@chromium.org',\n                                                ['banana@chromium.org'])\n        mock_input_api.files = [\n            MockAffectedFile('some/non/service/thing/foo_manifest.cc', [\n                'const char kNoEnforcement[] = \"not a manifest!\";',\n            ])\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckSecurityOwners(mock_input_api, mock_output_api)\n        self.assertEqual([], errors)\n        self.assertEqual([], mock_output_api.more_cc)\n\n\nclass FuchsiaSecurityOwnerTest(_SecurityOwnersTestCase):\n\n    def testFidlChangeNeedsSecurityOwner(self):\n        mock_input_api = self._createMockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('potentially/scary/ipc.fidl',\n                             ['library test.fidl'])\n        ]\n        self._setupFakeChange(mock_input_api)\n        self._injectFakeChangeOwnerAndReviewers(mock_input_api,\n                                                'owner@chromium.org',\n                                                ['banana@chromium.org'])\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckSecurityOwners(mock_input_api, mock_output_api)\n        self.assertEqual(1, len(errors))\n        self.assertTrue(errors[0].message.replace('\\\\', '/').startswith(\n            'Found missing OWNERS lines for security-sensitive files. '\n            'Please add the following lines to potentially/scary/OWNERS:'))\n\n    def testComponentManifestV1ChangeNeedsSecurityOwner(self):\n        mock_input_api = self._createMockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('potentially/scary/v2_manifest.cmx',\n                             ['{ \"that is no\": \"manifest!\" }'])\n        ]\n        self._setupFakeChange(mock_input_api)\n        self._injectFakeChangeOwnerAndReviewers(mock_input_api,\n                                                'owner@chromium.org',\n                                                ['banana@chromium.org'])\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckSecurityOwners(mock_input_api, mock_output_api)\n        self.assertEqual(1, len(errors))\n        self.assertTrue(errors[0].message.replace('\\\\', '/').startswith(\n            'Found missing OWNERS lines for security-sensitive files. '\n            'Please add the following lines to potentially/scary/OWNERS:'))\n\n    def testComponentManifestV2NeedsSecurityOwner(self):\n        mock_input_api = self._createMockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('potentially/scary/v2_manifest.cml',\n                             ['{ \"that is no\": \"manifest!\" }'])\n        ]\n        self._setupFakeChange(mock_input_api)\n        self._injectFakeChangeOwnerAndReviewers(mock_input_api,\n                                                'owner@chromium.org',\n                                                ['banana@chromium.org'])\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckSecurityOwners(mock_input_api, mock_output_api)\n        self.assertEqual(1, len(errors))\n        self.assertTrue(errors[0].message.replace('\\\\', '/').startswith(\n            'Found missing OWNERS lines for security-sensitive files. '\n            'Please add the following lines to potentially/scary/OWNERS:'))\n\n    def testThirdPartyTestsDoNotRequireSecurityOwner(self):\n        mock_input_api = MockInputApi()\n        self._injectFakeChangeOwnerAndReviewers(mock_input_api,\n                                                'owner@chromium.org',\n                                                ['banana@chromium.org'])\n        mock_input_api.files = [\n            MockAffectedFile('third_party/crashpad/test/tests.cmx', [\n                'const char kNoEnforcement[] = \"Security?!? Pah!\";',\n            ])\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckSecurityOwners(mock_input_api, mock_output_api)\n        self.assertEqual([], errors)\n\n    def testOtherFuchsiaChangesDoNotRequireSecurityOwner(self):\n        mock_input_api = MockInputApi()\n        self._injectFakeChangeOwnerAndReviewers(mock_input_api,\n                                                'owner@chromium.org',\n                                                ['banana@chromium.org'])\n        mock_input_api.files = [\n            MockAffectedFile(\n                'some/non/service/thing/fuchsia_fidl_cml_cmx_magic.cc', [\n                    'const char kNoEnforcement[] = \"Security?!? Pah!\";',\n                ])\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckSecurityOwners(mock_input_api, mock_output_api)\n        self.assertEqual([], errors)\n\n\nclass SecurityChangeTest(_SecurityOwnersTestCase):\n\n    def testDiffGetServiceSandboxType(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('services/goat/teleporter_host.cc', [\n                'template <>', 'inline content::SandboxType',\n                'content::GetServiceSandboxType<chrome::mojom::GoatTeleporter>() {',\n                '#if defined(OS_WIN)', '  return SandboxType::kGoaty;',\n                '#else', '  return SandboxType::kNoSandbox;',\n                '#endif  // !defined(OS_WIN)', '}'\n            ]),\n        ]\n        files_to_functions = PRESUBMIT._GetFilesUsingSecurityCriticalFunctions(\n            mock_input_api)\n        self.assertEqual(\n            {\n                'services/goat/teleporter_host.cc':\n                set(['content::GetServiceSandboxType<>()'])\n            }, files_to_functions)\n\n    def testDiffRemovingLine(self):\n        mock_input_api = MockInputApi()\n        mock_file = MockAffectedFile('services/goat/teleporter_host.cc', '')\n        mock_file._scm_diff = \"\"\"--- old 2020-05-04 14:08:25.000000000 -0400\n+++ new 2020-05-04 14:08:32.000000000 -0400\n@@ -1,5 +1,4 @@\n template <>\n inline content::SandboxType\n-content::GetServiceSandboxType<chrome::mojom::GoatTeleporter>() {\n #if defined(OS_WIN)\n   return SandboxType::kGoaty;\n\"\"\"\n        mock_input_api.files = [mock_file]\n        files_to_functions = PRESUBMIT._GetFilesUsingSecurityCriticalFunctions(\n            mock_input_api)\n        self.assertEqual(\n            {\n                'services/goat/teleporter_host.cc':\n                set(['content::GetServiceSandboxType<>()'])\n            }, files_to_functions)\n\n    def testChangeOwnersMissing(self):\n        mock_input_api = self._createMockInputApi()\n        self._setupFakeChange(mock_input_api)\n        self._injectFakeChangeOwnerAndReviewers(mock_input_api,\n                                                'owner@chromium.org',\n                                                ['banana@chromium.org'])\n        mock_input_api.is_committing = False\n        mock_input_api.files = [\n            MockAffectedFile('file.cc',\n                             ['GetServiceSandboxType<Goat>(Sandbox)'])\n        ]\n        mock_output_api = MockOutputApi()\n        result = PRESUBMIT.CheckSecurityChanges(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual(1, len(result))\n        self.assertEqual(result[0].type, 'notify')\n        self.assertEqual(result[0].message,\n            'The following files change calls to security-sensitive functions\\n' \\\n            'that need to be reviewed by ipc/SECURITY_OWNERS.\\n'\n            '  file.cc\\n'\n            '    content::GetServiceSandboxType<>()\\n\\n')\n\n    def testChangeOwnersMissingAtCommit(self):\n        mock_input_api = self._createMockInputApi()\n        self._setupFakeChange(mock_input_api)\n        self._injectFakeChangeOwnerAndReviewers(mock_input_api,\n                                                'owner@chromium.org',\n                                                ['banana@chromium.org'])\n        mock_input_api.is_committing = True\n        mock_input_api.dry_run = False\n        mock_input_api.files = [\n            MockAffectedFile('file.cc',\n                             ['GetServiceSandboxType<mojom::Goat>()'])\n        ]\n        mock_output_api = MockOutputApi()\n        result = PRESUBMIT.CheckSecurityChanges(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual(1, len(result))\n        self.assertEqual(result[0].type, 'error')\n        self.assertEqual(result[0].message,\n            'The following files change calls to security-sensitive functions\\n' \\\n            'that need to be reviewed by ipc/SECURITY_OWNERS.\\n'\n            '  file.cc\\n'\n            '    content::GetServiceSandboxType<>()\\n\\n')\n\n    def testChangeOwnersPresent(self):\n        mock_input_api = self._createMockInputApi()\n        self._injectFakeChangeOwnerAndReviewers(\n            mock_input_api, 'owner@chromium.org',\n            ['apple@chromium.org', 'banana@chromium.org'])\n        mock_input_api.files = [\n            MockAffectedFile('file.cc', ['WithSandboxType(Sandbox)'])\n        ]\n        mock_output_api = MockOutputApi()\n        result = PRESUBMIT.CheckSecurityChanges(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual(0, len(result))\n\n    def testChangeOwnerIsSecurityOwner(self):\n        mock_input_api = self._createMockInputApi()\n        self._setupFakeChange(mock_input_api)\n        self._injectFakeChangeOwnerAndReviewers(mock_input_api,\n                                                'orange@chromium.org',\n                                                ['pear@chromium.org'])\n        mock_input_api.files = [\n            MockAffectedFile('file.cc', ['GetServiceSandboxType<T>(Sandbox)'])\n        ]\n        mock_output_api = MockOutputApi()\n        result = PRESUBMIT.CheckSecurityChanges(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual(1, len(result))\n\n\nclass BannedTypeCheckTest(unittest.TestCase):\n\n    def testBannedJsFunctions(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('ash/webui/file.js', ['chrome.send(something);']),\n            MockFile('some/js/ok/file.js', ['chrome.send(something);']),\n        ]\n\n        results = PRESUBMIT.CheckNoBannedFunctions(input_api, MockOutputApi())\n\n        self.assertEqual(1, len(results))\n        self.assertTrue('ash/webui/file.js' in results[0].message)\n        self.assertFalse('some/js/ok/file.js' in results[0].message)\n\n    def testBannedJavaFunctions(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('some/java/problematic/diskread.java',\n                     ['StrictMode.allowThreadDiskReads();']),\n            MockFile('some/java/problematic/diskwrite.java',\n                     ['StrictMode.allowThreadDiskWrites();']),\n            MockFile('some/java/ok/diskwrite.java',\n                     ['StrictModeContext.allowDiskWrites();']),\n            MockFile('some/java/problematic/waitidleforsync.java',\n                     ['instrumentation.waitForIdleSync();']),\n            MockFile('some/java/problematic/registerreceiver.java',\n                     ['context.registerReceiver();']),\n            MockFile('some/java/problematic/property.java',\n                     ['new Property<abc, Integer>;']),\n            MockFile('some/java/problematic/requestlayout.java',\n                     ['requestLayout();']),\n            MockFile('some/java/problematic/lastprofile.java',\n                     ['ProfileManager.getLastUsedRegularProfile();']),\n            MockFile('some/java/problematic/getdrawable1.java',\n                     ['ResourcesCompat.getDrawable();']),\n            MockFile('some/java/problematic/getdrawable2.java',\n                     ['getResources().getDrawable();']),\n        ]\n\n        errors = PRESUBMIT.CheckNoBannedFunctions(input_api, MockOutputApi())\n        self.assertEqual(2, len(errors))\n        self.assertTrue(\n            'some/java/problematic/diskread.java' in errors[0].message)\n        self.assertTrue(\n            'some/java/problematic/diskwrite.java' in errors[0].message)\n        self.assertFalse('some/java/ok/diskwrite.java' in errors[0].message)\n        self.assertFalse('some/java/ok/diskwrite.java' in errors[1].message)\n        self.assertTrue(\n            'some/java/problematic/waitidleforsync.java' in errors[0].message)\n        self.assertTrue(\n            'some/java/problematic/registerreceiver.java' in errors[1].message)\n        self.assertTrue(\n            'some/java/problematic/property.java' in errors[0].message)\n        self.assertTrue(\n            'some/java/problematic/requestlayout.java' in errors[0].message)\n        self.assertTrue(\n            'some/java/problematic/lastprofile.java' in errors[0].message)\n        self.assertTrue(\n            'some/java/problematic/getdrawable1.java' in errors[0].message)\n        self.assertTrue(\n            'some/java/problematic/getdrawable2.java' in errors[0].message)\n\n    def testBannedCppFunctions(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('some/cpp/problematic/file.cc', ['using namespace std;']),\n            MockFile('third_party/blink/problematic/file.cc',\n                     ['GetInterfaceProvider()']),\n            MockFile('some/cpp/ok/file.cc', ['using std::string;']),\n            MockFile('some/cpp/problematic/file2.cc',\n                     ['set_owned_by_client()']),\n            MockFile('some/cpp/nocheck/file.cc',\n                     ['using namespace std;  // nocheck']),\n            MockFile('some/cpp/comment/file.cc',\n                     ['  // A comment about `using namespace std;`']),\n            MockFile('some/cpp/problematic/file3.cc', [\n                'params.ownership = Widget::InitParams::WIDGET_OWNS_NATIVE_WIDGET'\n            ]),\n            MockFile('some/cpp/problematic/file4.cc', [\n                'params.ownership = Widget::InitParams::NATIVE_WIDGET_OWNS_WIDGET'\n            ]),\n            MockFile('some/cpp/problematic/file5.cc', [\n                'Browser* browser = chrome::FindBrowserWithTab(web_contents)'\n            ]),\n            MockFile('allowed_ranges_usage.cc', ['std::ranges::begin(vec)']),\n            MockFile('banned_ranges_usage.cc',\n                     ['std::ranges::subrange(first, last)']),\n            MockFile('views_usage.cc', ['std::views::all(vec)']),\n        ]\n\n        results = PRESUBMIT.CheckNoBannedFunctions(input_api, MockOutputApi())\n\n        # warnings are results[0], errors are results[1]\n        self.assertEqual(2, len(results))\n        self.assertTrue('some/cpp/problematic/file.cc' in results[1].message)\n        self.assertTrue(\n            'third_party/blink/problematic/file.cc' in results[0].message)\n        self.assertTrue('some/cpp/ok/file.cc' not in results[1].message)\n        self.assertTrue('some/cpp/problematic/file2.cc' in results[0].message)\n        self.assertTrue('some/cpp/problematic/file3.cc' in results[0].message)\n        self.assertTrue('some/cpp/problematic/file4.cc' in results[0].message)\n        self.assertTrue('some/cpp/problematic/file5.cc' in results[0].message)\n        self.assertFalse('some/cpp/nocheck/file.cc' in results[0].message)\n        self.assertFalse('some/cpp/nocheck/file.cc' in results[1].message)\n        self.assertFalse('some/cpp/comment/file.cc' in results[0].message)\n        self.assertFalse('some/cpp/comment/file.cc' in results[1].message)\n        self.assertFalse('allowed_ranges_usage.cc' in results[0].message)\n        self.assertFalse('allowed_ranges_usage.cc' in results[1].message)\n        self.assertTrue('banned_ranges_usage.cc' in results[1].message)\n        self.assertTrue('views_usage.cc' in results[1].message)\n\n    def testBannedCppRandomFunctions(self):\n        banned_rngs = [\n            'absl::BitGen',\n            'absl::InsecureBitGen',\n            'std::linear_congruential_engine',\n            'std::mersenne_twister_engine',\n            'std::subtract_with_carry_engine',\n            'std::discard_block_engine',\n            'std::independent_bits_engine',\n            'std::shuffle_order_engine',\n            'std::minstd_rand0',\n            'std::minstd_rand',\n            'std::mt19937',\n            'std::mt19937_64',\n            'std::ranlux24_base',\n            'std::ranlux48_base',\n            'std::ranlux24',\n            'std::ranlux48',\n            'std::knuth_b',\n            'std::default_random_engine',\n            'std::random_device',\n        ]\n        for banned_rng in banned_rngs:\n            input_api = MockInputApi()\n            input_api.files = [\n                MockFile('some/cpp/problematic/file.cc',\n                         [f'{banned_rng} engine;']),\n                MockFile('third_party/blink/problematic/file.cc',\n                         [f'{banned_rng} engine;']),\n                MockFile('third_party/ok/file.cc', [f'{banned_rng} engine;']),\n            ]\n            results = PRESUBMIT.CheckNoBannedFunctions(input_api,\n                                                       MockOutputApi())\n            self.assertEqual(1, len(results), banned_rng)\n            self.assertTrue(\n                'some/cpp/problematic/file.cc' in results[0].message,\n                banned_rng)\n            self.assertTrue(\n                'third_party/blink/problematic/file.cc' in results[0].message,\n                banned_rng)\n            self.assertFalse('third_party/ok/file.cc' in results[0].message,\n                             banned_rng)\n\n    def testBannedIosObjcFunctions(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('some/ios/file.mm',\n                     ['TEST(SomeClassTest, SomeInteraction) {', '}']),\n            MockFile('some/mac/file.mm',\n                     ['TEST(SomeClassTest, SomeInteraction) {', '}']),\n            MockFile('another/ios_file.mm',\n                     ['class SomeTest : public testing::Test {};']),\n            MockFile(\n                'some/ios/file_egtest.mm',\n                ['- (void)testSomething { EXPECT_OCMOCK_VERIFY(aMock); }']),\n            MockFile('some/ios/file_unittest.mm', [\n                'TEST_F(SomeTest, TestThis) { EXPECT_OCMOCK_VERIFY(aMock); }'\n            ]),\n        ]\n\n        errors = PRESUBMIT.CheckNoBannedFunctions(input_api, MockOutputApi())\n        self.assertEqual(1, len(errors))\n        self.assertTrue('some/ios/file.mm' in errors[0].message)\n        self.assertTrue('another/ios_file.mm' in errors[0].message)\n        self.assertTrue('some/mac/file.mm' not in errors[0].message)\n        self.assertTrue('some/ios/file_egtest.mm' in errors[0].message)\n        self.assertTrue('some/ios/file_unittest.mm' not in errors[0].message)\n\n    def testBannedMojoFunctions(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('some/cpp/problematic/file2.cc', ['mojo::ConvertTo<>']),\n            MockFile('third_party/blink/ok/file3.cc', ['mojo::ConvertTo<>']),\n            MockFile('content/renderer/ok/file3.cc', ['mojo::ConvertTo<>']),\n        ]\n\n        results = PRESUBMIT.CheckNoBannedFunctions(input_api, MockOutputApi())\n\n        # warnings are results[0], errors are results[1]\n        self.assertEqual(1, len(results))\n        self.assertTrue('some/cpp/problematic/file2.cc' in results[0].message)\n        self.assertTrue(\n            'third_party/blink/ok/file3.cc' not in results[0].message)\n        self.assertTrue(\n            'content/renderer/ok/file3.cc' not in results[0].message)\n\n    def testBannedMojomPatterns(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile(\n                'bad.mojom',\n                ['struct Bad {', '  handle<shared_buffer> buffer;', '};']),\n            MockFile('good.mojom', [\n                'struct  Good {',\n                '  mojo_base.mojom.ReadOnlySharedMemoryRegion region1;',\n                '  mojo_base.mojom.WritableSharedMemoryRegion region2;',\n                '  mojo_base.mojom.UnsafeSharedMemoryRegion region3;', '};'\n            ]),\n        ]\n\n        results = PRESUBMIT.CheckNoBannedFunctions(input_api, MockOutputApi())\n\n        # warnings are results[0], errors are results[1]\n        self.assertEqual(1, len(results))\n        self.assertTrue('bad.mojom' in results[0].message)\n        self.assertTrue('good.mojom' not in results[0].message)\n\nclass NoProductionCodeUsingTestOnlyFunctionsTest(unittest.TestCase):\n\n    def testTruePositives(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('some/path/foo.cc', ['foo_for_testing();']),\n            MockFile('some/path/foo.mm', ['FooForTesting();']),\n            MockFile('some/path/foo.cxx', ['FooForTests();']),\n            MockFile('some/path/foo.cpp', ['foo_for_test();']),\n        ]\n\n        results = PRESUBMIT.CheckNoProductionCodeUsingTestOnlyFunctions(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertEqual(4, len(results[0].items))\n        self.assertTrue('foo.cc' in results[0].items[0])\n        self.assertTrue('foo.mm' in results[0].items[1])\n        self.assertTrue('foo.cxx' in results[0].items[2])\n        self.assertTrue('foo.cpp' in results[0].items[3])\n\n    def testFalsePositives(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('some/path/foo.h', ['foo_for_testing();']),\n            MockFile('some/path/foo.mm', ['FooForTesting() {']),\n            MockFile('some/path/foo.cc', ['::FooForTests();']),\n            MockFile('some/path/foo.cpp', ['// foo_for_test();']),\n            MockFile('some/path/foo.cxx', ['foo_for_test(); // IN-TEST']),\n        ]\n\n        results = PRESUBMIT.CheckNoProductionCodeUsingTestOnlyFunctions(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(results))\n\n    def testAllowedFiles(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('path/foo_unittest.cc', ['foo_for_testing();']),\n            MockFile('path/bar_unittest_mac.cc', ['foo_for_testing();']),\n            MockFile('path/baz_unittests.cc', ['foo_for_testing();']),\n        ]\n\n        results = PRESUBMIT.CheckNoProductionCodeUsingTestOnlyFunctions(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(results))\n\n\nclass NoProductionJavaCodeUsingTestOnlyFunctionsTest(unittest.TestCase):\n\n    def testTruePositives(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('dir/java/src/foo.java', ['FooForTesting();']),\n            MockFile('dir/java/src/bar.java', ['FooForTests(x);']),\n            MockFile('dir/java/src/baz.java', ['FooForTest(', 'y', ');']),\n            MockFile('dir/java/src/mult.java', [\n                'int x = SomethingLongHere()',\n                '    * SomethingLongHereForTesting();'\n            ])\n        ]\n\n        results = PRESUBMIT.CheckNoProductionCodeUsingTestOnlyFunctionsJava(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertEqual(4, len(results[0].items))\n        self.assertTrue('foo.java' in results[0].items[0])\n        self.assertTrue('bar.java' in results[0].items[1])\n        self.assertTrue('baz.java' in results[0].items[2])\n        self.assertTrue('mult.java' in results[0].items[3])\n\n    def testFalsePositives(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('dir/java/src/foo.xml', ['FooForTesting();']),\n            MockFile('dir/java/src/foo.java', ['FooForTests() {']),\n            MockFile('dir/java/src/bar.java', ['// FooForTest();']),\n            MockFile('dir/java/src/bar2.java', ['x = 1; // FooForTest();']),\n            MockFile('dir/java/src/bar3.java', ['@VisibleForTesting']),\n            MockFile('dir/java/src/bar4.java', ['@VisibleForTesting()']),\n            MockFile('dir/java/src/bar5.java', [\n                '@VisibleForTesting(otherwise = VisibleForTesting.PROTECTED)'\n            ]),\n            MockFile('dir/javatests/src/baz.java', ['FooForTest(', 'y', ');']),\n            MockFile('dir/junit/src/baz.java', ['FooForTest(', 'y', ');']),\n            MockFile('dir/junit/src/javadoc.java',\n                     ['/** Use FooForTest(); to obtain foo in tests.'\n                      ' */']),\n            MockFile(\n                'dir/junit/src/javadoc2.java',\n                ['/** ', ' * Use FooForTest(); to obtain foo in tests.'\n                 ' */']),\n            MockFile('dir/java/src/bar6.java',\n                     ['FooForTesting(); // IN-TEST']),\n        ]\n\n        results = PRESUBMIT.CheckNoProductionCodeUsingTestOnlyFunctionsJava(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(results))\n\n\nclass NewImagesWarningTest(unittest.TestCase):\n\n    def testTruePositives(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('dir/android/res/drawable/foo.png', []),\n            MockFile('dir/android/res/drawable-v21/bar.svg', []),\n            MockFile('dir/android/res/mipmap-v21-en/baz.webp', []),\n            MockFile('dir/android/res_gshoe/drawable-mdpi/foobar.png', []),\n        ]\n\n        results = PRESUBMIT._CheckNewImagesWarning(mock_input_api,\n                                                   MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertEqual(4, len(results[0].items))\n        self.assertTrue('foo.png' in results[0].items[0].LocalPath())\n        self.assertTrue('bar.svg' in results[0].items[1].LocalPath())\n        self.assertTrue('baz.webp' in results[0].items[2].LocalPath())\n        self.assertTrue('foobar.png' in results[0].items[3].LocalPath())\n\n    def testFalsePositives(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('dir/pngs/README.md', []),\n            MockFile('java/test/res/drawable/foo.png', []),\n            MockFile('third_party/blink/foo.png', []),\n            MockFile('dir/third_party/libpng/src/foo.cc', ['foobar']),\n            MockFile('dir/resources.webp/.gitignore', ['foo.png']),\n        ]\n\n        results = PRESUBMIT._CheckNewImagesWarning(mock_input_api,\n                                                   MockOutputApi())\n        self.assertEqual(0, len(results))\n\nclass ProductIconsTest(unittest.TestCase):\n\n    def test(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('components/vector_icons/google_jetpack.icon', []),\n            MockFile('components/vector_icons/generic_jetpack.icon', []),\n        ]\n\n        results = PRESUBMIT.CheckNoProductIconsAddedToPublicRepo(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertEqual(1, len(results[0].items))\n        self.assertTrue('google_jetpack.icon' in results[0].items[0])\n\nclass CheckUniquePtrTest(unittest.TestCase):\n\n    def testTruePositivesNullptr(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('dir/baz.cc', ['std::unique_ptr<T>()']),\n            MockFile('dir/baz-p.cc', ['std::unique_ptr<T<P>>()']),\n        ]\n\n        results = PRESUBMIT.CheckUniquePtrOnUpload(mock_input_api,\n                                                   MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertTrue('nullptr' in results[0].message)\n        self.assertEqual(2, len(results[0].items))\n        self.assertTrue('baz.cc' in results[0].items[0])\n        self.assertTrue('baz-p.cc' in results[0].items[1])\n\n    def testTruePositivesConstructor(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('dir/foo.cc', ['return std::unique_ptr<T>(foo);']),\n            MockFile('dir/bar.mm', ['bar = std::unique_ptr<T>(foo)']),\n            MockFile('dir/mult.cc', [\n                'return',\n                '    std::unique_ptr<T>(barVeryVeryLongFooSoThatItWouldNotFitAbove);'\n            ]),\n            MockFile('dir/mult2.cc', [\n                'barVeryVeryLongLongBaaaaaarSoThatTheLineLimitIsAlmostReached =',\n                '    std::unique_ptr<T>(foo);'\n            ]),\n            MockFile('dir/mult3.cc', [\n                'bar = std::unique_ptr<T>(',\n                '    fooVeryVeryVeryLongStillGoingWellThisWillTakeAWhileFinallyThere);'\n            ]),\n            MockFile('dir/multi_arg.cc', [\n                'auto p = std::unique_ptr<std::pair<T, D>>(new std::pair(T, D));'\n            ]),\n        ]\n\n        results = PRESUBMIT.CheckUniquePtrOnUpload(mock_input_api,\n                                                   MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertTrue('std::make_unique' in results[0].message)\n        self.assertEqual(6, len(results[0].items))\n        self.assertTrue('foo.cc' in results[0].items[0])\n        self.assertTrue('bar.mm' in results[0].items[1])\n        self.assertTrue('mult.cc' in results[0].items[2])\n        self.assertTrue('mult2.cc' in results[0].items[3])\n        self.assertTrue('mult3.cc' in results[0].items[4])\n        self.assertTrue('multi_arg.cc' in results[0].items[5])\n\n    def testFalsePositives(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('dir/foo.cc', ['return std::unique_ptr<T[]>(foo);']),\n            MockFile('dir/bar.mm', ['bar = std::unique_ptr<T[]>(foo)']),\n            MockFile('dir/file.cc', ['std::unique_ptr<T> p = Foo();']),\n            MockFile('dir/baz.cc',\n                     ['std::unique_ptr<T> result = std::make_unique<T>();']),\n            MockFile('dir/baz2.cc',\n                     ['std::unique_ptr<T> result = std::make_unique<T>(']),\n            MockFile('dir/nested.cc', ['set<std::unique_ptr<T>>();']),\n            MockFile('dir/nested2.cc', ['map<U, std::unique_ptr<T>>();']),\n            # Changed line is inside a multiline template block.\n            MockFile('dir/template.cc', [' std::unique_ptr<T>>(']),\n            MockFile('dir/template2.cc', [' std::unique_ptr<T>>()']),\n\n            # Two-argument invocation of std::unique_ptr is exempt because there is\n            # no equivalent using std::make_unique.\n            MockFile('dir/multi_arg.cc',\n                     ['auto p = std::unique_ptr<T, D>(new T(), D());']),\n        ]\n\n        results = PRESUBMIT.CheckUniquePtrOnUpload(mock_input_api,\n                                                   MockOutputApi())\n        self.assertEqual([], results)\n\nclass CheckNoDirectIncludesHeadersWhichRedefineStrCat(unittest.TestCase):\n\n    def testBlocksDirectIncludes(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('dir/foo_win.cc', ['#include \"shlwapi.h\"']),\n            MockFile('dir/bar.h', ['#include <propvarutil.h>']),\n            MockFile('dir/baz.h', ['#include <atlbase.h>']),\n            MockFile('dir/jumbo.h', ['#include \"sphelper.h\"']),\n        ]\n        results = PRESUBMIT.CheckNoStrCatRedefines(mock_input_api,\n                                                   MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertEqual(4, len(results[0].items))\n        self.assertTrue('StrCat' in results[0].message)\n        self.assertTrue('foo_win.cc' in results[0].items[0])\n        self.assertTrue('bar.h' in results[0].items[1])\n        self.assertTrue('baz.h' in results[0].items[2])\n        self.assertTrue('jumbo.h' in results[0].items[3])\n\n    def testAllowsToIncludeWrapper(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('dir/baz_win.cc', ['#include \"base/win/shlwapi.h\"']),\n            MockFile('dir/baz-win.h', ['#include \"base/win/atl.h\"']),\n        ]\n        results = PRESUBMIT.CheckNoStrCatRedefines(mock_input_api,\n                                                   MockOutputApi())\n        self.assertEqual(0, len(results))\n\n    def testAllowsToCreateWrapper(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('base/win/shlwapi.h', [\n                '#include <shlwapi.h>',\n                '#include \"base/win/windows_defines.inc\"'\n            ]),\n        ]\n        results = PRESUBMIT.CheckNoStrCatRedefines(mock_input_api,\n                                                   MockOutputApi())\n        self.assertEqual(0, len(results))\n\n    def testIgnoresNonImplAndHeaders(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('dir/foo_win.txt', ['#include \"shlwapi.h\"']),\n            MockFile('dir/bar.asm', ['#include <propvarutil.h>']),\n        ]\n        results = PRESUBMIT.CheckNoStrCatRedefines(mock_input_api,\n                                                   MockOutputApi())\n        self.assertEqual(0, len(results))\n\n\nclass StringTest(unittest.TestCase):\n    \"\"\"Tests ICU syntax check and translation screenshots check.\"\"\"\n\n    # An empty grd file.\n    OLD_GRD_CONTENTS = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n           <grit latest_public_release=\"1\" current_release=\"1\">\n             <release seq=\"1\">\n               <messages></messages>\n             </release>\n           </grit>\n        \"\"\".splitlines()\n    # A grd file with a single message.\n    NEW_GRD_CONTENTS1 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n           <grit latest_public_release=\"1\" current_release=\"1\">\n             <release seq=\"1\">\n               <messages>\n                 <message name=\"IDS_TEST1\">\n                   Test string 1\n                 </message>\n                 <message name=\"IDS_TEST_STRING_NON_TRANSLATEABLE1\"\n                     translateable=\"false\">\n                   Non translateable message 1, should be ignored\n                 </message>\n                 <message name=\"IDS_TEST_STRING_ACCESSIBILITY\"\n                     is_accessibility_with_no_ui=\"true\">\n                   Accessibility label 1, should be ignored\n                 </message>\n               </messages>\n             </release>\n           </grit>\n        \"\"\".splitlines()\n    # A grd file with two messages.\n    NEW_GRD_CONTENTS2 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n           <grit latest_public_release=\"1\" current_release=\"1\">\n             <release seq=\"1\">\n               <messages>\n                 <message name=\"IDS_TEST1\">\n                   Test string 1\n                 </message>\n                 <message name=\"IDS_TEST2\">\n                   Test string 2\n                 </message>\n                 <message name=\"IDS_TEST_STRING_NON_TRANSLATEABLE2\"\n                     translateable=\"false\">\n                   Non translateable message 2, should be ignored\n                 </message>\n               </messages>\n             </release>\n           </grit>\n        \"\"\".splitlines()\n    # A grd file with one ICU syntax message without syntax errors.\n    NEW_GRD_CONTENTS_ICU_SYNTAX_OK1 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n           <grit latest_public_release=\"1\" current_release=\"1\">\n             <release seq=\"1\">\n               <messages>\n                 <message name=\"IDS_TEST1\">\n                   {NUM, plural,\n                    =1 {Test text for numeric one}\n                    other {Test text for plural with {NUM} as number}}\n                 </message>\n               </messages>\n             </release>\n           </grit>\n        \"\"\".splitlines()\n    # A grd file with one ICU syntax message without syntax errors.\n    NEW_GRD_CONTENTS_ICU_SYNTAX_OK2 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n           <grit latest_public_release=\"1\" current_release=\"1\">\n             <release seq=\"1\">\n               <messages>\n                 <message name=\"IDS_TEST1\">\n                   {NUM, plural,\n                    =1 {Different test text for numeric one}\n                    other {Different test text for plural with {NUM} as number}}\n                 </message>\n               </messages>\n             </release>\n           </grit>\n        \"\"\".splitlines()\n    # A grd file with multiple ICU syntax messages without syntax errors.\n    NEW_GRD_CONTENTS_ICU_SYNTAX_OK3 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n           <grit latest_public_release=\"1\" current_release=\"1\">\n             <release seq=\"1\">\n               <messages>\n                 <message name=\"IDS_TEST1\">\n                   {NUM, plural,\n                    =0 {New test text for numeric zero}\n                    =1 {Different test text for numeric one}\n                    =2 {New test text for numeric two}\n                    =3 {New test text for numeric three}\n                    other {Different test text for plural with {NUM} as number}}\n                 </message>\n               </messages>\n             </release>\n           </grit>\n        \"\"\".splitlines()\n    # A grd file with one ICU syntax message with syntax errors (misses a comma).\n    NEW_GRD_CONTENTS_ICU_SYNTAX_ERROR = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n           <grit latest_public_release=\"1\" current_release=\"1\">\n             <release seq=\"1\">\n               <messages>\n                 <message name=\"IDS_TEST1\">\n                   {NUM, plural\n                    =1 {Test text for numeric one}\n                    other {Test text for plural with {NUM} as number}}\n                 </message>\n               </messages>\n             </release>\n           </grit>\n        \"\"\".splitlines()\n\n    OLD_GRDP_CONTENTS = ('<?xml version=\"1.0\" encoding=\"utf-8\"?>',\n                         '<grit-part>', '</grit-part>')\n\n    NEW_GRDP_CONTENTS1 = ('<?xml version=\"1.0\" encoding=\"utf-8\"?>',\n                          '<grit-part>', '<message name=\"IDS_PART_TEST1\">',\n                          'Part string 1', '</message>', '</grit-part>')\n\n    NEW_GRDP_CONTENTS2 = ('<?xml version=\"1.0\" encoding=\"utf-8\"?>',\n                          '<grit-part>', '<message name=\"IDS_PART_TEST1\">',\n                          'Part string 1', '</message>',\n                          '<message name=\"IDS_PART_TEST2\">', 'Part string 2',\n                          '</message>', '</grit-part>')\n\n    NEW_GRDP_CONTENTS3 = (\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>', '<grit-part>',\n        '<message name=\"IDS_PART_TEST1\" desc=\"Description with typo.\">',\n        'Part string 1', '</message>', '</grit-part>')\n\n    NEW_GRDP_CONTENTS4 = (\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>', '<grit-part>',\n        '<message name=\"IDS_PART_TEST1\" desc=\"Description with typo fixed.\">',\n        'Part string 1', '</message>', '</grit-part>')\n\n    NEW_GRDP_CONTENTS5 = (\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>', '<grit-part>',\n        '<message name=\"IDS_PART_TEST1\" meaning=\"Meaning with typo.\">',\n        'Part string 1', '</message>', '</grit-part>')\n\n    NEW_GRDP_CONTENTS6 = (\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>', '<grit-part>',\n        '<message name=\"IDS_PART_TEST1\" meaning=\"Meaning with typo fixed.\">',\n        'Part string 1', '</message>', '</grit-part>')\n\n    # A grdp file with one ICU syntax message without syntax errors.\n    NEW_GRDP_CONTENTS_ICU_SYNTAX_OK1 = (\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>', '<grit-part>',\n        '<message name=\"IDS_PART_TEST1\">', '{NUM, plural,',\n        '=1 {Test text for numeric one}',\n        'other {Test text for plural with {NUM} as number}}', '</message>',\n        '</grit-part>')\n    # A grdp file with one ICU syntax message without syntax errors.\n    NEW_GRDP_CONTENTS_ICU_SYNTAX_OK2 = (\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>', '<grit-part>',\n        '<message name=\"IDS_PART_TEST1\">', '{NUM, plural,',\n        '=1 {Different test text for numeric one}',\n        'other {Different test text for plural with {NUM} as number}}',\n        '</message>', '</grit-part>')\n    # A grdp file with multiple ICU syntax messages without syntax errors.\n    NEW_GRDP_CONTENTS_ICU_SYNTAX_OK3 = (\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>', '<grit-part>',\n        '<message name=\"IDS_PART_TEST1\">', '{NUM, plural,',\n        '=0 {New test text for numeric zero}',\n        '=1 {Different test text for numeric one}',\n        '=2 {New test text for numeric two}',\n        '=3 {New test text for numeric three}',\n        'other {Different test text for plural with {NUM} as number}}',\n        '</message>', '</grit-part>')\n\n    # A grdp file with one ICU syntax message with syntax errors (superfluous\n    # space).\n    NEW_GRDP_CONTENTS_ICU_SYNTAX_ERROR = (\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>', '<grit-part>',\n        '<message name=\"IDS_PART_TEST1\">', '{NUM, plural,',\n        '= 1 {Test text for numeric one}',\n        'other {Test text for plural with {NUM} as number}}', '</message>',\n        '</grit-part>')\n\n    VALID_SHA1 = ('0000000000000000000000000000000000000000', )\n    DO_NOT_UPLOAD_PNG_MESSAGE = ('Do not include actual screenshots in the '\n                                 'changelist. Run '\n                                 'tools/translate/upload_screenshots.py to '\n                                 'upload them instead:')\n    ADD_SIGNATURES_MESSAGE = ('You are adding UI strings.\\n'\n                              'To ensure the best translations, take '\n                              'screenshots of the relevant UI '\n                              '(https://g.co/chrome/translation) and add '\n                              'these files to your changelist:')\n    REMOVE_SIGNATURES_MESSAGE = ('You removed strings associated with these '\n                                 'files. Remove:')\n    ICU_SYNTAX_ERROR_MESSAGE = (\n        'ICU syntax errors were found in the following '\n        'strings (problems or feedback? Contact '\n        'rainhard@chromium.org):')\n    SHA1_FORMAT_MESSAGE = (\n        'The following files do not seem to contain valid sha1 '\n        'hashes. Make sure they contain hashes created by '\n        'tools/translate/upload_screenshots.py:')\n\n    def makeInputApi(self, files):\n        input_api = MockInputApi()\n        input_api.InitFiles(files)\n        return input_api\n\n    \"\"\" CL modified and added messages, but didn't add any screenshots.\"\"\"\n\n    def testNoScreenshots(self):\n        # No new strings (file contents same). Should not warn.\n        input_api = self.makeInputApi([\n            MockAffectedFile('test.grd',\n                             self.NEW_GRD_CONTENTS1,\n                             self.NEW_GRD_CONTENTS1,\n                             action='M'),\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS1,\n                             self.NEW_GRDP_CONTENTS1,\n                             action='M')\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n        # Add two new strings. Should have two warnings.\n        input_api = self.makeInputApi([\n            MockAffectedFile('test.grd',\n                             self.NEW_GRD_CONTENTS2,\n                             self.NEW_GRD_CONTENTS1,\n                             action='M'),\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS2,\n                             self.NEW_GRDP_CONTENTS1,\n                             action='M')\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertEqual(self.ADD_SIGNATURES_MESSAGE, warnings[0].message)\n        self.assertEqual('error', warnings[0].type)\n        self.assertEqual([\n            os.path.join('part_grdp', 'IDS_PART_TEST2.png.sha1'),\n            os.path.join('test_grd', 'IDS_TEST2.png.sha1')\n        ], warnings[0].items)\n\n        # Add four new strings. Should have four warnings.\n        input_api = self.makeInputApi([\n            MockAffectedFile('test.grd',\n                             self.NEW_GRD_CONTENTS2,\n                             self.OLD_GRD_CONTENTS,\n                             action='M'),\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS2,\n                             self.OLD_GRDP_CONTENTS,\n                             action='M')\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertEqual('error', warnings[0].type)\n        self.assertEqual(self.ADD_SIGNATURES_MESSAGE, warnings[0].message)\n        self.assertEqual([\n            os.path.join('part_grdp', 'IDS_PART_TEST1.png.sha1'),\n            os.path.join('part_grdp', 'IDS_PART_TEST2.png.sha1'),\n            os.path.join('test_grd', 'IDS_TEST1.png.sha1'),\n            os.path.join('test_grd', 'IDS_TEST2.png.sha1'),\n        ], warnings[0].items)\n\n    def testModifiedMessageDescription(self):\n        # CL modified a message description for a message that does not yet have a\n        # screenshot. Should not warn.\n        input_api = self.makeInputApi([\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS3,\n                             self.NEW_GRDP_CONTENTS4,\n                             action='M')\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n        # CL modified a message description for a message that already has a\n        # screenshot. Should not warn.\n        input_api = self.makeInputApi([\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS3,\n                             self.NEW_GRDP_CONTENTS4,\n                             action='M'),\n            MockFile(os.path.join('part_grdp', 'IDS_PART_TEST1.png.sha1'),\n                     self.VALID_SHA1,\n                     action='A')\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testModifiedMessageMeaning(self):\n        # CL modified a message meaning for a message that does not yet have a\n        # screenshot. Should warn.\n        input_api = self.makeInputApi([\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS5,\n                             self.NEW_GRDP_CONTENTS6,\n                             action='M')\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n\n        # CL modified a message meaning for a message that already has a\n        # screenshot. Should not warn.\n        input_api = self.makeInputApi([\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS5,\n                             self.NEW_GRDP_CONTENTS6,\n                             action='M'),\n            MockFile(os.path.join('part_grdp', 'IDS_PART_TEST1.png.sha1'),\n                     self.VALID_SHA1,\n                     action='A')\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testModifiedIntroducedInvalidSha1(self):\n        # CL modified a message and the sha1 file changed to invalid\n        input_api = self.makeInputApi([\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS5,\n                             self.NEW_GRDP_CONTENTS6,\n                             action='M'),\n            MockAffectedFile(os.path.join('part_grdp',\n                                          'IDS_PART_TEST1.png.sha1'),\n                             ('some invalid sha1', ),\n                             self.VALID_SHA1,\n                             action='M')\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n\n    def testPngAddedSha1NotAdded(self):\n        # CL added one new message in a grd file and added the png file associated\n        # with it, but did not add the corresponding sha1 file. This should warn\n        # twice:\n        # - Once for the added png file (because we don't want developers to upload\n        #   actual images)\n        # - Once for the missing .sha1 file\n        input_api = self.makeInputApi([\n            MockAffectedFile('test.grd',\n                             self.NEW_GRD_CONTENTS1,\n                             self.OLD_GRD_CONTENTS,\n                             action='M'),\n            MockAffectedFile(os.path.join('test_grd', 'IDS_TEST1.png'),\n                             'binary',\n                             action='A')\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual(2, len(warnings))\n        self.assertEqual('error', warnings[0].type)\n        self.assertEqual(self.DO_NOT_UPLOAD_PNG_MESSAGE, warnings[0].message)\n        self.assertEqual([os.path.join('test_grd', 'IDS_TEST1.png')],\n                         warnings[0].items)\n        self.assertEqual('error', warnings[1].type)\n        self.assertEqual(self.ADD_SIGNATURES_MESSAGE, warnings[1].message)\n        self.assertEqual([os.path.join('test_grd', 'IDS_TEST1.png.sha1')],\n                         warnings[1].items)\n\n        # CL added two messages (one in grd, one in grdp) and added the png files\n        # associated with the messages, but did not add the corresponding sha1\n        # files. This should warn twice:\n        # - Once for the added png files (because we don't want developers to upload\n        #   actual images)\n        # - Once for the missing .sha1 files\n        input_api = self.makeInputApi([\n            # Modified files:\n            MockAffectedFile('test.grd',\n                             self.NEW_GRD_CONTENTS1,\n                             self.OLD_GRD_CONTENTS,\n                             action='M'),\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS1,\n                             self.OLD_GRDP_CONTENTS,\n                             action='M'),\n            # Added files:\n            MockAffectedFile(os.path.join('test_grd', 'IDS_TEST1.png'),\n                             'binary',\n                             action='A'),\n            MockAffectedFile(os.path.join('part_grdp', 'IDS_PART_TEST1.png'),\n                             'binary',\n                             action='A')\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual(2, len(warnings))\n        self.assertEqual('error', warnings[0].type)\n        self.assertEqual(self.DO_NOT_UPLOAD_PNG_MESSAGE, warnings[0].message)\n        self.assertEqual([\n            os.path.join('part_grdp', 'IDS_PART_TEST1.png'),\n            os.path.join('test_grd', 'IDS_TEST1.png')\n        ], warnings[0].items)\n        self.assertEqual('error', warnings[0].type)\n        self.assertEqual(self.ADD_SIGNATURES_MESSAGE, warnings[1].message)\n        self.assertEqual([\n            os.path.join('part_grdp', 'IDS_PART_TEST1.png.sha1'),\n            os.path.join('test_grd', 'IDS_TEST1.png.sha1')\n        ], warnings[1].items)\n\n    def testScreenshotsWithSha1(self):\n        # CL added four messages (two each in a grd and grdp) and their\n        # corresponding .sha1 files. No warnings.\n        input_api = self.makeInputApi([\n            # Modified files:\n            MockAffectedFile('test.grd',\n                             self.NEW_GRD_CONTENTS2,\n                             self.OLD_GRD_CONTENTS,\n                             action='M'),\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS2,\n                             self.OLD_GRDP_CONTENTS,\n                             action='M'),\n            # Added files:\n            MockFile(os.path.join('test_grd', 'IDS_TEST1.png.sha1'),\n                     self.VALID_SHA1,\n                     action='A'),\n            MockFile(os.path.join('test_grd', 'IDS_TEST2.png.sha1'),\n                     ('0000000000000000000000000000000000000000', ''),\n                     action='A'),\n            MockFile(os.path.join('part_grdp', 'IDS_PART_TEST1.png.sha1'),\n                     self.VALID_SHA1,\n                     action='A'),\n            MockFile(os.path.join('part_grdp', 'IDS_PART_TEST2.png.sha1'),\n                     self.VALID_SHA1,\n                     action='A'),\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual([], warnings)\n\n    def testScreenshotsWithInvalidSha1(self):\n        input_api = self.makeInputApi([\n            # Modified files:\n            MockAffectedFile('test.grd',\n                             self.NEW_GRD_CONTENTS2,\n                             self.OLD_GRD_CONTENTS,\n                             action='M'),\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS2,\n                             self.OLD_GRDP_CONTENTS,\n                             action='M'),\n            # Added files:\n            MockFile(os.path.join('test_grd', 'IDS_TEST1.png.sha1'),\n                     self.VALID_SHA1,\n                     action='A'),\n            MockFile(os.path.join('test_grd', 'IDS_TEST2.png.sha1'),\n                     ('‰PNG', 'test'),\n                     action='A'),\n            MockFile(os.path.join('part_grdp', 'IDS_PART_TEST1.png.sha1'),\n                     self.VALID_SHA1,\n                     action='A'),\n            MockFile(os.path.join('part_grdp', 'IDS_PART_TEST2.png.sha1'),\n                     self.VALID_SHA1,\n                     action='A'),\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertEqual('error', warnings[0].type)\n        self.assertEqual(self.SHA1_FORMAT_MESSAGE, warnings[0].message)\n        self.assertEqual([os.path.join('test_grd', 'IDS_TEST2.png.sha1')],\n                         warnings[0].items)\n\n    def testScreenshotsRemovedWithSha1(self):\n        # Replace new contents with old contents in grd and grp files, removing\n        # IDS_TEST1, IDS_TEST2, IDS_PART_TEST1 and IDS_PART_TEST2.\n        # Should warn to remove the sha1 files associated with these strings.\n        input_api = self.makeInputApi([\n            # Modified files:\n            MockAffectedFile(\n                'test.grd',\n                self.OLD_GRD_CONTENTS,  # new_contents\n                self.NEW_GRD_CONTENTS2,  # old_contents\n                action='M'),\n            MockAffectedFile(\n                'part.grdp',\n                self.OLD_GRDP_CONTENTS,  # new_contents\n                self.NEW_GRDP_CONTENTS2,  # old_contents\n                action='M'),\n            # Unmodified files:\n            MockFile(os.path.join('test_grd', 'IDS_TEST1.png.sha1'),\n                     self.VALID_SHA1, ''),\n            MockFile(os.path.join('test_grd', 'IDS_TEST2.png.sha1'),\n                     self.VALID_SHA1, ''),\n            MockFile(os.path.join('part_grdp', 'IDS_PART_TEST1.png.sha1'),\n                     self.VALID_SHA1, ''),\n            MockFile(os.path.join('part_grdp', 'IDS_PART_TEST2.png.sha1'),\n                     self.VALID_SHA1, '')\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertEqual('error', warnings[0].type)\n        self.assertEqual(self.REMOVE_SIGNATURES_MESSAGE, warnings[0].message)\n        self.assertEqual([\n            os.path.join('part_grdp', 'IDS_PART_TEST1.png.sha1'),\n            os.path.join('part_grdp', 'IDS_PART_TEST2.png.sha1'),\n            os.path.join('test_grd', 'IDS_TEST1.png.sha1'),\n            os.path.join('test_grd', 'IDS_TEST2.png.sha1')\n        ], warnings[0].items)\n\n        # Same as above, but this time one of the .sha1 files is also removed.\n        input_api = self.makeInputApi([\n            # Modified files:\n            MockAffectedFile(\n                'test.grd',\n                self.OLD_GRD_CONTENTS,  # new_contents\n                self.NEW_GRD_CONTENTS2,  # old_contents\n                action='M'),\n            MockAffectedFile(\n                'part.grdp',\n                self.OLD_GRDP_CONTENTS,  # new_contents\n                self.NEW_GRDP_CONTENTS2,  # old_contents\n                action='M'),\n            # Unmodified files:\n            MockFile(os.path.join('test_grd', 'IDS_TEST1.png.sha1'),\n                     self.VALID_SHA1, ''),\n            MockFile(os.path.join('part_grdp', 'IDS_PART_TEST1.png.sha1'),\n                     self.VALID_SHA1, ''),\n            # Deleted files:\n            MockAffectedFile(os.path.join('test_grd', 'IDS_TEST2.png.sha1'),\n                             '',\n                             'old_contents',\n                             action='D'),\n            MockAffectedFile(os.path.join('part_grdp',\n                                          'IDS_PART_TEST2.png.sha1'),\n                             '',\n                             'old_contents',\n                             action='D')\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n        self.assertEqual('error', warnings[0].type)\n        self.assertEqual(self.REMOVE_SIGNATURES_MESSAGE, warnings[0].message)\n        self.assertEqual([\n            os.path.join('part_grdp', 'IDS_PART_TEST1.png.sha1'),\n            os.path.join('test_grd', 'IDS_TEST1.png.sha1')\n        ], warnings[0].items)\n\n        # Remove all sha1 files. There should be no warnings.\n        input_api = self.makeInputApi([\n            # Modified files:\n            MockAffectedFile('test.grd',\n                             self.OLD_GRD_CONTENTS,\n                             self.NEW_GRD_CONTENTS2,\n                             action='M'),\n            MockAffectedFile('part.grdp',\n                             self.OLD_GRDP_CONTENTS,\n                             self.NEW_GRDP_CONTENTS2,\n                             action='M'),\n            # Deleted files:\n            MockFile(os.path.join('test_grd', 'IDS_TEST1.png.sha1'),\n                     self.VALID_SHA1,\n                     action='D'),\n            MockFile(os.path.join('test_grd', 'IDS_TEST2.png.sha1'),\n                     self.VALID_SHA1,\n                     action='D'),\n            MockFile(os.path.join('part_grdp', 'IDS_PART_TEST1.png.sha1'),\n                     self.VALID_SHA1,\n                     action='D'),\n            MockFile(os.path.join('part_grdp', 'IDS_PART_TEST2.png.sha1'),\n                     self.VALID_SHA1,\n                     action='D')\n        ])\n        warnings = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        self.assertEqual([], warnings)\n\n    def testIcuSyntax(self):\n        # Add valid ICU syntax string. Should not raise an error.\n        input_api = self.makeInputApi([\n            MockAffectedFile('test.grd',\n                             self.NEW_GRD_CONTENTS_ICU_SYNTAX_OK2,\n                             self.NEW_GRD_CONTENTS1,\n                             action='M'),\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS_ICU_SYNTAX_OK2,\n                             self.NEW_GRDP_CONTENTS1,\n                             action='M')\n        ])\n        results = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        # We expect no ICU syntax errors.\n        icu_errors = [\n            e for e in results if e.message == self.ICU_SYNTAX_ERROR_MESSAGE\n        ]\n        self.assertEqual(0, len(icu_errors))\n\n        # Valid changes in ICU syntax. Should not raise an error.\n        input_api = self.makeInputApi([\n            MockAffectedFile('test.grd',\n                             self.NEW_GRD_CONTENTS_ICU_SYNTAX_OK2,\n                             self.NEW_GRD_CONTENTS_ICU_SYNTAX_OK1,\n                             action='M'),\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS_ICU_SYNTAX_OK2,\n                             self.NEW_GRDP_CONTENTS_ICU_SYNTAX_OK1,\n                             action='M')\n        ])\n        results = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        # We expect no ICU syntax errors.\n        icu_errors = [\n            e for e in results if e.message == self.ICU_SYNTAX_ERROR_MESSAGE\n        ]\n        self.assertEqual(0, len(icu_errors))\n\n        # Valid changes in ICU syntax. Should not raise an error.\n        input_api = self.makeInputApi([\n            MockAffectedFile('test.grd',\n                             self.NEW_GRD_CONTENTS_ICU_SYNTAX_OK3,\n                             self.NEW_GRD_CONTENTS_ICU_SYNTAX_OK1,\n                             action='M'),\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS_ICU_SYNTAX_OK3,\n                             self.NEW_GRDP_CONTENTS_ICU_SYNTAX_OK1,\n                             action='M')\n        ])\n        results = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        # We expect no ICU syntax errors.\n        icu_errors = [\n            e for e in results if e.message == self.ICU_SYNTAX_ERROR_MESSAGE\n        ]\n        self.assertEqual(0, len(icu_errors))\n\n        # Add invalid ICU syntax strings. Should raise two errors.\n        input_api = self.makeInputApi([\n            MockAffectedFile('test.grd',\n                             self.NEW_GRD_CONTENTS_ICU_SYNTAX_ERROR,\n                             self.NEW_GRD_CONTENTS1,\n                             action='M'),\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS_ICU_SYNTAX_ERROR,\n                             self.NEW_GRD_CONTENTS1,\n                             action='M')\n        ])\n        results = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        # We expect 2 ICU syntax errors.\n        icu_errors = [\n            e for e in results if e.message == self.ICU_SYNTAX_ERROR_MESSAGE\n        ]\n        self.assertEqual(1, len(icu_errors))\n        self.assertEqual([\n            'IDS_TEST1: This message looks like an ICU plural, but does not follow '\n            'ICU syntax.',\n            'IDS_PART_TEST1: Variant \"= 1\" is not valid for plural message'\n        ], icu_errors[0].items)\n\n        # Change two strings to have ICU syntax errors. Should raise two errors.\n        input_api = self.makeInputApi([\n            MockAffectedFile('test.grd',\n                             self.NEW_GRD_CONTENTS_ICU_SYNTAX_ERROR,\n                             self.NEW_GRD_CONTENTS_ICU_SYNTAX_OK1,\n                             action='M'),\n            MockAffectedFile('part.grdp',\n                             self.NEW_GRDP_CONTENTS_ICU_SYNTAX_ERROR,\n                             self.NEW_GRDP_CONTENTS_ICU_SYNTAX_OK1,\n                             action='M')\n        ])\n        results = PRESUBMIT.CheckStrings(input_api, MockOutputApi())\n        # We expect 2 ICU syntax errors.\n        icu_errors = [\n            e for e in results if e.message == self.ICU_SYNTAX_ERROR_MESSAGE\n        ]\n        self.assertEqual(1, len(icu_errors))\n        self.assertEqual([\n            'IDS_TEST1: This message looks like an ICU plural, but does not follow '\n            'ICU syntax.',\n            'IDS_PART_TEST1: Variant \"= 1\" is not valid for plural message'\n        ], icu_errors[0].items)\n\n\nclass TranslationExpectationsTest(unittest.TestCase):\n    ERROR_MESSAGE_FORMAT = (\n        \"Failed to get a list of translatable grd files. \"\n        \"This happens when:\\n\"\n        \" - One of the modified grd or grdp files cannot be parsed or\\n\"\n        \" - %s is not updated.\\n\"\n        \"Stack:\\n\")\n    REPO_ROOT = os.path.join('tools', 'translation', 'testdata')\n    # This lists all .grd files under REPO_ROOT.\n    EXPECTATIONS = os.path.join(REPO_ROOT, \"translation_expectations.pyl\")\n    # This lists all .grd files under REPO_ROOT except unlisted.grd.\n    EXPECTATIONS_WITHOUT_UNLISTED_FILE = os.path.join(\n        REPO_ROOT, \"translation_expectations_without_unlisted_file.pyl\")\n\n    # Tests that the presubmit doesn't return when no grd or grdp files are\n    # modified.\n    def testExpectationsNoModifiedGrd(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('not_used.txt',\n                             'not used',\n                             'not used',\n                             action='M')\n        ]\n        # Fake list of all grd files in the repo. This list is missing all grd/grdps\n        # under tools/translation/testdata. This is OK because the presubmit won't\n        # run in the first place since there are no modified grd/grps in input_api.\n        grd_files = ['doesnt_exist_doesnt_matter.grd']\n        warnings = PRESUBMIT.CheckTranslationExpectations(\n            input_api, MockOutputApi(), self.REPO_ROOT, self.EXPECTATIONS,\n            grd_files)\n        self.assertEqual(0, len(warnings))\n\n    # Tests that the list of files passed to the presubmit matches the list of\n    # files in the expectations.\n    def testExpectationsSuccess(self):\n        # Mock input file list needs a grd or grdp file in order to run the\n        # presubmit. The file itself doesn't matter.\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('dummy.grd', 'not used', 'not used', action='M')\n        ]\n        # List of all grd files in the repo.\n        grd_files = [\n            'test.grd', 'unlisted.grd', 'not_translated.grd', 'internal.grd'\n        ]\n        warnings = PRESUBMIT.CheckTranslationExpectations(\n            input_api, MockOutputApi(), self.REPO_ROOT, self.EXPECTATIONS,\n            grd_files)\n        self.assertEqual(0, len(warnings))\n\n    # Tests that the presubmit warns when a file is listed in expectations, but\n    # does not actually exist.\n    def testExpectationsMissingFile(self):\n        # Mock input file list needs a grd or grdp file in order to run the\n        # presubmit.\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('dummy.grd', 'not used', 'not used', action='M')\n        ]\n        # unlisted.grd is listed under tools/translation/testdata but is not\n        # included in translation expectations.\n        grd_files = ['unlisted.grd', 'not_translated.grd', 'internal.grd']\n        warnings = PRESUBMIT.CheckTranslationExpectations(\n            input_api, MockOutputApi(), self.REPO_ROOT, self.EXPECTATIONS,\n            grd_files)\n        self.assertEqual(1, len(warnings))\n        self.assertTrue(warnings[0].message.startswith(\n            self.ERROR_MESSAGE_FORMAT % self.EXPECTATIONS))\n        self.assertTrue(\n            (\"test.grd is listed in the translation expectations, \"\n             \"but this grd file does not exist\") in warnings[0].message)\n\n    # Tests that the presubmit warns when a file is not listed in expectations but\n    # does actually exist.\n    def testExpectationsUnlistedFile(self):\n        # Mock input file list needs a grd or grdp file in order to run the\n        # presubmit.\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('dummy.grd', 'not used', 'not used', action='M')\n        ]\n        # unlisted.grd is listed under tools/translation/testdata but is not\n        # included in translation expectations.\n        grd_files = [\n            'test.grd', 'unlisted.grd', 'not_translated.grd', 'internal.grd'\n        ]\n        warnings = PRESUBMIT.CheckTranslationExpectations(\n            input_api, MockOutputApi(), self.REPO_ROOT,\n            self.EXPECTATIONS_WITHOUT_UNLISTED_FILE, grd_files)\n        self.assertEqual(1, len(warnings))\n        self.assertTrue(warnings[0].message.startswith(\n            self.ERROR_MESSAGE_FORMAT %\n            self.EXPECTATIONS_WITHOUT_UNLISTED_FILE))\n        self.assertTrue((\"unlisted.grd appears to be translatable \"\n                         \"(because it contains <file> or <message> elements), \"\n                         \"but is not listed in the translation expectations.\"\n                         ) in warnings[0].message)\n\n    # Tests that the presubmit warns twice:\n    # - for a non-existing file listed in expectations\n    # - for an existing file not listed in expectations\n    def testMultipleWarnings(self):\n        # Mock input file list needs a grd or grdp file in order to run the\n        # presubmit.\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('dummy.grd', 'not used', 'not used', action='M')\n        ]\n        # unlisted.grd is listed under tools/translation/testdata but is not\n        # included in translation expectations.\n        # test.grd is not listed under tools/translation/testdata but is included\n        # in translation expectations.\n        grd_files = ['unlisted.grd', 'not_translated.grd', 'internal.grd']\n        warnings = PRESUBMIT.CheckTranslationExpectations(\n            input_api, MockOutputApi(), self.REPO_ROOT,\n            self.EXPECTATIONS_WITHOUT_UNLISTED_FILE, grd_files)\n        self.assertEqual(1, len(warnings))\n        self.assertTrue(warnings[0].message.startswith(\n            self.ERROR_MESSAGE_FORMAT %\n            self.EXPECTATIONS_WITHOUT_UNLISTED_FILE))\n        self.assertTrue((\"unlisted.grd appears to be translatable \"\n                         \"(because it contains <file> or <message> elements), \"\n                         \"but is not listed in the translation expectations.\"\n                         ) in warnings[0].message)\n        self.assertTrue(\n            (\"test.grd is listed in the translation expectations, \"\n             \"but this grd file does not exist\") in warnings[0].message)\n\n\nclass DISABLETypoInTest(unittest.TestCase):\n\n    def testPositive(self):\n        # Verify the typo \"DISABLE_\" instead of \"DISABLED_\" in various contexts\n        # where the desire is to disable a test.\n        tests = [\n            # Disabled on one platform:\n            '#if defined(OS_WIN)\\n'\n            '#define MAYBE_FoobarTest DISABLE_FoobarTest\\n'\n            '#else\\n'\n            '#define MAYBE_FoobarTest FoobarTest\\n'\n            '#endif\\n',\n            # Disabled on one platform spread cross lines:\n            '#if defined(OS_WIN)\\n'\n            '#define MAYBE_FoobarTest \\\\\\n'\n            '    DISABLE_FoobarTest\\n'\n            '#else\\n'\n            '#define MAYBE_FoobarTest FoobarTest\\n'\n            '#endif\\n',\n            # Disabled on all platforms:\n            '  TEST_F(FoobarTest, DISABLE_Foo)\\n{\\n}',\n            # Disabled on all platforms but multiple lines\n            '  TEST_F(FoobarTest,\\n   DISABLE_foo){\\n}\\n',\n        ]\n\n        for test in tests:\n            mock_input_api = MockInputApi()\n            mock_input_api.files = [\n                MockFile('some/path/foo_unittest.cc', test.splitlines()),\n            ]\n\n            results = PRESUBMIT.CheckNoDISABLETypoInTests(\n                mock_input_api, MockOutputApi())\n            self.assertEqual(\n                1,\n                len(results),\n                msg=('expected len(results) == 1 but got %d in test: %s' %\n                     (len(results), test)))\n            self.assertTrue(\n                'foo_unittest.cc' in results[0].message,\n                msg=(\n                    'expected foo_unittest.cc in message but got %s in test %s'\n                    % (results[0].message, test)))\n\n    def testIgnoreNotTestFiles(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('some/path/foo.cc', 'TEST_F(FoobarTest, DISABLE_Foo)'),\n        ]\n\n        results = PRESUBMIT.CheckNoDISABLETypoInTests(mock_input_api,\n                                                      MockOutputApi())\n        self.assertEqual(0, len(results))\n\n    def testIgnoreDeletedFiles(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('some/path/foo.cc', 'TEST_F(FoobarTest, Foo)',\n                     action='D'),\n        ]\n\n        results = PRESUBMIT.CheckNoDISABLETypoInTests(mock_input_api,\n                                                      MockOutputApi())\n        self.assertEqual(0, len(results))\n\nclass ForgettingMAYBEInTests(unittest.TestCase):\n\n    def testPositive(self):\n        test = ('#if defined(HAS_ENERGY)\\n'\n                '#define MAYBE_CastExplosion DISABLED_CastExplosion\\n'\n                '#else\\n'\n                '#define MAYBE_CastExplosion CastExplosion\\n'\n                '#endif\\n'\n                'TEST_F(ArchWizard, CastExplosion) {\\n'\n                '#if defined(ARCH_PRIEST_IN_PARTY)\\n'\n                '#define MAYBE_ArchPriest ArchPriest\\n'\n                '#else\\n'\n                '#define MAYBE_ArchPriest DISABLED_ArchPriest\\n'\n                '#endif\\n'\n                'TEST_F(ArchPriest, CastNaturesBounty) {\\n'\n                '#if !defined(CRUSADER_IN_PARTY)\\n'\n                '#define MAYBE_Crusader \\\\\\n'\n                '    DISABLED_Crusader \\n'\n                '#else\\n'\n                '#define MAYBE_Crusader \\\\\\n'\n                '    Crusader\\n'\n                '#endif\\n'\n                '  TEST_F(\\n'\n                '    Crusader,\\n'\n                '    CastTaunt) { }\\n'\n                '#if defined(LEARNED_BASIC_SKILLS)\\n'\n                '#define MAYBE_CastSteal \\\\\\n'\n                '    DISABLED_CastSteal \\n'\n                '#else\\n'\n                '#define MAYBE_CastSteal \\\\\\n'\n                '    CastSteal\\n'\n                '#endif\\n'\n                '  TEST_F(\\n'\n                '    ThiefClass,\\n'\n                '    CastSteal) { }\\n')\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('fantasyworld/classes_unittest.cc', test.splitlines()),\n        ]\n        results = PRESUBMIT.CheckForgettingMAYBEInTests(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(4, len(results))\n        self.assertTrue('CastExplosion' in results[0].message)\n        self.assertTrue(\n            'fantasyworld/classes_unittest.cc:2' in results[0].message)\n        self.assertTrue('ArchPriest' in results[1].message)\n        self.assertTrue(\n            'fantasyworld/classes_unittest.cc:8' in results[1].message)\n        self.assertTrue('Crusader' in results[2].message)\n        self.assertTrue(\n            'fantasyworld/classes_unittest.cc:14' in results[2].message)\n        self.assertTrue('CastSteal' in results[3].message)\n        self.assertTrue(\n            'fantasyworld/classes_unittest.cc:24' in results[3].message)\n\n    def testNegative(self):\n        test = ('#if defined(HAS_ENERGY)\\n'\n                '#define MAYBE_CastExplosion DISABLED_CastExplosion\\n'\n                '#else\\n'\n                '#define MAYBE_CastExplosion CastExplosion\\n'\n                '#endif\\n'\n                'TEST_F(ArchWizard, MAYBE_CastExplosion) {\\n'\n                '#if defined(ARCH_PRIEST_IN_PARTY)\\n'\n                '#define MAYBE_ArchPriest ArchPriest\\n'\n                '#else\\n'\n                '#define MAYBE_ArchPriest DISABLED_ArchPriest\\n'\n                '#endif\\n'\n                'TEST_F(MAYBE_ArchPriest, CastNaturesBounty) {\\n'\n                '#if !defined(CRUSADER_IN_PARTY)\\n'\n                '#define MAYBE_Crusader \\\\\\n'\n                '    DISABLED_Crusader \\n'\n                '#else\\n'\n                '#define MAYBE_Crusader \\\\\\n'\n                '    Crusader\\n'\n                '#endif\\n'\n                '  TEST_F(\\n'\n                '    MAYBE_Crusader,\\n'\n                '    CastTaunt) { }\\n'\n                '#if defined(LEARNED_BASIC_SKILLS)\\n'\n                '#define MAYBE_CastSteal \\\\\\n'\n                '    DISABLED_CastSteal \\n'\n                '#else\\n'\n                '#define MAYBE_CastSteal \\\\\\n'\n                '    CastSteal\\n'\n                '#endif\\n'\n                '  TEST_F(\\n'\n                '    ThiefClass,\\n'\n                '    MAYBE_CastSteal) { }\\n')\n\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockFile('fantasyworld/classes_unittest.cc', test.splitlines()),\n        ]\n        results = PRESUBMIT.CheckForgettingMAYBEInTests(\n            mock_input_api, MockOutputApi())\n        self.assertEqual(0, len(results))\n\nclass CheckFuzzTargetsTest(unittest.TestCase):\n\n    def _check(self, files):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = []\n        for fname, contents in files.items():\n            mock_input_api.files.append(MockFile(fname, contents.splitlines()))\n        return PRESUBMIT.CheckFuzzTargetsOnUpload(mock_input_api,\n                                                  MockOutputApi())\n\n    def testLibFuzzerSourcesIgnored(self):\n        results = self._check({\n            \"third_party/lib/Fuzzer/FuzzerDriver.cpp\":\n            \"LLVMFuzzerInitialize\",\n        })\n        self.assertEqual(results, [])\n\n    def testNonCodeFilesIgnored(self):\n        results = self._check({\n            \"README.md\": \"LLVMFuzzerInitialize\",\n        })\n        self.assertEqual(results, [])\n\n    def testNoErrorHeaderPresent(self):\n        results = self._check({\n            \"fuzzer.cc\":\n            (\"#include \\\"testing/libfuzzer/libfuzzer_exports.h\\\"\\n\" +\n             \"LLVMFuzzerInitialize\")\n        })\n        self.assertEqual(results, [])\n\n    def testErrorMissingHeader(self):\n        results = self._check({\"fuzzer.cc\": \"LLVMFuzzerInitialize\"})\n        self.assertEqual(len(results), 1)\n        self.assertEqual(results[0].items, ['fuzzer.cc'])\n\n\nclass SetNoParentTest(unittest.TestCase):\n\n    def testSetNoParentTopLevelAllowed(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('goat/OWNERS', [\n                'set noparent',\n                'jochen@chromium.org',\n            ])\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckSetNoParent(mock_input_api, mock_output_api)\n        self.assertEqual([], errors)\n\n    def testSetNoParentMissing(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('services/goat/OWNERS', [\n                'set noparent',\n                'jochen@chromium.org',\n                'per-file *.json=set noparent',\n                'per-file *.json=jochen@chromium.org',\n            ])\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckSetNoParent(mock_input_api, mock_output_api)\n        self.assertEqual(1, len(errors))\n        self.assertTrue('goat/OWNERS:1' in errors[0].long_text)\n        self.assertTrue('goat/OWNERS:3' in errors[0].long_text)\n\n    def testSetNoParentWithCorrectRule(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('services/goat/OWNERS', [\n                'set noparent',\n                'file://ipc/SECURITY_OWNERS',\n                'per-file *.json=set noparent',\n                'per-file *.json=file://ipc/SECURITY_OWNERS',\n            ])\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckSetNoParent(mock_input_api, mock_output_api)\n        self.assertEqual([], errors)\n\n\nclass MojomStabilityCheckTest(unittest.TestCase):\n\n    def runTestWithAffectedFiles(self, affected_files):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = affected_files\n        mock_output_api = MockOutputApi()\n        return PRESUBMIT.CheckStableMojomChanges(mock_input_api,\n                                                 mock_output_api)\n\n    def testSafeChangePasses(self):\n        errors = self.runTestWithAffectedFiles([\n            MockAffectedFile(\n                'foo/foo.mojom',\n                ['[Stable] struct S { [MinVersion=1] int32 x; };'],\n                old_contents=['[Stable] struct S {};'])\n        ])\n        self.assertEqual([], errors)\n\n    def testBadChangeFails(self):\n        errors = self.runTestWithAffectedFiles([\n            MockAffectedFile('foo/foo.mojom',\n                             ['[Stable] struct S { int32 x; };'],\n                             old_contents=['[Stable] struct S {};'])\n        ])\n        self.assertEqual(1, len(errors))\n        self.assertTrue('not backward-compatible' in errors[0].message)\n\n    def testDeletedFile(self):\n        \"\"\"Regression test for https://crbug.com/1091407.\"\"\"\n        errors = self.runTestWithAffectedFiles([\n            MockAffectedFile('a.mojom', [],\n                             old_contents=['struct S {};'],\n                             action='D'),\n            MockAffectedFile(\n                'b.mojom', ['struct S {}; struct T { S s; };'],\n                old_contents=['import \"a.mojom\"; struct T { S s; };'])\n        ])\n        self.assertEqual([], errors)\n\n\nclass CheckForUseOfChromeAppsDeprecationsTest(unittest.TestCase):\n\n    ERROR_MSG_PIECE = 'technologies which will soon be deprecated'\n\n    # Each positive test is also a naive negative test for the other cases.\n\n    def testWarningNMF(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile(\n                'foo.NMF', ['\"program\"', '\"Z\":\"content\"', 'B'],\n                ['\"program\"', 'B'],\n                scm_diff='\\n'.join([\n                    '--- foo.NMF.old  2020-12-02 20:40:54.430676385 +0100',\n                    '+++ foo.NMF.new  2020-12-02 20:41:02.086700197 +0100',\n                    '@@ -1,2 +1,3 @@', ' \"program\"', '+\"Z\":\"content\"', ' B'\n                ]),\n                action='M')\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckForUseOfChromeAppsDeprecations(\n            mock_input_api, mock_output_api)\n        self.assertEqual(1, len(errors))\n        self.assertTrue(self.ERROR_MSG_PIECE in errors[0].message)\n        self.assertTrue('foo.NMF' in errors[0].message)\n\n    def testWarningManifest(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile(\n                'manifest.json', ['\"app\":', '\"Z\":\"content\"', 'B'],\n                ['\"app\":\"', 'B'],\n                scm_diff='\\n'.join([\n                    '--- manifest.json.old  2020-12-02 20:40:54.430676385 +0100',\n                    '+++ manifest.json.new  2020-12-02 20:41:02.086700197 +0100',\n                    '@@ -1,2 +1,3 @@', ' \"app\"', '+\"Z\":\"content\"', ' B'\n                ]),\n                action='M')\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckForUseOfChromeAppsDeprecations(\n            mock_input_api, mock_output_api)\n        self.assertEqual(1, len(errors))\n        self.assertTrue(self.ERROR_MSG_PIECE in errors[0].message)\n        self.assertTrue('manifest.json' in errors[0].message)\n\n    def testOKWarningManifestWithoutApp(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile(\n                'manifest.json', ['\"name\":', '\"Z\":\"content\"', 'B'],\n                ['\"name\":\"', 'B'],\n                scm_diff='\\n'.join([\n                    '--- manifest.json.old  2020-12-02 20:40:54.430676385 +0100',\n                    '+++ manifest.json.new  2020-12-02 20:41:02.086700197 +0100',\n                    '@@ -1,2 +1,3 @@', ' \"app\"', '+\"Z\":\"content\"', ' B'\n                ]),\n                action='M')\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckForUseOfChromeAppsDeprecations(\n            mock_input_api, mock_output_api)\n        self.assertEqual(0, len(errors))\n\n    def testWarningPPAPI(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile(\n                'foo.hpp', ['A', '#include <ppapi.h>', 'B'], ['A', 'B'],\n                scm_diff='\\n'.join([\n                    '--- foo.hpp.old  2020-12-02 20:40:54.430676385 +0100',\n                    '+++ foo.hpp.new  2020-12-02 20:41:02.086700197 +0100',\n                    '@@ -1,2 +1,3 @@', ' A', '+#include <ppapi.h>', ' B'\n                ]),\n                action='M')\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckForUseOfChromeAppsDeprecations(\n            mock_input_api, mock_output_api)\n        self.assertEqual(1, len(errors))\n        self.assertTrue(self.ERROR_MSG_PIECE in errors[0].message)\n        self.assertTrue('foo.hpp' in errors[0].message)\n\n    def testNoWarningPPAPI(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile(\n                'foo.txt', ['A', 'Peppapig', 'B'], ['A', 'B'],\n                scm_diff='\\n'.join([\n                    '--- foo.txt.old  2020-12-02 20:40:54.430676385 +0100',\n                    '+++ foo.txt.new  2020-12-02 20:41:02.086700197 +0100',\n                    '@@ -1,2 +1,3 @@', ' A', '+Peppapig', ' B'\n                ]),\n                action='M')\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckForUseOfChromeAppsDeprecations(\n            mock_input_api, mock_output_api)\n        self.assertEqual(0, len(errors))\n\n\nclass CheckDeprecationOfPreferencesTest(unittest.TestCase):\n    # Test that a warning is generated if a preference registration is removed\n    # from a random file.\n    def testWarning(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile(\n                'foo.cc', ['A', 'B'],\n                ['A', 'prefs->RegisterStringPref(\"foo\", \"default\");', 'B'],\n                scm_diff='\\n'.join([\n                    '--- foo.cc.old  2020-12-02 20:40:54.430676385 +0100',\n                    '+++ foo.cc.new  2020-12-02 20:41:02.086700197 +0100',\n                    '@@ -1,3 +1,2 @@', ' A',\n                    '-prefs->RegisterStringPref(\"foo\", \"default\");', ' B'\n                ]),\n                action='M')\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckDeprecationOfPreferences(\n            mock_input_api, mock_output_api)\n        self.assertEqual(1, len(errors))\n        self.assertTrue(\n            'Discovered possible removal of preference registrations' in\n            errors[0].message)\n\n    # Test that a warning is inhibited if the preference registration was moved\n    # to the deprecation functions in browser prefs.\n    def testNoWarningForMigration(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            # RegisterStringPref was removed from foo.cc.\n            MockAffectedFile(\n                'foo.cc', ['A', 'B'],\n                ['A', 'prefs->RegisterStringPref(\"foo\", \"default\");', 'B'],\n                scm_diff='\\n'.join([\n                    '--- foo.cc.old  2020-12-02 20:40:54.430676385 +0100',\n                    '+++ foo.cc.new  2020-12-02 20:41:02.086700197 +0100',\n                    '@@ -1,3 +1,2 @@', ' A',\n                    '-prefs->RegisterStringPref(\"foo\", \"default\");', ' B'\n                ]),\n                action='M'),\n            # But the preference was properly migrated.\n            MockAffectedFile(\n                'chrome/browser/prefs/browser_prefs.cc', [\n                    '// BEGIN_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS',\n                    '// END_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS',\n                    '// BEGIN_MIGRATE_OBSOLETE_PROFILE_PREFS',\n                    'prefs->RegisterStringPref(\"foo\", \"default\");',\n                    '// END_MIGRATE_OBSOLETE_PROFILE_PREFS',\n                ], [\n                    '// BEGIN_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS',\n                    '// END_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS',\n                    '// BEGIN_MIGRATE_OBSOLETE_PROFILE_PREFS',\n                    '// END_MIGRATE_OBSOLETE_PROFILE_PREFS',\n                ],\n                scm_diff='\\n'.join([\n                    '--- browser_prefs.cc.old 2020-12-02 20:51:40.812686731 +0100',\n                    '+++ browser_prefs.cc.new 2020-12-02 20:52:02.936755539 +0100',\n                    '@@ -2,3 +2,4 @@',\n                    ' // END_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS',\n                    ' // BEGIN_MIGRATE_OBSOLETE_PROFILE_PREFS',\n                    '+prefs->RegisterStringPref(\"foo\", \"default\");',\n                    ' // END_MIGRATE_OBSOLETE_PROFILE_PREFS'\n                ]),\n                action='M'),\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckDeprecationOfPreferences(\n            mock_input_api, mock_output_api)\n        self.assertEqual(0, len(errors))\n\n    # Test that a warning is NOT inhibited if the preference registration was\n    # moved to a place outside of the migration functions in browser_prefs.cc\n    def testWarningForImproperMigration(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            # RegisterStringPref was removed from foo.cc.\n            MockAffectedFile(\n                'foo.cc', ['A', 'B'],\n                ['A', 'prefs->RegisterStringPref(\"foo\", \"default\");', 'B'],\n                scm_diff='\\n'.join([\n                    '--- foo.cc.old  2020-12-02 20:40:54.430676385 +0100',\n                    '+++ foo.cc.new  2020-12-02 20:41:02.086700197 +0100',\n                    '@@ -1,3 +1,2 @@', ' A',\n                    '-prefs->RegisterStringPref(\"foo\", \"default\");', ' B'\n                ]),\n                action='M'),\n            # The registration call was moved to a place in browser_prefs.cc that\n            # is outside the migration functions.\n            MockAffectedFile(\n                'chrome/browser/prefs/browser_prefs.cc', [\n                    'prefs->RegisterStringPref(\"foo\", \"default\");',\n                    '// BEGIN_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS',\n                    '// END_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS',\n                    '// BEGIN_MIGRATE_OBSOLETE_PROFILE_PREFS',\n                    '// END_MIGRATE_OBSOLETE_PROFILE_PREFS',\n                ], [\n                    '// BEGIN_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS',\n                    '// END_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS',\n                    '// BEGIN_MIGRATE_OBSOLETE_PROFILE_PREFS',\n                    '// END_MIGRATE_OBSOLETE_PROFILE_PREFS',\n                ],\n                scm_diff='\\n'.join([\n                    '--- browser_prefs.cc.old 2020-12-02 20:51:40.812686731 +0100',\n                    '+++ browser_prefs.cc.new 2020-12-02 20:52:02.936755539 +0100',\n                    '@@ -1,2 +1,3 @@',\n                    '+prefs->RegisterStringPref(\"foo\", \"default\");',\n                    ' // BEGIN_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS',\n                    ' // END_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS'\n                ]),\n                action='M'),\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckDeprecationOfPreferences(\n            mock_input_api, mock_output_api)\n        self.assertEqual(1, len(errors))\n        self.assertTrue(\n            'Discovered possible removal of preference registrations' in\n            errors[0].message)\n\n    # Check that the presubmit fails if a marker line in browser_prefs.cc is\n    # deleted.\n    def testDeletedMarkerRaisesError(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile(\n                'chrome/browser/prefs/browser_prefs.cc',\n                [\n                    '// BEGIN_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS',\n                    '// END_MIGRATE_OBSOLETE_LOCAL_STATE_PREFS',\n                    '// BEGIN_MIGRATE_OBSOLETE_PROFILE_PREFS',\n                    # The following line is deleted for this test\n                    # '// END_MIGRATE_OBSOLETE_PROFILE_PREFS',\n                ])\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckDeprecationOfPreferences(\n            mock_input_api, mock_output_api)\n        self.assertEqual(1, len(errors))\n        self.assertEqual(\n            'Broken .*MIGRATE_OBSOLETE_.*_PREFS markers in browser_prefs.cc.',\n            errors[0].message)\n\nclass CheckCrosApiNeedBrowserTestTest(unittest.TestCase):\n    def testWarning(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n        mock_input_api.files = [\n            MockAffectedFile('chromeos/crosapi/mojom/example.mojom', [], action='A'),\n        ]\n        result = PRESUBMIT.CheckCrosApiNeedBrowserTest(mock_input_api, mock_output_api)\n        self.assertEqual(1, len(result))\n        self.assertEqual(result[0].type, 'warning')\n\n    def testNoWarningWithBrowserTest(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n        mock_input_api.files = [\n            MockAffectedFile('chromeos/crosapi/mojom/example.mojom', [], action='A'),\n            MockAffectedFile('chrome/example_browsertest.cc', [], action='A'),\n        ]\n        result = PRESUBMIT.CheckCrosApiNeedBrowserTest(mock_input_api, mock_output_api)\n        self.assertEqual(0, len(result))\n\n    def testNoWarningModifyCrosapi(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n        mock_input_api.files = [\n            MockAffectedFile('chromeos/crosapi/mojom/example.mojom', [], action='M'),\n        ]\n        result = PRESUBMIT.CheckCrosApiNeedBrowserTest(mock_input_api, mock_output_api)\n        self.assertEqual(0, len(result))\n\n    def testNoWarningAddNonMojomFile(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n        mock_input_api.files = [\n            MockAffectedFile('chromeos/crosapi/mojom/example.cc', [], action='A'),\n        ]\n        result = PRESUBMIT.CheckCrosApiNeedBrowserTest(mock_input_api, mock_output_api)\n        self.assertEqual(0, len(result))\n\n    def testNoWarningNoneRelatedMojom(self):\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n        mock_input_api.files = [\n            MockAffectedFile('random/folder/example.mojom', [], action='A'),\n        ]\n        result = PRESUBMIT.CheckCrosApiNeedBrowserTest(mock_input_api, mock_output_api)\n        self.assertEqual(0, len(result))\n\n\nclass AssertAshOnlyCodeTest(unittest.TestCase):\n    def testErrorsOnlyOnAshDirectories(self):\n        files_in_ash = [\n            MockFile('ash/BUILD.gn', []),\n            MockFile('chrome/browser/ash/BUILD.gn', []),\n        ]\n        other_files = [\n            MockFile('chrome/browser/BUILD.gn', []),\n            MockFile('chrome/browser/foo/BUILD.gn', ['assert(is_chromeos_ash)']),\n        ]\n        input_api = MockInputApi()\n        input_api.files = files_in_ash\n        errors = PRESUBMIT.CheckAssertAshOnlyCode(input_api, MockOutputApi())\n        self.assertEqual(2, len(errors))\n\n        input_api.files = other_files\n        errors = PRESUBMIT.CheckAssertAshOnlyCode(input_api, MockOutputApi())\n        self.assertEqual(0, len(errors))\n\n    def testDoesNotErrorOnNonGNFiles(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('ash/test.h', ['assert(is_chromeos_ash)']),\n            MockFile('chrome/browser/ash/test.cc',\n                     ['assert(is_chromeos_ash)']),\n        ]\n        errors = PRESUBMIT.CheckAssertAshOnlyCode(input_api, MockOutputApi())\n        self.assertEqual(0, len(errors))\n\n    def testDeletedFile(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('ash/BUILD.gn', []),\n            MockFile('ash/foo/BUILD.gn', [], action='D'),\n        ]\n        errors = PRESUBMIT.CheckAssertAshOnlyCode(input_api, MockOutputApi())\n        self.assertEqual(1, len(errors))\n\n    def testDoesNotErrorWithAssertion(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('ash/BUILD.gn', ['assert(is_chromeos_ash)']),\n            MockFile('chrome/browser/ash/BUILD.gn',\n                     ['assert(is_chromeos_ash)']),\n            MockFile('chrome/browser/ash/1/BUILD.gn',\n                     ['assert(is_chromeos)']),\n            MockFile('chrome/browser/ash/2/BUILD.gn',\n                     ['assert(is_chromeos_ash)']),\n            MockFile('chrome/browser/ash/3/BUILD.gn',\n                     ['assert(is_chromeos, \"test\")']),\n            MockFile('chrome/browser/ash/4/BUILD.gn',\n                     ['assert(is_chromeos_ash, \"test\")']),\n        ]\n        errors = PRESUBMIT.CheckAssertAshOnlyCode(input_api, MockOutputApi())\n        self.assertEqual(0, len(errors))\n\n\nclass CheckRawPtrUsageTest(unittest.TestCase):\n\n    def testAllowedCases(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            # Browser-side files are allowed.\n            MockAffectedFile('test10/browser/foo.h', ['raw_ptr<int>']),\n            MockAffectedFile('test11/browser/foo.cc', ['raw_ptr<int>']),\n            MockAffectedFile('test12/blink/common/foo.cc', ['raw_ptr<int>']),\n            MockAffectedFile('test13/blink/public/common/foo.cc',\n                             ['raw_ptr<int>']),\n            MockAffectedFile('test14/blink/public/platform/foo.cc',\n                             ['raw_ptr<int>']),\n\n            # Non-C++ files are allowed.\n            MockAffectedFile('test20/renderer/foo.md', ['raw_ptr<int>']),\n\n            # Renderer code is generally allowed (except specifically\n            # disallowed directories).\n            MockAffectedFile('test30/renderer/foo.cc', ['raw_ptr<int>']),\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckRawPtrUsage(mock_input_api, mock_output_api)\n        self.assertFalse(errors)\n\n    def testDisallowedCases(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('test1/third_party/blink/renderer/core/foo.h',\n                             ['raw_ptr<int>']),\n            MockAffectedFile(\n                'test2/third_party/blink/renderer/platform/heap/foo.cc',\n                ['raw_ptr<int>']),\n            MockAffectedFile(\n                'test3/third_party/blink/renderer/platform/wtf/foo.cc',\n                ['raw_ptr<int>']),\n            MockAffectedFile(\n                'test4/third_party/blink/renderer/platform/fonts/foo.h',\n                ['raw_ptr<int>']),\n            MockAffectedFile(\n                'test5/third_party/blink/renderer/core/paint/foo.cc',\n                ['raw_ptr<int>']),\n            MockAffectedFile(\n                'test6/third_party/blink/renderer/platform/graphics/compositing/foo.h',\n                ['raw_ptr<int>']),\n            MockAffectedFile(\n                'test7/third_party/blink/renderer/platform/graphics/paint/foo.cc',\n                ['raw_ptr<int>']),\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckRawPtrUsage(mock_input_api, mock_output_api)\n        self.assertEqual(len(mock_input_api.files), len(errors))\n        for error in errors:\n            self.assertTrue(\n                'raw_ptr<T> should not be used in this renderer code' in\n                error.message)\n\nclass CheckAdvancedMemorySafetyChecksUsageTest(unittest.TestCase):\n\n    def testAllowedCases(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            # Non-C++ files are allowed.\n            MockAffectedFile('test20/renderer/foo.md',\n                             ['ADVANCED_MEMORY_SAFETY_CHECKS()']),\n\n            # Mentions in a comment are allowed.\n            MockAffectedFile('test30/renderer/foo.cc',\n                             ['//ADVANCED_MEMORY_SAFETY_CHECKS()']),\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckAdvancedMemorySafetyChecksUsage(\n            mock_input_api, mock_output_api)\n        self.assertFalse(errors)\n\n    def testDisallowedCases(self):\n        mock_input_api = MockInputApi()\n        mock_input_api.files = [\n            MockAffectedFile('test1/foo.h',\n                             ['ADVANCED_MEMORY_SAFETY_CHECKS()']),\n            MockAffectedFile('test2/foo.cc',\n                             ['ADVANCED_MEMORY_SAFETY_CHECKS()']),\n        ]\n        mock_output_api = MockOutputApi()\n        errors = PRESUBMIT.CheckAdvancedMemorySafetyChecksUsage(\n            mock_input_api, mock_output_api)\n        self.assertEqual(1, len(errors))\n        self.assertTrue('ADVANCED_MEMORY_SAFETY_CHECKS() macro is managed by'\n                        in errors[0].message)\n\nclass AssertPythonShebangTest(unittest.TestCase):\n    def testError(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('ash/test.py', ['#!/usr/bin/python']),\n            MockFile('chrome/test.py', ['#!/usr/bin/python2']),\n            MockFile('third_party/blink/test.py', ['#!/usr/bin/python3']),\n            MockFile('empty.py', []),\n        ]\n        errors = PRESUBMIT.CheckPythonShebang(input_api, MockOutputApi())\n        self.assertEqual(3, len(errors))\n\n    def testNonError(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('chrome/browser/BUILD.gn', ['#!/usr/bin/python']),\n            MockFile('third_party/blink/web_tests/external/test.py',\n                     ['#!/usr/bin/python2']),\n            MockFile('third_party/test/test.py', ['#!/usr/bin/python3']),\n        ]\n        errors = PRESUBMIT.CheckPythonShebang(input_api, MockOutputApi())\n        self.assertEqual(0, len(errors))\n\nclass VerifyDcheckParentheses(unittest.TestCase):\n\n    def testPermissibleUsage(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('okay1.cc', ['DCHECK_IS_ON()']),\n            MockFile('okay2.cc', ['#if DCHECK_IS_ON()']),\n\n            # Other constructs that aren't exactly `DCHECK_IS_ON()` do their\n            # own thing at their own risk.\n            MockFile('okay3.cc', ['PA_DCHECK_IS_ON']),\n            MockFile('okay4.cc', ['#if PA_DCHECK_IS_ON']),\n            MockFile('okay6.cc', ['PA_BUILDFLAG(PA_DCHECK_IS_ON)']),\n        ]\n        errors = PRESUBMIT.CheckDCHECK_IS_ONHasBraces(input_api,\n                                                      MockOutputApi())\n        self.assertEqual(0, len(errors))\n\n    def testMissingParentheses(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('bad1.cc', ['DCHECK_IS_ON']),\n            MockFile('bad2.cc', ['#if DCHECK_IS_ON']),\n            MockFile('bad3.cc', ['DCHECK_IS_ON && foo']),\n        ]\n        errors = PRESUBMIT.CheckDCHECK_IS_ONHasBraces(input_api,\n                                                      MockOutputApi())\n        self.assertEqual(3, len(errors))\n        for error in errors:\n            self.assertRegex(error.message, r'DCHECK_IS_ON().+parentheses')\n\n\nclass CheckAndroidTestAnnotations(unittest.TestCase):\n    \"\"\"Test the CheckAndroidTestAnnotations presubmit check.\"\"\"\n\n    def testBatchTruePositives(self):\n        \"\"\"Examples of when there is no @Batch or @DoNotBatch is correctly flagged.\n\"\"\"\n        mock_input = MockInputApi()\n        mock_input.files = [\n            MockFile('path/OneTest.java', ['public class OneTest']),\n            MockFile('path/TwoTest.java', ['public class TwoTest']),\n            MockFile('path/ThreeTest.java', [\n                '@Batch(Batch.PER_CLASS)',\n                '@RunWith(BaseRobolectricTestRunner.class)',\n                'public class Three {'\n            ]),\n            MockFile('path/FourTest.java', [\n                '@DoNotBatch(reason = \"placeholder reason 1\")',\n                '@RunWith(BaseRobolectricTestRunner.class)',\n                'public class Four {'\n            ]),\n        ]\n        errors = PRESUBMIT.CheckAndroidTestAnnotations(mock_input, MockOutputApi())\n        self.assertEqual(2, len(errors))\n        self.assertEqual(2, len(errors[0].items))\n        self.assertIn('OneTest.java', errors[0].items[0])\n        self.assertIn('TwoTest.java', errors[0].items[1])\n        self.assertEqual(2, len(errors[1].items))\n        self.assertIn('ThreeTest.java', errors[1].items[0])\n        self.assertIn('FourTest.java', errors[1].items[1])\n\n    def testBatchAnnotationsPresent(self):\n        \"\"\"Examples of when there is @Batch or @DoNotBatch is correctly flagged.\"\"\"\n        mock_input = MockInputApi()\n        mock_input.files = [\n            MockFile('path/OneTest.java',\n                     ['@Batch(Batch.PER_CLASS)', 'public class One {']),\n            MockFile('path/TwoTest.java', [\n                '@DoNotBatch(reason = \"placeholder reasons.\")',\n                'public class Two {'\n            ]),\n            MockFile('path/ThreeTest.java', [\n                '@Batch(Batch.PER_CLASS)',\n                'public class Three extends BaseTestA {'\n            ], [\n                '@Batch(Batch.PER_CLASS)',\n                'public class Three extends BaseTestB {'\n            ]),\n            MockFile('path/FourTest.java', [\n                '@DoNotBatch(reason = \"placeholder reason 1\")',\n                'public class Four extends BaseTestA {'\n            ], [\n                '@DoNotBatch(reason = \"placeholder reason 2\")',\n                'public class Four extends BaseTestB {'\n            ]),\n            MockFile('path/FiveTest.java', [\n                'import androidx.test.uiautomator.UiDevice;',\n                'public class Five extends BaseTestA {'\n            ], [\n                'import androidx.test.uiautomator.UiDevice;',\n                'public class Five extends BaseTestB {'\n            ]),\n            MockFile('path/SixTest.java', [\n                '@RunWith(BaseRobolectricTestRunner.class)',\n                'public class Six extends BaseTestA {'\n            ], [\n                '@RunWith(BaseRobolectricTestRunner.class)',\n                'public class Six extends BaseTestB {'\n            ]),\n            MockFile('path/SevenTest.java', [\n                '@RunWith(BaseRobolectricTestRunner.class)',\n                'public class Seven extends BaseTestA {'\n            ], [\n                '@RunWith(BaseRobolectricTestRunner.class)',\n                'public class Seven extends BaseTestB {'\n            ]),\n            MockFile(\n                'path/OtherClass.java',\n                ['public class OtherClass {'],\n            ),\n            MockFile('path/PRESUBMIT.py', [\n                '@Batch(Batch.PER_CLASS)',\n                '@DoNotBatch(reason = \"placeholder reason)'\n            ]),\n            MockFile(\n                'path/AnnotationTest.java',\n                ['public @interface SomeAnnotation {'],\n            ),\n        ]\n        errors = PRESUBMIT.CheckAndroidTestAnnotations(mock_input, MockOutputApi())\n        self.assertEqual(0, len(errors))\n\n    def testWrongRobolectricTestRunner(self):\n        mock_input = MockInputApi()\n        mock_input.files = [\n            MockFile('path/OneTest.java', [\n                '@RunWith(RobolectricTestRunner.class)',\n                'public class ThreeTest {'\n            ]),\n            MockFile('path/TwoTest.java', [\n                'import org.chromium.base.test.BaseRobolectricTestRule;',\n                '@RunWith(RobolectricTestRunner.class)',\n                'public class TwoTest {'\n            ]),\n            MockFile('path/ThreeTest.java', [\n                '@RunWith(FooRobolectricTestRunner.class)',\n                'public class ThreeTest {'\n            ]),\n            MockFile('webapks/FourTest.java', [\n                '@RunWith(RobolectricTestRunner.class)',\n                'public class ThreeTest {'\n            ]),\n        ]\n        errors = PRESUBMIT.CheckAndroidTestAnnotations(mock_input, MockOutputApi())\n        self.assertEqual(1, len(errors))\n        self.assertEqual(1, len(errors[0].items))\n        self.assertIn('OneTest.java', errors[0].items[0])\n\n\nclass CheckMockAnnotation(unittest.TestCase):\n    \"\"\"Test the CheckMockAnnotation presubmit check.\"\"\"\n\n    def testTruePositives(self):\n        \"\"\"Examples of @Mock or @Spy being used and nothing should be flagged.\"\"\"\n        mock_input = MockInputApi()\n        mock_input.files = [\n            MockFile('path/OneTest.java', [\n                'import a.b.c.Bar;',\n                'import a.b.c.Foo;',\n                '@Mock public static Foo f = new Foo();',\n                'Mockito.mock(new Bar(a, b, c))'\n            ]),\n            MockFile('path/TwoTest.java', [\n                'package x.y.z;',\n                'import static org.mockito.Mockito.spy;',\n                '@Spy',\n                'public static FooBar<Baz> f;',\n                'a = spy(Baz.class)'\n            ]),\n        ]\n        errors = PRESUBMIT.CheckMockAnnotation(mock_input, MockOutputApi())\n        self.assertEqual(1, len(errors))\n        self.assertEqual(2, len(errors[0].items))\n        self.assertIn('a.b.c.Bar in path/OneTest.java', errors[0].items)\n        self.assertIn('x.y.z.Baz in path/TwoTest.java', errors[0].items)\n\n    def testTrueNegatives(self):\n        \"\"\"Examples of when we should not be flagging mock() or spy() calls.\"\"\"\n        mock_input = MockInputApi()\n        mock_input.files = [\n            MockFile('path/OneTest.java', [\n                'package a.b.c;',\n                'import org.chromium.base.test.BaseRobolectricTestRunner;',\n                'Mockito.mock(Abc.class)'\n            ]),\n            MockFile('path/TwoTest.java', [\n                'package a.b.c;',\n                'import androidx.test.uiautomator.UiDevice;',\n                'Mockito.spy(new Def())'\n            ]),\n            MockFile('path/ThreeTest.java', [\n                'package a.b.c;',\n                'import static org.mockito.Mockito.spy;',\n                '@Spy',\n                'public static Foo f = new Abc();',\n                'a = spy(Foo.class)'\n            ]),\n            MockFile('path/FourTest.java', [\n                'package a.b.c;',\n                'import static org.mockito.Mockito.mock;',\n                '@Spy',\n                'public static Bar b = new Abc(a, b, c, d);',\n                ' mock(new Bar(a,b,c))'\n            ]),\n            MockFile('path/FiveTest.java', [\n                'package a.b.c;',\n                '@Mock',\n                'public static Baz<abc> b;',\n                'Mockito.mock(Baz.class)'\n            ]),\n            MockFile('path/SixTest.java', [\n                'package a.b.c;',\n                'import android.view.View;',\n                'import java.ArrayList;',\n                'Mockito.spy(new View())',\n                'Mockito.mock(ArrayList.class)'\n            ]),\n            MockFile('path/SevenTest.java', [\n                'package a.b.c;',\n                '@Mock private static Seven s;',\n                'Mockito.mock(Seven.class)'\n            ]),\n            MockFile('path/EightTest.java', [\n                'package a.b.c;',\n                '@Spy Eight e = new Eight2();',\n                'Mockito.py(new Eight())'\n            ]),\n        ]\n        errors = PRESUBMIT.CheckMockAnnotation(mock_input, MockOutputApi())\n        self.assertEqual(0, len(errors))\n\n\nclass AssertNoJsInIosTest(unittest.TestCase):\n    def testErrorJs(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('components/feature/ios/resources/script.js', []),\n            MockFile('ios/chrome/feature/resources/script.js', []),\n        ]\n        results = PRESUBMIT.CheckNoJsInIos(input_api, MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertEqual('error', results[0].type)\n        self.assertEqual(2, len(results[0].items))\n\n    def testNonError(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('chrome/resources/script.js', []),\n            MockFile('components/feature/ios/resources/script.ts', []),\n            MockFile('ios/chrome/feature/resources/script.ts', []),\n            MockFile('ios/web/feature/resources/script.ts', []),\n            MockFile('ios/third_party/script.js', []),\n            MockFile('third_party/ios/script.js', []),\n        ]\n        results = PRESUBMIT.CheckNoJsInIos(input_api, MockOutputApi())\n        self.assertEqual(0, len(results))\n\n    def testExistingFilesWarningOnly(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('ios/chrome/feature/resources/script.js', [], action='M'),\n            MockFile('ios/chrome/feature/resources/script2.js', [], action='D'),\n        ]\n        results = PRESUBMIT.CheckNoJsInIos(input_api, MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertEqual('warning', results[0].type)\n        self.assertEqual(1, len(results[0].items))\n\n    def testMovedScriptWarningOnly(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('ios/chrome/feature/resources/script.js', [], action='D'),\n            MockFile('ios/chrome/renamed_feature/resources/script.js', [], action='A'),\n        ]\n        results = PRESUBMIT.CheckNoJsInIos(input_api, MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertEqual('warning', results[0].type)\n        self.assertEqual(1, len(results[0].items))\n\nclass CheckNoAbbreviationInPngFileNameTest(unittest.TestCase):\n\n    def testHasAbbreviation(self):\n        \"\"\"test png file names with abbreviation that fails the check\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('image_a.png', [], action='A'),\n            MockFile('image_a_.png', [], action='A'),\n            MockFile('image_a_name.png', [], action='A'),\n            MockFile('chrome/ui/feature_name/resources/image_a.png', [],\n                     action='A'),\n            MockFile('chrome/ui/feature_name/resources/image_a_.png', [],\n                     action='A'),\n            MockFile('chrome/ui/feature_name/resources/image_a_name.png', [],\n                     action='A'),\n        ]\n        results = PRESUBMIT.CheckNoAbbreviationInPngFileName(\n            input_api, MockOutputApi())\n        self.assertEqual(1, len(results))\n        self.assertEqual('error', results[0].type)\n        self.assertEqual(len(input_api.files), len(results[0].items))\n\n    def testNoAbbreviation(self):\n        \"\"\"test png file names without abbreviation that passes the check\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('a.png', [], action='A'),\n            MockFile('_a.png', [], action='A'),\n            MockFile('image.png', [], action='A'),\n            MockFile('image_ab_.png', [], action='A'),\n            MockFile('image_ab_name.png', [], action='A'),\n            # These paths used to fail because `feature_a_name` matched the regex by mistake.\n            # They should pass now because the path components ahead of the file name are ignored in the check.\n            MockFile('chrome/ui/feature_a_name/resources/a.png', [],\n                     action='A'),\n            MockFile('chrome/ui/feature_a_name/resources/_a.png', [],\n                     action='A'),\n            MockFile('chrome/ui/feature_a_name/resources/image.png', [],\n                     action='A'),\n            MockFile('chrome/ui/feature_a_name/resources/image_ab_.png', [],\n                     action='A'),\n            MockFile('chrome/ui/feature_a_name/resources/image_ab_name.png',\n                     [],\n                     action='A'),\n        ]\n        results = PRESUBMIT.CheckNoAbbreviationInPngFileName(\n            input_api, MockOutputApi())\n        self.assertEqual(0, len(results))\n\nclass CheckDanglingUntriagedTest(unittest.TestCase):\n\n    def testError(self):\n        \"\"\"Test patch adding dangling pointers are reported\"\"\"\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.change.DescriptionText = lambda: \"description\"\n        mock_input_api.files = [\n            MockAffectedFile(\n                local_path=\"foo/foo.cc\",\n                old_contents=[\"raw_ptr<T>\"],\n                new_contents=[\"raw_ptr<T, DanglingUntriaged>\"],\n            )\n        ]\n        msgs = PRESUBMIT.CheckDanglingUntriaged(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual(len(msgs), 1)\n        self.assertEqual(len(msgs[0].message), 10)\n        self.assertEqual(\n            msgs[0].message[0],\n            \"Unexpected new occurrences of `DanglingUntriaged` detected. Please\",\n        )\n\nclass CheckDanglingUntriagedTest(unittest.TestCase):\n\n    def testError(self):\n        \"\"\"Test patch adding dangling pointers are reported\"\"\"\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.change.DescriptionText = lambda: \"description\"\n        mock_input_api.files = [\n            MockAffectedFile(\n                local_path=\"foo/foo.cc\",\n                old_contents=[\"raw_ptr<T>\"],\n                new_contents=[\"raw_ptr<T, DanglingUntriaged>\"],\n            )\n        ]\n        msgs = PRESUBMIT.CheckDanglingUntriaged(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual(len(msgs), 1)\n        self.assertTrue(\n            (\"Unexpected new occurrences of `DanglingUntriaged` detected\"\n             in msgs[0].message))\n\n    def testNonCppFile(self):\n        \"\"\"Test patch adding dangling pointers are not reported in non C++ files\"\"\"\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.change.DescriptionText = lambda: \"description\"\n        mock_input_api.files = [\n            MockAffectedFile(\n                local_path=\"foo/README.md\",\n                old_contents=[\"\"],\n                new_contents=[\"The DanglingUntriaged annotation means\"],\n            )\n        ]\n        msgs = PRESUBMIT.CheckDanglingUntriaged(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual(len(msgs), 0)\n\n    def testDeveloperAcknowledgeInCommitDescription(self):\n        \"\"\"Test patch adding dangling pointers, but acknowledged by the developers\n    aren't reported\"\"\"\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile(\n                local_path=\"foo/foo.cc\",\n                old_contents=[\"raw_ptr<T>\"],\n                new_contents=[\"raw_ptr<T, DanglingUntriaged>\"],\n            )\n        ]\n        mock_input_api.change.DescriptionText = lambda: (\n            \"DanglingUntriaged-notes: Sorry about this!\")\n        msgs = PRESUBMIT.CheckDanglingUntriaged(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual(len(msgs), 0)\n\n    def testDeveloperAcknowledgeInCommitFooter(self):\n        \"\"\"Test patch adding dangling pointers, but acknowledged by the developers\n    aren't reported\"\"\"\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile(\n                local_path=\"foo/foo.cc\",\n                old_contents=[\"raw_ptr<T>\"],\n                new_contents=[\"raw_ptr<T, DanglingUntriaged>\"],\n            )\n        ]\n        mock_input_api.change.DescriptionText = lambda: \"description\"\n        mock_input_api.change.footers[\"DanglingUntriaged-notes\"] = [\"Sorry!\"]\n        msgs = PRESUBMIT.CheckDanglingUntriaged(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual(len(msgs), 0)\n\n    def testCongrats(self):\n        \"\"\"Test the presubmit congrats users removing dangling pointers\"\"\"\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile(\n                local_path=\"foo/foo.cc\",\n                old_contents=[\"raw_ptr<T, DanglingUntriaged>\"],\n                new_contents=[\"raw_ptr<T>\"],\n            )\n        ]\n        mock_input_api.change.DescriptionText = lambda: (\n            \"This patch fixes some DanglingUntriaged pointers!\")\n        msgs = PRESUBMIT.CheckDanglingUntriaged(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual(len(msgs), 1)\n        self.assertTrue(\n            \"DanglingUntriaged pointers removed: 1\" in msgs[0].message)\n        self.assertTrue(\"Thank you!\" in msgs[0].message)\n\n    def testRenameFile(self):\n        \"\"\"Patch that we do not warn about DanglingUntriaged when moving files\"\"\"\n        mock_input_api = MockInputApi()\n        mock_output_api = MockOutputApi()\n\n        mock_input_api.files = [\n            MockAffectedFile(\n                local_path=\"foo/foo.cc\",\n                old_contents=[\"raw_ptr<T, DanglingUntriaged>\"],\n                new_contents=[\"\"],\n                action=\"D\",\n            ),\n            MockAffectedFile(\n                local_path=\"foo/foo.cc\",\n                old_contents=[\"\"],\n                new_contents=[\"raw_ptr<T, DanglingUntriaged>\"],\n                action=\"A\",\n            ),\n        ]\n        mock_input_api.change.DescriptionText = lambda: (\n            \"This patch moves files\")\n        msgs = PRESUBMIT.CheckDanglingUntriaged(mock_input_api,\n                                                mock_output_api)\n        self.assertEqual(len(msgs), 0)\n\nclass CheckInlineConstexprDefinitionsInHeadersTest(unittest.TestCase):\n\n    def testNoInlineConstexprInHeaderFile(self):\n        \"\"\"Tests that non-inlined constexpr variables in headers fail the test.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('src/constants.h',\n                             ['constexpr int kVersion = 5;'])\n        ]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n\n    def testNoInlineConstexprInHeaderFileInitializedFromFunction(self):\n        \"\"\"Tests that non-inlined constexpr header variables that are initialized from a function fail.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('src/constants.h',\n                             ['constexpr int kVersion = GetVersion();'])\n        ]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n\n    def testNoInlineConstexprInHeaderFileInitializedWithExpression(self):\n        \"\"\"Tests that non-inlined constexpr header variables initialized with an expression fail.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('src/constants.h',\n                             ['constexpr int kVersion = (4 + 5)*3;'])\n        ]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n\n    def testNoInlineConstexprInHeaderFileBraceInitialized(self):\n        \"\"\"Tests that non-inlined constexpr header variables that are brace-initialized fail.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('src/constants.h', ['constexpr int kVersion{5};'])\n        ]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n\n    def testNoInlineConstexprInHeaderWithAttribute(self):\n        \"\"\"Tests that non-inlined constexpr header variables that have compiler attributes fail.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('src/constants.h',\n                             ['constexpr [[maybe_unused]] int kVersion{5};'])\n        ]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n\n    def testInlineConstexprInHeaderWithAttribute(self):\n        \"\"\"Tests that inlined constexpr header variables that have compiler attributes pass.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile(\n                'src/constants.h',\n                ['inline constexpr [[maybe_unused]] int kVersion{5};']),\n            MockAffectedFile(\n                'src/constants.h',\n                ['constexpr inline [[maybe_unused]] int kVersion{5};']),\n            MockAffectedFile(\n                'src/constants.h',\n                ['inline constexpr [[maybe_unused]] inline int kVersion{5};'])\n        ]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testNoInlineConstexprInHeaderFileMultipleLines(self):\n        \"\"\"Tests that non-inlined constexpr header variable definitions spanning multiple lines fail.\"\"\"\n        input_api = MockInputApi()\n        lines = [\n            'constexpr char kLongName =',\n            '    \"This is a very long name of something.\";'\n        ]\n        input_api.files = [MockAffectedFile('src/constants.h', lines)]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n\n    def testNoInlineConstexprInCCFile(self):\n        \"\"\"Tests that non-inlined constexpr variables in .cc files pass the test.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('src/implementation.cc',\n                             ['constexpr int kVersion = 5;'])\n        ]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testInlineConstexprInHeaderFile(self):\n        \"\"\"Tests that inlined constexpr variables in header files pass the test.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('src/constants.h',\n                             ['constexpr inline int kX = 5;']),\n            MockAffectedFile('src/version.h',\n                             ['inline constexpr float kY = 5.0f;'])\n        ]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testConstexprStandaloneFunctionInHeaderFile(self):\n        \"\"\"Tests that non-inlined constexpr functions in headers pass the test.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('src/helpers.h', ['constexpr int GetVersion();'])\n        ]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testConstexprWithAbseilAttributeInHeader(self):\n        \"\"\"Tests that non-inlined constexpr variables with Abseil-type prefixes in headers fail.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('src/helpers.h',\n                             ['ABSL_FOOFOO constexpr int i = 5;'])\n        ]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n\n    def testInlineConstexprWithAbseilAttributeInHeader(self):\n        \"\"\"Tests that inlined constexpr variables with Abseil-type prefixes in headers pass.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('src/helpers.h',\n                             ['constexpr ABSL_FOO inline int i = 5;'])\n        ]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testConstexprWithClangAttributeInHeader(self):\n        \"\"\"Tests that non-inlined constexpr variables with attributes with colons in headers fail.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('src/helpers.h',\n                             ['[[clang::someattribute]] constexpr int i = 5;'])\n        ]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n\n    def testInlineConstexprWithClangAttributeInHeader(self):\n        \"\"\"Tests that inlined constexpr variables with attributes with colons in headers pass.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile(\n                'src/helpers.h',\n                ['constexpr [[clang::someattribute]] inline int i = 5;'])\n        ]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testNoExplicitInlineConstexprInsideClassInHeaderFile(self):\n        \"\"\"Tests that non-inlined constexpr class members pass the test.\"\"\"\n        input_api = MockInputApi()\n        lines = [\n            'class SomeClass {', ' public:',\n            '  static constexpr kVersion = 5;', '};'\n        ]\n        input_api.files = [MockAffectedFile('src/class.h', lines)]\n        warnings = PRESUBMIT.CheckInlineConstexprDefinitionsInHeaders(\n            input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\n    def testTodoBugReferencesWithOldBugId(self):\n        \"\"\"Tests that an old monorail bug ID in a TODO fails.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('src/helpers.h', ['// TODO(crbug.com/12345)'])\n        ]\n        warnings = PRESUBMIT.CheckTodoBugReferences(input_api, MockOutputApi())\n        self.assertEqual(1, len(warnings))\n\n    def testTodoBugReferencesWithUpdatedBugId(self):\n        \"\"\"Tests that a new issue tracker bug ID in a TODO passes.\"\"\"\n        input_api = MockInputApi()\n        input_api.files = [\n            MockAffectedFile('src/helpers.h', ['// TODO(crbug.com/40781525)'])\n        ]\n        warnings = PRESUBMIT.CheckTodoBugReferences(input_api, MockOutputApi())\n        self.assertEqual(0, len(warnings))\n\nclass CheckDeprecatedSyncConsentFunctionsTest(unittest.TestCase):\n    \"\"\"Test the presubmit for deprecated ConsentLevel::kSync functions.\"\"\"\n\n    def testCppMobilePlatformPath(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('chrome/browser/android/file.cc', ['OtherFunction']),\n            MockFile('chrome/android/file.cc', ['HasSyncConsent']),\n            MockFile('ios/file.mm', ['CanSyncFeatureStart']),\n            MockFile('components/foo/ios/file.cc', ['IsSyncFeatureEnabled']),\n            MockFile('components/foo/delegate_android.cc',\n                     ['IsSyncFeatureActive']),\n            MockFile('components/foo/delegate_ios.cc',\n                     ['IsSyncFeatureActive']),\n            MockFile('components/foo/android_delegate.cc',\n                     ['IsSyncFeatureActive']),\n            MockFile('components/foo/ios_delegate.cc',\n                     ['IsSyncFeatureActive']),\n        ]\n\n        results = PRESUBMIT.CheckNoBannedFunctions(input_api, MockOutputApi())\n\n        self.assertEqual(1, len(results))\n        self.assertFalse(\n            'chrome/browser/android/file.cc' in results[0].message),\n        self.assertTrue('chrome/android/file.cc' in results[0].message),\n        self.assertTrue('ios/file.mm' in results[0].message),\n        self.assertTrue('components/foo/ios/file.cc' in results[0].message),\n        self.assertTrue(\n            'components/foo/delegate_android.cc' in results[0].message),\n        self.assertTrue(\n            'components/foo/delegate_ios.cc' in results[0].message),\n        self.assertTrue(\n            'components/foo/android_delegate.cc' in results[0].message),\n        self.assertTrue(\n            'components/foo/ios_delegate.cc' in results[0].message),\n\n    def testCppNonMobilePlatformPath(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('chrome/browser/file.cc', ['HasSyncConsent']),\n            MockFile('bios/file.cc', ['HasSyncConsent']),\n            MockFile('components/kiosk/file.cc', ['HasSyncConsent']),\n        ]\n\n        results = PRESUBMIT.CheckNoBannedFunctions(input_api, MockOutputApi())\n\n        self.assertEqual(0, len(results))\n\n    def testJavaPath(self):\n        input_api = MockInputApi()\n        input_api.files = [\n            MockFile('components/foo/file1.java', ['otherFunction']),\n            MockFile('components/foo/file2.java', ['hasSyncConsent']),\n            MockFile('chrome/foo/file3.java', ['canSyncFeatureStart']),\n            MockFile('chrome/foo/file4.java', ['isSyncFeatureEnabled']),\n            MockFile('chrome/foo/file5.java', ['isSyncFeatureActive']),\n        ]\n\n        results = PRESUBMIT.CheckNoBannedFunctions(input_api, MockOutputApi())\n\n        self.assertEqual(1, len(results))\n        self.assertFalse('components/foo/file1.java' in results[0].message),\n        self.assertTrue('components/foo/file2.java' in results[0].message),\n        self.assertTrue('chrome/foo/file3.java' in results[0].message),\n        self.assertTrue('chrome/foo/file4.java' in results[0].message),\n        self.assertTrue('chrome/foo/file5.java' in results[0].message),\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
        },
        {
          "name": "PRESUBMIT_test_mocks.py",
          "type": "blob",
          "size": 12.2451171875,
          "content": "# Copyright 2014 The Chromium Authors\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\nfrom collections import defaultdict\nimport fnmatch\nimport json\nimport os\nimport re\nimport subprocess\nimport sys\n\n\n_REPO_ROOT = os.path.abspath(os.path.dirname(__file__))\n\n# TODO(dcheng): It's kind of horrible that this is copy and pasted from\n# presubmit_canned_checks.py, but it's far easier than any of the alternatives.\ndef _ReportErrorFileAndLine(filename, line_num, dummy_line):\n    \"\"\"Default error formatter for _FindNewViolationsOfRule.\"\"\"\n    return '%s:%s' % (filename, line_num)\n\n\nclass MockCannedChecks(object):\n    def _FindNewViolationsOfRule(self, callable_rule, input_api,\n                                 source_file_filter=None,\n                                 error_formatter=_ReportErrorFileAndLine):\n        \"\"\"Find all newly introduced violations of a per-line rule (a callable).\n\n    Arguments:\n      callable_rule: a callable taking a file extension and line of input and\n        returning True if the rule is satisfied and False if there was a\n        problem.\n      input_api: object to enumerate the affected files.\n      source_file_filter: a filter to be passed to the input api.\n      error_formatter: a callable taking (filename, line_number, line) and\n        returning a formatted error string.\n\n    Returns:\n      A list of the newly-introduced violations reported by the rule.\n    \"\"\"\n        errors = []\n        for f in input_api.AffectedFiles(include_deletes=False,\n                                         file_filter=source_file_filter):\n            # For speed, we do two passes, checking first the full file.\n            # Shelling out to the SCM to determine the changed region can be\n            # quite expensive on Win32. Assuming that most files will be kept\n            # problem-free, we can skip the SCM operations most of the time.\n            extension = str(f.LocalPath()).rsplit('.', 1)[-1]\n            if all(callable_rule(extension, line) for line in f.NewContents()):\n                # No violation found in full text: can skip considering diff.\n                continue\n\n            for line_num, line in f.ChangedContents():\n                if not callable_rule(extension, line):\n                    errors.append(\n                        error_formatter(f.LocalPath(), line_num, line))\n\n        return errors\n\n\nclass MockInputApi(object):\n    \"\"\"Mock class for the InputApi class.\n\n  This class can be used for unittests for presubmit by initializing the files\n  attribute as the list of changed files.\n  \"\"\"\n\n    DEFAULT_FILES_TO_SKIP = ()\n\n    def __init__(self):\n        self.basename = os.path.basename\n        self.canned_checks = MockCannedChecks()\n        self.fnmatch = fnmatch\n        self.json = json\n        self.re = re\n\n        # We want os_path.exists() and os_path.isfile() to work for files\n        # that are both in the filesystem and mock files we have added\n        # via InitFiles().\n        # By setting os_path to a copy of os.path rather than directly we\n        # can not only have os_path.exists() be a combined output for fake\n        # files and real files in the filesystem.\n        import importlib.util\n        SPEC_OS_PATH = importlib.util.find_spec('os.path')\n        os_path1 = importlib.util.module_from_spec(SPEC_OS_PATH)\n        SPEC_OS_PATH.loader.exec_module(os_path1)\n        sys.modules['os_path1'] = os_path1\n        self.os_path = os_path1\n\n        self.platform = sys.platform\n        self.python_executable = sys.executable\n        self.python3_executable = sys.executable\n        self.platform = sys.platform\n        self.subprocess = subprocess\n        self.sys = sys\n        self.files = []\n        self.is_committing = False\n        self.change = MockChange([])\n        self.presubmit_local_path = os.path.dirname(\n            os.path.abspath(sys.argv[0]))\n        self.is_windows = sys.platform == 'win32'\n        self.no_diffs = False\n        # Although this makes assumptions about command line arguments used by\n        # test scripts that create mocks, it is a convenient way to set up the\n        # verbosity via the input api.\n        self.verbose = '--verbose' in sys.argv\n\n    def InitFiles(self, files):\n        # Actual presubmit calls normpath, but too many tests break to do this\n        # right in MockFile().\n        for f in files:\n            f._local_path = os.path.normpath(f._local_path)\n        self.files = files\n        files_that_exist = {\n            p.AbsoluteLocalPath()\n            for p in files if p.Action() != 'D'\n        }\n\n        def mock_exists(path):\n            if not os.path.isabs(path):\n                path = os.path.join(self.presubmit_local_path, path)\n            path = os.path.normpath(path)\n            return path in files_that_exist or any(\n                f.startswith(path)\n                for f in files_that_exist) or os.path.exists(path)\n\n        def mock_isfile(path):\n            if not os.path.isabs(path):\n                path = os.path.join(self.presubmit_local_path, path)\n            path = os.path.normpath(path)\n            return path in files_that_exist or os.path.isfile(path)\n\n        def mock_glob(pattern, *args, **kwargs):\n            return fnmatch.filter(files_that_exist, pattern)\n\n        # Do not stub these in the constructor to not break existing tests.\n        self.os_path.exists = mock_exists\n        self.os_path.isfile = mock_isfile\n        self.glob = mock_glob\n\n    def AffectedFiles(self, file_filter=None, include_deletes=True):\n        for file in self.files:\n            if file_filter and not file_filter(file):\n                continue\n            if not include_deletes and file.Action() == 'D':\n                continue\n            yield file\n\n    def RightHandSideLines(self, source_file_filter=None):\n        affected_files = self.AffectedSourceFiles(source_file_filter)\n        for af in affected_files:\n            lines = af.ChangedContents()\n            for line in lines:\n                yield (af, line[0], line[1])\n\n    def AffectedSourceFiles(self, file_filter=None):\n        return self.AffectedFiles(file_filter=file_filter,\n                                  include_deletes=False)\n\n    def AffectedTestableFiles(self, file_filter=None):\n        return self.AffectedFiles(file_filter=file_filter,\n                                  include_deletes=False)\n\n    def FilterSourceFile(self, file, files_to_check=(), files_to_skip=()):\n        local_path = file.LocalPath()\n        found_in_files_to_check = not files_to_check\n        if files_to_check:\n            if type(files_to_check) is str:\n                raise TypeError(\n                    'files_to_check should be an iterable of strings')\n            for pattern in files_to_check:\n                compiled_pattern = re.compile(pattern)\n                if compiled_pattern.match(local_path):\n                    found_in_files_to_check = True\n                    break\n        if files_to_skip:\n            if type(files_to_skip) is str:\n                raise TypeError(\n                    'files_to_skip should be an iterable of strings')\n            for pattern in files_to_skip:\n                compiled_pattern = re.compile(pattern)\n                if compiled_pattern.match(local_path):\n                    return False\n        return found_in_files_to_check\n\n    def LocalPaths(self):\n        return [file.LocalPath() for file in self.files]\n\n    def PresubmitLocalPath(self):\n        return self.presubmit_local_path\n\n    def ReadFile(self, filename, mode='r'):\n        if hasattr(filename, 'AbsoluteLocalPath'):\n            filename = filename.AbsoluteLocalPath()\n        norm_filename = os.path.normpath(filename)\n        for file_ in self.files:\n            to_check = (file_.LocalPath(), file_.AbsoluteLocalPath())\n            if filename in to_check or norm_filename in to_check:\n                return '\\n'.join(file_.NewContents())\n        # Otherwise, file is not in our mock API.\n        raise IOError(\"No such file or directory: '%s'\" % filename)\n\n\nclass MockOutputApi(object):\n    \"\"\"Mock class for the OutputApi class.\n\n  An instance of this class can be passed to presubmit unittests for outputting\n  various types of results.\n  \"\"\"\n\n    class PresubmitResult(object):\n\n        def __init__(self, message, items=None, long_text=''):\n            self.message = message\n            self.items = items\n            self.long_text = long_text\n\n        def __repr__(self):\n            return self.message\n\n    class PresubmitError(PresubmitResult):\n\n        def __init__(self, message, items=None, long_text=''):\n            MockOutputApi.PresubmitResult.__init__(self, message, items,\n                                                   long_text)\n            self.type = 'error'\n\n    class PresubmitPromptWarning(PresubmitResult):\n\n        def __init__(self, message, items=None, long_text=''):\n            MockOutputApi.PresubmitResult.__init__(self, message, items,\n                                                   long_text)\n            self.type = 'warning'\n\n    class PresubmitNotifyResult(PresubmitResult):\n\n        def __init__(self, message, items=None, long_text=''):\n            MockOutputApi.PresubmitResult.__init__(self, message, items,\n                                                   long_text)\n            self.type = 'notify'\n\n    class PresubmitPromptOrNotify(PresubmitResult):\n\n        def __init__(self, message, items=None, long_text=''):\n            MockOutputApi.PresubmitResult.__init__(self, message, items,\n                                                   long_text)\n            self.type = 'promptOrNotify'\n\n    def __init__(self):\n        self.more_cc = []\n\n    def AppendCC(self, more_cc):\n        self.more_cc.append(more_cc)\n\n\nclass MockFile(object):\n    \"\"\"Mock class for the File class.\n\n  This class can be used to form the mock list of changed files in\n  MockInputApi for presubmit unittests.\n  \"\"\"\n\n    def __init__(self,\n                 local_path,\n                 new_contents,\n                 old_contents=None,\n                 action='A',\n                 scm_diff=None):\n        self._local_path = local_path\n        self._new_contents = new_contents\n        self._changed_contents = [(i + 1, l)\n                                  for i, l in enumerate(new_contents)]\n        self._action = action\n        if scm_diff:\n            self._scm_diff = scm_diff\n        else:\n            self._scm_diff = (\"--- /dev/null\\n+++ %s\\n@@ -0,0 +1,%d @@\\n\" %\n                              (local_path, len(new_contents)))\n            for l in new_contents:\n                self._scm_diff += \"+%s\\n\" % l\n        self._old_contents = old_contents or []\n\n    def __str__(self):\n        return self._local_path\n\n    def Action(self):\n        return self._action\n\n    def ChangedContents(self):\n        return self._changed_contents\n\n    def NewContents(self):\n        return self._new_contents\n\n    def LocalPath(self):\n        return self._local_path\n\n    def AbsoluteLocalPath(self):\n        return os.path.join(_REPO_ROOT, self._local_path)\n\n    def GenerateScmDiff(self):\n        return self._scm_diff\n\n    def OldContents(self):\n        return self._old_contents\n\n    def rfind(self, p):\n        \"\"\"Required when os.path.basename() is called on MockFile.\"\"\"\n        return self._local_path.rfind(p)\n\n    def __getitem__(self, i):\n        \"\"\"Required when os.path.basename() is called on MockFile.\"\"\"\n        return self._local_path[i]\n\n    def __len__(self):\n        \"\"\"Required when os.path.basename() is called on MockFile.\"\"\"\n        return len(self._local_path)\n\n    def replace(self, altsep, sep):\n        \"\"\"Required when os.path.basename() is called on MockFile.\"\"\"\n        return self._local_path.replace(altsep, sep)\n\n\nclass MockAffectedFile(MockFile):\n    pass\n\n\nclass MockChange(object):\n    \"\"\"Mock class for Change class.\n\n  This class can be used in presubmit unittests to mock the query of the\n  current change.\n  \"\"\"\n\n    def __init__(self, changed_files):\n        self._changed_files = changed_files\n        self.author_email = None\n        self.footers = defaultdict(list)\n\n    def LocalPaths(self):\n        return self._changed_files\n\n    def AffectedFiles(self,\n                      include_dirs=False,\n                      include_deletes=True,\n                      file_filter=None):\n        return self._changed_files\n\n    def GitFootersFromDescription(self):\n        return self.footers\n\n    def RepositoryRoot(self):\n        return _REPO_ROOT\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.9462890625,
          "content": "# ![Logo](chrome/app/theme/chromium/product_logo_64.png) Chromium\n\nChromium is an open-source browser project that aims to build a safer, faster,\nand more stable way for all users to experience the web.\n\nThe project's web site is https://www.chromium.org.\n\nTo check out the source code locally, don't use `git clone`! Instead,\nfollow [the instructions on how to get the code](docs/get_the_code.md).\n\nDocumentation in the source is rooted in [docs/README.md](docs/README.md).\n\nLearn how to [Get Around the Chromium Source Code Directory\nStructure](https://www.chromium.org/developers/how-tos/getting-around-the-chrome-source-code).\n\nFor historical reasons, there are some small top level directories. Now the\nguidance is that new top level directories are for product (e.g. Chrome,\nAndroid WebView, Ash). Even if these products have multiple executables, the\ncode should be in subdirectories of the product.\n\nIf you found a bug, please file it at https://crbug.com/new.\n"
        },
        {
          "name": "WATCHLISTS",
          "type": "blob",
          "size": 147.9931640625,
          "content": "# Copyright 2012 The Chromium Authors\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n# Watchlist Rules\n# Refer: https://chromium.googlesource.com/chromium/src/+/main/docs/infra/watchlists.md\n\n# IMPORTANT: The regular expression filepath is tested against each path using\n# re.search, so it is not usually necessary to add .* at the end of the pattern.\n\n{\n  'WATCHLIST_DEFINITIONS': {\n    'about_flags': {\n      'filepath': 'chrome/browser/about_flags\\.cc'\n    },\n    'accelerators': {\n      'filepath': 'ash/accelerators/|'\\\n                  'ash/public/cpp/accelerator.*',\n    },\n    'accessibility': {\n      'filepath': 'accessibility' \\\n                  '|braille' \\\n                  '|chromevox' \\\n                  '|iaccessible2' \\\n                  '|isimpledom' \\\n                  '|liblouis'\n    },\n    'accessibility_component_extensions': {\n      'filepath': 'chrome/browser/resources/chromeos/accessibility'\n    },\n    'accessibility_features_ash': {\n      'filepath': 'ash/accessibility/' \\\n                  '|ash/color_enhancement/',\n    },\n    'accessibility_minimal_core': {\n      'filepath': 'ui/accessibility/(ax_enums|ax_event_generator|ax_node\\.|ax_node_data\\.|ax_tree\\.|ax_tree_serializer)' \\\n                  '|ui/accessibility/platform/ax_platform_node_(base|mac|win)' \\\n                  '|third_party/(WebKit|blink)/.*(accessibility|ax_object|web_ax|ax_node|ax_layout)' \\\n                  '|content/renderer/accessibility/render_accessibility_impl' \\\n                  '|ui/accessibility/platform/browser_accessibility(\\.|_manager|_win|_com|_cocoa)'\n    },\n    'accessibility_reading': {\n      'filepath': 'read_anything/|'\\\n      'chrome/renderer/accessibility/',\n    },\n    'accessibility_service': {\n      'filepath': 'services/accessibility/',\n    },\n    'add_to_homescreen': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/webapps/|'\\\n                  'chrome/android/javatests/src/org/chromium/chrome/browser/webapps/|'\\\n                  'chrome/android/junit/src/org/chromium/chrome/browser/webapps/|'\\\n                  'chrome/browser/android/shortcut_|'\\\n                  'chrome/browser/android/webapps/|'\\\n                  'components/webapps/browser/android/',\n    },\n    'agent_scheduling_group': {\n      'filepath': '.*agent_scheduling_group|.*agent_group_scheduler',\n    },\n    'android_browser_controls': {\n      'filepath': 'chrome/browser/browser_controls/android/java/src/org/chromium/chrome/browser/browser_controls/' \\\n                  '|chrome/android/java/src/org/chromium/chrome/browser/fullscreen/' \\\n                  '|chrome/browser/ui/android/toolbar/'\n                  '|chrome/browser/android/compositor/scene_layer/'\n    },\n    'android_crash_reporting': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/crash/' \\\n                  '|chrome/browser/android/crash/' \\\n                  '|components/crash/android/' \\\n                  '|components/minidump_uploader/'\n    },\n    'android_flags': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/flags/'\n    },\n    'android_infobars': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/infobar/'\n    },\n    'android_infra': {\n      'filepath': 'build/config/android/' \\\n                  '|build/android/' \\\n                  '|testing/android/' \\\n                  '|tools/android/'\n    },\n    'android_item_chooser_dialogs': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/.*ChooserDialog.java|'\\\n                  'chrome/android/javatests/src/org/chromium/chrome/browser/.*ChooserDialogTest.java'\n    },\n    'android_lint': {\n      'filepath': '/lint-baseline.xml' \\\n                  '|/lint-suppressions.xml' \\\n                  '|third_party/android_build_tools/lint'\n    },\n    'android_omnibox': {\n      'filepath': 'chrome/browser/ui/android/omnibox/',\n    },\n    'android_pgo_arm64': {\n      'filepath': 'chrome/build/android-arm64',\n    },\n    'android_search_widget': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/locale/' \\\n                  '|chrome/android/java/src/org/chromium/chrome/browser/searchwidget/'\n    },\n    'android_startup_metrics': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/metrics/.*StartupMetricsTracker.java' \\\n                  '|chrome/android/java/src/org/chromium/chrome/browser/metrics/SimpleStartupForegroundSessionDetector.java'\n    },\n    'android_studio': {\n      'filepath': 'build/android/gradle/' \\\n                  '|docs/android_studio.md' \\\n                  '|tools/android/android_studio'\n    },\n    'android_tab': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/Tab'\n    },\n    'android_toolbar': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/toolbar/' \\\n                  '|chrome/browser/ui/android/toolbar/'\n    },\n    'android_toolbar_deps': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/toolbar/DEPS'\n    },\n    'android_uma_settings': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/settings/privacy/PrivacyPreferencesManager.java|'\\\n                  'chrome/android/java/src/org/chromium/chrome/browser/settings/privacy/PrivacyPreferences.java|'\\\n                  'chrome/android/java/src/org/chromium/chrome/browser/metrics/UmaSessionStats.java',\n    },\n    'android_webapk': {\n      'filepath': 'chrome/android/webapk/|'\\\n                  'chrome/browser/android/webapk/',\n    },\n    'android_webview': {\n      'filepath': 'android_webview/',\n    },\n    'android_webview_network_service': {\n      'filepath': 'android_webview/browser/network_service/',\n    },\n    'android_webview_webexposed': {\n      'filepath': 'android_webview/test/data/web_tests/(virtual/stable/)?webexposed/global-interface-listing-expected.txt',\n    },\n    'app_service': {\n      'filepath': 'chrome/browser/apps/app_service/'\\\n                  '|chrome/browser/ash/app_list/app_service/'\\\n                  '|chrome/browser/ui/ash/shelf/app_service/'\\\n                  '|chrome/browser/ui/views/apps/app_dialog/' \\\n                  '|components/services/app_service/',\n    },\n    'app_service_protos': {\n      'filepath': 'components/services/app_service/public/protos/',\n    },\n    'app_shortcuts': {\n      'filepath': 'apps/app_shim/'\\\n                  '|chrome/common/mac/'\n    },\n    'apps': {\n      'filepath': '^apps/'\\\n                  '|chrome/browser/apps/'\\\n                  '|chrome/browser/ash/apps/'\n    },\n    'apps_intent_helper': {\n      'filepath': 'chrome/browser/apps/intent_helper/|'\\\n                  'chrome/browser/ash/apps/intent_helper/|'\\\n                  'components/arc/intent_helper/'\n    },\n    'arc': {\n      'filepath': 'arc/',\n    },\n    'arc_auth': {\n      'filepath': 'chrome/browser/ash/arc/auth'\n    },\n    'arc_compat_mode': {\n      'filepath': 'chromeos/ash/experiences/arc/compat_mode/|' \\\n                  'arc_compat_mode|resize_lock',\n    },\n    'arc_fileapi': {\n      'filepath': 'chrome/browser/ash/arc/fileapi'\n    },\n    'arc_ime': {\n      'filepath': 'chrome/browser/ash/arc/input_method_manager/'\\\n                  '|components/arc/ime/'\n    },\n    'arc_mojom': {\n      'filepath': 'components/arc/mojom/',\n    },\n    'arc_nearby_share': {\n      'filepath': 'chrome/browser/ash/arc/nearby_share'\n    },\n    'arc_net': {\n      'filepath': 'components/arc/net/',\n    },\n    'arc_power': {\n      'filepath': 'components/arc/power/',\n    },\n    'ash_webui_common': {\n      'filepath': 'ash/webui/common/'\\\n                  '|chrome/test/data/webui/chromeos/ash_common/',\n    },\n    'ash_wm_desks': {\n      'filepath': 'ash/wm/desks/',\n    },\n    'assistive': {\n      'filepath': 'ash/ambient/'\\\n                  '|ash/app_list/views/assistant/'\\\n                  '|ash/assistant/'\\\n                  '|ash/public/cpp/ambient/'\\\n                  '|ash/public/cpp/assistant/'\\\n                  '|ash/public/cpp/wallpaper/'\\\n                  '|ash/wallpaper/'\\\n                  '|ash/webui/personalization_app/'\\\n                  '|chromeos/ash/components/assistant/'\\\n                  '|chromeos/ash/services/assistant/'\\\n                  '|chromeos/ash/services/libassistant/'\\\n                  '|chromeos/services/assistant/'\\\n                  '|chrome/browser/ash/ambient/'\\\n                  '|chrome/browser/ash/wallpaper_handlers/'\\\n                  '|chrome/browser/ash/system_web_apps/apps/personalization_app/'\\\n                  '|chrome/browser/resources/ash/settings/ambient_mode_page/'\\\n                  '|chrome/browser/ui/ash/.*wallpaper.*/'\\\n                  '|chrome/browser/ui/ash/assistant/'\\\n                  '|chrome/browser/ui/webui/settings/ash/ambient_mode_handler'\\\n    },\n    'attribution_reporting': {\n      'filepath': 'components/attribution_reporting/'\\\n                  '|content/browser/attribution_reporting/'\\\n                  '|content/browser/resources/attribution_reporting/'\\\n                  '|content/public/android/java/src/org/chromium/content/browser/AttributionOsLevelManager.java'\\\n                  '|content/test/data/attribution_reporting/'\\\n                  '|services/network/attribution/'\\\n                  '|third_party/blink/public/mojom/conversions/'\\\n                  '|third_party/blink/renderer/core/frame/attribution_src_loader'\\\n                  '|third_party/blink/web_tests/external/wpt/attribution-reporting/'\\\n                  '|third_party/blink/web_tests/wpt_internal/attribution-reporting/'\\\n                  '|third_party/blink/web_tests/http/tests/inspector-protocol/attribution-reporting/'\n    },\n    'audio_service': {\n      'filepath': 'services/audio/'\n    },\n    'audio_settings': {\n      'filepath': 'chromeos/ash/components/audio/'\n    },\n    'aura': {\n      'filepath': 'ui/aura/',\n    },\n    'aura_compositor': {\n      'filepath':\n        'ui/compositor/' \\\n        '|content/browser/compositor/' \\\n        '|content/browser/renderer_host/compositor_resize_lock' \\\n        '|content/browser/renderer_host/render_widget_host_view_aura' \\\n        '|content/browser/renderer_host/render_widget_host_view_browsertest' \\\n        '|content/browser/renderer_host/delegated' \\\n        '|content/common/gpu/client/' \\\n    },\n    'autofill': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/autofill/'\\\n                  '|chrome/android/javatests/src/org/chromium/chrome/browser/autofill/'\\\n                  '|chrome/android/junit/src/org/chromium/chrome/browser/autofill/'\\\n                  '|chrome/browser/android/preferences/autofill/'\\\n                  '|chrome/browser/autofill/'\\\n                  '|chrome/browser/ui/android/autofill/'\\\n                  '|chrome/browser/ui/autofill/'\\\n                  '|chrome/browser/ui/views/autofill/'\\\n                  '|chrome/renderer/autofill/'\\\n                  '|components/android_autofill/'\\\n                  '|components/autofill/'\\\n                  '|components/autofill_payments_strings'\\\n                  '|components/autofill_strings'\\\n                  '|components/test/data/autofill/',\n    },\n    'autofill_payments': {\n      'filepath': 'chrome/browser/ui/autofill/chrome_autofill_client|'\\\n                  'chrome/browser/ui/autofill/payments/|'\\\n                  'chrome/browser/ui/views/autofill/payments/|'\\\n                  'components/autofill/core/browser/payments/|'\\\n                  'components/autofill/core/browser/ui/payments/|'\\\n                  'components/autofill/core/common/autofill_payments_features|'\\\n                  'components/autofill_payments_strings',\n    },\n    'background_fetch': {\n      'filepath': 'background_fetch|'\\\n                  'background-fetch',\n    },\n    'background_sync': {\n      'filepath': '/background_sync/',\n    },\n    'banners': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/banners/|'\\\n                  'chrome/android/javatests/src/org/chromium/chrome/browser/banners/|'\\\n                  'chrome/browser/banners/|'\\\n                  'chrome/browser/ui/android/infobars/app_banner_|'\\\n                  'components/webapps/browser/banners/|'\\\n                  'third_party/blink/public/platform/modules/app_banner/|'\\\n                  'third_party/blink/renderer/modules/app_banner/',\n    },\n    'base_allocator': {\n      'filepath': '^base/allocator',\n    },\n    'base_android': {\n      'filepath': '^base/android',\n    },\n    'base_memory': {\n      'filepath': '^base/memory',\n    },\n    'base_scheduler': {\n      'filepath': '^base/task/',\n    },\n    'base_thread_pool': {\n      'filepath': '^base/task/thread_pool',\n    },\n    'base_win': {\n      'filepath': '^base/win',\n    },\n    'battery_status': {\n      'filepath': 'content/browser/battery_status/|'\\\n                  'content/test/data/battery_status/|'\\\n                  'device/battery/',\n    },\n    'bfcache': {\n      'filepath': 'content/browser/renderer_host/back_forward_cache|'\\\n                  'content/browser/back_forward_cache_browsertest.cc|'\\\n                  'content/test/data/back_forward_cache/|'\\\n                  'content/public/browser/back_forward_cache|'\\\n                  'testing/buildbot/filters.bfcache.*.filter',\n    },\n    'binary_size': {\n      'filepath': 'build/android/binary_size/|'\\\n                  'tools/binary_size/',\n    },\n    'blink': {\n      'filepath': 'third_party/(WebKit|blink)/',\n    },\n    'blink_accessibility': {\n      'filepath': 'third_party/(WebKit|blink)/.*(accessibility|ax_object_cache|web_ax)'\n    },\n    'blink_animation': {\n      'filepath': 'third_party/(WebKit|blink)/.*([Aa]nimat|[Tt]ransition)',\n    },\n    'blink_audio': {\n      'filepath': 'third_party/blink/renderer/platform/audio' \\\n                  '|third_party/blink/renderer/modules/webaudio' \\\n                  '|third_party/blink/web_tests/external/wpt/webaudio',\n    },\n    'blink_battery_status': {\n      'filepath': 'third_party/blink/renderer/modules/battery/' \\\n                  '|third_party/blink/web_tests/battery-status/' \\\n                  '|third_party/blink/renderer/core/frame/platform_event_(controller|dispatcher)'\n    },\n    'blink_bindings': {\n      'filepath': 'third_party/blink/renderer/platform/bindings' \\\n                  '|third_party/blink/renderer/bindings',\n    },\n    'blink_bindings_serialization': {\n      'filepath': 'third_party/blink/renderer/bindings/(core|modules)/v8/.*serializ',\n    },\n    'blink_bluetooth': {\n      'filepath': 'third_party/(WebKit|blink)/.*[Bb]luetooth'\n    },\n    'blink_clipboard': {\n      'filepath': 'third_party/blink/renderer/core/clipboard' \\\n                  '|third_party/blink/renderer/core/page/.*drag' \\\n                  '|third_party/blink/renderer/platform/.*drag' \\\n                  '|third_party/blink/public/platform/.*drag' \\\n                  '|third_party/blink/public/web/.*drag',\n    },\n    'blink_common': {\n      'filepath': 'third_party/blink/common'\n                  '|third_party/blink/public/common' \\\n                  '|third_party/blink/public/mojom',\n    },\n    'blink_controller': {\n      'filepath': 'third_party/blink/renderer/controller',\n    },\n    'blink_css': {\n      'filepath': 'third_party/blink/renderer/core/css',\n    },\n    'blink_css_flexbox': {\n      'filepath': 'third_party/blink/renderer/core/rendering/.*flex' \\\n                  '|third_party/blink/web_tests/fast/deprecated-flexbox/' \\\n                  '|third_party/blink/web_tests/css3/flexbox/' \\\n                  '|third_party/blink/web_tests/ietestcenter/css3/flexbox/'\n    },\n    'blink_css_fragmentation_tests': {\n      'filepath': 'third_party/blink/web_tests/fast/multicol/' \\\n                  '|third_party/blink/web_tests/fast/pagination/' \\\n                  '|third_party/blink/web_tests/fragmentation/' \\\n                  '|third_party/blink/web_tests/printing/'\n    },\n    'blink_css_grid_layout': {\n      'filepath': 'third_party/blink/renderer/core/layout/.*grid' \\\n                  '|third_party/blink/renderer/core/paint/.*grid' \\\n                  '|third_party/blink/renderer/core/css/.*grid' \\\n                  '|third_party/blink/web_tests/fast/css-grid-layout/' \\\n                  '|third_party/blink/web_tests/ietestcenter/css3/grid/' \\\n                  '|third_party/blink/web_tests/platform/.*/fast/css-grid-layout/' \\\n                  '|third_party/blink/web_tests/platform/.*/ietestcenter/css3/grid/'\n    },\n    'blink_custom_elements': {\n      'filepath': 'third_party/blink/renderer/core/html/custom/' \\\n                  '|third_party/blink/renderer/bindings/core/v8/.*custom_element',\n    },\n    'blink_device_orientation': {\n      'filepath': 'content/browser/device_sensors/' \\\n                  '|content/test/data/device_sensors/' \\\n                  '|third_party/blink/renderer/modules/device_orientation/' \\\n                  '|third_party/blink/web_tests/external/wpt/orientation-event/' \\\n                  '|third_party/blink/renderer/core/frame/platform_event_(controller|dispatcher)' \\\n                  '|third_party/blink/renderer/core/frame/device_single_window_event_controller'\n    },\n    'blink_devtools': {\n      'filepath': 'third_party/blink/.*(inspector|DevTools|dev_tools|devtools)',\n    },\n    'blink_dom': {\n      'filepath': 'third_party/blink/renderer/core/dom/'\n    },\n    'blink_dom_storage': {\n      'filepath': 'third_party/blink/common/dom_storage/|' \\\n                  'third_party/blink/public/mojom/dom_storage/|' \\\n                  'third_party/blink/public/common/dom_storage/|' \\\n                  'third_party/blink/renderer/modules/storage/',\n    },\n    'blink_events': {\n      'filepath': 'third_party/blink/renderer/core/page/.*event' \\\n                  '|third_party/blink/renderer/core/dom/.*event' \\\n                  '|third_party/blink/renderer/core/css/.*event' \\\n                  '|third_party/blink/renderer/platform/.*event'\n    },\n    'blink_fetch': {\n      'filepath': 'third_party/blink/renderer/platform/loader/fetch'\n    },\n    'blink_fileapi': {\n      'filepath': 'third_party/blink/renderer/modules/filesystem/' \\\n                  '|third_party/blink/renderer/core/fileapi/' \\\n                  '|third_party/blink/renderer/platform/.*file' \\\n                  '|third_party/blink/web_tests/fast/file' \\\n                  '|third_party/blink/public/.*_file'\n    },\n    'blink_frames': {\n      'filepath': 'third_party/blink/renderer/core/frame/'\n    },\n    'blink_geolocation': {\n      'filepath': 'third_party/blink/web_tests/geolocation-api/' \\\n                  '|third_party/blink/renderer/modules/geolocation/' \\\n                  '|third_party/blink/public/web/.*geolocation'\n    },\n    'blink_heap': {\n      'filepath': 'third_party/blink/renderer/platform/heap'\n    },\n    'blink_html': {\n      'filepath': 'third_party/blink/renderer/core/html/' \\\n                  '|third_party/blink/renderer/core/mathml/'\n    },\n    'blink_htmlparser': {\n      'filepath': 'third_party/blink/renderer/core/html/parser/'\n    },\n    'blink_image_codecs': {\n      'filepath': 'third_party/blink/renderer/platform/image-decoders' \\\n                  '|third_party/blink/renderer/platform/image-encoders' \\\n                  '|third_party/blink/perf_tests/image_decoder'\n    },\n    'blink_indexed_db': {\n      'filepath': 'third_party/blink/common/indexeddb' \\\n                  '|third_party/blink/public/common/indexeddb' \\\n                  '|third_party/blink/public/platform/.*_idb' \\\n                  '|third_party/blink/public/platform/modules/indexeddb' \\\n                  '|third_party/blink/public/mojom/indexeddb' \\\n                  '|third_party/blink/renderer/modules/indexeddb/' \\\n                  '|third_party/blink/web_tests/storage/indexeddb'\n    },\n    'blink_input': {\n      'filepath': 'third_party/blink/renderer/core/input/'\n    },\n    'blink_layers': {\n      'filepath': 'third_party/blink/renderer/core/page/scrolling/scrolling_coordinator' \\\n                  '|third_party/blink/renderer/platform/graphics/graphics_layer' \\\n                  '|third_party/blink/renderer/core/layout/layer'\n    },\n    'blink_layout': {\n      'filepath': 'third_party/blink/renderer/core/layout'\n    },\n    'blink_layout_ng': {\n      'filepath': 'third_party/blink/renderer/core/layout/ng',\n    },\n    'blink_loader': {\n      'filepath': 'third_party/blink/renderer/core/loader/' \\\n                  '|third_party/blink/renderer/platform/loader/'\n    },\n    'blink_media': {\n      'filepath': 'third_party/blink/renderer/core/css/mediaControls' \\\n                  '|third_party/blink/renderer/core/html/.*_(audio|media|video)' \\\n                  '|third_party/blink/renderer/core/html/shadow/media_control' \\\n                  '|third_party/blink/renderer/core/layout/layout_media' \\\n                  '|third_party/blink/renderer/core/layout/layout_text_track_container_element' \\\n                  '|third_party/blink/renderer/modules/(encryptedmedia|mediasource)' \\\n                  '|third_party/blink/renderer/platform/drm/' \\\n                  '|third_party/blink/renderer/platform/graphics/media/' \\\n                  '|third_party/blink/web_tests/media/' \\\n                  '|third_party/blink/public/.*_media'\n    },\n    'blink_media_queries': {\n      'filepath': 'third_party/blink/renderer/core/css/css_media_rule' \\\n                    '|third_party/blink/renderer/core/css/media_list' \\\n                    '|third_party/blink/renderer/core/css/media_query' \\\n                    '|third_party/blink/renderer/core/css/parser/media_query'\n    },\n    'blink_mediastream': {\n      'filepath': 'third_party/blink/renderer/modules/mediastream/' \\\n                  '|third_party/blink/renderer/platform/mediastream/' \\\n                  '|third_party/blink/renderer/platform/exported/web_media_stream' \\\n                  '|third_party/blink/renderer/platform/exported/web_rtc' \\\n                  '|third_party/blink/web_tests/fast/mediastream/'\n    },\n    'blink_navigator_content_utils': {\n      'filepath': 'third_party/blink/renderer/modules/navigatorcontentutils' \\\n                  '|third_party/blink/web_tests/fast/dom/navigatorcontentutils'\n    },\n    'blink_out_of_process_frames': {\n      'filepath': 'third_party/blink/renderer/core/frame/frame_owner' \\\n                  '|third_party/blink/renderer/core/frame/frame\\.' \\\n                  '|third_party/blink/renderer/core/frame/web_frame' \\\n                  '|third_party/blink/renderer/core/exported/web_remote_frame_impl'\n    },\n    'blink_paint': {\n      'filepath': 'third_party/blink/renderer/core/paint/'\n    },\n    'blink_paintworklet': {\n      'filepath': 'third_party/blink/renderer/modules/csspaint/' \\\n                  '|third_party/blink/web_tests/http/tests/csspaint/' \\\n                  '|third_party/blink/web_tests/externla/wpt/css/css-paint-api/'\n    },\n    'blink_peerconnection': {\n      'filepath': 'third_party/blink/renderer/modules/peerconnection/' \\\n                  '|third_party/blink/renderer/platform/peerconnection/',\n    },\n    'blink_permissions': {\n      'filepath': 'third_party/blink/renderer/modules/permissions/' \\\n                  '|third_party/blink/public/mojom/permissions/',\n    },\n    'blink_platform': {\n      'filepath': 'third_party/blink/renderer/platform'\n    },\n    'blink_platform_graphics': {\n      'filepath': 'third_party/blink/renderer/platform/fonts' \\\n                  '|third_party/blink/renderer/platform/geometry' \\\n                  '|third_party/blink/renderer/platform/graphics'\n    },\n    'blink_platform_peerconnection_video': {\n      'filepath': 'third_party/blink/renderer/platform/peerconnection/.*video.*'\n    },\n    'blink_preloadScanner': {\n      'filepath': 'third_party/blink/renderer/core/html/parser/html_preload_scanner',\n    },\n    'blink_prerender': {\n      'filepath': 'third_party/blink/renderer/core/.*prerender' \\\n                  '|third_party/blink/renderer/core/loader/link_loader' \\\n                  '|third_party/blink/renderer/core/speculation_rules' \\\n                  '|third_party/blink/public/mojom/prerender/' \\\n                  '|third_party/blink/web_tests/external/wpt/speculation-rules/prerender/' \\\n                  '|third_party/blink/web_tests/wpt_internal/prerender/'\n    },\n    'blink_public_api': {\n      'filepath': 'third_party/blink/public'\n    },\n    'blink_quota': {\n      'filepath': 'third_party/blink/renderer/modules/quota/' \\\n                  '|third_party/blink/public/.*quota'\n    },\n    'blink_scheduler': {\n      'filepath': 'third_party/blink/renderer/platform/scheduler' \\\n                  '|third_party/blink/renderer/platform/scheduler' \\\n                  '|third_party/blink/renderer/core/html/parser/.*scheduler' \\\n                  '|third_party/blink/public/platform/scheduler'\n    },\n    'blink_scheduling_api': {\n      'filepath': 'third_party/blink/renderer/core/scheduler'\n    },\n    'blink_script': {\n      'filepath': 'third_party/blink/renderer/bindings/core/v8/.*module' \\\n                  '|third_party/blink/renderer/bindings/core/v8/script_controller' \\\n                  '|third_party/blink/renderer/bindings/core/v8/script_source_code' \\\n                  '|third_party/blink/renderer/bindings/core/v8/v8_script_runner'\n                  '|third_party/blink/renderer/core/dom/.*modul' \\\n                  '|third_party/blink/renderer/core/dom/.*script' \\\n                  '|third_party/blink/renderer/core/html/html_script_element' \\\n                  '|third_party/blink/renderer/core/html/parser/html_parser_script_runner' \\\n                  '|third_party/blink/renderer/core/loader/modulescript/' \\\n                  '|third_party/blink/renderer/core/loader/resource/script_resource' \\\n                  '|third_party/blink/renderer/core/svg/svg_script_element' \\\n                  '|third_party/blink/renderer/core/xml/parser/xml_document_parser'\n    },\n    'blink_scroll': {\n      'filepath': 'third_party/blink/renderer/core/frame/.*view' \\\n                  '|third_party/blink/renderer/core/input/.*scroll' \\\n                  '|third_party/blink/renderer/core/input/event_handler' \\\n                  '|third_party/blink/renderer/core/page/scrolling/' \\\n                  '|third_party/blink/renderer/core/paint/.*scrollable_area' \\\n                  '|third_party/blink/renderer/platform/scroll/'\n    },\n    'blink_service_worker' : {\n      'filepath': 'third_party/blink/renderer/modules/service_worker' \\\n                  '|third_party/blink/web_tests/http/tests/serviceworker' \\\n                  '|third_party/blink/web_tests/external/wpt/service-workers'\n    },\n    'blink_service_worker_tests' : {\n      'filepath': 'third_party/blink/web_tests/http/tests/serviceworker' \\\n                  '|third_party/blink/web_tests/external/wpt/service-workers'\n    },\n    'blink_spellcheck' : {\n      'filepath': 'third_party/blink/renderer/core/editing/spellcheck'\n    },\n    'blink_streams': {\n      'filepath': 'third_party/blink/renderer/core/streams/'\n    },\n    'blink_style': {\n      'filepath': 'third_party/(WebKit|blink)/.*(style/|Style)',\n    },\n    'blink_svg': {\n      'filepath': 'third_party/blink/renderer/core/(layout/)?svg',\n    },\n    'blink_track': {\n      'filepath': 'third_party/blink/renderer/core/html/track/' \\\n                  '|third_party/blink/renderer/core/loader/text_track' \\\n                  '|third_party/blink/renderer/core/html/meida/html_media_element' \\\n                  '|third_party/blink/renderer/core/html/shadow/media_control' \\\n                  '|third_party/blink/renderer/core/css/mediaControl' \\\n                  '|third_party/blink/web_tests/media/track/'\n    },\n    'blink_viewport_interaction': {\n      'filepath': 'third_party/blink/renderer/core/css/.*viewport' \\\n                  '|third_party/blink/renderer/core/dom/viewport_arguments' \\\n                  '|third_party/blink/renderer/core/frame/frame_view' \\\n                  '|third_party/blink/renderer/core/frame/.*viewport' \\\n                  '|third_party/blink/renderer/core/html/html_meta_element'\n    },\n    'blink_w3ctests': {\n      'filepath': 'third_party/blink/web_tests/external/' \\\n                  '|third_party/blink/tools/blinkpy/w3c/'\n    },\n    'blink_webp': {\n      'filepath': 'third_party/blink/renderer/platform/image-decoders/webp' \\\n                  '|third_party/blink/renderer/platform/image-encoders/skia/webp'\n    },\n    'blink_websockets': {\n      'filepath': 'third_party/blink/renderer/modules/websockets/' \\\n                  '|third_party/blink/renderer/platform/modules/websockets/'\n    },\n    'blink_workers': {\n      'filepath': 'third_party/blink/renderer/core/workers' \\\n                  '|third_party/blink/web_tests/http/tests/workers' \\\n                  '|third_party/blink/web_tests/fast/workers' \\\n                  '|third_party/blink/web_tests/external/wpt/workers'\n    },\n    'blink_wtf': {\n      'filepath': 'third_party/blink/renderer/platform/wtf',\n    },\n    'blink_xml': {\n      'filepath': 'third_party/blink/renderer/core/xml/'\n    },\n    'borealis': {\n      'filepath': 'borealis/',\n    },\n    'bottombar': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/compositor/bottombar/',\n    },\n    'browser_components': {\n      'filepath': 'chrome/browser/autofill/' \\\n                  '|chrome/browser/bookmarks/' \\\n                  '|chrome/browser/favicon/' \\\n                  '|chrome/browser/history/' \\\n                  '|chrome/browser/webdata/' \\\n                  '|components/autofill/'\n    },\n    'browser_compositor': {\n      'filepath': 'ui/compositor/'\n    },\n    'browser_manager': {\n      'filepath': 'chrome/browser/ash/crosapi/browser_manager' \\\n                  '|chrome/browser/ash/crosapi/browser_loader' \\\n                  '|chrome/browser/ash/crosapi/lacros_selection_loader' \\\n                  '|chrome/browser/ash/crosapi/rootfs_lacros_loader' \\\n                  '|chrome/browser/ash/crosapi/stateful_lacros_loader'\n    },\n    'browser_scheduler': {\n      'filepath': 'content/browser/scheduler'\n    },\n    'browsing_data': {\n      'filepath': 'browsing_data|BrowsingData',\n    },\n    'cast_2_class': {\n      'filepath':  '/access_code/' \\\n                   '|access_code_cast' \\\n                   '|ash/public/cpp/cast' \\\n                   '|ash/system/cast' \\\n                   '|chrome/browser/media/router/providers' \\\n                   '|chrome/browser/ui/ash/cast' \\\n                   '|media_router/cast_dialog_view' \\\n                   '|media/router/discovery',\n    },\n    'cast_certificate': {\n      'filepath': 'components/media_router/common/providers/cast/certificate/'\\\n                  '|components/test/data/media_router/common/providers/cast/certificate/',\n    },\n    'cast_channel': {\n      'filepath':  'components/cast_channel/'\n    },\n    'cast_streaming': {\n      'filepath': 'media/cast/' \\\n                  '|chrome/browser/media/cast_mirroring' \\\n                  '|components/mirroring/' \\\n    },\n    'cc': {\n      'filepath': 'cc/'\\\n                  '|components/viz/'\n    },\n    'cc-animation': {\n      'filepath': 'cc/animation/'\n    },\n    'cc-display': {\n      'filepath': 'components/viz/service/display'\\\n                  '|cc/output'\n    },\n    'cc-scheduler': {\n      'filepath': 'cc/scheduler'\n    },\n    'certificate_transparency': {\n      'filepath': 'chrome/browser/ssl/sct_'\\\n                  '|components/certificate_transparency/'\\\n                  '|net/cert/ct_'\\\n                  '|net/cert/multi_log_ct_verifier'\\\n                  '|net/cert/sct_status_flags.h'\\\n                  '|net/cert/signed_certificate_timestamp'\\\n                  '|net/cert/signed_tree_head'\\\n                  '|net/services/network/sct_auditing/'\\\n                  '|net/services/network/ct_'\\\n                  '|net/test/ct_'\\\n                  '|services/network/sct_auditing/'\n    },\n    'chrome_camera_app': {\n      'filepath': # Exclude string translation .xtb files.\n                  'ash/webui/camera_app_ui/.*$(?<!\\.xtb)'\\\n                  '|chrome/browser/ash/system_web_apps/apps/camera_app'\\\n                  '|components/arc/intent_helper/control_camera_app_delegate.h'\\\n                  '|components/arc/mojom/camera_intent.mojom'\\\n                  '|media/capture/video/chromeos/camera_app'\\\n                  '|media/capture/video/chromeos/mojom/camera_app',\n    },\n    'chrome_elf': {\n      'filepath': 'chrome/chrome_elf',\n    },\n    'chrome_grc': {\n      'filepath': 'chrome/browser/resource_coordinator/'\\\n                  '|services/resource_coordinator/',\n    },\n    'chrome_intelligence': {\n      'filepath': 'history_clusters'\\\n                  '|history_embeddings'\\\n                  '|image_service'\\\n                  '|ios/chrome/browser/text_selection'\\\n                  '|model_execution'\\\n                  '|optimization_guide'\\\n                  '|optimization_hints'\\\n                  '|page_content_annotations'\\\n                  '|passage_embeddings'\\\n                  '|services/on_device_model'\\\n                  '|third_party/eigen3'\\\n                  '|third_party/farmhash'\\\n                  '|third_party/fft2d'\\\n                  '|third_party/fp16'\\\n                  '|third_party/gemmlowp'\\\n                  '|third_party/libzip'\\\n                  '|third_party/mediapipe'\\\n                  '|third_party/neon_2_sse'\\\n                  '|third_party/ruy'\\\n                  '|third_party/tensorflow-text'\\\n                  '|third_party/tflite'\\\n                  '|third_party/tflite_support'\\\n                  '|third_party/utf'\\\n                  '|third_party/xnnpack'\\\n                  '|user_annotations'\n    },\n    'chrome_intelligence_feature_protos': {\n      'filepath': 'components/optimization_guide/proto/features/'\n    },\n    'chrome_obsolete_system': {\n      'filepath': 'chrome/browser/obsolete_system/',\n    },\n    'chrome_performance_manager': {\n      'filepath': 'chrome/browser/performance_manager/'\\\n                  '|chrome/renderer/performance_manager/'\\\n                  '|components/performance_manager/',\n    },\n    'chromecast': {\n      'filepath': 'chromecast/',\n    },\n    'chromecast_public': {\n      'filepath': 'chromecast/public/',\n    },\n    'chromedriver': {\n      'filepath': 'chrome/test/chromedriver|'\\\n                  'chrome/test/data/chromedriver|'\\\n                  'third_party/blink/web_tests/external/wpt/webdriver|'\\\n                  'third_party/webdriver'\n    },\n    'chromeos': {\n      'filepath': 'chromeos/',\n    },\n    'chromeos_attestation': {\n      'filepath': 'chrome/browser/ash/attestation/|'\\\n                  'chrome/browser/extensions/api/enterprise_platform_keys_private/|'\\\n                  'chromeos/ash/components/attestation/',\n    },\n    'chromeos_bluetooth': {\n      'filepath': 'ash/system/bluetooth/'\\\n                  '|ash/webui/common/resources/bluetooth/'\\\n                  '|chromeos/ash/components/hid_detection/'\\\n                  '|chromeos/ash/services/bluetooth_config/'\\\n                  '|chrome/browser/resources/ash/settings/os_bluetooth_page/'\\\n                  '|chrome/browser/resources/chromeos/bluetooth_pairing_dialog/'\\\n                  '|chrome/browser/ui/webui/ash/bluetooth'\\\n                  '|chrome/test/data/webui/cr_components/chromeos/bluetooth/'\\\n                  '|device/bluetooth/bluez/'\\\n                  '|device/bluetooth/chromeos/'\\\n                  '|device/bluetooth/floss/'\\\n                  '|tools/metrics/histograms/metadata/bluetooth/'\n    },\n    'chromeos_cellular': {\n      'filepath': 'ash/webui/common/resources/cellular_setup/'\\\n                  'chromeos/ash/services/cellular_setup/|'\\\n                  'chromeos/ash/components/carrier_lock/|'\\\n                  'chromeos/ash/components/dbus/hermes/|'\\\n                  'chrome/test/data/webui/cr_components/chromeos/cellular_setup/',\n    },\n    'chromeos_login': {\n      'filepath': 'ash/login/|'\\\n                  'chrome/browser/ash/login/|'\\\n                  'chrome/browser/ui/webui/ash/login/|'\\\n                  'chrome/browser/resources/chromeos/login/|'\\\n                  'ui/login/',\n    },\n    'chromeos_media_app': {\n      'filepath': 'ash/webui/media_app_ui/|'\\\n                  'chrome/browser/ash/system_web_apps/apps/media_app/',\n    },\n    'chromeos_net': {\n      'filepath': 'ash/system/network/|'\\\n                  'ash/webui/common/resources/hotspot/|'\\\n                  'ash/webui/common/resources/network/|'\\\n                  'chrome/browser/ash/net/|'\\\n                  'chrome/browser/extensions/api/networking_private/|'\\\n                  'chrome/browser/resources/chromeos/internet_config_dialog/|'\\\n                  'chrome/browser/resources/chromeos/internet_detail_dialog/|'\\\n                  'chrome/browser/resources/chromeos/network_ui/|'\\\n                  'chrome/browser/resources/ash/settings/internet_page/|'\\\n                  'chrome/browser/ui/ash/network/|'\\\n                  'chrome/browser/ui/webui/ash/network|'\\\n                  'chrome/test/data/webui/cr_components/chromeos/network/|'\\\n                  'chromeos/ash/components/dbus/shill/|'\\\n                  'chromeos/ash/components/network/|'\\\n                  'chromeos/ash/components/wifi_p2p/|'\\\n                  'chromeos/ash/services/hotspot_config/|'\\\n                  'chromeos/ash/services/network_config/|'\\\n                  'chromeos/ash/services/wifi_direct/|'\\\n                  'chromeos/services/network_config/|'\\\n                  'components/onc/|'\\\n                  'extensions/browser/api/networking_private/'\\\n                  'tools/metrics/histograms/metadata/network/',\n    },\n    'chromeos_tast_control': {\n      'filepath': 'chromeos/tast_control.gni',\n    },\n    'chromeos_webui': {\n      'filepath': 'chrome/browser/ui/webui/ash/|'\\\n                  'chrome/browser/ui/webui/chromeos/|'\\\n                  'chrome/browser/resources/chromeos/',\n    },\n    'chromeos_wifi_sync': {\n      'filepath': 'chromeos/ash/components/sync_wifi/',\n    },\n    'chrometto_proto_extensions': {\n      'filepath': 'base/tracing/protos/',\n    },\n    'chromevox': {\n      'filepath': 'chromevox|spoken_feedback',\n    },\n    'clang': {\n      'filepath': 'tools/clang/'\n    },\n    'clang_update': {\n      'filepath': 'tools/clang/scripts/update.py'\n    },\n    'client_hints': {\n      'filepath': 'client_hints|user_agent_utils|content/common/user_agent.cc|'\n                  'content/public/common/user_agent.h',\n    },\n    'clipboard': {\n      'filepath': 'clipboard|dnd|drag|drop',\n    },\n    'commerce': {\n      'filepath': 'components/commerce/|'\\\n                  'chrome/browser/commerce/|'\\\n                  'chrome/browser/ui/commerce/|'\\\n                  'chrome/browser/ui/views/commerce/|'\\\n                  'chrome/browser/ui/webui/commerce/|'\\\n                  'ios/chrome/browser/commerce/',\n    },\n    'components_deps': {\n      'filepath': 'components/([^/]*/)*DEPS',\n    },\n    'compose': {\n      'filepath':\n        'components/compose|chrome/browser/compose|chrome/browser/resources/compose',\n    },\n    'compositor_animator': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/compositor/animation/',\n    },\n    'compute_pressure': {\n      'filepath': 'compute_pressure',\n    },\n    'content_bluetooth': {\n      'filepath': 'content/.*bluetooth'\n    },\n    'content_index': {\n      'filepath': 'content_index',\n    },\n    'content_loader': {\n      'filepath': 'chrome/browser/loader|' \\\n                  'content/browser/loader|' \\\n                  'content/child/.*loader',\n    },\n    'content_security_policy': {\n      'filepath': 'content_security_policy|csp',\n    },\n    'content_shell': {\n      'filepath': 'content/shell/',\n    },\n    'content_worker': {\n      'filepath': 'content/.*worker',\n    },\n    'contextual_search': {\n      'filepath': 'chrome/browser/android/contextualsearch/|' \\\n                  'chrome/android/java/src/org/chromium/chrome/browser/contextualsearch/|' \\\n                  'chrome/android/javatests/src/org/chromium/chrome/browser/contextualsearch/|' \\\n                  'components/contextual_search/',\n    },\n    'core_timing': {\n      'filepath': 'third_party/blink/renderer/core/timing/' \\\n    },\n    'core_web_vitals_plm': {\n      'filepath': 'chrome/browser/page_load_metrics/observers/core/|' \\\n                  'components/page_load_metrics/browser/observers/core/',\n    },\n    'core_web_vitals_wpt': {\n      'filepath': 'third_party/blink/web_tests/external/wpt/event-timing/|' \\\n                  'third_party/blink/web_tests/external/wpt/largest-contentful-paint/|' \\\n                  'third_party/blink/web_tests/external/wpt/layout-instability/',\n    },\n    'courgette': {\n      'filepath': 'courgette/',\n    },\n    'cq': {\n      'filepath': 'infra/config/branch/cq.cfg',\n    },\n    'creator': {\n      'filepath': 'components/creator/|' \\\n                  'chrome/android/java/src/org/chromium/chrome/browser/app/creator/|' \\\n                  'chrome/browser/creator/',\n    },\n    'cros_commercial_enrollment': {\n      'filepath': 'chrome/browser/ash/login/enrollment/'\\\n                  '|chrome/browser/ash/policy/enrollment/'\\\n                  '|chrome/browser/ui/webui/ash/login/enrollment_screen_handler.*'\n    },\n    'cros_commercial_policy': {\n      'filepath': 'ash/components/arc/enterprise/'\\\n                  '|ash/policy/'\\\n                  '|chrome/browser/ash/arc/enterprise/'\\\n                  '|chrome/browser/ash/policy/'\\\n                  '|chrome/browser/policy/'\\\n                  '|chrome/test/enterprise'\\\n                  '|chromeos/ash/components/policy'\\\n                  '|components/policy/'\\\n                  '|docs/website/site/administrators/',\n    },\n    'cros_commercial_policy_proto': {\n      'filepath': 'components/policy/proto/chrome_device_policy.proto',\n    },\n    'cros_reporting': {\n      'filepath': 'chrome/browser/policy/messaging_layer/'\\\n                  '|chrome/browser/ash/policy/status_collector/'\\\n                  '|components/policy/proto/record',\n    },\n    'crosapi': {\n      'filepath': 'chromeos/crosapi/'\\\n                  '|chrome/browser/ash/crosapi/',\n    },\n    'crosapi_mojom': {\n      'filepath': 'chromeos/crosapi/mojom/crosapi.mojom',\n    },\n    'crostini': {\n      'filepath': 'cicerone'\\\n                  '|concierge'\\\n                  '|crostini'\\\n                  '|guest_os'\\\n                  '|plugin_vm',\n    },\n    'cups_printing' : {\n      'filepath': 'chrome/browser/resources/ash/settings/os_printing_page/'\\\n                  '|chrome/test/data/webui/settings/cups_printer_page_tests.js'\\\n                  '|chrome/browser/ui/webui/settings/ash/cups_printers_handler'\\\n                  '|chrome/browser/ash/printing/'\\\n                  '|chrome/browser/chromeos/printing/'\\\n                  '|printing/',\n    },\n    'cursor': {\n      'filepath': 'ash/display/cursor'\\\n                  '|ash/wm/.*cursor'\\\n                  '|ui/base/cursor/'\\\n                  '|ui/base/x/x11_cursor'\\\n                  '|ui/base/win/win_cursor'\\\n                  '|ui/ozone/common/bitmap_cursor'\\\n                  '|ui/views/widget/desktop_aura/.*cursor'\\\n                  '|ui/wm/core/.*cursor',\n    },\n    'custom_handlers': {\n      'filepath': 'chrome/browser/custom_handlers/|'\\\n                  'components/custom_handlers/',\n    },\n    'custom_proxy': {\n      'filepath': 'services/network/network_service_proxy_delegate',\n    },\n    'custom_tabs': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/customtabs/|'\\\n                  'chrome/android/java/src/org/chromium/chrome/browser/browseractions/|'\\\n                  'chrome/android/java/src/org/chromium/chrome/browser/browserservices/|'\\\n                  'chrome/android/javatests/src/org/chromium/chrome/browser/customtabs/|'\\\n                  'chrome/android/javatests/src/org/chromium/chrome/browser/browseractions/|'\\\n                  'chrome/android/javatests/src/org/chromium/chrome/browser/browserservices/|'\\\n                  'chrome/browser/android/customtabs/',\n    },\n    'dark_mode': {\n      'filepath': 'cc/.*/.*dark_mode|'\\\n                  'third_party/blink/renderer/platform/graphics/.*dark_mode',\n    },\n    'data_decoder': {\n      'filepath': 'services/data_decoder/',\n    },\n    'dbus': {\n      'filepath': 'dbus/',\n    },\n    'desktop_in_product_help': {\n      'filepath': 'components/feature_engagement/|'\\\n                  'components/user_education/|'\\\n                  'chrome/browser/resources/user_education_internals/|'\\\n                  'chrome/browser/resources/whats_new/|'\\\n                  'chrome/browser/user_education/|'\\\n                  'chrome/browser/ui/user_education/|'\\\n                  'chrome/browser/ui/views/user_education/|'\\\n                  'chrome/browser/ui/webui/user_education_internals/|'\\\n                  'chrome/browser/ui/webui/whats_new/',\n    },\n    'device_bluetooth': {\n      'filepath': 'device/.*bluetooth'\n    },\n    'device_bound_sessions': {\n      'filepath': 'net/device_bound_sessions/|'\\\n                  'components/unexportable_keys/',\n    },\n    'device_chooser': {\n      'filepath': 'chrome/browser/chooser_controller/|'\\\n                  'chrome/browser/ui/android/bluetooth_chooser_|'\\\n                  'chrome/browser/ui/android/usb_chooser_|'\\\n                  'chrome/browser/ui/bluetooth/|'\\\n                  'chrome/browser/ui/cocoa/device_chooser_|'\\\n                  'chrome/browser/ui/cocoa/extensions/chooser_dialog_|'\\\n                  'chrome/browser/ui/cocoa/permission_bubble/chooser_bubble_|'\\\n                  'chrome/browser/ui/views/device_chooser_|'\\\n                  'chrome/browser/ui/views/extensions/chooser_dialog_|'\\\n                  'chrome/browser/ui/views/permission_bubble/chooser_bubble_|'\\\n                  'chrome/browser/usb/usb_chooser_',\n    },\n    'devtools': {\n      'filepath': 'devtools',\n    },\n    'diagnostics_mojo': {\n      'filepath': 'chromeos/ash/services/cros_healthd/public/mojom/',\n    },\n    'diagnostics_ui': {\n      'filepath': 'ash/webui/diagnostics_ui/',\n    },\n    'dips': {\n      'filepath': 'chrome/browser/dips/',\n    },\n    'discardable_memory': {\n        'filepath': 'components/discardable_memory/',\n    },\n    'disk_cache': {\n      'filepath': 'net/disk_cache/|http_cache',\n    },\n    'display': {\n      'filepath': 'ui/display/|'\\\n                  'ash/display/|'\\\n                  'chrome/browser/ui/webui/ash/settings/pages/device/display_settings/',\n    },\n    'dom_storage': {\n      'filepath': 'content/common/dom_storage/|'\\\n                  'content/browser/dom_storage/|'\\\n                  'components/services/storage/dom_storage/',\n    },\n    'download': {\n      'filepath': 'chrome/browser/download/|'\\\n                  'content/browser/download/',\n    },\n    'download_bubble': {\n      'filepath': 'chrome/browser/download/bubble/|' \\\n                  'chrome/browser/ui/views/download/bubble/'\n    },\n    'downloads_ui': {\n      'filepath': 'chrome/browser/resources/downloads/|' \\\n                  'chrome/browser/ui/download|' \\\n                  'chrome/browser/ui/webui/.*downloads|' \\\n                  'chrome/browser/ui/views/download/|' \\\n                  'chrome/browser/ui/cocoa/download/'\n    },\n    'drive_resource_metadata': {\n      'filepath': 'drive.*resource_metadata'\n    },\n    'eche': {\n      'filepath': 'ash/system/eche/|' \\\n                  'ash/webui/eche_app_ui/|' \\\n                  'chrome/browser/ash/eche_app/'\n    },\n    'eme': {\n      'filepath': 'chrome/renderer/media/.*key_system|' \\\n                  'chrome/browser/media/.*(cdm|encrypted)|' \\\n                  'components/cdm/|' \\\n                  'content/browser/media/.*(cdm|key_system|media_license|encrypted)|' \\\n                  'media/base/android/.*drm|' \\\n                  'media/cdm/|' \\\n                  'third_party/widevine/cdm/'\n    },\n    'enterprise_data_protection': {\n      'filepath': 'chrome/browser/enterprise/connectors/|' \\\n                  'chrome/browser/enterprise/data_controls/|' \\\n                  'chrome/browser/enterprise/data_protection/|' \\\n                  'chrome/browser/enterprise/watermark/|' \\\n                  'chrome/browser/safe_browsing/cloud_content_scanning/|' \\\n                  'components/enterprise/common/|' \\\n                  'components/enterprise/data_controls/'\n    },\n    'exo': {\n      'filepath': 'components/exo',\n    },\n    'explore_sites': {\n      'filepath': 'chrome/browser/android/explore_sites/|' \\\n                  'chrome/android/java/src/org/chromium/chrome/browser/explore_sites/'\n    },\n    'extension': {\n      'filepath': 'extension',\n    },\n    'feed': {\n      'filepath': 'chrome/android/feed|' \\\n                  'chrome/browser/feed/|' \\\n                  'components/feed/'\n    },\n    'fileapi': {\n      'filepath': 'file_system/|' \\\n                  'fileapi/'\n    },\n    'filebrowse': {\n      'filepath': 'file_browser|' \\\n                  'file_manager|' \\\n                  'filebrowse'\n    },\n    'filesapp': {\n      'filepath': 'chrome/browser/ash/drive|' \\\n                  'chrome/browser/ash/extensions/file_manager|' \\\n                  'chrome/browser/ash/file_manager|' \\\n                  'chrome/browser/ash/file_system_provider|' \\\n                  'chrome/browser/chromeos/extensions/file_system_provider|' \\\n                  'chrome/browser/drive|' \\\n                  'chrome/test/data/extensions/api_test/file_system_provider|' \\\n                  'components/drive|' \\\n                  'google_apis/drive|' \\\n                  'ash/webui/file_manager|' \\\n                  'ui/file_manager'\n    },\n    'firmware_update': {\n      'filepath': 'ash/webui/firmware_update_ui/|' \\\n                  'chromeos/ash/components/dbus/fwupd/|' \\\n                  'chromeos/ash/components/fwupd/',\n    },\n    'float': {\n      'filepath': 'ash/wm/float/'\n    },\n    'freetype_update': {\n      'filepath': 'third_party/freetype/README.chromium',\n    },\n    'fsp': {\n      'filepath': 'chrome/browser/ash/file_system_provider|' \\\n                  'chrome/browser/chromeos/extensions/file_system_provider|' \\\n                  'chrome/test/data/extensions/api_test/file_system_provider'\n    },\n    'fuchsia': {\n      'filepath': 'fuchsia',\n    },\n    'full_restore': {\n      'filepath': 'chrome/browser/ash/app_restore/|' \\\n                  'components/app_restore/'\n    },\n    'fuzzing': {\n      'filepath': 'fuzz|Fuzz',\n    },\n    'gamepad': {\n      'filepath': 'gamepad',\n    },\n    'gcm': {\n      'filepath': 'chrome/browser/gcm/|'\\\n                  'components/gcm_driver/|'\\\n                  'google_apis/gcm/',\n    },\n    'gemini_app': {\n      'filepath': 'chrome/browser/chromeos/gemini_app/|'\\\n                  'chrome/browser/ui/ash/gemini_app/|'\\\n                  'chrome/browser/web_applications/preinstalled_web_apps/gemini',\n    },\n    'generic_sensor': {\n      'filepath': 'content/browser/generic_sensor/|'\\\n                  'services/device/generic_sensor/|'\\\n                  'third_party/blink/renderer/modules/sensor/',\n    },\n    'geolocation': {\n      'filepath': 'chrome/browser/geolocation/|'\\\n                  'content/browser/geolocation|'\\\n                  'content/public/common/geoposition|'\\\n                  'content/public/browser/geolocation|'\\\n                  'content/renderer/geolocation|'\\\n                  'content/shell/geolocation/',\n    },\n    'gfx_geometry': {\n      'filepath': 'ui/gfx/geometry/',\n    },\n    'gfx_image': {\n      'filepath': 'ui/gfx/image/',\n    },\n    'global_media_controls': {\n      'filepath': 'chrome/browser/ui/global_media_controls|'\\\n                  'chrome/browser/ui/views/global_media_controls|'\\\n                  'chrome/browser/ui/views/feature_promos/global_media_controls|'\\\n                  'chrome/browser/ui/in_product_help/global_media_controls',\n    },\n    'gn': {\n      'filepath': 'tools/gn',\n    },\n    'google_bottom_bar': {\n      'filepath': 'chrome/browser/ui/android/google_bottom_bar/',\n    },\n    'gpu_passthrough_cmd_decoder': {\n      'filepath': 'gpu/command_buffer/service/.*passthrough',\n    },\n    'guest_view': {\n      'filepath': 'chrome/browser/apps/guest_view|'\\\n                  'chrome/browser/extensions/api/web_view|'\\\n                  'chrome/browser/guest_view|'\\\n                  'chrome/common/extensions/api/(app|web)view_tag\\.(json|idl)|'\\\n                  'chrome/common/extensions/docs/.*(app|web)view|'\\\n                  'chrome/renderer/resources/extensions/web_view|'\\\n                  'chrome/test/data/extensions/platform_apps/(app|web)_view|'\\\n                  'components/guest_view|'\\\n                  'content/browser/browser_plugin|'\\\n                  'extensions/browser/api/guest_view|'\\\n                  'extensions/browser/guest_view|'\\\n                  'extensions/common/api/(app|guest|web)_view.*\\.(json|idl)|'\\\n                  'extensions/common/api/extension_options.*\\.(json|idl)|'\\\n                  'extensions/common/api/mime_handler.*\\.(json|idl|mojom)|'\\\n                  'extensions/common/guest_view|'\\\n                  'extensions/common/mojom/guest_view\\.mojom|'\\\n                  'extensions/renderer/guest_view|'\\\n                  'extensions/renderer/resources/guest_view|'\\\n                  'extensions/test/data/(app|web)_view',\n    },\n    'gwp_asan': {\n      'filepath': 'components/gwp_asan|'\\\n                  'components/memory_system',\n    },\n    'hashprefix_realtime': {\n      'filepath': 'components/safe_browsing/core/browser/hashprefix_realtime/'\n    },\n    'headless': {\n      'filepath': 'headless/'\n    },\n    'heap_mojo': {\n      'filepath': 'third_party/blink/renderer/platform/mojo/heap_mojo_'\n    },\n    'holding_space': {\n      'filepath': 'ash/public/cpp/holding_space|'\\\n                  'ash/system/holding_space|'\\\n                  'ash/system/progress_indicator|'\\\n                  'chrome/browser/ui/ash/holding_space|'\\\n                  'chrome/browser/ui/ash/thumbnail_loader|'\\\n                  'chromeos/crosapi/mojom/.*holding_space|'\\\n                  'tools/metrics/histograms/metadata/holding_space'\n    },\n    'i18n': {\n      'filepath': 'base/i18n/|base/string|l10n|icu|'\\\n                  'locale_settings|encoding',\n    },\n    'incident_reporting': {\n      'filepath': 'chrome/browser/safe_browsing/incident_reporting',\n    },\n    'incognito': {\n      'filepath':  'chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabIncognitoManager.java'\\\n                   '|chrome/android/java/src/org/chromium/chrome/browser/customtabs/IncognitoCustomTabIntentDataProvider.java'\\\n                   '|chrome/android/java/src/org/chromium/chrome/browser/incognito'\\\n                   '|chrome/android/junit/src/org/chromium/chrome/browser/incognito'\\\n                   '|chrome/android/javatests/src/org/chromium/chrome/browser/incognito'\\\n                   '|chrome/browser/incognito'\\\n                   '|chrome/browser/prefs/incognito_mode_prefs.cc'\\\n                   '|chrome/browser/prefs/pref_service_incognito_allowlist.cc'\\\n                   '|chrome/browser/profiles/incognito_mode_policy_handler.cc'\\\n    },\n    'indexed_db': {\n      'filepath': 'content/browser/indexed_db|'\\\n                  'content/public/browser/indexed_db|'\\\n                  'content/renderer/indexed_db|'\\\n                  'content/test/data/indexeddb|'\\\n                  'components/services/storage/indexed_db',\n    },\n    'input': {\n      'filepath': 'content/browser/renderer_host/input|'\\\n                  'content/renderer/input|'\\\n                  'ui/events/blink/'\n    },\n    'input_device_settings': {\n      'filepath': 'ash/system/input_device_settings/|'\\\n                  'chrome/browser/resources/ash/settings/device_page/|'\\\n                  'chrome/browser/ui/webui/settings/ash/device_section.(cc|h)$|'\\\n                  'chrome/browser/ui/webui/settings/ash/input_device_settings/',\n    },\n    'input_devices': {\n      'filepath': 'ui/events/devices/',\n    },\n    'installable': {\n      'filepath': 'chrome/browser/extensions/bookmark_app'\\\n      '|chrome/browser/webapps/installable/'\n                  '|components/webapps/browser/installable/',\n    },\n    'installer_linux': {\n      'filepath': 'chrome/installer/linux/',\n    },\n    'installer_win': {\n      'filepath': 'chrome/install_static/'\\\n                  '|chrome/installer/(?!gcapi_mac/|linux/|mac/)'\\\n                  '|components/zucchini/',\n    },\n    'ios': {\n      'filepath': 'ios/',\n    },\n    'ios_chrome': {\n      'filepath': 'ios/chrome/',\n    },\n    'ios_clean': {\n      'filepath': 'ios/clean/',\n    },\n    'ios_credential_provider': {\n      'filepath': 'ios/chrome/browser/credential_provider|'\\\n                  'ios/chrome/common/credential_provider|'\\\n                  'ios/chrome/common/ui|'\\\n                  'ios/chrome/credential_provider_extension',\n    },\n    'ios_flags': {\n      'filepath': 'ios/chrome/browser/about_flags\\.(h|mm)|'\\\n                  'ios/chrome/browser/experimental_flags\\.(h|mm)|'\\\n                  'ios/chrome/browser/resources/Settings.bundle/Experimental\\.plist',\n    },\n    'ios_ntp': {\n      'filepath': 'ios/chrome/browser/ui/ntp/',\n    },\n    'ios_transactions': {\n      'filepath': 'components/autofill/ios|'\\\n                  'components/password_manager/ios|'\\\n                  'ios/chrome/browser/autofill|'\\\n                  'ios/chrome/browser/passwords|'\\\n                  'ios/chrome/browser/ui/passwords|'\\\n                  'ios/chrome/browser/ui/settings/autofill|'\\\n                  'ios/chrome/browser/ui/settings/password',\n    },\n    'ios_web': {\n      'filepath': 'ios/web(_view)?/',\n    },\n    'ios_web_view': {\n      'filepath': 'ios/web_view/',\n    },\n    'ios_widget_kit': {\n      'filepath': 'ios/chrome/common/widget_kit|'\\\n                  'ios/chrome/browser/widget_kit|'\\\n                  'ios/chrome/widget_kit_extension',\n    },\n    'ip_protection': {\n      'filepath': 'chrome/browser/ip_protection/' \\\n                  '|components/ip_protection/' \\\n                  '|components/privacy_sandbox/masked_domain_list/' \\\n                  '|services/network/ip_protection/' \\\n                  '|services/network/network_service_proxy_delegate',\n    },\n    'ipcz': {\n      'filepath': 'third_party/ipcz/',\n    },\n    'isolated_web_apps_apis': {\n      'filepath': 'content/browser/direct_sockets/'\\\n                  '|chrome/browser/direct_sockets/'\\\n                  '|third_party/blink/renderer/modules/direct_sockets/'\\\n                  '|chrome/browser/printing/web_api/'\\\n                  '|third_party/blink/renderer/modules/printing/'\\\n                  '|chrome/browser/media/webrtc/'\\\n                  '|chrome/browser/chromeos/policy/multi_screen_capture/'\\\n                  '|chrome/browser/web_applications/web_app_run_on_os_login'\\\n                  '|chrome/browser/ui/web_applications/sub_apps'\\\n                  '|third_party/blink/renderer/modules/subapps/',\n    },\n    'isolated_web_apps_core': {\n      'filepath': 'chrome/browser/web_applications/isolated_web_apps/'\\\n                  '|components/web_package/',\n    },\n    'isolated_web_apps_unmanaged_install': {\n      'filepath': 'chrome/browser/ui/views/web_apps/isolated_web_apps/'\\\n                  '|chrome/browser/ash/file_manager/virtual_tasks/install_isolated_web_app_virtual_task',\n    },\n    'kiosk': {\n      'filepath': 'chrome/browser/chromeos/app_mode/'\\\n                  '|chrome/browser/ash/app_mode/'\\\n                  '|chrome/browser/ash/login/app_mode/'\n                  '|chromeos/crosapi/mojom/kiosk_session_service.mojom',\n    },\n    'language': {\n      'filepath': 'chrome/browser/language|'\\\n                  'components/language|'\\\n                  'components/test/data/language|'\\\n                  'ios/chrome/browser/language|'\\\n                  'ios/web_view/internal/language'\n    },\n    'libaom': {\n      'filepath': 'third_party/libaom/',\n    },\n    'libvpx': {\n      'filepath': 'third_party/libvpx/',\n    },\n    'libwebp': {\n      'filepath': 'third_party/libwebp'\n    },\n    'libxml_xslt': {\n      'filepath': 'third_party/libxml/' \\\n                  '|third_party/libxslt/',\n    },\n    'linux_sandboxing': {\n      'filepath': 'sandbox/linux/'\\\n                  '|sandbox/policy/linux/',\n    },\n    'linux_seccomp_bpf': {\n      'filepath': 'content/common/sandbox.*linux.cc',\n    },\n    'lookalikes': {\n      'filepath': 'chrome/browser/component_updater/safety_tips_'\\\n                  '|chrome/browser/lookalikes/'\\\n                  '|chrome/browser/reputation/'\\\n                  '|chrome/browser/ui/views/page_info/safety_tip_page_info_bubble_view'\\\n                  '|components/lookalikes/'\\\n                  '|components/site_engagement/'\\\n                  '|components/url_formatter/',\n    },\n    'mac': {\n      'filepath': '(_|/)(cocoa|mac)(_|\\.)|/(cocoa|mac)/|^((?!ios\\/).)*\\.mm?$',\n    },\n    'manifest': {\n      'filepath': 'content/(browser|renderer)/manifest/'\\\n                  '|content/public/common/manifest'\\\n                  '|third_party/blink/(common|mojom)/manifest/'\\\n                  '|third_party/blink/renderer/modules/manifest/',\n    },\n    'media': {\n      'filepath': 'media|third_party/(ffmpeg|opus|libvpx)'\n    },\n    'media_capture_from_element': {\n      'filepath': 'content/renderer/media_capture_from_element/' \\\n                  '|third_party/blink/renderer/modules/mediacapture/' \\\n                  '|third_party/blink/renderer/platform/exported/web_canvas_capture' \\\n                  '|third_party/blink/web_tests/fast/mediacapturefromelement/' \\\n                  '|third_party/blink/public/platform/web_canvas_capture'\n    },\n    'media_controls': {\n      'filepath': 'third_party/blink/renderer/modules/media_controls/'\n    },\n    'media_galleries': {\n      'filepath': 'chrome/browser/extensions/api/media_galleries/'\\\n                  '|chrome/browser/media_galleries/'\\\n                  '|chrome/browser/storage_monitor/'\\\n                  '|chrome/common/media_galleries/'\\\n                  '|chrome/test/data/extensions/api_test/media_galleries/'\n    },\n    'media_gpu_cros': {\n      'filepath': 'media/gpu/chromeos'\\\n                  '|media/gpu/vaapi'\\\n                  '|media/gpu/v4l2'\\\n                  '|media/gpu/.*\\.(cc|h)$'\\\n                  '|media/mojo/(clients|mojom|test|services)/.*accelerator'\n    },\n    'media_gpu_vaapi': {\n      'filepath': 'media/gpu/vaapi',\n    },\n    'media_gpu_win': {\n      'filepath': 'media/gpu/windows/'\n    },\n    'media_recorder': {\n      'filepath': 'content/renderer/media_recorder/' \\\n                  '|third_party/blink/renderer/modules/mediarecorder/' \\\n                  '|third_party/blink/renderer/platform/exported/web_media_recorder' \\\n                  '|third_party/blink/web_tests/fast/mediarecorder/' \\\n                  '|third_party/blink/public/platform/web_media_recorder'\n    },\n    'media_remoting': {\n      'filepath': 'chrome/browser/media/cast_remoting'\\\n                  '|media/mojo/mojom/remoting.mojom'\\\n                  '|media/remoting/'\\\n                  '|third_party/blink/public/platform/media/web_media_player_'\\\n                  '|third_party/blink/renderer/platform/media/web_media_player_',\n    },\n    'media_router': {\n      'filepath': 'chrome/app/media_router_strings.grdp' \\\n                  '|chrome/browser/media/router/' \\\n                  '|chrome/browser/resources/media_router/' \\\n                  '|chrome/browser/ui/media_router/' \\\n                  '|chrome/browser/ui/views/media_router/' \\\n                  '|chrome/test/media_router/' \\\n                  '|components/media_router/'\n    },\n    'media_webrtc': {\n      'filepath': '^media/webrtc/'\n    },\n    'message_loop': {\n      'filepath': 'base/message_'\n    },\n    'metrics': {\n      'filepath': 'base/metrics/'\\\n                  '|chrome/android/java/src/org/chromium/chrome/browser/metrics/'\\\n                  '|chrome/browser/metrics/'\\\n                  '|chrome/browser/ash/external_metrics/'\\\n                  '|chrome/browser/extensions/api/metrics_private/'\\\n                  '|chrome/browser/ui/webui/metrics_handler'\\\n                  '|chromecast/browser/metrics/'\\\n                  '|components/metrics/'\\\n                  '|components/metrics_services_manager/'\\\n                  '|components/variations/'\\\n                  # Exclude XML files; in particular, histograms.xml.\n                  '|tools/metrics/[^.]*([.](?!xml$).*)?$',\n    },\n    'metrics_metadata_files': {\n      # Subscribe to this to watch for changes to {actions, histograms, ukm}.xml\n      # and to the field trial testing config.\n      'filepath': 'tools/metrics/.*\\.xml$'\\\n                  '|testing/variations/fieldtrial_testing_config.json',\n    },\n    'metrics_perf': {\n      'filepath': 'chrome/browser/metrics/perf/',\n    },\n    'midi': {\n      'filepath': 'midi',\n    },\n    'minidump_tests': {\n      'filepath': 'tools/perf/core/minidump_unittest.py',\n    },\n    'multi_apps': {\n      'filepath': 'chrome/browser/ui/web_applications/.*sub_app'\\\n                  '|chrome/browser/web_applications/commands/.*sub_app'\\\n                  '|chrome/test/data/web_apps/subapps_isolated_app/'\\\n                  '|chrome/test/data/webapps_integration/has_sub_apps/'\\\n                  '|third_party/blink/public/mojom/subapps/'\\\n                  '|third_party/blink/renderer/modules/subapps/'\\\n                  '|third_party/blink/web_tests/external/wpt/resources/chromium/mock-subapps.js'\\\n                  '|third_party/blink/web_tests/external/wpt/subapps/',\n    },\n    'multidevice': {\n      'filepath': 'ash/multi_device_setup/'\\\n                  '|ash/resources/multidevice_resources.grdp'\\\n                  '|ash/webui/common/resources/multidevice_setup/'\\\n                  '|chrome/browser/ash/cryptauth/'\\\n                  '|chrome/browser/ash/device_sync/'\\\n                  '|chrome/browser/ash/multidevice_setup/'\\\n                  '|chrome/browser/ash/secure_channel/'\\\n                  '|chrome/browser/resources/chromeos/multidevice_setup/'\\\n                  '|chrome/browser/resources/ash/settings/multidevice_page/'\\\n                  '|chrome/browser/ui/webui/ash/multidevice_setup/'\\\n                  '|chrome/browser/ui/webui/settings/ash/multidevice'\\\n                  '|chrome/test/data/webui/multidevice_setup/'\\\n                  '|chromeos/ash/components/multidevice/'\\\n                  '|chromeos/ash/components/proximity_auth/'\\\n                  '|chromeos/ash/services/device_sync/'\\\n                  '|chromeos/ash/services/multidevice_setup/'\\\n                  '|chromeos/ash/services/secure_channel/',\n    },\n    'multipaste': {\n     'filepath': 'ash/clipboard/|'\\\n                 'ash/public/cpp/.*clipboard.*|'\\\n                 'chrome/browser/ash/crosapi/clipboard_history.*|'\\\n                 'chrome/browser/ui/ash/clipboard.*|'\\\n                 'chromeos/ui/clipboard_history/',\n    },\n    'nacl': {\n      'filepath': 'chrome/nacl/|chrome/test/nacl/|'\\\n        'chrome/browser/nacl_host/|chrome/common/nacl|'\\\n        'native_client_sdk/src/doc/',\n    },\n    'native_client_sdk': {\n      'filepath': '^native_client_sdk/',\n    },\n    'navigation': {\n      'filepath': 'content/browser/renderer_host|'\\\n                  'content/browser/renderer_host/render_process_host|'\\\n                  'content/browser/renderer_host/render_view_host|'\\\n                  'content/browser/web_contents/web_contents_impl|'\\\n                  'content/renderer/render_frame|'\\\n                  'content/renderer/render_view'\n    },\n    'nearby': {\n      'filepath': 'chrome/browser/nearby_sharing/|'\\\n                  'chrome/browser/resources/chromeos/nearby_internals/|'\\\n                  'chrome/browser/resources/chromeos/nearby_share/|'\\\n                  'chrome/browser/resources/ash/settings/nearby_share_page/|'\\\n                  'chrome/browser/ui/webui/nearby_internals/|'\\\n                  'chrome/browser/ui/webui/nearby_share/|'\\\n                  'chrome/services/sharing/|'\\\n                  'chromeos/ash/components/nearby/common/'\n    },\n    'nearby_presence': {\n      'filepath': 'chrome/browser/ash/nearby/|'\\\n                  'chromeos/ash/components/nearby/presence/|'\\\n                  'chromeos/ash/services/nearby/'\n    },\n    'net': {\n      'filepath': 'net/',\n    },\n    'net_base': {\n      'filepath': 'net/base/',\n    },\n    'net_http2': {\n      'filepath': 'net/http2/',\n    },\n    'net_log': {\n      'filepath': 'net/log/|' \\\n        'chrome/browser/net/.*net_log|' \\\n        'chrome/browser/resources/net_internals/|' \\\n        'chrome/browser/ui/webui/net_internals/|' \\\n        'components/net_log/'\n    },\n    'net_server': {\n      'filepath': 'net/server/'\n    },\n    'net_spdy': {\n      'filepath': 'net/spdy/',\n    },\n    'net_websockets': {\n      'filepath': 'net/websockets/',\n    },\n    'netinfo': {\n      'filepath': '/netinfo/',\n    },\n    'network_service': {\n      'filepath': 'services/network/',\n    },\n    'nfc': {\n      'filepath': 'services/device/nfc/|'\\\n                  'third_party/blink/renderer/modules/nfc/'\n    },\n    'notifications': {\n      'filepath': 'chrome/browser/extensions/api/notifications/|'\\\n        'chrome/browser/notifications/|'\\\n        'chrome/test/data/notifications/|'\\\n        'content/browser/notifications/|'\\\n        'content/common/platform_notification|'\\\n        'content/public/browser/platform_notification|'\\\n        'content/public/common/platform_notification|'\\\n        'content/renderer/notification_|'\\\n        'chrome/notification_helper/|'\\\n        'third_party/blink/web_tests/external/wpt/notifications|'\\\n        'third_party/blink/web_tests/http/tests/notifications|'\\\n        'third_party/blink/renderer/modules/notifications|'\\\n        'third_party/blink/public/platform/modules/notifications|'\\\n        'ui/message_center/'\n    },\n    'nqe': {\n      'filepath': 'nqe',\n    },\n    'ntp_snippets': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/ntp/|'\\\n        'chrome/android/javatests/src/org/chromium/chrome/browser/ntp/|'\\\n        'chrome/android/junit/src/org/chromium/chrome/browser/ntp/|'\\\n        'chrome/android/java/src/org/chromium/chrome/browser/suggestions/|'\\\n        'chrome/android/javatests/src/org/chromium/chrome/browser/suggestions/|'\\\n        'chrome/android/java/res/layout/new_tab_page|'\\\n        'chrome/android/java/res/layout/most_visited'\n    },\n    'ntp_tiles': {\n      'filepath': 'chrome/browser/android/ntp/|'\\\n        'chrome/browser/ui/webui/ntp/|'\\\n        'chrome/common/search/ntp|'\\\n        'components/ntp_tiles/|'\\\n        'ios/chrome/browser/ntp_tiles'\n    },\n    'offline_pages': {\n      'filepath': 'components/offline_pages/'\\\n                  '|chrome/browser/android/offline_pages/'\\\n                  '|chrome/android/java/src/org/chromium/chrome/browser/offlinepages/'\n    },\n    'omnibox_desktop': {\n      'filepath': '^chrome/browser/ash/app_list/search/omnibox/|'\\\n                  '^chrome/browser/autocomplete/|'\\\n                  '^chrome/browser/resources/new_tab_page/realbox/|'\\\n                  '^chrome/browser/resources/omnibox|'\\\n                  '^chrome/browser/ui/location_bar/|'\\\n                  '^chrome/browser/ui/omnibox/|'\\\n                  '^chrome/browser/ui/views/location_bar/|'\\\n                  '^chrome/browser/ui/views/omnibox/|'\\\n                  '^chrome/browser/ui/webui/omnibox/|'\\\n                  '^chrome/browser/ui/webui/realbox/|'\\\n                  '^chrome/test/data/webui/new_tab_page/realbox/|'\\\n                  '^components/omnibox/|'\\\n                  '^components/search_engines/'\n    },\n    'origin_trials': {\n      'filepath': 'origin_trial'\\\n                  '|OriginTrial'\\\n                  '|ConditionalFeature',\n    },\n    'os_crypt': {\n      'filepath': 'components/os_crypt/',\n    },\n    'os_feedback_ui': {\n      'filepath': 'ash/webui/os_feedback_ui/|' \\\n                  'chrome/browser/ash/os_feedback/'\n    },\n    'ozone': {\n      'filepath': 'ui/ozone/|'\\\n        'ui/events/ozone/|'\\\n        'ui/gfx/linux/|'\\\n        'ui/gl/gl_.*egl|'\\\n        'ui/gl/gl_.*ozone'\n    },\n    'ozone_fuchsia': {\n      'filepath': 'ui/ozone/platform/flatland/',\n    },\n    'page_info' : {\n      'filepath': 'chrome/browser/ui/page_info/'\\\n                  '|chrome/browser/ui/.*/page_info/'\\\n                  '|chrome/android/java/src/org/chromium/chrome/browser/page_info/'\\\n                  '|components/page_info_strings.grdp'\\\n                  '|ios/chrome/browser/ui/page_info/'\n    },\n    'page_load_metrics' : {\n      'filepath': '/page_load_metrics/'\n    },\n    'page_load_metrics_abandoned_navigations': {\n      'filepath': 'chrome/browser/page_load_metrics/observers/gws_abandoned_page_load_metrics_observer.(cc|h)$|' \\\n                  'components/page_load_metrics/browser/observers/abandoned_page_load_metrics_observer.(cc|h)$'\n    },\n    'panels': {\n      'filepath': 'chrome/browser/ui/panels'\\\n                  '|chrome/browser/ui/cocoa/panels'\\\n                  '|chrome/browser/ui/views/panels'\n    },\n    'partition_alloc': {\n      'filepath': 'base/allocator/partition_allocator/'\n    },\n    'password_manager': {\n      'filepath': 'chrome/.*/password_'\\\n                  '|chrome/browser/ui/passwords'\\\n                  '|chrome/browser/ui/views/passwords'\\\n                  '|chrome/test/data/password'\\\n                  '|components/autofill.*password'\n                  '|components/password_'\\\n                  '|^ios/chrome/browser/passwords'\\\n    },\n    'payments': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/payments'\\\n                  '|chrome/android/javatests/src/org/chromium/chrome/browser/payments'\\\n                  '|chrome/browser/payments'\\\n                  '|chrome/browser/ui/views/payments'\\\n                  '|components/payments/test/data'\\\n                  '|components/payments'\\\n                  '|content/browser/payments'\\\n                  '|content/test/data/payments'\\\n                  '|ios/chrome/browser/payments'\\\n                  '|ios/chrome/browser/ui/payments'\\\n                  '|ios/web/payments'\\\n                  '|ios/web/public/payments'\\\n                  '|third_party/blink/web_tests/external/wpt/payment-request'\\\n                  '|third_party/blink/web_tests/http/tests/payments'\\\n                  '|third_party/blink/web_tests/payments'\\\n                  '|third_party/blink/public/platform/modules/payments'\\\n                  '|third_party/blink/renderer/modules/payments'\n    },\n    'pdf': {\n      'filepath': 'components/pdf/'\\\n                  '|chrome/browser/pdf/'\\\n                  '|chrome/browser/ui/pdf/'\\\n                  '|pdf/'\n    },\n    'pdf_ocr': {\n      'filepath': 'pdf_ocr'\n    },\n    'pepper_api': {\n      'filepath': 'ppapi/api'\\\n                  '|ppapi/c',\n    },\n    'permissions': {\n      'filepath': 'content/(child,browser)/permissions/'\\\n                  '|content/common/permission_'\\\n                  '|content/public/(common,browser)/permission_'\\\n                  '|chrome/browser/permissions/'\\\n                  '|chrome/browser/content_settings/permission'\\\n                  '|permission_context',\n    },\n    'permissions_policy': {\n      'filepath': 'third_party/blink/renderer/core/permissions_policy/|' \\\n                  'third_party/blink/public/(common|mojom)/permissions_policy/'\n    },\n    'phonehub': {\n      'filepath': 'ash/system/phonehub/'\\\n                  '|chrome/browser/ash/phonehub/'\\\n                  '|chromeos/ash/components/phonehub/',\n    },\n    'picture_in_picture': {\n      'filepath': 'third_party/blink/renderer/modules/picture_in_picture/'\n    },\n    'plugin_metadata': {\n      'filepath': 'chrome/browser/resources/plugin_metadata/'\n    },\n    'plus_addresses': {\n      'filepath': 'components/plus_addresses/'\\\n                  '|chrome/browser/plus_addresses/'\\\n                  '|chrome/browser/ui/plus_addresses/'\\\n                  '|chrome/browser/ui/android/plus_addresses/'\\\n                  '|chrome/browser/ui/views/plus_addresses/'\\\n                  '|components/plus_addresses_strings_grdp/'\\\n                  '|ios/chrome/browser/plus_addresses/'\n    },\n    'popup_blocker': {\n      'filepath': 'chrome/browser/ui/blocked_content'\n    },\n    'precache': {\n      'filepath': '[pP]recache'\n    },\n    'prefetch_proxy': {\n      'filepath': 'chrome/browser/preloading/prefetch/prefetch_proxy',\n    },\n    'prerender': {\n      'filepath': 'chrome/browser/chrome_content_browser_client_binder_policies' \\\n                  '|chrome/browser/predictors/autocomplete_action_predictor\\.(cc|h)$' \\\n                  '|chrome/browser/preloading/' \\\n                  '|content/browser/mojo_binder_policy' \\\n                  '|content/browser/preloading/'\n    },\n    'presentation': {\n      'filepath': 'content/browser/presentation/' \\\n                  '|content/public/browser/presentation_' \\\n                  '|third_party/blink/public/mojom/presentation/' \\\n                  '|third_party/blink/renderer/modules/presentation/' \\\n                  '|third_party/blink/web_tests/(virtual/)?presentation/'\n    },\n    'preview_features': {\n      'filepath': 'components/previews/core/previews_features' \\\n                  '|components/previews/core/previews_experiments'\n    },\n    'print_preview': {\n      'filepath': 'chrome/browser/resources/print_preview/' \\\n                  '|chrome/browser/ui/webui/print_preview/'\n    },\n    'privacy_budget': {\n      'filepath': 'privacy_budget',\n    },\n    'privacy_guide_desktop': {\n      'filepath': 'chrome/browser/resources/settings/privacy_page/privacy_guide/' \\\n                  '|chrome/test/data/webui/settings/privacy_guide*',\n    },\n    'private_aggregation': {\n      'filepath': 'private.?aggregation|aggregation.?service',\n    },\n    'profile_keyed_service': {\n      'filepath': 'chrome/browser/profiles/profile_keyed_service_browsertest.cc',\n    },\n    'psm_libs': {\n      'filepath': 'third_party/private_membership/|' \\\n                  'third_party/shell-encryption/'\n    },\n    'push_messaging': {\n      'filepath': 'push_messaging'\n    },\n    'quick_answers': {\n      'filepath': 'ash/quick_answers/'\\\n                  '|chrome/browser/renderer_context_menu/quick_answers'\\\n                  '|chromeos/components/quick_answers/'\n    },\n    'related_website_sets': {\n      'filepath': 'first_party_sets|' \\\n                  'top_level_storage_access_api|' \\\n                  'top-level-storage-access-api|' \\\n                  'storage_access_api|' \\\n                  'storage-access-api'\n    },\n    'relaunch_notification': {\n      'filepath': 'chrome/browser/ui/views/relaunch_notification'\n    },\n    'remoteplayback': {\n      'filepath': 'chrome/android/features/media_router/java/src/org/chromium/chrome/browser/media/router/FlingingController' \\\n                  '|chrome/android/java/src/org/chromium/chrome/browser/media/remote/' \\\n                  '|chrome/browser/media/android/remote/' \\\n                  '|media/renderers/remote_playback' \\\n                  '|third_party/blink/public/platform/media/remote_playback' \\\n                  '|third_party/blink/public/platform/modules/remoteplayback/' \\\n                  '|third_party/blink/renderer/core/html/media/remote_playback' \\\n                  '|third_party/blink/renderer/platform/media/remote_playback' \\\n                  '|third_party/blink/renderer/modules/remoteplayback/' \\\n                  '|third_party/blink/web_tests/media/remoteplayback/' \\\n                  '|third_party/blink/web_tests/virtual/new-remote-playback-pipeline/'\n    },\n    'remoting': {\n      'filepath': '^remoting/' \\\n                  '|^testing/chromoting'\n    },\n    'rgb_kbd': {\n      'filepath': 'ash/rgb_keyboard/'\n    },\n    'rlz_id': {\n      'filepath' :'rlz/lib/machine_id.cc|'\\\n                  'rlz/lib/machine_id.h|'\\\n                  'rlz/win/lib/machine_id_win.cc',\n    },\n    'runtime_enabled_features': {\n      'filepath' : 'third_party/blink/renderer/platform/runtime_enabled_features.json5'\n    },\n    'safe_browsing': {\n      'filepath': 'chrome/(browser|common|renderer)/safe_browsing/|'\\\n                  'components/safe_browsing/',\n    },\n    'sampling_profiler': {\n      'filepath': 'base/profiler/'\\\n                  '|chrome/common/profiler/'\\\n                  '|chrome/renderer/v8_unwinder'\\\n                  '|components/metrics/call_stacks/.*call_stack'\\\n                  '|components/metrics/public/mojom/call_stack'\\\n                  '|components/sampling_profiler'\\\n                  '|build/android/gyp/create_unwind_table*'\\\n                  '|build/android/gyp/extract_unwind_tables*'\\\n                  '|chrome/android/features/stack_unwinder/'\\\n                  '|chrome/android/modules/stack_unwinder/',\n    },\n    'scanning': {\n      'filepath': 'ash/webui/scanning/'\\\n                  '|chrome/browser/ash/scanning/',\n    },\n    'screen_ai': {\n      'filepath': 'screen_ai',\n    },\n    'search_engine_choice_screen': {\n      'filepath': 'chrome/browser/ui/search_engine_choice/'\\\n                  '|chrome/browser/ui/views/search_engine_choice/'\\\n                  '|chrome/browser/ui/webui/search_engine_choice/'\\\n                  '|chrome/browser/resources/search_engine_choice/'\\\n                  '|chrome/browser/search_engine_choice/'\\\n                  '|chrome/test/data/webui/search_engine_choice/'\\\n                  '|components/resources/default_100_percent/search_engine_choice/'\\\n                  '|components/resources/default_200_percent/search_engine_choice/'\\\n                  '|components/search_engines/generated_marketing_snippets.cc'\\\n                  '|components/search_engines/search_engine_choice_.cc'\\\n                  '|components/search_engine_choice_strings.grdp'\\\n                  '|components/search_engine_descriptions_strings.grd'\\\n                  '|ios/chrome/browser/providers/signin/chromium_choice.mm'\\\n                  '|ios/chrome/test/providers/signin/test_choice.mm'\\\n                  '|ios/public/provider/chrome/browser/signin/choice_api.h'\\\n\t\t  '|tools/search_engine_choice/',\n\n    },\n    'search_prefetch': {\n      'filepath': 'chrome/browser/preloading/prefetch/search_prefetch',\n    },\n    'security': {\n      'filepath': 'base/json/'\\\n                  '|base/memory/.*shared_memory'\\\n                  '|components/cbor/'\\\n                  '|AndroidManifest',\n    },\n    'security_interstitials': {\n      'filepath': 'components/security_interstitials',\n    },\n    'select_to_speak': {\n      'filepath': 'select_to_speak',\n    },\n    'send_tab_to_self': {\n      'filepath': 'components/send_tab_to_self'\\\n                  '|chrome/android/java/src/org/chromium/chrome/browser/send_tab_to_self/'\\\n                  '|chrome/android/junit/src/org/chromium/chrome/browser/send_tab_to_self/'\\\n                  '|chrome/browser/android/send_tab_to_self/'\\\n                  '|chrome/browser/send_tab_to_self/'\\\n                  '|chrome/browser/ui/send_tab_to_self'\\\n                  '|ios/chrome/browser/send_tab_to_self/',\n    },\n    'service_worker': {\n      'filepath': 'content/(browser|renderer|child|common)/service_worker/',\n    },\n    'settings_os_settings': {\n      'filepath': 'chrome/browser/resources/ash/settings/'\\\n                  '|chrome/browser/ui/webui/ash/settings/'\\\n                  '|chrome/test/data/webui/chromeos/settings/'\\\n                  '|ui/webui/resources/cr_elements/chromeos/',\n    },\n    'settings_os_settings_languages': {\n      'filepath': 'chrome/browser/resources/ash/settings/os_languages_page/'\\\n                  '|chrome/browser/ui/webui/ash/settings/languages_'\\\n                  '|chrome/test/data/webui/chromeos/settings/os_languages_page/'\n    },\n    'sharing': {\n      'filepath': 'chrome/browser/sharing/|'\\\n                  'chrome/browser/ui/views/sharing/',\n    },\n    'shimless_rma': {\n      'filepath': 'ash/webui/shimless_rma/'\\\n                  '|chrome/test/data/webui/chromeos/shimless_rma/',\n    },\n   'shortcut_customization_ui': {\n      'filepath': 'ash/webui/shortcut_customization_ui/',\n    },\n    'siso_config': {\n      'filepath': 'build/config/siso/',\n    },\n    'site_engagement': {\n      'filepath': 'chrome/browser/engagement/|'\\\n                  'chrome/browser/ui/webui/engagement/',\n    },\n    'site_instance': {\n      'filepath': 'content/browser/site_instance|'\\\n        'content/browser/browsing_instance',\n    },\n    'smartlock': {\n      'filepath': 'ash/login/ui/smart_lock.*'\\\n                  '|ash/public/cpp/smartlock'\\\n                  '|chrome/browser/ash/login/easy_unlock/'\\\n                  '|chrome/browser/resources/chromeos/quick_unlock/'\\\n                  '|chrome/browser/resources/ash/settings/multidevice_page/multidevice_smartlock'\\\n                  '|chrome/test/data/webui/chromeos/settings/multidevice_smartlock'\\\n                  '|chromeos/ash/components/dbus/easy_unlock/'\\\n                  '|chromeos/ash/components/proximity_auth/',\n    },\n    'smb': {\n      'filepath': 'chrome/browser/ash/file_system_provider' \\\n                  '|chrome/browser/ash/smb_client'\\\n                  '|chromeos/ash/components/dbus/smbprovider',\n    },\n    'source_idls': {\n      'filepath': 'third_party/blink/renderer/(core|modules|platform)/.*\\.idl',\n    },\n    'speed_metrics_changelog': {\n      'filepath': 'docs/speed/metrics_changelog/.*.md',\n    },\n    'spellcheck': {\n      'filepath': 'chrome/browser/spellchecker/'\\\n                  '|chrome/browser/renderer_context_menu/spelling_'\\\n                  '|components/spellcheck/'\\\n                  '|third_party/hunspell/'\\\n                  '|third_party/hunspell_dictionaries/',\n    },\n    'splitview': {\n      'filepath': 'ash/wm/splitview/'\n    },\n    'startup': {\n      'filepath': 'chrome/browser/ui/startup/',\n    },\n    'storage_access_api': {\n      'filepath': '/storage_access_api/|' \\\n                  '/storage-access-api/'\n    },\n    'storage_service' : {\n      'filepath': 'components/services/storage/',\n    },\n    'structured_headers' : {\n      'filepath': 'net/http/structured_headers',\n    },\n    'styleguide': {\n      'filepath': '^styleguide/',\n    },\n    'styleguide_python': {\n      'filepath': '^styleguide/python',\n    },\n    'stylus_handwriting': {\n      'filepath': 'components/stylus_handwriting',\n    },\n    'subresource_filter': {\n      'filepath': 'subresource_filter|SubresourceFilter|url_pattern_index',\n    },\n    'supervised_users': {\n      'filepath': 'chrome/browser/.*managed_mode'\\\n                  '|chrome/browser/.*managed_user'\\\n                  '|chrome/browser/.*supervised_user',\n    },\n    'surface_layer_for_video': {\n      'filepath': 'cc/layers/surface_layer'\\\n                  '|third_party/blink/renderer/platform/graphics/video_frame_'\\\n                  '|third_party/blink/renderer/platform/graphics/surface_layer_bridge',\n    },\n    'switch_access': {\n      'filepath': 'switch_access',\n    },\n    'syncfs': {\n      'filepath': 'sync_file_system',\n    },\n    'tab_alert_indicators': {\n      'filepath': 'content/browser/media/audio_stream_monitor'\\\n        '|chrome/browser/ui/tabs/tab_utils'\\\n        '|chrome/browser/ui/views/tabs/alert_indicator_button'\\\n        '|chrome/browser/ui/views/tabs/tab\\.cc'\\\n        '|chrome/browser/ui/views/tabs/tab_renderer_data'\\\n        '|media/audio/audio_(output_controller|power_monitor)',\n    },\n    'tab_capture': {\n      # TODO: Watch code in media/audio & audio service for tab audio capture\n      'filepath': 'chrome/browser/extensions/api/tab_capture/'\\\n        '|chrome/renderer/resources/extensions/tab_capture_custom_bindings.js'\\\n        '|chrome/test/data/extensions/api_test/tab_capture/'\\\n        '|components/viz/common/(frame_sinks/|gl_helper|gl_i420|yuv_)'\\\n        '|components/viz/host/client_frame_sink'\\\n        '|components/viz/service/frame_sinks/(frame_sink_manager'\\\n            '|video_capture/)'\\\n        '|content/browser/media/capture/'\\\n        '|content/browser/renderer_host/media/'\\\n        '|media/base/video_frame\\.h'\\\n        '|media/capture/'\\\n        '|services/viz/privileged/mojom/compositing/frame_sink'\\\n        '|third_party/blink/public/mojom/mediastream/'\n    },\n    'tab_contents': {\n      'filepath': 'chrome/browser/tab_contents/|'\\\n        'content/browser/tab_contents/|'\\\n        'chrome/browser/ui/tab_contents/',\n    },\n    'tab_group_infra': {\n      'filepath': 'chrome/browser/data_sharing/'\\\n        '|chrome/browser/tab_group_sync/'\\\n        '|components/data_sharing/'\\\n        '|components/saved_tab_groups/'\n    },\n    'tab_interface': {\n      'filepath': 'chrome/browser/tab/'\n    },\n    'tab_ui_and_start_surface': {\n      'filepath': 'chrome/android/features/tab_ui/' \\\n                  '|chrome/android/features/start_surface/' \\\n                  '|chrome/android/.*/src/org/chromium/chrome/browser/tasks/'\n    },\n    'tbmv2_metrics': {\n      'filepath': 'third_party/catapult/tracing/tracing/metrics'\n    },\n    'telemetry': {\n      'filepath': 'tools/perf/'\n    },\n    'test_runner': {\n      'filepath': 'components/test_runner/' \\\n                  '|content/shell/(common|browser|renderer)/web_test/' \\\n                  '|content/test/web_test_support.cc' \\\n                  '|content/public/test/web_test_support.h' \\\n    },\n    'tests': {\n      'filepath': 'apitest|unittest|browsertest|uitest|chrome/test/',\n    },\n    'tether': {\n      'filepath': 'chrome/browser/ash/tether/'\\\n                  '|chrome/browser/ui/ash/network/tether'\\\n                  '|chromeos/ash/components/tether/',\n    },\n    'text_to_speech': {\n      'filepath': 'tts'\n    },\n    'textinput': {\n      'filepath': 'content/browser/renderer_host/render_widget_host_view'\\\n                  '|content/browser/renderer_host/text_input'\\\n                  '|ui/base/ime/'\\\n                  '|ui/views/controls/textfield/'\\\n                  '|ui/wm/core/ime'\n    },\n    'textinput_chromeos': {\n      'filepath': 'chrome/browser/ash/extensions/input_method'\\\n                  '|chrome/browser/ash/input_method/'\\\n                  '|chrome/browser/extensions/api/input_ime'\\\n                  '|chrome/browser/resources/chromeos/keyboard/' \\\n                  'chromeos/.*(language|keyboard)'\\\n                  '|chromeos/ime/'\n    },\n    'third_party_conflicts': {\n      'filepath': 'chrome/browser/win/conflicts/'\n    },\n    'timers': {\n      'filepath': 'base/timer/'\n    },\n    'tools_win_chromeexts': {\n      'filepath': 'tools/win/chromeexts',\n    },\n    'touch_selection': {\n      'filepath': 'ui/touch_selection/'\\\n                  '|content/public/android/java/src/org/chromium/content/browser/selection/'\n    },\n    'tracing': {\n      'filepath': 'base/debug/trace_event'\\\n                  '|base/trace_event/'\\\n                  '|content/browser/tracing/'\\\n                  '|components/tracing/'\\\n                  '|services/tracing/'\n    },\n    'traffic_annotation': {\n      'filepath': 'tools/traffic_annotation/'\n    },\n    'translate': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/translate|'\\\n                  'chrome/android/java/src/org/chromium/chrome/browser/infobar/translate|'\\\n                  'chrome/android/javatests/src/org/chromium/chrome/browser/translate|'\\\n                  'chrome/browser/translate|'\\\n                  'chrome/browser/ui/translate|'\\\n                  'chrome/browser/ui/webui/translate_internals|'\\\n                  'chrome/browser/ui/views/translate|'\\\n                  'chrome/renderer/translate|'\\\n                  'chrome/test/data/translate|'\\\n                  'components/resources/translate_resources.grdp'\\\n                  'components/translate|'\\\n                  'components/translate_strings_grdp|'\\\n                  'ios/chrome/browser/translate|'\\\n                  'ios/chrome/browser/ui/translate|'\\\n                  'ios/web_view/internal/translate'\n    },\n    'turtledove': {\n      'filepath': 'content/browser/interest_group/|'\\\n                  'content/services/auction_worklet/|'\\\n                  'third_party/blink/public/mojom/interest_group/|'\\\n                  'third_party/blink/renderer/modules/ad_auction/'\n    },\n    'ui_compositor': {\n      'filepath': 'ui/compositor/layer\\.|'\\\n                  'ui/compositor/layer_unittest|'\\\n                  'ui/compositor/compositor',\n    },\n    'ui_display_win': {\n      'filepath': '^ui/display/win',\n    },\n    'ui_resources': {\n      'filepath': 'ui/resources/'\\\n                  '|ui/base/native_theme/resources/'\\\n                  '|chrome/app/theme/'\n    },\n    'ui_strings': {\n      'filepath': 'chrome/app/generated_resources.grd'\\\n                  '|chrome/app/google_chrome_strings.grd'\\\n                  '|chrome/app/settings_strings.grdp'\\\n                  '|chrome/browser/ui/android/strings/android_chrome_strings.grd'\\\n                  '|ios/chrome/app/strings/ios(_.+)*_strings.grd'\\\n                  '|ui/strings/ui_strings.grd',\n    },\n    'ui_views': {\n      'filepath': '^ui/views',\n    },\n    'unified_consent': {\n      'filepath': 'components/unified_consent/'\\\n                  '|chrome/browser/unified_consent/',\n    },\n    'usb': {\n      'filepath': '/usb/',\n    },\n    'user_education': {\n      'filepath': 'ash/user_education/|'\\\n                  'chrome/browser/ui/ash/user_education/',\n    },\n    'version_assembly': {\n      'filepath': 'chrome/app/version_assembly',\n    },\n    'video_capture': {\n      'filepath': 'chrome/browser/media/.*(capture|media|webrtc)'\\\n                  '|content/browser/renderer_host/media/.*(capture|media)'\\\n                  '|content/renderer/media/.*(capture|media|webrtc)'\\\n                  '|media/capture/'\\\n                  '|media/muxers/'\\\n                  '|services/video_capture/',\n    },\n    'virtual_keyboard': {\n      'filepath': 'ash/keyboard/'\\\n                  '|chrome/test/data/chromeos/virtual_keyboard/'\\\n                  '|extensions/browser/api/virtual_keyboard_private/'\\\n                  '|ash/system/virtual_keyboard/',\n    },\n    'virtual_reality': {\n      # Includes VR, AR, and XR.\n      'filepath': '/vr/'\\\n                  '|/xr'\\\n                  '|webxr'\\\n                  '|isolated_xr_device'\\\n                  '|third_party/arcore'\\\n                  '|third_party/gvr'\\\n                  '|third_party/libovr'\\\n                  '|third_party/openvr',\n    },\n    'vscode_tooling': {\n      'filepath': 'tools/vscode',\n    },\n    'vulkan': {\n      'filepath': 'gpu/vulkan'\\\n                  '|third_party/vulkan'\n    },\n    'wake_lock': {\n      'filepath': 'wake_lock',\n    },\n    'wallpapers': {\n      'filepath': 'components/arc/common/wallpaper.mojom'\\\n                  '|ash/wallpaper/'\\\n    },\n    'wayland': {\n      'filepath': 'ui/ozone/platform/wayland/'\\\n                  '|third_party/wayland/'\\\n                  '|third_party/wayland-protocols/',\n    },\n    'web_applications': {\n      'filepath': 'chrome/browser/web_applications'\\\n                  '|chrome/browser/ui/web_applications',\n    },\n    'web_package': {\n      'filepath': 'components/web_package/'\\\n                  '|content/browser/loader/prefetch_url_loader'\\\n                  '|content/browser/web_package/'\\\n                  '|content/test/data/sxg/'\n    },\n    'web_share': {\n      'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/webshare/'\\\n                  '|chrome/android/javatests/src/org/chromium/chrome/browser/WebShare'\\\n                  '|third_party/blink/web_tests/webshare/'\\\n                  '|third_party/blink/web_tests/external/wpt/web-share/'\\\n                  '|third_party/blink/public/mojom/webshare/'\\\n                  '|third_party/blink/renderer/modules/webshare/',\n    },\n    'webauthn': {\n        'filepath': 'chrome/android/java/src/org/chromium/chrome/browser/webauth/'\\\n      '|chrome/android/javatests/src/org/chromium/chrome/browser/webauth/'\\\n                    '|chrome/browser/ui/webauthn/'\\\n                    '|chrome/browser/ui/views/webauthn/'\\\n                    '|chrome/browser/webauthn/'\\\n                    '|content/browser/webauth/'\\\n                    '|device/fido/'\\\n                    '|third_party/blink/public/mojom/webauthn/'\\\n                    '|third_party/blink/web_tests/external/wpt/webauthn/'\\\n                    '|third_party/microsoft_webauthn/',\n    },\n    'webcodecs': {\n        'filepath': 'third_party/blink/renderer/modules/webcodecs/',\n    },\n    'webgpu': {\n        'filepath': 'third_party/blink/renderer/modules/webgpu/',\n    },\n    'webid': {\n        'filepath': 'third_party/blink/renderer/modules/credentialmanagement/'\\\n                    '|third_party/blink/public/mojom/webid/'\\\n                    '|content/browser/webid'\\\n                    '|chrome/browser/.*webid',\n    },\n    'weblayer': {\n        'filepath': 'weblayer/',\n    },\n    'weblayer_safe_browsing': {\n        'filepath': 'weblayer/browser/safe_browsing/',\n    },\n    'weblayer_ssl': {\n        'filepath': 'weblayer/browser/ssl',\n    },\n    'webnn': {\n        'filepath': 'third_party/blink/renderer/modules/ml/webnn/'\\\n                    '|services/webnn/',\n    },\n    'webotp': {\n        'filepath': 'third_party/blink/renderer/modules/credentialmanager/credentials_container\\.cc'\\\n                    '|third_party/blink/renderer/modules/credentialmanager/.*otp'\\\n                    '|third_party/blink/public/mojom/sms/'\\\n                    '|content/browser/.*sms/'\\\n                    '|chrome/browser/sharing/.*sms',\n    },\n    'webrtc_browser_tests': {\n      'filepath': 'chrome/browser/media/.*webrtc.*browsertest|'\\\n                  'content/browser/media/.*webrtc.*browsertest',\n    },\n    'website_settings': {\n      'filepath': 'chrome/browser/content_settings/'\\\n                  '|chrome/browser/ui/views/website_settings/'\\\n                  '|chrome/browser/ui/website_settings/'\\\n                  '|chrome/browser/privacy_sandbox/privacy_sandbox_settings'\\\n                  '|chrome/common/content_settings'\\\n                  '|components/content_settings/'\\\n                  '|services/network/cookie_settings',\n    },\n    'windows_sandboxing': {\n      'filepath': 'sandbox/win/',\n    },\n    'wm_state': {\n      'filepath': 'ash/wm/base_state.*|' \\\n                  'ash/wm/client_controlled_state.*|' \\\n                  'ash/wm/default_state.*|' \\\n                  'ash/wm/tablet_mode/tablet_mode_window_state.*'\n    },\n    'wpt_tools': {\n      'filepath': 'third_party/blink/web_tests/external/wpt/tools/',\n    },\n    'x11': {\n      'filepath': 'ui/base/x/'\n    },\n    'zlib': {\n      'filepath': 'third_party/zlib'\n    },\n    'zoom': {\n      'filepath': 'chrome/browser/ui/zoom/' \\\n                  '|components/ui/zoom/' \\\n                  '|content/browser/host_zoom_' \\\n                  '|content/browser/storage_partition_impl' \\\n                  '|content/public/browser/host_zoom_map.h' \\\n                  '|content/public/browser/storage_partition.h'\n    },\n  },\n\n  ##############################################################################\n  # Please keep alphabetical\n  ##############################################################################\n  'WATCHLISTS': {\n    'about_flags': ['asvitkine+watch@chromium.org',\n                    'jmedley+watch@chromium.org'],\n    'accelerators': ['jimmyxgong+watch-accelerators@chromium.org',\n                     'cambickel+watch-accelerators@google.com',\n                     'longbowei+watch-accelerators@google.com',\n                     'zhangwenyu+watch-accelerators@google.com',\n                     'michaelcheco+watch-accelerators@google.com'],\n    'accessibility': ['abigailbklein+watch@google.com',\n                      'akihiroota@chromium.org',\n                      'bicioglu+watch@google.com',\n                      'dtseng+watch@chromium.org',\n                      'je_julie.kim@chromium.org',\n                      'josiahk+watch@chromium.org',\n                      'kbabbitt@microsoft.com',\n                      'kyungjunlee+watcha11y@google.com',\n                      'nektar+watch@chromium.org',\n                      'yuzo+watch@chromium.org',\n                      'francisjp+watcha11y@google.com'],\n    'accessibility_component_extensions': ['anastasi+watch@google.com',\n                                           'bicioglu+watch@google.com',\n                                           'hirokisato+watch@chromium.org',\n                                           'katie+watch@chromium.org',\n                                           'shannc+watch@chromium.org'],\n    'accessibility_features_ash': ['bicioglu+watch@google.com',\n                                   'hirokisato+watch@chromium.org',\n                                   'katie+watch@chromium.org'],\n    'accessibility_minimal_core': ['aleventhal+watcha11y@chromium.org'],\n    'accessibility_reading': ['lwinston+watch-readinga11y@google.com',\n                              'trewin+watch@google.com'],\n    'accessibility_service': ['hirokisato+watch@chromium.org',\n                              'katie+watch@chromium.org'],\n    'add_to_homescreen': ['dominickn+watch-a2hs@chromium.org',\n                          'pkotwicz+watch@chromium.org',\n                          'webapks-watchlist@chromium.org'],\n    'agent_scheduling_group': ['blink-isolation-reviews@chromium.org',\n                               'chikamune+watch@chromium.org'],\n    'android_browser_controls': ['peilinwang+watch@google.com'],\n    'android_crash_reporting': ['asvitkine+watch@chromium.org',\n                                'wnwen+watch@chromium.org'],\n    'android_flags': ['hnakashima+watch@chromium.org'],\n    'android_infobars': ['dfalcantara+watch@chromium.org'],\n    'android_infra': ['agrieve+watch@chromium.org'],\n    'android_item_chooser_dialogs': [],\n    'android_lint': ['wnwen+watch@chromium.org'],\n    'android_omnibox': ['ender+watch@chromium.org'],\n    'android_pgo_arm64': ['wnwen+watch+pgo@chromium.org'],\n    'android_search_widget': ['tedchoc+watch@chromium.org',\n                              'yusufo+watch@chromium.org'],\n    'android_startup_metrics': ['pasko+watch@chromium.org'],\n    'android_studio': ['wnwen+watch@chromium.org',\n                       'nyquist+watch@chromium.org'],\n    'android_tab': ['dtrainor+watch@chromium.org'],\n    'android_toolbar': ['hanxi+watch@chromium.org'],\n    'android_toolbar_deps': ['jinsukkim+watch@chromium.org'],\n    'android_uma_settings': ['asvitkine+watch@chromium.org',\n                             'gayane+watch@chromium.org'],\n    'android_webapk': ['dominickn+watch-webapk@chromium.org',\n                       'mxcai+watch-webapk@chromium.org',\n                       'webapks-watchlist@chromium.org'],\n    'android_webview': ['android-webview-reviews@chromium.org'],\n    'android_webview_network_service': [],\n    'android_webview_webexposed': ['ashleynewson+watch-webexposed@chromium.org',\n                                   'peter+watch-webexposed@chromium.org'],\n    'app_service': ['dominickn+watch-app_service@chromium.org',\n                    'nancylingwang@chromium.org',\n                    'tsergeant+watch@chromium.org',\n                    'mxcai+watch-app_service@chromium.org'],\n    'app_service_protos': ['cros-reporting-team+watch@google.com',\n                           'vshenvi+watch@google.com'],\n    'app_shortcuts': ['dominickn+watch-app_shortcuts@chromium.org',\n                      'loyso+watch@chromium.org',\n                      'mgiuca+watch@chromium.org',\n                      'dmurph+watching-app_shortcuts@chromium.org',\n                      'webappwatch@microsoft.com'],\n    'apps': ['chromium-apps-reviews@chromium.org',\n             'dominickn+watch-apps@chromium.org',\n             'dmurph+watching-apps@chromium.org',\n             'webappwatch@microsoft.com'],\n    'apps_intent_helper': ['dominickn+watch-intent_helper@chromium.org',\n                           'mxcai+watch-intent-helper@chromium.org'],\n    'arc': ['hidehiko+watch@chromium.org',\n            'yhanada+watcharc@chromium.org',\n            'arc-reviews+chromium@google.com'],\n    'arc_auth': ['khmel+watch@chromium.org'],\n    'arc_compat_mode': ['toshikikikuchi+watch-compat@chromium.org'],\n    'arc_fileapi': ['alanding+watch@chromium.org',\n                    'djacobo+watch@chromium.org'],\n    'arc_ime': ['hirokisato+watch@chromium.org',\n                'yhanada+watch@chromium.org'],\n    'arc_mojom': ['hashimoto+watch@chromium.org'],\n    'arc_nearby_share': ['alanding+watch@chromium.org',\n                         'jackshira+watch-nearby-arc@google.com',\n                         'phshah+watch@chromium.org'],\n    'arc_net': ['cassiewang+watch-arc-net@google.com',\n                'chuweih+watch-arc-net@google.com',\n                'hugobenichi+watch-arc-net@google.com',\n                'jasongustaman+watch-arc-net@chromium.org'],\n    'arc_power': ['ejcaruso+watch@chromium.org'],\n    'ash_webui_common': ['gavinwill+watch-ash-webui-common@chromium.org',\n                         'jimmyxgong+watch-ash-webui-common@chromium.org'],\n    'ash_wm_desks': ['dandersson@chromium.org',\n                     'bicioglu@google.com'],\n    'assistive': ['croissant-eng+reviews@chromium.org'],\n    'attribution_reporting': ['apaseltiner+watch@chromium.org'],\n    'audio_service': ['marinaciocea+watch@chromium.org',\n                      'olka+watch@chromium.org',\n                      'zhangwenyu+watch@google.com'],\n    'audio_settings': ['gordonseto+audio-settings-watch@google.com',\n                       'michaelcheco+audio-settings-watch@google.com',\n                       'owenzhang+audio-settings-watch@google.com',\n                       'zhangwenyu+audio-settings-watch@google.com'],\n    'aura': ['sadrul@chromium.org'],\n    'aura_compositor': ['jbauman+watch@chromium.org'],\n    'autofill': ['rouslan+autofillwatch@chromium.org'],\n    'autofill_payments': ['armalhotra+autofillwatch@google.com',\n                          'feliciac+autofillwatch@google.com',\n                          'jsaul+autofillwatch@google.com',\n                          'shgar+autofillwatch@google.com',\n                          'siashah+autofillwatch@chromium.org',\n                          'siyua+autofillwatch@chromium.org',\n                          'vinnypersky+autofillwatch@google.com'],\n    'background_fetch': ['peter@chromium.org',\n                         'rayankans+watch@chromium.org',\n                         'nator+watch@chromium.org'],\n    'background_sync': ['iclelland+watch@chromium.org',\n                        'nator+watch@chromium.org',\n                        'peter@chromium.org',\n                        'rayankans+watch@chromium.org'],\n    'banners': ['dominickn+watch-banners@chromium.org',\n                'pkotwicz+watch@chromium.org'],\n    'base_allocator': ['wfh+watch@chromium.org',\n                       'lizeb+watch@chromium.org',\n                       'bartekn+watch@chromium.org'],\n    'base_android': ['agrieve+watch@chromium.org',\n                     'lizeb+watch@chromium.org',\n                     'nyquist+watch@chromium.org',\n                     'pasko+watch@chromium.org',\n                     'torne+watch@chromium.org',\n                     'yfriedman+watch@chromium.org'],\n    'base_memory': ['gavinp+memory@chromium.org'],\n    'base_scheduler': ['scheduler-bugs+base@chromium.org'],\n    'base_thread_pool': ['fdoray+watch@chromium.org',\n                         'gab+watch@chromium.org',\n                         'jessemckenna+watch@google.com',\n                         'robliao+watch@chromium.org'],\n    'base_win': ['grt+watch@chromium.org',\n                 'jessemckenna+watch@google.com',\n                 'robliao+watch@chromium.org',\n                 'wfh+watch@chromium.org'],\n    'battery_status': [],\n    'bfcache': ['bfcache-bugs@chromium.org',\n                'chikamune+watch@chromium.org'],\n    'binary_size': ['agrieve+watch@chromium.org'],\n    'blink': ['blink-reviews@chromium.org'],\n    'blink_accessibility': ['je_julie.kim@chromium.org',\n                            'kbabbitt@microsoft.com',\n                            'nektar@chromium.org',\n                            'blink-reviews-a11y@chromium.org'],\n    'blink_animation': ['alexis.menard@intel.com',\n                        'gerchiko@microsoft.com',\n                        'blink-reviews-animation@chromium.org'],\n    'blink_audio': ['hongchan@chromium.org', 'mjwilson@chromium.org', 'sinafirooz@chromium.org'],\n    'blink_battery_status': [],\n    'blink_bindings': ['blink-reviews-bindings@chromium.org', 'haraken@chromium.org'],\n    'blink_bindings_serialization': ['jbroman+watch@chromium.org'],\n    'blink_bluetooth': ['mattreynolds+watch@chromium.org',\n                        'odejesush+watch@chromium.org'],\n    'blink_clipboard': ['dcheng@chromium.org'],\n    'blink_common': ['kinuko+watch@chromium.org'],\n    'blink_controller': [],\n    'blink_css': ['alexis.menard@intel.com',\n                  'apavlov+blink@chromium.org',\n                  'blink-reviews-css@chromium.org'],\n    'blink_css_flexbox': ['cbiesinger@chromium.org'],\n    'blink_css_fragmentation_tests': ['mstensho@chromium.org'],\n    'blink_css_grid_layout': ['jfernandez@igalia.com',\n                              'obrufau@igalia.com'],\n    'blink_custom_elements': ['dominicc+watchlist@chromium.org'],\n    'blink_device_orientation': [],\n    'blink_devtools': ['devtools-reviews+blink@chromium.org'],\n    'blink_dom': ['blink-reviews-dom@chromium.org'],\n    'blink_dom_storage': ['dmurph+watching-domstorage@chromium.org'],\n    'blink_events': ['blink-reviews-events@chromium.org',\n                     'dtapuska+blinkwatch@chromium.org'],\n    'blink_fetch': ['gavinp+loader@chromium.org',\n                    'japhet@chromium.org',\n                    'loading-reviews+fetch@chromium.org'],\n    'blink_fileapi': ['kinuko+fileapi@chromium.org'],\n    'blink_frames': ['blink-reviews-frames@chromium.org'],\n    'blink_geolocation': [],\n    'blink_heap': ['haraken@chromium.org',\n                   'kouhei+heap@chromium.org',\n                   'oilpan-reviews+blink@chromium.org'],\n    'blink_html': ['blink-reviews-html@chromium.org'],\n    'blink_htmlparser': ['kinuko+watch@chromium.org',\n                         'loading-reviews+parser@chromium.org'],\n    'blink_image_codecs': ['cblume+imagecodecs@chromium.org',\n                           'mbarowsky+watch-image-codecs@chromium.org'],\n    'blink_indexed_db': ['dmurph+watching-idb@chromium.org',\n                         'enne+idb@chromium.org'],\n    'blink_input': ['dtapuska+blinkwatch@chromium.org'],\n    'blink_layers': ['blink-layers+watch@chromium.org'],\n    'blink_layout': ['blink-reviews-layout@chromium.org',\n                     'zoltan@webkit.org'],\n    'blink_layout_ng': ['glebl+reviews@chromium.org',\n                        'dgrogan+ng@chromium.org',\n                        'atotic+reviews@chromium.org',\n                        'lchoi+reviews@chromium.org',\n                        'xiaochengh+watch@chromium.org'],\n    'blink_loader': ['gavinp+loader@chromium.org',\n                     'japhet@chromium.org',\n                     'loading-reviews@chromium.org'],\n    'blink_media': ['feature-media-reviews@chromium.org',\n                    'eric.carlson@apple.com',\n                    'srirama.m@samsung.com'],\n    'blink_media_queries': ['kenneth.christiansen@gmail.com'],\n    'blink_mediastream': ['tommyw+watchlist@chromium.org'],\n    'blink_navigator_content_utils': ['gyuyoung.kim@chromium.org'],\n    'blink_out_of_process_frames': ['dcheng@chromium.org'],\n    'blink_paint' : ['blink-reviews-paint@chromium.org'],\n    'blink_paintworklet' : ['xidachen@chromium.org'],\n    'blink_peerconnection' : ['video-networking+chromium-reviews@google.com'],\n    'blink_permissions': ['permissions-reviews@chromium.org'],\n    'blink_platform': ['kinuko+watch@chromium.org'],\n    'blink_platform_graphics': ['blink-reviews-platform-graphics@chromium.org',\n                                'drott+blinkwatch@chromium.org',\n                                'dschulze@chromium.org',\n                                'fmalita+watch@chromium.org',\n                                'fserb+watch@chromium.org',\n                                'schenney@chromium.org'],\n    'blink_platform_peerconnection_video': ['hiroh@chromium.org'],\n    'blink_preloadScanner': ['yoavweiss@chromium.org'],\n    'blink_prerender': ['gavinp+prerender@chromium.org',\n                        'prerendering-reviews@chromium.org',\n                        'yoavweiss@chromium.org'],\n    'blink_public_api': ['blink-reviews-api@chromium.org'],\n    'blink_quota': ['kinuko+fileapi@chromium.org'],\n    'blink_scheduler': ['chikamune+watch@chromium.org',\n                        'scheduler-bugs+blink@chromium.org'],\n    'blink_scheduling_api': ['web-scheduling-api-reviews@chromium.org'],\n    'blink_script': ['kouhei+script@chromium.org',\n                     'hiroshige+script@chromium.org', 'dom+watch@chromium.org'],\n    'blink_scroll': ['bokan@chromium.org'],\n    'blink_service_worker': ['horo+watch@chromium.org',\n                             'kinuko+serviceworker@chromium.org',\n                             'nhiroki@chromium.org',\n                             'serviceworker-reviews@chromium.org',\n                             'shimazu+serviceworker@chromium.org'],\n    'blink_service_worker_tests': ['kenjibaheux+watch@chromium.org'],\n    'blink_spellcheck' : ['xiaochengh+watch@chromium.org'],\n    'blink_streams': ['ricea+watch@chromium.org'],\n    'blink_style': ['blink-reviews-style@chromium.org'],\n    'blink_svg': ['dschulze@chromium.org',\n                  'fmalita+watch@chromium.org',\n                  'fs@opera.com',\n                  'kouhei+svg@chromium.org',\n                  'pdr+svgwatchlist@chromium.org',\n                  'schenney@chromium.org'],\n    'blink_track': ['eric.carlson@apple.com',\n                    'fs@opera.com',\n                    'glenn@chromium.org',\n                    'silviapf@chromium.org',\n                    'srirama.m@samsung.com'],\n    'blink_viewport_interaction': ['kenneth.christiansen@gmail.com',\n                                   'bokan@chromium.org'],\n    'blink_w3ctests': ['blink-reviews-w3ctests@chromium.org'],\n    'blink_webp': ['jzern@chromium.org',\n                   'urvang@chromium.org',\n                   'mbarowsky+watch-blink-webp@chromium.org'],\n    'blink_websockets': ['yhirano+watch@chromium.org',\n                         'ricea+watch@chromium.org'],\n    'blink_workers': ['blink-worker-reviews@chromium.org',\n                      'horo+watch@chromium.org',\n                      'kinuko+worker@chromium.org',\n                      'shimazu+worker@chromium.org'],\n    'blink_wtf': ['blink-reviews-wtf@chromium.org'],\n    'blink_xml': ['dominicc+watchlist@chromium.org'],\n    'borealis': ['borealis-reviews+watch@google.com'],\n    'bottombar': ['donnd+watch@chromium.org',\n                  'mdjones+watch@chromium.org'],\n    'browser_components': ['browser-components-watch@chromium.org'],\n    'browser_compositor': ['vollick@chromium.org'],\n    'browser_manager': ['elkurin+watch@chromium.org'],\n    'browser_scheduler': ['scheduler-bugs+browser@chromium.org'],\n    'browsing_data': ['dullweber+watch@chromium.org',\n                      'msramek+watch@chromium.org'],\n    'cast_2_class': ['cros-edu-eng+cl@google.com'],\n    'cast_certificate': ['dougsteed+watch@chromium.org',\n                         'mfoltz+watch@chromium.org',\n                         'ryanchung+watch@chromium.org'],\n    'cast_channel': ['mfoltz+watch@chromium.org',\n                     'ryanchung+watch@chromium.org'],\n    'cast_streaming': ['jasonroberts+watch@google.com',\n                       'jophba+watch@chromium.org',\n                       'mfoltz+watch@chromium.org'],\n    'cc': ['cc-bugs@chromium.org'],\n    'cc-animation': ['gerchiko@microsoft.com'],\n    'cc-display': ['penghuang+viz@chromium.org'],\n    'cc-scheduler': ['scheduler-bugs+cc@chromium.org'],\n    'certificate_transparency': ['jdeblasio+watch@chromium.org',\n                                 'martijn+crwatch@martijnc.be',\n                                 'rsleevi+watch@chromium.org'],\n    'chrome_camera_app': ['chromeos-camera-app-eng@google.com'],\n    'chrome_elf': ['caitkp+watch@chromium.org',\n                   'pmonette+watch@chromium.org'],\n    'chrome_grc': ['chrome-grc-reviews@chromium.org'],\n    'chrome_intelligence': ['chrome-intelligence-reviews@chromium.org',\n                            'chrome-intelligence-team-chromium-cl-reviews@google.com'],\n    'chrome_intelligence_feature_protos': ['moqati-team+chromium-watchlist@google.com'],\n    'chrome_obsolete_system': ['chromium-watchlist+obsolete@island.io'],\n    'chrome_performance_manager': ['performance-manager-reviews@chromium.org'],\n    'chromecast': ['halliwell+watch@chromium.org',\n                   'lcwu+watch@chromium.org'],\n    'chromecast_public': ['gfhuang+watch@chromium.org'],\n    'chromedriver': ['mathias@chromium.org'],\n    'chromeos': ['oshima+watch@chromium.org'],\n    'chromeos_attestation': ['dkrahn+watch@chromium.org'],\n    'chromeos_bluetooth': ['chadduffin+watch-bluetooth@chromium.org',\n                          'gordonseto+watch-bluetooth@google.com',\n                          'hansberry+watch-bluetooth@chromium.org',\n                          'hsuregan+watch-bluetooth@chromium.org',\n                          'jackshira+watch-bluetooth@google.com',\n                          'jiajunz+watch-bluetooth@google.com',\n                          'khorimoto+watch-bluetooth@chromium.org',\n                          'nikhilcn+watch-bluetooth@google.com',\n                          'tjohnsonkanu@google.com'],\n    'chromeos_cellular': ['chadduffin+watch-cellular@chromium.org',\n                          'ejcaruso+watch-cellular@chromium.org',\n                          'gordonseto+watch-cellular@google.com',\n                          'hsuregan+watch-cellular@chromium.org',\n                          'jiajunz+watch-cellular@google.com',\n                          'khorimoto+watch-cellular@chromium.org',\n                          'nikhilcn@google.com',\n                          'tjohnsonkanu@google.com'],\n    'chromeos_login': ['tbarzic+watch@chromium.org',\n                      'rrsilva+watch-chromium@google.com'],\n    'chromeos_media_app': ['cros-essential-apps-dev-watch@chromium.org'],\n    'chromeos_net': ['chadduffin+watch-network@chromium.org',\n                     'ejcaruso+watch-network@chromium.org',\n                     'gordonseto+watch-network@google.com',\n                     'hsuregan+watch-network@chromium.org',\n                     'jackshira+watch-network@google.com',\n                     'jiajunz+watch-network@google.com',\n                     'jonmann+watch-network@chromium.org',\n                     'khorimoto+watch-network@chromium.org',\n                     'nikhilcn@google.com',\n                     'stevenjb+watch-network@chromium.org',\n                     'tjohnsonkanu+watch-network@google.com'],\n    'chromeos_tast_control': ['chromeos-engprod+watch@google.com',\n                              'chrome-os-gardeners+watch@google.com'],\n    'chromeos_webui': ['rrsilva+watch-chromium@google.com'],\n    'chromeos_wifi_sync': ['ajayramamurthy+watch@google.com',\n                           'jackshira+watch-wifi-sync@google.com',\n                           'jonmann+watch@chromium.org',\n                           'stevenjb+watch@chromium.org'],\n    'chrometto_proto_extensions': ['ddrone+watch@google.com'],\n    'chromevox': ['akihiroota@chromium.org',\n                  'anastasi+watch@google.com',\n                  'dtseng+chromevox@chromium.org',\n                  'josiahk+watch@chromium.org',\n                  'katie+watch@chromium.org'],\n    'clang': ['hans@chromium.org'],\n    'clang_update': ['chromium-toolchains@engflow.com',\n                     'dcheng@chromium.org',\n                     'eugenis+clang@chromium.org',\n                     'glider+clang@chromium.org',\n                     'hans@chromium.org',\n                     'ibiryukov@google.com',\n                     'pcc@chromium.org',\n                     'rnk@chromium.org',\n                     'thakis@chromium.org',\n                     'thestig@chromium.org',\n                     'ukai+watch@chromium.org'],\n    'client_hints': ['victortan@chromium.org',\n                     'miketaylr@chromium.org'],\n    'clipboard': ['dcheng@chromium.org'],\n    'commerce': ['ayman+watch@chromium.org',\n                'mdjones+watch@chromium.org',\n                'yuezhanggg+watch@chromium.org'],\n    'components_deps': ['droger+watchlist@chromium.org'],\n    'compose': ['dewittj+watch@chromium.org',\n                'petewil@chromium.org'],\n    'compositor_animator': ['mdjones+watch@chromium.org'],\n    'compute_pressure': ['arnaud.mandy@intel.com',\n                         'wei4.wang@intel.com',\n                         'kenneth.r.christiansen@intel.com'],\n    'content_bluetooth': ['mattreynolds+watch@chromium.org'],\n    'content_index': ['rayankans+watch@chromium.org'],\n    'content_loader': ['loading-reviews@chromium.org'],\n    'content_security_policy':['antoniosartori+watch-csp@chromium.org',\n                               'arthursonzogni+watch-csp@chromium.org',\n                               'mkwst+watch-csp@chromium.org'],\n    'content_shell': ['peter@chromium.org'],\n    'content_worker': ['blink-worker-reviews@chromium.org',\n                       'kinuko+watch@chromium.org'],\n    'contextual_search': ['donnd+watch@chromium.org',\n                          'twellington+watch@chromium.org',\n                          'gangwu+watch@chromium.org'],\n    'core_timing': ['core-timing-reviews@chromium.org'],\n    'core_web_vitals_plm': ['core-web-vitals-plm-reviews@chromium.org'],\n    'core_web_vitals_wpt': ['chrome-speed-metrics-core+watchlist@google.com',\n                            'lighthouse-eng-external+watch-speed-metrics@google.com'],\n    'courgette': ['huangs+watch@chromium.org',\n                  'wfh+watch@chromium.org'],\n    'cq': ['cq-config-changes@chromium.org',\n           'shinyak+cc@chromium.org',\n           'tikuta+cc@chromium.org',\n           'ukai+cc@chromium.org',\n           'yyanagisawa+cc@chromium.org'],\n    'creator':['jeffreycohen+watch-creator@chromium.org',\n              'sophey+watch-creator@chromium.org',\n              'wiss+watch-creator@chromium.org',\n              'wry+watch-creator@chromium.org',],\n    'cros_commercial_enrollment': ['asumaneev+watch@google.com'],\n    'cros_commercial_policy': ['enterprise-policy-review@google.com'],\n    'cros_commercial_policy_proto': ['vsavu+watch@google.com'],\n    'cros_reporting': ['cros-reporting-reviews@google.com'],\n    'crosapi': ['ffred+watch@chromium.org', 'tluk+watch@chromium.org'],\n    'crosapi_mojom': ['elkurin+watch@chromium.org'],\n    'crostini': ['crostini-ui@chromium.org'],\n    'cups_printing': ['print-reviews+cups@chromium.org',\n                      'cros-printing-reviews@google.com'],\n    'cursor': ['hferreiro@igalia.com'],\n    'custom_handlers': ['jfernandez@igalia.com'],\n    'custom_proxy': ['lbendig@opera.com',\n                     'wdzierzanowski@opera.com'],\n    'custom_tabs': ['lizeb+watch-custom-tabs@chromium.org',\n                    'peter@chromium.org'],\n    'dark_mode' : ['prashant@chromium.org',\n                   'pnevase@microsoft.com'],\n    'data_decoder': ['mbarowsky+watch-data-decoder@chromium.org'],\n    'dbus': ['hashimoto+watch@chromium.org'],\n    'desktop_in_product_help': ['dfried+watch@chromium.org',\n                                'mickeyburks+watch@chromium.org',\n                                'estalin+watch@chromium.org'],\n    'device_bluetooth': ['mattreynolds+watch@chromium.org'],\n    'device_bound_sessions': ['drubery+watch@chromium.org'],\n    'device_chooser': ['mattreynolds+watch@chromium.org',\n                       'odejesush+watch@chromium.org'],\n    'devtools': ['devtools-reviews@chromium.org'],\n    'diagnostics_mojo': ['ashleydp+watch-diagnostics_mojo@google.com',\n                         'gavindodd+watch-diagnostics_mojo@google.com',\n                         'michaelcheco+watch-diagnostics_mojo@google.com',\n                         'dpad+watch-diagnostics_mojo@google.com',\n                         'zhangwenyu+watch-diagnostics_mojo@google.com'],\n    'diagnostics_ui': ['gavinwill+diagnostics-watch@chromium.org',\n                       'michaelcheco+diagnostics-watch@google.com',\n                       'gavindodd+diagnostics-watch@google.com',\n                       'ashleydp+diagnostics-watch@google.com',\n                       'dpad+diagnostics-watch@google.com',\n                       'zhangwenyu+diagnostics-watch@google.com'],\n    'dips': ['jdh+watch-dips@chromium.org',\n             'njeunje+watch-dips@chromium.org',\n             'amaliev+watch-dips@chromium.org',\n             'rtarpine+watch-dips@chromium.org',\n             'wanderview+watch-dips@chromium.org'],\n    'discardable_memory': ['thiabaud+watch-discardable-memory@google.com'],\n    'disk_cache': ['gavinp+disk@chromium.org'],\n    'display': ['zhangwenyu+watch@google.com'],\n    'dom_storage': ['dmurph+watchingdomstorage@chromium.org'],\n    'download': ['dtrainor+watch@chromium.org'],\n    'download_bubble': ['xinghuilu+watch@chromium.org',\n                        'drubery+watch@chromium.org',\n                        'chlily+watch@chromium.org'],\n    'downloads_ui': ['dtrainor+watch@chromium.org',\n                     'drubery+watch@chromium.org',\n                     'chlily+watch@chromium.org'],\n    'drive_resource_metadata': ['hashimoto+watch@chromium.org'],\n    'eche': ['ajayramamurthy+watch-eche@google.com',\n             'crisrael+watch-eche@google.com',\n             'jackshira+watch-eche@google.com',\n             'jonmann+watch-eche@chromium.org',\n             'pushi+watch-eche@google.com'],\n    'eme': ['eme-reviews@chromium.org'],\n    'enterprise_data_protection': ['dpr-eng+chromium-cl@google.com'],\n    'exo': ['crostini-ui+exo@chromium.org',\n            'yhanada+watchexo@chromium.org'],\n    'explore_sites': ['chili+watch@chromium.org',\n                      'dimich+watch@chromium.org',\n                      'freedjm+watch@chromium.org'],\n    'extension': ['chromium-apps-reviews@chromium.org',\n                  'extensions-reviews@chromium.org'],\n    'feed': ['dewittj+watch@chromium.org',\n             'dimich+watch@chromium.org',\n             'harringtond+watch@chromium.org',\n             'petewil+watch@chromium.org',\n             'iwells+watch@chromium.org'],\n    'fileapi': ['kinuko+fileapi@chromium.org'],\n    'filebrowse': ['rginda+watch@chromium.org'],\n    'filesapp': ['filesapp-reviews@chromium.org'],\n    'firmware_update': ['jimmyxgong+firmware-watch@chromium.org',\n                        'michaelcheco+firmware-watch@google.com'],\n    'float': ['toshikikikuchi+watch-float@chromium.org'],\n    'freetype_update': ['drott+watch@chromium.org',\n                        'thestig@chromium.org'],\n    'fsp': ['mtomasz+watch@chromium.org'],\n    'fuchsia': ['fuchsia-reviews@chromium.org',\n                'zijiehe@google.com'],\n    'full_restore': ['nancylingwang@chromium.org'],\n    'fuzzing': ['fuzzing+watch@chromium.org'],\n    'gamepad': ['mattreynolds+watch@chromium.org'],\n    'gcm': ['peter@chromium.org'],\n    'gemini_app': ['dmblack+watch@google.com',\n                   'xiaohuic+watch@chromium.org'],\n    'generic_sensor': ['mattreynolds+watch@chromium.org',\n                       'rijubrata.bhaumik@intel.com',\n                       'wanming.lin@intel.com'],\n    'geolocation': ['mattreynolds+watch@chromium.org'],\n    'gfx_geometry': ['cc-bugs@chromium.org'],\n    'gfx_image': ['rsesek+watch@chromium.org'],\n    'global_media_controls': ['steimel+watch-gmc@chromium.org'],\n    'gn': ['agrieve+watch@chromium.org',\n           'dpranke@chromium.org'],\n    'google_bottom_bar': ['gbb-cct-eng+cls@google.com'],\n    'gpu_passthrough_cmd_decoder': ['geofflang+watch@chromium.org'],\n    'guest_view': ['mcnee@chromium.org',\n                   'wjmaclean@chromium.org'],\n    'gwp_asan': ['mpdenton+watch@chromium.org',\n                 'glazunov+watch@chromium.org'],\n    'hashprefix_realtime': ['thefrog+watch@chromium.org'],\n    'headless': ['headless-reviews@chromium.org'],\n    'heap_mojo': ['chikamune+watch@chromium.org'],\n    'holding_space': ['tote-eng+reviews@google.com'],\n    'i18n': ['jshin+watch@chromium.org'],\n    'incident_reporting': ['grt+watch@chromium.org'],\n    'incognito': ['roagarwal+watch@chromium.org'],\n    'indexed_db': ['dmurph+watching-idb@chromium.org',\n                   'enne+idb@chromium.org'],\n    'input': ['dtapuska+chromiumwatch@chromium.org'],\n    'input_device_settings': ['dpad+watch-input-device-settings@google.com',\n                              'michaelcheco+watch-input-device-settings@google.com',\n                              'wangdanny+watch-input-device-settings@google.com',\n                              'yyhyyh+watch-input-device-settings@google.com'],\n    'input_devices': ['spang+watch@chromium.org'],\n    'installable': ['dominickn+watch-installable@chromium.org',\n                    'dmurph+watching-installable@chromium.org',\n                    'webappwatch@microsoft.com'],\n    'installer_linux': ['mmoss@chromium.org'],\n    'installer_win': ['grt+watch@chromium.org',\n                      'wfh+watch@chromium.org'],\n    'ios': ['ios-reviews@chromium.org'],\n    'ios_chrome': ['ios-reviews+chrome@chromium.org',\n                   'marq+watch@chromium.org'],\n    'ios_clean': ['ios-reviews+clean@chromium.org',\n                  'marq+scrutinize@chromium.org'],\n    'ios_credential_provider': ['rkgibson+watch@chromium.org'],\n    'ios_flags': ['noyau+watch@chromium.org'],\n    'ios_ntp': ['thegreenfrog+watch@chromium.org'],\n    'ios_transactions': ['tmartino+transactions-watch@chromium.org'],\n    'ios_web': ['ios-reviews+web@chromium.org'],\n    'ios_web_view': ['ios-web-view-eng+reviews@google.com'],\n    'ios_widget_kit': ['rkgibson+watch@chromium.org'],\n    'ip_protection': ['aakallam+watch@chromium.org',\n                      'awillia@chromium.org',\n                      'brgoldstein@google.com',\n                      'djmitche@chromium.org',\n                      'ciaramcmullin@google.com'],\n    'ipcz': ['andreaorru+watch@chromium.org'],\n    'isolated_web_apps_apis': ['greengrape@google.com',\n                               'rmcelrath+watch@chromium.org',\n                               'simonha@google.com'],\n    'isolated_web_apps_core': ['greengrape@google.com',\n                               'rmcelrath+watch@chromium.org',\n                               'simonha@google.com'],\n    'isolated_web_apps_unmanaged_install': ['greengrape@google.com',\n                                            'rmcelrath+watch@chromium.org',\n                                            'simonha@google.com'],\n    'kiosk': ['chromeos-kiosk-eng+watch@google.com'],\n    'language': ['language-reviews@chromium.org'],\n    'libaom': ['fgalligan@chromium.org',\n               'jianj@chromium.org',\n               'jzern@chromium.org',\n               'marpan@chromium.org',\n               'mbonadei@chromium.org'],\n    'libvpx': ['fgalligan@chromium.org',\n               'jianj@chromium.org',\n               'jzern@chromium.org',\n               'marpan@chromium.org',\n               'mbonadei@chromium.org'],\n    'libwebp': ['jzern@chromium.org',\n                'urvang@chromium.org'],\n    'libxml_xslt': ['dominicc+watchlist@chromium.org'],\n    'linux_sandboxing': ['mpdenton+watch@chromium.org',\n                         'rsesek+watch@chromium.org'],\n    'linux_seccomp_bpf': ['mpdenton+watch@chromium.org',\n                          'rsesek+watch@chromium.org'],\n    'lookalikes': ['jdeblasio+watch@chromium.org'],\n    'mac' : ['mac-reviews@chromium.org'],\n    'manifest': ['dominickn+watch-manifest@chromium.org',\n                 'dmurph+watching-manifest@chromium.org',\n                 'webappwatch@microsoft.com'],\n    'media': ['feature-media-reviews@chromium.org'],\n    'media_capture_from_element': ['emircan+watch+capturefromdom@chromium.org'],\n    'media_controls': ['steimel+watch-mediacontrols@chromium.org',\n                       'shihken@microsoft.com'],\n    'media_galleries': ['thestig@chromium.org',\n                        'tommycli@chromium.org'],\n    'media_gpu_cros': ['chromeos-gfx-video-reviews@google.com',\n                       'media-cros-reviews@chromium.org'],\n    'media_gpu_vaapi': ['vaapi-reviews@chromium.org'],\n    'media_gpu_win': ['media-win-reviews@chromium.org'],\n    'media_recorder': ['emircan+watch+mediarecorder@chromium.org',\n                       'mcasas+mediarecorder@chromium.org'],\n    'media_remoting': ['erickung+watch@chromium.org',\n                       'jophba+watch@chromium.org',\n                       'mfoltz+watch@chromium.org'],\n    'media_router': ['mfoltz+watch@chromium.org'],\n    'media_webrtc': ['alessiob@chromium.org',\n                     'peah@chromium.org',\n                     'saza@chromium.org'],\n    'message_loop': ['sadrul@chromium.org'],\n    'metrics': ['asvitkine+watch@chromium.org',\n                'chromiummetricswatch@microsoft.com'],\n    'metrics_metadata_files': ['asvitkine+watchxml@chromium.org',\n                               'chromium-metrics-reviews@google.com'],\n    'metrics_perf': ['cwp-reviews+chromium@google.com'],\n    'midi': ['toyoshim+midi@chromium.org'],\n    'minidump_tests': ['bsheedy@chromium.org'],\n    'multi_apps': ['giovax+watch@chromium.org'],\n    'multidevice': ['ajayramamurthy+watch-multidevice@google.com',\n                    'hansberry+watch-multidevice@chromium.org',\n                    'jackshira+watch-multidevice@google.com',\n                    'joeantonetti+watch-multidevice@google.com',\n                    'jonmann+watch-multidevice@chromium.org'],\n    'multipaste': ['andrewxu+watch-multipaste@google.com',\n                   'dmblack+watch-multipaste@google.com',\n                   'multipaste-eng+reviews@google.com'],\n    'nacl': ['native-client-reviews@googlegroups.com'],\n    'native_client_sdk': ['binji+watch@chromium.org',\n                          'sbc@chromium.org'],\n    'navigation': ['alexmos+watch@chromium.org',\n                   'creis+watch@chromium.org',\n                   'navigation-cc+reviews@chromium.org'],\n    'nearby': ['ajayramamurthy+watch-nearby@google.com',\n               'crisrael+watch-nearby@google.com',\n               'dclasson+watch-nearby@google.com',\n               'hais+watch-nearby@google.com',\n               'hansberry+watch-nearby@chromium.org',\n               'hansenmichael+watch-nearby@google.com',\n               'jackshira+watch-nearby@google.com',\n               'pushi+watch-nearby@google.com',\n               'suetfei+watch-nearby@google.com',\n               'xlythe+watch-nearby@google.com'],\n    'nearby_presence': ['ajayramamurthy+watch-presence@google.com',\n                        'akingsb+watch-presence@google.com',\n                        'crisrael+watch-presence@google.com',\n                        'hansberry+watch-presence@chromium.org',\n                        'jackshira+watch-presence@google.com',\n                        'julietlevesque+watch-presence@google.com'],\n    'net': ['net-reviews@chromium.org'],\n    'net_base': ['bnc+watch@chromium.org'],\n    'net_http2': ['bnc+watch@chromium.org'],\n    'net_log': ['bnc+watch@chromium.org'],\n    'net_server': ['ricea+watch@chromium.org'],\n    'net_spdy': ['bnc+watch@chromium.org'],\n    'net_websockets': ['ricea+watch@chromium.org'],\n    'netinfo': ['jkarlin+watch@chromium.org'],\n    'network_service': ['network-service-reviews@chromium.org'],\n    'nfc': ['mattreynolds+watch@chromium.org',\n            'rijubrata.bhaumik@intel.com'],\n    'notifications': ['peter@chromium.org'],\n    'nqe': ['tbansal+watch-nqe@chromium.org'],\n    'ntp_snippets': ['ntp-dev+reviews@chromium.org'],\n    'ntp_tiles': ['ntp-dev+reviews@chromium.org'],\n    'offline_pages': ['chili+watch@chromium.org',\n                      'dimich+watch@chromium.org',\n                      'fgorski+watch@chromium.org'],\n    'omnibox_desktop': ['jdonnelly+watch@chromium.org',\n                        'mahmadi+watch@chromium.org'],\n    'origin_trials': ['chasej+watch@chromium.org',\n                      'iclelland+watch@chromium.org'],\n    'os_crypt': ['wfh+watch@chromium.org'],\n    'os_feedback_ui': ['ashleydp+feedback-watch@google.com',\n                       'cambickel+feedback-watch@google.com',\n                       'longbowei+feedback-watch@google.com',\n                       'wangdanny+feedback-watch@google.com',\n                       'xiangdongkong+feedback-watch@google.com',\n                       'yyhyyh+feedback-watch@google.com',\n                       'zhangwenyu+feedback-watch@google.com'],\n    'ozone': ['ozone-reviews@chromium.org'],\n    'ozone_fuchsia': ['dworsham@google.com',\n                      'emircan@google.com',\n                      'fuchsia-reviews@chromium.org',\n                      'rjkroege@chromium.org',\n                      'spang+watch@chromium.org'],\n    'page_info' : ['permissions-reviews@chromium.org'],\n    'page_load_metrics' : ['bmcquade+watch@chromium.org',\n                           'csharrison+watch@chromium.org',\n                           'loading-reviews+metrics@chromium.org',\n                           'speed-metrics-reviews@chromium.org'],\n    'page_load_metrics_abandoned_navigations': ['suzukikeita+watch@chromium.org'],\n    'panels': ['dimich@chromium.org',\n               'jennb@chromium.org',\n               'jianli@chromium.org'],\n    'partition_alloc': ['haraken@chromium.org',\n                        'lizeb+pa@chromium.org',\n                        'bartekn+watch@chromium.org'],\n    'password_manager': ['gcasto+watchlist@chromium.org',\n                         'vasilii+watchlistpasswordmanager@chromium.org'],\n    'payments': ['rouslan+payments@chromium.org',\n                 'gogerald+paymentswatch@chromium.org',\n                 'npnavarro+paymentswatch@chromium.org'],\n    'pdf': ['pdf-reviews@chromium.org'],\n    'pdf_ocr': ['kyungjunlee+watch@google.com',\n                'rhalavati+watch@chromium.org'],\n    'pepper_api': ['binji+watch@chromium.org',\n                   'bradnelson+warch@chromium.org',\n                   'ihf+watch@chromium.org',\n                   'teravest+watch@chromium.org'],\n    'permissions': ['dominickn+watch-permissions@chromium.org',\n                    'permissions-reviews@chromium.org'],\n    'permissions_policy': ['loonybear@chromium.org',\n                           'iclelland+watch@chromium.org',\n                           'jmedley+watch@chromium.org'],\n    'phonehub': ['ajayramamurthy+watch-phonehub@google.com',\n                 'crisrael+watch-phonehub@google.com',\n                 'hansberry+watch-phonehub@chromium.org',\n                 'jackshira+watch-phonehub@google.com',\n                 'jonmann+watch-phonehub@chromium.org',\n                 'joeantonetti+watch-phonehub@google.com',\n                 'pushi+watch-phonehub@google.com'],\n    'picture_in_picture': ['beaufort.francois+pip@gmail.com'],\n    'plugin_metadata': ['wfh+watch@chromium.org'],\n    'plus_addresses': ['mreichhoff+watch-plus_addresses@chromium.org',\n             'kaklilu+watch-plus_addresses@chromium.org',\n             'bcb+watch-plus_addresses@chromium.org',\n             'marimatthew+watch-plus_addresses@google.com',\n             'minap+watch-plus_addresses@google.com',\n             'jkeitel+watch-plus_addresses@google.com'],\n    'popup_blocker': ['csharrison+watch-popups@chromium.org'],\n    'precache': ['wifiprefetch-reviews@google.com'],\n    'prefetch_proxy': ['marcinjb+p4watch@google.com',\n                       'spelchat+chromereviews@google.com'],\n    'prerender': ['gavinp+prer@chromium.org',\n                  'prerendering-reviews@chromium.org',\n                  'tburkard+watch@chromium.org'],\n    'presentation': ['mfoltz+watch@chromium.org'],\n    'preview_features': ['chrome-lite-pages+watch@google.com'],\n    'print_preview': ['print-reviews+preview@chromium.org'],\n    'privacy_budget': ['antoniosartori+watch-privacy_budget@chromium.org'],\n    'privacy_guide_desktop': ['rainhard+watch@chromium.org'],\n    'private_aggregation': ['alexmt+watch@chromium.org'],\n    'profile_keyed_service': ['rsult@google.com'],\n    'psm_libs': ['amraboelkher+watch@chromium.org'],\n    'push_messaging': ['peter@chromium.org'],\n    'quick_answers': ['croissant-eng+reviews@chromium.org'],\n    'related_website_sets': ['cfredric+watch@chromium.org'],\n    'relaunch_notification': ['grt+watch@chromium.org'],\n    'remoteplayback': ['mfoltz+watch@chromium.org'],\n    'remoting': ['chromoting-reviews@chromium.org'],\n    'rgb_kbd': ['michaelcheco+watch-rgb-kbd@google.com',\n                'jimmyxgong+watch-rgb-kbd@chromium.org',\n                'dpad+watch-rgb-kbd@google.com'],\n    'rlz_id': ['gab+watch@chromium.org',\n               'robertshield+watch@chromium.org'],\n    'runtime_enabled_features': ['jmedley+watch@chromium.org'],\n    'safe_browsing': ['andysjlim+watch@chromium.org',\n                      'drubery+watch@chromium.org',\n                      'nwokedi+watch@chromium.org',\n                      'vakh+safe_browsing_watch@chromium.org',\n                      'xinghuilu+watch@chromium.org',\n                      'zackhan+watch@chromium.org'],\n    'sampling_profiler': ['wittman+watch@chromium.org'],\n    'scanning': ['gavinwill+scanning-watch@chromium.org'],\n    'screen_ai': ['rhalavati+watch@chromium.org'],\n    'search_engine_choice_screen': ['chrome-waffle-eng+watch@google.com'],\n    'search_prefetch': ['lingqi+watch@chromium.org'],\n    'security': ['security-watchlist@chromium.org'],\n    'security_interstitials': ['drubery+watch@chromium.org'],\n    'select_to_speak': ['katie+watch@chromium.org',\n                        'anastasi+watch@google.com'],\n    'send_tab_to_self': ['jeffreycohen+watch-send_tab_to_self@chromium.org',\n                         'tgupta+watch@chromium.org'],\n    'service_worker': ['horo+watch@chromium.org',\n                       'kinuko+serviceworker@chromium.org',\n                       'nhiroki@chromium.org',\n                       'serviceworker-reviews@chromium.org',\n                       'shimazu+serviceworker@chromium.org'],\n    'settings_os_settings': ['croissant-eng+reviews@chromium.org',\n                             'cros-settings+reviews@google.com'],\n    'settings_os_settings_languages':\n        ['mlcui+watch-os-settings-languages@google.com'],\n    'sharing': ['knollr+watch-sharing@chromium.org'],\n    'shimless_rma': ['jimmyxgong+watch-shimless@chromium.org',\n                     'michaelcheco+watch-shimless@google.com'],\n    'shortcut_customization_ui':\n        ['jimmyxgong+watch-shortcut-customization-ui@chromium.org',\n         'cambickel+watch-shortcut-customization-ui@google.com',\n         'longbowei+watch-shortcut-customization-ui@google.com'],\n    'siso_config': ['chrome-build-team@google.com'],\n    'site_engagement': ['dominickn+watch-engagement@chromium.org'],\n    'site_instance': ['ajwong+watch@chromium.org',\n                      'alexmos+watch@chromium.org',\n                      'creis+watch@chromium.org'],\n    'smartlock': ['bhartmire+watch-smartlock@google.com',\n                  'ajayramamurthy+watch-smartlock@google.com',\n                  'hansberry+watch-smartlock@chromium.org',\n                  'jackshira+watch-smartlock@google.com',\n                  'jasonrhee+watch-smartlock@google.com'],\n    'smb': ['cros-enterprise-lax+smbwatch@chromium.org'],\n    'source_idls': ['jmedley+watch@chromium.org'],\n    'speed_metrics_changelog': ['igrigorik@chromium.org',\n                                'kayce@chromium.org',\n                                'lighthouse-eng-external+watch-speed-metrics@google.com',\n                                'lighthouse-eng+watch-speed-metrics@google.com',\n                                'rviscomi@google.com',\n                                'web-devrel-vitals-team@google.com',\n                                'sullivan@chromium.org'],\n    'spellcheck': ['rlp+watch@chromium.org',\n                   'rouslan+spell@chromium.org'],\n    'splitview': ['toshikikikuchi+watch-splitview@chromium.org'],\n    'startup': ['nicolaso+watch@chromium.org',\n                'ydago+watch@chromium.org'],\n    'storage_access_api': ['cfredric+watch@chromium.org'],\n    'storage_service': ['dmurph+watching-storageservice@chromium.org'],\n    'structured_headers': ['iclelland+watch@chromium.org'],\n    'styleguide': ['danakj+watch@chromium.org',\n                   'jbroman+cpp@chromium.org',\n                   'wfh+watch@chromium.org'],\n    'styleguide_python': ['agrieve+watch@chromium.org',\n                          'wnwen+watch@chromium.org'],\n    'stylus_handwriting': ['alexmitra+watch@chromium.org'],\n    'subresource_filter': ['subresource-filter-reviews@chromium.org'],\n    'supervised_users': [],\n    'surface_layer_for_video': [ 'lethalantidote@chromium.org',\n                                 'liberato@chromium.org'],\n    'switch_access': ['anastasi+watch@google.com'],\n    'syncfs': ['kinuko+fileapi@chromium.org'],\n    'tab_alert_indicators': ['jophba+watch@chromium.org'],\n    'tab_capture': ['jophba+watch@chromium.org',\n                    'mfoltz+watch@chromium.org'],\n    'tab_contents': ['ajwong+watch@chromium.org',\n                     'avi@chromium.org',\n                     'creis+watch@chromium.org'],\n    'tab_group_infra' : [ 'chrome-tab-group-eng-leads+watch-infra@google.com' ],\n    'tab_interface': ['jinsukkim+watch@chromium.org'],\n    'tab_ui_and_start_surface': ['meiliang+watch@chromium.org',\n                                 'yuezhanggg+watch@chromium.org',\n                                 'wychen+watch@chromium.org',\n                                 'yusufo+watch@chromium.org',\n                                 'gogerald+watch@chromium.org',\n                                 'hanxi+watch@chromium.org',\n                                 'mattsimmons+watch@chromium.org',\n                                 'davidjm+watch@chromium.org'],\n    'tbmv2_metrics': ['speed-metrics-reviews@chromium.org'],\n    'telemetry': ['telemetry-reviews@chromium.org'],\n    'test_runner': ['einbinder+watch-test-runner@chromium.org'],\n    'tests': [],\n    'tether': ['bhartmire+watch-tether@google.com',\n               'ajayramamurthy+watch-tether@google.com',\n               'hansberry+watch-tether@chromium.org',\n               'jackshira+watch-tether@google.com',\n               'jasonrhee+watch-tether@google.com'],\n    'text_to_speech': ['dtseng+watch@chromium.org'],\n    'textinput': ['keithlee+watch@chromium.org',\n                  'nona+watch@chromium.org',\n                  'shuchen+watch@chromium.org',\n                  'suzhe@chromium.org',\n                  'tranbaoduy+watch@chromium.org',\n                  'yhanada+watch@chromium.org'],\n    'textinput_chromeos': ['keithlee+watch@chromium.org',\n                           'nona+watch@chromium.org',\n                           'shuchen+watch@chromium.org',\n                           'tranbaoduy+watch@chromium.org',\n                           'yhanada+watch@chromium.org'],\n    'third_party_conflicts': ['pmonette+watch@chromium.org'],\n    'timers': [],\n    'tools_win_chromeexts': ['robliao+watch@chromium.org'],\n    'touch_selection': ['ajith.v@samsung.com',\n                        'ajith.v@chromium.org'],\n    'tracing': ['tracing+reviews@chromium.org',\n                'wfh+watch@chromium.org',\n                'spang+watch@chromium.org'],\n    'traffic_annotation': ['nicolaso+watch@chromium.org',\n                           'ramyagopalan+watch@google.com',\n\t\t\t   'jorgelo+watch@chromium.org',\n\t\t\t   'crmullins+watch@chromium.org'],\n    'translate': ['translate-reviews@chromium.org'],\n    'turtledove': [],\n    'ui_compositor': ['cc-bugs@chromium.org'],\n    'ui_display_win': ['robliao+watch@chromium.org'],\n    'ui_resources': ['oshima+watch@chromium.org'],\n    'ui_strings': ['srahim+watch@chromium.org'],\n    'ui_views': ['robliao+watch@chromium.org',\n                 'sky+watch@chromium.org'],\n    'unified_consent': ['wfh+watch@chromuium.org'],\n    'usb': ['mattreynolds+watch@chromium.org',\n            'odejesush+watch@chromium.org'],\n    'user_education': ['cros-system-ui-productivity-eng+reviews@google.com'],\n    'version_assembly': ['caitkp+watch@chromium.org',\n                         'gab+watch@chromium.org'],\n    'video_capture': ['chfremer+watch@chromium.org',\n                      'rijubrata.bhaumik@intel.com'],\n    'virtual_keyboard': ['shend+watch@chromium.org',\n                         'tranbaoduy+watch@chromium.org',\n                         'yhanada+watchvk@chromium.org'],\n    'virtual_reality': ['feature-vr-reviews@chromium.org'],\n    'vscode_tooling': ['vscode-users@chromium.org'],\n    'vulkan': ['cblume+vulkan@chromium.org',\n               'penghuang+vulkan@chromium.org'],\n    'wake_lock': ['mattreynolds+watch@chromium.org'],\n    'wallpapers': ['croissant-eng+reviews@chromium.org'],\n    'wayland': ['max+watch-wayland@igalia.com',\n                'nickdiego+watch-chromium@igalia.com'],\n    'web_applications': ['dibyapal+watch-webapps@chromium.org',\n                         'dmurph+watching-webapps@chromium.org',\n                         'dominickn+watch-web_applications@chromium.org',\n                         'ericwilligers+watch-bmo@chromium.org',\n                         'kuragin+web-applications-cls@chromium.org',\n                         'loyso+watch@chromium.org',\n                         'mgiuca+watch@chromium.org',\n                         'phillis+watch@chromium.org',\n                         'webappwatch@microsoft.com',\n                         'zelin+watch-web_applications@chromium.org'],\n    'web_package': ['hayato+watch@chromium.org',\n                    'twifkak+watch@chromium.org'],\n    'web_share': ['mgiuca+watch@chromium.org'],\n    'webauthn': ['webauthn-reviews@chromium.org'],\n    'webcodecs': ['feature-media-reviews@chromium.org'],\n    'webgpu': ['cwallez+watch@chromium.org',\n               'kainino+watch@chromium.org'],\n    'webid': ['yigu+watch@chromium.org',\n              'cbiesinger@chromium.org',\n              'icer@chromium.org',\n              'npm+watch@chromium.org'],\n    'weblayer': ['cricke+watch@chromium.org',\n                 'rayankans+watch@chromium.org',\n                 'swestphal+watch@chromium.org'],\n    'weblayer_safe_browsing' : ['carlosil+watch@chromium.org'],\n    'weblayer_ssl' : ['carlosil+watch@chromium.org'],\n    'webnn': ['qjw@chromium.org', 'ningxin.hu@intel.com'],\n    'webotp': ['yigu+watch@chromium.org'],\n    'webrtc_browser_tests': ['phoglund+watch@chromium.org'],\n    'website_settings': ['dullweber+watch@chromium.org',\n                         'msramek+watch@chromium.org'],\n    'windows_sandboxing': ['wfh+watch@chromium.org'],\n    'wm_state': ['toshikikikuchi+watch-state@chromium.org'],\n    'wpt_tools': ['lpz+watch@chromium.org'],\n    'x11': ['sadrul@chromium.org'],\n    'zlib': ['cblume+zlib@chromium.org', 'hans@chromium.org'],\n    'zoom': ['wjmaclean@chromium.org'],\n  },\n}\n"
        },
        {
          "name": "android_webview",
          "type": "tree",
          "content": null
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "ash",
          "type": "tree",
          "content": null
        },
        {
          "name": "base",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_overrides",
          "type": "tree",
          "content": null
        },
        {
          "name": "buildtools",
          "type": "tree",
          "content": null
        },
        {
          "name": "cc",
          "type": "tree",
          "content": null
        },
        {
          "name": "chrome",
          "type": "tree",
          "content": null
        },
        {
          "name": "chromecast",
          "type": "tree",
          "content": null
        },
        {
          "name": "chromeos",
          "type": "tree",
          "content": null
        },
        {
          "name": "clank",
          "type": "commit",
          "content": null
        },
        {
          "name": "codelabs",
          "type": "tree",
          "content": null
        },
        {
          "name": "codereview.settings",
          "type": "blob",
          "size": 0.2744140625,
          "content": "# This file is used by git-cl to get repository specific information.\nPROJECT: chromium\nGERRIT_HOST: True\nCC_LIST: chromium-reviews@chromium.org\nVIEW_VC: https://chromium.googlesource.com/chromium/src/+/\nSTATUS: http://chromium-status.appspot.com/status\nRUN_POST_UPLOAD_HOOK: True\n"
        },
        {
          "name": "components",
          "type": "tree",
          "content": null
        },
        {
          "name": "content",
          "type": "tree",
          "content": null
        },
        {
          "name": "crypto",
          "type": "tree",
          "content": null
        },
        {
          "name": "dbus",
          "type": "tree",
          "content": null
        },
        {
          "name": "device",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuchsia_web",
          "type": "tree",
          "content": null
        },
        {
          "name": "gin",
          "type": "tree",
          "content": null
        },
        {
          "name": "google_apis",
          "type": "tree",
          "content": null
        },
        {
          "name": "gpu",
          "type": "tree",
          "content": null
        },
        {
          "name": "headless",
          "type": "tree",
          "content": null
        },
        {
          "name": "infra",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal",
          "type": "commit",
          "content": null
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "ios_internal",
          "type": "commit",
          "content": null
        },
        {
          "name": "ipc",
          "type": "tree",
          "content": null
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "mojo",
          "type": "tree",
          "content": null
        },
        {
          "name": "native_client",
          "type": "commit",
          "content": null
        },
        {
          "name": "native_client_sdk",
          "type": "tree",
          "content": null
        },
        {
          "name": "net",
          "type": "tree",
          "content": null
        },
        {
          "name": "pdf",
          "type": "tree",
          "content": null
        },
        {
          "name": "ppapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "printing",
          "type": "tree",
          "content": null
        },
        {
          "name": "remoting",
          "type": "tree",
          "content": null
        },
        {
          "name": "rlz",
          "type": "tree",
          "content": null
        },
        {
          "name": "sandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": "services",
          "type": "tree",
          "content": null
        },
        {
          "name": "signing_keys",
          "type": "commit",
          "content": null
        },
        {
          "name": "skia",
          "type": "tree",
          "content": null
        },
        {
          "name": "sql",
          "type": "tree",
          "content": null
        },
        {
          "name": "storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "styleguide",
          "type": "tree",
          "content": null
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "ui",
          "type": "tree",
          "content": null
        },
        {
          "name": "url",
          "type": "tree",
          "content": null
        },
        {
          "name": "v8",
          "type": "commit",
          "content": null
        },
        {
          "name": "webkit",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}