{
  "metadata": {
    "timestamp": 1736566361415,
    "page": 121,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "isl-org/Open3D",
      "stars": 11766,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.173828125,
          "content": "BasedOnStyle: Google\nIndentWidth: 4\nColumnLimit: 80\nUseTab: Never\nStandard: c++17\nContinuationIndentWidth: 8\nAccessModifierOffset: -4\nBinPackParameters: false\nSortIncludes: true\n"
        },
        {
          "name": ".codacy.yml",
          "type": "blob",
          "size": 0.03515625,
          "content": "---\nexclude_paths:\n  - CHANGELOG.md\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1025390625,
          "content": "build\ntags\n.clangd\n.vscode\ndocs/_static/build\ndocs/_out\n3rdparty_downloads\n.python-version\ncmake-build-*\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0390625,
          "content": "*.ipynb     filter=jupyter_clear_output\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.75390625,
          "content": "*.whl\n\n# Docker build artifacts (wheel, dev package, ccache)\ndocker/*.tar.gz\ndocker/*.tar.xz\n\n# Windows build temp cmake file\nCMakeSettings.json\n\n# Ccache tar files generated from Docker build\n.github/workflows/*.tar.gz\n\n# CMake configured files\ncpp/open3d/Open3D.h\ncpp/open3d/Open3DConfig.h\ncpp/open3d/visualization/shader/Shader.h\nutil/pip_package/setup.py\n\n# CMake temp file from Visual Studio\nCMakeSettings.json\n\n# Temp directories\n3rdparty_downloads\nbuild*/\ncmake-build-debug/\ncmake-build-release/\nutil/pip_package/dist/\ndoxygen/\nnode_modules/\n\n# Editor files\n*.*~\n\n# Local configs\n_vimrc_local.vim\n.vs/\n.vscode/\n.clangd/\n.ccls-cache/\n\n# Build artifacts\n**/package-lock.json\n*.pyc\n__pycache__\n.cache/\n._*\n.DS_Store\n.vscode\n.idea\n*.egg-info/\n*.ipynb_checkpoints/\n*.py[cod]\n*.bak\nnode_modules/\nstatic/\n*.old*\ndist/\ncompile_commands.json\n\n# Example resources\nexamples/python/reconstruction_system/dataset/\nexamples/python/geometry/voxel_grid_test.ply\nexamples/python/benchmark/testdata/\nexamples/python/benchmark/*.pkl\nexamples/python/benchmark/*.png\nexamples/python/misc/test.jpg\nexamples/python/pipelines/multiway_registration.pcd\nexamples/python/geometry/test.json\nexamples/python/visualization/viewpoint.json\nexamples/python/geometry/copy_of_fragment.pcd\nexamples/python/geometry/copy_of_knot.ply\nexamples/python/geometry/copy_of_Juneau.jpg\nexamples/python/geometry/copy_of_crate.mtl\nexamples/python/geometry/copy_of_crate.png\nexamples/python/geometry/copy_of_crate.obj\n\n# doc\ndocs/tutorial/**/*.ipynb\ndocs/tutorial/**/*.py\ndocs/tutorial/**/*.jpg\ndocs/tutorial/**/*.gif\ndocs/tutorial/**/*.ply\ndocs/tutorial/**/*.pcd\ndocs/tutorial/**/*.json\ndocs/_out/\ndocs/_build/\ndocs/python_api/\ndocs/python_example/\ndocs/conf.py\ndocs/Doxyfile\ndocs/getting_started.rst\ndocs/docker.rst\ndocs/tensorboard.md\n"
        },
        {
          "name": ".style.yapf",
          "type": "blob",
          "size": 0.03125,
          "content": "[style]\nbased_on_style = google\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.8369140625,
          "content": "## Main\n-   Fix DLLs not being found in Python-package. Also prevent PATH from being searched for DLLs, except CUDA (PR #7108)\n-   Fix MSAA sample count not being copied when FilamentView is copied\n-   Fix TriangleMesh::SamplePointsUniformly and TriangleMesh::SamplePointsPoissonDisk now sampling colors from mesh if available (PR #6842)\n-   Fix TriangleMesh::SamplePointsUniformly not sampling triangle meshes uniformly (PR #6653)\n-   Fix tensor based TSDF integration example.\n-   Use GLIBCXX_USE_CXX11_ABI=ON by default\n-   Python 3.9 support. Tensorflow bump 2.4.1 -> 2.5.0. PyTorch bump 1.7.1 -> 1.8.1 (LTS)\n-   Fix undefined names: docstr and VisibleDeprecationWarning (PR #3844)\n-   Corrected documentation for Tensor based PointClound, LineSet, TriangleMesh (PR #4685)\n-   Corrected documentation for KDTree (typo in Notebook) (PR #4744)\n-   Corrected documentation for visualisation tutorial\n-   Remove `setuptools` and `wheel` from requirements for end users (PR #5020)\n-   Fix various typos (PR #5070)\n-   Exposed more functionality in SLAM and odometry pipelines\n-   Fix for depth estimation for VoxelBlockGrid\n-   Reserve fragment buffer for VoxelBlockGrid operations\n-   Fix raycasting scene: Allow setting of number of threads that are used for building a raycasting scene\n-   Fix Python bindings for CUDA device synchronization, voxel grid saving (PR #5425)\n-   Support msgpack versions without cmake\n-   Changed TriangleMesh to store materials in a list so they can be accessed by the material index (PR #5938)\n-   Support multi-threading in the RayCastingScene function to commit scene (PR #6051).\n-   Fix some bad triangle generation in TriangleMesh::SimplifyQuadricDecimation\n-   Fix printing of tensor in gpu and add validation check for bounds of axis-aligned bounding box (PR #6444)\n-   Python 3.11 support. bump pybind11 v2.6.2 -> v2.11.1\n-   Check for support of CUDA Memory Pools at runtime (#4679)\n-   Fix `toString`, `CreateFromPoints` methods and improve docs in `AxisAlignedBoundingBox`. üêõüìù\n-   Migrate Open3d documentation to furo theme ‚ú® (#6470)\n-   Expose Near Clip + Far Clip parameters to setup_camera in OffscreenRenderer (#6520)\n-   Add Doppler ICP in tensor registration pipeline (PR #5237)\n-   Rename master branch to main.\n-   Support in memory loading of XYZ files\n-   Fix geometry picker Error when LineSet objects are presented (PR #6499)\n-   Fix mis-configured application .desktop link for the Open3D viewer when installing to a custom path (PR #6599)\n-   Fix regression in printing cuda tensor from PR #6444 üêõ\n-   Add Python pathlib support for file IO (PR #6619)\n-   Fix log error message for `probability` argument validation in `PointCloud::SegmentPlane` (PR #6622)\n-   Fix macOS arm64 builds, add CI runner for macOS arm64 (PR #6695)\n-   Fix KDTreeFlann possibly using a dangling pointer instead of internal storage and simplified its members (PR #6734)\n-   Fix RANSAC early stop if no inliers in a specific iteration (PR #6789)\n-   Fix segmentation fault (infinite recursion) of DetectPlanarPatches if multiple points have same coordinates (PR #6794)\n-   `TriangleMesh`'s `+=` operator appends UVs regardless of the presence of existing features (PR #6728)\n-   Fix build with fmt v10.2.0 (#6783)\n-   Fix segmentation fault (lambda reference capture) of VisualizerWithCustomAnimation::Play (PR #6804)\n-   Python 3.12 support\n-   Add O3DVisualizer API to enable collapse control of verts in the side panel (PR #6865)\n-   Split pybind declarations/definitions to avoid C++ types in Python docs (PR #6869)\n-   Fix minimal oriented bounding box of MeshBase derived classes and add new unit tests (PR #6898)\n-   Fix projection of point cloud to Depth/RGBD image if no position attribute is provided (PR #6880)\n-   Add choice of voxel pooling mode when creating VoxelGrid from PointCloud (PR #6937)\n-   Support lowercase types when reading PCD files (PR #6930)\n-   Fix visualization/draw ICP example and add warnings (PR #6933)\n-   Unified cloud initializer pipeline for ICP (fixes segfault colored ICP) (PR #6942)\n-   Fix tensor EstimatePointWiseNormalsWithFastEigen3x3 (PR #6980)\n-   Fix alpha shape reconstruction if alpha too small for point scale (PR #6998)\n-   Fix render to depth image on Apple Retina displays (PR #7001)\n-   Fix infinite loop in segment_plane if num_points < ransac_n (PR #7032)\n-   Add select_by_index method to Feature class (PR #7039)\n\n\n## 0.13\n\n-   CUDA support 10.1 -> 11.0. Tensorflow 2.3.1 -> 2.4.1. PyTorch 1.6.0 -> 1.7.1 (PR #3049). This requires a custom PyTorch wheel from <https://github.com/isl-org/open3d_downloads/releases/tag/torch1.7.1> due to PyTorch issue #52663\n\n## 0.12\n\n-   RealSense SDK v2 integrated for reading RS bag files (PR #2646)\n-   Tensor based RGBDImage class, Python bindings for Image and RGBDImage\n-   RealSense sensor configuration, live capture and recording (with example and tutorial) (PR #2748)\n-   Add mouselook for the legacy visualizer (PR #2551)\n-   Add function to randomly downsample pointcloud (PR #3050)\n-   Allow TriangleMesh with textures to be added (PR #3170)\n-   Python property of open3d.visualization.rendering.Open3DScene `get_view` has been renamed to `view`.\n-   Added LineSet::CreateCameraVisualization() for creating a simple camera visualization from intrinsic and extrinsic matrices (PR #3255)\n\n## 0.11\n\n-   Fixes bug for preloading libc++ and libc++abi in Python\n-   Added GUI widgets and model-viewing app\n-   Fixes travis for race-condition on macOS\n-   Fixes appveyor configuration and to build all branches\n-   Updated travis.yml to support Ubuntu 18.04, gcc-7, and clang-7.0\n-   Contributors guidelines updated\n-   Avoid cstdlib random generators in ransac registration, use C++11 random instead.\n-   Fixed a bug in open3d::geometry::TriangleMesh::ClusterConnectedTriangles.\n-   Added option BUILD_BENCHMARKS for building microbenchmarks\n-   Extend Python API of UniformTSDFVolume to allow setting the origin\n-   Corrected documentation of PointCloud.h\n-   Added ISS Keypoint Detector\n-   Added an RPC interface for external visualizers running in a separate process\n-   Added `maximum_error` and `boundary_weight` parameter to `simplify_quadric_decimation`\n-   Remove support for Python 3.5\n-   Development wheels are available for user testing. See [Getting Started](https://www.open3d.org/docs/latest/getting_started.html) page for installation.\n-   PointCloud File IO support for new tensor data types.\n-   New PointCloud format support: XYZI (ASCII).\n-   Fast compression mode for PNG writing. (Issue #846)\n-   Ubuntu 20.04 (Focal) support.\n-   Added Line3D/Ray3D/Segment3D classes with plane, point, closest-distance, and AABB tests\n-   Updated Open3D.h.in to add certain missing header files\n-   Add Open3D-ML to Open3D wheel\n-   Fix a bug in PointCloud file format, use `float` instead of `float_t`\n-   Add per-point covariance member for geometry::PointCloud class.\n-   Add Generalized ICP implementation.\n\n## 0.9.0\n\n-   Version bump to 0.9.0\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 26.3837890625,
          "content": "cmake_minimum_required(VERSION 3.24)\n# If you're using Ubuntu 20.04, we suggest you install the latest CMake from the\n# official repository https://apt.kitware.com/.\n# CMake 3.24+ is required for CUDA native arch selection\n# CMake 3.22+ is required by Assimp v5.4.2\n# CMake 3.20+ is required to detect IntelLLVM compiler for SYCL\n\n# CMAKE_HOST_SYSTEM_PROCESSOR is only available after calling project(),\n# which depends on ${OPEN3D_VERSION}, which depends on ${DEVELOPER_BUILD}.\nif(UNIX AND NOT APPLE)\n    execute_process(COMMAND uname -m\n        OUTPUT_VARIABLE PROCESSOR_ARCH\n        OUTPUT_STRIP_TRAILING_WHITESPACE\n    )\n    if(PROCESSOR_ARCH STREQUAL \"aarch64\")\n        set(LINUX_AARCH64 TRUE)\n    endif()\nendif()\nif(APPLE)\n    execute_process(COMMAND uname -m\n        OUTPUT_VARIABLE PROCESSOR_ARCH\n        OUTPUT_STRIP_TRAILING_WHITESPACE\n    )\n    if(PROCESSOR_ARCH STREQUAL \"arm64\")\n        set(APPLE_AARCH64 TRUE)\n        set (CMAKE_OSX_DEPLOYMENT_TARGET \"11.0\" CACHE STRING\n            \"Minimum OS X deployment version\" FORCE)\n    else()\n        set (CMAKE_OSX_DEPLOYMENT_TARGET \"10.15\" CACHE STRING\n            \"Minimum OS X deployment version\" FORCE)\n    endif()\nendif()\n\ninclude(CMakeDependentOption)\n\n# Open3D build options\noption(BUILD_SHARED_LIBS          \"Build shared libraries\"                   OFF)\noption(BUILD_EXAMPLES             \"Build Open3D examples programs\"           ON )\noption(BUILD_UNIT_TESTS           \"Build Open3D unit tests\"                  OFF)\noption(BUILD_BENCHMARKS           \"Build the micro benchmarks\"               OFF)\noption(BUILD_PYTHON_MODULE        \"Build the python module\"                  ON )\noption(BUILD_CUDA_MODULE          \"Build the CUDA module\"                    OFF)\noption(BUILD_WITH_CUDA_STATIC     \"Build with static CUDA libraries\"         ON )\noption(BUILD_COMMON_CUDA_ARCHS    \"Build for common CUDA GPUs (for release)\" OFF)\nif (WIN32)   # Causes CUDA runtime error on Windows (See issue #6555)\n    option(ENABLE_CACHED_CUDA_MANAGER \"Enable cached CUDA memory manager\"    OFF)\nelse()\n    option(ENABLE_CACHED_CUDA_MANAGER \"Enable cached CUDA memory manager\"    ON )\nendif()\nif(NOT LINUX_AARCH64 AND NOT APPLE_AARCH64)\n    option(BUILD_ISPC_MODULE      \"Build the ISPC module\"                    ON )\nelse()\n    option(BUILD_ISPC_MODULE      \"Build the ISPC module\"                    OFF)\nendif()\noption(BUILD_COMMON_ISPC_ISAS     \"Build for common ISPC ISAs (for release)\" OFF)\noption(BUILD_GUI                  \"Builds new GUI\"                           ON )\noption(WITH_OPENMP                \"Use OpenMP multi-threading\"               ON )\noption(WITH_IPP                \"Use Intel Integrated Performance Primitives\" ON )\noption(ENABLE_HEADLESS_RENDERING  \"Use OSMesa for headless rendering\"        OFF)\nif(BUILD_SHARED_LIBS)\n    option(STATIC_WINDOWS_RUNTIME \"Use static (MT/MTd) Windows runtime\"      OFF)\nelse()\n    option(STATIC_WINDOWS_RUNTIME \"Use static (MT/MTd) Windows runtime\"      ON )\nendif()\noption(BUILD_SYCL_MODULE          \"Build SYCL module with Intel oneAPI\"      OFF)\nif(BUILD_SYCL_MODULE)\n    set(OPEN3D_SYCL_TARGETS \"spir64\" CACHE STRING \n    \"SYCL targets: spir64 for JIT, or another for AOT compilation. See https://github.com/intel/llvm/blob/sycl/sycl/doc/UsersManual.md.\"\n)\n    set(OPEN3D_SYCL_TARGET_BACKEND_OPTIONS \"\" CACHE STRING \n    \"SYCL target backend options, e.g. to compile for a specific device. See https://github.com/intel/llvm/blob/sycl/sycl/doc/UsersManual.md.\"\n)\n    set(BUILD_ISPC_MODULE OFF CACHE BOOL \"Build the ISPC module\" FORCE)\n    set(BUILD_CUDA_MODULE OFF CACHE BOOL \"Build the CUDA module\" FORCE)\nendif()\noption(GLIBCXX_USE_CXX11_ABI      \"Set -D_GLIBCXX_USE_CXX11_ABI=1\"           ON )\noption(ENABLE_SYCL_UNIFIED_SHARED_MEMORY \"Enable SYCL unified shared memory\" OFF)\nif(BUILD_GUI AND (WIN32 OR UNIX AND NOT LINUX_AARCH64 AND NOT APPLE_AARCH64))\n    option(BUILD_WEBRTC           \"Build WebRTC visualizer\"                  ON )\nelse()\n    option(BUILD_WEBRTC           \"Build WebRTC visualizer\"                  OFF)\nendif()\noption(BUILD_JUPYTER_EXTENSION    \"Build Jupyter, requires BUILD_WEBRTC=ON\"  OFF)\n\n# 3rd-party build options\nif(LINUX_AARCH64 OR APPLE_AARCH64)\n    option(USE_BLAS               \"Use BLAS/LAPACK instead of MKL\"           ON )\nelse()\n    option(USE_BLAS               \"Use BLAS/LAPACK instead of MKL\"           OFF)\nendif()\nif(USE_BLAS)\n    option(USE_SYSTEM_BLAS        \"Use system pre-installed openblas\"        OFF)\nelse()\n    option(USE_SYSTEM_BLAS        \"Use system pre-installed openblas\"        ON )\nendif()\noption(USE_SYSTEM_ASSIMP          \"Use system pre-installed assimp\"          OFF)\noption(USE_SYSTEM_CURL            \"Use system pre-installed curl\"            OFF)\noption(USE_SYSTEM_CUTLASS         \"Use system pre-installed cutlass\"         OFF)\noption(USE_SYSTEM_EIGEN3          \"Use system pre-installed eigen3\"          OFF)\noption(USE_SYSTEM_EMBREE          \"Use system pre-installed Embree\"          OFF)\noption(USE_SYSTEM_FILAMENT        \"Use system pre-installed filament\"        OFF)\noption(USE_SYSTEM_FMT             \"Use system pre-installed fmt\"             OFF)\noption(USE_SYSTEM_GLEW            \"Use system pre-installed glew\"            OFF)\noption(USE_SYSTEM_GLFW            \"Use system pre-installed glfw\"            OFF)\noption(USE_SYSTEM_GOOGLETEST      \"Use system pre-installed Googletest\"      OFF)\noption(USE_SYSTEM_IMGUI           \"Use system pre-installed imgui\"           OFF)\noption(USE_SYSTEM_JPEG            \"Use system pre-installed jpeg\"            OFF)\noption(USE_SYSTEM_JSONCPP         \"Use system pre-installed jsoncpp\"         OFF)\noption(USE_SYSTEM_LIBLZF          \"Use system pre-installed liblzf\"          OFF)\noption(USE_SYSTEM_MSGPACK         \"Use system pre-installed msgpack\"         OFF)\noption(USE_SYSTEM_NANOFLANN       \"Use system pre-installed nanoflann\"       OFF)\noption(USE_SYSTEM_OPENSSL         \"Use system pre-installed OpenSSL\"         OFF)\noption(USE_SYSTEM_PNG             \"Use system pre-installed png\"             OFF)\noption(USE_SYSTEM_PYBIND11        \"Use system pre-installed pybind11\"        OFF)\noption(USE_SYSTEM_QHULLCPP        \"Use system pre-installed qhullcpp\"        OFF)\noption(USE_SYSTEM_STDGPU          \"Use system pre-installed stdgpu\"          OFF)\noption(USE_SYSTEM_TBB             \"Use system pre-installed TBB\"             OFF)\noption(USE_SYSTEM_TINYGLTF        \"Use system pre-installed tinygltf\"        OFF)\noption(USE_SYSTEM_TINYOBJLOADER   \"Use system pre-installed tinyobjloader\"   OFF)\noption(USE_SYSTEM_VTK             \"Use system pre-installed VTK\"             OFF)\noption(USE_SYSTEM_ZEROMQ          \"Use system pre-installed ZeroMQ\"          OFF)\nif(LINUX_AARCH64 OR APPLE_AARCH64)\n    option(BUILD_VTK_FROM_SOURCE      \"Build VTK from source\"                ON )\nelse()\n    option(BUILD_VTK_FROM_SOURCE      \"Build VTK from source\"                OFF)\nendif()\nif(LINUX_AARCH64)\n    option(BUILD_FILAMENT_FROM_SOURCE \"Build filament from source\"           ON )\nelse()\n    option(BUILD_FILAMENT_FROM_SOURCE \"Build filament from source\"           OFF)\nendif()\n\noption(PREFER_OSX_HOMEBREW        \"Prefer Homebrew libs over frameworks\"     ON )\noption(WITH_MINIZIP               \"Enable MiniZIP\"                           OFF)\n\n# Sensor options\noption(BUILD_LIBREALSENSE         \"Build support for Intel RealSense camera\" OFF)\noption(USE_SYSTEM_LIBREALSENSE    \"Use system pre-installed librealsense\"    OFF)\noption(BUILD_AZURE_KINECT         \"Build support for Azure Kinect sensor\"    OFF)\n\n# ML library options\noption(BUILD_TENSORFLOW_OPS       \"Build ops for TensorFlow\"                 OFF)\noption(BUILD_PYTORCH_OPS          \"Build ops for PyTorch\"                    OFF)\noption(BUNDLE_OPEN3D_ML           \"Includes the Open3D-ML repo in the wheel\" OFF)\n\n# Release build options\noption(DEVELOPER_BUILD      \"Add +commit_hash to the project version number\" ON )\nif (NOT DEVELOPER_BUILD)\n    if (NOT BUILD_COMMON_CUDA_ARCHS)\n        set(BUILD_COMMON_CUDA_ARCHS ON CACHE BOOL \"Build for common CUDA GPUs (for release)\" FORCE)\n        message(WARNING \"Setting BUILD_COMMON_CUDA_ARCHS=ON since DEVELOPER_BUILD is OFF.\")\n    endif()\nendif()\n\n# Default build type on single-config generators.\n# For multi-config generators (e.g. Visual Studio), CMAKE_CONFIGURATION_TYPES\n# will be set, and we don't specify a default CMAKE_BUILD_TYPE.\n# https://blog.kitware.com/cmake-and-the-default-build-type/\nif(NOT CMAKE_CONFIGURATION_TYPES)\n    if(NOT CMAKE_BUILD_TYPE)\n        message(STATUS \"Setting build type to Release as none was specified.\")\n        set(CMAKE_BUILD_TYPE Release CACHE STRING \"Choose the type of build.\" FORCE)\n        # Set the possible values of build type for cmake-gui.\n        set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n                    \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")\n    endif()\n    message(STATUS \"CMAKE_BUILD_TYPE is set to ${CMAKE_BUILD_TYPE}.\")\nendif()\n\nfind_program(CCACHE \"ccache\")\nif (CCACHE)\n    message(STATUS \"ccache found at ${CCACHE}\")\n    set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE})\n    set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE})\n    if(BUILD_CUDA_MODULE)\n        set(CMAKE_CUDA_COMPILER_LAUNCHER ${CCACHE})\n    endif()\nendif()\n\nif(POLICY CMP0135)\n    cmake_policy(SET CMP0135 NEW)  # URL contents timestamped by download time\nendif()\n# In ExternalProject_Add, if OPEN3D_THIRD_PARTY_DOWNLOAD_DIR is specified, CMake will\n# use this directory to cache downloaded 3rd party dependencies and automatically skip\n# downloading from the Internet if the files are available. This is only supported by\n# a limited number of 3rd party libraries.\nset(OPEN3D_THIRD_PARTY_DOWNLOAD_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/3rdparty_downloads\"\n    CACHE PATH \"Third-party download directory for caching.\")\nmessage(STATUS \"Downloading third-party dependencies to ${OPEN3D_THIRD_PARTY_DOWNLOAD_DIR}\")\n\nset(FILAMENT_PRECOMPILED_ROOT \"\" CACHE PATH \"Path to precompiled Filament library (used if BUILD_FILAMENT_FROM_SOURCE=OFF)\")\n\nif (PREFER_OSX_HOMEBREW)\n    set(CMAKE_FIND_FRAMEWORK LAST)\n    set(CMAKE_FIND_APPBUNDLE LAST)\nendif()\n\n# Set OpenGL policy\nif(NOT USE_SYSTEM_GLFW)\n    cmake_policy(SET CMP0072 OLD)\nendif()\ncmake_policy(GET CMP0072 CMP0072_VALUE)\n\n# Catch a few incompatible build options\nif ((LINUX_AARCH64 OR APPLE_AARCH64) AND BUILD_ISPC_MODULE)\n    message(FATAL_ERROR \"ISPC module is not yet supported on ARM Linux\")\nendif()\nif (LINUX_AARCH64 AND NOT BUILD_FILAMENT_FROM_SOURCE)\n    message(FATAL_ERROR \"ARM CPU detected, you must set BUILD_FILAMENT_FROM_SOURCE=ON.\")\nendif()\nif ((LINUX_AARCH64 OR APPLE_AARCH64) AND NOT USE_BLAS)\n    message(FATAL_ERROR \"ARM CPU detected, you must set USE_BLAS=ON.\")\nendif()\nif (APPLE AND ENABLE_HEADLESS_RENDERING)\n    message(WARNING \"Headless rendering is not supported on Mac OS\")\n    set(ENABLE_HEADLESS_RENDERING OFF)\nendif()\nif(ENABLE_HEADLESS_RENDERING AND BUILD_GUI)\n    message(WARNING \"Headless rendering disables the Open3D GUI\")\n    set(BUILD_GUI OFF)\nendif()\nif(ENABLE_HEADLESS_RENDERING AND (USE_SYSTEM_GLEW OR USE_SYSTEM_GLFW))\n    message(WARNING \"Headless rendering requires customized GLEW and GLFW builds\")\n    set(USE_SYSTEM_GLEW OFF)\n    set(USE_SYSTEM_GLFW OFF)\nendif()\nif(BUNDLE_OPEN3D_ML AND NOT (BUILD_TENSORFLOW_OPS OR BUILD_PYTORCH_OPS))\n    message(SEND_ERROR \"3DML depends on TensorFlow or PyTorch Ops. Enable them with -DBUILD_TENSORFLOW_OPS=ON or -DBUILD_PYTORCH_OPS=ON\")\nendif()\nif(BUILD_WEBRTC AND LINUX_AARCH64)\n    message(FATAL_ERROR \"BUILD_WEBRTC=ON is not yet supported on ARM Linux\")\nendif()\nif(BUILD_WEBRTC AND NOT BUILD_GUI)\n    message(FATAL_ERROR \"BUILD_WEBRTC=ON requires BUILD_GUI=ON\")\nendif()\nif(BUILD_JUPYTER_EXTENSION AND NOT BUILD_WEBRTC)\n    # BUILD_JUPYTER_EXTENSION transitively depends on BUILD_GUI\n    message(FATAL_ERROR \"BUILD_JUPYTER_EXTENSION=ON requires BUILD_WEBRTC=ON\")\nendif()\nif(BUILD_JUPYTER_EXTENSION AND NOT BUILD_PYTHON_MODULE)\n    message(FATAL_ERROR \"BUILD_JUPYTER_EXTENSION=ON requires BUILD_PYTHON_MODULE=ON\")\nendif()\n\n# Parse Open3D version number\nfile(STRINGS \"cpp/open3d/version.txt\" OPEN3D_VERSION_READ)\nforeach(ver ${OPEN3D_VERSION_READ})\n    if (ver MATCHES \"OPEN3D_VERSION_(MAJOR|MINOR|PATCH) +([^ ]+)$\")\n        set(OPEN3D_VERSION_${CMAKE_MATCH_1} \"${CMAKE_MATCH_2}\" CACHE INTERNAL \"\")\n    endif()\nendforeach()\nset(OPEN3D_VERSION_DEVHASH \"\")\nif(DEVELOPER_BUILD)\n    execute_process(COMMAND git -C \"${CMAKE_SOURCE_DIR}\" log --pretty=format:%h -n 1\n        OUTPUT_VARIABLE GIT_REV)\n    if (GIT_REV)\n        set(OPEN3D_VERSION_DEVHASH \"+${GIT_REV}\")\n    endif()\nendif()\nstring(CONCAT OPEN3D_VERSION\n    \"${OPEN3D_VERSION_MAJOR}\"\n    \".${OPEN3D_VERSION_MINOR}\"\n    \".${OPEN3D_VERSION_PATCH}\"\n)\nset(OPEN3D_VERSION_FULL \"${OPEN3D_VERSION}${OPEN3D_VERSION_DEVHASH}\" CACHE\n    STRING \"Open3D full version.\")\nset(OPEN3D_ABI_VERSION \"${OPEN3D_VERSION_MAJOR}.${OPEN3D_VERSION_MINOR}\" CACHE\n    STRING \"Open3D ABI version / SOVERSION (for releases only).\")\n# Set additional info\nset(PROJECT_EMAIL       \"open3d@intel.com\")\nset(PROJECT_DOCS        \"https://www.open3d.org/docs\")\nset(PROJECT_CODE        \"https://github.com/isl-org/Open3D\")\nset(PROJECT_ISSUES      \"https://github.com/isl-org/Open3D/issues\")\n\nproject(Open3D\n    VERSION ${OPEN3D_VERSION}\n    # Set PROJECT_DESCRIPTION\n    DESCRIPTION \"Open3D: A Modern Library for 3D Data Processing.\"\n    # Set PROJECT_HOMEPAGE_URL\n    HOMEPAGE_URL \"https://www.open3d.org\"\n    LANGUAGES C CXX)\nmessage(STATUS \"Open3D ${OPEN3D_VERSION_FULL}\")\n\n# Check SYCL compatiblility\nif (BUILD_SYCL_MODULE AND NOT CMAKE_CXX_COMPILER_ID MATCHES \"IntelLLVM\")\n    message(FATAL_ERROR \"BUILD_SYCL_MODULE requires IntelLLVM (DPC++) compiler, \"\n                        \"but got CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID} \"\n                        \"and CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}.\")\nendif()\nif (BUILD_SYCL_MODULE AND (NOT UNIX OR APPLE))\n    message(FATAL_ERROR \"Open3D SYCL support is only available on Linux\")\nendif()\nif(BUILD_SYCL_MODULE AND NOT GLIBCXX_USE_CXX11_ABI)\n    message(FATAL_ERROR \"BUILD_SYCL_MODULE=ON requires GLIBCXX_USE_CXX11_ABI=ON\")\nendif()\nif(BUILD_SYCL_MODULE AND BUILD_CUDA_MODULE)\n    message(FATAL_ERROR \"BUILD_SYCL_MODULE and BUILD_SYCL_MODULE cannot be on at the same time for now.\")\nendif()\n\n# Global flag to set CXX standard.\n# This does not affect 3rd party libraries.\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_EXTENSIONS OFF)   # Improved compatibility\n\n# Suppress warnings for deprecated C++17 functions (stdgpu->thrust with CUDA 11 for MSVC).\nadd_compile_definitions($<$<COMPILE_LANGUAGE:CUDA>:_SILENCE_CXX17_RESULT_OF_DEPRECATION_WARNING>)\n# CMake modules\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\" \"${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/cmake\")\n\n# Setup Python executable\nif(NOT DEFINED Python3_FIND_REGISTRY)\n    # Only consider PATH variable on Windows by default\n    set(Python3_FIND_REGISTRY NEVER)\nendif()\n# Requires Python 3.6+\nfind_package(Python3 3.6\n             COMPONENTS Interpreter Development)\nif (Python3_FOUND)\n    # Setup PYTHON_EXECUTABLE for 3rdparty modules\n    # which still use the deprecated find_package(PythonInterp)\n    set(PYTHON_EXECUTABLE ${Python3_EXECUTABLE} CACHE STRING\n        \"Deprecated path to the Python executable (for 3rdparty only)\" FORCE)\nelse()\n    if (BUILD_PYTHON_MODULE)\n        message(FATAL_ERROR \"BUILD_PYTHON_MODULE=ON requires Python >= 3.6. Please ensure it is in PATH.\")\n    endif()\nendif()\n\n# npm version has to be MAJOR.MINOR.PATCH\nstring(CONCAT PROJECT_VERSION_THREE_NUMBER \"${OPEN3D_VERSION_MAJOR}\"\n                                           \".${OPEN3D_VERSION_MINOR}\"\n                                           \".${OPEN3D_VERSION_PATCH}\")\n\n# PyPI package name controls specifies the repository name on PyPI. The default\n# name is \"open3d\". In the past, for historical reasons, we've used the\n# following names for PyPI, while they are now deprecated:\n# - open3d-python\n# - py3d\n# - open3d-original\n# - open3d-official\n# - open-3d\nif(NOT DEFINED PYPI_PACKAGE_NAME)\n    set(PYPI_PACKAGE_NAME \"open3d\")\nendif()\n\n# Set installation paths\nif(UNIX OR CYGWIN)\n    include(GNUInstallDirs)\n    set(Open3D_INSTALL_INCLUDE_DIR \"${CMAKE_INSTALL_INCLUDEDIR}\")\n    set(Open3D_INSTALL_BIN_DIR \"${CMAKE_INSTALL_BINDIR}\")\n    set(Open3D_INSTALL_LIB_DIR \"${CMAKE_INSTALL_LIBDIR}\")\n    # Put resources in */share/\n    set(Open3D_INSTALL_RESOURCE_DIR \"${CMAKE_INSTALL_DATADIR}\")\n    set(Open3D_INSTALL_CMAKE_DIR \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\nelse()\n    set(Open3D_INSTALL_INCLUDE_DIR include)\n    set(Open3D_INSTALL_BIN_DIR bin)\n    set(Open3D_INSTALL_LIB_DIR lib)\n    # Put resources in */bin, with executables / DLLs\n    set(Open3D_INSTALL_RESOURCE_DIR bin)\n    set(Open3D_INSTALL_CMAKE_DIR CMake)\nendif()\n\n# Put build results in some predictable places\n# The $<CONFIG> generator expression makes sure that XCode or Visual Studio do not\n# append additional path components, as we need to know *exactly* where the build results\n# end up.\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib/$<CONFIG>)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib/$<CONFIG>)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)\n\n# Global Security options (including 3rd party code)\n# Add -fPIC for library and -fPIE for executable to compiler and linker. Does not add -pie !\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\n# Explicitly specify the preference of using -pthread over -lpthread.\n# This must be defined here since CUDA calls find_package(Threads) internally.\nset(THREADS_PREFER_PTHREAD_FLAG TRUE)\n\n# Overwrites property for Thread::Threads in find_package(Threads)\n# For CUDA, \"-pthread\" is replaced with \"-Xcompiler -pthread\" (CMake's default)\n# For ISPC, \"-pthread\" is disabled\nmacro(open3d_patch_findthreads_module_)\n    if(TARGET Threads::Threads AND THREADS_HAVE_PTHREAD_ARG)\n        set_property(TARGET Threads::Threads\n                     PROPERTY INTERFACE_COMPILE_OPTIONS\n                     \"$<$<COMPILE_LANG_AND_ID:CUDA,NVIDIA>:SHELL:-Xcompiler -pthread>\"\n                     \"$<$<AND:$<NOT:$<COMPILE_LANG_AND_ID:CUDA,NVIDIA>>,$<NOT:$<COMPILE_LANGUAGE:ISPC>>>:-pthread>\")\n    endif()\nendmacro()\ncmake_language(EVAL CODE \"cmake_language(DEFER CALL open3d_patch_findthreads_module_)\")\n\n# Build CUDA module by default if CUDA is available\nif(BUILD_CUDA_MODULE)\n    # Suppress nvcc unsupported compiler error for MSVC 2022 with CUDA 11.7 to 12.4\n    # https://forums.developer.nvidia.com/t/problems-with-latest-vs2022-update/294150/12\n    if (MSVC AND MSVC_VERSION VERSION_LESS_EQUAL \"1949\")\n        # Set this before any CUDA checks\n        set(CMAKE_CUDA_FLAGS \"--allow-unsupported-compiler\" CACHE STRING \"Additional flags for nvcc\" FORCE)\n        message(WARNING \"Using --allow-unsupported-compiler flag for nvcc with MSVC 2022. \"\n        \"Set $Env:NVCC_PREPEND_FLAGS='--allow-unsupported-compiler' if nvcc still fails.\")\n    endif()\n    if (CMAKE_CUDA_ARCHITECTURES)\n        message(STATUS \"Building with user-provided CUDA architectures: ${CMAKE_CUDA_ARCHITECTURES}\")\n    else()\n        if(BUILD_COMMON_CUDA_ARCHS)\n            # Build with all supported architectures for previous 2 generations and\n            # M0 (minor=0) architectures for previous generations (including\n            # deprecated). Note that cubin for M0 runs on GPUs with architecture Mx.\n            # This is a tradeoff between binary size / build time and runtime on\n            # older architectures. See:\n            # https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#building-for-maximum-compatibility\n            # https://docs.nvidia.com/cuda/ampere-compatibility-guide/index.html#application-compatibility-on-ampere\n            # https://en.wikipedia.org/wiki/CUDA#GPUs_supported\n            find_package(CUDAToolkit REQUIRED)\n            if(CUDAToolkit_VERSION VERSION_GREATER_EQUAL \"11.8\")\n                set(CMAKE_CUDA_ARCHITECTURES 75-real 80-real 86-real 89-real 90)    # Turing, Ampere, Ada Lovelace, Hopper\n            elseif(CUDAToolkit_VERSION VERSION_GREATER_EQUAL \"11.1\")\n                set(CMAKE_CUDA_ARCHITECTURES 70-real 75-real 80-real 86)            # Volta, Turing, Ampere\n            elseif(CUDAToolkit_VERSION VERSION_GREATER_EQUAL \"11.0\")\n                set(CMAKE_CUDA_ARCHITECTURES 60-real 70-real 72-real 75-real 80)    # Pascal, Volta, Turing, Ampere\n            else()\n                set(CMAKE_CUDA_ARCHITECTURES 30-real 50-real 60-real 70-real 75)    # Kepler, Maxwell, Pascal, Turing\n            endif()\n            message(STATUS \"Using CUDA architectures: ${CMAKE_CUDA_ARCHITECTURES}\")\n        else()\n            execute_process(COMMAND nvidia-smi RESULT_VARIABLE NVIDIA_CHECK OUTPUT_QUIET)\n            if (NVIDIA_CHECK EQUAL 0)\n                message(STATUS \"Building with native CUDA architecture.\")\n                set(CMAKE_CUDA_ARCHITECTURES native)\n            else()\n                message(WARNING \"No CUDA GPU detected. Building with CMake default CUDA architecture.\")\n            endif()\n        endif()\n    endif()\n    enable_language(CUDA)\n    set(CMAKE_CUDA_STANDARD 17)\n    if (CMAKE_CUDA_COMPILER_ID STREQUAL \"NVIDIA\" AND CMAKE_CUDA_COMPILER_VERSION VERSION_LESS \"11.5\")\n        message(FATAL_ERROR \"CUDA 11.4 and older are not supported. Please upgrade to CUDA 11.5 or newer.\")\n    endif()\nendif()\n\n# ISPC language emulation support\ninclude(Open3DISPC)\n\nif (CMAKE_ISPC_COMPILER_LOADED OR (CMAKE_GENERATOR MATCHES \"Make\" OR CMAKE_GENERATOR MATCHES \"Ninja\"))\n    option(ISPC_USE_LEGACY_EMULATION \"Use legacy ISPC language emulation over first-class CMake support\" OFF)\nelse()\n    option(ISPC_USE_LEGACY_EMULATION \"Use legacy ISPC language emulation over first-class CMake support\" ON)\nendif()\nmark_as_advanced(ISPC_USE_LEGACY_EMULATION)\noption(ISPC_PRINT_LEGACY_COMPILE_COMMANDS \"Prints legacy compile commands on CMake configuration time\" ON)\nmark_as_advanced(ISPC_PRINT_LEGACY_COMPILE_COMMANDS)\n\n# Build ISPC module by default if ISPC is available\nif (BUILD_ISPC_MODULE)\n    include(Open3DFetchISPCCompiler)\n    open3d_fetch_ispc_compiler()\n\n    include(Open3DMakeISPCInstructionSets)\n    open3d_make_ispc_instruction_sets(ISPC_ISAS)\n    set(CMAKE_ISPC_INSTRUCTION_SETS ${ISPC_ISAS})\n\n    message(STATUS \"Using ISPC instruction sets: ${CMAKE_ISPC_INSTRUCTION_SETS}\")\n\n    open3d_ispc_enable_language(ISPC)\n\n    if (CMAKE_ISPC_COMPILER_ID STREQUAL \"Intel\" AND CMAKE_ISPC_COMPILER_VERSION VERSION_LESS \"1.16\")\n        message(FATAL_ERROR \"ISPC 1.15 and older are not supported. Please upgrade to ISPC 1.16 or newer.\")\n    endif()\n\n    if (NOT CMAKE_ISPC_COMPILER_ID)\n        message(FATAL_ERROR \"Unknown ISPC compiler.\")\n    endif()\nendif()\n\n# OS specific settings\nif(WIN32)\n    # Windows defaults to hidden symbol visibility, override that\n    # TODO: It would be better to explicitly export symbols.\n    #       Then, we could use -fvisibility=hidden for Linux as well\n    SET(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n    if(MSVC)\n        # MSVC standards-compliant mode: Error in PoissonRecon 3rd party header\n        # add_compile_options($<$<COMPILE_LANGUAGE:CXX>:\"/permissive-\">)   \n        # Make sure we don't hit the 65535 object member limit with MSVC\n        #\n        # /bigobj allows object files with more than 65535 members\n        # /Ob2 enables function inlining, because MSVC is particularly\n        # verbose with inline members\n        #\n        # See: https://github.com/tensorflow/tensorflow/pull/10962\n        add_compile_options(\"$<$<COMPILE_LANGUAGE:CXX>:/bigobj;/Ob2>\")\n    endif()\n    if (STATIC_WINDOWS_RUNTIME)\n        set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n    else()\n        set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>DLL\")\n    endif()\nendif()\n\n# Folder view for project files\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\nmacro(add_source_group module_name)\n    file(GLOB MODULE_HEADER_FILES \"${module_name}/*.h\")\n    source_group(\"Header Files\\\\${module_name}\" FILES ${MODULE_HEADER_FILES})\n    file(GLOB MODULE_SOURCE_FILES \"${module_name}/*.cpp\")\n    source_group(\"Source Files\\\\${module_name}\" FILES ${MODULE_SOURCE_FILES})\n    file(GLOB MODULE_ISPC_HEADER_FILES \"${module_name}/*.isph\")\n    source_group(\"Header Files\\\\ISPC\" FILES ${MODULE_ISPC_HEADER_FILES})\n    file(GLOB MODULE_ISPC_SOURCE_FILES \"${module_name}/*.ispc\")\n    source_group(\"Source Files\\\\ISPC\" FILES ${MODULE_ISPC_SOURCE_FILES})\n    file(GLOB MODULE_SHADER_FILES \"${module_name}/*.glsl\")\n    source_group(\"Source Files\\\\Shader\\\\GLSL\" FILES ${MODULE_SHADER_FILES})\n    file(GLOB MODULE_MATERIAL_FILES \"${module_name}/*.mat\")\n    source_group(\"Source Files\\\\Material\" FILES ${MODULE_MATERIAL_FILES})\nendmacro()\n\nif (LINUX_AARCH64)\n# Fix for ImportError: ... /pybind.cpython-310-aarch64-linux-gnu.so: cannot allocate memory in static TLS block\n# https://bugs.launchpad.net/ubuntu/+source/mysql-8.0/+bug/1889851\n    add_compile_options(\"-ftls-model=global-dynamic\")\nendif()\n\n# Include convenience functions\ninclude(Open3DLink3rdpartyLibraries)\ninclude(Open3DSetGlobalProperties)\ninclude(Open3DShowAndAbortOnWarning)\ninclude(Open3DSYCLTargetSources)\n\n# Enumerate all third-party libraries which we need later\n# This creates the necessary targets and sets the\n# Open3D_3RDPARTY_*_TARGETS variables we use in open3d_link_3rdparty_libraries\ninclude(3rdparty/find_dependencies.cmake)\n\n# Open3D library\nadd_subdirectory(cpp)\n\n# Examples\nadd_subdirectory(examples)\n\n# Documentation\nadd_subdirectory(docs)\n\n# Install CMake configuration files\ninstall(EXPORT ${PROJECT_NAME}Targets NAMESPACE ${PROJECT_NAME}:: DESTINATION ${Open3D_INSTALL_CMAKE_DIR})\nexport(EXPORT ${PROJECT_NAME}Targets NAMESPACE ${PROJECT_NAME}::)\n\nif (Python3_EXECUTABLE)\n    # `make check-style` checks style for c++/cuda/python/ipynb files\n    add_custom_target(check-style\n        COMMAND ${Python3_EXECUTABLE}\n        ${CMAKE_CURRENT_SOURCE_DIR}/util/check_style.py\n        COMMENT \"Python executable used for style check: ${Python3_EXECUTABLE}.\"\n    )\n\n    # `make apply-style` applies style for c++/cuda/python/ipynb files\n    add_custom_target(apply-style\n        COMMAND ${Python3_EXECUTABLE}\n        ${CMAKE_CURRENT_SOURCE_DIR}/util/check_style.py --apply\n        COMMENT \"Python executable used for style check: ${Python3_EXECUTABLE}.\"\n    )\nendif()\n\ninclude(Open3DPackaging)\n\n# `make check-cpp-style` checks style for c++/cuda files.\n# This works outside of python virtualenv.\nadd_custom_target(check-cpp-style\n    COMMAND ${CMAKE_COMMAND}\n    -DPROJECT_SOURCE_DIR=\"${PROJECT_SOURCE_DIR}\"\n    -DAPPLY=OFF\n    -P ${CMAKE_CURRENT_SOURCE_DIR}/util/check_cpp_style.cmake\n)\n\n# `make apply-cpp-style` applies style for c++/cuda files.\n# This works outside of python virtualenv.\nadd_custom_target(apply-cpp-style\n    COMMAND ${CMAKE_COMMAND}\n    -DPROJECT_SOURCE_DIR=\"${PROJECT_SOURCE_DIR}\"\n    -DAPPLY=ON\n    -P ${CMAKE_CURRENT_SOURCE_DIR}/util/check_cpp_style.cmake\n)\n\ninclude(Open3DPrintConfigurationSummary)\nopen3d_print_configuration_summary()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1123046875,
          "content": "The MIT License (MIT)\n\nOpen3D: www.open3d.org\nCopyright (c) 2018-2023 www.open3d.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\nSPDX-License-Identifier: MIT\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.400390625,
          "content": "<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/isl-org/Open3D/main/docs/_static/open3d_logo_horizontal.png\" width=\"320\" />\n</p>\n\n# Open3D: A Modern Library for 3D Data Processing\n\n<h4>\n    <a href=\"https://www.open3d.org\">Homepage</a> |\n    <a href=\"https://www.open3d.org/docs\">Docs</a> |\n    <a href=\"https://www.open3d.org/docs/release/getting_started.html\">Quick Start</a> |\n    <a href=\"https://www.open3d.org/docs/release/compilation.html\">Compile</a> |\n    <a href=\"https://www.open3d.org/docs/release/index.html#python-api-index\">Python</a> |\n    <a href=\"https://www.open3d.org/docs/release/cpp_api.html\">C++</a> |\n    <a href=\"https://github.com/isl-org/Open3D-ML\">Open3D-ML</a> |\n    <a href=\"https://github.com/isl-org/Open3D/releases\">Viewer</a> |\n    <a href=\"https://www.open3d.org/docs/release/contribute/contribute.html\">Contribute</a> |\n    <a href=\"https://www.youtube.com/channel/UCRJBlASPfPBtPXJSPffJV-w\">Demo</a> |\n    <a href=\"https://github.com/isl-org/Open3D/discussions\">Forum</a>\n</h4>\n\nOpen3D is an open-source library that supports rapid development of software\nthat deals with 3D data. The Open3D frontend exposes a set of carefully selected\ndata structures and algorithms in both C++ and Python. The backend is highly\noptimized and is set up for parallelization. We welcome contributions from\nthe open-source community.\n\n[![Ubuntu CI](https://github.com/isl-org/Open3D/actions/workflows/ubuntu.yml/badge.svg)](https://github.com/isl-org/Open3D/actions?query=workflow%3A%22Ubuntu+CI%22)\n[![macOS CI](https://github.com/isl-org/Open3D/actions/workflows/macos.yml/badge.svg)](https://github.com/isl-org/Open3D/actions?query=workflow%3A%22macOS+CI%22)\n[![Windows CI](https://github.com/isl-org/Open3D/actions/workflows/windows.yml/badge.svg)](https://github.com/isl-org/Open3D/actions?query=workflow%3A%22Windows+CI%22)\n\n**Core features of Open3D include:**\n\n-   3D data structures\n-   3D data processing algorithms\n-   Scene reconstruction\n-   Surface alignment\n-   3D visualization\n-   Physically based rendering (PBR)\n-   3D machine learning support with PyTorch and TensorFlow\n-   GPU acceleration for core 3D operations\n-   Available in C++ and Python\n\nHere's a brief overview of the different components of Open3D and how they fit\ntogether to enable full end to end pipelines:\n\n![Open3D_layers](https://github.com/isl-org/Open3D/assets/41028320/e9b8645a-a823-4d78-8310-e85207bbc3e4)\n\nFor more, please visit the [Open3D documentation](https://www.open3d.org/docs).\n\n## Python quick start\n\nPre-built pip packages support Ubuntu 20.04+, macOS 10.15+ and Windows 10+\n(64-bit) with Python 3.8-3.11.\n\n```bash\n# Install\npip install open3d       # or\npip install open3d-cpu   # Smaller CPU only wheel on x86_64 Linux (v0.17+)\n\n# Verify installation\npython -c \"import open3d as o3d; print(o3d.__version__)\"\n\n# Python API\npython -c \"import open3d as o3d; \\\n           mesh = o3d.geometry.TriangleMesh.create_sphere(); \\\n           mesh.compute_vertex_normals(); \\\n           o3d.visualization.draw(mesh, raw_mode=True)\"\n\n# Open3D CLI\nopen3d example visualization/draw\n```\n\nTo get the latest features in Open3D, install the\n[development pip package](https://www.open3d.org/docs/latest/getting_started.html#development-version-pip).\nTo compile Open3D from source, refer to\n[compiling from source](https://www.open3d.org/docs/release/compilation.html).\n\n## C++ quick start\n\nCheckout the following links to get started with Open3D C++ API\n\n-   Download Open3D binary package: [Release](https://github.com/isl-org/Open3D/releases) or [latest development version](https://www.open3d.org/docs/latest/getting_started.html#c)\n-   [Compiling Open3D from source](https://www.open3d.org/docs/release/compilation.html)\n-   [Open3D C++ API](https://www.open3d.org/docs/release/cpp_api.html)\n\nTo use Open3D in your C++ project, checkout the following examples\n\n-   [Find Pre-Installed Open3D Package in CMake](https://github.com/isl-org/open3d-cmake-find-package)\n-   [Use Open3D as a CMake External Project](https://github.com/isl-org/open3d-cmake-external-project)\n\n## Open3D-Viewer app\n\n<img width=\"480\" src=\"https://raw.githubusercontent.com/isl-org/Open3D/main/docs/_static/open3d_viewer.png\">\n\nOpen3D-Viewer is a standalone 3D viewer app available on Debian (Ubuntu), macOS\nand Windows. Download Open3D Viewer from the\n[release page](https://github.com/isl-org/Open3D/releases).\n\n## Open3D-ML\n\n<img width=\"480\" src=\"https://raw.githubusercontent.com/isl-org/Open3D-ML/main/docs/images/getting_started_ml_visualizer.gif\">\n\nOpen3D-ML is an extension of Open3D for 3D machine learning tasks. It builds on\ntop of the Open3D core library and extends it with machine learning tools for\n3D data processing. To try it out, install Open3D with PyTorch or TensorFlow and check out\n[Open3D-ML](https://github.com/isl-org/Open3D-ML).\n\n## Communication channels\n\n-   [GitHub Issue](https://github.com/isl-org/Open3D/issues): bug reports,\n    feature requests, etc.\n-   [Forum](https://github.com/isl-org/Open3D/discussions): discussion on the usage of Open3D.\n-   [Discord Chat](https://discord.gg/D35BGvn): online chats, discussions,\n    and collaboration with other users and developers.\n\n## Citation\n\nPlease cite [our work](https://arxiv.org/abs/1801.09847) if you use Open3D.\n\n```bib\n@article{Zhou2018,\n    author    = {Qian-Yi Zhou and Jaesik Park and Vladlen Koltun},\n    title     = {{Open3D}: {A} Modern Library for {3D} Data Processing},\n    journal   = {arXiv:1801.09847},\n    year      = {2018},\n}\n```\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3955078125,
          "content": "# Security Policy\nIntel is committed to rapidly addressing security vulnerabilities affecting our customers and providing clear guidance on the solution, impact, severity and mitigation. \n\n## Reporting a Vulnerability\nPlease report any security vulnerabilities in this project utilizing the guidelines [here](https://www.intel.com/content/www/us/en/security-center/vulnerability-handling-guidelines.html)."
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpp",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}