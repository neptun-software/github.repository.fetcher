{
  "metadata": {
    "timestamp": 1736566368483,
    "page": 130,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ninja-build/ninja",
      "stars": 11444,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.029296875,
          "content": "# Copyright 2014 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This isn't meant to be authoritative, but it's good enough to be useful.\n# Still use your best judgement for formatting decisions: clang-format\n# sometimes makes strange choices.\n\nBasedOnStyle: Google\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nCpp11BracedListStyle: false\nIndentCaseLabels: false\nDerivePointerBinding: false\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.609375,
          "content": "---\nChecks: '\n  ,readability-avoid-const-params-in-decls,\n  ,readability-inconsistent-declaration-parameter-name,\n  ,readability-non-const-parameter,\n  ,readability-redundant-string-cstr,\n  ,readability-redundant-string-init,\n  ,readability-simplify-boolean-expr,\n  ,cppcoreguidelines-pro-type-cstyle-cast,\n'\nWarningsAsErrors: '\n  ,readability-avoid-const-params-in-decls,\n  ,readability-inconsistent-declaration-parameter-name,\n  ,readability-non-const-parameter,\n  ,readability-redundant-string-cstr,\n  ,readability-redundant-string-init,\n  ,readability-simplify-boolean-expr,\n  ,cppcoreguidelines-pro-type-cstyle-cast,\n'\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1484375,
          "content": "root = true\n\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 2\ninsert_final_newline = true\nend_of_line = lf\n\n[CMakeLists.txt]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.62890625,
          "content": "*.pyc\n*.obj\n*.exe\n*.pdb\n*.ilk\n/build*/\n/build.ninja\n/ninja\n/ninja.bootstrap\n/build_log_perftest\n/canon_perftest\n/clparser_perftest\n/elide_middle_perftest\n/depfile_parser_perftest\n/hash_collision_bench\n/ninja_test\n/manifest_parser_perftest\n/graph.png\n/doc/manual.html\n/doc/doxygen\n*.patch\n.DS_Store\n\n# Eclipse project files\n.project\n.cproject\n\n# SublimeText project files\n*.sublime-project\n*.sublime-workspace\n\n# Ninja output\n.ninja_deps\n.ninja_log\n\n# Visual Studio Code project files\n/.vscode/\n/.ccls-cache/\n\n# Qt Creator project files\n/CMakeLists.txt.user\n\n# clangd\n/.clangd/\n/compile_commands.json\n/.cache/\n\n# Visual Studio files\n/.vs/\n/out/\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 10.2294921875,
          "content": "cmake_minimum_required(VERSION 3.15)\n\ninclude(CheckSymbolExists)\ninclude(CheckIPOSupported)\n\noption(NINJA_BUILD_BINARY \"Build ninja binary\" ON)\noption(NINJA_FORCE_PSELECT \"Use pselect() even on platforms that provide ppoll()\" OFF)\n\nproject(ninja CXX)\n\n# --- optional link-time optimization\ncheck_ipo_supported(RESULT lto_supported OUTPUT error)\n\nif(lto_supported)\n\tmessage(STATUS \"IPO / LTO enabled\")\n\tset(CMAKE_POLICY_DEFAULT_CMP0069 NEW)\n\tset(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE)\nelse()\n\tmessage(STATUS \"IPO / LTO not supported: <${error}>\")\nendif()\n\n# --- compiler flags\nif(MSVC)\n\tset(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n\tstring(REPLACE \"/GR\" \"\" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})\n\t# Note that these settings are separately specified in configure.py, and\n\t# these lists should be kept in sync.\n\tadd_compile_options(/W4 /wd4100 /wd4267 /wd4706 /wd4702 /wd4244 /GR- /Zc:__cplusplus)\n\tadd_compile_definitions(_CRT_SECURE_NO_WARNINGS)\nelse()\n\tinclude(CheckCXXCompilerFlag)\n\tcheck_cxx_compiler_flag(-Wno-deprecated flag_no_deprecated)\n\tif(flag_no_deprecated)\n\t\tadd_compile_options(-Wno-deprecated)\n\tendif()\n\tif(CMAKE_VERSION VERSION_LESS 3.24)\n\t\tcheck_cxx_compiler_flag(-fdiagnostics-color flag_color_diag)\n\t\tif(flag_color_diag)\n\t\t\tadd_compile_options(-fdiagnostics-color)\n\t\tendif()\n\telseif(NOT DEFINED ENV{CMAKE_COLOR_DIAGNOSTICS})\n\t\tset(CMAKE_COLOR_DIAGNOSTICS ON)\n\tendif()\n\n\tif(NOT NINJA_FORCE_PSELECT)\n\t\t# Check whether ppoll() is usable on the target platform.\n\t\t# Set -DUSE_PPOLL=1 if this is the case.\n\t\t#\n\t\t# NOTE: Use check_cxx_symbol_exists() instead of check_symbol_exists()\n\t\t# because on Linux, <poll.h> only exposes the symbol when _GNU_SOURCE\n\t\t# is defined.\n\t\t#\n\t\t# Both g++ and clang++ define the symbol by default, because the C++\n\t\t# standard library headers require it, but *not* gcc and clang, which\n\t\t# are used by check_symbol_exists().\n\t\tinclude(CheckCXXSymbolExists)\n\t\tcheck_cxx_symbol_exists(ppoll poll.h HAVE_PPOLL)\n\t\tif(HAVE_PPOLL)\n\t\t\tadd_compile_definitions(USE_PPOLL=1)\n\t\tendif()\n\tendif()\nendif()\n\n# --- optional re2c\nset(RE2C_MAJOR_VERSION 0)\nfind_program(RE2C re2c)\nif(RE2C)\n\texecute_process(COMMAND \"${RE2C}\" --vernum OUTPUT_VARIABLE RE2C_RAW_VERSION)\n\tmath(EXPR RE2C_MAJOR_VERSION \"${RE2C_RAW_VERSION} / 10000\")\nendif()\nif(${RE2C_MAJOR_VERSION} GREATER 1)\n\t# the depfile parser and ninja lexers are generated using re2c.\n\tfunction(re2c IN OUT)\n\t\tadd_custom_command(DEPENDS ${IN} OUTPUT ${OUT}\n\t\t\tCOMMAND ${RE2C} -b -i --no-generation-date --no-version -o ${OUT} ${IN}\n\t\t)\n\tendfunction()\n\tre2c(${PROJECT_SOURCE_DIR}/src/depfile_parser.in.cc ${PROJECT_BINARY_DIR}/depfile_parser.cc)\n\tre2c(${PROJECT_SOURCE_DIR}/src/lexer.in.cc ${PROJECT_BINARY_DIR}/lexer.cc)\n\tadd_library(libninja-re2c OBJECT ${PROJECT_BINARY_DIR}/depfile_parser.cc ${PROJECT_BINARY_DIR}/lexer.cc)\nelse()\n\tmessage(WARNING \"re2c 2 or later was not found; changes to src/*.in.cc will not affect your build.\")\n\tadd_library(libninja-re2c OBJECT src/depfile_parser.cc src/lexer.cc)\nendif()\ntarget_include_directories(libninja-re2c PRIVATE src)\n\n# --- Check for 'browse' mode support\nfunction(check_platform_supports_browse_mode RESULT)\n\t# Make sure the inline.sh script works on this platform.\n\t# It uses the shell commands such as 'od', which may not be available.\n\n\texecute_process(\n\t\tCOMMAND sh -c \"echo 'TEST' | src/inline.sh var\"\n\t\tWORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n\t\tRESULT_VARIABLE inline_result\n\t\tOUTPUT_QUIET\n\t\tERROR_QUIET\n\t)\n\tif(NOT inline_result EQUAL \"0\")\n\t\t# The inline script failed, so browse mode is not supported.\n\t\tset(${RESULT} \"0\" PARENT_SCOPE)\n\t\tif(NOT WIN32)\n\t\t\tmessage(WARNING \"browse feature omitted due to inline script failure\")\n\t\tendif()\n\t\treturn()\n\tendif()\n\n\t# Now check availability of the unistd header\n\tcheck_symbol_exists(fork \"unistd.h\" HAVE_FORK)\n\tcheck_symbol_exists(pipe \"unistd.h\" HAVE_PIPE)\n\tset(browse_supported 0)\n\tif (HAVE_FORK AND HAVE_PIPE)\n\t\tset(browse_supported 1)\n\tendif ()\n\tset(${RESULT} \"${browse_supported}\" PARENT_SCOPE)\n\tif(NOT browse_supported)\n\t\tmessage(WARNING \"browse feature omitted due to missing `fork` and `pipe` functions\")\n\tendif()\n\nendfunction()\n\nset(NINJA_PYTHON \"python\" CACHE STRING \"Python interpreter to use for the browse tool\")\n\ncheck_platform_supports_browse_mode(platform_supports_ninja_browse)\n\n# Core source files all build into ninja library.\nadd_library(libninja OBJECT\n\tsrc/build_log.cc\n\tsrc/build.cc\n\tsrc/clean.cc\n\tsrc/clparser.cc\n\tsrc/dyndep.cc\n\tsrc/dyndep_parser.cc\n\tsrc/debug_flags.cc\n\tsrc/deps_log.cc\n\tsrc/disk_interface.cc\n\tsrc/edit_distance.cc\n\tsrc/elide_middle.cc\n\tsrc/eval_env.cc\n\tsrc/graph.cc\n\tsrc/graphviz.cc\n\tsrc/json.cc\n\tsrc/line_printer.cc\n\tsrc/manifest_parser.cc\n\tsrc/metrics.cc\n\tsrc/missing_deps.cc\n\tsrc/parser.cc\n\tsrc/real_command_runner.cc\n\tsrc/state.cc\n\tsrc/status_printer.cc\n\tsrc/string_piece_util.cc\n\tsrc/util.cc\n\tsrc/version.cc\n)\nif(WIN32)\n\ttarget_sources(libninja PRIVATE\n\t\tsrc/subprocess-win32.cc\n\t\tsrc/includes_normalize-win32.cc\n\t\tsrc/msvc_helper-win32.cc\n\t\tsrc/msvc_helper_main-win32.cc\n\t\tsrc/getopt.c\n\t\tsrc/minidump-win32.cc\n\t)\n\t# Build getopt.c, which can be compiled as either C or C++, as C++\n\t# so that build environments which lack a C compiler, but have a C++\n\t# compiler may build ninja.\n\tset_source_files_properties(src/getopt.c PROPERTIES LANGUAGE CXX)\n\n\t# windows.h defines min() and max() which conflict with std::min()\n\t# and std::max(), which both might be used in sources. Avoid compile\n\t# errors by telling windows.h to not define those two.\n\tadd_compile_definitions(NOMINMAX)\nelse()\n\ttarget_sources(libninja PRIVATE src/subprocess-posix.cc)\n\tif(CMAKE_SYSTEM_NAME STREQUAL \"OS400\" OR CMAKE_SYSTEM_NAME STREQUAL \"AIX\")\n\t\ttarget_sources(libninja PRIVATE src/getopt.c)\n\t\t# Build getopt.c, which can be compiled as either C or C++, as C++\n\t\t# so that build environments which lack a C compiler, but have a C++\n\t\t# compiler may build ninja.\n\t\tset_source_files_properties(src/getopt.c PROPERTIES LANGUAGE CXX)\n\tendif()\n\n\t# Needed for perfstat_cpu_total\n\tif(CMAKE_SYSTEM_NAME STREQUAL \"AIX\")\n\t\ttarget_link_libraries(libninja PUBLIC \"-lperfstat\")\n\tendif()\nendif()\n\ntarget_compile_features(libninja PUBLIC cxx_std_11)\ntarget_compile_features(libninja-re2c PUBLIC cxx_std_11)\n\n#Fixes GetActiveProcessorCount on MinGW\nif(MINGW)\ntarget_compile_definitions(libninja PRIVATE _WIN32_WINNT=0x0601 __USE_MINGW_ANSI_STDIO=1)\nendif()\n\n# On IBM i (identified as \"OS400\" for compatibility reasons) and AIX, this fixes missing\n# PRId64 (and others) at compile time in C++ sources\nif(CMAKE_SYSTEM_NAME STREQUAL \"OS400\" OR CMAKE_SYSTEM_NAME STREQUAL \"AIX\")\n\tadd_compile_definitions(__STDC_FORMAT_MACROS)\nendif()\n\n# Main executable is library plus main() function.\nif(NINJA_BUILD_BINARY)\n\tadd_executable(ninja src/ninja.cc)\n\ttarget_link_libraries(ninja PRIVATE libninja libninja-re2c)\n\n\tif(WIN32)\n\t\ttarget_sources(ninja PRIVATE windows/ninja.manifest)\n\tendif()\n\n\toption(NINJA_CLANG_TIDY \"Run clang-tidy on source files\" OFF)\n\tif(NINJA_CLANG_TIDY)\n\t\tset_target_properties(libninja PROPERTIES CXX_CLANG_TIDY \"clang-tidy;--use-color\")\n\t\tset_target_properties(ninja    PROPERTIES CXX_CLANG_TIDY \"clang-tidy;--use-color\")\n\tendif()\nendif()\n\n# Adds browse mode into the ninja binary if it's supported by the host platform.\nif(platform_supports_ninja_browse)\n\t# Inlines src/browse.py into the browse_py.h header, so that it can be included\n\t# by src/browse.cc\n\tadd_custom_command(\n\t\tOUTPUT build/browse_py.h\n\t\tMAIN_DEPENDENCY src/browse.py\n\t\tDEPENDS src/inline.sh\n\t\tCOMMAND ${CMAKE_COMMAND} -E make_directory ${PROJECT_BINARY_DIR}/build\n\t\tCOMMAND src/inline.sh kBrowsePy\n\t\t\t\t\t\t< src/browse.py\n\t\t\t\t\t\t> ${PROJECT_BINARY_DIR}/build/browse_py.h\n\t\tWORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n\t\tVERBATIM\n\t)\n\n\tif(NINJA_BUILD_BINARY)\n\t\ttarget_compile_definitions(ninja PRIVATE NINJA_HAVE_BROWSE)\n\t\ttarget_sources(ninja PRIVATE src/browse.cc)\n\tendif()\n\tset_source_files_properties(src/browse.cc\n\t\tPROPERTIES\n\t\t\tOBJECT_DEPENDS \"${PROJECT_BINARY_DIR}/build/browse_py.h\"\n\t\t\tINCLUDE_DIRECTORIES \"${PROJECT_BINARY_DIR}\"\n\t\t\tCOMPILE_DEFINITIONS NINJA_PYTHON=\"${NINJA_PYTHON}\"\n\t)\nendif()\n\ninclude(CTest)\nif(BUILD_TESTING)\n\n  # Can be removed if cmake min version is >=3.24\n  if (POLICY CMP0135)\n    cmake_policy(SET CMP0135 NEW)\n  endif()\n\n  find_package(GTest)\n  if(NOT GTest_FOUND)\n    include(FetchContent)\n    FetchContent_Declare(\n      googletest\n      URL https://github.com/google/googletest/archive/refs/tags/release-1.12.1.tar.gz\n      URL_HASH SHA256=81964fe578e9bd7c94dfdb09c8e4d6e6759e19967e397dbea48d1c10e45d0df2\n    )\n    FetchContent_MakeAvailable(googletest)\n  endif()\n\n  # Tests all build into ninja_test executable.\n  add_executable(ninja_test\n    src/build_log_test.cc\n    src/build_test.cc\n    src/clean_test.cc\n    src/clparser_test.cc\n    src/depfile_parser_test.cc\n    src/deps_log_test.cc\n    src/disk_interface_test.cc\n    src/dyndep_parser_test.cc\n    src/edit_distance_test.cc\n    src/elide_middle_test.cc\n    src/explanations_test.cc\n    src/graph_test.cc\n    src/json_test.cc\n    src/lexer_test.cc\n    src/manifest_parser_test.cc\n    src/missing_deps_test.cc\n    src/ninja_test.cc\n    src/state_test.cc\n    src/string_piece_util_test.cc\n    src/subprocess_test.cc\n    src/test.cc\n    src/util_test.cc\n  )\n  if(WIN32)\n    target_sources(ninja_test PRIVATE src/includes_normalize_test.cc src/msvc_helper_test.cc\n      windows/ninja.manifest)\n\n    if(MSVC)\n      # Silence warnings about using unlink rather than _unlink\n      target_compile_definitions(ninja_test PRIVATE _CRT_NONSTDC_NO_DEPRECATE)\n    endif()\n  endif()\n  find_package(Threads REQUIRED)\n  target_link_libraries(ninja_test PRIVATE libninja libninja-re2c GTest::gtest Threads::Threads)\n\n  foreach(perftest\n    build_log_perftest\n    canon_perftest\n    clparser_perftest\n    depfile_parser_perftest\n    elide_middle_perftest\n    hash_collision_bench\n    manifest_parser_perftest\n  )\n    add_executable(${perftest} src/${perftest}.cc)\n    target_link_libraries(${perftest} PRIVATE libninja libninja-re2c)\n  endforeach()\n\n  if(CMAKE_SYSTEM_NAME STREQUAL \"AIX\" AND CMAKE_SIZEOF_VOID_P EQUAL 4)\n    # These tests require more memory than will fit in the standard AIX shared stack/heap (256M)\n    target_link_options(hash_collision_bench PRIVATE \"-Wl,-bmaxdata:0x80000000\")\n    target_link_options(manifest_parser_perftest PRIVATE \"-Wl,-bmaxdata:0x80000000\")\n  endif()\n\n  add_test(NAME NinjaTest COMMAND ninja_test)\nendif()\n\nif(NINJA_BUILD_BINARY)\n\tinstall(TARGETS ninja)\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.416015625,
          "content": "# How to successfully make changes to Ninja\n\nWe're very wary of changes that increase the complexity of Ninja (in particular,\nnew build file syntax or command-line flags) or increase the maintenance burden\nof Ninja. Ninja is already successfully used by hundreds of developers for large\nprojects and it already achieves (most of) the goals we set out for it to do.\nIt's probably best to discuss new feature ideas on the\n[mailing list](https://groups.google.com/forum/#!forum/ninja-build) or in an\nissue before creating a PR.\n\n## Coding guidelines\n\nGenerally it's the\n[Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html) with\na few additions:\n\n* We have used `using namespace std;` a lot in the past. For new contributions,\n  please try to avoid relying on it and instead whenever possible use `std::`.\n  However, please do not change existing code simply to add `std::` unless your\n  contribution already needs to change that line of code anyway.\n* Use `///` for [Doxygen](http://www.doxygen.nl/) (use `\\a` to refer to\n  arguments).\n* It's not necessary to document each argument, especially when they're\n  relatively self-evident (e.g. in\n  `CanonicalizePath(string* path, string* err)`, the arguments are hopefully\n  obvious).\n\nIf you're unsure about code formatting, please use\n[clang-format](https://clang.llvm.org/docs/ClangFormat.html). However, please do\nnot format code that is not otherwise part of your contribution.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2010\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.5166015625,
          "content": "# Ninja\n\nNinja is a small build system with a focus on speed.\nhttps://ninja-build.org/\n\nSee [the manual](https://ninja-build.org/manual.html) or\n`doc/manual.asciidoc` included in the distribution for background\nand more details.\n\nBinaries for Linux, Mac and Windows are available on\n  [GitHub](https://github.com/ninja-build/ninja/releases).\nRun `./ninja -h` for Ninja help.\n\nInstallation is not necessary because the only required file is the\nresulting ninja binary. However, to enable features like Bash\ncompletion and Emacs and Vim editing modes, some files in misc/ must be\ncopied to appropriate locations.\n\nIf you're interested in making changes to Ninja, read\n[CONTRIBUTING.md](CONTRIBUTING.md) first.\n\n## Building Ninja itself\n\nYou can either build Ninja via the custom generator script written in Python or\nvia CMake. For more details see\n[the wiki](https://github.com/ninja-build/ninja/wiki).\n\n### Python\n\n```\n./configure.py --bootstrap\n```\n\nThis will generate the `ninja` binary and a `build.ninja` file you can now use\nto build Ninja with itself.\n\nIf you have a GoogleTest source directory, you can build the tests\nby passing its path with `--gtest-source-dir=PATH` option, or the\n`GTEST_SOURCE_DIR` environment variable, e.g.:\n\n```\n./configure.py --bootstrap --gtest-source-dir=/path/to/googletest\n./ninja all     # build ninja_test and other auxiliary binaries\n./ninja_test`   # run the unit-test suite.\n```\n\nUse the CMake build below if you want to use a preinstalled binary\nversion of the library.\n\n### CMake\n\n```\ncmake -Bbuild-cmake\ncmake --build build-cmake\n```\n\nThe `ninja` binary will now be inside the `build-cmake` directory (you can\nchoose any other name you like).\n\nTo run the unit tests:\n\n```\n./build-cmake/ninja_test\n```\n\n## Generating documentation\n\n### Ninja Manual\n\nYou must have `asciidoc` and `xsltproc` in your PATH, then do:\n\n```\n./configure.py\nninja manual doc/manual.pdf\n```\n\nWhich will generate `doc/manual.html`.\n\nTo generate the PDF version of the manual, you must have `dblatext` in your PATH then do:\n\n```\n./configure.py    # only if you didn't do it previously.\nninja doc/manual.pdf\n```\n\nWhich will generate `doc/manual.pdf`.\n\n### Doxygen documentation\n\nIf you have `doxygen` installed, you can build documentation extracted from C++\ndeclarations and comments to help you navigate the code. Note that Ninja is a standalone\nexecutable, not a library, so there is no public API, all details exposed here are\ninternal.\n\n```\n./configure.py   # if needed\nninja doxygen\n```\n\nThen open `doc/doxygen/html/index.html` in a browser to look at it.\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 1.5107421875,
          "content": "Notes to myself on all the steps to make for a Ninja release.\n\n### Push new release branch:\n1. Run afl-fuzz for a day or so and run ninja_test\n2. Consider sending a heads-up to the ninja-build mailing list first\n3. Make sure branches 'master' and 'release' are synced up locally\n4. Update src/version.cc with new version (with \".git\"), then\n   ```\n   git commit -am 'mark this 1.5.0.git'\n   ```\n5. git checkout release; git merge master\n6. Fix version number in src/version.cc (it will likely conflict in the above)\n7. Fix version in doc/manual.asciidoc (exists only on release branch)\n8. commit, tag, push (don't forget to push --tags)\n   ```\n   git commit -am v1.5.0; git push origin release\n   git tag v1.5.0; git push --tags\n   # Push the 1.5.0.git change on master too:\n   git checkout master; git push origin master\n   ```\n9. Construct release notes from prior notes\n\n   credits: `git shortlog -s --no-merges REV..`\n\n\n### Release on GitHub:\n1. Go to [Tags](https://github.com/ninja-build/ninja/tags)\n2. Open the newly created tag and select \"Create release from tag\"\n3. Create the release which will trigger a build which automatically attaches\n   the binaries\n\n### Make announcement on mailing list:\n1. copy old mail\n\n### Update website:\n1. Make sure your ninja checkout is on the v1.5.0 tag\n2. Clone https://github.com/ninja-build/ninja-build.github.io\n3. In that repo, `./update-docs.sh`\n4. Update index.html with newest version and link to release notes\n5. `git commit -m 'run update-docs.sh, 1.5.0 release'`\n6. `git push origin master`\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.8310546875,
          "content": "version: 1.0.{build}\nimage:\n  - Visual Studio 2017\n  - Ubuntu2204\n\nenvironment:\n  CLICOLOR_FORCE: 1\n  CHERE_INVOKING: 1 # Tell Bash to inherit the current working directory\n  matrix:\n    - MSYSTEM: MINGW64\n    - MSYSTEM: LINUX\n\nmatrix:\n  exclude:\n    - image: Visual Studio 2017\n      MSYSTEM: LINUX\n    - image: Ubuntu2204\n      MSYSTEM: MINGW64\n\nfor:\n  -\n    matrix:\n      only:\n        - MSYSTEM: MINGW64\n    build_script:\n      ps: \"C:\\\\msys64\\\\usr\\\\bin\\\\bash -lc @\\\"\\n\n      pacman -S --quiet --noconfirm --needed re2c 2>&1\\n\n      ./configure.py --bootstrap --platform mingw 2>&1\\n\n      ./ninja all\\n\n      ./misc/ninja_syntax_test.py 2>&1\\n\\\"@\"\n  - matrix:\n      only:\n        - image: Ubuntu2204\n    build_script:\n      - ./configure.py --bootstrap\n      - ./ninja all\n      - misc/ninja_syntax_test.py\n      - misc/output_test.py\n\ntest: off\n"
        },
        {
          "name": "configure.py",
          "type": "blob",
          "size": 27.34765625,
          "content": "#!/usr/bin/env python3\n#\n# Copyright 2001 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Script that generates the build.ninja for ninja itself.\n\nProjects that use ninja themselves should either write a similar script\nor use a meta-build system that supports Ninja output.\"\"\"\n\nfrom optparse import OptionParser\nimport os\nimport shlex\nimport subprocess\nimport sys\nfrom typing import Optional, Union, Dict, List, Any, TYPE_CHECKING\n\nsourcedir = os.path.dirname(os.path.realpath(__file__))\nsys.path.insert(0, os.path.join(sourcedir, 'misc'))\nif TYPE_CHECKING:\n    import misc.ninja_syntax as ninja_syntax\nelse:\n    import ninja_syntax\n\n\nclass Platform(object):\n    \"\"\"Represents a host/target platform and its specific build attributes.\"\"\"\n    def __init__(self, platform: Optional[str]) -> None:\n        self._platform = platform\n        if self._platform is not None:\n            return\n        self._platform = sys.platform\n        if self._platform.startswith('linux'):\n            self._platform = 'linux'\n        elif self._platform.startswith('freebsd'):\n            self._platform = 'freebsd'\n        elif self._platform.startswith('gnukfreebsd'):\n            self._platform = 'freebsd'\n        elif self._platform.startswith('openbsd'):\n            self._platform = 'openbsd'\n        elif self._platform.startswith('solaris') or self._platform == 'sunos5':\n            self._platform = 'solaris'\n        elif self._platform.startswith('mingw'):\n            self._platform = 'mingw'\n        elif self._platform.startswith('win'):\n            self._platform = 'msvc'\n        elif self._platform.startswith('bitrig'):\n            self._platform = 'bitrig'\n        elif self._platform.startswith('netbsd'):\n            self._platform = 'netbsd'\n        elif self._platform.startswith('aix'):\n            self._platform = 'aix'\n        elif self._platform.startswith('os400'):\n            self._platform = 'os400'\n        elif self._platform.startswith('dragonfly'):\n            self._platform = 'dragonfly'\n\n    @staticmethod\n    def known_platforms() -> List[str]:\n      return ['linux', 'darwin', 'freebsd', 'openbsd', 'solaris', 'sunos5',\n              'mingw', 'msvc', 'gnukfreebsd', 'bitrig', 'netbsd', 'aix',\n              'dragonfly']\n\n    def platform(self) -> str:\n        return self._platform  # type: ignore # Incompatible return value type\n\n    def is_linux(self) -> bool:\n        return self._platform == 'linux'\n\n    def is_mingw(self) -> bool:\n        return self._platform == 'mingw'\n\n    def is_msvc(self) -> bool:\n        return self._platform == 'msvc'\n\n    def msvc_needs_fs(self) -> bool:\n        popen = subprocess.Popen(['cl', '/nologo', '/help'],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        out, err = popen.communicate()\n        return b'/FS' in out\n\n    def is_windows(self) -> bool:\n        return self.is_mingw() or self.is_msvc()\n\n    def is_solaris(self) -> bool:\n        return self._platform == 'solaris'\n\n    def is_aix(self) -> bool:\n        return self._platform == 'aix'\n\n    def is_os400_pase(self) -> bool:\n        return self._platform == 'os400' or os.uname().sysname.startswith('OS400')  # type: ignore # Module has no attribute \"uname\"\n\n    def uses_usr_local(self) -> bool:\n        return self._platform in ('freebsd', 'openbsd', 'bitrig', 'dragonfly', 'netbsd')\n\n    def supports_ppoll(self) -> bool:\n        return self._platform in ('freebsd', 'linux', 'openbsd', 'bitrig',\n                                  'dragonfly')\n\n    def supports_ninja_browse(self) -> bool:\n        return (not self.is_windows()\n                and not self.is_solaris()\n                and not self.is_aix())\n\n    def can_rebuild_in_place(self) -> bool:\n        return not (self.is_windows() or self.is_aix())\n\nclass Bootstrap:\n    \"\"\"API shim for ninja_syntax.Writer that instead runs the commands.\n\n    Used to bootstrap Ninja from scratch.  In --bootstrap mode this\n    class is used to execute all the commands to build an executable.\n    It also proxies all calls to an underlying ninja_syntax.Writer, to\n    behave like non-bootstrap mode.\n    \"\"\"\n    def __init__(self, writer: ninja_syntax.Writer, verbose: bool = False) -> None:\n        self.writer = writer\n        self.verbose = verbose\n        # Map of variable name => expanded variable value.\n        self.vars: Dict[str, str] = {}\n        # Map of rule name => dict of rule attributes.\n        self.rules: Dict[str, Dict[str, Any]] = {\n            'phony': {}\n        }\n\n    def comment(self, text: str) -> None:\n        return self.writer.comment(text)\n\n    def newline(self) -> None:\n        return self.writer.newline()\n\n    def variable(self, key: str, val: str) -> None:\n        # In bootstrap mode, we have no ninja process to catch /showIncludes\n        # output.\n        self.vars[key] = self._expand(val).replace('/showIncludes', '')\n        return self.writer.variable(key, val)\n\n    def rule(self, name: str, **kwargs: Any) -> None:\n        self.rules[name] = kwargs\n        return self.writer.rule(name, **kwargs)\n\n    def build(\n        self,\n        outputs: Union[str, List[str]],\n        rule: str,\n        inputs: Optional[Union[str, List[str]]] = None,\n        **kwargs: Any\n    ) -> List[str]:\n        ruleattr = self.rules[rule]\n        cmd = ruleattr.get('command')\n        if cmd is None:  # A phony rule, for example.\n            return  # type: ignore # Return value expected\n\n        # Implement just enough of Ninja variable expansion etc. to\n        # make the bootstrap build work.\n        local_vars = {\n            'in': self._expand_paths(inputs),\n            'out': self._expand_paths(outputs)\n        }\n        for key, val in kwargs.get('variables', []):\n            local_vars[key] = ' '.join(ninja_syntax.as_list(val))\n\n        self._run_command(self._expand(cmd, local_vars))\n\n        return self.writer.build(outputs, rule, inputs, **kwargs)\n\n    def default(self, paths: Union[str, List[str]]) -> None:\n        return self.writer.default(paths)\n\n    def _expand_paths(self, paths: Optional[Union[str, List[str]]]) -> str:\n        \"\"\"Expand $vars in an array of paths, e.g. from a 'build' block.\"\"\"\n        paths = ninja_syntax.as_list(paths)\n        return ' '.join(map(self._shell_escape, (map(self._expand, paths))))\n\n    def _expand(self, str: str, local_vars: Dict[str, str] = {}) -> str:\n        \"\"\"Expand $vars in a string.\"\"\"\n        return ninja_syntax.expand(str, self.vars, local_vars)\n\n    def _shell_escape(self, path: str) -> str:\n        \"\"\"Quote paths containing spaces.\"\"\"\n        return '\"%s\"' % path if ' ' in path else path\n\n    def _run_command(self, cmdline: str) -> None:\n        \"\"\"Run a subcommand, quietly.  Prints the full command on error.\"\"\"\n        try:\n            if self.verbose:\n                print(cmdline)\n            subprocess.check_call(cmdline, shell=True)\n        except subprocess.CalledProcessError:\n            print('when running: ', cmdline)\n            raise\n\n\nparser = OptionParser()\nprofilers = ['gmon', 'pprof']\nparser.add_option('--bootstrap', action='store_true',\n                  help='bootstrap a ninja binary from nothing')\nparser.add_option('--verbose', action='store_true',\n                  help='enable verbose build')\nparser.add_option('--platform',\n                  help='target platform (' +\n                       '/'.join(Platform.known_platforms()) + ')',\n                  choices=Platform.known_platforms())\nparser.add_option('--host',\n                  help='host platform (' +\n                       '/'.join(Platform.known_platforms()) + ')',\n                  choices=Platform.known_platforms())\nparser.add_option('--debug', action='store_true',\n                  help='enable debugging extras',)\nparser.add_option('--profile', metavar='TYPE',\n                  choices=profilers,\n                  help='enable profiling (' + '/'.join(profilers) + ')',)\nparser.add_option('--gtest-source-dir', metavar='PATH',\n                  help='Path to GoogleTest source directory. If not provided ' +\n                       'GTEST_SOURCE_DIR will be probed in the environment. ' +\n                       'Tests will not be built without a value.')\nparser.add_option('--with-python', metavar='EXE',\n                  help='use EXE as the Python interpreter',\n                  default=os.path.basename(sys.executable))\nparser.add_option('--force-pselect', action='store_true',\n                  help='ppoll() is used by default where available, '\n                       'but some platforms may need to use pselect instead',)\n(options, args) = parser.parse_args()\nif args:\n    print('ERROR: extra unparsed command-line arguments:', args)\n    sys.exit(1)\n\nplatform = Platform(options.platform)\nif options.host:\n    host = Platform(options.host)\nelse:\n    host = platform\n\nBUILD_FILENAME = 'build.ninja'\nninja_writer = ninja_syntax.Writer(open(BUILD_FILENAME, 'w'))\nn: Union[ninja_syntax.Writer, Bootstrap] = ninja_writer\n\nif options.bootstrap:\n    # Make the build directory.\n    try:\n        os.mkdir('build')\n    except OSError:\n        pass\n    # Wrap ninja_writer with the Bootstrapper, which also executes the\n    # commands.\n    print('bootstrapping ninja...')\n    n = Bootstrap(n, verbose=options.verbose)  # type: ignore # Incompatible types in assignment\n\nn.comment('This file is used to build ninja itself.')\nn.comment('It is generated by ' + os.path.basename(__file__) + '.')\nn.newline()\n\nn.variable('ninja_required_version', '1.3')\nn.newline()\n\nn.comment('The arguments passed to configure.py, for rerunning it.')\nconfigure_args = sys.argv[1:]\nif '--bootstrap' in configure_args:\n    configure_args.remove('--bootstrap')\nn.variable('configure_args', ' '.join(configure_args))\nenv_keys = set(['CXX', 'AR', 'CFLAGS', 'CXXFLAGS', 'LDFLAGS'])\nconfigure_env = dict((k, os.environ[k]) for k in os.environ if k in env_keys)\nif configure_env:\n    config_str = ' '.join([k + '=' + shlex.quote(configure_env[k])\n                           for k in configure_env])\n    n.variable('configure_env', config_str + '$ ')\nn.newline()\n\nCXX = configure_env.get('CXX', 'c++')\nobjext = '.o'\nif platform.is_msvc():\n    CXX = 'cl'\n    objext = '.obj'\n\ndef src(filename: str) -> str:\n    return os.path.join('$root', 'src', filename)\ndef built(filename: str) -> str:\n    return os.path.join('$builddir', filename)\ndef doc(filename: str) -> str:\n    return os.path.join('$root', 'doc', filename)\ndef cc(name: str, **kwargs: Any) -> List[str]:\n    return n.build(built(name + objext), 'cxx', src(name + '.c'), **kwargs)\ndef cxx(name: str, **kwargs: Any) -> List[str]:\n    return n.build(built(name + objext), 'cxx', src(name + '.cc'), **kwargs)\ndef binary(name: str) -> str:\n    if platform.is_windows():\n        exe = name + '.exe'\n        n.build(name, 'phony', exe)\n        return exe\n    return name\n\nroot = sourcedir\nif root == os.getcwd():\n    # In the common case where we're building directly in the source\n    # tree, simplify all the paths to just be cwd-relative.\n    root = '.'\nn.variable('root', root)\nn.variable('builddir', 'build')\nn.variable('cxx', CXX)\nif platform.is_msvc():\n    n.variable('ar', 'link')\nelse:\n    n.variable('ar', configure_env.get('AR', 'ar'))\n\ndef search_system_path(file_name: str) -> Optional[str]:  # type: ignore # Missing return statement\n  \"\"\"Find a file in the system path.\"\"\"\n  for dir in os.environ['path'].split(';'):\n    path = os.path.join(dir, file_name)\n    if os.path.exists(path):\n      return path\n\n# Note that build settings are separately specified in CMakeLists.txt and\n# these lists should be kept in sync.\nif platform.is_msvc():\n    if not search_system_path('cl.exe'):\n        raise Exception('cl.exe not found. Run again from the Developer Command Prompt for VS')\n    cflags = ['/showIncludes',\n              '/nologo',  # Don't print startup banner.\n              '/utf-8',\n              '/Zi',  # Create pdb with debug info.\n              '/W4',  # Highest warning level.\n              '/WX',  # Warnings as errors.\n              '/wd4530', '/wd4100', '/wd4706', '/wd4244',\n              '/wd4512', '/wd4800', '/wd4702',\n              # Disable warnings about constant conditional expressions.\n              '/wd4127',\n              # Disable warnings about passing \"this\" during initialization.\n              '/wd4355',\n              # Disable warnings about ignored typedef in DbgHelp.h\n              '/wd4091',\n              '/GR-',  # Disable RTTI.\n              '/Zc:__cplusplus',\n              # Disable size_t -> int truncation warning.\n              # We never have strings or arrays larger than 2**31.\n              '/wd4267',\n              '/DNOMINMAX', '/D_CRT_SECURE_NO_WARNINGS',\n              '/D_HAS_EXCEPTIONS=0',\n              '/DNINJA_PYTHON=\"%s\"' % options.with_python]\n    if platform.msvc_needs_fs():\n        cflags.append('/FS')\n    ldflags = ['/DEBUG', '/libpath:$builddir']\n    if not options.debug:\n        cflags += ['/Ox', '/DNDEBUG', '/GL']\n        ldflags += ['/LTCG', '/OPT:REF', '/OPT:ICF']\nelse:\n    cflags = ['-g', '-Wall', '-Wextra',\n              '-Wno-deprecated',\n              '-Wno-missing-field-initializers',\n              '-Wno-unused-parameter',\n              '-fno-rtti',\n              '-fno-exceptions',\n              '-std=c++11',\n              '-fvisibility=hidden', '-pipe',\n              '-DNINJA_PYTHON=\"%s\"' % options.with_python]\n    if options.debug:\n        cflags += ['-D_GLIBCXX_DEBUG', '-D_GLIBCXX_DEBUG_PEDANTIC']\n        cflags.remove('-fno-rtti')  # Needed for above pedanticness.\n    else:\n        cflags += ['-O2', '-DNDEBUG']\n    try:\n        proc = subprocess.Popen(\n            [CXX, '-fdiagnostics-color', '-c', '-x', 'c++', '/dev/null',\n             '-o', '/dev/null'],\n            stdout=open(os.devnull, 'wb'), stderr=subprocess.STDOUT)\n        if proc.wait() == 0:\n            cflags += ['-fdiagnostics-color']\n    except:\n        pass\n    if platform.is_mingw():\n        cflags += ['-D_WIN32_WINNT=0x0601', '-D__USE_MINGW_ANSI_STDIO=1']\n    ldflags = ['-L$builddir']\n    if platform.uses_usr_local():\n        cflags.append('-I/usr/local/include')\n        ldflags.append('-L/usr/local/lib')\n    if platform.is_aix():\n        # printf formats for int64_t, uint64_t; large file support\n        cflags.append('-D__STDC_FORMAT_MACROS')\n        cflags.append('-D_LARGE_FILES')\n\n\nlibs = []\n\nif platform.is_mingw():\n    cflags.remove('-fvisibility=hidden');\n    ldflags.append('-static')\nelif platform.is_solaris():\n    cflags.remove('-fvisibility=hidden')\nelif platform.is_aix():\n    cflags.remove('-fvisibility=hidden')\nelif platform.is_msvc():\n    pass\nelse:\n    if options.profile == 'gmon':\n        cflags.append('-pg')\n        ldflags.append('-pg')\n    elif options.profile == 'pprof':\n        cflags.append('-fno-omit-frame-pointer')\n        libs.extend(['-Wl,--no-as-needed', '-lprofiler'])\n\nif platform.supports_ppoll() and not options.force_pselect:\n    cflags.append('-DUSE_PPOLL')\nif platform.supports_ninja_browse():\n    cflags.append('-DNINJA_HAVE_BROWSE')\n\n# Search for generated headers relative to build dir.\ncflags.append('-I.')\n\ndef shell_escape(str: str) -> str:\n    \"\"\"Escape str such that it's interpreted as a single argument by\n    the shell.\"\"\"\n\n    # This isn't complete, but it's just enough to make NINJA_PYTHON work.\n    if platform.is_windows():\n      return str\n    if '\"' in str:\n        return \"'%s'\" % str.replace(\"'\", \"\\\\'\")\n    return str\n\nif 'CFLAGS' in configure_env:\n    cflags.append(configure_env['CFLAGS'])\n    ldflags.append(configure_env['CFLAGS'])\nif 'CXXFLAGS' in configure_env:\n    cflags.append(configure_env['CXXFLAGS'])\n    ldflags.append(configure_env['CXXFLAGS'])\nn.variable('cflags', ' '.join(shell_escape(flag) for flag in cflags))\nif 'LDFLAGS' in configure_env:\n    ldflags.append(configure_env['LDFLAGS'])\nn.variable('ldflags', ' '.join(shell_escape(flag) for flag in ldflags))\n\nn.newline()\n\nif platform.is_msvc():\n    n.rule('cxx',\n        command='$cxx $cflags -c $in /Fo$out /Fd' + built('$pdb'),\n        description='CXX $out',\n        deps='msvc'  # /showIncludes is included in $cflags.\n    )\nelse:\n    n.rule('cxx',\n        command='$cxx -MMD -MT $out -MF $out.d $cflags -c $in -o $out',\n        depfile='$out.d',\n        deps='gcc',\n        description='CXX $out')\nn.newline()\n\nif host.is_msvc():\n    n.rule('ar',\n           command='lib /nologo /ltcg /out:$out $in',\n           description='LIB $out')\nelif host.is_mingw():\n    n.rule('ar',\n           command='$ar crs $out $in',\n           description='AR $out')\nelse:\n    n.rule('ar',\n           command='rm -f $out && $ar crs $out $in',\n           description='AR $out')\nn.newline()\n\nif platform.is_msvc():\n    n.rule('link',\n        command='$cxx $in $libs /nologo /link $ldflags /out:$out',\n        description='LINK $out')\nelse:\n    n.rule('link',\n        command='$cxx $ldflags -o $out $in $libs',\n        description='LINK $out')\nn.newline()\n\nobjs = []\n\nif platform.supports_ninja_browse():\n    n.comment('browse_py.h is used to inline browse.py.')\n    n.rule('inline',\n           command='\"%s\"' % src('inline.sh') + ' $varname < $in > $out',\n           description='INLINE $out')\n    n.build(built('browse_py.h'), 'inline', src('browse.py'),\n            implicit=src('inline.sh'),\n            variables=[('varname', 'kBrowsePy')])\n    n.newline()\n\n    objs += cxx('browse', order_only=built('browse_py.h'))\n    n.newline()\n\nn.comment('the depfile parser and ninja lexers are generated using re2c.')\ndef has_re2c() -> bool:\n    try:\n        proc = subprocess.Popen(['re2c', '-V'], stdout=subprocess.PIPE)\n        return int(proc.communicate()[0], 10) >= 1503\n    except OSError:\n        return False\nif has_re2c():\n    n.rule('re2c',\n           command='re2c -b -i --no-generation-date --no-version -o $out $in',\n           description='RE2C $out')\n    # Generate the .cc files in the source directory so we can check them in.\n    n.build(src('depfile_parser.cc'), 're2c', src('depfile_parser.in.cc'))\n    n.build(src('lexer.cc'), 're2c', src('lexer.in.cc'))\nelse:\n    print(\"warning: A compatible version of re2c (>= 0.15.3) was not found; \"\n           \"changes to src/*.in.cc will not affect your build.\")\nn.newline()\n\ncxxvariables = []\nif platform.is_msvc():\n    cxxvariables = [('pdb', 'ninja.pdb')]\n\nn.comment('Generate a library for `ninja-re2c`.')\nre2c_objs = []\nfor name in ['depfile_parser', 'lexer']:\n    re2c_objs += cxx(name, variables=cxxvariables)\nif platform.is_msvc():\n    n.build(built('ninja-re2c.lib'), 'ar', re2c_objs)\nelse:\n    n.build(built('libninja-re2c.a'), 'ar', re2c_objs)\nn.newline()\n\nn.comment('Core source files all build into ninja library.')\nobjs.extend(re2c_objs)\nfor name in ['build',\n             'build_log',\n             'clean',\n             'clparser',\n             'debug_flags',\n             'deps_log',\n             'disk_interface',\n             'dyndep',\n             'dyndep_parser',\n             'edit_distance',\n             'elide_middle',\n             'eval_env',\n             'graph',\n             'graphviz',\n             'json',\n             'line_printer',\n             'manifest_parser',\n             'metrics',\n             'missing_deps',\n             'parser',\n             'real_command_runner',\n             'state',\n             'status_printer',\n             'string_piece_util',\n             'util',\n             'version']:\n    objs += cxx(name, variables=cxxvariables)\nif platform.is_windows():\n    for name in ['subprocess-win32',\n                 'includes_normalize-win32',\n                 'msvc_helper-win32',\n                 'msvc_helper_main-win32']:\n        objs += cxx(name, variables=cxxvariables)\n    if platform.is_msvc():\n        objs += cxx('minidump-win32', variables=cxxvariables)\n    objs += cc('getopt')\nelse:\n    objs += cxx('subprocess-posix')\nif platform.is_aix():\n    objs += cc('getopt')\nif platform.is_msvc():\n    ninja_lib = n.build(built('ninja.lib'), 'ar', objs)\nelse:\n    ninja_lib = n.build(built('libninja.a'), 'ar', objs)\nn.newline()\n\nif platform.is_msvc():\n    libs.append('ninja.lib')\nelse:\n    libs.append('-lninja')\n\nif platform.is_aix() and not platform.is_os400_pase():\n    libs.append('-lperfstat')\n\nall_targets = []\n\nn.comment('Main executable is library plus main() function.')\nobjs = cxx('ninja', variables=cxxvariables)\nninja = n.build(binary('ninja'), 'link', objs, implicit=ninja_lib,\n                variables=[('libs', libs)])\nn.newline()\nall_targets += ninja\n\nif options.bootstrap:\n    # We've built the ninja binary.  Don't run any more commands\n    # through the bootstrap executor, but continue writing the\n    # build.ninja file.\n    n = ninja_writer\n\n# Build the ninja_test executable only if the GTest source directory\n# is provided explicitly. Either from the environment with GTEST_SOURCE_DIR\n# or with the --gtest-source-dir command-line option.\n#\n# Do not try to look for an installed binary version, and link against it\n# because doing so properly is platform-specific (use the CMake build for\n# this).\nif options.gtest_source_dir:\n    gtest_src_dir = options.gtest_source_dir\nelse:\n    gtest_src_dir = os.environ.get('GTEST_SOURCE_DIR')\n\nif gtest_src_dir:\n    # Verify GoogleTest source directory, and add its include directory\n    # to the global include search path (even for non-test sources) to\n    # keep the build plan generation simple.\n    gtest_all_cc = os.path.join(gtest_src_dir, 'googletest', 'src', 'gtest-all.cc')\n    if not os.path.exists(gtest_all_cc):\n        print('ERROR: Missing GoogleTest source file: %s' % gtest_all_cc)\n        sys.exit(1)\n\n    n.comment('Tests all build into ninja_test executable.')\n\n    # Test-specific version of cflags, must include the GoogleTest\n    # include directory. Also GoogleTest can only build with a C++14 compiler.\n    test_cflags = [f.replace('std=c++11', 'std=c++14') for f in cflags]\n    test_cflags.append('-I' + os.path.join(gtest_src_dir, 'googletest', 'include'))\n\n    test_variables = [('cflags', test_cflags)]\n    if platform.is_msvc():\n        test_variables += [('pdb', 'ninja_test.pdb')]\n\n    test_names = [\n        'build_log_test',\n        'build_test',\n        'clean_test',\n        'clparser_test',\n        'depfile_parser_test',\n        'deps_log_test',\n        'disk_interface_test',\n        'dyndep_parser_test',\n        'edit_distance_test',\n        'elide_middle_test',\n        'explanations_test',\n        'graph_test',\n        'json_test',\n        'lexer_test',\n        'manifest_parser_test',\n        'ninja_test',\n        'state_test',\n        'string_piece_util_test',\n        'subprocess_test',\n        'test',\n        'util_test',\n    ]\n    if platform.is_windows():\n        test_names += [\n            'includes_normalize_test',\n            'msvc_helper_test',\n        ]\n\n    objs = []\n    for name in test_names:\n        objs += cxx(name, variables=test_variables)\n\n    # Build GTest as a monolithic source file.\n    # This requires one extra include search path, so replace the\n    # value of 'cflags' in our list.\n    gtest_all_variables = test_variables[1:] + [\n      ('cflags', test_cflags + ['-I' + os.path.join(gtest_src_dir, 'googletest') ]),\n    ]\n    # Do not use cxx() directly to ensure the object file is under $builddir.\n    objs += n.build(built('gtest_all' + objext), 'cxx', gtest_all_cc, variables=gtest_all_variables)\n\n    ninja_test = n.build(binary('ninja_test'), 'link', objs, implicit=ninja_lib,\n                         variables=[('libs', libs)])\n    n.newline()\n    all_targets += ninja_test\n\nn.comment('Ancillary executables.')\n\nif platform.is_aix() and '-maix64' not in ldflags:\n    # Both hash_collision_bench and manifest_parser_perftest require more\n    # memory than will fit in the standard 32-bit AIX shared stack/heap (256M)\n    libs.append('-Wl,-bmaxdata:0x80000000')\n\nfor name in ['build_log_perftest',\n             'canon_perftest',\n             'elide_middle_perftest',\n             'depfile_parser_perftest',\n             'hash_collision_bench',\n             'manifest_parser_perftest',\n             'clparser_perftest']:\n  if platform.is_msvc():\n    cxxvariables = [('pdb', name + '.pdb')]\n  objs = cxx(name, variables=cxxvariables)\n  all_targets += n.build(binary(name), 'link', objs,\n                         implicit=ninja_lib, variables=[('libs', libs)])\n\nn.newline()\n\nn.comment('Generate a graph using the \"graph\" tool.')\nn.rule('gendot',\n       command='./ninja -t graph all > $out')\nn.rule('gengraph',\n       command='dot -Tpng $in > $out')\ndot = n.build(built('graph.dot'), 'gendot', ['ninja', 'build.ninja'])\nn.build('graph.png', 'gengraph', dot)\nn.newline()\n\nn.comment('Generate the manual using asciidoc.')\nn.rule('asciidoc',\n       command='asciidoc -b docbook -d book -o $out $in',\n       description='ASCIIDOC $out')\nn.rule('xsltproc',\n       command='xsltproc --nonet doc/docbook.xsl $in > $out',\n       description='XSLTPROC $out')\ndocbookxml = n.build(built('manual.xml'), 'asciidoc', doc('manual.asciidoc'))\nmanual = n.build(doc('manual.html'), 'xsltproc', docbookxml,\n                 implicit=[doc('style.css'), doc('docbook.xsl')])\nn.build('manual', 'phony',\n        order_only=manual)\nn.newline()\n\nn.rule('dblatex',\n       command='dblatex -q -o $out -p doc/dblatex.xsl $in',\n       description='DBLATEX $out')\nn.build(doc('manual.pdf'), 'dblatex', docbookxml,\n        implicit=[doc('dblatex.xsl')])\n\nn.comment('Generate Doxygen.')\nn.rule('doxygen',\n       command='doxygen $in',\n       description='DOXYGEN $in')\nn.variable('doxygen_mainpage_generator',\n           src('gen_doxygen_mainpage.sh'))\nn.rule('doxygen_mainpage',\n       command='$doxygen_mainpage_generator $in > $out',\n       description='DOXYGEN_MAINPAGE $out')\nmainpage = n.build(built('doxygen_mainpage'), 'doxygen_mainpage',\n                   ['README.md', 'COPYING'],\n                   implicit=['$doxygen_mainpage_generator'])\nn.build('doxygen', 'doxygen', doc('doxygen.config'),\n        implicit=mainpage)\nn.newline()\n\nif not host.is_mingw():\n    n.comment('Regenerate build files if build script changes.')\n    n.rule('configure',\n           command='${configure_env}%s $root/configure.py $configure_args' %\n               options.with_python,\n           generator=True)\n    n.build('build.ninja', 'configure',\n            implicit=['$root/configure.py',\n                      os.path.normpath('$root/misc/ninja_syntax.py')])\n    n.newline()\n\nn.default(ninja)\nn.newline()\n\nif host.is_linux():\n    n.comment('Packaging')\n    n.rule('rpmbuild',\n           command=\"misc/packaging/rpmbuild.sh\",\n           description='Building rpms..')\n    n.build('rpm', 'rpmbuild')\n    n.newline()\n\nn.build('all', 'phony', all_targets)\n\nn.close()  # type: ignore # Item \"Bootstrap\" of \"Writer | Bootstrap\" has no attribute \"close\"\nprint('wrote %s.' % BUILD_FILENAME)\n\nif options.bootstrap:\n    print('bootstrap complete.  rebuilding...')\n\n    rebuild_args = []\n\n    if platform.can_rebuild_in_place():\n        rebuild_args.append('./ninja')\n    else:\n        if platform.is_windows():\n            bootstrap_exe = 'ninja.bootstrap.exe'\n            final_exe = 'ninja.exe'\n        else:\n            bootstrap_exe = './ninja.bootstrap'\n            final_exe = './ninja'\n\n        if os.path.exists(bootstrap_exe):\n            os.unlink(bootstrap_exe)\n        os.rename(final_exe, bootstrap_exe)\n\n        rebuild_args.append(bootstrap_exe)\n\n    if options.verbose:\n        rebuild_args.append('-v')\n\n    subprocess.check_call(rebuild_args)\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "windows",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}