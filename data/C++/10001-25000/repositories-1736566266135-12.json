{
  "metadata": {
    "timestamp": 1736566266135,
    "page": 12,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "aristocratos/btop",
      "stars": 22063,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1181640625,
          "content": "[*.{cpp,h,hpp,sh,md,cfg,sample}]\nindent_style = tab\nindent_size = 4\n\n[*.{yml,yaml}]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0791015625,
          "content": "# gitginore template for creating Snap packages\n# website: https://snapcraft.io/\n\nparts/\nprime/\nstage/\n*.snap\n\n# Snapcraft global state tracking data(automatically generated)\n# https://forum.snapcraft.io/t/location-to-save-global-state/768\n/snap/.snapcraft/\n\n# Source archive packed by `snapcraft cleanbuild` before pushing to the LXD container\n/*_source.tar.bz2\n\n# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Compiled man page\nbtop.1\n\nbuild\nbin\nbtop\n/obj/\nconfig.h\n.*/\n\n# Optional libraries\nlib/rocm_smi_lib\n\n# Don't ignore .github directory\n!.github/\n\n# Ignore files created by Qt Creator\n*.config\n*.creator\n*.creator.user\n*.creator.user.*\n*.cflags\n*.cxxflags\n*.files\n*.includes\n\n# CMake\nCMakeLists.txt.user\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\n_deps\n\n# CLion\ncmake-build-*\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 15.517578125,
          "content": "## v1.4.0\n\nReferences | Description | Author(s)\n--- | --- | ---\n#703 | NetBSD Support | @fraggerfox\n#903 | Intel GPU support | @bjia56\n161e8f4 | Added warnings when toggling boxes and terminal size is to small | @aristocratos\n4210f5f | Fix missing core percentages, issue #792 | @aristocratos\n35857f8 | Various fixes for drawing GPU related information | @aristocratos\n#879 | fix divide 0 error when caculating disk usage percentage (#791) | @flylai\n#884 | fix io_graph_speeds parsing | @feihtthief\n#863 | V1 of Phoenix Night theme | @Firehawke\n3f384c0 | Fixed missing CPU core temps when too small to show core temp graphs, issues #792 #867 | @aristocratos\n97d2fb5 | Fixed missing IO graphs in IO mode, issue #867 | @aristocratos\n#840 | fix zero temp (#467) | @joske\n#850 | Fix comments (parsing) in theme files | @acidghost\n#806 | Add regex filtering | @imwints\n#836 | Fix typo in file existences check for voltage_now | @vsey\n#835 | Show time in days when remaining battery exceeds an estimation of 24h | @imwints\n#819 | (AMD Gpu) fix pwr_usage not being defined correctly during rsmi collection | @kalkafox\n#831 | macOS: fix crash if there exists a uid not associated with any user | @thecoder-001\n#796 | Fix rsmi device name buffer size | @davc0n\n#807 | Add gruvbox_light theme | @kk9uk\n#724 | Create man page for btop in Markdown | @ottok\n#734 | Include metadata in binary version output `btop --version` | @imwints\n#771 | collect: Fix reading of battery power draw on Linux | @Derppening\n\n## v1.3.2\n\nDescription | Author(s) | References\n--- | --- | ---\nfix: Can't detect librocm 6.0.x | @imwints, @aristocratos | #761\n\n## v1.3.1\n\nDescription | Author(s) | References\n--- | --- | ---\nGPU: Added support for dynamic loading of ROCm v6 libraries | @aristocratos, @fxzjshm | 5511131, #737\nIncrease max network interface name to 15 | @tessus | #714\nFix OpenBSD UTF-8 locale detection | @lcheylus, @imwints | #753, #717\nAdd hot-reloading of config file with CTRL+R or SIGUSR2 signal | @MartinPit | #722\nAdd battery power draw for linux and freebsd | @vsey | #689\nFix crash caused by string exception when cpu clock is exactly between 999.5 and 999.9 Mhz | @rkmcode | #735\nWrite newline at end of config file | @planet36 | #743\nAdd theme based on Everforest Dark Medium palette | @M-Sviridov | #746\nfix: don't mangle memory for zombie processes | @joske | #747\nShare common code from collect | @imwints | #756\nFixed incorrect used and available memory for OSX | | 4461a43\n\n## v1.3.0\n\n* Added Gpu Support Linux | @romner-set | PR #529\n\n* Added platform support for OpenBSD | @joske | PR #607\n\n* Enable macos clang | @muneebmahmed | PR #666\n\n* Fix Apple Silicon CPUs misprinted | @masiboss | PR #679\n\n* Cmake support for MacOS | @imwints | PR #675\n\n* Elementarish theme: color update according to Elementary palette | @stradicat | PR #660\n\n* Add alternative key codes for Delete, Insert, Home, End | @ivanp7 | PR #659\n\n* Fix scrollbar not clearing sometimes. | @DecklynKern | PR #643\n\n* Add keybind for toggling memory display mode in PROC box | @rahulaggarwal965 | PR #623\n\n* Minor string initialization improvement | @imwints | PR #636\n\n* Made disks statvfs logic asynchronous. | @crestfallnatwork | PR #633\n\n* Fix signal list on non-linux/weird linux platforms | @lvxnull | PR #630\n\n* Add option to accumulate a child's resources in parent in tree-view | @imwints | PR #618\n\n* Add CMake support for Linux | @imwints | PR #589\n\n* Horizon theme | @SidVeld | PR #610\n\n* Fix short conversion of 1000-1023 *iB | @scorpion-26 | #609\n\n* Fix integer overflows in btop_collect.cpp | @dorrellmw | #546\n\n* Support compiling with LLVM | @imwints | #510\n\n* Fix getting zfs pool name with '.' char in freebsd | @jfouquart | #602\n\n* [macos/freebsd] support gcc13 | @joske | #600\n\n* FreeBSD swap info | @rrveex | #560\n\n* Create adwaita.theme | @flipflop133 | #485\n\n* Try get terminal size of \"/dev/tty\" if stdout fails | @imwints | PR #627\n\n* Refresh rate program argument | @imwints | PR #640\n\n* Improved error handling when determining the config directory | @imwints | #652\n\n* Use native POSIX polling syscalls to read input | @lvxnull | #624\n\n* Conditional compile on Big Sur and up | @joske | PR #690\n\n+ Various fixes by @imwints, @simplepad, @joske, @gwena, @cpalv, @iambeingtracked, @mattico, @NexAdn\n\n## v1.2.13\n\n* Makefile: VERBOSE=true flag for Makefile to display all compiler commands and fixed so already set CXXFLAGS and LDFLAGS are displayed.\n\n* Makefile: Added autodetection for gcc12 to make compiling on macos Ventura easier.\n\n* Changed: Reverted back to sysconf(_SC_NPROCESSORS_ONLN) for Cpu core count ant let the new dynamic update fix if cores are turned on later\n\n* Fixed: Ignore disks that fails in statvfs64() to avoid slowdowns and possible crashes.\n\n* Fixed: Moved up get_cpuHz() in the execution order to get better cpu clock reading.\n\n* Added: proc tree view: if there's more than 40 width left, try to print full cmd, by @Superty\n\n* Fixed: Show the first IP of the interface in NET box instead of the last, by @correabuscar\n\n* Changed: Replace getnameinfo with inet_ntop [on Linux], by @correabuscar\n\n* Fixed: Not picking up last username from /etc/passwd\n\n* Fixed: Process nice value underflowing, issue #461\n\n* Changed: Replace getnameinfo with inet_ntop [on FreeBSD], by @correabuscar\n\n* Changed: Replace getnameinfo with inet_ntop [on macos], by @correabuscar\n\n## v1.2.12\n\n* Added: Dynamic updating of max number of CPU cores.\n\n## v1.2.11\n\n* Fixed: Number of cores wrongly detected for Ryzen in rare cases.\n\n## v1.2.10\n\n* Fixed: Process tree filtering not case insensitive\n\n* Added: Paper theme, by @s6muel\n\n* Fixed: Extra checks to avoid crash on trying to replace empty strings in tree mode\n\n* Fixed: Crashing when cores are offline\n\n* Fixed: Cpu::collect() core count counter...\n\n* Changed: Using sysconf(_SC_NPROCESSORS_CONF) for number of cores instead of sysconf(_SC_NPROCESSORS_ONLN)\n\n* Maintenance: Code cleanup, by @stefanos82\n\n## v1.2.9\n\n* Fixed: Memory values not clearing properly when not in graph mode in mem box\n\n* Changed: kyli0x theme color update, by @kyli0x\n\n* Added: Elementarish theme, by @dennismayr\n\n* Added: key \"?\" to see help, by @mohi001\n\n* Added: solarized_light theme, by @Fingerzam\n\n* Changed: Made ZFS stats collection compatible with zfs_pools_only option, by @simplepad\n\n* Changed: Rewrite of process sorting and tree generation including fixes for tree sorting and mouse support\n\n* Added: Option to hide the small cpu graphs for processes\n\n* Changed: Small graphs now show colors for each character\n\n* Fixed: Getting selfpath on macos (fix for finding theme folder)\n\n## v1.2.8\n\n* Added: Support for ZFS pool io stats monitoring, by @simplepad\n\n* Added: Filtering of kernel processes, by @0xJoeMama\n\n* Added: New theme everforest-dark-hard, by @iambeingtracked\n\n* Added: New theme tomorrow-night, by @appuchias\n\n* Changed: Disable battery monitoring if it fails instead of exiting\n\n## v1.2.7\n\n* Fixed: Disk IO stats for individual partitions instead of whole disk (Linux)\n\n* Added: Case insensitive process filtering, by @abrasumente233\n\n* Added: Include ZFS ARC in cached/available memory on Linux, by @mattico\n\n* Added: Desktop entry and icons, by @yonatan8070\n\n* Fixed: Net sync scale bug\n\n* Added: tokyo-night & tokyo-storm themes, by @Schievel1\n\n## v1.2.6\n\n* Fixed: Wrong memory unit when shorten and size is less than 10, by @mohi001\n\n* Fixed: Use cpu cores average temp if missing cpu package temp for FreeBSD\n\n* Changed: Enter symbol to a more common variant\n\n## v1.2.5\n\n* Fixed: Fallback to less accurate UTF8 char count if conversion to wstring fails\n\n* Fixed: Small ui fixes for mem and disks\n\n* Added: New theme HotPurpleTrafficLight, by @pallebone\n\n* Fixed: title_left symbol between auto and zero in the net box is not displayed, by @mrdotx\n\n* Fixed: Mouse mappings for net box\n\n## v1.2.4\n\n* Optimization: Proc::draw()\n\n* Fixed: Ignore duplicate disks with same mountpoint\n\n* Changed: Restrict command line for processes to 1000 characters to fix utf8 conversion errors\n\n* Added: add \"g\" and \"G\" to vim keys, by @mohi001\n\n## v1.2.3\n\n* Changed: floating_humanizer() now show fractions when shortened and value is < 10\n\n* Fixed: Process tree not redrawing properly\n\n* Fixed: string to wstring conversion crash when string is too big\n\n## v1.2.2\n\n* Changed: Reverted uncolor() back to using regex to fix delay in opening menu when compiled with musl\n\n* Added: Toggle for showing free disk space for privileged or normal users\n\n* Added: Clarification on signal screen that number can be manually entered\n\n## v1.2.1\n\n* Added: Arrow only after use of \"f\" when filtering processes, by @NavigationHazard\n\n* Fixed: Fx::uncolor not removing all escapes\n\n* Fixed: Text alignment for popup boxes\n\n* Fixed: Terminal resize warning getting stuck\n\n* Removed: Unnecessary counter for atomic_lock\n\n* Added: Percentage progress to Makefile\n\n* Fixed: Alignment of columns in proc box when wide UTF8 characters are used\n\n* Fixed: Battery meter draw fix\n\n## v1.2.0\n\n* Added: Support for FreeBSD, by @joske and @aristocratos\n\n* Fixed (again): Account for system rolling over net speeds in Net::collect()\n\n* Added: Theme gruvbox_material_dark, by @marcoradocchia\n\n* Added: Option for base 10 bytes/bits\n\n## v1.1.5\n\n* Fixed: Account for system rolling over net speeds in Net::collect()\n\n## v1.1.4\n\n* Fixed: Create dependency files in build directory when compiling, by @stwnt\n\n* Fixed: fix CPU temp fallback on macOS, by @joske\n\n* Changed: From rng::sort() to rng::stable_sort() for more stability\n\n* Fixed: in_avail() can always be zero, by @pg83\n\n## v1.1.3\n\n* Added: New theme ayu, by @AlphaNecron\n\n* Added: New theme gruvbox_dark_v2, by @pietryszak\n\n* Fixed: Macos cpu coretemp for Intel, by @joske\n\n* Added: New theme OneDark, by @vtmx\n\n* Fixed: Fixed network graph scale int rollover\n\n* Fixed: Suspected possibility of very rare stall in Input::clear()\n\n## v1.1.2\n\n* Fixed: SISEGV on macos Mojave, by @mgradowski\n\n* Fixed: Small optimizations and fixes to Mem::collect() and Input::get()\n\n* Fixed: Wrong unit for net_upload and net_download in config menu\n\n* Fixed: UTF-8 detection on macos\n\n* Fixed: coretemp iteration due to missing tempX_input, by @KFilipek\n\n* Fixed: coretemp ordering\n\n## v1.1.1\n\n* Added: Partial static build (libgcc, libstdc++) for macos\n\n* Changed: Continuous build macos switched to OSX 11.6 (Big Sur) and partial static build\n\n* Changed: Release binaries for macos switched to OSX 12 (Monterey) and partial static build\n\n## v1.1.0\n\n* Added: Support for OSX, by @joske and @aristocratos\n\n## v1.0.24\n\n* Changed: Collection ordering\n\n* Fixed: Restore all escape seq mouse modes on exit\n\n* Fixed: SIGINT not cleaning up on exit\n\n## v1.0.23\n\n* Fixed: Config parser missing first value when not including version header\n\n* Fixed: Vim keys menu lists selection\n\n* Fixed: Stall when clearing input queue on exit and queue is >1\n\n* Fixed: Inconsistent behaviour of \"q\" key in the menus\n\n## v1.0.22\n\n* Fixed: Bad values for disks and network on 32-bit\n\n## v1.0.21\n\n* Fixed: Removed extra spaces in cpu name\n\n* Added: / as alternative bind for filter\n\n* Fixed: Security issue when running with SUID bit set\n\n## v1.0.20\n\n* Added: Improved cpu sensor detection for Ryzen Mobile, by @adnanpri\n\n* Changed: Updated makefile\n\n* Changed: Regex for Fx::uncolor() changed to string search and replace\n\n* Changed: Removed all use of regex with dedicated string functions\n\n## v1.0.19\n\n* Fixed: Makefile now tests compiler flag compatibility\n\n## v1.0.18\n\n* Fixed: Makefile g++ -dumpmachine failure to get platform on some distros\n\n## v1.0.17\n\n* Changed: Reverted mutexes back to custom atomic bool based locks\n\n* Added: Static binaries switched to building with musl + more platforms, by @jan-guenter\n\n* Fixed: Improved battery detection, by @jan-guenter\n\n* Added: Displayed battery selectable in options menu\n\n* Fixed: Battery error if non existent battery named is entered\n\n## v1.0.16\n\n* Fixed: atomic_wait() and atomic_lock{} use cpu pause instructions instead of thread sleep\n\n* Fixed: Swapped from atomic bool spinlocks to mutexes to fix rare deadlock\n\n* Added: Continuous Build workflow for OSX branch, by @ShrirajHegde\n\n* Changed: Reverted thread mutex lock to atomic bool with wait and timeout\n\n* Changed: Removed unnecessary async threads in Runner thread\n\n* Added: Try to restart secondary thread in case of stall and additional error checks for ifstream in Proc::collect()\n\n* Fixed: change [k]ill to [K]ill when enabling vim keys, by @jlopezcur\n\n## v1.0.15\n\n* Fixed: Extra \"root\" partition when running in snap\n\n* Changed: Limit atomic_wait() to 1000ms to fix rare stall\n\n* Fixed: Removed unneeded lock in Runner::run()\n\n* Added: Toggle in options for enabling directional vim keys \"h,j,k,l\"\n\n## v1.0.14\n\n* Changed: Total system memory is checked at every update instead of once at start\n\n* Added: Continuous Build workflow, by @ShrirajHegde\n\n* Fixed: Uid -> User fallback to getpwuid() if failure for non static builds\n\n* Fixed: snap root disk and changed to compiler flags instead of env variables for detection\n\n* Added: Development branch for OSX, by @joske\n\n## v1.0.13\n\n* Changed: Graph empty symbol is now regular whitespace\n\n## v1.0.12\n\n* Fixed: Exception handling for faulty net download/upload speed\n\n* Fixed: Cpu percent formatting if over 10'000\n\n## v1.0.11\n\n* Changed: atomic_wait to use while loop instead of wait() because of rare stall when a signal handler is triggered while waiting\n\n* Fixed: Get real / mountpoint when running inside snap\n\n* Fixed: UTF8 set LANG and LC_ALL to empty before UTF8 search and fixed empty error msg on exit before signal handler init\n\n* Changed: Init will continue with a warning if UTF-8 locale are detected and it fails to set the locale\n\n## v1.0.10\n\n* Added: Wait for terminal size properties to be available at start\n\n* Changed: Stop second thread before updating terminal size variables\n\n* Changed: Moved check for valid terminal dimensions to before platform init\n\n* Added: Check for empty percentage deques\n\n* Changed: Cpu temp values check for existing values\n\n* Fixed: Cpu percent cutting off above 1000 percent and added scaling with \"k\" prefix above 10'000\n\n* Fixed: Crash when rapidly resizing terminal at start\n\n## v1.0.9\n\n* Added: ifstream check and try-catch for stod() in Tools::system_uptime()\n\n* Fixed: Freeze on cin.ignore()\n\n## v1.0.8\n\n* Fixed: Additional NULL checks in UTF-8 detection\n\n* Changed: Makefile: Only look for g++-11 if CXX=g++\n\n* Fixed: Missing NULL check for ttyname\n\n* Changed: Only log tty name if known\n\n## v1.0.7\n\n* Fixed: Crash when opening menu at too small size\n\n* Fixed: Cores not constrained to cpu box and core numbers above 100 cut off\n\n* Fixed: Scrollbar position incorrect in small lists and selection not working when filtering\n\n## v1.0.6\n\n* Fixed: Check that getenv(\"LANG\") is not NULL in UTF-8 check\n\n* Fixed: Processes not completely hidden when collapsed in tree mode\n\n* Fixed: Changed wrong filename error.log to btop.log\n\n## v1.0.5\n\n* Fixed: Load AVG sizing when hiding temperatures\n\n* Fixed: Sizing constraints bug on start and boxes can be toggled from size error screen\n\n* Fixed: UTF-8 check crashing if LANG was set to non existent locale\n\n## v1.0.4\n\n* Fixed: Use /proc/pid/statm if RSS memory from /proc/pid/stat is faulty\n\n## v1.0.3\n\n* Fixed: stoi 0 literal pointer to nullptr and added more clamping for gradient array access\n\n## v1.0.2\n\n* Fixed: ARCH detection in Makefile\n\n* Fixed: Color gradient array out of bounds, added clamp 0-100 for cpu percent values\n\n* Fixed: Menu size and preset size issues and added warnings for small terminal size\n\n* Fixed: Options menu page selection alignment\n\n## v1.0.1\n\n* Fixed: UTF-8 check to include UTF8\n\n* Fixed: Added thread started check before joining in clean_quit()\n\n* Fix documentation of --utf-force in README and --help. by @purinchu\n\n## v1.0.0\n\n* First release for Linux\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.525390625,
          "content": "# SPDX-License-Identifier: Apache-2.0\n#\n# CMake configuration for btop\n#\n\ncmake_minimum_required(VERSION 3.24)\n\n# Disable in-source builds since they would override the Makefile\nif(\"${CMAKE_CURRENT_SOURCE_DIR}\" STREQUAL \"${CMAKE_CURRENT_BINARY_DIR}\")\n  message(FATAL_ERROR \"In-source builds are not allowed\")\nendif()\n\nproject(\"btop\"\n  DESCRIPTION \"A monitor of resources\"\n  HOMEPAGE_URL \"https://github.com/aristocratos/btop\"\n  LANGUAGES CXX C\n)\n\ninclude(CheckCXXCompilerFlag)\ninclude(CheckIncludeFileCXX)\ninclude(CheckIPOSupported)\ninclude(CMakeDependentOption)\n\n# Make our Find<Package>.cmake files available\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/\")\n\n# When the build type is not set we can't fortify\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release)\nendif()\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_COLOR_DIAGNOSTICS ON)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\noption(BTOP_STATIC \"Link btop statically\" OFF)\noption(BTOP_LTO \"Enable LTO\" ON)\noption(BTOP_USE_MOLD \"Use mold to link btop\" OFF)\noption(BTOP_PEDANTIC \"Enable a bunch of additional warnings\" OFF)\noption(BTOP_WERROR \"Compile with warnings as errors\" OFF)\noption(BTOP_FORTIFY \"Detect buffer overflows with _FORTIFY_SOURCE=3\" ON)\noption(BTOP_GPU \"Enable GPU support\" ON)\ncmake_dependent_option(BTOP_RSMI_STATIC \"Link statically to ROCm SMI\" OFF \"BTOP_GPU\" OFF)\n\nif(BTOP_STATIC AND NOT APPLE)\n  # Set this before calling find_package\n  set(CMAKE_FIND_LIBRARY_SUFFIXES \".a\")\nendif()\n\nadd_executable(btop\n  src/btop.cpp\n  src/btop_config.cpp\n  src/btop_draw.cpp\n  src/btop_input.cpp\n  src/btop_menu.cpp\n  src/btop_shared.cpp\n  src/btop_theme.cpp\n  src/btop_tools.cpp\n)\n\nif(APPLE)\n  target_sources(btop PRIVATE src/osx/btop_collect.cpp src/osx/sensors.cpp src/osx/smc.cpp)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"FreeBSD\")\n  target_sources(btop PRIVATE src/freebsd/btop_collect.cpp)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"OpenBSD\")\n  target_sources(btop PRIVATE src/openbsd/btop_collect.cpp src/openbsd/sysctlbyname.cpp)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"NetBSD\")\n  target_sources(btop PRIVATE src/netbsd/btop_collect.cpp)\nelseif(LINUX)\n  target_sources(btop PRIVATE src/linux/btop_collect.cpp)\n  if(BTOP_GPU)\n    target_sources(btop PRIVATE\n      src/linux/intel_gpu_top/intel_gpu_top.c\n      src/linux/intel_gpu_top/igt_perf.c\n      src/linux/intel_gpu_top/intel_device_info.c\n      src/linux/intel_gpu_top/intel_name_lookup_shim.c\n    )\n  endif()\nelse()\n  message(FATAL_ERROR \"${CMAKE_SYSTEM_NAME} is not supported\")\nendif()\n\ncheck_include_file_cxx(ranges CXX_HAVE_RANGES)\nif(NOT CXX_HAVE_RANGES)\n  message(FATAL_ERROR \"The compiler doesn't support <ranges>\")\nendif()\n\n# Generate build info\nexecute_process(\n  COMMAND \"git\" \"rev-parse\" \"--short\" \"HEAD\"\n  WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}\"\n  OUTPUT_VARIABLE GIT_COMMIT\n  OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_QUIET)\nset(CONFIGURE_COMMAND\n    \"cmake -DBTOP_STATIC=${BTOP_STATIC} -DBTOP_USE_MOLD=${BTOP_USE_MOLD} -DBTOP_FORTIFY=${BTOP_FORTIFY} -DBTOP_GPU=${BTOP_GPU}\"\n)\nget_filename_component(CXX_COMPILER_BASENAME \"${CMAKE_CXX_COMPILER}\" NAME)\nset(COMPILER \"${CXX_COMPILER_BASENAME}\")\nset(COMPILER_VERSION \"${CMAKE_CXX_COMPILER_VERSION}\")\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/config.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h @ONLY IMMEDIATE)\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\n\n# Check for and enable LTO\ncheck_ipo_supported(RESULT ipo_supported)\nif(ipo_supported AND BTOP_LTO)\n  set_target_properties(btop PROPERTIES INTERPROCEDURAL_OPTIMIZATION ON)\nendif()\n\ntarget_compile_options(btop PRIVATE -Wall -Wextra -Wpedantic -ftree-vectorize)\n\nif(BTOP_PEDANTIC)\n  target_compile_options(btop PRIVATE\n    -Wshadow -Wnon-virtual-dtor -Wold-style-cast -Wcast-align -Wunused -Woverloaded-virtual\n    -Wconversion -Wsign-conversion -Wdouble-promotion -Wformat=2 -Wimplicit-fallthrough -Weffc++\n    $<$<CXX_COMPILER_ID:Clang>:-Wheader-hygiene -Wgnu -Wthread-safety>\n    $<$<CXX_COMPILER_ID:GNU>:-Wduplicated-cond -Wduplicated-branches -Wlogical-op>\n    $<$<CXX_COMPILER_ID:GNU>:-Wnull-dereference -Wuseless-cast>\n  )\nendif()\nif(BTOP_WERROR)\n  target_compile_options(btop PRIVATE -Werror)\nendif()\n\nif(NOT APPLE)\n  target_compile_options(btop PRIVATE -fstack-clash-protection)\nendif()\ncheck_cxx_compiler_flag(-fstack-protector HAS_FSTACK_PROTECTOR)\nif(HAS_FSTACK_PROTECTOR)\n  target_compile_options(btop PRIVATE -fstack-protector)\nendif()\ncheck_cxx_compiler_flag(-fcf-protection HAS_FCF_PROTECTION)\nif(HAS_FCF_PROTECTION)\n  target_compile_options(btop PRIVATE -fcf-protection)\nendif()\n\ntarget_compile_definitions(btop PRIVATE\n  FMT_HEADER_ONLY\n  _FILE_OFFSET_BITS=64\n  $<$<CONFIG:Debug>:_GLIBCXX_ASSERTIONS _LIBCPP_ENABLE_ASSERTIONS=1>\n  # Only has an effect with optimizations enabled\n  $<$<AND:$<NOT:$<CONFIG:Debug>>,$<BOOL:${BTOP_FORTIFY}>>:_FORTIFY_SOURCE=3>\n)\n\ntarget_include_directories(btop SYSTEM PRIVATE include)\n\n# Enable pthreads\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\ntarget_link_libraries(btop Threads::Threads)\n\n# Enable GPU support\nif(LINUX AND BTOP_GPU)\n  target_compile_definitions(btop PRIVATE GPU_SUPPORT)\n\n  if(BTOP_RSMI_STATIC)\n    # ROCm doesn't properly add it's folders to the module path if `CMAKE_MODULE_PATH` is already\n    # set\n    # We could also manually append ROCm's path here\n    set(_CMAKE_MODULE_PATH CMAKE_MODULE_PATH)\n    unset(CMAKE_MODULE_PATH)\n\n    # NOTE: This might be problematic in the future if other sub projects depend on this or if\n    # btop starts producing libraries\n    # Build a static ROCm library\n    set(BUILD_SHARED_LIBS OFF CACHE BOOL \"\" FORCE)\n\n    add_subdirectory(lib/rocm_smi_lib EXCLUDE_FROM_ALL)\n\n    add_library(ROCm INTERFACE)\n    # Export ROCm's properties to a target\n    target_compile_definitions(ROCm INTERFACE RSMI_STATIC)\n    target_include_directories(ROCm INTERFACE lib/rocm_smi_lib/include)\n    target_link_libraries(ROCm INTERFACE rocm_smi64)\n\n    set(CMAKE_MODULE_PATH _CMAKE_MODULE_PATH)\n\n    target_link_libraries(btop ROCm)\n  endif()\nendif()\n\nif(BTOP_USE_MOLD)\n  target_link_options(btop PRIVATE -fuse-ld=mold)\nendif()\n\nif(BTOP_STATIC)\n  target_compile_definitions(btop PRIVATE STATIC_BUILD)\n  target_link_options(btop PRIVATE -static LINKER:--fatal-warnings)\nendif()\n\n# Other platform depdendent flags\nif(APPLE)\n  target_link_libraries(btop\n    $<LINK_LIBRARY:FRAMEWORK,CoreFoundation> $<LINK_LIBRARY:FRAMEWORK,IOKit>\n  )\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"FreeBSD\")\n  # Avoid version mismatch for libstdc++ when a specific version of GCC is installed and not the\n  # default one since all use the default ones RPATH\n  if (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    string(REGEX MATCH \"^[0-9]+\" GCC_VERSION_MAJOR \"${CMAKE_CXX_COMPILER_VERSION}\")\n    set_target_properties(btop PROPERTIES\n      INSTALL_RPATH \"/usr/local/lib/gcc${GCC_VERSION_MAJOR}\"\n      BUILD_WITH_INSTALL_RPATH TRUE\n    )\n\n    # The gcc compiler wrapper doesn't add '--eh-frame-hdr' on FreeBSD with static builds\n    # https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=278551\n    if(BTOP_STATIC)\n      target_link_options(btop PRIVATE LINKER:--eh-frame-hdr)\n    endif()\n  endif()\n\n  find_package(devstat REQUIRED)\n  find_package(kvm REQUIRED)\n  target_link_libraries(btop devstat::devstat kvm::kvm)\n  if(BTOP_STATIC)\n    find_package(elf REQUIRED)\n    target_link_libraries(btop elf::elf)\n  endif()\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"OpenBSD\")\n  if(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    target_compile_options(btop PRIVATE -static-libstdc++)\n  endif()\n  find_package(kvm REQUIRED)\n  target_link_libraries(btop kvm::kvm)\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"NetBSD\")\n  if(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    target_compile_options(btop PRIVATE -static-libstdc++ -std=c++20 -DNDEBUG)\n  endif()\n  find_package(kvm REQUIRED)\n  find_package(proplib REQUIRED)\n  target_link_libraries(btop kvm::kvm proplib::proplib)\nendif()\n\n\n# Check if lowdown is installed\nfind_program(LOWDOWN_EXECUTABLE lowdown)\n\nif(LOWDOWN_EXECUTABLE)\n  # Custom target to compile Markdown to man page using lowdown\n  add_custom_target(btop.1 ALL\n      COMMAND lowdown -s -Tman -o btop.1 manpage.md\n      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  )\n  # Install the man page\n  install(FILES btop.1 DESTINATION \"share/man/man1\")\nelse()\n  message(WARNING \"Command 'lowdown' not found: skipping generating man page btop.1\")\nendif()\n\ninstall(TARGETS btop RUNTIME)\ninstall(FILES \"btop.desktop\" DESTINATION \"share/applications\")\ninstall(FILES \"Img/icon.png\" DESTINATION \"share/icons/hicolor/48x48/apps\" RENAME \"btop.png\")\ninstall(FILES \"Img/icon.svg\" DESTINATION \"share/icons/hicolor/scalable/apps\" RENAME \"btop.svg\")\ninstall(DIRECTORY \"themes\" DESTINATION \"share/btop\")\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2705078125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at admin@qvantnet.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.9052734375,
          "content": "# Contributing guidelines\n\n## When submitting pull requests\n\n* Explain your thinking in why a change or addition is needed.\n  * Is it a requested change or feature?\n  * If not, open a feature request to get feedback before making a pull request.\n\n* Split up multiple unrelated changes in multiple pull requests.\n\n* If it's a fix for a unreported bug, make a bug report and link the pull request.\n\n* Purely cosmetic changes won't be accepted without a very good explanation of its value.\n\n## Formatting\n\n### Follow the current syntax design\n\n* Indent type: Tabs\n\n* Tab size: 4\n\n* Alternative operators `and`, `or` and `not`.\n\n* Opening curly braces `{` at the end of the same line as the statement/condition.\n\n## General guidelines\n\n* Don't force a programming style. Use object oriented, functional, data oriented, etc., where it's suitable.\n\n* Use [RAII](https://en.cppreference.com/w/cpp/language/raii).\n\n* Make use of the standard algorithms library, (re)watch [C++ Seasoning](https://www.youtube.com/watch?v=W2tWOdzgXHA) and [105 STL Algorithms](https://www.youtube.com/watch?v=bFSnXNIsK4A) for inspiration.\n\n* Make use of the included [robin_hood unordered map & set](https://github.com/martinus/robin-hood-hashing)\n\n* Do not add includes if the same functionality can be achieved using the already included libraries.\n\n* Use descriptive names for variables.\n\n* Use comments if not very obvious what your code is doing.\n\n* Add comments as labels for what's currently happening in bigger sections of code for better readability.\n\n* Avoid writing to disk.\n\n* If using the logger functions, be sensible, only call it if something of importance has changed.\n\n* Benchmark your code and look for alternatives if they cause a noticeable negative impact.\n\nFor questions open a new discussion thread or send a mail to jakob@qvantnet.com\n\nFor proposing changes to this document create a [new issue](https://github.com/aristocratos/btop/issues/new/choose).\n"
        },
        {
          "name": "Img",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 19.708984375,
          "content": "#* Btop++ makefile v1.6\n\nBANNER  = \\n \\033[38;5;196m██████\\033[38;5;240m╗ \\033[38;5;196m████████\\033[38;5;240m╗ \\033[38;5;196m██████\\033[38;5;240m╗ \\033[38;5;196m██████\\033[38;5;240m╗\\n \\033[38;5;160m██\\033[38;5;239m╔══\\033[38;5;160m██\\033[38;5;239m╗╚══\\033[38;5;160m██\\033[38;5;239m╔══╝\\033[38;5;160m██\\033[38;5;239m╔═══\\033[38;5;160m██\\033[38;5;239m╗\\033[38;5;160m██\\033[38;5;239m╔══\\033[38;5;160m██\\033[38;5;239m╗   \\033[38;5;160m██\\033[38;5;239m╗    \\033[38;5;160m██\\033[38;5;239m╗\\n \\033[38;5;124m██████\\033[38;5;238m╔╝   \\033[38;5;124m██\\033[38;5;238m║   \\033[38;5;124m██\\033[38;5;238m║   \\033[38;5;124m██\\033[38;5;238m║\\033[38;5;124m██████\\033[38;5;238m╔╝ \\033[38;5;124m██████\\033[38;5;238m╗\\033[38;5;124m██████\\033[38;5;238m╗\\n \\033[38;5;88m██\\033[38;5;237m╔══\\033[38;5;88m██\\033[38;5;237m╗   \\033[38;5;88m██\\033[38;5;237m║   \\033[38;5;88m██\\033[38;5;237m║   \\033[38;5;88m██\\033[38;5;237m║\\033[38;5;88m██\\033[38;5;237m╔═══╝  ╚═\\033[38;5;88m██\\033[38;5;237m╔═╝╚═\\033[38;5;88m██\\033[38;5;237m╔═╝\\n \\033[38;5;52m██████\\033[38;5;236m╔╝   \\033[38;5;52m██\\033[38;5;236m║   ╚\\033[38;5;52m██████\\033[38;5;236m╔╝\\033[38;5;52m██\\033[38;5;236m║        ╚═╝    ╚═╝\\n \\033[38;5;235m╚═════╝    ╚═╝    ╚═════╝ ╚═╝      \\033[1;3;38;5;240mMakefile v1.6\\033[0m\n\noverride BTOP_VERSION := $(shell head -n100 src/btop.cpp 2>/dev/null | grep \"Version =\" | cut -f2 -d\"\\\"\" || echo \" unknown\")\noverride TIMESTAMP := $(shell date +%s 2>/dev/null || echo \"0\")\noverride DATESTAMP := $(shell date '+%Y-%m-%d %H:%M:%S' || echo \"5 minutes ago\")\nifeq ($(shell command -v gdate >/dev/null; echo $$?),0)\n\tDATE_CMD := gdate\nelse\n\tDATE_CMD := date\nendif\n\nifneq ($(QUIET),true)\n\toverride QUIET := false\nendif\n\nOLDCXX := $(CXXFLAGS)\nOLDLD := $(LDFLAGS)\n\nPREFIX ?= /usr/local\n\n#? Detect PLATFORM and ARCH from uname/gcc if not set\nPLATFORM ?= $(shell uname -s || echo unknown)\nifneq ($(filter unknown Darwin, $(PLATFORM)),)\n\toverride PLATFORM := $(shell $(CXX) -dumpmachine | awk -F\"-\" '{ print (NF==4) ? $$3 : $$2 }')\n\tifeq ($(PLATFORM),apple)\n\t\toverride PLATFORM := macos\n\tendif\nendif\nifeq ($(shell uname -v | grep ARM64 >/dev/null 2>&1; echo $$?),0)\n\tARCH ?= arm64\nelse\n\tARCH ?= $(shell $(CXX) -dumpmachine | cut -d \"-\" -f 1)\nendif\n\noverride PLATFORM_LC := $(shell echo $(PLATFORM) | tr '[:upper:]' '[:lower:]')\n\n#? GPU Support\nifeq ($(PLATFORM_LC)$(ARCH),linuxx86_64)\n\tifneq ($(STATIC),true)\n\t\tGPU_SUPPORT := true\n\t\tINTEL_GPU_SUPPORT := true\n\tendif\nendif\nifneq ($(GPU_SUPPORT),true)\n\tGPU_SUPPORT := false\nendif\n\nifeq ($(GPU_SUPPORT),true)\n\toverride ADDFLAGS += -DGPU_SUPPORT\nendif\n\nFORTIFY_SOURCE ?= true\nifeq ($(FORTIFY_SOURCE),true)\n\toverride ADDFLAGS += -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3\nendif\n\n#? Compiler and Linker\nifeq ($(shell $(CXX) --version | grep clang >/dev/null 2>&1; echo $$?),0)\n\toverride CXX_IS_CLANG := true\nendif\noverride CXX_VERSION := $(shell $(CXX) -dumpfullversion -dumpversion || echo 0)\noverride CXX_VERSION_MAJOR := $(shell echo $(CXX_VERSION) | cut -d '.' -f 1)\n\nCLANG_WORKS = false\nGCC_WORKS = false\nMIN_CLANG_VERSION = 16\n\nifeq ($(DEBUG),true)\n\toverride ADDFLAGS += -DBTOP_DEBUG\nendif\n\n#? Supported is Clang 16.0.0 and later\nifeq ($(CXX_IS_CLANG),true)\n\tifeq ($(shell $(CXX) --version | grep Apple >/dev/null 2>&1; echo $$?),0)\n\t\tMIN_CLANG_VERSION := 15\n\tendif\n\tifneq ($(shell test $(CXX_VERSION_MAJOR) -lt $(MIN_CLANG_VERSION); echo $$?),0)\n\t\tCLANG_WORKS := true\n\tendif\nelse\n\tifneq ($(shell test $(CXX_VERSION_MAJOR) -lt 10; echo $$?),0)\n\t\tGCC_WORKS := true\n\tendif\nendif\n\nifeq ($(CLANG_WORKS),false)\n\tifeq ($(GCC_WORKS),false)\n$(error $(shell printf \"\\033[1;91mERROR: \\033[97mCompiler too old. (Requires Clang 16.0.0, GCC 10.1.0)\\033[0m\"))\n\tendif\nendif\n\n#? Any flags added to TESTFLAGS must not contain whitespace for the testing to work\noverride TESTFLAGS := -fexceptions -fstack-clash-protection -fcf-protection\nifneq ($(PLATFORM) $(ARCH),macos arm64)\n\toverride TESTFLAGS += -fstack-protector\nendif\n\nifeq ($(STATIC),true)\n\tifeq ($(CXX_IS_CLANG),true)\n\t\tifeq ($(shell $(CXX) -print-target-triple | grep gnu >/dev/null; echo $$?),0)\n$(error $(shell printf \"\\033[1;91mERROR: \\033[97m$(CXX) can't statically link glibc\\033[0m\"))\n\t\tendif\n\tendif\n\n\tifeq ($(PLATFORM_LC),$(filter $(PLATFORM_LC),freebsd linux))\n\t\toverride ADDFLAGS += -DSTATIC_BUILD -static\n\telse\n\t\tifeq ($(CXX_IS_CLANG),false)\n\t\t\toverride ADDFLAGS += -static-libgcc -static-libstdc++\n\t\tendif\n\tendif\nendif\n\nifeq ($(STRIP),true)\n\toverride ADDFLAGS += -s\nendif\n\nifeq ($(VERBOSE),true)\n\toverride VERBOSE := false\nelse\n\toverride VERBOSE := true\nendif\n\n#? Pull in platform specific source files and get thread count\nifeq ($(PLATFORM_LC),linux)\n\tPLATFORM_DIR := linux\n\tTHREADS\t:= $(shell getconf _NPROCESSORS_ONLN 2>/dev/null || echo 1)\n\tSU_GROUP := root\nelse ifeq ($(PLATFORM_LC),freebsd)\n\tPLATFORM_DIR := freebsd\n\tTHREADS\t:= $(shell getconf NPROCESSORS_ONLN 2>/dev/null || echo 1)\n\tSU_GROUP := wheel\n\toverride ADDFLAGS += -lm -lkvm -ldevstat\n\tifeq ($(STATIC),true)\n\t\toverride ADDFLAGS += -lelf -Wl,--eh-frame-hdr\n\tendif\n\n \tifeq ($(CXX_IS_CLANG),false)\n\t\toverride ADDFLAGS += -lstdc++ -Wl,rpath=/usr/local/lib/gcc$(CXX_VERSION_MAJOR)\n\tendif\n\texport MAKE = gmake\nelse ifeq ($(PLATFORM_LC),macos)\n\tPLATFORM_DIR := osx\n\tTHREADS\t:= $(shell sysctl -n hw.ncpu || echo 1)\n\toverride ADDFLAGS += -framework IOKit -framework CoreFoundation -Wno-format-truncation\n\tSU_GROUP := wheel\nelse ifeq ($(PLATFORM_LC),openbsd)\n\tPLATFORM_DIR := openbsd\n\tTHREADS\t:= $(shell sysctl -n hw.ncpu || echo 1)\n\toverride ADDFLAGS += -lkvm -static-libstdc++\n\texport MAKE = gmake\n\tSU_GROUP := wheel\nelse ifeq ($(PLATFORM_LC),netbsd)\n\tPLATFORM_DIR := netbsd\n\tTHREADS\t:= $(shell sysctl -n hw.ncpu || echo 1)\n\toverride ADDFLAGS += -lkvm -lprop\n\texport MAKE = gmake\n\tSU_GROUP := wheel\nelse\n$(error $(shell printf \"\\033[1;91mERROR: \\033[97mUnsupported platform ($(PLATFORM))\\033[0m\"))\nendif\n\n#? Use all CPU cores (will only be set if using Make 4.3+)\nMAKEFLAGS := --jobs=$(THREADS)\nifeq ($(THREADS),1)\n\toverride THREADS := auto\nendif\n\n#? LTO command line\nifeq ($(CLANG_WORKS),true)\n\tLTO := thin\nelse\n\tLTO := $(THREADS)\nendif\n\nGIT_COMMIT := $(shell git rev-parse --short HEAD 2> /dev/null || true)\nCONFIGURE_COMMAND := $(MAKE) STATIC=$(STATIC) FORTIFY_SOURCE=$(FORTIFY_SOURCE)\nifeq ($(PLATFORM_LC),linux)\n\tCONFIGURE_COMMAND +=  GPU_SUPPORT=$(GPU_SUPPORT) RSMI_STATIC=$(RSMI_STATIC)\nendif\n\n#? The Directories, Source, Includes, Objects and Binary\nSRCDIR\t\t:= src\nINCDIRS\t\t:= include $(wildcard lib/**/include)\nBUILDDIR\t:= obj\nTARGETDIR\t:= bin\nSRCEXT\t\t:= cpp\nDEPEXT\t\t:= d\nOBJEXT\t\t:= o\n\n#? Filter out unsupported compiler flags\noverride GOODFLAGS := $(foreach flag,$(TESTFLAGS),$(strip $(shell echo \"int main() {}\" | $(CXX) -o /dev/null $(flag) -x c++ - >/dev/null 2>&1 && echo $(flag) || true)))\n\n#? Flags, Libraries and Includes\noverride REQFLAGS   := -std=c++20\nWARNFLAGS\t\t\t:= -Wall -Wextra -pedantic\nOPTFLAGS\t\t\t:= -O2 -ftree-vectorize -flto=$(LTO)\nLDCXXFLAGS\t\t\t:= -pthread -DFMT_HEADER_ONLY -D_GLIBCXX_ASSERTIONS -D_FILE_OFFSET_BITS=64 $(GOODFLAGS) $(ADDFLAGS)\noverride CXXFLAGS\t+= $(REQFLAGS) $(LDCXXFLAGS) $(OPTFLAGS) $(WARNFLAGS)\noverride LDFLAGS\t+= $(LDCXXFLAGS) $(OPTFLAGS) $(WARNFLAGS)\nINC\t\t\t\t\t:= $(foreach incdir,$(INCDIRS),-isystem $(incdir)) -I$(SRCDIR) -I$(BUILDDIR)\nSU_USER\t\t\t\t:= root\n\nifdef DEBUG\n\toverride OPTFLAGS := -O0 -g\nendif\n\nSOURCES\t:= $(sort $(shell find $(SRCDIR) -maxdepth 1 -type f -name *.$(SRCEXT)))\n\nSOURCES += $(sort $(shell find $(SRCDIR)/$(PLATFORM_DIR) -maxdepth 1 -type f -name *.$(SRCEXT)))\n\nOBJECTS\t:= $(patsubst $(SRCDIR)/%,$(BUILDDIR)/%,$(SOURCES:.$(SRCEXT)=.$(OBJEXT)))\n\nifeq ($(GPU_SUPPORT)$(INTEL_GPU_SUPPORT),truetrue)\n\tIGT_OBJECTS := $(BUILDDIR)/igt_perf.c.o $(BUILDDIR)/intel_device_info.c.o $(BUILDDIR)/intel_name_lookup_shim.c.o $(BUILDDIR)/intel_gpu_top.c.o\n\tOBJECTS += $(IGT_OBJECTS)\n\tSHOW_CC_INFO = false\n\tCC_VERSION := $(shell $(CC) -dumpfullversion -dumpversion || echo 0)\nelse\n\tSHOW_CC_INFO = true\nendif\n\n#? Setup percentage progress\nSOURCE_COUNT := $(words $(OBJECTS))\n\nifeq ($(shell find $(BUILDDIR) -type f -newermt \"$(DATESTAMP)\" -name *.o >/dev/null 2>&1; echo $$?),0)\n\tifneq ($(wildcard $(BUILDDIR)/.*),)\n\t\tSKIPPED_SOURCES := $(foreach fname,$(SOURCES),$(shell find $(BUILDDIR) -type f -newer $(fname) -name *.o | grep \"$(basename $(notdir $(fname))).o\" 2>/dev/null))\n\t\toverride SOURCE_COUNT := $(shell expr $(SOURCE_COUNT) - $(words $(SKIPPED_SOURCES)))\n\t\tifeq ($(SOURCE_COUNT),0)\n\t\t\toverride SOURCE_COUNT = $(words $(SOURCES))\n\t\tendif\n\tendif\n\tPROGRESS = expr $$(find $(BUILDDIR) -type f -newermt \"$(DATESTAMP)\" -name *.o | wc -l || echo 1) '*' 90 / $(SOURCE_COUNT) | cut -c1-2\nelse\n\tPROGRESS = expr $$(find $(BUILDDIR) -type f -name *.o | wc -l || echo 1) '*' 90 / $(SOURCE_COUNT) | cut -c1-2\nendif\n\nP := %%\n\nifeq ($(VERBOSE),true)\n\t# Doesn't work with `&>`\n\toverride SUPPRESS := > /dev/null 2> /dev/null\nelse\n\toverride SUPPRESS :=\nendif\n\n#? Default Make\n.ONESHELL:\nall: | info rocm_smi info-quiet directories btop.1 config.h btop\n\nifneq ($(QUIET),true)\ninfo:\n\t@printf \" $(BANNER)\\n\"\n\t@printf \"\\033[1;92mPLATFORM     \\033[1;93m?| \\033[0m$(PLATFORM)\\n\"\n\t@printf \"\\033[1;96mARCH         \\033[1;93m?| \\033[0m$(ARCH)\\n\"\n\t@printf \"\\033[1;95mGPU_SUPPORT  \\033[1;94m:| \\033[0m$(GPU_SUPPORT)\\n\"\n\t@printf \"\\033[1;93mCXX          \\033[1;93m?| \\033[0m$(CXX) \\033[1;93m(\\033[97m$(CXX_VERSION)\\033[93m)\\n\"\n\t@$(SHOW_CC_INFO) || printf \"\\033[1;93mCC           \\033[1;93m?| \\033[0m$(CC) \\033[1;93m(\\033[97m$(CC_VERSION)\\033[93m)\\n\"\n\t@printf \"\\033[1;94mTHREADS      \\033[1;94m:| \\033[0m$(THREADS)\\n\" gcc -dumpfullversion -dumpversion\n\t@printf \"\\033[1;92mREQFLAGS     \\033[1;91m!| \\033[0m$(REQFLAGS)\\n\"\n\t@printf \"\\033[1;91mWARNFLAGS    \\033[1;94m:| \\033[0m$(WARNFLAGS)\\n\"\n\t@printf \"\\033[1;94mOPTFLAGS     \\033[1;94m:| \\033[0m$(OPTFLAGS)\\n\"\n\t@printf \"\\033[1;93mLDCXXFLAGS   \\033[1;94m:| \\033[0m$(LDCXXFLAGS)\\n\"\n\t@printf \"\\033[1;95mCXXFLAGS     \\033[1;92m+| \\033[0;37m\\$$(\\033[92mREQFLAGS\\033[37m) \\$$(\\033[93mLDCXXFLAGS\\033[37m) \\$$(\\033[94mOPTFLAGS\\033[37m) \\$$(\\033[91mWARNFLAGS\\033[37m) $(OLDCXX)\\n\"\n\t@printf \"\\033[1;95mLDFLAGS      \\033[1;92m+| \\033[0;37m\\$$(\\033[93mLDCXXFLAGS\\033[37m) \\$$(\\033[94mOPTFLAGS\\033[37m) \\$$(\\033[91mWARNFLAGS\\033[37m) $(OLDLD)\\n\"\nelse\ninfo:\n\t @true\nendif\n\ninfo-quiet: | info rocm_smi\n\t@printf \"\\n\\033[1;92mBuilding btop++ \\033[91m(\\033[97mv$(BTOP_VERSION)\\033[91m) \\033[93m$(PLATFORM) \\033[96m$(ARCH)\\033[0m\\n\"\n\nhelp:\n\t@printf \" $(BANNER)\\n\"\n\t@printf \"\\033[1;97mbtop++ makefile\\033[0m\\n\"\n\t@printf \"usage: make [argument]\\n\\n\"\n\t@printf \"arguments:\\n\"\n\t@printf \"  all          Compile btop (default argument)\\n\"\n\t@printf \"  clean        Remove built objects\\n\"\n\t@printf \"  distclean    Remove built objects and binaries\\n\"\n\t@printf \"  install      Install btop++ to \\$$PREFIX ($(PREFIX))\\n\"\n\t@printf \"  setcap       Set extended capabilities on binary (preferable to setuid)\\n\"\n\t@printf \"  setuid       Set installed binary owner/group to \\$$SU_USER/\\$$SU_GROUP ($(SU_USER)/$(SU_GROUP)) and set SUID bit\\n\"\n\t@printf \"  uninstall    Uninstall btop++ from \\$$PREFIX\\n\"\n\t@printf \"  info         Display information about Environment,compiler and linker flags\\n\"\n\n#? Make the Directories\ndirectories:\n\t@$(VERBOSE) || printf \"mkdir -p $(TARGETDIR)\\n\"\n\t@mkdir -p $(TARGETDIR)\n\t@$(VERBOSE) || printf \"mkdir -p $(BUILDDIR)/$(PLATFORM_DIR)\\n\"\n\t@mkdir -p $(BUILDDIR)/$(PLATFORM_DIR)\n\nconfig.h: $(BUILDDIR)/config.h\n\n$(BUILDDIR)/config.h: $(SRCDIR)/config.h.in | directories\n\t@$(QUIET) || printf \"\\033[1mConfiguring $(BUILDDIR)/config.h\\033[0m\\n\"\n\t@$(VERBOSE) || printf 'sed -e \"s|@GIT_COMMIT@|$(GIT_COMMIT)|\" -e \"s|@CONFIGURE_COMMAND@|$(CONFIGURE_COMMAND)|\" -e \"s|@COMPILER@|$(CXX)|\" -e \"s|@COMPILER_VERSION@|$(CXX_VERSION)|\" $< | tee $@ > /dev/null\\n'\n\t@sed -e \"s|@GIT_COMMIT@|$(GIT_COMMIT)|\" -e \"s|@CONFIGURE_COMMAND@|$(CONFIGURE_COMMAND)|\" -e \"s|@COMPILER@|$(CXX)|\" -e \"s|@COMPILER_VERSION@|$(CXX_VERSION)|\" $< | tee $@ > /dev/null\n\n#? Man page\nbtop.1: manpage.md | directories\nifeq ($(shell command -v lowdown >/dev/null; echo $$?),0)\n\t@printf \"\\n\\033[1;92mGenerating man page $@\\033[37m...\\033[0m\\n\"\n\tlowdown -s -Tman -o $@ $<\nelse\n\t@printf \"\\n\\033[1;93mCommand 'lowdown' not found: skipping generating man page $@\\033[0m\\n\"\nendif\n\n#? Clean only Objects\nclean:\n\t@printf \"\\033[1;91mRemoving: \\033[1;97mbuilt objects...\\033[0m\\n\"\n\t@rm -rf $(BUILDDIR)\n\t@test -e lib/rocm_smi_lib/build && cmake --build lib/rocm_smi_lib/build --target clean &> /dev/null || true\n\n#? Clean Objects and Binaries\ndistclean: clean\n\t@printf \"\\033[1;91mRemoving: \\033[1;97mbuilt binaries...\\033[0m\\n\"\n\t@rm -rf $(TARGETDIR)\n\t@test -e lib/rocm_smi_lib/build && rm -rf lib/rocm_smi_lib/build || true\n\ninstall:\n\t@printf \"\\033[1;92mInstalling binary to: \\033[1;97m$(DESTDIR)$(PREFIX)/bin/btop\\n\"\n\t@mkdir -p $(DESTDIR)$(PREFIX)/bin\n\t@cp -p $(TARGETDIR)/btop $(DESTDIR)$(PREFIX)/bin/btop\n\t@chmod 755 $(DESTDIR)$(PREFIX)/bin/btop\n\t@printf \"\\033[1;92mInstalling doc to: \\033[1;97m$(DESTDIR)$(PREFIX)/share/btop\\n\"\n\t@mkdir -p $(DESTDIR)$(PREFIX)/share/btop\n\t@cp -p README.md $(DESTDIR)$(PREFIX)/share/btop\n\t@printf \"\\033[1;92mInstalling themes to: \\033[1;97m$(DESTDIR)$(PREFIX)/share/btop/themes\\033[0m\\n\"\n\t@cp -pr themes $(DESTDIR)$(PREFIX)/share/btop\n\t@printf \"\\033[1;92mInstalling desktop entry to: \\033[1;97m$(DESTDIR)$(PREFIX)/share/applications/btop.desktop\\n\"\n\t@mkdir -p $(DESTDIR)$(PREFIX)/share/applications/\n\t@cp -p btop.desktop $(DESTDIR)$(PREFIX)/share/applications/btop.desktop\n\t@printf \"\\033[1;92mInstalling PNG icon to: \\033[1;97m$(DESTDIR)$(PREFIX)/share/icons/hicolor/48x48/apps/btop.png\\n\"\n\t@mkdir -p $(DESTDIR)$(PREFIX)/share/icons/hicolor/48x48/apps\n\t@cp -p Img/icon.png $(DESTDIR)$(PREFIX)/share/icons/hicolor/48x48/apps/btop.png\n\t@printf \"\\033[1;92mInstalling SVG icon to: \\033[1;97m$(DESTDIR)$(PREFIX)/share/icons/hicolor/scalable/apps/btop.svg\\n\"\n\t@mkdir -p $(DESTDIR)$(PREFIX)/share/icons/hicolor/scalable/apps\n\t@cp -p Img/icon.svg $(DESTDIR)$(PREFIX)/share/icons/hicolor/scalable/apps/btop.svg\nifneq ($(wildcard btop.1),)\n\t@printf \"\\033[1;92mInstalling man page to: \\033[1;97m$(DESTDIR)$(PREFIX)/share/man/man1/btop.1\\n\"\n\t@mkdir -p $(DESTDIR)$(PREFIX)/share/man/man1\n\t@cp -p btop.1 $(DESTDIR)$(PREFIX)/share/man/man1/btop.1\nendif\n\n#? Set SUID bit for btop as $SU_USER in $SU_GROUP\nsetuid:\n\t@printf \"\\033[1;97mFile: $(DESTDIR)$(PREFIX)/bin/btop\\n\"\n\t@printf \"\\033[1;92mSetting owner \\033[1;97m$(SU_USER):$(SU_GROUP)\\033[0m\\n\"\n\t@chown $(SU_USER):$(SU_GROUP) $(DESTDIR)$(PREFIX)/bin/btop\n\t@printf \"\\033[1;92mSetting SUID bit\\033[0m\\n\"\n\t@chmod u+s $(DESTDIR)$(PREFIX)/bin/btop\n\n#? Run setcap on btop for extended capabilities\nsetcap:\n\t@printf \"\\033[1;97mFile: $(DESTDIR)$(PREFIX)/bin/btop\\n\"\n\t@printf \"\\033[1;92mSetting capabilities...\\033[0m\\n\"\n\t@setcap cap_perfmon=+ep $(DESTDIR)$(PREFIX)/bin/btop\n\n# With 'rm -v' user will see what files (if any) got removed\nuninstall:\n\t@printf \"\\033[1;91mRemoving: \\033[1;97m$(DESTDIR)$(PREFIX)/bin/btop\\033[0m\\n\"\n\t@rm -rfv $(DESTDIR)$(PREFIX)/bin/btop\n\t@printf \"\\033[1;91mRemoving: \\033[1;97m$(DESTDIR)$(PREFIX)/share/btop\\033[0m\\n\"\n\t@rm -rfv $(DESTDIR)$(PREFIX)/share/btop\n\t@printf \"\\033[1;91mRemoving: \\033[1;97m$(DESTDIR)$(PREFIX)/share/applications/btop.desktop\\033[0m\\n\"\n\t@rm -rfv $(DESTDIR)$(PREFIX)/share/applications/btop.desktop\n\t@printf \"\\033[1;91mRemoving: \\033[1;97m$(DESTDIR)$(PREFIX)/share/icons/hicolor/48x48/apps/btop.png\\033[0m\\n\"\n\t@rm -rfv $(DESTDIR)$(PREFIX)/share/icons/hicolor/48x48/apps/btop.png\n\t@printf \"\\033[1;91mRemoving: \\033[1;97m$(DESTDIR)$(PREFIX)/share/icons/hicolor/scalable/apps/btop.svg\\033[0m\\n\"\n\t@rm -rfv $(DESTDIR)$(PREFIX)/share/icons/hicolor/scalable/apps/btop.svg\n\t@printf \"\\033[1;91mRemoving: \\033[1;97m$(DESTDIR)$(PREFIX)/share/man/man1/btop.1\\033[0m\\n\"\n\t@rm -rfv $(DESTDIR)$(PREFIX)/share/man/man1/btop.1\n\n#? Pull in dependency info for *existing* .o files\n-include $(OBJECTS:.$(OBJEXT)=.$(DEPEXT))\n\n#? Compile rocm_smi\nifeq ($(GPU_SUPPORT)$(RSMI_STATIC),truetrue)\n\tROCM_DIR ?= lib/rocm_smi_lib\n\tROCM_BUILD_DIR := $(ROCM_DIR)/build\n\tifeq ($(DEBUG),true)\n\t\tBUILD_TYPE := Debug\n\telse\n\t\tBUILD_TYPE := Release\n\tendif\n.ONESHELL:\nrocm_smi:\n\t@printf \"\\n\\033[1;92mBuilding ROCm SMI static library\\033[37m...\\033[0m\\n\"\n\t@TSTAMP=$$(date +%s 2>/dev/null || echo \"0\")\n\t@$(QUIET) || printf \"\\033[1;97mRunning CMake...\\033[0m\\n\"\n\tCXX=$(CXX) cmake -S $(ROCM_DIR) -B $(ROCM_BUILD_DIR) -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) -DCMAKE_POLICY_DEFAULT_CMP0069=NEW -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON -DBUILD_SHARED_LIBS=OFF $(SUPPRESS) || { printf \"\\033[1;91mCMake failed, continuing build without statically linking ROCm SMI\\033[37m...\\033[0m\\n\"; exit 0; }\n\t@$(QUIET) || printf \"\\n\\033[1;97mBuilding and linking...\\033[0m\\n\"\n\t@cmake --build $(ROCM_BUILD_DIR) -j -t rocm_smi64 $(SUPPRESS) || { printf \"\\033[1;91mMake failed, continuing build without statically linking ROCm SMI\\033[37m...\\033[0m\\n\"; exit 0; }\n\t@printf \"\\033[1;92m100$(P)\\033[10D\\033[5C-> \\033[1;37m$(ROCM_BUILD_DIR)/rocm_smi/librocm_smi64.a \\033[1;93m(\\033[1;97m$$(du -ah $(ROCM_BUILD_DIR)/rocm_smi/librocm_smi64.a | cut -f1)iB\\033[1;93m)\\033[0m\\n\"\n\t@printf \"\\033[1;92mROCm SMI build complete in \\033[92m(\\033[97m$$($(DATE_CMD) -d @$$(expr $$(date +%s 2>/dev/null || echo \"0\") - $(TIMESTAMP) 2>/dev/null) -u +%Mm:%Ss 2>/dev/null | sed 's/^00m://' || echo \"unknown\")\\033[92m)\\033[0m\\n\"\n\t@$(eval override LDFLAGS += $(ROCM_BUILD_DIR)/rocm_smi/librocm_smi64.a -DRSMI_STATIC) # TODO: this seems to execute every time, no matter if the compilation failed or succeeded\n\t@$(eval override CXXFLAGS += -DRSMI_STATIC)\nelse\nrocm_smi:\n\t@true\nendif\n\n#? Link\n.ONESHELL:\nbtop: $(OBJECTS) | rocm_smi directories\n\t@sleep 0.2 2>/dev/null || true\n\t@TSTAMP=$$(date +%s 2>/dev/null || echo \"0\")\n\t@$(QUIET) || printf \"\\n\\033[1;92mLinking and optimizing binary\\033[37m...\\033[0m\\n\"\n\t@$(VERBOSE) || printf \"$(CXX) -o $(TARGETDIR)/btop $^ $(LDFLAGS)\\n\"\n\t@$(CXX) -o $(TARGETDIR)/btop $^ $(LDFLAGS) || exit 1\n\t@printf \"\\033[1;92m100$(P) -> \\033[1;37m$(TARGETDIR)/btop \\033[100D\\033[38C\\033[1;93m(\\033[1;97m$$(du -ah $(TARGETDIR)/btop | cut -f1)iB\\033[1;93m) \\033[92m(\\033[97m$$($(DATE_CMD) -d @$$(expr $$(date +%s 2>/dev/null || echo \"0\") - $${TSTAMP} 2>/dev/null) -u +%Mm:%Ss 2>/dev/null | sed 's/^00m://' || echo '')\\033[92m)\\033[0m\\n\"\n\t@printf \"\\n\\033[1;92mBuild complete in \\033[92m(\\033[97m$$($(DATE_CMD) -d @$$(expr $$(date +%s 2>/dev/null || echo \"0\") - $(TIMESTAMP) 2>/dev/null) -u +%Mm:%Ss 2>/dev/null | sed 's/^00m://' || echo \"unknown\")\\033[92m)\\033[0m\\n\"\n\n#? Compile\n.ONESHELL:\n$(BUILDDIR)/%.$(OBJEXT): $(SRCDIR)/%.$(SRCEXT) | rocm_smi directories config.h\n\t@sleep 0.3 2>/dev/null || true\n\t@TSTAMP=$$(date +%s 2>/dev/null || echo \"0\")\n\t@$(QUIET) || printf \"\\033[1;97mCompiling $<\\033[0m\\n\"\n\t@$(VERBOSE) || printf \"$(CXX) $(CXXFLAGS) $(INC) -MMD -c -o $@ $<\\n\"\n\t@$(CXX) $(CXXFLAGS) $(INC) -MMD -c -o $@ $< || exit 1\n\t@printf \"\\033[1;92m$$($(PROGRESS))$(P)\\033[10D\\033[5C-> \\033[1;37m$@ \\033[100D\\033[38C\\033[1;93m(\\033[1;97m$$(du -ah $@ | cut -f1)iB\\033[1;93m) \\033[92m(\\033[97m$$($(DATE_CMD) -d @$$(expr $$($(DATE_CMD) +%s 2>/dev/null || echo \"0\") - $${TSTAMP} 2>/dev/null) -u +%Mm:%Ss 2>/dev/null | sed 's/^00m://' || echo '')\\033[92m)\\033[0m\\n\"\n\n#? Compile intel_gpu_top C sources for Intel GPU support\n.ONESHELL:\n$(BUILDDIR)/%.c.o: $(SRCDIR)/$(PLATFORM_DIR)/intel_gpu_top/%.c | directories\n\t@sleep 0.3 2>/dev/null || true\n\t@TSTAMP=$$(date +%s 2>/dev/null || echo \"0\")\n\t@$(QUIET) || printf \"\\033[1;97mCompiling $<\\033[0m\\n\"\n\t@$(VERBOSE) || printf \"$(CC) $(INC) -c -o $@ $<\\n\"\n\t@$(CC) $(INC) -w -c -o $@ $< || exit 1\n\t@printf \"\\033[1;92m$$($(PROGRESS))$(P)\\033[10D\\033[5C-> \\033[1;37m$@ \\033[100D\\033[38C\\033[1;93m(\\033[1;97m$$(du -ah $@ | cut -f1)iB\\033[1;93m) \\033[92m(\\033[97m$$($(DATE_CMD) -d @$$(expr $$($(DATE_CMD) +%s 2>/dev/null || echo \"0\") - $${TSTAMP} 2>/dev/null) -u +%Mm:%Ss 2>/dev/null | sed 's/^00m://' || echo '')\\033[92m)\\033[0m\\n\"\n\n\n#? Non-File Targets\n.PHONY: all config.h msg help pre\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 50.513671875,
          "content": "# ![btop++](Img/logo.png)\n\n<a href=\"https://repology.org/project/btop/versions\">\n    <img src=\"https://repology.org/badge/vertical-allrepos/btop.svg\" alt=\"Packaging status\" align=\"right\">\n</a>\n\n![Linux](https://img.shields.io/badge/-Linux-grey?logo=linux)\n![macOS](https://img.shields.io/badge/-OSX-black?logo=apple)\n![FreeBSD](https://img.shields.io/badge/-FreeBSD-red?logo=freebsd)\n![NetBSD](https://img.shields.io/badge/-NetBSD-black?logo=netbsd)\n![OpenBSD](https://img.shields.io/badge/-OpenBSD-black?logo=openbsd)\n![Usage](https://img.shields.io/badge/Usage-System%20resource%20monitor-yellow)\n![c++20](https://img.shields.io/badge/cpp-c%2B%2B20-green)\n![latest_release](https://img.shields.io/github/v/tag/aristocratos/btop?label=release)\n[![Donate](https://img.shields.io/badge/-Donate-yellow?logo=paypal)](https://paypal.me/aristocratos)\n[![Sponsor](https://img.shields.io/badge/-Sponsor-red?logo=github)](https://github.com/sponsors/aristocratos)\n[![Coffee](https://img.shields.io/badge/-Buy%20me%20a%20Coffee-grey?logo=Ko-fi)](https://ko-fi.com/aristocratos)\n[![btop](https://snapcraft.io/btop/badge.svg)](https://snapcraft.io/btop)\n[![Continuous Build Linux](https://github.com/aristocratos/btop/actions/workflows/continuous-build-linux.yml/badge.svg)](https://github.com/aristocratos/btop/actions/workflows/continuous-build-linux.yml)\n[![Continuous Build macOS](https://github.com/aristocratos/btop/actions/workflows/continuous-build-macos.yml/badge.svg)](https://github.com/aristocratos/btop/actions/workflows/continuous-build-macos.yml)\n[![Continuous Build FreeBSD](https://github.com/aristocratos/btop/actions/workflows/continuous-build-freebsd.yml/badge.svg)](https://github.com/aristocratos/btop/actions/workflows/continuous-build-freebsd.yml)\n[![Continuous Build NetBSD](https://github.com/aristocratos/btop/actions/workflows/continuous-build-netbsd.yml/badge.svg)](https://github.com/aristocratos/btop/actions/workflows/continuous-build-netbsd.yml)\n[![Continuous Build OpenBSD](https://github.com/aristocratos/btop/actions/workflows/continuous-build-openbsd.yml/badge.svg)](https://github.com/aristocratos/btop/actions/workflows/continuous-build-openbsd.yml)\n\n## Index\n\n* [News](#news)\n* [Documents](#documents)\n* [Description](#description)\n* [Features](#features)\n* [Themes](#themes)\n* [Support and funding](#support-and-funding)\n* [Prerequisites](#prerequisites) (Read this if you are having issues!)\n* [Screenshots](#screenshots)\n* [Keybindings](#help-menu)\n* [Installation Linux/macOS](#installation)\n* [Compilation Linux](#compilation-linux)\n* [Compilation macOS](#compilation-macos-osx)\n* [Compilation FreeBSD](#compilation-freebsd)\n* [Compilation NetBSD](#compilation-netbsd)\n* [Compilation OpenBSD](#compilation-openbsd)\n* [GPU compatibility](#gpu-compatibility)\n* [Installing the snap](#installing-the-snap)\n* [Configurability](#configurability)\n* [License](#license)\n\n## News\n\n##### 22 September 2024\n\nBtop release v1.4.0\n\nIntel GPU support added, note that only GPU utilization, power usage and clock speed available to monitor. Thanks to [@bjia56](https://github.com/bjia56) for contributions.\n\nNetBSD support added. Thanks to [@fraggerfox](https://github.com/fraggerfox) for contributions.\n\nSee [CHANGELOG.md](CHANGELOG.md) and latest [release](https://github.com/aristocratos/btop/releases/latest) for detailed list of new features, bug fixes and new themes.\n\n##### 7 January 2024\n\nBtop release v1.3.0\n\nBig release with GPU support added for Linux and platform support for OpenBSD. Big thanks to [@romner-set](https://github.com/romner-set) (GPU support) and [@joske](https://github.com/joske) (OpenBSD support) for contributions.\nAnd a multitude of bugfixes and small changes, see [CHANGELOG.md](CHANGELOG.md) and latest [release](https://github.com/aristocratos/btop/releases/latest) for detailed list and attributions.\n\nSee news entry below for more information regarding GPU support.\n\n##### 25 November 2023\n\nGPU monitoring added for Linux!\n\nCompile from git main to try it out.\n\nUse keys `5`, `6`, `7` and `0` to show/hide the gpu monitoring boxes. `5` = Gpu 1, `6` = Gpu 2, etc.\n\nGpu stats/graphs can also be displayed in the \"Cpu box\" (not as verbose), see the cpu options menu for info and configuration.\n\nNote that the binaries provided on the release page (when released) and the continuous builds will not have gpu support enabled.\n\nBecause the GPU support relies on loading of dynamic gpu libraries, gpu support will not work when also static linking.\n\nSee [Compilation Linux](#compilation-linux) for more info on how to compile with gpu monitoring support.\n\nMany thanks to [@romner-set](https://github.com/romner-set) who wrote the vast majority of the implementation for GPU support.\n\nBig update with version bump to 1.3 coming soon.\n\n##### 28 August 2022\n\n[![btop4win](https://github.com/aristocratos/btop4win/raw/master/Img/logo.png)](https://github.com/aristocratos/btop4win)\n\nFirst release of btop4win available at https://github.com/aristocratos/btop4win\n\n<details>\n<summary>More...</summary>\n\n##### 16 January 2022\n\nRelease v1.2.0 with FreeBSD support. No release binaries for FreeBSD provided as of yet.\n\nAgain a big thanks to [@joske](https://github.com/joske) for his porting efforts!\n\nSince compatibility with Linux, macOS and FreeBSD are done, the focus going forward will be on new features like GPU monitoring.\n\n##### 13 November 2021\n\nRelease v1.1.0 with macOS support. Binaries in [continuous-build-macos](https://github.com/aristocratos/btop/actions/workflows/continuous-build-macos.yml) are only x86 for now.\nmacOS binaries + installer are included for both x86 and ARM64 (Apple Silicon) in the releases.\n\nBig thank you to [@joske](https://github.com/joske) who wrote the vast majority of the implementation!\n\n##### 30 October 2021\n\nWork on the OSX [macOS] and FreeBSD branches, both initiated and mostly worked on by [@joske](https://github.com/joske), will likely be completed in the coming weeks.\nThe OSX [macOS] branch has some memory leaks that needs to be sorted out and both have some issues with the processes cpu usage calculation and other smaller issues that needs fixing.\n\nIf you want to help out, test for bugs/fix bugs or just try out the branches:\n\n**macOS / OSX**\n```bash\n# Install and use Homebrew or MacPorts package managers for easy dependency installation\nbrew install coreutils make gcc@11 lowdown\ngit clone https://github.com/aristocratos/btop.git\ncd btop\ngit checkout OSX\ngmake\n```\n\n**FreeBSD**\n```bash\nsudo pkg install gmake gcc11 coreutils git lowdown\ngit clone https://github.com/aristocratos/btop.git\ncd btop\ngit checkout freebsd\ngmake\n```\n\nNote that GNU make (`gmake`) is recommended but not required for macOS/OSX but it is required on FreeBSD.\n\n\n##### 6 October 2021\n\nmacOS development have been started by [@joske](https://github.com/joske), big thanks :)\nSee branch [OSX](https://github.com/aristocratos/btop/tree/OSX) for current progress.\n\n##### 18 September 2021\n\nThe Linux version of btop++ is complete. Released as version 1.0.0\n\nI will be providing statically compiled binaries for a range of architectures in every release for those having problems compiling.\n\nFor compilation GCC 10 is required, GCC 11 preferred.\n\nPlease report any bugs to the [Issues](https://github.com/aristocratos/btop/issues/new?assignees=aristocratos&labels=bug&template=bug_report.md&title=%5BBUG%5D) page.\n\nThe development plan right now:\n\n* 1.1.0 macOS [OSX] support\n* 1.2.0 FreeBSD support\n* 1.3.0 Support for GPU monitoring\n* 1.X.0 Other platforms and features...\n\nWindows support is not in the plans as of now, but if anyone else wants to take it on, I will try to help.\n\n##### 5 May 2021\n\nThis project is gonna take some time until it has complete feature parity with bpytop, since all system information gathering will have to be written from scratch without any external libraries.\nAnd will need some help in the form of code contributions to get complete support for BSD and macOS/OSX.\n\n</details>\n\n## Documents\n\n**[CHANGELOG.md](CHANGELOG.md)**\n\n**[CONTRIBUTING.md](CONTRIBUTING.md)**\n\n**[CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md)**\n\n## Description\n\nResource monitor that shows usage and stats for processor, memory, disks, network and processes.\n\nC++ version and continuation of [bashtop](https://github.com/aristocratos/bashtop) and [bpytop](https://github.com/aristocratos/bpytop).\n\n## Features\n\n* Easy to use, with a game inspired menu system.\n* Full mouse support, all buttons with a highlighted key is clickable and mouse scroll works in process list and menu boxes.\n* Fast and responsive UI with UP, DOWN keys process selection.\n* Function for showing detailed stats for selected process.\n* Ability to filter processes.\n* Easy switching between sorting options.\n* Tree view of processes.\n* Send any signal to selected process.\n* UI menu for changing all config file options.\n* Auto scaling graph for network usage.\n* Shows IO activity and speeds for disks.\n* Battery meter\n* Selectable symbols for the graphs.\n* Custom presets\n* And more...\n\n## Themes\n\nBtop++ uses the same theme files as bpytop and bashtop (some color values missing in bashtop themes) .\n\nSee [themes](https://github.com/aristocratos/btop/tree/main/themes) folder for available themes.\n\nThe `make install` command places the default themes in `[$PREFIX or /usr/local]/share/btop/themes`.\nUser created themes should be placed in `$XDG_CONFIG_HOME/btop/themes` or `$HOME/.config/btop/themes`.\n\nLet me know if you want to contribute with new themes.\n\n## Support and funding\n\nYou can sponsor this project through github, see [my sponsors page](https://github.com/sponsors/aristocratos) for options.\n\nOr donate through [paypal](https://paypal.me/aristocratos) or [ko-fi](https://ko-fi.com/aristocratos).\n\nAny support is greatly appreciated!\n\n## Prerequisites\n\nFor best experience, a terminal with support for:\n\n* 24-bit truecolor ([See list of terminals with truecolor support](https://github.com//termstandard/colors))\n* 256-color terminals are supported through 24-bit to 256-color conversion when setting \"truecolor\" to False in the options or with \"-lc/--low-color\" arguments.\n* 16 color TTY mode will be activated if a real tty device is detected. Can be forced with \"-t/--tty_on\" arguments.\n* Wide characters (Are sometimes problematic in web-based terminals)\n\nAlso needs a UTF8 locale and a font that covers:\n\n* Unicode Block “Braille Patterns” U+2800 - U+28FF (Not needed in TTY mode or with graphs set to type: block or tty.)\n* Unicode Block “Geometric Shapes” U+25A0 - U+25FF\n* Unicode Block \"Box Drawing\" and \"Block Elements\" U+2500 - U+259F\n\n### **Optional Dependencies (Needed for GPU monitoring) (Only Linux)**\n\nGPU monitoring also requires a btop binary built with GPU support (`GPU_SUPPORT=true` flag).\n\nSee [GPU compatibility](#gpu-compatibility) section for more about compiling with GPU support.\n\n * **NVIDIA**\n\nIf you have an NVIDIA GPU you must use an official NVIDIA driver, both the closed-source and open-source ones have been verified to work.\n\nIn addition to that you must also have the nvidia-ml dynamic library installed, which should be included with the driver package of your distribution.\n\n * **AMD**\n\nIf you have an AMD GPU `rocm_smi_lib` is required, which may or may not be packaged for your distribution.\n\n * **INTEL**\n\nRequires a working C compiler if compiling from source - tested with GCC12 and Clang16.\n\nAlso requires the user to have permission to read from SYSFS.\n\nCan be set with `make setcap` (preferred) or `make setuid` or by running btop with `sudo` or equivalent.\n\n### **Notice (Text rendering issues)**\n\n* If you are having problems with the characters in the graphs not looking like they do in the screenshots, it's likely a problem with your systems configured fallback font not having support for braille characters.\n\n* See [Terminess Powerline](https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/Terminus/terminus-ttf-4.40.1) for an example of a font that includes the braille symbols.\n\n* See comments by @sgleizes [link](https://github.com/aristocratos/bpytop/issues/100#issuecomment-684036827) and @XenHat [link](https://github.com/aristocratos/bpytop/issues/100#issuecomment-691585587) in issue #100 for possible solutions.\n\n* If text are misaligned and you are using Konsole or Yakuake, turning off \"Bi-Directional text rendering\" is a possible fix.\n\n* Characters clipping in to each other or text/border misalignments is not bugs caused by btop, but most likely a fontconfig or terminal problem where the braille characters making up the graphs aren't rendered correctly.\n\n* Look to the creators of the terminal emulator you use to fix these issues if the previous mentioned fixes don't work for you.\n\n## Screenshots\n\n#### Main UI showing details for a selected process\n\n![Screenshot 1](Img/normal.png)\n\n#### Main UI in TTY mode\n\n![Screenshot 2](Img/tty.png)\n\n#### Main UI with custom options\n\n![Screenshot 3](Img/alt.png)\n\n#### Main-menu\n\n![Screenshot 3](Img/main-menu.png)\n\n#### Options-menu\n\n![Screenshot 4](Img/options-menu.png)\n\n#### Help-menu\n\n![Screenshot 5](Img/help-menu.png)\n\n## Installation\n\n**Binaries for Linux are statically compiled with musl and works on kernel 2.6.39 and newer**\n\n1. **Download btop-(VERSION)-(ARCH)-(PLATFORM).tbz from [latest release](https://github.com/aristocratos/btop/releases/latest) and unpack to a new folder**\n\n   **Notice! Use x86_64 for 64-bit x86 systems, i486 and i686 are 32-bit!**\n\n2. **Install (from created folder)**\n\n   * **Run:**\n\n   ```bash\n   # use \"make install PREFIX=/target/dir\" to set target, default: /usr/local\n   # only use \"sudo\" when installing to a NON user owned directory\n   sudo make install\n   ```\n\n3. **(Optional/Required for Intel GPU) Set extended capabilities or suid bit to btop**\n\n   Enables signal sending to any process without starting with `sudo` and can prevent /proc read permissions problems on some systems.\n\n   Is required for Intel GPU support.\n\n   * **Run:**\n\n   ```bash\n   # run after make install and use same PREFIX if any was used at install\n   sudo make setcap\n   ```\n   * **or**\n\n   ```bash\n   # run after make install and use same PREFIX if any was used at install\n   # set SU_USER and SU_GROUP to select user and group, default is root:root\n   sudo make setuid\n   ```\n\n* **Uninstall**\n\n  * **Run:**\n\n   ```bash\n   sudo make uninstall\n   ```\n\n* **Show help**\n\n   ```bash\n   make help\n   ```\n\n**Binary release (from native os repo)**\n\n* **openSUSE**\n  * **Tumbleweed:**\n    ```bash\n    sudo zypper in btop\n    ```\n  * For all other versions, see [openSUSE Software: btop](https://software.opensuse.org/package/btop)\n* **Fedora**\n    ```bash\n    sudo dnf install btop\n\t```\n* **RHEL/AlmaLinux 8+**\n    ```bash\n    sudo dnf install epel-release\n\tsudo dnf install btop\n\t```\n* **FreeBSD**\n\t```sh\n\tpkg install btop\n\t```\n* **NetBSD**\n\t```sh\n\tpkg_add btop\n\t```\n\n\n**Binary release on Homebrew (macOS (x86_64 & ARM64) / Linux (x86_64))**\n\n* **[Homebrew](https://formulae.brew.sh/formula/btop)**\n  ```bash\n  brew install btop\n  ```\n\n## Compilation Linux\n\n   Requires at least GCC 10 or Clang 16.\n\n   The makefile also needs GNU coreutils and `sed` (should already be installed on any modern distribution).\n\n   ### GPU compatibility\n\n   Btop++ supports Nvidia and AMD GPUs and Intel IGPUs out of the box on Linux x86_64, provided you have the correct drivers and libraries.\n\n   Gpu support for Nvidia or AMD will not work when static linking glibc (or musl, etc.)!\n\n   For x86_64 Linux the flag `GPU_SUPPORT` is automatically set to `true`, to manually disable gpu support set the flag to false, like:\n\n   `make GPU_SUPPORT=false` (or `cmake -DBTOP_GPU=false` with CMake)\n\n * **NVIDIA**\n\n    You must use an official NVIDIA driver, both the closed-source and [open-source](https://github.com/NVIDIA/open-gpu-kernel-modules) ones have been verified to work.\n\n    In addition to that you must also have the `nvidia-ml` dynamic library installed, which should be included with the driver package of your distribution.\n\n * **AMD**\n\n    AMDGPU data is queried using the [ROCm SMI](https://github.com/rocm/rocm_smi_lib) library, which may or may not be packaged for your distribution. If your distribution doesn't provide a package, btop++ is statically linked to ROCm SMI with the `RSMI_STATIC=true` make flag.\n\n    This flag expects the ROCm SMI source code in `lib/rocm_smi_lib`, and compilation will fail if it's not there. The latest tested version is 5.6.x, which can be obtained with the following command:\n\n   ```bash\n   git clone https://github.com/rocm/rocm_smi_lib.git --depth 1 -b rocm-5.6.x lib/rocm_smi_lib\n   ```\n\n<details>\n<summary>\n\n### With Make\n</summary>\n\n1. **Install dependencies (example for Ubuntu 21.04 Hirsute)**\n\n   ```bash\n   sudo apt install coreutils sed git build-essential gcc-11 g++-11 lowdown\n   ```\n\n2. **Clone repository**\n\n   ```bash\n   git clone https://github.com/aristocratos/btop.git\n   cd btop\n   ```\n\n3. **Compile**\n\n   ```bash\n   make\n   ```\n\n   Options for make:\n\n   | Flag                            | Description                                                             |\n   |---------------------------------|-------------------------------------------------------------------------|\n   | `VERBOSE=true`                  | To display full compiler/linker commands                                |\n   | `STATIC=true`                   | For static compilation                                                  |\n   | `QUIET=true`                    | For less verbose output                                                 |\n   | `STRIP=true`                    | To force stripping of debug symbols (adds `-s` linker flag)             |\n   | `DEBUG=true`                    | Sets OPTFLAGS to `-O0 -g` and enables more verbose debug logging        |\n   | `ARCH=<architecture>`           | To manually set the target architecture                                 |\n   | `FORTIFY_SOURCE=false`          | Disable fortification with `_FORTIFY_SOURCE=3`                          |\n   | `GPU_SUPPORT=<true\\|false>`     | Enable/disable GPU support (Enabled by default on X86_64 Linux)         |\n   | `RSMI_STATIC=true`              | To statically link the ROCm SMI library used for querying AMDGPU        |\n   | `ADDFLAGS=<flags>`              | For appending flags to both compiler and linker                         |\n   | `CXX=<compiler>`                | Manually set which compiler to use                                       |\n\n   Example: `make ADDFLAGS=-march=native` might give a performance boost if compiling only for your own system.\n\n   Notice! If using LDAP Authentication, usernames will show as UID number for LDAP users if compiling statically with glibc.\n\n4. **Install**\n\n   ```bash\n   sudo make install\n   ```\n\n   Append `PREFIX=/target/dir` to set target, default: `/usr/local`\n\n   Notice! Only use \"sudo\" when installing to a NON user owned directory.\n\n5. **(Optional/Required for Intel GPU support) Set extended capabilities or suid bit to btop**\n\n   No need for `sudo` to enable signal sending to any process and to prevent /proc read permissions problems on some systems.\n\n   Also required for Intel GPU monitoring.\n\n   Run after make install and use same PREFIX if any was used at install.\n\n   ```bash\n   sudo make setcap\n   ```\n\n   or\n\n   Set `SU_USER` and `SU_GROUP` to select user and group, default is `root` and `root`\n\n   ```bash\n   sudo make setuid\n   ```\n\n* **Uninstall**\n\n   ```bash\n   sudo make uninstall\n   ```\n\n* **Remove any object files from source dir**\n\n   ```bash\n   make clean\n   ```\n\n* **Remove all object files, binaries and created directories in source dir**\n\n   ```bash\n   make distclean\n   ```\n\n* **Show help**\n\n   ```bash\n   make help\n   ```\n\n</details>\n<details>\n<summary>\n\n### With CMake (Community maintained)\n</summary>\n\n1. **Install build dependencies**\n\n   Requires Clang / GCC, CMake, Ninja, Lowdown and Git\n\n   For example, with Debian Bookworm:\n\n   ```bash\n   sudo apt install cmake git g++ ninja-build lowdown\n   ```\n\n2. **Clone the repository**\n\n   ```bash\n   git clone https://github.com/aristocratos/btop.git && cd btop\n   ``````\n\n3. **Compile**\n\n   ```bash\n   # Configure\n   cmake -B build -G Ninja\n   # Build\n   cmake --build build\n   ```\n\n   This will automatically build a release version of btop.\n\n   Some useful options to pass to the configure step:\n\n   | Configure flag                  | Description                                                             |\n   |---------------------------------|-------------------------------------------------------------------------|\n   | `-DBTOP_STATIC=<ON\\|OFF>`       | Enables static linking (OFF by default)                                 |\n   | `-DBTOP_LTO=<ON\\|OFF>`          | Enables link time optimization (ON by default)                          |\n   | `-DBTOP_USE_MOLD=<ON\\|OFF>`     | Use mold to link btop (OFF by default)                                  |\n   | `-DBTOP_PEDANTIC=<ON\\|OFF>`     | Compile with additional warnings (OFF by default)                       |\n   | `-DBTOP_WERROR=<ON\\|OFF>`       | Compile with warnings as errors (OFF by default)                        |\n   | `-DBTOP_FORTIFY=<ON\\|OFF>`      | Detect buffer overflows with `_FORTIFY_SOURCE=3` (ON by default)        |\n   | `-DBTOP_GPU=<ON\\|OFF>`          | Enable GPU support (ON by default)                                      |\n   | `-DBTOP_RSMI_STATIC=<ON\\|OFF>`  | Build and link the ROCm SMI library statically (OFF by default)         |\n   | `-DCMAKE_INSTALL_PREFIX=<path>` | The installation prefix ('/usr/local' by default)                       |\n\n   To force any other compiler, run `CXX=<compiler> cmake -B build -G Ninja`\n\n4. **Install**\n\n   ```bash\n   cmake --install build\n   ```\n\n   May require root privileges\n\n5. **Uninstall**\n\n   CMake doesn't generate an uninstall target by default. To remove installed files, run\n   ```\n   cat build/install_manifest.txt | xargs rm -irv\n   ```\n\n6. **Cleanup build directory**\n\n   ```bash\n   cmake --build build -t clean\n   ```\n\n</details>\n\n## Compilation macOS OSX\n\n   Requires at least GCC 10 or Clang 16.\n\n   With GCC, version 12 (or better) is needed for macOS Ventura. If you get linker errors on Ventura you'll need to upgrade your command line tools (Version 14.0) is bugged.\n\n   The makefile also needs GNU coreutils and `sed`.\n\n   Install and use Homebrew or MacPorts package managers for easy dependency installation\n\n<details>\n<summary>\n\n### With Make\n</summary>\n\n1. **Install dependencies (example for Homebrew)**\n\n   ```bash\n   brew install coreutils make gcc@12 lowdown\n   ```\n\n2. **Clone repository**\n\n   ```bash\n   git clone https://github.com/aristocratos/btop.git\n   cd btop\n   ```\n3. **Compile**\n\n   ```bash\n   gmake\n   ```\n\n   Options for make:\n\n   | Flag                            | Description                                                             |\n   |---------------------------------|-------------------------------------------------------------------------|\n   | `VERBOSE=true`                  | To display full compiler/linker commands                                |\n   | `STATIC=true`                   | For static compilation (only libgcc and libstdc++)                      |\n   | `QUIET=true`                    | For less verbose output                                                 |\n   | `STRIP=true`                    | To force stripping of debug symbols (adds `-s` linker flag)             |\n   | `DEBUG=true`                    | Sets OPTFLAGS to `-O0 -g` and enables more verbose debug logging        |\n   | `ARCH=<architecture>`           | To manually set the target architecture                                 |\n   | `FORTIFY_SOURCE=false`          | Disable fortification with `_FORTIFY_SOURCE=3`                          |\n   | `ADDFLAGS=<flags>`              | For appending flags to both compiler and linker                         |\n   | `CXX=<compiler>`                | Manually set which compiler to use                                       |\n\n   Example: `gmake ADDFLAGS=-march=native` might give a performance boost if compiling only for your own system.\n\n4. **Install**\n\n   ```bash\n   sudo gmake install\n   ```\n\n   Append `PREFIX=/target/dir` to set target, default: `/usr/local`\n\n   Notice! Only use \"sudo\" when installing to a NON user owned directory.\n\n5. **(Recommended) Set suid bit to make btop always run as root (or other user)**\n\n   ```bash\n   sudo gmake setuid\n   ```\n\n   No need for `sudo` to see information for non user owned processes and to enable signal sending to any process.\n\n   Run after make install and use same PREFIX if any was used at install.\n\n   Set `SU_USER` and `SU_GROUP` to select user and group, default is `root` and `wheel`\n\n* **Uninstall**\n\n   ```bash\n   sudo gmake uninstall\n   ```\n\n* **Remove any object files from source dir**\n\n   ```bash\n   gmake clean\n   ```\n\n* **Remove all object files, binaries and created directories in source dir**\n\n   ```bash\n   gmake distclean\n   ```\n\n* **Show help**\n\n   ```bash\n   gmake help\n   ```\n\n</details>\n<details>\n<summary>\n\n### With CMake (Community maintained)\n</summary>\n\n1. **Install build dependencies**\n\n   Requires Clang, CMake, Ninja, Lowdown and Git\n\n   ```bash\n   brew update --quiet\n   brew install cmake git llvm ninja lowdown\n   ```\n\n2. **Clone the repository**\n\n   ```bash\n   git clone https://github.com/aristocratos/btop.git && cd btop\n   ```\n\n3. **Compile**\n\n   ```bash\n   # Configure\n   export LLVM_PREFIX=\"$(brew --prefix llvm)\"\n   export CXX=\"$LLVM_PREFIX/bin/clang++\"\n   export CPPFLAGS=\"-I$LLVM_PREFIX/include\"\n   export LDFLAGS=\"-L$LLVM_PREFIX/lib -L$LLVM_PREFIX/lib/c++ -Wl,-rpath,$LLVM_PREFIX/lib/c++ -fuse-ld=$LLVM_PREFIX/bin/ld64.lld\"\n   cmake -B build -G Ninja\n   # Build\n   cmake --build build\n   ```\n\n   _**Note:** btop uses lots of C++ 20 features, so it's necessary to be specific about the compiler and the standard library. If you get a compile with Apple-Clang or GCC, feel free to add the instructions here._\n\n   This will automatically build a release version of btop.\n\n   Some useful options to pass to the configure step:\n\n   | Configure flag                  | Description                                                             |\n   |---------------------------------|-------------------------------------------------------------------------|\n   | `-DBTOP_LTO=<ON\\|OFF>`          | Enables link time optimization (ON by default)                          |\n   | `-DBTOP_USE_MOLD=<ON\\|OFF>`     | Use mold to link btop (OFF by default)                                  |\n   | `-DBTOP_PEDANTIC=<ON\\|OFF>`     | Compile with additional warnings (OFF by default)                       |\n   | `-DBTOP_WERROR=<ON\\|OFF>`       | Compile with warnings as errors (OFF by default)                        |\n   | `-DBTOP_FORTIFY=<ON\\|OFF>`      | Detect buffer overflows with `_FORTIFY_SOURCE=3` (ON by default)        |\n   | `-DCMAKE_INSTALL_PREFIX=<path>` | The installation prefix ('/usr/local' by default)                       |\n\n   To force any specific compiler, run `CXX=<compiler> cmake -B build -G Ninja`\n\n4. **Install**\n\n   ```bash\n   cmake --install build\n   ```\n\n   May require root privileges\n\n5. **Uninstall**\n\n   CMake doesn't generate an uninstall target by default. To remove installed files, run\n   ```\n   cat build/install_manifest.txt | xargs rm -irv\n   ```\n\n6. **Cleanup build directory**\n\n   ```bash\n   cmake --build build -t clean\n   ```\n\n</details>\n\n## Compilation FreeBSD\n\n   Requires at least GCC 10 or Clang 16.\n\n   Note that GNU make (`gmake`) is required to compile on FreeBSD.\n\n<details>\n<summary>\n\n### With gmake\n</summary>\n\n1. **Install dependencies**\n\n   ```bash\n   sudo pkg install gmake gcc11 coreutils git lowdown\n   ```\n\n2. **Clone repository**\n\n   ```bash\n   git clone https://github.com/aristocratos/btop.git\n   cd btop\n   ```\n\n3. **Compile**\n\n   ```bash\n   gmake\n   ```\n\n   Options for make:\n\n   | Flag                            | Description                                                             |\n   |---------------------------------|-------------------------------------------------------------------------|\n   | `VERBOSE=true`                  | To display full compiler/linker commands                                |\n   | `STATIC=true`                   | For static compilation (only libgcc and libstdc++)                      |\n   | `QUIET=true`                    | For less verbose output                                                 |\n   | `STRIP=true`                    | To force stripping of debug symbols (adds `-s` linker flag)             |\n   | `DEBUG=true`                    | Sets OPTFLAGS to `-O0 -g` and enables more verbose debug logging        |\n   | `ARCH=<architecture>`           | To manually set the target architecture                                 |\n   | `FORTIFY_SOURCE=false`          | Disable fortification with `_FORTIFY_SOURCE=3`                          |\n   | `ADDFLAGS=<flags>`              | For appending flags to both compiler and linker                         |\n   | `CXX=<compiler>`                | Manually set which compiler to use                                       |\n\n   Example: `gmake ADDFLAGS=-march=native` might give a performance boost if compiling only for your own system.\n\n4. **Install**\n\n   ```bash\n   sudo gmake install\n   ```\n\n   Append `PREFIX=/target/dir` to set target, default: `/usr/local`\n\n   Notice! Only use \"sudo\" when installing to a NON user owned directory.\n\n5. **(Recommended) Set suid bit to make btop always run as root (or other user)**\n\n   ```bash\n   sudo gmake setuid\n   ```\n\n   No need for `sudo` to see information for non user owned processes and to enable signal sending to any process.\n\n   Run after make install and use same PREFIX if any was used at install.\n\n   Set `SU_USER` and `SU_GROUP` to select user and group, default is `root` and `wheel`\n\n* **Uninstall**\n\n   ```bash\n   sudo gmake uninstall\n   ```\n\n* **Remove any object files from source dir**\n\n   ```bash\n   gmake clean\n   ```\n\n* **Remove all object files, binaries and created directories in source dir**\n\n   ```bash\n   gmake distclean\n   ```\n\n* **Show help**\n\n   ```bash\n   gmake help\n   ```\n\n</details>\n<details>\n<summary>\n\n### With CMake (Community maintained)\n</summary>\n\n1. **Install build dependencies**\n\n   Requires Clang / GCC, CMake, Ninja, Lowdown and Git\n\n   _**Note:** LLVM's libc++ shipped with FreeBSD 13 is too old and cannot compile btop._\n\n\tFreeBSD 14 and later:\n   ```bash\n   pkg install cmake ninja lowdown\n   ```\n\n\tFreeBSD 13:\n   ```bash\n   pkg install cmake gcc13 ninja lowdown\n   ```\n\n2. **Clone the repository**\n\n   ```bash\n   git clone https://github.com/aristocratos/btop.git && cd btop\n   ```\n\n3. **Compile**\n\n\tFreeBSD 14 and later:\n   ```bash\n   # Configure\n   cmake -B build -G Ninja\n   # Build\n   cmake --build build\n   ```\n\n\tFreeBSD 13:\n   ```bash\n   # Configure\n   CXX=g++13 cmake -B build -G Ninja\n   # Build\n   cmake --build build\n   ```\n\n   This will automatically build a release version of btop.\n\n   Some useful options to pass to the configure step:\n\n   | Configure flag                  | Description                                                             |\n   |---------------------------------|-------------------------------------------------------------------------|\n   | `-DBTOP_STATIC=<ON\\|OFF>`       | Enables static linking (OFF by default)                                 |\n   | `-DBTOP_LTO=<ON\\|OFF>`          | Enables link time optimization (ON by default)                          |\n   | `-DBTOP_USE_MOLD=<ON\\|OFF>`     | Use mold to link btop (OFF by default)                                  |\n   | `-DBTOP_PEDANTIC=<ON\\|OFF>`     | Compile with additional warnings (OFF by default)                       |\n   | `-DBTOP_WERROR=<ON\\|OFF>`       | Compile with warnings as errors (OFF by default)                        |\n   | `-DBTOP_FORTIFY=<ON\\|OFF>`      | Detect buffer overflows with `_FORTIFY_SOURCE=3` (ON by default)        |\n   | `-DCMAKE_INSTALL_PREFIX=<path>` | The installation prefix ('/usr/local' by default)                       |\n\n   _**Note:** Static linking does not work with GCC._\n\n   To force any other compiler, run `CXX=<compiler> cmake -B build -G Ninja`\n\n4. **Install**\n\n   ```bash\n   cmake --install build\n   ```\n\n   May require root privileges\n\n5. **Uninstall**\n\n   CMake doesn't generate an uninstall target by default. To remove installed files, run\n   ```\n   cat build/install_manifest.txt | xargs rm -irv\n   ```\n\n6. **Cleanup build directory**\n\n   ```bash\n   cmake --build build -t clean\n   ```\n\n</details>\n\n## Compilation NetBSD\n\n   Requires at least GCC 10.\n\n   Note that GNU make (`gmake`) is required to compile on NetBSD.\n\n<details>\n<summary>\n\n### With gmake\n</summary>\n\n1. **Install dependencies**\n\n   ```bash\n   pkg_add gmake gcc10 coreutils git\n   ```\n\n2. **Clone repository**\n\n   ```bash\n   git clone https://github.com/aristocratos/btop.git\n   cd btop\n   ```\n\n3. **Compile**\n\n   ```bash\n   gmake CXXFLAGS=\"-DNDEBUG\"\n   ```\n\n   Options for make:\n\n   | Flag                            | Description                                                             |\n   |---------------------------------|-------------------------------------------------------------------------|\n   | `VERBOSE=true`                  | To display full compiler/linker commands                                |\n   | `STATIC=true`                   | For static compilation (only libgcc and libstdc++)                      |\n   | `QUIET=true`                    | For less verbose output                                                 |\n   | `STRIP=true`                    | To force stripping of debug symbols (adds `-s` linker flag)             |\n   | `DEBUG=true`                    | Sets OPTFLAGS to `-O0 -g` and enables more verbose debug logging        |\n   | `ARCH=<architecture>`           | To manually set the target architecture                                 |\n   | `FORTIFY_SOURCE=false`          | Disable fortification with `_FORTIFY_SOURCE=3`                          |\n   | `ADDFLAGS=<flags>`              | For appending flags to both compiler and linker                         |\n   | `CXX=<compiler>`                | Manually set which compiler to use                                      |\n\n   Example: `gmake ADDFLAGS=-march=native` might give a performance boost if compiling only for your own system.\n\n4. **Install**\n\n   ```bash\n   sudo gmake install\n   ```\n\n   Append `PREFIX=/target/dir` to set target, default: `/usr/local`\n\n   Notice! Only use \"sudo\" when installing to a NON user owned directory.\n\n5. **(Recommended) Set suid bit to make btop always run as root (or other user)**\n\n   ```bash\n   sudo gmake setuid\n   ```\n\n   No need for `sudo` to see information for non user owned processes and to enable signal sending to any process.\n\n   Run after make install and use same PREFIX if any was used at install.\n\n   Set `SU_USER` and `SU_GROUP` to select user and group, default is `root` and `wheel`\n\n* **Uninstall**\n\n   ```bash\n   sudo gmake uninstall\n   ```\n\n* **Remove any object files from source dir**\n\n   ```bash\n   gmake clean\n   ```\n\n* **Remove all object files, binaries and created directories in source dir**\n\n   ```bash\n   gmake distclean\n   ```\n\n* **Show help**\n\n   ```bash\n   gmake help\n   ```\n\n</details>\n<details>\n<summary>\n\n### With CMake (Community maintained)\n</summary>\n\n1. **Install build dependencies**\n\n   Requires GCC, CMake, Ninja and Git\n\n   ```bash\n   pkg_add cmake ninja-build gcc10 coreutils git\n   ```\n\n2. **Clone the repository**\n\n   ```bash\n   git clone https://github.com/aristocratos/btop.git && cd btop\n   ```\n\n3. **Compile**\n\n   ```bash\n   # Configure\n   cmake -DCMAKE_CXX_COMPILER=\"/usr/pkg/gcc10/bin/g++\" -B build -G Ninja\n   # Build\n   cmake --build build\n   ```\n\n   This will automatically build a release version of btop.\n\n   Some useful options to pass to the configure step:\n\n   | Configure flag                  | Description                                                             |\n   |---------------------------------|-------------------------------------------------------------------------|\n   | `-DBTOP_LTO=<ON\\|OFF>`          | Enables link time optimization (ON by default)                          |\n   | `-DBTOP_USE_MOLD=<ON\\|OFF>`     | Use mold to link btop (OFF by default)                                  |\n   | `-DBTOP_PEDANTIC=<ON\\|OFF>`     | Compile with additional warnings (OFF by default)                       |\n   | `-DBTOP_WERROR=<ON\\|OFF>`       | Compile with warnings as errors (OFF by default)                        |\n   | `-DBTOP_FORTIFY=<ON\\|OFF>`      | Detect buffer overflows with `_FORTIFY_SOURCE=3` (ON by default)        |\n   | `-DCMAKE_INSTALL_PREFIX=<path>` | The installation prefix ('/usr/local' by default)                       |\n\n   To force any other compiler, run `CXX=<compiler> cmake -B build -G Ninja`\n\n4. **Install**\n\n   ```bash\n   cmake --install build\n   ```\n\n   May require root privileges\n\n5. **Uninstall**\n\n   CMake doesn't generate an uninstall target by default. To remove installed files, run\n   ```\n   cat build/install_manifest.txt | xargs rm -irv\n   ```\n\n6. **Cleanup build directory**\n\n   ```bash\n   cmake --build build -t clean\n   ```\n\n</details>\n\n## Compilation OpenBSD\n\n   Requires at least GCC 10.\n\n   Note that GNU make (`gmake`) is required to compile on OpenBSD.\n\n<details>\n<summary>\n\n### With gmake\n</summary>\n\n1. **Install dependencies**\n\n   ```bash\n   pkg_add gmake gcc%11 g++%11 coreutils git lowdown\n   ```\n\n2. **Clone repository**\n\n   ```bash\n   git clone https://github.com/aristocratos/btop.git\n   cd btop\n   ```\n\n3. **Compile**\n\n   ```bash\n   gmake CXX=eg++\n   ```\n\n   Options for make:\n\n   | Flag                            | Description                                                             |\n   |---------------------------------|-------------------------------------------------------------------------|\n   | `VERBOSE=true`                  | To display full compiler/linker commands                                |\n   | `STATIC=true`                   | For static compilation (only libgcc and libstdc++)                      |\n   | `QUIET=true`                    | For less verbose output                                                 |\n   | `STRIP=true`                    | To force stripping of debug symbols (adds `-s` linker flag)             |\n   | `DEBUG=true`                    | Sets OPTFLAGS to `-O0 -g` and enables more verbose debug logging        |\n   | `ARCH=<architecture>`           | To manually set the target architecture                                 |\n   | `FORTIFY_SOURCE=false`          | Disable fortification with `_FORTIFY_SOURCE=3`                          |\n   | `ADDFLAGS=<flags>`              | For appending flags to both compiler and linker                         |\n   | `CXX=<compiler>`                | Manually set which compiler to use                                       |\n\n   Example: `gmake ADDFLAGS=-march=native` might give a performance boost if compiling only for your own system.\n\n4. **Install**\n\n   ```bash\n   sudo gmake install\n   ```\n\n   Append `PREFIX=/target/dir` to set target, default: `/usr/local`\n\n   Notice! Only use \"sudo\" when installing to a NON user owned directory.\n\n5. **(Recommended) Set suid bit to make btop always run as root (or other user)**\n\n   ```bash\n   sudo gmake setuid\n   ```\n\n   No need for `sudo` to see information for non user owned processes and to enable signal sending to any process.\n\n   Run after make install and use same PREFIX if any was used at install.\n\n   Set `SU_USER` and `SU_GROUP` to select user and group, default is `root` and `wheel`\n\n* **Uninstall**\n\n   ```bash\n   sudo gmake uninstall\n   ```\n\n* **Remove any object files from source dir**\n\n   ```bash\n   gmake clean\n   ```\n\n* **Remove all object files, binaries and created directories in source dir**\n\n   ```bash\n   gmake distclean\n   ```\n\n* **Show help**\n\n   ```bash\n   gmake help\n   ```\n\n</details>\n<details>\n<summary>\n\n### With CMake (Community maintained)\n</summary>\n\n1. **Install build dependencies**\n\n   Requires GCC, CMake, Ninja, Lowdown and Git\n\n   _**Note:** LLVM's libc++ shipped with OpenBSD 7.4 is too old and cannot compile btop._\n\n   ```bash\n   pkg_add cmake g++%11 git ninja lowdown\n   ```\n\n2. **Clone the repository**\n\n   ```bash\n   git clone https://github.com/aristocratos/btop.git && cd btop\n   ```\n\n3. **Compile**\n\n   ```bash\n   # Configure\n   CXX=eg++ cmake -B build -G Ninja\n   # Build\n   cmake --build build\n   ```\n\n   This will automatically build a release version of btop.\n\n   Some useful options to pass to the configure step:\n\n   | Configure flag                  | Description                                                             |\n   |---------------------------------|-------------------------------------------------------------------------|\n   | `-DBTOP_LTO=<ON\\|OFF>`          | Enables link time optimization (ON by default)                          |\n   | `-DBTOP_USE_MOLD=<ON\\|OFF>`     | Use mold to link btop (OFF by default)                                  |\n   | `-DBTOP_PEDANTIC=<ON\\|OFF>`     | Compile with additional warnings (OFF by default)                       |\n   | `-DBTOP_WERROR=<ON\\|OFF>`       | Compile with warnings as errors (OFF by default)                        |\n   | `-DBTOP_FORTIFY=<ON\\|OFF>`      | Detect buffer overflows with `_FORTIFY_SOURCE=3` (ON by default)        |\n   | `-DCMAKE_INSTALL_PREFIX=<path>` | The installation prefix ('/usr/local' by default)                       |\n\n   To force any other compiler, run `CXX=<compiler> cmake -B build -G Ninja`\n\n4. **Install**\n\n   ```bash\n   cmake --install build\n   ```\n\n   May require root privileges\n\n5. **Uninstall**\n\n   CMake doesn't generate an uninstall target by default. To remove installed files, run\n   ```\n   cat build/install_manifest.txt | xargs rm -irv\n   ```\n\n6. **Cleanup build directory**\n\n   ```bash\n   cmake --build build -t clean\n   ```\n\n</details>\n\n## Installing the snap\n[![btop](https://snapcraft.io/btop/badge.svg)](https://snapcraft.io/btop)\n\n### Note: there are now two snaps available: `btop` and `btop-desktop`. The desktop version is much larger and includes the desktop entries needed to allow for launching `btop` with a click.\n\n * **Install the snap**\n\n    ```bash\n    sudo snap install btop\n    or\n    sudo snap install btop-desktop\n    ```\n * **Install the latest snap from the edge channel**\n   ```\n   sudo snap install btop --edge\n   or\n   sudo snap install btop-desktop --edge\n   ```\n\n * **Connect the interface**\n\n    ```bash\n\tsudo snap connect btop:removable-media\n\tor\n\tsudo snap connect btop-desktop:removable-media\n\t```\n\n\n## Configurability\n\nAll options changeable from within UI.\nConfig and log files stored in `$XDG_CONFIG_HOME/btop` or `$HOME/.config/btop` folder\n\n#### btop.conf: (auto generated if not found)\n\n```bash\n#? Config file for btop v. 1.2.2\n\n#* Name of a btop++/bpytop/bashtop formatted \".theme\" file, \"Default\" and \"TTY\" for builtin themes.\n#* Themes should be placed in \"../share/btop/themes\" relative to binary or \"$HOME/.config/btop/themes\"\ncolor_theme = \"Default\"\n\n#* If the theme set background should be shown, set to False if you want terminal background transparency.\ntheme_background = True\n\n#* Sets if 24-bit truecolor should be used, will convert 24-bit colors to 256 color (6x6x6 color cube) if false.\ntruecolor = True\n\n#* Set to true to force tty mode regardless if a real tty has been detected or not.\n#* Will force 16-color mode and TTY theme, set all graph symbols to \"tty\" and swap out other non tty friendly symbols.\nforce_tty = False\n\n#* Define presets for the layout of the boxes. Preset 0 is always all boxes shown with default settings. Max 9 presets.\n#* Format: \"box_name:P:G,box_name:P:G\" P=(0 or 1) for alternate positions, G=graph symbol to use for box.\n#* Use whitespace \" \" as separator between different presets.\n#* Example: \"cpu:0:default,mem:0:tty,proc:1:default cpu:0:braille,proc:0:tty\"\npresets = \"cpu:1:default,proc:0:default cpu:0:default,mem:0:default,net:0:default cpu:0:block,net:0:tty\"\n\n#* Set to True to enable \"h,j,k,l,g,G\" keys for directional control in lists.\n#* Conflicting keys for h:\"help\" and k:\"kill\" is accessible while holding shift.\nvim_keys = False\n\n#* Rounded corners on boxes, is ignored if TTY mode is ON.\nrounded_corners = True\n\n#* Default symbols to use for graph creation, \"braille\", \"block\" or \"tty\".\n#* \"braille\" offers the highest resolution but might not be included in all fonts.\n#* \"block\" has half the resolution of braille but uses more common characters.\n#* \"tty\" uses only 3 different symbols but will work with most fonts and should work in a real TTY.\n#* Note that \"tty\" only has half the horizontal resolution of the other two, so will show a shorter historical view.\ngraph_symbol = \"braille\"\n\n# Graph symbol to use for graphs in cpu box, \"default\", \"braille\", \"block\" or \"tty\".\ngraph_symbol_cpu = \"default\"\n\n# Graph symbol to use for graphs in cpu box, \"default\", \"braille\", \"block\" or \"tty\".\ngraph_symbol_mem = \"default\"\n\n# Graph symbol to use for graphs in cpu box, \"default\", \"braille\", \"block\" or \"tty\".\ngraph_symbol_net = \"default\"\n\n# Graph symbol to use for graphs in cpu box, \"default\", \"braille\", \"block\" or \"tty\".\ngraph_symbol_proc = \"default\"\n\n#* Manually set which boxes to show. Available values are \"cpu mem net proc\" and \"gpu0\" through \"gpu5\", separate values with whitespace.\nshown_boxes = \"proc cpu mem net\"\n\n#* Update time in milliseconds, recommended 2000 ms or above for better sample times for graphs.\nupdate_ms = 1500\n\n#* Processes sorting, \"pid\" \"program\" \"arguments\" \"threads\" \"user\" \"memory\" \"cpu lazy\" \"cpu responsive\",\n#* \"cpu lazy\" sorts top process over time (easier to follow), \"cpu responsive\" updates top process directly.\nproc_sorting = \"cpu lazy\"\n\n#* Reverse sorting order, True or False.\nproc_reversed = False\n\n#* Show processes as a tree.\nproc_tree = False\n\n#* Use the cpu graph colors in the process list.\nproc_colors = True\n\n#* Use a darkening gradient in the process list.\nproc_gradient = True\n\n#* If process cpu usage should be of the core it's running on or usage of the total available cpu power.\nproc_per_core = True\n\n#* Show process memory as bytes instead of percent.\nproc_mem_bytes = True\n\n#* Use /proc/[pid]/smaps for memory information in the process info box (very slow but more accurate)\nproc_info_smaps = False\n\n#* Show proc box on left side of screen instead of right.\nproc_left = False\n\n#* Sets the CPU stat shown in upper half of the CPU graph, \"total\" is always available.\n#* Select from a list of detected attributes from the options menu.\ncpu_graph_upper = \"total\"\n\n#* Sets the CPU stat shown in lower half of the CPU graph, \"total\" is always available.\n#* Select from a list of detected attributes from the options menu.\ncpu_graph_lower = \"total\"\n\n#* Toggles if the lower CPU graph should be inverted.\ncpu_invert_lower = True\n\n#* Set to True to completely disable the lower CPU graph.\ncpu_single_graph = False\n\n#* Show cpu box at bottom of screen instead of top.\ncpu_bottom = False\n\n#* Shows the system uptime in the CPU box.\nshow_uptime = True\n\n#* Show cpu temperature.\ncheck_temp = True\n\n#* Which sensor to use for cpu temperature, use options menu to select from list of available sensors.\ncpu_sensor = \"Auto\"\n\n#* Show temperatures for cpu cores also if check_temp is True and sensors has been found.\nshow_coretemp = True\n\n#* Set a custom mapping between core and coretemp, can be needed on certain cpus to get correct temperature for correct core.\n#* Use lm-sensors or similar to see which cores are reporting temperatures on your machine.\n#* Format \"x:y\" x=core with wrong temp, y=core with correct temp, use space as separator between multiple entries.\n#* Example: \"4:0 5:1 6:3\"\ncpu_core_map = \"\"\n\n#* Which temperature scale to use, available values: \"celsius\", \"fahrenheit\", \"kelvin\" and \"rankine\".\ntemp_scale = \"celsius\"\n\n#* Use base 10 for bits/bytes sizes, KB = 1000 instead of KiB = 1024.\nbase_10_sizes = False\n\n#* Show CPU frequency.\nshow_cpu_freq = True\n\n#* Draw a clock at top of screen, formatting according to strftime, empty string to disable.\n#* Special formatting: /host = hostname | /user = username | /uptime = system uptime\nclock_format = \"%H:%M\"\n\n#* Update main ui in background when menus are showing, set this to false if the menus is flickering too much for comfort.\nbackground_update = True\n\n#* Custom cpu model name, empty string to disable.\ncustom_cpu_name = \"\"\n\n#* Optional filter for shown disks, should be full path of a mountpoint, separate multiple values with whitespace \" \".\n#* Begin line with \"exclude=\" to change to exclude filter, otherwise defaults to \"most include\" filter. Example: disks_filter=\"exclude=/boot /home/user\".\ndisks_filter = \"exclude=/boot\"\n\n#* Show graphs instead of meters for memory values.\nmem_graphs = True\n\n#* Show mem box below net box instead of above.\nmem_below_net = False\n\n#* Count ZFS ARC in cached and available memory.\nzfs_arc_cached = True\n\n#* If swap memory should be shown in memory box.\nshow_swap = True\n\n#* Show swap as a disk, ignores show_swap value above, inserts itself after first disk.\nswap_disk = True\n\n#* If mem box should be split to also show disks info.\nshow_disks = True\n\n#* Filter out non physical disks. Set this to False to include network disks, RAM disks and similar.\nonly_physical = True\n\n#* Read disks list from /etc/fstab. This also disables only_physical.\nuse_fstab = False\n\n#* Set to true to show available disk space for privileged users.\ndisk_free_priv = False\n\n#* Toggles if io activity % (disk busy time) should be shown in regular disk usage view.\nshow_io_stat = True\n\n#* Toggles io mode for disks, showing big graphs for disk read/write speeds.\nio_mode = False\n\n#* Set to True to show combined read/write io graphs in io mode.\nio_graph_combined = False\n\n#* Set the top speed for the io graphs in MiB/s (100 by default), use format \"mountpoint:speed\" separate disks with whitespace \" \".\n#* Example: \"/mnt/media:100 /:20 /boot:1\".\nio_graph_speeds = \"\"\n\n#* Set fixed values for network graphs in Mebibits. Is only used if net_auto is also set to False.\nnet_download = 100\n\nnet_upload = 100\n\n#* Use network graphs auto rescaling mode, ignores any values set above and rescales down to 10 Kibibytes at the lowest.\nnet_auto = True\n\n#* Sync the auto scaling for download and upload to whichever currently has the highest scale.\nnet_sync = False\n\n#* Starts with the Network Interface specified here.\nnet_iface = \"br0\"\n\n#* Show battery stats in top right if battery is present.\nshow_battery = True\n\n#* Which battery to use if multiple are present. \"Auto\" for auto detection.\nselected_battery = \"Auto\"\n\n#* Set loglevel for \"~/.config/btop/btop.log\" levels are: \"ERROR\" \"WARNING\" \"INFO\" \"DEBUG\".\n#* The level set includes all lower levels, i.e. \"DEBUG\" will show all logging info.\nlog_level = \"DEBUG\"\n```\n\n#### Command line options\n\n```text\nusage: btop [-h] [-v] [-/+t] [-p <id>] [--utf-force] [--debug]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         show version info and exit\n  -lc, --low-color      disable truecolor, converts 24-bit colors to 256-color\n  -t, --tty_on          force (ON) tty mode, max 16 colors and tty friendly graph symbols\n  +t, --tty_off         force (OFF) tty mode\n  -p, --preset <id>     start with preset, integer value between 0-9\n  --utf-force           force start even if no UTF-8 locale was detected\n  --debug               start in DEBUG mode: shows microsecond timer for information collect\n                        and screen draw functions and sets loglevel to DEBUG\n```\n\n## LICENSE\n\n[Apache License 2.0](LICENSE)\n"
        },
        {
          "name": "btop.desktop",
          "type": "blob",
          "size": 0.41796875,
          "content": "[Desktop Entry]\nType=Application\nVersion=1.0\nName=btop++\nGenericName=System Monitor\nGenericName[it]=Monitor di sistema\nComment=Resource monitor that shows usage and stats for processor, memory, disks, network and processes\nComment[it]=Monitoraggio delle risorse: mostra utilizzo e statistiche per CPU, dischi, rete e processi\nIcon=btop\nExec=btop\nTerminal=true\nCategories=System;Monitor;ConsoleOnly;\nKeywords=system;process;task\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "manpage.md",
          "type": "blob",
          "size": 1.4111328125,
          "content": "% btop(1) | User Commands\n%\n% \"January  4 2024\"\n\n# NAME\n\nbtop - Resource monitor that shows usage and stats for processor, memory, disks, network, and processes.\n\n# SYNOPSIS\n\n**btop** [**-lc**] [**-t** | **+t**] [**-p** _id_] [**\\-\\-utf-force**]\n         [**\\-\\-debug**] [{**-h** | **\\-\\-help**} | {**-v** | **\\-\\-version**}]\n\n# DESCRIPTION\n\n**btop** is a program that shows usage and stats for processor, memory, disks, network, and processes.\n\n# OPTIONS\n\nThe program follows the usual GNU command line syntax, with long options\nstarting with two dashes ('-'). A summary of options is included below.\n\n**-lc**, **\\-\\-low-color**\n:   Disable truecolor, converts 24-bit colors to 256-color.\n\n**-t**, **\\-\\-tty_on**\n:   Force (ON) tty mode, max 16 colors and tty-friendly graph symbols.\n\n**+t**, **\\-\\-tty_off**\n:   Force (OFF) tty mode.\n\n**-p**, **\\-\\-preset _id_**\n:   Start with preset, integer value between 0-9.\n\n**\\-\\-utf-force**\n:   Force start even if no UTF-8 locale was detected.\n\n**\\-\\-debug**\n:   Start in DEBUG mode: shows microsecond timer for information collect and screen draw functions and sets loglevel to DEBUG.\n\n**-h**, **\\-\\-help**\n:   Show summary of options.\n\n**-v**, **\\-\\-version**\n:   Show version of program.\n\n# BUGS\n\nThe upstream bug tracker can be found at https://github.com/aristocratos/btop/issues.\n\n# SEE ALSO\n\n**top**(1), **htop**(1)\n\n# AUTHOR\n\n**btop** was written by Jakob P. Liljenberg a.k.a. \"Aristocratos\".\n"
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "themes",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}