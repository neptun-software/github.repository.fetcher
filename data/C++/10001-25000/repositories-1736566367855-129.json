{
  "metadata": {
    "timestamp": 1736566367855,
    "page": 129,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/or-tools",
      "stars": 11474,
      "defaultBranch": "stable",
      "files": [
        {
          "name": ".allstar",
          "type": "tree",
          "content": null
        },
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.1240234375,
          "content": "build\nbuild_make\ninstall_make\nbuild_cross\ndependencies/install\ndependencies/sources\ntemp_cpp\ntemp_dotnet\ntemp_java\ntemp_python\n"
        },
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 2.2509765625,
          "content": "common --noenable_bzlmod\n\n# ----CONFIG OPTIONS----\nbuild --flag_alias=with_bop=//ortools/linear_solver:with_bop\nbuild --flag_alias=with_cbc=//ortools/linear_solver:with_cbc\nbuild --flag_alias=with_clp=//ortools/linear_solver:with_clp\nbuild --flag_alias=with_cp_sat=//ortools/linear_solver:with_cp_sat\nbuild --flag_alias=with_glop=//ortools/linear_solver:with_glop\nbuild --flag_alias=with_glpk=//ortools/linear_solver:with_glpk\nbuild --flag_alias=with_highs=//ortools/linear_solver:with_highs\nbuild --flag_alias=with_pdlp=//ortools/linear_solver:with_pdlp\nbuild --flag_alias=with_scip=//ortools/linear_solver:with_scip\n\nbuild --flag_alias=with_cplex=//ortools/linear_solver:with_cplex\nbuild --flag_alias=with_xpress=//ortools/linear_solver:with_xpress\n\n# Sets the default Apple platform to macOS.\nbuild --apple_platform_type=macos\n\n# By default, build OR-Tools in C++ 17 mode, with various extra flags per\n# platform.\nbuild --enable_platform_specific_config\n\nbuild:linux --cxxopt=\"-std=c++17\" --cxxopt=-Wno-sign-compare --host_cxxopt=\"-std=c++17\" --host_cxxopt=-Wno-sign-compare\nbuild:macos --cxxopt=\"-std=c++17\"  --cxxopt=-Wno-sign-compare --cxxopt=-mmacos-version-min=10.15  --cxxopt=-Wno-dangling-field --features=-supports_dynamic_linker\nbuild:macos --host_cxxopt=\"-std=c++17\" --host_cxxopt=-Wno-sign-compare --host_cxxopt=-mmacos-version-min=10.15 --host_cxxopt=-Wno-dangling-field\nbuild:windows --cxxopt=\"/std:c++20\" --host_cxxopt=\"/std:c++20\"\n\n# Enable the runfiles symlink tree on Windows. This makes it possible to build\n# the pip package on Windows without an intermediate data-file archive, as the\n# build_pip_package script in its current form (as of Aug 2023) uses the\n# runfiles symlink tree to decide what to put into the Python wheel.\nstartup --windows_enable_symlinks\nbuild:windows --enable_runfiles\n\n# Print command lines for build commands.\n# build --subcommands=pretty_print\n\n# Print test logs for failed tests.\ntest --test_output=errors --test_timeout_filters=-eternal\n\n# Put user-specific options in .bazelrc.user\ntry-import %workspace%/.bazelrc.user\n\n# asan\nbuild:asan --strip=never\nbuild:asan --copt -fsanitize=address\nbuild:asan --copt -DADDRESS_SANITIZER\nbuild:asan --copt -O1\nbuild:asan --copt -g\nbuild:asan --copt -fno-omit-frame-pointer\nbuild:asan --linkopt -fsanitize=address\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.3154296875,
          "content": "---\nLanguage:        Cpp\nBasedOnStyle:  Google\n# Force pointer to align on the type for C++\nDerivePointerAlignment: false\nPointerAlignment: Left\n---\nLanguage:        Java\nBasedOnStyle:  Google\n---\nLanguage:      CSharp\nBasedOnStyle:  Microsoft\nNamespaceIndentation: None\n---\nLanguage:       Proto\nBasedOnStyle:  Google\n...\n"
        },
        {
          "name": ".cmake-format.py",
          "type": "blob",
          "size": 8.3076171875,
          "content": "# Copyright 2010-2024 Google LLC\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# ----------------------------------\n# Options affecting listfile parsing\n# ----------------------------------\nwith section(\"parse\"):\n\n  # Specify structure for custom cmake functions\n  additional_commands = {\n             'foo': { 'flags': ['BAR', 'BAZ'],\n                     'kwargs': {'DEPENDS': '*',\n                                'HEADERS': '*',\n                                'SOURCES': '*'}},\n             'build_git_dependency': { 'flags': [],\n                     'kwargs': { 'NAME': '*',\n                                 'REPOSITORY': '*',\n                                 'TAG': '*',\n                                 'APPLY_PATCH': '*',\n                                 'CMAKE_ARGS': '*'}}\n             }\n\n  # Specify variable tags.\n  vartags = []\n\n  # Specify property tags.\n  proptags = []\n\n# -----------------------------\n# Options affecting formatting.\n# -----------------------------\nwith section(\"format\"):\n\n  # How wide to allow formatted cmake files\n  line_width = 80\n\n  # How many spaces to tab for indent\n  tab_size = 2\n\n  # If an argument group contains more than this many sub-groups (parg or kwarg\n  # groups) then force it to a vertical layout.\n  max_subgroups_hwrap = 2\n\n  # If a positional argument group contains more than this many arguments, then\n  # force it to a vertical layout.\n  max_pargs_hwrap = 6\n\n  # If a cmdline positional group consumes more than this many lines without\n  # nesting, then invalidate the layout (and nest)\n  max_rows_cmdline = 2\n\n  # If true, separate flow control names from their parentheses with a space\n  separate_ctrl_name_with_space = False\n\n  # If true, separate function names from parentheses with a space\n  separate_fn_name_with_space = False\n\n  # If a statement is wrapped to more than one line, than dangle the closing\n  # parenthesis on its own line.\n  dangle_parens = False\n\n  # If the trailing parenthesis must be 'dangled' on its on line, then align it\n  # to this reference: `prefix`: the start of the statement,  `prefix-indent`:\n  # the start of the statement, plus one indentation  level, `child`: align to\n  # the column of the arguments\n  dangle_align = 'prefix'\n\n  # If the statement spelling length (including space and parenthesis) is\n  # smaller than this amount, then force reject nested layouts.\n  min_prefix_chars = 4\n\n  # If the statement spelling length (including space and parenthesis) is larger\n  # than the tab width by more than this amount, then force reject un-nested\n  # layouts.\n  max_prefix_chars = 10\n\n  # If a candidate layout is wrapped horizontally but it exceeds this many\n  # lines, then reject the layout.\n  max_lines_hwrap = 2\n\n  # What style line endings to use in the output.\n  line_ending = 'unix'\n\n  # Format command names consistently as 'lower' or 'upper' case\n  command_case = 'canonical'\n\n  # Format keywords consistently as 'lower' or 'upper' case\n  keyword_case = 'unchanged'\n\n  # A list of command names which should always be wrapped\n  always_wrap = []\n\n  # If true, the argument lists which are known to be sortable will be sorted\n  # lexicographicall\n  enable_sort = True\n\n  # If true, the parsers may infer whether or not an argument list is sortable\n  # (without annotation).\n  autosort = False\n\n  # By default, if cmake-format cannot successfully fit everything into the\n  # desired linewidth it will apply the last, most aggressive attempt that it\n  # made. If this flag is True, however, cmake-format will print error, exit\n  # with non-zero status code, and write-out nothing\n  require_valid_layout = False\n\n  # A dictionary mapping layout nodes to a list of wrap decisions. See the\n  # documentation for more information.\n  layout_passes = {}\n\n# ------------------------------------------------\n# Options affecting comment reflow and formatting.\n# ------------------------------------------------\nwith section(\"markup\"):\n\n  # What character to use for bulleted lists\n  bullet_char = '*'\n\n  # What character to use as punctuation after numerals in an enumerated list\n  enum_char = '.'\n\n  # If comment markup is enabled, don't reflow the first comment block in each\n  # listfile. Use this to preserve formatting of your copyright/license\n  # statements.\n  first_comment_is_literal = False\n\n  # If comment markup is enabled, don't reflow any comment block which matches\n  # this (regex) pattern. Default is `None` (disabled).\n  literal_comment_pattern = None\n\n  # Regular expression to match preformat fences in comments default=\n  # ``r'^\\s*([`~]{3}[`~]*)(.*)$'``\n  fence_pattern = '^\\\\s*([`~]{3}[`~]*)(.*)$'\n\n  # Regular expression to match rulers in comments default=\n  # ``r'^\\s*[^\\w\\s]{3}.*[^\\w\\s]{3}$'``\n  ruler_pattern = '^\\\\s*[^\\\\w\\\\s]{3}.*[^\\\\w\\\\s]{3}$'\n\n  # If a comment line matches starts with this pattern then it is explicitly a\n  # trailing comment for the preceeding argument. Default is '#<'\n  explicit_trailing_pattern = '#<'\n\n  # If a comment line starts with at least this many consecutive hash\n  # characters, then don't lstrip() them off. This allows for lazy hash rulers\n  # where the first hash char is not separated by space\n  hashruler_min_length = 10\n\n  # If true, then insert a space between the first hash char and remaining hash\n  # chars in a hash ruler, and normalize its length to fill the column\n  canonicalize_hashrulers = True\n\n  # enable comment markup parsing and reflow\n  enable_markup = True\n\n# ----------------------------\n# Options affecting the linter\n# ----------------------------\nwith section(\"lint\"):\n\n  # a list of lint codes to disable\n  disabled_codes = []\n\n  # regular expression pattern describing valid function names\n  function_pattern = '[0-9a-z_]+'\n\n  # regular expression pattern describing valid macro names\n  macro_pattern = '[0-9A-Z_]+'\n\n  # regular expression pattern describing valid names for variables with global\n  # (cache) scope\n  global_var_pattern = '[A-Z][0-9A-Z_]+'\n\n  # regular expression pattern describing valid names for variables with global\n  # scope (but internal semantic)\n  internal_var_pattern = '_[A-Z][0-9A-Z_]+'\n\n  # regular expression pattern describing valid names for variables with local\n  # scope\n  local_var_pattern = '[a-z][a-z0-9_]+'\n\n  # regular expression pattern describing valid names for privatedirectory\n  # variables\n  private_var_pattern = '_[0-9a-z_]+'\n\n  # regular expression pattern describing valid names for public directory\n  # variables\n  public_var_pattern = '[A-Z][0-9A-Z_]+'\n\n  # regular expression pattern describing valid names for function/macro\n  # arguments and loop variables.\n  argument_var_pattern = '[a-z][a-z0-9_]+'\n\n  # regular expression pattern describing valid names for keywords used in\n  # functions or macros\n  keyword_pattern = '[A-Z][0-9A-Z_]+'\n\n  # In the heuristic for C0201, how many conditionals to match within a loop in\n  # before considering the loop a parser.\n  max_conditionals_custom_parser = 2\n\n  # Require at least this many newlines between statements\n  min_statement_spacing = 1\n\n  # Require no more than this many newlines between statements\n  max_statement_spacing = 2\n  max_returns = 6\n  max_branches = 12\n  max_arguments = 5\n  max_localvars = 15\n  max_statements = 50\n\n# -------------------------------\n# Options affecting file encoding\n# -------------------------------\nwith section(\"encode\"):\n\n  # If true, emit the unicode byte-order mark (BOM) at the start of the file\n  emit_byteorder_mark = False\n\n  # Specify the encoding of the input file. Defaults to utf-8\n  input_encoding = 'utf-8'\n\n  # Specify the encoding of the output file. Defaults to utf-8. Note that cmake\n  # only claims to support utf-8 so be careful when using anything else\n  output_encoding = 'utf-8'\n\n# -------------------------------------\n# Miscellaneous configurations options.\n# -------------------------------------\nwith section(\"misc\"):\n\n  # A dictionary containing any per-command configuration overrides. Currently\n  # only `command_case` is supported.\n  per_command = {}\n\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.712890625,
          "content": "# Project Files unneeded by docker\n.dockerignore\n\n.git\n.gitignore\n.travis.yml\n.travis\n.appveyor.yml\n.github\n\n.clang-format\n\n# Bazel\nbazel/docs\nbazel/README.md\nbazel/cache\nbazel/docker\nbazel/Makefile\n\n# CMake\ncmake/docs\ncmake/README.md\ncmake/cache\ncmake/docker\ncmake/Makefile\n\n# Makefile\nmakefiles/docs\nmakefiles/README.md\nmakefiles/cache\nmakefiles/docker\nmakefiles/Makefile\nMakefile.local\n\nbinder\ndocs\ntools/docker\ntools/release\ntools/win\nDependencies.txt\nREADME.md\nCONTRIBUTING.md\n#LICENSE-2.0.txt\n\n# Native CMake/Make build\ndependencies/sources\ndependencies/install\nortools/gen\nbazel-*\nbin\nclasses\nlib\nobjs\npackages\nbuild/\nbuild_cmake/\nbuild_cross/\nbuild_make/\ninstall_make/\ntemp_*/\n\n# Editor directories and files\n*.user\n*.swp\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3154296875,
          "content": "Makefile.local\nMakefile.local~\n\n/build_make/\n/install_make/\n/dependencies/\n/or-tools_*\n/or-tools_cpp*\n/or-tools_dotnet*\n/or-tools_java*\n/or-tools_python*\n/or-tools_data*\n\nor-tools*.tar.gz\nor-tools*.zip\n*.snk\n*.a\n*.o\n*.so\n*.py[co]\n*.lib\n*.exp\n*.pdb\n*.pbtxt\n*.ass\n*.swp\n*.swo\n\nbuild*.log\ntest.log\npublish*.log\nortools/gen/\nobjs/\ncmake/protobuf-*.cmake\nclasses/\npackages/\ntemp_test/\ntemp_fz/\ntemp_fz_test/\ntemp_cpp/\ntemp_cpp_test/\ntemp_dotnet/\ntemp_dotnet_test/\ntemp_java/\ntemp_java_test/\ntemp_python*\ntemp_python*_test/\ntemp_archive/\ntemp_fz_archive/\nlib/\nbin/\ninstall/\nexamples/notebook/.ipynb_checkpoints\n\n# Release stuff\nor-tools.snk\nprivate-key.gpg\nsettings.xml\nexport\n\nortools/bazel-*\nexamples/bazel-*\nbazel-*\n\n.vagrant/\n\ntools/docker/export\n\n# IDE stuff\nCMakeLists.txt.user\n*.userprefs\n.idea/*\n.idea/\ncache/\n.cache/\n**/.vscode/*\n.DS_Store\n**/.vs/*\n\nortools/linear_solver/lpi_glop.cc\n\n# .Net code gen\nortools/dotnet/*.props\nortools/dotnet/*.png\nortools/dotnet/*/*.csproj\nortools/dotnet/*/*.fsproj\nortools/dotnet/*/runtime.json\nortools/dotnet/*/bin\nortools/dotnet/*/obj\nortools/**/samples/bin\nortools/**/samples/obj\nexamples/tests/bin\nexamples/tests/obj\nexamples/contrib/bin\nexamples/contrib/obj\nexamples/dotnet/bin\nexamples/dotnet/obj\n\n# cmake code gen (assumes -Bbuild)\n.cmake/\nCMakeCache.txt\nCMakeFiles\nDartConfiguration.tcl\n*build*/*\nbuild/\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 13.42578125,
          "content": "[MASTER]\n\n# Specify a configuration file.\n#rcfile=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Add files or directories to the denylist. They should be base names, not\n# paths.\nignore=CVS\n\n# Add files or directories matching the regex patterns to the denylist. The\n# regex matches against base names, not paths.\nignore-patterns=\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Use multiple processes to speed up Pylint.\njobs=1\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code\nextension-pkg-whitelist=\n\n# Allow optimization of some AST trees. This will activate a peephole AST\n# optimizer, which will apply various small optimizations. For instance, it can\n# be used to obtain the result of joining multiple strings with the addition\n# operator. Joining a lot of strings can lead to a maximum recursion error in\n# Pylint and this flag can prevent that. It has one side effect, the resulting\n# AST will be different than the one from reality. This option is deprecated\n# and it will be removed in Pylint 2.0.\noptimize-ast=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\nconfidence=\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\n#enable=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once).You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use\"--disable=all --enable=classes\n# --disable=W\"\ndisable=raising-string,xrange-builtin,execfile-builtin,parameter-unpacking,import-star-module-level,no-absolute-import,long-suffix,useless-suppression,oct-method,nonzero-method,raw_input-builtin,round-builtin,delslice-method,getslice-method,dict-iter-method,range-builtin-not-iterating,buffer-builtin,intern-builtin,map-builtin-not-iterating,reload-builtin,hex-method,old-division,backtick,setslice-method,dict-view-method,apply-builtin,unichr-builtin,coerce-method,using-cmp-argument,long-builtin,old-octal-literal,filter-builtin-not-iterating,old-ne-operator,cmp-method,suppressed-message,coerce-builtin,input-builtin,next-method-called,file-builtin,print-statement,unpacking-in-except,unicode-builtin,reduce-builtin,standarderror-builtin,basestring-builtin,cmp-builtin,indexing-exception,zip-builtin-not-iterating,old-raise-syntax,metaclass-assignment\n\n\n[REPORTS]\n\n# Set the output format. Available formats are text, parseable, colorized, msvs\n# (visual studio) and html. You can also give a reporter class, eg\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Put messages in a separate file for each module / package specified on the\n# command line instead of printing them on stdout. Reports (if any) will be\n# written in a file name \"pylint_global.[txt|html]\". This option is deprecated\n# and it will be removed in Pylint 2.0.\nfiles-output=no\n\n# Tells whether to display a full report or only the messages\nreports=yes\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details\n#msg-template=\n\n\n[BASIC]\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=i,j,k,x,y,z,t,ex,Run,_\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=foo,bar,baz,toto,tutu,tata\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Include a hint for the correct naming format with invalid-name\ninclude-naming-hint=no\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\nproperty-classes=abc.abstractproperty\n\n# Regular expression matching correct argument names\nargument-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for argument names\nargument-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct module names\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Naming hint for module names\nmodule-name-hint=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Regular expression matching correct variable names\nvariable-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for variable names\nvariable-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct class names\nclass-rgx=[A-Z_][a-zA-Z0-9]+$\n\n# Naming hint for class names\nclass-name-hint=[A-Z_][a-zA-Z0-9]+$\n\n# Regular expression matching correct function names\nfunction-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for function names\nfunction-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct constant names\nconst-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Naming hint for constant names\nconst-name-hint=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Regular expression matching correct method names\nmethod-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for method names\nmethod-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct inline iteration names\ninlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\n\n# Naming hint for inline iteration names\ninlinevar-name-hint=[A-Za-z_][A-Za-z0-9_]*$\n\n# Regular expression matching correct attribute names\nattr-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for attribute names\nattr-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct class attribute names\nclass-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n\n# Naming hint for class attribute names\nclass-attribute-name-hint=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n\n[ELIF]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=100\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n# List of optional constructs for which whitespace checking is disabled. `dict-\n# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\\n222: 2}.\n# `trailing-comma` allows a space between comma and closing bracket: (a, ).\n# `empty-line` allows space-only lines.\nno-space-check=trailing-comma,dict-separator\n\n# Maximum number of lines in a module\nmax-module-lines=1000\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Number of spaces of indent required inside a hanging  or continued line.\nindent-after-paren=4\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,XXX,TODO\n\n\n[VARIABLES]\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# A regular expression matching the name of dummy variables (i.e. expectedly\n# not used).\ndummy-variables-rgx=(_+[a-zA-Z0-9]*?$)|dummy\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,_cb\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six.moves,future.builtins\n\n\n[LOGGING]\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format\nlogging-modules=logging\n\n\n[SPELLING]\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package.\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[TYPECHECK]\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis. It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager\n\n\n[SIMILARITIES]\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n\n[IMPORTS]\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=optparse\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,__new__,setUp\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,_fields,_replace,_source,_make\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method\nmax-args=5\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore\nignored-argument-names=_.*\n\n# Maximum number of locals for function / method body\nmax-locals=15\n\n# Maximum number of return / yield for function / method body\nmax-returns=6\n\n# Maximum number of branch for function / method body\nmax-branches=12\n\n# Maximum number of statements in function / method body\nmax-statements=50\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of boolean expressions in a if statement\nmax-bool-expr=5\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"Exception\"\novergeneral-exceptions=Exception\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 17.1630859375,
          "content": "# Copyright 2010-2024 Google LLC\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This file is just an orchestration\ncmake_minimum_required(VERSION 3.20)\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\n\ninclude(utils)\nset_version(VERSION)\n\nproject(ortools VERSION ${VERSION} LANGUAGES CXX C)\nset(PROJECT_NAMESPACE ortools)\nmessage(STATUS \"${PROJECT_NAME} version: ${PROJECT_VERSION}\")\n#message(STATUS \"major: ${PROJECT_VERSION_MAJOR}\")\n#message(STATUS \"minor: ${PROJECT_VERSION_MINOR}\")\n#message(STATUS \"patch: ${PROJECT_VERSION_PATCH}\")\n\nif(MSVC)\n  set(CMAKE_CXX_STANDARD 20)\nelse()\n  set(CMAKE_CXX_STANDARD 17)\nendif()\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# Set max os target version.\nset(CMAKE_OSX_DEPLOYMENT_TARGET 10.15)\n\n# Default Build Type to be Release\nget_property(isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(isMultiConfig)\n  if(NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_CONFIGURATION_TYPES \"Release;Debug\" CACHE STRING\n    \"Choose the type of builds, options are: Debug Release RelWithDebInfo MinSizeRel. (default: Release;Debug)\"\n    FORCE)\n  endif()\n  message(STATUS \"Configuration types: ${CMAKE_CONFIGURATION_TYPES}\")\nelse()\n  if(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING\n    \"Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel. (default: Release)\"\n    FORCE)\n  endif()\n  message(STATUS \"Build type: ${CMAKE_BUILD_TYPE}\")\nendif()\n\n# Layout build dir like install dir\ninclude(GNUInstallDirs)\nif(UNIX)\n  option(BUILD_SHARED_LIBS \"Build shared libraries (.so or .dylib).\" ON)\n  set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)\n  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\n  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})\n  # for multi-config build system (e.g. Xcode, Ninja Multi-Config)\n  foreach(OUTPUTCONFIG IN LISTS CMAKE_CONFIGURATION_TYPES)\n    string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)\n    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG}/${CMAKE_INSTALL_LIBDIR})\n    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG}/${CMAKE_INSTALL_LIBDIR})\n    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG}/${CMAKE_INSTALL_BINDIR})\n  endforeach()\nelse()\n  # Currently Only support static build for windows\n  option(BUILD_SHARED_LIBS \"Build shared libraries (.dll).\" OFF)\n  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})\n  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})\n  # for multi-config builds (e.g. msvc)\n  foreach(OUTPUTCONFIG IN LISTS CMAKE_CONFIGURATION_TYPES)\n    string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)\n    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG}/${CMAKE_INSTALL_BINDIR})\n    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG}/${CMAKE_INSTALL_BINDIR})\n    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG}/${CMAKE_INSTALL_BINDIR})\n  endforeach()\nendif()\n\nif(MSVC AND BUILD_SHARED_LIBS)\n  set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\nendif()\n\n# Disable CTest targets\nset_property(GLOBAL PROPERTY CTEST_TARGETS_ADDED 1)\ninclude(CTest)\n\n# By default only build the C++ library which agregate all components.\noption(BUILD_CXX \"Build C++ library\" ON)\nmessage(STATUS \"Build C++ library: ${BUILD_CXX}\")\n\n# If we don't build ortools we could build the GLOP standalone project\nif(NOT BUILD_CXX)\n  OPTION(BUILD_GLOP \"Build GLOP standalone\" ON)\n  message(STATUS \"Build standalone Glop: ${BUILD_GLOP}\")\nendif()\n\noption(BUILD_PYTHON \"Build Python Library\" OFF)\nmessage(STATUS \"Build Python: ${BUILD_PYTHON}\")\noption(BUILD_JAVA \"Build Java Library\" OFF)\nmessage(STATUS \"Build Java: ${BUILD_JAVA}\")\noption(BUILD_DOTNET \"Build .NET Library\" OFF)\nmessage(STATUS \"Build .Net: ${BUILD_DOTNET}\")\n\n# If wrapper are built, we need to have the install rpath in BINARY_DIR to package\nif(BUILD_PYTHON OR BUILD_JAVA OR BUILD_DOTNET)\n  set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)\nendif()\n\ninclude(CMakeDependentOption)\n\n# Optional components (enabled by default)\n## Flatzinc\nCMAKE_DEPENDENT_OPTION(BUILD_FLATZINC \"Build flatzinc\" ON \"BUILD_CXX\" OFF)\nmessage(STATUS \"Build Flatzinc: ${BUILD_FLATZINC}\")\n\n## LP Parser\nCMAKE_DEPENDENT_OPTION(BUILD_LP_PARSER \"Build lp_parser\" ON \"BUILD_CXX\" OFF)\nmessage(STATUS \"Build LP Parser: ${BUILD_LP_PARSER}\")\n\n## MathOpt\nCMAKE_DEPENDENT_OPTION(BUILD_MATH_OPT \"Build the MATH_OPT\" ON \"BUILD_CXX\" OFF)\nmessage(STATUS \"Build MathOpt: ${BUILD_MATH_OPT}\")\n\n## Samples\noption(BUILD_SAMPLES \"Build samples\" ON)\nmessage(STATUS \"Build samples: ${BUILD_SAMPLES}\")\nCMAKE_DEPENDENT_OPTION(BUILD_CXX_SAMPLES \"Build cxx samples\" ON \"BUILD_SAMPLES;BUILD_CXX\" OFF)\nmessage(STATUS \"Build C++ samples: ${BUILD_CXX_SAMPLES}\")\nCMAKE_DEPENDENT_OPTION(BUILD_PYTHON_SAMPLES \"Build python samples\" ON \"BUILD_SAMPLES;BUILD_PYTHON\" OFF)\nmessage(STATUS \"Build Python samples: ${BUILD_PYTHON_SAMPLES}\")\nCMAKE_DEPENDENT_OPTION(BUILD_JAVA_SAMPLES \"Build java samples\" ON \"BUILD_SAMPLES;BUILD_JAVA\" OFF)\nmessage(STATUS \"Build Java samples: ${BUILD_JAVA_SAMPLES}\")\nCMAKE_DEPENDENT_OPTION(BUILD_DOTNET_SAMPLES \"Build dotnet samples\" ON \"BUILD_SAMPLES;BUILD_DOTNET\" OFF)\nmessage(STATUS \"Build .Net samples: ${BUILD_DOTNET_SAMPLES}\")\n\n## Examples\noption(BUILD_EXAMPLES \"Build examples\" ON)\nmessage(STATUS \"Build examples: ${BUILD_EXAMPLES}\")\nCMAKE_DEPENDENT_OPTION(BUILD_CXX_EXAMPLES \"Build cxx examples\" ON \"BUILD_EXAMPLES;BUILD_CXX\" OFF)\nmessage(STATUS \"Build C++ examples: ${BUILD_CXX_EXAMPLES}\")\nCMAKE_DEPENDENT_OPTION(BUILD_PYTHON_EXAMPLES \"Build python examples\" ON \"BUILD_EXAMPLES;BUILD_PYTHON\" OFF)\nmessage(STATUS \"Build Python examples: ${BUILD_PYTHON_EXAMPLES}\")\nCMAKE_DEPENDENT_OPTION(BUILD_JAVA_EXAMPLES \"Build java examples\" ON \"BUILD_EXAMPLES;BUILD_JAVA\" OFF)\nmessage(STATUS \"Build Java examples: ${BUILD_JAVA_EXAMPLES}\")\nCMAKE_DEPENDENT_OPTION(BUILD_DOTNET_EXAMPLES \"Build dotnet examples\" ON \"BUILD_EXAMPLES;BUILD_DOTNET\" OFF)\nmessage(STATUS \"Build .Net examples: ${BUILD_DOTNET_EXAMPLES}\")\n\noption(BUILD_DOC \"Build documentation\" OFF)\nmessage(STATUS \"Build documentation: ${BUILD_DOC}\")\nCMAKE_DEPENDENT_OPTION(INSTALL_DOC \"Install doc\" ON \"BUILD_CXX AND BUILD_DOC\" OFF)\nmessage(STATUS \"Install doc: ${INSTALL_DOC}\")\n\n# By default all dependencies are NOT built (i.e. BUILD_DEPS=OFF),\n# BUT if building any wrappers (Python, Java or .Net) then BUILD_DEPS=ON.\nif(BUILD_PYTHON OR BUILD_JAVA OR BUILD_DOTNET)\n  option(BUILD_DEPS \"Build all dependencies\" ON)\nelse()\n  option(BUILD_DEPS \"Build all dependencies\" OFF)\nendif()\nmessage(STATUS \"Build all dependencies: ${BUILD_DEPS}\")\n# Install built dependencies if any,\noption(INSTALL_BUILD_DEPS \"Install build all dependencies\" ON)\n\n# IF BUILD_DEPS=ON THEN Force all BUILD_*=ON\nCMAKE_DEPENDENT_OPTION(BUILD_ZLIB \"Build the ZLIB dependency Library\" OFF\n  \"NOT BUILD_DEPS\" ON)\nmessage(STATUS \"Build ZLIB: ${BUILD_ZLIB}\")\n\nCMAKE_DEPENDENT_OPTION(BUILD_absl \"Build the abseil-cpp dependency Library\" OFF\n  \"NOT BUILD_DEPS\" ON)\nmessage(STATUS \"Build abseil-cpp: ${BUILD_absl}\")\n\nCMAKE_DEPENDENT_OPTION(BUILD_Protobuf \"Build the Protobuf dependency Library\" OFF\n  \"NOT BUILD_DEPS\" ON)\nmessage(STATUS \"Build protobuf: ${BUILD_Protobuf}\")\n\nCMAKE_DEPENDENT_OPTION(BUILD_Eigen3 \"Build the eigen3 dependency Library\" OFF\n  \"NOT BUILD_DEPS\" ON)\nmessage(STATUS \"Build eigen3: ${BUILD_Eigen3}\")\n\nif(BUILD_LP_PARSER OR BUILD_TESTING)\n  CMAKE_DEPENDENT_OPTION(BUILD_re2 \"Build the re2 dependency Library\" OFF\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Build re2: ${BUILD_re2}\")\nendif()\n\nif(BUILD_TESTING)\n  CMAKE_DEPENDENT_OPTION(BUILD_googletest \"Build googletest\" OFF\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Build googletest: ${BUILD_googletest}\")\n\n  CMAKE_DEPENDENT_OPTION(BUILD_benchmark \"Build benchmark\" OFF\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Build benchmark: ${BUILD_benchmark}\")\nelse()\n  set(BUILD_googletest OFF)\n  set(BUILD_benchmark OFF)\nendif()\n\n# Optional third party solvers (enabled by default)\n## BOP\n# note OFF is currently not supported.\nCMAKE_DEPENDENT_OPTION(USE_BOP \"Use the BOP solver\" ON \"BUILD_CXX\" OFF)\nmessage(STATUS \"BOP support: ${USE_BOP}\")\n\n## COIN-OR Solvers (Cbc, Clp)\nCMAKE_DEPENDENT_OPTION(USE_COINOR \"Use the COIN-OR solver\" ON \"BUILD_CXX\" OFF)\nmessage(STATUS \"COIN-OR support: ${USE_COINOR}\")\nif(USE_COINOR)\n  CMAKE_DEPENDENT_OPTION(BUILD_CoinUtils \"Build the CoinUtils dependency Library\" OFF\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Build CoinUtils: ${BUILD_CoinUtils}\")\n\n  CMAKE_DEPENDENT_OPTION(BUILD_Osi \"Build the Osi dependency Library\" OFF\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Build Osi: ${BUILD_Osi}\")\n\n  CMAKE_DEPENDENT_OPTION(BUILD_Clp \"Build the Clp dependency Library\" OFF\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Build Clp: ${BUILD_Clp}\")\n\n  CMAKE_DEPENDENT_OPTION(BUILD_Cgl \"Build the Cgl dependency Library\" OFF\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Build Cgl: ${BUILD_Cgl}\")\n\n  CMAKE_DEPENDENT_OPTION(BUILD_Cbc \"Build the Cbc dependency Library\" OFF\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Build Cbc: ${BUILD_Cbc}\")\nendif()\n\n## GLOP\n# note OFF is currently not supported.\nCMAKE_DEPENDENT_OPTION(USE_GLOP \"Use the GLOP solver\" ON \"BUILD_CXX\" OFF)\nmessage(STATUS \"GLOP support: ${USE_GLOP}\")\n\n## GLPK\n# Disable by default since it is GPLv3, user could enable it and release under GPLv3\n# see: https://www.apache.org/licenses/GPL-compatibility.html\nCMAKE_DEPENDENT_OPTION(USE_GLPK \"Use the GLPK solver\" OFF \"BUILD_CXX\" OFF)\nmessage(STATUS \"GLPK support: ${USE_GLPK}\")\nif(USE_GLPK)\n  CMAKE_DEPENDENT_OPTION(BUILD_GLPK \"Build the GLPK dependency Library\" OFF\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Build GLPK: ${BUILD_GLPK}\")\nendif()\n\n## GUROBI\n# Since it is dynamicaly loaded upon use, OFF is currently not supported.\nCMAKE_DEPENDENT_OPTION(USE_GUROBI \"Use the Gurobi solver\" ON \"BUILD_CXX\" OFF)\nmessage(STATUS \"Gurobi support: ${USE_GUROBI}\")\n\n## HiGHS\n# see: https://github.com/ERGO-Code/HiGHS\nCMAKE_DEPENDENT_OPTION(USE_HIGHS \"Use the HiGHS solver\" ON \"BUILD_CXX\" OFF)\nmessage(STATUS \"HiGHS support: ${USE_HIGHS}\")\nif(USE_HIGHS)\n  CMAKE_DEPENDENT_OPTION(BUILD_HIGHS \"Build the HiGHS dependency Library\" OFF\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Build HiGHS: ${BUILD_HIGHS}\")\nendif()\n\n## PDLP\nCMAKE_DEPENDENT_OPTION(USE_PDLP \"Use the PDLP solver\" ON \"BUILD_CXX\" OFF)\nmessage(STATUS \"PDLP support: ${USE_PDLP}\")\nif(USE_PDLP)\n  CMAKE_DEPENDENT_OPTION(BUILD_PDLP \"Build the PDLP dependency Library\" ON\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Build PDLP: ${BUILD_PDLP}\")\nendif()\n\n## SCIP\n# see: https://github.com/scipopt/scip\nCMAKE_DEPENDENT_OPTION(USE_SCIP \"Use the Scip solver\" ON \"BUILD_CXX\" OFF)\nmessage(STATUS \"SCIP support: ${USE_SCIP}\")\nif(USE_SCIP)\n  CMAKE_DEPENDENT_OPTION(BUILD_SCIP \"Build the SCIP dependency Library\" OFF\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Build SCIP: ${BUILD_SCIP}\")\nendif()\n\n# Optional third party solvers (disabled by default)\n## CPLEX\noption(USE_CPLEX \"Use the CPLEX solver\" OFF)\nmessage(STATUS \"CPLEX support: ${USE_CPLEX}\")\n\n## XPRESS\n# Since it is dynamicaly loaded upon use, OFF is currently not supported.\nCMAKE_DEPENDENT_OPTION(USE_XPRESS \"Use the Xpress solver\" ON \"BUILD_CXX\" OFF)\nmessage(STATUS \"Xpress support: ${USE_XPRESS}\")\n\n# Language specific options\nif(BUILD_CXX)\n  CMAKE_DEPENDENT_OPTION(BUILD_CXX_DOC \"Build the C++ doc\" OFF \"NOT BUILD_DOC\" ON)\n  message(STATUS \"C++: Build doc: ${BUILD_CXX_DOC}\")\nendif()\n\nif(BUILD_DOTNET)\n  option(UNIVERSAL_DOTNET_PACKAGE \"Build a .Net multi OS Package\" OFF)\n  message(STATUS \".Net: Create multiple OS Package: ${UNIVERSAL_DOTNET_PACKAGE}\")\n\n  CMAKE_DEPENDENT_OPTION(BUILD_DOTNET_DOC \"Build the .Net doc\" OFF \"NOT BUILD_DOC\" ON)\n  message(STATUS \".Net: Build doc: ${BUILD_DOTNET_DOC}\")\n\n  # Language Version\n  # see: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/configure-language-version\n  set(DOTNET_LANG \"9.0\" CACHE STRING \"Specify the C# language version (default \\\"9.0\\\")\")\n  message(STATUS \".Net C# language version: ${DOTNET_LANG}\")\n\n  set(DOTNET_SAMPLE_LANG \"8.0\" CACHE STRING \"Specify the C# language version for samples (default \\\"8.0\\\")\")\n  message(STATUS \".Net Samples C# language version: ${DOTNET_SAMPLE_LANG}\")\n\n  # Targeted Framework Moniker\n  # see: https://docs.microsoft.com/en-us/dotnet/standard/frameworks\n  # see: https://learn.microsoft.com/en-us/dotnet/standard/net-standard\n  option(USE_DOTNET_46 \"Use .Net Framework 4.6 support\" OFF)\n  message(STATUS \".Net: Use .Net Framework 4.6 support: ${USE_DOTNET_46}\")\n  option(USE_DOTNET_461 \"Use .Net Framework 4.6.1 support\" OFF)\n  message(STATUS \".Net: Use .Net Framework 4.6.1 support: ${USE_DOTNET_461}\")\n  option(USE_DOTNET_462 \"Use .Net Framework 4.6.2 support\" OFF)\n  message(STATUS \".Net: Use .Net Framework 4.6.2 support: ${USE_DOTNET_462}\")\n\n  option(USE_DOTNET_48 \"Use .Net Framework 4.8 support\" OFF)\n  message(STATUS \".Net: Use .Net Framework 4.8 support: ${USE_DOTNET_48}\")\n\n  option(USE_DOTNET_STD_21 \"Use .Net Standard 2.1 support\" OFF)\n  message(STATUS \".Net: Use .Net Framework 2.1 support: ${USE_DOTNET_STD_21}\")\n\n  # .Net Core 3.1 LTS is not available for osx arm64\n  if(APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES \"^(aarch64|arm64)\")\n    set(USE_DOTNET_CORE_31 OFF)\n  else()\n    option(USE_DOTNET_CORE_31 \"Use .Net Core 3.1 LTS support\" OFF)\n  endif()\n  message(STATUS \".Net: Use .Net Core 3.1 LTS support: ${USE_DOTNET_CORE_31}\")\n\n  option(USE_DOTNET_6 \"Use .Net 6.0 LTS support\" ON)\n  message(STATUS \".Net: Use .Net 6.0 LTS support: ${USE_DOTNET_6}\")\n\n  option(USE_DOTNET_7 \"Use .Net 7.0 support\" OFF)\n  message(STATUS \".Net: Use .Net 7.0 support: ${USE_DOTNET_7}\")\nendif()\n\nif(BUILD_JAVA)\n  option(BUILD_FAT_JAR \"Create single .jar with all dependencies (including native binaries)\" OFF)\n  message(STATUS \"Java: Build single fat .jar: ${BUILD_FAT_JAR}\")\n\n  option(SKIP_GPG \"Disable GPG sign\" ON)\n  message(STATUS \"Java: Disable gpg:sign: ${SKIP_GPG}\")\n\n  option(UNIVERSAL_JAVA_PACKAGE \"Build a Java multi OS Package\" OFF)\n  message(STATUS \"Java: Create multiple OS package: ${UNIVERSAL_JAVA_PACKAGE}\")\n\n  CMAKE_DEPENDENT_OPTION(BUILD_JAVA_DOC \"Build the Java doc\" OFF \"NOT BUILD_DOC\" ON)\n  message(STATUS \"Java: Build doc: ${BUILD_JAVA_DOC}\")\n\n  # On Centos-7 this option (needed otherwise) is unrecognized and should be\n  # replaced by an empty string.\n  set(GPG_ARGS \"<arg>--pinentry-mode</arg><arg>loopback</arg>\" CACHE STRING \"Extra options for GPG\")\n  message(STATUS \"Java: Add GPG options: ${GPG_ARGS}\")\nendif()\n\nif(BUILD_PYTHON)\n  CMAKE_DEPENDENT_OPTION(BUILD_pybind11 \"Build the pybind11 dependency Library\" OFF\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Python: Build pybind11: ${BUILD_pybind11}\")\n\n  CMAKE_DEPENDENT_OPTION(BUILD_pybind11_protobuf \"Build the pybind11_protobuf dependency Library\" OFF\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Python: Build pybind11_protobuf: ${BUILD_pybind11_protobuf}\")\n\n  CMAKE_DEPENDENT_OPTION(BUILD_pybind11_abseil \"Build the pybind11_abseil dependency Library\" OFF\n    \"NOT BUILD_DEPS\" ON)\n  message(STATUS \"Python: Build pybind11_abseil: ${BUILD_pybind11_abseil}\")\n\n  option(GENERATE_PYTHON_STUB \"Generate Python stub file (.pyi)\" ON)\n  message(STATUS \"Python: Generate stub file: ${GENERATE_PYTHON_STUB}\")\n\nCMAKE_DEPENDENT_OPTION(BUILD_PYTHON_DOC \"Build the Python doc\" OFF \"NOT BUILD_DOC\" ON)\n  message(STATUS \"Python: Build doc: ${BUILD_PYTHON_DOC}\")\n\n  CMAKE_DEPENDENT_OPTION(BUILD_VENV \"Create Python venv in BINARY_DIR/python/venv\" OFF\n    \"NOT BUILD_TESTING\" ON)\n  message(STATUS \"Python: Create venv: ${BUILD_VENV}\")\n\n  CMAKE_DEPENDENT_OPTION(VENV_USE_SYSTEM_SITE_PACKAGES \"Python venv can use system site packages\" OFF\n    \"BUILD_VENV\" OFF)\n  message(STATUS \"Python: Allow venv to use system site packages: ${VENV_USE_SYSTEM_SITE_PACKAGES}\")\n\n  option(FETCH_PYTHON_DEPS \"Install python required modules if not available\" ${BUILD_DEPS})\n  message(STATUS \"Python: Fetch dependencies: ${FETCH_PYTHON_DEPS}\")\nendif()\n\n# Find system deps\ninclude(system_deps)\n\n# Build Needed dependencies\nadd_subdirectory(cmake/dependencies dependencies)\nlist(APPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_BINARY_DIR}/dependencies/install)\n\ninclude(host)\n# verify deps\ninclude(check_deps)\n\ninclude(cpp)\ninclude(flatzinc)\ninclude(glop)\n\ninclude(python)\ninclude(java)\ninclude(dotnet)\n\n# Since samples mix all languages we must parse them once we have included all\n# <language>.cmake files\nforeach(SAMPLES IN ITEMS\n algorithms\n graph\n glop\n constraint_solver\n linear_solver\n ${MATH_OPT_DIR}\n ${PDLP_DIR}\n sat)\n  add_subdirectory(ortools/${SAMPLES}/samples)\nendforeach()\n\n# Same for examples\nforeach(EXAMPLES IN ITEMS contrib cpp dotnet java python)\n  add_subdirectory(examples/${EXAMPLES})\nendforeach()\n\n# Add tests in examples/tests\nadd_subdirectory(examples/tests)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0751953125,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google.com/conduct/).\n"
        },
        {
          "name": "Dependencies.txt",
          "type": "blob",
          "size": 0.267578125,
          "content": "ZLIB=1.3.1\nabseil-cpp=20240722.0\nProtobuf=v26.1\nEigen=3.4.0\nRe2=2024-04-01\nCoinUtils=2.11.6\nOsi=0.108.7\nClp=1.17.7\nCgl=0.60.5\nCbc=2.10.7\nGLPK=5.0\nHiGHS=v1.7.2\nScip=v900\n# Python\npybind11=v2.12.0\npybind11_abseil=52f2739\npybind11_protobuf=3b11990\n# Testing\ngoogletest=v1.15.2\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.0478515625,
          "content": "# Copyright 2010-2024 Google LLC\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Top level declarations\n.PHONY: help\nhelp: help_all\n\n.PHONY: detect\ndetect: detect_all\n\n.PHONY: all\nall: build_all\n\n.PHONY: check\ncheck: check_all\n\n.PHONY: test\ntest: test_all\n\n.PHONY: archive\narchive: archive_all\n\n.PHONY: clean\nclean: clean_all\n\n# OR_ROOT is the minimal prefix to define the root of or-tools, if we\n# are compiling in the or-tools root, it is empty. Otherwise, it is\n# $(OR_TOOLS_TOP)/ or $(OR_TOOLS_TOP)\\\\ depending on the platform. It\n# contains the trailing separator if not empty.\n#\n# OR_ROOT_FULL is always the complete path to or-tools. It is useful\n# to store path informations inside libraries for instance.\nifeq ($(OR_TOOLS_TOP),)\n  OR_ROOT =\nelse\n  ifeq ($(OS), Windows_NT)\n    OR_ROOT = $(OR_TOOLS_TOP)\\\\\n  else\n    OR_ROOT = $(OR_TOOLS_TOP)/\n  endif\nendif\n\n# Delete all implicit rules to speed up makefile\n.SUFFIXES:\n# Remove some rules from gmake that .SUFFIXES does not remove.\nSUFFIXES =\n\n# Keep all intermediate files\n# ToDo: try to remove it later\n.SECONDARY:\n\n# Read version.\nifeq ($(OR_TOOLS_MAJOR)$(OR_TOOLS_MINOR),)\n  include $(OR_ROOT)Version.txt\nendif\n\n# We try to detect the platform, and load system specific macros.\ninclude $(OR_ROOT)makefiles/Makefile.port.mk\nOR_ROOT_FULL=$(OR_TOOLS_TOP)\n\n# Check SOURCE argument\nSOURCE_SUFFIX = $(suffix $(SOURCE))\n# will contain “/any/path/foo.cc” on unix and “\\\\any\\\\path\\\\foo.cc” on windows\nSOURCE_PATH = $(subst /,$S,$(SOURCE))\nSOURCE_NAME= $(basename $(notdir $(SOURCE)))\nifeq ($(SOURCE),) # Those rules will be used if SOURCE is empty\n.PHONY: build run\nbuild run:\n\t$(error no source file provided, the \"$@\" target must be used like so: \\\n make $@ SOURCE=relative/path/to/filename.extension)\nelse\nifeq (,$(wildcard $(SOURCE)))\n$(error File \"$(SOURCE)\" does not exist !)\nendif\nendif\n\n# Include .mk files.\nBUILT_LANGUAGES = C++\nifeq ($(BUILD_PYTHON),ON)\nBUILT_LANGUAGES +=, Python$(PYTHON_VERSION)\nendif\nifeq ($(BUILD_JAVA),ON)\nBUILT_LANGUAGES +=, Java\nendif\nifeq ($(BUILD_DOTNET),ON)\nBUILT_LANGUAGES +=, .Net (6.0)\nendif\n\ninclude $(OR_ROOT)makefiles/Makefile.cpp.mk\ninclude $(OR_ROOT)makefiles/Makefile.dotnet.mk\ninclude $(OR_ROOT)makefiles/Makefile.java.mk\ninclude $(OR_ROOT)makefiles/Makefile.python.mk\ninclude $(OR_ROOT)makefiles/Makefile.archive.mk\nifneq ($(PLATFORM),WIN64)\ninclude $(OR_ROOT)makefiles/Makefile.doc.mk\nelse\n# Remove some rules on windows\nhelp_doc:\n\nendif\n\n.PHONY: help_usage\nhelp_usage:\n\t@echo Use one of the following targets:\n\t@echo help, help_all:\tPrint this help.\n\t@echo all:\tBuild OR-Tools for all available languages.\n\t@echo check, check_all:\tCheck OR-Tools for all available languages.\n\t@echo test, test_all:\tTest OR-Tools for all available languages.\n\t@echo clean, clean_all:\tClean output from previous build for all available languages \\(won\\'t clean third party\\).\n\t@echo detect, detect_all:\tShow variables used to build OR-Tools for all available languages.\nifeq ($(PLATFORM),WIN64)\n\t@echo off & echo(\nelse\n\t@echo\nendif\n\n.PHONY: help_all\nhelp_all: help_usage help_cpp help_dotnet help_java help_python help_archive help_doc\n\n.PHONY: check_all\ncheck_all: check_cpp check_dotnet check_java check_python\n\t@echo Or-tools has been built and checked for \"$(BUILT_LANGUAGES)\"\n\n# Commands to build/clean all languages.\n.PHONY: compile\ncompile:\n\tcmake --build dependencies --target install --config $(BUILD_TYPE) -j $(JOBS) -v\n\n.PHONY: build_all\nbuild_all:\n\t$(MAKE) third_party BUILD_DOTNET=ON BUILD_JAVA=ON BUILD_PYTHON=ON\n\tcmake --build $(BUILD_DIR) --target install --config $(BUILD_TYPE) -j $(JOBS) -v\n\t@echo Or-tools has been built for \"$(BUILT_LANGUAGES)\"\n\n.PHONY: test_all\ntest_all: test_cpp test_dotnet test_java test_python\n\t@echo Or-tools have been built and tested for \"$(BUILT_LANGUAGES)\"\n\n.PHONY: archive_all\narchive_all: archive_cpp archive_dotnet archive_java archive_python archive_data\n\t@echo Or-tools has been built and archived for \"$(BUILT_LANGUAGES)\"\n\n.PHONY: test_archive_all\ntest_archive_all: test_archive_cpp test_archive_dotnet test_archive_java test_archive_python\n\t@echo Or-tools archives have been checked for \"$(BUILT_LANGUAGES)\"\n\n.PHONY: clean_all\nclean_all: clean_cpp clean_dotnet clean_java clean_python clean_archive\n\t@echo Or-Tools has been cleaned for \"$(BUILT_LANGUAGES)\"\n\n.PHONY: detect_all\ndetect_all: detect_port detect_cpp detect_dotnet detect_java detect_python detect_archive\n\t@echo SOURCE = $(SOURCE)\n\t@echo SOURCE_PATH = $(SOURCE_PATH)\n\t@echo SOURCE_NAME = $(SOURCE_NAME)\n\t@echo SOURCE_SUFFIX = $(SOURCE_SUFFIX)\nifeq ($(PLATFORM),WIN64)\n\t@echo off & echo(\nelse\n\t@echo\nendif\n\nprint-%  : ; @echo $* = \\'$($*)\\'\n\n.PHONY: FORCE\nFORCE:\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.0703125,
          "content": "# OR-Tools - Google Optimization Tools\n\n[![PyPI version](https://img.shields.io/pypi/v/ortools.svg)](https://pypi.org/project/ortools/)\n[![PyPI download](https://img.shields.io/pypi/dm/ortools.svg)](https://pypi.org/project/ortools/#files)\n[![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/google/or-tools/main)\n\\\n[![NuGet version](https://img.shields.io/nuget/v/Google.OrTools.svg)](https://www.nuget.org/packages/Google.OrTools)\n[![NuGet download](https://img.shields.io/nuget/dt/Google.OrTools.svg)](https://www.nuget.org/packages/Google.OrTools)\n\\\n[![Maven Central](https://img.shields.io/maven-central/v/com.google.ortools/ortools-java)](https://mvnrepository.com/artifact/com.google.ortools/ortools-java)\n\\\n[![Discord](https://img.shields.io/discord/693088862481678374?color=7289DA&logo=discord&style=plastic)](https://discord.gg/ENkQrdf)\n\nGoogle's software suite for combinatorial optimization.\n\n## Table of Contents\n\n*   [About OR-Tools](#about)\n*   [Codemap](#codemap)\n*   [Installation](#installation)\n*   [Quick Start](#quick-start)\n*   [Documentation](#documentation)\n*   [Contributing](#contributing)\n*   [License](#license)\n\n<a name=\"about\"></a>\n## About OR-Tools\n\nGoogle Optimization Tools (a.k.a., OR-Tools) is an open-source, fast and\nportable software suite for solving combinatorial optimization problems.\n\nThe suite contains:\n\n*   Two constraint programming solver (CP* and CP-SAT);\n*   Two linear programming solvers (Glop and PDLP);\n*   Wrappers around commercial and other open source solvers, including mixed\n    integer solvers;\n*   Bin packing and knapsack algorithms;\n*   Algorithms for the Traveling Salesman Problem and Vehicle Routing Problem;\n*   Graph algorithms (shortest paths, min cost flow, max flow, linear sum\n    assignment).\n\nWe wrote OR-Tools in C++, but provide wrappers in Python, C# and Java.\n\n## Codemap\n\nThis software suite is composed of the following components:\n\n*   [Makefile](Makefile) Top-level for\n    [GNU Make](https://www.gnu.org/software/make/manual/make.html) based build.\n*   [makefiles](makefiles) Subsidiary Make files, CI and build system documentation.\n*   [CMakeLists.txt](CMakeLists.txt) Top-level for\n    [CMake](https://cmake.org/cmake/help/latest/) based build.\n*   [cmake](cmake) Subsidiary CMake files, CI and build system documentation.\n*   [WORKSPACE](WORKSPACE) Top-level for\n    [Bazel](https://bazel.build/start/bazel-intro) based build.\n*   [bazel](bazel) Subsidiary Bazel files, CI and build system documentation.\n*   [ortools](ortools) Root directory for source code.\n    *   [base](ortools/base) Basic utilities.\n    *   [algorithms](ortools/algorithms) Basic algorithms.\n        *   [samples](ortools/algorithms/samples) Carefully crafted samples.\n    *   [graph](ortools/graph) Graph algorithms.\n        *   [samples](ortools/graph/samples) Carefully crafted samples.\n    *   [linear_solver](ortools/linear_solver) Linear solver wrapper.\n        *   [samples](ortools/linear_solver/samples) Carefully crafted samples.\n    *   [glop](ortools/glop) Simplex-based linear programming solver.\n        *   [samples](ortools/glop/samples) Carefully crafted samples.\n    *   [pdlp](ortools/pdlp) First-order linear programming solver.\n        *   [samples](ortools/pdlp/samples) Carefully crafted samples.\n    *   [lp_data](ortools/lp_data) Data structures for linear models.\n    *   [constraint_solver](ortools/constraint_solver) Constraint and Routing\n        solver.\n        *   [docs](ortools/constraint_solver/docs) Documentation of the component.\n        *   [samples](ortools/constraint_solver/samples) Carefully crafted samples.\n    *   [sat](ortools/sat) SAT solver.\n        *   [docs](ortools/sat/docs) Documentation of the component.\n        *   [samples](ortools/sat/samples) Carefully crafted samples.\n    *   [bop](ortools/bop) Boolean solver based on SAT.\n    *   [util](ortools/util) Utilities needed by the constraint solver\n*   [examples](examples) Root directory for all examples.\n    *   [contrib](examples/contrib) Examples from the community.\n    *   [cpp](examples/cpp) C++ examples.\n    *   [dotnet](examples/dotnet) .Net examples.\n    *   [java](examples/java) Java examples.\n    *   [python](examples/python) Python examples.\n    *   [notebook](examples/notebook) Jupyter/IPython notebooks.\n    *   [flatzinc](examples/flatzinc) FlatZinc examples.\n    *   [tests](examples/tests) Unit tests and bug reports.\n*   [tools](tools) Delivery Tools (e.g. Windows GNU binaries, scripts, release dockers)\n\n## Installation\n\nThis software suite has been tested under:\n\n*   Ubuntu 18.04 LTS and up (64-bit);\n*   Apple macOS Mojave with Xcode 9.x (64-bit);\n*   Microsoft Windows with Visual Studio 2022 (64-bit).\n\nOR-Tools currently builds with a Makefile, but also provides Bazel and CMake\nsupport.\n\nFor installation instructions (both source and binary), please visit\nhttps://developers.google.com/optimization/introduction/installing.\n\n### Build from source using Make (legacy)\n\nWe provide a Make based build.<br>Please check the\n[Make build instructions](makefiles/README.md).\n\n### Build from source using CMake\n\nWe provide a CMake based build.<br>Please check the\n[CMake build instructions](cmake/README.md).\n\n### Build from source using Bazel\n\nWe provide a Bazel based build.<br>Please check the\n[Bazel build instructions](bazel/README.md).\n\n## Quick Start\n\nThe best way to learn how to use OR-Tools is to follow the tutorials in our\ndeveloper guide:\n\nhttps://developers.google.com/optimization/introduction/get_started\n\nIf you want to learn from code examples, take a look at the examples in the\n[examples](examples) directory.\n\n## Documentation\n\nThe complete documentation for OR-Tools is available at:\nhttps://developers.google.com/optimization/\n\n## Contributing\n\nThe [CONTRIBUTING.md](CONTRIBUTING.md) file contains instructions on how to\nsubmit the Contributor License Agreement before sending any pull requests (PRs).\nOf course, if you're new to the project, it's usually best to discuss any\nproposals and reach consensus before sending your first PR.\n\n## License\n\nThe OR-Tools software suite is licensed under the terms of the Apache License 2.0.\n<br>See [LICENSE](LICENSE) for more information.\n"
        },
        {
          "name": "Version.txt",
          "type": "blob",
          "size": 0.05078125,
          "content": "OR_TOOLS_MAJOR=9\nOR_TOOLS_MINOR=11\n#PRE_RELEASE=YES\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 8.90234375,
          "content": "# Copyright 2010-2024 Google LLC\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nworkspace(name = \"com_google_ortools\")\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\nload(\"@bazel_tools//tools/build_defs/repo:git.bzl\", \"git_repository\", \"new_git_repository\")\n\n# Bazel Extensions\n## Bazel Skylib rules.\ngit_repository(\n    name = \"bazel_skylib\",\n    tag = \"1.7.1\",\n    remote = \"https://github.com/bazelbuild/bazel-skylib.git\",\n)\nload(\"@bazel_skylib//:workspace.bzl\", \"bazel_skylib_workspace\")\nbazel_skylib_workspace()\n\n## Bazel rules.\ngit_repository(\n    name = \"platforms\",\n    tag = \"0.0.10\",\n    remote = \"https://github.com/bazelbuild/platforms.git\",\n)\n\ngit_repository(\n    name = \"rules_cc\",\n    tag = \"0.0.9\",\n    remote = \"https://github.com/bazelbuild/rules_cc.git\",\n)\n\ngit_repository(\n    name = \"rules_proto\",\n    tag = \"5.3.0-21.7\",\n    remote = \"https://github.com/bazelbuild/rules_proto.git\",\n)\n\ngit_repository(\n    name = \"rules_java\",\n    tag = \"7.7.0\",\n    remote = \"https://github.com/bazelbuild/rules_java.git\",\n)\n\ngit_repository(\n    name = \"rules_jvm_external\",\n    tag = \"6.2\",\n    remote = \"https://github.com/bazelbuild/rules_jvm_external.git\",\n)\n\ngit_repository(\n    name = \"contrib_rules_jvm\",\n    tag = \"v0.27.0\",\n    remote = \"https://github.com/bazel-contrib/rules_jvm.git\",\n)\n\ngit_repository(\n    name = \"rules_python\",\n    tag = \"0.34.0\",\n    remote = \"https://github.com/bazelbuild/rules_python.git\",\n)\n\n# Dependencies\n## ZLIB\nnew_git_repository(\n    name = \"zlib\",\n    build_file = \"@com_google_protobuf//:third_party/zlib.BUILD\",\n    tag = \"v1.3.1\",\n    remote = \"https://github.com/madler/zlib.git\",\n)\n\n## Abseil-cpp\ngit_repository(\n    name = \"com_google_absl\",\n    tag = \"20240722.0\",\n    patches = [\"//patches:abseil-cpp-20240722.0.patch\"],\n    patch_args = [\"-p1\"],\n    remote = \"https://github.com/abseil/abseil-cpp.git\",\n)\n\n## Re2\ngit_repository(\n    name = \"com_google_re2\",\n    tag = \"2024-04-01\",\n    remote = \"https://github.com/google/re2.git\",\n    repo_mapping = {\"@abseil-cpp\": \"@com_google_absl\"},\n)\n\n## Protobuf\n# proto_library, cc_proto_library, and java_proto_library rules implicitly\n# depend on @com_google_protobuf for protoc and proto runtimes.\n# This statement defines the @com_google_protobuf repo.\ngit_repository(\n    name = \"com_google_protobuf\",\n    patches = [\"//patches:protobuf-v26.1.patch\"],\n    patch_args = [\"-p1\"],\n    tag = \"v26.1\",\n    remote = \"https://github.com/protocolbuffers/protobuf.git\",\n)\n# Load common dependencies.\nload(\"@com_google_protobuf//:protobuf_deps.bzl\", \"protobuf_deps\")\nprotobuf_deps()\n\n## Solvers\nhttp_archive(\n    name = \"glpk\",\n    build_file = \"//bazel:glpk.BUILD.bazel\",\n    sha256 = \"4a1013eebb50f728fc601bdd833b0b2870333c3b3e5a816eeba921d95bec6f15\",\n    url = \"http://ftp.gnu.org/gnu/glpk/glpk-5.0.tar.gz\",\n)\n\nhttp_archive(\n    name = \"bliss\",\n    build_file = \"//bazel:bliss.BUILD.bazel\",\n    patches = [\"//bazel:bliss-0.73.patch\"],\n    sha256 = \"f57bf32804140cad58b1240b804e0dbd68f7e6bf67eba8e0c0fa3a62fd7f0f84\",\n    url = \"https://github.com/google/or-tools/releases/download/v9.0/bliss-0.73.zip\",\n    #url = \"http://www.tcs.hut.fi/Software/bliss/bliss-0.73.zip\",\n)\n\nnew_git_repository(\n    name = \"scip\",\n    build_file = \"//bazel:scip.BUILD.bazel\",\n    patches = [\"//bazel:scip-v900.patch\"],\n    patch_args = [\"-p1\"],\n    tag = \"v900\",\n    remote = \"https://github.com/scipopt/scip.git\",\n)\n\n# Eigen has no Bazel build.\nnew_git_repository(\n    name = \"eigen\",\n    tag = \"3.4.0\",\n    remote = \"https://gitlab.com/libeigen/eigen.git\",\n    build_file_content =\n\"\"\"\ncc_library(\n    name = 'eigen3',\n    srcs = [],\n    includes = ['.'],\n    hdrs = glob(['Eigen/**']),\n    defines = [\"EIGEN_MPL2_ONLY\",],\n    visibility = ['//visibility:public'],\n)\n\"\"\"\n)\n\ngit_repository(\n    name = \"highs\",\n    branch = \"v1.7.2\",\n    remote = \"https://github.com/ERGO-Code/HiGHS.git\",\n)\n\n## Swig support\n# pcre source code repository\nnew_git_repository(\n    name = \"pcre2\",\n    build_file = \"//bazel:pcre2.BUILD.bazel\",\n    tag = \"pcre2-10.42\",\n    remote = \"https://github.com/PCRE2Project/pcre2.git\",\n)\n\n# generate Patch:\n#   Checkout swig\n#   cd Source/CParse && bison -d -o parser.c parser.y\n#   ./autogen.sh\n#   ./configure\n#   make Lib/swigwarn.swg\n#   edit .gitignore and remove parser.h, parser.c, and swigwarn.swg\n#   git add Source/CParse/parser.h Source/CParse/parser.c Lib/swigwarn.swg\n#   git diff --staged Lib Source/CParse > <path to>swig.patch\n# Edit swig.BUILD.bazel:\n#   edit version\nnew_git_repository(\n    name = \"swig\",\n    build_file = \"//bazel:swig.BUILD.bazel\",\n    patches = [\"//bazel:swig.patch\"],\n    patch_args = [\"-p1\"],\n    tag = \"v4.2.0\",\n    remote = \"https://github.com/swig/swig.git\",\n)\n\n## Python\nload(\"@rules_python//python:repositories.bzl\", \"py_repositories\")\npy_repositories()\n\nload(\"@rules_python//python:repositories.bzl\", \"python_register_toolchains\")\nDEFAULT_PYTHON = \"3.12\"\npython_register_toolchains(\n    name = \"python3_12\",\n    python_version = DEFAULT_PYTHON,\n    ignore_root_user_error=True,\n)\n\n# Create a central external repo, @pip_deps, that contains Bazel targets for all the\n# third-party packages specified in the bazel/requirements.txt file.\nload(\"@rules_python//python:pip.bzl\", \"pip_parse\")\npip_parse(\n   name = \"pip_deps\",\n   requirements_lock = \"//bazel:ortools_requirements.txt\",\n)\n\nload(\"@pip_deps//:requirements.bzl\",\n     install_pip_deps=\"install_deps\")\ninstall_pip_deps()\n\n# Add a second repo @ortools_notebook_deps for jupyter notebooks.\npip_parse(\n   name = \"ortools_notebook_deps\",\n   requirements_lock = \"//bazel:notebook_requirements.txt\",\n)\n\nload(\"@ortools_notebook_deps//:requirements.bzl\",\n     install_notebook_deps=\"install_deps\")\ninstall_notebook_deps()\n\n# Protobuf\nload(\"@com_google_protobuf//bazel:system_python.bzl\", \"system_python\")\nsystem_python(\n    name = \"system_python\",\n    minimum_python_version = \"3.8\",\n)\n\n# Absl python library\nhttp_archive(\n    name = \"com_google_absl_py\",\n    repo_mapping = {\"@six_archive\": \"@six\"},\n    sha256 = \"0be59b82d65dfa1f995365dcfea2cc57989297b065fda696ef13f30fcc6c8e5b\",\n    strip_prefix = \"abseil-py-pypi-v0.15.0\",\n    urls = [\n        \"https://github.com/abseil/abseil-py/archive/refs/tags/pypi-v0.15.0.tar.gz\",\n    ],\n)\n\n## `pybind11_bazel`\ngit_repository(\n    name = \"pybind11_bazel\",\n    tag = \"v2.12.0\", # 2024/04/08\n    patches = [\"//patches:pybind11_bazel.patch\"],\n    patch_args = [\"-p1\"],\n    remote = \"https://github.com/pybind/pybind11_bazel.git\",\n)\n\nnew_git_repository(\n    name = \"pybind11\",\n    build_file = \"@pybind11_bazel//:pybind11-BUILD.bazel\",\n    tag = \"v2.13.1\",\n    remote = \"https://github.com/pybind/pybind11.git\",\n)\n\nnew_git_repository(\n    name = \"org_pybind11_abseil\",\n    tag = \"v202402.0\",\n    patches = [\"//patches:pybind11_abseil.patch\"],\n    patch_args = [\"-p1\"],\n    remote = \"https://github.com/pybind/pybind11_abseil.git\",\n)\n\nnew_git_repository(\n    name = \"pybind11_protobuf\",\n    commit = \"84653a591aea5df482dc2bde42c19efafbd53a57\", # 2024/06/28\n    remote = \"https://github.com/pybind/pybind11_protobuf.git\",\n)\n\n## Java support (with junit 5)\nload(\"@rules_java//java:repositories.bzl\", \"rules_java_dependencies\", \"rules_java_toolchains\")\nrules_java_dependencies()\nrules_java_toolchains()\n\nload(\"@rules_jvm_external//:repositories.bzl\", \"rules_jvm_external_deps\")\nrules_jvm_external_deps()\n\nload(\"@rules_jvm_external//:setup.bzl\", \"rules_jvm_external_setup\")\nrules_jvm_external_setup()\n\nJUNIT_PLATFORM_VERSION = \"1.9.2\"\nJUNIT_JUPITER_VERSION = \"5.9.2\"\nload(\"@rules_jvm_external//:defs.bzl\", \"maven_install\")\nmaven_install(\n    artifacts = [\n        \"net.java.dev.jna:jna:5.14.0\",\n        \"com.google.truth:truth:0.32\",\n        \"org.junit.platform:junit-platform-launcher:%s\" % JUNIT_PLATFORM_VERSION,\n        \"org.junit.platform:junit-platform-reporting:%s\" % JUNIT_PLATFORM_VERSION,\n        \"org.junit.jupiter:junit-jupiter-api:%s\" % JUNIT_JUPITER_VERSION,\n        \"org.junit.jupiter:junit-jupiter-params:%s\" % JUNIT_JUPITER_VERSION,\n        \"org.junit.jupiter:junit-jupiter-engine:%s\" % JUNIT_JUPITER_VERSION,\n    ],\n    repositories = [\n        \"https://repo1.maven.org/maven2\",\n    ],\n)\n\nload(\"@contrib_rules_jvm//:repositories.bzl\", \"contrib_rules_jvm_deps\")\ncontrib_rules_jvm_deps()\n\nload(\"@contrib_rules_jvm//:setup.bzl\", \"contrib_rules_jvm_setup\")\ncontrib_rules_jvm_setup()\n\n## Testing\ngit_repository(\n    name = \"com_google_googletest\",\n    tag = \"v1.15.2\",\n    remote = \"https://github.com/google/googletest.git\",\n)\n\ngit_repository(\n    name = \"com_google_benchmark\",\n    tag = \"v1.8.5\",\n    remote = \"https://github.com/google/benchmark.git\",\n)\n"
        },
        {
          "name": "arm.sh",
          "type": "blob",
          "size": 0.8896484375,
          "content": "#!/usr/bin/env bash\n# Copyright 2010-2024 Google LLC\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nset -euo pipefail\n\n#./tools/cross_compile.sh --help\n\nexport PROJECT=or-tools\n#export PROJECT=glop\n\n#export TARGET=x86_64\nexport TARGET=aarch64\n#export TARGET=mips64\n#export TARGET=ppc64\n\n./tools/cross_compile.sh toolchain\n./tools/cross_compile.sh build\n./tools/cross_compile.sh qemu\n./tools/cross_compile.sh test\n"
        },
        {
          "name": "bazel",
          "type": "tree",
          "content": null
        },
        {
          "name": "binder",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "makefiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "or-tools.code-workspace",
          "type": "blob",
          "size": 3.3798828125,
          "content": "{\n\t\"folders\": [\n\t\t{\n\t\t\t\"path\": \".\"\n\t\t}\n\t],\n\t\"settings\": {\n\t\t\"files.associations\": {\n      \"scoped_allocator\": \"cpp\",\n      \"*.inc\": \"cpp\",\n      \"vector\": \"cpp\",\n      \"utility\": \"cpp\",\n      \"__config\": \"cpp\",\n      \"__nullptr\": \"cpp\",\n      \"cstddef\": \"cpp\",\n      \"exception\": \"cpp\",\n      \"initializer_list\": \"cpp\",\n      \"optional\": \"cpp\",\n      \"stdexcept\": \"cpp\",\n      \"type_traits\": \"cpp\",\n      \"typeinfo\": \"cpp\",\n      \"variant\": \"cpp\",\n      \"algorithm\": \"cpp\",\n      \"memory\": \"cpp\",\n      \"__bit_reference\": \"cpp\",\n      \"__debug\": \"cpp\",\n      \"__functional_base\": \"cpp\",\n      \"__hash_table\": \"cpp\",\n      \"__locale\": \"cpp\",\n      \"__mutex_base\": \"cpp\",\n      \"__split_buffer\": \"cpp\",\n      \"__string\": \"cpp\",\n      \"__threading_support\": \"cpp\",\n      \"__tree\": \"cpp\",\n      \"__tuple\": \"cpp\",\n      \"array\": \"cpp\",\n      \"atomic\": \"cpp\",\n      \"bitset\": \"cpp\",\n      \"cctype\": \"cpp\",\n      \"chrono\": \"cpp\",\n      \"cmath\": \"cpp\",\n      \"condition_variable\": \"cpp\",\n      \"csignal\": \"cpp\",\n      \"cstdarg\": \"cpp\",\n      \"cstdint\": \"cpp\",\n      \"cstdio\": \"cpp\",\n      \"cstdlib\": \"cpp\",\n      \"cstring\": \"cpp\",\n      \"ctime\": \"cpp\",\n      \"cwchar\": \"cpp\",\n      \"cwctype\": \"cpp\",\n      \"deque\": \"cpp\",\n      \"forward_list\": \"cpp\",\n      \"functional\": \"cpp\",\n      \"iomanip\": \"cpp\",\n      \"ios\": \"cpp\",\n      \"iosfwd\": \"cpp\",\n      \"iostream\": \"cpp\",\n      \"istream\": \"cpp\",\n      \"iterator\": \"cpp\",\n      \"limits\": \"cpp\",\n      \"list\": \"cpp\",\n      \"locale\": \"cpp\",\n      \"map\": \"cpp\",\n      \"mutex\": \"cpp\",\n      \"numeric\": \"cpp\",\n      \"ostream\": \"cpp\",\n      \"queue\": \"cpp\",\n      \"random\": \"cpp\",\n      \"ratio\": \"cpp\",\n      \"set\": \"cpp\",\n      \"sstream\": \"cpp\",\n      \"stack\": \"cpp\",\n      \"streambuf\": \"cpp\",\n      \"string\": \"cpp\",\n      \"string_view\": \"cpp\",\n      \"system_error\": \"cpp\",\n      \"thread\": \"cpp\",\n      \"tuple\": \"cpp\",\n      \"unordered_map\": \"cpp\",\n      \"unordered_set\": \"cpp\",\n      \"__errc\": \"cpp\",\n      \"__node_handle\": \"cpp\",\n      \"any\": \"cpp\",\n      \"cfenv\": \"cpp\",\n      \"cinttypes\": \"cpp\",\n      \"clocale\": \"cpp\",\n      \"csetjmp\": \"cpp\",\n      \"fstream\": \"cpp\",\n      \"future\": \"cpp\",\n      \"new\": \"cpp\",\n      \"valarray\": \"cpp\",\n      \"*.tcc\": \"cpp\",\n      \"hash_map\": \"cpp\",\n      \"hash_set\": \"cpp\",\n      \"slist\": \"cpp\",\n      \"regex\": \"cpp\"\n    },\n\t\t\"C_Cpp.clang_format_fallbackStyle\": \"Google\",\n\t\t\"C_Cpp.default.includePath\": [\n\t\t\t\"${workspaceRoot}\",\n\t\t\t\"${workspaceRoot}/ortools/gen\",\n\t\t\t\"${workspaceRoot}/dependencies/install/include\",\n\t\t],\n\t\t\"C_Cpp.default.cppStandard\": \"c++20\",\n\t\t\"C_Cpp.default.cStandard\": \"c11\",\n\t\t\"C_Cpp.default.defines\": [\n\t\t\t\"USE_BOP\",\n\t\t\t\"USE_GLOP\",\n\t\t\t\"USE_CLP\",\n\t\t\t\"USE_CBC\",\n\t\t\t\"USE_PDLP\",\n\t\t\t\"USE_SCIP\"\n\t\t],\n\t\t\"C_Cpp.clang_format_style\": \"Google\",\n\t\t\"python.formatting.provider\": \"yapf\",\n\t\t\"python.pythonPath\": \"python3\",\n\t\t\"python.autoComplete.extraPaths\": [\n\t\t\t\"${workspaceRoot}\",\n\t\t\t\"${workspaceRoot}/ortools/gen\",\n\t\t\t\"${workspaceRoot}/dependencies/sources/protobuf-3.6.1/python\",\n\t\t],\n\t\t\"[cpp]\": {\n\t\t\t\"editor.tabSize\": 2,\n\t\t},\n\t\t\"[csharp]\": {\n\t\t\t\"editor.tabSize\": 2,\n\t\t},\n\t\t\"[java]\": {\n\t\t\t\"editor.tabSize\": 2,\n\t\t},\n\t\t\"[python]\": {\n\t\t\t\"editor.tabSize\": 4,\n    },\n    \"java.configuration.updateBuildConfiguration\": \"interactive\",\n    \"maven.view\": \"hierarchical\",\n    \"git.ignoreLimitWarning\": true,\n    \"python.analysis.extraPaths\": [\n      \"${workspaceRoot}\",\n      \"${workspaceRoot}/ortools/gen\",\n      \"${workspaceRoot}/dependencies/sources/protobuf-3.6.1/python\"\n    ],\n\t}\n}\n"
        },
        {
          "name": "ortools",
          "type": "tree",
          "content": null
        },
        {
          "name": "patches",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}