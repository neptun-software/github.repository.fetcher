{
  "metadata": {
    "timestamp": 1736566446677,
    "page": 4,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "opencv/opencv",
      "stars": 80004,
      "defaultBranch": "4.x",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4443359375,
          "content": "# https://editorconfig.org/\n\nroot = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n[{CMakeLists.*,*.cmake}]\nindent_style = space\nindent_size = 2\n\n[Makefile]\nindent_style = tab\n\n[*.{bat,cmd,cmd.*}]\nend_of_line = crlf\nindent_style = space\nindent_size = 2\n\n[*.{ps1,ps1.*}]\nend_of_line = crlf\nindent_style = space\nindent_size = 4\n\n[*.{md,markdown}]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.2421875,
          "content": "*           text=auto whitespace=trailing-space,space-before-tab,-indent-with-non-tab,tab-in-indent,tabwidth=4\n\n.git*       text export-ignore\n\n*.aidl         text\n*.appxmanifest text\n*.bib          text\n*.c            text\n*.cl           text\n*.conf         text\n*.cpp          text\n*.css_t        text\n*.cu           text\n*.cxx          text\n*.def          text\n*.filelist     text\n*.h            text\n*.hpp          text\n*.htm          text\n*.html         text\n*.hxx          text\n*.i            text\n*.idl          text\n*.java         text\n*.js           text\n*.m            text\n*.mk           text\n*.mm           text\n*.plist        text\n*.properties   text\n*.py           text\n*.qrc          text\n*.qss          text\n*.rc           text\n*.rc.in        text\n*.S            text\n*.sbt          text\n*.scala        text\n*.sty          text\n*.tex          text\n*.txt          text\n*.xaml         text\n\n# reST underlines/overlines can look like conflict markers\n*.rst          text conflict-marker-size=80\n# Markdown heading markers can look like conflict markers\n*.md           text conflict-marker-size=200\n\n*.cmake         text whitespace=tabwidth=2\n*.cmakein       text whitespace=tabwidth=2\n*.in            text whitespace=tabwidth=2\nCMakeLists.txt  text whitespace=tabwidth=2\n\n*.avi       binary\n*.bmp       binary\n*.exr       binary\n*.ico       binary\n*.jpeg      binary\n*.jpg       binary\n*.png       binary\n\n*.a         binary\n*.so        binary\n*.dll       binary\n*.jar       binary\n\n*.pdf       binary\n*.pbxproj   binary\n*.vec       binary\n*.doc       binary\n*.dia       binary\n\n*.xml                      -text whitespace=cr-at-eol\n*.yml                      -text whitespace=cr-at-eol\n.project                   -text whitespace=cr-at-eol merge=union\n.classpath                 -text whitespace=cr-at-eol merge=union\n.cproject                  -text whitespace=cr-at-eol merge=union\norg.eclipse.jdt.core.prefs -text whitespace=cr-at-eol merge=union\n\n*.bat       text eol=crlf\n*.cmd       text eol=crlf\n*.cmd.tmpl  text eol=crlf\n*.dsp       text eol=crlf -whitespace\n*.ps1       text eol=crlf\n*.ps1.in    text eol=crlf\n*.sln       text eol=crlf -whitespace\n*.vcproj    text eol=crlf -whitespace merge=union\n*.vcxproj   text eol=crlf -whitespace merge=union\n\n*.sh        text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.224609375,
          "content": "# ignore dot files/directories\n.*\n!.gitignore\n\n*.autosave\n*.pyc\n*.user\n*~\nThumbs.db\ntags\ntegra/\nbin/\n*.sdf\n*.opensdf\n*.obj\n*.stamp\n*.depend\n*.rule\n*.tmp\n*/debug\n*.suo\n*.log\n*.tlog\nbuild\nnode_modules\nCMakeSettings.json\nxcuserdata/\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 80.8486328125,
          "content": "# ----------------------------------------------------------------------------\n#  Root CMake file for OpenCV\n#\n#    From the off-tree build directory, invoke:\n#      $ cmake <PATH_TO_OPENCV_ROOT>\n#\n# ----------------------------------------------------------------------------\n# Disable in-source builds to prevent source tree corruption.\nif(\" ${CMAKE_SOURCE_DIR}\" STREQUAL \" ${CMAKE_BINARY_DIR}\")\n  message(FATAL_ERROR \"\nFATAL: In-source builds are not allowed.\n       You should create a separate directory for build files.\n\")\nendif()\n\ninclude(cmake/OpenCVMinDepVersions.cmake)\n\nif(CMAKE_SYSTEM_NAME MATCHES WindowsPhone OR CMAKE_SYSTEM_NAME MATCHES WindowsStore)\n  cmake_minimum_required(VERSION 3.1 FATAL_ERROR)\n  #Required to resolve linker error issues due to incompatibility with CMake v3.0+ policies.\n  #CMake fails to find _fseeko() which leads to subsequent linker error.\n  #See details here: http://www.cmake.org/Wiki/CMake/Policies\n  cmake_policy(VERSION 2.8)\nelse()\n  cmake_minimum_required(VERSION \"${MIN_VER_CMAKE}\" FATAL_ERROR)\nendif()\n\n#\n# Configure CMake policies\n#\nif(POLICY CMP0026)\n  cmake_policy(SET CMP0026 NEW)\nendif()\n\nif(POLICY CMP0042)\n  cmake_policy(SET CMP0042 NEW)  # CMake 3.0+ (2.8.12): MacOS \"@rpath\" in target's install name\nendif()\n\nif(POLICY CMP0046)\n  cmake_policy(SET CMP0046 NEW)  # warn about non-existed dependencies\nendif()\n\nif(POLICY CMP0051)\n  cmake_policy(SET CMP0051 NEW)\nendif()\n\nif(POLICY CMP0054)  # CMake 3.1: Only interpret if() arguments as variables or keywords when unquoted.\n  cmake_policy(SET CMP0054 NEW)\nendif()\n\nif(POLICY CMP0056)\n  cmake_policy(SET CMP0056 NEW)  # try_compile(): link flags\nendif()\n\nif(POLICY CMP0057)\n  cmake_policy(SET CMP0057 NEW)  # CMake 3.3: if(IN_LIST) support\nendif()\n\nif(POLICY CMP0066)\n  cmake_policy(SET CMP0066 NEW)  # CMake 3.7: try_compile(): use per-config flags, like CMAKE_CXX_FLAGS_RELEASE\nendif()\n\nif(POLICY CMP0067)\n  cmake_policy(SET CMP0067 NEW)  # CMake 3.8: try_compile(): honor language standard variables (like C++11)\nendif()\n\nif(POLICY CMP0068)\n  cmake_policy(SET CMP0068 NEW)  # CMake 3.9+: `RPATH` settings on macOS do not affect `install_name`.\nendif()\n\nif(POLICY CMP0071)\n  cmake_policy(SET CMP0071 NEW)  # CMake 3.10+: Let `AUTOMOC` and `AUTOUIC` process `GENERATED` files.\nendif()\n\nif(POLICY CMP0075)\n  cmake_policy(SET CMP0075 NEW)  # CMake 3.12+: Include file check macros honor `CMAKE_REQUIRED_LIBRARIES`\nendif()\n\nif(POLICY CMP0077)\n  cmake_policy(SET CMP0077 NEW)  # CMake 3.13+: option() honors normal variables.\nendif()\n\nif(POLICY CMP0091)\n  cmake_policy(SET CMP0091 NEW) # CMake 3.15+: leave MSVC runtime selection out of default CMAKE_<LANG>_FLAGS_<CONFIG> flags\nendif()\n\nif(POLICY CMP0146)\n  cmake_policy(SET CMP0146 OLD)  # CMake 3.27+: use CMake FindCUDA if available.\nendif()\n\nif(POLICY CMP0148)\n  cmake_policy(SET CMP0148 OLD)  # CMake 3.27+: use CMake FindPythonInterp and FindPythonLib if available.\nendif()\n\n#\n# Configure OpenCV CMake hooks\n#\ninclude(cmake/OpenCVUtils.cmake)\nocv_cmake_reset_hooks()\nocv_check_environment_variables(OPENCV_CMAKE_HOOKS_DIR)\nif(DEFINED OPENCV_CMAKE_HOOKS_DIR)\n  foreach(__dir ${OPENCV_CMAKE_HOOKS_DIR})\n    get_filename_component(__dir \"${__dir}\" ABSOLUTE)\n    ocv_cmake_hook_register_dir(${__dir})\n  endforeach()\nendif()\n\nocv_cmake_hook(CMAKE_INIT)\n\n# must go before the project()/enable_language() commands\nocv_update(CMAKE_CONFIGURATION_TYPES \"Debug;Release\" CACHE STRING \"Configs\" FORCE)\nif(NOT DEFINED CMAKE_BUILD_TYPE\n    AND NOT OPENCV_SKIP_DEFAULT_BUILD_TYPE\n)\n  message(STATUS \"'Release' build type is used by default. Use CMAKE_BUILD_TYPE to specify build type (Release or Debug)\")\n  set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Choose the type of build\")\nendif()\nif(DEFINED CMAKE_BUILD_TYPE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"${CMAKE_CONFIGURATION_TYPES}\")\nendif()\n\noption(ENABLE_PIC \"Generate position independent code (necessary for shared libraries)\" TRUE)\nset(CMAKE_POSITION_INDEPENDENT_CODE ${ENABLE_PIC})\n\nocv_cmake_hook(PRE_CMAKE_BOOTSTRAP)\n\n# Bootstrap CMake system: setup CMAKE_SYSTEM_NAME and other vars\n\n# workaround: https://gitlab.kitware.com/cmake/cmake/-/issues/20989\nif(OPENCV_WORKAROUND_CMAKE_20989)\n  set(CMAKE_SYSTEM_PROCESSOR_BACKUP ${CMAKE_SYSTEM_PROCESSOR})\nendif()\n\nproject(OpenCV CXX C)\n\nif(OPENCV_WORKAROUND_CMAKE_20989)\n  set(CMAKE_SYSTEM_PROCESSOR ${CMAKE_SYSTEM_PROCESSOR_BACKUP})\nendif()\n\nenable_testing()\n\nocv_cmake_hook(POST_CMAKE_BOOTSTRAP)\n\nif(NOT OPENCV_SKIP_CMAKE_SYSTEM_FILE)\n  include(\"cmake/platforms/OpenCV-${CMAKE_SYSTEM_NAME}.cmake\" OPTIONAL RESULT_VARIABLE \"OPENCV_CMAKE_SYSTEM_FILE\")\n  if(NOT OPENCV_CMAKE_SYSTEM_FILE)\n    message(STATUS \"OpenCV: system-specific configuration file is not found: '${CMAKE_SYSTEM_NAME}'\")\n  endif()\nendif()\n\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)  # https://cmake.org/cmake/help/latest/variable/CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT.html\n  if(NOT CMAKE_CROSSCOMPILING)\n    if(WIN32)\n      set(CMAKE_INSTALL_PREFIX \"${CMAKE_BINARY_DIR}/install\" CACHE PATH \"Installation Directory\" FORCE)\n    else()\n      set(CMAKE_INSTALL_PREFIX \"/usr/local\" CACHE PATH \"Installation Directory\" FORCE)\n    endif()\n  else()\n    # any cross-compiling\n    set(CMAKE_INSTALL_PREFIX \"${CMAKE_BINARY_DIR}/install\" CACHE PATH \"Installation Directory\" FORCE)\n  endif()\nendif()\n\nif(MSVC)\n  set(CMAKE_USE_RELATIVE_PATHS ON CACHE INTERNAL \"\" FORCE)\nendif()\n\nocv_cmake_eval(DEBUG_PRE ONCE)\n\nocv_clear_vars(OpenCVModules_TARGETS)\n\n# ----------------------------------------------------------------------------\n#  Autodetect if we are in a GIT repository\n# ----------------------------------------------------------------------------\nfind_host_package(Git QUIET)\n\nif(NOT DEFINED OPENCV_VCSVERSION AND GIT_FOUND)\n  ocv_git_describe(OPENCV_VCSVERSION \"${OpenCV_SOURCE_DIR}\")\nelseif(NOT DEFINED OPENCV_VCSVERSION)\n  # We don't have git:\n  set(OPENCV_VCSVERSION \"unknown\")\nendif()\n\ninclude(cmake/OpenCVDownload.cmake)\n\n# ----------------------------------------------------------------------------\n# Detect compiler and target platform architecture\n# ----------------------------------------------------------------------------\ninclude(cmake/OpenCVDetectCXXCompiler.cmake)\nocv_cmake_hook(POST_DETECT_COMPILER)\n\n# ----------------------------------------------------------------------------\n# OpenCV cmake options\n# ----------------------------------------------------------------------------\nset(BUILD_LIST \"\" CACHE STRING \"Build only listed modules (comma-separated, e.g. 'videoio,dnn,ts')\")\nOCV_OPTION(OPENCV_ENABLE_NONFREE \"Enable non-free algorithms\" OFF)\n\n# 3rd party libs\nOCV_OPTION(OPENCV_FORCE_3RDPARTY_BUILD   \"Force using 3rdparty code from source\" OFF)\nOCV_OPTION(BUILD_ZLIB               \"Build zlib from source\"             (WIN32 OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )\nOCV_OPTION(BUILD_TIFF               \"Build libtiff from source\"          (WIN32 OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )\nOCV_OPTION(BUILD_OPENJPEG           \"Build OpenJPEG from source\"         (WIN32 OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )\nOCV_OPTION(BUILD_JASPER             \"Build libjasper from source\"        (WIN32 OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )\nOCV_OPTION(BUILD_JPEG               \"Build libjpeg from source\"          (WIN32 OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )\nOCV_OPTION(BUILD_PNG                \"Build libpng from source\"           (WIN32 OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )\nOCV_OPTION(BUILD_OPENEXR            \"Build openexr from source\"          (OPENCV_FORCE_3RDPARTY_BUILD) )\nOCV_OPTION(BUILD_WEBP               \"Build WebP from source\"             (((WIN32 OR ANDROID OR APPLE) AND NOT WINRT) OR OPENCV_FORCE_3RDPARTY_BUILD) )\nOCV_OPTION(BUILD_TBB                \"Download and build TBB from source\" (ANDROID OR OPENCV_FORCE_3RDPARTY_BUILD) )\nOCV_OPTION(BUILD_IPP_IW             \"Build IPP IW from source\"           (NOT MINGW OR OPENCV_FORCE_3RDPARTY_BUILD) IF (X86_64 OR X86) AND NOT WINRT )\nOCV_OPTION(BUILD_ITT                \"Build Intel ITT from source\"\n    (NOT MINGW OR OPENCV_FORCE_3RDPARTY_BUILD)\n    IF (X86_64 OR X86 OR ARM OR AARCH64 OR PPC64 OR PPC64LE) AND NOT WINRT AND NOT APPLE_FRAMEWORK\n)\n\n# Optional 3rd party components\n# ===================================================\nOCV_OPTION(WITH_1394 \"Include IEEE1394 support\" OFF\n  VISIBLE_IF NOT ANDROID AND NOT IOS AND NOT XROS AND NOT WINRT\n  VERIFY HAVE_DC1394_2)\nOCV_OPTION(WITH_AVFOUNDATION \"Use AVFoundation for Video I/O (iOS/visionOS/Mac)\" ON\n  VISIBLE_IF APPLE\n  VERIFY HAVE_AVFOUNDATION)\nOCV_OPTION(WITH_AVIF \"Enable AVIF support\" ON\n  VERIFY HAVE_AVIF)\nOCV_OPTION(WITH_CAP_IOS \"Enable iOS video capture\" ON\n  VISIBLE_IF IOS\n  VERIFY HAVE_CAP_IOS)\nOCV_OPTION(WITH_CAROTENE \"Use NVidia carotene acceleration library for ARM platform\" (NOT CV_DISABLE_OPTIMIZATION)\n  VISIBLE_IF (ARM OR AARCH64) AND NOT IOS AND NOT XROS)\nOCV_OPTION(WITH_KLEIDICV \"Use KleidiCV library for ARM platforms\" (ANDROID AND AARCH64 AND NOT CV_DISABLE_OPTIMIZATION)\n  VISIBLE_IF (AARCH64 AND (ANDROID OR UNIX AND NOT IOS AND NOT XROS)))\nOCV_OPTION(WITH_NDSRVP \"Use Andes RVP extension\" (NOT CV_DISABLE_OPTIMIZATION)\n  VISIBLE_IF RISCV)\nOCV_OPTION(WITH_HAL_RVV \"Use HAL RVV optimizations\" (NOT CV_DISABLE_OPTIMIZATION)\n  VISIBLE_IF RISCV)\nOCV_OPTION(WITH_FASTCV \"Use Qualcomm FastCV acceleration library for ARM platform\" OFF\n  VISIBLE_IF ((ARM OR AARCH64) AND (ANDROID OR (UNIX AND NOT APPLE AND NOT IOS AND NOT XROS))))\nOCV_OPTION(WITH_CPUFEATURES \"Use cpufeatures Android library\" ON\n  VISIBLE_IF ANDROID\n  VERIFY HAVE_CPUFEATURES)\nOCV_OPTION(WITH_VTK \"Include VTK library support (and build opencv_viz module eiher)\" ON\n  VISIBLE_IF NOT ANDROID AND NOT IOS AND NOT XROS AND NOT WINRT AND NOT CMAKE_CROSSCOMPILING\n  VERIFY HAVE_VTK)\nOCV_OPTION(WITH_CUDA \"Include NVidia Cuda Runtime support\" OFF\n  VISIBLE_IF NOT IOS AND NOT XROS AND NOT WINRT\n  VERIFY HAVE_CUDA)\nOCV_OPTION(WITH_CUFFT \"Include NVidia Cuda Fast Fourier Transform (FFT) library support\" WITH_CUDA\n  VISIBLE_IF WITH_CUDA\n  VERIFY HAVE_CUFFT)\nOCV_OPTION(WITH_CUBLAS \"Include NVidia Cuda Basic Linear Algebra Subprograms (BLAS) library support\" WITH_CUDA\n  VISIBLE_IF WITH_CUDA\n  VERIFY HAVE_CUBLAS)\nOCV_OPTION(WITH_CUDNN \"Include NVIDIA CUDA Deep Neural Network (cuDNN) library support\" WITH_CUDA\n  VISIBLE_IF WITH_CUDA\n  VERIFY HAVE_CUDNN)\nOCV_OPTION(WITH_NVCUVID \"Include NVidia Video Decoding library support\" ON\n  VISIBLE_IF WITH_CUDA\n  VERIFY HAVE_NVCUVID)\nOCV_OPTION(WITH_NVCUVENC \"Include NVidia Video Encoding library support\" ON\n  VISIBLE_IF WITH_CUDA\n  VERIFY HAVE_NVCUVENC)\nOCV_OPTION(WITH_EIGEN \"Include Eigen2/Eigen3 support\" (NOT CV_DISABLE_OPTIMIZATION AND NOT CMAKE_CROSSCOMPILING)\n  VISIBLE_IF NOT WINRT\n  VERIFY HAVE_EIGEN)\nOCV_OPTION(WITH_FFMPEG \"Include FFMPEG support\" (NOT ANDROID)\n  VISIBLE_IF NOT IOS AND NOT XROS AND NOT WINRT\n  VERIFY HAVE_FFMPEG)\nOCV_OPTION(WITH_GSTREAMER \"Include Gstreamer support\" ON\n  VISIBLE_IF NOT ANDROID AND NOT IOS AND NOT XROS AND NOT WINRT\n  VERIFY HAVE_GSTREAMER AND GSTREAMER_VERSION VERSION_GREATER \"0.99\")\nOCV_OPTION(WITH_GTK \"Include GTK support\" ON\n  VISIBLE_IF UNIX AND NOT APPLE AND NOT ANDROID\n  VERIFY HAVE_GTK)\nOCV_OPTION(WITH_GTK_2_X \"Use GTK version 2\" OFF\n  VISIBLE_IF UNIX AND NOT APPLE AND NOT ANDROID\n  VERIFY HAVE_GTK AND NOT HAVE_GTK3)\nOCV_OPTION(WITH_FRAMEBUFFER \"Include framebuffer support\" OFF\n  VISIBLE_IF UNIX AND NOT APPLE AND NOT ANDROID)\nOCV_OPTION(WITH_FRAMEBUFFER_XVFB \"Include virtual framebuffer support\" OFF\n  VISIBLE_IF UNIX AND NOT APPLE AND NOT ANDROID)\nOCV_OPTION(WITH_WAYLAND \"Include Wayland support\" OFF\n        VISIBLE_IF UNIX AND NOT APPLE AND NOT ANDROID\n        VERIFY HAVE_WAYLAND)\nOCV_OPTION(WITH_IPP \"Include Intel IPP support\" (NOT MINGW AND NOT CV_DISABLE_OPTIMIZATION)\n  VISIBLE_IF (X86_64 OR X86) AND NOT WINRT AND NOT IOS AND NOT XROS\n  VERIFY HAVE_IPP)\nOCV_OPTION(WITH_HALIDE \"Include Halide support\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_HALIDE)\nOCV_OPTION(WITH_VULKAN \"Include Vulkan support\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_VULKAN)\n# replacement for deprecated options: WITH_INF_ENGINE, WITH_NGRAPH\nOCV_OPTION(WITH_OPENVINO \"Include Intel OpenVINO toolkit support\" (WITH_INF_ENGINE)\n  VISIBLE_IF TRUE\n  VERIFY TARGET ocv.3rdparty.openvino)\nOCV_OPTION(WITH_WEBNN \"Include WebNN support\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_WEBNN)\nOCV_OPTION(WITH_JASPER \"Include JPEG2K support (Jasper)\" ON\n  VISIBLE_IF NOT IOS AND NOT XROS\n  VERIFY HAVE_JASPER)\nOCV_OPTION(WITH_OPENJPEG \"Include JPEG2K support (OpenJPEG)\" ON\n  VISIBLE_IF NOT IOS AND NOT XROS\n  VERIFY HAVE_OPENJPEG)\nOCV_OPTION(WITH_JPEG \"Include JPEG support\" ON\n  VISIBLE_IF TRUE\n  VERIFY HAVE_JPEG)\nOCV_OPTION(WITH_JPEGXL \"Include JPEG XL support\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_JPEGXL)\nOCV_OPTION(WITH_WEBP \"Include WebP support\" ON\n  VISIBLE_IF NOT WINRT\n  VERIFY HAVE_WEBP)\nOCV_OPTION(WITH_OPENEXR \"Include ILM support via OpenEXR\" ((WIN32 OR ANDROID OR APPLE) OR BUILD_OPENEXR) OR NOT CMAKE_CROSSCOMPILING\n  VISIBLE_IF NOT APPLE_FRAMEWORK AND NOT WINRT\n  VERIFY HAVE_OPENEXR)\nOCV_OPTION(WITH_OPENGL \"Include OpenGL support\" OFF\n  VISIBLE_IF NOT ANDROID AND NOT WINRT\n  VERIFY HAVE_OPENGL)\nOCV_OPTION(WITH_OPENVX \"Include OpenVX support\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_OPENVX)\nOCV_OPTION(WITH_OPENNI \"Include OpenNI support\" OFF\n  VISIBLE_IF NOT ANDROID AND NOT IOS AND NOT XROS AND NOT WINRT\n  VERIFY HAVE_OPENNI)\nOCV_OPTION(WITH_OPENNI2 \"Include OpenNI2 support\" OFF\n  VISIBLE_IF NOT ANDROID AND NOT IOS AND NOT XROS AND NOT WINRT\n  VERIFY HAVE_OPENNI2)\nOCV_OPTION(WITH_PNG \"Include PNG support\" ON\n  VISIBLE_IF TRUE\n  VERIFY HAVE_PNG)\nOCV_OPTION(WITH_SPNG \"Include SPNG support\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_SPNG)\nOCV_OPTION(WITH_GDCM \"Include DICOM support\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_GDCM)\nOCV_OPTION(WITH_PVAPI \"Include Prosilica GigE support\" OFF\n  VISIBLE_IF NOT ANDROID AND NOT IOS AND NOT XROS AND NOT WINRT\n  VERIFY HAVE_PVAPI)\nOCV_OPTION(WITH_ARAVIS \"Include Aravis GigE support\" OFF\n  VISIBLE_IF NOT ANDROID AND NOT IOS AND NOT XROS AND NOT WINRT AND NOT WIN32\n  VERIFY HAVE_ARAVIS_API)\nOCV_OPTION(WITH_QT \"Build with Qt Backend support\" OFF\n  VISIBLE_IF NOT ANDROID AND NOT IOS AND NOT XROS AND NOT WINRT\n  VERIFY HAVE_QT)\nOCV_OPTION(WITH_WIN32UI \"Build with Win32 UI Backend support\" ON\n  VISIBLE_IF WIN32 AND NOT WINRT\n  VERIFY HAVE_WIN32UI)\nOCV_OPTION(WITH_TBB \"Include Intel TBB support\" OFF\n  VISIBLE_IF NOT IOS AND NOT XROS AND NOT WINRT\n  VERIFY HAVE_TBB)\nOCV_OPTION(WITH_HPX \"Include Ste||ar Group HPX support\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_HPX)\nOCV_OPTION(WITH_OPENMP \"Include OpenMP support\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_OPENMP)\nOCV_OPTION(WITH_PTHREADS_PF \"Use pthreads-based parallel_for\" ON\n  VISIBLE_IF NOT WIN32 OR MINGW\n  VERIFY HAVE_PTHREADS_PF)\nOCV_OPTION(WITH_TIFF \"Include TIFF support\" ON\n  VISIBLE_IF NOT IOS AND NOT XROS\n  VERIFY HAVE_TIFF)\nOCV_OPTION(WITH_V4L \"Include Video 4 Linux support\" ON\n  VISIBLE_IF UNIX AND NOT ANDROID AND NOT APPLE\n  VERIFY HAVE_CAMV4L OR HAVE_CAMV4L2 OR HAVE_VIDEOIO)\nOCV_OPTION(WITH_DSHOW \"Build VideoIO with DirectShow support\" ON\n  VISIBLE_IF WIN32 AND NOT ARM AND NOT WINRT\n  VERIFY HAVE_DSHOW)\nOCV_OPTION(WITH_MSMF \"Build VideoIO with Media Foundation support\" NOT MINGW\n  VISIBLE_IF WIN32\n  VERIFY HAVE_MSMF)\nOCV_OPTION(WITH_MSMF_DXVA \"Enable hardware acceleration in Media Foundation backend\" WITH_MSMF\n  VISIBLE_IF WIN32\n  VERIFY HAVE_MSMF_DXVA)\nOCV_OPTION(WITH_XIMEA \"Include XIMEA cameras support\" OFF\n  VISIBLE_IF NOT ANDROID AND NOT WINRT\n  VERIFY HAVE_XIMEA)\nOCV_OPTION(WITH_UEYE \"Include UEYE camera support\" OFF\n  VISIBLE_IF NOT ANDROID AND NOT APPLE AND NOT WINRT\n  VERIFY HAVE_UEYE)\nOCV_OPTION(WITH_XINE \"Include Xine support (GPL)\" OFF\n  VISIBLE_IF UNIX AND NOT APPLE AND NOT ANDROID\n  VERIFY HAVE_XINE)\nOCV_OPTION(WITH_CLP \"Include Clp support (EPL)\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_CLP)\nOCV_OPTION(WITH_OPENCL \"Include OpenCL Runtime support\" (NOT ANDROID AND NOT CV_DISABLE_OPTIMIZATION)\n  VISIBLE_IF NOT IOS AND NOT XROS AND NOT WINRT\n  VERIFY HAVE_OPENCL)\nOCV_OPTION(WITH_OPENCL_SVM \"Include OpenCL Shared Virtual Memory support\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_OPENCL_SVM) # experimental\nOCV_OPTION(WITH_OPENCLAMDFFT \"Include AMD OpenCL FFT library support\" ON\n  VISIBLE_IF NOT ANDROID AND NOT IOS AND NOT XROS AND NOT WINRT\n  VERIFY HAVE_CLAMDFFT)\nOCV_OPTION(WITH_OPENCLAMDBLAS \"Include AMD OpenCL BLAS library support\" ON\n  VISIBLE_IF NOT ANDROID AND NOT IOS AND NOT XROS AND NOT WINRT\n  VERIFY HAVE_CLAMDBLAS)\nOCV_OPTION(WITH_DIRECTX \"Include DirectX support\" ON\n  VISIBLE_IF WIN32 AND NOT WINRT\n  VERIFY HAVE_DIRECTX)\nOCV_OPTION(WITH_DIRECTML \"Include DirectML support\" ON\n  VISIBLE_IF WIN32 AND NOT WINRT\n  VERIFY HAVE_DIRECTML)\nOCV_OPTION(WITH_OPENCL_D3D11_NV \"Include NVIDIA OpenCL D3D11 support\" WITH_DIRECTX\n  VISIBLE_IF WIN32 AND NOT WINRT\n  VERIFY HAVE_OPENCL_D3D11_NV)\nOCV_OPTION(WITH_LIBREALSENSE \"Include Intel librealsense support\" OFF\n  VISIBLE_IF NOT WITH_INTELPERC\n  VERIFY HAVE_LIBREALSENSE)\nOCV_OPTION(WITH_VA \"Include VA support\" (X86_64 OR X86)\n  VISIBLE_IF UNIX AND NOT APPLE AND NOT ANDROID\n  VERIFY HAVE_VA)\nOCV_OPTION(WITH_VA_INTEL \"Include Intel VA-API/OpenCL support\" (X86_64 OR X86)\n  VISIBLE_IF UNIX AND NOT APPLE AND NOT ANDROID\n  VERIFY HAVE_VA_INTEL)\nOCV_OPTION(WITH_MFX \"Include Intel Media SDK support\" OFF\n  VISIBLE_IF (UNIX AND NOT ANDROID) OR (WIN32 AND NOT WINRT AND NOT MINGW)\n  VERIFY HAVE_MFX)\nOCV_OPTION(WITH_GDAL \"Include GDAL Support\" OFF\n  VISIBLE_IF NOT ANDROID AND NOT IOS AND NOT XROS AND NOT WINRT\n  VERIFY HAVE_GDAL)\nOCV_OPTION(WITH_GPHOTO2 \"Include gPhoto2 library support\" OFF\n  VISIBLE_IF UNIX AND NOT ANDROID AND NOT IOS AND NOT XROS\n  VERIFY HAVE_GPHOTO2)\nOCV_OPTION(WITH_LAPACK \"Include Lapack library support\" (NOT CV_DISABLE_OPTIMIZATION)\n  VISIBLE_IF NOT ANDROID AND NOT IOS AND NOT XROS\n  VERIFY HAVE_LAPACK)\nOCV_OPTION(WITH_ITT \"Include Intel ITT support\" ON\n  VISIBLE_IF NOT APPLE_FRAMEWORK\n  VERIFY HAVE_ITT)\nOCV_OPTION(WITH_PROTOBUF \"Enable libprotobuf\" ON\n  VISIBLE_IF TRUE\n  VERIFY HAVE_PROTOBUF)\nOCV_OPTION(WITH_IMGCODEC_GIF \"Include GIF support\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_IMGCODEC_GIF)\nOCV_OPTION(WITH_IMGCODEC_HDR \"Include HDR support\" ON\n  VISIBLE_IF TRUE\n  VERIFY HAVE_IMGCODEC_HDR)\nOCV_OPTION(WITH_IMGCODEC_SUNRASTER \"Include SUNRASTER support\" ON\n  VISIBLE_IF TRUE\n  VERIFY HAVE_IMGCODEC_SUNRASTER)\nOCV_OPTION(WITH_IMGCODEC_PXM \"Include PNM (PBM,PGM,PPM) and PAM formats support\" ON\n  VISIBLE_IF TRUE\n  VERIFY HAVE_IMGCODEC_PXM)\nOCV_OPTION(WITH_IMGCODEC_PFM \"Include PFM formats support\" ON\n  VISIBLE_IF TRUE\n  VERIFY HAVE_IMGCODEC_PFM)\nOCV_OPTION(WITH_QUIRC \"Include library QR-code decoding\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_QUIRC)\nOCV_OPTION(WITH_ANDROID_MEDIANDK \"Use Android Media NDK for Video I/O (Android)\" (ANDROID_NATIVE_API_LEVEL GREATER 20)\n  VISIBLE_IF ANDROID\n  VERIFY HAVE_ANDROID_MEDIANDK)\nOCV_OPTION(WITH_ANDROID_NATIVE_CAMERA \"Use Android NDK for Camera I/O (Android)\" (ANDROID_NATIVE_API_LEVEL GREATER 23)\n  VISIBLE_IF ANDROID\n  VERIFY HAVE_ANDROID_NATIVE_CAMERA)\nOCV_OPTION(WITH_ONNX \"Include Microsoft ONNX Runtime support\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_ONNX)\nOCV_OPTION(WITH_TIMVX \"Include Tim-VX support\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_TIMVX)\n# Attention when OBSENSOR_USE_ORBBEC_SDK set to off:\n#   Astra2 cameras currently only support Windows and Linux kernel versions no higher than 4.15, and higher versions of Linux kernel may have exceptions.\nOCV_OPTION(OBSENSOR_USE_ORBBEC_SDK \"Use Orbbec SDK as backend to support more camera models and platforms (force to ON on MacOS)\" OFF)\nOCV_OPTION(WITH_OBSENSOR \"Include obsensor support (Orbbec 3D Cameras)\" ON\n  VISIBLE_IF (WIN32 AND NOT ARM AND NOT WINRT AND NOT MINGW) OR ( UNIX AND NOT APPLE AND NOT ANDROID) OR (APPLE AND AARCH64 AND NOT IOS)\n  VERIFY HAVE_OBSENSOR)\nOCV_OPTION(WITH_CANN \"Include CANN support\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_CANN)\nOCV_OPTION(WITH_FLATBUFFERS \"Include Flatbuffers support (required by DNN/TFLite importer)\" ON\n  VISIBLE_IF TRUE\n  VERIFY HAVE_FLATBUFFERS)\nOCV_OPTION(WITH_ZLIB_NG \"Use zlib-ng instead of zlib\" OFF\n  VISIBLE_IF TRUE\n  VERIFY HAVE_ZLIB_NG)\n\n# OpenCV build components\n# ===================================================\nOCV_OPTION(BUILD_SHARED_LIBS        \"Build shared libraries (.dll/.so) instead of static ones (.lib/.a)\" NOT (ANDROID OR APPLE_FRAMEWORK) )\nOCV_OPTION(BUILD_opencv_apps        \"Build utility applications (used for example to train classifiers)\" (NOT ANDROID AND NOT WINRT) IF (NOT APPLE_FRAMEWORK) )\nOCV_OPTION(BUILD_opencv_js          \"Build JavaScript bindings by Emscripten\" OFF )\nOCV_OPTION(BUILD_ANDROID_PROJECTS   \"Build Android projects providing .apk files\" ON  IF ANDROID )\nOCV_OPTION(BUILD_ANDROID_EXAMPLES   \"Build examples for Android platform\"         ON  IF ANDROID )\nOCV_OPTION(BUILD_DOCS               \"Create build rules for OpenCV Documentation\" OFF  IF (NOT WINRT AND NOT APPLE_FRAMEWORK))\nOCV_OPTION(BUILD_EXAMPLES           \"Build all examples\"                          OFF )\nOCV_OPTION(BUILD_PACKAGE            \"Enables 'make package_source' command\"       ON  IF NOT WINRT)\nOCV_OPTION(BUILD_PERF_TESTS         \"Build performance tests\"                     NOT INSTALL_CREATE_DISTRIB  IF (NOT APPLE_FRAMEWORK) )\nOCV_OPTION(BUILD_TESTS              \"Build accuracy & regression tests\"           NOT INSTALL_CREATE_DISTRIB  IF (NOT APPLE_FRAMEWORK) )\nOCV_OPTION(BUILD_WITH_DEBUG_INFO    \"Include debug info into release binaries ('OFF' means default settings)\" OFF )\nOCV_OPTION(BUILD_WITH_STATIC_CRT    \"Enables use of statically linked CRT for statically linked OpenCV\" ON IF MSVC )\nOCV_OPTION(BUILD_WITH_DYNAMIC_IPP   \"Enables dynamic linking of IPP (only for standalone IPP)\" OFF )\nOCV_OPTION(BUILD_FAT_JAVA_LIB       \"Create Java wrapper exporting all functions of OpenCV library (requires static build of OpenCV modules)\" ANDROID IF NOT BUILD_SHARED_LIBS)\nOCV_OPTION(BUILD_ANDROID_SERVICE    \"Build OpenCV Manager for Google Play\" OFF IF ANDROID )\nOCV_OPTION(BUILD_CUDA_STUBS         \"Build CUDA modules stubs when no CUDA SDK\" OFF  IF (NOT APPLE_FRAMEWORK) )\nOCV_OPTION(BUILD_JAVA               \"Enable Java support\"                         (ANDROID OR NOT CMAKE_CROSSCOMPILING)  IF (ANDROID OR (NOT APPLE_FRAMEWORK AND NOT WINRT)) )\nOCV_OPTION(BUILD_OBJC               \"Enable Objective-C support\"                  ON  IF APPLE_FRAMEWORK )\nOCV_OPTION(BUILD_KOTLIN_EXTENSIONS  \"Build Kotlin extensions (Android)\"           ON  IF ANDROID )\n\n# OpenCV installation options\n# ===================================================\nOCV_OPTION(INSTALL_CREATE_DISTRIB   \"Change install rules to build the distribution package\" OFF )\nOCV_OPTION(INSTALL_BIN_EXAMPLES     \"Install prebuilt examples\" WIN32 IF BUILD_EXAMPLES)\nOCV_OPTION(INSTALL_C_EXAMPLES       \"Install C examples\"        OFF )\nOCV_OPTION(INSTALL_PYTHON_EXAMPLES  \"Install Python examples\"   OFF )\nOCV_OPTION(INSTALL_ANDROID_EXAMPLES \"Install Android examples\"  OFF IF ANDROID )\nOCV_OPTION(INSTALL_TO_MANGLED_PATHS \"Enables mangled install paths, that help with side by side installs.\" OFF IF (UNIX AND NOT ANDROID AND NOT APPLE_FRAMEWORK AND BUILD_SHARED_LIBS) )\nOCV_OPTION(INSTALL_TESTS            \"Install accuracy and performance test binaries and test data\" OFF)\n\n# OpenCV build options\n# ===================================================\nOCV_OPTION(ENABLE_CCACHE              \"Use ccache\"                                               (UNIX AND (CMAKE_GENERATOR MATCHES \"Makefile\" OR CMAKE_GENERATOR MATCHES \"Ninja\" OR CMAKE_GENERATOR MATCHES \"Xcode\")) )\nOCV_OPTION(ENABLE_PRECOMPILED_HEADERS \"Use precompiled headers\"                                  MSVC IF (MSVC OR (NOT IOS AND NOT XROS AND NOT CMAKE_CROSSCOMPILING) ) )\nOCV_OPTION(ENABLE_DELAYLOAD           \"Enable delayed loading of OpenCV DLLs\"                    OFF VISIBLE_IF MSVC AND BUILD_SHARED_LIBS)\nOCV_OPTION(ENABLE_SOLUTION_FOLDERS    \"Solution folder in Visual Studio or in other IDEs\"        (MSVC_IDE OR CMAKE_GENERATOR MATCHES Xcode) )\nOCV_OPTION(ENABLE_PROFILING           \"Enable profiling in the GCC compiler (Add flags: -g -pg)\" OFF  IF CV_GCC )\nOCV_OPTION(ENABLE_COVERAGE            \"Enable coverage collection with  GCov\"                    OFF  IF CV_GCC )\nOCV_OPTION(OPENCV_ENABLE_MEMORY_SANITIZER \"Better support for memory/address sanitizers\"         OFF)\nOCV_OPTION(ENABLE_OMIT_FRAME_POINTER  \"Enable -fomit-frame-pointer for GCC\"                      ON   IF CV_GCC )\nOCV_OPTION(ENABLE_POWERPC             \"Enable PowerPC for GCC\"                                   ON   IF (CV_GCC AND CMAKE_SYSTEM_PROCESSOR MATCHES powerpc.*) )\nOCV_OPTION(ENABLE_FAST_MATH           \"Enable compiler options for fast math optimizations on FP computations (not recommended)\" OFF)\nOCV_OPTION(ENABLE_NOISY_WARNINGS      \"Show all warnings even if they are too noisy\"             OFF )\nOCV_OPTION(OPENCV_WARNINGS_ARE_ERRORS \"Treat warnings as errors\"                                 OFF )\nOCV_OPTION(ANDROID_EXAMPLES_WITH_LIBS \"Build binaries of Android examples with native libraries\" OFF  IF ANDROID )\nOCV_OPTION(ENABLE_IMPL_COLLECTION     \"Collect implementation data on function call\"             OFF )\nOCV_OPTION(ENABLE_INSTRUMENTATION     \"Instrument functions to collect calls trace and performance\" OFF )\nOCV_OPTION(ENABLE_GNU_STL_DEBUG       \"Enable GNU STL Debug mode (defines _GLIBCXX_DEBUG)\"       OFF IF CV_GCC )\nOCV_OPTION(ENABLE_BUILD_HARDENING     \"Enable hardening of the resulting binaries (against security attacks, detects memory corruption, etc)\" OFF)\nOCV_OPTION(ENABLE_LTO                 \"Enable Link Time Optimization\" OFF IF CV_GCC OR MSVC)\nOCV_OPTION(ENABLE_THIN_LTO            \"Enable Thin LTO\" OFF IF CV_CLANG)\nOCV_OPTION(GENERATE_ABI_DESCRIPTOR    \"Generate XML file for abi_compliance_checker tool\" OFF IF UNIX)\nOCV_OPTION(OPENCV_GENERATE_PKGCONFIG  \"Generate .pc file for pkg-config build tool (deprecated)\" OFF)\nOCV_OPTION(CV_ENABLE_INTRINSICS       \"Use intrinsic-based optimized code\" ON )\nOCV_OPTION(CV_DISABLE_OPTIMIZATION    \"Disable explicit optimized code (dispatched code/intrinsics/loop unrolling/etc)\" OFF )\nOCV_OPTION(CV_TRACE                   \"Enable OpenCV code trace\" ON)\nOCV_OPTION(OPENCV_GENERATE_SETUPVARS  \"Generate setup_vars* scripts\" ON IF (NOT ANDROID AND NOT APPLE_FRAMEWORK) )\nOCV_OPTION(ENABLE_CONFIG_VERIFICATION \"Fail build if actual configuration doesn't match requested (WITH_XXX != HAVE_XXX)\" OFF)\nOCV_OPTION(OPENCV_ENABLE_MEMALIGN     \"Enable posix_memalign or memalign usage\" ON)\nOCV_OPTION(OPENCV_DISABLE_FILESYSTEM_SUPPORT \"Disable filesystem support\" OFF)\nOCV_OPTION(OPENCV_DISABLE_THREAD_SUPPORT \"Build the library without multi-threaded code.\" OFF)\nOCV_OPTION(OPENCV_DISABLE_ENV_SUPPORT \"Disable environment variables access (getenv)\" (CMAKE_SYSTEM_NAME MATCHES \"Windows(CE|Phone|Store)\"))\nOCV_OPTION(OPENCV_SEMIHOSTING         \"Build the library for semihosting target (Arm). See https://developer.arm.com/documentation/100863/latest.\" OFF)\nOCV_OPTION(ENABLE_CUDA_FIRST_CLASS_LANGUAGE \"Enable CUDA as a first class language, if enabled dependant projects will need to use CMake >= 3.18\" OFF\n  VISIBLE_IF (WITH_CUDA AND NOT CMAKE_VERSION VERSION_LESS 3.18)\n  VERIFY HAVE_CUDA)\n\nOCV_OPTION(ENABLE_PYLINT              \"Add target with Pylint checks\"                            (BUILD_DOCS OR BUILD_EXAMPLES) IF (NOT CMAKE_CROSSCOMPILING AND NOT APPLE_FRAMEWORK) )\nOCV_OPTION(ENABLE_FLAKE8              \"Add target with Python flake8 checker\"                    (BUILD_DOCS OR BUILD_EXAMPLES) IF (NOT CMAKE_CROSSCOMPILING AND NOT APPLE_FRAMEWORK) )\n\nif(ENABLE_IMPL_COLLECTION)\n  add_definitions(-DCV_COLLECT_IMPL_DATA)\nendif()\n\nif(OPENCV_DISABLE_FILESYSTEM_SUPPORT)\n  add_definitions(-DOPENCV_HAVE_FILESYSTEM_SUPPORT=0)\nendif()\n\n# MathJax is used for math rendering by both Doxygen HTML and JavaDoc, so\n# this var have to be defined before \"modules\" AND \"doc\" are processed\nset(OPENCV_MATHJAX_RELPATH \"https://cdn.jsdelivr.net/npm/mathjax@3.0.1\" CACHE STRING \"URI to a MathJax installation\")\n\n# ----------------------------------------------------------------------------\n#  Get actual OpenCV version number from sources\n# ----------------------------------------------------------------------------\ninclude(cmake/OpenCVVersion.cmake)\n\nocv_cmake_hook(POST_OPTIONS)\n\n# ----------------------------------------------------------------------------\n#  Build & install layouts\n# ----------------------------------------------------------------------------\n\nif(OPENCV_TEST_DATA_PATH)\n  get_filename_component(OPENCV_TEST_DATA_PATH ${OPENCV_TEST_DATA_PATH} ABSOLUTE)\nendif()\n\n# Save libs and executables in the same place\nset(EXECUTABLE_OUTPUT_PATH \"${CMAKE_BINARY_DIR}/bin\" CACHE PATH \"Output directory for applications\")\n\nif(ANDROID)\n  set(LIBRARY_OUTPUT_PATH                \"${OpenCV_BINARY_DIR}/lib/${ANDROID_NDK_ABI_NAME}\")\n  ocv_update(3P_LIBRARY_OUTPUT_PATH      \"${OpenCV_BINARY_DIR}/3rdparty/lib/${ANDROID_NDK_ABI_NAME}\")\nelse()\n  set(LIBRARY_OUTPUT_PATH                \"${OpenCV_BINARY_DIR}/lib\")\n  ocv_update(3P_LIBRARY_OUTPUT_PATH      \"${OpenCV_BINARY_DIR}/3rdparty/lib\")\nendif()\n\nif(ANDROID)\n  if(ANDROID_ABI MATCHES \"NEON\")\n    set(ENABLE_NEON ON)\n  endif()\n  if(ANDROID_ABI MATCHES \"VFPV3\")\n    set(ENABLE_VFPV3 ON)\n  endif()\nendif()\n\nif(WIN32)\n  # Postfix of DLLs:\n  ocv_update(OPENCV_DLLVERSION \"${OPENCV_VERSION_MAJOR}${OPENCV_VERSION_MINOR}${OPENCV_VERSION_PATCH}\")\n  ocv_update(OPENCV_DEBUG_POSTFIX d)\nelse()\n  # Postfix of so's:\n  ocv_update(OPENCV_DLLVERSION \"\")\n  ocv_update(OPENCV_DEBUG_POSTFIX \"\")\nendif()\n\nif(DEFINED CMAKE_DEBUG_POSTFIX)\n  set(OPENCV_DEBUG_POSTFIX \"${CMAKE_DEBUG_POSTFIX}\")\nendif()\n\nif((INSTALL_CREATE_DISTRIB AND BUILD_SHARED_LIBS AND NOT DEFINED BUILD_opencv_world) OR APPLE_FRAMEWORK)\n  set(BUILD_opencv_world ON CACHE INTERNAL \"\")\nendif()\n\ninclude(cmake/OpenCVInstallLayout.cmake)\n\n# ----------------------------------------------------------------------------\n#  Path for build/platform -specific headers\n# ----------------------------------------------------------------------------\nocv_update(OPENCV_CONFIG_FILE_INCLUDE_DIR \"${CMAKE_BINARY_DIR}/\" CACHE PATH \"Where to create the platform-dependant cvconfig.h\")\nocv_include_directories(${OPENCV_CONFIG_FILE_INCLUDE_DIR})\n\n# ----------------------------------------------------------------------------\n#  Path for additional modules\n# ----------------------------------------------------------------------------\nset(OPENCV_EXTRA_MODULES_PATH \"\" CACHE PATH \"Where to look for additional OpenCV modules (can be ;-separated list of paths)\")\n\n# ----------------------------------------------------------------------------\n# OpenCV compiler and linker options\n# ----------------------------------------------------------------------------\n\nocv_cmake_hook(POST_CMAKE_BUILD_OPTIONS)\n\n# --- Python Support ---\nif(NOT IOS AND NOT XROS)\n  include(cmake/OpenCVDetectPython.cmake)\nendif()\n\ninclude(cmake/OpenCVCompilerOptions.cmake)\n\nocv_cmake_hook(POST_COMPILER_OPTIONS)\n\n# --- CUDA Support ---\nif(ENABLE_CUDA_FIRST_CLASS_LANGUAGE)\n  if(CMAKE_VERSION VERSION_LESS 3.18)\n    message(WARNING \"CUDA: First class language only supported for CMake versions >= 3.18, falling back to FindCUDA!\")\n    set(ENABLE_CUDA_FIRST_CLASS_LANGUAGE OFF CACHE BOOL \"Enable CUDA as a first class language, if enabled dependant projects will need to use CMake >= 3.18\" FORCE)\n  else()\n\n    # Check CUDA_PATH if supplied\n    if(UNIX AND CUDA_PATH AND NOT ENV{CUDA_PATH})\n      set(ENV{CUDA_PATH} ${CUDA_PATH})\n    elseif(WIN32 AND CUDA_PATH)\n      set(ENV{PATH} \"${CUDA_PATH}\\\\bin\\;$ENV{PATH}\")\n    endif()\n    include(CheckLanguage)\n    check_language(CUDA)\n\n    # Fallback to checking default locations\n    if(NOT CMAKE_CUDA_COMPILER)\n      # Checking windows default search location isn't possible because the CUDA Toolkit is installed to C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/vXX.X\n      if(WIN32)\n        if(CMAKE_GENERATOR MATCHES \"Visual Studio\")\n          message(STATUS \"CUDA: Not detected, when using stand alone installations with the Visual Studio generator the path to the CUDA toolkit should be manually specified with -Tcuda=. e.g. -Tcuda=\\\"C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/vXX.X\\\"\")\n        else()\n          message(STATUS \"CUDA: Not detected, for stand alone installations the path to the CUDA toolkit should be manually specified with -DCUDA_PATH=. e.g. -DCUDA_PATH=\\\"C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/vXX.X\\\"\")\n        endif()\n      elseif(UNIX)\n        message(STATUS \"CUDA: Not detected, make sure you have performed the mandatory Post-installation actions described in the CUDA installation guide.\\n   For stand alone installations you can set the CUDA_PATH environmental or CMake variable. e.g. export CUDA_PATH=/usr/local/cuda-XX.X or -DCUDA_PATH=/usr/local/cuda-XX.X.\")\n        message(STATUS \"CUDA: Falling back to searching for the CUDA compiler in its default location (/usr/local/cuda)\")\n        set(CUDA_PATH \"/usr/local/cuda\" CACHE INTERNAL \"\")\n        set(ENV{CUDA_PATH} ${CUDA_PATH})\n        unset(CMAKE_CUDA_COMPILER CACHE)\n        unset(CMAKE_CUDA_COMPILER)\n        check_language(CUDA)\n      endif()\n    endif()\n\n    cmake_policy(SET CMP0092 NEW) # CMake 3.15+: leave warning flags out of default CMAKE_<LANG>_FLAGS flags.\n    if(CMAKE_CUDA_COMPILER)\n      if(CMAKE_CUDA_ARCHITECTURES)\n        set(USER_DEFINED_CMAKE_CUDA_ARCHITECTURES TRUE)\n      endif()\n      enable_language(CUDA)\n      if(NOT USER_DEFINED_CMAKE_CUDA_ARCHITECTURES)\n        set(CMAKE_CUDA_ARCHITECTURES \"\")\n      endif()\n    elseif(UNIX)\n      message(WARNING \"CUDA: Not detected!  If you are not using the default host compiler (g++) then you need to specify both CMAKE_CUDA_HOST_COMPILER and CMAKE_CUDA_COMPILER. e.g. -DCMAKE_CUDA_HOST_COMPILER=/usr/bin/clang++ -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc.\")\n    endif()\n  endif()\nendif()\n\n# ----------------------------------------------------------------------------\n#       CHECK FOR SYSTEM LIBRARIES, OPTIONS, ETC..\n# ----------------------------------------------------------------------------\nif(UNIX OR MINGW)\n  if(NOT APPLE_FRAMEWORK OR OPENCV_ENABLE_PKG_CONFIG)\n    if(CMAKE_CROSSCOMPILING AND NOT DEFINED ENV{PKG_CONFIG_LIBDIR} AND NOT DEFINED ENV{PKG_CONFIG_SYSROOT_DIR}\n        AND NOT OPENCV_ENABLE_PKG_CONFIG\n    )\n      if(NOT PkgConfig_FOUND)\n        message(STATUS \"OpenCV disables pkg-config to avoid using of host libraries. Consider using PKG_CONFIG_LIBDIR to specify target SYSROOT\")\n      elseif(OPENCV_SKIP_PKG_CONFIG_WARNING)\n        message(WARNING \"pkg-config is enabled in cross-compilation mode without defining of PKG_CONFIG_LIBDIR environment variable. This may lead to misconfigured host-based dependencies.\")\n      endif()\n    elseif(OPENCV_DISABLE_PKG_CONFIG)\n      if(PkgConfig_FOUND)\n        message(WARNING \"OPENCV_DISABLE_PKG_CONFIG flag has no effect\")\n      endif()\n    else()\n      find_package(PkgConfig QUIET)\n    endif()\n  endif()\n  include(CheckFunctionExists)\n  include(CheckIncludeFile)\n  include(CheckSymbolExists)\n\n  if(NOT APPLE)\n    CHECK_INCLUDE_FILE(pthread.h HAVE_PTHREAD)\n    if(ANDROID)\n      set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} dl m log)\n    elseif(CMAKE_SYSTEM_NAME MATCHES \"FreeBSD|NetBSD|DragonFly|OpenBSD|Haiku\")\n      set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} m pthread)\n    elseif(EMSCRIPTEN)\n      # no need to link to system libs with emscripten\n    elseif(QNXNTO)\n      set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} m regex)\n    elseif(MINGW)\n      set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} pthread)\n    else()\n      set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} dl m pthread rt)\n    endif()\n  else()\n    set(HAVE_PTHREAD 1)\n  endif()\n\n  # Ensure that libpthread is not listed as one of the libraries to pass to the linker.\n  if (OPENCV_DISABLE_THREAD_SUPPORT)\n    list(REMOVE_ITEM OPENCV_LINKER_LIBS pthread)\n  endif()\n\n  if(OPENCV_ENABLE_MEMALIGN)\n    CHECK_SYMBOL_EXISTS(posix_memalign stdlib.h HAVE_POSIX_MEMALIGN)\n    CHECK_INCLUDE_FILE(malloc.h HAVE_MALLOC_H)\n    if(HAVE_MALLOC_H)\n      CHECK_SYMBOL_EXISTS(memalign malloc.h HAVE_MEMALIGN)\n    endif()\n    # TODO:\n    # - std::aligned_alloc() C++17 / C11\n  endif()\nelseif(WIN32)\n  include(CheckIncludeFile)\n  include(CheckSymbolExists)\n\n  if(OPENCV_ENABLE_MEMALIGN)\n    CHECK_INCLUDE_FILE(malloc.h HAVE_MALLOC_H)\n    if(HAVE_MALLOC_H)\n      CHECK_SYMBOL_EXISTS(_aligned_malloc malloc.h HAVE_WIN32_ALIGNED_MALLOC)\n    endif()\n  endif()\nendif()\n\nif(DEFINED OPENCV_ALGO_HINT_DEFAULT)\n  if(NOT OPENCV_ALGO_HINT_DEFAULT STREQUAL \"ALGO_HINT_ACCURATE\" AND\n     NOT OPENCV_ALGO_HINT_DEFAULT STREQUAL \"ALGO_HINT_APPROX\")\n    message(FATAL_ERROR \"OPENCV_ALGO_HINT_DEFAULT should be one of ALGO_HINT_ACCURATE or ALGO_HINT_APPROX.\")\n  endif()\nendif()\n\ninclude(cmake/OpenCVPCHSupport.cmake)\ninclude(cmake/OpenCVModule.cmake)\n\n# ----------------------------------------------------------------------------\n#  Detect endianness of build platform\n# ----------------------------------------------------------------------------\n\nif(IOS OR XROS)\n  # test_big_endian needs try_compile, which doesn't work for iOS\n  # http://public.kitware.com/Bug/view.php?id=12288\n  set(WORDS_BIGENDIAN 0)\nelse()\n  include(TestBigEndian)\n  test_big_endian(WORDS_BIGENDIAN)\nendif()\n\n# ----------------------------------------------------------------------------\n#  Detect 3rd-party libraries\n# ----------------------------------------------------------------------------\n\nif(ANDROID AND WITH_CPUFEATURES)\n  add_subdirectory(3rdparty/cpufeatures)\n  set(HAVE_CPUFEATURES 1)\nendif()\n\ninclude(cmake/OpenCVFindFrameworks.cmake)\n\ninclude(cmake/OpenCVFindLibsGrfmt.cmake)\ninclude(cmake/OpenCVFindLibsGUI.cmake)\ninclude(cmake/OpenCVFindLibsVideo.cmake)\ninclude(cmake/OpenCVFindLibsPerf.cmake)\ninclude(cmake/OpenCVFindLAPACK.cmake)\ninclude(cmake/OpenCVFindProtobuf.cmake)\ninclude(cmake/OpenCVDetectFlatbuffers.cmake)\nif(WITH_TIMVX)\n  include(cmake/OpenCVFindTIMVX.cmake)\nendif()\nif(WITH_CANN)\n  include(cmake/OpenCVFindCANN.cmake)\nendif()\n\n# ----------------------------------------------------------------------------\n#  Detect other 3rd-party libraries/tools\n# ----------------------------------------------------------------------------\n\n# --- Java Support ---\nif(BUILD_JAVA)\n  if(ANDROID)\n    include(cmake/android/OpenCVDetectAndroidSDK.cmake)\n  else()\n    include(cmake/OpenCVDetectApacheAnt.cmake)\n    if(ANT_EXECUTABLE AND NOT OPENCV_JAVA_IGNORE_ANT)\n      ocv_update(OPENCV_JAVA_SDK_BUILD_TYPE \"ANT\")\n    elseif(NOT ANDROID)\n      find_package(Java)\n      if(Java_FOUND)\n        include(UseJava)\n        ocv_update(OPENCV_JAVA_SDK_BUILD_TYPE \"JAVA\")\n      endif()\n    endif()\n    find_package(JNI)\n  endif()\nendif()\n\nif(ENABLE_PYLINT AND PYTHON_DEFAULT_AVAILABLE)\n  include(cmake/OpenCVPylint.cmake)\nendif()\nif(ENABLE_FLAKE8 AND PYTHON_DEFAULT_AVAILABLE)\n  find_package(Flake8 QUIET)\n  if(NOT FLAKE8_FOUND OR NOT FLAKE8_EXECUTABLE)\n    include(\"${CMAKE_CURRENT_LIST_DIR}/cmake/FindFlake8.cmake\")\n  endif()\n  if(FLAKE8_FOUND)\n    list(APPEND OPENCV_FLAKE8_EXCLUDES \".git\" \"__pycache__\" \"config.py\" \"*.config.py\" \"config-*.py\")\n    list(APPEND OPENCV_FLAKE8_EXCLUDES \"svgfig.py\")  # 3rdparty\n    if(NOT PYTHON3_VERSION_STRING VERSION_GREATER 3.6)\n      # Python 3.6+ (PEP 526): variable annotations (type hints)\n      list(APPEND OPENCV_FLAKE8_EXCLUDES \"samples/dnn/dnn_model_runner/dnn_conversion/common/test/configs\")\n    endif()\n    string(REPLACE \";\" \",\" OPENCV_FLAKE8_EXCLUDES_STR \"${OPENCV_FLAKE8_EXCLUDES}\")\n    add_custom_target(check_flake8\n        COMMAND \"${FLAKE8_EXECUTABLE}\" . --count --select=E9,E901,E999,F821,F822,F823 --show-source --statistics --exclude='${OPENCV_FLAKE8_EXCLUDES_STR}'\n        WORKING_DIRECTORY \"${OpenCV_SOURCE_DIR}\"\n        COMMENT \"Running flake8\"\n    )\n  endif()\nendif()\n\n\nif(ANDROID AND ANDROID_EXECUTABLE AND ANT_EXECUTABLE AND (ANT_VERSION VERSION_GREATER 1.7) AND (ANDROID_TOOLS_Pkg_Revision GREATER 13))\n  SET(CAN_BUILD_ANDROID_PROJECTS TRUE)\nelse()\n  SET(CAN_BUILD_ANDROID_PROJECTS FALSE)\nendif()\n\n# --- OpenCL ---\nif(WITH_OPENCL)\n  include(cmake/OpenCVDetectOpenCL.cmake)\nendif()\n\n# --- Halide ---\nif(WITH_HALIDE)\n  include(cmake/OpenCVDetectHalide.cmake)\nendif()\n\n# --- VkCom ---\nif(WITH_VULKAN)\n  include(cmake/OpenCVDetectVulkan.cmake)\nendif()\n\n# --- WebNN ---\nif(WITH_WEBNN)\n  include(cmake/OpenCVDetectWebNN.cmake)\nendif()\n\n# --- Inference Engine ---\nif(WITH_INF_ENGINE OR WITH_OPENVINO)\n  include(cmake/OpenCVDetectInferenceEngine.cmake)\nendif()\n\n# --- DirectX ---\nif(WITH_DIRECTX)\n  include(cmake/OpenCVDetectDirectX.cmake)\nendif()\n# --- DirectML ---\nif(WITH_DIRECTML)\n  include(cmake/OpenCVDetectDirectML.cmake)\nendif()\n\nif(WITH_VTK)\n  include(cmake/OpenCVDetectVTK.cmake)\nendif()\n\nif(WITH_OPENVX)\n  include(cmake/FindOpenVX.cmake)\nendif()\n\nif(WITH_QUIRC)\n  add_subdirectory(3rdparty/quirc)\n  set(HAVE_QUIRC TRUE)\nendif()\n\nif(WITH_ONNX)\n  include(cmake/FindONNX.cmake)\nendif()\n\n# ----------------------------------------------------------------------------\n# OpenCV HAL\n# ----------------------------------------------------------------------------\nset(_hal_includes \"\")\nmacro(ocv_hal_register HAL_LIBRARIES_VAR HAL_HEADERS_VAR HAL_INCLUDE_DIRS_VAR)\n  # 1. libraries\n  foreach (l ${${HAL_LIBRARIES_VAR}})\n    if(NOT TARGET ${l})\n      get_filename_component(l \"${l}\" ABSOLUTE)\n    endif()\n    list(APPEND OPENCV_HAL_LINKER_LIBS ${l})\n  endforeach()\n  # 2. headers\n  foreach (h ${${HAL_HEADERS_VAR}})\n    set(_hal_includes \"${_hal_includes}\\n#include \\\"${h}\\\"\")\n  endforeach()\n  # 3. include paths\n  ocv_include_directories(${${HAL_INCLUDE_DIRS_VAR}})\nendmacro()\n\nif(NOT DEFINED OpenCV_HAL)\n  set(OpenCV_HAL \"OpenCV_HAL\")\nendif()\n\nif(HAVE_OPENVX)\n  if(NOT \";${OpenCV_HAL};\" MATCHES \";openvx;\")\n    set(OpenCV_HAL \"openvx;${OpenCV_HAL}\")\n  endif()\nendif()\n\nif(HAVE_FASTCV)\n  ocv_debug_message(STATUS \"Enable FastCV acceleration\")\n  if(NOT \";${OpenCV_HAL};\" MATCHES \";fastcv;\")\n    set(OpenCV_HAL \"fastcv;${OpenCV_HAL}\")\n  endif()\nendif()\n\nif(HAVE_KLEIDICV)\n  ocv_debug_message(STATUS \"Enable KleidiCV acceleration\")\n  if(NOT \";${OpenCV_HAL};\" MATCHES \";kleidicv;\")\n    set(OpenCV_HAL \"kleidicv;${OpenCV_HAL}\")\n  endif()\nendif()\n\nif(WITH_CAROTENE)\n  ocv_debug_message(STATUS \"Enable carotene acceleration\")\n  if(NOT \";${OpenCV_HAL};\" MATCHES \";carotene;\")\n    set(OpenCV_HAL \"carotene;${OpenCV_HAL}\")\n  endif()\nendif()\n\nif(WITH_NDSRVP)\n  ocv_debug_message(STATUS \"Andes RVP 3rdparty NDSRVP enabled\")\n  if(NOT \";${OpenCV_HAL};\" MATCHES \";ndsrvp;\")\n    set(OpenCV_HAL \"ndsrvp;${OpenCV_HAL}\")\n  endif()\nendif()\n\nif(WITH_HAL_RVV)\n  ocv_debug_message(STATUS \"Enable HAL RVV acceleration\")\n  if(NOT \";${OpenCV_HAL};\" MATCHES \";halrvv;\")\n    set(OpenCV_HAL \"halrvv;${OpenCV_HAL}\")\n  endif()\nendif()\n\nforeach(hal ${OpenCV_HAL})\n  if(hal STREQUAL \"carotene\")\n    if(\";${CPU_BASELINE_FINAL};\" MATCHES \";NEON;\")\n      add_subdirectory(3rdparty/carotene/hal)\n      ocv_hal_register(CAROTENE_HAL_LIBRARIES CAROTENE_HAL_HEADERS CAROTENE_HAL_INCLUDE_DIRS)\n      list(APPEND OpenCV_USED_HAL \"carotene (ver ${CAROTENE_HAL_VERSION})\")\n    else()\n      message(STATUS \"Carotene: NEON is not available, disabling carotene...\")\n    endif()\n  elseif(hal STREQUAL \"fastcv\")\n    if((ARM OR AARCH64) AND (ANDROID OR (UNIX AND NOT APPLE AND NOT IOS AND NOT XROS)))\n      add_subdirectory(3rdparty/fastcv)\n      ocv_hal_register(FASTCV_HAL_LIBRARIES FASTCV_HAL_HEADERS FASTCV_HAL_INCLUDE_DIRS)\n      list(APPEND OpenCV_USED_HAL \"fastcv (ver ${FASTCV_HAL_VERSION})\")\n    else()\n      message(STATUS \"FastCV: fastcv is not available, disabling fastcv...\")\n    endif()\n  elseif(hal STREQUAL \"kleidicv\")\n    add_subdirectory(3rdparty/kleidicv)\n    ocv_hal_register(KLEIDICV_HAL_LIBRARIES KLEIDICV_HAL_HEADERS KLEIDICV_HAL_INCLUDE_DIRS)\n    list(APPEND OpenCV_USED_HAL \"KleidiCV (ver ${KLEIDICV_HAL_VERSION})\")\n  elseif(hal STREQUAL \"ndsrvp\")\n    if(CMAKE_C_FLAGS MATCHES \"-mext-dsp\" AND CMAKE_CXX_FLAGS MATCHES \"-mext-dsp\" AND NOT \";${CPU_BASELINE_FINAL};\" MATCHES \";RVV;\")\n      add_subdirectory(3rdparty/ndsrvp)\n      ocv_hal_register(NDSRVP_HAL_LIBRARIES NDSRVP_HAL_HEADERS NDSRVP_HAL_INCLUDE_DIRS)\n      list(APPEND OpenCV_USED_HAL \"ndsrvp (ver ${NDSRVP_HAL_VERSION})\")\n    else()\n      message(STATUS \"NDSRVP: Andes GNU Toolchain DSP extension is not enabled, disabling ndsrvp...\")\n    endif()\n  elseif(hal STREQUAL \"halrvv\")\n    if(\";${CPU_BASELINE_FINAL};\" MATCHES \";RVV;\")\n      add_subdirectory(3rdparty/hal_rvv/)\n      ocv_hal_register(RVV_HAL_LIBRARIES RVV_HAL_HEADERS RVV_HAL_INCLUDE_DIRS)\n      list(APPEND OpenCV_USED_HAL \"HAL RVV (ver ${RVV_HAL_VERSION})\")\n    else()\n      message(STATUS \"HAL RVV: RVV is not available, disabling halrvv...\")\n    endif()\n  elseif(hal STREQUAL \"openvx\")\n    add_subdirectory(3rdparty/openvx)\n    ocv_hal_register(OPENVX_HAL_LIBRARIES OPENVX_HAL_HEADERS OPENVX_HAL_INCLUDE_DIRS)\n    list(APPEND OpenCV_USED_HAL \"openvx (ver ${OPENVX_HAL_VERSION})\")\n  else()\n    ocv_debug_message(STATUS \"OpenCV HAL: ${hal} ...\")\n    ocv_clear_vars(OpenCV_HAL_LIBRARIES OpenCV_HAL_HEADERS OpenCV_HAL_INCLUDE_DIRS)\n    find_package(${hal} NO_MODULE QUIET)\n    if(${hal}_FOUND)\n      ocv_hal_register(OpenCV_HAL_LIBRARIES OpenCV_HAL_HEADERS OpenCV_HAL_INCLUDE_DIRS)\n      list(APPEND OpenCV_USED_HAL \"${hal} (ver ${${hal}_VERSION})\")\n    endif()\n  endif()\nendforeach()\nconfigure_file(\"${OpenCV_SOURCE_DIR}/cmake/templates/custom_hal.hpp.in\" \"${OPENCV_CONFIG_FILE_INCLUDE_DIR}/custom_hal.hpp\" @ONLY)\nunset(_hal_includes)\n\n\n# ----------------------------------------------------------------------------\n# Code trace support\n# ----------------------------------------------------------------------------\nif(CV_TRACE)\n  include(cmake/OpenCVDetectTrace.cmake)\nendif()\n\nocv_cmake_hook(POST_DETECT_DEPENDECIES)  # typo, deprecated (2019-06)\nocv_cmake_hook(POST_DETECT_DEPENDENCIES)\n\n# ----------------------------------------------------------------------------\n# Solution folders:\n# ----------------------------------------------------------------------------\nif(ENABLE_SOLUTION_FOLDERS)\n  set_property(GLOBAL PROPERTY USE_FOLDERS ON)\n  set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER \"CMakeTargets\")\nendif()\n\n# Extra OpenCV targets: uninstall, package_source, perf, etc.\ninclude(cmake/OpenCVExtraTargets.cmake)\n\n# ----------------------------------------------------------------------------\n# Process subdirectories\n# ----------------------------------------------------------------------------\n\n# opencv.hpp and legacy headers\nadd_subdirectory(include)\n\n# Enable compiler options for OpenCV modules/apps/samples only (ignore 3rdparty)\nocv_add_modules_compiler_options()\n\n# OpenCV modules\nocv_register_modules()\n\n# Generate targets for documentation\nadd_subdirectory(doc)\n\n# various data that is used by cv libraries and/or demo applications.\nadd_subdirectory(data)\n\n# extra applications\nif(BUILD_opencv_apps)\n  add_subdirectory(apps)\nendif()\n\n# examples\nif(BUILD_EXAMPLES OR BUILD_ANDROID_EXAMPLES OR INSTALL_ANDROID_EXAMPLES OR INSTALL_PYTHON_EXAMPLES OR INSTALL_C_EXAMPLES)\n  add_subdirectory(samples)\nendif()\n\n# ----------------------------------------------------------------------------\n# Finalization: generate configuration-based files\n# ----------------------------------------------------------------------------\n\nocv_cmake_hook(PRE_FINALIZE)\n\n# Generate platform-dependent and configuration-dependent headers\ninclude(cmake/OpenCVGenHeaders.cmake)\n\n# Generate opencv.pc for pkg-config command\nif(OPENCV_GENERATE_PKGCONFIG)\n  include(cmake/OpenCVGenPkgconfig.cmake)\nendif()\n\n# Generate OpenCV.mk for ndk-build (Android build tool)\ninclude(cmake/OpenCVGenAndroidMK.cmake)\n\n# Generate OpenCVConfig.cmake and OpenCVConfig-version.cmake for cmake projects\ninclude(cmake/OpenCVGenConfig.cmake)\n\n# Generate Info.plist for the iOS/visionOS framework\nif(APPLE_FRAMEWORK)\n  include(cmake/OpenCVGenInfoPlist.cmake)\nendif()\n\n# Generate ABI descriptor\ninclude(cmake/OpenCVGenABI.cmake)\n\n# Generate environment setup file\nif(INSTALL_TESTS AND OPENCV_TEST_DATA_PATH)\n  if(ANDROID)\n    get_filename_component(TEST_PATH ${OPENCV_TEST_INSTALL_PATH} DIRECTORY)\n    configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/templates/opencv_run_all_tests_android.sh.in\"\n                   \"${CMAKE_BINARY_DIR}/unix-install/opencv_run_all_tests.sh\" @ONLY)\n    install(PROGRAMS \"${CMAKE_BINARY_DIR}/unix-install/opencv_run_all_tests.sh\"\n            DESTINATION ./ COMPONENT tests)\n  elseif(WIN32)\n    configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/templates/opencv_run_all_tests_windows.cmd.in\"\n                   \"${CMAKE_BINARY_DIR}/win-install/opencv_run_all_tests.cmd\" @ONLY)\n    install(PROGRAMS \"${CMAKE_BINARY_DIR}/win-install/opencv_run_all_tests.cmd\"\n            DESTINATION ${OPENCV_TEST_INSTALL_PATH} COMPONENT tests)\n  elseif(UNIX)\n    configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/templates/opencv_run_all_tests_unix.sh.in\"\n                   \"${CMAKE_BINARY_DIR}/unix-install/opencv_run_all_tests.sh\" @ONLY)\n    install(PROGRAMS \"${CMAKE_BINARY_DIR}/unix-install/opencv_run_all_tests.sh\"\n            DESTINATION ${OPENCV_TEST_INSTALL_PATH} COMPONENT tests)\n  endif()\nendif()\n\nif(NOT OPENCV_README_FILE)\n  if(ANDROID)\n    set(OPENCV_README_FILE ${CMAKE_CURRENT_SOURCE_DIR}/platforms/android/README.android)\n  endif()\nendif()\n\nif(NOT OPENCV_LICENSE_FILE)\n  set(OPENCV_LICENSE_FILE ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE)\nendif()\n\n# for UNIX it does not make sense as LICENSE and readme will be part of the package automatically\nif(ANDROID OR NOT UNIX)\n  install(FILES ${OPENCV_LICENSE_FILE}\n        PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ\n        DESTINATION ./ COMPONENT libs)\n  if(OPENCV_README_FILE)\n    install(FILES ${OPENCV_README_FILE}\n            PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ\n            DESTINATION ./ COMPONENT libs)\n  endif()\nendif()\n\nif(COMMAND ocv_pylint_finalize)\n  ocv_pylint_add_directory(${CMAKE_CURRENT_LIST_DIR}/modules/python/test)\n  ocv_pylint_add_directory(${CMAKE_CURRENT_LIST_DIR}/samples/python)\n  ocv_pylint_add_directory(${CMAKE_CURRENT_LIST_DIR}/samples/dnn)\n  ocv_pylint_add_directory_recurse(${CMAKE_CURRENT_LIST_DIR}/samples/python/tutorial_code)\n  ocv_pylint_finalize()\nendif()\nif(TARGET check_pylint)\n  message(STATUS \"Registered 'check_pylint' target: using ${PYLINT_EXECUTABLE} (ver: ${PYLINT_VERSION}), checks: ${PYLINT_TOTAL_TARGETS}\")\nendif()\nif(TARGET check_flake8)\n  message(STATUS \"Registered 'check_flake8' target: using ${FLAKE8_EXECUTABLE} (ver: ${FLAKE8_VERSION})\")\nendif()\n\nif(OPENCV_GENERATE_SETUPVARS)\n  include(cmake/OpenCVGenSetupVars.cmake)\nendif()\n\n# ----------------------------------------------------------------------------\n# Summary:\n# ----------------------------------------------------------------------------\nstatus(\"\")\nstatus(\"General configuration for OpenCV ${OPENCV_VERSION} =====================================\")\nif(OPENCV_VCSVERSION)\n  status(\"  Version control:\" ${OPENCV_VCSVERSION})\nendif()\nif(OPENCV_EXTRA_MODULES_PATH AND NOT BUILD_INFO_SKIP_EXTRA_MODULES)\n  set(__dump_extra_header OFF)\n  foreach(p ${OPENCV_EXTRA_MODULES_PATH})\n    if(EXISTS ${p})\n      if(NOT __dump_extra_header)\n        set(__dump_extra_header ON)\n        status(\"\")\n        status(\"  Extra modules:\")\n      else()\n        status(\"\")\n      endif()\n      ocv_git_describe(EXTRA_MODULES_VCSVERSION \"${p}\")\n      status(\"    Location (extra):\" ${p})\n      status(\"    Version control (extra):\" ${EXTRA_MODULES_VCSVERSION})\n    endif()\n  endforeach()\n  unset(__dump_extra_header)\nendif()\n\n# ========================== build platform ==========================\nstatus(\"\")\nstatus(\"  Platform:\")\nif(NOT DEFINED OPENCV_TIMESTAMP\n    AND NOT BUILD_INFO_SKIP_TIMESTAMP\n)\n  string(TIMESTAMP OPENCV_TIMESTAMP \"\" UTC)\n  set(OPENCV_TIMESTAMP \"${OPENCV_TIMESTAMP}\" CACHE STRING \"Timestamp of OpenCV build configuration\" FORCE)\nendif()\nif(OPENCV_TIMESTAMP)\n  status(\"    Timestamp:\"      ${OPENCV_TIMESTAMP})\nendif()\nstatus(\"    Host:\"             ${CMAKE_HOST_SYSTEM_NAME} ${CMAKE_HOST_SYSTEM_VERSION} ${CMAKE_HOST_SYSTEM_PROCESSOR})\nif(CMAKE_CROSSCOMPILING)\n  status(\"    Target:\"         ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_VERSION} ${CMAKE_SYSTEM_PROCESSOR})\nendif()\nstatus(\"    CMake:\"            ${CMAKE_VERSION})\nstatus(\"    CMake generator:\"  ${CMAKE_GENERATOR})\nstatus(\"    CMake build tool:\" ${CMAKE_BUILD_TOOL})\nif(MSVC)\n  status(\"    MSVC:\"           ${MSVC_VERSION})\nendif()\nif(CMAKE_GENERATOR MATCHES Xcode)\n  status(\"    Xcode:\"          ${XCODE_VERSION})\nendif()\nif(CMAKE_GENERATOR MATCHES \"Xcode|Visual Studio|Multi-Config\")\n  status(\"    Configuration:\"  ${CMAKE_CONFIGURATION_TYPES})\nelse()\n  status(\"    Configuration:\"  ${CMAKE_BUILD_TYPE})\nendif()\nif(DEFINED OPENCV_ALGO_HINT_DEFAULT)\n  status(\"    Algorithm Hint:\"  ${OPENCV_ALGO_HINT_DEFAULT})\nelse()\n  status(\"    Algorithm Hint:\" \" ALGO_HINT_ACCURATE\")\nendif()\n\n# ========================= CPU code generation mode =========================\nstatus(\"\")\nstatus(\"  CPU/HW features:\")\nstatus(\"    Baseline:\"  \"${CPU_BASELINE_FINAL}\")\nif(NOT CPU_BASELINE STREQUAL CPU_BASELINE_FINAL)\n  status(\"      requested:\"  \"${CPU_BASELINE}\")\nendif()\nif(CPU_BASELINE_REQUIRE)\n  status(\"      required:\"  \"${CPU_BASELINE_REQUIRE}\")\nendif()\nif(CPU_BASELINE_DISABLE)\n  status(\"      disabled:\"  \"${CPU_BASELINE_DISABLE}\")\nendif()\nif(CPU_DISPATCH_FINAL OR CPU_DISPATCH)\n  status(\"    Dispatched code generation:\"  \"${CPU_DISPATCH_FINAL}\")\n  if(NOT CPU_DISPATCH STREQUAL CPU_DISPATCH_FINAL)\n    status(\"      requested:\"  \"${CPU_DISPATCH}\")\n  endif()\n  if(CPU_DISPATCH_REQUIRE)\n    status(\"      required:\"  \"${CPU_DISPATCH_REQUIRE}\")\n  endif()\n  foreach(OPT ${CPU_DISPATCH_FINAL})\n    status(\"      ${OPT} (${CPU_${OPT}_USAGE_COUNT} files):\"  \"+ ${CPU_DISPATCH_${OPT}_INCLUDED}\")\n  endforeach()\nendif()\n\n# ========================== C/C++ options ==========================\nif(CMAKE_CXX_COMPILER_VERSION)\n  set(OPENCV_COMPILER_STR \"${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1} (ver ${CMAKE_CXX_COMPILER_VERSION})\")\nelse()\n  set(OPENCV_COMPILER_STR \"${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1}\")\nendif()\nstring(STRIP \"${OPENCV_COMPILER_STR}\" OPENCV_COMPILER_STR)\n\nstatus(\"\")\nstatus(\"  C/C++:\")\nstatus(\"    Built as dynamic libs?:\" BUILD_SHARED_LIBS THEN YES ELSE NO)\nif(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD)\n  status(\"    C++ standard:\"           \"${CMAKE_CXX_STANDARD}\")\nendif()\nstatus(\"    C++ Compiler:\"           ${OPENCV_COMPILER_STR})\nstatus(\"    C++ flags (Release):\"    ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE})\nstatus(\"    C++ flags (Debug):\"      ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG})\nstatus(\"    C Compiler:\"             ${CMAKE_C_COMPILER} ${CMAKE_C_COMPILER_ARG1})\nstatus(\"    C flags (Release):\"      ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE})\nstatus(\"    C flags (Debug):\"        ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG})\nif(WIN32)\n  status(\"    Linker flags (Release):\" ${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS_RELEASE})\n  status(\"    Linker flags (Debug):\"   ${CMAKE_EXE_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS_DEBUG})\nelse()\n  status(\"    Linker flags (Release):\" ${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS_RELEASE})\n  status(\"    Linker flags (Debug):\"   ${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS_DEBUG})\nendif()\nstatus(\"    ccache:\"                  OPENCV_COMPILER_IS_CCACHE THEN YES ELSE NO)\nstatus(\"    Precompiled headers:\"     PCHSupport_FOUND AND ENABLE_PRECOMPILED_HEADERS THEN YES ELSE NO)\n\nif(OPENCV_DISABLE_FILESYSTEM_SUPPORT)\n  status(\"    Filesystem support is disabled\")\nendif()\n\n# ========================== Dependencies ============================\nocv_get_all_libs(deps_modules deps_extra deps_3rdparty)\nstatus(\"    Extra dependencies:\" ${deps_extra})\nstatus(\"    3rdparty dependencies:\" ${deps_3rdparty})\n\n# ========================== OpenCV modules ==========================\nstatus(\"\")\nstatus(\"  OpenCV modules:\")\nset(OPENCV_MODULES_BUILD_ST \"\")\nforeach(the_module ${OPENCV_MODULES_BUILD})\n  if(NOT OPENCV_MODULE_${the_module}_CLASS STREQUAL \"INTERNAL\" OR the_module STREQUAL \"opencv_ts\")\n    list(APPEND OPENCV_MODULES_BUILD_ST \"${the_module}\")\n  endif()\nendforeach()\nstring(REPLACE \"opencv_\" \"\" OPENCV_MODULES_BUILD_ST          \"${OPENCV_MODULES_BUILD_ST}\")\nstring(REPLACE \"opencv_\" \"\" OPENCV_MODULES_DISABLED_USER_ST  \"${OPENCV_MODULES_DISABLED_USER}\")\nstring(REPLACE \"opencv_\" \"\" OPENCV_MODULES_DISABLED_AUTO_ST  \"${OPENCV_MODULES_DISABLED_AUTO}\")\nstring(REPLACE \"opencv_\" \"\" OPENCV_MODULES_DISABLED_FORCE_ST \"${OPENCV_MODULES_DISABLED_FORCE}\")\nlist(SORT OPENCV_MODULES_BUILD_ST)\nlist(SORT OPENCV_MODULES_DISABLED_USER_ST)\nlist(SORT OPENCV_MODULES_DISABLED_AUTO_ST)\nlist(SORT OPENCV_MODULES_DISABLED_FORCE_ST)\nstatus(\"    To be built:\"            OPENCV_MODULES_BUILD          THEN ${OPENCV_MODULES_BUILD_ST}          ELSE \"-\")\nstatus(\"    Disabled:\"               OPENCV_MODULES_DISABLED_USER  THEN ${OPENCV_MODULES_DISABLED_USER_ST}  ELSE \"-\")\nstatus(\"    Disabled by dependency:\" OPENCV_MODULES_DISABLED_AUTO  THEN ${OPENCV_MODULES_DISABLED_AUTO_ST}  ELSE \"-\")\nstatus(\"    Unavailable:\"            OPENCV_MODULES_DISABLED_FORCE THEN ${OPENCV_MODULES_DISABLED_FORCE_ST} ELSE \"-\")\n\nocv_build_features_string(apps_status\n  IF BUILD_TESTS AND HAVE_opencv_ts THEN \"tests\"\n  IF BUILD_PERF_TESTS AND HAVE_opencv_ts THEN \"perf_tests\"\n  IF BUILD_EXAMPLES THEN \"examples\"\n  IF BUILD_opencv_apps THEN \"apps\"\n  IF BUILD_ANDROID_SERVICE THEN \"android_service\"\n  IF (BUILD_ANDROID_EXAMPLES OR INSTALL_ANDROID_EXAMPLES) AND CAN_BUILD_ANDROID_PROJECTS THEN \"android_examples\"\n  ELSE \"-\")\nstatus(\"    Applications:\" \"${apps_status}\")\nocv_build_features_string(docs_status\n    IF TARGET doxygen_cpp THEN \"doxygen\"\n    IF TARGET doxygen_python THEN \"python\"\n    IF TARGET doxygen_javadoc THEN \"javadoc\"\n    IF BUILD_opencv_js OR DEFINED OPENCV_JS_LOCATION THEN \"js\"\n    ELSE \"NO\"\n)\nstatus(\"    Documentation:\" \"${docs_status}\")\nstatus(\"    Non-free algorithms:\" OPENCV_ENABLE_NONFREE THEN \"YES\" ELSE \"NO\")\n\n# ========================== Android details ==========================\nif(ANDROID)\n  status(\"\")\n  if(DEFINED ANDROID_NDK_REVISION)\n    set(__msg \"${ANDROID_NDK} (ver ${ANDROID_NDK_REVISION})\")\n  else()\n    set(__msg \"location: ${ANDROID_NDK}\")\n  endif()\n  status(\"  Android NDK: \" ${__msg})\n  status(\"    Android ABI:\" ${ANDROID_ABI})\n  if(BUILD_WITH_STANDALONE_TOOLCHAIN)\n    status(\"    NDK toolchain:\" \"standalone: ${ANDROID_STANDALONE_TOOLCHAIN}\")\n  elseif(BUILD_WITH_ANDROID_NDK OR DEFINED ANDROID_TOOLCHAIN_NAME)\n    status(\"    NDK toolchain:\" \"${ANDROID_TOOLCHAIN_NAME}\")\n  endif()\n  status(\"    STL type:\" ${ANDROID_STL})\n  status(\"    Native API level:\" ${ANDROID_NATIVE_API_LEVEL})\n\n  if(BUILD_ANDROID_PROJECTS)\n    status(\"  Android SDK: \" \"${ANDROID_SDK} (tools: ${ANDROID_SDK_TOOLS_VERSION} build tools: ${ANDROID_SDK_BUILD_TOOLS_VERSION})\")\n    if(ANDROID_EXECUTABLE)\n      status(\"    android tool:\"  \"${ANDROID_EXECUTABLE}\")\n    endif()\n  else()\n    status(\"  Android SDK: \" \"not used, projects are not built\")\n  endif()\n  if(DEFINED ANDROID_SDK_COMPATIBLE_TARGET)\n    status(\"    SDK target:\" \"${ANDROID_SDK_COMPATIBLE_TARGET}\")\n  endif()\n  if(DEFINED ANDROID_PROJECTS_BUILD_TYPE)\n    if(ANDROID_PROJECTS_BUILD_TYPE STREQUAL \"ANT\")\n      status(\"    Projects build scripts:\" \"Ant/Eclipse compatible\")\n    elseif(ANDROID_PROJECTS_BUILD_TYPE STREQUAL \"ANT\")\n      status(\"    Projects build scripts:\" \"Gradle\")\n    endif()\n  endif()\nendif()\n\n# ================== Windows RT features ==================\nif(WIN32)\nstatus(\"\")\nstatus(\"  Windows RT support:\" WINRT THEN YES ELSE NO)\n  if(WINRT)\n    status(\"    Building for Microsoft platform: \" ${CMAKE_SYSTEM_NAME})\n    status(\"    Building for architectures: \" ${CMAKE_VS_EFFECTIVE_PLATFORMS})\n    status(\"    Building for version: \" ${CMAKE_SYSTEM_VERSION})\n    if (DEFINED ENABLE_WINRT_MODE_NATIVE)\n      status(\"    Building for C++ without CX extensions\")\n    endif()\n  endif()\nendif(WIN32)\n\n# ========================== GUI ==========================\nstatus(\"\")\nstatus(\"  GUI: \" \"${OPENCV_HIGHGUI_BUILTIN_BACKEND}\")\n\nif(WITH_WAYLAND OR HAVE_WAYLAND)\n  status(\"    Wayland:\" HAVE_WAYLAND THEN \"(Experimental) YES\" ELSE \"NO\")\n  status(\"      Wayland Client:\" HAVE_WAYLAND_CLIENT THEN \"YES (ver ${WAYLAND_CLIENT_VERSION})\" ELSE \"NO\")\n  status(\"      Wayland Cursor:\" HAVE_WAYLAND_CURSOR THEN \"YES (ver ${WAYLAND_CURSOR_VERSION})\" ELSE \"NO\")\n  status(\"      Wayland Protocols:\" HAVE_WAYLAND_PROTOCOLS THEN \"YES (ver ${WAYLAND_PROTOCOLS_VERSION})\" ELSE \"NO\")\n  status(\"      Xkbcommon:\" HAVE_XKBCOMMON THEN \"YES (ver ${XKBCOMMON_VERSION})\" ELSE \"NO\")\n  status(\"      Wayland EGL(Option):\" HAVE_WAYLAND_EGL THEN \"YES (ver ${WAYLAND_EGL_VERSION})\" ELSE \"NO\")\nendif()\n\nif(WITH_QT OR HAVE_QT)\n  if(HAVE_QT)\n    status(\"    QT:\" \"YES (ver ${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH} ${QT_EDITION})\")\n    if(HAVE_QT_OPENGL)\n      if(Qt${QT_VERSION_MAJOR}OpenGL_LIBRARIES)\n        status(\"      QT OpenGL support:\" HAVE_QT_OPENGL THEN \"YES (${Qt${QT_VERSION_MAJOR}OpenGL_LIBRARIES} ${Qt${QT_VERSION_MAJOR}OpenGL_VERSION_STRING})\" ELSE NO)\n      else()\n        status(\"      QT OpenGL support:\" HAVE_QT_OPENGL THEN \"YES (${QT_QTOPENGL_LIBRARY})\" ELSE NO)\n      endif()\n    else()\n      status(\"      QT OpenGL support:\" \"NO\")\n    endif()\n  else()\n    status(\"    QT:\" \"NO\")\n  endif()\nendif()\n\nif(WITH_WIN32UI)\n  status(\"    Win32 UI:\" HAVE_WIN32UI THEN YES ELSE NO)\nendif()\n\nif(HAVE_COCOA)  # APPLE\n  status(\"    Cocoa:\"  YES)\nendif()\n\nif(WITH_GTK OR HAVE_GTK)\n  if(HAVE_GTK3)\n    status(\"    GTK+:\" \"YES (ver ${GTK3_VERSION})\")\n  elseif(HAVE_GTK)\n    status(\"    GTK+:\" \"YES (ver ${GTK2_VERSION})\")\n    status(\"      GtkGlExt:\" HAVE_GTKGLEXT THEN \"YES (ver ${GTKGLEXT_VERSION})\" ELSE NO)\n  else()\n    status(\"    GTK+:\" \"NO\")\n  endif()\nendif()\n\nif(WITH_FRAMEBUFFER OR HAVE_FRAMEBUFFER)\n  status(\"    Framebuffer UI:\" HAVE_FRAMEBUFFER THEN YES ELSE NO)\n  if(WITH_FRAMEBUFFER_XVFB OR HAVE_FRAMEBUFFER_XVFB)\n    status(\"    Virtual framebuffer UI:\" HAVE_FRAMEBUFFER_XVFB THEN YES ELSE NO)\n  endif()\nendif()\n\nif(WITH_OPENGL OR HAVE_OPENGL)\n  status(\"    OpenGL support:\" HAVE_OPENGL THEN \"YES (${OPENGL_LIBRARIES})\" ELSE NO)\nendif()\n\nif(WITH_VTK OR HAVE_VTK)\n  status(\"    VTK support:\" HAVE_VTK THEN \"YES (ver ${VTK_VERSION})\" ELSE NO)\nendif()\n\n# ========================== MEDIA IO ==========================\nstatus(\"\")\nstatus(\"  Media I/O: \")\nif(WITH_ZLIB_NG OR HAVE_ZLIB_NG)\n  status(\"    ZLib-Ng:\" \"build (zlib ver ${ZLIB_VERSION_STRING}, zlib-ng ver ${ZLIBNG_VERSION_STRING})\")\nelse()\n  status(\"    ZLib:\"   ZLIB_FOUND THEN \"${ZLIB_LIBRARIES} (ver ${ZLIB_VERSION_STRING})\" ELSE \"build (ver ${ZLIB_VERSION_STRING})\")\nendif()\n\nif(WITH_JPEG OR HAVE_JPEG)\n  if(NOT HAVE_JPEG)\n    status(\"    JPEG:\" NO)\n  elseif(BUILD_JPEG OR NOT JPEG_FOUND)\n    status(\"    JPEG:\" \"build-${JPEG_LIBRARY} (ver ${JPEG_LIB_VERSION})\")\n    if(ENABLE_LIBJPEG_TURBO_SIMD)\n      status(\"      SIMD Support Request:\" \"YES\")\n      if(HAVE_LIBJPEG_TURBO_SIMD)\n        status(\"      SIMD Support:\" \"YES\")\n      else()\n        status(\"      SIMD Support:\" \"NO\")\n      endif()\n    else()\n      status(\"      SIMD Support Request:\" \"NO\")\n    endif()\n  else()\n    status(\"    JPEG:\" \"${JPEG_LIBRARY} (ver ${JPEG_LIB_VERSION})\")\n  endif()\nendif()\n\nif(WITH_WEBP OR HAVE_WEBP)\n  status(\"    WEBP:\" WEBP_FOUND THEN \"${WEBP_LIBRARY} (ver ${WEBP_VERSION})\" ELSE \"build (ver ${WEBP_VERSION})\")\nendif()\n\nif(WITH_AVIF OR HAVE_AVIF)\n  if(libavif_VERSION)\n    status(\"    AVIF:\" AVIF_FOUND THEN \"${AVIF_LIBRARY} (ver ${libavif_VERSION})\" ELSE \"NO\")\n  else()\n    status(\"    AVIF:\" AVIF_FOUND THEN \"${AVIF_LIBRARY}\" ELSE \"NO\")\n  endif()\nendif()\n\nif(WITH_SPNG)\n  if(BUILD_SPNG)\n    status(\"    PNG:\" \"build-${SPNG_LIBRARY} (ver ${SPNG_VERSION})\")\n  elseif(HAVE_SPNG)\n    status(\"    PNG:\" \"${SPNG_LIBRARY} (ver ${SPNG_VERSION})\")\n  endif()\nelseif(WITH_PNG OR HAVE_PNG)\n  status(\"    PNG:\"  PNG_FOUND  THEN \"${PNG_LIBRARY} (ver ${PNG_VERSION_STRING})\" ELSE \"build (ver ${PNG_VERSION_STRING})\")\n  if(BUILD_PNG AND PNG_HARDWARE_OPTIMIZATIONS)\n    status(\"      SIMD Support Request:\" \"YES\")\n    if(PNG_INTEL_SSE)\n    status(\"      SIMD Support:\" \"YES (Intel SSE)\")\n  elseif(PNG_POWERPC_VSX)\n    status(\"      SIMD Support:\" \"YES (PowerPC VSX)\")\n  elseif(PNG_ARM_NEON)\n    status(\"      SIMD Support:\" \"YES (Arm NEON)\")\n  elseif(PNG_MIPS_MSA OR PNG_MIPS_MMI)\n    if(PNG_MIPS_MSA AND PNG_MIPS_MMI)\n      status(\"      SIMD Support:\" \"YES (Mips MSA & MMI)\")\n    elseif(PNG_MIPS_MSA AND NOT PNG_MIPS_MMI)\n      status(\"      SIMD Support:\" \"YES (Mips MSA)\")\n    else()\n      status(\"      SIMD Support:\" \"YES (Mips MMI)\")\n    endif()\n  elseif(PNG_LOONGARCH_LSX)\n    status(\"      SIMD Support:\" \"YES (LoongArch LSX)\")\n  else()\n    status(\"      SIMD Support:\" \"NO\")\n  endif()\n  elseif(BUILD_PNG)\n    status(\"      SIMD Support Request:\" \"NO\")\n  endif()\nendif()\n\nif(WITH_TIFF OR HAVE_TIFF)\n  status(\"    TIFF:\" TIFF_FOUND THEN \"${TIFF_LIBRARY} (ver ${TIFF_VERSION} / ${TIFF_VERSION_STRING})\" ELSE \"build (ver ${TIFF_VERSION} - ${TIFF_VERSION_STRING})\")\nendif()\n\nif(WITH_JPEGXL OR HAVE_JPEGXL)\n  status(\"    JPEG XL:\" JPEGXL_FOUND THEN \"${JPEGXL_LIBRARY} (ver ${JPEGXL_VERSION})\" ELSE \"NO\")\nendif()\n\nif(HAVE_OPENJPEG)\n  status(\"    JPEG 2000:\" OpenJPEG_FOUND\n      THEN \"OpenJPEG (ver ${OPENJPEG_VERSION})\"\n      ELSE \"build (ver ${OPENJPEG_VERSION})\"\n  )\nelseif(HAVE_JASPER)\n  status(\"    JPEG 2000:\" JASPER_FOUND THEN \"${JASPER_LIBRARY} (ver ${JASPER_VERSION_STRING})\" ELSE \"build Jasper (ver ${JASPER_VERSION_STRING})\")\nelseif(WITH_OPENJPEG OR WITH_JASPER)\n  status(\"    JPEG 2000:\" \"NO\")\nendif()\n\nif(WITH_OPENEXR OR HAVE_OPENEXR)\n  if(HAVE_OPENEXR)\n    status(\"    OpenEXR:\" OPENEXR_FOUND THEN \"${OPENEXR_LIBRARIES} (ver ${OPENEXR_VERSION})\" ELSE \"build (ver ${OPENEXR_VERSION})\")\n  else()\n    status(\"    OpenEXR:\" \"NO\")\n  endif()\nendif()\n\nif(WITH_GDAL OR HAVE_GDAL)\n  status(\"    GDAL:\" HAVE_GDAL THEN \"YES (${GDAL_LIBRARY})\" ELSE \"NO\")\nendif()\n\nif(WITH_GDCM OR HAVE_GDCM)\n  status(\"    GDCM:\" HAVE_GDCM THEN \"YES (${GDCM_VERSION})\" ELSE \"NO\")\nendif()\n\nif(WITH_IMGCODEC_GIF OR DEFINED HAVE_IMGCODEC_GIF)\n  status(\"    GIF:\" HAVE_IMGCODEC_GIF THEN \"YES\" ELSE \"NO\")\nendif()\n\nif(WITH_IMGCODEC_HDR OR DEFINED HAVE_IMGCODEC_HDR)\n  status(\"    HDR:\" HAVE_IMGCODEC_HDR THEN \"YES\" ELSE \"NO\")\nendif()\n\nif(WITH_IMGCODEC_SUNRASTER OR DEFINED HAVE_IMGCODEC_SUNRASTER)\n  status(\"    SUNRASTER:\" HAVE_IMGCODEC_SUNRASTER THEN \"YES\" ELSE \"NO\")\nendif()\n\nif(WITH_IMGCODEC_PXM OR DEFINED HAVE_IMGCODEC_PXM)\n  status(\"    PXM:\" HAVE_IMGCODEC_PXM THEN \"YES\" ELSE \"NO\")\nendif()\n\nif(WITH_IMGCODEC_PFM OR DEFINED HAVE_IMGCODEC_PFM)\n  status(\"    PFM:\" HAVE_IMGCODEC_PFM THEN \"YES\" ELSE \"NO\")\nendif()\n\n# ========================== VIDEO IO ==========================\nstatus(\"\")\nstatus(\"  Video I/O:\")\n\nif(WITH_1394 OR HAVE_DC1394_2)\n  status(\"    DC1394:\" HAVE_DC1394_2 THEN \"YES (${DC1394_2_VERSION})\" ELSE NO)\nendif()\n\nif(WITH_FFMPEG OR HAVE_FFMPEG)\n  if(OPENCV_FFMPEG_USE_FIND_PACKAGE)\n    status(\"    FFMPEG:\"       HAVE_FFMPEG         THEN \"YES (find_package)\"                       ELSE \"NO (find_package)\")\n  elseif(WIN32)\n    status(\"    FFMPEG:\"       HAVE_FFMPEG         THEN \"YES (prebuilt binaries)\"                  ELSE NO)\n  else()\n    status(\"    FFMPEG:\"       HAVE_FFMPEG         THEN YES ELSE NO)\n  endif()\n  status(\"      avcodec:\"      FFMPEG_libavcodec_VERSION    THEN \"YES (${FFMPEG_libavcodec_VERSION})\"    ELSE NO)\n  status(\"      avformat:\"     FFMPEG_libavformat_VERSION   THEN \"YES (${FFMPEG_libavformat_VERSION})\"   ELSE NO)\n  status(\"      avutil:\"       FFMPEG_libavutil_VERSION     THEN \"YES (${FFMPEG_libavutil_VERSION})\"     ELSE NO)\n  status(\"      swscale:\"      FFMPEG_libswscale_VERSION    THEN \"YES (${FFMPEG_libswscale_VERSION})\"    ELSE NO)\n  status(\"      avresample:\"   FFMPEG_libavresample_VERSION THEN \"YES (${FFMPEG_libavresample_VERSION})\" ELSE NO)\n  if(OPENCV_FFMPEG_ENABLE_LIBAVDEVICE)\n    status(\"      avdevice:\"     FFMPEG_libavdevice_VERSION   THEN \"YES (${FFMPEG_libavdevice_VERSION})\"   ELSE NO)\n  endif()\nendif()\n\nif(WITH_GSTREAMER OR HAVE_GSTREAMER)\n  status(\"    GStreamer:\" HAVE_GSTREAMER THEN \"YES (${GSTREAMER_VERSION})\" ELSE NO)\nendif()\n\nif(WITH_OPENNI2 OR HAVE_OPENNI2)\n  status(\"    OpenNI2:\"        HAVE_OPENNI2    THEN \"YES (${OPENNI2_VERSION})\" ELSE NO)\nendif()\n\nif(WITH_PVAPI OR HAVE_PVAPI)\n  status(\"    PvAPI:\" HAVE_PVAPI THEN YES ELSE NO)\nendif()\n\nif(WITH_ARAVIS OR HAVE_ARAVIS_API)\n  status(\"    Aravis SDK:\" HAVE_ARAVIS_API THEN \"YES (${ARAVIS_VERSION})\" ELSE NO)\nendif()\n\nif(WITH_AVFOUNDATION OR HAVE_AVFOUNDATION)\n  status(\"    AVFoundation:\" HAVE_AVFOUNDATION THEN YES ELSE NO)\nendif()\n\nif(HAVE_CAP_IOS)\n  status(\"    iOS capture:\" YES)\nendif()\n\nif(WITH_V4L OR HAVE_V4L)\n  ocv_build_features_string(v4l_status\n    IF HAVE_CAMV4L2 THEN \"linux/videodev2.h\"\n    IF HAVE_VIDEOIO THEN \"sys/videoio.h\"\n    ELSE \"NO\")\n  status(\"    v4l/v4l2:\" HAVE_V4L THEN \"YES (${v4l_status})\" ELSE NO)\nendif()\n\nif(WITH_DSHOW OR HAVE_DSHOW)\n  status(\"    DirectShow:\" HAVE_DSHOW THEN YES ELSE NO)\nendif()\n\nif(WITH_MSMF OR HAVE_MSMF)\n  status(\"    Media Foundation:\" HAVE_MSMF THEN YES ELSE NO)\n  status(\"      DXVA:\" HAVE_MSMF_DXVA THEN YES ELSE NO)\nendif()\n\nif(WITH_XIMEA OR HAVE_XIMEA)\n  status(\"    XIMEA:\" HAVE_XIMEA THEN YES ELSE NO)\nendif()\n\nif(WITH_UEYE OR HAVE_UEYE)\n  status(\"    uEye:\" HAVE_UEYE THEN YES ELSE NO)\nendif()\n\nif(WITH_XINE OR HAVE_XINE)\n  status(\"    Xine:\"           HAVE_XINE           THEN \"YES (ver ${XINE_VERSION})\"     ELSE NO)\nendif()\n\nif(WITH_LIBREALSENSE OR HAVE_LIBREALSENSE)\n  status(\"    Intel RealSense:\" HAVE_LIBREALSENSE THEN \"YES (${LIBREALSENSE_VERSION})\" ELSE NO)\nendif()\n\nif(WITH_MFX OR HAVE_MFX)\n  if(HAVE_MFX)\n    if(MFX_LIBRARY)\n      set(__details \" (${MFX_LIBRARY})\")\n    elseif(MFX_LIBRARIES)\n      set(__details \" (${MFX_LIBRARIES})\")\n    else()\n      set(__details \" (unknown)\")\n    endif()\n  endif()\n  status(\"    Intel Media SDK:\" HAVE_MFX      THEN \"YES${__details}\" ELSE NO)\nendif()\n\nif(WITH_GPHOTO2 OR HAVE_GPHOTO2)\n  status(\"    gPhoto2:\"        HAVE_GPHOTO2        THEN \"YES\"                                 ELSE NO)\nendif()\n\nif(ANDROID)\n  status(\"   MEDIANDK:\"         HAVE_ANDROID_MEDIANDK THEN \"YES\"                              ELSE NO)\n  status(\"   NDK Camera:\"       HAVE_ANDROID_NATIVE_CAMERA THEN \"YES\"                         ELSE NO)\nendif()\n\n# Order is similar to CV_PARALLEL_FRAMEWORK in core/src/parallel.cpp\nocv_build_features_string(parallel_status EXCLUSIVE\n  IF HAVE_TBB THEN \"TBB (ver ${TBB_VERSION_MAJOR}.${TBB_VERSION_MINOR} interface ${TBB_INTERFACE_VERSION})\"\n  IF HAVE_HPX THEN \"HPX\"\n  IF HAVE_OPENMP THEN \"OpenMP\"\n  IF HAVE_GCD THEN \"GCD\"\n  IF WINRT OR HAVE_CONCURRENCY THEN \"Concurrency\"\n  IF HAVE_PTHREADS_PF THEN \"pthreads\"\n  ELSE \"none\")\nstatus(\"\")\nstatus(\"  Parallel framework:\" \"${parallel_status}\")\nif (OPENCV_DISABLE_THREAD_SUPPORT)\n  status(\"\" \"Multi thread code explicitly disabled with OPENCV_DISABLE_THREAD_SUPPORT.\")\n  if(HAVE_PTHREADS_PF OR HAVE_HPX OR HAVE_OPENMP OR HAVE_GCD OR HAVE_CONCURRENCY)\n    message(FATAL_ERROR \"Not all parallel frameworks have been disabled (using ${parallel_status}).\")\n  endif()\n  if(HAVE_PTHREAD)\n    message(FATAL_ERROR \"Thread execution might be in use in some component.\")\n  endif()\nendif()\n\nif(CV_TRACE OR OPENCV_TRACE)\n  ocv_build_features_string(trace_status EXCLUSIVE\n    IF HAVE_ITT THEN \"with Intel ITT\"\n    ELSE \"built-in\")\n  status(\"\")\n  status(\"  Trace: \" OPENCV_TRACE THEN \"YES (${trace_status})\" ELSE NO)\nendif()\n\n# ========================== Other third-party libraries ==========================\nstatus(\"\")\nstatus(\"  Other third-party libraries:\")\n\nif(WITH_IPP AND HAVE_IPP)\n  status(\"    Intel IPP:\" \"${IPP_VERSION_STR} [${IPP_VERSION_MAJOR}.${IPP_VERSION_MINOR}.${IPP_VERSION_BUILD}]\")\n  status(\"           at:\" \"${IPP_ROOT_DIR}\")\n  if(NOT HAVE_IPP_ICV)\n    status(\"       linked:\" BUILD_WITH_DYNAMIC_IPP THEN \"dynamic\" ELSE \"static\")\n  endif()\n  if(HAVE_IPP_IW)\n    if(BUILD_IPP_IW)\n      status(\"    Intel IPP IW:\" \"sources (${IW_VERSION_MAJOR}.${IW_VERSION_MINOR}.${IW_VERSION_UPDATE})\")\n    else()\n      status(\"    Intel IPP IW:\" \"binaries (${IW_VERSION_MAJOR}.${IW_VERSION_MINOR}.${IW_VERSION_UPDATE})\")\n    endif()\n    status(\"              at:\" \"${IPP_IW_PATH}\")\n  else()\n    status(\"    Intel IPP IW:\"   NO)\n  endif()\nendif()\n\nif(WITH_VA OR HAVE_VA)\n  status(\"    VA:\"            HAVE_VA          THEN \"YES\" ELSE NO)\nendif()\n\nif(WITH_LAPACK OR HAVE_LAPACK)\n  status(\"    Lapack:\"      HAVE_LAPACK     THEN \"YES (${LAPACK_LIBRARIES})\" ELSE NO)\nendif()\n\nif(WITH_HALIDE OR HAVE_HALIDE)\n  status(\"    Halide:\"     HAVE_HALIDE      THEN \"YES (${HALIDE_LIBRARIES} ${HALIDE_INCLUDE_DIRS})\" ELSE NO)\nendif()\n\nif(HAVE_OPENVINO\n    OR (WITH_OPENVINO AND NOT WITH_INF_ENGINE AND NOT INF_ENGINE_TARGET)\n)\n  status(\"    OpenVINO:\" TARGET openvino::runtime THEN \"YES (${OpenVINO_VERSION})\" ELSE \"NO\")\nelse()\n  if(WITH_INF_ENGINE OR INF_ENGINE_TARGET)\n    if(INF_ENGINE_TARGET)\n      list(GET INF_ENGINE_TARGET 0 ie_target)\n      set(__msg \"YES (${INF_ENGINE_RELEASE} / ${INF_ENGINE_VERSION})\")\n      ocv_get_imported_target(ie_target \"${ie_target}\")\n      get_target_property(_lib ${ie_target} IMPORTED_LOCATION)\n      get_target_property(_lib_imp_rel ${ie_target} IMPORTED_IMPLIB_RELEASE)\n      get_target_property(_lib_imp_dbg ${ie_target} IMPORTED_IMPLIB_DEBUG)\n      get_target_property(_lib_rel ${ie_target} IMPORTED_LOCATION_RELEASE)\n      get_target_property(_lib_dbg ${ie_target} IMPORTED_LOCATION_DEBUG)\n      ocv_build_features_string(_lib\n        IF _lib THEN \"${_lib}\"\n        IF _lib_imp_rel AND _lib_imp_dbg THEN \"${_lib_imp_rel} / ${_lib_imp_dbg}\"\n        IF _lib_rel AND _lib_dbg THEN \"${_lib_rel} / ${_lib_dbg}\"\n        IF _lib_rel  THEN \"${_lib_rel}\"\n        IF _lib_dbg  THEN \"${_lib_dbg}\"\n        ELSE \"unknown\"\n      )\n      get_target_property(_inc ${ie_target} INTERFACE_INCLUDE_DIRECTORIES)\n      status(\"    Inference Engine:\" \"${__msg}\")\n      status(\"        * libs:\" \"${_lib}\")\n      status(\"        * includes:\" \"${_inc}\")\n    else()\n      status(\"    Inference Engine:\"     \"NO\")\n    endif()\n  endif()\n  if(WITH_NGRAPH OR HAVE_NGRAPH)\n    if(HAVE_NGRAPH)\n      ocv_get_imported_target(__target ngraph::ngraph)\n      set(__msg \"YES (${ngraph_VERSION})\")\n      get_target_property(_lib ${__target} IMPORTED_LOCATION)\n      get_target_property(_lib_imp_rel ${__target} IMPORTED_IMPLIB_RELEASE)\n      get_target_property(_lib_imp_dbg ${__target} IMPORTED_IMPLIB_DEBUG)\n      get_target_property(_lib_rel ${__target} IMPORTED_LOCATION_RELEASE)\n      get_target_property(_lib_dbg ${__target} IMPORTED_LOCATION_DEBUG)\n      ocv_build_features_string(_lib\n        IF _lib THEN \"${_lib}\"\n        IF _lib_imp_rel AND _lib_imp_dbg THEN \"${_lib_imp_rel} / ${_lib_imp_dbg}\"\n        IF _lib_rel AND _lib_dbg THEN \"${_lib_rel} / ${_lib_dbg}\"\n        IF _lib_rel  THEN \"${_lib_rel}\"\n        IF _lib_dbg  THEN \"${_lib_dbg}\"\n        ELSE \"unknown\"\n      )\n      get_target_property(_inc ${__target} INTERFACE_INCLUDE_DIRECTORIES)\n      status(\"    nGraph:\" \"${__msg}\")\n      status(\"        * libs:\" \"${_lib}\")\n      status(\"        * includes:\" \"${_inc}\")\n    else()\n      status(\"    nGraph:\"     \"NO\")\n    endif()\n  endif()\nendif()\n\nif(BUILD_opencv_dnn AND OPENCV_DNN_BACKEND_DEFAULT)\n    status(\"    Default DNN backend:\" ${OPENCV_DNN_BACKEND_DEFAULT})\nendif()\n\nif(WITH_EIGEN OR HAVE_EIGEN)\n  status(\"    Eigen:\"      HAVE_EIGEN       THEN \"YES (ver ${EIGEN_WORLD_VERSION}.${EIGEN_MAJOR_VERSION}.${EIGEN_MINOR_VERSION})\" ELSE NO)\nendif()\n\nif(WITH_OPENVX OR HAVE_OPENVX)\n  status(\"    OpenVX:\"     HAVE_OPENVX      THEN \"YES (${OPENVX_LIBRARIES})\" ELSE \"NO\")\nendif()\nif(WITH_FASTCV OR HAVE_FASTCV)\n  status(\"    FastCV:\"     HAVE_FASTCV      THEN \"YES (${FASTCV_LIBRARY})\" ELSE \"NO\")\nendif()\n\nstatus(\"    Custom HAL:\" OpenCV_USED_HAL  THEN \"YES (${OpenCV_USED_HAL})\" ELSE \"NO\")\n\nforeach(s ${CUSTOM_STATUS})\n  status(${CUSTOM_STATUS_${s}})\nendforeach()\n\nif(WITH_CUDA OR HAVE_CUDA)\n  ocv_build_features_string(cuda_features\n    IF HAVE_CUFFT THEN \"CUFFT\"\n    IF HAVE_CUBLAS THEN \"CUBLAS\"\n    IF HAVE_NVCUVID THEN \"NVCUVID\"\n    IF HAVE_NVCUVENC THEN \"NVCUVENC\"\n    IF CUDA_FAST_MATH THEN \"FAST_MATH\"\n    ELSE \"no extra features\")\n  status(\"\")\n  status(\"  NVIDIA CUDA:\" HAVE_CUDA THEN \"YES (ver ${CUDA_VERSION_STRING}, ${cuda_features})\" ELSE NO)\n  if(HAVE_CUDA)\n    status(\"    NVIDIA GPU arch:\"      ${OPENCV_CUDA_ARCH_BIN})\n    status(\"    NVIDIA PTX archs:\"     ${OPENCV_CUDA_ARCH_PTX})\n  endif()\n endif()\n\n if(WITH_CUDNN OR HAVE_CUDNN)\n    status(\"\")\n    status(\"  cuDNN:\" HAVE_CUDNN THEN \"YES (ver ${CUDNN_VERSION})\" ELSE NO)\nendif()\n\nif(WITH_VULKAN OR HAVE_VULKAN)\n  status(\"\")\n  status(\"  Vulkan:\"     HAVE_VULKAN THEN \"YES\" ELSE \"NO\")\n  if(HAVE_VULKAN)\n    status(\"    Include path:\"  VULKAN_INCLUDE_DIRS THEN \"${VULKAN_INCLUDE_DIRS}\" ELSE \"NO\")\n    status(\"    Link libraries:\" VULKAN_LIBRARIES THEN \"${VULKAN_LIBRARIES}\" ELSE \"Dynamic load\")\n  endif()\nendif()\n\nif(WITH_WEBNN OR HAVE_WEBNN)\n  status(\"\")\n  status(\"  WebNN:\"     HAVE_WEBNN THEN \"YES\" ELSE \"NO\")\n  if(HAVE_WEBNN AND NOT EMSCRIPTEN)\n    status(\"    Include path:\"  WEBNN_HEADER_DIRS THEN \"${WEBNN_HEADER_DIRS}\" ELSE \"NO\")\n    status(\"    Link libraries:\" WEBNN_LIBRARIES THEN \"${WEBNN_LIBRARIES}\" ELSE \"NO\")\n  endif()\nendif()\n\nif(WITH_TIMVX)\n  status(\"\")\n  status(\"  Tim-VX:\"     HAVE_TIMVX THEN \"YES\" ELSE \"NO\")\n  if(HAVE_TIMVX)\n    status(\"    Include path\"  TIMVX_INCLUDE_DIR THEN \"${TIMVX_INCLUDE_DIR}\" ELSE \"NO\")\n    status(\"    Link libraries:\" TIMVX_LIBRARY THEN \"${TIMVX_LIBRARY}\" ELSE \"NO\")\n    status(\"    VIVANTE SDK path\" VIVANTE_SDK_DIR THEN \"${VIVANTE_SDK_DIR}\" ELSE \"NO\")\n  endif()\nendif()\n\nif(WITH_OPENCL OR HAVE_OPENCL)\n  ocv_build_features_string(opencl_features\n    IF HAVE_OPENCL_SVM THEN \"SVM\"\n    IF HAVE_CLAMDFFT THEN \"AMDFFT\"\n    IF HAVE_CLAMDBLAS THEN \"AMDBLAS\"\n    IF HAVE_OPENCL_D3D11_NV THEN \"NVD3D11\"\n    IF HAVE_VA_INTEL THEN \"INTELVA\"\n    ELSE \"no extra features\")\n  status(\"\")\n  status(\"  OpenCL:\"     HAVE_OPENCL   THEN   \"YES (${opencl_features})\" ELSE \"NO\")\n  if(HAVE_OPENCL)\n    status(\"    Include path:\"  OPENCL_INCLUDE_DIRS THEN \"${OPENCL_INCLUDE_DIRS}\" ELSE \"NO\")\n    status(\"    Link libraries:\"       OPENCL_LIBRARIES THEN \"${OPENCL_LIBRARIES}\" ELSE \"Dynamic load\")\n  endif()\nendif()\n\nif(WITH_ONNX OR HAVE_ONNX)\n  status(\"\")\n  status(\"  ONNX:\"     HAVE_ONNX THEN \"YES\" ELSE \"NO\")\n  if(HAVE_ONNX)\n    status(\"    Include path:\"  ONNX_INCLUDE_DIR THEN \"${ONNX_INCLUDE_DIR}\" ELSE \"NO\")\n    status(\"    Link libraries:\" ONNX_LIBRARIES THEN \"${ONNX_LIBRARIES}\" ELSE \"NO\")\n  endif()\nendif()\n\nif(WITH_CANN)\n  status(\"\")\n  status(\"  CANN:\"    HAVE_CANN THEN \"YES\" ELSE \"NO\")\n  if(HAVE_CANN)\n    status(\"    Include path\"     CANN_INCLUDE_DIRS THEN \"${CANN_INCLUDE_DIRS}\" ELSE \"NO\")\n    status(\"    Link libraries:\"  CANN_LIBRARIES    THEN \"${CANN_LIBRARIES}\"    ELSE \"NO\")\n  endif()\nendif()\n\n# ========================== python ==========================\nif(BUILD_opencv_python2)\n  status(\"\")\n  status(\"  Python 2:\")\n  status(\"    Interpreter:\"     PYTHON2INTERP_FOUND  THEN \"${PYTHON2_EXECUTABLE} (ver ${PYTHON2_VERSION_STRING})\"       ELSE NO)\n  if(PYTHON2LIBS_VERSION_STRING)\n    status(\"    Libraries:\"   HAVE_opencv_python2  THEN  \"${PYTHON2_LIBRARIES} (ver ${PYTHON2LIBS_VERSION_STRING})\"   ELSE NO)\n  else()\n    status(\"    Libraries:\"   HAVE_opencv_python2  THEN  \"${PYTHON2_LIBRARIES}\"                                      ELSE NO)\n  endif()\n  status(\"    numpy:\"         PYTHON2_NUMPY_INCLUDE_DIRS THEN \"${PYTHON2_NUMPY_INCLUDE_DIRS} (ver ${PYTHON2_NUMPY_VERSION})\" ELSE \"NO (Python wrappers can not be generated)\")\n  status(\"    install path:\"  HAVE_opencv_python2  THEN \"${__INSTALL_PATH_PYTHON2}\"                            ELSE \"-\")\nendif()\n\nif(BUILD_opencv_python3)\n  status(\"\")\n  status(\"  Python 3:\")\n  status(\"    Interpreter:\"     PYTHON3INTERP_FOUND  THEN \"${PYTHON3_EXECUTABLE} (ver ${PYTHON3_VERSION_STRING})\"       ELSE NO)\n  if(PYTHON3LIBS_VERSION_STRING)\n    status(\"    Libraries:\"   HAVE_opencv_python3  THEN  \"${PYTHON3_LIBRARIES} (ver ${PYTHON3LIBS_VERSION_STRING})\"   ELSE NO)\n  else()\n    status(\"    Libraries:\"   HAVE_opencv_python3  THEN  \"${PYTHON3_LIBRARIES}\"                                      ELSE NO)\n  endif()\n  status(\"    Limited API:\" PYTHON3_LIMITED_API THEN \"YES (ver ${PYTHON3_LIMITED_API_VERSION})\"                    ELSE NO)\n  status(\"    numpy:\"         PYTHON3_NUMPY_INCLUDE_DIRS THEN \"${PYTHON3_NUMPY_INCLUDE_DIRS} (ver ${PYTHON3_NUMPY_VERSION})\" ELSE \"NO (Python3 wrappers can not be generated)\")\n  status(\"    install path:\"  HAVE_opencv_python3  THEN \"${__INSTALL_PATH_PYTHON3}\"                            ELSE \"-\")\nendif()\n\nstatus(\"\")\nstatus(\"  Python (for build):\"  PYTHON_DEFAULT_AVAILABLE THEN \"${PYTHON_DEFAULT_EXECUTABLE}\" ELSE NO)\n\n# ========================== java ==========================\nif(BUILD_JAVA)\n  status(\"\")\n  status(\"  Java:\"            BUILD_FAT_JAVA_LIB  THEN \"export all functions\"                                      ELSE \"\")\n  status(\"    ant:\"           ANT_EXECUTABLE      THEN \"${ANT_EXECUTABLE} (ver ${ANT_VERSION})\"                    ELSE NO)\n  if(NOT ANDROID)\n    status(\"    Java:\"        Java_FOUND     THEN \"YES (ver ${Java_VERSION})\"                                      ELSE NO)\n    status(\"    JNI:\"         JNI_INCLUDE_DIRS    THEN \"${JNI_INCLUDE_DIRS}\"                                       ELSE NO)\n  endif()\n  status(\"    Java wrappers:\" HAVE_opencv_java                                                            THEN \"YES (${OPENCV_JAVA_SDK_BUILD_TYPE})\" ELSE NO)\n  status(\"    Java tests:\"    BUILD_TESTS AND (opencv_test_java_BINARY_DIR OR opencv_test_android_BINARY_DIR) THEN YES ELSE NO)\nendif()\n\n# ========================== Objective-C =======================\nif(BUILD_OBJC)\n  status(\"\")\n  status(\"  Objective-C wrappers:\" HAVE_opencv_objc                                                       THEN YES ELSE NO)\nendif()\n\nocv_cmake_hook(STATUS_DUMP_EXTRA)\n\n# ========================== auxiliary ==========================\nstatus(\"\")\nstatus(\"  Install to:\" \"${CMAKE_INSTALL_PREFIX}\")\nstatus(\"-----------------------------------------------------------------\")\nstatus(\"\")\n\n\nocv_finalize_status()\n\nif(ENABLE_CONFIG_VERIFICATION)\n  ocv_verify_config()\nendif()\n\nif(HAVE_CUDA AND COMMAND CUDA_BUILD_CLEAN_TARGET)\n  CUDA_BUILD_CLEAN_TARGET()\nendif()\n\nocv_cmake_hook(POST_FINALIZE)\n\n# ----------------------------------------------------------------------------\n# CPack stuff\n# ----------------------------------------------------------------------------\n\ninclude(cmake/OpenCVPackaging.cmake)\n\n# This should be the last command\nocv_cmake_dump_vars(\"\" TOFILE \"CMakeVars.txt\")\nocv_cmake_eval(DEBUG_POST ONCE)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.1865234375,
          "content": "## Contributing guidelines\n\nAll guidelines for contributing to the OpenCV repository can be found at [`How to contribute guideline`](https://github.com/opencv/opencv/wiki/How_to_contribute).\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 0.7158203125,
          "content": "Copyright (C) 2000-2022, Intel Corporation, all rights reserved.\nCopyright (C) 2009-2011, Willow Garage Inc., all rights reserved.\nCopyright (C) 2009-2016, NVIDIA Corporation, all rights reserved.\nCopyright (C) 2010-2013, Advanced Micro Devices, Inc., all rights reserved.\nCopyright (C) 2015-2023, OpenCV Foundation, all rights reserved.\nCopyright (C) 2008-2016, Itseez Inc., all rights reserved.\nCopyright (C) 2019-2023, Xperience AI, all rights reserved.\nCopyright (C) 2019-2022, Shenzhen Institute of Artificial Intelligence and Robotics for Society, all rights reserved.\nCopyright (C) 2022-2023, Southern University of Science And Technology, all rights reserved.\n\nThird party copyrights are property of their respective owners.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.662109375,
          "content": "## OpenCV: Open Source Computer Vision Library\n\n\n### Resources\n\n* Homepage: <https://opencv.org>\n  * Courses: <https://opencv.org/courses>\n* Docs: <https://docs.opencv.org/4.x/>\n* Q&A forum: <https://forum.opencv.org>\n  * previous forum (read only): <http://answers.opencv.org>\n* Issue tracking: <https://github.com/opencv/opencv/issues>\n* Additional OpenCV functionality: <https://github.com/opencv/opencv_contrib>\n* Donate to OpenCV: <https://opencv.org/support/>\n\n\n### Contributing\n\nPlease read the [contribution guidelines](https://github.com/opencv/opencv/wiki/How_to_contribute) before starting work on a pull request.\n\n#### Summary of the guidelines:\n\n* One pull request per issue;\n* Choose the right base branch;\n* Include tests and documentation;\n* Clean up \"oops\" commits before submitting;\n* Follow the [coding style guide](https://github.com/opencv/opencv/wiki/Coding_Style_Guide).\n\n### Additional Resources\n\n* [Submit your OpenCV-based project](https://form.jotform.com/233105358823151) for inclusion in Community Friday on opencv.org\n* [Subscribe to the OpenCV YouTube Channel](http://youtube.com/@opencvofficial) featuring OpenCV Live, an hour-long streaming show\n* [Follow OpenCV on LinkedIn](http://linkedin.com/company/opencv/) for daily posts showing the state-of-the-art in computer vision & AI\n* [Apply to be an OpenCV Volunteer](https://form.jotform.com/232745316792159) to help organize events and online campaigns as well as amplify them\n* [Follow OpenCV on Mastodon](http://mastodon.social/@opencv) in the Fediverse\n* [Follow OpenCV on Twitter](https://twitter.com/opencvlive)\n* [OpenCV.ai](https://opencv.ai): Computer Vision and AI development services from the OpenCV team.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 3.0732421875,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nIf you have information about a security issue or vulnerability in OpenCV, please send an e-mail to security@opencv.org.\n\nPlease provide as much information as possible:\n\n- A detailed description of the vulnerability we can use to reproduce your findings.\n\n- Who can exploit this vulnerability and what would they gain. An attack scenario.\n\n- Information about known exploits if any.\n\nA member of the Security Team will review your e-mail and contact you to collaborate on resolving the issue.\n\n## PGP Key\n\nIf a security vulnerability report has extremely sensitive information you may encrypt it using our PGP public key (updated 2023-APR-19):\n\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQGNBGRAEW0BDAC5jORFsQV3gjUjUEL9UURxueovPIfSG4HF0iXIAkqKhri+xpFh\n5+T8TWIEs8b5XCBQcKs5318/YJTo58vmRcQMI8NpkVq7SS4YdmBAnAlLGk2WOLJV\n0fJA59HSuXTCs9FrK4AGCxoD8KR2k3TuSK7YI6ugVde08WXS7yuzbYGJL9uA9OIE\nEzupb/At+9IWbCPTciErXPFnykxExqzT1u7m5u4rlmf1Twpj0XkPX3Guis2GFBQu\nhEsV5NtS7jDHbcyrWHV2oJVhokZntwtSCURM/ppv09DKClDDcKgHvIK4tnxOIJZy\n1wzsjD3sR24m2Ix+0y2PyQK3mSZYogCEiaRZK7/9mXX+svC4NWjBJLG5HnVrgwxT\n0aOEHjRY9M7CBg6qDgQNZ2bdQ2a85TZpq1/3T2fQ2AQ7gvTSGqRzSloXUOQ3SLbj\nrT2j6hqmPAELhNR3oquOfs2Dkx0Z/10z6zMuVH56+1TO8hhv7mychFP+WbrgGxbD\nW21niH6cd53CmRkAEQEAAbQlT3BlbkNWIFNlY3VyaXR5IDxzZWN1cml0eUBvcGVu\nY3Yub3JnPokBzgQTAQoAOBYhBJNzgXrVR7Pmq57XNwWAy98gvJv1BQJkQBFtAhsD\nBQsJCAcCBhUKCQgLAgQWAgMBAh4BAheAAAoJEAWAy98gvJv1y40MAKI4tdEsX+MQ\nP0Qa2Z+mdtAh56Pj4zIgwKXeCM1YOx2rL+ouKAl7KWDHNMEjjXyOkxWrPV5+Y0wi\nWXtcDcPV04Z+OvlFNWwYZZczwtL3F4Ud5tEatO5nya7eT99vJXxUtwapDVVHyoOX\nfx2B2wZRWBhKiTnT6B8x1tTRO1UZWL1h04m1xSK1U0BeSgmPY7KXudPFF6dC5W1a\nviQReA3NyAPU+x1VUuIditwdgROGtxH6xHEkey9mMwvmsXFedrcXZC0HjCvU6sTJ\nqlTsv2qVs/9UO5uI/9czNYp0tI+opxLm3usZVYVY5QtI/brpYft4sGxB0pNSEV1M\nKdHz/9FZR4Eg1udhVn2H2KokxxvnZUk9dtFAAlyxQxD94jVaEDiHSj97mdJgV6qF\nl+zwKM6EHPu/4P2hzLQoVeca7wCx/tFA1nqW5UnRzmcuzl/lLZqynVIMuveKWeb7\nBMfxEi3j74j+N3jRdDR+3Ru8Q9BpI6XWVVsJ7UgVvz0oUENhxGwhnLkBjQRkQBFt\nAQwAqz1sjZ/N1GNogSl69zjhsBMMQPQ3rVblpCLmPHgH3PoiRNbB8MjcW4l4XBhU\nmnVF0JjYkmzPdSkf4k+7Ag/slX/vyiTM4hkrFH+O4yXTe0wOmuYU8zmrl9+UsPc/\nLLfueGRHUqTcNBZBPz4YLTTiATnXSCQ8M/p9Lcd9mqO9giW9qg4W7EM/SAfsHDel\nhJUZJzAr7opbU2IJjTrp3mEJS9CBimkHernIkjbZN5t0/CWZJ4CCm+hcFXQtyVP3\nU2jO11eQWIQttTrp223b3f0O8tZFrE3J4GncUqAqqAJ5EMX6sQbQ8wZOx4IlTkAh\nYtbYNk1cfYoNK8dZKKTFp1ikaor14MMbmPkH2YQAa2N5PTTeKkFBydBKTfN8rue1\nbKrrkyLBedr9PQfKQMGKfLSnA4frUVuMeb84yXixzn+AnYQQcs6cKH5gBOIfo7vy\nVQclLAbESgfY9G01ElPfSxha6ahGZ71V4KsAZhL478lpqukonJaE1VVIrmzR9ldM\nZ7BTABEBAAGJAbYEGAEKACAWIQSTc4F61Uez5que1zcFgMvfILyb9QUCZEARbQIb\nDAAKCRAFgMvfILyb9WOeDACFaHUdxZjaZmCxeoRyT6lLMJKwUNulJ8lbX1DvLmCS\nAtQdFwaa3hT7fpmqD5UFnKSTUUdXe6DVBNoe1wde5hjBn7F/j7HJe3gYneRB0uuA\nCSq9wUrg7GPUMYyFNNbdGPFMMNvcPREUlx5qYEJH1VSIYfbCNmG4ESuuOa0xXxvC\n7FoLk3tHQzNP9H4p11fq70SycDGwBDjtNQWqf2l2PuQxIuefICZ4C+SJY/eOSpVj\nbo1wnHCHznZS7+tMsqET5IFG16ckGK3nTW7gsXhu+CJ8DalIQCXAq5w0IdDfWDG8\n9ocXIPDa8gcJRLUFZi/CYg+vdgI6mJ8RSLzJz75T2pl0m6kds4o+mdp5pIQYXio9\n1KAo+vtmGY7gQzjqQYoc4Ne6DWRpjS2iO4aGZu+/pGpSU3/Tu/u5Y9RNrP8MycGV\nM0vnhRnHJFDsLnIy1os/S0MDLYqlYB5zR04A4Znj+aPhViJMn9V4c2UdZ1TFEaZp\ntVpvxypkp4FAHRP7cIS8ODU=\n=g4fo\n-----END PGP PUBLIC KEY BLOCK-----\n```\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "platforms",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}