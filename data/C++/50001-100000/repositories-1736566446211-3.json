{
  "metadata": {
    "timestamp": 1736566446211,
    "page": 3,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bitcoin/bitcoin",
      "stars": 81298,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 7.3017578125,
          "content": "env:  # Global defaults\n  CIRRUS_CLONE_DEPTH: 1\n  CIRRUS_LOG_TIMESTAMP: true\n  MAKEJOBS: \"-j10\"\n  TEST_RUNNER_PORT_MIN: \"14000\"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache\n  CI_FAILFAST_TEST_LEAVE_DANGLING: \"1\"  # Cirrus CI does not care about dangling processes and setting this variable avoids killing the CI script itself on error\n\n# A self-hosted machine(s) can be used via Cirrus CI. It can be configured with\n# multiple users to run tasks in parallel. No sudo permission is required.\n#\n# https://cirrus-ci.org/guide/persistent-workers/\n#\n# Generally, a persistent worker must run Ubuntu 23.04+ or Debian 12+.\n#\n# The following specific types should exist, with the following requirements:\n# - small: For an x86_64 machine, with at least 2 vCPUs and 8 GB of memory.\n# - medium: For an x86_64 machine, with at least 4 vCPUs and 16 GB of memory.\n# - arm64: For an aarch64 machine, with at least 2 vCPUs and 8 GB of memory.\n#\n# CI jobs for the latter configuration can be run on x86_64 hardware\n# by installing qemu-user-static, which works out of the box with\n# podman or docker. Background: https://stackoverflow.com/a/72890225/313633\n#\n# The above machine types are matched to each task by their label. Refer to the\n# Cirrus CI docs for more details.\n#\n# When a contributor maintains a fork of the repo, any pull request they make\n# to their own fork, or to the main repository, will trigger two CI runs:\n# one for the branch push and one for the pull request.\n# This can be avoided by setting SKIP_BRANCH_PUSH=true as a custom env variable\n# in Cirrus repository settings, accessible from\n# https://cirrus-ci.com/github/my-organization/my-repository\n#\n# On machines that are persisted between CI jobs, RESTART_CI_DOCKER_BEFORE_RUN=1\n# ensures that previous containers and artifacts are cleared before each run.\n# This requires installing Podman instead of Docker.\n#\n# Futhermore:\n# - podman-docker-4.1+ is required due to the bugfix in 4.1\n#   (https://github.com/bitcoin/bitcoin/pull/21652#issuecomment-1657098200)\n# - The ./ci/ dependencies (with cirrus-cli) should be installed. One-liner example\n#   for a single user setup with sudo permission:\n#\n#   ```\n#   apt update && apt install git screen python3 bash podman-docker uidmap slirp4netns curl -y && curl -L -o cirrus \"https://github.com/cirruslabs/cirrus-cli/releases/latest/download/cirrus-linux-$(dpkg --print-architecture)\" && mv cirrus /usr/local/bin/cirrus && chmod +x /usr/local/bin/cirrus\n#   ```\n#\n# - There are no strict requirements on the hardware. Having fewer CPU threads\n#   than recommended merely causes the CI script to run slower.\n#   To avoid rare and intermittent OOM due to short memory usage spikes,\n#   it is recommended to add (and persist) swap:\n#\n#   ```\n#   fallocate -l 16G /swapfile_ci && chmod 600 /swapfile_ci && mkswap /swapfile_ci && swapon /swapfile_ci && ( echo '/swapfile_ci none swap sw 0 0' | tee -a /etc/fstab )\n#   ```\n#\n# - To register the persistent worker, open a `screen` session and run:\n#\n#   ```\n#   RESTART_CI_DOCKER_BEFORE_RUN=1 screen cirrus worker run --labels type=todo_fill_in_type --token todo_fill_in_token\n#   ```\n\n# https://cirrus-ci.org/guide/tips-and-tricks/#sharing-configuration-between-tasks\nfilter_template: &FILTER_TEMPLATE\n  # Allow forks to specify SKIP_BRANCH_PUSH=true and skip CI runs when a branch is pushed,\n  # but still run CI when a PR is created.\n  # https://cirrus-ci.org/guide/writing-tasks/#conditional-task-execution\n  skip: $SKIP_BRANCH_PUSH == \"true\" && $CIRRUS_PR == \"\"\n  stateful: false  # https://cirrus-ci.org/guide/writing-tasks/#stateful-tasks\n\nbase_template: &BASE_TEMPLATE\n  << : *FILTER_TEMPLATE\n  merge_base_script:\n    # Require git (used in fingerprint_script).\n    - git --version || ( apt-get update && apt-get install -y git )\n    - if [ \"$CIRRUS_PR\" = \"\" ]; then exit 0; fi\n    - git fetch --depth=1 $CIRRUS_REPO_CLONE_URL \"pull/${CIRRUS_PR}/merge\"\n    - git checkout FETCH_HEAD  # Use merged changes to detect silent merge conflicts\n                               # Also, the merge commit is used to lint COMMIT_RANGE=\"HEAD~..HEAD\"\n\nmain_template: &MAIN_TEMPLATE\n  timeout_in: 120m  # https://cirrus-ci.org/faq/#instance-timed-out\n  ci_script:\n    - ./ci/test_run_all.sh\n\nglobal_task_template: &GLOBAL_TASK_TEMPLATE\n  << : *BASE_TEMPLATE\n  << : *MAIN_TEMPLATE\n\ncompute_credits_template: &CREDITS_TEMPLATE\n  # https://cirrus-ci.org/pricing/#compute-credits\n  # Only use credits for pull requests to the main repo\n  use_compute_credits: $CIRRUS_REPO_FULL_NAME == 'bitcoin/bitcoin' && $CIRRUS_PR != \"\"\n\ntask:\n  name: 'lint'\n  << : *BASE_TEMPLATE\n  container:\n    image: debian:bookworm\n    cpu: 1\n    memory: 1G\n  # For faster CI feedback, immediately schedule the linters\n  << : *CREDITS_TEMPLATE\n  test_runner_cache:\n    folder: \"/lint_test_runner\"\n    fingerprint_script: echo $CIRRUS_TASK_NAME $(git rev-parse HEAD:test/lint/test_runner)\n  python_cache:\n    folder: \"/python_build\"\n    fingerprint_script: cat .python-version /etc/os-release\n  unshallow_script:\n    - git fetch --unshallow --no-tags\n  lint_script:\n    - ./ci/lint_run_all.sh\n\ntask:\n  name: 'tidy'\n  << : *GLOBAL_TASK_TEMPLATE\n  persistent_worker:\n    labels:\n      type: medium\n  env:\n    FILE_ENV: \"./ci/test/00_setup_env_native_tidy.sh\"\n\ntask:\n  name: 'ARM, unit tests, no functional tests'\n  << : *GLOBAL_TASK_TEMPLATE\n  persistent_worker:\n    labels:\n      type: arm64  # Use arm64 worker to sidestep qemu and avoid a slow CI: https://github.com/bitcoin/bitcoin/pull/28087#issuecomment-1649399453\n  env:\n    FILE_ENV: \"./ci/test/00_setup_env_arm.sh\"\n\ntask:\n  name: 'Win64-cross'\n  << : *GLOBAL_TASK_TEMPLATE\n  persistent_worker:\n    labels:\n      type: small\n  env:\n    FILE_ENV: \"./ci/test/00_setup_env_win64.sh\"\n\ntask:\n  name: '32-bit CentOS, dash, gui'\n  << : *GLOBAL_TASK_TEMPLATE\n  persistent_worker:\n    labels:\n      type: small\n  env:\n    FILE_ENV: \"./ci/test/00_setup_env_i686_centos.sh\"\n\ntask:\n  name: 'previous releases, depends DEBUG'\n  << : *GLOBAL_TASK_TEMPLATE\n  persistent_worker:\n    labels:\n      type: small\n  env:\n    FILE_ENV: \"./ci/test/00_setup_env_native_previous_releases.sh\"\n\ntask:\n  name: 'TSan, depends, gui'\n  << : *GLOBAL_TASK_TEMPLATE\n  persistent_worker:\n    labels:\n      type: medium\n  env:\n    FILE_ENV: \"./ci/test/00_setup_env_native_tsan.sh\"\n\ntask:\n  name: 'MSan, depends'\n  << : *GLOBAL_TASK_TEMPLATE\n  persistent_worker:\n    labels:\n      type: small\n  timeout_in: 300m  # Use longer timeout for the *rare* case where a full build (llvm + msan + depends + ...) needs to be done.\n  env:\n    FILE_ENV: \"./ci/test/00_setup_env_native_msan.sh\"\n\ntask:\n  name: 'fuzzer,address,undefined,integer, no depends'\n  << : *GLOBAL_TASK_TEMPLATE\n  persistent_worker:\n    labels:\n      type: medium\n  env:\n    FILE_ENV: \"./ci/test/00_setup_env_native_fuzz.sh\"\n\ntask:\n  name: 'multiprocess, i686, DEBUG'\n  << : *GLOBAL_TASK_TEMPLATE\n  persistent_worker:\n    labels:\n      type: medium\n  env:\n    FILE_ENV: \"./ci/test/00_setup_env_i686_multiprocess.sh\"\n\ntask:\n  name: 'no wallet, libbitcoinkernel'\n  << : *GLOBAL_TASK_TEMPLATE\n  persistent_worker:\n    labels:\n      type: small\n  env:\n    FILE_ENV: \"./ci/test/00_setup_env_native_nowallet_libbitcoinkernel.sh\"\n\ntask:\n  name: 'macOS-cross, gui, no tests'\n  << : *GLOBAL_TASK_TEMPLATE\n  persistent_worker:\n    labels:\n      type: small\n  env:\n    FILE_ENV: \"./ci/test/00_setup_env_mac_cross.sh\"\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4287109375,
          "content": "# This is the top-most EditorConfig file.\nroot = true\n\n# For all files.\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n# Source code files\n[*.{h,cpp,rs,py,sh}]\nindent_size = 4\n\n# .cirrus.yml, etc.\n[*.yml]\nindent_size = 2\n\n# Makefiles (only relevant for depends build)\n[Makefile]\nindent_style = tab\n\n# CMake files\n[{CMakeLists.txt,*.cmake,*.cmake.in}]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0341796875,
          "content": "src/clientversion.cpp export-subst\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2861328125,
          "content": "# Build subdirectories.\n/*build*\n!/build-aux\n!/build_msvc\n\n*.pyc\n\n# Only ignore unexpected patches\n*.patch\n!contrib/guix/patches/*.patch\n!depends/patches/**/*.patch\n\n/CMakeUserPresets.json\n\n# Previous releases\n/releases\n\n#build tests\ntest/lint/test_runner/target/\n\n/guix-build-*\n\n/ci/scratch/\n"
        },
        {
          "name": ".python-version",
          "type": "blob",
          "size": 0.0078125,
          "content": "3.10.14\n"
        },
        {
          "name": ".style.yapf",
          "type": "blob",
          "size": 7.755859375,
          "content": "[style]\n# Align closing bracket with visual indentation.\nalign_closing_bracket_with_visual_indent=True\n\n# Allow dictionary keys to exist on multiple lines. For example:\n#\n#   x = {\n#       ('this is the first element of a tuple',\n#        'this is the second element of a tuple'):\n#            value,\n#   }\nallow_multiline_dictionary_keys=False\n\n# Allow lambdas to be formatted on more than one line.\nallow_multiline_lambdas=False\n\n# Allow splits before the dictionary value.\nallow_split_before_dict_value=True\n\n# Number of blank lines surrounding top-level function and class\n# definitions.\nblank_lines_around_top_level_definition=2\n\n# Insert a blank line before a class-level docstring.\nblank_line_before_class_docstring=False\n\n# Insert a blank line before a module docstring.\nblank_line_before_module_docstring=False\n\n# Insert a blank line before a 'def' or 'class' immediately nested\n# within another 'def' or 'class'. For example:\n#\n#   class Foo:\n#                      # <------ this blank line\n#     def method():\n#       ...\nblank_line_before_nested_class_or_def=False\n\n# Do not split consecutive brackets. Only relevant when\n# dedent_closing_brackets is set. For example:\n#\n#    call_func_that_takes_a_dict(\n#        {\n#            'key1': 'value1',\n#            'key2': 'value2',\n#        }\n#    )\n#\n# would reformat to:\n#\n#    call_func_that_takes_a_dict({\n#        'key1': 'value1',\n#        'key2': 'value2',\n#    })\ncoalesce_brackets=False\n\n# The column limit.\ncolumn_limit=160\n\n# The style for continuation alignment. Possible values are:\n#\n# - SPACE: Use spaces for continuation alignment. This is default behavior.\n# - FIXED: Use fixed number (CONTINUATION_INDENT_WIDTH) of columns\n#   (ie: CONTINUATION_INDENT_WIDTH/INDENT_WIDTH tabs) for continuation\n#   alignment.\n# - LESS: Slightly left if cannot vertically align continuation lines with\n#   indent characters.\n# - VALIGN-RIGHT: Vertically align continuation lines with indent\n#   characters. Slightly right (one more indent character) if cannot\n#   vertically align continuation lines with indent characters.\n#\n# For options FIXED, and VALIGN-RIGHT are only available when USE_TABS is\n# enabled.\ncontinuation_align_style=SPACE\n\n# Indent width used for line continuations.\ncontinuation_indent_width=4\n\n# Put closing brackets on a separate line, dedented, if the bracketed\n# expression can't fit in a single line. Applies to all kinds of brackets,\n# including function definitions and calls. For example:\n#\n#   config = {\n#       'key1': 'value1',\n#       'key2': 'value2',\n#   }        # <--- this bracket is dedented and on a separate line\n#\n#   time_series = self.remote_client.query_entity_counters(\n#       entity='dev3246.region1',\n#       key='dns.query_latency_tcp',\n#       transform=Transformation.AVERAGE(window=timedelta(seconds=60)),\n#       start_ts=now()-timedelta(days=3),\n#       end_ts=now(),\n#   )        # <--- this bracket is dedented and on a separate line\ndedent_closing_brackets=False\n\n# Disable the heuristic which places each list element on a separate line\n# if the list is comma-terminated.\ndisable_ending_comma_heuristic=False\n\n# Place each dictionary entry onto its own line.\neach_dict_entry_on_separate_line=True\n\n# The regex for an i18n comment. The presence of this comment stops\n# reformatting of that line, because the comments are required to be\n# next to the string they translate.\ni18n_comment=\n\n# The i18n function call names. The presence of this function stops\n# reformatting on that line, because the string it has cannot be moved\n# away from the i18n comment.\ni18n_function_call=\n\n# Indent the dictionary value if it cannot fit on the same line as the\n# dictionary key. For example:\n#\n#   config = {\n#       'key1':\n#           'value1',\n#       'key2': value1 +\n#               value2,\n#   }\nindent_dictionary_value=False\n\n# The number of columns to use for indentation.\nindent_width=4\n\n# Join short lines into one line. E.g., single line 'if' statements.\njoin_multiple_lines=True\n\n# Do not include spaces around selected binary operators. For example:\n#\n#   1 + 2 * 3 - 4 / 5\n#\n# will be formatted as follows when configured with \"*,/\":\n#\n#   1 + 2*3 - 4/5\n#\nno_spaces_around_selected_binary_operators=\n\n# Use spaces around default or named assigns.\nspaces_around_default_or_named_assign=False\n\n# Use spaces around the power operator.\nspaces_around_power_operator=False\n\n# The number of spaces required before a trailing comment.\nspaces_before_comment=2\n\n# Insert a space between the ending comma and closing bracket of a list,\n# etc.\nspace_between_ending_comma_and_closing_bracket=True\n\n# Split before arguments\nsplit_all_comma_separated_values=False\n\n# Split before arguments if the argument list is terminated by a\n# comma.\nsplit_arguments_when_comma_terminated=False\n\n# Set to True to prefer splitting before '&', '|' or '^' rather than\n# after.\nsplit_before_bitwise_operator=True\n\n# Split before the closing bracket if a list or dict literal doesn't fit on\n# a single line.\nsplit_before_closing_bracket=True\n\n# Split before a dictionary or set generator (comp_for). For example, note\n# the split before the 'for':\n#\n#   foo = {\n#       variable: 'Hello world, have a nice day!'\n#       for variable in bar if variable != 42\n#   }\nsplit_before_dict_set_generator=True\n\n# Split before the '.' if we need to split a longer expression:\n#\n#   foo = ('This is a really long string: {}, {}, {}, {}'.format(a, b, c, d))\n#\n# would reformat to something like:\n#\n#   foo = ('This is a really long string: {}, {}, {}, {}'\n#          .format(a, b, c, d))\nsplit_before_dot=False\n\n# Split after the opening paren which surrounds an expression if it doesn't\n# fit on a single line.\nsplit_before_expression_after_opening_paren=False\n\n# If an argument / parameter list is going to be split, then split before\n# the first argument.\nsplit_before_first_argument=False\n\n# Set to True to prefer splitting before 'and' or 'or' rather than\n# after.\nsplit_before_logical_operator=True\n\n# Split named assignments onto individual lines.\nsplit_before_named_assigns=True\n\n# Set to True to split list comprehensions and generators that have\n# non-trivial expressions and multiple clauses before each of these\n# clauses. For example:\n#\n#   result = [\n#       a_long_var + 100 for a_long_var in xrange(1000)\n#       if a_long_var % 10]\n#\n# would reformat to something like:\n#\n#   result = [\n#       a_long_var + 100\n#       for a_long_var in xrange(1000)\n#       if a_long_var % 10]\nsplit_complex_comprehension=False\n\n# The penalty for splitting right after the opening bracket.\nsplit_penalty_after_opening_bracket=30\n\n# The penalty for splitting the line after a unary operator.\nsplit_penalty_after_unary_operator=10000\n\n# The penalty for splitting right before an if expression.\nsplit_penalty_before_if_expr=0\n\n# The penalty of splitting the line around the '&', '|', and '^'\n# operators.\nsplit_penalty_bitwise_operator=300\n\n# The penalty for splitting a list comprehension or generator\n# expression.\nsplit_penalty_comprehension=80\n\n# The penalty for characters over the column limit.\nsplit_penalty_excess_character=7000\n\n# The penalty incurred by adding a line split to the unwrapped line. The\n# more line splits added the higher the penalty.\nsplit_penalty_for_added_line_split=30\n\n# The penalty of splitting a list of \"import as\" names. For example:\n#\n#   from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,\n#                                                             long_argument_2,\n#                                                             long_argument_3)\n#\n# would reformat to something like:\n#\n#   from a_very_long_or_indented_module_name_yada_yad import (\n#       long_argument_1, long_argument_2, long_argument_3)\nsplit_penalty_import_names=0\n\n# The penalty of splitting the line around the 'and' and 'or'\n# operators.\nsplit_penalty_logical_operator=300\n\n# Use the Tab character for indentation.\nuse_tabs=False\n\n"
        },
        {
          "name": ".tx",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 26.576171875,
          "content": "# Copyright (c) 2023-present The Bitcoin Core developers\n# Distributed under the MIT software license, see the accompanying\n# file COPYING or https://opensource.org/license/mit/.\n\n# Ubuntu 22.04 LTS Jammy Jellyfish, https://wiki.ubuntu.com/Releases, EOSS in June 2027:\n#  - CMake 3.22.1, https://packages.ubuntu.com/jammy/cmake\n#\n# Centos Stream 9, https://www.centos.org/cl-vs-cs/#end-of-life, EOL in May 2027:\n#  - CMake 3.26.5, https://mirror.stream.centos.org/9-stream/AppStream/x86_64/os/Packages/\ncmake_minimum_required(VERSION 3.22)\n\nif (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})\n  message(FATAL_ERROR \"In-source builds are not allowed.\")\nendif()\n\n#=============================\n# Project / Package metadata\n#=============================\nset(CLIENT_NAME \"Bitcoin Core\")\nset(CLIENT_VERSION_MAJOR 28)\nset(CLIENT_VERSION_MINOR 99)\nset(CLIENT_VERSION_BUILD 0)\nset(CLIENT_VERSION_RC 0)\nset(CLIENT_VERSION_IS_RELEASE \"false\")\nset(COPYRIGHT_YEAR \"2025\")\n\n# During the enabling of the CXX and CXXOBJ languages, we modify\n# CMake's compiler/linker invocation strings by appending the content\n# of the user-defined `APPEND_*` variables, which allows overriding\n# any flag. We also ensure that the APPEND_* flags are considered\n# during CMake's tests, which use the `try_compile()` command.\n#\n# CMake's docs state that the `CMAKE_TRY_COMPILE_PLATFORM_VARIABLES`\n# variable \"is meant to be set by CMake's platform information modules\n# for the current toolchain, or by a toolchain file.\" We do our best\n# to set it before the `project()` command.\nset(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES\n  CMAKE_CXX_COMPILE_OBJECT\n  CMAKE_OBJCXX_COMPILE_OBJECT\n  CMAKE_CXX_LINK_EXECUTABLE\n)\n\nproject(BitcoinCore\n  VERSION ${CLIENT_VERSION_MAJOR}.${CLIENT_VERSION_MINOR}.${CLIENT_VERSION_BUILD}\n  DESCRIPTION \"Bitcoin client software\"\n  HOMEPAGE_URL \"https://bitcoincore.org/\"\n  LANGUAGES NONE\n)\n\nset(CLIENT_VERSION_STRING ${PROJECT_VERSION})\nif(CLIENT_VERSION_RC GREATER 0)\n  string(APPEND CLIENT_VERSION_STRING \"rc${CLIENT_VERSION_RC}\")\nendif()\n\nset(COPYRIGHT_HOLDERS \"The %s developers\")\nset(COPYRIGHT_HOLDERS_FINAL \"The ${CLIENT_NAME} developers\")\nset(CLIENT_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\")\n\n#=============================\n# Language setup\n#=============================\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\" AND NOT CMAKE_HOST_APPLE)\n  # We do not use the install_name_tool when cross-compiling for macOS.\n  # So disable this tool check in further enable_language() commands.\n  set(CMAKE_PLATFORM_HAS_INSTALLNAME FALSE)\nendif()\nenable_language(CXX)\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nlist(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/module)\n\n#=============================\n# Configurable options\n#=============================\ninclude(CMakeDependentOption)\n# When adding a new option, end the <help_text> with a full stop for consistency.\noption(BUILD_DAEMON \"Build bitcoind executable.\" ON)\noption(BUILD_GUI \"Build bitcoin-qt executable.\" OFF)\noption(BUILD_CLI \"Build bitcoin-cli executable.\" ON)\n\noption(BUILD_TESTS \"Build test_bitcoin executable.\" ON)\noption(BUILD_TX \"Build bitcoin-tx executable.\" ${BUILD_TESTS})\noption(BUILD_UTIL \"Build bitcoin-util executable.\" ${BUILD_TESTS})\n\noption(BUILD_UTIL_CHAINSTATE \"Build experimental bitcoin-chainstate executable.\" OFF)\noption(BUILD_KERNEL_LIB \"Build experimental bitcoinkernel library.\" ${BUILD_UTIL_CHAINSTATE})\n\noption(ENABLE_WALLET \"Enable wallet.\" ON)\noption(WITH_SQLITE \"Enable SQLite wallet support.\" ${ENABLE_WALLET})\nif(WITH_SQLITE)\n  if(VCPKG_TARGET_TRIPLET)\n    # Use of the `unofficial::` namespace is a vcpkg package manager convention.\n    find_package(unofficial-sqlite3 CONFIG REQUIRED)\n  else()\n    find_package(SQLite3 3.7.17 REQUIRED)\n  endif()\n  set(USE_SQLITE ON)\nendif()\noption(WITH_BDB \"Enable Berkeley DB (BDB) wallet support.\" OFF)\ncmake_dependent_option(WARN_INCOMPATIBLE_BDB \"Warn when using a Berkeley DB (BDB) version other than 4.8.\" ON \"WITH_BDB\" OFF)\nif(WITH_BDB)\n  find_package(BerkeleyDB 4.8 MODULE REQUIRED)\n  set(USE_BDB ON)\n  if(NOT BerkeleyDB_VERSION VERSION_EQUAL 4.8)\n    message(WARNING \"Found Berkeley DB (BDB) other than 4.8.\\n\"\n                    \"BDB (legacy) wallets opened by this build will not be portable!\"\n    )\n    if(WARN_INCOMPATIBLE_BDB)\n      message(WARNING \"If this is intended, pass \\\"-DWARN_INCOMPATIBLE_BDB=OFF\\\".\\n\"\n                      \"Passing \\\"-DWITH_BDB=OFF\\\" will suppress this warning.\"\n      )\n    endif()\n  endif()\nendif()\ncmake_dependent_option(BUILD_WALLET_TOOL \"Build bitcoin-wallet tool.\" ${BUILD_TESTS} \"ENABLE_WALLET\" OFF)\n\noption(ENABLE_HARDENING \"Attempt to harden the resulting executables.\" ON)\noption(REDUCE_EXPORTS \"Attempt to reduce exported symbols in the resulting executables.\" OFF)\noption(WERROR \"Treat compiler warnings as errors.\" OFF)\noption(WITH_CCACHE \"Attempt to use ccache for compiling.\" ON)\n\noption(WITH_ZMQ \"Enable ZMQ notifications.\" OFF)\nif(WITH_ZMQ)\n  find_package(ZeroMQ 4.0.0 MODULE REQUIRED)\nendif()\n\noption(WITH_USDT \"Enable tracepoints for Userspace, Statically Defined Tracing.\" OFF)\nif(WITH_USDT)\n  find_package(USDT MODULE REQUIRED)\nendif()\n\ncmake_dependent_option(ENABLE_EXTERNAL_SIGNER \"Enable external signer support.\" ON \"NOT WIN32\" OFF)\n\ncmake_dependent_option(WITH_QRENCODE \"Enable QR code support.\" ON \"BUILD_GUI\" OFF)\nif(WITH_QRENCODE)\n  find_package(QRencode MODULE REQUIRED)\n  set(USE_QRCODE TRUE)\nendif()\n\ncmake_dependent_option(WITH_DBUS \"Enable DBus support.\" ON \"CMAKE_SYSTEM_NAME STREQUAL \\\"Linux\\\" AND BUILD_GUI\" OFF)\n\noption(WITH_MULTIPROCESS \"Build multiprocess bitcoin-node and bitcoin-gui executables in addition to monolithic bitcoind and bitcoin-qt executables. Requires libmultiprocess library. Experimental.\" OFF)\nif(WITH_MULTIPROCESS)\n  find_package(Libmultiprocess COMPONENTS Lib)\n  find_package(LibmultiprocessNative COMPONENTS Bin\n    NAMES Libmultiprocess\n  )\nendif()\n\ncmake_dependent_option(BUILD_GUI_TESTS \"Build test_bitcoin-qt executable.\" ON \"BUILD_GUI;BUILD_TESTS\" OFF)\nif(BUILD_GUI)\n  set(qt_components Core Gui Widgets LinguistTools)\n  if(ENABLE_WALLET)\n    list(APPEND qt_components Network)\n  endif()\n  if(WITH_DBUS)\n    list(APPEND qt_components DBus)\n    set(USE_DBUS TRUE)\n  endif()\n  if(BUILD_GUI_TESTS)\n    list(APPEND qt_components Test)\n  endif()\n  find_package(Qt 5.11.3 MODULE REQUIRED\n    COMPONENTS ${qt_components}\n  )\n  unset(qt_components)\nendif()\n\noption(BUILD_BENCH \"Build bench_bitcoin executable.\" OFF)\noption(BUILD_FUZZ_BINARY \"Build fuzz binary.\" OFF)\noption(BUILD_FOR_FUZZING \"Build for fuzzing. Enabling this will disable all other targets and override BUILD_FUZZ_BINARY.\" OFF)\n\noption(INSTALL_MAN \"Install man pages.\" ON)\n\nset(APPEND_CPPFLAGS \"\" CACHE STRING \"Preprocessor flags that are appended to the command line after all other flags added by the build system. This variable is intended for debugging and special builds.\")\nset(APPEND_CFLAGS \"\" CACHE STRING \"C compiler flags that are appended to the command line after all other flags added by the build system. This variable is intended for debugging and special builds.\")\nset(APPEND_CXXFLAGS \"\" CACHE STRING \"(Objective) C++ compiler flags that are appended to the command line after all other flags added by the build system. This variable is intended for debugging and special builds.\")\nset(APPEND_LDFLAGS \"\" CACHE STRING \"Linker flags that are appended to the command line after all other flags added by the build system. This variable is intended for debugging and special builds.\")\n# Appending to this low-level rule variables is the only way to\n# guarantee that the flags appear at the end of the command line.\nstring(APPEND CMAKE_CXX_COMPILE_OBJECT \" ${APPEND_CPPFLAGS} ${APPEND_CXXFLAGS}\")\nstring(APPEND CMAKE_CXX_CREATE_SHARED_LIBRARY \" ${APPEND_LDFLAGS}\")\nstring(APPEND CMAKE_CXX_LINK_EXECUTABLE \" ${APPEND_LDFLAGS}\")\n\nset(configure_warnings)\n\ninclude(CheckPIESupported)\ncheck_pie_supported(OUTPUT_VARIABLE check_pie_output LANGUAGES CXX)\nif(CMAKE_CXX_LINK_PIE_SUPPORTED)\n  set(CMAKE_POSITION_INDEPENDENT_CODE ON)\nelseif(NOT WIN32)\n  # The warning is superfluous for Windows.\n  message(WARNING \"PIE is not supported at link time: ${check_pie_output}\")\n  list(APPEND configure_warnings \"Position independent code disabled.\")\nendif()\nunset(check_pie_output)\n\n# The core_interface library aims to encapsulate common build flags.\n# It is a usage requirement for all targets except for secp256k1, which\n# gets its flags by other means.\nadd_library(core_interface INTERFACE)\nadd_library(core_interface_relwithdebinfo INTERFACE)\nadd_library(core_interface_debug INTERFACE)\ntarget_link_libraries(core_interface INTERFACE\n  $<$<CONFIG:RelWithDebInfo>:core_interface_relwithdebinfo>\n  $<$<CONFIG:Debug>:core_interface_debug>\n)\n\nif(BUILD_FOR_FUZZING)\n  message(WARNING \"BUILD_FOR_FUZZING=ON will disable all other targets and force BUILD_FUZZ_BINARY=ON.\")\n  set(BUILD_DAEMON OFF)\n  set(BUILD_CLI OFF)\n  set(BUILD_TX OFF)\n  set(BUILD_UTIL OFF)\n  set(BUILD_UTIL_CHAINSTATE OFF)\n  set(BUILD_KERNEL_LIB OFF)\n  set(BUILD_WALLET_TOOL OFF)\n  set(BUILD_GUI OFF)\n  set(ENABLE_EXTERNAL_SIGNER OFF)\n  set(WITH_ZMQ OFF)\n  set(BUILD_TESTS OFF)\n  set(BUILD_GUI_TESTS OFF)\n  set(BUILD_BENCH OFF)\n  set(BUILD_FUZZ_BINARY ON)\n\n  target_compile_definitions(core_interface INTERFACE\n    FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION\n  )\nendif()\n\ninclude(ProcessConfigurations)\n\ninclude(TryAppendCXXFlags)\ninclude(TryAppendLinkerFlag)\n\nif(WIN32)\n  #[=[\n  This build system supports two ways to build binaries for Windows.\n\n  1. Building on Windows using MSVC.\n  Implementation notes:\n  - /DWIN32 and /D_WINDOWS definitions are included into the CMAKE_CXX_FLAGS_INIT\n    and CMAKE_CXX_FLAGS_INIT variables by default.\n  - A run-time library is selected using the CMAKE_MSVC_RUNTIME_LIBRARY variable.\n  - MSVC-specific options, for example, /Zc:__cplusplus, are additionally required.\n\n  2. Cross-compiling using MinGW.\n  Implementation notes:\n  - WIN32 and _WINDOWS definitions must be provided explicitly.\n  - A run-time library must be specified explicitly using _MT definition.\n  ]=]\n\n  target_compile_definitions(core_interface INTERFACE\n    _WIN32_WINNT=0x0A00\n    _WIN32_IE=0x0A00\n    WIN32_LEAN_AND_MEAN\n    NOMINMAX\n  )\n\n  if(MSVC)\n    if(VCPKG_TARGET_TRIPLET MATCHES \"-static\")\n      set(msvc_library_linkage \"\")\n    else()\n      set(msvc_library_linkage \"DLL\")\n    endif()\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>${msvc_library_linkage}\")\n    unset(msvc_library_linkage)\n\n    target_compile_definitions(core_interface INTERFACE\n      _UNICODE;UNICODE\n    )\n    target_compile_options(core_interface INTERFACE\n      /utf-8\n      /Zc:preprocessor\n      /Zc:__cplusplus\n      /sdl\n    )\n    # Improve parallelism in MSBuild.\n    # See: https://devblogs.microsoft.com/cppblog/improved-parallelism-in-msbuild/.\n    list(APPEND CMAKE_VS_GLOBALS \"UseMultiToolTask=true\")\n  endif()\n\n  if(MINGW)\n    target_compile_definitions(core_interface INTERFACE\n      WIN32\n      _WINDOWS\n      _MT\n    )\n    # Avoid the use of aligned vector instructions when building for Windows.\n    # See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412.\n    try_append_cxx_flags(\"-Wa,-muse-unaligned-vector-move\" TARGET core_interface SKIP_LINK)\n    try_append_linker_flag(\"-static\" TARGET core_interface)\n    # We support Windows 10+, however it's not possible to set these values accordingly,\n    # due to a bug in mingw-w64. See https://sourceforge.net/p/mingw-w64/bugs/968/.\n    # As a best effort, target Windows 8.\n    try_append_linker_flag(\"-Wl,--major-subsystem-version,6\" TARGET core_interface)\n    try_append_linker_flag(\"-Wl,--minor-subsystem-version,2\" TARGET core_interface)\n  endif()\n\n  # Workaround producing large object files, which cannot be handled by the assembler.\n  # More likely to happen with no, or lower levels of optimisation.\n  # See discussion in https://github.com/bitcoin/bitcoin/issues/28109.\n  if(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    try_append_cxx_flags(\"/bigobj\" TARGET core_interface_debug SKIP_LINK)\n  else()\n    try_append_cxx_flags(\"-Wa,-mbig-obj\" TARGET core_interface_debug SKIP_LINK)\n  endif()\nendif()\n\n# Use 64-bit off_t on 32-bit Linux.\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\" AND CMAKE_SIZEOF_VOID_P EQUAL 4)\n  # Ensure 64-bit offsets are used for filesystem accesses for 32-bit compilation.\n  target_compile_definitions(core_interface INTERFACE\n    _FILE_OFFSET_BITS=64\n  )\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  target_compile_definitions(core_interface INTERFACE OBJC_OLD_DISPATCH_PROTOTYPES=0)\n  # These flags are specific to ld64, and may cause issues with other linkers.\n  # For example: GNU ld will interpret -dead_strip as -de and then try and use\n  # \"ad_strip\" as the symbol for the entry point.\n  try_append_linker_flag(\"-Wl,-dead_strip\" TARGET core_interface)\n  try_append_linker_flag(\"-Wl,-dead_strip_dylibs\" TARGET core_interface)\n  if(CMAKE_HOST_APPLE)\n    try_append_linker_flag(\"-Wl,-headerpad_max_install_names\" TARGET core_interface)\n  endif()\nendif()\n\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\ntarget_link_libraries(core_interface INTERFACE\n  Threads::Threads\n)\n\nadd_library(sanitize_interface INTERFACE)\ntarget_link_libraries(core_interface INTERFACE sanitize_interface)\nif(SANITIZERS)\n  # First check if the compiler accepts flags. If an incompatible pair like\n  # -fsanitize=address,thread is used here, this check will fail. This will also\n  # fail if a bad argument is passed, e.g. -fsanitize=undfeined\n  try_append_cxx_flags(\"-fsanitize=${SANITIZERS}\" TARGET sanitize_interface\n    RESULT_VAR cxx_supports_sanitizers\n    SKIP_LINK\n  )\n  if(NOT cxx_supports_sanitizers)\n    message(FATAL_ERROR \"Compiler did not accept requested flags.\")\n  endif()\n\n  # Some compilers (e.g. GCC) require additional libraries like libasan,\n  # libtsan, libubsan, etc. Make sure linking still works with the sanitize\n  # flag. This is a separate check so we can give a better error message when\n  # the sanitize flags are supported by the compiler but the actual sanitizer\n  # libs are missing.\n  try_append_linker_flag(\"-fsanitize=${SANITIZERS}\" VAR SANITIZER_LDFLAGS\n    SOURCE \"\n      #include <cstdint>\n      #include <cstddef>\n      extern \\\"C\\\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) { return 0; }\n      __attribute__((weak)) // allow for libFuzzer linking\n      int main() { return 0; }\n    \"\n    RESULT_VAR linker_supports_sanitizers\n  )\n  if(NOT linker_supports_sanitizers)\n    message(FATAL_ERROR \"Linker did not accept requested flags, you are missing required libraries.\")\n  endif()\nendif()\ntarget_link_options(sanitize_interface INTERFACE ${SANITIZER_LDFLAGS})\n\nif(BUILD_FUZZ_BINARY)\n  include(CheckSourceCompilesAndLinks)\n  check_cxx_source_links_with_flags(\"${SANITIZER_LDFLAGS}\" \"\n      #include <cstdint>\n      #include <cstddef>\n      extern \\\"C\\\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) { return 0; }\n      // No main() function.\n    \" FUZZ_BINARY_LINKS_WITHOUT_MAIN_FUNCTION\n  )\nendif()\n\ninclude(AddBoostIfNeeded)\nadd_boost_if_needed()\n\nif(BUILD_DAEMON OR BUILD_GUI OR BUILD_CLI OR BUILD_TESTS OR BUILD_BENCH OR BUILD_FUZZ_BINARY)\n  find_package(Libevent 2.1.8 MODULE REQUIRED)\nendif()\n\ninclude(cmake/introspection.cmake)\n\ninclude(cmake/ccache.cmake)\n\nadd_library(warn_interface INTERFACE)\ntarget_link_libraries(core_interface INTERFACE warn_interface)\nif(MSVC)\n  try_append_cxx_flags(\"/W3\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"/wd4018\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"/wd4244\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"/wd4267\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"/wd4715\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"/wd4805\" TARGET warn_interface SKIP_LINK)\n  target_compile_definitions(warn_interface INTERFACE\n    _CRT_SECURE_NO_WARNINGS\n    _SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING\n  )\nelse()\n  try_append_cxx_flags(\"-Wall\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wextra\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wgnu\" TARGET warn_interface SKIP_LINK)\n  # Some compilers will ignore -Wformat-security without -Wformat, so just combine the two here.\n  try_append_cxx_flags(\"-Wformat -Wformat-security\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wvla\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wshadow-field\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wthread-safety\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wloop-analysis\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wredundant-decls\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wunused-member-function\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wdate-time\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wconditional-uninitialized\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wduplicated-branches\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wduplicated-cond\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wlogical-op\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Woverloaded-virtual\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wsuggest-override\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wimplicit-fallthrough\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wunreachable-code\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wdocumentation\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wself-assign\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wbidi-chars=any\" TARGET warn_interface SKIP_LINK)\n  try_append_cxx_flags(\"-Wundef\" TARGET warn_interface SKIP_LINK)\n\n  # Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n  # unknown options if any other warning is produced. Test the -Wfoo case, and\n  # set the -Wno-foo case if it works.\n  try_append_cxx_flags(\"-Wunused-parameter\" TARGET warn_interface SKIP_LINK\n    IF_CHECK_PASSED \"-Wno-unused-parameter\"\n  )\nendif()\n\nconfigure_file(cmake/script/Coverage.cmake Coverage.cmake USE_SOURCE_PERMISSIONS COPYONLY)\nconfigure_file(cmake/script/CoverageFuzz.cmake CoverageFuzz.cmake USE_SOURCE_PERMISSIONS COPYONLY)\nconfigure_file(cmake/script/CoverageInclude.cmake.in CoverageInclude.cmake USE_SOURCE_PERMISSIONS @ONLY)\nconfigure_file(contrib/filter-lcov.py filter-lcov.py USE_SOURCE_PERMISSIONS COPYONLY)\n\n# Don't allow extended (non-ASCII) symbols in identifiers. This is easier for code review.\ntry_append_cxx_flags(\"-fno-extended-identifiers\" TARGET core_interface SKIP_LINK)\n\n# Avoiding the `-ffile-prefix-map` compiler option because it implies\n# `-fcoverage-prefix-map` on Clang or `-fprofile-prefix-map` on GCC,\n# which can cause issues with coverage builds, particularly when using\n# Clang in the OSS-Fuzz environment due to its use of other options\n# and a third party script, or with GCC.\ntry_append_cxx_flags(\"-fdebug-prefix-map=A=B\" TARGET core_interface SKIP_LINK\n  IF_CHECK_PASSED \"-fdebug-prefix-map=${PROJECT_SOURCE_DIR}/src=.\"\n)\ntry_append_cxx_flags(\"-fmacro-prefix-map=A=B\" TARGET core_interface SKIP_LINK\n  IF_CHECK_PASSED \"-fmacro-prefix-map=${PROJECT_SOURCE_DIR}/src=.\"\n)\n\n# Currently all versions of gcc are subject to a class of bugs, see the\n# gccbug_90348 test case (only reproduces on GCC 11 and earlier) and\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=111843. To work around that, set\n# -fstack-reuse=none for all gcc builds. (Only gcc understands this flag).\ntry_append_cxx_flags(\"-fstack-reuse=none\" TARGET core_interface)\n\nif(ENABLE_HARDENING)\n  add_library(hardening_interface INTERFACE)\n  target_link_libraries(core_interface INTERFACE hardening_interface)\n  if(MSVC)\n    try_append_linker_flag(\"/DYNAMICBASE\" TARGET hardening_interface)\n    try_append_linker_flag(\"/HIGHENTROPYVA\" TARGET hardening_interface)\n    try_append_linker_flag(\"/NXCOMPAT\" TARGET hardening_interface)\n  else()\n\n    # _FORTIFY_SOURCE requires that there is some level of optimization,\n    # otherwise it does nothing and just creates a compiler warning.\n    try_append_cxx_flags(\"-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3\"\n      RESULT_VAR cxx_supports_fortify_source\n      SOURCE \"int main() {\n              # if !defined __OPTIMIZE__ || __OPTIMIZE__ <= 0\n                #error\n              #endif\n              }\"\n    )\n    if(cxx_supports_fortify_source)\n      target_compile_options(hardening_interface INTERFACE\n        -U_FORTIFY_SOURCE\n        -D_FORTIFY_SOURCE=3\n      )\n    endif()\n    unset(cxx_supports_fortify_source)\n\n    try_append_cxx_flags(\"-Wstack-protector\" TARGET hardening_interface SKIP_LINK)\n    try_append_cxx_flags(\"-fstack-protector-all\" TARGET hardening_interface)\n    try_append_cxx_flags(\"-fcf-protection=full\" TARGET hardening_interface)\n\n    if(MINGW)\n      # stack-clash-protection is a no-op for Windows.\n      # See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90458 for more details.\n    else()\n      try_append_cxx_flags(\"-fstack-clash-protection\" TARGET hardening_interface)\n    endif()\n\n    if(CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\" OR CMAKE_SYSTEM_PROCESSOR STREQUAL \"arm64\")\n      if(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n        try_append_cxx_flags(\"-mbranch-protection=bti\" TARGET hardening_interface SKIP_LINK)\n      else()\n        try_append_cxx_flags(\"-mbranch-protection=standard\" TARGET hardening_interface SKIP_LINK)\n      endif()\n    endif()\n\n    try_append_linker_flag(\"-Wl,--enable-reloc-section\" TARGET hardening_interface)\n    try_append_linker_flag(\"-Wl,--dynamicbase\" TARGET hardening_interface)\n    try_append_linker_flag(\"-Wl,--nxcompat\" TARGET hardening_interface)\n    try_append_linker_flag(\"-Wl,--high-entropy-va\" TARGET hardening_interface)\n    try_append_linker_flag(\"-Wl,-z,relro\" TARGET hardening_interface)\n    try_append_linker_flag(\"-Wl,-z,now\" TARGET hardening_interface)\n    try_append_linker_flag(\"-Wl,-z,separate-code\" TARGET hardening_interface)\n    if(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n      try_append_linker_flag(\"-Wl,-fixup_chains\" TARGET hardening_interface)\n    endif()\n  endif()\nendif()\n\nif(REDUCE_EXPORTS)\n  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n  try_append_linker_flag(\"-Wl,--exclude-libs,ALL\" TARGET core_interface)\n  try_append_linker_flag(\"-Wl,-no_exported_symbols\" VAR CMAKE_EXE_LINKER_FLAGS)\nendif()\n\nif(WERROR)\n  if(MSVC)\n    set(werror_flag \"/WX\")\n  else()\n    set(werror_flag \"-Werror\")\n  endif()\n  try_append_cxx_flags(${werror_flag} TARGET core_interface SKIP_LINK RESULT_VAR compiler_supports_werror)\n  if(NOT compiler_supports_werror)\n    message(FATAL_ERROR \"WERROR set but ${werror_flag} is not usable.\")\n  endif()\n  unset(werror_flag)\nendif()\n\nfind_package(Python3 3.10 COMPONENTS Interpreter)\nif(Python3_EXECUTABLE)\n  set(PYTHON_COMMAND ${Python3_EXECUTABLE})\nelse()\n  list(APPEND configure_warnings\n    \"Minimum required Python not found. Utils and rpcauth tests are disabled.\"\n  )\nendif()\n\ntarget_compile_definitions(core_interface INTERFACE ${DEPENDS_COMPILE_DEFINITIONS})\ntarget_compile_definitions(core_interface_relwithdebinfo INTERFACE ${DEPENDS_COMPILE_DEFINITIONS_RELWITHDEBINFO})\ntarget_compile_definitions(core_interface_debug INTERFACE ${DEPENDS_COMPILE_DEFINITIONS_DEBUG})\n\n# If the {CXX,LD}FLAGS environment variables are defined during building depends\n# and configuring this build system, their content might be duplicated.\nif(DEFINED ENV{CXXFLAGS})\n  deduplicate_flags(CMAKE_CXX_FLAGS)\nendif()\nif(DEFINED ENV{LDFLAGS})\n  deduplicate_flags(CMAKE_EXE_LINKER_FLAGS)\nendif()\n\nif(BUILD_TESTS)\n  enable_testing()\nendif()\n\nif(CMAKE_VERSION VERSION_GREATER_EQUAL 3.29)\n  # have \"make test\" depend on \"make all\"\n  set(CMAKE_SKIP_TEST_ALL_DEPENDENCY FALSE)\nendif()\n\n# TODO: The `CMAKE_SKIP_BUILD_RPATH` variable setting can be deleted\n#       in the future after reordering Guix script commands to\n#       perform binary checks after the installation step.\n# Relevant discussions:\n# - https://github.com/hebasto/bitcoin/pull/236#issuecomment-2183120953\n# - https://github.com/bitcoin/bitcoin/pull/30312#issuecomment-2191235833\nset(CMAKE_SKIP_BUILD_RPATH TRUE)\nset(CMAKE_SKIP_INSTALL_RPATH TRUE)\nadd_subdirectory(test)\nadd_subdirectory(doc)\n\ninclude(cmake/crc32c.cmake)\ninclude(cmake/leveldb.cmake)\ninclude(cmake/minisketch.cmake)\nadd_subdirectory(src)\n\ninclude(cmake/tests.cmake)\n\ninclude(Maintenance)\nsetup_split_debug_script()\nadd_maintenance_targets()\nadd_windows_deploy_target()\nadd_macos_deploy_target()\n\nmessage(\"\\n\")\nmessage(\"Configure summary\")\nmessage(\"=================\")\nmessage(\"Executables:\")\nmessage(\"  bitcoind ............................ ${BUILD_DAEMON}\")\nmessage(\"  bitcoin-node (multiprocess) ......... ${WITH_MULTIPROCESS}\")\nmessage(\"  bitcoin-qt (GUI) .................... ${BUILD_GUI}\")\nif(BUILD_GUI AND WITH_MULTIPROCESS)\n  set(bitcoin_gui_status ON)\nelse()\n  set(bitcoin_gui_status OFF)\nendif()\nmessage(\"  bitcoin-gui (GUI, multiprocess) ..... ${bitcoin_gui_status}\")\nmessage(\"  bitcoin-cli ......................... ${BUILD_CLI}\")\nmessage(\"  bitcoin-tx .......................... ${BUILD_TX}\")\nmessage(\"  bitcoin-util ........................ ${BUILD_UTIL}\")\nmessage(\"  bitcoin-wallet ...................... ${BUILD_WALLET_TOOL}\")\nmessage(\"  bitcoin-chainstate (experimental) ... ${BUILD_UTIL_CHAINSTATE}\")\nmessage(\"  libbitcoinkernel (experimental) ..... ${BUILD_KERNEL_LIB}\")\nmessage(\"Optional features:\")\nmessage(\"  wallet support ...................... ${ENABLE_WALLET}\")\nif(ENABLE_WALLET)\n  message(\"   - descriptor wallets (SQLite) ...... ${WITH_SQLITE}\")\n  message(\"   - legacy wallets (Berkeley DB) ..... ${WITH_BDB}\")\nendif()\nmessage(\"  external signer ..................... ${ENABLE_EXTERNAL_SIGNER}\")\nmessage(\"  ZeroMQ .............................. ${WITH_ZMQ}\")\nmessage(\"  USDT tracing ........................ ${WITH_USDT}\")\nmessage(\"  QR code (GUI) ....................... ${WITH_QRENCODE}\")\nmessage(\"  DBus (GUI, Linux only) .............. ${WITH_DBUS}\")\nmessage(\"Tests:\")\nmessage(\"  test_bitcoin ........................ ${BUILD_TESTS}\")\nmessage(\"  test_bitcoin-qt ..................... ${BUILD_GUI_TESTS}\")\nmessage(\"  bench_bitcoin ....................... ${BUILD_BENCH}\")\nmessage(\"  fuzz binary ......................... ${BUILD_FUZZ_BINARY}\")\nmessage(\"\")\nif(CMAKE_CROSSCOMPILING)\n  set(cross_status \"TRUE, for ${CMAKE_SYSTEM_NAME}, ${CMAKE_SYSTEM_PROCESSOR}\")\nelse()\n  set(cross_status \"FALSE\")\nendif()\nmessage(\"Cross compiling ....................... ${cross_status}\")\nmessage(\"C++ compiler .......................... ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}, ${CMAKE_CXX_COMPILER}\")\ninclude(FlagsSummary)\nflags_summary()\nmessage(\"Attempt to harden executables ......... ${ENABLE_HARDENING}\")\nmessage(\"Treat compiler warnings as errors ..... ${WERROR}\")\nmessage(\"Use ccache for compiling .............. ${WITH_CCACHE}\")\nmessage(\"\\n\")\nif(configure_warnings)\n    message(\"  ******\\n\")\n    foreach(warning IN LISTS configure_warnings)\n      message(WARNING \"${warning}\")\n    endforeach()\n    message(\"  ******\\n\")\nendif()\n\n# We want all build properties to be encapsulated properly.\ninclude(WarnAboutGlobalProperties)\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 2.8525390625,
          "content": "{\n  \"version\": 3,\n  \"cmakeMinimumRequired\": {\"major\": 3, \"minor\": 21, \"patch\": 0},\n  \"configurePresets\": [\n    {\n      \"name\": \"vs2022\",\n      \"displayName\": \"Build using 'Visual Studio 17 2022' generator and 'x64-windows' triplet\",\n      \"condition\": {\n        \"type\": \"equals\",\n        \"lhs\": \"${hostSystemName}\",\n        \"rhs\": \"Windows\"\n      },\n      \"generator\": \"Visual Studio 17 2022\",\n      \"architecture\": \"x64\",\n      \"toolchainFile\": \"$env{VCPKG_ROOT}\\\\scripts\\\\buildsystems\\\\vcpkg.cmake\",\n      \"cacheVariables\": {\n        \"VCPKG_TARGET_TRIPLET\": \"x64-windows\",\n        \"BUILD_GUI\": \"ON\"\n      }\n    },\n    {\n      \"name\": \"vs2022-static\",\n      \"displayName\": \"Build using 'Visual Studio 17 2022' generator and 'x64-windows-static' triplet\",\n      \"condition\": {\n        \"type\": \"equals\",\n        \"lhs\": \"${hostSystemName}\",\n        \"rhs\": \"Windows\"\n      },\n      \"generator\": \"Visual Studio 17 2022\",\n      \"architecture\": \"x64\",\n      \"toolchainFile\": \"$env{VCPKG_ROOT}\\\\scripts\\\\buildsystems\\\\vcpkg.cmake\",\n      \"cacheVariables\": {\n        \"VCPKG_TARGET_TRIPLET\": \"x64-windows-static\",\n        \"BUILD_GUI\": \"ON\"\n      }\n    },\n    {\n      \"name\": \"libfuzzer\",\n      \"displayName\": \"Build for fuzzing with libfuzzer, and sanitizers enabled\",\n      \"binaryDir\": \"${sourceDir}/build_fuzz\",\n      \"cacheVariables\": {\n        \"BUILD_FOR_FUZZING\": \"ON\",\n        \"CMAKE_C_COMPILER\": \"clang\",\n        \"CMAKE_C_FLAGS\": \"-ftrivial-auto-var-init=pattern\",\n        \"CMAKE_CXX_COMPILER\": \"clang++\",\n        \"CMAKE_CXX_FLAGS\": \"-ftrivial-auto-var-init=pattern\",\n        \"SANITIZERS\": \"undefined,address,fuzzer\"\n      }\n    },\n    {\n      \"name\": \"libfuzzer-nosan\",\n      \"displayName\": \"Build for fuzzing with libfuzzer, and sanitizers disabled\",\n      \"binaryDir\": \"${sourceDir}/build_fuzz_nosan\",\n      \"cacheVariables\": {\n        \"BUILD_FOR_FUZZING\": \"ON\",\n        \"CMAKE_C_COMPILER\": \"clang\",\n        \"CMAKE_CXX_COMPILER\": \"clang++\",\n        \"SANITIZERS\": \"fuzzer\"\n      }\n    },\n    {\n      \"name\": \"dev-mode\",\n      \"displayName\": \"Developer mode, with all features/dependencies enabled\",\n      \"binaryDir\": \"${sourceDir}/build_dev_mode\",\n      \"cacheVariables\": {\n        \"BUILD_BENCH\": \"ON\",\n        \"BUILD_CLI\": \"ON\",\n        \"BUILD_DAEMON\": \"ON\",\n        \"BUILD_FUZZ_BINARY\": \"ON\",\n        \"BUILD_GUI\": \"ON\",\n        \"BUILD_GUI_TESTS\": \"ON\",\n        \"BUILD_KERNEL_LIB\": \"ON\",\n        \"BUILD_SHARED_LIBS\": \"ON\",\n        \"BUILD_TESTS\": \"ON\",\n        \"BUILD_TX\": \"ON\",\n        \"BUILD_UTIL\": \"ON\",\n        \"BUILD_UTIL_CHAINSTATE\": \"ON\",\n        \"BUILD_WALLET_TOOL\": \"ON\",\n        \"ENABLE_EXTERNAL_SIGNER\": \"ON\",\n        \"ENABLE_HARDENING\": \"ON\",\n        \"ENABLE_WALLET\": \"ON\",\n        \"WARN_INCOMPATIBLE_BDB\": \"OFF\",\n        \"WITH_BDB\": \"ON\",\n        \"WITH_MULTIPROCESS\": \"ON\",\n        \"WITH_QRENCODE\": \"ON\",\n        \"WITH_SQLITE\": \"ON\",\n        \"WITH_USDT\": \"ON\",\n        \"WITH_ZMQ\": \"ON\"\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 21.0888671875,
          "content": "Contributing to Bitcoin Core\n============================\n\nThe Bitcoin Core project operates an open contributor model where anyone is\nwelcome to contribute towards development in the form of peer review, testing\nand patches. This document explains the practical process and guidelines for\ncontributing.\n\nFirst, in terms of structure, there is no particular concept of \"Bitcoin Core\ndevelopers\" in the sense of privileged people. Open source often naturally\nrevolves around a meritocracy where contributors earn trust from the developer\ncommunity over time. Nevertheless, some hierarchy is necessary for practical\npurposes. As such, there are repository maintainers who are responsible for\nmerging pull requests, the [release cycle](/doc/release-process.md), and\nmoderation.\n\nGetting Started\n---------------\n\nNew contributors are very welcome and needed.\n\nReviewing and testing is highly valued and the most effective way you can contribute\nas a new contributor. It also will teach you much more about the code and\nprocess than opening pull requests. Please refer to the [peer review](#peer-review)\nsection below.\n\nBefore you start contributing, familiarize yourself with the Bitcoin Core build\nsystem and tests. Refer to the documentation in the repository on how to build\nBitcoin Core and how to run the unit tests, functional tests, and fuzz tests.\n\nThere are many open issues of varying difficulty waiting to be fixed.\nIf you're looking for somewhere to start contributing, check out the\n[good first issue](https://github.com/bitcoin/bitcoin/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22)\nlist or changes that are\n[up for grabs](https://github.com/bitcoin/bitcoin/issues?utf8=%E2%9C%93&q=label%3A%22Up+for+grabs%22).\nSome of them might no longer be applicable. So if you are interested, but\nunsure, you might want to leave a comment on the issue first.\n\nYou may also participate in the [Bitcoin Core PR Review Club](https://bitcoincore.reviews/).\n\n### Good First Issue Label\n\nThe purpose of the `good first issue` label is to highlight which issues are\nsuitable for a new contributor without a deep understanding of the codebase.\n\nHowever, good first issues can be solved by anyone. If they remain unsolved\nfor a longer time, a frequent contributor might address them.\n\nYou do not need to request permission to start working on an issue. However,\nyou are encouraged to leave a comment if you are planning to work on it. This\nwill help other contributors monitor which issues are actively being addressed\nand is also an effective way to request assistance if and when you need it.\n\nCommunication Channels\n----------------------\n\nMost communication about Bitcoin Core development happens on IRC, in the\n`#bitcoin-core-dev` channel on Libera Chat. The easiest way to participate on IRC is\nwith the web client, [web.libera.chat](https://web.libera.chat/#bitcoin-core-dev). Chat\nhistory logs can be found\non [https://www.erisian.com.au/bitcoin-core-dev/](https://www.erisian.com.au/bitcoin-core-dev/)\nand [https://gnusha.org/bitcoin-core-dev/](https://gnusha.org/bitcoin-core-dev/).\n\nDiscussion about codebase improvements happens in GitHub issues and pull\nrequests.\n\nThe developer\n[mailing list](https://groups.google.com/g/bitcoindev)\nshould be used to discuss complicated or controversial consensus or P2P protocol changes before working on\na patch set.\nArchives can be found on [https://gnusha.org/pi/bitcoindev/](https://gnusha.org/pi/bitcoindev/).\n\n\nContributor Workflow\n--------------------\n\nThe codebase is maintained using the \"contributor workflow\" where everyone\nwithout exception contributes patch proposals using \"pull requests\" (PRs). This\nfacilitates social contribution, easy testing and peer review.\n\nTo contribute a patch, the workflow is as follows:\n\n  1. Fork repository ([only for the first time](https://docs.github.com/en/get-started/quickstart/fork-a-repo))\n  1. Create topic branch\n  1. Commit patches\n\nFor GUI-related issues or pull requests, the https://github.com/bitcoin-core/gui repository should be used.\nFor all other issues and pull requests, the https://github.com/bitcoin/bitcoin node repository should be used.\n\nThe master branch for all monotree repositories is identical.\n\nAs a rule of thumb, everything that only modifies `src/qt` is a GUI-only pull\nrequest. However:\n\n* For global refactoring or other transversal changes the node repository\n  should be used.\n* For GUI-related build system changes, the node repository should be used\n  because the change needs review by the build systems reviewers.\n* Changes in `src/interfaces` need to go to the node repository because they\n  might affect other components like the wallet.\n\nFor large GUI changes that include build system and interface changes, it is\nrecommended to first open a pull request against the GUI repository. When there\nis agreement to proceed with the changes, a pull request with the build system\nand interfaces changes can be submitted to the node repository.\n\nThe project coding conventions in the [developer notes](doc/developer-notes.md)\nmust be followed.\n\n### Committing Patches\n\nIn general, [commits should be atomic](https://en.wikipedia.org/wiki/Atomic_commit#Atomic_commit_convention)\nand diffs should be easy to read. For this reason, do not mix any formatting\nfixes or code moves with actual code changes.\n\nMake sure each individual commit is hygienic: that it builds successfully on its\nown without warnings, errors, regressions, or test failures.\n\nCommit messages should be verbose by default consisting of a short subject line\n(50 chars max), a blank line and detailed explanatory text as separate\nparagraph(s), unless the title alone is self-explanatory (like \"Correct typo\nin init.cpp\") in which case a single title line is sufficient. Commit messages should be\nhelpful to people reading your code in the future, so explain the reasoning for\nyour decisions. Further explanation [here](https://chris.beams.io/posts/git-commit/).\n\nIf a particular commit references another issue, please add the reference. For\nexample: `refs #1234` or `fixes #4321`. Using the `fixes` or `closes` keywords\nwill cause the corresponding issue to be closed when the pull request is merged.\n\nCommit messages should never contain any `@` mentions (usernames prefixed with \"@\").\n\nPlease refer to the [Git manual](https://git-scm.com/doc) for more information\nabout Git.\n\n  - Push changes to your fork\n  - Create pull request\n\n### Creating the Pull Request\n\nThe title of the pull request should be prefixed by the component or area that\nthe pull request affects. Valid areas as:\n\n  - `consensus` for changes to consensus critical code\n  - `doc` for changes to the documentation\n  - `qt` or `gui` for changes to bitcoin-qt\n  - `log` for changes to log messages\n  - `mining` for changes to the mining code\n  - `net` or `p2p` for changes to the peer-to-peer network code\n  - `refactor` for structural changes that do not change behavior\n  - `rpc`, `rest` or `zmq` for changes to the RPC, REST or ZMQ APIs\n  - `contrib` or `cli` for changes to the scripts and tools\n  - `test`, `qa` or `ci` for changes to the unit tests, QA tests or CI code\n  - `util` or `lib` for changes to the utils or libraries\n  - `wallet` for changes to the wallet code\n  - `build` for changes to CMake\n  - `guix` for changes to the GUIX reproducible builds\n\nExamples:\n\n    consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n    net: Automatically create onion service, listen on Tor\n    qt: Add feed bump button\n    log: Fix typo in log message\n\nThe body of the pull request should contain sufficient description of *what* the\npatch does, and even more importantly, *why*, with justification and reasoning.\nYou should include references to any discussions (for example, other issues or\nmailing list discussions).\n\nThe description for a new pull request should not contain any `@` mentions. The\nPR description will be included in the commit message when the PR is merged and\nany users mentioned in the description will be annoyingly notified each time a\nfork of Bitcoin Core copies the merge. Instead, make any username mentions in a\nsubsequent comment to the PR.\n\n### Translation changes\n\nNote that translations should not be submitted as pull requests. Please see\n[Translation Process](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md)\nfor more information on helping with translations.\n\n### Work in Progress Changes and Requests for Comments\n\nIf a pull request is not to be considered for merging (yet), please\nprefix the title with [WIP] or use [Tasks Lists](https://docs.github.com/en/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#task-lists)\nin the body of the pull request to indicate tasks are pending.\n\n### Address Feedback\n\nAt this stage, one should expect comments and review from other contributors. You\ncan add more commits to your pull request by committing them locally and pushing\nto your fork.\n\nYou are expected to reply to any review comments before your pull request is\nmerged. You may update the code or reject the feedback if you do not agree with\nit, but you should express so in a reply. If there is outstanding feedback and\nyou are not actively working on it, your pull request may be closed.\n\nPlease refer to the [peer review](#peer-review) section below for more details.\n\n### Squashing Commits\n\nIf your pull request contains fixup commits (commits that change the same line of code repeatedly) or too fine-grained\ncommits, you may be asked to [squash](https://git-scm.com/docs/git-rebase#_interactive_mode) your commits\nbefore it will be reviewed. The basic squashing workflow is shown below.\n\n    git checkout your_branch_name\n    git rebase -i HEAD~n\n    # n is normally the number of commits in the pull request.\n    # Set commits (except the one in the first line) from 'pick' to 'squash', save and quit.\n    # On the next screen, edit/refine commit messages.\n    # Save and quit.\n    git push -f # (force push to GitHub)\n\nPlease update the resulting commit message, if needed. It should read as a\ncoherent message. In most cases, this means not just listing the interim\ncommits.\n\nIf your change contains a merge commit, the above workflow may not work and you\nwill need to remove the merge commit first. See the next section for details on\nhow to rebase.\n\nPlease refrain from creating several pull requests for the same change.\nUse the pull request that is already open (or was created earlier) to amend\nchanges. This preserves the discussion and review that happened earlier for\nthe respective change set.\n\nThe length of time required for peer review is unpredictable and will vary from\npull request to pull request.\n\n### Rebasing Changes\n\nWhen a pull request conflicts with the target branch, you may be asked to rebase it on top of the current target branch.\n\n    git fetch https://github.com/bitcoin/bitcoin  # Fetch the latest upstream commit\n    git rebase FETCH_HEAD  # Rebuild commits on top of the new base\n\nThis project aims to have a clean git history, where code changes are only made in non-merge commits. This simplifies\nauditability because merge commits can be assumed to not contain arbitrary code changes. Merge commits should be signed,\nand the resulting git tree hash must be deterministic and reproducible. The script in\n[/contrib/verify-commits](/contrib/verify-commits) checks that.\n\nAfter a rebase, reviewers are encouraged to sign off on the force push. This should be relatively straightforward with\nthe `git range-diff` tool explained in the [productivity\nnotes](/doc/productivity.md#diff-the-diffs-with-git-range-diff). To avoid needless review churn, maintainers will\ngenerally merge pull requests that received the most review attention first.\n\nPull Request Philosophy\n-----------------------\n\nPatchsets should always be focused. For example, a pull request could add a\nfeature, fix a bug, or refactor code; but not a mixture. Please also avoid super\npull requests which attempt to do too much, are overly large, or overly complex\nas this makes review difficult.\n\n\n### Features\n\nWhen adding a new feature, thought must be given to the long term technical debt\nand maintenance that feature may require after inclusion. Before proposing a new\nfeature that will require maintenance, please consider if you are willing to\nmaintain it (including bug fixing). If features get orphaned with no maintainer\nin the future, they may be removed by the Repository Maintainer.\n\n\n### Refactoring\n\nRefactoring is a necessary part of any software project's evolution. The\nfollowing guidelines cover refactoring pull requests for the project.\n\nThere are three categories of refactoring: code-only moves, code style fixes, and\ncode refactoring. In general, refactoring pull requests should not mix these\nthree kinds of activities in order to make refactoring pull requests easy to\nreview and uncontroversial. In all cases, refactoring PRs must not change the\nbehaviour of code within the pull request (bugs must be preserved as is).\n\nProject maintainers aim for a quick turnaround on refactoring pull requests, so\nwhere possible keep them short, uncomplex and easy to verify.\n\nPull requests that refactor the code should not be made by new contributors. It\nrequires a certain level of experience to know where the code belongs to and to\nunderstand the full ramification (including rebase effort of open pull requests).\n\nTrivial pull requests or pull requests that refactor the code with no clear\nbenefits may be immediately closed by the maintainers to reduce unnecessary\nworkload on reviewing.\n\n\n\"Decision Making\" Process\n-------------------------\n\nThe following applies to code changes to the Bitcoin Core project (and related\nprojects such as libsecp256k1), and is not to be confused with overall Bitcoin\nNetwork Protocol consensus changes.\n\nWhether a pull request is merged into Bitcoin Core rests with the project merge\nmaintainers.\n\nMaintainers will take into consideration if a patch is in line with the general\nprinciples of the project; meets the minimum standards for inclusion; and will\njudge the general consensus of contributors.\n\nIn general, all pull requests must:\n\n  - Have a clear use case, fix a demonstrable bug or serve the greater good of\n    the project (for example refactoring for modularisation);\n  - Be well peer-reviewed;\n  - Have unit tests, functional tests, and fuzz tests, where appropriate;\n  - Follow code style guidelines ([C++](doc/developer-notes.md), [functional tests](test/functional/README.md));\n  - Not break the existing test suite;\n  - Where bugs are fixed, where possible, there should be unit tests\n    demonstrating the bug and also proving the fix. This helps prevent regression.\n  - Change relevant comments and documentation when behaviour of code changes.\n\nPatches that change Bitcoin consensus rules are considerably more involved than\nnormal because they affect the entire ecosystem and so must be preceded by\nextensive mailing list discussions and have a numbered BIP. While each case will\nbe different, one should be prepared to expend more time and effort than for\nother kinds of patches because of increased peer review and consensus building\nrequirements.\n\n\n### Peer Review\n\nAnyone may participate in peer review which is expressed by comments in the pull\nrequest. Typically reviewers will review the code for obvious errors, as well as\ntest out the patch set and opine on the technical merits of the patch. Project\nmaintainers take into account the peer review when determining if there is\nconsensus to merge a pull request (remember that discussions may have been\nspread out over GitHub, mailing list and IRC discussions).\n\nCode review is a burdensome but important part of the development process, and\nas such, certain types of pull requests are rejected. In general, if the\n**improvements** do not warrant the **review effort** required, the PR has a\nhigh chance of being rejected. It is up to the PR author to convince the\nreviewers that the changes warrant the review effort, and if reviewers are\n\"Concept NACK'ing\" the PR, the author may need to present arguments and/or do\nresearch backing their suggested changes.\n\n#### Conceptual Review\n\nA review can be a conceptual review, where the reviewer leaves a comment\n * `Concept (N)ACK`, meaning \"I do (not) agree with the general goal of this pull\n   request\",\n * `Approach (N)ACK`, meaning `Concept ACK`, but \"I do (not) agree with the\n   approach of this change\".\n\nA `NACK` needs to include a rationale why the change is not worthwhile.\nNACKs without accompanying reasoning may be disregarded.\n\n#### Code Review\n\nAfter conceptual agreement on the change, code review can be provided. A review\nbegins with `ACK BRANCH_COMMIT`, where `BRANCH_COMMIT` is the top of the PR\nbranch, followed by a description of how the reviewer did the review. The\nfollowing language is used within pull request comments:\n\n  - \"I have tested the code\", involving change-specific manual testing in\n    addition to running the unit, functional, or fuzz tests, and in case it is\n    not obvious how the manual testing was done, it should be described;\n  - \"I have not tested the code, but I have reviewed it and it looks\n    OK, I agree it can be merged\";\n  - A \"nit\" refers to a trivial, often non-blocking issue.\n\nProject maintainers reserve the right to weigh the opinions of peer reviewers\nusing common sense judgement and may also weigh based on merit. Reviewers that\nhave demonstrated a deeper commitment and understanding of the project over time\nor who have clear domain expertise may naturally have more weight, as one would\nexpect in all walks of life.\n\nWhere a patch set affects consensus-critical code, the bar will be much\nhigher in terms of discussion and peer review requirements, keeping in mind that\nmistakes could be very costly to the wider community. This includes refactoring\nof consensus-critical code.\n\nWhere a patch set proposes to change the Bitcoin consensus, it must have been\ndiscussed extensively on the mailing list and IRC, be accompanied by a widely\ndiscussed BIP and have a generally widely perceived technical consensus of being\na worthwhile change based on the judgement of the maintainers.\n\n### Finding Reviewers\n\nAs most reviewers are themselves developers with their own projects, the review\nprocess can be quite lengthy, and some amount of patience is required. If you find\nthat you've been waiting for a pull request to be given attention for several\nmonths, there may be a number of reasons for this, some of which you can do something\nabout:\n\n  - It may be because of a feature freeze due to an upcoming release. During this time,\n    only bug fixes are taken into consideration. If your pull request is a new feature,\n    it will not be prioritized until after the release. Wait for the release.\n  - It may be because the changes you are suggesting do not appeal to people. Rather than\n    nits and critique, which require effort and means they care enough to spend time on your\n    contribution, thundering silence is a good sign of widespread (mild) dislike of a given change\n    (because people don't assume *others* won't actually like the proposal). Don't take\n    that personally, though! Instead, take another critical look at what you are suggesting\n    and see if it: changes too much, is too broad, doesn't adhere to the\n    [developer notes](doc/developer-notes.md), is dangerous or insecure, is messily written, etc.\n    Identify and address any of the issues you find. Then ask e.g. on IRC if someone could give\n    their opinion on the concept itself.\n  - It may be because your code is too complex for all but a few people, and those people\n    may not have realized your pull request even exists. A great way to find people who\n    are qualified and care about the code you are touching is the\n    [Git Blame feature](https://docs.github.com/en/github/managing-files-in-a-repository/managing-files-on-github/tracking-changes-in-a-file). Simply\n    look up who last modified the code you are changing and see if you can find\n    them and give them a nudge. Don't be incessant about the nudging, though.\n  - Finally, if all else fails, ask on IRC or elsewhere for someone to give your pull request\n    a look. If you think you've been waiting for an unreasonably long time (say,\n    more than a month) for no particular reason (a few lines changed, etc.),\n    this is totally fine. Try to return the favor when someone else is asking\n    for feedback on their code, and the universe balances out.\n  - Remember that the best thing you can do while waiting is give review to others!\n\n\nBackporting\n-----------\n\nSecurity and bug fixes can be backported from `master` to release\nbranches.\nMaintainers will do backports in batches and\nuse the proper `Needs backport (...)` labels\nwhen needed (the original author does not need to worry about it).\n\nA backport should contain the following metadata in the commit body:\n\n```\nGithub-Pull: #<PR number>\nRebased-From: <commit hash of the original commit>\n```\n\nHave a look at [an example backport PR](\nhttps://github.com/bitcoin/bitcoin/pull/16189).\n\nAlso see the [backport.py script](\nhttps://github.com/bitcoin-core/bitcoin-maintainer-tools#backport).\n\nCopyright\n---------\n\nBy contributing to this repository, you agree to license your work under the\nMIT license unless specified otherwise in `contrib/debian/copyright` or at\nthe top of the file itself. Any work contributed where you are not the original\nauthor must contain its license header with the original author(s) and source.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.115234375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2009-2025 The Bitcoin Core developers\nCopyright (c) 2009-2025 Bitcoin Developers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 0.0263671875,
          "content": "See [doc/build-\\*.md](/doc)"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.357421875,
          "content": "Bitcoin Core integration/staging tree\n=====================================\n\nhttps://bitcoincore.org\n\nFor an immediately usable, binary version of the Bitcoin Core software, see\nhttps://bitcoincore.org/en/download/.\n\nWhat is Bitcoin Core?\n---------------------\n\nBitcoin Core connects to the Bitcoin peer-to-peer network to download and fully\nvalidate blocks and transactions. It also includes a wallet and graphical user\ninterface, which can be optionally built.\n\nFurther information about Bitcoin Core is available in the [doc folder](/doc).\n\nLicense\n-------\n\nBitcoin Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\ninformation or see https://opensource.org/licenses/MIT.\n\nDevelopment Process\n-------------------\n\nThe `master` branch is regularly built (see `doc/build-*.md` for instructions) and tested, but it is not guaranteed to be\ncompletely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\nregularly from release branches to indicate new official, stable release versions of Bitcoin Core.\n\nThe https://github.com/bitcoin-core/gui repository is used exclusively for the\ndevelopment of the GUI. Its master branch is identical in all monotree\nrepositories. Release branches and tags do not exist, so please do not fork\nthat repository unless it is for development reasons.\n\nThe contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md)\nand useful hints for developers can be found in [doc/developer-notes.md](doc/developer-notes.md).\n\nTesting\n-------\n\nTesting and code review is the bottleneck for development; we get more pull\nrequests than we can review and test on short notice. Please be patient and help out by testing\nother people's pull requests, and remember this is a security-critical project where any mistake might cost people\nlots of money.\n\n### Automated Testing\n\nDevelopers are strongly encouraged to write [unit tests](src/test/README.md) for new code, and to\nsubmit new unit tests for old code. Unit tests can be compiled and run\n(assuming they weren't disabled during the generation of the build system) with: `ctest`. Further details on running\nand extending unit tests can be found in [/src/test/README.md](/src/test/README.md).\n\nThere are also [regression and integration tests](/test), written\nin Python.\nThese tests can be run (if the [test dependencies](/test) are installed) with: `build/test/functional/test_runner.py`\n(assuming `build` is your build directory).\n\nThe CI (Continuous Integration) systems make sure that every pull request is built for Windows, Linux, and macOS,\nand that unit/sanity tests are run automatically.\n\n### Manual Quality Assurance (QA) Testing\n\nChanges should be tested by somebody other than the developer who wrote the\ncode. This is especially important for large or high-risk changes. It is useful\nto add a test plan to the pull request description if testing the changes is\nnot straightforward.\n\nTranslations\n------------\n\nChanges to translations as well as new translations can be submitted to\n[Bitcoin Core's Transifex page](https://www.transifex.com/bitcoin/bitcoin/).\n\nTranslations are periodically pulled from Transifex and merged into the git repository. See the\n[translation process](doc/translation_process.md) for details on how this works.\n\n**Important**: We do not accept translation changes as GitHub pull requests because the next\npull from Transifex would automatically overwrite them again.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.8505859375,
          "content": "# Security Policy\n\n## Supported Versions\n\nSee our website for versions of Bitcoin Core that are currently supported with\nsecurity updates: https://bitcoincore.org/en/lifecycle/#schedule\n\n## Reporting a Vulnerability\n\nTo report security issues send an email to security@bitcoincore.org (not for support).\n\nThe following keys may be used to communicate sensitive information to developers:\n\n| Name | Fingerprint |\n|------|-------------|\n| Pieter Wuille | 133E AC17 9436 F14A 5CF1  B794 860F EB80 4E66 9320 |\n| Michael Ford | E777 299F C265 DD04 7930  70EB 944D 35F9 AC3D B76A |\n| Ava Chow | 1528 1230 0785 C964 44D3  334D 1756 5732 E08E 5E41 |\n\nYou can import a key by running the following command with that individual’s fingerprint: `gpg --keyserver hkps://keys.openpgp.org --recv-keys \"<fingerprint>\"` Ensure that you put quotes around fingerprints containing spaces.\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "depends",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "libbitcoinkernel.pc.in",
          "type": "blob",
          "size": 0.373046875,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}\nlibdir=${prefix}/@CMAKE_INSTALL_LIBDIR@\nincludedir=${prefix}/@CMAKE_INSTALL_INCLUDEDIR@\n\nName: @CLIENT_NAME@ kernel library\nDescription: Experimental library for the Bitcoin Core validation engine.\nVersion: @CLIENT_VERSION_STRING@\nLibs: -L${libdir} -lbitcoinkernel\nLibs.private: -L${libdir} @LIBS_PRIVATE@\nCflags: -I${includedir}\n"
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg.json",
          "type": "blob",
          "size": 1.3974609375,
          "content": "{\n  \"$comment\": \"The builtin-baseline corresponds to 2024.09.30 Release\",\n  \"$schema\": \"https://raw.githubusercontent.com/microsoft/vcpkg-tool/main/docs/vcpkg.schema.json\",\n  \"builtin-baseline\": \"c82f74667287d3dc386bce81e44964370c91a289\",\n  \"dependencies\": [\n    \"boost-multi-index\",\n    \"boost-signals2\",\n    \"libevent\"\n  ],\n  \"default-features\": [\n    \"qt5\",\n    \"tests\",\n    \"wallet\",\n    \"zeromq\"\n  ],\n  \"features\": {\n    \"berkeleydb\": {\n      \"description\": \"Enable Berkeley DB wallet support\",\n      \"dependencies\": [\n        \"berkeleydb\"\n      ]\n    },\n    \"qt5\": {\n      \"description\": \"Build GUI, Qt 5\",\n      \"dependencies\": [\n        \"qt5-base\",\n        \"qt5-tools\",\n        \"libqrencode\"\n      ]\n    },\n    \"sqlite\": {\n      \"description\": \"Enable SQLite wallet support\",\n      \"dependencies\": [\n        \"sqlite3\"\n      ]\n    },\n    \"tests\": {\n      \"description\": \"Build test_bitcoin.exe executable\",\n      \"dependencies\": [\n        \"boost-test\"\n      ]\n    },\n    \"wallet\": {\n      \"description\": \"Enable wallet\",\n      \"dependencies\": [\n        \"berkeleydb\",\n        \"sqlite3\"\n      ]\n    },\n    \"zeromq\": {\n      \"description\": \"Enable ZMQ notifications\",\n      \"dependencies\": [\n        \"zeromq\"\n      ]\n    }\n  },\n  \"overrides\": [\n    {\n      \"$comment\": \"Newer unreleased libevent versions cause https://github.com/bitcoin/bitcoin/issues/30096\",\n      \"name\": \"libevent\",\n      \"version\": \"2.1.12#7\"\n    }\n  ]\n}\n"
        }
      ]
    }
  ]
}