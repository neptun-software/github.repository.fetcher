{
  "metadata": {
    "timestamp": 1736566222374,
    "page": 233,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spotify/pedalboard",
      "stars": 5312,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.2919921875,
          "content": "# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n.python-version\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# IDE\n.vscode\n\n.DS_Store"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.48046875,
          "content": "[submodule \"JUCE\"]\n\tpath = JUCE\n\turl = https://github.com/juce-framework/JUCE.git\n[submodule \"vendors/rubberband\"]\n\tpath = vendors/rubberband\n\turl = https://github.com/BreakfastQuay/Rubberband.git\n[submodule \"vendors/lame\"]\n\tpath = vendors/lame\n\turl = https://github.com/lameproject/lame.git\n[submodule \"vendors/libgsm\"]\n\tpath = vendors/libgsm\n\turl = https://github.com/timothytylee/libgsm.git\n[submodule \"vendors/pybind11\"]\n\tpath = vendors/pybind11\n\turl = git@github.com:pybind/pybind11.git\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 7.1923828125,
          "content": "# Code of Conduct\n\nThis code of conduct outlines our expectations for participants within the **Spotify FOSS** community, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Anyone who violates this code of conduct may be banned from the community.\n\nOur open source community strives to:\n\n* **Be friendly and patient.**\n* **Be welcoming**: We strive to be a community that welcomes and supports people of all backgrounds and identities. This includes, but is not limited to members of any race, ethnicity, culture, national origin, colour, immigration status, social and economic class, educational level, sex, sexual orientation, gender identity and expression, age, size, family status, political belief, religion, and mental and physical ability.\n* **Be considerate**: Your work will be used by other people, and you in turn will depend on the work of others. Any decision you take will affect users and colleagues, and you should take those consequences into account when making decisions. Remember that we're a world-wide community, so you might not be communicating in someone else's primary language.\n* **Be respectful**:  Not all of us will agree all the time, but disagreement is no excuse for poor behavior and poor manners. We might all experience some frustration now and then, but we cannot allow that frustration to turn into a personal attack. It’s important to remember that a community where people feel uncomfortable or threatened is not a productive one.\n* **Be careful in the words that we choose**: we are a community of professionals, and we conduct ourselves professionally. Be kind to others. Do not insult or put down other participants. Harassment and other exclusionary behavior aren't acceptable.\n* **Try to understand why we disagree**: Disagreements, both social and technical, happen all the time. It is important that we resolve disagreements and differing views constructively. Remember that we’re different. The strength of our community comes from its diversity, people from a wide range of backgrounds. Different people have different perspectives on issues. Being unable to understand why someone holds a viewpoint doesn’t mean that they’re wrong. Don’t forget that it is human to err and blaming each other doesn’t get us anywhere. Instead, focus on helping to resolve issues and learning from mistakes.\n\n## Definitions\n\nHarassment includes, but is not limited to:\n\n- Offensive comments related to gender, gender identity and expression, sexual orientation, disability, mental illness, neuro(a)typicality, physical appearance, body size, race, age, regional discrimination, political or religious affiliation\n- Unwelcome comments regarding a person’s lifestyle choices and practices, including those related to food, health, parenting, drugs, and employment\n- Deliberate misgendering. This includes deadnaming or persistently using a pronoun that does not correctly reflect a person's gender identity. You must address people by the name they give you when not addressing them by their username or handle\n- Physical contact and simulated physical contact (eg, textual descriptions like “*hug*” or “*backrub*”) without consent or after a request to stop\n- Threats of violence, both physical and psychological\n- Incitement of violence towards any individual, including encouraging a person to commit suicide or to engage in self-harm\n- Deliberate intimidation\n- Stalking or following\n- Harassing photography or recording, including logging online activity for harassment purposes\n- Sustained disruption of discussion\n- Unwelcome sexual attention, including gratuitous or off-topic sexual images or behaviour\n- Pattern of inappropriate social contact, such as requesting/assuming inappropriate levels of intimacy with others\n- Continued one-on-one communication after requests to cease\n- Deliberate “outing” of any aspect of a person’s identity without their consent except as necessary to protect others from intentional abuse\n- Publication of non-harassing private communication\n\nOur open source community prioritizes marginalized people’s safety over privileged people’s comfort. We will not act on complaints regarding:\n\n- ‘Reverse’ -isms, including ‘reverse racism,’ ‘reverse sexism,’ and ‘cisphobia’\n- Reasonable communication of boundaries, such as “leave me alone,” “go away,” or “I’m not discussing this with you”\n- Refusal to explain or debate social justice concepts\n- Communicating in a ‘tone’ you don’t find congenial\n- Criticizing racist, sexist, cissexist, or otherwise oppressive behavior or assumptions\n\n\n### Diversity Statement\n\nWe encourage everyone to participate and are committed to building a community for all. Although we will fail at times, we seek to treat everyone both as fairly and equally as possible. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong.\n\nAlthough this list cannot be exhaustive, we explicitly honor diversity in age, gender, gender identity or expression, culture, ethnicity, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected\ncharacteristics above, including participants with disabilities.\n\n### Reporting Issues\n\nIf you experience or witness unacceptable behavior—or have any other concerns—please report it by contacting us via **fossboard@spotify.com**. All reports will be handled with discretion. In your report please include:\n\n- Your contact information.\n- Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please\ninclude them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link.\n- Any additional information that may be helpful.\n\nAfter filing a report, a representative will contact you personally, review the incident, follow up with any additional questions, and make a decision as to how to respond. If the person who is harassing you is part of the response team, they will recuse themselves from handling your incident. If the complaint originates from a member of the response team, it will be handled by a different member of the response team. We will respect confidentiality requests for the purpose of protecting victims of abuse.\n\n### Attribution & Acknowledgements\n\nWe all stand on the shoulders of giants across many open source communities.  We'd like to thank the communities and projects that established code of conducts and diversity statements as our inspiration:\n\n* [Django](https://www.djangoproject.com/conduct/reporting/)\n* [Python](https://www.python.org/community/diversity/)\n* [Ubuntu](http://www.ubuntu.com/about/about-ubuntu/conduct)\n* [Contributor Covenant](http://contributor-covenant.org/)\n* [Geek Feminism](http://geekfeminism.org/about/code-of-conduct/)\n* [Citizen Code of Conduct](http://citizencodeofconduct.org/)\n"
        },
        {
          "name": "COMPATIBILITY.md",
          "type": "blob",
          "size": 2.0478515625,
          "content": "# Pedalboard VST/Audio Unit Compatibility List\n\n| Plugin Name                                                          | Author                                                 | Format       | macOS      | Linux                  | Windows             |\n|----------------------------------------------------------------------|--------------------------------------------------------|--------------|------------|------------------------|---------------------|\n| [CHOWTapeModel](https://github.com/jatinchowdhury18/AnalogTapeModel) | [Jatin Chowdhury](https://github.com/jatinchowdhury18) | VST3®        | ✅ Working | ✅ Working              | ✅ Working          | \n| [CHOWTapeModel](https://github.com/jatinchowdhury18/AnalogTapeModel) | [Jatin Chowdhury](https://github.com/jatinchowdhury18) | Audio Unit   | ✅ Working | ☑️ _No AU support_      | ☑️ _No AU support_  | \n| [dearVR MICRO](https://www.dear-reality.com/products/dearvr-micro)   | [Dear Reality](https://www.dear-reality.com/)          | VST3®        | ✅ Working | ☑️ _Plugin not offered_ | ❓ Unknown          |\n| [dearVR MICRO](https://www.dear-reality.com/products/dearvr-micro)   | [Dear Reality](https://www.dear-reality.com/)          | Audio Unit   | ✅ Working | ☑️ _Plugin not offered_ | ☑️ _No AU support_  |\n| [RoughRider3](https://www.audiodamage.com/pages/free-downloads)      | [Audio Damage](https://www.audiodamage.com/)           | VST3®        | ✅ Working | ✅ Working              | ❓ Unknown          | \n| [RoughRider3](https://www.audiodamage.com/pages/free-downloads)      | [Audio Damage](https://www.audiodamage.com/)           | Audio Unit   | ✅ Working | ☑️ _No AU support_      | ☑️ _No AU support_  | \n| [RX 10 Spectral Denoise](https://www.izotope.com/en/products/rx.html)| [Izotope](https://www.izotope.com/)           | VST3®    | ✅ Working |❓ Unknown     | ❓ Unknown |\n| [Waves Clarity Vx Pro (V14)](https://www.waves.com/plugins/clarity-vx-pro)| [Waves](https://www.waves.com/)           | VST3®    | ✅ Working |❓ Unknown     | ❓ Unknown |\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.826171875,
          "content": "# How to Contribute\n\nWe'd love to get patches from you!\n\n## Getting Started\n\n### Prerequisites\n\nTo compile Pedalboard from scratch, the following packages will need to be installed:\n\n- [Python 3.8](https://www.python.org/downloads/) or higher.\n- A C++ compiler, e.g. `gcc`, `clang`, etc.\n  - On macOS, a working Xcode installation should provide this.\n- On Linux:\n  - FreeType 2 (`libfreetype-dev`, `libfreetype2-dev`, or `freetype2-devel`)\n  - X11 (`xorg-dev` should do)\n\n### Building Pedalboard\n\n```shell\ngit clone --recurse-submodules --shallow-submodules git@github.com:spotify/pedalboard.git\ncd pedalboard\npip3 install pybind11 tox\npip3 install .\n```\n\nTo compile a debug build of `pedalboard` that allows using a debugger (like gdb or lldb), use the following command to build the package locally and install a symbolic link for debugging:\n```shell\npython3 setup.py build develop\n```\n\nThen, you can `import pedalboard` from Python (or run the tests with `tox`) to test out your local changes.\n\n> If you're on macOS or Linux, you can try to compile a debug build _faster_ by using [Ccache](https://ccache.dev/):\n> ## macOS\n> ```shell\n> brew install ccache\n> rm -rf build && CC=\"ccache clang\" CXX=\"ccache clang++\" DEBUG=1 python3 -j8 -m pip install -e .\n> ```\n> ## Linux\n> e.g.\n> ```shell\n> sudo yum install ccache  # or apt, if on a Debian\n> \n> # If using GCC:\n> rm -rf build && CC=\"ccache gcc\" CXX=\"scripts/ccache_g++\" DEBUG=1 python3 setup.py build -j8 develop\n> \n> # ...or if using Clang:\n> rm -rf build && CC=\"ccache clang\" CXX=\"scripts/ccache_clang++\" DEBUG=1 python3 setup.py build -j8 develop\n> ```\n\nBy default, [all `.cpp` and `.mm` files in the `pedalboard` directory (or subdirectories)](https://github.com/spotify/pedalboard/blob/master/setup.py#L129) will be automatically compiled by `setup.py`.\n\nWhile `pedalboard` is mostly C++ code, it ships with `.pyi` files to allow for type hints in text editors and via MyPy. To update the type hint files, use the following commands:\n\n```shell\n# Use pybind11-stubgen to create intermediate stub files:\npybind11-stubgen -o stubs_output pedalboard pedalboard_native --no-setup-py\n# Post-process the stub files into more human-readable, usable ones:\npython3 -m scripts.postprocess_type_hints stubs_output pedalboard --check\n# Run mypy.stubtest to ensure the resulting stubs are valid\npython3 -m mypy.stubtest pedalboard --allowlist stubtest.allowlist\n# If all looks good, commit the resulting stubs to Git.\n```\n\n## Workflow\n\nWe follow the [GitHub Flow Workflow](https://guides.github.com/introduction/flow/):\n\n1.  Fork the project \n1.  Check out the `master` branch \n1.  Create a feature branch\n1.  Write code and tests for your change \n1.  From your branch, make a pull request against `https://github.com/spotify/pedalboard` \n1.  Work with repo maintainers to get your change reviewed \n1.  Wait for your change to be pulled into `https://github.com/spotify/pedalboard/master`\n1.  Delete your feature branch\n\n## Testing\n\nWe use `tox` for testing - running tests from end-to-end should be as simple as:\n\n```\npip3 install tox\ntox\n```\n\n## Style\n\nUse [`clang-format`](https://clang.llvm.org/docs/ClangFormat.html) for C++ code, and `black` with defaults for Python code.\n\n## Issues\n\nWhen creating an issue please try to ahere to the following format:\n\n    module-name: One line summary of the issue (less than 72 characters)\n\n    ### Expected behaviour\n\n    As concisely as possible, describe the expected behaviour.\n\n    ### Actual behaviour\n\n    As concisely as possible, describe the observed behaviour.\n\n    ### Steps to reproduce the behaviour\n\n    List all relevant steps to reproduce the observed behaviour.\n\n## Pull Requests\n\nFiles should be exempt of trailing spaces.\n\nWe adhere to a specific format for commit messages. Please write your commit\nmessages along these guidelines. Please keep the line width no greater than 80\ncolumns (You can use `fmt -n -p -w 80` to accomplish this).\n\n    module-name: One line description of your change (less than 72 characters)\n\n    Problem\n\n    Explain the context and why you're making that change.  What is the problem\n    you're trying to solve? In some cases there is not a problem and this can be\n    thought of being the motivation for your change.\n\n    Solution\n\n    Describe the modifications you've done.\n\n    Result\n\n    What will change as a result of your pull request? Note that sometimes this\n    section is unnecessary because it is self-explanatory based on the solution.\n\nSome important notes regarding the summary line:\n\n* Describe what was done; not the result \n* Use the active voice \n* Use the present tense \n* Capitalize properly \n* Do not end in a period — this is a title/subject \n* Prefix the subject with its scope\n\n## Documentation\n\nWe also welcome improvements to the project documentation or to the existing\ndocs. Please file an [issue](https://github.com/spotify/pedalboard/issues/new).\n\n## First Contributions\n\nIf you are a first time contributor to `pedalboard`,  familiarize yourself with the:\n* [Code of Conduct](CODE_OF_CONDUCT.md)\n* [GitHub Flow Workflow](https://guides.github.com/introduction/flow/)\n<!-- * Issue and pull request style guides -->\n\nWhen you're ready, navigate to [issues](https://github.com/spotify/pedalboard/issues/new). Some issues have been identified by community members as [good first issues](https://github.com/spotify/pedalboard/labels/good%20first%20issue). \n\nThere is a lot to learn when making your first contribution. As you gain experience, you will be able to make contributions faster. You can submit an issue using the [question](https://github.com/spotify/pedalboard/labels/question) label if you encounter challenges.  \n\n# License \n\nBy contributing your code, you agree to license your contribution under the \nterms of the [LICENSE](https://github.com/spotify/pedalboard/blob/master/LICENSE).\n\n# Code of Conduct\n\nRead our [Code of Conduct](CODE_OF_CONDUCT.md) for the project.\n\n# Troubleshooting\n\n## Building the project\n\n### `ModuleNotFoundError: No module named 'pybind11'`\n\nTry updating your version of `pip`:\n```shell\npip install --upgrade pip\n```\n\n### `Failed to establish a new connection: [Errno -2] Name or service not known'`\nYou may have networking issues. Check to make sure you do not have the `PIP_INDEX_URL` environment variable set (or that it points to a valid index).\n\n### `fatal error: Python.h: No such file or directory`\nEnsure you have the Python development packages installed.\nYou will need to find correct package for your operating system. (i.e.: `python-dev`, `python-devel`, etc.)\n\n### `fatal error: lame/include/lame.h: No such file or directory`\nEnsure that all Git submodules have been updated:\n```shell\ngit submodule update --init\n```\n\n### `AttributeError: 'NoneType' object has no attribute 'group'`\n- Ensure that you have Tox version 4 or greater installed\n- _or_ set `ignore_basepython_conflict=true` in `tox.ini`\n- _or_ install Tox using `pip` and not your system package manager\n"
        },
        {
          "name": "INSTALLATION.md",
          "type": "blob",
          "size": 4.666015625,
          "content": "# How To Install `pedalboard` \n\n`pedalboard` is a useful tool if you are an artist, musician, producer, or enthusiast getting started with Python and looking to add effects to audio files. \n\n## Compatibility\n\nFor `pedalboard`, ensure you have [Python 3.6](https://www.python.org/downloads/) or higher. \n\n## Create a Project Directory\nCreate a folder that will serve as your project directory for `pedalboard`. \n\n## Virtual Environments\n\n`pedalboard` is delivered as a Python package. When working with packages, you should create  a [virtual environment](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/). This ensures that a package is only added to your current project, rather than your entire operating system. \n\nYou can set up a virtual environment by navigating to your project directory in the terminal and running the following commands:\n\n```\n# Create a virtual environment\npython3 -m pip install --user virtualenv \npython3 -m venv .venv\n\n# Activate the virtual environment\nsource .venv/bin/activate\n```\n\nNote: Windows commands are available [here](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/).\n\nIf you want to leave your `pedalboard` project, you can deactivate the virtual environment using:\n\n```\ndeactivate\n```\n\nYou can activate your virtual environment at any time, without needing to create it again.\n\n## Packages\n\n`pedalboard` is a package that can be installed using Python's package manager, [pip](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/). If you have set up a virtual environment, pip will add the package there. You will need to make sure that:\n\n```\n# pip is installed\npython3 -m pip install --user --upgrade pip\n\n# pip is updated \npython3 -m pip --version\n```\n\n## Installing `pedalboard` \n\nAfter setting up a virtual environment and installing pip, install `pedalboard`:\n```\npip install pedalboard\n```` \n\n## Accessing Audio Files\n\nThe [interactive demo](https://colab.research.google.com/drive/1bHjhJj1aCoOlXKl_lOfG99Xs3qWVrhch#scrollTo=J3MBH6-5yz97) for `pedalboard` uses [librosa](https://librosa.org/). Librosa is a popular package that provides access to audio files, as well as tools for music and audio analysis. \n\nYou can install librosa using pip:\n```\npip install librosa\n```\n\nIf you plan to use your own audio files, save them to the project directory. You can use [`librosa.load`](https://librosa.org/doc/main/generated/librosa.load.html) to load an audio file by its path.\n\n## Creating A Python Program\n\nYou'll want an IDE to build, run, and debug your code. [Thonny](https://thonny.org/) is a popular choice for beginners, and there are many others.\n\nOpen a new Python file in your IDE and save it to your project directory. \n\nNote: creating a virtual environment will create a new directory (.venv) within your project directory. Save your .py file in the project directory. \n\nYou can now refer to the [interactive demo](https://colab.research.google.com/drive/1bHjhJj1aCoOlXKl_lOfG99Xs3qWVrhch#scrollTo=J3MBH6-5yz97) to understand how audio and effects are called.\n\nThe [interactive demo](https://colab.research.google.com/drive/1bHjhJj1aCoOlXKl_lOfG99Xs3qWVrhch#scrollTo=J3MBH6-5yz97) uses additional packages, including NumPy and Matplotlib. More information is available below.\n\n# Key Terms\n\n- package: a collection of modules (a Python program that you import), bound by a package name. `pedalboard` is a package.\n- virtual environment: an environment that allows packages to be installed for a specific project, rather than system wide. \n- [venv](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/): a tool used for creating virtual environments in Python.\n- [pip](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/): a package manager for Python. Allows you to install and use packages, including `pedalboard`. \n- [wheel](https://packaging.python.org/guides/distributing-packages-using-setuptools/#wheels): a way of delivering packages in Python. Allows the user to install the package quicker. `pedalboard` is delivered as a wheel. \n- Integrated Development Environment (IDE): a software application that combines different programming activities, including writing, executing, and debugging code.   \n\n## Other Useful Packages\n\n- [NumPy](https://numpy.org/): a package that facilitates mathematical and other operations on data. NumPy is required by `pedalboard` and will automatically be installed with `pedalboard`.\n```\npip install numpy\n```\n\n- [Matplotlib](https://matplotlib.org/stable/index.html): a package for data visualization. Matplotlib is referenced in the `pedalboard` [interactive demo](https://matplotlib.org/).\n```\npip install matplotlib\n```\n"
        },
        {
          "name": "JUCE",
          "type": "commit",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.26171875,
          "content": "include *.txt tox.ini  *.md\nrecursive-include tests *.py\n\n# Include the C++ code required to build the native extension:\n# TODO: This can go away once we build binary wheels!\ngraft pedalboard\ngraft JUCE\ngraft tests\n\nexclude build-info.yaml service-info.yaml mkdocs.yml"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.5595703125,
          "content": "Pedalboard\nCopyright 2021 Spotify AB\n\nThis product includes software developed at\nSpotify AB (http://www.spotify.com/).\n\nThis product includes software from JUCE (GPLv3).\n* Copyright (C) 2021 Raw Material Software Limited.\n\nJUCE includes software from the VST3 SDK, licensed under the GPLv3.\n* Copyright (C) 2019 Steinberg Media Technologies GmbH.\n\nThe tests for `pedalboard` include binaries from Jatin Chowdhury's\n`AnalogTapeModel` project, licensed under the GPLv3. The source code\nfor these binaries can be found at:\nhttps://github.com/jatinchowdhury18/AnalogTapeModel\n"
        },
        {
          "name": "OWNERS.md",
          "type": "blob",
          "size": 0.458984375,
          "content": "# Owners\n\n- See [CONTRIBUTING.md](CONTRIBUTING.md) for general contribution guidelines.\n\n## Core Developers\n\n- Peter Sobot ([@psobot](https://github.com/psobot), Spotify, psobot@spotify.com)\n\n## Triagers\n\n- Peter Sobot ([@psobot](https://github.com/psobot), Spotify, psobot@spotify.com)\n\n## Contributors\n\n- David Rubinstein ([@drubinstein](https://github.com/drubinstein), Spotify)\n- Nicola Montecchio ([@nicolamontecchio](https://github.com/nicolamontecchio), Spotify)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.4296875,
          "content": "![Pedalboard Logo](https://user-images.githubusercontent.com/213293/131147303-4805181a-c7d5-4afe-afb2-f591a4b8e586.png)\n\n\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://github.com/spotify/pedalboard/blob/master/LICENSE)\n[![Documentation](https://img.shields.io/badge/Documentation-on%20github.io-brightgreen)](https://spotify.github.io/pedalboard)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pedalboard)](https://pypi.org/project/pedalboard)\n[![Supported Platforms](https://img.shields.io/badge/platforms-macOS%20%7C%20Windows%20%7C%20Linux-green)](https://pypi.org/project/pedalboard)\n[![Apple Silicon support for macOS and Linux (Docker)](https://img.shields.io/badge/Apple%20Silicon-macOS%20and%20Linux-brightgreen)](https://pypi.org/project/pedalboard)\n[![PyPI - Wheel](https://img.shields.io/pypi/wheel/pedalboard)](https://pypi.org/project/pedalboard)\n[![Test Badge](https://github.com/spotify/pedalboard/actions/workflows/all.yml/badge.svg)](https://github.com/spotify/pedalboard/actions/workflows/all.yml)\n[![Coverage Badge](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/psobot/8736467e9952991ef44a67915ee7c762/raw/coverage.json)](https://gist.githubusercontent.com/psobot/8736467e9952991ef44a67915ee7c762/raw/coverage.json)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/pedalboard)](https://pypistats.org/packages/pedalboard)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.7817838.svg)](https://doi.org/10.5281/zenodo.7817838)\n[![GitHub Repo stars](https://img.shields.io/github/stars/spotify/pedalboard?style=social)](https://github.com/spotify/pedalboard/stargazers)\n\n\n`pedalboard` is a Python library for working with audio: reading, writing, rendering, adding effects, and more. It supports most popular audio file formats and a number of common audio effects out of the box, and also allows the use of [VST3®](https://www.steinberg.net/en/company/technologies/vst3.html) and [Audio Unit](https://en.wikipedia.org/wiki/Audio_Units) formats for loading third-party software instruments and effects.\n\n`pedalboard` was built by [Spotify's Audio Intelligence Lab](https://research.atspotify.com/audio-intelligence/) to enable using studio-quality audio effects from within Python and TensorFlow. Internally at Spotify, `pedalboard` is used for [data augmentation](https://en.wikipedia.org/wiki/Data_augmentation) to improve machine learning models and to help power features like [Spotify's AI DJ](https://newsroom.spotify.com/2023-02-22/spotify-debuts-a-new-ai-dj-right-in-your-pocket/) and [AI Voice Translation](https://newsroom.spotify.com/2023-09-25/ai-voice-translation-pilot-lex-fridman-dax-shepard-steven-bartlett/). `pedalboard` also helps in the process of content creation, making it possible to add effects to audio without using a Digital Audio Workstation.\n\n[![Documentation](https://img.shields.io/badge/Documentation-on%20github.io-brightgreen)](https://spotify.github.io/pedalboard)\n\n## Features \n\n - Built-in audio I/O utilities ([pedalboard.io](https://spotify.github.io/pedalboard/reference/pedalboard.io.html))\n   - Support for reading and writing AIFF, FLAC, MP3, OGG, and WAV files on all platforms with no dependencies\n   - Additional support for reading AAC, AC3, WMA, and other formats depending on platform\n   - Support for on-the-fly resampling of audio files and streams with `O(1)` memory usage\n   - Live audio effects via <a href=\"https://spotify.github.io/pedalboard/reference/pedalboard.io.html#pedalboard.io.AudioStream\"><code class=\"docutils literal\"><span class=\"pre\">AudioStream</span></code></a>\n - Built-in support for a number of basic audio transformations, including:\n   - Guitar-style effects: `Chorus`, `Distortion`, `Phaser`, `Clipping`\n   - Loudness and dynamic range effects: `Compressor`, `Gain`, `Limiter`\n   - Equalizers and filters: `HighpassFilter`, `LadderFilter`, `LowpassFilter`\n   - Spatial effects: `Convolution`, `Delay`, `Reverb`\n   - Pitch effects: `PitchShift`\n   - Lossy compression: `GSMFullRateCompressor`, `MP3Compressor`\n   - Quality reduction: `Resample`, `Bitcrush`\n - Supports VST3® instrument and effect plugins on macOS, Windows, and Linux (<a href=\"https://spotify.github.io/pedalboard/reference/pedalboard.html#pedalboard.load_plugin\"><code class=\"docutils literal\"><span class=\"pre\">pedalboard.load_plugin</span></code></a>)\n - Supports instrument and effect Audio Units on macOS\n - Strong thread-safety, memory usage, and speed guarantees\n   - Releases Python's Global Interpreter Lock (GIL) to allow use of multiple CPU cores\n     - No need to use `multiprocessing`!\n   - Even when only using one thread:\n     - Processes audio up to **300x** faster than [pySoX](https://github.com/rabitt/pysox) for single transforms, and 2-5x faster than [SoxBindings](https://github.com/pseeth/soxbindings) (via [iCorv](https://github.com/iCorv/pedalboard_with_tfdata))\n     - Reads audio files up to **4x** faster than [librosa.load](https://librosa.org/doc/main/generated/librosa.load.html) (in many cases)\n - Tested compatibility with TensorFlow - can be used in `tf.data` pipelines!\n\n## Installation\n\n`pedalboard` is available via PyPI (via [Platform Wheels](https://packaging.python.org/guides/distributing-packages-using-setuptools/#platform-wheels)):\n```\npip install pedalboard  # That's it! No other dependencies required.\n```\n\nIf you are new to Python, follow [INSTALLATION.md](https://github.com/spotify/pedalboard/blob/master/INSTALLATION.md) for a robust guide.\n\n### Compatibility\n\n`pedalboard` is thoroughly tested with Python 3.8, 3.9, 3.10, 3.11, 3.12, and 3.13.\n\n- Linux\n  - Tested heavily in production use cases at Spotify\n  - Tested automatically on GitHub with VSTs\n  - Platform `manylinux` and `musllinux` wheels built for `x86_64` (Intel/AMD) and `aarch64` (ARM/Apple Silicon)\n  - Most Linux VSTs require a relatively modern Linux installation (with glibc > 2.27)\n- macOS\n  - Tested manually with VSTs and Audio Units\n  - Tested automatically on GitHub with VSTs\n  - Platform wheels available for both Intel and Apple Silicon\n  - Compatible with a wide range of VSTs and Audio Units\n- Windows\n  - Tested automatically on GitHub with VSTs\n  - Platform wheels available for `amd64` (x86-64, Intel/AMD)\n\n## Examples\n\n> **Note**: If you'd rather watch a video instead of reading examples or documentation, <strong>watch <a href=\"https://www.youtube.com/watch?v=NYhkqXpFAlg\" target=\"_blank\"><em>Working with Audio in Python (feat. Pedalboard)</em> on YouTube</a></strong>.\n\n### Quick start\n\n```python\nfrom pedalboard import Pedalboard, Chorus, Reverb\nfrom pedalboard.io import AudioFile\n\n# Make a Pedalboard object, containing multiple audio plugins:\nboard = Pedalboard([Chorus(), Reverb(room_size=0.25)])\n\n# Open an audio file for reading, just like a regular file:\nwith AudioFile('some-file.wav') as f:\n  \n  # Open an audio file to write to:\n  with AudioFile('output.wav', 'w', f.samplerate, f.num_channels) as o:\n  \n    # Read one second of audio at a time, until the file is empty:\n    while f.tell() < f.frames:\n      chunk = f.read(f.samplerate)\n      \n      # Run the audio through our pedalboard:\n      effected = board(chunk, f.samplerate, reset=False)\n      \n      # Write the output to our output file:\n      o.write(effected)\n```\n\n> **Note**: For more information about how to process audio through\n> Pedalboard plugins, including how the `reset` parameter works,\n> see <a href=\"https://spotify.github.io/pedalboard/reference/pedalboard.html#pedalboard.Plugin.process\">\n> the documentation for <code class=\"docutils literal\"><span class=\"pre\">pedalboard.Plugin.process</span></code></a>.\n\n### Making a guitar-style pedalboard\n\n```python\n# Don't do import *! (It just makes this example smaller)\nfrom pedalboard import *\nfrom pedalboard.io import AudioFile\n\n# Read in a whole file, resampling to our desired sample rate:\nsamplerate = 44100.0\nwith AudioFile('guitar-input.wav').resampled_to(samplerate) as f:\n  audio = f.read(f.frames)\n\n# Make a pretty interesting sounding guitar pedalboard:\nboard = Pedalboard([\n    Compressor(threshold_db=-50, ratio=25),\n    Gain(gain_db=30),\n    Chorus(),\n    LadderFilter(mode=LadderFilter.Mode.HPF12, cutoff_hz=900),\n    Phaser(),\n    Convolution(\"./guitar_amp.wav\", 1.0),\n    Reverb(room_size=0.25),\n])\n\n# Pedalboard objects behave like lists, so you can add plugins:\nboard.append(Compressor(threshold_db=-25, ratio=10))\nboard.append(Gain(gain_db=10))\nboard.append(Limiter())\n\n# ... or change parameters easily:\nboard[0].threshold_db = -40\n\n# Run the audio through this pedalboard!\neffected = board(audio, samplerate)\n\n# Write the audio back as a wav file:\nwith AudioFile('processed-output.wav', 'w', samplerate, effected.shape[0]) as f:\n  f.write(effected)\n```\n\n### Using VST3® or Audio Unit instrument and effect plugins\n\n```python\nfrom pedalboard import Pedalboard, Reverb, load_plugin\nfrom pedalboard.io import AudioFile\nfrom mido import Message # not part of Pedalboard, but convenient!\n\n# Load a VST3 or Audio Unit plugin from a known path on disk:\ninstrument = load_plugin(\"./VSTs/Magical8BitPlug2.vst3\")\neffect = load_plugin(\"./VSTs/RoughRider3.vst3\")\n\nprint(effect.parameters.keys())\n# dict_keys([\n#   'sc_hpf_hz', 'input_lvl_db', 'sensitivity_db',\n#   'ratio', 'attack_ms', 'release_ms', 'makeup_db',\n#   'mix', 'output_lvl_db', 'sc_active',\n#   'full_bandwidth', 'bypass', 'program',\n# ])\n\n# Set the \"ratio\" parameter to 15\neffect.ratio = 15\n\n# Render some audio by passing MIDI to an instrument:\nsample_rate = 44100\naudio = instrument(\n  [Message(\"note_on\", note=60), Message(\"note_off\", note=60, time=5)],\n  duration=5, # seconds\n  sample_rate=sample_rate,\n)\n\n# Apply effects to this audio:\neffected = effect(audio, sample_rate)\n\n# ...or put the effect into a chain with other plugins:\nboard = Pedalboard([effect, Reverb()])\n# ...and run that pedalboard with the same VST instance!\neffected = board(audio, sample_rate)\n```\n\n### Creating parallel effects chains\n\nThis example creates a delayed pitch-shift effect by running\nmultiple Pedalboards in parallel on the same audio. `Pedalboard`\nobjects are themselves `Plugin` objects, so you can nest them\nas much as you like:\n\n```python\nfrom pedalboard import Pedalboard, Compressor, Delay, Distortion, Gain, PitchShift, Reverb, Mix\n\npassthrough = Gain(gain_db=0)\n\ndelay_and_pitch_shift = Pedalboard([\n  Delay(delay_seconds=0.25, mix=1.0),\n  PitchShift(semitones=7),\n  Gain(gain_db=-3),\n])\n\ndelay_longer_and_more_pitch_shift = Pedalboard([\n  Delay(delay_seconds=0.5, mix=1.0),\n  PitchShift(semitones=12),\n  Gain(gain_db=-6),\n])\n\nboard = Pedalboard([\n  # Put a compressor at the front of the chain:\n  Compressor(),\n  # Run all of these pedalboards simultaneously with the Mix plugin:\n  Mix([\n    passthrough,\n    delay_and_pitch_shift,\n    delay_longer_and_more_pitch_shift,\n  ]),\n  # Add a reverb on the final mix:\n  Reverb()\n])\n```\n\n### Running Pedalboard on Live Audio\n\n`pedalboard` supports streaming live audio through\n<a href=\"https://spotify.github.io/pedalboard/reference/pedalboard.io.html#pedalboard.io.AudioStream\">\nan <code class=\"docutils literal\"><span class=\"pre\">AudioStream</span></code> object</a>,\nallowing for real-time manipulation of audio by adding effects in Python.\n\n```python\nfrom pedalboard import Pedalboard, Chorus, Compressor, Delay, Gain, Reverb, Phaser\nfrom pedalboard.io import AudioStream\n\n# Open up an audio stream:\nwith AudioStream(\n  input_device_name=\"Apogee Jam+\",  # Guitar interface\n  output_device_name=\"MacBook Pro Speakers\"\n) as stream:\n  # Audio is now streaming through this pedalboard and out of your speakers!\n  stream.plugins = Pedalboard([\n      Compressor(threshold_db=-50, ratio=25),\n      Gain(gain_db=30),\n      Chorus(),\n      Phaser(),\n      Convolution(\"./guitar_amp.wav\", 1.0),\n      Reverb(room_size=0.25),\n  ])\n  input(\"Press enter to stop streaming...\")\n\n# The live AudioStream is now closed, and audio has stopped.\n```\n\n### Using Pedalboard in `tf.data` Pipelines\n\n```python\nimport tensorflow as tf \n\nsr = 48000 \n\n# Put whatever plugins you like in here:\nplugins = pedalboard.Pedalboard([pedalboard.Gain(), pedalboard.Reverb()]) \n\n# Make a dataset containing random noise:\n# NOTE: for real training, here's where you'd want to load your audio somehow:\nds = tf.data.Dataset.from_tensor_slices([np.random.rand(sr)])\n\n# Apply our Pedalboard instance to the tf.data Pipeline:\nds = ds.map(lambda audio: tf.numpy_function(plugins.process, [audio, sr], tf.float32)) \n\n# Create and train a (dummy) ML model on this audio:\nmodel = tf.keras.models.Sequential([tf.keras.layers.InputLayer(input_shape=(sr,)), tf.keras.layers.Dense(1)])\nmodel.compile(loss=\"mse\") \nmodel.fit(ds.map(lambda effected: (effected, 1)).batch(1), epochs=10)\n```\n\nFor more examples, see:\n - [the \"examples\" folder of this repository](https://github.com/spotify/pedalboard/tree/master/examples)\n - [the \"Pedalboard Demo\" Colab notebook](https://colab.research.google.com/drive/1bHjhJj1aCoOlXKl_lOfG99Xs3qWVrhch)\n - [_Working with Audio in Python (feat. Pedalboard)_ by Peter Sobot at EuroPython 2022](https://www.youtube.com/watch?v=NYhkqXpFAlg)\n - [an interactive web demo on Hugging Face Spaces and Gradio](https://huggingface.co/spaces/akhaliq/pedalboard) (via [@AK391](https://github.com/AK391)) \n\n## Contributing\n\nContributions to `pedalboard` are welcomed! See [CONTRIBUTING.md](https://github.com/spotify/pedalboard/blob/master/CONTRIBUTING.md) for details.\n\n## Citing\n\nTo cite `pedalboard` in academic work, use [its entry on Zenodo](https://doi.org/10.5281/zenodo.7817838): [![DOI 7817838](https://zenodo.org/badge/DOI/10.5281/zenodo.7817838.svg)](https://doi.org/10.5281/zenodo.7817838)\n\nTo cite via BibTeX:\n\n```tex\n@software{sobot_peter_2023_7817838,\n  author       = {Sobot, Peter},\n  title        = {Pedalboard},\n  month        = jul,\n  year         = 2021,\n  publisher    = {Zenodo},\n  doi          = {10.5281/zenodo.7817838},\n  url          = {https://doi.org/10.5281/zenodo.7817838}\n}\n```\n\n## License\n`pedalboard` is Copyright 2021-2024 Spotify AB.\n\n`pedalboard` is licensed under the [GNU General Public License v3](https://www.gnu.org/licenses/gpl-3.0.en.html). `pedalboard` includes a number of libraries that are statically compiled, and which carry the following licenses:\n\n - The core audio processing code is pulled from [JUCE 6](https://juce.com/), which is [dual-licensed under a commercial license and the GPLv3](https://juce.com/juce-6-licence).\n - The [VST3 SDK](https://github.com/steinbergmedia/vst3sdk), bundled with JUCE, is owned by [Steinberg® Media Technologies GmbH](https://www.steinberg.net/en/home.html) and licensed under the GPLv3.\n - The `PitchShift` plugin and `time_stretch` functions use [the Rubber Band Library](https://github.com/breakfastquay/rubberband), which is [dual-licensed under a commercial license](https://breakfastquay.com/technology/license.html) and the GPLv2 (or newer). [FFTW](https://www.fftw.org/) is also included to speed up Rubber Band, and [is licensed under the GPLv2 (or newer)](https://www.fftw.org/doc/License-and-Copyright.html).\n - The `MP3Compressor` plugin uses [libmp3lame from the LAME project](https://lame.sourceforge.io/), which is [licensed under the LGPLv2](https://github.com/lameproject/lame/blob/master/README) and [upgraded to the GPLv3 for inclusion in this project (as permitted by the LGPLv2)](https://www.gnu.org/licenses/gpl-faq.html#AllCompatibility).\n - The `GSMFullRateCompressor` plugin uses [libgsm](http://quut.com/gsm/), which is [licensed under the ISC license](https://github.com/timothytylee/libgsm/blob/master/COPYRIGHT) and [compatible with the GPLv3](https://www.gnu.org/licenses/license-list.en.html#ISC).\n\n_VST is a registered trademark of Steinberg Media Technologies GmbH._\n"
        },
        {
          "name": "catalog-info.yaml",
          "type": "blob",
          "size": 0.111328125,
          "content": "apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: pedalboard\nspec:\n  type: library\n  owner: miq\n"
        },
        {
          "name": "dev-requirements.txt",
          "type": "blob",
          "size": 0.1484375,
          "content": "-r requirements.txt\n-e .\n-r test-requirements.txt\n-r docs-requirements.txt\nbumpversion==0.5.3\nipython\nipdb\npip>=20\npybind11>=2.10.4\nsetuptools>=42\nwheel"
        },
        {
          "name": "docs-requirements.txt",
          "type": "blob",
          "size": 0.3359375,
          "content": "-r test-requirements.txt\n\nmkdocs==1.0.4\npybind11-stubgen==0.11.0\nmypy\n# For documentation:\nsphinx==5.3.0; python_version > '3.6'\nsphinx-copybutton==0.5.1; python_version > '3.6'\ndocutils==0.19; python_version > '3.6'\nm2r2==0.3.3; python_version > '3.6'\nfuro==2022.9.29; python_version > '3.6'\nsphinxext-opengraph==0.7.3; python_version > '3.6'\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pedalboard",
          "type": "tree",
          "content": null
        },
        {
          "name": "pedalboard_native",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.0849609375,
          "content": "[build-system]\nrequires = [\n    \"setuptools>=59.6.0\",\n    \"wheel>=0.36.2\",\n    'pybind11>=2.13; python_version>=\"3.9\"',\n    'pybind11<=2.12; python_version<=\"3.8\"',\n    # Building with NumPy 2 allows backwards compatibility with NumPy 1:\n    'numpy>=2.1.0rc1; python_version>=\"3.13\"',\n    'numpy>=2; python_version>=\"3.9\" and python_version<\"3.13\"',\n    'numpy<2; python_version<=\"3.8\"',\n]\n\nbuild-backend = \"setuptools.build_meta\"\n\n# See: https://cibuildwheel.readthedocs.io/en/stable/options/#examples\n[tool.cibuildwheel.linux]\nbefore-all = \"yum install -y libsndfile libX11-devel libXrandr-devel libXinerama-devel libXrender-devel libXcomposite-devel libXinerama-devel libXcursor-devel freetype-devel alsa-lib-devel\"\n\n[[tool.cibuildwheel.overrides]]\n# Use apk instead of yum when building on Alpine Linux\n# (Note: this is experimental, as most VSTs require glibc and thus Alpine Linux isn't that useful)\nselect = \"*-musllinux*\"\nbefore-all = \"apk add libsndfile libx11-dev libxrandr-dev libxinerama-dev libxrender-dev libxcomposite-dev libxinerama-dev libxcursor-dev freetype-dev libexecinfo-dev alsa-lib-dev\"\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0048828125,
          "content": "numpy"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 16.8115234375,
          "content": "#! /usr/bin/env python\n#\n# Copyright 2021 Spotify AB\n#\n# Licensed under the GNU Public License, Version 3.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    https://www.gnu.org/licenses/gpl-3.0.html\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport logging\nimport os\nimport platform\nfrom distutils.core import setup\nfrom distutils.unixccompiler import UnixCCompiler\nfrom pathlib import Path\nfrom subprocess import check_output\n\nfrom pybind11.setup_helpers import Pybind11Extension, build_ext\n\nDEBUG = bool(int(os.environ.get(\"DEBUG\", 0)))\n\n# C or C++ flags:\nBASE_CPP_FLAGS = [\n    \"-Wall\",\n]\nALL_INCLUDES = []\nALL_LINK_ARGS = []\nALL_CFLAGS = []\nALL_CPPFLAGS = []\nALL_LIBRARIES = []\nALL_SOURCE_PATHS = []\n\n# Add JUCE-related flags:\nALL_CPPFLAGS.extend(\n    [\n        \"-DJUCE_DISPLAY_SPLASH_SCREEN=1\",\n        \"-DJUCE_USE_DARK_SPLASH_SCREEN=1\",\n        \"-DJUCE_MODULE_AVAILABLE_juce_audio_basics=1\",\n        \"-DJUCE_MODULE_AVAILABLE_juce_audio_formats=1\",\n        \"-DJUCE_MODULE_AVAILABLE_juce_audio_processors=1\",\n        \"-DJUCE_MODULE_AVAILABLE_juce_core=1\",\n        \"-DJUCE_MODULE_AVAILABLE_juce_data_structures=1\",\n        \"-DJUCE_MODULE_AVAILABLE_juce_dsp=1\",\n        \"-DJUCE_MODULE_AVAILABLE_juce_events=1\",\n        \"-DJUCE_MODULE_AVAILABLE_juce_graphics=1\",\n        \"-DJUCE_MODULE_AVAILABLE_juce_gui_basics=1\",\n        \"-DJUCE_MODULE_AVAILABLE_juce_gui_extra=1\",\n        \"-DJUCE_MODULE_AVAILABLE_juce_audio_devices=1\",\n        \"-DJUCE_GLOBAL_MODULE_SETTINGS_INCLUDED=1\",\n        \"-DJUCE_STRICT_REFCOUNTEDPOINTER=1\",\n        \"-DJUCE_STANDALONE_APPLICATION=1\",\n        \"-DJUCER_LINUX_MAKE_6D53C8B4=1\",\n        \"-DJUCE_APP_VERSION=1.0.0\",\n        \"-DJUCE_APP_VERSION_HEX=0x10000\",\n        # Consoleapp flags:\n        \"-DJucePlugin_Build_VST=0\",\n        \"-DJucePlugin_Build_VST3=0\",\n        \"-DJucePlugin_Build_AU=0\",\n        \"-DJucePlugin_Build_AUv3=0\",\n        \"-DJucePlugin_Build_RTAS=0\",\n        \"-DJucePlugin_Build_AAX=0\",\n        \"-DJucePlugin_Build_Standalone=0\",\n        \"-DJucePlugin_Build_Unity=0\",\n        # \"-DJUCE_PLUGINHOST_VST=1\", # Include for VST2 support, not licensed by Steinberg\n        # \"-DJUCE_PLUGINHOST_VST3=1\", # Disable the built-in VST3 support, as we include our own.\n        # \"-DJUCE_PLUGINHOST_LADSPA=1\", # Include for LADSPA plugin support, Linux only.\n        \"-DJUCE_DISABLE_JUCE_VERSION_PRINTING=1\",\n        \"-DJUCE_WEB_BROWSER=0\",\n        \"-DJUCE_USE_CURL=0\",\n        \"-DJUCE_USE_MP3AUDIOFORMAT=0\",  # We've patched this out too\n        \"-DJUCE_USE_FLAC=0\",  # We've patched this out\n        # \"-DJUCE_USE_FREETYPE=0\",\n        \"-DJUCE_MODAL_LOOPS_PERMITTED=1\",\n    ]\n)\nALL_INCLUDES.extend(\n    [\n        \"vendors/pybind11/include/\",\n        \"JUCE/modules/\",\n        \"JUCE/modules/juce_audio_processors/format_types/VST3_SDK/\",\n    ]\n)\n\nif \"musllinux\" in os.getenv(\"CIBW_BUILD\", \"\"):\n    # For Alpine/musllinux compatibility:\n    ALL_CPPFLAGS.extend(\n        [\n            \"-D_NL_IDENTIFICATION_LANGUAGE=0x42\",\n            \"-D_NL_IDENTIFICATION_TERRITORY=0x43\",\n        ]\n    )\n\n# Rubber Band library:\nALL_CPPFLAGS.extend(\n    [\n        \"-DUSE_BQRESAMPLER=1\",\n        \"-D_HAS_STD_BYTE=0\",\n        \"-DNOMINMAX\",\n        \"-DALREADY_CONFIGURED\",\n    ]\n)\n\n\ndef ignore_files_matching(files, *matches):\n    matches = set(matches)\n    for match in matches:\n        new_files = []\n        for file in files:\n            if match in str(file):\n                # print(f\"Skipping compilation of: {file}\")\n                pass\n            else:\n                new_files.append(file)\n        files = new_files\n    return files\n\n\n# Platform-specific FFT speedup flags:\nif platform.system() == \"Windows\" or \"musllinux\" in os.getenv(\"CIBW_BUILD\", \"\"):\n    ALL_CPPFLAGS.append(\"-DUSE_BUILTIN_FFT\")\n    ALL_CPPFLAGS.append(\"-DNO_THREADING\")\nelif platform.system() == \"Darwin\":\n    # No need for any threading code on MacOS;\n    # vDSP does all of this for us and these code paths are redundant.\n    ALL_CPPFLAGS.append(\"-DNO_THREADING\")\nelif platform.system() == \"Linux\":\n    # Use FFTW3 for FFTs on Linux, which should speed up Rubberband by 3-4x:\n    ALL_CPPFLAGS.extend(\n        [\n            \"-DHAVE_FFTW3=1\",\n            \"-DLACK_SINCOS=1\",\n            \"-DFFTW_DOUBLE_ONLY=1\",\n            \"-DUSE_PTHREADS\",\n        ]\n    )\n    ALL_INCLUDES += [\"vendors/fftw3/api/\", \"vendors/fftw3/\"]\n    fftw_paths = list(Path(\"vendors/fftw3/\").glob(\"**/*.c\"))\n    fftw_paths = ignore_files_matching(\n        fftw_paths,\n        # Don't bother compiling in Altivec or VSX (PowerPC) support;\n        # it's 2024, not 2004 (although RIP my G5 cheese grater)\n        \"altivec\",\n        \"vsx\",\n        # We're not using FFTW in multi-threaded mode:\n        \"mpi\",\n        \"threads\",\n        # No need for tests, tools, or support code:\n        \"tests\",\n        \"tools\",\n        \"/support\",\n        \"common/\",\n        \"libbench\",\n        # Ignore SSE, AVX2, AVX128, and AVX512 SIMD code;\n        # For Rubber Band's usage, just AVX gives us the\n        # largest speedup without bloating the binary\n        \"sse2\",\n        \"avx2\",\n        \"avx512\",\n        \"kcvi\",\n        \"avx-128-fma\",\n        \"generic-simd\",\n    )\n\n    # On ARM, ignore the X86-specific SIMD code:\n    if \"arm\" in platform.processor() or \"aarch64\" in platform.processor():\n        fftw_paths = ignore_files_matching(fftw_paths, \"avx\", \"/sse\")\n        ALL_CFLAGS.append(\"-DHAVE_NEON=1\")\n    else:\n        # And on x86, ignore the ARM-specific SIMD code (and KCVI; not GCC or Clang compatible).\n        fftw_paths = ignore_files_matching(fftw_paths, \"neon\")\n        ALL_CFLAGS.append(\"-march=native\")\n        # Enable SIMD instructions:\n        ALL_CFLAGS.extend(\n            [\n                # \"-DHAVE_SSE2\",\n                \"-DHAVE_AVX\",  # Testing shows this is all we need!\n                # \"-DHAVE_AVX_128_FMA\", # AMD only\n                # \"-DHAVE_AVX2\",\n                # \"-DHAVE_AVX512\", # No measurable speed difference\n                # \"-DHAVE_GENERIC_SIMD128\", # Crashes!\n                # \"-DHAVE_GENERIC_SIMD256\", # Also crashes!\n            ]\n        )\n\n    ALL_SOURCE_PATHS += fftw_paths\n\n    ALL_CFLAGS.extend(\n        [\n            \"-DHAVE_UINTPTR_T\",\n            '-DPACKAGE=\"FFTW\"',\n            '-DVERSION=\"0\"',\n            '-DPACKAGE_VERSION=\"00000\"',\n            '-DFFTW_CC=\"clang\"',\n            \"-includestring.h\",\n            \"-includestdint.h\",\n            \"-includevendors/fftw3/dft/codelet-dft.h\",\n            \"-includevendors/fftw3/rdft/codelet-rdft.h\",\n            \"-DHAVE_INTTYPES_H\",\n            \"-DHAVE_STDINT_H\",\n            \"-DHAVE_STDLIB_H\",\n            \"-DHAVE_STRING_H\",\n            \"-DHAVE_TIME_H\",\n            \"-DHAVE_UNISTD_H\",\n            \"-DHAVE_DECL_DRAND48\",\n            \"-DHAVE_DECL_SRAND48\",\n            \"-DHAVE_DECL_COSL\",\n            \"-DHAVE_DECL_SINL\",\n            \"-DHAVE_DECL_POSIX_MEMALIGN\",\n            \"-DHAVE_DRAND48\",\n            \"-DHAVE_SRAND48\",\n            \"-DHAVE_POSIX_MEMALIGN\",\n            \"-DHAVE_ISNAN\",\n            \"-DHAVE_SNPRINTF\",\n            \"-DHAVE_STRCHR\",\n            \"-DHAVE_SYSCTL\",\n        ]\n    )\n    if platform.system() == \"Linux\":\n        ALL_CFLAGS.append(\"-DHAVE_GETTIMEOFDAY\")\n\nALL_SOURCE_PATHS += list(Path(\"vendors/rubberband/single\").glob(\"*.cpp\"))\n\nALL_SOURCE_PATHS += list(Path(\"vendors\").glob(\"*.c\"))\nALL_INCLUDES += [\"vendors/\"]\n\n# LAME/mpglib:\nLAME_FLAGS = [\"-DHAVE_MPGLIB\"]\nLAME_CONFIG_FILE = str(Path(\"vendors/lame_config.h\").resolve())\nif platform.system() == \"Windows\":\n    LAME_FLAGS.append(f\"/FI{LAME_CONFIG_FILE}\")\n    LAME_FLAGS.append(\"-DHAVE_XMMINTRIN_H\")\nelse:\n    LAME_FLAGS.append(f\"-include{LAME_CONFIG_FILE}\")\nALL_CFLAGS.extend(LAME_FLAGS)\nALL_SOURCE_PATHS += list(Path(\"vendors/lame/libmp3lame\").glob(\"*.c\"))\nALL_SOURCE_PATHS += list(Path(\"vendors/lame/libmp3lame/vector\").glob(\"*.c\"))\nALL_SOURCE_PATHS += list(Path(\"vendors/lame/mpglib\").glob(\"*.c\"))\nALL_INCLUDES += [\n    \"vendors/lame/include/\",\n    \"vendors/lame/libmp3lame/\",\n    \"vendors/lame/\",\n]\n\n# libgsm\nALL_SOURCE_PATHS += [p for p in Path(\"vendors/libgsm/src\").glob(\"*.c\") if \"toast\" not in p.name]\nALL_INCLUDES += [\"vendors/libgsm/inc\"]\n\n\n# Add platform-specific flags:\nif platform.system() == \"Darwin\":\n    ALL_CPPFLAGS.append(\"-DMACOS=1\")\n    ALL_CPPFLAGS.append(\"-DHAVE_VDSP=1\")\n    if not DEBUG and not os.getenv(\"DISABLE_LTO\"):\n        ALL_CPPFLAGS.append(\"-flto\")\n        ALL_LINK_ARGS.append(\"-flto\")\n    ALL_LINK_ARGS.append(\"-fvisibility=hidden\")\n    ALL_CFLAGS += [\"-Wno-comment\"]\nelif platform.system() == \"Linux\":\n    ALL_CPPFLAGS.append(\"-DLINUX=1\")\n    # We use GCC on Linux, which doesn't take a value for the -flto flag:\n    if not DEBUG and not os.getenv(\"DISABLE_LTO\"):\n        ALL_CPPFLAGS.append(\"-flto\")\n        ALL_LINK_ARGS.append(\"-flto\")\n    ALL_LINK_ARGS.append(\"-fvisibility=hidden\")\n    ALL_CFLAGS += [\"-Wno-comment\"]\nelif platform.system() == \"Windows\":\n    ALL_CPPFLAGS.append(\"-DWINDOWS=1\")\nelse:\n    raise NotImplementedError(\n        \"Not sure how to build JUCE on platform: {}!\".format(platform.system())\n    )\n\n\nif DEBUG:\n    ALL_CPPFLAGS += [\"-DDEBUG=1\", \"-D_DEBUG=1\"]\n    ALL_CPPFLAGS += [\"-O0\", \"-g\"]\nelse:\n    ALL_CPPFLAGS += [\"/Ox\" if platform.system() == \"Windows\" else \"-O3\"]\n\nif bool(int(os.environ.get(\"USE_ASAN\", 0))):\n    ALL_CPPFLAGS += [\"-fsanitize=address\", \"-fno-omit-frame-pointer\"]\n    ALL_LINK_ARGS += [\"-fsanitize=address\"]\n    if platform.system() == \"Linux\":\n        ALL_LINK_ARGS += [\"-shared-libasan\", \"-latomic\"]\nelif bool(int(os.environ.get(\"USE_TSAN\", 0))):\n    ALL_CPPFLAGS += [\"-fsanitize=thread\"]\n    ALL_LINK_ARGS += [\"-fsanitize=thread\"]\nelif bool(int(os.environ.get(\"USE_MSAN\", 0))):\n    ALL_CPPFLAGS += [\"-fsanitize=memory\", \"-fsanitize-memory-track-origins\"]\n    ALL_LINK_ARGS += [\"-fsanitize=memory\"]\n\n\n# Regardless of platform, allow our compiler to compile .mm files as Objective-C (required on MacOS)\nUnixCCompiler.src_extensions.append(\".mm\")\nUnixCCompiler.language_map[\".mm\"] = \"objc++\"\n\n# Add all Pedalboard C++ sources:\nALL_SOURCE_PATHS += list(Path(\"pedalboard\").glob(\"**/*.cpp\"))\n\nif platform.system() == \"Darwin\":\n    MACOS_FRAMEWORKS = [\n        \"Accelerate\",\n        \"AppKit\",\n        \"AudioToolbox\",\n        \"Cocoa\",\n        \"CoreAudio\",\n        \"CoreAudioKit\",\n        \"CoreMIDI\",\n        \"Foundation\",\n        \"IOKit\",\n        \"QuartzCore\",\n        \"WebKit\",\n    ]\n\n    # On MacOS, we link against some Objective-C system libraries, so we search\n    # for Objective-C++ files instead of C++ files.\n    for f in MACOS_FRAMEWORKS:\n        ALL_LINK_ARGS += [\"-framework\", f]\n    ALL_CPPFLAGS.append(\"-DJUCE_PLUGINHOST_AU=1\")\n    ALL_CPPFLAGS.append(\"-xobjective-c++\")\n\n    # Replace .cpp sources with matching .mm sources on macOS to force the\n    # compiler to use Apple's Objective-C and Objective-C++ code.\n    for objc_source in Path(\"pedalboard\").glob(\"**/*.mm\"):\n        matching_cpp_source = next(\n            iter(\n                [\n                    cpp_source\n                    for cpp_source in ALL_SOURCE_PATHS\n                    if os.path.splitext(objc_source.name)[0] == os.path.splitext(cpp_source.name)[0]\n                ]\n            ),\n            None,\n        )\n        if matching_cpp_source:\n            ALL_SOURCE_PATHS[ALL_SOURCE_PATHS.index(matching_cpp_source)] = objc_source\n        else:\n            ALL_SOURCE_PATHS.append(objc_source)\n    ALL_RESOLVED_SOURCE_PATHS = [str(p.resolve()) for p in ALL_SOURCE_PATHS]\nelif platform.system() == \"Linux\":\n    for package in [\"freetype2\"]:\n        flags = (\n            check_output([\"pkg-config\", \"--cflags-only-I\", package])\n            .decode(\"utf-8\")\n            .strip()\n            .split(\" \")\n        )\n        include_paths = [flag[2:] for flag in flags]\n        ALL_INCLUDES += include_paths\n    ALL_LINK_ARGS += [\"-lfreetype\"]\n    ALL_LINK_ARGS += [\"-lasound\"]\n\n    ALL_RESOLVED_SOURCE_PATHS = [str(p.resolve()) for p in ALL_SOURCE_PATHS]\nelif platform.system() == \"Windows\":\n    ALL_CPPFLAGS += [\"-DJUCE_DLL_BUILD=1\"]\n    # https://forum.juce.com/t/statically-linked-exe-in-win-10-not-working/25574/3\n    ALL_LIBRARIES.extend(\n        [\n            \"kernel32\",\n            \"user32\",\n            \"gdi32\",\n            \"winspool\",\n            \"comdlg32\",\n            \"advapi32\",\n            \"shell32\",\n            \"ole32\",\n            \"oleaut32\",\n            \"uuid\",\n            \"odbc32\",\n            \"odbccp32\",\n        ]\n    )\n    ALL_RESOLVED_SOURCE_PATHS = [str(p.resolve()) for p in ALL_SOURCE_PATHS]\nelse:\n    raise NotImplementedError(\n        \"Not sure how to build JUCE on platform: {}!\".format(platform.system())\n    )\n\n\ndef patch_compile(original_compile):\n    \"\"\"\n    On GCC/Clang, we want to pass different arguments when compiling C files vs C++ files.\n    \"\"\"\n\n    def new_compile(obj, src, ext, cc_args, extra_postargs, *args, **kwargs):\n        _cc_args = cc_args\n\n        if ext in (\".cpp\", \".cxx\", \".cc\", \".mm\"):\n            _cc_args = cc_args + ALL_CPPFLAGS\n        elif ext in (\".c\",):\n            # We're compiling C code, remove the -std= arg:\n            extra_postargs = [arg for arg in extra_postargs if \"std=\" not in arg]\n            _cc_args = cc_args + ALL_CFLAGS\n\n        # Code in JUCE or vendors should not even know we're using Python:\n        should_omit_python_header = any(x in src for x in (\"JUCE\", \"/juce_overrides/\", \"/vendors/\"))\n\n        # Remove the Python header from most files; we only need it when compiling\n        # This speeds up compile times on CI as most of the objects don't need Python\n        # headers at all, and including -I/include/python3.x/Python.h prevents us from\n        # re-using the same object file for different Python versions.\n        if any(\"include/python3\" in arg for arg in _cc_args) and should_omit_python_header:\n            _cc_args = [arg for arg in _cc_args if \"include/python3\" not in arg]\n\n        return original_compile(obj, src, ext, _cc_args, extra_postargs, *args, **kwargs)\n\n    return new_compile\n\n\nclass BuildC_CxxExtensions(build_ext):\n    \"\"\"\n    Add custom logic for injecting different arguments when compiling C vs C++ files.\n    \"\"\"\n\n    def initialize_options(self):\n        build_ext.initialize_options(self)\n        # If on CI, avoid breaking ccache by using a consistent\n        # output directory name regardless of Python version:\n        if os.getenv(\"CI\"):\n            self.build_temp = \"./build/temp\"\n\n    def build_extensions(self, *args, **kwargs):\n        self.compiler._compile = patch_compile(self.compiler._compile)\n        build_ext.build_extensions(self, *args, **kwargs)\n\n\nif platform.system() == \"Windows\":\n    # The MSVCCompiler extension doesn't support per-file command line arguments,\n    # so let's merge all of the flags into one list here.\n    BASE_CPP_FLAGS.extend(ALL_CPPFLAGS)\n    BASE_CPP_FLAGS.extend(ALL_CFLAGS)\n\n\npedalboard_cpp = Pybind11Extension(\n    \"pedalboard_native\",\n    sources=ALL_RESOLVED_SOURCE_PATHS,\n    include_dirs=ALL_INCLUDES,\n    extra_compile_args=BASE_CPP_FLAGS,\n    extra_link_args=ALL_LINK_ARGS,\n    libraries=ALL_LIBRARIES,\n    language=\"c++\",\n    cxx_std=17,\n    include_pybind11=False,\n)\n\n\nif DEBUG:\n    # Why does Pybind11 always remove debugging symbols?\n    pedalboard_cpp.extra_compile_args.remove(\"-g0\")\n\n# read the contents of the README file\nthis_directory = Path(__file__).parent\nlong_description = (this_directory / \"README.md\").read_text()\n\n# read the contents of the version.py\nversion = {}\nversion_file_contents = (this_directory / \"pedalboard\" / \"version.py\").read_text()\nexec(version_file_contents, version)\n\nlogging.basicConfig(format=\"%(message)s\")\n\nsetup(\n    name=\"pedalboard\",\n    version=version[\"__version__\"],\n    author=\"Peter Sobot\",\n    author_email=\"psobot@spotify.com\",\n    description=\"A Python library for adding effects to audio.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"License :: OSI Approved :: GNU General Public License v3 (GPLv3)\",\n        \"Operating System :: MacOS\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: C++\",\n        \"Programming Language :: Python\",\n        \"Topic :: Multimedia :: Sound/Audio\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Programming Language :: Python :: 3.13\",\n    ],\n    ext_modules=[pedalboard_cpp],\n    install_requires=[\"numpy\"],\n    packages=[\"pedalboard\", \"pedalboard.io\", \"pedalboard_native\"],\n    package_data={\n        \"pedalboard\": [\"py.typed\", \"*.pyi\", \"**/*.pyi\"],\n        \"pedalboard_native\": [\"py.typed\", \"*.pyi\", \"**/*.pyi\"],\n    },\n    cmdclass={\"build_ext\": BuildC_CxxExtensions},\n)\n"
        },
        {
          "name": "stubtest.allowlist",
          "type": "blob",
          "size": 0.51171875,
          "content": "pedalboard.Plugin.__call__\npedalboard.__all__\npedalboard.io.__all__\npedalboard._pedalboard.Dict\npedalboard._pedalboard.Iterable\npedalboard._pedalboard.List\npedalboard._pedalboard.Plugin.__call__\npedalboard._pedalboard.WeakTypeWrapper@\\d+\npedalboard._pedalboard._AudioProcessorParameter.__init__\npedalboard._pedalboard.Pedalboard\npedalboard._pedalboard.VST3Plugin\npedalboard.utils.Chain\npedalboard.utils.Mix\npedalboard.utils.__all__\npedalboard.version.__all__\n.*?AudioUnitPlugin.*\n.*?metaclass.*\n.*?ExternalPluginReloadType.*"
        },
        {
          "name": "test-requirements.txt",
          "type": "blob",
          "size": 0.4169921875,
          "content": "coverage\npytest>6.2\npytest-cov\npytest-mock\npybind11<2.13; python_version < '3.7'\npybind11>=2.13; python_version >= '3.7'\nsetuptools>=59\npip>22; python_version > '3.6'\npip>21; python_version < '3.7'\nwheel\n\nnumpy>=2.1.0rc1; python_version>=\"3.13\"\nnumpy>=2; python_version>=\"3.9\" and python_version<\"3.13\"\nnumpy<2; python_version<=\"3.8\"\ngoogle-cloud-storage\ntqdm\npsutil\nmypy\n\n# For MIDI support - only in test though!\nmido\nmutagen"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.548828125,
          "content": "[tox]\nenvlist = py,docs,check-formatting,lint\nskipsdist = True\nusedevelop = True\n\n[testenv]\nbasepython = python3\ndeps =\n    -r{toxinidir}/dev-requirements.txt\ncommands =\n    coverage run -m pytest {posargs}\n\n[testenv:docs]\ndeps = -rdocs-requirements.txt\ncommands =\n    # interrogate -vv --fail-under 40 pedalboard\n\n\n; \"black\" is a code formatter, much like gofmt. It requires 3.6 or higher.\n; This env just runs `black` and fails tox if it's not formatted correctly.\n; If this env fails on Tingle, run `tox -e format` locally in order to apply changes.\n[testenv:check-formatting]\nbasepython = python3\ndeps = black\nskip_install = true\ncommands =\n    # black pedalboard tests --line-length 120 --experimental-string-processing --diff --check\n    # clang-format -style=LLVM pedalboard.cpp\n\n[testenv:format]\nbasepython = python3\ndeps = black\nskip_install = true\ncommands =\n    # black pedalboard tests --line-length 120 --experimental-string-processing \n    clang-format -style=LLVM -i pedalboard.cpp\n\n[testenv:lint]\n; feel free to add flake8 plugins (i.e. flake8-import-order), add isort,\n; or use another linter of your choice\nbasepython = python3\ndeps = flake8\nskip_install = true\ncommands = flake8\n\n; The sections defined below are for configuring specific tools that are used\n; in the above testenvs. Usually, if the tool is ran directly/outside of tox,\n; i.e. `(env) $ pytest`, it will still pick up this configuration.\n\n[flake8]\nshow-source = true\nmax-line-length = 120\nignore = W503,E203\nexclude = .venv,.tox,.git,dist,doc,*.egg,build,vendors\n\n[pytest]\naddopts = \ntestpaths = tests\n"
        },
        {
          "name": "vendors",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}