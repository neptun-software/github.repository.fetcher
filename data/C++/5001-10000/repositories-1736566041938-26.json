{
  "metadata": {
    "timestamp": 1736566041938,
    "page": 26,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/re2",
      "stars": 9076,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 0.6728515625,
          "content": "# Copyright 2022 The RE2 Authors.  All Rights Reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n# Enable layering check features. Useful on Clang only.\nbuild --features=layering_check\n# Enable parse headers features. Enforcing that headers are self-contained.\nbuild --features=parse_headers\n\n# Abseil requires C++14 at minimum.\nbuild --enable_platform_specific_config\nbuild:linux --cxxopt=-std=c++14\nbuild:macos --cxxopt=-std=c++14\nbuild:windows --cxxopt=/std:c++14\n\n# Print test logs for failed tests.\ntest --test_output=errors\n\n# https://bazel.build/configure/best-practices#bazelrc-file\ntry-import %workspace%/user.bazelrc\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0458984375,
          "content": "*.pyc\n*.orig\ncore\nobj/\nbenchlog.*\nuser.bazelrc\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 11.1396484375,
          "content": "# Copyright 2009 The RE2 Authors.  All Rights Reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n# Bazel (http://bazel.build/) BUILD file for RE2.\n\nlicenses([\"notice\"])\n\nexports_files([\"LICENSE\"])\n\ncc_library(\n    name = \"re2\",\n    srcs = [\n        \"re2/bitmap256.cc\",\n        \"re2/bitmap256.h\",\n        \"re2/bitstate.cc\",\n        \"re2/compile.cc\",\n        \"re2/dfa.cc\",\n        \"re2/filtered_re2.cc\",\n        \"re2/mimics_pcre.cc\",\n        \"re2/nfa.cc\",\n        \"re2/onepass.cc\",\n        \"re2/parse.cc\",\n        \"re2/perl_groups.cc\",\n        \"re2/pod_array.h\",\n        \"re2/prefilter.cc\",\n        \"re2/prefilter.h\",\n        \"re2/prefilter_tree.cc\",\n        \"re2/prefilter_tree.h\",\n        \"re2/prog.cc\",\n        \"re2/prog.h\",\n        \"re2/re2.cc\",\n        \"re2/regexp.cc\",\n        \"re2/regexp.h\",\n        \"re2/set.cc\",\n        \"re2/simplify.cc\",\n        \"re2/sparse_array.h\",\n        \"re2/sparse_set.h\",\n        \"re2/tostring.cc\",\n        \"re2/unicode_casefold.cc\",\n        \"re2/unicode_casefold.h\",\n        \"re2/unicode_groups.cc\",\n        \"re2/unicode_groups.h\",\n        \"re2/walker-inl.h\",\n        \"util/rune.cc\",\n        \"util/strutil.cc\",\n        \"util/strutil.h\",\n        \"util/utf.h\",\n    ],\n    hdrs = [\n        \"re2/filtered_re2.h\",\n        \"re2/re2.h\",\n        \"re2/set.h\",\n        \"re2/stringpiece.h\",\n    ],\n    copts = select({\n        # WebAssembly support for threads is... fraught at every level.\n        \"@platforms//cpu:wasm32\": [],\n        \"@platforms//cpu:wasm64\": [],\n        \"@platforms//os:emscripten\": [],\n        \"@platforms//os:wasi\": [],\n        \"@platforms//os:windows\": [],\n        \"//conditions:default\": [\"-pthread\"],\n    }),\n    linkopts = select({\n        # macOS doesn't need `-pthread' when linking and it appears that\n        # older versions of Clang will warn about the unused command line\n        # argument, so just don't pass it.\n        \"@platforms//os:macos\": [],\n        # WebAssembly support for threads is... fraught at every level.\n        \"@platforms//cpu:wasm32\": [],\n        \"@platforms//cpu:wasm64\": [],\n        \"@platforms//os:emscripten\": [],\n        \"@platforms//os:wasi\": [],\n        \"@platforms//os:windows\": [],\n        \"//conditions:default\": [\"-pthread\"],\n    }),\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \"@abseil-cpp//absl/base\",\n        \"@abseil-cpp//absl/base:core_headers\",\n        \"@abseil-cpp//absl/container:fixed_array\",\n        \"@abseil-cpp//absl/container:flat_hash_map\",\n        \"@abseil-cpp//absl/container:flat_hash_set\",\n        \"@abseil-cpp//absl/container:inlined_vector\",\n        \"@abseil-cpp//absl/hash\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@abseil-cpp//absl/strings\",\n        \"@abseil-cpp//absl/strings:str_format\",\n        \"@abseil-cpp//absl/synchronization\",\n        \"@abseil-cpp//absl/types:optional\",\n        \"@abseil-cpp//absl/types:span\",\n    ],\n)\n\ncc_library(\n    name = \"testing\",\n    testonly = 1,\n    srcs = [\n        \"re2/testing/backtrack.cc\",\n        \"re2/testing/dump.cc\",\n        \"re2/testing/exhaustive_tester.cc\",\n        \"re2/testing/null_walker.cc\",\n        \"re2/testing/regexp_generator.cc\",\n        \"re2/testing/string_generator.cc\",\n        \"re2/testing/tester.cc\",\n        \"util/pcre.cc\",\n    ],\n    hdrs = [\n        \"re2/testing/exhaustive_tester.h\",\n        \"re2/testing/regexp_generator.h\",\n        \"re2/testing/string_generator.h\",\n        \"re2/testing/tester.h\",\n        \"util/malloc_counter.h\",\n        \"util/pcre.h\",\n\n        # Exposed for testing only.\n        \"re2/bitmap256.h\",\n        \"re2/pod_array.h\",\n        \"re2/prefilter.h\",\n        \"re2/prefilter_tree.h\",\n        \"re2/prog.h\",\n        \"re2/regexp.h\",\n        \"re2/sparse_array.h\",\n        \"re2/sparse_set.h\",\n        \"re2/unicode_casefold.h\",\n        \"re2/unicode_groups.h\",\n        \"re2/walker-inl.h\",\n        \"util/strutil.h\",\n        \"util/utf.h\",\n    ],\n    visibility = [\":__subpackages__\"],\n    deps = [\n        \":re2\",\n        \"@abseil-cpp//absl/base\",\n        \"@abseil-cpp//absl/base:core_headers\",\n        \"@abseil-cpp//absl/container:flat_hash_set\",\n        \"@abseil-cpp//absl/flags:flag\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@abseil-cpp//absl/strings\",\n        \"@abseil-cpp//absl/strings:str_format\",\n        \"@googletest//:gtest\",\n    ],\n)\n\ncc_test(\n    name = \"charclass_test\",\n    size = \"small\",\n    srcs = [\"re2/testing/charclass_test.cc\"],\n    deps = [\n        \":testing\",\n        \"@abseil-cpp//absl/base:core_headers\",\n        \"@abseil-cpp//absl/strings:str_format\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"compile_test\",\n    size = \"small\",\n    srcs = [\"re2/testing/compile_test.cc\"],\n    deps = [\n        \":testing\",\n        \"@abseil-cpp//absl/base:core_headers\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@abseil-cpp//absl/strings\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"filtered_re2_test\",\n    size = \"small\",\n    srcs = [\"re2/testing/filtered_re2_test.cc\"],\n    deps = [\n        \":re2\",\n        \":testing\",\n        \"@abseil-cpp//absl/base:core_headers\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"mimics_pcre_test\",\n    size = \"small\",\n    srcs = [\"re2/testing/mimics_pcre_test.cc\"],\n    deps = [\n        \":testing\",\n        \"@abseil-cpp//absl/base:core_headers\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"parse_test\",\n    size = \"small\",\n    srcs = [\"re2/testing/parse_test.cc\"],\n    deps = [\n        \":testing\",\n        \"@abseil-cpp//absl/base:core_headers\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"possible_match_test\",\n    size = \"small\",\n    srcs = [\"re2/testing/possible_match_test.cc\"],\n    deps = [\n        \":re2\",\n        \":testing\",\n        \"@abseil-cpp//absl/base:core_headers\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@abseil-cpp//absl/strings\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"re2_arg_test\",\n    size = \"small\",\n    srcs = [\"re2/testing/re2_arg_test.cc\"],\n    deps = [\n        \":re2\",\n        \":testing\",\n        \"@abseil-cpp//absl/base:core_headers\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@abseil-cpp//absl/types:optional\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"re2_test\",\n    size = \"small\",\n    srcs = [\"re2/testing/re2_test.cc\"],\n    deps = [\n        \":re2\",\n        \":testing\",\n        \"@abseil-cpp//absl/base:core_headers\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@abseil-cpp//absl/strings\",\n        \"@abseil-cpp//absl/strings:str_format\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"regexp_test\",\n    size = \"small\",\n    srcs = [\"re2/testing/regexp_test.cc\"],\n    deps = [\n        \":testing\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"required_prefix_test\",\n    size = \"small\",\n    srcs = [\"re2/testing/required_prefix_test.cc\"],\n    deps = [\n        \":testing\",\n        \"@abseil-cpp//absl/base:core_headers\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"search_test\",\n    size = \"small\",\n    srcs = [\"re2/testing/search_test.cc\"],\n    deps = [\n        \":testing\",\n        \"@abseil-cpp//absl/base:core_headers\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"set_test\",\n    size = \"small\",\n    srcs = [\"re2/testing/set_test.cc\"],\n    deps = [\n        \":re2\",\n        \":testing\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"simplify_test\",\n    size = \"small\",\n    srcs = [\"re2/testing/simplify_test.cc\"],\n    deps = [\n        \":testing\",\n        \"@abseil-cpp//absl/base:core_headers\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"string_generator_test\",\n    size = \"small\",\n    srcs = [\"re2/testing/string_generator_test.cc\"],\n    deps = [\n        \":testing\",\n        \"@abseil-cpp//absl/strings\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"dfa_test\",\n    size = \"large\",\n    srcs = [\"re2/testing/dfa_test.cc\"],\n    deps = [\n        \":re2\",\n        \":testing\",\n        \"@abseil-cpp//absl/base:core_headers\",\n        \"@abseil-cpp//absl/flags:flag\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@abseil-cpp//absl/strings\",\n        \"@abseil-cpp//absl/strings:str_format\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"exhaustive1_test\",\n    size = \"large\",\n    srcs = [\"re2/testing/exhaustive1_test.cc\"],\n    deps = [\n        \":testing\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"exhaustive2_test\",\n    size = \"large\",\n    srcs = [\"re2/testing/exhaustive2_test.cc\"],\n    deps = [\n        \":testing\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"exhaustive3_test\",\n    size = \"large\",\n    srcs = [\"re2/testing/exhaustive3_test.cc\"],\n    deps = [\n        \":testing\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"exhaustive_test\",\n    size = \"large\",\n    srcs = [\"re2/testing/exhaustive_test.cc\"],\n    deps = [\n        \":testing\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_test(\n    name = \"random_test\",\n    size = \"large\",\n    srcs = [\"re2/testing/random_test.cc\"],\n    deps = [\n        \":testing\",\n        \"@abseil-cpp//absl/flags:flag\",\n        \"@abseil-cpp//absl/strings:str_format\",\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n\ncc_binary(\n    name = \"regexp_benchmark\",\n    testonly = 1,\n    srcs = [\"re2/testing/regexp_benchmark.cc\"],\n    deps = [\n        \":re2\",\n        \":testing\",\n        \"@abseil-cpp//absl/container:flat_hash_map\",\n        \"@abseil-cpp//absl/flags:flag\",\n        \"@abseil-cpp//absl/log:absl_check\",\n        \"@abseil-cpp//absl/log:absl_log\",\n        \"@abseil-cpp//absl/strings\",\n        \"@abseil-cpp//absl/strings:str_format\",\n        \"@abseil-cpp//absl/synchronization\",\n        \"@google_benchmark//:benchmark_main\",\n    ],\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 7.98046875,
          "content": "# Copyright 2015 The RE2 Authors.  All Rights Reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n# https://github.com/google/oss-policies-info/blob/main/foundational-cxx-support-matrix.md\ncmake_minimum_required(VERSION 3.13)\n\nproject(RE2 CXX)\ninclude(CMakePackageConfigHelpers)\ninclude(CTest)\ninclude(GNUInstallDirs)\n\noption(BUILD_SHARED_LIBS \"build shared libraries\" OFF)\noption(RE2_USE_ICU \"build against ICU for full Unicode properties support\" OFF)\n\n# For historical reasons, this is just \"USEPCRE\", not \"RE2_USE_PCRE\".\noption(USEPCRE \"build against PCRE for testing and benchmarking\" OFF)\n\n# See https://groups.google.com/g/re2-dev/c/P6_NM0YIWvA for details.\n# This has no effect unless RE2 is being built for an Apple platform\n# such as macOS or iOS.\noption(RE2_BUILD_FRAMEWORK \"build RE2 as a framework\" OFF)\n\n# CMake seems to have no way to enable/disable testing per subproject,\n# so we provide an option similar to BUILD_TESTING, but just for RE2.\noption(RE2_BUILD_TESTING \"enable testing for RE2\" OFF)\n\n# The pkg-config Requires: field.\nset(REQUIRES)\n\n# ABI version\n# http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html\nset(SONAME 11)\n\nset(EXTRA_TARGET_LINK_LIBRARIES)\n\nif(CMAKE_CXX_COMPILER_ID MATCHES \"MSVC\")\n  if(MSVC_VERSION LESS 1920)\n    message(FATAL_ERROR \"you need Visual Studio 2019 or later\")\n  endif()\n  if(BUILD_SHARED_LIBS)\n    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n  endif()\n  # CMake defaults to /W3, but some users like /W4 (or /Wall) and /WX,\n  # so we disable various warnings that aren't particularly helpful.\n  add_compile_options(/wd4100 /wd4201 /wd4456 /wd4457 /wd4702 /wd4815)\n  # Without a byte order mark (BOM), Visual Studio assumes that the source\n  # file is encoded using the current user code page, so we specify UTF-8.\n  add_compile_options(/utf-8)\nendif()\n\nif(WIN32)\n  add_definitions(-DUNICODE -D_UNICODE -DSTRICT -DNOMINMAX)\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS)\nendif()\n\nif(UNIX)\n  set(THREADS_PREFER_PTHREAD_FLAG ON)\n  find_package(Threads REQUIRED)\nendif()\n\nset(ABSL_DEPS\n    absl_absl_check\n    absl_absl_log\n    absl_base\n    absl_core_headers\n    absl_fixed_array\n    absl_flags\n    absl_flat_hash_map\n    absl_flat_hash_set\n    absl_hash\n    absl_inlined_vector\n    absl_optional\n    absl_span\n    absl_str_format\n    absl_strings\n    absl_synchronization\n    )\n\n# If a top-level project has called add_directory(abseil-cpp) already (possibly\n# indirectly), let that take precedence over any copy of Abseil that might have\n# been installed on the system. And likewise for ICU, GoogleTest and Benchmark.\nif(NOT TARGET absl::base)\n  find_package(absl REQUIRED)\nendif()\nlist(APPEND REQUIRES ${ABSL_DEPS})\n\nif(RE2_USE_ICU)\n  if(NOT TARGET ICU::uc)\n    find_package(ICU REQUIRED COMPONENTS uc)\n  endif()\n  add_definitions(-DRE2_USE_ICU)\n  list(APPEND REQUIRES icu-uc)\nendif()\n\nif(USEPCRE)\n  add_definitions(-DUSEPCRE)\n  list(APPEND EXTRA_TARGET_LINK_LIBRARIES pcre)\nendif()\n\nlist(JOIN REQUIRES \" \" REQUIRES)\n\nset(RE2_SOURCES\n    re2/bitmap256.cc\n    re2/bitstate.cc\n    re2/compile.cc\n    re2/dfa.cc\n    re2/filtered_re2.cc\n    re2/mimics_pcre.cc\n    re2/nfa.cc\n    re2/onepass.cc\n    re2/parse.cc\n    re2/perl_groups.cc\n    re2/prefilter.cc\n    re2/prefilter_tree.cc\n    re2/prog.cc\n    re2/re2.cc\n    re2/regexp.cc\n    re2/set.cc\n    re2/simplify.cc\n    re2/tostring.cc\n    re2/unicode_casefold.cc\n    re2/unicode_groups.cc\n    util/rune.cc\n    util/strutil.cc\n    )\n\nset(RE2_HEADERS\n    re2/filtered_re2.h\n    re2/re2.h\n    re2/set.h\n    re2/stringpiece.h\n    )\n\nadd_library(re2 ${RE2_SOURCES})\ntarget_compile_features(re2 PUBLIC cxx_std_14)\ntarget_include_directories(re2 PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\n# CMake gives \"set_target_properties called with incorrect number of arguments.\"\n# errors if we don't quote ${RE2_HEADERS}, so quote it despite prevailing style.\nset_target_properties(re2 PROPERTIES PUBLIC_HEADER \"${RE2_HEADERS}\")\nset_target_properties(re2 PROPERTIES SOVERSION ${SONAME} VERSION ${SONAME}.0.0)\nadd_library(re2::re2 ALIAS re2)\n\nif(APPLE AND RE2_BUILD_FRAMEWORK)\n  set_target_properties(re2 PROPERTIES\n                        FRAMEWORK TRUE\n                        FRAMEWORK_VERSION A\n                        MACOSX_FRAMEWORK_IDENTIFIER com.googlesource.code.re2)\nendif()\n\nif(UNIX)\n  target_link_libraries(re2 PUBLIC Threads::Threads)\nendif()\n\nforeach(dep ${ABSL_DEPS})\n  # Work around https://gitlab.kitware.com/cmake/cmake/-/issues/16899. >:(\n  string(PREPEND dep \"^\")\n  string(REGEX REPLACE \"\\\\^absl_\" \"absl::\" dep ${dep})\n  target_link_libraries(re2 PUBLIC ${dep})\nendforeach()\n\nif(RE2_USE_ICU)\n  target_link_libraries(re2 PUBLIC ICU::uc)\nendif()\n\nif(RE2_BUILD_TESTING)\n  if(NOT TARGET GTest::gtest)\n    find_package(GTest REQUIRED)\n  endif()\n  if(NOT TARGET benchmark::benchmark)\n    find_package(benchmark REQUIRED)\n  endif()\n\n  set(TESTING_SOURCES\n      re2/testing/backtrack.cc\n      re2/testing/dump.cc\n      re2/testing/exhaustive_tester.cc\n      re2/testing/null_walker.cc\n      re2/testing/regexp_generator.cc\n      re2/testing/string_generator.cc\n      re2/testing/tester.cc\n      util/pcre.cc\n      )\n\n  add_library(testing ${TESTING_SOURCES})\n  if(BUILD_SHARED_LIBS AND WIN32)\n    target_compile_definitions(testing PRIVATE -DRE2_BUILD_TESTING_DLL)\n  endif()\n  target_compile_features(testing PUBLIC cxx_std_14)\n  target_link_libraries(testing PUBLIC re2 GTest::gtest)\n\n  set(TEST_TARGETS\n      charclass_test\n      compile_test\n      filtered_re2_test\n      mimics_pcre_test\n      parse_test\n      possible_match_test\n      re2_test\n      re2_arg_test\n      regexp_test\n      required_prefix_test\n      search_test\n      set_test\n      simplify_test\n      string_generator_test\n\n      dfa_test\n      exhaustive1_test\n      exhaustive2_test\n      exhaustive3_test\n      exhaustive_test\n      random_test\n      )\n\n  set(BENCHMARK_TARGETS\n      regexp_benchmark\n      )\n\n  foreach(target ${TEST_TARGETS})\n    add_executable(${target} re2/testing/${target}.cc)\n    if(BUILD_SHARED_LIBS AND WIN32)\n      target_compile_definitions(${target} PRIVATE -DRE2_CONSUME_TESTING_DLL)\n    endif()\n    target_compile_features(${target} PUBLIC cxx_std_14)\n    target_link_libraries(${target} PUBLIC testing GTest::gtest_main ${EXTRA_TARGET_LINK_LIBRARIES})\n    add_test(NAME ${target} COMMAND ${target})\n  endforeach()\n\n  foreach(target ${BENCHMARK_TARGETS})\n    add_executable(${target} re2/testing/${target}.cc)\n    if(BUILD_SHARED_LIBS AND WIN32)\n      target_compile_definitions(${target} PRIVATE -DRE2_CONSUME_TESTING_DLL)\n    endif()\n    target_compile_features(${target} PUBLIC cxx_std_14)\n    target_link_libraries(${target} PUBLIC testing benchmark::benchmark_main ${EXTRA_TARGET_LINK_LIBRARIES})\n  endforeach()\nendif()\n\ninstall(TARGETS re2\n        EXPORT re2Targets\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        FRAMEWORK DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/re2\n        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\ninstall(EXPORT re2Targets\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/re2\n        NAMESPACE re2::)\n\nconfigure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/re2Config.cmake.in\n                              ${CMAKE_CURRENT_BINARY_DIR}/re2Config.cmake\n                              INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/re2)\nwrite_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/re2ConfigVersion.cmake\n                                 VERSION ${SONAME}.0.0\n                                 COMPATIBILITY SameMajorVersion)\n\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/re2Config.cmake\n              ${CMAKE_CURRENT_BINARY_DIR}/re2ConfigVersion.cmake\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/re2)\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/re2.pc.in\n               ${CMAKE_CURRENT_BINARY_DIR}/re2.pc\n               @ONLY)\n\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/re2.pc\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.125,
          "content": "RE2 uses Gerrit instead of GitHub pull requests.\nSee the [Contribute](https://github.com/google/re2/wiki/Contribute) wiki page.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.521484375,
          "content": "// Copyright (c) 2009 The RE2 Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//    * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//    * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 1.189453125,
          "content": "# Copyright 2009 The RE2 Authors.  All Rights Reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n# Bazel (http://bazel.build/) MODULE file for RE2.\n\nmodule(\n    name = \"re2\",\n    version = \"2024-07-02\",\n    compatibility_level = 1,\n)\n\nbazel_dep(name = \"platforms\", version = \"0.0.10\")\nbazel_dep(name = \"apple_support\", version = \"1.15.1\")\nbazel_dep(name = \"rules_cc\", version = \"0.0.9\")\nbazel_dep(name = \"abseil-cpp\", version = \"20240116.2\")\nbazel_dep(name = \"rules_python\", version = \"0.33.2\")\nbazel_dep(name = \"pybind11_bazel\", version = \"2.12.0\")\n\n# This is a temporary hack for `x64_x86_windows`.\n# TODO(junyer): Remove whenever no longer needed.\ncc_configure = use_extension(\"@bazel_tools//tools/cpp:cc_configure.bzl\", \"cc_configure_extension\")\nuse_repo(cc_configure, \"local_config_cc\")\n\n# These dependencies will be ignored when the `re2` module is not\n# the root module (or when `--ignore_dev_dependency` is enabled).\nbazel_dep(name = \"google_benchmark\", version = \"1.8.4\", dev_dependency = True)\nbazel_dep(name = \"googletest\", version = \"1.14.0.bcr.1\", dev_dependency = True)\nbazel_dep(name = \"abseil-py\", version = \"2.1.0\", dev_dependency = True)\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 12.064453125,
          "content": "# Copyright 2009 The RE2 Authors.  All Rights Reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n# Build against Abseil.\nABSL_DEPS=\\\n\tabsl_absl_check\\\n\tabsl_absl_log\\\n\tabsl_base\\\n\tabsl_core_headers\\\n\tabsl_fixed_array\\\n\tabsl_flags\\\n\tabsl_flat_hash_map\\\n\tabsl_flat_hash_set\\\n\tabsl_hash\\\n\tabsl_inlined_vector\\\n\tabsl_optional\\\n\tabsl_span\\\n\tabsl_str_format\\\n\tabsl_strings\\\n\tabsl_synchronization\\\n\nPKG_CONFIG?=pkg-config\nCCABSL=$(shell $(PKG_CONFIG) $(ABSL_DEPS) --cflags)\n# GCC barfs on `-Wl` whereas Clang doesn't mind, but it's unclear what\n# causes it to manifest on Ubuntu 22.04 LTS, so filter it out for now.\n# Similar is needed for `static-testinstall` and `shared-testinstall`.\nLDABSL=$(shell $(PKG_CONFIG) $(ABSL_DEPS) --libs | sed -e 's/-Wl / /g')\n\n# To build against ICU for full Unicode properties support,\n# uncomment the next two lines:\n# CCICU=$(shell $(PKG_CONFIG) icu-uc --cflags) -DRE2_USE_ICU\n# LDICU=$(shell $(PKG_CONFIG) icu-uc --libs)\n\n# Build against GoogleTest and Benchmark for... testing and benchmarking.\n# Capture only the `-L` flags for now; we will pass the `-l` flags later.\nCCGTEST=$(shell $(PKG_CONFIG) gtest gtest_main --cflags)\nLDGTEST=$(shell $(PKG_CONFIG) gtest gtest_main --libs-only-L)\nCCBENCHMARK=$(shell $(PKG_CONFIG) benchmark --cflags)\nLDBENCHMARK=$(shell $(PKG_CONFIG) benchmark --libs-only-L)\n\n# To build against PCRE for testing and benchmarking,\n# uncomment the next two lines:\n# CCPCRE=-I/usr/local/include -DUSEPCRE\n# LDPCRE=-L/usr/local/lib -lpcre\n\nCXX?=g++\n# can override\nCXXFLAGS?=-O3 -g\nLDFLAGS?=\n# required\nRE2_CXXFLAGS?=-pthread -Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -I. $(CCABSL) $(CCICU) $(CCGTEST) $(CCBENCHMARK) $(CCPCRE)\nRE2_LDFLAGS?=-pthread $(LDABSL) $(LDICU) $(LDGTEST) $(LDBENCHMARK) $(LDPCRE)\nAR?=ar\nARFLAGS?=rsc\nNM?=nm\nNMFLAGS?=-p\n\n# Variables mandated by GNU, the arbiter of all good taste on the internet.\n# http://www.gnu.org/prep/standards/standards.html\nprefix=/usr/local\nexec_prefix=$(prefix)\nincludedir=$(prefix)/include\nlibdir=$(exec_prefix)/lib\nINSTALL=install\nINSTALL_DATA=$(INSTALL) -m 644\n\n# Work around the weirdness of sed(1) on Darwin. :/\nifeq ($(shell uname),Darwin)\nSED_INPLACE=sed -i ''\nelse ifeq ($(shell uname),SunOS)\nSED_INPLACE=sed -i\nelse\nSED_INPLACE=sed -i\nendif\n\n# The pkg-config Requires: field.\nREQUIRES=$(ABSL_DEPS)\nifdef LDICU\nREQUIRES+=icu-uc\nendif\n\n# ABI version\n# http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html\nSONAME=11\n\n# To rebuild the Tables generated by Perl and Python scripts (requires Internet\n# access for Unicode data), uncomment the following line:\n# REBUILD_TABLES=1\n\n# The SunOS linker does not support wildcards. :(\nifeq ($(shell uname),Darwin)\nSOEXT=dylib\nSOEXTVER=$(SONAME).$(SOEXT)\nSOEXTVER00=$(SONAME).0.0.$(SOEXT)\nMAKE_SHARED_LIBRARY=$(CXX) -dynamiclib -Wl,-compatibility_version,$(SONAME),-current_version,$(SONAME).0.0,-install_name,$(libdir)/libre2.$(SOEXTVER),-exported_symbols_list,libre2.symbols.darwin\nelse ifeq ($(shell uname),SunOS)\nSOEXT=so\nSOEXTVER=$(SOEXT).$(SONAME)\nSOEXTVER00=$(SOEXT).$(SONAME).0.0\nMAKE_SHARED_LIBRARY=$(CXX) -shared -Wl,-soname,libre2.$(SOEXTVER)\nelse\nSOEXT=so\nSOEXTVER=$(SOEXT).$(SONAME)\nSOEXTVER00=$(SOEXT).$(SONAME).0.0\nMAKE_SHARED_LIBRARY=$(CXX) -shared -Wl,-soname,libre2.$(SOEXTVER),--version-script,libre2.symbols\nendif\n\n.PHONY: all\nall: obj/libre2.a obj/so/libre2.$(SOEXT)\n\nINSTALL_HFILES=\\\n\tre2/filtered_re2.h\\\n\tre2/re2.h\\\n\tre2/set.h\\\n\tre2/stringpiece.h\\\n\nHFILES=\\\n\tutil/malloc_counter.h\\\n\tutil/pcre.h\\\n\tutil/strutil.h\\\n\tutil/utf.h\\\n\tre2/bitmap256.h\\\n\tre2/filtered_re2.h\\\n\tre2/pod_array.h\\\n\tre2/prefilter.h\\\n\tre2/prefilter_tree.h\\\n\tre2/prog.h\\\n\tre2/re2.h\\\n\tre2/regexp.h\\\n\tre2/set.h\\\n\tre2/sparse_array.h\\\n\tre2/sparse_set.h\\\n\tre2/stringpiece.h\\\n\tre2/testing/exhaustive_tester.h\\\n\tre2/testing/regexp_generator.h\\\n\tre2/testing/string_generator.h\\\n\tre2/testing/tester.h\\\n\tre2/unicode_casefold.h\\\n\tre2/unicode_groups.h\\\n\tre2/walker-inl.h\\\n\nOFILES=\\\n\tobj/util/rune.o\\\n\tobj/util/strutil.o\\\n\tobj/re2/bitmap256.o\\\n\tobj/re2/bitstate.o\\\n\tobj/re2/compile.o\\\n\tobj/re2/dfa.o\\\n\tobj/re2/filtered_re2.o\\\n\tobj/re2/mimics_pcre.o\\\n\tobj/re2/nfa.o\\\n\tobj/re2/onepass.o\\\n\tobj/re2/parse.o\\\n\tobj/re2/perl_groups.o\\\n\tobj/re2/prefilter.o\\\n\tobj/re2/prefilter_tree.o\\\n\tobj/re2/prog.o\\\n\tobj/re2/re2.o\\\n\tobj/re2/regexp.o\\\n\tobj/re2/set.o\\\n\tobj/re2/simplify.o\\\n\tobj/re2/tostring.o\\\n\tobj/re2/unicode_casefold.o\\\n\tobj/re2/unicode_groups.o\\\n\nTESTOFILES=\\\n\tobj/util/pcre.o\\\n\tobj/re2/testing/backtrack.o\\\n\tobj/re2/testing/dump.o\\\n\tobj/re2/testing/exhaustive_tester.o\\\n\tobj/re2/testing/null_walker.o\\\n\tobj/re2/testing/regexp_generator.o\\\n\tobj/re2/testing/string_generator.o\\\n\tobj/re2/testing/tester.o\\\n\nTESTS=\\\n\tobj/test/charclass_test\\\n\tobj/test/compile_test\\\n\tobj/test/filtered_re2_test\\\n\tobj/test/mimics_pcre_test\\\n\tobj/test/parse_test\\\n\tobj/test/possible_match_test\\\n\tobj/test/re2_test\\\n\tobj/test/re2_arg_test\\\n\tobj/test/regexp_test\\\n\tobj/test/required_prefix_test\\\n\tobj/test/search_test\\\n\tobj/test/set_test\\\n\tobj/test/simplify_test\\\n\tobj/test/string_generator_test\\\n\nBIGTESTS=\\\n\tobj/test/dfa_test\\\n\tobj/test/exhaustive1_test\\\n\tobj/test/exhaustive2_test\\\n\tobj/test/exhaustive3_test\\\n\tobj/test/exhaustive_test\\\n\tobj/test/random_test\\\n\nSOFILES=$(patsubst obj/%,obj/so/%,$(OFILES))\n# We use TESTOFILES for testing the shared lib, only it is built differently.\nSTESTS=$(patsubst obj/%,obj/so/%,$(TESTS))\nSBIGTESTS=$(patsubst obj/%,obj/so/%,$(BIGTESTS))\n\nDOFILES=$(patsubst obj/%,obj/dbg/%,$(OFILES))\nDTESTOFILES=$(patsubst obj/%,obj/dbg/%,$(TESTOFILES))\nDTESTS=$(patsubst obj/%,obj/dbg/%,$(TESTS))\nDBIGTESTS=$(patsubst obj/%,obj/dbg/%,$(BIGTESTS))\n\n.PRECIOUS: obj/%.o\nobj/%.o: %.cc $(HFILES)\n\t@mkdir -p $$(dirname $@)\n\t$(CXX) -c -o $@ $(CPPFLAGS) $(RE2_CXXFLAGS) $(CXXFLAGS) -DNDEBUG $*.cc\n\n.PRECIOUS: obj/dbg/%.o\nobj/dbg/%.o: %.cc $(HFILES)\n\t@mkdir -p $$(dirname $@)\n\t$(CXX) -c -o $@ $(CPPFLAGS) $(RE2_CXXFLAGS) $(CXXFLAGS) $*.cc\n\n.PRECIOUS: obj/so/%.o\nobj/so/%.o: %.cc $(HFILES)\n\t@mkdir -p $$(dirname $@)\n\t$(CXX) -c -o $@ -fPIC $(CPPFLAGS) $(RE2_CXXFLAGS) $(CXXFLAGS) -DNDEBUG $*.cc\n\n.PRECIOUS: obj/libre2.a\nobj/libre2.a: $(OFILES)\n\t@mkdir -p obj\n\t$(AR) $(ARFLAGS) obj/libre2.a $(OFILES)\n\n.PRECIOUS: obj/dbg/libre2.a\nobj/dbg/libre2.a: $(DOFILES)\n\t@mkdir -p obj/dbg\n\t$(AR) $(ARFLAGS) obj/dbg/libre2.a $(DOFILES)\n\n.PRECIOUS: obj/so/libre2.$(SOEXT)\nobj/so/libre2.$(SOEXT): $(SOFILES) libre2.symbols libre2.symbols.darwin\n\t@mkdir -p obj/so\n\t$(MAKE_SHARED_LIBRARY) -o obj/so/libre2.$(SOEXTVER) $(SOFILES) $(RE2_LDFLAGS) $(LDFLAGS)\n\tln -sf libre2.$(SOEXTVER) $@\n\n.PRECIOUS: obj/dbg/test/%\nobj/dbg/test/%: obj/dbg/libre2.a obj/dbg/re2/testing/%.o $(DTESTOFILES)\n\t@mkdir -p obj/dbg/test\n\t$(CXX) -o $@ obj/dbg/re2/testing/$*.o $(DTESTOFILES) obj/dbg/libre2.a $(RE2_LDFLAGS) $(LDFLAGS) -lgtest -lgtest_main\n\n.PRECIOUS: obj/test/%\nobj/test/%: obj/libre2.a obj/re2/testing/%.o $(TESTOFILES)\n\t@mkdir -p obj/test\n\t$(CXX) -o $@ obj/re2/testing/$*.o $(TESTOFILES) obj/libre2.a $(RE2_LDFLAGS) $(LDFLAGS) -lgtest -lgtest_main\n\n# Test the shared lib, falling back to the static lib for private symbols\n.PRECIOUS: obj/so/test/%\nobj/so/test/%: obj/so/libre2.$(SOEXT) obj/libre2.a obj/re2/testing/%.o $(TESTOFILES)\n\t@mkdir -p obj/so/test\n\t$(CXX) -o $@ obj/re2/testing/$*.o $(TESTOFILES) -Lobj/so -lre2 obj/libre2.a $(RE2_LDFLAGS) $(LDFLAGS) -lgtest -lgtest_main\n\nobj/test/regexp_benchmark: obj/libre2.a obj/re2/testing/regexp_benchmark.o $(TESTOFILES)\n\t@mkdir -p obj/test\n\t$(CXX) -o $@ obj/re2/testing/regexp_benchmark.o $(TESTOFILES) obj/libre2.a $(RE2_LDFLAGS) $(LDFLAGS) -lgtest -lbenchmark -lbenchmark_main\n\nobj/test/re2_fuzzer: obj/libre2.a obj/re2/fuzzing/re2_fuzzer.o\n\t@mkdir -p obj/test\n\t$(CXX) -o $@ obj/re2/fuzzing/re2_fuzzer.o obj/libre2.a $(RE2_LDFLAGS) $(LDFLAGS)\n\nifdef REBUILD_TABLES\n.PRECIOUS: re2/perl_groups.cc\nre2/perl_groups.cc: re2/make_perl_groups.pl\n\tperl $< > $@\n\n.PRECIOUS: re2/unicode_%.cc\nre2/unicode_%.cc: re2/make_unicode_%.py re2/unicode.py\n\tpython3 $< > $@\nendif\n\n.PHONY: distclean\ndistclean: clean\n\trm -f re2/perl_groups.cc re2/unicode_casefold.cc re2/unicode_groups.cc\n\n.PHONY: clean\nclean:\n\trm -rf obj\n\trm -f re2/*.pyc\n\n.PHONY: testofiles\ntestofiles: $(TESTOFILES)\n\n.PHONY: test\ntest: $(DTESTS) $(TESTS) $(STESTS) debug-test static-test shared-test\n\n.PHONY: debug-test\ndebug-test: $(DTESTS)\n\t@./runtests $(DTESTS)\n\n.PHONY: static-test\nstatic-test: $(TESTS)\n\t@./runtests $(TESTS)\n\n.PHONY: shared-test\nshared-test: $(STESTS)\n\t@./runtests -shared-library-path obj/so $(STESTS)\n\n.PHONY: debug-bigtest\ndebug-bigtest: $(DTESTS) $(DBIGTESTS)\n\t@./runtests $(DTESTS) $(DBIGTESTS)\n\n.PHONY: static-bigtest\nstatic-bigtest: $(TESTS) $(BIGTESTS)\n\t@./runtests $(TESTS) $(BIGTESTS)\n\n.PHONY: shared-bigtest\nshared-bigtest: $(STESTS) $(SBIGTESTS)\n\t@./runtests -shared-library-path obj/so $(STESTS) $(SBIGTESTS)\n\n.PHONY: benchmark\nbenchmark: obj/test/regexp_benchmark\n\n.PHONY: fuzz\nfuzz: obj/test/re2_fuzzer\n\n.PHONY: install\ninstall: static-install shared-install\n\n.PHONY: static\nstatic: obj/libre2.a\n\n.PHONY: static-install\nstatic-install: obj/libre2.a common-install\n\t$(INSTALL) obj/libre2.a $(DESTDIR)$(libdir)/libre2.a\n\n.PHONY: shared\nshared: obj/so/libre2.$(SOEXT)\n\n.PHONY: shared-install\nshared-install: obj/so/libre2.$(SOEXT) common-install\n\t$(INSTALL) obj/so/libre2.$(SOEXT) $(DESTDIR)$(libdir)/libre2.$(SOEXTVER00)\n\tln -sf libre2.$(SOEXTVER00) $(DESTDIR)$(libdir)/libre2.$(SOEXTVER)\n\tln -sf libre2.$(SOEXTVER00) $(DESTDIR)$(libdir)/libre2.$(SOEXT)\n\n.PHONY: common-install\ncommon-install:\n\tmkdir -p $(DESTDIR)$(includedir)/re2 $(DESTDIR)$(libdir)/pkgconfig\n\t$(INSTALL_DATA) $(INSTALL_HFILES) $(DESTDIR)$(includedir)/re2\n\t$(INSTALL_DATA) re2.pc.in $(DESTDIR)$(libdir)/pkgconfig/re2.pc\n\t$(SED_INPLACE) -e \"s#@CMAKE_INSTALL_FULL_INCLUDEDIR@#$(includedir)#\" $(DESTDIR)$(libdir)/pkgconfig/re2.pc\n\t$(SED_INPLACE) -e \"s#@CMAKE_INSTALL_FULL_LIBDIR@#$(libdir)#\" $(DESTDIR)$(libdir)/pkgconfig/re2.pc\n\t$(SED_INPLACE) -e \"s#@REQUIRES@#$(REQUIRES)#\" $(DESTDIR)$(libdir)/pkgconfig/re2.pc\n\t$(SED_INPLACE) -e \"s#@SONAME@#$(SONAME)#\" $(DESTDIR)$(libdir)/pkgconfig/re2.pc\n\n.PHONY: testinstall\ntestinstall: static-testinstall shared-testinstall\n\t@echo\n\t@echo Install tests passed.\n\t@echo\n\n.PHONY: static-testinstall\nstatic-testinstall:\nifeq ($(shell uname),Darwin)\n\t@echo Skipping test for libre2.a on Darwin.\nelse ifeq ($(shell uname),SunOS)\n\t@echo Skipping test for libre2.a on SunOS.\nelse\n\t@mkdir -p obj\n\t@cp testinstall.cc obj/static-testinstall.cc\n\t(cd obj && export PKG_CONFIG_PATH=$(DESTDIR)$(libdir)/pkgconfig; \\\n\t  $(CXX) static-testinstall.cc -o static-testinstall $(CXXFLAGS) $(LDFLAGS) \\\n\t  $$($(PKG_CONFIG) re2 --cflags) \\\n\t  $$($(PKG_CONFIG) re2 --libs | sed -e 's/-Wl / /g' | sed -e 's/-lre2/-l:libre2.a/'))\n\tobj/static-testinstall\nendif\n\n.PHONY: shared-testinstall\nshared-testinstall:\n\t@mkdir -p obj\n\t@cp testinstall.cc obj/shared-testinstall.cc\n\t(cd obj && export PKG_CONFIG_PATH=$(DESTDIR)$(libdir)/pkgconfig; \\\n\t  $(CXX) shared-testinstall.cc -o shared-testinstall $(CXXFLAGS) $(LDFLAGS) \\\n\t  $$($(PKG_CONFIG) re2 --cflags) \\\n\t  $$($(PKG_CONFIG) re2 --libs | sed -e 's/-Wl / /g'))\nifeq ($(shell uname),Darwin)\n\tDYLD_LIBRARY_PATH=\"$(DESTDIR)$(libdir):$(DYLD_LIBRARY_PATH)\" obj/shared-testinstall\nelse\n\tLD_LIBRARY_PATH=\"$(DESTDIR)$(libdir):$(LD_LIBRARY_PATH)\" obj/shared-testinstall\nendif\n\n.PHONY: benchlog\nbenchlog: obj/test/regexp_benchmark\n\t(echo '==BENCHMARK==' `hostname` `date`; \\\n\t  (uname -a; $(CXX) --version; git rev-parse --short HEAD; file obj/test/regexp_benchmark) | sed 's/^/# /'; \\\n\t  echo; \\\n\t  ./obj/test/regexp_benchmark 'PCRE|RE2') | tee -a benchlog.$$(hostname | sed 's/\\..*//')\n\n.PHONY: log\nlog:\n\t$(MAKE) clean\n\t$(MAKE) CXXFLAGS=\"$(CXXFLAGS) -DLOGGING=1\" \\\n\t\t$(filter obj/test/exhaustive%_test,$(BIGTESTS))\n\techo '#' RE2 exhaustive tests built by make log >re2-exhaustive.txt\n\techo '#' $$(date) >>re2-exhaustive.txt\n\tobj/test/exhaustive_test |grep -v '^PASS$$' >>re2-exhaustive.txt\n\tobj/test/exhaustive1_test |grep -v '^PASS$$' >>re2-exhaustive.txt\n\tobj/test/exhaustive2_test |grep -v '^PASS$$' >>re2-exhaustive.txt\n\tobj/test/exhaustive3_test |grep -v '^PASS$$' >>re2-exhaustive.txt\n\n\t$(MAKE) CXXFLAGS=\"$(CXXFLAGS) -DLOGGING=1\" obj/test/search_test\n\techo '#' RE2 basic search tests built by make $@ >re2-search.txt\n\techo '#' $$(date) >>re2-search.txt\n\tobj/test/search_test |grep -v '^PASS$$' >>re2-search.txt\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 1.80859375,
          "content": "This is the source code repository for RE2, a regular expression library.\n\nFor documentation about how to install and use RE2,\nvisit https://github.com/google/re2/.\n\nThe short version is:\n\nmake\nmake test\nmake install\nmake testinstall\n\nBuilding RE2 requires Abseil (https://github.com/abseil/abseil-cpp)\nto be installed on your system. Building the testing for RE2 requires\nGoogleTest (https://github.com/google/googletest) and Benchmark\n(https://github.com/google/benchmark) to be installed as well.\n\nThere is a fair amount of documentation (including code snippets) in\nthe re2.h header file.\n\nMore information can be found on the wiki:\nhttps://github.com/google/re2/wiki\n\nIssue tracker:\nhttps://github.com/google/re2/issues\n\nMailing list:\nhttps://groups.google.com/group/re2-dev\n\nUnless otherwise noted, the RE2 source files are distributed\nunder the BSD-style license found in the LICENSE file.\n\nRE2's native language is C++.\n\nThe Python wrapper is at https://github.com/google/re2/tree/main/python\nand on PyPI (https://pypi.org/project/google-re2/).\n\nA C wrapper is at https://github.com/marcomaggi/cre2/.\nA D wrapper is at https://github.com/ShigekiKarita/re2d/ and on DUB (code.dlang.org).\nAn Erlang wrapper is at https://github.com/dukesoferl/re2/ and on Hex (hex.pm).\nAn Inferno wrapper is at https://github.com/powerman/inferno-re2/.\nA Node.js wrapper is at https://github.com/uhop/node-re2/ and on NPM (npmjs.com).\nAn OCaml wrapper is at https://github.com/janestreet/re2/ and on OPAM (opam.ocaml.org).\nA Perl wrapper is at https://github.com/dgl/re-engine-RE2/ and on CPAN (cpan.org).\nAn R wrapper is at https://github.com/girishji/re2/ and on CRAN (cran.r-project.org).\nA Ruby wrapper is at https://github.com/mudge/re2/ and on RubyGems (rubygems.org).\nA WebAssembly wrapper is at https://github.com/google/re2-wasm/ and on NPM (npmjs.com).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.2861328125,
          "content": "To report a security issue, please use https://g.co/vulnz. We use\nhttps://g.co/vulnz for our intake, and do coordination and disclosure here on\nGitHub (including using GitHub Security Advisory). The Google Security Team will\nrespond within 5 working days of your report on https://g.co/vulnz.\n"
        },
        {
          "name": "WORKSPACE.bazel",
          "type": "blob",
          "size": 0.25390625,
          "content": "# Copyright 2009 The RE2 Authors.  All Rights Reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n# Bazel (http://bazel.build/) WORKSPACE file for RE2.\n\nworkspace(name = \"com_googlesource_code_re2\")\n"
        },
        {
          "name": "WORKSPACE.bzlmod",
          "type": "blob",
          "size": 0.25390625,
          "content": "# Copyright 2009 The RE2 Authors.  All Rights Reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n# Bazel (http://bazel.build/) WORKSPACE file for RE2.\n\nworkspace(name = \"com_googlesource_code_re2\")\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchlog",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libre2.symbols",
          "type": "blob",
          "size": 0.251953125,
          "content": "{\n\tglobal:\n\t\t# re2::RE2*\n\t\t_ZN3re23RE2*;\n\t\t_ZNK3re23RE2*;\n\t\t# re2::operator<<*\n\t\t_ZN3re2ls*;\n\t\t# re2::FilteredRE2*\n\t\t_ZN3re211FilteredRE2*;\n\t\t_ZNK3re211FilteredRE2*;\n\t\t# re2::re2_internal*\n\t\t_ZN3re212re2_internal*;\n\t\t_ZNK3re212re2_internal*;\n\tlocal:\n\t\t*;\n};\n"
        },
        {
          "name": "libre2.symbols.darwin",
          "type": "blob",
          "size": 0.2421875,
          "content": "# Linker doesn't like these unmangled:\n# re2::RE2*\n__ZN3re23RE2*\n__ZNK3re23RE2*\n# re2::operator<<*\n__ZN3re2ls*\n# re2::FilteredRE2*\n__ZN3re211FilteredRE2*\n__ZNK3re211FilteredRE2*\n# re2::re2_internal*\n__ZN3re212re2_internal*\n__ZNK3re212re2_internal*\n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "re2.pc.in",
          "type": "blob",
          "size": 0.2685546875,
          "content": "includedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@\nlibdir=@CMAKE_INSTALL_FULL_LIBDIR@\n\nName: re2\nDescription: RE2 is a fast, safe, thread-friendly regular expression engine.\nRequires: @REQUIRES@\nVersion: @SONAME@.0.0\nCflags: -pthread -I${includedir}\nLibs: -pthread -L${libdir} -lre2\n"
        },
        {
          "name": "re2",
          "type": "tree",
          "content": null
        },
        {
          "name": "re2Config.cmake.in",
          "type": "blob",
          "size": 0.5185546875,
          "content": "# Copyright 2022 The RE2 Authors.  All Rights Reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n@PACKAGE_INIT@\n\ninclude(CMakeFindDependencyMacro)\n\nif(UNIX)\n  set(THREADS_PREFER_PTHREAD_FLAG ON)\n  find_dependency(Threads REQUIRED)\nendif()\n\nfind_dependency(absl REQUIRED)\n\nif(@RE2_USE_ICU@)\n  find_dependency(ICU REQUIRED COMPONENTS uc)\nendif()\n\ncheck_required_components(re2)\n\nif(TARGET re2::re2)\n  return()\nendif()\n\ninclude(${CMAKE_CURRENT_LIST_DIR}/re2Targets.cmake)\n"
        },
        {
          "name": "runtests",
          "type": "blob",
          "size": 0.630859375,
          "content": "#!/usr/bin/env sh\n\n# System Integrity Protection on Darwin complicated these matters somewhat.\n# See https://github.com/google/re2/issues/175 for details.\nif [ \"x$1\" = \"x-shared-library-path\" ]; then\n\tif [ \"x$(uname)\" = \"xDarwin\" ]; then\n\t\tDYLD_LIBRARY_PATH=\"$2:$DYLD_LIBRARY_PATH\"\n\t\texport DYLD_LIBRARY_PATH\n\telse\n\t\tLD_LIBRARY_PATH=\"$2:$LD_LIBRARY_PATH\"\n\t\texport LD_LIBRARY_PATH\n\tfi\n\tshift 2\nfi\n\nsuccess=true\nfor i; do\n\tprintf \"%-40s\" $i\n\tif $($i >$i.log 2>&1) 2>/dev/null; then\n\t\techo PASS\n\telse\n\t\techo FAIL';' output in $i.log\n\t\tsuccess=false\n\tfi\ndone\n\nif $success; then\n\techo 'ALL TESTS PASSED.'\n\texit 0\nelse\n\techo 'TESTS FAILED.'\n\texit 1\nfi\n"
        },
        {
          "name": "testinstall.cc",
          "type": "blob",
          "size": 0.6064453125,
          "content": "// Copyright 2008 The RE2 Authors.  All Rights Reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n#include <stdio.h>\n#include <re2/filtered_re2.h>\n#include <re2/re2.h>\n\nint main() {\n  re2::FilteredRE2 f;\n  int id;\n  f.Add(\"a.*b.*c\", RE2::DefaultOptions, &id);\n  std::vector<std::string> v;\n  f.Compile(&v);\n  std::vector<int> ids;\n  f.FirstMatch(\"abbccc\", ids);\n\n  int n;\n  if (RE2::FullMatch(\"axbyc\", \"a.*b.*c\") &&\n      RE2::PartialMatch(\"foo123bar\", \"(\\\\d+)\", &n) && n == 123) {\n    printf(\"PASS\\n\");\n    return 0;\n  }\n\n  printf(\"FAIL\\n\");\n  return 2;\n}\n"
        },
        {
          "name": "ucs2.diff",
          "type": "blob",
          "size": 18.7509765625,
          "content": "This is a dump from Google's source control system of the change\nthat removed UCS-2 support from RE2.  As the explanation below\nsays, UCS-2 mode is fundamentally at odds with things like ^ and $,\nso it never really worked very well.  But if you are interested in using\nit without those operators, it did work for that.  It assumed that the\nUCS-2 data was in the native host byte order.\n\nIf you are interested in adding UCS-2 mode back, this patch might\nbe a good starting point.\n\n\nChange 12780686 by rsc@rsc-re2 on 2009/09/16 15:30:15\n\n\tRetire UCS-2 mode.\n\t\n\tI added it as an experiment for V8, but it\n\trequires 2-byte lookahead to do completely,\n\tand RE2 has 1-byte lookahead (enough for UTF-8)\n\tas a fairly deep fundamental assumption,\n\tso it did not support ^ or $.\n\n==== re2/bitstate.cc#2 - re2/bitstate.cc#3 ====\nre2/bitstate.cc#2:314,321 - re2/bitstate.cc#3:314,319\n      cap_[0] = p;\n      if (TrySearch(prog_->start(), p))  // Match must be leftmost; done.\n        return true;\n-     if (prog_->flags() & Regexp::UCS2)\n-       p++;\n    }\n    return false;\n  }\n==== re2/compile.cc#17 - re2/compile.cc#18 ====\nre2/compile.cc#17:95,101 - re2/compile.cc#18:95,100\n  // Input encodings.\n  enum Encoding {\n    kEncodingUTF8 = 1,  // UTF-8 (0-10FFFF)\n-   kEncodingUCS2,     // UCS-2 (0-FFFF), native byte order\n    kEncodingLatin1,    // Latin1 (0-FF)\n  };\n  \nre2/compile.cc#17:168,176 - re2/compile.cc#18:167,172\n    void AddRuneRangeLatin1(Rune lo, Rune hi, bool foldcase);\n    void AddRuneRangeUTF8(Rune lo, Rune hi, bool foldcase);\n    void Add_80_10ffff();\n-   void AddRuneRangeUCS2(Rune lo, Rune hi, bool foldcase);\n-   void AddUCS2Pair(uint8 lo1, uint8 hi1, bool fold1,\n-                    uint8 lo2, uint8 hi2, bool fold2);\n  \n    // New suffix that matches the byte range lo-hi, then goes to next.\n    Inst* RuneByteSuffix(uint8 lo, uint8 hi, bool foldcase, Inst* next);\nre2/compile.cc#17:475,481 - re2/compile.cc#18:471,477\n  \n  // Converts rune range lo-hi into a fragment that recognizes\n  // the bytes that would make up those runes in the current\n- // encoding (Latin 1, UTF-8, or UCS-2).\n+ // encoding (Latin 1 or UTF-8).\n  // This lets the machine work byte-by-byte even when\n  // using multibyte encodings.\n  \nre2/compile.cc#17:488,496 - re2/compile.cc#18:484,489\n      case kEncodingLatin1:\n        AddRuneRangeLatin1(lo, hi, foldcase);\n        break;\n-     case kEncodingUCS2:\n-       AddRuneRangeUCS2(lo, hi, foldcase);\n-       break;\n    }\n  }\n  \nre2/compile.cc#17:503,581 - re2/compile.cc#18:496,501\n    AddSuffix(RuneByteSuffix(lo, hi, foldcase, NULL));\n  }\n  \n- // Test whether 16-bit values are big or little endian.\n- static bool BigEndian() {\n-   union {\n-     char byte[2];\n-     int16 endian;\n-   } u;\n- \n-   u.byte[0] = 1;\n-   u.byte[1] = 2;\n-   return u.endian == 0x0102;\n- }\n- \n- void Compiler::AddUCS2Pair(uint8 lo1, uint8 hi1, bool fold1,\n-                            uint8 lo2, uint8 hi2, bool fold2) {\n-   Inst* ip;\n-   if (reversed_) {\n-     ip = RuneByteSuffix(lo1, hi1, fold1, NULL);\n-     ip = RuneByteSuffix(lo2, hi2, fold2, ip);\n-   } else {\n-     ip = RuneByteSuffix(lo2, hi2, fold2, NULL);\n-     ip = RuneByteSuffix(lo1, hi1, fold1, ip);\n-   }\n-   AddSuffix(ip);\n- }\n- \n- void Compiler::AddRuneRangeUCS2(Rune lo, Rune hi, bool foldcase) {\n-   if (lo > hi || lo > 0xFFFF)\n-     return;\n-   if (hi > 0xFFFF)\n-     hi = 0xFFFF;\n- \n-   // We'll assemble a pattern assuming big endian.\n-   // If the machine isn't, tell Cat to reverse its arguments.\n-   bool oldreversed = reversed_;\n-   if (!BigEndian()) {\n-     reversed_ = !oldreversed;\n-   }\n- \n-   // Split into bytes.\n-   int lo1 = lo >> 8;\n-   int lo2 = lo & 0xFF;\n-   int hi1 = hi >> 8;\n-   int hi2 = hi & 0xFF;\n- \n-   if (lo1 == hi1) {\n-     // Easy case: high bits are same in both.\n-     // Only do ASCII case folding on the second byte if the top byte is 00.\n-     AddUCS2Pair(lo1, lo1, false, lo2, hi2, lo1==0 && foldcase);\n-   } else {\n-     // Harder case: different second byte ranges depending on first byte.\n- \n-     // Initial fragment.\n-     if (lo2 > 0) {\n-       AddUCS2Pair(lo1, lo1, false, lo2, 0xFF, lo1==0 && foldcase);\n-       lo1++;\n-     }\n- \n-     // Trailing fragment.\n-     if (hi2 < 0xFF) {\n-       AddUCS2Pair(hi1, hi1, false, 0, hi2, false);\n-       hi1--;\n-     }\n- \n-     // Inner ranges.\n-     if (lo1 <= hi1) {\n-       AddUCS2Pair(lo1, hi1, false, 0, 0xFF, false);\n-     }\n-   }\n- \n-   // Restore reverse setting.\n-   reversed_ = oldreversed;\n- }\n- \n  // Table describing how to make a UTF-8 matching machine\n  // for the rune range 80-10FFFF (Runeself-Runemax).\n  // This range happens frequently enough (for example /./ and /[^a-z]/)\nre2/compile.cc#17:707,716 - re2/compile.cc#18:627,634\n  \n  Frag Compiler::Literal(Rune r, bool foldcase) {\n    switch (encoding_) {\n-     default:  // UCS-2 or something new\n-       BeginRange();\n-       AddRuneRange(r, r, foldcase);\n-       return EndRange();\n+     default:\n+       return kNullFrag;\n  \n      case kEncodingLatin1:\n        return ByteRange(r, r, foldcase);\nre2/compile.cc#17:927,934 - re2/compile.cc#18:845,850\n  \n    if (re->parse_flags() & Regexp::Latin1)\n      c.encoding_ = kEncodingLatin1;\n-   else if (re->parse_flags() & Regexp::UCS2)\n-     c.encoding_ = kEncodingUCS2;\n    c.reversed_ = reversed;\n    if (max_mem <= 0) {\n      c.max_inst_ = 100000;  // more than enough\nre2/compile.cc#17:983,993 - re2/compile.cc#18:899,905\n      c.prog_->set_start_unanchored(c.prog_->start());\n    } else {\n      Frag dot;\n-     if (c.encoding_ == kEncodingUCS2) {\n-       dot = c.Cat(c.ByteRange(0x00, 0xFF, false), c.ByteRange(0x00, 0xFF, false));\n-     } else {\n-       dot = c.ByteRange(0x00, 0xFF, false);\n-     }\n+     dot = c.ByteRange(0x00, 0xFF, false);\n      Frag dotloop = c.Star(dot, true);\n      Frag unanchored = c.Cat(dotloop, all);\n      c.prog_->set_start_unanchored(unanchored.begin);\n==== re2/nfa.cc#8 - re2/nfa.cc#9 ====\nre2/nfa.cc#8:426,432 - re2/nfa.cc#9:426,431\n    const char* bp = context.begin();\n    int c = -1;\n    int wasword = 0;\n-   bool ucs2 = prog_->flags() & Regexp::UCS2;\n  \n    if (text.begin() > context.begin()) {\n      c = text.begin()[-1] & 0xFF;\nre2/nfa.cc#8:492,498 - re2/nfa.cc#9:491,497\n        // If there's a required first byte for an unanchored search\n        // and we're not in the middle of any possible matches,\n        // use memchr to search for the byte quickly.\n-       if (!ucs2 && !anchored && first_byte_ >= 0 && runq->size() == 0 &&\n+       if (!anchored && first_byte_ >= 0 && runq->size() == 0 &&\n            p < text.end() && (p[0] & 0xFF) != first_byte_) {\n          p = reinterpret_cast<const char*>(memchr(p, first_byte_,\n                                                   text.end() - p));\nre2/nfa.cc#8:505,526 - re2/nfa.cc#9:504,514\n          flag = Prog::EmptyFlags(context, p);\n        }\n  \n-       // In UCS-2 mode, if we need to start a new thread,\n-       // make sure to do it on an even boundary.\n-       if(ucs2 && runq->size() == 0 &&\n-           (p - context.begin()) % 2 && p < text.end()) {\n-         p++;\n-         flag = Prog::EmptyFlags(context, p);\n-       }\n- \n        // Steal match storage (cleared but unused as of yet)\n        // temporarily to hold match boundaries for new thread.\n-       // In UCS-2 mode, only start the thread on a 2-byte boundary.\n-       if(!ucs2 || (p - context.begin()) % 2 == 0) {\n-         match_[0] = p;\n-         AddToThreadq(runq, start_, flag, p, match_);\n-         match_[0] = NULL;\n-       }\n+       match_[0] = p;\n+       AddToThreadq(runq, start_, flag, p, match_);\n+       match_[0] = NULL;\n      }\n  \n      // If all the threads have died, stop early.\n==== re2/parse.cc#22 - re2/parse.cc#23 ====\nre2/parse.cc#22:160,167 - re2/parse.cc#23:160,165\n      status_(status), stacktop_(NULL), ncap_(0) {\n    if (flags_ & Latin1)\n      rune_max_ = 0xFF;\n-   else if (flags & UCS2)\n-     rune_max_ = 0xFFFF;\n    else\n      rune_max_ = Runemax;\n  }\nre2/parse.cc#22:365,387 - re2/parse.cc#23:363,374\n  bool Regexp::ParseState::PushCarat() {\n    if (flags_ & OneLine) {\n      return PushSimpleOp(kRegexpBeginText);\n-   } else {\n-     if (flags_ & UCS2) {\n-       status_->set_code(kRegexpUnsupported);\n-       status_->set_error_arg(\"multiline ^ in UCS-2 mode\");\n-       return false;\n-     }\n-     return PushSimpleOp(kRegexpBeginLine);\n    }\n+   return PushSimpleOp(kRegexpBeginLine);\n  }\n  \n  // Pushes a \\b or \\B onto the stack.\n  bool Regexp::ParseState::PushWordBoundary(bool word) {\n-   if (flags_ & UCS2) {\n-     status_->set_code(kRegexpUnsupported);\n-     status_->set_error_arg(\"\\\\b or \\\\B in UCS-2 mode\");\n-     return false;\n-   }\n    if (word)\n      return PushSimpleOp(kRegexpWordBoundary);\n    return PushSimpleOp(kRegexpNoWordBoundary);\nre2/parse.cc#22:397,407 - re2/parse.cc#23:384,389\n      bool ret = PushSimpleOp(kRegexpEndText);\n      flags_ = oflags;\n      return ret;\n-   }\n-   if (flags_ & UCS2) {\n-     status_->set_code(kRegexpUnsupported);\n-     status_->set_error_arg(\"multiline $ in UCS-2 mode\");\n-     return false;\n    }\n    return PushSimpleOp(kRegexpEndLine);\n  }\n==== re2/re2.cc#34 - re2/re2.cc#35 ====\nre2/re2.cc#34:79,86 - re2/re2.cc#35:79,84\n        return RE2::ErrorBadUTF8;\n      case re2::kRegexpBadNamedCapture:\n        return RE2::ErrorBadNamedCapture;\n-     case re2::kRegexpUnsupported:\n-       return RE2::ErrorUnsupported;\n    }\n    return RE2::ErrorInternal;\n  }\nre2/re2.cc#34:122,130 - re2/re2.cc#35:120,125\n        break;\n      case RE2::Options::EncodingLatin1:\n        flags |= Regexp::Latin1;\n-       break;\n-     case RE2::Options::EncodingUCS2:\n-       flags |= Regexp::UCS2;\n        break;\n    }\n  \n==== re2/re2.h#36 - re2/re2.h#37 ====\nre2/re2.h#36:246,252 - re2/re2.h#37:246,251\n      ErrorBadUTF8,            // invalid UTF-8 in regexp\n      ErrorBadNamedCapture,    // bad named capture group\n      ErrorPatternTooLarge,    // pattern too large (compile failed)\n-     ErrorUnsupported,        // unsupported feature (in UCS-2 mode)\n    };\n  \n    // Predefined common options.\nre2/re2.h#36:570,576 - re2/re2.h#37:569,574\n  \n      enum Encoding {\n        EncodingUTF8 = 1,\n-       EncodingUCS2,      // 16-bit Unicode 0-FFFF only\n        EncodingLatin1\n      };\n  \n==== re2/regexp.cc#15 - re2/regexp.cc#16 ====\nre2/regexp.cc#15:324,333 - re2/regexp.cc#16:324,329\n  // the regexp that remains after the prefix.  The prefix might\n  // be ASCII case-insensitive.\n  bool Regexp::RequiredPrefix(string *prefix, bool *foldcase, Regexp** suffix) {\n-   // Don't even bother for UCS-2; it's time to throw that code away.\n-   if (parse_flags_ & UCS2)\n-     return false;\n- \n    // No need for a walker: the regexp must be of the form\n    // 1. some number of ^ anchors\n    // 2. a literal char or string\n==== re2/regexp.h#20 - re2/regexp.h#21 ====\nre2/regexp.h#20:187,193 - re2/regexp.h#21:187,192\n    kRegexpBadPerlOp,          // bad perl operator\n    kRegexpBadUTF8,            // invalid UTF-8 in regexp\n    kRegexpBadNamedCapture,    // bad named capture\n-   kRegexpUnsupported,        // unsupported operator\n  };\n  \n  // Error status for certain operations.\nre2/regexp.h#20:307,316 - re2/regexp.h#21:306,314\n                             //   \\Q and \\E to disable/enable metacharacters\n                             //   (?P<name>expr) for named captures\n                             //   \\C to match any single byte\n-     UCS2         = 1<<10,  // Text is in UCS-2, regexp is in UTF-8.\n-     UnicodeGroups = 1<<11, // Allow \\p{Han} for Unicode Han group\n+     UnicodeGroups = 1<<10, // Allow \\p{Han} for Unicode Han group\n                             //   and \\P{Han} for its negation.\n-     NeverNL      = 1<<12,  // Never match NL, even if the regexp mentions\n+     NeverNL      = 1<<11,  // Never match NL, even if the regexp mentions\n                             //   it explicitly.\n  \n      // As close to Perl as we can get.\n==== re2/testing/backtrack.cc#4 - re2/testing/backtrack.cc#5 ====\nre2/testing/backtrack.cc#4:134,141 - re2/testing/backtrack.cc#5:134,139\n      cap_[0] = p;\n      if (Visit(prog_->start(), p))  // Match must be leftmost; done.\n        return true;\n-     if (prog_->flags() & Regexp::UCS2)\n-       p++;\n    }\n    return false;\n  }\n==== re2/testing/tester.cc#12 - re2/testing/tester.cc#13 ====\nre2/testing/tester.cc#12:144,154 - re2/testing/tester.cc#13:144,152\n  static ParseMode parse_modes[] = {\n    { single_line,                   \"single-line\"          },\n    { single_line|Regexp::Latin1,    \"single-line, latin1\"  },\n-   { single_line|Regexp::UCS2,     \"single-line, ucs2\"   },\n    { multi_line,                    \"multiline\"            },\n    { multi_line|Regexp::NonGreedy,  \"multiline, nongreedy\" },\n    { multi_line|Regexp::Latin1,     \"multiline, latin1\"    },\n-   { multi_line|Regexp::UCS2,      \"multiline, ucs2\"     },\n  };\n  \n  static string FormatMode(Regexp::ParseFlags flags) {\nre2/testing/tester.cc#12:179,189 - re2/testing/tester.cc#13:177,185\n    RegexpStatus status;\n    regexp_ = Regexp::Parse(regexp_str, flags, &status);\n    if (regexp_ == NULL) {\n-     if (status.code() != kRegexpUnsupported) {\n-       LOG(INFO) << \"Cannot parse: \" << CEscape(regexp_str_)\n-                 << \" mode: \" << FormatMode(flags);\n-       error_ = true;\n-     }\n+     LOG(INFO) << \"Cannot parse: \" << CEscape(regexp_str_)\n+               << \" mode: \" << FormatMode(flags);\n+     error_ = true;\n      return;\n    }\n    prog_ = regexp_->CompileToProg(0);\nre2/testing/tester.cc#12:230,237 - re2/testing/tester.cc#13:226,231\n      RE2::Options options;\n      if (flags & Regexp::Latin1)\n        options.set_encoding(RE2::Options::EncodingLatin1);\n-     else if (flags & Regexp::UCS2)\n-       options.set_encoding(RE2::Options::EncodingUCS2);\n      if (kind_ == Prog::kLongestMatch)\n        options.set_longest_match(true);\n      re2_ = new RE2(re, options);\nre2/testing/tester.cc#12:281,379 - re2/testing/tester.cc#13:275,280\n      delete re2_;\n  }\n  \n- // Converts UTF-8 string in text into UCS-2 string in new_text.\n- static bool ConvertUTF8ToUCS2(const StringPiece& text, StringPiece* new_text) {\n-   const char* p = text.begin();\n-   const char* ep = text.end();\n-   uint16* q = new uint16[ep - p];\n-   uint16* q0 = q;\n- \n-   int n;\n-   Rune r;\n-   for (; p < ep; p += n) {\n-     if (!fullrune(p, ep - p)) {\n-       delete[] q0;\n-       return false;\n-     }\n-     n = chartorune(&r, p);\n-     if (r > 0xFFFF) {\n-       delete[] q0;\n-       return false;\n-     }\n-     *q++ = r;\n-   }\n-   *new_text = StringPiece(reinterpret_cast<char*>(q0), 2*(q - q0));\n-   return true;\n- }\n- \n- // Rewrites *sp from being a pointer into text8 (UTF-8)\n- // to being a pointer into text16 (equivalent text but in UCS-2).\n- static void AdjustUTF8ToUCS2(const StringPiece& text8, const StringPiece& text16,\n-                               StringPiece *sp) {\n-   if (sp->begin() == NULL && text8.begin() != NULL)\n-     return;\n- \n-   int nrune = 0;\n-   int n;\n-   Rune r;\n-   const char* p = text8.begin();\n-   const char* ep = text8.end();\n-   const char* spbegin = NULL;\n-   const char* spend = NULL;\n-   for (;;) {\n-     if (p == sp->begin())\n-       spbegin = text16.begin() + sizeof(uint16)*nrune;\n-     if (p == sp->end())\n-       spend = text16.begin() + sizeof(uint16)*nrune;\n-     if (p >= ep)\n-       break;\n-     n = chartorune(&r, p);\n-     p += n;\n-     nrune++;\n-   }\n-   if (spbegin == NULL || spend == NULL) {\n-     LOG(FATAL) << \"Error in AdjustUTF8ToUCS2 \"\n-                << CEscape(text8) << \" \"\n-                << (int)(sp->begin() - text8.begin()) << \" \"\n-                << (int)(sp->end() - text8.begin());\n-   }\n-   *sp = StringPiece(spbegin, spend - spbegin);\n- }\n- \n- // Rewrites *sp from begin a pointer into text16 (UCS-2)\n- // to being a pointer into text8 (equivalent text but in UTF-8).\n- static void AdjustUCS2ToUTF8(const StringPiece& text16, const StringPiece& text8,\n-                               StringPiece* sp) {\n-   if (sp->begin() == NULL)\n-     return;\n- \n-   int nrune = 0;\n-   int n;\n-   Rune r;\n-   const char* p = text8.begin();\n-   const char* ep = text8.end();\n-   const char* spbegin = NULL;\n-   const char* spend = NULL;\n-   for (;;) {\n-     if (nrune == (sp->begin() - text16.begin())/2)\n-       spbegin = p;\n-     if (nrune == (sp->end() - text16.begin())/2)\n-       spend = p;\n-     if (p >= ep)\n-       break;\n-     n = chartorune(&r, p);\n-     p += n;\n-     nrune++;\n-   }\n-   if (text8.begin() != NULL && (spbegin == NULL || spend == NULL)) {\n-     LOG(FATAL) << \"Error in AdjustUCS2ToUTF8 \"\n-                << CEscape(text16) << \" \"\n-                << (int)(sp->begin() - text16.begin()) << \" \"\n-                << (int)(sp->end() - text16.begin());\n-   }\n-   *sp = StringPiece(spbegin, spend - spbegin);\n- }\n- \n  // Runs a single search using the named engine type.\n  // This interface hides all the irregularities of the various\n  // engine interfaces from the rest of this file.\nre2/testing/tester.cc#12:393,411 - re2/testing/tester.cc#13:294,300\n  \n    StringPiece text = orig_text;\n    StringPiece context = orig_context;\n-   bool ucs2 = false;\n  \n-   if ((flags() & Regexp::UCS2) && type != kEnginePCRE) {\n-     if (!ConvertUTF8ToUCS2(orig_context, &context)) {\n-       result->skipped = true;\n-       return;\n-     }\n- \n-     // Rewrite context to refer to new text.\n-     AdjustUTF8ToUCS2(orig_context, context, &text);\n-     ucs2 = true;\n-   }\n- \n    switch (type) {\n      default:\n        LOG(FATAL) << \"Bad RunSearch type: \" << (int)type;\nre2/testing/tester.cc#12:557,577 - re2/testing/tester.cc#13:446,451\n      }\n    }\n  \n-   // If we did UCS-2 matching, rewrite the matches to refer\n-   // to the original UTF-8 text.\n-   if (ucs2) {\n-     if (result->matched) {\n-       if (result->have_submatch0) {\n-         AdjustUCS2ToUTF8(context, orig_context, &result->submatch[0]);\n-       } else if (result->have_submatch) {\n-         for (int i = 0; i < nsubmatch; i++) {\n-           AdjustUCS2ToUTF8(context, orig_context, &result->submatch[i]);\n-         }\n-       }\n-     }\n-     delete[] context.begin();\n-   }\n- \n    if (!result->matched)\n      memset(result->submatch, 0, sizeof result->submatch);\n  }\nre2/testing/tester.cc#12:596,617 - re2/testing/tester.cc#13:470,475\n    return true;\n  }\n  \n- // Check whether text uses only Unicode points <= 0xFFFF\n- // (in the BMP).\n- static bool IsBMP(const StringPiece& text) {\n-   const char* p = text.begin();\n-   const char* ep = text.end();\n-   while (p < ep) {\n-     if (!fullrune(p, ep - p))\n-       return false;\n-     Rune r;\n-     p += chartorune(&r, p);\n-     if (r > 0xFFFF)\n-       return false;\n-   }\n-   return true;\n- }\n- \n  // Runs a single test.\n  bool TestInstance::RunCase(const StringPiece& text, const StringPiece& context,\n                             Prog::Anchor anchor) {\nre2/testing/tester.cc#12:619,625 - re2/testing/tester.cc#13:477,483\n    Result correct;\n    RunSearch(kEngineBacktrack, text, context, anchor, &correct);\n    if (correct.skipped) {\n-     if (regexp_ == NULL || !IsBMP(context))  // okay to skip in UCS-2 mode\n+     if (regexp_ == NULL)\n        return true;\n      LOG(ERROR) << \"Skipped backtracking! \" << CEscape(regexp_str_)\n                 << \" \" << FormatMode(flags_);\n"
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}