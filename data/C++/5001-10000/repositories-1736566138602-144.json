{
  "metadata": {
    "timestamp": 1736566138602,
    "page": 144,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/draco",
      "stars": 6592,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.072265625,
          "content": "---\nLanguage:        Cpp\nBasedOnStyle: Google\nPointerAlignment: Right\n...\n"
        },
        {
          "name": ".cmake-format.py",
          "type": "blob",
          "size": 3.658203125,
          "content": "with section('parse'):\n  # Specify structure for custom cmake functions\n  additional_commands = {\n      'draco_add_emscripten_executable': {\n          'kwargs': {\n              'NAME': '*',\n              'SOURCES': '*',\n              'OUTPUT_NAME': '*',\n              'DEFINES': '*',\n              'INCLUDES': '*',\n              'COMPILE_FLAGS': '*',\n              'LINK_FLAGS': '*',\n              'OBJLIB_DEPS': '*',\n              'LIB_DEPS': '*',\n              'GLUE_PATH': '*',\n              'PRE_LINK_JS_SOURCES': '*',\n              'POST_LINK_JS_SOURCES': '*',\n              'FEATURES': '*',\n          },\n          'pargs': 0,\n      },\n      'draco_add_executable': {\n          'kwargs': {\n              'NAME': '*',\n              'SOURCES': '*',\n              'OUTPUT_NAME': '*',\n              'TEST': 0,\n              'DEFINES': '*',\n              'INCLUDES': '*',\n              'COMPILE_FLAGS': '*',\n              'LINK_FLAGS': '*',\n              'OBJLIB_DEPS': '*',\n              'LIB_DEPS': '*',\n          },\n          'pargs': 0,\n      },\n      'draco_add_library': {\n          'kwargs': {\n              'NAME': '*',\n              'TYPE': '*',\n              'SOURCES': '*',\n              'TEST': 0,\n              'OUTPUT_NAME': '*',\n              'DEFINES': '*',\n              'INCLUDES': '*',\n              'COMPILE_FLAGS': '*',\n              'LINK_FLAGS': '*',\n              'OBJLIB_DEPS': '*',\n              'LIB_DEPS': '*',\n              'PUBLIC_INCLUDES': '*',\n          },\n          'pargs': 0,\n      },\n      'draco_generate_emscripten_glue': {\n          'kwargs': {\n              'INPUT_IDL': '*',\n              'OUTPUT_PATH': '*',\n          },\n          'pargs': 0,\n      },\n      'draco_get_required_emscripten_flags': {\n          'kwargs': {\n              'FLAG_LIST_VAR_COMPILER': '*',\n              'FLAG_LIST_VAR_LINKER': '*',\n          },\n          'pargs': 0,\n      },\n      'draco_option': {\n          'kwargs': {\n              'NAME': '*',\n              'HELPSTRING': '*',\n              'VALUE': '*',\n          },\n          'pargs': 0,\n      },\n      # Rules for built in CMake commands and those from dependencies.\n      'list': {\n          'kwargs': {\n              'APPEND': '*',\n              'FILTER': '*',\n              'FIND': '*',\n              'GET': '*',\n              'INSERT': '*',\n              'JOIN': '*',\n              'LENGTH': '*',\n              'POP_BACK': '*',\n              'POP_FRONT': '*',\n              'PREPEND': '*',\n              'REMOVE_DUPLICATES': '*',\n              'REMOVE_ITEM': '*',\n              'REVERSE': '*',\n              'SORT': '*',\n              'SUBLIST': '*',\n              'TRANSFORM': '*',\n          },\n      },\n      'protobuf_generate': {\n        'kwargs': {\n            'IMPORT_DIRS': '*',\n            'LANGUAGE': '*',\n            'OUT_VAR': '*',\n            'PROTOC_OUT_DIR': '*',\n            'PROTOS': '*',\n        },\n      },\n  }\n\nwith section('format'):\n  # Formatting options.\n\n  # How wide to allow formatted cmake files\n  line_width = 80\n\n  # How many spaces to tab for indent\n  tab_size = 2\n\n  # If true, separate flow control names from their parentheses with a space\n  separate_ctrl_name_with_space = False\n\n  # If true, separate function names from parentheses with a space\n  separate_fn_name_with_space = False\n\n  # If a statement is wrapped to more than one line, than dangle the closing\n  # parenthesis on its own line.\n  dangle_parens = False\n\n  # Do not sort argument lists.\n  enable_sort = False\n\n  # What style line endings to use in the output.\n  line_ending = 'unix'\n\n  # Format command names consistently as 'lower' or 'upper' case\n  command_case = 'canonical'\n\n  # Format keywords consistently as 'lower' or 'upper' case\n  keyword_case = 'upper'\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "*.obj eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0107421875,
          "content": "docs/_site\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.4375,
          "content": "[submodule \"third_party/googletest\"]\n  path = third_party/googletest\n  url = https://github.com/google/googletest.git\n[submodule \"third_party/eigen\"]\n  path = third_party/eigen\n  url = https://gitlab.com/libeigen/eigen.git\n[submodule \"third_party/tinygltf\"]\n  path = third_party/tinygltf\n  url = https://github.com/syoyo/tinygltf.git\n[submodule \"third_party/filesystem\"]\n  path = third_party/filesystem\n  url = https://github.com/gulrak/filesystem\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.3095703125,
          "content": "# This is the list of Draco authors for copyright purposes.\n#\n# This does not necessarily list everyone who has contributed code, since in\n# some cases, their employer may be the copyright holder.  To see the full list\n# of contributors, see the revision history in source control.\nGoogle Inc.\nand other contributors\n"
        },
        {
          "name": "BUILDING.md",
          "type": "blob",
          "size": 11.2373046875,
          "content": "_**Contents**_\n\n  * [CMake Basics](#cmake-basics)\n  * [Mac OS X](#mac-os-x)\n  * [Windows](#windows)\n  * [CMake Build Configuration](#cmake-build-configuration)\n    * [Transcoder](#transcoder)\n    * [Debugging and Optimization](#debugging-and-optimization)\n    * [Googletest Integration](#googletest-integration)\n    * [Third Party Libraries](#third-party-libraries)\n    * [Javascript Encoder/Decoder](#javascript-encoderdecoder)\n    * [WebAssembly Decoder](#webassembly-decoder)\n    * [WebAssembly Mesh Only Decoder](#webassembly-mesh-only-decoder)\n    * [WebAssembly Point Cloud Only Decoder](#webassembly-point-cloud-only-decoder)\n    * [iOS Builds](#ios-builds)\n  * [Android Studio Project Integration](#android-studio-project-integration)\n  * [Native Android Builds](#native-android-builds)\n  * [vcpkg](#vcpkg)\n\nBuilding\n========\nFor all platforms, you must first generate the project/make files and then\ncompile the examples.\n\nCMake Basics\n------------\n\nTo generate project/make files for the default toolchain on your system, run\n`cmake` from a directory where you would like to generate build files, and pass\nit the path to your Draco repository.\n\nE.g. Starting from Draco root.\n\n~~~~~ bash\n$ mkdir build_dir && cd build_dir\n$ cmake ../\n~~~~~\n\nOn Windows, the above command will produce Visual Studio project files for the\nnewest Visual Studio detected on the system. On Mac OS X and Linux systems,\nthe above command will produce a `makefile`.\n\nTo control what types of projects are generated, add the `-G` parameter to the\n`cmake` command. This argument must be followed by the name of a generator.\nRunning `cmake` with the `--help` argument will list the available\ngenerators for your system.\n\nMac OS X\n---------\n\nOn Mac OS X, run the following command to generate Xcode projects:\n\n~~~~~ bash\n$ cmake ../ -G Xcode\n~~~~~\n\nWindows\n-------\n\nOn a Windows box you would run the following command to generate Visual Studio\n2019 projects:\n\n~~~~~ bash\nC:\\Users\\nobody> cmake ../ -G \"Visual Studio 16 2019\" -A Win32\n~~~~~\n\nTo generate 64-bit Windows Visual Studio 2019 projects:\n\n~~~~~ bash\nC:\\Users\\nobody> cmake ../ -G \"Visual Studio 16 2019\" -A x64\n~~~~~\n\n\nCMake Build Configuration\n-------------------------\n\nTranscoder\n----------\n\nBefore attempting to build Draco with transcoding support you must run an\nadditional Git command to obtain the submodules:\n\n~~~~~ bash\n# Run this command from within your Draco clone.\n$ git submodule update --init\n# See below if you prefer to use existing versions of Draco dependencies.\n~~~~~\n\nIn order to build the `draco_transcoder` target, the transcoding support needs\nto be explicitly enabled when you run `cmake`, for example:\n\n~~~~~ bash\n$ cmake ../ -DDRACO_TRANSCODER_SUPPORTED=ON\n~~~~~\n\nThe above option is currently not compatible with our Javascript or WebAssembly\nbuilds but all other use cases are supported. Note that binaries and libraries\nbuilt with the transcoder support may result in increased binary sizes of the\nproduced libraries and executables compared to the default CMake settings.\n\nThe following CMake variables can be used to configure Draco to use local\ncopies of third party dependencies instead of git submodules.\n\n- `DRACO_EIGEN_PATH`: this path must contain an Eigen directory that includes\n  the Eigen sources.\n- `DRACO_FILESYSTEM_PATH`: this path must contain the ghc directory where the\n  filesystem includes are located.\n- `DRACO_TINYGLTF_PATH`: this path must contain tiny_gltf.h and its\n  dependencies.\n\nWhen not specified the Draco build requires the presence of the submodules that\nare stored within `draco/third_party`.\n\nDebugging and Optimization\n--------------------------\n\nUnlike Visual Studio and Xcode projects, the build configuration for make\nbuilds is controlled when you run `cmake`. The following examples demonstrate\nvarious build configurations.\n\nOmitting the build type produces makefiles that use release build flags\nby default:\n\n~~~~~ bash\n$ cmake ../\n~~~~~\n\nA makefile using release (optimized) flags is produced like this:\n\n~~~~~ bash\n$ cmake ../ -DCMAKE_BUILD_TYPE=Release\n~~~~~\n\nA release build with debug info can be produced as well:\n\n~~~~~ bash\n$ cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo\n~~~~~\n\nAnd your standard debug build will be produced using:\n\n~~~~~ bash\n$ cmake ../ -DCMAKE_BUILD_TYPE=Debug\n~~~~~\n\nTo enable the use of sanitizers when the compiler in use supports them, set the\nsanitizer type when running CMake:\n\n~~~~~ bash\n$ cmake ../ -DDRACO_SANITIZE=address\n~~~~~\n\nGoogletest Integration\n----------------------\n\nDraco includes testing support built using Googletest. The Googletest repository\nis included as a submodule of the Draco git repository. Run the following\ncommand to clone the Googletest repository:\n\n~~~~~ bash\n$ git submodule update --init\n~~~~~\n\nTo enable Googletest unit test support the DRACO_TESTS cmake variable must be\nturned on at cmake generation time:\n\n~~~~~ bash\n$ cmake ../ -DDRACO_TESTS=ON\n~~~~~\n\nTo run the tests execute `draco_tests` from your build output directory:\n\n~~~~~ bash\n$ ./draco_tests\n~~~~~\n\nDraco can be configured to use a local Googletest installation. The\n`DRACO_GOOGLETEST_PATH` variable overrides the behavior described above and\nconfigures Draco to use the Googletest at the specified path.\n\nThird Party Libraries\n---------------------\n\nWhen Draco is built with transcoding and/or testing support enabled the project\nhas dependencies on third party libraries:\n\n- [Eigen](https://eigen.tuxfamily.org/)\n  - Provides various math utilites.\n- [Googletest](https://github.com/google/googletest)\n  - Provides testing support.\n- [Gulrak/filesystem](https://github.com/gulrak/filesystem)\n  - Provides C++17 std::filesystem emulation for pre-C++17 environments.\n- [TinyGLTF](https://github.com/syoyo/tinygltf)\n  - Provides GLTF I/O support.\n\nThese dependencies are managed as Git submodules. To obtain the dependencies\nrun the following command in your Draco repository:\n\n~~~~~ bash\n$ git submodule update --init\n~~~~~\n\nWebAssembly Decoder\n-------------------\n\nThe WebAssembly decoder can be built using the existing cmake build file by\npassing the path the Emscripten's cmake toolchain file at cmake generation time\nin the CMAKE_TOOLCHAIN_FILE variable and enabling the WASM build option.\nIn addition, the EMSCRIPTEN environment variable must be set to the local path\nof the parent directory of the Emscripten tools directory.\n\n~~~~~ bash\n# Make the path to emscripten available to cmake.\n$ export EMSCRIPTEN=/path/to/emscripten/tools/parent\n\n# Emscripten.cmake can be found within your Emscripten installation directory,\n# it should be the subdir: cmake/Modules/Platform/Emscripten.cmake\n$ cmake ../ -DCMAKE_TOOLCHAIN_FILE=/path/to/Emscripten.cmake -DDRACO_WASM=ON\n\n# Build the WebAssembly decoder.\n$ make\n\n# Run the Javascript wrapper through Closure.\n$ java -jar closure.jar --compilation_level SIMPLE --js draco_decoder.js --js_output_file draco_wasm_wrapper.js\n\n~~~~~\n\nWebAssembly Mesh Only Decoder\n-----------------------------\n\n~~~~~ bash\n\n# cmake command line for mesh only WebAssembly decoder.\n$ cmake ../ -DCMAKE_TOOLCHAIN_FILE=/path/to/Emscripten.cmake -DDRACO_WASM=ON -DDRACO_POINT_CLOUD_COMPRESSION=OFF\n\n~~~~~\n\nWebAssembly Point Cloud Only Decoder\n-----------------------------\n\n~~~~~ bash\n\n# cmake command line for point cloud only WebAssembly decoder.\n$ cmake ../ -DCMAKE_TOOLCHAIN_FILE=/path/to/Emscripten.cmake -DDRACO_WASM=ON -DDRACO_MESH_COMPRESSION=OFF\n\n~~~~~\n\nJavascript Encoder/Decoder\n------------------\n\nThe javascript encoder and decoder can be built using the existing cmake build\nfile by passing the path the Emscripten's cmake toolchain file at cmake\ngeneration time in the CMAKE_TOOLCHAIN_FILE variable.\nIn addition, the EMSCRIPTEN environment variable must be set to the local path\nof the parent directory of the Emscripten tools directory.\n\n*Note* The WebAssembly decoder should be favored over the JavaScript decoder.\n\n~~~~~ bash\n# Make the path to emscripten available to cmake.\n$ export EMSCRIPTEN=/path/to/emscripten/tools/parent\n\n# Emscripten.cmake can be found within your Emscripten installation directory,\n# it should be the subdir: cmake/Modules/Platform/Emscripten.cmake\n$ cmake ../ -DCMAKE_TOOLCHAIN_FILE=/path/to/Emscripten.cmake\n\n# Build the Javascript encoder and decoder.\n$ make\n~~~~~\n\niOS Builds\n---------------------\nThese are the basic commands needed to build Draco for iOS targets.\n~~~~~ bash\n\n#arm64\n$ cmake ../ -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/arm64-ios.cmake\n$ make\n\n#x86_64\n$ cmake ../ -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/x86_64-ios.cmake\n$ make\n\n#armv7\n$ cmake ../ -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/armv7-ios.cmake\n$ make\n\n#i386\n$ cmake ../ -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/i386-ios.cmake\n$ make\n~~~~~~\n\nAfter building for each target the libraries can be merged into a single\nuniversal/fat library using lipo, and then used in iOS applications.\n\n\nNative Android Builds\n---------------------\n\nIt's sometimes useful to build Draco command line tools and run them directly on\nAndroid devices via adb.\n\n~~~~~ bash\n# This example is for armeabi-v7a.\n$ cmake ../ -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/android.cmake \\\n  -DDRACO_ANDROID_NDK_PATH=path/to/ndk -DANDROID_ABI=armeabi-v7a\n$ make\n\n# See the android.cmake toolchain file for additional ANDROID_ABI options and\n# other configurable Android variables.\n~~~~~\n\nAfter building the tools they can be moved to an android device via the use of\n`adb push`, and then run within an `adb shell` instance.\n\n\nAndroid Studio Project Integration\n----------------------------------\n\nTested on Android Studio 3.5.3.\n\n\nDraco - Static Library\n----------------------\n\nTo include Draco in an existing or new Android Studio project, reference it\nfrom the `cmake` file of an existing native project that has a minimum SDK\nversion of 18 or higher. The project must support C++11.\nTo add Draco to your project:\n\n  1. Create a new \"Native C++\" project.\n\n  2. Add the following somewhere within the `CMakeLists.txt` for your project\n     before the `add_library()` for your project's native-lib:\n\n     ~~~~~ cmake\n     # Note \"/path/to/draco\" must be changed to the path where you have cloned\n     # the Draco sources.\n\n     add_subdirectory(/path/to/draco\n                      ${CMAKE_BINARY_DIR}/draco_build)\n     include_directories(\"${CMAKE_BINARY_DIR}\" /path/to/draco)\n     ~~~~~\n\n  3. Add the library target \"draco\" to the `target_link_libraries()` call for\n     your project's native-lib. The `target_link_libraries()` call for an\n     empty activity native project looks like this after the addition of\n     Draco:\n\n     ~~~~~ cmake\n     target_link_libraries( # Specifies the target library.\n                            native-lib\n\n                            # Tells cmake this build depends on libdraco.\n                            draco\n\n                            # Links the target library to the log library\n                            # included in the NDK.\n                            ${log-lib} )\n\nvcpkg\n---------------------\nYou can download and install Draco using the\n[vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    vcpkg install draco\n\nThe Draco port in vcpkg is kept up to date by Microsoft team members and\ncommunity contributors. If the version is out of date, please\n[create an issue or pull request](https://github.com/Microsoft/vcpkg) on the\nvcpkg repository.\n"
        },
        {
          "name": "CMAKE.md",
          "type": "blob",
          "size": 4.4404296875,
          "content": "# CMake Build System Overview\n\n[TOC]\n\nThis document provides a general layout of the Draco CMake build system.\n\n## Core Build System Files\n\nThese files are listed in order of interest to maintainers of the build system.\n\n-   `CMakeLists.txt` is the main driver of the build system. It's responsible\n    for defining targets and source lists, surfacing build system options, and\n    tying the components of the build system together.\n\n-   `cmake/draco_build_definitions.cmake` defines the macro\n    `draco_set_build_definitions()`, which is called from `CMakeLists.txt` to\n    configure include paths, compiler and linker flags, library settings,\n    platform speficic configuration, and other build system settings that\n    depend on optional build configurations.\n\n-   `cmake/draco_targets.cmake` defines the macros `draco_add_library()` and\n    `draco_add_executable()` which are used to create all targets in the CMake\n    build. These macros attempt to behave in a manner that loosely mirrors the\n    blaze `cc_library()` and `cc_binary()` commands. Note that\n    `draco_add_executable()` is also used for tests.\n\n-   `cmake/draco_emscripten.cmake` handles Emscripten SDK integration. It\n    defines several Emscripten specific macros that are required to build the\n    Emscripten specific targets defined in `CMakeLists.txt`.\n\n-   `cmake/draco_flags.cmake` defines macros related to compiler and linker\n    flags. Testing macros, macros for isolating flags to specific source files,\n    and the main flag configuration function for the library are defined here.\n\n-   `cmake/draco_options.cmake` defines macros that control optional features\n    of draco, and help track draco library and build system options.\n\n-   `cmake/draco_install.cmake` defines the draco install target.\n\n-   `cmake/draco_cpu_detection.cmake` determines the optimization types to\n    enable based on target system processor as reported by CMake.\n\n-   `cmake/draco_intrinsics.cmake` manages flags for source files that use\n    intrinsics. It handles detection of whether flags are necessary, and the\n    application of the flags to the sources that need them when they are\n    required.\n\n## Helper and Utility Files\n\n-   `.cmake-format.py` Defines coding style for cmake-format.\n\n-   `cmake/draco_helpers.cmake` defines utility macros.\n\n-   `cmake/draco_sanitizer.cmake` defines the `draco_configure_sanitizer()`\n    macro, which implements support for `DRACO_SANITIZE`. It handles the\n    compiler and linker flags necessary for using sanitizers like asan and msan.\n\n-   `cmake/draco_variables.cmake` defines macros for tracking and control of\n    draco build system variables.\n\n## Toolchain Files\n\nThese files help facilitate cross compiling of draco for various targets.\n\n-   `cmake/toolchains/aarch64-linux-gnu.cmake` provides cross compilation\n    support for arm64 targets.\n\n-   `cmake/toolchains/android.cmake` provides cross compilation support for\n    Android targets.\n\n-   `cmake/toolchains/arm-linux-gnueabihf.cmake` provides cross compilation\n    support for armv7 targets.\n\n-   `cmake/toolchains/arm64-ios.cmake`, `cmake/toolchains/armv7-ios.cmake`,\n    and `cmake/toolchains/armv7s-ios.cmake` provide support for iOS.\n\n-   `cmake/toolchains/arm64-linux-gcc.cmake` and\n    `cmake/toolchains/armv7-linux-gcc.cmake` are deprecated, but remain for\n    compatibility. `cmake/toolchains/android.cmake` should be used instead.\n\n-   `cmake/toolchains/arm64-android-ndk-libcpp.cmake`,\n    `cmake/toolchains/armv7-android-ndk-libcpp.cmake`,\n    `cmake/toolchains/x86-android-ndk-libcpp.cmake`, and\n    `cmake/toolchains/x86_64-android-ndk-libcpp.cmake` are deprecated, but\n    remain for compatibility. `cmake/toolchains/android.cmake` should be used\n    instead.\n\n-   `cmake/toolchains/i386-ios.cmake` and `cmake/toolchains/x86_64-ios.cmake`\n    provide support for the iOS simulator.\n\n-   `cmake/toolchains/android-ndk-common.cmake` and\n    `cmake/toolchains/arm-ios-common.cmake` are support files used by other\n    toolchain files.\n\n## Template Files\n\nThese files are inputs to the CMake build and are used to generate inputs to the\nbuild system output by CMake.\n\n-   `cmake/draco-config.cmake.template` is used to produce\n    draco-config.cmake. draco-config.cmake can be used by CMake to find draco\n    when another CMake project depends on draco.\n\n-   `cmake/draco.pc.template` is used to produce draco's pkg-config file.\n    Some build systems use pkg-config to configure include and library paths\n    when they depend upon third party libraries like draco.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 48.6845703125,
          "content": "# Copyright 2021 The Draco Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n# use this file except in compliance with the License. You may obtain a copy of\n# the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations under\n# the License.\n\ncmake_minimum_required(VERSION 3.12 FATAL_ERROR)\nif(DRACO_TRANSCODER_SUPPORTED)\n  set(CMAKE_CXX_STANDARD 17)\nendif()\nproject(draco C CXX)\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release)\nendif()\n\nset(draco_root \"${CMAKE_CURRENT_SOURCE_DIR}\")\nset(draco_src_root \"${draco_root}/src/draco\")\nset(draco_build \"${CMAKE_BINARY_DIR}\")\n\nif(\"${draco_root}\" STREQUAL \"${draco_build}\")\n  message(\n    FATAL_ERROR\n      \"Building from within the Draco source tree is not supported.\\n\"\n      \"Hint: Run these commands\\n\"\n      \"$ rm -rf CMakeCache.txt CMakeFiles\\n\"\n      \"$ mkdir -p ../draco_build\\n\"\n      \"$ cd ../draco_build\\n\"\n      \"And re-run CMake from the draco_build directory.\")\nendif()\n\ninclude(FindPythonInterp)\ninclude(\"${draco_root}/cmake/draco_build_definitions.cmake\")\ninclude(\"${draco_root}/cmake/draco_cpu_detection.cmake\")\ninclude(\"${draco_root}/cmake/draco_dependencies.cmake\")\ninclude(\"${draco_root}/cmake/draco_emscripten.cmake\")\ninclude(\"${draco_root}/cmake/draco_flags.cmake\")\ninclude(\"${draco_root}/cmake/draco_helpers.cmake\")\ninclude(\"${draco_root}/cmake/draco_install.cmake\")\ninclude(\"${draco_root}/cmake/draco_intrinsics.cmake\")\ninclude(\"${draco_root}/cmake/draco_options.cmake\")\ninclude(\"${draco_root}/cmake/draco_sanitizer.cmake\")\ninclude(\"${draco_root}/cmake/draco_targets.cmake\")\ninclude(\"${draco_root}/cmake/draco_tests.cmake\")\ninclude(\"${draco_root}/cmake/draco_variables.cmake\")\n\n# C++ and linker flags.\ndraco_track_configuration_variable(DRACO_CXX_FLAGS)\ndraco_track_configuration_variable(DRACO_EXE_LINKER_FLAGS)\n\n# Sanitizer integration.\ndraco_track_configuration_variable(DRACO_SANITIZE)\n\n# Generated source file directory.\ndraco_track_configuration_variable(DRACO_GENERATED_SOURCES_DIRECTORY)\n\n# Controls use of std::mutex and absl::Mutex in ThreadPool.\ndraco_track_configuration_variable(DRACO_THREADPOOL_USE_STD_MUTEX)\n\n\nif(DRACO_VERBOSE)\n  draco_dump_cmake_flag_variables()\n  draco_dump_tracked_configuration_variables()\n  draco_dump_options()\nendif()\n\n# Compiler/linker flags must be lists, but come in from the environment as\n# strings. Break them up:\nif(NOT \"${DRACO_CXX_FLAGS}\" STREQUAL \"\")\n  separate_arguments(DRACO_CXX_FLAGS)\nendif()\nif(NOT \"${DRACO_EXE_LINKER_FLAGS}\" STREQUAL \"\")\n  separate_arguments(DRACO_EXE_LINKER_FLAGS)\nendif()\n\ndraco_reset_target_lists()\ndraco_setup_options()\ndraco_set_build_definitions()\ndraco_set_cxx_flags()\ndraco_set_exe_linker_flags()\ndraco_generate_features_h()\n\n# Draco source file listing variables.\nlist(\n  APPEND draco_attributes_sources\n         \"${draco_src_root}/attributes/attribute_octahedron_transform.cc\"\n         \"${draco_src_root}/attributes/attribute_octahedron_transform.h\"\n         \"${draco_src_root}/attributes/attribute_quantization_transform.cc\"\n         \"${draco_src_root}/attributes/attribute_quantization_transform.h\"\n         \"${draco_src_root}/attributes/attribute_transform.cc\"\n         \"${draco_src_root}/attributes/attribute_transform.h\"\n         \"${draco_src_root}/attributes/attribute_transform_data.h\"\n         \"${draco_src_root}/attributes/attribute_transform_type.h\"\n         \"${draco_src_root}/attributes/geometry_attribute.cc\"\n         \"${draco_src_root}/attributes/geometry_attribute.h\"\n         \"${draco_src_root}/attributes/geometry_indices.h\"\n         \"${draco_src_root}/attributes/point_attribute.cc\"\n         \"${draco_src_root}/attributes/point_attribute.h\")\n\nlist(\n  APPEND\n    draco_compression_attributes_dec_sources\n    \"${draco_src_root}/compression/attributes/attributes_decoder.cc\"\n    \"${draco_src_root}/compression/attributes/attributes_decoder.h\"\n    \"${draco_src_root}/compression/attributes/attributes_decoder_interface.h\"\n    \"${draco_src_root}/compression/attributes/kd_tree_attributes_decoder.cc\"\n    \"${draco_src_root}/compression/attributes/kd_tree_attributes_decoder.h\"\n    \"${draco_src_root}/compression/attributes/kd_tree_attributes_shared.h\"\n    \"${draco_src_root}/compression/attributes/mesh_attribute_indices_encoding_data.h\"\n    \"${draco_src_root}/compression/attributes/normal_compression_utils.h\"\n    \"${draco_src_root}/compression/attributes/point_d_vector.h\"\n    \"${draco_src_root}/compression/attributes/sequential_attribute_decoder.cc\"\n    \"${draco_src_root}/compression/attributes/sequential_attribute_decoder.h\"\n    \"${draco_src_root}/compression/attributes/sequential_attribute_decoders_controller.cc\"\n    \"${draco_src_root}/compression/attributes/sequential_attribute_decoders_controller.h\"\n    \"${draco_src_root}/compression/attributes/sequential_integer_attribute_decoder.cc\"\n    \"${draco_src_root}/compression/attributes/sequential_integer_attribute_decoder.h\"\n    \"${draco_src_root}/compression/attributes/sequential_normal_attribute_decoder.cc\"\n    \"${draco_src_root}/compression/attributes/sequential_normal_attribute_decoder.h\"\n    \"${draco_src_root}/compression/attributes/sequential_quantization_attribute_decoder.cc\"\n    \"${draco_src_root}/compression/attributes/sequential_quantization_attribute_decoder.h\"\n)\n\nlist(\n  APPEND\n    draco_compression_attributes_enc_sources\n    \"${draco_src_root}/compression/attributes/attributes_encoder.cc\"\n    \"${draco_src_root}/compression/attributes/attributes_encoder.h\"\n    \"${draco_src_root}/compression/attributes/kd_tree_attributes_encoder.cc\"\n    \"${draco_src_root}/compression/attributes/kd_tree_attributes_encoder.h\"\n    \"${draco_src_root}/compression/attributes/linear_sequencer.h\"\n    \"${draco_src_root}/compression/attributes/points_sequencer.h\"\n    \"${draco_src_root}/compression/attributes/sequential_attribute_encoder.cc\"\n    \"${draco_src_root}/compression/attributes/sequential_attribute_encoder.h\"\n    \"${draco_src_root}/compression/attributes/sequential_attribute_encoders_controller.cc\"\n    \"${draco_src_root}/compression/attributes/sequential_attribute_encoders_controller.h\"\n    \"${draco_src_root}/compression/attributes/sequential_integer_attribute_encoder.cc\"\n    \"${draco_src_root}/compression/attributes/sequential_integer_attribute_encoder.h\"\n    \"${draco_src_root}/compression/attributes/sequential_normal_attribute_encoder.cc\"\n    \"${draco_src_root}/compression/attributes/sequential_normal_attribute_encoder.h\"\n    \"${draco_src_root}/compression/attributes/sequential_quantization_attribute_encoder.cc\"\n    \"${draco_src_root}/compression/attributes/sequential_quantization_attribute_encoder.h\"\n)\n\n\nlist(\n  APPEND\n    draco_compression_attributes_pred_schemes_dec_sources\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_constrained_multi_parallelogram_decoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_constrained_multi_parallelogram_shared.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_data.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_decoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_geometric_normal_decoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_geometric_normal_predictor_area.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_geometric_normal_predictor_base.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_multi_parallelogram_decoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_parallelogram_encoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_parallelogram_shared.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_decoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_portable_decoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_portable_predictor.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_decoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_decoder_factory.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_decoder_interface.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_decoding_transform.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_delta_decoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_factory.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_interface.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_canonicalized_decoding_transform.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_canonicalized_transform_base.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_decoding_transform.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_transform_base.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_wrap_decoding_transform.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_wrap_transform_base.h\"\n)\n\nlist(\n  APPEND\n    draco_compression_attributes_pred_schemes_enc_sources\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_constrained_multi_parallelogram_encoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_constrained_multi_parallelogram_shared.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_data.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_encoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_geometric_normal_encoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_geometric_normal_predictor_area.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_geometric_normal_predictor_base.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_multi_parallelogram_encoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_parallelogram_encoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_parallelogram_shared.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_encoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_portable_encoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_portable_predictor.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_delta_encoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_encoder.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_encoder_factory.cc\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_encoder_factory.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_encoder_interface.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_encoding_transform.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_factory.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_interface.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_canonicalized_encoding_transform.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_canonicalized_transform_base.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_encoding_transform.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_transform_base.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_wrap_encoding_transform.h\"\n    \"${draco_src_root}/compression/attributes/prediction_schemes/prediction_scheme_wrap_transform_base.h\"\n)\n\nlist(\n  APPEND\n    draco_compression_bit_coders_sources\n    \"${draco_src_root}/compression/bit_coders/adaptive_rans_bit_coding_shared.h\"\n    \"${draco_src_root}/compression/bit_coders/adaptive_rans_bit_decoder.cc\"\n    \"${draco_src_root}/compression/bit_coders/adaptive_rans_bit_decoder.h\"\n    \"${draco_src_root}/compression/bit_coders/adaptive_rans_bit_encoder.cc\"\n    \"${draco_src_root}/compression/bit_coders/adaptive_rans_bit_encoder.h\"\n    \"${draco_src_root}/compression/bit_coders/direct_bit_decoder.cc\"\n    \"${draco_src_root}/compression/bit_coders/direct_bit_decoder.h\"\n    \"${draco_src_root}/compression/bit_coders/direct_bit_encoder.cc\"\n    \"${draco_src_root}/compression/bit_coders/direct_bit_encoder.h\"\n    \"${draco_src_root}/compression/bit_coders/folded_integer_bit_decoder.h\"\n    \"${draco_src_root}/compression/bit_coders/folded_integer_bit_encoder.h\"\n    \"${draco_src_root}/compression/bit_coders/rans_bit_decoder.cc\"\n    \"${draco_src_root}/compression/bit_coders/rans_bit_decoder.h\"\n    \"${draco_src_root}/compression/bit_coders/rans_bit_encoder.cc\"\n    \"${draco_src_root}/compression/bit_coders/rans_bit_encoder.h\"\n    \"${draco_src_root}/compression/bit_coders/symbol_bit_decoder.cc\"\n    \"${draco_src_root}/compression/bit_coders/symbol_bit_decoder.h\"\n    \"${draco_src_root}/compression/bit_coders/symbol_bit_encoder.cc\"\n    \"${draco_src_root}/compression/bit_coders/symbol_bit_encoder.h\")\n\nlist(\n  APPEND draco_enc_config_sources\n         \"${draco_src_root}/compression/config/compression_shared.h\"\n         \"${draco_src_root}/compression/config/draco_options.h\"\n         \"${draco_src_root}/compression/config/encoder_options.h\"\n         \"${draco_src_root}/compression/config/encoding_features.h\")\n\nlist(\n  APPEND draco_dec_config_sources\n         \"${draco_src_root}/compression/config/compression_shared.h\"\n         \"${draco_src_root}/compression/config/decoder_options.h\"\n         \"${draco_src_root}/compression/config/draco_options.h\")\n\nlist(APPEND draco_compression_options_sources\n            \"${draco_src_root}/compression/draco_compression_options.cc\"\n            \"${draco_src_root}/compression/draco_compression_options.h\")\n\nlist(APPEND draco_compression_decode_sources\n            \"${draco_src_root}/compression/decode.cc\"\n            \"${draco_src_root}/compression/decode.h\")\n\nlist(\n  APPEND draco_compression_encode_sources\n         \"${draco_src_root}/compression/encode.cc\"\n         \"${draco_src_root}/compression/encode.h\"\n         \"${draco_src_root}/compression/encode_base.h\"\n         \"${draco_src_root}/compression/expert_encode.cc\"\n         \"${draco_src_root}/compression/expert_encode.h\")\n\nlist(\n  APPEND\n    draco_compression_mesh_traverser_sources\n    \"${draco_src_root}/compression/mesh/traverser/depth_first_traverser.h\"\n    \"${draco_src_root}/compression/mesh/traverser/max_prediction_degree_traverser.h\"\n    \"${draco_src_root}/compression/mesh/traverser/mesh_attribute_indices_encoding_observer.h\"\n    \"${draco_src_root}/compression/mesh/traverser/mesh_traversal_sequencer.h\"\n    \"${draco_src_root}/compression/mesh/traverser/traverser_base.h\")\n\nlist(\n  APPEND\n    draco_compression_mesh_dec_sources\n    \"${draco_src_root}/compression/mesh/mesh_decoder.cc\"\n    \"${draco_src_root}/compression/mesh/mesh_decoder.h\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_decoder.cc\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_decoder.h\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_decoder_impl.cc\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_decoder_impl.h\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_decoder_impl_interface.h\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_shared.h\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_traversal_decoder.h\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_traversal_predictive_decoder.h\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_traversal_valence_decoder.h\"\n    \"${draco_src_root}/compression/mesh/mesh_sequential_decoder.cc\"\n    \"${draco_src_root}/compression/mesh/mesh_sequential_decoder.h\")\n\nlist(\n  APPEND\n    draco_compression_mesh_enc_sources\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_encoder.cc\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_encoder.h\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_encoder_impl.cc\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_encoder_impl.h\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_encoder_impl_interface.h\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_shared.h\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_traversal_encoder.h\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_traversal_predictive_encoder.h\"\n    \"${draco_src_root}/compression/mesh/mesh_edgebreaker_traversal_valence_encoder.h\"\n    \"${draco_src_root}/compression/mesh/mesh_encoder.cc\"\n    \"${draco_src_root}/compression/mesh/mesh_encoder.h\"\n    \"${draco_src_root}/compression/mesh/mesh_sequential_encoder.cc\"\n    \"${draco_src_root}/compression/mesh/mesh_sequential_encoder.h\")\n\nlist(\n  APPEND\n    draco_compression_point_cloud_dec_sources\n    \"${draco_src_root}/compression/point_cloud/point_cloud_decoder.cc\"\n    \"${draco_src_root}/compression/point_cloud/point_cloud_decoder.h\"\n    \"${draco_src_root}/compression/point_cloud/point_cloud_kd_tree_decoder.cc\"\n    \"${draco_src_root}/compression/point_cloud/point_cloud_kd_tree_decoder.h\"\n    \"${draco_src_root}/compression/point_cloud/point_cloud_sequential_decoder.cc\"\n    \"${draco_src_root}/compression/point_cloud/point_cloud_sequential_decoder.h\"\n)\n\nlist(\n  APPEND\n    draco_compression_point_cloud_enc_sources\n    \"${draco_src_root}/compression/point_cloud/point_cloud_encoder.cc\"\n    \"${draco_src_root}/compression/point_cloud/point_cloud_encoder.h\"\n    \"${draco_src_root}/compression/point_cloud/point_cloud_kd_tree_encoder.cc\"\n    \"${draco_src_root}/compression/point_cloud/point_cloud_kd_tree_encoder.h\"\n    \"${draco_src_root}/compression/point_cloud/point_cloud_sequential_encoder.cc\"\n    \"${draco_src_root}/compression/point_cloud/point_cloud_sequential_encoder.h\"\n)\n\nlist(\n  APPEND draco_compression_entropy_sources\n         \"${draco_src_root}/compression/entropy/ans.h\"\n         \"${draco_src_root}/compression/entropy/rans_symbol_coding.h\"\n         \"${draco_src_root}/compression/entropy/rans_symbol_decoder.h\"\n         \"${draco_src_root}/compression/entropy/rans_symbol_encoder.h\"\n         \"${draco_src_root}/compression/entropy/shannon_entropy.cc\"\n         \"${draco_src_root}/compression/entropy/shannon_entropy.h\"\n         \"${draco_src_root}/compression/entropy/symbol_decoding.cc\"\n         \"${draco_src_root}/compression/entropy/symbol_decoding.h\"\n         \"${draco_src_root}/compression/entropy/symbol_encoding.cc\"\n         \"${draco_src_root}/compression/entropy/symbol_encoding.h\")\n\nlist(\n  APPEND draco_core_sources\n         \"${draco_src_root}/core/bit_utils.cc\"\n         \"${draco_src_root}/core/bit_utils.h\"\n         \"${draco_src_root}/core/bounding_box.cc\"\n         \"${draco_src_root}/core/bounding_box.h\"\n         \"${draco_src_root}/core/constants.h\"\n         \"${draco_src_root}/core/cycle_timer.cc\"\n         \"${draco_src_root}/core/cycle_timer.h\"\n         \"${draco_src_root}/core/data_buffer.cc\"\n         \"${draco_src_root}/core/data_buffer.h\"\n         \"${draco_src_root}/core/decoder_buffer.cc\"\n         \"${draco_src_root}/core/decoder_buffer.h\"\n         \"${draco_src_root}/core/divide.cc\"\n         \"${draco_src_root}/core/divide.h\"\n         \"${draco_src_root}/core/draco_index_type.h\"\n         \"${draco_src_root}/core/draco_index_type_vector.h\"\n         \"${draco_src_root}/core/draco_types.cc\"\n         \"${draco_src_root}/core/draco_types.h\"\n         \"${draco_src_root}/core/draco_version.h\"\n         \"${draco_src_root}/core/encoder_buffer.cc\"\n         \"${draco_src_root}/core/encoder_buffer.h\"\n         \"${draco_src_root}/core/hash_utils.cc\"\n         \"${draco_src_root}/core/hash_utils.h\"\n         \"${draco_src_root}/core/macros.h\"\n         \"${draco_src_root}/core/math_utils.h\"\n         \"${draco_src_root}/core/options.cc\"\n         \"${draco_src_root}/core/options.h\"\n         \"${draco_src_root}/core/quantization_utils.cc\"\n         \"${draco_src_root}/core/quantization_utils.h\"\n         \"${draco_src_root}/core/status.h\"\n         \"${draco_src_root}/core/status_or.h\"\n         \"${draco_src_root}/core/varint_decoding.h\"\n         \"${draco_src_root}/core/varint_encoding.h\"\n         \"${draco_src_root}/core/vector_d.h\")\n\nlist(\n  APPEND draco_io_sources\n         \"${draco_src_root}/io/file_reader_factory.cc\"\n         \"${draco_src_root}/io/file_reader_factory.h\"\n         \"${draco_src_root}/io/file_reader_interface.h\"\n         \"${draco_src_root}/io/file_utils.cc\"\n         \"${draco_src_root}/io/file_utils.h\"\n         \"${draco_src_root}/io/file_writer_factory.cc\"\n         \"${draco_src_root}/io/file_writer_factory.h\"\n         \"${draco_src_root}/io/file_writer_interface.h\"\n         \"${draco_src_root}/io/file_writer_utils.h\"\n         \"${draco_src_root}/io/file_writer_utils.cc\"\n         \"${draco_src_root}/io/mesh_io.cc\"\n         \"${draco_src_root}/io/mesh_io.h\"\n         \"${draco_src_root}/io/obj_decoder.cc\"\n         \"${draco_src_root}/io/obj_decoder.h\"\n         \"${draco_src_root}/io/obj_encoder.cc\"\n         \"${draco_src_root}/io/obj_encoder.h\"\n         \"${draco_src_root}/io/parser_utils.cc\"\n         \"${draco_src_root}/io/parser_utils.h\"\n         \"${draco_src_root}/io/ply_decoder.cc\"\n         \"${draco_src_root}/io/ply_decoder.h\"\n         \"${draco_src_root}/io/ply_encoder.cc\"\n         \"${draco_src_root}/io/ply_encoder.h\"\n         \"${draco_src_root}/io/ply_property_reader.h\"\n         \"${draco_src_root}/io/ply_property_writer.h\"\n         \"${draco_src_root}/io/ply_reader.cc\"\n         \"${draco_src_root}/io/ply_reader.h\"\n         \"${draco_src_root}/io/stl_decoder.cc\"\n         \"${draco_src_root}/io/stl_decoder.h\"\n         \"${draco_src_root}/io/stl_encoder.cc\"\n         \"${draco_src_root}/io/stl_encoder.h\"\n         \"${draco_src_root}/io/point_cloud_io.cc\"\n         \"${draco_src_root}/io/point_cloud_io.h\"\n         \"${draco_src_root}/io/stdio_file_reader.cc\"\n         \"${draco_src_root}/io/stdio_file_reader.h\"\n         \"${draco_src_root}/io/stdio_file_writer.cc\"\n         \"${draco_src_root}/io/stdio_file_writer.h\")\n\nlist(\n  APPEND draco_mesh_sources\n         \"${draco_src_root}/mesh/corner_table.cc\"\n         \"${draco_src_root}/mesh/corner_table.h\"\n         \"${draco_src_root}/mesh/corner_table_iterators.h\"\n         \"${draco_src_root}/mesh/mesh.cc\"\n         \"${draco_src_root}/mesh/mesh.h\"\n         \"${draco_src_root}/mesh/mesh_are_equivalent.cc\"\n         \"${draco_src_root}/mesh/mesh_are_equivalent.h\"\n         \"${draco_src_root}/mesh/mesh_attribute_corner_table.cc\"\n         \"${draco_src_root}/mesh/mesh_attribute_corner_table.h\"\n         \"${draco_src_root}/mesh/mesh_cleanup.cc\"\n         \"${draco_src_root}/mesh/mesh_cleanup.h\"\n         \"${draco_src_root}/mesh/mesh_features.cc\"\n         \"${draco_src_root}/mesh/mesh_features.h\"\n         \"${draco_src_root}/mesh/mesh_indices.h\"\n         \"${draco_src_root}/mesh/mesh_misc_functions.cc\"\n         \"${draco_src_root}/mesh/mesh_misc_functions.h\"\n         \"${draco_src_root}/mesh/mesh_stripifier.cc\"\n         \"${draco_src_root}/mesh/mesh_stripifier.h\"\n         \"${draco_src_root}/mesh/triangle_soup_mesh_builder.cc\"\n         \"${draco_src_root}/mesh/triangle_soup_mesh_builder.h\"\n         \"${draco_src_root}/mesh/valence_cache.h\")\n\nlist(\n  APPEND draco_point_cloud_sources\n         \"${draco_src_root}/point_cloud/point_cloud.cc\"\n         \"${draco_src_root}/point_cloud/point_cloud.h\"\n         \"${draco_src_root}/point_cloud/point_cloud_builder.cc\"\n         \"${draco_src_root}/point_cloud/point_cloud_builder.h\")\n\nlist(\n  APPEND\n    draco_points_common_sources\n    \"${draco_src_root}/compression/point_cloud/algorithms/point_cloud_compression_method.h\"\n    \"${draco_src_root}/compression/point_cloud/algorithms/point_cloud_types.h\"\n    \"${draco_src_root}/compression/point_cloud/algorithms/quantize_points_3.h\"\n    \"${draco_src_root}/compression/point_cloud/algorithms/queuing_policy.h\")\n\nlist(\n  APPEND\n    draco_points_dec_sources\n    \"${draco_src_root}/compression/point_cloud/algorithms/dynamic_integer_points_kd_tree_decoder.cc\"\n    \"${draco_src_root}/compression/point_cloud/algorithms/dynamic_integer_points_kd_tree_decoder.h\"\n    \"${draco_src_root}/compression/point_cloud/algorithms/float_points_tree_decoder.cc\"\n    \"${draco_src_root}/compression/point_cloud/algorithms/float_points_tree_decoder.h\"\n)\n\nlist(\n  APPEND\n    draco_points_enc_sources\n    \"${draco_src_root}/compression/point_cloud/algorithms/dynamic_integer_points_kd_tree_encoder.cc\"\n    \"${draco_src_root}/compression/point_cloud/algorithms/dynamic_integer_points_kd_tree_encoder.h\"\n    \"${draco_src_root}/compression/point_cloud/algorithms/float_points_tree_encoder.cc\"\n    \"${draco_src_root}/compression/point_cloud/algorithms/float_points_tree_encoder.h\"\n)\n\nlist(\n  APPEND draco_metadata_sources\n         \"${draco_src_root}/metadata/geometry_metadata.cc\"\n         \"${draco_src_root}/metadata/geometry_metadata.h\"\n         \"${draco_src_root}/metadata/metadata.cc\"\n         \"${draco_src_root}/metadata/metadata.h\"\n         \"${draco_src_root}/metadata/property_attribute.cc\"\n         \"${draco_src_root}/metadata/property_attribute.h\"\n         \"${draco_src_root}/metadata/property_table.cc\"\n         \"${draco_src_root}/metadata/property_table.h\"\n         \"${draco_src_root}/metadata/structural_metadata.cc\"\n         \"${draco_src_root}/metadata/structural_metadata.h\"\n         \"${draco_src_root}/metadata/structural_metadata_schema.cc\"\n         \"${draco_src_root}/metadata/structural_metadata_schema.h\")\n\nlist(APPEND draco_metadata_enc_sources\n            \"${draco_src_root}/metadata/metadata_encoder.cc\"\n            \"${draco_src_root}/metadata/metadata_encoder.h\")\n\nlist(APPEND draco_metadata_dec_sources\n            \"${draco_src_root}/metadata/metadata_decoder.cc\"\n            \"${draco_src_root}/metadata/metadata_decoder.h\")\n\nlist(APPEND draco_animation_sources\n            \"${draco_src_root}/animation/keyframe_animation.cc\"\n            \"${draco_src_root}/animation/keyframe_animation.h\")\n\nlist(APPEND draco_animation_enc_sources\n            \"${draco_src_root}/animation/keyframe_animation_encoder.cc\"\n            \"${draco_src_root}/animation/keyframe_animation_encoder.h\")\n\nlist(APPEND draco_animation_dec_sources\n            \"${draco_src_root}/animation/keyframe_animation_decoder.cc\"\n            \"${draco_src_root}/animation/keyframe_animation_decoder.h\")\n\nlist(\n  APPEND draco_js_dec_sources\n         \"${draco_src_root}/javascript/emscripten/decoder_webidl_wrapper.cc\"\n         \"${draco_src_root}/javascript/emscripten/draco_decoder_glue_wrapper.cc\"\n)\n\nlist(\n  APPEND draco_js_enc_sources\n         \"${draco_src_root}/javascript/emscripten/draco_encoder_glue_wrapper.cc\"\n         \"${draco_src_root}/javascript/emscripten/encoder_webidl_wrapper.cc\")\n\nlist(\n  APPEND\n    draco_animation_js_dec_sources\n    \"${draco_src_root}/javascript/emscripten/animation_decoder_webidl_wrapper.cc\"\n    \"${draco_src_root}/javascript/emscripten/draco_animation_decoder_glue_wrapper.cc\"\n)\n\nlist(\n  APPEND\n    draco_animation_js_enc_sources\n    \"${draco_src_root}/javascript/emscripten/animation_encoder_webidl_wrapper.cc\"\n    \"${draco_src_root}/javascript/emscripten/draco_animation_encoder_glue_wrapper.cc\"\n)\n\nlist(APPEND draco_unity_plug_sources\n            \"${draco_src_root}/unity/draco_unity_plugin.cc\"\n            \"${draco_src_root}/unity/draco_unity_plugin.h\")\n\nlist(APPEND draco_maya_plug_sources\n            \"${draco_src_root}/maya/draco_maya_plugin.cc\"\n            \"${draco_src_root}/maya/draco_maya_plugin.h\")\n\nif(DRACO_TRANSCODER_SUPPORTED)\n  list(\n    APPEND draco_animation_sources\n           \"${draco_src_root}/animation/animation.cc\"\n           \"${draco_src_root}/animation/animation.h\"\n           \"${draco_src_root}/animation/node_animation_data.h\"\n           \"${draco_src_root}/animation/skin.cc\"\n           \"${draco_src_root}/animation/skin.h\")\n\n  list(\n    APPEND draco_io_sources\n           \"${draco_src_root}/io/gltf_decoder.cc\"\n           \"${draco_src_root}/io/gltf_decoder.h\"\n           \"${draco_src_root}/io/gltf_encoder.cc\"\n           \"${draco_src_root}/io/gltf_encoder.h\"\n           \"${draco_src_root}/io/gltf_utils.cc\"\n           \"${draco_src_root}/io/gltf_utils.h\"\n           \"${draco_src_root}/io/image_compression_options.h\"\n           \"${draco_src_root}/io/scene_io.cc\"\n           \"${draco_src_root}/io/scene_io.h\"\n           \"${draco_src_root}/io/texture_io.cc\"\n           \"${draco_src_root}/io/texture_io.h\"\n           \"${draco_src_root}/io/tiny_gltf_utils.cc\"\n           \"${draco_src_root}/io/tiny_gltf_utils.h\")\n\n  list(\n    APPEND draco_material_sources\n           \"${draco_src_root}/material/material.cc\"\n           \"${draco_src_root}/material/material.h\"\n           \"${draco_src_root}/material/material_library.cc\"\n           \"${draco_src_root}/material/material_library.h\")\n\n  list(\n    APPEND draco_mesh_sources\n           \"${draco_src_root}/mesh/mesh_connected_components.h\"\n           \"${draco_src_root}/mesh/mesh_splitter.cc\"\n           \"${draco_src_root}/mesh/mesh_splitter.h\"\n           \"${draco_src_root}/mesh/mesh_utils.cc\"\n           \"${draco_src_root}/mesh/mesh_utils.h\")\n\n  list(\n    APPEND draco_scene_sources\n           \"${draco_src_root}/scene/instance_array.cc\"\n           \"${draco_src_root}/scene/instance_array.h\"\n           \"${draco_src_root}/scene/light.cc\"\n           \"${draco_src_root}/scene/light.h\"\n           \"${draco_src_root}/scene/mesh_group.h\"\n           \"${draco_src_root}/scene/scene.cc\"\n           \"${draco_src_root}/scene/scene.h\"\n           \"${draco_src_root}/scene/scene_are_equivalent.cc\"\n           \"${draco_src_root}/scene/scene_are_equivalent.h\"\n           \"${draco_src_root}/scene/scene_indices.h\"\n           \"${draco_src_root}/scene/scene_node.h\"\n           \"${draco_src_root}/scene/scene_utils.cc\"\n           \"${draco_src_root}/scene/scene_utils.h\"\n           \"${draco_src_root}/scene/trs_matrix.cc\"\n           \"${draco_src_root}/scene/trs_matrix.h\")\n\n  list(\n    APPEND draco_texture_sources\n           \"${draco_src_root}/texture/source_image.cc\"\n           \"${draco_src_root}/texture/source_image.h\"\n           \"${draco_src_root}/texture/texture.h\"\n           \"${draco_src_root}/texture/texture_library.cc\"\n           \"${draco_src_root}/texture/texture_library.h\"\n           \"${draco_src_root}/texture/texture_map.cc\"\n           \"${draco_src_root}/texture/texture_map.h\"\n           \"${draco_src_root}/texture/texture_transform.cc\"\n           \"${draco_src_root}/texture/texture_transform.h\"\n           \"${draco_src_root}/texture/texture_utils.cc\"\n           \"${draco_src_root}/texture/texture_utils.h\")\n\n\nendif()\n\n#\n# Draco targets.\n#\nif(EMSCRIPTEN AND DRACO_JS_GLUE)\n  # Draco decoder and encoder \"executable\" targets in various flavors for\n  # Emscripten.\n\n  if(DRACO_TRANSCODER_SUPPORTED)\n    message(FATAL_ERROR \"The transcoder is not supported in Emscripten.\")\n  endif()\n\n  list(\n    APPEND draco_decoder_src\n           ${draco_attributes_sources}\n           ${draco_compression_attributes_dec_sources}\n           ${draco_compression_attributes_pred_schemes_dec_sources}\n           ${draco_compression_bit_coders_sources}\n           ${draco_compression_decode_sources}\n           ${draco_compression_entropy_sources}\n           ${draco_compression_mesh_traverser_sources}\n           ${draco_compression_mesh_dec_sources}\n           ${draco_compression_options_sources}\n           ${draco_compression_point_cloud_dec_sources}\n           ${draco_core_sources}\n           ${draco_dec_config_sources}\n           ${draco_js_dec_sources}\n           ${draco_mesh_sources}\n           ${draco_metadata_dec_sources}\n           ${draco_metadata_sources}\n           ${draco_point_cloud_sources}\n           ${draco_points_dec_sources})\n\n  list(\n    APPEND draco_encoder_src\n           ${draco_attributes_sources}\n           ${draco_compression_attributes_enc_sources}\n           ${draco_compression_attributes_pred_schemes_enc_sources}\n           ${draco_compression_bit_coders_sources}\n           ${draco_compression_encode_sources}\n           ${draco_compression_entropy_sources}\n           ${draco_compression_mesh_traverser_sources}\n           ${draco_compression_mesh_enc_sources}\n           ${draco_compression_options_sources}\n           ${draco_compression_point_cloud_enc_sources}\n           ${draco_core_sources}\n           ${draco_enc_config_sources}\n           ${draco_js_enc_sources}\n           ${draco_mesh_sources}\n           ${draco_metadata_enc_sources}\n           ${draco_metadata_sources}\n           ${draco_point_cloud_sources}\n           ${draco_points_enc_sources})\n\n  list(APPEND draco_js_dec_idl\n              \"${draco_src_root}/javascript/emscripten/draco_web_decoder.idl\")\n  list(APPEND draco_js_enc_idl\n              \"${draco_src_root}/javascript/emscripten/draco_web_encoder.idl\")\n  list(\n    APPEND\n      draco_animation_js_dec_idl\n      \"${draco_src_root}/javascript/emscripten/draco_animation_web_decoder.idl\")\n  list(\n    APPEND\n      draco_animation_js_enc_idl\n      \"${draco_src_root}/javascript/emscripten/draco_animation_web_encoder.idl\")\n  list(APPEND draco_pre_link_js_sources\n              \"${draco_src_root}/javascript/emscripten/prepareCallbacks.js\"\n              \"${draco_src_root}/javascript/emscripten/version.js\")\n  list(APPEND draco_post_link_js_sources\n              \"${draco_src_root}/javascript/emscripten/finalize.js\")\n  list(APPEND draco_post_link_js_decoder_sources ${draco_post_link_js_sources}\n              \"${draco_src_root}/javascript/emscripten/decoder_functions.js\")\n\n  set(draco_decoder_glue_path \"${draco_build}/glue_decoder\")\n  set(draco_encoder_glue_path \"${draco_build}/glue_encoder\")\n\n  draco_generate_emscripten_glue(INPUT_IDL ${draco_js_dec_idl}\n                                 OUTPUT_PATH ${draco_decoder_glue_path})\n  draco_generate_emscripten_glue(INPUT_IDL ${draco_js_enc_idl}\n                                 OUTPUT_PATH ${draco_encoder_glue_path})\n\n  if(DRACO_DECODER_ATTRIBUTE_DEDUPLICATION)\n    list(APPEND draco_decoder_features\n                \"DRACO_ATTRIBUTE_INDICES_DEDUPLICATION_SUPPORTED\"\n                \"DRACO_ATTRIBUTE_VALUES_DEDUPLICATION_SUPPORTED\")\n  endif()\n\n  draco_add_emscripten_executable(\n    NAME draco_decoder\n    SOURCES ${draco_decoder_src}\n    DEFINES ${draco_defines}\n    FEATURES ${draco_decoder_features}\n    INCLUDES ${draco_include_paths}\n    LINK_FLAGS \"-sEXPORT_NAME=\\\"DracoDecoderModule\\\"\"\n    GLUE_PATH ${draco_decoder_glue_path}\n    PRE_LINK_JS_SOURCES ${draco_pre_link_js_sources}\n    POST_LINK_JS_SOURCES ${draco_post_link_js_decoder_sources})\n\n  draco_add_emscripten_executable(\n    NAME draco_encoder\n    SOURCES ${draco_encoder_src}\n    DEFINES ${draco_defines}\n    FEATURES DRACO_ATTRIBUTE_INDICES_DEDUPLICATION_SUPPORTED\n             DRACO_ATTRIBUTE_VALUES_DEDUPLICATION_SUPPORTED\n    INCLUDES ${draco_include_paths}\n    LINK_FLAGS \"-sEXPORT_NAME=\\\"DracoEncoderModule\\\"\"\n    GLUE_PATH ${draco_encoder_glue_path}\n    PRE_LINK_JS_SOURCES ${draco_pre_link_js_sources}\n    POST_LINK_JS_SOURCES ${draco_post_link_js_sources})\n\n  if(DRACO_ANIMATION_ENCODING)\n    set(draco_anim_decoder_glue_path \"${draco_build}/glue_animation_decoder\")\n    set(draco_anim_encoder_glue_path \"${draco_build}/glue_animation_encoder\")\n\n    draco_generate_emscripten_glue(INPUT_IDL ${draco_animation_js_dec_idl}\n                                   OUTPUT_PATH ${draco_anim_decoder_glue_path})\n    draco_generate_emscripten_glue(INPUT_IDL ${draco_animation_js_enc_idl}\n                                   OUTPUT_PATH ${draco_anim_encoder_glue_path})\n\n    draco_add_emscripten_executable(\n      NAME draco_animation_decoder\n      SOURCES ${draco_animation_dec_sources} ${draco_animation_js_dec_sources}\n              ${draco_animation_sources} ${draco_decoder_src}\n      DEFINES ${draco_defines}\n      INCLUDES ${draco_include_paths}\n      LINK_FLAGS \"-sEXPORT_NAME=\\\"DracoAnimationDecoderModule\\\"\"\n      GLUE_PATH ${draco_anim_decoder_glue_path}\n      PRE_LINK_JS_SOURCES ${draco_pre_link_js_sources}\n      POST_LINK_JS_SOURCES ${draco_post_link_js_decoder_sources})\n\n    draco_add_emscripten_executable(\n      NAME draco_animation_encoder\n      SOURCES ${draco_animation_enc_sources} ${draco_animation_js_enc_sources}\n              ${draco_animation_sources} ${draco_encoder_src}\n      DEFINES ${draco_defines}\n      INCLUDES ${draco_include_paths}\n      LINK_FLAGS \"-sEXPORT_NAME=\\\"DracoAnimationEncoderModule\\\"\"\n      GLUE_PATH ${draco_anim_encoder_glue_path}\n      PRE_LINK_JS_SOURCES ${draco_pre_link_js_sources}\n      POST_LINK_JS_SOURCES ${draco_post_link_js_sources})\n  endif()\nelse()\n  # Standard Draco libs, encoder and decoder. Object collections that mirror the\n  # Draco directory structure.\n  draco_add_library(\n    NAME draco_attributes\n    TYPE OBJECT\n    SOURCES ${draco_attributes_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_compression_attributes_dec OBJECT\n         ${draco_compression_attributes_dec_sources}\n    TYPE OBJECT\n    SOURCES ${draco_compression_attributes_dec_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_compression_attributes_enc\n    TYPE OBJECT\n    SOURCES ${draco_compression_attributes_enc_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_compression_attributes_pred_schemes_dec\n    TYPE OBJECT\n    SOURCES ${draco_compression_attributes_pred_schemes_dec_sources})\n  draco_add_library(\n    NAME draco_compression_attributes_pred_schemes_enc\n    TYPE OBJECT\n    SOURCES ${draco_compression_attributes_pred_schemes_enc_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_compression_bit_coders\n    TYPE OBJECT\n    SOURCES ${draco_compression_bit_coders_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_enc_config\n    TYPE OBJECT\n    SOURCES ${draco_enc_config_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_dec_config\n    TYPE OBJECT\n    SOURCES ${draco_dec_config_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_compression_decode\n    TYPE OBJECT\n    SOURCES ${draco_compression_decode_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_compression_encode\n    TYPE OBJECT\n    SOURCES ${draco_compression_encode_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_compression_entropy\n    TYPE OBJECT\n    SOURCES ${draco_compression_entropy_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_compression_mesh_traverser\n    TYPE OBJECT\n    SOURCES ${draco_compression_mesh_traverser_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_compression_mesh_dec\n    TYPE OBJECT\n    SOURCES ${draco_compression_mesh_dec_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_compression_mesh_enc\n    TYPE OBJECT\n    SOURCES ${draco_compression_mesh_enc_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_compression_options\n    TYPE OBJECT\n    SOURCES ${draco_compression_options_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_compression_point_cloud_dec\n    TYPE OBJECT\n    SOURCES ${draco_compression_point_cloud_dec_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_compression_point_cloud_enc\n    TYPE OBJECT\n    SOURCES ${draco_compression_point_cloud_enc_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_core\n    TYPE OBJECT\n    SOURCES ${draco_core_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_io\n    TYPE OBJECT\n    SOURCES ${draco_io_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_mesh\n    TYPE OBJECT\n    SOURCES ${draco_mesh_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_metadata_dec\n    TYPE OBJECT\n    SOURCES ${draco_metadata_dec_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_metadata_enc\n    TYPE OBJECT\n    SOURCES ${draco_metadata_enc_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_metadata\n    TYPE OBJECT\n    SOURCES ${draco_metadata_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_animation_dec\n    TYPE OBJECT\n    SOURCES ${draco_animation_dec_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_animation_enc\n    TYPE OBJECT\n    SOURCES ${draco_animation_enc_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_animation\n    TYPE OBJECT\n    SOURCES ${draco_animation_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_point_cloud\n    TYPE OBJECT\n    SOURCES ${draco_point_cloud_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_points_dec\n    TYPE OBJECT\n    SOURCES ${draco_points_common_sources} ${draco_points_dec_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n  draco_add_library(\n    NAME draco_points_enc\n    TYPE OBJECT\n    SOURCES ${draco_points_common_sources} ${draco_points_enc_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths})\n\n  if(DRACO_TRANSCODER_SUPPORTED)\n    if(MSVC)\n      # TODO(https://github.com/google/draco/issues/826)\n      set_source_files_properties(\"${draco_src_root}/io/gltf_decoder.cc\"\n                                  PROPERTIES COMPILE_OPTIONS \"/Od\")\n    endif()\n\n    draco_add_library(\n      NAME draco_material\n      TYPE OBJECT\n      SOURCES ${draco_material_sources}\n      DEFINES ${draco_defines}\n      INCLUDES ${draco_include_paths})\n\n    draco_add_library(\n      NAME draco_scene\n      TYPE OBJECT\n      SOURCES ${draco_scene_sources}\n      DEFINES ${draco_defines}\n      INCLUDES ${draco_include_paths})\n\n    draco_add_library(\n      NAME draco_texture\n      TYPE OBJECT\n      SOURCES ${draco_texture_sources}\n      DEFINES ${draco_defines}\n      INCLUDES ${draco_include_paths})\n\n  endif()\n\n  list(\n    APPEND draco_object_library_deps\n           draco_attributes\n           draco_compression_attributes_dec\n           draco_compression_attributes_enc\n           draco_compression_attributes_pred_schemes_dec\n           draco_compression_attributes_pred_schemes_enc\n           draco_compression_bit_coders\n           draco_compression_decode\n           draco_compression_encode\n           draco_compression_entropy\n           draco_compression_mesh_dec\n           draco_compression_mesh_enc\n           draco_compression_options\n           draco_compression_point_cloud_dec\n           draco_compression_point_cloud_enc\n           draco_core\n           draco_dec_config\n           draco_enc_config\n           draco_io\n           draco_mesh\n           draco_metadata\n           draco_metadata_dec\n           draco_metadata_enc\n           draco_animation\n           draco_animation_dec\n           draco_animation_enc\n           draco_point_cloud\n           draco_points_dec\n           draco_points_enc)\n\n  if(DRACO_TRANSCODER_SUPPORTED)\n    list(APPEND draco_object_library_deps draco_material draco_scene\n                draco_texture)\n\n  endif()\n\n  # Library targets that consume the object collections.\n  if(MSVC)\n    # In order to produce a DLL and import library the Windows tools require\n    # that the exported symbols are part of the DLL target. The unfortunate side\n    # effect of this is that a single configuration cannot output both the\n    # static library and the DLL: This results in an either/or situation.\n    # Windows users of the draco build can have a DLL and an import library, or\n    # they can have a static library; they cannot have both from a single\n    # configuration of the build.\n    if(BUILD_SHARED_LIBS)\n      set(draco_lib_type SHARED)\n    else()\n      set(draco_lib_type STATIC)\n    endif()\n    draco_add_library(\n      NAME draco\n      OUTPUT_NAME draco\n      TYPE ${draco_lib_type}\n      DEFINES ${draco_defines}\n      INCLUDES ${draco_include_paths}\n      OBJLIB_DEPS ${draco_object_library_deps}\n      LIB_DEPS ${draco_lib_deps})\n    add_library(draco::draco ALIAS draco)\n\n  else()\n    draco_add_library(\n      NAME draco_static\n      OUTPUT_NAME draco\n      TYPE STATIC\n      DEFINES ${draco_defines}\n      INCLUDES ${draco_include_paths}\n      OBJLIB_DEPS ${draco_object_library_deps}\n      LIB_DEPS ${draco_lib_deps})\n\n    if(BUILD_SHARED_LIBS)\n      draco_add_library(\n        NAME draco_shared\n        SOURCES \"${draco_src_root}/core/draco_version.h\"\n        OUTPUT_NAME draco\n        TYPE SHARED\n        DEFINES ${draco_defines}\n        INCLUDES ${draco_include_paths}\n        LIB_DEPS draco_static)\n      add_library(draco::draco ALIAS draco_shared)\n      set_target_properties(draco_shared PROPERTIES EXPORT_NAME draco)\n    else()\n      add_library(draco::draco ALIAS draco_static)\n      set_target_properties(draco_static PROPERTIES EXPORT_NAME draco)\n    endif()\n  endif()\n\n  if(DRACO_UNITY_PLUGIN)\n    if(IOS)\n      set(unity_decoder_lib_type STATIC)\n    else()\n      set(unity_decoder_lib_type MODULE)\n    endif()\n\n    draco_add_library(\n      NAME draco_unity_plugin\n      TYPE OBJECT\n      SOURCES ${draco_unity_plug_sources}\n      DEFINES ${draco_defines}\n      INCLUDES ${draco_include_paths})\n\n    draco_add_library(\n      NAME dracodec_unity\n      TYPE ${unity_decoder_lib_type}\n      DEFINES ${draco_defines}\n      INCLUDES ${draco_include_paths}\n      OBJLIB_DEPS draco_unity_plugin\n      LIB_DEPS ${draco_plugin_dependency})\n\n    # For Mac, we need to build a .bundle for the unity plugin.\n    if(APPLE)\n      set_target_properties(dracodec_unity PROPERTIES BUNDLE true)\n    endif()\n  endif()\n\n  if(DRACO_MAYA_PLUGIN)\n    draco_add_library(\n      NAME draco_maya_plugin\n      TYPE OBJECT\n      SOURCES ${draco_maya_plug_sources}\n      DEFINES ${draco_defines}\n      INCLUDES ${draco_include_paths})\n\n    draco_add_library(\n      NAME draco_maya_wrapper\n      TYPE MODULE\n      DEFINES ${draco_defines}\n      INCLUDES ${draco_include_paths}\n      OBJLIB_DEPS draco_maya_plugin\n      LIB_DEPS ${draco_plugin_dependency})\n\n    # For Mac, we need to build a .bundle for the plugin.\n    if(APPLE)\n      set_target_properties(draco_maya_wrapper PROPERTIES BUNDLE true)\n    endif()\n  endif()\n\n  # Draco app targets.\n  draco_add_executable(\n    NAME draco_decoder\n    SOURCES \"${draco_src_root}/tools/draco_decoder.cc\" ${draco_io_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths}\n    LIB_DEPS ${draco_dependency})\n\n  draco_add_executable(\n    NAME draco_encoder\n    SOURCES \"${draco_src_root}/tools/draco_encoder.cc\" ${draco_io_sources}\n    DEFINES ${draco_defines}\n    INCLUDES ${draco_include_paths}\n    LIB_DEPS ${draco_dependency})\n\n  if(DRACO_TRANSCODER_SUPPORTED)\n    draco_add_executable(\n      NAME draco_transcoder\n      SOURCES \"${draco_src_root}/tools/draco_transcoder.cc\"\n              \"${draco_src_root}/tools/draco_transcoder_lib.cc\"\n              \"${draco_src_root}/tools/draco_transcoder_lib.h\"\n              ${draco_io_sources}\n      DEFINES ${draco_defines}\n      INCLUDES ${draco_include_paths}\n      LIB_DEPS ${draco_dependency})\n\n    if(DRACO_SIMPLIFIER_SUPPORTED)\n      draco_add_executable(\n        NAME draco_simplifier\n        SOURCES ${draco_pipeline_proto_header}\n                \"${draco_src_root}/tools/draco_simplifier.cc\"\n                \"${draco_src_root}/tools/draco_simplifier_lib.cc\"\n                \"${draco_src_root}/tools/draco_simplifier_lib.h\"\n                ${draco_io_sources}\n        DEFINES ${draco_defines}\n        INCLUDES ${draco_include_paths}\n        LIB_DEPS ${draco_dependency})\n    endif()\n  endif()\n\n  draco_setup_install_target()\n  draco_setup_test_targets()\nendif()\n\nif(DRACO_VERBOSE)\n  draco_dump_cmake_flag_variables()\n  draco_dump_tracked_configuration_variables()\n  draco_dump_options()\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.541015625,
          "content": "Want to contribute? Great! First, read this page (including the small print at the end).\n\n### Before you contribute\nBefore we can use your code, you must sign the\n[Google Individual Contributor License Agreement](https://cla.developers.google.com/about/google-individual)\n(CLA), which you can do online. The CLA is necessary mainly because you own the\ncopyright to your changes, even after your contribution becomes part of our\ncodebase, so we need your permission to use and distribute your code. We also\nneed to be sure of various other things—for instance that you'll tell us if you\nknow that your code infringes on other people's patents. You don't have to sign\nthe CLA until after you've submitted your code for review and a member has\napproved it, but you must do it before we can put your code into our codebase.\nBefore you start working on a larger contribution, you should get in touch with\nus first through the issue tracker with your idea so that we can help out and\npossibly guide you. Coordinating up front makes it much easier to avoid\nfrustration later on.\n\n### Code reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose.\nPlease make sure that your code conforms with our\n[coding style guidelines](https://google.github.io/styleguide/cppguide.html).\n\n### The small print\nContributions made by corporations are covered by a different agreement than\nthe one above, the\n[Software Grant and Corporate Contributor License Agreement](https://cla.developers.google.com/about/google-corporate).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 13.572265625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n--------------------------------------------------------------------------------\nFiles: docs/assets/js/ASCIIMathML.js\n\nCopyright (c) 2014 Peter Jipsen and other ASCIIMathML.js contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n--------------------------------------------------------------------------------\nFiles: docs/assets/css/pygments/*\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 24.3359375,
          "content": "<p align=\"center\">\n<img width=\"350px\" src=\"docs/artwork/draco3d-vert.svg\" />\n</p>\n\n[![draco-ci](https://github.com/google/draco/workflows/draco-ci/badge.svg?branch=main)](https://github.com/google/draco/actions/workflows/ci.yml)\n\nNews\n=======\n\nAttention GStatic users: the Draco team strongly recommends using the versioned\nURLs for accessing Draco GStatic content. If you are using the URLs that include\nthe `v1/decoders` substring within the URL, edge caching and GStatic propagation\ndelays can result in transient errors that can be difficult to diagnose when\nnew Draco releases are launched. To avoid the issue pin your sites to a\nversioned release.\n\n### Version 1.5.7 release:\n* Using the versioned www.gstatic.com WASM and Javascript decoders continues\n  to be recommended. To use v1.5.7, use this URL:\n  * https://www.gstatic.com/draco/versioned/decoders/1.5.7/*\n* Added support for normalized attributes to Emscripten encoder API.\n* Bug fixes.\n* Security fixes.\n\n### Version 1.5.6 release:\n* Using the versioned www.gstatic.com WASM and Javascript decoders continues\n  to be recommended. To use v1.5.6, use this URL:\n  * https://www.gstatic.com/draco/versioned/decoders/1.5.6/*\n* The CMake flag DRACO_DEBUG_MSVC_WARNINGS has been replaced with\n  DRACO_DEBUG_COMPILER_WARNINGS, and the behavior has changed. It is now a\n  boolean flag defined in draco_options.cmake.\n* Bug fixes.\n* Security fixes.\n\n### Version 1.5.5 release:\n* Using the versioned www.gstatic.com WASM and Javascript decoders continues\n  to be recommended. To use v1.5.5, use this URL:\n  * https://www.gstatic.com/draco/versioned/decoders/1.5.5/*\n* Bug fix: https://github.com/google/draco/issues/935\n\n### Version 1.5.4 release:\n* Using the versioned www.gstatic.com WASM and Javascript decoders continues\n  to be recommended. To use v1.5.4, use this URL:\n  * https://www.gstatic.com/draco/versioned/decoders/1.5.4/*\n* Added partial support for glTF extensions EXT_mesh_features and\n  EXT_structural_metadata.\n* Bug fixes.\n* Security fixes.\n\n### Version 1.5.3 release:\n* Using the versioned www.gstatic.com WASM and Javascript decoders continues\n  to be recommended. To use v1.5.3, use this URL:\n  * https://www.gstatic.com/draco/versioned/decoders/1.5.3/*\n* Bug fixes.\n\n### Version 1.5.2 release\n* This is the same as v1.5.1 with the following two bug fixes:\n  * Fixes DRACO_TRANSCODER_SUPPORTED enabled builds.\n  * ABI version updated.\n\n### Version 1.5.1 release\n* Adds assertion enabled Emscripten builds to the release, and a subset of the\n  assertion enabled builds to GStatic. See the file listing below.\n* Custom paths to third party dependencies are now supported. See BUILDING.md\n  for more information.\n* The CMake configuration file draco-config.cmake is now tested and known to\n  work for using Draco in Linux, MacOS, and Windows CMake projects. See the\n  `install_test` subdirectory of `src/draco/tools` for more information.\n* Bug fixes.\n\n### Version 1.5.0 release\n* Adds the draco_transcoder tool. See the section below on the glTF transcoding\n  tool, and BUILDING.md for build and dependency information.\n* Some changes to configuration variables have been made for this release:\n  - The DRACO_GLTF flag has been renamed to DRACO_GLTF_BITSTREAM to help\n    increase understanding of its purpose, which is to limit Draco features to\n    those included in the Draco glTF specification.\n  - Variables exported in CMake via draco-config.cmake and find-draco.cmake\n    (formerly FindDraco.cmake) have been renamed. It's unlikely that this\n    impacts any existing projects as the aforementioned files were not formed\n    correctly. See [PR775](https://github.com/google/draco/pull/775) for full\n    details of the changes.\n* A CMake version file has been added.\n* The CMake install target now uses absolute paths direct from CMake instead\n  of building them using CMAKE_INSTALL_PREFIX. This was done to make Draco\n  easier to use for downstream packagers and should have little to no impact on\n  users picking up Draco from source.\n* Certain MSVC warnings have had their levels changed via compiler flag to\n  reduce the amount of noise output by the MSVC compilers. Set MSVC warning\n  level to 4, or define DRACO_DEBUG_MSVC_WARNINGS at CMake configuration time\n  to restore previous behavior.\n* Bug fixes.\n\n### Version 1.4.3 release\n* Using the versioned www.gstatic.com WASM and Javascript decoders continues\n  to be recommended. To use v1.4.3, use this URL:\n  * https://www.gstatic.com/draco/versioned/decoders/1.4.3/*\n* Bug fixes\n\n### Version 1.4.1 release\n* Using the versioned www.gstatic.com WASM and Javascript decoders is now\n  recommended. To use v1.4.1, use this URL:\n  * https://www.gstatic.com/draco/versioned/decoders/1.4.1/*\n    * Replace the * with the files to load. E.g.\n    * https://www.gstatic.com/draco/versioned/decoders/1.4.1/draco_decoder.js\n  * This works with the v1.3.6 and v1.4.0 releases, and will work with future\n    Draco releases.\n* Bug fixes\n\n### Version 1.4.0 release\n* WASM and JavaScript decoders are hosted from a static URL.\n  * It is recommended to always pull your Draco WASM and JavaScript decoders from this URL:\n  * https://www.gstatic.com/draco/v1/decoders/*\n    * Replace * with the files to load. E.g.\n    * https://www.gstatic.com/draco/v1/decoders/draco_decoder_gltf.wasm\n  * Users will benefit from having the Draco decoder in cache as more sites start using the static URL\n* Changed npm modules to use WASM, which increased performance by ~200%.\n* Updated Emscripten to 2.0.\n  * This causes the Draco codec modules to return a promise instead of the module directly.\n  * Please see the example code on how to handle the promise.\n* Changed NORMAL quantization default to 8.\n* Added new array API to decoder and deprecated DecoderBuffer.\n  * See PR https://github.com/google/draco/issues/513 for more information.\n* Changed WASM/JavaScript behavior of catching exceptions.\n  * See issue https://github.com/google/draco/issues/629 for more information.\n* Code cleanup.\n* Emscripten builds now disable NODEJS_CATCH_EXIT and NODEJS_CATCH_REJECTION.\n  * Authors of a CLI tool might want to add their own error handlers.\n* Added Maya plugin builds.\n* Unity plugin builds updated.\n  * Builds are now stored as archives.\n  * Added iOS build.\n  * Unity users may want to look into https://github.com/atteneder/DracoUnity.\n* Bug fixes.\n\n### Version 1.3.6 release\n* WASM and JavaScript decoders are now hosted from a static URL\n  * It is recommended to always pull your Draco WASM and JavaScript decoders from this URL:\n  * https://www.gstatic.com/draco/v1/decoders/*\n    * Replace * with the files to load. E.g.\n    * https://www.gstatic.com/draco/v1/decoders/draco_decoder_gltf.wasm\n  * Users will benefit from having the Draco decoder in cache as more sites start using the static URL\n* Changed web examples to pull Draco decoders from static URL\n* Added new API to Draco WASM decoder, which increased performance by ~15%\n* Decreased Draco WASM decoder size by ~20%\n* Added support for generic and multiple attributes to Draco Unity plug-ins\n* Added new API to Draco Unity, which increased decoder performance by ~15%\n* Changed quantization defaults:\n  * POSITION: 11\n  * NORMAL: 7\n  * TEX_COORD: 10\n  * COLOR: 8\n  * GENERIC: 8\n* Code cleanup\n* Bug fixes\n\n### Version 1.3.5 release\n* Added option to build Draco for Universal Scene Description\n* Code cleanup\n* Bug fixes\n\n### Version 1.3.4 release\n* Released Draco Animation code\n* Fixes for Unity\n* Various file location and name changes\n\n### Version 1.3.3 release\n* Added ExpertEncoder to the Javascript API\n  * Allows developers to set quantization options per attribute id\n* Bug fixes\n\n### Version 1.3.2 release\n* Bug fixes\n\n### Version 1.3.1 release\n* Fix issue with multiple attributes when skipping an attribute transform\n\n### Version 1.3.0 release\n* Improved kD-tree based point cloud encoding\n  * Now applicable to point clouds with any number of attributes\n  * Support for all integer attribute types and quantized floating point types\n* Improved mesh compression up to 10% (on average ~2%)\n  * For meshes, the 1.3.0 bitstream is fully compatible with 1.2.x decoders\n* Improved Javascript API\n  * Added support for all signed and unsigned integer types\n  * Added support for point clouds to our Javascript encoder API\n* Added support for integer properties to the PLY decoder\n* Bug fixes\n\n### Previous releases\nhttps://github.com/google/draco/releases\n\nDescription\n===========\n\nDraco is a library for compressing and decompressing 3D geometric [meshes] and\n[point clouds]. It is intended to improve the storage and transmission of 3D\ngraphics.\n\nDraco was designed and built for compression efficiency and speed. The code\nsupports compressing points, connectivity information, texture coordinates,\ncolor information, normals, and any other generic attributes associated with\ngeometry. With Draco, applications using 3D graphics can be significantly\nsmaller without compromising visual fidelity. For users, this means apps can\nnow be downloaded faster, 3D graphics in the browser can load quicker, and VR\nand AR scenes can now be transmitted with a fraction of the bandwidth and\nrendered quickly.\n\nDraco is released as C++ source code that can be used to compress 3D graphics\nas well as C++ and Javascript decoders for the encoded data.\n\n\n_**Contents**_\n\n  * [Building](#building)\n  * [Usage](#usage)\n    * [Unity](#unity)\n    * [WASM and JavaScript Decoders](#WASM-and-JavaScript-Decoders)\n    * [Command Line Applications](#command-line-applications)\n    * [Encoding Tool](#encoding-tool)\n    * [Encoding Point Clouds](#encoding-point-clouds)\n    * [Decoding Tool](#decoding-tool)\n    * [glTF Transcoding Tool](#gltf-transcoding-tool)\n    * [C++ Decoder API](#c-decoder-api)\n    * [Javascript Encoder API](#javascript-encoder-api)\n    * [Javascript Decoder API](#javascript-decoder-api)\n    * [Javascript Decoder Performance](#javascript-decoder-performance)\n    * [Metadata API](#metadata-api)\n    * [NPM Package](#npm-package)\n    * [three.js Renderer Example](#threejs-renderer-example)\n  * [GStatic Javascript Builds](#gstatic-javascript-builds)\n  * [Support](#support)\n  * [License](#license)\n  * [References](#references)\n\n\nBuilding\n========\nSee [BUILDING](BUILDING.md) for building instructions.\n\n\nUsage\n======\n\nUnity\n-----\nFor the best information about using Unity with Draco please visit https://github.com/atteneder/DracoUnity\n\nFor a simple example of using Unity with Draco see [README](unity/README.md) in the unity folder.\n\nWASM and JavaScript Decoders\n----------------------------\n\nIt is recommended to always pull your Draco WASM and JavaScript decoders from:\n\n~~~~~ bash\nhttps://www.gstatic.com/draco/v1/decoders/\n~~~~~\n\nUsers will benefit from having the Draco decoder in cache as more sites start using the static URL.\n\nCommand Line Applications\n------------------------\n\nThe default target created from the build files will be the `draco_encoder`\nand `draco_decoder` command line applications. Additionally, `draco_transcoder`\nis generated when CMake is run with the DRACO_TRANSCODER_SUPPORTED variable set\nto ON (see [BUILDING](BUILDING.md#transcoder) for more details). For all\napplications, if you run them without any arguments or `-h`, the applications\nwill output usage and options.\n\nEncoding Tool\n-------------\n\n`draco_encoder` will read OBJ, STL or PLY files as input, and output\nDraco-encoded files. We have included Stanford's [Bunny] mesh for testing. The\nbasic command line looks like this:\n\n~~~~~ bash\n./draco_encoder -i testdata/bun_zipper.ply -o out.drc\n~~~~~\n\nA value of `0` for the quantization parameter will not perform any quantization\non the specified attribute. Any value other than `0` will quantize the input\nvalues for the specified attribute to that number of bits. For example:\n\n~~~~~ bash\n./draco_encoder -i testdata/bun_zipper.ply -o out.drc -qp 14\n~~~~~\n\nwill quantize the positions to 14 bits (default is 11 for the position\ncoordinates).\n\nIn general, the more you quantize your attributes the better compression rate\nyou will get. It is up to your project to decide how much deviation it will\ntolerate. In general, most projects can set quantization values of about `11`\nwithout any noticeable difference in quality.\n\nThe compression level (`-cl`) parameter turns on/off different compression\nfeatures.\n\n~~~~~ bash\n./draco_encoder -i testdata/bun_zipper.ply -o out.drc -cl 8\n~~~~~\n\nIn general, the highest setting, `10`, will have the most compression but\nworst decompression speed. `0` will have the least compression, but best\ndecompression speed. The default setting is `7`.\n\nEncoding Point Clouds\n---------------------\n\nYou can encode point cloud data with `draco_encoder` by specifying the\n`-point_cloud` parameter. If you specify the `-point_cloud` parameter with a\nmesh input file, `draco_encoder` will ignore the connectivity data and encode\nthe positions from the mesh file.\n\n~~~~~ bash\n./draco_encoder -point_cloud -i testdata/bun_zipper.ply -o out.drc\n~~~~~\n\nThis command line will encode the mesh input as a point cloud, even though the\ninput might not produce compression that is representative of other point\nclouds. Specifically, one can expect much better compression rates for larger\nand denser point clouds.\n\nDecoding Tool\n-------------\n\n`draco_decoder` will read Draco files as input, and output OBJ, STL or PLY\nfiles. The basic command line looks like this:\n\n~~~~~ bash\n./draco_decoder -i in.drc -o out.obj\n~~~~~\n\nglTF Transcoding Tool\n---------------------\n\n`draco_transcoder` can be used to add Draco compression to glTF assets. The\nbasic command line looks like this:\n\n~~~~~ bash\n./draco_transcoder -i in.glb -o out.glb\n~~~~~\n\nThis command line will add geometry compression to all meshes in the `in.glb`\nfile. Quantization values for different glTF attributes can be specified\nsimilarly to the `draco_encoder` tool. For example `-qp` can be used to define\nquantization of the position attribute:\n\n~~~~~ bash\n./draco_transcoder -i in.glb -o out.glb -qp 12\n~~~~~\n\nC++ Decoder API\n---------------\n\nIf you'd like to add decoding to your applications you will need to include\nthe `draco_dec` library. In order to use the Draco decoder you need to\ninitialize a `DecoderBuffer` with the compressed data. Then call\n`DecodeMeshFromBuffer()` to return a decoded mesh object or call\n`DecodePointCloudFromBuffer()` to return a decoded `PointCloud` object. For\nexample:\n\n~~~~~ cpp\ndraco::DecoderBuffer buffer;\nbuffer.Init(data.data(), data.size());\n\nconst draco::EncodedGeometryType geom_type =\n    draco::GetEncodedGeometryType(&buffer);\nif (geom_type == draco::TRIANGULAR_MESH) {\n  unique_ptr<draco::Mesh> mesh = draco::DecodeMeshFromBuffer(&buffer);\n} else if (geom_type == draco::POINT_CLOUD) {\n  unique_ptr<draco::PointCloud> pc = draco::DecodePointCloudFromBuffer(&buffer);\n}\n~~~~~\n\nPlease see [src/draco/mesh/mesh.h](src/draco/mesh/mesh.h) for the full `Mesh` class interface and\n[src/draco/point_cloud/point_cloud.h](src/draco/point_cloud/point_cloud.h) for the full `PointCloud` class interface.\n\n\nJavascript Encoder API\n----------------------\nThe Javascript encoder is located in `javascript/draco_encoder.js`. The encoder\nAPI can be used to compress mesh and point cloud. In order to use the encoder,\nyou need to first create an instance of `DracoEncoderModule`. Then use this\ninstance to create `MeshBuilder` and `Encoder` objects. `MeshBuilder` is used\nto construct a mesh from geometry data that could be later compressed by\n`Encoder`. First create a mesh object using `new encoderModule.Mesh()` . Then,\nuse `AddFacesToMesh()` to add indices to the mesh and use\n`AddFloatAttributeToMesh()` to add attribute data to the mesh, e.g. position,\nnormal, color and texture coordinates. After a mesh is constructed, you could\nthen use `EncodeMeshToDracoBuffer()` to compress the mesh. For example:\n\n~~~~~ js\nconst mesh = {\n  indices : new Uint32Array(indices),\n  vertices : new Float32Array(vertices),\n  normals : new Float32Array(normals)\n};\n\nconst encoderModule = DracoEncoderModule();\nconst encoder = new encoderModule.Encoder();\nconst meshBuilder = new encoderModule.MeshBuilder();\nconst dracoMesh = new encoderModule.Mesh();\n\nconst numFaces = mesh.indices.length / 3;\nconst numPoints = mesh.vertices.length;\nmeshBuilder.AddFacesToMesh(dracoMesh, numFaces, mesh.indices);\n\nmeshBuilder.AddFloatAttributeToMesh(dracoMesh, encoderModule.POSITION,\n  numPoints, 3, mesh.vertices);\nif (mesh.hasOwnProperty('normals')) {\n  meshBuilder.AddFloatAttributeToMesh(\n    dracoMesh, encoderModule.NORMAL, numPoints, 3, mesh.normals);\n}\nif (mesh.hasOwnProperty('colors')) {\n  meshBuilder.AddFloatAttributeToMesh(\n    dracoMesh, encoderModule.COLOR, numPoints, 3, mesh.colors);\n}\nif (mesh.hasOwnProperty('texcoords')) {\n  meshBuilder.AddFloatAttributeToMesh(\n    dracoMesh, encoderModule.TEX_COORD, numPoints, 3, mesh.texcoords);\n}\n\nif (method === \"edgebreaker\") {\n  encoder.SetEncodingMethod(encoderModule.MESH_EDGEBREAKER_ENCODING);\n} else if (method === \"sequential\") {\n  encoder.SetEncodingMethod(encoderModule.MESH_SEQUENTIAL_ENCODING);\n}\n\nconst encodedData = new encoderModule.DracoInt8Array();\n// Use default encoding setting.\nconst encodedLen = encoder.EncodeMeshToDracoBuffer(dracoMesh,\n                                                   encodedData);\nencoderModule.destroy(dracoMesh);\nencoderModule.destroy(encoder);\nencoderModule.destroy(meshBuilder);\n\n~~~~~\nPlease see [src/draco/javascript/emscripten/draco_web_encoder.idl](src/draco/javascript/emscripten/draco_web_encoder.idl) for the full API.\n\nJavascript Decoder API\n----------------------\n\nThe Javascript decoder is located in [javascript/draco_decoder.js](javascript/draco_decoder.js). The\nJavascript decoder can decode mesh and point cloud. In order to use the\ndecoder, you must first create an instance of `DracoDecoderModule`. The\ninstance is then used to create `DecoderBuffer` and `Decoder` objects. Set\nthe encoded data in the `DecoderBuffer`. Then call `GetEncodedGeometryType()`\nto identify the type of geometry, e.g. mesh or point cloud. Then call either\n`DecodeBufferToMesh()` or `DecodeBufferToPointCloud()`, which will return\na Mesh object or a point cloud. For example:\n\n~~~~~ js\n// Create the Draco decoder.\nconst decoderModule = DracoDecoderModule();\nconst buffer = new decoderModule.DecoderBuffer();\nbuffer.Init(byteArray, byteArray.length);\n\n// Create a buffer to hold the encoded data.\nconst decoder = new decoderModule.Decoder();\nconst geometryType = decoder.GetEncodedGeometryType(buffer);\n\n// Decode the encoded geometry.\nlet outputGeometry;\nlet status;\nif (geometryType == decoderModule.TRIANGULAR_MESH) {\n  outputGeometry = new decoderModule.Mesh();\n  status = decoder.DecodeBufferToMesh(buffer, outputGeometry);\n} else {\n  outputGeometry = new decoderModule.PointCloud();\n  status = decoder.DecodeBufferToPointCloud(buffer, outputGeometry);\n}\n\n// You must explicitly delete objects created from the DracoDecoderModule\n// or Decoder.\ndecoderModule.destroy(outputGeometry);\ndecoderModule.destroy(decoder);\ndecoderModule.destroy(buffer);\n~~~~~\n\nPlease see [src/draco/javascript/emscripten/draco_web_decoder.idl](src/draco/javascript/emscripten/draco_web_decoder.idl) for the full API.\n\nJavascript Decoder Performance\n------------------------------\n\nThe Javascript decoder is built with dynamic memory. This will let the decoder\nwork with all of the compressed data. But this option is not the fastest.\nPre-allocating the memory sees about a 2x decoder speed improvement. If you\nknow all of your project's memory requirements, you can turn on static memory\nby changing `CMakeLists.txt` accordingly.\n\nMetadata API\n------------\nStarting from v1.0, Draco provides metadata functionality for encoding data\nother than geometry. It could be used to encode any custom data along with the\ngeometry. For example, we can enable metadata functionality to encode the name\nof attributes, name of sub-objects and customized information.\nFor one mesh and point cloud, it can have one top-level geometry metadata class.\nThe top-level metadata then can have hierarchical metadata. Other than that,\nthe top-level metadata can have metadata for each attribute which is called\nattribute metadata. The attribute metadata should be initialized with the\ncorrespondent attribute id within the mesh. The metadata API is provided both\nin C++ and Javascript.\nFor example, to add metadata in C++:\n\n~~~~~ cpp\ndraco::PointCloud pc;\n// Add metadata for the geometry.\nstd::unique_ptr<draco::GeometryMetadata> metadata =\n  std::unique_ptr<draco::GeometryMetadata>(new draco::GeometryMetadata());\nmetadata->AddEntryString(\"description\", \"This is an example.\");\npc.AddMetadata(std::move(metadata));\n\n// Add metadata for attributes.\ndraco::GeometryAttribute pos_att;\npos_att.Init(draco::GeometryAttribute::POSITION, nullptr, 3,\n             draco::DT_FLOAT32, false, 12, 0);\nconst uint32_t pos_att_id = pc.AddAttribute(pos_att, false, 0);\n\nstd::unique_ptr<draco::AttributeMetadata> pos_metadata =\n    std::unique_ptr<draco::AttributeMetadata>(\n        new draco::AttributeMetadata(pos_att_id));\npos_metadata->AddEntryString(\"name\", \"position\");\n\n// Directly add attribute metadata to geometry.\n// You can do this without explicitly add |GeometryMetadata| to mesh.\npc.AddAttributeMetadata(pos_att_id, std::move(pos_metadata));\n~~~~~\n\nTo read metadata from a geometry in C++:\n\n~~~~~ cpp\n// Get metadata for the geometry.\nconst draco::GeometryMetadata *pc_metadata = pc.GetMetadata();\n\n// Request metadata for a specific attribute.\nconst draco::AttributeMetadata *requested_pos_metadata =\n  pc.GetAttributeMetadataByStringEntry(\"name\", \"position\");\n~~~~~\n\nPlease see [src/draco/metadata](src/draco/metadata) and [src/draco/point_cloud](src/draco/point_cloud) for the full API.\n\nNPM Package\n-----------\nDraco NPM NodeJS package is located in [javascript/npm/draco3d](javascript/npm/draco3d). Please see the\ndoc in the folder for detailed usage.\n\nthree.js Renderer Example\n-------------------------\n\nHere's an [example] of a geometric compressed with Draco loaded via a\nJavascript decoder using the `three.js` renderer.\n\nPlease see the [javascript/example/README.md](javascript/example/README.md) file for more information.\n\nGStatic Javascript Builds\n=========================\n\nPrebuilt versions of the Emscripten-built Draco javascript decoders are hosted\non www.gstatic.com in version labeled directories:\n\nhttps://www.gstatic.com/draco/versioned/decoders/VERSION/*\n\nAs of the v1.4.3 release the files available are:\n\n- [draco_decoder.js](https://www.gstatic.com/draco/versioned/decoders/1.4.3/draco_decoder.js)\n- [draco_decoder.wasm](https://www.gstatic.com/draco/versioned/decoders/1.4.3/draco_decoder.wasm)\n- [draco_decoder_gltf.js](https://www.gstatic.com/draco/versioned/decoders/1.4.3/draco_decoder_gltf.js)\n- [draco_decoder_gltf.wasm](https://www.gstatic.com/draco/versioned/decoders/1.4.3/draco_decoder_gltf.wasm)\n- [draco_wasm_wrapper.js](https://www.gstatic.com/draco/versioned/decoders/1.4.3/draco_wasm_wrapper.js)\n- [draco_wasm_wrapper_gltf.js](https://www.gstatic.com/draco/versioned/decoders/1.4.3/draco_wasm_wrapper_gltf.js)\n\nBeginning with the v1.5.1 release assertion enabled builds of the following\nfiles are available:\n\n- [draco_decoder.js](https://www.gstatic.com/draco/versioned/decoders/1.5.1/with_asserts/draco_decoder.js)\n- [draco_decoder.wasm](https://www.gstatic.com/draco/versioned/decoders/1.5.1/with_asserts/draco_decoder.wasm)\n- [draco_wasm_wrapper.js](https://www.gstatic.com/draco/versioned/decoders/1.5.1/with_asserts/draco_wasm_wrapper.js)\n\nSupport\n=======\n\nFor questions/comments please email <draco-3d-discuss@googlegroups.com>\n\nIf you have found an error in this library, please file an issue at\n<https://github.com/google/draco/issues>\n\nPatches are encouraged, and may be submitted by forking this project and\nsubmitting a pull request through GitHub. See [CONTRIBUTING] for more detail.\n\nLicense\n=======\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not\nuse this file except in compliance with the License. You may obtain a copy of\nthe License at\n\n<http://www.apache.org/licenses/LICENSE-2.0>\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\nLicense for the specific language governing permissions and limitations under\nthe License.\n\nReferences\n==========\n[example]:https://storage.googleapis.com/demos.webmproject.org/draco/draco_loader_throw.html\n[meshes]: https://en.wikipedia.org/wiki/Polygon_mesh\n[point clouds]: https://en.wikipedia.org/wiki/Point_cloud\n[Bunny]: https://graphics.stanford.edu/data/3Dscanrep/\n[CONTRIBUTING]: https://raw.githubusercontent.com/google/draco/main/CONTRIBUTING.md\n\nBunny model from Stanford's graphic department <https://graphics.stanford.edu/data/3Dscanrep/>\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "javascript",
          "type": "tree",
          "content": null
        },
        {
          "name": "maya",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "unity",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}