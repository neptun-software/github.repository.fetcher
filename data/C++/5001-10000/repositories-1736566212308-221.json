{
  "metadata": {
    "timestamp": 1736566212308,
    "page": 221,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ledger/ledger",
      "stars": 5430,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 1.0224609375,
          "content": ";;; Directory Local Variables\n;;; For more information see (info \"(emacs) Directory Variables\")\n\n((nil\n  (tab-width . 2)\n  (sentence-end-double-space . t)\n  (bug-reference-url-format . \"https://github.com/ledger/ledger/issues/%s\"))\n (c-mode\n  (c-file-style . \"ledger\")\n  (c-style-alist\n   (\"ledger\"\n    (indent-tabs-mode)\n    (c-basic-offset . 2)\n    (c-comment-only-line-offset 0 . 0)\n    (c-hanging-braces-alist\n     (substatement-open before after)\n     (arglist-cont-nonempty))\n    (c-offsets-alist\n     (statement-block-intro . +)\n     (knr-argdecl-intro . 5)\n     (substatement-open . 0)\n     (substatement-label . 0)\n     (label . 0)\n     (case-label . 0)\n     (statement-case-open . 0)\n     (statement-cont . +)\n     (arglist-intro . +)\n     (arglist-close . +)\n     (inline-open . 0)\n     (brace-list-open . 0)\n     (topmost-intro-cont first c-lineup-topmost-intro-cont c-lineup-gnu-DEFUN-intro-cont))\n    (c-special-indent-hook . c-gnu-impose-minimum)\n    (c-block-comment-prefix . \"\"))))\n (emacs-lisp-mode\n  (indent-tabs-mode . nil)))\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.7021484375,
          "content": "*.[oa]\n*.so\n*.so.*\n*.dylib\n*.backup\n*.elc\n*.gcov\n*.l[oa]\n*.pyc\n*.sw[p-z]\n*~\n.timestamp\n*.tar.bz2\n*.tar.gz\n.deps/\n.libs/\nABOUT-NLS\nMakefile\nMakefile.am\nMakefile.in\nTAGS\nacconf.h.in\naclocal.m4\nautogen.sh\nautom4te.cache/\nconfig.guess\nconfig.h\nconfig.h.in\nconfig.log\nconfig.rpath\nconfig.status\nconfig.sub\nconfigure\nconfigure.ac\ndepcomp\ndoc/Doxyfile\ndoc/*.aux\ndoc/*.cp\ndoc/*.cps\ndoc/*.fn\ndoc/*.fns\ndoc/*.html\ndoc/*.info\ndoc/*.info-*\ndoc/*.ky\ndoc/*.kys\ndoc/*.log\ndoc/*.pdf\ndoc/*.pg\ndoc/*.toc\ndoc/*.tp\ndoc/*.vr\ndoc/*.vrs\ndoc/.dirstamp\ndoc/html/\ndoc/latex/\ndoc/refman.pdf\ndoc/report/\ndoc/version.texi\ninstall-sh\nintl/\nledger\nlibtool\nltmain.sh\nm4/\nmake.sh\nmissing\nmkinstalldirs\npo/\npy-compile\nshave\nshave-libtool\nstamp-h1\ntexinfo.tex\ntmpcvs*/\ntmpwrk*/\ndist/win/vc9/Debug/\ndist/win/vc9/gen-mpir.exe\ndist/win/vc9/gen-mpir.ilk\ndist/win/vc9/gen-mpir.pdb\ndist/win/vc9/ledger.ncb\ndist/win/vc9/ledger.vcproj.*.user\ndist/win/vc9/ledger.suo\ndist/win/vc9/lib/Win32/Debug/\nsrc/TAGS\nCMakeCache.txt\nCPackConfig.cmake\nCPackSourceConfig.cmake\nCMakeFiles/\nCTestTestfile.cmake\n_CPack_Packages/\ncmake_install.cmake\ninstall_manifest.txt\nsystem.hh\nsystem.hh.[gp]ch*\nLedger*.dmg\nLedger*.sh\n# Files that generated by running ./demo.sh in contrib/non-profit-audit-reports\ncontrib/non-profit-audit-reports/tests/chart-of-accounts.txt\ncontrib/non-profit-audit-reports/tests/general-ledger.csv\ncontrib/non-profit-audit-reports/tests/general-ledger.ods\ncontrib/non-profit-audit-reports/tests/general-ledger.txt\ncontrib/non-profit-audit-reports/tests/MANIFEST\ncontrib/non-profit-audit-reports/general-ledger.zip\n/wiki/\n.ninja_deps\n.ninja_log\nbuild.ninja\nrules.ninja\ntest/Testing\n/MathTests\n/UtilTests\n# Files generated when building / developing via Nix\n/result*\n*/build\n/outputs\n"
        },
        {
          "name": ".yamllint",
          "type": "blob",
          "size": 0.072265625,
          "content": "extends: default\n\nrules:\n  document-start: disable\n  line-length: disable\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.7333984375,
          "content": "set(Required_CMake_Version 3.16.2)\nset(Required_Boost_Version 1.72)\nset(Required_Gmp_Version 6.1.2)\nset(Required_Mpfr_Version 4.0.2)\nset(Required_Icu_Version 63)\nset(Required_Python_Version 3.9)\nset(Required_Gpgmepp_Version 1.13.1)\n\ncmake_minimum_required(VERSION ${Required_CMake_Version})\n\noption(CMAKE_BUILD_TYPE \"CMake Build type\" \"Release\")\nif (BUILD_DEBUG)\n  message(DEPRECATION \"BUILD_DEBUG is deprecated! Set CMAKE_BUILD_TYPE to Debug instead!\")\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE STRING \"CMake Build type\" FORCE)\n  unset(BUILD_DEBUG CACHE)\nendif()\n\nPROJECT(ledger)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/doc\")\ninclude(LedgerVersion)\n\n# Point CMake at any custom modules we may ship\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake\")\n\nset(Ledger_TEST_TIMEZONE \"America/Chicago\")\n\nenable_testing()\n\nadd_compile_definitions(BOOST_FILESYSTEM_NO_DEPRECATED)\nset(CMAKE_CXX_STANDARD 17 CACHE STRING \"C++ standard\")\nif (CYGWIN)\n  add_compile_options(-U__STRICT_ANSI__)\nendif()\n\n########################################################################\n\noption(USE_PYTHON \"Build support for the Python scripting bridge\" OFF)\noption(USE_DOXYGEN \"Build reference documentation using Doxygen\" OFF)\n\noption(DISABLE_ASSERTS \"Build without any internal consistency checks\" OFF)\noption(BUILD_DEBUG \"Build support for runtime debugging\" OFF)\noption(PRECOMPILE_SYSTEM_HH \"Precompile system.hh\" ON)\n\noption(USE_GPGME \"Build with support for encrypted journals\" OFF)\noption(BUILD_LIBRARY \"Build and install Ledger as a library\" ON)\noption(BUILD_DOCS \"Build and install documentation\" OFF)\noption(BUILD_WEB_DOCS \"Build version of documentation suitable for viewing online\" OFF)\n\nif (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  set(DEBUG_MODE 1)\nelse()\n  set(DEBUG_MODE 0)\nendif()\n\nif (DISABLE_ASSERTS)\n  set(NO_ASSERTS 1)\nelse()\n  set(NO_ASSERTS 0)\nendif()\n\nif (CLANG_GCOV)\n  set(PROFILE_LIBS profile_rt)\n  set(CMAKE_REQUIRED_LIBRARIES ${PROFILE_LIBS})\nendif()\n\n########################################################################\n\nif (USE_PYTHON)\n  if (NOT BUILD_LIBRARY)\n    message(ERROR \"Building the python module requires BUILD_LIBRARY=ON.\")\n  endif()\n\n  find_package(Python\n    COMPONENTS Interpreter Development)\n  if (PYTHON_FOUND AND ${Python_VERSION} VERSION_GREATER_EQUAL ${Required_Python_Version})\n    set(BOOST_PYTHON \"python${Python_VERSION_MAJOR}${Python_VERSION_MINOR}\")\n    set(HAVE_BOOST_PYTHON 1)\n    include_directories(SYSTEM ${Python_INCLUDE_DIRS})\n  else()\n    set(HAVE_BOOST_PYTHON 0)\n    message(\"Could not find a Python library to use with Boost.Python\")\n  endif()\nelse()\n  set(HAVE_BOOST_PYTHON 0)\nendif()\n\n# Set BOOST_ROOT to help CMake to find the right Boost version\nfind_package(Boost ${Required_Boost_Version}\n  REQUIRED date_time filesystem system iostreams regex unit_test_framework\n  ${BOOST_PYTHON} OPTIONAL_COMPONENTS nowide\n  CONFIG)\n\n# enable Boost::nowide library (for UTF8 command line args on Windows)\nset(HAVE_BOOST_NOWIDE 0)\nif (Boost_NOWIDE_FOUND)\n  set(HAVE_BOOST_NOWIDE 1)\nendif()\n\ninclude_directories(SYSTEM ${Boost_INCLUDE_DIRS})\nlink_directories(${Boost_LIBRARY_DIRS})\n\n# Crypto\nif (USE_GPGME)\n  find_package(Gpgmepp ${Required_Gpgmepp_Version} REQUIRED)\n  set(HAVE_GPGME 1)\n  include_directories(SYSTEM ${Gpgmepp_INCLUDE_DIRS})\n  link_directories(${Gpgmepp_LIBRARY_DIRS})\nelse()\n  set(HAVE_GPGME 0)\nendif()\n\n########################################################################\n\ninclude(FindICU)\nfind_package(ICU ${Required_Icu_Version} OPTIONAL_COMPONENTS uc i18n)\n\ninclude(CheckIncludeFiles)\ninclude(CheckLibraryExists)\ninclude(CheckFunctionExists)\ninclude(CheckCSourceCompiles)\ninclude(CheckCXXSourceCompiles)\ninclude(CheckCXXSourceRuns)\ninclude(CMakePushCheckState)\n\ncheck_function_exists(getpwuid HAVE_GETPWUID)\ncheck_function_exists(getpwnam HAVE_GETPWNAM)\ncheck_function_exists(ioctl HAVE_IOCTL)\ncheck_function_exists(isatty HAVE_ISATTY)\n\ncheck_c_source_compiles(\"\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdio.h>\n\nint main() {\n  int status, pfd[2];\n  status = pipe(pfd);\n  status = fork();\n  if (status < 0) {\n    ;\n  } else if (status == 0) {\n    char *arg0 = NULL;\n\n    status = dup2(pfd[0], STDIN_FILENO);\n\n    close(pfd[1]);\n    close(pfd[0]);\n\n    execlp(\\\"\\\", arg0, (char *)0);\n    perror(\\\"execl\\\");\n    exit(1);\n  } else {\n    close(pfd[0]);\n  }\n  return 0;\n}\" UNIX_PIPES_COMPILES)\n\nif (UNIX_PIPES_COMPILES)\n  set(HAVE_UNIX_PIPES 1)\nelse()\n  set(HAVE_UNIX_PIPES 0)\nendif()\n\ncmake_push_check_state()\n\nset(CMAKE_REQUIRED_INCLUDES ${CMAKE_INCLUDE_PATH} ${Boost_INCLUDE_DIRS} ${ICUE_INCLUDE_DIRS})\nset(CMAKE_REQUIRED_LIBRARIES Boost::regex ${ICU_LIBRARIES} ${PROFILE_LIBS})\n\ncheck_cxx_source_runs(\"\n#include <boost/regex/icu.hpp>\n\nusing namespace boost;\n\nint main() {\n  std::string text = \\\"Активы\\\";\n  u32regex r = make_u32regex(\\\"активы\\\", regex::perl | regex::icase);\n  return u32regex_search(text, r) ? 0 : 1;\n}\" BOOST_REGEX_UNICODE_RUNS)\n\nif (BOOST_REGEX_UNICODE_RUNS)\n  set(HAVE_BOOST_REGEX_UNICODE 1)\nelse()\n  set(HAVE_BOOST_REGEX_UNICODE 0)\nendif()\n\ncmake_pop_check_state()\n\n########################################################################\n\ninclude_directories(${CMAKE_INCLUDE_PATH})\n\nmacro(find_opt_library_and_header _header_var _header _lib_var _lib _have_var)\n  if (${_have_var})\n    message(\"-- Looking for ${_header} in ${_lib}\")\n    find_path(${_header_var} ${_header})\n    if (NOT ${_header_var})\n      message(\"-- Looking for ${_header} in ${_lib} - not found\")\n      set(${_have_var} 0)\n    else()\n      find_library(${_lib_var} ${_lib})\n      if (NOT ${_lib_var})\n        message(\"-- Looking for ${_header} in ${_lib} - not found\")\n        set(${_have_var} 0)\n      else()\n        message(\"-- Looking for ${_header} in ${_lib} - found\")\n        include_directories(SYSTEM \"${${_header_var}}\")\n        set(${_have_var} 1)\n      endif()\n    endif()\n  else()\n    set(${_have_var} 0)\n  endif()\nendmacro(find_opt_library_and_header _header_var _header _lib_var _lib _have_var)\n\nmacro(find_req_library_and_header _header_var _header _lib_var _lib)\n  find_path(${_header_var} ${_header})\n  if (NOT ${_header_var})\n    message(SEND_ERROR \"Could not find ${_header} on your system\")\n  else()\n    include_directories(SYSTEM \"${${_header_var}}\")\n    find_library(${_lib_var} ${_lib})\n    if (NOT ${_lib_var})\n      message(SEND_ERROR \"Could not find library ${_lib} on your system\")\n    endif()\n  endif()\nendmacro(find_req_library_and_header _header_var _header _lib_var _lib)\n\nfind_req_library_and_header(GMP_PATH gmp.h GMP_LIB gmp)\nif (GMP_PATH AND EXISTS \"${GMP_PATH}/gmp.h\")\n  file(STRINGS \"${GMP_PATH}/gmp.h\" gmp_header_str REGEX \"^#define[\\t ]+__GNU_MP_VERSION(_MINOR|_PATCHLEVEL)?[\\t ]+[0-9]+\")\n  string(REGEX REPLACE \".*#define __GNU_MP_VERSION[\\t ]+([0-9]+).*\" \"\\\\1\" GMP_VERSION_MAJOR \"${gmp_header_str}\")\n  string(REGEX REPLACE \".*#define __GNU_MP_VERSION_MINOR[\\t ]+([0-9]+).*\" \"\\\\1\" GMP_VERSION_MINOR \"${gmp_header_str}\")\n  string(REGEX REPLACE \".*#define __GNU_MP_VERSION_PATCHLEVEL[\\t ]+([0-9]+).*\" \"\\\\1\" GMP_VERSION_PATCH \"${gmp_header_str}\")\n  unset(gmp_header_str)\n  set(GMP_VERSION_STRING \"${GMP_VERSION_MAJOR}.${GMP_VERSION_MINOR}.${GMP_VERSION_PATCH}\")\n  if (\"${GMP_VERSION_STRING}\" VERSION_LESS ${Required_Gmp_Version})\n    message(FATAL_ERROR \"Ledger requires GMP version ${Expected_Gmp_Version} or greater, but only GMP version ${GMP_VERSION_STRING} was found\")\n  endif()\nendif()\n\nfind_req_library_and_header(MPFR_PATH mpfr.h MPFR_LIB mpfr)\nif (MPFR_PATH AND EXISTS \"${MPFR_PATH}/mpfr.h\")\n  file(STRINGS \"${MPFR_PATH}/mpfr.h\" mpfr_header_str REGEX \"^#define[\\t ]+MPFR_VERSION_(MAJOR|MINOR|PATCHLEVEL)[\\t ]+[0-9]+\")\n  string(REGEX REPLACE \".*#define MPFR_VERSION_MAJOR[\\t ]+([0-9]+).*\" \"\\\\1\" MPFR_VERSION_MAJOR \"${mpfr_header_str}\")\n  string(REGEX REPLACE \".*#define MPFR_VERSION_MINOR[\\t ]+([0-9]+).*\" \"\\\\1\" MPFR_VERSION_MINOR \"${mpfr_header_str}\")\n  string(REGEX REPLACE \".*#define MPFR_VERSION_PATCHLEVEL[\\t ]+([0-9]+).*\" \"\\\\1\" MPFR_VERSION_PATCH \"${mpfr_header_str}\")\n  unset(mpfr_header_str)\n  set(MPFR_VERSION_STRING \"${MPFR_VERSION_MAJOR}.${MPFR_VERSION_MINOR}.${MPFR_VERSION_PATCH}\")\n  if (\"${MPFR_VERSION_STRING}\" VERSION_LESS ${Required_Mpfr_Version})\n    message(FATAL_ERROR \"Ledger requires MPFR version ${Expected_Mpfr_Version} or greater, but only MPFR version ${MPFR_VERSION_STRING} was found\")\n  endif()\nendif()\n\n\ncheck_library_exists(edit add_history \"\" HAVE_EDIT)\nfind_opt_library_and_header(EDIT_PATH editline/readline.h EDIT_LIB edit HAVE_EDIT)\nif (NOT HAVE_EDIT)\ncheck_library_exists(readline add_history \"\" HAVE_READLINE)\nfind_opt_library_and_header(READLINE_PATH readline/history.h READLINE_LIB readline HAVE_READLINE)\nendif (NOT HAVE_EDIT)\n\n\n#find_package(Gettext)           # Used for running tests\n\n#if (GETTEXT_FOUND)\n#  set(HAVE_GETTEXT 1)\n#else()\n  set(HAVE_GETTEXT 0)\n#endif()\n\n#find_path(INTL_PATH libintl.h)\n#find_library(INTL_LIB intl)\n#include_directories(SYSTEM \"${INTL_PATH}\")\n\n########################################################################\n\nmacro(add_ledger_library_dependencies _target)\n  target_link_libraries(${_target} ${Boost_LIBRARIES})\n  target_link_libraries(${_target} ${GMP_LIB})\n  target_link_libraries(${_target} ${MPFR_LIB})\n  target_link_libraries(${_target} ${PROFILE_LIBS})\n  if (HAVE_EDIT)\n    target_link_libraries(${_target} ${EDIT_LIB})\n  endif()\n  if (HAVE_READLINE)\n    target_link_libraries(${_target} ${READLINE_LIB})\n  endif()\n  if (HAVE_GETTEXT)\n    target_link_libraries(${_target} ${INTL_LIB})\n  endif()\n  if (HAVE_GPGME)\n    target_link_libraries(${_target} Gpgmepp)\n  endif()\n  if (HAVE_BOOST_REGEX_UNICODE)\n    target_link_libraries(${_target} ${ICU_LIBRARIES})\n  endif()\n  if (HAVE_BOOST_PYTHON)\n    if (CMAKE_SYSTEM_NAME STREQUAL Darwin)\n      # Don't link directly to a Python framework on macOS, to avoid segfaults\n      # when the module is imported from a different interpreter\n      set_target_properties(${_target} PROPERTIES LINK_FLAGS \"-undefined dynamic_lookup\")\n    else()\n      target_link_libraries(${_target} ${Python_LIBRARIES})\n    endif()\n  endif()\nendmacro(add_ledger_library_dependencies _target)\n\n########################################################################\n\ninclude(FindUtfcpp)\nif (UTFCPP_FOUND)\n  include_directories(\"${UTFCPP_INCLUDE_DIR}\")\nelse()\n  message(FATAL_ERROR \"Missing required header file: utf8.h\\n\"\n    \"Define UTFCPP_PATH or install utfcpp locally into the source tree below lib/utfcpp/.\"\n    )\nendif()\n\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})\n\n# add the binary tree to the search path for include files so that we will\n# find system.hh\ninclude_directories(\"${PROJECT_BINARY_DIR}\")\n\nconfigure_file(\n  ${PROJECT_SOURCE_DIR}/src/system.hh.in\n  ${PROJECT_BINARY_DIR}/system.hh)\n\nconfigure_file(\n  ${PROJECT_SOURCE_DIR}/src/ledger.hh.in\n  ${PROJECT_BINARY_DIR}/ledger.hh)\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n  set(CMAKE_INCLUDE_SYSTEM_FLAG_CXX \"-isystem \")\nendif()\n\nadd_subdirectory(src)\nadd_subdirectory(doc)\nadd_subdirectory(contrib)\nadd_subdirectory(test)\n\n########################################################################\n\n# build a CPack driven installer package\ninclude (InstallRequiredSystemLibraries)\n\nset (CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_SOURCE_DIR}/LICENSE.md\")\nset (CPACK_PACKAGE_VERSION_MAJOR \"${Ledger_VERSION_MAJOR}\")\nset (CPACK_PACKAGE_VERSION_MINOR \"${Ledger_VERSION_MINOR}\")\nset (CPACK_PACKAGE_VERSION_PATCH \"${Ledger_VERSION_PATCH}${Ledger_VERSION_PRERELEASE}\")\n\nset (CPACK_GENERATOR \"TBZ2\")\nset (CPACK_SOURCE_GENERATOR \"TBZ2\")\nset (CPACK_SOURCE_PACKAGE_FILE_NAME\n  \"${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}\")\nset (CPACK_SOURCE_IGNORE_FILES \"/.git*;/.dir-locals.el;~$;/doc/website/;/doc/wiki/;/lib/*.sh;/lib/Makefile;/tools/;${CPACK_SOURCE_IGNORE_FILES}\")\n\ninclude (CPack)\n\n### CMakeLists.txt ends here\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.453125,
          "content": "Tips for contributors\n---------------------\n\n* Please **make pull requests against `master`**.\n* Please add a **test case** under `test/regress` when possible.\n* If you're making **changes to files for which the CI build is not\n  relevant**, please **add `[ci skip]` to the end of the commit message**.\n* Report bugs using [GitHub Issues].\n\nGLOSSARY\n----\n\nDeveloping the Ledger software uses a number different tools, not all of\nwhich will be familiar to all developers.\n\n**[Boost]**: a standard set of C++ libraries.  Most\nBoost libraries consist of inline functions and templates in header files.\n\n**[Boost.Python]**:  C++ library which enables seamless interoperability\nbetween C++ and the Python programming language.\n\n**[CMake]**: A cross platform system for building from source code.  It uses\nthe `CMakeLists.txt` files.\n\n**[Doxygen]**: generates programming documentation from\nsource code files.  Primarily used on C++ sources, but works on all.  Uses\nthe `doc/Doxyfile.in` file.\n\n**[GCC]**: Gnu Compiler Collection, which includes the\n*gcc* compiler and *gcov* coverage/profiler tool.\n\n**[clang]**: C language family frontend for LLVM, which\nincludes the *clang* compiler.\n\n**[GMP]**: Gnu Multiple Precision Arithmetic Library\nprovides arbitrary precision math.\n\n**[MPFR]**: Gnu Multiple Precision Floating-point Library\nwith correct rounding.\n\n**[Markdown]**: A typesetter\nformat that produces *html* files from *.md* files.  Note that GitHub\nautomatically renders *.md* files.\n\n**[SHA1]**: a marginally secure cryptographic hash function, used only for\nsigning the license file.\n\n**[Texinfo]**: Gnu documentation\ntypesetter that produces *html* and *pdf* files from the `doc/\\*.texi` files.\n\n**[GitHub Actions]**: a hosted continuous integration\n  service that builds and runs tests each commit posted to GitHub.  Each\n  build creates a log, updates a [small badge] at\n  the top left of the main project's\n  [README.md], and\n  emails the author of the commit if any tests fail.\n\n**[utfcpp]**: a library for handling utf-8 in a variety of C++ versions.\n\n\nOrientation\n---\n\nThe source tree can be confusing to a new developer.  Here is a selective\norientation:\n\n**./acprep**: a custom thousand-line script to install dependencies, grab\n  updates, and build.  It also creates `\\*.cmake`,\n  `./CmakeFiles/` and other CMake temporary files.  Use `./acprep --help`\n  for more information.\n\n**./README.md**: user readme file in markdown format, also used as the project\n  description on GitHub.\n\n**./contrib/**: contributed scripts of random quality and completion.  They\n  usually require editing to run.\n\n**./doc/**: documentation, licenses, and\n  tools for generating documents such as the *pdf* manual.\n\n**./lib/**: a couple of libraries used in development.\n\n**./python/**:  samples using the Python ledger module.\n\n**./src/**:  the C++ header and source files in a flat directory.\n\n**./test/**:  a testing harness with subdirectories full of tests\n\n**./tools/**:  an accretion of tools, mostly small scripts, to aid development\n\n\nBuilding\n---\n\nIf you are going to be working on Ledger, you'll want to enable both debug\nbuilds (which are the default, using `acprep`), and also the use of\npre-compiled headers.  To do this, specify your compiler as either `clang++`\nor `g++` as follows:\n\n    mkdir build\n    ./acprep --compiler=clang++\n    cd build/ledger/debug\n    make\n\nThis will set up a debug build using clang++ (and pre-compiled headers, which\nis enabled by the combination of those two), and then start a build.\n\nFor even quicker rebuilds, try the Ninja build tool, which is very fast at\ndetermining what to rebuild, and automatically takes advantage of multiple\ncores:\n\n    mkdir build\n    ./acprep --compiler=clang++ --ninja\n    cd build/ledger/debug\n    ninja\n\n[Boost]: https://boost.org\n[Boost.Python]: https://www.boost.org/libs/python/\n[GitHub Issues]: https://github.com/ledger/ledger/issues\n[GMP]: https://gmplib.org/\n[MPFR]: https://www.mpfr.org/\n[CMake]: https://www.cmake.org\n[Doxygen]: https://doxygen.org\n[Markdown]: https://daringfireball.net/projects/markdown/\n[SHA1]: https://en.wikipedia.org/wiki/SHA-1\n[Texinfo]: https://www.gnu.org/software/texinfo/\n[GitHub Actions]: https://github.com/features/actions\n[GCC]: https://gcc.gnu.org\n[utfcpp]: https://utfcpp.sourceforge.net\n[small badge]: https://github.com/ledger/ledger/actions/workflows/cmake.yml/badge.svg\n[git-flow]: https://nvie.com/posts/a-successful-git-branching-model/\n[README.md]: https://github.com/ledger/ledger/blob/master/README.md\n[clang]: https://clang.llvm.org\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 6.9150390625,
          "content": "# INSTALL\n\nTo build this code after doing a Git clone, run:\n\n    $ ./acprep dependencies\n    $ ./acprep update\n\nIf anything goes wrong, see [COMMON CONFIGURE/BUILD PROBLEMS](#common-configure--build-problems)\n\nIf you try to configure and build without running acprep first, you are\nalmost certainly going to run into problems.  In future, you can run\n`acprep update` again and again, and it will keep you updated to the\nvery latest version.\n\nNow install it:\n\n    $ sudo make install\n\n\n## COMMON CONFIGURE / BUILD PROBLEMS\n\nTo build and install Ledger requires several dependencies on various\nplatforms.  You can install these dependencies very simply for most of them\nusing:\n\n    $ ./acprep dependencies\n\nThe first order of business if acprep update doesn't work is to find out where\nthings went wrong.  So follow these steps to produce a bug report I can track\ndown easily:\n\n    $ ./acprep --debug update          # shows what acprep was thinking\n    $ $EDITOR CMakeCache.txt           # shows what cmake was thinking\n\nWith the contents of config.log, and the output from acprep --debug update,\nit's usually fairly obvious where things have gone astray.\n\n\n## F.A.Q.\n\n\nQ: The build fails saying it can't find `utf8.h`\n\nA: You didn't run `./acprep update`.\n\n----------------------------------------------------------------------\n\nQ: `./acprep update` gives errors or `./acprep dependencies` fails\n\nA: You're probably missing some dependency libraries.  If you tried\n  `./acprep dependencies` already and that didn't solve the problem,\n  then you may need to install dependencies by hand.  On a Debian\n  GNU/Linux system (or Debian-based system such as Ubuntu), something\n  like this should work (as root):\n\n    $ sudo apt-get install build-essential cmake texinfo python-dev \\\n        zlib1g-dev libbz2-dev libgmp3-dev gettext libmpfr-dev \\\n        libboost-date-time-dev libboost-filesystem-dev \\\n        libboost-graph-dev libboost-iostreams-dev \\\n        libboost-python-dev libboost-regex-dev libboost-test-dev \\\n        doxygen libedit-dev libmpc-dev tzdata\n\n----------------------------------------------------------------------\n\nQ: Configure fails saying it can't find boost_regex\n\nA: Look in config.log and search for \"boost_regex\", then scroll down a bit\n  until you see the exact compile error.  Usually it's failing because\n  your include directory is different from anything acprep is expecting to\n  see.  It could also be failing because your Boost libraries have a\n  custom \"suffix\" on them.\n\n  Let's say your Boost was installed in ~/boost, and every library has the\n  suffix `-xgcc42`.  This is what you would run:\n\n    $ CPPFLAGS=-I$HOME/boost acprep --boost=xgcc42 update\n\n----------------------------------------------------------------------\n\nQ: Configure fails saying it can't find MPFR\n\nA: You need MPFR version 2.4.0 or higher.  This version does not come with\n  most Debian distributions, so you will need to build it.  The\n  relevant packages are `libmpfr-dev` and `libmpfr-dbg`.  See also\n  the question above about what to do if `./acprep update` gives\n  errors or `./acprep dependencies` fails.\n\n----------------------------------------------------------------------\n\nQ: I'm seeing a segfault deep inside the boost_regex code!\n\nA: Actually, the real segfault is in libstdc++'s facet code.  It's being\n  caused by using a debug Boost with a non-debug build of Ledger, or\n  vice-versa.\n\n----------------------------------------------------------------------\n\nQ: Something else fails, or Ledger crashes on startup\n\nA: This, I am most interested in hearing about.  Please\n  [file a bug report](https://bugs.ledger-cli.org/new) at the\n  [Ledger Issue Tracker](https://bugs.ledger-cli.org).  The more\n  details you can provide, the better.  Also, if Ledger is crashing, try\n  running it under a debugger, e.g. gdb or lldb, like so:\n\n    $ gdb ledger\n    (gdb) run <ARGS TO LEDGER>\n    ... runs till crash ...\n    (gdb) bt\n\n  Put that backtrace output, and the output from `ledger --version`\n  in the bug report.\n\n----------------------------------------------------------------------\n\nQ: Whenever I try to use the Python support, I get a segfault\n\nA: Make sure that the boost_python library you linked against is using the\n  exact same Python as the Ledger executable.  In particular I see this\n  bug on macOS systems where boost_python is linked against the default\n  Python, while Ledger is linked against the version provided by MacPorts.\n  Or vice versa.\n\n  Solution: Use one or the other.  If you prefer the system Python, run\n  `port deactivate -f python26`, to get MacPorts' version out of the way.\n  You'll then need to delete the Ledger binary and run `make` to relink\n  it.\n\n----------------------------------------------------------------------\n\nQ: When I run `make check`, the Python unit tests always crash\n\nA: This can happen for the same reason as above.  It can also happen if you\n  have ICU support enabled.  This is a bug I'm still trying to track down.\n\n----------------------------------------------------------------------\n\nQ: My distribution has versions of Boost and/or CMake that are too old for\n  Ledger.  How do I build my own Boost and/or CMake binaries that will\n  work properly with Ledger?  Thereafter, how do I configure Ledger\n  properly to use those newly built versions of Boost and/or CMake?\n\nA: Here's commands that one user used to make this work, for Boost 1.72.0\n  on Debian GNU/Linux 11 (aka Debian bullseye).  It's likely to work ok\n  for other versions of Boost as well.  [YMMV] on other distributions and/or\n  other Debian versions, though.\n\n  - Preparing and building Boost\n\n        $ export BOOST_VERSION=1.72.0\n        $ cd /somewhere/you/want/to/build/boost\n        $ wget -N https://boostorg.jfrog.io/artifactory/main/release/$BOOST_VERSION/source/boost_${BOOST_VERSION//./_}.tar.gz\n        $ tar xvf boost_${BOOST_VERSION//./_}.tar.bz2\n        $ cd boost_${BOOST_VERSION//./_}\n        $ ./bootstrap.sh\n        $ ./b2 --build-type=complete --layout=tagged --prefix=/where/you/want/boost/installed\n        $ ./b2 --build-type=complete --layout=tagged --prefix=/where/you/want/boost/installed install\n\n  - Preparing and building CMake\n\n        $ export CMAKE_VERSION=3.16.2\n        $ cd /somewhere/you/want/to/build/cmake\n        $ wget -N https://cmake.org/files/v${CMAKE_VERSION:0:-2}/cmake-${CMAKE_VERSION}.tar.gz\n        $ tar xvf cmake-${CMAKE_VERSION}.tar.gz\n        $ cd cmake-${CMAKE_VERSION}\n        $ ./configure --prefix=/where/you/want/cmake/installed/\n        $ make\n        $ make install\n\n  - Building Ledger using the CMake and/or Boost as installed above\n\n        $ cd /path/to/ledger/sources\n        $ env PATH=/where/you/want/cmake/installed/bin:$PATH  BOOST_ROOT=/where/you/want/boost/installed PREFIX=/where/you/want/ledger/installed $SHELL\n        $ ./acprep --prefix=$PREFIX --debug --python config\n        $ ./acprep --prefix=$PREFIX --debug --python make\n        $ ./acprep --prefix=$PREFIX --debug --python install\n\n[YMMV]: https://www.acronymfinder.com/Your-Mileage-May-Vary-(YMMV).html\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.45703125,
          "content": "Copyright (c) 2003-2023, John Wiegley.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n- Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n- Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n- Neither the name of New Artisans LLC nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 42.2099609375,
          "content": "# Ledger NEWS\n\n## 3.4.x (unreleased)\n\n- Update required versions of various dependencies\n  (CMake 3.16.2, Boost 1.72.0, Gmp 6.1.2, Mpfr 4.0.2, Python 3.9, doxygen 1.9.5)\n\n- docs: Enable stand-alone building\n\n- Include contrib files in distribution\n\n- Fix related reports when using bucket transactions (ledger/ledger#2220)\n\n- Add support to build ledger with readline\n\n## 3.3.2 (2023-03-30)\n\n- Fix divide by zero (ledger/ledger#777, ledger/ledger#2207)\n\n- Increase string size limit in src/unistring.h assert (ledger/ledger#2174)\n\n- Require tzdata for Nix flake build (ledger/ledger#2213)\n\n## 3.3.1 (2023-03-03)\n\n- Fix regression leading to incorrect error about `format` directives (ledger/ledger#2205)\n\n- Add information about compile features to `--version`\n\n- Fix compiler warnings by minimizing the use of deprecated APIs\n\n- Update flake.nix to match nixpkgs ledger/default.nix\n\n- Remove unused Python server related code\n\n- Various documentation improvements\n\n## 3.3 (2023-02-08)\n\n- Use `$PAGER` when environment variable is set (ledger/ledger#1674)\n\n- Make `--depth` correctly fold postings to accounts of greater depth into the\n  parent at the specified level (ledger/ledger#987)\n\n- When using wild-cards in the `include` directive, include matched files in\n  sorted order (ledger/ledger#1659)\n\n- Ensure absolute path for include (ledger/ledger#2075)\n\n- Try to use `$XDG_HOME_CONFIG/ledger/ledgerrc` or `~/.config/ledger/ledgerrc`\n  first\n\n- Improve Python 3 support and drop support for Python 2\n\n- Add support for automatically reading files encrypted with GPG (ledger/ledger#1949)\n\n- Add support for a \"debit\" column in the `convert` command (ledger/ledger#1120)\n\n- Fix parsing of files without end of line (ledger/ledger#516)\n\n- Fix incorrect parsing of expressions containing a `-` without spaces (ledger/ledger#2001)\n\n- Fix payee metadata on postings not being validated and payee aliases not\n  being honored (ledger/ledger#556, ledger/ledger#1892)\n\n- Fix ledger interpreting a posting with 0 difference as a null-posting,\n  which leads to it auto-balancing the posting (ledger/ledger#1942)\n\n- Correctly escape all string values in lisp report (ledger/ledger#2034)\n\n- Fix a regression where empty commodities were shown (ledger/ledger#1969)\n\n- Fix a regression where using multiple commodities in one transaction triggers\n  an assertion (ledger/ledger#1998)\n\n- Fix --time-colon for negative time amounts\n\n- Use correct int return type for stream input operations (ledger/ledger#2058)\n\n- Use amount_width for balance report\n\n- Remove some UTF-8 code that was having no effect (ledger/ledger#2061)\n\n- Fix unrounding for equity\n\n- Fix SIGABRT when python subcommand raises an exception\n\n- Improve XML reports\n\n- Support building on older versions of CMAKE (less than 3.7)\n\n- Fix compilation with Boost 1.76 (ledger/ledger#2030)\n\n- Fix Msys2 MinGW build (ledger/ledger#1905)\n\n- Fix unicode problems on Windows (ledger/ledger#1986)\n\n- Fix the issue that with Boost >= 1.77 `include` directive cannot find the file\n  to include for stdin (`-f -`). Also for `-f -` when `include` cannot find the\n  file it reports the error with full path now. (ledger/ledger#2057, ledger/ledger#2092)\n\n- Fix Nix build\n\n- Rename `quoted_rfc4180` to `quoted_rfc`, as numbers used in function names\n  confuses the parser (ledger/ledger#2007).\n\n- Numbers are no longer permitted in value expression function names.\n\n- Various documentation improvements\n\n## 3.2.1 (2020-05-18)\n\n- Fix regression with expression evaluation by reverting commit\n  `Correction to the way parens are parsed in query expressions` (ledger/ledger#1894)\n\n- Fix --invert breakage by reverting commit `Change --invert to invert\n  displayed amounts and totals, not amounts` (ledger/ledger#1895)\n\n- Fix performance regression by reverting commit `Compare price\n  annotations using their textual rendering` (ledger/ledger#1907)\n\n- Fix library path issue (ledger/ledger#1885)\n\n- Allow specifying the Python version (ledger/ledger#1893)\n\n- Some documentation fixes\n\n## 3.2.0 (2020-05-01)\n\n- Port Python support to Python 3\n\n- Entities are no longer regarded as defined due to being part of a\n  cleared transaction. `--explicit` is effectively enabled by default\n  and is now a no-op (PR ledger/ledger#1819)\n\n- Add `--average-lot-prices` to show the average of lot prices\n\n- Add support for `%F` date format specifier (ledger/ledger#1775)\n\n- Add `commodity_price(NAME, DATE)` function\n\n- Add `set_commodity_price(NAME, DATE)` function\n\n- Fix buffer overflow when evaluating date\n\n- Fix balance assertions on accounts with virtual posts (ledger/ledger#543)\n\n- Fix segfault with `ledger print` (ledger/ledger#1850)\n\n- Ensure that `apply` directives (like `apply account`) have the\n  required argument (ledger/ledger#553)\n\n- Format annotations using a date format that can be parsed\n\n- Change `--invert` to invert displayed amounts and totals, not amounts\n  (ledger/ledger#1803)\n\n- Correct the way parens are parsed in query expressions\n\n- Compare price annotations using their textual rendering\n\n- Fix build failure with utfcpp 3.0 (ledger/ledger#1816)\n\n- Fix build failure due to ambiguous type (ledger/ledger#1833)\n\n## 3.1.3 (2019-03-31)\n\n- Properly reject postings with a comment right after the flag (ledger/ledger#1753)\n\n- Make sorting order of lot information deterministic (ledger/ledger#1747)\n\n- Fix bug in tag value parsing (ledger/ledger#1702)\n\n- Remove the `org` command, which was always a hack to begin with (ledger/ledger#1706)\n\n- Provide Docker information in README\n\n- Various small documentation improvements\n\n## 3.1.2 (2019-02-05)\n\n- Increase maximum length for regex from 255 to 4095 (ledger/ledger#981)\n\n- Initialize periods from from/since clause rather than earliest\n  transaction date (ledger/ledger#1159)\n\n- Check balance assertions against the amount after the posting (ledger/ledger#1147)\n\n- Allow balance assertions with multiple posts to same account (ledger/ledger#1187)\n\n- Fix period duration of \"every X days\" and similar statements (ledger/ledger#370)\n\n- Make option `--force-color` not require `--color` anymore (ledger/ledger#1109)\n\n- Add `quoted_rfc4180` to allow CVS output with RFC 4180 compliant quoting.\n\n- Add support for `--prepend-format` in accounts command\n\n- Fix handling of edge cases in trim function (ledger/ledger#520)\n\n- Fix auto xact posts not getting applied to account total during\n  journal parse (ledger/ledger#552)\n\n- Transfer `null_post` flags to generated postings\n\n- Fix segfault when using `--market` with `--group-by`\n\n- Use `amount_width` variable for budget report\n\n- Keep pending items in budgets until the last day they apply\n\n- Fix bug where `.total` used in value expressions breaks totals\n\n- Make automated transactions work with assertions (ledger/ledger#1127)\n\n- Improve parsing of date tokens (ledger/ledger#1626)\n\n- Don't attempt to invert a value if it's already zero (ledger/ledger#1703)\n\n- Do not parse user-specified init-file twice\n\n- Fix parsing issue of effective dates (ledger/ledger#1722,\n  [TALOS-2017-0303](https://talosintelligence.com/vulnerability_reports/TALOS-2017-0303),\n  [CVE-2017-2807](https://www.cve.org/CVERecord?id=CVE-2017-2807))\n\n- Fix use-after-free issue with deferred postings (ledger/ledger#1723,\n  [TALOS-2017-0304](https://talosintelligence.com/vulnerability_reports/TALOS-2017-0304),\n  [CVE-2017-2808](https://www.cve.org/CVERecord?id=CVE-2017-2808))\n\n- Fix possible stack overflow in option parsing routine (ledger/ledger#1222,\n  [CVE-2017-12481](https://www.cve.org/CVERecord?id=CVE-2017-12481))\n\n- Fix possible stack overflow in date parsing routine (ledger/ledger#1224,\n  [CVE-2017-12482](https://www.cve.org/CVERecord?id=CVE-2017-12482))\n\n- Fix use-after-free when using `--gain` (ledger/ledger#541)\n\n- Python: Removed double quotes from Unicode values.\n\n- Python: Ensure that parse errors produce useful `RuntimeErrors`\n\n- Python: Expose `journal expand_aliases`\n\n- Python: Expose `journal_t::register_account`\n\n- Improve bash completion\n\n- Emacs Lisp files have been moved to https://github.com/ledger/ledger-mode\n\n- Fix build under MSYS (32-bit).\n\n- Fix build under Cygwin.\n\n- Various documentation improvements\n\n## 3.1.1 (2016-01-11)\n\n- Added a `--no-revalued` option\n\n- Improved Embedded Python Support\n\n- Use `./.ledgerrc` if `~/.ledgerrc` doesn't exist\n\n- Fixed parsing of transactions with single-character payees and comments\n\n- Fixed crash when using `-M` with empty result\n\n- Fixed sorting for option `--auto-match`\n\n- Fixed treatment of `year 2015` and `Y2014` directives\n\n- Fixed crash when using `--trace` 10 or above\n\n- Build fix for boost 1.58, 1.59, 1.60\n\n- Build fix for Cygwin\n\n- Fixed Util and Math tests on Mac OS X\n\n- Various documentation improvements\n\n- Examples in the documentation are tested just like unit tests\n\n- Add continuous integration (https://travis-ci.org/ledger/ledger)\n\n## 3.1 (2014-10-05)\n\n- Changed the definition of cost basis to preserve the original cost basis\n  when a gain or loss is made (if you bought 1 AAA for $10 and then sold\n  it for $12, ledger would previously take $12 as the cost; the original\n  cost of $10 is preserved as the cost basis now, which addresses strange\n  behavior with -B after a capital gain or loss is made).\n\n- Incorrect automatic Equity:Capital Gains and Equity:Capital Loss entries\n  are no longer generated when a commodity is sold for loss or profit.\n\n- Support for virtual posting costs.\n\n- The option `--permissive` now quiets balance assertions\n\n- Removed SHA1 files due to license issues and use boost instead.\n\n- Added option `--no-pager` to disable the pager.\n\n- Added option `--no-aliases` to completely disable alias expansion\n\n- Added option `--recursive-aliases` to expand aliases recursively\n\n- Support payee `uuid` directive.\n\n- Bug fix: when a status flag (`!` or `*`) is explicitly specified for an\n  individual posting, it always has a priority over entire transaction\n  status.\n\n- Bug fix: don't lose commodity when cost is not separated by whitespace\n\n- Improved backwards compatibility with ledger 2.x\n\n- Build fix for GCC 4.9\n\n- Build fix for boost 1.56\n\n- Many improvements to ledger-mode, including fontification\n\n- More test cases and unit tests\n\n- Contrib: Added script to generate commodities from ISO 4217\n\n## 3.0\n\nDue to the magnitude of changes in 3.0, only changes that affect compatibility\nwith 2.x files and usage is mentioned here.  For a description of new\nfeatures, please see the manual.\n\n- The option `-g` (`--performance`) was removed.\n\n- The balance report now defaults to showing all relevant accounts.  This is\n  the opposite of 2.x.  That is, `bal` in 3.0 does what `-s bal` did in 2.x.\n  To see 2.6 behavior, use `bal -n` in 3.0.  The `-s` option no longer has any\n  effect on balance reports.\n\n## 2.6.3\n\n- Minor fixes to allow for compilation with gcc 4.4.\n\n## 2.6.2\n\n- Bug fix: Command-line options, such as -O, now override init-file options\n  such as -V.\n\n- Bug fix: \"cat data | ledger -f -\" now works.\n\n- Bug fix: --no-cache is now honored.  Previously, it was writing out a cache\n  file named \"<none>\".\n\n- Bug fix: Using %.2X in a format string now outputs 2 spaces if the state is\n  cleared.\n\n## 2.6.1\n\n- Added the concept of \"balance setting transactions\":\n\n  Setting an account's balance\n\n  You can now manually set an account's balance to whatever you want, at\n  any time.  Here's how it might look at the beginning of your Ledger\n  file:\n\n      2008/07/27 Starting fresh\n          Assets:Checking      = $1,000.00\n          Equity:Opening Balances\n\n  If Assets:Checking is empty, this is no different from omitting the\n  \"=\".  However, if Assets:Checking did have a prior balance, the amount\n  of the transaction will be auto-calculated so that the final balance\n  of Assets:Checking is now $1,000.00.\n\n  Let me give an example of this.  Say you have this:\n\n      2008/07/27 Starting fresh\n          Assets:Checking          $750.00\n          Equity:Opening Balances\n\n      2008/07/27 Starting fresh\n          Assets:Checking      = $1,000.00\n          Equity:Adjustments\n\n  These two entries are exactly equivalent to these two:\n\n      2008/07/27 Starting fresh\n          Assets:Checking          $750.00\n          Equity:Opening Balances\n\n      2008/07/27 Starting fresh\n          Assets:Checking          $250.00\n          Equity:Adjustments\n\n  The use of the \"=\" sign here is that it sets the transaction's amount\n  to whatever is required to satisfy the assignment.  This is the\n  behavior if the transaction's amount is left empty.\n\n  # Multiple commodities\n\n  As far as commodities go, the = sign only works if the account\n  balance's commodity matches the commodity of the amount after the\n  equals sign.  However, if the account has multiple commodities, only\n  the matching commodity is affected.  Here's what I mean:\n\n      2008/07/24 Opening Balance\n          Assets:Checking        = $250.00          ; we force set it\n          Equity:Opening Balances\n\n      2008/07/24 Opening Balance\n          Assets:Checking      = EC 250.00          ; we force set it again\n          Equity:Opening Balances\n\n  This is an error, because $250.00 cannot be auto-balanced to match EC\n  250.00.  However:\n\n      2008/07/24 Opening Balance\n          Assets:Checking        = $250.00          ; we force set it again\n          Assets:Checking        EC 100.00          ; and add some EC's\n          Equity:Opening Balances\n\n      2008/07/24 Opening Balance\n          Assets:Checking      = EC 250.00          ; we force set the EC's\n          Equity:Opening Balances\n\n  This is *not* an error, because the latter auto-balancing transaction\n  only affects the EC 100.00 part of the account's balance; the $250.00\n  part is left alone.\n\n  Checking statement balances\n\n  When you reconcile a statement, there are typically one or more\n  transactions which result in a known balance.  Here's how you specify\n  that in your Ledger data:\n\n      2008/07/24 Opening Balance\n          Assets:Checking        = $100.00\n          Equity:Opening Balances\n\n      2008/07/30 We spend money, with a known balance afterward\n          Expenses:Food             $20.00\n          Assets:Checking         = $80.00\n\n      2008/07/30 Again we spend money, but this time with all the info\n          Expenses:Food             $20.00\n          Assets:Checking          $-20.00 = $60.00\n\n      2008/07/30 This entry yield an 'unbalanced' error\n          Expenses:Food             $20.00\n          Assets:Checking          $-20.00 = $30.00\n\n  The last entry in this set fails to balance with an unbalanced\n  remainder of $-10.00.  Either the entry must be corrected, or you can\n  have Ledger deal with the remainder automatically:\n\n      2008/07/30 The fixed entry\n          Expenses:Food              $20.00\n          Assets:Checking           $-20.00 = $30.00\n          Equity:Adjustments\n\n  Conclusion\n\n  This simple feature has all the utility of @check, plus auto-balancing\n  to match known target balances, plus the ability to guarantee that an\n  account which uses only one commodity does contain only that\n  commodity.\n\n  This feature slows down textual parsing slightly, does not affect\n  speed when loading from the binary cache.\n\n- The rest of the changes in the version is all bug fixes (around 45 of\n  them).\n\n## 2.6.0.90\n\n- Gnucash parser is fixed.\n\n- Fix a memory leak bug in the amount parser.\n\n- (This feature is from 2.6, but was not documented anywhere):\n\n  Commodities may now specify lot details, to assign in managing set\n  groups of items, like buying and selling shares of stock.\n\n  For example, let's say you buy 50 shares of AAPL at $10 a share:\n\n      2007/01/14 Stock purchase\n          Assets:Brokerage         50 AAPL @ $10\n          Assets:Brokerage\n\n  Three months later, you sell this \"lot\".  Based on the original\n  purchase information, Ledger remembers how much each share was\n  purchased for, and the date on which it was purchased.  This means\n  you can sell this specific lot by price, by date, or by both.  Let's\n  sell it by price, this time for $20 a share.\n\n      2007/04/14 Stock purchase\n          Assets:Brokerage         $1000.00\n          Assets:Brokerage         -50 AAPL {$10} @ $20\n          Income:Capital Gains     $-500.00\n\n  Note that the Income:Capital Gains line is now required to balance\n  the transaction.  Because you sold 50 AAPL at $20/share, and because\n  you are selling shares that were originally valued at $10/share,\n  Ledger needs to know how you will \"balance\" this difference.  An\n  equivalent Expenses:Capital Loss would be needed if the selling\n  price were less than the buying price.\n\n  Here's the same example, this time selling by date and price:\n\n      2007/04/14 Stock purchase\n          Assets:Brokerage         $1000.00\n          Assets:Brokerage         -50 AAPL {$10} [2007/01/14] @ $20\n          Income:Capital Gains     $-500.00\n\n  If you attempt to sell shares for a date you did not buy them, note\n  that Ledger will not complain (as it never complains about the\n  movement of commodities between accounts).  In this case, it will\n  simply create a negative balance for such shares within your\n  Brokerage account; it's up to you to determine whether you have them\n  or not.\n\n- To facilitate lot pricing reports, there are some new reporting\n  options:\n\n  * --lot-prices   Report commodities with different lot prices as if\n                   they were different commodities.  Otherwise, Ledger\n                   just gloms all the AAPL shares together.\n\n  * --lot-dates    Separate commodities by lot date.  Every\n                   transaction that uses the '@' cost specifier will\n                   have an implicit lot date and lot price.\n\n  * --lot-tags     Separate commodities by their arbitrary note tag.\n                   Note tags may be specified using (note) after the\n                   commodity.\n\n  * --lots         Separate commodities using all lot information.\n\n## 2.6\n\n- The style for eliding long account names (for example, in the\n  register report) has been changed.  Previously Ledger would elide\n  the end of long names, replacing the excess length with \"..\".\n  However, in some cases this caused the base account name to be\n  missing from the report!\n\n  What Ledger now does is that if an account name is too long, it will\n  start abbreviating the first parts of the account name down to two\n  letters in length.  If this results in a string that is still too\n  long, the front will be elided -- not the end.  For example:\n\n      Expenses:Cash           ; OK, not too long\n      Ex:Wednesday:Cash       ; \"Expenses\" was abbreviated to fit\n      Ex:We:Afternoon:Cash    ; \"Expenses\" and \"Wednesday\" abbreviated\n      ; Expenses:Wednesday:Afternoon:Lunch:Snack:Candy:Chocolate:Cash\n      ..:Af:Lu:Sn:Ca:Ch:Cash  ; Abbreviated and elided!\n\n  As you can see, it now takes a very deep account name before any\n  elision will occur, whereas in 2.x elisions were fairly common.\n\n- In addition to the new elision change mentioned above, the style is\n  also configurable:\n\n  * --truncate leading      ; elide at the beginning\n  * --truncate middle       ; elide in the middle\n  * --truncate trailing     ; elide at end (Ledger 2.x's behavior)\n  * --truncate abbrev       ; the new behavior\n\n  * --abbrev-len 2          ; set length of abbreviations\n\n  These elision styles affect all format strings which have a maximum\n  width, so they will also affect the payee in a register report, for\n  example.  In the case of non-account names, \"abbrev\" is equivalent\n  to \"trailing\", even though it elides at the beginning for long\n  account names.\n\n- Error reporting has been greatly improving, now showing full\n  contextual information for most error messages.\n\n- Added --base reporting option, for reporting convertible commodities\n  in their most basic form.  For example, if you read a timeclock file\n  with Ledger, the time values are reported as hour and minutes --\n  whichever is the most compact form.  But with --base, Ledger reports\n  only in seconds.\n\n  NOTE: Setting up convertible commodities is easy; here's how to use\n  Ledger for tracking quantities of data, where the most compact form\n  is reported (unless --base is specified):\n\n      C 1.00 Kb = 1024 b\n      C 1.00 Mb = 1024 Kb\n      C 1.00 Gb = 1024 Mb\n      C 1.00 Tb = 1024 Gb\n\n- Added --ansi reporting option, which shows negative values in the\n  running total column of the register report as red, using ANSI\n  terminal codes; --ansi-invert makes non-negative values red (which\n  makes more sense for the income and budget reports).\n\n  The --ansi functionality is triggered by the format modifier \"!\",\n  for example the register reports uses the following for the total\n  (last) column:\n\n      %!12.80T\n\n  At the moment neither the balance report nor any of the other\n  reports make use of the ! modifier, and so will not change color\n  even if --ansi is used.  However, you can modify these report format\n  strings yourself in ~/.ledgerrc if you wish to see red coloring of\n  negative sums in other places.\n\n- Added --only predicate, which occurs during transaction processing\n  between --limit and --display.  Here is a summary of how the three\n  supported predicates are used:\n\n  * --limit \"a>100\"\n\n      This flag limits computation to *only transactions whose amount\n      is greater than 100 of a given commodity*.  It means that if you\n      scan your dining expenses, for example, only individual bills\n      greater than $100 would be calculated by the report.\n\n  * --only \"a>100\"\n\n      This flag happens much later than --limit, and corresponding\n      more directly to what one normally expects.  If --limit isn't\n      used, then ALL your dining expenses contribute to the report,\n      *but only those calculated transactions whose value is greater\n      than $100 are used*.  This becomes important when doing a\n      monthly costs report, for example, because it makes the\n      following command possible:\n\n        ledger -M --only \"a>100\" reg ^Expenses:Food\n\n      This shows only *months* whose amount is greater than 100.  If\n      --limit had been used, it would have been a monthly summary of\n      all individual dinner bills greater than 100 -- which is a very\n      different thing.\n\n  * --display \"a>100\"\n\n      This predicate does not constrain calculation, but only display.\n      Consider the same command as above:\n\n          ledger -M --display \"a>100\" reg ^Expenses:Food\n\n      This displays only lines whose amount is greater than 100, *yet\n      the running total still includes amounts from all transactions*.\n      This command has more particular application, such as showing\n      the current month's checking register while still giving a\n      correct ending balance:\n\n          ledger --display \"d>[this month]\" reg Checking\n\n    Note that these predicates can be combined.  Here is a report that\n    considers only food bills whose individual cost is greater than\n    $20, but shows the monthly total only if it is greater than $500.\n    Finally, we only display the months of the last year, but we\n    retain an accurate running total with respect to the entire ledger\n    file:\n\n          ledger -M --limit \"a>20\" --only \"a>200\" \\\n            --display \"year == yearof([last year])\" reg ^Expenses:Food\n\n- Added new \"--descend AMOUNT\" and \"--descend-if VALEXPR\" reporting\n  options.  For any reports that display valued transactions (i.e.,\n  register, print, etc), you can now descend into the component\n  transactions that made up any of the values you see.\n\n  For example, say you request a --monthly expenses report:\n\n      $ ledger --monthly register ^Expenses\n\n  Now, in one of the reported months you see $500.00 spent on\n  Expenses:Food.  You can ask Ledger to \"descend\" into, and show the\n  component transactions of, that $500.00 by respecifying the query\n  with the --descend option:\n\n      $ ledger --monthly --descend \"\\$500.00\" register ^Expenses\n\n  The --descend-if option has the same effect, but takes a value\n  expression which is evaluated as a boolean to locate the desired\n  reported transaction.\n\n- Added a \"dump\" command for creating binary files, which load much\n  faster than their textual originals.  For example:\n\n      ledger -f huge.dat -o huge.cache dump\n      ledger -f huge.cache bal\n\n  The second command will load significantly faster (usually about six\n  times on my machine).\n\n- There have a few changes to value expression syntax.  The most\n  significant incompatibilities being:\n\n  * Equality is now ==, not =\n  * The U, A, and S functions now requires parens around the argument.\n    Whereas before At was acceptable, now it must be specified as\n    A(t).\n  * The P function now always requires two arguments.  The old\n    one-argument version P(x) is now the same as P(x,m).\n\n  The following value expression features are new:\n\n  * A C-like comma operator is supported, where all but the last term\n    are ignored.  The is significant for the next feature:\n  * Function definitions are now supported.  Scoping is governed\n    by parentheses.  For example:\n      (x=100, x+10)      ; yields 110 as the result\n      (f(x)=x*2,f(100))  ; yields 200 as the result\n  * Identifier names may be any length.  Along with this support comes\n    alternate, longer names for all of the current one-letter value\n    expression variables:\n\n     Old    New\n     ---    ---\n     m      now\n     a      amount\n     a      amount\n     b      cost\n     i      price\n     d      date\n     X      cleared\n     Y      pending\n     R      real\n     L      actual\n     n      index\n     N      count\n     l      depth\n     O      total\n     B      cost_total\n     I      price_total\n     v      market\n     V      market_total\n     g      gain\n     G      gain_total\n     U(x)   abs(x)\n     S(x)   quant(x), quantity(x)\n            comm(x), commodity(x)\n            setcomm(x,y), set_commodity(x,y)\n     A(x)   mean(x), avg(x), average(x)\n     P(x,y) val(x,y), value(x,y)\n            min(x,y)\n            max(x,y)\n\n- There are new \"parse\" and \"expr\" commands, whose argument is a\n  single value expression.  Ledger will simply print out the result of\n  evaluating it.  \"parse\" happens before parsing your ledger file,\n  while \"expr\" happens afterward.  Although \"expr\" is slower as a\n  result, any commodities you use will be formatted based on patterns\n  of usage seen in your ledger file.\n\n  These commands can be used to test value expressions, or for doing\n  calculation of commoditized amounts from a script.\n\n  A new \"--debug\" will also dump the resulting parse tree, useful for\n  submitting bug reports.\n\n- Added new min(x,y) and max(x,y) value expression functions.\n\n- Value expression function may now be defined within your ledger file\n  (or initialization file) using the following syntax:\n\n      @def foo(x)=x*1000\n\n  This line makes the function \"foo\" available to all subsequent value\n  expressions, to all command-line options taking a value expression,\n  and to the new \"expr\" command (see above).\n\n## 2.5\n\n- Added a new value expression regexp command:\n    C//  compare against a transaction amount's commodity symbol\n\n- Added a new \"csv\" command, for outputting results in CSV format.\n\n- Ledger now expands ~ in file pathnames specified in environment\n  variables, initialization files and journal files.\n\n- Effective dates may now be specified for entries:\n\n      2004/10/03=2004/09/30 Credit card company\n          Liabilities:MasterCard         $100.00\n          Assets:Checking\n\n  This entry says that although the actual transactions occurred on\n  October 3rd, their effective date was September 30th.  This is\n  especially useful for budgeting, in case you want the transactions\n  to show up in September instead of October.\n\n  To report using effective dates, use the --effective option.\n\n- Actual and effective dates may now be specified for individual\n  transactions:\n\n      2004/10/03=2004/09/30 Credit card company\n          Liabilities:MasterCard         $100.00\n          Assets:Checking                         ; [2004/10/10=2004/09/15]\n\n  This states that although the actual date of the entry is\n  2004/10/03, and the effective date of the entry is 2004/09/30, the\n  actual date of the Checking transaction itself is 2004/10/10, and\n  its effective date is 2004/09/15.  The effective date is optional\n  (just specifying the actual date would have read \"[2004/10/10]\").\n\n  If no effective date is given for a transaction, the effective date\n  of the entry is assumed.  If no actual date is given, the actual\n  date of the entry is assumed.  The syntax of the latter is simply\n  [=2004/09/15].\n\n- To support the above, there is a new formatting option: \"%d\".  This\n  outputs only the date (like \"%D\") if there is no effective date, but\n  outputs \"ADATE=EDATE\" if there is one.  The \"print\" report now uses\n  this.\n\n- To support the above, the register report may now split up entries\n  whose component transactions have different dates.  For example,\n  given the following entry:\n\n      2005/10/15=2005/09/01 iTunes\n          Expenses:Music                 $1.08 ; [2005/10/20=2005/08/01]\n          Liabilities:MasterCard\n\n  The command \"ledger register\" on this data file reports:\n\n      2005/10/20 iTunes   Expenses:Music            $1.08    $1.08\n      2005/10/15 iTunes   Liabilities:MasterCard   $-1.08        0\n\n  While the command \"ledger --effective register\" reports:\n\n      2005/08/01 iTunes   Expenses:Music            $1.08    $1.08\n      2005/09/01 iTunes   Liabilities:MasterCard   $-1.08        0\n\n  Although it appears as though two entries are being reported, both\n  transactions belong to the same entry.\n\n- Individual transactions may now be cleared separately.  The old\n  syntax, which is still supported, clears all transactions in an\n  entry:\n\n      2004/05/27 * Book Store\n          Expenses:Dining                 $20.00\n          Liabilities:MasterCard\n\n  The new syntax allows clearing of just the MasterCard transaction:\n\n      2004/05/27 Book Store\n          Expenses:Dining                 $20.00\n          * Liabilities:MasterCard\n\n  NOTE: This changes the output format of both the \"emacs\" and \"xml\"\n  reports.  ledger.el uses the new syntax unless the Lisp variable\n  `ledger-clear-whole-entries' is set to t.\n\n- Removed Python integration support.\n\n- Did much internal restructuring to allow the use of libledger.so in\n  non-command-line environments (such as GUI tools).\n\n## 2.4.1\n\n- Corrected an issue that had inadvertently disabled Gnucash support.\n\n## 2.4\n\n- Both `-$100.00` and `$-100.00` are now equivalent amounts.\n\n- Simple, inline math (using the operators +-/*, and/or parentheses)\n  is supported in transactions.  For example:\n\n      2004/05/27 Book Store\n          Expenses:Dining                 $20.00 + $2.50\n          Liabilities:MasterCard\n\n  This won't register the tax/tip in its own account, but might make\n  later reading of the ledger file easier.\n\n- Use of a \"catch all\" account is now possible, which auto-balances\n  entries that contain _only one transaction_.  For sanity's sake this\n  is not used to balance all entries, as that would make locating\n  unbalanced entries a nightmare.  Example:\n\n      A Liabilities:MasterCard\n\n      2004/05/27 Book Store\n          Expenses:Dining                 $20.00 + $2.50\n\n  This is equivalent to the entry in the previous bullet.\n\n- Entries that contain a single transaction with no amount now always\n  balance, even if multiple commodities are involved.  This means that\n  the following is now supported, which wasn't previously:\n\n      2004/06/21 Adjustment\n          Retirement          100 FUNDA\n          Retirement          200 FUNDB\n          Retirement          300 FUNDC\n          Equity:Adjustments\n\n- Fixed several bugs relating to QIF parsing, budgeting and\n  forecasting.\n\n- The configure process now looks for libexpat in addition to\n  searching for libxmlparse+libxmltok (how expat used to be packaged).\n\n## 2.3\n\n- The directive \"!alias ALIAS = ACCOUNT\" makes it possible to use\n  \"ALIAS\" as an alternative name for ACCOUNT in a textual ledger file.\n  You might use this to associate the single word \"Bank\" with the\n  checking account you use most, for example.\n\n- The --version page shows the optional modules ledger was built with.\n\n- Fixed several minor problems, plus a few major ones dealing with\n  imprecise date parsing.\n\n## 2.2\n\n- Ledger now compiles under gcc 2.95.\n\n- Fixed several core engine bugs, and problems with Ledger's XML data\n  format.\n\n- Errors in XML or Gnucash data now report the correct line number for\n  the error, instead of always showing line 1.\n\n- 'configure' has been changed to always use a combination of both\n  compile and link tests for every feature, in order to identify\n  environment problems right away.\n\n- The \"D <COMM>\" command, released in 2.1, now requires a commoditized\n  amount, such as \"D $1,000.00\".  This sets not only the default\n  commodity, but several flags to be used with all such commodities\n  (such as whether numbering should be American or European by\n  default).  This entry may be used be many times; the most recent\n  seen specifies the default for entries that follow.\n\n- The binary cache now remembers the price history database that was\n  used, so that if LEDGER_PRICE_DB is silently changed, the cache will\n  be thrown away and rebuilt.\n\n- OFX data importing is now supported, using libofx\n  (http://libofx.sourceforge.net).  configure will check if the\n  library is available.  You may need to add CPPFLAGS or LDFLAGS to\n  the command-line for the appropriate headers and library to be\n  found.  This support is preliminary, and as such is not documented\n  yet.\n\n- All journal entries now remember where they were read from.  New\n  format codes to access this information are: %S for source path, %B\n  for beginning character position, and %E for ending character\n  position.\n\n- Added \"pricesdb\" command, which is identical to \"prices\" except that\n  it uses the same format as Ledger's usual price history database.\n\n- Added \"output FILE\" command, which attempts to reproduce the input\n  journal FILE exactly.  Meant for future GUI usage.  This command\n  relies on --write-hdr-format and --write-xact-format, instead of\n  --print-format.\n\n- Added \"--reconcile BALANCE\" option, which attempts to reconcile all\n  matching transactions to the given BALANCE, outputting those that\n  would need to be \"cleared\" to match it.  Using by the\n  auto-reconciling feature of ledger.el (see below).\n\n  \"--reconcile-date DATE\" ignores any uncleared transactions after\n  DATE in the reconciling algorithm.  Since the algorithm is O(n^2)\n  (where 'n' is the number of uncleared transactions to consider),\n  this could have a substantial impact.\n\n- In ledger.el's *Reconcile* mode ('C-c C-r' from a ledger-mode file):\n\n  * 'a' adds a missing transaction\n  * 'd' deletes the current transaction\n  * 'r' attempts to auto-reconcile (same as 'C-u C-c C-r')\n  * 's' or 'C-x C-s' will save the ledger data file and show the\n    currently cleared balance\n  * 'C-c C-c' commits the pending transactions, marking them cleared.\n\n  This feature now works with Emacs 21.3.\n  Also, the reconciler no longer needs to ask \"how far back\" to go.\n\n- To support the reconciler, textual entries may now have a \"!\" flag\n  (pending) after the date, instead of a \"*\" flag (cleared).\n\n- There are a new set of value expression regexp commands:\n  * c//  entry code\n  * p//  payee\n  * w//  short account name\n  * W//  full account name\n  * e//  transaction note\n\n  This makes it possible to display transactions whose comment field\n  matches a particular text string.  For example:\n\n      ledger -l e/{tax}/ reg\n\n  prints out all the transactions with the comment \"{tax}\", which\n  might be used to identify items related to a tax report.\n\n## 2.1\n\n- Improved the autoconf system to be smarter about finding XML libs\n\n- Added --no-cache option, to always ignore any binary cache file\n\n- `ledger-reconcile' (in ledger.el) no longer asks for a number of days\n\n- Fixed %.XY format, where X is shorter than the string generated by Y\n\n- New directive for text files: \"D <COMM>\" specifies the default commodity\n  used by the entry command\n\n## 2.0\n\nThis version represents a full rewrite, while preserving much of the\noriginal data format and command-line syntax.  There are too many new\nfeatures to describe in full, but a quick list: value expressions,\ncomplex date masks, binary caching of ledger data, several new\nreporting options, a simple way to specify payee regexps, calculation\nand display predicates, and two-way Python integration.  Ledger also\nuses autoconf now, and builds as a library in addition to a\ncommand-line driver.\n\n### Differences from 1.7\n\n- changes in option syntax:\n\n  -d now specifies the display predicate.  To give a date mask similar\n  to 1.7, use the -p (period) option.\n\n  -P now generates the \"by payee\" report.  To specify a price database\n  to use, use --price-db.\n\n  -G now generates a net gain report.  To print totals in a format\n  consumable by gnuplot, use -J.\n\n  -l now specifies the calculation predicate.  To emulate the old\n  usage of \"-l \\$100\", use: -d \"AT>100\".\n\n  -N is gone.  Instead of \"-N REGEX\", use: -d \"/REGEX/?T>0:T\".\n\n  -F now specifies the report format string.  The old meaning of -F\n  now has little use.\n\n  -S now takes a value expression as the sorting criterion.  To get\n  the old meaning of \"-S\", use \"-S d\".\n\n  -n now means \"collapse entries in the register report\".  The get the\n  old meaning of -n in the balance report, use \"-T a\".\n\n  -p now specifies the reporting period.  You can convert commodities\n  in a report using value expressions.  For example, to display hours\n  at $10 per hour:\n\n      -T \"O>={0.01h}?{\\$10.00}*O:O\"\n\n  Or, to reduce totals, so that every $417 becomes 1.0 AU:\n\n      -T \"O>={\\$0.01}?{1.0 AU}*(O/{\\$417}):O\"\n\n- The use of \"+\" and \"-\" in ledger files to specify permanent regexps\n  has been removed.\n\n- The \"-from\" argument is no longer used by the \"entry\" command.\n  Simply remove it.\n\n### Features new to 2.0\n\n- The most significant feature to be added is \"value expressions\".\n  They are used in many places to indicate what to display, sorting\n  order, how to calculate totals, etc.  Logic and math operators are\n  supported, as well as simple functions.  See the manual.\n\n- If the environment variable LEDGER_FILE (or LEDGER) is used, a\n  binary cache of that ledger is kept in ~/.ledger-cache (or the file\n  given by LEDGER_CACHE).  This greatly speeds up subsequent queries.\n  Happens only if \"-f\" or \"--file\" is not used.\n\n- New 'xml' report outputs an XML version of what \"register\" would\n  have displayed.  This can be used to manipulate reported data in a\n  more scriptable way.\n\n  Ledger can also read as input the output from the \"xml\" report.  If\n  the \"xml\" report did not contain balanced entries, they will be\n  balanced by the \"<Unknown>\" account.  For example:\n\n      ledger reg rent\n\n  displays the same results as:\n\n      ledger xml rent | ledger -f - reg rent\n\n- Regexps given directly after the command name now apply only to\n  account names.  To match on a payee, use \"--\" to separate the two\n  kinds of regexps.  For example, to find a payee named \"John\" within\n  all Expenses accounts, use:\n\n      ledger register expenses -- john\n\n  Note: This command is identical (and internally converted) to:\n\n      ledger -l \"/expenses/|//john/\" register\n\n- To include entries from another file into a specific account, use:\n\n      !account ACCOUNT\n      !include FILE\n      !end\n\n- Register reports now show only matching account transactions.  Use\n  \"-r\" to see \"related accounts\" -- the account the transfer came from\n  or went to (This was the old behavior in 1.x, but led to confusion).\n  \"-r\" also works with balance reports, where it will total all the\n  transactions related to your query.\n\n- Automated transactions now use value expressions for the predicate.\n  The new syntax is:\n\n      = VALUE-EXPR\n        TRANSACTIONS...\n\n  Only one VALUE-EXPR is supported (compared to multiple account\n  regexps before).  However, since value expression allow for logic\n  chaining, there is no loss of functionality.  Matching can also be\n  much more comprehensive.\n\n- If Boost.Python is installed (libboost_python.a), ledger can support\n  two-way Python integration.  This feature is enabled by passing\n  --enable-python to the \"configure\" script before building.  Ledger\n  can then be used as a module (ledger.so), as well as supporting\n  Python function calls directly from value expressions.  See main.py\n  for an example of driving Ledger from Python.  It implements nearly\n  all the functionality of the C++ driver, main.cc.\n\n  (This feature has yet to mature, and so is being offered as a beta\n  feature in this release.  It is mostly functional, and those curious\n  are welcome to play with it.)\n\n- New reporting options:\n\n  * \"-o FILE\" outputs data to FILE.  If \"-\", output goes to stdout (the\n    default).\n\n  * -O shows base commodity values (this is the old behavior)\n  * -B shows basis cost of commodities\n  * -V shows market value of commodities\n  * -g reports gain/loss performance of each register item\n  * -G reports net gain/loss over time\n  * -A reports average transaction value (arithmetic mean)\n  * -D reports each transaction's deviation from the average\n\n  * -w uses 132 columns for the register report, rather than 80.  Set\n   the environment variable LEDGER_WIDE for this to be the default.\n\n  * \"-p INTERVAL\" allows for more flexible period reporting, such as:\n\n      monthly\n      every week\n      every 3 quarters\n      weekly from 12/20\n      monthly in 2003\n      weekly from last month until dec\n\n  * \"-y DATEFMT\" changes the date format used in all reports.  The\n    default is \"%Y/%m/%d\".\n\n    -Y and -W print yearly and weekly subtotals, just as -M prints\n    monthly subtotals.\n\n  * --dow shows cumulative totals for each day of the week.\n\n  * -P reports transactions grouped by payee\n\n  * -x reports the payee as the commodity; useful in some cases\n\n  * -j and -J replace the previous -G (gnuplot) option.  -j reports the\n    amounts column in a way gnuplot can consume, and -J the totals\n    column.  An example is in \"scripts/report\".\n\n  * \"--period-sort EXPR\" sorts transactions within a reporting period.\n    The regular -S option sorts all reported transactions.\n\n## 1.7\n\n- Pricing histories are now supported, so that ledger remembers the\n  historical prices of all commodities, and can present register\n  reports based on past and present market values as well as original\n  cost basis.  See the manual for more details on the new option\n  switches.\n\n## 1.6\n\n- Ledger can now parse timeclock files.  These are simple timelogs\n  that track in/out events, which can be maintained using my timeclock\n  tool.  By allowing ledger to parse these, it means that reporting\n  can be done on them in the same way as ledger files (the commodity\n  used is \"h\", for hours); it means that doing things like tracking\n  billable hours for clients, and invoicing those clients to transfer\n  hours into dollar values via a receivable account, is now trivial.\n  See the docs for more on how to do this.\n\n- Began keeping a NEWS file. :)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.3701171875,
          "content": "[![Join the chat at https://gitter.im/use-package/Lobby](https://badges.gitter.im/use-package/Lobby.svg)](https://gitter.im/use-package/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n![Build Status master](https://github.com/ledger/ledger/actions/workflows/cmake.yml/badge.svg)\n[![Status](https://img.shields.io/badge/status-active-brightgreen.svg?style=flat)](https://github.com/ledger/ledger/pulse/monthly)\n[![License](https://img.shields.io/badge/license-BSD-blue.svg?style=flat)](https://opensource.org/licenses/BSD-3-Clause)\n[![GitHub release](https://img.shields.io/github/release/ledger/ledger.svg?style=flat)](https://github.com/ledger/ledger/releases)\n\n# Ledger: Command-Line Accounting\n\nLedger is a powerful, double-entry accounting system that is accessed from the\nUNIX command-line.  This may put off some users, since there is no flashy UI,\nbut for those who want unparalleled reporting access to their data there are\nfew alternatives.\n\nLedger uses text files for input.  It reads the files and generates reports;\nthere is no other database or stored state.  To use Ledger, you create a\nfile of your account names and transactions, run from the command line with\nsome options to specify input and requested reports, and get output.\nThe output is generally plain text, though you could generate a graph or\nhtml instead.  Ledger is simple in concept, surprisingly rich in ability,\nand easy to use.\n\n\n## For the Impatient\n\nI know, you just want to build and play.  If you have all the [dependencies](#dependencies)\ninstalled, then simply do this:\n\n    $ git clone git@github.com:ledger/ledger.git\n    $ cd ledger && ./acprep update  # Update to the latest, configure, make\n\nNow try your first ledger command:\n\n    $ ./ledger -f test/input/sample.dat reg\n\nFor help on keeping your journal have a look at the [documentation], the [wiki],\nand the [Resources](#resources) section at the end of this file.\nAn Emacs mode for Ledger files can be found in the\n[ledger/ledger-mode repository] and a vim plugin is located in the\n[ledger/vim-ledger repository].\n\n## Docker version\n\nIf you have Docker installed on your computer or server, you can use a [Docker version](https://hub.docker.com/r/dcycle/ledger/) of this software, without installing any further dependencies:\n\n    $ docker run --rm -v \"$PWD\"/test/input:/data dcycle/ledger:1 -f /data/sample.dat reg\n\n## Dependencies\n\nIf you wish to proceed in this venture, you'll need a few dependencies.\nNote that some features, e.g. `--import` require building Ledger with Python support.\nThe easiest way to get them for your platform is to run this handy Python script:\n\n    $ ./acprep dependencies\n\n\nIf that doesn't completely work, here are the dependencies for building the\ncurrent `master` branch:\n\nDependency  | Version (or greater)\n------------|---------------------\n[CMake]     | 3.16.2\n[Boost]     | 1.72\n[Gmp]       | 6.1.2\n[Mpfr]      | 4.0.2\n[utfcpp]    | 3.2.3\n[ICU]       | 63 _optional_\n[gettext]   | 0.17 _optional_\n[libedit]   | 20090111-3.0 _optional_\n[Python]    | 3.9 _optional_\n[Gpgmepp]   | 1.13.1 _optional_\n[doxygen]   | 1.9.5 _optional_, for `make docs`\n[graphviz]  | 2.20.3 _optional_, for `make docs`\n[texinfo]   | 4.13 _optional_, for `make docs`\n[lcov]      | 1.6 _optional_, for `make report`, used with `./acprep gcov`\n[sloccount] | 2.26 _optional_, for `make sloc`\n\n### macOS\n\nYou can use [Homebrew] or [MacPorts] to install build dependencies for Ledger\neasily on macOS.\n\n#### 1. Homebrew\n\nIf you use Homebrew, to install the dependencies you would run:\n\n    $ brew install cmake boost boost-python3 gmp mpfr\n\n#### 2. MacPorts\n\nIf you build stuff using MacPorts on macOS, as I do, here is what you would\nrun:\n\n    $ sudo port install -f cmake python37 \\\n         libiconv zlib gmp \\\n         mpfr ncurses ncursesw \\\n         gettext libedit boost-jam \\\n         boost +st+python37+icu texlive doxygen graphviz \\\n         texinfo lcov sloccount\n\n### Conda\n\nThe dependencies for building Ledger are available from [conda-forge] on certain\nplatforms (for example, `linux-64`), which can be used with [Conda] or [mamba].\n\nWith Conda you could run:\n\n    $ conda install -c conda-forge python=3 cmake boost gmp mpfr \\\n         gettext libedit texinfo doxygen graphviz\n\n### Ubuntu\n\nIf you're going to build on Ubuntu, `sudo apt-get install ...` the\nfollowing packages (current as of Ubuntu 18.04):\n\n    $ sudo apt-get install build-essential cmake doxygen \\\n         libboost-system-dev libboost-dev python3-dev gettext git \\\n         libboost-date-time-dev libboost-filesystem-dev \\\n         libboost-iostreams-dev libboost-python-dev libboost-regex-dev \\\n         libboost-test-dev libedit-dev libgmp3-dev libmpfr-dev texinfo tzdata\n\n### Debian\n\nDebian 10 (bullseye), Debian 11 (\"bullseye\"), Debian testing and Debian\nunstable (sid) contain all components needed to build ledger.  You can\ninstall all required build dependencies using the following command:\n\n    $ sudo apt-get install build-essential cmake autopoint texinfo python3-dev \\\n         zlib1g-dev libbz2-dev libgmp3-dev gettext libmpfr-dev \\\n         libboost-date-time-dev libboost-filesystem-dev \\\n         libboost-graph-dev libboost-iostreams-dev \\\n         libboost-python-dev libboost-regex-dev libboost-test-dev\n\n### Fedora\n\nYou can install all required build dependencies under Fedora using the\nfollowing command (tested with Fedora 32):\n\n    $ sudo dnf install boost-date-time boost-devel boost-filesystem \\\n        boost-iostreams boost-python3-devel boost-regex boost-system \\\n        boost-test cmake doxygen gettext git gmp-devel libedit-devel \\\n        mpfr-devel python3-devel texinfo tzdata\n\n## Building\n\nThe next step is preparing your environment for building.  While you can use\n`cmake .` and make, I've prepared a script that does a lot more of the\nfootwork for you:\n\n    $ ./acprep update\n    # or, if you want to use the Boost libraries with suffix -mt, install in\n    # $HOME/local and build with 2 processes in parallel\n    $ ./acprep update --boost-suffix=-mt --prefix=$HOME/local -j2\n\nPlease read the contents of `CMakeFiles/CMakeOutput.log` and\n`CMakeFiles/CMakeError.log` if the configure step fails.  Also,\nsee the `help` subcommand to `acprep`, which explains some of its many\noptions.  It's pretty much the only command I run for configuring, building\nand testing Ledger.\n\nYou can run `make check` to confirm the result, and `make install` to install.\n\n## Resources\n\nNow that you're up and running, here are a few resources to keep in mind:\n\n - [Homepage]\n - [Documentation]\n - [IRC channel][IRC]: #ledger channel on Libera Chat\n - [Mailing List / Forum][mailing list]\n - [GitHub project page][github]\n - [Code analysis][openhub]\n\nIf you have ideas you'd like to share, the best way is either to e-mail me a\npatch (I prefer attachments over pasted text), or to [get an account on GitHub](https://github.com/signup).\nOnce you do, fork the [Ledger project][github],\nhack as much as you like, then [open a pull request on GitHub](https://github.com/ledger/ledger/pulls).\n\n[Homepage]: https://ledger-cli.org/\n[documentation]: https://www.ledger-cli.org/docs.html\n[mailing list]: https://list.ledger-cli.org/\n[wiki]: https://wiki.ledger-cli.org/\n[IRC]: irc://irc.libera.chat/ledger\n[github]: https://github.com/ledger/ledger\n[ledger/vim-ledger repository]: https://github.com/ledger/vim-ledger\n[ledger/ledger-mode repository]: https://github.com/ledger/ledger-mode\n[Homebrew]: https://brew.sh/\n[MacPorts]: https://www.macports.org/\n[CMake]: https://cmake.org\n[Boost]: https://boost.org\n[GMP]: https://gmplib.org/\n[MPFR]: https://www.mpfr.org/\n[utfcpp]: https://utfcpp.sourceforge.net\n[ICU]: https://icu.unicode.org\n[gettext]: https://www.gnu.org/software/gettext/\n[libedit]: https://thrysoee.dk/editline/\n[Python]: https://python.org\n[Gpgmepp]: https://www.gnupg.org/related_software/gpgme/\n[doxygen]: https://www.doxygen.org/\n[graphviz]: https://graphviz.org/\n[texinfo]: https://www.gnu.org/software/texinfo/\n[lcov]: https://ltp.sourceforge.net/coverage/lcov.php\n[sloccount]: https://www.dwheeler.com/sloccount/\n[pcre]: https://www.pcre.org/\n[libofx]: https://libofx.sourceforge.net\n[expat]: https://libexpat.github.io\n<!--\nxmlsoft url kept as http since its TLS certificate setup is incorrect and browser show\na \"This Connection Is Not Private\" message. [Last checked: 2023-03-13]\n-->\n[libxml2]: http://xmlsoft.org\n[openhub]: https://www.openhub.net/p/ledger\n[conda-forge]: https://conda-forge.org\n[Conda]: https://conda.io\n[mamba]: https://github.com/mamba-org/mamba\n"
        },
        {
          "name": "acprep",
          "type": "blob",
          "size": 47.1005859375,
          "content": "#!/usr/bin/env python3\n\n# acprep, version 3.1\n#\n# This script simply sets up the compiler and linker flags for all the various\n# build permutations I use for testing and profiling.\n\nimport inspect\nimport logging\nimport logging.handlers\nimport optparse\nimport os\nimport re\nimport shutil\nimport sys\nimport locale\n\ntry:\n    import hashlib\nexcept:\n    import md5\n\nfrom os.path import *\nfrom stat import *\nfrom subprocess import Popen, PIPE, call\n\nLEVELS = {'DEBUG':    logging.DEBUG,\n          'INFO':     logging.INFO,\n          'WARNING':  logging.WARNING,\n          'ERROR':    logging.ERROR,\n          'CRITICAL': logging.CRITICAL}\n\ndef which(program):\n    def is_exe(fpath):\n        return os.path.exists(fpath) and os.access(fpath, os.X_OK)\n\n    def ext_candidates(fpath):\n        yield fpath\n        for ext in os.environ.get(\"PATHEXT\", \"\").split(os.pathsep):\n            yield fpath + ext\n\n    fpath, fname = os.path.split(program)\n    if fpath:\n        if is_exe(program):\n            return program\n    else:\n        for path in os.environ[\"PATH\"].split(os.pathsep):\n            exe_file = os.path.join(path, program)\n            for candidate in ext_candidates(exe_file):\n                if is_exe(candidate):\n                    return candidate\n\n    return None\n\nclass BoostInfo(object):\n    def dependencies(self, system):\n        if system in ['darwin-homebrew']:\n            return [ 'boost' ]\n\n        if system in ['darwin-macports']:\n            return [ 'boost-jam', 'boost', '+python37' ]\n\n        if system in ['centos']:\n            return [ 'boost-devel' ]\n\n        elif system in ['ubuntu-jammy', 'ubuntu-focal', 'ubuntu-bionic', 'ubuntu-xenial',\n                        'ubuntu-eoan', 'ubuntu-trusty', 'ubuntu-cosmic']:\n            return [ 'libboost-dev',\n                     'libboost-date-time-dev',\n                     'libboost-filesystem-dev',\n                     'libboost-iostreams-dev',\n                     'libboost-python-dev',\n                     'libboost-regex-dev',\n                     'libboost-system-dev',\n                     'libboost-test-dev',\n                     'tzdata' ]\n\n        elif system in [ 'ubuntu-saucy', 'ubuntu-precise']:\n            return [ 'autopoint',\n                     'libboost-dev',\n                     'libboost-test-dev',\n                     'libboost-regex-dev',\n                     'libboost-date-time-dev',\n                     'libboost-filesystem-dev',\n                     'libboost-iostreams-dev',\n                     'libboost-python-dev' ]\n\n        elif system in ['ubuntu-lucid']:\n            return [ 'bjam', 'autopoint',\n                     'libboost-dev',\n                     'libboost-regex-dev',\n                     'libboost-date-time-dev',\n                     'libboost-filesystem-dev',\n                     'libboost-iostreams-dev',\n                     'libboost-python-dev' ]\n\n\nclass CommandLineApp(object):\n    \"Base class for building command line applications.\"\n\n    force_exit    = True           # If true, always ends run() with sys.exit()\n    log_handler   = None\n\n    def __init__(self):\n        \"Initialize CommandLineApp.\"\n        # Create the logger\n        self.log = logging.getLogger(os.path.basename(sys.argv[0]))\n        ch = logging.StreamHandler()\n        formatter = logging.Formatter(\"%(name)s: %(levelname)s: %(message)s\")\n        ch.setFormatter(formatter)\n        self.log.addHandler(ch)\n        self.log_handler = ch\n\n        # Setup the options parser\n        usage = 'usage: %prog [OPTIONS...] [ARGS...]'\n        op = self.option_parser = optparse.OptionParser(usage = usage,\n                                                        conflict_handler = 'resolve')\n        op.add_option('', '--debug',\n                      action='store_true', dest='debug',\n                      default=False, help='show debug messages and pass exceptions')\n        op.add_option('-v', '--verbose',\n                      action='store_true', dest='verbose',\n                      default=False, help='show informational messages')\n        op.add_option('-q', '--quiet',\n                      action='store_true', dest='quiet',\n                      default=False, help='do not show log messages on console')\n        op.add_option('', '--log', metavar='FILE',\n                      type='string', action='store', dest='logfile',\n                      default=False, help='append logging data to FILE')\n        op.add_option('', '--loglevel', metavar='LEVEL',\n                      type='string', action='store', dest='loglevel',\n                      default=False, help='set log level: DEBUG, INFO, WARNING, ERROR, CRITICAL')\n\n        self.options = op.get_default_values()\n\n    def main(self, *args):\n        \"\"\"Main body of your application.\n\n        This is the main portion of the app, and is run after all of the\n        arguments are processed.  Override this method to implement the primary\n        processing section of your application.\"\"\"\n        pass\n\n    def handleInterrupt(self):\n        \"\"\"Called when the program is interrupted via Control-C or SIGINT.\n        Returns exit code.\"\"\"\n        self.log.error('Canceled by user.')\n        return 1\n\n    def handleMainException(self):\n        \"Invoked when there is an error in the main() method.\"\n        if not self.options.debug:\n            self.log.exception('Caught exception')\n        return 1\n\n    ## INTERNALS (Subclasses should not need to override these methods)\n\n    def run(self):\n        \"\"\"Entry point.\n\n        Process options and execute callback functions as needed.  This method\n        should not need to be overridden, if the main() method is defined.\"\"\"\n        # Process the options supported and given\n        self.options, main_args = self.option_parser.parse_args(values=self.options)\n\n        if self.options.logfile:\n            fh = logging.handlers.RotatingFileHandler(self.options.logfile,\n                                                      maxBytes = (1024 * 1024),\n                                                      backupCount = 5)\n            formatter = logging.Formatter(\"%(asctime)s - %(levelname)s: %(message)s\")\n            fh.setFormatter(formatter)\n            self.log.addHandler(fh)\n\n        if self.options.quiet:\n            self.log.removeHandler(self.log_handler)\n            ch = logging.handlers.SysLogHandler()\n            formatter = logging.Formatter(\"%(name)s: %(levelname)s: %(message)s\")\n            ch.setFormatter(formatter)\n            self.log.addHandler(ch)\n            self.log_handler = ch\n\n        if self.options.loglevel:\n            self.log.setLevel(LEVELS[self.options.loglevel])\n        elif self.options.debug:\n            self.log.setLevel(logging.DEBUG)\n        elif self.options.verbose:\n            self.log.setLevel(logging.INFO)\n\n        exit_code = 0\n        try:\n            # We could just call main() and catch a TypeError, but that would\n            # not let us differentiate between application errors and a case\n            # where the user has not passed us enough arguments.  So, we check\n            # the argument count ourself.\n            argspec = inspect.getfullargspec(self.main)\n            expected_arg_count = len(argspec[0]) - 1\n\n            if len(main_args) >= expected_arg_count:\n                exit_code = self.main(*main_args)\n            else:\n                self.log.debug('Incorrect argument count (expected %d, got %d)' %\n                               (expected_arg_count, len(main_args)))\n                self.option_parser.print_help()\n                exit_code = 1\n\n        except KeyboardInterrupt:\n            exit_code = self.handleInterrupt()\n\n        except SystemExit as msg:\n            exit_code = msg.args[0]\n\n        except Exception:\n            exit_code = self.handleMainException()\n            if self.options.debug:\n                raise\n\n        if self.force_exit:\n            sys.exit(exit_code)\n        return exit_code\n\n\nclass PrepareBuild(CommandLineApp):\n    #########################################################################\n    # Initialization routines                                               #\n    #########################################################################\n\n    def initialize(self):\n        self.log.debug('Initializing all state variables')\n\n        self.should_clean    = False\n        self.configured      = False\n        self.current_ver     = None\n        #self.current_flavor  = 'default'\n        self.current_flavor  = 'debug'\n        self.products_dir    = None\n        self.configure_args  = []\n        self.CXXFLAGS        = []\n        self.LDFLAGS         = []\n\n        self.envvars = {\n            'CXX':      '',\n            'CXXFLAGS': '',\n            'LDFLAGS':  '',\n        }\n\n        for varname in self.envvars.keys():\n            if varname in os.environ:\n                self.envvars[varname] = os.environ[varname]\n\n                if varname.endswith('FLAGS'):\n                    self.__dict__[varname] = str.split(os.environ[varname])\n                    self.envvars[varname]  = ''\n\n        # If ~/Products/ or build/ exists, use them instead of the source tree\n        # for building\n        products = self.default_products_directory()\n        if (exists(products) and isdir(products)) or \\\n           (exists('build') and isdir('build')):\n            self.options.build_dir = None\n\n    def __init__(self):\n        CommandLineApp.__init__(self)\n        self.log.setLevel(logging.INFO)\n\n        self.source_dir = os.getcwd()\n\n        op = self.option_parser\n\n        op.add_option('', '--help', action=\"callback\",\n                      callback=self.option_help,\n                      help='Show this help text')\n        op.add_option('-j', '--jobs', metavar='N',\n                      type='int', action='store', dest='jobs',\n                      default=1, help='Allow N make jobs at once')\n\n        op.add_option('', '--boost', metavar='BOOST_ROOT',\n                      action=\"store\", dest=\"boost_root\",\n                      help='Set Boost library root (ex: \"--boost=/usr/local\")')\n        op.add_option('', '--boost-suffix', metavar='BOOST_SUFFIX',\n                      action=\"store\", dest=\"boost_suffix\",\n                      help='Set Boost library suffix (ex: \"--boost-suffix=-mt\")')\n        op.add_option('', '--boost-include', metavar='BOOST_INCLUDE',\n                      action=\"store\", dest=\"boost_include\",\n                      help='Set Boost include path (ex: \"--boost-include=DIR\")')\n\n        op.add_option('', '--compiler', metavar='COMPILER',\n                      action=\"store\", dest=\"compiler\",\n                      help='Use the Clang C++ compiler')\n        op.add_option('', '--cxx', metavar='COMPILER',\n                      action=\"store\", dest=\"compiler\",\n                      help='Use the Clang C++ compiler')\n\n        op.add_option('-N', '--ninja', action='store_true', dest='use_ninja',\n                      default=False,\n                      help='Use ninja to build, rather than make')\n        op.add_option('', '--no-git', action='store_true', dest='no_git',\n                      default=False,\n                      help='Do not call out to Git; useful for offline builds')\n        op.add_option('', '--doxygen', action='store_true',\n                      dest='enable_doxygen', default=False,\n                      help='Enable use of Doxygen to build ref manual (\"make docs\")')\n        op.add_option('', '--python', action='store_true', dest='python',\n                      default=False,\n                      help='Enable Python support')\n        op.add_option('', '--no-python', action='store_false', dest='python',\n                      help='Disable python support (default)')\n        op.add_option('', '--prefix', metavar='DIR', action=\"store\",\n                      dest=\"prefix_dir\", help='Use custom installation prefix')\n        op.add_option('', '--products', metavar='DIR', action=\"store\",\n                      dest=\"option_products\",\n                      help='Collect all build products in this directory')\n        op.add_option('', '--output', metavar='DIR', action=\"store\",\n                      default=self.source_dir,\n                      dest=\"build_dir\", help='Build in the specified directory')\n        op.add_option('', '--local', action=\"callback\",\n                      callback=self.option_local,\n                      help='Build directly within the source tree (default)')\n\n        self.options = op.get_default_values()\n\n        self.initialize()\n\n    def main(self, *args):\n        if args and args[0] in ['default', 'debug', 'opt', 'gcov', 'gprof']:\n            self.current_flavor = args[0]\n            args = args[1:]\n\n        if args:\n            cmd = args[0]\n            if 'phase_' + cmd not in PrepareBuild.__dict__:\n                self.log.error(\"Unknown build phase: \" + cmd + \"\\n\")\n                sys.exit(1)\n            else:\n                args = args[1:]\n        else:\n            cmd = 'config'\n\n        self.log.info('Invoking primary phase: ' + cmd)\n        PrepareBuild.__dict__['phase_' + cmd](self, *args)\n\n    #########################################################################\n    # General utility code                                                  #\n    #########################################################################\n\n    def execute(self, *args):\n        try:\n            self.log.debug('Executing command: ' + ' '.join(args))\n\n            retcode = call(args, shell=False)\n            if retcode < 0:\n                self.log.error(\"Child was terminated by signal\", -retcode)\n                sys.exit(1)\n            elif retcode != 0:\n                self.log.error(\"Execution failed: \" + ' '.join(args))\n                sys.exit(1)\n        except OSError as e:\n            self.log.error(\"Execution failed: \" + e)\n            sys.exit(1)\n\n    def isnewer(self, file1, file2):\n        \"Check if file1 is newer than file2.\"\n        if not exists(file2):\n            return True\n        return os.stat(file1)[ST_MTIME] > os.stat(file2)[ST_MTIME]\n\n    #########################################################################\n    # Determine information about the surroundings                          #\n    #########################################################################\n\n    def prefix_directory(self):\n        if self.options.prefix_dir:\n            return self.options.prefix_dir\n        else:\n            return None\n\n    def default_products_directory(self):\n        return join(os.environ['HOME'], \"Products\")\n\n    def products_directory(self):\n        if not self.products_dir:\n            products = self.default_products_directory()\n\n            if not exists(products) or not isdir(products):\n                products = join(self.source_dir, 'build')\n\n            products = join(products, basename(self.source_dir))\n\n            self.products_dir = products\n\n        return self.products_dir\n\n    def build_directory(self):\n        if not self.options.build_dir:\n            self.options.build_dir = join(self.products_directory(),\n                                          self.current_flavor)\n        return self.options.build_dir\n\n    def ensure(self, dirname):\n        if not exists(dirname):\n            self.log.info('Making directory: ' + dirname)\n            os.makedirs(dirname)\n        elif not isdir(dirname):\n            self.log.error('Directory is not a directory: ' + dirname)\n            sys.exit(1)\n        return dirname\n\n    def git_working_tree(self):\n        return exists('.git') and isdir('.git') and not self.options.no_git\n\n    def current_version(self):\n        if not self.current_ver:\n            major, minor, patch, date = None, None, None, None\n\n            version_m4 = open('CMakeLists.txt', 'r')\n            for line in version_m4.readlines():\n                match = re.match(r'^set\\(Ledger_VERSION_MAJOR ([0-9]+)\\)', line)\n                if match:\n                    major = match.group(1)\n                match = re.match(r'^set\\(Ledger_VERSION_MINOR ([0-9]+)\\)', line)\n                if match:\n                    minor = match.group(1)\n                match = re.match(r'^set\\(Ledger_VERSION_PATCH ([0-9]+)\\)', line)\n                if match:\n                    patch = match.group(1)\n                match = re.match(r'^set\\(Ledger_VERSION_DATE ([0-9]+)\\)', line)\n                if match:\n                    date = match.group(1)\n                    break\n            self.current_ver = \"%s.%s.%s%s\" % (major, minor, patch,\n                                               \"-%s\" % date if date else \"\")\n            version_m4.close()\n        return self.current_ver\n\n    def phase_products(self, *args):\n        self.log.info('Executing phase: products')\n        print(self.products_directory())\n\n    def phase_info(self, *args):\n        self.log.info('Executing phase: info')\n\n        environ, conf_args = self.configure_environment()\n\n        self.log.info(\"Current version          => \" + self.current_version())\n        self.log.info(\"Current flavor           => \" + self.current_flavor)\n        self.log.info(\"Source directory         => \" + self.source_dir)\n        if self.prefix_directory():\n            self.log.info(\"Installation prefix      => \" + self.prefix_directory())\n        self.log.info(\"Products directory       => \" + self.products_directory())\n        self.log.info(\"Build directory          => \" + self.build_directory())\n\n        self.log.debug('CMake environment =>')\n\n        keys = environ.keys()\n        for key in sorted(keys):\n            if key in ['PATH', 'CXX'] or key.endswith('FLAGS'):\n                self.log.debug('  %s=%s' % (key, environ[key]))\n\n        self.log.debug('CMake arguments   =>')\n\n        for arg in conf_args + list(args):\n            self.log.debug('  %s' % arg)\n\n    def phase_sloc(self, *args):\n        self.log.info('Executing phase: sloc')\n        self.execute('sloccount', 'src', 'python', 'test')\n\n    #########################################################################\n    # Update local files with the latest information                        #\n    #########################################################################\n\n    def phase_pull(self, *args):\n        self.log.info('Executing phase: pull')\n        if self.git_working_tree():\n            self.execute('git', 'pull')\n\n    #########################################################################\n    # Automatic installation of build dependencies                          #\n    #########################################################################\n\n    def phase_dependencies(self, *args):\n        self.log.info('Executing phase: dependencies')\n\n        self.log.info(\"Installing Ledger's build dependencies ...\")\n\n        system = os.uname().sysname\n\n        if system == 'Darwin':\n            if shutil.which('port'):\n                self.log.info('Looks like you are using MacPorts on macOS')\n                packages = [\n                    'sudo', 'port', 'install', '-f',\n                    'automake', 'autoconf', 'libtool',\n                    'python37',\n                    'libiconv',\n                    'zlib',\n                    'gmp', 'mpfr',\n                    'ncurses',\n                    'gettext',\n                    'libedit',\n                    'texlive-xetex', 'doxygen', 'graphviz', 'texinfo',\n                    'lcov', 'sloccount'\n                ] + BoostInfo().dependencies('darwin-macports')\n                self.log.info('Executing: ' + ' '.join(packages))\n                self.execute(*packages)\n            elif shutil.which('brew'):\n                self.log.info('Looks like you are using Homebrew on macOS')\n                packages = [\n                    'brew', 'install',\n                    'cmake', 'ninja',\n                    'mpfr', 'gmp',\n                ] + BoostInfo().dependencies('darwin-homebrew')\n                self.log.info('Executing: ' + ' '.join(packages))\n                self.execute(*packages)\n            elif shutil.which('fink'):\n                self.log.info('Looks like you are using Fink on macOS')\n                self.log.error(\"I don't know the package names for Fink yet!\")\n                sys.exit(1)\n            elif shutil.which('nix'):\n                self.log.info('Looks like you are using Nixpkgs on macOS')\n                packages = [\n                    'nix', 'develop',\n                ]\n                self.log.info('Executing: ' + ' '.join(packages))\n                self.execute(*packages)\n\n        elif system == 'Linux':\n            if exists('/etc/issue'):\n                issue_name = open('/etc/issue').readline()\n                if issue_name.startswith('Ubuntu'):\n                    info = dict([line.strip().split('=', 1)\n                                 for line in open('/etc/lsb-release')])\n                    release = info['DISTRIB_CODENAME']\n                    self.log.info('Looks like you are using APT on Ubuntu ' + release)\n                    packages = [\n                        'sudo', 'apt-get', 'install',\n                        'build-essential',\n                    ]\n                    if release == 'jammy':\n                        packages.extend([\n                            'doxygen',\n                            'cmake',\n                            'ninja-build',\n                            'zlib1g-dev',\n                            'libbz2-dev',\n                            'python3-dev',\n                            'libgmp3-dev',\n                            'libmpfr-dev',\n                            'gettext',\n                            'libedit-dev',\n                            'texinfo',\n                            'lcov',\n                            'libutfcpp-dev',\n                            'sloccount'\n                        ])\n                    elif release == 'focal':\n                        packages.extend([\n                            'doxygen',\n                            'cmake',\n                            'ninja-build',\n                            'zlib1g-dev',\n                            'libbz2-dev',\n                            'python-dev',\n                            'libgmp3-dev',\n                            'libmpfr-dev',\n                            'gettext',\n                            'libedit-dev',\n                            'texinfo',\n                            'lcov',\n                            'libutfcpp-dev',\n                            'sloccount'\n                        ])\n                    elif release == 'bionic':\n                        packages.extend([\n                            'doxygen',\n                            'cmake',\n                            'ninja-build',\n                            'zlib1g-dev',\n                            'libbz2-dev',\n                            'python-dev',\n                            'libgmp3-dev',\n                            'libmpfr-dev',\n                            'gettext',\n                            'libedit-dev',\n                            'texinfo',\n                            'lcov',\n                            'libutfcpp-dev',\n                            'sloccount'\n                        ])\n                    elif release == 'trusty':\n                        packages.extend([\n                            'doxygen',\n                            'cmake',\n                            'ninja-build',\n                            'zlib1g-dev',\n                            'libbz2-dev',\n                            'python-dev',\n                            'libgmp3-dev',\n                            'libmpfr-dev',\n                            'gettext',\n                            'libedit-dev',\n                            'texinfo',\n                            'lcov',\n                            'libutfcpp-dev',\n                            'sloccount'\n                        ])\n                    elif release == 'eoan':\n                        packages.extend([\n                            'doxygen',\n                            'cmake',\n                            'ninja-build',\n                            'zlib1g-dev',\n                            'libbz2-dev',\n                            'python-dev',\n                            'libgmp3-dev',\n                            'libmpfr-dev',\n                            'gettext',\n                            'libedit-dev',\n                            'texinfo',\n                            'lcov',\n                            'libutfcpp-dev',\n                            'sloccount'\n                        ])\n                    elif release == 'xenial':\n                        packages.extend([\n                            'doxygen',\n                            'cmake',\n                            'ninja-build',\n                            'zlib1g-dev',\n                            'libbz2-dev',\n                            'python-dev',\n                            'libgmp3-dev',\n                            'libmpfr-dev',\n                            'gettext',\n                            'libedit-dev',\n                            'texinfo',\n                            'lcov',\n                            'libutfcpp-dev',\n                            'sloccount'\n                        ])\n                    elif release == 'saucy':\n                        packages.extend([\n                            'doxygen',\n                            'cmake',\n                            'ninja-build',\n                            'zlib1g-dev',\n                            'libbz2-dev',\n                            'python-dev',\n                            'libgmp-dev',\n                            'libmpfr-dev',\n                            'gettext',\n                            'libedit-dev',\n                            'texinfo',\n                            'lcov',\n                            'sloccount'\n                        ])\n                    elif release == 'precise':\n                        packages.extend([\n                            'libtool',\n                            'cmake',\n                            'zlib1g-dev',\n                            'libbz2-dev',\n                            'python-dev',\n                            'libgmp-dev',\n                            'libmpfr-dev',\n                            'gettext',\n                            'libedit-dev',\n                            'texinfo',\n                            'lcov',\n                            'libutfcpp-dev',\n                            'sloccount'\n                        ])\n                    else:\n                        self.log.info('I do not recognize your version of Ubuntu!')\n                        packages = None\n                    if packages:\n                        packages.extend(\n                            BoostInfo().dependencies('ubuntu-' + release))\n                        self.log.info('Executing: ' + ' '.join(packages))\n                        self.execute(*packages)\n                elif issue_name.startswith('Arch Linux'):\n                    self.log.info('Looks like you are using Pacman on Arch Linux')\n                    packages = [\n                        'sudo', 'pacman', '-S', '--noconfirm',\n                        'base-devel',\n                        'boost',\n                        'doxygen',\n                        'gmp',\n                        'graphviz',\n                        'lcov',\n                        'libedit',\n                        'mpfr',\n                        'sloccount',\n                        'utf8cpp'\n                    ]\n                    self.log.info('Executing: ' + ' '.join(packages))\n                    self.execute(*packages)\n\n            if exists('/etc/debian_version'):\n                release = open('/etc/debian_version').readline()\n                if release.startswith('trixie'):\n                    self.log.info(f'Looks like you are using APT on Debian {release}')\n                    packages = [\n                        'sudo', 'apt', 'install', '-y', '--no-install-recommends',\n                        'clang',\n                        'cmake',\n                        'ninja',\n                        'libboost-dev',\n                        'libmpfr-dev',\n                        'libgmp-dev',\n                        'libicu-dev',\n                        'libedit-dev',\n                        'libutfcpp-dev',\n                        'gettext',\n                        'texinfo',\n                        'doxygen',\n                        'graphviz',\n                        'lcov',\n                        'sloccount',\n                    ]\n                    self.log.info('Executing: ' + ' '.join(packages))\n                    self.execute(*packages)\n                else:\n                    self.log.info(f\"I do not recognize your version '{release}' of Debian!\")\n\n            if exists('/etc/redhat-release'):\n                release = open('/etc/redhat-release').readline()\n                if release.startswith('CentOS'):\n                    self.log.info('Looks like you are using YUM on CentOS')\n                    packages = [\n                        'sudo', 'yum', 'install',\n                        'gcc',\n                        'gcc-c++',\n                        'compat-gcc-*',\n                        'make',\n                        'libtool',\n                        'autoconf',\n                        'automake',\n                        'zlib-devel',\n                        'bzip2-devel',\n                        'python-devel',\n                        'gmp-devel',\n                        'gettext-devel',\n                        #'mpfr-devel'\n                        'libedit-devel',\n                        #'texlive-full',\n                        #'doxygen',\n                        #'graphviz',\n                        'texinfo',\n                        #'lcov',\n                        #'sloccount'\n                    ]\n                    self.log.info('Executing: ' + ' '.join(packages))\n                    self.execute(*packages)\n                elif release.startswith('Fedora release 20'):\n                    self.log.info('Looks like you are using YUM on Fedora 20')\n                    packages = [\n                        'sudo', 'yum', 'install',\n                        'boost-devel',\n                        'bzip2-devel',\n                        'cmake',\n                        'doxygen',\n                        'gcc',\n                        'gcc-c++',\n                        'gettext',\n                        'gettext-devel',\n                        'gmp-devel',\n                        'lcov',\n                        'libedit-devel',\n                        'mpfr-devel',\n                        'ninja-build',\n                        'python-devel',\n                        'sloccount',\n                        'texinfo',\n                        'zlib-devel'\n                    ]\n                    self.log.info('Executing: ' + ' '.join(packages))\n                    self.execute(*packages)\n\n        elif system.startswith('CYGWIN'):\n            self.log.info('Looks like you are using Cygwin')\n            self.log.info('Please install the dependencies manually.')\n\n    #########################################################################\n    # Determine the system's basic configuration                            #\n    #########################################################################\n\n    def setup_for_johnw(self):\n        self.configure_args.append('-DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON')\n\n        if not self.options.compiler:\n            self.configure_args.append('-DCMAKE_CXX_COMPILER:PATH=/usr/local/bin/clang++')\n\n            if self.current_flavor == 'opt':\n                self.configure_args.append('-DCMAKE_CXX_FLAGS_RELEASE:STRING=-O3')\n                self.configure_args.append('-DCMAKE_EXE_LINKER_FLAGS:STRING=-O3')\n                self.configure_args.append('-DCMAKE_SHARED_LINKER_FLAGS:STRING=-O3')\n                self.configure_args.append('-DCMAKE_MODULE_LINKER_FLAGS:STRING=-O3')\n            #else:\n            #    self.CXXFLAGS.append('-g -O1 -faddress-sanitizer')\n            #    self.LDFLAGS.append('-g -O1 -faddress-sanitizer')\n\n            self.configure_args.append(self.source_dir)\n\n        else:\n            self.configure_args.append('-DCMAKE_CXX_COMPILER:PATH=' + self.options.compiler)\n            self.configure_args.append('-DCMAKE_INCLUDE_PATH:STRING=/usr/local/include')\n            self.configure_args.append('-DCMAKE_LIBRARY_PATH:STRING=/usr/local/lib')\n            self.configure_args.append('-DBOOST_ROOT=/usr/local')\n            self.configure_args.append(self.source_dir)\n\n    def setup_for_system(self):\n        system = os.uname().sysname\n        self.log.info('System type is => ' + system)\n\n        if self.options.enable_doxygen:\n            self.configure_args.append('-DUSE_DOXYGEN=1')\n        if self.options.python:\n            self.configure_args.append('-DUSE_PYTHON=1')\n\n        if system.startswith('CYGWIN'):\n            self.configure_args.append('-G')\n            self.configure_args.append('Unix Makefiles')\n        elif system.startswith('MINGW'):\n            self.configure_args.append('-G')\n            self.configure_args.append('MSYS Makefiles')\n        elif self.options.use_ninja:\n            self.configure_args.append('-GNinja')\n\n        if exists('/Users/johnw/Projects/ledger/plan/TODO'):\n            self.setup_for_johnw()\n\n    def setup_flavor(self):\n        self.setup_for_system()\n\n        if 'setup_flavor_' + self.current_flavor not in PrepareBuild.__dict__:\n            self.log.error('Unknown build flavor \"%s\"' % self.current_flavor)\n            sys.exit(1)\n\n        self.log.info('Setting up build flavor => ' + self.current_flavor)\n        PrepareBuild.__dict__['setup_flavor_' + self.current_flavor](self)\n\n    def escape_string(self, data):\n        return re.sub(r'([\"\\\\\\\\])', '\\\\\\\\\\\\1', data)\n\n    def finalize_config(self):\n        self.setup_flavor()\n\n        for var in ('CXXFLAGS', 'LDFLAGS'):\n            value = self.__dict__[var]\n            if value:\n                first = not self.envvars[var]\n                for member in value:\n                    #escaped = self.escape_string(member)\n                    #if member != escaped:\n                    #    member = escaped\n                    if first:\n                        first = False\n                    else:\n                        self.envvars[var] += ' '\n                    self.envvars[var] += member\n                self.log.debug('Final value of %s: %s' %\n                               (var, self.envvars[var]))\n\n            elif var in self.envvars:\n                del self.envvars[var]\n\n    #########################################################################\n    # Options that can modify any build flavor                              #\n    #########################################################################\n\n    def option_local(self, option=None, opt_str=None, value=None, parser=None):\n        self.log.debug('Saw option --local')\n        self.options.build_dir = self.source_dir\n\n    def option_help(self, option=None, opt_str=None, value=None, parser=None):\n        self.phase_help()\n\n    #########################################################################\n    # The various build flavors                                             #\n    #########################################################################\n\n    def setup_flavor_default(self):\n        pass\n\n    def setup_flavor_debug(self):\n        self.configure_args.append('-DCMAKE_BUILD_TYPE=Debug')\n\n    def setup_flavor_opt(self):\n        self.configure_args.append('-DCMAKE_BUILD_TYPE=Release')\n        self.configure_args.append('-DNO_ASSERTS=1')\n\n    def setup_flavor_gcov(self):\n        # NO_ASSERTS is set so that branch coverage ignores the never-taken\n        # else branch inside assert statements.\n        self.configure_args.append('-DCMAKE_BUILD_TYPE=Debug')\n        self.configure_args.append('-DNO_ASSERTS=1')\n        self.configure_args.append('-DCLANG_GCOV=1')\n\n        self.CXXFLAGS.append('-fprofile-arcs')\n        self.CXXFLAGS.append('-ftest-coverage')\n        self.LDFLAGS.append('-fprofile-arcs')\n        self.LDFLAGS.append('-ftest-coverage')\n\n        if not self.options.compiler or self.options.compiler == \"clang-3.1\":\n            self.LDFLAGS.append('-lgcov')\n\n    def setup_flavor_gprof(self):\n        self.configure_args.append('-DCMAKE_BUILD_TYPE=Debug')\n\n        self.CXXFLAGS.append('-pg')\n        self.LDFLAGS.append('-pg')\n\n    #########################################################################\n    # Configure build tree using CMake                                      #\n    #########################################################################\n\n    def configure_environment(self):\n        self.finalize_config()\n\n        environ = dict(os.environ)\n        for key, value in self.envvars.items():\n            if value:\n                environ[key] = value\n\n        if self.build_directory() == self.source_dir:\n            conf_args = ['cmake']\n        else:\n            conf_args = ['cmake', self.source_dir]\n\n        if not which('cmake'):\n            self.log.error(\"Cannot find CMake, please check your PATH\")\n            sys.exit(1)\n\n        for var in ('CXX', 'CXXFLAGS', 'LDFLAGS'):\n            if self.envvars.get(var) and (var.endswith('FLAGS')\n                                          or exists(self.envvars[var])):\n                if var == 'CXX':\n                    conf_args.append('-DCMAKE_CXX_COMPILER=%s' %\n                                     self.envvars[var])\n                elif var == 'CXXFLAGS':\n                    conf_args.append('-DCMAKE_CXX_FLAGS=%s' %\n                                     self.envvars[var])\n                elif var == 'LDFLAGS':\n                    conf_args.append('-DCMAKE_EXE_LINKER_FLAGS=%s' %\n                                     self.envvars[var])\n\n        if self.options.boost_root:\n            conf_args.append('-DBOOST_ROOT=%s' %\n                             self.options.boost_root)\n            conf_args.append('-DBoost_NO_SYSTEM_PATHS=TRUE')\n        if self.options.boost_suffix:\n            conf_args.append('-DBoost_COMPILER=%s' %\n                             self.options.boost_suffix)\n        if self.options.boost_include:\n            conf_args.append('-DBOOST_INCLUDEDIR=%s' %\n                             self.options.boost_include)\n\n        if self.prefix_directory():\n            conf_args.append('-DCMAKE_INSTALL_PREFIX=%s' % self.prefix_directory())\n\n        return (environ, conf_args + self.configure_args)\n\n    def phase_configure(self, *args):\n        self.log.info('Executing phase: configure')\n\n        self.configured = True\n\n        environ, conf_args = self.configure_environment()\n        for arg in args:\n            if arg: conf_args.append(arg)\n\n        build_dir = self.ensure(self.build_directory())\n        try:\n            os.chdir(build_dir)\n\n            need_to_config = not isfile('rules.ninja' if self.options.use_ninja else 'Makefile')\n            if need_to_config:\n                self.log.debug('Source => ' + self.source_dir)\n                self.log.debug('Build  => ' + build_dir)\n                self.log.debug('configure env  => ' + str(environ))\n                self.log.debug('configure args => ' + str(conf_args))\n\n                configure = Popen(conf_args, shell=False, env=environ)\n                retcode = configure.wait()\n                if retcode < 0:\n                    self.log.error(\"Child was terminated by signal\", -retcode)\n                    sys.exit(1)\n                elif retcode != 0:\n                    self.log.error(\"Execution failed: \" + ' '.join(conf_args))\n                    sys.exit(1)\n            else:\n                self.log.debug('configure does not need to be run')\n\n        finally:\n            os.chdir(self.source_dir)\n\n    def phase_config(self, *args):\n        self.log.info('Executing phase: config')\n        self.phase_configure(*args)\n        if self.should_clean:\n            self.phase_clean()\n\n    #########################################################################\n    # Builds products from the sources                                      #\n    #########################################################################\n\n    def phase_make(self, *args):\n        self.log.info('Executing phase: make')\n\n        config_args = []\n        make_args   = []\n\n        for arg in args:\n            if arg.startswith('--') or arg.startswith('-D'):\n                config_args.append(arg)\n            else:\n                make_args.append(arg)\n\n        if self.options.jobs > 1 and self.current_flavor != 'gcov':\n            make_args.append('-j%d' % self.options.jobs)\n\n        if self.options.verbose:\n            make_args.append('-v' if self.options.use_ninja else 'VERBOSE=1')\n\n        self.log.debug('Configure arguments => ' + str(config_args))\n        self.log.debug('Makefile arguments  => ' + str(make_args))\n\n        if not self.configured:\n            self.phase_config(*config_args)\n\n        build_dir = self.ensure(self.build_directory())\n        try:\n            self.log.debug('Changing directory to ' + build_dir)\n            os.chdir(build_dir)\n\n            self.execute(*(['ninja' if self.options.use_ninja else 'make'] +\n                           make_args))\n        finally:\n            os.chdir(self.source_dir)\n\n    def phase_check(self, *args):\n        self.log.info('Executing phase: check')\n        build_dir = self.ensure(self.build_directory())\n        try:\n            self.log.debug('Changing directory to ' + build_dir)\n            os.chdir(build_dir)\n\n            make_args = list(args)\n            if self.options.jobs > 1:\n                make_args.append('-j%d' % self.options.jobs)\n\n            self.execute(*(['ctest'] + list(make_args)))\n        finally:\n            os.chdir(self.source_dir)\n\n    def phase_update(self, *args):\n        self.log.info('Executing phase: update')\n        self.phase_pull()\n        self.phase_make(*args)\n\n    #########################################################################\n    # Build directory cleaning phases                                       #\n    #########################################################################\n\n    def phase_clean(self, *args):\n        self.log.info('Executing phase: clean')\n        self.phase_make('clean')\n\n    def phase_gitclean(self, *args):\n        self.log.info('Executing phase: gitclean')\n        if self.git_working_tree():\n            self.execute('git', 'clean', '-dfx')\n\n    #########################################################################\n    # Other build phases                                                    #\n    #########################################################################\n\n    def configure_flavor(self, flavor, reset=True):\n        self.initialize()                  # reset everything\n        self.current_flavor = flavor\n        self.options.build_dir      = None # use the build/ tree\n        self.options.prefix_dir     = None\n\n        if reset and exists(self.build_directory()) and \\\n           isdir(self.build_directory()):\n            self.log.info('=== Wiping build directory %s ===' %\n                          self.build_directory())\n            try:\n                shutil.rmtree(self.build_directory())\n            except:\n                self.execute('chmod', '-R', 'u+w', self.build_directory())\n                self.execute('rm', '-fr', self.build_directory())\n\n    def phase_rsync(self, *args):\n        self.log.info('Executing phase: rsync')\n\n        proof_dir = 'ledger-proof'\n\n        if self.options.python:\n            proof_dir += \"-python\"\n        if self.options.compiler:\n            proof_dir += \"-\" + basename(self.options.compiler)\n\n        source_copy_dir = join(self.ensure(self.products_directory()), proof_dir)\n\n        self.execute('rsync', '-a', '--delete', '--exclude=/dist/',\n                     '--exclude=.git/', '--exclude=b/',\n                     '--exclude=/lib/boost-release/',\n                     '--exclude=/archive/', '--exclude=/build/',\n                     '%s/' % self.source_dir, '%s/' % source_copy_dir)\n\n        self.source_dir = source_copy_dir\n\n    def phase_proof(self, *args):\n        self.log.info('Executing phase: proof')\n\n        self.log.info('=== Copying source tree ===')\n        self.phase_rsync()\n\n        self.phase_makeall(reset=True, *args)\n\n        self.configure_flavor('opt', reset=False)\n        self.log.info('=== Testing opt ===')\n        # jww (2012-05-20): Can't use fullcheck yet\n        #self.phase_make('fullcheck')\n        self.phase_make('test')\n\n        self.configure_flavor('gcov', reset=False)\n        self.log.info('=== Testing gcov ===')\n        #self.phase_make('check')\n        self.phase_make('test')\n\n        self.configure_flavor('default', reset=False)\n        self.log.info('=== Testing default ===')\n        #self.phase_make('fullcheck')\n        self.phase_make('test')\n        # jww (2012-05-20): docs are not working yet\n        #self.phase_make('docs')\n\n        self.configure_flavor('debug', reset=False)\n        self.log.info('=== Testing debug ===')\n        #self.phase_make('fullcheck')\n        self.phase_make('test')\n\n    def phase_makeall(self, reset=False, *args):\n        self.log.info('Executing phase: makeall')\n\n        self.configure_flavor('opt', reset)\n        self.log.info('=== Building opt ===')\n        self.phase_make(*args)\n\n        self.configure_flavor('gcov', reset)\n        self.log.info('=== Building gcov ===')\n        self.phase_make(*args)\n\n        self.configure_flavor('default', reset)\n        self.log.info('=== Building default ===')\n        self.phase_make(*args)\n\n        self.configure_flavor('debug', reset)\n        self.log.info('=== Building debug ===')\n        self.phase_make(*args)\n\n    #########################################################################\n    # Help                                                                  #\n    #########################################################################\n\n    def phase_help(self, *args):\n        self.option_parser.print_help()\n\n        print(\"\"\"\nOf the optional ARGS, the first is an optional build FLAVOR, with the default\nbeing 'debug':\n\n  default           Regular autoconf settings\n  debug             Debugging and --verify support (default)\n  opt               Full optimizations\n  gcov              Coverage analysis\n  gprof             Code profiling (for macOS, just use: 'shark -i ledger ...')\n\nNext is the optional build PHASE, with 'config' being the default:\n\n  clean             Runs 'make clean' in the build directory\n  config            Configure the environment for building\n  dependencies      Automatically install all necessary build dependencies\n  gitclean          Runs 'git clean -dfx', which *really* cleans things\n  help              Displays this help text\n  info              Show information about the build environment\n  make              Do a make in the build directory\n  proof             Proves Ledger by building and testing every flavor\n  pull              Pulls the latest, and updates local config if need be\n  update            Does it all, updates your environment and re-make's\n\nThere are many other build phases, though most are not of interest to the\ntypical user:\n\n  configure         Runs just cmake\n  do_all            Runs makeall followed by proof\n  gettext           Initialize gettext support\n  makeall           Build every flavor there is\n  products          Report the products directory path\n  rsync             Rsync a copy of the source tree into Products\n  sloc              Report total Source Lines Of Code\n  version           Output current HEAD version to version.m4\n\nNOTE: If you wish to pass options to CMake or make, add \"--\" followed by\nyour options.  Those starting with \"-D\" or \"--\" will be passed on to CMake,\npositional arguments and other options will be passed to make.\nFor the 'config' and 'configure' phase everything will be passed to CMake.\n\nHere are some real-world examples:\n\n  ./acprep\n  ./acprep --python\n  ./acprep opt make\n  ./acprep make doc -- -DBUILD_WEB_DOCS=1\"\"\")\n        sys.exit(0)\n\nPrepareBuild().run()\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.5869140625,
          "content": "version: build-{build}\n\nimage: Visual Studio 2013\n\nshallow_clone: true  # don't download repo history\n\ninstall:\n- time /t\n- tzutil /s \"Eastern Standard Time_dstoff\"\n- time /t\n\nbranches:\n  only:\n    - master\n    - next\n\nbuild_script:\n- C:\\msys64\\usr\\bin\\bash -lc \"pacman --noconfirm -Sy pacman\"\n- C:\\msys64\\usr\\bin\\bash -lc \"pacman --needed --noconfirm -Sy pacman-mirrors\"\n- C:\\msys64\\usr\\bin\\bash -lc \"pacman --needed --noconfirm -Syu\"\n- C:\\msys64\\usr\\bin\\bash -lc \"pacman --needed --noconfirm -S mingw-w64-i686-boost\"\n- C:\\msys64\\usr\\bin\\bash -lc \"pacman --needed --noconfirm -S mingw-w64-i686-mpfr\"\n- C:\\msys64\\usr\\bin\\bash -lc \"pacman --needed --noconfirm -S mingw-w64-i686-cmake\"\n- C:\\msys64\\usr\\bin\\bash -lc \"export PATH=/mingw32/bin:$PATH && cd $APPVEYOR_BUILD_FOLDER &&\n  cmake -G 'MSYS Makefiles'\"\n- C:\\msys64\\usr\\bin\\bash -lc \"export PATH=/mingw32/bin:$PATH && cd $APPVEYOR_BUILD_FOLDER &&\n  make -j2\"\n\nafter_build:\n- set LIB_DIR=C:\\msys64\\mingw32\\bin\n- 7z a ledger-win.zip %APPVEYOR_BUILD_FOLDER%\\ledger.exe\n  %LIB_DIR%\\libboost_filesystem-mt.dll\n  %LIB_DIR%\\libboost_regex-mt.dll\n  %LIB_DIR%\\libboost_system-mt.dll\n  %LIB_DIR%\\libgcc_s_dw2-1.dll\n  %LIB_DIR%\\libgmp-10.dll\n  %LIB_DIR%\\libicudt57.dll\n  %LIB_DIR%\\libicuuc57.dll\n  %LIB_DIR%\\libstdc++-6.dll\n  %LIB_DIR%\\libwinpthread-1.dll\n  %APPVEYOR_BUILD_FOLDER%\\libledger.dll\n\nartifacts:\n  - path: ledger-win.zip\n    name: Ledger Win32 binaries\n\ntest_script:\n- C:\\msys64\\usr\\bin\\bash -lc \"export MINGW_PREFIX=C:/msys64/mingw32/ CTEST_OUTPUT_ON_FAILURE=1\n  PATH=/mingw32/bin:$PATH && cd $APPVEYOR_BUILD_FOLDER &&\n  make test || echo Errors from tests were ignored\"\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "default.nix",
          "type": "blob",
          "size": 0.1123046875,
          "content": "(import (fetchTarball https://github.com/edolstra/flake-compat/archive/master.tar.gz) {\n  src = ./.;\n}).defaultNix\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 0.49609375,
          "content": "{\n  \"nodes\": {\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1701484532,\n        \"narHash\": \"sha256-zC6a3b7zw7+1DfQt1p+GZ/5Mk19mI1dxnjZHi+5hNiM=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"21ee79ad8cff9638ec0edaa6d2f1574dd237e1df\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"id\": \"nixpkgs\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 3.1513671875,
          "content": "{\n  description = \"A double-entry accounting system with a command-line reporting interface\";\n\n  nixConfig.bash-prompt = \"ledger$ \";\n\n  outputs = { self, nixpkgs }: let\n    usePython = true;\n    gpgmeSupport = true;\n    useLibedit = true;\n    useReadline = false;\n    forAllSystems = f: nixpkgs.lib.genAttrs systems (system: f system);\n    nixpkgsFor = forAllSystems (system: import nixpkgs { inherit system; });\n    systems = [ \"x86_64-linux\" \"aarch64-linux\" \"x86_64-darwin\" \"aarch64-darwin\" ];\n  in {\n\n    packages = forAllSystems (system: let\n        pkgs = nixpkgsFor.${system};\n      in with pkgs; {\n      ledger = stdenv.mkDerivation {\n        pname = \"ledger\";\n        version = \"3.3.2-${self.shortRev or \"dirty\"}\";\n\n        src = self;\n\n        outputs = [ \"out\" \"dev\" ] ++ lib.optionals usePython [ \"py\" ];\n\n        buildInputs = [\n          gmp mpfr gnused icu\n        ] ++ lib.optionals useLibedit [\n          libedit\n        ] ++ lib.optionals useReadline [\n          readline\n        ] ++ lib.optionals gpgmeSupport [\n          gpgme\n        ] ++ (if usePython\n              then [ python3 (boost.override { enablePython = true; python = python3; }) ]\n              else [ boost ]);\n\n        nativeBuildInputs = [\n          cmake texinfo tzdata\n        ] ++ lib.optionals useLibedit [\n          libedit.dev\n        ] ++ lib.optionals useReadline [\n          readline.dev\n        ];\n\n        enableParallelBuilding = true;\n\n        cmakeFlags = [\n          \"-DCMAKE_INSTALL_LIBDIR=lib\"\n          \"-DBUILD_DOCS:BOOL=ON\"\n          \"-DUSE_PYTHON:BOOL=${if usePython then \"ON\" else \"OFF\"}\"\n          \"-DUSE_GPGME:BOOL=${if gpgmeSupport then \"ON\" else \"OFF\"}\"\n        ];\n\n        # by default, it will query the python interpreter for its sitepackages location\n        # however, that would write to a different nixstore path, pass our own sitePackages location\n        prePatch = lib.optionalString usePython ''\n          substituteInPlace src/CMakeLists.txt \\\n            --replace 'DESTINATION ''${Python_SITEARCH}' 'DESTINATION \"${placeholder \"py\"}/${python3.sitePackages}\"'\n        '';\n\n        installTargets = [ \"doc\" \"install\" ];\n\n        checkPhase = ''\n          runHook preCheck\n          env LD_LIBRARY_PATH=$PWD \\\n            DYLD_LIBRARY_PATH=$PWD \\\n            ctest -j$NIX_BUILD_CORES\n          runHook postCheck\n        '';\n\n        doCheck = true;\n\n        meta = with lib; {\n          description = \"A double-entry accounting system with a command-line reporting interface\";\n          homepage = \"https://ledger-cli.org/\";\n          changelog = \"https://github.com/ledger/ledger/raw/v${version}/NEWS.md\";\n          license = lib.licenses.bsd3;\n          longDescription = ''\n            Ledger is a powerful, double-entry accounting system that is accessed\n            from the UNIX command-line. This may put off some users, as there is\n            no flashy UI, but for those who want unparalleled reporting access to\n            their data, there really is no alternative.\n          '';\n          platforms = lib.platforms.all;\n          maintainers = with maintainers; [ jwiegley ];\n        };\n      };\n    });\n\n    defaultPackage = forAllSystems (system: self.packages.${system}.ledger);\n\n  };\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 0.1103515625,
          "content": "(import (fetchTarball https://github.com/edolstra/flake-compat/archive/master.tar.gz) {\n  src = ./.;\n}).shellNix\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}