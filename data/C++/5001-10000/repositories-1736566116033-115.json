{
  "metadata": {
    "timestamp": 1736566116033,
    "page": 115,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/glog",
      "stars": 7175,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 4.423828125,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  Google\nAccessModifierOffset: -1\nAlignAfterOpenBracket: Align\nAlignConsecutiveMacros: false\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Left\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: true\nAllowAllConstructorInitializersOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortLambdasOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: WithoutElse\nAllowShortLoopsOnASingleLine: true\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: true\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDeriveLineEnding: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks:   Regroup\nIncludeCategories:\n  - Regex:           '^<ext/.*\\.h>'\n    Priority:        2\n    SortPriority:    0\n  - Regex:           '^<.*\\.h>'\n    Priority:        1\n    SortPriority:    0\n  - Regex:           '^<.*'\n    Priority:        2\n    SortPriority:    0\n  - Regex:           '.*'\n    Priority:        3\n    SortPriority:    0\nIncludeIsMainRegex: '([-_](test|unittest))?$'\nIncludeIsMainSourceRegex: ''\nIndentCaseLabels: true\nIndentGotoLabels: true\nIndentPPDirectives: AfterHash\nIndentWidth:     2\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Never\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 200\nPointerAlignment: Left\nRawStringFormats:\n  - Language:        Cpp\n    Delimiters:\n      - cc\n      - CC\n      - cpp\n      - Cpp\n      - CPP\n      - 'c++'\n      - 'C++'\n    CanonicalDelimiter: ''\n    BasedOnStyle:    google\n  - Language:        TextProto\n    Delimiters:\n      - pb\n      - PB\n      - proto\n      - PROTO\n    EnclosingFunctions:\n      - EqualsProto\n      - EquivToProto\n      - PARSE_PARTIAL_TEXT_PROTO\n      - PARSE_TEST_PROTO\n      - PARSE_TEXT_PROTO\n      - ParseTextOrDie\n      - ParseTextProtoOrDie\n    CanonicalDelimiter: ''\n    BasedOnStyle:    google\nReflowComments:  true\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpaceBeforeSquareBrackets: false\nStandard:        c++14\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        8\nUseCRLF:         false\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 2.6572265625,
          "content": "---\nChecks:          'clang-diagnostic-*,clang-analyzer-*,google-*,modernize-*,-modernize-use-trailing-return-type,readability-*,portability-*,performance-*,bugprone-*,android-*,darwin-*,clang-analyzer-*'\nWarningsAsErrors: ''\nHeaderFilterRegex: ''\nFormatStyle:     file\nCheckOptions:\n  - key:             cert-dcl16-c.NewSuffixes\n    value:           'L;LL;LU;LLU'\n  - key:             cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField\n    value:           '0'\n  - key:             cppcoreguidelines-explicit-virtual-functions.IgnoreDestructors\n    value:           '1'\n  - key:             cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic\n    value:           '1'\n  - key:             google-build-namespaces.HeaderFileExtensions\n    value:           ',h,hh,hpp,hxx'\n  - key:             google-global-names-in-headers.HeaderFileExtensions\n    value:           ',h,hh,hpp,hxx'\n  - key:             google-readability-braces-around-statements.ShortStatementLines\n    value:           '1'\n  - key:             google-readability-function-size.BranchThreshold\n    value:           '4294967295'\n  - key:             google-readability-function-size.LineThreshold\n    value:           '4294967295'\n  - key:             google-readability-function-size.NestingThreshold\n    value:           '4294967295'\n  - key:             google-readability-function-size.ParameterThreshold\n    value:           '4294967295'\n  - key:             google-readability-function-size.StatementThreshold\n    value:           '800'\n  - key:             google-readability-function-size.VariableThreshold\n    value:           '4294967295'\n  - key:             google-readability-namespace-comments.ShortNamespaceLines\n    value:           '10'\n  - key:             google-readability-namespace-comments.SpacesBeforeComments\n    value:           '2'\n  - key:             google-runtime-int.SignedTypePrefix\n    value:           int\n  - key:             google-runtime-int.TypeSuffix\n    value:           ''\n  - key:             google-runtime-int.UnsignedTypePrefix\n    value:           uint\n  - key:             google-runtime-references.WhiteListTypes\n    value:           ''\n  - key:             modernize-loop-convert.MaxCopySize\n    value:           '16'\n  - key:             modernize-loop-convert.MinConfidence\n    value:           reasonable\n  - key:             modernize-loop-convert.NamingStyle\n    value:           CamelCase\n  - key:             modernize-pass-by-value.IncludeStyle\n    value:           llvm\n  - key:             modernize-replace-auto-ptr.IncludeStyle\n    value:           llvm\n  - key:             modernize-use-nullptr.NullMacros\n    value:           'NULL'\n...\n\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.025390625,
          "content": "*.h linguist-language=C++\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.06640625,
          "content": "*.orig\n/build*/\n/site/\nbazel-*\n# Bzlmod lockfile\n/MODULE.bazel.lock\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 1.0595703125,
          "content": "# This is the official list of glog authors for copyright purposes.\n# This file is distinct from the CONTRIBUTORS files.\n# See the latter for an explanation.\n#\n# Names should be added to this file as:\n#\tName or Organization <email address>\n# The email address is not required for organizations.\n#\n# Please keep the list sorted.\n\nAbhishek Dasgupta <abhi2743@gmail.com>\nAbhishek Parmar <abhishek@orng.net>\nAndrew Schwartzmeyer <andrew@schwartzmeyer.com>\nAndy Ying <andy@trailofbits.com>\nBrian Silverman <bsilver16384@gmail.com>\nDmitriy Arbitman <d.arbitman@gmail.com>\nGoogle Inc.\nGuillaume Dumont <dumont.guillaume@gmail.com>\nLingBin <lingbinlb@gmail.com>\nMarco Wang <m.aesophor@gmail.com>\nMichael Tanner <michael@tannertaxpro.com>\nMiniLight <MiniLightAR@Gmail.com>\nromange <romange@users.noreply.github.com>\nRoman Perepelitsa <roman.perepelitsa@gmail.com>\nSergiu Deitsch <sergiu.deitsch@gmail.com>\ntbennun <tbennun@gmail.com>\nTeddy Reed <teddy@prosauce.org>\nVijaymahantesh Sattigeri <vijaymahantesh016@gmail.com>\nZhongming Qu <qzmfranklin@gmail.com>\nZhuoran Shen <cmsflash99@gmail.com>\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 0.5859375,
          "content": "licenses([\"notice\"])\n\nexports_files([\"COPYING\"])\n\nload(\":bazel/glog.bzl\", \"glog_library\")\n\nglog_library()\n\n# platform() to build with clang-cl on Bazel CI. This is enabled with\n# the flags in .bazelci/presubmit.yml:\n#\n#   --incompatible_enable_cc_toolchain_resolution\n#   --extra_toolchains=@local_config_cc//:cc-toolchain-x64_windows-clang-cl\n#   --extra_execution_platforms=//:x64_windows-clang-cl\nplatform(\n    name = \"x64_windows-clang-cl\",\n    constraint_values = [\n        \"@platforms//cpu:x86_64\",\n        \"@platforms//os:windows\",\n        \"@rules_cc//cc/private/toolchain:clang-cl\",\n    ],\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 35.7998046875,
          "content": "cmake_minimum_required (VERSION 3.22)\nproject (glog\n  VERSION 0.8.0\n  DESCRIPTION \"C++ implementation of the Google logging module\"\n  HOMEPAGE_URL https://github.com/google/glog\n  LANGUAGES CXX\n)\n\nset (CPACK_PACKAGE_NAME glog)\nset (CPACK_PACKAGE_DESCRIPTION_SUMMARY \"Google logging library\")\nset (CPACK_PACKAGE_VERSION_MAJOR ${glog_VERSION_MAJOR})\nset (CPACK_PACKAGE_VERSION_MINOR ${glog_VERSION_MINOR})\nset (CPACK_PACKAGE_VERSION_PATCH ${glog_VERSION_PATCH})\nset (CPACK_PACKAGE_VERSION ${glog_VERSION})\n\nlist (APPEND CMAKE_MODULE_PATH ${glog_SOURCE_DIR}/cmake)\n\ninclude (CheckCXXSourceCompiles)\ninclude (CheckCXXSourceRuns)\ninclude (CheckCXXSymbolExists)\ninclude (CheckIncludeFileCXX)\ninclude (CheckStructHasMember)\ninclude (CheckTypeSize)\ninclude (CMakeDependentOption)\ninclude (CMakePackageConfigHelpers)\ninclude (CMakePushCheckState)\ninclude (CPack)\ninclude (CTest)\ninclude (DetermineGflagsNamespace)\ninclude (GenerateExportHeader)\ninclude (GetCacheVariables)\ninclude (GNUInstallDirs)\n\noption (BUILD_SHARED_LIBS \"Build shared libraries\" ON)\noption (BUILD_EXAMPLES \"Build examples\" ON)\noption (PRINT_UNSYMBOLIZED_STACK_TRACES\n  \"Print file offsets in traces instead of symbolizing\" OFF)\noption (WITH_GFLAGS \"Use gflags\" ON)\noption (WITH_GTEST \"Use Google Test\" ON)\noption (WITH_PKGCONFIG \"Enable pkg-config support\" OFF)\noption (WITH_SYMBOLIZE \"Enable symbolize module\" ON)\noption (WITH_TLS \"Enable Thread Local Storage (TLS) support\" ON)\n\nset (WITH_UNWIND libunwind CACHE STRING \"unwind driver\")\nset_property (CACHE WITH_UNWIND PROPERTY STRINGS none unwind libunwind)\n\ncmake_dependent_option (WITH_GMOCK \"Use Google Mock\" ON WITH_GTEST OFF)\n\nset (WITH_FUZZING none CACHE STRING \"Fuzzing engine\")\nset_property (CACHE WITH_FUZZING PROPERTY STRINGS none libfuzzer ossfuzz)\n\nif (WITH_UNWIND STREQUAL none)\n  set (CMAKE_DISABLE_FIND_PACKAGE_Unwind ON)\nendif (WITH_UNWIND STREQUAL none)\n\nif (NOT WITH_GTEST)\n  set (CMAKE_DISABLE_FIND_PACKAGE_GTest ON)\nendif (NOT WITH_GTEST)\n\nset (CMAKE_C_VISIBILITY_PRESET hidden)\nset (CMAKE_CXX_VISIBILITY_PRESET hidden)\nset (CMAKE_POSITION_INDEPENDENT_CODE ON)\nset (CMAKE_VISIBILITY_INLINES_HIDDEN ON)\n\nset (CMAKE_DEBUG_POSTFIX d)\n\nfind_package (GTest 1.11 COMPONENTS GTest OPTIONAL_COMPONENTS GMock NO_MODULE)\n\nif (GTest_FOUND)\n  set (HAVE_LIB_GTEST 1)\nendif (GTest_FOUND)\n\nif (WITH_GMOCK AND TARGET GTest::gmock)\n  set (HAVE_LIB_GMOCK 1)\nendif (WITH_GMOCK AND TARGET GTest::gmock)\n\nif (WITH_GFLAGS)\n  find_package (gflags 2.2.2)\n\n  if (gflags_FOUND)\n    set (HAVE_LIB_GFLAGS 1)\n    determine_gflags_namespace (gflags_NAMESPACE)\n  endif (gflags_FOUND)\nendif (WITH_GFLAGS)\n\nfind_package (Threads REQUIRED)\nfind_package (Unwind)\n\nif (Unwind_FOUND)\n  cmake_push_check_state (RESET)\n  set (CMAKE_REQUIRED_LIBRARIES unwind::unwind)\n\n  # Check whether linking actually succeeds. ARM toolchains of LLVM unwind\n  # implementation do not necessarily provide the _Unwind_Backtrace function\n  # which causes the previous check to succeed but the linking to fail.\n  check_cxx_symbol_exists (_Unwind_Backtrace unwind.h HAVE__UNWIND_BACKTRACE)\n  check_cxx_symbol_exists (_Unwind_GetIP unwind.h HAVE__UNWIND_GETIP)\n\n  check_cxx_symbol_exists (unw_get_reg libunwind.h HAVE_UNW_GET_REG)\n  check_cxx_symbol_exists (unw_getcontext libunwind.h HAVE_UNW_GETCONTEXT)\n  check_cxx_symbol_exists (unw_init_local libunwind.h HAVE_UNW_INIT_LOCAL)\n  check_cxx_symbol_exists (unw_step libunwind.h HAVE_UNW_STEP)\n\n  if (HAVE__UNWIND_BACKTRACE AND HAVE__UNWIND_GETIP)\n    set (_HAVE_UNWIND 1)\n  endif (HAVE__UNWIND_BACKTRACE AND HAVE__UNWIND_GETIP)\n\n  if (HAVE_UNW_GET_REG AND HAVE_UNW_GETCONTEXT AND HAVE_UNW_INIT_LOCAL AND HAVE_UNW_STEP)\n    set (_HAVE_LIBUNWIND 1)\n  endif (HAVE_UNW_GET_REG AND HAVE_UNW_GETCONTEXT AND HAVE_UNW_INIT_LOCAL AND HAVE_UNW_STEP)\n\n  if (WITH_UNWIND STREQUAL unwind)\n    if (_HAVE_UNWIND)\n      set (HAVE_UNWIND 1)\n    endif (_HAVE_UNWIND)\n  elseif (WITH_UNWIND STREQUAL libunwind)\n    if (_HAVE_LIBUNWIND)\n      set (HAVE_LIBUNWIND 1)\n    endif (_HAVE_LIBUNWIND)\n  endif (WITH_UNWIND STREQUAL unwind)\n\n  unset (_HAVE_LIBUNWIND)\n  unset (_HAVE_UNWIND)\n\n  cmake_pop_check_state ()\nendif (Unwind_FOUND)\n\ncheck_include_file_cxx (dlfcn.h HAVE_DLFCN_H)\ncheck_include_file_cxx (elf.h HAVE_ELF_H)\ncheck_include_file_cxx (glob.h HAVE_GLOB_H)\ncheck_include_file_cxx (link.h HAVE_LINK_H)\ncheck_include_file_cxx (pwd.h HAVE_PWD_H)\ncheck_include_file_cxx (sys/exec_elf.h HAVE_SYS_EXEC_ELF_H)\ncheck_include_file_cxx (sys/syscall.h HAVE_SYS_SYSCALL_H)\ncheck_include_file_cxx (sys/time.h HAVE_SYS_TIME_H)\ncheck_include_file_cxx (sys/types.h HAVE_SYS_TYPES_H)\ncheck_include_file_cxx (sys/utsname.h HAVE_SYS_UTSNAME_H)\ncheck_include_file_cxx (sys/wait.h HAVE_SYS_WAIT_H)\ncheck_include_file_cxx (syscall.h HAVE_SYSCALL_H)\ncheck_include_file_cxx (syslog.h HAVE_SYSLOG_H)\ncheck_include_file_cxx (ucontext.h HAVE_UCONTEXT_H)\ncheck_include_file_cxx (unistd.h HAVE_UNISTD_H)\n\ncheck_type_size (mode_t HAVE_MODE_T LANGUAGE CXX)\ncheck_type_size (ssize_t HAVE_SSIZE_T LANGUAGE CXX)\n\ncheck_cxx_symbol_exists (dladdr dlfcn.h HAVE_DLADDR)\ncheck_cxx_symbol_exists (fcntl fcntl.h HAVE_FCNTL)\ncheck_cxx_symbol_exists (posix_fadvise fcntl.h HAVE_POSIX_FADVISE)\ncheck_cxx_symbol_exists (pread unistd.h HAVE_PREAD)\ncheck_cxx_symbol_exists (pwrite unistd.h HAVE_PWRITE)\ncheck_cxx_symbol_exists (sigaction csignal HAVE_SIGACTION)\ncheck_cxx_symbol_exists (sigaltstack csignal HAVE_SIGALTSTACK)\n\ncheck_cxx_symbol_exists (backtrace execinfo.h HAVE_EXECINFO_BACKTRACE)\ncheck_cxx_symbol_exists (backtrace_symbols execinfo.h\n  HAVE_EXECINFO_BACKTRACE_SYMBOLS)\ncheck_cxx_symbol_exists (_chsize_s io.h HAVE__CHSIZE_S)\n\ncmake_push_check_state (RESET)\nset (CMAKE_REQUIRED_LIBRARIES dbghelp)\ncheck_cxx_symbol_exists (UnDecorateSymbolName \"windows.h;dbghelp.h\" HAVE_DBGHELP)\ncmake_pop_check_state ()\n\nif (WITH_FUZZING STREQUAL none)\n  # Disable compiler demangler if fuzzing is active; we only want to use the\n  # glog demangler then.\n  check_cxx_symbol_exists (abi::__cxa_demangle cxxabi.h HAVE___CXA_DEMANGLE)\nendif (WITH_FUZZING STREQUAL none)\n\ncheck_cxx_symbol_exists (__argv cstdlib HAVE___ARGV)\ncheck_cxx_symbol_exists (getprogname cstdlib HAVE_GETPROGNAME)\ncheck_cxx_symbol_exists (program_invocation_short_name cerrno HAVE_PROGRAM_INVOCATION_SHORT_NAME)\ncheck_cxx_source_compiles ([=[\n#include <cstdlib>\nextern char* __progname;\nint main() { return __progname != nullptr ? EXIT_SUCCESS : EXIT_FAILURE; }\n]=] HAVE___PROGNAME)\n\nif (WITH_TLS)\n  set (GLOG_THREAD_LOCAL_STORAGE 1)\nendif (WITH_TLS)\n\nset (_PC_FIELDS\n  \"uc_mcontext.gregs[REG_PC]\"          # Solaris x86 (32 + 64 bit)\n  \"uc_mcontext.gregs[REG_EIP]\"         # Linux (i386)\n  \"uc_mcontext.gregs[REG_RIP]\"         # Linux (x86_64)\n  \"uc_mcontext.sc_ip\"                  # Linux (ia64)\n  \"uc_mcontext.pc\"                     # Linux (mips)\n  \"uc_mcontext.uc_regs->gregs[PT_NIP]\" # Linux (ppc)\n  \"uc_mcontext.gregs[R15]\"             # Linux (arm old [untested])\n  \"uc_mcontext.arm_pc\"                 # Linux (arm arch 5)\n  \"uc_mcontext.gp_regs[PT_NIP]\"        # Suse SLES 11 (ppc64)\n  \"uc_mcontext.mc_eip\"                 # FreeBSD (i386)\n  \"uc_mcontext.mc_rip\"                 # FreeBSD (x86_64 [untested])\n  \"uc_mcontext.__gregs[_REG_EIP]\"      # NetBSD (i386)\n  \"uc_mcontext.__gregs[_REG_RIP]\"      # NetBSD (x86_64)\n  \"uc_mcontext->ss.eip\"                # OS X (i386, <=10.4)\n  \"uc_mcontext->__ss.__eip\"            # OS X (i386, >=10.5)\n  \"uc_mcontext->ss.rip\"                # OS X (x86_64)\n  \"uc_mcontext->__ss.__rip\"            # OS X (>=10.5 [untested])\n  \"uc_mcontext->ss.srr0\"               # OS X (ppc, ppc64 [untested])\n  \"uc_mcontext->__ss.__srr0\"           # OS X (>=10.5 [untested])\n)\n\nif (HAVE_UCONTEXT_H AND NOT DEFINED PC_FROM_UCONTEXT)\n  cmake_push_check_state (RESET)\n\n  set (CMAKE_REQUIRED_DEFINITIONS -D_GNU_SOURCE)\n  set (_PC_HEADERS ucontext.h signal.h)\n\n  foreach (_PC_FIELD IN LISTS _PC_FIELDS)\n    foreach (_PC_HEADER IN LISTS _PC_HEADERS)\n      # Replace non-alphanumeric characters by underscores since the name will be\n      # used as preprocessor definition.\n      string (REGEX REPLACE \"[^a-zA-Z0-9]\" \"_\" HAVE_UCONTEXT_FIELD_NAME\n        \"HAVE_PC_FROM_UCONTEXT_${_PC_FIELD}\")\n      # Strip trailing underscores for readability\n      string (REGEX REPLACE \"_+$\" \"\" HAVE_UCONTEXT_FIELD_NAME\n        \"${HAVE_UCONTEXT_FIELD_NAME}\")\n\n      check_struct_has_member (ucontext_t ${_PC_FIELD} ${_PC_HEADER}\n        ${HAVE_UCONTEXT_FIELD_NAME} LANGUAGE CXX)\n\n      if (${HAVE_UCONTEXT_FIELD_NAME})\n        set (PC_FROM_UCONTEXT ${_PC_FIELD} CACHE STRING\n          \"<${_PC_HEADER}> ucontext_t PC member\")\n        mark_as_advanced (PC_FROM_UCONTEXT)\n        break ()\n      endif (${HAVE_UCONTEXT_FIELD_NAME})\n    endforeach (_PC_HEADER)\n\n    if (${HAVE_UCONTEXT_FIELD_NAME})\n      break ()\n    endif (${HAVE_UCONTEXT_FIELD_NAME})\n  endforeach (_PC_FIELD)\n\n  cmake_pop_check_state ()\nendif (HAVE_UCONTEXT_H AND NOT DEFINED PC_FROM_UCONTEXT)\n\nif (HAVE_EXECINFO_BACKTRACE AND HAVE_EXECINFO_BACKTRACE_SYMBOLS)\n  set (HAVE_STACKTRACE 1)\nendif (HAVE_EXECINFO_BACKTRACE AND HAVE_EXECINFO_BACKTRACE_SYMBOLS)\n\nif (WITH_SYMBOLIZE)\n  if (WIN32 OR CYGWIN)\n    cmake_push_check_state (RESET)\n    set (CMAKE_REQUIRED_LIBRARIES DbgHelp)\n\n    check_cxx_source_runs ([=[\n    #include <windows.h>\n    #include <dbghelp.h>\n    #include <cstdlib>\n\n    void foobar() { }\n\n    int main()\n    {\n        HANDLE process = GetCurrentProcess();\n\n        if (!SymInitialize(process, NULL, TRUE))\n            return EXIT_FAILURE;\n\n        char buf[sizeof(SYMBOL_INFO) + MAX_SYM_NAME];\n        SYMBOL_INFO *symbol = reinterpret_cast<SYMBOL_INFO *>(buf);\n        symbol->SizeOfStruct = sizeof(SYMBOL_INFO);\n        symbol->MaxNameLen = MAX_SYM_NAME;\n\n        void* const pc = reinterpret_cast<void*>(&foobar);\n        BOOL ret = SymFromAddr(process, reinterpret_cast<DWORD64>(pc), 0, symbol);\n\n        return ret ? EXIT_SUCCESS : EXIT_FAILURE;\n    }\n    ]=] HAVE_SYMBOLIZE)\n\n    cmake_pop_check_state ()\n\n    if (HAVE_SYMBOLIZE)\n      set (HAVE_STACKTRACE 1)\n    endif (HAVE_SYMBOLIZE)\n  elseif (APPLE AND HAVE_DLADDR)\n    set (HAVE_SYMBOLIZE 1)\n  elseif (UNIX)\n    if (HAVE_ELF_H OR HAVE_SYS_EXEC_ELF_H)\n      set (HAVE_SYMBOLIZE 1)\n    endif (HAVE_ELF_H OR HAVE_SYS_EXEC_ELF_H)\n  endif (WIN32 OR CYGWIN)\nendif (WITH_SYMBOLIZE)\n\n# CMake manages symbolize availability. The definition is necessary only when\n# building the library.\nadd_compile_definitions (GLOG_NO_SYMBOLIZE_DETECTION)\n\ncheck_cxx_symbol_exists (gmtime_r \"cstdlib;ctime\" HAVE_GMTIME_R)\ncheck_cxx_symbol_exists (localtime_r \"cstdlib;ctime\" HAVE_LOCALTIME_R)\n\nset (SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})\n\n# fopen/open on Cygwin can not handle unix-type paths like /home/....\n# therefore we translate TEST_SRC_DIR to windows-path.\nif (CYGWIN)\n  execute_process (COMMAND cygpath.exe -m ${glog_SOURCE_DIR}\n                   OUTPUT_STRIP_TRAILING_WHITESPACE\n                   OUTPUT_VARIABLE TEST_SRC_DIR)\n  set (TEST_SRC_DIR \\\"${TEST_SRC_DIR}\\\")\nelse (CYGWIN)\n  set (TEST_SRC_DIR \\\"${glog_SOURCE_DIR}\\\")\nendif (CYGWIN)\n\nconfigure_file (src/config.h.cmake.in config.h)\n\nset (_glog_CMake_BINDIR ${CMAKE_INSTALL_BINDIR})\nset (_glog_CMake_INCLUDE_DIR ${CMAKE_INSTALL_INCLUDEDIR})\nset (_glog_CMake_LIBDIR ${CMAKE_INSTALL_LIBDIR})\nset (_glog_CMake_INSTALLDIR ${_glog_CMake_LIBDIR}/cmake/glog)\n\nset (_glog_CMake_DIR glog/cmake)\nset (_glog_CMake_DATADIR ${CMAKE_INSTALL_DATAROOTDIR}/${_glog_CMake_DIR})\nset (_glog_BINARY_CMake_DATADIR\n  ${glog_BINARY_DIR}/${_glog_CMake_DATADIR})\n\n# Add additional CMake find modules here.\nset (_glog_CMake_MODULES)\n\nif (Unwind_FOUND)\n  # Copy the module only if libunwind is actually used.\n  list (APPEND _glog_CMake_MODULES ${glog_SOURCE_DIR}/cmake/FindUnwind.cmake)\nendif (Unwind_FOUND)\n\n# Generate file name for each module in the binary directory\nforeach (_file ${_glog_CMake_MODULES})\n  get_filename_component (_module \"${_file}\" NAME)\n\n  list (APPEND _glog_BINARY_CMake_MODULES\n    ${_glog_BINARY_CMake_DATADIR}/${_module})\nendforeach (_file)\n\nif (_glog_CMake_MODULES)\n  # Copy modules to binary directory during the build\n  add_custom_command (OUTPUT ${_glog_BINARY_CMake_MODULES}\n    COMMAND ${CMAKE_COMMAND} -E make_directory\n    ${_glog_BINARY_CMake_DATADIR}\n    COMMAND ${CMAKE_COMMAND} -E copy ${_glog_CMake_MODULES}\n    ${_glog_BINARY_CMake_DATADIR}\n    DEPENDS ${_glog_CMake_MODULES}\n    COMMENT \"Copying find modules...\"\n  )\nendif (_glog_CMake_MODULES)\n\nset (GLOG_PUBLIC_H\n  ${glog_BINARY_DIR}/glog/export.h\n  src/glog/log_severity.h\n  src/glog/logging.h\n  src/glog/platform.h\n  src/glog/raw_logging.h\n  src/glog/stl_logging.h\n  src/glog/types.h\n  src/glog/flags.h\n  src/glog/vlog_is_on.h\n)\n\nset (GLOG_SRCS\n  ${GLOG_PUBLIC_H}\n  src/base/commandlineflags.h\n  src/base/googleinit.h\n  src/demangle.cc\n  src/demangle.h\n  src/flags.cc\n  src/logging.cc\n  src/raw_logging.cc\n  src/signalhandler.cc\n  src/stacktrace.cc\n  src/stacktrace.h\n  src/symbolize.cc\n  src/symbolize.h\n  src/utilities.cc\n  src/utilities.h\n  src/vlog_is_on.cc\n)\n\n# NOTE MSYS2 defines both WIN32 and UNIX. Do not use windows port in this case.\nif ((CYGWIN OR WIN32) AND NOT UNIX)\n  list (APPEND GLOG_SRCS\n    src/windows/port.cc\n    src/windows/port.h\n  )\n  set (_glog_USE_WINDOWS_PORT TRUE)\nendif ((CYGWIN OR WIN32) AND NOT UNIX)\n\nadd_library (glog_internal OBJECT\n  ${_glog_BINARY_CMake_MODULES}\n  ${GLOG_SRCS}\n)\ntarget_compile_features (glog_internal PUBLIC $<TARGET_PROPERTY:glog,COMPILE_FEATURES>)\nset_target_properties (glog_internal PROPERTIES DEFINE_SYMBOL GOOGLE_GLOG_IS_A_DLL)\n\n# Some generators (such as Xcode) do not generate any output if the target does\n# not reference at least one source file.\nset (_glog_EMPTY_SOURCE ${glog_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/glog.cc)\n\nadd_custom_command (\n  OUTPUT ${_glog_EMPTY_SOURCE}\n  COMMAND ${CMAKE_COMMAND} -E touch ${_glog_EMPTY_SOURCE}\n)\n\nadd_library (glog\n  $<TARGET_OBJECTS:glog_internal>\n  ${_glog_EMPTY_SOURCE}\n)\ntarget_compile_features (glog PUBLIC cxx_std_14)\n\nadd_library (glog::glog ALIAS glog)\n\nset (glog_libraries_options_for_static_linking)\n\n# CMake always uses the generated export header\ntarget_compile_definitions (glog PUBLIC GLOG_USE_GLOG_EXPORT)\n\nif (_glog_USE_WINDOWS_PORT)\n  target_compile_definitions (glog PRIVATE GLOG_USE_WINDOWS_PORT)\nendif (_glog_USE_WINDOWS_PORT)\n\nunset (_glog_USE_WINDOWS_PORT)\n\nif (WIN32)\n  # Do not define min and max as macros\n  target_compile_definitions (glog PRIVATE NOMINMAX)\n  # Exclude unnecessary funcitonality\n  target_compile_definitions (glog PRIVATE WIN32_LEAN_AND_MEAN)\nendif (WIN32)\n\nif (HAVE_LIB_GFLAGS)\n  target_compile_definitions (glog PUBLIC GLOG_USE_GFLAGS)\nendif (HAVE_LIB_GFLAGS)\n\nif (Unwind_FOUND)\n  target_link_libraries (glog PRIVATE unwind::unwind)\n  set (glog_libraries_options_for_static_linking \"${glog_libraries_options_for_static_linking} -lunwind\")\n  set (Unwind_DEPENDENCY \"find_dependency (Unwind ${Unwind_VERSION})\")\nendif (Unwind_FOUND)\n\nif (HAVE_DBGHELP)\n  target_link_libraries (glog PRIVATE dbghelp)\n  set (glog_libraries_options_for_static_linking \"${glog_libraries_options_for_static_linking} -ldbghelp\")\nendif (HAVE_DBGHELP)\n\ntarget_link_libraries (glog PRIVATE Threads::Threads)\n\nif (CMAKE_THREAD_LIBS_INIT)\n  set (glog_libraries_options_for_static_linking \"${glog_libraries_options_for_static_linking} ${CMAKE_THREAD_LIBS_INIT}\")\nendif (CMAKE_THREAD_LIBS_INIT)\n\nif (gflags_FOUND)\n  # Prefer the gflags target that uses double colon convention\n  if (TARGET gflags::gflags)\n    target_link_libraries (glog PUBLIC gflags::gflags)\n  else (TARGET gflags::gflags)\n    target_link_libraries (glog PUBLIC gflags)\n  endif (TARGET gflags::gflags)\n\n  set (glog_libraries_options_for_static_linking \"${glog_libraries_options_for_static_linking} -lgflags\")\nendif (gflags_FOUND)\n\nif (ANDROID)\n  target_link_libraries (glog PRIVATE log)\n  set (glog_libraries_options_for_static_linking \"${glog_libraries_options_for_static_linking} -llog\")\nendif (ANDROID)\n\nset_target_properties (glog PROPERTIES VERSION ${glog_VERSION})\nset_target_properties (glog PROPERTIES SOVERSION 3)\n\nif (CYGWIN OR WIN32)\n  target_compile_definitions (glog PUBLIC GLOG_NO_ABBREVIATED_SEVERITIES)\nendif (CYGWIN OR WIN32)\n\nset_target_properties (glog PROPERTIES PUBLIC_HEADER \"${GLOG_PUBLIC_H}\")\n\ntarget_include_directories (glog BEFORE PUBLIC\n  \"$<BUILD_INTERFACE:${glog_BINARY_DIR}>\"\n  \"$<BUILD_INTERFACE:${glog_SOURCE_DIR}/src>\"\n  \"$<INSTALL_INTERFACE:${_glog_CMake_INCLUDE_DIR}>\"\n  PRIVATE ${glog_BINARY_DIR}\n  PRIVATE ${glog_SOURCE_DIR}/src)\n\nif (CYGWIN OR WIN32)\n  target_include_directories (glog_internal PUBLIC\n    \"$<BUILD_INTERFACE:${glog_SOURCE_DIR}/src/windows>\"\n    PRIVATE ${glog_SOURCE_DIR}/src/windows)\n\n  target_include_directories (glog PUBLIC\n    \"$<BUILD_INTERFACE:${glog_SOURCE_DIR}/src/windows>\"\n    PRIVATE ${glog_SOURCE_DIR}/src/windows)\nendif (CYGWIN OR WIN32)\n\nset_target_properties (glog PROPERTIES DEFINE_SYMBOL GOOGLE_GLOG_IS_A_DLL)\n\ntarget_include_directories (glog_internal PUBLIC\n  $<TARGET_PROPERTY:glog,INCLUDE_DIRECTORIES>)\ntarget_compile_definitions (glog_internal PUBLIC\n  $<TARGET_PROPERTY:glog,COMPILE_DEFINITIONS>\n  PRIVATE GOOGLE_GLOG_IS_A_DLL)\n\ngenerate_export_header (glog\n  EXPORT_MACRO_NAME GLOG_EXPORT\n  EXPORT_FILE_NAME ${glog_BINARY_DIR}/glog/export.h)\n\nstring (STRIP \"${glog_libraries_options_for_static_linking}\" glog_libraries_options_for_static_linking)\n\nif (WITH_PKGCONFIG)\n  set (VERSION ${glog_VERSION})\n  set (prefix ${CMAKE_INSTALL_PREFIX})\n  set (exec_prefix ${CMAKE_INSTALL_FULL_BINDIR})\n  set (libdir ${CMAKE_INSTALL_FULL_LIBDIR})\n  set (includedir ${CMAKE_INSTALL_FULL_INCLUDEDIR})\n\n  configure_file (\n    \"${glog_SOURCE_DIR}/libglog.pc.in\"\n    \"${glog_BINARY_DIR}/libglog.pc\"\n    @ONLY\n  )\n\n  unset (VERSION)\n  unset (prefix)\n  unset (exec_prefix)\n  unset (libdir)\n  unset (includedir)\nendif (WITH_PKGCONFIG)\n\n# Unit testing\n\nif (NOT WITH_FUZZING STREQUAL \"none\")\n  add_executable (fuzz_demangle\n    src/fuzz_demangle.cc\n  )\n\n  if (WITH_FUZZING STREQUAL \"ossfuzz\")\n    set (LIB_FUZZING_ENGINE $ENV{LIB_FUZZING_ENGINE})\n    target_link_libraries (fuzz_demangle PRIVATE glog ${LIB_FUZZING_ENGINE})\n  elseif (WITH_FUZZING STREQUAL \"libfuzzer\")\n    target_compile_options (fuzz_demangle PRIVATE -fsanitize=fuzzer)\n    target_link_libraries (fuzz_demangle PRIVATE glog)\n  else (WITH_FUZZING STREQUAL \"libfuzzer\")\n    message (FATAL_ERROR \"Unsupported fuzzing engine ${WITH_FUZZING}\")\n  endif (WITH_FUZZING STREQUAL \"ossfuzz\")\nendif (NOT WITH_FUZZING STREQUAL \"none\")\n\nif (BUILD_TESTING)\n  add_library (glog_test INTERFACE)\n  target_link_libraries (glog_test INTERFACE $<TARGET_OBJECTS:glog_internal> $<TARGET_PROPERTY:glog,LINK_LIBRARIES>)\n  target_compile_definitions (glog_test INTERFACE GLOG_STATIC_DEFINE $<TARGET_PROPERTY:glog,COMPILE_DEFINITIONS>)\n  target_include_directories (glog_test INTERFACE $<TARGET_PROPERTY:glog,INCLUDE_DIRECTORIES>)\n\n  if (HAVE_LIB_GTEST)\n    target_link_libraries (glog_test INTERFACE GTest::gtest)\n  endif (HAVE_LIB_GTEST)\n\n  if (HAVE_LIB_GMOCK)\n    target_link_libraries (glog_test INTERFACE GTest::gmock)\n  endif (HAVE_LIB_GMOCK)\n\n  add_executable (logging_unittest\n    src/logging_unittest.cc\n  )\n\n  target_link_libraries (logging_unittest PRIVATE glog_test)\n\n  add_executable (stl_logging_unittest\n    src/stl_logging_unittest.cc\n  )\n\n  target_link_libraries (stl_logging_unittest PRIVATE glog_test)\n\n  if (HAVE_SYMBOLIZE)\n    add_executable (symbolize_unittest\n      src/symbolize_unittest.cc\n    )\n\n    target_link_libraries (symbolize_unittest PRIVATE glog_test)\n  endif (HAVE_SYMBOLIZE)\n\n  add_executable (demangle_unittest\n    src/demangle_unittest.cc\n  )\n\n  target_link_libraries (demangle_unittest PRIVATE glog_test)\n\n  add_test (NAME demangle COMMAND demangle_unittest)\n\n  if (HAVE___CXA_DEMANGLE)\n    # Demangle tests use a different (reduced) representation of symbols\n    set_tests_properties (demangle PROPERTIES DISABLED ON)\n  endif (HAVE___CXA_DEMANGLE)\n\n  if (HAVE_STACKTRACE)\n    add_executable (stacktrace_unittest\n      src/stacktrace_unittest.cc\n    )\n\n    target_link_libraries (stacktrace_unittest PRIVATE glog_test)\n  endif (HAVE_STACKTRACE)\n\n  add_executable (utilities_unittest\n    src/utilities_unittest.cc\n  )\n\n  target_link_libraries (utilities_unittest PRIVATE glog_test)\n\n  if (HAVE_STACKTRACE AND HAVE_SYMBOLIZE)\n    add_executable (signalhandler_unittest\n      src/signalhandler_unittest.cc\n    )\n\n    target_link_libraries (signalhandler_unittest PRIVATE glog_test)\n  endif (HAVE_STACKTRACE AND HAVE_SYMBOLIZE)\n\n  add_test (NAME logging COMMAND logging_unittest)\n\n  set_tests_properties (logging PROPERTIES TIMEOUT 30)\n  # MacOS diff is not deterministic: use the output to determine whether the\n  # test passed.\n  set_tests_properties (logging PROPERTIES PASS_REGULAR_EXPRESSION \".*\\nPASS\\n.*\")\n\n  # FIXME: Skip flaky test\n  set_tests_properties (logging PROPERTIES SKIP_REGULAR_EXPRESSION\n    \"Check failed: time_ns within LogTimes::LOG_PERIOD_TOL_NS of LogTimes::LOG_PERIOD_NS\")\n\n  if (APPLE)\n    # FIXME: Skip flaky test\n    set_property (TEST logging APPEND PROPERTY SKIP_REGULAR_EXPRESSION\n      \"unexpected new.*PASS\\nTest with golden file failed. We'll try to show the diff:\")\n  endif (APPLE)\n\n  if (TARGET signalhandler_unittest)\n    add_test (NAME signalhandler COMMAND signalhandler_unittest)\n  endif (TARGET signalhandler_unittest)\n\n  if (TARGET stacktrace_unittest)\n    add_test (NAME stacktrace COMMAND stacktrace_unittest)\n    set_tests_properties (stacktrace PROPERTIES TIMEOUT 30)\n  endif (TARGET stacktrace_unittest)\n\n  add_test (NAME stl_logging COMMAND stl_logging_unittest)\n\n  if (TARGET symbolize_unittest)\n    add_test (NAME symbolize COMMAND symbolize_unittest)\n\n    # FIXME: Skip flaky test when compiled in C++20 mode\n    set_tests_properties (symbolize PROPERTIES SKIP_REGULAR_EXPRESSION\n      [=[Check failed: streq\\(\"nonstatic_func\"\\, TrySymbolize\\(\\(void \\*\\)\\(&nonstatic_func\\)\\)\\)]=])\n  endif (TARGET symbolize_unittest)\n\n  if (HAVE_LIB_GMOCK)\n    add_executable (mock-log_unittest\n      src/mock-log_unittest.cc\n      src/mock-log.h\n    )\n\n    target_link_libraries (mock-log_unittest PRIVATE glog_test)\n\n    add_test (NAME mock-log COMMAND mock-log_unittest)\n  endif (HAVE_LIB_GMOCK)\n\n  # Generate an initial cache\n\n  get_cache_variables (_CACHEVARS)\n\n  set (_INITIAL_CACHE\n    ${glog_BINARY_DIR}/test_package_config/glog_package_config_initial_cache.cmake)\n\n  # Package config test\n\n  add_test (NAME cmake_package_config_init COMMAND ${CMAKE_COMMAND}\n    -DTEST_BINARY_DIR=${glog_BINARY_DIR}/test_package_config\n    -DINITIAL_CACHE=${_INITIAL_CACHE}\n    -DCACHEVARS=${_CACHEVARS}\n    -P ${glog_SOURCE_DIR}/cmake/TestInitPackageConfig.cmake\n  )\n\n  add_test (NAME cmake_package_config_generate COMMAND ${CMAKE_COMMAND}\n    -DGENERATOR=${CMAKE_GENERATOR}\n    -DGENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}\n    -DGENERATOR_TOOLSET=${CMAKE_GENERATOR_TOOLSET}\n    -DINITIAL_CACHE=${_INITIAL_CACHE}\n    -DPACKAGE_DIR=${glog_BINARY_DIR}\n    -DPATH=$ENV{PATH}\n    -DSOURCE_DIR=${glog_SOURCE_DIR}/src/package_config_unittest/working_config\n    -DTEST_BINARY_DIR=${glog_BINARY_DIR}/test_package_config/working_config\n    -P ${glog_SOURCE_DIR}/cmake/TestPackageConfig.cmake\n  )\n\n  add_test (NAME cmake_package_config_build COMMAND\n    ${CMAKE_COMMAND} --build ${glog_BINARY_DIR}/test_package_config/working_config\n                     --config $<CONFIG>\n  )\n\n  add_test (NAME cmake_package_config_cleanup COMMAND ${CMAKE_COMMAND} -E\n    remove_directory\n    ${glog_BINARY_DIR}/test_package_config\n  )\n\n  # Fixtures setup\n  set_tests_properties (cmake_package_config_init PROPERTIES FIXTURES_SETUP\n    cmake_package_config)\n  set_tests_properties (cmake_package_config_generate PROPERTIES FIXTURES_SETUP\n    cmake_package_config_working)\n\n  # Fixtures cleanup\n  set_tests_properties (cmake_package_config_cleanup PROPERTIES FIXTURES_CLEANUP\n    cmake_package_config)\n\n  # Fixture requirements\n  set_tests_properties (cmake_package_config_generate PROPERTIES\n    FIXTURES_REQUIRED cmake_package_config)\n  set_tests_properties (cmake_package_config_build PROPERTIES\n    FIXTURES_REQUIRED \"cmake_package_config;cmake_package_config_working\")\n\n  add_executable (cleanup_immediately_unittest\n    src/cleanup_immediately_unittest.cc)\n\n  target_link_libraries (cleanup_immediately_unittest PRIVATE glog_test)\n\n  add_executable (cleanup_with_absolute_prefix_unittest\n    src/cleanup_with_absolute_prefix_unittest.cc)\n\n  target_link_libraries (cleanup_with_absolute_prefix_unittest PRIVATE glog_test)\n\n  add_executable (cleanup_with_relative_prefix_unittest\n    src/cleanup_with_relative_prefix_unittest.cc)\n\n  target_link_libraries (cleanup_with_relative_prefix_unittest PRIVATE glog_test)\n\n  set (CLEANUP_LOG_DIR ${glog_BINARY_DIR}/cleanup_tests)\n\n  add_test (NAME cleanup_init COMMAND\n    ${CMAKE_COMMAND} -E make_directory ${CLEANUP_LOG_DIR})\n  add_test (NAME cleanup_logdir COMMAND\n    ${CMAKE_COMMAND} -E remove_directory ${CLEANUP_LOG_DIR})\n  add_test (NAME cleanup_immediately COMMAND\n    ${CMAKE_COMMAND}\n    -DLOGCLEANUP=$<TARGET_FILE:cleanup_immediately_unittest>\n    # NOTE The trailing slash is important\n    -DTEST_DIR=${CLEANUP_LOG_DIR}/\n    -P ${glog_SOURCE_DIR}/cmake/RunCleanerTest1.cmake\n    WORKING_DIRECTORY ${glog_BINARY_DIR})\n  add_test (NAME cleanup_with_absolute_prefix COMMAND\n    ${CMAKE_COMMAND}\n    -DLOGCLEANUP=$<TARGET_FILE:cleanup_with_absolute_prefix_unittest>\n    -DTEST_DIR=${glog_BINARY_DIR}/\n    -P ${glog_SOURCE_DIR}/cmake/RunCleanerTest2.cmake\n    WORKING_DIRECTORY ${glog_BINARY_DIR})\n  add_test (NAME cleanup_with_relative_prefix COMMAND\n    ${CMAKE_COMMAND}\n    -DLOGCLEANUP=$<TARGET_FILE:cleanup_with_relative_prefix_unittest>\n    -DTEST_DIR=${glog_BINARY_DIR}/\n    -DTEST_SUBDIR=test_subdir/\n    -P ${glog_SOURCE_DIR}/cmake/RunCleanerTest3.cmake\n    WORKING_DIRECTORY ${glog_BINARY_DIR})\n\n  # Fixtures setup\n  set_tests_properties (cleanup_init PROPERTIES FIXTURES_SETUP logcleanuptest)\n  ## Fixtures cleanup\n  set_tests_properties (cleanup_logdir PROPERTIES FIXTURES_CLEANUP logcleanuptest)\n  # Fixture requirements\n  set_tests_properties (cleanup_immediately PROPERTIES FIXTURES_REQUIRED logcleanuptest)\n  set_tests_properties (cleanup_with_absolute_prefix PROPERTIES FIXTURES_REQUIRED logcleanuptest)\n  set_tests_properties (cleanup_with_relative_prefix PROPERTIES FIXTURES_REQUIRED logcleanuptest)\n\n  add_executable (striplog0_unittest\n    src/striplog_unittest.cc\n  )\n  target_compile_definitions (striplog0_unittest PRIVATE GOOGLE_STRIP_LOG=0)\n  target_link_libraries (striplog0_unittest PRIVATE glog_test)\n\n  add_test (NAME striplog0 COMMAND striplog0_unittest)\n\n  add_executable (striplog2_unittest\n    src/striplog_unittest.cc\n  )\n  target_compile_definitions (striplog2_unittest PRIVATE GOOGLE_STRIP_LOG=2)\n  target_link_libraries (striplog2_unittest PRIVATE glog_test)\n\n  add_test (NAME striplog2 COMMAND striplog2_unittest)\n\n  add_executable (striplog10_unittest\n    src/striplog_unittest.cc\n  )\n  target_compile_definitions (striplog10_unittest PRIVATE GOOGLE_STRIP_LOG=10)\n  target_link_libraries (striplog10_unittest PRIVATE glog_test)\n\n  add_test (NAME striplog10 COMMAND striplog10_unittest)\n\n  set_tests_properties (\n    striplog0\n    striplog2\n    striplog10\n    PROPERTIES WILL_FAIL ON\n  )\n\n  add_test (NAME log_severity_constants COMMAND ${CMAKE_CTEST_COMMAND}\n    --build-config $<CONFIG>\n    --build-and-test\n    \"${glog_SOURCE_DIR}/src/log_severity_unittest\"\n    \"${glog_BINARY_DIR}/Tests/log_severity_constants\"\n    --build-generator ${CMAKE_GENERATOR}\n    --build-makeprogram ${CMAKE_MAKE_PROGRAM}\n    --build-target glog_log_severity_constants\n    --build-options\n    -DCMAKE_BUILD_TYPE=$<CONFIG>\n    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n    -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}\n    -DCMAKE_GENERATOR_TOOLSET=${CMAKE_GENERATOR_TOOLSET}\n    -Dglog_DIR=${glog_BINARY_DIR}\n  )\n  set_tests_properties (log_severity_constants PROPERTIES\n    PASS_REGULAR_EXPRESSION \"COMPACT_GOOGLE_LOG_[1-3]\"\n  )\n\n  add_test (NAME log_severity_conversion COMMAND ${CMAKE_CTEST_COMMAND}\n    --build-config $<CONFIG>\n    --build-and-test\n    \"${glog_SOURCE_DIR}/src/log_severity_unittest\"\n    \"${glog_BINARY_DIR}/Tests/log_severity_conversion\"\n    --build-generator ${CMAKE_GENERATOR}\n    --build-makeprogram ${CMAKE_MAKE_PROGRAM}\n    --build-target glog_log_severity_conversion\n    --build-options\n    -DCMAKE_BUILD_TYPE=$<CONFIG>\n    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n    -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}\n    -DCMAKE_GENERATOR_TOOLSET=${CMAKE_GENERATOR_TOOLSET}\n    -Dglog_DIR=${glog_BINARY_DIR}\n  )\n\n  if (CMAKE_COMPILER_IS_GNUCXX)\n    set_tests_properties (log_severity_conversion PROPERTIES\n      PASS_REGULAR_EXPRESSION \"error: invalid conversion from (‘|')int(’|')\"\n    )\n  elseif (CMAKE_CXX_COMPILER_ID MATCHES Clang)\n    set_tests_properties (log_severity_conversion PROPERTIES\n      PASS_REGULAR_EXPRESSION \"no known conversion from 'int'\"\n    )\n  elseif (MSVC)\n    set_tests_properties (log_severity_conversion PROPERTIES\n      PASS_REGULAR_EXPRESSION \"error C2440\"\n    )\n  else (CMAKE_COMPILER_IS_GNUCXX)\n    message (AUTHOR_WARNING\n      \"Unsupported C++ compiler ${CMAKE_CXX_COMPILER_ID}: \"\n      \"log_severity_conversion test will be disabled\"\n    )\n    set_tests_properties (log_severity_conversion DISABLED ON)\n  endif (CMAKE_COMPILER_IS_GNUCXX)\n\n  add_test (NAME includes_logging COMMAND ${CMAKE_CTEST_COMMAND}\n    --build-config $<CONFIG>\n    --build-and-test\n    \"${glog_SOURCE_DIR}/src/includes_unittest\"\n    \"${glog_BINARY_DIR}/Tests/includes_logging\"\n    --build-generator ${CMAKE_GENERATOR}\n    --build-makeprogram ${CMAKE_MAKE_PROGRAM}\n    --build-target glog_includes_logging\n    --build-options\n    -DCMAKE_BUILD_TYPE=$<CONFIG>\n    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n    -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}\n    -DCMAKE_GENERATOR_TOOLSET=${CMAKE_GENERATOR_TOOLSET}\n    -Dglog_DIR=${glog_BINARY_DIR}\n  )\n\n  add_test (NAME includes_vlog_is_on COMMAND ${CMAKE_CTEST_COMMAND}\n    --build-config $<CONFIG>\n    --build-and-test\n    \"${glog_SOURCE_DIR}/src/includes_unittest\"\n    \"${glog_BINARY_DIR}/Tests/includes_vlog_is_on\"\n    --build-generator ${CMAKE_GENERATOR}\n    --build-makeprogram ${CMAKE_MAKE_PROGRAM}\n    --build-target glog_includes_vlog_is_on\n    --build-options\n    -DCMAKE_BUILD_TYPE=$<CONFIG>\n    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n    -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}\n    -DCMAKE_GENERATOR_TOOLSET=${CMAKE_GENERATOR_TOOLSET}\n    -Dglog_DIR=${glog_BINARY_DIR}\n  )\n\n  add_test (NAME includes_raw_logging COMMAND ${CMAKE_CTEST_COMMAND}\n    --build-config $<CONFIG>\n    --build-and-test\n    \"${glog_SOURCE_DIR}/src/includes_unittest\"\n    \"${glog_BINARY_DIR}/Tests/includes_raw_logging\"\n    --build-generator ${CMAKE_GENERATOR}\n    --build-makeprogram ${CMAKE_MAKE_PROGRAM}\n    --build-target glog_includes_raw_logging\n    --build-options\n    -DCMAKE_BUILD_TYPE=$<CONFIG>\n    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n    -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}\n    -DCMAKE_GENERATOR_TOOLSET=${CMAKE_GENERATOR_TOOLSET}\n    -Dglog_DIR=${glog_BINARY_DIR}\n  )\n\n  add_test (NAME includes_stl_logging COMMAND ${CMAKE_CTEST_COMMAND}\n    --build-config $<CONFIG>\n    --build-and-test\n    \"${glog_SOURCE_DIR}/src/includes_unittest\"\n    \"${glog_BINARY_DIR}/Tests/includes_stl_logging\"\n    --build-generator ${CMAKE_GENERATOR}\n    --build-makeprogram ${CMAKE_MAKE_PROGRAM}\n    --build-target glog_includes_stl_logging\n    --build-options\n    -DCMAKE_BUILD_TYPE=$<CONFIG>\n    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n    -DCMAKE_GENERATOR_PLATFORM=${CMAKE_GENERATOR_PLATFORM}\n    -DCMAKE_GENERATOR_TOOLSET=${CMAKE_GENERATOR_TOOLSET}\n    -Dglog_DIR=${glog_BINARY_DIR}\n  )\n\n  add_test (NAME dcheck_on COMMAND ${CMAKE_CTEST_COMMAND}\n    --build-config Debug\n    --build-and-test\n    \"${glog_SOURCE_DIR}/src/dcheck_unittest\"\n    \"${glog_BINARY_DIR}/Tests/dcheck_on\"\n    --build-generator ${CMAKE_GENERATOR}\n    --build-generator-platform \"${CMAKE_GENERATOR_PLATFORM}\"\n    --build-generator-toolset \"${CMAKE_GENERATOR_TOOLSET}\"\n    --build-makeprogram ${CMAKE_MAKE_PROGRAM}\n    --build-target glog_dcheck\n    --build-options\n    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n    -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=ON\n    -Dglog_DIR=${glog_BINARY_DIR}\n    --test-command glog_dcheck\n  )\n  set_tests_properties (dcheck_on PROPERTIES\n    DISABLED $<NOT:$<CONFIG:Debug,RelWithDebInfo>>\n    ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_FILE_DIR:glog>\"\n    PASS_REGULAR_EXPRESSION \"Assert failed: false\"\n  )\n\n  add_test (NAME dcheck_off COMMAND ${CMAKE_CTEST_COMMAND}\n    --build-config Release\n    --build-and-test\n    \"${glog_SOURCE_DIR}/src/dcheck_unittest\"\n    \"${glog_BINARY_DIR}/Tests/dcheck_off\"\n    --build-generator ${CMAKE_GENERATOR}\n    --build-generator-platform \"${CMAKE_GENERATOR_PLATFORM}\"\n    --build-generator-toolset \"${CMAKE_GENERATOR_TOOLSET}\"\n    --build-makeprogram ${CMAKE_MAKE_PROGRAM}\n    --build-target glog_dcheck\n    --build-options\n    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n    -DCMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY=ON\n    -Dglog_DIR=${glog_BINARY_DIR}\n    --test-command glog_dcheck\n  )\n  # There should be no output\n  set_tests_properties (dcheck_off PROPERTIES\n    DISABLED $<NOT:$<CONFIG:Release,MinSizeRel>>\n    ENVIRONMENT_MODIFICATION \"PATH=path_list_prepend:$<TARGET_FILE_DIR:glog>\"\n    PASS_REGULAR_EXPRESSION \"\"\n  )\nendif (BUILD_TESTING)\n\nif (BUILD_EXAMPLES)\n  add_executable (custom_sink_example examples/custom_sink.cc)\n  target_link_libraries (custom_sink_example PRIVATE glog::glog)\nendif (BUILD_EXAMPLES)\n\ninstall (TARGETS glog\n  EXPORT glog-targets\n  RUNTIME DESTINATION ${_glog_CMake_BINDIR}\n  PUBLIC_HEADER DESTINATION ${_glog_CMake_INCLUDE_DIR}/glog\n  LIBRARY DESTINATION ${_glog_CMake_LIBDIR}\n  ARCHIVE DESTINATION ${_glog_CMake_LIBDIR})\n\nif (WITH_PKGCONFIG)\n  install (\n    FILES \"${glog_BINARY_DIR}/libglog.pc\"\n    DESTINATION \"${_glog_CMake_LIBDIR}/pkgconfig\"\n  )\nendif (WITH_PKGCONFIG)\n\nset (glog_CMake_VERSION 3.0)\n\nif (gflags_FOUND)\n  # Ensure clients locate only the package config and not third party find\n  # modules having the same name. This avoid cmake_policy PUSH/POP errors.\n  if (CMAKE_VERSION VERSION_LESS 3.9)\n    set (gflags_DEPENDENCY \"find_dependency (gflags ${gflags_VERSION})\")\n  else (CMAKE_VERSION VERSION_LESS 3.9)\n    # Passing additional find_package arguments to find_dependency is possible\n    # starting with CMake 3.9.\n    set (glog_CMake_VERSION 3.9)\n    set (gflags_DEPENDENCY \"find_dependency (gflags ${gflags_VERSION} NO_MODULE)\")\n  endif (CMAKE_VERSION VERSION_LESS 3.9)\nendif (gflags_FOUND)\n\nconfigure_package_config_file (glog-config.cmake.in\n  ${glog_BINARY_DIR}/glog-config.cmake\n  INSTALL_DESTINATION ${_glog_CMake_INSTALLDIR}\n  NO_CHECK_REQUIRED_COMPONENTS_MACRO)\n\nwrite_basic_package_version_file (\n  ${glog_BINARY_DIR}/glog-config-version.cmake\n  COMPATIBILITY SameMajorVersion)\n\nexport (TARGETS glog NAMESPACE glog:: FILE glog-targets.cmake)\nexport (PACKAGE glog)\n\nget_filename_component (_PREFIX \"${CMAKE_INSTALL_PREFIX}\" ABSOLUTE)\n\n# Directory containing the find modules relative to the config install\n# directory.\nfile (RELATIVE_PATH glog_REL_CMake_MODULES\n  ${_PREFIX}/${_glog_CMake_INSTALLDIR}\n  ${_PREFIX}/${_glog_CMake_DATADIR}/glog-modules.cmake)\n\nget_filename_component (glog_REL_CMake_DATADIR ${glog_REL_CMake_MODULES}\n  DIRECTORY)\n\nset (glog_FULL_CMake_DATADIR\n  ${glog_BINARY_DIR}/${_glog_CMake_DATADIR})\n\nconfigure_file (glog-modules.cmake.in\n  ${glog_BINARY_DIR}/glog-modules.cmake @ONLY)\n\ninstall (CODE\n\"\nset (glog_FULL_CMake_DATADIR \\\"\\\\\\${CMAKE_CURRENT_LIST_DIR}/${glog_REL_CMake_DATADIR}\\\")\nset (glog_DATADIR_DESTINATION ${_glog_CMake_INSTALLDIR})\n\nif (NOT IS_ABSOLUTE ${_glog_CMake_INSTALLDIR})\n  set (glog_DATADIR_DESTINATION \\\"\\${CMAKE_INSTALL_PREFIX}/\\${glog_DATADIR_DESTINATION}\\\")\nendif (NOT IS_ABSOLUTE ${_glog_CMake_INSTALLDIR})\n\nconfigure_file (\\\"${glog_SOURCE_DIR}/glog-modules.cmake.in\\\"\n  \\\"${glog_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/glog-modules.cmake\\\" @ONLY)\nfile (INSTALL\n  \\\"${glog_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/glog-modules.cmake\\\"\n  DESTINATION\n  \\\"\\${glog_DATADIR_DESTINATION}\\\")\n\"\n  COMPONENT Development\n)\n\ninstall (FILES\n  ${glog_BINARY_DIR}/glog-config.cmake\n  ${glog_BINARY_DIR}/glog-config-version.cmake\n  DESTINATION ${_glog_CMake_INSTALLDIR})\n\n# Find modules in share/glog/cmake\ninstall (DIRECTORY ${_glog_BINARY_CMake_DATADIR}\n  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/glog\n  COMPONENT Development\n  FILES_MATCHING PATTERN \"*.cmake\"\n)\n\ninstall (EXPORT glog-targets NAMESPACE glog:: DESTINATION\n  ${_glog_CMake_INSTALLDIR})\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 2.0185546875,
          "content": "# People who have agreed to one of the CLAs and can contribute patches.\n# The AUTHORS file lists the copyright holders; this file\n# lists people.  For example, Google employees are listed here\n# but not in AUTHORS, because Google holds the copyright.\n#\n# Names should be added to this file only after verifying that\n# the individual or the individual's organization has agreed to\n# the appropriate Contributor License Agreement, found here:\n#\n# https://developers.google.com/open-source/cla/individual\n# https://developers.google.com/open-source/cla/corporate\n#\n# The agreement for individuals can be filled out on the web.\n#\n# When adding J Random Contributor's name to this file,\n# either J's name or J's organization's name should be\n# added to the AUTHORS file, depending on whether the\n# individual or corporate CLA was used.\n#\n# Names should be added to this file as:\n#     Name <email address>\n#\n# Please keep the list sorted.\n\nAbhishek Dasgupta <abhi2743@gmail.com>\nAbhishek Parmar <abhishek@orng.net>\nAndrew Schwartzmeyer <andrew@schwartzmeyer.com>\nAndy Ying <andy@trailofbits.com>\nBret McKee <bretmckee@google.com>\nBrian Silverman <bsilver16384@gmail.com>\nDmitriy Arbitman <d.arbitman@gmail.com>\nEric Kilmer <eric.d.kilmer@gmail.com>\nFumitoshi Ukai <ukai@google.com>\nGuillaume Dumont <dumont.guillaume@gmail.com>\nHåkan L. S. Younes <hyounes@google.com>\nIvan Penkov <ivanpe@google.com>\nJacob Trimble <modmaker@google.com>\nJim Ray <jimray@google.com>\nLingBin <lingbinlb@gmail.com>\nMarco Wang <m.aesophor@gmail.com>\nMichael Darr <mdarr@matician.com>\nMichael Tanner <michael@tannertaxpro.com>\nMiniLight <MiniLightAR@Gmail.com>\nPeter Collingbourne <pcc@google.com>\nRodrigo Queiro <rodrigoq@google.com>\nromange <romange@users.noreply.github.com>\nRoman Perepelitsa <roman.perepelitsa@gmail.com>\nSergiu Deitsch <sergiu.deitsch@gmail.com>\nShinichiro Hamaji <hamaji@google.com>\ntbennun <tbennun@gmail.com>\nTeddy Reed <teddy@prosauce.org>\nVijaymahantesh Sattigeri <vijaymahantesh016@gmail.com>\nZhongming Qu <qzmfranklin@gmail.com>\nZhuoran Shen <cmsflash99@gmail.com>\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 3.814453125,
          "content": "2024-06-08  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.7.1.\n\t* See git log for the details.\n\n2024-02-17  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.7.0.\n\t* See git log for the details.\n\n2022-04-05  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.6.0.\n\t* See git log for the details.\n\n2021-05-08  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.5.0.\n\t* See git log for the details.\n\n2019-01-22  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.4.0.\n\t* See git log for the details.\n\n2017-05-09  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.3.5\n\t* See git log for the details.\n\n2015-03-09  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.3.4\n\t* See git log for the details.\n\n2013-02-01  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.3.3\n\t* Add --disable-rtti option for configure.\n\t* Visual Studio build and test fix.\n\t* QNX build fix (thanks vanuan).\n\t* Reduce warnings.\n\t* Fixed LOG_SYSRESULT (thanks ukai).\n\t* FreeBSD build fix (thanks yyanagisawa).\n\t* Clang build fix.\n\t* Now users can re-initialize glog after ShutdownGoogleLogging.\n\t* Color output support by GLOG_colorlogtostderr (thanks alexs).\n\t* Now glog's ABI around flags are compatible with gflags.\n\t* Document mentions how to modify flags from user programs.\n\n2012-01-12  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.3.2\n\t* Clang support.\n\t* Demangler and stacktrace improvement for newer GCCs.\n\t* Now fork(2) doesn't mess up log files.\n\t* Make valgrind happier.\n\t* Reduce warnings for more -W options.\n\t* Provide a workaround for ERROR defined by windows.h.\n\n2010-06-15  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.3.1\n\t* GLOG_* environment variables now work even when gflags is installed.\n\t* Snow leopard support.\n\t* Now we can build and test from out side tree.\n\t* Add DCHECK_NOTNULL.\n\t* Add ShutdownGoogleLogging to close syslog (thanks DGunchev)\n\t* Fix --enable-frame-pointers option (thanks kazuki.ohta)\n\t* Fix libunwind detection (thanks giantchen)\n\n2009-07-30  Google Inc. <opensource@google.com>\n\n\t* google-glog: version 0.3.0\n\t* Fix a deadlock happened when user uses glog with recent gflags.\n\t* Suppress several unnecessary warnings (thanks keir).\n\t* NetBSD and OpenBSD support.\n\t* Use Win32API GetComputeNameA properly (thanks magila).\n\t* Fix user name detection for Windows (thanks ademin).\n\t* Fix several minor bugs.\n\n2009-04-10  Google Inc. <opensource@google.com>\n\t* google-glog: version 0.2.1\n\t* Fix timestamps of VC++ version.\n\t* Add pkg-config support (thanks Tomasz)\n\t* Fix build problem when building with gtest (thanks Michael)\n\t* Add --with-gflags option for configure (thanks Michael)\n\t* Fixes for GCC 4.4 (thanks John)\n\n2009-01-23  Google Inc. <opensource@google.com>\n\t* google-glog: version 0.2\n\t* Add initial Windows VC++ support.\n\t* Google testing/mocking frameworks integration.\n\t* Link pthread library automatically.\n\t* Flush logs in signal handlers.\n\t* Add macros LOG_TO_STRING, LOG_AT_LEVEL, DVLOG, and LOG_TO_SINK_ONLY.\n\t* Log microseconds.\n\t* Add --log_backtrace_at option.\n\t* Fix some minor bugs.\n\n2008-11-18  Google Inc. <opensource@google.com>\n\t* google-glog: version 0.1.2\n\t* Add InstallFailureSignalHandler(). (satorux)\n\t* Re-organize the way to produce stacktraces.\n\t* Don't define unnecessary macro DISALLOW_EVIL_CONSTRUCTORS.\n\n2008-10-15  Google Inc. <opensource@google.com>\n\t* google-glog: version 0.1.1\n\t* Support symbolize for MacOSX 10.5.\n\t* BUG FIX: --vmodule didn't work with gflags.\n\t* BUG FIX: symbolize_unittest failed with GCC 4.3.\n\t* Several fixes on the document.\n\n2008-10-07  Google Inc. <opensource@google.com>\n\n\t* google-glog: initial release:\n\tThe glog package contains a library that implements application-level\n\tlogging.  This library provides logging APIs based on C++-style\n\tstreams and various helper macros.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.44140625,
          "content": "Copyright © 2024, Google Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n* Neither the name of Google Inc. nor the names of its contributors may be used\n  to endorse or promote products derived from this software without specific\n  prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 0.5,
          "content": "module(\n    name = \"glog\",\n    compatibility_level = 1,\n)\n\nbazel_dep(name = \"gflags\", version = \"2.2.2\")\nbazel_dep(name = \"googletest\", version = \"1.14.0\", dev_dependency = True)\nbazel_dep(name = \"platforms\", version = \"0.0.10\")\nbazel_dep(name = \"rules_cc\", version = \"0.0.12\")\n\n# Required for Windows clang-cl build: --extra_toolchains=@local_config_cc//:cc-toolchain-arm64_windows\ncc_configure = use_extension(\"@rules_cc//cc:extensions.bzl\", \"cc_configure_extension\")\nuse_repo(cc_configure, \"local_config_cc\")\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 1.00390625,
          "content": "Google Logging Library\n======================\n\n|Linux Github actions| |Windows Github actions| |macOS Github actions| |Codecov|\n\nGoogle Logging (glog) is a C++14 library that implements application-level\nlogging. The library provides logging APIs based on C++-style streams and\nvarious helper macros.\n\nGetting Started\n---------------\n\nPlease refer to project's `documentation <https://google.github.io/glog/>`_.\n\n\n.. |Linux Github actions| image:: https://github.com/google/glog/actions/workflows/linux.yml/badge.svg\n   :target: https://github.com/google/glog/actions\n.. |Windows Github actions| image:: https://github.com/google/glog/actions/workflows/windows.yml/badge.svg\n   :target: https://github.com/google/glog/actions\n.. |macOS Github actions| image:: https://github.com/google/glog/actions/workflows/macos.yml/badge.svg\n   :target: https://github.com/google/glog/actions\n.. |Codecov| image:: https://codecov.io/gh/google/glog/branch/master/graph/badge.svg?token=8an420vNju\n   :target: https://codecov.io/gh/google/glog\n"
        },
        {
          "name": "WORKSPACE.bazel",
          "type": "blob",
          "size": 0.0390625,
          "content": "# WORKSPACE marker file needed by Bazel\n"
        },
        {
          "name": "bazel",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.2216796875,
          "content": "comment:\n  layout: \"diff, flags, files\"\n  behavior: default\n  require_changes: false\n  require_base: false\n  require_head: true\nignore:\n  - \"**/*_unittest.cc\"\n  - \"src/*_unittest/**\"\n  - \"src/googletest.h\"\n  - \"src/mock-log.h\"\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gcovr.cfg",
          "type": "blob",
          "size": 0.208984375,
          "content": "exclude = src/.*_unittest\\.cc\nexclude = src/googletest\\.h\nexclude = src/mock-log\\.h\nexclude-directories = Tests/\nexclude-throw-branches = yes\nexclude-unreachable-branches = yes\nfilter = .*/glog/.*\\.h\nfilter = src/\n"
        },
        {
          "name": "glog-config.cmake.in",
          "type": "blob",
          "size": 0.3955078125,
          "content": "if (CMAKE_VERSION VERSION_LESS @glog_CMake_VERSION@)\n  message (FATAL_ERROR \"CMake >= @glog_CMake_VERSION@ required\")\nendif (CMAKE_VERSION VERSION_LESS @glog_CMake_VERSION@)\n\n@PACKAGE_INIT@\n\ninclude (CMakeFindDependencyMacro)\ninclude (${CMAKE_CURRENT_LIST_DIR}/glog-modules.cmake)\n\nfind_dependency (Threads)\n\n@gflags_DEPENDENCY@\n@Unwind_DEPENDENCY@\n\ninclude (${CMAKE_CURRENT_LIST_DIR}/glog-targets.cmake)\n"
        },
        {
          "name": "glog-modules.cmake.in",
          "type": "blob",
          "size": 0.669921875,
          "content": "cmake_policy (PUSH)\ncmake_policy (SET CMP0057 NEW)\n\nif (CMAKE_VERSION VERSION_LESS 3.3)\n  message (FATAL_ERROR \"glog-modules.cmake requires the consumer \"\n    \"to use CMake 3.3 (or newer)\")\nendif (CMAKE_VERSION VERSION_LESS 3.3)\n\nset (glog_MODULE_PATH \"@glog_FULL_CMake_DATADIR@\")\nlist (APPEND CMAKE_MODULE_PATH ${glog_MODULE_PATH})\n\nif (NOT glog_MODULE_PATH IN_LIST CMAKE_MODULE_PATH)\n  message (FATAL_ERROR \"Cannot add '${glog_MODULE_PATH}' to \"\n    \"CMAKE_MODULE_PATH. This will cause glog-config.cmake to fail at \"\n    \"locating required find modules. Make sure CMAKE_MODULE_PATH is not a cache variable.\")\nendif (NOT glog_MODULE_PATH IN_LIST CMAKE_MODULE_PATH)\n\ncmake_policy (POP)\n"
        },
        {
          "name": "libglog.pc.in",
          "type": "blob",
          "size": 0.26953125,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: libglog\nDescription: Google Log (glog) C++ logging framework\nVersion: @VERSION@\nLibs: -L${libdir} -lglog\nLibs.private: @glog_libraries_options_for_static_linking@\nCflags: -I${includedir}\n"
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 3.193359375,
          "content": "---\nsite_name: Google Logging Library\nsite_url: https://google.github.io/glog/\nrepo_url: https://github.com/google/glog\nrepo_name: google/glog\nedit_uri: edit/master/docs/\ncopyright: Copyright &copy; 2024 Google Inc. &amp; contributors - <a href=\"#__consent\">Change cookie settings</a>\nmarkdown_extensions:\n  - admonition\n  - attr_list\n  - def_list\n  - footnotes\n  - md_in_html\n  - pymdownx.details\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets:\n      base_path:\n        - '.'\n      check_paths: true\n  - pymdownx.superfences\n  - tables\n  - toc:\n      permalink: true\ntheme:\n  name: material\n  custom_dir: docs/overrides\n  icon:\n    annotation: material/chevron-right-circle\n    edit: material/pencil\n    repo: fontawesome/brands/git-alt\n    view: material/eye\n  language: en\n  features:\n    - content.action.edit\n    - content.code.annotate\n    - content.code.copy\n    - content.code.select\n    - header.autohide\n    - navigation.expand\n    - navigation.instant.preview\n    - navigation.instant.progress\n    - navigation.prune\n    - navigation.indexes\n    - toc.follow\n    - navigation.top\n    - navigation.path\n    # - navigation.sections\n    # - navigation.tabs\n    # - navigation.tabs.sticky\n    - navigation.tracking\n    - search.highlight\n    - search.share\n    - search.suggest\n  palette:\n    # Palette toggle for automatic mode\n    - media: \"(prefers-color-scheme)\"\n      toggle:\n        icon: material/brightness-auto\n        name: Switch to light mode\n    # Palette toggle for light mode\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      primary: teal\n      accent: green\n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n    # Palette toggle for dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      primary: black\n      toggle:\n        icon: material/brightness-4\n        name: Switch to system preference\nplugins:\n  - git-revision-date-localized:\n      enable_creation_date: true\n  - git-committers:\n      repository: google/glog\n      branch: master\n  - privacy\n  - search\n  - tags\nextra:\n  version:\n    alias: true\n    default:\n      - dev\n      - stable\n    provider: mike\n  consent:\n    actions:\n      - manage\n      - accept\n      - reject\n    title: Cookie consent\n    description: >-\n      We use cookies to recognize your repeated visits and preferences, as well\n      as to measure the effectiveness of our documentation and whether users\n      find what they're searching for. With your consent, you're helping us to\n      make our documentation better.\nnav:\n  - Getting Started:\n      - Overview: index.md\n      - Usage in CMake Projects: usage.md\n      - Building from Source: build.md\n      - Installation using Package Managers: packages.md\n  - User Guide:\n      - Logging: logging.md\n      - Adjusting Output: flags.md\n      - Custom Sinks: sinks.md\n      - Failure Handler: failures.md\n      - Log Removal: log_cleaner.md\n      - Stripping Log Messages: log_stripping.md\n      - System-specific Considerations:\n          - Usage on Windows: windows.md\n          - Linux Unwinder: unwinder.md\n  - Contributing: contribute.md\n  - License: license.md\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}