{
  "metadata": {
    "timestamp": 1736566165019,
    "page": 173,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ValveSoftware/openvr",
      "stars": 6174,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.6923828125,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto\n\n# Explicitly declare text files you want to always be normalized and converted\n# to native line endings on checkout.\n*.bat text\n*.txt text\n*.c text\n*.h text\n*.H text\n*.cc text\n*.cpp text\n*.awk text\n*.pl text\n*.py text\n*.xcconfig text\n*.vcd text\n*.vbsp text\n*.proto text\n*.inc text\n*.fxc text\n*.vsh text\n*.lst text\n*.mm text\n*.cfg text\n*.res text\n*.rc text\n*.def text\n*.vmt text\n*.inl text\n*.asm text\n\n.gitignore text\nREADME text\nCONTRIBUTING text\nLICENSE text\n\n# Declare files that will always have LF line endings on checkout.\n*.sh eol=lf\n\n# Denote all files that are truly binary and should not be modified.\n*.exe binary\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.6455078125,
          "content": "# Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 2.8)\n\n# Set project name.\nproject(OpenVRSDK)\n\n# Fetch the version from the headers\nset(VERSION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/headers/openvr.h\")\n\nset(VERSION_MAJOR_REGEX \"\\tstatic const uint32_t k_nSteamVRVersionMajor = (.+);\")\nset(VERSION_MINOR_REGEX \"\\tstatic const uint32_t k_nSteamVRVersionMinor = (.+);\")\nset(VERSION_BUILD_REGEX \"\\tstatic const uint32_t k_nSteamVRVersionBuild = (.+);\")\n\nfile(STRINGS \"${VERSION_FILE}\" VERSION_MAJOR_STRING REGEX \"${VERSION_MAJOR_REGEX}\")\nfile(STRINGS \"${VERSION_FILE}\" VERSION_MINOR_STRING REGEX \"${VERSION_MINOR_REGEX}\")\nfile(STRINGS \"${VERSION_FILE}\" VERSION_BUILD_STRING REGEX \"${VERSION_BUILD_REGEX}\")\n\nstring(REGEX REPLACE \"${VERSION_MAJOR_REGEX}\" \"\\\\1\" VERSION_MAJOR ${VERSION_MAJOR_STRING})\nstring(REGEX REPLACE \"${VERSION_MINOR_REGEX}\" \"\\\\1\" VERSION_MINOR ${VERSION_MINOR_STRING})\nstring(REGEX REPLACE \"${VERSION_BUILD_REGEX}\" \"\\\\1\" VERSION_BUILD ${VERSION_BUILD_STRING})\n\nset(OPENVR_VERSION \"${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_BUILD}\")\n\n# Setup some options.\noption(BUILD_SHARED \"Builds the library as shared library\" OFF)\noption(BUILD_FRAMEWORK \"Builds the library as an apple Framework\" OFF)\noption(BUILD_UNIVERSAL \"Builds the shared or framework as a universal (fat, 32- & 64-bit) binary\" ON)\noption(BUILD_OSX_I386 \"Builds the shared or framework as a 32-bit binary, even on a 64-bit platform\" OFF)\noption(USE_LIBCXX \"Uses libc++ instead of libstdc++\" ON)\noption(USE_CUSTOM_LIBCXX \"Uses a custom libc++\" OFF)\n\nadd_definitions( -DVR_API_PUBLIC )\n\n# Check if 32 or 64 bit system.\nset(SIZEOF_VOIDP ${CMAKE_SIZEOF_VOID_P})\nif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n  set(PROCESSOR_ARCH \"64\")\nelse()\n  set(PROCESSOR_ARCH \"32\")\nendif()\n\n# Get platform.\nif(WIN32)\n  set(PLATFORM_NAME \"win\")\n  if(NOT BUILD_SHARED)\n    add_definitions(-DOPENVR_BUILD_STATIC)\n  endif()\nelseif(UNIX AND NOT APPLE)\n  if(CMAKE_SYSTEM_NAME MATCHES \".*Linux\")\n    set(PLATFORM_NAME \"linux\")\n    add_definitions(-DLINUX -DPOSIX)\n    if (CMAKE_SYSTEM_PROCESSOR MATCHES \"aarch64\")\n      add_definitions(-DLINUXARM64)\n    elseif(PROCESSOR_ARCH MATCHES \"64\")\n      add_definitions(-DLINUX64)\n    endif()\n  endif()\nelseif(APPLE)\n  if(CMAKE_SYSTEM_NAME MATCHES \".*Darwin.*\" OR CMAKE_SYSTEM_NAME MATCHES \".*MacOS.*\")\n    set(PLATFORM_NAME \"osx\")\n    add_definitions(-DOSX -DPOSIX)\n    if(BUILD_UNIVERSAL)\n      set(CMAKE_OSX_ARCHITECTURES \"i386;x86_64\")\n    endif()\n    if(BUILD_OSX_I386)\n      set(PROCESSOR_ARCH \"32\")\n      set(CMAKE_OSX_ARCHITECTURES \"i386\")\n    endif()\n  endif()\nendif()\n\n# Set output folder for static and shared libraries\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin/${PLATFORM_NAME}${PROCESSOR_ARCH})\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin/${PLATFORM_NAME}${PROCESSOR_ARCH})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin/${PLATFORM_NAME}${PROCESSOR_ARCH})\n\n# Enable some properties.\nif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n\t# Enable c++11 and hide symbols which shouldn't be visible\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11 -fPIC -fvisibility=hidden\")\n\n\t# Set custom libc++ usage here\n\tif(CMAKE_C_COMPILER_ID MATCHES \"Clang\" AND USE_LIBCXX)\n\t\tif(USE_CUSTOM_LIBCXX)\n\t\t\tif(BUILD_SHARED)\n\t\t\t\tset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -stdlib=libc++\")\n\t\t\tendif()\n\t\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -nostdinc++\")\n\t\t\tinclude_directories( ${LIBCXX_INCLUDE} ${LIBCXX_ABI_INCLUDE})\n\t\t\tmessage(STATUS \"Using custom libc++\")\n\t\telse()\n\t\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++\")\n\t\t\tmessage(STATUS \"Using libc++\")\n\t\tendif()\n\tendif()\nendif()\n\nadd_subdirectory(src)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.453125,
          "content": "Copyright (c) 2015, Valve Corporation\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.8125,
          "content": "OpenVR SDK\n---\n\nOpenVR is an API and runtime that allows access to VR hardware from multiple\nvendors without requiring that applications have specific knowledge of the\nhardware they are targeting. This repository is an SDK that contains the API\nand samples. The runtime is under SteamVR in Tools on Steam.\n\n### Documentation\n\n#### Application API\n\nDocumentation for the Application API is available on\nthe [GitHub Wiki](https://github.com/ValveSoftware/openvr/wiki/API-Documentation).\n\n#### Driver API\n\nCurrent documentation for the Driver API can be found in [docs/Driver_API_Documentation.md](docs/).\n\n* Old driver API documentation can still be found on\n  the [GitHub Wiki](https://github.com/ValveSoftware/openvr/wiki/Driver-Documentation).\n\n### About\n\nMore information on OpenVR and SteamVR can be found on https://steamvr.com\n"
        },
        {
          "name": "Toolchain-clang.cmake",
          "type": "blob",
          "size": 0.26171875,
          "content": "set(CMAKE_SYSTEM_NAME Linux)\n\nset(CMAKE_C_COMPILER clang)\nset(CMAKE_CXX_COMPILER clang++)\n\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "codegen",
          "type": "tree",
          "content": null
        },
        {
          "name": "controller_callouts",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "headers",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}