{
  "metadata": {
    "timestamp": 1736566096815,
    "page": 91,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "KDE/krita",
      "stars": 7689,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.744140625,
          "content": "---\n# SPDX-FileCopyrightText: 2019 Christoph Cullmann <cullmann@kde.org>\n# SPDX-FileCopyrightText: 2019 Gernot Gebhard <gebhard@absint.com>\n# SPDX-FileCopyrightText: 2022 L. E. Segovia <amy@amyspark.me>\n#\n# SPDX-License-Identifier: MIT\n#\n# Based on ECM, Krita customizations are marked by KRITA: (all caps)\n# See https://clang.llvm.org/docs/ClangFormatStyleOptions.html for the config options\n# and https://community.kde.org/Policies/Frameworks_Coding_Style#Clang-format_automatic_code_formatting\n# for clang-format tips & tricks\n---\nLanguage: JavaScript\nDisableFormat: true\n---\n\n# Style for C++\nLanguage: Cpp\n\n# base is WebKit coding style: https://webkit.org/code-style-guidelines/\n# below are only things set that diverge from this style!\nBasedOnStyle: WebKit\n\n# enforce C++11 (e.g. for std::vector<std::vector<lala>>\n# KRITA: enforce C++14\nStandard: c++14\n\n# 4 spaces indent\nTabWidth: 4\n\n# 2 * 80 wide lines\n# KRITA: shortened to 120\nColumnLimit: 120\n\n# sort includes inside line separated groups\nSortIncludes: true\n\n# break before braces on function, namespace and class definitions.\nBreakBeforeBraces: Linux\n\n# CrlInstruction *a;\nPointerAlignment: Right\n\n# horizontally aligns arguments after an open bracket.\nAlignAfterOpenBracket: Align\n\n# don't move all parameters to new line\nAllowAllParametersOfDeclarationOnNextLine: false\n\nAllowShortEnumsOnASingleLine: false\n\n# no single line functions\nAllowShortFunctionsOnASingleLine: None\n\n# always break before you encounter multi line strings\nAlwaysBreakBeforeMultilineStrings: true\n\n# don't move arguments to own lines if they are not all on the same\nBinPackArguments: false\n\n# don't move parameters to own lines if they are not all on the same\nBinPackParameters: false\n\n# In case we have an if statement with multiple lines the operator should be at the beginning of the line\n# but we do not want to break assignments\nBreakBeforeBinaryOperators: NonAssignment\n\n# format C++11 braced lists like function calls\nCpp11BracedListStyle: true\n\n# do not put a space before C++11 braced lists\nSpaceBeforeCpp11BracedList: false\n\n# remove empty lines\nKeepEmptyLinesAtTheStartOfBlocks: false\n\n# no namespace indentation to keep indent level low\nNamespaceIndentation: None\n\n# we use template< without space.\nSpaceAfterTemplateKeyword: false\n\n# Always break after template declaration\nAlwaysBreakTemplateDeclarations: true\n\n# macros for which the opening brace stays attached.\nForEachMacros: [ foreach, Q_FOREACH, BOOST_FOREACH, forever, Q_FOREVER, QBENCHMARK, QBENCHMARK_ONCE , wl_resource_for_each, wl_resource_for_each_safe ]\n\n# keep lambda formatting multi-line if not empty\nAllowShortLambdasOnASingleLine: Empty\n\n# We do not want clang-format to put all arguments on a new line\nAllowAllArgumentsOnNextLine: false\n\n# Don't format SPDX lines\nCommentPragmas: ' SPDX-'\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 3.396484375,
          "content": "# SPDX-FileCopyrightText: 2020-2022 Rachel Mant <git@dragonmux.network>\n# SPDX-FileCopyrightText: 2022 L. E. Segovia <amy@amyspark.me>\n# SPDX-License-Ref: BSD-3-Clause\n\n---\nChecks:              '\n    bugprone-*\n    ,cert-*\n    ,cppcoreguidelines-*\n    ,modernize-*\n    ,performance-*\n    ,readability-*\n    ,portability-*\n    ,clang-analyzer-unix\n    ,clang-analyzer-security\n    ,clang-analyzer-deadcode\n    ,clang-analyzer-core\n    ,clang-analyzer-cplusplus\n    ,clang-analyzer-optin\n    ,llvm-namespace-comment\n    ,readability-static-accessed-through-instance\n    ,misc-const-correctness\n    ,-modernize-use-trailing-return-type\n    ,-cppcoreguidelines-avoid-magic-numbers\n    ,-readability-redundant-member-init\n    ,-readability-else-after-return\n    ,-readability-implicit-bool-conversion\n    ,-cppcoreguidelines-owning-memory\n    ,-cppcoreguidelines-pro-bounds-pointer-arithmetic\n    ,-cppcoreguidelines-pro-type-vararg\n    ,-readability-named-parameter\n    ,-readability-magic-numbers\n    ,-readability-uppercase-literal-suffix\n    ,-bugprone-easily-swappable-parameters\n'\nWarningsAsErrors: ''\nFormatStyle: 'file'\nAnalyzeTemporaryDtors: false\nCheckOptions:\n  - key:             cert-dcl16-c.NewSuffixes\n    value:           'L;LL;LU;LLU'\n  - key:             cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField\n    value:           '0'\n  - key:             cppcoreguidelines-explicit-virtual-functions.IgnoreDestructors\n    value:           '0'\n  - key:             cppcoreguidelines-special-member-functions.AllowMissingMoveFunctionsWhenCopyIsDeleted\n    value:           true\n  - key:             cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic\n    value:           '1'\n  - key:             modernize-loop-convert.MaxCopySize\n    value:           '16'\n  - key:             modernize-loop-convert.MinConfidence\n    value:           reasonable\n  - key:             modernize-loop-convert.NamingStyle\n    value:           camelBack\n  - key:             modernize-pass-by-value.IncludeStyle\n    value:           llvm\n  - key:             modernize-replace-auto-ptr.IncludeStyle\n    value:           llvm\n  - key:             modernize-use-nullptr.NullMacros\n    value:           'NULL'\n  - key:             readability-braces-around-statements.ShortStatementLines\n    value:           '4'\n  - key:             cppcoreguidelines-owning-memory.LegacyResourceConsumers\n    value:           '::free;::realloc;::freopen;::fclose;::toQShared;::QSharedPointer::QSharedPointer;::QSharedPointer::reset;::QScopedPointer::QScopedPointer;::QScopedPointer::reset'\n  - key:             performance-unnecessary-value-param.AllowedTypes\n    value:           '.+SP;QWeakPointer;QSharedPointer'\n  - key:             modernize-use-auto.MinTypeNameLength\n    value:           10\n  - key:             readability-identifier-length.IgnoredVariableNames\n    value:           '^(gc|rc|p[0-9]|i[dot]|ok|[abcdijknopt]|c[rs]|fp|tf)$'\n  - key:             readability-identifier-length.IgnoredParameterNames\n    value:           '^(c[rs]|i[dot]|v)$'\n  - key:             readability-identifier-length.IgnoredLoopCounterNames\n    value:           '^[cijktuvxyz_]$'\n  - key:             modernize-use-transparent-functors.SafeMode\n    value:           true\n  - key:             misc-const-correctness.WarnPointersAsValues\n    value:           true\n  - key:             misc-const-correctness.TransformPointersAsValues\n    value:           true\n...\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.2744140625,
          "content": "# Ignore commits from git-blame, if your editor doesn't already, use:\n#\n# $ git config --add 'blame.ignoreRevsFile' '.git-blame-ignore-revs'\n#\n\n# Fix indentation of java files\n539702e3f911fe5cd3657138d3f9bbcc8720e473\n\n# Spelling fix commit\n7a9553df11bed31d7ba70bde159f44139b83453e\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2685546875,
          "content": "# Windows batch files must be in CRLF to not make cmd.exe freak out\n*.cmd text eol=crlf\n*.bat text eol=crlf\n\n# Make sure Windows .lnk shortcuts are binary\n*.lnk binary\n\n# Patch files must be checked out in CRLF on Windows for patch to work\n*.patch text=auto\n*.diff text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.53515625,
          "content": "compile_commands.json\n*.orig\n*.rej\n__pycache__\n*.egg-info\n*.trace\nbuild\nqtcreator-build\n*.kdev4\n*~\n.kateconfig\nCMakeLists.txt.user*\n.directory\n*.autosave\n*.swp\n.gdb_history\n.kdev_include_paths\n*.config\n*.creator\n*.creator.user\n*.files\n*.includes\n.DS_Store\n*.kate-swap\n.idea\nGTAGS\nGPATH\nGRTAGS\nGSYMS\nBROWSE\n*.kate-swp\nbuild_dir\n.flatpak-builder\n.cache\n\ncmake-build-debug/\ncmake-build-debug-mingw/\ncmake-build-debug-mingw64/\n\ncmake-build-release/\ncmake-build-release-mingw/\ncmake-build-release-mingw64/\n\n.vscode/\n\n_build\n_install\n_staging\n_packaging\n"
        },
        {
          "name": ".gitlab-ci.script",
          "type": "blob",
          "size": 0.951171875,
          "content": "#!/bin/bash -fxv\n\n# stop running script if a command fails\nset -e\n\n# ensure `clang-format` command points to `clang-format-11`\nupdate-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-11 30\nupdate-alternatives --set clang-format /usr/bin/clang-format-11\n\n# download .clang-format into current directory\nwget -c --output-document=.clang-format https://invent.kde.org/frameworks/extra-cmake-modules/raw/master/kde-modules/clang-format.cmake\n\n# format source code inline\ngit clang-format-11 $(git merge-base origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_COMMIT_SHA)\n\n# if files were modified, then print the diff modified that would make the proper format\nif ! git diff-index --quiet HEAD; then\n  echo '*** Suggested changes to comply with KDE code conventions are below'\n  echo 'You can copy below this empty line, save the content to a format.patch file, then do `patch < format.patch`'\n  echo ''\n  git --no-pager diff -U0\n  exit 1\nfi\n\nexit 0\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 3.8671875,
          "content": "# SPDX-FileCopyrightText: 2021 Felipe Lema <felipelema@mortemale.org>\n# SPDX-FileCopyrightText: 2022 Nicolás Alvarez <nicolas.alvarez@gmail.com>\n# SPDX-License-Identifier: CC0-1.0\n\nvariables:\n  DEBIAN_FRONTEND: \"noninteractive\"\n  release_branch_pattern: '/^release\\/.*/'\n\nvariables:\n  DEPS_BRANCH_NAME_WINDOWS: 'master'\n  DEPS_BRANCH_NAME_LINUX: 'master'\n  DEPS_BRANCH_NAME_MACOS: 'master'\n  DEPS_BRANCH_NAME_ANDROID: 'master'\n\n  DEPS_REPO_BRANCH_NAME_WINDOWS: 'master'\n  DEPS_REPO_BRANCH_NAME_LINUX: 'master'\n  DEPS_REPO_BRANCH_NAME_MACOS: 'master'\n  DEPS_REPO_BRANCH_NAME_ANDROID: 'master'\n\n.nightly-job-mixin:\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"schedule\" && $KRITACI_SCHEDULED_JOB_NAME == \"nightly\"\n      when: always\n\n.weekly-job-mixin:\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"schedule\" && $KRITACI_SCHEDULED_JOB_NAME == \"weekly\"\n      when: always\n\n.ci-manual-job-mixin:\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"schedule\"\n      when: never\n    - if: $CI_COMMIT_BRANCH =~ $release_branch_pattern\n      when: never\n    - when: manual\n\n.ci-always-job-mixin:\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"schedule\"\n      when: never\n    - if: $CI_COMMIT_BRANCH =~ $release_branch_pattern\n      when: never\n    - when: always\n\n.ci-release-job-mixin:\n  interruptible: false\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"push\" && $CI_COMMIT_BRANCH =~ $release_branch_pattern\n      when: manual\n\n.ci-artifacts-with-packages-mixin:\n  artifacts:\n    name: krita-$CI_COMMIT_REF_SLUG-$CI_COMMIT_REF_NAME\n    expire_in: 10 days\n    when: always\n    paths:\n      - \"**/failed_test_shot_*.png\" # deprecated use appium_artifact_ instead\n      - \"**/appium_artifact_*\"\n      - \"*.log\"\n      # Windows packages\n      - \"krita-*.zip\"\n      - \"krita-*-setup.exe\"\n      - \"krita-*.msix\"\n      # Linux, MacOS and Android packages\n      - \"_packaging\"\n      # Logs from MacOS signer/notarizer\n      - \"_dmg/*.log\"\n    reports:\n      junit: JUnitTestResults.xml\n      coverage_report:\n        coverage_format: cobertura\n        path: CoberturaLcovResults.xml\n\n# nightly packages should not store the packages, since\n# they are uploaded to CDN\n.ci-artifacts-without-packages-mixin:\n  artifacts:\n    name: krita-$CI_COMMIT_REF_SLUG-$CI_COMMIT_REF_NAME-no-packages\n    expire_in: 10 days\n    when: always\n    paths:\n      - \"**/failed_test_shot_*.png\" # deprecated use appium_artifact_ instead\n      - \"**/appium_artifact_*\"\n      - \"*.log\"\n      - \"_packaging/*.log\"\n      # Logs from MacOS signer/notarizer\n      - \"_dmg/*.log\"\n    reports:\n      junit: JUnitTestResults.xml\n      coverage_report:\n        coverage_format: cobertura\n        path: CoberturaLcovResults.xml\n\nclang_format:\n  stage: build\n  image: debian:testing\n  before_script:\n    - apt-get update\n    - apt-get install --yes --no-install-recommends wget ca-certificates git clang-format-11\n    - update-ca-certificates\n  script:\n    - ./.gitlab-ci.script\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"schedule\"\n      when: never\n    - if: $CI_COMMIT_BRANCH =~ $release_branch_pattern\n      when: never\n    - when: manual\n      allow_failure: true\n\nworkflow:\n  rules:\n    # Prevent branch pipelines if an MR is open on the branch.\n    - if: $CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == \"push\" && $CI_OPEN_MERGE_REQUESTS && $CI_COMMIT_BRANCH !~ $release_branch_pattern\n      when: never\n    # Allow merge request pipelines.\n    - if: $CI_PIPELINE_SOURCE == \"merge_request_event\"\n    # don't create pipelines for tags, since it is impossible to sign them\n    - if: $CI_COMMIT_TAG\n      when: never\n    # Build branches too\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n    - if: $CI_COMMIT_BRANCH =~ /^krita\\//\n    - if: $CI_COMMIT_BRANCH =~ $release_branch_pattern\n\ninclude:\n  - local: /build-tools/ci-scripts/cppcheck.yml\n  - local: /build-tools/ci-scripts/linux.yml\n  - local: /build-tools/ci-scripts/windows.yml\n  - local: /build-tools/ci-scripts/android.yml\n  - local: /build-tools/ci-scripts/macos.yml\n"
        },
        {
          "name": ".gitlab",
          "type": "tree",
          "content": null
        },
        {
          "name": ".kde-ci.yml",
          "type": "blob",
          "size": 0.5712890625,
          "content": "# SPDX-FileCopyrightText: 2022 Nicolás Alvarez <nicolas.alvarez@gmail.com>\n# SPDX-License-Identifier: CC0-1.0\n\nPostInstallScripts:\n    krita-plugins: build-tools/ci-scripts/build-plugins.py\n\nOptions:\n    use-ccache: True\n    use-asan: False\n    run-gcovr: False\n    per-test-timeout: 4:00\n    cmake-options: '-DKRITA_ENABLE_PCH=OFF -DFOUNDATION_BUILD=ON'\n    tests-run-in-parallel: True\n    ccache-large-cache: True\n    run-cppcheck: True\n    cppcheck-ignore-files:\n        - libs/pigment/KoAlphaMaskApplicatorFactory.cpp\n    force-build-target: all\n    force-install-target: install\n"
        },
        {
          "name": ".lgtm.yml",
          "type": "blob",
          "size": 2.0263671875,
          "content": "#\n# .lgtml.yml configuration file for C++ analysis of Krita on https://lgtm.com/projects/g/KDE/krita/\n#\npath_classifiers:\n    test:\n        - tests\nextraction:\n    cpp:\n        prepare:\n            packages:\n                - gettext\n                - build-essential\n                - cmake\n                - libboost-dev\n                - libboost-system-dev\n                - libeigen3-dev\n                - libexiv2-dev\n                - libfftw3-dev\n                - libfontconfig1-dev\n                - libfreetype6-dev\n                - libgl1-mesa-dev\n                - libglew-dev\n                - libglib2.0-dev\n                - libglu1-mesa-dev\n                - libgsf-1-dev\n                - libgsl-dev\n                - libjpeg-dev\n                - liblcms2-dev\n                - libopenexr-dev\n                - libpng-dev\n                - libpoppler-qt5-dev\n                - libtiff5-dev\n                - libvc-dev\n                - libopencolorio-dev\n                - libx11-dev\n                - libxml2-dev\n                - libxslt1-dev\n                - libxi-dev\n                - pkg-config\n                - vc-dev\n                - zlib1g-dev\n                - libkf5kdcraw-dev\n                - shared-mime-info\n                - libopenimageio-dev\n                - extra-cmake-modules\n                - libkf5coreaddons-dev\n                - libkf5guiaddons-dev\n                - libkf5itemmodels-dev\n                - libkf5itemviews-dev\n                - libkf5widgetsaddons-dev\n                - libkf5i18n-dev\n                - libkf5windowsystem-dev\n                - libkf5completion-dev\n                - libkf5iconthemes-dev\n                - libkf5kiocore5\n                - libqt5svg5-dev\n                - libqt5x11extras5-dev\n                - libqt5opengl5-dev                \n                - libquazip5-dev\n        configure:\n            command:\n                - mkdir build\n                - cd build\n                - cmake ..\n        index:\n            build_command:\n                - cd build\n                - make\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.12109375,
          "content": "<amy@amyspark.me> <leo.segovia@siggraph.org>\n<amy@amyspark.me> <lsg@amyspark.me>\n<shzam@sdf.org>   <sharafzaz121@gmail.com>\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "3rdparty_plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "3rdparty_vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.0791015625,
          "content": "See: ui/kis_aboutboxdata.h\n\nCurrent maintainer: Halla Rempt <halla@valdyas.org>\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 50.44921875,
          "content": "cmake_minimum_required(VERSION 3.19.0 FATAL_ERROR)\n\nset(SUPPORTED_LANGUAGES CXX C)\n\nif (APPLE)\n    list (APPEND SUPPORTED_LANGUAGES OBJC OBJCXX)\nendif()\n\nproject(krita LANGUAGES ${SUPPORTED_LANGUAGES})\nmessage(STATUS \"Using CMake version: ${CMAKE_VERSION}\")\n\nset(MIN_QT_VERSION 5.15.0)\nset(MIN_FRAMEWORKS_VERSION 5.44.0)\n\nset( CMAKE_CXX_STANDARD 17 )\nset( CMAKE_CXX_STANDARD_REQUIRED ON )\nset( CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nif (POLICY CMP0002)\n    cmake_policy(SET CMP0002 NEW)\nendif()\n\nif (POLICY CMP0017)\n    cmake_policy(SET CMP0017 NEW)\nendif ()\n\nif (POLICY CMP0020)\n    cmake_policy(SET CMP0020 NEW)\nendif ()\n\nif (POLICY CMP0022)\n    cmake_policy(SET CMP0022 NEW)\nendif ()\n\nif (POLICY CMP0026)\n    cmake_policy(SET CMP0026 NEW)\nendif()\n\nif (POLICY CMP0042)\n    cmake_policy(SET CMP0042 NEW)\nendif()\n\nif (POLICY CMP0046)\n    cmake_policy(SET CMP0046 NEW)\nendif ()\n\nif (POLICY CMP0059)\n    cmake_policy(SET CMP0059 NEW)\nendif()\n\nif (POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n\nif (POLICY CMP0054)\n    cmake_policy(SET CMP0054 NEW)\nendif()\n\nif (POLICY CMP0064)\n    cmake_policy(SET CMP0064 NEW)\nendif()\n\nif (POLICY CMP0071)\n    cmake_policy(SET CMP0071 NEW)\nendif()\n\nif (POLICY CMP0135)\n    cmake_policy(SET CMP0135 NEW)\nendif()\n\nif (APPLE)\n    add_subdirectory(packaging/macos)\n    set(MACOSX_RPATH TRUE)\n    set(APPLE_SUPPRESS_X11_WARNING TRUE)\n    set(KDE_SKIP_RPATH_SETTINGS TRUE)\n    set(CMAKE_FIND_FRAMEWORK LAST)\n    set(CMAKE_MACOSX_RPATH 1)\n    set(BUILD_WITH_INSTALL_RPATH 1)\n    set(MACOS_GUI_TEST \"GUI\")\n    add_definitions(-mmacosx-version-min=10.13 -Wno-macro-redefined -Wno-deprecated-register)\n    if (CMAKE_OSX_ARCHITECTURES)\n        message(STATUS \"CMake OSX architectures: ${CMAKE_OSX_ARCHITECTURES}\")\n    endif()\n\nendif()\n\nfunction(macos_test_fixrpath)\n    if (APPLE AND BUILD_TESTING)\n    foreach(TEST IN LISTS ARGN)\n        set_property(TARGET ${TEST}\n                     PROPERTY BUILD_RPATH \"@loader_path/../../../../lib;@loader_path/../lib;@loader_path/../Frameworks;${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}\")\n    endforeach()\n    endif()\nendfunction()\n\nif (CMAKE_COMPILER_IS_GNUCXX AND NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9 AND NOT WIN32)\n    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Wno-suggest-override> -Wextra -Wno-class-memaccess)\nendif()\n\n ######################\n#######################\n## Constants defines ##\n#######################\n######################\n\n# define common versions of Krita applications, used to generate kritaversion.h\n# update these version for every release:\nset(KRITA_VERSION_STRING \"5.3.0-prealpha\")\n# Major version: 3 for 3.x, 4 for 4.x, etc.\nset(KRITA_STABLE_VERSION_MAJOR 5)\n# Minor version: 0 for 4.0, 1 for 4.1, etc.\nset(KRITA_STABLE_VERSION_MINOR 3)\n# Bugfix release version, or 0 for before the first stable release\nset(KRITA_VERSION_RELEASE 0)\n# the 4th digit, really only used for the Windows installer:\n# - [Pre-]Alpha: Starts from 0, increment 1 per release\n# - Beta: Starts from 50, increment 1 per release\n# - Stable: Set to 100, bump to 101 if emergency update is needed\nset(KRITA_VERSION_REVISION 0)\n# Uncomment the following if this is currently in the \"stable\" branch.\n# Do not uncomment for master branch.\n#set(KRITA_STABLE_BRANCH 1)\nset(KRITA_ALPHA 1) # uncomment only for Alpha\n#set(KRITA_BETA 1) # uncomment only for Beta\n#set(KRITA_RC 1) # uncomment only for RC\n\nif(NOT DEFINED KRITA_ALPHA AND NOT DEFINED KRITA_BETA AND NOT DEFINED KRITA_RC)\n    set(KRITA_STABLE 1) # do not edit\nendif()\n\nmessage(STATUS \"Krita version: ${KRITA_VERSION_STRING}\")\n\n# Define the generic version of the Krita libraries here\n# This makes it easy to advance it when the next Krita release comes.\n# 14 was the last GENERIC_KRITA_LIB_VERSION_MAJOR of the previous Krita series\n# (2.x) so we're starting with 15 in 3.x series, 16 in 4.x series\nif(KRITA_STABLE_VERSION_MAJOR EQUAL 5)\n    math(EXPR GENERIC_KRITA_LIB_VERSION_MAJOR \"${KRITA_STABLE_VERSION_MINOR} + 17\")\nelse()\n    # let's make sure we won't forget to update the \"16\"\n    message(FATAL_ERROR \"Reminder: please update offset == 16 used to compute GENERIC_KRITA_LIB_VERSION_MAJOR to something bigger\")\nendif()\nset(GENERIC_KRITA_LIB_VERSION \"${GENERIC_KRITA_LIB_VERSION_MAJOR}.0.0\")\nset(GENERIC_KRITA_LIB_SOVERSION \"${GENERIC_KRITA_LIB_VERSION_MAJOR}\")\n\nLIST (APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake/modules\")\nLIST (APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake/kde_macro\")\n\n# fetch git revision for the current build\n\nset(KRITA_GIT_SHA1_STRING \"\")\nset(KRITA_GIT_BRANCH_STRING \"\")\n\ninclude(GetGitRevisionDescription)\nget_git_head_hash(GIT_SHA1)\nget_git_branch(GIT_BRANCH)\n\nif(GIT_SHA1)\n   string(SUBSTRING ${GIT_SHA1} 0 7 GIT_SHA1)\n   set(KRITA_GIT_SHA1_STRING ${GIT_SHA1} CACHE STRING \"Git commit of the current build\" FORCE)\n   if(NOT GIT_BRANCH)\n       set(GIT_BRANCH \"(detached HEAD)\")\n   endif()\n   set(KRITA_GIT_BRANCH_STRING ${GIT_BRANCH} CACHE STRING \"Git branch of the current build\" FORCE)\nendif()\n\n# create test make targets\nenable_testing()\n# collect list of broken tests, empty here to start fresh with each cmake run\nset(KRITA_BROKEN_TESTS \"\" CACHE INTERNAL \"KRITA_BROKEN_TESTS\")\n# Keep track of all test target (need special attention on macos)\nset(KRITA_TESTS_TARGET \"\" CACHE INTERNAL \"KRITA_TESTS_TARGET\")\n\n ############\n#############\n## Options ##\n#############\n############\n\ninclude(FeatureSummary)\n\nif (WIN32)\noption(USE_DRMINGW \"Support the Dr. Mingw crash handler (only on windows)\" ON)\nadd_feature_info(\"Dr. Mingw\" USE_DRMINGW \"Enable the Dr. Mingw crash handler\")\n    if (MINGW)\n        option(USE_MINGW_HARDENING_LINKER \"Enable DEP (NX), ASLR and high-entropy ASLR linker flags (mingw-w64)\" ON)\n        add_feature_info(\"Linker Security Flags\" USE_MINGW_HARDENING_LINKER \"Enable DEP (NX), ASLR and high-entropy ASLR linker flags\")\n        if (USE_MINGW_HARDENING_LINKER)\n            set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,--dynamicbase -Wl,--nxcompat -Wl,--disable-auto-image-base\")\n            set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--dynamicbase -Wl,--nxcompat -Wl,--disable-auto-image-base\")\n            set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -Wl,--dynamicbase -Wl,--nxcompat -Wl,--disable-auto-image-base\")\n            # Enable high-entropy ASLR for 64-bit\n            # The image base has to be >4GB for HEASLR to be enabled.\n            # The values used here are kind of arbitrary.\n            set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,--high-entropy-va -Wl,--image-base,0x140000000\")\n            set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--high-entropy-va -Wl,--image-base,0x180000000\")\n            set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -Wl,--high-entropy-va -Wl,--image-base,0x180000000\")\n        else (USE_MINGW_HARDENING_LINKER)\n            message(WARNING \"Linker Security Flags not enabled!\")\n        endif (USE_MINGW_HARDENING_LINKER)\n\n        # Clang does not generate DWARF aranges data by default, which makes\n        # DrMingw not able to parse the DWARF debug symbols. Add -gdwarf-aranges\n        # explicitly.\n        # See: https://github.com/jrfonseca/drmingw/issues/42#issuecomment-516614561\n        if (CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n            set(CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO} -gdwarf-aranges\")\n        endif ()\n        if (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n            set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -gdwarf-aranges\")\n        endif ()\n    elseif (MSVC)\n        # Increase the stack size to match MinGW's. Prevents crashes with GMic.\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /STACK:4194304\")\n        set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /STACK:4194304\")\n        set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} /STACK:4194304\")\n        option(USE_CONTROL_FLOW_GUARD \"Enable Control Flow Guard hardening (MSVC)\" ON)\n        add_feature_info(\"Linker Security Flags\" USE_CONTROL_FLOW_GUARD \"Enable Control Flow Guard\")\n        if (USE_CONTROL_FLOW_GUARD)\n            add_compile_options(/guard:cf)\n            add_link_options(/GUARD:CF)\n        endif (USE_CONTROL_FLOW_GUARD)\n    endif (MINGW)\nelseif(ANDROID)\n    # Increase the stack size to match MinGW's. Prevents crashes with GMic.\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-z,stack-size=4194304\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,-z,stack-size=4194304\")\n    set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -Wl,-z,stack-size=4194304\")\nendif ()\n\noption(HIDE_SAFE_ASSERTS \"Don't show message box for \\\"safe\\\" asserts, just ignore them automatically and dump a message to the terminal.\" ON)\nadd_feature_info(\"Hide safe asserts\" HIDE_SAFE_ASSERTS \"Don't show message box for \\\"safe\\\" asserts, just ignore them automatically and dump a message to the terminal.\")\n\noption(INSTALL_BENCHMARKS \"Install benchmarks into the installation root to make them packagable\" OFF)\nadd_feature_info(\"Install benchmarks\" INSTALL_BENCHMARKS \"Install benchmarks into the installation root to make them packagable\")\n\noption(CRASH_ON_SAFE_ASSERTS \"Crash unconditionally whenever a \\\"safe\\\" assert happens. Useful for running unittests\" OFF)\nadd_feature_info(\"Crash on safe asserts\" CRASH_ON_SAFE_ASSERTS \"Crash unconditionally whenever a \\\"safe\\\" assert happens. Useful for running unittests\")\n\nconfigure_file(config-safe-asserts.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-safe-asserts.h)\n\noption(USE_LOCK_FREE_HASH_TABLE \"Use lock free hash table instead of blocking.\" ON)\nconfigure_file(config-hash-table-implementation.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-hash-table-implementation.h)\nadd_feature_info(\"Lock free hash table\" USE_LOCK_FREE_HASH_TABLE \"Use lock free hash table instead of blocking.\")\n\noption(FOUNDATION_BUILD \"A Foundation build is a binary release build that can package some extra things like color themes. Linux distributions that build and install Krita into a default system location should not define this option to true.\" OFF)\nadd_feature_info(\"Foundation Build\" FOUNDATION_BUILD \"A Foundation build is a binary release build that can package some extra things like color themes. Linux distributions that build and install Krita into a default system location should not define this option to true.\")\n\noption(KRITA_ENABLE_BROKEN_TESTS \"Enable tests that are marked as broken\" OFF)\nadd_feature_info(\"Enable Broken Tests\" KRITA_ENABLE_BROKEN_TESTS \"Runs broken test when \\\"make test\\\" is invoked (use -DKRITA_ENABLE_BROKEN_TESTS=ON to enable).\")\n\noption(LIMIT_LONG_TESTS \"Run long running unittests in a limited quick mode\" ON)\nconfigure_file(config-limit-long-tests.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-limit-long-tests.h)\nadd_feature_info(\"Limit long tests\" LIMIT_LONG_TESTS \"Run long running unittests in a limited quick mode\")\n\noption(BUILD_KRITA_QT_DESIGNER_PLUGINS \"Build Qt Designer plugins for Krita widgets\" OFF)\nadd_feature_info(\"Build Qt Designer plugins\" BUILD_KRITA_QT_DESIGNER_PLUGINS \"Builds Qt Designer plugins for Krita widgets (use -DBUILD_KRITA_QT_DESIGNER_PLUGINS=ON to enable).\")\n\noption(ENABLE_UPDATERS \"Enable updaters/update notifications\" ON)\nconfigure_file(config-updaters.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-updaters.h)\nadd_feature_info(\"Enable updaters\" ENABLE_UPDATERS \"Enable updaters/update notifications.\")\n\noption(KRITA_ENABLE_PCH \"Enable precompiled headers support\" OFF)\nadd_feature_info(\"Precompiled Headers\" KRITA_ENABLE_PCH \"precompiled headers make build process faster on some systems\")\n\noption(USE_EXTERNAL_RAQM \"Fetch Raqm dependency online instead of the embedded one\" OFF)\n\nif(ANDROID)\noption(ANDROID_ENABLE_STDIO_FORWARDING \"Enable forwarding of qDebug() and stdio messages to logcat\" OFF)\nconfigure_file(config-android-stdio-forwarding.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-android-stdio-forwarding.h)\nadd_feature_info(\"Enable debug logging on Android\" ANDROID_ENABLE_STDIO_FORWARDING \"Enable forwarding of qDebug() and stdio messages to logcat\")\nendif()\n\nset(ADDRESS_SANITIZER_ENABLED FALSE)\nif (ECM_ENABLE_SANITIZERS MATCHES address)\n    set(ADDRESS_SANITIZER_ENABLED TRUE)\nendif()\n\nadd_feature_info(\"ASAN address sanitizer\" ADDRESS_SANITIZER_ENABLED \"crash Krita if it violates address access rules (-DECM_ENABLE_SANITIZERS=address)\")\n\n# Branding. Available options: default, Beta, Plus, Next. Can be set from command line\nif (\"${BRANDING}\" STREQUAL \"\")\n    if (DEFINED KRITA_STABLE)\n        set(BRANDING \"default\")\n    elseif (DEFINED KRITA_BETA OR DEFINED KRITA_RC)\n        set(BRANDING \"Beta\")\n    elseif (DEFINED KRITA_STABLE_BRANCH)\n        # Alpha/pre-alpha in stable branch\n        set(BRANDING \"Plus\")\n    else ()\n        # Alpha/pre-alpha in master branch or other experiments\n        set(BRANDING \"Next\")\n    endif ()\nendif()\nmessage(STATUS \"Branding selected: ${BRANDING}\")\n\ninclude(MacroJPEG)\n\n #########################################################\n## Look for Python3 - it is also searched by KF5,       ##\n## so we should request the correct version in advance  ##\n#########################################################\n\nfunction(TestCompileLinkPythonLibs OUTPUT_VARNAME)\n    include(CheckCXXSourceCompiles)\n    set(CMAKE_REQUIRED_INCLUDES ${Python_INCLUDE_DIRS})\n    set(CMAKE_REQUIRED_LIBRARIES ${Python_LIBRARIES})\n    if (MINGW)\n        set(CMAKE_REQUIRED_DEFINITIONS -D_hypot=hypot)\n    endif (MINGW)\n    unset(${OUTPUT_VARNAME} CACHE)\n    CHECK_CXX_SOURCE_COMPILES(\"\n// https://bugs.python.org/issue22411\n#if defined(_MSC_VER)\n#  ifdef _DEBUG\n#    undef _DEBUG\n#  endif /* _DEBUG */\n#endif /* _MSC_VER */\n#include <Python.h>\nint main(int argc, char *argv[]) {\n    Py_InitializeEx(0);\n}\" ${OUTPUT_VARNAME})\nendfunction()\n\nif(WIN32)\n    set(Python_FIND_STRATEGY LOCATION)\n    find_package(Python 3.8 COMPONENTS Development Interpreter)\n    if (Python_FOUND)\n        find_package(PythonLibrary 3.8)\n        TestCompileLinkPythonLibs(CAN_USE_PYTHON_LIBS)\n        if (NOT CAN_USE_PYTHON_LIBS)\n            file(READ ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeError.log ERROR_LOG)\n            string(REPLACE \"\\n\" \"\\n  \" ERROR_LOG \"${ERROR_LOG}\")\n            message(FATAL_ERROR \"Compiling with Python library failed, please check whether the architecture is correct!\\nCMakeError.log:\\n  ${ERROR_LOG}\\n\\n\")\n        endif (NOT CAN_USE_PYTHON_LIBS)\n    endif (Python_FOUND)\nelse(WIN32)\n    find_package(PythonLibrary 3.8)\nendif(WIN32)\n\n ########################\n#########################\n## Look for KDE and Qt ##\n#########################\n########################\n\n# Select the Qt version we want to use\n# Qt5 is the default, set QT_MAJOR_VERSION to 6 to look for Qt6\noption(BUILD_WITH_QT6 \"Build against Qt 6\" OFF)\nif (BUILD_WITH_QT6)\n    set(QT_MAJOR_VERSION 6)\nelse()\n    set(QT_MAJOR_VERSION 5)\nendif()\n\n# KDE Frameworks\nset(KF_MAJOR ${QT_MAJOR_VERSION})\n\nif (KF_MAJOR STREQUAL \"6\")\n    set(KF_DEP_VERSION \"6.0.0\")\nendif()\n\nfind_package(ECM 5.22 REQUIRED CONFIG)\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${ECM_MODULE_PATH})\n\ninclude(ECMOptionalAddSubdirectory)\ninclude(ECMAddAppIcon)\ninclude(ECMSetupVersion)\ninclude(ECMMarkNonGuiExecutable)\ninclude(ECMGenerateHeaders)\ninclude(GenerateExportHeader)\ninclude(ECMMarkAsTest)\ninclude(ECMInstallIcons)\n\ninclude(CMakePackageConfigHelpers)\ninclude(WriteBasicConfigVersionFile)\ninclude(CheckFunctionExists)\n\ninclude(KDEInstallDirs)\nif (QT_MAJOR_VERSION STREQUAL \"6\")\n    set(ICON_INSTALL_DIR ${KDE_INSTALL_ICONDIR})\nendif()\n\ninclude(KDECMakeSettings)\ninclude(KDECompilerSettings)\n\nif (WIN32)\n# KDECompilerSettings sets Windows Vista as the default,\n# while MSVC's default is 0x0A00 (_WIN32_WINNT_WIN10, sdkddkver.h) and\n# MinGW's is 0x0601 (_WIN32_WINNT_WIN7, _mingw.h).\n# Both are enough to supply the APIs we need in main.cc, but since we\n# need the Windows 8 APIs anyway for the surface orientation and Store API,\n# we set the minimum here.\nremove_definitions(-D_WIN32_WINNT=0x0600 -DWINVER=0x0600 -D_WIN32_IE=0x0600)\nadd_definitions(-D_WIN32_WINNT=0x0602 -DWINVER=0x0602  -D_WIN32_IE=0x0602)\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\" AND CMAKE_CXX_SIMULATE_ID STREQUAL \"MSVC\")\n    if (MSVC) # or CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL \"MSVC\"\n        # KDE's CompilerSettings module sets -Wall -Wextra for Clang.\n        # However, -Wall on clang-cl maps to -Weverything, which turns on way too\n        # much, so we're using -W4 instead, which is mapped to clang's -Wall -Wextra.\n        # Source: https://hg.mozilla.org/mozilla-central/rev/ffb7bfbfc328\n        string(REPLACE \"-Wall -Wextra\" \"-W4\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n        string(REPLACE \"-Wall -Wextra\" \"-W4\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n        # Allow KoColorSpaceMaths operators to build.\n        add_compile_options(\"/permissive\")\n    endif()\n\n    # Remove these invalid flags.\n    string(REPLACE \"-fno-common\" \"\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n    string(REPLACE \"-fno-operator-names\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    string(REPLACE \"-fdiagnostics-color=always\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n    string(REPLACE \"-Wl,--no-undefined\" \"\" CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS}\")\n    string(REPLACE \"-Wl,--no-undefined\" \"\" CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS}\")\n    string(REPLACE \"-Wl,--fatal-warnings\" \"\" CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS}\")\n    string(REPLACE \"-Wl,--fatal-warnings\" \"\" CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS}\")\nendif()\nendif()\n\n# do not reorder to be alphabetical: this is the order in which the frameworks\n# depend on each other.\nfind_package(KF${KF_MAJOR} ${MIN_FRAMEWORKS_VERSION} REQUIRED COMPONENTS\n        Config\n        WidgetsAddons\n        Completion\n        CoreAddons\n        GuiAddons\n        I18n\n        ItemModels\n        ItemViews\n        WindowSystem\n)\n\nfind_package(Qt${QT_MAJOR_VERSION} ${MIN_QT_VERSION}\n        REQUIRED COMPONENTS\n        Core\n        Gui\n        Widgets\n        Xml\n        Network\n        PrintSupport\n        Svg\n        Test\n        Concurrent\n        Sql\n)\n\nif (ANDROID)\n    if (QT_MAJOR_VERSION STREQUAL \"5\")\n        find_package(Qt${QT_MAJOR_VERSION} ${MIN_QT_VERSION}\n            REQUIRED COMPONENTS\n            AndroidExtras\n        )\n    endif()\nendif()\n\nif (QT_MAJOR_VERSION STREQUAL \"6\")\n    find_package(Qt${QT_MAJOR_VERSION} ${MIN_QT_VERSION}\n        REQUIRED COMPONENTS\n        Core5Compat\n        OpenGL\n        OpenGLWidgets\n    )\nendif()\n\n\nif (WIN32)\n    set(CMAKE_REQUIRED_INCLUDES ${Qt5Core_INCLUDE_DIRS})\n    set(CMAKE_REQUIRED_LIBRARIES ${Qt5Core_LIBRARIES})\n\n    CHECK_CXX_SOURCE_COMPILES(\"\n#include <QCoreApplication>\nint main(int argc, char *argv[]) {\nQCoreApplication::setAttribute(Qt::AA_MSWindowsUseWinTabAPI);\n}\n\"\n    QT_HAS_WINTAB_SWITCH\n    )\n\n    unset(CMAKE_REQUIRED_INCLUDES)\n    unset(CMAKE_REQUIRED_LIBRARIES)\n\n    option(USE_QT_TABLET_WINDOWS \"Do not use Krita's forked Wintab and Windows Ink support on Windows, but leave everything to Qt.\" ON)\n\tadd_feature_info(\"Use Qt's Windows Tablet Support\" USE_QT_TABLET_WINDOWS \"Do not use Krita's forked Wintab and Windows Ink support on Windows, but leave everything to Qt.\")\n    configure_file(config_use_qt_tablet_windows.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config_use_qt_tablet_windows.h)\nendif ()     \n\nset(CMAKE_REQUIRED_INCLUDES ${Qt5Core_INCLUDE_DIRS} ${Qt5Gui_INCLUDE_DIRS} ${Qt5Widgets_INCLUDE_DIRS})\nset(CMAKE_REQUIRED_LIBRARIES ${Qt5Core_LIBRARIES} ${Qt5Gui_LIBRARIES} ${Qt5Widgets_LIBRARIES})\n\n\nif (WIN32)\n    CHECK_CXX_SOURCE_COMPILES(\"\n    #include <QSurfaceFormat>\n    int main(int argc, char *argv[]) {\n    QSurfaceFormat fmt;\n    fmt.setColorSpace(QSurfaceFormat::scRGBColorSpace);\n    fmt.setColorSpace(QSurfaceFormat::bt2020PQColorSpace);\n    }\n    \"\n    HAVE_HDR\n    )\nendif()\nconfigure_file(config-hdr.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-hdr.h)\n\nCHECK_CXX_SOURCE_COMPILES(\"\n#include <QGuiApplication>\nint main(int argc, char *argv[]) {\nQGuiApplication::setHighDpiScaleFactorRoundingPolicy(Qt::HighDpiScaleFactorRoundingPolicy::Round);\nQGuiApplication::setHighDpiScaleFactorRoundingPolicy(Qt::HighDpiScaleFactorRoundingPolicy::RoundPreferFloor);\nQGuiApplication::setHighDpiScaleFactorRoundingPolicy(Qt::HighDpiScaleFactorRoundingPolicy::PassThrough);\n}\n\"\nHAVE_HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY\n)\nconfigure_file(config-high-dpi-scale-factor-rounding-policy.h.in ${CMAKE_CURRENT_BINARY_DIR}/config-high-dpi-scale-factor-rounding-policy.h)\n\nCHECK_CXX_SOURCE_COMPILES(\"\n#include <QMdiArea>\nint main(int argc, char *argv[]) {\nQMdiArea area;\narea.setOption(QMdiArea::AlwaysShowSubwindowNameInTitleBar);\n}\n\"\nHAVE_QMDIAREA_ALWAYS_SHOW_SUBWINDOW_TITLE\n)\nconfigure_file(config-qmdiarea-always-show-subwindow-title.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-qmdiarea-always-show-subwindow-title.h)\n\nif (WIN32)\n    CHECK_CXX_SOURCE_COMPILES(\"\n#include <QtPlatformHeaders/QWindowsWindowFunctions>\nint main(int argc, char *argv[]) {\nQWindowsWindowFunctions::setHasBorderInFullScreenDefault(true);\n}\n\"\n    HAVE_SET_HAS_BORDER_IN_FULL_SCREEN_DEFAULT\n    )\n    configure_file(config-set-has-border-in-full-screen-default.h.in ${CMAKE_CURRENT_BINARY_DIR}/config-set-has-border-in-full-screen-default.h)\n\nendif (WIN32)\n\nunset(CMAKE_REQUIRED_INCLUDES)\nunset(CMAKE_REQUIRED_LIBRARIES)\n\n\ninclude (MacroAddFileDependencies)\ninclude (MacroBoolTo01)\ninclude (MacroEnsureOutOfSourceBuild)\nmacro_ensure_out_of_source_build(\"Compiling Krita inside the source directory is not possible. Please refer to the build instruction https://community.kde.org/Krita#Build_Instructions\")\n\n\n# Note: OPTIONAL_COMPONENTS does not seem to be reliable\n# (as of ECM 5.15.0, CMake 3.2)\n\nfind_package(Qt${QT_MAJOR_VERSION}Quick ${MIN_QT_VERSION})\nset_package_properties(Qt${QT_MAJOR_VERSION}Quick PROPERTIES\n        DESCRIPTION \"QtQuick\"\n        URL \"https://www.qt.io/\"\n        TYPE OPTIONAL\n        PURPOSE \"Optionally used for the touch gui for Krita\")\n\nmacro_bool_to_01(Qt${QT_MAJOR_VERSION}Quick_FOUND HAVE_QT_QUICK)\n\nfind_package(Qt${QT_MAJOR_VERSION}QuickWidgets ${MIN_QT_VERSION})\nset_package_properties(Qt${QT_MAJOR_VERSION}QuickWidgets PROPERTIES\n        DESCRIPTION \"QtQuickWidgets\"\n        URL \"https://www.qt.io/\"\n        TYPE OPTIONAL\n        PURPOSE \"Optionally used for the touch gui for Krita\")\n\nif (Qt${QT_MAJOR_VERSION}QuickWidgets_FOUND)\n    # This is needed because Qt dependencies aren't added by ECM but by androideployqt,\n    # so it doesn't benefit from our patch in ECM.\n    list (APPEND ANDROID_EXTRA_LIBS $<TARGET_FILE:Qt${QT_MAJOR_VERSION}::QuickWidgets>)\n\n    find_package(Qt${QT_MAJOR_VERSION}QuickControls2 ${MIN_QT_VERSION})\n    set_package_properties(Qt${QT_MAJOR_VERSION}QuickControls2 PROPERTIES\n            DESCRIPTION \"QtQuickControls\"\n            URL \"https://www.qt.io/\"\n            TYPE OPTIONAL\n            PURPOSE \"Optionally used for the touch gui for Krita\")\n\nendif()\n\n\nif (NOT WIN32 AND NOT APPLE AND NOT ANDROID AND NOT HAIKU)\n    if (QT_MAJOR_VERSION STREQUAL \"5\")\n        find_package(Qt${QT_MAJOR_VERSION} ${MIN_QT_VERSION} REQUIRED X11Extras)\n    endif()\n\n    find_package(Qt${QT_MAJOR_VERSION}DBus ${MIN_QT_VERSION})\n    set_package_properties(Qt5DBus PROPERTIES\n        DESCRIPTION \"Qt DBUS integration\"\n        URL \"https://www.qt.io/\"\n        TYPE OPTIONAL\n        PURPOSE \"Optionally used to provide a dbus api on Linux\")\n    macro_bool_to_01(Qt${QT_MAJOR_VERSION}DBUS_FOUND HAVE_QT_DBUS)\n\n    find_package(KF${KF_MAJOR}Crash ${MIN_FRAMEWORKS_VERSION})\n    macro_bool_to_01(KF5Crash_FOUND HAVE_KCRASH)\n    set_package_properties(KF${KF_MAJOR}Crash PROPERTIES\n        DESCRIPTION \"KDE's Crash Handler\"\n        URL \"https://api.kde.org/frameworks-api/frameworks5-apidocs/kcrash/html/index.html\"\n        TYPE OPTIONAL\n        PURPOSE \"Optionally used to provide crash reporting on Linux\")\n\n    find_package(X11 REQUIRED COMPONENTS Xinput)\n    set(HAVE_X11 TRUE)\n    add_definitions(-DHAVE_X11)\n\nelse()\n    set(HAVE_DBUS FALSE)\n    set(HAVE_X11 FALSE)\nendif()\n\n\nadd_definitions(\n  -DQT_USE_QSTRINGBUILDER\n  -DQT_NO_SIGNALS_SLOTS_KEYWORDS\n  -DQT_NO_URL_CAST_FROM_STRING\n  -DQT_USE_FAST_CONCATENATION \n  -DQT_USE_FAST_OPERATOR_PLUS\n)\n\nremove_definitions(\n    -DQT_NO_CAST_FROM_ASCII\n    -DQT_NO_FOREACH\n)\n\n\n# MSVC is unable to disambiguate between definitions of QVector<QPointF> \n# and QPolygonF. This is a known upstream bug e.g.:\n# - https://phabricator.kde.org/D21314\n# - https://codereview.qt-project.org/c/qt/qtbase/+/180229\n# Starting with Qt 5.13, it is impossible to use strict iterators\n# wholesale because of:\n# https://github.com/qt/qtbase/commit/972f8845a85d6a07140025e4257cb8a1a2699b5d\nif (NOT (MSVC OR CMAKE_CXX_SIMULATE_ID STREQUAL \"MSVC\"))\n  add_definitions(-DQT_STRICT_ITERATORS)\nendif()\n\nadd_compile_definitions(\n    QT_DISABLE_DEPRECATED_BEFORE=0x050E00\n)\n\nadd_definitions(-DTRANSLATION_DOMAIN=\\\"krita\\\")\n\n#\n# The reason for this mode is that the Debug mode disable inlining\n#\nif(CMAKE_COMPILER_IS_GNUCXX)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}  -fext-numeric-literals\")\nendif()\n\noption(KRITA_DEVS \"For Krita developers. This modifies the DEBUG build type to use -O3 -g, while still enabling Q_ASSERT. This is necessary because the Qt5 cmake modules normally append QT_NO_DEBUG to any build type that is not labeled Debug\")\nif (KRITA_DEVS)\n    set(CMAKE_CXX_FLAGS_DEBUG \"-O3 -g\" CACHE STRING \"\" FORCE)\nendif()\n\nif(UNIX)\n    set(CMAKE_REQUIRED_LIBRARIES \"${CMAKE_REQUIRED_LIBRARIES};m\")\nendif()\n\nif(WIN32)\n    if(MSVC)\n        # C4522: 'class' : multiple assignment operators specified\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -wd4522 -wd4138 /Zc:__cplusplus\")\n        # libs\\ui\\dialogs\\kis_about_application.cpp : fatal error C1128: number of sections exceeded object file format limit: compile with /bigobj\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /bigobj\")\n\n        # Enable intrinsics\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /Oi\")\n        # Favor fast code\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /Ot\")\n        # Function-level linking\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /Gy\")\n\n        # Our code is UTF-8 encoded.\n        add_compile_options(/utf-8)\n    endif()\nendif()\n\nif (MSVC AND NOT CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\") # Clang/CL is incompatible with this flag\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /RELEASE\")\n    set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} /RELEASE\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /RELEASE\")\nendif()\n\n# Force enable a good many optimizations\nif (MSVC AND NOT BUILD_TESTING)\n    # Aggresive inlining (Release)\n    string(REPLACE \"Ob2\" \"Ob3\" CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n    # Aggresive inlining (RelWithDebInfo)\n    string(REPLACE \"Ob1\" \"Ob3\" CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n    # Whole program optimization\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /GL\")\n    # For all objects:\n    # - strip unused functions\n    # - fold identical functions\n    # - link-time code generation\n    string(REPLACE \"INCREMENTAL\" \"INCREMENTAL:NO\" CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}\")\n    string(REPLACE \"INCREMENTAL\" \"INCREMENTAL:NO\" CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}\")\n    string(REPLACE \"INCREMENTAL\" \"INCREMENTAL:NO\" CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO}\")\n    set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} /OPT:ICF,REF /LTCG\")\n    set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO} /OPT:ICF,REF /LTCG\")\n    set(CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO \"${CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO} /OPT:ICF,REF /LTCG\")\nendif()\n\n# KDECompilerSettings adds the `--export-all-symbols` linker flag.\n# We don't really need it.\nif(MINGW)\n    string(REPLACE \"-Wl,--export-all-symbols\" \"\" CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS}\")\n    string(REPLACE \"-Wl,--export-all-symbols\" \"\" CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS}\")\nendif(MINGW)\n\nif(MINGW)\n    # Hack CMake's variables to tell AR to create thin archives to reduce unnecessary writes.\n    # Source of definition: https://github.com/Kitware/CMake/blob/v3.14.1/Modules/Platform/Windows-GNU.cmake#L128\n    # Thin archives: https://sourceware.org/binutils/docs/binutils/ar.html#index-thin-archives\n    macro(mingw_use_thin_archive lang)\n        foreach(rule CREATE_SHARED_MODULE CREATE_SHARED_LIBRARY LINK_EXECUTABLE)\n            string(REGEX REPLACE \"(<CMAKE_AR> [^ T]+) \" \"\\\\1T \" CMAKE_${lang}_${rule} \"${CMAKE_${lang}_${rule}}\")\n        endforeach()\n    endmacro()\n    mingw_use_thin_archive(CXX)\nendif(MINGW)\n\n# enable exceptions globally\n# WARNING: in MSVC this will NOT catch exceptions thrown through C code\n# see: \n# - https://learn.microsoft.com/en-us/cpp/build/reference/eh-exception-handling-model?view=msvc-170#arguments\n# - https://invent.kde.org/frameworks/extra-cmake-modules/-/blob/v5.101.0/kde-modules/KDECompilerSettings.cmake#L502-526\nkde_enable_exceptions()\n\nfunction(krita_select_pch_file targetname pch_file_name)\n    #TODO: make kritaimage and kritaglobal targets to link to its own PCH\n\n    if (targetname STREQUAL \"kritaglobal\")\n        set(${pch_file_name} kis_qt_only_pch.h PARENT_SCOPE)\n    elseif (targetname STREQUAL \"kritaimage\")\n        set(${pch_file_name} kis_global_pch.h PARENT_SCOPE)\n    else ()\n        set(immediate_deps $<TARGET_PROPERTY:${targetname},LINK_LIBRARIES>)\n        set(depends_on_kritaui $<IN_LIST:kritaui,${immediate_deps}>)\n        set(depends_on_kritaimage $<IN_LIST:kritaimage,${immediate_deps}>)\n        set(depends_on_kritalibkis $<IN_LIST:kritalibkis,${immediate_deps}>)\n        set(depends_on_kritalibpaintop $<IN_LIST:kritalibpaintop,${immediate_deps}>)\n\n        set(${pch_file_name} $<IF:$<OR:${depends_on_kritalibpaintop},${depends_on_kritalibkis},${depends_on_kritaui},${depends_on_kritaimage}>,kis_image_pch.h,kis_global_pch.h> PARENT_SCOPE)\n    endif()\nendfunction()\n\nmacro(kis_add_library)\n    # the first run strips only options specific to kis_add_library\n    # to create arguments for real add_library call\n    cmake_parse_arguments(REAL \"\" PCH_FILE \"\" ${ARGV} )\n    add_library(${REAL_UNPARSED_ARGUMENTS})\n\n    if (KRITA_ENABLE_PCH)\n        # the second run strips out all the option supported by the function\n        # to let the script to calculate the number of source files in\n        # the library\n        set(options INTERFACE STATIC SHARED MODULE EXCLUDE_FROM_ALL OBJECT ALIAS)\n        set(one_value_keywords PCH_FILE)\n        set(multi_value_keywords)\n        cmake_parse_arguments(LOCAL \"${options}\" \"${one_value_keywords}\" \"\" ${ARGV} )\n\n        list(LENGTH LOCAL_UNPARSED_ARGUMENTS source_count)\n        list(GET REAL_UNPARSED_ARGUMENTS 0 NEW_LIBRARY_TARGET)\n\n        if (NOT LOCAL_PCH_FILE)\n            krita_select_pch_file(${NEW_LIBRARY_TARGET} LOCAL_PCH_FILE)\n            #file(GENERATE OUTPUT \"${CMAKE_BINARY_DIR}/out/${NEW_LIBRARY_TARGET}.txt\" CONTENT ${LOCAL_PCH_FILE})\n        endif()\n\n        # if the number of sources in the library is greater\n        # than a threshold value, then we can try to use PCH\n        # for this library\n\n        if (${source_count} GREATER \"2\" AND\n            NOT LOCAL_INTERFACE AND\n            NOT LOCAL_ALIAS AND\n            LOCAL_PCH_FILE)\n\n            set_property(TARGET ${NEW_LIBRARY_TARGET} PROPERTY PCH_WARN_INVALID TRUE )\n            target_precompile_headers(${NEW_LIBRARY_TARGET} PRIVATE \"$<$<COMPILE_LANGUAGE:CXX>:${CMAKE_SOURCE_DIR}/pch/${LOCAL_PCH_FILE}>\")\n        endif()\n    endif()\nendmacro()\n\n# overcome some platform incompatibilities\nif(WIN32)\n    if (MSVC)\n        include_directories(${CMAKE_CURRENT_SOURCE_DIR}/winquirks)\n        add_definitions(-D_USE_MATH_DEFINES)\n        add_definitions(-DNOMINMAX)\n    endif()\nendif()\n\n# set custom krita plugin installdir\nif (ANDROID)\n    # use default ABI\n    if (NOT DEFINED ANDROID_ABI)\n        set (ANDROID_ABI arm64-v8a)\n    endif()\n    if (NOT DEFINED ANDROID_SDK_ROOT)\n        message (FATAL_ERROR \"ANDROID_SDK_ROOT argument is not set\")\n    endif()\n\n    set (KRITA_PLUGIN_INSTALL_DIR ${LIB_INSTALL_DIR})\n    # set (DATA_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/assets)\n\n    # From ECM\n    # Because Qt changes library suffix (to include arch), this changes name of\n    # libraries that depend on Qt, but its Find file may not necessarily be\n    # adapted for this.\n    set(CMAKE_FIND_LIBRARY_SUFFIXES \"_${CMAKE_ANDROID_ARCH_ABI}.so\" \".so\" \".a\")\nelse()\n    set (KRITA_PLUGIN_INSTALL_DIR ${LIB_INSTALL_DIR}/kritaplugins)\nendif()\n\n\n ###########################\n############################\n## Required dependencies  ##\n############################\n###########################\n\n# FIXME: Still hardcoded\nif (ANDROID)\n    set (Boost_COMPILER clang)\n    find_package(unwindstack REQUIRED)\nendif()\n\nfind_package(PNG REQUIRED \"1.2.6\")\n\nif (APPLE)\n    # this is not added correctly on OSX -- see https://forum.kde.org/viewtopic.php?f=139&t=101867&p=221242#p221242\n    include_directories(SYSTEM ${PNG_INCLUDE_DIR})\nendif()\n\nif (MINGW AND CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n    string(REGEX REPLACE \"([0-9])\\\\.([0-9])(\\\\.[0-9])?\" \"\\\\1\"\n        KRITA_boost_COMPILER_VERSION ${CMAKE_CXX_COMPILER_VERSION})\n    set(Boost_COMPILER \"mgw${KRITA_boost_COMPILER_VERSION}\")\nendif()\n\nfind_package(Boost 1.65 REQUIRED COMPONENTS system)\nset_package_properties(Boost PROPERTIES\n    DESCRIPTION \"Boost provides free peer-reviewed portable C++ source libraries.\"\n    URL \"https://www.boost.org\"\n    TYPE REQUIRED)\ntarget_link_libraries(Boost::boost\n    INTERFACE\n        Boost::disable_autolinking\n)\n\n# Disallow usage of std::unary_function. \n# See https://github.com/boostorg/container_hash/issues/22\n# and https://releases.llvm.org/15.0.0/projects/libcxx/docs/ReleaseNotes.html#deprecations-and-removals\nif(Boost_VERSION VERSION_LESS \"1.81.0\")\ntarget_compile_definitions(Boost::boost\n    INTERFACE\n        BOOST_NO_CXX98_FUNCTION_BASE\n)\nendif()\n\nfind_package(Immer REQUIRED)\nfind_package(Zug REQUIRED)\nfind_package(Lager REQUIRED)\n\n##\n## Test for GNU Scientific Library\n##\nfind_package(GSL)\nset_package_properties(GSL PROPERTIES\n    URL \"https://www.gnu.org/software/gsl\"\n    TYPE RECOMMENDED\n    PURPOSE \"Required by Krita's Transform tool.\")\nmacro_bool_to_01(GSL_FOUND HAVE_GSL)\nconfigure_file(config-gsl.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-gsl.h )\n\n ###########################\n############################\n## Optional dependencies  ##\n############################\n###########################\n\n\nfind_package(WebP 1.2.0 COMPONENTS demux mux)\nset_package_properties(WebP PROPERTIES\n    URL \"https://developers.google.com/speed/webp\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by the WebP plugin\"\n)\n\n##\n## Test for KSeExpr\n##\nfind_package(KSeExpr 4.0.0.0)\nset_package_properties(KSeExpr PROPERTIES\n    URL \"https://invent.kde.org/graphics/kseexpr\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by the SeExpr generator layer\"\n)\nmacro_bool_to_01(KSeExpr_FOUND HAVE_SEEXPR)\nconfigure_file(config-seexpr.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-seexpr.h )\n\nfind_package(ZLIB REQUIRED)\nset_package_properties(ZLIB PROPERTIES\n    DESCRIPTION \"Compression library\"\n    URL \"https://www.zlib.net/\"\n    TYPE REQUIRED\n    PURPOSE \"Required by Krita's PNG and PSD support\")\nmacro_bool_to_01(ZLIB_FOUND HAVE_ZLIB)\n\nfind_package(OpenEXR)\nmacro_bool_to_01(OpenEXR_FOUND HAVE_OPENEXR)\nif(OpenEXR_FOUND)\n    set(LINK_OPENEXR_LIB OpenEXR::IlmImf)\nendif()\n\nfind_package(TIFF)\nset_package_properties(TIFF PROPERTIES\n    DESCRIPTION \"TIFF Library and Utilities\"\n    URL \"http://www.libtiff.org\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by the Krita TIFF filter\")\ninclude(CheckLibTIFFPSDSupport)\nconfigure_file(config-tiff.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-tiff.h)\n\nfind_package(JPEG)\nset_package_properties(JPEG PROPERTIES\n    DESCRIPTION \"Free library for JPEG image compression. Note that libjpeg8 is NOT supported.\"\n    URL \"https://www.libjpeg-turbo.org\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by the Krita JPEG filter\")\nif (JPEG_FOUND)\n    macro_bool_to_01(JPEG_FOUND HAVE_JPEG)\nendif()\n\nfind_package(libjpeg-turbo 2.1.3 COMPONENTS turbojpeg)\nset_package_properties(libjpeg-turbo PROPERTIES\n    DESCRIPTION \"libjpeg-turbo is a JPEG image codec that uses SIMD instructions (MMX, SSE2, AVX2, Neon, AltiVec) to accelerate baseline JPEG compression and decompression on x86, x86-64, Arm, and PowerPC systems, as well as progressive JPEG compression on x86 and x86-64 systems.\"\n    URL \"https://www.libjpeg-turbo.org\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by the Krita JPEG and TIFF filters\")\nmacro_bool_to_01(libjpeg-turbo_FOUND HAVE_JPEG_TURBO)\nconfigure_file(config-jpeg.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-jpeg.h )\n\nif(libjpeg-turbo_FOUND)\n    set(JPEG_TURBO_LIBRARIES libjpeg-turbo::turbojpeg)\nendif()\n\nfind_package(GIF)\nset_package_properties(GIF PROPERTIES\n    DESCRIPTION \"Library for loading and saving gif files.\"\n    URL \"http://giflib.sourceforge.net/\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by the Krita GIF filter\")\n\nfind_package(HEIF \"1.11.0\")\nset_package_properties(HEIF PROPERTIES\n    DESCRIPTION \"Library for loading and saving heif files.\"\n    URL \"https://github.com/strukturag/libheif\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by the Krita HEIF filter\")\n\nfind_package(OpenJPEG \"2.3.0\")\nset_package_properties(OpenJPEG PROPERTIES\n    DESCRIPTION \"Library for loading and saving jp2000 files.\"\n    URL \"https://www.openjpeg.org/\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by the Krita JP2000 filter\")\n\nfind_package(JPEGXL 0.7.0)\nset_package_properties(JPEGXL PROPERTIES\n    DESCRIPTION \"JPEG XL is a royalty-free raster-graphics file format that supports both lossy and lossless compression and is experimentally supported by Chrome, Firefox, and Edge.\"\n    URL \"https://github.com/libjxl/libjxl\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by the Krita JPEG-XL filter\")\n\nfind_package(FFTW3)\nset_package_properties(FFTW3 PROPERTIES\n    DESCRIPTION \"A fast, free C FFT library\"\n    URL \"http://www.fftw.org/\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by the Krita for fast convolution operators and some G'Mic features\")\nmacro_bool_to_01(FFTW3_FOUND HAVE_FFTW3)\nif (FFTW3_FOUND)\n    # GMic uses the Threads library if available.\n    find_library(FFTW3_THREADS_LIB fftw3_threads PATHS ${FFTW3_LIBRARY_DIRS})\nendif()\n\nfind_package(OpenColorIO 1.1.1)\nset_package_properties(OpenColorIO PROPERTIES\n    DESCRIPTION \"The OpenColorIO Library\"\n    URL \"https://www.opencolorio.org\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by the Krita LUT docker\")\nmacro_bool_to_01(OpenColorIO_FOUND HAVE_OCIO)\nif (OPENCOLORIO_VERSION VERSION_GREATER_EQUAL \"2.0.0\")\n    set(HAVE_OCIO_V2 TRUE)\nendif()\nconfigure_file(config-ocio.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-ocio.h)\n\nset_package_properties(PythonLibrary PROPERTIES\n    DESCRIPTION \"Python Library\"\n    URL \"https://www.python.org\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by the Krita PyQt plugin\")\nmacro_bool_to_01(Python_Development_FOUND HAVE_PYTHONLIBS)\n\nfind_package(SIP \"4.19.13\")\nset_package_properties(SIP PROPERTIES\n    DESCRIPTION \"Support for generating SIP Python bindings\"\n    URL \"https://www.riverbankcomputing.com/software/sip/download\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by the Krita PyQt plugin\")\nmacro_bool_to_01(SIP_FOUND HAVE_SIP)\n\nif (QT_MAJOR_VERSION STREQUAL \"5\")\n    find_package(PyQt5 \"5.6.0\")\n    set_package_properties(PyQt5 PROPERTIES\n        DESCRIPTION \"Python bindings for Qt5.\"\n        URL \"https://www.riverbankcomputing.com/software/pyqt/download\"\n        TYPE OPTIONAL\n        PURPOSE \"Required by the Krita PyQt plugin\")\n    macro_bool_to_01(PYQT5_FOUND HAVE_PYQT5)\n\n    set(PYQT_VERSION_TAG ${PYQT5_VERSION_TAG})\n    set(PYQT_SIP_NAME ${PYQT5_SIP_NAME})\n    set(PYQT_SIP_TAGS ${PYQT5_SIP_TAGS})\n    set(PYQT_SIP_DIR ${PYQT5_SIP_DIR})\n\nelseif (QT_MAJOR_VERSION STREQUAL \"6\")\n    find_package(PyQt6 \"6.7.0\")\n    set_package_properties(PyQt6 PROPERTIES\n        DESCRIPTION \"Python bindings for Qt6.\"\n        URL \"https://www.riverbankcomputing.com/software/pyqt/download\"\n        TYPE OPTIONAL\n        PURPOSE \"Required by the Krita PyQt plugin\")\n    macro_bool_to_01(PYQT6_FOUND HAVE_PYQT6)\n\n    set(PYQT_VERSION_TAG ${PYQT6_VERSION_TAG})\n    set(PYQT_SIP_NAME ${PYQT6_SIP_NAME})\n    set(PYQT_SIP_TAGS ${PYQT6_SIP_TAGS})\n    set(PYQT_SIP_DIR ${PYQT6_SIP_DIR})\nendif()\n\nfind_package(Mlt7)\nset_package_properties(Mlt7 PROPERTIES DESCRIPTION \"Media Lovin' Toolkit (Multimedia Framework)\"\n                URL \"https://mltframework.org/\"\n                PURPOSE \"Required to do audio/video syncrhonization and processing. No MLT = No Audio! \")\nif (Mlt7_FOUND)\n    find_package(SDL2 REQUIRED)\n    set_package_properties(SDL2 PROPERTIES DESCRIPTION \"Simple DirectMedia Layer 2\"\n                URL \"https://www.libsdl.org/\"\n                PURPOSE \"Required for MLT to render audio buffers. Required **only** when MLT is found on the system.\" )\n\n  if (ANDROID)\n      # Get the first item in the CMAKE_FIND_ROOT_PATH, hopefully it will be where plugins are saved.\n      list(GET CMAKE_FIND_ROOT_PATH 0 FIRST_FIND_PATH)\n      # TODO(sh_zam): Hardcoded, apparently generators doesn't work for this purpose?\n      file(GLOB MLT_PLUGINS \"${FIRST_FIND_PATH}/lib/mlt-7/*.so\")\n      list(APPEND ANDROID_EXTRA_LIBS ${MLT_PLUGINS})\n  endif()\nendif()\nmacro_bool_to_01(Mlt7_FOUND HAVE_MLT)\nconfigure_file(config-mlt.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-mlt.h)\n\nfind_package(LibMyPaint 1.4.0)\nset_package_properties(LibMyPaint PROPERTIES\n    DESCRIPTION \"MyPaint brush engine API for C/C++\"\n    TYPE OPTIONAL\n    PURPOSE \"Required for the MyPaint brush engine\")\nmacro_bool_to_01(LibMyPaint_FOUND HAVE_LIBMYPAINT)\nconfigure_file(config-mypaint.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-mypaint.h )\n\n##\n## Look for OpenGL\n##\n# TODO: see if there is a better check for QtGui being built with opengl support (and thus the QOpenGL* classes)\nif (QT_MAJOR_VERSION STREQUAL \"5\")\n    if(Qt5Gui_OPENGL_IMPLEMENTATION)\n        message(STATUS \"Found QtGui OpenGL support\")\n    else()\n        message(FATAL_ERROR  \"Did NOT find QtGui OpenGL support. Check your Qt configuration. You cannot build Krita without Qt OpenGL support.\")\n    endif()\nendif()\n\n##\n## Test for eigen3\n##\nfind_package(Eigen3 3.3 REQUIRED NO_MODULE)\nset_package_properties(Eigen3 PROPERTIES\n    DESCRIPTION \"C++ template library for linear algebra\"\n    URL \"http://eigen.tuxfamily.org\"\n    TYPE REQUIRED)\n\n##\n## Test for exiv2\n##\nfind_package(LibExiv2 0.16 REQUIRED)\n\n##\n## Test for lcms\n##\nfind_package(LCMS2 2.4 REQUIRED)\nset_package_properties(LCMS2 PROPERTIES\n    DESCRIPTION \"LittleCMS Color management engine\"\n    URL \"http://www.littlecms.com\"\n    TYPE REQUIRED\n    PURPOSE \"Will be used for color management and is necessary for Krita\")\nif(LCMS2_FOUND)\n    if(NOT ${LCMS2_VERSION} VERSION_LESS 2.4 )\n        set(HAVE_LCMS24 TRUE)\n    endif()\n    set(HAVE_REQUIRED_LCMS_VERSION TRUE)\n    set(HAVE_LCMS2 TRUE)\n\n    include(CheckIncludeFileCXX)\n\n    set(CMAKE_REQUIRED_INCLUDES ${LCMS2_INCLUDE_DIRS})\n    set(CMAKE_REQUIRED_LIBRARIES ${LCMS2_LIBRARIES})\n\n    if(LCMS2_FAST_FLOAT_INCLUDE_DIR)\n        message(STATUS \"Found LittleCMS's fast float plugin\")\n        set(HAVE_LCMS_FAST_FLOAT_PLUGIN 1)\n    endif()\nendif()\n\n##\n## Test for xsimd\n##\n## xsimd has `SameMajorVersion` compatibility option set\n## in `write_basic_package_version_file`, so we cannot just\n## write a version range in the find_package call. Instead we\n## should try all the supported versions manually\n##\nforeach(xsimd_version 8.1.0 9 10 11 12 13)\n    if(NOT xsimd_FOUND)\n        find_package(xsimd ${xsimd_version})\n    endif()\nendforeach()\n\nset_package_properties(xsimd PROPERTIES\n    DESCRIPTION \"C++ wrappers for SIMD intrinsics\"\n    URL \"https://github.com/xtensor-stack/xsimd\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by Krita for vectorization\")\nmacro_bool_to_01(xsimd_FOUND HAVE_XSIMD)\nconfigure_file(config-xsimd.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-xsimd.h )\n\nif(HAVE_XSIMD)\n    macro(ko_compile_for_all_implementations_no_scalar _objs _src)\n        if(\"aarch64\" IN_LIST XSIMD_ARCH)\n            xsimd_compile_for_all_implementations(${_objs} ${_src} FLAGS ${xsimd_ARCHITECTURE_FLAGS} ONLY NEON64)\n        endif()\n\n        if (\"arm\" IN_LIST XSIMD_ARCH)\n            xsimd_compile_for_all_implementations(${_objs} ${_src} FLAGS ${xsimd_ARCHITECTURE_FLAGS} ONLY NEON)\n        endif()\n\n        if (\"x86\" IN_LIST XSIMD_ARCH OR \"x86-64\" IN_LIST XSIMD_ARCH)\n            xsimd_compile_for_all_implementations(${_objs} ${_src} FLAGS ${xsimd_ARCHITECTURE_FLAGS} ONLY SSE2 SSSE3 SSE4_1 AVX AVX2+FMA)\n        endif()\n    endmacro()\n\n    macro(ko_compile_for_all_implementations _objs _src)\n        xsimd_compile_for_all_implementations(${_objs} ${_src} FLAGS ${xsimd_ARCHITECTURE_FLAGS} ONLY Scalar)\n        ko_compile_for_all_implementations_no_scalar(${_objs} ${_src})\n    endmacro()\nendif()\n\n##\n## Test endianness\n##\ninclude (TestBigEndian)\ntest_big_endian(CMAKE_WORDS_BIGENDIAN)\n\n##\n## Test for qt-poppler\n##\nfind_package(Poppler COMPONENTS Qt5)\nset_package_properties(Poppler PROPERTIES\n    DESCRIPTION \"A PDF rendering library\"\n    URL \"https://poppler.freedesktop.org/\"\n    TYPE OPTIONAL\n    PURPOSE \"Required by the Krita PDF filter.\")\n\n##\n## Test for quazip\n##\nfind_package(QUAZIP 0.6)\nset_package_properties(QUAZIP PROPERTIES\n    DESCRIPTION \"A library for reading and writing zip files\"\n    URL \"https://stachenov.github.io/quazip/\"\n    TYPE REQUIRED\n    PURPOSE \"Needed for reading and writing KRA and ORA files\"\n)\n\n##\n## Test for KDcraw\n##\nfind_package(KF5KDcraw 5.0.0)\nset_package_properties(KF5KDcraw PROPERTIES\n    DESCRIPTION \"A thread-safe wrapper around libraw\"\n    URL \"https://api.kde.org/libkdcraw/html/index.html\"\n    TYPE OPTIONAL\n    PURPOSE \"Needed for reading RAW files\"\n)\n\n##\n## Check for freetype\n##\nfind_package(Freetype 2.11.0 REQUIRED)\nset_package_properties(Freetype PROPERTIES\n    DESCRIPTION \"A library for rendering glyphs\"\n    URL \"https://download.savannah.gnu.org/releases/freetype\"\n    TYPE REQUIRED\n    PURPOSE \"Needed for rendering text vector shapes.\"\n)\n\n##\n## Check for HarfBuzz\n##\nif (QT_MAJOR_VERSION STREQUAL \"6\")\n    find_package(HarfBuzz 2.7.4 REQUIRED)\nelse()\n    find_package(HarfBuzz 4.0 REQUIRED)\nendif()\nset_package_properties(HarfBuzz PROPERTIES\n    DESCRIPTION \"OpenType text shaping engine\"\n    URL \"https://harfbuzz.github.io\"\n    TYPE REQUIRED\n    PURPOSE \"Needed for rendering text vector shapes.\"\n)\nif (HarfBuzz_FOUND)\n    list(APPEND ANDROID_EXTRA_LIBS ${HarfBuzz_LIBRARIES})\nendif()\n\n# Note: We now build a patched raqm from source with Krita.\n\n##\n## Check for fontconfig\n##\nfind_package(Fontconfig 2.13.1 REQUIRED)\nset_package_properties(Fontconfig PROPERTIES\n    TYPE REQUIRED\n    PURPOSE \"Needed for getting font file information.\"\n)\n\n##\n## Check for libunibreak\n##\nfind_package(libunibreak 5.0 REQUIRED)\nset_package_properties(libunibreak PROPERTIES\n    DESCRIPTION \"Implementation of the line breaking and word breaking algorithms as described in Unicode Standard Annex 14 and Unicode Standard Annex 29\"\n    URL \"https://github.com/adah1972/libunibreak\"\n    TYPE REQUIRED\n    PURPOSE \"Needed for rendering text vector shapes.\"\n)\n\n##\n## Build vendored libraries\n##\n\n# Allow specification of a directory with pre-downloaded\n# requirements. This download directory is used for 3rdparty_vendor\n# download\n\nif(DEFINED ENV{EXTERNALS_DOWNLOAD_DIR})\n    set(EXTERNALS_DOWNLOAD_DIR $ENV{EXTERNALS_DOWNLOAD_DIR})\nendif()\n\nif(NOT IS_DIRECTORY ${EXTERNALS_DOWNLOAD_DIR})\n    message(WARNING \"No externals download dir set, default location inside build tree is used. Use -DEXTERNALS_DOWNLOAD_DIR to override\")\nelse()\n    file(TO_CMAKE_PATH \"${EXTERNALS_DOWNLOAD_DIR}\" EXTERNALS_DOWNLOAD_DIR)\nendif()\n\nadd_subdirectory(3rdparty_vendor)\n\n##\n## Test for Atomics\n##\ninclude(CheckAtomic)\n\n ############################\n#############################\n## Add Krita helper macros ##\n#############################\n############################\n\ninclude(MacroKritaAddBenchmark)\n\n ####################\n#####################\n## Define includes ##\n#####################\n####################\n\n# for config.h and <toplevel/foo.h> includes (if any?)\ninclude_directories(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}\n                           ${CMAKE_CURRENT_BINARY_DIR}\n)\n\nadd_subdirectory(sdk/tests)\n\nadd_subdirectory(libs)\nadd_subdirectory(plugins)\nif (BUILD_TESTING)\n    add_subdirectory(benchmarks)\nendif()\nadd_subdirectory(krita)\n\nconfigure_file(KoConfig.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/KoConfig.h )\nconfigure_file(KoTestConfig.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/KoTestConfig.h )\nconfigure_file(config_convolution.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config_convolution.h)\n\ncheck_function_exists(powf HAVE_POWF)\nconfigure_file(config-powf.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-powf.h)\n\nif(WIN32)\n    include(${CMAKE_CURRENT_LIST_DIR}/packaging/windows/installer/ConfigureInstallerNsis.cmake)\n    include(${CMAKE_CURRENT_LIST_DIR}/packaging/windows/msix/ConfigureMsixFiles.cmake)\nendif()\n\nmessage(\"\\nBroken tests:\")\nforeach(tst ${KRITA_BROKEN_TESTS})\n    message(\"    * ${tst}\")\nendforeach()\n\nif(APPLE)\n    # fix macos test rpath\n    macos_test_fixrpath(${KRITA_TESTS_TARGET})\nendif()\n\nfeature_summary(WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)\n\nif (ANDROID)\n  # ECM passes this to Qt, which was already capable of detecting it..\n  set (ANDROID_SDK_COMPILE_API \"34\")\n\n  # To assist stdcpp-path in deployment.json file\n  set(ANDROID_SYSROOT_PREFIX \"${ANDROID_TOOLCHAIN_ROOT}/sysroot/usr\" CACHE STRING \"\" FORCE)\n\n  # copied regex from ECM's toolchain\n  string(REGEX REPLACE \"-(clang)?([0-9].[0-9])?$\" \"\" ECM_ANDROID_STL_ARCH ${ANDROID_TOOLCHAIN_NAME})\n\n  if (NOT (CMAKE_CXX_STANDARD_LIBRARIES MATCHES \"[^ ]*c\\\\+\\\\+[^ ]*\\\\.so\"))\n\n    set (KRITA_ANDROID_STL_PATH \"${ANDROID_TOOLCHAIN_ROOT}/sysroot/usr/lib/${ECM_ANDROID_STL_ARCH}/lib${ANDROID_STL}.so\")\n    if (NOT EXISTS ${KRITA_ANDROID_STL_PATH})\n      message(FATAL_ERROR \"STL does not exist at the right location, please use NDK r20+\")\n    endif()\n\n    set (CMAKE_CXX_STANDARD_LIBRARIES \"${CMAKE_CXX_STANDARD_LIBRARIES} \\\"${KRITA_ANDROID_STL_PATH}\\\"\" CACHE STRING \"\" FORCE)\n  endif()\nendif()\n\nif(DEFINED QTANDROID_EXPORTED_TARGET AND NOT TARGET \"create-apk\")\n    set (_CMAKE_ANDROID_DIR \"${ECM_DIR}/../toolchain\")\n    list(LENGTH QTANDROID_EXPORTED_TARGET targetsCount)\n    include(${_CMAKE_ANDROID_DIR}/ECMAndroidDeployQt.cmake)\n\n    math(EXPR last \"${targetsCount}-1\")\n    foreach(idx RANGE 0 ${last})\n        list(GET QTANDROID_EXPORTED_TARGET ${idx} exportedTarget)\n        list(GET ANDROID_APK_DIR ${idx} APK_DIR)\n        if(APK_DIR AND NOT EXISTS \"${ANDROID_APK_DIR}/AndroidManifest.xml\" AND IS_ABSOLUTE ANDROID_APK_DIR)\n            message(FATAL_ERROR \"Cannot find ${APK_DIR}/AndroidManifest.xml according to ANDROID_APK_DIR. ${ANDROID_APK_DIR} ${exportedTarget}\")\n        elseif(NOT APK_DIR)\n            get_filename_component(_qt5Core_install_prefix \"${Qt5Core_DIR}/../../../\" ABSOLUTE)\n            set(APK_DIR \"${_qt5Core_install_prefix}/src/android/templates/\")\n        endif()\n\n        ecm_androiddeployqt(\"${exportedTarget}\" \"${ECM_ADDITIONAL_FIND_ROOT_PATH}\")\n        set_target_properties(create-apk-${exportedTarget} PROPERTIES ANDROID_APK_DIR \"${APK_DIR}\")\n    endforeach()\nelseif(ANDROID)\n    message(STATUS \"You can export a target by specifying -DQTANDROID_EXPORTED_TARGET=<targetname> and -DANDROID_APK_DIR=<paths>\")\nendif()\n\nki18n_install(po)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.3076171875,
          "content": "The Krita project is part of the KDE community. The KDE Code of Conduct \napplies to the Krita community as well:\n\n    https://www.kde.org/code-of-conduct/\n\nIn case of problems within the Krita or wider KDE community, please\ncontact the KDE e.V. Community Working Group:\n\n   https://ev.kde.org/workinggroups/cwg.php\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "COPYING-CMAKE-SCRIPTS",
          "type": "blob",
          "size": 1.4638671875,
          "content": "Copyright (c) The Regents of the University of California.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. Neither the name of the University nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n"
        },
        {
          "name": "ExtraDesktop.sh",
          "type": "blob",
          "size": 0.052734375,
          "content": "#! /bin/sh\n\nfind -name *tag -print | grep -v test.tag\n"
        },
        {
          "name": "HACKING",
          "type": "blob",
          "size": 8.92578125,
          "content": "Since 1999, people have been hacking on Krita. Everyone brought their\nown coding style, their own code conventions, their own likes and\ndislikes. Me, (Halla that is), I like indents of four spaces, and\nno scope prefixes for variables. However, in the interests of\nconsistency, these are the rules new code should adhere to:\n\nSee also https://community.kde.org/Policies/Frameworks_Coding_Style --\nthat document is leading.\n\nQt vs STD vs Boost:\n\n    In general, use the Qt classes wherever possible, even if someone tells you\n    that the STD class is better or whatever. We're dealing with a big project\n    with lots of developers here and we should keep the code as consistent and\n    easy to grasp as possible. Since people need to know Qt in the first place,\n    keep to Qt. Discuss deviations on #krita\n\nC++11 and C++14\n\n    Yes, but.\n\n    * Prefer normal functions over lambdas, unless really needed (e.g. when replacing\n      the use of QSignalMapper)\n\n    * Try to avoid auto as a shortcut for the type name, except when used\n      in range-based for-loops and iterators. Using auto as a replacement\n      for a templated code (or inside templated code) is perfectly fine.\n\n    * Generic lambdas. Use generic lambdas only when you want to solve a\n      problem that would otherwise require templates, not just as a shortcut for\n      the argument typenames.\n\n    * auto as a deduced return type of functions that would otherwise require\n      templates is perfectly fine\n\n    * In some cases it might be okay to use auto as a shortcut for the typename,\n      e.g. when using very long types returned by boost. But better discuss that\n      on #krita.\n\n    * Avoid the new sig/slot connection syntax _unless_ you are porting all of\n      Krita to the new syntax. Sure, it has some advantages, but having two different\n      ways of doing the same thing is begging for trouble and comprehension problems.\n\n    * For now, keep using Q_FOREACH, we're using it all over the place, and it has\n      different constness semantics over the standard range-based for-loop.\n\n    * Use nullptr in new code. When changing existing code, make sure that 1) the whole\n      .cpp/.h files pair uses the same style, 2) the change of the style outweigh the\n      loss of the git-blame history (that is, your changes do already change the file\n      significantly)\n\n    * Before using other new features, discuss on #krita so we can expand this list.\n\n\nIndentation\n\n    With four spaces. Use the default kdelibs indentation \n    (http://techbase.kde.org/Policies/Kdelibs_Coding_Style)\n\nIncludes\n\n    Avoid as much as possible #includes in header files; use forward declarations\n    of classes.\n\nInitializers\n\n    Avoid as much as possible initializers in the body of the constructor. Use\n    initializer lists instead. Write the initializers as follows\n\n    Class(A a, B b)\n        : Subclass(a)\n        , m_b(b)\n    {\n    }\n\n    Note the location of the colon and comma.\n\n    It is also preferred to use {}-initialization for class members and\n    global namespace scope variables, e.g.\n\n    class Foo\n    {\n        int m_value {0};\n    };\n\n    namespace Bar\n    {\n        int SomeGlobalValue {0};\n    };\n\n    Since Krita has a long history of usage =-initialization everywhere, it is **not**\n    recommended to use {}-initialization in function bodies, especially, when it results\n    in a mix of styles in the same file. You can still use that as an exception to solve\n    some specific problems like the most vexing parse.\n\nScope prefixes\n\n    Use only m_ for class-level variables. No other scope prefixes; no g_, l_,\n    no 'p' for pointer variables.\n\nShared pointers\n\n    Use shared pointers wherever possible. Prefer Qt's shared pointer classes\n    to our home-grown shared pointer classes.\n\nGetter/setter\n\n    Krita doesn't use Qt's properties -- yet. If you want to introduce use of\n    properties, convert any and all classes in Krita before committing.\n\n    Getter/setters are named 'x() for getters and setX(int x) for setters. If you\n    come across violations of this rule, change the code.    \n\nClass naming\n\n    If you use a well-known design pattern, name the class according to the design\n    pattern. All files should start with 'Kis', all classes with the 'Kis' prefix.\n    This filename should be the same as the classname: KisNewClass.h, KisNewClass.\n\n    Filenames in plugins do not start with Kis; only in libraries. Do not make new\n    classes that start with Ko.\n\nFunction naming\n\n    Functions should be named in camelBackedFashion, to conform to Qt's standards.\n    If you encounter functions in c_style_like_this, feel free to rename. Also:\n    verbNoun -- i.e., rotateLayer, not layer_rotate. The latter is a true c-ism,\n    introduced by a language that needs to prefix the 'class' name to every function\n    in order to have something that's not quite OO.\n\nVariable/Parameter names\n\n    Variable/parameter names start with a lower case letter. A name composed of different\n    words is done in camelBackedStyle.\n\n    Try to avoid abbreviations except for the most common cases, like cs for KoColorSpace. \n    It's okay for variable names to be long and explicit and derived from the type name.\n\nDesigner\n\n    Krita has started to use designer. All dialogs and all widgets that have a layout\n    manager must be done in designer. Do not add code or signal/slot connections\n    in designer.\n\nEnums\n\n    All enums should be prefixed with 'enum'.\n\nNamespaces\n\n    Currently, we only use anonymous namespaces for things like undo\n    commands. For the rest, some classes have a 'Kis' prefix, others don't. This should\n    be made consistent, and we might want to use namespaces to keep all of Krita\n    inside.\n\nFiles and classes\n\n    It's preferred (and strongly preferred) to have only one class per .h/.cpp file.\n    (Which is logical, because otherwise you won't be able to keep to the naming scheme.)\n\nSpaces\n\n    Keep the source airy and open. In particular, there should be empty lines between function\n    declarations and definitions.\n\nSlots and signals\n\n    Prefix slots with slot and signals with sig: slotUpdateSelection, sigSelectionUpdated.\n\nBoolean operators\n\n    Use the standard !, !=, ==, && etc style, not the \"not\", \"and\" etc. style. Keep krita code\n    using one, easily recognizable, C++ style.\n\nStatic initializers\n\n    Sometimes we need to declare a static object that performs some actions on Krita\n    loading, e.g. to register Qt's metatype for a Krita type. We have a special macro\n    for that:\n\n    KIS_DECLARE_STATIC_INITIALIZER {\n        qRegisterMetaType<KoResourceSP>(\"KoResourceSP\");\n    }\n\n    What the macro does is basically defining a static variable that is initialized\n    on loading of the library:\n\n    struct KoResourceSPStaticInitializer {\n        KoResourceSPStaticInitializer() {\n            qRegisterMetaType<KoResourceSP>(\"KoResourceSP\");\n        }\n    };\n    static KoResourceSPStaticInitializer __initializer1;\n\n    This macro is usually added to the same .cpp file as the class itself.\n\n    WARNING: do not use this pattern in **plugins**. All Krita's plugins are\n    actually static libraries that are pulled into dynamic .so libraries at the\n    linking stage. It means that all \"unused\" objects will never be pulled\n    into the final plugin. Instead, do all the initialization in the \"plugin\"\n    class (the one that is passed to registerPlugin<>() in\n    K_PLUGIN_FACTORY_WITH_JSON).\n\n    The problem can be worked around with `$<LINK_LIBRARY:WHOLE_ARCHIVE,...>`\n    CMake feature, but it is available only since CMake 3.24, so for now\n    just avoid using initializers in plugins.\n\nWith Krita now supporting Python scripting, we need guidelines for these as well.\nThese guidelines are preliminary and may be further refined in the future.\n\nTo keep it simple, we have chosen to follow the style guide suggested by Python: PEP8.\n\nAll rules should be followed, except the max limit of 79 characters per line. As this\ncan reduce readability in some cases, this rule is optional.\n\nThe full PEP8 specification is available here: https://www.python.org/dev/peps/pep-0008/\n\nTo check compliance you can run pep8.py against the code.\nYou can also use autopep8.py to automatically fix detected compliance issues.\n\npep8.py can be downloaded via Python's package manager (pip) [https://pypi.python.org/pypi/pep8],\nor your distribution's package manager.\nautopep8.py can also be downloaded via Python's package manager [https://pypi.python.org/pypi/autopep8],\nor your distribution's package manager.\n\nBoth of these scripts come bundled with the PyDev plugin, which is available for Eclipse and other IDEs.\nThe PyDev integration can be configured to visually highlight portions of the code which is not in compliance,\nas well as run autopep8 via shortcuts.\n\npep8.py and autopep8.py can suppress select rules via the \"--ignore\" command line argument.\nTo ignore the 79 characters per line rule, pep8.py can be called like this:\n\npep8.py --ignore=E501\n\nYou can read more about the error codes and what they mean here:\nhttp://pep8.readthedocs.io/en/release-1.7.x/intro.html#error-codes\n"
        },
        {
          "name": "HACKING.gitlab-ci.md",
          "type": "blob",
          "size": 2.3056640625,
          "content": "Here is a list of guidelines that we follow when developing CI pipeline for Krita:\n\n0) Indentation: use 2 spaces to indent the YAML code. It differs from the style we use \n   for C++ code in Krita. We just follow the style that Sysadmins use in their scripts.\n\n   Options for VSCode:\n\n   ```json\n   \"[yaml]\": {\n        \"editor.formatOnSave\": false,\n        \"editor.tabSize\": 2,\n        \"editor.insertSpaces\": true,\n        \"editor.detectIndentation\": true,\n        \"editor.wrappingIndent\": \"indent\",\n        \"editor.autoIndent\": \"full\"\n      },\n   ```\n\n1) If your build job is long enough to potentially overflow the GitLab's log limit (~4MiB),\n   add `job-step.py 2>&1 | tee build-step.log` to every build step of this job. In the end\n   of the job, upload these logs as artifacts. It prevents us from losing time trying to \n   resolve CI issues, when the logs are lost due to GitLab's log-size limitation.\n\n   On Windows use a different line: \n   \n   `job-step.py 2>&1 | Tee-Object -FilePath \"build-step.log`\n\n2) Try to write all the scripts in Python3, if it makes sense on the particular platform.\n   Avoid Windows Batch (.cmd) scripts by all means, they are known to be non-portable and\n   work differently on consumer Windows and Windows Server systems.\n\n3) All string in .yml files should be unquoted by default; if a string contains any wildcard\n   symbols (e.g. '*') or yaml's control character (e.g. ':' in Windows' paths) , wrap it into\n   quotes.\n\n    ```yaml\n    windows-build:\n      variables:\n        KDECI_BUILD_TYPE: Release # simple string -> unquoted\n        KDECI_EXTRA_CMAKE_ARGS: -DHIDE_SAFE_ASSERTS=OFF # simple string -> unquoted\n        KDECI_CC_CACHE: \"C:\\\\Gitlab\\\\Caches\\\\krita-windows\" # Windows path -> quoted\n\n    linux-build:\n      variables:\n        KDECI_CC_CACHE: /mnt/caches/krita-appimage/ # Linux path -> unquoted\n    ```\n\n4) Boolean values passed to our CI scripts should be (unquoted) `True` or `False` strings.\n\n    ```yaml\n    windows-build:\n      variables:\n        KDECI_COMPRESS_PACKAGES_ON_DOWNLOAD: False\n        KRITACI_SKIP_UPLOAD_NIGHTLY_PACKAGE: True\n    ```\n\n5) Split CMake options passed via environment variables into multiple lines\n   using `>` character:\n\n   ```yaml\n   linux-nightly:\n      variables:\n        KDECI_EXTRA_CMAKE_ARGS: >\n          -DHIDE_SAFE_ASSERTS=OFF\n          -DBUILD_TESTING=OFF\n   ```"
        },
        {
          "name": "KoAlwaysInline.h",
          "type": "blob",
          "size": 0.4248046875,
          "content": "/*\n *  SPDX-FileCopyrightText: 2014 Dmitry Kazakov <dimula73@gmail.com>\n *\n *  SPDX-License-Identifier: GPL-2.0-or-later\n */\n\n#ifndef __KO_ALWAYS_INLINE_H\n#define __KO_ALWAYS_INLINE_H\n\n#ifndef ALWAYS_INLINE\n#if defined __GNUC__\n#define ALWAYS_INLINE inline __attribute__((__always_inline__))\n#elif defined _MSC_VER\n#define ALWAYS_INLINE __forceinline\n#else\n#define ALWAYS_INLINE inline\n#endif\n#endif\n\n#endif /* __KO_ALWAYS_INLINE_H */\n"
        },
        {
          "name": "KoConfig.h.cmake",
          "type": "blob",
          "size": 1.490234375,
          "content": "// Check windows\n#ifdef Q_OS_WIN\n   #ifdef _WIN64\n     #define ENV64BIT\n  #else\n    #define ENV32BIT\n  #endif\n#endif\n\n// Check GCC\n#ifdef __GNUC__\n  #if defined (__x86_64__) || defined (__ppc64__) || defined (__aarch64__)\n    #define ENV64BIT\n  #else\n    #define ENV32BIT\n  #endif\n#endif\n\n#ifdef __APPLE__\n# ifdef __BIG_ENDIAN__\n#  define WORDS_BIGENDIAN 1\n# else\n#  undef WORDS_BIGENDIAN\n# endif\n#else\n/* Define to 1 if your processor stores words with the most significant byte\n   first (like Motorola and SPARC, unlike Intel and VAX). */\n#cmakedefine WORDS_BIGENDIAN ${CMAKE_WORDS_BIGENDIAN}\n#endif\n\n/* Defines if the Dr. Mingw crash handler should be used */\n#cmakedefine USE_DRMINGW 1\n\n/* Number of bits in a file offset, on hosts where this is settable. */\n#define _FILE_OFFSET_BITS 64\n\n/* Define to 1 to make fseeko visible on some hosts (e.g. glibc 2.2). */\n/* #undef _LARGEFILE_SOURCE */\n\n/* Define for large files, on AIX-style hosts. */\n/* #undef _LARGE_FILES */\n\n/* Defines if your system has the OpenEXR library */\n#cmakedefine HAVE_OPENEXR 1\n\n/* Defines if we use lcms2 */\n#cmakedefine HAVE_LCMS2 1\n\n/* Defines if we use lcms2.4 */\n#cmakedefine HAVE_LCMS24 1\n\n/* Defines if we can use LittleCMS's fast float plugin. (GPLv3) */\n#cmakedefine HAVE_LCMS_FAST_FLOAT_PLUGIN 1\n\n/* Defines if DBUS is present */\n#cmakedefine HAVE_DBUS 1\n\n/* Defines if KCrash is present */\n#cmakedefine HAVE_KCRASH 1\n\n/* This variable contains the path to the root of the build directory */\n#define KRITA_BUILD_DIR \"${CMAKE_BINARY_DIR}\"\n"
        },
        {
          "name": "KoTestConfig.h.cmake",
          "type": "blob",
          "size": 0.466796875,
          "content": "#include <KoConfig.h>\n\n/* This variable contains the path to the root of the source directory */\n#define KRITA_SOURCE_DIR \"${CMAKE_SOURCE_DIR}\"\n\n/* This variable contains the path to the data install dir */\n#define KRITA_RESOURCE_DIRS_FOR_TESTS \"${CMAKE_INSTALL_PREFIX}/${DATA_INSTALL_DIR};${CMAKE_SOURCE_DIR}/krita/data\"\n\n/* This variable contains the path to the plugins install dir */\n#define KRITA_PLUGINS_DIR_FOR_TESTS \"${CMAKE_INSTALL_PREFIX}/${KRITA_PLUGIN_INSTALL_DIR}\"\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "Mainpage.dox",
          "type": "blob",
          "size": 1.775390625,
          "content": "/*\n *  Copyright (C) 2006 Boudewijn Rempt <boud@valdyas.org>\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n */\n\n/**\n  \\mainpage Krita Painting application\n\n  Krita is an advanced and modular painting application.\n\n  Krita is built around two core libraries: pigment and kritaimage.\n\n  The pigment library abstracts colorspaces and color\n  transformations. ColorSpaces provide functions to manipulate pixels. The\n  kritcolor library loads colorspace plugins to extend the range of\n  available colorspaces.\n\n  The kritaimage library abstracts the storage, creation, inspection\n  and manipulation of pixels stored in a rectangular area. It provides\n  layers, filters, iterators and painters. Filters and paint operations\n  are provided as service plugins loaded through the appropriate trader\n  queries.\n\n  There are the following types of plugins\n\n<ul>\n  <li> filters\n  <li> generators\n  <li> tools\n  <li> brush engines\n  <li> colorspaces\n  <li> import/export filters\n  <li> view plugins: plugins that extend krita with dockers, dialogs etcetera\n</ul>\n\n */\n\n// DOXYGEN_SET_PROJECT_NAME = Krita\n// DOXYGEN_SET_IGNORE_PREFIX = Kis Ko K\n"
        },
        {
          "name": "Messages.sh",
          "type": "blob",
          "size": 1.125,
          "content": "#! /bin/sh\n#\n#  SPDX-License-Identifier: GPL-3.0-or-later\n#\n\nsource kundo2_aware_xgettext.sh\n\n$EXTRACTRC `find . -name \\*.ui | grep -v '/tests/'` >> rc.cpp\nRCFILES=`find . -name \\*.xmlgui                                               \\\n\t| grep -v krita/sketch/KritaSketchWin.xmlgui                          \\\n\t| grep -v krita/gemini/KritaGeminiWin.xmlgui\n         `\n$EXTRACTRC $RCFILES >> rc.cpp\n\nACTIONFILES=`find . -name \\*.action | grep -v '/tests/'`\n./action_i18n.pl --context=action $ACTIONFILES >> rc.cpp\n\n# extracti18n.pl extracts additional data from brushes, palettes etc.\nperl extracti18n.pl >> rc.cpp\n\n# Ignore sdk/templates which contains templates for writing future plugins.\n# Also ignore crashreporter, it has it's own catalog\n# None of the placeholder strings inside will be seen by users.\nkundo2_aware_xgettext krita.pot rc.cpp \\\n                  `find . -name \\*.cc -o -name \\*.h  -o -name \\*.cpp | \\\n                  grep -v '/tests/' | grep -v './sdk/templates' | grep -v './krita/crashreporter/'`\n\n# Extract the messages in Python plugins.\n$XGETTEXT -L Python `find . -name \\*.py` -j -o $podir/krita.pot\n\n# Clean up\nrm -f rc.cpp\n"
        },
        {
          "name": "README.android.md",
          "type": "blob",
          "size": 1.9296875,
          "content": "# Building Krita for Android\n\nFirst of all, I use linux to do my builds and testing. Although,\nthey _should_ work on Windows/macOS, I cannot give any guarantee \nthat it will.\n\n## Setting up Android SDK and NDK\n\nWe right now use Android NDK version `r18b` to do our builds. So,\nI would recommend to use that. Download it from [google's website](https://developer.android.com/ndk/downloads/older_releases.html)\nthen extract it.\n\nNext, Android SDK. You can either download Android Studio or just\nthe `sdk-tools`. Both could be downloaded from [google's website](https://developer.android.com/studio).\n\nIf you downloaded Android Studio then open SDK manager and download\n`Android SDK Build-Tools`.\n(more info: https://developer.android.com/studio/intro/update#sdk-manager)\n\nIf you download just `sdk-tools`, then, extract it and run:\n\n```shell\ncd <extracted-android-sdk-tools>/tools/bin\n./sdkmanager --licenses\n./sdkmanager platform-tools\n./sdkmanager \"platforms;android-21\"\n./sdkmanager \"platforms;android-28\"    # for androiddeployqt\n./sdkmanager \"build-tools;28.0.2\"\n```\n\nIf you get some `ClassNotFoundException` it might be because `java`\nversion is set to `11`. For `sdkmanager` to work, set it to `8` and\nthen run it again.\n\nThat's the only dependency we have to manage manually!\n\n## Building Krita\n\nNow, to build krita, run `<krita-source>/packaging/android/androidbuild.sh --help`\nand pass the required arguments.\n\nExample:\n\n```shell\n./androidbuild.sh -p=all --src=/home/sh_zam/workspace/krita --build-type=Debug --build-root=/home/sh_zam/workspace/build-krita-android --ndk-path=/home/sh_zam/Android/Sdk/ndk-bundle --sdk-path=/home/sh_zam/Android/Sdk --api-level=21 --android-abi=armeabi-v7a\n```\n\nThat's all!\n\n## Installing Krita APK\n\nTo install run `adb install -d -r <build-root>/krita_build_apk/build/outputs/apk/debug/krita_build_apk-debug.apk`.\n\n`adb` should be in `<sdk-root>/platform-tools/`\n\n## Crash\n\nIf Krita crashes you can look up the logs using `adb logcat`\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.912109375,
          "content": "![Picture](https://krita.org/images/krita-logo-light.svg)\n\n| CI Name     | Master | Stable | Release |\n| ------------------- | ---------------- | ------ | ------- |\n| Pipeline | [![pipeline status](https://invent.kde.org/graphics/krita/badges/master/pipeline.svg)](https://invent.kde.org/graphics/krita/-/commits/master) | [![pipeline status](https://invent.kde.org/graphics/krita/badges/krita/5.2/pipeline.svg)](https://invent.kde.org/graphics/krita/-/commits/krita/5.2) | [![Latest Release](https://invent.kde.org/graphics/krita/-/badges/release.svg)](https://invent.kde.org/graphics/krita/-/releases) |\n\nNote: Nightly builds are not covered by this table atm\n\nKrita is a free and open source digital painting application. It is for artists who want to create professional work from start to end. Krita is used by comic book artists, illustrators, concept artists, matte and texture painters and in the digital VFX industry.\n\nIf you are reading this on GitHub, be aware that this is just a mirror. Our real code repository is provided by KDE: https://invent.kde.org/graphics/krita.git\n\n![Picture](https://krita.org/images/hero-image-50.webp)\n\n### Repository Status\n\nFor branch: `master`\n\n| Freeze type    | Status                      |\n|----------------|-----------------------------|\n| Feature Freeze | no freeze, features allowed |\n| String Freeze  | no freeze, strings allowed  |\n\n\n### User Manual\nhttps://docs.krita.org/en/user_manual.html\n\n### Development Notes and Build Instructions\n\nPlease follow [the online documentation](https://docs.krita.org/en/untranslatable_pages/building_krita.html).\n\nOther developer guides, notes and wiki:\n\nhttps://docs.krita.org/en/untranslatable_pages.html\n\nApidox:\n\nhttps://api.kde.org/krita/html/index.html\n\n### Bugs and Wishes\n\nhttps://bugs.kde.org/buglist.cgi?bug_status=UNCONFIRMED&bug_status=CONFIRMED&bug_status=ASSIGNED&bug_status=REOPENED&list_id=1315444&product=krita&query_format=advanced\n\n### Discussion Forum\n\n* https://krita-artists.org/\n\n### IRC channel\n\nMost of the developers hang out here. If you are interested in helping with the project this is a great place to start.\n\nlibera.chat, #krita\n\n### Project Website\n\nhttps://www.krita.org\n\n### Nightly builds\n\n#### Unstable\n\n* https://cdn.kde.org/ci-builds/graphics/krita/master/\n\n#### Stable\n\n* https://cdn.kde.org/ci-builds/graphics/krita/krita/5.2/\n\n#### Developers builds\n\n##### Linux build with debug symbols in Qt and Krita\n\n1) Go to Jobs section of Krita's CI: https://invent.kde.org/graphics/krita/-/jobs\n2) Search for the latest `linux-debug-weekly` job\n3) Enter the job and click on Artifacts->Browse\n4) Download the AppImage\n\n##### Linux build with ASAN in Qt and Krita\n\n1) Go to Jobs section of Krita's CI: https://invent.kde.org/graphics/krita/-/jobs\n2) Search for the latest `linux-asan-weekly` job\n3) Enter the job and click on Artifacts->Browse\n4) Download the AppImage\n5) Set up environment variable for ASAN:\n    ```bash\n        export ASAN_OPTIONS=new_delete_type_mismatch=0:detect_leaks=0\n    ```\n6) Run the AppImage in the modified environment\n\n##### Windows build with ASAN in Qt and Krita\n\n1) Go to Jobs section of Krita's CI: https://invent.kde.org/graphics/krita/-/jobs\n2) Search for the latest `windows-asan-weekly` job\n3) Enter the job and click on Artifacts->Browse\n4) Download the .zip file\n5) Open terminal\n6) Set up environment variable for ASAN:\n    ```\n        set ASAN_OPTIONS=new_delete_type_mismatch=0:detect_leaks=0\n    ```\n7) Change working directory to `c:\\path\\where\\you\\downloaded\\krita-5.3.0-prealpha-git12345\\bin`.\n   That is important, otherwise ASAN will not be able to locate llvm-symbolizer.exe and the\n   backtraces generated by ASAN will not contain proper symbols.\n    ```\n        cd c:\\path\\where\\you\\downloaded\\krita-5.3.0-prealpha-git12345\\bin\n    ```\n8) Run krita\n    ```\n        krita.com\n    ```\n\n### License\n\nKrita as a whole is licensed under the GNU Public License, Version 3. Individual files may have a different, but compatible license.\n"
        },
        {
          "name": "README.packagers.md",
          "type": "blob",
          "size": 8.17578125,
          "content": "Notes on packaging Krita with G’MIC\n==================================\n\nKrita 3 and later are compatible with G’MIC, an open-source digital\nimage processing framework. This support is provided by G’MIC-Qt, a\nQt-based frontend for G’MIC. Since its inception, G’MIC-Qt was shipped\nas a standalone, externally built executable that is an optional,\nruntime dependency of Krita.\n\nKrita 5 changes the way G’MIC-Qt is consumed. In order to support CentOS\nand macOS, G’MIC-Qt has been converted into a dynamically loadable\nlibrary that is a dependent of Krita.\n\nThis file reviews these changes, and how to package Krita accordingly.\n\nRationale\n---------\n\nWe have chosen to ship G’MIC-Qt as a library because of two longstanding\nbugs.\n\nThe Krita host for G’MIC-Qt relies on `QSharedMemory`, i.e. a shared\nmemory segment, on wich a pipe is instantiated to pass messages to and\nfrom the host app. Firstly, this approach made opening two simultaneous\nG’MIC-Qt instances (each paired to its own Krita instance) impossible\n[^1]. Secondly, it also forbade using G’MIC-Qt with Krita on CentOS, as\nwell as macOS, because the former doesn’t support `QSharedMemory` [^2],\nand the latter has a meager 4KB as the maximum shared segment size.\nWhile there’s no workaround (to our knowledge) in CentOS, the only\nworkaround for macOS is to manipulate the maximum segment size via\n`sysctl` [^3], which was already difficult pre-Mojave [^4] and now, due\nto the significant security measures of recent macOS versions, is\nnothing short of a sysadmin task [^5].\n\nThere were two approaches. One was to move to a `mmap`-d file, which is\nunpredictable to sync due to each canvas’s differing space requirements.\nThe easiest, and the one we chose, was to move to a tighter coupled\nmemory model– a dynamically loadable plugin, as shown in my proposal PR\n[^6]. This was rejected by the G’MIC developers because of the\npossibility of crashing the host app due to a G’MIC internal bug\n[^7][^8]. This decision was later enacted as part of G’MIC contributing\npolicies [^9].\n\nHow did you fix it?\n-------------------\n\nDue to the above, the only path forward was to fork G’MIC, which we did\nin Krita MR !581 [^10].\n\nFrom a source code point of view, our fork is based on top of the latest\nversion’s tarball. Each tarball’s contents are committed to the `main`\nbranch of the `amyspark/gmic` GitHub repository [^11]. For every covered\nrelease, there is a branch that in turn overlays our own plugin\nimplementation, along with additional fixes that ensure that G’MIC-Qt\ndoesn’t attempt to overwrite the internal state of the host application;\nnamely, `QCoreApplication` settings, widget styles, and the installed\ntranslators.\n\nFrom a technical point of view, this library interfaces with Krita\nthrough a new, purpose specific library, `kisqmicinterface`. This\nlibrary contains nothing more than the previous iteration of the\ncommunications system, but now exported through namesake APIs [^12].\n\nIn short, we have reversed the dependency flow; while in Krita v4 and\nearlier G’MIC-Qt was a runtime dependency, in v5, it’s G’MIC-Qt that\ndepends on Krita as a build *and* runtime dependency.\n\nGetting the source code\n-----------------------\n\nThe patched version’s tarballs are GPG signed and available at the\nReleases section of the GitHub repository [^13]. Alternatively, the\ntarballs (though not the signatures) are also mirrored at our\ndependencies stash at files.kde.org [^14]. The tarballs are signed with\nthe GPG key which is available at my GitHub profile. Its fingerprint is\n`4894424D2412FEE5176732A3FC00108CFD9DBF1E`.\n\nBuilding Krita’s G’MIC-Qt library\n---------------------------------\n\nAfter building Krita with your standard process, the CMake install\nprocess should have put `kisqmicinterface.so` in your `lib` folder:\n\n    [2022-01-09T16:21:32.589Z] -- Installing: /home/appimage/appimage-workspace/krita.appdir/usr/lib/x86_64-linux-gnu/libkritaqmicinterface.so.18.0.0\n    [2022-01-09T16:21:32.589Z] -- Installing: /home/appimage/appimage-workspace/krita.appdir/usr/lib/x86_64-linux-gnu/libkritaqmicinterface.so.18\n    [2022-01-09T16:21:32.589Z] -- Set runtime path of \"/home/appimage/appimage-workspace/krita.appdir/usr/lib/x86_64-linux-gnu/libkritaqmicinterface.so.18.0.0\" to \"/home/appimage/appimage-workspace/krita.appdir/usr/lib/x86_64-linux-gnu:/home/appimage/appimage-workspace/deps/usr/lib:/home/appimage/appimage-workspace/deps/usr/lib/x86_64-linux-gnu\"\n    [2022-01-09T16:21:32.589Z] -- Installing: /home/appimage/appimage-workspace/krita.appdir/usr/lib/x86_64-linux-gnu/libkritaqmicinterface.so\n\nIt should also install these headers, as illustrated below:\n\n-   `kis_qmic_plugin_interface.h` exports a G’MIC-alike `launch` entry\n    point that the plugin will implement\n-   `kis_qmic_interface.h` implements the G’MIC request-response APIs\n-   `kritaqmicinterface_export.h` is the CMake auto-generated export\n    decoration header\n\n<!-- -->\n\n    [2022-01-09T16:21:32.589Z] -- Installing: /home/appimage/appimage-workspace/krita.appdir/usr/include/kis_qmic_interface.h\n    [2022-01-09T16:21:32.589Z] -- Installing: /home/appimage/appimage-workspace/krita.appdir/usr/include/kis_qmic_plugin_interface.h\n    [2022-01-09T16:21:32.589Z] -- Installing: /home/appimage/appimage-workspace/krita.appdir/usr/include/kritaqmicinterface_export.h\n\nThe three headers, along with the `libkritaqmicinterface.a` archive\nlibrary (if building for Windows under MinGW), comprise a `krita-gmic-dev`\npackage that’ll be a build dependency of the new G’MIC-Qt plugin.\nPlease note that `libkritaqmicinterface.so` is consumed\nby Krita and MUST NOT be placed inside this dev package.\n\nNow, download the G’MIC-Qt tarball from one of the sources listed\npreviously, and unpack it to an isolated directory. Then, you can build\nit with these lines (adjust them as described):\n\n    mkdir build\n    cmake -S ./gmic-$<the tarball's G'MIC version>-patched/gmic-qt \\\n          -B ./build \\\n          -DCMAKE_PREFIX_PATH=$<installation prefix of krita-gmic-dev> \\\n          -DCMAKE_INSTALL_PREFIX=$<installation prefix of krita itself> \\ \n          -DENABLE_SYSTEM_GMIC=$<false if you don't want to use your system's G'MIC> \\\n          -DGMIC_QT_HOST=krita-plugin\n    cmake --build . --config $<your desired build type> --target install\n\nThe changes from a standard G’MIC build are:\n\n-   the new `GMIC_QT_HOST` value, `krita-plugin`\n-   the requirement for the `krita-gmic-dev` package to be available in\n    `CMAKE_PREFIX_PATH`\n\nThis process is illustrated in any of our official build scripts for\nWindows [^15] and for macOS/Linux [^16]. You can also check the\n`3rdparty_plugins` section of our source tree [^17] to see what other\nhardening we apply to the build.\n\n------------------------------------------------------------------------\n\n[^1]: Bug \\#44 on c-koi/gmic-qt: “CentOS7: Krita 4.0.4 + gmic\\_krita\\_qt\n    2.3.0/2.2.3 - QSharedMemory::attach”.\n    <https://github.com/c-koi/gmic-qt/issues/44>\n\n[^2]: Bug 424514 on krita: “Guaranteed crash when opening 2 G’MIC-qt”.\n    <https://bugs.kde.org/show_bug.cgi?id=424514>\n\n[^3]: <https://www.ssec.wisc.edu/mcidas/doc/users_guide/2017.1/SharedMemory.html>\n\n[^4]: e.g. <https://stackoverflow.com/questions/2017004/setting-shmmax-etc-values-on-mac-os-x-10-6-for-postgresql>\n\n[^5]: See <https://developer.apple.com/forums/thread/669625> for an\n    approach applicable after `com.apple.rootless` was fully enforced.\n\n[^6]: <https://github.com/c-koi/gmic-qt/pull/102>\n\n[^7]: <https://github.com/c-koi/gmic-qt/pull/102>\n\n[^8]: Note that this was already possible, simply by crashing G’MIC the\n    host app would deadlock, waiting forever for a response.\n\n[^9]: <https://github.com/c-koi/gmic-qt/blob/master/NEW_HOST_HOWTO.md>\n\n[^10]: <https://invent.kde.org/graphics/krita/-/merge_requests/581>\n\n[^11]: <https://github.com/amyspark/gmic>\n\n[^12]: An older version of what’s\n    <https://github.com/c-koi/gmic-qt/blob/master/src/Host/GmicQtHost.h>\n    nowadays.\n\n[^13]: <https://github.com/amyspark/gmic/releases>\n\n[^14]: <https://files.kde.org/krita/build/dependencies/>\n\n[^15]: <https://invent.kde.org/graphics/krita/-/tree/master/build-tools/windows>\n\n[^16]: <https://invent.kde.org/graphics/krita/-/blob/master/packaging>\n\n[^17]: <https://invent.kde.org/graphics/krita/-/tree/master/3rdparty_plugins>\n"
        },
        {
          "name": "action_i18n.pl",
          "type": "blob",
          "size": 15.0732421875,
          "content": "#! /usr/bin/env perl\n#\n# SPDX-FileCopyrightText: 2004 Richard Evans <rich@ridas.com>\n#\n# SPDX-License-Identifier: GPL-3.0-or-later\n#\n\n\nsub usage\n{\n  warn <<\"EOF\";\n\nextractrc [flags] filenames\n\nThis script extracts messages from designer (.ui) and XMLGUI (.rc) files and\nwrites on standard output (usually redirected to rc.cpp) the equivalent\ni18n() calls so that xgettext can parse them.\n\n--tag=name        : Also extract the tag name(s). Repeat the flag to specify\n                    multiple names: --tag=tag_one --tag=tag_two\n\n--tag-group=group : Use a group of tags - uses 'default' if omitted.\n                    Valid groups are: @{[TAG_GROUPS()]}\n\n--context=name    : Give i18n calls a context name: i18nc(\"name\", ...)\n--lines           : Include source line numbers in comments (deprecated, it is switched on by default now)\n--cstart=chars    : Start of to-EOL style comments in output, defaults to //\n--language=lang   : Create i18n calls appropriate for KDE bindings\n                    in the given language. Currently known languages:\n                    C++ (default), Python\n--ignore-no-input : Do not warn if there were no filenames specified\n--help|?          : Display this summary\n--no-unescape-xml : Don't do xml unescaping\n\nEOF\n\n  exit;\n}\n\n###########################################################################################\n\nuse strict;\nuse warnings;\nuse Getopt::Long;\nuse Data::Dumper; # Provides debugging command: print Dumper(\\%hash);\n\nuse constant TAG_GROUP =>\n{\n  krita   => \"[tT][eE][xX][tT]|title|string|whatsThis|toolTip|iconText\",\n  none    => \"\",\n};\n\nuse constant TAG_GROUPS => join \", \", map \"'$_'\", sort keys %{&TAG_GROUP};\n\n# Specification to extract nice element-context for strings.\nuse constant CONTEXT_SPEC =>\n{\n  # Data structure: extension => {tag => [ctxlevel, [attribute, ...]], ...}\n  # Order of attributes determines their order in the extracted comment.\n  \"ui\" => {\n    \"widget\" => [10, [\"class\", \"name\"]],\n    \"item\" => [15, []],\n    \"property\" => [20, [\"name\"]],\n    \"attribute\" => [20, [\"name\"]],\n  },\n  \"rc\" => {\n    \"Menu\" => [10, [\"name\"]],\n    \"ToolBar\" => [10, [\"name\"]],\n  },\n  \"kcfg\" => {\n    \"group\" => [10, [\"name\"]],\n    \"entry\" => [20, [\"name\"]],\n    \"whatsthis\" => [30, []],\n    \"tooltip\" => [30, []],\n    \"label\" => [30, []],\n  },\n  \"action\" => {\n      \"ActionCollection\" => [10, [\"name\"]],\n      \"Actions\" => [20, [\"category\"]],\n      \"Action\" => [30, [\"name\"]],\n  }\n};\n\n# Specification to exclude strings by trailing section of element-context.\nuse constant CONTEXT_EXCLUDE =>\n[\n    # Data structure: [[tag, attribute, attrvalue], [...]]\n    # Empty (\"\") attribute means all elements with given tag,\n    # empty attrvalue means element with given tag and attribute of any value.\n    [[\"widget\", \"class\", \"KFontComboBox\"], [\"item\", \"\", \"\"], [\"property\", \"\", \"\"]],\n    [[\"widget\", \"class\", \"KPushButton\"], [\"attribute\", \"name\", \"buttonGroup\"]],\n    [[\"widget\", \"class\", \"QRadioButton\"], [\"attribute\", \"name\", \"buttonGroup\"]],\n    [[\"widget\", \"class\", \"QToolButton\"], [\"attribute\", \"name\", \"buttonGroup\"]],\n    [[\"widget\", \"class\", \"QCheckBox\"], [\"attribute\", \"name\", \"buttonGroup\"]],\n    [[\"widget\", \"class\", \"QPushButton\"], [\"attribute\", \"name\", \"buttonGroup\"]],\n    [[\"widget\", \"class\", \"KTimeZoneWidget\"], [\"property\", \"name\", \"text\"]],\n];\n\n# The parts between the tags of the extensions will be copied verbatim\n# Same data structure as in CONTEXT_EXCLUDE, but per extension.\nmy %EXTENSION_VERBATIM_TAGS = (\n       \"kcfg\" => [[\"code\", \"\", \"\"], [\"default\", \"code\", \"true\"],\n                  [\"min\", \"code\", \"true\"], [\"max\", \"code\", \"true\"]],\n     );\n\n# Add attribute lists as hashes, for membership checks.\nfor my $ext ( keys %{&CONTEXT_SPEC} ) {\n  for my $tag ( keys %{CONTEXT_SPEC->{$ext}} ) {\n    my $arr = CONTEXT_SPEC->{$ext}{$tag}[1];\n    CONTEXT_SPEC->{$ext}{$tag}[2] = {map {$_ => 1} @{$arr}};\n  }\n}\n\n###########################################################################################\n# Add options here as necessary - perldoc Getopt::Long for details on GetOptions\n\nGetOptions ( \"tag=s\"       => \\my @opt_extra_tags,\n             \"tag-group=s\" => \\my $opt_tag_group,\n             \"context=s\"   => \\my $opt_context,       # I18N context\n             \"lines\"       => \\my $opt_lines,\n             \"cstart=s\"    => \\my $opt_cstart,\n             \"language=s\"  => \\my $opt_language,\n             \"ignore-no-input\" => \\my $opt_ignore_no_input,\n             \"no-unescape-xml\" => \\my $opt_no_unescape_xml,\n             \"help|?\"      => \\&usage );\n\nunless( @ARGV )\n{\n  warn \"No filename specified\" unless $opt_ignore_no_input;\n  exit;\n}\n\n$opt_tag_group ||= \"krita\";\n\ndie \"Unknown tag group: '$opt_tag_group', should be one of \" . TAG_GROUPS\n    unless exists TAG_GROUP->{$opt_tag_group};\n\nmy $tags = TAG_GROUP->{$opt_tag_group};\nmy $extra_tags  = join \"\", map \"|\" . quotemeta, @opt_extra_tags;\nmy $text_string = qr/($tags$extra_tags)( [^>]*)?>/;    # Precompile regexp\nmy $cstart = $opt_cstart; # no default, selected by language if not given\nmy $language = $opt_language || \"C++\";\nmy $context_known_exts = join \"|\", keys %{&CONTEXT_SPEC};\n\n###########################################################################################\n\n# Unescape basic XML entities.\nsub unescape_xml ($) {\n    my $text = shift;\n\n    if (not $opt_no_unescape_xml) {\n        $text =~ s/&lt;/</g;\n        $text =~ s/&gt;/>/g;\n        $text =~ s/&amp;/&/g;\n        $text =~ s/&quot;/\"/g;\n    }\n\n    return $text;\n}\n\n# Convert uic to C escaping.\nsub escape_uic_to_c ($) {\n    my $text = shift;\n\n    $text = unescape_xml($text);\n\n    $text =~ s/\\\\/\\\\\\\\/g; # escape \\\n    $text =~ s/\\\"/\\\\\\\"/g; # escape \"\n    $text =~ s/\\r//g; # remove CR (Carriage Return)\n    $text =~ s/\\n/\\\\n\\\"\\n\\\"/g; # escape LF (Line Feed). uic also change the code line at a LF, we do not do that.\n\n    return $text;\n}\n\n###########################################################################################\n\nsub dummy_call_infix {\n    my ($cstart, $stend, $ctxt, $text, @cmnts) = @_;\n    for my $cmnt (@cmnts) {\n        print qq|$cstart $cmnt\\n|;\n    }\n    if (defined $text) {\n        $text = escape_uic_to_c($text);\n        if (defined $ctxt) {\n            $ctxt = escape_uic_to_c($ctxt);\n            print qq|i18nc(\"$ctxt\", \"$text\")$stend\\n|;\n        } else {\n            print qq|i18n(\"$text\")$stend\\n|;\n        }\n    }\n}\n\nmy %dummy_calls = (\n    \"C++\" => sub {\n        dummy_call_infix($cstart || \"//\", \";\", @_);\n    },\n    \"Python\" => sub {\n        dummy_call_infix($cstart || \"#\", \"\", @_);\n    },\n);\n\ndie \"unknown language '$language'\" if not defined $dummy_calls{$language};\nmy $dummy_call = $dummy_calls{$language};\n\n# Program start proper - outer loop runs once for each file in the argument list.\nfor my $file_name ( @ARGV )\n{\n  my $fh;\n\n  unless ( open $fh, \"<\", $file_name )\n  {\n    # warn \"Failed to open: '$file_name': $!\";\n    next;\n  }\n\n  # Ready element-context extraction.\n  my $context_ext;\n  my $context_string;  # Regexp used to validate context\n  if ( $file_name =~ /\\.($context_known_exts)(\\.(in|cmake))?$/ ) {\n    $context_ext = $1;\n    my $context_tag_gr = join \"|\", keys %{CONTEXT_SPEC->{$context_ext}};\n    $context_string = qr/($context_tag_gr)( [^>]*)?>/; # precompile regexp\n  }\n\n  my $string          = \"\";\n  my $origstring      = \"\";\n  my $in_text         = 0;   # Are we currently inside a block of raw text?\n  my $start_line_no   = 0;\n  my $in_skipped_prop = 0;   # Are we currently inside XML property that shouldn't be translated?\n  my $tag = \"\";\n  my $attr = \"\";\n  my $context = \"\";\n  my $notr = \"\";\n\n  # Element-context data: [[level, tag, [[attribute, value], ...]], ...]\n  # such that subarrays are ordered increasing by level.\n  my @context = ();\n\n  # All comments to pending dummy call.\n  my @comments = ();\n\n  # Begin looping through the file\n  while ( <$fh> )\n  {\n     # If your Perl is a bit rusty: $. is the current line number\n     # Also, =~ and !~ are pattern-matching operators. :)\n     if ( $. == 1 and $_ !~ /^(?:<!DOCTYPE|<\\?xml|<!--|<ui version=)/ )\n     {\n       print STDERR \"Warning: $file_name does not have a recognised first line and texts won't be extracted\\n\";\n       last;\n     }\n\n     chomp;\n\n     $string .= \"\\n\" . $_;\n     $origstring = $string;\n\n     # 'database', 'associations', 'populationText' and 'styleSheet' properties contain strings that shouldn't be translated\n     if ( $in_skipped_prop == 0 and $string =~ /<property name=\\\"(?:database|associations|populationText|styleSheet)\\\"/ )\n     {\n       $in_skipped_prop = 1;\n     }\n     elsif ( $in_skipped_prop and $string =~ /<\\/property/ )\n     {\n       $string          = \"\";\n       $in_skipped_prop = 0;\n     }\n\n     $context = $opt_context unless $in_text;\n     $notr = \"\" unless $in_text;\n\n     # print \"context = \" . $opt_context . \"\\n\";\n\n     unless ( $in_skipped_prop or $in_text )\n     {\n       # Check if this line contains context-worthy element.\n       if (    $context_ext\n           and ( ($tag, $attr) = $string =~ /<$context_string/ ) # no /o here\n           and exists CONTEXT_SPEC->{$context_ext}{$tag} )\n       {\n         my @atts;\n         for my $context_att ( @{CONTEXT_SPEC->{$context_ext}{$tag}[1]} )\n         {\n           if ( $attr and $attr =~ /\\b$context_att\\s*=\\s*([\"'])([^\"']*?)\\1/ )\n           {\n             my $aval = $2;\n             push @atts, [$context_att, $aval];\n           }\n         }\n         # Kill all tags in element-context with level higher or equal to this,\n         # and add it to the end.\n         my $clevel = CONTEXT_SPEC->{$context_ext}{$tag}[0];\n         for ( my $i = 0; $i < @context; ++$i )\n         {\n           if ( $clevel <= $context[$i][0] )\n           {\n             @context = @context[0 .. ($i - 1)];\n             last;\n           }\n         }\n         push @context, [$clevel, $tag, [@atts]];\n       }\n\n       if ( ($tag, $attr) = $string =~ /<$text_string/o )\n       {\n         # Only treat \"context\" as the gettext i18n context, not \"comment\".\n         my ($attr_context) = $attr =~ /\\bcontext=\\\"([^\\\"]*)\\\"/ if $attr;\n         $context = $attr_context if $attr_context;\n         my ($attr_extracomment) = $attr =~ /\\bextracomment=\\\"([^\\\"]*)\\\"/ if $attr;\n         push @comments, \"i18n: $attr_extracomment\" if $attr_extracomment;\n\n         my ($attr_notr) = $attr =~ /\\bnotr=\\\"([^\\\"]*)\\\"/ if $attr;\n         $notr = $attr_notr if $attr_notr;\n\n         my $nongreedystring = $string;\n         $string        =~ s/^.*<$text_string//so;\n         $nongreedystring  =~ s/^.*?<$text_string//so;\n         if ($string cmp $nongreedystring)\n         {\n            print STDERR \"Warning: Line $origstring in file $file_name has more than one tag to extract on the same line, that is not supported by extractrc\\n\";\n         }\n         if ( not $attr or $attr !~ /\\/ *$/ )\n         {\n           $in_text       =  1;\n           $start_line_no =  $.;\n         }\n       }\n       else\n       {\n         @comments = ();\n         $string = \"\";\n       }\n     }\n\n     next unless $in_text;\n     next unless $string =~ /<\\/$text_string/o;\n\n     my $text = $string;\n     $text =~ s/<\\/$text_string.*$//o;\n\n     if ( $text cmp \"\" )\n     {\n       # See if the string should be excluded by trailing element-context.\n       my $exclude_by_context = 0;\n       my @rev_context = reverse @context;\n       for my $context_tail (@{&CONTEXT_EXCLUDE})\n       {\n         my @rev_context_tail = reverse @{$context_tail};\n         my $i = 0;\n         $exclude_by_context = (@rev_context > 0 and @rev_context_tail > 0);\n         while ($i < @rev_context and $i < @rev_context_tail)\n         {\n           my ($tag, $attr, $aval) = @{$rev_context_tail[$i]};\n           $exclude_by_context = (not $tag or ($tag eq $rev_context[$i][1]));\n           if ($exclude_by_context and $attr)\n           {\n             $exclude_by_context = 0;\n             for my $context_attr_aval (@{$rev_context[$i][2]})\n             {\n               if ($attr eq $context_attr_aval->[0])\n               {\n                 $exclude_by_context = $aval ? $aval eq $context_attr_aval->[1] : 1;\n                 last;\n               }\n             }\n           }\n           last if not $exclude_by_context;\n           ++$i;\n         }\n         last if $exclude_by_context;\n       }\n\n       if (($context and $context eq \"KDE::DoNotExtract\") or ($notr eq \"true\"))\n       {\n         push @comments, \"Manually excluded message at $file_name line $.\";\n       }\n       elsif ( $exclude_by_context )\n       {\n         push @comments, \"Automatically excluded message at $file_name line $.\";\n       }\n       else\n       {\n         # Write everything to file\n         (my $clean_file_name = $file_name) =~ s/^\\.\\///;\n         push @comments, \"i18n: file: $clean_file_name:$.\";\n         if ( @context ) {\n           # Format element-context.\n           my @tag_gr;\n           for my $tgr (reverse @context)\n           {\n             my @attr_gr;\n             for my $agr ( @{$tgr->[2]} )\n             {\n               #push @attr_gr, \"$agr->[0]=$agr->[1]\";\n               push @attr_gr, \"$agr->[1]\"; # no real need for attribute name\n             }\n             my $attr = join(\", \", @attr_gr);\n             push @tag_gr, \"$tgr->[1] ($attr)\" if $attr;\n             push @tag_gr, \"$tgr->[1]\" if not $attr;\n           }\n           my $context_str = join \", \", @tag_gr;\n           push @comments, \"i18n: context: $tag @ $context_str\";\n         }\n         push @comments, \"xgettext: no-c-format\" if $text =~ /%/o;\n         $dummy_call->($context, $text, @comments);\n         @comments = ();\n       }\n     }\n     else\n     {\n       push @comments, \"Skipped empty message at $file_name line $.\";\n     }\n\n     $string  =~ s/^.*<\\/$text_string//o;\n     $in_text =  0;\n\n     # Text can be multiline in .ui files (possibly), but we warn about it in XMLGUI .rc files.\n\n     warn \"there is <text> floating in: '$file_name'\" if $. != $start_line_no and $file_name =~ /\\.rc$/i;\n  }\n\n  close $fh or warn \"Failed to close: '$file_name': $!\";\n\n  die \"parsing error in $file_name\" if $in_text;\n\n  if ($context_ext && exists $EXTENSION_VERBATIM_TAGS{$context_ext})\n  {\n    unless ( open $fh, \"<\", $file_name )\n    {\n      # warn \"Failed to open: '$file_name': $!\";\n      next;\n    }\n\n    while ( <$fh> )\n    {\n      chomp;\n      $string .= \"\\n\" . $_;\n\n      for my $elspec (@{ $EXTENSION_VERBATIM_TAGS{$context_ext} })\n      {\n        my ($tag, $attr, $aval) = @{$elspec};\n        my $rx;\n        if ($attr and $aval) {\n            $rx = qr/<$tag[^<]*$attr=[\"']$aval[\"'][^<]*>(.*)<\\/$tag>/s\n        } elsif ($attr) {\n            $rx = qr/<$tag[^<]*$attr=[^<]*>(.*)<\\/$tag>/s\n        } else {\n            $rx = qr/<$tag>(.*)<\\/$tag>/s\n        }\n        if ($string =~ $rx)\n        {\n          # Add comment before any line that has an i18n substring in it.\n          my @matched = split /\\n/, $1;\n          my $mlno = $.;\n          (my $norm_fname = $file_name) =~ s/^\\.\\///;\n          for my $mline (@matched) {\n            # Assume verbatim code is in language given by --language.\n            # Therefore format only comment, and write code line as-is.\n            if ($mline =~ /i18n/) {\n              $dummy_call->(undef, undef, (\"i18n: file: $norm_fname:$mlno\"));\n            }\n            $mline = unescape_xml($mline);\n            print \"$mline\\n\";\n            ++$mlno;\n          }\n          $string = \"\";\n        }\n      }\n    }\n\n    close $fh or warn \"Failed to close: '$file_name': $!\";\n  }\n}\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "config-android-stdio-forwarding.h.cmake",
          "type": "blob",
          "size": 0.0458984375,
          "content": "#cmakedefine ANDROID_ENABLE_STDIO_FORWARDING 1\n"
        },
        {
          "name": "config-gsl.h.cmake",
          "type": "blob",
          "size": 0.138671875,
          "content": "/* config-gsl.h.  Generated by cmake from config-gsl.h.cmake */\n\n/* Define if you have GSL, GNU Scientific Library */\n#cmakedefine HAVE_GSL 1\n"
        },
        {
          "name": "config-hash-table-implementation.h.cmake",
          "type": "blob",
          "size": 0.1455078125,
          "content": "/* config-hash-table-implementation.h.  Generated by cmake from config-hash-table-implementation.h.cmake */\n\n#cmakedefine USE_LOCK_FREE_HASH_TABLE 1\n"
        },
        {
          "name": "config-hdr.h.cmake",
          "type": "blob",
          "size": 0.1533203125,
          "content": "/* config-hdr.h.  Generated by cmake from config-hdr.h.cmake */\n\n/* Define if you want to have HDR surface selection capabilities */\n#cmakedefine HAVE_HDR 1\n"
        },
        {
          "name": "config-high-dpi-scale-factor-rounding-policy.h.in",
          "type": "blob",
          "size": 0.23046875,
          "content": "/* config-hdr.h.  Generated by cmake from config-high-dpi-scale-factor-rounding-policy.h.in */\n\n/* Define if QGuiApplication::setHighDpiScaleFactorRoundingPolicy is available */\n#cmakedefine HAVE_HIGH_DPI_SCALE_FACTOR_ROUNDING_POLICY 1\n"
        },
        {
          "name": "config-jpeg.h.cmake",
          "type": "blob",
          "size": 0.1416015625,
          "content": "/* config-jpeg.h.  Generated by cmake from config-jpeg.h.cmake */\n\n/* Define if libjpeg has the turbo-jpeg API */\n#cmakedefine HAVE_JPEG_TURBO 1\n"
        },
        {
          "name": "config-limit-long-tests.h.cmake",
          "type": "blob",
          "size": 0.185546875,
          "content": "/* config-limit-long-tests.h.  Generated by cmake from config-limit-long-tests.h.cmake */\n\n/* Define if you want long tests to run in a limited quick mode */\n#cmakedefine LIMIT_LONG_TESTS 1\n"
        },
        {
          "name": "config-mlt.h.cmake",
          "type": "blob",
          "size": 0.0888671875,
          "content": "/* config-mlt.h -- Generated by cmake from config-mlt.h.cmake */ \n\n#cmakedefine HAVE_MLT 1\n"
        },
        {
          "name": "config-mypaint.h.cmake",
          "type": "blob",
          "size": 0.13671875,
          "content": "/* config-mypaint.h.  Generated by cmake from config-mypaint.h.cmake */\n\n/* Define if you have libmypaint */\n#cmakedefine HAVE_LIBMYPAINT 1\n"
        },
        {
          "name": "config-ocio.h.cmake",
          "type": "blob",
          "size": 0.2177734375,
          "content": "/* config-ocio.h.  Generated by cmake from config-ocio.h.cmake */\n\n/* Define if you have ocio, the OpenColorIO Library */\n#cmakedefine HAVE_OCIO 1\n\n/* Define if OpenColorIO is v2.0 and higher */\n#cmakedefine HAVE_OCIO_V2 1\n"
        },
        {
          "name": "config-powf.h.cmake",
          "type": "blob",
          "size": 0.1201171875,
          "content": "/* config-powf.h.  Generated by cmake from config-powf.h.cmake */\n\n/* Define if you have powf */\n#cmakedefine HAVE_POWF 1\n\n"
        },
        {
          "name": "config-qmdiarea-always-show-subwindow-title.h.cmake",
          "type": "blob",
          "size": 0.2666015625,
          "content": "/* config-qmdiarea-always-show-subwindow-title.h.  Generated by cmake from config-qmdiarea-always-show-subwindow-title.h.cmake */\n\n/* Define if you want to have QMdiArea::AlwaysShowSubwindowNameInTitleBar support */\n#cmakedefine HAVE_QMDIAREA_ALWAYS_SHOW_SUBWINDOW_TITLE 1\n"
        },
        {
          "name": "config-safe-asserts.h.cmake",
          "type": "blob",
          "size": 0.15234375,
          "content": "/* config-safe-asserts.h.  Generated by cmake from config-safe-asserts.h.cmake */\n\n#cmakedefine HIDE_SAFE_ASSERTS 1\n#cmakedefine CRASH_ON_SAFE_ASSERTS 1\n\n\n\n"
        },
        {
          "name": "config-seexpr.h.cmake",
          "type": "blob",
          "size": 0.1279296875,
          "content": "/* config-seexpr.h.  Generated by cmake from config-seexpr.h.cmake */\n\n/* Define if you have KSeExpr */\n#cmakedefine HAVE_SEEXPR 1\n"
        },
        {
          "name": "config-set-has-border-in-full-screen-default.h.in",
          "type": "blob",
          "size": 0.234375,
          "content": "/* config-hdr.h.  Generated by cmake from config-set-has-border-in-full-screen-default.h.in */\n\n/* Define if QWindowsWindowFunctions::setHasBorderInFullScreenDefault is available */\n#cmakedefine HAVE_SET_HAS_BORDER_IN_FULL_SCREEN_DEFAULT 1\n"
        },
        {
          "name": "config-tiff.h.cmake",
          "type": "blob",
          "size": 0.2998046875,
          "content": "/* config-tiff.h.  Generated by cmake from config-tiff.h.cmake */\n\n/* Define if libtiff defines TIFFTAG_IMAGESOURCEDATA and TIFFTAG_PHOTOSHOP */\n#cmakedefine TIFF_HAS_PSD_TAGS 1\n\n/* Define if libtiff accepts writing to TIFFTAG_IMAGESOURCEDATA and TIFFTAG_PHOTOSHOP */\n#cmakedefine TIFF_CAN_WRITE_PSD_TAGS 1\n"
        },
        {
          "name": "config-updaters.h.cmake",
          "type": "blob",
          "size": 0.1064453125,
          "content": "/* config-updaters.h.  Generated by cmake from config-updaters.h.cmake */\n\n#cmakedefine ENABLE_UPDATERS 1\n\n\n\n"
        },
        {
          "name": "config-xsimd.h.cmake",
          "type": "blob",
          "size": 0.123046875,
          "content": "/* config-xsimd.h.  Generated by cmake from config-xsimd.h.cmake */\n\n/* Define if you have xsimd */\n#cmakedefine HAVE_XSIMD 1\n"
        },
        {
          "name": "config_convolution.h.cmake",
          "type": "blob",
          "size": 0.0771484375,
          "content": "\n/* Defines if your system has the FFTW3 library */\n#cmakedefine HAVE_FFTW3 1\n\n"
        },
        {
          "name": "config_use_qt_tablet_windows.h.cmake",
          "type": "blob",
          "size": 0.0712890625,
          "content": "#cmakedefine USE_QT_TABLET_WINDOWS !\n#cmakedefine QT_HAS_WINTAB_SWITCH !\n"
        },
        {
          "name": "dev-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "extracti18n.pl",
          "type": "blob",
          "size": 9.2138671875,
          "content": "#!/usr/bin/perl -w\n\n# This file is part of Krita\n#\n#  SPDX-FileCopyrightText: 2005 Sven Langkamp <sven.langkamp@gmail.com>\n#\n#  SPDX-License-Identifier: GPL-2.0-or-later\n\n\nuse strict;\nuse warnings;\nuse Archive::Zip qw( :ERROR_CODES );\nuse Archive::Zip::MemberRead;\n\n\nsub printi18n($$$$) {\n  # function that prints the actual output\n  my ($name, $filename, $filename2, $linenum) = @_;\n  chomp($name); # chomp out the null bytes at the end if relevant\n  $name =~ s/\\0*//;\n  if ($name ne \"\")\n    {\n      if ($filename =~ /myb$/)\n      {\n        print \"// i18n: Display name of resource, see context: MyPaint brush [path-to-file]/[resource-filename]\\n\";\n      }\n      else\n      {\n        print \"// i18n: Display name of resource, see context: [path-to-resources]/[resource-type]/[resource-filename]\\n\";\n      }\n\n      if ($name =~ /^\\w\\)/)\n      {\n        print \"// i18n: 'a)', 'b)' etc. in resource names are used to keep resources in a specific order \";\n        print \"when Krita sorts them alphabetically. The order will be kept only using the original/untranslated names\\n\";\n      }\n      if ($name =~ /DITH\\b/)\n      {\n        print \"// i18n: DITH probably means 'dithering'\\n\";\n      }\n\n      if ($linenum > 0)\n      {\n        print \"// i18n: file: \".$filename.\":\".$linenum.\"\\n\";\n      }\n\n      print \"i18nc(\\\"\".$filename.\"\\\",\\\"\".$name.\"\\\");\\n\";\n    }\n}\n\nsub parseFromFilenameAuto($) {\n  # function that prettifies filenames without needing to define the extension\n  # because it figures out the extension on its own\n  my $name = $_[0];\n  my @extensions = split(/\\./, $name);\n  my $extension = $extensions[$#extensions];\n  return parseFromFilename($name, $extension);\n}\n\nsub parseFromFilename($$) {\n  # function that prettifies filenames\n  # it extracts the filename from the full path, cuts off the extension and replaces '_  with ' '\n  my $name = $_[0];\n  my $extension = $_[1];\n  chomp($name);\n  my @path = split(/\\//, $name);\n  $name = $path[$#path];\n  $name =~ s/_/ /g;\n  if( $extension ne \"\" ) {\n    $name =~ s/\\.${extension}$//g;\n  }\n  return $name;\n}\n\nsub readGeneric($$$$) {\n  # function that reads all the lines from either the proper perl file handle\n  # or from the special buffer made out of the contents of the file in the bundle\n  my ($fh, $zipSpecialBuffer, $bufferref, $bytesnum) = @_;\n\n  my $response = undef;\n  my $buffer = ${$bufferref};\n  if(defined $fh)\n  {\n    $response = read($fh, $buffer, $bytesnum);\n  }\n  elsif(defined $zipSpecialBuffer)\n  {\n    my $where = $zipSpecialBuffer->{\"pos\"};\n    $buffer = unpack(\"x$where a${bytesnum}\", $zipSpecialBuffer->{\"buffer\"});\n    $response = length($buffer);\n    $zipSpecialBuffer->{\"pos\"} = $zipSpecialBuffer->{\"pos\"} + $bytesnum;\n  }\n  ${$bufferref} = $buffer;\n  return $response;\n}\n\nsub readAllLinesGeneric($$) {\n  # function that reads all the lines from either the proper perl file handle\n  # or from the MemberRead from the Archive::Zip module file handle\n  my ($fh, $ziph) = @_;\n  my @response = undef;\n  if(defined $fh)\n  {\n    @response = <$fh>;\n  }\n  elsif(defined $ziph)\n  {\n    my $i = 0;\n    @response = ();\n    while (defined(my $line = $ziph->getline()))\n    {\n      push(@response, $line);\n      $i += 1;\n    }\n  }\n  return @response;\n}\n\n\nsub readGbrBytesWise($$) {\n  # function that extracts a name from a gbr file\n  # it's in the function to allow easier error checking\n  # (early returning)\n  my ($fh, $ziph) = @_;\n\n  my $success = 1;\n  my ($bytes, $size, $version);\n  $success = readGeneric($fh, $ziph, \\$bytes, 4) == 4;\n\n  return \"\" if not $success;\n\n  $size = unpack(\"N\", $bytes);\n  $success = readGeneric($fh, $ziph, \\$bytes, 4) == 4;\n\n  return \"\" if not $success;\n\n  $version = unpack(\"N\", $bytes);\n  if( $version == 1 )\n  {\n    $success = readGeneric($fh, $ziph, \\$bytes, 12) == 12;\n    return \"\" if not $success;\n\n    my $name;\n    $success = readGeneric($fh, $ziph, \\$name, $size - 21) == $size - 21;\n    return \"\" if not $success;\n\n    return $name;\n  }\n  else\n  {\n    $success = readGeneric($fh, $ziph, \\$bytes, 20) == 20;\n    return \"\" if not $success;\n\n    my $name;\n    $success = readGeneric($fh, $ziph, \\$name, $size - 29) == $size - 29;\n    return \"\" if not $success;\n\n    return $name;\n  }\n\n  return \"\";\n\n}\n\nsub readZipSpecialBuffer($)\n{\n  # this is a hack\n  # $ziph->read($buffer, $bytes) didn't work but ->getline() did\n  # this works for all binary files in the bundle that are supported at the moment\n  my ($ziph) = @_;\n  my $buffer = {};\n  $buffer->{\"pos\"} = 0;\n  my @array = readAllLinesGeneric(undef, $ziph);\n  $buffer->{\"buffer\"} = join(\"\\n\", @array);\n  return $buffer;\n}\n\n\n\n\nmy @filenames = glob(\"./krita/data/gradients/*.ggr\");\npush( @filenames, glob(\"./krita/data/palettes/*.gpl\"));\npush( @filenames, glob(\"./krita/data/brushes/*.gih\"));\npush( @filenames, glob(\"./krita/data/brushes/*.gbr\"));\npush( @filenames, glob(\"./krita/data/brushes/*.svg\"));\npush( @filenames, glob(\"./krita/data/patterns/*.pat\"));\npush( @filenames, glob(\"./krita/data/patterns/*.png\"));\npush( @filenames, glob(\"./krita/data/paintoppresets/*.kpp\"));\npush( @filenames, glob(\"./krita/data/workspaces/*.kws\"));\npush( @filenames, glob(\"./krita/data/windowlayouts/*.kwl\"));\npush( @filenames, glob(\"./krita/data/gamutmasks/*.kgm\"));\npush( @filenames, glob(\"./plugins/paintops/mypaint/brushes/*.myb\"));\npush( @filenames, glob(\"./krita/data/symbols/*.svg\"));\n\n\nmy %bundleForResource;\nmy %internalFilenameForResource;\n\n# get the filename from the bundle\nmy @bundlenames = glob(\"./krita/data/bundles/*.bundle\");\nforeach my $bundlename (@bundlenames)\n{\n  my $bundle = Archive::Zip->new();\n  unless ( $bundle->read( $bundlename ) == AZ_OK )\n  {\n    next;\n  }\n  my @memberNames = $bundle->memberNames();\n  foreach my $member (@memberNames)\n  {\n    unless ($member =~ /xml$/ or $member eq \"mimetype\" or $member eq \"preview.png\") {\n      my $newFilename = \"$bundlename:$member\";\n      push(@filenames, $newFilename);\n      $bundleForResource{$newFilename} = $bundle;\n      $internalFilenameForResource{$newFilename} = $member;\n    }\n  }\n}\n\n\n\nmy $isZip = 0;\n\nmy $i = 0;\n\nforeach my $filename (@filenames)\n{\n  $i = $i + 1;\n\n  my $fh = undef;\n  my $ziph = undef;\n\n  unless ( open($fh, '<'.$filename) )\n  {\n    $fh = undef;\n    unless ($filename =~ /\\.bundle/) {\n      next;\n    }\n    $ziph = Archive::Zip::MemberRead->new($bundleForResource{$filename}, $internalFilenameForResource{$filename});\n\n    unless (defined $ziph) {\n      next;\n    }\n    $isZip = 1;\n  }\n\n  if( $filename =~ /ggr/ || $filename =~ /gpl/ || $filename =~ /gih/ )\n  {\n    my @lines = readAllLinesGeneric($fh, $ziph);\n\n    if( $filename =~ /ggr/ || $filename =~ /gpl/ )\n    {\n      my @splitted = split(/: /, $lines[1]);\n      my $name = $splitted[1];\n      chomp($name);\n      $name =~ s/\\t$//; # Trim trailing \\t, fixes the name for \"swatche.gpl\"\n      printi18n($name, $filename, $filename, 2);\n    }\n    else\n    {\n      my $name = $lines[0];\n      chomp($name);\n      printi18n($name, $filename, $filename, 1);\n    }\n  }\n  elsif( $filename =~ /svg$/ )\n  {\n    my @lines = readAllLinesGeneric($fh, $ziph);\n    my $svg = join('', @lines);\n    my $name = \"\";\n    if( $svg =~ m:(<title.*?</title>):s )\n    {\n      my $titlesvg = $1;\n      if( $titlesvg =~ m:>(.*?)</title>:s ) #not perfect, but should usually do a good job, at least for existing libraries\n      {\n        $name = $1;\n        chomp($name);\n        $name =~ s/&amp;/&/; # 'Pepper & Carrot Speech Bubbles' needs it\n      }\n    }\n    if ($name eq \"\")\n    {\n      $name = parseFromFilenameAuto($filename);\n    }\n    printi18n($name, $filename, $filename, -1);\n  }\n  elsif( $filename =~ /kpp$/ || $filename =~ /kws$/ || $filename =~ /kwl$/ || $filename =~ /kgm$/ || $filename =~ /jpg$/ || $filename =~ /myb$/ || $filename =~ /png$/ || $filename =~ /kse$/)\n  {\n    # all of Krita's default brush presets and other resources with abovementioned extensions\n    # are named the same way the file is called\n    # so there is no need to parse the file itself to find the name inside of it\n    my $extension = split(/\\./, $filename);\n    my $name = parseFromFilenameAuto($filename);\n    printi18n($name, $filename, $filename, -1); # sadly, I'm not sure what the last number means exactly\n  }\n  elsif($filename =~ /gbr|pat/)\n  {\n    my $zipSpecialBuffer = undef;\n    if(defined($ziph)) {\n      $zipSpecialBuffer = readZipSpecialBuffer($ziph);\n    }\n\n    if( $filename =~ /gbr/ )\n    {\n\n      my $name = readGbrBytesWise($fh, $zipSpecialBuffer);\n      if($name eq \"\")\n      {\n        $name = parseFromFilenameAuto($filename);\n      }\n\n      printi18n($name, $filename, $filename, -1);\n\n    }\n    elsif( $filename =~ /pat$/ )\n    {\n      my $bytes;\n      my $name;\n      readGeneric($fh, $zipSpecialBuffer, \\$bytes, 4);\n      my $size = unpack(\"N\", $bytes);\n      readGeneric($fh, $zipSpecialBuffer, \\$bytes, 20);\n      readGeneric($fh, $zipSpecialBuffer, \\$name, $size - 25);\n      if( $name eq \"\" )\n      {\n        $name = parseFromFilenameAuto($filename);\n      }\n      printi18n($name, $filename, $filename, -1);\n    }\n  }\n\n  close($fh) if defined $fh;\n\n}\n\n\n# add \"memory\" resources that are defined in Krita's code (KoResourceServerProvider)\nprinti18n(\"0. Foreground to Background\", \"memory/gradients/Foreground to Background.svg\", \"memory/gradients/Foreground to Background.svg\", -1);\nprinti18n(\"1. Foreground to Transparent\", \"memory/gradients/Foreground to Transparent.svg\", \"memory/gradients/Foreground to Transparent.svg\", -1);\n\n\n\n\n\n"
        },
        {
          "name": "krita",
          "type": "tree",
          "content": null
        },
        {
          "name": "kundo2_aware_xgettext.sh",
          "type": "blob",
          "size": 4.6181640625,
          "content": "#\n#  SPDX-License-Identifier: GPL-3.0-or-later\n#\n# Helper function for extracting translatable messages from Krita source code.\n# Usage: kundo2_aware_xgettext <pot-filename-without-path> <source-files-list>\n# If there are no messages or the <source-files-list> is empty, the pot file is deleted.\n#\n# Example usage that creates $podir/myapp.pot file:\n#     kundo2_aware_xgettext myapp.pot `find . -name \\*.cpp -o -name \\*.h`\n#\nfunction kundo2_aware_xgettext() {\n    POTFILE=\"$podir/$1\"\n    shift\n    if test -n \"$*\"; then\n        # we rely on last line being a 'msgstr' signaling that strings has been extracted (a header is always present)\n        # normally it ends with 'msgstr \"\"' but if plural it can end with eg 'msgstr[1] \"\"'\n        kundo2_aware_xgettext_internal $* | tee \"${POTFILE}\" | tail -n1 | grep \"^msgstr\" > /dev/null \\\n            || rm -f \"${POTFILE}\" 2> /dev/null\n    fi\n}\n\n# How to unit test:\n#   export podir=.\n#   cp init-sample.pot sample.pot\n#   source krita_xgettext.sh\n#   add_ctxt_qtundo sample.pot\n#\n#   Then check that all messages in sample.pot have \"(qtundo-format)\" in msgctxt.\nfunction add_ctxt_qtundo() {\n    POT_PART_QUNDOFORMAT=\"$1\"\n    POT_PART_QUNDOFORMAT2=\"`mktemp $podir/_qundoformat2_XXXXXXXX.pot`\"\n\n    # Prepend \"(qtundo-format)\" to existing msgctxt properties of messages\n    sed -i -e 's/^msgctxt \"/msgctxt \"(qtundo-format) /' \"${POT_PART_QUNDOFORMAT}\"\n\n    # Add msgctxt \"(qtundo-format)\" to messages not having msgctxt yet\n    #\n    # lastLine != \"#, fuzzy\" is the check for the .pot header.\n    # If lastLine starts with '\"' the msgctxt has been split on several lines and is treated by sed above, so skip it\n    mv \"${POT_PART_QUNDOFORMAT}\" \"${POT_PART_QUNDOFORMAT2}\"\n    cat \"${POT_PART_QUNDOFORMAT2}\" | awk '\n        /^msgid \"/ {\n            if (lastLine !~ /^\"/ && lastLine !~ /^msgctxt/ && lastLine != \"#, fuzzy\") {\n                print \"msgctxt \\\"(qtundo-format)\\\"\"\n            }\n        }\n        { print ; lastLine = $0 }' > \"${POT_PART_QUNDOFORMAT}\"\n\n    rm -f \"${POT_PART_QUNDOFORMAT2}\"\n}\n\nfunction kundo2_aware_xgettext_internal() {\n    SRC_FILES=\"$*\"\n    POT_PART_NORMAL=\"`mktemp $podir/_normal_XXXXXXXX.pot`\"\n    POT_PART_QUNDOFORMAT=\"`mktemp $podir/_qundoformat_XXXXXXXX.pot`\"\n    POT_MERGED=\"`mktemp $podir/_merged_XXXXXXXX.pot`\"\n\n    $XGETTEXT ${CXG_EXTRA_ARGS} ${SRC_FILES} -o \"${POT_PART_NORMAL}\" --force-po\n\n    XGETTEXT_FLAGS_KUNDO2=\"\\\n--copyright-holder=This_file_is_part_of_KDE \\\n--msgid-bugs-address=http://bugs.kde.org \\\n--from-code=UTF-8\n-C -k --kde \\\n-kkundo2_i18n:1 -kkundo2_i18np:1,2 -kkundo2_i18nc:1c,2 -kkundo2_i18ncp:1c,2,3 \\\n\"\n\n    $XGETTEXT_PROGRAM ${XGETTEXT_FLAGS_KUNDO2} ${CXG_EXTRA_ARGS} ${SRC_FILES} -o \"${POT_PART_QUNDOFORMAT}\"\n\n    if [ $(cat ${POT_PART_NORMAL} ${POT_PART_QUNDOFORMAT} | grep -c \\(qtundo-format\\)) != 0 ]; then\n        echo \"ERROR: Context '(qtundo-format)' should not be added manually. Use kundo2_i18n*() calls instead.\" 1>&2\n        exit 17\n    fi\n\n    if [ -s \"${POT_PART_QUNDOFORMAT}\" ]; then\n        add_ctxt_qtundo \"${POT_PART_QUNDOFORMAT}\"\n    fi\n\n    if [ -s \"${POT_PART_NORMAL}\" -a -s \"${POT_PART_QUNDOFORMAT}\" ]; then\n        # ensure an empty line or else KDE_HEADER search will fail\n        # in case POT_PART_NORMAL only contains header\n        echo \"\" >>${POT_PART_NORMAL}\n\n        ${MSGCAT} -F \"${POT_PART_NORMAL}\" \"${POT_PART_QUNDOFORMAT}\" > ${POT_MERGED}\n        MERGED_HEADER_LINE_COUNT=$(cat ${POT_MERGED} | grep \"^$\" -B 100000 --max-count=1 | wc -l)\n        KDE_HEADER=\"$(cat ${POT_PART_NORMAL} | grep \"^$\" -B 100000 --max-count=1)\"\n        MERGED_TAIL=\"$(cat ${POT_MERGED} | tail -n +$MERGED_HEADER_LINE_COUNT)\"\n\n        # Print out the resulting .pot\n        echo \"$KDE_HEADER\"\n        echo \"$MERGED_TAIL\"\n    elif [ -s \"${POT_PART_NORMAL}\" ]; then\n        echo \"# POT_PART_NORMAL only\"\n        cat \"${POT_PART_NORMAL}\"\n    elif [ -s \"${POT_PART_QUNDOFORMAT}\" ]; then\n        echo \"# POT_PART_QUNDOFORMAT only\"\n        cat \"${POT_PART_QUNDOFORMAT}\"\n    fi\n\n    rm -f \"${POT_PART_NORMAL}\" \"${POT_PART_QUNDOFORMAT}\" \"${POT_MERGED}\"\n}\n\n# Sets EXCLUDE variable to excludes compatible with the find(1) command, e.g. '-path a -o -path b'.\n# To unconditionally exclude dir (with subdirs) just put an empty file .i18n in it.\n# To disable excluding for given file, e.g. foo.pot, add \"foo.pot\" line to the .i18n file.\nfunction find_exclude() {\n    EXCLUDE=\"\"\n    for f in `find . -name .i18n | sed 's/\\/\\.i18n$//g' | sort`; do\n        if ! grep -q \"^${1}$\" \"$f/.i18n\" ; then\n            if [ -n \"$EXCLUDE\" ] ; then EXCLUDE=\"$EXCLUDE -o \" ; fi\n            EXCLUDE=\"$EXCLUDE -path $f\"\n        fi\n    done\n    if [ -z \"$EXCLUDE\" ] ; then EXCLUDE=\"-path __dummy__\" ; fi # needed because -prune in find needs args\n}\n"
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "metainfo.yaml",
          "type": "blob",
          "size": 0.2412109375,
          "content": "maintainer: rempt\ndescription: scripting api for Krita\nplatforms:\n    - name: Linux\n    - name: FreeBSD\n    - name: Windows\n    - name: macOS\n    - name: Android\ndeprecated: false\nrelease: true\npublic_lib: true\npublic_source_dirs:\n    libs/libkis\n"
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "pch",
          "type": "tree",
          "content": null
        },
        {
          "name": "pics",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "po",
          "type": "tree",
          "content": null
        },
        {
          "name": "sdk",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.140625,
          "content": "# Setting for various Python tools (code checks, unit tests etc)\n\n[flake8]\nbuiltins = i18n,Scripter,Application,Krita\nexclude = resources_rc.py\n"
        },
        {
          "name": "winquirks",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}