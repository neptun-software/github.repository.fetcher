{
  "metadata": {
    "timestamp": 1736566209931,
    "page": 219,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cvxpy/cvxpy",
      "stars": 5552,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.041015625,
          "content": "[run]\nsource = cvxpy\nrelative_files = True"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5703125,
          "content": ".DS_Store\n*.py[cod]\n*#*\n*.swp\n*.ropeproject\n\n# C extensions\n*.so\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\n\n# Installer logs\npip-log.txt\nPipfile\nPipfile.lock\n\n# Unit test / coverage reports\n.coverage\n.tox\nnosetests.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# ipython checkpoints\n.ipynb_checkpoints\n\n# virtualenv\nenv\nenv_*\n\n# pycharm\n.idea\n\n# VS Code\n.vscode/\n.eggs\nvenv/\npip-wheel-metadata/\ntags\n\n# Things specific to this project\ncvxpy/version.py\n\n# Hypothesis testing\n.hypothesis/"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.1689453125,
          "content": "repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    # Ruff version.\n    rev: 'v0.8.1'\n    hooks:\n      - id: ruff\n        args: [--fix, --exit-non-zero-on-fix]"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.87109375,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n    # You can also specify other tool versions:\n    # nodejs: \"19\"\n    # rust: \"1.64\"\n    # golang: \"1.19\"\n\n# Build documentation in the \"docs/\" directory with Sphinx\nsphinx:\n   configuration: doc/source/conf.py\n\n# Optionally build your docs in additional formats such as PDF and ePub\n# formats:\n#    - pdf\n#    - epub\n\n# Optional but recommended, declare the Python requirements required\n# to build your documentation\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n    - method: pip\n      path: .\n    - requirements: doc/requirements.txt\n    - requirements: requirements.txt"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.3037109375,
          "content": "# CVXPY Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting Steven Diamond (diamond@cs.stanford.edu) and Akshay Agrawal (akshayka@cs.stanford.edu). All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.33203125,
          "content": "## Contributing to CVXPY\nThis document is a guide to contributing to CVXPY.\n\nWe welcome all contributions. You don't need to be an expert in optimization\nto help out.\n\n## Checklist\nContributions are made through\n[pull requests](https://help.github.com/articles/using-pull-requests/).\nBefore sending a pull request, make sure you do the following:\n- Check that your code adheres to our [coding style](#code-style)\n- Add our [license](#license) to new files\n- [Write unit tests](#writing-unit-tests)\n- Run the [unit tests](#running-unit-tests) and check that they're passing\n- Run the [benchmarks](#benchmarks) to make sure your change does not introduce a regression\n\n## Building CVXPY from source\nYou'll need to build CVXPY locally in order to start editing code. We recommend\nthat you do this in a fresh [virtual\nenvironment](https://virtualenv.pypa.io/en/latest/).\n\nTo install CVXPY from source, clone the Github repository, navigate to the\nrepository root, and run the following command:\n\n```\npython setup.py develop\n```\n\n## Contributing code\nTo contribute to CVXPY, send us pull requests. For those new to contributing,\ncheck out Github's\n[guide](https://help.github.com/articles/using-pull-requests/).\n\nOnce you've made your pull request, a member of the CVXPY development team\nwill assign themselves to review it. You might have a few back-and-forths\nwith your reviewer before it is accepted, which is completely normal. Your\npull request will trigger continuous integration tests for many different\nPython versions and different platforms. If these tests start failing, please\nfix your code and send another commit, which will re-trigger the tests.\n\nIf you'd like to add a new feature to CVXPY, or a new example to our\n[library](https://www.cvxpy.org/examples/index.html), please do propose your\nchange on a Github issue, to make sure that your priorities align with ours.\n\nIf you'd like to contribute code but don't know where to start, try one of the\nfollowing:\n* Read the CVXPY source and enhance the documentation, or address TODOs\n* Browse the [issue tracker](https://github.com/cvxpy/cvxpy/issues), and\n  look for the issues tagged \"help wanted\".\n* Polish the [example library](https://www.cvxpy.org/examples/index.html) or add new examples\n* Add a [benchmark](https://github.com/cvxpy/cvxpy/tree/master/cvxpy/tests/test_benchmarks.py)\n\n## License\nPlease add the following license to new files:\n\n```\n\"\"\"\nCopyright, the CVXPY authors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\n```\n\n## Code style\nWe use [ruff](https://docs.astral.sh/ruff/) to enforce our Python coding style. Before sending us a pull request, navigate to the project root and run\n\n```\npip install ruff\nruff check cvxpy\n```\n\nto make sure that your changes abide by our style conventions. Please fix any errors that are reported before sending the pull request.\n\nOptionally, the package [pre-commit](https://pre-commit.com/) can be installed to check these conventions automatically before every commit.\n```\npip install pre-commit\npre-commit install\n```\n\nNote on isort: if you see files changed by isort that you did not actively make changes to as part of your PR, it is an indication that the config was not picked up correctly. See [issue 1653](https://github.com/cvxpy/cvxpy/issues/1653) for details.\n\n## Writing unit tests\nMost code changes will require new unit tests. (Even bug fixes require unit tests,\nsince the presence of bugs usually indicates insufficient tests.) CVXPY tests\nlive in the directory `cvxpy/tests`, which contains many files, each of which\ncontains many unit tests. When adding tests, try to find a file in which your\ntests should belong; if you're testing a new feature, you might want to create\na new test file.\n\nWe use the standard Python [`unittest`](https://docs.python.org/3/library/unittest.html)\nframework for our tests. Tests are organized into classes, which inherit from\n`BaseTest` (see `cvxpy/tests/base_test.py`). Every method beginning with `test_` is a unit\ntest.\n\n## Running unit tests\nWe use `pytest` to run our unit tests, which you can install with `pip install pytest`.\nTo run all unit tests, `cd` into `cvxpy/tests` and run the following command:\n\n```\npytest\n````\n\nTo run tests in a specific file (e.g., `test_dgp.py`), use\n\n```\npytest test_dgp.py\n```\n\nTo run a specific test method (e.g., `TestDgp.test_product`), use\n\n```\npytest test_dgp.py::TestDgp::test_product\n```\n\nPlease make sure that your change doesn't cause any of the unit tests to fail.\n\n`pytest` suppresses stdout by default. To see stdout, pass the `-s` flag\nto `pytest`.\n\n## Benchmarks\nCVXPY has a few benchmarks in `cvxpy/tests/test_benchmarks.py`, which test\nthe time to canonicalize problems. Please run\n\n```\npytest -s cvxpy/tests/test_benchmarks.py\n```\n\nwith and without your change, to make sure no performance regressions are\nintroduced. If you are making a code contribution, please include the output of\nthe above command (with and without your change) in your pull request.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.078125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2017 Steven Diamond\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.099609375,
          "content": "graft cvxpy/cvxcore/src/\ngraft cvxpy/cvxcore/include/Eigen\ngraft cvxpy/cvxcore/python\ninclude LICENSE\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 6.171875,
          "content": "# Makefile for Sphinx documentation\n#\n\n# You can set these variables from the command line.\nGH_PAGES_SOURCES_DOC = doc/source doc/sphinxext doc/themes doc/Makefile\nGH_PAGES_SOURCES = cvxpy dev_notes.html source sphinxext themes Makefile\nSPHINXOPTS\t  =\nSPHINXBUILD   = sphinx-build\nPAPER\t\t  =\nBUILDDIR\t  = build\n\n# Internal variables.\nPAPEROPT_a4\t\t= -D latex_paper_size=a4\nPAPEROPT_letter = -D latex_paper_size=letter\nALLSPHINXOPTS\t= -d $(BUILDDIR)/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) source\n# the i18n builder cannot share the environment and doctrees with the others\nI18NSPHINXOPTS\t= $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) source\n\n.PHONY: help clean html dirhtml singlehtml pickle json htmlhelp qthelp devhelp epub latex latexpdf text man changes linkcheck doctest gettext\n\nhelp:\n\t@echo \"Please use \\`make <target>' where <target> is one of\"\n\t@echo \"  html\t\tto make standalone HTML files\"\n\t@echo \"  dirhtml\tto make HTML files named index.html in directories\"\n\t@echo \"  singlehtml to make a single large HTML file\"\n\t@echo \"  pickle\t\tto make pickle files\"\n\t@echo \"  json\t\tto make JSON files\"\n\t@echo \"  htmlhelp\tto make HTML files and a HTML help project\"\n\t@echo \"  qthelp\t\tto make HTML files and a qthelp project\"\n\t@echo \"  devhelp\tto make HTML files and a Devhelp project\"\n\t@echo \"  epub\t\tto make an epub\"\n\t@echo \"  latex\t\tto make LaTeX files, you can set PAPER=a4 or PAPER=letter\"\n\t@echo \"  latexpdf\tto make LaTeX files and run them through pdflatex\"\n\t@echo \"  text\t\tto make text files\"\n\t@echo \"  man\t\tto make manual pages\"\n\t@echo \"  texinfo\tto make Texinfo files\"\n\t@echo \"  info\t\tto make Texinfo files and run them through makeinfo\"\n\t@echo \"  gettext\tto make PO message catalogs\"\n\t@echo \"  changes\tto make an overview of all changed/added/deprecated items\"\n\t@echo \"  linkcheck\tto check all external links for integrity\"\n\t@echo \"  doctest\tto run all doctests embedded in the documentation (if enabled)\"\n\nclean:\n\t-rm -rf *.so dist cvxpy.egg-info $(BUILDDIR)\n\nhtml:\n\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html\n\t@echo\n\t@echo \"Build finished. The HTML pages are in $(BUILDDIR)/html.\"\n\ndirhtml:\n\t$(SPHINXBUILD) -b dirhtml $(ALLSPHINXOPTS) $(BUILDDIR)/dirhtml\n\t@echo\n\t@echo \"Build finished. The HTML pages are in $(BUILDDIR)/dirhtml.\"\n\nsinglehtml:\n\t$(SPHINXBUILD) -b singlehtml $(ALLSPHINXOPTS) $(BUILDDIR)/singlehtml\n\t@echo\n\t@echo \"Build finished. The HTML page is in $(BUILDDIR)/singlehtml.\"\n\npickle:\n\t$(SPHINXBUILD) -b pickle $(ALLSPHINXOPTS) $(BUILDDIR)/pickle\n\t@echo\n\t@echo \"Build finished; now you can process the pickle files.\"\n\njson:\n\t$(SPHINXBUILD) -b json $(ALLSPHINXOPTS) $(BUILDDIR)/json\n\t@echo\n\t@echo \"Build finished; now you can process the JSON files.\"\n\nhtmlhelp:\n\t$(SPHINXBUILD) -b htmlhelp $(ALLSPHINXOPTS) $(BUILDDIR)/htmlhelp\n\t@echo\n\t@echo \"Build finished; now you can run HTML Help Workshop with the\" \\\n\t\t  \".hhp project file in $(BUILDDIR)/htmlhelp.\"\n\nqthelp:\n\t$(SPHINXBUILD) -b qthelp $(ALLSPHINXOPTS) $(BUILDDIR)/qthelp\n\t@echo\n\t@echo \"Build finished; now you can run \"qcollectiongenerator\" with the\" \\\n\t\t  \".qhcp project file in $(BUILDDIR)/qthelp, like this:\"\n\t@echo \"# qcollectiongenerator $(BUILDDIR)/qthelp/cvxpy.qhcp\"\n\t@echo \"To view the help file:\"\n\t@echo \"# assistant -collectionFile $(BUILDDIR)/qthelp/cvxpy.qhc\"\n\ndevhelp:\n\t$(SPHINXBUILD) -b devhelp $(ALLSPHINXOPTS) $(BUILDDIR)/devhelp\n\t@echo\n\t@echo \"Build finished.\"\n\t@echo \"To view the help file:\"\n\t@echo \"# mkdir -p $$HOME/.local/share/devhelp/cvxpy\"\n\t@echo \"# ln -s $(BUILDDIR)/devhelp $$HOME/.local/share/devhelp/cvxpy\"\n\t@echo \"# devhelp\"\n\nepub:\n\t$(SPHINXBUILD) -b epub $(ALLSPHINXOPTS) $(BUILDDIR)/epub\n\t@echo\n\t@echo \"Build finished. The epub file is in $(BUILDDIR)/epub.\"\n\nlatex:\n\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex\n\t@echo\n\t@echo \"Build finished; the LaTeX files are in $(BUILDDIR)/latex.\"\n\t@echo \"Run \\`make' in that directory to run these through (pdf)latex\" \\\n\t\t  \"(use \\`make latexpdf' here to do that automatically).\"\n\nlatexpdf:\n\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex\n\t@echo \"Running LaTeX files through pdflatex...\"\n\t$(MAKE) -C $(BUILDDIR)/latex all-pdf\n\t@echo \"pdflatex finished; the PDF files are in $(BUILDDIR)/latex.\"\n\ntext:\n\t$(SPHINXBUILD) -b text $(ALLSPHINXOPTS) $(BUILDDIR)/text\n\t@echo\n\t@echo \"Build finished. The text files are in $(BUILDDIR)/text.\"\n\nman:\n\t$(SPHINXBUILD) -b man $(ALLSPHINXOPTS) $(BUILDDIR)/man\n\t@echo\n\t@echo \"Build finished. The manual pages are in $(BUILDDIR)/man.\"\n\ntexinfo:\n\t$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo\n\t@echo\n\t@echo \"Build finished. The Texinfo files are in $(BUILDDIR)/texinfo.\"\n\t@echo \"Run \\`make' in that directory to run these through makeinfo\" \\\n\t\t  \"(use \\`make info' here to do that automatically).\"\n\ninfo:\n\t$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo\n\t@echo \"Running Texinfo files through makeinfo...\"\n\tmake -C $(BUILDDIR)/texinfo info\n\t@echo \"makeinfo finished; the Info files are in $(BUILDDIR)/texinfo.\"\n\ngettext:\n\t$(SPHINXBUILD) -b gettext $(I18NSPHINXOPTS) $(BUILDDIR)/locale\n\t@echo\n\t@echo \"Build finished. The message catalogs are in $(BUILDDIR)/locale.\"\n\nchanges:\n\t$(SPHINXBUILD) -b changes $(ALLSPHINXOPTS) $(BUILDDIR)/changes\n\t@echo\n\t@echo \"The overview file is in $(BUILDDIR)/changes.\"\n\nlinkcheck:\n\t$(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck\n\t@echo\n\t@echo \"Link check complete; look for any errors in the above output \" \\\n\t\t  \"or in $(BUILDDIR)/linkcheck/output.txt.\"\n\ndoctest:\n\t$(SPHINXBUILD) -b doctest $(ALLSPHINXOPTS) $(BUILDDIR)/doctest\n\t@echo \"Testing of doctests in the sources finished, look at the \" \\\n\t\t  \"results in $(BUILDDIR)/doctest/output.txt.\"\n\ngh-pages:\n\tgit checkout master\n\tcd doc && make html\n\trm -rf /tmp/cvxpy_docs/*\n\tmkdir -p /tmp/cvxpy_docs/\n\tmv doc/build/html/* /tmp/cvxpy_docs/\n\tmake clean\n\tgit checkout gh-pages\n\tmv CNAME /tmp/cvxpy_docs/CNAME\n\tgit rm -r .\n\trm -rf examples\n\tmv /tmp/cvxpy_docs/* .\n\ttouch .nojekyll\n\trm -rf $(GH_PAGES_SOURCES) build doc\n\tgit add -A\n\tgit commit --no-verify -m \"Generated gh-pages for `git log master -1 --pretty=short --abbrev-commit`\" && git push origin gh-pages ; git checkout master\n# TODO(phschiele): define documentation deployment procedures in PROCEDURES.md and update or remove the command above.\n\ndevelop:\n\trm -f *.so\n\tpython setup.py clean --all\n\tpython setup.py develop\n"
        },
        {
          "name": "PROCEDURES.md",
          "type": "blob",
          "size": 6.3984375,
          "content": "# Procedures for making a new CVXPY release\n\nThis file provides the procedures for releasing a new version of CVXPY.\nThe process involves defining a new release in the commit history,\npackaging and deploying the updated source code, and deploying updated \nweb documentation.\n\n## Defining a new release\n\nCVXPY's `setup/versioning.py` file defines the following *versioning data*\n   ```\n   MAJOR : an int\n   MINOR : an int\n   MICRO : an int\n   IS_RELEASED : a bool\n   IS_RELEASE_BRANCH : a bool\n   ```\nHere we give the procedure for maintaining these values\nas one makes new minor and micro releases.\n\n### Incrementing the MINOR version number\n\nLet's say we're releasing 1.2.0.\n\n1. Starting from ``master``, checkout a new branch called ``release/1.2.x``.\n2. The versioning data in `setup/versioning.py` should already be\n   ```\n   MAJOR = 1\n   MINOR = 2\n   MICRO = 0\n   IS_RELEASED = False\n   IS_RELEASE_BRANCH = False\n   ```\n   Set ``IS_RELEASE_BRANCH = True`` and ``IS_RELEASED = True``.\n   Commit these changes and tag the commit as ``v1.2.0``.\n3. Lay the groundwork for the next release on this branch.\n   Do this by setting ``MICRO = 1``, ``IS_RELEASED = False``, and\n   committing those changes.\n   *Do not* tag the commit as a release.\n   The state of this branch is effectively a pre-release of \n   CVXPY 1.2.1.\n4. Checkout ``master``. Change the versioning data \n   from ``MINOR = 2`` to ``MINOR = 3`` and commit.\n   The state of this branch is effectively a pre-release of\n   CVXPY 1.3.0.\n5. Update `docs/source/index.rst` to say \"Welcome to CVXPY 1.3\"\n6. Extend the ``version_info`` field in ``doc/source/conf.py``.\n\n### Incrementing the MICRO version number (a.k.a., releasing a patch)\n\nLet's say we're releasing CVXPY 1.2.1\n\n1. Create a new branch `patch/1.2.1` from `release/1.2.x`. Go through all commits merged into the master branch since the previous release and use `git cherry-pick abc123`, where `abc123` is the commit into the master branch. Create a pull request against the `release/1.2.x` branch listing the commits contained in the patch.\n2. Starting from ``release/1.2.x``, the versioning data in `setup/versioning.py` (`setup.py` in earlier releases) should already be\n   ```\n   MAJOR = 1\n   MINOR = 2\n   MICRO = 1\n   IS_RELEASED = False\n   IS_RELEASE_BRANCH = True\n   ```\n   Change ``IS_RELEASED = True`` and commit that change with\n   the tag ``v1.2.1``.\n3. Lay the groundwork for the next release on this branch.\n   Do this by setting ``MICRO = 2``, ``IS_RELEASED = False``, and \n   committing those changes.\n   *Do not* tag the commit as a release.\n   The state of this branch is effectively a pre-release of \n   CVXPY 1.2.2.\n\n## Deploying a release to PyPI\n\nDeployments to PyPI are automatically triggered for every tagged commit of the release process described above.\nThis workflow is defined as a GitHub action and can be found [here](https://github.com/cvxpy/cvxpy/blob/master/.github/workflows/build.yml).\nThe progress of the deploy can be inspected by opening the workflow run marked with `v*` from the [actions tab](https://github.com/cvxpy/cvxpy/actions).\n\nAfter a successful deployment, the result should be verified on PyPI.\nIn particular, for both [cvxpy](https://pypi.org/project/cvxpy/) and [cvxpy-base](https://pypi.org/project/cvxpy-base/) \nsource files as well as all expected wheel files should be present.\n\nIf the action fails intermittently, e.g., because of time-outs during the installation of the dependencies, it can be retriggered from the [actions tab](https://github.com/cvxpy/cvxpy/actions).\nIf changes are required, the `DEPLOY` variable needs to be set manually in the workflow to allow deploys from a non-tagged commit.\n\n\n## Deploying a release to conda-forge\n\nThe following remarks are based on [@h-vetinari's comment on this GitHub Pull Request](https://github.com/cvxpy/cvxpy/pull/1598#discussion_r787062572).\n\nUpon creating a tagged commit in the cvxpy repo, a bot will open an upgrade PR on [cvxpy's conda-forge feedstock](https://github.com/conda-forge/cvxpy-feedstock).\nAll necessary changes will be concentrated in recipe/meta.yaml.\nThe changes include \n 1. updating dependency requirements,\n 2. updating the version number, and \n 3. adding the hash of the sources.\n\nThe conda-forge bot will handle (2) and (3) automatically.\nAny changes to (1) require manual intervention but are rare.\n\nOnce the PR is opened the conda-forge bot will build the packages and run the full test suite\n(except for cross-compiled architectures like osx-arm).\nIf there are failures, then the PR is not mergeable\n(resp. no artefacts will be uploaded for failing jobs once merged).\nThe updated cvxpy release will be available on conda-forge after the PR is merged.\nMerging PRs needs maintainership rights on the feedstock (which several cvxpy-people have)\n\nIf issues come up then we can ask h-vetinari or conda-forge/core for help,\nalthough we should only ping conda-forge/core if h-vetinari is unavailable.\n\nAn import note: cvxpy's conda-forge feedstock includes a patch to remove ``pyproject.toml``,\nbecause it ignores and tramples over the required build dependencies as conda-forge sets them up.\nIf this file has changed between versions, the old patch will fail to apply and will need to be rebased.\n\n## Creating a release on GitHub\nGo to the [Releases](https://github.com/cvxpy/cvxpy/releases) tab and click \"Draft a new release\". Select the previously created tag and write release notes. For minor releases, this includes a summary of new features and deprecations. Additionally, we mention the PRs contained in the release and their contributors. Take care to select the \"set as the latest release\" only for minor releases or patches to the most recent major release.\n\n## Deploying updated documentation to gh-pages\n\nThe web documentation is built and deployed using a GitHub action that can be found [here](https://github.com/cvxpy/cvxpy/blob/master/.github/workflows/docs.yml).\n\nTo deploy the docs for a specific version, navigate to the [actions tab](https://github.com/cvxpy/cvxpy/actions) and select the `docs` workflow.\nUnder `Use workflow from`, select the **Tags** tab and choose the version you want to deploy the docs for.\nThis builds the docs and commits them to the `gh-pages` branch. This in turn triggers the deployment through the `github-pages bot`, which can also be monitored in the [actions tab](https://github.com/cvxpy/cvxpy/actions).\n\nAfter the deployment, make sure that the docs are accessible through the browser, and the version selector displays all expected versions.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.951171875,
          "content": "CVXPY\n=====================\n[![Build Status](http://github.com/cvxpy/cvxpy/workflows/build/badge.svg?event=push)](https://github.com/cvxpy/cvxpy/actions/workflows/build.yml)\n![PyPI - downloads](https://img.shields.io/pypi/dm/cvxpy.svg?label=Pypi%20downloads)\n![Conda - downloads](https://img.shields.io/conda/dn/conda-forge/cvxpy.svg?label=Conda%20downloads)\n[![Discord](https://img.shields.io/badge/Chat-Discord-Blue?color=5865f2)](https://discord.gg/4urRQeGBCr)\n[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=cvxpy_cvxpy&metric=coverage)](https://sonarcloud.io/summary/new_code?id=cvxpy_cvxpy)\n[![Benchmarks](http://img.shields.io/badge/benchmarked%20by-asv-blue.svg?style=flat)](https://cvxpy.github.io/benchmarks/)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/cvxpy/cvxpy/badge)](https://api.securityscorecards.dev/projects/github.com/cvxpy/cvxpy)\n\n**The CVXPY documentation is at [cvxpy.org](https://www.cvxpy.org/).**\n\n*We are building a CVXPY community on [Discord](https://discord.gg/4urRQeGBCr). Join the conversation! For issues and long-form discussions, use [Github Issues](https://github.com/cvxpy/cvxpy/issues) and [Github Discussions](https://github.com/cvxpy/cvxpy/discussions).*\n\n**Contents**\n- [Installation](#installation)\n- [Getting started](#getting-started)\n- [Issues](#issues)\n- [Community](#community)\n- [Contributing](#contributing)\n- [Team](#team)\n- [Citing](#citing)\n\n\nCVXPY is a Python-embedded modeling language for convex optimization problems. It allows you to express your problem in a natural way that follows the math, rather than in the restrictive standard form required by solvers.\n\nFor example, the following code solves a least-squares problem where the variable is constrained by lower and upper bounds:\n\n```python3\nimport cvxpy as cp\nimport numpy\n\n# Problem data.\nm = 30\nn = 20\nnumpy.random.seed(1)\nA = numpy.random.randn(m, n)\nb = numpy.random.randn(m)\n\n# Construct the problem.\nx = cp.Variable(n)\nobjective = cp.Minimize(cp.sum_squares(A @ x - b))\nconstraints = [0 <= x, x <= 1]\nprob = cp.Problem(objective, constraints)\n\n# The optimal objective is returned by prob.solve().\nresult = prob.solve()\n# The optimal value for x is stored in x.value.\nprint(x.value)\n# The optimal Lagrange multiplier for a constraint\n# is stored in constraint.dual_value.\nprint(constraints[0].dual_value)\n```\n\nWith CVXPY, you can model\n* convex optimization problems,\n* mixed-integer convex optimization problems,\n* geometric programs, and\n* quasiconvex programs.\n\nCVXPY is not a solver. It relies upon the open source solvers \n[Clarabel](https://github.com/oxfordcontrol/Clarabel.rs), [SCS](https://github.com/bodono/scs-python),\nand [OSQP](https://github.com/oxfordcontrol/osqp). Additional solvers are\n[available](https://www.cvxpy.org/tutorial/solvers/index.html#choosing-a-solver),\nbut must be installed separately.\n\nCVXPY began as a Stanford University research project. It is now developed by\nmany people, across many institutions and countries.\n\n\n## Installation\nCVXPY is available on PyPI, and can be installed with\n```\npip install cvxpy\n```\n\nCVXPY can also be installed with conda, using\n```\nconda install -c conda-forge cvxpy\n```\n\nCVXPY has the following dependencies:\n\n- Python >= 3.9\n- Clarabel >= 0.5.0\n- OSQP >= 0.6.2\n- SCS >= 3.2.4.post1\n- NumPy >= 1.20.0\n- SciPy >= 1.6.0\n\nFor detailed instructions, see the [installation\nguide](https://www.cvxpy.org/install/index.html).\n\n## Getting started\nTo get started with CVXPY, check out the following:\n* [official CVXPY tutorial](https://www.cvxpy.org/tutorial/index.html)\n* [example library](https://www.cvxpy.org/examples/index.html)\n* [API reference](https://www.cvxpy.org/api_reference/cvxpy.html)\n\n## Issues\nWe encourage you to report issues using the [Github tracker](https://github.com/cvxpy/cvxpy/issues). We welcome all kinds of issues, especially those related to correctness, documentation, performance, and feature requests.\n\nFor basic usage questions (e.g., \"Why isn't my problem DCP?\"), please use [StackOverflow](https://stackoverflow.com/questions/tagged/cvxpy) instead.\n\n## Community\nThe CVXPY community consists of researchers, data scientists, software engineers, and students from all over the world. We welcome you to join us!\n\n* To chat with the CVXPY community in real-time, join us on [Discord](https://discord.gg/4urRQeGBCr).\n* To have longer, in-depth discussions with the CVXPY community, use [Github Discussions](https://github.com/cvxpy/cvxpy/discussions).\n* To share feature requests and bug reports, use [Github Issues](https://github.com/cvxpy/cvxpy/issues).\n\nPlease be respectful in your communications with the CVXPY community, and make sure to abide by our [code of conduct](https://github.com/cvxpy/cvxpy/blob/master/CODE_OF_CONDUCT.md).\n\n## Contributing\nWe appreciate all contributions. You don't need to be an expert in convex\noptimization to help out.\n\nYou should first\ninstall [CVXPY from source](https://www.cvxpy.org/install/index.html#install-from-source).\nHere are some simple ways to start contributing immediately:\n* Read the CVXPY source code and improve the documentation, or address TODOs\n* Enhance the [website documentation](https://github.com/cvxpy/cvxpy/tree/master/doc)\n* Browse the [issue tracker](https://github.com/cvxpy/cvxpy/issues), and look for issues tagged as \"help wanted\"\n* Polish the [example library](https://github.com/cvxpy/cvxpy/tree/master/examples)\n* Add a [benchmark](https://github.com/cvxpy/cvxpy/tree/master/cvxpy/tests/test_benchmarks.py)\n\nIf you'd like to add a new example to our library, or implement a new feature,\nplease get in touch with us first to make sure that your priorities align with\nours. \n\nContributions should be submitted as [pull requests](https://github.com/cvxpy/cvxpy/pulls).\nA member of the CVXPY development team will review the pull request and guide\nyou through the contributing process.\n\nBefore starting work on your contribution, please read the [contributing guide](https://github.com/cvxpy/cvxpy/blob/master/CONTRIBUTING.md).\n\n## Team\nCVXPY is a community project, built from the contributions of many\nresearchers and engineers.\n\nCVXPY is developed and maintained by [Steven\nDiamond](https://stevendiamond.me/), [Akshay\nAgrawal](https://akshayagrawal.com), [Riley Murray](https://rileyjmurray.wordpress.com/), \n[Philipp Schiele](https://www.philippschiele.com/),\n[Bartolomeo Stellato](https://stellato.io/),\nand [Parth Nobel](https://ptnobel.github.io), with many others contributing\nsignificantly.\nA non-exhaustive list of people who have shaped CVXPY over the\nyears includes Stephen Boyd, Eric Chu, Robin Verschueren,\nJaehyun Park, Enzo Busseti, AJ Friend, Judson Wilson, Chris Dembia, and\nWilliam Zhang.\n\nFor more information about the team and our processes, see our [governance document](https://github.com/cvxpy/org/blob/main/governance.md).\n\n## Citing\nIf you use CVXPY for academic work, we encourage you to [cite our papers](https://www.cvxpy.org/resources/citing/index.html). If you use CVXPY in industry, we'd love to hear from you as well, on Discord or over email.\n"
        },
        {
          "name": "add_gpl",
          "type": "blob",
          "size": 0.26953125,
          "content": "#!/bin/bash\n# http://stackoverflow.com/questions/151677/tool-for-adding-license-headers-to-source-files\nDIRECTORY=$*\nfor i in $DIRECTORY # or whatever other pattern...\ndo\n  if ! grep -q Copyright $i\n  then\n    cat copyright.txt $i >$i.new && mv $i.new $i\n    echo $i\n  fi\ndone"
        },
        {
          "name": "continuous_integration",
          "type": "tree",
          "content": null
        },
        {
          "name": "copyright.txt",
          "type": "blob",
          "size": 0.548828125,
          "content": "\"\"\"\nCopyright, the CVXPY authors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"\n"
        },
        {
          "name": "cvxpy",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples_roadmap.txt",
          "type": "blob",
          "size": 0.5732421875,
          "content": "core:\n    docs\n    demo - exercises lots of features\n           hello world\n\nexamples:\n    convex:\n        fitting and regression\n        geometry\n        portfolio optimization\n            - monte carlo\n        machine learning\n        flows\n        control\n            - MPC\n        filter design\n        multiprocessor\n            - regularization path\n            - consensus\n        time series\n        ADMM\n\n    Non-convex:\n        Expectation-maximization\n        Non-negative matrix factorization\n        convex-concave\n        branch and bound\n        ADMM\n        combinatorial"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.345703125,
          "content": "[tool.ruff]\n# The minimum Python version that should be supported\ntarget-version = \"py39\"\n\nline-length = 100\n\nextend-exclude = [\n    \"build\",\n    \"examples\",\n    \"doc\",\n    \"cvxpy/cvxcore/*\",\n    \"*__init__.py\"\n]\n\n[tool.ruff.lint]\nselect = [\n    \"E\",\n    \"F\",\n    \"I\",\n    \"NPY201\",\n    \"W605\",  # Check for invalid escape sequences in docstrings (errors in py >= 3.11)\n]\n\nignore = [\n    \"E721\" # Do not compare types, use 'isinstance()'\n]\n\n\n[tool.pytest.ini_options]\ntestpaths = [\n    \"cvxpy/tests/\"\n]\n\n[build-system]\nrequires = [\n    \"numpy >= 2.0.0\",\n    \"scipy >= 1.1.0\",\n    # 68.1.0 Promoted pyproject.toml's [tool.setuptools] out of beta.\n    \"setuptools >= 68.1.0\",\n    \"wheel\",\n    \"pybind11\"\n]\n\n# We need access to the 'setup' package at build time.\n# Hence we declare a custom build backend.\nbuild-backend = \"setup.build_meta\"  # just re-exports setuptools.build_meta definitions\nbackend-path = [\".\"]\n\n[project]\nname = \"cvxpy\"\ndescription = \"A domain-specific language for modeling convex optimization problems in Python.\"\ndependencies = [\n    \"osqp >= 0.6.2\",\n    \"clarabel >= 0.5.0\",\n    \"scs >= 3.2.4.post1\",\n    \"numpy >= 1.20\",\n    \"scipy >= 1.1.0\",\n]\nrequires-python = \">=3.9\"\nurls = {Homepage = \"https://github.com/cvxpy/cvxpy\"}\nlicense = {text = \"Apache License, Version 2.0\"}\nauthors = [{name = \"Steven Diamond\", email = \"stevend2@stanford.edu\"},\n           {name = \"\", email = \"akshayka@cs.stanford.edu\"},\n           {name = \"Eric Chu\", email = \"echu508@stanford.edu\"},\n           {name = \"Stephen Boyd\", email = \"boyd@stanford.edu\"}]\ndynamic = [\"version\"]\n\n[project.optional-dependencies]\n# Solver names as in cvxpy.settings = pip-installable distribution providing it\nCBC = [\"cylp>=0.91.5\"]\nCLARABEL = []\nCVXOPT = [\"cvxopt\"]\nDIFFCP = [\"diffcp\"]\nECOS = [\"ecos\"]\nECOS_BB = [\"ecos\"]\nGLOP = [\"ortools>=9.7,<9.12\"]\nGLPK = [\"cvxopt\"]\nGLPK_MI = [\"cvxopt\"]\nGUROBI = [\"gurobipy\"]\nHIGHS = [\"highspy\"]\nMOSEK = [\"Mosek\"]\nOSQP = []\nPDLP = [\"ortools>=9.7,<9.12\"]\nPIQP = [\"piqp\"]\nPROXQP = [\"proxsuite\"]\nSCIP = [\"PySCIPOpt\"]\nSCIPY = [\"scipy\"]\nSCS = [\"setuptools>65.5.1\"]\nXPRESS = [\"xpress\"]\nDAQP = [\"daqp\"]\ntesting = [\"pytest\", \"hypothesis\"]\ndoc = [\"sphinx\",\n       \"sphinxcontrib.jquery\",\n       \"sphinx-inline-tabs\",\n       \"sphinx-design\",\n       \"sphinx-immaterial>=0.11.7\"]\n\n[project.readme]\nfile = \"README.md\"\ncontent-type = \"text/markdown\"\n\n[tool.setuptools]\ninclude-package-data = false\n"
        },
        {
          "name": "rebuild_cvxcore.sh",
          "type": "blob",
          "size": 0.1337890625,
          "content": "# Assume we're in the same directory as setup.py\n\ncd cvxpy/cvxcore\nswig -Isrc -c++ -python python/cvxcore.i\ncd ..\ncd ..\npip install -e .\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.029296875,
          "content": "clarabel\nosqp\nscs\nnumpy\nscipy\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.427734375,
          "content": "import builtins\nimport distutils.version\nimport os\nimport platform\nimport sys\nimport sysconfig\n\nimport setup.extensions as setup_extensions\nimport setup.versioning as setup_versioning\n\n# BEFORE importing setuptools, remove MANIFEST. Otherwise it may not be\n# properly updated when the contents of directories change (true for distutils,\n# not sure about setuptools).\nif os.path.exists('MANIFEST'):\n    os.remove('MANIFEST')\n\nfrom setuptools import find_packages, setup\nfrom setuptools.command.build_ext import build_ext\n\n# The comment below is from the SciPy code which we adapted for cvxpy.\n#\n#   This is a bit hackish: we are setting a global variable so that the main\n#   cvxpy __init__ can detect if it is being loaded by the setup routine, to\n#   avoid attempting to load components that aren't built yet.  While ugly, it's\n#   a lot more robust than what was previously being used.\nbuiltins.__CVXPY_SETUP__ = True\n\n\n# inject numpy headers\nclass build_ext_cvxpy(build_ext):\n    def finalize_options(self) -> None:\n        build_ext.finalize_options(self)\n        # Prevent numpy from thinking it is still in its setup process:\n        builtins.__NUMPY_SETUP__ = False\n\n        import numpy\n        self.include_dirs.append(numpy.get_include())\n\n\n# For mac, ensure extensions are built for macos 10.9 when compiling on a\n# 10.9 system or above, overriding distutils behaviour which is to target\n# the version that python was built for. This may be overridden by setting\n# MACOSX_DEPLOYMENT_TARGET before calling setup.py. This behavior is\n# motivated by Apple dropping support for libstdc++.\nif sys.platform == 'darwin':\n    if 'MACOSX_DEPLOYMENT_TARGET' not in os.environ:\n        current_system = distutils.version.LooseVersion(platform.mac_ver()[0])\n        python_target = distutils.version.LooseVersion(\n            sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET'))\n        if python_target < '10.9' and current_system >= '10.9':\n            os.environ['MACOSX_DEPLOYMENT_TARGET'] = '10.9'\n\nsetup_versioning.write_version_py()\nVERSION = setup_versioning.VERSION\nextensions = [setup_extensions.cvxcore, setup_extensions.sparsecholesky]\n\nsetup(\n    name=\"cvxpy\",\n    version=str(VERSION),\n    cmdclass={'build_ext': build_ext_cvxpy},\n    ext_modules=extensions if \"PYODIDE\" not in os.environ else [],\n    packages=find_packages(exclude=[\"doc*\",\n                                    \"examples*\"]),\n    zip_safe=False,\n    package_data={\n        'cvxpy': ['py.typed'],\n    },\n)\n"
        },
        {
          "name": "setup",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-project.properties",
          "type": "blob",
          "size": 0.3515625,
          "content": "sonar.projectKey=cvxpy_cvxpy\nsonar.organization=cvxpy\n\n# Path is relative to the sonar-project.properties file. Replace \"\\\" by \"/\" on Windows.\nsonar.sources=cvxpy\nsonar.language=py\nsonar.python.version= 3.9, 3.10, 3.11, 3.12\nsonar.c.file.suffixes=-\nsonar.cpp.file.suffixes=-\nsonar.objc.file.suffixes=-\n\n# Coverage\nsonar.python.coverage.reportPaths=coverage.xml"
        }
      ]
    }
  ]
}